
STM32H7B3I_DISCO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0002c6d4  080002b0  080002b0  000102b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00005488  0802c988  0802c988  0003c988  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontSearchFlashSection 0000001c  08031e10  08031e10  00041e10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  08031e2c  08031e2c  0017ecf0  2**0
                  CONTENTS
  5 .ARM          00000000  08031e2c  08031e2c  0017ecf0  2**0
                  CONTENTS
  6 .preinit_array 00000000  08031e2c  08031e2c  0017ecf0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000014  08031e2c  08031e2c  00041e2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000008  08031e40  08031e40  00041e40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         00000110  24000000  08031e48  00050000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          0000ce38  24000110  08031f58  00050110  2**2
                  ALLOC
 11 ._user_heap_stack 00002000  2400cf48  08031f58  0005cf48  2**0
                  ALLOC
 12 .ARM.attributes 0000002e  00000000  00000000  0017ecf0  2**0
                  CONTENTS, READONLY
 13 FramebufferSection 000bf400  24040000  24040000  00060000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 14 FontFlashSection 000003ec  90000000  90000000  00120000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 15 TextFlashSection 00000040  900003ec  900003ec  001203ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 16 ExtFlashSection 0005e8c4  9000042c  9000042c  0012042c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 17 .debug_line   00050a27  00000000  00000000  0017ed1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_info   000e82ee  00000000  00000000  001cf745  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_abbrev 00015151  00000000  00000000  002b7a33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_aranges 00004788  00000000  00000000  002ccb88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    0018c8f4  00000000  00000000  002d1310  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_ranges 000042c8  00000000  00000000  0045dc08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_macro  00042228  00000000  00000000  00461ed0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .comment      000000d2  00000000  00000000  004a40f8  2**0
                  CONTENTS, READONLY
 25 .debug_frame  00013c80  00000000  00000000  004a41cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	; (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	; (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	24000110 	.word	0x24000110
 80002cc:	00000000 	.word	0x00000000
 80002d0:	0802c96c 	.word	0x0802c96c

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	; (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	; (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	; (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	24000114 	.word	0x24000114
 80002ec:	0802c96c 	.word	0x0802c96c

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_drsub>:
 8000390:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000394:	e002      	b.n	800039c <__adddf3>
 8000396:	bf00      	nop

08000398 <__aeabi_dsub>:
 8000398:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800039c <__adddf3>:
 800039c:	b530      	push	{r4, r5, lr}
 800039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003a6:	ea94 0f05 	teq	r4, r5
 80003aa:	bf08      	it	eq
 80003ac:	ea90 0f02 	teqeq	r0, r2
 80003b0:	bf1f      	itttt	ne
 80003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003c2:	f000 80e2 	beq.w	800058a <__adddf3+0x1ee>
 80003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ce:	bfb8      	it	lt
 80003d0:	426d      	neglt	r5, r5
 80003d2:	dd0c      	ble.n	80003ee <__adddf3+0x52>
 80003d4:	442c      	add	r4, r5
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	ea82 0000 	eor.w	r0, r2, r0
 80003e2:	ea83 0101 	eor.w	r1, r3, r1
 80003e6:	ea80 0202 	eor.w	r2, r0, r2
 80003ea:	ea81 0303 	eor.w	r3, r1, r3
 80003ee:	2d36      	cmp	r5, #54	; 0x36
 80003f0:	bf88      	it	hi
 80003f2:	bd30      	pophi	{r4, r5, pc}
 80003f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000404:	d002      	beq.n	800040c <__adddf3+0x70>
 8000406:	4240      	negs	r0, r0
 8000408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800040c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x84>
 800041a:	4252      	negs	r2, r2
 800041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000420:	ea94 0f05 	teq	r4, r5
 8000424:	f000 80a7 	beq.w	8000576 <__adddf3+0x1da>
 8000428:	f1a4 0401 	sub.w	r4, r4, #1
 800042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000430:	db0d      	blt.n	800044e <__adddf3+0xb2>
 8000432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000436:	fa22 f205 	lsr.w	r2, r2, r5
 800043a:	1880      	adds	r0, r0, r2
 800043c:	f141 0100 	adc.w	r1, r1, #0
 8000440:	fa03 f20e 	lsl.w	r2, r3, lr
 8000444:	1880      	adds	r0, r0, r2
 8000446:	fa43 f305 	asr.w	r3, r3, r5
 800044a:	4159      	adcs	r1, r3
 800044c:	e00e      	b.n	800046c <__adddf3+0xd0>
 800044e:	f1a5 0520 	sub.w	r5, r5, #32
 8000452:	f10e 0e20 	add.w	lr, lr, #32
 8000456:	2a01      	cmp	r2, #1
 8000458:	fa03 fc0e 	lsl.w	ip, r3, lr
 800045c:	bf28      	it	cs
 800045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000462:	fa43 f305 	asr.w	r3, r3, r5
 8000466:	18c0      	adds	r0, r0, r3
 8000468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800046c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000470:	d507      	bpl.n	8000482 <__adddf3+0xe6>
 8000472:	f04f 0e00 	mov.w	lr, #0
 8000476:	f1dc 0c00 	rsbs	ip, ip, #0
 800047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000482:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000486:	d31b      	bcc.n	80004c0 <__adddf3+0x124>
 8000488:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800048c:	d30c      	bcc.n	80004a8 <__adddf3+0x10c>
 800048e:	0849      	lsrs	r1, r1, #1
 8000490:	ea5f 0030 	movs.w	r0, r0, rrx
 8000494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000498:	f104 0401 	add.w	r4, r4, #1
 800049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004a4:	f080 809a 	bcs.w	80005dc <__adddf3+0x240>
 80004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004ac:	bf08      	it	eq
 80004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004b2:	f150 0000 	adcs.w	r0, r0, #0
 80004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ba:	ea41 0105 	orr.w	r1, r1, r5
 80004be:	bd30      	pop	{r4, r5, pc}
 80004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004c4:	4140      	adcs	r0, r0
 80004c6:	eb41 0101 	adc.w	r1, r1, r1
 80004ca:	3c01      	subs	r4, #1
 80004cc:	bf28      	it	cs
 80004ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004d2:	d2e9      	bcs.n	80004a8 <__adddf3+0x10c>
 80004d4:	f091 0f00 	teq	r1, #0
 80004d8:	bf04      	itt	eq
 80004da:	4601      	moveq	r1, r0
 80004dc:	2000      	moveq	r0, #0
 80004de:	fab1 f381 	clz	r3, r1
 80004e2:	bf08      	it	eq
 80004e4:	3320      	addeq	r3, #32
 80004e6:	f1a3 030b 	sub.w	r3, r3, #11
 80004ea:	f1b3 0220 	subs.w	r2, r3, #32
 80004ee:	da0c      	bge.n	800050a <__adddf3+0x16e>
 80004f0:	320c      	adds	r2, #12
 80004f2:	dd08      	ble.n	8000506 <__adddf3+0x16a>
 80004f4:	f102 0c14 	add.w	ip, r2, #20
 80004f8:	f1c2 020c 	rsb	r2, r2, #12
 80004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000500:	fa21 f102 	lsr.w	r1, r1, r2
 8000504:	e00c      	b.n	8000520 <__adddf3+0x184>
 8000506:	f102 0214 	add.w	r2, r2, #20
 800050a:	bfd8      	it	le
 800050c:	f1c2 0c20 	rsble	ip, r2, #32
 8000510:	fa01 f102 	lsl.w	r1, r1, r2
 8000514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000518:	bfdc      	itt	le
 800051a:	ea41 010c 	orrle.w	r1, r1, ip
 800051e:	4090      	lslle	r0, r2
 8000520:	1ae4      	subs	r4, r4, r3
 8000522:	bfa2      	ittt	ge
 8000524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000528:	4329      	orrge	r1, r5
 800052a:	bd30      	popge	{r4, r5, pc}
 800052c:	ea6f 0404 	mvn.w	r4, r4
 8000530:	3c1f      	subs	r4, #31
 8000532:	da1c      	bge.n	800056e <__adddf3+0x1d2>
 8000534:	340c      	adds	r4, #12
 8000536:	dc0e      	bgt.n	8000556 <__adddf3+0x1ba>
 8000538:	f104 0414 	add.w	r4, r4, #20
 800053c:	f1c4 0220 	rsb	r2, r4, #32
 8000540:	fa20 f004 	lsr.w	r0, r0, r4
 8000544:	fa01 f302 	lsl.w	r3, r1, r2
 8000548:	ea40 0003 	orr.w	r0, r0, r3
 800054c:	fa21 f304 	lsr.w	r3, r1, r4
 8000550:	ea45 0103 	orr.w	r1, r5, r3
 8000554:	bd30      	pop	{r4, r5, pc}
 8000556:	f1c4 040c 	rsb	r4, r4, #12
 800055a:	f1c4 0220 	rsb	r2, r4, #32
 800055e:	fa20 f002 	lsr.w	r0, r0, r2
 8000562:	fa01 f304 	lsl.w	r3, r1, r4
 8000566:	ea40 0003 	orr.w	r0, r0, r3
 800056a:	4629      	mov	r1, r5
 800056c:	bd30      	pop	{r4, r5, pc}
 800056e:	fa21 f004 	lsr.w	r0, r1, r4
 8000572:	4629      	mov	r1, r5
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f094 0f00 	teq	r4, #0
 800057a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800057e:	bf06      	itte	eq
 8000580:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000584:	3401      	addeq	r4, #1
 8000586:	3d01      	subne	r5, #1
 8000588:	e74e      	b.n	8000428 <__adddf3+0x8c>
 800058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800058e:	bf18      	it	ne
 8000590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000594:	d029      	beq.n	80005ea <__adddf3+0x24e>
 8000596:	ea94 0f05 	teq	r4, r5
 800059a:	bf08      	it	eq
 800059c:	ea90 0f02 	teqeq	r0, r2
 80005a0:	d005      	beq.n	80005ae <__adddf3+0x212>
 80005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005a6:	bf04      	itt	eq
 80005a8:	4619      	moveq	r1, r3
 80005aa:	4610      	moveq	r0, r2
 80005ac:	bd30      	pop	{r4, r5, pc}
 80005ae:	ea91 0f03 	teq	r1, r3
 80005b2:	bf1e      	ittt	ne
 80005b4:	2100      	movne	r1, #0
 80005b6:	2000      	movne	r0, #0
 80005b8:	bd30      	popne	{r4, r5, pc}
 80005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005be:	d105      	bne.n	80005cc <__adddf3+0x230>
 80005c0:	0040      	lsls	r0, r0, #1
 80005c2:	4149      	adcs	r1, r1
 80005c4:	bf28      	it	cs
 80005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005ca:	bd30      	pop	{r4, r5, pc}
 80005cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005d0:	bf3c      	itt	cc
 80005d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005d6:	bd30      	popcc	{r4, r5, pc}
 80005d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005e4:	f04f 0000 	mov.w	r0, #0
 80005e8:	bd30      	pop	{r4, r5, pc}
 80005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ee:	bf1a      	itte	ne
 80005f0:	4619      	movne	r1, r3
 80005f2:	4610      	movne	r0, r2
 80005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005f8:	bf1c      	itt	ne
 80005fa:	460b      	movne	r3, r1
 80005fc:	4602      	movne	r2, r0
 80005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000602:	bf06      	itte	eq
 8000604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000608:	ea91 0f03 	teqeq	r1, r3
 800060c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	bf00      	nop

08000614 <__aeabi_ui2d>:
 8000614:	f090 0f00 	teq	r0, #0
 8000618:	bf04      	itt	eq
 800061a:	2100      	moveq	r1, #0
 800061c:	4770      	bxeq	lr
 800061e:	b530      	push	{r4, r5, lr}
 8000620:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000624:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000628:	f04f 0500 	mov.w	r5, #0
 800062c:	f04f 0100 	mov.w	r1, #0
 8000630:	e750      	b.n	80004d4 <__adddf3+0x138>
 8000632:	bf00      	nop

08000634 <__aeabi_i2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000648:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800064c:	bf48      	it	mi
 800064e:	4240      	negmi	r0, r0
 8000650:	f04f 0100 	mov.w	r1, #0
 8000654:	e73e      	b.n	80004d4 <__adddf3+0x138>
 8000656:	bf00      	nop

08000658 <__aeabi_f2d>:
 8000658:	0042      	lsls	r2, r0, #1
 800065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000666:	bf1f      	itttt	ne
 8000668:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800066c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000670:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000674:	4770      	bxne	lr
 8000676:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800067a:	bf08      	it	eq
 800067c:	4770      	bxeq	lr
 800067e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000682:	bf04      	itt	eq
 8000684:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000688:	4770      	bxeq	lr
 800068a:	b530      	push	{r4, r5, lr}
 800068c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000690:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000694:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000698:	e71c      	b.n	80004d4 <__adddf3+0x138>
 800069a:	bf00      	nop

0800069c <__aeabi_ul2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f04f 0500 	mov.w	r5, #0
 80006aa:	e00a      	b.n	80006c2 <__aeabi_l2d+0x16>

080006ac <__aeabi_l2d>:
 80006ac:	ea50 0201 	orrs.w	r2, r0, r1
 80006b0:	bf08      	it	eq
 80006b2:	4770      	bxeq	lr
 80006b4:	b530      	push	{r4, r5, lr}
 80006b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006ba:	d502      	bpl.n	80006c2 <__aeabi_l2d+0x16>
 80006bc:	4240      	negs	r0, r0
 80006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ce:	f43f aed8 	beq.w	8000482 <__adddf3+0xe6>
 80006d2:	f04f 0203 	mov.w	r2, #3
 80006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006da:	bf18      	it	ne
 80006dc:	3203      	addne	r2, #3
 80006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006e2:	bf18      	it	ne
 80006e4:	3203      	addne	r2, #3
 80006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006ea:	f1c2 0320 	rsb	r3, r2, #32
 80006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80006f2:	fa20 f002 	lsr.w	r0, r0, r2
 80006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006fa:	ea40 000e 	orr.w	r0, r0, lr
 80006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000702:	4414      	add	r4, r2
 8000704:	e6bd      	b.n	8000482 <__adddf3+0xe6>
 8000706:	bf00      	nop

08000708 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000708:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000740 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 800070c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800070e:	e003      	b.n	8000718 <LoopCopyDataInit>

08000710 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000710:	4b0c      	ldr	r3, [pc, #48]	; (8000744 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000712:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000714:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000716:	3104      	adds	r1, #4

08000718 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000718:	480b      	ldr	r0, [pc, #44]	; (8000748 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800071a:	4b0c      	ldr	r3, [pc, #48]	; (800074c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800071c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800071e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000720:	d3f6      	bcc.n	8000710 <CopyDataInit>
  ldr  r2, =_sbss
 8000722:	4a0b      	ldr	r2, [pc, #44]	; (8000750 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000724:	e002      	b.n	800072c <LoopFillZerobss>

08000726 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8000726:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000728:	f842 3b04 	str.w	r3, [r2], #4

0800072c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800072c:	4b09      	ldr	r3, [pc, #36]	; (8000754 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800072e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000730:	d3f9      	bcc.n	8000726 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000732:	f00a fe27 	bl	800b384 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000736:	f02b f8e9 	bl	802b90c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800073a:	f002 fa49 	bl	8002bd0 <main>
  bx  lr
 800073e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000740:	24040000 	.word	0x24040000
  ldr  r3, =_sidata
 8000744:	08031e48 	.word	0x08031e48
  ldr  r0, =_sdata
 8000748:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 800074c:	24000110 	.word	0x24000110
  ldr  r2, =_sbss
 8000750:	24000110 	.word	0x24000110
  ldr  r3, = _ebss
 8000754:	2400cf48 	.word	0x2400cf48

08000758 <BDMA1_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000758:	e7fe      	b.n	8000758 <BDMA1_IRQHandler>

0800075a <MX_TouchGFX_Init>:

/**
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
 800075a:	b580      	push	{r7, lr}
 800075c:	af00      	add	r7, sp, #0
  // Calling forward to touchgfx_init in C++ domain
  touchgfx_init();
 800075e:	f001 fd0f 	bl	8002180 <touchgfx_init>
}
 8000762:	bf00      	nop
 8000764:	bd80      	pop	{r7, pc}

08000766 <TouchGFX_Task>:

/**
 * TouchGFX application thread
 */
void TouchGFX_Task(void *argument)
{
 8000766:	b580      	push	{r7, lr}
 8000768:	b082      	sub	sp, #8
 800076a:	af00      	add	r7, sp, #0
 800076c:	6078      	str	r0, [r7, #4]
  // Calling forward to touchgfx_taskEntry in C++ domain
  touchgfx_taskEntry();
 800076e:	f001 fd31 	bl	80021d4 <touchgfx_taskEntry>
}
 8000772:	bf00      	nop
 8000774:	3708      	adds	r7, #8
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}
	...

0800077c <_ZN8touchgfx15TouchControllerD1Ev>:
/** Basic Touch Controller interface. */
class TouchController
{
public:
    /** Finalizes an instance of the TouchController class. */
    virtual ~TouchController()
 800077c:	b480      	push	{r7}
 800077e:	b083      	sub	sp, #12
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
    {
 8000784:	4a04      	ldr	r2, [pc, #16]	; (8000798 <_ZN8touchgfx15TouchControllerD1Ev+0x1c>)
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	601a      	str	r2, [r3, #0]
    }
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	4618      	mov	r0, r3
 800078e:	370c      	adds	r7, #12
 8000790:	46bd      	mov	sp, r7
 8000792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000796:	4770      	bx	lr
 8000798:	0802d880 	.word	0x0802d880

0800079c <_ZN8touchgfx15TouchControllerD0Ev>:
    virtual ~TouchController()
 800079c:	b580      	push	{r7, lr}
 800079e:	b082      	sub	sp, #8
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
    }
 80007a4:	6878      	ldr	r0, [r7, #4]
 80007a6:	f7ff ffe9 	bl	800077c <_ZN8touchgfx15TouchControllerD1Ev>
 80007aa:	2104      	movs	r1, #4
 80007ac:	6878      	ldr	r0, [r7, #4]
 80007ae:	f02a fe8e 	bl	802b4ce <_ZdlPvj>
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	4618      	mov	r0, r3
 80007b6:	3708      	adds	r7, #8
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bd80      	pop	{r7, pc}

080007bc <_ZN20STM32TouchController4initEv>:
#include <stm32h7b3i_discovery_ts.h>
#include <TouchGFXHAL.hpp>
#include <cmsis_os.h>

void STM32TouchController::init()
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b086      	sub	sp, #24
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
    TS_Init_t hTS;

    hTS.Orientation = TS_SWAP_XY;
 80007c4:	2308      	movs	r3, #8
 80007c6:	613b      	str	r3, [r7, #16]
    hTS.Accuracy = 0;
 80007c8:	2300      	movs	r3, #0
 80007ca:	617b      	str	r3, [r7, #20]
    hTS.Width = touchgfx::HAL::FRAME_BUFFER_WIDTH;
 80007cc:	4b07      	ldr	r3, [pc, #28]	; (80007ec <_ZN20STM32TouchController4initEv+0x30>)
 80007ce:	881b      	ldrh	r3, [r3, #0]
 80007d0:	60bb      	str	r3, [r7, #8]
    hTS.Height = touchgfx::HAL::FRAME_BUFFER_HEIGHT;
 80007d2:	4b07      	ldr	r3, [pc, #28]	; (80007f0 <_ZN20STM32TouchController4initEv+0x34>)
 80007d4:	881b      	ldrh	r3, [r3, #0]
 80007d6:	60fb      	str	r3, [r7, #12]
    BSP_TS_Init(0, &hTS);
 80007d8:	f107 0308 	add.w	r3, r7, #8
 80007dc:	4619      	mov	r1, r3
 80007de:	2000      	movs	r0, #0
 80007e0:	f00a fbb2 	bl	800af48 <BSP_TS_Init>
}
 80007e4:	bf00      	nop
 80007e6:	3718      	adds	r7, #24
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bd80      	pop	{r7, pc}
 80007ec:	2400c8b6 	.word	0x2400c8b6
 80007f0:	2400c8b8 	.word	0x2400c8b8

080007f4 <_ZN20STM32TouchController11sampleTouchERlS0_>:

bool STM32TouchController::sampleTouch(int32_t& x, int32_t& y)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b088      	sub	sp, #32
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	60f8      	str	r0, [r7, #12]
 80007fc:	60b9      	str	r1, [r7, #8]
 80007fe:	607a      	str	r2, [r7, #4]
    TS_State_t TS_State = { 0 };
 8000800:	f107 0310 	add.w	r3, r7, #16
 8000804:	2200      	movs	r2, #0
 8000806:	601a      	str	r2, [r3, #0]
 8000808:	605a      	str	r2, [r3, #4]
 800080a:	609a      	str	r2, [r3, #8]

    /* This should never fail !! */
    if (BSP_TS_GetState(0, &TS_State) != BSP_ERROR_NONE)
 800080c:	f107 0310 	add.w	r3, r7, #16
 8000810:	4619      	mov	r1, r3
 8000812:	2000      	movs	r0, #0
 8000814:	f00a fc3e 	bl	800b094 <BSP_TS_GetState>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	bf14      	ite	ne
 800081e:	2301      	movne	r3, #1
 8000820:	2300      	moveq	r3, #0
 8000822:	b2db      	uxtb	r3, r3
 8000824:	2b00      	cmp	r3, #0
 8000826:	d00a      	beq.n	800083e <_ZN20STM32TouchController11sampleTouchERlS0_+0x4a>
		"	mov %0, %1												\n"	\
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
 8000828:	f04f 0350 	mov.w	r3, #80	; 0x50
 800082c:	f383 8811 	msr	BASEPRI, r3
 8000830:	f3bf 8f6f 	isb	sy
 8000834:	f3bf 8f4f 	dsb	sy
 8000838:	61fb      	str	r3, [r7, #28]
}
 800083a:	bf00      	nop
    {
        configASSERT(0);
 800083c:	e7fe      	b.n	800083c <_ZN20STM32TouchController11sampleTouchERlS0_+0x48>
    }

    if (TS_State.TouchDetected)
 800083e:	693b      	ldr	r3, [r7, #16]
 8000840:	2b00      	cmp	r3, #0
 8000842:	d009      	beq.n	8000858 <_ZN20STM32TouchController11sampleTouchERlS0_+0x64>
    {
        x = TS_State.TouchX;
 8000844:	697b      	ldr	r3, [r7, #20]
 8000846:	461a      	mov	r2, r3
 8000848:	68bb      	ldr	r3, [r7, #8]
 800084a:	601a      	str	r2, [r3, #0]
        y = TS_State.TouchY;
 800084c:	69bb      	ldr	r3, [r7, #24]
 800084e:	461a      	mov	r2, r3
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	601a      	str	r2, [r3, #0]

        return true;
 8000854:	2301      	movs	r3, #1
 8000856:	e000      	b.n	800085a <_ZN20STM32TouchController11sampleTouchERlS0_+0x66>
    }

    return false;
 8000858:	2300      	movs	r3, #0
}
 800085a:	4618      	mov	r0, r3
 800085c:	3720      	adds	r7, #32
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}
	...

08000864 <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 8000864:	b580      	push	{r7, lr}
 8000866:	b082      	sub	sp, #8
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
 800086c:	4a05      	ldr	r2, [pc, #20]	; (8000884 <_ZN20STM32TouchControllerD1Ev+0x20>)
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	601a      	str	r2, [r3, #0]
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	4618      	mov	r0, r3
 8000876:	f7ff ff81 	bl	800077c <_ZN8touchgfx15TouchControllerD1Ev>
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	4618      	mov	r0, r3
 800087e:	3708      	adds	r7, #8
 8000880:	46bd      	mov	sp, r7
 8000882:	bd80      	pop	{r7, pc}
 8000884:	0802d868 	.word	0x0802d868

08000888 <_ZN20STM32TouchControllerD0Ev>:
 8000888:	b580      	push	{r7, lr}
 800088a:	b082      	sub	sp, #8
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
 8000890:	6878      	ldr	r0, [r7, #4]
 8000892:	f7ff ffe7 	bl	8000864 <_ZN20STM32TouchControllerD1Ev>
 8000896:	2104      	movs	r1, #4
 8000898:	6878      	ldr	r0, [r7, #4]
 800089a:	f02a fe18 	bl	802b4ce <_ZdlPvj>
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	4618      	mov	r0, r3
 80008a2:	3708      	adds	r7, #8
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bd80      	pop	{r7, pc}

080008a8 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:

/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b082      	sub	sp, #8
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	4603      	mov	r3, r0
 80008b0:	71fb      	strb	r3, [r7, #7]
    switch (id)
 80008b2:	79fb      	ldrb	r3, [r7, #7]
 80008b4:	2b03      	cmp	r3, #3
 80008b6:	d831      	bhi.n	800091c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x74>
 80008b8:	a201      	add	r2, pc, #4	; (adr r2, 80008c0 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x18>)
 80008ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008be:	bf00      	nop
 80008c0:	080008d1 	.word	0x080008d1
 80008c4:	080008eb 	.word	0x080008eb
 80008c8:	08000903 	.word	0x08000903
 80008cc:	08000911 	.word	0x08000911
    {
    case GPIO::VSYNC_FREQ:
        HAL_GPIO_WritePin(GPIOG, LED3_Pin, GPIO_PIN_SET);
 80008d0:	2201      	movs	r2, #1
 80008d2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80008d6:	4813      	ldr	r0, [pc, #76]	; (8000924 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x7c>)
 80008d8:	f00d f96c 	bl	800dbb4 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOG, VSYNC_FREQ_Pin, GPIO_PIN_SET);
 80008dc:	2201      	movs	r2, #1
 80008de:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80008e2:	4810      	ldr	r0, [pc, #64]	; (8000924 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x7c>)
 80008e4:	f00d f966 	bl	800dbb4 <HAL_GPIO_WritePin>
        break;
 80008e8:	e018      	b.n	800091c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x74>
    case GPIO::RENDER_TIME:
        HAL_GPIO_WritePin(GPIOG, LED2_Pin, GPIO_PIN_SET);
 80008ea:	2201      	movs	r2, #1
 80008ec:	2104      	movs	r1, #4
 80008ee:	480d      	ldr	r0, [pc, #52]	; (8000924 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x7c>)
 80008f0:	f00d f960 	bl	800dbb4 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOG, RENDER_TIME_Pin, GPIO_PIN_SET);
 80008f4:	2201      	movs	r2, #1
 80008f6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80008fa:	480a      	ldr	r0, [pc, #40]	; (8000924 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x7c>)
 80008fc:	f00d f95a 	bl	800dbb4 <HAL_GPIO_WritePin>
        break;
 8000900:	e00c      	b.n	800091c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x74>
    case GPIO::FRAME_RATE:
        HAL_GPIO_WritePin(GPIOG, FRAME_RATE_Pin, GPIO_PIN_SET);
 8000902:	2201      	movs	r2, #1
 8000904:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000908:	4806      	ldr	r0, [pc, #24]	; (8000924 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x7c>)
 800090a:	f00d f953 	bl	800dbb4 <HAL_GPIO_WritePin>
        break;
 800090e:	e005      	b.n	800091c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x74>
    case GPIO::MCU_ACTIVE:
        HAL_GPIO_WritePin(GPIOG, MCU_ACTIVE_Pin, GPIO_PIN_SET);
 8000910:	2201      	movs	r2, #1
 8000912:	2101      	movs	r1, #1
 8000914:	4803      	ldr	r0, [pc, #12]	; (8000924 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x7c>)
 8000916:	f00d f94d 	bl	800dbb4 <HAL_GPIO_WritePin>
        break;
 800091a:	bf00      	nop
    }
}
 800091c:	bf00      	nop
 800091e:	3708      	adds	r7, #8
 8000920:	46bd      	mov	sp, r7
 8000922:	bd80      	pop	{r7, pc}
 8000924:	58021800 	.word	0x58021800

08000928 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:

/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b082      	sub	sp, #8
 800092c:	af00      	add	r7, sp, #0
 800092e:	4603      	mov	r3, r0
 8000930:	71fb      	strb	r3, [r7, #7]
    switch (id)
 8000932:	79fb      	ldrb	r3, [r7, #7]
 8000934:	2b03      	cmp	r3, #3
 8000936:	d831      	bhi.n	800099c <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x74>
 8000938:	a201      	add	r2, pc, #4	; (adr r2, 8000940 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x18>)
 800093a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800093e:	bf00      	nop
 8000940:	08000951 	.word	0x08000951
 8000944:	0800096b 	.word	0x0800096b
 8000948:	08000983 	.word	0x08000983
 800094c:	08000991 	.word	0x08000991
    {
    case GPIO::VSYNC_FREQ:
        HAL_GPIO_WritePin(GPIOG, LED3_Pin, GPIO_PIN_RESET);
 8000950:	2200      	movs	r2, #0
 8000952:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000956:	4813      	ldr	r0, [pc, #76]	; (80009a4 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x7c>)
 8000958:	f00d f92c 	bl	800dbb4 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOG, VSYNC_FREQ_Pin, GPIO_PIN_RESET);
 800095c:	2200      	movs	r2, #0
 800095e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000962:	4810      	ldr	r0, [pc, #64]	; (80009a4 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x7c>)
 8000964:	f00d f926 	bl	800dbb4 <HAL_GPIO_WritePin>
        break;
 8000968:	e018      	b.n	800099c <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x74>
    case GPIO::RENDER_TIME:
        HAL_GPIO_WritePin(GPIOG, LED2_Pin, GPIO_PIN_RESET);
 800096a:	2200      	movs	r2, #0
 800096c:	2104      	movs	r1, #4
 800096e:	480d      	ldr	r0, [pc, #52]	; (80009a4 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x7c>)
 8000970:	f00d f920 	bl	800dbb4 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOG, RENDER_TIME_Pin, GPIO_PIN_RESET);
 8000974:	2200      	movs	r2, #0
 8000976:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800097a:	480a      	ldr	r0, [pc, #40]	; (80009a4 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x7c>)
 800097c:	f00d f91a 	bl	800dbb4 <HAL_GPIO_WritePin>
        break;
 8000980:	e00c      	b.n	800099c <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x74>
    case GPIO::FRAME_RATE:
        HAL_GPIO_WritePin(GPIOG, FRAME_RATE_Pin, GPIO_PIN_RESET);
 8000982:	2200      	movs	r2, #0
 8000984:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000988:	4806      	ldr	r0, [pc, #24]	; (80009a4 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x7c>)
 800098a:	f00d f913 	bl	800dbb4 <HAL_GPIO_WritePin>
        break;
 800098e:	e005      	b.n	800099c <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x74>
    case GPIO::MCU_ACTIVE:
        HAL_GPIO_WritePin(GPIOG, MCU_ACTIVE_Pin, GPIO_PIN_RESET);
 8000990:	2200      	movs	r2, #0
 8000992:	2101      	movs	r1, #1
 8000994:	4803      	ldr	r0, [pc, #12]	; (80009a4 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x7c>)
 8000996:	f00d f90d 	bl	800dbb4 <HAL_GPIO_WritePin>
        break;
 800099a:	bf00      	nop
    }
}
 800099c:	bf00      	nop
 800099e:	3708      	adds	r7, #8
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bd80      	pop	{r7, pc}
 80009a4:	58021800 	.word	0x58021800

080009a8 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:

/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b082      	sub	sp, #8
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	4603      	mov	r3, r0
 80009b0:	71fb      	strb	r3, [r7, #7]
    switch (id)
 80009b2:	79fb      	ldrb	r3, [r7, #7]
 80009b4:	2b03      	cmp	r3, #3
 80009b6:	d82b      	bhi.n	8000a10 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x68>
 80009b8:	a201      	add	r2, pc, #4	; (adr r2, 80009c0 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x18>)
 80009ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009be:	bf00      	nop
 80009c0:	080009d1 	.word	0x080009d1
 80009c4:	080009e7 	.word	0x080009e7
 80009c8:	080009fb 	.word	0x080009fb
 80009cc:	08000a07 	.word	0x08000a07
    {
    case GPIO::VSYNC_FREQ:
        HAL_GPIO_TogglePin(GPIOG, LED3_Pin);
 80009d0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80009d4:	4810      	ldr	r0, [pc, #64]	; (8000a18 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x70>)
 80009d6:	f00d f906 	bl	800dbe6 <HAL_GPIO_TogglePin>
        HAL_GPIO_TogglePin(GPIOG, VSYNC_FREQ_Pin);
 80009da:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80009de:	480e      	ldr	r0, [pc, #56]	; (8000a18 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x70>)
 80009e0:	f00d f901 	bl	800dbe6 <HAL_GPIO_TogglePin>
        break;
 80009e4:	e014      	b.n	8000a10 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x68>
    case GPIO::RENDER_TIME:
        HAL_GPIO_TogglePin(GPIOG, LED2_Pin);
 80009e6:	2104      	movs	r1, #4
 80009e8:	480b      	ldr	r0, [pc, #44]	; (8000a18 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x70>)
 80009ea:	f00d f8fc 	bl	800dbe6 <HAL_GPIO_TogglePin>
        HAL_GPIO_TogglePin(GPIOG, RENDER_TIME_Pin);
 80009ee:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80009f2:	4809      	ldr	r0, [pc, #36]	; (8000a18 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x70>)
 80009f4:	f00d f8f7 	bl	800dbe6 <HAL_GPIO_TogglePin>
        break;
 80009f8:	e00a      	b.n	8000a10 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x68>
    case GPIO::FRAME_RATE:
        HAL_GPIO_TogglePin(GPIOG, FRAME_RATE_Pin);
 80009fa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80009fe:	4806      	ldr	r0, [pc, #24]	; (8000a18 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x70>)
 8000a00:	f00d f8f1 	bl	800dbe6 <HAL_GPIO_TogglePin>
        break;
 8000a04:	e004      	b.n	8000a10 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x68>
    case GPIO::MCU_ACTIVE:
        HAL_GPIO_TogglePin(GPIOG, MCU_ACTIVE_Pin);
 8000a06:	2101      	movs	r1, #1
 8000a08:	4803      	ldr	r0, [pc, #12]	; (8000a18 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x70>)
 8000a0a:	f00d f8ec 	bl	800dbe6 <HAL_GPIO_TogglePin>
        break;
 8000a0e:	bf00      	nop
    }
}
 8000a10:	bf00      	nop
 8000a12:	3708      	adds	r7, #8
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bd80      	pop	{r7, pc}
 8000a18:	58021800 	.word	0x58021800

08000a1c <_ZN8touchgfx3HALD1Ev>:
        DISPLAY_ROTATION = rotate0;
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
    }

    /** Finalizes an instance of the HAL class. */
    virtual ~HAL()
 8000a1c:	b480      	push	{r7}
 8000a1e:	b083      	sub	sp, #12
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
    {
 8000a24:	4a04      	ldr	r2, [pc, #16]	; (8000a38 <_ZN8touchgfx3HALD1Ev+0x1c>)
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	601a      	str	r2, [r3, #0]
    }
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	370c      	adds	r7, #12
 8000a30:	46bd      	mov	sp, r7
 8000a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a36:	4770      	bx	lr
 8000a38:	0802eb64 	.word	0x0802eb64

08000a3c <_ZN8touchgfx3HALD0Ev>:
    virtual ~HAL()
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b082      	sub	sp, #8
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
    }
 8000a44:	6878      	ldr	r0, [r7, #4]
 8000a46:	f7ff ffe9 	bl	8000a1c <_ZN8touchgfx3HALD1Ev>
 8000a4a:	217c      	movs	r1, #124	; 0x7c
 8000a4c:	6878      	ldr	r0, [r7, #4]
 8000a4e:	f02a fd3e 	bl	802b4ce <_ZdlPvj>
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	4618      	mov	r0, r3
 8000a56:	3708      	adds	r7, #8
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bd80      	pop	{r7, pc}

08000a5c <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
     *
     * @param  orientation The desired display orientation.
     *
     * @note A screen transition must occur before this takes effect!
     */
    virtual void setDisplayOrientation(DisplayOrientation orientation)
 8000a5c:	b480      	push	{r7}
 8000a5e:	b083      	sub	sp, #12
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
 8000a64:	460b      	mov	r3, r1
 8000a66:	70fb      	strb	r3, [r7, #3]
    {
        requestedOrientation = orientation;
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	78fa      	ldrb	r2, [r7, #3]
 8000a6c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
        displayOrientationChangeRequested = true;
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	2201      	movs	r2, #1
 8000a74:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
    }
 8000a78:	bf00      	nop
 8000a7a:	370c      	adds	r7, #12
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a82:	4770      	bx	lr

08000a84 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt>:
     * @param   width   The width of the framebuffer.
     * @param   height  The height of the framebuffer.
     *
     * @see touchgfx_generic_init
     */
    virtual void setFrameBufferSize(uint16_t width, uint16_t height)
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b082      	sub	sp, #8
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
 8000a8c:	460b      	mov	r3, r1
 8000a8e:	807b      	strh	r3, [r7, #2]
 8000a90:	4613      	mov	r3, r2
 8000a92:	803b      	strh	r3, [r7, #0]
    {
        assert(width >= DISPLAY_WIDTH && height >= DISPLAY_HEIGHT && "Framebuffer cannot be smaller than display");
 8000a94:	4b0c      	ldr	r3, [pc, #48]	; (8000ac8 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x44>)
 8000a96:	881b      	ldrh	r3, [r3, #0]
 8000a98:	887a      	ldrh	r2, [r7, #2]
 8000a9a:	429a      	cmp	r2, r3
 8000a9c:	d304      	bcc.n	8000aa8 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x24>
 8000a9e:	4b0b      	ldr	r3, [pc, #44]	; (8000acc <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x48>)
 8000aa0:	881b      	ldrh	r3, [r3, #0]
 8000aa2:	883a      	ldrh	r2, [r7, #0]
 8000aa4:	429a      	cmp	r2, r3
 8000aa6:	d205      	bcs.n	8000ab4 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x30>
 8000aa8:	4b09      	ldr	r3, [pc, #36]	; (8000ad0 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x4c>)
 8000aaa:	4a0a      	ldr	r2, [pc, #40]	; (8000ad4 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x50>)
 8000aac:	219e      	movs	r1, #158	; 0x9e
 8000aae:	480a      	ldr	r0, [pc, #40]	; (8000ad8 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x54>)
 8000ab0:	f02a fee2 	bl	802b878 <__assert_func>
        FRAME_BUFFER_WIDTH = width;
 8000ab4:	4a09      	ldr	r2, [pc, #36]	; (8000adc <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x58>)
 8000ab6:	887b      	ldrh	r3, [r7, #2]
 8000ab8:	8013      	strh	r3, [r2, #0]
        FRAME_BUFFER_HEIGHT = height;
 8000aba:	4a09      	ldr	r2, [pc, #36]	; (8000ae0 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x5c>)
 8000abc:	883b      	ldrh	r3, [r7, #0]
 8000abe:	8013      	strh	r3, [r2, #0]
    }
 8000ac0:	bf00      	nop
 8000ac2:	3708      	adds	r7, #8
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	2400c8b0 	.word	0x2400c8b0
 8000acc:	2400c8b2 	.word	0x2400c8b2
 8000ad0:	0802c988 	.word	0x0802c988
 8000ad4:	0802c9ec 	.word	0x0802c9ec
 8000ad8:	0802ca30 	.word	0x0802ca30
 8000adc:	2400c8b6 	.word	0x2400c8b6
 8000ae0:	2400c8b8 	.word	0x2400c8b8

08000ae4 <_ZN8touchgfx3HAL11getBlitCapsEv>:
     *
     * @return a bitmask of the supported blitcaps.
     *
     * @see enableDMAAcceleration
     */
    virtual BlitOperations getBlitCaps()
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b082      	sub	sp, #8
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
    {
        if (useDMAAcceleration)
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d009      	beq.n	8000b0a <_ZN8touchgfx3HAL11getBlitCapsEv+0x26>
        {
            return dma.getBlitCaps();
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	685a      	ldr	r2, [r3, #4]
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	685b      	ldr	r3, [r3, #4]
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	4610      	mov	r0, r2
 8000b04:	4798      	blx	r3
 8000b06:	4603      	mov	r3, r0
 8000b08:	e000      	b.n	8000b0c <_ZN8touchgfx3HAL11getBlitCapsEv+0x28>
        }
        return static_cast<BlitOperations>(0);
 8000b0a:	2300      	movs	r3, #0
    }
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	3708      	adds	r7, #8
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bd80      	pop	{r7, pc}

08000b14 <_ZN8touchgfx3HAL15backPorchExitedEv>:
    /**
     * Has to be called from within the LCD IRQ rutine when the Back Porch Exit is reached.
     *
     * Has to be called from within the LCD IRQ rutine when the Back Porch Exit is reached.
     */
    virtual void backPorchExited()
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b082      	sub	sp, #8
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
    {
        swapFrameBuffers();
 8000b1c:	6878      	ldr	r0, [r7, #4]
 8000b1e:	f018 fb15 	bl	801914c <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	33a4      	adds	r3, #164	; 0xa4
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	6878      	ldr	r0, [r7, #4]
 8000b2c:	4798      	blx	r3
    }
 8000b2e:	bf00      	nop
 8000b30:	3708      	adds	r7, #8
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}

08000b36 <_ZN8touchgfx3HAL9sampleKeyERh>:
     * @param [out] key Output parameter that will be set to the key value if a keypress was
     *                  detected.
     *
     * @return True if a keypress was detected and the "key" parameter is set to a value.
     */
    virtual bool sampleKey(uint8_t& key)
 8000b36:	b480      	push	{r7}
 8000b38:	b083      	sub	sp, #12
 8000b3a:	af00      	add	r7, sp, #0
 8000b3c:	6078      	str	r0, [r7, #4]
 8000b3e:	6039      	str	r1, [r7, #0]
    {
        return false;
 8000b40:	2300      	movs	r3, #0
    }
 8000b42:	4618      	mov	r0, r3
 8000b44:	370c      	adds	r7, #12
 8000b46:	46bd      	mov	sp, r7
 8000b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4c:	4770      	bx	lr
	...

08000b50 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_>:
     * @param [in] doubleBuffer     If non-null, buffer for double buffer data. If null double
     *                              buffering is disabled.
     * @param [in] animationStorage If non-null, the animation storage. If null animation storage
     *                              is disabled.
     */
    virtual void setFrameBufferStartAddresses(void* frameBuffer, void* doubleBuffer, void* animationStorage)
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b084      	sub	sp, #16
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	60f8      	str	r0, [r7, #12]
 8000b58:	60b9      	str	r1, [r7, #8]
 8000b5a:	607a      	str	r2, [r7, #4]
 8000b5c:	603b      	str	r3, [r7, #0]
    {
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 8000b5e:	68bb      	ldr	r3, [r7, #8]
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d106      	bne.n	8000b72 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x22>
 8000b64:	4b11      	ldr	r3, [pc, #68]	; (8000bac <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x5c>)
 8000b66:	4a12      	ldr	r2, [pc, #72]	; (8000bb0 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x60>)
 8000b68:	f44f 712b 	mov.w	r1, #684	; 0x2ac
 8000b6c:	4811      	ldr	r0, [pc, #68]	; (8000bb4 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x64>)
 8000b6e:	f02a fe83 	bl	802b878 <__assert_func>
        frameBuffer0 = reinterpret_cast<uint16_t*>(frameBuffer);
 8000b72:	68fb      	ldr	r3, [r7, #12]
 8000b74:	68ba      	ldr	r2, [r7, #8]
 8000b76:	63da      	str	r2, [r3, #60]	; 0x3c
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	687a      	ldr	r2, [r7, #4]
 8000b7c:	641a      	str	r2, [r3, #64]	; 0x40
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 8000b7e:	68fb      	ldr	r3, [r7, #12]
 8000b80:	683a      	ldr	r2, [r7, #0]
 8000b82:	645a      	str	r2, [r3, #68]	; 0x44
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	bf14      	ite	ne
 8000b8a:	2301      	movne	r3, #1
 8000b8c:	2300      	moveq	r3, #0
 8000b8e:	b2da      	uxtb	r2, r3
 8000b90:	4b09      	ldr	r3, [pc, #36]	; (8000bb8 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x68>)
 8000b92:	701a      	strb	r2, [r3, #0]
        USE_ANIMATION_STORAGE = animationStorage != 0;
 8000b94:	683b      	ldr	r3, [r7, #0]
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	bf14      	ite	ne
 8000b9a:	2301      	movne	r3, #1
 8000b9c:	2300      	moveq	r3, #0
 8000b9e:	b2da      	uxtb	r2, r3
 8000ba0:	4b06      	ldr	r3, [pc, #24]	; (8000bbc <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x6c>)
 8000ba2:	701a      	strb	r2, [r3, #0]
    }
 8000ba4:	bf00      	nop
 8000ba6:	3710      	adds	r7, #16
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bd80      	pop	{r7, pc}
 8000bac:	0802ca78 	.word	0x0802ca78
 8000bb0:	0802cab0 	.word	0x0802cab0
 8000bb4:	0802ca30 	.word	0x0802ca30
 8000bb8:	2400c8ba 	.word	0x2400c8ba
 8000bbc:	2400c8bb 	.word	0x2400c8bb

08000bc0 <_ZNK8touchgfx3HAL18getFlashDataReaderEv>:
     * Gets the flash data reader. This method must be implemented in
     * subclasses that uses a FlashDataReader object.
     *
     * @return the FlashDataReader.
     */
    virtual FlashDataReader* getFlashDataReader() const
 8000bc0:	b480      	push	{r7}
 8000bc2:	b083      	sub	sp, #12
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
    {
        return 0;
 8000bc8:	2300      	movs	r3, #0
    }
 8000bca:	4618      	mov	r0, r3
 8000bcc:	370c      	adds	r7, #12
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd4:	4770      	bx	lr

08000bd6 <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @param  ms Number of milliseconds to wait.
     *
     * @see registerTaskDelayFunction
     */
    virtual void taskDelay(uint16_t ms)
 8000bd6:	b580      	push	{r7, lr}
 8000bd8:	b082      	sub	sp, #8
 8000bda:	af00      	add	r7, sp, #0
 8000bdc:	6078      	str	r0, [r7, #4]
 8000bde:	460b      	mov	r3, r1
 8000be0:	807b      	strh	r3, [r7, #2]
    {
        if (taskDelayFunc)
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d004      	beq.n	8000bf4 <_ZN8touchgfx3HAL9taskDelayEt+0x1e>
        {
            taskDelayFunc(ms);
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000bee:	887a      	ldrh	r2, [r7, #2]
 8000bf0:	4610      	mov	r0, r2
 8000bf2:	4798      	blx	r3
        }
    }
 8000bf4:	bf00      	nop
 8000bf6:	3708      	adds	r7, #8
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bd80      	pop	{r7, pc}

08000bfc <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
     * getTFTCurrentLine function is never called and can be disregarded.
     *
     * @return In this default implementation, 0xFFFF is returned to signify "not
     *         implemented".
     */
    virtual uint16_t getTFTCurrentLine()
 8000bfc:	b480      	push	{r7}
 8000bfe:	b083      	sub	sp, #12
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
    {
        return 0xFFFFu;
 8000c04:	f64f 73ff 	movw	r3, #65535	; 0xffff
    }
 8000c08:	4618      	mov	r0, r3
 8000c0a:	370c      	adds	r7, #12
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c12:	4770      	bx	lr

08000c14 <_ZN8touchgfx3HAL10getDMATypeEv>:
     * Function for obtaining the DMA type of the concrete DMA implementation. As default,
     * will return DMA_TYPE_GENERIC type value.
     *
     * @return a DMAType value of the concrete DMA implementation.
     */
    virtual DMAType getDMAType()
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b082      	sub	sp, #8
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
    {
        return dma.getDMAType();
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	685a      	ldr	r2, [r3, #4]
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	685b      	ldr	r3, [r3, #4]
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	3318      	adds	r3, #24
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	4610      	mov	r0, r2
 8000c2c:	4798      	blx	r3
 8000c2e:	4603      	mov	r3, r0
    }
 8000c30:	4618      	mov	r0, r3
 8000c32:	3708      	adds	r7, #8
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bd80      	pop	{r7, pc}

08000c38 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:

    /** Called by the touch driver to indicate that no touch is currently detected. */
    virtual void noTouch();

    /** Perform the actual display orientation change. */
    virtual void performDisplayOrientationChange()
 8000c38:	b480      	push	{r7}
 8000c3a:	b085      	sub	sp, #20
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
    {
        if (requestedOrientation != nativeDisplayOrientation)
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8000c4c:	429a      	cmp	r2, r3
 8000c4e:	d011      	beq.n	8000c74 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x3c>
        {
            if (DISPLAY_ROTATION == rotate0)
 8000c50:	4b14      	ldr	r3, [pc, #80]	; (8000ca4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 8000c52:	781b      	ldrb	r3, [r3, #0]
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d11e      	bne.n	8000c96 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
            {
                const uint16_t tmp = DISPLAY_HEIGHT;
 8000c58:	4b13      	ldr	r3, [pc, #76]	; (8000ca8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 8000c5a:	881b      	ldrh	r3, [r3, #0]
 8000c5c:	81bb      	strh	r3, [r7, #12]
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8000c5e:	4b13      	ldr	r3, [pc, #76]	; (8000cac <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 8000c60:	881a      	ldrh	r2, [r3, #0]
 8000c62:	4b11      	ldr	r3, [pc, #68]	; (8000ca8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 8000c64:	801a      	strh	r2, [r3, #0]
                DISPLAY_WIDTH = tmp;
 8000c66:	4a11      	ldr	r2, [pc, #68]	; (8000cac <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 8000c68:	89bb      	ldrh	r3, [r7, #12]
 8000c6a:	8013      	strh	r3, [r2, #0]
                DISPLAY_ROTATION = rotate90;
 8000c6c:	4b0d      	ldr	r3, [pc, #52]	; (8000ca4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 8000c6e:	2201      	movs	r2, #1
 8000c70:	701a      	strb	r2, [r3, #0]
            const uint16_t tmp = DISPLAY_HEIGHT;
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
            DISPLAY_WIDTH = tmp;
            DISPLAY_ROTATION = rotate0;
        }
    }
 8000c72:	e010      	b.n	8000c96 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
        else if (DISPLAY_ROTATION != rotate0)
 8000c74:	4b0b      	ldr	r3, [pc, #44]	; (8000ca4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 8000c76:	781b      	ldrb	r3, [r3, #0]
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d00c      	beq.n	8000c96 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
            const uint16_t tmp = DISPLAY_HEIGHT;
 8000c7c:	4b0a      	ldr	r3, [pc, #40]	; (8000ca8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 8000c7e:	881b      	ldrh	r3, [r3, #0]
 8000c80:	81fb      	strh	r3, [r7, #14]
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8000c82:	4b0a      	ldr	r3, [pc, #40]	; (8000cac <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 8000c84:	881a      	ldrh	r2, [r3, #0]
 8000c86:	4b08      	ldr	r3, [pc, #32]	; (8000ca8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 8000c88:	801a      	strh	r2, [r3, #0]
            DISPLAY_WIDTH = tmp;
 8000c8a:	4a08      	ldr	r2, [pc, #32]	; (8000cac <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 8000c8c:	89fb      	ldrh	r3, [r7, #14]
 8000c8e:	8013      	strh	r3, [r2, #0]
            DISPLAY_ROTATION = rotate0;
 8000c90:	4b04      	ldr	r3, [pc, #16]	; (8000ca4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	701a      	strb	r2, [r3, #0]
    }
 8000c96:	bf00      	nop
 8000c98:	3714      	adds	r7, #20
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca0:	4770      	bx	lr
 8000ca2:	bf00      	nop
 8000ca4:	2400c8b4 	.word	0x2400c8b4
 8000ca8:	2400c8b2 	.word	0x2400c8b2
 8000cac:	2400c8b0 	.word	0x2400c8b0

08000cb0 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b082      	sub	sp, #8
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
    {
        HAL::flushFrameBuffer();
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	4618      	mov	r0, r3
 8000cbc:	f017 fbfc 	bl	80184b8 <_ZN8touchgfx3HAL16flushFrameBufferEv>
    }
 8000cc0:	bf00      	nop
 8000cc2:	3708      	adds	r7, #8
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}

08000cc8 <_ZN20TouchGFXGeneratedHALD1Ev>:
class TouchGFXGeneratedHAL : public touchgfx::HAL
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b082      	sub	sp, #8
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
 8000cd0:	4a05      	ldr	r2, [pc, #20]	; (8000ce8 <_ZN20TouchGFXGeneratedHALD1Ev+0x20>)
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	601a      	str	r2, [r3, #0]
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	4618      	mov	r0, r3
 8000cda:	f7ff fe9f 	bl	8000a1c <_ZN8touchgfx3HALD1Ev>
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	3708      	adds	r7, #8
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd80      	pop	{r7, pc}
 8000ce8:	0802dbe8 	.word	0x0802dbe8

08000cec <_ZN20TouchGFXGeneratedHALD0Ev>:
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b082      	sub	sp, #8
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
 8000cf4:	6878      	ldr	r0, [r7, #4]
 8000cf6:	f7ff ffe7 	bl	8000cc8 <_ZN20TouchGFXGeneratedHALD1Ev>
 8000cfa:	217c      	movs	r1, #124	; 0x7c
 8000cfc:	6878      	ldr	r0, [r7, #4]
 8000cfe:	f02a fbe6 	bl	802b4ce <_ZdlPvj>
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	4618      	mov	r0, r3
 8000d06:	3708      	adds	r7, #8
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bd80      	pop	{r7, pc}

08000d0c <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b082      	sub	sp, #8
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
    {
        TouchGFXGeneratedHAL::flushFrameBuffer();
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	4618      	mov	r0, r3
 8000d18:	f7ff ffca 	bl	8000cb0 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>
    }
 8000d1c:	bf00      	nop
 8000d1e:	3708      	adds	r7, #8
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bd80      	pop	{r7, pc}

08000d24 <_ZN11TouchGFXHAL10initializeEv>:
#include "stm32h7xx.h"

using namespace touchgfx;

void TouchGFXHAL::initialize()
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b082      	sub	sp, #8
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::initialize() must be called to initialize the framework.

    TouchGFXGeneratedHAL::initialize();
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f001 fd40 	bl	80027b4 <_ZN20TouchGFXGeneratedHAL10initializeEv>
}
 8000d34:	bf00      	nop
 8000d36:	3708      	adds	r7, #8
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}

08000d3c <_ZN11TouchGFXHAL9taskEntryEv>:

void TouchGFXHAL::taskEntry()
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b082      	sub	sp, #8
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
    enableLCDControllerInterrupt();
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	337c      	adds	r3, #124	; 0x7c
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	6878      	ldr	r0, [r7, #4]
 8000d4e:	4798      	blx	r3
    enableInterrupts();
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	3374      	adds	r3, #116	; 0x74
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	6878      	ldr	r0, [r7, #4]
 8000d5a:	4798      	blx	r3

    OSWrappers::waitForVSync();
 8000d5c:	f000 f956 	bl	800100c <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
    backPorchExited();
 8000d60:	687a      	ldr	r2, [r7, #4]
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	336c      	adds	r3, #108	; 0x6c
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	4610      	mov	r0, r2
 8000d6c:	4798      	blx	r3

    // Turning on display after first frame is rendered
    HAL_GPIO_WritePin(GPIOK, GPIO_PIN_7, GPIO_PIN_RESET);
 8000d6e:	2200      	movs	r2, #0
 8000d70:	2180      	movs	r1, #128	; 0x80
 8000d72:	480b      	ldr	r0, [pc, #44]	; (8000da0 <_ZN11TouchGFXHAL9taskEntryEv+0x64>)
 8000d74:	f00c ff1e 	bl	800dbb4 <HAL_GPIO_WritePin>
    /* Assert display enable LCD_DISP_CTRL pin */
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
 8000d78:	2201      	movs	r2, #1
 8000d7a:	2104      	movs	r1, #4
 8000d7c:	4809      	ldr	r0, [pc, #36]	; (8000da4 <_ZN11TouchGFXHAL9taskEntryEv+0x68>)
 8000d7e:	f00c ff19 	bl	800dbb4 <HAL_GPIO_WritePin>
    /* Assert back light LCD_BL_CTRL pin */
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 8000d82:	2201      	movs	r2, #1
 8000d84:	2102      	movs	r1, #2
 8000d86:	4807      	ldr	r0, [pc, #28]	; (8000da4 <_ZN11TouchGFXHAL9taskEntryEv+0x68>)
 8000d88:	f00c ff14 	bl	800dbb4 <HAL_GPIO_WritePin>

    for (;;)
    {
        OSWrappers::waitForVSync();
 8000d8c:	f000 f93e 	bl	800100c <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
        backPorchExited();
 8000d90:	687a      	ldr	r2, [r7, #4]
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	336c      	adds	r3, #108	; 0x6c
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	4610      	mov	r0, r2
 8000d9c:	4798      	blx	r3
        OSWrappers::waitForVSync();
 8000d9e:	e7f5      	b.n	8000d8c <_ZN11TouchGFXHAL9taskEntryEv+0x50>
 8000da0:	58022800 	.word	0x58022800
 8000da4:	58020000 	.word	0x58020000

08000da8 <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
 * Gets the frame buffer address used by the TFT controller.
 *
 * @return The address of the frame buffer currently being displayed on the TFT.
 */
uint16_t* TouchGFXHAL::getTFTFrameBuffer() const
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b082      	sub	sp, #8
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of getTFTFrameBuffer().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    return TouchGFXGeneratedHAL::getTFTFrameBuffer();
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	4618      	mov	r0, r3
 8000db4:	f001 fd96 	bl	80028e4 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>
 8000db8:	4603      	mov	r3, r0
}
 8000dba:	4618      	mov	r0, r3
 8000dbc:	3708      	adds	r7, #8
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}

08000dc2 <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
 * Sets the frame buffer address used by the TFT controller.
 *
 * @param [in] address New frame buffer address.
 */
void TouchGFXHAL::setTFTFrameBuffer(uint16_t* address)
{
 8000dc2:	b580      	push	{r7, lr}
 8000dc4:	b082      	sub	sp, #8
 8000dc6:	af00      	add	r7, sp, #0
 8000dc8:	6078      	str	r0, [r7, #4]
 8000dca:	6039      	str	r1, [r7, #0]
    // Calling parent implementation of setTFTFrameBuffer(uint16_t* address).
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	6839      	ldr	r1, [r7, #0]
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	f001 fd95 	bl	8002900 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>
}
 8000dd6:	bf00      	nop
 8000dd8:	3708      	adds	r7, #8
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}
	...

08000de0 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
 * @param rect The area of the screen that has been drawn, expressed in absolute coordinates.
 *
 * @see flushFrameBuffer().
 */
void TouchGFXHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b086      	sub	sp, #24
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
 8000de8:	6039      	str	r1, [r7, #0]
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::flushFrameBuffer(const touchgfx::Rect& rect) must
    // be called to notify the touchgfx framework that flush has been performed.

    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	6839      	ldr	r1, [r7, #0]
 8000dee:	4618      	mov	r0, r3
 8000df0:	f001 fd9c 	bl	800292c <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8000df4:	4b20      	ldr	r3, [pc, #128]	; (8000e78 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x98>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000dfc:	f3bf 8f4f 	dsb	sy
}
 8000e00:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000e02:	4b1d      	ldr	r3, [pc, #116]	; (8000e78 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x98>)
 8000e04:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000e08:	617b      	str	r3, [r7, #20]

                                            /* clean & invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000e0a:	697b      	ldr	r3, [r7, #20]
 8000e0c:	0b5b      	lsrs	r3, r3, #13
 8000e0e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000e12:	613b      	str	r3, [r7, #16]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000e14:	697b      	ldr	r3, [r7, #20]
 8000e16:	08db      	lsrs	r3, r3, #3
 8000e18:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000e1c:	60fb      	str	r3, [r7, #12]
      do {
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8000e1e:	693b      	ldr	r3, [r7, #16]
 8000e20:	015a      	lsls	r2, r3, #5
 8000e22:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000e26:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 8000e28:	68fa      	ldr	r2, [r7, #12]
 8000e2a:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8000e2c:	4912      	ldr	r1, [pc, #72]	; (8000e78 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x98>)
 8000e2e:	4313      	orrs	r3, r2
 8000e30:	f8c1 3274 	str.w	r3, [r1, #628]	; 0x274
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	1e5a      	subs	r2, r3, #1
 8000e38:	60fa      	str	r2, [r7, #12]
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	bf14      	ite	ne
 8000e3e:	2301      	movne	r3, #1
 8000e40:	2300      	moveq	r3, #0
 8000e42:	b2db      	uxtb	r3, r3
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d000      	beq.n	8000e4a <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x6a>
      do {
 8000e48:	e7e9      	b.n	8000e1e <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x3e>
    } while(sets-- != 0U);
 8000e4a:	693b      	ldr	r3, [r7, #16]
 8000e4c:	1e5a      	subs	r2, r3, #1
 8000e4e:	613a      	str	r2, [r7, #16]
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	bf14      	ite	ne
 8000e54:	2301      	movne	r3, #1
 8000e56:	2300      	moveq	r3, #0
 8000e58:	b2db      	uxtb	r3, r3
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d000      	beq.n	8000e60 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x80>
    do {
 8000e5e:	e7d9      	b.n	8000e14 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x34>
  __ASM volatile ("dsb 0xF":::"memory");
 8000e60:	f3bf 8f4f 	dsb	sy
}
 8000e64:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000e66:	f3bf 8f6f 	isb	sy
}
 8000e6a:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8000e6c:	bf00      	nop
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then we need
    // to flush the Dcache to make sure framebuffer is correct in RAM. That's done
    // using SCB_CleanInvalidateDCache().

    SCB_CleanInvalidateDCache();
}
 8000e6e:	bf00      	nop
 8000e70:	3718      	adds	r7, #24
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	e000ed00 	.word	0xe000ed00

08000e7c <_ZN11TouchGFXHAL19configureInterruptsEv>:
/**
 * Configures the interrupts relevant for TouchGFX. This primarily entails setting
 * the interrupt priorities for the DMA and LCD interrupts.
 */
void TouchGFXHAL::configureInterrupts()
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b082      	sub	sp, #8
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of configureInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::configureInterrupts();
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	4618      	mov	r0, r3
 8000e88:	f001 fcb8 	bl	80027fc <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>
}
 8000e8c:	bf00      	nop
 8000e8e:	3708      	adds	r7, #8
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd80      	pop	{r7, pc}

08000e94 <_ZN11TouchGFXHAL16enableInterruptsEv>:

/**
 * Used for enabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::enableInterrupts()
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b082      	sub	sp, #8
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableInterrupts();
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	f001 fcbc 	bl	800281c <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>
}
 8000ea4:	bf00      	nop
 8000ea6:	3708      	adds	r7, #8
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bd80      	pop	{r7, pc}

08000eac <_ZN11TouchGFXHAL17disableInterruptsEv>:

/**
 * Used for disabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::disableInterrupts()
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b082      	sub	sp, #8
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of disableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::disableInterrupts();
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	f001 fcbe 	bl	8002838 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>
}
 8000ebc:	bf00      	nop
 8000ebe:	3708      	adds	r7, #8
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd80      	pop	{r7, pc}

08000ec4 <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
/**
 * Configure the LCD controller to fire interrupts at VSYNC. Called automatically
 * once TouchGFX initialization has completed.
 */
void TouchGFXHAL::enableLCDControllerInterrupt()
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b082      	sub	sp, #8
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableLCDControllerInterrupt().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f001 fcc0 	bl	8002854 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>
}
 8000ed4:	bf00      	nop
 8000ed6:	3708      	adds	r7, #8
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}

08000edc <_ZN11TouchGFXHALD1Ev>:
class TouchGFXHAL : public TouchGFXGeneratedHAL
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b082      	sub	sp, #8
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
 8000ee4:	4a05      	ldr	r2, [pc, #20]	; (8000efc <_ZN11TouchGFXHALD1Ev+0x20>)
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	601a      	str	r2, [r3, #0]
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	4618      	mov	r0, r3
 8000eee:	f7ff feeb 	bl	8000cc8 <_ZN20TouchGFXGeneratedHALD1Ev>
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	3708      	adds	r7, #8
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	0802d898 	.word	0x0802d898

08000f00 <_ZN11TouchGFXHALD0Ev>:
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b082      	sub	sp, #8
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
 8000f08:	6878      	ldr	r0, [r7, #4]
 8000f0a:	f7ff ffe7 	bl	8000edc <_ZN11TouchGFXHALD1Ev>
 8000f0e:	217c      	movs	r1, #124	; 0x7c
 8000f10:	6878      	ldr	r0, [r7, #4]
 8000f12:	f02a fadc 	bl	802b4ce <_ZdlPvj>
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	4618      	mov	r0, r3
 8000f1a:	3708      	adds	r7, #8
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd80      	pop	{r7, pc}

08000f20 <_ZN8touchgfx10OSWrappers10initializeEv>:

/*
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	af00      	add	r7, sp, #0
    // Create a queue of length 1
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 8000f24:	2200      	movs	r2, #0
 8000f26:	2101      	movs	r1, #1
 8000f28:	2001      	movs	r0, #1
 8000f2a:	f013 fb06 	bl	801453a <osSemaphoreNew>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	4a0f      	ldr	r2, [pc, #60]	; (8000f70 <_ZN8touchgfx10OSWrappers10initializeEv+0x50>)
 8000f32:	6013      	str	r3, [r2, #0]
    assert((frame_buffer_sem != NULL) && "Creation of framebuffer semaphore failed");
 8000f34:	4b0e      	ldr	r3, [pc, #56]	; (8000f70 <_ZN8touchgfx10OSWrappers10initializeEv+0x50>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d105      	bne.n	8000f48 <_ZN8touchgfx10OSWrappers10initializeEv+0x28>
 8000f3c:	4b0d      	ldr	r3, [pc, #52]	; (8000f74 <_ZN8touchgfx10OSWrappers10initializeEv+0x54>)
 8000f3e:	4a0e      	ldr	r2, [pc, #56]	; (8000f78 <_ZN8touchgfx10OSWrappers10initializeEv+0x58>)
 8000f40:	2129      	movs	r1, #41	; 0x29
 8000f42:	480e      	ldr	r0, [pc, #56]	; (8000f7c <_ZN8touchgfx10OSWrappers10initializeEv+0x5c>)
 8000f44:	f02a fc98 	bl	802b878 <__assert_func>

    // Create a queue of length 1
    vsync_queue = osMessageQueueNew(1, 4, NULL);
 8000f48:	2200      	movs	r2, #0
 8000f4a:	2104      	movs	r1, #4
 8000f4c:	2001      	movs	r0, #1
 8000f4e:	f013 fc13 	bl	8014778 <osMessageQueueNew>
 8000f52:	4603      	mov	r3, r0
 8000f54:	4a0a      	ldr	r2, [pc, #40]	; (8000f80 <_ZN8touchgfx10OSWrappers10initializeEv+0x60>)
 8000f56:	6013      	str	r3, [r2, #0]
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 8000f58:	4b09      	ldr	r3, [pc, #36]	; (8000f80 <_ZN8touchgfx10OSWrappers10initializeEv+0x60>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d105      	bne.n	8000f6c <_ZN8touchgfx10OSWrappers10initializeEv+0x4c>
 8000f60:	4b08      	ldr	r3, [pc, #32]	; (8000f84 <_ZN8touchgfx10OSWrappers10initializeEv+0x64>)
 8000f62:	4a05      	ldr	r2, [pc, #20]	; (8000f78 <_ZN8touchgfx10OSWrappers10initializeEv+0x58>)
 8000f64:	212d      	movs	r1, #45	; 0x2d
 8000f66:	4805      	ldr	r0, [pc, #20]	; (8000f7c <_ZN8touchgfx10OSWrappers10initializeEv+0x5c>)
 8000f68:	f02a fc86 	bl	802b878 <__assert_func>
}
 8000f6c:	bf00      	nop
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	2400012c 	.word	0x2400012c
 8000f74:	0802cb00 	.word	0x0802cb00
 8000f78:	0802cb4c 	.word	0x0802cb4c
 8000f7c:	0802cb7c 	.word	0x0802cb7c
 8000f80:	24000130 	.word	0x24000130
 8000f84:	0802cbf8 	.word	0x0802cbf8

08000f88 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:

/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	af00      	add	r7, sp, #0
    osSemaphoreAcquire(frame_buffer_sem, osWaitForever);
 8000f8c:	4b04      	ldr	r3, [pc, #16]	; (8000fa0 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x18>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	f04f 31ff 	mov.w	r1, #4294967295
 8000f94:	4618      	mov	r0, r3
 8000f96:	f013 fb59 	bl	801464c <osSemaphoreAcquire>
}
 8000f9a:	bf00      	nop
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	2400012c 	.word	0x2400012c

08000fa4 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:

/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	af00      	add	r7, sp, #0
    osSemaphoreRelease(frame_buffer_sem);
 8000fa8:	4b03      	ldr	r3, [pc, #12]	; (8000fb8 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x14>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	4618      	mov	r0, r3
 8000fae:	f013 fb9f 	bl	80146f0 <osSemaphoreRelease>
}
 8000fb2:	bf00      	nop
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	2400012c 	.word	0x2400012c

08000fbc <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 *
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	af00      	add	r7, sp, #0
    osSemaphoreAcquire(frame_buffer_sem, 0);
 8000fc0:	4b03      	ldr	r3, [pc, #12]	; (8000fd0 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0x14>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	2100      	movs	r1, #0
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	f013 fb40 	bl	801464c <osSemaphoreAcquire>
}
 8000fcc:	bf00      	nop
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	2400012c 	.word	0x2400012c

08000fd4 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 *
 * Release the frame buffer semaphore in a way that is safe in interrupt context.
 * Called from ISR.
 */
void OSWrappers::giveFrameBufferSemaphoreFromISR()
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	af00      	add	r7, sp, #0
    osSemaphoreRelease(frame_buffer_sem);
 8000fd8:	4b03      	ldr	r3, [pc, #12]	; (8000fe8 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x14>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	4618      	mov	r0, r3
 8000fde:	f013 fb87 	bl	80146f0 <osSemaphoreRelease>
}
 8000fe2:	bf00      	nop
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	2400012c 	.word	0x2400012c

08000fec <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 *
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	af00      	add	r7, sp, #0
    osMessageQueuePut(vsync_queue, &dummy, 0, 0);
 8000ff0:	4b04      	ldr	r3, [pc, #16]	; (8001004 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x18>)
 8000ff2:	6818      	ldr	r0, [r3, #0]
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	4903      	ldr	r1, [pc, #12]	; (8001008 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x1c>)
 8000ffa:	f013 fc31 	bl	8014860 <osMessageQueuePut>
}
 8000ffe:	bf00      	nop
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	24000130 	.word	0x24000130
 8001008:	24000004 	.word	0x24000004

0800100c <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b082      	sub	sp, #8
 8001010:	af00      	add	r7, sp, #0
    uint32_t dummyGet;
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, 0);
 8001012:	4b09      	ldr	r3, [pc, #36]	; (8001038 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 8001014:	6818      	ldr	r0, [r3, #0]
 8001016:	1d39      	adds	r1, r7, #4
 8001018:	2300      	movs	r3, #0
 800101a:	2200      	movs	r2, #0
 800101c:	f013 fc80 	bl	8014920 <osMessageQueueGet>

    // Then, wait for next VSYNC to occur.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, osWaitForever);
 8001020:	4b05      	ldr	r3, [pc, #20]	; (8001038 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 8001022:	6818      	ldr	r0, [r3, #0]
 8001024:	1d39      	adds	r1, r7, #4
 8001026:	f04f 33ff 	mov.w	r3, #4294967295
 800102a:	2200      	movs	r2, #0
 800102c:	f013 fc78 	bl	8014920 <osMessageQueueGet>
}
 8001030:	bf00      	nop
 8001032:	3708      	adds	r7, #8
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}
 8001038:	24000130 	.word	0x24000130

0800103c <__NVIC_EnableIRQ>:
{
 800103c:	b480      	push	{r7}
 800103e:	b083      	sub	sp, #12
 8001040:	af00      	add	r7, sp, #0
 8001042:	4603      	mov	r3, r0
 8001044:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001046:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800104a:	2b00      	cmp	r3, #0
 800104c:	db0b      	blt.n	8001066 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800104e:	88fb      	ldrh	r3, [r7, #6]
 8001050:	f003 021f 	and.w	r2, r3, #31
 8001054:	4907      	ldr	r1, [pc, #28]	; (8001074 <__NVIC_EnableIRQ+0x38>)
 8001056:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800105a:	095b      	lsrs	r3, r3, #5
 800105c:	2001      	movs	r0, #1
 800105e:	fa00 f202 	lsl.w	r2, r0, r2
 8001062:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001066:	bf00      	nop
 8001068:	370c      	adds	r7, #12
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr
 8001072:	bf00      	nop
 8001074:	e000e100 	.word	0xe000e100

08001078 <__NVIC_DisableIRQ>:
{
 8001078:	b480      	push	{r7}
 800107a:	b083      	sub	sp, #12
 800107c:	af00      	add	r7, sp, #0
 800107e:	4603      	mov	r3, r0
 8001080:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001082:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001086:	2b00      	cmp	r3, #0
 8001088:	db12      	blt.n	80010b0 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800108a:	88fb      	ldrh	r3, [r7, #6]
 800108c:	f003 021f 	and.w	r2, r3, #31
 8001090:	490a      	ldr	r1, [pc, #40]	; (80010bc <__NVIC_DisableIRQ+0x44>)
 8001092:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001096:	095b      	lsrs	r3, r3, #5
 8001098:	2001      	movs	r0, #1
 800109a:	fa00 f202 	lsl.w	r2, r0, r2
 800109e:	3320      	adds	r3, #32
 80010a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80010a4:	f3bf 8f4f 	dsb	sy
}
 80010a8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80010aa:	f3bf 8f6f 	isb	sy
}
 80010ae:	bf00      	nop
}
 80010b0:	bf00      	nop
 80010b2:	370c      	adds	r7, #12
 80010b4:	46bd      	mov	sp, r7
 80010b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ba:	4770      	bx	lr
 80010bc:	e000e100 	.word	0xe000e100

080010c0 <_ZN8touchgfx9colortypeC1Ev>:
 * extract a 24/32-bit color from this type, use the getColor32 function.
 */
struct colortype
{
    /** Default constructor. Creates a black (0) color. */
    colortype()
 80010c0:	b480      	push	{r7}
 80010c2:	b083      	sub	sp, #12
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
        : color(0)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	2200      	movs	r2, #0
 80010cc:	601a      	str	r2, [r3, #0]
    {
    }
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	4618      	mov	r0, r3
 80010d2:	370c      	adds	r7, #12
 80010d4:	46bd      	mov	sp, r7
 80010d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010da:	4770      	bx	lr

080010dc <_ZNK8touchgfx9colortypecvmEv>:
    /**
     * Cast that converts the given colortype to an uint32_t.
     *
     * @return The result of the operation.
     */
    operator uint32_t() const
 80010dc:	b480      	push	{r7}
 80010de:	b083      	sub	sp, #12
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
    {
        return color;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
    }
 80010e8:	4618      	mov	r0, r3
 80010ea:	370c      	adds	r7, #12
 80010ec:	46bd      	mov	sp, r7
 80010ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f2:	4770      	bx	lr

080010f4 <_ZN8touchgfx9DMA_QueueD1Ev>:
     * @param  op The blitop to add.
     */
    virtual void pushCopyOf(const BlitOp& op) = 0;

    /** Finalizes an instance of the DMA_Queue class. */
    virtual ~DMA_Queue()
 80010f4:	b480      	push	{r7}
 80010f6:	b083      	sub	sp, #12
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
    {
 80010fc:	4a04      	ldr	r2, [pc, #16]	; (8001110 <_ZN8touchgfx9DMA_QueueD1Ev+0x1c>)
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	601a      	str	r2, [r3, #0]
    }
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	4618      	mov	r0, r3
 8001106:	370c      	adds	r7, #12
 8001108:	46bd      	mov	sp, r7
 800110a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110e:	4770      	bx	lr
 8001110:	0802d9b8 	.word	0x0802d9b8

08001114 <_ZN8touchgfx9DMA_QueueD0Ev>:
    virtual ~DMA_Queue()
 8001114:	b580      	push	{r7, lr}
 8001116:	b082      	sub	sp, #8
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
    }
 800111c:	6878      	ldr	r0, [r7, #4]
 800111e:	f7ff ffe9 	bl	80010f4 <_ZN8touchgfx9DMA_QueueD1Ev>
 8001122:	2104      	movs	r1, #4
 8001124:	6878      	ldr	r0, [r7, #4]
 8001126:	f02a f9d2 	bl	802b4ce <_ZdlPvj>
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	4618      	mov	r0, r3
 800112e:	3708      	adds	r7, #8
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}

08001134 <_ZN8touchgfx13DMA_Interface5flushEv>:
     * @param  op The operation to add.
     */
    virtual void addToQueue(const BlitOp& op);

    /** This function blocks until all DMA transfers in the queue have been completed. */
    virtual void flush()
 8001134:	b580      	push	{r7, lr}
 8001136:	b082      	sub	sp, #8
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
    {
        waitForFrameBufferSemaphore();
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	3344      	adds	r3, #68	; 0x44
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	6878      	ldr	r0, [r7, #4]
 8001146:	4798      	blx	r3
    }
 8001148:	bf00      	nop
 800114a:	3708      	adds	r7, #8
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}

08001150 <_ZN8touchgfx13DMA_InterfaceD1Ev>:
    {
        return DMA_TYPE_GENERIC;
    }

    /** Finalizes an instance of the DMA_Interface class. */
    virtual ~DMA_Interface()
 8001150:	b480      	push	{r7}
 8001152:	b083      	sub	sp, #12
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
    {
 8001158:	4a04      	ldr	r2, [pc, #16]	; (800116c <_ZN8touchgfx13DMA_InterfaceD1Ev+0x1c>)
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	601a      	str	r2, [r3, #0]
    }
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	4618      	mov	r0, r3
 8001162:	370c      	adds	r7, #12
 8001164:	46bd      	mov	sp, r7
 8001166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116a:	4770      	bx	lr
 800116c:	0802f0bc 	.word	0x0802f0bc

08001170 <_ZN8touchgfx13DMA_InterfaceD0Ev>:
    virtual ~DMA_Interface()
 8001170:	b580      	push	{r7, lr}
 8001172:	b082      	sub	sp, #8
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
    }
 8001178:	6878      	ldr	r0, [r7, #4]
 800117a:	f7ff ffe9 	bl	8001150 <_ZN8touchgfx13DMA_InterfaceD1Ev>
 800117e:	210c      	movs	r1, #12
 8001180:	6878      	ldr	r0, [r7, #4]
 8001182:	f02a f9a4 	bl	802b4ce <_ZdlPvj>
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	4618      	mov	r0, r3
 800118a:	3708      	adds	r7, #8
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}

08001190 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>:
    /**
     * Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
 8001190:	b480      	push	{r7}
 8001192:	b083      	sub	sp, #12
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
 8001198:	6039      	str	r1, [r7, #0]
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 800119a:	4a09      	ldr	r2, [pc, #36]	; (80011c0 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE+0x30>)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	601a      	str	r2, [r3, #0]
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	683a      	ldr	r2, [r7, #0]
 80011a4:	605a      	str	r2, [r3, #4]
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	2200      	movs	r2, #0
 80011aa:	721a      	strb	r2, [r3, #8]
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	2200      	movs	r2, #0
 80011b0:	725a      	strb	r2, [r3, #9]
    {
    }
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	4618      	mov	r0, r3
 80011b6:	370c      	adds	r7, #12
 80011b8:	46bd      	mov	sp, r7
 80011ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011be:	4770      	bx	lr
 80011c0:	0802f0bc 	.word	0x0802f0bc

080011c4 <_ZN8STM32DMA10getDMATypeEv>:
     *        Function for obtaining the DMA type of the concrete DMA_Interface implementation.
     *        As default, will return DMA_TYPE_CHROMART type value.
     *
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual touchgfx::DMAType getDMAType(void)
 80011c4:	b480      	push	{r7}
 80011c6:	b083      	sub	sp, #12
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
    {
        return touchgfx::DMA_TYPE_CHROMART;
 80011cc:	2301      	movs	r3, #1
    }
 80011ce:	4618      	mov	r0, r3
 80011d0:	370c      	adds	r7, #12
 80011d2:	46bd      	mov	sp, r7
 80011d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d8:	4770      	bx	lr

080011da <_ZN8STM32DMA18signalDMAInterruptEv>:
     *
     * @brief Raises a DMA interrupt signal.
     *
     *        Raises a DMA interrupt signal.
     */
    virtual void signalDMAInterrupt()
 80011da:	b580      	push	{r7, lr}
 80011dc:	b082      	sub	sp, #8
 80011de:	af00      	add	r7, sp, #0
 80011e0:	6078      	str	r0, [r7, #4]
    {
        executeCompleted();
 80011e2:	687a      	ldr	r2, [r7, #4]
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	3328      	adds	r3, #40	; 0x28
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	4610      	mov	r0, r2
 80011ee:	4798      	blx	r3
    }
 80011f0:	bf00      	nop
 80011f2:	3708      	adds	r7, #8
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}

080011f8 <_ZN8touchgfx3HAL11getInstanceEv>:
    static HAL* getInstance()
 80011f8:	b480      	push	{r7}
 80011fa:	af00      	add	r7, sp, #0
        return instance;
 80011fc:	4b03      	ldr	r3, [pc, #12]	; (800120c <_ZN8touchgfx3HAL11getInstanceEv+0x14>)
 80011fe:	681b      	ldr	r3, [r3, #0]
    }
 8001200:	4618      	mov	r0, r3
 8001202:	46bd      	mov	sp, r7
 8001204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001208:	4770      	bx	lr
 800120a:	bf00      	nop
 800120c:	2400c8bc 	.word	0x2400c8bc

08001210 <_ZN8touchgfx3HAL18signalDMAInterruptEv>:
    void signalDMAInterrupt()
 8001210:	b580      	push	{r7, lr}
 8001212:	b082      	sub	sp, #8
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
        dma.signalDMAInterrupt();
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	685a      	ldr	r2, [r3, #4]
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	685b      	ldr	r3, [r3, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	3314      	adds	r3, #20
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	4610      	mov	r0, r2
 8001228:	4798      	blx	r3
    }
 800122a:	bf00      	nop
 800122c:	3708      	adds	r7, #8
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}

08001232 <DMA2D_XferCpltCallback>:

extern "C" DMA2D_HandleTypeDef hdma2d;

extern "C" {
    static void DMA2D_XferCpltCallback(DMA2D_HandleTypeDef* handle)
    {
 8001232:	b580      	push	{r7, lr}
 8001234:	b082      	sub	sp, #8
 8001236:	af00      	add	r7, sp, #0
 8001238:	6078      	str	r0, [r7, #4]
        (void)handle; // Unused argument
        HAL::getInstance()->signalDMAInterrupt();
 800123a:	f7ff ffdd 	bl	80011f8 <_ZN8touchgfx3HAL11getInstanceEv>
 800123e:	4603      	mov	r3, r0
 8001240:	4618      	mov	r0, r3
 8001242:	f7ff ffe5 	bl	8001210 <_ZN8touchgfx3HAL18signalDMAInterruptEv>
    }
 8001246:	bf00      	nop
 8001248:	3708      	adds	r7, #8
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}

0800124e <_ZN8touchgfx6BlitOpC1Ev>:

/**
 * BlitOp instances carry the required information for performing operations on the LCD
 * (framebuffer) using DMA.
 */
struct BlitOp
 800124e:	b580      	push	{r7, lr}
 8001250:	b082      	sub	sp, #8
 8001252:	af00      	add	r7, sp, #0
 8001254:	6078      	str	r0, [r7, #4]
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	330c      	adds	r3, #12
 800125a:	4618      	mov	r0, r3
 800125c:	f7ff ff30 	bl	80010c0 <_ZN8touchgfx9colortypeC1Ev>
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	4618      	mov	r0, r3
 8001264:	3708      	adds	r7, #8
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
	...

0800126c <_ZN8STM32DMAC1Ev>:
}

STM32DMA::STM32DMA()
 800126c:	b5b0      	push	{r4, r5, r7, lr}
 800126e:	b082      	sub	sp, #8
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0]))
 8001274:	687a      	ldr	r2, [r7, #4]
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	330c      	adds	r3, #12
 800127a:	4619      	mov	r1, r3
 800127c:	4610      	mov	r0, r2
 800127e:	f7ff ff87 	bl	8001190 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>
 8001282:	4a0e      	ldr	r2, [pc, #56]	; (80012bc <_ZN8STM32DMAC1Ev+0x50>)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	601a      	str	r2, [r3, #0]
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	f103 000c 	add.w	r0, r3, #12
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	3320      	adds	r3, #32
 8001292:	2260      	movs	r2, #96	; 0x60
 8001294:	4619      	mov	r1, r3
 8001296:	f018 f8bf 	bl	8019418 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	3320      	adds	r3, #32
 800129e:	245f      	movs	r4, #95	; 0x5f
 80012a0:	461d      	mov	r5, r3
 80012a2:	2c00      	cmp	r4, #0
 80012a4:	db05      	blt.n	80012b2 <_ZN8STM32DMAC1Ev+0x46>
 80012a6:	4628      	mov	r0, r5
 80012a8:	f7ff ffd1 	bl	800124e <_ZN8touchgfx6BlitOpC1Ev>
 80012ac:	3520      	adds	r5, #32
 80012ae:	3c01      	subs	r4, #1
 80012b0:	e7f7      	b.n	80012a2 <_ZN8STM32DMAC1Ev+0x36>
{
}
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	4618      	mov	r0, r3
 80012b6:	3708      	adds	r7, #8
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bdb0      	pop	{r4, r5, r7, pc}
 80012bc:	0802d968 	.word	0x0802d968

080012c0 <_ZN8STM32DMAD1Ev>:

STM32DMA::~STM32DMA()
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b082      	sub	sp, #8
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
 80012c8:	4a09      	ldr	r2, [pc, #36]	; (80012f0 <_ZN8STM32DMAD1Ev+0x30>)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	601a      	str	r2, [r3, #0]
{
    /* Disable DMA2D global Interrupt */
    NVIC_DisableIRQ(DMA2D_IRQn);
 80012ce:	205a      	movs	r0, #90	; 0x5a
 80012d0:	f7ff fed2 	bl	8001078 <__NVIC_DisableIRQ>
STM32DMA::~STM32DMA()
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	330c      	adds	r3, #12
 80012d8:	4618      	mov	r0, r3
 80012da:	f000 fab1 	bl	8001840 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	4618      	mov	r0, r3
 80012e2:	f7ff ff35 	bl	8001150 <_ZN8touchgfx13DMA_InterfaceD1Ev>
}
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	4618      	mov	r0, r3
 80012ea:	3708      	adds	r7, #8
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	0802d968 	.word	0x0802d968

080012f4 <_ZN8STM32DMAD0Ev>:
STM32DMA::~STM32DMA()
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b082      	sub	sp, #8
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
}
 80012fc:	6878      	ldr	r0, [r7, #4]
 80012fe:	f7ff ffdf 	bl	80012c0 <_ZN8STM32DMAD1Ev>
 8001302:	f44f 6142 	mov.w	r1, #3104	; 0xc20
 8001306:	6878      	ldr	r0, [r7, #4]
 8001308:	f02a f8e1 	bl	802b4ce <_ZdlPvj>
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	4618      	mov	r0, r3
 8001310:	3708      	adds	r7, #8
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}
	...

08001318 <_ZN8STM32DMA10initializeEv>:

void STM32DMA::initialize()
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b084      	sub	sp, #16
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
    /* Ensure DMA2D Clock is enabled */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001320:	4b12      	ldr	r3, [pc, #72]	; (800136c <_ZN8STM32DMA10initializeEv+0x54>)
 8001322:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8001326:	4a11      	ldr	r2, [pc, #68]	; (800136c <_ZN8STM32DMA10initializeEv+0x54>)
 8001328:	f043 0310 	orr.w	r3, r3, #16
 800132c:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
 8001330:	4b0e      	ldr	r3, [pc, #56]	; (800136c <_ZN8STM32DMA10initializeEv+0x54>)
 8001332:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8001336:	f003 0310 	and.w	r3, r3, #16
 800133a:	60fb      	str	r3, [r7, #12]
 800133c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_DMA2D_FORCE_RESET();
 800133e:	4b0b      	ldr	r3, [pc, #44]	; (800136c <_ZN8STM32DMA10initializeEv+0x54>)
 8001340:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001342:	4a0a      	ldr	r2, [pc, #40]	; (800136c <_ZN8STM32DMA10initializeEv+0x54>)
 8001344:	f043 0310 	orr.w	r3, r3, #16
 8001348:	67d3      	str	r3, [r2, #124]	; 0x7c
    __HAL_RCC_DMA2D_RELEASE_RESET();
 800134a:	4b08      	ldr	r3, [pc, #32]	; (800136c <_ZN8STM32DMA10initializeEv+0x54>)
 800134c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800134e:	4a07      	ldr	r2, [pc, #28]	; (800136c <_ZN8STM32DMA10initializeEv+0x54>)
 8001350:	f023 0310 	bic.w	r3, r3, #16
 8001354:	67d3      	str	r3, [r2, #124]	; 0x7c

    /* Add transfer complete callback function */
    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
 8001356:	4b06      	ldr	r3, [pc, #24]	; (8001370 <_ZN8STM32DMA10initializeEv+0x58>)
 8001358:	4a06      	ldr	r2, [pc, #24]	; (8001374 <_ZN8STM32DMA10initializeEv+0x5c>)
 800135a:	621a      	str	r2, [r3, #32]

    /* Enable DMA2D global Interrupt */
    NVIC_EnableIRQ(DMA2D_IRQn);
 800135c:	205a      	movs	r0, #90	; 0x5a
 800135e:	f7ff fe6d 	bl	800103c <__NVIC_EnableIRQ>
}
 8001362:	bf00      	nop
 8001364:	3710      	adds	r7, #16
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	58024400 	.word	0x58024400
 8001370:	2400cc60 	.word	0x2400cc60
 8001374:	08001233 	.word	0x08001233

08001378 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>:

inline uint32_t STM32DMA::getChromARTInputFormat(Bitmap::BitmapFormat format)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b084      	sub	sp, #16
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
 8001380:	460b      	mov	r3, r1
 8001382:	70fb      	strb	r3, [r7, #3]
    // Default color mode set to ARGB8888
    uint32_t dma2dColorMode = DMA2D_INPUT_ARGB8888;
 8001384:	2300      	movs	r3, #0
 8001386:	60fb      	str	r3, [r7, #12]

    switch (format)
 8001388:	78fb      	ldrb	r3, [r7, #3]
 800138a:	2b0b      	cmp	r3, #11
 800138c:	d826      	bhi.n	80013dc <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x64>
 800138e:	a201      	add	r2, pc, #4	; (adr r2, 8001394 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1c>)
 8001390:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001394:	080013d1 	.word	0x080013d1
 8001398:	080013cb 	.word	0x080013cb
 800139c:	080013c5 	.word	0x080013c5
 80013a0:	080013dd 	.word	0x080013dd
 80013a4:	080013dd 	.word	0x080013dd
 80013a8:	080013dd 	.word	0x080013dd
 80013ac:	080013dd 	.word	0x080013dd
 80013b0:	080013d7 	.word	0x080013d7
 80013b4:	080013d7 	.word	0x080013d7
 80013b8:	080013d7 	.word	0x080013d7
 80013bc:	080013d7 	.word	0x080013d7
 80013c0:	080013d7 	.word	0x080013d7
    {
    case Bitmap::ARGB8888: /* DMA2D input mode set to 32bit ARGB */
        dma2dColorMode = DMA2D_INPUT_ARGB8888;
 80013c4:	2300      	movs	r3, #0
 80013c6:	60fb      	str	r3, [r7, #12]
        break;
 80013c8:	e00e      	b.n	80013e8 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::RGB888: /* DMA2D input mode set to 24bit RGB */
        dma2dColorMode = DMA2D_INPUT_RGB888;
 80013ca:	2301      	movs	r3, #1
 80013cc:	60fb      	str	r3, [r7, #12]
        break;
 80013ce:	e00b      	b.n	80013e8 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::RGB565: /* DMA2D input mode set to 16bit RGB */
        dma2dColorMode = DMA2D_INPUT_RGB565;
 80013d0:	2302      	movs	r3, #2
 80013d2:	60fb      	str	r3, [r7, #12]
        break;
 80013d4:	e008      	b.n	80013e8 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::ARGB2222: /* Fall through */
    case Bitmap::ABGR2222: /* Fall through */
    case Bitmap::RGBA2222: /* Fall through */
    case Bitmap::BGRA2222: /* Fall through */
    case Bitmap::L8:       /* DMA2D input mode set to 8bit Color Look up table*/
        dma2dColorMode = DMA2D_INPUT_L8;
 80013d6:	2305      	movs	r3, #5
 80013d8:	60fb      	str	r3, [r7, #12]
        break;
 80013da:	e005      	b.n	80013e8 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::BW:     /* Fall through */
    case Bitmap::BW_RLE: /* Fall through */
    case Bitmap::GRAY4:  /* Fall through */
    case Bitmap::GRAY2:  /* Fall through */
    default:             /* Unsupported input format for DMA2D */
        assert(0 && "Unsupported Format!");
 80013dc:	4b05      	ldr	r3, [pc, #20]	; (80013f4 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x7c>)
 80013de:	4a06      	ldr	r2, [pc, #24]	; (80013f8 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x80>)
 80013e0:	2167      	movs	r1, #103	; 0x67
 80013e2:	4806      	ldr	r0, [pc, #24]	; (80013fc <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x84>)
 80013e4:	f02a fa48 	bl	802b878 <__assert_func>
        break;
    }

    return dma2dColorMode;
 80013e8:	68fb      	ldr	r3, [r7, #12]
}
 80013ea:	4618      	mov	r0, r3
 80013ec:	3710      	adds	r7, #16
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	0802cc3c 	.word	0x0802cc3c
 80013f8:	0802cc58 	.word	0x0802cc58
 80013fc:	0802cca4 	.word	0x0802cca4

08001400 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>:

inline uint32_t STM32DMA::getChromARTOutputFormat(Bitmap::BitmapFormat format)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b084      	sub	sp, #16
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
 8001408:	460b      	mov	r3, r1
 800140a:	70fb      	strb	r3, [r7, #3]
    // Default color mode set to ARGB8888
    uint32_t dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 800140c:	2300      	movs	r3, #0
 800140e:	60fb      	str	r3, [r7, #12]

    switch (format)
 8001410:	78fb      	ldrb	r3, [r7, #3]
 8001412:	2b0a      	cmp	r3, #10
 8001414:	d821      	bhi.n	800145a <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x5a>
 8001416:	a201      	add	r2, pc, #4	; (adr r2, 800141c <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1c>)
 8001418:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800141c:	08001455 	.word	0x08001455
 8001420:	0800144f 	.word	0x0800144f
 8001424:	08001449 	.word	0x08001449
 8001428:	0800145b 	.word	0x0800145b
 800142c:	0800145b 	.word	0x0800145b
 8001430:	0800145b 	.word	0x0800145b
 8001434:	0800145b 	.word	0x0800145b
 8001438:	0800144f 	.word	0x0800144f
 800143c:	0800144f 	.word	0x0800144f
 8001440:	0800144f 	.word	0x0800144f
 8001444:	0800144f 	.word	0x0800144f
    {
    case Bitmap::ARGB8888: /* DMA2D output mode set to 32bit ARGB */
        dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 8001448:	2300      	movs	r3, #0
 800144a:	60fb      	str	r3, [r7, #12]
        break;
 800144c:	e00b      	b.n	8001466 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::RGB888:   /* Fall through */
    case Bitmap::ARGB2222: /* Fall through */
    case Bitmap::ABGR2222: /* Fall through */
    case Bitmap::RGBA2222: /* Fall through */
    case Bitmap::BGRA2222: /* DMA2D output mode set to 24bit RGB */
        dma2dColorMode = DMA2D_OUTPUT_RGB888;
 800144e:	2301      	movs	r3, #1
 8001450:	60fb      	str	r3, [r7, #12]
        break;
 8001452:	e008      	b.n	8001466 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::RGB565: /* DMA2D output mode set to 16bit RGB */
        dma2dColorMode = DMA2D_OUTPUT_RGB565;
 8001454:	2302      	movs	r3, #2
 8001456:	60fb      	str	r3, [r7, #12]
        break;
 8001458:	e005      	b.n	8001466 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::BW:     /* Fall through */
    case Bitmap::BW_RLE: /* Fall through */
    case Bitmap::GRAY4:  /* Fall through */
    case Bitmap::GRAY2:  /* Fall through */
    default:             /* Unsupported output format for DMA2D */
        assert(0 && "Unsupported Format!");
 800145a:	4b05      	ldr	r3, [pc, #20]	; (8001470 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>)
 800145c:	4a05      	ldr	r2, [pc, #20]	; (8001474 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x74>)
 800145e:	2188      	movs	r1, #136	; 0x88
 8001460:	4805      	ldr	r0, [pc, #20]	; (8001478 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x78>)
 8001462:	f02a fa09 	bl	802b878 <__assert_func>
        break;
    }

    return dma2dColorMode;
 8001466:	68fb      	ldr	r3, [r7, #12]
}
 8001468:	4618      	mov	r0, r3
 800146a:	3710      	adds	r7, #16
 800146c:	46bd      	mov	sp, r7
 800146e:	bd80      	pop	{r7, pc}
 8001470:	0802cc3c 	.word	0x0802cc3c
 8001474:	0802cd1c 	.word	0x0802cd1c
 8001478:	0802cca4 	.word	0x0802cca4

0800147c <_ZN8STM32DMA11getBlitCapsEv>:

BlitOperations STM32DMA::getBlitCaps()
{
 800147c:	b480      	push	{r7}
 800147e:	b083      	sub	sp, #12
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
                                       | BLIT_OP_COPY_L8
                                       | BLIT_OP_COPY_WITH_ALPHA
                                       | BLIT_OP_COPY_ARGB8888
                                       | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                       | BLIT_OP_COPY_A4
                                       | BLIT_OP_COPY_A8);
 8001484:	f240 33ef 	movw	r3, #1007	; 0x3ef
}
 8001488:	4618      	mov	r0, r3
 800148a:	370c      	adds	r7, #12
 800148c:	46bd      	mov	sp, r7
 800148e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001492:	4770      	bx	lr

08001494 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE>:
 * BLIT_OP_COPY_ARGB8888_WITH_ALPHA
 * BLIT_OP_COPY_A4
 * BLIT_OP_COPY_A8
 */
void STM32DMA::setupDataCopy(const BlitOp& blitOp)
{
 8001494:	b590      	push	{r4, r7, lr}
 8001496:	b089      	sub	sp, #36	; 0x24
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
 800149c:	6039      	str	r1, [r7, #0]
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	7f5b      	ldrb	r3, [r3, #29]
 80014a2:	4619      	mov	r1, r3
 80014a4:	6878      	ldr	r0, [r7, #4]
 80014a6:	f7ff ff67 	bl	8001378 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 80014aa:	61b8      	str	r0, [r7, #24]
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	7f9b      	ldrb	r3, [r3, #30]
 80014b0:	4619      	mov	r1, r3
 80014b2:	6878      	ldr	r0, [r7, #4]
 80014b4:	f7ff ff60 	bl	8001378 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 80014b8:	6178      	str	r0, [r7, #20]
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	7f9b      	ldrb	r3, [r3, #30]
 80014be:	4619      	mov	r1, r3
 80014c0:	6878      	ldr	r0, [r7, #4]
 80014c2:	f7ff ff9d 	bl	8001400 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 80014c6:	6138      	str	r0, [r7, #16]

    /* DMA2D OOR register configuration ------------------------------------------*/
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	8b5b      	ldrh	r3, [r3, #26]
 80014cc:	461a      	mov	r2, r3
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	8a9b      	ldrh	r3, [r3, #20]
 80014d2:	1ad2      	subs	r2, r2, r3
 80014d4:	4b97      	ldr	r3, [pc, #604]	; (8001734 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 80014d6:	641a      	str	r2, [r3, #64]	; 0x40

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	8b5b      	ldrh	r3, [r3, #26]
 80014dc:	461a      	mov	r2, r3
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	8a9b      	ldrh	r3, [r3, #20]
 80014e2:	1ad2      	subs	r2, r2, r3
 80014e4:	4b93      	ldr	r3, [pc, #588]	; (8001734 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 80014e6:	619a      	str	r2, [r3, #24]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	8b1b      	ldrh	r3, [r3, #24]
 80014ec:	461a      	mov	r2, r3
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	8a9b      	ldrh	r3, [r3, #20]
 80014f2:	1ad2      	subs	r2, r2, r3
 80014f4:	4b8f      	ldr	r3, [pc, #572]	; (8001734 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 80014f6:	611a      	str	r2, [r3, #16]

    /* DMA2D OPFCCR register configuration ---------------------------------------*/
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 80014f8:	4a8e      	ldr	r2, [pc, #568]	; (8001734 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 80014fa:	693b      	ldr	r3, [r7, #16]
 80014fc:	6353      	str	r3, [r2, #52]	; 0x34

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	8adb      	ldrh	r3, [r3, #22]
 8001502:	461a      	mov	r2, r3
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	8a9b      	ldrh	r3, [r3, #20]
 8001508:	041b      	lsls	r3, r3, #16
 800150a:	431a      	orrs	r2, r3
 800150c:	4b89      	ldr	r3, [pc, #548]	; (8001734 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 800150e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	691a      	ldr	r2, [r3, #16]
 8001514:	4b87      	ldr	r3, [pc, #540]	; (8001734 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8001516:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Configure DMA2D source address */
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	685a      	ldr	r2, [r3, #4]
 800151c:	4b85      	ldr	r3, [pc, #532]	; (8001734 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 800151e:	60da      	str	r2, [r3, #12]

    switch (blitOp.operation)
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001528:	d037      	beq.n	800159a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x106>
 800152a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800152e:	f200 80e3 	bhi.w	80016f8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x264>
 8001532:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001536:	d015      	beq.n	8001564 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xd0>
 8001538:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800153c:	f200 80dc 	bhi.w	80016f8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x264>
 8001540:	2b80      	cmp	r3, #128	; 0x80
 8001542:	d045      	beq.n	80015d0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x13c>
 8001544:	2b80      	cmp	r3, #128	; 0x80
 8001546:	f200 80d7 	bhi.w	80016f8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x264>
 800154a:	2b40      	cmp	r3, #64	; 0x40
 800154c:	f000 80bf 	beq.w	80016ce <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x23a>
 8001550:	2b40      	cmp	r3, #64	; 0x40
 8001552:	f200 80d1 	bhi.w	80016f8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x264>
 8001556:	2b04      	cmp	r3, #4
 8001558:	f000 80a4 	beq.w	80016a4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x210>
 800155c:	2b20      	cmp	r3, #32
 800155e:	f000 80b6 	beq.w	80016ce <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x23a>
 8001562:	e0c9      	b.n	80016f8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x264>
    {
    case BLIT_OP_COPY_A4:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	7f1b      	ldrb	r3, [r3, #28]
 8001568:	061b      	lsls	r3, r3, #24
 800156a:	4619      	mov	r1, r3
 800156c:	4a71      	ldr	r2, [pc, #452]	; (8001734 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 800156e:	4b72      	ldr	r3, [pc, #456]	; (8001738 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a4>)
 8001570:	430b      	orrs	r3, r1
 8001572:	61d3      	str	r3, [r2, #28]

        /* set DMA2D foreground color */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	330c      	adds	r3, #12
 8001578:	4c6e      	ldr	r4, [pc, #440]	; (8001734 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 800157a:	4618      	mov	r0, r3
 800157c:	f7ff fdae 	bl	80010dc <_ZNK8touchgfx9colortypecvmEv>
 8001580:	4603      	mov	r3, r0
 8001582:	6223      	str	r3, [r4, #32]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8001584:	4a6b      	ldr	r2, [pc, #428]	; (8001734 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8001586:	697b      	ldr	r3, [r7, #20]
 8001588:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	691a      	ldr	r2, [r3, #16]
 800158e:	4b69      	ldr	r3, [pc, #420]	; (8001734 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8001590:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8001592:	4b68      	ldr	r3, [pc, #416]	; (8001734 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8001594:	4a69      	ldr	r2, [pc, #420]	; (800173c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8001596:	601a      	str	r2, [r3, #0]
        break;
 8001598:	e0c7      	b.n	800172a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x296>
    case BLIT_OP_COPY_A8:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	7f1b      	ldrb	r3, [r3, #28]
 800159e:	061b      	lsls	r3, r3, #24
 80015a0:	4619      	mov	r1, r3
 80015a2:	4a64      	ldr	r2, [pc, #400]	; (8001734 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 80015a4:	4b66      	ldr	r3, [pc, #408]	; (8001740 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ac>)
 80015a6:	430b      	orrs	r3, r1
 80015a8:	61d3      	str	r3, [r2, #28]

        /* set DMA2D foreground color */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	330c      	adds	r3, #12
 80015ae:	4c61      	ldr	r4, [pc, #388]	; (8001734 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 80015b0:	4618      	mov	r0, r3
 80015b2:	f7ff fd93 	bl	80010dc <_ZNK8touchgfx9colortypecvmEv>
 80015b6:	4603      	mov	r3, r0
 80015b8:	6223      	str	r3, [r4, #32]
        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 80015ba:	4a5e      	ldr	r2, [pc, #376]	; (8001734 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 80015bc:	697b      	ldr	r3, [r7, #20]
 80015be:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	691a      	ldr	r2, [r3, #16]
 80015c4:	4b5b      	ldr	r3, [pc, #364]	; (8001734 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 80015c6:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 80015c8:	4b5a      	ldr	r3, [pc, #360]	; (8001734 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 80015ca:	4a5c      	ldr	r2, [pc, #368]	; (800173c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 80015cc:	601a      	str	r2, [r3, #0]
        break;
 80015ce:	e0ac      	b.n	800172a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x296>
  case BLIT_OP_COPY_L8:
      {
        const clutData_t* const palette = reinterpret_cast<const clutData_t*>(blitOp.pClut);
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	689b      	ldr	r3, [r3, #8]
 80015d4:	60fb      	str	r3, [r7, #12]
        bool blend = true;
 80015d6:	2301      	movs	r3, #1
 80015d8:	77fb      	strb	r3, [r7, #31]

        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	7f1b      	ldrb	r3, [r3, #28]
 80015de:	061b      	lsls	r3, r3, #24
 80015e0:	461a      	mov	r2, r3
 80015e2:	69bb      	ldr	r3, [r7, #24]
 80015e4:	4313      	orrs	r3, r2
 80015e6:	4a53      	ldr	r2, [pc, #332]	; (8001734 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 80015e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015ec:	61d3      	str	r3, [r2, #28]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 80015ee:	4a51      	ldr	r2, [pc, #324]	; (8001734 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 80015f0:	697b      	ldr	r3, [r7, #20]
 80015f2:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	691a      	ldr	r2, [r3, #16]
 80015f8:	4b4e      	ldr	r3, [pc, #312]	; (8001734 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 80015fa:	615a      	str	r2, [r3, #20]

        /* Write foreground CLUT memory address */
        WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	1d1a      	adds	r2, r3, #4
 8001600:	4b4c      	ldr	r3, [pc, #304]	; (8001734 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8001602:	62da      	str	r2, [r3, #44]	; 0x2c

        switch ((Bitmap::ClutFormat)palette->format)
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	881b      	ldrh	r3, [r3, #0]
 8001608:	b2db      	uxtb	r3, r3
 800160a:	2b00      	cmp	r3, #0
 800160c:	d002      	beq.n	8001614 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x180>
 800160e:	2b01      	cmp	r3, #1
 8001610:	d00d      	beq.n	800162e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x19a>
 8001612:	e020      	b.n	8001656 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1c2>
        {
        case Bitmap::CLUT_FORMAT_L8_ARGB8888:
            /* Write foreground CLUT size and CLUT color mode */
            MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
 8001614:	4b47      	ldr	r3, [pc, #284]	; (8001734 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8001616:	69da      	ldr	r2, [r3, #28]
 8001618:	4b4a      	ldr	r3, [pc, #296]	; (8001744 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2b0>)
 800161a:	4013      	ands	r3, r2
 800161c:	68fa      	ldr	r2, [r7, #12]
 800161e:	8852      	ldrh	r2, [r2, #2]
 8001620:	3a01      	subs	r2, #1
 8001622:	0212      	lsls	r2, r2, #8
 8001624:	4611      	mov	r1, r2
 8001626:	4a43      	ldr	r2, [pc, #268]	; (8001734 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8001628:	430b      	orrs	r3, r1
 800162a:	61d3      	str	r3, [r2, #28]
            break;
 800162c:	e01a      	b.n	8001664 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1d0>
        case Bitmap::CLUT_FORMAT_L8_RGB888:
            if(blitOp.alpha == 255)
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	7f1b      	ldrb	r3, [r3, #28]
 8001632:	2bff      	cmp	r3, #255	; 0xff
 8001634:	d101      	bne.n	800163a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1a6>
            {
                blend = false;
 8001636:	2300      	movs	r3, #0
 8001638:	77fb      	strb	r3, [r7, #31]
            }
            MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 800163a:	4b3e      	ldr	r3, [pc, #248]	; (8001734 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 800163c:	69da      	ldr	r2, [r3, #28]
 800163e:	4b41      	ldr	r3, [pc, #260]	; (8001744 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2b0>)
 8001640:	4013      	ands	r3, r2
 8001642:	68fa      	ldr	r2, [r7, #12]
 8001644:	8852      	ldrh	r2, [r2, #2]
 8001646:	3a01      	subs	r2, #1
 8001648:	0212      	lsls	r2, r2, #8
 800164a:	4313      	orrs	r3, r2
 800164c:	4a39      	ldr	r2, [pc, #228]	; (8001734 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 800164e:	f043 0310 	orr.w	r3, r3, #16
 8001652:	61d3      	str	r3, [r2, #28]
            break;
 8001654:	e006      	b.n	8001664 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1d0>
        case Bitmap::CLUT_FORMAT_L8_RGB565:
        default:
            assert(0 && "Unsupported format");
 8001656:	4b3c      	ldr	r3, [pc, #240]	; (8001748 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2b4>)
 8001658:	4a3c      	ldr	r2, [pc, #240]	; (800174c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2b8>)
 800165a:	f44f 7181 	mov.w	r1, #258	; 0x102
 800165e:	483c      	ldr	r0, [pc, #240]	; (8001750 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2bc>)
 8001660:	f02a f90a 	bl	802b878 <__assert_func>
            break;
        }

        /* Enable the CLUT loading for the foreground */
        SET_BIT(DMA2D->FGPFCCR, DMA2D_FGPFCCR_START);
 8001664:	4b33      	ldr	r3, [pc, #204]	; (8001734 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8001666:	69db      	ldr	r3, [r3, #28]
 8001668:	4a32      	ldr	r2, [pc, #200]	; (8001734 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 800166a:	f043 0320 	orr.w	r3, r3, #32
 800166e:	61d3      	str	r3, [r2, #28]

        while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
 8001670:	4b30      	ldr	r3, [pc, #192]	; (8001734 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8001672:	69db      	ldr	r3, [r3, #28]
 8001674:	f003 0320 	and.w	r3, r3, #32
 8001678:	2b00      	cmp	r3, #0
 800167a:	bf14      	ite	ne
 800167c:	2301      	movne	r3, #1
 800167e:	2300      	moveq	r3, #0
 8001680:	b2db      	uxtb	r3, r3
 8001682:	2b00      	cmp	r3, #0
 8001684:	d000      	beq.n	8001688 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1f4>
 8001686:	e7f3      	b.n	8001670 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1dc>
        {
        }
        DMA2D->IFCR = (DMA2D_FLAG_CTC);
 8001688:	4b2a      	ldr	r3, [pc, #168]	; (8001734 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 800168a:	2210      	movs	r2, #16
 800168c:	609a      	str	r2, [r3, #8]

        /* Set DMA2D mode */
        if(blend)
 800168e:	7ffb      	ldrb	r3, [r7, #31]
 8001690:	2b00      	cmp	r3, #0
 8001692:	d003      	beq.n	800169c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x208>
        {
            WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8001694:	4b27      	ldr	r3, [pc, #156]	; (8001734 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8001696:	4a29      	ldr	r2, [pc, #164]	; (800173c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8001698:	601a      	str	r2, [r3, #0]
        else
        {
            WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
        }
      }
      break;
 800169a:	e046      	b.n	800172a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x296>
            WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 800169c:	4b25      	ldr	r3, [pc, #148]	; (8001734 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 800169e:	4a2d      	ldr	r2, [pc, #180]	; (8001754 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2c0>)
 80016a0:	601a      	str	r2, [r3, #0]
      break;
 80016a2:	e042      	b.n	800172a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x296>
    case BLIT_OP_COPY_WITH_ALPHA:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	7f1b      	ldrb	r3, [r3, #28]
 80016a8:	061b      	lsls	r3, r3, #24
 80016aa:	461a      	mov	r2, r3
 80016ac:	69bb      	ldr	r3, [r7, #24]
 80016ae:	4313      	orrs	r3, r2
 80016b0:	4a20      	ldr	r2, [pc, #128]	; (8001734 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 80016b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016b6:	61d3      	str	r3, [r2, #28]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 80016b8:	4a1e      	ldr	r2, [pc, #120]	; (8001734 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 80016ba:	697b      	ldr	r3, [r7, #20]
 80016bc:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	691a      	ldr	r2, [r3, #16]
 80016c2:	4b1c      	ldr	r3, [pc, #112]	; (8001734 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 80016c4:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 80016c6:	4b1b      	ldr	r3, [pc, #108]	; (8001734 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 80016c8:	4a1c      	ldr	r2, [pc, #112]	; (800173c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 80016ca:	601a      	str	r2, [r3, #0]
        break;
 80016cc:	e02d      	b.n	800172a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x296>
    case BLIT_OP_COPY_ARGB8888:
    case BLIT_OP_COPY_ARGB8888_WITH_ALPHA:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	7f1b      	ldrb	r3, [r3, #28]
 80016d2:	061b      	lsls	r3, r3, #24
 80016d4:	461a      	mov	r2, r3
 80016d6:	69bb      	ldr	r3, [r7, #24]
 80016d8:	4313      	orrs	r3, r2
 80016da:	4a16      	ldr	r2, [pc, #88]	; (8001734 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 80016dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016e0:	61d3      	str	r3, [r2, #28]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 80016e2:	4a14      	ldr	r2, [pc, #80]	; (8001734 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 80016e4:	697b      	ldr	r3, [r7, #20]
 80016e6:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	691a      	ldr	r2, [r3, #16]
 80016ec:	4b11      	ldr	r3, [pc, #68]	; (8001734 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 80016ee:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 80016f0:	4b10      	ldr	r3, [pc, #64]	; (8001734 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 80016f2:	4a12      	ldr	r2, [pc, #72]	; (800173c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 80016f4:	601a      	str	r2, [r3, #0]
        break;
 80016f6:	e018      	b.n	800172a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x296>
    default: /* BLIT_OP_COPY */
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	7f1b      	ldrb	r3, [r3, #28]
 80016fc:	061b      	lsls	r3, r3, #24
 80016fe:	461a      	mov	r2, r3
 8001700:	69bb      	ldr	r3, [r7, #24]
 8001702:	4313      	orrs	r3, r2
 8001704:	4a0b      	ldr	r2, [pc, #44]	; (8001734 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8001706:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800170a:	61d3      	str	r3, [r2, #28]

        /* Perform pixel-format-conversion (PFC) If Bitmap format is not same format as framebuffer format */
        if (blitOp.srcFormat != blitOp.dstFormat)
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	7f5a      	ldrb	r2, [r3, #29]
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	7f9b      	ldrb	r3, [r3, #30]
 8001714:	429a      	cmp	r2, r3
 8001716:	d003      	beq.n	8001720 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>
        {
            /* Start DMA2D : PFC Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 8001718:	4b06      	ldr	r3, [pc, #24]	; (8001734 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 800171a:	4a0e      	ldr	r2, [pc, #56]	; (8001754 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2c0>)
 800171c:	601a      	str	r2, [r3, #0]
        {
            /* Start DMA2D : M2M Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
        }

        break;
 800171e:	e003      	b.n	8001728 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
 8001720:	4b04      	ldr	r3, [pc, #16]	; (8001734 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8001722:	f240 2201 	movw	r2, #513	; 0x201
 8001726:	601a      	str	r2, [r3, #0]
        break;
 8001728:	bf00      	nop
    }
}
 800172a:	bf00      	nop
 800172c:	3724      	adds	r7, #36	; 0x24
 800172e:	46bd      	mov	sp, r7
 8001730:	bd90      	pop	{r4, r7, pc}
 8001732:	bf00      	nop
 8001734:	52001000 	.word	0x52001000
 8001738:	0002000a 	.word	0x0002000a
 800173c:	00020201 	.word	0x00020201
 8001740:	00020009 	.word	0x00020009
 8001744:	ffff00ef 	.word	0xffff00ef
 8001748:	0802cd68 	.word	0x0802cd68
 800174c:	0802cd84 	.word	0x0802cd84
 8001750:	0802cca4 	.word	0x0802cca4
 8001754:	00010201 	.word	0x00010201

08001758 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE>:
 * void STM32DMA::setupDataFill(const BlitOp& blitOp) handles blit operation of
 * BLIT_OP_FILL
 * BLIT_OP_FILL_WITH_ALPHA
 */
void STM32DMA::setupDataFill(const BlitOp& blitOp)
{
 8001758:	b590      	push	{r4, r7, lr}
 800175a:	b085      	sub	sp, #20
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
 8001760:	6039      	str	r1, [r7, #0]
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	7f9b      	ldrb	r3, [r3, #30]
 8001766:	4619      	mov	r1, r3
 8001768:	6878      	ldr	r0, [r7, #4]
 800176a:	f7ff fe49 	bl	8001400 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 800176e:	60f8      	str	r0, [r7, #12]

    /* DMA2D OPFCCR register configuration ---------------------------------------*/
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8001770:	4a2f      	ldr	r2, [pc, #188]	; (8001830 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	6353      	str	r3, [r2, #52]	; 0x34

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	8adb      	ldrh	r3, [r3, #22]
 800177a:	461a      	mov	r2, r3
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	8a9b      	ldrh	r3, [r3, #20]
 8001780:	041b      	lsls	r3, r3, #16
 8001782:	431a      	orrs	r2, r3
 8001784:	4b2a      	ldr	r3, [pc, #168]	; (8001830 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8001786:	645a      	str	r2, [r3, #68]	; 0x44

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	691a      	ldr	r2, [r3, #16]
 800178c:	4b28      	ldr	r3, [pc, #160]	; (8001830 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 800178e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* DMA2D OOR register configuration ------------------------------------------*/
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	8b5b      	ldrh	r3, [r3, #26]
 8001794:	461a      	mov	r2, r3
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	8a9b      	ldrh	r3, [r3, #20]
 800179a:	1ad2      	subs	r2, r2, r3
 800179c:	4b24      	ldr	r3, [pc, #144]	; (8001830 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 800179e:	641a      	str	r2, [r3, #64]	; 0x40

    if (blitOp.operation == BLIT_OP_FILL_WITH_ALPHA)
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	2b08      	cmp	r3, #8
 80017a6:	d12e      	bne.n	8001806 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xae>
    {
        /* DMA2D BGOR register configuration -------------------------------------*/
        WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	8b5b      	ldrh	r3, [r3, #26]
 80017ac:	461a      	mov	r2, r3
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	8a9b      	ldrh	r3, [r3, #20]
 80017b2:	1ad2      	subs	r2, r2, r3
 80017b4:	4b1e      	ldr	r3, [pc, #120]	; (8001830 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 80017b6:	619a      	str	r2, [r3, #24]

        /* DMA2D FGOR register configuration -------------------------------------*/
        WRITE_REG(DMA2D->FGOR, blitOp.dstLoopStride - blitOp.nSteps);
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	8b5b      	ldrh	r3, [r3, #26]
 80017bc:	461a      	mov	r2, r3
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	8a9b      	ldrh	r3, [r3, #20]
 80017c2:	1ad2      	subs	r2, r2, r3
 80017c4:	4b1a      	ldr	r3, [pc, #104]	; (8001830 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 80017c6:	611a      	str	r2, [r3, #16]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 80017c8:	4a19      	ldr	r2, [pc, #100]	; (8001830 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	6253      	str	r3, [r2, #36]	; 0x24

        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, CM_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | ((blitOp.alpha << 24) & DMA2D_BGPFCCR_ALPHA));
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	7f1b      	ldrb	r3, [r3, #28]
 80017d2:	061b      	lsls	r3, r3, #24
 80017d4:	4619      	mov	r1, r3
 80017d6:	4a16      	ldr	r2, [pc, #88]	; (8001830 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 80017d8:	4b16      	ldr	r3, [pc, #88]	; (8001834 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xdc>)
 80017da:	430b      	orrs	r3, r1
 80017dc:	61d3      	str	r3, [r2, #28]

        /* DMA2D FGCOLR register configuration -------------------------------------*/
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	330c      	adds	r3, #12
 80017e2:	4c13      	ldr	r4, [pc, #76]	; (8001830 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 80017e4:	4618      	mov	r0, r3
 80017e6:	f7ff fc79 	bl	80010dc <_ZNK8touchgfx9colortypecvmEv>
 80017ea:	4603      	mov	r3, r0
 80017ec:	6223      	str	r3, [r4, #32]

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	691a      	ldr	r2, [r3, #16]
 80017f2:	4b0f      	ldr	r3, [pc, #60]	; (8001830 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 80017f4:	615a      	str	r2, [r3, #20]

        /* Configure DMA2D source address */
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	691a      	ldr	r2, [r3, #16]
 80017fa:	4b0d      	ldr	r3, [pc, #52]	; (8001830 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 80017fc:	60da      	str	r2, [r3, #12]

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_M2M_BLEND));
 80017fe:	4b0c      	ldr	r3, [pc, #48]	; (8001830 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8001800:	4a0d      	ldr	r2, [pc, #52]	; (8001838 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xe0>)
 8001802:	601a      	str	r2, [r3, #0]
        WRITE_REG(DMA2D->OCOLR, blitOp.color);

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
    }
}
 8001804:	e010      	b.n	8001828 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd0>
        WRITE_REG(DMA2D->FGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8001806:	4a0a      	ldr	r2, [pc, #40]	; (8001830 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	61d3      	str	r3, [r2, #28]
        WRITE_REG(DMA2D->FGOR, 0);
 800180c:	4b08      	ldr	r3, [pc, #32]	; (8001830 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 800180e:	2200      	movs	r2, #0
 8001810:	611a      	str	r2, [r3, #16]
        WRITE_REG(DMA2D->OCOLR, blitOp.color);
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	330c      	adds	r3, #12
 8001816:	4c06      	ldr	r4, [pc, #24]	; (8001830 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8001818:	4618      	mov	r0, r3
 800181a:	f7ff fc5f 	bl	80010dc <_ZNK8touchgfx9colortypecvmEv>
 800181e:	4603      	mov	r3, r0
 8001820:	63a3      	str	r3, [r4, #56]	; 0x38
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
 8001822:	4b03      	ldr	r3, [pc, #12]	; (8001830 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8001824:	4a05      	ldr	r2, [pc, #20]	; (800183c <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xe4>)
 8001826:	601a      	str	r2, [r3, #0]
}
 8001828:	bf00      	nop
 800182a:	3714      	adds	r7, #20
 800182c:	46bd      	mov	sp, r7
 800182e:	bd90      	pop	{r4, r7, pc}
 8001830:	52001000 	.word	0x52001000
 8001834:	00010009 	.word	0x00010009
 8001838:	00020201 	.word	0x00020201
 800183c:	00030201 	.word	0x00030201

08001840 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
class LockFreeDMA_Queue : public DMA_Queue
 8001840:	b580      	push	{r7, lr}
 8001842:	b082      	sub	sp, #8
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
 8001848:	4a05      	ldr	r2, [pc, #20]	; (8001860 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev+0x20>)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	601a      	str	r2, [r3, #0]
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	4618      	mov	r0, r3
 8001852:	f7ff fc4f 	bl	80010f4 <_ZN8touchgfx9DMA_QueueD1Ev>
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	4618      	mov	r0, r3
 800185a:	3708      	adds	r7, #8
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}
 8001860:	0802f10c 	.word	0x0802f10c

08001864 <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 8001864:	b580      	push	{r7, lr}
 8001866:	b082      	sub	sp, #8
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
 800186c:	6878      	ldr	r0, [r7, #4]
 800186e:	f7ff ffe7 	bl	8001840 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 8001872:	2114      	movs	r1, #20
 8001874:	6878      	ldr	r0, [r7, #4]
 8001876:	f029 fe2a 	bl	802b4ce <_ZdlPvj>
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	4618      	mov	r0, r3
 800187e:	3708      	adds	r7, #8
 8001880:	46bd      	mov	sp, r7
 8001882:	bd80      	pop	{r7, pc}

08001884 <_ZN8touchgfx4RectC1Ev>:
/** Class representing a Rectangle with a few convenient methods. */
class Rect
{
public:
    /** Default constructor. Resulting in an empty Rect with coordinates 0,0. */
    Rect()
 8001884:	b480      	push	{r7}
 8001886:	b083      	sub	sp, #12
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
        : x(0), y(0), width(0), height(0)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	2200      	movs	r2, #0
 8001890:	801a      	strh	r2, [r3, #0]
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	2200      	movs	r2, #0
 8001896:	805a      	strh	r2, [r3, #2]
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	2200      	movs	r2, #0
 800189c:	809a      	strh	r2, [r3, #4]
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	2200      	movs	r2, #0
 80018a2:	80da      	strh	r2, [r3, #6]
    {
    }
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	4618      	mov	r0, r3
 80018a8:	370c      	adds	r7, #12
 80018aa:	46bd      	mov	sp, r7
 80018ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b0:	4770      	bx	lr
	...

080018b4 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>:
     * Registers an array of texts. This function is called automatically from
     * touchgfx_generic_init(). Should not be called under normal circumstances.
     *
     * @param  t The array of texts.
     */
    static void registerTexts(const Texts* t)
 80018b4:	b480      	push	{r7}
 80018b6:	b083      	sub	sp, #12
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
    {
        texts = t;
 80018bc:	4a04      	ldr	r2, [pc, #16]	; (80018d0 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE+0x1c>)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6013      	str	r3, [r2, #0]
    }
 80018c2:	bf00      	nop
 80018c4:	370c      	adds	r7, #12
 80018c6:	46bd      	mov	sp, r7
 80018c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018cc:	4770      	bx	lr
 80018ce:	bf00      	nop
 80018d0:	2400c938 	.word	0x2400c938

080018d4 <_ZN8touchgfx12FontProviderD1Ev>:
     * @return The font with a font id of fontId.
     */
    virtual Font* getFont(FontId fontId) = 0;

    /** Finalizes an instance of the FontProvider class. */
    virtual ~FontProvider()
 80018d4:	b480      	push	{r7}
 80018d6:	b083      	sub	sp, #12
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
    {
 80018dc:	4a04      	ldr	r2, [pc, #16]	; (80018f0 <_ZN8touchgfx12FontProviderD1Ev+0x1c>)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	601a      	str	r2, [r3, #0]
    }
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	4618      	mov	r0, r3
 80018e6:	370c      	adds	r7, #12
 80018e8:	46bd      	mov	sp, r7
 80018ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ee:	4770      	bx	lr
 80018f0:	0802dbd4 	.word	0x0802dbd4

080018f4 <_ZN8touchgfx12FontProviderD0Ev>:
    virtual ~FontProvider()
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b082      	sub	sp, #8
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
    }
 80018fc:	6878      	ldr	r0, [r7, #4]
 80018fe:	f7ff ffe9 	bl	80018d4 <_ZN8touchgfx12FontProviderD1Ev>
 8001902:	2104      	movs	r1, #4
 8001904:	6878      	ldr	r0, [r7, #4]
 8001906:	f029 fde2 	bl	802b4ce <_ZdlPvj>
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	4618      	mov	r0, r3
 800190e:	3708      	adds	r7, #8
 8001910:	46bd      	mov	sp, r7
 8001912:	bd80      	pop	{r7, pc}

08001914 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>:
     * @param [in] scr  A memory partition containing enough memory to hold the largest view.
     * @param [in] tra  A memory partition containing enough memory to hold the largest
     *                  transition.
     * @param [in] app  A reference to the MVPApplication instance.
     */
    MVPHeap(AbstractPartition& pres,
 8001914:	b480      	push	{r7}
 8001916:	b085      	sub	sp, #20
 8001918:	af00      	add	r7, sp, #0
 800191a:	60f8      	str	r0, [r7, #12]
 800191c:	60b9      	str	r1, [r7, #8]
 800191e:	607a      	str	r2, [r7, #4]
 8001920:	603b      	str	r3, [r7, #0]
            AbstractPartition& tra,
            MVPApplication& app)
        : presenterStorage(pres),
          screenStorage(scr),
          transitionStorage(tra),
          frontendApplication(app)
 8001922:	4a0b      	ldr	r2, [pc, #44]	; (8001950 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE+0x3c>)
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	601a      	str	r2, [r3, #0]
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	68ba      	ldr	r2, [r7, #8]
 800192c:	605a      	str	r2, [r3, #4]
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	687a      	ldr	r2, [r7, #4]
 8001932:	609a      	str	r2, [r3, #8]
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	683a      	ldr	r2, [r7, #0]
 8001938:	60da      	str	r2, [r3, #12]
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	69ba      	ldr	r2, [r7, #24]
 800193e:	611a      	str	r2, [r3, #16]
    {
    }
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	4618      	mov	r0, r3
 8001944:	3714      	adds	r7, #20
 8001946:	46bd      	mov	sp, r7
 8001948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194c:	4770      	bx	lr
 800194e:	bf00      	nop
 8001950:	0802dbc4 	.word	0x0802dbc4

08001954 <_ZN8touchgfx7MVPHeapD1Ev>:

    /** Finalizes an instance of the MVPHeap class. */
    virtual ~MVPHeap()
 8001954:	b480      	push	{r7}
 8001956:	b083      	sub	sp, #12
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
    {
 800195c:	4a04      	ldr	r2, [pc, #16]	; (8001970 <_ZN8touchgfx7MVPHeapD1Ev+0x1c>)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	601a      	str	r2, [r3, #0]
    }
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	4618      	mov	r0, r3
 8001966:	370c      	adds	r7, #12
 8001968:	46bd      	mov	sp, r7
 800196a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196e:	4770      	bx	lr
 8001970:	0802dbc4 	.word	0x0802dbc4

08001974 <_ZN8touchgfx7MVPHeapD0Ev>:
    virtual ~MVPHeap()
 8001974:	b580      	push	{r7, lr}
 8001976:	b082      	sub	sp, #8
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
    }
 800197c:	6878      	ldr	r0, [r7, #4]
 800197e:	f7ff ffe9 	bl	8001954 <_ZN8touchgfx7MVPHeapD1Ev>
 8001982:	2114      	movs	r1, #20
 8001984:	6878      	ldr	r0, [r7, #4]
 8001986:	f029 fda2 	bl	802b4ce <_ZdlPvj>
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	4618      	mov	r0, r3
 800198e:	3708      	adds	r7, #8
 8001990:	46bd      	mov	sp, r7
 8001992:	bd80      	pop	{r7, pc}

08001994 <_ZN8touchgfx15UIEventListener16handleClickEventERKNS_10ClickEventE>:
     * This handler is invoked when a mouse click or display touch event has been detected
     * by the system.
     *
     * @param  event The event data.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 8001994:	b480      	push	{r7}
 8001996:	b083      	sub	sp, #12
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
 800199c:	6039      	str	r1, [r7, #0]
    {
    }
 800199e:	bf00      	nop
 80019a0:	370c      	adds	r7, #12
 80019a2:	46bd      	mov	sp, r7
 80019a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a8:	4770      	bx	lr

080019aa <_ZN8touchgfx15UIEventListener15handleDragEventERKNS_9DragEventE>:
    /**
     * This handler is invoked when a drag event has been detected by the system.
     *
     * @param  event The event data.
     */
    virtual void handleDragEvent(const DragEvent& event)
 80019aa:	b480      	push	{r7}
 80019ac:	b083      	sub	sp, #12
 80019ae:	af00      	add	r7, sp, #0
 80019b0:	6078      	str	r0, [r7, #4]
 80019b2:	6039      	str	r1, [r7, #0]
    {
    }
 80019b4:	bf00      	nop
 80019b6:	370c      	adds	r7, #12
 80019b8:	46bd      	mov	sp, r7
 80019ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019be:	4770      	bx	lr

080019c0 <_ZN8touchgfx15UIEventListener18handleGestureEventERKNS_12GestureEventE>:
    /**
     * This handler is invoked when a gesture event has been detected by the system.
     *
     * @param  event The event data.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 80019c0:	b480      	push	{r7}
 80019c2:	b083      	sub	sp, #12
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
 80019c8:	6039      	str	r1, [r7, #0]
    {
    }
 80019ca:	bf00      	nop
 80019cc:	370c      	adds	r7, #12
 80019ce:	46bd      	mov	sp, r7
 80019d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d4:	4770      	bx	lr

080019d6 <_ZN8touchgfx15UIEventListener14handleKeyEventEh>:
    /**
     * This handler is invoked when a key (or button) event has been detected by the system.
     *
     * @param  c The key or button pressed.
     */
    virtual void handleKeyEvent(uint8_t c)
 80019d6:	b480      	push	{r7}
 80019d8:	b083      	sub	sp, #12
 80019da:	af00      	add	r7, sp, #0
 80019dc:	6078      	str	r0, [r7, #4]
 80019de:	460b      	mov	r3, r1
 80019e0:	70fb      	strb	r3, [r7, #3]
    {
    }
 80019e2:	bf00      	nop
 80019e4:	370c      	adds	r7, #12
 80019e6:	46bd      	mov	sp, r7
 80019e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ec:	4770      	bx	lr

080019ee <_ZN8touchgfx15UIEventListener15handleTickEventEv>:

    /**
     * This handler is invoked when a system tick event has been generated. The system tick
     * period is configured in the HAL.
     */
    virtual void handleTickEvent()
 80019ee:	b480      	push	{r7}
 80019f0:	b083      	sub	sp, #12
 80019f2:	af00      	add	r7, sp, #0
 80019f4:	6078      	str	r0, [r7, #4]
    {
    }
 80019f6:	bf00      	nop
 80019f8:	370c      	adds	r7, #12
 80019fa:	46bd      	mov	sp, r7
 80019fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a00:	4770      	bx	lr

08001a02 <_ZN8touchgfx15UIEventListener29handlePendingScreenTransitionEv>:

    /** This handler is invoked when a change screen event is pending. */
    virtual void handlePendingScreenTransition()
 8001a02:	b480      	push	{r7}
 8001a04:	b083      	sub	sp, #12
 8001a06:	af00      	add	r7, sp, #0
 8001a08:	6078      	str	r0, [r7, #4]
    {
    }
 8001a0a:	bf00      	nop
 8001a0c:	370c      	adds	r7, #12
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a14:	4770      	bx	lr
	...

08001a18 <_ZN8touchgfx15UIEventListenerD1Ev>:

    /** Finalizes an instance of the UIEventListener class. */
    virtual ~UIEventListener()
 8001a18:	b480      	push	{r7}
 8001a1a:	b083      	sub	sp, #12
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
    {
 8001a20:	4a04      	ldr	r2, [pc, #16]	; (8001a34 <_ZN8touchgfx15UIEventListenerD1Ev+0x1c>)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	601a      	str	r2, [r3, #0]
    }
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	4618      	mov	r0, r3
 8001a2a:	370c      	adds	r7, #12
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a32:	4770      	bx	lr
 8001a34:	0802db9c 	.word	0x0802db9c

08001a38 <_ZN8touchgfx15UIEventListenerD0Ev>:
    virtual ~UIEventListener()
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b082      	sub	sp, #8
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
    }
 8001a40:	6878      	ldr	r0, [r7, #4]
 8001a42:	f7ff ffe9 	bl	8001a18 <_ZN8touchgfx15UIEventListenerD1Ev>
 8001a46:	2104      	movs	r1, #4
 8001a48:	6878      	ldr	r0, [r7, #4]
 8001a4a:	f029 fd40 	bl	802b4ce <_ZdlPvj>
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	4618      	mov	r0, r3
 8001a52:	3708      	adds	r7, #8
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bd80      	pop	{r7, pc}

08001a58 <_ZN8touchgfx3LCDD1Ev>:
        : textureMapperClass(0)
    {
    }

    /** Finalizes an instance of the LCD class. */
    virtual ~LCD()
 8001a58:	b480      	push	{r7}
 8001a5a:	b083      	sub	sp, #12
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
    {
 8001a60:	4a04      	ldr	r2, [pc, #16]	; (8001a74 <_ZN8touchgfx3LCDD1Ev+0x1c>)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	601a      	str	r2, [r3, #0]
    }
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	4618      	mov	r0, r3
 8001a6a:	370c      	adds	r7, #12
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a72:	4770      	bx	lr
 8001a74:	080302e0 	.word	0x080302e0

08001a78 <_ZN8touchgfx3LCDD0Ev>:
    virtual ~LCD()
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b082      	sub	sp, #8
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
    }
 8001a80:	6878      	ldr	r0, [r7, #4]
 8001a82:	f7ff ffe9 	bl	8001a58 <_ZN8touchgfx3LCDD1Ev>
 8001a86:	2108      	movs	r1, #8
 8001a88:	6878      	ldr	r0, [r7, #4]
 8001a8a:	f029 fd20 	bl	802b4ce <_ZdlPvj>
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	4618      	mov	r0, r3
 8001a92:	3708      	adds	r7, #8
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd80      	pop	{r7, pc}

08001a98 <_ZN8touchgfx11Application15appSwitchScreenEh>:
     * means to switch screen from places that does not have access to a pointer to the new
     * screen. Base implementation is empty.
     *
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
 8001a98:	b480      	push	{r7}
 8001a9a:	b083      	sub	sp, #12
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
 8001aa0:	460b      	mov	r3, r1
 8001aa2:	70fb      	strb	r3, [r7, #3]
    {
    }
 8001aa4:	bf00      	nop
 8001aa6:	370c      	adds	r7, #12
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aae:	4770      	bx	lr

08001ab0 <_ZN8touchgfx11Application13requestRedrawERNS_4RectE>:
    /**
     * An application specific function for requesting redraw of given Rect.
     *
     * @param [in,out] rect The Rect that must be redrawn.
     */
    virtual void requestRedraw(Rect& rect)
 8001ab0:	b480      	push	{r7}
 8001ab2:	b083      	sub	sp, #12
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
 8001ab8:	6039      	str	r1, [r7, #0]
    {
        redraw = rect;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	683a      	ldr	r2, [r7, #0]
 8001abe:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 8001ac2:	6810      	ldr	r0, [r2, #0]
 8001ac4:	6851      	ldr	r1, [r2, #4]
 8001ac6:	c303      	stmia	r3!, {r0, r1}
    }
 8001ac8:	bf00      	nop
 8001aca:	370c      	adds	r7, #12
 8001acc:	46bd      	mov	sp, r7
 8001ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad2:	4770      	bx	lr

08001ad4 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>:
template <>
class GenericCallback<void>
{
public:
    /** Finalizes an instance of the GenericCallback<void> class. */
    virtual ~GenericCallback()
 8001ad4:	b480      	push	{r7}
 8001ad6:	b083      	sub	sp, #12
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
    {
 8001adc:	4a04      	ldr	r2, [pc, #16]	; (8001af0 <_ZN8touchgfx15GenericCallbackIvvvED1Ev+0x1c>)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	601a      	str	r2, [r3, #0]
    }
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	370c      	adds	r7, #12
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aee:	4770      	bx	lr
 8001af0:	0802db84 	.word	0x0802db84

08001af4 <_ZN8touchgfx15GenericCallbackIvvvED0Ev>:
    virtual ~GenericCallback()
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b082      	sub	sp, #8
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
    }
 8001afc:	6878      	ldr	r0, [r7, #4]
 8001afe:	f7ff ffe9 	bl	8001ad4 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 8001b02:	2104      	movs	r1, #4
 8001b04:	6878      	ldr	r0, [r7, #4]
 8001b06:	f029 fce2 	bl	802b4ce <_ZdlPvj>
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	3708      	adds	r7, #8
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bd80      	pop	{r7, pc}

08001b14 <_ZN8touchgfx8Gestures9DragStateC1Ev>:
    static const uint8_t MIN_VELOCITY_AT_RELEASE_BEFORE_SWIPE = 3;

    /** Defines the state of a drag. */
    struct DragState
    {
        DragState()
 8001b14:	b480      	push	{r7}
 8001b16:	b083      	sub	sp, #12
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
              downX(0),
              downY(0),
              tickCount(0),
              velocityX(0),
              velocityY(0),
              inProgress(false)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2200      	movs	r2, #0
 8001b20:	801a      	strh	r2, [r3, #0]
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	2200      	movs	r2, #0
 8001b26:	805a      	strh	r2, [r3, #2]
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	809a      	strh	r2, [r3, #4]
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	2200      	movs	r2, #0
 8001b32:	80da      	strh	r2, [r3, #6]
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2200      	movs	r2, #0
 8001b38:	811a      	strh	r2, [r3, #8]
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	815a      	strh	r2, [r3, #10]
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2200      	movs	r2, #0
 8001b44:	819a      	strh	r2, [r3, #12]
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	2200      	movs	r2, #0
 8001b4a:	739a      	strb	r2, [r3, #14]
        {
        }
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	4618      	mov	r0, r3
 8001b50:	370c      	adds	r7, #12
 8001b52:	46bd      	mov	sp, r7
 8001b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b58:	4770      	bx	lr

08001b5a <_ZN8touchgfx8GesturesC1Ev>:
        bool inProgress;    ///< Whether a drag is in progress or not
    };

public:
    /** Default constructor. Does nothing. */
    Gestures()
 8001b5a:	b580      	push	{r7, lr}
 8001b5c:	b082      	sub	sp, #8
 8001b5e:	af00      	add	r7, sp, #0
 8001b60:	6078      	str	r0, [r7, #4]
        : drag(), listener(0), dragThresholdValue(0)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	4618      	mov	r0, r3
 8001b66:	f7ff ffd5 	bl	8001b14 <_ZN8touchgfx8Gestures9DragStateC1Ev>
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	611a      	str	r2, [r3, #16]
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2200      	movs	r2, #0
 8001b74:	829a      	strh	r2, [r3, #20]
    {
    }
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	4618      	mov	r0, r3
 8001b7a:	3708      	adds	r7, #8
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd80      	pop	{r7, pc}

08001b80 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>:
    HAL(DMA_Interface& dmaInterface, LCD& display, TouchController& touchCtrl, uint16_t width, uint16_t height)
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b084      	sub	sp, #16
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	60f8      	str	r0, [r7, #12]
 8001b88:	60b9      	str	r1, [r7, #8]
 8001b8a:	607a      	str	r2, [r7, #4]
 8001b8c:	603b      	str	r3, [r7, #0]
          lastRenderMethod(HARDWARE)
 8001b8e:	4a55      	ldr	r2, [pc, #340]	; (8001ce4 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x164>)
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	601a      	str	r2, [r3, #0]
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	68ba      	ldr	r2, [r7, #8]
 8001b98:	605a      	str	r2, [r3, #4]
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	687a      	ldr	r2, [r7, #4]
 8001b9e:	609a      	str	r2, [r3, #8]
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	683a      	ldr	r2, [r7, #0]
 8001ba4:	60da      	str	r2, [r3, #12]
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	2200      	movs	r2, #0
 8001baa:	611a      	str	r2, [r3, #16]
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	2200      	movs	r2, #0
 8001bb0:	615a      	str	r2, [r3, #20]
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	619a      	str	r2, [r3, #24]
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	331c      	adds	r3, #28
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	f7ff ffcc 	bl	8001b5a <_ZN8touchgfx8GesturesC1Ev>
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	2200      	movs	r2, #0
 8001bce:	639a      	str	r2, [r3, #56]	; 0x38
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	63da      	str	r2, [r3, #60]	; 0x3c
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	2200      	movs	r2, #0
 8001bda:	641a      	str	r2, [r3, #64]	; 0x40
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	2200      	movs	r2, #0
 8001be0:	645a      	str	r2, [r3, #68]	; 0x44
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	2200      	movs	r2, #0
 8001be6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	2201      	movs	r2, #1
 8001bee:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	2200      	movs	r2, #0
 8001c06:	64da      	str	r2, [r3, #76]	; 0x4c
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	3350      	adds	r3, #80	; 0x50
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	f7ff fe39 	bl	8001884 <_ZN8touchgfx4RectC1Ev>
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	2200      	movs	r2, #0
 8001c16:	659a      	str	r2, [r3, #88]	; 0x58
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	65da      	str	r2, [r3, #92]	; 0x5c
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	2200      	movs	r2, #0
 8001c22:	661a      	str	r2, [r3, #96]	; 0x60
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	2201      	movs	r2, #1
 8001c28:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	2200      	movs	r2, #0
 8001c30:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	2200      	movs	r2, #0
 8001c38:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	2201      	movs	r2, #1
 8001c40:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	2200      	movs	r2, #0
 8001c48:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	2200      	movs	r2, #0
 8001c50:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	2200      	movs	r2, #0
 8001c58:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	2200      	movs	r2, #0
 8001c60:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	2200      	movs	r2, #0
 8001c68:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	2200      	movs	r2, #0
 8001c70:	671a      	str	r2, [r3, #112]	; 0x70
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	2200      	movs	r2, #0
 8001c76:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	2200      	movs	r2, #0
 8001c86:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	2201      	movs	r2, #1
 8001c8e:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	2201      	movs	r2, #1
 8001c96:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
        instance = this;
 8001c9a:	4a13      	ldr	r2, [pc, #76]	; (8001ce8 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x168>)
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	6013      	str	r3, [r2, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
 8001ca0:	4a12      	ldr	r2, [pc, #72]	; (8001cec <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x16c>)
 8001ca2:	8b3b      	ldrh	r3, [r7, #24]
 8001ca4:	8013      	strh	r3, [r2, #0]
 8001ca6:	4b11      	ldr	r3, [pc, #68]	; (8001cec <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x16c>)
 8001ca8:	881a      	ldrh	r2, [r3, #0]
 8001caa:	4b11      	ldr	r3, [pc, #68]	; (8001cf0 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x170>)
 8001cac:	801a      	strh	r2, [r3, #0]
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 8001cae:	4a11      	ldr	r2, [pc, #68]	; (8001cf4 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x174>)
 8001cb0:	8bbb      	ldrh	r3, [r7, #28]
 8001cb2:	8013      	strh	r3, [r2, #0]
 8001cb4:	4b0f      	ldr	r3, [pc, #60]	; (8001cf4 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x174>)
 8001cb6:	881a      	ldrh	r2, [r3, #0]
 8001cb8:	4b0f      	ldr	r3, [pc, #60]	; (8001cf8 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x178>)
 8001cba:	801a      	strh	r2, [r3, #0]
        DISPLAY_ROTATION = rotate0;
 8001cbc:	4b0f      	ldr	r3, [pc, #60]	; (8001cfc <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x17c>)
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	701a      	strb	r2, [r3, #0]
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8001cc2:	8b3a      	ldrh	r2, [r7, #24]
 8001cc4:	8bbb      	ldrh	r3, [r7, #28]
 8001cc6:	429a      	cmp	r2, r3
 8001cc8:	bf34      	ite	cc
 8001cca:	2301      	movcc	r3, #1
 8001ccc:	2300      	movcs	r3, #0
 8001cce:	b2db      	uxtb	r3, r3
 8001cd0:	461a      	mov	r2, r3
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	4618      	mov	r0, r3
 8001cdc:	3710      	adds	r7, #16
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}
 8001ce2:	bf00      	nop
 8001ce4:	0802eb64 	.word	0x0802eb64
 8001ce8:	2400c8bc 	.word	0x2400c8bc
 8001cec:	2400c8b0 	.word	0x2400c8b0
 8001cf0:	2400c8b6 	.word	0x2400c8b6
 8001cf4:	2400c8b2 	.word	0x2400c8b2
 8001cf8:	2400c8b8 	.word	0x2400c8b8
 8001cfc:	2400c8b4 	.word	0x2400c8b4

08001d00 <_ZN8touchgfx11ApplicationD1Ev>:
class Application : public UIEventListener
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b082      	sub	sp, #8
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
 8001d08:	4a05      	ldr	r2, [pc, #20]	; (8001d20 <_ZN8touchgfx11ApplicationD1Ev+0x20>)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	601a      	str	r2, [r3, #0]
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	4618      	mov	r0, r3
 8001d12:	f7ff fe81 	bl	8001a18 <_ZN8touchgfx15UIEventListenerD1Ev>
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	4618      	mov	r0, r3
 8001d1a:	3708      	adds	r7, #8
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd80      	pop	{r7, pc}
 8001d20:	080303f4 	.word	0x080303f4

08001d24 <_ZN8touchgfx11ApplicationD0Ev>:
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b082      	sub	sp, #8
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
 8001d2c:	6878      	ldr	r0, [r7, #4]
 8001d2e:	f7ff ffe7 	bl	8001d00 <_ZN8touchgfx11ApplicationD1Ev>
 8001d32:	f44f 719c 	mov.w	r1, #312	; 0x138
 8001d36:	6878      	ldr	r0, [r7, #4]
 8001d38:	f029 fbc9 	bl	802b4ce <_ZdlPvj>
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	4618      	mov	r0, r3
 8001d40:	3708      	adds	r7, #8
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}

08001d46 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
    /**
     * Handles the pending screen transition.
     *
     * Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 8001d46:	b580      	push	{r7, lr}
 8001d48:	b082      	sub	sp, #8
 8001d4a:	af00      	add	r7, sp, #0
 8001d4c:	6078      	str	r0, [r7, #4]
    {
        evaluatePendingScreenTransition();
 8001d4e:	6878      	ldr	r0, [r7, #4]
 8001d50:	f000 f804 	bl	8001d5c <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>
    }
 8001d54:	bf00      	nop
 8001d56:	3708      	adds	r7, #8
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bd80      	pop	{r7, pc}

08001d5c <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>:

    /**
     * Evaluates the pending Callback instances. If a callback is valid, it is executed and
     * a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b082      	sub	sp, #8
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d00f      	beq.n	8001d8e <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	330c      	adds	r3, #12
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4610      	mov	r0, r2
 8001d82:	4798      	blx	r3
 8001d84:	4603      	mov	r3, r0
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d001      	beq.n	8001d8e <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	e000      	b.n	8001d90 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x34>
 8001d8e:	2300      	movs	r3, #0
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d00e      	beq.n	8001db2 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x56>
        {
            pendingScreenTransitionCallback->execute();
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	3308      	adds	r3, #8
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4610      	mov	r0, r2
 8001da8:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	2200      	movs	r2, #0
 8001dae:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
        }
    }
 8001db2:	bf00      	nop
 8001db4:	3708      	adds	r7, #8
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}
	...

08001dbc <_ZN8touchgfx14MVPApplicationD1Ev>:
class MVPApplication : public Application
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b082      	sub	sp, #8
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
 8001dc4:	4a05      	ldr	r2, [pc, #20]	; (8001ddc <_ZN8touchgfx14MVPApplicationD1Ev+0x20>)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	601a      	str	r2, [r3, #0]
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f7ff ff97 	bl	8001d00 <_ZN8touchgfx11ApplicationD1Ev>
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	3708      	adds	r7, #8
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bd80      	pop	{r7, pc}
 8001ddc:	0802db40 	.word	0x0802db40

08001de0 <_ZN8touchgfx14MVPApplicationD0Ev>:
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b082      	sub	sp, #8
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
 8001de8:	6878      	ldr	r0, [r7, #4]
 8001dea:	f7ff ffe7 	bl	8001dbc <_ZN8touchgfx14MVPApplicationD1Ev>
 8001dee:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8001df2:	6878      	ldr	r0, [r7, #4]
 8001df4:	f029 fb6b 	bl	802b4ce <_ZdlPvj>
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	3708      	adds	r7, #8
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}
	...

08001e04 <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b082      	sub	sp, #8
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
 8001e0c:	4a08      	ldr	r2, [pc, #32]	; (8001e30 <_ZN23FrontendApplicationBaseD1Ev+0x2c>)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	601a      	str	r2, [r3, #0]
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8001e18:	4618      	mov	r0, r3
 8001e1a:	f000 faf3 	bl	8002404 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	4618      	mov	r0, r3
 8001e22:	f7ff ffcb 	bl	8001dbc <_ZN8touchgfx14MVPApplicationD1Ev>
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	4618      	mov	r0, r3
 8001e2a:	3708      	adds	r7, #8
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bd80      	pop	{r7, pc}
 8001e30:	0802dae4 	.word	0x0802dae4

08001e34 <_ZN23FrontendApplicationBaseD0Ev>:
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b082      	sub	sp, #8
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
 8001e3c:	6878      	ldr	r0, [r7, #4]
 8001e3e:	f7ff ffe1 	bl	8001e04 <_ZN23FrontendApplicationBaseD1Ev>
 8001e42:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8001e46:	6878      	ldr	r0, [r7, #4]
 8001e48:	f029 fb41 	bl	802b4ce <_ZdlPvj>
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	4618      	mov	r0, r3
 8001e50:	3708      	adds	r7, #8
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}
	...

08001e58 <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b082      	sub	sp, #8
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
 8001e60:	4a05      	ldr	r2, [pc, #20]	; (8001e78 <_ZN19FrontendApplicationD1Ev+0x20>)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	601a      	str	r2, [r3, #0]
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	4618      	mov	r0, r3
 8001e6a:	f7ff ffcb 	bl	8001e04 <_ZN23FrontendApplicationBaseD1Ev>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	4618      	mov	r0, r3
 8001e72:	3708      	adds	r7, #8
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bd80      	pop	{r7, pc}
 8001e78:	0802daa0 	.word	0x0802daa0

08001e7c <_ZN19FrontendApplicationD0Ev>:
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b082      	sub	sp, #8
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
 8001e84:	6878      	ldr	r0, [r7, #4]
 8001e86:	f7ff ffe7 	bl	8001e58 <_ZN19FrontendApplicationD1Ev>
 8001e8a:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8001e8e:	6878      	ldr	r0, [r7, #4]
 8001e90:	f029 fb1d 	bl	802b4ce <_ZdlPvj>
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	4618      	mov	r0, r3
 8001e98:	3708      	adds	r7, #8
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}

08001e9e <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 8001e9e:	b580      	push	{r7, lr}
 8001ea0:	b082      	sub	sp, #8
 8001ea2:	af00      	add	r7, sp, #0
 8001ea4:	6078      	str	r0, [r7, #4]
    {
        model.tick();
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8001eac:	4618      	mov	r0, r3
 8001eae:	f006 fb11 	bl	80084d4 <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	f01c fc41 	bl	801e73c <_ZN8touchgfx11Application15handleTickEventEv>
    }
 8001eba:	bf00      	nop
 8001ebc:	3708      	adds	r7, #8
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}

08001ec2 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
    /**
     * Determine (compile time) the Transition type of largest size.
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
 8001ec2:	b580      	push	{r7, lr}
 8001ec4:	b082      	sub	sp, #8
 8001ec6:	af00      	add	r7, sp, #0
 8001ec8:	6078      	str	r0, [r7, #4]
 8001eca:	6039      	str	r1, [r7, #0]
    {
        app.gotoScreen1ScreenNoTransition();
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	4618      	mov	r0, r3
 8001ed0:	f002 fc48 	bl	8004764 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>
    }
 8001ed4:	bf00      	nop
 8001ed6:	3708      	adds	r7, #8
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	bd80      	pop	{r7, pc}

08001edc <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>:
protected:
    FrontendHeapBase(touchgfx::AbstractPartition& presenters, touchgfx::AbstractPartition& views, touchgfx::AbstractPartition& transitions, FrontendApplication& app)
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b086      	sub	sp, #24
 8001ee0:	af02      	add	r7, sp, #8
 8001ee2:	60f8      	str	r0, [r7, #12]
 8001ee4:	60b9      	str	r1, [r7, #8]
 8001ee6:	607a      	str	r2, [r7, #4]
 8001ee8:	603b      	str	r3, [r7, #0]
        : MVPHeap(presenters, views, transitions, app)
 8001eea:	68f8      	ldr	r0, [r7, #12]
 8001eec:	69bb      	ldr	r3, [r7, #24]
 8001eee:	9300      	str	r3, [sp, #0]
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	687a      	ldr	r2, [r7, #4]
 8001ef4:	68b9      	ldr	r1, [r7, #8]
 8001ef6:	f7ff fd0d 	bl	8001914 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>
 8001efa:	4a04      	ldr	r2, [pc, #16]	; (8001f0c <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication+0x30>)
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	601a      	str	r2, [r3, #0]
    {

    }
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	4618      	mov	r0, r3
 8001f04:	3710      	adds	r7, #16
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}
 8001f0a:	bf00      	nop
 8001f0c:	0802da8c 	.word	0x0802da8c

08001f10 <__tcf_0>:
                            > > CombinedTransitionTypes;
    typedef touchgfx::meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 8001f10:	b580      	push	{r7, lr}
 8001f12:	af00      	add	r7, sp, #0
 8001f14:	4801      	ldr	r0, [pc, #4]	; (8001f1c <__tcf_0+0xc>)
 8001f16:	f000 f967 	bl	80021e8 <_ZN12FrontendHeapD1Ev>
 8001f1a:	bd80      	pop	{r7, pc}
 8001f1c:	24000134 	.word	0x24000134

08001f20 <_ZN12FrontendHeap11getInstanceEv>:
    static FrontendHeap& getInstance()
 8001f20:	b580      	push	{r7, lr}
 8001f22:	af00      	add	r7, sp, #0
        static FrontendHeap instance;
 8001f24:	4b12      	ldr	r3, [pc, #72]	; (8001f70 <_ZN12FrontendHeap11getInstanceEv+0x50>)
 8001f26:	781b      	ldrb	r3, [r3, #0]
 8001f28:	f3bf 8f5b 	dmb	ish
 8001f2c:	b2db      	uxtb	r3, r3
 8001f2e:	f003 0301 	and.w	r3, r3, #1
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	bf0c      	ite	eq
 8001f36:	2301      	moveq	r3, #1
 8001f38:	2300      	movne	r3, #0
 8001f3a:	b2db      	uxtb	r3, r3
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d013      	beq.n	8001f68 <_ZN12FrontendHeap11getInstanceEv+0x48>
 8001f40:	480b      	ldr	r0, [pc, #44]	; (8001f70 <_ZN12FrontendHeap11getInstanceEv+0x50>)
 8001f42:	f029 fac6 	bl	802b4d2 <__cxa_guard_acquire>
 8001f46:	4603      	mov	r3, r0
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	bf14      	ite	ne
 8001f4c:	2301      	movne	r3, #1
 8001f4e:	2300      	moveq	r3, #0
 8001f50:	b2db      	uxtb	r3, r3
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d008      	beq.n	8001f68 <_ZN12FrontendHeap11getInstanceEv+0x48>
 8001f56:	4807      	ldr	r0, [pc, #28]	; (8001f74 <_ZN12FrontendHeap11getInstanceEv+0x54>)
 8001f58:	f000 f868 	bl	800202c <_ZN12FrontendHeapC1Ev>
 8001f5c:	4804      	ldr	r0, [pc, #16]	; (8001f70 <_ZN12FrontendHeap11getInstanceEv+0x50>)
 8001f5e:	f029 fac4 	bl	802b4ea <__cxa_guard_release>
 8001f62:	4805      	ldr	r0, [pc, #20]	; (8001f78 <_ZN12FrontendHeap11getInstanceEv+0x58>)
 8001f64:	f029 fca6 	bl	802b8b4 <atexit>
        return instance;
 8001f68:	4b02      	ldr	r3, [pc, #8]	; (8001f74 <_ZN12FrontendHeap11getInstanceEv+0x54>)
    }
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	bd80      	pop	{r7, pc}
 8001f6e:	bf00      	nop
 8001f70:	240023a0 	.word	0x240023a0
 8001f74:	24000134 	.word	0x24000134
 8001f78:	08001f11 	.word	0x08001f11

08001f7c <_ZN16FrontendHeapBaseD1Ev>:
class FrontendHeapBase : public touchgfx::MVPHeap
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b082      	sub	sp, #8
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
 8001f84:	4a05      	ldr	r2, [pc, #20]	; (8001f9c <_ZN16FrontendHeapBaseD1Ev+0x20>)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	601a      	str	r2, [r3, #0]
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	f7ff fce1 	bl	8001954 <_ZN8touchgfx7MVPHeapD1Ev>
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	4618      	mov	r0, r3
 8001f96:	3708      	adds	r7, #8
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bd80      	pop	{r7, pc}
 8001f9c:	0802da8c 	.word	0x0802da8c

08001fa0 <_ZN16FrontendHeapBaseD0Ev>:
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b082      	sub	sp, #8
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
 8001fa8:	6878      	ldr	r0, [r7, #4]
 8001faa:	f7ff ffe7 	bl	8001f7c <_ZN16FrontendHeapBaseD1Ev>
 8001fae:	2114      	movs	r1, #20
 8001fb0:	6878      	ldr	r0, [r7, #4]
 8001fb2:	f029 fa8c 	bl	802b4ce <_ZdlPvj>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	4618      	mov	r0, r3
 8001fba:	3708      	adds	r7, #8
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bd80      	pop	{r7, pc}

08001fc0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 * @tparam NUMBER_OF_ELEMENTS Type of the number of elements.
 *
 * @see AbstractPartition
 */
template <typename ListOfTypes, uint16_t NUMBER_OF_ELEMENTS>
class Partition : public AbstractPartition
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b082      	sub	sp, #8
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f015 fe02 	bl	8017bd4 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8001fd0:	4a03      	ldr	r2, [pc, #12]	; (8001fe0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	601a      	str	r2, [r3, #0]
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	4618      	mov	r0, r3
 8001fda:	3708      	adds	r7, #8
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bd80      	pop	{r7, pc}
 8001fe0:	0802da58 	.word	0x0802da58

08001fe4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b082      	sub	sp, #8
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	4618      	mov	r0, r3
 8001ff0:	f015 fdf0 	bl	8017bd4 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8001ff4:	4a03      	ldr	r2, [pc, #12]	; (8002004 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	601a      	str	r2, [r3, #0]
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	3708      	adds	r7, #8
 8002000:	46bd      	mov	sp, r7
 8002002:	bd80      	pop	{r7, pc}
 8002004:	0802da24 	.word	0x0802da24

08002008 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE3EEENS2_INS1_3NilES6_EEEELt1EEC1Ev>:
 8002008:	b580      	push	{r7, lr}
 800200a:	b082      	sub	sp, #8
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	4618      	mov	r0, r3
 8002014:	f015 fdde 	bl	8017bd4 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8002018:	4a03      	ldr	r2, [pc, #12]	; (8002028 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE3EEENS2_INS1_3NilES6_EEEELt1EEC1Ev+0x20>)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	601a      	str	r2, [r3, #0]
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	4618      	mov	r0, r3
 8002022:	3708      	adds	r7, #8
 8002024:	46bd      	mov	sp, r7
 8002026:	bd80      	pop	{r7, pc}
 8002028:	0802d9f0 	.word	0x0802d9f0

0800202c <_ZN12FrontendHeapC1Ev>:
    touchgfx::Partition< CombinedTransitionTypes, 1 > transitions;
    Model model;
    FrontendApplication app;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 800202c:	b5b0      	push	{r4, r5, r7, lr}
 800202e:	b084      	sub	sp, #16
 8002030:	af02      	add	r7, sp, #8
 8002032:	6078      	str	r0, [r7, #4]
                     app(model, *this)
 8002034:	6878      	ldr	r0, [r7, #4]
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	f103 0414 	add.w	r4, r3, #20
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	f103 052c 	add.w	r5, r3, #44	; 0x2c
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	f242 02b4 	movw	r2, #8372	; 0x20b4
 8002048:	441a      	add	r2, r3
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 800204a:	6879      	ldr	r1, [r7, #4]
 800204c:	f242 1314 	movw	r3, #8468	; 0x2114
 8002050:	440b      	add	r3, r1
                     app(model, *this)
 8002052:	9300      	str	r3, [sp, #0]
 8002054:	4613      	mov	r3, r2
 8002056:	462a      	mov	r2, r5
 8002058:	4621      	mov	r1, r4
 800205a:	f7ff ff3f 	bl	8001edc <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>
 800205e:	4a1a      	ldr	r2, [pc, #104]	; (80020c8 <_ZN12FrontendHeapC1Ev+0x9c>)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	601a      	str	r2, [r3, #0]
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	3314      	adds	r3, #20
 8002068:	4618      	mov	r0, r3
 800206a:	f7ff ffa9 	bl	8001fc0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	332c      	adds	r3, #44	; 0x2c
 8002072:	4618      	mov	r0, r3
 8002074:	f7ff ffb6 	bl	8001fe4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 8002078:	687a      	ldr	r2, [r7, #4]
 800207a:	f242 03b4 	movw	r3, #8372	; 0x20b4
 800207e:	4413      	add	r3, r2
 8002080:	4618      	mov	r0, r3
 8002082:	f7ff ffc1 	bl	8002008 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE3EEENS2_INS1_3NilES6_EEEELt1EEC1Ev>
 8002086:	687a      	ldr	r2, [r7, #4]
 8002088:	f242 1310 	movw	r3, #8464	; 0x2110
 800208c:	4413      	add	r3, r2
 800208e:	4618      	mov	r0, r3
 8002090:	f006 fa12 	bl	80084b8 <_ZN5ModelC1Ev>
 8002094:	687a      	ldr	r2, [r7, #4]
 8002096:	f242 1314 	movw	r3, #8468	; 0x2114
 800209a:	4413      	add	r3, r2
 800209c:	687a      	ldr	r2, [r7, #4]
 800209e:	f242 1110 	movw	r1, #8464	; 0x2110
 80020a2:	4411      	add	r1, r2
 80020a4:	687a      	ldr	r2, [r7, #4]
 80020a6:	4618      	mov	r0, r3
 80020a8:	f006 f9f0 	bl	800848c <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
    {
        gotoStartScreen(app);
 80020ac:	6878      	ldr	r0, [r7, #4]
 80020ae:	687a      	ldr	r2, [r7, #4]
 80020b0:	f242 1314 	movw	r3, #8468	; 0x2114
 80020b4:	4413      	add	r3, r2
 80020b6:	4619      	mov	r1, r3
 80020b8:	f7ff ff03 	bl	8001ec2 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>
    }
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	4618      	mov	r0, r3
 80020c0:	3708      	adds	r7, #8
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bdb0      	pop	{r4, r5, r7, pc}
 80020c6:	bf00      	nop
 80020c8:	0802d9dc 	.word	0x0802d9dc

080020cc <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXGeneratedHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) :
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b086      	sub	sp, #24
 80020d0:	af02      	add	r7, sp, #8
 80020d2:	60f8      	str	r0, [r7, #12]
 80020d4:	60b9      	str	r1, [r7, #8]
 80020d6:	607a      	str	r2, [r7, #4]
 80020d8:	603b      	str	r3, [r7, #0]
        touchgfx::HAL(dma, display, tc, width, height)
 80020da:	68f8      	ldr	r0, [r7, #12]
 80020dc:	8bbb      	ldrh	r3, [r7, #28]
 80020de:	9301      	str	r3, [sp, #4]
 80020e0:	8b3b      	ldrh	r3, [r7, #24]
 80020e2:	9300      	str	r3, [sp, #0]
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	687a      	ldr	r2, [r7, #4]
 80020e8:	68b9      	ldr	r1, [r7, #8]
 80020ea:	f7ff fd49 	bl	8001b80 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>
 80020ee:	4a04      	ldr	r2, [pc, #16]	; (8002100 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	601a      	str	r2, [r3, #0]
    }
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	4618      	mov	r0, r3
 80020f8:	3710      	adds	r7, #16
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bd80      	pop	{r7, pc}
 80020fe:	bf00      	nop
 8002100:	0802dbe8 	.word	0x0802dbe8

08002104 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : TouchGFXGeneratedHAL(dma, display, tc, width, height)
 8002104:	b580      	push	{r7, lr}
 8002106:	b086      	sub	sp, #24
 8002108:	af02      	add	r7, sp, #8
 800210a:	60f8      	str	r0, [r7, #12]
 800210c:	60b9      	str	r1, [r7, #8]
 800210e:	607a      	str	r2, [r7, #4]
 8002110:	603b      	str	r3, [r7, #0]
 8002112:	68f8      	ldr	r0, [r7, #12]
 8002114:	8bbb      	ldrh	r3, [r7, #28]
 8002116:	9301      	str	r3, [sp, #4]
 8002118:	8b3b      	ldrh	r3, [r7, #24]
 800211a:	9300      	str	r3, [sp, #0]
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	687a      	ldr	r2, [r7, #4]
 8002120:	68b9      	ldr	r1, [r7, #8]
 8002122:	f7ff ffd3 	bl	80020cc <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 8002126:	4a04      	ldr	r2, [pc, #16]	; (8002138 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	601a      	str	r2, [r3, #0]
    }
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	4618      	mov	r0, r3
 8002130:	3710      	adds	r7, #16
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}
 8002136:	bf00      	nop
 8002138:	0802d898 	.word	0x0802d898

0800213c <_ZN8touchgfx15TouchControllerC1Ev>:
class TouchController
 800213c:	b480      	push	{r7}
 800213e:	b083      	sub	sp, #12
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
 8002144:	4a04      	ldr	r2, [pc, #16]	; (8002158 <_ZN8touchgfx15TouchControllerC1Ev+0x1c>)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	601a      	str	r2, [r3, #0]
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	4618      	mov	r0, r3
 800214e:	370c      	adds	r7, #12
 8002150:	46bd      	mov	sp, r7
 8002152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002156:	4770      	bx	lr
 8002158:	0802d880 	.word	0x0802d880

0800215c <_ZN20STM32TouchControllerC1Ev>:
{
public:

    STM32TouchController() {}
 800215c:	b580      	push	{r7, lr}
 800215e:	b082      	sub	sp, #8
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	4618      	mov	r0, r3
 8002168:	f7ff ffe8 	bl	800213c <_ZN8touchgfx15TouchControllerC1Ev>
 800216c:	4a03      	ldr	r2, [pc, #12]	; (800217c <_ZN20STM32TouchControllerC1Ev+0x20>)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	601a      	str	r2, [r3, #0]
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	4618      	mov	r0, r3
 8002176:	3708      	adds	r7, #8
 8002178:	46bd      	mov	sp, r7
 800217a:	bd80      	pop	{r7, pc}
 800217c:	0802d868 	.word	0x0802d868

08002180 <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 480, 272);

void touchgfx_init()
{
 8002180:	b590      	push	{r4, r7, lr}
 8002182:	b085      	sub	sp, #20
 8002184:	af02      	add	r7, sp, #8
    Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 8002186:	f001 fef1 	bl	8003f6c <_ZN14BitmapDatabase11getInstanceEv>
 800218a:	4604      	mov	r4, r0
 800218c:	f001 fef8 	bl	8003f80 <_ZN14BitmapDatabase15getInstanceSizeEv>
 8002190:	4603      	mov	r3, r0
 8002192:	4619      	mov	r1, r3
 8002194:	2300      	movs	r3, #0
 8002196:	9300      	str	r3, [sp, #0]
 8002198:	2300      	movs	r3, #0
 800219a:	2200      	movs	r2, #0
 800219c:	4620      	mov	r0, r4
 800219e:	f01f fa97 	bl	80216d0 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
    TypedText::registerTexts(&texts);
 80021a2:	4809      	ldr	r0, [pc, #36]	; (80021c8 <touchgfx_init+0x48>)
 80021a4:	f7ff fb86 	bl	80018b4 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>
    Texts::setLanguage(0);
 80021a8:	2000      	movs	r0, #0
 80021aa:	f006 f8c3 	bl	8008334 <_ZN8touchgfx5Texts11setLanguageEt>

    FontManager::setFontProvider(&fontProvider);
 80021ae:	4807      	ldr	r0, [pc, #28]	; (80021cc <touchgfx_init+0x4c>)
 80021b0:	f01f f9d0 	bl	8021554 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>

    FrontendHeap& heap = FrontendHeap::getInstance();
 80021b4:	f7ff feb4 	bl	8001f20 <_ZN12FrontendHeap11getInstanceEv>
 80021b8:	6078      	str	r0, [r7, #4]
    (void)heap;

    /*
     * Initialize TouchGFX
     */
    hal.initialize();
 80021ba:	4805      	ldr	r0, [pc, #20]	; (80021d0 <touchgfx_init+0x50>)
 80021bc:	f7fe fdb2 	bl	8000d24 <_ZN11TouchGFXHAL10initializeEv>
}
 80021c0:	bf00      	nop
 80021c2:	370c      	adds	r7, #12
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bd90      	pop	{r4, r7, pc}
 80021c8:	24003020 	.word	0x24003020
 80021cc:	24000008 	.word	0x24000008
 80021d0:	24003024 	.word	0x24003024

080021d4 <touchgfx_taskEntry>:

void touchgfx_taskEntry()
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	af00      	add	r7, sp, #0
     * Main event loop. Will wait for VSYNC signal, and then process next frame. Call
     * this function from your GUI task.
     *
     * Note This function never returns
     */
    hal.taskEntry();
 80021d8:	4802      	ldr	r0, [pc, #8]	; (80021e4 <touchgfx_taskEntry+0x10>)
 80021da:	f7fe fdaf 	bl	8000d3c <_ZN11TouchGFXHAL9taskEntryEv>
}
 80021de:	bf00      	nop
 80021e0:	bd80      	pop	{r7, pc}
 80021e2:	bf00      	nop
 80021e4:	24003024 	.word	0x24003024

080021e8 <_ZN12FrontendHeapD1Ev>:
class FrontendHeap : public FrontendHeapBase
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b082      	sub	sp, #8
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
 80021f0:	4a11      	ldr	r2, [pc, #68]	; (8002238 <_ZN12FrontendHeapD1Ev+0x50>)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	601a      	str	r2, [r3, #0]
 80021f6:	687a      	ldr	r2, [r7, #4]
 80021f8:	f242 1314 	movw	r3, #8468	; 0x2114
 80021fc:	4413      	add	r3, r2
 80021fe:	4618      	mov	r0, r3
 8002200:	f7ff fe2a 	bl	8001e58 <_ZN19FrontendApplicationD1Ev>
 8002204:	687a      	ldr	r2, [r7, #4]
 8002206:	f242 03b4 	movw	r3, #8372	; 0x20b4
 800220a:	4413      	add	r3, r2
 800220c:	4618      	mov	r0, r3
 800220e:	f000 f827 	bl	8002260 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE3EEENS2_INS1_3NilES6_EEEELt1EED1Ev>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	332c      	adds	r3, #44	; 0x2c
 8002216:	4618      	mov	r0, r3
 8002218:	f000 f844 	bl	80022a4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	3314      	adds	r3, #20
 8002220:	4618      	mov	r0, r3
 8002222:	f000 f863 	bl	80022ec <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	4618      	mov	r0, r3
 800222a:	f7ff fea7 	bl	8001f7c <_ZN16FrontendHeapBaseD1Ev>
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	4618      	mov	r0, r3
 8002232:	3708      	adds	r7, #8
 8002234:	46bd      	mov	sp, r7
 8002236:	bd80      	pop	{r7, pc}
 8002238:	0802d9dc 	.word	0x0802d9dc

0800223c <_ZN12FrontendHeapD0Ev>:
 800223c:	b580      	push	{r7, lr}
 800223e:	b082      	sub	sp, #8
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
 8002244:	6878      	ldr	r0, [r7, #4]
 8002246:	f7ff ffcf 	bl	80021e8 <_ZN12FrontendHeapD1Ev>
 800224a:	f242 216c 	movw	r1, #8812	; 0x226c
 800224e:	6878      	ldr	r0, [r7, #4]
 8002250:	f029 f93d 	bl	802b4ce <_ZdlPvj>
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	4618      	mov	r0, r3
 8002258:	3708      	adds	r7, #8
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}
	...

08002260 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE3EEENS2_INS1_3NilES6_EEEELt1EED1Ev>:
 8002260:	b580      	push	{r7, lr}
 8002262:	b082      	sub	sp, #8
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
 8002268:	4a05      	ldr	r2, [pc, #20]	; (8002280 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE3EEENS2_INS1_3NilES6_EEEELt1EED1Ev+0x20>)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	601a      	str	r2, [r3, #0]
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	4618      	mov	r0, r3
 8002272:	f015 fcad 	bl	8017bd0 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	4618      	mov	r0, r3
 800227a:	3708      	adds	r7, #8
 800227c:	46bd      	mov	sp, r7
 800227e:	bd80      	pop	{r7, pc}
 8002280:	0802d9f0 	.word	0x0802d9f0

08002284 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE3EEENS2_INS1_3NilES6_EEEELt1EED0Ev>:
 8002284:	b580      	push	{r7, lr}
 8002286:	b082      	sub	sp, #8
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
 800228c:	6878      	ldr	r0, [r7, #4]
 800228e:	f7ff ffe7 	bl	8002260 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE3EEENS2_INS1_3NilES6_EEEELt1EED1Ev>
 8002292:	215c      	movs	r1, #92	; 0x5c
 8002294:	6878      	ldr	r0, [r7, #4]
 8002296:	f029 f91a 	bl	802b4ce <_ZdlPvj>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	4618      	mov	r0, r3
 800229e:	3708      	adds	r7, #8
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bd80      	pop	{r7, pc}

080022a4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b082      	sub	sp, #8
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
 80022ac:	4a05      	ldr	r2, [pc, #20]	; (80022c4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	601a      	str	r2, [r3, #0]
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	4618      	mov	r0, r3
 80022b6:	f015 fc8b 	bl	8017bd0 <_ZN8touchgfx17AbstractPartitionD1Ev>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	4618      	mov	r0, r3
 80022be:	3708      	adds	r7, #8
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bd80      	pop	{r7, pc}
 80022c4:	0802da24 	.word	0x0802da24

080022c8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b082      	sub	sp, #8
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
 80022d0:	6878      	ldr	r0, [r7, #4]
 80022d2:	f7ff ffe7 	bl	80022a4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 80022d6:	f242 0188 	movw	r1, #8328	; 0x2088
 80022da:	6878      	ldr	r0, [r7, #4]
 80022dc:	f029 f8f7 	bl	802b4ce <_ZdlPvj>
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	4618      	mov	r0, r3
 80022e4:	3708      	adds	r7, #8
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}
	...

080022ec <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b082      	sub	sp, #8
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
 80022f4:	4a05      	ldr	r2, [pc, #20]	; (800230c <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	601a      	str	r2, [r3, #0]
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	4618      	mov	r0, r3
 80022fe:	f015 fc67 	bl	8017bd0 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	4618      	mov	r0, r3
 8002306:	3708      	adds	r7, #8
 8002308:	46bd      	mov	sp, r7
 800230a:	bd80      	pop	{r7, pc}
 800230c:	0802da58 	.word	0x0802da58

08002310 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8002310:	b580      	push	{r7, lr}
 8002312:	b082      	sub	sp, #8
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
 8002318:	6878      	ldr	r0, [r7, #4]
 800231a:	f7ff ffe7 	bl	80022ec <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 800231e:	2118      	movs	r1, #24
 8002320:	6878      	ldr	r0, [r7, #4]
 8002322:	f029 f8d4 	bl	802b4ce <_ZdlPvj>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	4618      	mov	r0, r3
 800232a:	3708      	adds	r7, #8
 800232c:	46bd      	mov	sp, r7
 800232e:	bd80      	pop	{r7, pc}

08002330 <_ZN8touchgfx8LCD24bppD1Ev>:
 *
 * @see LCD
 *
 * @note All coordinates are expected to be in absolute coordinates!
 */
class LCD24bpp : public LCD
 8002330:	b580      	push	{r7, lr}
 8002332:	b082      	sub	sp, #8
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
 8002338:	4a05      	ldr	r2, [pc, #20]	; (8002350 <_ZN8touchgfx8LCD24bppD1Ev+0x20>)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	601a      	str	r2, [r3, #0]
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	4618      	mov	r0, r3
 8002342:	f7ff fb89 	bl	8001a58 <_ZN8touchgfx3LCDD1Ev>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	4618      	mov	r0, r3
 800234a:	3708      	adds	r7, #8
 800234c:	46bd      	mov	sp, r7
 800234e:	bd80      	pop	{r7, pc}
 8002350:	08031544 	.word	0x08031544

08002354 <_ZN8touchgfx8LCD24bppD0Ev>:
 8002354:	b580      	push	{r7, lr}
 8002356:	b082      	sub	sp, #8
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
 800235c:	6878      	ldr	r0, [r7, #4]
 800235e:	f7ff ffe7 	bl	8002330 <_ZN8touchgfx8LCD24bppD1Ev>
 8002362:	2158      	movs	r1, #88	; 0x58
 8002364:	6878      	ldr	r0, [r7, #4]
 8002366:	f029 f8b2 	bl	802b4ce <_ZdlPvj>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	4618      	mov	r0, r3
 800236e:	3708      	adds	r7, #8
 8002370:	46bd      	mov	sp, r7
 8002372:	bd80      	pop	{r7, pc}

08002374 <_Z41__static_initialization_and_destruction_0ii>:
 8002374:	b580      	push	{r7, lr}
 8002376:	b084      	sub	sp, #16
 8002378:	af02      	add	r7, sp, #8
 800237a:	6078      	str	r0, [r7, #4]
 800237c:	6039      	str	r1, [r7, #0]
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	2b01      	cmp	r3, #1
 8002382:	d119      	bne.n	80023b8 <_Z41__static_initialization_and_destruction_0ii+0x44>
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800238a:	4293      	cmp	r3, r2
 800238c:	d114      	bne.n	80023b8 <_Z41__static_initialization_and_destruction_0ii+0x44>
static STM32TouchController tc;
 800238e:	4818      	ldr	r0, [pc, #96]	; (80023f0 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8002390:	f7ff fee4 	bl	800215c <_ZN20STM32TouchControllerC1Ev>
static STM32DMA dma;
 8002394:	4817      	ldr	r0, [pc, #92]	; (80023f4 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8002396:	f7fe ff69 	bl	800126c <_ZN8STM32DMAC1Ev>
static LCD24bpp display;
 800239a:	4817      	ldr	r0, [pc, #92]	; (80023f8 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 800239c:	f021 fbe2 	bl	8023b64 <_ZN8touchgfx8LCD24bppC1Ev>
static TouchGFXHAL hal(dma, display, tc, 480, 272);
 80023a0:	f44f 7388 	mov.w	r3, #272	; 0x110
 80023a4:	9301      	str	r3, [sp, #4]
 80023a6:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80023aa:	9300      	str	r3, [sp, #0]
 80023ac:	4b10      	ldr	r3, [pc, #64]	; (80023f0 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 80023ae:	4a12      	ldr	r2, [pc, #72]	; (80023f8 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 80023b0:	4910      	ldr	r1, [pc, #64]	; (80023f4 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 80023b2:	4812      	ldr	r0, [pc, #72]	; (80023fc <_Z41__static_initialization_and_destruction_0ii+0x88>)
 80023b4:	f7ff fea6 	bl	8002104 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d113      	bne.n	80023e6 <_Z41__static_initialization_and_destruction_0ii+0x72>
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80023c4:	4293      	cmp	r3, r2
 80023c6:	d10e      	bne.n	80023e6 <_Z41__static_initialization_and_destruction_0ii+0x72>
 80023c8:	480c      	ldr	r0, [pc, #48]	; (80023fc <_Z41__static_initialization_and_destruction_0ii+0x88>)
 80023ca:	f7fe fd87 	bl	8000edc <_ZN11TouchGFXHALD1Ev>
static ApplicationFontProvider fontProvider;
 80023ce:	480c      	ldr	r0, [pc, #48]	; (8002400 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 80023d0:	f000 f83a 	bl	8002448 <_ZN23ApplicationFontProviderD1Ev>
static LCD24bpp display;
 80023d4:	4808      	ldr	r0, [pc, #32]	; (80023f8 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 80023d6:	f7ff ffab 	bl	8002330 <_ZN8touchgfx8LCD24bppD1Ev>
static STM32DMA dma;
 80023da:	4806      	ldr	r0, [pc, #24]	; (80023f4 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 80023dc:	f7fe ff70 	bl	80012c0 <_ZN8STM32DMAD1Ev>
static STM32TouchController tc;
 80023e0:	4803      	ldr	r0, [pc, #12]	; (80023f0 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 80023e2:	f7fe fa3f 	bl	8000864 <_ZN20STM32TouchControllerD1Ev>
}
 80023e6:	bf00      	nop
 80023e8:	3708      	adds	r7, #8
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}
 80023ee:	bf00      	nop
 80023f0:	240023a4 	.word	0x240023a4
 80023f4:	240023a8 	.word	0x240023a8
 80023f8:	24002fc8 	.word	0x24002fc8
 80023fc:	24003024 	.word	0x24003024
 8002400:	24000008 	.word	0x24000008

08002404 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
 *
 * @note The member function to call must return void. The function can have zero, one, two or
 *       three arguments of any type.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8002404:	b580      	push	{r7, lr}
 8002406:	b082      	sub	sp, #8
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
 800240c:	4a05      	ldr	r2, [pc, #20]	; (8002424 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev+0x20>)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	601a      	str	r2, [r3, #0]
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	4618      	mov	r0, r3
 8002416:	f7ff fb5d 	bl	8001ad4 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	4618      	mov	r0, r3
 800241e:	3708      	adds	r7, #8
 8002420:	46bd      	mov	sp, r7
 8002422:	bd80      	pop	{r7, pc}
 8002424:	0802db28 	.word	0x0802db28

08002428 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
 8002428:	b580      	push	{r7, lr}
 800242a:	b082      	sub	sp, #8
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
 8002430:	6878      	ldr	r0, [r7, #4]
 8002432:	f7ff ffe7 	bl	8002404 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 8002436:	2110      	movs	r1, #16
 8002438:	6878      	ldr	r0, [r7, #4]
 800243a:	f029 f848 	bl	802b4ce <_ZdlPvj>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	4618      	mov	r0, r3
 8002442:	3708      	adds	r7, #8
 8002444:	46bd      	mov	sp, r7
 8002446:	bd80      	pop	{r7, pc}

08002448 <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId LARGE = 1;   // verdana_40_4bpp
    static const touchgfx::FontId SMALL = 2;   // verdana_10_4bpp
    static const uint16_t NUMBER_OF_FONTS = 3;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 8002448:	b580      	push	{r7, lr}
 800244a:	b082      	sub	sp, #8
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
 8002450:	4a05      	ldr	r2, [pc, #20]	; (8002468 <_ZN23ApplicationFontProviderD1Ev+0x20>)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	601a      	str	r2, [r3, #0]
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	4618      	mov	r0, r3
 800245a:	f7ff fa3b 	bl	80018d4 <_ZN8touchgfx12FontProviderD1Ev>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	4618      	mov	r0, r3
 8002462:	3708      	adds	r7, #8
 8002464:	46bd      	mov	sp, r7
 8002466:	bd80      	pop	{r7, pc}
 8002468:	0802dd00 	.word	0x0802dd00

0800246c <_ZN23ApplicationFontProviderD0Ev>:
 800246c:	b580      	push	{r7, lr}
 800246e:	b082      	sub	sp, #8
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
 8002474:	6878      	ldr	r0, [r7, #4]
 8002476:	f7ff ffe7 	bl	8002448 <_ZN23ApplicationFontProviderD1Ev>
 800247a:	2104      	movs	r1, #4
 800247c:	6878      	ldr	r0, [r7, #4]
 800247e:	f029 f826 	bl	802b4ce <_ZdlPvj>
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	4618      	mov	r0, r3
 8002486:	3708      	adds	r7, #8
 8002488:	46bd      	mov	sp, r7
 800248a:	bd80      	pop	{r7, pc}

0800248c <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE3EEENS2_INS1_3NilES6_EEEELt1EE8capacityEv>:
    {
        INTS_PR_ELEMENT = (sizeof(typename meta::select_type_maxsize<SupportedTypesList>::type) + sizeof(int) - 1) / sizeof(int),
        SIZE_OF_ELEMENT = INTS_PR_ELEMENT * sizeof(int)
    };

    virtual uint16_t capacity() const
 800248c:	b480      	push	{r7}
 800248e:	b083      	sub	sp, #12
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
    {
        return NUMBER_OF_ELEMENTS;
 8002494:	2301      	movs	r3, #1
    }
 8002496:	4618      	mov	r0, r3
 8002498:	370c      	adds	r7, #12
 800249a:	46bd      	mov	sp, r7
 800249c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a0:	4770      	bx	lr

080024a2 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE3EEENS2_INS1_3NilES6_EEEELt1EE12element_sizeEv>:

    virtual uint32_t element_size()
 80024a2:	b480      	push	{r7}
 80024a4:	b083      	sub	sp, #12
 80024a6:	af00      	add	r7, sp, #0
 80024a8:	6078      	str	r0, [r7, #4]
    {
        return sizeof(stBlocks[0]);
 80024aa:	2354      	movs	r3, #84	; 0x54
    }
 80024ac:	4618      	mov	r0, r3
 80024ae:	370c      	adds	r7, #12
 80024b0:	46bd      	mov	sp, r7
 80024b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b6:	4770      	bx	lr

080024b8 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE3EEENS2_INS1_3NilES6_EEEELt1EE7elementEt>:

protected:
    virtual void* element(uint16_t index)
 80024b8:	b480      	push	{r7}
 80024ba:	b083      	sub	sp, #12
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
 80024c0:	460b      	mov	r3, r1
 80024c2:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 80024c4:	887b      	ldrh	r3, [r7, #2]
 80024c6:	2254      	movs	r2, #84	; 0x54
 80024c8:	fb02 f303 	mul.w	r3, r2, r3
 80024cc:	3308      	adds	r3, #8
 80024ce:	687a      	ldr	r2, [r7, #4]
 80024d0:	4413      	add	r3, r2
    }
 80024d2:	4618      	mov	r0, r3
 80024d4:	370c      	adds	r7, #12
 80024d6:	46bd      	mov	sp, r7
 80024d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024dc:	4770      	bx	lr

080024de <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE3EEENS2_INS1_3NilES6_EEEELt1EE7elementEt>:

    virtual const void* element(uint16_t index) const
 80024de:	b480      	push	{r7}
 80024e0:	b083      	sub	sp, #12
 80024e2:	af00      	add	r7, sp, #0
 80024e4:	6078      	str	r0, [r7, #4]
 80024e6:	460b      	mov	r3, r1
 80024e8:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 80024ea:	887b      	ldrh	r3, [r7, #2]
 80024ec:	2254      	movs	r2, #84	; 0x54
 80024ee:	fb02 f303 	mul.w	r3, r2, r3
 80024f2:	3308      	adds	r3, #8
 80024f4:	687a      	ldr	r2, [r7, #4]
 80024f6:	4413      	add	r3, r2
    }
 80024f8:	4618      	mov	r0, r3
 80024fa:	370c      	adds	r7, #12
 80024fc:	46bd      	mov	sp, r7
 80024fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002502:	4770      	bx	lr

08002504 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 8002504:	b480      	push	{r7}
 8002506:	b083      	sub	sp, #12
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 800250c:	2301      	movs	r3, #1
    }
 800250e:	4618      	mov	r0, r3
 8002510:	370c      	adds	r7, #12
 8002512:	46bd      	mov	sp, r7
 8002514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002518:	4770      	bx	lr

0800251a <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 800251a:	b480      	push	{r7}
 800251c:	b083      	sub	sp, #12
 800251e:	af00      	add	r7, sp, #0
 8002520:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 8002522:	f44f 5302 	mov.w	r3, #8320	; 0x2080
    }
 8002526:	4618      	mov	r0, r3
 8002528:	370c      	adds	r7, #12
 800252a:	46bd      	mov	sp, r7
 800252c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002530:	4770      	bx	lr

08002532 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 8002532:	b480      	push	{r7}
 8002534:	b083      	sub	sp, #12
 8002536:	af00      	add	r7, sp, #0
 8002538:	6078      	str	r0, [r7, #4]
 800253a:	460b      	mov	r3, r1
 800253c:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 800253e:	887a      	ldrh	r2, [r7, #2]
 8002540:	4613      	mov	r3, r2
 8002542:	019b      	lsls	r3, r3, #6
 8002544:	4413      	add	r3, r2
 8002546:	01db      	lsls	r3, r3, #7
 8002548:	3308      	adds	r3, #8
 800254a:	687a      	ldr	r2, [r7, #4]
 800254c:	4413      	add	r3, r2
    }
 800254e:	4618      	mov	r0, r3
 8002550:	370c      	adds	r7, #12
 8002552:	46bd      	mov	sp, r7
 8002554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002558:	4770      	bx	lr

0800255a <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 800255a:	b480      	push	{r7}
 800255c:	b083      	sub	sp, #12
 800255e:	af00      	add	r7, sp, #0
 8002560:	6078      	str	r0, [r7, #4]
 8002562:	460b      	mov	r3, r1
 8002564:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8002566:	887a      	ldrh	r2, [r7, #2]
 8002568:	4613      	mov	r3, r2
 800256a:	019b      	lsls	r3, r3, #6
 800256c:	4413      	add	r3, r2
 800256e:	01db      	lsls	r3, r3, #7
 8002570:	3308      	adds	r3, #8
 8002572:	687a      	ldr	r2, [r7, #4]
 8002574:	4413      	add	r3, r2
    }
 8002576:	4618      	mov	r0, r3
 8002578:	370c      	adds	r7, #12
 800257a:	46bd      	mov	sp, r7
 800257c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002580:	4770      	bx	lr

08002582 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 8002582:	b480      	push	{r7}
 8002584:	b083      	sub	sp, #12
 8002586:	af00      	add	r7, sp, #0
 8002588:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 800258a:	2301      	movs	r3, #1
    }
 800258c:	4618      	mov	r0, r3
 800258e:	370c      	adds	r7, #12
 8002590:	46bd      	mov	sp, r7
 8002592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002596:	4770      	bx	lr

08002598 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 8002598:	b480      	push	{r7}
 800259a:	b083      	sub	sp, #12
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 80025a0:	2310      	movs	r3, #16
    }
 80025a2:	4618      	mov	r0, r3
 80025a4:	370c      	adds	r7, #12
 80025a6:	46bd      	mov	sp, r7
 80025a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ac:	4770      	bx	lr

080025ae <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 80025ae:	b480      	push	{r7}
 80025b0:	b083      	sub	sp, #12
 80025b2:	af00      	add	r7, sp, #0
 80025b4:	6078      	str	r0, [r7, #4]
 80025b6:	460b      	mov	r3, r1
 80025b8:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 80025ba:	887b      	ldrh	r3, [r7, #2]
 80025bc:	011b      	lsls	r3, r3, #4
 80025be:	3308      	adds	r3, #8
 80025c0:	687a      	ldr	r2, [r7, #4]
 80025c2:	4413      	add	r3, r2
    }
 80025c4:	4618      	mov	r0, r3
 80025c6:	370c      	adds	r7, #12
 80025c8:	46bd      	mov	sp, r7
 80025ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ce:	4770      	bx	lr

080025d0 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 80025d0:	b480      	push	{r7}
 80025d2:	b083      	sub	sp, #12
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
 80025d8:	460b      	mov	r3, r1
 80025da:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 80025dc:	887b      	ldrh	r3, [r7, #2]
 80025de:	011b      	lsls	r3, r3, #4
 80025e0:	3308      	adds	r3, #8
 80025e2:	687a      	ldr	r2, [r7, #4]
 80025e4:	4413      	add	r3, r2
    }
 80025e6:	4618      	mov	r0, r3
 80025e8:	370c      	adds	r7, #12
 80025ea:	46bd      	mov	sp, r7
 80025ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f0:	4770      	bx	lr

080025f2 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:

    /**
     * Calls the member function. Do not call execute unless isValid() returns true (ie. a
     * pointer to the object and the function has been set).
     */
    virtual void execute()
 80025f2:	b580      	push	{r7, lr}
 80025f4:	b082      	sub	sp, #8
 80025f6:	af00      	add	r7, sp, #0
 80025f8:	6078      	str	r0, [r7, #4]
    {
        (pobject->*pmemfun_0)();
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	687a      	ldr	r2, [r7, #4]
 8002600:	68d2      	ldr	r2, [r2, #12]
 8002602:	1052      	asrs	r2, r2, #1
 8002604:	1899      	adds	r1, r3, r2
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	68db      	ldr	r3, [r3, #12]
 800260a:	f003 0301 	and.w	r3, r3, #1
 800260e:	2b00      	cmp	r3, #0
 8002610:	d102      	bne.n	8002618 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x26>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	689b      	ldr	r3, [r3, #8]
 8002616:	e00a      	b.n	800262e <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x3c>
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	687a      	ldr	r2, [r7, #4]
 800261e:	68d2      	ldr	r2, [r2, #12]
 8002620:	1052      	asrs	r2, r2, #1
 8002622:	4413      	add	r3, r2
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	687a      	ldr	r2, [r7, #4]
 8002628:	6892      	ldr	r2, [r2, #8]
 800262a:	4413      	add	r3, r2
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	4608      	mov	r0, r1
 8002630:	4798      	blx	r3
    }
 8002632:	bf00      	nop
 8002634:	3708      	adds	r7, #8
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}

0800263a <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
    /**
     * Function to check whether the Callback has been initialized with values.
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
 800263a:	b480      	push	{r7}
 800263c:	b083      	sub	sp, #12
 800263e:	af00      	add	r7, sp, #0
 8002640:	6078      	str	r0, [r7, #4]
    {
        return (pobject != 0) && (pmemfun_0 != 0);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d010      	beq.n	800266c <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	689b      	ldr	r3, [r3, #8]
 800264e:	2b00      	cmp	r3, #0
 8002650:	d107      	bne.n	8002662 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	68db      	ldr	r3, [r3, #12]
 8002656:	f003 0301 	and.w	r3, r3, #1
 800265a:	2b00      	cmp	r3, #0
 800265c:	d101      	bne.n	8002662 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 800265e:	2301      	movs	r3, #1
 8002660:	e000      	b.n	8002664 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x2a>
 8002662:	2300      	movs	r3, #0
 8002664:	2b01      	cmp	r3, #1
 8002666:	d001      	beq.n	800266c <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 8002668:	2301      	movs	r3, #1
 800266a:	e000      	b.n	800266e <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x34>
 800266c:	2300      	movs	r3, #0
    }
 800266e:	4618      	mov	r0, r3
 8002670:	370c      	adds	r7, #12
 8002672:	46bd      	mov	sp, r7
 8002674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002678:	4770      	bx	lr

0800267a <_GLOBAL__sub_I_touchgfx_init>:
 800267a:	b580      	push	{r7, lr}
 800267c:	af00      	add	r7, sp, #0
 800267e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002682:	2001      	movs	r0, #1
 8002684:	f7ff fe76 	bl	8002374 <_Z41__static_initialization_and_destruction_0ii>
 8002688:	bd80      	pop	{r7, pc}

0800268a <_GLOBAL__sub_D_touchgfx_init>:
 800268a:	b580      	push	{r7, lr}
 800268c:	af00      	add	r7, sp, #0
 800268e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002692:	2000      	movs	r0, #0
 8002694:	f7ff fe6e 	bl	8002374 <_Z41__static_initialization_and_destruction_0ii>
 8002698:	bd80      	pop	{r7, pc}

0800269a <_ZN8touchgfx3HAL17frontPorchEnteredEv>:
    void frontPorchEntered()
 800269a:	b580      	push	{r7, lr}
 800269c:	b082      	sub	sp, #8
 800269e:	af00      	add	r7, sp, #0
 80026a0:	6078      	str	r0, [r7, #4]
        allowDMATransfers();
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	3320      	adds	r3, #32
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	6878      	ldr	r0, [r7, #4]
 80026ac:	4798      	blx	r3
    }
 80026ae:	bf00      	nop
 80026b0:	3708      	adds	r7, #8
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bd80      	pop	{r7, pc}

080026b6 <_ZN8touchgfx3HAL5vSyncEv>:
    void vSync()
 80026b6:	b480      	push	{r7}
 80026b8:	b083      	sub	sp, #12
 80026ba:	af00      	add	r7, sp, #0
 80026bc:	6078      	str	r0, [r7, #4]
        vSyncCnt++;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 80026c4:	3301      	adds	r3, #1
 80026c6:	b2da      	uxtb	r2, r3
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
    }
 80026ce:	bf00      	nop
 80026d0:	370c      	adds	r7, #12
 80026d2:	46bd      	mov	sp, r7
 80026d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d8:	4770      	bx	lr
	...

080026dc <__NVIC_EnableIRQ>:
{
 80026dc:	b480      	push	{r7}
 80026de:	b083      	sub	sp, #12
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	4603      	mov	r3, r0
 80026e4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80026e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	db0b      	blt.n	8002706 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80026ee:	88fb      	ldrh	r3, [r7, #6]
 80026f0:	f003 021f 	and.w	r2, r3, #31
 80026f4:	4907      	ldr	r1, [pc, #28]	; (8002714 <__NVIC_EnableIRQ+0x38>)
 80026f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80026fa:	095b      	lsrs	r3, r3, #5
 80026fc:	2001      	movs	r0, #1
 80026fe:	fa00 f202 	lsl.w	r2, r0, r2
 8002702:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002706:	bf00      	nop
 8002708:	370c      	adds	r7, #12
 800270a:	46bd      	mov	sp, r7
 800270c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002710:	4770      	bx	lr
 8002712:	bf00      	nop
 8002714:	e000e100 	.word	0xe000e100

08002718 <__NVIC_DisableIRQ>:
{
 8002718:	b480      	push	{r7}
 800271a:	b083      	sub	sp, #12
 800271c:	af00      	add	r7, sp, #0
 800271e:	4603      	mov	r3, r0
 8002720:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002722:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002726:	2b00      	cmp	r3, #0
 8002728:	db12      	blt.n	8002750 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800272a:	88fb      	ldrh	r3, [r7, #6]
 800272c:	f003 021f 	and.w	r2, r3, #31
 8002730:	490a      	ldr	r1, [pc, #40]	; (800275c <__NVIC_DisableIRQ+0x44>)
 8002732:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002736:	095b      	lsrs	r3, r3, #5
 8002738:	2001      	movs	r0, #1
 800273a:	fa00 f202 	lsl.w	r2, r0, r2
 800273e:	3320      	adds	r3, #32
 8002740:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8002744:	f3bf 8f4f 	dsb	sy
}
 8002748:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800274a:	f3bf 8f6f 	isb	sy
}
 800274e:	bf00      	nop
}
 8002750:	bf00      	nop
 8002752:	370c      	adds	r7, #12
 8002754:	46bd      	mov	sp, r7
 8002756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275a:	4770      	bx	lr
 800275c:	e000e100 	.word	0xe000e100

08002760 <__NVIC_SetPriority>:
{
 8002760:	b480      	push	{r7}
 8002762:	b083      	sub	sp, #12
 8002764:	af00      	add	r7, sp, #0
 8002766:	4603      	mov	r3, r0
 8002768:	6039      	str	r1, [r7, #0]
 800276a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800276c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002770:	2b00      	cmp	r3, #0
 8002772:	db0a      	blt.n	800278a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	b2da      	uxtb	r2, r3
 8002778:	490c      	ldr	r1, [pc, #48]	; (80027ac <__NVIC_SetPriority+0x4c>)
 800277a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800277e:	0112      	lsls	r2, r2, #4
 8002780:	b2d2      	uxtb	r2, r2
 8002782:	440b      	add	r3, r1
 8002784:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002788:	e00a      	b.n	80027a0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	b2da      	uxtb	r2, r3
 800278e:	4908      	ldr	r1, [pc, #32]	; (80027b0 <__NVIC_SetPriority+0x50>)
 8002790:	88fb      	ldrh	r3, [r7, #6]
 8002792:	f003 030f 	and.w	r3, r3, #15
 8002796:	3b04      	subs	r3, #4
 8002798:	0112      	lsls	r2, r2, #4
 800279a:	b2d2      	uxtb	r2, r2
 800279c:	440b      	add	r3, r1
 800279e:	761a      	strb	r2, [r3, #24]
}
 80027a0:	bf00      	nop
 80027a2:	370c      	adds	r7, #12
 80027a4:	46bd      	mov	sp, r7
 80027a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027aa:	4770      	bx	lr
 80027ac:	e000e100 	.word	0xe000e100
 80027b0:	e000ed00 	.word	0xe000ed00

080027b4 <_ZN20TouchGFXGeneratedHAL10initializeEv>:
    static uint16_t lcd_int_active_line;
    static uint16_t lcd_int_porch_line;
}

void TouchGFXGeneratedHAL::initialize()
{
 80027b4:	b5b0      	push	{r4, r5, r7, lr}
 80027b6:	b082      	sub	sp, #8
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
    HAL::initialize();
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	4618      	mov	r0, r3
 80027c0:	f015 fecf 	bl	8018562 <_ZN8touchgfx3HAL10initializeEv>
    registerEventListener(*(Application::getInstance()));
 80027c4:	687d      	ldr	r5, [r7, #4]
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	3360      	adds	r3, #96	; 0x60
 80027cc:	681c      	ldr	r4, [r3, #0]
 80027ce:	f01c f879 	bl	801e8c4 <_ZN8touchgfx11Application11getInstanceEv>
 80027d2:	4603      	mov	r3, r0
 80027d4:	4619      	mov	r1, r3
 80027d6:	4628      	mov	r0, r5
 80027d8:	47a0      	blx	r4
    setFrameBufferStartAddresses((void*)frameBuf, (void*)(frameBuf + sizeof(frameBuf) / (sizeof(uint32_t) * 2)), (void*)0);
 80027da:	6878      	ldr	r0, [r7, #4]
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	3384      	adds	r3, #132	; 0x84
 80027e2:	681c      	ldr	r4, [r3, #0]
 80027e4:	4a03      	ldr	r2, [pc, #12]	; (80027f4 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x40>)
 80027e6:	2300      	movs	r3, #0
 80027e8:	4903      	ldr	r1, [pc, #12]	; (80027f8 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x44>)
 80027ea:	47a0      	blx	r4
}
 80027ec:	bf00      	nop
 80027ee:	3708      	adds	r7, #8
 80027f0:	46bd      	mov	sp, r7
 80027f2:	bdb0      	pop	{r4, r5, r7, pc}
 80027f4:	2409fa00 	.word	0x2409fa00
 80027f8:	24040000 	.word	0x24040000

080027fc <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:

void TouchGFXGeneratedHAL::configureInterrupts()
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b082      	sub	sp, #8
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
    NVIC_SetPriority(DMA2D_IRQn, 9);
 8002804:	2109      	movs	r1, #9
 8002806:	205a      	movs	r0, #90	; 0x5a
 8002808:	f7ff ffaa 	bl	8002760 <__NVIC_SetPriority>
    NVIC_SetPriority(LTDC_IRQn, 9);
 800280c:	2109      	movs	r1, #9
 800280e:	2058      	movs	r0, #88	; 0x58
 8002810:	f7ff ffa6 	bl	8002760 <__NVIC_SetPriority>
}
 8002814:	bf00      	nop
 8002816:	3708      	adds	r7, #8
 8002818:	46bd      	mov	sp, r7
 800281a:	bd80      	pop	{r7, pc}

0800281c <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:

void TouchGFXGeneratedHAL::enableInterrupts()
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b082      	sub	sp, #8
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
    NVIC_EnableIRQ(DMA2D_IRQn);
 8002824:	205a      	movs	r0, #90	; 0x5a
 8002826:	f7ff ff59 	bl	80026dc <__NVIC_EnableIRQ>
    NVIC_EnableIRQ(LTDC_IRQn);
 800282a:	2058      	movs	r0, #88	; 0x58
 800282c:	f7ff ff56 	bl	80026dc <__NVIC_EnableIRQ>
}
 8002830:	bf00      	nop
 8002832:	3708      	adds	r7, #8
 8002834:	46bd      	mov	sp, r7
 8002836:	bd80      	pop	{r7, pc}

08002838 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:

void TouchGFXGeneratedHAL::disableInterrupts()
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b082      	sub	sp, #8
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
    NVIC_DisableIRQ(DMA2D_IRQn);
 8002840:	205a      	movs	r0, #90	; 0x5a
 8002842:	f7ff ff69 	bl	8002718 <__NVIC_DisableIRQ>
    NVIC_DisableIRQ(LTDC_IRQn);
 8002846:	2058      	movs	r0, #88	; 0x58
 8002848:	f7ff ff66 	bl	8002718 <__NVIC_DisableIRQ>
}
 800284c:	bf00      	nop
 800284e:	3708      	adds	r7, #8
 8002850:	46bd      	mov	sp, r7
 8002852:	bd80      	pop	{r7, pc}

08002854 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>:

void TouchGFXGeneratedHAL::enableLCDControllerInterrupt()
{
 8002854:	b480      	push	{r7}
 8002856:	b083      	sub	sp, #12
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 800285c:	4b11      	ldr	r3, [pc, #68]	; (80028a4 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 800285e:	68db      	ldr	r3, [r3, #12]
 8002860:	b29b      	uxth	r3, r3
 8002862:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002866:	b29b      	uxth	r3, r3
 8002868:	3b01      	subs	r3, #1
 800286a:	b29a      	uxth	r2, r3
 800286c:	4b0e      	ldr	r3, [pc, #56]	; (80028a8 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 800286e:	801a      	strh	r2, [r3, #0]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 8002870:	4b0c      	ldr	r3, [pc, #48]	; (80028a4 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8002872:	691b      	ldr	r3, [r3, #16]
 8002874:	b29b      	uxth	r3, r3
 8002876:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800287a:	b29b      	uxth	r3, r3
 800287c:	3b01      	subs	r3, #1
 800287e:	b29a      	uxth	r2, r3
 8002880:	4b0a      	ldr	r3, [pc, #40]	; (80028ac <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x58>)
 8002882:	801a      	strh	r2, [r3, #0]

    /* Sets the Line Interrupt position */
    LTDC->LIPCR = lcd_int_active_line;
 8002884:	4b08      	ldr	r3, [pc, #32]	; (80028a8 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 8002886:	881a      	ldrh	r2, [r3, #0]
 8002888:	4b06      	ldr	r3, [pc, #24]	; (80028a4 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 800288a:	641a      	str	r2, [r3, #64]	; 0x40
    /* Line Interrupt Enable            */
    LTDC->IER |= LTDC_IER_LIE;
 800288c:	4b05      	ldr	r3, [pc, #20]	; (80028a4 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 800288e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002890:	4a04      	ldr	r2, [pc, #16]	; (80028a4 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8002892:	f043 0301 	orr.w	r3, r3, #1
 8002896:	6353      	str	r3, [r2, #52]	; 0x34
}
 8002898:	bf00      	nop
 800289a:	370c      	adds	r7, #12
 800289c:	46bd      	mov	sp, r7
 800289e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a2:	4770      	bx	lr
 80028a4:	50001000 	.word	0x50001000
 80028a8:	240030a0 	.word	0x240030a0
 80028ac:	240030a2 	.word	0x240030a2

080028b0 <_ZN20TouchGFXGeneratedHAL10beginFrameEv>:

bool TouchGFXGeneratedHAL::beginFrame()
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b082      	sub	sp, #8
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
    return HAL::beginFrame();
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	4618      	mov	r0, r3
 80028bc:	f015 fe38 	bl	8018530 <_ZN8touchgfx3HAL10beginFrameEv>
 80028c0:	4603      	mov	r3, r0
}
 80028c2:	4618      	mov	r0, r3
 80028c4:	3708      	adds	r7, #8
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bd80      	pop	{r7, pc}

080028ca <_ZN20TouchGFXGeneratedHAL8endFrameEv>:

void TouchGFXGeneratedHAL::endFrame()
{
 80028ca:	b580      	push	{r7, lr}
 80028cc:	b082      	sub	sp, #8
 80028ce:	af00      	add	r7, sp, #0
 80028d0:	6078      	str	r0, [r7, #4]
    HAL::endFrame();
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	4618      	mov	r0, r3
 80028d6:	f015 fe37 	bl	8018548 <_ZN8touchgfx3HAL8endFrameEv>

}
 80028da:	bf00      	nop
 80028dc:	3708      	adds	r7, #8
 80028de:	46bd      	mov	sp, r7
 80028e0:	bd80      	pop	{r7, pc}
	...

080028e4 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>:

uint16_t* TouchGFXGeneratedHAL::getTFTFrameBuffer() const
{
 80028e4:	b480      	push	{r7}
 80028e6:	b083      	sub	sp, #12
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
    return (uint16_t*)LTDC_Layer1->CFBAR;
 80028ec:	4b03      	ldr	r3, [pc, #12]	; (80028fc <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv+0x18>)
 80028ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 80028f0:	4618      	mov	r0, r3
 80028f2:	370c      	adds	r7, #12
 80028f4:	46bd      	mov	sp, r7
 80028f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fa:	4770      	bx	lr
 80028fc:	50001084 	.word	0x50001084

08002900 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
 8002900:	b480      	push	{r7}
 8002902:	b083      	sub	sp, #12
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
 8002908:	6039      	str	r1, [r7, #0]
    LTDC_Layer1->CFBAR = (uint32_t)adr;
 800290a:	4a06      	ldr	r2, [pc, #24]	; (8002924 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x24>)
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	6293      	str	r3, [r2, #40]	; 0x28

    /* Reload immediate */
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 8002910:	4b05      	ldr	r3, [pc, #20]	; (8002928 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x28>)
 8002912:	2201      	movs	r2, #1
 8002914:	625a      	str	r2, [r3, #36]	; 0x24
}
 8002916:	bf00      	nop
 8002918:	370c      	adds	r7, #12
 800291a:	46bd      	mov	sp, r7
 800291c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002920:	4770      	bx	lr
 8002922:	bf00      	nop
 8002924:	50001084 	.word	0x50001084
 8002928:	50001000 	.word	0x50001000

0800292c <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:

void TouchGFXGeneratedHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b086      	sub	sp, #24
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
 8002934:	6039      	str	r1, [r7, #0]
    HAL::flushFrameBuffer(rect);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6839      	ldr	r1, [r7, #0]
 800293a:	4618      	mov	r0, r3
 800293c:	f015 fdc2 	bl	80184c4 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then
    // the DCache must be flushed prior to DMA2D accessing it. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable "CPU Cache" in the
    // "System Core" settings for "Cortex M7" in CubeMX in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 8002940:	4b25      	ldr	r3, [pc, #148]	; (80029d8 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0xac>)
 8002942:	695b      	ldr	r3, [r3, #20]
 8002944:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002948:	2b00      	cmp	r3, #0
 800294a:	bf14      	ite	ne
 800294c:	2301      	movne	r3, #1
 800294e:	2300      	moveq	r3, #0
 8002950:	b2db      	uxtb	r3, r3
 8002952:	2b00      	cmp	r3, #0
 8002954:	d03c      	beq.n	80029d0 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0xa4>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8002956:	4b20      	ldr	r3, [pc, #128]	; (80029d8 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0xac>)
 8002958:	2200      	movs	r2, #0
 800295a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800295e:	f3bf 8f4f 	dsb	sy
}
 8002962:	bf00      	nop
    ccsidr = SCB->CCSIDR;
 8002964:	4b1c      	ldr	r3, [pc, #112]	; (80029d8 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0xac>)
 8002966:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800296a:	617b      	str	r3, [r7, #20]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800296c:	697b      	ldr	r3, [r7, #20]
 800296e:	0b5b      	lsrs	r3, r3, #13
 8002970:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8002974:	613b      	str	r3, [r7, #16]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8002976:	697b      	ldr	r3, [r7, #20]
 8002978:	08db      	lsrs	r3, r3, #3
 800297a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800297e:	60fb      	str	r3, [r7, #12]
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8002980:	693b      	ldr	r3, [r7, #16]
 8002982:	015a      	lsls	r2, r3, #5
 8002984:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8002988:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 800298a:	68fa      	ldr	r2, [r7, #12]
 800298c:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 800298e:	4912      	ldr	r1, [pc, #72]	; (80029d8 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0xac>)
 8002990:	4313      	orrs	r3, r2
 8002992:	f8c1 3274 	str.w	r3, [r1, #628]	; 0x274
      } while (ways-- != 0U);
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	1e5a      	subs	r2, r3, #1
 800299a:	60fa      	str	r2, [r7, #12]
 800299c:	2b00      	cmp	r3, #0
 800299e:	bf14      	ite	ne
 80029a0:	2301      	movne	r3, #1
 80029a2:	2300      	moveq	r3, #0
 80029a4:	b2db      	uxtb	r3, r3
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d000      	beq.n	80029ac <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x80>
      do {
 80029aa:	e7e9      	b.n	8002980 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x54>
    } while(sets-- != 0U);
 80029ac:	693b      	ldr	r3, [r7, #16]
 80029ae:	1e5a      	subs	r2, r3, #1
 80029b0:	613a      	str	r2, [r7, #16]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	bf14      	ite	ne
 80029b6:	2301      	movne	r3, #1
 80029b8:	2300      	moveq	r3, #0
 80029ba:	b2db      	uxtb	r3, r3
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d000      	beq.n	80029c2 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x96>
    do {
 80029c0:	e7d9      	b.n	8002976 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x4a>
  __ASM volatile ("dsb 0xF":::"memory");
 80029c2:	f3bf 8f4f 	dsb	sy
}
 80029c6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80029c8:	f3bf 8f6f 	isb	sy
}
 80029cc:	bf00      	nop
}
 80029ce:	bf00      	nop
    {
        SCB_CleanInvalidateDCache();
    }
}
 80029d0:	bf00      	nop
 80029d2:	3718      	adds	r7, #24
 80029d4:	46bd      	mov	sp, r7
 80029d6:	bd80      	pop	{r7, pc}
 80029d8:	e000ed00 	.word	0xe000ed00

080029dc <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>:

bool TouchGFXGeneratedHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b084      	sub	sp, #16
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	60f8      	str	r0, [r7, #12]
 80029e4:	60b9      	str	r1, [r7, #8]
 80029e6:	607a      	str	r2, [r7, #4]
 80029e8:	603b      	str	r3, [r7, #0]
    return HAL::blockCopy(dest, src, numBytes);
 80029ea:	68f8      	ldr	r0, [r7, #12]
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	687a      	ldr	r2, [r7, #4]
 80029f0:	68b9      	ldr	r1, [r7, #8]
 80029f2:	f015 fed2 	bl	801879a <_ZN8touchgfx3HAL9blockCopyEPvPKvm>
 80029f6:	4603      	mov	r3, r0
}
 80029f8:	4618      	mov	r0, r3
 80029fa:	3710      	adds	r7, #16
 80029fc:	46bd      	mov	sp, r7
 80029fe:	bd80      	pop	{r7, pc}

08002a00 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv>:

void TouchGFXGeneratedHAL::InvalidateCache()
{
 8002a00:	b480      	push	{r7}
 8002a02:	b087      	sub	sp, #28
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then
    // the DCache must be flushed prior to DMA2D accessing it. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable "CPU Cache" in the
    // "System Core" settings for "Cortex M7" in CubeMX in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 8002a08:	4b26      	ldr	r3, [pc, #152]	; (8002aa4 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0xa4>)
 8002a0a:	695b      	ldr	r3, [r3, #20]
 8002a0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	bf14      	ite	ne
 8002a14:	2301      	movne	r3, #1
 8002a16:	2300      	moveq	r3, #0
 8002a18:	b2db      	uxtb	r3, r3
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d03c      	beq.n	8002a98 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x98>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8002a1e:	4b21      	ldr	r3, [pc, #132]	; (8002aa4 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0xa4>)
 8002a20:	2200      	movs	r2, #0
 8002a22:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8002a26:	f3bf 8f4f 	dsb	sy
}
 8002a2a:	bf00      	nop
    ccsidr = SCB->CCSIDR;
 8002a2c:	4b1d      	ldr	r3, [pc, #116]	; (8002aa4 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0xa4>)
 8002a2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002a32:	617b      	str	r3, [r7, #20]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8002a34:	697b      	ldr	r3, [r7, #20]
 8002a36:	0b5b      	lsrs	r3, r3, #13
 8002a38:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8002a3c:	613b      	str	r3, [r7, #16]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8002a3e:	697b      	ldr	r3, [r7, #20]
 8002a40:	08db      	lsrs	r3, r3, #3
 8002a42:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002a46:	60fb      	str	r3, [r7, #12]
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8002a48:	693b      	ldr	r3, [r7, #16]
 8002a4a:	015a      	lsls	r2, r3, #5
 8002a4c:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8002a50:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 8002a52:	68fa      	ldr	r2, [r7, #12]
 8002a54:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8002a56:	4913      	ldr	r1, [pc, #76]	; (8002aa4 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0xa4>)
 8002a58:	4313      	orrs	r3, r2
 8002a5a:	f8c1 3274 	str.w	r3, [r1, #628]	; 0x274
      } while (ways-- != 0U);
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	1e5a      	subs	r2, r3, #1
 8002a62:	60fa      	str	r2, [r7, #12]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	bf14      	ite	ne
 8002a68:	2301      	movne	r3, #1
 8002a6a:	2300      	moveq	r3, #0
 8002a6c:	b2db      	uxtb	r3, r3
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d000      	beq.n	8002a74 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x74>
      do {
 8002a72:	e7e9      	b.n	8002a48 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x48>
    } while(sets-- != 0U);
 8002a74:	693b      	ldr	r3, [r7, #16]
 8002a76:	1e5a      	subs	r2, r3, #1
 8002a78:	613a      	str	r2, [r7, #16]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	bf14      	ite	ne
 8002a7e:	2301      	movne	r3, #1
 8002a80:	2300      	moveq	r3, #0
 8002a82:	b2db      	uxtb	r3, r3
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d000      	beq.n	8002a8a <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x8a>
    do {
 8002a88:	e7d9      	b.n	8002a3e <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x3e>
  __ASM volatile ("dsb 0xF":::"memory");
 8002a8a:	f3bf 8f4f 	dsb	sy
}
 8002a8e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002a90:	f3bf 8f6f 	isb	sy
}
 8002a94:	bf00      	nop
}
 8002a96:	bf00      	nop
    {
        SCB_CleanInvalidateDCache();
    }
}
 8002a98:	bf00      	nop
 8002a9a:	371c      	adds	r7, #28
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa2:	4770      	bx	lr
 8002aa4:	e000ed00 	.word	0xe000ed00

08002aa8 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv>:

void TouchGFXGeneratedHAL::FlushCache()
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	b087      	sub	sp, #28
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then
    // the DCache must be flushed prior to DMA2D accessing it. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable "CPU Cache" in the
    // "System Core" settings for "Cortex M7" in CubeMX in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 8002ab0:	4b26      	ldr	r3, [pc, #152]	; (8002b4c <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0xa4>)
 8002ab2:	695b      	ldr	r3, [r3, #20]
 8002ab4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	bf14      	ite	ne
 8002abc:	2301      	movne	r3, #1
 8002abe:	2300      	moveq	r3, #0
 8002ac0:	b2db      	uxtb	r3, r3
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d03c      	beq.n	8002b40 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x98>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8002ac6:	4b21      	ldr	r3, [pc, #132]	; (8002b4c <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0xa4>)
 8002ac8:	2200      	movs	r2, #0
 8002aca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8002ace:	f3bf 8f4f 	dsb	sy
}
 8002ad2:	bf00      	nop
    ccsidr = SCB->CCSIDR;
 8002ad4:	4b1d      	ldr	r3, [pc, #116]	; (8002b4c <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0xa4>)
 8002ad6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002ada:	617b      	str	r3, [r7, #20]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8002adc:	697b      	ldr	r3, [r7, #20]
 8002ade:	0b5b      	lsrs	r3, r3, #13
 8002ae0:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8002ae4:	613b      	str	r3, [r7, #16]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8002ae6:	697b      	ldr	r3, [r7, #20]
 8002ae8:	08db      	lsrs	r3, r3, #3
 8002aea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002aee:	60fb      	str	r3, [r7, #12]
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8002af0:	693b      	ldr	r3, [r7, #16]
 8002af2:	015a      	lsls	r2, r3, #5
 8002af4:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8002af8:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 8002afa:	68fa      	ldr	r2, [r7, #12]
 8002afc:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8002afe:	4913      	ldr	r1, [pc, #76]	; (8002b4c <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0xa4>)
 8002b00:	4313      	orrs	r3, r2
 8002b02:	f8c1 3274 	str.w	r3, [r1, #628]	; 0x274
      } while (ways-- != 0U);
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	1e5a      	subs	r2, r3, #1
 8002b0a:	60fa      	str	r2, [r7, #12]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	bf14      	ite	ne
 8002b10:	2301      	movne	r3, #1
 8002b12:	2300      	moveq	r3, #0
 8002b14:	b2db      	uxtb	r3, r3
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d000      	beq.n	8002b1c <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x74>
      do {
 8002b1a:	e7e9      	b.n	8002af0 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x48>
    } while(sets-- != 0U);
 8002b1c:	693b      	ldr	r3, [r7, #16]
 8002b1e:	1e5a      	subs	r2, r3, #1
 8002b20:	613a      	str	r2, [r7, #16]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	bf14      	ite	ne
 8002b26:	2301      	movne	r3, #1
 8002b28:	2300      	moveq	r3, #0
 8002b2a:	b2db      	uxtb	r3, r3
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d000      	beq.n	8002b32 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x8a>
    do {
 8002b30:	e7d9      	b.n	8002ae6 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x3e>
  __ASM volatile ("dsb 0xF":::"memory");
 8002b32:	f3bf 8f4f 	dsb	sy
}
 8002b36:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002b38:	f3bf 8f6f 	isb	sy
}
 8002b3c:	bf00      	nop
}
 8002b3e:	bf00      	nop
    {
        SCB_CleanInvalidateDCache();
    }
}
 8002b40:	bf00      	nop
 8002b42:	371c      	adds	r7, #28
 8002b44:	46bd      	mov	sp, r7
 8002b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4a:	4770      	bx	lr
 8002b4c:	e000ed00 	.word	0xe000ed00

08002b50 <HAL_LTDC_LineEventCallback>:

extern "C"
{
    void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef* hltdc)
    {
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b082      	sub	sp, #8
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
        if (LTDC->LIPCR == lcd_int_active_line)
 8002b58:	4b1a      	ldr	r3, [pc, #104]	; (8002bc4 <HAL_LTDC_LineEventCallback+0x74>)
 8002b5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b5c:	4a1a      	ldr	r2, [pc, #104]	; (8002bc8 <HAL_LTDC_LineEventCallback+0x78>)
 8002b5e:	8812      	ldrh	r2, [r2, #0]
 8002b60:	4293      	cmp	r3, r2
 8002b62:	bf0c      	ite	eq
 8002b64:	2301      	moveq	r3, #1
 8002b66:	2300      	movne	r3, #0
 8002b68:	b2db      	uxtb	r3, r3
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d017      	beq.n	8002b9e <HAL_LTDC_LineEventCallback+0x4e>
        {
            //entering active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_porch_line);
 8002b6e:	4b17      	ldr	r3, [pc, #92]	; (8002bcc <HAL_LTDC_LineEventCallback+0x7c>)
 8002b70:	881b      	ldrh	r3, [r3, #0]
 8002b72:	4619      	mov	r1, r3
 8002b74:	6878      	ldr	r0, [r7, #4]
 8002b76:	f00b fff7 	bl	800eb68 <HAL_LTDC_ProgramLineEvent>
            HAL::getInstance()->vSync();
 8002b7a:	f7fe fb3d 	bl	80011f8 <_ZN8touchgfx3HAL11getInstanceEv>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	4618      	mov	r0, r3
 8002b82:	f7ff fd98 	bl	80026b6 <_ZN8touchgfx3HAL5vSyncEv>
            OSWrappers::signalVSync();
 8002b86:	f7fe fa31 	bl	8000fec <_ZN8touchgfx10OSWrappers11signalVSyncEv>
            // Swap frame buffers immediately instead of waiting for the task to be scheduled in.
            // Note: task will also swap when it wakes up, but that operation is guarded and will not have
            // any effect if already swapped.
            HAL::getInstance()->swapFrameBuffers();
 8002b8a:	f7fe fb35 	bl	80011f8 <_ZN8touchgfx3HAL11getInstanceEv>
 8002b8e:	4603      	mov	r3, r0
 8002b90:	4618      	mov	r0, r3
 8002b92:	f016 fadb 	bl	801914c <_ZN8touchgfx3HAL16swapFrameBuffersEv>
            GPIO::set(GPIO::VSYNC_FREQ);
 8002b96:	2000      	movs	r0, #0
 8002b98:	f7fd fe86 	bl	80008a8 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
            //exiting active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
            GPIO::clear(GPIO::VSYNC_FREQ);
            HAL::getInstance()->frontPorchEntered();
        }
    }
 8002b9c:	e00e      	b.n	8002bbc <HAL_LTDC_LineEventCallback+0x6c>
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
 8002b9e:	4b0a      	ldr	r3, [pc, #40]	; (8002bc8 <HAL_LTDC_LineEventCallback+0x78>)
 8002ba0:	881b      	ldrh	r3, [r3, #0]
 8002ba2:	4619      	mov	r1, r3
 8002ba4:	6878      	ldr	r0, [r7, #4]
 8002ba6:	f00b ffdf 	bl	800eb68 <HAL_LTDC_ProgramLineEvent>
            GPIO::clear(GPIO::VSYNC_FREQ);
 8002baa:	2000      	movs	r0, #0
 8002bac:	f7fd febc 	bl	8000928 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
            HAL::getInstance()->frontPorchEntered();
 8002bb0:	f7fe fb22 	bl	80011f8 <_ZN8touchgfx3HAL11getInstanceEv>
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	f7ff fd6f 	bl	800269a <_ZN8touchgfx3HAL17frontPorchEnteredEv>
    }
 8002bbc:	bf00      	nop
 8002bbe:	3708      	adds	r7, #8
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	bd80      	pop	{r7, pc}
 8002bc4:	50001000 	.word	0x50001000
 8002bc8:	240030a0 	.word	0x240030a0
 8002bcc:	240030a2 	.word	0x240030a2

08002bd0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b084      	sub	sp, #16
 8002bd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8002bd6:	f000 fcf9 	bl	80035cc <MPU_Config>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8002bda:	4b48      	ldr	r3, [pc, #288]	; (8002cfc <main+0x12c>)
 8002bdc:	695b      	ldr	r3, [r3, #20]
 8002bde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d11b      	bne.n	8002c1e <main+0x4e>
  __ASM volatile ("dsb 0xF":::"memory");
 8002be6:	f3bf 8f4f 	dsb	sy
}
 8002bea:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002bec:	f3bf 8f6f 	isb	sy
}
 8002bf0:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8002bf2:	4b42      	ldr	r3, [pc, #264]	; (8002cfc <main+0x12c>)
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8002bfa:	f3bf 8f4f 	dsb	sy
}
 8002bfe:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002c00:	f3bf 8f6f 	isb	sy
}
 8002c04:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8002c06:	4b3d      	ldr	r3, [pc, #244]	; (8002cfc <main+0x12c>)
 8002c08:	695b      	ldr	r3, [r3, #20]
 8002c0a:	4a3c      	ldr	r2, [pc, #240]	; (8002cfc <main+0x12c>)
 8002c0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c10:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8002c12:	f3bf 8f4f 	dsb	sy
}
 8002c16:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002c18:	f3bf 8f6f 	isb	sy
}
 8002c1c:	e000      	b.n	8002c20 <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8002c1e:	bf00      	nop
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8002c20:	4b36      	ldr	r3, [pc, #216]	; (8002cfc <main+0x12c>)
 8002c22:	695b      	ldr	r3, [r3, #20]
 8002c24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d138      	bne.n	8002c9e <main+0xce>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8002c2c:	4b33      	ldr	r3, [pc, #204]	; (8002cfc <main+0x12c>)
 8002c2e:	2200      	movs	r2, #0
 8002c30:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8002c34:	f3bf 8f4f 	dsb	sy
}
 8002c38:	bf00      	nop
    ccsidr = SCB->CCSIDR;
 8002c3a:	4b30      	ldr	r3, [pc, #192]	; (8002cfc <main+0x12c>)
 8002c3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002c40:	60fb      	str	r3, [r7, #12]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	0b5b      	lsrs	r3, r3, #13
 8002c46:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8002c4a:	60bb      	str	r3, [r7, #8]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	08db      	lsrs	r3, r3, #3
 8002c50:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c54:	607b      	str	r3, [r7, #4]
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8002c56:	68bb      	ldr	r3, [r7, #8]
 8002c58:	015a      	lsls	r2, r3, #5
 8002c5a:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8002c5e:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8002c60:	687a      	ldr	r2, [r7, #4]
 8002c62:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8002c64:	4925      	ldr	r1, [pc, #148]	; (8002cfc <main+0x12c>)
 8002c66:	4313      	orrs	r3, r2
 8002c68:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
      } while (ways-- != 0U);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	1e5a      	subs	r2, r3, #1
 8002c70:	607a      	str	r2, [r7, #4]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d1ef      	bne.n	8002c56 <main+0x86>
    } while(sets-- != 0U);
 8002c76:	68bb      	ldr	r3, [r7, #8]
 8002c78:	1e5a      	subs	r2, r3, #1
 8002c7a:	60ba      	str	r2, [r7, #8]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d1e5      	bne.n	8002c4c <main+0x7c>
  __ASM volatile ("dsb 0xF":::"memory");
 8002c80:	f3bf 8f4f 	dsb	sy
}
 8002c84:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8002c86:	4b1d      	ldr	r3, [pc, #116]	; (8002cfc <main+0x12c>)
 8002c88:	695b      	ldr	r3, [r3, #20]
 8002c8a:	4a1c      	ldr	r2, [pc, #112]	; (8002cfc <main+0x12c>)
 8002c8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c90:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8002c92:	f3bf 8f4f 	dsb	sy
}
 8002c96:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002c98:	f3bf 8f6f 	isb	sy
}
 8002c9c:	e000      	b.n	8002ca0 <main+0xd0>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8002c9e:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002ca0:	f008 fbd2 	bl	800b448 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002ca4:	f000 f838 	bl	8002d18 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8002ca8:	f000 f8ae 	bl	8002e08 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_CRC_Init();
 8002cac:	f000 f95a 	bl	8002f64 <MX_CRC_Init>
  MX_GPIO_Init();
 8002cb0:	f000 fb6c 	bl	800338c <MX_GPIO_Init>
  MX_DMA2D_Init();
 8002cb4:	f000 f978 	bl	8002fa8 <MX_DMA2D_Init>
  MX_LTDC_Init();
 8002cb8:	f000 f9f0 	bl	800309c <MX_LTDC_Init>
  MX_I2C4_Init();
 8002cbc:	f000 f9ae 	bl	800301c <MX_I2C4_Init>
  MX_OCTOSPI1_Init();
 8002cc0:	f000 fa6e 	bl	80031a0 <MX_OCTOSPI1_Init>
  MX_ADC1_Init();
 8002cc4:	f000 f8d0 	bl	8002e68 <MX_ADC1_Init>
  MX_TIM1_Init();
 8002cc8:	f000 facc 	bl	8003264 <MX_TIM1_Init>
  MX_TouchGFX_Init();
 8002ccc:	f7fd fd45 	bl	800075a <MX_TouchGFX_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8002cd0:	f011 fb3c 	bl	801434c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8002cd4:	4a0a      	ldr	r2, [pc, #40]	; (8002d00 <main+0x130>)
 8002cd6:	2100      	movs	r1, #0
 8002cd8:	480a      	ldr	r0, [pc, #40]	; (8002d04 <main+0x134>)
 8002cda:	f011 fb81 	bl	80143e0 <osThreadNew>
 8002cde:	4603      	mov	r3, r0
 8002ce0:	4a09      	ldr	r2, [pc, #36]	; (8002d08 <main+0x138>)
 8002ce2:	6013      	str	r3, [r2, #0]

  /* creation of GUI_Task */
  GUI_TaskHandle = osThreadNew(TouchGFX_Task, NULL, &GUI_Task_attributes);
 8002ce4:	4a09      	ldr	r2, [pc, #36]	; (8002d0c <main+0x13c>)
 8002ce6:	2100      	movs	r1, #0
 8002ce8:	4809      	ldr	r0, [pc, #36]	; (8002d10 <main+0x140>)
 8002cea:	f011 fb79 	bl	80143e0 <osThreadNew>
 8002cee:	4603      	mov	r3, r0
 8002cf0:	4a08      	ldr	r2, [pc, #32]	; (8002d14 <main+0x144>)
 8002cf2:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8002cf4:	f011 fb4e 	bl	8014394 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002cf8:	e7fe      	b.n	8002cf8 <main+0x128>
 8002cfa:	bf00      	nop
 8002cfc:	e000ed00 	.word	0xe000ed00
 8002d00:	0802dcb0 	.word	0x0802dcb0
 8002d04:	080035bd 	.word	0x080035bd
 8002d08:	2400cda4 	.word	0x2400cda4
 8002d0c:	0802dcd4 	.word	0x0802dcd4
 8002d10:	08000767 	.word	0x08000767
 8002d14:	2400cda0 	.word	0x2400cda0

08002d18 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b09c      	sub	sp, #112	; 0x70
 8002d1c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002d1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d22:	224c      	movs	r2, #76	; 0x4c
 8002d24:	2100      	movs	r1, #0
 8002d26:	4618      	mov	r0, r3
 8002d28:	f028 fe32 	bl	802b990 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002d2c:	1d3b      	adds	r3, r7, #4
 8002d2e:	2220      	movs	r2, #32
 8002d30:	2100      	movs	r1, #0
 8002d32:	4618      	mov	r0, r3
 8002d34:	f028 fe2c 	bl	802b990 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8002d38:	2004      	movs	r0, #4
 8002d3a:	f00d f8cd 	bl	800fed8 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8002d3e:	2300      	movs	r3, #0
 8002d40:	603b      	str	r3, [r7, #0]
 8002d42:	4b2f      	ldr	r3, [pc, #188]	; (8002e00 <SystemClock_Config+0xe8>)
 8002d44:	699b      	ldr	r3, [r3, #24]
 8002d46:	4a2e      	ldr	r2, [pc, #184]	; (8002e00 <SystemClock_Config+0xe8>)
 8002d48:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002d4c:	6193      	str	r3, [r2, #24]
 8002d4e:	4b2c      	ldr	r3, [pc, #176]	; (8002e00 <SystemClock_Config+0xe8>)
 8002d50:	699b      	ldr	r3, [r3, #24]
 8002d52:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002d56:	603b      	str	r3, [r7, #0]
 8002d58:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8002d5a:	bf00      	nop
 8002d5c:	4b28      	ldr	r3, [pc, #160]	; (8002e00 <SystemClock_Config+0xe8>)
 8002d5e:	699b      	ldr	r3, [r3, #24]
 8002d60:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d64:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d68:	d1f8      	bne.n	8002d5c <SystemClock_Config+0x44>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8002d6a:	4b26      	ldr	r3, [pc, #152]	; (8002e04 <SystemClock_Config+0xec>)
 8002d6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d6e:	f023 0303 	bic.w	r3, r3, #3
 8002d72:	4a24      	ldr	r2, [pc, #144]	; (8002e04 <SystemClock_Config+0xec>)
 8002d74:	f043 0302 	orr.w	r3, r3, #2
 8002d78:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002d7e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002d82:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002d84:	2302      	movs	r3, #2
 8002d86:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002d88:	2302      	movs	r3, #2
 8002d8a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 12;
 8002d8c:	230c      	movs	r3, #12
 8002d8e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 280;
 8002d90:	f44f 738c 	mov.w	r3, #280	; 0x118
 8002d94:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8002d96:	2302      	movs	r3, #2
 8002d98:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8002d9a:	2302      	movs	r3, #2
 8002d9c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002d9e:	2302      	movs	r3, #2
 8002da0:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 8002da2:	2304      	movs	r3, #4
 8002da4:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8002da6:	2300      	movs	r3, #0
 8002da8:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8002daa:	2300      	movs	r3, #0
 8002dac:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002dae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002db2:	4618      	mov	r0, r3
 8002db4:	f00d f8ea 	bl	800ff8c <HAL_RCC_OscConfig>
 8002db8:	4603      	mov	r3, r0
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d001      	beq.n	8002dc2 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8002dbe:	f000 fc65 	bl	800368c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002dc2:	233f      	movs	r3, #63	; 0x3f
 8002dc4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002dc6:	2303      	movs	r3, #3
 8002dc8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8002dca:	2300      	movs	r3, #0
 8002dcc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8002dce:	2308      	movs	r3, #8
 8002dd0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8002dda:	2300      	movs	r3, #0
 8002ddc:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8002dde:	2300      	movs	r3, #0
 8002de0:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8002de2:	1d3b      	adds	r3, r7, #4
 8002de4:	2103      	movs	r1, #3
 8002de6:	4618      	mov	r0, r3
 8002de8:	f00d fcb8 	bl	801075c <HAL_RCC_ClockConfig>
 8002dec:	4603      	mov	r3, r0
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d001      	beq.n	8002df6 <SystemClock_Config+0xde>
  {
    Error_Handler();
 8002df2:	f000 fc4b 	bl	800368c <Error_Handler>
  }
}
 8002df6:	bf00      	nop
 8002df8:	3770      	adds	r7, #112	; 0x70
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bd80      	pop	{r7, pc}
 8002dfe:	bf00      	nop
 8002e00:	58024800 	.word	0x58024800
 8002e04:	58024400 	.word	0x58024400

08002e08 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b0ae      	sub	sp, #184	; 0xb8
 8002e0c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002e0e:	463b      	mov	r3, r7
 8002e10:	22b8      	movs	r2, #184	; 0xb8
 8002e12:	2100      	movs	r1, #0
 8002e14:	4618      	mov	r0, r3
 8002e16:	f028 fdbb 	bl	802b990 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_OSPI|RCC_PERIPHCLK_ADC;
 8002e1a:	f04f 7302 	mov.w	r3, #34078720	; 0x2080000
 8002e1e:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.PLL2.PLL2M = 24;
 8002e20:	2318      	movs	r3, #24
 8002e22:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLL2.PLL2N = 266;
 8002e24:	f44f 7385 	mov.w	r3, #266	; 0x10a
 8002e28:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 8002e2a:	2302      	movs	r3, #2
 8002e2c:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8002e2e:	2302      	movs	r3, #2
 8002e30:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8002e32:	2302      	movs	r3, #2
 8002e34:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_0;
 8002e36:	2300      	movs	r3, #0
 8002e38:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8002e3a:	2320      	movs	r3, #32
 8002e3c:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8002e3e:	2300      	movs	r3, #0
 8002e40:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.OspiClockSelection = RCC_OSPICLKSOURCE_PLL2;
 8002e42:	2320      	movs	r3, #32
 8002e44:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8002e46:	2300      	movs	r3, #0
 8002e48:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002e4c:	463b      	mov	r3, r7
 8002e4e:	4618      	mov	r0, r3
 8002e50:	f00e f852 	bl	8010ef8 <HAL_RCCEx_PeriphCLKConfig>
 8002e54:	4603      	mov	r3, r0
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d001      	beq.n	8002e5e <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 8002e5a:	f000 fc17 	bl	800368c <Error_Handler>
  }
}
 8002e5e:	bf00      	nop
 8002e60:	37b8      	adds	r7, #184	; 0xb8
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bd80      	pop	{r7, pc}
	...

08002e68 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b08a      	sub	sp, #40	; 0x28
 8002e6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8002e6e:	f107 031c 	add.w	r3, r7, #28
 8002e72:	2200      	movs	r2, #0
 8002e74:	601a      	str	r2, [r3, #0]
 8002e76:	605a      	str	r2, [r3, #4]
 8002e78:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8002e7a:	463b      	mov	r3, r7
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	601a      	str	r2, [r3, #0]
 8002e80:	605a      	str	r2, [r3, #4]
 8002e82:	609a      	str	r2, [r3, #8]
 8002e84:	60da      	str	r2, [r3, #12]
 8002e86:	611a      	str	r2, [r3, #16]
 8002e88:	615a      	str	r2, [r3, #20]
 8002e8a:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8002e8c:	4b32      	ldr	r3, [pc, #200]	; (8002f58 <MX_ADC1_Init+0xf0>)
 8002e8e:	4a33      	ldr	r2, [pc, #204]	; (8002f5c <MX_ADC1_Init+0xf4>)
 8002e90:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8002e92:	4b31      	ldr	r3, [pc, #196]	; (8002f58 <MX_ADC1_Init+0xf0>)
 8002e94:	2200      	movs	r2, #0
 8002e96:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8002e98:	4b2f      	ldr	r3, [pc, #188]	; (8002f58 <MX_ADC1_Init+0xf0>)
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002e9e:	4b2e      	ldr	r3, [pc, #184]	; (8002f58 <MX_ADC1_Init+0xf0>)
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002ea4:	4b2c      	ldr	r3, [pc, #176]	; (8002f58 <MX_ADC1_Init+0xf0>)
 8002ea6:	2204      	movs	r2, #4
 8002ea8:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8002eaa:	4b2b      	ldr	r3, [pc, #172]	; (8002f58 <MX_ADC1_Init+0xf0>)
 8002eac:	2200      	movs	r2, #0
 8002eae:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002eb0:	4b29      	ldr	r3, [pc, #164]	; (8002f58 <MX_ADC1_Init+0xf0>)
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 8002eb6:	4b28      	ldr	r3, [pc, #160]	; (8002f58 <MX_ADC1_Init+0xf0>)
 8002eb8:	2201      	movs	r2, #1
 8002eba:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002ebc:	4b26      	ldr	r3, [pc, #152]	; (8002f58 <MX_ADC1_Init+0xf0>)
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_CC1;
 8002ec2:	4b25      	ldr	r3, [pc, #148]	; (8002f58 <MX_ADC1_Init+0xf0>)
 8002ec4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002ec8:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8002eca:	4b23      	ldr	r3, [pc, #140]	; (8002f58 <MX_ADC1_Init+0xf0>)
 8002ecc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002ed0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8002ed2:	4b21      	ldr	r3, [pc, #132]	; (8002f58 <MX_ADC1_Init+0xf0>)
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002ed8:	4b1f      	ldr	r3, [pc, #124]	; (8002f58 <MX_ADC1_Init+0xf0>)
 8002eda:	2200      	movs	r2, #0
 8002edc:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8002ede:	4b1e      	ldr	r3, [pc, #120]	; (8002f58 <MX_ADC1_Init+0xf0>)
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8002ee4:	4b1c      	ldr	r3, [pc, #112]	; (8002f58 <MX_ADC1_Init+0xf0>)
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002eec:	481a      	ldr	r0, [pc, #104]	; (8002f58 <MX_ADC1_Init+0xf0>)
 8002eee:	f008 fd21 	bl	800b934 <HAL_ADC_Init>
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d001      	beq.n	8002efc <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8002ef8:	f000 fbc8 	bl	800368c <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8002efc:	2300      	movs	r3, #0
 8002efe:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8002f00:	f107 031c 	add.w	r3, r7, #28
 8002f04:	4619      	mov	r1, r3
 8002f06:	4814      	ldr	r0, [pc, #80]	; (8002f58 <MX_ADC1_Init+0xf0>)
 8002f08:	f009 fe5e 	bl	800cbc8 <HAL_ADCEx_MultiModeConfigChannel>
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d001      	beq.n	8002f16 <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 8002f12:	f000 fbbb 	bl	800368c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8002f16:	4b12      	ldr	r3, [pc, #72]	; (8002f60 <MX_ADC1_Init+0xf8>)
 8002f18:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002f1a:	2306      	movs	r3, #6
 8002f1c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8002f1e:	2300      	movs	r3, #0
 8002f20:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002f22:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8002f26:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002f28:	2304      	movs	r3, #4
 8002f2a:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8002f30:	2300      	movs	r3, #0
 8002f32:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002f34:	463b      	mov	r3, r7
 8002f36:	4619      	mov	r1, r3
 8002f38:	4807      	ldr	r0, [pc, #28]	; (8002f58 <MX_ADC1_Init+0xf0>)
 8002f3a:	f009 f9bf 	bl	800c2bc <HAL_ADC_ConfigChannel>
 8002f3e:	4603      	mov	r3, r0
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d001      	beq.n	8002f48 <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 8002f44:	f000 fba2 	bl	800368c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */
  HAL_ADC_Start_IT(&hadc1);
 8002f48:	4803      	ldr	r0, [pc, #12]	; (8002f58 <MX_ADC1_Init+0xf0>)
 8002f4a:	f008 fe4d 	bl	800bbe8 <HAL_ADC_Start_IT>
  /* USER CODE END ADC1_Init 2 */

}
 8002f4e:	bf00      	nop
 8002f50:	3728      	adds	r7, #40	; 0x28
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd80      	pop	{r7, pc}
 8002f56:	bf00      	nop
 8002f58:	2400cd38 	.word	0x2400cd38
 8002f5c:	40022000 	.word	0x40022000
 8002f60:	10c00010 	.word	0x10c00010

08002f64 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8002f68:	4b0d      	ldr	r3, [pc, #52]	; (8002fa0 <MX_CRC_Init+0x3c>)
 8002f6a:	4a0e      	ldr	r2, [pc, #56]	; (8002fa4 <MX_CRC_Init+0x40>)
 8002f6c:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8002f6e:	4b0c      	ldr	r3, [pc, #48]	; (8002fa0 <MX_CRC_Init+0x3c>)
 8002f70:	2200      	movs	r2, #0
 8002f72:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8002f74:	4b0a      	ldr	r3, [pc, #40]	; (8002fa0 <MX_CRC_Init+0x3c>)
 8002f76:	2200      	movs	r2, #0
 8002f78:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8002f7a:	4b09      	ldr	r3, [pc, #36]	; (8002fa0 <MX_CRC_Init+0x3c>)
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8002f80:	4b07      	ldr	r3, [pc, #28]	; (8002fa0 <MX_CRC_Init+0x3c>)
 8002f82:	2200      	movs	r2, #0
 8002f84:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8002f86:	4b06      	ldr	r3, [pc, #24]	; (8002fa0 <MX_CRC_Init+0x3c>)
 8002f88:	2201      	movs	r2, #1
 8002f8a:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8002f8c:	4804      	ldr	r0, [pc, #16]	; (8002fa0 <MX_CRC_Init+0x3c>)
 8002f8e:	f00a f845 	bl	800d01c <HAL_CRC_Init>
 8002f92:	4603      	mov	r3, r0
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d001      	beq.n	8002f9c <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8002f98:	f000 fb78 	bl	800368c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8002f9c:	bf00      	nop
 8002f9e:	bd80      	pop	{r7, pc}
 8002fa0:	2400cd14 	.word	0x2400cd14
 8002fa4:	40023000 	.word	0x40023000

08002fa8 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8002fac:	4b19      	ldr	r3, [pc, #100]	; (8003014 <MX_DMA2D_Init+0x6c>)
 8002fae:	4a1a      	ldr	r2, [pc, #104]	; (8003018 <MX_DMA2D_Init+0x70>)
 8002fb0:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8002fb2:	4b18      	ldr	r3, [pc, #96]	; (8003014 <MX_DMA2D_Init+0x6c>)
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB565;
 8002fb8:	4b16      	ldr	r3, [pc, #88]	; (8003014 <MX_DMA2D_Init+0x6c>)
 8002fba:	2202      	movs	r2, #2
 8002fbc:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8002fbe:	4b15      	ldr	r3, [pc, #84]	; (8003014 <MX_DMA2D_Init+0x6c>)
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8002fc4:	4b13      	ldr	r3, [pc, #76]	; (8003014 <MX_DMA2D_Init+0x6c>)
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	645a      	str	r2, [r3, #68]	; 0x44
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB565;
 8002fca:	4b12      	ldr	r3, [pc, #72]	; (8003014 <MX_DMA2D_Init+0x6c>)
 8002fcc:	2202      	movs	r2, #2
 8002fce:	649a      	str	r2, [r3, #72]	; 0x48
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8002fd0:	4b10      	ldr	r3, [pc, #64]	; (8003014 <MX_DMA2D_Init+0x6c>)
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8002fd6:	4b0f      	ldr	r3, [pc, #60]	; (8003014 <MX_DMA2D_Init+0x6c>)
 8002fd8:	2200      	movs	r2, #0
 8002fda:	651a      	str	r2, [r3, #80]	; 0x50
  hdma2d.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA;
 8002fdc:	4b0d      	ldr	r3, [pc, #52]	; (8003014 <MX_DMA2D_Init+0x6c>)
 8002fde:	2200      	movs	r2, #0
 8002fe0:	655a      	str	r2, [r3, #84]	; 0x54
  hdma2d.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR;
 8002fe2:	4b0c      	ldr	r3, [pc, #48]	; (8003014 <MX_DMA2D_Init+0x6c>)
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	659a      	str	r2, [r3, #88]	; 0x58
  hdma2d.LayerCfg[1].ChromaSubSampling = DMA2D_NO_CSS;
 8002fe8:	4b0a      	ldr	r3, [pc, #40]	; (8003014 <MX_DMA2D_Init+0x6c>)
 8002fea:	2200      	movs	r2, #0
 8002fec:	65da      	str	r2, [r3, #92]	; 0x5c
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8002fee:	4809      	ldr	r0, [pc, #36]	; (8003014 <MX_DMA2D_Init+0x6c>)
 8002ff0:	f00a f8fe 	bl	800d1f0 <HAL_DMA2D_Init>
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d001      	beq.n	8002ffe <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8002ffa:	f000 fb47 	bl	800368c <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8002ffe:	2101      	movs	r1, #1
 8003000:	4804      	ldr	r0, [pc, #16]	; (8003014 <MX_DMA2D_Init+0x6c>)
 8003002:	f00a fa69 	bl	800d4d8 <HAL_DMA2D_ConfigLayer>
 8003006:	4603      	mov	r3, r0
 8003008:	2b00      	cmp	r3, #0
 800300a:	d001      	beq.n	8003010 <MX_DMA2D_Init+0x68>
  {
    Error_Handler();
 800300c:	f000 fb3e 	bl	800368c <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8003010:	bf00      	nop
 8003012:	bd80      	pop	{r7, pc}
 8003014:	2400cc60 	.word	0x2400cc60
 8003018:	52001000 	.word	0x52001000

0800301c <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8003020:	4b1b      	ldr	r3, [pc, #108]	; (8003090 <MX_I2C4_Init+0x74>)
 8003022:	4a1c      	ldr	r2, [pc, #112]	; (8003094 <MX_I2C4_Init+0x78>)
 8003024:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x30808BD0;
 8003026:	4b1a      	ldr	r3, [pc, #104]	; (8003090 <MX_I2C4_Init+0x74>)
 8003028:	4a1b      	ldr	r2, [pc, #108]	; (8003098 <MX_I2C4_Init+0x7c>)
 800302a:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 800302c:	4b18      	ldr	r3, [pc, #96]	; (8003090 <MX_I2C4_Init+0x74>)
 800302e:	2200      	movs	r2, #0
 8003030:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003032:	4b17      	ldr	r3, [pc, #92]	; (8003090 <MX_I2C4_Init+0x74>)
 8003034:	2201      	movs	r2, #1
 8003036:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003038:	4b15      	ldr	r3, [pc, #84]	; (8003090 <MX_I2C4_Init+0x74>)
 800303a:	2200      	movs	r2, #0
 800303c:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 800303e:	4b14      	ldr	r3, [pc, #80]	; (8003090 <MX_I2C4_Init+0x74>)
 8003040:	2200      	movs	r2, #0
 8003042:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003044:	4b12      	ldr	r3, [pc, #72]	; (8003090 <MX_I2C4_Init+0x74>)
 8003046:	2200      	movs	r2, #0
 8003048:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800304a:	4b11      	ldr	r3, [pc, #68]	; (8003090 <MX_I2C4_Init+0x74>)
 800304c:	2200      	movs	r2, #0
 800304e:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003050:	4b0f      	ldr	r3, [pc, #60]	; (8003090 <MX_I2C4_Init+0x74>)
 8003052:	2200      	movs	r2, #0
 8003054:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8003056:	480e      	ldr	r0, [pc, #56]	; (8003090 <MX_I2C4_Init+0x74>)
 8003058:	f00a fe04 	bl	800dc64 <HAL_I2C_Init>
 800305c:	4603      	mov	r3, r0
 800305e:	2b00      	cmp	r3, #0
 8003060:	d001      	beq.n	8003066 <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8003062:	f000 fb13 	bl	800368c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_DISABLE) != HAL_OK)
 8003066:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800306a:	4809      	ldr	r0, [pc, #36]	; (8003090 <MX_I2C4_Init+0x74>)
 800306c:	f00b fb1e 	bl	800e6ac <HAL_I2CEx_ConfigAnalogFilter>
 8003070:	4603      	mov	r3, r0
 8003072:	2b00      	cmp	r3, #0
 8003074:	d001      	beq.n	800307a <MX_I2C4_Init+0x5e>
  {
    Error_Handler();
 8003076:	f000 fb09 	bl	800368c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 800307a:	2100      	movs	r1, #0
 800307c:	4804      	ldr	r0, [pc, #16]	; (8003090 <MX_I2C4_Init+0x74>)
 800307e:	f00b fb60 	bl	800e742 <HAL_I2CEx_ConfigDigitalFilter>
 8003082:	4603      	mov	r3, r0
 8003084:	2b00      	cmp	r3, #0
 8003086:	d001      	beq.n	800308c <MX_I2C4_Init+0x70>
  {
    Error_Handler();
 8003088:	f000 fb00 	bl	800368c <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 800308c:	bf00      	nop
 800308e:	bd80      	pop	{r7, pc}
 8003090:	2400ccc8 	.word	0x2400ccc8
 8003094:	58001c00 	.word	0x58001c00
 8003098:	30808bd0 	.word	0x30808bd0

0800309c <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b08e      	sub	sp, #56	; 0x38
 80030a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80030a2:	1d3b      	adds	r3, r7, #4
 80030a4:	2234      	movs	r2, #52	; 0x34
 80030a6:	2100      	movs	r1, #0
 80030a8:	4618      	mov	r0, r3
 80030aa:	f028 fc71 	bl	802b990 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 80030ae:	4b3a      	ldr	r3, [pc, #232]	; (8003198 <MX_LTDC_Init+0xfc>)
 80030b0:	4a3a      	ldr	r2, [pc, #232]	; (800319c <MX_LTDC_Init+0x100>)
 80030b2:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80030b4:	4b38      	ldr	r3, [pc, #224]	; (8003198 <MX_LTDC_Init+0xfc>)
 80030b6:	2200      	movs	r2, #0
 80030b8:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80030ba:	4b37      	ldr	r3, [pc, #220]	; (8003198 <MX_LTDC_Init+0xfc>)
 80030bc:	2200      	movs	r2, #0
 80030be:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80030c0:	4b35      	ldr	r3, [pc, #212]	; (8003198 <MX_LTDC_Init+0xfc>)
 80030c2:	2200      	movs	r2, #0
 80030c4:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80030c6:	4b34      	ldr	r3, [pc, #208]	; (8003198 <MX_LTDC_Init+0xfc>)
 80030c8:	2200      	movs	r2, #0
 80030ca:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 80030cc:	4b32      	ldr	r3, [pc, #200]	; (8003198 <MX_LTDC_Init+0xfc>)
 80030ce:	2228      	movs	r2, #40	; 0x28
 80030d0:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 80030d2:	4b31      	ldr	r3, [pc, #196]	; (8003198 <MX_LTDC_Init+0xfc>)
 80030d4:	2209      	movs	r2, #9
 80030d6:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 42;
 80030d8:	4b2f      	ldr	r3, [pc, #188]	; (8003198 <MX_LTDC_Init+0xfc>)
 80030da:	222a      	movs	r2, #42	; 0x2a
 80030dc:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 80030de:	4b2e      	ldr	r3, [pc, #184]	; (8003198 <MX_LTDC_Init+0xfc>)
 80030e0:	220b      	movs	r2, #11
 80030e2:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 522;
 80030e4:	4b2c      	ldr	r3, [pc, #176]	; (8003198 <MX_LTDC_Init+0xfc>)
 80030e6:	f240 220a 	movw	r2, #522	; 0x20a
 80030ea:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 80030ec:	4b2a      	ldr	r3, [pc, #168]	; (8003198 <MX_LTDC_Init+0xfc>)
 80030ee:	f240 121b 	movw	r2, #283	; 0x11b
 80030f2:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 554;
 80030f4:	4b28      	ldr	r3, [pc, #160]	; (8003198 <MX_LTDC_Init+0xfc>)
 80030f6:	f240 222a 	movw	r2, #554	; 0x22a
 80030fa:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 80030fc:	4b26      	ldr	r3, [pc, #152]	; (8003198 <MX_LTDC_Init+0xfc>)
 80030fe:	f240 121d 	movw	r2, #285	; 0x11d
 8003102:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8003104:	4b24      	ldr	r3, [pc, #144]	; (8003198 <MX_LTDC_Init+0xfc>)
 8003106:	2200      	movs	r2, #0
 8003108:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 800310c:	4b22      	ldr	r3, [pc, #136]	; (8003198 <MX_LTDC_Init+0xfc>)
 800310e:	2200      	movs	r2, #0
 8003110:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8003114:	4b20      	ldr	r3, [pc, #128]	; (8003198 <MX_LTDC_Init+0xfc>)
 8003116:	2200      	movs	r2, #0
 8003118:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 800311c:	481e      	ldr	r0, [pc, #120]	; (8003198 <MX_LTDC_Init+0xfc>)
 800311e:	f00b fb5d 	bl	800e7dc <HAL_LTDC_Init>
 8003122:	4603      	mov	r3, r0
 8003124:	2b00      	cmp	r3, #0
 8003126:	d001      	beq.n	800312c <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8003128:	f000 fab0 	bl	800368c <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 800312c:	2300      	movs	r3, #0
 800312e:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 8003130:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8003134:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8003136:	2300      	movs	r3, #0
 8003138:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 800313a:	f44f 7388 	mov.w	r3, #272	; 0x110
 800313e:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB888;
 8003140:	2301      	movs	r3, #1
 8003142:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8003144:	23ff      	movs	r3, #255	; 0xff
 8003146:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8003148:	2300      	movs	r3, #0
 800314a:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 800314c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003150:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8003152:	2305      	movs	r3, #5
 8003154:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0;
 8003156:	2300      	movs	r3, #0
 8003158:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 480;
 800315a:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800315e:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 272;
 8003160:	f44f 7388 	mov.w	r3, #272	; 0x110
 8003164:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 255;
 8003166:	23ff      	movs	r3, #255	; 0xff
 8003168:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 800316c:	2300      	movs	r3, #0
 800316e:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8003172:	2300      	movs	r3, #0
 8003174:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8003178:	1d3b      	adds	r3, r7, #4
 800317a:	2200      	movs	r2, #0
 800317c:	4619      	mov	r1, r3
 800317e:	4806      	ldr	r0, [pc, #24]	; (8003198 <MX_LTDC_Init+0xfc>)
 8003180:	f00b fcb4 	bl	800eaec <HAL_LTDC_ConfigLayer>
 8003184:	4603      	mov	r3, r0
 8003186:	2b00      	cmp	r3, #0
 8003188:	d001      	beq.n	800318e <MX_LTDC_Init+0xf2>
  {
    Error_Handler();
 800318a:	f000 fa7f 	bl	800368c <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 800318e:	bf00      	nop
 8003190:	3738      	adds	r7, #56	; 0x38
 8003192:	46bd      	mov	sp, r7
 8003194:	bd80      	pop	{r7, pc}
 8003196:	bf00      	nop
 8003198:	2400cbb8 	.word	0x2400cbb8
 800319c:	50001000 	.word	0x50001000

080031a0 <MX_OCTOSPI1_Init>:
  * @brief OCTOSPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OCTOSPI1_Init(void)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b082      	sub	sp, #8
 80031a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI1_Init 1 */

  /* USER CODE END OCTOSPI1_Init 1 */
  /* OCTOSPI1 parameter configuration*/
  hospi1.Instance = OCTOSPI1;
 80031a6:	4b2d      	ldr	r3, [pc, #180]	; (800325c <MX_OCTOSPI1_Init+0xbc>)
 80031a8:	4a2d      	ldr	r2, [pc, #180]	; (8003260 <MX_OCTOSPI1_Init+0xc0>)
 80031aa:	601a      	str	r2, [r3, #0]
  hospi1.Init.FifoThreshold = 1;
 80031ac:	4b2b      	ldr	r3, [pc, #172]	; (800325c <MX_OCTOSPI1_Init+0xbc>)
 80031ae:	2201      	movs	r2, #1
 80031b0:	605a      	str	r2, [r3, #4]
  hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 80031b2:	4b2a      	ldr	r3, [pc, #168]	; (800325c <MX_OCTOSPI1_Init+0xbc>)
 80031b4:	2200      	movs	r2, #0
 80031b6:	609a      	str	r2, [r3, #8]
  hospi1.Init.MemoryType = HAL_OSPI_MEMTYPE_MICRON;
 80031b8:	4b28      	ldr	r3, [pc, #160]	; (800325c <MX_OCTOSPI1_Init+0xbc>)
 80031ba:	2200      	movs	r2, #0
 80031bc:	60da      	str	r2, [r3, #12]
  hospi1.Init.DeviceSize = 26;
 80031be:	4b27      	ldr	r3, [pc, #156]	; (800325c <MX_OCTOSPI1_Init+0xbc>)
 80031c0:	221a      	movs	r2, #26
 80031c2:	611a      	str	r2, [r3, #16]
  hospi1.Init.ChipSelectHighTime = 2;
 80031c4:	4b25      	ldr	r3, [pc, #148]	; (800325c <MX_OCTOSPI1_Init+0xbc>)
 80031c6:	2202      	movs	r2, #2
 80031c8:	615a      	str	r2, [r3, #20]
  hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 80031ca:	4b24      	ldr	r3, [pc, #144]	; (800325c <MX_OCTOSPI1_Init+0xbc>)
 80031cc:	2200      	movs	r2, #0
 80031ce:	619a      	str	r2, [r3, #24]
  hospi1.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 80031d0:	4b22      	ldr	r3, [pc, #136]	; (800325c <MX_OCTOSPI1_Init+0xbc>)
 80031d2:	2200      	movs	r2, #0
 80031d4:	61da      	str	r2, [r3, #28]
  hospi1.Init.WrapSize = HAL_OSPI_WRAP_NOT_SUPPORTED;
 80031d6:	4b21      	ldr	r3, [pc, #132]	; (800325c <MX_OCTOSPI1_Init+0xbc>)
 80031d8:	2200      	movs	r2, #0
 80031da:	621a      	str	r2, [r3, #32]
  hospi1.Init.ClockPrescaler = 3;
 80031dc:	4b1f      	ldr	r3, [pc, #124]	; (800325c <MX_OCTOSPI1_Init+0xbc>)
 80031de:	2203      	movs	r2, #3
 80031e0:	625a      	str	r2, [r3, #36]	; 0x24
  hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 80031e2:	4b1e      	ldr	r3, [pc, #120]	; (800325c <MX_OCTOSPI1_Init+0xbc>)
 80031e4:	2200      	movs	r2, #0
 80031e6:	629a      	str	r2, [r3, #40]	; 0x28
  hospi1.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 80031e8:	4b1c      	ldr	r3, [pc, #112]	; (800325c <MX_OCTOSPI1_Init+0xbc>)
 80031ea:	2200      	movs	r2, #0
 80031ec:	62da      	str	r2, [r3, #44]	; 0x2c
  hospi1.Init.ChipSelectBoundary = 0;
 80031ee:	4b1b      	ldr	r3, [pc, #108]	; (800325c <MX_OCTOSPI1_Init+0xbc>)
 80031f0:	2200      	movs	r2, #0
 80031f2:	631a      	str	r2, [r3, #48]	; 0x30
  hospi1.Init.ClkChipSelectHighTime = 0;
 80031f4:	4b19      	ldr	r3, [pc, #100]	; (800325c <MX_OCTOSPI1_Init+0xbc>)
 80031f6:	2200      	movs	r2, #0
 80031f8:	635a      	str	r2, [r3, #52]	; 0x34
  hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 80031fa:	4b18      	ldr	r3, [pc, #96]	; (800325c <MX_OCTOSPI1_Init+0xbc>)
 80031fc:	2208      	movs	r2, #8
 80031fe:	639a      	str	r2, [r3, #56]	; 0x38
  hospi1.Init.MaxTran = 0;
 8003200:	4b16      	ldr	r3, [pc, #88]	; (800325c <MX_OCTOSPI1_Init+0xbc>)
 8003202:	2200      	movs	r2, #0
 8003204:	63da      	str	r2, [r3, #60]	; 0x3c
  hospi1.Init.Refresh = 0;
 8003206:	4b15      	ldr	r3, [pc, #84]	; (800325c <MX_OCTOSPI1_Init+0xbc>)
 8003208:	2200      	movs	r2, #0
 800320a:	641a      	str	r2, [r3, #64]	; 0x40
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 800320c:	4813      	ldr	r0, [pc, #76]	; (800325c <MX_OCTOSPI1_Init+0xbc>)
 800320e:	f00b feff 	bl	800f010 <HAL_OSPI_Init>
 8003212:	4603      	mov	r3, r0
 8003214:	2b00      	cmp	r3, #0
 8003216:	d001      	beq.n	800321c <MX_OCTOSPI1_Init+0x7c>
  {
    Error_Handler();
 8003218:	f000 fa38 	bl	800368c <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI1_Init 2 */
  BSP_OSPI_NOR_Init_t Flash;
  Flash.InterfaceMode = BSP_OSPI_NOR_OPI_MODE;
 800321c:	2301      	movs	r3, #1
 800321e:	703b      	strb	r3, [r7, #0]
  Flash.TransferRate  = BSP_OSPI_NOR_DTR_TRANSFER;
 8003220:	2301      	movs	r3, #1
 8003222:	707b      	strb	r3, [r7, #1]
  BSP_OSPI_NOR_DeInit(0);
 8003224:	2000      	movs	r0, #0
 8003226:	f007 f87b 	bl	800a320 <BSP_OSPI_NOR_DeInit>
  int32_t RetVal = BSP_OSPI_NOR_Init(0, &Flash);
 800322a:	463b      	mov	r3, r7
 800322c:	4619      	mov	r1, r3
 800322e:	2000      	movs	r0, #0
 8003230:	f006 ffea 	bl	800a208 <BSP_OSPI_NOR_Init>
 8003234:	6078      	str	r0, [r7, #4]
  if(RetVal != BSP_ERROR_NONE)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2b00      	cmp	r3, #0
 800323a:	d001      	beq.n	8003240 <MX_OCTOSPI1_Init+0xa0>
  {
    Error_Handler();
 800323c:	f000 fa26 	bl	800368c <Error_Handler>
  }
  RetVal = BSP_OSPI_NOR_EnableMemoryMappedMode(0);
 8003240:	2000      	movs	r0, #0
 8003242:	f007 f90b 	bl	800a45c <BSP_OSPI_NOR_EnableMemoryMappedMode>
 8003246:	6078      	str	r0, [r7, #4]
  if(RetVal != BSP_ERROR_NONE)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d001      	beq.n	8003252 <MX_OCTOSPI1_Init+0xb2>
  {
    Error_Handler();
 800324e:	f000 fa1d 	bl	800368c <Error_Handler>
  }
  /* USER CODE END OCTOSPI1_Init 2 */

}
 8003252:	bf00      	nop
 8003254:	3708      	adds	r7, #8
 8003256:	46bd      	mov	sp, r7
 8003258:	bd80      	pop	{r7, pc}
 800325a:	bf00      	nop
 800325c:	2400cb58 	.word	0x2400cb58
 8003260:	52005000 	.word	0x52005000

08003264 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b096      	sub	sp, #88	; 0x58
 8003268:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800326a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800326e:	2200      	movs	r2, #0
 8003270:	601a      	str	r2, [r3, #0]
 8003272:	605a      	str	r2, [r3, #4]
 8003274:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003276:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800327a:	2200      	movs	r2, #0
 800327c:	601a      	str	r2, [r3, #0]
 800327e:	605a      	str	r2, [r3, #4]
 8003280:	609a      	str	r2, [r3, #8]
 8003282:	60da      	str	r2, [r3, #12]
 8003284:	611a      	str	r2, [r3, #16]
 8003286:	615a      	str	r2, [r3, #20]
 8003288:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800328a:	1d3b      	adds	r3, r7, #4
 800328c:	222c      	movs	r2, #44	; 0x2c
 800328e:	2100      	movs	r1, #0
 8003290:	4618      	mov	r0, r3
 8003292:	f028 fb7d 	bl	802b990 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003296:	4b3b      	ldr	r3, [pc, #236]	; (8003384 <MX_TIM1_Init+0x120>)
 8003298:	4a3b      	ldr	r2, [pc, #236]	; (8003388 <MX_TIM1_Init+0x124>)
 800329a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 140-1;
 800329c:	4b39      	ldr	r3, [pc, #228]	; (8003384 <MX_TIM1_Init+0x120>)
 800329e:	228b      	movs	r2, #139	; 0x8b
 80032a0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80032a2:	4b38      	ldr	r3, [pc, #224]	; (8003384 <MX_TIM1_Init+0x120>)
 80032a4:	2200      	movs	r2, #0
 80032a6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 16000-1;
 80032a8:	4b36      	ldr	r3, [pc, #216]	; (8003384 <MX_TIM1_Init+0x120>)
 80032aa:	f643 627f 	movw	r2, #15999	; 0x3e7f
 80032ae:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80032b0:	4b34      	ldr	r3, [pc, #208]	; (8003384 <MX_TIM1_Init+0x120>)
 80032b2:	2200      	movs	r2, #0
 80032b4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80032b6:	4b33      	ldr	r3, [pc, #204]	; (8003384 <MX_TIM1_Init+0x120>)
 80032b8:	2200      	movs	r2, #0
 80032ba:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80032bc:	4b31      	ldr	r3, [pc, #196]	; (8003384 <MX_TIM1_Init+0x120>)
 80032be:	2200      	movs	r2, #0
 80032c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80032c2:	4830      	ldr	r0, [pc, #192]	; (8003384 <MX_TIM1_Init+0x120>)
 80032c4:	f00f ff94 	bl	80131f0 <HAL_TIM_PWM_Init>
 80032c8:	4603      	mov	r3, r0
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d001      	beq.n	80032d2 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 80032ce:	f000 f9dd 	bl	800368c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80032d2:	2300      	movs	r3, #0
 80032d4:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80032d6:	2300      	movs	r3, #0
 80032d8:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80032da:	2300      	movs	r3, #0
 80032dc:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80032de:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80032e2:	4619      	mov	r1, r3
 80032e4:	4827      	ldr	r0, [pc, #156]	; (8003384 <MX_TIM1_Init+0x120>)
 80032e6:	f010 fec9 	bl	801407c <HAL_TIMEx_MasterConfigSynchronization>
 80032ea:	4603      	mov	r3, r0
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d001      	beq.n	80032f4 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80032f0:	f000 f9cc 	bl	800368c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80032f4:	2360      	movs	r3, #96	; 0x60
 80032f6:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 16000/2;
 80032f8:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 80032fc:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80032fe:	2300      	movs	r3, #0
 8003300:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003302:	2300      	movs	r3, #0
 8003304:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003306:	2300      	movs	r3, #0
 8003308:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800330a:	2300      	movs	r3, #0
 800330c:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800330e:	2300      	movs	r3, #0
 8003310:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003312:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003316:	2200      	movs	r2, #0
 8003318:	4619      	mov	r1, r3
 800331a:	481a      	ldr	r0, [pc, #104]	; (8003384 <MX_TIM1_Init+0x120>)
 800331c:	f010 f9e8 	bl	80136f0 <HAL_TIM_PWM_ConfigChannel>
 8003320:	4603      	mov	r3, r0
 8003322:	2b00      	cmp	r3, #0
 8003324:	d001      	beq.n	800332a <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 8003326:	f000 f9b1 	bl	800368c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800332a:	2300      	movs	r3, #0
 800332c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800332e:	2300      	movs	r3, #0
 8003330:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003332:	2300      	movs	r3, #0
 8003334:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003336:	2300      	movs	r3, #0
 8003338:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800333a:	2300      	movs	r3, #0
 800333c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800333e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003342:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8003344:	2300      	movs	r3, #0
 8003346:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8003348:	2300      	movs	r3, #0
 800334a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800334c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003350:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8003352:	2300      	movs	r3, #0
 8003354:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003356:	2300      	movs	r3, #0
 8003358:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800335a:	1d3b      	adds	r3, r7, #4
 800335c:	4619      	mov	r1, r3
 800335e:	4809      	ldr	r0, [pc, #36]	; (8003384 <MX_TIM1_Init+0x120>)
 8003360:	f010 ff14 	bl	801418c <HAL_TIMEx_ConfigBreakDeadTime>
 8003364:	4603      	mov	r3, r0
 8003366:	2b00      	cmp	r3, #0
 8003368:	d001      	beq.n	800336e <MX_TIM1_Init+0x10a>
  {
    Error_Handler();
 800336a:	f000 f98f 	bl	800368c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800336e:	2100      	movs	r1, #0
 8003370:	4804      	ldr	r0, [pc, #16]	; (8003384 <MX_TIM1_Init+0x120>)
 8003372:	f00f ff95 	bl	80132a0 <HAL_TIM_PWM_Start>
  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8003376:	4803      	ldr	r0, [pc, #12]	; (8003384 <MX_TIM1_Init+0x120>)
 8003378:	f000 fc1c 	bl	8003bb4 <HAL_TIM_MspPostInit>

}
 800337c:	bf00      	nop
 800337e:	3758      	adds	r7, #88	; 0x58
 8003380:	46bd      	mov	sp, r7
 8003382:	bd80      	pop	{r7, pc}
 8003384:	2400cda8 	.word	0x2400cda8
 8003388:	40010000 	.word	0x40010000

0800338c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b08e      	sub	sp, #56	; 0x38
 8003390:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003392:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003396:	2200      	movs	r2, #0
 8003398:	601a      	str	r2, [r3, #0]
 800339a:	605a      	str	r2, [r3, #4]
 800339c:	609a      	str	r2, [r3, #8]
 800339e:	60da      	str	r2, [r3, #12]
 80033a0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80033a2:	4b7f      	ldr	r3, [pc, #508]	; (80035a0 <MX_GPIO_Init+0x214>)
 80033a4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80033a8:	4a7d      	ldr	r2, [pc, #500]	; (80035a0 <MX_GPIO_Init+0x214>)
 80033aa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80033ae:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80033b2:	4b7b      	ldr	r3, [pc, #492]	; (80035a0 <MX_GPIO_Init+0x214>)
 80033b4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80033b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033bc:	623b      	str	r3, [r7, #32]
 80033be:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80033c0:	4b77      	ldr	r3, [pc, #476]	; (80035a0 <MX_GPIO_Init+0x214>)
 80033c2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80033c6:	4a76      	ldr	r2, [pc, #472]	; (80035a0 <MX_GPIO_Init+0x214>)
 80033c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80033cc:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80033d0:	4b73      	ldr	r3, [pc, #460]	; (80035a0 <MX_GPIO_Init+0x214>)
 80033d2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80033d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033da:	61fb      	str	r3, [r7, #28]
 80033dc:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80033de:	4b70      	ldr	r3, [pc, #448]	; (80035a0 <MX_GPIO_Init+0x214>)
 80033e0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80033e4:	4a6e      	ldr	r2, [pc, #440]	; (80035a0 <MX_GPIO_Init+0x214>)
 80033e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80033ea:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80033ee:	4b6c      	ldr	r3, [pc, #432]	; (80035a0 <MX_GPIO_Init+0x214>)
 80033f0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80033f4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80033f8:	61bb      	str	r3, [r7, #24]
 80033fa:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80033fc:	4b68      	ldr	r3, [pc, #416]	; (80035a0 <MX_GPIO_Init+0x214>)
 80033fe:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8003402:	4a67      	ldr	r2, [pc, #412]	; (80035a0 <MX_GPIO_Init+0x214>)
 8003404:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003408:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800340c:	4b64      	ldr	r3, [pc, #400]	; (80035a0 <MX_GPIO_Init+0x214>)
 800340e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8003412:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003416:	617b      	str	r3, [r7, #20]
 8003418:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800341a:	4b61      	ldr	r3, [pc, #388]	; (80035a0 <MX_GPIO_Init+0x214>)
 800341c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8003420:	4a5f      	ldr	r2, [pc, #380]	; (80035a0 <MX_GPIO_Init+0x214>)
 8003422:	f043 0301 	orr.w	r3, r3, #1
 8003426:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800342a:	4b5d      	ldr	r3, [pc, #372]	; (80035a0 <MX_GPIO_Init+0x214>)
 800342c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8003430:	f003 0301 	and.w	r3, r3, #1
 8003434:	613b      	str	r3, [r7, #16]
 8003436:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003438:	4b59      	ldr	r3, [pc, #356]	; (80035a0 <MX_GPIO_Init+0x214>)
 800343a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800343e:	4a58      	ldr	r2, [pc, #352]	; (80035a0 <MX_GPIO_Init+0x214>)
 8003440:	f043 0308 	orr.w	r3, r3, #8
 8003444:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8003448:	4b55      	ldr	r3, [pc, #340]	; (80035a0 <MX_GPIO_Init+0x214>)
 800344a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800344e:	f003 0308 	and.w	r3, r3, #8
 8003452:	60fb      	str	r3, [r7, #12]
 8003454:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003456:	4b52      	ldr	r3, [pc, #328]	; (80035a0 <MX_GPIO_Init+0x214>)
 8003458:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800345c:	4a50      	ldr	r2, [pc, #320]	; (80035a0 <MX_GPIO_Init+0x214>)
 800345e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003462:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8003466:	4b4e      	ldr	r3, [pc, #312]	; (80035a0 <MX_GPIO_Init+0x214>)
 8003468:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800346c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003470:	60bb      	str	r3, [r7, #8]
 8003472:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003474:	4b4a      	ldr	r3, [pc, #296]	; (80035a0 <MX_GPIO_Init+0x214>)
 8003476:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800347a:	4a49      	ldr	r2, [pc, #292]	; (80035a0 <MX_GPIO_Init+0x214>)
 800347c:	f043 0304 	orr.w	r3, r3, #4
 8003480:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8003484:	4b46      	ldr	r3, [pc, #280]	; (80035a0 <MX_GPIO_Init+0x214>)
 8003486:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800348a:	f003 0304 	and.w	r3, r3, #4
 800348e:	607b      	str	r3, [r7, #4]
 8003490:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003492:	4b43      	ldr	r3, [pc, #268]	; (80035a0 <MX_GPIO_Init+0x214>)
 8003494:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8003498:	4a41      	ldr	r2, [pc, #260]	; (80035a0 <MX_GPIO_Init+0x214>)
 800349a:	f043 0302 	orr.w	r3, r3, #2
 800349e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80034a2:	4b3f      	ldr	r3, [pc, #252]	; (80035a0 <MX_GPIO_Init+0x214>)
 80034a4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80034a8:	f003 0302 	and.w	r3, r3, #2
 80034ac:	603b      	str	r3, [r7, #0]
 80034ae:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LED3_Pin|LED2_Pin, GPIO_PIN_RESET);
 80034b0:	2200      	movs	r2, #0
 80034b2:	f640 0104 	movw	r1, #2052	; 0x804
 80034b6:	483b      	ldr	r0, [pc, #236]	; (80035a4 <MX_GPIO_Init+0x218>)
 80034b8:	f00a fb7c 	bl	800dbb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, GPIO_PIN_RESET);
 80034bc:	2200      	movs	r2, #0
 80034be:	2101      	movs	r1, #1
 80034c0:	4839      	ldr	r0, [pc, #228]	; (80035a8 <MX_GPIO_Init+0x21c>)
 80034c2:	f00a fb77 	bl	800dbb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, VSYNC_FREQ_Pin|LCD_BL_CTRL_Pin|LCD_ON_OFF_Pin, GPIO_PIN_RESET);
 80034c6:	2200      	movs	r2, #0
 80034c8:	f241 0106 	movw	r1, #4102	; 0x1006
 80034cc:	4837      	ldr	r0, [pc, #220]	; (80035ac <MX_GPIO_Init+0x220>)
 80034ce:	f00a fb71 	bl	800dbb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RENDER_TIME_Pin|FRAME_RATE_Pin, GPIO_PIN_RESET);
 80034d2:	2200      	movs	r2, #0
 80034d4:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 80034d8:	4835      	ldr	r0, [pc, #212]	; (80035b0 <MX_GPIO_Init+0x224>)
 80034da:	f00a fb6b 	bl	800dbb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED3_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED3_Pin|LED2_Pin;
 80034de:	f640 0304 	movw	r3, #2052	; 0x804
 80034e2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80034e4:	2301      	movs	r3, #1
 80034e6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034e8:	2300      	movs	r3, #0
 80034ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034ec:	2300      	movs	r3, #0
 80034ee:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80034f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80034f4:	4619      	mov	r1, r3
 80034f6:	482b      	ldr	r0, [pc, #172]	; (80035a4 <MX_GPIO_Init+0x218>)
 80034f8:	f00a f8a2 	bl	800d640 <HAL_GPIO_Init>

  /*Configure GPIO pin : MCU_ACTIVE_Pin */
  GPIO_InitStruct.Pin = MCU_ACTIVE_Pin;
 80034fc:	2301      	movs	r3, #1
 80034fe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003500:	2301      	movs	r3, #1
 8003502:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003504:	2300      	movs	r3, #0
 8003506:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003508:	2300      	movs	r3, #0
 800350a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(MCU_ACTIVE_GPIO_Port, &GPIO_InitStruct);
 800350c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003510:	4619      	mov	r1, r3
 8003512:	4825      	ldr	r0, [pc, #148]	; (80035a8 <MX_GPIO_Init+0x21c>)
 8003514:	f00a f894 	bl	800d640 <HAL_GPIO_Init>

  /*Configure GPIO pins : VSYNC_FREQ_Pin LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = VSYNC_FREQ_Pin|LCD_BL_CTRL_Pin;
 8003518:	f241 0302 	movw	r3, #4098	; 0x1002
 800351c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800351e:	2301      	movs	r3, #1
 8003520:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003522:	2300      	movs	r3, #0
 8003524:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003526:	2300      	movs	r3, #0
 8003528:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800352a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800352e:	4619      	mov	r1, r3
 8003530:	481e      	ldr	r0, [pc, #120]	; (80035ac <MX_GPIO_Init+0x220>)
 8003532:	f00a f885 	bl	800d640 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8003536:	2304      	movs	r3, #4
 8003538:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800353a:	4b1e      	ldr	r3, [pc, #120]	; (80035b4 <MX_GPIO_Init+0x228>)
 800353c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800353e:	2301      	movs	r3, #1
 8003540:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8003542:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003546:	4619      	mov	r1, r3
 8003548:	481b      	ldr	r0, [pc, #108]	; (80035b8 <MX_GPIO_Init+0x22c>)
 800354a:	f00a f879 	bl	800d640 <HAL_GPIO_Init>

  /*Configure GPIO pins : RENDER_TIME_Pin FRAME_RATE_Pin */
  GPIO_InitStruct.Pin = RENDER_TIME_Pin|FRAME_RATE_Pin;
 800354e:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8003552:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003554:	2301      	movs	r3, #1
 8003556:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003558:	2300      	movs	r3, #0
 800355a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800355c:	2300      	movs	r3, #0
 800355e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003560:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003564:	4619      	mov	r1, r3
 8003566:	4812      	ldr	r0, [pc, #72]	; (80035b0 <MX_GPIO_Init+0x224>)
 8003568:	f00a f86a 	bl	800d640 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_ON_OFF_Pin */
  GPIO_InitStruct.Pin = LCD_ON_OFF_Pin;
 800356c:	2304      	movs	r3, #4
 800356e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003570:	2301      	movs	r3, #1
 8003572:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003574:	2301      	movs	r3, #1
 8003576:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003578:	2300      	movs	r3, #0
 800357a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_ON_OFF_GPIO_Port, &GPIO_InitStruct);
 800357c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003580:	4619      	mov	r1, r3
 8003582:	480a      	ldr	r0, [pc, #40]	; (80035ac <MX_GPIO_Init+0x220>)
 8003584:	f00a f85c 	bl	800d640 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 8003588:	2200      	movs	r2, #0
 800358a:	2105      	movs	r1, #5
 800358c:	2008      	movs	r0, #8
 800358e:	f009 fc93 	bl	800ceb8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8003592:	2008      	movs	r0, #8
 8003594:	f009 fcaa 	bl	800ceec <HAL_NVIC_EnableIRQ>

}
 8003598:	bf00      	nop
 800359a:	3738      	adds	r7, #56	; 0x38
 800359c:	46bd      	mov	sp, r7
 800359e:	bd80      	pop	{r7, pc}
 80035a0:	58024400 	.word	0x58024400
 80035a4:	58021800 	.word	0x58021800
 80035a8:	58022000 	.word	0x58022000
 80035ac:	58020000 	.word	0x58020000
 80035b0:	58020400 	.word	0x58020400
 80035b4:	11110000 	.word	0x11110000
 80035b8:	58021c00 	.word	0x58021c00

080035bc <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b082      	sub	sp, #8
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */

  /* Infinite loop */
  for(;;)
  {
    osDelay(100);
 80035c4:	2064      	movs	r0, #100	; 0x64
 80035c6:	f010 ff9d 	bl	8014504 <osDelay>
 80035ca:	e7fb      	b.n	80035c4 <StartDefaultTask+0x8>

080035cc <MPU_Config>:
}

/* MPU Configuration */

void MPU_Config(void)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b084      	sub	sp, #16
 80035d0:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80035d2:	463b      	mov	r3, r7
 80035d4:	2200      	movs	r2, #0
 80035d6:	601a      	str	r2, [r3, #0]
 80035d8:	605a      	str	r2, [r3, #4]
 80035da:	609a      	str	r2, [r3, #8]
 80035dc:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80035de:	f009 fca1 	bl	800cf24 <HAL_MPU_Disable>
  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80035e2:	2301      	movs	r3, #1
 80035e4:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80035e6:	2300      	movs	r3, #0
 80035e8:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x90000000;
 80035ea:	f04f 4310 	mov.w	r3, #2415919104	; 0x90000000
 80035ee:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_256MB;
 80035f0:	231b      	movs	r3, #27
 80035f2:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 80035f4:	2300      	movs	r3, #0
 80035f6:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80035f8:	2300      	movs	r3, #0
 80035fa:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80035fc:	2300      	movs	r3, #0
 80035fe:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8003600:	2301      	movs	r3, #1
 8003602:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8003604:	2300      	movs	r3, #0
 8003606:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8003608:	2300      	movs	r3, #0
 800360a:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800360c:	2300      	movs	r3, #0
 800360e:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8003610:	463b      	mov	r3, r7
 8003612:	4618      	mov	r0, r3
 8003614:	f009 fcbe 	bl	800cf94 <HAL_MPU_ConfigRegion>
  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8003618:	2301      	movs	r3, #1
 800361a:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.Size = MPU_REGION_SIZE_64MB;
 800361c:	2319      	movs	r3, #25
 800361e:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8003620:	2303      	movs	r3, #3
 8003622:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8003624:	2301      	movs	r3, #1
 8003626:	73bb      	strb	r3, [r7, #14]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8003628:	463b      	mov	r3, r7
 800362a:	4618      	mov	r0, r3
 800362c:	f009 fcb2 	bl	800cf94 <HAL_MPU_ConfigRegion>
  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 8003630:	2302      	movs	r3, #2
 8003632:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x24000000;
 8003634:	f04f 5310 	mov.w	r3, #603979776	; 0x24000000
 8003638:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_1MB;
 800363a:	2313      	movs	r3, #19
 800363c:	723b      	strb	r3, [r7, #8]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800363e:	463b      	mov	r3, r7
 8003640:	4618      	mov	r0, r3
 8003642:	f009 fca7 	bl	800cf94 <HAL_MPU_ConfigRegion>
  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER3;
 8003646:	2303      	movs	r3, #3
 8003648:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.Size = MPU_REGION_SIZE_256KB;
 800364a:	2311      	movs	r3, #17
 800364c:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 800364e:	2301      	movs	r3, #1
 8003650:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8003652:	463b      	mov	r3, r7
 8003654:	4618      	mov	r0, r3
 8003656:	f009 fc9d 	bl	800cf94 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800365a:	2004      	movs	r0, #4
 800365c:	f009 fc7a 	bl	800cf54 <HAL_MPU_Enable>

}
 8003660:	bf00      	nop
 8003662:	3710      	adds	r7, #16
 8003664:	46bd      	mov	sp, r7
 8003666:	bd80      	pop	{r7, pc}

08003668 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b082      	sub	sp, #8
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4a04      	ldr	r2, [pc, #16]	; (8003688 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8003676:	4293      	cmp	r3, r2
 8003678:	d101      	bne.n	800367e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800367a:	f007 ff21 	bl	800b4c0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800367e:	bf00      	nop
 8003680:	3708      	adds	r7, #8
 8003682:	46bd      	mov	sp, r7
 8003684:	bd80      	pop	{r7, pc}
 8003686:	bf00      	nop
 8003688:	40001000 	.word	0x40001000

0800368c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800368c:	b480      	push	{r7}
 800368e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003690:	bf00      	nop
 8003692:	46bd      	mov	sp, r7
 8003694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003698:	4770      	bx	lr
	...

0800369c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b082      	sub	sp, #8
 80036a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80036a2:	4b0c      	ldr	r3, [pc, #48]	; (80036d4 <HAL_MspInit+0x38>)
 80036a4:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80036a8:	4a0a      	ldr	r2, [pc, #40]	; (80036d4 <HAL_MspInit+0x38>)
 80036aa:	f043 0302 	orr.w	r3, r3, #2
 80036ae:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 80036b2:	4b08      	ldr	r3, [pc, #32]	; (80036d4 <HAL_MspInit+0x38>)
 80036b4:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80036b8:	f003 0302 	and.w	r3, r3, #2
 80036bc:	607b      	str	r3, [r7, #4]
 80036be:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80036c0:	2200      	movs	r2, #0
 80036c2:	210f      	movs	r1, #15
 80036c4:	f06f 0001 	mvn.w	r0, #1
 80036c8:	f009 fbf6 	bl	800ceb8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80036cc:	bf00      	nop
 80036ce:	3708      	adds	r7, #8
 80036d0:	46bd      	mov	sp, r7
 80036d2:	bd80      	pop	{r7, pc}
 80036d4:	58024400 	.word	0x58024400

080036d8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b08a      	sub	sp, #40	; 0x28
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036e0:	f107 0314 	add.w	r3, r7, #20
 80036e4:	2200      	movs	r2, #0
 80036e6:	601a      	str	r2, [r3, #0]
 80036e8:	605a      	str	r2, [r3, #4]
 80036ea:	609a      	str	r2, [r3, #8]
 80036ec:	60da      	str	r2, [r3, #12]
 80036ee:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4a1c      	ldr	r2, [pc, #112]	; (8003768 <HAL_ADC_MspInit+0x90>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d131      	bne.n	800375e <HAL_ADC_MspInit+0x86>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80036fa:	4b1c      	ldr	r3, [pc, #112]	; (800376c <HAL_ADC_MspInit+0x94>)
 80036fc:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8003700:	4a1a      	ldr	r2, [pc, #104]	; (800376c <HAL_ADC_MspInit+0x94>)
 8003702:	f043 0320 	orr.w	r3, r3, #32
 8003706:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
 800370a:	4b18      	ldr	r3, [pc, #96]	; (800376c <HAL_ADC_MspInit+0x94>)
 800370c:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8003710:	f003 0320 	and.w	r3, r3, #32
 8003714:	613b      	str	r3, [r7, #16]
 8003716:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003718:	4b14      	ldr	r3, [pc, #80]	; (800376c <HAL_ADC_MspInit+0x94>)
 800371a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800371e:	4a13      	ldr	r2, [pc, #76]	; (800376c <HAL_ADC_MspInit+0x94>)
 8003720:	f043 0304 	orr.w	r3, r3, #4
 8003724:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8003728:	4b10      	ldr	r3, [pc, #64]	; (800376c <HAL_ADC_MspInit+0x94>)
 800372a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800372e:	f003 0304 	and.w	r3, r3, #4
 8003732:	60fb      	str	r3, [r7, #12]
 8003734:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC4     ------> ADC1_INP4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003736:	2310      	movs	r3, #16
 8003738:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800373a:	2303      	movs	r3, #3
 800373c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800373e:	2300      	movs	r3, #0
 8003740:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003742:	f107 0314 	add.w	r3, r7, #20
 8003746:	4619      	mov	r1, r3
 8003748:	4809      	ldr	r0, [pc, #36]	; (8003770 <HAL_ADC_MspInit+0x98>)
 800374a:	f009 ff79 	bl	800d640 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 800374e:	2200      	movs	r2, #0
 8003750:	2105      	movs	r1, #5
 8003752:	2012      	movs	r0, #18
 8003754:	f009 fbb0 	bl	800ceb8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8003758:	2012      	movs	r0, #18
 800375a:	f009 fbc7 	bl	800ceec <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800375e:	bf00      	nop
 8003760:	3728      	adds	r7, #40	; 0x28
 8003762:	46bd      	mov	sp, r7
 8003764:	bd80      	pop	{r7, pc}
 8003766:	bf00      	nop
 8003768:	40022000 	.word	0x40022000
 800376c:	58024400 	.word	0x58024400
 8003770:	58020800 	.word	0x58020800

08003774 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8003774:	b480      	push	{r7}
 8003776:	b085      	sub	sp, #20
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4a0b      	ldr	r2, [pc, #44]	; (80037b0 <HAL_CRC_MspInit+0x3c>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d10e      	bne.n	80037a4 <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8003786:	4b0b      	ldr	r3, [pc, #44]	; (80037b4 <HAL_CRC_MspInit+0x40>)
 8003788:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 800378c:	4a09      	ldr	r2, [pc, #36]	; (80037b4 <HAL_CRC_MspInit+0x40>)
 800378e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003792:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
 8003796:	4b07      	ldr	r3, [pc, #28]	; (80037b4 <HAL_CRC_MspInit+0x40>)
 8003798:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 800379c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80037a0:	60fb      	str	r3, [r7, #12]
 80037a2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80037a4:	bf00      	nop
 80037a6:	3714      	adds	r7, #20
 80037a8:	46bd      	mov	sp, r7
 80037aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ae:	4770      	bx	lr
 80037b0:	40023000 	.word	0x40023000
 80037b4:	58024400 	.word	0x58024400

080037b8 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b084      	sub	sp, #16
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4a0e      	ldr	r2, [pc, #56]	; (8003800 <HAL_DMA2D_MspInit+0x48>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d116      	bne.n	80037f8 <HAL_DMA2D_MspInit+0x40>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80037ca:	4b0e      	ldr	r3, [pc, #56]	; (8003804 <HAL_DMA2D_MspInit+0x4c>)
 80037cc:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 80037d0:	4a0c      	ldr	r2, [pc, #48]	; (8003804 <HAL_DMA2D_MspInit+0x4c>)
 80037d2:	f043 0310 	orr.w	r3, r3, #16
 80037d6:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
 80037da:	4b0a      	ldr	r3, [pc, #40]	; (8003804 <HAL_DMA2D_MspInit+0x4c>)
 80037dc:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 80037e0:	f003 0310 	and.w	r3, r3, #16
 80037e4:	60fb      	str	r3, [r7, #12]
 80037e6:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 80037e8:	2200      	movs	r2, #0
 80037ea:	2105      	movs	r1, #5
 80037ec:	205a      	movs	r0, #90	; 0x5a
 80037ee:	f009 fb63 	bl	800ceb8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 80037f2:	205a      	movs	r0, #90	; 0x5a
 80037f4:	f009 fb7a 	bl	800ceec <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 80037f8:	bf00      	nop
 80037fa:	3710      	adds	r7, #16
 80037fc:	46bd      	mov	sp, r7
 80037fe:	bd80      	pop	{r7, pc}
 8003800:	52001000 	.word	0x52001000
 8003804:	58024400 	.word	0x58024400

08003808 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b0b8      	sub	sp, #224	; 0xe0
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003810:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003814:	2200      	movs	r2, #0
 8003816:	601a      	str	r2, [r3, #0]
 8003818:	605a      	str	r2, [r3, #4]
 800381a:	609a      	str	r2, [r3, #8]
 800381c:	60da      	str	r2, [r3, #12]
 800381e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003820:	f107 0314 	add.w	r3, r7, #20
 8003824:	22b8      	movs	r2, #184	; 0xb8
 8003826:	2100      	movs	r1, #0
 8003828:	4618      	mov	r0, r3
 800382a:	f028 f8b1 	bl	802b990 <memset>
  if(hi2c->Instance==I2C4)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4a25      	ldr	r2, [pc, #148]	; (80038c8 <HAL_I2C_MspInit+0xc0>)
 8003834:	4293      	cmp	r3, r2
 8003836:	d142      	bne.n	80038be <HAL_I2C_MspInit+0xb6>
  /* USER CODE BEGIN I2C4_MspInit 0 */

  /* USER CODE END I2C4_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8003838:	2310      	movs	r3, #16
 800383a:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 800383c:	2300      	movs	r3, #0
 800383e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003842:	f107 0314 	add.w	r3, r7, #20
 8003846:	4618      	mov	r0, r3
 8003848:	f00d fb56 	bl	8010ef8 <HAL_RCCEx_PeriphCLKConfig>
 800384c:	4603      	mov	r3, r0
 800384e:	2b00      	cmp	r3, #0
 8003850:	d001      	beq.n	8003856 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8003852:	f7ff ff1b 	bl	800368c <Error_Handler>
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003856:	4b1d      	ldr	r3, [pc, #116]	; (80038cc <HAL_I2C_MspInit+0xc4>)
 8003858:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800385c:	4a1b      	ldr	r2, [pc, #108]	; (80038cc <HAL_I2C_MspInit+0xc4>)
 800385e:	f043 0308 	orr.w	r3, r3, #8
 8003862:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8003866:	4b19      	ldr	r3, [pc, #100]	; (80038cc <HAL_I2C_MspInit+0xc4>)
 8003868:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800386c:	f003 0308 	and.w	r3, r3, #8
 8003870:	613b      	str	r3, [r7, #16]
 8003872:	693b      	ldr	r3, [r7, #16]
    /**I2C4 GPIO Configuration
    PD13     ------> I2C4_SDA
    PD12     ------> I2C4_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_12;
 8003874:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8003878:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800387c:	2312      	movs	r3, #18
 800387e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003882:	2301      	movs	r3, #1
 8003884:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003888:	2302      	movs	r3, #2
 800388a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 800388e:	2304      	movs	r3, #4
 8003890:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003894:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003898:	4619      	mov	r1, r3
 800389a:	480d      	ldr	r0, [pc, #52]	; (80038d0 <HAL_I2C_MspInit+0xc8>)
 800389c:	f009 fed0 	bl	800d640 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C4_CLK_ENABLE();
 80038a0:	4b0a      	ldr	r3, [pc, #40]	; (80038cc <HAL_I2C_MspInit+0xc4>)
 80038a2:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80038a6:	4a09      	ldr	r2, [pc, #36]	; (80038cc <HAL_I2C_MspInit+0xc4>)
 80038a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80038ac:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 80038b0:	4b06      	ldr	r3, [pc, #24]	; (80038cc <HAL_I2C_MspInit+0xc4>)
 80038b2:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80038b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038ba:	60fb      	str	r3, [r7, #12]
 80038bc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 80038be:	bf00      	nop
 80038c0:	37e0      	adds	r7, #224	; 0xe0
 80038c2:	46bd      	mov	sp, r7
 80038c4:	bd80      	pop	{r7, pc}
 80038c6:	bf00      	nop
 80038c8:	58001c00 	.word	0x58001c00
 80038cc:	58024400 	.word	0x58024400
 80038d0:	58020c00 	.word	0x58020c00

080038d4 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b082      	sub	sp, #8
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C4)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	4a0c      	ldr	r2, [pc, #48]	; (8003914 <HAL_I2C_MspDeInit+0x40>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d111      	bne.n	800390a <HAL_I2C_MspDeInit+0x36>
  {
  /* USER CODE BEGIN I2C4_MspDeInit 0 */

  /* USER CODE END I2C4_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C4_CLK_DISABLE();
 80038e6:	4b0c      	ldr	r3, [pc, #48]	; (8003918 <HAL_I2C_MspDeInit+0x44>)
 80038e8:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80038ec:	4a0a      	ldr	r2, [pc, #40]	; (8003918 <HAL_I2C_MspDeInit+0x44>)
 80038ee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80038f2:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154

    /**I2C4 GPIO Configuration
    PD13     ------> I2C4_SDA
    PD12     ------> I2C4_SCL
    */
    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_13);
 80038f6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80038fa:	4808      	ldr	r0, [pc, #32]	; (800391c <HAL_I2C_MspDeInit+0x48>)
 80038fc:	f00a f850 	bl	800d9a0 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_12);
 8003900:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003904:	4805      	ldr	r0, [pc, #20]	; (800391c <HAL_I2C_MspDeInit+0x48>)
 8003906:	f00a f84b 	bl	800d9a0 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C4_MspDeInit 1 */

  /* USER CODE END I2C4_MspDeInit 1 */
  }

}
 800390a:	bf00      	nop
 800390c:	3708      	adds	r7, #8
 800390e:	46bd      	mov	sp, r7
 8003910:	bd80      	pop	{r7, pc}
 8003912:	bf00      	nop
 8003914:	58001c00 	.word	0x58001c00
 8003918:	58024400 	.word	0x58024400
 800391c:	58020c00 	.word	0x58020c00

08003920 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b0ba      	sub	sp, #232	; 0xe8
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003928:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800392c:	2200      	movs	r2, #0
 800392e:	601a      	str	r2, [r3, #0]
 8003930:	605a      	str	r2, [r3, #4]
 8003932:	609a      	str	r2, [r3, #8]
 8003934:	60da      	str	r2, [r3, #12]
 8003936:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003938:	f107 031c 	add.w	r3, r7, #28
 800393c:	22b8      	movs	r2, #184	; 0xb8
 800393e:	2100      	movs	r1, #0
 8003940:	4618      	mov	r0, r3
 8003942:	f028 f825 	bl	802b990 <memset>
  if(hltdc->Instance==LTDC)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4a56      	ldr	r2, [pc, #344]	; (8003aa4 <HAL_LTDC_MspInit+0x184>)
 800394c:	4293      	cmp	r3, r2
 800394e:	f040 80a4 	bne.w	8003a9a <HAL_LTDC_MspInit+0x17a>
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8003952:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8003956:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL3.PLL3M = 24;
 8003958:	2318      	movs	r3, #24
 800395a:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3N = 201;
 800395c:	23c9      	movs	r3, #201	; 0xc9
 800395e:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8003960:	2302      	movs	r3, #2
 8003962:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8003964:	2302      	movs	r3, #2
 8003966:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.PLL3.PLL3R = 21;
 8003968:	2315      	movs	r3, #21
 800396a:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_0;
 800396c:	2300      	movs	r3, #0
 800396e:	657b      	str	r3, [r7, #84]	; 0x54
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOMEDIUM;
 8003970:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003974:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInitStruct.PLL3.PLL3FRACN = 5462;
 8003976:	f241 5356 	movw	r3, #5462	; 0x1556
 800397a:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800397c:	f107 031c 	add.w	r3, r7, #28
 8003980:	4618      	mov	r0, r3
 8003982:	f00d fab9 	bl	8010ef8 <HAL_RCCEx_PeriphCLKConfig>
 8003986:	4603      	mov	r3, r0
 8003988:	2b00      	cmp	r3, #0
 800398a:	d001      	beq.n	8003990 <HAL_LTDC_MspInit+0x70>
    {
      Error_Handler();
 800398c:	f7ff fe7e 	bl	800368c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8003990:	4b45      	ldr	r3, [pc, #276]	; (8003aa8 <HAL_LTDC_MspInit+0x188>)
 8003992:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 8003996:	4a44      	ldr	r2, [pc, #272]	; (8003aa8 <HAL_LTDC_MspInit+0x188>)
 8003998:	f043 0308 	orr.w	r3, r3, #8
 800399c:	f8c2 3144 	str.w	r3, [r2, #324]	; 0x144
 80039a0:	4b41      	ldr	r3, [pc, #260]	; (8003aa8 <HAL_LTDC_MspInit+0x188>)
 80039a2:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 80039a6:	f003 0308 	and.w	r3, r3, #8
 80039aa:	61bb      	str	r3, [r7, #24]
 80039ac:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOK_CLK_ENABLE();
 80039ae:	4b3e      	ldr	r3, [pc, #248]	; (8003aa8 <HAL_LTDC_MspInit+0x188>)
 80039b0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80039b4:	4a3c      	ldr	r2, [pc, #240]	; (8003aa8 <HAL_LTDC_MspInit+0x188>)
 80039b6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80039ba:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80039be:	4b3a      	ldr	r3, [pc, #232]	; (8003aa8 <HAL_LTDC_MspInit+0x188>)
 80039c0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80039c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039c8:	617b      	str	r3, [r7, #20]
 80039ca:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 80039cc:	4b36      	ldr	r3, [pc, #216]	; (8003aa8 <HAL_LTDC_MspInit+0x188>)
 80039ce:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80039d2:	4a35      	ldr	r2, [pc, #212]	; (8003aa8 <HAL_LTDC_MspInit+0x188>)
 80039d4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80039d8:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80039dc:	4b32      	ldr	r3, [pc, #200]	; (8003aa8 <HAL_LTDC_MspInit+0x188>)
 80039de:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80039e2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80039e6:	613b      	str	r3, [r7, #16]
 80039e8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80039ea:	4b2f      	ldr	r3, [pc, #188]	; (8003aa8 <HAL_LTDC_MspInit+0x188>)
 80039ec:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80039f0:	4a2d      	ldr	r2, [pc, #180]	; (8003aa8 <HAL_LTDC_MspInit+0x188>)
 80039f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039f6:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80039fa:	4b2b      	ldr	r3, [pc, #172]	; (8003aa8 <HAL_LTDC_MspInit+0x188>)
 80039fc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8003a00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a04:	60fb      	str	r3, [r7, #12]
 8003a06:	68fb      	ldr	r3, [r7, #12]
    PJ1     ------> LTDC_R2
    PJ4     ------> LTDC_R5
    PJ2     ------> LTDC_R3
    PJ3     ------> LTDC_R4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_3|GPIO_PIN_4
 8003a08:	23ff      	movs	r3, #255	; 0xff
 8003a0a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
                          |GPIO_PIN_7|GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a0e:	2302      	movs	r3, #2
 8003a10:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a14:	2300      	movs	r3, #0
 8003a16:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003a20:	230e      	movs	r3, #14
 8003a22:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8003a26:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003a2a:	4619      	mov	r1, r3
 8003a2c:	481f      	ldr	r0, [pc, #124]	; (8003aac <HAL_LTDC_MspInit+0x18c>)
 8003a2e:	f009 fe07 	bl	800d640 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_12
 8003a32:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003a36:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
                          |GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_8
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_0|GPIO_PIN_5
                          |GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_2|GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a3a:	2302      	movs	r3, #2
 8003a3c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a40:	2300      	movs	r3, #0
 8003a42:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a46:	2300      	movs	r3, #0
 8003a48:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003a4c:	230e      	movs	r3, #14
 8003a4e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8003a52:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003a56:	4619      	mov	r1, r3
 8003a58:	4815      	ldr	r0, [pc, #84]	; (8003ab0 <HAL_LTDC_MspInit+0x190>)
 8003a5a:	f009 fdf1 	bl	800d640 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_15;
 8003a5e:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8003a62:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a66:	2302      	movs	r3, #2
 8003a68:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a72:	2300      	movs	r3, #0
 8003a74:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003a78:	230e      	movs	r3, #14
 8003a7a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8003a7e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003a82:	4619      	mov	r1, r3
 8003a84:	480b      	ldr	r0, [pc, #44]	; (8003ab4 <HAL_LTDC_MspInit+0x194>)
 8003a86:	f009 fddb 	bl	800d640 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	2105      	movs	r1, #5
 8003a8e:	2058      	movs	r0, #88	; 0x58
 8003a90:	f009 fa12 	bl	800ceb8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8003a94:	2058      	movs	r0, #88	; 0x58
 8003a96:	f009 fa29 	bl	800ceec <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8003a9a:	bf00      	nop
 8003a9c:	37e8      	adds	r7, #232	; 0xe8
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	bd80      	pop	{r7, pc}
 8003aa2:	bf00      	nop
 8003aa4:	50001000 	.word	0x50001000
 8003aa8:	58024400 	.word	0x58024400
 8003aac:	58022800 	.word	0x58022800
 8003ab0:	58022400 	.word	0x58022400
 8003ab4:	58022000 	.word	0x58022000

08003ab8 <HAL_OSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspInit(OSPI_HandleTypeDef* hospi)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b084      	sub	sp, #16
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
  if(hospi->Instance==OCTOSPI1)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	4a16      	ldr	r2, [pc, #88]	; (8003b20 <HAL_OSPI_MspInit+0x68>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d125      	bne.n	8003b16 <HAL_OSPI_MspInit+0x5e>
  {
  /* USER CODE BEGIN OCTOSPI1_MspInit 0 */

  /* USER CODE END OCTOSPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_OCTOSPIM_CLK_ENABLE();
 8003aca:	4b16      	ldr	r3, [pc, #88]	; (8003b24 <HAL_OSPI_MspInit+0x6c>)
 8003acc:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8003ad0:	4a14      	ldr	r2, [pc, #80]	; (8003b24 <HAL_OSPI_MspInit+0x6c>)
 8003ad2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003ad6:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
 8003ada:	4b12      	ldr	r3, [pc, #72]	; (8003b24 <HAL_OSPI_MspInit+0x6c>)
 8003adc:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8003ae0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ae4:	60fb      	str	r3, [r7, #12]
 8003ae6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_OSPI1_CLK_ENABLE();
 8003ae8:	4b0e      	ldr	r3, [pc, #56]	; (8003b24 <HAL_OSPI_MspInit+0x6c>)
 8003aea:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8003aee:	4a0d      	ldr	r2, [pc, #52]	; (8003b24 <HAL_OSPI_MspInit+0x6c>)
 8003af0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003af4:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
 8003af8:	4b0a      	ldr	r3, [pc, #40]	; (8003b24 <HAL_OSPI_MspInit+0x6c>)
 8003afa:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8003afe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b02:	60bb      	str	r3, [r7, #8]
 8003b04:	68bb      	ldr	r3, [r7, #8]
    /* OCTOSPI1 interrupt Init */
    HAL_NVIC_SetPriority(OCTOSPI1_IRQn, 5, 0);
 8003b06:	2200      	movs	r2, #0
 8003b08:	2105      	movs	r1, #5
 8003b0a:	205c      	movs	r0, #92	; 0x5c
 8003b0c:	f009 f9d4 	bl	800ceb8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OCTOSPI1_IRQn);
 8003b10:	205c      	movs	r0, #92	; 0x5c
 8003b12:	f009 f9eb 	bl	800ceec <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN OCTOSPI1_MspInit 1 */

  /* USER CODE END OCTOSPI1_MspInit 1 */
  }

}
 8003b16:	bf00      	nop
 8003b18:	3710      	adds	r7, #16
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	bd80      	pop	{r7, pc}
 8003b1e:	bf00      	nop
 8003b20:	52005000 	.word	0x52005000
 8003b24:	58024400 	.word	0x58024400

08003b28 <HAL_OSPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspDeInit(OSPI_HandleTypeDef* hospi)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b082      	sub	sp, #8
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
  if(hospi->Instance==OCTOSPI1)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4a0c      	ldr	r2, [pc, #48]	; (8003b68 <HAL_OSPI_MspDeInit+0x40>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d112      	bne.n	8003b60 <HAL_OSPI_MspDeInit+0x38>
  {
  /* USER CODE BEGIN OCTOSPI1_MspDeInit 0 */

  /* USER CODE END OCTOSPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_OCTOSPIM_CLK_DISABLE();
 8003b3a:	4b0c      	ldr	r3, [pc, #48]	; (8003b6c <HAL_OSPI_MspDeInit+0x44>)
 8003b3c:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8003b40:	4a0a      	ldr	r2, [pc, #40]	; (8003b6c <HAL_OSPI_MspDeInit+0x44>)
 8003b42:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003b46:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
    __HAL_RCC_OSPI1_CLK_DISABLE();
 8003b4a:	4b08      	ldr	r3, [pc, #32]	; (8003b6c <HAL_OSPI_MspDeInit+0x44>)
 8003b4c:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8003b50:	4a06      	ldr	r2, [pc, #24]	; (8003b6c <HAL_OSPI_MspDeInit+0x44>)
 8003b52:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003b56:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134

    /* OCTOSPI1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(OCTOSPI1_IRQn);
 8003b5a:	205c      	movs	r0, #92	; 0x5c
 8003b5c:	f009 f9d4 	bl	800cf08 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN OCTOSPI1_MspDeInit 1 */

  /* USER CODE END OCTOSPI1_MspDeInit 1 */
  }

}
 8003b60:	bf00      	nop
 8003b62:	3708      	adds	r7, #8
 8003b64:	46bd      	mov	sp, r7
 8003b66:	bd80      	pop	{r7, pc}
 8003b68:	52005000 	.word	0x52005000
 8003b6c:	58024400 	.word	0x58024400

08003b70 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003b70:	b480      	push	{r7}
 8003b72:	b085      	sub	sp, #20
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4a0b      	ldr	r2, [pc, #44]	; (8003bac <HAL_TIM_PWM_MspInit+0x3c>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d10e      	bne.n	8003ba0 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003b82:	4b0b      	ldr	r3, [pc, #44]	; (8003bb0 <HAL_TIM_PWM_MspInit+0x40>)
 8003b84:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8003b88:	4a09      	ldr	r2, [pc, #36]	; (8003bb0 <HAL_TIM_PWM_MspInit+0x40>)
 8003b8a:	f043 0301 	orr.w	r3, r3, #1
 8003b8e:	f8c2 3150 	str.w	r3, [r2, #336]	; 0x150
 8003b92:	4b07      	ldr	r3, [pc, #28]	; (8003bb0 <HAL_TIM_PWM_MspInit+0x40>)
 8003b94:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8003b98:	f003 0301 	and.w	r3, r3, #1
 8003b9c:	60fb      	str	r3, [r7, #12]
 8003b9e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8003ba0:	bf00      	nop
 8003ba2:	3714      	adds	r7, #20
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003baa:	4770      	bx	lr
 8003bac:	40010000 	.word	0x40010000
 8003bb0:	58024400 	.word	0x58024400

08003bb4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b088      	sub	sp, #32
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003bbc:	f107 030c 	add.w	r3, r7, #12
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	601a      	str	r2, [r3, #0]
 8003bc4:	605a      	str	r2, [r3, #4]
 8003bc6:	609a      	str	r2, [r3, #8]
 8003bc8:	60da      	str	r2, [r3, #12]
 8003bca:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4a13      	ldr	r2, [pc, #76]	; (8003c20 <HAL_TIM_MspPostInit+0x6c>)
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d11f      	bne.n	8003c16 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003bd6:	4b13      	ldr	r3, [pc, #76]	; (8003c24 <HAL_TIM_MspPostInit+0x70>)
 8003bd8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8003bdc:	4a11      	ldr	r2, [pc, #68]	; (8003c24 <HAL_TIM_MspPostInit+0x70>)
 8003bde:	f043 0301 	orr.w	r3, r3, #1
 8003be2:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8003be6:	4b0f      	ldr	r3, [pc, #60]	; (8003c24 <HAL_TIM_MspPostInit+0x70>)
 8003be8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8003bec:	f003 0301 	and.w	r3, r3, #1
 8003bf0:	60bb      	str	r3, [r7, #8]
 8003bf2:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003bf4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003bf8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bfa:	2302      	movs	r3, #2
 8003bfc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bfe:	2300      	movs	r3, #0
 8003c00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c02:	2300      	movs	r3, #0
 8003c04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003c06:	2301      	movs	r3, #1
 8003c08:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c0a:	f107 030c 	add.w	r3, r7, #12
 8003c0e:	4619      	mov	r1, r3
 8003c10:	4805      	ldr	r0, [pc, #20]	; (8003c28 <HAL_TIM_MspPostInit+0x74>)
 8003c12:	f009 fd15 	bl	800d640 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8003c16:	bf00      	nop
 8003c18:	3720      	adds	r7, #32
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	bd80      	pop	{r7, pc}
 8003c1e:	bf00      	nop
 8003c20:	40010000 	.word	0x40010000
 8003c24:	58024400 	.word	0x58024400
 8003c28:	58020000 	.word	0x58020000

08003c2c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b090      	sub	sp, #64	; 0x40
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2b0f      	cmp	r3, #15
 8003c38:	d827      	bhi.n	8003c8a <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	6879      	ldr	r1, [r7, #4]
 8003c3e:	2036      	movs	r0, #54	; 0x36
 8003c40:	f009 f93a 	bl	800ceb8 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003c44:	2036      	movs	r0, #54	; 0x36
 8003c46:	f009 f951 	bl	800ceec <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8003c4a:	4a29      	ldr	r2, [pc, #164]	; (8003cf0 <HAL_InitTick+0xc4>)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8003c50:	4b28      	ldr	r3, [pc, #160]	; (8003cf4 <HAL_InitTick+0xc8>)
 8003c52:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8003c56:	4a27      	ldr	r2, [pc, #156]	; (8003cf4 <HAL_InitTick+0xc8>)
 8003c58:	f043 0310 	orr.w	r3, r3, #16
 8003c5c:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8003c60:	4b24      	ldr	r3, [pc, #144]	; (8003cf4 <HAL_InitTick+0xc8>)
 8003c62:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8003c66:	f003 0310 	and.w	r3, r3, #16
 8003c6a:	60fb      	str	r3, [r7, #12]
 8003c6c:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003c6e:	f107 0210 	add.w	r2, r7, #16
 8003c72:	f107 0314 	add.w	r3, r7, #20
 8003c76:	4611      	mov	r1, r2
 8003c78:	4618      	mov	r0, r3
 8003c7a:	f00d f8fb 	bl	8010e74 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8003c7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c80:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8003c82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d106      	bne.n	8003c96 <HAL_InitTick+0x6a>
 8003c88:	e001      	b.n	8003c8e <HAL_InitTick+0x62>
    return HAL_ERROR;
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	e02b      	b.n	8003ce6 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8003c8e:	f00d f8c5 	bl	8010e1c <HAL_RCC_GetPCLK1Freq>
 8003c92:	63f8      	str	r0, [r7, #60]	; 0x3c
 8003c94:	e004      	b.n	8003ca0 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8003c96:	f00d f8c1 	bl	8010e1c <HAL_RCC_GetPCLK1Freq>
 8003c9a:	4603      	mov	r3, r0
 8003c9c:	005b      	lsls	r3, r3, #1
 8003c9e:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003ca0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ca2:	4a15      	ldr	r2, [pc, #84]	; (8003cf8 <HAL_InitTick+0xcc>)
 8003ca4:	fba2 2303 	umull	r2, r3, r2, r3
 8003ca8:	0c9b      	lsrs	r3, r3, #18
 8003caa:	3b01      	subs	r3, #1
 8003cac:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8003cae:	4b13      	ldr	r3, [pc, #76]	; (8003cfc <HAL_InitTick+0xd0>)
 8003cb0:	4a13      	ldr	r2, [pc, #76]	; (8003d00 <HAL_InitTick+0xd4>)
 8003cb2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8003cb4:	4b11      	ldr	r3, [pc, #68]	; (8003cfc <HAL_InitTick+0xd0>)
 8003cb6:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003cba:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8003cbc:	4a0f      	ldr	r2, [pc, #60]	; (8003cfc <HAL_InitTick+0xd0>)
 8003cbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cc0:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8003cc2:	4b0e      	ldr	r3, [pc, #56]	; (8003cfc <HAL_InitTick+0xd0>)
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003cc8:	4b0c      	ldr	r3, [pc, #48]	; (8003cfc <HAL_InitTick+0xd0>)
 8003cca:	2200      	movs	r2, #0
 8003ccc:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8003cce:	480b      	ldr	r0, [pc, #44]	; (8003cfc <HAL_InitTick+0xd0>)
 8003cd0:	f00f f9bc 	bl	801304c <HAL_TIM_Base_Init>
 8003cd4:	4603      	mov	r3, r0
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d104      	bne.n	8003ce4 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8003cda:	4808      	ldr	r0, [pc, #32]	; (8003cfc <HAL_InitTick+0xd0>)
 8003cdc:	f00f fa18 	bl	8013110 <HAL_TIM_Base_Start_IT>
 8003ce0:	4603      	mov	r3, r0
 8003ce2:	e000      	b.n	8003ce6 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8003ce4:	2301      	movs	r3, #1
}
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	3740      	adds	r7, #64	; 0x40
 8003cea:	46bd      	mov	sp, r7
 8003cec:	bd80      	pop	{r7, pc}
 8003cee:	bf00      	nop
 8003cf0:	24000044 	.word	0x24000044
 8003cf4:	58024400 	.word	0x58024400
 8003cf8:	431bde83 	.word	0x431bde83
 8003cfc:	2400cdf4 	.word	0x2400cdf4
 8003d00:	40001000 	.word	0x40001000

08003d04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003d04:	b480      	push	{r7}
 8003d06:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003d08:	bf00      	nop
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d10:	4770      	bx	lr

08003d12 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003d12:	b480      	push	{r7}
 8003d14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003d16:	e7fe      	b.n	8003d16 <HardFault_Handler+0x4>

08003d18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003d18:	b480      	push	{r7}
 8003d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003d1c:	e7fe      	b.n	8003d1c <MemManage_Handler+0x4>

08003d1e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003d1e:	b480      	push	{r7}
 8003d20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003d22:	e7fe      	b.n	8003d22 <BusFault_Handler+0x4>

08003d24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003d24:	b480      	push	{r7}
 8003d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003d28:	e7fe      	b.n	8003d28 <UsageFault_Handler+0x4>

08003d2a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003d2a:	b480      	push	{r7}
 8003d2c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003d2e:	bf00      	nop
 8003d30:	46bd      	mov	sp, r7
 8003d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d36:	4770      	bx	lr

08003d38 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8003d3c:	2004      	movs	r0, #4
 8003d3e:	f009 ff6c 	bl	800dc1a <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8003d42:	bf00      	nop
 8003d44:	bd80      	pop	{r7, pc}
	...

08003d48 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8003d4c:	4802      	ldr	r0, [pc, #8]	; (8003d58 <ADC_IRQHandler+0x10>)
 8003d4e:	f008 f87d 	bl	800be4c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8003d52:	bf00      	nop
 8003d54:	bd80      	pop	{r7, pc}
 8003d56:	bf00      	nop
 8003d58:	2400cd38 	.word	0x2400cd38

08003d5c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003d60:	4802      	ldr	r0, [pc, #8]	; (8003d6c <TIM6_DAC_IRQHandler+0x10>)
 8003d62:	f00f fba5 	bl	80134b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003d66:	bf00      	nop
 8003d68:	bd80      	pop	{r7, pc}
 8003d6a:	bf00      	nop
 8003d6c:	2400cdf4 	.word	0x2400cdf4

08003d70 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8003d74:	4802      	ldr	r0, [pc, #8]	; (8003d80 <LTDC_IRQHandler+0x10>)
 8003d76:	f00a fe01 	bl	800e97c <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8003d7a:	bf00      	nop
 8003d7c:	bd80      	pop	{r7, pc}
 8003d7e:	bf00      	nop
 8003d80:	2400cbb8 	.word	0x2400cbb8

08003d84 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8003d88:	4802      	ldr	r0, [pc, #8]	; (8003d94 <DMA2D_IRQHandler+0x10>)
 8003d8a:	f009 fa95 	bl	800d2b8 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8003d8e:	bf00      	nop
 8003d90:	bd80      	pop	{r7, pc}
 8003d92:	bf00      	nop
 8003d94:	2400cc60 	.word	0x2400cc60

08003d98 <OCTOSPI1_IRQHandler>:

/**
  * @brief This function handles OCTOSPI1 global interrupt.
  */
void OCTOSPI1_IRQHandler(void)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OCTOSPI1_IRQn 0 */

  /* USER CODE END OCTOSPI1_IRQn 0 */
  HAL_OSPI_IRQHandler(&hospi1);
 8003d9c:	4802      	ldr	r0, [pc, #8]	; (8003da8 <OCTOSPI1_IRQHandler+0x10>)
 8003d9e:	f00b fa1f 	bl	800f1e0 <HAL_OSPI_IRQHandler>
  /* USER CODE BEGIN OCTOSPI1_IRQn 1 */

  /* USER CODE END OCTOSPI1_IRQn 1 */
}
 8003da2:	bf00      	nop
 8003da4:	bd80      	pop	{r7, pc}
 8003da6:	bf00      	nop
 8003da8:	2400cb58 	.word	0x2400cb58

08003dac <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003dac:	b480      	push	{r7}
 8003dae:	af00      	add	r7, sp, #0
	return 1;
 8003db0:	2301      	movs	r3, #1
}
 8003db2:	4618      	mov	r0, r3
 8003db4:	46bd      	mov	sp, r7
 8003db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dba:	4770      	bx	lr

08003dbc <_kill>:

int _kill(int pid, int sig)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b082      	sub	sp, #8
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
 8003dc4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003dc6:	f027 fd89 	bl	802b8dc <__errno>
 8003dca:	4603      	mov	r3, r0
 8003dcc:	2216      	movs	r2, #22
 8003dce:	601a      	str	r2, [r3, #0]
	return -1;
 8003dd0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	3708      	adds	r7, #8
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	bd80      	pop	{r7, pc}

08003ddc <_exit>:

void _exit (int status)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b082      	sub	sp, #8
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003de4:	f04f 31ff 	mov.w	r1, #4294967295
 8003de8:	6878      	ldr	r0, [r7, #4]
 8003dea:	f7ff ffe7 	bl	8003dbc <_kill>
	while (1) {}		/* Make sure we hang here */
 8003dee:	e7fe      	b.n	8003dee <_exit+0x12>

08003df0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b086      	sub	sp, #24
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	60f8      	str	r0, [r7, #12]
 8003df8:	60b9      	str	r1, [r7, #8]
 8003dfa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	617b      	str	r3, [r7, #20]
 8003e00:	e00a      	b.n	8003e18 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003e02:	f3af 8000 	nop.w
 8003e06:	4601      	mov	r1, r0
 8003e08:	68bb      	ldr	r3, [r7, #8]
 8003e0a:	1c5a      	adds	r2, r3, #1
 8003e0c:	60ba      	str	r2, [r7, #8]
 8003e0e:	b2ca      	uxtb	r2, r1
 8003e10:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003e12:	697b      	ldr	r3, [r7, #20]
 8003e14:	3301      	adds	r3, #1
 8003e16:	617b      	str	r3, [r7, #20]
 8003e18:	697a      	ldr	r2, [r7, #20]
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	429a      	cmp	r2, r3
 8003e1e:	dbf0      	blt.n	8003e02 <_read+0x12>
	}

return len;
 8003e20:	687b      	ldr	r3, [r7, #4]
}
 8003e22:	4618      	mov	r0, r3
 8003e24:	3718      	adds	r7, #24
 8003e26:	46bd      	mov	sp, r7
 8003e28:	bd80      	pop	{r7, pc}

08003e2a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003e2a:	b580      	push	{r7, lr}
 8003e2c:	b086      	sub	sp, #24
 8003e2e:	af00      	add	r7, sp, #0
 8003e30:	60f8      	str	r0, [r7, #12]
 8003e32:	60b9      	str	r1, [r7, #8]
 8003e34:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003e36:	2300      	movs	r3, #0
 8003e38:	617b      	str	r3, [r7, #20]
 8003e3a:	e009      	b.n	8003e50 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003e3c:	68bb      	ldr	r3, [r7, #8]
 8003e3e:	1c5a      	adds	r2, r3, #1
 8003e40:	60ba      	str	r2, [r7, #8]
 8003e42:	781b      	ldrb	r3, [r3, #0]
 8003e44:	4618      	mov	r0, r3
 8003e46:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003e4a:	697b      	ldr	r3, [r7, #20]
 8003e4c:	3301      	adds	r3, #1
 8003e4e:	617b      	str	r3, [r7, #20]
 8003e50:	697a      	ldr	r2, [r7, #20]
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	429a      	cmp	r2, r3
 8003e56:	dbf1      	blt.n	8003e3c <_write+0x12>
	}
	return len;
 8003e58:	687b      	ldr	r3, [r7, #4]
}
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	3718      	adds	r7, #24
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	bd80      	pop	{r7, pc}

08003e62 <_close>:

int _close(int file)
{
 8003e62:	b480      	push	{r7}
 8003e64:	b083      	sub	sp, #12
 8003e66:	af00      	add	r7, sp, #0
 8003e68:	6078      	str	r0, [r7, #4]
	return -1;
 8003e6a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003e6e:	4618      	mov	r0, r3
 8003e70:	370c      	adds	r7, #12
 8003e72:	46bd      	mov	sp, r7
 8003e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e78:	4770      	bx	lr

08003e7a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003e7a:	b480      	push	{r7}
 8003e7c:	b083      	sub	sp, #12
 8003e7e:	af00      	add	r7, sp, #0
 8003e80:	6078      	str	r0, [r7, #4]
 8003e82:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003e8a:	605a      	str	r2, [r3, #4]
	return 0;
 8003e8c:	2300      	movs	r3, #0
}
 8003e8e:	4618      	mov	r0, r3
 8003e90:	370c      	adds	r7, #12
 8003e92:	46bd      	mov	sp, r7
 8003e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e98:	4770      	bx	lr

08003e9a <_isatty>:

int _isatty(int file)
{
 8003e9a:	b480      	push	{r7}
 8003e9c:	b083      	sub	sp, #12
 8003e9e:	af00      	add	r7, sp, #0
 8003ea0:	6078      	str	r0, [r7, #4]
	return 1;
 8003ea2:	2301      	movs	r3, #1
}
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	370c      	adds	r7, #12
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eae:	4770      	bx	lr

08003eb0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003eb0:	b480      	push	{r7}
 8003eb2:	b085      	sub	sp, #20
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	60f8      	str	r0, [r7, #12]
 8003eb8:	60b9      	str	r1, [r7, #8]
 8003eba:	607a      	str	r2, [r7, #4]
	return 0;
 8003ebc:	2300      	movs	r3, #0
}
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	3714      	adds	r7, #20
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec8:	4770      	bx	lr
	...

08003ecc <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b084      	sub	sp, #16
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8003ed4:	4b11      	ldr	r3, [pc, #68]	; (8003f1c <_sbrk+0x50>)
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d102      	bne.n	8003ee2 <_sbrk+0x16>
		heap_end = &end;
 8003edc:	4b0f      	ldr	r3, [pc, #60]	; (8003f1c <_sbrk+0x50>)
 8003ede:	4a10      	ldr	r2, [pc, #64]	; (8003f20 <_sbrk+0x54>)
 8003ee0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8003ee2:	4b0e      	ldr	r3, [pc, #56]	; (8003f1c <_sbrk+0x50>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8003ee8:	4b0c      	ldr	r3, [pc, #48]	; (8003f1c <_sbrk+0x50>)
 8003eea:	681a      	ldr	r2, [r3, #0]
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	4413      	add	r3, r2
 8003ef0:	466a      	mov	r2, sp
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d907      	bls.n	8003f06 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8003ef6:	f027 fcf1 	bl	802b8dc <__errno>
 8003efa:	4603      	mov	r3, r0
 8003efc:	220c      	movs	r2, #12
 8003efe:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8003f00:	f04f 33ff 	mov.w	r3, #4294967295
 8003f04:	e006      	b.n	8003f14 <_sbrk+0x48>
	}

	heap_end += incr;
 8003f06:	4b05      	ldr	r3, [pc, #20]	; (8003f1c <_sbrk+0x50>)
 8003f08:	681a      	ldr	r2, [r3, #0]
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	4413      	add	r3, r2
 8003f0e:	4a03      	ldr	r2, [pc, #12]	; (8003f1c <_sbrk+0x50>)
 8003f10:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8003f12:	68fb      	ldr	r3, [r7, #12]
}
 8003f14:	4618      	mov	r0, r3
 8003f16:	3710      	adds	r7, #16
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	bd80      	pop	{r7, pc}
 8003f1c:	240030a4 	.word	0x240030a4
 8003f20:	2400cf48 	.word	0x2400cf48

08003f24 <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/ApplicationFontProvider.hpp>
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b082      	sub	sp, #8
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
 8003f2c:	460b      	mov	r3, r1
 8003f2e:	807b      	strh	r3, [r7, #2]
    switch (typography)
 8003f30:	887b      	ldrh	r3, [r7, #2]
 8003f32:	2b02      	cmp	r3, #2
 8003f34:	d010      	beq.n	8003f58 <_ZN23ApplicationFontProvider7getFontEt+0x34>
 8003f36:	2b02      	cmp	r3, #2
 8003f38:	dc13      	bgt.n	8003f62 <_ZN23ApplicationFontProvider7getFontEt+0x3e>
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d002      	beq.n	8003f44 <_ZN23ApplicationFontProvider7getFontEt+0x20>
 8003f3e:	2b01      	cmp	r3, #1
 8003f40:	d005      	beq.n	8003f4e <_ZN23ApplicationFontProvider7getFontEt+0x2a>
 8003f42:	e00e      	b.n	8003f62 <_ZN23ApplicationFontProvider7getFontEt+0x3e>
    {
    case Typography::DEFAULT:
        // verdana_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 8003f44:	f004 fa6e 	bl	8008424 <_ZN17TypedTextDatabase8getFontsEv>
 8003f48:	4603      	mov	r3, r0
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	e00a      	b.n	8003f64 <_ZN23ApplicationFontProvider7getFontEt+0x40>
    case Typography::LARGE:
        // verdana_40_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 8003f4e:	f004 fa69 	bl	8008424 <_ZN17TypedTextDatabase8getFontsEv>
 8003f52:	4603      	mov	r3, r0
 8003f54:	685b      	ldr	r3, [r3, #4]
 8003f56:	e005      	b.n	8003f64 <_ZN23ApplicationFontProvider7getFontEt+0x40>
    case Typography::SMALL:
        // verdana_10_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 8003f58:	f004 fa64 	bl	8008424 <_ZN17TypedTextDatabase8getFontsEv>
 8003f5c:	4603      	mov	r3, r0
 8003f5e:	689b      	ldr	r3, [r3, #8]
 8003f60:	e000      	b.n	8003f64 <_ZN23ApplicationFontProvider7getFontEt+0x40>
    default:
        return 0;
 8003f62:	2300      	movs	r3, #0
    }
}
 8003f64:	4618      	mov	r0, r3
 8003f66:	3708      	adds	r7, #8
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	bd80      	pop	{r7, pc}

08003f6c <_ZN14BitmapDatabase11getInstanceEv>:
};

namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
 8003f6c:	b480      	push	{r7}
 8003f6e:	af00      	add	r7, sp, #0
    return bitmap_database;
 8003f70:	4b02      	ldr	r3, [pc, #8]	; (8003f7c <_ZN14BitmapDatabase11getInstanceEv+0x10>)
}
 8003f72:	4618      	mov	r0, r3
 8003f74:	46bd      	mov	sp, r7
 8003f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7a:	4770      	bx	lr
 8003f7c:	0802dd0c 	.word	0x0802dd0c

08003f80 <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
 8003f80:	b480      	push	{r7}
 8003f82:	af00      	add	r7, sp, #0
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
 8003f84:	2305      	movs	r3, #5
}
 8003f86:	4618      	mov	r0, r3
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8e:	4770      	bx	lr

08003f90 <_ZN8touchgfx4FontD1Ev>:
 */
class Font
{
public:
    /** Finalizes an instance of the Font class. */
    virtual ~Font()
 8003f90:	b480      	push	{r7}
 8003f92:	b083      	sub	sp, #12
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
    {
 8003f98:	4a04      	ldr	r2, [pc, #16]	; (8003fac <_ZN8touchgfx4FontD1Ev+0x1c>)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	601a      	str	r2, [r3, #0]
    }
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	370c      	adds	r7, #12
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003faa:	4770      	bx	lr
 8003fac:	0802e204 	.word	0x0802e204

08003fb0 <_ZN8touchgfx4FontD0Ev>:
    virtual ~Font()
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b082      	sub	sp, #8
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
    }
 8003fb8:	6878      	ldr	r0, [r7, #4]
 8003fba:	f7ff ffe9 	bl	8003f90 <_ZN8touchgfx4FontD1Ev>
 8003fbe:	2110      	movs	r1, #16
 8003fc0:	6878      	ldr	r0, [r7, #4]
 8003fc2:	f027 fa84 	bl	802b4ce <_ZdlPvj>
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	4618      	mov	r0, r3
 8003fca:	3708      	adds	r7, #8
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	bd80      	pop	{r7, pc}

08003fd0 <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 8003fd0:	b590      	push	{r4, r7, lr}
 8003fd2:	b087      	sub	sp, #28
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
 8003fd8:	460b      	mov	r3, r1
 8003fda:	807b      	strh	r3, [r7, #2]
    {
        if (unicode == 0)
 8003fdc:	887b      	ldrh	r3, [r7, #2]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d101      	bne.n	8003fe6 <_ZNK8touchgfx4Font8getGlyphEt+0x16>
        {
            return 0;
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	e010      	b.n	8004008 <_ZNK8touchgfx4Font8getGlyphEt+0x38>
        }
        const uint8_t* dummyPixelDataPointer = 0;
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	613b      	str	r3, [r7, #16]
        uint8_t bitsPerPixelDummy = 0;
 8003fea:	2300      	movs	r3, #0
 8003fec:	73fb      	strb	r3, [r7, #15]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	3308      	adds	r3, #8
 8003ff4:	681c      	ldr	r4, [r3, #0]
 8003ff6:	f107 030f 	add.w	r3, r7, #15
 8003ffa:	f107 0210 	add.w	r2, r7, #16
 8003ffe:	8879      	ldrh	r1, [r7, #2]
 8004000:	6878      	ldr	r0, [r7, #4]
 8004002:	47a0      	blx	r4
 8004004:	6178      	str	r0, [r7, #20]
        return glyph;
 8004006:	697b      	ldr	r3, [r7, #20]
    }
 8004008:	4618      	mov	r0, r3
 800400a:	371c      	adds	r7, #28
 800400c:	46bd      	mov	sp, r7
 800400e:	bd90      	pop	{r4, r7, pc}

08004010 <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * used when no glyph is available for some character. If 0 (zero) is returned, there is
     * no default character.
     *
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
 8004010:	b480      	push	{r7}
 8004012:	b083      	sub	sp, #12
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
    {
        return fallbackCharacter;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	895b      	ldrh	r3, [r3, #10]
    }
 800401c:	4618      	mov	r0, r3
 800401e:	370c      	adds	r7, #12
 8004020:	46bd      	mov	sp, r7
 8004022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004026:	4770      	bx	lr

08004028 <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     *
     * @return The ellipsis character for the typography.
     *
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
 8004028:	b480      	push	{r7}
 800402a:	b083      	sub	sp, #12
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
    {
        return ellipsisCharacter;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	899b      	ldrh	r3, [r3, #12]
    }
 8004034:	4618      	mov	r0, r3
 8004036:	370c      	adds	r7, #12
 8004038:	46bd      	mov	sp, r7
 800403a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403e:	4770      	bx	lr

08004040 <_ZNK8touchgfx4Font13getFontHeightEv>:
     * @return The height in pixels of this font.
     *
     * @note It is not sufficient to allocate text areas with this height. Use
     *       getMinimumTextHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getFontHeight() const
 8004040:	b480      	push	{r7}
 8004042:	b083      	sub	sp, #12
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
    {
        return fontHeight;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	889b      	ldrh	r3, [r3, #4]
    }
 800404c:	4618      	mov	r0, r3
 800404e:	370c      	adds	r7, #12
 8004050:	46bd      	mov	sp, r7
 8004052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004056:	4770      	bx	lr

08004058 <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
     * account that certain characters (eg 'g') have pixels below the baseline, thus making
     * the text height larger than the font height.
     *
     * @return The minimum height needed for a text field that uses this font.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getMinimumTextHeight() const
 8004058:	b480      	push	{r7}
 800405a:	b083      	sub	sp, #12
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
    {
        return fontHeight + pixelsBelowBaseline;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	889a      	ldrh	r2, [r3, #4]
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	799b      	ldrb	r3, [r3, #6]
 8004068:	b29b      	uxth	r3, r3
 800406a:	4413      	add	r3, r2
 800406c:	b29b      	uxth	r3, r3
    }
 800406e:	4618      	mov	r0, r3
 8004070:	370c      	adds	r7, #12
 8004072:	46bd      	mov	sp, r7
 8004074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004078:	4770      	bx	lr

0800407a <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
    /**
     * Gets bits per pixel for this font.
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
 800407a:	b480      	push	{r7}
 800407c:	b083      	sub	sp, #12
 800407e:	af00      	add	r7, sp, #0
 8004080:	6078      	str	r0, [r7, #4]
    {
        return bPerPixel;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	79db      	ldrb	r3, [r3, #7]
 8004086:	f3c3 0306 	ubfx	r3, r3, #0, #7
 800408a:	b2db      	uxtb	r3, r3
    }
 800408c:	4618      	mov	r0, r3
 800408e:	370c      	adds	r7, #12
 8004090:	46bd      	mov	sp, r7
 8004092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004096:	4770      	bx	lr

08004098 <_ZNK8touchgfx4Font15getByteAlignRowEv>:
    /**
     * Are the glyphs saved with each glyph row byte aligned?
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
 8004098:	b480      	push	{r7}
 800409a:	b083      	sub	sp, #12
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
    {
        return bAlignRow;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	79db      	ldrb	r3, [r3, #7]
 80040a4:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80040a8:	b2db      	uxtb	r3, r3
    }
 80040aa:	4618      	mov	r0, r3
 80040ac:	370c      	adds	r7, #12
 80040ae:	46bd      	mov	sp, r7
 80040b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b4:	4770      	bx	lr
	...

080040b8 <_ZN8touchgfx9ConstFontD1Ev>:
 *
 * @see Font
 *
 * @note Pure virtual class. Create an application-specific implementation of getPixelData().
 */
class ConstFont : public Font
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b082      	sub	sp, #8
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
 80040c0:	4a05      	ldr	r2, [pc, #20]	; (80040d8 <_ZN8touchgfx9ConstFontD1Ev+0x20>)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	601a      	str	r2, [r3, #0]
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	4618      	mov	r0, r3
 80040ca:	f7ff ff61 	bl	8003f90 <_ZN8touchgfx4FontD1Ev>
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	4618      	mov	r0, r3
 80040d2:	3708      	adds	r7, #8
 80040d4:	46bd      	mov	sp, r7
 80040d6:	bd80      	pop	{r7, pc}
 80040d8:	080306b8 	.word	0x080306b8

080040dc <_ZN8touchgfx9ConstFontD0Ev>:
 80040dc:	b580      	push	{r7, lr}
 80040de:	b082      	sub	sp, #8
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
 80040e4:	6878      	ldr	r0, [r7, #4]
 80040e6:	f7ff ffe7 	bl	80040b8 <_ZN8touchgfx9ConstFontD1Ev>
 80040ea:	2118      	movs	r1, #24
 80040ec:	6878      	ldr	r0, [r7, #4]
 80040ee:	f027 f9ee 	bl	802b4ce <_ZdlPvj>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	4618      	mov	r0, r3
 80040f6:	3708      	adds	r7, #8
 80040f8:	46bd      	mov	sp, r7
 80040fa:	bd80      	pop	{r7, pc}

080040fc <_ZN8touchgfx13GeneratedFontD1Ev>:
 * An GeneratedFont has both glyph table and glyph data placed in a flash which
 * supports random access read (i.e. not a NAND flash)
 *
 * @see ConstFont
 */
class GeneratedFont : public ConstFont
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b082      	sub	sp, #8
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
 8004104:	4a05      	ldr	r2, [pc, #20]	; (800411c <_ZN8touchgfx13GeneratedFontD1Ev+0x20>)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	601a      	str	r2, [r3, #0]
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	4618      	mov	r0, r3
 800410e:	f7ff ffd3 	bl	80040b8 <_ZN8touchgfx9ConstFontD1Ev>
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	4618      	mov	r0, r3
 8004116:	3708      	adds	r7, #8
 8004118:	46bd      	mov	sp, r7
 800411a:	bd80      	pop	{r7, pc}
 800411c:	0802ded4 	.word	0x0802ded4

08004120 <_ZN8touchgfx13GeneratedFontD0Ev>:
 8004120:	b580      	push	{r7, lr}
 8004122:	b082      	sub	sp, #8
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
 8004128:	6878      	ldr	r0, [r7, #4]
 800412a:	f7ff ffe7 	bl	80040fc <_ZN8touchgfx13GeneratedFontD1Ev>
 800412e:	2128      	movs	r1, #40	; 0x28
 8004130:	6878      	ldr	r0, [r7, #4]
 8004132:	f027 f9cc 	bl	802b4ce <_ZdlPvj>
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	4618      	mov	r0, r3
 800413a:	3708      	adds	r7, #8
 800413c:	46bd      	mov	sp, r7
 800413e:	bd80      	pop	{r7, pc}

08004140 <_ZN8touchgfx9TypedTextD1Ev>:
    virtual ~TypedText()
 8004140:	b480      	push	{r7}
 8004142:	b083      	sub	sp, #12
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
    {
 8004148:	4a04      	ldr	r2, [pc, #16]	; (800415c <_ZN8touchgfx9TypedTextD1Ev+0x1c>)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	601a      	str	r2, [r3, #0]
    }
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	4618      	mov	r0, r3
 8004152:	370c      	adds	r7, #12
 8004154:	46bd      	mov	sp, r7
 8004156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415a:	4770      	bx	lr
 800415c:	0802dd78 	.word	0x0802dd78

08004160 <_ZN8touchgfx9TypedTextD0Ev>:
    virtual ~TypedText()
 8004160:	b580      	push	{r7, lr}
 8004162:	b082      	sub	sp, #8
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
    }
 8004168:	6878      	ldr	r0, [r7, #4]
 800416a:	f7ff ffe9 	bl	8004140 <_ZN8touchgfx9TypedTextD1Ev>
 800416e:	2108      	movs	r1, #8
 8004170:	6878      	ldr	r0, [r7, #4]
 8004172:	f027 f9ac 	bl	802b4ce <_ZdlPvj>
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	4618      	mov	r0, r3
 800417a:	3708      	adds	r7, #8
 800417c:	46bd      	mov	sp, r7
 800417e:	bd80      	pop	{r7, pc}

08004180 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8004180:	b480      	push	{r7}
 8004182:	b083      	sub	sp, #12
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
 8004188:	6039      	str	r1, [r7, #0]
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	4618      	mov	r0, r3
 800418e:	370c      	adds	r7, #12
 8004190:	46bd      	mov	sp, r7
 8004192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004196:	4770      	bx	lr

08004198 <_ZN8touchgfx8DrawableD1Ev>:
          visible(true)
    {
    }

    /** Finalizes an instance of the Drawable class. */
    virtual ~Drawable()
 8004198:	b480      	push	{r7}
 800419a:	b083      	sub	sp, #12
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
    {
 80041a0:	4a04      	ldr	r2, [pc, #16]	; (80041b4 <_ZN8touchgfx8DrawableD1Ev+0x1c>)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	601a      	str	r2, [r3, #0]
    }
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	4618      	mov	r0, r3
 80041aa:	370c      	adds	r7, #12
 80041ac:	46bd      	mov	sp, r7
 80041ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b2:	4770      	bx	lr
 80041b4:	08030654 	.word	0x08030654

080041b8 <_ZN8touchgfx8DrawableD0Ev>:
    virtual ~Drawable()
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b082      	sub	sp, #8
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
    }
 80041c0:	6878      	ldr	r0, [r7, #4]
 80041c2:	f7ff ffe9 	bl	8004198 <_ZN8touchgfx8DrawableD1Ev>
 80041c6:	2128      	movs	r1, #40	; 0x28
 80041c8:	6878      	ldr	r0, [r7, #4]
 80041ca:	f027 f980 	bl	802b4ce <_ZdlPvj>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	4618      	mov	r0, r3
 80041d2:	3708      	adds	r7, #8
 80041d4:	46bd      	mov	sp, r7
 80041d6:	bd80      	pop	{r7, pc}

080041d8 <_ZN8touchgfx8Drawable13getFirstChildEv>:
     * Function for obtaining the first child of this drawable if any.
     *
     * @return A pointer on the first child drawable if any.
     * @see Container::getFirstChild
     */
    virtual Drawable* getFirstChild()
 80041d8:	b480      	push	{r7}
 80041da:	b083      	sub	sp, #12
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
    {
        return 0;
 80041e0:	2300      	movs	r3, #0
    }
 80041e2:	4618      	mov	r0, r3
 80041e4:	370c      	adds	r7, #12
 80041e6:	46bd      	mov	sp, r7
 80041e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ec:	4770      	bx	lr

080041ee <_ZN8touchgfx8Drawable11setPositionEssss>:
     * @param  width  The width of this Drawable.
     * @param  height The height of this Drawable.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 80041ee:	b580      	push	{r7, lr}
 80041f0:	b084      	sub	sp, #16
 80041f2:	af00      	add	r7, sp, #0
 80041f4:	60f8      	str	r0, [r7, #12]
 80041f6:	4608      	mov	r0, r1
 80041f8:	4611      	mov	r1, r2
 80041fa:	461a      	mov	r2, r3
 80041fc:	4603      	mov	r3, r0
 80041fe:	817b      	strh	r3, [r7, #10]
 8004200:	460b      	mov	r3, r1
 8004202:	813b      	strh	r3, [r7, #8]
 8004204:	4613      	mov	r3, r2
 8004206:	80fb      	strh	r3, [r7, #6]
    {
        setXY(x, y);
 8004208:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800420c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8004210:	4619      	mov	r1, r3
 8004212:	68f8      	ldr	r0, [r7, #12]
 8004214:	f000 f837 	bl	8004286 <_ZN8touchgfx8Drawable5setXYEss>
        setWidthHeight(width, height);
 8004218:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 800421c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004220:	4619      	mov	r1, r3
 8004222:	68f8      	ldr	r0, [r7, #12]
 8004224:	f000 f88b 	bl	800433e <_ZN8touchgfx8Drawable14setWidthHeightEss>
    }
 8004228:	bf00      	nop
 800422a:	3710      	adds	r7, #16
 800422c:	46bd      	mov	sp, r7
 800422e:	bd80      	pop	{r7, pc}

08004230 <_ZNK8touchgfx8Drawable4getXEv>:
    /**
     * Gets the x coordinate of this Drawable, relative to its parent.
     *
     * @return The x value, relative to the parent.
     */
    int16_t getX() const
 8004230:	b480      	push	{r7}
 8004232:	b083      	sub	sp, #12
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
    {
        return rect.x;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    }
 800423e:	4618      	mov	r0, r3
 8004240:	370c      	adds	r7, #12
 8004242:	46bd      	mov	sp, r7
 8004244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004248:	4770      	bx	lr

0800424a <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @param  x The new x value, relative to the parent. A negative value is allowed.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setX(int16_t x)
 800424a:	b480      	push	{r7}
 800424c:	b083      	sub	sp, #12
 800424e:	af00      	add	r7, sp, #0
 8004250:	6078      	str	r0, [r7, #4]
 8004252:	460b      	mov	r3, r1
 8004254:	807b      	strh	r3, [r7, #2]
    {
        rect.x = x;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	887a      	ldrh	r2, [r7, #2]
 800425a:	809a      	strh	r2, [r3, #4]
    }
 800425c:	bf00      	nop
 800425e:	370c      	adds	r7, #12
 8004260:	46bd      	mov	sp, r7
 8004262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004266:	4770      	bx	lr

08004268 <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @param  y The new y value, relative to the parent. A negative value is allowed.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setY(int16_t y)
 8004268:	b480      	push	{r7}
 800426a:	b083      	sub	sp, #12
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
 8004270:	460b      	mov	r3, r1
 8004272:	807b      	strh	r3, [r7, #2]
    {
        rect.y = y;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	887a      	ldrh	r2, [r7, #2]
 8004278:	80da      	strh	r2, [r3, #6]
    }
 800427a:	bf00      	nop
 800427c:	370c      	adds	r7, #12
 800427e:	46bd      	mov	sp, r7
 8004280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004284:	4770      	bx	lr

08004286 <_ZN8touchgfx8Drawable5setXYEss>:
     *
     * @see moveTo
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    void setXY(int16_t x, int16_t y)
 8004286:	b580      	push	{r7, lr}
 8004288:	b082      	sub	sp, #8
 800428a:	af00      	add	r7, sp, #0
 800428c:	6078      	str	r0, [r7, #4]
 800428e:	460b      	mov	r3, r1
 8004290:	807b      	strh	r3, [r7, #2]
 8004292:	4613      	mov	r3, r2
 8004294:	803b      	strh	r3, [r7, #0]
    {
        setX(x);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	332c      	adds	r3, #44	; 0x2c
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80042a2:	4611      	mov	r1, r2
 80042a4:	6878      	ldr	r0, [r7, #4]
 80042a6:	4798      	blx	r3
        setY(y);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	3330      	adds	r3, #48	; 0x30
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f9b7 2000 	ldrsh.w	r2, [r7]
 80042b4:	4611      	mov	r1, r2
 80042b6:	6878      	ldr	r0, [r7, #4]
 80042b8:	4798      	blx	r3
    }
 80042ba:	bf00      	nop
 80042bc:	3708      	adds	r7, #8
 80042be:	46bd      	mov	sp, r7
 80042c0:	bd80      	pop	{r7, pc}

080042c2 <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @param  width The new width.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setWidth(int16_t width)
 80042c2:	b480      	push	{r7}
 80042c4:	b083      	sub	sp, #12
 80042c6:	af00      	add	r7, sp, #0
 80042c8:	6078      	str	r0, [r7, #4]
 80042ca:	460b      	mov	r3, r1
 80042cc:	807b      	strh	r3, [r7, #2]
    {
        rect.width = width;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	887a      	ldrh	r2, [r7, #2]
 80042d2:	811a      	strh	r2, [r3, #8]
    }
 80042d4:	bf00      	nop
 80042d6:	370c      	adds	r7, #12
 80042d8:	46bd      	mov	sp, r7
 80042da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042de:	4770      	bx	lr

080042e0 <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @param  height The new height.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setHeight(int16_t height)
 80042e0:	b480      	push	{r7}
 80042e2:	b083      	sub	sp, #12
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
 80042e8:	460b      	mov	r3, r1
 80042ea:	807b      	strh	r3, [r7, #2]
    {
        rect.height = height;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	887a      	ldrh	r2, [r7, #2]
 80042f0:	815a      	strh	r2, [r3, #10]
    }
 80042f2:	bf00      	nop
 80042f4:	370c      	adds	r7, #12
 80042f6:	46bd      	mov	sp, r7
 80042f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fc:	4770      	bx	lr

080042fe <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
    /**
     * This function can be called on parent nodes to signal that the size or position of
     * one or more of its children has changed. Currently only used in ScrollableContainer
     * to redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged()
 80042fe:	b480      	push	{r7}
 8004300:	b083      	sub	sp, #12
 8004302:	af00      	add	r7, sp, #0
 8004304:	6078      	str	r0, [r7, #4]
    {
    }
 8004306:	bf00      	nop
 8004308:	370c      	adds	r7, #12
 800430a:	46bd      	mov	sp, r7
 800430c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004310:	4770      	bx	lr

08004312 <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     * ignores the event. The event is only received if the Drawable is touchable and
     * visible.
     *
     * @param  event The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 8004312:	b480      	push	{r7}
 8004314:	b083      	sub	sp, #12
 8004316:	af00      	add	r7, sp, #0
 8004318:	6078      	str	r0, [r7, #4]
 800431a:	6039      	str	r1, [r7, #0]
    {
    }
 800431c:	bf00      	nop
 800431e:	370c      	adds	r7, #12
 8004320:	46bd      	mov	sp, r7
 8004322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004326:	4770      	bx	lr

08004328 <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     * ignores the event. The event is only received if the Drawable is touchable and
     * visible.
     *
     * @param  event The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 8004328:	b480      	push	{r7}
 800432a:	b083      	sub	sp, #12
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
 8004330:	6039      	str	r1, [r7, #0]
    {
    }
 8004332:	bf00      	nop
 8004334:	370c      	adds	r7, #12
 8004336:	46bd      	mov	sp, r7
 8004338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433c:	4770      	bx	lr

0800433e <_ZN8touchgfx8Drawable14setWidthHeightEss>:
     * coordinates).
     *
     * @param  width  The width.
     * @param  height The height.
     */
    void setWidthHeight(int16_t width, int16_t height)
 800433e:	b580      	push	{r7, lr}
 8004340:	b082      	sub	sp, #8
 8004342:	af00      	add	r7, sp, #0
 8004344:	6078      	str	r0, [r7, #4]
 8004346:	460b      	mov	r3, r1
 8004348:	807b      	strh	r3, [r7, #2]
 800434a:	4613      	mov	r3, r2
 800434c:	803b      	strh	r3, [r7, #0]
    {
        setWidth(width);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	3334      	adds	r3, #52	; 0x34
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800435a:	4611      	mov	r1, r2
 800435c:	6878      	ldr	r0, [r7, #4]
 800435e:	4798      	blx	r3
        setHeight(height);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	3338      	adds	r3, #56	; 0x38
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f9b7 2000 	ldrsh.w	r2, [r7]
 800436c:	4611      	mov	r1, r2
 800436e:	6878      	ldr	r0, [r7, #4]
 8004370:	4798      	blx	r3
    }
 8004372:	bf00      	nop
 8004374:	3708      	adds	r7, #8
 8004376:	46bd      	mov	sp, r7
 8004378:	bd80      	pop	{r7, pc}

0800437a <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     * ignores the event. The event is only received if the drawable is touchable and
     * visible.
     *
     * @param  event The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& event)
 800437a:	b480      	push	{r7}
 800437c:	b083      	sub	sp, #12
 800437e:	af00      	add	r7, sp, #0
 8004380:	6078      	str	r0, [r7, #4]
 8004382:	6039      	str	r1, [r7, #0]
    {
    }
 8004384:	bf00      	nop
 8004386:	370c      	adds	r7, #12
 8004388:	46bd      	mov	sp, r7
 800438a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438e:	4770      	bx	lr

08004390 <_ZN8touchgfx8Drawable15handleTickEventEv>:
     * Called periodically by the framework if the Drawable instance has subscribed to timer
     * ticks.
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent()
 8004390:	b480      	push	{r7}
 8004392:	b083      	sub	sp, #12
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
    {
    }
 8004398:	bf00      	nop
 800439a:	370c      	adds	r7, #12
 800439c:	46bd      	mov	sp, r7
 800439e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a2:	4770      	bx	lr

080043a4 <_ZNK8touchgfx8Drawable9isVisibleEv>:
     *
     * @return true if the Drawable is visible.
     *
     * @see setVisible
     */
    bool isVisible() const
 80043a4:	b480      	push	{r7}
 80043a6:	b083      	sub	sp, #12
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
    {
        return visible;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    }
 80043b2:	4618      	mov	r0, r3
 80043b4:	370c      	adds	r7, #12
 80043b6:	46bd      	mov	sp, r7
 80043b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043bc:	4770      	bx	lr

080043be <_ZNK8touchgfx8Drawable11isTouchableEv>:
     *
     * @return True if touch events are received.
     *
     * @see setTouchable
     */
    bool isTouchable() const
 80043be:	b480      	push	{r7}
 80043c0:	b083      	sub	sp, #12
 80043c2:	af00      	add	r7, sp, #0
 80043c4:	6078      	str	r0, [r7, #4]
    {
        return touchable;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    }
 80043cc:	4618      	mov	r0, r3
 80043ce:	370c      	adds	r7, #12
 80043d0:	46bd      	mov	sp, r7
 80043d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d6:	4770      	bx	lr

080043d8 <_ZN8touchgfx8Drawable6moveToEss>:
     *
     * @see moveRelative, setXY
     *
     * @note Will redraw the appropriate areas of the screen.
     */
    virtual void moveTo(int16_t x, int16_t y)
 80043d8:	b580      	push	{r7, lr}
 80043da:	b082      	sub	sp, #8
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
 80043e0:	460b      	mov	r3, r1
 80043e2:	807b      	strh	r3, [r7, #2]
 80043e4:	4613      	mov	r3, r2
 80043e6:	803b      	strh	r3, [r7, #0]
    {
        moveRelative(x - rect.x, y - rect.y);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	3350      	adds	r3, #80	; 0x50
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	8879      	ldrh	r1, [r7, #2]
 80043f2:	687a      	ldr	r2, [r7, #4]
 80043f4:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 80043f8:	b292      	uxth	r2, r2
 80043fa:	1a8a      	subs	r2, r1, r2
 80043fc:	b292      	uxth	r2, r2
 80043fe:	b210      	sxth	r0, r2
 8004400:	8839      	ldrh	r1, [r7, #0]
 8004402:	687a      	ldr	r2, [r7, #4]
 8004404:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 8004408:	b292      	uxth	r2, r2
 800440a:	1a8a      	subs	r2, r1, r2
 800440c:	b292      	uxth	r2, r2
 800440e:	b212      	sxth	r2, r2
 8004410:	4601      	mov	r1, r0
 8004412:	6878      	ldr	r0, [r7, #4]
 8004414:	4798      	blx	r3
    }
 8004416:	bf00      	nop
 8004418:	3708      	adds	r7, #8
 800441a:	46bd      	mov	sp, r7
 800441c:	bd80      	pop	{r7, pc}

0800441e <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>:
     *
     * Reset cached coordinate data.
     *
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
 800441e:	b480      	push	{r7}
 8004420:	b083      	sub	sp, #12
 8004422:	af00      	add	r7, sp, #0
 8004424:	6078      	str	r0, [r7, #4]
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800442c:	819a      	strh	r2, [r3, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004434:	841a      	strh	r2, [r3, #32]
        cachedAbsY = UNCACHED_INDICATOR;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800443c:	845a      	strh	r2, [r3, #34]	; 0x22
    }
 800443e:	bf00      	nop
 8004440:	370c      	adds	r7, #12
 8004442:	46bd      	mov	sp, r7
 8004444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004448:	4770      	bx	lr

0800444a <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @param          invalidatedArea     Include drawables that intersect with this area only.
     * @param [in,out] nextPreviousElement Modifiable element in linked list.
     *
     * @note For TouchGFX internal use only.
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
 800444a:	b580      	push	{r7, lr}
 800444c:	b084      	sub	sp, #16
 800444e:	af00      	add	r7, sp, #0
 8004450:	60f8      	str	r0, [r7, #12]
 8004452:	60b9      	str	r1, [r7, #8]
 8004454:	607a      	str	r2, [r7, #4]
    {
        resetDrawChainCache();
 8004456:	68f8      	ldr	r0, [r7, #12]
 8004458:	f7ff ffe1 	bl	800441e <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>
        nextDrawChainElement = *nextPreviousElement;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681a      	ldr	r2, [r3, #0]
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	61da      	str	r2, [r3, #28]
        *nextPreviousElement = this;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	68fa      	ldr	r2, [r7, #12]
 8004468:	601a      	str	r2, [r3, #0]
    }
 800446a:	bf00      	nop
 800446c:	3710      	adds	r7, #16
 800446e:	46bd      	mov	sp, r7
 8004470:	bd80      	pop	{r7, pc}
	...

08004474 <_ZN8touchgfx3HAL3lcdEv>:
    static LCD& lcd()
 8004474:	b480      	push	{r7}
 8004476:	af00      	add	r7, sp, #0
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 8004478:	4b0b      	ldr	r3, [pc, #44]	; (80044a8 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 8004480:	2b00      	cmp	r3, #0
 8004482:	d008      	beq.n	8004496 <_ZN8touchgfx3HAL3lcdEv+0x22>
 8004484:	4b08      	ldr	r3, [pc, #32]	; (80044a8 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800448a:	2b00      	cmp	r3, #0
 800448c:	d003      	beq.n	8004496 <_ZN8touchgfx3HAL3lcdEv+0x22>
            return *instance->auxiliaryLCD;
 800448e:	4b06      	ldr	r3, [pc, #24]	; (80044a8 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004494:	e002      	b.n	800449c <_ZN8touchgfx3HAL3lcdEv+0x28>
        return instance->lcdRef;
 8004496:	4b04      	ldr	r3, [pc, #16]	; (80044a8 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	689b      	ldr	r3, [r3, #8]
    }
 800449c:	4618      	mov	r0, r3
 800449e:	46bd      	mov	sp, r7
 80044a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a4:	4770      	bx	lr
 80044a6:	bf00      	nop
 80044a8:	2400c8bc 	.word	0x2400c8bc

080044ac <_ZN8touchgfx10TransitionC1Ev>:
 */
class Transition
{
public:
    /** Initializes a new instance of the Transition class. */
    Transition()
 80044ac:	b480      	push	{r7}
 80044ae:	b083      	sub	sp, #12
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
        : screenContainer(0), done(false)
 80044b4:	4a07      	ldr	r2, [pc, #28]	; (80044d4 <_ZN8touchgfx10TransitionC1Ev+0x28>)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	601a      	str	r2, [r3, #0]
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	2200      	movs	r2, #0
 80044be:	605a      	str	r2, [r3, #4]
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2200      	movs	r2, #0
 80044c4:	721a      	strb	r2, [r3, #8]
    {
    }
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	4618      	mov	r0, r3
 80044ca:	370c      	adds	r7, #12
 80044cc:	46bd      	mov	sp, r7
 80044ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d2:	4770      	bx	lr
 80044d4:	0802deb0 	.word	0x0802deb0

080044d8 <_ZN8touchgfx10TransitionD1Ev>:

    /** Finalizes an instance of the Transition class. */
    virtual ~Transition()
 80044d8:	b480      	push	{r7}
 80044da:	b083      	sub	sp, #12
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
    {
 80044e0:	4a04      	ldr	r2, [pc, #16]	; (80044f4 <_ZN8touchgfx10TransitionD1Ev+0x1c>)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	601a      	str	r2, [r3, #0]
    }
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	4618      	mov	r0, r3
 80044ea:	370c      	adds	r7, #12
 80044ec:	46bd      	mov	sp, r7
 80044ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f2:	4770      	bx	lr
 80044f4:	0802deb0 	.word	0x0802deb0

080044f8 <_ZN8touchgfx10TransitionD0Ev>:
    virtual ~Transition()
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b082      	sub	sp, #8
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
    }
 8004500:	6878      	ldr	r0, [r7, #4]
 8004502:	f7ff ffe9 	bl	80044d8 <_ZN8touchgfx10TransitionD1Ev>
 8004506:	210c      	movs	r1, #12
 8004508:	6878      	ldr	r0, [r7, #4]
 800450a:	f026 ffe0 	bl	802b4ce <_ZdlPvj>
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	4618      	mov	r0, r3
 8004512:	3708      	adds	r7, #8
 8004514:	46bd      	mov	sp, r7
 8004516:	bd80      	pop	{r7, pc}

08004518 <_ZN8touchgfx10Transition15handleTickEventEv>:

    /** Called for every tick when transitioning. */
    virtual void handleTickEvent()
 8004518:	b480      	push	{r7}
 800451a:	b083      	sub	sp, #12
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
    {
    }
 8004520:	bf00      	nop
 8004522:	370c      	adds	r7, #12
 8004524:	46bd      	mov	sp, r7
 8004526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452a:	4770      	bx	lr

0800452c <_ZN8touchgfx10Transition8tearDownEv>:

    /**
     * Tears down the Animation. Called before the destructor is called, when the
     * application changes the transition.
     */
    virtual void tearDown()
 800452c:	b480      	push	{r7}
 800452e:	b083      	sub	sp, #12
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
    {
    }
 8004534:	bf00      	nop
 8004536:	370c      	adds	r7, #12
 8004538:	46bd      	mov	sp, r7
 800453a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453e:	4770      	bx	lr

08004540 <_ZN8touchgfx10Transition4initEv>:

    /**
     * Initializes the transition. Called after the constructor is called, when the
     * application changes the transition.
     */
    virtual void init()
 8004540:	b480      	push	{r7}
 8004542:	b083      	sub	sp, #12
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
    {
    }
 8004548:	bf00      	nop
 800454a:	370c      	adds	r7, #12
 800454c:	46bd      	mov	sp, r7
 800454e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004552:	4770      	bx	lr

08004554 <_ZN8touchgfx10Transition10invalidateEv>:
    /**
     * Invalidates the screen when starting the Transition. Default is
     * to invalidate the whole screen. Subclasses can do partial
     * invalidation.
     */
    virtual void invalidate()
 8004554:	b580      	push	{r7, lr}
 8004556:	b082      	sub	sp, #8
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
    {
        Application::getInstance()->draw();
 800455c:	f01a f9b2 	bl	801e8c4 <_ZN8touchgfx11Application11getInstanceEv>
 8004560:	4603      	mov	r3, r0
 8004562:	681a      	ldr	r2, [r3, #0]
 8004564:	3230      	adds	r2, #48	; 0x30
 8004566:	6812      	ldr	r2, [r2, #0]
 8004568:	4618      	mov	r0, r3
 800456a:	4790      	blx	r2
    }
 800456c:	bf00      	nop
 800456e:	3708      	adds	r7, #8
 8004570:	46bd      	mov	sp, r7
 8004572:	bd80      	pop	{r7, pc}

08004574 <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     * Sets the Screen Container. Is used by Screen to enable the transition to access the
     * Container.
     *
     * @param [in] cont The Container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
 8004574:	b480      	push	{r7}
 8004576:	b083      	sub	sp, #12
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
 800457c:	6039      	str	r1, [r7, #0]
    {
        screenContainer = &cont;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	683a      	ldr	r2, [r7, #0]
 8004582:	605a      	str	r2, [r3, #4]
    }
 8004584:	bf00      	nop
 8004586:	370c      	adds	r7, #12
 8004588:	46bd      	mov	sp, r7
 800458a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458e:	4770      	bx	lr

08004590 <_ZN8touchgfx14MVPApplicationC1Ev>:
    MVPApplication()
 8004590:	b580      	push	{r7, lr}
 8004592:	b082      	sub	sp, #8
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
          pendingScreenTransitionCallback(0)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	4618      	mov	r0, r3
 800459c:	f01a f9fc 	bl	801e998 <_ZN8touchgfx11ApplicationC1Ev>
 80045a0:	4a09      	ldr	r2, [pc, #36]	; (80045c8 <_ZN8touchgfx14MVPApplicationC1Ev+0x38>)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	601a      	str	r2, [r3, #0]
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	2200      	movs	r2, #0
 80045aa:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	2200      	movs	r2, #0
 80045b2:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
        instance = this;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	4a04      	ldr	r2, [pc, #16]	; (80045cc <_ZN8touchgfx14MVPApplicationC1Ev+0x3c>)
 80045ba:	6013      	str	r3, [r2, #0]
    }
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	4618      	mov	r0, r3
 80045c0:	3708      	adds	r7, #8
 80045c2:	46bd      	mov	sp, r7
 80045c4:	bd80      	pop	{r7, pc}
 80045c6:	bf00      	nop
 80045c8:	0802db40 	.word	0x0802db40
 80045cc:	2400c928 	.word	0x2400c928

080045d0 <_ZN5Model4bindEP13ModelListener>:
class Model
{
public:
    Model();

    void bind(ModelListener* listener)
 80045d0:	b480      	push	{r7}
 80045d2:	b083      	sub	sp, #12
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
 80045d8:	6039      	str	r1, [r7, #0]
    {
        modelListener = listener;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	683a      	ldr	r2, [r7, #0]
 80045de:	601a      	str	r2, [r3, #0]
    }
 80045e0:	bf00      	nop
 80045e2:	370c      	adds	r7, #12
 80045e4:	46bd      	mov	sp, r7
 80045e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ea:	4770      	bx	lr

080045ec <_ZN8touchgfx12NoTransition15handleTickEventEv>:
 */
class NoTransition : public Transition
{
public:
    /** Indicates that the transition is done after the first tick. */
    virtual void handleTickEvent()
 80045ec:	b480      	push	{r7}
 80045ee:	b083      	sub	sp, #12
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
    {
        done = true;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2201      	movs	r2, #1
 80045f8:	721a      	strb	r2, [r3, #8]
    }
 80045fa:	bf00      	nop
 80045fc:	370c      	adds	r7, #12
 80045fe:	46bd      	mov	sp, r7
 8004600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004604:	4770      	bx	lr

08004606 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     *
     * @param       x    Not used since this Widget is the only "child".
     * @param       y    Not used since this Widget is the only "child".
     * @param [out] last Result, the address of the actual instance of the Widget.
     */
    virtual void getLastChild(int16_t x, int16_t y, Drawable** last)
 8004606:	b580      	push	{r7, lr}
 8004608:	b084      	sub	sp, #16
 800460a:	af00      	add	r7, sp, #0
 800460c:	60f8      	str	r0, [r7, #12]
 800460e:	607b      	str	r3, [r7, #4]
 8004610:	460b      	mov	r3, r1
 8004612:	817b      	strh	r3, [r7, #10]
 8004614:	4613      	mov	r3, r2
 8004616:	813b      	strh	r3, [r7, #8]
    {
        (void)x;
        (void)y;
        if (isVisible() && isTouchable())
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	4618      	mov	r0, r3
 800461c:	f7ff fec2 	bl	80043a4 <_ZNK8touchgfx8Drawable9isVisibleEv>
 8004620:	4603      	mov	r3, r0
 8004622:	2b00      	cmp	r3, #0
 8004624:	d008      	beq.n	8004638 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	4618      	mov	r0, r3
 800462a:	f7ff fec8 	bl	80043be <_ZNK8touchgfx8Drawable11isTouchableEv>
 800462e:	4603      	mov	r3, r0
 8004630:	2b00      	cmp	r3, #0
 8004632:	d001      	beq.n	8004638 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 8004634:	2301      	movs	r3, #1
 8004636:	e000      	b.n	800463a <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x34>
 8004638:	2300      	movs	r3, #0
 800463a:	2b00      	cmp	r3, #0
 800463c:	d002      	beq.n	8004644 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x3e>
        {
            *last = this;
 800463e:	68fa      	ldr	r2, [r7, #12]
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	601a      	str	r2, [r3, #0]
        }
    }
 8004644:	bf00      	nop
 8004646:	3710      	adds	r7, #16
 8004648:	46bd      	mov	sp, r7
 800464a:	bd80      	pop	{r7, pc}

0800464c <_ZN13ModelListener4bindEP5Model>:
public:
    ModelListener() : model(0) {}
    
    virtual ~ModelListener() {}

    void bind(Model* m)
 800464c:	b480      	push	{r7}
 800464e:	b083      	sub	sp, #12
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
 8004654:	6039      	str	r1, [r7, #0]
    {
        model = m;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	683a      	ldr	r2, [r7, #0]
 800465a:	605a      	str	r2, [r3, #4]
    }
 800465c:	bf00      	nop
 800465e:	370c      	adds	r7, #12
 8004660:	46bd      	mov	sp, r7
 8004662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004666:	4770      	bx	lr

08004668 <_ZN8touchgfx6WidgetD1Ev>:
class Widget : public Drawable
 8004668:	b580      	push	{r7, lr}
 800466a:	b082      	sub	sp, #8
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
 8004670:	4a05      	ldr	r2, [pc, #20]	; (8004688 <_ZN8touchgfx6WidgetD1Ev+0x20>)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	601a      	str	r2, [r3, #0]
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	4618      	mov	r0, r3
 800467a:	f7ff fd8d 	bl	8004198 <_ZN8touchgfx8DrawableD1Ev>
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	4618      	mov	r0, r3
 8004682:	3708      	adds	r7, #8
 8004684:	46bd      	mov	sp, r7
 8004686:	bd80      	pop	{r7, pc}
 8004688:	0802de28 	.word	0x0802de28

0800468c <_ZN8touchgfx6WidgetD0Ev>:
 800468c:	b580      	push	{r7, lr}
 800468e:	b082      	sub	sp, #8
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
 8004694:	6878      	ldr	r0, [r7, #4]
 8004696:	f7ff ffe7 	bl	8004668 <_ZN8touchgfx6WidgetD1Ev>
 800469a:	2128      	movs	r1, #40	; 0x28
 800469c:	6878      	ldr	r0, [r7, #4]
 800469e:	f026 ff16 	bl	802b4ce <_ZdlPvj>
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	4618      	mov	r0, r3
 80046a6:	3708      	adds	r7, #8
 80046a8:	46bd      	mov	sp, r7
 80046aa:	bd80      	pop	{r7, pc}

080046ac <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
#include <gui/screen2_screen/Screen2View.hpp>
#include <gui/screen2_screen/Screen2Presenter.hpp>

using namespace touchgfx;

FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b084      	sub	sp, #16
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	60f8      	str	r0, [r7, #12]
 80046b4:	60b9      	str	r1, [r7, #8]
 80046b6:	607a      	str	r2, [r7, #4]
    : touchgfx::MVPApplication(),
      transitionCallback(),
      frontendHeap(heap),
      model(m)
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	4618      	mov	r0, r3
 80046bc:	f7ff ff68 	bl	8004590 <_ZN8touchgfx14MVPApplicationC1Ev>
 80046c0:	4a13      	ldr	r2, [pc, #76]	; (8004710 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x64>)
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	601a      	str	r2, [r3, #0]
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80046cc:	4618      	mov	r0, r3
 80046ce:	f000 f92b 	bl	8004928 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	687a      	ldr	r2, [r7, #4]
 80046d6:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	68ba      	ldr	r2, [r7, #8]
 80046de:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
{
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 80046e2:	f7fc fd89 	bl	80011f8 <_ZN8touchgfx3HAL11getInstanceEv>
 80046e6:	4603      	mov	r3, r0
 80046e8:	681a      	ldr	r2, [r3, #0]
 80046ea:	3208      	adds	r2, #8
 80046ec:	6812      	ldr	r2, [r2, #0]
 80046ee:	2100      	movs	r1, #0
 80046f0:	4618      	mov	r0, r3
 80046f2:	4790      	blx	r2
    touchgfx::Texts::setLanguage(GB);
 80046f4:	2000      	movs	r0, #0
 80046f6:	f003 fe1d 	bl	8008334 <_ZN8touchgfx5Texts11setLanguageEt>
    reinterpret_cast<touchgfx::LCD24bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
 80046fa:	f7ff febb 	bl	8004474 <_ZN8touchgfx3HAL3lcdEv>
 80046fe:	4603      	mov	r3, r0
 8004700:	4618      	mov	r0, r3
 8004702:	f020 fb1c 	bl	8024d3e <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>
}
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	4618      	mov	r0, r3
 800470a:	3710      	adds	r7, #16
 800470c:	46bd      	mov	sp, r7
 800470e:	bd80      	pop	{r7, pc}
 8004710:	0802dae4 	.word	0x0802dae4

08004714 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>:
class GenericCallback<void>
 8004714:	b480      	push	{r7}
 8004716:	b083      	sub	sp, #12
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
 800471c:	6039      	str	r1, [r7, #0]
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	4618      	mov	r0, r3
 8004722:	370c      	adds	r7, #12
 8004724:	46bd      	mov	sp, r7
 8004726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472a:	4770      	bx	lr

0800472c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 800472c:	b580      	push	{r7, lr}
 800472e:	b082      	sub	sp, #8
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
 8004734:	6039      	str	r1, [r7, #0]
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	683a      	ldr	r2, [r7, #0]
 800473a:	4611      	mov	r1, r2
 800473c:	4618      	mov	r0, r3
 800473e:	f7ff ffe9 	bl	8004714 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	685a      	ldr	r2, [r3, #4]
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	605a      	str	r2, [r3, #4]
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	683a      	ldr	r2, [r7, #0]
 800474e:	3308      	adds	r3, #8
 8004750:	3208      	adds	r2, #8
 8004752:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004756:	e883 0003 	stmia.w	r3, {r0, r1}
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	4618      	mov	r0, r3
 800475e:	3708      	adds	r7, #8
 8004760:	46bd      	mov	sp, r7
 8004762:	bd80      	pop	{r7, pc}

08004764 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>:
 */

// Screen1

void FrontendApplicationBase::gotoScreen1ScreenNoTransition()
{
 8004764:	b590      	push	{r4, r7, lr}
 8004766:	b089      	sub	sp, #36	; 0x24
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoScreen1ScreenNoTransitionImpl);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	f503 74a0 	add.w	r4, r3, #320	; 0x140
 8004772:	4b10      	ldr	r3, [pc, #64]	; (80047b4 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv+0x50>)
 8004774:	61bb      	str	r3, [r7, #24]
 8004776:	2300      	movs	r3, #0
 8004778:	61fb      	str	r3, [r7, #28]
 800477a:	f107 0008 	add.w	r0, r7, #8
 800477e:	f107 0318 	add.w	r3, r7, #24
 8004782:	cb0c      	ldmia	r3, {r2, r3}
 8004784:	6879      	ldr	r1, [r7, #4]
 8004786:	f000 f8eb 	bl	8004960 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 800478a:	f107 0308 	add.w	r3, r7, #8
 800478e:	4619      	mov	r1, r3
 8004790:	4620      	mov	r0, r4
 8004792:	f7ff ffcb 	bl	800472c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 8004796:	f107 0308 	add.w	r3, r7, #8
 800479a:	4618      	mov	r0, r3
 800479c:	f7fd fe32 	bl	8002404 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	f503 72a0 	add.w	r2, r3, #320	; 0x140
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
}
 80047ac:	bf00      	nop
 80047ae:	3724      	adds	r7, #36	; 0x24
 80047b0:	46bd      	mov	sp, r7
 80047b2:	bd90      	pop	{r4, r7, pc}
 80047b4:	080047b9 	.word	0x080047b9

080047b8 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv>:

void FrontendApplicationBase::gotoScreen1ScreenNoTransitionImpl()
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b084      	sub	sp, #16
 80047bc:	af02      	add	r7, sp, #8
 80047be:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<Screen1View, Screen1Presenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	f503 719c 	add.w	r1, r3, #312	; 0x138
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 80047cc:	461a      	mov	r2, r3
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80047d4:	9300      	str	r3, [sp, #0]
 80047d6:	4b04      	ldr	r3, [pc, #16]	; (80047e8 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x30>)
 80047d8:	4804      	ldr	r0, [pc, #16]	; (80047ec <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x34>)
 80047da:	f000 f8f3 	bl	80049c4 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 80047de:	bf00      	nop
 80047e0:	3708      	adds	r7, #8
 80047e2:	46bd      	mov	sp, r7
 80047e4:	bd80      	pop	{r7, pc}
 80047e6:	bf00      	nop
 80047e8:	2400c91c 	.word	0x2400c91c
 80047ec:	2400c918 	.word	0x2400c918

080047f0 <_ZN23FrontendApplicationBase36gotoScreen1ScreenSlideTransitionWestEv>:

void FrontendApplicationBase::gotoScreen1ScreenSlideTransitionWest()
{
 80047f0:	b590      	push	{r4, r7, lr}
 80047f2:	b089      	sub	sp, #36	; 0x24
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoScreen1ScreenSlideTransitionWestImpl);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	f503 74a0 	add.w	r4, r3, #320	; 0x140
 80047fe:	4b10      	ldr	r3, [pc, #64]	; (8004840 <_ZN23FrontendApplicationBase36gotoScreen1ScreenSlideTransitionWestEv+0x50>)
 8004800:	61bb      	str	r3, [r7, #24]
 8004802:	2300      	movs	r3, #0
 8004804:	61fb      	str	r3, [r7, #28]
 8004806:	f107 0008 	add.w	r0, r7, #8
 800480a:	f107 0318 	add.w	r3, r7, #24
 800480e:	cb0c      	ldmia	r3, {r2, r3}
 8004810:	6879      	ldr	r1, [r7, #4]
 8004812:	f000 f8a5 	bl	8004960 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 8004816:	f107 0308 	add.w	r3, r7, #8
 800481a:	4619      	mov	r1, r3
 800481c:	4620      	mov	r0, r4
 800481e:	f7ff ff85 	bl	800472c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 8004822:	f107 0308 	add.w	r3, r7, #8
 8004826:	4618      	mov	r0, r3
 8004828:	f7fd fdec 	bl	8002404 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	f503 72a0 	add.w	r2, r3, #320	; 0x140
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
}
 8004838:	bf00      	nop
 800483a:	3724      	adds	r7, #36	; 0x24
 800483c:	46bd      	mov	sp, r7
 800483e:	bd90      	pop	{r4, r7, pc}
 8004840:	08004845 	.word	0x08004845

08004844 <_ZN23FrontendApplicationBase40gotoScreen1ScreenSlideTransitionWestImplEv>:

void FrontendApplicationBase::gotoScreen1ScreenSlideTransitionWestImpl()
{
 8004844:	b580      	push	{r7, lr}
 8004846:	b084      	sub	sp, #16
 8004848:	af02      	add	r7, sp, #8
 800484a:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<Screen1View, Screen1Presenter, touchgfx::SlideTransition<WEST>, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	f503 719c 	add.w	r1, r3, #312	; 0x138
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8004858:	461a      	mov	r2, r3
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8004860:	9300      	str	r3, [sp, #0]
 8004862:	4b04      	ldr	r3, [pc, #16]	; (8004874 <_ZN23FrontendApplicationBase40gotoScreen1ScreenSlideTransitionWestImplEv+0x30>)
 8004864:	4804      	ldr	r0, [pc, #16]	; (8004878 <_ZN23FrontendApplicationBase40gotoScreen1ScreenSlideTransitionWestImplEv+0x34>)
 8004866:	f000 f9c9 	bl	8004bfc <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 800486a:	bf00      	nop
 800486c:	3708      	adds	r7, #8
 800486e:	46bd      	mov	sp, r7
 8004870:	bd80      	pop	{r7, pc}
 8004872:	bf00      	nop
 8004874:	2400c91c 	.word	0x2400c91c
 8004878:	2400c918 	.word	0x2400c918

0800487c <_ZN23FrontendApplicationBase36gotoScreen2ScreenSlideTransitionEastEv>:

// Screen2

void FrontendApplicationBase::gotoScreen2ScreenSlideTransitionEast()
{
 800487c:	b590      	push	{r4, r7, lr}
 800487e:	b089      	sub	sp, #36	; 0x24
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoScreen2ScreenSlideTransitionEastImpl);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	f503 74a0 	add.w	r4, r3, #320	; 0x140
 800488a:	4b10      	ldr	r3, [pc, #64]	; (80048cc <_ZN23FrontendApplicationBase36gotoScreen2ScreenSlideTransitionEastEv+0x50>)
 800488c:	61bb      	str	r3, [r7, #24]
 800488e:	2300      	movs	r3, #0
 8004890:	61fb      	str	r3, [r7, #28]
 8004892:	f107 0008 	add.w	r0, r7, #8
 8004896:	f107 0318 	add.w	r3, r7, #24
 800489a:	cb0c      	ldmia	r3, {r2, r3}
 800489c:	6879      	ldr	r1, [r7, #4]
 800489e:	f000 f85f 	bl	8004960 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 80048a2:	f107 0308 	add.w	r3, r7, #8
 80048a6:	4619      	mov	r1, r3
 80048a8:	4620      	mov	r0, r4
 80048aa:	f7ff ff3f 	bl	800472c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 80048ae:	f107 0308 	add.w	r3, r7, #8
 80048b2:	4618      	mov	r0, r3
 80048b4:	f7fd fda6 	bl	8002404 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	f503 72a0 	add.w	r2, r3, #320	; 0x140
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
}
 80048c4:	bf00      	nop
 80048c6:	3724      	adds	r7, #36	; 0x24
 80048c8:	46bd      	mov	sp, r7
 80048ca:	bd90      	pop	{r4, r7, pc}
 80048cc:	080048d1 	.word	0x080048d1

080048d0 <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv>:

void FrontendApplicationBase::gotoScreen2ScreenSlideTransitionEastImpl()
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b084      	sub	sp, #16
 80048d4:	af02      	add	r7, sp, #8
 80048d6:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<Screen2View, Screen2Presenter, touchgfx::SlideTransition<EAST>, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	f503 719c 	add.w	r1, r3, #312	; 0x138
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 80048e4:	461a      	mov	r2, r3
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80048ec:	9300      	str	r3, [sp, #0]
 80048ee:	4b04      	ldr	r3, [pc, #16]	; (8004900 <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x30>)
 80048f0:	4804      	ldr	r0, [pc, #16]	; (8004904 <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x34>)
 80048f2:	f000 faa1 	bl	8004e38 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 80048f6:	bf00      	nop
 80048f8:	3708      	adds	r7, #8
 80048fa:	46bd      	mov	sp, r7
 80048fc:	bd80      	pop	{r7, pc}
 80048fe:	bf00      	nop
 8004900:	2400c91c 	.word	0x2400c91c
 8004904:	2400c918 	.word	0x2400c918

08004908 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>:
class GenericCallback<void>
 8004908:	b480      	push	{r7}
 800490a:	b083      	sub	sp, #12
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
 8004910:	4a04      	ldr	r2, [pc, #16]	; (8004924 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev+0x1c>)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	601a      	str	r2, [r3, #0]
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	4618      	mov	r0, r3
 800491a:	370c      	adds	r7, #12
 800491c:	46bd      	mov	sp, r7
 800491e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004922:	4770      	bx	lr
 8004924:	0802db84 	.word	0x0802db84

08004928 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>:
    Callback()
 8004928:	b580      	push	{r7, lr}
 800492a:	b082      	sub	sp, #8
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
        : pobject(0), pmemfun_0(0)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	4618      	mov	r0, r3
 8004934:	f7ff ffe8 	bl	8004908 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 8004938:	4a08      	ldr	r2, [pc, #32]	; (800495c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev+0x34>)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	601a      	str	r2, [r3, #0]
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2200      	movs	r2, #0
 8004942:	605a      	str	r2, [r3, #4]
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2200      	movs	r2, #0
 8004948:	609a      	str	r2, [r3, #8]
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	2200      	movs	r2, #0
 800494e:	60da      	str	r2, [r3, #12]
    }
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	4618      	mov	r0, r3
 8004954:	3708      	adds	r7, #8
 8004956:	46bd      	mov	sp, r7
 8004958:	bd80      	pop	{r7, pc}
 800495a:	bf00      	nop
 800495c:	0802db28 	.word	0x0802db28

08004960 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>:
    Callback(dest_type* pobject, void (dest_type::*pmemfun_0)())
 8004960:	b580      	push	{r7, lr}
 8004962:	b084      	sub	sp, #16
 8004964:	af00      	add	r7, sp, #0
 8004966:	60f8      	str	r0, [r7, #12]
 8004968:	60b9      	str	r1, [r7, #8]
 800496a:	4639      	mov	r1, r7
 800496c:	e881 000c 	stmia.w	r1, {r2, r3}
        : pobject(pobject), pmemfun_0(pmemfun_0)
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	4618      	mov	r0, r3
 8004974:	f7ff ffc8 	bl	8004908 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 8004978:	4a08      	ldr	r2, [pc, #32]	; (800499c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE+0x3c>)
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	601a      	str	r2, [r3, #0]
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	68ba      	ldr	r2, [r7, #8]
 8004982:	605a      	str	r2, [r3, #4]
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	3308      	adds	r3, #8
 8004988:	463a      	mov	r2, r7
 800498a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800498e:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	4618      	mov	r0, r3
 8004996:	3710      	adds	r7, #16
 8004998:	46bd      	mov	sp, r7
 800499a:	bd80      	pop	{r7, pc}
 800499c:	0802db28 	.word	0x0802db28

080049a0 <_ZN8touchgfx12NoTransitionC1Ev>:
class NoTransition : public Transition
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b082      	sub	sp, #8
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	4618      	mov	r0, r3
 80049ac:	f7ff fd7e 	bl	80044ac <_ZN8touchgfx10TransitionC1Ev>
 80049b0:	4a03      	ldr	r2, [pc, #12]	; (80049c0 <_ZN8touchgfx12NoTransitionC1Ev+0x20>)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	601a      	str	r2, [r3, #0]
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	4618      	mov	r0, r3
 80049ba:	3708      	adds	r7, #8
 80049bc:	46bd      	mov	sp, r7
 80049be:	bd80      	pop	{r7, pc}
 80049c0:	0802de8c 	.word	0x0802de8c

080049c4 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
 *
 * @return Pointer to the new Presenter of the requested type. Incidentally it will be the same
 *         value as the old presenter due to memory reuse.
 */
template <class ScreenType, class PresenterType, class TransType, class ModelType>
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 80049c4:	b590      	push	{r4, r7, lr}
 80049c6:	b08f      	sub	sp, #60	; 0x3c
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	60f8      	str	r0, [r7, #12]
 80049cc:	60b9      	str	r1, [r7, #8]
 80049ce:	607a      	str	r2, [r7, #4]
 80049d0:	603b      	str	r3, [r7, #0]
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	689a      	ldr	r2, [r3, #8]
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	689b      	ldr	r3, [r3, #8]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	3320      	adds	r3, #32
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	4610      	mov	r0, r2
 80049e2:	4798      	blx	r3
 80049e4:	4603      	mov	r3, r0
 80049e6:	f5b3 5f02 	cmp.w	r3, #8320	; 0x2080
 80049ea:	d205      	bcs.n	80049f8 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x34>
 80049ec:	4b7e      	ldr	r3, [pc, #504]	; (8004be8 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 80049ee:	4a7f      	ldr	r2, [pc, #508]	; (8004bec <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 80049f0:	21a3      	movs	r1, #163	; 0xa3
 80049f2:	487f      	ldr	r0, [pc, #508]	; (8004bf0 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 80049f4:	f026 ff40 	bl	802b878 <__assert_func>
 80049f8:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	685a      	ldr	r2, [r3, #4]
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	685b      	ldr	r3, [r3, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	3320      	adds	r3, #32
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	4610      	mov	r0, r2
 8004a0a:	4798      	blx	r3
 8004a0c:	4603      	mov	r3, r0
 8004a0e:	2b0f      	cmp	r3, #15
 8004a10:	d805      	bhi.n	8004a1e <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x5a>
 8004a12:	4b78      	ldr	r3, [pc, #480]	; (8004bf4 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 8004a14:	4a75      	ldr	r2, [pc, #468]	; (8004bec <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 8004a16:	21a4      	movs	r1, #164	; 0xa4
 8004a18:	4875      	ldr	r0, [pc, #468]	; (8004bf0 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 8004a1a:	f026 ff2d 	bl	802b878 <__assert_func>
 8004a1e:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	68da      	ldr	r2, [r3, #12]
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	68db      	ldr	r3, [r3, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	3320      	adds	r3, #32
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	4610      	mov	r0, r2
 8004a30:	4798      	blx	r3
 8004a32:	4603      	mov	r3, r0
 8004a34:	2b0b      	cmp	r3, #11
 8004a36:	d805      	bhi.n	8004a44 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x80>
 8004a38:	4b6f      	ldr	r3, [pc, #444]	; (8004bf8 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x234>)
 8004a3a:	4a6c      	ldr	r2, [pc, #432]	; (8004bec <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 8004a3c:	21a5      	movs	r1, #165	; 0xa5
 8004a3e:	486c      	ldr	r0, [pc, #432]	; (8004bf0 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 8004a40:	f026 ff1a 	bl	802b878 <__assert_func>
 8004a44:	bf00      	nop
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a4a:	68bb      	ldr	r3, [r7, #8]
 8004a4c:	627b      	str	r3, [r7, #36]	; 0x24
 8004a4e:	683b      	ldr	r3, [r7, #0]
 8004a50:	623b      	str	r3, [r7, #32]
    Application::getInstance()->clearAllTimerWidgets();
 8004a52:	f019 ff37 	bl	801e8c4 <_ZN8touchgfx11Application11getInstanceEv>
 8004a56:	4603      	mov	r3, r0
 8004a58:	4618      	mov	r0, r3
 8004a5a:	f019 ff81 	bl	801e960 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 8004a5e:	6a3b      	ldr	r3, [r7, #32]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d008      	beq.n	8004a78 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb4>
        (*currentTrans)->tearDown();
 8004a66:	6a3b      	ldr	r3, [r7, #32]
 8004a68:	681a      	ldr	r2, [r3, #0]
 8004a6a:	6a3b      	ldr	r3, [r7, #32]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	330c      	adds	r3, #12
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	4610      	mov	r0, r2
 8004a76:	4798      	blx	r3
    if (*currentTrans)
 8004a78:	6a3b      	ldr	r3, [r7, #32]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d007      	beq.n	8004a90 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xcc>
        (*currentTrans)->~Transition();
 8004a80:	6a3b      	ldr	r3, [r7, #32]
 8004a82:	681a      	ldr	r2, [r3, #0]
 8004a84:	6a3b      	ldr	r3, [r7, #32]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	4610      	mov	r0, r2
 8004a8e:	4798      	blx	r3
    if (*currentScreen)
 8004a90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d008      	beq.n	8004aaa <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe6>
        (*currentScreen)->tearDownScreen();
 8004a98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a9a:	681a      	ldr	r2, [r3, #0]
 8004a9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	3314      	adds	r3, #20
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	4610      	mov	r0, r2
 8004aa8:	4798      	blx	r3
    if (*currentPresenter)
 8004aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d008      	beq.n	8004ac4 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x100>
        (*currentPresenter)->deactivate();
 8004ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ab4:	681a      	ldr	r2, [r3, #0]
 8004ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	3304      	adds	r3, #4
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	4610      	mov	r0, r2
 8004ac2:	4798      	blx	r3
    if (*currentScreen)
 8004ac4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d007      	beq.n	8004adc <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x118>
        (*currentScreen)->~Screen();
 8004acc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ace:	681a      	ldr	r2, [r3, #0]
 8004ad0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	4610      	mov	r0, r2
 8004ada:	4798      	blx	r3
    if (*currentPresenter)
 8004adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d008      	beq.n	8004af6 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x132>
        (*currentPresenter)->~Presenter();
 8004ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ae6:	681a      	ldr	r2, [r3, #0]
 8004ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	3308      	adds	r3, #8
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	4610      	mov	r0, r2
 8004af4:	4798      	blx	r3
}
 8004af6:	bf00      	nop

    prepareTransition(currentScreen, currentPresenter, currentTrans);

    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	68db      	ldr	r3, [r3, #12]
 8004afc:	2100      	movs	r1, #0
 8004afe:	4618      	mov	r0, r3
 8004b00:	f000 fab8 	bl	8005074 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>
 8004b04:	4603      	mov	r3, r0
 8004b06:	4619      	mov	r1, r3
 8004b08:	200c      	movs	r0, #12
 8004b0a:	f7ff fb39 	bl	8004180 <_ZnwjPv>
 8004b0e:	4604      	mov	r4, r0
 8004b10:	4620      	mov	r0, r4
 8004b12:	f7ff ff45 	bl	80049a0 <_ZN8touchgfx12NoTransitionC1Ev>
 8004b16:	637c      	str	r4, [r7, #52]	; 0x34
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	689b      	ldr	r3, [r3, #8]
 8004b1c:	2100      	movs	r1, #0
 8004b1e:	4618      	mov	r0, r3
 8004b20:	f000 fabb 	bl	800509a <_ZN8touchgfx17AbstractPartition2atI11Screen1ViewEERT_t>
 8004b24:	4603      	mov	r3, r0
 8004b26:	4619      	mov	r1, r3
 8004b28:	f44f 5002 	mov.w	r0, #8320	; 0x2080
 8004b2c:	f7ff fb28 	bl	8004180 <_ZnwjPv>
 8004b30:	4604      	mov	r4, r0
 8004b32:	4620      	mov	r0, r4
 8004b34:	f003 fe1a 	bl	800876c <_ZN11Screen1ViewC1Ev>
 8004b38:	633c      	str	r4, [r7, #48]	; 0x30
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	685b      	ldr	r3, [r3, #4]
 8004b3e:	2100      	movs	r1, #0
 8004b40:	4618      	mov	r0, r3
 8004b42:	f000 fabd 	bl	80050c0 <_ZN8touchgfx17AbstractPartition2atI16Screen1PresenterEERT_t>
 8004b46:	4603      	mov	r3, r0
 8004b48:	4619      	mov	r1, r3
 8004b4a:	2010      	movs	r0, #16
 8004b4c:	f7ff fb18 	bl	8004180 <_ZnwjPv>
 8004b50:	4604      	mov	r4, r0
 8004b52:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004b54:	4620      	mov	r0, r4
 8004b56:	f003 fd9b 	bl	8008690 <_ZN16Screen1PresenterC1ER11Screen1View>
 8004b5a:	62fc      	str	r4, [r7, #44]	; 0x2c
    *currentTrans = newTransition;
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004b60:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 8004b62:	68bb      	ldr	r3, [r7, #8]
 8004b64:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004b66:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b6c:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 8004b6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d002      	beq.n	8004b7a <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b6>
 8004b74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b76:	3304      	adds	r3, #4
 8004b78:	e000      	b.n	8004b7c <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b8>
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	4619      	mov	r1, r3
 8004b7e:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8004b80:	f7ff fd26 	bl	80045d0 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 8004b84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b86:	3304      	adds	r3, #4
 8004b88:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	f7ff fd5e 	bl	800464c <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 8004b90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b92:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004b94:	4618      	mov	r0, r3
 8004b96:	f000 faa6 	bl	80050e6 <_ZN8touchgfx4ViewI16Screen1PresenterE4bindERS1_>
 8004b9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b9c:	61fb      	str	r3, [r7, #28]
 8004b9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ba0:	61bb      	str	r3, [r7, #24]
 8004ba2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ba4:	617b      	str	r3, [r7, #20]
    newScreen->setupScreen();
 8004ba6:	69fb      	ldr	r3, [r7, #28]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	330c      	adds	r3, #12
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	69f8      	ldr	r0, [r7, #28]
 8004bb0:	4798      	blx	r3
    newPresenter->activate();
 8004bb2:	69bb      	ldr	r3, [r7, #24]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	69b8      	ldr	r0, [r7, #24]
 8004bba:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 8004bbc:	6979      	ldr	r1, [r7, #20]
 8004bbe:	69f8      	ldr	r0, [r7, #28]
 8004bc0:	f01b fb5e 	bl	8020280 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 8004bc4:	697b      	ldr	r3, [r7, #20]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	3310      	adds	r3, #16
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	6978      	ldr	r0, [r7, #20]
 8004bce:	4798      	blx	r3
    newTransition->invalidate();
 8004bd0:	697b      	ldr	r3, [r7, #20]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	3314      	adds	r3, #20
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	6978      	ldr	r0, [r7, #20]
 8004bda:	4798      	blx	r3
}
 8004bdc:	bf00      	nop

    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);

    return newPresenter;
 8004bde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8004be0:	4618      	mov	r0, r3
 8004be2:	373c      	adds	r7, #60	; 0x3c
 8004be4:	46bd      	mov	sp, r7
 8004be6:	bd90      	pop	{r4, r7, pc}
 8004be8:	0802cddc 	.word	0x0802cddc
 8004bec:	0802ce6c 	.word	0x0802ce6c
 8004bf0:	0802cf70 	.word	0x0802cf70
 8004bf4:	0802cfb8 	.word	0x0802cfb8
 8004bf8:	0802d05c 	.word	0x0802d05c

08004bfc <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 8004bfc:	b590      	push	{r4, r7, lr}
 8004bfe:	b08f      	sub	sp, #60	; 0x3c
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	60f8      	str	r0, [r7, #12]
 8004c04:	60b9      	str	r1, [r7, #8]
 8004c06:	607a      	str	r2, [r7, #4]
 8004c08:	603b      	str	r3, [r7, #0]
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	689a      	ldr	r2, [r3, #8]
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	689b      	ldr	r3, [r3, #8]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	3320      	adds	r3, #32
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	4610      	mov	r0, r2
 8004c1a:	4798      	blx	r3
 8004c1c:	4603      	mov	r3, r0
 8004c1e:	f5b3 5f02 	cmp.w	r3, #8320	; 0x2080
 8004c22:	d205      	bcs.n	8004c30 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x34>
 8004c24:	4b7f      	ldr	r3, [pc, #508]	; (8004e24 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 8004c26:	4a80      	ldr	r2, [pc, #512]	; (8004e28 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 8004c28:	21a3      	movs	r1, #163	; 0xa3
 8004c2a:	4880      	ldr	r0, [pc, #512]	; (8004e2c <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 8004c2c:	f026 fe24 	bl	802b878 <__assert_func>
 8004c30:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	685a      	ldr	r2, [r3, #4]
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	685b      	ldr	r3, [r3, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	3320      	adds	r3, #32
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	4610      	mov	r0, r2
 8004c42:	4798      	blx	r3
 8004c44:	4603      	mov	r3, r0
 8004c46:	2b0f      	cmp	r3, #15
 8004c48:	d805      	bhi.n	8004c56 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x5a>
 8004c4a:	4b79      	ldr	r3, [pc, #484]	; (8004e30 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x234>)
 8004c4c:	4a76      	ldr	r2, [pc, #472]	; (8004e28 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 8004c4e:	21a4      	movs	r1, #164	; 0xa4
 8004c50:	4876      	ldr	r0, [pc, #472]	; (8004e2c <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 8004c52:	f026 fe11 	bl	802b878 <__assert_func>
 8004c56:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	68da      	ldr	r2, [r3, #12]
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	68db      	ldr	r3, [r3, #12]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	3320      	adds	r3, #32
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	4610      	mov	r0, r2
 8004c68:	4798      	blx	r3
 8004c6a:	4603      	mov	r3, r0
 8004c6c:	2b53      	cmp	r3, #83	; 0x53
 8004c6e:	d805      	bhi.n	8004c7c <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x80>
 8004c70:	4b70      	ldr	r3, [pc, #448]	; (8004e34 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x238>)
 8004c72:	4a6d      	ldr	r2, [pc, #436]	; (8004e28 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 8004c74:	21a5      	movs	r1, #165	; 0xa5
 8004c76:	486d      	ldr	r0, [pc, #436]	; (8004e2c <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 8004c78:	f026 fdfe 	bl	802b878 <__assert_func>
 8004c7c:	bf00      	nop
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c82:	68bb      	ldr	r3, [r7, #8]
 8004c84:	627b      	str	r3, [r7, #36]	; 0x24
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	623b      	str	r3, [r7, #32]
    Application::getInstance()->clearAllTimerWidgets();
 8004c8a:	f019 fe1b 	bl	801e8c4 <_ZN8touchgfx11Application11getInstanceEv>
 8004c8e:	4603      	mov	r3, r0
 8004c90:	4618      	mov	r0, r3
 8004c92:	f019 fe65 	bl	801e960 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 8004c96:	6a3b      	ldr	r3, [r7, #32]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d008      	beq.n	8004cb0 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb4>
        (*currentTrans)->tearDown();
 8004c9e:	6a3b      	ldr	r3, [r7, #32]
 8004ca0:	681a      	ldr	r2, [r3, #0]
 8004ca2:	6a3b      	ldr	r3, [r7, #32]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	330c      	adds	r3, #12
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	4610      	mov	r0, r2
 8004cae:	4798      	blx	r3
    if (*currentTrans)
 8004cb0:	6a3b      	ldr	r3, [r7, #32]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d007      	beq.n	8004cc8 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xcc>
        (*currentTrans)->~Transition();
 8004cb8:	6a3b      	ldr	r3, [r7, #32]
 8004cba:	681a      	ldr	r2, [r3, #0]
 8004cbc:	6a3b      	ldr	r3, [r7, #32]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	4610      	mov	r0, r2
 8004cc6:	4798      	blx	r3
    if (*currentScreen)
 8004cc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d008      	beq.n	8004ce2 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe6>
        (*currentScreen)->tearDownScreen();
 8004cd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cd2:	681a      	ldr	r2, [r3, #0]
 8004cd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	3314      	adds	r3, #20
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	4610      	mov	r0, r2
 8004ce0:	4798      	blx	r3
    if (*currentPresenter)
 8004ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d008      	beq.n	8004cfc <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x100>
        (*currentPresenter)->deactivate();
 8004cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cec:	681a      	ldr	r2, [r3, #0]
 8004cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	3304      	adds	r3, #4
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	4610      	mov	r0, r2
 8004cfa:	4798      	blx	r3
    if (*currentScreen)
 8004cfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d007      	beq.n	8004d14 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x118>
        (*currentScreen)->~Screen();
 8004d04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d06:	681a      	ldr	r2, [r3, #0]
 8004d08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	4610      	mov	r0, r2
 8004d12:	4798      	blx	r3
    if (*currentPresenter)
 8004d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d008      	beq.n	8004d2e <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x132>
        (*currentPresenter)->~Presenter();
 8004d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d1e:	681a      	ldr	r2, [r3, #0]
 8004d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	3308      	adds	r3, #8
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	4610      	mov	r0, r2
 8004d2c:	4798      	blx	r3
}
 8004d2e:	bf00      	nop
    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	68db      	ldr	r3, [r3, #12]
 8004d34:	2100      	movs	r1, #0
 8004d36:	4618      	mov	r0, r3
 8004d38:	f000 f9e3 	bl	8005102 <_ZN8touchgfx17AbstractPartition2atINS_15SlideTransitionILNS_9DirectionE3EEEEERT_t>
 8004d3c:	4603      	mov	r3, r0
 8004d3e:	4619      	mov	r1, r3
 8004d40:	2054      	movs	r0, #84	; 0x54
 8004d42:	f7ff fa1d 	bl	8004180 <_ZnwjPv>
 8004d46:	4604      	mov	r4, r0
 8004d48:	2114      	movs	r1, #20
 8004d4a:	4620      	mov	r0, r4
 8004d4c:	f000 fa30 	bl	80051b0 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EEC1Eh>
 8004d50:	637c      	str	r4, [r7, #52]	; 0x34
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	689b      	ldr	r3, [r3, #8]
 8004d56:	2100      	movs	r1, #0
 8004d58:	4618      	mov	r0, r3
 8004d5a:	f000 f99e 	bl	800509a <_ZN8touchgfx17AbstractPartition2atI11Screen1ViewEERT_t>
 8004d5e:	4603      	mov	r3, r0
 8004d60:	4619      	mov	r1, r3
 8004d62:	f44f 5002 	mov.w	r0, #8320	; 0x2080
 8004d66:	f7ff fa0b 	bl	8004180 <_ZnwjPv>
 8004d6a:	4604      	mov	r4, r0
 8004d6c:	4620      	mov	r0, r4
 8004d6e:	f003 fcfd 	bl	800876c <_ZN11Screen1ViewC1Ev>
 8004d72:	633c      	str	r4, [r7, #48]	; 0x30
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	685b      	ldr	r3, [r3, #4]
 8004d78:	2100      	movs	r1, #0
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	f000 f9a0 	bl	80050c0 <_ZN8touchgfx17AbstractPartition2atI16Screen1PresenterEERT_t>
 8004d80:	4603      	mov	r3, r0
 8004d82:	4619      	mov	r1, r3
 8004d84:	2010      	movs	r0, #16
 8004d86:	f7ff f9fb 	bl	8004180 <_ZnwjPv>
 8004d8a:	4604      	mov	r4, r0
 8004d8c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004d8e:	4620      	mov	r0, r4
 8004d90:	f003 fc7e 	bl	8008690 <_ZN16Screen1PresenterC1ER11Screen1View>
 8004d94:	62fc      	str	r4, [r7, #44]	; 0x2c
    *currentTrans = newTransition;
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004d9a:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 8004d9c:	68bb      	ldr	r3, [r7, #8]
 8004d9e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004da0:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004da6:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 8004da8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d002      	beq.n	8004db4 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b8>
 8004dae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004db0:	3304      	adds	r3, #4
 8004db2:	e000      	b.n	8004db6 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1ba>
 8004db4:	2300      	movs	r3, #0
 8004db6:	4619      	mov	r1, r3
 8004db8:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8004dba:	f7ff fc09 	bl	80045d0 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 8004dbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dc0:	3304      	adds	r3, #4
 8004dc2:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	f7ff fc41 	bl	800464c <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 8004dca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dcc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004dce:	4618      	mov	r0, r3
 8004dd0:	f000 f989 	bl	80050e6 <_ZN8touchgfx4ViewI16Screen1PresenterE4bindERS1_>
 8004dd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dd6:	61fb      	str	r3, [r7, #28]
 8004dd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dda:	61bb      	str	r3, [r7, #24]
 8004ddc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004dde:	617b      	str	r3, [r7, #20]
    newScreen->setupScreen();
 8004de0:	69fb      	ldr	r3, [r7, #28]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	330c      	adds	r3, #12
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	69f8      	ldr	r0, [r7, #28]
 8004dea:	4798      	blx	r3
    newPresenter->activate();
 8004dec:	69bb      	ldr	r3, [r7, #24]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	69b8      	ldr	r0, [r7, #24]
 8004df4:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 8004df6:	6979      	ldr	r1, [r7, #20]
 8004df8:	69f8      	ldr	r0, [r7, #28]
 8004dfa:	f01b fa41 	bl	8020280 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 8004dfe:	697b      	ldr	r3, [r7, #20]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	3310      	adds	r3, #16
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	6978      	ldr	r0, [r7, #20]
 8004e08:	4798      	blx	r3
    newTransition->invalidate();
 8004e0a:	697b      	ldr	r3, [r7, #20]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	3314      	adds	r3, #20
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	6978      	ldr	r0, [r7, #20]
 8004e14:	4798      	blx	r3
}
 8004e16:	bf00      	nop
    return newPresenter;
 8004e18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	373c      	adds	r7, #60	; 0x3c
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	bd90      	pop	{r4, r7, pc}
 8004e22:	bf00      	nop
 8004e24:	0802cddc 	.word	0x0802cddc
 8004e28:	0802d100 	.word	0x0802d100
 8004e2c:	0802cf70 	.word	0x0802cf70
 8004e30:	0802cfb8 	.word	0x0802cfb8
 8004e34:	0802d05c 	.word	0x0802d05c

08004e38 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 8004e38:	b590      	push	{r4, r7, lr}
 8004e3a:	b08f      	sub	sp, #60	; 0x3c
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	60f8      	str	r0, [r7, #12]
 8004e40:	60b9      	str	r1, [r7, #8]
 8004e42:	607a      	str	r2, [r7, #4]
 8004e44:	603b      	str	r3, [r7, #0]
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	689a      	ldr	r2, [r3, #8]
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	689b      	ldr	r3, [r3, #8]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	3320      	adds	r3, #32
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	4610      	mov	r0, r2
 8004e56:	4798      	blx	r3
 8004e58:	4603      	mov	r3, r0
 8004e5a:	f5b3 7f26 	cmp.w	r3, #664	; 0x298
 8004e5e:	d205      	bcs.n	8004e6c <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x34>
 8004e60:	4b7f      	ldr	r3, [pc, #508]	; (8005060 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 8004e62:	4a80      	ldr	r2, [pc, #512]	; (8005064 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 8004e64:	21a3      	movs	r1, #163	; 0xa3
 8004e66:	4880      	ldr	r0, [pc, #512]	; (8005068 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 8004e68:	f026 fd06 	bl	802b878 <__assert_func>
 8004e6c:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	685a      	ldr	r2, [r3, #4]
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	685b      	ldr	r3, [r3, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	3320      	adds	r3, #32
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	4610      	mov	r0, r2
 8004e7e:	4798      	blx	r3
 8004e80:	4603      	mov	r3, r0
 8004e82:	2b0f      	cmp	r3, #15
 8004e84:	d805      	bhi.n	8004e92 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x5a>
 8004e86:	4b79      	ldr	r3, [pc, #484]	; (800506c <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x234>)
 8004e88:	4a76      	ldr	r2, [pc, #472]	; (8005064 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 8004e8a:	21a4      	movs	r1, #164	; 0xa4
 8004e8c:	4876      	ldr	r0, [pc, #472]	; (8005068 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 8004e8e:	f026 fcf3 	bl	802b878 <__assert_func>
 8004e92:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	68da      	ldr	r2, [r3, #12]
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	68db      	ldr	r3, [r3, #12]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	3320      	adds	r3, #32
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	4610      	mov	r0, r2
 8004ea4:	4798      	blx	r3
 8004ea6:	4603      	mov	r3, r0
 8004ea8:	2b53      	cmp	r3, #83	; 0x53
 8004eaa:	d805      	bhi.n	8004eb8 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x80>
 8004eac:	4b70      	ldr	r3, [pc, #448]	; (8005070 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x238>)
 8004eae:	4a6d      	ldr	r2, [pc, #436]	; (8005064 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 8004eb0:	21a5      	movs	r1, #165	; 0xa5
 8004eb2:	486d      	ldr	r0, [pc, #436]	; (8005068 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 8004eb4:	f026 fce0 	bl	802b878 <__assert_func>
 8004eb8:	bf00      	nop
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	62bb      	str	r3, [r7, #40]	; 0x28
 8004ebe:	68bb      	ldr	r3, [r7, #8]
 8004ec0:	627b      	str	r3, [r7, #36]	; 0x24
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	623b      	str	r3, [r7, #32]
    Application::getInstance()->clearAllTimerWidgets();
 8004ec6:	f019 fcfd 	bl	801e8c4 <_ZN8touchgfx11Application11getInstanceEv>
 8004eca:	4603      	mov	r3, r0
 8004ecc:	4618      	mov	r0, r3
 8004ece:	f019 fd47 	bl	801e960 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 8004ed2:	6a3b      	ldr	r3, [r7, #32]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d008      	beq.n	8004eec <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb4>
        (*currentTrans)->tearDown();
 8004eda:	6a3b      	ldr	r3, [r7, #32]
 8004edc:	681a      	ldr	r2, [r3, #0]
 8004ede:	6a3b      	ldr	r3, [r7, #32]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	330c      	adds	r3, #12
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	4610      	mov	r0, r2
 8004eea:	4798      	blx	r3
    if (*currentTrans)
 8004eec:	6a3b      	ldr	r3, [r7, #32]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d007      	beq.n	8004f04 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xcc>
        (*currentTrans)->~Transition();
 8004ef4:	6a3b      	ldr	r3, [r7, #32]
 8004ef6:	681a      	ldr	r2, [r3, #0]
 8004ef8:	6a3b      	ldr	r3, [r7, #32]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	4610      	mov	r0, r2
 8004f02:	4798      	blx	r3
    if (*currentScreen)
 8004f04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d008      	beq.n	8004f1e <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe6>
        (*currentScreen)->tearDownScreen();
 8004f0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f0e:	681a      	ldr	r2, [r3, #0]
 8004f10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	3314      	adds	r3, #20
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	4610      	mov	r0, r2
 8004f1c:	4798      	blx	r3
    if (*currentPresenter)
 8004f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d008      	beq.n	8004f38 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x100>
        (*currentPresenter)->deactivate();
 8004f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f28:	681a      	ldr	r2, [r3, #0]
 8004f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	3304      	adds	r3, #4
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	4610      	mov	r0, r2
 8004f36:	4798      	blx	r3
    if (*currentScreen)
 8004f38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d007      	beq.n	8004f50 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x118>
        (*currentScreen)->~Screen();
 8004f40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f42:	681a      	ldr	r2, [r3, #0]
 8004f44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	4610      	mov	r0, r2
 8004f4e:	4798      	blx	r3
    if (*currentPresenter)
 8004f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d008      	beq.n	8004f6a <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x132>
        (*currentPresenter)->~Presenter();
 8004f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f5a:	681a      	ldr	r2, [r3, #0]
 8004f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	3308      	adds	r3, #8
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	4610      	mov	r0, r2
 8004f68:	4798      	blx	r3
}
 8004f6a:	bf00      	nop
    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	68db      	ldr	r3, [r3, #12]
 8004f70:	2100      	movs	r1, #0
 8004f72:	4618      	mov	r0, r3
 8004f74:	f000 f97e 	bl	8005274 <_ZN8touchgfx17AbstractPartition2atINS_15SlideTransitionILNS_9DirectionE2EEEEERT_t>
 8004f78:	4603      	mov	r3, r0
 8004f7a:	4619      	mov	r1, r3
 8004f7c:	2054      	movs	r0, #84	; 0x54
 8004f7e:	f7ff f8ff 	bl	8004180 <_ZnwjPv>
 8004f82:	4604      	mov	r4, r0
 8004f84:	2114      	movs	r1, #20
 8004f86:	4620      	mov	r0, r4
 8004f88:	f000 f9aa 	bl	80052e0 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh>
 8004f8c:	637c      	str	r4, [r7, #52]	; 0x34
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	689b      	ldr	r3, [r3, #8]
 8004f92:	2100      	movs	r1, #0
 8004f94:	4618      	mov	r0, r3
 8004f96:	f000 fa07 	bl	80053a8 <_ZN8touchgfx17AbstractPartition2atI11Screen2ViewEERT_t>
 8004f9a:	4603      	mov	r3, r0
 8004f9c:	4619      	mov	r1, r3
 8004f9e:	f44f 7026 	mov.w	r0, #664	; 0x298
 8004fa2:	f7ff f8ed 	bl	8004180 <_ZnwjPv>
 8004fa6:	4604      	mov	r4, r0
 8004fa8:	4620      	mov	r0, r4
 8004faa:	f003 fca7 	bl	80088fc <_ZN11Screen2ViewC1Ev>
 8004fae:	633c      	str	r4, [r7, #48]	; 0x30
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	685b      	ldr	r3, [r3, #4]
 8004fb4:	2100      	movs	r1, #0
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	f000 fa09 	bl	80053ce <_ZN8touchgfx17AbstractPartition2atI16Screen2PresenterEERT_t>
 8004fbc:	4603      	mov	r3, r0
 8004fbe:	4619      	mov	r1, r3
 8004fc0:	2010      	movs	r0, #16
 8004fc2:	f7ff f8dd 	bl	8004180 <_ZnwjPv>
 8004fc6:	4604      	mov	r4, r0
 8004fc8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004fca:	4620      	mov	r0, r4
 8004fcc:	f003 fc3e 	bl	800884c <_ZN16Screen2PresenterC1ER11Screen2View>
 8004fd0:	62fc      	str	r4, [r7, #44]	; 0x2c
    *currentTrans = newTransition;
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004fd6:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 8004fd8:	68bb      	ldr	r3, [r7, #8]
 8004fda:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004fdc:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004fe2:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 8004fe4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d002      	beq.n	8004ff0 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b8>
 8004fea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fec:	3304      	adds	r3, #4
 8004fee:	e000      	b.n	8004ff2 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1ba>
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	4619      	mov	r1, r3
 8004ff4:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8004ff6:	f7ff faeb 	bl	80045d0 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 8004ffa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ffc:	3304      	adds	r3, #4
 8004ffe:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8005000:	4618      	mov	r0, r3
 8005002:	f7ff fb23 	bl	800464c <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 8005006:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005008:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800500a:	4618      	mov	r0, r3
 800500c:	f000 f9f2 	bl	80053f4 <_ZN8touchgfx4ViewI16Screen2PresenterE4bindERS1_>
 8005010:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005012:	61fb      	str	r3, [r7, #28]
 8005014:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005016:	61bb      	str	r3, [r7, #24]
 8005018:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800501a:	617b      	str	r3, [r7, #20]
    newScreen->setupScreen();
 800501c:	69fb      	ldr	r3, [r7, #28]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	330c      	adds	r3, #12
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	69f8      	ldr	r0, [r7, #28]
 8005026:	4798      	blx	r3
    newPresenter->activate();
 8005028:	69bb      	ldr	r3, [r7, #24]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	69b8      	ldr	r0, [r7, #24]
 8005030:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 8005032:	6979      	ldr	r1, [r7, #20]
 8005034:	69f8      	ldr	r0, [r7, #28]
 8005036:	f01b f923 	bl	8020280 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 800503a:	697b      	ldr	r3, [r7, #20]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	3310      	adds	r3, #16
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	6978      	ldr	r0, [r7, #20]
 8005044:	4798      	blx	r3
    newTransition->invalidate();
 8005046:	697b      	ldr	r3, [r7, #20]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	3314      	adds	r3, #20
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	6978      	ldr	r0, [r7, #20]
 8005050:	4798      	blx	r3
}
 8005052:	bf00      	nop
    return newPresenter;
 8005054:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8005056:	4618      	mov	r0, r3
 8005058:	373c      	adds	r7, #60	; 0x3c
 800505a:	46bd      	mov	sp, r7
 800505c:	bd90      	pop	{r4, r7, pc}
 800505e:	bf00      	nop
 8005060:	0802cddc 	.word	0x0802cddc
 8005064:	0802d218 	.word	0x0802d218
 8005068:	0802cf70 	.word	0x0802cf70
 800506c:	0802cfb8 	.word	0x0802cfb8
 8005070:	0802d05c 	.word	0x0802d05c

08005074 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>:
     * @param  index The index into the Partition storage where the returned object is located.
     *
     * @return A typed reference to the object at the specified index.
     */
    template <typename T>
    T& at(const uint16_t index)
 8005074:	b580      	push	{r7, lr}
 8005076:	b082      	sub	sp, #8
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
 800507c:	460b      	mov	r3, r1
 800507e:	807b      	strh	r3, [r7, #2]
    {
        return *static_cast<T*>(element(index));
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	3324      	adds	r3, #36	; 0x24
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	887a      	ldrh	r2, [r7, #2]
 800508a:	4611      	mov	r1, r2
 800508c:	6878      	ldr	r0, [r7, #4]
 800508e:	4798      	blx	r3
 8005090:	4603      	mov	r3, r0
    }
 8005092:	4618      	mov	r0, r3
 8005094:	3708      	adds	r7, #8
 8005096:	46bd      	mov	sp, r7
 8005098:	bd80      	pop	{r7, pc}

0800509a <_ZN8touchgfx17AbstractPartition2atI11Screen1ViewEERT_t>:
    T& at(const uint16_t index)
 800509a:	b580      	push	{r7, lr}
 800509c:	b082      	sub	sp, #8
 800509e:	af00      	add	r7, sp, #0
 80050a0:	6078      	str	r0, [r7, #4]
 80050a2:	460b      	mov	r3, r1
 80050a4:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	3324      	adds	r3, #36	; 0x24
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	887a      	ldrh	r2, [r7, #2]
 80050b0:	4611      	mov	r1, r2
 80050b2:	6878      	ldr	r0, [r7, #4]
 80050b4:	4798      	blx	r3
 80050b6:	4603      	mov	r3, r0
    }
 80050b8:	4618      	mov	r0, r3
 80050ba:	3708      	adds	r7, #8
 80050bc:	46bd      	mov	sp, r7
 80050be:	bd80      	pop	{r7, pc}

080050c0 <_ZN8touchgfx17AbstractPartition2atI16Screen1PresenterEERT_t>:
    T& at(const uint16_t index)
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b082      	sub	sp, #8
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
 80050c8:	460b      	mov	r3, r1
 80050ca:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	3324      	adds	r3, #36	; 0x24
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	887a      	ldrh	r2, [r7, #2]
 80050d6:	4611      	mov	r1, r2
 80050d8:	6878      	ldr	r0, [r7, #4]
 80050da:	4798      	blx	r3
 80050dc:	4603      	mov	r3, r0
    }
 80050de:	4618      	mov	r0, r3
 80050e0:	3708      	adds	r7, #8
 80050e2:	46bd      	mov	sp, r7
 80050e4:	bd80      	pop	{r7, pc}

080050e6 <_ZN8touchgfx4ViewI16Screen1PresenterE4bindERS1_>:
     * Binds an instance of a specific Presenter type (subclass) to the View instance. This
     * function is called automatically when a new presenter/view pair is activated.
     *
     * @param [in] presenter The specific Presenter to be associated with the View.
     */
    void bind(T& presenter)
 80050e6:	b480      	push	{r7}
 80050e8:	b083      	sub	sp, #12
 80050ea:	af00      	add	r7, sp, #0
 80050ec:	6078      	str	r0, [r7, #4]
 80050ee:	6039      	str	r1, [r7, #0]
    {
        this->presenter = &presenter;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	683a      	ldr	r2, [r7, #0]
 80050f4:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 80050f6:	bf00      	nop
 80050f8:	370c      	adds	r7, #12
 80050fa:	46bd      	mov	sp, r7
 80050fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005100:	4770      	bx	lr

08005102 <_ZN8touchgfx17AbstractPartition2atINS_15SlideTransitionILNS_9DirectionE3EEEEERT_t>:
    T& at(const uint16_t index)
 8005102:	b580      	push	{r7, lr}
 8005104:	b082      	sub	sp, #8
 8005106:	af00      	add	r7, sp, #0
 8005108:	6078      	str	r0, [r7, #4]
 800510a:	460b      	mov	r3, r1
 800510c:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	3324      	adds	r3, #36	; 0x24
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	887a      	ldrh	r2, [r7, #2]
 8005118:	4611      	mov	r1, r2
 800511a:	6878      	ldr	r0, [r7, #4]
 800511c:	4798      	blx	r3
 800511e:	4603      	mov	r3, r0
    }
 8005120:	4618      	mov	r0, r3
 8005122:	3708      	adds	r7, #8
 8005124:	46bd      	mov	sp, r7
 8005126:	bd80      	pop	{r7, pc}

08005128 <_ZN8touchgfx14SnapshotWidgetD1Ev>:
 * A widget that is able to make a snapshot of the area the SnapshotWidget covers into either a
 * Bitmap or into animation storage (if this available). Once the snapshot has been
 * taken using SnapshowWidget::makeSnapshot(), the SnapshotWidget will show the captured
 * snapshot when it is subsequently drawn.
 */
class SnapshotWidget : public Widget
 8005128:	b580      	push	{r7, lr}
 800512a:	b082      	sub	sp, #8
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
 8005130:	4a05      	ldr	r2, [pc, #20]	; (8005148 <_ZN8touchgfx14SnapshotWidgetD1Ev+0x20>)
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	601a      	str	r2, [r3, #0]
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	4618      	mov	r0, r3
 800513a:	f7ff fa95 	bl	8004668 <_ZN8touchgfx6WidgetD1Ev>
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	4618      	mov	r0, r3
 8005142:	3708      	adds	r7, #8
 8005144:	46bd      	mov	sp, r7
 8005146:	bd80      	pop	{r7, pc}
 8005148:	0802fafc 	.word	0x0802fafc

0800514c <_ZN8touchgfx14SnapshotWidgetD0Ev>:
 800514c:	b580      	push	{r7, lr}
 800514e:	b082      	sub	sp, #8
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
 8005154:	6878      	ldr	r0, [r7, #4]
 8005156:	f7ff ffe7 	bl	8005128 <_ZN8touchgfx14SnapshotWidgetD1Ev>
 800515a:	212c      	movs	r1, #44	; 0x2c
 800515c:	6878      	ldr	r0, [r7, #4]
 800515e:	f026 f9b6 	bl	802b4ce <_ZdlPvj>
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	4618      	mov	r0, r3
 8005166:	3708      	adds	r7, #8
 8005168:	46bd      	mov	sp, r7
 800516a:	bd80      	pop	{r7, pc}

0800516c <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE3EEERNS_8DrawableEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 800516c:	b580      	push	{r7, lr}
 800516e:	b082      	sub	sp, #8
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
 8005174:	4a05      	ldr	r2, [pc, #20]	; (800518c <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE3EEERNS_8DrawableEvvED1Ev+0x20>)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	601a      	str	r2, [r3, #0]
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	4618      	mov	r0, r3
 800517e:	f000 f991 	bl	80054a4 <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvED1Ev>
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	4618      	mov	r0, r3
 8005186:	3708      	adds	r7, #8
 8005188:	46bd      	mov	sp, r7
 800518a:	bd80      	pop	{r7, pc}
 800518c:	0802ddb4 	.word	0x0802ddb4

08005190 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE3EEERNS_8DrawableEvvED0Ev>:
 8005190:	b580      	push	{r7, lr}
 8005192:	b082      	sub	sp, #8
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
 8005198:	6878      	ldr	r0, [r7, #4]
 800519a:	f7ff ffe7 	bl	800516c <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE3EEERNS_8DrawableEvvED1Ev>
 800519e:	2110      	movs	r1, #16
 80051a0:	6878      	ldr	r0, [r7, #4]
 80051a2:	f026 f994 	bl	802b4ce <_ZdlPvj>
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	4618      	mov	r0, r3
 80051aa:	3708      	adds	r7, #8
 80051ac:	46bd      	mov	sp, r7
 80051ae:	bd80      	pop	{r7, pc}

080051b0 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EEC1Eh>:
    /**
     * Initializes a new instance of the SlideTransition class.
     *
     * @param  transitionSteps (Optional) Number of steps (ticks) in the transition animation, default is 20.
     */
    SlideTransition(const uint8_t transitionSteps = 20)
 80051b0:	b590      	push	{r4, r7, lr}
 80051b2:	b087      	sub	sp, #28
 80051b4:	af02      	add	r7, sp, #8
 80051b6:	6078      	str	r0, [r7, #4]
 80051b8:	460b      	mov	r3, r1
 80051ba:	70fb      	strb	r3, [r7, #3]
          snapshot(),
          snapshotPtr(&snapshot),
          handleTickCallback(this, &SlideTransition::tickMoveDrawable),
          animationSteps(transitionSteps),
          animationCounter(0),
          calculatedValue(0)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	4618      	mov	r0, r3
 80051c0:	f7ff f974 	bl	80044ac <_ZN8touchgfx10TransitionC1Ev>
 80051c4:	4a26      	ldr	r2, [pc, #152]	; (8005260 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EEC1Eh+0xb0>)
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	601a      	str	r2, [r3, #0]
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	330c      	adds	r3, #12
 80051ce:	4618      	mov	r0, r3
 80051d0:	f016 fde0 	bl	801bd94 <_ZN8touchgfx14SnapshotWidgetC1Ev>
          snapshotPtr(&snapshot),
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	f103 020c 	add.w	r2, r3, #12
          calculatedValue(0)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	639a      	str	r2, [r3, #56]	; 0x38
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	f103 043c 	add.w	r4, r3, #60	; 0x3c
 80051e4:	4a1f      	ldr	r2, [pc, #124]	; (8005264 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EEC1Eh+0xb4>)
 80051e6:	f107 0308 	add.w	r3, r7, #8
 80051ea:	e892 0003 	ldmia.w	r2, {r0, r1}
 80051ee:	e883 0003 	stmia.w	r3, {r0, r1}
 80051f2:	f107 0308 	add.w	r3, r7, #8
 80051f6:	cb0c      	ldmia	r3, {r2, r3}
 80051f8:	6879      	ldr	r1, [r7, #4]
 80051fa:	4620      	mov	r0, r4
 80051fc:	f000 f932 	bl	8005464 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE3EEERNS_8DrawableEvvEC1EPS3_MS3_FvS5_E>
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	78fa      	ldrb	r2, [r7, #3]
 8005204:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2200      	movs	r2, #0
 800520c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2200      	movs	r2, #0
 8005214:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    {
        if (HAL::USE_ANIMATION_STORAGE)
 8005218:	4b13      	ldr	r3, [pc, #76]	; (8005268 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EEC1Eh+0xb8>)
 800521a:	781b      	ldrb	r3, [r3, #0]
 800521c:	2b00      	cmp	r3, #0
 800521e:	d01a      	beq.n	8005256 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EEC1Eh+0xa6>
        {
            snapshot.setPosition(0, 0, HAL::DISPLAY_WIDTH, HAL::DISPLAY_HEIGHT);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	f103 000c 	add.w	r0, r3, #12
 8005226:	4b11      	ldr	r3, [pc, #68]	; (800526c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EEC1Eh+0xbc>)
 8005228:	881b      	ldrh	r3, [r3, #0]
 800522a:	b21a      	sxth	r2, r3
 800522c:	4b10      	ldr	r3, [pc, #64]	; (8005270 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EEC1Eh+0xc0>)
 800522e:	881b      	ldrh	r3, [r3, #0]
 8005230:	b21b      	sxth	r3, r3
 8005232:	9300      	str	r3, [sp, #0]
 8005234:	4613      	mov	r3, r2
 8005236:	2200      	movs	r2, #0
 8005238:	2100      	movs	r1, #0
 800523a:	f7fe ffd8 	bl	80041ee <_ZN8touchgfx8Drawable11setPositionEssss>
            snapshot.makeSnapshot();
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	330c      	adds	r3, #12
 8005242:	4618      	mov	r0, r3
 8005244:	f016 fd2a 	bl	801bc9c <_ZN8touchgfx14SnapshotWidget12makeSnapshotEv>
            {
            case EAST:
                targetValue = -HAL::DISPLAY_WIDTH;
                break;
            case WEST:
                targetValue = HAL::DISPLAY_WIDTH;
 8005248:	4b08      	ldr	r3, [pc, #32]	; (800526c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EEC1Eh+0xbc>)
 800524a:	881b      	ldrh	r3, [r3, #0]
 800524c:	b21a      	sxth	r2, r3
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
                break;
 8005254:	bf00      	nop
                done = true;
                // Nothing to do here
                break;
            }
        }
    }
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	4618      	mov	r0, r3
 800525a:	3714      	adds	r7, #20
 800525c:	46bd      	mov	sp, r7
 800525e:	bd90      	pop	{r4, r7, pc}
 8005260:	0802dd88 	.word	0x0802dd88
 8005264:	0802d330 	.word	0x0802d330
 8005268:	2400c8bb 	.word	0x2400c8bb
 800526c:	2400c8b0 	.word	0x2400c8b0
 8005270:	2400c8b2 	.word	0x2400c8b2

08005274 <_ZN8touchgfx17AbstractPartition2atINS_15SlideTransitionILNS_9DirectionE2EEEEERT_t>:
    T& at(const uint16_t index)
 8005274:	b580      	push	{r7, lr}
 8005276:	b082      	sub	sp, #8
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
 800527c:	460b      	mov	r3, r1
 800527e:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	3324      	adds	r3, #36	; 0x24
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	887a      	ldrh	r2, [r7, #2]
 800528a:	4611      	mov	r1, r2
 800528c:	6878      	ldr	r0, [r7, #4]
 800528e:	4798      	blx	r3
 8005290:	4603      	mov	r3, r0
    }
 8005292:	4618      	mov	r0, r3
 8005294:	3708      	adds	r7, #8
 8005296:	46bd      	mov	sp, r7
 8005298:	bd80      	pop	{r7, pc}
	...

0800529c <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvED1Ev>:
 800529c:	b580      	push	{r7, lr}
 800529e:	b082      	sub	sp, #8
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
 80052a4:	4a05      	ldr	r2, [pc, #20]	; (80052bc <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvED1Ev+0x20>)
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	601a      	str	r2, [r3, #0]
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	4618      	mov	r0, r3
 80052ae:	f000 f8f9 	bl	80054a4 <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvED1Ev>
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	4618      	mov	r0, r3
 80052b6:	3708      	adds	r7, #8
 80052b8:	46bd      	mov	sp, r7
 80052ba:	bd80      	pop	{r7, pc}
 80052bc:	0802ddf8 	.word	0x0802ddf8

080052c0 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvED0Ev>:
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b082      	sub	sp, #8
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
 80052c8:	6878      	ldr	r0, [r7, #4]
 80052ca:	f7ff ffe7 	bl	800529c <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvED1Ev>
 80052ce:	2110      	movs	r1, #16
 80052d0:	6878      	ldr	r0, [r7, #4]
 80052d2:	f026 f8fc 	bl	802b4ce <_ZdlPvj>
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	4618      	mov	r0, r3
 80052da:	3708      	adds	r7, #8
 80052dc:	46bd      	mov	sp, r7
 80052de:	bd80      	pop	{r7, pc}

080052e0 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh>:
    SlideTransition(const uint8_t transitionSteps = 20)
 80052e0:	b590      	push	{r4, r7, lr}
 80052e2:	b087      	sub	sp, #28
 80052e4:	af02      	add	r7, sp, #8
 80052e6:	6078      	str	r0, [r7, #4]
 80052e8:	460b      	mov	r3, r1
 80052ea:	70fb      	strb	r3, [r7, #3]
          calculatedValue(0)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	4618      	mov	r0, r3
 80052f0:	f7ff f8dc 	bl	80044ac <_ZN8touchgfx10TransitionC1Ev>
 80052f4:	4a27      	ldr	r2, [pc, #156]	; (8005394 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0xb4>)
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	601a      	str	r2, [r3, #0]
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	330c      	adds	r3, #12
 80052fe:	4618      	mov	r0, r3
 8005300:	f016 fd48 	bl	801bd94 <_ZN8touchgfx14SnapshotWidgetC1Ev>
          snapshotPtr(&snapshot),
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	f103 020c 	add.w	r2, r3, #12
          calculatedValue(0)
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	639a      	str	r2, [r3, #56]	; 0x38
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	f103 043c 	add.w	r4, r3, #60	; 0x3c
 8005314:	4a20      	ldr	r2, [pc, #128]	; (8005398 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0xb8>)
 8005316:	f107 0308 	add.w	r3, r7, #8
 800531a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800531e:	e883 0003 	stmia.w	r3, {r0, r1}
 8005322:	f107 0308 	add.w	r3, r7, #8
 8005326:	cb0c      	ldmia	r3, {r2, r3}
 8005328:	6879      	ldr	r1, [r7, #4]
 800532a:	4620      	mov	r0, r4
 800532c:	f000 f8f4 	bl	8005518 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvEC1EPS3_MS3_FvS5_E>
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	78fa      	ldrb	r2, [r7, #3]
 8005334:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2200      	movs	r2, #0
 800533c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2200      	movs	r2, #0
 8005344:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
        if (HAL::USE_ANIMATION_STORAGE)
 8005348:	4b14      	ldr	r3, [pc, #80]	; (800539c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0xbc>)
 800534a:	781b      	ldrb	r3, [r3, #0]
 800534c:	2b00      	cmp	r3, #0
 800534e:	d01c      	beq.n	800538a <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0xaa>
            snapshot.setPosition(0, 0, HAL::DISPLAY_WIDTH, HAL::DISPLAY_HEIGHT);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	f103 000c 	add.w	r0, r3, #12
 8005356:	4b12      	ldr	r3, [pc, #72]	; (80053a0 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0xc0>)
 8005358:	881b      	ldrh	r3, [r3, #0]
 800535a:	b21a      	sxth	r2, r3
 800535c:	4b11      	ldr	r3, [pc, #68]	; (80053a4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0xc4>)
 800535e:	881b      	ldrh	r3, [r3, #0]
 8005360:	b21b      	sxth	r3, r3
 8005362:	9300      	str	r3, [sp, #0]
 8005364:	4613      	mov	r3, r2
 8005366:	2200      	movs	r2, #0
 8005368:	2100      	movs	r1, #0
 800536a:	f7fe ff40 	bl	80041ee <_ZN8touchgfx8Drawable11setPositionEssss>
            snapshot.makeSnapshot();
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	330c      	adds	r3, #12
 8005372:	4618      	mov	r0, r3
 8005374:	f016 fc92 	bl	801bc9c <_ZN8touchgfx14SnapshotWidget12makeSnapshotEv>
                targetValue = -HAL::DISPLAY_WIDTH;
 8005378:	4b09      	ldr	r3, [pc, #36]	; (80053a0 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0xc0>)
 800537a:	881b      	ldrh	r3, [r3, #0]
 800537c:	425b      	negs	r3, r3
 800537e:	b29b      	uxth	r3, r3
 8005380:	b21a      	sxth	r2, r3
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
                break;
 8005388:	bf00      	nop
    }
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	4618      	mov	r0, r3
 800538e:	3714      	adds	r7, #20
 8005390:	46bd      	mov	sp, r7
 8005392:	bd90      	pop	{r4, r7, pc}
 8005394:	0802ddcc 	.word	0x0802ddcc
 8005398:	0802d338 	.word	0x0802d338
 800539c:	2400c8bb 	.word	0x2400c8bb
 80053a0:	2400c8b0 	.word	0x2400c8b0
 80053a4:	2400c8b2 	.word	0x2400c8b2

080053a8 <_ZN8touchgfx17AbstractPartition2atI11Screen2ViewEERT_t>:
    T& at(const uint16_t index)
 80053a8:	b580      	push	{r7, lr}
 80053aa:	b082      	sub	sp, #8
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]
 80053b0:	460b      	mov	r3, r1
 80053b2:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	3324      	adds	r3, #36	; 0x24
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	887a      	ldrh	r2, [r7, #2]
 80053be:	4611      	mov	r1, r2
 80053c0:	6878      	ldr	r0, [r7, #4]
 80053c2:	4798      	blx	r3
 80053c4:	4603      	mov	r3, r0
    }
 80053c6:	4618      	mov	r0, r3
 80053c8:	3708      	adds	r7, #8
 80053ca:	46bd      	mov	sp, r7
 80053cc:	bd80      	pop	{r7, pc}

080053ce <_ZN8touchgfx17AbstractPartition2atI16Screen2PresenterEERT_t>:
    T& at(const uint16_t index)
 80053ce:	b580      	push	{r7, lr}
 80053d0:	b082      	sub	sp, #8
 80053d2:	af00      	add	r7, sp, #0
 80053d4:	6078      	str	r0, [r7, #4]
 80053d6:	460b      	mov	r3, r1
 80053d8:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	3324      	adds	r3, #36	; 0x24
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	887a      	ldrh	r2, [r7, #2]
 80053e4:	4611      	mov	r1, r2
 80053e6:	6878      	ldr	r0, [r7, #4]
 80053e8:	4798      	blx	r3
 80053ea:	4603      	mov	r3, r0
    }
 80053ec:	4618      	mov	r0, r3
 80053ee:	3708      	adds	r7, #8
 80053f0:	46bd      	mov	sp, r7
 80053f2:	bd80      	pop	{r7, pc}

080053f4 <_ZN8touchgfx4ViewI16Screen2PresenterE4bindERS1_>:
    void bind(T& presenter)
 80053f4:	b480      	push	{r7}
 80053f6:	b083      	sub	sp, #12
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
 80053fc:	6039      	str	r1, [r7, #0]
        this->presenter = &presenter;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	683a      	ldr	r2, [r7, #0]
 8005402:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 8005404:	bf00      	nop
 8005406:	370c      	adds	r7, #12
 8005408:	46bd      	mov	sp, r7
 800540a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540e:	4770      	bx	lr

08005410 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE16tickMoveDrawableERNS_8DrawableE>:
    /**
     * Moves the Drawable.
     *
     * @param [in] d The Drawable to move.
     */
    virtual void tickMoveDrawable(Drawable& d)
 8005410:	b580      	push	{r7, lr}
 8005412:	b082      	sub	sp, #8
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
 8005418:	6039      	str	r1, [r7, #0]
    {
        if (&d == snapshotPtr)
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800541e:	683a      	ldr	r2, [r7, #0]
 8005420:	429a      	cmp	r2, r3
 8005422:	d00a      	beq.n	800543a <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE16tickMoveDrawableERNS_8DrawableE+0x2a>

        switch (templateDirection)
        {
        case EAST:
        case WEST:
            d.moveRelative(calculatedValue, 0);
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	3350      	adds	r3, #80	; 0x50
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	687a      	ldr	r2, [r7, #4]
 800542e:	f9b2 1050 	ldrsh.w	r1, [r2, #80]	; 0x50
 8005432:	2200      	movs	r2, #0
 8005434:	6838      	ldr	r0, [r7, #0]
 8005436:	4798      	blx	r3
            break;
 8005438:	e000      	b.n	800543c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE16tickMoveDrawableERNS_8DrawableE+0x2c>
            return;
 800543a:	bf00      	nop
        default:
            // Special case, do not move. Class NoTransition can be used instead.
            done = true;
            break;
        }
    }
 800543c:	3708      	adds	r7, #8
 800543e:	46bd      	mov	sp, r7
 8005440:	bd80      	pop	{r7, pc}
	...

08005444 <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvEC1Ev>:
class GenericCallback<T1, void, void>
 8005444:	b480      	push	{r7}
 8005446:	b083      	sub	sp, #12
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]
 800544c:	4a04      	ldr	r2, [pc, #16]	; (8005460 <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvEC1Ev+0x1c>)
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	601a      	str	r2, [r3, #0]
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	4618      	mov	r0, r3
 8005456:	370c      	adds	r7, #12
 8005458:	46bd      	mov	sp, r7
 800545a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545e:	4770      	bx	lr
 8005460:	0802de10 	.word	0x0802de10

08005464 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE3EEERNS_8DrawableEvvEC1EPS3_MS3_FvS5_E>:
    Callback(dest_type* pobject, void (dest_type::*pmemfun_1)(T1))
 8005464:	b580      	push	{r7, lr}
 8005466:	b084      	sub	sp, #16
 8005468:	af00      	add	r7, sp, #0
 800546a:	60f8      	str	r0, [r7, #12]
 800546c:	60b9      	str	r1, [r7, #8]
 800546e:	4639      	mov	r1, r7
 8005470:	e881 000c 	stmia.w	r1, {r2, r3}
        : pobject(pobject), pmemfun_1(pmemfun_1)
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	4618      	mov	r0, r3
 8005478:	f7ff ffe4 	bl	8005444 <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvEC1Ev>
 800547c:	4a08      	ldr	r2, [pc, #32]	; (80054a0 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE3EEERNS_8DrawableEvvEC1EPS3_MS3_FvS5_E+0x3c>)
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	601a      	str	r2, [r3, #0]
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	68ba      	ldr	r2, [r7, #8]
 8005486:	605a      	str	r2, [r3, #4]
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	3308      	adds	r3, #8
 800548c:	463a      	mov	r2, r7
 800548e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005492:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	4618      	mov	r0, r3
 800549a:	3710      	adds	r7, #16
 800549c:	46bd      	mov	sp, r7
 800549e:	bd80      	pop	{r7, pc}
 80054a0:	0802ddb4 	.word	0x0802ddb4

080054a4 <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvED1Ev>:
    virtual ~GenericCallback()
 80054a4:	b480      	push	{r7}
 80054a6:	b083      	sub	sp, #12
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
    }
 80054ac:	4a04      	ldr	r2, [pc, #16]	; (80054c0 <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvED1Ev+0x1c>)
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	601a      	str	r2, [r3, #0]
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	4618      	mov	r0, r3
 80054b6:	370c      	adds	r7, #12
 80054b8:	46bd      	mov	sp, r7
 80054ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054be:	4770      	bx	lr
 80054c0:	0802de10 	.word	0x0802de10

080054c4 <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvED0Ev>:
    virtual ~GenericCallback()
 80054c4:	b580      	push	{r7, lr}
 80054c6:	b082      	sub	sp, #8
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
    }
 80054cc:	6878      	ldr	r0, [r7, #4]
 80054ce:	f7ff ffe9 	bl	80054a4 <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvED1Ev>
 80054d2:	2104      	movs	r1, #4
 80054d4:	6878      	ldr	r0, [r7, #4]
 80054d6:	f025 fffa 	bl	802b4ce <_ZdlPvj>
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	4618      	mov	r0, r3
 80054de:	3708      	adds	r7, #8
 80054e0:	46bd      	mov	sp, r7
 80054e2:	bd80      	pop	{r7, pc}

080054e4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16tickMoveDrawableERNS_8DrawableE>:
    virtual void tickMoveDrawable(Drawable& d)
 80054e4:	b580      	push	{r7, lr}
 80054e6:	b082      	sub	sp, #8
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
 80054ec:	6039      	str	r1, [r7, #0]
        if (&d == snapshotPtr)
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054f2:	683a      	ldr	r2, [r7, #0]
 80054f4:	429a      	cmp	r2, r3
 80054f6:	d00a      	beq.n	800550e <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16tickMoveDrawableERNS_8DrawableE+0x2a>
            d.moveRelative(calculatedValue, 0);
 80054f8:	683b      	ldr	r3, [r7, #0]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	3350      	adds	r3, #80	; 0x50
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	687a      	ldr	r2, [r7, #4]
 8005502:	f9b2 1050 	ldrsh.w	r1, [r2, #80]	; 0x50
 8005506:	2200      	movs	r2, #0
 8005508:	6838      	ldr	r0, [r7, #0]
 800550a:	4798      	blx	r3
            break;
 800550c:	e000      	b.n	8005510 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16tickMoveDrawableERNS_8DrawableE+0x2c>
            return;
 800550e:	bf00      	nop
    }
 8005510:	3708      	adds	r7, #8
 8005512:	46bd      	mov	sp, r7
 8005514:	bd80      	pop	{r7, pc}
	...

08005518 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvEC1EPS3_MS3_FvS5_E>:
    Callback(dest_type* pobject, void (dest_type::*pmemfun_1)(T1))
 8005518:	b580      	push	{r7, lr}
 800551a:	b084      	sub	sp, #16
 800551c:	af00      	add	r7, sp, #0
 800551e:	60f8      	str	r0, [r7, #12]
 8005520:	60b9      	str	r1, [r7, #8]
 8005522:	4639      	mov	r1, r7
 8005524:	e881 000c 	stmia.w	r1, {r2, r3}
        : pobject(pobject), pmemfun_1(pmemfun_1)
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	4618      	mov	r0, r3
 800552c:	f7ff ff8a 	bl	8005444 <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvEC1Ev>
 8005530:	4a08      	ldr	r2, [pc, #32]	; (8005554 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvEC1EPS3_MS3_FvS5_E+0x3c>)
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	601a      	str	r2, [r3, #0]
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	68ba      	ldr	r2, [r7, #8]
 800553a:	605a      	str	r2, [r3, #4]
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	3308      	adds	r3, #8
 8005540:	463a      	mov	r2, r7
 8005542:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005546:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	4618      	mov	r0, r3
 800554e:	3710      	adds	r7, #16
 8005550:	46bd      	mov	sp, r7
 8005552:	bd80      	pop	{r7, pc}
 8005554:	0802ddf8 	.word	0x0802ddf8

08005558 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EED1Ev>:
class SlideTransition : public Transition
 8005558:	b580      	push	{r7, lr}
 800555a:	b082      	sub	sp, #8
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]
 8005560:	4a0a      	ldr	r2, [pc, #40]	; (800558c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EED1Ev+0x34>)
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	601a      	str	r2, [r3, #0]
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	333c      	adds	r3, #60	; 0x3c
 800556a:	4618      	mov	r0, r3
 800556c:	f7ff fdfe 	bl	800516c <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE3EEERNS_8DrawableEvvED1Ev>
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	330c      	adds	r3, #12
 8005574:	4618      	mov	r0, r3
 8005576:	f7ff fdd7 	bl	8005128 <_ZN8touchgfx14SnapshotWidgetD1Ev>
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	4618      	mov	r0, r3
 800557e:	f7fe ffab 	bl	80044d8 <_ZN8touchgfx10TransitionD1Ev>
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	4618      	mov	r0, r3
 8005586:	3708      	adds	r7, #8
 8005588:	46bd      	mov	sp, r7
 800558a:	bd80      	pop	{r7, pc}
 800558c:	0802dd88 	.word	0x0802dd88

08005590 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EED0Ev>:
 8005590:	b580      	push	{r7, lr}
 8005592:	b082      	sub	sp, #8
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
 8005598:	6878      	ldr	r0, [r7, #4]
 800559a:	f7ff ffdd 	bl	8005558 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EED1Ev>
 800559e:	2154      	movs	r1, #84	; 0x54
 80055a0:	6878      	ldr	r0, [r7, #4]
 80055a2:	f025 ff94 	bl	802b4ce <_ZdlPvj>
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	4618      	mov	r0, r3
 80055aa:	3708      	adds	r7, #8
 80055ac:	46bd      	mov	sp, r7
 80055ae:	bd80      	pop	{r7, pc}

080055b0 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EED1Ev>:
 80055b0:	b580      	push	{r7, lr}
 80055b2:	b082      	sub	sp, #8
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
 80055b8:	4a0a      	ldr	r2, [pc, #40]	; (80055e4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EED1Ev+0x34>)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	601a      	str	r2, [r3, #0]
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	333c      	adds	r3, #60	; 0x3c
 80055c2:	4618      	mov	r0, r3
 80055c4:	f7ff fe6a 	bl	800529c <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvED1Ev>
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	330c      	adds	r3, #12
 80055cc:	4618      	mov	r0, r3
 80055ce:	f7ff fdab 	bl	8005128 <_ZN8touchgfx14SnapshotWidgetD1Ev>
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	4618      	mov	r0, r3
 80055d6:	f7fe ff7f 	bl	80044d8 <_ZN8touchgfx10TransitionD1Ev>
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	4618      	mov	r0, r3
 80055de:	3708      	adds	r7, #8
 80055e0:	46bd      	mov	sp, r7
 80055e2:	bd80      	pop	{r7, pc}
 80055e4:	0802ddcc 	.word	0x0802ddcc

080055e8 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EED0Ev>:
 80055e8:	b580      	push	{r7, lr}
 80055ea:	b082      	sub	sp, #8
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]
 80055f0:	6878      	ldr	r0, [r7, #4]
 80055f2:	f7ff ffdd 	bl	80055b0 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EED1Ev>
 80055f6:	2154      	movs	r1, #84	; 0x54
 80055f8:	6878      	ldr	r0, [r7, #4]
 80055fa:	f025 ff68 	bl	802b4ce <_ZdlPvj>
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	4618      	mov	r0, r3
 8005602:	3708      	adds	r7, #8
 8005604:	46bd      	mov	sp, r7
 8005606:	bd80      	pop	{r7, pc}

08005608 <_ZN8touchgfx12NoTransitionD1Ev>:
 8005608:	b580      	push	{r7, lr}
 800560a:	b082      	sub	sp, #8
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
 8005610:	4a05      	ldr	r2, [pc, #20]	; (8005628 <_ZN8touchgfx12NoTransitionD1Ev+0x20>)
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	601a      	str	r2, [r3, #0]
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	4618      	mov	r0, r3
 800561a:	f7fe ff5d 	bl	80044d8 <_ZN8touchgfx10TransitionD1Ev>
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	4618      	mov	r0, r3
 8005622:	3708      	adds	r7, #8
 8005624:	46bd      	mov	sp, r7
 8005626:	bd80      	pop	{r7, pc}
 8005628:	0802de8c 	.word	0x0802de8c

0800562c <_ZN8touchgfx12NoTransitionD0Ev>:
 800562c:	b580      	push	{r7, lr}
 800562e:	b082      	sub	sp, #8
 8005630:	af00      	add	r7, sp, #0
 8005632:	6078      	str	r0, [r7, #4]
 8005634:	6878      	ldr	r0, [r7, #4]
 8005636:	f7ff ffe7 	bl	8005608 <_ZN8touchgfx12NoTransitionD1Ev>
 800563a:	210c      	movs	r1, #12
 800563c:	6878      	ldr	r0, [r7, #4]
 800563e:	f025 ff46 	bl	802b4ce <_ZdlPvj>
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	4618      	mov	r0, r3
 8005646:	3708      	adds	r7, #8
 8005648:	46bd      	mov	sp, r7
 800564a:	bd80      	pop	{r7, pc}

0800564c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE15handleTickEventEv>:
    virtual void handleTickEvent()
 800564c:	b580      	push	{r7, lr}
 800564e:	b082      	sub	sp, #8
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
        if (!HAL::USE_ANIMATION_STORAGE)
 8005654:	4b40      	ldr	r3, [pc, #256]	; (8005758 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE15handleTickEventEv+0x10c>)
 8005656:	781b      	ldrb	r3, [r3, #0]
 8005658:	f083 0301 	eor.w	r3, r3, #1
 800565c:	b2db      	uxtb	r3, r3
 800565e:	2b00      	cmp	r3, #0
 8005660:	d003      	beq.n	800566a <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE15handleTickEventEv+0x1e>
            done = true;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	2201      	movs	r2, #1
 8005666:	721a      	strb	r2, [r3, #8]
            return;
 8005668:	e073      	b.n	8005752 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE15handleTickEventEv+0x106>
        Transition::handleTickEvent();
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	4618      	mov	r0, r3
 800566e:	f7fe ff53 	bl	8004518 <_ZN8touchgfx10Transition15handleTickEventEv>
        animationCounter++;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8005678:	3301      	adds	r3, #1
 800567a:	b2da      	uxtb	r2, r3
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
        if (animationCounter <= animationSteps)
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	f893 204d 	ldrb.w	r2, [r3, #77]	; 0x4d
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800568e:	429a      	cmp	r2, r3
 8005690:	d82f      	bhi.n	80056f2 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE15handleTickEventEv+0xa6>
            calculatedValue = EasingEquations::cubicEaseOut(animationCounter, 0, targetValue, animationSteps);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8005698:	b298      	uxth	r0, r3
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	f9b3 204e 	ldrsh.w	r2, [r3, #78]	; 0x4e
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80056a6:	b29b      	uxth	r3, r3
 80056a8:	2100      	movs	r1, #0
 80056aa:	f01a fdef 	bl	802028c <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>
 80056ae:	4603      	mov	r3, r0
 80056b0:	461a      	mov	r2, r3
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
            if (calculatedValue % 2)
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	f9b3 3050 	ldrsh.w	r3, [r3, #80]	; 0x50
 80056be:	b29b      	uxth	r3, r3
 80056c0:	f003 0301 	and.w	r3, r3, #1
 80056c4:	b29b      	uxth	r3, r3
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d01b      	beq.n	8005702 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE15handleTickEventEv+0xb6>
                calculatedValue += (calculatedValue > 0 ? 1 : -1);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	f9b3 3050 	ldrsh.w	r3, [r3, #80]	; 0x50
 80056d0:	b29b      	uxth	r3, r3
 80056d2:	687a      	ldr	r2, [r7, #4]
 80056d4:	f9b2 2050 	ldrsh.w	r2, [r2, #80]	; 0x50
 80056d8:	2a00      	cmp	r2, #0
 80056da:	dd01      	ble.n	80056e0 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE15handleTickEventEv+0x94>
 80056dc:	2201      	movs	r2, #1
 80056de:	e001      	b.n	80056e4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE15handleTickEventEv+0x98>
 80056e0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80056e4:	4413      	add	r3, r2
 80056e6:	b29b      	uxth	r3, r3
 80056e8:	b21a      	sxth	r2, r3
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
 80056f0:	e007      	b.n	8005702 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE15handleTickEventEv+0xb6>
            done = true;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	2201      	movs	r2, #1
 80056f6:	721a      	strb	r2, [r3, #8]
            animationCounter = 0;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2200      	movs	r2, #0
 80056fc:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
            return;
 8005700:	e027      	b.n	8005752 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE15handleTickEventEv+0x106>
            calculatedValue -= snapshot.getX();
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	330c      	adds	r3, #12
 8005706:	4618      	mov	r0, r3
 8005708:	f7fe fd92 	bl	8004230 <_ZNK8touchgfx8Drawable4getXEv>
 800570c:	4603      	mov	r3, r0
 800570e:	4619      	mov	r1, r3
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	f9b3 3050 	ldrsh.w	r3, [r3, #80]	; 0x50
 8005716:	b29a      	uxth	r2, r3
 8005718:	b28b      	uxth	r3, r1
 800571a:	1ad3      	subs	r3, r2, r3
 800571c:	b29b      	uxth	r3, r3
 800571e:	b21a      	sxth	r2, r3
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
            snapshot.moveRelative(calculatedValue, 0);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	f103 000c 	add.w	r0, r3, #12
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	f9b3 3050 	ldrsh.w	r3, [r3, #80]	; 0x50
 8005732:	2200      	movs	r2, #0
 8005734:	4619      	mov	r1, r3
 8005736:	f01a f90d 	bl	801f954 <_ZN8touchgfx8Drawable12moveRelativeEss>
            break;
 800573a:	bf00      	nop
        screenContainer->forEachChild(&handleTickCallback);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	6858      	ldr	r0, [r3, #4]
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	685b      	ldr	r3, [r3, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	3378      	adds	r3, #120	; 0x78
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	687a      	ldr	r2, [r7, #4]
 800574c:	323c      	adds	r2, #60	; 0x3c
 800574e:	4611      	mov	r1, r2
 8005750:	4798      	blx	r3
    }
 8005752:	3708      	adds	r7, #8
 8005754:	46bd      	mov	sp, r7
 8005756:	bd80      	pop	{r7, pc}
 8005758:	2400c8bb 	.word	0x2400c8bb

0800575c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE8tearDownEv>:
    virtual void tearDown()
 800575c:	b580      	push	{r7, lr}
 800575e:	b082      	sub	sp, #8
 8005760:	af00      	add	r7, sp, #0
 8005762:	6078      	str	r0, [r7, #4]
        if (HAL::USE_ANIMATION_STORAGE && screenContainer)
 8005764:	4b0b      	ldr	r3, [pc, #44]	; (8005794 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE8tearDownEv+0x38>)
 8005766:	781b      	ldrb	r3, [r3, #0]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d00e      	beq.n	800578a <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE8tearDownEv+0x2e>
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	685b      	ldr	r3, [r3, #4]
 8005770:	2b00      	cmp	r3, #0
 8005772:	d00a      	beq.n	800578a <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE8tearDownEv+0x2e>
            screenContainer->remove(snapshot);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	6858      	ldr	r0, [r3, #4]
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	685b      	ldr	r3, [r3, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	3360      	adds	r3, #96	; 0x60
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	687a      	ldr	r2, [r7, #4]
 8005784:	320c      	adds	r2, #12
 8005786:	4611      	mov	r1, r2
 8005788:	4798      	blx	r3
    }
 800578a:	bf00      	nop
 800578c:	3708      	adds	r7, #8
 800578e:	46bd      	mov	sp, r7
 8005790:	bd80      	pop	{r7, pc}
 8005792:	bf00      	nop
 8005794:	2400c8bb 	.word	0x2400c8bb

08005798 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE4initEv>:
    virtual void init()
 8005798:	b580      	push	{r7, lr}
 800579a:	b088      	sub	sp, #32
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]
        if (HAL::USE_ANIMATION_STORAGE)
 80057a0:	4b1a      	ldr	r3, [pc, #104]	; (800580c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE4initEv+0x74>)
 80057a2:	781b      	ldrb	r3, [r3, #0]
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d02d      	beq.n	8005804 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE4initEv+0x6c>
            Transition::init();
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	4618      	mov	r0, r3
 80057ac:	f7fe fec8 	bl	8004540 <_ZN8touchgfx10Transition4initEv>
            Callback<SlideTransition, Drawable&> initCallback(this, &SlideTransition::initMoveDrawable);
 80057b0:	4a17      	ldr	r2, [pc, #92]	; (8005810 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE4initEv+0x78>)
 80057b2:	f107 0318 	add.w	r3, r7, #24
 80057b6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80057ba:	e883 0003 	stmia.w	r3, {r0, r1}
 80057be:	f107 0008 	add.w	r0, r7, #8
 80057c2:	f107 0318 	add.w	r3, r7, #24
 80057c6:	cb0c      	ldmia	r3, {r2, r3}
 80057c8:	6879      	ldr	r1, [r7, #4]
 80057ca:	f7ff fe4b 	bl	8005464 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE3EEERNS_8DrawableEvvEC1EPS3_MS3_FvS5_E>
            screenContainer->forEachChild(&initCallback);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	685a      	ldr	r2, [r3, #4]
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	685b      	ldr	r3, [r3, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	3378      	adds	r3, #120	; 0x78
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f107 0108 	add.w	r1, r7, #8
 80057e0:	4610      	mov	r0, r2
 80057e2:	4798      	blx	r3
            screenContainer->add(snapshot);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	6858      	ldr	r0, [r3, #4]
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	685b      	ldr	r3, [r3, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	335c      	adds	r3, #92	; 0x5c
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	687a      	ldr	r2, [r7, #4]
 80057f4:	320c      	adds	r2, #12
 80057f6:	4611      	mov	r1, r2
 80057f8:	4798      	blx	r3
            Callback<SlideTransition, Drawable&> initCallback(this, &SlideTransition::initMoveDrawable);
 80057fa:	f107 0308 	add.w	r3, r7, #8
 80057fe:	4618      	mov	r0, r3
 8005800:	f7ff fcb4 	bl	800516c <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE3EEERNS_8DrawableEvvED1Ev>
    }
 8005804:	bf00      	nop
 8005806:	3720      	adds	r7, #32
 8005808:	46bd      	mov	sp, r7
 800580a:	bd80      	pop	{r7, pc}
 800580c:	2400c8bb 	.word	0x2400c8bb
 8005810:	0802d340 	.word	0x0802d340

08005814 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE16initMoveDrawableERNS_8DrawableE>:
    virtual void initMoveDrawable(Drawable& d)
 8005814:	b580      	push	{r7, lr}
 8005816:	b082      	sub	sp, #8
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
 800581c:	6039      	str	r1, [r7, #0]
            d.moveRelative(-HAL::DISPLAY_WIDTH, 0);
 800581e:	683b      	ldr	r3, [r7, #0]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	3350      	adds	r3, #80	; 0x50
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	4a06      	ldr	r2, [pc, #24]	; (8005840 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE16initMoveDrawableERNS_8DrawableE+0x2c>)
 8005828:	8812      	ldrh	r2, [r2, #0]
 800582a:	4252      	negs	r2, r2
 800582c:	b292      	uxth	r2, r2
 800582e:	b211      	sxth	r1, r2
 8005830:	2200      	movs	r2, #0
 8005832:	6838      	ldr	r0, [r7, #0]
 8005834:	4798      	blx	r3
            break;
 8005836:	bf00      	nop
    }
 8005838:	bf00      	nop
 800583a:	3708      	adds	r7, #8
 800583c:	46bd      	mov	sp, r7
 800583e:	bd80      	pop	{r7, pc}
 8005840:	2400c8b0 	.word	0x2400c8b0

08005844 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE3EEERNS_8DrawableEvvE7executeES5_>:
    virtual void execute(T1 t1)
 8005844:	b580      	push	{r7, lr}
 8005846:	b082      	sub	sp, #8
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
 800584c:	6039      	str	r1, [r7, #0]
        (pobject->*pmemfun_1)(t1);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	685b      	ldr	r3, [r3, #4]
 8005852:	687a      	ldr	r2, [r7, #4]
 8005854:	68d2      	ldr	r2, [r2, #12]
 8005856:	1052      	asrs	r2, r2, #1
 8005858:	1898      	adds	r0, r3, r2
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	68db      	ldr	r3, [r3, #12]
 800585e:	f003 0301 	and.w	r3, r3, #1
 8005862:	2b00      	cmp	r3, #0
 8005864:	d102      	bne.n	800586c <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE3EEERNS_8DrawableEvvE7executeES5_+0x28>
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	689b      	ldr	r3, [r3, #8]
 800586a:	e00a      	b.n	8005882 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE3EEERNS_8DrawableEvvE7executeES5_+0x3e>
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	685b      	ldr	r3, [r3, #4]
 8005870:	687a      	ldr	r2, [r7, #4]
 8005872:	68d2      	ldr	r2, [r2, #12]
 8005874:	1052      	asrs	r2, r2, #1
 8005876:	4413      	add	r3, r2
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	687a      	ldr	r2, [r7, #4]
 800587c:	6892      	ldr	r2, [r2, #8]
 800587e:	4413      	add	r3, r2
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	6839      	ldr	r1, [r7, #0]
 8005884:	4798      	blx	r3
    }
 8005886:	bf00      	nop
 8005888:	3708      	adds	r7, #8
 800588a:	46bd      	mov	sp, r7
 800588c:	bd80      	pop	{r7, pc}

0800588e <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE3EEERNS_8DrawableEvvE7isValidEv>:
    virtual bool isValid() const
 800588e:	b480      	push	{r7}
 8005890:	b083      	sub	sp, #12
 8005892:	af00      	add	r7, sp, #0
 8005894:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun_1 != 0);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	685b      	ldr	r3, [r3, #4]
 800589a:	2b00      	cmp	r3, #0
 800589c:	d010      	beq.n	80058c0 <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE3EEERNS_8DrawableEvvE7isValidEv+0x32>
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	689b      	ldr	r3, [r3, #8]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d107      	bne.n	80058b6 <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE3EEERNS_8DrawableEvvE7isValidEv+0x28>
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	68db      	ldr	r3, [r3, #12]
 80058aa:	f003 0301 	and.w	r3, r3, #1
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d101      	bne.n	80058b6 <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE3EEERNS_8DrawableEvvE7isValidEv+0x28>
 80058b2:	2301      	movs	r3, #1
 80058b4:	e000      	b.n	80058b8 <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE3EEERNS_8DrawableEvvE7isValidEv+0x2a>
 80058b6:	2300      	movs	r3, #0
 80058b8:	2b01      	cmp	r3, #1
 80058ba:	d001      	beq.n	80058c0 <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE3EEERNS_8DrawableEvvE7isValidEv+0x32>
 80058bc:	2301      	movs	r3, #1
 80058be:	e000      	b.n	80058c2 <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE3EEERNS_8DrawableEvvE7isValidEv+0x34>
 80058c0:	2300      	movs	r3, #0
    }
 80058c2:	4618      	mov	r0, r3
 80058c4:	370c      	adds	r7, #12
 80058c6:	46bd      	mov	sp, r7
 80058c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058cc:	4770      	bx	lr
	...

080058d0 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv>:
    virtual void handleTickEvent()
 80058d0:	b580      	push	{r7, lr}
 80058d2:	b082      	sub	sp, #8
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
        if (!HAL::USE_ANIMATION_STORAGE)
 80058d8:	4b40      	ldr	r3, [pc, #256]	; (80059dc <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x10c>)
 80058da:	781b      	ldrb	r3, [r3, #0]
 80058dc:	f083 0301 	eor.w	r3, r3, #1
 80058e0:	b2db      	uxtb	r3, r3
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d003      	beq.n	80058ee <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x1e>
            done = true;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	2201      	movs	r2, #1
 80058ea:	721a      	strb	r2, [r3, #8]
            return;
 80058ec:	e073      	b.n	80059d6 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x106>
        Transition::handleTickEvent();
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	4618      	mov	r0, r3
 80058f2:	f7fe fe11 	bl	8004518 <_ZN8touchgfx10Transition15handleTickEventEv>
        animationCounter++;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 80058fc:	3301      	adds	r3, #1
 80058fe:	b2da      	uxtb	r2, r3
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
        if (animationCounter <= animationSteps)
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	f893 204d 	ldrb.w	r2, [r3, #77]	; 0x4d
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8005912:	429a      	cmp	r2, r3
 8005914:	d82f      	bhi.n	8005976 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0xa6>
            calculatedValue = EasingEquations::cubicEaseOut(animationCounter, 0, targetValue, animationSteps);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800591c:	b298      	uxth	r0, r3
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	f9b3 204e 	ldrsh.w	r2, [r3, #78]	; 0x4e
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800592a:	b29b      	uxth	r3, r3
 800592c:	2100      	movs	r1, #0
 800592e:	f01a fcad 	bl	802028c <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>
 8005932:	4603      	mov	r3, r0
 8005934:	461a      	mov	r2, r3
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
            if (calculatedValue % 2)
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	f9b3 3050 	ldrsh.w	r3, [r3, #80]	; 0x50
 8005942:	b29b      	uxth	r3, r3
 8005944:	f003 0301 	and.w	r3, r3, #1
 8005948:	b29b      	uxth	r3, r3
 800594a:	2b00      	cmp	r3, #0
 800594c:	d01b      	beq.n	8005986 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0xb6>
                calculatedValue += (calculatedValue > 0 ? 1 : -1);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	f9b3 3050 	ldrsh.w	r3, [r3, #80]	; 0x50
 8005954:	b29b      	uxth	r3, r3
 8005956:	687a      	ldr	r2, [r7, #4]
 8005958:	f9b2 2050 	ldrsh.w	r2, [r2, #80]	; 0x50
 800595c:	2a00      	cmp	r2, #0
 800595e:	dd01      	ble.n	8005964 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x94>
 8005960:	2201      	movs	r2, #1
 8005962:	e001      	b.n	8005968 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x98>
 8005964:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005968:	4413      	add	r3, r2
 800596a:	b29b      	uxth	r3, r3
 800596c:	b21a      	sxth	r2, r3
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
 8005974:	e007      	b.n	8005986 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0xb6>
            done = true;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2201      	movs	r2, #1
 800597a:	721a      	strb	r2, [r3, #8]
            animationCounter = 0;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2200      	movs	r2, #0
 8005980:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
            return;
 8005984:	e027      	b.n	80059d6 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x106>
            calculatedValue -= snapshot.getX();
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	330c      	adds	r3, #12
 800598a:	4618      	mov	r0, r3
 800598c:	f7fe fc50 	bl	8004230 <_ZNK8touchgfx8Drawable4getXEv>
 8005990:	4603      	mov	r3, r0
 8005992:	4619      	mov	r1, r3
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	f9b3 3050 	ldrsh.w	r3, [r3, #80]	; 0x50
 800599a:	b29a      	uxth	r2, r3
 800599c:	b28b      	uxth	r3, r1
 800599e:	1ad3      	subs	r3, r2, r3
 80059a0:	b29b      	uxth	r3, r3
 80059a2:	b21a      	sxth	r2, r3
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
            snapshot.moveRelative(calculatedValue, 0);
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	f103 000c 	add.w	r0, r3, #12
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	f9b3 3050 	ldrsh.w	r3, [r3, #80]	; 0x50
 80059b6:	2200      	movs	r2, #0
 80059b8:	4619      	mov	r1, r3
 80059ba:	f019 ffcb 	bl	801f954 <_ZN8touchgfx8Drawable12moveRelativeEss>
            break;
 80059be:	bf00      	nop
        screenContainer->forEachChild(&handleTickCallback);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	6858      	ldr	r0, [r3, #4]
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	685b      	ldr	r3, [r3, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	3378      	adds	r3, #120	; 0x78
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	687a      	ldr	r2, [r7, #4]
 80059d0:	323c      	adds	r2, #60	; 0x3c
 80059d2:	4611      	mov	r1, r2
 80059d4:	4798      	blx	r3
    }
 80059d6:	3708      	adds	r7, #8
 80059d8:	46bd      	mov	sp, r7
 80059da:	bd80      	pop	{r7, pc}
 80059dc:	2400c8bb 	.word	0x2400c8bb

080059e0 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE8tearDownEv>:
    virtual void tearDown()
 80059e0:	b580      	push	{r7, lr}
 80059e2:	b082      	sub	sp, #8
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	6078      	str	r0, [r7, #4]
        if (HAL::USE_ANIMATION_STORAGE && screenContainer)
 80059e8:	4b0b      	ldr	r3, [pc, #44]	; (8005a18 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE8tearDownEv+0x38>)
 80059ea:	781b      	ldrb	r3, [r3, #0]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d00e      	beq.n	8005a0e <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE8tearDownEv+0x2e>
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	685b      	ldr	r3, [r3, #4]
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d00a      	beq.n	8005a0e <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE8tearDownEv+0x2e>
            screenContainer->remove(snapshot);
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	6858      	ldr	r0, [r3, #4]
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	685b      	ldr	r3, [r3, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	3360      	adds	r3, #96	; 0x60
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	687a      	ldr	r2, [r7, #4]
 8005a08:	320c      	adds	r2, #12
 8005a0a:	4611      	mov	r1, r2
 8005a0c:	4798      	blx	r3
    }
 8005a0e:	bf00      	nop
 8005a10:	3708      	adds	r7, #8
 8005a12:	46bd      	mov	sp, r7
 8005a14:	bd80      	pop	{r7, pc}
 8005a16:	bf00      	nop
 8005a18:	2400c8bb 	.word	0x2400c8bb

08005a1c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE4initEv>:
    virtual void init()
 8005a1c:	b580      	push	{r7, lr}
 8005a1e:	b088      	sub	sp, #32
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	6078      	str	r0, [r7, #4]
        if (HAL::USE_ANIMATION_STORAGE)
 8005a24:	4b1a      	ldr	r3, [pc, #104]	; (8005a90 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE4initEv+0x74>)
 8005a26:	781b      	ldrb	r3, [r3, #0]
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d02d      	beq.n	8005a88 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE4initEv+0x6c>
            Transition::init();
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	4618      	mov	r0, r3
 8005a30:	f7fe fd86 	bl	8004540 <_ZN8touchgfx10Transition4initEv>
            Callback<SlideTransition, Drawable&> initCallback(this, &SlideTransition::initMoveDrawable);
 8005a34:	4a17      	ldr	r2, [pc, #92]	; (8005a94 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE4initEv+0x78>)
 8005a36:	f107 0318 	add.w	r3, r7, #24
 8005a3a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005a3e:	e883 0003 	stmia.w	r3, {r0, r1}
 8005a42:	f107 0008 	add.w	r0, r7, #8
 8005a46:	f107 0318 	add.w	r3, r7, #24
 8005a4a:	cb0c      	ldmia	r3, {r2, r3}
 8005a4c:	6879      	ldr	r1, [r7, #4]
 8005a4e:	f7ff fd63 	bl	8005518 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvEC1EPS3_MS3_FvS5_E>
            screenContainer->forEachChild(&initCallback);
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	685a      	ldr	r2, [r3, #4]
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	685b      	ldr	r3, [r3, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	3378      	adds	r3, #120	; 0x78
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f107 0108 	add.w	r1, r7, #8
 8005a64:	4610      	mov	r0, r2
 8005a66:	4798      	blx	r3
            screenContainer->add(snapshot);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	6858      	ldr	r0, [r3, #4]
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	685b      	ldr	r3, [r3, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	335c      	adds	r3, #92	; 0x5c
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	687a      	ldr	r2, [r7, #4]
 8005a78:	320c      	adds	r2, #12
 8005a7a:	4611      	mov	r1, r2
 8005a7c:	4798      	blx	r3
            Callback<SlideTransition, Drawable&> initCallback(this, &SlideTransition::initMoveDrawable);
 8005a7e:	f107 0308 	add.w	r3, r7, #8
 8005a82:	4618      	mov	r0, r3
 8005a84:	f7ff fc0a 	bl	800529c <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvED1Ev>
    }
 8005a88:	bf00      	nop
 8005a8a:	3720      	adds	r7, #32
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	bd80      	pop	{r7, pc}
 8005a90:	2400c8bb 	.word	0x2400c8bb
 8005a94:	0802d348 	.word	0x0802d348

08005a98 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE>:
    virtual void initMoveDrawable(Drawable& d)
 8005a98:	b580      	push	{r7, lr}
 8005a9a:	b082      	sub	sp, #8
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	6078      	str	r0, [r7, #4]
 8005aa0:	6039      	str	r1, [r7, #0]
            d.moveRelative(HAL::DISPLAY_WIDTH, 0);
 8005aa2:	683b      	ldr	r3, [r7, #0]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	3350      	adds	r3, #80	; 0x50
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	4a05      	ldr	r2, [pc, #20]	; (8005ac0 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x28>)
 8005aac:	8812      	ldrh	r2, [r2, #0]
 8005aae:	b211      	sxth	r1, r2
 8005ab0:	2200      	movs	r2, #0
 8005ab2:	6838      	ldr	r0, [r7, #0]
 8005ab4:	4798      	blx	r3
            break;
 8005ab6:	bf00      	nop
    }
 8005ab8:	bf00      	nop
 8005aba:	3708      	adds	r7, #8
 8005abc:	46bd      	mov	sp, r7
 8005abe:	bd80      	pop	{r7, pc}
 8005ac0:	2400c8b0 	.word	0x2400c8b0

08005ac4 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7executeES5_>:
    virtual void execute(T1 t1)
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	b082      	sub	sp, #8
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]
 8005acc:	6039      	str	r1, [r7, #0]
        (pobject->*pmemfun_1)(t1);
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	685b      	ldr	r3, [r3, #4]
 8005ad2:	687a      	ldr	r2, [r7, #4]
 8005ad4:	68d2      	ldr	r2, [r2, #12]
 8005ad6:	1052      	asrs	r2, r2, #1
 8005ad8:	1898      	adds	r0, r3, r2
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	68db      	ldr	r3, [r3, #12]
 8005ade:	f003 0301 	and.w	r3, r3, #1
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d102      	bne.n	8005aec <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7executeES5_+0x28>
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	689b      	ldr	r3, [r3, #8]
 8005aea:	e00a      	b.n	8005b02 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7executeES5_+0x3e>
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	685b      	ldr	r3, [r3, #4]
 8005af0:	687a      	ldr	r2, [r7, #4]
 8005af2:	68d2      	ldr	r2, [r2, #12]
 8005af4:	1052      	asrs	r2, r2, #1
 8005af6:	4413      	add	r3, r2
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	687a      	ldr	r2, [r7, #4]
 8005afc:	6892      	ldr	r2, [r2, #8]
 8005afe:	4413      	add	r3, r2
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	6839      	ldr	r1, [r7, #0]
 8005b04:	4798      	blx	r3
    }
 8005b06:	bf00      	nop
 8005b08:	3708      	adds	r7, #8
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	bd80      	pop	{r7, pc}

08005b0e <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv>:
    virtual bool isValid() const
 8005b0e:	b480      	push	{r7}
 8005b10:	b083      	sub	sp, #12
 8005b12:	af00      	add	r7, sp, #0
 8005b14:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun_1 != 0);
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	685b      	ldr	r3, [r3, #4]
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d010      	beq.n	8005b40 <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv+0x32>
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	689b      	ldr	r3, [r3, #8]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d107      	bne.n	8005b36 <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv+0x28>
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	68db      	ldr	r3, [r3, #12]
 8005b2a:	f003 0301 	and.w	r3, r3, #1
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d101      	bne.n	8005b36 <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv+0x28>
 8005b32:	2301      	movs	r3, #1
 8005b34:	e000      	b.n	8005b38 <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv+0x2a>
 8005b36:	2300      	movs	r3, #0
 8005b38:	2b01      	cmp	r3, #1
 8005b3a:	d001      	beq.n	8005b40 <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv+0x32>
 8005b3c:	2301      	movs	r3, #1
 8005b3e:	e000      	b.n	8005b42 <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv+0x34>
 8005b40:	2300      	movs	r3, #0
    }
 8005b42:	4618      	mov	r0, r3
 8005b44:	370c      	adds	r7, #12
 8005b46:	46bd      	mov	sp, r7
 8005b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4c:	4770      	bx	lr

08005b4e <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:
    /**
     * Gets GSUB table.
     *
     * @return The GSUB table or null if font has GSUB no table
     */
    virtual const uint16_t* getGSUBTable() const
 8005b4e:	b480      	push	{r7}
 8005b50:	b083      	sub	sp, #12
 8005b52:	af00      	add	r7, sp, #0
 8005b54:	6078      	str	r0, [r7, #4]
    {
        return gsubTable;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	6a1b      	ldr	r3, [r3, #32]
    }
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	370c      	adds	r7, #12
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b64:	4770      	bx	lr

08005b66 <_ZNK8touchgfx13GeneratedFont23getContextualFormsTableEv>:
    /**
     * Gets the contextual forms table used in arabic fonts.
     *
     * @return The FontContextualFormsTable or null if the font has no table.
     */
    virtual const FontContextualFormsTable* getContextualFormsTable() const
 8005b66:	b480      	push	{r7}
 8005b68:	b083      	sub	sp, #12
 8005b6a:	af00      	add	r7, sp, #0
 8005b6c:	6078      	str	r0, [r7, #4]
    {
        return arabicTable;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    }
 8005b72:	4618      	mov	r0, r3
 8005b74:	370c      	adds	r7, #12
 8005b76:	46bd      	mov	sp, r7
 8005b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7c:	4770      	bx	lr
	...

08005b80 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>:

#include <fonts/GeneratedFont.hpp>

namespace touchgfx
{
GeneratedFont::GeneratedFont(const GlyphNode* list, uint16_t size, uint16_t height, uint8_t pixBelowBase, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
 8005b80:	b580      	push	{r7, lr}
 8005b82:	b08c      	sub	sp, #48	; 0x30
 8005b84:	af08      	add	r7, sp, #32
 8005b86:	60f8      	str	r0, [r7, #12]
 8005b88:	60b9      	str	r1, [r7, #8]
 8005b8a:	4611      	mov	r1, r2
 8005b8c:	461a      	mov	r2, r3
 8005b8e:	460b      	mov	r3, r1
 8005b90:	80fb      	strh	r3, [r7, #6]
 8005b92:	4613      	mov	r3, r2
 8005b94:	80bb      	strh	r3, [r7, #4]
    : ConstFont(list, size, height, pixBelowBase, bitsPerPixel, byteAlignRow, maxLeft, maxRight, fallbackChar, ellipsisChar),
      glyphData(glyphDataInternalFlash),
      kerningData(kerningList),
      gsubTable(gsubData),
      arabicTable(formsTable)
 8005b96:	68f8      	ldr	r0, [r7, #12]
 8005b98:	88b9      	ldrh	r1, [r7, #4]
 8005b9a:	88fa      	ldrh	r2, [r7, #6]
 8005b9c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005b9e:	9306      	str	r3, [sp, #24]
 8005ba0:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005ba2:	9305      	str	r3, [sp, #20]
 8005ba4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005ba8:	9304      	str	r3, [sp, #16]
 8005baa:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005bae:	9303      	str	r3, [sp, #12]
 8005bb0:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005bb4:	9302      	str	r3, [sp, #8]
 8005bb6:	7f3b      	ldrb	r3, [r7, #28]
 8005bb8:	9301      	str	r3, [sp, #4]
 8005bba:	7e3b      	ldrb	r3, [r7, #24]
 8005bbc:	9300      	str	r3, [sp, #0]
 8005bbe:	460b      	mov	r3, r1
 8005bc0:	68b9      	ldr	r1, [r7, #8]
 8005bc2:	f019 fef3 	bl	801f9ac <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>
 8005bc6:	4a0a      	ldr	r2, [pc, #40]	; (8005bf0 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE+0x70>)
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	601a      	str	r2, [r3, #0]
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005bd0:	619a      	str	r2, [r3, #24]
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005bd6:	61da      	str	r2, [r3, #28]
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005bdc:	621a      	str	r2, [r3, #32]
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005be2:	625a      	str	r2, [r3, #36]	; 0x24
{
}
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	4618      	mov	r0, r3
 8005be8:	3710      	adds	r7, #16
 8005bea:	46bd      	mov	sp, r7
 8005bec:	bd80      	pop	{r7, pc}
 8005bee:	bf00      	nop
 8005bf0:	0802ded4 	.word	0x0802ded4

08005bf4 <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
 8005bf4:	b480      	push	{r7}
 8005bf6:	b085      	sub	sp, #20
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	6078      	str	r0, [r7, #4]
 8005bfc:	6039      	str	r1, [r7, #0]
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	699b      	ldr	r3, [r3, #24]
 8005c02:	60fb      	str	r3, [r7, #12]
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 8005c04:	683b      	ldr	r3, [r7, #0]
 8005c06:	889b      	ldrh	r3, [r3, #4]
 8005c08:	0adb      	lsrs	r3, r3, #11
 8005c0a:	b29b      	uxth	r3, r3
 8005c0c:	009b      	lsls	r3, r3, #2
 8005c0e:	68fa      	ldr	r2, [r7, #12]
 8005c10:	4413      	add	r3, r2
 8005c12:	681a      	ldr	r2, [r3, #0]
 8005c14:	683b      	ldr	r3, [r7, #0]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	4413      	add	r3, r2
}
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	3714      	adds	r7, #20
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c24:	4770      	bx	lr

08005c26 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 8005c26:	b480      	push	{r7}
 8005c28:	b089      	sub	sp, #36	; 0x24
 8005c2a:	af00      	add	r7, sp, #0
 8005c2c:	60f8      	str	r0, [r7, #12]
 8005c2e:	460b      	mov	r3, r1
 8005c30:	607a      	str	r2, [r7, #4]
 8005c32:	817b      	strh	r3, [r7, #10]
    if (!glyph || glyph->kerningTableSize == 0)
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d003      	beq.n	8005c42 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	7b1b      	ldrb	r3, [r3, #12]
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d101      	bne.n	8005c46 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x20>
    {
        return 0;
 8005c42:	2300      	movs	r3, #0
 8005c44:	e030      	b.n	8005ca8 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x82>
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	69da      	ldr	r2, [r3, #28]
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	617b      	str	r3, [r7, #20]
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
 8005c4e:	697b      	ldr	r3, [r7, #20]
 8005c50:	7b5b      	ldrb	r3, [r3, #13]
 8005c52:	021b      	lsls	r3, r3, #8
 8005c54:	b21b      	sxth	r3, r3
 8005c56:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005c5a:	b219      	sxth	r1, r3
 8005c5c:	697b      	ldr	r3, [r7, #20]
 8005c5e:	7adb      	ldrb	r3, [r3, #11]
 8005c60:	b21b      	sxth	r3, r3
 8005c62:	430b      	orrs	r3, r1
 8005c64:	b21b      	sxth	r3, r3
 8005c66:	b29b      	uxth	r3, r3
 8005c68:	009b      	lsls	r3, r3, #2
 8005c6a:	4413      	add	r3, r2
 8005c6c:	61fb      	str	r3, [r7, #28]
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	7b1b      	ldrb	r3, [r3, #12]
 8005c72:	837b      	strh	r3, [r7, #26]
 8005c74:	8b7b      	ldrh	r3, [r7, #26]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d015      	beq.n	8005ca6 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x80>
    {
        if (prevChar == kerndata->unicodePrevChar)
 8005c7a:	69fb      	ldr	r3, [r7, #28]
 8005c7c:	881b      	ldrh	r3, [r3, #0]
 8005c7e:	897a      	ldrh	r2, [r7, #10]
 8005c80:	429a      	cmp	r2, r3
 8005c82:	d103      	bne.n	8005c8c <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x66>
        {
            return kerndata->distance;
 8005c84:	69fb      	ldr	r3, [r7, #28]
 8005c86:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8005c8a:	e00d      	b.n	8005ca8 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x82>
        }
        if (prevChar < kerndata->unicodePrevChar)
 8005c8c:	69fb      	ldr	r3, [r7, #28]
 8005c8e:	881b      	ldrh	r3, [r3, #0]
 8005c90:	897a      	ldrh	r2, [r7, #10]
 8005c92:	429a      	cmp	r2, r3
 8005c94:	d306      	bcc.n	8005ca4 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x7e>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 8005c96:	8b7b      	ldrh	r3, [r7, #26]
 8005c98:	3b01      	subs	r3, #1
 8005c9a:	837b      	strh	r3, [r7, #26]
 8005c9c:	69fb      	ldr	r3, [r7, #28]
 8005c9e:	3304      	adds	r3, #4
 8005ca0:	61fb      	str	r3, [r7, #28]
 8005ca2:	e7e7      	b.n	8005c74 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x4e>
        {
            break;
 8005ca4:	bf00      	nop
        }
    }
    return 0;
 8005ca6:	2300      	movs	r3, #0
}
 8005ca8:	4618      	mov	r0, r3
 8005caa:	3724      	adds	r7, #36	; 0x24
 8005cac:	46bd      	mov	sp, r7
 8005cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb2:	4770      	bx	lr

08005cb4 <_ZN8touchgfx9colortypeC1Em>:
    colortype(uint32_t col)
 8005cb4:	b480      	push	{r7}
 8005cb6:	b083      	sub	sp, #12
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]
 8005cbc:	6039      	str	r1, [r7, #0]
        : color(col)
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	683a      	ldr	r2, [r7, #0]
 8005cc2:	601a      	str	r2, [r3, #0]
    }
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	4618      	mov	r0, r3
 8005cc8:	370c      	adds	r7, #12
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd0:	4770      	bx	lr

08005cd2 <_ZN8touchgfx6BitmapC1Et>:
     * Creates and binds a Bitmap instance to the corresponding entry in the BitmapData
     * array.
     *
     * @param  id (Optional) The unique bitmap identifier.
     */
    Bitmap(const BitmapId id = BITMAP_INVALID)
 8005cd2:	b480      	push	{r7}
 8005cd4:	b083      	sub	sp, #12
 8005cd6:	af00      	add	r7, sp, #0
 8005cd8:	6078      	str	r0, [r7, #4]
 8005cda:	460b      	mov	r3, r1
 8005cdc:	807b      	strh	r3, [r7, #2]
        : bitmapId(id)
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	887a      	ldrh	r2, [r7, #2]
 8005ce2:	801a      	strh	r2, [r3, #0]
    {
    }
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	370c      	adds	r7, #12
 8005cea:	46bd      	mov	sp, r7
 8005cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf0:	4770      	bx	lr
	...

08005cf4 <_ZN8touchgfx8DrawableC1Ev>:
    Drawable()
 8005cf4:	b580      	push	{r7, lr}
 8005cf6:	b082      	sub	sp, #8
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	6078      	str	r0, [r7, #4]
          visible(true)
 8005cfc:	4a14      	ldr	r2, [pc, #80]	; (8005d50 <_ZN8touchgfx8DrawableC1Ev+0x5c>)
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	601a      	str	r2, [r3, #0]
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	3304      	adds	r3, #4
 8005d06:	4618      	mov	r0, r3
 8005d08:	f7fb fdbc 	bl	8001884 <_ZN8touchgfx4RectC1Ev>
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	330c      	adds	r3, #12
 8005d10:	4618      	mov	r0, r3
 8005d12:	f7fb fdb7 	bl	8001884 <_ZN8touchgfx4RectC1Ev>
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	2200      	movs	r2, #0
 8005d1a:	615a      	str	r2, [r3, #20]
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	2200      	movs	r2, #0
 8005d20:	619a      	str	r2, [r3, #24]
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	2200      	movs	r2, #0
 8005d26:	61da      	str	r2, [r3, #28]
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2200      	movs	r2, #0
 8005d2c:	841a      	strh	r2, [r3, #32]
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	2200      	movs	r2, #0
 8005d32:	845a      	strh	r2, [r3, #34]	; 0x22
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2200      	movs	r2, #0
 8005d38:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2201      	movs	r2, #1
 8005d40:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	4618      	mov	r0, r3
 8005d48:	3708      	adds	r7, #8
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	bd80      	pop	{r7, pc}
 8005d4e:	bf00      	nop
 8005d50:	08030654 	.word	0x08030654

08005d54 <_ZN8touchgfx9Container13getFirstChildEv>:
     * @return Pointer to the first drawable added to this container. If nothing has been
     *         added return zero.
     *
     * @see getNextSibling
     */
    virtual Drawable* getFirstChild()
 8005d54:	b480      	push	{r7}
 8005d56:	b083      	sub	sp, #12
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]
    {
        return firstChild;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    }
 8005d60:	4618      	mov	r0, r3
 8005d62:	370c      	adds	r7, #12
 8005d64:	46bd      	mov	sp, r7
 8005d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6a:	4770      	bx	lr

08005d6c <_ZN8touchgfx3HAL15getAuxiliaryLCDEv>:
    LCD* getAuxiliaryLCD()
 8005d6c:	b480      	push	{r7}
 8005d6e:	b083      	sub	sp, #12
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	6078      	str	r0, [r7, #4]
        return auxiliaryLCD;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    }
 8005d78:	4618      	mov	r0, r3
 8005d7a:	370c      	adds	r7, #12
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d82:	4770      	bx	lr

08005d84 <_ZN8touchgfx6ScreenD1Ev>:
public:
    /** Initializes a new instance of the Screen class. */
    Screen();

    /** Finalizes an instance of the Screen class. */
    virtual ~Screen()
 8005d84:	b580      	push	{r7, lr}
 8005d86:	b082      	sub	sp, #8
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]
    {
 8005d8c:	4a06      	ldr	r2, [pc, #24]	; (8005da8 <_ZN8touchgfx6ScreenD1Ev+0x24>)
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	601a      	str	r2, [r3, #0]
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	3304      	adds	r3, #4
 8005d96:	4618      	mov	r0, r3
 8005d98:	f001 fa70 	bl	800727c <_ZN8touchgfx9ContainerD1Ev>
    }
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	4618      	mov	r0, r3
 8005da0:	3708      	adds	r7, #8
 8005da2:	46bd      	mov	sp, r7
 8005da4:	bd80      	pop	{r7, pc}
 8005da6:	bf00      	nop
 8005da8:	0803074c 	.word	0x0803074c

08005dac <_ZN8touchgfx6ScreenD0Ev>:
    virtual ~Screen()
 8005dac:	b580      	push	{r7, lr}
 8005dae:	b082      	sub	sp, #8
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	6078      	str	r0, [r7, #4]
    }
 8005db4:	6878      	ldr	r0, [r7, #4]
 8005db6:	f7ff ffe5 	bl	8005d84 <_ZN8touchgfx6ScreenD1Ev>
 8005dba:	213c      	movs	r1, #60	; 0x3c
 8005dbc:	6878      	ldr	r0, [r7, #4]
 8005dbe:	f025 fb86 	bl	802b4ce <_ZdlPvj>
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	3708      	adds	r7, #8
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	bd80      	pop	{r7, pc}

08005dcc <_ZN8touchgfx6Screen11setupScreenEv>:
     * version does nothing, but place any screen specific initialization code in an
     * overridden version.
     *
     * @see Application::switchScreen
     */
    virtual void setupScreen()
 8005dcc:	b480      	push	{r7}
 8005dce:	b083      	sub	sp, #12
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	6078      	str	r0, [r7, #4]
    {
    }
 8005dd4:	bf00      	nop
 8005dd6:	370c      	adds	r7, #12
 8005dd8:	46bd      	mov	sp, r7
 8005dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dde:	4770      	bx	lr

08005de0 <_ZN8touchgfx6Screen15afterTransitionEv>:
     * version does nothing, but override to do screen specific initialization code that has
     * to be done after the transition to the screen.
     *
     * @see Application::handleTickEvent
     */
    virtual void afterTransition()
 8005de0:	b480      	push	{r7}
 8005de2:	b083      	sub	sp, #12
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	6078      	str	r0, [r7, #4]
    {
    }
 8005de8:	bf00      	nop
 8005dea:	370c      	adds	r7, #12
 8005dec:	46bd      	mov	sp, r7
 8005dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df2:	4770      	bx	lr

08005df4 <_ZN8touchgfx6Screen14tearDownScreenEv>:
     * Base version does nothing, but place any screen specific cleanup code in an
     * overridden version.
     *
     * @see Application::switchScreen
     */
    virtual void tearDownScreen()
 8005df4:	b480      	push	{r7}
 8005df6:	b083      	sub	sp, #12
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]
    {
    }
 8005dfc:	bf00      	nop
 8005dfe:	370c      	adds	r7, #12
 8005e00:	46bd      	mov	sp, r7
 8005e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e06:	4770      	bx	lr

08005e08 <_ZN8touchgfx6Screen15handleTickEventEv>:

    /**
     * Called by the Application on the current screen with a frequency of
     * Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
 8005e08:	b480      	push	{r7}
 8005e0a:	b083      	sub	sp, #12
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
    {
    }
 8005e10:	bf00      	nop
 8005e12:	370c      	adds	r7, #12
 8005e14:	46bd      	mov	sp, r7
 8005e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1a:	4770      	bx	lr

08005e1c <_ZN8touchgfx6Screen14handleKeyEventEh>:
     * Called by the Application on the reception of a "key", the meaning of which is
     * platform/application specific. Default implementation does nothing.
     *
     * @param  key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
 8005e1c:	b480      	push	{r7}
 8005e1e:	b083      	sub	sp, #12
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	6078      	str	r0, [r7, #4]
 8005e24:	460b      	mov	r3, r1
 8005e26:	70fb      	strb	r3, [r7, #3]
    {
    }
 8005e28:	bf00      	nop
 8005e2a:	370c      	adds	r7, #12
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e32:	4770      	bx	lr

08005e34 <_ZN8touchgfx6Screen3addERNS_8DrawableE>:
     * @param [in] d The Drawable to add.
     *
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     */
    void add(Drawable& d)
 8005e34:	b580      	push	{r7, lr}
 8005e36:	b082      	sub	sp, #8
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	6078      	str	r0, [r7, #4]
 8005e3c:	6039      	str	r1, [r7, #0]
    {
        container.add(d);
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	3304      	adds	r3, #4
 8005e42:	6839      	ldr	r1, [r7, #0]
 8005e44:	4618      	mov	r0, r3
 8005e46:	f012 f8e3 	bl	8018010 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    }
 8005e4a:	bf00      	nop
 8005e4c:	3708      	adds	r7, #8
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	bd80      	pop	{r7, pc}
	...

08005e54 <_ZN8touchgfx6WidgetC1Ev>:
 8005e54:	b580      	push	{r7, lr}
 8005e56:	b082      	sub	sp, #8
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	6078      	str	r0, [r7, #4]
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	4618      	mov	r0, r3
 8005e60:	f7ff ff48 	bl	8005cf4 <_ZN8touchgfx8DrawableC1Ev>
 8005e64:	4a03      	ldr	r2, [pc, #12]	; (8005e74 <_ZN8touchgfx6WidgetC1Ev+0x20>)
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	601a      	str	r2, [r3, #0]
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	4618      	mov	r0, r3
 8005e6e:	3708      	adds	r7, #8
 8005e70:	46bd      	mov	sp, r7
 8005e72:	bd80      	pop	{r7, pc}
 8005e74:	0802de28 	.word	0x0802de28

08005e78 <_ZN8touchgfx3BoxC1Ev>:
 */
class Box : public Widget
{
public:
    /** Construct a new Box with a default alpha value of 255 (solid) */
    Box()
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b082      	sub	sp, #8
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
        : Widget(), alpha(255), color(0)
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	4618      	mov	r0, r3
 8005e84:	2326      	movs	r3, #38	; 0x26
 8005e86:	461a      	mov	r2, r3
 8005e88:	2100      	movs	r1, #0
 8005e8a:	f025 fd81 	bl	802b990 <memset>
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	4618      	mov	r0, r3
 8005e92:	f7ff ffdf 	bl	8005e54 <_ZN8touchgfx6WidgetC1Ev>
 8005e96:	4a09      	ldr	r2, [pc, #36]	; (8005ebc <_ZN8touchgfx3BoxC1Ev+0x44>)
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	601a      	str	r2, [r3, #0]
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	22ff      	movs	r2, #255	; 0xff
 8005ea0:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	3328      	adds	r3, #40	; 0x28
 8005ea8:	2100      	movs	r1, #0
 8005eaa:	4618      	mov	r0, r3
 8005eac:	f7ff ff02 	bl	8005cb4 <_ZN8touchgfx9colortypeC1Em>
    {
    }
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	3708      	adds	r7, #8
 8005eb6:	46bd      	mov	sp, r7
 8005eb8:	bd80      	pop	{r7, pc}
 8005eba:	bf00      	nop
 8005ebc:	0802fcd0 	.word	0x0802fcd0

08005ec0 <_ZN8touchgfx3Box8setColorENS_9colortypeE>:
     *
     * @param  color The color of the box.
     *
     * @see getColor, Color::getColorFrom24BitRGB
     */
    void setColor(colortype color)
 8005ec0:	b480      	push	{r7}
 8005ec2:	b083      	sub	sp, #12
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]
 8005ec8:	6039      	str	r1, [r7, #0]
    {
        this->color = color;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	683a      	ldr	r2, [r7, #0]
 8005ece:	629a      	str	r2, [r3, #40]	; 0x28
    }
 8005ed0:	bf00      	nop
 8005ed2:	370c      	adds	r7, #12
 8005ed4:	46bd      	mov	sp, r7
 8005ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eda:	4770      	bx	lr

08005edc <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>:
     *
     * @param  bitmap (Optional) The bitmap to display.
     *
     * @see setBitmap
     */
    Image(const Bitmap& bitmap = Bitmap())
 8005edc:	b580      	push	{r7, lr}
 8005ede:	b082      	sub	sp, #8
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	6078      	str	r0, [r7, #4]
 8005ee4:	6039      	str	r1, [r7, #0]
        : Widget(), bitmap(bitmap), alpha(255)
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	4618      	mov	r0, r3
 8005eea:	2326      	movs	r3, #38	; 0x26
 8005eec:	461a      	mov	r2, r3
 8005eee:	2100      	movs	r1, #0
 8005ef0:	f025 fd4e 	bl	802b990 <memset>
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	f7ff ffac 	bl	8005e54 <_ZN8touchgfx6WidgetC1Ev>
 8005efc:	4a09      	ldr	r2, [pc, #36]	; (8005f24 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE+0x48>)
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	601a      	str	r2, [r3, #0]
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	683a      	ldr	r2, [r7, #0]
 8005f06:	8812      	ldrh	r2, [r2, #0]
 8005f08:	84da      	strh	r2, [r3, #38]	; 0x26
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	22ff      	movs	r2, #255	; 0xff
 8005f0e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    {
        Image::setBitmap(bitmap);
 8005f12:	6839      	ldr	r1, [r7, #0]
 8005f14:	6878      	ldr	r0, [r7, #4]
 8005f16:	f016 fe6f 	bl	801cbf8 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    }
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	4618      	mov	r0, r3
 8005f1e:	3708      	adds	r7, #8
 8005f20:	46bd      	mov	sp, r7
 8005f22:	bd80      	pop	{r7, pc}
 8005f24:	080300c4 	.word	0x080300c4

08005f28 <_ZN8touchgfx5ImageD1Ev>:
class Image : public Widget
 8005f28:	b580      	push	{r7, lr}
 8005f2a:	b082      	sub	sp, #8
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
 8005f30:	4a05      	ldr	r2, [pc, #20]	; (8005f48 <_ZN8touchgfx5ImageD1Ev+0x20>)
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	601a      	str	r2, [r3, #0]
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	4618      	mov	r0, r3
 8005f3a:	f7fe fb95 	bl	8004668 <_ZN8touchgfx6WidgetD1Ev>
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	4618      	mov	r0, r3
 8005f42:	3708      	adds	r7, #8
 8005f44:	46bd      	mov	sp, r7
 8005f46:	bd80      	pop	{r7, pc}
 8005f48:	080300c4 	.word	0x080300c4

08005f4c <_ZN8touchgfx5ImageD0Ev>:
 8005f4c:	b580      	push	{r7, lr}
 8005f4e:	b082      	sub	sp, #8
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]
 8005f54:	6878      	ldr	r0, [r7, #4]
 8005f56:	f7ff ffe7 	bl	8005f28 <_ZN8touchgfx5ImageD1Ev>
 8005f5a:	212c      	movs	r1, #44	; 0x2c
 8005f5c:	6878      	ldr	r0, [r7, #4]
 8005f5e:	f025 fab6 	bl	802b4ce <_ZdlPvj>
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	4618      	mov	r0, r3
 8005f66:	3708      	adds	r7, #8
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	bd80      	pop	{r7, pc}

08005f6c <_ZN8touchgfx10TiledImageC1ERKNS_6BitmapE>:
     *
     * @param  bmp (Optional) The bitmap to display.
     *
     * @see setBitmap
     */
    TiledImage(const Bitmap& bmp = Bitmap())
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	b082      	sub	sp, #8
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	6078      	str	r0, [r7, #4]
 8005f74:	6039      	str	r1, [r7, #0]
        : Image(bmp), xOffset(0), yOffset(0)
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	6839      	ldr	r1, [r7, #0]
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	f7ff ffae 	bl	8005edc <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8005f80:	4a06      	ldr	r2, [pc, #24]	; (8005f9c <_ZN8touchgfx10TiledImageC1ERKNS_6BitmapE+0x30>)
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	601a      	str	r2, [r3, #0]
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	2200      	movs	r2, #0
 8005f8a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2200      	movs	r2, #0
 8005f90:	859a      	strh	r2, [r3, #44]	; 0x2c
    {
    }
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	4618      	mov	r0, r3
 8005f96:	3708      	adds	r7, #8
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	bd80      	pop	{r7, pc}
 8005f9c:	0802fd34 	.word	0x0802fd34

08005fa0 <_ZN8touchgfx9TypedTextC1Et>:
    explicit TypedText(const TypedTextId id = TYPED_TEXT_INVALID)
 8005fa0:	b480      	push	{r7}
 8005fa2:	b083      	sub	sp, #12
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	6078      	str	r0, [r7, #4]
 8005fa8:	460b      	mov	r3, r1
 8005faa:	807b      	strh	r3, [r7, #2]
        : typedTextId(id)
 8005fac:	4a06      	ldr	r2, [pc, #24]	; (8005fc8 <_ZN8touchgfx9TypedTextC1Et+0x28>)
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	601a      	str	r2, [r3, #0]
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	887a      	ldrh	r2, [r7, #2]
 8005fb6:	809a      	strh	r2, [r3, #4]
    }
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	4618      	mov	r0, r3
 8005fbc:	370c      	adds	r7, #12
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc4:	4770      	bx	lr
 8005fc6:	bf00      	nop
 8005fc8:	0802dd78 	.word	0x0802dd78

08005fcc <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>:
     * @param  callback The callback to be executed. The callback will be executed with a
     *                  reference to the AbstractButton.
     *
     * @see GenericCallback, handleClickEvent, ClickEvent
     */
    void setAction(GenericCallback<const AbstractButton&>& callback)
 8005fcc:	b480      	push	{r7}
 8005fce:	b083      	sub	sp, #12
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	6078      	str	r0, [r7, #4]
 8005fd4:	6039      	str	r1, [r7, #0]
    {
        action = &callback;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	683a      	ldr	r2, [r7, #0]
 8005fda:	629a      	str	r2, [r3, #40]	; 0x28
    }
 8005fdc:	bf00      	nop
 8005fde:	370c      	adds	r7, #12
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe6:	4770      	bx	lr

08005fe8 <_ZN8touchgfx14AbstractButtonD1Ev>:
class AbstractButton : public Widget
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	b082      	sub	sp, #8
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]
 8005ff0:	4a05      	ldr	r2, [pc, #20]	; (8006008 <_ZN8touchgfx14AbstractButtonD1Ev+0x20>)
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	601a      	str	r2, [r3, #0]
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	f7fe fb35 	bl	8004668 <_ZN8touchgfx6WidgetD1Ev>
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	4618      	mov	r0, r3
 8006002:	3708      	adds	r7, #8
 8006004:	46bd      	mov	sp, r7
 8006006:	bd80      	pop	{r7, pc}
 8006008:	0802f980 	.word	0x0802f980

0800600c <_ZN8touchgfx14AbstractButtonD0Ev>:
 800600c:	b580      	push	{r7, lr}
 800600e:	b082      	sub	sp, #8
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]
 8006014:	6878      	ldr	r0, [r7, #4]
 8006016:	f7ff ffe7 	bl	8005fe8 <_ZN8touchgfx14AbstractButtonD1Ev>
 800601a:	2130      	movs	r1, #48	; 0x30
 800601c:	6878      	ldr	r0, [r7, #4]
 800601e:	f025 fa56 	bl	802b4ce <_ZdlPvj>
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	4618      	mov	r0, r3
 8006026:	3708      	adds	r7, #8
 8006028:	46bd      	mov	sp, r7
 800602a:	bd80      	pop	{r7, pc}

0800602c <_ZN8touchgfx9TypedTextaSERKS0_>:
class TypedText
 800602c:	b480      	push	{r7}
 800602e:	b083      	sub	sp, #12
 8006030:	af00      	add	r7, sp, #0
 8006032:	6078      	str	r0, [r7, #4]
 8006034:	6039      	str	r1, [r7, #0]
 8006036:	683b      	ldr	r3, [r7, #0]
 8006038:	889a      	ldrh	r2, [r3, #4]
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	809a      	strh	r2, [r3, #4]
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	4618      	mov	r0, r3
 8006042:	370c      	adds	r7, #12
 8006044:	46bd      	mov	sp, r7
 8006046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604a:	4770      	bx	lr

0800604c <_ZN8touchgfx15ButtonWithLabel12setLabelTextENS_9TypedTextE>:
     *
     * @param  t The text to display.
     *
     * @note The user code must call invalidate() in order to update the button on the display.
     */
    void setLabelText(TypedText t)
 800604c:	b580      	push	{r7, lr}
 800604e:	b082      	sub	sp, #8
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]
 8006054:	6039      	str	r1, [r7, #0]
    {
        typedText = t;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	3334      	adds	r3, #52	; 0x34
 800605a:	6839      	ldr	r1, [r7, #0]
 800605c:	4618      	mov	r0, r3
 800605e:	f7ff ffe5 	bl	800602c <_ZN8touchgfx9TypedTextaSERKS0_>
        updateTextPosition();
 8006062:	6878      	ldr	r0, [r7, #4]
 8006064:	f000 f820 	bl	80060a8 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
    }
 8006068:	bf00      	nop
 800606a:	3708      	adds	r7, #8
 800606c:	46bd      	mov	sp, r7
 800606e:	bd80      	pop	{r7, pc}

08006070 <_ZN8touchgfx15ButtonWithLabel13setLabelColorENS_9colortypeE>:
     *
     * @note If the button is currently in the normal, released state, the button should be forced
     *       to redraw itself. This is done by calling invalidate() on the ButtonWithLabel.
     * @note The user code must call invalidate() in order to update the button on the display.
     */
    void setLabelColor(colortype col)
 8006070:	b480      	push	{r7}
 8006072:	b083      	sub	sp, #12
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]
 8006078:	6039      	str	r1, [r7, #0]
    {
        color = col;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	683a      	ldr	r2, [r7, #0]
 800607e:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 8006080:	bf00      	nop
 8006082:	370c      	adds	r7, #12
 8006084:	46bd      	mov	sp, r7
 8006086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608a:	4770      	bx	lr

0800608c <_ZN8touchgfx15ButtonWithLabel20setLabelColorPressedENS_9colortypeE>:
     *
     * @note If the button is currently in the pressed state, the button should be forced to
     *       redraw itself. This is done by calling invalidate() on the ButtonWithLabel.
     * @note The user code must call invalidate() in order to update the button on the display.
     */
    void setLabelColorPressed(colortype col)
 800608c:	b480      	push	{r7}
 800608e:	b083      	sub	sp, #12
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
 8006094:	6039      	str	r1, [r7, #0]
    {
        colorPressed = col;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	683a      	ldr	r2, [r7, #0]
 800609a:	641a      	str	r2, [r3, #64]	; 0x40
    }
 800609c:	bf00      	nop
 800609e:	370c      	adds	r7, #12
 80060a0:	46bd      	mov	sp, r7
 80060a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a6:	4770      	bx	lr

080060a8 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>:
     * change you may need to reposition the label text by calling this function to keep the
     * text horizontally centered.
     *
     * @note The user code must call invalidate() in order to update the button on the display.
     */
    void updateTextPosition()
 80060a8:	b590      	push	{r4, r7, lr}
 80060aa:	b08b      	sub	sp, #44	; 0x2c
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	6078      	str	r0, [r7, #4]
    {
        if (typedText.hasValidId())
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	3334      	adds	r3, #52	; 0x34
 80060b4:	61fb      	str	r3, [r7, #28]
        return typedTextId != TYPED_TEXT_INVALID;
 80060b6:	69fb      	ldr	r3, [r7, #28]
 80060b8:	889b      	ldrh	r3, [r3, #4]
 80060ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80060be:	4293      	cmp	r3, r2
 80060c0:	bf14      	ite	ne
 80060c2:	2301      	movne	r3, #1
 80060c4:	2300      	moveq	r3, #0
 80060c6:	b2db      	uxtb	r3, r3
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d072      	beq.n	80061b2 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x10a>
        {
            const Font* f = typedText.getFont();
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	3334      	adds	r3, #52	; 0x34
 80060d0:	613b      	str	r3, [r7, #16]
 80060d2:	693b      	ldr	r3, [r7, #16]
 80060d4:	60fb      	str	r3, [r7, #12]

private:
    FORCE_INLINE_FUNCTION void assertValid() const
    {
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 80060d6:	4b3b      	ldr	r3, [pc, #236]	; (80061c4 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x11c>)
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d105      	bne.n	80060ea <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x42>
 80060de:	4b3a      	ldr	r3, [pc, #232]	; (80061c8 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x120>)
 80060e0:	4a3a      	ldr	r2, [pc, #232]	; (80061cc <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x124>)
 80060e2:	21ae      	movs	r1, #174	; 0xae
 80060e4:	483a      	ldr	r0, [pc, #232]	; (80061d0 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x128>)
 80060e6:	f025 fbc7 	bl	802b878 <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	889a      	ldrh	r2, [r3, #4]
 80060ee:	4b39      	ldr	r3, [pc, #228]	; (80061d4 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x12c>)
 80060f0:	881b      	ldrh	r3, [r3, #0]
 80060f2:	429a      	cmp	r2, r3
 80060f4:	d305      	bcc.n	8006102 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x5a>
 80060f6:	4b38      	ldr	r3, [pc, #224]	; (80061d8 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x130>)
 80060f8:	4a34      	ldr	r2, [pc, #208]	; (80061cc <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x124>)
 80060fa:	21af      	movs	r1, #175	; 0xaf
 80060fc:	4834      	ldr	r0, [pc, #208]	; (80061d0 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x128>)
 80060fe:	f025 fbbb 	bl	802b878 <__assert_func>
    }
 8006102:	bf00      	nop
        return fonts[typedTexts[typedTextId].fontIdx];
 8006104:	4b35      	ldr	r3, [pc, #212]	; (80061dc <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x134>)
 8006106:	681a      	ldr	r2, [r3, #0]
 8006108:	4b2e      	ldr	r3, [pc, #184]	; (80061c4 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x11c>)
 800610a:	6819      	ldr	r1, [r3, #0]
 800610c:	693b      	ldr	r3, [r7, #16]
 800610e:	889b      	ldrh	r3, [r3, #4]
 8006110:	005b      	lsls	r3, r3, #1
 8006112:	440b      	add	r3, r1
 8006114:	781b      	ldrb	r3, [r3, #0]
 8006116:	009b      	lsls	r3, r3, #2
 8006118:	4413      	add	r3, r2
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	627b      	str	r3, [r7, #36]	; 0x24
            const Unicode::UnicodeChar* s = typedText.getText();
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	3334      	adds	r3, #52	; 0x34
 8006122:	61bb      	str	r3, [r7, #24]
 8006124:	69bb      	ldr	r3, [r7, #24]
 8006126:	617b      	str	r3, [r7, #20]
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8006128:	4b26      	ldr	r3, [pc, #152]	; (80061c4 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x11c>)
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	2b00      	cmp	r3, #0
 800612e:	d105      	bne.n	800613c <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x94>
 8006130:	4b25      	ldr	r3, [pc, #148]	; (80061c8 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x120>)
 8006132:	4a26      	ldr	r2, [pc, #152]	; (80061cc <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x124>)
 8006134:	21ae      	movs	r1, #174	; 0xae
 8006136:	4826      	ldr	r0, [pc, #152]	; (80061d0 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x128>)
 8006138:	f025 fb9e 	bl	802b878 <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 800613c:	697b      	ldr	r3, [r7, #20]
 800613e:	889a      	ldrh	r2, [r3, #4]
 8006140:	4b24      	ldr	r3, [pc, #144]	; (80061d4 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x12c>)
 8006142:	881b      	ldrh	r3, [r3, #0]
 8006144:	429a      	cmp	r2, r3
 8006146:	d305      	bcc.n	8006154 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0xac>
 8006148:	4b23      	ldr	r3, [pc, #140]	; (80061d8 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x130>)
 800614a:	4a20      	ldr	r2, [pc, #128]	; (80061cc <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x124>)
 800614c:	21af      	movs	r1, #175	; 0xaf
 800614e:	4820      	ldr	r0, [pc, #128]	; (80061d0 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x128>)
 8006150:	f025 fb92 	bl	802b878 <__assert_func>
    }
 8006154:	bf00      	nop
        return texts->getText(typedTextId);
 8006156:	4b22      	ldr	r3, [pc, #136]	; (80061e0 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x138>)
 8006158:	681a      	ldr	r2, [r3, #0]
 800615a:	69bb      	ldr	r3, [r7, #24]
 800615c:	889b      	ldrh	r3, [r3, #4]
 800615e:	4619      	mov	r1, r3
 8006160:	4610      	mov	r0, r2
 8006162:	f002 f93d 	bl	80083e0 <_ZNK8touchgfx5Texts7getTextEt>
 8006166:	4603      	mov	r3, r0
 8006168:	bf00      	nop
 800616a:	623b      	str	r3, [r7, #32]
            textHeightIncludingSpacing = f->getMaxTextHeight(s) * f->getNumberOfLines(s) + f->getSpacingAbove(s);
 800616c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	3328      	adds	r3, #40	; 0x28
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	6a39      	ldr	r1, [r7, #32]
 8006176:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006178:	4798      	blx	r3
 800617a:	4603      	mov	r3, r0
 800617c:	b2dc      	uxtb	r4, r3
 800617e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	3340      	adds	r3, #64	; 0x40
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	6a39      	ldr	r1, [r7, #32]
 8006188:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800618a:	4798      	blx	r3
 800618c:	4603      	mov	r3, r0
 800618e:	b2db      	uxtb	r3, r3
 8006190:	fb14 f303 	smulbb	r3, r4, r3
 8006194:	b2dc      	uxtb	r4, r3
 8006196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	3324      	adds	r3, #36	; 0x24
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	6a39      	ldr	r1, [r7, #32]
 80061a0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80061a2:	4798      	blx	r3
 80061a4:	4603      	mov	r3, r0
 80061a6:	4423      	add	r3, r4
 80061a8:	b2da      	uxtb	r2, r3
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        }
        else
        {
            textHeightIncludingSpacing = 0;
        }
    }
 80061b0:	e003      	b.n	80061ba <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x112>
            textHeightIncludingSpacing = 0;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	2200      	movs	r2, #0
 80061b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
 80061ba:	bf00      	nop
 80061bc:	372c      	adds	r7, #44	; 0x2c
 80061be:	46bd      	mov	sp, r7
 80061c0:	bd90      	pop	{r4, r7, pc}
 80061c2:	bf00      	nop
 80061c4:	2400c92c 	.word	0x2400c92c
 80061c8:	0802d350 	.word	0x0802d350
 80061cc:	0802d394 	.word	0x0802d394
 80061d0:	0802d3c4 	.word	0x0802d3c4
 80061d4:	2400c930 	.word	0x2400c930
 80061d8:	0802d40c 	.word	0x0802d40c
 80061dc:	2400c934 	.word	0x2400c934
 80061e0:	2400c938 	.word	0x2400c938

080061e4 <_ZN8touchgfx15AbstractPainterC1Ev>:
 */
class AbstractPainter
{
public:
    /** Initializes a new instance of the AbstractPainter class. */
    AbstractPainter()
 80061e4:	b480      	push	{r7}
 80061e6:	b083      	sub	sp, #12
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	6078      	str	r0, [r7, #4]
        : areaOffsetX(0),
          areaOffsetY(0),
          widgetAlpha(255)
 80061ec:	4a09      	ldr	r2, [pc, #36]	; (8006214 <_ZN8touchgfx15AbstractPainterC1Ev+0x30>)
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	601a      	str	r2, [r3, #0]
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	2200      	movs	r2, #0
 80061f6:	809a      	strh	r2, [r3, #4]
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	2200      	movs	r2, #0
 80061fc:	80da      	strh	r2, [r3, #6]
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	22ff      	movs	r2, #255	; 0xff
 8006202:	721a      	strb	r2, [r3, #8]
    {
    }
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	4618      	mov	r0, r3
 8006208:	370c      	adds	r7, #12
 800620a:	46bd      	mov	sp, r7
 800620c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006210:	4770      	bx	lr
 8006212:	bf00      	nop
 8006214:	0802e158 	.word	0x0802e158

08006218 <_ZN8touchgfx15AbstractPainterD1Ev>:

    /** Finalizes an instance of the AbstractPainter class. */
    virtual ~AbstractPainter()
 8006218:	b480      	push	{r7}
 800621a:	b083      	sub	sp, #12
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]
    {
 8006220:	4a04      	ldr	r2, [pc, #16]	; (8006234 <_ZN8touchgfx15AbstractPainterD1Ev+0x1c>)
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	601a      	str	r2, [r3, #0]
    }
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	4618      	mov	r0, r3
 800622a:	370c      	adds	r7, #12
 800622c:	46bd      	mov	sp, r7
 800622e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006232:	4770      	bx	lr
 8006234:	0802e158 	.word	0x0802e158

08006238 <_ZN8touchgfx15AbstractPainterD0Ev>:
    virtual ~AbstractPainter()
 8006238:	b580      	push	{r7, lr}
 800623a:	b082      	sub	sp, #8
 800623c:	af00      	add	r7, sp, #0
 800623e:	6078      	str	r0, [r7, #4]
    }
 8006240:	6878      	ldr	r0, [r7, #4]
 8006242:	f7ff ffe9 	bl	8006218 <_ZN8touchgfx15AbstractPainterD1Ev>
 8006246:	210c      	movs	r1, #12
 8006248:	6878      	ldr	r0, [r7, #4]
 800624a:	f025 f940 	bl	802b4ce <_ZdlPvj>
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	4618      	mov	r0, r3
 8006252:	3708      	adds	r7, #8
 8006254:	46bd      	mov	sp, r7
 8006256:	bd80      	pop	{r7, pc}

08006258 <_ZN8touchgfx12CanvasWidget8setAlphaEh>:
     * @see setPainter
     */
    virtual AbstractPainter& getPainter() const;

    /** @copydoc Image::setAlpha */
    virtual void setAlpha(uint8_t newAlpha)
 8006258:	b480      	push	{r7}
 800625a:	b083      	sub	sp, #12
 800625c:	af00      	add	r7, sp, #0
 800625e:	6078      	str	r0, [r7, #4]
 8006260:	460b      	mov	r3, r1
 8006262:	70fb      	strb	r3, [r7, #3]
    {
        alpha = newAlpha;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	78fa      	ldrb	r2, [r7, #3]
 8006268:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
    }
 800626c:	bf00      	nop
 800626e:	370c      	adds	r7, #12
 8006270:	46bd      	mov	sp, r7
 8006272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006276:	4770      	bx	lr

08006278 <_ZNK8touchgfx12CanvasWidget8getAlphaEv>:

    /** @copydoc Image::getAlpha() */
    virtual uint8_t getAlpha() const
 8006278:	b480      	push	{r7}
 800627a:	b083      	sub	sp, #12
 800627c:	af00      	add	r7, sp, #0
 800627e:	6078      	str	r0, [r7, #4]
    {
        return alpha;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
    }
 8006286:	4618      	mov	r0, r3
 8006288:	370c      	adds	r7, #12
 800628a:	46bd      	mov	sp, r7
 800628c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006290:	4770      	bx	lr
	...

08006294 <_ZN8touchgfx21AbstractPainterRGB888C1Ev>:
 * @see AbstractPainter
 */
class AbstractPainterRGB888 : public AbstractPainter
{
public:
    AbstractPainterRGB888()
 8006294:	b580      	push	{r7, lr}
 8006296:	b084      	sub	sp, #16
 8006298:	af00      	add	r7, sp, #0
 800629a:	6078      	str	r0, [r7, #4]
        : AbstractPainter(), currentX(0), currentY(0)
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	4618      	mov	r0, r3
 80062a0:	f7ff ffa0 	bl	80061e4 <_ZN8touchgfx15AbstractPainterC1Ev>
 80062a4:	4a29      	ldr	r2, [pc, #164]	; (800634c <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0xb8>)
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	601a      	str	r2, [r3, #0]
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	2200      	movs	r2, #0
 80062ae:	60da      	str	r2, [r3, #12]
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2200      	movs	r2, #0
 80062b4:	611a      	str	r2, [r3, #16]
 80062b6:	2301      	movs	r3, #1
 80062b8:	73fb      	strb	r3, [r7, #15]
     *
     * @return True if the format matches the framebuffer format, false otherwise.
     */
    FORCE_INLINE_FUNCTION static bool compatibleFramebuffer(Bitmap::BitmapFormat format)
    {
        bool compat = HAL::lcd().framebufferFormat() == format;
 80062ba:	f7fe f8db 	bl	8004474 <_ZN8touchgfx3HAL3lcdEv>
 80062be:	4603      	mov	r3, r0
 80062c0:	681a      	ldr	r2, [r3, #0]
 80062c2:	3224      	adds	r2, #36	; 0x24
 80062c4:	6812      	ldr	r2, [r2, #0]
 80062c6:	4618      	mov	r0, r3
 80062c8:	4790      	blx	r2
 80062ca:	4603      	mov	r3, r0
 80062cc:	461a      	mov	r2, r3
 80062ce:	7bfb      	ldrb	r3, [r7, #15]
 80062d0:	4293      	cmp	r3, r2
 80062d2:	bf0c      	ite	eq
 80062d4:	2301      	moveq	r3, #1
 80062d6:	2300      	movne	r3, #0
 80062d8:	73bb      	strb	r3, [r7, #14]
        if (HAL::getInstance()->getAuxiliaryLCD())
 80062da:	f7fa ff8d 	bl	80011f8 <_ZN8touchgfx3HAL11getInstanceEv>
 80062de:	4603      	mov	r3, r0
 80062e0:	4618      	mov	r0, r3
 80062e2:	f7ff fd43 	bl	8005d6c <_ZN8touchgfx3HAL15getAuxiliaryLCDEv>
 80062e6:	4603      	mov	r3, r0
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	bf14      	ite	ne
 80062ec:	2301      	movne	r3, #1
 80062ee:	2300      	moveq	r3, #0
 80062f0:	b2db      	uxtb	r3, r3
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d01b      	beq.n	800632e <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x9a>
        {
            compat |= HAL::getInstance()->getAuxiliaryLCD()->framebufferFormat() == format;
 80062f6:	f7fa ff7f 	bl	80011f8 <_ZN8touchgfx3HAL11getInstanceEv>
 80062fa:	4603      	mov	r3, r0
 80062fc:	4618      	mov	r0, r3
 80062fe:	f7ff fd35 	bl	8005d6c <_ZN8touchgfx3HAL15getAuxiliaryLCDEv>
 8006302:	4603      	mov	r3, r0
 8006304:	681a      	ldr	r2, [r3, #0]
 8006306:	3224      	adds	r2, #36	; 0x24
 8006308:	6812      	ldr	r2, [r2, #0]
 800630a:	4618      	mov	r0, r3
 800630c:	4790      	blx	r2
 800630e:	4603      	mov	r3, r0
 8006310:	461a      	mov	r2, r3
 8006312:	7bfb      	ldrb	r3, [r7, #15]
 8006314:	4293      	cmp	r3, r2
 8006316:	bf0c      	ite	eq
 8006318:	2301      	moveq	r3, #1
 800631a:	2300      	movne	r3, #0
 800631c:	b2da      	uxtb	r2, r3
 800631e:	7bbb      	ldrb	r3, [r7, #14]
 8006320:	4313      	orrs	r3, r2
 8006322:	b2db      	uxtb	r3, r3
 8006324:	2b00      	cmp	r3, #0
 8006326:	bf14      	ite	ne
 8006328:	2301      	movne	r3, #1
 800632a:	2300      	moveq	r3, #0
 800632c:	73bb      	strb	r3, [r7, #14]
        }
        return compat;
 800632e:	7bbb      	ldrb	r3, [r7, #14]
    {
        assert(compatibleFramebuffer(Bitmap::RGB888) && "The chosen painter only works with RGB888 displays");
 8006330:	2b00      	cmp	r3, #0
 8006332:	d105      	bne.n	8006340 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0xac>
 8006334:	4b06      	ldr	r3, [pc, #24]	; (8006350 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0xbc>)
 8006336:	4a07      	ldr	r2, [pc, #28]	; (8006354 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0xc0>)
 8006338:	2128      	movs	r1, #40	; 0x28
 800633a:	4807      	ldr	r0, [pc, #28]	; (8006358 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0xc4>)
 800633c:	f025 fa9c 	bl	802b878 <__assert_func>
 8006340:	bf00      	nop
    }
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	4618      	mov	r0, r3
 8006346:	3710      	adds	r7, #16
 8006348:	46bd      	mov	sp, r7
 800634a:	bd80      	pop	{r7, pc}
 800634c:	0802f1e0 	.word	0x0802f1e0
 8006350:	0802d460 	.word	0x0802d460
 8006354:	0802d4c0 	.word	0x0802d4c0
 8006358:	0802d4fc 	.word	0x0802d4fc

0800635c <_ZN8touchgfx21AbstractPainterRGB888D1Ev>:
class AbstractPainterRGB888 : public AbstractPainter
 800635c:	b580      	push	{r7, lr}
 800635e:	b082      	sub	sp, #8
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]
 8006364:	4a05      	ldr	r2, [pc, #20]	; (800637c <_ZN8touchgfx21AbstractPainterRGB888D1Ev+0x20>)
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	601a      	str	r2, [r3, #0]
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	4618      	mov	r0, r3
 800636e:	f7ff ff53 	bl	8006218 <_ZN8touchgfx15AbstractPainterD1Ev>
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	4618      	mov	r0, r3
 8006376:	3708      	adds	r7, #8
 8006378:	46bd      	mov	sp, r7
 800637a:	bd80      	pop	{r7, pc}
 800637c:	0802f1e0 	.word	0x0802f1e0

08006380 <_ZN8touchgfx21AbstractPainterRGB888D0Ev>:
 8006380:	b580      	push	{r7, lr}
 8006382:	b082      	sub	sp, #8
 8006384:	af00      	add	r7, sp, #0
 8006386:	6078      	str	r0, [r7, #4]
 8006388:	6878      	ldr	r0, [r7, #4]
 800638a:	f7ff ffe7 	bl	800635c <_ZN8touchgfx21AbstractPainterRGB888D1Ev>
 800638e:	2114      	movs	r1, #20
 8006390:	6878      	ldr	r0, [r7, #4]
 8006392:	f025 f89c 	bl	802b4ce <_ZdlPvj>
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	4618      	mov	r0, r3
 800639a:	3708      	adds	r7, #8
 800639c:	46bd      	mov	sp, r7
 800639e:	bd80      	pop	{r7, pc}

080063a0 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeE>:
    /**
     * Initializes a new instance of the PainterRGB888 class.
     *
     * @param  color (Optional) the color, default is black.
     */
    PainterRGB888(colortype color = 0)
 80063a0:	b580      	push	{r7, lr}
 80063a2:	b082      	sub	sp, #8
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	6078      	str	r0, [r7, #4]
 80063a8:	6039      	str	r1, [r7, #0]
        : AbstractPainterRGB888(), painterRed(0), painterGreen(0), painterBlue(0)
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	4618      	mov	r0, r3
 80063ae:	f7ff ff71 	bl	8006294 <_ZN8touchgfx21AbstractPainterRGB888C1Ev>
 80063b2:	4a0a      	ldr	r2, [pc, #40]	; (80063dc <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeE+0x3c>)
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	601a      	str	r2, [r3, #0]
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	2200      	movs	r2, #0
 80063bc:	751a      	strb	r2, [r3, #20]
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	2200      	movs	r2, #0
 80063c2:	755a      	strb	r2, [r3, #21]
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2200      	movs	r2, #0
 80063c8:	759a      	strb	r2, [r3, #22]
    {
        setColor(color);
 80063ca:	6839      	ldr	r1, [r7, #0]
 80063cc:	6878      	ldr	r0, [r7, #4]
 80063ce:	f000 f807 	bl	80063e0 <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeE>
    }
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	4618      	mov	r0, r3
 80063d6:	3708      	adds	r7, #8
 80063d8:	46bd      	mov	sp, r7
 80063da:	bd80      	pop	{r7, pc}
 80063dc:	0802f334 	.word	0x0802f334

080063e0 <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeE>:
    /**
     * Sets color to use when drawing the CanvasWidget.
     *
     * @param  color The color.
     */
    void setColor(colortype color)
 80063e0:	b580      	push	{r7, lr}
 80063e2:	b086      	sub	sp, #24
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	6078      	str	r0, [r7, #4]
 80063e8:	6039      	str	r1, [r7, #0]
 80063ea:	683b      	ldr	r3, [r7, #0]
 80063ec:	617b      	str	r3, [r7, #20]
     *
     * @return The red part of the color.
     */
    FORCE_INLINE_FUNCTION static uint8_t getRed(colortype color)
    {
        return color >> 16;
 80063ee:	f107 0314 	add.w	r3, r7, #20
 80063f2:	4618      	mov	r0, r3
 80063f4:	f7fa fe72 	bl	80010dc <_ZNK8touchgfx9colortypecvmEv>
 80063f8:	4603      	mov	r3, r0
 80063fa:	0c1b      	lsrs	r3, r3, #16
 80063fc:	b2da      	uxtb	r2, r3
    {
        painterRed = Color::getRed(color);
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	751a      	strb	r2, [r3, #20]
 8006402:	683b      	ldr	r3, [r7, #0]
 8006404:	613b      	str	r3, [r7, #16]
     *
     * @return The green part of the color.
     */
    FORCE_INLINE_FUNCTION static uint8_t getGreen(colortype color)
    {
        return color >> 8;
 8006406:	f107 0310 	add.w	r3, r7, #16
 800640a:	4618      	mov	r0, r3
 800640c:	f7fa fe66 	bl	80010dc <_ZNK8touchgfx9colortypecvmEv>
 8006410:	4603      	mov	r3, r0
 8006412:	0a1b      	lsrs	r3, r3, #8
 8006414:	b2da      	uxtb	r2, r3
        painterGreen = Color::getGreen(color);
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	755a      	strb	r2, [r3, #21]
 800641a:	683b      	ldr	r3, [r7, #0]
 800641c:	60fb      	str	r3, [r7, #12]
     *
     * @return The blue part of the color.
     */
    FORCE_INLINE_FUNCTION static uint8_t getBlue(colortype color)
    {
        return color;
 800641e:	f107 030c 	add.w	r3, r7, #12
 8006422:	4618      	mov	r0, r3
 8006424:	f7fa fe5a 	bl	80010dc <_ZNK8touchgfx9colortypecvmEv>
 8006428:	4603      	mov	r3, r0
 800642a:	b2da      	uxtb	r2, r3
        painterBlue = Color::getBlue(color);
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	759a      	strb	r2, [r3, #22]
    }
 8006430:	bf00      	nop
 8006432:	3718      	adds	r7, #24
 8006434:	46bd      	mov	sp, r7
 8006436:	bd80      	pop	{r7, pc}

08006438 <_ZN8touchgfx8TextAreaC1Ev>:
 *       the pointer remains valid when drawing.
 */
class TextArea : public Widget
{
public:
    TextArea()
 8006438:	b580      	push	{r7, lr}
 800643a:	b082      	sub	sp, #8
 800643c:	af00      	add	r7, sp, #0
 800643e:	6078      	str	r0, [r7, #4]
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE)
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	4618      	mov	r0, r3
 8006444:	2326      	movs	r3, #38	; 0x26
 8006446:	461a      	mov	r2, r3
 8006448:	2100      	movs	r1, #0
 800644a:	f025 faa1 	bl	802b990 <memset>
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	4618      	mov	r0, r3
 8006452:	f7ff fcff 	bl	8005e54 <_ZN8touchgfx6WidgetC1Ev>
 8006456:	4a14      	ldr	r2, [pc, #80]	; (80064a8 <_ZN8touchgfx8TextAreaC1Ev+0x70>)
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	601a      	str	r2, [r3, #0]
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	3328      	adds	r3, #40	; 0x28
 8006460:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8006464:	4618      	mov	r0, r3
 8006466:	f7ff fd9b 	bl	8005fa0 <_ZN8touchgfx9TypedTextC1Et>
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	3330      	adds	r3, #48	; 0x30
 800646e:	2100      	movs	r1, #0
 8006470:	4618      	mov	r0, r3
 8006472:	f7ff fc1f 	bl	8005cb4 <_ZN8touchgfx9colortypeC1Em>
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	2200      	movs	r2, #0
 800647a:	869a      	strh	r2, [r3, #52]	; 0x34
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	22ff      	movs	r2, #255	; 0xff
 8006480:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	2200      	movs	r2, #0
 8006488:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2200      	movs	r2, #0
 8006490:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2200      	movs	r2, #0
 8006498:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    {
    }
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	4618      	mov	r0, r3
 80064a0:	3708      	adds	r7, #8
 80064a2:	46bd      	mov	sp, r7
 80064a4:	bd80      	pop	{r7, pc}
 80064a6:	bf00      	nop
 80064a8:	0802fc28 	.word	0x0802fc28

080064ac <_ZN8touchgfx8TextAreaD1Ev>:
class TextArea : public Widget
 80064ac:	b580      	push	{r7, lr}
 80064ae:	b082      	sub	sp, #8
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	6078      	str	r0, [r7, #4]
 80064b4:	4a08      	ldr	r2, [pc, #32]	; (80064d8 <_ZN8touchgfx8TextAreaD1Ev+0x2c>)
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	601a      	str	r2, [r3, #0]
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	3328      	adds	r3, #40	; 0x28
 80064be:	4618      	mov	r0, r3
 80064c0:	f7fd fe3e 	bl	8004140 <_ZN8touchgfx9TypedTextD1Ev>
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	4618      	mov	r0, r3
 80064c8:	f7fe f8ce 	bl	8004668 <_ZN8touchgfx6WidgetD1Ev>
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	4618      	mov	r0, r3
 80064d0:	3708      	adds	r7, #8
 80064d2:	46bd      	mov	sp, r7
 80064d4:	bd80      	pop	{r7, pc}
 80064d6:	bf00      	nop
 80064d8:	0802fc28 	.word	0x0802fc28

080064dc <_ZN8touchgfx8TextAreaD0Ev>:
 80064dc:	b580      	push	{r7, lr}
 80064de:	b082      	sub	sp, #8
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	6078      	str	r0, [r7, #4]
 80064e4:	6878      	ldr	r0, [r7, #4]
 80064e6:	f7ff ffe1 	bl	80064ac <_ZN8touchgfx8TextAreaD1Ev>
 80064ea:	213c      	movs	r1, #60	; 0x3c
 80064ec:	6878      	ldr	r0, [r7, #4]
 80064ee:	f024 ffee 	bl	802b4ce <_ZdlPvj>
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	4618      	mov	r0, r3
 80064f6:	3708      	adds	r7, #8
 80064f8:	46bd      	mov	sp, r7
 80064fa:	bd80      	pop	{r7, pc}

080064fc <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>:
 *       replaced by a wildcard text.
 */
class TextAreaWithOneWildcard : public TextArea
{
public:
    TextAreaWithOneWildcard()
 80064fc:	b580      	push	{r7, lr}
 80064fe:	b082      	sub	sp, #8
 8006500:	af00      	add	r7, sp, #0
 8006502:	6078      	str	r0, [r7, #4]
        : TextArea(), wildcard(0)
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	4618      	mov	r0, r3
 8006508:	f7ff ff96 	bl	8006438 <_ZN8touchgfx8TextAreaC1Ev>
 800650c:	4a05      	ldr	r2, [pc, #20]	; (8006524 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev+0x28>)
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	601a      	str	r2, [r3, #0]
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	2200      	movs	r2, #0
 8006516:	63da      	str	r2, [r3, #60]	; 0x3c
    {
    }
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	4618      	mov	r0, r3
 800651c:	3708      	adds	r7, #8
 800651e:	46bd      	mov	sp, r7
 8006520:	bd80      	pop	{r7, pc}
 8006522:	bf00      	nop
 8006524:	0803001c 	.word	0x0803001c

08006528 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>:
     * @param  value A pointer to the UnicodeChar to set the wildcard to.
     *
     * @note The pointer passed is saved, and must be accessible whenever TextAreaWithOneWildcard
     *       may need it.
     */
    void setWildcard(const Unicode::UnicodeChar* value)
 8006528:	b480      	push	{r7}
 800652a:	b083      	sub	sp, #12
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]
 8006530:	6039      	str	r1, [r7, #0]
    {
        wildcard = value;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	683a      	ldr	r2, [r7, #0]
 8006536:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 8006538:	bf00      	nop
 800653a:	370c      	adds	r7, #12
 800653c:	46bd      	mov	sp, r7
 800653e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006542:	4770      	bx	lr

08006544 <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev>:
class View : public Screen
 8006544:	b580      	push	{r7, lr}
 8006546:	b082      	sub	sp, #8
 8006548:	af00      	add	r7, sp, #0
 800654a:	6078      	str	r0, [r7, #4]
 800654c:	4a05      	ldr	r2, [pc, #20]	; (8006564 <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev+0x20>)
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	601a      	str	r2, [r3, #0]
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	4618      	mov	r0, r3
 8006556:	f7ff fc15 	bl	8005d84 <_ZN8touchgfx6ScreenD1Ev>
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	4618      	mov	r0, r3
 800655e:	3708      	adds	r7, #8
 8006560:	46bd      	mov	sp, r7
 8006562:	bd80      	pop	{r7, pc}
 8006564:	0802e0a4 	.word	0x0802e0a4

08006568 <_ZN8touchgfx4ViewI16Screen1PresenterED0Ev>:
 8006568:	b580      	push	{r7, lr}
 800656a:	b082      	sub	sp, #8
 800656c:	af00      	add	r7, sp, #0
 800656e:	6078      	str	r0, [r7, #4]
 8006570:	6878      	ldr	r0, [r7, #4]
 8006572:	f7ff ffe7 	bl	8006544 <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev>
 8006576:	2140      	movs	r1, #64	; 0x40
 8006578:	6878      	ldr	r0, [r7, #4]
 800657a:	f024 ffa8 	bl	802b4ce <_ZdlPvj>
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	4618      	mov	r0, r3
 8006582:	3708      	adds	r7, #8
 8006584:	46bd      	mov	sp, r7
 8006586:	bd80      	pop	{r7, pc}

08006588 <_ZN15Screen1ViewBaseD1Ev>:

class Screen1ViewBase : public touchgfx::View<Screen1Presenter>
{
public:
    Screen1ViewBase();
    virtual ~Screen1ViewBase() {}
 8006588:	b580      	push	{r7, lr}
 800658a:	b082      	sub	sp, #8
 800658c:	af00      	add	r7, sp, #0
 800658e:	6078      	str	r0, [r7, #4]
 8006590:	4a1b      	ldr	r2, [pc, #108]	; (8006600 <_ZN15Screen1ViewBaseD1Ev+0x78>)
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	601a      	str	r2, [r3, #0]
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	f503 638a 	add.w	r3, r3, #1104	; 0x450
 800659c:	4618      	mov	r0, r3
 800659e:	f000 ff7b 	bl	8007498 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvED1Ev>
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 80065a8:	4618      	mov	r0, r3
 80065aa:	f001 f8d1 	bl	8007750 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	f503 737e 	add.w	r3, r3, #1016	; 0x3f8
 80065b4:	4618      	mov	r0, r3
 80065b6:	f001 f8a9 	bl	800770c <_ZN8touchgfx13PainterRGB888D1Ev>
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	f503 7370 	add.w	r3, r3, #960	; 0x3c0
 80065c0:	4618      	mov	r0, r3
 80065c2:	f001 f881 	bl	80076c8 <_ZN8touchgfx16GraphElementLineD1Ev>
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	33e4      	adds	r3, #228	; 0xe4
 80065ca:	4618      	mov	r0, r3
 80065cc:	f000 ff86 	bl	80074dc <_ZN8touchgfx11GraphScrollILs100EED1Ev>
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	339c      	adds	r3, #156	; 0x9c
 80065d4:	4618      	mov	r0, r3
 80065d6:	f001 f80b 	bl	80075f0 <_ZN8touchgfx15ButtonWithLabelD1Ev>
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	336c      	adds	r3, #108	; 0x6c
 80065de:	4618      	mov	r0, r3
 80065e0:	f000 ffc2 	bl	8007568 <_ZN8touchgfx10TiledImageD1Ev>
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	3340      	adds	r3, #64	; 0x40
 80065e8:	4618      	mov	r0, r3
 80065ea:	f000 ff9b 	bl	8007524 <_ZN8touchgfx3BoxD1Ev>
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	4618      	mov	r0, r3
 80065f2:	f7ff ffa7 	bl	8006544 <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev>
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	4618      	mov	r0, r3
 80065fa:	3708      	adds	r7, #8
 80065fc:	46bd      	mov	sp, r7
 80065fe:	bd80      	pop	{r7, pc}
 8006600:	0802df2c 	.word	0x0802df2c

08006604 <_ZN15Screen1ViewBaseD0Ev>:
 8006604:	b580      	push	{r7, lr}
 8006606:	b082      	sub	sp, #8
 8006608:	af00      	add	r7, sp, #0
 800660a:	6078      	str	r0, [r7, #4]
 800660c:	6878      	ldr	r0, [r7, #4]
 800660e:	f7ff ffbb 	bl	8006588 <_ZN15Screen1ViewBaseD1Ev>
 8006612:	f44f 5102 	mov.w	r1, #8320	; 0x2080
 8006616:	6878      	ldr	r0, [r7, #4]
 8006618:	f024 ff59 	bl	802b4ce <_ZdlPvj>
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	4618      	mov	r0, r3
 8006620:	3708      	adds	r7, #8
 8006622:	46bd      	mov	sp, r7
 8006624:	bd80      	pop	{r7, pc}

08006626 <_ZN15Screen1ViewBase11applicationEv>:
    virtual void setupScreen();

protected:
    FrontendApplication& application() {
 8006626:	b580      	push	{r7, lr}
 8006628:	b082      	sub	sp, #8
 800662a:	af00      	add	r7, sp, #0
 800662c:	6078      	str	r0, [r7, #4]
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 800662e:	f018 f949 	bl	801e8c4 <_ZN8touchgfx11Application11getInstanceEv>
 8006632:	4603      	mov	r3, r0
    }
 8006634:	4618      	mov	r0, r3
 8006636:	3708      	adds	r7, #8
 8006638:	46bd      	mov	sp, r7
 800663a:	bd80      	pop	{r7, pc}

0800663c <_ZN15Screen1ViewBaseC1Ev>:
#include <BitmapDatabase.hpp>
#include <texts/TextKeysAndLanguages.hpp>
#include <touchgfx/canvas_widget_renderer/CanvasWidgetRenderer.hpp>


Screen1ViewBase::Screen1ViewBase() :
 800663c:	b590      	push	{r4, r7, lr}
 800663e:	b0a1      	sub	sp, #132	; 0x84
 8006640:	af02      	add	r7, sp, #8
 8006642:	6078      	str	r0, [r7, #4]
    buttonCallback(this, &Screen1ViewBase::buttonCallbackHandler)
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	4618      	mov	r0, r3
 8006648:	f000 fe02 	bl	8007250 <_ZN8touchgfx4ViewI16Screen1PresenterEC1Ev>
 800664c:	4ae1      	ldr	r2, [pc, #900]	; (80069d4 <_ZN15Screen1ViewBaseC1Ev+0x398>)
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	601a      	str	r2, [r3, #0]
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	3340      	adds	r3, #64	; 0x40
 8006656:	4618      	mov	r0, r3
 8006658:	f7ff fc0e 	bl	8005e78 <_ZN8touchgfx3BoxC1Ev>
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	f103 046c 	add.w	r4, r3, #108	; 0x6c
 8006662:	f107 0310 	add.w	r3, r7, #16
 8006666:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800666a:	4618      	mov	r0, r3
 800666c:	f7ff fb31 	bl	8005cd2 <_ZN8touchgfx6BitmapC1Et>
 8006670:	f107 0310 	add.w	r3, r7, #16
 8006674:	4619      	mov	r1, r3
 8006676:	4620      	mov	r0, r4
 8006678:	f7ff fc78 	bl	8005f6c <_ZN8touchgfx10TiledImageC1ERKNS_6BitmapE>
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	339c      	adds	r3, #156	; 0x9c
 8006680:	4618      	mov	r0, r3
 8006682:	f016 fbef 	bl	801ce64 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	33e4      	adds	r3, #228	; 0xe4
 800668a:	4618      	mov	r0, r3
 800668c:	f000 fe9e 	bl	80073cc <_ZN8touchgfx11GraphScrollILs100EEC1Ev>
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	f503 7370 	add.w	r3, r3, #960	; 0x3c0
 8006696:	4618      	mov	r0, r3
 8006698:	f014 fbf8 	bl	801ae8c <_ZN8touchgfx16GraphElementLineC1Ev>
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	f503 747e 	add.w	r4, r3, #1016	; 0x3f8
 80066a2:	f107 0314 	add.w	r3, r7, #20
 80066a6:	2100      	movs	r1, #0
 80066a8:	4618      	mov	r0, r3
 80066aa:	f7ff fb03 	bl	8005cb4 <_ZN8touchgfx9colortypeC1Em>
 80066ae:	6979      	ldr	r1, [r7, #20]
 80066b0:	4620      	mov	r0, r4
 80066b2:	f7ff fe75 	bl	80063a0 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeE>
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 80066bc:	4618      	mov	r0, r3
 80066be:	f7ff ff1d 	bl	80064fc <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	f503 608a 	add.w	r0, r3, #1104	; 0x450
 80066c8:	4bc3      	ldr	r3, [pc, #780]	; (80069d8 <_ZN15Screen1ViewBaseC1Ev+0x39c>)
 80066ca:	61bb      	str	r3, [r7, #24]
 80066cc:	2300      	movs	r3, #0
 80066ce:	61fb      	str	r3, [r7, #28]
 80066d0:	f107 0318 	add.w	r3, r7, #24
 80066d4:	cb0c      	ldmia	r3, {r2, r3}
 80066d6:	6879      	ldr	r1, [r7, #4]
 80066d8:	f000 fe9e 	bl	8007418 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>
{

    touchgfx::CanvasWidgetRenderer::setupBuffer(canvasBuffer, CANVAS_BUFFER_SIZE);
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	f503 638c 	add.w	r3, r3, #1120	; 0x460
 80066e2:	f44f 51e1 	mov.w	r1, #7200	; 0x1c20
 80066e6:	4618      	mov	r0, r3
 80066e8:	f016 fbea 	bl	801cec0 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj>

    __background.setPosition(0, 0, 480, 272);
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	f103 0040 	add.w	r0, r3, #64	; 0x40
 80066f2:	f44f 7388 	mov.w	r3, #272	; 0x110
 80066f6:	9300      	str	r3, [sp, #0]
 80066f8:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80066fc:	2200      	movs	r2, #0
 80066fe:	2100      	movs	r1, #0
 8006700:	f7fd fd75 	bl	80041ee <_ZN8touchgfx8Drawable11setPositionEssss>
    __background.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	f103 0440 	add.w	r4, r3, #64	; 0x40
 800670a:	2300      	movs	r3, #0
 800670c:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
 8006710:	2300      	movs	r3, #0
 8006712:	f887 305a 	strb.w	r3, [r7, #90]	; 0x5a
 8006716:	2300      	movs	r3, #0
 8006718:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 800671c:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8006720:	041b      	lsls	r3, r3, #16
 8006722:	461a      	mov	r2, r3
 8006724:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 8006728:	021b      	lsls	r3, r3, #8
 800672a:	431a      	orrs	r2, r3
 800672c:	f897 3059 	ldrb.w	r3, [r7, #89]	; 0x59
 8006730:	4313      	orrs	r3, r2
 8006732:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8006736:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800673a:	4611      	mov	r1, r2
 800673c:	4618      	mov	r0, r3
 800673e:	f7ff fab9 	bl	8005cb4 <_ZN8touchgfx9colortypeC1Em>
 8006742:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006744:	4619      	mov	r1, r3
 8006746:	4620      	mov	r0, r4
 8006748:	f7ff fbba 	bl	8005ec0 <_ZN8touchgfx3Box8setColorENS_9colortypeE>

    tiledImage1.setBitmap(touchgfx::Bitmap(BITMAP_DARK_TEXTURES_GPLAYPATTERN_ID));
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	f103 046c 	add.w	r4, r3, #108	; 0x6c
 8006752:	f107 0320 	add.w	r3, r7, #32
 8006756:	2104      	movs	r1, #4
 8006758:	4618      	mov	r0, r3
 800675a:	f7ff faba 	bl	8005cd2 <_ZN8touchgfx6BitmapC1Et>
 800675e:	f107 0320 	add.w	r3, r7, #32
 8006762:	4619      	mov	r1, r3
 8006764:	4620      	mov	r0, r4
 8006766:	f015 fd70 	bl	801c24a <_ZN8touchgfx10TiledImage9setBitmapERKNS_6BitmapE>
    tiledImage1.setPosition(0, 0, 480, 272);
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	f103 006c 	add.w	r0, r3, #108	; 0x6c
 8006770:	f44f 7388 	mov.w	r3, #272	; 0x110
 8006774:	9300      	str	r3, [sp, #0]
 8006776:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800677a:	2200      	movs	r2, #0
 800677c:	2100      	movs	r1, #0
 800677e:	f7fd fd36 	bl	80041ee <_ZN8touchgfx8Drawable11setPositionEssss>
    tiledImage1.setOffset(0, 0);
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	336c      	adds	r3, #108	; 0x6c
 8006786:	2200      	movs	r2, #0
 8006788:	2100      	movs	r1, #0
 800678a:	4618      	mov	r0, r3
 800678c:	f015 fd3c 	bl	801c208 <_ZN8touchgfx10TiledImage9setOffsetEss>

    buttonWithLabel1.setXY(0, 0);
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	339c      	adds	r3, #156	; 0x9c
 8006794:	2200      	movs	r2, #0
 8006796:	2100      	movs	r1, #0
 8006798:	4618      	mov	r0, r3
 800679a:	f7fd fd74 	bl	8004286 <_ZN8touchgfx8Drawable5setXYEss>
    buttonWithLabel1.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_ICON_BUTTON_PRESSED_ID));
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	f103 049c 	add.w	r4, r3, #156	; 0x9c
 80067a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80067a8:	2100      	movs	r1, #0
 80067aa:	4618      	mov	r0, r3
 80067ac:	f7ff fa91 	bl	8005cd2 <_ZN8touchgfx6BitmapC1Et>
 80067b0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80067b4:	2101      	movs	r1, #1
 80067b6:	4618      	mov	r0, r3
 80067b8:	f7ff fa8b 	bl	8005cd2 <_ZN8touchgfx6BitmapC1Et>
 80067bc:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80067c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80067c4:	4619      	mov	r1, r3
 80067c6:	4620      	mov	r0, r4
 80067c8:	f016 f860 	bl	801c88c <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    buttonWithLabel1.setLabelText(touchgfx::TypedText(T___SINGLEUSE_XBFX));
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	f103 049c 	add.w	r4, r3, #156	; 0x9c
 80067d2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80067d6:	2100      	movs	r1, #0
 80067d8:	4618      	mov	r0, r3
 80067da:	f7ff fbe1 	bl	8005fa0 <_ZN8touchgfx9TypedTextC1Et>
 80067de:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80067e2:	4619      	mov	r1, r3
 80067e4:	4620      	mov	r0, r4
 80067e6:	f7ff fc31 	bl	800604c <_ZN8touchgfx15ButtonWithLabel12setLabelTextENS_9TypedTextE>
 80067ea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80067ee:	4618      	mov	r0, r3
 80067f0:	f7fd fca6 	bl	8004140 <_ZN8touchgfx9TypedTextD1Ev>
    buttonWithLabel1.setLabelColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	f103 049c 	add.w	r4, r3, #156	; 0x9c
 80067fa:	23ff      	movs	r3, #255	; 0xff
 80067fc:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
 8006800:	23ff      	movs	r3, #255	; 0xff
 8006802:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
 8006806:	23ff      	movs	r3, #255	; 0xff
 8006808:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
 800680c:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8006810:	041b      	lsls	r3, r3, #16
 8006812:	461a      	mov	r2, r3
 8006814:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 8006818:	021b      	lsls	r3, r3, #8
 800681a:	431a      	orrs	r2, r3
 800681c:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8006820:	4313      	orrs	r3, r2
 8006822:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8006826:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800682a:	4611      	mov	r1, r2
 800682c:	4618      	mov	r0, r3
 800682e:	f7ff fa41 	bl	8005cb4 <_ZN8touchgfx9colortypeC1Em>
 8006832:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006834:	4619      	mov	r1, r3
 8006836:	4620      	mov	r0, r4
 8006838:	f7ff fc1a 	bl	8006070 <_ZN8touchgfx15ButtonWithLabel13setLabelColorENS_9colortypeE>
    buttonWithLabel1.setLabelColorPressed(touchgfx::Color::getColorFromRGB(255, 255, 255));
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	f103 049c 	add.w	r4, r3, #156	; 0x9c
 8006842:	23ff      	movs	r3, #255	; 0xff
 8006844:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
 8006848:	23ff      	movs	r3, #255	; 0xff
 800684a:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
 800684e:	23ff      	movs	r3, #255	; 0xff
 8006850:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8006854:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
 8006858:	041b      	lsls	r3, r3, #16
 800685a:	461a      	mov	r2, r3
 800685c:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 8006860:	021b      	lsls	r3, r3, #8
 8006862:	431a      	orrs	r2, r3
 8006864:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006868:	4313      	orrs	r3, r2
 800686a:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800686e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8006872:	4611      	mov	r1, r2
 8006874:	4618      	mov	r0, r3
 8006876:	f7ff fa1d 	bl	8005cb4 <_ZN8touchgfx9colortypeC1Em>
 800687a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800687c:	4619      	mov	r1, r3
 800687e:	4620      	mov	r0, r4
 8006880:	f7ff fc04 	bl	800608c <_ZN8touchgfx15ButtonWithLabel20setLabelColorPressedENS_9colortypeE>
    buttonWithLabel1.setAction(buttonCallback);
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	f103 029c 	add.w	r2, r3, #156	; 0x9c
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	f503 638a 	add.w	r3, r3, #1104	; 0x450
 8006890:	4619      	mov	r1, r3
 8006892:	4610      	mov	r0, r2
 8006894:	f7ff fb9a 	bl	8005fcc <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>

    dynamicGraph1.setScale(1);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	33e4      	adds	r3, #228	; 0xe4
 800689c:	2101      	movs	r1, #1
 800689e:	4618      	mov	r0, r3
 80068a0:	f014 f932 	bl	801ab08 <_ZN8touchgfx22AbstractDataGraphWithY8setScaleEi>
    dynamicGraph1.setPosition(125, 16, 355, 240);
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	f103 00e4 	add.w	r0, r3, #228	; 0xe4
 80068aa:	23f0      	movs	r3, #240	; 0xf0
 80068ac:	9300      	str	r3, [sp, #0]
 80068ae:	f240 1363 	movw	r3, #355	; 0x163
 80068b2:	2210      	movs	r2, #16
 80068b4:	217d      	movs	r1, #125	; 0x7d
 80068b6:	f7fd fc9a 	bl	80041ee <_ZN8touchgfx8Drawable11setPositionEssss>
    dynamicGraph1.setGraphAreaMargin(0, 0, 0, 0);
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	f103 00e4 	add.w	r0, r3, #228	; 0xe4
 80068c0:	2300      	movs	r3, #0
 80068c2:	9300      	str	r3, [sp, #0]
 80068c4:	2300      	movs	r3, #0
 80068c6:	2200      	movs	r2, #0
 80068c8:	2100      	movs	r1, #0
 80068ca:	f014 f855 	bl	801a978 <_ZN8touchgfx17AbstractDataGraph18setGraphAreaMarginEssss>
    dynamicGraph1.setGraphAreaPadding(0, 0, 0, 0);
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	f103 00e4 	add.w	r0, r3, #228	; 0xe4
 80068d4:	2300      	movs	r3, #0
 80068d6:	9300      	str	r3, [sp, #0]
 80068d8:	2300      	movs	r3, #0
 80068da:	2200      	movs	r2, #0
 80068dc:	2100      	movs	r1, #0
 80068de:	f013 fe3c 	bl	801a55a <_ZN8touchgfx17AbstractDataGraph19setGraphAreaPaddingEssss>
    dynamicGraph1.setGraphRangeY(0, 100);
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	33e4      	adds	r3, #228	; 0xe4
 80068e6:	2264      	movs	r2, #100	; 0x64
 80068e8:	2100      	movs	r1, #0
 80068ea:	4618      	mov	r0, r3
 80068ec:	f013 fc54 	bl	801a198 <_ZN8touchgfx22AbstractDataGraphWithY14setGraphRangeYEii>

    dynamicGraph1Line1.setScale(1);
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	f503 7370 	add.w	r3, r3, #960	; 0x3c0
 80068f6:	2101      	movs	r1, #1
 80068f8:	4618      	mov	r0, r3
 80068fa:	f014 fa09 	bl	801ad10 <_ZN8touchgfx20AbstractGraphElement8setScaleEi>
    dynamicGraph1Line1Painter.setColor(touchgfx::Color::getColorFromRGB(20, 151, 197));
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	f503 747e 	add.w	r4, r3, #1016	; 0x3f8
 8006904:	2314      	movs	r3, #20
 8006906:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
 800690a:	2397      	movs	r3, #151	; 0x97
 800690c:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
 8006910:	23c5      	movs	r3, #197	; 0xc5
 8006912:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62
 8006916:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 800691a:	041b      	lsls	r3, r3, #16
 800691c:	461a      	mov	r2, r3
 800691e:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8006922:	021b      	lsls	r3, r3, #8
 8006924:	431a      	orrs	r2, r3
 8006926:	f897 3062 	ldrb.w	r3, [r7, #98]	; 0x62
 800692a:	4313      	orrs	r3, r2
 800692c:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8006930:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8006934:	4611      	mov	r1, r2
 8006936:	4618      	mov	r0, r3
 8006938:	f7ff f9bc 	bl	8005cb4 <_ZN8touchgfx9colortypeC1Em>
 800693c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800693e:	4619      	mov	r1, r3
 8006940:	4620      	mov	r0, r4
 8006942:	f7ff fd4d 	bl	80063e0 <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeE>
    dynamicGraph1Line1.setPainter(dynamicGraph1Line1Painter);
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	f503 7270 	add.w	r2, r3, #960	; 0x3c0
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	f503 737e 	add.w	r3, r3, #1016	; 0x3f8
 8006952:	4619      	mov	r1, r3
 8006954:	4610      	mov	r0, r2
 8006956:	f013 faca 	bl	8019eee <_ZN8touchgfx12CanvasWidget10setPainterERNS_15AbstractPainterE>
    dynamicGraph1Line1.setLineWidth(2);
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	f503 7370 	add.w	r3, r3, #960	; 0x3c0
 8006960:	2102      	movs	r1, #2
 8006962:	4618      	mov	r0, r3
 8006964:	f014 faa0 	bl	801aea8 <_ZN8touchgfx16GraphElementLine12setLineWidthEh>
    dynamicGraph1.addGraphElement(dynamicGraph1Line1);
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	f103 02e4 	add.w	r2, r3, #228	; 0xe4
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	f503 7370 	add.w	r3, r3, #960	; 0x3c0
 8006974:	4619      	mov	r1, r3
 8006976:	4610      	mov	r0, r2
 8006978:	f013 fea6 	bl	801a6c8 <_ZN8touchgfx17AbstractDataGraph15addGraphElementERNS_20AbstractGraphElementE>

    dynamicGraph1.addDataPoint(61.618218271131035f);
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	33e4      	adds	r3, #228	; 0xe4
 8006980:	ed9f 0a16 	vldr	s0, [pc, #88]	; 80069dc <_ZN15Screen1ViewBaseC1Ev+0x3a0>
 8006984:	4618      	mov	r0, r3
 8006986:	f014 f91d 	bl	801abc4 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(58.1106792462638f);
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	33e4      	adds	r3, #228	; 0xe4
 800698e:	ed9f 0a14 	vldr	s0, [pc, #80]	; 80069e0 <_ZN15Screen1ViewBaseC1Ev+0x3a4>
 8006992:	4618      	mov	r0, r3
 8006994:	f014 f916 	bl	801abc4 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(51.41074367587624f);
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	33e4      	adds	r3, #228	; 0xe4
 800699c:	ed9f 0a11 	vldr	s0, [pc, #68]	; 80069e4 <_ZN15Screen1ViewBaseC1Ev+0x3a8>
 80069a0:	4618      	mov	r0, r3
 80069a2:	f014 f90f 	bl	801abc4 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(44.17223675024299f);
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	33e4      	adds	r3, #228	; 0xe4
 80069aa:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 80069e8 <_ZN15Screen1ViewBaseC1Ev+0x3ac>
 80069ae:	4618      	mov	r0, r3
 80069b0:	f014 f908 	bl	801abc4 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(39.18854726532441f);
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	33e4      	adds	r3, #228	; 0xe4
 80069b8:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 80069ec <_ZN15Screen1ViewBaseC1Ev+0x3b0>
 80069bc:	4618      	mov	r0, r3
 80069be:	f014 f901 	bl	801abc4 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(38.667993295916965f);
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	33e4      	adds	r3, #228	; 0xe4
 80069c6:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 80069f0 <_ZN15Screen1ViewBaseC1Ev+0x3b4>
 80069ca:	4618      	mov	r0, r3
 80069cc:	f014 f8fa 	bl	801abc4 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
 80069d0:	e08e      	b.n	8006af0 <_ZN15Screen1ViewBaseC1Ev+0x4b4>
 80069d2:	bf00      	nop
 80069d4:	0802df2c 	.word	0x0802df2c
 80069d8:	08007225 	.word	0x08007225
 80069dc:	4276790e 	.word	0x4276790e
 80069e0:	42687156 	.word	0x42687156
 80069e4:	424da49a 	.word	0x424da49a
 80069e8:	4230b05f 	.word	0x4230b05f
 80069ec:	421cc113 	.word	0x421cc113
 80069f0:	421aac06 	.word	0x421aac06
 80069f4:	422e9d74 	.word	0x422e9d74
 80069f8:	4256ed8f 	.word	0x4256ed8f
 80069fc:	428633ad 	.word	0x428633ad
 8006a00:	42a1f897 	.word	0x42a1f897
 8006a04:	42b89811 	.word	0x42b89811
 8006a08:	42c4c0e1 	.word	0x42c4c0e1
 8006a0c:	42c3490a 	.word	0x42c3490a
 8006a10:	42b3f605 	.word	0x42b3f605
 8006a14:	42999116 	.word	0x42999116
 8006a18:	4272850b 	.word	0x4272850b
 8006a1c:	4232b762 	.word	0x4232b762
 8006a20:	41ff6d36 	.word	0x41ff6d36
 8006a24:	41c420c3 	.word	0x41c420c3
 8006a28:	41b9e552 	.word	0x41b9e552
 8006a2c:	41db1c18 	.word	0x41db1c18
 8006a30:	420bef61 	.word	0x420bef61
 8006a34:	422d19a9 	.word	0x422d19a9
 8006a38:	4245dafe 	.word	0x4245dafe
 8006a3c:	424da9a8 	.word	0x424da9a8
 8006a40:	4240d481 	.word	0x4240d481
 8006a44:	42217c8f 	.word	0x42217c8f
 8006a48:	41ee33ce 	.word	0x41ee33ce
 8006a4c:	4199533a 	.word	0x4199533a
 8006a50:	4137db3d 	.word	0x4137db3d
 8006a54:	4112a47f 	.word	0x4112a47f
 8006a58:	415746ff 	.word	0x415746ff
 8006a5c:	41c122ba 	.word	0x41c122ba
 8006a60:	421e2cd7 	.word	0x421e2cd7
 8006a64:	42638d02 	.word	0x42638d02
 8006a68:	4291e681 	.word	0x4291e681
 8006a6c:	42a99c5e 	.word	0x42a99c5e
 8006a70:	42b500a0 	.word	0x42b500a0
 8006a74:	42b2ffb5 	.word	0x42b2ffb5
 8006a78:	42a58bef 	.word	0x42a58bef
 8006a7c:	429114a4 	.word	0x429114a4
 8006a80:	4276c920 	.word	0x4276c920
 8006a84:	42545db2 	.word	0x42545db2
 8006a88:	42434ba1 	.word	0x42434ba1
 8006a8c:	4246e831 	.word	0x4246e831
 8006a90:	425cb109 	.word	0x425cb109
 8006a94:	427cfa02 	.word	0x427cfa02
 8006a98:	428e72fa 	.word	0x428e72fa
 8006a9c:	429896ea 	.word	0x429896ea
 8006aa0:	4298836e 	.word	0x4298836e
 8006aa4:	428c385a 	.word	0x428c385a
 8006aa8:	42695973 	.word	0x42695973
 8006aac:	422b4e5b 	.word	0x422b4e5b
 8006ab0:	41d39651 	.word	0x41d39651
 8006ab4:	41464088 	.word	0x41464088
 8006ab8:	405a474d 	.word	0x405a474d
 8006abc:	3f97de3b 	.word	0x3f97de3b
 8006ac0:	40bdb3ba 	.word	0x40bdb3ba
 8006ac4:	4182b5fd 	.word	0x4182b5fd
 8006ac8:	41ef80a0 	.word	0x41ef80a0
 8006acc:	422ea926 	.word	0x422ea926
 8006ad0:	425a7b52 	.word	0x425a7b52
 8006ad4:	42730420 	.word	0x42730420
 8006ad8:	4275605d 	.word	0x4275605d
 8006adc:	42649179 	.word	0x42649179
 8006ae0:	42489c93 	.word	0x42489c93
 8006ae4:	422c6bf2 	.word	0x422c6bf2
 8006ae8:	421af957 	.word	0x421af957
 8006aec:	421c747d 	.word	0x421c747d
    dynamicGraph1.addDataPoint(43.653762901418965f);
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	33e4      	adds	r3, #228	; 0xe4
 8006af4:	ed1f 0a41 	vldr	s0, [pc, #-260]	; 80069f4 <_ZN15Screen1ViewBaseC1Ev+0x3b8>
 8006af8:	4618      	mov	r0, r3
 8006afa:	f014 f863 	bl	801abc4 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(53.73199226986557f);
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	33e4      	adds	r3, #228	; 0xe4
 8006b02:	ed1f 0a43 	vldr	s0, [pc, #-268]	; 80069f8 <_ZN15Screen1ViewBaseC1Ev+0x3bc>
 8006b06:	4618      	mov	r0, r3
 8006b08:	f014 f85c 	bl	801abc4 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(67.10092986209878f);
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	33e4      	adds	r3, #228	; 0xe4
 8006b10:	ed1f 0a46 	vldr	s0, [pc, #-280]	; 80069fc <_ZN15Screen1ViewBaseC1Ev+0x3c0>
 8006b14:	4618      	mov	r0, r3
 8006b16:	f014 f855 	bl	801abc4 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(80.98552696686758f);
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	33e4      	adds	r3, #228	; 0xe4
 8006b1e:	ed1f 0a48 	vldr	s0, [pc, #-288]	; 8006a00 <_ZN15Screen1ViewBaseC1Ev+0x3c4>
 8006b22:	4618      	mov	r0, r3
 8006b24:	f014 f84e 	bl	801abc4 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(92.29700595968538f);
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	33e4      	adds	r3, #228	; 0xe4
 8006b2c:	ed1f 0a4b 	vldr	s0, [pc, #-300]	; 8006a04 <_ZN15Screen1ViewBaseC1Ev+0x3c8>
 8006b30:	4618      	mov	r0, r3
 8006b32:	f014 f847 	bl	801abc4 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(98.37671839839517f);
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	33e4      	adds	r3, #228	; 0xe4
 8006b3a:	ed1f 0a4d 	vldr	s0, [pc, #-308]	; 8006a08 <_ZN15Screen1ViewBaseC1Ev+0x3cc>
 8006b3e:	4618      	mov	r0, r3
 8006b40:	f014 f840 	bl	801abc4 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(97.6426558550894f);
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	33e4      	adds	r3, #228	; 0xe4
 8006b48:	ed1f 0a50 	vldr	s0, [pc, #-320]	; 8006a0c <_ZN15Screen1ViewBaseC1Ev+0x3d0>
 8006b4c:	4618      	mov	r0, r3
 8006b4e:	f014 f839 	bl	801abc4 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(89.98050820887681f);
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	33e4      	adds	r3, #228	; 0xe4
 8006b56:	ed1f 0a52 	vldr	s0, [pc, #-328]	; 8006a10 <_ZN15Screen1ViewBaseC1Ev+0x3d4>
 8006b5a:	4618      	mov	r0, r3
 8006b5c:	f014 f832 	bl	801abc4 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(76.78337190569503f);
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	33e4      	adds	r3, #228	; 0xe4
 8006b64:	ed1f 0a55 	vldr	s0, [pc, #-340]	; 8006a14 <_ZN15Screen1ViewBaseC1Ev+0x3d8>
 8006b68:	4618      	mov	r0, r3
 8006b6a:	f014 f82b 	bl	801abc4 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(60.62992539653267f);
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	33e4      	adds	r3, #228	; 0xe4
 8006b72:	ed1f 0a57 	vldr	s0, [pc, #-348]	; 8006a18 <_ZN15Screen1ViewBaseC1Ev+0x3dc>
 8006b76:	4618      	mov	r0, r3
 8006b78:	f014 f824 	bl	801abc4 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(44.67908426013318f);
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	33e4      	adds	r3, #228	; 0xe4
 8006b80:	ed1f 0a5a 	vldr	s0, [pc, #-360]	; 8006a1c <_ZN15Screen1ViewBaseC1Ev+0x3e0>
 8006b84:	4618      	mov	r0, r3
 8006b86:	f014 f81d 	bl	801abc4 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(31.928326310305152f);
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	33e4      	adds	r3, #228	; 0xe4
 8006b8e:	ed1f 0a5c 	vldr	s0, [pc, #-368]	; 8006a20 <_ZN15Screen1ViewBaseC1Ev+0x3e4>
 8006b92:	4618      	mov	r0, r3
 8006b94:	f014 f816 	bl	801abc4 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(24.51599654262927f);
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	33e4      	adds	r3, #228	; 0xe4
 8006b9c:	ed1f 0a5f 	vldr	s0, [pc, #-380]	; 8006a24 <_ZN15Screen1ViewBaseC1Ev+0x3e8>
 8006ba0:	4618      	mov	r0, r3
 8006ba2:	f014 f80f 	bl	801abc4 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(23.236972696821596f);
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	33e4      	adds	r3, #228	; 0xe4
 8006baa:	ed1f 0a61 	vldr	s0, [pc, #-388]	; 8006a28 <_ZN15Screen1ViewBaseC1Ev+0x3ec>
 8006bae:	4618      	mov	r0, r3
 8006bb0:	f014 f808 	bl	801abc4 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(27.388717910654563f);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	33e4      	adds	r3, #228	; 0xe4
 8006bb8:	ed1f 0a64 	vldr	s0, [pc, #-400]	; 8006a2c <_ZN15Screen1ViewBaseC1Ev+0x3f0>
 8006bbc:	4618      	mov	r0, r3
 8006bbe:	f014 f801 	bl	801abc4 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(34.98377034613647f);
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	33e4      	adds	r3, #228	; 0xe4
 8006bc6:	ed1f 0a66 	vldr	s0, [pc, #-408]	; 8006a30 <_ZN15Screen1ViewBaseC1Ev+0x3f4>
 8006bca:	4618      	mov	r0, r3
 8006bcc:	f013 fffa 	bl	801abc4 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(43.27505821896695f);
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	33e4      	adds	r3, #228	; 0xe4
 8006bd4:	ed1f 0a69 	vldr	s0, [pc, #-420]	; 8006a34 <_ZN15Screen1ViewBaseC1Ev+0x3f8>
 8006bd8:	4618      	mov	r0, r3
 8006bda:	f013 fff3 	bl	801abc4 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(49.46386062652968f);
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	33e4      	adds	r3, #228	; 0xe4
 8006be2:	ed1f 0a6b 	vldr	s0, [pc, #-428]	; 8006a38 <_ZN15Screen1ViewBaseC1Ev+0x3fc>
 8006be6:	4618      	mov	r0, r3
 8006be8:	f013 ffec 	bl	801abc4 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(51.41567813739625f);
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	33e4      	adds	r3, #228	; 0xe4
 8006bf0:	ed1f 0a6e 	vldr	s0, [pc, #-440]	; 8006a3c <_ZN15Screen1ViewBaseC1Ev+0x400>
 8006bf4:	4618      	mov	r0, r3
 8006bf6:	f013 ffe5 	bl	801abc4 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(48.207523011384794f);
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	33e4      	adds	r3, #228	; 0xe4
 8006bfe:	ed1f 0a70 	vldr	s0, [pc, #-448]	; 8006a40 <_ZN15Screen1ViewBaseC1Ev+0x404>
 8006c02:	4618      	mov	r0, r3
 8006c04:	f013 ffde 	bl	801abc4 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(40.37164055229543f);
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	33e4      	adds	r3, #228	; 0xe4
 8006c0c:	ed1f 0a73 	vldr	s0, [pc, #-460]	; 8006a44 <_ZN15Screen1ViewBaseC1Ev+0x408>
 8006c10:	4618      	mov	r0, r3
 8006c12:	f013 ffd7 	bl	801abc4 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(29.77529475126354f);
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	33e4      	adds	r3, #228	; 0xe4
 8006c1a:	ed1f 0a75 	vldr	s0, [pc, #-468]	; 8006a48 <_ZN15Screen1ViewBaseC1Ev+0x40c>
 8006c1e:	4618      	mov	r0, r3
 8006c20:	f013 ffd0 	bl	801abc4 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(19.165638670216758f);
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	33e4      	adds	r3, #228	; 0xe4
 8006c28:	ed1f 0a78 	vldr	s0, [pc, #-480]	; 8006a4c <_ZN15Screen1ViewBaseC1Ev+0x410>
 8006c2c:	4618      	mov	r0, r3
 8006c2e:	f013 ffc9 	bl	801abc4 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(11.491024888364834f);
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	33e4      	adds	r3, #228	; 0xe4
 8006c36:	ed1f 0a7a 	vldr	s0, [pc, #-488]	; 8006a50 <_ZN15Screen1ViewBaseC1Ev+0x414>
 8006c3a:	4618      	mov	r0, r3
 8006c3c:	f013 ffc2 	bl	801abc4 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(9.165159985791963f);
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	33e4      	adds	r3, #228	; 0xe4
 8006c44:	ed1f 0a7d 	vldr	s0, [pc, #-500]	; 8006a54 <_ZN15Screen1ViewBaseC1Ev+0x418>
 8006c48:	4618      	mov	r0, r3
 8006c4a:	f013 ffbb 	bl	801abc4 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(13.45483272279958f);
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	33e4      	adds	r3, #228	; 0xe4
 8006c52:	ed1f 0a7f 	vldr	s0, [pc, #-508]	; 8006a58 <_ZN15Screen1ViewBaseC1Ev+0x41c>
 8006c56:	4618      	mov	r0, r3
 8006c58:	f013 ffb4 	bl	801abc4 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(24.141956704445953f);
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	33e4      	adds	r3, #228	; 0xe4
 8006c60:	ed1f 0a82 	vldr	s0, [pc, #-520]	; 8006a5c <_ZN15Screen1ViewBaseC1Ev+0x420>
 8006c64:	4618      	mov	r0, r3
 8006c66:	f013 ffad 	bl	801abc4 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(39.54378999291643f);
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	33e4      	adds	r3, #228	; 0xe4
 8006c6e:	ed1f 0a84 	vldr	s0, [pc, #-528]	; 8006a60 <_ZN15Screen1ViewBaseC1Ev+0x424>
 8006c72:	4618      	mov	r0, r3
 8006c74:	f013 ffa6 	bl	801abc4 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(56.8877013078163f);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	33e4      	adds	r3, #228	; 0xe4
 8006c7c:	ed1f 0a87 	vldr	s0, [pc, #-540]	; 8006a64 <_ZN15Screen1ViewBaseC1Ev+0x428>
 8006c80:	4618      	mov	r0, r3
 8006c82:	f013 ff9f 	bl	801abc4 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(72.9502032346105f);
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	33e4      	adds	r3, #228	; 0xe4
 8006c8a:	ed1f 0a89 	vldr	s0, [pc, #-548]	; 8006a68 <_ZN15Screen1ViewBaseC1Ev+0x42c>
 8006c8e:	4618      	mov	r0, r3
 8006c90:	f013 ff98 	bl	801abc4 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(84.8054024670876f);
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	33e4      	adds	r3, #228	; 0xe4
 8006c98:	ed1f 0a8c 	vldr	s0, [pc, #-560]	; 8006a6c <_ZN15Screen1ViewBaseC1Ev+0x430>
 8006c9c:	4618      	mov	r0, r3
 8006c9e:	f013 ff91 	bl	801abc4 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(90.50121833878133f);
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	33e4      	adds	r3, #228	; 0xe4
 8006ca6:	ed1f 0a8e 	vldr	s0, [pc, #-568]	; 8006a70 <_ZN15Screen1ViewBaseC1Ev+0x434>
 8006caa:	4618      	mov	r0, r3
 8006cac:	f013 ff8a 	bl	801abc4 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(89.49942887480523f);
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	33e4      	adds	r3, #228	; 0xe4
 8006cb4:	ed1f 0a91 	vldr	s0, [pc, #-580]	; 8006a74 <_ZN15Screen1ViewBaseC1Ev+0x438>
 8006cb8:	4618      	mov	r0, r3
 8006cba:	f013 ff83 	bl	801abc4 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(82.77330853691569f);
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	33e4      	adds	r3, #228	; 0xe4
 8006cc2:	ed1f 0a93 	vldr	s0, [pc, #-588]	; 8006a78 <_ZN15Screen1ViewBaseC1Ev+0x43c>
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	f013 ff7c 	bl	801abc4 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(72.5403106848969f);
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	33e4      	adds	r3, #228	; 0xe4
 8006cd0:	ed1f 0a96 	vldr	s0, [pc, #-600]	; 8006a7c <_ZN15Screen1ViewBaseC1Ev+0x440>
 8006cd4:	4618      	mov	r0, r3
 8006cd6:	f013 ff75 	bl	801abc4 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(61.69641162377825f);
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	33e4      	adds	r3, #228	; 0xe4
 8006cde:	ed1f 0a98 	vldr	s0, [pc, #-608]	; 8006a80 <_ZN15Screen1ViewBaseC1Ev+0x444>
 8006ce2:	4618      	mov	r0, r3
 8006ce4:	f013 ff6e 	bl	801abc4 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(53.09150002979467f);
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	33e4      	adds	r3, #228	; 0xe4
 8006cec:	ed1f 0a9b 	vldr	s0, [pc, #-620]	; 8006a84 <_ZN15Screen1ViewBaseC1Ev+0x448>
 8006cf0:	4618      	mov	r0, r3
 8006cf2:	f013 ff67 	bl	801abc4 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(48.82385475604111f);
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	33e4      	adds	r3, #228	; 0xe4
 8006cfa:	ed1f 0a9d 	vldr	s0, [pc, #-628]	; 8006a88 <_ZN15Screen1ViewBaseC1Ev+0x44c>
 8006cfe:	4618      	mov	r0, r3
 8006d00:	f013 ff60 	bl	801abc4 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(49.72675127608904f);
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	33e4      	adds	r3, #228	; 0xe4
 8006d08:	ed1f 0aa0 	vldr	s0, [pc, #-640]	; 8006a8c <_ZN15Screen1ViewBaseC1Ev+0x450>
 8006d0c:	4618      	mov	r0, r3
 8006d0e:	f013 ff59 	bl	801abc4 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(55.17288477824837f);
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	33e4      	adds	r3, #228	; 0xe4
 8006d16:	ed1f 0aa2 	vldr	s0, [pc, #-648]	; 8006a90 <_ZN15Screen1ViewBaseC1Ev+0x454>
 8006d1a:	4618      	mov	r0, r3
 8006d1c:	f013 ff52 	bl	801abc4 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(63.24414869200697f);
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	33e4      	adds	r3, #228	; 0xe4
 8006d24:	ed1f 0aa5 	vldr	s0, [pc, #-660]	; 8006a94 <_ZN15Screen1ViewBaseC1Ev+0x458>
 8006d28:	4618      	mov	r0, r3
 8006d2a:	f013 ff4b 	bl	801abc4 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(71.22456631048976f);
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	33e4      	adds	r3, #228	; 0xe4
 8006d32:	ed1f 0aa7 	vldr	s0, [pc, #-668]	; 8006a98 <_ZN15Screen1ViewBaseC1Ev+0x45c>
 8006d36:	4618      	mov	r0, r3
 8006d38:	f013 ff44 	bl	801abc4 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(76.2947516326393f);
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	33e4      	adds	r3, #228	; 0xe4
 8006d40:	ed1f 0aaa 	vldr	s0, [pc, #-680]	; 8006a9c <_ZN15Screen1ViewBaseC1Ev+0x460>
 8006d44:	4618      	mov	r0, r3
 8006d46:	f013 ff3d 	bl	801abc4 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(76.25669670570666f);
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	33e4      	adds	r3, #228	; 0xe4
 8006d4e:	ed1f 0aac 	vldr	s0, [pc, #-688]	; 8006aa0 <_ZN15Screen1ViewBaseC1Ev+0x464>
 8006d52:	4618      	mov	r0, r3
 8006d54:	f013 ff36 	bl	801abc4 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(70.11006476926936f);
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	33e4      	adds	r3, #228	; 0xe4
 8006d5c:	ed1f 0aaf 	vldr	s0, [pc, #-700]	; 8006aa4 <_ZN15Screen1ViewBaseC1Ev+0x468>
 8006d60:	4618      	mov	r0, r3
 8006d62:	f013 ff2f 	bl	801abc4 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(58.337351231157584f);
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	33e4      	adds	r3, #228	; 0xe4
 8006d6a:	ed1f 0ab1 	vldr	s0, [pc, #-708]	; 8006aa8 <_ZN15Screen1ViewBaseC1Ev+0x46c>
 8006d6e:	4618      	mov	r0, r3
 8006d70:	f013 ff28 	bl	801abc4 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(42.82651784942582f);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	33e4      	adds	r3, #228	; 0xe4
 8006d78:	ed1f 0ab4 	vldr	s0, [pc, #-720]	; 8006aac <_ZN15Screen1ViewBaseC1Ev+0x470>
 8006d7c:	4618      	mov	r0, r3
 8006d7e:	f013 ff21 	bl	801abc4 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(26.448396358155456f);
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	33e4      	adds	r3, #228	; 0xe4
 8006d86:	ed1f 0ab6 	vldr	s0, [pc, #-728]	; 8006ab0 <_ZN15Screen1ViewBaseC1Ev+0x474>
 8006d8a:	4618      	mov	r0, r3
 8006d8c:	f013 ff1a 	bl	801abc4 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(12.390754894919514f);
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	33e4      	adds	r3, #228	; 0xe4
 8006d94:	ed1f 0ab9 	vldr	s0, [pc, #-740]	; 8006ab4 <_ZN15Screen1ViewBaseC1Ev+0x478>
 8006d98:	4618      	mov	r0, r3
 8006d9a:	f013 ff13 	bl	801abc4 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(3.410601924204144f);
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	33e4      	adds	r3, #228	; 0xe4
 8006da2:	ed1f 0abb 	vldr	s0, [pc, #-748]	; 8006ab8 <_ZN15Screen1ViewBaseC1Ev+0x47c>
 8006da6:	4618      	mov	r0, r3
 8006da8:	f013 ff0c 	bl	801abc4 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(1.1864694534668594f);
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	33e4      	adds	r3, #228	; 0xe4
 8006db0:	ed1f 0abe 	vldr	s0, [pc, #-760]	; 8006abc <_ZN15Screen1ViewBaseC1Ev+0x480>
 8006db4:	4618      	mov	r0, r3
 8006db6:	f013 ff05 	bl	801abc4 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(5.928189422959122f);
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	33e4      	adds	r3, #228	; 0xe4
 8006dbe:	ed1f 0ac0 	vldr	s0, [pc, #-768]	; 8006ac0 <_ZN15Screen1ViewBaseC1Ev+0x484>
 8006dc2:	4618      	mov	r0, r3
 8006dc4:	f013 fefe 	bl	801abc4 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(16.33886238546977f);
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	33e4      	adds	r3, #228	; 0xe4
 8006dcc:	ed1f 0ac3 	vldr	s0, [pc, #-780]	; 8006ac4 <_ZN15Screen1ViewBaseC1Ev+0x488>
 8006dd0:	4618      	mov	r0, r3
 8006dd2:	f013 fef7 	bl	801abc4 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(29.93780459262879f);
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	33e4      	adds	r3, #228	; 0xe4
 8006dda:	ed1f 0ac5 	vldr	s0, [pc, #-788]	; 8006ac8 <_ZN15Screen1ViewBaseC1Ev+0x48c>
 8006dde:	4618      	mov	r0, r3
 8006de0:	f013 fef0 	bl	801abc4 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(43.66518477408525f);
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	33e4      	adds	r3, #228	; 0xe4
 8006de8:	ed1f 0ac8 	vldr	s0, [pc, #-800]	; 8006acc <_ZN15Screen1ViewBaseC1Ev+0x490>
 8006dec:	4618      	mov	r0, r3
 8006dee:	f013 fee9 	bl	801abc4 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(54.620429047299666f);
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	33e4      	adds	r3, #228	; 0xe4
 8006df6:	ed1f 0aca 	vldr	s0, [pc, #-808]	; 8006ad0 <_ZN15Screen1ViewBaseC1Ev+0x494>
 8006dfa:	4618      	mov	r0, r3
 8006dfc:	f013 fee2 	bl	801abc4 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(60.754027950387666f);
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	33e4      	adds	r3, #228	; 0xe4
 8006e04:	ed1f 0acd 	vldr	s0, [pc, #-820]	; 8006ad4 <_ZN15Screen1ViewBaseC1Ev+0x498>
 8006e08:	4618      	mov	r0, r3
 8006e0a:	f013 fedb 	bl	801abc4 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(61.34410368104659f);
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	33e4      	adds	r3, #228	; 0xe4
 8006e12:	ed1f 0acf 	vldr	s0, [pc, #-828]	; 8006ad8 <_ZN15Screen1ViewBaseC1Ev+0x49c>
 8006e16:	4618      	mov	r0, r3
 8006e18:	f013 fed4 	bl	801abc4 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(57.14206261705607f);
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	33e4      	adds	r3, #228	; 0xe4
 8006e20:	ed1f 0ad2 	vldr	s0, [pc, #-840]	; 8006adc <_ZN15Screen1ViewBaseC1Ev+0x4a0>
 8006e24:	4618      	mov	r0, r3
 8006e26:	f013 fecd 	bl	801abc4 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(50.15290363392664f);
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	33e4      	adds	r3, #228	; 0xe4
 8006e2e:	ed1f 0ad4 	vldr	s0, [pc, #-848]	; 8006ae0 <_ZN15Screen1ViewBaseC1Ev+0x4a4>
 8006e32:	4618      	mov	r0, r3
 8006e34:	f013 fec6 	bl	801abc4 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(43.105414531949975f);
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	33e4      	adds	r3, #228	; 0xe4
 8006e3c:	ed1f 0ad7 	vldr	s0, [pc, #-860]	; 8006ae4 <_ZN15Screen1ViewBaseC1Ev+0x4a8>
 8006e40:	4618      	mov	r0, r3
 8006e42:	f013 febf 	bl	801abc4 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(38.74349596554701f);
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	33e4      	adds	r3, #228	; 0xe4
 8006e4a:	ed1f 0ad9 	vldr	s0, [pc, #-868]	; 8006ae8 <_ZN15Screen1ViewBaseC1Ev+0x4ac>
 8006e4e:	4618      	mov	r0, r3
 8006e50:	f013 feb8 	bl	801abc4 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(39.11375866949934f);
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	33e4      	adds	r3, #228	; 0xe4
 8006e58:	ed1f 0adc 	vldr	s0, [pc, #-880]	; 8006aec <_ZN15Screen1ViewBaseC1Ev+0x4b0>
 8006e5c:	4618      	mov	r0, r3
 8006e5e:	f013 feb1 	bl	801abc4 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(45.0254266967552f);
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	33e4      	adds	r3, #228	; 0xe4
 8006e66:	ed9f 0ac4 	vldr	s0, [pc, #784]	; 8007178 <_ZN15Screen1ViewBaseC1Ev+0xb3c>
 8006e6a:	4618      	mov	r0, r3
 8006e6c:	f013 feaa 	bl	801abc4 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(55.81633177898603f);
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	33e4      	adds	r3, #228	; 0xe4
 8006e74:	ed9f 0ac1 	vldr	s0, [pc, #772]	; 800717c <_ZN15Screen1ViewBaseC1Ev+0xb40>
 8006e78:	4618      	mov	r0, r3
 8006e7a:	f013 fea3 	bl	801abc4 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(69.48373747257975f);
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	33e4      	adds	r3, #228	; 0xe4
 8006e82:	ed9f 0abf 	vldr	s0, [pc, #764]	; 8007180 <_ZN15Screen1ViewBaseC1Ev+0xb44>
 8006e86:	4618      	mov	r0, r3
 8006e88:	f013 fe9c 	bl	801abc4 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(83.14918943213563f);
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	33e4      	adds	r3, #228	; 0xe4
 8006e90:	ed9f 0abc 	vldr	s0, [pc, #752]	; 8007184 <_ZN15Screen1ViewBaseC1Ev+0xb48>
 8006e94:	4618      	mov	r0, r3
 8006e96:	f013 fe95 	bl	801abc4 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(93.74461282053153f);
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	33e4      	adds	r3, #228	; 0xe4
 8006e9e:	ed9f 0aba 	vldr	s0, [pc, #744]	; 8007188 <_ZN15Screen1ViewBaseC1Ev+0xb4c>
 8006ea2:	4618      	mov	r0, r3
 8006ea4:	f013 fe8e 	bl	801abc4 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(98.75241250242402f);
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	33e4      	adds	r3, #228	; 0xe4
 8006eac:	ed9f 0ab7 	vldr	s0, [pc, #732]	; 800718c <_ZN15Screen1ViewBaseC1Ev+0xb50>
 8006eb0:	4618      	mov	r0, r3
 8006eb2:	f013 fe87 	bl	801abc4 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(96.81881792125564f);
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	33e4      	adds	r3, #228	; 0xe4
 8006eba:	ed9f 0ab5 	vldr	s0, [pc, #724]	; 8007190 <_ZN15Screen1ViewBaseC1Ev+0xb54>
 8006ebe:	4618      	mov	r0, r3
 8006ec0:	f013 fe80 	bl	801abc4 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(88.09042278514157f);
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	33e4      	adds	r3, #228	; 0xe4
 8006ec8:	ed9f 0ab2 	vldr	s0, [pc, #712]	; 8007194 <_ZN15Screen1ViewBaseC1Ev+0xb58>
 8006ecc:	4618      	mov	r0, r3
 8006ece:	f013 fe79 	bl	801abc4 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(74.19132343836466f);
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	33e4      	adds	r3, #228	; 0xe4
 8006ed6:	ed9f 0ab0 	vldr	s0, [pc, #704]	; 8007198 <_ZN15Screen1ViewBaseC1Ev+0xb5c>
 8006eda:	4618      	mov	r0, r3
 8006edc:	f013 fe72 	bl	801abc4 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(57.84593186392091f);
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	33e4      	adds	r3, #228	; 0xe4
 8006ee4:	ed9f 0aad 	vldr	s0, [pc, #692]	; 800719c <_ZN15Screen1ViewBaseC1Ev+0xb60>
 8006ee8:	4618      	mov	r0, r3
 8006eea:	f013 fe6b 	bl	801abc4 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(42.23899574335398f);
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	33e4      	adds	r3, #228	; 0xe4
 8006ef2:	ed9f 0aab 	vldr	s0, [pc, #684]	; 80071a0 <_ZN15Screen1ViewBaseC1Ev+0xb64>
 8006ef6:	4618      	mov	r0, r3
 8006ef8:	f013 fe64 	bl	801abc4 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(30.268444443133994f);
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	33e4      	adds	r3, #228	; 0xe4
 8006f00:	ed9f 0aa8 	vldr	s0, [pc, #672]	; 80071a4 <_ZN15Screen1ViewBaseC1Ev+0xb68>
 8006f04:	4618      	mov	r0, r3
 8006f06:	f013 fe5d 	bl	801abc4 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(23.872672248461583f);
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	33e4      	adds	r3, #228	; 0xe4
 8006f0e:	ed9f 0aa6 	vldr	s0, [pc, #664]	; 80071a8 <_ZN15Screen1ViewBaseC1Ev+0xb6c>
 8006f12:	4618      	mov	r0, r3
 8006f14:	f013 fe56 	bl	801abc4 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(23.595521165812947f);
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	33e4      	adds	r3, #228	; 0xe4
 8006f1c:	ed9f 0aa3 	vldr	s0, [pc, #652]	; 80071ac <_ZN15Screen1ViewBaseC1Ev+0xb70>
 8006f20:	4618      	mov	r0, r3
 8006f22:	f013 fe4f 	bl	801abc4 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(28.493874703617216f);
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	33e4      	adds	r3, #228	; 0xe4
 8006f2a:	ed9f 0aa1 	vldr	s0, [pc, #644]	; 80071b0 <_ZN15Screen1ViewBaseC1Ev+0xb74>
 8006f2e:	4618      	mov	r0, r3
 8006f30:	f013 fe48 	bl	801abc4 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(36.40886878753824f);
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	33e4      	adds	r3, #228	; 0xe4
 8006f38:	ed9f 0a9e 	vldr	s0, [pc, #632]	; 80071b4 <_ZN15Screen1ViewBaseC1Ev+0xb78>
 8006f3c:	4618      	mov	r0, r3
 8006f3e:	f013 fe41 	bl	801abc4 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(44.532716849494896f);
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	33e4      	adds	r3, #228	; 0xe4
 8006f46:	ed9f 0a9c 	vldr	s0, [pc, #624]	; 80071b8 <_ZN15Screen1ViewBaseC1Ev+0xb7c>
 8006f4a:	4618      	mov	r0, r3
 8006f4c:	f013 fe3a 	bl	801abc4 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(50.13082791787049f);
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	33e4      	adds	r3, #228	; 0xe4
 8006f54:	ed9f 0a99 	vldr	s0, [pc, #612]	; 80071bc <_ZN15Screen1ViewBaseC1Ev+0xb80>
 8006f58:	4618      	mov	r0, r3
 8006f5a:	f013 fe33 	bl	801abc4 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(51.24105903338284f);
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	33e4      	adds	r3, #228	; 0xe4
 8006f62:	ed9f 0a97 	vldr	s0, [pc, #604]	; 80071c0 <_ZN15Screen1ViewBaseC1Ev+0xb84>
 8006f66:	4618      	mov	r0, r3
 8006f68:	f013 fe2c 	bl	801abc4 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(47.17769737544478f);
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	33e4      	adds	r3, #228	; 0xe4
 8006f70:	ed9f 0a94 	vldr	s0, [pc, #592]	; 80071c4 <_ZN15Screen1ViewBaseC1Ev+0xb88>
 8006f74:	4618      	mov	r0, r3
 8006f76:	f013 fe25 	bl	801abc4 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(38.715847267255924f);
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	33e4      	adds	r3, #228	; 0xe4
 8006f7e:	ed9f 0a92 	vldr	s0, [pc, #584]	; 80071c8 <_ZN15Screen1ViewBaseC1Ev+0xb8c>
 8006f82:	4618      	mov	r0, r3
 8006f84:	f013 fe1e 	bl	801abc4 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(27.910418106617403f);
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	33e4      	adds	r3, #228	; 0xe4
 8006f8c:	ed9f 0a8f 	vldr	s0, [pc, #572]	; 80071cc <_ZN15Screen1ViewBaseC1Ev+0xb90>
 8006f90:	4618      	mov	r0, r3
 8006f92:	f013 fe17 	bl	801abc4 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(17.593682365091077f);
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	33e4      	adds	r3, #228	; 0xe4
 8006f9a:	ed9f 0a8d 	vldr	s0, [pc, #564]	; 80071d0 <_ZN15Screen1ViewBaseC1Ev+0xb94>
 8006f9e:	4618      	mov	r0, r3
 8006fa0:	f013 fe10 	bl	801abc4 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(10.67439266291668f);
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	33e4      	adds	r3, #228	; 0xe4
 8006fa8:	ed9f 0a8a 	vldr	s0, [pc, #552]	; 80071d4 <_ZN15Screen1ViewBaseC1Ev+0xb98>
 8006fac:	4618      	mov	r0, r3
 8006fae:	f013 fe09 	bl	801abc4 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(9.410354253299769f);
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	33e4      	adds	r3, #228	; 0xe4
 8006fb6:	ed9f 0a88 	vldr	s0, [pc, #544]	; 80071d8 <_ZN15Screen1ViewBaseC1Ev+0xb9c>
 8006fba:	4618      	mov	r0, r3
 8006fbc:	f013 fe02 	bl	801abc4 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(14.833163062224273f);
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	33e4      	adds	r3, #228	; 0xe4
 8006fc4:	ed9f 0a85 	vldr	s0, [pc, #532]	; 80071dc <_ZN15Screen1ViewBaseC1Ev+0xba0>
 8006fc8:	4618      	mov	r0, r3
 8006fca:	f013 fdfb 	bl	801abc4 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(26.46684179569181f);
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	33e4      	adds	r3, #228	; 0xe4
 8006fd2:	ed9f 0a83 	vldr	s0, [pc, #524]	; 80071e0 <_ZN15Screen1ViewBaseC1Ev+0xba4>
 8006fd6:	4618      	mov	r0, r3
 8006fd8:	f013 fdf4 	bl	801abc4 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(42.41042738039546f);
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	33e4      	adds	r3, #228	; 0xe4
 8006fe0:	ed9f 0a80 	vldr	s0, [pc, #512]	; 80071e4 <_ZN15Screen1ViewBaseC1Ev+0xba8>
 8006fe4:	4618      	mov	r0, r3
 8006fe6:	f013 fded 	bl	801abc4 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(59.76561999531412f);
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	33e4      	adds	r3, #228	; 0xe4
 8006fee:	ed9f 0a7e 	vldr	s0, [pc, #504]	; 80071e8 <_ZN15Screen1ViewBaseC1Ev+0xbac>
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	f013 fde6 	bl	801abc4 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(75.30631312116884f);
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	33e4      	adds	r3, #228	; 0xe4
 8006ffc:	ed9f 0a7b 	vldr	s0, [pc, #492]	; 80071ec <_ZN15Screen1ViewBaseC1Ev+0xbb0>
 8007000:	4618      	mov	r0, r3
 8007002:	f013 fddf 	bl	801abc4 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(86.22767246233667f);
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	33e4      	adds	r3, #228	; 0xe4
 800700a:	ed9f 0a79 	vldr	s0, [pc, #484]	; 80071f0 <_ZN15Screen1ViewBaseC1Ev+0xbb4>
 800700e:	4618      	mov	r0, r3
 8007010:	f013 fdd8 	bl	801abc4 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>

    textArea1.setXY(14, 124);
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 800701a:	227c      	movs	r2, #124	; 0x7c
 800701c:	210e      	movs	r1, #14
 800701e:	4618      	mov	r0, r3
 8007020:	f7fd f931 	bl	8004286 <_ZN8touchgfx8Drawable5setXYEss>
    textArea1.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	f503 6482 	add.w	r4, r3, #1040	; 0x410
 800702a:	2300      	movs	r3, #0
 800702c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8007030:	2300      	movs	r3, #0
 8007032:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 8007036:	2300      	movs	r3, #0
 8007038:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
 800703c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007040:	041b      	lsls	r3, r3, #16
 8007042:	461a      	mov	r2, r3
 8007044:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8007048:	021b      	lsls	r3, r3, #8
 800704a:	431a      	orrs	r2, r3
 800704c:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 8007050:	4313      	orrs	r3, r2
 8007052:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8007056:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800705a:	4611      	mov	r1, r2
 800705c:	4618      	mov	r0, r3
 800705e:	f7fe fe29 	bl	8005cb4 <_ZN8touchgfx9colortypeC1Em>
 8007062:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007064:	66bc      	str	r4, [r7, #104]	; 0x68
 8007066:	60fb      	str	r3, [r7, #12]
     *
     * @param  color The color to use.
     */
    FORCE_INLINE_FUNCTION void setColor(colortype color)
    {
        this->color = color;
 8007068:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800706a:	68fa      	ldr	r2, [r7, #12]
 800706c:	631a      	str	r2, [r3, #48]	; 0x30
    }
 800706e:	bf00      	nop
    textArea1.setLinespacing(0);
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 8007076:	673b      	str	r3, [r7, #112]	; 0x70
 8007078:	2300      	movs	r3, #0
 800707a:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
     *
     * @see getLinespacing
     */
    FORCE_INLINE_FUNCTION void setLinespacing(int16_t space)
    {
        linespace = space;
 800707e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007080:	f8b7 206e 	ldrh.w	r2, [r7, #110]	; 0x6e
 8007084:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 8007086:	bf00      	nop
    textArea1.setWildcard(touchgfx::TypedText(T___SINGLEUSE_13EO).getText());
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	f503 6482 	add.w	r4, r3, #1040	; 0x410
 800708e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8007092:	2103      	movs	r1, #3
 8007094:	4618      	mov	r0, r3
 8007096:	f7fe ff83 	bl	8005fa0 <_ZN8touchgfx9TypedTextC1Et>
 800709a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800709e:	677b      	str	r3, [r7, #116]	; 0x74
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 80070a0:	4b54      	ldr	r3, [pc, #336]	; (80071f4 <_ZN15Screen1ViewBaseC1Ev+0xbb8>)
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d105      	bne.n	80070b4 <_ZN15Screen1ViewBaseC1Ev+0xa78>
 80070a8:	4b53      	ldr	r3, [pc, #332]	; (80071f8 <_ZN15Screen1ViewBaseC1Ev+0xbbc>)
 80070aa:	4a54      	ldr	r2, [pc, #336]	; (80071fc <_ZN15Screen1ViewBaseC1Ev+0xbc0>)
 80070ac:	21ae      	movs	r1, #174	; 0xae
 80070ae:	4854      	ldr	r0, [pc, #336]	; (8007200 <_ZN15Screen1ViewBaseC1Ev+0xbc4>)
 80070b0:	f024 fbe2 	bl	802b878 <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 80070b4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80070b6:	889a      	ldrh	r2, [r3, #4]
 80070b8:	4b52      	ldr	r3, [pc, #328]	; (8007204 <_ZN15Screen1ViewBaseC1Ev+0xbc8>)
 80070ba:	881b      	ldrh	r3, [r3, #0]
 80070bc:	429a      	cmp	r2, r3
 80070be:	d305      	bcc.n	80070cc <_ZN15Screen1ViewBaseC1Ev+0xa90>
 80070c0:	4b51      	ldr	r3, [pc, #324]	; (8007208 <_ZN15Screen1ViewBaseC1Ev+0xbcc>)
 80070c2:	4a4e      	ldr	r2, [pc, #312]	; (80071fc <_ZN15Screen1ViewBaseC1Ev+0xbc0>)
 80070c4:	21af      	movs	r1, #175	; 0xaf
 80070c6:	484e      	ldr	r0, [pc, #312]	; (8007200 <_ZN15Screen1ViewBaseC1Ev+0xbc4>)
 80070c8:	f024 fbd6 	bl	802b878 <__assert_func>
    }
 80070cc:	bf00      	nop
        return texts->getText(typedTextId);
 80070ce:	4b4f      	ldr	r3, [pc, #316]	; (800720c <_ZN15Screen1ViewBaseC1Ev+0xbd0>)
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 80070d4:	4611      	mov	r1, r2
 80070d6:	4618      	mov	r0, r3
 80070d8:	f001 f982 	bl	80083e0 <_ZNK8touchgfx5Texts7getTextEt>
 80070dc:	4603      	mov	r3, r0
 80070de:	bf00      	nop
 80070e0:	4619      	mov	r1, r3
 80070e2:	4620      	mov	r0, r4
 80070e4:	f7ff fa20 	bl	8006528 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
 80070e8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80070ec:	4618      	mov	r0, r3
 80070ee:	f7fd f827 	bl	8004140 <_ZN8touchgfx9TypedTextD1Ev>
    textArea1.resizeToCurrentText();
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 80070f8:	4618      	mov	r0, r3
 80070fa:	f015 f831 	bl	801c160 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    textArea1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_IY4I));
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	f503 6482 	add.w	r4, r3, #1040	; 0x410
 8007104:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8007108:	2102      	movs	r1, #2
 800710a:	4618      	mov	r0, r3
 800710c:	f7fe ff48 	bl	8005fa0 <_ZN8touchgfx9TypedTextC1Et>
 8007110:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8007114:	4619      	mov	r1, r3
 8007116:	4620      	mov	r0, r4
 8007118:	f015 f83f 	bl	801c19a <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 800711c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8007120:	4618      	mov	r0, r3
 8007122:	f7fd f80d 	bl	8004140 <_ZN8touchgfx9TypedTextD1Ev>

    add(__background);
 8007126:	687a      	ldr	r2, [r7, #4]
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	3340      	adds	r3, #64	; 0x40
 800712c:	4619      	mov	r1, r3
 800712e:	4610      	mov	r0, r2
 8007130:	f7fe fe80 	bl	8005e34 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(tiledImage1);
 8007134:	687a      	ldr	r2, [r7, #4]
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	336c      	adds	r3, #108	; 0x6c
 800713a:	4619      	mov	r1, r3
 800713c:	4610      	mov	r0, r2
 800713e:	f7fe fe79 	bl	8005e34 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(buttonWithLabel1);
 8007142:	687a      	ldr	r2, [r7, #4]
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	339c      	adds	r3, #156	; 0x9c
 8007148:	4619      	mov	r1, r3
 800714a:	4610      	mov	r0, r2
 800714c:	f7fe fe72 	bl	8005e34 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(dynamicGraph1);
 8007150:	687a      	ldr	r2, [r7, #4]
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	33e4      	adds	r3, #228	; 0xe4
 8007156:	4619      	mov	r1, r3
 8007158:	4610      	mov	r0, r2
 800715a:	f7fe fe6b 	bl	8005e34 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(textArea1);
 800715e:	687a      	ldr	r2, [r7, #4]
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 8007166:	4619      	mov	r1, r3
 8007168:	4610      	mov	r0, r2
 800716a:	f7fe fe63 	bl	8005e34 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	4618      	mov	r0, r3
 8007172:	377c      	adds	r7, #124	; 0x7c
 8007174:	46bd      	mov	sp, r7
 8007176:	bd90      	pop	{r4, r7, pc}
 8007178:	42341a09 	.word	0x42341a09
 800717c:	425f43ec 	.word	0x425f43ec
 8007180:	428af7ac 	.word	0x428af7ac
 8007184:	42a64c63 	.word	0x42a64c63
 8007188:	42bb7d3e 	.word	0x42bb7d3e
 800718c:	42c5813c 	.word	0x42c5813c
 8007190:	42c1a33c 	.word	0x42c1a33c
 8007194:	42b02e4c 	.word	0x42b02e4c
 8007198:	429461f5 	.word	0x429461f5
 800719c:	4267623c 	.word	0x4267623c
 80071a0:	4228f4bb 	.word	0x4228f4bb
 80071a4:	41f225c6 	.word	0x41f225c6
 80071a8:	41befb3c 	.word	0x41befb3c
 80071ac:	41bcc3a1 	.word	0x41bcc3a1
 80071b0:	41e3f375 	.word	0x41e3f375
 80071b4:	4211a2ae 	.word	0x4211a2ae
 80071b8:	42322181 	.word	0x42322181
 80071bc:	424885f8 	.word	0x424885f8
 80071c0:	424cf6d8 	.word	0x424cf6d8
 80071c4:	423cb5f6 	.word	0x423cb5f6
 80071c8:	421add07 	.word	0x421add07
 80071cc:	41df4889 	.word	0x41df4889
 80071d0:	418cbfdd 	.word	0x418cbfdd
 80071d4:	412aca50 	.word	0x412aca50
 80071d8:	411690d0 	.word	0x411690d0
 80071dc:	416d54a3 	.word	0x416d54a3
 80071e0:	41d3bc18 	.word	0x41d3bc18
 80071e4:	4229a447 	.word	0x4229a447
 80071e8:	426f0fff 	.word	0x426f0fff
 80071ec:	42969cd5 	.word	0x42969cd5
 80071f0:	42ac7491 	.word	0x42ac7491
 80071f4:	2400c92c 	.word	0x2400c92c
 80071f8:	0802d350 	.word	0x0802d350
 80071fc:	0802d394 	.word	0x0802d394
 8007200:	0802d3c4 	.word	0x0802d3c4
 8007204:	2400c930 	.word	0x2400c930
 8007208:	0802d40c 	.word	0x0802d40c
 800720c:	2400c938 	.word	0x2400c938

08007210 <_ZN15Screen1ViewBase11setupScreenEv>:

void Screen1ViewBase::setupScreen()
{
 8007210:	b480      	push	{r7}
 8007212:	b083      	sub	sp, #12
 8007214:	af00      	add	r7, sp, #0
 8007216:	6078      	str	r0, [r7, #4]

}
 8007218:	bf00      	nop
 800721a:	370c      	adds	r7, #12
 800721c:	46bd      	mov	sp, r7
 800721e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007222:	4770      	bx	lr

08007224 <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE>:

void Screen1ViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
 8007224:	b580      	push	{r7, lr}
 8007226:	b082      	sub	sp, #8
 8007228:	af00      	add	r7, sp, #0
 800722a:	6078      	str	r0, [r7, #4]
 800722c:	6039      	str	r1, [r7, #0]
    if (&src == &buttonWithLabel1)
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	339c      	adds	r3, #156	; 0x9c
 8007232:	683a      	ldr	r2, [r7, #0]
 8007234:	429a      	cmp	r2, r3
 8007236:	d106      	bne.n	8007246 <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x22>
    {
        //Interaction1
        //When buttonWithLabel1 clicked change screen to Screen2
        //Go to Screen2 with screen transition towards East
        application().gotoScreen2ScreenSlideTransitionEast();
 8007238:	6878      	ldr	r0, [r7, #4]
 800723a:	f7ff f9f4 	bl	8006626 <_ZN15Screen1ViewBase11applicationEv>
 800723e:	4603      	mov	r3, r0
 8007240:	4618      	mov	r0, r3
 8007242:	f7fd fb1b 	bl	800487c <_ZN23FrontendApplicationBase36gotoScreen2ScreenSlideTransitionEastEv>
    }
}
 8007246:	bf00      	nop
 8007248:	3708      	adds	r7, #8
 800724a:	46bd      	mov	sp, r7
 800724c:	bd80      	pop	{r7, pc}
	...

08007250 <_ZN8touchgfx4ViewI16Screen1PresenterEC1Ev>:
    View()
 8007250:	b580      	push	{r7, lr}
 8007252:	b082      	sub	sp, #8
 8007254:	af00      	add	r7, sp, #0
 8007256:	6078      	str	r0, [r7, #4]
        : presenter(0)
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	4618      	mov	r0, r3
 800725c:	f018 fe64 	bl	801ff28 <_ZN8touchgfx6ScreenC1Ev>
 8007260:	4a05      	ldr	r2, [pc, #20]	; (8007278 <_ZN8touchgfx4ViewI16Screen1PresenterEC1Ev+0x28>)
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	601a      	str	r2, [r3, #0]
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	2200      	movs	r2, #0
 800726a:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	4618      	mov	r0, r3
 8007270:	3708      	adds	r7, #8
 8007272:	46bd      	mov	sp, r7
 8007274:	bd80      	pop	{r7, pc}
 8007276:	bf00      	nop
 8007278:	0802e0a4 	.word	0x0802e0a4

0800727c <_ZN8touchgfx9ContainerD1Ev>:
class Container : public Drawable
 800727c:	b580      	push	{r7, lr}
 800727e:	b082      	sub	sp, #8
 8007280:	af00      	add	r7, sp, #0
 8007282:	6078      	str	r0, [r7, #4]
 8007284:	4a05      	ldr	r2, [pc, #20]	; (800729c <_ZN8touchgfx9ContainerD1Ev+0x20>)
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	601a      	str	r2, [r3, #0]
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	4618      	mov	r0, r3
 800728e:	f7fc ff83 	bl	8004198 <_ZN8touchgfx8DrawableD1Ev>
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	4618      	mov	r0, r3
 8007296:	3708      	adds	r7, #8
 8007298:	46bd      	mov	sp, r7
 800729a:	bd80      	pop	{r7, pc}
 800729c:	0802e83c 	.word	0x0802e83c

080072a0 <_ZN8touchgfx9ContainerD0Ev>:
 80072a0:	b580      	push	{r7, lr}
 80072a2:	b082      	sub	sp, #8
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	6078      	str	r0, [r7, #4]
 80072a8:	6878      	ldr	r0, [r7, #4]
 80072aa:	f7ff ffe7 	bl	800727c <_ZN8touchgfx9ContainerD1Ev>
 80072ae:	212c      	movs	r1, #44	; 0x2c
 80072b0:	6878      	ldr	r0, [r7, #4]
 80072b2:	f024 f90c 	bl	802b4ce <_ZdlPvj>
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	4618      	mov	r0, r3
 80072ba:	3708      	adds	r7, #8
 80072bc:	46bd      	mov	sp, r7
 80072be:	bd80      	pop	{r7, pc}

080072c0 <_ZN8touchgfx17AbstractDataGraphD1Ev>:
{
class AbstractGraphElement;
class AbstractGraphDecoration;

/** An abstract data graph. */
class AbstractDataGraph : public Container
 80072c0:	b580      	push	{r7, lr}
 80072c2:	b082      	sub	sp, #8
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	6078      	str	r0, [r7, #4]
 80072c8:	4a12      	ldr	r2, [pc, #72]	; (8007314 <_ZN8touchgfx17AbstractDataGraphD1Ev+0x54>)
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	601a      	str	r2, [r3, #0]
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	33e4      	adds	r3, #228	; 0xe4
 80072d2:	4618      	mov	r0, r3
 80072d4:	f7ff ffd2 	bl	800727c <_ZN8touchgfx9ContainerD1Ev>
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	33b8      	adds	r3, #184	; 0xb8
 80072dc:	4618      	mov	r0, r3
 80072de:	f7ff ffcd 	bl	800727c <_ZN8touchgfx9ContainerD1Ev>
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	338c      	adds	r3, #140	; 0x8c
 80072e6:	4618      	mov	r0, r3
 80072e8:	f7ff ffc8 	bl	800727c <_ZN8touchgfx9ContainerD1Ev>
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	3360      	adds	r3, #96	; 0x60
 80072f0:	4618      	mov	r0, r3
 80072f2:	f7ff ffc3 	bl	800727c <_ZN8touchgfx9ContainerD1Ev>
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	3334      	adds	r3, #52	; 0x34
 80072fa:	4618      	mov	r0, r3
 80072fc:	f7ff ffbe 	bl	800727c <_ZN8touchgfx9ContainerD1Ev>
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	4618      	mov	r0, r3
 8007304:	f7ff ffba 	bl	800727c <_ZN8touchgfx9ContainerD1Ev>
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	4618      	mov	r0, r3
 800730c:	3708      	adds	r7, #8
 800730e:	46bd      	mov	sp, r7
 8007310:	bd80      	pop	{r7, pc}
 8007312:	bf00      	nop
 8007314:	0802f4d8 	.word	0x0802f4d8

08007318 <_ZN8touchgfx17AbstractDataGraphD0Ev>:
 8007318:	b580      	push	{r7, lr}
 800731a:	b082      	sub	sp, #8
 800731c:	af00      	add	r7, sp, #0
 800731e:	6078      	str	r0, [r7, #4]
 8007320:	6878      	ldr	r0, [r7, #4]
 8007322:	f7ff ffcd 	bl	80072c0 <_ZN8touchgfx17AbstractDataGraphD1Ev>
 8007326:	f44f 7194 	mov.w	r1, #296	; 0x128
 800732a:	6878      	ldr	r0, [r7, #4]
 800732c:	f024 f8cf 	bl	802b4ce <_ZdlPvj>
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	4618      	mov	r0, r3
 8007334:	3708      	adds	r7, #8
 8007336:	46bd      	mov	sp, r7
 8007338:	bd80      	pop	{r7, pc}
	...

0800733c <_ZN8touchgfx22AbstractDataGraphWithYD1Ev>:
};

/**
 * Abstract helper class used to implement graphs with the same distance between the x values (i.e. x is ignored).
 */
class AbstractDataGraphWithY : public AbstractDataGraph
 800733c:	b580      	push	{r7, lr}
 800733e:	b082      	sub	sp, #8
 8007340:	af00      	add	r7, sp, #0
 8007342:	6078      	str	r0, [r7, #4]
 8007344:	4a05      	ldr	r2, [pc, #20]	; (800735c <_ZN8touchgfx22AbstractDataGraphWithYD1Ev+0x20>)
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	601a      	str	r2, [r3, #0]
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	4618      	mov	r0, r3
 800734e:	f7ff ffb7 	bl	80072c0 <_ZN8touchgfx17AbstractDataGraphD1Ev>
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	4618      	mov	r0, r3
 8007356:	3708      	adds	r7, #8
 8007358:	46bd      	mov	sp, r7
 800735a:	bd80      	pop	{r7, pc}
 800735c:	0802f5cc 	.word	0x0802f5cc

08007360 <_ZN8touchgfx22AbstractDataGraphWithYD0Ev>:
 8007360:	b580      	push	{r7, lr}
 8007362:	b082      	sub	sp, #8
 8007364:	af00      	add	r7, sp, #0
 8007366:	6078      	str	r0, [r7, #4]
 8007368:	6878      	ldr	r0, [r7, #4]
 800736a:	f7ff ffe7 	bl	800733c <_ZN8touchgfx22AbstractDataGraphWithYD1Ev>
 800736e:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8007372:	6878      	ldr	r0, [r7, #4]
 8007374:	f024 f8ab 	bl	802b4ce <_ZdlPvj>
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	4618      	mov	r0, r3
 800737c:	3708      	adds	r7, #8
 800737e:	46bd      	mov	sp, r7
 8007380:	bd80      	pop	{r7, pc}
	...

08007384 <_ZN8touchgfx15DataGraphScrollD1Ev>:
 * DataGraphScroll is used to display a graph that continuously scrolls to the left every
 * time a new value is added to the graph. Because the graph is scrolled every time a new value
 * is added, the graph has to be re-drawn which can be quite demanding for the hardware
 * depending on the graph elements used in the graph.
 */
class DataGraphScroll : public AbstractDataGraphWithY
 8007384:	b580      	push	{r7, lr}
 8007386:	b082      	sub	sp, #8
 8007388:	af00      	add	r7, sp, #0
 800738a:	6078      	str	r0, [r7, #4]
 800738c:	4a05      	ldr	r2, [pc, #20]	; (80073a4 <_ZN8touchgfx15DataGraphScrollD1Ev+0x20>)
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	601a      	str	r2, [r3, #0]
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	4618      	mov	r0, r3
 8007396:	f7ff ffd1 	bl	800733c <_ZN8touchgfx22AbstractDataGraphWithYD1Ev>
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	4618      	mov	r0, r3
 800739e:	3708      	adds	r7, #8
 80073a0:	46bd      	mov	sp, r7
 80073a2:	bd80      	pop	{r7, pc}
 80073a4:	0802f854 	.word	0x0802f854

080073a8 <_ZN8touchgfx15DataGraphScrollD0Ev>:
 80073a8:	b580      	push	{r7, lr}
 80073aa:	b082      	sub	sp, #8
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	6078      	str	r0, [r7, #4]
 80073b0:	6878      	ldr	r0, [r7, #4]
 80073b2:	f7ff ffe7 	bl	8007384 <_ZN8touchgfx15DataGraphScrollD1Ev>
 80073b6:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 80073ba:	6878      	ldr	r0, [r7, #4]
 80073bc:	f024 f887 	bl	802b4ce <_ZdlPvj>
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	4618      	mov	r0, r3
 80073c4:	3708      	adds	r7, #8
 80073c6:	46bd      	mov	sp, r7
 80073c8:	bd80      	pop	{r7, pc}
	...

080073cc <_ZN8touchgfx11GraphScrollILs100EEC1Ev>:
 */
template <int16_t CAPACITY>
class GraphScroll : public DataGraphScroll
{
public:
    GraphScroll()
 80073cc:	b580      	push	{r7, lr}
 80073ce:	b082      	sub	sp, #8
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	6078      	str	r0, [r7, #4]
        : DataGraphScroll(CAPACITY, yValues)
 80073d4:	6878      	ldr	r0, [r7, #4]
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	f503 73a6 	add.w	r3, r3, #332	; 0x14c
 80073dc:	461a      	mov	r2, r3
 80073de:	2164      	movs	r1, #100	; 0x64
 80073e0:	f013 fea4 	bl	801b12c <_ZN8touchgfx15DataGraphScrollC1EsPi>
 80073e4:	4a03      	ldr	r2, [pc, #12]	; (80073f4 <_ZN8touchgfx11GraphScrollILs100EEC1Ev+0x28>)
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	601a      	str	r2, [r3, #0]
    {
    }
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	4618      	mov	r0, r3
 80073ee:	3708      	adds	r7, #8
 80073f0:	46bd      	mov	sp, r7
 80073f2:	bd80      	pop	{r7, pc}
 80073f4:	0802df78 	.word	0x0802df78

080073f8 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev>:
class GenericCallback<T1, void, void>
 80073f8:	b480      	push	{r7}
 80073fa:	b083      	sub	sp, #12
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	6078      	str	r0, [r7, #4]
 8007400:	4a04      	ldr	r2, [pc, #16]	; (8007414 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev+0x1c>)
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	601a      	str	r2, [r3, #0]
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	4618      	mov	r0, r3
 800740a:	370c      	adds	r7, #12
 800740c:	46bd      	mov	sp, r7
 800740e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007412:	4770      	bx	lr
 8007414:	0802e16c 	.word	0x0802e16c

08007418 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>:
    Callback(dest_type* pobject, void (dest_type::*pmemfun_1)(T1))
 8007418:	b580      	push	{r7, lr}
 800741a:	b084      	sub	sp, #16
 800741c:	af00      	add	r7, sp, #0
 800741e:	60f8      	str	r0, [r7, #12]
 8007420:	60b9      	str	r1, [r7, #8]
 8007422:	4639      	mov	r1, r7
 8007424:	e881 000c 	stmia.w	r1, {r2, r3}
        : pobject(pobject), pmemfun_1(pmemfun_1)
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	4618      	mov	r0, r3
 800742c:	f7ff ffe4 	bl	80073f8 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev>
 8007430:	4a08      	ldr	r2, [pc, #32]	; (8007454 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E+0x3c>)
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	601a      	str	r2, [r3, #0]
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	68ba      	ldr	r2, [r7, #8]
 800743a:	605a      	str	r2, [r3, #4]
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	3308      	adds	r3, #8
 8007440:	463a      	mov	r2, r7
 8007442:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007446:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	4618      	mov	r0, r3
 800744e:	3710      	adds	r7, #16
 8007450:	46bd      	mov	sp, r7
 8007452:	bd80      	pop	{r7, pc}
 8007454:	0802df60 	.word	0x0802df60

08007458 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>:
    virtual ~GenericCallback()
 8007458:	b480      	push	{r7}
 800745a:	b083      	sub	sp, #12
 800745c:	af00      	add	r7, sp, #0
 800745e:	6078      	str	r0, [r7, #4]
    }
 8007460:	4a04      	ldr	r2, [pc, #16]	; (8007474 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev+0x1c>)
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	601a      	str	r2, [r3, #0]
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	4618      	mov	r0, r3
 800746a:	370c      	adds	r7, #12
 800746c:	46bd      	mov	sp, r7
 800746e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007472:	4770      	bx	lr
 8007474:	0802e16c 	.word	0x0802e16c

08007478 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED0Ev>:
    virtual ~GenericCallback()
 8007478:	b580      	push	{r7, lr}
 800747a:	b082      	sub	sp, #8
 800747c:	af00      	add	r7, sp, #0
 800747e:	6078      	str	r0, [r7, #4]
    }
 8007480:	6878      	ldr	r0, [r7, #4]
 8007482:	f7ff ffe9 	bl	8007458 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>
 8007486:	2104      	movs	r1, #4
 8007488:	6878      	ldr	r0, [r7, #4]
 800748a:	f024 f820 	bl	802b4ce <_ZdlPvj>
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	4618      	mov	r0, r3
 8007492:	3708      	adds	r7, #8
 8007494:	46bd      	mov	sp, r7
 8007496:	bd80      	pop	{r7, pc}

08007498 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8007498:	b580      	push	{r7, lr}
 800749a:	b082      	sub	sp, #8
 800749c:	af00      	add	r7, sp, #0
 800749e:	6078      	str	r0, [r7, #4]
 80074a0:	4a05      	ldr	r2, [pc, #20]	; (80074b8 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvED1Ev+0x20>)
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	601a      	str	r2, [r3, #0]
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	4618      	mov	r0, r3
 80074aa:	f7ff ffd5 	bl	8007458 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	4618      	mov	r0, r3
 80074b2:	3708      	adds	r7, #8
 80074b4:	46bd      	mov	sp, r7
 80074b6:	bd80      	pop	{r7, pc}
 80074b8:	0802df60 	.word	0x0802df60

080074bc <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvED0Ev>:
 80074bc:	b580      	push	{r7, lr}
 80074be:	b082      	sub	sp, #8
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	6078      	str	r0, [r7, #4]
 80074c4:	6878      	ldr	r0, [r7, #4]
 80074c6:	f7ff ffe7 	bl	8007498 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvED1Ev>
 80074ca:	2110      	movs	r1, #16
 80074cc:	6878      	ldr	r0, [r7, #4]
 80074ce:	f023 fffe 	bl	802b4ce <_ZdlPvj>
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	4618      	mov	r0, r3
 80074d6:	3708      	adds	r7, #8
 80074d8:	46bd      	mov	sp, r7
 80074da:	bd80      	pop	{r7, pc}

080074dc <_ZN8touchgfx11GraphScrollILs100EED1Ev>:
class GraphScroll : public DataGraphScroll
 80074dc:	b580      	push	{r7, lr}
 80074de:	b082      	sub	sp, #8
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	6078      	str	r0, [r7, #4]
 80074e4:	4a05      	ldr	r2, [pc, #20]	; (80074fc <_ZN8touchgfx11GraphScrollILs100EED1Ev+0x20>)
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	601a      	str	r2, [r3, #0]
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	4618      	mov	r0, r3
 80074ee:	f7ff ff49 	bl	8007384 <_ZN8touchgfx15DataGraphScrollD1Ev>
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	4618      	mov	r0, r3
 80074f6:	3708      	adds	r7, #8
 80074f8:	46bd      	mov	sp, r7
 80074fa:	bd80      	pop	{r7, pc}
 80074fc:	0802df78 	.word	0x0802df78

08007500 <_ZN8touchgfx11GraphScrollILs100EED0Ev>:
 8007500:	b580      	push	{r7, lr}
 8007502:	b082      	sub	sp, #8
 8007504:	af00      	add	r7, sp, #0
 8007506:	6078      	str	r0, [r7, #4]
 8007508:	6878      	ldr	r0, [r7, #4]
 800750a:	f7ff ffe7 	bl	80074dc <_ZN8touchgfx11GraphScrollILs100EED1Ev>
 800750e:	f44f 7137 	mov.w	r1, #732	; 0x2dc
 8007512:	6878      	ldr	r0, [r7, #4]
 8007514:	f023 ffdb 	bl	802b4ce <_ZdlPvj>
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	4618      	mov	r0, r3
 800751c:	3708      	adds	r7, #8
 800751e:	46bd      	mov	sp, r7
 8007520:	bd80      	pop	{r7, pc}
	...

08007524 <_ZN8touchgfx3BoxD1Ev>:
class Box : public Widget
 8007524:	b580      	push	{r7, lr}
 8007526:	b082      	sub	sp, #8
 8007528:	af00      	add	r7, sp, #0
 800752a:	6078      	str	r0, [r7, #4]
 800752c:	4a05      	ldr	r2, [pc, #20]	; (8007544 <_ZN8touchgfx3BoxD1Ev+0x20>)
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	601a      	str	r2, [r3, #0]
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	4618      	mov	r0, r3
 8007536:	f7fd f897 	bl	8004668 <_ZN8touchgfx6WidgetD1Ev>
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	4618      	mov	r0, r3
 800753e:	3708      	adds	r7, #8
 8007540:	46bd      	mov	sp, r7
 8007542:	bd80      	pop	{r7, pc}
 8007544:	0802fcd0 	.word	0x0802fcd0

08007548 <_ZN8touchgfx3BoxD0Ev>:
 8007548:	b580      	push	{r7, lr}
 800754a:	b082      	sub	sp, #8
 800754c:	af00      	add	r7, sp, #0
 800754e:	6078      	str	r0, [r7, #4]
 8007550:	6878      	ldr	r0, [r7, #4]
 8007552:	f7ff ffe7 	bl	8007524 <_ZN8touchgfx3BoxD1Ev>
 8007556:	212c      	movs	r1, #44	; 0x2c
 8007558:	6878      	ldr	r0, [r7, #4]
 800755a:	f023 ffb8 	bl	802b4ce <_ZdlPvj>
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	4618      	mov	r0, r3
 8007562:	3708      	adds	r7, #8
 8007564:	46bd      	mov	sp, r7
 8007566:	bd80      	pop	{r7, pc}

08007568 <_ZN8touchgfx10TiledImageD1Ev>:
class TiledImage : public Image
 8007568:	b580      	push	{r7, lr}
 800756a:	b082      	sub	sp, #8
 800756c:	af00      	add	r7, sp, #0
 800756e:	6078      	str	r0, [r7, #4]
 8007570:	4a05      	ldr	r2, [pc, #20]	; (8007588 <_ZN8touchgfx10TiledImageD1Ev+0x20>)
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	601a      	str	r2, [r3, #0]
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	4618      	mov	r0, r3
 800757a:	f7fe fcd5 	bl	8005f28 <_ZN8touchgfx5ImageD1Ev>
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	4618      	mov	r0, r3
 8007582:	3708      	adds	r7, #8
 8007584:	46bd      	mov	sp, r7
 8007586:	bd80      	pop	{r7, pc}
 8007588:	0802fd34 	.word	0x0802fd34

0800758c <_ZN8touchgfx10TiledImageD0Ev>:
 800758c:	b580      	push	{r7, lr}
 800758e:	b082      	sub	sp, #8
 8007590:	af00      	add	r7, sp, #0
 8007592:	6078      	str	r0, [r7, #4]
 8007594:	6878      	ldr	r0, [r7, #4]
 8007596:	f7ff ffe7 	bl	8007568 <_ZN8touchgfx10TiledImageD1Ev>
 800759a:	2130      	movs	r1, #48	; 0x30
 800759c:	6878      	ldr	r0, [r7, #4]
 800759e:	f023 ff96 	bl	802b4ce <_ZdlPvj>
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	4618      	mov	r0, r3
 80075a6:	3708      	adds	r7, #8
 80075a8:	46bd      	mov	sp, r7
 80075aa:	bd80      	pop	{r7, pc}

080075ac <_ZN8touchgfx6ButtonD1Ev>:
{
/**
 * A button with two images. One image showing the unpressed button and one image showing the
 * pressed state.
 */
class Button : public AbstractButton
 80075ac:	b580      	push	{r7, lr}
 80075ae:	b082      	sub	sp, #8
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	6078      	str	r0, [r7, #4]
 80075b4:	4a05      	ldr	r2, [pc, #20]	; (80075cc <_ZN8touchgfx6ButtonD1Ev+0x20>)
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	601a      	str	r2, [r3, #0]
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	4618      	mov	r0, r3
 80075be:	f7fe fd13 	bl	8005fe8 <_ZN8touchgfx14AbstractButtonD1Ev>
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	4618      	mov	r0, r3
 80075c6:	3708      	adds	r7, #8
 80075c8:	46bd      	mov	sp, r7
 80075ca:	bd80      	pop	{r7, pc}
 80075cc:	0802ff78 	.word	0x0802ff78

080075d0 <_ZN8touchgfx6ButtonD0Ev>:
 80075d0:	b580      	push	{r7, lr}
 80075d2:	b082      	sub	sp, #8
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	6078      	str	r0, [r7, #4]
 80075d8:	6878      	ldr	r0, [r7, #4]
 80075da:	f7ff ffe7 	bl	80075ac <_ZN8touchgfx6ButtonD1Ev>
 80075de:	2134      	movs	r1, #52	; 0x34
 80075e0:	6878      	ldr	r0, [r7, #4]
 80075e2:	f023 ff74 	bl	802b4ce <_ZdlPvj>
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	4618      	mov	r0, r3
 80075ea:	3708      	adds	r7, #8
 80075ec:	46bd      	mov	sp, r7
 80075ee:	bd80      	pop	{r7, pc}

080075f0 <_ZN8touchgfx15ButtonWithLabelD1Ev>:
class ButtonWithLabel : public Button
 80075f0:	b580      	push	{r7, lr}
 80075f2:	b082      	sub	sp, #8
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	6078      	str	r0, [r7, #4]
 80075f8:	4a08      	ldr	r2, [pc, #32]	; (800761c <_ZN8touchgfx15ButtonWithLabelD1Ev+0x2c>)
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	601a      	str	r2, [r3, #0]
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	3334      	adds	r3, #52	; 0x34
 8007602:	4618      	mov	r0, r3
 8007604:	f7fc fd9c 	bl	8004140 <_ZN8touchgfx9TypedTextD1Ev>
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	4618      	mov	r0, r3
 800760c:	f7ff ffce 	bl	80075ac <_ZN8touchgfx6ButtonD1Ev>
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	4618      	mov	r0, r3
 8007614:	3708      	adds	r7, #8
 8007616:	46bd      	mov	sp, r7
 8007618:	bd80      	pop	{r7, pc}
 800761a:	bf00      	nop
 800761c:	0803012c 	.word	0x0803012c

08007620 <_ZN8touchgfx15ButtonWithLabelD0Ev>:
 8007620:	b580      	push	{r7, lr}
 8007622:	b082      	sub	sp, #8
 8007624:	af00      	add	r7, sp, #0
 8007626:	6078      	str	r0, [r7, #4]
 8007628:	6878      	ldr	r0, [r7, #4]
 800762a:	f7ff ffe1 	bl	80075f0 <_ZN8touchgfx15ButtonWithLabelD1Ev>
 800762e:	2148      	movs	r1, #72	; 0x48
 8007630:	6878      	ldr	r0, [r7, #4]
 8007632:	f023 ff4c 	bl	802b4ce <_ZdlPvj>
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	4618      	mov	r0, r3
 800763a:	3708      	adds	r7, #8
 800763c:	46bd      	mov	sp, r7
 800763e:	bd80      	pop	{r7, pc}

08007640 <_ZN8touchgfx12CanvasWidgetD1Ev>:
class CanvasWidget : public Widget
 8007640:	b580      	push	{r7, lr}
 8007642:	b082      	sub	sp, #8
 8007644:	af00      	add	r7, sp, #0
 8007646:	6078      	str	r0, [r7, #4]
 8007648:	4a05      	ldr	r2, [pc, #20]	; (8007660 <_ZN8touchgfx12CanvasWidgetD1Ev+0x20>)
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	601a      	str	r2, [r3, #0]
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	4618      	mov	r0, r3
 8007652:	f7fd f809 	bl	8004668 <_ZN8touchgfx6WidgetD1Ev>
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	4618      	mov	r0, r3
 800765a:	3708      	adds	r7, #8
 800765c:	46bd      	mov	sp, r7
 800765e:	bd80      	pop	{r7, pc}
 8007660:	0802f3b8 	.word	0x0802f3b8

08007664 <_ZN8touchgfx12CanvasWidgetD0Ev>:
 8007664:	b580      	push	{r7, lr}
 8007666:	b082      	sub	sp, #8
 8007668:	af00      	add	r7, sp, #0
 800766a:	6078      	str	r0, [r7, #4]
 800766c:	6878      	ldr	r0, [r7, #4]
 800766e:	f7ff ffe7 	bl	8007640 <_ZN8touchgfx12CanvasWidgetD1Ev>
 8007672:	2130      	movs	r1, #48	; 0x30
 8007674:	6878      	ldr	r0, [r7, #4]
 8007676:	f023 ff2a 	bl	802b4ce <_ZdlPvj>
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	4618      	mov	r0, r3
 800767e:	3708      	adds	r7, #8
 8007680:	46bd      	mov	sp, r7
 8007682:	bd80      	pop	{r7, pc}

08007684 <_ZN8touchgfx20AbstractGraphElementD1Ev>:
#include <touchgfx/widgets/graph/AbstractDataGraph.hpp>

namespace touchgfx
{
/** An abstract graph element. Declares a couple of useful functions to help subclasses which use CWR (Canvas Widget Renderer). */
class AbstractGraphElement : public CanvasWidget
 8007684:	b580      	push	{r7, lr}
 8007686:	b082      	sub	sp, #8
 8007688:	af00      	add	r7, sp, #0
 800768a:	6078      	str	r0, [r7, #4]
 800768c:	4a05      	ldr	r2, [pc, #20]	; (80076a4 <_ZN8touchgfx20AbstractGraphElementD1Ev+0x20>)
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	601a      	str	r2, [r3, #0]
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	4618      	mov	r0, r3
 8007696:	f7ff ffd3 	bl	8007640 <_ZN8touchgfx12CanvasWidgetD1Ev>
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	4618      	mov	r0, r3
 800769e:	3708      	adds	r7, #8
 80076a0:	46bd      	mov	sp, r7
 80076a2:	bd80      	pop	{r7, pc}
 80076a4:	0802e0d8 	.word	0x0802e0d8

080076a8 <_ZN8touchgfx20AbstractGraphElementD0Ev>:
 80076a8:	b580      	push	{r7, lr}
 80076aa:	b082      	sub	sp, #8
 80076ac:	af00      	add	r7, sp, #0
 80076ae:	6078      	str	r0, [r7, #4]
 80076b0:	6878      	ldr	r0, [r7, #4]
 80076b2:	f7ff ffe7 	bl	8007684 <_ZN8touchgfx20AbstractGraphElementD1Ev>
 80076b6:	2134      	movs	r1, #52	; 0x34
 80076b8:	6878      	ldr	r0, [r7, #4]
 80076ba:	f023 ff08 	bl	802b4ce <_ZdlPvj>
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	4618      	mov	r0, r3
 80076c2:	3708      	adds	r7, #8
 80076c4:	46bd      	mov	sp, r7
 80076c6:	bd80      	pop	{r7, pc}

080076c8 <_ZN8touchgfx16GraphElementLineD1Ev>:
 * GraphElementLine will draw a line with a given thickness through the data points in the graph.
 *
 * @note The Line is drawn using Canvas Widget Renderer which is slower but produces much nicer
 *       graphics.
 */
class GraphElementLine : public AbstractGraphElement
 80076c8:	b580      	push	{r7, lr}
 80076ca:	b082      	sub	sp, #8
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	6078      	str	r0, [r7, #4]
 80076d0:	4a05      	ldr	r2, [pc, #20]	; (80076e8 <_ZN8touchgfx16GraphElementLineD1Ev+0x20>)
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	601a      	str	r2, [r3, #0]
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	4618      	mov	r0, r3
 80076da:	f7ff ffd3 	bl	8007684 <_ZN8touchgfx20AbstractGraphElementD1Ev>
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	4618      	mov	r0, r3
 80076e2:	3708      	adds	r7, #8
 80076e4:	46bd      	mov	sp, r7
 80076e6:	bd80      	pop	{r7, pc}
 80076e8:	0802f7d4 	.word	0x0802f7d4

080076ec <_ZN8touchgfx16GraphElementLineD0Ev>:
 80076ec:	b580      	push	{r7, lr}
 80076ee:	b082      	sub	sp, #8
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	6078      	str	r0, [r7, #4]
 80076f4:	6878      	ldr	r0, [r7, #4]
 80076f6:	f7ff ffe7 	bl	80076c8 <_ZN8touchgfx16GraphElementLineD1Ev>
 80076fa:	2138      	movs	r1, #56	; 0x38
 80076fc:	6878      	ldr	r0, [r7, #4]
 80076fe:	f023 fee6 	bl	802b4ce <_ZdlPvj>
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	4618      	mov	r0, r3
 8007706:	3708      	adds	r7, #8
 8007708:	46bd      	mov	sp, r7
 800770a:	bd80      	pop	{r7, pc}

0800770c <_ZN8touchgfx13PainterRGB888D1Ev>:
class PainterRGB888 : public AbstractPainterRGB888
 800770c:	b580      	push	{r7, lr}
 800770e:	b082      	sub	sp, #8
 8007710:	af00      	add	r7, sp, #0
 8007712:	6078      	str	r0, [r7, #4]
 8007714:	4a05      	ldr	r2, [pc, #20]	; (800772c <_ZN8touchgfx13PainterRGB888D1Ev+0x20>)
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	601a      	str	r2, [r3, #0]
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	4618      	mov	r0, r3
 800771e:	f7fe fe1d 	bl	800635c <_ZN8touchgfx21AbstractPainterRGB888D1Ev>
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	4618      	mov	r0, r3
 8007726:	3708      	adds	r7, #8
 8007728:	46bd      	mov	sp, r7
 800772a:	bd80      	pop	{r7, pc}
 800772c:	0802f334 	.word	0x0802f334

08007730 <_ZN8touchgfx13PainterRGB888D0Ev>:
 8007730:	b580      	push	{r7, lr}
 8007732:	b082      	sub	sp, #8
 8007734:	af00      	add	r7, sp, #0
 8007736:	6078      	str	r0, [r7, #4]
 8007738:	6878      	ldr	r0, [r7, #4]
 800773a:	f7ff ffe7 	bl	800770c <_ZN8touchgfx13PainterRGB888D1Ev>
 800773e:	2118      	movs	r1, #24
 8007740:	6878      	ldr	r0, [r7, #4]
 8007742:	f023 fec4 	bl	802b4ce <_ZdlPvj>
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	4618      	mov	r0, r3
 800774a:	3708      	adds	r7, #8
 800774c:	46bd      	mov	sp, r7
 800774e:	bd80      	pop	{r7, pc}

08007750 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>:
class TextAreaWithOneWildcard : public TextArea
 8007750:	b580      	push	{r7, lr}
 8007752:	b082      	sub	sp, #8
 8007754:	af00      	add	r7, sp, #0
 8007756:	6078      	str	r0, [r7, #4]
 8007758:	4a05      	ldr	r2, [pc, #20]	; (8007770 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev+0x20>)
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	601a      	str	r2, [r3, #0]
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	4618      	mov	r0, r3
 8007762:	f7fe fea3 	bl	80064ac <_ZN8touchgfx8TextAreaD1Ev>
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	4618      	mov	r0, r3
 800776a:	3708      	adds	r7, #8
 800776c:	46bd      	mov	sp, r7
 800776e:	bd80      	pop	{r7, pc}
 8007770:	0803001c 	.word	0x0803001c

08007774 <_ZN8touchgfx23TextAreaWithOneWildcardD0Ev>:
 8007774:	b580      	push	{r7, lr}
 8007776:	b082      	sub	sp, #8
 8007778:	af00      	add	r7, sp, #0
 800777a:	6078      	str	r0, [r7, #4]
 800777c:	6878      	ldr	r0, [r7, #4]
 800777e:	f7ff ffe7 	bl	8007750 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8007782:	2140      	movs	r1, #64	; 0x40
 8007784:	6878      	ldr	r0, [r7, #4]
 8007786:	f023 fea2 	bl	802b4ce <_ZdlPvj>
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	4618      	mov	r0, r3
 800778e:	3708      	adds	r7, #8
 8007790:	46bd      	mov	sp, r7
 8007792:	bd80      	pop	{r7, pc}

08007794 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7executeES4_>:
    virtual void execute(T1 t1)
 8007794:	b580      	push	{r7, lr}
 8007796:	b082      	sub	sp, #8
 8007798:	af00      	add	r7, sp, #0
 800779a:	6078      	str	r0, [r7, #4]
 800779c:	6039      	str	r1, [r7, #0]
        (pobject->*pmemfun_1)(t1);
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	685b      	ldr	r3, [r3, #4]
 80077a2:	687a      	ldr	r2, [r7, #4]
 80077a4:	68d2      	ldr	r2, [r2, #12]
 80077a6:	1052      	asrs	r2, r2, #1
 80077a8:	1898      	adds	r0, r3, r2
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	68db      	ldr	r3, [r3, #12]
 80077ae:	f003 0301 	and.w	r3, r3, #1
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d102      	bne.n	80077bc <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x28>
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	689b      	ldr	r3, [r3, #8]
 80077ba:	e00a      	b.n	80077d2 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x3e>
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	685b      	ldr	r3, [r3, #4]
 80077c0:	687a      	ldr	r2, [r7, #4]
 80077c2:	68d2      	ldr	r2, [r2, #12]
 80077c4:	1052      	asrs	r2, r2, #1
 80077c6:	4413      	add	r3, r2
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	687a      	ldr	r2, [r7, #4]
 80077cc:	6892      	ldr	r2, [r2, #8]
 80077ce:	4413      	add	r3, r2
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	6839      	ldr	r1, [r7, #0]
 80077d4:	4798      	blx	r3
    }
 80077d6:	bf00      	nop
 80077d8:	3708      	adds	r7, #8
 80077da:	46bd      	mov	sp, r7
 80077dc:	bd80      	pop	{r7, pc}

080077de <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv>:
    virtual bool isValid() const
 80077de:	b480      	push	{r7}
 80077e0:	b083      	sub	sp, #12
 80077e2:	af00      	add	r7, sp, #0
 80077e4:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun_1 != 0);
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	685b      	ldr	r3, [r3, #4]
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d010      	beq.n	8007810 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	689b      	ldr	r3, [r3, #8]
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d107      	bne.n	8007806 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	68db      	ldr	r3, [r3, #12]
 80077fa:	f003 0301 	and.w	r3, r3, #1
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d101      	bne.n	8007806 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 8007802:	2301      	movs	r3, #1
 8007804:	e000      	b.n	8007808 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x2a>
 8007806:	2300      	movs	r3, #0
 8007808:	2b01      	cmp	r3, #1
 800780a:	d001      	beq.n	8007810 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 800780c:	2301      	movs	r3, #1
 800780e:	e000      	b.n	8007812 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x34>
 8007810:	2300      	movs	r3, #0
    }
 8007812:	4618      	mov	r0, r3
 8007814:	370c      	adds	r7, #12
 8007816:	46bd      	mov	sp, r7
 8007818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800781c:	4770      	bx	lr
	...

08007820 <_ZN8touchgfx4ViewI16Screen2PresenterED1Ev>:
class View : public Screen
 8007820:	b580      	push	{r7, lr}
 8007822:	b082      	sub	sp, #8
 8007824:	af00      	add	r7, sp, #0
 8007826:	6078      	str	r0, [r7, #4]
 8007828:	4a05      	ldr	r2, [pc, #20]	; (8007840 <_ZN8touchgfx4ViewI16Screen2PresenterED1Ev+0x20>)
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	601a      	str	r2, [r3, #0]
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	4618      	mov	r0, r3
 8007832:	f7fe faa7 	bl	8005d84 <_ZN8touchgfx6ScreenD1Ev>
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	4618      	mov	r0, r3
 800783a:	3708      	adds	r7, #8
 800783c:	46bd      	mov	sp, r7
 800783e:	bd80      	pop	{r7, pc}
 8007840:	0802e1d0 	.word	0x0802e1d0

08007844 <_ZN8touchgfx4ViewI16Screen2PresenterED0Ev>:
 8007844:	b580      	push	{r7, lr}
 8007846:	b082      	sub	sp, #8
 8007848:	af00      	add	r7, sp, #0
 800784a:	6078      	str	r0, [r7, #4]
 800784c:	6878      	ldr	r0, [r7, #4]
 800784e:	f7ff ffe7 	bl	8007820 <_ZN8touchgfx4ViewI16Screen2PresenterED1Ev>
 8007852:	2140      	movs	r1, #64	; 0x40
 8007854:	6878      	ldr	r0, [r7, #4]
 8007856:	f023 fe3a 	bl	802b4ce <_ZdlPvj>
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	4618      	mov	r0, r3
 800785e:	3708      	adds	r7, #8
 8007860:	46bd      	mov	sp, r7
 8007862:	bd80      	pop	{r7, pc}

08007864 <_ZN15Screen2ViewBaseD1Ev>:

class Screen2ViewBase : public touchgfx::View<Screen2Presenter>
{
public:
    Screen2ViewBase();
    virtual ~Screen2ViewBase() {}
 8007864:	b580      	push	{r7, lr}
 8007866:	b082      	sub	sp, #8
 8007868:	af00      	add	r7, sp, #0
 800786a:	6078      	str	r0, [r7, #4]
 800786c:	4a12      	ldr	r2, [pc, #72]	; (80078b8 <_ZN15Screen2ViewBaseD1Ev+0x54>)
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	601a      	str	r2, [r3, #0]
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8007878:	4618      	mov	r0, r3
 800787a:	f000 fa17 	bl	8007cac <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvED1Ev>
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	33e4      	adds	r3, #228	; 0xe4
 8007882:	4618      	mov	r0, r3
 8007884:	f000 faa4 	bl	8007dd0 <_ZN8touchgfx5GaugeD1Ev>
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	339c      	adds	r3, #156	; 0x9c
 800788c:	4618      	mov	r0, r3
 800788e:	f7ff feaf 	bl	80075f0 <_ZN8touchgfx15ButtonWithLabelD1Ev>
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	336c      	adds	r3, #108	; 0x6c
 8007896:	4618      	mov	r0, r3
 8007898:	f7ff fe66 	bl	8007568 <_ZN8touchgfx10TiledImageD1Ev>
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	3340      	adds	r3, #64	; 0x40
 80078a0:	4618      	mov	r0, r3
 80078a2:	f7ff fe3f 	bl	8007524 <_ZN8touchgfx3BoxD1Ev>
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	4618      	mov	r0, r3
 80078aa:	f7ff ffb9 	bl	8007820 <_ZN8touchgfx4ViewI16Screen2PresenterED1Ev>
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	4618      	mov	r0, r3
 80078b2:	3708      	adds	r7, #8
 80078b4:	46bd      	mov	sp, r7
 80078b6:	bd80      	pop	{r7, pc}
 80078b8:	0802e184 	.word	0x0802e184

080078bc <_ZN15Screen2ViewBaseD0Ev>:
 80078bc:	b580      	push	{r7, lr}
 80078be:	b082      	sub	sp, #8
 80078c0:	af00      	add	r7, sp, #0
 80078c2:	6078      	str	r0, [r7, #4]
 80078c4:	6878      	ldr	r0, [r7, #4]
 80078c6:	f7ff ffcd 	bl	8007864 <_ZN15Screen2ViewBaseD1Ev>
 80078ca:	f44f 7126 	mov.w	r1, #664	; 0x298
 80078ce:	6878      	ldr	r0, [r7, #4]
 80078d0:	f023 fdfd 	bl	802b4ce <_ZdlPvj>
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	4618      	mov	r0, r3
 80078d8:	3708      	adds	r7, #8
 80078da:	46bd      	mov	sp, r7
 80078dc:	bd80      	pop	{r7, pc}

080078de <_ZN15Screen2ViewBase11applicationEv>:
    virtual void setupScreen();

protected:
    FrontendApplication& application() {
 80078de:	b580      	push	{r7, lr}
 80078e0:	b082      	sub	sp, #8
 80078e2:	af00      	add	r7, sp, #0
 80078e4:	6078      	str	r0, [r7, #4]
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 80078e6:	f016 ffed 	bl	801e8c4 <_ZN8touchgfx11Application11getInstanceEv>
 80078ea:	4603      	mov	r3, r0
    }
 80078ec:	4618      	mov	r0, r3
 80078ee:	3708      	adds	r7, #8
 80078f0:	46bd      	mov	sp, r7
 80078f2:	bd80      	pop	{r7, pc}

080078f4 <_ZN15Screen2ViewBaseC1Ev>:
#include <gui_generated/screen2_screen/Screen2ViewBase.hpp>
#include <touchgfx/Color.hpp>
#include <BitmapDatabase.hpp>
#include <texts/TextKeysAndLanguages.hpp>

Screen2ViewBase::Screen2ViewBase() :
 80078f4:	b590      	push	{r4, r7, lr}
 80078f6:	b095      	sub	sp, #84	; 0x54
 80078f8:	af02      	add	r7, sp, #8
 80078fa:	6078      	str	r0, [r7, #4]
    buttonCallback(this, &Screen2ViewBase::buttonCallbackHandler)
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	4618      	mov	r0, r3
 8007900:	f000 f99e 	bl	8007c40 <_ZN8touchgfx4ViewI16Screen2PresenterEC1Ev>
 8007904:	4abb      	ldr	r2, [pc, #748]	; (8007bf4 <_ZN15Screen2ViewBaseC1Ev+0x300>)
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	601a      	str	r2, [r3, #0]
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	3340      	adds	r3, #64	; 0x40
 800790e:	4618      	mov	r0, r3
 8007910:	f7fe fab2 	bl	8005e78 <_ZN8touchgfx3BoxC1Ev>
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	f103 046c 	add.w	r4, r3, #108	; 0x6c
 800791a:	f107 030c 	add.w	r3, r7, #12
 800791e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8007922:	4618      	mov	r0, r3
 8007924:	f7fe f9d5 	bl	8005cd2 <_ZN8touchgfx6BitmapC1Et>
 8007928:	f107 030c 	add.w	r3, r7, #12
 800792c:	4619      	mov	r1, r3
 800792e:	4620      	mov	r0, r4
 8007930:	f7fe fb1c 	bl	8005f6c <_ZN8touchgfx10TiledImageC1ERKNS_6BitmapE>
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	339c      	adds	r3, #156	; 0x9c
 8007938:	4618      	mov	r0, r3
 800793a:	f015 fa93 	bl	801ce64 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	33e4      	adds	r3, #228	; 0xe4
 8007942:	4618      	mov	r0, r3
 8007944:	f014 fe50 	bl	801c5e8 <_ZN8touchgfx5GaugeC1Ev>
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	f503 7022 	add.w	r0, r3, #648	; 0x288
 800794e:	4baa      	ldr	r3, [pc, #680]	; (8007bf8 <_ZN15Screen2ViewBaseC1Ev+0x304>)
 8007950:	613b      	str	r3, [r7, #16]
 8007952:	2300      	movs	r3, #0
 8007954:	617b      	str	r3, [r7, #20]
 8007956:	f107 0310 	add.w	r3, r7, #16
 800795a:	cb0c      	ldmia	r3, {r2, r3}
 800795c:	6879      	ldr	r1, [r7, #4]
 800795e:	f000 f985 	bl	8007c6c <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>
{

    __background.setPosition(0, 0, 480, 272);
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	f103 0040 	add.w	r0, r3, #64	; 0x40
 8007968:	f44f 7388 	mov.w	r3, #272	; 0x110
 800796c:	9300      	str	r3, [sp, #0]
 800796e:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8007972:	2200      	movs	r2, #0
 8007974:	2100      	movs	r1, #0
 8007976:	f7fc fc3a 	bl	80041ee <_ZN8touchgfx8Drawable11setPositionEssss>
    __background.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8007980:	2300      	movs	r3, #0
 8007982:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
 8007986:	2300      	movs	r3, #0
 8007988:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
 800798c:	2300      	movs	r3, #0
 800798e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8007992:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8007996:	041b      	lsls	r3, r3, #16
 8007998:	461a      	mov	r2, r3
 800799a:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800799e:	021b      	lsls	r3, r3, #8
 80079a0:	431a      	orrs	r2, r3
 80079a2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80079a6:	4313      	orrs	r3, r2
 80079a8:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80079ac:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80079b0:	4611      	mov	r1, r2
 80079b2:	4618      	mov	r0, r3
 80079b4:	f7fe f97e 	bl	8005cb4 <_ZN8touchgfx9colortypeC1Em>
 80079b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079ba:	4619      	mov	r1, r3
 80079bc:	4620      	mov	r0, r4
 80079be:	f7fe fa7f 	bl	8005ec0 <_ZN8touchgfx3Box8setColorENS_9colortypeE>

    tiledImage1.setBitmap(touchgfx::Bitmap(BITMAP_DARK_TEXTURES_GPLAYPATTERN_ID));
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	f103 046c 	add.w	r4, r3, #108	; 0x6c
 80079c8:	f107 0318 	add.w	r3, r7, #24
 80079cc:	2104      	movs	r1, #4
 80079ce:	4618      	mov	r0, r3
 80079d0:	f7fe f97f 	bl	8005cd2 <_ZN8touchgfx6BitmapC1Et>
 80079d4:	f107 0318 	add.w	r3, r7, #24
 80079d8:	4619      	mov	r1, r3
 80079da:	4620      	mov	r0, r4
 80079dc:	f014 fc35 	bl	801c24a <_ZN8touchgfx10TiledImage9setBitmapERKNS_6BitmapE>
    tiledImage1.setPosition(0, 0, 480, 272);
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	f103 006c 	add.w	r0, r3, #108	; 0x6c
 80079e6:	f44f 7388 	mov.w	r3, #272	; 0x110
 80079ea:	9300      	str	r3, [sp, #0]
 80079ec:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80079f0:	2200      	movs	r2, #0
 80079f2:	2100      	movs	r1, #0
 80079f4:	f7fc fbfb 	bl	80041ee <_ZN8touchgfx8Drawable11setPositionEssss>
    tiledImage1.setOffset(0, 0);
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	336c      	adds	r3, #108	; 0x6c
 80079fc:	2200      	movs	r2, #0
 80079fe:	2100      	movs	r1, #0
 8007a00:	4618      	mov	r0, r3
 8007a02:	f014 fc01 	bl	801c208 <_ZN8touchgfx10TiledImage9setOffsetEss>

    buttonWithLabel1.setXY(0, 0);
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	339c      	adds	r3, #156	; 0x9c
 8007a0a:	2200      	movs	r2, #0
 8007a0c:	2100      	movs	r1, #0
 8007a0e:	4618      	mov	r0, r3
 8007a10:	f7fc fc39 	bl	8004286 <_ZN8touchgfx8Drawable5setXYEss>
    buttonWithLabel1.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_ICON_BUTTON_PRESSED_ID));
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	f103 049c 	add.w	r4, r3, #156	; 0x9c
 8007a1a:	f107 031c 	add.w	r3, r7, #28
 8007a1e:	2100      	movs	r1, #0
 8007a20:	4618      	mov	r0, r3
 8007a22:	f7fe f956 	bl	8005cd2 <_ZN8touchgfx6BitmapC1Et>
 8007a26:	f107 0320 	add.w	r3, r7, #32
 8007a2a:	2101      	movs	r1, #1
 8007a2c:	4618      	mov	r0, r3
 8007a2e:	f7fe f950 	bl	8005cd2 <_ZN8touchgfx6BitmapC1Et>
 8007a32:	f107 0220 	add.w	r2, r7, #32
 8007a36:	f107 031c 	add.w	r3, r7, #28
 8007a3a:	4619      	mov	r1, r3
 8007a3c:	4620      	mov	r0, r4
 8007a3e:	f014 ff25 	bl	801c88c <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    buttonWithLabel1.setLabelText(touchgfx::TypedText(T___SINGLEUSE_44ND));
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	f103 049c 	add.w	r4, r3, #156	; 0x9c
 8007a48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007a4c:	2101      	movs	r1, #1
 8007a4e:	4618      	mov	r0, r3
 8007a50:	f7fe faa6 	bl	8005fa0 <_ZN8touchgfx9TypedTextC1Et>
 8007a54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007a58:	4619      	mov	r1, r3
 8007a5a:	4620      	mov	r0, r4
 8007a5c:	f7fe faf6 	bl	800604c <_ZN8touchgfx15ButtonWithLabel12setLabelTextENS_9TypedTextE>
 8007a60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007a64:	4618      	mov	r0, r3
 8007a66:	f7fc fb6b 	bl	8004140 <_ZN8touchgfx9TypedTextD1Ev>
    buttonWithLabel1.setLabelColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	f103 049c 	add.w	r4, r3, #156	; 0x9c
 8007a70:	23ff      	movs	r3, #255	; 0xff
 8007a72:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
 8007a76:	23ff      	movs	r3, #255	; 0xff
 8007a78:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a7c:	23ff      	movs	r3, #255	; 0xff
 8007a7e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8007a82:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8007a86:	041b      	lsls	r3, r3, #16
 8007a88:	461a      	mov	r2, r3
 8007a8a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007a8e:	021b      	lsls	r3, r3, #8
 8007a90:	431a      	orrs	r2, r3
 8007a92:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8007a96:	4313      	orrs	r3, r2
 8007a98:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8007a9c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8007aa0:	4611      	mov	r1, r2
 8007aa2:	4618      	mov	r0, r3
 8007aa4:	f7fe f906 	bl	8005cb4 <_ZN8touchgfx9colortypeC1Em>
 8007aa8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007aaa:	4619      	mov	r1, r3
 8007aac:	4620      	mov	r0, r4
 8007aae:	f7fe fadf 	bl	8006070 <_ZN8touchgfx15ButtonWithLabel13setLabelColorENS_9colortypeE>
    buttonWithLabel1.setLabelColorPressed(touchgfx::Color::getColorFromRGB(255, 255, 255));
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	f103 049c 	add.w	r4, r3, #156	; 0x9c
 8007ab8:	23ff      	movs	r3, #255	; 0xff
 8007aba:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8007abe:	23ff      	movs	r3, #255	; 0xff
 8007ac0:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8007ac4:	23ff      	movs	r3, #255	; 0xff
 8007ac6:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 8007aca:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8007ace:	041b      	lsls	r3, r3, #16
 8007ad0:	461a      	mov	r2, r3
 8007ad2:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8007ad6:	021b      	lsls	r3, r3, #8
 8007ad8:	431a      	orrs	r2, r3
 8007ada:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8007ade:	4313      	orrs	r3, r2
 8007ae0:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8007ae4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007ae8:	4611      	mov	r1, r2
 8007aea:	4618      	mov	r0, r3
 8007aec:	f7fe f8e2 	bl	8005cb4 <_ZN8touchgfx9colortypeC1Em>
 8007af0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007af2:	4619      	mov	r1, r3
 8007af4:	4620      	mov	r0, r4
 8007af6:	f7fe fac9 	bl	800608c <_ZN8touchgfx15ButtonWithLabel20setLabelColorPressedENS_9colortypeE>
    buttonWithLabel1.setAction(buttonCallback);
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	f103 029c 	add.w	r2, r3, #156	; 0x9c
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8007b06:	4619      	mov	r1, r3
 8007b08:	4610      	mov	r0, r2
 8007b0a:	f7fe fa5f 	bl	8005fcc <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>

    gauge1.setBackground(touchgfx::Bitmap(BITMAP_BLUE_GAUGES_ORIGINAL_GAUGE_BACKGROUND_STYLE_00_ID));
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	f103 04e4 	add.w	r4, r3, #228	; 0xe4
 8007b14:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007b18:	2102      	movs	r1, #2
 8007b1a:	4618      	mov	r0, r3
 8007b1c:	f7fe f8d9 	bl	8005cd2 <_ZN8touchgfx6BitmapC1Et>
 8007b20:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007b24:	4619      	mov	r1, r3
 8007b26:	4620      	mov	r0, r4
 8007b28:	f010 f9a7 	bl	8017e7a <_ZN8touchgfx25AbstractProgressIndicator13setBackgroundERKNS_6BitmapE>
    gauge1.setPosition(115, 11, 251, 251);
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	f103 00e4 	add.w	r0, r3, #228	; 0xe4
 8007b32:	23fb      	movs	r3, #251	; 0xfb
 8007b34:	9300      	str	r3, [sp, #0]
 8007b36:	23fb      	movs	r3, #251	; 0xfb
 8007b38:	220b      	movs	r2, #11
 8007b3a:	2173      	movs	r1, #115	; 0x73
 8007b3c:	f7fc fb57 	bl	80041ee <_ZN8touchgfx8Drawable11setPositionEssss>
    gauge1.setCenter(125, 125);
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	33e4      	adds	r3, #228	; 0xe4
 8007b44:	227d      	movs	r2, #125	; 0x7d
 8007b46:	217d      	movs	r1, #125	; 0x7d
 8007b48:	4618      	mov	r0, r3
 8007b4a:	f014 fdf8 	bl	801c73e <_ZN8touchgfx5Gauge9setCenterEii>
    gauge1.setStartEndAngle(-90, 90);
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	33e4      	adds	r3, #228	; 0xe4
 8007b52:	225a      	movs	r2, #90	; 0x5a
 8007b54:	f06f 0159 	mvn.w	r1, #89	; 0x59
 8007b58:	4618      	mov	r0, r3
 8007b5a:	f014 fe75 	bl	801c848 <_ZN8touchgfx5Gauge16setStartEndAngleEii>
    gauge1.setRange(0, 100);
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	f103 00e4 	add.w	r0, r3, #228	; 0xe4
 8007b64:	2300      	movs	r3, #0
 8007b66:	9300      	str	r3, [sp, #0]
 8007b68:	2300      	movs	r3, #0
 8007b6a:	2264      	movs	r2, #100	; 0x64
 8007b6c:	2100      	movs	r1, #0
 8007b6e:	f010 f8d7 	bl	8017d20 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt>
    gauge1.setValue(50);
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	33e4      	adds	r3, #228	; 0xe4
 8007b76:	2132      	movs	r1, #50	; 0x32
 8007b78:	4618      	mov	r0, r3
 8007b7a:	f014 fe0f 	bl	801c79c <_ZN8touchgfx5Gauge8setValueEi>
    gauge1.setEasingEquation(touchgfx::EasingEquations::linearEaseIn);
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	33e4      	adds	r3, #228	; 0xe4
 8007b82:	491e      	ldr	r1, [pc, #120]	; (8007bfc <_ZN15Screen2ViewBaseC1Ev+0x308>)
 8007b84:	4618      	mov	r0, r3
 8007b86:	f010 f85a 	bl	8017c3e <_ZN8touchgfx25AbstractProgressIndicator17setEasingEquationEPFstsstE>
    gauge1.setNeedle(BITMAP_BLUE_NEEDLES_ORIGINAL_GAUGE_NEEDLE_STYLE_00_ID, 11, 55);
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	f103 00e4 	add.w	r0, r3, #228	; 0xe4
 8007b90:	2337      	movs	r3, #55	; 0x37
 8007b92:	220b      	movs	r2, #11
 8007b94:	2103      	movs	r1, #3
 8007b96:	f014 fdbd 	bl	801c714 <_ZN8touchgfx5Gauge9setNeedleEtss>
    gauge1.setMovingNeedleRenderingAlgorithm(touchgfx::TextureMapper::BILINEAR_INTERPOLATION);
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	33e4      	adds	r3, #228	; 0xe4
 8007b9e:	2101      	movs	r1, #1
 8007ba0:	4618      	mov	r0, r3
 8007ba2:	f014 fd59 	bl	801c658 <_ZN8touchgfx5Gauge33setMovingNeedleRenderingAlgorithmENS_13TextureMapper18RenderingAlgorithmE>
    gauge1.setSteadyNeedleRenderingAlgorithm(touchgfx::TextureMapper::BILINEAR_INTERPOLATION);
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	33e4      	adds	r3, #228	; 0xe4
 8007baa:	2101      	movs	r1, #1
 8007bac:	4618      	mov	r0, r3
 8007bae:	f014 fd56 	bl	801c65e <_ZN8touchgfx5Gauge33setSteadyNeedleRenderingAlgorithmENS_13TextureMapper18RenderingAlgorithmE>

    add(__background);
 8007bb2:	687a      	ldr	r2, [r7, #4]
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	3340      	adds	r3, #64	; 0x40
 8007bb8:	4619      	mov	r1, r3
 8007bba:	4610      	mov	r0, r2
 8007bbc:	f7fe f93a 	bl	8005e34 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(tiledImage1);
 8007bc0:	687a      	ldr	r2, [r7, #4]
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	336c      	adds	r3, #108	; 0x6c
 8007bc6:	4619      	mov	r1, r3
 8007bc8:	4610      	mov	r0, r2
 8007bca:	f7fe f933 	bl	8005e34 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(buttonWithLabel1);
 8007bce:	687a      	ldr	r2, [r7, #4]
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	339c      	adds	r3, #156	; 0x9c
 8007bd4:	4619      	mov	r1, r3
 8007bd6:	4610      	mov	r0, r2
 8007bd8:	f7fe f92c 	bl	8005e34 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(gauge1);
 8007bdc:	687a      	ldr	r2, [r7, #4]
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	33e4      	adds	r3, #228	; 0xe4
 8007be2:	4619      	mov	r1, r3
 8007be4:	4610      	mov	r0, r2
 8007be6:	f7fe f925 	bl	8005e34 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	4618      	mov	r0, r3
 8007bee:	374c      	adds	r7, #76	; 0x4c
 8007bf0:	46bd      	mov	sp, r7
 8007bf2:	bd90      	pop	{r4, r7, pc}
 8007bf4:	0802e184 	.word	0x0802e184
 8007bf8:	08007c15 	.word	0x08007c15
 8007bfc:	0802034d 	.word	0x0802034d

08007c00 <_ZN15Screen2ViewBase11setupScreenEv>:

void Screen2ViewBase::setupScreen()
{
 8007c00:	b480      	push	{r7}
 8007c02:	b083      	sub	sp, #12
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	6078      	str	r0, [r7, #4]

}
 8007c08:	bf00      	nop
 8007c0a:	370c      	adds	r7, #12
 8007c0c:	46bd      	mov	sp, r7
 8007c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c12:	4770      	bx	lr

08007c14 <_ZN15Screen2ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE>:

void Screen2ViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
 8007c14:	b580      	push	{r7, lr}
 8007c16:	b082      	sub	sp, #8
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	6078      	str	r0, [r7, #4]
 8007c1c:	6039      	str	r1, [r7, #0]
    if (&src == &buttonWithLabel1)
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	339c      	adds	r3, #156	; 0x9c
 8007c22:	683a      	ldr	r2, [r7, #0]
 8007c24:	429a      	cmp	r2, r3
 8007c26:	d106      	bne.n	8007c36 <_ZN15Screen2ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x22>
    {
        //Interaction1
        //When buttonWithLabel1 clicked change screen to Screen1
        //Go to Screen1 with screen transition towards West
        application().gotoScreen1ScreenSlideTransitionWest();
 8007c28:	6878      	ldr	r0, [r7, #4]
 8007c2a:	f7ff fe58 	bl	80078de <_ZN15Screen2ViewBase11applicationEv>
 8007c2e:	4603      	mov	r3, r0
 8007c30:	4618      	mov	r0, r3
 8007c32:	f7fc fddd 	bl	80047f0 <_ZN23FrontendApplicationBase36gotoScreen1ScreenSlideTransitionWestEv>
    }
}
 8007c36:	bf00      	nop
 8007c38:	3708      	adds	r7, #8
 8007c3a:	46bd      	mov	sp, r7
 8007c3c:	bd80      	pop	{r7, pc}
	...

08007c40 <_ZN8touchgfx4ViewI16Screen2PresenterEC1Ev>:
    View()
 8007c40:	b580      	push	{r7, lr}
 8007c42:	b082      	sub	sp, #8
 8007c44:	af00      	add	r7, sp, #0
 8007c46:	6078      	str	r0, [r7, #4]
        : presenter(0)
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	4618      	mov	r0, r3
 8007c4c:	f018 f96c 	bl	801ff28 <_ZN8touchgfx6ScreenC1Ev>
 8007c50:	4a05      	ldr	r2, [pc, #20]	; (8007c68 <_ZN8touchgfx4ViewI16Screen2PresenterEC1Ev+0x28>)
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	601a      	str	r2, [r3, #0]
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	2200      	movs	r2, #0
 8007c5a:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	4618      	mov	r0, r3
 8007c60:	3708      	adds	r7, #8
 8007c62:	46bd      	mov	sp, r7
 8007c64:	bd80      	pop	{r7, pc}
 8007c66:	bf00      	nop
 8007c68:	0802e1d0 	.word	0x0802e1d0

08007c6c <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>:
    Callback(dest_type* pobject, void (dest_type::*pmemfun_1)(T1))
 8007c6c:	b580      	push	{r7, lr}
 8007c6e:	b084      	sub	sp, #16
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	60f8      	str	r0, [r7, #12]
 8007c74:	60b9      	str	r1, [r7, #8]
 8007c76:	4639      	mov	r1, r7
 8007c78:	e881 000c 	stmia.w	r1, {r2, r3}
        : pobject(pobject), pmemfun_1(pmemfun_1)
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	4618      	mov	r0, r3
 8007c80:	f7ff fbba 	bl	80073f8 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev>
 8007c84:	4a08      	ldr	r2, [pc, #32]	; (8007ca8 <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E+0x3c>)
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	601a      	str	r2, [r3, #0]
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	68ba      	ldr	r2, [r7, #8]
 8007c8e:	605a      	str	r2, [r3, #4]
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	3308      	adds	r3, #8
 8007c94:	463a      	mov	r2, r7
 8007c96:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007c9a:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	4618      	mov	r0, r3
 8007ca2:	3710      	adds	r7, #16
 8007ca4:	46bd      	mov	sp, r7
 8007ca6:	bd80      	pop	{r7, pc}
 8007ca8:	0802e1b8 	.word	0x0802e1b8

08007cac <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8007cac:	b580      	push	{r7, lr}
 8007cae:	b082      	sub	sp, #8
 8007cb0:	af00      	add	r7, sp, #0
 8007cb2:	6078      	str	r0, [r7, #4]
 8007cb4:	4a05      	ldr	r2, [pc, #20]	; (8007ccc <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvED1Ev+0x20>)
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	601a      	str	r2, [r3, #0]
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	4618      	mov	r0, r3
 8007cbe:	f7ff fbcb 	bl	8007458 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	4618      	mov	r0, r3
 8007cc6:	3708      	adds	r7, #8
 8007cc8:	46bd      	mov	sp, r7
 8007cca:	bd80      	pop	{r7, pc}
 8007ccc:	0802e1b8 	.word	0x0802e1b8

08007cd0 <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvED0Ev>:
 8007cd0:	b580      	push	{r7, lr}
 8007cd2:	b082      	sub	sp, #8
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	6078      	str	r0, [r7, #4]
 8007cd8:	6878      	ldr	r0, [r7, #4]
 8007cda:	f7ff ffe7 	bl	8007cac <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvED1Ev>
 8007cde:	2110      	movs	r1, #16
 8007ce0:	6878      	ldr	r0, [r7, #4]
 8007ce2:	f023 fbf4 	bl	802b4ce <_ZdlPvj>
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	4618      	mov	r0, r3
 8007cea:	3708      	adds	r7, #8
 8007cec:	46bd      	mov	sp, r7
 8007cee:	bd80      	pop	{r7, pc}

08007cf0 <_ZN8touchgfx25AbstractProgressIndicatorD1Ev>:
 * to implement a progress indicator. For more specific implementations see classes that
 * inherit from AbstractProgressIndicator.
 *
 * @see BoxProgress, CircleProgress, ImageProgress, LineProgress, TextProgress
 */
class AbstractProgressIndicator : public Container
 8007cf0:	b580      	push	{r7, lr}
 8007cf2:	b082      	sub	sp, #8
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	6078      	str	r0, [r7, #4]
 8007cf8:	4a0a      	ldr	r2, [pc, #40]	; (8007d24 <_ZN8touchgfx25AbstractProgressIndicatorD1Ev+0x34>)
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	601a      	str	r2, [r3, #0]
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	3358      	adds	r3, #88	; 0x58
 8007d02:	4618      	mov	r0, r3
 8007d04:	f7ff faba 	bl	800727c <_ZN8touchgfx9ContainerD1Ev>
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	332c      	adds	r3, #44	; 0x2c
 8007d0c:	4618      	mov	r0, r3
 8007d0e:	f7fe f90b 	bl	8005f28 <_ZN8touchgfx5ImageD1Ev>
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	4618      	mov	r0, r3
 8007d16:	f7ff fab1 	bl	800727c <_ZN8touchgfx9ContainerD1Ev>
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	4618      	mov	r0, r3
 8007d1e:	3708      	adds	r7, #8
 8007d20:	46bd      	mov	sp, r7
 8007d22:	bd80      	pop	{r7, pc}
 8007d24:	0802e648 	.word	0x0802e648

08007d28 <_ZN8touchgfx25AbstractProgressIndicatorD0Ev>:
 8007d28:	b580      	push	{r7, lr}
 8007d2a:	b082      	sub	sp, #8
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	6078      	str	r0, [r7, #4]
 8007d30:	6878      	ldr	r0, [r7, #4]
 8007d32:	f7ff ffdd 	bl	8007cf0 <_ZN8touchgfx25AbstractProgressIndicatorD1Ev>
 8007d36:	21b4      	movs	r1, #180	; 0xb4
 8007d38:	6878      	ldr	r0, [r7, #4]
 8007d3a:	f023 fbc8 	bl	802b4ce <_ZdlPvj>
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	4618      	mov	r0, r3
 8007d42:	3708      	adds	r7, #8
 8007d44:	46bd      	mov	sp, r7
 8007d46:	bd80      	pop	{r7, pc}

08007d48 <_ZN8touchgfx13TextureMapperD1Ev>:
 * @note The drawing of this widget is not trivial and typically has a significant performance
 *       penalty. The number of pixels drawn, the presence of global alpha or per pixel alpha
 *       inflicts the computation and should be considered.
 * @note This widget does not support 1 bit per pixel color depth.
 */
class TextureMapper : public Image
 8007d48:	b580      	push	{r7, lr}
 8007d4a:	b082      	sub	sp, #8
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	6078      	str	r0, [r7, #4]
 8007d50:	4a05      	ldr	r2, [pc, #20]	; (8007d68 <_ZN8touchgfx13TextureMapperD1Ev+0x20>)
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	601a      	str	r2, [r3, #0]
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	4618      	mov	r0, r3
 8007d5a:	f7fe f8e5 	bl	8005f28 <_ZN8touchgfx5ImageD1Ev>
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	4618      	mov	r0, r3
 8007d62:	3708      	adds	r7, #8
 8007d64:	46bd      	mov	sp, r7
 8007d66:	bd80      	pop	{r7, pc}
 8007d68:	0802f9ec 	.word	0x0802f9ec

08007d6c <_ZN8touchgfx13TextureMapperD0Ev>:
 8007d6c:	b580      	push	{r7, lr}
 8007d6e:	b082      	sub	sp, #8
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	6078      	str	r0, [r7, #4]
 8007d74:	6878      	ldr	r0, [r7, #4]
 8007d76:	f7ff ffe7 	bl	8007d48 <_ZN8touchgfx13TextureMapperD1Ev>
 8007d7a:	2190      	movs	r1, #144	; 0x90
 8007d7c:	6878      	ldr	r0, [r7, #4]
 8007d7e:	f023 fba6 	bl	802b4ce <_ZdlPvj>
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	4618      	mov	r0, r3
 8007d86:	3708      	adds	r7, #8
 8007d88:	46bd      	mov	sp, r7
 8007d8a:	bd80      	pop	{r7, pc}

08007d8c <_ZN8touchgfx6CircleD1Ev>:
 *            int x, y, r;
 *            circle.getCenter(&amp;x, &amp;y); // Will return (1, 1)
 *            circle.getRadius(&amp;r); // Will return 0
 *       @endcode.
 */
class Circle : public CanvasWidget
 8007d8c:	b580      	push	{r7, lr}
 8007d8e:	b082      	sub	sp, #8
 8007d90:	af00      	add	r7, sp, #0
 8007d92:	6078      	str	r0, [r7, #4]
 8007d94:	4a05      	ldr	r2, [pc, #20]	; (8007dac <_ZN8touchgfx6CircleD1Ev+0x20>)
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	601a      	str	r2, [r3, #0]
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	4618      	mov	r0, r3
 8007d9e:	f7ff fc4f 	bl	8007640 <_ZN8touchgfx12CanvasWidgetD1Ev>
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	4618      	mov	r0, r3
 8007da6:	3708      	adds	r7, #8
 8007da8:	46bd      	mov	sp, r7
 8007daa:	bd80      	pop	{r7, pc}
 8007dac:	0802f2b8 	.word	0x0802f2b8

08007db0 <_ZN8touchgfx6CircleD0Ev>:
 8007db0:	b580      	push	{r7, lr}
 8007db2:	b082      	sub	sp, #8
 8007db4:	af00      	add	r7, sp, #0
 8007db6:	6078      	str	r0, [r7, #4]
 8007db8:	6878      	ldr	r0, [r7, #4]
 8007dba:	f7ff ffe7 	bl	8007d8c <_ZN8touchgfx6CircleD1Ev>
 8007dbe:	214c      	movs	r1, #76	; 0x4c
 8007dc0:	6878      	ldr	r0, [r7, #4]
 8007dc2:	f023 fb84 	bl	802b4ce <_ZdlPvj>
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	4618      	mov	r0, r3
 8007dca:	3708      	adds	r7, #8
 8007dcc:	46bd      	mov	sp, r7
 8007dce:	bd80      	pop	{r7, pc}

08007dd0 <_ZN8touchgfx5GaugeD1Ev>:
 * Much like a progress indicator, the minimum and maximum value of the Gauge, as well as steps
 * can be set. For more information on this, consult the documentation on ProgressIndicators.
 *
 * A Gauge has a needle and optionally an arc that follows the needle.
 */
class Gauge : public AbstractProgressIndicator
 8007dd0:	b580      	push	{r7, lr}
 8007dd2:	b082      	sub	sp, #8
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	6078      	str	r0, [r7, #4]
 8007dd8:	4a0b      	ldr	r2, [pc, #44]	; (8007e08 <_ZN8touchgfx5GaugeD1Ev+0x38>)
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	601a      	str	r2, [r3, #0]
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8007de4:	4618      	mov	r0, r3
 8007de6:	f7ff ffd1 	bl	8007d8c <_ZN8touchgfx6CircleD1Ev>
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	33b4      	adds	r3, #180	; 0xb4
 8007dee:	4618      	mov	r0, r3
 8007df0:	f7ff ffaa 	bl	8007d48 <_ZN8touchgfx13TextureMapperD1Ev>
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	4618      	mov	r0, r3
 8007df8:	f7ff ff7a 	bl	8007cf0 <_ZN8touchgfx25AbstractProgressIndicatorD1Ev>
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	4618      	mov	r0, r3
 8007e00:	3708      	adds	r7, #8
 8007e02:	46bd      	mov	sp, r7
 8007e04:	bd80      	pop	{r7, pc}
 8007e06:	bf00      	nop
 8007e08:	0802fdf8 	.word	0x0802fdf8

08007e0c <_ZN8touchgfx5GaugeD0Ev>:
 8007e0c:	b580      	push	{r7, lr}
 8007e0e:	b082      	sub	sp, #8
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	6078      	str	r0, [r7, #4]
 8007e14:	6878      	ldr	r0, [r7, #4]
 8007e16:	f7ff ffdb 	bl	8007dd0 <_ZN8touchgfx5GaugeD1Ev>
 8007e1a:	f44f 71d2 	mov.w	r1, #420	; 0x1a4
 8007e1e:	6878      	ldr	r0, [r7, #4]
 8007e20:	f023 fb55 	bl	802b4ce <_ZdlPvj>
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	4618      	mov	r0, r3
 8007e28:	3708      	adds	r7, #8
 8007e2a:	46bd      	mov	sp, r7
 8007e2c:	bd80      	pop	{r7, pc}

08007e2e <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvE7executeES4_>:
    virtual void execute(T1 t1)
 8007e2e:	b580      	push	{r7, lr}
 8007e30:	b082      	sub	sp, #8
 8007e32:	af00      	add	r7, sp, #0
 8007e34:	6078      	str	r0, [r7, #4]
 8007e36:	6039      	str	r1, [r7, #0]
        (pobject->*pmemfun_1)(t1);
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	685b      	ldr	r3, [r3, #4]
 8007e3c:	687a      	ldr	r2, [r7, #4]
 8007e3e:	68d2      	ldr	r2, [r2, #12]
 8007e40:	1052      	asrs	r2, r2, #1
 8007e42:	1898      	adds	r0, r3, r2
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	68db      	ldr	r3, [r3, #12]
 8007e48:	f003 0301 	and.w	r3, r3, #1
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d102      	bne.n	8007e56 <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x28>
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	689b      	ldr	r3, [r3, #8]
 8007e54:	e00a      	b.n	8007e6c <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x3e>
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	685b      	ldr	r3, [r3, #4]
 8007e5a:	687a      	ldr	r2, [r7, #4]
 8007e5c:	68d2      	ldr	r2, [r2, #12]
 8007e5e:	1052      	asrs	r2, r2, #1
 8007e60:	4413      	add	r3, r2
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	687a      	ldr	r2, [r7, #4]
 8007e66:	6892      	ldr	r2, [r2, #8]
 8007e68:	4413      	add	r3, r2
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	6839      	ldr	r1, [r7, #0]
 8007e6e:	4798      	blx	r3
    }
 8007e70:	bf00      	nop
 8007e72:	3708      	adds	r7, #8
 8007e74:	46bd      	mov	sp, r7
 8007e76:	bd80      	pop	{r7, pc}

08007e78 <_ZNK8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvE7isValidEv>:
    virtual bool isValid() const
 8007e78:	b480      	push	{r7}
 8007e7a:	b083      	sub	sp, #12
 8007e7c:	af00      	add	r7, sp, #0
 8007e7e:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun_1 != 0);
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	685b      	ldr	r3, [r3, #4]
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d010      	beq.n	8007eaa <_ZNK8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	689b      	ldr	r3, [r3, #8]
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d107      	bne.n	8007ea0 <_ZNK8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	68db      	ldr	r3, [r3, #12]
 8007e94:	f003 0301 	and.w	r3, r3, #1
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d101      	bne.n	8007ea0 <_ZNK8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 8007e9c:	2301      	movs	r3, #1
 8007e9e:	e000      	b.n	8007ea2 <_ZNK8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x2a>
 8007ea0:	2300      	movs	r3, #0
 8007ea2:	2b01      	cmp	r3, #1
 8007ea4:	d001      	beq.n	8007eaa <_ZNK8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 8007ea6:	2301      	movs	r3, #1
 8007ea8:	e000      	b.n	8007eac <_ZNK8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x34>
 8007eaa:	2300      	movs	r3, #0
    }
 8007eac:	4618      	mov	r0, r3
 8007eae:	370c      	adds	r7, #12
 8007eb0:	46bd      	mov	sp, r7
 8007eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb6:	4770      	bx	lr

08007eb8 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_10_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_10_4bpp();

touchgfx::GeneratedFont& getFont_verdana_10_4bpp()
{
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 7, 10, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 8007eb8:	b580      	push	{r7, lr}
 8007eba:	af00      	add	r7, sp, #0
 8007ebc:	4801      	ldr	r0, [pc, #4]	; (8007ec4 <__tcf_0+0xc>)
 8007ebe:	f7fc f91d 	bl	80040fc <_ZN8touchgfx13GeneratedFontD1Ev>
 8007ec2:	bd80      	pop	{r7, pc}
 8007ec4:	240030a8 	.word	0x240030a8

08007ec8 <_Z23getFont_verdana_10_4bppv>:
{
 8007ec8:	b580      	push	{r7, lr}
 8007eca:	b08c      	sub	sp, #48	; 0x30
 8007ecc:	af0c      	add	r7, sp, #48	; 0x30
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 7, 10, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 8007ece:	4b1f      	ldr	r3, [pc, #124]	; (8007f4c <_Z23getFont_verdana_10_4bppv+0x84>)
 8007ed0:	781b      	ldrb	r3, [r3, #0]
 8007ed2:	f3bf 8f5b 	dmb	ish
 8007ed6:	b2db      	uxtb	r3, r3
 8007ed8:	f003 0301 	and.w	r3, r3, #1
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	bf0c      	ite	eq
 8007ee0:	2301      	moveq	r3, #1
 8007ee2:	2300      	movne	r3, #0
 8007ee4:	b2db      	uxtb	r3, r3
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d02c      	beq.n	8007f44 <_Z23getFont_verdana_10_4bppv+0x7c>
 8007eea:	4818      	ldr	r0, [pc, #96]	; (8007f4c <_Z23getFont_verdana_10_4bppv+0x84>)
 8007eec:	f023 faf1 	bl	802b4d2 <__cxa_guard_acquire>
 8007ef0:	4603      	mov	r3, r0
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	bf14      	ite	ne
 8007ef6:	2301      	movne	r3, #1
 8007ef8:	2300      	moveq	r3, #0
 8007efa:	b2db      	uxtb	r3, r3
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d021      	beq.n	8007f44 <_Z23getFont_verdana_10_4bppv+0x7c>
 8007f00:	2300      	movs	r3, #0
 8007f02:	930a      	str	r3, [sp, #40]	; 0x28
 8007f04:	2300      	movs	r3, #0
 8007f06:	9309      	str	r3, [sp, #36]	; 0x24
 8007f08:	2300      	movs	r3, #0
 8007f0a:	9308      	str	r3, [sp, #32]
 8007f0c:	233f      	movs	r3, #63	; 0x3f
 8007f0e:	9307      	str	r3, [sp, #28]
 8007f10:	4b0f      	ldr	r3, [pc, #60]	; (8007f50 <_Z23getFont_verdana_10_4bppv+0x88>)
 8007f12:	9306      	str	r3, [sp, #24]
 8007f14:	4b0f      	ldr	r3, [pc, #60]	; (8007f54 <_Z23getFont_verdana_10_4bppv+0x8c>)
 8007f16:	9305      	str	r3, [sp, #20]
 8007f18:	2300      	movs	r3, #0
 8007f1a:	9304      	str	r3, [sp, #16]
 8007f1c:	2300      	movs	r3, #0
 8007f1e:	9303      	str	r3, [sp, #12]
 8007f20:	2301      	movs	r3, #1
 8007f22:	9302      	str	r3, [sp, #8]
 8007f24:	2304      	movs	r3, #4
 8007f26:	9301      	str	r3, [sp, #4]
 8007f28:	2300      	movs	r3, #0
 8007f2a:	9300      	str	r3, [sp, #0]
 8007f2c:	230a      	movs	r3, #10
 8007f2e:	2207      	movs	r2, #7
 8007f30:	4909      	ldr	r1, [pc, #36]	; (8007f58 <_Z23getFont_verdana_10_4bppv+0x90>)
 8007f32:	480a      	ldr	r0, [pc, #40]	; (8007f5c <_Z23getFont_verdana_10_4bppv+0x94>)
 8007f34:	f7fd fe24 	bl	8005b80 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8007f38:	4804      	ldr	r0, [pc, #16]	; (8007f4c <_Z23getFont_verdana_10_4bppv+0x84>)
 8007f3a:	f023 fad6 	bl	802b4ea <__cxa_guard_release>
 8007f3e:	4808      	ldr	r0, [pc, #32]	; (8007f60 <_Z23getFont_verdana_10_4bppv+0x98>)
 8007f40:	f023 fcb8 	bl	802b8b4 <atexit>
    return verdana_10_4bpp;
 8007f44:	4b05      	ldr	r3, [pc, #20]	; (8007f5c <_Z23getFont_verdana_10_4bppv+0x94>)
}
 8007f46:	4618      	mov	r0, r3
 8007f48:	46bd      	mov	sp, r7
 8007f4a:	bd80      	pop	{r7, pc}
 8007f4c:	240030d0 	.word	0x240030d0
 8007f50:	08031e10 	.word	0x08031e10
 8007f54:	08031e20 	.word	0x08031e20
 8007f58:	90000314 	.word	0x90000314
 8007f5c:	240030a8 	.word	0x240030a8
 8007f60:	08007eb9 	.word	0x08007eb9

08007f64 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_20_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_20_4bpp();

touchgfx::GeneratedFont& getFont_verdana_20_4bpp()
{
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 7, 20, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 8007f64:	b580      	push	{r7, lr}
 8007f66:	af00      	add	r7, sp, #0
 8007f68:	4801      	ldr	r0, [pc, #4]	; (8007f70 <__tcf_0+0xc>)
 8007f6a:	f7fc f8c7 	bl	80040fc <_ZN8touchgfx13GeneratedFontD1Ev>
 8007f6e:	bd80      	pop	{r7, pc}
 8007f70:	240030d4 	.word	0x240030d4

08007f74 <_Z23getFont_verdana_20_4bppv>:
{
 8007f74:	b580      	push	{r7, lr}
 8007f76:	b08c      	sub	sp, #48	; 0x30
 8007f78:	af0c      	add	r7, sp, #48	; 0x30
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 7, 20, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 8007f7a:	4b1f      	ldr	r3, [pc, #124]	; (8007ff8 <_Z23getFont_verdana_20_4bppv+0x84>)
 8007f7c:	781b      	ldrb	r3, [r3, #0]
 8007f7e:	f3bf 8f5b 	dmb	ish
 8007f82:	b2db      	uxtb	r3, r3
 8007f84:	f003 0301 	and.w	r3, r3, #1
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	bf0c      	ite	eq
 8007f8c:	2301      	moveq	r3, #1
 8007f8e:	2300      	movne	r3, #0
 8007f90:	b2db      	uxtb	r3, r3
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d02c      	beq.n	8007ff0 <_Z23getFont_verdana_20_4bppv+0x7c>
 8007f96:	4818      	ldr	r0, [pc, #96]	; (8007ff8 <_Z23getFont_verdana_20_4bppv+0x84>)
 8007f98:	f023 fa9b 	bl	802b4d2 <__cxa_guard_acquire>
 8007f9c:	4603      	mov	r3, r0
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	bf14      	ite	ne
 8007fa2:	2301      	movne	r3, #1
 8007fa4:	2300      	moveq	r3, #0
 8007fa6:	b2db      	uxtb	r3, r3
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d021      	beq.n	8007ff0 <_Z23getFont_verdana_20_4bppv+0x7c>
 8007fac:	2300      	movs	r3, #0
 8007fae:	930a      	str	r3, [sp, #40]	; 0x28
 8007fb0:	2300      	movs	r3, #0
 8007fb2:	9309      	str	r3, [sp, #36]	; 0x24
 8007fb4:	2300      	movs	r3, #0
 8007fb6:	9308      	str	r3, [sp, #32]
 8007fb8:	233f      	movs	r3, #63	; 0x3f
 8007fba:	9307      	str	r3, [sp, #28]
 8007fbc:	4b0f      	ldr	r3, [pc, #60]	; (8007ffc <_Z23getFont_verdana_20_4bppv+0x88>)
 8007fbe:	9306      	str	r3, [sp, #24]
 8007fc0:	4b0f      	ldr	r3, [pc, #60]	; (8008000 <_Z23getFont_verdana_20_4bppv+0x8c>)
 8007fc2:	9305      	str	r3, [sp, #20]
 8007fc4:	2300      	movs	r3, #0
 8007fc6:	9304      	str	r3, [sp, #16]
 8007fc8:	2300      	movs	r3, #0
 8007fca:	9303      	str	r3, [sp, #12]
 8007fcc:	2301      	movs	r3, #1
 8007fce:	9302      	str	r3, [sp, #8]
 8007fd0:	2304      	movs	r3, #4
 8007fd2:	9301      	str	r3, [sp, #4]
 8007fd4:	2300      	movs	r3, #0
 8007fd6:	9300      	str	r3, [sp, #0]
 8007fd8:	2314      	movs	r3, #20
 8007fda:	2207      	movs	r2, #7
 8007fdc:	4909      	ldr	r1, [pc, #36]	; (8008004 <_Z23getFont_verdana_20_4bppv+0x90>)
 8007fde:	480a      	ldr	r0, [pc, #40]	; (8008008 <_Z23getFont_verdana_20_4bppv+0x94>)
 8007fe0:	f7fd fdce 	bl	8005b80 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8007fe4:	4804      	ldr	r0, [pc, #16]	; (8007ff8 <_Z23getFont_verdana_20_4bppv+0x84>)
 8007fe6:	f023 fa80 	bl	802b4ea <__cxa_guard_release>
 8007fea:	4808      	ldr	r0, [pc, #32]	; (800800c <_Z23getFont_verdana_20_4bppv+0x98>)
 8007fec:	f023 fc62 	bl	802b8b4 <atexit>
    return verdana_20_4bpp;
 8007ff0:	4b05      	ldr	r3, [pc, #20]	; (8008008 <_Z23getFont_verdana_20_4bppv+0x94>)
}
 8007ff2:	4618      	mov	r0, r3
 8007ff4:	46bd      	mov	sp, r7
 8007ff6:	bd80      	pop	{r7, pc}
 8007ff8:	240030fc 	.word	0x240030fc
 8007ffc:	08031e14 	.word	0x08031e14
 8008000:	08031e24 	.word	0x08031e24
 8008004:	90000378 	.word	0x90000378
 8008008:	240030d4 	.word	0x240030d4
 800800c:	08007f65 	.word	0x08007f65

08008010 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_40_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_40_4bpp();

touchgfx::GeneratedFont& getFont_verdana_40_4bpp()
{
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 8008010:	b580      	push	{r7, lr}
 8008012:	af00      	add	r7, sp, #0
 8008014:	4801      	ldr	r0, [pc, #4]	; (800801c <__tcf_0+0xc>)
 8008016:	f7fc f871 	bl	80040fc <_ZN8touchgfx13GeneratedFontD1Ev>
 800801a:	bd80      	pop	{r7, pc}
 800801c:	24003100 	.word	0x24003100

08008020 <_Z23getFont_verdana_40_4bppv>:
{
 8008020:	b580      	push	{r7, lr}
 8008022:	b08c      	sub	sp, #48	; 0x30
 8008024:	af0c      	add	r7, sp, #48	; 0x30
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 8008026:	4b1f      	ldr	r3, [pc, #124]	; (80080a4 <_Z23getFont_verdana_40_4bppv+0x84>)
 8008028:	781b      	ldrb	r3, [r3, #0]
 800802a:	f3bf 8f5b 	dmb	ish
 800802e:	b2db      	uxtb	r3, r3
 8008030:	f003 0301 	and.w	r3, r3, #1
 8008034:	2b00      	cmp	r3, #0
 8008036:	bf0c      	ite	eq
 8008038:	2301      	moveq	r3, #1
 800803a:	2300      	movne	r3, #0
 800803c:	b2db      	uxtb	r3, r3
 800803e:	2b00      	cmp	r3, #0
 8008040:	d02c      	beq.n	800809c <_Z23getFont_verdana_40_4bppv+0x7c>
 8008042:	4818      	ldr	r0, [pc, #96]	; (80080a4 <_Z23getFont_verdana_40_4bppv+0x84>)
 8008044:	f023 fa45 	bl	802b4d2 <__cxa_guard_acquire>
 8008048:	4603      	mov	r3, r0
 800804a:	2b00      	cmp	r3, #0
 800804c:	bf14      	ite	ne
 800804e:	2301      	movne	r3, #1
 8008050:	2300      	moveq	r3, #0
 8008052:	b2db      	uxtb	r3, r3
 8008054:	2b00      	cmp	r3, #0
 8008056:	d021      	beq.n	800809c <_Z23getFont_verdana_40_4bppv+0x7c>
 8008058:	2300      	movs	r3, #0
 800805a:	930a      	str	r3, [sp, #40]	; 0x28
 800805c:	2300      	movs	r3, #0
 800805e:	9309      	str	r3, [sp, #36]	; 0x24
 8008060:	2300      	movs	r3, #0
 8008062:	9308      	str	r3, [sp, #32]
 8008064:	233f      	movs	r3, #63	; 0x3f
 8008066:	9307      	str	r3, [sp, #28]
 8008068:	4b0f      	ldr	r3, [pc, #60]	; (80080a8 <_Z23getFont_verdana_40_4bppv+0x88>)
 800806a:	9306      	str	r3, [sp, #24]
 800806c:	4b0f      	ldr	r3, [pc, #60]	; (80080ac <_Z23getFont_verdana_40_4bppv+0x8c>)
 800806e:	9305      	str	r3, [sp, #20]
 8008070:	2300      	movs	r3, #0
 8008072:	9304      	str	r3, [sp, #16]
 8008074:	2300      	movs	r3, #0
 8008076:	9303      	str	r3, [sp, #12]
 8008078:	2301      	movs	r3, #1
 800807a:	9302      	str	r3, [sp, #8]
 800807c:	2304      	movs	r3, #4
 800807e:	9301      	str	r3, [sp, #4]
 8008080:	2300      	movs	r3, #0
 8008082:	9300      	str	r3, [sp, #0]
 8008084:	2328      	movs	r3, #40	; 0x28
 8008086:	2201      	movs	r2, #1
 8008088:	4909      	ldr	r1, [pc, #36]	; (80080b0 <_Z23getFont_verdana_40_4bppv+0x90>)
 800808a:	480a      	ldr	r0, [pc, #40]	; (80080b4 <_Z23getFont_verdana_40_4bppv+0x94>)
 800808c:	f7fd fd78 	bl	8005b80 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8008090:	4804      	ldr	r0, [pc, #16]	; (80080a4 <_Z23getFont_verdana_40_4bppv+0x84>)
 8008092:	f023 fa2a 	bl	802b4ea <__cxa_guard_release>
 8008096:	4808      	ldr	r0, [pc, #32]	; (80080b8 <_Z23getFont_verdana_40_4bppv+0x98>)
 8008098:	f023 fc0c 	bl	802b8b4 <atexit>
    return verdana_40_4bpp;
 800809c:	4b05      	ldr	r3, [pc, #20]	; (80080b4 <_Z23getFont_verdana_40_4bppv+0x94>)
}
 800809e:	4618      	mov	r0, r3
 80080a0:	46bd      	mov	sp, r7
 80080a2:	bd80      	pop	{r7, pc}
 80080a4:	24003128 	.word	0x24003128
 80080a8:	08031e1c 	.word	0x08031e1c
 80080ac:	08031e28 	.word	0x08031e28
 80080b0:	900003dc 	.word	0x900003dc
 80080b4:	24003100 	.word	0x24003100
 80080b8:	08008011 	.word	0x08008011

080080bc <_ZNK8touchgfx4Font10getKerningEtPKNS_9GlyphNodeE>:
     * @param  prevChar The Unicode value of the previous character.
     * @param  glyph    the glyph object for the current character.
     *
     * @return The kerning distance between prevChar and glyph char.
     */
    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
 80080bc:	b480      	push	{r7}
 80080be:	b085      	sub	sp, #20
 80080c0:	af00      	add	r7, sp, #0
 80080c2:	60f8      	str	r0, [r7, #12]
 80080c4:	460b      	mov	r3, r1
 80080c6:	607a      	str	r2, [r7, #4]
 80080c8:	817b      	strh	r3, [r7, #10]
    {
        return 0;
 80080ca:	2300      	movs	r3, #0
    }
 80080cc:	4618      	mov	r0, r3
 80080ce:	3714      	adds	r7, #20
 80080d0:	46bd      	mov	sp, r7
 80080d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d6:	4770      	bx	lr

080080d8 <_ZNK8touchgfx4Font12getGSUBTableEv>:
    /**
     * Gets GSUB table. Currently only used for Devanagari fonts.
     *
     * @return The GSUB table or null if font has GSUB no table.
     */
    virtual const uint16_t* getGSUBTable() const
 80080d8:	b480      	push	{r7}
 80080da:	b083      	sub	sp, #12
 80080dc:	af00      	add	r7, sp, #0
 80080de:	6078      	str	r0, [r7, #4]
    {
        return 0;
 80080e0:	2300      	movs	r3, #0
    }
 80080e2:	4618      	mov	r0, r3
 80080e4:	370c      	adds	r7, #12
 80080e6:	46bd      	mov	sp, r7
 80080e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ec:	4770      	bx	lr

080080ee <_ZNK8touchgfx4Font23getContextualFormsTableEv>:
    /**
     * Gets the contextual forms table used in arabic fonts.
     *
     * @return The FontContextualFormsTable or null if the font has no table.
     */
    virtual const FontContextualFormsTable* getContextualFormsTable() const
 80080ee:	b480      	push	{r7}
 80080f0:	b083      	sub	sp, #12
 80080f2:	af00      	add	r7, sp, #0
 80080f4:	6078      	str	r0, [r7, #4]
    {
        return 0;
 80080f6:	2300      	movs	r3, #0
    }
 80080f8:	4618      	mov	r0, r3
 80080fa:	370c      	adds	r7, #12
 80080fc:	46bd      	mov	sp, r7
 80080fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008102:	4770      	bx	lr

08008104 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>:
    static void registerTypedTextDatabase(const TypedTextData* data, const Font* const* f, const uint16_t n)
 8008104:	b480      	push	{r7}
 8008106:	b085      	sub	sp, #20
 8008108:	af00      	add	r7, sp, #0
 800810a:	60f8      	str	r0, [r7, #12]
 800810c:	60b9      	str	r1, [r7, #8]
 800810e:	4613      	mov	r3, r2
 8008110:	80fb      	strh	r3, [r7, #6]
        typedTexts = data;
 8008112:	4a07      	ldr	r2, [pc, #28]	; (8008130 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x2c>)
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	6013      	str	r3, [r2, #0]
        fonts = f;
 8008118:	4a06      	ldr	r2, [pc, #24]	; (8008134 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x30>)
 800811a:	68bb      	ldr	r3, [r7, #8]
 800811c:	6013      	str	r3, [r2, #0]
        numberOfTypedTexts = n;
 800811e:	4a06      	ldr	r2, [pc, #24]	; (8008138 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x34>)
 8008120:	88fb      	ldrh	r3, [r7, #6]
 8008122:	8013      	strh	r3, [r2, #0]
    }
 8008124:	bf00      	nop
 8008126:	3714      	adds	r7, #20
 8008128:	46bd      	mov	sp, r7
 800812a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800812e:	4770      	bx	lr
 8008130:	2400c92c 	.word	0x2400c92c
 8008134:	2400c934 	.word	0x2400c934
 8008138:	2400c930 	.word	0x2400c930

0800813c <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>
#include <texts/TypedTextDatabase.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 800813c:	b40e      	push	{r1, r2, r3}
 800813e:	b580      	push	{r7, lr}
 8008140:	b085      	sub	sp, #20
 8008142:	af00      	add	r7, sp, #0
 8008144:	6078      	str	r0, [r7, #4]
    va_list pArg;
    va_start(pArg, text);
 8008146:	f107 0320 	add.w	r3, r7, #32
 800814a:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 800814c:	68bb      	ldr	r3, [r7, #8]
 800814e:	69fa      	ldr	r2, [r7, #28]
 8008150:	2100      	movs	r1, #0
 8008152:	6878      	ldr	r0, [r7, #4]
 8008154:	f017 fa5e 	bl	801f614 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 8008158:	4603      	mov	r3, r0
 800815a:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 800815c:	89fb      	ldrh	r3, [r7, #14]
}
 800815e:	4618      	mov	r0, r3
 8008160:	3714      	adds	r7, #20
 8008162:	46bd      	mov	sp, r7
 8008164:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008168:	b003      	add	sp, #12
 800816a:	4770      	bx	lr

0800816c <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 800816c:	b40c      	push	{r2, r3}
 800816e:	b580      	push	{r7, lr}
 8008170:	b084      	sub	sp, #16
 8008172:	af00      	add	r7, sp, #0
 8008174:	6078      	str	r0, [r7, #4]
 8008176:	460b      	mov	r3, r1
 8008178:	70fb      	strb	r3, [r7, #3]
    va_list pArg;
    va_start(pArg, text);
 800817a:	f107 031c 	add.w	r3, r7, #28
 800817e:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
 8008180:	78f9      	ldrb	r1, [r7, #3]
 8008182:	68bb      	ldr	r3, [r7, #8]
 8008184:	69ba      	ldr	r2, [r7, #24]
 8008186:	6878      	ldr	r0, [r7, #4]
 8008188:	f017 fa44 	bl	801f614 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 800818c:	4603      	mov	r3, r0
 800818e:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 8008190:	89fb      	ldrh	r3, [r7, #14]
}
 8008192:	4618      	mov	r0, r3
 8008194:	3710      	adds	r7, #16
 8008196:	46bd      	mov	sp, r7
 8008198:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800819c:	b002      	add	sp, #8
 800819e:	4770      	bx	lr

080081a0 <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
 80081a0:	b580      	push	{r7, lr}
 80081a2:	b08a      	sub	sp, #40	; 0x28
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	6078      	str	r0, [r7, #4]
 80081a8:	460b      	mov	r3, r1
 80081aa:	70fb      	strb	r3, [r7, #3]
    if (fontGsubTable && nextCharacters.peekChar())
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d016      	beq.n	80081e2 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	3322      	adds	r3, #34	; 0x22
 80081b8:	627b      	str	r3, [r7, #36]	; 0x24
        {
            return used == size;
        }
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
        {
            assert(used > 0);
 80081ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081bc:	8adb      	ldrh	r3, [r3, #22]
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d105      	bne.n	80081ce <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x2e>
 80081c2:	4b43      	ldr	r3, [pc, #268]	; (80082d0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 80081c4:	4a43      	ldr	r2, [pc, #268]	; (80082d4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 80081c6:	21c0      	movs	r1, #192	; 0xc0
 80081c8:	4843      	ldr	r0, [pc, #268]	; (80082d8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 80081ca:	f023 fb55 	bl	802b878 <__assert_func>
            return buffer[pos];
 80081ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081d0:	8a9b      	ldrh	r3, [r3, #20]
 80081d2:	461a      	mov	r2, r3
 80081d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081d6:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d001      	beq.n	80081e2 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 80081de:	2301      	movs	r3, #1
 80081e0:	e000      	b.n	80081e4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x44>
 80081e2:	2300      	movs	r3, #0
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d06a      	beq.n	80082be <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11e>
    {
        substituteGlyphs();
 80081e8:	6878      	ldr	r0, [r7, #4]
 80081ea:	f018 fe1b 	bl	8020e24 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
        if (nextCharacters.peekChar(1) == 0x093F) // Hindi I-matra
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	3322      	adds	r3, #34	; 0x22
 80081f2:	623b      	str	r3, [r7, #32]
 80081f4:	2301      	movs	r3, #1
 80081f6:	83fb      	strh	r3, [r7, #30]
        }
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar(uint16_t offset)
        {
            assert(offset < used);
 80081f8:	6a3b      	ldr	r3, [r7, #32]
 80081fa:	8adb      	ldrh	r3, [r3, #22]
 80081fc:	8bfa      	ldrh	r2, [r7, #30]
 80081fe:	429a      	cmp	r2, r3
 8008200:	d305      	bcc.n	800820e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x6e>
 8008202:	4b36      	ldr	r3, [pc, #216]	; (80082dc <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x13c>)
 8008204:	4a36      	ldr	r2, [pc, #216]	; (80082e0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x140>)
 8008206:	21c5      	movs	r1, #197	; 0xc5
 8008208:	4833      	ldr	r0, [pc, #204]	; (80082d8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 800820a:	f023 fb35 	bl	802b878 <__assert_func>
            const uint16_t index = pos + offset;
 800820e:	6a3b      	ldr	r3, [r7, #32]
 8008210:	8a9a      	ldrh	r2, [r3, #20]
 8008212:	8bfb      	ldrh	r3, [r7, #30]
 8008214:	4413      	add	r3, r2
 8008216:	83bb      	strh	r3, [r7, #28]
            return buffer[index < size ? index : index - size];
 8008218:	8bbb      	ldrh	r3, [r7, #28]
 800821a:	2b09      	cmp	r3, #9
 800821c:	d801      	bhi.n	8008222 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x82>
 800821e:	8bbb      	ldrh	r3, [r7, #28]
 8008220:	e001      	b.n	8008226 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x86>
 8008222:	8bbb      	ldrh	r3, [r7, #28]
 8008224:	3b0a      	subs	r3, #10
 8008226:	6a3a      	ldr	r2, [r7, #32]
 8008228:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800822c:	f640 123f 	movw	r2, #2367	; 0x93f
 8008230:	4293      	cmp	r3, r2
 8008232:	bf0c      	ite	eq
 8008234:	2301      	moveq	r3, #1
 8008236:	2300      	movne	r3, #0
 8008238:	b2db      	uxtb	r3, r3
 800823a:	2b00      	cmp	r3, #0
 800823c:	d03f      	beq.n	80082be <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11e>
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	3322      	adds	r3, #34	; 0x22
 8008242:	687a      	ldr	r2, [r7, #4]
 8008244:	3222      	adds	r2, #34	; 0x22
 8008246:	60ba      	str	r2, [r7, #8]
            assert(used > 0);
 8008248:	68ba      	ldr	r2, [r7, #8]
 800824a:	8ad2      	ldrh	r2, [r2, #22]
 800824c:	2a00      	cmp	r2, #0
 800824e:	d105      	bne.n	800825c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xbc>
 8008250:	4b1f      	ldr	r3, [pc, #124]	; (80082d0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 8008252:	4a20      	ldr	r2, [pc, #128]	; (80082d4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 8008254:	21c0      	movs	r1, #192	; 0xc0
 8008256:	4820      	ldr	r0, [pc, #128]	; (80082d8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8008258:	f023 fb0e 	bl	802b878 <__assert_func>
            return buffer[pos];
 800825c:	68ba      	ldr	r2, [r7, #8]
 800825e:	8a92      	ldrh	r2, [r2, #20]
 8008260:	4611      	mov	r1, r2
 8008262:	68ba      	ldr	r2, [r7, #8]
 8008264:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8008268:	613b      	str	r3, [r7, #16]
 800826a:	4613      	mov	r3, r2
 800826c:	81fb      	strh	r3, [r7, #14]
        {
            buffer[pos] = newChar;
        }
        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
        {
            assert(used > 1);
 800826e:	693b      	ldr	r3, [r7, #16]
 8008270:	8adb      	ldrh	r3, [r3, #22]
 8008272:	2b01      	cmp	r3, #1
 8008274:	d806      	bhi.n	8008284 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xe4>
 8008276:	4b1b      	ldr	r3, [pc, #108]	; (80082e4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x144>)
 8008278:	4a1b      	ldr	r2, [pc, #108]	; (80082e8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x148>)
 800827a:	f240 110d 	movw	r1, #269	; 0x10d
 800827e:	4816      	ldr	r0, [pc, #88]	; (80082d8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8008280:	f023 fafa 	bl	802b878 <__assert_func>
            const uint16_t index = pos + 1;
 8008284:	693b      	ldr	r3, [r7, #16]
 8008286:	8a9b      	ldrh	r3, [r3, #20]
 8008288:	3301      	adds	r3, #1
 800828a:	81bb      	strh	r3, [r7, #12]
            buffer[index < size ? index : 0] = newChar;
 800828c:	89bb      	ldrh	r3, [r7, #12]
 800828e:	2b09      	cmp	r3, #9
 8008290:	d801      	bhi.n	8008296 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf6>
 8008292:	89bb      	ldrh	r3, [r7, #12]
 8008294:	e000      	b.n	8008298 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf8>
 8008296:	2300      	movs	r3, #0
 8008298:	693a      	ldr	r2, [r7, #16]
 800829a:	89f9      	ldrh	r1, [r7, #14]
 800829c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        }
 80082a0:	bf00      	nop
            nextCharacters.replaceAt0(0x093F);
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	3322      	adds	r3, #34	; 0x22
 80082a6:	61bb      	str	r3, [r7, #24]
 80082a8:	f640 133f 	movw	r3, #2367	; 0x93f
 80082ac:	82fb      	strh	r3, [r7, #22]
            buffer[pos] = newChar;
 80082ae:	69bb      	ldr	r3, [r7, #24]
 80082b0:	8a9b      	ldrh	r3, [r3, #20]
 80082b2:	4619      	mov	r1, r3
 80082b4:	69bb      	ldr	r3, [r7, #24]
 80082b6:	8afa      	ldrh	r2, [r7, #22]
 80082b8:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
        }
 80082bc:	bf00      	nop
        }
    }
    return getNextChar();
 80082be:	6878      	ldr	r0, [r7, #4]
 80082c0:	f018 fc94 	bl	8020bec <_ZN8touchgfx12TextProvider11getNextCharEv>
 80082c4:	4603      	mov	r3, r0
}
 80082c6:	4618      	mov	r0, r3
 80082c8:	3728      	adds	r7, #40	; 0x28
 80082ca:	46bd      	mov	sp, r7
 80082cc:	bd80      	pop	{r7, pc}
 80082ce:	bf00      	nop
 80082d0:	0802d560 	.word	0x0802d560
 80082d4:	0802d56c 	.word	0x0802d56c
 80082d8:	0802d618 	.word	0x0802d618
 80082dc:	0802d664 	.word	0x0802d664
 80082e0:	0802d674 	.word	0x0802d674
 80082e4:	0802d748 	.word	0x0802d748
 80082e8:	0802d754 	.word	0x0802d754

080082ec <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
 80082ec:	b580      	push	{r7, lr}
 80082ee:	b082      	sub	sp, #8
 80082f0:	af00      	add	r7, sp, #0
 80082f2:	6078      	str	r0, [r7, #4]
    fillInputBuffer();
 80082f4:	6878      	ldr	r0, [r7, #4]
 80082f6:	f018 fc31 	bl	8020b5c <_ZN8touchgfx12TextProvider15fillInputBufferEv>
}
 80082fa:	bf00      	nop
 80082fc:	3708      	adds	r7, #8
 80082fe:	46bd      	mov	sp, r7
 8008300:	bd80      	pop	{r7, pc}

08008302 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>:

void touchgfx::LCD::drawString(touchgfx::Rect widgetArea, const touchgfx::Rect& invalidatedArea, const touchgfx::LCD::StringVisuals& stringVisuals, const touchgfx::Unicode::UnicodeChar* format, ...)
{
 8008302:	b580      	push	{r7, lr}
 8008304:	b088      	sub	sp, #32
 8008306:	af02      	add	r7, sp, #8
 8008308:	60f8      	str	r0, [r7, #12]
 800830a:	1d38      	adds	r0, r7, #4
 800830c:	e880 0006 	stmia.w	r0, {r1, r2}
 8008310:	603b      	str	r3, [r7, #0]
    va_list pArg;
    va_start(pArg, format);
 8008312:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008316:	617b      	str	r3, [r7, #20]
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
 8008318:	1d39      	adds	r1, r7, #4
 800831a:	697b      	ldr	r3, [r7, #20]
 800831c:	9301      	str	r3, [sp, #4]
 800831e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008320:	9300      	str	r3, [sp, #0]
 8008322:	6a3b      	ldr	r3, [r7, #32]
 8008324:	683a      	ldr	r2, [r7, #0]
 8008326:	68f8      	ldr	r0, [r7, #12]
 8008328:	f015 fe98 	bl	801e05c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>
    va_end(pArg);
}
 800832c:	bf00      	nop
 800832e:	3718      	adds	r7, #24
 8008330:	46bd      	mov	sp, r7
 8008332:	bd80      	pop	{r7, pc}

08008334 <_ZN8touchgfx5Texts11setLanguageEt>:
touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
 8008334:	b590      	push	{r4, r7, lr}
 8008336:	b085      	sub	sp, #20
 8008338:	af00      	add	r7, sp, #0
 800833a:	4603      	mov	r3, r0
 800833c:	80fb      	strh	r3, [r7, #6]
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
 800833e:	2300      	movs	r3, #0
 8008340:	60fb      	str	r3, [r7, #12]
    if (id < 1)
 8008342:	88fb      	ldrh	r3, [r7, #6]
 8008344:	2b00      	cmp	r3, #0
 8008346:	d127      	bne.n	8008398 <_ZN8touchgfx5Texts11setLanguageEt+0x64>
    {
        if (languagesArray[id] != 0)
 8008348:	88fb      	ldrh	r3, [r7, #6]
 800834a:	4a1e      	ldr	r2, [pc, #120]	; (80083c4 <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 800834c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008350:	2b00      	cmp	r3, #0
 8008352:	d016      	beq.n	8008382 <_ZN8touchgfx5Texts11setLanguageEt+0x4e>
        {
            // Dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
 8008354:	88fb      	ldrh	r3, [r7, #6]
 8008356:	4a1b      	ldr	r2, [pc, #108]	; (80083c4 <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 8008358:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800835c:	60bb      	str	r3, [r7, #8]
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 800835e:	68bb      	ldr	r3, [r7, #8]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	68ba      	ldr	r2, [r7, #8]
 8008364:	4413      	add	r3, r2
 8008366:	4a18      	ldr	r2, [pc, #96]	; (80083c8 <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 8008368:	6013      	str	r3, [r2, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 800836a:	68bb      	ldr	r3, [r7, #8]
 800836c:	685b      	ldr	r3, [r3, #4]
 800836e:	68ba      	ldr	r2, [r7, #8]
 8008370:	4413      	add	r3, r2
 8008372:	4a16      	ldr	r2, [pc, #88]	; (80083cc <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 8008374:	6013      	str	r3, [r2, #0]
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 8008376:	68bb      	ldr	r3, [r7, #8]
 8008378:	689b      	ldr	r3, [r3, #8]
 800837a:	68ba      	ldr	r2, [r7, #8]
 800837c:	4413      	add	r3, r2
 800837e:	60fb      	str	r3, [r7, #12]
 8008380:	e00a      	b.n	8008398 <_ZN8touchgfx5Texts11setLanguageEt+0x64>
        }
        else
        {
            // Compiled and linked in languages
            currentLanguagePtr = texts_all_languages;
 8008382:	4b11      	ldr	r3, [pc, #68]	; (80083c8 <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 8008384:	4a12      	ldr	r2, [pc, #72]	; (80083d0 <_ZN8touchgfx5Texts11setLanguageEt+0x9c>)
 8008386:	601a      	str	r2, [r3, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 8008388:	4a12      	ldr	r2, [pc, #72]	; (80083d4 <_ZN8touchgfx5Texts11setLanguageEt+0xa0>)
 800838a:	4b10      	ldr	r3, [pc, #64]	; (80083cc <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 800838c:	601a      	str	r2, [r3, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 800838e:	88fb      	ldrh	r3, [r7, #6]
 8008390:	4a11      	ldr	r2, [pc, #68]	; (80083d8 <_ZN8touchgfx5Texts11setLanguageEt+0xa4>)
 8008392:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008396:	60fb      	str	r3, [r7, #12]
        }
    }

    if (currentLanguageTypedText)
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	2b00      	cmp	r3, #0
 800839c:	d00d      	beq.n	80083ba <_ZN8touchgfx5Texts11setLanguageEt+0x86>
    {
        currentLanguage = id;
 800839e:	4a0f      	ldr	r2, [pc, #60]	; (80083dc <_ZN8touchgfx5Texts11setLanguageEt+0xa8>)
 80083a0:	88fb      	ldrh	r3, [r7, #6]
 80083a2:	8013      	strh	r3, [r2, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 80083a4:	f000 f83e 	bl	8008424 <_ZN17TypedTextDatabase8getFontsEv>
 80083a8:	4604      	mov	r4, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 80083aa:	f000 f833 	bl	8008414 <_ZN17TypedTextDatabase15getInstanceSizeEv>
 80083ae:	4603      	mov	r3, r0
 80083b0:	461a      	mov	r2, r3
 80083b2:	4621      	mov	r1, r4
 80083b4:	68f8      	ldr	r0, [r7, #12]
 80083b6:	f7ff fea5 	bl	8008104 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>
    }
}
 80083ba:	bf00      	nop
 80083bc:	3714      	adds	r7, #20
 80083be:	46bd      	mov	sp, r7
 80083c0:	bd90      	pop	{r4, r7, pc}
 80083c2:	bf00      	nop
 80083c4:	2400312c 	.word	0x2400312c
 80083c8:	24003134 	.word	0x24003134
 80083cc:	24003138 	.word	0x24003138
 80083d0:	900003fc 	.word	0x900003fc
 80083d4:	900003ec 	.word	0x900003ec
 80083d8:	90000428 	.word	0x90000428
 80083dc:	24003130 	.word	0x24003130

080083e0 <_ZNK8touchgfx5Texts7getTextEt>:
{
    languagesArray[id] = (const TranslationHeader*)translation;
}

const touchgfx::Unicode::UnicodeChar* touchgfx::Texts::getText(TypedTextId id) const
{
 80083e0:	b480      	push	{r7}
 80083e2:	b083      	sub	sp, #12
 80083e4:	af00      	add	r7, sp, #0
 80083e6:	6078      	str	r0, [r7, #4]
 80083e8:	460b      	mov	r3, r1
 80083ea:	807b      	strh	r3, [r7, #2]
    return &currentLanguagePtr[currentLanguageIndices[id]];
 80083ec:	4b07      	ldr	r3, [pc, #28]	; (800840c <_ZNK8touchgfx5Texts7getTextEt+0x2c>)
 80083ee:	681a      	ldr	r2, [r3, #0]
 80083f0:	4b07      	ldr	r3, [pc, #28]	; (8008410 <_ZNK8touchgfx5Texts7getTextEt+0x30>)
 80083f2:	6819      	ldr	r1, [r3, #0]
 80083f4:	887b      	ldrh	r3, [r7, #2]
 80083f6:	009b      	lsls	r3, r3, #2
 80083f8:	440b      	add	r3, r1
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	005b      	lsls	r3, r3, #1
 80083fe:	4413      	add	r3, r2
}
 8008400:	4618      	mov	r0, r3
 8008402:	370c      	adds	r7, #12
 8008404:	46bd      	mov	sp, r7
 8008406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800840a:	4770      	bx	lr
 800840c:	24003134 	.word	0x24003134
 8008410:	24003138 	.word	0x24003138

08008414 <_ZN17TypedTextDatabase15getInstanceSizeEv>:
{
    return typedTextDatabaseArray[id];
}

uint16_t getInstanceSize()
{
 8008414:	b480      	push	{r7}
 8008416:	af00      	add	r7, sp, #0
    return sizeof(typedText_database_DEFAULT) / sizeof(touchgfx::TypedText::TypedTextData);
 8008418:	2304      	movs	r3, #4
}
 800841a:	4618      	mov	r0, r3
 800841c:	46bd      	mov	sp, r7
 800841e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008422:	4770      	bx	lr

08008424 <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
 8008424:	b480      	push	{r7}
 8008426:	af00      	add	r7, sp, #0
    return touchgfx_fonts;
 8008428:	4b02      	ldr	r3, [pc, #8]	; (8008434 <_ZN17TypedTextDatabase8getFontsEv+0x10>)
}
 800842a:	4618      	mov	r0, r3
 800842c:	46bd      	mov	sp, r7
 800842e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008432:	4770      	bx	lr
 8008434:	2400313c 	.word	0x2400313c

08008438 <_Z41__static_initialization_and_destruction_0ii>:
    case 2:
        touchgfx_fonts[2] = &(getFont_verdana_10_4bpp());
        break;
    }
}
} // namespace TypedTextDatabase
 8008438:	b580      	push	{r7, lr}
 800843a:	b082      	sub	sp, #8
 800843c:	af00      	add	r7, sp, #0
 800843e:	6078      	str	r0, [r7, #4]
 8008440:	6039      	str	r1, [r7, #0]
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	2b01      	cmp	r3, #1
 8008446:	d113      	bne.n	8008470 <_Z41__static_initialization_and_destruction_0ii+0x38>
 8008448:	683b      	ldr	r3, [r7, #0]
 800844a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800844e:	4293      	cmp	r3, r2
 8008450:	d10e      	bne.n	8008470 <_Z41__static_initialization_and_destruction_0ii+0x38>
    &(getFont_verdana_20_4bpp()),
 8008452:	f7ff fd8f 	bl	8007f74 <_Z23getFont_verdana_20_4bppv>
 8008456:	4603      	mov	r3, r0
};
 8008458:	4a07      	ldr	r2, [pc, #28]	; (8008478 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800845a:	6013      	str	r3, [r2, #0]
    &(getFont_verdana_40_4bpp()),
 800845c:	f7ff fde0 	bl	8008020 <_Z23getFont_verdana_40_4bppv>
 8008460:	4603      	mov	r3, r0
};
 8008462:	4a05      	ldr	r2, [pc, #20]	; (8008478 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8008464:	6053      	str	r3, [r2, #4]
    &(getFont_verdana_10_4bpp())
 8008466:	f7ff fd2f 	bl	8007ec8 <_Z23getFont_verdana_10_4bppv>
 800846a:	4603      	mov	r3, r0
};
 800846c:	4a02      	ldr	r2, [pc, #8]	; (8008478 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800846e:	6093      	str	r3, [r2, #8]
} // namespace TypedTextDatabase
 8008470:	bf00      	nop
 8008472:	3708      	adds	r7, #8
 8008474:	46bd      	mov	sp, r7
 8008476:	bd80      	pop	{r7, pc}
 8008478:	2400313c 	.word	0x2400313c

0800847c <_GLOBAL__sub_I_touchgfx_fonts>:
 800847c:	b580      	push	{r7, lr}
 800847e:	af00      	add	r7, sp, #0
 8008480:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8008484:	2001      	movs	r0, #1
 8008486:	f7ff ffd7 	bl	8008438 <_Z41__static_initialization_and_destruction_0ii>
 800848a:	bd80      	pop	{r7, pc}

0800848c <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 800848c:	b580      	push	{r7, lr}
 800848e:	b084      	sub	sp, #16
 8008490:	af00      	add	r7, sp, #0
 8008492:	60f8      	str	r0, [r7, #12]
 8008494:	60b9      	str	r1, [r7, #8]
 8008496:	607a      	str	r2, [r7, #4]
    : FrontendApplicationBase(m, heap)
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	687a      	ldr	r2, [r7, #4]
 800849c:	68b9      	ldr	r1, [r7, #8]
 800849e:	4618      	mov	r0, r3
 80084a0:	f7fc f904 	bl	80046ac <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 80084a4:	4a03      	ldr	r2, [pc, #12]	; (80084b4 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x28>)
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	601a      	str	r2, [r3, #0]
{

}
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	4618      	mov	r0, r3
 80084ae:	3710      	adds	r7, #16
 80084b0:	46bd      	mov	sp, r7
 80084b2:	bd80      	pop	{r7, pc}
 80084b4:	0802daa0 	.word	0x0802daa0

080084b8 <_ZN5ModelC1Ev>:
#include <gui/model/ModelListener.hpp>
#include "stm32h7xx_hal.h"

extern __IO uint16_t uhADCxConvertedData;

Model::Model() : modelListener(0)
 80084b8:	b480      	push	{r7}
 80084ba:	b083      	sub	sp, #12
 80084bc:	af00      	add	r7, sp, #0
 80084be:	6078      	str	r0, [r7, #4]
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	2200      	movs	r2, #0
 80084c4:	601a      	str	r2, [r3, #0]
{

}
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	4618      	mov	r0, r3
 80084ca:	370c      	adds	r7, #12
 80084cc:	46bd      	mov	sp, r7
 80084ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d2:	4770      	bx	lr

080084d4 <_ZN5Model4tickEv>:

void Model::tick()
{
 80084d4:	b580      	push	{r7, lr}
 80084d6:	b082      	sub	sp, #8
 80084d8:	af00      	add	r7, sp, #0
 80084da:	6078      	str	r0, [r7, #4]
	modelListener->UpdateGraph(uhADCxConvertedData * 3300 / 65535);
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	6818      	ldr	r0, [r3, #0]
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	3308      	adds	r3, #8
 80084e8:	681a      	ldr	r2, [r3, #0]
 80084ea:	4b0b      	ldr	r3, [pc, #44]	; (8008518 <_ZN5Model4tickEv+0x44>)
 80084ec:	881b      	ldrh	r3, [r3, #0]
 80084ee:	b29b      	uxth	r3, r3
 80084f0:	4619      	mov	r1, r3
 80084f2:	f640 43e4 	movw	r3, #3300	; 0xce4
 80084f6:	fb03 f301 	mul.w	r3, r3, r1
 80084fa:	4908      	ldr	r1, [pc, #32]	; (800851c <_ZN5Model4tickEv+0x48>)
 80084fc:	fb81 c103 	smull	ip, r1, r1, r3
 8008500:	4419      	add	r1, r3
 8008502:	13c9      	asrs	r1, r1, #15
 8008504:	17db      	asrs	r3, r3, #31
 8008506:	1acb      	subs	r3, r1, r3
 8008508:	b29b      	uxth	r3, r3
 800850a:	4619      	mov	r1, r3
 800850c:	4790      	blx	r2
}
 800850e:	bf00      	nop
 8008510:	3708      	adds	r7, #8
 8008512:	46bd      	mov	sp, r7
 8008514:	bd80      	pop	{r7, pc}
 8008516:	bf00      	nop
 8008518:	2400cd9c 	.word	0x2400cd9c
 800851c:	80008001 	.word	0x80008001

08008520 <_ZN8touchgfx9Presenter8activateEv>:
     * Place initialization code for the Presenter here.
     *
     * The activate function is called automatically when a screen transition causes this
     * Presenter to become active. Place initialization code for the Presenter here.
     */
    virtual void activate()
 8008520:	b480      	push	{r7}
 8008522:	b083      	sub	sp, #12
 8008524:	af00      	add	r7, sp, #0
 8008526:	6078      	str	r0, [r7, #4]
    {
    }
 8008528:	bf00      	nop
 800852a:	370c      	adds	r7, #12
 800852c:	46bd      	mov	sp, r7
 800852e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008532:	4770      	bx	lr

08008534 <_ZN8touchgfx9Presenter10deactivateEv>:
     * Place cleanup code for the Presenter here.
     *
     * The deactivate function is called automatically when a screen transition causes this
     * Presenter to become inactive. Place cleanup code for the Presenter here.
     */
    virtual void deactivate()
 8008534:	b480      	push	{r7}
 8008536:	b083      	sub	sp, #12
 8008538:	af00      	add	r7, sp, #0
 800853a:	6078      	str	r0, [r7, #4]
    {
    }
 800853c:	bf00      	nop
 800853e:	370c      	adds	r7, #12
 8008540:	46bd      	mov	sp, r7
 8008542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008546:	4770      	bx	lr

08008548 <_ZN8touchgfx9PresenterD1Ev>:

    /** Finalizes an instance of the Presenter class. */
    virtual ~Presenter()
 8008548:	b480      	push	{r7}
 800854a:	b083      	sub	sp, #12
 800854c:	af00      	add	r7, sp, #0
 800854e:	6078      	str	r0, [r7, #4]
    {
 8008550:	4a04      	ldr	r2, [pc, #16]	; (8008564 <_ZN8touchgfx9PresenterD1Ev+0x1c>)
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	601a      	str	r2, [r3, #0]
    }
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	4618      	mov	r0, r3
 800855a:	370c      	adds	r7, #12
 800855c:	46bd      	mov	sp, r7
 800855e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008562:	4770      	bx	lr
 8008564:	0802e29c 	.word	0x0802e29c

08008568 <_ZN8touchgfx9PresenterD0Ev>:
    virtual ~Presenter()
 8008568:	b580      	push	{r7, lr}
 800856a:	b082      	sub	sp, #8
 800856c:	af00      	add	r7, sp, #0
 800856e:	6078      	str	r0, [r7, #4]
    }
 8008570:	6878      	ldr	r0, [r7, #4]
 8008572:	f7ff ffe9 	bl	8008548 <_ZN8touchgfx9PresenterD1Ev>
 8008576:	2104      	movs	r1, #4
 8008578:	6878      	ldr	r0, [r7, #4]
 800857a:	f022 ffa8 	bl	802b4ce <_ZdlPvj>
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	4618      	mov	r0, r3
 8008582:	3708      	adds	r7, #8
 8008584:	46bd      	mov	sp, r7
 8008586:	bd80      	pop	{r7, pc}

08008588 <_ZN8touchgfx9PresenterC1Ev>:

protected:
    /** Initializes a new instance of the Presenter class. */
    Presenter()
 8008588:	b480      	push	{r7}
 800858a:	b083      	sub	sp, #12
 800858c:	af00      	add	r7, sp, #0
 800858e:	6078      	str	r0, [r7, #4]
    {
 8008590:	4a04      	ldr	r2, [pc, #16]	; (80085a4 <_ZN8touchgfx9PresenterC1Ev+0x1c>)
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	601a      	str	r2, [r3, #0]
    }
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	4618      	mov	r0, r3
 800859a:	370c      	adds	r7, #12
 800859c:	46bd      	mov	sp, r7
 800859e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a2:	4770      	bx	lr
 80085a4:	0802e29c 	.word	0x0802e29c

080085a8 <_ZN13ModelListenerC1Ev>:
    ModelListener() : model(0) {}
 80085a8:	b480      	push	{r7}
 80085aa:	b083      	sub	sp, #12
 80085ac:	af00      	add	r7, sp, #0
 80085ae:	6078      	str	r0, [r7, #4]
 80085b0:	4a06      	ldr	r2, [pc, #24]	; (80085cc <_ZN13ModelListenerC1Ev+0x24>)
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	601a      	str	r2, [r3, #0]
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	2200      	movs	r2, #0
 80085ba:	605a      	str	r2, [r3, #4]
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	4618      	mov	r0, r3
 80085c0:	370c      	adds	r7, #12
 80085c2:	46bd      	mov	sp, r7
 80085c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c8:	4770      	bx	lr
 80085ca:	bf00      	nop
 80085cc:	0802e288 	.word	0x0802e288

080085d0 <_ZN13ModelListenerD1Ev>:
    virtual ~ModelListener() {}
 80085d0:	b480      	push	{r7}
 80085d2:	b083      	sub	sp, #12
 80085d4:	af00      	add	r7, sp, #0
 80085d6:	6078      	str	r0, [r7, #4]
 80085d8:	4a04      	ldr	r2, [pc, #16]	; (80085ec <_ZN13ModelListenerD1Ev+0x1c>)
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	601a      	str	r2, [r3, #0]
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	4618      	mov	r0, r3
 80085e2:	370c      	adds	r7, #12
 80085e4:	46bd      	mov	sp, r7
 80085e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ea:	4770      	bx	lr
 80085ec:	0802e288 	.word	0x0802e288

080085f0 <_ZN13ModelListenerD0Ev>:
 80085f0:	b580      	push	{r7, lr}
 80085f2:	b082      	sub	sp, #8
 80085f4:	af00      	add	r7, sp, #0
 80085f6:	6078      	str	r0, [r7, #4]
 80085f8:	6878      	ldr	r0, [r7, #4]
 80085fa:	f7ff ffe9 	bl	80085d0 <_ZN13ModelListenerD1Ev>
 80085fe:	2108      	movs	r1, #8
 8008600:	6878      	ldr	r0, [r7, #4]
 8008602:	f022 ff64 	bl	802b4ce <_ZdlPvj>
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	4618      	mov	r0, r3
 800860a:	3708      	adds	r7, #8
 800860c:	46bd      	mov	sp, r7
 800860e:	bd80      	pop	{r7, pc}

08008610 <_ZN13ModelListener11UpdateGraphEt>:
    virtual void UpdateGraph(uint16_t value){}
 8008610:	b480      	push	{r7}
 8008612:	b083      	sub	sp, #12
 8008614:	af00      	add	r7, sp, #0
 8008616:	6078      	str	r0, [r7, #4]
 8008618:	460b      	mov	r3, r1
 800861a:	807b      	strh	r3, [r7, #2]
 800861c:	bf00      	nop
 800861e:	370c      	adds	r7, #12
 8008620:	46bd      	mov	sp, r7
 8008622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008626:	4770      	bx	lr

08008628 <_ZN16Screen1PresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~Screen1Presenter() {};
 8008628:	b580      	push	{r7, lr}
 800862a:	b082      	sub	sp, #8
 800862c:	af00      	add	r7, sp, #0
 800862e:	6078      	str	r0, [r7, #4]
 8008630:	4a09      	ldr	r2, [pc, #36]	; (8008658 <_ZN16Screen1PresenterD1Ev+0x30>)
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	601a      	str	r2, [r3, #0]
 8008636:	4a09      	ldr	r2, [pc, #36]	; (800865c <_ZN16Screen1PresenterD1Ev+0x34>)
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	605a      	str	r2, [r3, #4]
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	3304      	adds	r3, #4
 8008640:	4618      	mov	r0, r3
 8008642:	f7ff ffc5 	bl	80085d0 <_ZN13ModelListenerD1Ev>
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	4618      	mov	r0, r3
 800864a:	f7ff ff7d 	bl	8008548 <_ZN8touchgfx9PresenterD1Ev>
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	4618      	mov	r0, r3
 8008652:	3708      	adds	r7, #8
 8008654:	46bd      	mov	sp, r7
 8008656:	bd80      	pop	{r7, pc}
 8008658:	0802e258 	.word	0x0802e258
 800865c:	0802e274 	.word	0x0802e274

08008660 <_ZThn4_N16Screen1PresenterD1Ev>:
 8008660:	f1a0 0004 	sub.w	r0, r0, #4
 8008664:	e7e0      	b.n	8008628 <_ZN16Screen1PresenterD1Ev>
 8008666:	bf00      	nop

08008668 <_ZN16Screen1PresenterD0Ev>:
 8008668:	b580      	push	{r7, lr}
 800866a:	b082      	sub	sp, #8
 800866c:	af00      	add	r7, sp, #0
 800866e:	6078      	str	r0, [r7, #4]
 8008670:	6878      	ldr	r0, [r7, #4]
 8008672:	f7ff ffd9 	bl	8008628 <_ZN16Screen1PresenterD1Ev>
 8008676:	2110      	movs	r1, #16
 8008678:	6878      	ldr	r0, [r7, #4]
 800867a:	f022 ff28 	bl	802b4ce <_ZdlPvj>
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	4618      	mov	r0, r3
 8008682:	3708      	adds	r7, #8
 8008684:	46bd      	mov	sp, r7
 8008686:	bd80      	pop	{r7, pc}

08008688 <_ZThn4_N16Screen1PresenterD0Ev>:
 8008688:	f1a0 0004 	sub.w	r0, r0, #4
 800868c:	e7ec      	b.n	8008668 <_ZN16Screen1PresenterD0Ev>
	...

08008690 <_ZN16Screen1PresenterC1ER11Screen1View>:
#include <gui/screen1_screen/Screen1View.hpp>
#include <gui/screen1_screen/Screen1Presenter.hpp>

Screen1Presenter::Screen1Presenter(Screen1View& v)
 8008690:	b580      	push	{r7, lr}
 8008692:	b082      	sub	sp, #8
 8008694:	af00      	add	r7, sp, #0
 8008696:	6078      	str	r0, [r7, #4]
 8008698:	6039      	str	r1, [r7, #0]
    : view(v)
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	4618      	mov	r0, r3
 800869e:	f7ff ff73 	bl	8008588 <_ZN8touchgfx9PresenterC1Ev>
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	3304      	adds	r3, #4
 80086a6:	4618      	mov	r0, r3
 80086a8:	f7ff ff7e 	bl	80085a8 <_ZN13ModelListenerC1Ev>
 80086ac:	4a06      	ldr	r2, [pc, #24]	; (80086c8 <_ZN16Screen1PresenterC1ER11Screen1View+0x38>)
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	601a      	str	r2, [r3, #0]
 80086b2:	4a06      	ldr	r2, [pc, #24]	; (80086cc <_ZN16Screen1PresenterC1ER11Screen1View+0x3c>)
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	605a      	str	r2, [r3, #4]
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	683a      	ldr	r2, [r7, #0]
 80086bc:	60da      	str	r2, [r3, #12]
{

}
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	4618      	mov	r0, r3
 80086c2:	3708      	adds	r7, #8
 80086c4:	46bd      	mov	sp, r7
 80086c6:	bd80      	pop	{r7, pc}
 80086c8:	0802e258 	.word	0x0802e258
 80086cc:	0802e274 	.word	0x0802e274

080086d0 <_ZN16Screen1Presenter8activateEv>:

void Screen1Presenter::activate()
{
 80086d0:	b480      	push	{r7}
 80086d2:	b083      	sub	sp, #12
 80086d4:	af00      	add	r7, sp, #0
 80086d6:	6078      	str	r0, [r7, #4]

}
 80086d8:	bf00      	nop
 80086da:	370c      	adds	r7, #12
 80086dc:	46bd      	mov	sp, r7
 80086de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e2:	4770      	bx	lr

080086e4 <_ZN16Screen1Presenter10deactivateEv>:

void Screen1Presenter::deactivate()
{
 80086e4:	b480      	push	{r7}
 80086e6:	b083      	sub	sp, #12
 80086e8:	af00      	add	r7, sp, #0
 80086ea:	6078      	str	r0, [r7, #4]

}
 80086ec:	bf00      	nop
 80086ee:	370c      	adds	r7, #12
 80086f0:	46bd      	mov	sp, r7
 80086f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f6:	4770      	bx	lr

080086f8 <_ZN16Screen1Presenter11UpdateGraphEt>:
void Screen1Presenter::UpdateGraph(uint16_t value)
{
 80086f8:	b580      	push	{r7, lr}
 80086fa:	b082      	sub	sp, #8
 80086fc:	af00      	add	r7, sp, #0
 80086fe:	6078      	str	r0, [r7, #4]
 8008700:	460b      	mov	r3, r1
 8008702:	807b      	strh	r3, [r7, #2]
	view.UpdateGraph(value);
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	68db      	ldr	r3, [r3, #12]
 8008708:	887a      	ldrh	r2, [r7, #2]
 800870a:	4611      	mov	r1, r2
 800870c:	4618      	mov	r0, r3
 800870e:	f000 f857 	bl	80087c0 <_ZN11Screen1View11UpdateGraphEt>
}
 8008712:	bf00      	nop
 8008714:	3708      	adds	r7, #8
 8008716:	46bd      	mov	sp, r7
 8008718:	bd80      	pop	{r7, pc}

0800871a <_ZThn4_N16Screen1Presenter11UpdateGraphEt>:
    void UpdateGraph(uint16_t value);
 800871a:	f1a0 0004 	sub.w	r0, r0, #4
 800871e:	f7ff bfeb 	b.w	80086f8 <_ZN16Screen1Presenter11UpdateGraphEt>
	...

08008724 <_ZN11Screen1ViewD1Ev>:

class Screen1View : public Screen1ViewBase
{
public:
    Screen1View();
    virtual ~Screen1View() {}
 8008724:	b580      	push	{r7, lr}
 8008726:	b082      	sub	sp, #8
 8008728:	af00      	add	r7, sp, #0
 800872a:	6078      	str	r0, [r7, #4]
 800872c:	4a05      	ldr	r2, [pc, #20]	; (8008744 <_ZN11Screen1ViewD1Ev+0x20>)
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	601a      	str	r2, [r3, #0]
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	4618      	mov	r0, r3
 8008736:	f7fd ff27 	bl	8006588 <_ZN15Screen1ViewBaseD1Ev>
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	4618      	mov	r0, r3
 800873e:	3708      	adds	r7, #8
 8008740:	46bd      	mov	sp, r7
 8008742:	bd80      	pop	{r7, pc}
 8008744:	0802e2b4 	.word	0x0802e2b4

08008748 <_ZN11Screen1ViewD0Ev>:
 8008748:	b580      	push	{r7, lr}
 800874a:	b082      	sub	sp, #8
 800874c:	af00      	add	r7, sp, #0
 800874e:	6078      	str	r0, [r7, #4]
 8008750:	6878      	ldr	r0, [r7, #4]
 8008752:	f7ff ffe7 	bl	8008724 <_ZN11Screen1ViewD1Ev>
 8008756:	f44f 5102 	mov.w	r1, #8320	; 0x2080
 800875a:	6878      	ldr	r0, [r7, #4]
 800875c:	f022 feb7 	bl	802b4ce <_ZdlPvj>
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	4618      	mov	r0, r3
 8008764:	3708      	adds	r7, #8
 8008766:	46bd      	mov	sp, r7
 8008768:	bd80      	pop	{r7, pc}
	...

0800876c <_ZN11Screen1ViewC1Ev>:
#include <gui/screen1_screen/Screen1View.hpp>

Screen1View::Screen1View()
 800876c:	b580      	push	{r7, lr}
 800876e:	b082      	sub	sp, #8
 8008770:	af00      	add	r7, sp, #0
 8008772:	6078      	str	r0, [r7, #4]
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	4618      	mov	r0, r3
 8008778:	f7fd ff60 	bl	800663c <_ZN15Screen1ViewBaseC1Ev>
 800877c:	4a03      	ldr	r2, [pc, #12]	; (800878c <_ZN11Screen1ViewC1Ev+0x20>)
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	601a      	str	r2, [r3, #0]
{

}
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	4618      	mov	r0, r3
 8008786:	3708      	adds	r7, #8
 8008788:	46bd      	mov	sp, r7
 800878a:	bd80      	pop	{r7, pc}
 800878c:	0802e2b4 	.word	0x0802e2b4

08008790 <_ZN11Screen1View11setupScreenEv>:

void Screen1View::setupScreen()
{
 8008790:	b580      	push	{r7, lr}
 8008792:	b082      	sub	sp, #8
 8008794:	af00      	add	r7, sp, #0
 8008796:	6078      	str	r0, [r7, #4]
    Screen1ViewBase::setupScreen();
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	4618      	mov	r0, r3
 800879c:	f7fe fd38 	bl	8007210 <_ZN15Screen1ViewBase11setupScreenEv>
}
 80087a0:	bf00      	nop
 80087a2:	3708      	adds	r7, #8
 80087a4:	46bd      	mov	sp, r7
 80087a6:	bd80      	pop	{r7, pc}

080087a8 <_ZN11Screen1View14tearDownScreenEv>:

void Screen1View::tearDownScreen()
{
 80087a8:	b580      	push	{r7, lr}
 80087aa:	b082      	sub	sp, #8
 80087ac:	af00      	add	r7, sp, #0
 80087ae:	6078      	str	r0, [r7, #4]
    Screen1ViewBase::tearDownScreen();
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	4618      	mov	r0, r3
 80087b4:	f7fd fb1e 	bl	8005df4 <_ZN8touchgfx6Screen14tearDownScreenEv>
}
 80087b8:	bf00      	nop
 80087ba:	3708      	adds	r7, #8
 80087bc:	46bd      	mov	sp, r7
 80087be:	bd80      	pop	{r7, pc}

080087c0 <_ZN11Screen1View11UpdateGraphEt>:
void Screen1View::UpdateGraph(uint16_t value)
{
 80087c0:	b580      	push	{r7, lr}
 80087c2:	b082      	sub	sp, #8
 80087c4:	af00      	add	r7, sp, #0
 80087c6:	6078      	str	r0, [r7, #4]
 80087c8:	460b      	mov	r3, r1
 80087ca:	807b      	strh	r3, [r7, #2]
	dynamicGraph1.addDataPoint(value);
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	33e4      	adds	r3, #228	; 0xe4
 80087d0:	887a      	ldrh	r2, [r7, #2]
 80087d2:	4611      	mov	r1, r2
 80087d4:	4618      	mov	r0, r3
 80087d6:	f012 f9f1 	bl	801abbc <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEi>
}
 80087da:	bf00      	nop
 80087dc:	3708      	adds	r7, #8
 80087de:	46bd      	mov	sp, r7
 80087e0:	bd80      	pop	{r7, pc}
	...

080087e4 <_ZN16Screen2PresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~Screen2Presenter() {};
 80087e4:	b580      	push	{r7, lr}
 80087e6:	b082      	sub	sp, #8
 80087e8:	af00      	add	r7, sp, #0
 80087ea:	6078      	str	r0, [r7, #4]
 80087ec:	4a09      	ldr	r2, [pc, #36]	; (8008814 <_ZN16Screen2PresenterD1Ev+0x30>)
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	601a      	str	r2, [r3, #0]
 80087f2:	4a09      	ldr	r2, [pc, #36]	; (8008818 <_ZN16Screen2PresenterD1Ev+0x34>)
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	605a      	str	r2, [r3, #4]
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	3304      	adds	r3, #4
 80087fc:	4618      	mov	r0, r3
 80087fe:	f7ff fee7 	bl	80085d0 <_ZN13ModelListenerD1Ev>
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	4618      	mov	r0, r3
 8008806:	f7ff fe9f 	bl	8008548 <_ZN8touchgfx9PresenterD1Ev>
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	4618      	mov	r0, r3
 800880e:	3708      	adds	r7, #8
 8008810:	46bd      	mov	sp, r7
 8008812:	bd80      	pop	{r7, pc}
 8008814:	0802e2e8 	.word	0x0802e2e8
 8008818:	0802e300 	.word	0x0802e300

0800881c <_ZThn4_N16Screen2PresenterD1Ev>:
 800881c:	f1a0 0004 	sub.w	r0, r0, #4
 8008820:	e7e0      	b.n	80087e4 <_ZN16Screen2PresenterD1Ev>
 8008822:	bf00      	nop

08008824 <_ZN16Screen2PresenterD0Ev>:
 8008824:	b580      	push	{r7, lr}
 8008826:	b082      	sub	sp, #8
 8008828:	af00      	add	r7, sp, #0
 800882a:	6078      	str	r0, [r7, #4]
 800882c:	6878      	ldr	r0, [r7, #4]
 800882e:	f7ff ffd9 	bl	80087e4 <_ZN16Screen2PresenterD1Ev>
 8008832:	2110      	movs	r1, #16
 8008834:	6878      	ldr	r0, [r7, #4]
 8008836:	f022 fe4a 	bl	802b4ce <_ZdlPvj>
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	4618      	mov	r0, r3
 800883e:	3708      	adds	r7, #8
 8008840:	46bd      	mov	sp, r7
 8008842:	bd80      	pop	{r7, pc}

08008844 <_ZThn4_N16Screen2PresenterD0Ev>:
 8008844:	f1a0 0004 	sub.w	r0, r0, #4
 8008848:	e7ec      	b.n	8008824 <_ZN16Screen2PresenterD0Ev>
	...

0800884c <_ZN16Screen2PresenterC1ER11Screen2View>:
#include <gui/screen2_screen/Screen2View.hpp>
#include <gui/screen2_screen/Screen2Presenter.hpp>

Screen2Presenter::Screen2Presenter(Screen2View& v)
 800884c:	b580      	push	{r7, lr}
 800884e:	b082      	sub	sp, #8
 8008850:	af00      	add	r7, sp, #0
 8008852:	6078      	str	r0, [r7, #4]
 8008854:	6039      	str	r1, [r7, #0]
    : view(v)
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	4618      	mov	r0, r3
 800885a:	f7ff fe95 	bl	8008588 <_ZN8touchgfx9PresenterC1Ev>
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	3304      	adds	r3, #4
 8008862:	4618      	mov	r0, r3
 8008864:	f7ff fea0 	bl	80085a8 <_ZN13ModelListenerC1Ev>
 8008868:	4a06      	ldr	r2, [pc, #24]	; (8008884 <_ZN16Screen2PresenterC1ER11Screen2View+0x38>)
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	601a      	str	r2, [r3, #0]
 800886e:	4a06      	ldr	r2, [pc, #24]	; (8008888 <_ZN16Screen2PresenterC1ER11Screen2View+0x3c>)
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	605a      	str	r2, [r3, #4]
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	683a      	ldr	r2, [r7, #0]
 8008878:	60da      	str	r2, [r3, #12]
{

}
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	4618      	mov	r0, r3
 800887e:	3708      	adds	r7, #8
 8008880:	46bd      	mov	sp, r7
 8008882:	bd80      	pop	{r7, pc}
 8008884:	0802e2e8 	.word	0x0802e2e8
 8008888:	0802e300 	.word	0x0802e300

0800888c <_ZN16Screen2Presenter8activateEv>:

void Screen2Presenter::activate()
{
 800888c:	b480      	push	{r7}
 800888e:	b083      	sub	sp, #12
 8008890:	af00      	add	r7, sp, #0
 8008892:	6078      	str	r0, [r7, #4]

}
 8008894:	bf00      	nop
 8008896:	370c      	adds	r7, #12
 8008898:	46bd      	mov	sp, r7
 800889a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800889e:	4770      	bx	lr

080088a0 <_ZN16Screen2Presenter10deactivateEv>:

void Screen2Presenter::deactivate()
{
 80088a0:	b480      	push	{r7}
 80088a2:	b083      	sub	sp, #12
 80088a4:	af00      	add	r7, sp, #0
 80088a6:	6078      	str	r0, [r7, #4]

}
 80088a8:	bf00      	nop
 80088aa:	370c      	adds	r7, #12
 80088ac:	46bd      	mov	sp, r7
 80088ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b2:	4770      	bx	lr

080088b4 <_ZN11Screen2ViewD1Ev>:

class Screen2View : public Screen2ViewBase
{
public:
    Screen2View();
    virtual ~Screen2View() {}
 80088b4:	b580      	push	{r7, lr}
 80088b6:	b082      	sub	sp, #8
 80088b8:	af00      	add	r7, sp, #0
 80088ba:	6078      	str	r0, [r7, #4]
 80088bc:	4a05      	ldr	r2, [pc, #20]	; (80088d4 <_ZN11Screen2ViewD1Ev+0x20>)
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	601a      	str	r2, [r3, #0]
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	4618      	mov	r0, r3
 80088c6:	f7fe ffcd 	bl	8007864 <_ZN15Screen2ViewBaseD1Ev>
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	4618      	mov	r0, r3
 80088ce:	3708      	adds	r7, #8
 80088d0:	46bd      	mov	sp, r7
 80088d2:	bd80      	pop	{r7, pc}
 80088d4:	0802e314 	.word	0x0802e314

080088d8 <_ZN11Screen2ViewD0Ev>:
 80088d8:	b580      	push	{r7, lr}
 80088da:	b082      	sub	sp, #8
 80088dc:	af00      	add	r7, sp, #0
 80088de:	6078      	str	r0, [r7, #4]
 80088e0:	6878      	ldr	r0, [r7, #4]
 80088e2:	f7ff ffe7 	bl	80088b4 <_ZN11Screen2ViewD1Ev>
 80088e6:	f44f 7126 	mov.w	r1, #664	; 0x298
 80088ea:	6878      	ldr	r0, [r7, #4]
 80088ec:	f022 fdef 	bl	802b4ce <_ZdlPvj>
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	4618      	mov	r0, r3
 80088f4:	3708      	adds	r7, #8
 80088f6:	46bd      	mov	sp, r7
 80088f8:	bd80      	pop	{r7, pc}
	...

080088fc <_ZN11Screen2ViewC1Ev>:
#include <gui/screen2_screen/Screen2View.hpp>

Screen2View::Screen2View()
 80088fc:	b580      	push	{r7, lr}
 80088fe:	b082      	sub	sp, #8
 8008900:	af00      	add	r7, sp, #0
 8008902:	6078      	str	r0, [r7, #4]
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	4618      	mov	r0, r3
 8008908:	f7fe fff4 	bl	80078f4 <_ZN15Screen2ViewBaseC1Ev>
 800890c:	4a03      	ldr	r2, [pc, #12]	; (800891c <_ZN11Screen2ViewC1Ev+0x20>)
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	601a      	str	r2, [r3, #0]
{

}
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	4618      	mov	r0, r3
 8008916:	3708      	adds	r7, #8
 8008918:	46bd      	mov	sp, r7
 800891a:	bd80      	pop	{r7, pc}
 800891c:	0802e314 	.word	0x0802e314

08008920 <_ZN11Screen2View11setupScreenEv>:

void Screen2View::setupScreen()
{
 8008920:	b580      	push	{r7, lr}
 8008922:	b082      	sub	sp, #8
 8008924:	af00      	add	r7, sp, #0
 8008926:	6078      	str	r0, [r7, #4]
    Screen2ViewBase::setupScreen();
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	4618      	mov	r0, r3
 800892c:	f7ff f968 	bl	8007c00 <_ZN15Screen2ViewBase11setupScreenEv>
}
 8008930:	bf00      	nop
 8008932:	3708      	adds	r7, #8
 8008934:	46bd      	mov	sp, r7
 8008936:	bd80      	pop	{r7, pc}

08008938 <_ZN11Screen2View14tearDownScreenEv>:

void Screen2View::tearDownScreen()
{
 8008938:	b580      	push	{r7, lr}
 800893a:	b082      	sub	sp, #8
 800893c:	af00      	add	r7, sp, #0
 800893e:	6078      	str	r0, [r7, #4]
    Screen2ViewBase::tearDownScreen();
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	4618      	mov	r0, r3
 8008944:	f7fd fa56 	bl	8005df4 <_ZN8touchgfx6Screen14tearDownScreenEv>
}
 8008948:	bf00      	nop
 800894a:	3708      	adds	r7, #8
 800894c:	46bd      	mov	sp, r7
 800894e:	bd80      	pop	{r7, pc}

08008950 <FT5336_RegisterBusIO>:
  * @brief  Register IO bus to component object
  * @param  Component object pointer
  * @retval error status
  */
int32_t FT5336_RegisterBusIO (FT5336_Object_t *pObj, FT5336_IO_t *pIO)
{
 8008950:	b580      	push	{r7, lr}
 8008952:	b084      	sub	sp, #16
 8008954:	af00      	add	r7, sp, #0
 8008956:	6078      	str	r0, [r7, #4]
 8008958:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	2b00      	cmp	r3, #0
 800895e:	d103      	bne.n	8008968 <FT5336_RegisterBusIO+0x18>
  {
    ret = FT5336_ERROR;
 8008960:	f04f 33ff 	mov.w	r3, #4294967295
 8008964:	60fb      	str	r3, [r7, #12]
 8008966:	e02c      	b.n	80089c2 <FT5336_RegisterBusIO+0x72>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8008968:	683b      	ldr	r3, [r7, #0]
 800896a:	681a      	ldr	r2, [r3, #0]
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8008970:	683b      	ldr	r3, [r7, #0]
 8008972:	685a      	ldr	r2, [r3, #4]
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	605a      	str	r2, [r3, #4]
    pObj->IO.Address   = pIO->Address;
 8008978:	683b      	ldr	r3, [r7, #0]
 800897a:	891a      	ldrh	r2, [r3, #8]
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	811a      	strh	r2, [r3, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8008980:	683b      	ldr	r3, [r7, #0]
 8008982:	68da      	ldr	r2, [r3, #12]
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	60da      	str	r2, [r3, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8008988:	683b      	ldr	r3, [r7, #0]
 800898a:	691a      	ldr	r2, [r3, #16]
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	611a      	str	r2, [r3, #16]
    pObj->IO.GetTick   = pIO->GetTick;
 8008990:	683b      	ldr	r3, [r7, #0]
 8008992:	695a      	ldr	r2, [r3, #20]
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	615a      	str	r2, [r3, #20]

    pObj->Ctx.ReadReg  = ReadRegWrap;
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	4a0c      	ldr	r2, [pc, #48]	; (80089cc <FT5336_RegisterBusIO+0x7c>)
 800899c:	61da      	str	r2, [r3, #28]
    pObj->Ctx.WriteReg = WriteRegWrap;
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	4a0b      	ldr	r2, [pc, #44]	; (80089d0 <FT5336_RegisterBusIO+0x80>)
 80089a2:	619a      	str	r2, [r3, #24]
    pObj->Ctx.handle   = pObj;
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	687a      	ldr	r2, [r7, #4]
 80089a8:	621a      	str	r2, [r3, #32]

    if(pObj->IO.Init != NULL)
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d004      	beq.n	80089bc <FT5336_RegisterBusIO+0x6c>
    {
      ret = pObj->IO.Init();
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	4798      	blx	r3
 80089b8:	60f8      	str	r0, [r7, #12]
 80089ba:	e002      	b.n	80089c2 <FT5336_RegisterBusIO+0x72>
    }
    else
    {
      ret = FT5336_ERROR;
 80089bc:	f04f 33ff 	mov.w	r3, #4294967295
 80089c0:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 80089c2:	68fb      	ldr	r3, [r7, #12]
}
 80089c4:	4618      	mov	r0, r3
 80089c6:	3710      	adds	r7, #16
 80089c8:	46bd      	mov	sp, r7
 80089ca:	bd80      	pop	{r7, pc}
 80089cc:	08008dd7 	.word	0x08008dd7
 80089d0:	08008e0b 	.word	0x08008e0b

080089d4 <FT5336_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to FT5336 sensor capabilities
  * @retval Component status
  */
int32_t FT5336_GetCapabilities(FT5336_Object_t *pObj, FT5336_Capabilities_t *Capabilities)
{
 80089d4:	b480      	push	{r7}
 80089d6:	b083      	sub	sp, #12
 80089d8:	af00      	add	r7, sp, #0
 80089da:	6078      	str	r0, [r7, #4]
 80089dc:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Store component's capabilities */
  Capabilities->MultiTouch = 1;
 80089de:	683b      	ldr	r3, [r7, #0]
 80089e0:	2201      	movs	r2, #1
 80089e2:	701a      	strb	r2, [r3, #0]
  Capabilities->Gesture    = 1;
 80089e4:	683b      	ldr	r3, [r7, #0]
 80089e6:	2201      	movs	r2, #1
 80089e8:	705a      	strb	r2, [r3, #1]
  Capabilities->MaxTouch   = FT5336_MAX_NB_TOUCH;
 80089ea:	683b      	ldr	r3, [r7, #0]
 80089ec:	2205      	movs	r2, #5
 80089ee:	709a      	strb	r2, [r3, #2]
  Capabilities->MaxXl      = FT5336_MAX_X_LENGTH;
 80089f0:	683b      	ldr	r3, [r7, #0]
 80089f2:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80089f6:	605a      	str	r2, [r3, #4]
  Capabilities->MaxYl      = FT5336_MAX_Y_LENGTH;
 80089f8:	683b      	ldr	r3, [r7, #0]
 80089fa:	f44f 7288 	mov.w	r2, #272	; 0x110
 80089fe:	609a      	str	r2, [r3, #8]

  return FT5336_OK;
 8008a00:	2300      	movs	r3, #0
}
 8008a02:	4618      	mov	r0, r3
 8008a04:	370c      	adds	r7, #12
 8008a06:	46bd      	mov	sp, r7
 8008a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a0c:	4770      	bx	lr

08008a0e <FT5336_Init>:
  * @param  pObj Component object pointer
  * @param  GestureInit: Gesture init structure
  * @retval FT5336_OK
  */
int32_t FT5336_Init(FT5336_Object_t *pObj)
{
 8008a0e:	b580      	push	{r7, lr}
 8008a10:	b084      	sub	sp, #16
 8008a12:	af00      	add	r7, sp, #0
 8008a14:	6078      	str	r0, [r7, #4]
  int32_t ret = FT5336_OK;
 8008a16:	2300      	movs	r3, #0
 8008a18:	60fb      	str	r3, [r7, #12]

  if(pObj->IsInitialized == 0U)
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d10d      	bne.n	8008a40 <FT5336_Init+0x32>
  {
    /* Initialize IO BUS layer */
    pObj->IO.Init();
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	4798      	blx	r3
    /* This is called internal calibration of the touch screen                 */
    ret += FT5336_TS_Calibration(pObj);
#endif /* (FT5336_AUTO_CALIBRATION_ENABLED == 1) */
    /* By default set FT5336 IC in Polling mode : no INT generation on FT5336 for new touch available */
    /* Note TS_INT is active low                                                                      */
    ret += FT5336_DisableIT(pObj);
 8008a2a:	6878      	ldr	r0, [r7, #4]
 8008a2c:	f000 f98e 	bl	8008d4c <FT5336_DisableIT>
 8008a30:	4602      	mov	r2, r0
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	4413      	add	r3, r2
 8008a36:	60fb      	str	r3, [r7, #12]

    pObj->IsInitialized = 1;
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	2201      	movs	r2, #1
 8008a3c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  if(ret != FT5336_OK)
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d002      	beq.n	8008a4c <FT5336_Init+0x3e>
  {
    ret = FT5336_ERROR;
 8008a46:	f04f 33ff 	mov.w	r3, #4294967295
 8008a4a:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8008a4c:	68fb      	ldr	r3, [r7, #12]
}
 8008a4e:	4618      	mov	r0, r3
 8008a50:	3710      	adds	r7, #16
 8008a52:	46bd      	mov	sp, r7
 8008a54:	bd80      	pop	{r7, pc}

08008a56 <FT5336_DeInit>:
  *         from MCU to FT5336 : ie I2C channel initialization (if required).
  * @param  pObj Component object pointer
  * @retval FT5336_OK
  */
int32_t FT5336_DeInit(FT5336_Object_t *pObj)
{
 8008a56:	b480      	push	{r7}
 8008a58:	b085      	sub	sp, #20
 8008a5a:	af00      	add	r7, sp, #0
 8008a5c:	6078      	str	r0, [r7, #4]
  int32_t ret = FT5336_OK;
 8008a5e:	2300      	movs	r3, #0
 8008a60:	60fb      	str	r3, [r7, #12]

  if(pObj->IsInitialized == 1U)
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008a68:	2b01      	cmp	r3, #1
 8008a6a:	d103      	bne.n	8008a74 <FT5336_DeInit+0x1e>
  {
    pObj->IsInitialized = 0;
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	2200      	movs	r2, #0
 8008a70:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return ret;
 8008a74:	68fb      	ldr	r3, [r7, #12]
}
 8008a76:	4618      	mov	r0, r3
 8008a78:	3714      	adds	r7, #20
 8008a7a:	46bd      	mov	sp, r7
 8008a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a80:	4770      	bx	lr

08008a82 <FT5336_GestureConfig>:
  * @param  pObj  Component object pointer
  * @param  GestureInit Gesture init structure
  * @retval FT5336_OK
  */
int32_t FT5336_GestureConfig(FT5336_Object_t *pObj, FT5336_Gesture_Init_t *GestureInit)
{
 8008a82:	b580      	push	{r7, lr}
 8008a84:	b084      	sub	sp, #16
 8008a86:	af00      	add	r7, sp, #0
 8008a88:	6078      	str	r0, [r7, #4]
 8008a8a:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = ft5336_radian_value(&pObj->Ctx, (uint8_t)GestureInit->Radian);
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	f103 0218 	add.w	r2, r3, #24
 8008a92:	683b      	ldr	r3, [r7, #0]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	b2db      	uxtb	r3, r3
 8008a98:	4619      	mov	r1, r3
 8008a9a:	4610      	mov	r0, r2
 8008a9c:	f000 fa2c 	bl	8008ef8 <ft5336_radian_value>
 8008aa0:	60f8      	str	r0, [r7, #12]
  ret += ft5336_offset_left_right(&pObj->Ctx, (uint8_t)GestureInit->OffsetLeftRight);
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	f103 0218 	add.w	r2, r3, #24
 8008aa8:	683b      	ldr	r3, [r7, #0]
 8008aaa:	685b      	ldr	r3, [r3, #4]
 8008aac:	b2db      	uxtb	r3, r3
 8008aae:	4619      	mov	r1, r3
 8008ab0:	4610      	mov	r0, r2
 8008ab2:	f000 fa32 	bl	8008f1a <ft5336_offset_left_right>
 8008ab6:	4602      	mov	r2, r0
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	4413      	add	r3, r2
 8008abc:	60fb      	str	r3, [r7, #12]
  ret += ft5336_offset_up_down(&pObj->Ctx, (uint8_t)GestureInit->OffsetUpDown);
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	f103 0218 	add.w	r2, r3, #24
 8008ac4:	683b      	ldr	r3, [r7, #0]
 8008ac6:	689b      	ldr	r3, [r3, #8]
 8008ac8:	b2db      	uxtb	r3, r3
 8008aca:	4619      	mov	r1, r3
 8008acc:	4610      	mov	r0, r2
 8008ace:	f000 fa35 	bl	8008f3c <ft5336_offset_up_down>
 8008ad2:	4602      	mov	r2, r0
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	4413      	add	r3, r2
 8008ad8:	60fb      	str	r3, [r7, #12]
  ret += ft5336_disatnce_left_right(&pObj->Ctx, (uint8_t)GestureInit->DistanceLeftRight);
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	f103 0218 	add.w	r2, r3, #24
 8008ae0:	683b      	ldr	r3, [r7, #0]
 8008ae2:	68db      	ldr	r3, [r3, #12]
 8008ae4:	b2db      	uxtb	r3, r3
 8008ae6:	4619      	mov	r1, r3
 8008ae8:	4610      	mov	r0, r2
 8008aea:	f000 fa38 	bl	8008f5e <ft5336_disatnce_left_right>
 8008aee:	4602      	mov	r2, r0
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	4413      	add	r3, r2
 8008af4:	60fb      	str	r3, [r7, #12]
  ret += ft5336_distance_up_down(&pObj->Ctx, (uint8_t)GestureInit->DistanceUpDown);
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	f103 0218 	add.w	r2, r3, #24
 8008afc:	683b      	ldr	r3, [r7, #0]
 8008afe:	691b      	ldr	r3, [r3, #16]
 8008b00:	b2db      	uxtb	r3, r3
 8008b02:	4619      	mov	r1, r3
 8008b04:	4610      	mov	r0, r2
 8008b06:	f000 fa3b 	bl	8008f80 <ft5336_distance_up_down>
 8008b0a:	4602      	mov	r2, r0
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	4413      	add	r3, r2
 8008b10:	60fb      	str	r3, [r7, #12]
  ret += ft5336_distance_zoom(&pObj->Ctx, (uint8_t)GestureInit->DistanceZoom);
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	f103 0218 	add.w	r2, r3, #24
 8008b18:	683b      	ldr	r3, [r7, #0]
 8008b1a:	695b      	ldr	r3, [r3, #20]
 8008b1c:	b2db      	uxtb	r3, r3
 8008b1e:	4619      	mov	r1, r3
 8008b20:	4610      	mov	r0, r2
 8008b22:	f000 fa3e 	bl	8008fa2 <ft5336_distance_zoom>
 8008b26:	4602      	mov	r2, r0
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	4413      	add	r3, r2
 8008b2c:	60fb      	str	r3, [r7, #12]

  if(ret != FT5336_OK)
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d002      	beq.n	8008b3a <FT5336_GestureConfig+0xb8>
  {
    ret = FT5336_ERROR;
 8008b34:	f04f 33ff 	mov.w	r3, #4294967295
 8008b38:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8008b3a:	68fb      	ldr	r3, [r7, #12]
}
 8008b3c:	4618      	mov	r0, r3
 8008b3e:	3710      	adds	r7, #16
 8008b40:	46bd      	mov	sp, r7
 8008b42:	bd80      	pop	{r7, pc}

08008b44 <FT5336_ReadID>:
  *         able to read the FT5336 device ID, and verify this is a FT5336.
  * @param  pObj Component object pointer
  * @retval The Device ID (two bytes).
  */
int32_t FT5336_ReadID(FT5336_Object_t *pObj, uint32_t *Id)
{
 8008b44:	b580      	push	{r7, lr}
 8008b46:	b082      	sub	sp, #8
 8008b48:	af00      	add	r7, sp, #0
 8008b4a:	6078      	str	r0, [r7, #4]
 8008b4c:	6039      	str	r1, [r7, #0]
  return ft5336_chip_id(&pObj->Ctx, (uint8_t *)Id);
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	3318      	adds	r3, #24
 8008b52:	6839      	ldr	r1, [r7, #0]
 8008b54:	4618      	mov	r0, r3
 8008b56:	f000 fa46 	bl	8008fe6 <ft5336_chip_id>
 8008b5a:	4603      	mov	r3, r0
}
 8008b5c:	4618      	mov	r0, r3
 8008b5e:	3708      	adds	r7, #8
 8008b60:	46bd      	mov	sp, r7
 8008b62:	bd80      	pop	{r7, pc}

08008b64 <FT5336_GetState>:
  * @param  pObj Component object pointer
  * @param  State: Single Touch stucture pointer
  * @retval FT5336_OK.
  */
int32_t FT5336_GetState(FT5336_Object_t *pObj, FT5336_State_t *State)
{
 8008b64:	b580      	push	{r7, lr}
 8008b66:	b084      	sub	sp, #16
 8008b68:	af00      	add	r7, sp, #0
 8008b6a:	6078      	str	r0, [r7, #4]
 8008b6c:	6039      	str	r1, [r7, #0]
  int32_t ret = FT5336_OK;
 8008b6e:	2300      	movs	r3, #0
 8008b70:	60fb      	str	r3, [r7, #12]
  uint8_t  data[4];

  State->TouchDetected = (uint32_t)FT5336_DetectTouch(pObj);
 8008b72:	6878      	ldr	r0, [r7, #4]
 8008b74:	f000 f90f 	bl	8008d96 <FT5336_DetectTouch>
 8008b78:	4603      	mov	r3, r0
 8008b7a:	461a      	mov	r2, r3
 8008b7c:	683b      	ldr	r3, [r7, #0]
 8008b7e:	601a      	str	r2, [r3, #0]
  if(ft5336_read_reg(&pObj->Ctx, FT5336_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT5336_OK)
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	f103 0018 	add.w	r0, r3, #24
 8008b86:	f107 0208 	add.w	r2, r7, #8
 8008b8a:	2304      	movs	r3, #4
 8008b8c:	2103      	movs	r1, #3
 8008b8e:	f000 f956 	bl	8008e3e <ft5336_read_reg>
 8008b92:	4603      	mov	r3, r0
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d003      	beq.n	8008ba0 <FT5336_GetState+0x3c>
  {
    ret = FT5336_ERROR;
 8008b98:	f04f 33ff 	mov.w	r3, #4294967295
 8008b9c:	60fb      	str	r3, [r7, #12]
 8008b9e:	e00f      	b.n	8008bc0 <FT5336_GetState+0x5c>
  }
  else
  {
    /* Send back first ready X position to caller */
    State->TouchX = (((uint32_t)data[0] & FT5336_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT5336_P1_XL_TP_BIT_MASK);
 8008ba0:	7a3b      	ldrb	r3, [r7, #8]
 8008ba2:	021b      	lsls	r3, r3, #8
 8008ba4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8008ba8:	7a7a      	ldrb	r2, [r7, #9]
 8008baa:	431a      	orrs	r2, r3
 8008bac:	683b      	ldr	r3, [r7, #0]
 8008bae:	605a      	str	r2, [r3, #4]
    /* Send back first ready Y position to caller */
    State->TouchY = (((uint32_t)data[2] & FT5336_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT5336_P1_YL_TP_BIT_MASK);
 8008bb0:	7abb      	ldrb	r3, [r7, #10]
 8008bb2:	021b      	lsls	r3, r3, #8
 8008bb4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8008bb8:	7afa      	ldrb	r2, [r7, #11]
 8008bba:	431a      	orrs	r2, r3
 8008bbc:	683b      	ldr	r3, [r7, #0]
 8008bbe:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008bc0:	68fb      	ldr	r3, [r7, #12]
}
 8008bc2:	4618      	mov	r0, r3
 8008bc4:	3710      	adds	r7, #16
 8008bc6:	46bd      	mov	sp, r7
 8008bc8:	bd80      	pop	{r7, pc}

08008bca <FT5336_GetMultiTouchState>:
  * @param  pObj Component object pointer
  * @param  State Multi Touch structure pointer
  * @retval FT5336_OK.
  */
int32_t FT5336_GetMultiTouchState(FT5336_Object_t *pObj, FT5336_MultiTouch_State_t *State)
{
 8008bca:	b580      	push	{r7, lr}
 8008bcc:	b08c      	sub	sp, #48	; 0x30
 8008bce:	af00      	add	r7, sp, #0
 8008bd0:	6078      	str	r0, [r7, #4]
 8008bd2:	6039      	str	r1, [r7, #0]
  int32_t ret = FT5336_OK;
 8008bd4:	2300      	movs	r3, #0
 8008bd6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint8_t  data[30];
  uint32_t i;

  State->TouchDetected = (uint32_t)FT5336_DetectTouch(pObj);
 8008bd8:	6878      	ldr	r0, [r7, #4]
 8008bda:	f000 f8dc 	bl	8008d96 <FT5336_DetectTouch>
 8008bde:	4603      	mov	r3, r0
 8008be0:	461a      	mov	r2, r3
 8008be2:	683b      	ldr	r3, [r7, #0]
 8008be4:	601a      	str	r2, [r3, #0]

  if(ft5336_read_reg(&pObj->Ctx, FT5336_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT5336_OK)
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	f103 0018 	add.w	r0, r3, #24
 8008bec:	f107 0208 	add.w	r2, r7, #8
 8008bf0:	231e      	movs	r3, #30
 8008bf2:	2103      	movs	r1, #3
 8008bf4:	f000 f923 	bl	8008e3e <ft5336_read_reg>
 8008bf8:	4603      	mov	r3, r0
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d003      	beq.n	8008c06 <FT5336_GetMultiTouchState+0x3c>
  {
    ret = FT5336_ERROR;
 8008bfe:	f04f 33ff 	mov.w	r3, #4294967295
 8008c02:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008c04:	e07e      	b.n	8008d04 <FT5336_GetMultiTouchState+0x13a>
  }
  else
  {
    for(i = 0; i < FT5336_MAX_NB_TOUCH; i++)
 8008c06:	2300      	movs	r3, #0
 8008c08:	62bb      	str	r3, [r7, #40]	; 0x28
 8008c0a:	e078      	b.n	8008cfe <FT5336_GetMultiTouchState+0x134>
    {
    /* Send back first ready X position to caller */
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
 8008c0c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008c0e:	4613      	mov	r3, r2
 8008c10:	005b      	lsls	r3, r3, #1
 8008c12:	4413      	add	r3, r2
 8008c14:	005b      	lsls	r3, r3, #1
 8008c16:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8008c1a:	4413      	add	r3, r2
 8008c1c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8008c20:	021b      	lsls	r3, r3, #8
 8008c22:	f403 6170 	and.w	r1, r3, #3840	; 0xf00
 8008c26:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008c28:	4613      	mov	r3, r2
 8008c2a:	005b      	lsls	r3, r3, #1
 8008c2c:	4413      	add	r3, r2
 8008c2e:	005b      	lsls	r3, r3, #1
 8008c30:	3301      	adds	r3, #1
 8008c32:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8008c36:	4413      	add	r3, r2
 8008c38:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8008c3c:	ea41 0203 	orr.w	r2, r1, r3
 8008c40:	6839      	ldr	r1, [r7, #0]
 8008c42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c44:	009b      	lsls	r3, r3, #2
 8008c46:	440b      	add	r3, r1
 8008c48:	605a      	str	r2, [r3, #4]
    /* Send back first ready Y position to caller */
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
 8008c4a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008c4c:	4613      	mov	r3, r2
 8008c4e:	005b      	lsls	r3, r3, #1
 8008c50:	4413      	add	r3, r2
 8008c52:	005b      	lsls	r3, r3, #1
 8008c54:	3302      	adds	r3, #2
 8008c56:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8008c5a:	4413      	add	r3, r2
 8008c5c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8008c60:	021b      	lsls	r3, r3, #8
 8008c62:	f403 6170 	and.w	r1, r3, #3840	; 0xf00
 8008c66:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008c68:	4613      	mov	r3, r2
 8008c6a:	005b      	lsls	r3, r3, #1
 8008c6c:	4413      	add	r3, r2
 8008c6e:	005b      	lsls	r3, r3, #1
 8008c70:	3303      	adds	r3, #3
 8008c72:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8008c76:	4413      	add	r3, r2
 8008c78:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8008c7c:	4319      	orrs	r1, r3
 8008c7e:	683b      	ldr	r3, [r7, #0]
 8008c80:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008c82:	3206      	adds	r2, #6
 8008c84:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    /* Send back first ready Event to caller */
    State->TouchEvent[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_EF_BIT_MASK) >> FT5336_P1_XH_EF_BIT_POSITION);
 8008c88:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008c8a:	4613      	mov	r3, r2
 8008c8c:	005b      	lsls	r3, r3, #1
 8008c8e:	4413      	add	r3, r2
 8008c90:	005b      	lsls	r3, r3, #1
 8008c92:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8008c96:	4413      	add	r3, r2
 8008c98:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8008c9c:	099b      	lsrs	r3, r3, #6
 8008c9e:	b2db      	uxtb	r3, r3
 8008ca0:	4619      	mov	r1, r3
 8008ca2:	683b      	ldr	r3, [r7, #0]
 8008ca4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008ca6:	3210      	adds	r2, #16
 8008ca8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    /* Send back first ready Weight to caller */
    State->TouchWeight[i] = ((uint32_t)data[(i*6U) + 4U] & FT5336_P1_WEIGHT_BIT_MASK);
 8008cac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008cae:	4613      	mov	r3, r2
 8008cb0:	005b      	lsls	r3, r3, #1
 8008cb2:	4413      	add	r3, r2
 8008cb4:	005b      	lsls	r3, r3, #1
 8008cb6:	3304      	adds	r3, #4
 8008cb8:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8008cbc:	4413      	add	r3, r2
 8008cbe:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8008cc2:	4619      	mov	r1, r3
 8008cc4:	683a      	ldr	r2, [r7, #0]
 8008cc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cc8:	330a      	adds	r3, #10
 8008cca:	009b      	lsls	r3, r3, #2
 8008ccc:	4413      	add	r3, r2
 8008cce:	6059      	str	r1, [r3, #4]
    /* Send back first ready Area to caller */
    State->TouchArea[i] = ((uint32_t)data[(i*6U) + 5U] & FT5336_P1_MISC_BIT_MASK) >> FT5336_P1_MISC_BIT_POSITION;
 8008cd0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008cd2:	4613      	mov	r3, r2
 8008cd4:	005b      	lsls	r3, r3, #1
 8008cd6:	4413      	add	r3, r2
 8008cd8:	005b      	lsls	r3, r3, #1
 8008cda:	3305      	adds	r3, #5
 8008cdc:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8008ce0:	4413      	add	r3, r2
 8008ce2:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8008ce6:	091b      	lsrs	r3, r3, #4
 8008ce8:	b2db      	uxtb	r3, r3
 8008cea:	4619      	mov	r1, r3
 8008cec:	683a      	ldr	r2, [r7, #0]
 8008cee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cf0:	3314      	adds	r3, #20
 8008cf2:	009b      	lsls	r3, r3, #2
 8008cf4:	4413      	add	r3, r2
 8008cf6:	6059      	str	r1, [r3, #4]
    for(i = 0; i < FT5336_MAX_NB_TOUCH; i++)
 8008cf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cfa:	3301      	adds	r3, #1
 8008cfc:	62bb      	str	r3, [r7, #40]	; 0x28
 8008cfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d00:	2b04      	cmp	r3, #4
 8008d02:	d983      	bls.n	8008c0c <FT5336_GetMultiTouchState+0x42>
    }
  }

  return ret;
 8008d04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8008d06:	4618      	mov	r0, r3
 8008d08:	3730      	adds	r7, #48	; 0x30
 8008d0a:	46bd      	mov	sp, r7
 8008d0c:	bd80      	pop	{r7, pc}

08008d0e <FT5336_GetGesture>:
  * @param  pObj Component object pointer
  * @param  GestureId: gesture ID
  * @retval Gesture ID.
  */
int32_t FT5336_GetGesture(FT5336_Object_t *pObj, uint8_t *GestureId)
{
 8008d0e:	b580      	push	{r7, lr}
 8008d10:	b082      	sub	sp, #8
 8008d12:	af00      	add	r7, sp, #0
 8008d14:	6078      	str	r0, [r7, #4]
 8008d16:	6039      	str	r1, [r7, #0]
  return ft5336_gest_id(&pObj->Ctx, GestureId);
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	3318      	adds	r3, #24
 8008d1c:	6839      	ldr	r1, [r7, #0]
 8008d1e:	4618      	mov	r0, r3
 8008d20:	f000 f8bb 	bl	8008e9a <ft5336_gest_id>
 8008d24:	4603      	mov	r3, r0
}
 8008d26:	4618      	mov	r0, r3
 8008d28:	3708      	adds	r7, #8
 8008d2a:	46bd      	mov	sp, r7
 8008d2c:	bd80      	pop	{r7, pc}

08008d2e <FT5336_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  pObj Component object pointer
  * @retval None
  */
int32_t FT5336_EnableIT(FT5336_Object_t *pObj)
{
 8008d2e:	b580      	push	{r7, lr}
 8008d30:	b082      	sub	sp, #8
 8008d32:	af00      	add	r7, sp, #0
 8008d34:	6078      	str	r0, [r7, #4]
  return ft5336_g_mode(&pObj->Ctx, FT5336_G_MODE_INTERRUPT_TRIGGER);
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	3318      	adds	r3, #24
 8008d3a:	2101      	movs	r1, #1
 8008d3c:	4618      	mov	r0, r3
 8008d3e:	f000 f941 	bl	8008fc4 <ft5336_g_mode>
 8008d42:	4603      	mov	r3, r0
}
 8008d44:	4618      	mov	r0, r3
 8008d46:	3708      	adds	r7, #8
 8008d48:	46bd      	mov	sp, r7
 8008d4a:	bd80      	pop	{r7, pc}

08008d4c <FT5336_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  pObj Component object pointer
  * @retval None
  */
int32_t FT5336_DisableIT(FT5336_Object_t *pObj)
{
 8008d4c:	b580      	push	{r7, lr}
 8008d4e:	b082      	sub	sp, #8
 8008d50:	af00      	add	r7, sp, #0
 8008d52:	6078      	str	r0, [r7, #4]
  return ft5336_g_mode(&pObj->Ctx, FT5336_G_MODE_INTERRUPT_POLLING);
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	3318      	adds	r3, #24
 8008d58:	2100      	movs	r1, #0
 8008d5a:	4618      	mov	r0, r3
 8008d5c:	f000 f932 	bl	8008fc4 <ft5336_g_mode>
 8008d60:	4603      	mov	r3, r0
}
 8008d62:	4618      	mov	r0, r3
 8008d64:	3708      	adds	r7, #8
 8008d66:	46bd      	mov	sp, r7
 8008d68:	bd80      	pop	{r7, pc}

08008d6a <FT5336_ITStatus>:
  *         @note : This feature is not applicable to FT5336.
  * @param  pObj Component object pointer
  * @retval TS interrupts status : always return 0 here
  */
int32_t FT5336_ITStatus(FT5336_Object_t *pObj)
{
 8008d6a:	b480      	push	{r7}
 8008d6c:	b083      	sub	sp, #12
 8008d6e:	af00      	add	r7, sp, #0
 8008d70:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Always return FT5336_OK as feature not applicable to FT5336 */
  return FT5336_OK;
 8008d72:	2300      	movs	r3, #0
}
 8008d74:	4618      	mov	r0, r3
 8008d76:	370c      	adds	r7, #12
 8008d78:	46bd      	mov	sp, r7
 8008d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d7e:	4770      	bx	lr

08008d80 <FT5336_ClearIT>:
  *         @note : This feature is not applicable to FT5336.
  * @param  pObj Component object pointer
  * @retval None
  */
int32_t FT5336_ClearIT(FT5336_Object_t *pObj)
{
 8008d80:	b480      	push	{r7}
 8008d82:	b083      	sub	sp, #12
 8008d84:	af00      	add	r7, sp, #0
 8008d86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Always return FT5336_OK as feature not applicable to FT5336 */
  return FT5336_OK;
 8008d88:	2300      	movs	r3, #0
}
 8008d8a:	4618      	mov	r0, r3
 8008d8c:	370c      	adds	r7, #12
 8008d8e:	46bd      	mov	sp, r7
 8008d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d94:	4770      	bx	lr

08008d96 <FT5336_DetectTouch>:
  * @param  pObj Component object pointer
  * @retval Number of active touches detected (can be 0, 1 or 2) or FT5336_ERROR
  *         in case of error
  */
static int32_t FT5336_DetectTouch(FT5336_Object_t *pObj)
{
 8008d96:	b580      	push	{r7, lr}
 8008d98:	b084      	sub	sp, #16
 8008d9a:	af00      	add	r7, sp, #0
 8008d9c:	6078      	str	r0, [r7, #4]
  int32_t ret;
  uint8_t nb_touch;

  /* Read register FT5336_TD_STAT_REG to check number of touches detection */
  if(ft5336_td_status(&pObj->Ctx, &nb_touch) != FT5336_OK)
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	3318      	adds	r3, #24
 8008da2:	f107 020b 	add.w	r2, r7, #11
 8008da6:	4611      	mov	r1, r2
 8008da8:	4618      	mov	r0, r3
 8008daa:	f000 f886 	bl	8008eba <ft5336_td_status>
 8008dae:	4603      	mov	r3, r0
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d003      	beq.n	8008dbc <FT5336_DetectTouch+0x26>
  {
    ret = FT5336_ERROR;
 8008db4:	f04f 33ff 	mov.w	r3, #4294967295
 8008db8:	60fb      	str	r3, [r7, #12]
 8008dba:	e007      	b.n	8008dcc <FT5336_DetectTouch+0x36>
  }
  else
  {
    if(nb_touch > FT5336_MAX_NB_TOUCH)
 8008dbc:	7afb      	ldrb	r3, [r7, #11]
 8008dbe:	2b05      	cmp	r3, #5
 8008dc0:	d902      	bls.n	8008dc8 <FT5336_DetectTouch+0x32>
    {
      /* If invalid number of touch detected, set it to zero */
      ret = 0;
 8008dc2:	2300      	movs	r3, #0
 8008dc4:	60fb      	str	r3, [r7, #12]
 8008dc6:	e001      	b.n	8008dcc <FT5336_DetectTouch+0x36>
    }
    else
    {
      ret = (int32_t)nb_touch;
 8008dc8:	7afb      	ldrb	r3, [r7, #11]
 8008dca:	60fb      	str	r3, [r7, #12]
    }
  }
  return ret;
 8008dcc:	68fb      	ldr	r3, [r7, #12]
}
 8008dce:	4618      	mov	r0, r3
 8008dd0:	3710      	adds	r7, #16
 8008dd2:	46bd      	mov	sp, r7
 8008dd4:	bd80      	pop	{r7, pc}

08008dd6 <ReadRegWrap>:
  * @param  pData: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval error status
  */
static int32_t ReadRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
 8008dd6:	b590      	push	{r4, r7, lr}
 8008dd8:	b087      	sub	sp, #28
 8008dda:	af00      	add	r7, sp, #0
 8008ddc:	60f8      	str	r0, [r7, #12]
 8008dde:	607a      	str	r2, [r7, #4]
 8008de0:	461a      	mov	r2, r3
 8008de2:	460b      	mov	r3, r1
 8008de4:	72fb      	strb	r3, [r7, #11]
 8008de6:	4613      	mov	r3, r2
 8008de8:	813b      	strh	r3, [r7, #8]
  FT5336_Object_t *pObj = (FT5336_Object_t *)handle;
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8008dee:	697b      	ldr	r3, [r7, #20]
 8008df0:	691c      	ldr	r4, [r3, #16]
 8008df2:	697b      	ldr	r3, [r7, #20]
 8008df4:	8918      	ldrh	r0, [r3, #8]
 8008df6:	7afb      	ldrb	r3, [r7, #11]
 8008df8:	b299      	uxth	r1, r3
 8008dfa:	893b      	ldrh	r3, [r7, #8]
 8008dfc:	687a      	ldr	r2, [r7, #4]
 8008dfe:	47a0      	blx	r4
 8008e00:	4603      	mov	r3, r0
}
 8008e02:	4618      	mov	r0, r3
 8008e04:	371c      	adds	r7, #28
 8008e06:	46bd      	mov	sp, r7
 8008e08:	bd90      	pop	{r4, r7, pc}

08008e0a <WriteRegWrap>:
  * @param  pData: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval error status
  */
static int32_t WriteRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
 8008e0a:	b590      	push	{r4, r7, lr}
 8008e0c:	b087      	sub	sp, #28
 8008e0e:	af00      	add	r7, sp, #0
 8008e10:	60f8      	str	r0, [r7, #12]
 8008e12:	607a      	str	r2, [r7, #4]
 8008e14:	461a      	mov	r2, r3
 8008e16:	460b      	mov	r3, r1
 8008e18:	72fb      	strb	r3, [r7, #11]
 8008e1a:	4613      	mov	r3, r2
 8008e1c:	813b      	strh	r3, [r7, #8]
  FT5336_Object_t *pObj = (FT5336_Object_t *)handle;
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8008e22:	697b      	ldr	r3, [r7, #20]
 8008e24:	68dc      	ldr	r4, [r3, #12]
 8008e26:	697b      	ldr	r3, [r7, #20]
 8008e28:	8918      	ldrh	r0, [r3, #8]
 8008e2a:	7afb      	ldrb	r3, [r7, #11]
 8008e2c:	b299      	uxth	r1, r3
 8008e2e:	893b      	ldrh	r3, [r7, #8]
 8008e30:	687a      	ldr	r2, [r7, #4]
 8008e32:	47a0      	blx	r4
 8008e34:	4603      	mov	r3, r0
}
 8008e36:	4618      	mov	r0, r3
 8008e38:	371c      	adds	r7, #28
 8008e3a:	46bd      	mov	sp, r7
 8008e3c:	bd90      	pop	{r4, r7, pc}

08008e3e <ft5336_read_reg>:
  * @param  pdata pointer to data to be read
  * @param  length Length of data to read   
  * @retval Component status
  */
int32_t ft5336_read_reg(ft5336_ctx_t *ctx, uint8_t reg, uint8_t* pdata, uint16_t length)
{
 8008e3e:	b590      	push	{r4, r7, lr}
 8008e40:	b085      	sub	sp, #20
 8008e42:	af00      	add	r7, sp, #0
 8008e44:	60f8      	str	r0, [r7, #12]
 8008e46:	607a      	str	r2, [r7, #4]
 8008e48:	461a      	mov	r2, r3
 8008e4a:	460b      	mov	r3, r1
 8008e4c:	72fb      	strb	r3, [r7, #11]
 8008e4e:	4613      	mov	r3, r2
 8008e50:	813b      	strh	r3, [r7, #8]
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	685c      	ldr	r4, [r3, #4]
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	6898      	ldr	r0, [r3, #8]
 8008e5a:	893b      	ldrh	r3, [r7, #8]
 8008e5c:	7af9      	ldrb	r1, [r7, #11]
 8008e5e:	687a      	ldr	r2, [r7, #4]
 8008e60:	47a0      	blx	r4
 8008e62:	4603      	mov	r3, r0
}
 8008e64:	4618      	mov	r0, r3
 8008e66:	3714      	adds	r7, #20
 8008e68:	46bd      	mov	sp, r7
 8008e6a:	bd90      	pop	{r4, r7, pc}

08008e6c <ft5336_write_reg>:
  * @param  pdata pointer to data to be written
  * @param  length Length of data to write   
  * @retval Component status
  */
int32_t ft5336_write_reg(ft5336_ctx_t *ctx, uint8_t reg, uint8_t *pdata, uint16_t length)
{
 8008e6c:	b590      	push	{r4, r7, lr}
 8008e6e:	b085      	sub	sp, #20
 8008e70:	af00      	add	r7, sp, #0
 8008e72:	60f8      	str	r0, [r7, #12]
 8008e74:	607a      	str	r2, [r7, #4]
 8008e76:	461a      	mov	r2, r3
 8008e78:	460b      	mov	r3, r1
 8008e7a:	72fb      	strb	r3, [r7, #11]
 8008e7c:	4613      	mov	r3, r2
 8008e7e:	813b      	strh	r3, [r7, #8]
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	681c      	ldr	r4, [r3, #0]
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	6898      	ldr	r0, [r3, #8]
 8008e88:	893b      	ldrh	r3, [r7, #8]
 8008e8a:	7af9      	ldrb	r1, [r7, #11]
 8008e8c:	687a      	ldr	r2, [r7, #4]
 8008e8e:	47a0      	blx	r4
 8008e90:	4603      	mov	r3, r0
}
 8008e92:	4618      	mov	r0, r3
 8008e94:	3714      	adds	r7, #20
 8008e96:	46bd      	mov	sp, r7
 8008e98:	bd90      	pop	{r4, r7, pc}

08008e9a <ft5336_gest_id>:
  * @param  ctx Component context 
  * @param  value pointer to the value of FT5336_GEST_ID_REG register
  * @retval Component status
  */
int32_t  ft5336_gest_id(ft5336_ctx_t *ctx, uint8_t *value)
{
 8008e9a:	b580      	push	{r7, lr}
 8008e9c:	b082      	sub	sp, #8
 8008e9e:	af00      	add	r7, sp, #0
 8008ea0:	6078      	str	r0, [r7, #4]
 8008ea2:	6039      	str	r1, [r7, #0]
  return ft5336_read_reg(ctx, FT5336_GEST_ID_REG, (uint8_t *)value, 1);
 8008ea4:	2301      	movs	r3, #1
 8008ea6:	683a      	ldr	r2, [r7, #0]
 8008ea8:	2101      	movs	r1, #1
 8008eaa:	6878      	ldr	r0, [r7, #4]
 8008eac:	f7ff ffc7 	bl	8008e3e <ft5336_read_reg>
 8008eb0:	4603      	mov	r3, r0
}
 8008eb2:	4618      	mov	r0, r3
 8008eb4:	3708      	adds	r7, #8
 8008eb6:	46bd      	mov	sp, r7
 8008eb8:	bd80      	pop	{r7, pc}

08008eba <ft5336_td_status>:
  * @param  ctx Component context 
  * @param  value pointer to the value of Touch Data Status register
  * @retval Component status
  */
int32_t  ft5336_td_status(ft5336_ctx_t *ctx, uint8_t *value)
{
 8008eba:	b580      	push	{r7, lr}
 8008ebc:	b084      	sub	sp, #16
 8008ebe:	af00      	add	r7, sp, #0
 8008ec0:	6078      	str	r0, [r7, #4]
 8008ec2:	6039      	str	r1, [r7, #0]
  int32_t ret;
  
  ret = ft5336_read_reg(ctx, FT5336_TD_STAT_REG, (uint8_t *)value, 1);
 8008ec4:	2301      	movs	r3, #1
 8008ec6:	683a      	ldr	r2, [r7, #0]
 8008ec8:	2102      	movs	r1, #2
 8008eca:	6878      	ldr	r0, [r7, #4]
 8008ecc:	f7ff ffb7 	bl	8008e3e <ft5336_read_reg>
 8008ed0:	60f8      	str	r0, [r7, #12]
  
  if(ret == 0)
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d10a      	bne.n	8008eee <ft5336_td_status+0x34>
  {
    *value &= FT5336_TD_STATUS_BIT_MASK; 
 8008ed8:	683b      	ldr	r3, [r7, #0]
 8008eda:	781b      	ldrb	r3, [r3, #0]
 8008edc:	f003 030f 	and.w	r3, r3, #15
 8008ee0:	b2da      	uxtb	r2, r3
 8008ee2:	683b      	ldr	r3, [r7, #0]
 8008ee4:	701a      	strb	r2, [r3, #0]
    *value = *value >> FT5336_TD_STATUS_BIT_POSITION; 
 8008ee6:	683b      	ldr	r3, [r7, #0]
 8008ee8:	781a      	ldrb	r2, [r3, #0]
 8008eea:	683b      	ldr	r3, [r7, #0]
 8008eec:	701a      	strb	r2, [r3, #0]
  }
  
  return ret;
 8008eee:	68fb      	ldr	r3, [r7, #12]
}
 8008ef0:	4618      	mov	r0, r3
 8008ef2:	3710      	adds	r7, #16
 8008ef4:	46bd      	mov	sp, r7
 8008ef6:	bd80      	pop	{r7, pc}

08008ef8 <ft5336_radian_value>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_RADIAN_VALUE_REG register
  * @retval Component status
  */
int32_t  ft5336_radian_value(ft5336_ctx_t *ctx, uint8_t value)
{
 8008ef8:	b580      	push	{r7, lr}
 8008efa:	b082      	sub	sp, #8
 8008efc:	af00      	add	r7, sp, #0
 8008efe:	6078      	str	r0, [r7, #4]
 8008f00:	460b      	mov	r3, r1
 8008f02:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_RADIAN_VALUE_REG, &value, 1);
 8008f04:	1cfa      	adds	r2, r7, #3
 8008f06:	2301      	movs	r3, #1
 8008f08:	2191      	movs	r1, #145	; 0x91
 8008f0a:	6878      	ldr	r0, [r7, #4]
 8008f0c:	f7ff ffae 	bl	8008e6c <ft5336_write_reg>
 8008f10:	4603      	mov	r3, r0
}
 8008f12:	4618      	mov	r0, r3
 8008f14:	3708      	adds	r7, #8
 8008f16:	46bd      	mov	sp, r7
 8008f18:	bd80      	pop	{r7, pc}

08008f1a <ft5336_offset_left_right>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_OFFSET_LR_REG register
  * @retval Component status
  */
int32_t  ft5336_offset_left_right(ft5336_ctx_t *ctx, uint8_t value)
{
 8008f1a:	b580      	push	{r7, lr}
 8008f1c:	b082      	sub	sp, #8
 8008f1e:	af00      	add	r7, sp, #0
 8008f20:	6078      	str	r0, [r7, #4]
 8008f22:	460b      	mov	r3, r1
 8008f24:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_OFFSET_LR_REG, &value, 1);
 8008f26:	1cfa      	adds	r2, r7, #3
 8008f28:	2301      	movs	r3, #1
 8008f2a:	2192      	movs	r1, #146	; 0x92
 8008f2c:	6878      	ldr	r0, [r7, #4]
 8008f2e:	f7ff ff9d 	bl	8008e6c <ft5336_write_reg>
 8008f32:	4603      	mov	r3, r0
}
 8008f34:	4618      	mov	r0, r3
 8008f36:	3708      	adds	r7, #8
 8008f38:	46bd      	mov	sp, r7
 8008f3a:	bd80      	pop	{r7, pc}

08008f3c <ft5336_offset_up_down>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_OFFSET_UD_REG register
  * @retval Component status
  */
int32_t  ft5336_offset_up_down(ft5336_ctx_t *ctx, uint8_t value)
{
 8008f3c:	b580      	push	{r7, lr}
 8008f3e:	b082      	sub	sp, #8
 8008f40:	af00      	add	r7, sp, #0
 8008f42:	6078      	str	r0, [r7, #4]
 8008f44:	460b      	mov	r3, r1
 8008f46:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_OFFSET_UD_REG, &value, 1);
 8008f48:	1cfa      	adds	r2, r7, #3
 8008f4a:	2301      	movs	r3, #1
 8008f4c:	2193      	movs	r1, #147	; 0x93
 8008f4e:	6878      	ldr	r0, [r7, #4]
 8008f50:	f7ff ff8c 	bl	8008e6c <ft5336_write_reg>
 8008f54:	4603      	mov	r3, r0
}
 8008f56:	4618      	mov	r0, r3
 8008f58:	3708      	adds	r7, #8
 8008f5a:	46bd      	mov	sp, r7
 8008f5c:	bd80      	pop	{r7, pc}

08008f5e <ft5336_disatnce_left_right>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_DISTANCE_LR_REG register
  * @retval Component status
  */
int32_t  ft5336_disatnce_left_right(ft5336_ctx_t *ctx, uint8_t value)
{
 8008f5e:	b580      	push	{r7, lr}
 8008f60:	b082      	sub	sp, #8
 8008f62:	af00      	add	r7, sp, #0
 8008f64:	6078      	str	r0, [r7, #4]
 8008f66:	460b      	mov	r3, r1
 8008f68:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_DISTANCE_LR_REG, &value, 1);
 8008f6a:	1cfa      	adds	r2, r7, #3
 8008f6c:	2301      	movs	r3, #1
 8008f6e:	2194      	movs	r1, #148	; 0x94
 8008f70:	6878      	ldr	r0, [r7, #4]
 8008f72:	f7ff ff7b 	bl	8008e6c <ft5336_write_reg>
 8008f76:	4603      	mov	r3, r0
}
 8008f78:	4618      	mov	r0, r3
 8008f7a:	3708      	adds	r7, #8
 8008f7c:	46bd      	mov	sp, r7
 8008f7e:	bd80      	pop	{r7, pc}

08008f80 <ft5336_distance_up_down>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_DISTANCE_UD_REG register
  * @retval Component status
  */
int32_t  ft5336_distance_up_down(ft5336_ctx_t *ctx, uint8_t value)
{
 8008f80:	b580      	push	{r7, lr}
 8008f82:	b082      	sub	sp, #8
 8008f84:	af00      	add	r7, sp, #0
 8008f86:	6078      	str	r0, [r7, #4]
 8008f88:	460b      	mov	r3, r1
 8008f8a:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_DISTANCE_UD_REG, &value, 1);
 8008f8c:	1cfa      	adds	r2, r7, #3
 8008f8e:	2301      	movs	r3, #1
 8008f90:	2195      	movs	r1, #149	; 0x95
 8008f92:	6878      	ldr	r0, [r7, #4]
 8008f94:	f7ff ff6a 	bl	8008e6c <ft5336_write_reg>
 8008f98:	4603      	mov	r3, r0
}
 8008f9a:	4618      	mov	r0, r3
 8008f9c:	3708      	adds	r7, #8
 8008f9e:	46bd      	mov	sp, r7
 8008fa0:	bd80      	pop	{r7, pc}

08008fa2 <ft5336_distance_zoom>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_DISTANCE_ZOOM_REG register
  * @retval Component status
  */
int32_t  ft5336_distance_zoom(ft5336_ctx_t *ctx, uint8_t value)
{
 8008fa2:	b580      	push	{r7, lr}
 8008fa4:	b082      	sub	sp, #8
 8008fa6:	af00      	add	r7, sp, #0
 8008fa8:	6078      	str	r0, [r7, #4]
 8008faa:	460b      	mov	r3, r1
 8008fac:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_DISTANCE_ZOOM_REG, &value, 1);
 8008fae:	1cfa      	adds	r2, r7, #3
 8008fb0:	2301      	movs	r3, #1
 8008fb2:	2196      	movs	r1, #150	; 0x96
 8008fb4:	6878      	ldr	r0, [r7, #4]
 8008fb6:	f7ff ff59 	bl	8008e6c <ft5336_write_reg>
 8008fba:	4603      	mov	r3, r0
}
 8008fbc:	4618      	mov	r0, r3
 8008fbe:	3708      	adds	r7, #8
 8008fc0:	46bd      	mov	sp, r7
 8008fc2:	bd80      	pop	{r7, pc}

08008fc4 <ft5336_g_mode>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_GMODE_REG register
  * @retval Component status
  */
int32_t  ft5336_g_mode(ft5336_ctx_t *ctx, uint8_t value)
{
 8008fc4:	b580      	push	{r7, lr}
 8008fc6:	b082      	sub	sp, #8
 8008fc8:	af00      	add	r7, sp, #0
 8008fca:	6078      	str	r0, [r7, #4]
 8008fcc:	460b      	mov	r3, r1
 8008fce:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_GMODE_REG, &value, 1);
 8008fd0:	1cfa      	adds	r2, r7, #3
 8008fd2:	2301      	movs	r3, #1
 8008fd4:	21a4      	movs	r1, #164	; 0xa4
 8008fd6:	6878      	ldr	r0, [r7, #4]
 8008fd8:	f7ff ff48 	bl	8008e6c <ft5336_write_reg>
 8008fdc:	4603      	mov	r3, r0
}
 8008fde:	4618      	mov	r0, r3
 8008fe0:	3708      	adds	r7, #8
 8008fe2:	46bd      	mov	sp, r7
 8008fe4:	bd80      	pop	{r7, pc}

08008fe6 <ft5336_chip_id>:
  * @param  ctx Component context 
  * @param  value Pointer to FT5336_CHIP_ID_REG register value
  * @retval Component status
  */
int32_t  ft5336_chip_id(ft5336_ctx_t *ctx, uint8_t *value)
{
 8008fe6:	b580      	push	{r7, lr}
 8008fe8:	b084      	sub	sp, #16
 8008fea:	af00      	add	r7, sp, #0
 8008fec:	6078      	str	r0, [r7, #4]
 8008fee:	6039      	str	r1, [r7, #0]
  int32_t ret;
  
  ret = ft5336_read_reg(ctx, FT5336_CHIP_ID_REG, (uint8_t *)value, 1);
 8008ff0:	2301      	movs	r3, #1
 8008ff2:	683a      	ldr	r2, [r7, #0]
 8008ff4:	21a8      	movs	r1, #168	; 0xa8
 8008ff6:	6878      	ldr	r0, [r7, #4]
 8008ff8:	f7ff ff21 	bl	8008e3e <ft5336_read_reg>
 8008ffc:	60f8      	str	r0, [r7, #12]
  
  if(ret == 0)
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	2b00      	cmp	r3, #0
 8009002:	d107      	bne.n	8009014 <ft5336_chip_id+0x2e>
  {
    *value &= FT5336_CHIP_ID_BIT_MASK; 
 8009004:	683b      	ldr	r3, [r7, #0]
 8009006:	781a      	ldrb	r2, [r3, #0]
 8009008:	683b      	ldr	r3, [r7, #0]
 800900a:	701a      	strb	r2, [r3, #0]
    *value = *value >> FT5336_CHIP_ID_BIT_POSITION; 
 800900c:	683b      	ldr	r3, [r7, #0]
 800900e:	781a      	ldrb	r2, [r3, #0]
 8009010:	683b      	ldr	r3, [r7, #0]
 8009012:	701a      	strb	r2, [r3, #0]
  }
  
  return ret;
 8009014:	68fb      	ldr	r3, [r7, #12]
}
 8009016:	4618      	mov	r0, r3
 8009018:	3710      	adds	r7, #16
 800901a:	46bd      	mov	sp, r7
 800901c:	bd80      	pop	{r7, pc}

0800901e <MX25LM51245G_GetFlashInfo>:
  * @brief  Get Flash information
  * @param  pInfo pointer to information structure
  * @retval error status
  */
int32_t MX25LM51245G_GetFlashInfo(MX25LM51245G_Info_t *pInfo)
{
 800901e:	b480      	push	{r7}
 8009020:	b083      	sub	sp, #12
 8009022:	af00      	add	r7, sp, #0
 8009024:	6078      	str	r0, [r7, #4]
  /* Configure the structure with the memory configuration */
  pInfo->FlashSize              = MX25LM51245G_FLASH_SIZE;
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800902c:	601a      	str	r2, [r3, #0]
  pInfo->EraseSectorSize        = MX25LM51245G_SECTOR_64K;
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8009034:	605a      	str	r2, [r3, #4]
  pInfo->EraseSectorsNumber     = (MX25LM51245G_FLASH_SIZE/MX25LM51245G_SECTOR_64K);
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800903c:	609a      	str	r2, [r3, #8]
  pInfo->EraseSubSectorSize     = MX25LM51245G_SUBSECTOR_4K;
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8009044:	60da      	str	r2, [r3, #12]
  pInfo->EraseSubSectorNumber   = (MX25LM51245G_FLASH_SIZE/MX25LM51245G_SUBSECTOR_4K);
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800904c:	611a      	str	r2, [r3, #16]
  pInfo->EraseSubSector1Size    = MX25LM51245G_SUBSECTOR_4K;
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8009054:	615a      	str	r2, [r3, #20]
  pInfo->EraseSubSector1Number  = (MX25LM51245G_FLASH_SIZE/MX25LM51245G_SUBSECTOR_4K);
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800905c:	619a      	str	r2, [r3, #24]
  pInfo->ProgPageSize           = MX25LM51245G_PAGE_SIZE;
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009064:	61da      	str	r2, [r3, #28]
  pInfo->ProgPagesNumber        = (MX25LM51245G_FLASH_SIZE/MX25LM51245G_PAGE_SIZE);
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800906c:	621a      	str	r2, [r3, #32]

  return MX25LM51245G_OK;
 800906e:	2300      	movs	r3, #0
};
 8009070:	4618      	mov	r0, r3
 8009072:	370c      	adds	r7, #12
 8009074:	46bd      	mov	sp, r7
 8009076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800907a:	4770      	bx	lr

0800907c <MX25LM51245G_AutoPollingMemReady>:
  * @param  Mode Interface mode
  * @param  Rate Transfer rate
  * @retval error status
  */
int32_t MX25LM51245G_AutoPollingMemReady(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_Transfer_t Rate)
{
 800907c:	b580      	push	{r7, lr}
 800907e:	b09c      	sub	sp, #112	; 0x70
 8009080:	af00      	add	r7, sp, #0
 8009082:	6078      	str	r0, [r7, #4]
 8009084:	460b      	mov	r3, r1
 8009086:	70fb      	strb	r3, [r7, #3]
 8009088:	4613      	mov	r3, r2
 800908a:	70bb      	strb	r3, [r7, #2]
  OSPI_RegularCmdTypeDef  s_command = {0};
 800908c:	f107 0320 	add.w	r3, r7, #32
 8009090:	2250      	movs	r2, #80	; 0x50
 8009092:	2100      	movs	r1, #0
 8009094:	4618      	mov	r0, r3
 8009096:	f022 fc7b 	bl	802b990 <memset>
  OSPI_AutoPollingTypeDef s_config = {0};
 800909a:	f107 030c 	add.w	r3, r7, #12
 800909e:	2200      	movs	r2, #0
 80090a0:	601a      	str	r2, [r3, #0]
 80090a2:	605a      	str	r2, [r3, #4]
 80090a4:	609a      	str	r2, [r3, #8]
 80090a6:	60da      	str	r2, [r3, #12]
 80090a8:	611a      	str	r2, [r3, #16]

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25LM51245G_SPI_MODE) && (Rate == MX25LM51245G_DTR_TRANSFER))
 80090aa:	78fb      	ldrb	r3, [r7, #3]
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d105      	bne.n	80090bc <MX25LM51245G_AutoPollingMemReady+0x40>
 80090b0:	78bb      	ldrb	r3, [r7, #2]
 80090b2:	2b01      	cmp	r3, #1
 80090b4:	d102      	bne.n	80090bc <MX25LM51245G_AutoPollingMemReady+0x40>
  {
    return MX25LM51245G_ERROR;
 80090b6:	f04f 33ff 	mov.w	r3, #4294967295
 80090ba:	e088      	b.n	80091ce <MX25LM51245G_AutoPollingMemReady+0x152>
  }

  /* Configure automatic polling mode to wait for memory ready */
  s_command.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 80090bc:	2300      	movs	r3, #0
 80090be:	623b      	str	r3, [r7, #32]
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
 80090c0:	2300      	movs	r3, #0
 80090c2:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 80090c4:	78fb      	ldrb	r3, [r7, #3]
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d101      	bne.n	80090ce <MX25LM51245G_AutoPollingMemReady+0x52>
 80090ca:	2301      	movs	r3, #1
 80090cc:	e000      	b.n	80090d0 <MX25LM51245G_AutoPollingMemReady+0x54>
 80090ce:	2304      	movs	r3, #4
 80090d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 80090d2:	78bb      	ldrb	r3, [r7, #2]
 80090d4:	2b01      	cmp	r3, #1
 80090d6:	d101      	bne.n	80090dc <MX25LM51245G_AutoPollingMemReady+0x60>
 80090d8:	2308      	movs	r3, #8
 80090da:	e000      	b.n	80090de <MX25LM51245G_AutoPollingMemReady+0x62>
 80090dc:	2300      	movs	r3, #0
 80090de:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 80090e0:	78fb      	ldrb	r3, [r7, #3]
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d101      	bne.n	80090ea <MX25LM51245G_AutoPollingMemReady+0x6e>
 80090e6:	2300      	movs	r3, #0
 80090e8:	e000      	b.n	80090ec <MX25LM51245G_AutoPollingMemReady+0x70>
 80090ea:	2310      	movs	r3, #16
 80090ec:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_READ_STATUS_REG_CMD : MX25LM51245G_OCTA_READ_STATUS_REG_CMD;
 80090ee:	78fb      	ldrb	r3, [r7, #3]
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d101      	bne.n	80090f8 <MX25LM51245G_AutoPollingMemReady+0x7c>
 80090f4:	2305      	movs	r3, #5
 80090f6:	e001      	b.n	80090fc <MX25LM51245G_AutoPollingMemReady+0x80>
 80090f8:	f240 53fa 	movw	r3, #1530	; 0x5fa
 80090fc:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_NONE : HAL_OSPI_ADDRESS_8_LINES;
 80090fe:	78fb      	ldrb	r3, [r7, #3]
 8009100:	2b00      	cmp	r3, #0
 8009102:	d101      	bne.n	8009108 <MX25LM51245G_AutoPollingMemReady+0x8c>
 8009104:	2300      	movs	r3, #0
 8009106:	e001      	b.n	800910c <MX25LM51245G_AutoPollingMemReady+0x90>
 8009108:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800910c:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.AddressDtrMode     = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 800910e:	78bb      	ldrb	r3, [r7, #2]
 8009110:	2b01      	cmp	r3, #1
 8009112:	d102      	bne.n	800911a <MX25LM51245G_AutoPollingMemReady+0x9e>
 8009114:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009118:	e000      	b.n	800911c <MX25LM51245G_AutoPollingMemReady+0xa0>
 800911a:	2300      	movs	r3, #0
 800911c:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.AddressSize        = HAL_OSPI_ADDRESS_32_BITS;
 800911e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8009122:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.Address            = 0U;
 8009124:	2300      	movs	r3, #0
 8009126:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8009128:	2300      	movs	r3, #0
 800912a:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 800912c:	78fb      	ldrb	r3, [r7, #3]
 800912e:	2b00      	cmp	r3, #0
 8009130:	d102      	bne.n	8009138 <MX25LM51245G_AutoPollingMemReady+0xbc>
 8009132:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009136:	e001      	b.n	800913c <MX25LM51245G_AutoPollingMemReady+0xc0>
 8009138:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800913c:	65bb      	str	r3, [r7, #88]	; 0x58
  s_command.DataDtrMode        = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 800913e:	78bb      	ldrb	r3, [r7, #2]
 8009140:	2b01      	cmp	r3, #1
 8009142:	d102      	bne.n	800914a <MX25LM51245G_AutoPollingMemReady+0xce>
 8009144:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009148:	e000      	b.n	800914c <MX25LM51245G_AutoPollingMemReady+0xd0>
 800914a:	2300      	movs	r3, #0
 800914c:	663b      	str	r3, [r7, #96]	; 0x60
  s_command.DummyCycles        = (Mode == MX25LM51245G_SPI_MODE) ? 0U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? DUMMY_CYCLES_REG_OCTAL_DTR : DUMMY_CYCLES_REG_OCTAL);
 800914e:	78fb      	ldrb	r3, [r7, #3]
 8009150:	2b00      	cmp	r3, #0
 8009152:	d101      	bne.n	8009158 <MX25LM51245G_AutoPollingMemReady+0xdc>
 8009154:	2300      	movs	r3, #0
 8009156:	e000      	b.n	800915a <MX25LM51245G_AutoPollingMemReady+0xde>
 8009158:	2305      	movs	r3, #5
 800915a:	667b      	str	r3, [r7, #100]	; 0x64
  s_command.NbData             = (Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U;
 800915c:	78bb      	ldrb	r3, [r7, #2]
 800915e:	2b01      	cmp	r3, #1
 8009160:	d101      	bne.n	8009166 <MX25LM51245G_AutoPollingMemReady+0xea>
 8009162:	2302      	movs	r3, #2
 8009164:	e000      	b.n	8009168 <MX25LM51245G_AutoPollingMemReady+0xec>
 8009166:	2301      	movs	r3, #1
 8009168:	65fb      	str	r3, [r7, #92]	; 0x5c
  s_command.DQSMode            = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DQS_ENABLE : HAL_OSPI_DQS_DISABLE;
 800916a:	78bb      	ldrb	r3, [r7, #2]
 800916c:	2b01      	cmp	r3, #1
 800916e:	d102      	bne.n	8009176 <MX25LM51245G_AutoPollingMemReady+0xfa>
 8009170:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8009174:	e000      	b.n	8009178 <MX25LM51245G_AutoPollingMemReady+0xfc>
 8009176:	2300      	movs	r3, #0
 8009178:	66bb      	str	r3, [r7, #104]	; 0x68
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 800917a:	2300      	movs	r3, #0
 800917c:	66fb      	str	r3, [r7, #108]	; 0x6c

  s_config.Match         = 0U;
 800917e:	2300      	movs	r3, #0
 8009180:	60fb      	str	r3, [r7, #12]
  s_config.Mask          = MX25LM51245G_SR_WIP;
 8009182:	2301      	movs	r3, #1
 8009184:	613b      	str	r3, [r7, #16]
  s_config.MatchMode     = HAL_OSPI_MATCH_MODE_AND;
 8009186:	2300      	movs	r3, #0
 8009188:	617b      	str	r3, [r7, #20]
  s_config.Interval      = MX25LM51245G_AUTOPOLLING_INTERVAL_TIME;
 800918a:	2310      	movs	r3, #16
 800918c:	61fb      	str	r3, [r7, #28]
  s_config.AutomaticStop = HAL_OSPI_AUTOMATIC_STOP_ENABLE;
 800918e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8009192:	61bb      	str	r3, [r7, #24]

  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8009194:	f107 0320 	add.w	r3, r7, #32
 8009198:	f241 3288 	movw	r2, #5000	; 0x1388
 800919c:	4619      	mov	r1, r3
 800919e:	6878      	ldr	r0, [r7, #4]
 80091a0:	f006 f960 	bl	800f464 <HAL_OSPI_Command>
 80091a4:	4603      	mov	r3, r0
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d002      	beq.n	80091b0 <MX25LM51245G_AutoPollingMemReady+0x134>
  {
    return MX25LM51245G_ERROR;
 80091aa:	f04f 33ff 	mov.w	r3, #4294967295
 80091ae:	e00e      	b.n	80091ce <MX25LM51245G_AutoPollingMemReady+0x152>
  }

  if (HAL_OSPI_AutoPolling(Ctx, &s_config, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80091b0:	f107 030c 	add.w	r3, r7, #12
 80091b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80091b8:	4619      	mov	r1, r3
 80091ba:	6878      	ldr	r0, [r7, #4]
 80091bc:	f006 faf5 	bl	800f7aa <HAL_OSPI_AutoPolling>
 80091c0:	4603      	mov	r3, r0
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d002      	beq.n	80091cc <MX25LM51245G_AutoPollingMemReady+0x150>
  {
    return MX25LM51245G_ERROR;
 80091c6:	f04f 33ff 	mov.w	r3, #4294967295
 80091ca:	e000      	b.n	80091ce <MX25LM51245G_AutoPollingMemReady+0x152>
  }

  return MX25LM51245G_OK;
 80091cc:	2300      	movs	r3, #0
}
 80091ce:	4618      	mov	r0, r3
 80091d0:	3770      	adds	r7, #112	; 0x70
 80091d2:	46bd      	mov	sp, r7
 80091d4:	bd80      	pop	{r7, pc}

080091d6 <MX25LM51245G_EnableMemoryMappedModeSTR>:
  * @param  Mode Interface mode
  * @param  AddressSize Address size
  * @retval OSPI memory status
  */
int32_t MX25LM51245G_EnableMemoryMappedModeSTR(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_AddressSize_t AddressSize)
{
 80091d6:	b580      	push	{r7, lr}
 80091d8:	b098      	sub	sp, #96	; 0x60
 80091da:	af00      	add	r7, sp, #0
 80091dc:	6078      	str	r0, [r7, #4]
 80091de:	460b      	mov	r3, r1
 80091e0:	70fb      	strb	r3, [r7, #3]
 80091e2:	4613      	mov	r3, r2
 80091e4:	70bb      	strb	r3, [r7, #2]
  OSPI_RegularCmdTypeDef      s_command = {0};
 80091e6:	f107 0310 	add.w	r3, r7, #16
 80091ea:	2250      	movs	r2, #80	; 0x50
 80091ec:	2100      	movs	r1, #0
 80091ee:	4618      	mov	r0, r3
 80091f0:	f022 fbce 	bl	802b990 <memset>
  OSPI_MemoryMappedTypeDef s_mem_mapped_cfg = {0};
 80091f4:	f107 0308 	add.w	r3, r7, #8
 80091f8:	2200      	movs	r2, #0
 80091fa:	601a      	str	r2, [r3, #0]
 80091fc:	605a      	str	r2, [r3, #4]

  /* OPI mode and 3-bytes address size not supported by memory */
  if ((Mode == MX25LM51245G_OPI_MODE) && (AddressSize == MX25LM51245G_3BYTES_SIZE))
 80091fe:	78fb      	ldrb	r3, [r7, #3]
 8009200:	2b01      	cmp	r3, #1
 8009202:	d105      	bne.n	8009210 <MX25LM51245G_EnableMemoryMappedModeSTR+0x3a>
 8009204:	78bb      	ldrb	r3, [r7, #2]
 8009206:	2b00      	cmp	r3, #0
 8009208:	d102      	bne.n	8009210 <MX25LM51245G_EnableMemoryMappedModeSTR+0x3a>
  {
    return MX25LM51245G_ERROR;
 800920a:	f04f 33ff 	mov.w	r3, #4294967295
 800920e:	e088      	b.n	8009322 <MX25LM51245G_EnableMemoryMappedModeSTR+0x14c>
  }

  /* Initialize the read command */
  s_command.OperationType      = HAL_OSPI_OPTYPE_READ_CFG;
 8009210:	2301      	movs	r3, #1
 8009212:	613b      	str	r3, [r7, #16]
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
 8009214:	2300      	movs	r3, #0
 8009216:	617b      	str	r3, [r7, #20]
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 8009218:	78fb      	ldrb	r3, [r7, #3]
 800921a:	2b00      	cmp	r3, #0
 800921c:	d101      	bne.n	8009222 <MX25LM51245G_EnableMemoryMappedModeSTR+0x4c>
 800921e:	2301      	movs	r3, #1
 8009220:	e000      	b.n	8009224 <MX25LM51245G_EnableMemoryMappedModeSTR+0x4e>
 8009222:	2304      	movs	r3, #4
 8009224:	61fb      	str	r3, [r7, #28]
  s_command.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8009226:	2300      	movs	r3, #0
 8009228:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 800922a:	78fb      	ldrb	r3, [r7, #3]
 800922c:	2b00      	cmp	r3, #0
 800922e:	d101      	bne.n	8009234 <MX25LM51245G_EnableMemoryMappedModeSTR+0x5e>
 8009230:	2300      	movs	r3, #0
 8009232:	e000      	b.n	8009236 <MX25LM51245G_EnableMemoryMappedModeSTR+0x60>
 8009234:	2310      	movs	r3, #16
 8009236:	623b      	str	r3, [r7, #32]
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? ((AddressSize == MX25LM51245G_3BYTES_SIZE) ? MX25LM51245G_FAST_READ_CMD : MX25LM51245G_4_BYTE_ADDR_FAST_READ_CMD) : MX25LM51245G_OCTA_READ_CMD;
 8009238:	78fb      	ldrb	r3, [r7, #3]
 800923a:	2b00      	cmp	r3, #0
 800923c:	d106      	bne.n	800924c <MX25LM51245G_EnableMemoryMappedModeSTR+0x76>
 800923e:	78bb      	ldrb	r3, [r7, #2]
 8009240:	2b00      	cmp	r3, #0
 8009242:	d101      	bne.n	8009248 <MX25LM51245G_EnableMemoryMappedModeSTR+0x72>
 8009244:	230b      	movs	r3, #11
 8009246:	e003      	b.n	8009250 <MX25LM51245G_EnableMemoryMappedModeSTR+0x7a>
 8009248:	230c      	movs	r3, #12
 800924a:	e001      	b.n	8009250 <MX25LM51245G_EnableMemoryMappedModeSTR+0x7a>
 800924c:	f64e 4313 	movw	r3, #60435	; 0xec13
 8009250:	61bb      	str	r3, [r7, #24]
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_1_LINE : HAL_OSPI_ADDRESS_8_LINES;
 8009252:	78fb      	ldrb	r3, [r7, #3]
 8009254:	2b00      	cmp	r3, #0
 8009256:	d102      	bne.n	800925e <MX25LM51245G_EnableMemoryMappedModeSTR+0x88>
 8009258:	f44f 7380 	mov.w	r3, #256	; 0x100
 800925c:	e001      	b.n	8009262 <MX25LM51245G_EnableMemoryMappedModeSTR+0x8c>
 800925e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009262:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.AddressDtrMode     = HAL_OSPI_ADDRESS_DTR_DISABLE;
 8009264:	2300      	movs	r3, #0
 8009266:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.AddressSize        = (AddressSize == MX25LM51245G_3BYTES_SIZE) ? HAL_OSPI_ADDRESS_24_BITS : HAL_OSPI_ADDRESS_32_BITS;
 8009268:	78bb      	ldrb	r3, [r7, #2]
 800926a:	2b00      	cmp	r3, #0
 800926c:	d102      	bne.n	8009274 <MX25LM51245G_EnableMemoryMappedModeSTR+0x9e>
 800926e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009272:	e001      	b.n	8009278 <MX25LM51245G_EnableMemoryMappedModeSTR+0xa2>
 8009274:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8009278:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 800927a:	2300      	movs	r3, #0
 800927c:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 800927e:	78fb      	ldrb	r3, [r7, #3]
 8009280:	2b00      	cmp	r3, #0
 8009282:	d102      	bne.n	800928a <MX25LM51245G_EnableMemoryMappedModeSTR+0xb4>
 8009284:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009288:	e001      	b.n	800928e <MX25LM51245G_EnableMemoryMappedModeSTR+0xb8>
 800928a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800928e:	64bb      	str	r3, [r7, #72]	; 0x48
  s_command.DataDtrMode        = HAL_OSPI_DATA_DTR_DISABLE;
 8009290:	2300      	movs	r3, #0
 8009292:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.DummyCycles        = (Mode == MX25LM51245G_SPI_MODE) ? DUMMY_CYCLES_READ : DUMMY_CYCLES_READ_OCTAL;
 8009294:	78fb      	ldrb	r3, [r7, #3]
 8009296:	2b00      	cmp	r3, #0
 8009298:	d101      	bne.n	800929e <MX25LM51245G_EnableMemoryMappedModeSTR+0xc8>
 800929a:	2308      	movs	r3, #8
 800929c:	e000      	b.n	80092a0 <MX25LM51245G_EnableMemoryMappedModeSTR+0xca>
 800929e:	2306      	movs	r3, #6
 80092a0:	657b      	str	r3, [r7, #84]	; 0x54
  s_command.DQSMode            = HAL_OSPI_DQS_DISABLE;
 80092a2:	2300      	movs	r3, #0
 80092a4:	65bb      	str	r3, [r7, #88]	; 0x58
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 80092a6:	2300      	movs	r3, #0
 80092a8:	65fb      	str	r3, [r7, #92]	; 0x5c

  /* Send the read command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80092aa:	f107 0310 	add.w	r3, r7, #16
 80092ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80092b2:	4619      	mov	r1, r3
 80092b4:	6878      	ldr	r0, [r7, #4]
 80092b6:	f006 f8d5 	bl	800f464 <HAL_OSPI_Command>
 80092ba:	4603      	mov	r3, r0
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d002      	beq.n	80092c6 <MX25LM51245G_EnableMemoryMappedModeSTR+0xf0>
  {
    return MX25LM51245G_ERROR;
 80092c0:	f04f 33ff 	mov.w	r3, #4294967295
 80092c4:	e02d      	b.n	8009322 <MX25LM51245G_EnableMemoryMappedModeSTR+0x14c>
  }

  /* Initialize the program command */
  s_command.OperationType      = HAL_OSPI_OPTYPE_WRITE_CFG;
 80092c6:	2302      	movs	r3, #2
 80092c8:	613b      	str	r3, [r7, #16]
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? ((AddressSize == MX25LM51245G_3BYTES_SIZE) ? MX25LM51245G_PAGE_PROG_CMD : MX25LM51245G_4_BYTE_PAGE_PROG_CMD) : MX25LM51245G_OCTA_PAGE_PROG_CMD;
 80092ca:	78fb      	ldrb	r3, [r7, #3]
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d106      	bne.n	80092de <MX25LM51245G_EnableMemoryMappedModeSTR+0x108>
 80092d0:	78bb      	ldrb	r3, [r7, #2]
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d101      	bne.n	80092da <MX25LM51245G_EnableMemoryMappedModeSTR+0x104>
 80092d6:	2302      	movs	r3, #2
 80092d8:	e003      	b.n	80092e2 <MX25LM51245G_EnableMemoryMappedModeSTR+0x10c>
 80092da:	2312      	movs	r3, #18
 80092dc:	e001      	b.n	80092e2 <MX25LM51245G_EnableMemoryMappedModeSTR+0x10c>
 80092de:	f241 23ed 	movw	r3, #4845	; 0x12ed
 80092e2:	61bb      	str	r3, [r7, #24]
  s_command.DummyCycles        = 0U;
 80092e4:	2300      	movs	r3, #0
 80092e6:	657b      	str	r3, [r7, #84]	; 0x54

  /* Send the write command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80092e8:	f107 0310 	add.w	r3, r7, #16
 80092ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80092f0:	4619      	mov	r1, r3
 80092f2:	6878      	ldr	r0, [r7, #4]
 80092f4:	f006 f8b6 	bl	800f464 <HAL_OSPI_Command>
 80092f8:	4603      	mov	r3, r0
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d002      	beq.n	8009304 <MX25LM51245G_EnableMemoryMappedModeSTR+0x12e>
  {
    return MX25LM51245G_ERROR;
 80092fe:	f04f 33ff 	mov.w	r3, #4294967295
 8009302:	e00e      	b.n	8009322 <MX25LM51245G_EnableMemoryMappedModeSTR+0x14c>
  }

  /* Configure the memory mapped mode */
  s_mem_mapped_cfg.TimeOutActivation = HAL_OSPI_TIMEOUT_COUNTER_DISABLE;
 8009304:	2300      	movs	r3, #0
 8009306:	60bb      	str	r3, [r7, #8]

  if (HAL_OSPI_MemoryMapped(Ctx, &s_mem_mapped_cfg) != HAL_OK)
 8009308:	f107 0308 	add.w	r3, r7, #8
 800930c:	4619      	mov	r1, r3
 800930e:	6878      	ldr	r0, [r7, #4]
 8009310:	f006 fad2 	bl	800f8b8 <HAL_OSPI_MemoryMapped>
 8009314:	4603      	mov	r3, r0
 8009316:	2b00      	cmp	r3, #0
 8009318:	d002      	beq.n	8009320 <MX25LM51245G_EnableMemoryMappedModeSTR+0x14a>
  {
    return MX25LM51245G_ERROR;
 800931a:	f04f 33ff 	mov.w	r3, #4294967295
 800931e:	e000      	b.n	8009322 <MX25LM51245G_EnableMemoryMappedModeSTR+0x14c>
  }

  return MX25LM51245G_OK;
 8009320:	2300      	movs	r3, #0
}
 8009322:	4618      	mov	r0, r3
 8009324:	3760      	adds	r7, #96	; 0x60
 8009326:	46bd      	mov	sp, r7
 8009328:	bd80      	pop	{r7, pc}

0800932a <MX25LM51245G_EnableMemoryMappedModeDTR>:
  * @param  AddressSize Address size
  * @note   Only OPI mode support DTR transfer rate
  * @retval OSPI memory status
  */
int32_t MX25LM51245G_EnableMemoryMappedModeDTR(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode)
{
 800932a:	b580      	push	{r7, lr}
 800932c:	b098      	sub	sp, #96	; 0x60
 800932e:	af00      	add	r7, sp, #0
 8009330:	6078      	str	r0, [r7, #4]
 8009332:	460b      	mov	r3, r1
 8009334:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Mode);

  OSPI_RegularCmdTypeDef      s_command = {0};
 8009336:	f107 0310 	add.w	r3, r7, #16
 800933a:	2250      	movs	r2, #80	; 0x50
 800933c:	2100      	movs	r1, #0
 800933e:	4618      	mov	r0, r3
 8009340:	f022 fb26 	bl	802b990 <memset>
  OSPI_MemoryMappedTypeDef s_mem_mapped_cfg = {0};
 8009344:	f107 0308 	add.w	r3, r7, #8
 8009348:	2200      	movs	r2, #0
 800934a:	601a      	str	r2, [r3, #0]
 800934c:	605a      	str	r2, [r3, #4]

  /* Initialize the read command */
  s_command.OperationType      = HAL_OSPI_OPTYPE_READ_CFG;
 800934e:	2301      	movs	r3, #1
 8009350:	613b      	str	r3, [r7, #16]
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
 8009352:	2300      	movs	r3, #0
 8009354:	617b      	str	r3, [r7, #20]
  s_command.InstructionMode    = HAL_OSPI_INSTRUCTION_8_LINES;
 8009356:	2304      	movs	r3, #4
 8009358:	61fb      	str	r3, [r7, #28]
  s_command.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_ENABLE;
 800935a:	2308      	movs	r3, #8
 800935c:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.InstructionSize    = HAL_OSPI_INSTRUCTION_16_BITS;
 800935e:	2310      	movs	r3, #16
 8009360:	623b      	str	r3, [r7, #32]
  s_command.Instruction        = MX25LM51245G_OCTA_READ_DTR_CMD;
 8009362:	f64e 6311 	movw	r3, #60945	; 0xee11
 8009366:	61bb      	str	r3, [r7, #24]
  s_command.AddressMode        = HAL_OSPI_ADDRESS_8_LINES;
 8009368:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800936c:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.AddressDtrMode     = HAL_OSPI_ADDRESS_DTR_ENABLE;
 800936e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009372:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.AddressSize        = HAL_OSPI_ADDRESS_32_BITS;
 8009374:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8009378:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 800937a:	2300      	movs	r3, #0
 800937c:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DataMode           = HAL_OSPI_DATA_8_LINES;
 800937e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8009382:	64bb      	str	r3, [r7, #72]	; 0x48
  s_command.DataDtrMode        = HAL_OSPI_DATA_DTR_ENABLE;
 8009384:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009388:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.DummyCycles        = DUMMY_CYCLES_READ_OCTAL_DTR;
 800938a:	2306      	movs	r3, #6
 800938c:	657b      	str	r3, [r7, #84]	; 0x54
  s_command.DQSMode            = HAL_OSPI_DQS_ENABLE;
 800938e:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8009392:	65bb      	str	r3, [r7, #88]	; 0x58
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 8009394:	2300      	movs	r3, #0
 8009396:	65fb      	str	r3, [r7, #92]	; 0x5c

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8009398:	f107 0310 	add.w	r3, r7, #16
 800939c:	f241 3288 	movw	r2, #5000	; 0x1388
 80093a0:	4619      	mov	r1, r3
 80093a2:	6878      	ldr	r0, [r7, #4]
 80093a4:	f006 f85e 	bl	800f464 <HAL_OSPI_Command>
 80093a8:	4603      	mov	r3, r0
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d002      	beq.n	80093b4 <MX25LM51245G_EnableMemoryMappedModeDTR+0x8a>
  {
    return MX25LM51245G_ERROR;
 80093ae:	f04f 33ff 	mov.w	r3, #4294967295
 80093b2:	e025      	b.n	8009400 <MX25LM51245G_EnableMemoryMappedModeDTR+0xd6>
  }

  /* Initialize the program command */
  s_command.OperationType = HAL_OSPI_OPTYPE_WRITE_CFG;
 80093b4:	2302      	movs	r3, #2
 80093b6:	613b      	str	r3, [r7, #16]
  s_command.Instruction   = MX25LM51245G_OCTA_PAGE_PROG_CMD;
 80093b8:	f241 23ed 	movw	r3, #4845	; 0x12ed
 80093bc:	61bb      	str	r3, [r7, #24]
  s_command.DummyCycles   = 0U;
 80093be:	2300      	movs	r3, #0
 80093c0:	657b      	str	r3, [r7, #84]	; 0x54
  s_command.DQSMode       = HAL_OSPI_DQS_DISABLE;
 80093c2:	2300      	movs	r3, #0
 80093c4:	65bb      	str	r3, [r7, #88]	; 0x58

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80093c6:	f107 0310 	add.w	r3, r7, #16
 80093ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80093ce:	4619      	mov	r1, r3
 80093d0:	6878      	ldr	r0, [r7, #4]
 80093d2:	f006 f847 	bl	800f464 <HAL_OSPI_Command>
 80093d6:	4603      	mov	r3, r0
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d002      	beq.n	80093e2 <MX25LM51245G_EnableMemoryMappedModeDTR+0xb8>
  {
    return MX25LM51245G_ERROR;
 80093dc:	f04f 33ff 	mov.w	r3, #4294967295
 80093e0:	e00e      	b.n	8009400 <MX25LM51245G_EnableMemoryMappedModeDTR+0xd6>
  }
  /* Configure the memory mapped mode */
  s_mem_mapped_cfg.TimeOutActivation = HAL_OSPI_TIMEOUT_COUNTER_DISABLE;
 80093e2:	2300      	movs	r3, #0
 80093e4:	60bb      	str	r3, [r7, #8]

  if (HAL_OSPI_MemoryMapped(Ctx, &s_mem_mapped_cfg) != HAL_OK)
 80093e6:	f107 0308 	add.w	r3, r7, #8
 80093ea:	4619      	mov	r1, r3
 80093ec:	6878      	ldr	r0, [r7, #4]
 80093ee:	f006 fa63 	bl	800f8b8 <HAL_OSPI_MemoryMapped>
 80093f2:	4603      	mov	r3, r0
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d002      	beq.n	80093fe <MX25LM51245G_EnableMemoryMappedModeDTR+0xd4>
  {
    return MX25LM51245G_ERROR;
 80093f8:	f04f 33ff 	mov.w	r3, #4294967295
 80093fc:	e000      	b.n	8009400 <MX25LM51245G_EnableMemoryMappedModeDTR+0xd6>
  }

  return MX25LM51245G_OK;
 80093fe:	2300      	movs	r3, #0
}
 8009400:	4618      	mov	r0, r3
 8009402:	3760      	adds	r7, #96	; 0x60
 8009404:	46bd      	mov	sp, r7
 8009406:	bd80      	pop	{r7, pc}

08009408 <MX25LM51245G_WriteEnable>:
  * @param  Mode Interface mode
  * @param  Rate Transfer rate STR or DTR
  * @retval error status
  */
int32_t MX25LM51245G_WriteEnable(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_Transfer_t Rate)
{
 8009408:	b580      	push	{r7, lr}
 800940a:	b09c      	sub	sp, #112	; 0x70
 800940c:	af00      	add	r7, sp, #0
 800940e:	6078      	str	r0, [r7, #4]
 8009410:	460b      	mov	r3, r1
 8009412:	70fb      	strb	r3, [r7, #3]
 8009414:	4613      	mov	r3, r2
 8009416:	70bb      	strb	r3, [r7, #2]
  OSPI_RegularCmdTypeDef     s_command = {0};
 8009418:	f107 0320 	add.w	r3, r7, #32
 800941c:	2250      	movs	r2, #80	; 0x50
 800941e:	2100      	movs	r1, #0
 8009420:	4618      	mov	r0, r3
 8009422:	f022 fab5 	bl	802b990 <memset>
  OSPI_AutoPollingTypeDef s_config = {0};
 8009426:	f107 030c 	add.w	r3, r7, #12
 800942a:	2200      	movs	r2, #0
 800942c:	601a      	str	r2, [r3, #0]
 800942e:	605a      	str	r2, [r3, #4]
 8009430:	609a      	str	r2, [r3, #8]
 8009432:	60da      	str	r2, [r3, #12]
 8009434:	611a      	str	r2, [r3, #16]

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25LM51245G_SPI_MODE) && (Rate == MX25LM51245G_DTR_TRANSFER))
 8009436:	78fb      	ldrb	r3, [r7, #3]
 8009438:	2b00      	cmp	r3, #0
 800943a:	d105      	bne.n	8009448 <MX25LM51245G_WriteEnable+0x40>
 800943c:	78bb      	ldrb	r3, [r7, #2]
 800943e:	2b01      	cmp	r3, #1
 8009440:	d102      	bne.n	8009448 <MX25LM51245G_WriteEnable+0x40>
  {
    return MX25LM51245G_ERROR;
 8009442:	f04f 33ff 	mov.w	r3, #4294967295
 8009446:	e0a6      	b.n	8009596 <MX25LM51245G_WriteEnable+0x18e>
  }

  /* Initialize the write enable command */
  s_command.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 8009448:	2300      	movs	r3, #0
 800944a:	623b      	str	r3, [r7, #32]
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
 800944c:	2300      	movs	r3, #0
 800944e:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 8009450:	78fb      	ldrb	r3, [r7, #3]
 8009452:	2b00      	cmp	r3, #0
 8009454:	d101      	bne.n	800945a <MX25LM51245G_WriteEnable+0x52>
 8009456:	2301      	movs	r3, #1
 8009458:	e000      	b.n	800945c <MX25LM51245G_WriteEnable+0x54>
 800945a:	2304      	movs	r3, #4
 800945c:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 800945e:	78bb      	ldrb	r3, [r7, #2]
 8009460:	2b01      	cmp	r3, #1
 8009462:	d101      	bne.n	8009468 <MX25LM51245G_WriteEnable+0x60>
 8009464:	2308      	movs	r3, #8
 8009466:	e000      	b.n	800946a <MX25LM51245G_WriteEnable+0x62>
 8009468:	2300      	movs	r3, #0
 800946a:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 800946c:	78fb      	ldrb	r3, [r7, #3]
 800946e:	2b00      	cmp	r3, #0
 8009470:	d101      	bne.n	8009476 <MX25LM51245G_WriteEnable+0x6e>
 8009472:	2300      	movs	r3, #0
 8009474:	e000      	b.n	8009478 <MX25LM51245G_WriteEnable+0x70>
 8009476:	2310      	movs	r3, #16
 8009478:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_WRITE_ENABLE_CMD : MX25LM51245G_OCTA_WRITE_ENABLE_CMD;
 800947a:	78fb      	ldrb	r3, [r7, #3]
 800947c:	2b00      	cmp	r3, #0
 800947e:	d101      	bne.n	8009484 <MX25LM51245G_WriteEnable+0x7c>
 8009480:	2306      	movs	r3, #6
 8009482:	e001      	b.n	8009488 <MX25LM51245G_WriteEnable+0x80>
 8009484:	f240 63f9 	movw	r3, #1785	; 0x6f9
 8009488:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.AddressMode        = HAL_OSPI_ADDRESS_NONE;
 800948a:	2300      	movs	r3, #0
 800948c:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 800948e:	2300      	movs	r3, #0
 8009490:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DataMode           = HAL_OSPI_DATA_NONE;
 8009492:	2300      	movs	r3, #0
 8009494:	65bb      	str	r3, [r7, #88]	; 0x58
  s_command.DummyCycles        = 0U;
 8009496:	2300      	movs	r3, #0
 8009498:	667b      	str	r3, [r7, #100]	; 0x64
  s_command.DQSMode            = HAL_OSPI_DQS_DISABLE;
 800949a:	2300      	movs	r3, #0
 800949c:	66bb      	str	r3, [r7, #104]	; 0x68
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 800949e:	2300      	movs	r3, #0
 80094a0:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80094a2:	f107 0320 	add.w	r3, r7, #32
 80094a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80094aa:	4619      	mov	r1, r3
 80094ac:	6878      	ldr	r0, [r7, #4]
 80094ae:	f005 ffd9 	bl	800f464 <HAL_OSPI_Command>
 80094b2:	4603      	mov	r3, r0
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d002      	beq.n	80094be <MX25LM51245G_WriteEnable+0xb6>
  {
    return MX25LM51245G_ERROR;
 80094b8:	f04f 33ff 	mov.w	r3, #4294967295
 80094bc:	e06b      	b.n	8009596 <MX25LM51245G_WriteEnable+0x18e>
  }

  /* Configure automatic polling mode to wait for write enabling */
  s_command.Instruction    = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_READ_STATUS_REG_CMD : MX25LM51245G_OCTA_READ_STATUS_REG_CMD;
 80094be:	78fb      	ldrb	r3, [r7, #3]
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d101      	bne.n	80094c8 <MX25LM51245G_WriteEnable+0xc0>
 80094c4:	2305      	movs	r3, #5
 80094c6:	e001      	b.n	80094cc <MX25LM51245G_WriteEnable+0xc4>
 80094c8:	f240 53fa 	movw	r3, #1530	; 0x5fa
 80094cc:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.AddressMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_NONE : HAL_OSPI_ADDRESS_8_LINES;
 80094ce:	78fb      	ldrb	r3, [r7, #3]
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d101      	bne.n	80094d8 <MX25LM51245G_WriteEnable+0xd0>
 80094d4:	2300      	movs	r3, #0
 80094d6:	e001      	b.n	80094dc <MX25LM51245G_WriteEnable+0xd4>
 80094d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80094dc:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.AddressDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 80094de:	78bb      	ldrb	r3, [r7, #2]
 80094e0:	2b01      	cmp	r3, #1
 80094e2:	d102      	bne.n	80094ea <MX25LM51245G_WriteEnable+0xe2>
 80094e4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80094e8:	e000      	b.n	80094ec <MX25LM51245G_WriteEnable+0xe4>
 80094ea:	2300      	movs	r3, #0
 80094ec:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.AddressSize    = HAL_OSPI_ADDRESS_32_BITS;
 80094ee:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80094f2:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.Address        = 0U;
 80094f4:	2300      	movs	r3, #0
 80094f6:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.DataMode       = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 80094f8:	78fb      	ldrb	r3, [r7, #3]
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d102      	bne.n	8009504 <MX25LM51245G_WriteEnable+0xfc>
 80094fe:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009502:	e001      	b.n	8009508 <MX25LM51245G_WriteEnable+0x100>
 8009504:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8009508:	65bb      	str	r3, [r7, #88]	; 0x58
  s_command.DataDtrMode    = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 800950a:	78bb      	ldrb	r3, [r7, #2]
 800950c:	2b01      	cmp	r3, #1
 800950e:	d102      	bne.n	8009516 <MX25LM51245G_WriteEnable+0x10e>
 8009510:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009514:	e000      	b.n	8009518 <MX25LM51245G_WriteEnable+0x110>
 8009516:	2300      	movs	r3, #0
 8009518:	663b      	str	r3, [r7, #96]	; 0x60
  s_command.DummyCycles    = (Mode == MX25LM51245G_SPI_MODE) ? 0U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? DUMMY_CYCLES_REG_OCTAL_DTR : DUMMY_CYCLES_REG_OCTAL);
 800951a:	78fb      	ldrb	r3, [r7, #3]
 800951c:	2b00      	cmp	r3, #0
 800951e:	d101      	bne.n	8009524 <MX25LM51245G_WriteEnable+0x11c>
 8009520:	2300      	movs	r3, #0
 8009522:	e000      	b.n	8009526 <MX25LM51245G_WriteEnable+0x11e>
 8009524:	2305      	movs	r3, #5
 8009526:	667b      	str	r3, [r7, #100]	; 0x64
  s_command.NbData         = (Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U;
 8009528:	78bb      	ldrb	r3, [r7, #2]
 800952a:	2b01      	cmp	r3, #1
 800952c:	d101      	bne.n	8009532 <MX25LM51245G_WriteEnable+0x12a>
 800952e:	2302      	movs	r3, #2
 8009530:	e000      	b.n	8009534 <MX25LM51245G_WriteEnable+0x12c>
 8009532:	2301      	movs	r3, #1
 8009534:	65fb      	str	r3, [r7, #92]	; 0x5c
  s_command.DQSMode        = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DQS_ENABLE : HAL_OSPI_DQS_DISABLE;
 8009536:	78bb      	ldrb	r3, [r7, #2]
 8009538:	2b01      	cmp	r3, #1
 800953a:	d102      	bne.n	8009542 <MX25LM51245G_WriteEnable+0x13a>
 800953c:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8009540:	e000      	b.n	8009544 <MX25LM51245G_WriteEnable+0x13c>
 8009542:	2300      	movs	r3, #0
 8009544:	66bb      	str	r3, [r7, #104]	; 0x68

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8009546:	f107 0320 	add.w	r3, r7, #32
 800954a:	f241 3288 	movw	r2, #5000	; 0x1388
 800954e:	4619      	mov	r1, r3
 8009550:	6878      	ldr	r0, [r7, #4]
 8009552:	f005 ff87 	bl	800f464 <HAL_OSPI_Command>
 8009556:	4603      	mov	r3, r0
 8009558:	2b00      	cmp	r3, #0
 800955a:	d002      	beq.n	8009562 <MX25LM51245G_WriteEnable+0x15a>
  {
    return MX25LM51245G_ERROR;
 800955c:	f04f 33ff 	mov.w	r3, #4294967295
 8009560:	e019      	b.n	8009596 <MX25LM51245G_WriteEnable+0x18e>
  }

  s_config.Match           = 2U;
 8009562:	2302      	movs	r3, #2
 8009564:	60fb      	str	r3, [r7, #12]
  s_config.Mask            = 2U;
 8009566:	2302      	movs	r3, #2
 8009568:	613b      	str	r3, [r7, #16]
  s_config.MatchMode       = HAL_OSPI_MATCH_MODE_AND;
 800956a:	2300      	movs	r3, #0
 800956c:	617b      	str	r3, [r7, #20]
  s_config.Interval        = MX25LM51245G_AUTOPOLLING_INTERVAL_TIME;
 800956e:	2310      	movs	r3, #16
 8009570:	61fb      	str	r3, [r7, #28]
  s_config.AutomaticStop   = HAL_OSPI_AUTOMATIC_STOP_ENABLE;
 8009572:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8009576:	61bb      	str	r3, [r7, #24]

  if (HAL_OSPI_AutoPolling(Ctx, &s_config, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8009578:	f107 030c 	add.w	r3, r7, #12
 800957c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009580:	4619      	mov	r1, r3
 8009582:	6878      	ldr	r0, [r7, #4]
 8009584:	f006 f911 	bl	800f7aa <HAL_OSPI_AutoPolling>
 8009588:	4603      	mov	r3, r0
 800958a:	2b00      	cmp	r3, #0
 800958c:	d002      	beq.n	8009594 <MX25LM51245G_WriteEnable+0x18c>
  {
    return MX25LM51245G_ERROR;
 800958e:	f04f 33ff 	mov.w	r3, #4294967295
 8009592:	e000      	b.n	8009596 <MX25LM51245G_WriteEnable+0x18e>
  }

  return MX25LM51245G_OK;
 8009594:	2300      	movs	r3, #0
}
 8009596:	4618      	mov	r0, r3
 8009598:	3770      	adds	r7, #112	; 0x70
 800959a:	46bd      	mov	sp, r7
 800959c:	bd80      	pop	{r7, pc}

0800959e <MX25LM51245G_WriteCfg2Register>:
  * @param  Rate Transfer rate STR or DTR
  * @param  Value Value to write to configuration register
  * @retval error status
  */
int32_t MX25LM51245G_WriteCfg2Register(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_Transfer_t Rate, uint32_t WriteAddr, uint8_t Value)
{
 800959e:	b580      	push	{r7, lr}
 80095a0:	b098      	sub	sp, #96	; 0x60
 80095a2:	af00      	add	r7, sp, #0
 80095a4:	60f8      	str	r0, [r7, #12]
 80095a6:	607b      	str	r3, [r7, #4]
 80095a8:	460b      	mov	r3, r1
 80095aa:	72fb      	strb	r3, [r7, #11]
 80095ac:	4613      	mov	r3, r2
 80095ae:	72bb      	strb	r3, [r7, #10]
  OSPI_RegularCmdTypeDef s_command = {0};
 80095b0:	f107 0310 	add.w	r3, r7, #16
 80095b4:	2250      	movs	r2, #80	; 0x50
 80095b6:	2100      	movs	r1, #0
 80095b8:	4618      	mov	r0, r3
 80095ba:	f022 f9e9 	bl	802b990 <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25LM51245G_SPI_MODE) && (Rate == MX25LM51245G_DTR_TRANSFER))
 80095be:	7afb      	ldrb	r3, [r7, #11]
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d105      	bne.n	80095d0 <MX25LM51245G_WriteCfg2Register+0x32>
 80095c4:	7abb      	ldrb	r3, [r7, #10]
 80095c6:	2b01      	cmp	r3, #1
 80095c8:	d102      	bne.n	80095d0 <MX25LM51245G_WriteCfg2Register+0x32>
  {
    return MX25LM51245G_ERROR;
 80095ca:	f04f 33ff 	mov.w	r3, #4294967295
 80095ce:	e077      	b.n	80096c0 <MX25LM51245G_WriteCfg2Register+0x122>
  }

  /* Initialize the writing of configuration register 2 */
  s_command.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 80095d0:	2300      	movs	r3, #0
 80095d2:	613b      	str	r3, [r7, #16]
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
 80095d4:	2300      	movs	r3, #0
 80095d6:	617b      	str	r3, [r7, #20]
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 80095d8:	7afb      	ldrb	r3, [r7, #11]
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d101      	bne.n	80095e2 <MX25LM51245G_WriteCfg2Register+0x44>
 80095de:	2301      	movs	r3, #1
 80095e0:	e000      	b.n	80095e4 <MX25LM51245G_WriteCfg2Register+0x46>
 80095e2:	2304      	movs	r3, #4
 80095e4:	61fb      	str	r3, [r7, #28]
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 80095e6:	7abb      	ldrb	r3, [r7, #10]
 80095e8:	2b01      	cmp	r3, #1
 80095ea:	d101      	bne.n	80095f0 <MX25LM51245G_WriteCfg2Register+0x52>
 80095ec:	2308      	movs	r3, #8
 80095ee:	e000      	b.n	80095f2 <MX25LM51245G_WriteCfg2Register+0x54>
 80095f0:	2300      	movs	r3, #0
 80095f2:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 80095f4:	7afb      	ldrb	r3, [r7, #11]
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d101      	bne.n	80095fe <MX25LM51245G_WriteCfg2Register+0x60>
 80095fa:	2300      	movs	r3, #0
 80095fc:	e000      	b.n	8009600 <MX25LM51245G_WriteCfg2Register+0x62>
 80095fe:	2310      	movs	r3, #16
 8009600:	623b      	str	r3, [r7, #32]
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_WRITE_CFG_REG2_CMD : MX25LM51245G_OCTA_WRITE_CFG_REG2_CMD;
 8009602:	7afb      	ldrb	r3, [r7, #11]
 8009604:	2b00      	cmp	r3, #0
 8009606:	d101      	bne.n	800960c <MX25LM51245G_WriteCfg2Register+0x6e>
 8009608:	2372      	movs	r3, #114	; 0x72
 800960a:	e001      	b.n	8009610 <MX25LM51245G_WriteCfg2Register+0x72>
 800960c:	f247 238d 	movw	r3, #29325	; 0x728d
 8009610:	61bb      	str	r3, [r7, #24]
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_1_LINE : HAL_OSPI_ADDRESS_8_LINES;
 8009612:	7afb      	ldrb	r3, [r7, #11]
 8009614:	2b00      	cmp	r3, #0
 8009616:	d102      	bne.n	800961e <MX25LM51245G_WriteCfg2Register+0x80>
 8009618:	f44f 7380 	mov.w	r3, #256	; 0x100
 800961c:	e001      	b.n	8009622 <MX25LM51245G_WriteCfg2Register+0x84>
 800961e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009622:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.AddressDtrMode     = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 8009624:	7abb      	ldrb	r3, [r7, #10]
 8009626:	2b01      	cmp	r3, #1
 8009628:	d102      	bne.n	8009630 <MX25LM51245G_WriteCfg2Register+0x92>
 800962a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800962e:	e000      	b.n	8009632 <MX25LM51245G_WriteCfg2Register+0x94>
 8009630:	2300      	movs	r3, #0
 8009632:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.AddressSize        = HAL_OSPI_ADDRESS_32_BITS;
 8009634:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8009638:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.Address            = WriteAddr;
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 800963e:	2300      	movs	r3, #0
 8009640:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 8009642:	7afb      	ldrb	r3, [r7, #11]
 8009644:	2b00      	cmp	r3, #0
 8009646:	d102      	bne.n	800964e <MX25LM51245G_WriteCfg2Register+0xb0>
 8009648:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800964c:	e001      	b.n	8009652 <MX25LM51245G_WriteCfg2Register+0xb4>
 800964e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8009652:	64bb      	str	r3, [r7, #72]	; 0x48
  s_command.DataDtrMode        = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 8009654:	7abb      	ldrb	r3, [r7, #10]
 8009656:	2b01      	cmp	r3, #1
 8009658:	d102      	bne.n	8009660 <MX25LM51245G_WriteCfg2Register+0xc2>
 800965a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800965e:	e000      	b.n	8009662 <MX25LM51245G_WriteCfg2Register+0xc4>
 8009660:	2300      	movs	r3, #0
 8009662:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.DummyCycles        = 0U;
 8009664:	2300      	movs	r3, #0
 8009666:	657b      	str	r3, [r7, #84]	; 0x54
  s_command.NbData             = (Mode == MX25LM51245G_SPI_MODE) ? 1U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U);
 8009668:	7afb      	ldrb	r3, [r7, #11]
 800966a:	2b00      	cmp	r3, #0
 800966c:	d006      	beq.n	800967c <MX25LM51245G_WriteCfg2Register+0xde>
 800966e:	7abb      	ldrb	r3, [r7, #10]
 8009670:	2b01      	cmp	r3, #1
 8009672:	d101      	bne.n	8009678 <MX25LM51245G_WriteCfg2Register+0xda>
 8009674:	2302      	movs	r3, #2
 8009676:	e002      	b.n	800967e <MX25LM51245G_WriteCfg2Register+0xe0>
 8009678:	2301      	movs	r3, #1
 800967a:	e000      	b.n	800967e <MX25LM51245G_WriteCfg2Register+0xe0>
 800967c:	2301      	movs	r3, #1
 800967e:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DQSMode            = HAL_OSPI_DQS_DISABLE;
 8009680:	2300      	movs	r3, #0
 8009682:	65bb      	str	r3, [r7, #88]	; 0x58
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 8009684:	2300      	movs	r3, #0
 8009686:	65fb      	str	r3, [r7, #92]	; 0x5c

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8009688:	f107 0310 	add.w	r3, r7, #16
 800968c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009690:	4619      	mov	r1, r3
 8009692:	68f8      	ldr	r0, [r7, #12]
 8009694:	f005 fee6 	bl	800f464 <HAL_OSPI_Command>
 8009698:	4603      	mov	r3, r0
 800969a:	2b00      	cmp	r3, #0
 800969c:	d002      	beq.n	80096a4 <MX25LM51245G_WriteCfg2Register+0x106>
  {
    return MX25LM51245G_ERROR;
 800969e:	f04f 33ff 	mov.w	r3, #4294967295
 80096a2:	e00d      	b.n	80096c0 <MX25LM51245G_WriteCfg2Register+0x122>
  }

  if (HAL_OSPI_Transmit(Ctx, &Value, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80096a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80096a8:	f107 0168 	add.w	r1, r7, #104	; 0x68
 80096ac:	68f8      	ldr	r0, [r7, #12]
 80096ae:	f005 ff66 	bl	800f57e <HAL_OSPI_Transmit>
 80096b2:	4603      	mov	r3, r0
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d002      	beq.n	80096be <MX25LM51245G_WriteCfg2Register+0x120>
  {
    return MX25LM51245G_ERROR;
 80096b8:	f04f 33ff 	mov.w	r3, #4294967295
 80096bc:	e000      	b.n	80096c0 <MX25LM51245G_WriteCfg2Register+0x122>
  }

  return MX25LM51245G_OK;
 80096be:	2300      	movs	r3, #0
}
 80096c0:	4618      	mov	r0, r3
 80096c2:	3760      	adds	r7, #96	; 0x60
 80096c4:	46bd      	mov	sp, r7
 80096c6:	bd80      	pop	{r7, pc}

080096c8 <MX25LM51245G_ReadCfg2Register>:
  * @param  Rate Transfer rate STR or DTR
  * @param  Value configuration register 2 value pointer
  * @retval error status
  */
int32_t MX25LM51245G_ReadCfg2Register(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_Transfer_t Rate, uint32_t ReadAddr, uint8_t *Value)
{
 80096c8:	b580      	push	{r7, lr}
 80096ca:	b098      	sub	sp, #96	; 0x60
 80096cc:	af00      	add	r7, sp, #0
 80096ce:	60f8      	str	r0, [r7, #12]
 80096d0:	607b      	str	r3, [r7, #4]
 80096d2:	460b      	mov	r3, r1
 80096d4:	72fb      	strb	r3, [r7, #11]
 80096d6:	4613      	mov	r3, r2
 80096d8:	72bb      	strb	r3, [r7, #10]
  OSPI_RegularCmdTypeDef s_command = {0};
 80096da:	f107 0310 	add.w	r3, r7, #16
 80096de:	2250      	movs	r2, #80	; 0x50
 80096e0:	2100      	movs	r1, #0
 80096e2:	4618      	mov	r0, r3
 80096e4:	f022 f954 	bl	802b990 <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25LM51245G_SPI_MODE) && (Rate == MX25LM51245G_DTR_TRANSFER))
 80096e8:	7afb      	ldrb	r3, [r7, #11]
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d105      	bne.n	80096fa <MX25LM51245G_ReadCfg2Register+0x32>
 80096ee:	7abb      	ldrb	r3, [r7, #10]
 80096f0:	2b01      	cmp	r3, #1
 80096f2:	d102      	bne.n	80096fa <MX25LM51245G_ReadCfg2Register+0x32>
  {
    return MX25LM51245G_ERROR;
 80096f4:	f04f 33ff 	mov.w	r3, #4294967295
 80096f8:	e07c      	b.n	80097f4 <MX25LM51245G_ReadCfg2Register+0x12c>
  }

  /* Initialize the reading of status register */
  s_command.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 80096fa:	2300      	movs	r3, #0
 80096fc:	613b      	str	r3, [r7, #16]
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
 80096fe:	2300      	movs	r3, #0
 8009700:	617b      	str	r3, [r7, #20]
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 8009702:	7afb      	ldrb	r3, [r7, #11]
 8009704:	2b00      	cmp	r3, #0
 8009706:	d101      	bne.n	800970c <MX25LM51245G_ReadCfg2Register+0x44>
 8009708:	2301      	movs	r3, #1
 800970a:	e000      	b.n	800970e <MX25LM51245G_ReadCfg2Register+0x46>
 800970c:	2304      	movs	r3, #4
 800970e:	61fb      	str	r3, [r7, #28]
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8009710:	7abb      	ldrb	r3, [r7, #10]
 8009712:	2b01      	cmp	r3, #1
 8009714:	d101      	bne.n	800971a <MX25LM51245G_ReadCfg2Register+0x52>
 8009716:	2308      	movs	r3, #8
 8009718:	e000      	b.n	800971c <MX25LM51245G_ReadCfg2Register+0x54>
 800971a:	2300      	movs	r3, #0
 800971c:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 800971e:	7afb      	ldrb	r3, [r7, #11]
 8009720:	2b00      	cmp	r3, #0
 8009722:	d101      	bne.n	8009728 <MX25LM51245G_ReadCfg2Register+0x60>
 8009724:	2300      	movs	r3, #0
 8009726:	e000      	b.n	800972a <MX25LM51245G_ReadCfg2Register+0x62>
 8009728:	2310      	movs	r3, #16
 800972a:	623b      	str	r3, [r7, #32]
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_READ_CFG_REG2_CMD : MX25LM51245G_OCTA_READ_CFG_REG2_CMD;
 800972c:	7afb      	ldrb	r3, [r7, #11]
 800972e:	2b00      	cmp	r3, #0
 8009730:	d101      	bne.n	8009736 <MX25LM51245G_ReadCfg2Register+0x6e>
 8009732:	2371      	movs	r3, #113	; 0x71
 8009734:	e001      	b.n	800973a <MX25LM51245G_ReadCfg2Register+0x72>
 8009736:	f247 138e 	movw	r3, #29070	; 0x718e
 800973a:	61bb      	str	r3, [r7, #24]
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_1_LINE : HAL_OSPI_ADDRESS_8_LINES;
 800973c:	7afb      	ldrb	r3, [r7, #11]
 800973e:	2b00      	cmp	r3, #0
 8009740:	d102      	bne.n	8009748 <MX25LM51245G_ReadCfg2Register+0x80>
 8009742:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009746:	e001      	b.n	800974c <MX25LM51245G_ReadCfg2Register+0x84>
 8009748:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800974c:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.AddressDtrMode     = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 800974e:	7abb      	ldrb	r3, [r7, #10]
 8009750:	2b01      	cmp	r3, #1
 8009752:	d102      	bne.n	800975a <MX25LM51245G_ReadCfg2Register+0x92>
 8009754:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009758:	e000      	b.n	800975c <MX25LM51245G_ReadCfg2Register+0x94>
 800975a:	2300      	movs	r3, #0
 800975c:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.AddressSize        = HAL_OSPI_ADDRESS_32_BITS;
 800975e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8009762:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.Address            = ReadAddr;
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8009768:	2300      	movs	r3, #0
 800976a:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 800976c:	7afb      	ldrb	r3, [r7, #11]
 800976e:	2b00      	cmp	r3, #0
 8009770:	d102      	bne.n	8009778 <MX25LM51245G_ReadCfg2Register+0xb0>
 8009772:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009776:	e001      	b.n	800977c <MX25LM51245G_ReadCfg2Register+0xb4>
 8009778:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800977c:	64bb      	str	r3, [r7, #72]	; 0x48
  s_command.DataDtrMode        = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 800977e:	7abb      	ldrb	r3, [r7, #10]
 8009780:	2b01      	cmp	r3, #1
 8009782:	d102      	bne.n	800978a <MX25LM51245G_ReadCfg2Register+0xc2>
 8009784:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009788:	e000      	b.n	800978c <MX25LM51245G_ReadCfg2Register+0xc4>
 800978a:	2300      	movs	r3, #0
 800978c:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.DummyCycles        = (Mode == MX25LM51245G_SPI_MODE) ? 0U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? DUMMY_CYCLES_REG_OCTAL_DTR : DUMMY_CYCLES_REG_OCTAL);
 800978e:	7afb      	ldrb	r3, [r7, #11]
 8009790:	2b00      	cmp	r3, #0
 8009792:	d101      	bne.n	8009798 <MX25LM51245G_ReadCfg2Register+0xd0>
 8009794:	2300      	movs	r3, #0
 8009796:	e000      	b.n	800979a <MX25LM51245G_ReadCfg2Register+0xd2>
 8009798:	2305      	movs	r3, #5
 800979a:	657b      	str	r3, [r7, #84]	; 0x54
  s_command.NbData             = (Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U;
 800979c:	7abb      	ldrb	r3, [r7, #10]
 800979e:	2b01      	cmp	r3, #1
 80097a0:	d101      	bne.n	80097a6 <MX25LM51245G_ReadCfg2Register+0xde>
 80097a2:	2302      	movs	r3, #2
 80097a4:	e000      	b.n	80097a8 <MX25LM51245G_ReadCfg2Register+0xe0>
 80097a6:	2301      	movs	r3, #1
 80097a8:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DQSMode            = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DQS_ENABLE : HAL_OSPI_DQS_DISABLE;
 80097aa:	7abb      	ldrb	r3, [r7, #10]
 80097ac:	2b01      	cmp	r3, #1
 80097ae:	d102      	bne.n	80097b6 <MX25LM51245G_ReadCfg2Register+0xee>
 80097b0:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80097b4:	e000      	b.n	80097b8 <MX25LM51245G_ReadCfg2Register+0xf0>
 80097b6:	2300      	movs	r3, #0
 80097b8:	65bb      	str	r3, [r7, #88]	; 0x58
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 80097ba:	2300      	movs	r3, #0
 80097bc:	65fb      	str	r3, [r7, #92]	; 0x5c

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80097be:	f107 0310 	add.w	r3, r7, #16
 80097c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80097c6:	4619      	mov	r1, r3
 80097c8:	68f8      	ldr	r0, [r7, #12]
 80097ca:	f005 fe4b 	bl	800f464 <HAL_OSPI_Command>
 80097ce:	4603      	mov	r3, r0
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d002      	beq.n	80097da <MX25LM51245G_ReadCfg2Register+0x112>
  {
    return MX25LM51245G_ERROR;
 80097d4:	f04f 33ff 	mov.w	r3, #4294967295
 80097d8:	e00c      	b.n	80097f4 <MX25LM51245G_ReadCfg2Register+0x12c>
  }

  /* Reception of the data */
  if (HAL_OSPI_Receive(Ctx, Value, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80097da:	f241 3288 	movw	r2, #5000	; 0x1388
 80097de:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80097e0:	68f8      	ldr	r0, [r7, #12]
 80097e2:	f005 ff3f 	bl	800f664 <HAL_OSPI_Receive>
 80097e6:	4603      	mov	r3, r0
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d002      	beq.n	80097f2 <MX25LM51245G_ReadCfg2Register+0x12a>
  {
    return MX25LM51245G_ERROR;
 80097ec:	f04f 33ff 	mov.w	r3, #4294967295
 80097f0:	e000      	b.n	80097f4 <MX25LM51245G_ReadCfg2Register+0x12c>
  }

  return MX25LM51245G_OK;
 80097f2:	2300      	movs	r3, #0
}
 80097f4:	4618      	mov	r0, r3
 80097f6:	3760      	adds	r7, #96	; 0x60
 80097f8:	46bd      	mov	sp, r7
 80097fa:	bd80      	pop	{r7, pc}

080097fc <MX25LM51245G_ResetEnable>:
  * @param  Mode Interface select
  * @param  Rate Transfer rate STR or DTR
  * @retval error status
  */
int32_t MX25LM51245G_ResetEnable(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_Transfer_t Rate)
{
 80097fc:	b580      	push	{r7, lr}
 80097fe:	b096      	sub	sp, #88	; 0x58
 8009800:	af00      	add	r7, sp, #0
 8009802:	6078      	str	r0, [r7, #4]
 8009804:	460b      	mov	r3, r1
 8009806:	70fb      	strb	r3, [r7, #3]
 8009808:	4613      	mov	r3, r2
 800980a:	70bb      	strb	r3, [r7, #2]
  OSPI_RegularCmdTypeDef s_command = {0};
 800980c:	f107 0308 	add.w	r3, r7, #8
 8009810:	2250      	movs	r2, #80	; 0x50
 8009812:	2100      	movs	r1, #0
 8009814:	4618      	mov	r0, r3
 8009816:	f022 f8bb 	bl	802b990 <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25LM51245G_SPI_MODE) && (Rate == MX25LM51245G_DTR_TRANSFER))
 800981a:	78fb      	ldrb	r3, [r7, #3]
 800981c:	2b00      	cmp	r3, #0
 800981e:	d105      	bne.n	800982c <MX25LM51245G_ResetEnable+0x30>
 8009820:	78bb      	ldrb	r3, [r7, #2]
 8009822:	2b01      	cmp	r3, #1
 8009824:	d102      	bne.n	800982c <MX25LM51245G_ResetEnable+0x30>
  {
    return MX25LM51245G_ERROR;
 8009826:	f04f 33ff 	mov.w	r3, #4294967295
 800982a:	e03b      	b.n	80098a4 <MX25LM51245G_ResetEnable+0xa8>
  }

  /* Initialize the reset enable command */
  s_command.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 800982c:	2300      	movs	r3, #0
 800982e:	60bb      	str	r3, [r7, #8]
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
 8009830:	2300      	movs	r3, #0
 8009832:	60fb      	str	r3, [r7, #12]
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 8009834:	78fb      	ldrb	r3, [r7, #3]
 8009836:	2b00      	cmp	r3, #0
 8009838:	d101      	bne.n	800983e <MX25LM51245G_ResetEnable+0x42>
 800983a:	2301      	movs	r3, #1
 800983c:	e000      	b.n	8009840 <MX25LM51245G_ResetEnable+0x44>
 800983e:	2304      	movs	r3, #4
 8009840:	617b      	str	r3, [r7, #20]
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8009842:	78bb      	ldrb	r3, [r7, #2]
 8009844:	2b01      	cmp	r3, #1
 8009846:	d101      	bne.n	800984c <MX25LM51245G_ResetEnable+0x50>
 8009848:	2308      	movs	r3, #8
 800984a:	e000      	b.n	800984e <MX25LM51245G_ResetEnable+0x52>
 800984c:	2300      	movs	r3, #0
 800984e:	61fb      	str	r3, [r7, #28]
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 8009850:	78fb      	ldrb	r3, [r7, #3]
 8009852:	2b00      	cmp	r3, #0
 8009854:	d101      	bne.n	800985a <MX25LM51245G_ResetEnable+0x5e>
 8009856:	2300      	movs	r3, #0
 8009858:	e000      	b.n	800985c <MX25LM51245G_ResetEnable+0x60>
 800985a:	2310      	movs	r3, #16
 800985c:	61bb      	str	r3, [r7, #24]
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_RESET_ENABLE_CMD : MX25LM51245G_OCTA_RESET_ENABLE_CMD;
 800985e:	78fb      	ldrb	r3, [r7, #3]
 8009860:	2b00      	cmp	r3, #0
 8009862:	d101      	bne.n	8009868 <MX25LM51245G_ResetEnable+0x6c>
 8009864:	2366      	movs	r3, #102	; 0x66
 8009866:	e001      	b.n	800986c <MX25LM51245G_ResetEnable+0x70>
 8009868:	f246 6399 	movw	r3, #26265	; 0x6699
 800986c:	613b      	str	r3, [r7, #16]
  s_command.AddressMode        = HAL_OSPI_ADDRESS_NONE;
 800986e:	2300      	movs	r3, #0
 8009870:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8009872:	2300      	movs	r3, #0
 8009874:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DataMode           = HAL_OSPI_DATA_NONE;
 8009876:	2300      	movs	r3, #0
 8009878:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.DummyCycles        = 0U;
 800987a:	2300      	movs	r3, #0
 800987c:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DQSMode            = HAL_OSPI_DQS_DISABLE;
 800987e:	2300      	movs	r3, #0
 8009880:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 8009882:	2300      	movs	r3, #0
 8009884:	657b      	str	r3, [r7, #84]	; 0x54

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8009886:	f107 0308 	add.w	r3, r7, #8
 800988a:	f241 3288 	movw	r2, #5000	; 0x1388
 800988e:	4619      	mov	r1, r3
 8009890:	6878      	ldr	r0, [r7, #4]
 8009892:	f005 fde7 	bl	800f464 <HAL_OSPI_Command>
 8009896:	4603      	mov	r3, r0
 8009898:	2b00      	cmp	r3, #0
 800989a:	d002      	beq.n	80098a2 <MX25LM51245G_ResetEnable+0xa6>
  {
    return MX25LM51245G_ERROR;
 800989c:	f04f 33ff 	mov.w	r3, #4294967295
 80098a0:	e000      	b.n	80098a4 <MX25LM51245G_ResetEnable+0xa8>
  }

  return MX25LM51245G_OK;
 80098a2:	2300      	movs	r3, #0
}
 80098a4:	4618      	mov	r0, r3
 80098a6:	3758      	adds	r7, #88	; 0x58
 80098a8:	46bd      	mov	sp, r7
 80098aa:	bd80      	pop	{r7, pc}

080098ac <MX25LM51245G_ResetMemory>:
  * @param  Mode Interface select
  * @param  Rate Transfer rate STR or DTR
  * @retval error status
  */
int32_t MX25LM51245G_ResetMemory(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_Transfer_t Rate)
{
 80098ac:	b580      	push	{r7, lr}
 80098ae:	b096      	sub	sp, #88	; 0x58
 80098b0:	af00      	add	r7, sp, #0
 80098b2:	6078      	str	r0, [r7, #4]
 80098b4:	460b      	mov	r3, r1
 80098b6:	70fb      	strb	r3, [r7, #3]
 80098b8:	4613      	mov	r3, r2
 80098ba:	70bb      	strb	r3, [r7, #2]
  OSPI_RegularCmdTypeDef s_command = {0};
 80098bc:	f107 0308 	add.w	r3, r7, #8
 80098c0:	2250      	movs	r2, #80	; 0x50
 80098c2:	2100      	movs	r1, #0
 80098c4:	4618      	mov	r0, r3
 80098c6:	f022 f863 	bl	802b990 <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25LM51245G_SPI_MODE) && (Rate == MX25LM51245G_DTR_TRANSFER))
 80098ca:	78fb      	ldrb	r3, [r7, #3]
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d105      	bne.n	80098dc <MX25LM51245G_ResetMemory+0x30>
 80098d0:	78bb      	ldrb	r3, [r7, #2]
 80098d2:	2b01      	cmp	r3, #1
 80098d4:	d102      	bne.n	80098dc <MX25LM51245G_ResetMemory+0x30>
  {
    return MX25LM51245G_ERROR;
 80098d6:	f04f 33ff 	mov.w	r3, #4294967295
 80098da:	e03b      	b.n	8009954 <MX25LM51245G_ResetMemory+0xa8>
  }

  /* Initialize the reset enable command */
  s_command.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 80098dc:	2300      	movs	r3, #0
 80098de:	60bb      	str	r3, [r7, #8]
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
 80098e0:	2300      	movs	r3, #0
 80098e2:	60fb      	str	r3, [r7, #12]
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 80098e4:	78fb      	ldrb	r3, [r7, #3]
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d101      	bne.n	80098ee <MX25LM51245G_ResetMemory+0x42>
 80098ea:	2301      	movs	r3, #1
 80098ec:	e000      	b.n	80098f0 <MX25LM51245G_ResetMemory+0x44>
 80098ee:	2304      	movs	r3, #4
 80098f0:	617b      	str	r3, [r7, #20]
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 80098f2:	78bb      	ldrb	r3, [r7, #2]
 80098f4:	2b01      	cmp	r3, #1
 80098f6:	d101      	bne.n	80098fc <MX25LM51245G_ResetMemory+0x50>
 80098f8:	2308      	movs	r3, #8
 80098fa:	e000      	b.n	80098fe <MX25LM51245G_ResetMemory+0x52>
 80098fc:	2300      	movs	r3, #0
 80098fe:	61fb      	str	r3, [r7, #28]
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 8009900:	78fb      	ldrb	r3, [r7, #3]
 8009902:	2b00      	cmp	r3, #0
 8009904:	d101      	bne.n	800990a <MX25LM51245G_ResetMemory+0x5e>
 8009906:	2300      	movs	r3, #0
 8009908:	e000      	b.n	800990c <MX25LM51245G_ResetMemory+0x60>
 800990a:	2310      	movs	r3, #16
 800990c:	61bb      	str	r3, [r7, #24]
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_RESET_MEMORY_CMD : MX25LM51245G_OCTA_RESET_MEMORY_CMD;
 800990e:	78fb      	ldrb	r3, [r7, #3]
 8009910:	2b00      	cmp	r3, #0
 8009912:	d101      	bne.n	8009918 <MX25LM51245G_ResetMemory+0x6c>
 8009914:	2399      	movs	r3, #153	; 0x99
 8009916:	e001      	b.n	800991c <MX25LM51245G_ResetMemory+0x70>
 8009918:	f649 1366 	movw	r3, #39270	; 0x9966
 800991c:	613b      	str	r3, [r7, #16]
  s_command.AddressMode        = HAL_OSPI_ADDRESS_NONE;
 800991e:	2300      	movs	r3, #0
 8009920:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8009922:	2300      	movs	r3, #0
 8009924:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DataMode           = HAL_OSPI_DATA_NONE;
 8009926:	2300      	movs	r3, #0
 8009928:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.DummyCycles        = 0U;
 800992a:	2300      	movs	r3, #0
 800992c:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DQSMode            = HAL_OSPI_DQS_DISABLE;
 800992e:	2300      	movs	r3, #0
 8009930:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 8009932:	2300      	movs	r3, #0
 8009934:	657b      	str	r3, [r7, #84]	; 0x54

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8009936:	f107 0308 	add.w	r3, r7, #8
 800993a:	f241 3288 	movw	r2, #5000	; 0x1388
 800993e:	4619      	mov	r1, r3
 8009940:	6878      	ldr	r0, [r7, #4]
 8009942:	f005 fd8f 	bl	800f464 <HAL_OSPI_Command>
 8009946:	4603      	mov	r3, r0
 8009948:	2b00      	cmp	r3, #0
 800994a:	d002      	beq.n	8009952 <MX25LM51245G_ResetMemory+0xa6>
  {
    return MX25LM51245G_ERROR;
 800994c:	f04f 33ff 	mov.w	r3, #4294967295
 8009950:	e000      	b.n	8009954 <MX25LM51245G_ResetMemory+0xa8>
  }

  return MX25LM51245G_OK;
 8009952:	2300      	movs	r3, #0
}
 8009954:	4618      	mov	r0, r3
 8009956:	3758      	adds	r7, #88	; 0x58
 8009958:	46bd      	mov	sp, r7
 800995a:	bd80      	pop	{r7, pc}

0800995c <BSP_I2C4_Init>:
/**
  * @brief  Initializes I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C4_Init(void)
{
 800995c:	b580      	push	{r7, lr}
 800995e:	b082      	sub	sp, #8
 8009960:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8009962:	2300      	movs	r3, #0
 8009964:	607b      	str	r3, [r7, #4]

  hbus_i2c4.Instance = BUS_I2C4;
 8009966:	4b16      	ldr	r3, [pc, #88]	; (80099c0 <BSP_I2C4_Init+0x64>)
 8009968:	4a16      	ldr	r2, [pc, #88]	; (80099c4 <BSP_I2C4_Init+0x68>)
 800996a:	601a      	str	r2, [r3, #0]

  if (I2c4InitCounter == 0U)
 800996c:	4b16      	ldr	r3, [pc, #88]	; (80099c8 <BSP_I2C4_Init+0x6c>)
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	2b00      	cmp	r3, #0
 8009972:	d11f      	bne.n	80099b4 <BSP_I2C4_Init+0x58>
  {
    I2c4InitCounter++;
 8009974:	4b14      	ldr	r3, [pc, #80]	; (80099c8 <BSP_I2C4_Init+0x6c>)
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	3301      	adds	r3, #1
 800997a:	4a13      	ldr	r2, [pc, #76]	; (80099c8 <BSP_I2C4_Init+0x6c>)
 800997c:	6013      	str	r3, [r2, #0]

    if (HAL_I2C_GetState(&hbus_i2c4) == HAL_I2C_STATE_RESET)
 800997e:	4810      	ldr	r0, [pc, #64]	; (80099c0 <BSP_I2C4_Init+0x64>)
 8009980:	f004 fc5e 	bl	800e240 <HAL_I2C_GetState>
 8009984:	4603      	mov	r3, r0
 8009986:	2b00      	cmp	r3, #0
 8009988:	d114      	bne.n	80099b4 <BSP_I2C4_Init+0x58>
    {
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
      /* Init the I2C4 Msp */
      I2C4_MspInit(&hbus_i2c4);
 800998a:	480d      	ldr	r0, [pc, #52]	; (80099c0 <BSP_I2C4_Init+0x64>)
 800998c:	f000 fb60 	bl	800a050 <I2C4_MspInit>
        }
      }
      if (ret == BSP_ERROR_NONE)
      {
#endif
        if (MX_I2C4_Init(&hbus_i2c4, I2C_GetTiming(HAL_RCC_GetPCLK2Freq(), BUS_I2C4_FREQUENCY)) != HAL_OK)
 8009990:	f007 fa5a 	bl	8010e48 <HAL_RCC_GetPCLK2Freq>
 8009994:	4603      	mov	r3, r0
 8009996:	490d      	ldr	r1, [pc, #52]	; (80099cc <BSP_I2C4_Init+0x70>)
 8009998:	4618      	mov	r0, r3
 800999a:	f000 f8e3 	bl	8009b64 <I2C_GetTiming>
 800999e:	4603      	mov	r3, r0
 80099a0:	4619      	mov	r1, r3
 80099a2:	4807      	ldr	r0, [pc, #28]	; (80099c0 <BSP_I2C4_Init+0x64>)
 80099a4:	f000 f838 	bl	8009a18 <MX_I2C4_Init>
 80099a8:	4603      	mov	r3, r0
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d002      	beq.n	80099b4 <BSP_I2C4_Init+0x58>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 80099ae:	f06f 0307 	mvn.w	r3, #7
 80099b2:	607b      	str	r3, [r7, #4]
      }
#endif
    }
  }

  return ret;
 80099b4:	687b      	ldr	r3, [r7, #4]
}
 80099b6:	4618      	mov	r0, r3
 80099b8:	3708      	adds	r7, #8
 80099ba:	46bd      	mov	sp, r7
 80099bc:	bd80      	pop	{r7, pc}
 80099be:	bf00      	nop
 80099c0:	2400ce40 	.word	0x2400ce40
 80099c4:	58001c00 	.word	0x58001c00
 80099c8:	24003148 	.word	0x24003148
 80099cc:	000186a0 	.word	0x000186a0

080099d0 <BSP_I2C4_DeInit>:
/**
  * @brief  DeInitializes I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C4_DeInit(void)
{
 80099d0:	b580      	push	{r7, lr}
 80099d2:	b082      	sub	sp, #8
 80099d4:	af00      	add	r7, sp, #0
  int32_t ret  = BSP_ERROR_NONE;
 80099d6:	2300      	movs	r3, #0
 80099d8:	607b      	str	r3, [r7, #4]

  I2c4InitCounter--;
 80099da:	4b0d      	ldr	r3, [pc, #52]	; (8009a10 <BSP_I2C4_DeInit+0x40>)
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	3b01      	subs	r3, #1
 80099e0:	4a0b      	ldr	r2, [pc, #44]	; (8009a10 <BSP_I2C4_DeInit+0x40>)
 80099e2:	6013      	str	r3, [r2, #0]

  if (I2c4InitCounter == 0U)
 80099e4:	4b0a      	ldr	r3, [pc, #40]	; (8009a10 <BSP_I2C4_DeInit+0x40>)
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d10b      	bne.n	8009a04 <BSP_I2C4_DeInit+0x34>
  {
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
    I2C4_MspDeInit(&hbus_i2c4);
 80099ec:	4809      	ldr	r0, [pc, #36]	; (8009a14 <BSP_I2C4_DeInit+0x44>)
 80099ee:	f000 fb9b 	bl	800a128 <I2C4_MspDeInit>
#endif /* (USE_HAL_I2C_REGISTER_CALLBACKS == 0) */

    /* Init the I2C */
    if (HAL_I2C_DeInit(&hbus_i2c4) != HAL_OK)
 80099f2:	4808      	ldr	r0, [pc, #32]	; (8009a14 <BSP_I2C4_DeInit+0x44>)
 80099f4:	f004 f9c6 	bl	800dd84 <HAL_I2C_DeInit>
 80099f8:	4603      	mov	r3, r0
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d002      	beq.n	8009a04 <BSP_I2C4_DeInit+0x34>
    {
      ret = BSP_ERROR_BUS_FAILURE;
 80099fe:	f06f 0307 	mvn.w	r3, #7
 8009a02:	607b      	str	r3, [r7, #4]
    }
  }

  return ret;
 8009a04:	687b      	ldr	r3, [r7, #4]
}
 8009a06:	4618      	mov	r0, r3
 8009a08:	3708      	adds	r7, #8
 8009a0a:	46bd      	mov	sp, r7
 8009a0c:	bd80      	pop	{r7, pc}
 8009a0e:	bf00      	nop
 8009a10:	24003148 	.word	0x24003148
 8009a14:	2400ce40 	.word	0x2400ce40

08009a18 <MX_I2C4_Init>:
  * @param  hI2c I2C handle
  * @param  timing I2C timing
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_I2C4_Init(I2C_HandleTypeDef *hI2c, uint32_t timing)
{
 8009a18:	b580      	push	{r7, lr}
 8009a1a:	b084      	sub	sp, #16
 8009a1c:	af00      	add	r7, sp, #0
 8009a1e:	6078      	str	r0, [r7, #4]
 8009a20:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009a22:	2300      	movs	r3, #0
 8009a24:	73fb      	strb	r3, [r7, #15]

  hI2c->Init.Timing           = timing;
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	683a      	ldr	r2, [r7, #0]
 8009a2a:	605a      	str	r2, [r3, #4]
  hI2c->Init.OwnAddress1      = 0;
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	2200      	movs	r2, #0
 8009a30:	609a      	str	r2, [r3, #8]
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	2201      	movs	r2, #1
 8009a36:	60da      	str	r2, [r3, #12]
  hI2c->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	2200      	movs	r2, #0
 8009a3c:	611a      	str	r2, [r3, #16]
  hI2c->Init.OwnAddress2      = 0;
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	2200      	movs	r2, #0
 8009a42:	615a      	str	r2, [r3, #20]
  hI2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	2200      	movs	r2, #0
 8009a48:	619a      	str	r2, [r3, #24]
  hI2c->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	2200      	movs	r2, #0
 8009a4e:	61da      	str	r2, [r3, #28]
  hI2c->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	2200      	movs	r2, #0
 8009a54:	621a      	str	r2, [r3, #32]

  if (HAL_I2C_Init(hI2c) != HAL_OK)
 8009a56:	6878      	ldr	r0, [r7, #4]
 8009a58:	f004 f904 	bl	800dc64 <HAL_I2C_Init>
 8009a5c:	4603      	mov	r3, r0
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d002      	beq.n	8009a68 <MX_I2C4_Init+0x50>
  {
    status = HAL_ERROR;
 8009a62:	2301      	movs	r3, #1
 8009a64:	73fb      	strb	r3, [r7, #15]
 8009a66:	e014      	b.n	8009a92 <MX_I2C4_Init+0x7a>
  }
  else
  {
    uint32_t analog_filter;

    analog_filter = I2C_ANALOGFILTER_ENABLE;
 8009a68:	2300      	movs	r3, #0
 8009a6a:	60bb      	str	r3, [r7, #8]
    if (HAL_I2CEx_ConfigAnalogFilter(hI2c, analog_filter) != HAL_OK)
 8009a6c:	68b9      	ldr	r1, [r7, #8]
 8009a6e:	6878      	ldr	r0, [r7, #4]
 8009a70:	f004 fe1c 	bl	800e6ac <HAL_I2CEx_ConfigAnalogFilter>
 8009a74:	4603      	mov	r3, r0
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d002      	beq.n	8009a80 <MX_I2C4_Init+0x68>
    {
      status = HAL_ERROR;
 8009a7a:	2301      	movs	r3, #1
 8009a7c:	73fb      	strb	r3, [r7, #15]
 8009a7e:	e008      	b.n	8009a92 <MX_I2C4_Init+0x7a>
    }
    else
    {
      if (HAL_I2CEx_ConfigDigitalFilter(hI2c, I2C_DIGITAL_FILTER_COEF) != HAL_OK)
 8009a80:	2100      	movs	r1, #0
 8009a82:	6878      	ldr	r0, [r7, #4]
 8009a84:	f004 fe5d 	bl	800e742 <HAL_I2CEx_ConfigDigitalFilter>
 8009a88:	4603      	mov	r3, r0
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d001      	beq.n	8009a92 <MX_I2C4_Init+0x7a>
      {
        status = HAL_ERROR;
 8009a8e:	2301      	movs	r3, #1
 8009a90:	73fb      	strb	r3, [r7, #15]
      }
    }
  }

  return status;
 8009a92:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a94:	4618      	mov	r0, r3
 8009a96:	3710      	adds	r7, #16
 8009a98:	46bd      	mov	sp, r7
 8009a9a:	bd80      	pop	{r7, pc}

08009a9c <BSP_I2C4_WriteReg>:
  * @param  pData  The target register value to be written
  * @param  Length buffer size to be written
  * @retval BSP status
  */
int32_t BSP_I2C4_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8009a9c:	b580      	push	{r7, lr}
 8009a9e:	b088      	sub	sp, #32
 8009aa0:	af02      	add	r7, sp, #8
 8009aa2:	60ba      	str	r2, [r7, #8]
 8009aa4:	461a      	mov	r2, r3
 8009aa6:	4603      	mov	r3, r0
 8009aa8:	81fb      	strh	r3, [r7, #14]
 8009aaa:	460b      	mov	r3, r1
 8009aac:	81bb      	strh	r3, [r7, #12]
 8009aae:	4613      	mov	r3, r2
 8009ab0:	80fb      	strh	r3, [r7, #6]
  int32_t ret;

  if(I2C4_WriteReg(DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length) == 0)
 8009ab2:	89b9      	ldrh	r1, [r7, #12]
 8009ab4:	89f8      	ldrh	r0, [r7, #14]
 8009ab6:	88fb      	ldrh	r3, [r7, #6]
 8009ab8:	9300      	str	r3, [sp, #0]
 8009aba:	68bb      	ldr	r3, [r7, #8]
 8009abc:	2201      	movs	r2, #1
 8009abe:	f000 fb57 	bl	800a170 <I2C4_WriteReg>
 8009ac2:	4603      	mov	r3, r0
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d102      	bne.n	8009ace <BSP_I2C4_WriteReg+0x32>
  {
    ret = BSP_ERROR_NONE;
 8009ac8:	2300      	movs	r3, #0
 8009aca:	617b      	str	r3, [r7, #20]
 8009acc:	e00c      	b.n	8009ae8 <BSP_I2C4_WriteReg+0x4c>
  }
  else
  {
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 8009ace:	4809      	ldr	r0, [pc, #36]	; (8009af4 <BSP_I2C4_WriteReg+0x58>)
 8009ad0:	f004 fbc4 	bl	800e25c <HAL_I2C_GetError>
 8009ad4:	4603      	mov	r3, r0
 8009ad6:	2b04      	cmp	r3, #4
 8009ad8:	d103      	bne.n	8009ae2 <BSP_I2C4_WriteReg+0x46>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8009ada:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8009ade:	617b      	str	r3, [r7, #20]
 8009ae0:	e002      	b.n	8009ae8 <BSP_I2C4_WriteReg+0x4c>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8009ae2:	f06f 0303 	mvn.w	r3, #3
 8009ae6:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 8009ae8:	697b      	ldr	r3, [r7, #20]
}
 8009aea:	4618      	mov	r0, r3
 8009aec:	3718      	adds	r7, #24
 8009aee:	46bd      	mov	sp, r7
 8009af0:	bd80      	pop	{r7, pc}
 8009af2:	bf00      	nop
 8009af4:	2400ce40 	.word	0x2400ce40

08009af8 <BSP_I2C4_ReadReg>:
  * @param  pData   Pointer to data buffer
  * @param  Length  Length of the data
  * @retval BSP status
  */
int32_t BSP_I2C4_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8009af8:	b580      	push	{r7, lr}
 8009afa:	b088      	sub	sp, #32
 8009afc:	af02      	add	r7, sp, #8
 8009afe:	60ba      	str	r2, [r7, #8]
 8009b00:	461a      	mov	r2, r3
 8009b02:	4603      	mov	r3, r0
 8009b04:	81fb      	strh	r3, [r7, #14]
 8009b06:	460b      	mov	r3, r1
 8009b08:	81bb      	strh	r3, [r7, #12]
 8009b0a:	4613      	mov	r3, r2
 8009b0c:	80fb      	strh	r3, [r7, #6]
  int32_t ret;

  if(I2C4_ReadReg(DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length) == 0)
 8009b0e:	89b9      	ldrh	r1, [r7, #12]
 8009b10:	89f8      	ldrh	r0, [r7, #14]
 8009b12:	88fb      	ldrh	r3, [r7, #6]
 8009b14:	9300      	str	r3, [sp, #0]
 8009b16:	68bb      	ldr	r3, [r7, #8]
 8009b18:	2201      	movs	r2, #1
 8009b1a:	f000 fb4f 	bl	800a1bc <I2C4_ReadReg>
 8009b1e:	4603      	mov	r3, r0
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d102      	bne.n	8009b2a <BSP_I2C4_ReadReg+0x32>
  {
    ret = BSP_ERROR_NONE;
 8009b24:	2300      	movs	r3, #0
 8009b26:	617b      	str	r3, [r7, #20]
 8009b28:	e00c      	b.n	8009b44 <BSP_I2C4_ReadReg+0x4c>
  }
  else
  {
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 8009b2a:	4809      	ldr	r0, [pc, #36]	; (8009b50 <BSP_I2C4_ReadReg+0x58>)
 8009b2c:	f004 fb96 	bl	800e25c <HAL_I2C_GetError>
 8009b30:	4603      	mov	r3, r0
 8009b32:	2b04      	cmp	r3, #4
 8009b34:	d103      	bne.n	8009b3e <BSP_I2C4_ReadReg+0x46>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8009b36:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8009b3a:	617b      	str	r3, [r7, #20]
 8009b3c:	e002      	b.n	8009b44 <BSP_I2C4_ReadReg+0x4c>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8009b3e:	f06f 0303 	mvn.w	r3, #3
 8009b42:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 8009b44:	697b      	ldr	r3, [r7, #20]
}
 8009b46:	4618      	mov	r0, r3
 8009b48:	3718      	adds	r7, #24
 8009b4a:	46bd      	mov	sp, r7
 8009b4c:	bd80      	pop	{r7, pc}
 8009b4e:	bf00      	nop
 8009b50:	2400ce40 	.word	0x2400ce40

08009b54 <BSP_GetTick>:
/**
  * @brief  Delay function
  * @retval Tick value
  */
int32_t BSP_GetTick(void)
{
 8009b54:	b580      	push	{r7, lr}
 8009b56:	af00      	add	r7, sp, #0
  return (int32_t)HAL_GetTick();
 8009b58:	f001 fcc6 	bl	800b4e8 <HAL_GetTick>
 8009b5c:	4603      	mov	r3, r0
}
 8009b5e:	4618      	mov	r0, r3
 8009b60:	bd80      	pop	{r7, pc}
	...

08009b64 <I2C_GetTiming>:
  * @param  clock_src_freq I2C clock source in Hz.
  * @param  i2c_freq Required I2C clock in Hz.
  * @retval I2C timing or 0 in case of error.
  */
static uint32_t I2C_GetTiming(uint32_t clock_src_freq, uint32_t i2c_freq)
{
 8009b64:	b580      	push	{r7, lr}
 8009b66:	b086      	sub	sp, #24
 8009b68:	af00      	add	r7, sp, #0
 8009b6a:	6078      	str	r0, [r7, #4]
 8009b6c:	6039      	str	r1, [r7, #0]
  uint32_t ret = 0;
 8009b6e:	2300      	movs	r3, #0
 8009b70:	617b      	str	r3, [r7, #20]
  uint32_t speed;
  uint32_t idx;

  if((clock_src_freq != 0U) && (i2c_freq != 0U))
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d06b      	beq.n	8009c50 <I2C_GetTiming+0xec>
 8009b78:	683b      	ldr	r3, [r7, #0]
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d068      	beq.n	8009c50 <I2C_GetTiming+0xec>
  {
    for ( speed = 0 ; speed <=  (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
 8009b7e:	2300      	movs	r3, #0
 8009b80:	613b      	str	r3, [r7, #16]
 8009b82:	e060      	b.n	8009c46 <I2C_GetTiming+0xe2>
    {
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
 8009b84:	4a35      	ldr	r2, [pc, #212]	; (8009c5c <I2C_GetTiming+0xf8>)
 8009b86:	693b      	ldr	r3, [r7, #16]
 8009b88:	212c      	movs	r1, #44	; 0x2c
 8009b8a:	fb01 f303 	mul.w	r3, r1, r3
 8009b8e:	4413      	add	r3, r2
 8009b90:	3304      	adds	r3, #4
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	683a      	ldr	r2, [r7, #0]
 8009b96:	429a      	cmp	r2, r3
 8009b98:	d352      	bcc.n	8009c40 <I2C_GetTiming+0xdc>
          (i2c_freq <= I2C_Charac[speed].freq_max))
 8009b9a:	4a30      	ldr	r2, [pc, #192]	; (8009c5c <I2C_GetTiming+0xf8>)
 8009b9c:	693b      	ldr	r3, [r7, #16]
 8009b9e:	212c      	movs	r1, #44	; 0x2c
 8009ba0:	fb01 f303 	mul.w	r3, r1, r3
 8009ba4:	4413      	add	r3, r2
 8009ba6:	3308      	adds	r3, #8
 8009ba8:	681b      	ldr	r3, [r3, #0]
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
 8009baa:	683a      	ldr	r2, [r7, #0]
 8009bac:	429a      	cmp	r2, r3
 8009bae:	d847      	bhi.n	8009c40 <I2C_GetTiming+0xdc>
      {
        I2C_Compute_PRESC_SCLDEL_SDADEL(clock_src_freq, speed);
 8009bb0:	6939      	ldr	r1, [r7, #16]
 8009bb2:	6878      	ldr	r0, [r7, #4]
 8009bb4:	f000 f856 	bl	8009c64 <I2C_Compute_PRESC_SCLDEL_SDADEL>
        idx = I2C_Compute_SCLL_SCLH(clock_src_freq, speed);
 8009bb8:	6939      	ldr	r1, [r7, #16]
 8009bba:	6878      	ldr	r0, [r7, #4]
 8009bbc:	f000 f940 	bl	8009e40 <I2C_Compute_SCLL_SCLH>
 8009bc0:	60f8      	str	r0, [r7, #12]

        if (idx < I2C_VALID_TIMING_NBR)
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	2b7f      	cmp	r3, #127	; 0x7f
 8009bc6:	d842      	bhi.n	8009c4e <I2C_GetTiming+0xea>
        {
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8009bc8:	4925      	ldr	r1, [pc, #148]	; (8009c60 <I2C_GetTiming+0xfc>)
 8009bca:	68fa      	ldr	r2, [r7, #12]
 8009bcc:	4613      	mov	r3, r2
 8009bce:	009b      	lsls	r3, r3, #2
 8009bd0:	4413      	add	r3, r2
 8009bd2:	009b      	lsls	r3, r3, #2
 8009bd4:	440b      	add	r3, r1
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	0719      	lsls	r1, r3, #28
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 8009bda:	4821      	ldr	r0, [pc, #132]	; (8009c60 <I2C_GetTiming+0xfc>)
 8009bdc:	68fa      	ldr	r2, [r7, #12]
 8009bde:	4613      	mov	r3, r2
 8009be0:	009b      	lsls	r3, r3, #2
 8009be2:	4413      	add	r3, r2
 8009be4:	009b      	lsls	r3, r3, #2
 8009be6:	4403      	add	r3, r0
 8009be8:	3304      	adds	r3, #4
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	051b      	lsls	r3, r3, #20
 8009bee:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8009bf2:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 8009bf4:	481a      	ldr	r0, [pc, #104]	; (8009c60 <I2C_GetTiming+0xfc>)
 8009bf6:	68fa      	ldr	r2, [r7, #12]
 8009bf8:	4613      	mov	r3, r2
 8009bfa:	009b      	lsls	r3, r3, #2
 8009bfc:	4413      	add	r3, r2
 8009bfe:	009b      	lsls	r3, r3, #2
 8009c00:	4403      	add	r3, r0
 8009c02:	3308      	adds	r3, #8
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	041b      	lsls	r3, r3, #16
 8009c08:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 8009c0c:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) |\
 8009c0e:	4814      	ldr	r0, [pc, #80]	; (8009c60 <I2C_GetTiming+0xfc>)
 8009c10:	68fa      	ldr	r2, [r7, #12]
 8009c12:	4613      	mov	r3, r2
 8009c14:	009b      	lsls	r3, r3, #2
 8009c16:	4413      	add	r3, r2
 8009c18:	009b      	lsls	r3, r3, #2
 8009c1a:	4403      	add	r3, r0
 8009c1c:	330c      	adds	r3, #12
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	021b      	lsls	r3, r3, #8
 8009c22:	b29b      	uxth	r3, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 8009c24:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].scll & 0xFFU) << 0);
 8009c26:	480e      	ldr	r0, [pc, #56]	; (8009c60 <I2C_GetTiming+0xfc>)
 8009c28:	68fa      	ldr	r2, [r7, #12]
 8009c2a:	4613      	mov	r3, r2
 8009c2c:	009b      	lsls	r3, r3, #2
 8009c2e:	4413      	add	r3, r2
 8009c30:	009b      	lsls	r3, r3, #2
 8009c32:	4403      	add	r3, r0
 8009c34:	3310      	adds	r3, #16
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	b2db      	uxtb	r3, r3
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8009c3a:	430b      	orrs	r3, r1
 8009c3c:	617b      	str	r3, [r7, #20]
        }
        break;
 8009c3e:	e006      	b.n	8009c4e <I2C_GetTiming+0xea>
    for ( speed = 0 ; speed <=  (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
 8009c40:	693b      	ldr	r3, [r7, #16]
 8009c42:	3301      	adds	r3, #1
 8009c44:	613b      	str	r3, [r7, #16]
 8009c46:	693b      	ldr	r3, [r7, #16]
 8009c48:	2b02      	cmp	r3, #2
 8009c4a:	d99b      	bls.n	8009b84 <I2C_GetTiming+0x20>
 8009c4c:	e000      	b.n	8009c50 <I2C_GetTiming+0xec>
        break;
 8009c4e:	bf00      	nop
      }
    }
  }

  return ret;
 8009c50:	697b      	ldr	r3, [r7, #20]
}
 8009c52:	4618      	mov	r0, r3
 8009c54:	3718      	adds	r7, #24
 8009c56:	46bd      	mov	sp, r7
 8009c58:	bd80      	pop	{r7, pc}
 8009c5a:	bf00      	nop
 8009c5c:	0802e340 	.word	0x0802e340
 8009c60:	2400314c 	.word	0x2400314c

08009c64 <I2C_Compute_PRESC_SCLDEL_SDADEL>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval None.
  */
static void I2C_Compute_PRESC_SCLDEL_SDADEL(uint32_t clock_src_freq, uint32_t I2C_speed)
{
 8009c64:	b480      	push	{r7}
 8009c66:	b08f      	sub	sp, #60	; 0x3c
 8009c68:	af00      	add	r7, sp, #0
 8009c6a:	6078      	str	r0, [r7, #4]
 8009c6c:	6039      	str	r1, [r7, #0]
  uint32_t prev_presc = I2C_PRESC_MAX;
 8009c6e:	2310      	movs	r3, #16
 8009c70:	637b      	str	r3, [r7, #52]	; 0x34
  int32_t  tsdadel_min, tsdadel_max;
  int32_t  tscldel_min;
  uint32_t presc, scldel, sdadel;
  uint32_t tafdel_min, tafdel_max;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	085a      	lsrs	r2, r3, #1
 8009c76:	4b6e      	ldr	r3, [pc, #440]	; (8009e30 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1cc>)
 8009c78:	4413      	add	r3, r2
 8009c7a:	687a      	ldr	r2, [r7, #4]
 8009c7c:	fbb3 f3f2 	udiv	r3, r3, r2
 8009c80:	61fb      	str	r3, [r7, #28]

  tafdel_min = I2C_ANALOG_FILTER_DELAY_MIN;
 8009c82:	2332      	movs	r3, #50	; 0x32
 8009c84:	61bb      	str	r3, [r7, #24]
  tafdel_max = I2C_ANALOG_FILTER_DELAY_MAX;
 8009c86:	f44f 7382 	mov.w	r3, #260	; 0x104
 8009c8a:	617b      	str	r3, [r7, #20]
  /* tDNF = DNF x tI2CCLK
     tPRESC = (PRESC+1) x tI2CCLK
     SDADEL >= {tf +tHD;DAT(min) - tAF(min) - tDNF - [3 x tI2CCLK]} / {tPRESC}
     SDADEL <= {tVD;DAT(max) - tr - tAF(max) - tDNF- [4 x tI2CCLK]} / {tPRESC} */

  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 8009c8c:	4a69      	ldr	r2, [pc, #420]	; (8009e34 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8009c8e:	683b      	ldr	r3, [r7, #0]
 8009c90:	212c      	movs	r1, #44	; 0x2c
 8009c92:	fb01 f303 	mul.w	r3, r1, r3
 8009c96:	4413      	add	r3, r2
 8009c98:	3324      	adds	r3, #36	; 0x24
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	4618      	mov	r0, r3
 8009c9e:	4a65      	ldr	r2, [pc, #404]	; (8009e34 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8009ca0:	683b      	ldr	r3, [r7, #0]
 8009ca2:	212c      	movs	r1, #44	; 0x2c
 8009ca4:	fb01 f303 	mul.w	r3, r1, r3
 8009ca8:	4413      	add	r3, r2
 8009caa:	330c      	adds	r3, #12
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	18c2      	adds	r2, r0, r3
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 8009cb0:	69bb      	ldr	r3, [r7, #24]
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 8009cb2:	1ad2      	subs	r2, r2, r3
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 8009cb4:	495f      	ldr	r1, [pc, #380]	; (8009e34 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8009cb6:	683b      	ldr	r3, [r7, #0]
 8009cb8:	202c      	movs	r0, #44	; 0x2c
 8009cba:	fb00 f303 	mul.w	r3, r0, r3
 8009cbe:	440b      	add	r3, r1
 8009cc0:	3328      	adds	r3, #40	; 0x28
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	3303      	adds	r3, #3
 8009cc6:	69f9      	ldr	r1, [r7, #28]
 8009cc8:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 8009ccc:	1ad3      	subs	r3, r2, r3
 8009cce:	633b      	str	r3, [r7, #48]	; 0x30

  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 8009cd0:	4a58      	ldr	r2, [pc, #352]	; (8009e34 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8009cd2:	683b      	ldr	r3, [r7, #0]
 8009cd4:	212c      	movs	r1, #44	; 0x2c
 8009cd6:	fb01 f303 	mul.w	r3, r1, r3
 8009cda:	4413      	add	r3, r2
 8009cdc:	3310      	adds	r3, #16
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	4618      	mov	r0, r3
 8009ce2:	4a54      	ldr	r2, [pc, #336]	; (8009e34 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8009ce4:	683b      	ldr	r3, [r7, #0]
 8009ce6:	212c      	movs	r1, #44	; 0x2c
 8009ce8:	fb01 f303 	mul.w	r3, r1, r3
 8009cec:	4413      	add	r3, r2
 8009cee:	3320      	adds	r3, #32
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	1ac2      	subs	r2, r0, r3
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 8009cf4:	697b      	ldr	r3, [r7, #20]
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 8009cf6:	1ad2      	subs	r2, r2, r3
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 8009cf8:	494e      	ldr	r1, [pc, #312]	; (8009e34 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8009cfa:	683b      	ldr	r3, [r7, #0]
 8009cfc:	202c      	movs	r0, #44	; 0x2c
 8009cfe:	fb00 f303 	mul.w	r3, r0, r3
 8009d02:	440b      	add	r3, r1
 8009d04:	3328      	adds	r3, #40	; 0x28
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	3304      	adds	r3, #4
 8009d0a:	69f9      	ldr	r1, [r7, #28]
 8009d0c:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 8009d10:	1ad3      	subs	r3, r2, r3
 8009d12:	62fb      	str	r3, [r7, #44]	; 0x2c


  /* {[tr+ tSU;DAT(min)] / [tPRESC]} - 1 <= SCLDEL */
  tscldel_min = (int32_t)I2C_Charac[I2C_speed].trise + (int32_t)I2C_Charac[I2C_speed].sudat_min;
 8009d14:	4a47      	ldr	r2, [pc, #284]	; (8009e34 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8009d16:	683b      	ldr	r3, [r7, #0]
 8009d18:	212c      	movs	r1, #44	; 0x2c
 8009d1a:	fb01 f303 	mul.w	r3, r1, r3
 8009d1e:	4413      	add	r3, r2
 8009d20:	3320      	adds	r3, #32
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	4618      	mov	r0, r3
 8009d26:	4a43      	ldr	r2, [pc, #268]	; (8009e34 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8009d28:	683b      	ldr	r3, [r7, #0]
 8009d2a:	212c      	movs	r1, #44	; 0x2c
 8009d2c:	fb01 f303 	mul.w	r3, r1, r3
 8009d30:	4413      	add	r3, r2
 8009d32:	3314      	adds	r3, #20
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	4403      	add	r3, r0
 8009d38:	613b      	str	r3, [r7, #16]

  if (tsdadel_min <= 0)
 8009d3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	dc01      	bgt.n	8009d44 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xe0>
  {
    tsdadel_min = 0;
 8009d40:	2300      	movs	r3, #0
 8009d42:	633b      	str	r3, [r7, #48]	; 0x30
  }

  if (tsdadel_max <= 0)
 8009d44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	dc01      	bgt.n	8009d4e <I2C_Compute_PRESC_SCLDEL_SDADEL+0xea>
  {
    tsdadel_max = 0;
 8009d4a:	2300      	movs	r3, #0
 8009d4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 8009d4e:	2300      	movs	r3, #0
 8009d50:	62bb      	str	r3, [r7, #40]	; 0x28
 8009d52:	e062      	b.n	8009e1a <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1b6>
  {
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 8009d54:	2300      	movs	r3, #0
 8009d56:	627b      	str	r3, [r7, #36]	; 0x24
 8009d58:	e059      	b.n	8009e0e <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1aa>
    {
      /* TSCLDEL = (SCLDEL+1) * (PRESC+1) * TI2CCLK */
      uint32_t tscldel = (scldel + 1U) * (presc + 1U) * ti2cclk;
 8009d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d5c:	3301      	adds	r3, #1
 8009d5e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009d60:	3201      	adds	r2, #1
 8009d62:	fb02 f203 	mul.w	r2, r2, r3
 8009d66:	69fb      	ldr	r3, [r7, #28]
 8009d68:	fb02 f303 	mul.w	r3, r2, r3
 8009d6c:	60fb      	str	r3, [r7, #12]

      if (tscldel >= (uint32_t)tscldel_min)
 8009d6e:	693b      	ldr	r3, [r7, #16]
 8009d70:	68fa      	ldr	r2, [r7, #12]
 8009d72:	429a      	cmp	r2, r3
 8009d74:	d348      	bcc.n	8009e08 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1a4>
      {
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 8009d76:	2300      	movs	r3, #0
 8009d78:	623b      	str	r3, [r7, #32]
 8009d7a:	e042      	b.n	8009e02 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x19e>
        {
          /* TSDADEL = SDADEL * (PRESC+1) * TI2CCLK */
          uint32_t tsdadel = (sdadel * (presc + 1U)) * ti2cclk;
 8009d7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d7e:	3301      	adds	r3, #1
 8009d80:	6a3a      	ldr	r2, [r7, #32]
 8009d82:	fb02 f203 	mul.w	r2, r2, r3
 8009d86:	69fb      	ldr	r3, [r7, #28]
 8009d88:	fb02 f303 	mul.w	r3, r2, r3
 8009d8c:	60bb      	str	r3, [r7, #8]

          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
 8009d8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d90:	68ba      	ldr	r2, [r7, #8]
 8009d92:	429a      	cmp	r2, r3
 8009d94:	d332      	bcc.n	8009dfc <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
 8009d96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d98:	68ba      	ldr	r2, [r7, #8]
 8009d9a:	429a      	cmp	r2, r3
 8009d9c:	d82e      	bhi.n	8009dfc <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
          {
            if(presc != prev_presc)
 8009d9e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009da0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009da2:	429a      	cmp	r2, r3
 8009da4:	d02a      	beq.n	8009dfc <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
            {
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8009da6:	4b24      	ldr	r3, [pc, #144]	; (8009e38 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8009da8:	681a      	ldr	r2, [r3, #0]
 8009daa:	4924      	ldr	r1, [pc, #144]	; (8009e3c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 8009dac:	4613      	mov	r3, r2
 8009dae:	009b      	lsls	r3, r3, #2
 8009db0:	4413      	add	r3, r2
 8009db2:	009b      	lsls	r3, r3, #2
 8009db4:	440b      	add	r3, r1
 8009db6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009db8:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 8009dba:	4b1f      	ldr	r3, [pc, #124]	; (8009e38 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8009dbc:	681a      	ldr	r2, [r3, #0]
 8009dbe:	491f      	ldr	r1, [pc, #124]	; (8009e3c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 8009dc0:	4613      	mov	r3, r2
 8009dc2:	009b      	lsls	r3, r3, #2
 8009dc4:	4413      	add	r3, r2
 8009dc6:	009b      	lsls	r3, r3, #2
 8009dc8:	440b      	add	r3, r1
 8009dca:	3304      	adds	r3, #4
 8009dcc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009dce:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 8009dd0:	4b19      	ldr	r3, [pc, #100]	; (8009e38 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8009dd2:	681a      	ldr	r2, [r3, #0]
 8009dd4:	4919      	ldr	r1, [pc, #100]	; (8009e3c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 8009dd6:	4613      	mov	r3, r2
 8009dd8:	009b      	lsls	r3, r3, #2
 8009dda:	4413      	add	r3, r2
 8009ddc:	009b      	lsls	r3, r3, #2
 8009dde:	440b      	add	r3, r1
 8009de0:	3308      	adds	r3, #8
 8009de2:	6a3a      	ldr	r2, [r7, #32]
 8009de4:	601a      	str	r2, [r3, #0]
              prev_presc = presc;
 8009de6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009de8:	637b      	str	r3, [r7, #52]	; 0x34
              I2c_valid_timing_nbr ++;
 8009dea:	4b13      	ldr	r3, [pc, #76]	; (8009e38 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	3301      	adds	r3, #1
 8009df0:	4a11      	ldr	r2, [pc, #68]	; (8009e38 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8009df2:	6013      	str	r3, [r2, #0]

              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 8009df4:	4b10      	ldr	r3, [pc, #64]	; (8009e38 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	2b7f      	cmp	r3, #127	; 0x7f
 8009dfa:	d812      	bhi.n	8009e22 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1be>
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 8009dfc:	6a3b      	ldr	r3, [r7, #32]
 8009dfe:	3301      	adds	r3, #1
 8009e00:	623b      	str	r3, [r7, #32]
 8009e02:	6a3b      	ldr	r3, [r7, #32]
 8009e04:	2b0f      	cmp	r3, #15
 8009e06:	d9b9      	bls.n	8009d7c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x118>
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 8009e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e0a:	3301      	adds	r3, #1
 8009e0c:	627b      	str	r3, [r7, #36]	; 0x24
 8009e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e10:	2b0f      	cmp	r3, #15
 8009e12:	d9a2      	bls.n	8009d5a <I2C_Compute_PRESC_SCLDEL_SDADEL+0xf6>
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 8009e14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e16:	3301      	adds	r3, #1
 8009e18:	62bb      	str	r3, [r7, #40]	; 0x28
 8009e1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e1c:	2b0f      	cmp	r3, #15
 8009e1e:	d999      	bls.n	8009d54 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xf0>
 8009e20:	e000      	b.n	8009e24 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1c0>
              {
                return;
 8009e22:	bf00      	nop
          }
        }
      }
    }
  }
}
 8009e24:	373c      	adds	r7, #60	; 0x3c
 8009e26:	46bd      	mov	sp, r7
 8009e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e2c:	4770      	bx	lr
 8009e2e:	bf00      	nop
 8009e30:	3b9aca00 	.word	0x3b9aca00
 8009e34:	0802e340 	.word	0x0802e340
 8009e38:	24003b4c 	.word	0x24003b4c
 8009e3c:	2400314c 	.word	0x2400314c

08009e40 <I2C_Compute_SCLL_SCLH>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval config index (0 to I2C_VALID_TIMING_NBR], 0xFFFFFFFF for no valid config.
  */
static uint32_t I2C_Compute_SCLL_SCLH (uint32_t clock_src_freq, uint32_t I2C_speed)
{
 8009e40:	b480      	push	{r7}
 8009e42:	b093      	sub	sp, #76	; 0x4c
 8009e44:	af00      	add	r7, sp, #0
 8009e46:	6078      	str	r0, [r7, #4]
 8009e48:	6039      	str	r1, [r7, #0]
 uint32_t ret = 0xFFFFFFFFU;
 8009e4a:	f04f 33ff 	mov.w	r3, #4294967295
 8009e4e:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t dnf_delay;
  uint32_t clk_min, clk_max;
  uint32_t scll, sclh;
  uint32_t tafdel_min;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	085a      	lsrs	r2, r3, #1
 8009e54:	4b7a      	ldr	r3, [pc, #488]	; (800a040 <I2C_Compute_SCLL_SCLH+0x200>)
 8009e56:	4413      	add	r3, r2
 8009e58:	687a      	ldr	r2, [r7, #4]
 8009e5a:	fbb3 f3f2 	udiv	r3, r3, r2
 8009e5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  ti2cspeed   = (SEC2NSEC + (I2C_Charac[I2C_speed].freq / 2U))/ I2C_Charac[I2C_speed].freq;
 8009e60:	4a78      	ldr	r2, [pc, #480]	; (800a044 <I2C_Compute_SCLL_SCLH+0x204>)
 8009e62:	683b      	ldr	r3, [r7, #0]
 8009e64:	212c      	movs	r1, #44	; 0x2c
 8009e66:	fb01 f303 	mul.w	r3, r1, r3
 8009e6a:	4413      	add	r3, r2
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	085a      	lsrs	r2, r3, #1
 8009e70:	4b73      	ldr	r3, [pc, #460]	; (800a040 <I2C_Compute_SCLL_SCLH+0x200>)
 8009e72:	4413      	add	r3, r2
 8009e74:	4973      	ldr	r1, [pc, #460]	; (800a044 <I2C_Compute_SCLL_SCLH+0x204>)
 8009e76:	683a      	ldr	r2, [r7, #0]
 8009e78:	202c      	movs	r0, #44	; 0x2c
 8009e7a:	fb00 f202 	mul.w	r2, r0, r2
 8009e7e:	440a      	add	r2, r1
 8009e80:	6812      	ldr	r2, [r2, #0]
 8009e82:	fbb3 f3f2 	udiv	r3, r3, r2
 8009e86:	62bb      	str	r3, [r7, #40]	; 0x28

  tafdel_min = I2C_ANALOG_FILTER_DELAY_MIN;
 8009e88:	2332      	movs	r3, #50	; 0x32
 8009e8a:	627b      	str	r3, [r7, #36]	; 0x24

  /* tDNF = DNF x tI2CCLK */
  dnf_delay = I2C_Charac[I2C_speed].dnf * ti2cclk;
 8009e8c:	4a6d      	ldr	r2, [pc, #436]	; (800a044 <I2C_Compute_SCLL_SCLH+0x204>)
 8009e8e:	683b      	ldr	r3, [r7, #0]
 8009e90:	212c      	movs	r1, #44	; 0x2c
 8009e92:	fb01 f303 	mul.w	r3, r1, r3
 8009e96:	4413      	add	r3, r2
 8009e98:	3328      	adds	r3, #40	; 0x28
 8009e9a:	681a      	ldr	r2, [r3, #0]
 8009e9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e9e:	fb02 f303 	mul.w	r3, r2, r3
 8009ea2:	623b      	str	r3, [r7, #32]

  clk_max = SEC2NSEC / I2C_Charac[I2C_speed].freq_min;
 8009ea4:	4a67      	ldr	r2, [pc, #412]	; (800a044 <I2C_Compute_SCLL_SCLH+0x204>)
 8009ea6:	683b      	ldr	r3, [r7, #0]
 8009ea8:	212c      	movs	r1, #44	; 0x2c
 8009eaa:	fb01 f303 	mul.w	r3, r1, r3
 8009eae:	4413      	add	r3, r2
 8009eb0:	3304      	adds	r3, #4
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	4a62      	ldr	r2, [pc, #392]	; (800a040 <I2C_Compute_SCLL_SCLH+0x200>)
 8009eb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8009eba:	61fb      	str	r3, [r7, #28]
  clk_min = SEC2NSEC / I2C_Charac[I2C_speed].freq_max;
 8009ebc:	4a61      	ldr	r2, [pc, #388]	; (800a044 <I2C_Compute_SCLL_SCLH+0x204>)
 8009ebe:	683b      	ldr	r3, [r7, #0]
 8009ec0:	212c      	movs	r1, #44	; 0x2c
 8009ec2:	fb01 f303 	mul.w	r3, r1, r3
 8009ec6:	4413      	add	r3, r2
 8009ec8:	3308      	adds	r3, #8
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	4a5c      	ldr	r2, [pc, #368]	; (800a040 <I2C_Compute_SCLL_SCLH+0x200>)
 8009ece:	fbb2 f3f3 	udiv	r3, r2, r3
 8009ed2:	61bb      	str	r3, [r7, #24]

  prev_error = ti2cspeed;
 8009ed4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ed6:	643b      	str	r3, [r7, #64]	; 0x40

  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 8009ed8:	2300      	movs	r3, #0
 8009eda:	637b      	str	r3, [r7, #52]	; 0x34
 8009edc:	e0a3      	b.n	800a026 <I2C_Compute_SCLL_SCLH+0x1e6>
  {
    /* tPRESC = (PRESC+1) x tI2CCLK*/
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 8009ede:	495a      	ldr	r1, [pc, #360]	; (800a048 <I2C_Compute_SCLL_SCLH+0x208>)
 8009ee0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009ee2:	4613      	mov	r3, r2
 8009ee4:	009b      	lsls	r3, r3, #2
 8009ee6:	4413      	add	r3, r2
 8009ee8:	009b      	lsls	r3, r3, #2
 8009eea:	440b      	add	r3, r1
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	1c5a      	adds	r2, r3, #1
 8009ef0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ef2:	fb02 f303 	mul.w	r3, r2, r3
 8009ef6:	617b      	str	r3, [r7, #20]

    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 8009ef8:	2300      	movs	r3, #0
 8009efa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009efc:	e08c      	b.n	800a018 <I2C_Compute_SCLL_SCLH+0x1d8>
    {
      /* tLOW(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLL+1) x tPRESC ] */
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 8009efe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f00:	6a3b      	ldr	r3, [r7, #32]
 8009f02:	441a      	add	r2, r3
 8009f04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009f06:	3301      	adds	r3, #1
 8009f08:	6979      	ldr	r1, [r7, #20]
 8009f0a:	fb01 f103 	mul.w	r1, r1, r3
 8009f0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f10:	005b      	lsls	r3, r3, #1
 8009f12:	440b      	add	r3, r1
 8009f14:	4413      	add	r3, r2
 8009f16:	613b      	str	r3, [r7, #16]


      /* The I2CCLK period tI2CCLK must respect the following conditions:
      tI2CCLK < (tLOW - tfilters) / 4 and tI2CCLK < tHIGH */
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 8009f18:	4a4a      	ldr	r2, [pc, #296]	; (800a044 <I2C_Compute_SCLL_SCLH+0x204>)
 8009f1a:	683b      	ldr	r3, [r7, #0]
 8009f1c:	212c      	movs	r1, #44	; 0x2c
 8009f1e:	fb01 f303 	mul.w	r3, r1, r3
 8009f22:	4413      	add	r3, r2
 8009f24:	3318      	adds	r3, #24
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	693a      	ldr	r2, [r7, #16]
 8009f2a:	429a      	cmp	r2, r3
 8009f2c:	d971      	bls.n	800a012 <I2C_Compute_SCLL_SCLH+0x1d2>
 8009f2e:	693a      	ldr	r2, [r7, #16]
 8009f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f32:	1ad2      	subs	r2, r2, r3
 8009f34:	6a3b      	ldr	r3, [r7, #32]
 8009f36:	1ad3      	subs	r3, r2, r3
 8009f38:	089b      	lsrs	r3, r3, #2
 8009f3a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009f3c:	429a      	cmp	r2, r3
 8009f3e:	d268      	bcs.n	800a012 <I2C_Compute_SCLL_SCLH+0x1d2>
      {
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 8009f40:	2300      	movs	r3, #0
 8009f42:	63bb      	str	r3, [r7, #56]	; 0x38
 8009f44:	e062      	b.n	800a00c <I2C_Compute_SCLL_SCLH+0x1cc>
        {
          /* tHIGH(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLH+1) x tPRESC] */
          uint32_t tscl_h = tafdel_min + dnf_delay + (2U * ti2cclk) + ((sclh + 1U) * tpresc);
 8009f46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f48:	6a3b      	ldr	r3, [r7, #32]
 8009f4a:	441a      	add	r2, r3
 8009f4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f4e:	3301      	adds	r3, #1
 8009f50:	6979      	ldr	r1, [r7, #20]
 8009f52:	fb01 f103 	mul.w	r1, r1, r3
 8009f56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f58:	005b      	lsls	r3, r3, #1
 8009f5a:	440b      	add	r3, r1
 8009f5c:	4413      	add	r3, r2
 8009f5e:	60fb      	str	r3, [r7, #12]

          /* tSCL = tf + tLOW + tr + tHIGH */
          uint32_t tscl = tscl_l + tscl_h + I2C_Charac[I2C_speed].trise + I2C_Charac[I2C_speed].tfall;
 8009f60:	693a      	ldr	r2, [r7, #16]
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	441a      	add	r2, r3
 8009f66:	4937      	ldr	r1, [pc, #220]	; (800a044 <I2C_Compute_SCLL_SCLH+0x204>)
 8009f68:	683b      	ldr	r3, [r7, #0]
 8009f6a:	202c      	movs	r0, #44	; 0x2c
 8009f6c:	fb00 f303 	mul.w	r3, r0, r3
 8009f70:	440b      	add	r3, r1
 8009f72:	3320      	adds	r3, #32
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	441a      	add	r2, r3
 8009f78:	4932      	ldr	r1, [pc, #200]	; (800a044 <I2C_Compute_SCLL_SCLH+0x204>)
 8009f7a:	683b      	ldr	r3, [r7, #0]
 8009f7c:	202c      	movs	r0, #44	; 0x2c
 8009f7e:	fb00 f303 	mul.w	r3, r0, r3
 8009f82:	440b      	add	r3, r1
 8009f84:	3324      	adds	r3, #36	; 0x24
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	4413      	add	r3, r2
 8009f8a:	60bb      	str	r3, [r7, #8]

          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
 8009f8c:	68ba      	ldr	r2, [r7, #8]
 8009f8e:	69bb      	ldr	r3, [r7, #24]
 8009f90:	429a      	cmp	r2, r3
 8009f92:	d338      	bcc.n	800a006 <I2C_Compute_SCLL_SCLH+0x1c6>
 8009f94:	68ba      	ldr	r2, [r7, #8]
 8009f96:	69fb      	ldr	r3, [r7, #28]
 8009f98:	429a      	cmp	r2, r3
 8009f9a:	d834      	bhi.n	800a006 <I2C_Compute_SCLL_SCLH+0x1c6>
 8009f9c:	4a29      	ldr	r2, [pc, #164]	; (800a044 <I2C_Compute_SCLL_SCLH+0x204>)
 8009f9e:	683b      	ldr	r3, [r7, #0]
 8009fa0:	212c      	movs	r1, #44	; 0x2c
 8009fa2:	fb01 f303 	mul.w	r3, r1, r3
 8009fa6:	4413      	add	r3, r2
 8009fa8:	331c      	adds	r3, #28
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	68fa      	ldr	r2, [r7, #12]
 8009fae:	429a      	cmp	r2, r3
 8009fb0:	d329      	bcc.n	800a006 <I2C_Compute_SCLL_SCLH+0x1c6>
 8009fb2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	429a      	cmp	r2, r3
 8009fb8:	d225      	bcs.n	800a006 <I2C_Compute_SCLL_SCLH+0x1c6>
          {
            int32_t error = (int32_t)tscl - (int32_t)ti2cspeed;
 8009fba:	68ba      	ldr	r2, [r7, #8]
 8009fbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fbe:	1ad3      	subs	r3, r2, r3
 8009fc0:	633b      	str	r3, [r7, #48]	; 0x30

            if (error < 0)
 8009fc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	da02      	bge.n	8009fce <I2C_Compute_SCLL_SCLH+0x18e>
            {
              error = -error;
 8009fc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fca:	425b      	negs	r3, r3
 8009fcc:	633b      	str	r3, [r7, #48]	; 0x30
            }

            /* look for the timings with the lowest clock error */
            if ((uint32_t)error < prev_error)
 8009fce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fd0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009fd2:	429a      	cmp	r2, r3
 8009fd4:	d917      	bls.n	800a006 <I2C_Compute_SCLL_SCLH+0x1c6>
            {
              prev_error = (uint32_t)error;
 8009fd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fd8:	643b      	str	r3, [r7, #64]	; 0x40
              I2c_valid_timing[count].scll = scll;
 8009fda:	491b      	ldr	r1, [pc, #108]	; (800a048 <I2C_Compute_SCLL_SCLH+0x208>)
 8009fdc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009fde:	4613      	mov	r3, r2
 8009fe0:	009b      	lsls	r3, r3, #2
 8009fe2:	4413      	add	r3, r2
 8009fe4:	009b      	lsls	r3, r3, #2
 8009fe6:	440b      	add	r3, r1
 8009fe8:	3310      	adds	r3, #16
 8009fea:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009fec:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[count].sclh = sclh;
 8009fee:	4916      	ldr	r1, [pc, #88]	; (800a048 <I2C_Compute_SCLL_SCLH+0x208>)
 8009ff0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009ff2:	4613      	mov	r3, r2
 8009ff4:	009b      	lsls	r3, r3, #2
 8009ff6:	4413      	add	r3, r2
 8009ff8:	009b      	lsls	r3, r3, #2
 8009ffa:	440b      	add	r3, r1
 8009ffc:	330c      	adds	r3, #12
 8009ffe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a000:	601a      	str	r2, [r3, #0]
              ret = count;
 800a002:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a004:	647b      	str	r3, [r7, #68]	; 0x44
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 800a006:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a008:	3301      	adds	r3, #1
 800a00a:	63bb      	str	r3, [r7, #56]	; 0x38
 800a00c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a00e:	2bff      	cmp	r3, #255	; 0xff
 800a010:	d999      	bls.n	8009f46 <I2C_Compute_SCLL_SCLH+0x106>
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 800a012:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a014:	3301      	adds	r3, #1
 800a016:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a018:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a01a:	2bff      	cmp	r3, #255	; 0xff
 800a01c:	f67f af6f 	bls.w	8009efe <I2C_Compute_SCLL_SCLH+0xbe>
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 800a020:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a022:	3301      	adds	r3, #1
 800a024:	637b      	str	r3, [r7, #52]	; 0x34
 800a026:	4b09      	ldr	r3, [pc, #36]	; (800a04c <I2C_Compute_SCLL_SCLH+0x20c>)
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a02c:	429a      	cmp	r2, r3
 800a02e:	f4ff af56 	bcc.w	8009ede <I2C_Compute_SCLL_SCLH+0x9e>
        }
      }
    }
  }

  return ret;
 800a032:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800a034:	4618      	mov	r0, r3
 800a036:	374c      	adds	r7, #76	; 0x4c
 800a038:	46bd      	mov	sp, r7
 800a03a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a03e:	4770      	bx	lr
 800a040:	3b9aca00 	.word	0x3b9aca00
 800a044:	0802e340 	.word	0x0802e340
 800a048:	2400314c 	.word	0x2400314c
 800a04c:	24003b4c 	.word	0x24003b4c

0800a050 <I2C4_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  phi2c  I2C handler
  * @retval None
  */
static void I2C4_MspInit(I2C_HandleTypeDef *phi2c)
{
 800a050:	b580      	push	{r7, lr}
 800a052:	b08a      	sub	sp, #40	; 0x28
 800a054:	af00      	add	r7, sp, #0
 800a056:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /*** Configure the GPIOs ***/
  /* Enable SCL GPIO clock */
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 800a058:	4b31      	ldr	r3, [pc, #196]	; (800a120 <I2C4_MspInit+0xd0>)
 800a05a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800a05e:	4a30      	ldr	r2, [pc, #192]	; (800a120 <I2C4_MspInit+0xd0>)
 800a060:	f043 0308 	orr.w	r3, r3, #8
 800a064:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800a068:	4b2d      	ldr	r3, [pc, #180]	; (800a120 <I2C4_MspInit+0xd0>)
 800a06a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800a06e:	f003 0308 	and.w	r3, r3, #8
 800a072:	613b      	str	r3, [r7, #16]
 800a074:	693b      	ldr	r3, [r7, #16]
  /* Enable SDA GPIO clock */
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
 800a076:	4b2a      	ldr	r3, [pc, #168]	; (800a120 <I2C4_MspInit+0xd0>)
 800a078:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800a07c:	4a28      	ldr	r2, [pc, #160]	; (800a120 <I2C4_MspInit+0xd0>)
 800a07e:	f043 0308 	orr.w	r3, r3, #8
 800a082:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800a086:	4b26      	ldr	r3, [pc, #152]	; (800a120 <I2C4_MspInit+0xd0>)
 800a088:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800a08c:	f003 0308 	and.w	r3, r3, #8
 800a090:	60fb      	str	r3, [r7, #12]
 800a092:	68fb      	ldr	r3, [r7, #12]

  /* Configure I2C Tx as alternate function */
  gpio_init_structure.Pin       = BUS_I2C4_SCL_PIN;
 800a094:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a098:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 800a09a:	2312      	movs	r3, #18
 800a09c:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_NOPULL;
 800a09e:	2300      	movs	r3, #0
 800a0a0:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed 	= GPIO_SPEED_FREQ_HIGH;
 800a0a2:	2302      	movs	r3, #2
 800a0a4:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = BUS_I2C4_SCL_AF;
 800a0a6:	2304      	movs	r3, #4
 800a0a8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BUS_I2C4_SCL_GPIO_PORT, &gpio_init_structure);
 800a0aa:	f107 0314 	add.w	r3, r7, #20
 800a0ae:	4619      	mov	r1, r3
 800a0b0:	481c      	ldr	r0, [pc, #112]	; (800a124 <I2C4_MspInit+0xd4>)
 800a0b2:	f003 fac5 	bl	800d640 <HAL_GPIO_Init>

  /* Configure I2C Rx as alternate function */
  gpio_init_structure.Pin       = BUS_I2C4_SDA_PIN;
 800a0b6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a0ba:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 800a0bc:	2312      	movs	r3, #18
 800a0be:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_NOPULL;
 800a0c0:	2300      	movs	r3, #0
 800a0c2:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed 	= GPIO_SPEED_FREQ_HIGH;
 800a0c4:	2302      	movs	r3, #2
 800a0c6:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = BUS_I2C4_SDA_AF;
 800a0c8:	2304      	movs	r3, #4
 800a0ca:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BUS_I2C4_SDA_GPIO_PORT, &gpio_init_structure);
 800a0cc:	f107 0314 	add.w	r3, r7, #20
 800a0d0:	4619      	mov	r1, r3
 800a0d2:	4814      	ldr	r0, [pc, #80]	; (800a124 <I2C4_MspInit+0xd4>)
 800a0d4:	f003 fab4 	bl	800d640 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  BUS_I2C4_CLK_ENABLE();
 800a0d8:	4b11      	ldr	r3, [pc, #68]	; (800a120 <I2C4_MspInit+0xd0>)
 800a0da:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800a0de:	4a10      	ldr	r2, [pc, #64]	; (800a120 <I2C4_MspInit+0xd0>)
 800a0e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a0e4:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 800a0e8:	4b0d      	ldr	r3, [pc, #52]	; (800a120 <I2C4_MspInit+0xd0>)
 800a0ea:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800a0ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a0f2:	60bb      	str	r3, [r7, #8]
 800a0f4:	68bb      	ldr	r3, [r7, #8]

  /* Force the I2C peripheral clock reset */
  BUS_I2C4_FORCE_RESET();
 800a0f6:	4b0a      	ldr	r3, [pc, #40]	; (800a120 <I2C4_MspInit+0xd0>)
 800a0f8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a0fc:	4a08      	ldr	r2, [pc, #32]	; (800a120 <I2C4_MspInit+0xd0>)
 800a0fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a102:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

  /* Release the I2C peripheral clock reset */
  BUS_I2C4_RELEASE_RESET();
 800a106:	4b06      	ldr	r3, [pc, #24]	; (800a120 <I2C4_MspInit+0xd0>)
 800a108:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a10c:	4a04      	ldr	r2, [pc, #16]	; (800a120 <I2C4_MspInit+0xd0>)
 800a10e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a112:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
}
 800a116:	bf00      	nop
 800a118:	3728      	adds	r7, #40	; 0x28
 800a11a:	46bd      	mov	sp, r7
 800a11c:	bd80      	pop	{r7, pc}
 800a11e:	bf00      	nop
 800a120:	58024400 	.word	0x58024400
 800a124:	58020c00 	.word	0x58020c00

0800a128 <I2C4_MspDeInit>:
  * @brief  DeInitializes I2C MSP.
  * @param  phi2c  I2C handler
  * @retval None
  */
static void I2C4_MspDeInit(I2C_HandleTypeDef *phi2c)
{
 800a128:	b580      	push	{r7, lr}
 800a12a:	b088      	sub	sp, #32
 800a12c:	af00      	add	r7, sp, #0
 800a12e:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = BUS_I2C4_SCL_PIN;
 800a130:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a134:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_DeInit(BUS_I2C4_SCL_GPIO_PORT, gpio_init_structure.Pin );
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	4619      	mov	r1, r3
 800a13a:	480b      	ldr	r0, [pc, #44]	; (800a168 <I2C4_MspDeInit+0x40>)
 800a13c:	f003 fc30 	bl	800d9a0 <HAL_GPIO_DeInit>
  gpio_init_structure.Pin = BUS_I2C4_SDA_PIN;
 800a140:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a144:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_DeInit(BUS_I2C4_SDA_GPIO_PORT, gpio_init_structure.Pin);
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	4619      	mov	r1, r3
 800a14a:	4807      	ldr	r0, [pc, #28]	; (800a168 <I2C4_MspDeInit+0x40>)
 800a14c:	f003 fc28 	bl	800d9a0 <HAL_GPIO_DeInit>

  /* Disable I2C clock */
  BUS_I2C4_CLK_DISABLE();
 800a150:	4b06      	ldr	r3, [pc, #24]	; (800a16c <I2C4_MspDeInit+0x44>)
 800a152:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800a156:	4a05      	ldr	r2, [pc, #20]	; (800a16c <I2C4_MspDeInit+0x44>)
 800a158:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a15c:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
}
 800a160:	bf00      	nop
 800a162:	3720      	adds	r7, #32
 800a164:	46bd      	mov	sp, r7
 800a166:	bd80      	pop	{r7, pc}
 800a168:	58020c00 	.word	0x58020c00
 800a16c:	58024400 	.word	0x58024400

0800a170 <I2C4_WriteReg>:
  * @param  pData      The target register value to be written
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_WriteReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 800a170:	b580      	push	{r7, lr}
 800a172:	b088      	sub	sp, #32
 800a174:	af04      	add	r7, sp, #16
 800a176:	607b      	str	r3, [r7, #4]
 800a178:	4603      	mov	r3, r0
 800a17a:	81fb      	strh	r3, [r7, #14]
 800a17c:	460b      	mov	r3, r1
 800a17e:	81bb      	strh	r3, [r7, #12]
 800a180:	4613      	mov	r3, r2
 800a182:	817b      	strh	r3, [r7, #10]
  if(HAL_I2C_Mem_Write(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 800a184:	8978      	ldrh	r0, [r7, #10]
 800a186:	89ba      	ldrh	r2, [r7, #12]
 800a188:	89f9      	ldrh	r1, [r7, #14]
 800a18a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800a18e:	9302      	str	r3, [sp, #8]
 800a190:	8b3b      	ldrh	r3, [r7, #24]
 800a192:	9301      	str	r3, [sp, #4]
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	9300      	str	r3, [sp, #0]
 800a198:	4603      	mov	r3, r0
 800a19a:	4807      	ldr	r0, [pc, #28]	; (800a1b8 <I2C4_WriteReg+0x48>)
 800a19c:	f003 fe22 	bl	800dde4 <HAL_I2C_Mem_Write>
 800a1a0:	4603      	mov	r3, r0
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d101      	bne.n	800a1aa <I2C4_WriteReg+0x3a>
  {
    return BSP_ERROR_NONE;
 800a1a6:	2300      	movs	r3, #0
 800a1a8:	e001      	b.n	800a1ae <I2C4_WriteReg+0x3e>
  }

  return BSP_ERROR_BUS_FAILURE;
 800a1aa:	f06f 0307 	mvn.w	r3, #7
}
 800a1ae:	4618      	mov	r0, r3
 800a1b0:	3710      	adds	r7, #16
 800a1b2:	46bd      	mov	sp, r7
 800a1b4:	bd80      	pop	{r7, pc}
 800a1b6:	bf00      	nop
 800a1b8:	2400ce40 	.word	0x2400ce40

0800a1bc <I2C4_ReadReg>:
  * @param  pData      The target register value to be read
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_ReadReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 800a1bc:	b580      	push	{r7, lr}
 800a1be:	b088      	sub	sp, #32
 800a1c0:	af04      	add	r7, sp, #16
 800a1c2:	607b      	str	r3, [r7, #4]
 800a1c4:	4603      	mov	r3, r0
 800a1c6:	81fb      	strh	r3, [r7, #14]
 800a1c8:	460b      	mov	r3, r1
 800a1ca:	81bb      	strh	r3, [r7, #12]
 800a1cc:	4613      	mov	r3, r2
 800a1ce:	817b      	strh	r3, [r7, #10]
  if (HAL_I2C_Mem_Read(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 800a1d0:	8978      	ldrh	r0, [r7, #10]
 800a1d2:	89ba      	ldrh	r2, [r7, #12]
 800a1d4:	89f9      	ldrh	r1, [r7, #14]
 800a1d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800a1da:	9302      	str	r3, [sp, #8]
 800a1dc:	8b3b      	ldrh	r3, [r7, #24]
 800a1de:	9301      	str	r3, [sp, #4]
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	9300      	str	r3, [sp, #0]
 800a1e4:	4603      	mov	r3, r0
 800a1e6:	4807      	ldr	r0, [pc, #28]	; (800a204 <I2C4_ReadReg+0x48>)
 800a1e8:	f003 ff10 	bl	800e00c <HAL_I2C_Mem_Read>
 800a1ec:	4603      	mov	r3, r0
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d101      	bne.n	800a1f6 <I2C4_ReadReg+0x3a>
  {
    return BSP_ERROR_NONE;
 800a1f2:	2300      	movs	r3, #0
 800a1f4:	e001      	b.n	800a1fa <I2C4_ReadReg+0x3e>
  }

  return BSP_ERROR_BUS_FAILURE;
 800a1f6:	f06f 0307 	mvn.w	r3, #7
}
 800a1fa:	4618      	mov	r0, r3
 800a1fc:	3710      	adds	r7, #16
 800a1fe:	46bd      	mov	sp, r7
 800a200:	bd80      	pop	{r7, pc}
 800a202:	bf00      	nop
 800a204:	2400ce40 	.word	0x2400ce40

0800a208 <BSP_OSPI_NOR_Init>:
  * @param  Instance   OSPI Instance
  * @param  Init       OSPI Init structure
  * @retval BSP status
  */
int32_t BSP_OSPI_NOR_Init(uint32_t Instance, BSP_OSPI_NOR_Init_t *Init)
{
 800a208:	b580      	push	{r7, lr}
 800a20a:	b094      	sub	sp, #80	; 0x50
 800a20c:	af00      	add	r7, sp, #0
 800a20e:	6078      	str	r0, [r7, #4]
 800a210:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800a212:	2300      	movs	r3, #0
 800a214:	64fb      	str	r3, [r7, #76]	; 0x4c
  BSP_OSPI_NOR_Info_t pInfo;
  MX_OSPI_Config ospi_config;

  /* Check if the instance is supported */
  if(Instance >= OSPI_NOR_INSTANCES_NUMBER)
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d003      	beq.n	800a224 <BSP_OSPI_NOR_Init+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800a21c:	f06f 0301 	mvn.w	r3, #1
 800a220:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a222:	e074      	b.n	800a30e <BSP_OSPI_NOR_Init+0x106>
  }
  else
  {
    /* Check if the instance is already initialized */
    if (Ospi_Nor_Ctx[Instance].IsInitialized == OSPI_ACCESS_NONE)
 800a224:	4a3c      	ldr	r2, [pc, #240]	; (800a318 <BSP_OSPI_NOR_Init+0x110>)
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d16e      	bne.n	800a30e <BSP_OSPI_NOR_Init+0x106>
    {
#if (USE_HAL_OSPI_REGISTER_CALLBACKS == 0)
      /* Msp OSPI initialization */
      OSPI_NOR_MspInit(&hospi_nor[Instance]);
 800a230:	687a      	ldr	r2, [r7, #4]
 800a232:	4613      	mov	r3, r2
 800a234:	005b      	lsls	r3, r3, #1
 800a236:	4413      	add	r3, r2
 800a238:	015b      	lsls	r3, r3, #5
 800a23a:	4a38      	ldr	r2, [pc, #224]	; (800a31c <BSP_OSPI_NOR_Init+0x114>)
 800a23c:	4413      	add	r3, r2
 800a23e:	4618      	mov	r0, r3
 800a240:	f000 fa0e 	bl	800a660 <OSPI_NOR_MspInit>
      if(ret == BSP_ERROR_NONE)
      {
#endif /* USE_HAL_OSPI_REGISTER_CALLBACKS */

        /* Get Flash informations of one memory */
        (void)MX25LM51245G_GetFlashInfo(&pInfo);
 800a244:	f107 031c 	add.w	r3, r7, #28
 800a248:	4618      	mov	r0, r3
 800a24a:	f7fe fee8 	bl	800901e <MX25LM51245G_GetFlashInfo>

        /* Fill config structure */
        ospi_config.ClockPrescaler = 3U;
 800a24e:	2303      	movs	r3, #3
 800a250:	613b      	str	r3, [r7, #16]
        ospi_config.MemorySize     = (uint32_t)POSITION_VAL((uint32_t)pInfo.FlashSize);
 800a252:	69fb      	ldr	r3, [r7, #28]
 800a254:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a256:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a258:	fa93 f3a3 	rbit	r3, r3
 800a25c:	643b      	str	r3, [r7, #64]	; 0x40
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800a25e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a260:	64bb      	str	r3, [r7, #72]	; 0x48
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800a262:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a264:	2b00      	cmp	r3, #0
 800a266:	d101      	bne.n	800a26c <BSP_OSPI_NOR_Init+0x64>
  {
    return 32U;
 800a268:	2320      	movs	r3, #32
 800a26a:	e003      	b.n	800a274 <BSP_OSPI_NOR_Init+0x6c>
  }
  return __builtin_clz(value);
 800a26c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a26e:	fab3 f383 	clz	r3, r3
 800a272:	b2db      	uxtb	r3, r3
 800a274:	60fb      	str	r3, [r7, #12]
        ospi_config.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 800a276:	2300      	movs	r3, #0
 800a278:	617b      	str	r3, [r7, #20]
        ospi_config.TransferRate   = (uint32_t)Init->TransferRate;
 800a27a:	683b      	ldr	r3, [r7, #0]
 800a27c:	785b      	ldrb	r3, [r3, #1]
 800a27e:	61bb      	str	r3, [r7, #24]

        /* STM32 OSPI interface initialization */
        if (MX_OSPI_NOR_Init(&hospi_nor[Instance], &ospi_config) != HAL_OK)
 800a280:	687a      	ldr	r2, [r7, #4]
 800a282:	4613      	mov	r3, r2
 800a284:	005b      	lsls	r3, r3, #1
 800a286:	4413      	add	r3, r2
 800a288:	015b      	lsls	r3, r3, #5
 800a28a:	4a24      	ldr	r2, [pc, #144]	; (800a31c <BSP_OSPI_NOR_Init+0x114>)
 800a28c:	4413      	add	r3, r2
 800a28e:	f107 020c 	add.w	r2, r7, #12
 800a292:	4611      	mov	r1, r2
 800a294:	4618      	mov	r0, r3
 800a296:	f000 f897 	bl	800a3c8 <MX_OSPI_NOR_Init>
 800a29a:	4603      	mov	r3, r0
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d003      	beq.n	800a2a8 <BSP_OSPI_NOR_Init+0xa0>
        {
          ret = BSP_ERROR_PERIPH_FAILURE;
 800a2a0:	f06f 0303 	mvn.w	r3, #3
 800a2a4:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a2a6:	e032      	b.n	800a30e <BSP_OSPI_NOR_Init+0x106>
        }
        /* OSPI memory reset */
        else if (OSPI_NOR_ResetMemory(Instance) != BSP_ERROR_NONE)
 800a2a8:	6878      	ldr	r0, [r7, #4]
 800a2aa:	f000 fb83 	bl	800a9b4 <OSPI_NOR_ResetMemory>
 800a2ae:	4603      	mov	r3, r0
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d003      	beq.n	800a2bc <BSP_OSPI_NOR_Init+0xb4>
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
 800a2b4:	f06f 0304 	mvn.w	r3, #4
 800a2b8:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a2ba:	e028      	b.n	800a30e <BSP_OSPI_NOR_Init+0x106>
        }
        /* Check if memory is ready */
        else if (MX25LM51245G_AutoPollingMemReady(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 800a2bc:	687a      	ldr	r2, [r7, #4]
 800a2be:	4613      	mov	r3, r2
 800a2c0:	005b      	lsls	r3, r3, #1
 800a2c2:	4413      	add	r3, r2
 800a2c4:	015b      	lsls	r3, r3, #5
 800a2c6:	4a15      	ldr	r2, [pc, #84]	; (800a31c <BSP_OSPI_NOR_Init+0x114>)
 800a2c8:	1898      	adds	r0, r3, r2
 800a2ca:	4a13      	ldr	r2, [pc, #76]	; (800a318 <BSP_OSPI_NOR_Init+0x110>)
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	00db      	lsls	r3, r3, #3
 800a2d0:	4413      	add	r3, r2
 800a2d2:	7859      	ldrb	r1, [r3, #1]
 800a2d4:	4a10      	ldr	r2, [pc, #64]	; (800a318 <BSP_OSPI_NOR_Init+0x110>)
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	00db      	lsls	r3, r3, #3
 800a2da:	4413      	add	r3, r2
 800a2dc:	789b      	ldrb	r3, [r3, #2]
 800a2de:	461a      	mov	r2, r3
 800a2e0:	f7fe fecc 	bl	800907c <MX25LM51245G_AutoPollingMemReady>
 800a2e4:	4603      	mov	r3, r0
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d003      	beq.n	800a2f2 <BSP_OSPI_NOR_Init+0xea>
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
 800a2ea:	f06f 0304 	mvn.w	r3, #4
 800a2ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a2f0:	e00d      	b.n	800a30e <BSP_OSPI_NOR_Init+0x106>
        }
        else
        {
          /* Configure the memory */
          if (BSP_OSPI_NOR_ConfigFlash(Instance, Init->InterfaceMode, Init->TransferRate) != BSP_ERROR_NONE)
 800a2f2:	683b      	ldr	r3, [r7, #0]
 800a2f4:	7819      	ldrb	r1, [r3, #0]
 800a2f6:	683b      	ldr	r3, [r7, #0]
 800a2f8:	785b      	ldrb	r3, [r3, #1]
 800a2fa:	461a      	mov	r2, r3
 800a2fc:	6878      	ldr	r0, [r7, #4]
 800a2fe:	f000 f939 	bl	800a574 <BSP_OSPI_NOR_ConfigFlash>
 800a302:	4603      	mov	r3, r0
 800a304:	2b00      	cmp	r3, #0
 800a306:	d002      	beq.n	800a30e <BSP_OSPI_NOR_Init+0x106>
          {
            ret = BSP_ERROR_COMPONENT_FAILURE;
 800a308:	f06f 0304 	mvn.w	r3, #4
 800a30c:	64fb      	str	r3, [r7, #76]	; 0x4c
#endif
    }
  }

  /* Return BSP status */
  return ret;
 800a30e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 800a310:	4618      	mov	r0, r3
 800a312:	3750      	adds	r7, #80	; 0x50
 800a314:	46bd      	mov	sp, r7
 800a316:	bd80      	pop	{r7, pc}
 800a318:	2400ce8c 	.word	0x2400ce8c
 800a31c:	2400ce94 	.word	0x2400ce94

0800a320 <BSP_OSPI_NOR_DeInit>:
  * @brief  De-Initializes the OSPI interface.
  * @param  Instance   OSPI Instance
  * @retval BSP status
  */
int32_t BSP_OSPI_NOR_DeInit(uint32_t Instance)
{
 800a320:	b580      	push	{r7, lr}
 800a322:	b084      	sub	sp, #16
 800a324:	af00      	add	r7, sp, #0
 800a326:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 800a328:	2300      	movs	r3, #0
 800a32a:	60fb      	str	r3, [r7, #12]

  /* Check if the instance is supported */
  if(Instance >= OSPI_NOR_INSTANCES_NUMBER)
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d003      	beq.n	800a33a <BSP_OSPI_NOR_DeInit+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800a332:	f06f 0301 	mvn.w	r3, #1
 800a336:	60fb      	str	r3, [r7, #12]
 800a338:	e03c      	b.n	800a3b4 <BSP_OSPI_NOR_DeInit+0x94>
  }
  else
  {
    /* Disable Memory mapped mode */
    if(Ospi_Nor_Ctx[Instance].IsInitialized == OSPI_ACCESS_MMP)
 800a33a:	4a21      	ldr	r2, [pc, #132]	; (800a3c0 <BSP_OSPI_NOR_DeInit+0xa0>)
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 800a342:	2b02      	cmp	r3, #2
 800a344:	d108      	bne.n	800a358 <BSP_OSPI_NOR_DeInit+0x38>
    {
      if(BSP_OSPI_NOR_DisableMemoryMappedMode(Instance) != BSP_ERROR_NONE)
 800a346:	6878      	ldr	r0, [r7, #4]
 800a348:	f000 f8de 	bl	800a508 <BSP_OSPI_NOR_DisableMemoryMappedMode>
 800a34c:	4603      	mov	r3, r0
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d002      	beq.n	800a358 <BSP_OSPI_NOR_DeInit+0x38>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800a352:	f06f 0304 	mvn.w	r3, #4
 800a356:	60fb      	str	r3, [r7, #12]
      }
    }

    if(ret == BSP_ERROR_NONE)
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d12a      	bne.n	800a3b4 <BSP_OSPI_NOR_DeInit+0x94>
    {
      /* Set default Ospi_Nor_Ctx values */
      Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_NONE;
 800a35e:	4a18      	ldr	r2, [pc, #96]	; (800a3c0 <BSP_OSPI_NOR_DeInit+0xa0>)
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	2100      	movs	r1, #0
 800a364:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
      Ospi_Nor_Ctx[Instance].InterfaceMode = BSP_OSPI_NOR_SPI_MODE;
 800a368:	4a15      	ldr	r2, [pc, #84]	; (800a3c0 <BSP_OSPI_NOR_DeInit+0xa0>)
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	00db      	lsls	r3, r3, #3
 800a36e:	4413      	add	r3, r2
 800a370:	2200      	movs	r2, #0
 800a372:	705a      	strb	r2, [r3, #1]
      Ospi_Nor_Ctx[Instance].TransferRate  = BSP_OSPI_NOR_STR_TRANSFER;
 800a374:	4a12      	ldr	r2, [pc, #72]	; (800a3c0 <BSP_OSPI_NOR_DeInit+0xa0>)
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	00db      	lsls	r3, r3, #3
 800a37a:	4413      	add	r3, r2
 800a37c:	2200      	movs	r2, #0
 800a37e:	709a      	strb	r2, [r3, #2]

#if (USE_HAL_OSPI_REGISTER_CALLBACKS == 0)
      OSPI_NOR_MspDeInit(&hospi_nor[Instance]);
 800a380:	687a      	ldr	r2, [r7, #4]
 800a382:	4613      	mov	r3, r2
 800a384:	005b      	lsls	r3, r3, #1
 800a386:	4413      	add	r3, r2
 800a388:	015b      	lsls	r3, r3, #5
 800a38a:	4a0e      	ldr	r2, [pc, #56]	; (800a3c4 <BSP_OSPI_NOR_DeInit+0xa4>)
 800a38c:	4413      	add	r3, r2
 800a38e:	4618      	mov	r0, r3
 800a390:	f000 fab6 	bl	800a900 <OSPI_NOR_MspDeInit>
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS == 0) */

      /* Call the DeInit function to reset the driver */
      if (HAL_OSPI_DeInit(&hospi_nor[Instance]) != HAL_OK)
 800a394:	687a      	ldr	r2, [r7, #4]
 800a396:	4613      	mov	r3, r2
 800a398:	005b      	lsls	r3, r3, #1
 800a39a:	4413      	add	r3, r2
 800a39c:	015b      	lsls	r3, r3, #5
 800a39e:	4a09      	ldr	r2, [pc, #36]	; (800a3c4 <BSP_OSPI_NOR_DeInit+0xa4>)
 800a3a0:	4413      	add	r3, r2
 800a3a2:	4618      	mov	r0, r3
 800a3a4:	f004 fef4 	bl	800f190 <HAL_OSPI_DeInit>
 800a3a8:	4603      	mov	r3, r0
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d002      	beq.n	800a3b4 <BSP_OSPI_NOR_DeInit+0x94>
      {
        ret = BSP_ERROR_PERIPH_FAILURE;
 800a3ae:	f06f 0303 	mvn.w	r3, #3
 800a3b2:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  /* Return BSP status */
  return ret;
 800a3b4:	68fb      	ldr	r3, [r7, #12]
}
 800a3b6:	4618      	mov	r0, r3
 800a3b8:	3710      	adds	r7, #16
 800a3ba:	46bd      	mov	sp, r7
 800a3bc:	bd80      	pop	{r7, pc}
 800a3be:	bf00      	nop
 800a3c0:	2400ce8c 	.word	0x2400ce8c
 800a3c4:	2400ce94 	.word	0x2400ce94

0800a3c8 <MX_OSPI_NOR_Init>:
  * @param  hospi          OSPI handle
  * @param  Config         OSPI config structure
  * @retval BSP status
  */
__weak HAL_StatusTypeDef MX_OSPI_NOR_Init(OSPI_HandleTypeDef *hospi, MX_OSPI_Config *Config)
{
 800a3c8:	b580      	push	{r7, lr}
 800a3ca:	b082      	sub	sp, #8
 800a3cc:	af00      	add	r7, sp, #0
 800a3ce:	6078      	str	r0, [r7, #4]
 800a3d0:	6039      	str	r1, [r7, #0]
    /* OctoSPI initialization */
  hospi->Instance = OCTOSPI1;
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	4a20      	ldr	r2, [pc, #128]	; (800a458 <MX_OSPI_NOR_Init+0x90>)
 800a3d6:	601a      	str	r2, [r3, #0]

  hospi->Init.FifoThreshold      = 4;
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	2204      	movs	r2, #4
 800a3dc:	605a      	str	r2, [r3, #4]
  hospi->Init.DualQuad           = HAL_OSPI_DUALQUAD_DISABLE;
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	2200      	movs	r2, #0
 800a3e2:	609a      	str	r2, [r3, #8]
  hospi->Init.DeviceSize         = Config->MemorySize; /* 512 MBits */
 800a3e4:	683b      	ldr	r3, [r7, #0]
 800a3e6:	681a      	ldr	r2, [r3, #0]
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	611a      	str	r2, [r3, #16]
  hospi->Init.ChipSelectHighTime = 2;
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	2202      	movs	r2, #2
 800a3f0:	615a      	str	r2, [r3, #20]
  hospi->Init.FreeRunningClock   = HAL_OSPI_FREERUNCLK_DISABLE;
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	2200      	movs	r2, #0
 800a3f6:	619a      	str	r2, [r3, #24]
  hospi->Init.ClockMode          = HAL_OSPI_CLOCK_MODE_0;
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	2200      	movs	r2, #0
 800a3fc:	61da      	str	r2, [r3, #28]
  hospi->Init.WrapSize           = HAL_OSPI_WRAP_NOT_SUPPORTED;
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	2200      	movs	r2, #0
 800a402:	621a      	str	r2, [r3, #32]
  hospi->Init.ClockPrescaler     = Config->ClockPrescaler;
 800a404:	683b      	ldr	r3, [r7, #0]
 800a406:	685a      	ldr	r2, [r3, #4]
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	625a      	str	r2, [r3, #36]	; 0x24
  hospi->Init.SampleShifting     = Config->SampleShifting;
 800a40c:	683b      	ldr	r3, [r7, #0]
 800a40e:	689a      	ldr	r2, [r3, #8]
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	629a      	str	r2, [r3, #40]	; 0x28
  hospi->Init.ChipSelectBoundary = 0;
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	2200      	movs	r2, #0
 800a418:	631a      	str	r2, [r3, #48]	; 0x30
  hospi->Init.DelayBlockBypass   = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	2208      	movs	r2, #8
 800a41e:	639a      	str	r2, [r3, #56]	; 0x38

  if (Config->TransferRate == (uint32_t)BSP_OSPI_NOR_DTR_TRANSFER)
 800a420:	683b      	ldr	r3, [r7, #0]
 800a422:	68db      	ldr	r3, [r3, #12]
 800a424:	2b01      	cmp	r3, #1
 800a426:	d108      	bne.n	800a43a <MX_OSPI_NOR_Init+0x72>
  {
    hospi->Init.MemoryType            = HAL_OSPI_MEMTYPE_MACRONIX;
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a42e:	60da      	str	r2, [r3, #12]
    hospi->Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_ENABLE;
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a436:	62da      	str	r2, [r3, #44]	; 0x2c
 800a438:	e005      	b.n	800a446 <MX_OSPI_NOR_Init+0x7e>
  }
  else
  {
    hospi->Init.MemoryType            = HAL_OSPI_MEMTYPE_MICRON;
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	2200      	movs	r2, #0
 800a43e:	60da      	str	r2, [r3, #12]
    hospi->Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	2200      	movs	r2, #0
 800a444:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  return HAL_OSPI_Init(hospi);
 800a446:	6878      	ldr	r0, [r7, #4]
 800a448:	f004 fde2 	bl	800f010 <HAL_OSPI_Init>
 800a44c:	4603      	mov	r3, r0
}
 800a44e:	4618      	mov	r0, r3
 800a450:	3708      	adds	r7, #8
 800a452:	46bd      	mov	sp, r7
 800a454:	bd80      	pop	{r7, pc}
 800a456:	bf00      	nop
 800a458:	52005000 	.word	0x52005000

0800a45c <BSP_OSPI_NOR_EnableMemoryMappedMode>:
  * @brief  Configure the OSPI in memory-mapped mode
  * @param  Instance  OSPI instance
  * @retval BSP status
  */
int32_t BSP_OSPI_NOR_EnableMemoryMappedMode(uint32_t Instance)
{
 800a45c:	b580      	push	{r7, lr}
 800a45e:	b084      	sub	sp, #16
 800a460:	af00      	add	r7, sp, #0
 800a462:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 800a464:	2300      	movs	r3, #0
 800a466:	60fb      	str	r3, [r7, #12]

  /* Check if the instance is supported */
  if(Instance >= OSPI_NOR_INSTANCES_NUMBER)
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d003      	beq.n	800a476 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800a46e:	f06f 0301 	mvn.w	r3, #1
 800a472:	60fb      	str	r3, [r7, #12]
 800a474:	e03f      	b.n	800a4f6 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x9a>
  }
  else if(Ospi_Nor_Ctx[Instance].TransferRate == BSP_OSPI_NOR_STR_TRANSFER)
 800a476:	4a22      	ldr	r2, [pc, #136]	; (800a500 <BSP_OSPI_NOR_EnableMemoryMappedMode+0xa4>)
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	00db      	lsls	r3, r3, #3
 800a47c:	4413      	add	r3, r2
 800a47e:	789b      	ldrb	r3, [r3, #2]
 800a480:	2b00      	cmp	r3, #0
 800a482:	d11c      	bne.n	800a4be <BSP_OSPI_NOR_EnableMemoryMappedMode+0x62>
  {
    if(MX25LM51245G_EnableMemoryMappedModeSTR(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, MX25LM51245G_4BYTES_SIZE) != MX25LM51245G_OK)
 800a484:	687a      	ldr	r2, [r7, #4]
 800a486:	4613      	mov	r3, r2
 800a488:	005b      	lsls	r3, r3, #1
 800a48a:	4413      	add	r3, r2
 800a48c:	015b      	lsls	r3, r3, #5
 800a48e:	4a1d      	ldr	r2, [pc, #116]	; (800a504 <BSP_OSPI_NOR_EnableMemoryMappedMode+0xa8>)
 800a490:	1898      	adds	r0, r3, r2
 800a492:	4a1b      	ldr	r2, [pc, #108]	; (800a500 <BSP_OSPI_NOR_EnableMemoryMappedMode+0xa4>)
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	00db      	lsls	r3, r3, #3
 800a498:	4413      	add	r3, r2
 800a49a:	785b      	ldrb	r3, [r3, #1]
 800a49c:	2201      	movs	r2, #1
 800a49e:	4619      	mov	r1, r3
 800a4a0:	f7fe fe99 	bl	80091d6 <MX25LM51245G_EnableMemoryMappedModeSTR>
 800a4a4:	4603      	mov	r3, r0
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d003      	beq.n	800a4b2 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x56>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800a4aa:	f06f 0304 	mvn.w	r3, #4
 800a4ae:	60fb      	str	r3, [r7, #12]
 800a4b0:	e021      	b.n	800a4f6 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x9a>
    }
    else /* Update OSPI context if all operations are well done */
    {
      Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_MMP;
 800a4b2:	4a13      	ldr	r2, [pc, #76]	; (800a500 <BSP_OSPI_NOR_EnableMemoryMappedMode+0xa4>)
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	2102      	movs	r1, #2
 800a4b8:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
 800a4bc:	e01b      	b.n	800a4f6 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x9a>
    }
  }
  else
  {
    if(MX25LM51245G_EnableMemoryMappedModeDTR(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode) != MX25LM51245G_OK)
 800a4be:	687a      	ldr	r2, [r7, #4]
 800a4c0:	4613      	mov	r3, r2
 800a4c2:	005b      	lsls	r3, r3, #1
 800a4c4:	4413      	add	r3, r2
 800a4c6:	015b      	lsls	r3, r3, #5
 800a4c8:	4a0e      	ldr	r2, [pc, #56]	; (800a504 <BSP_OSPI_NOR_EnableMemoryMappedMode+0xa8>)
 800a4ca:	441a      	add	r2, r3
 800a4cc:	490c      	ldr	r1, [pc, #48]	; (800a500 <BSP_OSPI_NOR_EnableMemoryMappedMode+0xa4>)
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	00db      	lsls	r3, r3, #3
 800a4d2:	440b      	add	r3, r1
 800a4d4:	785b      	ldrb	r3, [r3, #1]
 800a4d6:	4619      	mov	r1, r3
 800a4d8:	4610      	mov	r0, r2
 800a4da:	f7fe ff26 	bl	800932a <MX25LM51245G_EnableMemoryMappedModeDTR>
 800a4de:	4603      	mov	r3, r0
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	d003      	beq.n	800a4ec <BSP_OSPI_NOR_EnableMemoryMappedMode+0x90>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800a4e4:	f06f 0304 	mvn.w	r3, #4
 800a4e8:	60fb      	str	r3, [r7, #12]
 800a4ea:	e004      	b.n	800a4f6 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x9a>
    }
    else /* Update OSPI context if all operations are well done */
    {
      Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_MMP;
 800a4ec:	4a04      	ldr	r2, [pc, #16]	; (800a500 <BSP_OSPI_NOR_EnableMemoryMappedMode+0xa4>)
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	2102      	movs	r1, #2
 800a4f2:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
    }
  }

  /* Return BSP status */
  return ret;
 800a4f6:	68fb      	ldr	r3, [r7, #12]
}
 800a4f8:	4618      	mov	r0, r3
 800a4fa:	3710      	adds	r7, #16
 800a4fc:	46bd      	mov	sp, r7
 800a4fe:	bd80      	pop	{r7, pc}
 800a500:	2400ce8c 	.word	0x2400ce8c
 800a504:	2400ce94 	.word	0x2400ce94

0800a508 <BSP_OSPI_NOR_DisableMemoryMappedMode>:
  *         Only 1 Instance can running MMP mode. And it will lock system at this mode.
  * @param  Instance  OSPI instance
  * @retval BSP status
  */
int32_t BSP_OSPI_NOR_DisableMemoryMappedMode(uint32_t Instance)
{
 800a508:	b580      	push	{r7, lr}
 800a50a:	b084      	sub	sp, #16
 800a50c:	af00      	add	r7, sp, #0
 800a50e:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 800a510:	2300      	movs	r3, #0
 800a512:	60fb      	str	r3, [r7, #12]

  /* Check if the instance is supported */
  if(Instance >= OSPI_NOR_INSTANCES_NUMBER)
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	2b00      	cmp	r3, #0
 800a518:	d003      	beq.n	800a522 <BSP_OSPI_NOR_DisableMemoryMappedMode+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800a51a:	f06f 0301 	mvn.w	r3, #1
 800a51e:	60fb      	str	r3, [r7, #12]
 800a520:	e01f      	b.n	800a562 <BSP_OSPI_NOR_DisableMemoryMappedMode+0x5a>
  }
  else if(Ospi_Nor_Ctx[Instance].IsInitialized != OSPI_ACCESS_MMP)
 800a522:	4a12      	ldr	r2, [pc, #72]	; (800a56c <BSP_OSPI_NOR_DisableMemoryMappedMode+0x64>)
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 800a52a:	2b02      	cmp	r3, #2
 800a52c:	d003      	beq.n	800a536 <BSP_OSPI_NOR_DisableMemoryMappedMode+0x2e>
  {
    ret = BSP_ERROR_OSPI_MMP_UNLOCK_FAILURE;
 800a52e:	f06f 031a 	mvn.w	r3, #26
 800a532:	60fb      	str	r3, [r7, #12]
 800a534:	e015      	b.n	800a562 <BSP_OSPI_NOR_DisableMemoryMappedMode+0x5a>
  }/* Abort MMP back to indirect mode */
  else if(HAL_OSPI_Abort(&hospi_nor[Instance]) != HAL_OK)
 800a536:	687a      	ldr	r2, [r7, #4]
 800a538:	4613      	mov	r3, r2
 800a53a:	005b      	lsls	r3, r3, #1
 800a53c:	4413      	add	r3, r2
 800a53e:	015b      	lsls	r3, r3, #5
 800a540:	4a0b      	ldr	r2, [pc, #44]	; (800a570 <BSP_OSPI_NOR_DisableMemoryMappedMode+0x68>)
 800a542:	4413      	add	r3, r2
 800a544:	4618      	mov	r0, r3
 800a546:	f005 fa55 	bl	800f9f4 <HAL_OSPI_Abort>
 800a54a:	4603      	mov	r3, r0
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	d003      	beq.n	800a558 <BSP_OSPI_NOR_DisableMemoryMappedMode+0x50>
  {
    ret = BSP_ERROR_PERIPH_FAILURE;
 800a550:	f06f 0303 	mvn.w	r3, #3
 800a554:	60fb      	str	r3, [r7, #12]
 800a556:	e004      	b.n	800a562 <BSP_OSPI_NOR_DisableMemoryMappedMode+0x5a>
  }
  else
  {
    /* Update OSPI context if all operations are well done */
    Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_INDIRECT;
 800a558:	4a04      	ldr	r2, [pc, #16]	; (800a56c <BSP_OSPI_NOR_DisableMemoryMappedMode+0x64>)
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	2101      	movs	r1, #1
 800a55e:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
  }

  /* Return BSP status */
  return ret;
 800a562:	68fb      	ldr	r3, [r7, #12]
}
 800a564:	4618      	mov	r0, r3
 800a566:	3710      	adds	r7, #16
 800a568:	46bd      	mov	sp, r7
 800a56a:	bd80      	pop	{r7, pc}
 800a56c:	2400ce8c 	.word	0x2400ce8c
 800a570:	2400ce94 	.word	0x2400ce94

0800a574 <BSP_OSPI_NOR_ConfigFlash>:
  * @param  Mode      OSPI mode
  * @param  Rate      OSPI transfer rate
  * @retval BSP status
  */
int32_t BSP_OSPI_NOR_ConfigFlash(uint32_t Instance, BSP_OSPI_NOR_Interface_t Mode, BSP_OSPI_NOR_Transfer_t Rate)
{
 800a574:	b580      	push	{r7, lr}
 800a576:	b084      	sub	sp, #16
 800a578:	af00      	add	r7, sp, #0
 800a57a:	6078      	str	r0, [r7, #4]
 800a57c:	460b      	mov	r3, r1
 800a57e:	70fb      	strb	r3, [r7, #3]
 800a580:	4613      	mov	r3, r2
 800a582:	70bb      	strb	r3, [r7, #2]
  int32_t ret = BSP_ERROR_NONE;
 800a584:	2300      	movs	r3, #0
 800a586:	60fb      	str	r3, [r7, #12]

  /* Check if the instance is supported */
  if(Instance >= OSPI_NOR_INSTANCES_NUMBER)
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d003      	beq.n	800a596 <BSP_OSPI_NOR_ConfigFlash+0x22>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800a58e:	f06f 0301 	mvn.w	r3, #1
 800a592:	60fb      	str	r3, [r7, #12]
 800a594:	e05d      	b.n	800a652 <BSP_OSPI_NOR_ConfigFlash+0xde>
  }/* Check if MMP mode locked ************************************************/
  else if(Ospi_Nor_Ctx[Instance].IsInitialized == OSPI_ACCESS_MMP)
 800a596:	4a31      	ldr	r2, [pc, #196]	; (800a65c <BSP_OSPI_NOR_ConfigFlash+0xe8>)
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 800a59e:	2b02      	cmp	r3, #2
 800a5a0:	d103      	bne.n	800a5aa <BSP_OSPI_NOR_ConfigFlash+0x36>
  {
    ret = BSP_ERROR_OSPI_MMP_LOCK_FAILURE;
 800a5a2:	f06f 0319 	mvn.w	r3, #25
 800a5a6:	60fb      	str	r3, [r7, #12]
 800a5a8:	e053      	b.n	800a652 <BSP_OSPI_NOR_ConfigFlash+0xde>
  }
  else
  {
    /* Setup Flash interface ***************************************************/
    switch(Ospi_Nor_Ctx[Instance].InterfaceMode)
 800a5aa:	4a2c      	ldr	r2, [pc, #176]	; (800a65c <BSP_OSPI_NOR_ConfigFlash+0xe8>)
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	00db      	lsls	r3, r3, #3
 800a5b0:	4413      	add	r3, r2
 800a5b2:	785b      	ldrb	r3, [r3, #1]
 800a5b4:	2b01      	cmp	r3, #1
 800a5b6:	d125      	bne.n	800a604 <BSP_OSPI_NOR_ConfigFlash+0x90>
    {
    case BSP_OSPI_NOR_OPI_MODE :  /* 8-8-8 commands */
      if((Mode != BSP_OSPI_NOR_OPI_MODE) || (Rate != Ospi_Nor_Ctx[Instance].TransferRate))
 800a5b8:	78fb      	ldrb	r3, [r7, #3]
 800a5ba:	2b01      	cmp	r3, #1
 800a5bc:	d107      	bne.n	800a5ce <BSP_OSPI_NOR_ConfigFlash+0x5a>
 800a5be:	4a27      	ldr	r2, [pc, #156]	; (800a65c <BSP_OSPI_NOR_ConfigFlash+0xe8>)
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	00db      	lsls	r3, r3, #3
 800a5c4:	4413      	add	r3, r2
 800a5c6:	789b      	ldrb	r3, [r3, #2]
 800a5c8:	78ba      	ldrb	r2, [r7, #2]
 800a5ca:	429a      	cmp	r2, r3
 800a5cc:	d02a      	beq.n	800a624 <BSP_OSPI_NOR_ConfigFlash+0xb0>
      {
        /* Exit OPI mode */
        ret = OSPI_NOR_ExitOPIMode(Instance);
 800a5ce:	6878      	ldr	r0, [r7, #4]
 800a5d0:	f000 fc12 	bl	800adf8 <OSPI_NOR_ExitOPIMode>
 800a5d4:	60f8      	str	r0, [r7, #12]

        if ((ret == BSP_ERROR_NONE) && (Mode == BSP_OSPI_NOR_OPI_MODE))
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	d123      	bne.n	800a624 <BSP_OSPI_NOR_ConfigFlash+0xb0>
 800a5dc:	78fb      	ldrb	r3, [r7, #3]
 800a5de:	2b01      	cmp	r3, #1
 800a5e0:	d120      	bne.n	800a624 <BSP_OSPI_NOR_ConfigFlash+0xb0>
        {

          if (Ospi_Nor_Ctx[Instance].TransferRate == BSP_OSPI_NOR_STR_TRANSFER)
 800a5e2:	4a1e      	ldr	r2, [pc, #120]	; (800a65c <BSP_OSPI_NOR_ConfigFlash+0xe8>)
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	00db      	lsls	r3, r3, #3
 800a5e8:	4413      	add	r3, r2
 800a5ea:	789b      	ldrb	r3, [r3, #2]
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d104      	bne.n	800a5fa <BSP_OSPI_NOR_ConfigFlash+0x86>
          {
            /* Enter DTR OPI mode */
            ret = OSPI_NOR_EnterDOPIMode(Instance);
 800a5f0:	6878      	ldr	r0, [r7, #4]
 800a5f2:	f000 fa75 	bl	800aae0 <OSPI_NOR_EnterDOPIMode>
 800a5f6:	60f8      	str	r0, [r7, #12]
            /* Enter STR OPI mode */
            ret = OSPI_NOR_EnterSOPIMode(Instance);
          }
        }
      }
      break;
 800a5f8:	e014      	b.n	800a624 <BSP_OSPI_NOR_ConfigFlash+0xb0>
            ret = OSPI_NOR_EnterSOPIMode(Instance);
 800a5fa:	6878      	ldr	r0, [r7, #4]
 800a5fc:	f000 fb4a 	bl	800ac94 <OSPI_NOR_EnterSOPIMode>
 800a600:	60f8      	str	r0, [r7, #12]
      break;
 800a602:	e00f      	b.n	800a624 <BSP_OSPI_NOR_ConfigFlash+0xb0>

    case BSP_OSPI_NOR_SPI_MODE :  /* 1-1-1 commands, Power on H/W default setting */
    default :
      if(Mode == BSP_OSPI_NOR_OPI_MODE)
 800a604:	78fb      	ldrb	r3, [r7, #3]
 800a606:	2b01      	cmp	r3, #1
 800a608:	d10e      	bne.n	800a628 <BSP_OSPI_NOR_ConfigFlash+0xb4>
      {
        if(Rate == BSP_OSPI_NOR_STR_TRANSFER)
 800a60a:	78bb      	ldrb	r3, [r7, #2]
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	d104      	bne.n	800a61a <BSP_OSPI_NOR_ConfigFlash+0xa6>
        {
          /* Enter STR OPI mode */
          ret = OSPI_NOR_EnterSOPIMode(Instance);
 800a610:	6878      	ldr	r0, [r7, #4]
 800a612:	f000 fb3f 	bl	800ac94 <OSPI_NOR_EnterSOPIMode>
 800a616:	60f8      	str	r0, [r7, #12]
        {
          /* Enter DTR OPI mode */
          ret = OSPI_NOR_EnterDOPIMode(Instance);
        }
      }
      break;
 800a618:	e006      	b.n	800a628 <BSP_OSPI_NOR_ConfigFlash+0xb4>
          ret = OSPI_NOR_EnterDOPIMode(Instance);
 800a61a:	6878      	ldr	r0, [r7, #4]
 800a61c:	f000 fa60 	bl	800aae0 <OSPI_NOR_EnterDOPIMode>
 800a620:	60f8      	str	r0, [r7, #12]
      break;
 800a622:	e001      	b.n	800a628 <BSP_OSPI_NOR_ConfigFlash+0xb4>
      break;
 800a624:	bf00      	nop
 800a626:	e000      	b.n	800a62a <BSP_OSPI_NOR_ConfigFlash+0xb6>
      break;
 800a628:	bf00      	nop
    }

    /* Update OSPI context if all operations are well done */
    if(ret == BSP_ERROR_NONE)
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	d110      	bne.n	800a652 <BSP_OSPI_NOR_ConfigFlash+0xde>
    {
      /* Update current status parameter *****************************************/
      Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_INDIRECT;
 800a630:	4a0a      	ldr	r2, [pc, #40]	; (800a65c <BSP_OSPI_NOR_ConfigFlash+0xe8>)
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	2101      	movs	r1, #1
 800a636:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
      Ospi_Nor_Ctx[Instance].InterfaceMode = Mode;
 800a63a:	4a08      	ldr	r2, [pc, #32]	; (800a65c <BSP_OSPI_NOR_ConfigFlash+0xe8>)
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	00db      	lsls	r3, r3, #3
 800a640:	4413      	add	r3, r2
 800a642:	78fa      	ldrb	r2, [r7, #3]
 800a644:	705a      	strb	r2, [r3, #1]
      Ospi_Nor_Ctx[Instance].TransferRate  = Rate;
 800a646:	4a05      	ldr	r2, [pc, #20]	; (800a65c <BSP_OSPI_NOR_ConfigFlash+0xe8>)
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	00db      	lsls	r3, r3, #3
 800a64c:	4413      	add	r3, r2
 800a64e:	78ba      	ldrb	r2, [r7, #2]
 800a650:	709a      	strb	r2, [r3, #2]
    }
  }

  /* Return BSP status */
  return ret;
 800a652:	68fb      	ldr	r3, [r7, #12]
}
 800a654:	4618      	mov	r0, r3
 800a656:	3710      	adds	r7, #16
 800a658:	46bd      	mov	sp, r7
 800a65a:	bd80      	pop	{r7, pc}
 800a65c:	2400ce8c 	.word	0x2400ce8c

0800a660 <OSPI_NOR_MspInit>:
  * @brief  Initializes the OSPI MSP.
  * @param  hospi OSPI handle
  * @retval None
  */
static void OSPI_NOR_MspInit(OSPI_HandleTypeDef *hospi)
{
 800a660:	b580      	push	{r7, lr}
 800a662:	b094      	sub	sp, #80	; 0x50
 800a664:	af00      	add	r7, sp, #0
 800a666:	6078      	str	r0, [r7, #4]

  /* hospi unused argument(s) compilation warning */
  UNUSED(hospi);

  /* Enable the OctoSPI memory interface clock */
  OSPI_CLK_ENABLE();
 800a668:	4b9e      	ldr	r3, [pc, #632]	; (800a8e4 <OSPI_NOR_MspInit+0x284>)
 800a66a:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 800a66e:	4a9d      	ldr	r2, [pc, #628]	; (800a8e4 <OSPI_NOR_MspInit+0x284>)
 800a670:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a674:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
 800a678:	4b9a      	ldr	r3, [pc, #616]	; (800a8e4 <OSPI_NOR_MspInit+0x284>)
 800a67a:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 800a67e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a682:	63bb      	str	r3, [r7, #56]	; 0x38
 800a684:	6bbb      	ldr	r3, [r7, #56]	; 0x38

  /* Reset the OctoSPI memory interface */
  OSPI_FORCE_RESET();
 800a686:	4b97      	ldr	r3, [pc, #604]	; (800a8e4 <OSPI_NOR_MspInit+0x284>)
 800a688:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a68a:	4a96      	ldr	r2, [pc, #600]	; (800a8e4 <OSPI_NOR_MspInit+0x284>)
 800a68c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a690:	67d3      	str	r3, [r2, #124]	; 0x7c
  OSPI_RELEASE_RESET();
 800a692:	4b94      	ldr	r3, [pc, #592]	; (800a8e4 <OSPI_NOR_MspInit+0x284>)
 800a694:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a696:	4a93      	ldr	r2, [pc, #588]	; (800a8e4 <OSPI_NOR_MspInit+0x284>)
 800a698:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a69c:	67d3      	str	r3, [r2, #124]	; 0x7c

  /* Enable GPIO clocks */
  OSPI_CLK_GPIO_CLK_ENABLE();
 800a69e:	4b91      	ldr	r3, [pc, #580]	; (800a8e4 <OSPI_NOR_MspInit+0x284>)
 800a6a0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800a6a4:	4a8f      	ldr	r2, [pc, #572]	; (800a8e4 <OSPI_NOR_MspInit+0x284>)
 800a6a6:	f043 0302 	orr.w	r3, r3, #2
 800a6aa:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800a6ae:	4b8d      	ldr	r3, [pc, #564]	; (800a8e4 <OSPI_NOR_MspInit+0x284>)
 800a6b0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800a6b4:	f003 0302 	and.w	r3, r3, #2
 800a6b8:	637b      	str	r3, [r7, #52]	; 0x34
 800a6ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
  OSPI_DQS_GPIO_CLK_ENABLE();
 800a6bc:	4b89      	ldr	r3, [pc, #548]	; (800a8e4 <OSPI_NOR_MspInit+0x284>)
 800a6be:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800a6c2:	4a88      	ldr	r2, [pc, #544]	; (800a8e4 <OSPI_NOR_MspInit+0x284>)
 800a6c4:	f043 0304 	orr.w	r3, r3, #4
 800a6c8:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800a6cc:	4b85      	ldr	r3, [pc, #532]	; (800a8e4 <OSPI_NOR_MspInit+0x284>)
 800a6ce:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800a6d2:	f003 0304 	and.w	r3, r3, #4
 800a6d6:	633b      	str	r3, [r7, #48]	; 0x30
 800a6d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  OSPI_CS_GPIO_CLK_ENABLE();
 800a6da:	4b82      	ldr	r3, [pc, #520]	; (800a8e4 <OSPI_NOR_MspInit+0x284>)
 800a6dc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800a6e0:	4a80      	ldr	r2, [pc, #512]	; (800a8e4 <OSPI_NOR_MspInit+0x284>)
 800a6e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a6e6:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800a6ea:	4b7e      	ldr	r3, [pc, #504]	; (800a8e4 <OSPI_NOR_MspInit+0x284>)
 800a6ec:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800a6f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a6f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a6f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  OSPI_D0_GPIO_CLK_ENABLE();
 800a6f8:	4b7a      	ldr	r3, [pc, #488]	; (800a8e4 <OSPI_NOR_MspInit+0x284>)
 800a6fa:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800a6fe:	4a79      	ldr	r2, [pc, #484]	; (800a8e4 <OSPI_NOR_MspInit+0x284>)
 800a700:	f043 0308 	orr.w	r3, r3, #8
 800a704:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800a708:	4b76      	ldr	r3, [pc, #472]	; (800a8e4 <OSPI_NOR_MspInit+0x284>)
 800a70a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800a70e:	f003 0308 	and.w	r3, r3, #8
 800a712:	62bb      	str	r3, [r7, #40]	; 0x28
 800a714:	6abb      	ldr	r3, [r7, #40]	; 0x28
  OSPI_D1_GPIO_CLK_ENABLE();
 800a716:	4b73      	ldr	r3, [pc, #460]	; (800a8e4 <OSPI_NOR_MspInit+0x284>)
 800a718:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800a71c:	4a71      	ldr	r2, [pc, #452]	; (800a8e4 <OSPI_NOR_MspInit+0x284>)
 800a71e:	f043 0320 	orr.w	r3, r3, #32
 800a722:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800a726:	4b6f      	ldr	r3, [pc, #444]	; (800a8e4 <OSPI_NOR_MspInit+0x284>)
 800a728:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800a72c:	f003 0320 	and.w	r3, r3, #32
 800a730:	627b      	str	r3, [r7, #36]	; 0x24
 800a732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  OSPI_D2_GPIO_CLK_ENABLE();
 800a734:	4b6b      	ldr	r3, [pc, #428]	; (800a8e4 <OSPI_NOR_MspInit+0x284>)
 800a736:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800a73a:	4a6a      	ldr	r2, [pc, #424]	; (800a8e4 <OSPI_NOR_MspInit+0x284>)
 800a73c:	f043 0320 	orr.w	r3, r3, #32
 800a740:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800a744:	4b67      	ldr	r3, [pc, #412]	; (800a8e4 <OSPI_NOR_MspInit+0x284>)
 800a746:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800a74a:	f003 0320 	and.w	r3, r3, #32
 800a74e:	623b      	str	r3, [r7, #32]
 800a750:	6a3b      	ldr	r3, [r7, #32]
  OSPI_D3_GPIO_CLK_ENABLE();
 800a752:	4b64      	ldr	r3, [pc, #400]	; (800a8e4 <OSPI_NOR_MspInit+0x284>)
 800a754:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800a758:	4a62      	ldr	r2, [pc, #392]	; (800a8e4 <OSPI_NOR_MspInit+0x284>)
 800a75a:	f043 0320 	orr.w	r3, r3, #32
 800a75e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800a762:	4b60      	ldr	r3, [pc, #384]	; (800a8e4 <OSPI_NOR_MspInit+0x284>)
 800a764:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800a768:	f003 0320 	and.w	r3, r3, #32
 800a76c:	61fb      	str	r3, [r7, #28]
 800a76e:	69fb      	ldr	r3, [r7, #28]
  OSPI_D4_GPIO_CLK_ENABLE();
 800a770:	4b5c      	ldr	r3, [pc, #368]	; (800a8e4 <OSPI_NOR_MspInit+0x284>)
 800a772:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800a776:	4a5b      	ldr	r2, [pc, #364]	; (800a8e4 <OSPI_NOR_MspInit+0x284>)
 800a778:	f043 0304 	orr.w	r3, r3, #4
 800a77c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800a780:	4b58      	ldr	r3, [pc, #352]	; (800a8e4 <OSPI_NOR_MspInit+0x284>)
 800a782:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800a786:	f003 0304 	and.w	r3, r3, #4
 800a78a:	61bb      	str	r3, [r7, #24]
 800a78c:	69bb      	ldr	r3, [r7, #24]
  OSPI_D5_GPIO_CLK_ENABLE();
 800a78e:	4b55      	ldr	r3, [pc, #340]	; (800a8e4 <OSPI_NOR_MspInit+0x284>)
 800a790:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800a794:	4a53      	ldr	r2, [pc, #332]	; (800a8e4 <OSPI_NOR_MspInit+0x284>)
 800a796:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a79a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800a79e:	4b51      	ldr	r3, [pc, #324]	; (800a8e4 <OSPI_NOR_MspInit+0x284>)
 800a7a0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800a7a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a7a8:	617b      	str	r3, [r7, #20]
 800a7aa:	697b      	ldr	r3, [r7, #20]
  OSPI_D6_GPIO_CLK_ENABLE();
 800a7ac:	4b4d      	ldr	r3, [pc, #308]	; (800a8e4 <OSPI_NOR_MspInit+0x284>)
 800a7ae:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800a7b2:	4a4c      	ldr	r2, [pc, #304]	; (800a8e4 <OSPI_NOR_MspInit+0x284>)
 800a7b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a7b8:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800a7bc:	4b49      	ldr	r3, [pc, #292]	; (800a8e4 <OSPI_NOR_MspInit+0x284>)
 800a7be:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800a7c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a7c6:	613b      	str	r3, [r7, #16]
 800a7c8:	693b      	ldr	r3, [r7, #16]
  OSPI_D7_GPIO_CLK_ENABLE();
 800a7ca:	4b46      	ldr	r3, [pc, #280]	; (800a8e4 <OSPI_NOR_MspInit+0x284>)
 800a7cc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800a7d0:	4a44      	ldr	r2, [pc, #272]	; (800a8e4 <OSPI_NOR_MspInit+0x284>)
 800a7d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a7d6:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800a7da:	4b42      	ldr	r3, [pc, #264]	; (800a8e4 <OSPI_NOR_MspInit+0x284>)
 800a7dc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800a7e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a7e4:	60fb      	str	r3, [r7, #12]
 800a7e6:	68fb      	ldr	r3, [r7, #12]

  /* OctoSPI CS GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_CS_PIN;
 800a7e8:	2340      	movs	r3, #64	; 0x40
 800a7ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 800a7ec:	2302      	movs	r3, #2
 800a7ee:	643b      	str	r3, [r7, #64]	; 0x40
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
 800a7f0:	2301      	movs	r3, #1
 800a7f2:	647b      	str	r3, [r7, #68]	; 0x44
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 800a7f4:	2303      	movs	r3, #3
 800a7f6:	64bb      	str	r3, [r7, #72]	; 0x48
  GPIO_InitStruct.Alternate = OSPI_CS_PIN_AF;
 800a7f8:	230a      	movs	r3, #10
 800a7fa:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(OSPI_CS_GPIO_PORT, &GPIO_InitStruct);
 800a7fc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800a800:	4619      	mov	r1, r3
 800a802:	4839      	ldr	r0, [pc, #228]	; (800a8e8 <OSPI_NOR_MspInit+0x288>)
 800a804:	f002 ff1c 	bl	800d640 <HAL_GPIO_Init>

  /* OctoSPI DQS GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_DQS_PIN;
 800a808:	2320      	movs	r3, #32
 800a80a:	63fb      	str	r3, [r7, #60]	; 0x3c
  GPIO_InitStruct.Alternate = OSPI_DQS_PIN_AF;
 800a80c:	230a      	movs	r3, #10
 800a80e:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(OSPI_DQS_GPIO_PORT, &GPIO_InitStruct);
 800a810:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800a814:	4619      	mov	r1, r3
 800a816:	4835      	ldr	r0, [pc, #212]	; (800a8ec <OSPI_NOR_MspInit+0x28c>)
 800a818:	f002 ff12 	bl	800d640 <HAL_GPIO_Init>

  /* OctoSPI CLK GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_CLK_PIN;
 800a81c:	2304      	movs	r3, #4
 800a81e:	63fb      	str	r3, [r7, #60]	; 0x3c
  GPIO_InitStruct.Pull      = GPIO_NOPULL;
 800a820:	2300      	movs	r3, #0
 800a822:	647b      	str	r3, [r7, #68]	; 0x44
  GPIO_InitStruct.Alternate = OSPI_CLK_PIN_AF;
 800a824:	2309      	movs	r3, #9
 800a826:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(OSPI_CLK_GPIO_PORT, &GPIO_InitStruct);
 800a828:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800a82c:	4619      	mov	r1, r3
 800a82e:	4830      	ldr	r0, [pc, #192]	; (800a8f0 <OSPI_NOR_MspInit+0x290>)
 800a830:	f002 ff06 	bl	800d640 <HAL_GPIO_Init>

  /* OctoSPI D0 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_D0_PIN;
 800a834:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a838:	63fb      	str	r3, [r7, #60]	; 0x3c
  GPIO_InitStruct.Alternate = OSPI_D0_PIN_AF;
 800a83a:	2309      	movs	r3, #9
 800a83c:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(OSPI_D0_GPIO_PORT, &GPIO_InitStruct);
 800a83e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800a842:	4619      	mov	r1, r3
 800a844:	482b      	ldr	r0, [pc, #172]	; (800a8f4 <OSPI_NOR_MspInit+0x294>)
 800a846:	f002 fefb 	bl	800d640 <HAL_GPIO_Init>

  /* OctoSPI D1 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_D1_PIN;
 800a84a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a84e:	63fb      	str	r3, [r7, #60]	; 0x3c
  GPIO_InitStruct.Alternate = OSPI_D1_PIN_AF;
 800a850:	230a      	movs	r3, #10
 800a852:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(OSPI_D1_GPIO_PORT, &GPIO_InitStruct);
 800a854:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800a858:	4619      	mov	r1, r3
 800a85a:	4827      	ldr	r0, [pc, #156]	; (800a8f8 <OSPI_NOR_MspInit+0x298>)
 800a85c:	f002 fef0 	bl	800d640 <HAL_GPIO_Init>

  /* OctoSPI D2 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_D2_PIN;
 800a860:	2380      	movs	r3, #128	; 0x80
 800a862:	63fb      	str	r3, [r7, #60]	; 0x3c
  GPIO_InitStruct.Alternate = OSPI_D2_PIN_AF;
 800a864:	230a      	movs	r3, #10
 800a866:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(OSPI_D2_GPIO_PORT, &GPIO_InitStruct);
 800a868:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800a86c:	4619      	mov	r1, r3
 800a86e:	4822      	ldr	r0, [pc, #136]	; (800a8f8 <OSPI_NOR_MspInit+0x298>)
 800a870:	f002 fee6 	bl	800d640 <HAL_GPIO_Init>

  /* OctoSPI D3 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_D3_PIN;
 800a874:	2340      	movs	r3, #64	; 0x40
 800a876:	63fb      	str	r3, [r7, #60]	; 0x3c
  GPIO_InitStruct.Alternate = OSPI_D3_PIN_AF;
 800a878:	230a      	movs	r3, #10
 800a87a:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(OSPI_D3_GPIO_PORT, &GPIO_InitStruct);
 800a87c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800a880:	4619      	mov	r1, r3
 800a882:	481d      	ldr	r0, [pc, #116]	; (800a8f8 <OSPI_NOR_MspInit+0x298>)
 800a884:	f002 fedc 	bl	800d640 <HAL_GPIO_Init>

  /* OctoSPI D4 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_D4_PIN;
 800a888:	2302      	movs	r3, #2
 800a88a:	63fb      	str	r3, [r7, #60]	; 0x3c
  GPIO_InitStruct.Alternate = OSPI_D4_PIN_AF;
 800a88c:	230a      	movs	r3, #10
 800a88e:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(OSPI_D4_GPIO_PORT, &GPIO_InitStruct);
 800a890:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800a894:	4619      	mov	r1, r3
 800a896:	4815      	ldr	r0, [pc, #84]	; (800a8ec <OSPI_NOR_MspInit+0x28c>)
 800a898:	f002 fed2 	bl	800d640 <HAL_GPIO_Init>

  /* OctoSPI D5 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_D5_PIN;
 800a89c:	2308      	movs	r3, #8
 800a89e:	63fb      	str	r3, [r7, #60]	; 0x3c
  GPIO_InitStruct.Alternate = OSPI_D5_PIN_AF;
 800a8a0:	2309      	movs	r3, #9
 800a8a2:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(OSPI_D5_GPIO_PORT, &GPIO_InitStruct);
 800a8a4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800a8a8:	4619      	mov	r1, r3
 800a8aa:	4814      	ldr	r0, [pc, #80]	; (800a8fc <OSPI_NOR_MspInit+0x29c>)
 800a8ac:	f002 fec8 	bl	800d640 <HAL_GPIO_Init>

  /* OctoSPI D6 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_D6_PIN;
 800a8b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a8b4:	63fb      	str	r3, [r7, #60]	; 0x3c
  GPIO_InitStruct.Alternate = OSPI_D6_PIN_AF;
 800a8b6:	2309      	movs	r3, #9
 800a8b8:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(OSPI_D6_GPIO_PORT, &GPIO_InitStruct);
 800a8ba:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800a8be:	4619      	mov	r1, r3
 800a8c0:	4809      	ldr	r0, [pc, #36]	; (800a8e8 <OSPI_NOR_MspInit+0x288>)
 800a8c2:	f002 febd 	bl	800d640 <HAL_GPIO_Init>

  /* OctoSPI D7 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_D7_PIN;
 800a8c6:	2380      	movs	r3, #128	; 0x80
 800a8c8:	63fb      	str	r3, [r7, #60]	; 0x3c
  GPIO_InitStruct.Alternate = OSPI_D7_PIN_AF;
 800a8ca:	230a      	movs	r3, #10
 800a8cc:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(OSPI_D7_GPIO_PORT, &GPIO_InitStruct);
 800a8ce:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800a8d2:	4619      	mov	r1, r3
 800a8d4:	4807      	ldr	r0, [pc, #28]	; (800a8f4 <OSPI_NOR_MspInit+0x294>)
 800a8d6:	f002 feb3 	bl	800d640 <HAL_GPIO_Init>
}
 800a8da:	bf00      	nop
 800a8dc:	3750      	adds	r7, #80	; 0x50
 800a8de:	46bd      	mov	sp, r7
 800a8e0:	bd80      	pop	{r7, pc}
 800a8e2:	bf00      	nop
 800a8e4:	58024400 	.word	0x58024400
 800a8e8:	58021800 	.word	0x58021800
 800a8ec:	58020800 	.word	0x58020800
 800a8f0:	58020400 	.word	0x58020400
 800a8f4:	58020c00 	.word	0x58020c00
 800a8f8:	58021400 	.word	0x58021400
 800a8fc:	58021c00 	.word	0x58021c00

0800a900 <OSPI_NOR_MspDeInit>:
  * @brief  De-Initializes the OSPI MSP.
  * @param  hospi OSPI handle
  * @retval None
  */
static void OSPI_NOR_MspDeInit(OSPI_HandleTypeDef *hospi)
{
 800a900:	b580      	push	{r7, lr}
 800a902:	b082      	sub	sp, #8
 800a904:	af00      	add	r7, sp, #0
 800a906:	6078      	str	r0, [r7, #4]
  /* hospi unused argument(s) compilation warning */
  UNUSED(hospi);

  /* OctoSPI GPIO pins de-configuration  */
  HAL_GPIO_DeInit(OSPI_CLK_GPIO_PORT, OSPI_CLK_PIN);
 800a908:	2104      	movs	r1, #4
 800a90a:	4823      	ldr	r0, [pc, #140]	; (800a998 <OSPI_NOR_MspDeInit+0x98>)
 800a90c:	f003 f848 	bl	800d9a0 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_DQS_GPIO_PORT, OSPI_DQS_PIN);
 800a910:	2120      	movs	r1, #32
 800a912:	4822      	ldr	r0, [pc, #136]	; (800a99c <OSPI_NOR_MspDeInit+0x9c>)
 800a914:	f003 f844 	bl	800d9a0 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_CS_GPIO_PORT, OSPI_CS_PIN);
 800a918:	2140      	movs	r1, #64	; 0x40
 800a91a:	4821      	ldr	r0, [pc, #132]	; (800a9a0 <OSPI_NOR_MspDeInit+0xa0>)
 800a91c:	f003 f840 	bl	800d9a0 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_D0_GPIO_PORT, OSPI_D0_PIN);
 800a920:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800a924:	481f      	ldr	r0, [pc, #124]	; (800a9a4 <OSPI_NOR_MspDeInit+0xa4>)
 800a926:	f003 f83b 	bl	800d9a0 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_D1_GPIO_PORT, OSPI_D1_PIN);
 800a92a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a92e:	481e      	ldr	r0, [pc, #120]	; (800a9a8 <OSPI_NOR_MspDeInit+0xa8>)
 800a930:	f003 f836 	bl	800d9a0 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_D2_GPIO_PORT, OSPI_D2_PIN);
 800a934:	2180      	movs	r1, #128	; 0x80
 800a936:	481c      	ldr	r0, [pc, #112]	; (800a9a8 <OSPI_NOR_MspDeInit+0xa8>)
 800a938:	f003 f832 	bl	800d9a0 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_D3_GPIO_PORT, OSPI_D3_PIN);
 800a93c:	2140      	movs	r1, #64	; 0x40
 800a93e:	481a      	ldr	r0, [pc, #104]	; (800a9a8 <OSPI_NOR_MspDeInit+0xa8>)
 800a940:	f003 f82e 	bl	800d9a0 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_D4_GPIO_PORT, OSPI_D4_PIN);
 800a944:	2102      	movs	r1, #2
 800a946:	4815      	ldr	r0, [pc, #84]	; (800a99c <OSPI_NOR_MspDeInit+0x9c>)
 800a948:	f003 f82a 	bl	800d9a0 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_D5_GPIO_PORT, OSPI_D5_PIN);
 800a94c:	2108      	movs	r1, #8
 800a94e:	4817      	ldr	r0, [pc, #92]	; (800a9ac <OSPI_NOR_MspDeInit+0xac>)
 800a950:	f003 f826 	bl	800d9a0 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_D6_GPIO_PORT, OSPI_D6_PIN);
 800a954:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a958:	4811      	ldr	r0, [pc, #68]	; (800a9a0 <OSPI_NOR_MspDeInit+0xa0>)
 800a95a:	f003 f821 	bl	800d9a0 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_D7_GPIO_PORT, OSPI_D7_PIN);
 800a95e:	2180      	movs	r1, #128	; 0x80
 800a960:	4810      	ldr	r0, [pc, #64]	; (800a9a4 <OSPI_NOR_MspDeInit+0xa4>)
 800a962:	f003 f81d 	bl	800d9a0 <HAL_GPIO_DeInit>

  /* Reset the OctoSPI memory interface */
  OSPI_FORCE_RESET();
 800a966:	4b12      	ldr	r3, [pc, #72]	; (800a9b0 <OSPI_NOR_MspDeInit+0xb0>)
 800a968:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a96a:	4a11      	ldr	r2, [pc, #68]	; (800a9b0 <OSPI_NOR_MspDeInit+0xb0>)
 800a96c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a970:	67d3      	str	r3, [r2, #124]	; 0x7c
  OSPI_RELEASE_RESET();
 800a972:	4b0f      	ldr	r3, [pc, #60]	; (800a9b0 <OSPI_NOR_MspDeInit+0xb0>)
 800a974:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a976:	4a0e      	ldr	r2, [pc, #56]	; (800a9b0 <OSPI_NOR_MspDeInit+0xb0>)
 800a978:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a97c:	67d3      	str	r3, [r2, #124]	; 0x7c

  /* Disable the OctoSPI memory interface clock */
  OSPI_CLK_DISABLE();
 800a97e:	4b0c      	ldr	r3, [pc, #48]	; (800a9b0 <OSPI_NOR_MspDeInit+0xb0>)
 800a980:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 800a984:	4a0a      	ldr	r2, [pc, #40]	; (800a9b0 <OSPI_NOR_MspDeInit+0xb0>)
 800a986:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a98a:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
}
 800a98e:	bf00      	nop
 800a990:	3708      	adds	r7, #8
 800a992:	46bd      	mov	sp, r7
 800a994:	bd80      	pop	{r7, pc}
 800a996:	bf00      	nop
 800a998:	58020400 	.word	0x58020400
 800a99c:	58020800 	.word	0x58020800
 800a9a0:	58021800 	.word	0x58021800
 800a9a4:	58020c00 	.word	0x58020c00
 800a9a8:	58021400 	.word	0x58021400
 800a9ac:	58021c00 	.word	0x58021c00
 800a9b0:	58024400 	.word	0x58024400

0800a9b4 <OSPI_NOR_ResetMemory>:
  * @brief  This function reset the OSPI memory.
  * @param  Instance  OSPI instance
  * @retval BSP status
  */
static int32_t OSPI_NOR_ResetMemory (uint32_t Instance)
{
 800a9b4:	b580      	push	{r7, lr}
 800a9b6:	b084      	sub	sp, #16
 800a9b8:	af00      	add	r7, sp, #0
 800a9ba:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 800a9bc:	2300      	movs	r3, #0
 800a9be:	60fb      	str	r3, [r7, #12]

  /* Enable write operations */
  if(MX25LM51245G_ResetEnable(&hospi_nor[Instance], BSP_OSPI_NOR_SPI_MODE, BSP_OSPI_NOR_STR_TRANSFER) != MX25LM51245G_OK)
 800a9c0:	687a      	ldr	r2, [r7, #4]
 800a9c2:	4613      	mov	r3, r2
 800a9c4:	005b      	lsls	r3, r3, #1
 800a9c6:	4413      	add	r3, r2
 800a9c8:	015b      	lsls	r3, r3, #5
 800a9ca:	4a43      	ldr	r2, [pc, #268]	; (800aad8 <OSPI_NOR_ResetMemory+0x124>)
 800a9cc:	4413      	add	r3, r2
 800a9ce:	2200      	movs	r2, #0
 800a9d0:	2100      	movs	r1, #0
 800a9d2:	4618      	mov	r0, r3
 800a9d4:	f7fe ff12 	bl	80097fc <MX25LM51245G_ResetEnable>
 800a9d8:	4603      	mov	r3, r0
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d003      	beq.n	800a9e6 <OSPI_NOR_ResetMemory+0x32>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800a9de:	f06f 0304 	mvn.w	r3, #4
 800a9e2:	60fb      	str	r3, [r7, #12]
 800a9e4:	e072      	b.n	800aacc <OSPI_NOR_ResetMemory+0x118>
  }
  else if(MX25LM51245G_ResetMemory(&hospi_nor[Instance], BSP_OSPI_NOR_SPI_MODE, BSP_OSPI_NOR_STR_TRANSFER) != MX25LM51245G_OK)
 800a9e6:	687a      	ldr	r2, [r7, #4]
 800a9e8:	4613      	mov	r3, r2
 800a9ea:	005b      	lsls	r3, r3, #1
 800a9ec:	4413      	add	r3, r2
 800a9ee:	015b      	lsls	r3, r3, #5
 800a9f0:	4a39      	ldr	r2, [pc, #228]	; (800aad8 <OSPI_NOR_ResetMemory+0x124>)
 800a9f2:	4413      	add	r3, r2
 800a9f4:	2200      	movs	r2, #0
 800a9f6:	2100      	movs	r1, #0
 800a9f8:	4618      	mov	r0, r3
 800a9fa:	f7fe ff57 	bl	80098ac <MX25LM51245G_ResetMemory>
 800a9fe:	4603      	mov	r3, r0
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	d003      	beq.n	800aa0c <OSPI_NOR_ResetMemory+0x58>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800aa04:	f06f 0304 	mvn.w	r3, #4
 800aa08:	60fb      	str	r3, [r7, #12]
 800aa0a:	e05f      	b.n	800aacc <OSPI_NOR_ResetMemory+0x118>
  }
  else if(MX25LM51245G_ResetEnable(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_STR_TRANSFER) != MX25LM51245G_OK)
 800aa0c:	687a      	ldr	r2, [r7, #4]
 800aa0e:	4613      	mov	r3, r2
 800aa10:	005b      	lsls	r3, r3, #1
 800aa12:	4413      	add	r3, r2
 800aa14:	015b      	lsls	r3, r3, #5
 800aa16:	4a30      	ldr	r2, [pc, #192]	; (800aad8 <OSPI_NOR_ResetMemory+0x124>)
 800aa18:	4413      	add	r3, r2
 800aa1a:	2200      	movs	r2, #0
 800aa1c:	2101      	movs	r1, #1
 800aa1e:	4618      	mov	r0, r3
 800aa20:	f7fe feec 	bl	80097fc <MX25LM51245G_ResetEnable>
 800aa24:	4603      	mov	r3, r0
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	d003      	beq.n	800aa32 <OSPI_NOR_ResetMemory+0x7e>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800aa2a:	f06f 0304 	mvn.w	r3, #4
 800aa2e:	60fb      	str	r3, [r7, #12]
 800aa30:	e04c      	b.n	800aacc <OSPI_NOR_ResetMemory+0x118>
  }
  else if(MX25LM51245G_ResetMemory(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_STR_TRANSFER) != MX25LM51245G_OK)
 800aa32:	687a      	ldr	r2, [r7, #4]
 800aa34:	4613      	mov	r3, r2
 800aa36:	005b      	lsls	r3, r3, #1
 800aa38:	4413      	add	r3, r2
 800aa3a:	015b      	lsls	r3, r3, #5
 800aa3c:	4a26      	ldr	r2, [pc, #152]	; (800aad8 <OSPI_NOR_ResetMemory+0x124>)
 800aa3e:	4413      	add	r3, r2
 800aa40:	2200      	movs	r2, #0
 800aa42:	2101      	movs	r1, #1
 800aa44:	4618      	mov	r0, r3
 800aa46:	f7fe ff31 	bl	80098ac <MX25LM51245G_ResetMemory>
 800aa4a:	4603      	mov	r3, r0
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d003      	beq.n	800aa58 <OSPI_NOR_ResetMemory+0xa4>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800aa50:	f06f 0304 	mvn.w	r3, #4
 800aa54:	60fb      	str	r3, [r7, #12]
 800aa56:	e039      	b.n	800aacc <OSPI_NOR_ResetMemory+0x118>
  }
  else if(MX25LM51245G_ResetEnable(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_DTR_TRANSFER) != MX25LM51245G_OK)
 800aa58:	687a      	ldr	r2, [r7, #4]
 800aa5a:	4613      	mov	r3, r2
 800aa5c:	005b      	lsls	r3, r3, #1
 800aa5e:	4413      	add	r3, r2
 800aa60:	015b      	lsls	r3, r3, #5
 800aa62:	4a1d      	ldr	r2, [pc, #116]	; (800aad8 <OSPI_NOR_ResetMemory+0x124>)
 800aa64:	4413      	add	r3, r2
 800aa66:	2201      	movs	r2, #1
 800aa68:	2101      	movs	r1, #1
 800aa6a:	4618      	mov	r0, r3
 800aa6c:	f7fe fec6 	bl	80097fc <MX25LM51245G_ResetEnable>
 800aa70:	4603      	mov	r3, r0
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	d003      	beq.n	800aa7e <OSPI_NOR_ResetMemory+0xca>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800aa76:	f06f 0304 	mvn.w	r3, #4
 800aa7a:	60fb      	str	r3, [r7, #12]
 800aa7c:	e026      	b.n	800aacc <OSPI_NOR_ResetMemory+0x118>
  }
  else if(MX25LM51245G_ResetMemory(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_DTR_TRANSFER) != MX25LM51245G_OK)
 800aa7e:	687a      	ldr	r2, [r7, #4]
 800aa80:	4613      	mov	r3, r2
 800aa82:	005b      	lsls	r3, r3, #1
 800aa84:	4413      	add	r3, r2
 800aa86:	015b      	lsls	r3, r3, #5
 800aa88:	4a13      	ldr	r2, [pc, #76]	; (800aad8 <OSPI_NOR_ResetMemory+0x124>)
 800aa8a:	4413      	add	r3, r2
 800aa8c:	2201      	movs	r2, #1
 800aa8e:	2101      	movs	r1, #1
 800aa90:	4618      	mov	r0, r3
 800aa92:	f7fe ff0b 	bl	80098ac <MX25LM51245G_ResetMemory>
 800aa96:	4603      	mov	r3, r0
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	d003      	beq.n	800aaa4 <OSPI_NOR_ResetMemory+0xf0>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800aa9c:	f06f 0304 	mvn.w	r3, #4
 800aaa0:	60fb      	str	r3, [r7, #12]
 800aaa2:	e013      	b.n	800aacc <OSPI_NOR_ResetMemory+0x118>
  }
  else
  {
    Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_INDIRECT;      /* After reset S/W setting to indirect access   */
 800aaa4:	4a0d      	ldr	r2, [pc, #52]	; (800aadc <OSPI_NOR_ResetMemory+0x128>)
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	2101      	movs	r1, #1
 800aaaa:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
    Ospi_Nor_Ctx[Instance].InterfaceMode = BSP_OSPI_NOR_SPI_MODE;         /* After reset H/W back to SPI mode by default  */
 800aaae:	4a0b      	ldr	r2, [pc, #44]	; (800aadc <OSPI_NOR_ResetMemory+0x128>)
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	00db      	lsls	r3, r3, #3
 800aab4:	4413      	add	r3, r2
 800aab6:	2200      	movs	r2, #0
 800aab8:	705a      	strb	r2, [r3, #1]
    Ospi_Nor_Ctx[Instance].TransferRate  = BSP_OSPI_NOR_STR_TRANSFER;     /* After reset S/W setting to STR mode          */
 800aaba:	4a08      	ldr	r2, [pc, #32]	; (800aadc <OSPI_NOR_ResetMemory+0x128>)
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	00db      	lsls	r3, r3, #3
 800aac0:	4413      	add	r3, r2
 800aac2:	2200      	movs	r2, #0
 800aac4:	709a      	strb	r2, [r3, #2]

    /* After SWreset CMD, wait in case SWReset occurred during erase operation */
    HAL_Delay(MX25LM51245G_RESET_MAX_TIME);
 800aac6:	2064      	movs	r0, #100	; 0x64
 800aac8:	f000 fd1a 	bl	800b500 <HAL_Delay>
  }

  /* Return BSP status */
  return ret;
 800aacc:	68fb      	ldr	r3, [r7, #12]
}
 800aace:	4618      	mov	r0, r3
 800aad0:	3710      	adds	r7, #16
 800aad2:	46bd      	mov	sp, r7
 800aad4:	bd80      	pop	{r7, pc}
 800aad6:	bf00      	nop
 800aad8:	2400ce94 	.word	0x2400ce94
 800aadc:	2400ce8c 	.word	0x2400ce8c

0800aae0 <OSPI_NOR_EnterDOPIMode>:
  * @brief  This function enables the octal DTR mode of the memory.
  * @param  Instance  OSPI instance
  * @retval BSP status
  */
static int32_t OSPI_NOR_EnterDOPIMode(uint32_t Instance)
{
 800aae0:	b580      	push	{r7, lr}
 800aae2:	b086      	sub	sp, #24
 800aae4:	af02      	add	r7, sp, #8
 800aae6:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 800aae8:	2300      	movs	r3, #0
 800aaea:	60fb      	str	r3, [r7, #12]
  uint8_t reg[2];

  /* Enable write operations */
  if (MX25LM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 800aaec:	687a      	ldr	r2, [r7, #4]
 800aaee:	4613      	mov	r3, r2
 800aaf0:	005b      	lsls	r3, r3, #1
 800aaf2:	4413      	add	r3, r2
 800aaf4:	015b      	lsls	r3, r3, #5
 800aaf6:	4a65      	ldr	r2, [pc, #404]	; (800ac8c <OSPI_NOR_EnterDOPIMode+0x1ac>)
 800aaf8:	1898      	adds	r0, r3, r2
 800aafa:	4a65      	ldr	r2, [pc, #404]	; (800ac90 <OSPI_NOR_EnterDOPIMode+0x1b0>)
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	00db      	lsls	r3, r3, #3
 800ab00:	4413      	add	r3, r2
 800ab02:	7859      	ldrb	r1, [r3, #1]
 800ab04:	4a62      	ldr	r2, [pc, #392]	; (800ac90 <OSPI_NOR_EnterDOPIMode+0x1b0>)
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	00db      	lsls	r3, r3, #3
 800ab0a:	4413      	add	r3, r2
 800ab0c:	789b      	ldrb	r3, [r3, #2]
 800ab0e:	461a      	mov	r2, r3
 800ab10:	f7fe fc7a 	bl	8009408 <MX25LM51245G_WriteEnable>
 800ab14:	4603      	mov	r3, r0
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d003      	beq.n	800ab22 <OSPI_NOR_EnterDOPIMode+0x42>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800ab1a:	f06f 0304 	mvn.w	r3, #4
 800ab1e:	60fb      	str	r3, [r7, #12]
 800ab20:	e0ae      	b.n	800ac80 <OSPI_NOR_EnterDOPIMode+0x1a0>
  }
  /* Write Configuration register 2 (with new dummy cycles) */
  else if (MX25LM51245G_WriteCfg2Register(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate, MX25LM51245G_CR2_REG3_ADDR, MX25LM51245G_CR2_DC_6_CYCLES) != MX25LM51245G_OK)
 800ab22:	687a      	ldr	r2, [r7, #4]
 800ab24:	4613      	mov	r3, r2
 800ab26:	005b      	lsls	r3, r3, #1
 800ab28:	4413      	add	r3, r2
 800ab2a:	015b      	lsls	r3, r3, #5
 800ab2c:	4a57      	ldr	r2, [pc, #348]	; (800ac8c <OSPI_NOR_EnterDOPIMode+0x1ac>)
 800ab2e:	1898      	adds	r0, r3, r2
 800ab30:	4a57      	ldr	r2, [pc, #348]	; (800ac90 <OSPI_NOR_EnterDOPIMode+0x1b0>)
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	00db      	lsls	r3, r3, #3
 800ab36:	4413      	add	r3, r2
 800ab38:	7859      	ldrb	r1, [r3, #1]
 800ab3a:	4a55      	ldr	r2, [pc, #340]	; (800ac90 <OSPI_NOR_EnterDOPIMode+0x1b0>)
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	00db      	lsls	r3, r3, #3
 800ab40:	4413      	add	r3, r2
 800ab42:	789a      	ldrb	r2, [r3, #2]
 800ab44:	2307      	movs	r3, #7
 800ab46:	9300      	str	r3, [sp, #0]
 800ab48:	f44f 7340 	mov.w	r3, #768	; 0x300
 800ab4c:	f7fe fd27 	bl	800959e <MX25LM51245G_WriteCfg2Register>
 800ab50:	4603      	mov	r3, r0
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d003      	beq.n	800ab5e <OSPI_NOR_EnterDOPIMode+0x7e>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800ab56:	f06f 0304 	mvn.w	r3, #4
 800ab5a:	60fb      	str	r3, [r7, #12]
 800ab5c:	e090      	b.n	800ac80 <OSPI_NOR_EnterDOPIMode+0x1a0>
  }
  /* Enable write operations */
  else if (MX25LM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 800ab5e:	687a      	ldr	r2, [r7, #4]
 800ab60:	4613      	mov	r3, r2
 800ab62:	005b      	lsls	r3, r3, #1
 800ab64:	4413      	add	r3, r2
 800ab66:	015b      	lsls	r3, r3, #5
 800ab68:	4a48      	ldr	r2, [pc, #288]	; (800ac8c <OSPI_NOR_EnterDOPIMode+0x1ac>)
 800ab6a:	1898      	adds	r0, r3, r2
 800ab6c:	4a48      	ldr	r2, [pc, #288]	; (800ac90 <OSPI_NOR_EnterDOPIMode+0x1b0>)
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	00db      	lsls	r3, r3, #3
 800ab72:	4413      	add	r3, r2
 800ab74:	7859      	ldrb	r1, [r3, #1]
 800ab76:	4a46      	ldr	r2, [pc, #280]	; (800ac90 <OSPI_NOR_EnterDOPIMode+0x1b0>)
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	00db      	lsls	r3, r3, #3
 800ab7c:	4413      	add	r3, r2
 800ab7e:	789b      	ldrb	r3, [r3, #2]
 800ab80:	461a      	mov	r2, r3
 800ab82:	f7fe fc41 	bl	8009408 <MX25LM51245G_WriteEnable>
 800ab86:	4603      	mov	r3, r0
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d003      	beq.n	800ab94 <OSPI_NOR_EnterDOPIMode+0xb4>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800ab8c:	f06f 0304 	mvn.w	r3, #4
 800ab90:	60fb      	str	r3, [r7, #12]
 800ab92:	e075      	b.n	800ac80 <OSPI_NOR_EnterDOPIMode+0x1a0>
  }
  /* Write Configuration register 2 (with Octal I/O SPI protocol) */
  else if (MX25LM51245G_WriteCfg2Register(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate, MX25LM51245G_CR2_REG1_ADDR, MX25LM51245G_CR2_DOPI) != MX25LM51245G_OK)
 800ab94:	687a      	ldr	r2, [r7, #4]
 800ab96:	4613      	mov	r3, r2
 800ab98:	005b      	lsls	r3, r3, #1
 800ab9a:	4413      	add	r3, r2
 800ab9c:	015b      	lsls	r3, r3, #5
 800ab9e:	4a3b      	ldr	r2, [pc, #236]	; (800ac8c <OSPI_NOR_EnterDOPIMode+0x1ac>)
 800aba0:	1898      	adds	r0, r3, r2
 800aba2:	4a3b      	ldr	r2, [pc, #236]	; (800ac90 <OSPI_NOR_EnterDOPIMode+0x1b0>)
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	00db      	lsls	r3, r3, #3
 800aba8:	4413      	add	r3, r2
 800abaa:	7859      	ldrb	r1, [r3, #1]
 800abac:	4a38      	ldr	r2, [pc, #224]	; (800ac90 <OSPI_NOR_EnterDOPIMode+0x1b0>)
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	00db      	lsls	r3, r3, #3
 800abb2:	4413      	add	r3, r2
 800abb4:	789a      	ldrb	r2, [r3, #2]
 800abb6:	2302      	movs	r3, #2
 800abb8:	9300      	str	r3, [sp, #0]
 800abba:	2300      	movs	r3, #0
 800abbc:	f7fe fcef 	bl	800959e <MX25LM51245G_WriteCfg2Register>
 800abc0:	4603      	mov	r3, r0
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	d003      	beq.n	800abce <OSPI_NOR_EnterDOPIMode+0xee>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800abc6:	f06f 0304 	mvn.w	r3, #4
 800abca:	60fb      	str	r3, [r7, #12]
 800abcc:	e058      	b.n	800ac80 <OSPI_NOR_EnterDOPIMode+0x1a0>
  }
  else
  {
    /* Wait that the configuration is effective and check that memory is ready */
    HAL_Delay(MX25LM51245G_WRITE_REG_MAX_TIME);
 800abce:	2028      	movs	r0, #40	; 0x28
 800abd0:	f000 fc96 	bl	800b500 <HAL_Delay>

    /* Reconfigure the memory type of the peripheral */
    hospi_nor[Instance].Init.MemoryType            = HAL_OSPI_MEMTYPE_MACRONIX;
 800abd4:	492d      	ldr	r1, [pc, #180]	; (800ac8c <OSPI_NOR_EnterDOPIMode+0x1ac>)
 800abd6:	687a      	ldr	r2, [r7, #4]
 800abd8:	4613      	mov	r3, r2
 800abda:	005b      	lsls	r3, r3, #1
 800abdc:	4413      	add	r3, r2
 800abde:	015b      	lsls	r3, r3, #5
 800abe0:	440b      	add	r3, r1
 800abe2:	330c      	adds	r3, #12
 800abe4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800abe8:	601a      	str	r2, [r3, #0]
    hospi_nor[Instance].Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_ENABLE;
 800abea:	4928      	ldr	r1, [pc, #160]	; (800ac8c <OSPI_NOR_EnterDOPIMode+0x1ac>)
 800abec:	687a      	ldr	r2, [r7, #4]
 800abee:	4613      	mov	r3, r2
 800abf0:	005b      	lsls	r3, r3, #1
 800abf2:	4413      	add	r3, r2
 800abf4:	015b      	lsls	r3, r3, #5
 800abf6:	440b      	add	r3, r1
 800abf8:	332c      	adds	r3, #44	; 0x2c
 800abfa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800abfe:	601a      	str	r2, [r3, #0]
    if (HAL_OSPI_Init(&hospi_nor[Instance]) != HAL_OK)
 800ac00:	687a      	ldr	r2, [r7, #4]
 800ac02:	4613      	mov	r3, r2
 800ac04:	005b      	lsls	r3, r3, #1
 800ac06:	4413      	add	r3, r2
 800ac08:	015b      	lsls	r3, r3, #5
 800ac0a:	4a20      	ldr	r2, [pc, #128]	; (800ac8c <OSPI_NOR_EnterDOPIMode+0x1ac>)
 800ac0c:	4413      	add	r3, r2
 800ac0e:	4618      	mov	r0, r3
 800ac10:	f004 f9fe 	bl	800f010 <HAL_OSPI_Init>
 800ac14:	4603      	mov	r3, r0
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	d003      	beq.n	800ac22 <OSPI_NOR_EnterDOPIMode+0x142>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 800ac1a:	f06f 0303 	mvn.w	r3, #3
 800ac1e:	60fb      	str	r3, [r7, #12]
 800ac20:	e02e      	b.n	800ac80 <OSPI_NOR_EnterDOPIMode+0x1a0>
    }
    /* Check Flash busy ? */
    else if (MX25LM51245G_AutoPollingMemReady(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_DTR_TRANSFER) != MX25LM51245G_OK)
 800ac22:	687a      	ldr	r2, [r7, #4]
 800ac24:	4613      	mov	r3, r2
 800ac26:	005b      	lsls	r3, r3, #1
 800ac28:	4413      	add	r3, r2
 800ac2a:	015b      	lsls	r3, r3, #5
 800ac2c:	4a17      	ldr	r2, [pc, #92]	; (800ac8c <OSPI_NOR_EnterDOPIMode+0x1ac>)
 800ac2e:	4413      	add	r3, r2
 800ac30:	2201      	movs	r2, #1
 800ac32:	2101      	movs	r1, #1
 800ac34:	4618      	mov	r0, r3
 800ac36:	f7fe fa21 	bl	800907c <MX25LM51245G_AutoPollingMemReady>
 800ac3a:	4603      	mov	r3, r0
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d003      	beq.n	800ac48 <OSPI_NOR_EnterDOPIMode+0x168>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800ac40:	f06f 0304 	mvn.w	r3, #4
 800ac44:	60fb      	str	r3, [r7, #12]
 800ac46:	e01b      	b.n	800ac80 <OSPI_NOR_EnterDOPIMode+0x1a0>
    }
    /* Check the configuration has been correctly done */
    else if (MX25LM51245G_ReadCfg2Register(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_DTR_TRANSFER, MX25LM51245G_CR2_REG1_ADDR, reg) != MX25LM51245G_OK)
 800ac48:	687a      	ldr	r2, [r7, #4]
 800ac4a:	4613      	mov	r3, r2
 800ac4c:	005b      	lsls	r3, r3, #1
 800ac4e:	4413      	add	r3, r2
 800ac50:	015b      	lsls	r3, r3, #5
 800ac52:	4a0e      	ldr	r2, [pc, #56]	; (800ac8c <OSPI_NOR_EnterDOPIMode+0x1ac>)
 800ac54:	1898      	adds	r0, r3, r2
 800ac56:	f107 0308 	add.w	r3, r7, #8
 800ac5a:	9300      	str	r3, [sp, #0]
 800ac5c:	2300      	movs	r3, #0
 800ac5e:	2201      	movs	r2, #1
 800ac60:	2101      	movs	r1, #1
 800ac62:	f7fe fd31 	bl	80096c8 <MX25LM51245G_ReadCfg2Register>
 800ac66:	4603      	mov	r3, r0
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	d003      	beq.n	800ac74 <OSPI_NOR_EnterDOPIMode+0x194>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800ac6c:	f06f 0304 	mvn.w	r3, #4
 800ac70:	60fb      	str	r3, [r7, #12]
 800ac72:	e005      	b.n	800ac80 <OSPI_NOR_EnterDOPIMode+0x1a0>
    }
    else
    {
      if (reg[0] != MX25LM51245G_CR2_DOPI)
 800ac74:	7a3b      	ldrb	r3, [r7, #8]
 800ac76:	2b02      	cmp	r3, #2
 800ac78:	d002      	beq.n	800ac80 <OSPI_NOR_EnterDOPIMode+0x1a0>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800ac7a:	f06f 0304 	mvn.w	r3, #4
 800ac7e:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  /* Return BSP status */
  return ret;
 800ac80:	68fb      	ldr	r3, [r7, #12]
}
 800ac82:	4618      	mov	r0, r3
 800ac84:	3710      	adds	r7, #16
 800ac86:	46bd      	mov	sp, r7
 800ac88:	bd80      	pop	{r7, pc}
 800ac8a:	bf00      	nop
 800ac8c:	2400ce94 	.word	0x2400ce94
 800ac90:	2400ce8c 	.word	0x2400ce8c

0800ac94 <OSPI_NOR_EnterSOPIMode>:
  * @brief  This function enables the octal STR mode of the memory.
  * @param  Instance  OSPI instance
  * @retval BSP status
  */
static int32_t OSPI_NOR_EnterSOPIMode(uint32_t Instance)
{
 800ac94:	b580      	push	{r7, lr}
 800ac96:	b086      	sub	sp, #24
 800ac98:	af02      	add	r7, sp, #8
 800ac9a:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 800ac9c:	2300      	movs	r3, #0
 800ac9e:	60fb      	str	r3, [r7, #12]
  uint8_t reg[2];

  /* Enable write operations */
  if (MX25LM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 800aca0:	687a      	ldr	r2, [r7, #4]
 800aca2:	4613      	mov	r3, r2
 800aca4:	005b      	lsls	r3, r3, #1
 800aca6:	4413      	add	r3, r2
 800aca8:	015b      	lsls	r3, r3, #5
 800acaa:	4a51      	ldr	r2, [pc, #324]	; (800adf0 <OSPI_NOR_EnterSOPIMode+0x15c>)
 800acac:	1898      	adds	r0, r3, r2
 800acae:	4a51      	ldr	r2, [pc, #324]	; (800adf4 <OSPI_NOR_EnterSOPIMode+0x160>)
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	00db      	lsls	r3, r3, #3
 800acb4:	4413      	add	r3, r2
 800acb6:	7859      	ldrb	r1, [r3, #1]
 800acb8:	4a4e      	ldr	r2, [pc, #312]	; (800adf4 <OSPI_NOR_EnterSOPIMode+0x160>)
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	00db      	lsls	r3, r3, #3
 800acbe:	4413      	add	r3, r2
 800acc0:	789b      	ldrb	r3, [r3, #2]
 800acc2:	461a      	mov	r2, r3
 800acc4:	f7fe fba0 	bl	8009408 <MX25LM51245G_WriteEnable>
 800acc8:	4603      	mov	r3, r0
 800acca:	2b00      	cmp	r3, #0
 800accc:	d003      	beq.n	800acd6 <OSPI_NOR_EnterSOPIMode+0x42>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800acce:	f06f 0304 	mvn.w	r3, #4
 800acd2:	60fb      	str	r3, [r7, #12]
 800acd4:	e087      	b.n	800ade6 <OSPI_NOR_EnterSOPIMode+0x152>
  }
  /* Write Configuration register 2 (with new dummy cycles) */
  else if (MX25LM51245G_WriteCfg2Register(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate, MX25LM51245G_CR2_REG3_ADDR, MX25LM51245G_CR2_DC_6_CYCLES) != MX25LM51245G_OK)
 800acd6:	687a      	ldr	r2, [r7, #4]
 800acd8:	4613      	mov	r3, r2
 800acda:	005b      	lsls	r3, r3, #1
 800acdc:	4413      	add	r3, r2
 800acde:	015b      	lsls	r3, r3, #5
 800ace0:	4a43      	ldr	r2, [pc, #268]	; (800adf0 <OSPI_NOR_EnterSOPIMode+0x15c>)
 800ace2:	1898      	adds	r0, r3, r2
 800ace4:	4a43      	ldr	r2, [pc, #268]	; (800adf4 <OSPI_NOR_EnterSOPIMode+0x160>)
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	00db      	lsls	r3, r3, #3
 800acea:	4413      	add	r3, r2
 800acec:	7859      	ldrb	r1, [r3, #1]
 800acee:	4a41      	ldr	r2, [pc, #260]	; (800adf4 <OSPI_NOR_EnterSOPIMode+0x160>)
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	00db      	lsls	r3, r3, #3
 800acf4:	4413      	add	r3, r2
 800acf6:	789a      	ldrb	r2, [r3, #2]
 800acf8:	2307      	movs	r3, #7
 800acfa:	9300      	str	r3, [sp, #0]
 800acfc:	f44f 7340 	mov.w	r3, #768	; 0x300
 800ad00:	f7fe fc4d 	bl	800959e <MX25LM51245G_WriteCfg2Register>
 800ad04:	4603      	mov	r3, r0
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	d003      	beq.n	800ad12 <OSPI_NOR_EnterSOPIMode+0x7e>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800ad0a:	f06f 0304 	mvn.w	r3, #4
 800ad0e:	60fb      	str	r3, [r7, #12]
 800ad10:	e069      	b.n	800ade6 <OSPI_NOR_EnterSOPIMode+0x152>
  }
  /* Enable write operations */
  else if (MX25LM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 800ad12:	687a      	ldr	r2, [r7, #4]
 800ad14:	4613      	mov	r3, r2
 800ad16:	005b      	lsls	r3, r3, #1
 800ad18:	4413      	add	r3, r2
 800ad1a:	015b      	lsls	r3, r3, #5
 800ad1c:	4a34      	ldr	r2, [pc, #208]	; (800adf0 <OSPI_NOR_EnterSOPIMode+0x15c>)
 800ad1e:	1898      	adds	r0, r3, r2
 800ad20:	4a34      	ldr	r2, [pc, #208]	; (800adf4 <OSPI_NOR_EnterSOPIMode+0x160>)
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	00db      	lsls	r3, r3, #3
 800ad26:	4413      	add	r3, r2
 800ad28:	7859      	ldrb	r1, [r3, #1]
 800ad2a:	4a32      	ldr	r2, [pc, #200]	; (800adf4 <OSPI_NOR_EnterSOPIMode+0x160>)
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	00db      	lsls	r3, r3, #3
 800ad30:	4413      	add	r3, r2
 800ad32:	789b      	ldrb	r3, [r3, #2]
 800ad34:	461a      	mov	r2, r3
 800ad36:	f7fe fb67 	bl	8009408 <MX25LM51245G_WriteEnable>
 800ad3a:	4603      	mov	r3, r0
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d003      	beq.n	800ad48 <OSPI_NOR_EnterSOPIMode+0xb4>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800ad40:	f06f 0304 	mvn.w	r3, #4
 800ad44:	60fb      	str	r3, [r7, #12]
 800ad46:	e04e      	b.n	800ade6 <OSPI_NOR_EnterSOPIMode+0x152>
  }
  /* Write Configuration register 2 (with Octal I/O SPI protocol) */
  else if (MX25LM51245G_WriteCfg2Register(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate, MX25LM51245G_CR2_REG1_ADDR, MX25LM51245G_CR2_SOPI) != MX25LM51245G_OK)
 800ad48:	687a      	ldr	r2, [r7, #4]
 800ad4a:	4613      	mov	r3, r2
 800ad4c:	005b      	lsls	r3, r3, #1
 800ad4e:	4413      	add	r3, r2
 800ad50:	015b      	lsls	r3, r3, #5
 800ad52:	4a27      	ldr	r2, [pc, #156]	; (800adf0 <OSPI_NOR_EnterSOPIMode+0x15c>)
 800ad54:	1898      	adds	r0, r3, r2
 800ad56:	4a27      	ldr	r2, [pc, #156]	; (800adf4 <OSPI_NOR_EnterSOPIMode+0x160>)
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	00db      	lsls	r3, r3, #3
 800ad5c:	4413      	add	r3, r2
 800ad5e:	7859      	ldrb	r1, [r3, #1]
 800ad60:	4a24      	ldr	r2, [pc, #144]	; (800adf4 <OSPI_NOR_EnterSOPIMode+0x160>)
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	00db      	lsls	r3, r3, #3
 800ad66:	4413      	add	r3, r2
 800ad68:	789a      	ldrb	r2, [r3, #2]
 800ad6a:	2301      	movs	r3, #1
 800ad6c:	9300      	str	r3, [sp, #0]
 800ad6e:	2300      	movs	r3, #0
 800ad70:	f7fe fc15 	bl	800959e <MX25LM51245G_WriteCfg2Register>
 800ad74:	4603      	mov	r3, r0
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	d003      	beq.n	800ad82 <OSPI_NOR_EnterSOPIMode+0xee>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800ad7a:	f06f 0304 	mvn.w	r3, #4
 800ad7e:	60fb      	str	r3, [r7, #12]
 800ad80:	e031      	b.n	800ade6 <OSPI_NOR_EnterSOPIMode+0x152>
  }
  else
  {
    /* Wait that the configuration is effective and check that memory is ready */
    HAL_Delay(MX25LM51245G_WRITE_REG_MAX_TIME);
 800ad82:	2028      	movs	r0, #40	; 0x28
 800ad84:	f000 fbbc 	bl	800b500 <HAL_Delay>

    /* Check Flash busy ? */
    if (MX25LM51245G_AutoPollingMemReady(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_STR_TRANSFER) != MX25LM51245G_OK)
 800ad88:	687a      	ldr	r2, [r7, #4]
 800ad8a:	4613      	mov	r3, r2
 800ad8c:	005b      	lsls	r3, r3, #1
 800ad8e:	4413      	add	r3, r2
 800ad90:	015b      	lsls	r3, r3, #5
 800ad92:	4a17      	ldr	r2, [pc, #92]	; (800adf0 <OSPI_NOR_EnterSOPIMode+0x15c>)
 800ad94:	4413      	add	r3, r2
 800ad96:	2200      	movs	r2, #0
 800ad98:	2101      	movs	r1, #1
 800ad9a:	4618      	mov	r0, r3
 800ad9c:	f7fe f96e 	bl	800907c <MX25LM51245G_AutoPollingMemReady>
 800ada0:	4603      	mov	r3, r0
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	d003      	beq.n	800adae <OSPI_NOR_EnterSOPIMode+0x11a>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800ada6:	f06f 0304 	mvn.w	r3, #4
 800adaa:	60fb      	str	r3, [r7, #12]
 800adac:	e01b      	b.n	800ade6 <OSPI_NOR_EnterSOPIMode+0x152>
    }
    /* Check the configuration has been correctly done */
    else if (MX25LM51245G_ReadCfg2Register(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_STR_TRANSFER, MX25LM51245G_CR2_REG1_ADDR, reg) != MX25LM51245G_OK)
 800adae:	687a      	ldr	r2, [r7, #4]
 800adb0:	4613      	mov	r3, r2
 800adb2:	005b      	lsls	r3, r3, #1
 800adb4:	4413      	add	r3, r2
 800adb6:	015b      	lsls	r3, r3, #5
 800adb8:	4a0d      	ldr	r2, [pc, #52]	; (800adf0 <OSPI_NOR_EnterSOPIMode+0x15c>)
 800adba:	1898      	adds	r0, r3, r2
 800adbc:	f107 0308 	add.w	r3, r7, #8
 800adc0:	9300      	str	r3, [sp, #0]
 800adc2:	2300      	movs	r3, #0
 800adc4:	2200      	movs	r2, #0
 800adc6:	2101      	movs	r1, #1
 800adc8:	f7fe fc7e 	bl	80096c8 <MX25LM51245G_ReadCfg2Register>
 800adcc:	4603      	mov	r3, r0
 800adce:	2b00      	cmp	r3, #0
 800add0:	d003      	beq.n	800adda <OSPI_NOR_EnterSOPIMode+0x146>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800add2:	f06f 0304 	mvn.w	r3, #4
 800add6:	60fb      	str	r3, [r7, #12]
 800add8:	e005      	b.n	800ade6 <OSPI_NOR_EnterSOPIMode+0x152>
    }
    else
    {
      if (reg[0] != MX25LM51245G_CR2_SOPI)
 800adda:	7a3b      	ldrb	r3, [r7, #8]
 800addc:	2b01      	cmp	r3, #1
 800adde:	d002      	beq.n	800ade6 <OSPI_NOR_EnterSOPIMode+0x152>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800ade0:	f06f 0304 	mvn.w	r3, #4
 800ade4:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  /* Return BSP status */
  return ret;
 800ade6:	68fb      	ldr	r3, [r7, #12]
}
 800ade8:	4618      	mov	r0, r3
 800adea:	3710      	adds	r7, #16
 800adec:	46bd      	mov	sp, r7
 800adee:	bd80      	pop	{r7, pc}
 800adf0:	2400ce94 	.word	0x2400ce94
 800adf4:	2400ce8c 	.word	0x2400ce8c

0800adf8 <OSPI_NOR_ExitOPIMode>:
  * @brief  This function disables the octal DTR or STR mode of the memory.
  * @param  Instance  OSPI instance
  * @retval BSP status
  */
static int32_t OSPI_NOR_ExitOPIMode (uint32_t Instance)
{
 800adf8:	b580      	push	{r7, lr}
 800adfa:	b086      	sub	sp, #24
 800adfc:	af02      	add	r7, sp, #8
 800adfe:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 800ae00:	2300      	movs	r3, #0
 800ae02:	60fb      	str	r3, [r7, #12]
  uint8_t reg[2];

  /* Enable write operations */
  if (MX25LM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 800ae04:	687a      	ldr	r2, [r7, #4]
 800ae06:	4613      	mov	r3, r2
 800ae08:	005b      	lsls	r3, r3, #1
 800ae0a:	4413      	add	r3, r2
 800ae0c:	015b      	lsls	r3, r3, #5
 800ae0e:	4a4c      	ldr	r2, [pc, #304]	; (800af40 <OSPI_NOR_ExitOPIMode+0x148>)
 800ae10:	1898      	adds	r0, r3, r2
 800ae12:	4a4c      	ldr	r2, [pc, #304]	; (800af44 <OSPI_NOR_ExitOPIMode+0x14c>)
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	00db      	lsls	r3, r3, #3
 800ae18:	4413      	add	r3, r2
 800ae1a:	7859      	ldrb	r1, [r3, #1]
 800ae1c:	4a49      	ldr	r2, [pc, #292]	; (800af44 <OSPI_NOR_ExitOPIMode+0x14c>)
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	00db      	lsls	r3, r3, #3
 800ae22:	4413      	add	r3, r2
 800ae24:	789b      	ldrb	r3, [r3, #2]
 800ae26:	461a      	mov	r2, r3
 800ae28:	f7fe faee 	bl	8009408 <MX25LM51245G_WriteEnable>
 800ae2c:	4603      	mov	r3, r0
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	d003      	beq.n	800ae3a <OSPI_NOR_ExitOPIMode+0x42>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800ae32:	f06f 0304 	mvn.w	r3, #4
 800ae36:	60fb      	str	r3, [r7, #12]
 800ae38:	e07d      	b.n	800af36 <OSPI_NOR_ExitOPIMode+0x13e>
  }
  else
  {
    /* Write Configuration register 2 (with SPI protocol) */
    reg[0] = 0;
 800ae3a:	2300      	movs	r3, #0
 800ae3c:	723b      	strb	r3, [r7, #8]
    reg[1] = 0;
 800ae3e:	2300      	movs	r3, #0
 800ae40:	727b      	strb	r3, [r7, #9]
    if (MX25LM51245G_WriteCfg2Register(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate, MX25LM51245G_CR2_REG1_ADDR, reg[0]) != MX25LM51245G_OK)
 800ae42:	687a      	ldr	r2, [r7, #4]
 800ae44:	4613      	mov	r3, r2
 800ae46:	005b      	lsls	r3, r3, #1
 800ae48:	4413      	add	r3, r2
 800ae4a:	015b      	lsls	r3, r3, #5
 800ae4c:	4a3c      	ldr	r2, [pc, #240]	; (800af40 <OSPI_NOR_ExitOPIMode+0x148>)
 800ae4e:	1898      	adds	r0, r3, r2
 800ae50:	4a3c      	ldr	r2, [pc, #240]	; (800af44 <OSPI_NOR_ExitOPIMode+0x14c>)
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	00db      	lsls	r3, r3, #3
 800ae56:	4413      	add	r3, r2
 800ae58:	7859      	ldrb	r1, [r3, #1]
 800ae5a:	4a3a      	ldr	r2, [pc, #232]	; (800af44 <OSPI_NOR_ExitOPIMode+0x14c>)
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	00db      	lsls	r3, r3, #3
 800ae60:	4413      	add	r3, r2
 800ae62:	789a      	ldrb	r2, [r3, #2]
 800ae64:	7a3b      	ldrb	r3, [r7, #8]
 800ae66:	9300      	str	r3, [sp, #0]
 800ae68:	2300      	movs	r3, #0
 800ae6a:	f7fe fb98 	bl	800959e <MX25LM51245G_WriteCfg2Register>
 800ae6e:	4603      	mov	r3, r0
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	d003      	beq.n	800ae7c <OSPI_NOR_ExitOPIMode+0x84>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800ae74:	f06f 0304 	mvn.w	r3, #4
 800ae78:	60fb      	str	r3, [r7, #12]
 800ae7a:	e05c      	b.n	800af36 <OSPI_NOR_ExitOPIMode+0x13e>
    }
    else
    {
      /* Wait that the configuration is effective and check that memory is ready */
      HAL_Delay(MX25LM51245G_WRITE_REG_MAX_TIME);
 800ae7c:	2028      	movs	r0, #40	; 0x28
 800ae7e:	f000 fb3f 	bl	800b500 <HAL_Delay>

      if (Ospi_Nor_Ctx[Instance].TransferRate == BSP_OSPI_NOR_DTR_TRANSFER)
 800ae82:	4a30      	ldr	r2, [pc, #192]	; (800af44 <OSPI_NOR_ExitOPIMode+0x14c>)
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	00db      	lsls	r3, r3, #3
 800ae88:	4413      	add	r3, r2
 800ae8a:	789b      	ldrb	r3, [r3, #2]
 800ae8c:	2b01      	cmp	r3, #1
 800ae8e:	d123      	bne.n	800aed8 <OSPI_NOR_ExitOPIMode+0xe0>
      {
        /* Reconfigure the memory type of the peripheral */
        hospi_nor[Instance].Init.MemoryType            = HAL_OSPI_MEMTYPE_MICRON;
 800ae90:	492b      	ldr	r1, [pc, #172]	; (800af40 <OSPI_NOR_ExitOPIMode+0x148>)
 800ae92:	687a      	ldr	r2, [r7, #4]
 800ae94:	4613      	mov	r3, r2
 800ae96:	005b      	lsls	r3, r3, #1
 800ae98:	4413      	add	r3, r2
 800ae9a:	015b      	lsls	r3, r3, #5
 800ae9c:	440b      	add	r3, r1
 800ae9e:	330c      	adds	r3, #12
 800aea0:	2200      	movs	r2, #0
 800aea2:	601a      	str	r2, [r3, #0]
        hospi_nor[Instance].Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 800aea4:	4926      	ldr	r1, [pc, #152]	; (800af40 <OSPI_NOR_ExitOPIMode+0x148>)
 800aea6:	687a      	ldr	r2, [r7, #4]
 800aea8:	4613      	mov	r3, r2
 800aeaa:	005b      	lsls	r3, r3, #1
 800aeac:	4413      	add	r3, r2
 800aeae:	015b      	lsls	r3, r3, #5
 800aeb0:	440b      	add	r3, r1
 800aeb2:	332c      	adds	r3, #44	; 0x2c
 800aeb4:	2200      	movs	r2, #0
 800aeb6:	601a      	str	r2, [r3, #0]
        if (HAL_OSPI_Init(&hospi_nor[Instance]) != HAL_OK)
 800aeb8:	687a      	ldr	r2, [r7, #4]
 800aeba:	4613      	mov	r3, r2
 800aebc:	005b      	lsls	r3, r3, #1
 800aebe:	4413      	add	r3, r2
 800aec0:	015b      	lsls	r3, r3, #5
 800aec2:	4a1f      	ldr	r2, [pc, #124]	; (800af40 <OSPI_NOR_ExitOPIMode+0x148>)
 800aec4:	4413      	add	r3, r2
 800aec6:	4618      	mov	r0, r3
 800aec8:	f004 f8a2 	bl	800f010 <HAL_OSPI_Init>
 800aecc:	4603      	mov	r3, r0
 800aece:	2b00      	cmp	r3, #0
 800aed0:	d002      	beq.n	800aed8 <OSPI_NOR_ExitOPIMode+0xe0>
        {
          ret = BSP_ERROR_PERIPH_FAILURE;
 800aed2:	f06f 0303 	mvn.w	r3, #3
 800aed6:	60fb      	str	r3, [r7, #12]
        }
      }

      /* Check Flash busy ? */
      if (MX25LM51245G_AutoPollingMemReady(&hospi_nor[Instance], BSP_OSPI_NOR_SPI_MODE, BSP_OSPI_NOR_STR_TRANSFER) != MX25LM51245G_OK)
 800aed8:	687a      	ldr	r2, [r7, #4]
 800aeda:	4613      	mov	r3, r2
 800aedc:	005b      	lsls	r3, r3, #1
 800aede:	4413      	add	r3, r2
 800aee0:	015b      	lsls	r3, r3, #5
 800aee2:	4a17      	ldr	r2, [pc, #92]	; (800af40 <OSPI_NOR_ExitOPIMode+0x148>)
 800aee4:	4413      	add	r3, r2
 800aee6:	2200      	movs	r2, #0
 800aee8:	2100      	movs	r1, #0
 800aeea:	4618      	mov	r0, r3
 800aeec:	f7fe f8c6 	bl	800907c <MX25LM51245G_AutoPollingMemReady>
 800aef0:	4603      	mov	r3, r0
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d003      	beq.n	800aefe <OSPI_NOR_ExitOPIMode+0x106>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800aef6:	f06f 0304 	mvn.w	r3, #4
 800aefa:	60fb      	str	r3, [r7, #12]
 800aefc:	e01b      	b.n	800af36 <OSPI_NOR_ExitOPIMode+0x13e>
      }
      /* Check the configuration has been correctly done */
      else if (MX25LM51245G_ReadCfg2Register(&hospi_nor[Instance], BSP_OSPI_NOR_SPI_MODE, BSP_OSPI_NOR_STR_TRANSFER, MX25LM51245G_CR2_REG1_ADDR, reg) != MX25LM51245G_OK)
 800aefe:	687a      	ldr	r2, [r7, #4]
 800af00:	4613      	mov	r3, r2
 800af02:	005b      	lsls	r3, r3, #1
 800af04:	4413      	add	r3, r2
 800af06:	015b      	lsls	r3, r3, #5
 800af08:	4a0d      	ldr	r2, [pc, #52]	; (800af40 <OSPI_NOR_ExitOPIMode+0x148>)
 800af0a:	1898      	adds	r0, r3, r2
 800af0c:	f107 0308 	add.w	r3, r7, #8
 800af10:	9300      	str	r3, [sp, #0]
 800af12:	2300      	movs	r3, #0
 800af14:	2200      	movs	r2, #0
 800af16:	2100      	movs	r1, #0
 800af18:	f7fe fbd6 	bl	80096c8 <MX25LM51245G_ReadCfg2Register>
 800af1c:	4603      	mov	r3, r0
 800af1e:	2b00      	cmp	r3, #0
 800af20:	d003      	beq.n	800af2a <OSPI_NOR_ExitOPIMode+0x132>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800af22:	f06f 0304 	mvn.w	r3, #4
 800af26:	60fb      	str	r3, [r7, #12]
 800af28:	e005      	b.n	800af36 <OSPI_NOR_ExitOPIMode+0x13e>
      }
      else
      {
        if (reg[0] != 0U)
 800af2a:	7a3b      	ldrb	r3, [r7, #8]
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d002      	beq.n	800af36 <OSPI_NOR_ExitOPIMode+0x13e>
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
 800af30:	f06f 0304 	mvn.w	r3, #4
 800af34:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  /* Return BSP status */
  return ret;
 800af36:	68fb      	ldr	r3, [r7, #12]
}
 800af38:	4618      	mov	r0, r3
 800af3a:	3710      	adds	r7, #16
 800af3c:	46bd      	mov	sp, r7
 800af3e:	bd80      	pop	{r7, pc}
 800af40:	2400ce94 	.word	0x2400ce94
 800af44:	2400ce8c 	.word	0x2400ce8c

0800af48 <BSP_TS_Init>:
  * @param  Instance TS instance. Could be only 0.
  * @param  TS_Init  TS Init structure
  * @retval BSP status
  */
int32_t BSP_TS_Init(uint32_t Instance, TS_Init_t *TS_Init)
{
 800af48:	b580      	push	{r7, lr}
 800af4a:	b088      	sub	sp, #32
 800af4c:	af00      	add	r7, sp, #0
 800af4e:	6078      	str	r0, [r7, #4]
 800af50:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800af52:	2300      	movs	r3, #0
 800af54:	61fb      	str	r3, [r7, #28]

  if((Instance >= TS_INSTANCES_NBR) || (TS_Init->Width == 0U) ||( TS_Init->Width > TS_MAX_WIDTH) ||\
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	2b00      	cmp	r3, #0
 800af5a:	d11c      	bne.n	800af96 <BSP_TS_Init+0x4e>
 800af5c:	683b      	ldr	r3, [r7, #0]
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	2b00      	cmp	r3, #0
 800af62:	d018      	beq.n	800af96 <BSP_TS_Init+0x4e>
 800af64:	683b      	ldr	r3, [r7, #0]
 800af66:	681b      	ldr	r3, [r3, #0]
 800af68:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 800af6c:	d813      	bhi.n	800af96 <BSP_TS_Init+0x4e>
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 800af6e:	683b      	ldr	r3, [r7, #0]
 800af70:	685b      	ldr	r3, [r3, #4]
  if((Instance >= TS_INSTANCES_NBR) || (TS_Init->Width == 0U) ||( TS_Init->Width > TS_MAX_WIDTH) ||\
 800af72:	2b00      	cmp	r3, #0
 800af74:	d00f      	beq.n	800af96 <BSP_TS_Init+0x4e>
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 800af76:	683b      	ldr	r3, [r7, #0]
 800af78:	685b      	ldr	r3, [r3, #4]
 800af7a:	f5b3 7f88 	cmp.w	r3, #272	; 0x110
 800af7e:	d80a      	bhi.n	800af96 <BSP_TS_Init+0x4e>
                         (TS_Init->Accuracy > TS_MIN((TS_Init->Width), (TS_Init->Height))))
 800af80:	683b      	ldr	r3, [r7, #0]
 800af82:	68da      	ldr	r2, [r3, #12]
 800af84:	683b      	ldr	r3, [r7, #0]
 800af86:	6819      	ldr	r1, [r3, #0]
 800af88:	683b      	ldr	r3, [r7, #0]
 800af8a:	685b      	ldr	r3, [r3, #4]
 800af8c:	428b      	cmp	r3, r1
 800af8e:	bf28      	it	cs
 800af90:	460b      	movcs	r3, r1
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 800af92:	429a      	cmp	r2, r3
 800af94:	d903      	bls.n	800af9e <BSP_TS_Init+0x56>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800af96:	f06f 0301 	mvn.w	r3, #1
 800af9a:	61fb      	str	r3, [r7, #28]
 800af9c:	e06e      	b.n	800b07c <BSP_TS_Init+0x134>
  }
  else
  {
    if(FT5336_Probe(Instance) != BSP_ERROR_NONE)
 800af9e:	6878      	ldr	r0, [r7, #4]
 800afa0:	f000 f98c 	bl	800b2bc <FT5336_Probe>
 800afa4:	4603      	mov	r3, r0
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	d003      	beq.n	800afb2 <BSP_TS_Init+0x6a>
    {
      ret = BSP_ERROR_NO_INIT;
 800afaa:	f04f 33ff 	mov.w	r3, #4294967295
 800afae:	61fb      	str	r3, [r7, #28]
 800afb0:	e064      	b.n	800b07c <BSP_TS_Init+0x134>
    else
    {
      TS_Capabilities_t Capabilities;
      uint32_t i;
      /* Store parameters on TS context */
      Ts_Ctx[Instance].Width       = TS_Init->Width;
 800afb2:	683b      	ldr	r3, [r7, #0]
 800afb4:	681a      	ldr	r2, [r3, #0]
 800afb6:	4934      	ldr	r1, [pc, #208]	; (800b088 <BSP_TS_Init+0x140>)
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	015b      	lsls	r3, r3, #5
 800afbc:	440b      	add	r3, r1
 800afbe:	601a      	str	r2, [r3, #0]
      Ts_Ctx[Instance].Height      = TS_Init->Height;
 800afc0:	683b      	ldr	r3, [r7, #0]
 800afc2:	685a      	ldr	r2, [r3, #4]
 800afc4:	4930      	ldr	r1, [pc, #192]	; (800b088 <BSP_TS_Init+0x140>)
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	015b      	lsls	r3, r3, #5
 800afca:	440b      	add	r3, r1
 800afcc:	3304      	adds	r3, #4
 800afce:	601a      	str	r2, [r3, #0]
      Ts_Ctx[Instance].Orientation = TS_Init->Orientation;
 800afd0:	683b      	ldr	r3, [r7, #0]
 800afd2:	689a      	ldr	r2, [r3, #8]
 800afd4:	492c      	ldr	r1, [pc, #176]	; (800b088 <BSP_TS_Init+0x140>)
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	015b      	lsls	r3, r3, #5
 800afda:	440b      	add	r3, r1
 800afdc:	3308      	adds	r3, #8
 800afde:	601a      	str	r2, [r3, #0]
      Ts_Ctx[Instance].Accuracy    = TS_Init->Accuracy;
 800afe0:	683b      	ldr	r3, [r7, #0]
 800afe2:	68da      	ldr	r2, [r3, #12]
 800afe4:	4928      	ldr	r1, [pc, #160]	; (800b088 <BSP_TS_Init+0x140>)
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	015b      	lsls	r3, r3, #5
 800afea:	440b      	add	r3, r1
 800afec:	330c      	adds	r3, #12
 800afee:	601a      	str	r2, [r3, #0]
      /* Get capabilities to retrieve maximum values of X and Y */
      if (Ts_Drv->GetCapabilities(Ts_CompObj[Instance], &Capabilities) < 0)
 800aff0:	4b26      	ldr	r3, [pc, #152]	; (800b08c <BSP_TS_Init+0x144>)
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	69db      	ldr	r3, [r3, #28]
 800aff6:	4926      	ldr	r1, [pc, #152]	; (800b090 <BSP_TS_Init+0x148>)
 800aff8:	687a      	ldr	r2, [r7, #4]
 800affa:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800affe:	f107 010c 	add.w	r1, r7, #12
 800b002:	4610      	mov	r0, r2
 800b004:	4798      	blx	r3
 800b006:	4603      	mov	r3, r0
 800b008:	2b00      	cmp	r3, #0
 800b00a:	da03      	bge.n	800b014 <BSP_TS_Init+0xcc>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800b00c:	f06f 0304 	mvn.w	r3, #4
 800b010:	61fb      	str	r3, [r7, #28]
 800b012:	e033      	b.n	800b07c <BSP_TS_Init+0x134>
      }
      else
      {
        /* Store maximum X and Y on context */
        Ts_Ctx[Instance].MaxX = Capabilities.MaxXl;
 800b014:	693a      	ldr	r2, [r7, #16]
 800b016:	491c      	ldr	r1, [pc, #112]	; (800b088 <BSP_TS_Init+0x140>)
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	015b      	lsls	r3, r3, #5
 800b01c:	440b      	add	r3, r1
 800b01e:	3310      	adds	r3, #16
 800b020:	601a      	str	r2, [r3, #0]
        Ts_Ctx[Instance].MaxY = Capabilities.MaxYl;
 800b022:	697a      	ldr	r2, [r7, #20]
 800b024:	4918      	ldr	r1, [pc, #96]	; (800b088 <BSP_TS_Init+0x140>)
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	015b      	lsls	r3, r3, #5
 800b02a:	440b      	add	r3, r1
 800b02c:	3314      	adds	r3, #20
 800b02e:	601a      	str	r2, [r3, #0]
        /* Initialize previous position in order to always detect first touch */
        for(i = 0; i < TS_TOUCH_NBR; i++)
 800b030:	2300      	movs	r3, #0
 800b032:	61bb      	str	r3, [r7, #24]
 800b034:	e01f      	b.n	800b076 <BSP_TS_Init+0x12e>
        {
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 800b036:	683b      	ldr	r3, [r7, #0]
 800b038:	681a      	ldr	r2, [r3, #0]
 800b03a:	683b      	ldr	r3, [r7, #0]
 800b03c:	68db      	ldr	r3, [r3, #12]
 800b03e:	4413      	add	r3, r2
 800b040:	1c5a      	adds	r2, r3, #1
 800b042:	4811      	ldr	r0, [pc, #68]	; (800b088 <BSP_TS_Init+0x140>)
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	00d9      	lsls	r1, r3, #3
 800b048:	69bb      	ldr	r3, [r7, #24]
 800b04a:	440b      	add	r3, r1
 800b04c:	3306      	adds	r3, #6
 800b04e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
 800b052:	683b      	ldr	r3, [r7, #0]
 800b054:	685a      	ldr	r2, [r3, #4]
 800b056:	683b      	ldr	r3, [r7, #0]
 800b058:	68db      	ldr	r3, [r3, #12]
 800b05a:	4413      	add	r3, r2
 800b05c:	1c5a      	adds	r2, r3, #1
 800b05e:	480a      	ldr	r0, [pc, #40]	; (800b088 <BSP_TS_Init+0x140>)
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	00d9      	lsls	r1, r3, #3
 800b064:	69bb      	ldr	r3, [r7, #24]
 800b066:	440b      	add	r3, r1
 800b068:	3306      	adds	r3, #6
 800b06a:	009b      	lsls	r3, r3, #2
 800b06c:	4403      	add	r3, r0
 800b06e:	605a      	str	r2, [r3, #4]
        for(i = 0; i < TS_TOUCH_NBR; i++)
 800b070:	69bb      	ldr	r3, [r7, #24]
 800b072:	3301      	adds	r3, #1
 800b074:	61bb      	str	r3, [r7, #24]
 800b076:	69bb      	ldr	r3, [r7, #24]
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d0dc      	beq.n	800b036 <BSP_TS_Init+0xee>
        }
      }
    }
  }

  return ret;
 800b07c:	69fb      	ldr	r3, [r7, #28]
}
 800b07e:	4618      	mov	r0, r3
 800b080:	3720      	adds	r7, #32
 800b082:	46bd      	mov	sp, r7
 800b084:	bd80      	pop	{r7, pc}
 800b086:	bf00      	nop
 800b088:	24003b58 	.word	0x24003b58
 800b08c:	24003b50 	.word	0x24003b50
 800b090:	24003b54 	.word	0x24003b54

0800b094 <BSP_TS_GetState>:
  * @param  Instance  TS instance. Could be only 0.
  * @param  TS_State  Pointer to touch screen current state structure
  * @retval BSP status
  */
int32_t BSP_TS_GetState(uint32_t Instance, TS_State_t *TS_State)
{
 800b094:	b580      	push	{r7, lr}
 800b096:	b08a      	sub	sp, #40	; 0x28
 800b098:	af00      	add	r7, sp, #0
 800b09a:	6078      	str	r0, [r7, #4]
 800b09c:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800b09e:	2300      	movs	r3, #0
 800b0a0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t x_oriented, y_oriented;
  uint32_t x_diff, y_diff;

  if(Instance >= TS_INSTANCES_NBR)
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	d003      	beq.n	800b0b0 <BSP_TS_GetState+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800b0a8:	f06f 0301 	mvn.w	r3, #1
 800b0ac:	627b      	str	r3, [r7, #36]	; 0x24
 800b0ae:	e0f9      	b.n	800b2a4 <BSP_TS_GetState+0x210>
  else
  {
    FT5336_State_t state;

    /* Get each touch coordinates */
    if(Ts_Drv->GetState(Ts_CompObj[Instance], &state) < 0)
 800b0b0:	4b7f      	ldr	r3, [pc, #508]	; (800b2b0 <BSP_TS_GetState+0x21c>)
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	691b      	ldr	r3, [r3, #16]
 800b0b6:	497f      	ldr	r1, [pc, #508]	; (800b2b4 <BSP_TS_GetState+0x220>)
 800b0b8:	687a      	ldr	r2, [r7, #4]
 800b0ba:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800b0be:	f107 0108 	add.w	r1, r7, #8
 800b0c2:	4610      	mov	r0, r2
 800b0c4:	4798      	blx	r3
 800b0c6:	4603      	mov	r3, r0
 800b0c8:	2b00      	cmp	r3, #0
 800b0ca:	da03      	bge.n	800b0d4 <BSP_TS_GetState+0x40>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800b0cc:	f06f 0304 	mvn.w	r3, #4
 800b0d0:	627b      	str	r3, [r7, #36]	; 0x24
 800b0d2:	e0e7      	b.n	800b2a4 <BSP_TS_GetState+0x210>
    }/* Check and update the number of touches active detected */
    else if(state.TouchDetected != 0U)
 800b0d4:	68bb      	ldr	r3, [r7, #8]
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	f000 80d1 	beq.w	800b27e <BSP_TS_GetState+0x1ea>
    {
      x_oriented = state.TouchX;
 800b0dc:	68fb      	ldr	r3, [r7, #12]
 800b0de:	623b      	str	r3, [r7, #32]
      y_oriented = state.TouchY;
 800b0e0:	693b      	ldr	r3, [r7, #16]
 800b0e2:	61fb      	str	r3, [r7, #28]

      if((Ts_Ctx[Instance].Orientation & TS_SWAP_XY) == TS_SWAP_XY)
 800b0e4:	4a74      	ldr	r2, [pc, #464]	; (800b2b8 <BSP_TS_GetState+0x224>)
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	015b      	lsls	r3, r3, #5
 800b0ea:	4413      	add	r3, r2
 800b0ec:	3308      	adds	r3, #8
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	f003 0308 	and.w	r3, r3, #8
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	d003      	beq.n	800b100 <BSP_TS_GetState+0x6c>
      {
        x_oriented = state.TouchY;
 800b0f8:	693b      	ldr	r3, [r7, #16]
 800b0fa:	623b      	str	r3, [r7, #32]
        y_oriented = state.TouchX;
 800b0fc:	68fb      	ldr	r3, [r7, #12]
 800b0fe:	61fb      	str	r3, [r7, #28]
      }

      if((Ts_Ctx[Instance].Orientation & TS_SWAP_X) == TS_SWAP_X)
 800b100:	4a6d      	ldr	r2, [pc, #436]	; (800b2b8 <BSP_TS_GetState+0x224>)
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	015b      	lsls	r3, r3, #5
 800b106:	4413      	add	r3, r2
 800b108:	3308      	adds	r3, #8
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	f003 0302 	and.w	r3, r3, #2
 800b110:	2b00      	cmp	r3, #0
 800b112:	d009      	beq.n	800b128 <BSP_TS_GetState+0x94>
      {
        x_oriented = Ts_Ctx[Instance].MaxX - state.TouchX - 1UL;
 800b114:	4a68      	ldr	r2, [pc, #416]	; (800b2b8 <BSP_TS_GetState+0x224>)
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	015b      	lsls	r3, r3, #5
 800b11a:	4413      	add	r3, r2
 800b11c:	3310      	adds	r3, #16
 800b11e:	681a      	ldr	r2, [r3, #0]
 800b120:	68fb      	ldr	r3, [r7, #12]
 800b122:	1ad3      	subs	r3, r2, r3
 800b124:	3b01      	subs	r3, #1
 800b126:	623b      	str	r3, [r7, #32]
      }

      if((Ts_Ctx[Instance].Orientation & TS_SWAP_Y) == TS_SWAP_Y)
 800b128:	4a63      	ldr	r2, [pc, #396]	; (800b2b8 <BSP_TS_GetState+0x224>)
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	015b      	lsls	r3, r3, #5
 800b12e:	4413      	add	r3, r2
 800b130:	3308      	adds	r3, #8
 800b132:	681b      	ldr	r3, [r3, #0]
 800b134:	f003 0304 	and.w	r3, r3, #4
 800b138:	2b00      	cmp	r3, #0
 800b13a:	d008      	beq.n	800b14e <BSP_TS_GetState+0xba>
      {
        y_oriented = Ts_Ctx[Instance].MaxY - state.TouchY;
 800b13c:	4a5e      	ldr	r2, [pc, #376]	; (800b2b8 <BSP_TS_GetState+0x224>)
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	015b      	lsls	r3, r3, #5
 800b142:	4413      	add	r3, r2
 800b144:	3314      	adds	r3, #20
 800b146:	681a      	ldr	r2, [r3, #0]
 800b148:	693b      	ldr	r3, [r7, #16]
 800b14a:	1ad3      	subs	r3, r2, r3
 800b14c:	61fb      	str	r3, [r7, #28]
      }

      /* Apply boundary */
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
 800b14e:	4a5a      	ldr	r2, [pc, #360]	; (800b2b8 <BSP_TS_GetState+0x224>)
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	015b      	lsls	r3, r3, #5
 800b154:	4413      	add	r3, r2
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	6a3a      	ldr	r2, [r7, #32]
 800b15a:	fb02 f203 	mul.w	r2, r2, r3
 800b15e:	4956      	ldr	r1, [pc, #344]	; (800b2b8 <BSP_TS_GetState+0x224>)
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	015b      	lsls	r3, r3, #5
 800b164:	440b      	add	r3, r1
 800b166:	3310      	adds	r3, #16
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	fbb2 f2f3 	udiv	r2, r2, r3
 800b16e:	683b      	ldr	r3, [r7, #0]
 800b170:	605a      	str	r2, [r3, #4]
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
 800b172:	4a51      	ldr	r2, [pc, #324]	; (800b2b8 <BSP_TS_GetState+0x224>)
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	015b      	lsls	r3, r3, #5
 800b178:	4413      	add	r3, r2
 800b17a:	3304      	adds	r3, #4
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	69fa      	ldr	r2, [r7, #28]
 800b180:	fb02 f203 	mul.w	r2, r2, r3
 800b184:	494c      	ldr	r1, [pc, #304]	; (800b2b8 <BSP_TS_GetState+0x224>)
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	015b      	lsls	r3, r3, #5
 800b18a:	440b      	add	r3, r1
 800b18c:	3314      	adds	r3, #20
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	fbb2 f2f3 	udiv	r2, r2, r3
 800b194:	683b      	ldr	r3, [r7, #0]
 800b196:	609a      	str	r2, [r3, #8]
      /* Store Current TS state */
      TS_State->TouchDetected = state.TouchDetected;
 800b198:	68ba      	ldr	r2, [r7, #8]
 800b19a:	683b      	ldr	r3, [r7, #0]
 800b19c:	601a      	str	r2, [r3, #0]

      /* Check accuracy */
      x_diff = (TS_State->TouchX > Ts_Ctx[Instance].PreviousX[0])?
 800b19e:	683b      	ldr	r3, [r7, #0]
 800b1a0:	685a      	ldr	r2, [r3, #4]
 800b1a2:	4945      	ldr	r1, [pc, #276]	; (800b2b8 <BSP_TS_GetState+0x224>)
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	015b      	lsls	r3, r3, #5
 800b1a8:	440b      	add	r3, r1
 800b1aa:	3318      	adds	r3, #24
 800b1ac:	681b      	ldr	r3, [r3, #0]
        (TS_State->TouchX - Ts_Ctx[Instance].PreviousX[0]):
 800b1ae:	429a      	cmp	r2, r3
 800b1b0:	d909      	bls.n	800b1c6 <BSP_TS_GetState+0x132>
 800b1b2:	683b      	ldr	r3, [r7, #0]
 800b1b4:	685a      	ldr	r2, [r3, #4]
 800b1b6:	4940      	ldr	r1, [pc, #256]	; (800b2b8 <BSP_TS_GetState+0x224>)
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	015b      	lsls	r3, r3, #5
 800b1bc:	440b      	add	r3, r1
 800b1be:	3318      	adds	r3, #24
 800b1c0:	681b      	ldr	r3, [r3, #0]
 800b1c2:	1ad3      	subs	r3, r2, r3
 800b1c4:	e008      	b.n	800b1d8 <BSP_TS_GetState+0x144>
        (Ts_Ctx[Instance].PreviousX[0] - TS_State->TouchX);
 800b1c6:	4a3c      	ldr	r2, [pc, #240]	; (800b2b8 <BSP_TS_GetState+0x224>)
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	015b      	lsls	r3, r3, #5
 800b1cc:	4413      	add	r3, r2
 800b1ce:	3318      	adds	r3, #24
 800b1d0:	681a      	ldr	r2, [r3, #0]
 800b1d2:	683b      	ldr	r3, [r7, #0]
 800b1d4:	685b      	ldr	r3, [r3, #4]
        (TS_State->TouchX - Ts_Ctx[Instance].PreviousX[0]):
 800b1d6:	1ad3      	subs	r3, r2, r3
      x_diff = (TS_State->TouchX > Ts_Ctx[Instance].PreviousX[0])?
 800b1d8:	61bb      	str	r3, [r7, #24]

        y_diff = (TS_State->TouchY > Ts_Ctx[Instance].PreviousY[0])?
 800b1da:	683b      	ldr	r3, [r7, #0]
 800b1dc:	689a      	ldr	r2, [r3, #8]
 800b1de:	4936      	ldr	r1, [pc, #216]	; (800b2b8 <BSP_TS_GetState+0x224>)
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	015b      	lsls	r3, r3, #5
 800b1e4:	440b      	add	r3, r1
 800b1e6:	331c      	adds	r3, #28
 800b1e8:	681b      	ldr	r3, [r3, #0]
          (TS_State->TouchY - Ts_Ctx[Instance].PreviousY[0]):
 800b1ea:	429a      	cmp	r2, r3
 800b1ec:	d909      	bls.n	800b202 <BSP_TS_GetState+0x16e>
 800b1ee:	683b      	ldr	r3, [r7, #0]
 800b1f0:	689a      	ldr	r2, [r3, #8]
 800b1f2:	4931      	ldr	r1, [pc, #196]	; (800b2b8 <BSP_TS_GetState+0x224>)
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	015b      	lsls	r3, r3, #5
 800b1f8:	440b      	add	r3, r1
 800b1fa:	331c      	adds	r3, #28
 800b1fc:	681b      	ldr	r3, [r3, #0]
 800b1fe:	1ad3      	subs	r3, r2, r3
 800b200:	e008      	b.n	800b214 <BSP_TS_GetState+0x180>
          (Ts_Ctx[Instance].PreviousY[0] - TS_State->TouchY);
 800b202:	4a2d      	ldr	r2, [pc, #180]	; (800b2b8 <BSP_TS_GetState+0x224>)
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	015b      	lsls	r3, r3, #5
 800b208:	4413      	add	r3, r2
 800b20a:	331c      	adds	r3, #28
 800b20c:	681a      	ldr	r2, [r3, #0]
 800b20e:	683b      	ldr	r3, [r7, #0]
 800b210:	689b      	ldr	r3, [r3, #8]
          (TS_State->TouchY - Ts_Ctx[Instance].PreviousY[0]):
 800b212:	1ad3      	subs	r3, r2, r3
        y_diff = (TS_State->TouchY > Ts_Ctx[Instance].PreviousY[0])?
 800b214:	617b      	str	r3, [r7, #20]


          if ((x_diff > Ts_Ctx[Instance].Accuracy) || (y_diff > Ts_Ctx[Instance].Accuracy))
 800b216:	4a28      	ldr	r2, [pc, #160]	; (800b2b8 <BSP_TS_GetState+0x224>)
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	015b      	lsls	r3, r3, #5
 800b21c:	4413      	add	r3, r2
 800b21e:	330c      	adds	r3, #12
 800b220:	681b      	ldr	r3, [r3, #0]
 800b222:	69ba      	ldr	r2, [r7, #24]
 800b224:	429a      	cmp	r2, r3
 800b226:	d808      	bhi.n	800b23a <BSP_TS_GetState+0x1a6>
 800b228:	4a23      	ldr	r2, [pc, #140]	; (800b2b8 <BSP_TS_GetState+0x224>)
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	015b      	lsls	r3, r3, #5
 800b22e:	4413      	add	r3, r2
 800b230:	330c      	adds	r3, #12
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	697a      	ldr	r2, [r7, #20]
 800b236:	429a      	cmp	r2, r3
 800b238:	d910      	bls.n	800b25c <BSP_TS_GetState+0x1c8>
          {
            /* New touch detected */
            Ts_Ctx[Instance].PreviousX[0] = TS_State->TouchX;
 800b23a:	683b      	ldr	r3, [r7, #0]
 800b23c:	685a      	ldr	r2, [r3, #4]
 800b23e:	491e      	ldr	r1, [pc, #120]	; (800b2b8 <BSP_TS_GetState+0x224>)
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	015b      	lsls	r3, r3, #5
 800b244:	440b      	add	r3, r1
 800b246:	3318      	adds	r3, #24
 800b248:	601a      	str	r2, [r3, #0]
            Ts_Ctx[Instance].PreviousY[0] = TS_State->TouchY;
 800b24a:	683b      	ldr	r3, [r7, #0]
 800b24c:	689a      	ldr	r2, [r3, #8]
 800b24e:	491a      	ldr	r1, [pc, #104]	; (800b2b8 <BSP_TS_GetState+0x224>)
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	015b      	lsls	r3, r3, #5
 800b254:	440b      	add	r3, r1
 800b256:	331c      	adds	r3, #28
 800b258:	601a      	str	r2, [r3, #0]
 800b25a:	e023      	b.n	800b2a4 <BSP_TS_GetState+0x210>
          }
          else
          {
            TS_State->TouchX = Ts_Ctx[Instance].PreviousX[0];
 800b25c:	4a16      	ldr	r2, [pc, #88]	; (800b2b8 <BSP_TS_GetState+0x224>)
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	015b      	lsls	r3, r3, #5
 800b262:	4413      	add	r3, r2
 800b264:	3318      	adds	r3, #24
 800b266:	681a      	ldr	r2, [r3, #0]
 800b268:	683b      	ldr	r3, [r7, #0]
 800b26a:	605a      	str	r2, [r3, #4]
            TS_State->TouchY = Ts_Ctx[Instance].PreviousY[0];
 800b26c:	4a12      	ldr	r2, [pc, #72]	; (800b2b8 <BSP_TS_GetState+0x224>)
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	015b      	lsls	r3, r3, #5
 800b272:	4413      	add	r3, r2
 800b274:	331c      	adds	r3, #28
 800b276:	681a      	ldr	r2, [r3, #0]
 800b278:	683b      	ldr	r3, [r7, #0]
 800b27a:	609a      	str	r2, [r3, #8]
 800b27c:	e012      	b.n	800b2a4 <BSP_TS_GetState+0x210>
          }
    }
    else
    {
      TS_State->TouchDetected = 0U;
 800b27e:	683b      	ldr	r3, [r7, #0]
 800b280:	2200      	movs	r2, #0
 800b282:	601a      	str	r2, [r3, #0]
      TS_State->TouchX = Ts_Ctx[Instance].PreviousX[0];
 800b284:	4a0c      	ldr	r2, [pc, #48]	; (800b2b8 <BSP_TS_GetState+0x224>)
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	015b      	lsls	r3, r3, #5
 800b28a:	4413      	add	r3, r2
 800b28c:	3318      	adds	r3, #24
 800b28e:	681a      	ldr	r2, [r3, #0]
 800b290:	683b      	ldr	r3, [r7, #0]
 800b292:	605a      	str	r2, [r3, #4]
      TS_State->TouchY = Ts_Ctx[Instance].PreviousY[0];
 800b294:	4a08      	ldr	r2, [pc, #32]	; (800b2b8 <BSP_TS_GetState+0x224>)
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	015b      	lsls	r3, r3, #5
 800b29a:	4413      	add	r3, r2
 800b29c:	331c      	adds	r3, #28
 800b29e:	681a      	ldr	r2, [r3, #0]
 800b2a0:	683b      	ldr	r3, [r7, #0]
 800b2a2:	609a      	str	r2, [r3, #8]
    }
  }

  return ret;
 800b2a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b2a6:	4618      	mov	r0, r3
 800b2a8:	3728      	adds	r7, #40	; 0x28
 800b2aa:	46bd      	mov	sp, r7
 800b2ac:	bd80      	pop	{r7, pc}
 800b2ae:	bf00      	nop
 800b2b0:	24003b50 	.word	0x24003b50
 800b2b4:	24003b54 	.word	0x24003b54
 800b2b8:	24003b58 	.word	0x24003b58

0800b2bc <FT5336_Probe>:
  * @brief  Register Bus IOs if component ID is OK
  * @param  Instance TS instance. Could be only 0.
  * @retval BSP status
  */
static int32_t FT5336_Probe(uint32_t Instance)
{
 800b2bc:	b580      	push	{r7, lr}
 800b2be:	b08a      	sub	sp, #40	; 0x28
 800b2c0:	af00      	add	r7, sp, #0
 800b2c2:	6078      	str	r0, [r7, #4]
  int32_t ret              = BSP_ERROR_NONE;
 800b2c4:	2300      	movs	r3, #0
 800b2c6:	627b      	str	r3, [r7, #36]	; 0x24
  FT5336_IO_t              IOCtx;
  static FT5336_Object_t   FT5336Obj;
  uint32_t ft5336_id       = 0;
 800b2c8:	2300      	movs	r3, #0
 800b2ca:	60bb      	str	r3, [r7, #8]

  /* Configure the touch screen driver */
  IOCtx.Address     = TS_I2C_ADDRESS;
 800b2cc:	2370      	movs	r3, #112	; 0x70
 800b2ce:	82bb      	strh	r3, [r7, #20]
  IOCtx.Init        = BSP_I2C4_Init;
 800b2d0:	4b23      	ldr	r3, [pc, #140]	; (800b360 <FT5336_Probe+0xa4>)
 800b2d2:	60fb      	str	r3, [r7, #12]
  IOCtx.DeInit      = BSP_I2C4_DeInit;
 800b2d4:	4b23      	ldr	r3, [pc, #140]	; (800b364 <FT5336_Probe+0xa8>)
 800b2d6:	613b      	str	r3, [r7, #16]
  IOCtx.ReadReg     = BSP_I2C4_ReadReg;
 800b2d8:	4b23      	ldr	r3, [pc, #140]	; (800b368 <FT5336_Probe+0xac>)
 800b2da:	61fb      	str	r3, [r7, #28]
  IOCtx.WriteReg    = BSP_I2C4_WriteReg;
 800b2dc:	4b23      	ldr	r3, [pc, #140]	; (800b36c <FT5336_Probe+0xb0>)
 800b2de:	61bb      	str	r3, [r7, #24]
  IOCtx.GetTick     = BSP_GetTick;
 800b2e0:	4b23      	ldr	r3, [pc, #140]	; (800b370 <FT5336_Probe+0xb4>)
 800b2e2:	623b      	str	r3, [r7, #32]

  if(FT5336_RegisterBusIO (&FT5336Obj, &IOCtx) != FT5336_OK)
 800b2e4:	f107 030c 	add.w	r3, r7, #12
 800b2e8:	4619      	mov	r1, r3
 800b2ea:	4822      	ldr	r0, [pc, #136]	; (800b374 <FT5336_Probe+0xb8>)
 800b2ec:	f7fd fb30 	bl	8008950 <FT5336_RegisterBusIO>
 800b2f0:	4603      	mov	r3, r0
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	d003      	beq.n	800b2fe <FT5336_Probe+0x42>
  {
    ret = BSP_ERROR_BUS_FAILURE;
 800b2f6:	f06f 0307 	mvn.w	r3, #7
 800b2fa:	627b      	str	r3, [r7, #36]	; 0x24
 800b2fc:	e02a      	b.n	800b354 <FT5336_Probe+0x98>
  }
  else if(FT5336_ReadID(&FT5336Obj, &ft5336_id) != FT5336_OK)
 800b2fe:	f107 0308 	add.w	r3, r7, #8
 800b302:	4619      	mov	r1, r3
 800b304:	481b      	ldr	r0, [pc, #108]	; (800b374 <FT5336_Probe+0xb8>)
 800b306:	f7fd fc1d 	bl	8008b44 <FT5336_ReadID>
 800b30a:	4603      	mov	r3, r0
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	d003      	beq.n	800b318 <FT5336_Probe+0x5c>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800b310:	f06f 0304 	mvn.w	r3, #4
 800b314:	627b      	str	r3, [r7, #36]	; 0x24
 800b316:	e01d      	b.n	800b354 <FT5336_Probe+0x98>
  }
  else if(ft5336_id != FT5336_ID)
 800b318:	68bb      	ldr	r3, [r7, #8]
 800b31a:	2b51      	cmp	r3, #81	; 0x51
 800b31c:	d003      	beq.n	800b326 <FT5336_Probe+0x6a>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800b31e:	f06f 0306 	mvn.w	r3, #6
 800b322:	627b      	str	r3, [r7, #36]	; 0x24
 800b324:	e016      	b.n	800b354 <FT5336_Probe+0x98>
  }
  else
  {
    Ts_CompObj[Instance] = &FT5336Obj;
 800b326:	4a14      	ldr	r2, [pc, #80]	; (800b378 <FT5336_Probe+0xbc>)
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	4912      	ldr	r1, [pc, #72]	; (800b374 <FT5336_Probe+0xb8>)
 800b32c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    Ts_Drv = (TS_Drv_t *) &FT5336_TS_Driver;
 800b330:	4b12      	ldr	r3, [pc, #72]	; (800b37c <FT5336_Probe+0xc0>)
 800b332:	4a13      	ldr	r2, [pc, #76]	; (800b380 <FT5336_Probe+0xc4>)
 800b334:	601a      	str	r2, [r3, #0]

    if(Ts_Drv->Init(Ts_CompObj[Instance]) != FT5336_OK)
 800b336:	4b11      	ldr	r3, [pc, #68]	; (800b37c <FT5336_Probe+0xc0>)
 800b338:	681b      	ldr	r3, [r3, #0]
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	490e      	ldr	r1, [pc, #56]	; (800b378 <FT5336_Probe+0xbc>)
 800b33e:	687a      	ldr	r2, [r7, #4]
 800b340:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800b344:	4610      	mov	r0, r2
 800b346:	4798      	blx	r3
 800b348:	4603      	mov	r3, r0
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	d002      	beq.n	800b354 <FT5336_Probe+0x98>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800b34e:	f06f 0304 	mvn.w	r3, #4
 800b352:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }

  return ret;
 800b354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b356:	4618      	mov	r0, r3
 800b358:	3728      	adds	r7, #40	; 0x28
 800b35a:	46bd      	mov	sp, r7
 800b35c:	bd80      	pop	{r7, pc}
 800b35e:	bf00      	nop
 800b360:	0800995d 	.word	0x0800995d
 800b364:	080099d1 	.word	0x080099d1
 800b368:	08009af9 	.word	0x08009af9
 800b36c:	08009a9d 	.word	0x08009a9d
 800b370:	08009b55 	.word	0x08009b55
 800b374:	24003b78 	.word	0x24003b78
 800b378:	24003b54 	.word	0x24003b54
 800b37c:	24003b50 	.word	0x24003b50
 800b380:	2400000c 	.word	0x2400000c

0800b384 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800b384:	b480      	push	{r7}
 800b386:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800b388:	4b29      	ldr	r3, [pc, #164]	; (800b430 <SystemInit+0xac>)
 800b38a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b38e:	4a28      	ldr	r2, [pc, #160]	; (800b430 <SystemInit+0xac>)
 800b390:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b394:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800b398:	4b26      	ldr	r3, [pc, #152]	; (800b434 <SystemInit+0xb0>)
 800b39a:	681b      	ldr	r3, [r3, #0]
 800b39c:	4a25      	ldr	r2, [pc, #148]	; (800b434 <SystemInit+0xb0>)
 800b39e:	f043 0301 	orr.w	r3, r3, #1
 800b3a2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800b3a4:	4b23      	ldr	r3, [pc, #140]	; (800b434 <SystemInit+0xb0>)
 800b3a6:	2200      	movs	r2, #0
 800b3a8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800b3aa:	4b22      	ldr	r3, [pc, #136]	; (800b434 <SystemInit+0xb0>)
 800b3ac:	681a      	ldr	r2, [r3, #0]
 800b3ae:	4921      	ldr	r1, [pc, #132]	; (800b434 <SystemInit+0xb0>)
 800b3b0:	4b21      	ldr	r3, [pc, #132]	; (800b438 <SystemInit+0xb4>)
 800b3b2:	4013      	ands	r3, r2
 800b3b4:	600b      	str	r3, [r1, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 800b3b6:	4b1f      	ldr	r3, [pc, #124]	; (800b434 <SystemInit+0xb0>)
 800b3b8:	2200      	movs	r2, #0
 800b3ba:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 800b3bc:	4b1d      	ldr	r3, [pc, #116]	; (800b434 <SystemInit+0xb0>)
 800b3be:	2200      	movs	r2, #0
 800b3c0:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 800b3c2:	4b1c      	ldr	r3, [pc, #112]	; (800b434 <SystemInit+0xb0>)
 800b3c4:	2200      	movs	r2, #0
 800b3c6:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 800b3c8:	4b1a      	ldr	r3, [pc, #104]	; (800b434 <SystemInit+0xb0>)
 800b3ca:	2200      	movs	r2, #0
 800b3cc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 800b3ce:	4b19      	ldr	r3, [pc, #100]	; (800b434 <SystemInit+0xb0>)
 800b3d0:	2200      	movs	r2, #0
 800b3d2:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 800b3d4:	4b17      	ldr	r3, [pc, #92]	; (800b434 <SystemInit+0xb0>)
 800b3d6:	2200      	movs	r2, #0
 800b3d8:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800b3da:	4b16      	ldr	r3, [pc, #88]	; (800b434 <SystemInit+0xb0>)
 800b3dc:	2200      	movs	r2, #0
 800b3de:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 800b3e0:	4b14      	ldr	r3, [pc, #80]	; (800b434 <SystemInit+0xb0>)
 800b3e2:	2200      	movs	r2, #0
 800b3e4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800b3e6:	4b13      	ldr	r3, [pc, #76]	; (800b434 <SystemInit+0xb0>)
 800b3e8:	2200      	movs	r2, #0
 800b3ea:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 800b3ec:	4b11      	ldr	r3, [pc, #68]	; (800b434 <SystemInit+0xb0>)
 800b3ee:	2200      	movs	r2, #0
 800b3f0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800b3f2:	4b10      	ldr	r3, [pc, #64]	; (800b434 <SystemInit+0xb0>)
 800b3f4:	2200      	movs	r2, #0
 800b3f6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800b3f8:	4b0e      	ldr	r3, [pc, #56]	; (800b434 <SystemInit+0xb0>)
 800b3fa:	681b      	ldr	r3, [r3, #0]
 800b3fc:	4a0d      	ldr	r2, [pc, #52]	; (800b434 <SystemInit+0xb0>)
 800b3fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b402:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800b404:	4b0b      	ldr	r3, [pc, #44]	; (800b434 <SystemInit+0xb0>)
 800b406:	2200      	movs	r2, #0
 800b408:	661a      	str	r2, [r3, #96]	; 0x60
  SCB->VTOR = FLASH_BANK2_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
#endif /* VECT_TAB_SRAM */

#else
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800b40a:	4b0c      	ldr	r3, [pc, #48]	; (800b43c <SystemInit+0xb8>)
 800b40c:	681a      	ldr	r2, [r3, #0]
 800b40e:	4b0c      	ldr	r3, [pc, #48]	; (800b440 <SystemInit+0xbc>)
 800b410:	4013      	ands	r3, r2
 800b412:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b416:	d202      	bcs.n	800b41e <SystemInit+0x9a>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800b418:	4b0a      	ldr	r3, [pc, #40]	; (800b444 <SystemInit+0xc0>)
 800b41a:	2201      	movs	r2, #1
 800b41c:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800b41e:	4b04      	ldr	r3, [pc, #16]	; (800b430 <SystemInit+0xac>)
 800b420:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800b424:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 800b426:	bf00      	nop
 800b428:	46bd      	mov	sp, r7
 800b42a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b42e:	4770      	bx	lr
 800b430:	e000ed00 	.word	0xe000ed00
 800b434:	58024400 	.word	0x58024400
 800b438:	eaf6ed7f 	.word	0xeaf6ed7f
 800b43c:	5c001000 	.word	0x5c001000
 800b440:	ffff0000 	.word	0xffff0000
 800b444:	51008108 	.word	0x51008108

0800b448 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800b448:	b580      	push	{r7, lr}
 800b44a:	b082      	sub	sp, #8
 800b44c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800b44e:	2003      	movs	r0, #3
 800b450:	f001 fd27 	bl	800cea2 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 800b454:	f005 fb38 	bl	8010ac8 <HAL_RCC_GetSysClockFreq>
 800b458:	4602      	mov	r2, r0
 800b45a:	4b15      	ldr	r3, [pc, #84]	; (800b4b0 <HAL_Init+0x68>)
 800b45c:	699b      	ldr	r3, [r3, #24]
 800b45e:	0a1b      	lsrs	r3, r3, #8
 800b460:	f003 030f 	and.w	r3, r3, #15
 800b464:	4913      	ldr	r1, [pc, #76]	; (800b4b4 <HAL_Init+0x6c>)
 800b466:	5ccb      	ldrb	r3, [r1, r3]
 800b468:	f003 031f 	and.w	r3, r3, #31
 800b46c:	fa22 f303 	lsr.w	r3, r2, r3
 800b470:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800b472:	4b0f      	ldr	r3, [pc, #60]	; (800b4b0 <HAL_Init+0x68>)
 800b474:	699b      	ldr	r3, [r3, #24]
 800b476:	f003 030f 	and.w	r3, r3, #15
 800b47a:	4a0e      	ldr	r2, [pc, #56]	; (800b4b4 <HAL_Init+0x6c>)
 800b47c:	5cd3      	ldrb	r3, [r2, r3]
 800b47e:	f003 031f 	and.w	r3, r3, #31
 800b482:	687a      	ldr	r2, [r7, #4]
 800b484:	fa22 f303 	lsr.w	r3, r2, r3
 800b488:	4a0b      	ldr	r2, [pc, #44]	; (800b4b8 <HAL_Init+0x70>)
 800b48a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800b48c:	4a0b      	ldr	r2, [pc, #44]	; (800b4bc <HAL_Init+0x74>)
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800b492:	2000      	movs	r0, #0
 800b494:	f7f8 fbca 	bl	8003c2c <HAL_InitTick>
 800b498:	4603      	mov	r3, r0
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	d001      	beq.n	800b4a2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800b49e:	2301      	movs	r3, #1
 800b4a0:	e002      	b.n	800b4a8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800b4a2:	f7f8 f8fb 	bl	800369c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800b4a6:	2300      	movs	r3, #0
}
 800b4a8:	4618      	mov	r0, r3
 800b4aa:	3708      	adds	r7, #8
 800b4ac:	46bd      	mov	sp, r7
 800b4ae:	bd80      	pop	{r7, pc}
 800b4b0:	58024400 	.word	0x58024400
 800b4b4:	0802e3c4 	.word	0x0802e3c4
 800b4b8:	24000040 	.word	0x24000040
 800b4bc:	2400003c 	.word	0x2400003c

0800b4c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800b4c0:	b480      	push	{r7}
 800b4c2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800b4c4:	4b06      	ldr	r3, [pc, #24]	; (800b4e0 <HAL_IncTick+0x20>)
 800b4c6:	781b      	ldrb	r3, [r3, #0]
 800b4c8:	461a      	mov	r2, r3
 800b4ca:	4b06      	ldr	r3, [pc, #24]	; (800b4e4 <HAL_IncTick+0x24>)
 800b4cc:	681b      	ldr	r3, [r3, #0]
 800b4ce:	4413      	add	r3, r2
 800b4d0:	4a04      	ldr	r2, [pc, #16]	; (800b4e4 <HAL_IncTick+0x24>)
 800b4d2:	6013      	str	r3, [r2, #0]
}
 800b4d4:	bf00      	nop
 800b4d6:	46bd      	mov	sp, r7
 800b4d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4dc:	4770      	bx	lr
 800b4de:	bf00      	nop
 800b4e0:	24000048 	.word	0x24000048
 800b4e4:	2400cef4 	.word	0x2400cef4

0800b4e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800b4e8:	b480      	push	{r7}
 800b4ea:	af00      	add	r7, sp, #0
  return uwTick;
 800b4ec:	4b03      	ldr	r3, [pc, #12]	; (800b4fc <HAL_GetTick+0x14>)
 800b4ee:	681b      	ldr	r3, [r3, #0]
}
 800b4f0:	4618      	mov	r0, r3
 800b4f2:	46bd      	mov	sp, r7
 800b4f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4f8:	4770      	bx	lr
 800b4fa:	bf00      	nop
 800b4fc:	2400cef4 	.word	0x2400cef4

0800b500 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800b500:	b580      	push	{r7, lr}
 800b502:	b084      	sub	sp, #16
 800b504:	af00      	add	r7, sp, #0
 800b506:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800b508:	f7ff ffee 	bl	800b4e8 <HAL_GetTick>
 800b50c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800b512:	68fb      	ldr	r3, [r7, #12]
 800b514:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b518:	d005      	beq.n	800b526 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800b51a:	4b0a      	ldr	r3, [pc, #40]	; (800b544 <HAL_Delay+0x44>)
 800b51c:	781b      	ldrb	r3, [r3, #0]
 800b51e:	461a      	mov	r2, r3
 800b520:	68fb      	ldr	r3, [r7, #12]
 800b522:	4413      	add	r3, r2
 800b524:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800b526:	bf00      	nop
 800b528:	f7ff ffde 	bl	800b4e8 <HAL_GetTick>
 800b52c:	4602      	mov	r2, r0
 800b52e:	68bb      	ldr	r3, [r7, #8]
 800b530:	1ad3      	subs	r3, r2, r3
 800b532:	68fa      	ldr	r2, [r7, #12]
 800b534:	429a      	cmp	r2, r3
 800b536:	d8f7      	bhi.n	800b528 <HAL_Delay+0x28>
  {
  }
}
 800b538:	bf00      	nop
 800b53a:	bf00      	nop
 800b53c:	3710      	adds	r7, #16
 800b53e:	46bd      	mov	sp, r7
 800b540:	bd80      	pop	{r7, pc}
 800b542:	bf00      	nop
 800b544:	24000048 	.word	0x24000048

0800b548 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800b548:	b480      	push	{r7}
 800b54a:	b083      	sub	sp, #12
 800b54c:	af00      	add	r7, sp, #0
 800b54e:	6078      	str	r0, [r7, #4]
 800b550:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	689b      	ldr	r3, [r3, #8]
 800b556:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800b55a:	683b      	ldr	r3, [r7, #0]
 800b55c:	431a      	orrs	r2, r3
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	609a      	str	r2, [r3, #8]
}
 800b562:	bf00      	nop
 800b564:	370c      	adds	r7, #12
 800b566:	46bd      	mov	sp, r7
 800b568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b56c:	4770      	bx	lr

0800b56e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800b56e:	b480      	push	{r7}
 800b570:	b083      	sub	sp, #12
 800b572:	af00      	add	r7, sp, #0
 800b574:	6078      	str	r0, [r7, #4]
 800b576:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	689b      	ldr	r3, [r3, #8]
 800b57c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800b580:	683b      	ldr	r3, [r7, #0]
 800b582:	431a      	orrs	r2, r3
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	609a      	str	r2, [r3, #8]
}
 800b588:	bf00      	nop
 800b58a:	370c      	adds	r7, #12
 800b58c:	46bd      	mov	sp, r7
 800b58e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b592:	4770      	bx	lr

0800b594 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800b594:	b480      	push	{r7}
 800b596:	b083      	sub	sp, #12
 800b598:	af00      	add	r7, sp, #0
 800b59a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	689b      	ldr	r3, [r3, #8]
 800b5a0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800b5a4:	4618      	mov	r0, r3
 800b5a6:	370c      	adds	r7, #12
 800b5a8:	46bd      	mov	sp, r7
 800b5aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ae:	4770      	bx	lr

0800b5b0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800b5b0:	b480      	push	{r7}
 800b5b2:	b087      	sub	sp, #28
 800b5b4:	af00      	add	r7, sp, #0
 800b5b6:	60f8      	str	r0, [r7, #12]
 800b5b8:	60b9      	str	r1, [r7, #8]
 800b5ba:	607a      	str	r2, [r7, #4]
 800b5bc:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800b5be:	68fb      	ldr	r3, [r7, #12]
 800b5c0:	3360      	adds	r3, #96	; 0x60
 800b5c2:	461a      	mov	r2, r3
 800b5c4:	68bb      	ldr	r3, [r7, #8]
 800b5c6:	009b      	lsls	r3, r3, #2
 800b5c8:	4413      	add	r3, r2
 800b5ca:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 800b5cc:	697b      	ldr	r3, [r7, #20]
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 800b5da:	683b      	ldr	r3, [r7, #0]
 800b5dc:	430b      	orrs	r3, r1
 800b5de:	431a      	orrs	r2, r3
 800b5e0:	697b      	ldr	r3, [r7, #20]
 800b5e2:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 800b5e4:	bf00      	nop
 800b5e6:	371c      	adds	r7, #28
 800b5e8:	46bd      	mov	sp, r7
 800b5ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ee:	4770      	bx	lr

0800b5f0 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 800b5f0:	b480      	push	{r7}
 800b5f2:	b085      	sub	sp, #20
 800b5f4:	af00      	add	r7, sp, #0
 800b5f6:	60f8      	str	r0, [r7, #12]
 800b5f8:	60b9      	str	r1, [r7, #8]
 800b5fa:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 800b5fc:	68fb      	ldr	r3, [r7, #12]
 800b5fe:	691b      	ldr	r3, [r3, #16]
 800b600:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 800b604:	68bb      	ldr	r3, [r7, #8]
 800b606:	f003 031f 	and.w	r3, r3, #31
 800b60a:	6879      	ldr	r1, [r7, #4]
 800b60c:	fa01 f303 	lsl.w	r3, r1, r3
 800b610:	431a      	orrs	r2, r3
 800b612:	68fb      	ldr	r3, [r7, #12]
 800b614:	611a      	str	r2, [r3, #16]
}
 800b616:	bf00      	nop
 800b618:	3714      	adds	r7, #20
 800b61a:	46bd      	mov	sp, r7
 800b61c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b620:	4770      	bx	lr

0800b622 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 800b622:	b480      	push	{r7}
 800b624:	b087      	sub	sp, #28
 800b626:	af00      	add	r7, sp, #0
 800b628:	60f8      	str	r0, [r7, #12]
 800b62a:	60b9      	str	r1, [r7, #8]
 800b62c:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800b62e:	68fb      	ldr	r3, [r7, #12]
 800b630:	3360      	adds	r3, #96	; 0x60
 800b632:	461a      	mov	r2, r3
 800b634:	68bb      	ldr	r3, [r7, #8]
 800b636:	009b      	lsls	r3, r3, #2
 800b638:	4413      	add	r3, r2
 800b63a:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 800b63c:	697b      	ldr	r3, [r7, #20]
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	431a      	orrs	r2, r3
 800b648:	697b      	ldr	r3, [r7, #20]
 800b64a:	601a      	str	r2, [r3, #0]
  }
}
 800b64c:	bf00      	nop
 800b64e:	371c      	adds	r7, #28
 800b650:	46bd      	mov	sp, r7
 800b652:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b656:	4770      	bx	lr

0800b658 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800b658:	b480      	push	{r7}
 800b65a:	b083      	sub	sp, #12
 800b65c:	af00      	add	r7, sp, #0
 800b65e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	68db      	ldr	r3, [r3, #12]
 800b664:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800b668:	2b00      	cmp	r3, #0
 800b66a:	d101      	bne.n	800b670 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800b66c:	2301      	movs	r3, #1
 800b66e:	e000      	b.n	800b672 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800b670:	2300      	movs	r3, #0
}
 800b672:	4618      	mov	r0, r3
 800b674:	370c      	adds	r7, #12
 800b676:	46bd      	mov	sp, r7
 800b678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b67c:	4770      	bx	lr

0800b67e <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800b67e:	b480      	push	{r7}
 800b680:	b087      	sub	sp, #28
 800b682:	af00      	add	r7, sp, #0
 800b684:	60f8      	str	r0, [r7, #12]
 800b686:	60b9      	str	r1, [r7, #8]
 800b688:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800b68a:	68fb      	ldr	r3, [r7, #12]
 800b68c:	3330      	adds	r3, #48	; 0x30
 800b68e:	461a      	mov	r2, r3
 800b690:	68bb      	ldr	r3, [r7, #8]
 800b692:	0a1b      	lsrs	r3, r3, #8
 800b694:	009b      	lsls	r3, r3, #2
 800b696:	f003 030c 	and.w	r3, r3, #12
 800b69a:	4413      	add	r3, r2
 800b69c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800b69e:	697b      	ldr	r3, [r7, #20]
 800b6a0:	681a      	ldr	r2, [r3, #0]
 800b6a2:	68bb      	ldr	r3, [r7, #8]
 800b6a4:	f003 031f 	and.w	r3, r3, #31
 800b6a8:	211f      	movs	r1, #31
 800b6aa:	fa01 f303 	lsl.w	r3, r1, r3
 800b6ae:	43db      	mvns	r3, r3
 800b6b0:	401a      	ands	r2, r3
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	0e9b      	lsrs	r3, r3, #26
 800b6b6:	f003 011f 	and.w	r1, r3, #31
 800b6ba:	68bb      	ldr	r3, [r7, #8]
 800b6bc:	f003 031f 	and.w	r3, r3, #31
 800b6c0:	fa01 f303 	lsl.w	r3, r1, r3
 800b6c4:	431a      	orrs	r2, r3
 800b6c6:	697b      	ldr	r3, [r7, #20]
 800b6c8:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800b6ca:	bf00      	nop
 800b6cc:	371c      	adds	r7, #28
 800b6ce:	46bd      	mov	sp, r7
 800b6d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6d4:	4770      	bx	lr

0800b6d6 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800b6d6:	b480      	push	{r7}
 800b6d8:	b083      	sub	sp, #12
 800b6da:	af00      	add	r7, sp, #0
 800b6dc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b6e2:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	d101      	bne.n	800b6ee <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 800b6ea:	2301      	movs	r3, #1
 800b6ec:	e000      	b.n	800b6f0 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 800b6ee:	2300      	movs	r3, #0
}
 800b6f0:	4618      	mov	r0, r3
 800b6f2:	370c      	adds	r7, #12
 800b6f4:	46bd      	mov	sp, r7
 800b6f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6fa:	4770      	bx	lr

0800b6fc <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800b6fc:	b480      	push	{r7}
 800b6fe:	b087      	sub	sp, #28
 800b700:	af00      	add	r7, sp, #0
 800b702:	60f8      	str	r0, [r7, #12]
 800b704:	60b9      	str	r1, [r7, #8]
 800b706:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800b708:	68fb      	ldr	r3, [r7, #12]
 800b70a:	3314      	adds	r3, #20
 800b70c:	461a      	mov	r2, r3
 800b70e:	68bb      	ldr	r3, [r7, #8]
 800b710:	0e5b      	lsrs	r3, r3, #25
 800b712:	009b      	lsls	r3, r3, #2
 800b714:	f003 0304 	and.w	r3, r3, #4
 800b718:	4413      	add	r3, r2
 800b71a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800b71c:	697b      	ldr	r3, [r7, #20]
 800b71e:	681a      	ldr	r2, [r3, #0]
 800b720:	68bb      	ldr	r3, [r7, #8]
 800b722:	0d1b      	lsrs	r3, r3, #20
 800b724:	f003 031f 	and.w	r3, r3, #31
 800b728:	2107      	movs	r1, #7
 800b72a:	fa01 f303 	lsl.w	r3, r1, r3
 800b72e:	43db      	mvns	r3, r3
 800b730:	401a      	ands	r2, r3
 800b732:	68bb      	ldr	r3, [r7, #8]
 800b734:	0d1b      	lsrs	r3, r3, #20
 800b736:	f003 031f 	and.w	r3, r3, #31
 800b73a:	6879      	ldr	r1, [r7, #4]
 800b73c:	fa01 f303 	lsl.w	r3, r1, r3
 800b740:	431a      	orrs	r2, r3
 800b742:	697b      	ldr	r3, [r7, #20]
 800b744:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800b746:	bf00      	nop
 800b748:	371c      	adds	r7, #28
 800b74a:	46bd      	mov	sp, r7
 800b74c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b750:	4770      	bx	lr
	...

0800b754 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800b754:	b480      	push	{r7}
 800b756:	b085      	sub	sp, #20
 800b758:	af00      	add	r7, sp, #0
 800b75a:	60f8      	str	r0, [r7, #12]
 800b75c:	60b9      	str	r1, [r7, #8]
 800b75e:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800b760:	68fb      	ldr	r3, [r7, #12]
 800b762:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800b766:	68bb      	ldr	r3, [r7, #8]
 800b768:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b76c:	43db      	mvns	r3, r3
 800b76e:	401a      	ands	r2, r3
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	f003 0318 	and.w	r3, r3, #24
 800b776:	4908      	ldr	r1, [pc, #32]	; (800b798 <LL_ADC_SetChannelSingleDiff+0x44>)
 800b778:	40d9      	lsrs	r1, r3
 800b77a:	68bb      	ldr	r3, [r7, #8]
 800b77c:	400b      	ands	r3, r1
 800b77e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b782:	431a      	orrs	r2, r3
 800b784:	68fb      	ldr	r3, [r7, #12]
 800b786:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 800b78a:	bf00      	nop
 800b78c:	3714      	adds	r7, #20
 800b78e:	46bd      	mov	sp, r7
 800b790:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b794:	4770      	bx	lr
 800b796:	bf00      	nop
 800b798:	000fffff 	.word	0x000fffff

0800b79c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800b79c:	b480      	push	{r7}
 800b79e:	b083      	sub	sp, #12
 800b7a0:	af00      	add	r7, sp, #0
 800b7a2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	689b      	ldr	r3, [r3, #8]
 800b7a8:	f003 031f 	and.w	r3, r3, #31
}
 800b7ac:	4618      	mov	r0, r3
 800b7ae:	370c      	adds	r7, #12
 800b7b0:	46bd      	mov	sp, r7
 800b7b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7b6:	4770      	bx	lr

0800b7b8 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800b7b8:	b480      	push	{r7}
 800b7ba:	b083      	sub	sp, #12
 800b7bc:	af00      	add	r7, sp, #0
 800b7be:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	689b      	ldr	r3, [r3, #8]
 800b7c4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 800b7c8:	4618      	mov	r0, r3
 800b7ca:	370c      	adds	r7, #12
 800b7cc:	46bd      	mov	sp, r7
 800b7ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7d2:	4770      	bx	lr

0800b7d4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800b7d4:	b480      	push	{r7}
 800b7d6:	b083      	sub	sp, #12
 800b7d8:	af00      	add	r7, sp, #0
 800b7da:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	689a      	ldr	r2, [r3, #8]
 800b7e0:	4b04      	ldr	r3, [pc, #16]	; (800b7f4 <LL_ADC_DisableDeepPowerDown+0x20>)
 800b7e2:	4013      	ands	r3, r2
 800b7e4:	687a      	ldr	r2, [r7, #4]
 800b7e6:	6093      	str	r3, [r2, #8]
}
 800b7e8:	bf00      	nop
 800b7ea:	370c      	adds	r7, #12
 800b7ec:	46bd      	mov	sp, r7
 800b7ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7f2:	4770      	bx	lr
 800b7f4:	5fffffc0 	.word	0x5fffffc0

0800b7f8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 800b7f8:	b480      	push	{r7}
 800b7fa:	b083      	sub	sp, #12
 800b7fc:	af00      	add	r7, sp, #0
 800b7fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	689b      	ldr	r3, [r3, #8]
 800b804:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b808:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b80c:	d101      	bne.n	800b812 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800b80e:	2301      	movs	r3, #1
 800b810:	e000      	b.n	800b814 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800b812:	2300      	movs	r3, #0
}
 800b814:	4618      	mov	r0, r3
 800b816:	370c      	adds	r7, #12
 800b818:	46bd      	mov	sp, r7
 800b81a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b81e:	4770      	bx	lr

0800b820 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800b820:	b480      	push	{r7}
 800b822:	b083      	sub	sp, #12
 800b824:	af00      	add	r7, sp, #0
 800b826:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	689a      	ldr	r2, [r3, #8]
 800b82c:	4b05      	ldr	r3, [pc, #20]	; (800b844 <LL_ADC_EnableInternalRegulator+0x24>)
 800b82e:	4013      	ands	r3, r2
 800b830:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800b838:	bf00      	nop
 800b83a:	370c      	adds	r7, #12
 800b83c:	46bd      	mov	sp, r7
 800b83e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b842:	4770      	bx	lr
 800b844:	6fffffc0 	.word	0x6fffffc0

0800b848 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800b848:	b480      	push	{r7}
 800b84a:	b083      	sub	sp, #12
 800b84c:	af00      	add	r7, sp, #0
 800b84e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	689b      	ldr	r3, [r3, #8]
 800b854:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b858:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b85c:	d101      	bne.n	800b862 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800b85e:	2301      	movs	r3, #1
 800b860:	e000      	b.n	800b864 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800b862:	2300      	movs	r3, #0
}
 800b864:	4618      	mov	r0, r3
 800b866:	370c      	adds	r7, #12
 800b868:	46bd      	mov	sp, r7
 800b86a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b86e:	4770      	bx	lr

0800b870 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800b870:	b480      	push	{r7}
 800b872:	b083      	sub	sp, #12
 800b874:	af00      	add	r7, sp, #0
 800b876:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	689a      	ldr	r2, [r3, #8]
 800b87c:	4b05      	ldr	r3, [pc, #20]	; (800b894 <LL_ADC_Enable+0x24>)
 800b87e:	4013      	ands	r3, r2
 800b880:	f043 0201 	orr.w	r2, r3, #1
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800b888:	bf00      	nop
 800b88a:	370c      	adds	r7, #12
 800b88c:	46bd      	mov	sp, r7
 800b88e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b892:	4770      	bx	lr
 800b894:	7fffffc0 	.word	0x7fffffc0

0800b898 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800b898:	b480      	push	{r7}
 800b89a:	b083      	sub	sp, #12
 800b89c:	af00      	add	r7, sp, #0
 800b89e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	689b      	ldr	r3, [r3, #8]
 800b8a4:	f003 0301 	and.w	r3, r3, #1
 800b8a8:	2b01      	cmp	r3, #1
 800b8aa:	d101      	bne.n	800b8b0 <LL_ADC_IsEnabled+0x18>
 800b8ac:	2301      	movs	r3, #1
 800b8ae:	e000      	b.n	800b8b2 <LL_ADC_IsEnabled+0x1a>
 800b8b0:	2300      	movs	r3, #0
}
 800b8b2:	4618      	mov	r0, r3
 800b8b4:	370c      	adds	r7, #12
 800b8b6:	46bd      	mov	sp, r7
 800b8b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8bc:	4770      	bx	lr
	...

0800b8c0 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800b8c0:	b480      	push	{r7}
 800b8c2:	b083      	sub	sp, #12
 800b8c4:	af00      	add	r7, sp, #0
 800b8c6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	689a      	ldr	r2, [r3, #8]
 800b8cc:	4b05      	ldr	r3, [pc, #20]	; (800b8e4 <LL_ADC_REG_StartConversion+0x24>)
 800b8ce:	4013      	ands	r3, r2
 800b8d0:	f043 0204 	orr.w	r2, r3, #4
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800b8d8:	bf00      	nop
 800b8da:	370c      	adds	r7, #12
 800b8dc:	46bd      	mov	sp, r7
 800b8de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8e2:	4770      	bx	lr
 800b8e4:	7fffffc0 	.word	0x7fffffc0

0800b8e8 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800b8e8:	b480      	push	{r7}
 800b8ea:	b083      	sub	sp, #12
 800b8ec:	af00      	add	r7, sp, #0
 800b8ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	689b      	ldr	r3, [r3, #8]
 800b8f4:	f003 0304 	and.w	r3, r3, #4
 800b8f8:	2b04      	cmp	r3, #4
 800b8fa:	d101      	bne.n	800b900 <LL_ADC_REG_IsConversionOngoing+0x18>
 800b8fc:	2301      	movs	r3, #1
 800b8fe:	e000      	b.n	800b902 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800b900:	2300      	movs	r3, #0
}
 800b902:	4618      	mov	r0, r3
 800b904:	370c      	adds	r7, #12
 800b906:	46bd      	mov	sp, r7
 800b908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b90c:	4770      	bx	lr

0800b90e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800b90e:	b480      	push	{r7}
 800b910:	b083      	sub	sp, #12
 800b912:	af00      	add	r7, sp, #0
 800b914:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	689b      	ldr	r3, [r3, #8]
 800b91a:	f003 0308 	and.w	r3, r3, #8
 800b91e:	2b08      	cmp	r3, #8
 800b920:	d101      	bne.n	800b926 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800b922:	2301      	movs	r3, #1
 800b924:	e000      	b.n	800b928 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800b926:	2300      	movs	r3, #0
}
 800b928:	4618      	mov	r0, r3
 800b92a:	370c      	adds	r7, #12
 800b92c:	46bd      	mov	sp, r7
 800b92e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b932:	4770      	bx	lr

0800b934 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800b934:	b590      	push	{r4, r7, lr}
 800b936:	b089      	sub	sp, #36	; 0x24
 800b938:	af00      	add	r7, sp, #0
 800b93a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800b93c:	2300      	movs	r3, #0
 800b93e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800b940:	2300      	movs	r3, #0
 800b942:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	2b00      	cmp	r3, #0
 800b948:	d101      	bne.n	800b94e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800b94a:	2301      	movs	r3, #1
 800b94c:	e138      	b.n	800bbc0 <HAL_ADC_Init+0x28c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	68db      	ldr	r3, [r3, #12]
 800b952:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b958:	2b00      	cmp	r3, #0
 800b95a:	d109      	bne.n	800b970 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800b95c:	6878      	ldr	r0, [r7, #4]
 800b95e:	f7f7 febb 	bl	80036d8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	2200      	movs	r2, #0
 800b966:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	2200      	movs	r2, #0
 800b96c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	4618      	mov	r0, r3
 800b976:	f7ff ff3f 	bl	800b7f8 <LL_ADC_IsDeepPowerDownEnabled>
 800b97a:	4603      	mov	r3, r0
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	d004      	beq.n	800b98a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	681b      	ldr	r3, [r3, #0]
 800b984:	4618      	mov	r0, r3
 800b986:	f7ff ff25 	bl	800b7d4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	681b      	ldr	r3, [r3, #0]
 800b98e:	4618      	mov	r0, r3
 800b990:	f7ff ff5a 	bl	800b848 <LL_ADC_IsInternalRegulatorEnabled>
 800b994:	4603      	mov	r3, r0
 800b996:	2b00      	cmp	r3, #0
 800b998:	d114      	bne.n	800b9c4 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	681b      	ldr	r3, [r3, #0]
 800b99e:	4618      	mov	r0, r3
 800b9a0:	f7ff ff3e 	bl	800b820 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800b9a4:	4b88      	ldr	r3, [pc, #544]	; (800bbc8 <HAL_ADC_Init+0x294>)
 800b9a6:	681b      	ldr	r3, [r3, #0]
 800b9a8:	099b      	lsrs	r3, r3, #6
 800b9aa:	4a88      	ldr	r2, [pc, #544]	; (800bbcc <HAL_ADC_Init+0x298>)
 800b9ac:	fba2 2303 	umull	r2, r3, r2, r3
 800b9b0:	099b      	lsrs	r3, r3, #6
 800b9b2:	3301      	adds	r3, #1
 800b9b4:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800b9b6:	e002      	b.n	800b9be <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 800b9b8:	68bb      	ldr	r3, [r7, #8]
 800b9ba:	3b01      	subs	r3, #1
 800b9bc:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800b9be:	68bb      	ldr	r3, [r7, #8]
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	d1f9      	bne.n	800b9b8 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	681b      	ldr	r3, [r3, #0]
 800b9c8:	4618      	mov	r0, r3
 800b9ca:	f7ff ff3d 	bl	800b848 <LL_ADC_IsInternalRegulatorEnabled>
 800b9ce:	4603      	mov	r3, r0
 800b9d0:	2b00      	cmp	r3, #0
 800b9d2:	d10d      	bne.n	800b9f0 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b9d8:	f043 0210 	orr.w	r2, r3, #16
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b9e4:	f043 0201 	orr.w	r2, r3, #1
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800b9ec:	2301      	movs	r3, #1
 800b9ee:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	681b      	ldr	r3, [r3, #0]
 800b9f4:	4618      	mov	r0, r3
 800b9f6:	f7ff ff77 	bl	800b8e8 <LL_ADC_REG_IsConversionOngoing>
 800b9fa:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ba00:	f003 0310 	and.w	r3, r3, #16
 800ba04:	2b00      	cmp	r3, #0
 800ba06:	f040 80d2 	bne.w	800bbae <HAL_ADC_Init+0x27a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800ba0a:	697b      	ldr	r3, [r7, #20]
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	f040 80ce 	bne.w	800bbae <HAL_ADC_Init+0x27a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ba16:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800ba1a:	f043 0202 	orr.w	r2, r3, #2
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	681b      	ldr	r3, [r3, #0]
 800ba26:	4618      	mov	r0, r3
 800ba28:	f7ff ff36 	bl	800b898 <LL_ADC_IsEnabled>
 800ba2c:	4603      	mov	r3, r0
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	d110      	bne.n	800ba54 <HAL_ADC_Init+0x120>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800ba32:	4867      	ldr	r0, [pc, #412]	; (800bbd0 <HAL_ADC_Init+0x29c>)
 800ba34:	f7ff ff30 	bl	800b898 <LL_ADC_IsEnabled>
 800ba38:	4604      	mov	r4, r0
 800ba3a:	4866      	ldr	r0, [pc, #408]	; (800bbd4 <HAL_ADC_Init+0x2a0>)
 800ba3c:	f7ff ff2c 	bl	800b898 <LL_ADC_IsEnabled>
 800ba40:	4603      	mov	r3, r0
 800ba42:	4323      	orrs	r3, r4
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	d105      	bne.n	800ba54 <HAL_ADC_Init+0x120>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	685b      	ldr	r3, [r3, #4]
 800ba4c:	4619      	mov	r1, r3
 800ba4e:	4862      	ldr	r0, [pc, #392]	; (800bbd8 <HAL_ADC_Init+0x2a4>)
 800ba50:	f7ff fd7a 	bl	800b548 <LL_ADC_SetCommonClock>
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
#if defined(ADC_VER_V5_3)

    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	7d5b      	ldrb	r3, [r3, #21]
 800ba58:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                    |
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800ba5e:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                 |
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	689b      	ldr	r3, [r3, #8]
                hadc->Init.Overrun                                                    |
 800ba64:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	7f1b      	ldrb	r3, [r3, #28]
 800ba6a:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800ba6c:	4313      	orrs	r3, r2
 800ba6e:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	7f1b      	ldrb	r3, [r3, #28]
 800ba74:	2b01      	cmp	r3, #1
 800ba76:	d106      	bne.n	800ba86 <HAL_ADC_Init+0x152>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	6a1b      	ldr	r3, [r3, #32]
 800ba7c:	3b01      	subs	r3, #1
 800ba7e:	045b      	lsls	r3, r3, #17
 800ba80:	69ba      	ldr	r2, [r7, #24]
 800ba82:	4313      	orrs	r3, r2
 800ba84:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba8a:	2b00      	cmp	r3, #0
 800ba8c:	d009      	beq.n	800baa2 <HAL_ADC_Init+0x16e>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba92:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba9a:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800ba9c:	69ba      	ldr	r2, [r7, #24]
 800ba9e:	4313      	orrs	r3, r2
 800baa0:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	681b      	ldr	r3, [r3, #0]
 800baa6:	68da      	ldr	r2, [r3, #12]
 800baa8:	4b4c      	ldr	r3, [pc, #304]	; (800bbdc <HAL_ADC_Init+0x2a8>)
 800baaa:	4013      	ands	r3, r2
 800baac:	687a      	ldr	r2, [r7, #4]
 800baae:	6812      	ldr	r2, [r2, #0]
 800bab0:	69b9      	ldr	r1, [r7, #24]
 800bab2:	430b      	orrs	r3, r1
 800bab4:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	681b      	ldr	r3, [r3, #0]
 800baba:	4618      	mov	r0, r3
 800babc:	f7ff ff14 	bl	800b8e8 <LL_ADC_REG_IsConversionOngoing>
 800bac0:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	681b      	ldr	r3, [r3, #0]
 800bac6:	4618      	mov	r0, r3
 800bac8:	f7ff ff21 	bl	800b90e <LL_ADC_INJ_IsConversionOngoing>
 800bacc:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800bace:	693b      	ldr	r3, [r7, #16]
 800bad0:	2b00      	cmp	r3, #0
 800bad2:	d14a      	bne.n	800bb6a <HAL_ADC_Init+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800bad4:	68fb      	ldr	r3, [r7, #12]
 800bad6:	2b00      	cmp	r3, #0
 800bad8:	d147      	bne.n	800bb6a <HAL_ADC_Init+0x236>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	7d1b      	ldrb	r3, [r3, #20]
 800bade:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 800bae4:	4313      	orrs	r3, r2
 800bae6:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	681b      	ldr	r3, [r3, #0]
 800baec:	68da      	ldr	r2, [r3, #12]
 800baee:	4b3c      	ldr	r3, [pc, #240]	; (800bbe0 <HAL_ADC_Init+0x2ac>)
 800baf0:	4013      	ands	r3, r2
 800baf2:	687a      	ldr	r2, [r7, #4]
 800baf4:	6812      	ldr	r2, [r2, #0]
 800baf6:	69b9      	ldr	r1, [r7, #24]
 800baf8:	430b      	orrs	r3, r1
 800bafa:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800bb02:	2b01      	cmp	r3, #1
 800bb04:	d11b      	bne.n	800bb3e <HAL_ADC_Init+0x20a>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb0a:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	681b      	ldr	r3, [r3, #0]
 800bb10:	691a      	ldr	r2, [r3, #16]
 800bb12:	4b34      	ldr	r3, [pc, #208]	; (800bbe4 <HAL_ADC_Init+0x2b0>)
 800bb14:	4013      	ands	r3, r2
 800bb16:	687a      	ldr	r2, [r7, #4]
 800bb18:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800bb1a:	3a01      	subs	r2, #1
 800bb1c:	0411      	lsls	r1, r2, #16
 800bb1e:	687a      	ldr	r2, [r7, #4]
 800bb20:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800bb22:	4311      	orrs	r1, r2
 800bb24:	687a      	ldr	r2, [r7, #4]
 800bb26:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800bb28:	4311      	orrs	r1, r2
 800bb2a:	687a      	ldr	r2, [r7, #4]
 800bb2c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800bb2e:	430a      	orrs	r2, r1
 800bb30:	431a      	orrs	r2, r3
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	681b      	ldr	r3, [r3, #0]
 800bb36:	f042 0201 	orr.w	r2, r2, #1
 800bb3a:	611a      	str	r2, [r3, #16]
 800bb3c:	e007      	b.n	800bb4e <HAL_ADC_Init+0x21a>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	681b      	ldr	r3, [r3, #0]
 800bb42:	691a      	ldr	r2, [r3, #16]
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	681b      	ldr	r3, [r3, #0]
 800bb48:	f022 0201 	bic.w	r2, r2, #1
 800bb4c:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	681b      	ldr	r3, [r3, #0]
 800bb52:	691b      	ldr	r3, [r3, #16]
 800bb54:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	681b      	ldr	r3, [r3, #0]
 800bb60:	430a      	orrs	r2, r1
 800bb62:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 800bb64:	6878      	ldr	r0, [r7, #4]
 800bb66:	f000 ff0b 	bl	800c980 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	68db      	ldr	r3, [r3, #12]
 800bb6e:	2b01      	cmp	r3, #1
 800bb70:	d10c      	bne.n	800bb8c <HAL_ADC_Init+0x258>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	681b      	ldr	r3, [r3, #0]
 800bb76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bb78:	f023 010f 	bic.w	r1, r3, #15
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	699b      	ldr	r3, [r3, #24]
 800bb80:	1e5a      	subs	r2, r3, #1
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	681b      	ldr	r3, [r3, #0]
 800bb86:	430a      	orrs	r2, r1
 800bb88:	631a      	str	r2, [r3, #48]	; 0x30
 800bb8a:	e007      	b.n	800bb9c <HAL_ADC_Init+0x268>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	681b      	ldr	r3, [r3, #0]
 800bb90:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	681b      	ldr	r3, [r3, #0]
 800bb96:	f022 020f 	bic.w	r2, r2, #15
 800bb9a:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bba0:	f023 0303 	bic.w	r3, r3, #3
 800bba4:	f043 0201 	orr.w	r2, r3, #1
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	655a      	str	r2, [r3, #84]	; 0x54
 800bbac:	e007      	b.n	800bbbe <HAL_ADC_Init+0x28a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bbb2:	f043 0210 	orr.w	r2, r3, #16
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800bbba:	2301      	movs	r3, #1
 800bbbc:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800bbbe:	7ffb      	ldrb	r3, [r7, #31]
}
 800bbc0:	4618      	mov	r0, r3
 800bbc2:	3724      	adds	r7, #36	; 0x24
 800bbc4:	46bd      	mov	sp, r7
 800bbc6:	bd90      	pop	{r4, r7, pc}
 800bbc8:	2400003c 	.word	0x2400003c
 800bbcc:	053e2d63 	.word	0x053e2d63
 800bbd0:	40022000 	.word	0x40022000
 800bbd4:	40022100 	.word	0x40022100
 800bbd8:	40022300 	.word	0x40022300
 800bbdc:	fff0c003 	.word	0xfff0c003
 800bbe0:	ffffbffc 	.word	0xffffbffc
 800bbe4:	fc00f81e 	.word	0xfc00f81e

0800bbe8 <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 800bbe8:	b580      	push	{r7, lr}
 800bbea:	b086      	sub	sp, #24
 800bbec:	af00      	add	r7, sp, #0
 800bbee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800bbf0:	4892      	ldr	r0, [pc, #584]	; (800be3c <HAL_ADC_Start_IT+0x254>)
 800bbf2:	f7ff fdd3 	bl	800b79c <LL_ADC_GetMultimode>
 800bbf6:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	681b      	ldr	r3, [r3, #0]
 800bbfc:	4618      	mov	r0, r3
 800bbfe:	f7ff fe73 	bl	800b8e8 <LL_ADC_REG_IsConversionOngoing>
 800bc02:	4603      	mov	r3, r0
 800bc04:	2b00      	cmp	r3, #0
 800bc06:	f040 810f 	bne.w	800be28 <HAL_ADC_Start_IT+0x240>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800bc10:	2b01      	cmp	r3, #1
 800bc12:	d101      	bne.n	800bc18 <HAL_ADC_Start_IT+0x30>
 800bc14:	2302      	movs	r3, #2
 800bc16:	e10c      	b.n	800be32 <HAL_ADC_Start_IT+0x24a>
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	2201      	movs	r2, #1
 800bc1c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800bc20:	6878      	ldr	r0, [r7, #4]
 800bc22:	f000 fe31 	bl	800c888 <ADC_Enable>
 800bc26:	4603      	mov	r3, r0
 800bc28:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800bc2a:	7dfb      	ldrb	r3, [r7, #23]
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	f040 80f6 	bne.w	800be1e <HAL_ADC_Start_IT+0x236>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800bc36:	4b82      	ldr	r3, [pc, #520]	; (800be40 <HAL_ADC_Start_IT+0x258>)
 800bc38:	4013      	ands	r3, r2
 800bc3a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	681b      	ldr	r3, [r3, #0]
 800bc46:	4a7f      	ldr	r2, [pc, #508]	; (800be44 <HAL_ADC_Start_IT+0x25c>)
 800bc48:	4293      	cmp	r3, r2
 800bc4a:	d002      	beq.n	800bc52 <HAL_ADC_Start_IT+0x6a>
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	e000      	b.n	800bc54 <HAL_ADC_Start_IT+0x6c>
 800bc52:	4b7d      	ldr	r3, [pc, #500]	; (800be48 <HAL_ADC_Start_IT+0x260>)
 800bc54:	687a      	ldr	r2, [r7, #4]
 800bc56:	6812      	ldr	r2, [r2, #0]
 800bc58:	4293      	cmp	r3, r2
 800bc5a:	d002      	beq.n	800bc62 <HAL_ADC_Start_IT+0x7a>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800bc5c:	693b      	ldr	r3, [r7, #16]
 800bc5e:	2b00      	cmp	r3, #0
 800bc60:	d105      	bne.n	800bc6e <HAL_ADC_Start_IT+0x86>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bc66:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bc72:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800bc76:	2b00      	cmp	r3, #0
 800bc78:	d006      	beq.n	800bc88 <HAL_ADC_Start_IT+0xa0>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bc7e:	f023 0206 	bic.w	r2, r3, #6
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	659a      	str	r2, [r3, #88]	; 0x58
 800bc86:	e002      	b.n	800bc8e <HAL_ADC_Start_IT+0xa6>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	2200      	movs	r2, #0
 800bc8c:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	681b      	ldr	r3, [r3, #0]
 800bc92:	221c      	movs	r2, #28
 800bc94:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	2200      	movs	r2, #0
 800bc9a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	681b      	ldr	r3, [r3, #0]
 800bca2:	685a      	ldr	r2, [r3, #4]
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	681b      	ldr	r3, [r3, #0]
 800bca8:	f022 021c 	bic.w	r2, r2, #28
 800bcac:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	691b      	ldr	r3, [r3, #16]
 800bcb2:	2b08      	cmp	r3, #8
 800bcb4:	d108      	bne.n	800bcc8 <HAL_ADC_Start_IT+0xe0>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	681b      	ldr	r3, [r3, #0]
 800bcba:	685a      	ldr	r2, [r3, #4]
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	681b      	ldr	r3, [r3, #0]
 800bcc0:	f042 0208 	orr.w	r2, r2, #8
 800bcc4:	605a      	str	r2, [r3, #4]
          break;
 800bcc6:	e008      	b.n	800bcda <HAL_ADC_Start_IT+0xf2>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	681b      	ldr	r3, [r3, #0]
 800bccc:	685a      	ldr	r2, [r3, #4]
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	681b      	ldr	r3, [r3, #0]
 800bcd2:	f042 0204 	orr.w	r2, r2, #4
 800bcd6:	605a      	str	r2, [r3, #4]
          break;
 800bcd8:	bf00      	nop

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bcde:	2b00      	cmp	r3, #0
 800bce0:	d107      	bne.n	800bcf2 <HAL_ADC_Start_IT+0x10a>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	681b      	ldr	r3, [r3, #0]
 800bce6:	685a      	ldr	r2, [r3, #4]
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	681b      	ldr	r3, [r3, #0]
 800bcec:	f042 0210 	orr.w	r2, r2, #16
 800bcf0:	605a      	str	r2, [r3, #4]
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	681b      	ldr	r3, [r3, #0]
 800bcf6:	4a53      	ldr	r2, [pc, #332]	; (800be44 <HAL_ADC_Start_IT+0x25c>)
 800bcf8:	4293      	cmp	r3, r2
 800bcfa:	d002      	beq.n	800bd02 <HAL_ADC_Start_IT+0x11a>
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	681b      	ldr	r3, [r3, #0]
 800bd00:	e000      	b.n	800bd04 <HAL_ADC_Start_IT+0x11c>
 800bd02:	4b51      	ldr	r3, [pc, #324]	; (800be48 <HAL_ADC_Start_IT+0x260>)
 800bd04:	687a      	ldr	r2, [r7, #4]
 800bd06:	6812      	ldr	r2, [r2, #0]
 800bd08:	4293      	cmp	r3, r2
 800bd0a:	d008      	beq.n	800bd1e <HAL_ADC_Start_IT+0x136>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800bd0c:	693b      	ldr	r3, [r7, #16]
 800bd0e:	2b00      	cmp	r3, #0
 800bd10:	d005      	beq.n	800bd1e <HAL_ADC_Start_IT+0x136>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800bd12:	693b      	ldr	r3, [r7, #16]
 800bd14:	2b05      	cmp	r3, #5
 800bd16:	d002      	beq.n	800bd1e <HAL_ADC_Start_IT+0x136>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800bd18:	693b      	ldr	r3, [r7, #16]
 800bd1a:	2b09      	cmp	r3, #9
 800bd1c:	d13b      	bne.n	800bd96 <HAL_ADC_Start_IT+0x1ae>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	681b      	ldr	r3, [r3, #0]
 800bd22:	68db      	ldr	r3, [r3, #12]
 800bd24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	d02d      	beq.n	800bd88 <HAL_ADC_Start_IT+0x1a0>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bd30:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800bd34:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	655a      	str	r2, [r3, #84]	; 0x54

          /* Enable as well injected interruptions in case
           HAL_ADCEx_InjectedStart_IT() has not been called beforehand. This
           allows to start regular and injected conversions when JAUTO is
           set with a single call to HAL_ADC_Start_IT() */
          switch (hadc->Init.EOCSelection)
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	691b      	ldr	r3, [r3, #16]
 800bd40:	2b08      	cmp	r3, #8
 800bd42:	d110      	bne.n	800bd66 <HAL_ADC_Start_IT+0x17e>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	681b      	ldr	r3, [r3, #0]
 800bd48:	685a      	ldr	r2, [r3, #4]
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	681b      	ldr	r3, [r3, #0]
 800bd4e:	f022 0220 	bic.w	r2, r2, #32
 800bd52:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	681b      	ldr	r3, [r3, #0]
 800bd58:	685a      	ldr	r2, [r3, #4]
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	681b      	ldr	r3, [r3, #0]
 800bd5e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800bd62:	605a      	str	r2, [r3, #4]
              break;
 800bd64:	e011      	b.n	800bd8a <HAL_ADC_Start_IT+0x1a2>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	681b      	ldr	r3, [r3, #0]
 800bd6a:	685a      	ldr	r2, [r3, #4]
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	681b      	ldr	r3, [r3, #0]
 800bd70:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bd74:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	681b      	ldr	r3, [r3, #0]
 800bd7a:	685a      	ldr	r2, [r3, #4]
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	681b      	ldr	r3, [r3, #0]
 800bd80:	f042 0220 	orr.w	r2, r2, #32
 800bd84:	605a      	str	r2, [r3, #4]
              break;
 800bd86:	e000      	b.n	800bd8a <HAL_ADC_Start_IT+0x1a2>
          }
        }
 800bd88:	bf00      	nop

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	681b      	ldr	r3, [r3, #0]
 800bd8e:	4618      	mov	r0, r3
 800bd90:	f7ff fd96 	bl	800b8c0 <LL_ADC_REG_StartConversion>
 800bd94:	e04c      	b.n	800be30 <HAL_ADC_Start_IT+0x248>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bd9a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, Slave injected interruptions
           are enabled nevertheless (for same reason as above) */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	681b      	ldr	r3, [r3, #0]
 800bda6:	4a27      	ldr	r2, [pc, #156]	; (800be44 <HAL_ADC_Start_IT+0x25c>)
 800bda8:	4293      	cmp	r3, r2
 800bdaa:	d002      	beq.n	800bdb2 <HAL_ADC_Start_IT+0x1ca>
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	681b      	ldr	r3, [r3, #0]
 800bdb0:	e000      	b.n	800bdb4 <HAL_ADC_Start_IT+0x1cc>
 800bdb2:	4b25      	ldr	r3, [pc, #148]	; (800be48 <HAL_ADC_Start_IT+0x260>)
 800bdb4:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800bdb6:	68fb      	ldr	r3, [r7, #12]
 800bdb8:	68db      	ldr	r3, [r3, #12]
 800bdba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	d035      	beq.n	800be2e <HAL_ADC_Start_IT+0x246>
        {
          /* First, update Slave State in setting HAL_ADC_STATE_INJ_BUSY bit
             and in resetting HAL_ADC_STATE_INJ_EOC bit */
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bdc6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800bdca:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	655a      	str	r2, [r3, #84]	; 0x54
          /* Next, set Slave injected interruptions */
          switch (hadc->Init.EOCSelection)
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	691b      	ldr	r3, [r3, #16]
 800bdd6:	2b08      	cmp	r3, #8
 800bdd8:	d110      	bne.n	800bdfc <HAL_ADC_Start_IT+0x214>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	681b      	ldr	r3, [r3, #0]
 800bdde:	685a      	ldr	r2, [r3, #4]
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	681b      	ldr	r3, [r3, #0]
 800bde4:	f022 0220 	bic.w	r2, r2, #32
 800bde8:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	681b      	ldr	r3, [r3, #0]
 800bdee:	685a      	ldr	r2, [r3, #4]
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	681b      	ldr	r3, [r3, #0]
 800bdf4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800bdf8:	605a      	str	r2, [r3, #4]
              break;
 800bdfa:	e019      	b.n	800be30 <HAL_ADC_Start_IT+0x248>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	681b      	ldr	r3, [r3, #0]
 800be00:	685a      	ldr	r2, [r3, #4]
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	681b      	ldr	r3, [r3, #0]
 800be06:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800be0a:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	681b      	ldr	r3, [r3, #0]
 800be10:	685a      	ldr	r2, [r3, #4]
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	681b      	ldr	r3, [r3, #0]
 800be16:	f042 0220 	orr.w	r2, r2, #32
 800be1a:	605a      	str	r2, [r3, #4]
              break;
 800be1c:	e008      	b.n	800be30 <HAL_ADC_Start_IT+0x248>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	2200      	movs	r2, #0
 800be22:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800be26:	e003      	b.n	800be30 <HAL_ADC_Start_IT+0x248>
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800be28:	2302      	movs	r3, #2
 800be2a:	75fb      	strb	r3, [r7, #23]
 800be2c:	e000      	b.n	800be30 <HAL_ADC_Start_IT+0x248>
        }
 800be2e:	bf00      	nop
  }

  /* Return function status */
  return tmp_hal_status;
 800be30:	7dfb      	ldrb	r3, [r7, #23]
}
 800be32:	4618      	mov	r0, r3
 800be34:	3718      	adds	r7, #24
 800be36:	46bd      	mov	sp, r7
 800be38:	bd80      	pop	{r7, pc}
 800be3a:	bf00      	nop
 800be3c:	40022300 	.word	0x40022300
 800be40:	fffff0fe 	.word	0xfffff0fe
 800be44:	40022100 	.word	0x40022100
 800be48:	40022000 	.word	0x40022000

0800be4c <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 800be4c:	b580      	push	{r7, lr}
 800be4e:	b08a      	sub	sp, #40	; 0x28
 800be50:	af00      	add	r7, sp, #0
 800be52:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 800be54:	2300      	movs	r3, #0
 800be56:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	681b      	ldr	r3, [r3, #0]
 800be5c:	681b      	ldr	r3, [r3, #0]
 800be5e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	681b      	ldr	r3, [r3, #0]
 800be64:	685b      	ldr	r3, [r3, #4]
 800be66:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800be68:	4882      	ldr	r0, [pc, #520]	; (800c074 <HAL_ADC_IRQHandler+0x228>)
 800be6a:	f7ff fc97 	bl	800b79c <LL_ADC_GetMultimode>
 800be6e:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 800be70:	69fb      	ldr	r3, [r7, #28]
 800be72:	f003 0302 	and.w	r3, r3, #2
 800be76:	2b00      	cmp	r3, #0
 800be78:	d017      	beq.n	800beaa <HAL_ADC_IRQHandler+0x5e>
 800be7a:	69bb      	ldr	r3, [r7, #24]
 800be7c:	f003 0302 	and.w	r3, r3, #2
 800be80:	2b00      	cmp	r3, #0
 800be82:	d012      	beq.n	800beaa <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800be88:	f003 0310 	and.w	r3, r3, #16
 800be8c:	2b00      	cmp	r3, #0
 800be8e:	d105      	bne.n	800be9c <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800be94:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 800be9c:	6878      	ldr	r0, [r7, #4]
 800be9e:	f000 fe89 	bl	800cbb4 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	681b      	ldr	r3, [r3, #0]
 800bea6:	2202      	movs	r2, #2
 800bea8:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800beaa:	69fb      	ldr	r3, [r7, #28]
 800beac:	f003 0304 	and.w	r3, r3, #4
 800beb0:	2b00      	cmp	r3, #0
 800beb2:	d004      	beq.n	800bebe <HAL_ADC_IRQHandler+0x72>
 800beb4:	69bb      	ldr	r3, [r7, #24]
 800beb6:	f003 0304 	and.w	r3, r3, #4
 800beba:	2b00      	cmp	r3, #0
 800bebc:	d10a      	bne.n	800bed4 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800bebe:	69fb      	ldr	r3, [r7, #28]
 800bec0:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800bec4:	2b00      	cmp	r3, #0
 800bec6:	f000 8083 	beq.w	800bfd0 <HAL_ADC_IRQHandler+0x184>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800beca:	69bb      	ldr	r3, [r7, #24]
 800becc:	f003 0308 	and.w	r3, r3, #8
 800bed0:	2b00      	cmp	r3, #0
 800bed2:	d07d      	beq.n	800bfd0 <HAL_ADC_IRQHandler+0x184>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bed8:	f003 0310 	and.w	r3, r3, #16
 800bedc:	2b00      	cmp	r3, #0
 800bede:	d105      	bne.n	800beec <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bee4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	681b      	ldr	r3, [r3, #0]
 800bef0:	4618      	mov	r0, r3
 800bef2:	f7ff fbb1 	bl	800b658 <LL_ADC_REG_IsTriggerSourceSWStart>
 800bef6:	4603      	mov	r3, r0
 800bef8:	2b00      	cmp	r3, #0
 800befa:	d062      	beq.n	800bfc2 <HAL_ADC_IRQHandler+0x176>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	681b      	ldr	r3, [r3, #0]
 800bf00:	4a5d      	ldr	r2, [pc, #372]	; (800c078 <HAL_ADC_IRQHandler+0x22c>)
 800bf02:	4293      	cmp	r3, r2
 800bf04:	d002      	beq.n	800bf0c <HAL_ADC_IRQHandler+0xc0>
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	681b      	ldr	r3, [r3, #0]
 800bf0a:	e000      	b.n	800bf0e <HAL_ADC_IRQHandler+0xc2>
 800bf0c:	4b5b      	ldr	r3, [pc, #364]	; (800c07c <HAL_ADC_IRQHandler+0x230>)
 800bf0e:	687a      	ldr	r2, [r7, #4]
 800bf10:	6812      	ldr	r2, [r2, #0]
 800bf12:	4293      	cmp	r3, r2
 800bf14:	d008      	beq.n	800bf28 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800bf16:	697b      	ldr	r3, [r7, #20]
 800bf18:	2b00      	cmp	r3, #0
 800bf1a:	d005      	beq.n	800bf28 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800bf1c:	697b      	ldr	r3, [r7, #20]
 800bf1e:	2b05      	cmp	r3, #5
 800bf20:	d002      	beq.n	800bf28 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800bf22:	697b      	ldr	r3, [r7, #20]
 800bf24:	2b09      	cmp	r3, #9
 800bf26:	d104      	bne.n	800bf32 <HAL_ADC_IRQHandler+0xe6>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	681b      	ldr	r3, [r3, #0]
 800bf2c:	68db      	ldr	r3, [r3, #12]
 800bf2e:	623b      	str	r3, [r7, #32]
 800bf30:	e00c      	b.n	800bf4c <HAL_ADC_IRQHandler+0x100>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	681b      	ldr	r3, [r3, #0]
 800bf36:	4a50      	ldr	r2, [pc, #320]	; (800c078 <HAL_ADC_IRQHandler+0x22c>)
 800bf38:	4293      	cmp	r3, r2
 800bf3a:	d002      	beq.n	800bf42 <HAL_ADC_IRQHandler+0xf6>
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	681b      	ldr	r3, [r3, #0]
 800bf40:	e000      	b.n	800bf44 <HAL_ADC_IRQHandler+0xf8>
 800bf42:	4b4e      	ldr	r3, [pc, #312]	; (800c07c <HAL_ADC_IRQHandler+0x230>)
 800bf44:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800bf46:	693b      	ldr	r3, [r7, #16]
 800bf48:	68db      	ldr	r3, [r3, #12]
 800bf4a:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 800bf4c:	6a3b      	ldr	r3, [r7, #32]
 800bf4e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800bf52:	2b00      	cmp	r3, #0
 800bf54:	d135      	bne.n	800bfc2 <HAL_ADC_IRQHandler+0x176>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	681b      	ldr	r3, [r3, #0]
 800bf5a:	681b      	ldr	r3, [r3, #0]
 800bf5c:	f003 0308 	and.w	r3, r3, #8
 800bf60:	2b08      	cmp	r3, #8
 800bf62:	d12e      	bne.n	800bfc2 <HAL_ADC_IRQHandler+0x176>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	681b      	ldr	r3, [r3, #0]
 800bf68:	4618      	mov	r0, r3
 800bf6a:	f7ff fcbd 	bl	800b8e8 <LL_ADC_REG_IsConversionOngoing>
 800bf6e:	4603      	mov	r3, r0
 800bf70:	2b00      	cmp	r3, #0
 800bf72:	d11a      	bne.n	800bfaa <HAL_ADC_IRQHandler+0x15e>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	681b      	ldr	r3, [r3, #0]
 800bf78:	685a      	ldr	r2, [r3, #4]
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	681b      	ldr	r3, [r3, #0]
 800bf7e:	f022 020c 	bic.w	r2, r2, #12
 800bf82:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bf88:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bf94:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800bf98:	2b00      	cmp	r3, #0
 800bf9a:	d112      	bne.n	800bfc2 <HAL_ADC_IRQHandler+0x176>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bfa0:	f043 0201 	orr.w	r2, r3, #1
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	655a      	str	r2, [r3, #84]	; 0x54
 800bfa8:	e00b      	b.n	800bfc2 <HAL_ADC_IRQHandler+0x176>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bfae:	f043 0210 	orr.w	r2, r3, #16
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bfba:	f043 0201 	orr.w	r2, r3, #1
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800bfc2:	6878      	ldr	r0, [r7, #4]
 800bfc4:	f000 f95c 	bl	800c280 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	681b      	ldr	r3, [r3, #0]
 800bfcc:	220c      	movs	r2, #12
 800bfce:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800bfd0:	69fb      	ldr	r3, [r7, #28]
 800bfd2:	f003 0320 	and.w	r3, r3, #32
 800bfd6:	2b00      	cmp	r3, #0
 800bfd8:	d004      	beq.n	800bfe4 <HAL_ADC_IRQHandler+0x198>
 800bfda:	69bb      	ldr	r3, [r7, #24]
 800bfdc:	f003 0320 	and.w	r3, r3, #32
 800bfe0:	2b00      	cmp	r3, #0
 800bfe2:	d10b      	bne.n	800bffc <HAL_ADC_IRQHandler+0x1b0>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800bfe4:	69fb      	ldr	r3, [r7, #28]
 800bfe6:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800bfea:	2b00      	cmp	r3, #0
 800bfec:	f000 809f 	beq.w	800c12e <HAL_ADC_IRQHandler+0x2e2>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800bff0:	69bb      	ldr	r3, [r7, #24]
 800bff2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bff6:	2b00      	cmp	r3, #0
 800bff8:	f000 8099 	beq.w	800c12e <HAL_ADC_IRQHandler+0x2e2>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c000:	f003 0310 	and.w	r3, r3, #16
 800c004:	2b00      	cmp	r3, #0
 800c006:	d105      	bne.n	800c014 <HAL_ADC_IRQHandler+0x1c8>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c00c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	681b      	ldr	r3, [r3, #0]
 800c018:	4618      	mov	r0, r3
 800c01a:	f7ff fb5c 	bl	800b6d6 <LL_ADC_INJ_IsTriggerSourceSWStart>
 800c01e:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	681b      	ldr	r3, [r3, #0]
 800c024:	4618      	mov	r0, r3
 800c026:	f7ff fb17 	bl	800b658 <LL_ADC_REG_IsTriggerSourceSWStart>
 800c02a:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	681b      	ldr	r3, [r3, #0]
 800c030:	4a11      	ldr	r2, [pc, #68]	; (800c078 <HAL_ADC_IRQHandler+0x22c>)
 800c032:	4293      	cmp	r3, r2
 800c034:	d002      	beq.n	800c03c <HAL_ADC_IRQHandler+0x1f0>
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	681b      	ldr	r3, [r3, #0]
 800c03a:	e000      	b.n	800c03e <HAL_ADC_IRQHandler+0x1f2>
 800c03c:	4b0f      	ldr	r3, [pc, #60]	; (800c07c <HAL_ADC_IRQHandler+0x230>)
 800c03e:	687a      	ldr	r2, [r7, #4]
 800c040:	6812      	ldr	r2, [r2, #0]
 800c042:	4293      	cmp	r3, r2
 800c044:	d008      	beq.n	800c058 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800c046:	697b      	ldr	r3, [r7, #20]
 800c048:	2b00      	cmp	r3, #0
 800c04a:	d005      	beq.n	800c058 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 800c04c:	697b      	ldr	r3, [r7, #20]
 800c04e:	2b06      	cmp	r3, #6
 800c050:	d002      	beq.n	800c058 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 800c052:	697b      	ldr	r3, [r7, #20]
 800c054:	2b07      	cmp	r3, #7
 800c056:	d104      	bne.n	800c062 <HAL_ADC_IRQHandler+0x216>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	681b      	ldr	r3, [r3, #0]
 800c05c:	68db      	ldr	r3, [r3, #12]
 800c05e:	623b      	str	r3, [r7, #32]
 800c060:	e013      	b.n	800c08a <HAL_ADC_IRQHandler+0x23e>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	681b      	ldr	r3, [r3, #0]
 800c066:	4a04      	ldr	r2, [pc, #16]	; (800c078 <HAL_ADC_IRQHandler+0x22c>)
 800c068:	4293      	cmp	r3, r2
 800c06a:	d009      	beq.n	800c080 <HAL_ADC_IRQHandler+0x234>
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	681b      	ldr	r3, [r3, #0]
 800c070:	e007      	b.n	800c082 <HAL_ADC_IRQHandler+0x236>
 800c072:	bf00      	nop
 800c074:	40022300 	.word	0x40022300
 800c078:	40022100 	.word	0x40022100
 800c07c:	40022000 	.word	0x40022000
 800c080:	4b7d      	ldr	r3, [pc, #500]	; (800c278 <HAL_ADC_IRQHandler+0x42c>)
 800c082:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800c084:	693b      	ldr	r3, [r7, #16]
 800c086:	68db      	ldr	r3, [r3, #12]
 800c088:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if ((tmp_adc_inj_is_trigger_source_sw_start != 0UL)            ||
 800c08a:	68fb      	ldr	r3, [r7, #12]
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	d10c      	bne.n	800c0aa <HAL_ADC_IRQHandler+0x25e>
        ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL)      &&
 800c090:	6a3b      	ldr	r3, [r7, #32]
 800c092:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    if ((tmp_adc_inj_is_trigger_source_sw_start != 0UL)            ||
 800c096:	2b00      	cmp	r3, #0
 800c098:	d142      	bne.n	800c120 <HAL_ADC_IRQHandler+0x2d4>
        ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL)      &&
 800c09a:	68bb      	ldr	r3, [r7, #8]
 800c09c:	2b00      	cmp	r3, #0
 800c09e:	d03f      	beq.n	800c120 <HAL_ADC_IRQHandler+0x2d4>
         ((tmp_adc_reg_is_trigger_source_sw_start != 0UL)  &&
          (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL))))
 800c0a0:	6a3b      	ldr	r3, [r7, #32]
 800c0a2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
         ((tmp_adc_reg_is_trigger_source_sw_start != 0UL)  &&
 800c0a6:	2b00      	cmp	r3, #0
 800c0a8:	d13a      	bne.n	800c120 <HAL_ADC_IRQHandler+0x2d4>
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	681b      	ldr	r3, [r3, #0]
 800c0ae:	681b      	ldr	r3, [r3, #0]
 800c0b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c0b4:	2b40      	cmp	r3, #64	; 0x40
 800c0b6:	d133      	bne.n	800c120 <HAL_ADC_IRQHandler+0x2d4>
        /* when the last context has been fully processed, JSQR is reset      */
        /* by the hardware. Even if no injected conversion is planned to come */
        /* (queue empty, triggers are ignored), it can start again            */
        /* immediately after setting a new context (JADSTART is still set).   */
        /* Therefore, state of HAL ADC injected group is kept to busy.        */
        if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 800c0b8:	6a3b      	ldr	r3, [r7, #32]
 800c0ba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c0be:	2b00      	cmp	r3, #0
 800c0c0:	d12e      	bne.n	800c120 <HAL_ADC_IRQHandler+0x2d4>
        {
          /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
          /* JADSTART==0 (no conversion on going)                             */
          if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	681b      	ldr	r3, [r3, #0]
 800c0c6:	4618      	mov	r0, r3
 800c0c8:	f7ff fc21 	bl	800b90e <LL_ADC_INJ_IsConversionOngoing>
 800c0cc:	4603      	mov	r3, r0
 800c0ce:	2b00      	cmp	r3, #0
 800c0d0:	d11a      	bne.n	800c108 <HAL_ADC_IRQHandler+0x2bc>
          {
            /* Disable ADC end of sequence conversion interrupt  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	681b      	ldr	r3, [r3, #0]
 800c0d6:	685a      	ldr	r2, [r3, #4]
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	681b      	ldr	r3, [r3, #0]
 800c0dc:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800c0e0:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c0e6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c0f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	d112      	bne.n	800c120 <HAL_ADC_IRQHandler+0x2d4>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c0fe:	f043 0201 	orr.w	r2, r3, #1
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	655a      	str	r2, [r3, #84]	; 0x54
 800c106:	e00b      	b.n	800c120 <HAL_ADC_IRQHandler+0x2d4>
            }
          }
          else
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c10c:	f043 0210 	orr.w	r2, r3, #16
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c118:	f043 0201 	orr.w	r2, r3, #1
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800c120:	6878      	ldr	r0, [r7, #4]
 800c122:	f000 fd1f 	bl	800cb64 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	681b      	ldr	r3, [r3, #0]
 800c12a:	2260      	movs	r2, #96	; 0x60
 800c12c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 800c12e:	69fb      	ldr	r3, [r7, #28]
 800c130:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c134:	2b00      	cmp	r3, #0
 800c136:	d011      	beq.n	800c15c <HAL_ADC_IRQHandler+0x310>
 800c138:	69bb      	ldr	r3, [r7, #24]
 800c13a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c13e:	2b00      	cmp	r3, #0
 800c140:	d00c      	beq.n	800c15c <HAL_ADC_IRQHandler+0x310>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c146:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 800c14e:	6878      	ldr	r0, [r7, #4]
 800c150:	f000 f8a0 	bl	800c294 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	681b      	ldr	r3, [r3, #0]
 800c158:	2280      	movs	r2, #128	; 0x80
 800c15a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 800c15c:	69fb      	ldr	r3, [r7, #28]
 800c15e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c162:	2b00      	cmp	r3, #0
 800c164:	d012      	beq.n	800c18c <HAL_ADC_IRQHandler+0x340>
 800c166:	69bb      	ldr	r3, [r7, #24]
 800c168:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c16c:	2b00      	cmp	r3, #0
 800c16e:	d00d      	beq.n	800c18c <HAL_ADC_IRQHandler+0x340>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c174:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 800c17c:	6878      	ldr	r0, [r7, #4]
 800c17e:	f000 fd05 	bl	800cb8c <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	681b      	ldr	r3, [r3, #0]
 800c186:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c18a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 800c18c:	69fb      	ldr	r3, [r7, #28]
 800c18e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c192:	2b00      	cmp	r3, #0
 800c194:	d012      	beq.n	800c1bc <HAL_ADC_IRQHandler+0x370>
 800c196:	69bb      	ldr	r3, [r7, #24]
 800c198:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c19c:	2b00      	cmp	r3, #0
 800c19e:	d00d      	beq.n	800c1bc <HAL_ADC_IRQHandler+0x370>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c1a4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 800c1ac:	6878      	ldr	r0, [r7, #4]
 800c1ae:	f000 fcf7 	bl	800cba0 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	681b      	ldr	r3, [r3, #0]
 800c1b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c1ba:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 800c1bc:	69fb      	ldr	r3, [r7, #28]
 800c1be:	f003 0310 	and.w	r3, r3, #16
 800c1c2:	2b00      	cmp	r3, #0
 800c1c4:	d036      	beq.n	800c234 <HAL_ADC_IRQHandler+0x3e8>
 800c1c6:	69bb      	ldr	r3, [r7, #24]
 800c1c8:	f003 0310 	and.w	r3, r3, #16
 800c1cc:	2b00      	cmp	r3, #0
 800c1ce:	d031      	beq.n	800c234 <HAL_ADC_IRQHandler+0x3e8>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	d102      	bne.n	800c1de <HAL_ADC_IRQHandler+0x392>
    {
      overrun_error = 1UL;
 800c1d8:	2301      	movs	r3, #1
 800c1da:	627b      	str	r3, [r7, #36]	; 0x24
 800c1dc:	e014      	b.n	800c208 <HAL_ADC_IRQHandler+0x3bc>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 800c1de:	697b      	ldr	r3, [r7, #20]
 800c1e0:	2b00      	cmp	r3, #0
 800c1e2:	d008      	beq.n	800c1f6 <HAL_ADC_IRQHandler+0x3aa>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800c1e4:	4825      	ldr	r0, [pc, #148]	; (800c27c <HAL_ADC_IRQHandler+0x430>)
 800c1e6:	f7ff fae7 	bl	800b7b8 <LL_ADC_GetMultiDMATransfer>
 800c1ea:	4603      	mov	r3, r0
 800c1ec:	2b00      	cmp	r3, #0
 800c1ee:	d00b      	beq.n	800c208 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 800c1f0:	2301      	movs	r3, #1
 800c1f2:	627b      	str	r3, [r7, #36]	; 0x24
 800c1f4:	e008      	b.n	800c208 <HAL_ADC_IRQHandler+0x3bc>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	681b      	ldr	r3, [r3, #0]
 800c1fa:	68db      	ldr	r3, [r3, #12]
 800c1fc:	f003 0303 	and.w	r3, r3, #3
 800c200:	2b00      	cmp	r3, #0
 800c202:	d001      	beq.n	800c208 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 800c204:	2301      	movs	r3, #1
 800c206:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 800c208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c20a:	2b01      	cmp	r3, #1
 800c20c:	d10e      	bne.n	800c22c <HAL_ADC_IRQHandler+0x3e0>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c212:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c21e:	f043 0202 	orr.w	r2, r3, #2
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800c226:	6878      	ldr	r0, [r7, #4]
 800c228:	f000 f83e 	bl	800c2a8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	681b      	ldr	r3, [r3, #0]
 800c230:	2210      	movs	r2, #16
 800c232:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 800c234:	69fb      	ldr	r3, [r7, #28]
 800c236:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c23a:	2b00      	cmp	r3, #0
 800c23c:	d018      	beq.n	800c270 <HAL_ADC_IRQHandler+0x424>
 800c23e:	69bb      	ldr	r3, [r7, #24]
 800c240:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c244:	2b00      	cmp	r3, #0
 800c246:	d013      	beq.n	800c270 <HAL_ADC_IRQHandler+0x424>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c24c:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c258:	f043 0208 	orr.w	r2, r3, #8
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	681b      	ldr	r3, [r3, #0]
 800c264:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800c268:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 800c26a:	6878      	ldr	r0, [r7, #4]
 800c26c:	f000 fc84 	bl	800cb78 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 800c270:	bf00      	nop
 800c272:	3728      	adds	r7, #40	; 0x28
 800c274:	46bd      	mov	sp, r7
 800c276:	bd80      	pop	{r7, pc}
 800c278:	40022000 	.word	0x40022000
 800c27c:	40022300 	.word	0x40022300

0800c280 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800c280:	b480      	push	{r7}
 800c282:	b083      	sub	sp, #12
 800c284:	af00      	add	r7, sp, #0
 800c286:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800c288:	bf00      	nop
 800c28a:	370c      	adds	r7, #12
 800c28c:	46bd      	mov	sp, r7
 800c28e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c292:	4770      	bx	lr

0800c294 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 800c294:	b480      	push	{r7}
 800c296:	b083      	sub	sp, #12
 800c298:	af00      	add	r7, sp, #0
 800c29a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 800c29c:	bf00      	nop
 800c29e:	370c      	adds	r7, #12
 800c2a0:	46bd      	mov	sp, r7
 800c2a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2a6:	4770      	bx	lr

0800c2a8 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800c2a8:	b480      	push	{r7}
 800c2aa:	b083      	sub	sp, #12
 800c2ac:	af00      	add	r7, sp, #0
 800c2ae:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800c2b0:	bf00      	nop
 800c2b2:	370c      	adds	r7, #12
 800c2b4:	46bd      	mov	sp, r7
 800c2b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2ba:	4770      	bx	lr

0800c2bc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800c2bc:	b590      	push	{r4, r7, lr}
 800c2be:	b0a1      	sub	sp, #132	; 0x84
 800c2c0:	af00      	add	r7, sp, #0
 800c2c2:	6078      	str	r0, [r7, #4]
 800c2c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800c2c6:	2300      	movs	r3, #0
 800c2c8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 800c2cc:	2300      	movs	r3, #0
 800c2ce:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800c2d0:	683b      	ldr	r3, [r7, #0]
 800c2d2:	68db      	ldr	r3, [r3, #12]
 800c2d4:	4a9a      	ldr	r2, [pc, #616]	; (800c540 <HAL_ADC_ConfigChannel+0x284>)
 800c2d6:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800c2de:	2b01      	cmp	r3, #1
 800c2e0:	d101      	bne.n	800c2e6 <HAL_ADC_ConfigChannel+0x2a>
 800c2e2:	2302      	movs	r3, #2
 800c2e4:	e2bc      	b.n	800c860 <HAL_ADC_ConfigChannel+0x5a4>
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	2201      	movs	r2, #1
 800c2ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	681b      	ldr	r3, [r3, #0]
 800c2f2:	4618      	mov	r0, r3
 800c2f4:	f7ff faf8 	bl	800b8e8 <LL_ADC_REG_IsConversionOngoing>
 800c2f8:	4603      	mov	r3, r0
 800c2fa:	2b00      	cmp	r3, #0
 800c2fc:	f040 82a1 	bne.w	800c842 <HAL_ADC_ConfigChannel+0x586>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 800c300:	683b      	ldr	r3, [r7, #0]
 800c302:	681b      	ldr	r3, [r3, #0]
 800c304:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c308:	2b00      	cmp	r3, #0
 800c30a:	d108      	bne.n	800c31e <HAL_ADC_ConfigChannel+0x62>
 800c30c:	683b      	ldr	r3, [r7, #0]
 800c30e:	681b      	ldr	r3, [r3, #0]
 800c310:	0e9b      	lsrs	r3, r3, #26
 800c312:	f003 031f 	and.w	r3, r3, #31
 800c316:	2201      	movs	r2, #1
 800c318:	fa02 f303 	lsl.w	r3, r2, r3
 800c31c:	e016      	b.n	800c34c <HAL_ADC_ConfigChannel+0x90>
 800c31e:	683b      	ldr	r3, [r7, #0]
 800c320:	681b      	ldr	r3, [r3, #0]
 800c322:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c324:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c326:	fa93 f3a3 	rbit	r3, r3
 800c32a:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 800c32c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c32e:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 800c330:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c332:	2b00      	cmp	r3, #0
 800c334:	d101      	bne.n	800c33a <HAL_ADC_ConfigChannel+0x7e>
    return 32U;
 800c336:	2320      	movs	r3, #32
 800c338:	e003      	b.n	800c342 <HAL_ADC_ConfigChannel+0x86>
  return __builtin_clz(value);
 800c33a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c33c:	fab3 f383 	clz	r3, r3
 800c340:	b2db      	uxtb	r3, r3
 800c342:	f003 031f 	and.w	r3, r3, #31
 800c346:	2201      	movs	r2, #1
 800c348:	fa02 f303 	lsl.w	r3, r2, r3
 800c34c:	687a      	ldr	r2, [r7, #4]
 800c34e:	6812      	ldr	r2, [r2, #0]
 800c350:	69d1      	ldr	r1, [r2, #28]
 800c352:	687a      	ldr	r2, [r7, #4]
 800c354:	6812      	ldr	r2, [r2, #0]
 800c356:	430b      	orrs	r3, r1
 800c358:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	6818      	ldr	r0, [r3, #0]
 800c35e:	683b      	ldr	r3, [r7, #0]
 800c360:	6859      	ldr	r1, [r3, #4]
 800c362:	683b      	ldr	r3, [r7, #0]
 800c364:	681b      	ldr	r3, [r3, #0]
 800c366:	461a      	mov	r2, r3
 800c368:	f7ff f989 	bl	800b67e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	681b      	ldr	r3, [r3, #0]
 800c370:	4618      	mov	r0, r3
 800c372:	f7ff fab9 	bl	800b8e8 <LL_ADC_REG_IsConversionOngoing>
 800c376:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	681b      	ldr	r3, [r3, #0]
 800c37c:	4618      	mov	r0, r3
 800c37e:	f7ff fac6 	bl	800b90e <LL_ADC_INJ_IsConversionOngoing>
 800c382:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800c384:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c386:	2b00      	cmp	r3, #0
 800c388:	f040 80a0 	bne.w	800c4cc <HAL_ADC_ConfigChannel+0x210>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800c38c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c38e:	2b00      	cmp	r3, #0
 800c390:	f040 809c 	bne.w	800c4cc <HAL_ADC_ConfigChannel+0x210>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	6818      	ldr	r0, [r3, #0]
 800c398:	683b      	ldr	r3, [r7, #0]
 800c39a:	6819      	ldr	r1, [r3, #0]
 800c39c:	683b      	ldr	r3, [r7, #0]
 800c39e:	689b      	ldr	r3, [r3, #8]
 800c3a0:	461a      	mov	r2, r3
 800c3a2:	f7ff f9ab 	bl	800b6fc <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	681b      	ldr	r3, [r3, #0]
 800c3aa:	68db      	ldr	r3, [r3, #12]
 800c3ac:	f003 0310 	and.w	r3, r3, #16
 800c3b0:	2b00      	cmp	r3, #0
 800c3b2:	d10b      	bne.n	800c3cc <HAL_ADC_ConfigChannel+0x110>
 800c3b4:	683b      	ldr	r3, [r7, #0]
 800c3b6:	695a      	ldr	r2, [r3, #20]
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	681b      	ldr	r3, [r3, #0]
 800c3bc:	68db      	ldr	r3, [r3, #12]
 800c3be:	089b      	lsrs	r3, r3, #2
 800c3c0:	f003 0307 	and.w	r3, r3, #7
 800c3c4:	005b      	lsls	r3, r3, #1
 800c3c6:	fa02 f303 	lsl.w	r3, r2, r3
 800c3ca:	e00a      	b.n	800c3e2 <HAL_ADC_ConfigChannel+0x126>
 800c3cc:	683b      	ldr	r3, [r7, #0]
 800c3ce:	695a      	ldr	r2, [r3, #20]
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	681b      	ldr	r3, [r3, #0]
 800c3d4:	68db      	ldr	r3, [r3, #12]
 800c3d6:	089b      	lsrs	r3, r3, #2
 800c3d8:	f003 0304 	and.w	r3, r3, #4
 800c3dc:	005b      	lsls	r3, r3, #1
 800c3de:	fa02 f303 	lsl.w	r3, r2, r3
 800c3e2:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800c3e4:	683b      	ldr	r3, [r7, #0]
 800c3e6:	691b      	ldr	r3, [r3, #16]
 800c3e8:	2b04      	cmp	r3, #4
 800c3ea:	d027      	beq.n	800c43c <HAL_ADC_ConfigChannel+0x180>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	6818      	ldr	r0, [r3, #0]
 800c3f0:	683b      	ldr	r3, [r7, #0]
 800c3f2:	6919      	ldr	r1, [r3, #16]
 800c3f4:	683b      	ldr	r3, [r7, #0]
 800c3f6:	681a      	ldr	r2, [r3, #0]
 800c3f8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c3fa:	f7ff f8d9 	bl	800b5b0 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	6818      	ldr	r0, [r3, #0]
 800c402:	683b      	ldr	r3, [r7, #0]
 800c404:	6919      	ldr	r1, [r3, #16]
 800c406:	683b      	ldr	r3, [r7, #0]
 800c408:	7e5b      	ldrb	r3, [r3, #25]
 800c40a:	2b01      	cmp	r3, #1
 800c40c:	d102      	bne.n	800c414 <HAL_ADC_ConfigChannel+0x158>
 800c40e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c412:	e000      	b.n	800c416 <HAL_ADC_ConfigChannel+0x15a>
 800c414:	2300      	movs	r3, #0
 800c416:	461a      	mov	r2, r3
 800c418:	f7ff f903 	bl	800b622 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	6818      	ldr	r0, [r3, #0]
 800c420:	683b      	ldr	r3, [r7, #0]
 800c422:	6919      	ldr	r1, [r3, #16]
 800c424:	683b      	ldr	r3, [r7, #0]
 800c426:	7e1b      	ldrb	r3, [r3, #24]
 800c428:	2b01      	cmp	r3, #1
 800c42a:	d102      	bne.n	800c432 <HAL_ADC_ConfigChannel+0x176>
 800c42c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c430:	e000      	b.n	800c434 <HAL_ADC_ConfigChannel+0x178>
 800c432:	2300      	movs	r3, #0
 800c434:	461a      	mov	r2, r3
 800c436:	f7ff f8db 	bl	800b5f0 <LL_ADC_SetDataRightShift>
 800c43a:	e047      	b.n	800c4cc <HAL_ADC_ConfigChannel+0x210>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	681b      	ldr	r3, [r3, #0]
 800c440:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c442:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800c446:	683b      	ldr	r3, [r7, #0]
 800c448:	681b      	ldr	r3, [r3, #0]
 800c44a:	069b      	lsls	r3, r3, #26
 800c44c:	429a      	cmp	r2, r3
 800c44e:	d107      	bne.n	800c460 <HAL_ADC_ConfigChannel+0x1a4>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	681b      	ldr	r3, [r3, #0]
 800c454:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	681b      	ldr	r3, [r3, #0]
 800c45a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800c45e:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	681b      	ldr	r3, [r3, #0]
 800c464:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c466:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800c46a:	683b      	ldr	r3, [r7, #0]
 800c46c:	681b      	ldr	r3, [r3, #0]
 800c46e:	069b      	lsls	r3, r3, #26
 800c470:	429a      	cmp	r2, r3
 800c472:	d107      	bne.n	800c484 <HAL_ADC_ConfigChannel+0x1c8>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	681b      	ldr	r3, [r3, #0]
 800c478:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	681b      	ldr	r3, [r3, #0]
 800c47e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800c482:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	681b      	ldr	r3, [r3, #0]
 800c488:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c48a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800c48e:	683b      	ldr	r3, [r7, #0]
 800c490:	681b      	ldr	r3, [r3, #0]
 800c492:	069b      	lsls	r3, r3, #26
 800c494:	429a      	cmp	r2, r3
 800c496:	d107      	bne.n	800c4a8 <HAL_ADC_ConfigChannel+0x1ec>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	681b      	ldr	r3, [r3, #0]
 800c49c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	681b      	ldr	r3, [r3, #0]
 800c4a2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800c4a6:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	681b      	ldr	r3, [r3, #0]
 800c4ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c4ae:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800c4b2:	683b      	ldr	r3, [r7, #0]
 800c4b4:	681b      	ldr	r3, [r3, #0]
 800c4b6:	069b      	lsls	r3, r3, #26
 800c4b8:	429a      	cmp	r2, r3
 800c4ba:	d107      	bne.n	800c4cc <HAL_ADC_ConfigChannel+0x210>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	681b      	ldr	r3, [r3, #0]
 800c4c0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	681b      	ldr	r3, [r3, #0]
 800c4c6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800c4ca:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	681b      	ldr	r3, [r3, #0]
 800c4d0:	4618      	mov	r0, r3
 800c4d2:	f7ff f9e1 	bl	800b898 <LL_ADC_IsEnabled>
 800c4d6:	4603      	mov	r3, r0
 800c4d8:	2b00      	cmp	r3, #0
 800c4da:	f040 81bb 	bne.w	800c854 <HAL_ADC_ConfigChannel+0x598>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	6818      	ldr	r0, [r3, #0]
 800c4e2:	683b      	ldr	r3, [r7, #0]
 800c4e4:	6819      	ldr	r1, [r3, #0]
 800c4e6:	683b      	ldr	r3, [r7, #0]
 800c4e8:	68db      	ldr	r3, [r3, #12]
 800c4ea:	461a      	mov	r2, r3
 800c4ec:	f7ff f932 	bl	800b754 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800c4f0:	683b      	ldr	r3, [r7, #0]
 800c4f2:	68db      	ldr	r3, [r3, #12]
 800c4f4:	4a12      	ldr	r2, [pc, #72]	; (800c540 <HAL_ADC_ConfigChannel+0x284>)
 800c4f6:	4293      	cmp	r3, r2
 800c4f8:	f040 8130 	bne.w	800c75c <HAL_ADC_ConfigChannel+0x4a0>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800c500:	683b      	ldr	r3, [r7, #0]
 800c502:	681b      	ldr	r3, [r3, #0]
 800c504:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c508:	2b00      	cmp	r3, #0
 800c50a:	d10b      	bne.n	800c524 <HAL_ADC_ConfigChannel+0x268>
 800c50c:	683b      	ldr	r3, [r7, #0]
 800c50e:	681b      	ldr	r3, [r3, #0]
 800c510:	0e9b      	lsrs	r3, r3, #26
 800c512:	3301      	adds	r3, #1
 800c514:	f003 031f 	and.w	r3, r3, #31
 800c518:	2b09      	cmp	r3, #9
 800c51a:	bf94      	ite	ls
 800c51c:	2301      	movls	r3, #1
 800c51e:	2300      	movhi	r3, #0
 800c520:	b2db      	uxtb	r3, r3
 800c522:	e01b      	b.n	800c55c <HAL_ADC_ConfigChannel+0x2a0>
 800c524:	683b      	ldr	r3, [r7, #0]
 800c526:	681b      	ldr	r3, [r3, #0]
 800c528:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c52a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c52c:	fa93 f3a3 	rbit	r3, r3
 800c530:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 800c532:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c534:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 800c536:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c538:	2b00      	cmp	r3, #0
 800c53a:	d103      	bne.n	800c544 <HAL_ADC_ConfigChannel+0x288>
    return 32U;
 800c53c:	2320      	movs	r3, #32
 800c53e:	e005      	b.n	800c54c <HAL_ADC_ConfigChannel+0x290>
 800c540:	47ff0000 	.word	0x47ff0000
  return __builtin_clz(value);
 800c544:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c546:	fab3 f383 	clz	r3, r3
 800c54a:	b2db      	uxtb	r3, r3
 800c54c:	3301      	adds	r3, #1
 800c54e:	f003 031f 	and.w	r3, r3, #31
 800c552:	2b09      	cmp	r3, #9
 800c554:	bf94      	ite	ls
 800c556:	2301      	movls	r3, #1
 800c558:	2300      	movhi	r3, #0
 800c55a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800c55c:	2b00      	cmp	r3, #0
 800c55e:	d079      	beq.n	800c654 <HAL_ADC_ConfigChannel+0x398>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800c560:	683b      	ldr	r3, [r7, #0]
 800c562:	681b      	ldr	r3, [r3, #0]
 800c564:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c568:	2b00      	cmp	r3, #0
 800c56a:	d107      	bne.n	800c57c <HAL_ADC_ConfigChannel+0x2c0>
 800c56c:	683b      	ldr	r3, [r7, #0]
 800c56e:	681b      	ldr	r3, [r3, #0]
 800c570:	0e9b      	lsrs	r3, r3, #26
 800c572:	3301      	adds	r3, #1
 800c574:	069b      	lsls	r3, r3, #26
 800c576:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800c57a:	e015      	b.n	800c5a8 <HAL_ADC_ConfigChannel+0x2ec>
 800c57c:	683b      	ldr	r3, [r7, #0]
 800c57e:	681b      	ldr	r3, [r3, #0]
 800c580:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c582:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c584:	fa93 f3a3 	rbit	r3, r3
 800c588:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 800c58a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c58c:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 800c58e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c590:	2b00      	cmp	r3, #0
 800c592:	d101      	bne.n	800c598 <HAL_ADC_ConfigChannel+0x2dc>
    return 32U;
 800c594:	2320      	movs	r3, #32
 800c596:	e003      	b.n	800c5a0 <HAL_ADC_ConfigChannel+0x2e4>
  return __builtin_clz(value);
 800c598:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c59a:	fab3 f383 	clz	r3, r3
 800c59e:	b2db      	uxtb	r3, r3
 800c5a0:	3301      	adds	r3, #1
 800c5a2:	069b      	lsls	r3, r3, #26
 800c5a4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800c5a8:	683b      	ldr	r3, [r7, #0]
 800c5aa:	681b      	ldr	r3, [r3, #0]
 800c5ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c5b0:	2b00      	cmp	r3, #0
 800c5b2:	d109      	bne.n	800c5c8 <HAL_ADC_ConfigChannel+0x30c>
 800c5b4:	683b      	ldr	r3, [r7, #0]
 800c5b6:	681b      	ldr	r3, [r3, #0]
 800c5b8:	0e9b      	lsrs	r3, r3, #26
 800c5ba:	3301      	adds	r3, #1
 800c5bc:	f003 031f 	and.w	r3, r3, #31
 800c5c0:	2101      	movs	r1, #1
 800c5c2:	fa01 f303 	lsl.w	r3, r1, r3
 800c5c6:	e017      	b.n	800c5f8 <HAL_ADC_ConfigChannel+0x33c>
 800c5c8:	683b      	ldr	r3, [r7, #0]
 800c5ca:	681b      	ldr	r3, [r3, #0]
 800c5cc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c5ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c5d0:	fa93 f3a3 	rbit	r3, r3
 800c5d4:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 800c5d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c5d8:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 800c5da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c5dc:	2b00      	cmp	r3, #0
 800c5de:	d101      	bne.n	800c5e4 <HAL_ADC_ConfigChannel+0x328>
    return 32U;
 800c5e0:	2320      	movs	r3, #32
 800c5e2:	e003      	b.n	800c5ec <HAL_ADC_ConfigChannel+0x330>
  return __builtin_clz(value);
 800c5e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c5e6:	fab3 f383 	clz	r3, r3
 800c5ea:	b2db      	uxtb	r3, r3
 800c5ec:	3301      	adds	r3, #1
 800c5ee:	f003 031f 	and.w	r3, r3, #31
 800c5f2:	2101      	movs	r1, #1
 800c5f4:	fa01 f303 	lsl.w	r3, r1, r3
 800c5f8:	ea42 0103 	orr.w	r1, r2, r3
 800c5fc:	683b      	ldr	r3, [r7, #0]
 800c5fe:	681b      	ldr	r3, [r3, #0]
 800c600:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c604:	2b00      	cmp	r3, #0
 800c606:	d10a      	bne.n	800c61e <HAL_ADC_ConfigChannel+0x362>
 800c608:	683b      	ldr	r3, [r7, #0]
 800c60a:	681b      	ldr	r3, [r3, #0]
 800c60c:	0e9b      	lsrs	r3, r3, #26
 800c60e:	3301      	adds	r3, #1
 800c610:	f003 021f 	and.w	r2, r3, #31
 800c614:	4613      	mov	r3, r2
 800c616:	005b      	lsls	r3, r3, #1
 800c618:	4413      	add	r3, r2
 800c61a:	051b      	lsls	r3, r3, #20
 800c61c:	e018      	b.n	800c650 <HAL_ADC_ConfigChannel+0x394>
 800c61e:	683b      	ldr	r3, [r7, #0]
 800c620:	681b      	ldr	r3, [r3, #0]
 800c622:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c624:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c626:	fa93 f3a3 	rbit	r3, r3
 800c62a:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 800c62c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c62e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 800c630:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c632:	2b00      	cmp	r3, #0
 800c634:	d101      	bne.n	800c63a <HAL_ADC_ConfigChannel+0x37e>
    return 32U;
 800c636:	2320      	movs	r3, #32
 800c638:	e003      	b.n	800c642 <HAL_ADC_ConfigChannel+0x386>
  return __builtin_clz(value);
 800c63a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c63c:	fab3 f383 	clz	r3, r3
 800c640:	b2db      	uxtb	r3, r3
 800c642:	3301      	adds	r3, #1
 800c644:	f003 021f 	and.w	r2, r3, #31
 800c648:	4613      	mov	r3, r2
 800c64a:	005b      	lsls	r3, r3, #1
 800c64c:	4413      	add	r3, r2
 800c64e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800c650:	430b      	orrs	r3, r1
 800c652:	e07e      	b.n	800c752 <HAL_ADC_ConfigChannel+0x496>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800c654:	683b      	ldr	r3, [r7, #0]
 800c656:	681b      	ldr	r3, [r3, #0]
 800c658:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c65c:	2b00      	cmp	r3, #0
 800c65e:	d107      	bne.n	800c670 <HAL_ADC_ConfigChannel+0x3b4>
 800c660:	683b      	ldr	r3, [r7, #0]
 800c662:	681b      	ldr	r3, [r3, #0]
 800c664:	0e9b      	lsrs	r3, r3, #26
 800c666:	3301      	adds	r3, #1
 800c668:	069b      	lsls	r3, r3, #26
 800c66a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800c66e:	e015      	b.n	800c69c <HAL_ADC_ConfigChannel+0x3e0>
 800c670:	683b      	ldr	r3, [r7, #0]
 800c672:	681b      	ldr	r3, [r3, #0]
 800c674:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c676:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c678:	fa93 f3a3 	rbit	r3, r3
 800c67c:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 800c67e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c680:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 800c682:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c684:	2b00      	cmp	r3, #0
 800c686:	d101      	bne.n	800c68c <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 800c688:	2320      	movs	r3, #32
 800c68a:	e003      	b.n	800c694 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 800c68c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c68e:	fab3 f383 	clz	r3, r3
 800c692:	b2db      	uxtb	r3, r3
 800c694:	3301      	adds	r3, #1
 800c696:	069b      	lsls	r3, r3, #26
 800c698:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800c69c:	683b      	ldr	r3, [r7, #0]
 800c69e:	681b      	ldr	r3, [r3, #0]
 800c6a0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c6a4:	2b00      	cmp	r3, #0
 800c6a6:	d109      	bne.n	800c6bc <HAL_ADC_ConfigChannel+0x400>
 800c6a8:	683b      	ldr	r3, [r7, #0]
 800c6aa:	681b      	ldr	r3, [r3, #0]
 800c6ac:	0e9b      	lsrs	r3, r3, #26
 800c6ae:	3301      	adds	r3, #1
 800c6b0:	f003 031f 	and.w	r3, r3, #31
 800c6b4:	2101      	movs	r1, #1
 800c6b6:	fa01 f303 	lsl.w	r3, r1, r3
 800c6ba:	e017      	b.n	800c6ec <HAL_ADC_ConfigChannel+0x430>
 800c6bc:	683b      	ldr	r3, [r7, #0]
 800c6be:	681b      	ldr	r3, [r3, #0]
 800c6c0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c6c2:	69fb      	ldr	r3, [r7, #28]
 800c6c4:	fa93 f3a3 	rbit	r3, r3
 800c6c8:	61bb      	str	r3, [r7, #24]
  return result;
 800c6ca:	69bb      	ldr	r3, [r7, #24]
 800c6cc:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800c6ce:	6a3b      	ldr	r3, [r7, #32]
 800c6d0:	2b00      	cmp	r3, #0
 800c6d2:	d101      	bne.n	800c6d8 <HAL_ADC_ConfigChannel+0x41c>
    return 32U;
 800c6d4:	2320      	movs	r3, #32
 800c6d6:	e003      	b.n	800c6e0 <HAL_ADC_ConfigChannel+0x424>
  return __builtin_clz(value);
 800c6d8:	6a3b      	ldr	r3, [r7, #32]
 800c6da:	fab3 f383 	clz	r3, r3
 800c6de:	b2db      	uxtb	r3, r3
 800c6e0:	3301      	adds	r3, #1
 800c6e2:	f003 031f 	and.w	r3, r3, #31
 800c6e6:	2101      	movs	r1, #1
 800c6e8:	fa01 f303 	lsl.w	r3, r1, r3
 800c6ec:	ea42 0103 	orr.w	r1, r2, r3
 800c6f0:	683b      	ldr	r3, [r7, #0]
 800c6f2:	681b      	ldr	r3, [r3, #0]
 800c6f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c6f8:	2b00      	cmp	r3, #0
 800c6fa:	d10d      	bne.n	800c718 <HAL_ADC_ConfigChannel+0x45c>
 800c6fc:	683b      	ldr	r3, [r7, #0]
 800c6fe:	681b      	ldr	r3, [r3, #0]
 800c700:	0e9b      	lsrs	r3, r3, #26
 800c702:	3301      	adds	r3, #1
 800c704:	f003 021f 	and.w	r2, r3, #31
 800c708:	4613      	mov	r3, r2
 800c70a:	005b      	lsls	r3, r3, #1
 800c70c:	4413      	add	r3, r2
 800c70e:	3b1e      	subs	r3, #30
 800c710:	051b      	lsls	r3, r3, #20
 800c712:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800c716:	e01b      	b.n	800c750 <HAL_ADC_ConfigChannel+0x494>
 800c718:	683b      	ldr	r3, [r7, #0]
 800c71a:	681b      	ldr	r3, [r3, #0]
 800c71c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c71e:	693b      	ldr	r3, [r7, #16]
 800c720:	fa93 f3a3 	rbit	r3, r3
 800c724:	60fb      	str	r3, [r7, #12]
  return result;
 800c726:	68fb      	ldr	r3, [r7, #12]
 800c728:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800c72a:	697b      	ldr	r3, [r7, #20]
 800c72c:	2b00      	cmp	r3, #0
 800c72e:	d101      	bne.n	800c734 <HAL_ADC_ConfigChannel+0x478>
    return 32U;
 800c730:	2320      	movs	r3, #32
 800c732:	e003      	b.n	800c73c <HAL_ADC_ConfigChannel+0x480>
  return __builtin_clz(value);
 800c734:	697b      	ldr	r3, [r7, #20]
 800c736:	fab3 f383 	clz	r3, r3
 800c73a:	b2db      	uxtb	r3, r3
 800c73c:	3301      	adds	r3, #1
 800c73e:	f003 021f 	and.w	r2, r3, #31
 800c742:	4613      	mov	r3, r2
 800c744:	005b      	lsls	r3, r3, #1
 800c746:	4413      	add	r3, r2
 800c748:	3b1e      	subs	r3, #30
 800c74a:	051b      	lsls	r3, r3, #20
 800c74c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800c750:	430b      	orrs	r3, r1
 800c752:	683a      	ldr	r2, [r7, #0]
 800c754:	6892      	ldr	r2, [r2, #8]
 800c756:	4619      	mov	r1, r3
 800c758:	f7fe ffd0 	bl	800b6fc <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800c75c:	683b      	ldr	r3, [r7, #0]
 800c75e:	681b      	ldr	r3, [r3, #0]
 800c760:	2b00      	cmp	r3, #0
 800c762:	da77      	bge.n	800c854 <HAL_ADC_ConfigChannel+0x598>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800c764:	4840      	ldr	r0, [pc, #256]	; (800c868 <HAL_ADC_ConfigChannel+0x5ac>)
 800c766:	f7fe ff15 	bl	800b594 <LL_ADC_GetCommonPathInternalCh>
 800c76a:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800c76c:	483f      	ldr	r0, [pc, #252]	; (800c86c <HAL_ADC_ConfigChannel+0x5b0>)
 800c76e:	f7ff f893 	bl	800b898 <LL_ADC_IsEnabled>
 800c772:	4604      	mov	r4, r0
 800c774:	483e      	ldr	r0, [pc, #248]	; (800c870 <HAL_ADC_ConfigChannel+0x5b4>)
 800c776:	f7ff f88f 	bl	800b898 <LL_ADC_IsEnabled>
 800c77a:	4603      	mov	r3, r0
 800c77c:	4323      	orrs	r3, r4
 800c77e:	2b00      	cmp	r3, #0
 800c780:	d155      	bne.n	800c82e <HAL_ADC_ConfigChannel+0x572>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800c782:	683b      	ldr	r3, [r7, #0]
 800c784:	681b      	ldr	r3, [r3, #0]
 800c786:	4a3b      	ldr	r2, [pc, #236]	; (800c874 <HAL_ADC_ConfigChannel+0x5b8>)
 800c788:	4293      	cmp	r3, r2
 800c78a:	d122      	bne.n	800c7d2 <HAL_ADC_ConfigChannel+0x516>
 800c78c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c78e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c792:	2b00      	cmp	r3, #0
 800c794:	d11d      	bne.n	800c7d2 <HAL_ADC_ConfigChannel+0x516>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	681b      	ldr	r3, [r3, #0]
 800c79a:	4a35      	ldr	r2, [pc, #212]	; (800c870 <HAL_ADC_ConfigChannel+0x5b4>)
 800c79c:	4293      	cmp	r3, r2
 800c79e:	d159      	bne.n	800c854 <HAL_ADC_ConfigChannel+0x598>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 800c7a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c7a2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800c7a6:	4619      	mov	r1, r3
 800c7a8:	482f      	ldr	r0, [pc, #188]	; (800c868 <HAL_ADC_ConfigChannel+0x5ac>)
 800c7aa:	f7fe fee0 	bl	800b56e <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800c7ae:	4b32      	ldr	r3, [pc, #200]	; (800c878 <HAL_ADC_ConfigChannel+0x5bc>)
 800c7b0:	681b      	ldr	r3, [r3, #0]
 800c7b2:	099b      	lsrs	r3, r3, #6
 800c7b4:	4a31      	ldr	r2, [pc, #196]	; (800c87c <HAL_ADC_ConfigChannel+0x5c0>)
 800c7b6:	fba2 2303 	umull	r2, r3, r2, r3
 800c7ba:	099b      	lsrs	r3, r3, #6
 800c7bc:	3301      	adds	r3, #1
 800c7be:	005b      	lsls	r3, r3, #1
 800c7c0:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800c7c2:	e002      	b.n	800c7ca <HAL_ADC_ConfigChannel+0x50e>
              {
                wait_loop_index--;
 800c7c4:	68bb      	ldr	r3, [r7, #8]
 800c7c6:	3b01      	subs	r3, #1
 800c7c8:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800c7ca:	68bb      	ldr	r3, [r7, #8]
 800c7cc:	2b00      	cmp	r3, #0
 800c7ce:	d1f9      	bne.n	800c7c4 <HAL_ADC_ConfigChannel+0x508>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800c7d0:	e040      	b.n	800c854 <HAL_ADC_ConfigChannel+0x598>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800c7d2:	683b      	ldr	r3, [r7, #0]
 800c7d4:	681b      	ldr	r3, [r3, #0]
 800c7d6:	4a2a      	ldr	r2, [pc, #168]	; (800c880 <HAL_ADC_ConfigChannel+0x5c4>)
 800c7d8:	4293      	cmp	r3, r2
 800c7da:	d111      	bne.n	800c800 <HAL_ADC_ConfigChannel+0x544>
 800c7dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c7de:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c7e2:	2b00      	cmp	r3, #0
 800c7e4:	d10c      	bne.n	800c800 <HAL_ADC_ConfigChannel+0x544>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	681b      	ldr	r3, [r3, #0]
 800c7ea:	4a21      	ldr	r2, [pc, #132]	; (800c870 <HAL_ADC_ConfigChannel+0x5b4>)
 800c7ec:	4293      	cmp	r3, r2
 800c7ee:	d131      	bne.n	800c854 <HAL_ADC_ConfigChannel+0x598>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 800c7f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c7f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c7f6:	4619      	mov	r1, r3
 800c7f8:	481b      	ldr	r0, [pc, #108]	; (800c868 <HAL_ADC_ConfigChannel+0x5ac>)
 800c7fa:	f7fe feb8 	bl	800b56e <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800c7fe:	e029      	b.n	800c854 <HAL_ADC_ConfigChannel+0x598>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800c800:	683b      	ldr	r3, [r7, #0]
 800c802:	681b      	ldr	r3, [r3, #0]
 800c804:	4a1f      	ldr	r2, [pc, #124]	; (800c884 <HAL_ADC_ConfigChannel+0x5c8>)
 800c806:	4293      	cmp	r3, r2
 800c808:	d124      	bne.n	800c854 <HAL_ADC_ConfigChannel+0x598>
 800c80a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c80c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c810:	2b00      	cmp	r3, #0
 800c812:	d11f      	bne.n	800c854 <HAL_ADC_ConfigChannel+0x598>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	681b      	ldr	r3, [r3, #0]
 800c818:	4a15      	ldr	r2, [pc, #84]	; (800c870 <HAL_ADC_ConfigChannel+0x5b4>)
 800c81a:	4293      	cmp	r3, r2
 800c81c:	d11a      	bne.n	800c854 <HAL_ADC_ConfigChannel+0x598>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800c81e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c820:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800c824:	4619      	mov	r1, r3
 800c826:	4810      	ldr	r0, [pc, #64]	; (800c868 <HAL_ADC_ConfigChannel+0x5ac>)
 800c828:	f7fe fea1 	bl	800b56e <LL_ADC_SetCommonPathInternalCh>
 800c82c:	e012      	b.n	800c854 <HAL_ADC_ConfigChannel+0x598>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c832:	f043 0220 	orr.w	r2, r3, #32
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 800c83a:	2301      	movs	r3, #1
 800c83c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800c840:	e008      	b.n	800c854 <HAL_ADC_ConfigChannel+0x598>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c846:	f043 0220 	orr.w	r2, r3, #32
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800c84e:	2301      	movs	r3, #1
 800c850:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	2200      	movs	r2, #0
 800c858:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800c85c:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800c860:	4618      	mov	r0, r3
 800c862:	3784      	adds	r7, #132	; 0x84
 800c864:	46bd      	mov	sp, r7
 800c866:	bd90      	pop	{r4, r7, pc}
 800c868:	40022300 	.word	0x40022300
 800c86c:	40022000 	.word	0x40022000
 800c870:	40022100 	.word	0x40022100
 800c874:	cb840000 	.word	0xcb840000
 800c878:	2400003c 	.word	0x2400003c
 800c87c:	053e2d63 	.word	0x053e2d63
 800c880:	bac04000 	.word	0xbac04000
 800c884:	cfb80000 	.word	0xcfb80000

0800c888 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800c888:	b580      	push	{r7, lr}
 800c88a:	b084      	sub	sp, #16
 800c88c:	af00      	add	r7, sp, #0
 800c88e:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	681b      	ldr	r3, [r3, #0]
 800c894:	4618      	mov	r0, r3
 800c896:	f7fe ffff 	bl	800b898 <LL_ADC_IsEnabled>
 800c89a:	4603      	mov	r3, r0
 800c89c:	2b00      	cmp	r3, #0
 800c89e:	d161      	bne.n	800c964 <ADC_Enable+0xdc>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	681b      	ldr	r3, [r3, #0]
 800c8a4:	689a      	ldr	r2, [r3, #8]
 800c8a6:	4b32      	ldr	r3, [pc, #200]	; (800c970 <ADC_Enable+0xe8>)
 800c8a8:	4013      	ands	r3, r2
 800c8aa:	2b00      	cmp	r3, #0
 800c8ac:	d00d      	beq.n	800c8ca <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c8b2:	f043 0210 	orr.w	r2, r3, #16
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c8be:	f043 0201 	orr.w	r2, r3, #1
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800c8c6:	2301      	movs	r3, #1
 800c8c8:	e04d      	b.n	800c966 <ADC_Enable+0xde>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	681b      	ldr	r3, [r3, #0]
 800c8ce:	4618      	mov	r0, r3
 800c8d0:	f7fe ffce 	bl	800b870 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800c8d4:	f7fe fe08 	bl	800b4e8 <HAL_GetTick>
 800c8d8:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800c8da:	4826      	ldr	r0, [pc, #152]	; (800c974 <ADC_Enable+0xec>)
 800c8dc:	f7fe ff5e 	bl	800b79c <LL_ADC_GetMultimode>
 800c8e0:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	681b      	ldr	r3, [r3, #0]
 800c8e6:	4a24      	ldr	r2, [pc, #144]	; (800c978 <ADC_Enable+0xf0>)
 800c8e8:	4293      	cmp	r3, r2
 800c8ea:	d002      	beq.n	800c8f2 <ADC_Enable+0x6a>
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	681b      	ldr	r3, [r3, #0]
 800c8f0:	e000      	b.n	800c8f4 <ADC_Enable+0x6c>
 800c8f2:	4b22      	ldr	r3, [pc, #136]	; (800c97c <ADC_Enable+0xf4>)
 800c8f4:	687a      	ldr	r2, [r7, #4]
 800c8f6:	6812      	ldr	r2, [r2, #0]
 800c8f8:	4293      	cmp	r3, r2
 800c8fa:	d02c      	beq.n	800c956 <ADC_Enable+0xce>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800c8fc:	68bb      	ldr	r3, [r7, #8]
 800c8fe:	2b00      	cmp	r3, #0
 800c900:	d130      	bne.n	800c964 <ADC_Enable+0xdc>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800c902:	e028      	b.n	800c956 <ADC_Enable+0xce>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	681b      	ldr	r3, [r3, #0]
 800c908:	4618      	mov	r0, r3
 800c90a:	f7fe ffc5 	bl	800b898 <LL_ADC_IsEnabled>
 800c90e:	4603      	mov	r3, r0
 800c910:	2b00      	cmp	r3, #0
 800c912:	d104      	bne.n	800c91e <ADC_Enable+0x96>
        {
          LL_ADC_Enable(hadc->Instance);
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	681b      	ldr	r3, [r3, #0]
 800c918:	4618      	mov	r0, r3
 800c91a:	f7fe ffa9 	bl	800b870 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800c91e:	f7fe fde3 	bl	800b4e8 <HAL_GetTick>
 800c922:	4602      	mov	r2, r0
 800c924:	68fb      	ldr	r3, [r7, #12]
 800c926:	1ad3      	subs	r3, r2, r3
 800c928:	2b02      	cmp	r3, #2
 800c92a:	d914      	bls.n	800c956 <ADC_Enable+0xce>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	681b      	ldr	r3, [r3, #0]
 800c930:	681b      	ldr	r3, [r3, #0]
 800c932:	f003 0301 	and.w	r3, r3, #1
 800c936:	2b01      	cmp	r3, #1
 800c938:	d00d      	beq.n	800c956 <ADC_Enable+0xce>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c93e:	f043 0210 	orr.w	r2, r3, #16
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c94a:	f043 0201 	orr.w	r2, r3, #1
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 800c952:	2301      	movs	r3, #1
 800c954:	e007      	b.n	800c966 <ADC_Enable+0xde>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	681b      	ldr	r3, [r3, #0]
 800c95a:	681b      	ldr	r3, [r3, #0]
 800c95c:	f003 0301 	and.w	r3, r3, #1
 800c960:	2b01      	cmp	r3, #1
 800c962:	d1cf      	bne.n	800c904 <ADC_Enable+0x7c>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800c964:	2300      	movs	r3, #0
}
 800c966:	4618      	mov	r0, r3
 800c968:	3710      	adds	r7, #16
 800c96a:	46bd      	mov	sp, r7
 800c96c:	bd80      	pop	{r7, pc}
 800c96e:	bf00      	nop
 800c970:	8000003f 	.word	0x8000003f
 800c974:	40022300 	.word	0x40022300
 800c978:	40022100 	.word	0x40022100
 800c97c:	40022000 	.word	0x40022000

0800c980 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 800c980:	b580      	push	{r7, lr}
 800c982:	b084      	sub	sp, #16
 800c984:	af00      	add	r7, sp, #0
 800c986:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 800c988:	4b5f      	ldr	r3, [pc, #380]	; (800cb08 <ADC_ConfigureBoostMode+0x188>)
 800c98a:	689b      	ldr	r3, [r3, #8]
 800c98c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800c990:	2b00      	cmp	r3, #0
 800c992:	d01c      	beq.n	800c9ce <ADC_ConfigureBoostMode+0x4e>
  {
    freq = HAL_RCC_GetHCLKFreq();
 800c994:	f004 fa12 	bl	8010dbc <HAL_RCC_GetHCLKFreq>
 800c998:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	685b      	ldr	r3, [r3, #4]
 800c99e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800c9a2:	d010      	beq.n	800c9c6 <ADC_ConfigureBoostMode+0x46>
 800c9a4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800c9a8:	d871      	bhi.n	800ca8e <ADC_ConfigureBoostMode+0x10e>
 800c9aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c9ae:	d002      	beq.n	800c9b6 <ADC_ConfigureBoostMode+0x36>
 800c9b0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c9b4:	d16b      	bne.n	800ca8e <ADC_ConfigureBoostMode+0x10e>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	685b      	ldr	r3, [r3, #4]
 800c9ba:	0c1b      	lsrs	r3, r3, #16
 800c9bc:	68fa      	ldr	r2, [r7, #12]
 800c9be:	fbb2 f3f3 	udiv	r3, r2, r3
 800c9c2:	60fb      	str	r3, [r7, #12]
        break;
 800c9c4:	e066      	b.n	800ca94 <ADC_ConfigureBoostMode+0x114>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 800c9c6:	68fb      	ldr	r3, [r7, #12]
 800c9c8:	089b      	lsrs	r3, r3, #2
 800c9ca:	60fb      	str	r3, [r7, #12]
        break;
 800c9cc:	e062      	b.n	800ca94 <ADC_ConfigureBoostMode+0x114>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 800c9ce:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800c9d2:	f005 f99d 	bl	8011d10 <HAL_RCCEx_GetPeriphCLKFreq>
 800c9d6:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	685b      	ldr	r3, [r3, #4]
 800c9dc:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 800c9e0:	d051      	beq.n	800ca86 <ADC_ConfigureBoostMode+0x106>
 800c9e2:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 800c9e6:	d854      	bhi.n	800ca92 <ADC_ConfigureBoostMode+0x112>
 800c9e8:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 800c9ec:	d047      	beq.n	800ca7e <ADC_ConfigureBoostMode+0xfe>
 800c9ee:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 800c9f2:	d84e      	bhi.n	800ca92 <ADC_ConfigureBoostMode+0x112>
 800c9f4:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 800c9f8:	d03d      	beq.n	800ca76 <ADC_ConfigureBoostMode+0xf6>
 800c9fa:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 800c9fe:	d848      	bhi.n	800ca92 <ADC_ConfigureBoostMode+0x112>
 800ca00:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ca04:	d033      	beq.n	800ca6e <ADC_ConfigureBoostMode+0xee>
 800ca06:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ca0a:	d842      	bhi.n	800ca92 <ADC_ConfigureBoostMode+0x112>
 800ca0c:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 800ca10:	d029      	beq.n	800ca66 <ADC_ConfigureBoostMode+0xe6>
 800ca12:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 800ca16:	d83c      	bhi.n	800ca92 <ADC_ConfigureBoostMode+0x112>
 800ca18:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800ca1c:	d01a      	beq.n	800ca54 <ADC_ConfigureBoostMode+0xd4>
 800ca1e:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800ca22:	d836      	bhi.n	800ca92 <ADC_ConfigureBoostMode+0x112>
 800ca24:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800ca28:	d014      	beq.n	800ca54 <ADC_ConfigureBoostMode+0xd4>
 800ca2a:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800ca2e:	d830      	bhi.n	800ca92 <ADC_ConfigureBoostMode+0x112>
 800ca30:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ca34:	d00e      	beq.n	800ca54 <ADC_ConfigureBoostMode+0xd4>
 800ca36:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ca3a:	d82a      	bhi.n	800ca92 <ADC_ConfigureBoostMode+0x112>
 800ca3c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800ca40:	d008      	beq.n	800ca54 <ADC_ConfigureBoostMode+0xd4>
 800ca42:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800ca46:	d824      	bhi.n	800ca92 <ADC_ConfigureBoostMode+0x112>
 800ca48:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800ca4c:	d002      	beq.n	800ca54 <ADC_ConfigureBoostMode+0xd4>
 800ca4e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800ca52:	d11e      	bne.n	800ca92 <ADC_ConfigureBoostMode+0x112>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	685b      	ldr	r3, [r3, #4]
 800ca58:	0c9b      	lsrs	r3, r3, #18
 800ca5a:	005b      	lsls	r3, r3, #1
 800ca5c:	68fa      	ldr	r2, [r7, #12]
 800ca5e:	fbb2 f3f3 	udiv	r3, r2, r3
 800ca62:	60fb      	str	r3, [r7, #12]
        break;
 800ca64:	e016      	b.n	800ca94 <ADC_ConfigureBoostMode+0x114>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 800ca66:	68fb      	ldr	r3, [r7, #12]
 800ca68:	091b      	lsrs	r3, r3, #4
 800ca6a:	60fb      	str	r3, [r7, #12]
        break;
 800ca6c:	e012      	b.n	800ca94 <ADC_ConfigureBoostMode+0x114>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 800ca6e:	68fb      	ldr	r3, [r7, #12]
 800ca70:	095b      	lsrs	r3, r3, #5
 800ca72:	60fb      	str	r3, [r7, #12]
        break;
 800ca74:	e00e      	b.n	800ca94 <ADC_ConfigureBoostMode+0x114>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 800ca76:	68fb      	ldr	r3, [r7, #12]
 800ca78:	099b      	lsrs	r3, r3, #6
 800ca7a:	60fb      	str	r3, [r7, #12]
        break;
 800ca7c:	e00a      	b.n	800ca94 <ADC_ConfigureBoostMode+0x114>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 800ca7e:	68fb      	ldr	r3, [r7, #12]
 800ca80:	09db      	lsrs	r3, r3, #7
 800ca82:	60fb      	str	r3, [r7, #12]
        break;
 800ca84:	e006      	b.n	800ca94 <ADC_ConfigureBoostMode+0x114>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 800ca86:	68fb      	ldr	r3, [r7, #12]
 800ca88:	0a1b      	lsrs	r3, r3, #8
 800ca8a:	60fb      	str	r3, [r7, #12]
        break;
 800ca8c:	e002      	b.n	800ca94 <ADC_ConfigureBoostMode+0x114>
        break;
 800ca8e:	bf00      	nop
 800ca90:	e000      	b.n	800ca94 <ADC_ConfigureBoostMode+0x114>
      default:
        break;
 800ca92:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 800ca94:	68fb      	ldr	r3, [r7, #12]
 800ca96:	085b      	lsrs	r3, r3, #1
 800ca98:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 800ca9a:	68fb      	ldr	r3, [r7, #12]
 800ca9c:	4a1b      	ldr	r2, [pc, #108]	; (800cb0c <ADC_ConfigureBoostMode+0x18c>)
 800ca9e:	4293      	cmp	r3, r2
 800caa0:	d808      	bhi.n	800cab4 <ADC_ConfigureBoostMode+0x134>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	681b      	ldr	r3, [r3, #0]
 800caa6:	689a      	ldr	r2, [r3, #8]
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	681b      	ldr	r3, [r3, #0]
 800caac:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800cab0:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 800cab2:	e025      	b.n	800cb00 <ADC_ConfigureBoostMode+0x180>
  else if (freq <= 12500000UL)
 800cab4:	68fb      	ldr	r3, [r7, #12]
 800cab6:	4a16      	ldr	r2, [pc, #88]	; (800cb10 <ADC_ConfigureBoostMode+0x190>)
 800cab8:	4293      	cmp	r3, r2
 800caba:	d80a      	bhi.n	800cad2 <ADC_ConfigureBoostMode+0x152>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	681b      	ldr	r3, [r3, #0]
 800cac0:	689b      	ldr	r3, [r3, #8]
 800cac2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	681b      	ldr	r3, [r3, #0]
 800caca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800cace:	609a      	str	r2, [r3, #8]
}
 800cad0:	e016      	b.n	800cb00 <ADC_ConfigureBoostMode+0x180>
  else if (freq <= 25000000UL)
 800cad2:	68fb      	ldr	r3, [r7, #12]
 800cad4:	4a0f      	ldr	r2, [pc, #60]	; (800cb14 <ADC_ConfigureBoostMode+0x194>)
 800cad6:	4293      	cmp	r3, r2
 800cad8:	d80a      	bhi.n	800caf0 <ADC_ConfigureBoostMode+0x170>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	681b      	ldr	r3, [r3, #0]
 800cade:	689b      	ldr	r3, [r3, #8]
 800cae0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	681b      	ldr	r3, [r3, #0]
 800cae8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800caec:	609a      	str	r2, [r3, #8]
}
 800caee:	e007      	b.n	800cb00 <ADC_ConfigureBoostMode+0x180>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	681b      	ldr	r3, [r3, #0]
 800caf4:	689a      	ldr	r2, [r3, #8]
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	681b      	ldr	r3, [r3, #0]
 800cafa:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800cafe:	609a      	str	r2, [r3, #8]
}
 800cb00:	bf00      	nop
 800cb02:	3710      	adds	r7, #16
 800cb04:	46bd      	mov	sp, r7
 800cb06:	bd80      	pop	{r7, pc}
 800cb08:	40022300 	.word	0x40022300
 800cb0c:	005f5e10 	.word	0x005f5e10
 800cb10:	00bebc20 	.word	0x00bebc20
 800cb14:	017d7840 	.word	0x017d7840

0800cb18 <LL_ADC_IsEnabled>:
{
 800cb18:	b480      	push	{r7}
 800cb1a:	b083      	sub	sp, #12
 800cb1c:	af00      	add	r7, sp, #0
 800cb1e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	689b      	ldr	r3, [r3, #8]
 800cb24:	f003 0301 	and.w	r3, r3, #1
 800cb28:	2b01      	cmp	r3, #1
 800cb2a:	d101      	bne.n	800cb30 <LL_ADC_IsEnabled+0x18>
 800cb2c:	2301      	movs	r3, #1
 800cb2e:	e000      	b.n	800cb32 <LL_ADC_IsEnabled+0x1a>
 800cb30:	2300      	movs	r3, #0
}
 800cb32:	4618      	mov	r0, r3
 800cb34:	370c      	adds	r7, #12
 800cb36:	46bd      	mov	sp, r7
 800cb38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb3c:	4770      	bx	lr

0800cb3e <LL_ADC_REG_IsConversionOngoing>:
{
 800cb3e:	b480      	push	{r7}
 800cb40:	b083      	sub	sp, #12
 800cb42:	af00      	add	r7, sp, #0
 800cb44:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	689b      	ldr	r3, [r3, #8]
 800cb4a:	f003 0304 	and.w	r3, r3, #4
 800cb4e:	2b04      	cmp	r3, #4
 800cb50:	d101      	bne.n	800cb56 <LL_ADC_REG_IsConversionOngoing+0x18>
 800cb52:	2301      	movs	r3, #1
 800cb54:	e000      	b.n	800cb58 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800cb56:	2300      	movs	r3, #0
}
 800cb58:	4618      	mov	r0, r3
 800cb5a:	370c      	adds	r7, #12
 800cb5c:	46bd      	mov	sp, r7
 800cb5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb62:	4770      	bx	lr

0800cb64 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800cb64:	b480      	push	{r7}
 800cb66:	b083      	sub	sp, #12
 800cb68:	af00      	add	r7, sp, #0
 800cb6a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 800cb6c:	bf00      	nop
 800cb6e:	370c      	adds	r7, #12
 800cb70:	46bd      	mov	sp, r7
 800cb72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb76:	4770      	bx	lr

0800cb78 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 800cb78:	b480      	push	{r7}
 800cb7a:	b083      	sub	sp, #12
 800cb7c:	af00      	add	r7, sp, #0
 800cb7e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 800cb80:	bf00      	nop
 800cb82:	370c      	adds	r7, #12
 800cb84:	46bd      	mov	sp, r7
 800cb86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb8a:	4770      	bx	lr

0800cb8c <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 800cb8c:	b480      	push	{r7}
 800cb8e:	b083      	sub	sp, #12
 800cb90:	af00      	add	r7, sp, #0
 800cb92:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 800cb94:	bf00      	nop
 800cb96:	370c      	adds	r7, #12
 800cb98:	46bd      	mov	sp, r7
 800cb9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb9e:	4770      	bx	lr

0800cba0 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 800cba0:	b480      	push	{r7}
 800cba2:	b083      	sub	sp, #12
 800cba4:	af00      	add	r7, sp, #0
 800cba6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 800cba8:	bf00      	nop
 800cbaa:	370c      	adds	r7, #12
 800cbac:	46bd      	mov	sp, r7
 800cbae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbb2:	4770      	bx	lr

0800cbb4 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 800cbb4:	b480      	push	{r7}
 800cbb6:	b083      	sub	sp, #12
 800cbb8:	af00      	add	r7, sp, #0
 800cbba:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 800cbbc:	bf00      	nop
 800cbbe:	370c      	adds	r7, #12
 800cbc0:	46bd      	mov	sp, r7
 800cbc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbc6:	4770      	bx	lr

0800cbc8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 800cbc8:	b590      	push	{r4, r7, lr}
 800cbca:	b09f      	sub	sp, #124	; 0x7c
 800cbcc:	af00      	add	r7, sp, #0
 800cbce:	6078      	str	r0, [r7, #4]
 800cbd0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800cbd2:	2300      	movs	r3, #0
 800cbd4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800cbde:	2b01      	cmp	r3, #1
 800cbe0:	d101      	bne.n	800cbe6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800cbe2:	2302      	movs	r3, #2
 800cbe4:	e080      	b.n	800cce8 <HAL_ADCEx_MultiModeConfigChannel+0x120>
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	2201      	movs	r2, #1
 800cbea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 800cbee:	2300      	movs	r3, #0
 800cbf0:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 800cbf2:	2300      	movs	r3, #0
 800cbf4:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	681b      	ldr	r3, [r3, #0]
 800cbfa:	4a3d      	ldr	r2, [pc, #244]	; (800ccf0 <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 800cbfc:	4293      	cmp	r3, r2
 800cbfe:	d102      	bne.n	800cc06 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800cc00:	4b3c      	ldr	r3, [pc, #240]	; (800ccf4 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 800cc02:	60bb      	str	r3, [r7, #8]
 800cc04:	e001      	b.n	800cc0a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800cc06:	2300      	movs	r3, #0
 800cc08:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800cc0a:	68bb      	ldr	r3, [r7, #8]
 800cc0c:	2b00      	cmp	r3, #0
 800cc0e:	d10b      	bne.n	800cc28 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cc14:	f043 0220 	orr.w	r2, r3, #32
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	2200      	movs	r2, #0
 800cc20:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 800cc24:	2301      	movs	r3, #1
 800cc26:	e05f      	b.n	800cce8 <HAL_ADCEx_MultiModeConfigChannel+0x120>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 800cc28:	68bb      	ldr	r3, [r7, #8]
 800cc2a:	4618      	mov	r0, r3
 800cc2c:	f7ff ff87 	bl	800cb3e <LL_ADC_REG_IsConversionOngoing>
 800cc30:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	681b      	ldr	r3, [r3, #0]
 800cc36:	4618      	mov	r0, r3
 800cc38:	f7ff ff81 	bl	800cb3e <LL_ADC_REG_IsConversionOngoing>
 800cc3c:	4603      	mov	r3, r0
 800cc3e:	2b00      	cmp	r3, #0
 800cc40:	d141      	bne.n	800ccc6 <HAL_ADCEx_MultiModeConfigChannel+0xfe>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800cc42:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800cc44:	2b00      	cmp	r3, #0
 800cc46:	d13e      	bne.n	800ccc6 <HAL_ADCEx_MultiModeConfigChannel+0xfe>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800cc48:	4b2b      	ldr	r3, [pc, #172]	; (800ccf8 <HAL_ADCEx_MultiModeConfigChannel+0x130>)
 800cc4a:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800cc4c:	683b      	ldr	r3, [r7, #0]
 800cc4e:	681b      	ldr	r3, [r3, #0]
 800cc50:	2b00      	cmp	r3, #0
 800cc52:	d020      	beq.n	800cc96 <HAL_ADCEx_MultiModeConfigChannel+0xce>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 800cc54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cc56:	689b      	ldr	r3, [r3, #8]
 800cc58:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800cc5c:	683b      	ldr	r3, [r7, #0]
 800cc5e:	685b      	ldr	r3, [r3, #4]
 800cc60:	431a      	orrs	r2, r3
 800cc62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cc64:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800cc66:	4822      	ldr	r0, [pc, #136]	; (800ccf0 <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 800cc68:	f7ff ff56 	bl	800cb18 <LL_ADC_IsEnabled>
 800cc6c:	4604      	mov	r4, r0
 800cc6e:	4821      	ldr	r0, [pc, #132]	; (800ccf4 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 800cc70:	f7ff ff52 	bl	800cb18 <LL_ADC_IsEnabled>
 800cc74:	4603      	mov	r3, r0
 800cc76:	4323      	orrs	r3, r4
 800cc78:	2b00      	cmp	r3, #0
 800cc7a:	d12e      	bne.n	800ccda <HAL_ADCEx_MultiModeConfigChannel+0x112>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800cc7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cc7e:	689a      	ldr	r2, [r3, #8]
 800cc80:	4b1e      	ldr	r3, [pc, #120]	; (800ccfc <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 800cc82:	4013      	ands	r3, r2
 800cc84:	683a      	ldr	r2, [r7, #0]
 800cc86:	6811      	ldr	r1, [r2, #0]
 800cc88:	683a      	ldr	r2, [r7, #0]
 800cc8a:	6892      	ldr	r2, [r2, #8]
 800cc8c:	430a      	orrs	r2, r1
 800cc8e:	431a      	orrs	r2, r3
 800cc90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cc92:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800cc94:	e021      	b.n	800ccda <HAL_ADCEx_MultiModeConfigChannel+0x112>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 800cc96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cc98:	689b      	ldr	r3, [r3, #8]
 800cc9a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800cc9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cca0:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800cca2:	4813      	ldr	r0, [pc, #76]	; (800ccf0 <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 800cca4:	f7ff ff38 	bl	800cb18 <LL_ADC_IsEnabled>
 800cca8:	4604      	mov	r4, r0
 800ccaa:	4812      	ldr	r0, [pc, #72]	; (800ccf4 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 800ccac:	f7ff ff34 	bl	800cb18 <LL_ADC_IsEnabled>
 800ccb0:	4603      	mov	r3, r0
 800ccb2:	4323      	orrs	r3, r4
 800ccb4:	2b00      	cmp	r3, #0
 800ccb6:	d110      	bne.n	800ccda <HAL_ADCEx_MultiModeConfigChannel+0x112>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800ccb8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ccba:	689a      	ldr	r2, [r3, #8]
 800ccbc:	4b0f      	ldr	r3, [pc, #60]	; (800ccfc <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 800ccbe:	4013      	ands	r3, r2
 800ccc0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800ccc2:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800ccc4:	e009      	b.n	800ccda <HAL_ADCEx_MultiModeConfigChannel+0x112>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ccca:	f043 0220 	orr.w	r2, r3, #32
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800ccd2:	2301      	movs	r3, #1
 800ccd4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800ccd8:	e000      	b.n	800ccdc <HAL_ADCEx_MultiModeConfigChannel+0x114>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800ccda:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	2200      	movs	r2, #0
 800cce0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800cce4:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 800cce8:	4618      	mov	r0, r3
 800ccea:	377c      	adds	r7, #124	; 0x7c
 800ccec:	46bd      	mov	sp, r7
 800ccee:	bd90      	pop	{r4, r7, pc}
 800ccf0:	40022000 	.word	0x40022000
 800ccf4:	40022100 	.word	0x40022100
 800ccf8:	40022300 	.word	0x40022300
 800ccfc:	fffff0e0 	.word	0xfffff0e0

0800cd00 <__NVIC_SetPriorityGrouping>:
{
 800cd00:	b480      	push	{r7}
 800cd02:	b085      	sub	sp, #20
 800cd04:	af00      	add	r7, sp, #0
 800cd06:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	f003 0307 	and.w	r3, r3, #7
 800cd0e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800cd10:	4b0b      	ldr	r3, [pc, #44]	; (800cd40 <__NVIC_SetPriorityGrouping+0x40>)
 800cd12:	68db      	ldr	r3, [r3, #12]
 800cd14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800cd16:	68ba      	ldr	r2, [r7, #8]
 800cd18:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800cd1c:	4013      	ands	r3, r2
 800cd1e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800cd20:	68fb      	ldr	r3, [r7, #12]
 800cd22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800cd24:	68bb      	ldr	r3, [r7, #8]
 800cd26:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800cd28:	4b06      	ldr	r3, [pc, #24]	; (800cd44 <__NVIC_SetPriorityGrouping+0x44>)
 800cd2a:	4313      	orrs	r3, r2
 800cd2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800cd2e:	4a04      	ldr	r2, [pc, #16]	; (800cd40 <__NVIC_SetPriorityGrouping+0x40>)
 800cd30:	68bb      	ldr	r3, [r7, #8]
 800cd32:	60d3      	str	r3, [r2, #12]
}
 800cd34:	bf00      	nop
 800cd36:	3714      	adds	r7, #20
 800cd38:	46bd      	mov	sp, r7
 800cd3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd3e:	4770      	bx	lr
 800cd40:	e000ed00 	.word	0xe000ed00
 800cd44:	05fa0000 	.word	0x05fa0000

0800cd48 <__NVIC_GetPriorityGrouping>:
{
 800cd48:	b480      	push	{r7}
 800cd4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800cd4c:	4b04      	ldr	r3, [pc, #16]	; (800cd60 <__NVIC_GetPriorityGrouping+0x18>)
 800cd4e:	68db      	ldr	r3, [r3, #12]
 800cd50:	0a1b      	lsrs	r3, r3, #8
 800cd52:	f003 0307 	and.w	r3, r3, #7
}
 800cd56:	4618      	mov	r0, r3
 800cd58:	46bd      	mov	sp, r7
 800cd5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd5e:	4770      	bx	lr
 800cd60:	e000ed00 	.word	0xe000ed00

0800cd64 <__NVIC_EnableIRQ>:
{
 800cd64:	b480      	push	{r7}
 800cd66:	b083      	sub	sp, #12
 800cd68:	af00      	add	r7, sp, #0
 800cd6a:	4603      	mov	r3, r0
 800cd6c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800cd6e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800cd72:	2b00      	cmp	r3, #0
 800cd74:	db0b      	blt.n	800cd8e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800cd76:	88fb      	ldrh	r3, [r7, #6]
 800cd78:	f003 021f 	and.w	r2, r3, #31
 800cd7c:	4907      	ldr	r1, [pc, #28]	; (800cd9c <__NVIC_EnableIRQ+0x38>)
 800cd7e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800cd82:	095b      	lsrs	r3, r3, #5
 800cd84:	2001      	movs	r0, #1
 800cd86:	fa00 f202 	lsl.w	r2, r0, r2
 800cd8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800cd8e:	bf00      	nop
 800cd90:	370c      	adds	r7, #12
 800cd92:	46bd      	mov	sp, r7
 800cd94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd98:	4770      	bx	lr
 800cd9a:	bf00      	nop
 800cd9c:	e000e100 	.word	0xe000e100

0800cda0 <__NVIC_DisableIRQ>:
{
 800cda0:	b480      	push	{r7}
 800cda2:	b083      	sub	sp, #12
 800cda4:	af00      	add	r7, sp, #0
 800cda6:	4603      	mov	r3, r0
 800cda8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800cdaa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800cdae:	2b00      	cmp	r3, #0
 800cdb0:	db12      	blt.n	800cdd8 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800cdb2:	88fb      	ldrh	r3, [r7, #6]
 800cdb4:	f003 021f 	and.w	r2, r3, #31
 800cdb8:	490a      	ldr	r1, [pc, #40]	; (800cde4 <__NVIC_DisableIRQ+0x44>)
 800cdba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800cdbe:	095b      	lsrs	r3, r3, #5
 800cdc0:	2001      	movs	r0, #1
 800cdc2:	fa00 f202 	lsl.w	r2, r0, r2
 800cdc6:	3320      	adds	r3, #32
 800cdc8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800cdcc:	f3bf 8f4f 	dsb	sy
}
 800cdd0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800cdd2:	f3bf 8f6f 	isb	sy
}
 800cdd6:	bf00      	nop
}
 800cdd8:	bf00      	nop
 800cdda:	370c      	adds	r7, #12
 800cddc:	46bd      	mov	sp, r7
 800cdde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cde2:	4770      	bx	lr
 800cde4:	e000e100 	.word	0xe000e100

0800cde8 <__NVIC_SetPriority>:
{
 800cde8:	b480      	push	{r7}
 800cdea:	b083      	sub	sp, #12
 800cdec:	af00      	add	r7, sp, #0
 800cdee:	4603      	mov	r3, r0
 800cdf0:	6039      	str	r1, [r7, #0]
 800cdf2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800cdf4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800cdf8:	2b00      	cmp	r3, #0
 800cdfa:	db0a      	blt.n	800ce12 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800cdfc:	683b      	ldr	r3, [r7, #0]
 800cdfe:	b2da      	uxtb	r2, r3
 800ce00:	490c      	ldr	r1, [pc, #48]	; (800ce34 <__NVIC_SetPriority+0x4c>)
 800ce02:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800ce06:	0112      	lsls	r2, r2, #4
 800ce08:	b2d2      	uxtb	r2, r2
 800ce0a:	440b      	add	r3, r1
 800ce0c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800ce10:	e00a      	b.n	800ce28 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ce12:	683b      	ldr	r3, [r7, #0]
 800ce14:	b2da      	uxtb	r2, r3
 800ce16:	4908      	ldr	r1, [pc, #32]	; (800ce38 <__NVIC_SetPriority+0x50>)
 800ce18:	88fb      	ldrh	r3, [r7, #6]
 800ce1a:	f003 030f 	and.w	r3, r3, #15
 800ce1e:	3b04      	subs	r3, #4
 800ce20:	0112      	lsls	r2, r2, #4
 800ce22:	b2d2      	uxtb	r2, r2
 800ce24:	440b      	add	r3, r1
 800ce26:	761a      	strb	r2, [r3, #24]
}
 800ce28:	bf00      	nop
 800ce2a:	370c      	adds	r7, #12
 800ce2c:	46bd      	mov	sp, r7
 800ce2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce32:	4770      	bx	lr
 800ce34:	e000e100 	.word	0xe000e100
 800ce38:	e000ed00 	.word	0xe000ed00

0800ce3c <NVIC_EncodePriority>:
{
 800ce3c:	b480      	push	{r7}
 800ce3e:	b089      	sub	sp, #36	; 0x24
 800ce40:	af00      	add	r7, sp, #0
 800ce42:	60f8      	str	r0, [r7, #12]
 800ce44:	60b9      	str	r1, [r7, #8]
 800ce46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800ce48:	68fb      	ldr	r3, [r7, #12]
 800ce4a:	f003 0307 	and.w	r3, r3, #7
 800ce4e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800ce50:	69fb      	ldr	r3, [r7, #28]
 800ce52:	f1c3 0307 	rsb	r3, r3, #7
 800ce56:	2b04      	cmp	r3, #4
 800ce58:	bf28      	it	cs
 800ce5a:	2304      	movcs	r3, #4
 800ce5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800ce5e:	69fb      	ldr	r3, [r7, #28]
 800ce60:	3304      	adds	r3, #4
 800ce62:	2b06      	cmp	r3, #6
 800ce64:	d902      	bls.n	800ce6c <NVIC_EncodePriority+0x30>
 800ce66:	69fb      	ldr	r3, [r7, #28]
 800ce68:	3b03      	subs	r3, #3
 800ce6a:	e000      	b.n	800ce6e <NVIC_EncodePriority+0x32>
 800ce6c:	2300      	movs	r3, #0
 800ce6e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800ce70:	f04f 32ff 	mov.w	r2, #4294967295
 800ce74:	69bb      	ldr	r3, [r7, #24]
 800ce76:	fa02 f303 	lsl.w	r3, r2, r3
 800ce7a:	43da      	mvns	r2, r3
 800ce7c:	68bb      	ldr	r3, [r7, #8]
 800ce7e:	401a      	ands	r2, r3
 800ce80:	697b      	ldr	r3, [r7, #20]
 800ce82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800ce84:	f04f 31ff 	mov.w	r1, #4294967295
 800ce88:	697b      	ldr	r3, [r7, #20]
 800ce8a:	fa01 f303 	lsl.w	r3, r1, r3
 800ce8e:	43d9      	mvns	r1, r3
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800ce94:	4313      	orrs	r3, r2
}
 800ce96:	4618      	mov	r0, r3
 800ce98:	3724      	adds	r7, #36	; 0x24
 800ce9a:	46bd      	mov	sp, r7
 800ce9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cea0:	4770      	bx	lr

0800cea2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800cea2:	b580      	push	{r7, lr}
 800cea4:	b082      	sub	sp, #8
 800cea6:	af00      	add	r7, sp, #0
 800cea8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800ceaa:	6878      	ldr	r0, [r7, #4]
 800ceac:	f7ff ff28 	bl	800cd00 <__NVIC_SetPriorityGrouping>
}
 800ceb0:	bf00      	nop
 800ceb2:	3708      	adds	r7, #8
 800ceb4:	46bd      	mov	sp, r7
 800ceb6:	bd80      	pop	{r7, pc}

0800ceb8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800ceb8:	b580      	push	{r7, lr}
 800ceba:	b086      	sub	sp, #24
 800cebc:	af00      	add	r7, sp, #0
 800cebe:	4603      	mov	r3, r0
 800cec0:	60b9      	str	r1, [r7, #8]
 800cec2:	607a      	str	r2, [r7, #4]
 800cec4:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800cec6:	f7ff ff3f 	bl	800cd48 <__NVIC_GetPriorityGrouping>
 800ceca:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800cecc:	687a      	ldr	r2, [r7, #4]
 800cece:	68b9      	ldr	r1, [r7, #8]
 800ced0:	6978      	ldr	r0, [r7, #20]
 800ced2:	f7ff ffb3 	bl	800ce3c <NVIC_EncodePriority>
 800ced6:	4602      	mov	r2, r0
 800ced8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800cedc:	4611      	mov	r1, r2
 800cede:	4618      	mov	r0, r3
 800cee0:	f7ff ff82 	bl	800cde8 <__NVIC_SetPriority>
}
 800cee4:	bf00      	nop
 800cee6:	3718      	adds	r7, #24
 800cee8:	46bd      	mov	sp, r7
 800ceea:	bd80      	pop	{r7, pc}

0800ceec <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800ceec:	b580      	push	{r7, lr}
 800ceee:	b082      	sub	sp, #8
 800cef0:	af00      	add	r7, sp, #0
 800cef2:	4603      	mov	r3, r0
 800cef4:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800cef6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800cefa:	4618      	mov	r0, r3
 800cefc:	f7ff ff32 	bl	800cd64 <__NVIC_EnableIRQ>
}
 800cf00:	bf00      	nop
 800cf02:	3708      	adds	r7, #8
 800cf04:	46bd      	mov	sp, r7
 800cf06:	bd80      	pop	{r7, pc}

0800cf08 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800cf08:	b580      	push	{r7, lr}
 800cf0a:	b082      	sub	sp, #8
 800cf0c:	af00      	add	r7, sp, #0
 800cf0e:	4603      	mov	r3, r0
 800cf10:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800cf12:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800cf16:	4618      	mov	r0, r3
 800cf18:	f7ff ff42 	bl	800cda0 <__NVIC_DisableIRQ>
}
 800cf1c:	bf00      	nop
 800cf1e:	3708      	adds	r7, #8
 800cf20:	46bd      	mov	sp, r7
 800cf22:	bd80      	pop	{r7, pc}

0800cf24 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 800cf24:	b480      	push	{r7}
 800cf26:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 800cf28:	f3bf 8f5f 	dmb	sy
}
 800cf2c:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800cf2e:	4b07      	ldr	r3, [pc, #28]	; (800cf4c <HAL_MPU_Disable+0x28>)
 800cf30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf32:	4a06      	ldr	r2, [pc, #24]	; (800cf4c <HAL_MPU_Disable+0x28>)
 800cf34:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800cf38:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800cf3a:	4b05      	ldr	r3, [pc, #20]	; (800cf50 <HAL_MPU_Disable+0x2c>)
 800cf3c:	2200      	movs	r2, #0
 800cf3e:	605a      	str	r2, [r3, #4]
}
 800cf40:	bf00      	nop
 800cf42:	46bd      	mov	sp, r7
 800cf44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf48:	4770      	bx	lr
 800cf4a:	bf00      	nop
 800cf4c:	e000ed00 	.word	0xe000ed00
 800cf50:	e000ed90 	.word	0xe000ed90

0800cf54 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 800cf54:	b480      	push	{r7}
 800cf56:	b083      	sub	sp, #12
 800cf58:	af00      	add	r7, sp, #0
 800cf5a:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 800cf5c:	4a0b      	ldr	r2, [pc, #44]	; (800cf8c <HAL_MPU_Enable+0x38>)
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	f043 0301 	orr.w	r3, r3, #1
 800cf64:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800cf66:	4b0a      	ldr	r3, [pc, #40]	; (800cf90 <HAL_MPU_Enable+0x3c>)
 800cf68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf6a:	4a09      	ldr	r2, [pc, #36]	; (800cf90 <HAL_MPU_Enable+0x3c>)
 800cf6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800cf70:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800cf72:	f3bf 8f4f 	dsb	sy
}
 800cf76:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800cf78:	f3bf 8f6f 	isb	sy
}
 800cf7c:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800cf7e:	bf00      	nop
 800cf80:	370c      	adds	r7, #12
 800cf82:	46bd      	mov	sp, r7
 800cf84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf88:	4770      	bx	lr
 800cf8a:	bf00      	nop
 800cf8c:	e000ed90 	.word	0xe000ed90
 800cf90:	e000ed00 	.word	0xe000ed00

0800cf94 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 800cf94:	b480      	push	{r7}
 800cf96:	b083      	sub	sp, #12
 800cf98:	af00      	add	r7, sp, #0
 800cf9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	785a      	ldrb	r2, [r3, #1]
 800cfa0:	4b1d      	ldr	r3, [pc, #116]	; (800d018 <HAL_MPU_ConfigRegion+0x84>)
 800cfa2:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	781b      	ldrb	r3, [r3, #0]
 800cfa8:	2b00      	cmp	r3, #0
 800cfaa:	d029      	beq.n	800d000 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 800cfac:	4a1a      	ldr	r2, [pc, #104]	; (800d018 <HAL_MPU_ConfigRegion+0x84>)
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	685b      	ldr	r3, [r3, #4]
 800cfb2:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	7b1b      	ldrb	r3, [r3, #12]
 800cfb8:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	7adb      	ldrb	r3, [r3, #11]
 800cfbe:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800cfc0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	7a9b      	ldrb	r3, [r3, #10]
 800cfc6:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800cfc8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	7b5b      	ldrb	r3, [r3, #13]
 800cfce:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800cfd0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	7b9b      	ldrb	r3, [r3, #14]
 800cfd6:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800cfd8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	7bdb      	ldrb	r3, [r3, #15]
 800cfde:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800cfe0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	7a5b      	ldrb	r3, [r3, #9]
 800cfe6:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800cfe8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	7a1b      	ldrb	r3, [r3, #8]
 800cfee:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800cff0:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800cff2:	687a      	ldr	r2, [r7, #4]
 800cff4:	7812      	ldrb	r2, [r2, #0]
 800cff6:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800cff8:	4a07      	ldr	r2, [pc, #28]	; (800d018 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800cffa:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800cffc:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 800cffe:	e005      	b.n	800d00c <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 800d000:	4b05      	ldr	r3, [pc, #20]	; (800d018 <HAL_MPU_ConfigRegion+0x84>)
 800d002:	2200      	movs	r2, #0
 800d004:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 800d006:	4b04      	ldr	r3, [pc, #16]	; (800d018 <HAL_MPU_ConfigRegion+0x84>)
 800d008:	2200      	movs	r2, #0
 800d00a:	611a      	str	r2, [r3, #16]
}
 800d00c:	bf00      	nop
 800d00e:	370c      	adds	r7, #12
 800d010:	46bd      	mov	sp, r7
 800d012:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d016:	4770      	bx	lr
 800d018:	e000ed90 	.word	0xe000ed90

0800d01c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800d01c:	b580      	push	{r7, lr}
 800d01e:	b082      	sub	sp, #8
 800d020:	af00      	add	r7, sp, #0
 800d022:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	2b00      	cmp	r3, #0
 800d028:	d101      	bne.n	800d02e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800d02a:	2301      	movs	r3, #1
 800d02c:	e054      	b.n	800d0d8 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	7f5b      	ldrb	r3, [r3, #29]
 800d032:	b2db      	uxtb	r3, r3
 800d034:	2b00      	cmp	r3, #0
 800d036:	d105      	bne.n	800d044 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	2200      	movs	r2, #0
 800d03c:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800d03e:	6878      	ldr	r0, [r7, #4]
 800d040:	f7f6 fb98 	bl	8003774 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	2202      	movs	r2, #2
 800d048:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	791b      	ldrb	r3, [r3, #4]
 800d04e:	2b00      	cmp	r3, #0
 800d050:	d10c      	bne.n	800d06c <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	681b      	ldr	r3, [r3, #0]
 800d056:	4a22      	ldr	r2, [pc, #136]	; (800d0e0 <HAL_CRC_Init+0xc4>)
 800d058:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	681b      	ldr	r3, [r3, #0]
 800d05e:	689a      	ldr	r2, [r3, #8]
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	681b      	ldr	r3, [r3, #0]
 800d064:	f022 0218 	bic.w	r2, r2, #24
 800d068:	609a      	str	r2, [r3, #8]
 800d06a:	e00c      	b.n	800d086 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	6899      	ldr	r1, [r3, #8]
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	68db      	ldr	r3, [r3, #12]
 800d074:	461a      	mov	r2, r3
 800d076:	6878      	ldr	r0, [r7, #4]
 800d078:	f000 f834 	bl	800d0e4 <HAL_CRCEx_Polynomial_Set>
 800d07c:	4603      	mov	r3, r0
 800d07e:	2b00      	cmp	r3, #0
 800d080:	d001      	beq.n	800d086 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 800d082:	2301      	movs	r3, #1
 800d084:	e028      	b.n	800d0d8 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	795b      	ldrb	r3, [r3, #5]
 800d08a:	2b00      	cmp	r3, #0
 800d08c:	d105      	bne.n	800d09a <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	681b      	ldr	r3, [r3, #0]
 800d092:	f04f 32ff 	mov.w	r2, #4294967295
 800d096:	611a      	str	r2, [r3, #16]
 800d098:	e004      	b.n	800d0a4 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	681b      	ldr	r3, [r3, #0]
 800d09e:	687a      	ldr	r2, [r7, #4]
 800d0a0:	6912      	ldr	r2, [r2, #16]
 800d0a2:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	681b      	ldr	r3, [r3, #0]
 800d0a8:	689b      	ldr	r3, [r3, #8]
 800d0aa:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	695a      	ldr	r2, [r3, #20]
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	681b      	ldr	r3, [r3, #0]
 800d0b6:	430a      	orrs	r2, r1
 800d0b8:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	681b      	ldr	r3, [r3, #0]
 800d0be:	689b      	ldr	r3, [r3, #8]
 800d0c0:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	699a      	ldr	r2, [r3, #24]
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	681b      	ldr	r3, [r3, #0]
 800d0cc:	430a      	orrs	r2, r1
 800d0ce:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	2201      	movs	r2, #1
 800d0d4:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 800d0d6:	2300      	movs	r3, #0
}
 800d0d8:	4618      	mov	r0, r3
 800d0da:	3708      	adds	r7, #8
 800d0dc:	46bd      	mov	sp, r7
 800d0de:	bd80      	pop	{r7, pc}
 800d0e0:	04c11db7 	.word	0x04c11db7

0800d0e4 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 800d0e4:	b480      	push	{r7}
 800d0e6:	b087      	sub	sp, #28
 800d0e8:	af00      	add	r7, sp, #0
 800d0ea:	60f8      	str	r0, [r7, #12]
 800d0ec:	60b9      	str	r1, [r7, #8]
 800d0ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800d0f0:	2300      	movs	r3, #0
 800d0f2:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 800d0f4:	231f      	movs	r3, #31
 800d0f6:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 800d0f8:	bf00      	nop
 800d0fa:	693b      	ldr	r3, [r7, #16]
 800d0fc:	1e5a      	subs	r2, r3, #1
 800d0fe:	613a      	str	r2, [r7, #16]
 800d100:	2b00      	cmp	r3, #0
 800d102:	d009      	beq.n	800d118 <HAL_CRCEx_Polynomial_Set+0x34>
 800d104:	693b      	ldr	r3, [r7, #16]
 800d106:	f003 031f 	and.w	r3, r3, #31
 800d10a:	68ba      	ldr	r2, [r7, #8]
 800d10c:	fa22 f303 	lsr.w	r3, r2, r3
 800d110:	f003 0301 	and.w	r3, r3, #1
 800d114:	2b00      	cmp	r3, #0
 800d116:	d0f0      	beq.n	800d0fa <HAL_CRCEx_Polynomial_Set+0x16>
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	2b18      	cmp	r3, #24
 800d11c:	d846      	bhi.n	800d1ac <HAL_CRCEx_Polynomial_Set+0xc8>
 800d11e:	a201      	add	r2, pc, #4	; (adr r2, 800d124 <HAL_CRCEx_Polynomial_Set+0x40>)
 800d120:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d124:	0800d1b3 	.word	0x0800d1b3
 800d128:	0800d1ad 	.word	0x0800d1ad
 800d12c:	0800d1ad 	.word	0x0800d1ad
 800d130:	0800d1ad 	.word	0x0800d1ad
 800d134:	0800d1ad 	.word	0x0800d1ad
 800d138:	0800d1ad 	.word	0x0800d1ad
 800d13c:	0800d1ad 	.word	0x0800d1ad
 800d140:	0800d1ad 	.word	0x0800d1ad
 800d144:	0800d1a1 	.word	0x0800d1a1
 800d148:	0800d1ad 	.word	0x0800d1ad
 800d14c:	0800d1ad 	.word	0x0800d1ad
 800d150:	0800d1ad 	.word	0x0800d1ad
 800d154:	0800d1ad 	.word	0x0800d1ad
 800d158:	0800d1ad 	.word	0x0800d1ad
 800d15c:	0800d1ad 	.word	0x0800d1ad
 800d160:	0800d1ad 	.word	0x0800d1ad
 800d164:	0800d195 	.word	0x0800d195
 800d168:	0800d1ad 	.word	0x0800d1ad
 800d16c:	0800d1ad 	.word	0x0800d1ad
 800d170:	0800d1ad 	.word	0x0800d1ad
 800d174:	0800d1ad 	.word	0x0800d1ad
 800d178:	0800d1ad 	.word	0x0800d1ad
 800d17c:	0800d1ad 	.word	0x0800d1ad
 800d180:	0800d1ad 	.word	0x0800d1ad
 800d184:	0800d189 	.word	0x0800d189
  }

  switch (PolyLength)
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 800d188:	693b      	ldr	r3, [r7, #16]
 800d18a:	2b06      	cmp	r3, #6
 800d18c:	d913      	bls.n	800d1b6 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 800d18e:	2301      	movs	r3, #1
 800d190:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800d192:	e010      	b.n	800d1b6 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 800d194:	693b      	ldr	r3, [r7, #16]
 800d196:	2b07      	cmp	r3, #7
 800d198:	d90f      	bls.n	800d1ba <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 800d19a:	2301      	movs	r3, #1
 800d19c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800d19e:	e00c      	b.n	800d1ba <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 800d1a0:	693b      	ldr	r3, [r7, #16]
 800d1a2:	2b0f      	cmp	r3, #15
 800d1a4:	d90b      	bls.n	800d1be <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 800d1a6:	2301      	movs	r3, #1
 800d1a8:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800d1aa:	e008      	b.n	800d1be <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 800d1ac:	2301      	movs	r3, #1
 800d1ae:	75fb      	strb	r3, [r7, #23]
      break;
 800d1b0:	e006      	b.n	800d1c0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800d1b2:	bf00      	nop
 800d1b4:	e004      	b.n	800d1c0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800d1b6:	bf00      	nop
 800d1b8:	e002      	b.n	800d1c0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800d1ba:	bf00      	nop
 800d1bc:	e000      	b.n	800d1c0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800d1be:	bf00      	nop
  }
  if (status == HAL_OK)
 800d1c0:	7dfb      	ldrb	r3, [r7, #23]
 800d1c2:	2b00      	cmp	r3, #0
 800d1c4:	d10d      	bne.n	800d1e2 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 800d1c6:	68fb      	ldr	r3, [r7, #12]
 800d1c8:	681b      	ldr	r3, [r3, #0]
 800d1ca:	68ba      	ldr	r2, [r7, #8]
 800d1cc:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800d1ce:	68fb      	ldr	r3, [r7, #12]
 800d1d0:	681b      	ldr	r3, [r3, #0]
 800d1d2:	689b      	ldr	r3, [r3, #8]
 800d1d4:	f023 0118 	bic.w	r1, r3, #24
 800d1d8:	68fb      	ldr	r3, [r7, #12]
 800d1da:	681b      	ldr	r3, [r3, #0]
 800d1dc:	687a      	ldr	r2, [r7, #4]
 800d1de:	430a      	orrs	r2, r1
 800d1e0:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 800d1e2:	7dfb      	ldrb	r3, [r7, #23]
}
 800d1e4:	4618      	mov	r0, r3
 800d1e6:	371c      	adds	r7, #28
 800d1e8:	46bd      	mov	sp, r7
 800d1ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1ee:	4770      	bx	lr

0800d1f0 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 800d1f0:	b580      	push	{r7, lr}
 800d1f2:	b082      	sub	sp, #8
 800d1f4:	af00      	add	r7, sp, #0
 800d1f6:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	2b00      	cmp	r3, #0
 800d1fc:	d101      	bne.n	800d202 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 800d1fe:	2301      	movs	r3, #1
 800d200:	e04f      	b.n	800d2a2 <HAL_DMA2D_Init+0xb2>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800d208:	b2db      	uxtb	r3, r3
 800d20a:	2b00      	cmp	r3, #0
 800d20c:	d106      	bne.n	800d21c <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	2200      	movs	r2, #0
 800d212:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 800d216:	6878      	ldr	r0, [r7, #4]
 800d218:	f7f6 face 	bl	80037b8 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	2202      	movs	r2, #2
 800d220:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	681b      	ldr	r3, [r3, #0]
 800d228:	681a      	ldr	r2, [r3, #0]
 800d22a:	4b20      	ldr	r3, [pc, #128]	; (800d2ac <HAL_DMA2D_Init+0xbc>)
 800d22c:	4013      	ands	r3, r2
 800d22e:	687a      	ldr	r2, [r7, #4]
 800d230:	6851      	ldr	r1, [r2, #4]
 800d232:	687a      	ldr	r2, [r7, #4]
 800d234:	69d2      	ldr	r2, [r2, #28]
 800d236:	4311      	orrs	r1, r2
 800d238:	687a      	ldr	r2, [r7, #4]
 800d23a:	6812      	ldr	r2, [r2, #0]
 800d23c:	430b      	orrs	r3, r1
 800d23e:	6013      	str	r3, [r2, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	681b      	ldr	r3, [r3, #0]
 800d244:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d246:	4b1a      	ldr	r3, [pc, #104]	; (800d2b0 <HAL_DMA2D_Init+0xc0>)
 800d248:	4013      	ands	r3, r2
 800d24a:	687a      	ldr	r2, [r7, #4]
 800d24c:	6891      	ldr	r1, [r2, #8]
 800d24e:	687a      	ldr	r2, [r7, #4]
 800d250:	6992      	ldr	r2, [r2, #24]
 800d252:	4311      	orrs	r1, r2
 800d254:	687a      	ldr	r2, [r7, #4]
 800d256:	6812      	ldr	r2, [r2, #0]
 800d258:	430b      	orrs	r3, r1
 800d25a:	6353      	str	r3, [r2, #52]	; 0x34
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	681b      	ldr	r3, [r3, #0]
 800d260:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d262:	4b14      	ldr	r3, [pc, #80]	; (800d2b4 <HAL_DMA2D_Init+0xc4>)
 800d264:	4013      	ands	r3, r2
 800d266:	687a      	ldr	r2, [r7, #4]
 800d268:	68d1      	ldr	r1, [r2, #12]
 800d26a:	687a      	ldr	r2, [r7, #4]
 800d26c:	6812      	ldr	r2, [r2, #0]
 800d26e:	430b      	orrs	r3, r1
 800d270:	6413      	str	r3, [r2, #64]	; 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	681b      	ldr	r3, [r3, #0]
 800d276:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d278:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	691b      	ldr	r3, [r3, #16]
 800d280:	051a      	lsls	r2, r3, #20
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	695b      	ldr	r3, [r3, #20]
 800d286:	055b      	lsls	r3, r3, #21
 800d288:	431a      	orrs	r2, r3
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	681b      	ldr	r3, [r3, #0]
 800d28e:	430a      	orrs	r2, r1
 800d290:	635a      	str	r2, [r3, #52]	; 0x34
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	2200      	movs	r2, #0
 800d296:	665a      	str	r2, [r3, #100]	; 0x64

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	2201      	movs	r2, #1
 800d29c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  return HAL_OK;
 800d2a0:	2300      	movs	r3, #0
}
 800d2a2:	4618      	mov	r0, r3
 800d2a4:	3708      	adds	r7, #8
 800d2a6:	46bd      	mov	sp, r7
 800d2a8:	bd80      	pop	{r7, pc}
 800d2aa:	bf00      	nop
 800d2ac:	fff8ffbf 	.word	0xfff8ffbf
 800d2b0:	fffffef8 	.word	0xfffffef8
 800d2b4:	ffff0000 	.word	0xffff0000

0800d2b8 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 800d2b8:	b580      	push	{r7, lr}
 800d2ba:	b084      	sub	sp, #16
 800d2bc:	af00      	add	r7, sp, #0
 800d2be:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	681b      	ldr	r3, [r3, #0]
 800d2c4:	685b      	ldr	r3, [r3, #4]
 800d2c6:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	681b      	ldr	r3, [r3, #0]
 800d2cc:	681b      	ldr	r3, [r3, #0]
 800d2ce:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800d2d0:	68fb      	ldr	r3, [r7, #12]
 800d2d2:	f003 0301 	and.w	r3, r3, #1
 800d2d6:	2b00      	cmp	r3, #0
 800d2d8:	d026      	beq.n	800d328 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 800d2da:	68bb      	ldr	r3, [r7, #8]
 800d2dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d2e0:	2b00      	cmp	r3, #0
 800d2e2:	d021      	beq.n	800d328 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	681b      	ldr	r3, [r3, #0]
 800d2e8:	681a      	ldr	r2, [r3, #0]
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	681b      	ldr	r3, [r3, #0]
 800d2ee:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800d2f2:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d2f8:	f043 0201 	orr.w	r2, r3, #1
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	681b      	ldr	r3, [r3, #0]
 800d304:	2201      	movs	r2, #1
 800d306:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	2204      	movs	r2, #4
 800d30c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	2200      	movs	r2, #0
 800d314:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      if (hdma2d->XferErrorCallback != NULL)
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d31c:	2b00      	cmp	r3, #0
 800d31e:	d003      	beq.n	800d328 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d324:	6878      	ldr	r0, [r7, #4]
 800d326:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800d328:	68fb      	ldr	r3, [r7, #12]
 800d32a:	f003 0320 	and.w	r3, r3, #32
 800d32e:	2b00      	cmp	r3, #0
 800d330:	d026      	beq.n	800d380 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 800d332:	68bb      	ldr	r3, [r7, #8]
 800d334:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800d338:	2b00      	cmp	r3, #0
 800d33a:	d021      	beq.n	800d380 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	681b      	ldr	r3, [r3, #0]
 800d340:	681a      	ldr	r2, [r3, #0]
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	681b      	ldr	r3, [r3, #0]
 800d346:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800d34a:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	681b      	ldr	r3, [r3, #0]
 800d350:	2220      	movs	r2, #32
 800d352:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d358:	f043 0202 	orr.w	r2, r3, #2
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	2204      	movs	r2, #4
 800d364:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	2200      	movs	r2, #0
 800d36c:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      if (hdma2d->XferErrorCallback != NULL)
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d374:	2b00      	cmp	r3, #0
 800d376:	d003      	beq.n	800d380 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d37c:	6878      	ldr	r0, [r7, #4]
 800d37e:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 800d380:	68fb      	ldr	r3, [r7, #12]
 800d382:	f003 0308 	and.w	r3, r3, #8
 800d386:	2b00      	cmp	r3, #0
 800d388:	d026      	beq.n	800d3d8 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 800d38a:	68bb      	ldr	r3, [r7, #8]
 800d38c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d390:	2b00      	cmp	r3, #0
 800d392:	d021      	beq.n	800d3d8 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	681b      	ldr	r3, [r3, #0]
 800d398:	681a      	ldr	r2, [r3, #0]
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	681b      	ldr	r3, [r3, #0]
 800d39e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800d3a2:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	681b      	ldr	r3, [r3, #0]
 800d3a8:	2208      	movs	r2, #8
 800d3aa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d3b0:	f043 0204 	orr.w	r2, r3, #4
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	665a      	str	r2, [r3, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	2204      	movs	r2, #4
 800d3bc:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	2200      	movs	r2, #0
 800d3c4:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      if (hdma2d->XferErrorCallback != NULL)
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3cc:	2b00      	cmp	r3, #0
 800d3ce:	d003      	beq.n	800d3d8 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3d4:	6878      	ldr	r0, [r7, #4]
 800d3d6:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 800d3d8:	68fb      	ldr	r3, [r7, #12]
 800d3da:	f003 0304 	and.w	r3, r3, #4
 800d3de:	2b00      	cmp	r3, #0
 800d3e0:	d013      	beq.n	800d40a <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 800d3e2:	68bb      	ldr	r3, [r7, #8]
 800d3e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d3e8:	2b00      	cmp	r3, #0
 800d3ea:	d00e      	beq.n	800d40a <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	681b      	ldr	r3, [r3, #0]
 800d3f0:	681a      	ldr	r2, [r3, #0]
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	681b      	ldr	r3, [r3, #0]
 800d3f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d3fa:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	681b      	ldr	r3, [r3, #0]
 800d400:	2204      	movs	r2, #4
 800d402:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 800d404:	6878      	ldr	r0, [r7, #4]
 800d406:	f000 f853 	bl	800d4b0 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 800d40a:	68fb      	ldr	r3, [r7, #12]
 800d40c:	f003 0302 	and.w	r3, r3, #2
 800d410:	2b00      	cmp	r3, #0
 800d412:	d024      	beq.n	800d45e <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 800d414:	68bb      	ldr	r3, [r7, #8]
 800d416:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d41a:	2b00      	cmp	r3, #0
 800d41c:	d01f      	beq.n	800d45e <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	681b      	ldr	r3, [r3, #0]
 800d422:	681a      	ldr	r2, [r3, #0]
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	681b      	ldr	r3, [r3, #0]
 800d428:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800d42c:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	681b      	ldr	r3, [r3, #0]
 800d432:	2202      	movs	r2, #2
 800d434:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	665a      	str	r2, [r3, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	2201      	movs	r2, #1
 800d442:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	2200      	movs	r2, #0
 800d44a:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      if (hdma2d->XferCpltCallback != NULL)
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	6a1b      	ldr	r3, [r3, #32]
 800d452:	2b00      	cmp	r3, #0
 800d454:	d003      	beq.n	800d45e <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	6a1b      	ldr	r3, [r3, #32]
 800d45a:	6878      	ldr	r0, [r7, #4]
 800d45c:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 800d45e:	68fb      	ldr	r3, [r7, #12]
 800d460:	f003 0310 	and.w	r3, r3, #16
 800d464:	2b00      	cmp	r3, #0
 800d466:	d01f      	beq.n	800d4a8 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 800d468:	68bb      	ldr	r3, [r7, #8]
 800d46a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800d46e:	2b00      	cmp	r3, #0
 800d470:	d01a      	beq.n	800d4a8 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	681b      	ldr	r3, [r3, #0]
 800d476:	681a      	ldr	r2, [r3, #0]
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	681b      	ldr	r3, [r3, #0]
 800d47c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800d480:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	681b      	ldr	r3, [r3, #0]
 800d486:	2210      	movs	r2, #16
 800d488:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	665a      	str	r2, [r3, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	2201      	movs	r2, #1
 800d496:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	2200      	movs	r2, #0
 800d49e:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 800d4a2:	6878      	ldr	r0, [r7, #4]
 800d4a4:	f000 f80e 	bl	800d4c4 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 800d4a8:	bf00      	nop
 800d4aa:	3710      	adds	r7, #16
 800d4ac:	46bd      	mov	sp, r7
 800d4ae:	bd80      	pop	{r7, pc}

0800d4b0 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 800d4b0:	b480      	push	{r7}
 800d4b2:	b083      	sub	sp, #12
 800d4b4:	af00      	add	r7, sp, #0
 800d4b6:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 800d4b8:	bf00      	nop
 800d4ba:	370c      	adds	r7, #12
 800d4bc:	46bd      	mov	sp, r7
 800d4be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4c2:	4770      	bx	lr

0800d4c4 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 800d4c4:	b480      	push	{r7}
 800d4c6:	b083      	sub	sp, #12
 800d4c8:	af00      	add	r7, sp, #0
 800d4ca:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 800d4cc:	bf00      	nop
 800d4ce:	370c      	adds	r7, #12
 800d4d0:	46bd      	mov	sp, r7
 800d4d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4d6:	4770      	bx	lr

0800d4d8 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 800d4d8:	b480      	push	{r7}
 800d4da:	b087      	sub	sp, #28
 800d4dc:	af00      	add	r7, sp, #0
 800d4de:	6078      	str	r0, [r7, #4]
 800d4e0:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	685b      	ldr	r3, [r3, #4]
 800d4e6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
    }
  }
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));

  if ((LayerIdx == DMA2D_FOREGROUND_LAYER) && (hdma2d->LayerCfg[LayerIdx].InputColorMode == DMA2D_INPUT_YCBCR))
 800d4ea:	683b      	ldr	r3, [r7, #0]
 800d4ec:	2b01      	cmp	r3, #1
 800d4ee:	d104      	bne.n	800d4fa <HAL_DMA2D_ConfigLayer+0x22>
 800d4f0:	683a      	ldr	r2, [r7, #0]
 800d4f2:	4613      	mov	r3, r2
 800d4f4:	00db      	lsls	r3, r3, #3
 800d4f6:	1a9b      	subs	r3, r3, r2
 800d4f8:	009b      	lsls	r3, r3, #2
  {
    assert_param(IS_DMA2D_CHROMA_SUB_SAMPLING(hdma2d->LayerCfg[LayerIdx].ChromaSubSampling));
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800d500:	2b01      	cmp	r3, #1
 800d502:	d101      	bne.n	800d508 <HAL_DMA2D_ConfigLayer+0x30>
 800d504:	2302      	movs	r3, #2
 800d506:	e092      	b.n	800d62e <HAL_DMA2D_ConfigLayer+0x156>
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	2201      	movs	r2, #1
 800d50c:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	2202      	movs	r2, #2
 800d514:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 800d518:	683a      	ldr	r2, [r7, #0]
 800d51a:	4613      	mov	r3, r2
 800d51c:	00db      	lsls	r3, r3, #3
 800d51e:	1a9b      	subs	r3, r3, r2
 800d520:	009b      	lsls	r3, r3, #2
 800d522:	3328      	adds	r3, #40	; 0x28
 800d524:	687a      	ldr	r2, [r7, #4]
 800d526:	4413      	add	r3, r2
 800d528:	60fb      	str	r3, [r7, #12]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 800d52a:	68fb      	ldr	r3, [r7, #12]
 800d52c:	685a      	ldr	r2, [r3, #4]
 800d52e:	68fb      	ldr	r3, [r7, #12]
 800d530:	689b      	ldr	r3, [r3, #8]
 800d532:	041b      	lsls	r3, r3, #16
 800d534:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 800d536:	68fb      	ldr	r3, [r7, #12]
 800d538:	691b      	ldr	r3, [r3, #16]
 800d53a:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 800d53c:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 800d53e:	68fb      	ldr	r3, [r7, #12]
 800d540:	695b      	ldr	r3, [r3, #20]
 800d542:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 800d544:	4313      	orrs	r3, r2
 800d546:	613b      	str	r3, [r7, #16]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 800d548:	4b3c      	ldr	r3, [pc, #240]	; (800d63c <HAL_DMA2D_ConfigLayer+0x164>)
 800d54a:	617b      	str	r3, [r7, #20]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800d54c:	68fb      	ldr	r3, [r7, #12]
 800d54e:	685b      	ldr	r3, [r3, #4]
 800d550:	2b0a      	cmp	r3, #10
 800d552:	d003      	beq.n	800d55c <HAL_DMA2D_ConfigLayer+0x84>
 800d554:	68fb      	ldr	r3, [r7, #12]
 800d556:	685b      	ldr	r3, [r3, #4]
 800d558:	2b09      	cmp	r3, #9
 800d55a:	d107      	bne.n	800d56c <HAL_DMA2D_ConfigLayer+0x94>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 800d55c:	68fb      	ldr	r3, [r7, #12]
 800d55e:	68db      	ldr	r3, [r3, #12]
 800d560:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800d564:	693a      	ldr	r2, [r7, #16]
 800d566:	4313      	orrs	r3, r2
 800d568:	613b      	str	r3, [r7, #16]
 800d56a:	e005      	b.n	800d578 <HAL_DMA2D_ConfigLayer+0xa0>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 800d56c:	68fb      	ldr	r3, [r7, #12]
 800d56e:	68db      	ldr	r3, [r3, #12]
 800d570:	061b      	lsls	r3, r3, #24
 800d572:	693a      	ldr	r2, [r7, #16]
 800d574:	4313      	orrs	r3, r2
 800d576:	613b      	str	r3, [r7, #16]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 800d578:	683b      	ldr	r3, [r7, #0]
 800d57a:	2b00      	cmp	r3, #0
 800d57c:	d120      	bne.n	800d5c0 <HAL_DMA2D_ConfigLayer+0xe8>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	681b      	ldr	r3, [r3, #0]
 800d582:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d584:	697b      	ldr	r3, [r7, #20]
 800d586:	43db      	mvns	r3, r3
 800d588:	ea02 0103 	and.w	r1, r2, r3
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	681b      	ldr	r3, [r3, #0]
 800d590:	693a      	ldr	r2, [r7, #16]
 800d592:	430a      	orrs	r2, r1
 800d594:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	681b      	ldr	r3, [r3, #0]
 800d59a:	68fa      	ldr	r2, [r7, #12]
 800d59c:	6812      	ldr	r2, [r2, #0]
 800d59e:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800d5a0:	68fb      	ldr	r3, [r7, #12]
 800d5a2:	685b      	ldr	r3, [r3, #4]
 800d5a4:	2b0a      	cmp	r3, #10
 800d5a6:	d003      	beq.n	800d5b0 <HAL_DMA2D_ConfigLayer+0xd8>
 800d5a8:	68fb      	ldr	r3, [r7, #12]
 800d5aa:	685b      	ldr	r3, [r3, #4]
 800d5ac:	2b09      	cmp	r3, #9
 800d5ae:	d135      	bne.n	800d61c <HAL_DMA2D_ConfigLayer+0x144>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 800d5b0:	68fb      	ldr	r3, [r7, #12]
 800d5b2:	68da      	ldr	r2, [r3, #12]
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	681b      	ldr	r3, [r3, #0]
 800d5b8:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800d5bc:	629a      	str	r2, [r3, #40]	; 0x28
 800d5be:	e02d      	b.n	800d61c <HAL_DMA2D_ConfigLayer+0x144>
  }
  /* Configure the foreground DMA2D layer */
  else
  {

    if (pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
 800d5c0:	68fb      	ldr	r3, [r7, #12]
 800d5c2:	685b      	ldr	r3, [r3, #4]
 800d5c4:	2b0b      	cmp	r3, #11
 800d5c6:	d109      	bne.n	800d5dc <HAL_DMA2D_ConfigLayer+0x104>
    {
      regValue |= (pLayerCfg->ChromaSubSampling << DMA2D_FGPFCCR_CSS_Pos);
 800d5c8:	68fb      	ldr	r3, [r7, #12]
 800d5ca:	699b      	ldr	r3, [r3, #24]
 800d5cc:	049b      	lsls	r3, r3, #18
 800d5ce:	693a      	ldr	r2, [r7, #16]
 800d5d0:	4313      	orrs	r3, r2
 800d5d2:	613b      	str	r3, [r7, #16]
      regMask  |= DMA2D_FGPFCCR_CSS;
 800d5d4:	697b      	ldr	r3, [r7, #20]
 800d5d6:	f443 2340 	orr.w	r3, r3, #786432	; 0xc0000
 800d5da:	617b      	str	r3, [r7, #20]
    }

    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	681b      	ldr	r3, [r3, #0]
 800d5e0:	69da      	ldr	r2, [r3, #28]
 800d5e2:	697b      	ldr	r3, [r7, #20]
 800d5e4:	43db      	mvns	r3, r3
 800d5e6:	ea02 0103 	and.w	r1, r2, r3
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	681b      	ldr	r3, [r3, #0]
 800d5ee:	693a      	ldr	r2, [r7, #16]
 800d5f0:	430a      	orrs	r2, r1
 800d5f2:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	681b      	ldr	r3, [r3, #0]
 800d5f8:	68fa      	ldr	r2, [r7, #12]
 800d5fa:	6812      	ldr	r2, [r2, #0]
 800d5fc:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800d5fe:	68fb      	ldr	r3, [r7, #12]
 800d600:	685b      	ldr	r3, [r3, #4]
 800d602:	2b0a      	cmp	r3, #10
 800d604:	d003      	beq.n	800d60e <HAL_DMA2D_ConfigLayer+0x136>
 800d606:	68fb      	ldr	r3, [r7, #12]
 800d608:	685b      	ldr	r3, [r3, #4]
 800d60a:	2b09      	cmp	r3, #9
 800d60c:	d106      	bne.n	800d61c <HAL_DMA2D_ConfigLayer+0x144>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 800d60e:	68fb      	ldr	r3, [r7, #12]
 800d610:	68da      	ldr	r2, [r3, #12]
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	681b      	ldr	r3, [r3, #0]
 800d616:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800d61a:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	2201      	movs	r2, #1
 800d620:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	2200      	movs	r2, #0
 800d628:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
 800d62c:	2300      	movs	r3, #0
}
 800d62e:	4618      	mov	r0, r3
 800d630:	371c      	adds	r7, #28
 800d632:	46bd      	mov	sp, r7
 800d634:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d638:	4770      	bx	lr
 800d63a:	bf00      	nop
 800d63c:	ff33000f 	.word	0xff33000f

0800d640 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800d640:	b480      	push	{r7}
 800d642:	b089      	sub	sp, #36	; 0x24
 800d644:	af00      	add	r7, sp, #0
 800d646:	6078      	str	r0, [r7, #4]
 800d648:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800d64a:	2300      	movs	r3, #0
 800d64c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800d64e:	4b89      	ldr	r3, [pc, #548]	; (800d874 <HAL_GPIO_Init+0x234>)
 800d650:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800d652:	e194      	b.n	800d97e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800d654:	683b      	ldr	r3, [r7, #0]
 800d656:	681a      	ldr	r2, [r3, #0]
 800d658:	2101      	movs	r1, #1
 800d65a:	69fb      	ldr	r3, [r7, #28]
 800d65c:	fa01 f303 	lsl.w	r3, r1, r3
 800d660:	4013      	ands	r3, r2
 800d662:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800d664:	693b      	ldr	r3, [r7, #16]
 800d666:	2b00      	cmp	r3, #0
 800d668:	f000 8186 	beq.w	800d978 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800d66c:	683b      	ldr	r3, [r7, #0]
 800d66e:	685b      	ldr	r3, [r3, #4]
 800d670:	2b01      	cmp	r3, #1
 800d672:	d00b      	beq.n	800d68c <HAL_GPIO_Init+0x4c>
 800d674:	683b      	ldr	r3, [r7, #0]
 800d676:	685b      	ldr	r3, [r3, #4]
 800d678:	2b02      	cmp	r3, #2
 800d67a:	d007      	beq.n	800d68c <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800d67c:	683b      	ldr	r3, [r7, #0]
 800d67e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800d680:	2b11      	cmp	r3, #17
 800d682:	d003      	beq.n	800d68c <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800d684:	683b      	ldr	r3, [r7, #0]
 800d686:	685b      	ldr	r3, [r3, #4]
 800d688:	2b12      	cmp	r3, #18
 800d68a:	d130      	bne.n	800d6ee <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	689b      	ldr	r3, [r3, #8]
 800d690:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800d692:	69fb      	ldr	r3, [r7, #28]
 800d694:	005b      	lsls	r3, r3, #1
 800d696:	2203      	movs	r2, #3
 800d698:	fa02 f303 	lsl.w	r3, r2, r3
 800d69c:	43db      	mvns	r3, r3
 800d69e:	69ba      	ldr	r2, [r7, #24]
 800d6a0:	4013      	ands	r3, r2
 800d6a2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800d6a4:	683b      	ldr	r3, [r7, #0]
 800d6a6:	68da      	ldr	r2, [r3, #12]
 800d6a8:	69fb      	ldr	r3, [r7, #28]
 800d6aa:	005b      	lsls	r3, r3, #1
 800d6ac:	fa02 f303 	lsl.w	r3, r2, r3
 800d6b0:	69ba      	ldr	r2, [r7, #24]
 800d6b2:	4313      	orrs	r3, r2
 800d6b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	69ba      	ldr	r2, [r7, #24]
 800d6ba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	685b      	ldr	r3, [r3, #4]
 800d6c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800d6c2:	2201      	movs	r2, #1
 800d6c4:	69fb      	ldr	r3, [r7, #28]
 800d6c6:	fa02 f303 	lsl.w	r3, r2, r3
 800d6ca:	43db      	mvns	r3, r3
 800d6cc:	69ba      	ldr	r2, [r7, #24]
 800d6ce:	4013      	ands	r3, r2
 800d6d0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800d6d2:	683b      	ldr	r3, [r7, #0]
 800d6d4:	685b      	ldr	r3, [r3, #4]
 800d6d6:	091b      	lsrs	r3, r3, #4
 800d6d8:	f003 0201 	and.w	r2, r3, #1
 800d6dc:	69fb      	ldr	r3, [r7, #28]
 800d6de:	fa02 f303 	lsl.w	r3, r2, r3
 800d6e2:	69ba      	ldr	r2, [r7, #24]
 800d6e4:	4313      	orrs	r3, r2
 800d6e6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	69ba      	ldr	r2, [r7, #24]
 800d6ec:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	68db      	ldr	r3, [r3, #12]
 800d6f2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800d6f4:	69fb      	ldr	r3, [r7, #28]
 800d6f6:	005b      	lsls	r3, r3, #1
 800d6f8:	2203      	movs	r2, #3
 800d6fa:	fa02 f303 	lsl.w	r3, r2, r3
 800d6fe:	43db      	mvns	r3, r3
 800d700:	69ba      	ldr	r2, [r7, #24]
 800d702:	4013      	ands	r3, r2
 800d704:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800d706:	683b      	ldr	r3, [r7, #0]
 800d708:	689a      	ldr	r2, [r3, #8]
 800d70a:	69fb      	ldr	r3, [r7, #28]
 800d70c:	005b      	lsls	r3, r3, #1
 800d70e:	fa02 f303 	lsl.w	r3, r2, r3
 800d712:	69ba      	ldr	r2, [r7, #24]
 800d714:	4313      	orrs	r3, r2
 800d716:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	69ba      	ldr	r2, [r7, #24]
 800d71c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800d71e:	683b      	ldr	r3, [r7, #0]
 800d720:	685b      	ldr	r3, [r3, #4]
 800d722:	2b02      	cmp	r3, #2
 800d724:	d003      	beq.n	800d72e <HAL_GPIO_Init+0xee>
 800d726:	683b      	ldr	r3, [r7, #0]
 800d728:	685b      	ldr	r3, [r3, #4]
 800d72a:	2b12      	cmp	r3, #18
 800d72c:	d123      	bne.n	800d776 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800d72e:	69fb      	ldr	r3, [r7, #28]
 800d730:	08da      	lsrs	r2, r3, #3
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	3208      	adds	r2, #8
 800d736:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d73a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800d73c:	69fb      	ldr	r3, [r7, #28]
 800d73e:	f003 0307 	and.w	r3, r3, #7
 800d742:	009b      	lsls	r3, r3, #2
 800d744:	220f      	movs	r2, #15
 800d746:	fa02 f303 	lsl.w	r3, r2, r3
 800d74a:	43db      	mvns	r3, r3
 800d74c:	69ba      	ldr	r2, [r7, #24]
 800d74e:	4013      	ands	r3, r2
 800d750:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800d752:	683b      	ldr	r3, [r7, #0]
 800d754:	691a      	ldr	r2, [r3, #16]
 800d756:	69fb      	ldr	r3, [r7, #28]
 800d758:	f003 0307 	and.w	r3, r3, #7
 800d75c:	009b      	lsls	r3, r3, #2
 800d75e:	fa02 f303 	lsl.w	r3, r2, r3
 800d762:	69ba      	ldr	r2, [r7, #24]
 800d764:	4313      	orrs	r3, r2
 800d766:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800d768:	69fb      	ldr	r3, [r7, #28]
 800d76a:	08da      	lsrs	r2, r3, #3
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	3208      	adds	r2, #8
 800d770:	69b9      	ldr	r1, [r7, #24]
 800d772:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	681b      	ldr	r3, [r3, #0]
 800d77a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800d77c:	69fb      	ldr	r3, [r7, #28]
 800d77e:	005b      	lsls	r3, r3, #1
 800d780:	2203      	movs	r2, #3
 800d782:	fa02 f303 	lsl.w	r3, r2, r3
 800d786:	43db      	mvns	r3, r3
 800d788:	69ba      	ldr	r2, [r7, #24]
 800d78a:	4013      	ands	r3, r2
 800d78c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800d78e:	683b      	ldr	r3, [r7, #0]
 800d790:	685b      	ldr	r3, [r3, #4]
 800d792:	f003 0203 	and.w	r2, r3, #3
 800d796:	69fb      	ldr	r3, [r7, #28]
 800d798:	005b      	lsls	r3, r3, #1
 800d79a:	fa02 f303 	lsl.w	r3, r2, r3
 800d79e:	69ba      	ldr	r2, [r7, #24]
 800d7a0:	4313      	orrs	r3, r2
 800d7a2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	69ba      	ldr	r2, [r7, #24]
 800d7a8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800d7aa:	683b      	ldr	r3, [r7, #0]
 800d7ac:	685b      	ldr	r3, [r3, #4]
 800d7ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d7b2:	2b00      	cmp	r3, #0
 800d7b4:	f000 80e0 	beq.w	800d978 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800d7b8:	4b2f      	ldr	r3, [pc, #188]	; (800d878 <HAL_GPIO_Init+0x238>)
 800d7ba:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800d7be:	4a2e      	ldr	r2, [pc, #184]	; (800d878 <HAL_GPIO_Init+0x238>)
 800d7c0:	f043 0302 	orr.w	r3, r3, #2
 800d7c4:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 800d7c8:	4b2b      	ldr	r3, [pc, #172]	; (800d878 <HAL_GPIO_Init+0x238>)
 800d7ca:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800d7ce:	f003 0302 	and.w	r3, r3, #2
 800d7d2:	60fb      	str	r3, [r7, #12]
 800d7d4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800d7d6:	4a29      	ldr	r2, [pc, #164]	; (800d87c <HAL_GPIO_Init+0x23c>)
 800d7d8:	69fb      	ldr	r3, [r7, #28]
 800d7da:	089b      	lsrs	r3, r3, #2
 800d7dc:	3302      	adds	r3, #2
 800d7de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d7e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800d7e4:	69fb      	ldr	r3, [r7, #28]
 800d7e6:	f003 0303 	and.w	r3, r3, #3
 800d7ea:	009b      	lsls	r3, r3, #2
 800d7ec:	220f      	movs	r2, #15
 800d7ee:	fa02 f303 	lsl.w	r3, r2, r3
 800d7f2:	43db      	mvns	r3, r3
 800d7f4:	69ba      	ldr	r2, [r7, #24]
 800d7f6:	4013      	ands	r3, r2
 800d7f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	4a20      	ldr	r2, [pc, #128]	; (800d880 <HAL_GPIO_Init+0x240>)
 800d7fe:	4293      	cmp	r3, r2
 800d800:	d052      	beq.n	800d8a8 <HAL_GPIO_Init+0x268>
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	4a1f      	ldr	r2, [pc, #124]	; (800d884 <HAL_GPIO_Init+0x244>)
 800d806:	4293      	cmp	r3, r2
 800d808:	d031      	beq.n	800d86e <HAL_GPIO_Init+0x22e>
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	4a1e      	ldr	r2, [pc, #120]	; (800d888 <HAL_GPIO_Init+0x248>)
 800d80e:	4293      	cmp	r3, r2
 800d810:	d02b      	beq.n	800d86a <HAL_GPIO_Init+0x22a>
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	4a1d      	ldr	r2, [pc, #116]	; (800d88c <HAL_GPIO_Init+0x24c>)
 800d816:	4293      	cmp	r3, r2
 800d818:	d025      	beq.n	800d866 <HAL_GPIO_Init+0x226>
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	4a1c      	ldr	r2, [pc, #112]	; (800d890 <HAL_GPIO_Init+0x250>)
 800d81e:	4293      	cmp	r3, r2
 800d820:	d01f      	beq.n	800d862 <HAL_GPIO_Init+0x222>
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	4a1b      	ldr	r2, [pc, #108]	; (800d894 <HAL_GPIO_Init+0x254>)
 800d826:	4293      	cmp	r3, r2
 800d828:	d019      	beq.n	800d85e <HAL_GPIO_Init+0x21e>
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	4a1a      	ldr	r2, [pc, #104]	; (800d898 <HAL_GPIO_Init+0x258>)
 800d82e:	4293      	cmp	r3, r2
 800d830:	d013      	beq.n	800d85a <HAL_GPIO_Init+0x21a>
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	4a19      	ldr	r2, [pc, #100]	; (800d89c <HAL_GPIO_Init+0x25c>)
 800d836:	4293      	cmp	r3, r2
 800d838:	d00d      	beq.n	800d856 <HAL_GPIO_Init+0x216>
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	4a18      	ldr	r2, [pc, #96]	; (800d8a0 <HAL_GPIO_Init+0x260>)
 800d83e:	4293      	cmp	r3, r2
 800d840:	d007      	beq.n	800d852 <HAL_GPIO_Init+0x212>
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	4a17      	ldr	r2, [pc, #92]	; (800d8a4 <HAL_GPIO_Init+0x264>)
 800d846:	4293      	cmp	r3, r2
 800d848:	d101      	bne.n	800d84e <HAL_GPIO_Init+0x20e>
 800d84a:	2309      	movs	r3, #9
 800d84c:	e02d      	b.n	800d8aa <HAL_GPIO_Init+0x26a>
 800d84e:	230a      	movs	r3, #10
 800d850:	e02b      	b.n	800d8aa <HAL_GPIO_Init+0x26a>
 800d852:	2308      	movs	r3, #8
 800d854:	e029      	b.n	800d8aa <HAL_GPIO_Init+0x26a>
 800d856:	2307      	movs	r3, #7
 800d858:	e027      	b.n	800d8aa <HAL_GPIO_Init+0x26a>
 800d85a:	2306      	movs	r3, #6
 800d85c:	e025      	b.n	800d8aa <HAL_GPIO_Init+0x26a>
 800d85e:	2305      	movs	r3, #5
 800d860:	e023      	b.n	800d8aa <HAL_GPIO_Init+0x26a>
 800d862:	2304      	movs	r3, #4
 800d864:	e021      	b.n	800d8aa <HAL_GPIO_Init+0x26a>
 800d866:	2303      	movs	r3, #3
 800d868:	e01f      	b.n	800d8aa <HAL_GPIO_Init+0x26a>
 800d86a:	2302      	movs	r3, #2
 800d86c:	e01d      	b.n	800d8aa <HAL_GPIO_Init+0x26a>
 800d86e:	2301      	movs	r3, #1
 800d870:	e01b      	b.n	800d8aa <HAL_GPIO_Init+0x26a>
 800d872:	bf00      	nop
 800d874:	58000080 	.word	0x58000080
 800d878:	58024400 	.word	0x58024400
 800d87c:	58000400 	.word	0x58000400
 800d880:	58020000 	.word	0x58020000
 800d884:	58020400 	.word	0x58020400
 800d888:	58020800 	.word	0x58020800
 800d88c:	58020c00 	.word	0x58020c00
 800d890:	58021000 	.word	0x58021000
 800d894:	58021400 	.word	0x58021400
 800d898:	58021800 	.word	0x58021800
 800d89c:	58021c00 	.word	0x58021c00
 800d8a0:	58022000 	.word	0x58022000
 800d8a4:	58022400 	.word	0x58022400
 800d8a8:	2300      	movs	r3, #0
 800d8aa:	69fa      	ldr	r2, [r7, #28]
 800d8ac:	f002 0203 	and.w	r2, r2, #3
 800d8b0:	0092      	lsls	r2, r2, #2
 800d8b2:	4093      	lsls	r3, r2
 800d8b4:	69ba      	ldr	r2, [r7, #24]
 800d8b6:	4313      	orrs	r3, r2
 800d8b8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800d8ba:	4938      	ldr	r1, [pc, #224]	; (800d99c <HAL_GPIO_Init+0x35c>)
 800d8bc:	69fb      	ldr	r3, [r7, #28]
 800d8be:	089b      	lsrs	r3, r3, #2
 800d8c0:	3302      	adds	r3, #2
 800d8c2:	69ba      	ldr	r2, [r7, #24]
 800d8c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800d8c8:	697b      	ldr	r3, [r7, #20]
 800d8ca:	681b      	ldr	r3, [r3, #0]
 800d8cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800d8ce:	693b      	ldr	r3, [r7, #16]
 800d8d0:	43db      	mvns	r3, r3
 800d8d2:	69ba      	ldr	r2, [r7, #24]
 800d8d4:	4013      	ands	r3, r2
 800d8d6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800d8d8:	683b      	ldr	r3, [r7, #0]
 800d8da:	685b      	ldr	r3, [r3, #4]
 800d8dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d8e0:	2b00      	cmp	r3, #0
 800d8e2:	d003      	beq.n	800d8ec <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800d8e4:	69ba      	ldr	r2, [r7, #24]
 800d8e6:	693b      	ldr	r3, [r7, #16]
 800d8e8:	4313      	orrs	r3, r2
 800d8ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800d8ec:	697b      	ldr	r3, [r7, #20]
 800d8ee:	69ba      	ldr	r2, [r7, #24]
 800d8f0:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 800d8f2:	697b      	ldr	r3, [r7, #20]
 800d8f4:	685b      	ldr	r3, [r3, #4]
 800d8f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800d8f8:	693b      	ldr	r3, [r7, #16]
 800d8fa:	43db      	mvns	r3, r3
 800d8fc:	69ba      	ldr	r2, [r7, #24]
 800d8fe:	4013      	ands	r3, r2
 800d900:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800d902:	683b      	ldr	r3, [r7, #0]
 800d904:	685b      	ldr	r3, [r3, #4]
 800d906:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d90a:	2b00      	cmp	r3, #0
 800d90c:	d003      	beq.n	800d916 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800d90e:	69ba      	ldr	r2, [r7, #24]
 800d910:	693b      	ldr	r3, [r7, #16]
 800d912:	4313      	orrs	r3, r2
 800d914:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800d916:	697b      	ldr	r3, [r7, #20]
 800d918:	69ba      	ldr	r2, [r7, #24]
 800d91a:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800d91c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d920:	681b      	ldr	r3, [r3, #0]
 800d922:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800d924:	693b      	ldr	r3, [r7, #16]
 800d926:	43db      	mvns	r3, r3
 800d928:	69ba      	ldr	r2, [r7, #24]
 800d92a:	4013      	ands	r3, r2
 800d92c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800d92e:	683b      	ldr	r3, [r7, #0]
 800d930:	685b      	ldr	r3, [r3, #4]
 800d932:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d936:	2b00      	cmp	r3, #0
 800d938:	d003      	beq.n	800d942 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 800d93a:	69ba      	ldr	r2, [r7, #24]
 800d93c:	693b      	ldr	r3, [r7, #16]
 800d93e:	4313      	orrs	r3, r2
 800d940:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800d942:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800d946:	69bb      	ldr	r3, [r7, #24]
 800d948:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800d94a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d94e:	685b      	ldr	r3, [r3, #4]
 800d950:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800d952:	693b      	ldr	r3, [r7, #16]
 800d954:	43db      	mvns	r3, r3
 800d956:	69ba      	ldr	r2, [r7, #24]
 800d958:	4013      	ands	r3, r2
 800d95a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800d95c:	683b      	ldr	r3, [r7, #0]
 800d95e:	685b      	ldr	r3, [r3, #4]
 800d960:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800d964:	2b00      	cmp	r3, #0
 800d966:	d003      	beq.n	800d970 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 800d968:	69ba      	ldr	r2, [r7, #24]
 800d96a:	693b      	ldr	r3, [r7, #16]
 800d96c:	4313      	orrs	r3, r2
 800d96e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800d970:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800d974:	69bb      	ldr	r3, [r7, #24]
 800d976:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 800d978:	69fb      	ldr	r3, [r7, #28]
 800d97a:	3301      	adds	r3, #1
 800d97c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800d97e:	683b      	ldr	r3, [r7, #0]
 800d980:	681a      	ldr	r2, [r3, #0]
 800d982:	69fb      	ldr	r3, [r7, #28]
 800d984:	fa22 f303 	lsr.w	r3, r2, r3
 800d988:	2b00      	cmp	r3, #0
 800d98a:	f47f ae63 	bne.w	800d654 <HAL_GPIO_Init+0x14>
  }
}
 800d98e:	bf00      	nop
 800d990:	bf00      	nop
 800d992:	3724      	adds	r7, #36	; 0x24
 800d994:	46bd      	mov	sp, r7
 800d996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d99a:	4770      	bx	lr
 800d99c:	58000400 	.word	0x58000400

0800d9a0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800d9a0:	b480      	push	{r7}
 800d9a2:	b087      	sub	sp, #28
 800d9a4:	af00      	add	r7, sp, #0
 800d9a6:	6078      	str	r0, [r7, #4]
 800d9a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800d9aa:	2300      	movs	r3, #0
 800d9ac:	617b      	str	r3, [r7, #20]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800d9ae:	4b75      	ldr	r3, [pc, #468]	; (800db84 <HAL_GPIO_DeInit+0x1e4>)
 800d9b0:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 800d9b2:	e0d9      	b.n	800db68 <HAL_GPIO_DeInit+0x1c8>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 800d9b4:	2201      	movs	r2, #1
 800d9b6:	697b      	ldr	r3, [r7, #20]
 800d9b8:	fa02 f303 	lsl.w	r3, r2, r3
 800d9bc:	683a      	ldr	r2, [r7, #0]
 800d9be:	4013      	ands	r3, r2
 800d9c0:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
 800d9c2:	68fb      	ldr	r3, [r7, #12]
 800d9c4:	2b00      	cmp	r3, #0
 800d9c6:	f000 80cc 	beq.w	800db62 <HAL_GPIO_DeInit+0x1c2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
 800d9ca:	4a6f      	ldr	r2, [pc, #444]	; (800db88 <HAL_GPIO_DeInit+0x1e8>)
 800d9cc:	697b      	ldr	r3, [r7, #20]
 800d9ce:	089b      	lsrs	r3, r3, #2
 800d9d0:	3302      	adds	r3, #2
 800d9d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d9d6:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 800d9d8:	697b      	ldr	r3, [r7, #20]
 800d9da:	f003 0303 	and.w	r3, r3, #3
 800d9de:	009b      	lsls	r3, r3, #2
 800d9e0:	220f      	movs	r2, #15
 800d9e2:	fa02 f303 	lsl.w	r3, r2, r3
 800d9e6:	68ba      	ldr	r2, [r7, #8]
 800d9e8:	4013      	ands	r3, r2
 800d9ea:	60bb      	str	r3, [r7, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	4a67      	ldr	r2, [pc, #412]	; (800db8c <HAL_GPIO_DeInit+0x1ec>)
 800d9f0:	4293      	cmp	r3, r2
 800d9f2:	d037      	beq.n	800da64 <HAL_GPIO_DeInit+0xc4>
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	4a66      	ldr	r2, [pc, #408]	; (800db90 <HAL_GPIO_DeInit+0x1f0>)
 800d9f8:	4293      	cmp	r3, r2
 800d9fa:	d031      	beq.n	800da60 <HAL_GPIO_DeInit+0xc0>
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	4a65      	ldr	r2, [pc, #404]	; (800db94 <HAL_GPIO_DeInit+0x1f4>)
 800da00:	4293      	cmp	r3, r2
 800da02:	d02b      	beq.n	800da5c <HAL_GPIO_DeInit+0xbc>
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	4a64      	ldr	r2, [pc, #400]	; (800db98 <HAL_GPIO_DeInit+0x1f8>)
 800da08:	4293      	cmp	r3, r2
 800da0a:	d025      	beq.n	800da58 <HAL_GPIO_DeInit+0xb8>
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	4a63      	ldr	r2, [pc, #396]	; (800db9c <HAL_GPIO_DeInit+0x1fc>)
 800da10:	4293      	cmp	r3, r2
 800da12:	d01f      	beq.n	800da54 <HAL_GPIO_DeInit+0xb4>
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	4a62      	ldr	r2, [pc, #392]	; (800dba0 <HAL_GPIO_DeInit+0x200>)
 800da18:	4293      	cmp	r3, r2
 800da1a:	d019      	beq.n	800da50 <HAL_GPIO_DeInit+0xb0>
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	4a61      	ldr	r2, [pc, #388]	; (800dba4 <HAL_GPIO_DeInit+0x204>)
 800da20:	4293      	cmp	r3, r2
 800da22:	d013      	beq.n	800da4c <HAL_GPIO_DeInit+0xac>
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	4a60      	ldr	r2, [pc, #384]	; (800dba8 <HAL_GPIO_DeInit+0x208>)
 800da28:	4293      	cmp	r3, r2
 800da2a:	d00d      	beq.n	800da48 <HAL_GPIO_DeInit+0xa8>
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	4a5f      	ldr	r2, [pc, #380]	; (800dbac <HAL_GPIO_DeInit+0x20c>)
 800da30:	4293      	cmp	r3, r2
 800da32:	d007      	beq.n	800da44 <HAL_GPIO_DeInit+0xa4>
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	4a5e      	ldr	r2, [pc, #376]	; (800dbb0 <HAL_GPIO_DeInit+0x210>)
 800da38:	4293      	cmp	r3, r2
 800da3a:	d101      	bne.n	800da40 <HAL_GPIO_DeInit+0xa0>
 800da3c:	2309      	movs	r3, #9
 800da3e:	e012      	b.n	800da66 <HAL_GPIO_DeInit+0xc6>
 800da40:	230a      	movs	r3, #10
 800da42:	e010      	b.n	800da66 <HAL_GPIO_DeInit+0xc6>
 800da44:	2308      	movs	r3, #8
 800da46:	e00e      	b.n	800da66 <HAL_GPIO_DeInit+0xc6>
 800da48:	2307      	movs	r3, #7
 800da4a:	e00c      	b.n	800da66 <HAL_GPIO_DeInit+0xc6>
 800da4c:	2306      	movs	r3, #6
 800da4e:	e00a      	b.n	800da66 <HAL_GPIO_DeInit+0xc6>
 800da50:	2305      	movs	r3, #5
 800da52:	e008      	b.n	800da66 <HAL_GPIO_DeInit+0xc6>
 800da54:	2304      	movs	r3, #4
 800da56:	e006      	b.n	800da66 <HAL_GPIO_DeInit+0xc6>
 800da58:	2303      	movs	r3, #3
 800da5a:	e004      	b.n	800da66 <HAL_GPIO_DeInit+0xc6>
 800da5c:	2302      	movs	r3, #2
 800da5e:	e002      	b.n	800da66 <HAL_GPIO_DeInit+0xc6>
 800da60:	2301      	movs	r3, #1
 800da62:	e000      	b.n	800da66 <HAL_GPIO_DeInit+0xc6>
 800da64:	2300      	movs	r3, #0
 800da66:	697a      	ldr	r2, [r7, #20]
 800da68:	f002 0203 	and.w	r2, r2, #3
 800da6c:	0092      	lsls	r2, r2, #2
 800da6e:	4093      	lsls	r3, r2
 800da70:	68ba      	ldr	r2, [r7, #8]
 800da72:	429a      	cmp	r2, r3
 800da74:	d136      	bne.n	800dae4 <HAL_GPIO_DeInit+0x144>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 800da76:	693b      	ldr	r3, [r7, #16]
 800da78:	681a      	ldr	r2, [r3, #0]
 800da7a:	68fb      	ldr	r3, [r7, #12]
 800da7c:	43db      	mvns	r3, r3
 800da7e:	401a      	ands	r2, r3
 800da80:	693b      	ldr	r3, [r7, #16]
 800da82:	601a      	str	r2, [r3, #0]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 800da84:	693b      	ldr	r3, [r7, #16]
 800da86:	685a      	ldr	r2, [r3, #4]
 800da88:	68fb      	ldr	r3, [r7, #12]
 800da8a:	43db      	mvns	r3, r3
 800da8c:	401a      	ands	r2, r3
 800da8e:	693b      	ldr	r3, [r7, #16]
 800da90:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 800da92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800da96:	681a      	ldr	r2, [r3, #0]
 800da98:	68fb      	ldr	r3, [r7, #12]
 800da9a:	43db      	mvns	r3, r3
 800da9c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800daa0:	4013      	ands	r3, r2
 800daa2:	600b      	str	r3, [r1, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 800daa4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800daa8:	685a      	ldr	r2, [r3, #4]
 800daaa:	68fb      	ldr	r3, [r7, #12]
 800daac:	43db      	mvns	r3, r3
 800daae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800dab2:	4013      	ands	r3, r2
 800dab4:	604b      	str	r3, [r1, #4]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 800dab6:	697b      	ldr	r3, [r7, #20]
 800dab8:	f003 0303 	and.w	r3, r3, #3
 800dabc:	009b      	lsls	r3, r3, #2
 800dabe:	220f      	movs	r2, #15
 800dac0:	fa02 f303 	lsl.w	r3, r2, r3
 800dac4:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800dac6:	4a30      	ldr	r2, [pc, #192]	; (800db88 <HAL_GPIO_DeInit+0x1e8>)
 800dac8:	697b      	ldr	r3, [r7, #20]
 800daca:	089b      	lsrs	r3, r3, #2
 800dacc:	3302      	adds	r3, #2
 800dace:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800dad2:	68bb      	ldr	r3, [r7, #8]
 800dad4:	43da      	mvns	r2, r3
 800dad6:	482c      	ldr	r0, [pc, #176]	; (800db88 <HAL_GPIO_DeInit+0x1e8>)
 800dad8:	697b      	ldr	r3, [r7, #20]
 800dada:	089b      	lsrs	r3, r3, #2
 800dadc:	400a      	ands	r2, r1
 800dade:	3302      	adds	r3, #2
 800dae0:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	681a      	ldr	r2, [r3, #0]
 800dae8:	697b      	ldr	r3, [r7, #20]
 800daea:	005b      	lsls	r3, r3, #1
 800daec:	2103      	movs	r1, #3
 800daee:	fa01 f303 	lsl.w	r3, r1, r3
 800daf2:	431a      	orrs	r2, r3
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 800daf8:	697b      	ldr	r3, [r7, #20]
 800dafa:	08da      	lsrs	r2, r3, #3
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	3208      	adds	r2, #8
 800db00:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800db04:	697b      	ldr	r3, [r7, #20]
 800db06:	f003 0307 	and.w	r3, r3, #7
 800db0a:	009b      	lsls	r3, r3, #2
 800db0c:	220f      	movs	r2, #15
 800db0e:	fa02 f303 	lsl.w	r3, r2, r3
 800db12:	43db      	mvns	r3, r3
 800db14:	697a      	ldr	r2, [r7, #20]
 800db16:	08d2      	lsrs	r2, r2, #3
 800db18:	4019      	ands	r1, r3
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	3208      	adds	r2, #8
 800db1e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	68da      	ldr	r2, [r3, #12]
 800db26:	697b      	ldr	r3, [r7, #20]
 800db28:	005b      	lsls	r3, r3, #1
 800db2a:	2103      	movs	r1, #3
 800db2c:	fa01 f303 	lsl.w	r3, r1, r3
 800db30:	43db      	mvns	r3, r3
 800db32:	401a      	ands	r2, r3
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	685a      	ldr	r2, [r3, #4]
 800db3c:	2101      	movs	r1, #1
 800db3e:	697b      	ldr	r3, [r7, #20]
 800db40:	fa01 f303 	lsl.w	r3, r1, r3
 800db44:	43db      	mvns	r3, r3
 800db46:	401a      	ands	r2, r3
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	689a      	ldr	r2, [r3, #8]
 800db50:	697b      	ldr	r3, [r7, #20]
 800db52:	005b      	lsls	r3, r3, #1
 800db54:	2103      	movs	r1, #3
 800db56:	fa01 f303 	lsl.w	r3, r1, r3
 800db5a:	43db      	mvns	r3, r3
 800db5c:	401a      	ands	r2, r3
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	609a      	str	r2, [r3, #8]
    }

    position++;
 800db62:	697b      	ldr	r3, [r7, #20]
 800db64:	3301      	adds	r3, #1
 800db66:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00U)
 800db68:	683a      	ldr	r2, [r7, #0]
 800db6a:	697b      	ldr	r3, [r7, #20]
 800db6c:	fa22 f303 	lsr.w	r3, r2, r3
 800db70:	2b00      	cmp	r3, #0
 800db72:	f47f af1f 	bne.w	800d9b4 <HAL_GPIO_DeInit+0x14>
  }
}
 800db76:	bf00      	nop
 800db78:	bf00      	nop
 800db7a:	371c      	adds	r7, #28
 800db7c:	46bd      	mov	sp, r7
 800db7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db82:	4770      	bx	lr
 800db84:	58000080 	.word	0x58000080
 800db88:	58000400 	.word	0x58000400
 800db8c:	58020000 	.word	0x58020000
 800db90:	58020400 	.word	0x58020400
 800db94:	58020800 	.word	0x58020800
 800db98:	58020c00 	.word	0x58020c00
 800db9c:	58021000 	.word	0x58021000
 800dba0:	58021400 	.word	0x58021400
 800dba4:	58021800 	.word	0x58021800
 800dba8:	58021c00 	.word	0x58021c00
 800dbac:	58022000 	.word	0x58022000
 800dbb0:	58022400 	.word	0x58022400

0800dbb4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800dbb4:	b480      	push	{r7}
 800dbb6:	b083      	sub	sp, #12
 800dbb8:	af00      	add	r7, sp, #0
 800dbba:	6078      	str	r0, [r7, #4]
 800dbbc:	460b      	mov	r3, r1
 800dbbe:	807b      	strh	r3, [r7, #2]
 800dbc0:	4613      	mov	r3, r2
 800dbc2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800dbc4:	787b      	ldrb	r3, [r7, #1]
 800dbc6:	2b00      	cmp	r3, #0
 800dbc8:	d003      	beq.n	800dbd2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800dbca:	887a      	ldrh	r2, [r7, #2]
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800dbd0:	e003      	b.n	800dbda <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800dbd2:	887b      	ldrh	r3, [r7, #2]
 800dbd4:	041a      	lsls	r2, r3, #16
 800dbd6:	687b      	ldr	r3, [r7, #4]
 800dbd8:	619a      	str	r2, [r3, #24]
}
 800dbda:	bf00      	nop
 800dbdc:	370c      	adds	r7, #12
 800dbde:	46bd      	mov	sp, r7
 800dbe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbe4:	4770      	bx	lr

0800dbe6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800dbe6:	b480      	push	{r7}
 800dbe8:	b085      	sub	sp, #20
 800dbea:	af00      	add	r7, sp, #0
 800dbec:	6078      	str	r0, [r7, #4]
 800dbee:	460b      	mov	r3, r1
 800dbf0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800dbf2:	687b      	ldr	r3, [r7, #4]
 800dbf4:	695b      	ldr	r3, [r3, #20]
 800dbf6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800dbf8:	887a      	ldrh	r2, [r7, #2]
 800dbfa:	68fb      	ldr	r3, [r7, #12]
 800dbfc:	4013      	ands	r3, r2
 800dbfe:	041a      	lsls	r2, r3, #16
 800dc00:	68fb      	ldr	r3, [r7, #12]
 800dc02:	43d9      	mvns	r1, r3
 800dc04:	887b      	ldrh	r3, [r7, #2]
 800dc06:	400b      	ands	r3, r1
 800dc08:	431a      	orrs	r2, r3
 800dc0a:	687b      	ldr	r3, [r7, #4]
 800dc0c:	619a      	str	r2, [r3, #24]
}
 800dc0e:	bf00      	nop
 800dc10:	3714      	adds	r7, #20
 800dc12:	46bd      	mov	sp, r7
 800dc14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc18:	4770      	bx	lr

0800dc1a <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800dc1a:	b580      	push	{r7, lr}
 800dc1c:	b082      	sub	sp, #8
 800dc1e:	af00      	add	r7, sp, #0
 800dc20:	4603      	mov	r3, r0
 800dc22:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 800dc24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800dc28:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800dc2c:	88fb      	ldrh	r3, [r7, #6]
 800dc2e:	4013      	ands	r3, r2
 800dc30:	2b00      	cmp	r3, #0
 800dc32:	d008      	beq.n	800dc46 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800dc34:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800dc38:	88fb      	ldrh	r3, [r7, #6]
 800dc3a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800dc3e:	88fb      	ldrh	r3, [r7, #6]
 800dc40:	4618      	mov	r0, r3
 800dc42:	f000 f804 	bl	800dc4e <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 800dc46:	bf00      	nop
 800dc48:	3708      	adds	r7, #8
 800dc4a:	46bd      	mov	sp, r7
 800dc4c:	bd80      	pop	{r7, pc}

0800dc4e <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800dc4e:	b480      	push	{r7}
 800dc50:	b083      	sub	sp, #12
 800dc52:	af00      	add	r7, sp, #0
 800dc54:	4603      	mov	r3, r0
 800dc56:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800dc58:	bf00      	nop
 800dc5a:	370c      	adds	r7, #12
 800dc5c:	46bd      	mov	sp, r7
 800dc5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc62:	4770      	bx	lr

0800dc64 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800dc64:	b580      	push	{r7, lr}
 800dc66:	b082      	sub	sp, #8
 800dc68:	af00      	add	r7, sp, #0
 800dc6a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800dc6c:	687b      	ldr	r3, [r7, #4]
 800dc6e:	2b00      	cmp	r3, #0
 800dc70:	d101      	bne.n	800dc76 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800dc72:	2301      	movs	r3, #1
 800dc74:	e07f      	b.n	800dd76 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800dc76:	687b      	ldr	r3, [r7, #4]
 800dc78:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800dc7c:	b2db      	uxtb	r3, r3
 800dc7e:	2b00      	cmp	r3, #0
 800dc80:	d106      	bne.n	800dc90 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800dc82:	687b      	ldr	r3, [r7, #4]
 800dc84:	2200      	movs	r2, #0
 800dc86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800dc8a:	6878      	ldr	r0, [r7, #4]
 800dc8c:	f7f5 fdbc 	bl	8003808 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	2224      	movs	r2, #36	; 0x24
 800dc94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	681b      	ldr	r3, [r3, #0]
 800dc9c:	681a      	ldr	r2, [r3, #0]
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	681b      	ldr	r3, [r3, #0]
 800dca2:	f022 0201 	bic.w	r2, r2, #1
 800dca6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800dca8:	687b      	ldr	r3, [r7, #4]
 800dcaa:	685a      	ldr	r2, [r3, #4]
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	681b      	ldr	r3, [r3, #0]
 800dcb0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800dcb4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800dcb6:	687b      	ldr	r3, [r7, #4]
 800dcb8:	681b      	ldr	r3, [r3, #0]
 800dcba:	689a      	ldr	r2, [r3, #8]
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	681b      	ldr	r3, [r3, #0]
 800dcc0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800dcc4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	68db      	ldr	r3, [r3, #12]
 800dcca:	2b01      	cmp	r3, #1
 800dccc:	d107      	bne.n	800dcde <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800dcce:	687b      	ldr	r3, [r7, #4]
 800dcd0:	689a      	ldr	r2, [r3, #8]
 800dcd2:	687b      	ldr	r3, [r7, #4]
 800dcd4:	681b      	ldr	r3, [r3, #0]
 800dcd6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800dcda:	609a      	str	r2, [r3, #8]
 800dcdc:	e006      	b.n	800dcec <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	689a      	ldr	r2, [r3, #8]
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	681b      	ldr	r3, [r3, #0]
 800dce6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800dcea:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800dcec:	687b      	ldr	r3, [r7, #4]
 800dcee:	68db      	ldr	r3, [r3, #12]
 800dcf0:	2b02      	cmp	r3, #2
 800dcf2:	d104      	bne.n	800dcfe <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	681b      	ldr	r3, [r3, #0]
 800dcf8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800dcfc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	681b      	ldr	r3, [r3, #0]
 800dd02:	6859      	ldr	r1, [r3, #4]
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	681a      	ldr	r2, [r3, #0]
 800dd08:	4b1d      	ldr	r3, [pc, #116]	; (800dd80 <HAL_I2C_Init+0x11c>)
 800dd0a:	430b      	orrs	r3, r1
 800dd0c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	681b      	ldr	r3, [r3, #0]
 800dd12:	68da      	ldr	r2, [r3, #12]
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	681b      	ldr	r3, [r3, #0]
 800dd18:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800dd1c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800dd1e:	687b      	ldr	r3, [r7, #4]
 800dd20:	691a      	ldr	r2, [r3, #16]
 800dd22:	687b      	ldr	r3, [r7, #4]
 800dd24:	695b      	ldr	r3, [r3, #20]
 800dd26:	ea42 0103 	orr.w	r1, r2, r3
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	699b      	ldr	r3, [r3, #24]
 800dd2e:	021a      	lsls	r2, r3, #8
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	681b      	ldr	r3, [r3, #0]
 800dd34:	430a      	orrs	r2, r1
 800dd36:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800dd38:	687b      	ldr	r3, [r7, #4]
 800dd3a:	69d9      	ldr	r1, [r3, #28]
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	6a1a      	ldr	r2, [r3, #32]
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	681b      	ldr	r3, [r3, #0]
 800dd44:	430a      	orrs	r2, r1
 800dd46:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	681b      	ldr	r3, [r3, #0]
 800dd4c:	681a      	ldr	r2, [r3, #0]
 800dd4e:	687b      	ldr	r3, [r7, #4]
 800dd50:	681b      	ldr	r3, [r3, #0]
 800dd52:	f042 0201 	orr.w	r2, r2, #1
 800dd56:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	2200      	movs	r2, #0
 800dd5c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	2220      	movs	r2, #32
 800dd62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	2200      	movs	r2, #0
 800dd6a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800dd6c:	687b      	ldr	r3, [r7, #4]
 800dd6e:	2200      	movs	r2, #0
 800dd70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800dd74:	2300      	movs	r3, #0
}
 800dd76:	4618      	mov	r0, r3
 800dd78:	3708      	adds	r7, #8
 800dd7a:	46bd      	mov	sp, r7
 800dd7c:	bd80      	pop	{r7, pc}
 800dd7e:	bf00      	nop
 800dd80:	02008000 	.word	0x02008000

0800dd84 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800dd84:	b580      	push	{r7, lr}
 800dd86:	b082      	sub	sp, #8
 800dd88:	af00      	add	r7, sp, #0
 800dd8a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800dd8c:	687b      	ldr	r3, [r7, #4]
 800dd8e:	2b00      	cmp	r3, #0
 800dd90:	d101      	bne.n	800dd96 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800dd92:	2301      	movs	r3, #1
 800dd94:	e021      	b.n	800ddda <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800dd96:	687b      	ldr	r3, [r7, #4]
 800dd98:	2224      	movs	r2, #36	; 0x24
 800dd9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800dd9e:	687b      	ldr	r3, [r7, #4]
 800dda0:	681b      	ldr	r3, [r3, #0]
 800dda2:	681a      	ldr	r2, [r3, #0]
 800dda4:	687b      	ldr	r3, [r7, #4]
 800dda6:	681b      	ldr	r3, [r3, #0]
 800dda8:	f022 0201 	bic.w	r2, r2, #1
 800ddac:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800ddae:	6878      	ldr	r0, [r7, #4]
 800ddb0:	f7f5 fd90 	bl	80038d4 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	2200      	movs	r2, #0
 800ddb8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 800ddba:	687b      	ldr	r3, [r7, #4]
 800ddbc:	2200      	movs	r2, #0
 800ddbe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800ddc2:	687b      	ldr	r3, [r7, #4]
 800ddc4:	2200      	movs	r2, #0
 800ddc6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	2200      	movs	r2, #0
 800ddcc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	2200      	movs	r2, #0
 800ddd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800ddd8:	2300      	movs	r3, #0
}
 800ddda:	4618      	mov	r0, r3
 800dddc:	3708      	adds	r7, #8
 800ddde:	46bd      	mov	sp, r7
 800dde0:	bd80      	pop	{r7, pc}
	...

0800dde4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800dde4:	b580      	push	{r7, lr}
 800dde6:	b088      	sub	sp, #32
 800dde8:	af02      	add	r7, sp, #8
 800ddea:	60f8      	str	r0, [r7, #12]
 800ddec:	4608      	mov	r0, r1
 800ddee:	4611      	mov	r1, r2
 800ddf0:	461a      	mov	r2, r3
 800ddf2:	4603      	mov	r3, r0
 800ddf4:	817b      	strh	r3, [r7, #10]
 800ddf6:	460b      	mov	r3, r1
 800ddf8:	813b      	strh	r3, [r7, #8]
 800ddfa:	4613      	mov	r3, r2
 800ddfc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ddfe:	68fb      	ldr	r3, [r7, #12]
 800de00:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800de04:	b2db      	uxtb	r3, r3
 800de06:	2b20      	cmp	r3, #32
 800de08:	f040 80f9 	bne.w	800dffe <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800de0c:	6a3b      	ldr	r3, [r7, #32]
 800de0e:	2b00      	cmp	r3, #0
 800de10:	d002      	beq.n	800de18 <HAL_I2C_Mem_Write+0x34>
 800de12:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800de14:	2b00      	cmp	r3, #0
 800de16:	d105      	bne.n	800de24 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800de18:	68fb      	ldr	r3, [r7, #12]
 800de1a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800de1e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800de20:	2301      	movs	r3, #1
 800de22:	e0ed      	b.n	800e000 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800de24:	68fb      	ldr	r3, [r7, #12]
 800de26:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800de2a:	2b01      	cmp	r3, #1
 800de2c:	d101      	bne.n	800de32 <HAL_I2C_Mem_Write+0x4e>
 800de2e:	2302      	movs	r3, #2
 800de30:	e0e6      	b.n	800e000 <HAL_I2C_Mem_Write+0x21c>
 800de32:	68fb      	ldr	r3, [r7, #12]
 800de34:	2201      	movs	r2, #1
 800de36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800de3a:	f7fd fb55 	bl	800b4e8 <HAL_GetTick>
 800de3e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800de40:	697b      	ldr	r3, [r7, #20]
 800de42:	9300      	str	r3, [sp, #0]
 800de44:	2319      	movs	r3, #25
 800de46:	2201      	movs	r2, #1
 800de48:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800de4c:	68f8      	ldr	r0, [r7, #12]
 800de4e:	f000 fadd 	bl	800e40c <I2C_WaitOnFlagUntilTimeout>
 800de52:	4603      	mov	r3, r0
 800de54:	2b00      	cmp	r3, #0
 800de56:	d001      	beq.n	800de5c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800de58:	2301      	movs	r3, #1
 800de5a:	e0d1      	b.n	800e000 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800de5c:	68fb      	ldr	r3, [r7, #12]
 800de5e:	2221      	movs	r2, #33	; 0x21
 800de60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800de64:	68fb      	ldr	r3, [r7, #12]
 800de66:	2240      	movs	r2, #64	; 0x40
 800de68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800de6c:	68fb      	ldr	r3, [r7, #12]
 800de6e:	2200      	movs	r2, #0
 800de70:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800de72:	68fb      	ldr	r3, [r7, #12]
 800de74:	6a3a      	ldr	r2, [r7, #32]
 800de76:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800de78:	68fb      	ldr	r3, [r7, #12]
 800de7a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800de7c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800de7e:	68fb      	ldr	r3, [r7, #12]
 800de80:	2200      	movs	r2, #0
 800de82:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800de84:	88f8      	ldrh	r0, [r7, #6]
 800de86:	893a      	ldrh	r2, [r7, #8]
 800de88:	8979      	ldrh	r1, [r7, #10]
 800de8a:	697b      	ldr	r3, [r7, #20]
 800de8c:	9301      	str	r3, [sp, #4]
 800de8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de90:	9300      	str	r3, [sp, #0]
 800de92:	4603      	mov	r3, r0
 800de94:	68f8      	ldr	r0, [r7, #12]
 800de96:	f000 f9ed 	bl	800e274 <I2C_RequestMemoryWrite>
 800de9a:	4603      	mov	r3, r0
 800de9c:	2b00      	cmp	r3, #0
 800de9e:	d005      	beq.n	800deac <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800dea0:	68fb      	ldr	r3, [r7, #12]
 800dea2:	2200      	movs	r2, #0
 800dea4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800dea8:	2301      	movs	r3, #1
 800deaa:	e0a9      	b.n	800e000 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800deac:	68fb      	ldr	r3, [r7, #12]
 800deae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800deb0:	b29b      	uxth	r3, r3
 800deb2:	2bff      	cmp	r3, #255	; 0xff
 800deb4:	d90e      	bls.n	800ded4 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800deb6:	68fb      	ldr	r3, [r7, #12]
 800deb8:	22ff      	movs	r2, #255	; 0xff
 800deba:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800debc:	68fb      	ldr	r3, [r7, #12]
 800debe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800dec0:	b2da      	uxtb	r2, r3
 800dec2:	8979      	ldrh	r1, [r7, #10]
 800dec4:	2300      	movs	r3, #0
 800dec6:	9300      	str	r3, [sp, #0]
 800dec8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800decc:	68f8      	ldr	r0, [r7, #12]
 800dece:	f000 fbbf 	bl	800e650 <I2C_TransferConfig>
 800ded2:	e00f      	b.n	800def4 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800ded4:	68fb      	ldr	r3, [r7, #12]
 800ded6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ded8:	b29a      	uxth	r2, r3
 800deda:	68fb      	ldr	r3, [r7, #12]
 800dedc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800dede:	68fb      	ldr	r3, [r7, #12]
 800dee0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800dee2:	b2da      	uxtb	r2, r3
 800dee4:	8979      	ldrh	r1, [r7, #10]
 800dee6:	2300      	movs	r3, #0
 800dee8:	9300      	str	r3, [sp, #0]
 800deea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800deee:	68f8      	ldr	r0, [r7, #12]
 800def0:	f000 fbae 	bl	800e650 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800def4:	697a      	ldr	r2, [r7, #20]
 800def6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800def8:	68f8      	ldr	r0, [r7, #12]
 800defa:	f000 fac7 	bl	800e48c <I2C_WaitOnTXISFlagUntilTimeout>
 800defe:	4603      	mov	r3, r0
 800df00:	2b00      	cmp	r3, #0
 800df02:	d001      	beq.n	800df08 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800df04:	2301      	movs	r3, #1
 800df06:	e07b      	b.n	800e000 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800df08:	68fb      	ldr	r3, [r7, #12]
 800df0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df0c:	781a      	ldrb	r2, [r3, #0]
 800df0e:	68fb      	ldr	r3, [r7, #12]
 800df10:	681b      	ldr	r3, [r3, #0]
 800df12:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800df14:	68fb      	ldr	r3, [r7, #12]
 800df16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df18:	1c5a      	adds	r2, r3, #1
 800df1a:	68fb      	ldr	r3, [r7, #12]
 800df1c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800df1e:	68fb      	ldr	r3, [r7, #12]
 800df20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800df22:	b29b      	uxth	r3, r3
 800df24:	3b01      	subs	r3, #1
 800df26:	b29a      	uxth	r2, r3
 800df28:	68fb      	ldr	r3, [r7, #12]
 800df2a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800df2c:	68fb      	ldr	r3, [r7, #12]
 800df2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800df30:	3b01      	subs	r3, #1
 800df32:	b29a      	uxth	r2, r3
 800df34:	68fb      	ldr	r3, [r7, #12]
 800df36:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800df38:	68fb      	ldr	r3, [r7, #12]
 800df3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800df3c:	b29b      	uxth	r3, r3
 800df3e:	2b00      	cmp	r3, #0
 800df40:	d034      	beq.n	800dfac <HAL_I2C_Mem_Write+0x1c8>
 800df42:	68fb      	ldr	r3, [r7, #12]
 800df44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800df46:	2b00      	cmp	r3, #0
 800df48:	d130      	bne.n	800dfac <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800df4a:	697b      	ldr	r3, [r7, #20]
 800df4c:	9300      	str	r3, [sp, #0]
 800df4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df50:	2200      	movs	r2, #0
 800df52:	2180      	movs	r1, #128	; 0x80
 800df54:	68f8      	ldr	r0, [r7, #12]
 800df56:	f000 fa59 	bl	800e40c <I2C_WaitOnFlagUntilTimeout>
 800df5a:	4603      	mov	r3, r0
 800df5c:	2b00      	cmp	r3, #0
 800df5e:	d001      	beq.n	800df64 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800df60:	2301      	movs	r3, #1
 800df62:	e04d      	b.n	800e000 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800df64:	68fb      	ldr	r3, [r7, #12]
 800df66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800df68:	b29b      	uxth	r3, r3
 800df6a:	2bff      	cmp	r3, #255	; 0xff
 800df6c:	d90e      	bls.n	800df8c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800df6e:	68fb      	ldr	r3, [r7, #12]
 800df70:	22ff      	movs	r2, #255	; 0xff
 800df72:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800df74:	68fb      	ldr	r3, [r7, #12]
 800df76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800df78:	b2da      	uxtb	r2, r3
 800df7a:	8979      	ldrh	r1, [r7, #10]
 800df7c:	2300      	movs	r3, #0
 800df7e:	9300      	str	r3, [sp, #0]
 800df80:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800df84:	68f8      	ldr	r0, [r7, #12]
 800df86:	f000 fb63 	bl	800e650 <I2C_TransferConfig>
 800df8a:	e00f      	b.n	800dfac <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800df8c:	68fb      	ldr	r3, [r7, #12]
 800df8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800df90:	b29a      	uxth	r2, r3
 800df92:	68fb      	ldr	r3, [r7, #12]
 800df94:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800df96:	68fb      	ldr	r3, [r7, #12]
 800df98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800df9a:	b2da      	uxtb	r2, r3
 800df9c:	8979      	ldrh	r1, [r7, #10]
 800df9e:	2300      	movs	r3, #0
 800dfa0:	9300      	str	r3, [sp, #0]
 800dfa2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800dfa6:	68f8      	ldr	r0, [r7, #12]
 800dfa8:	f000 fb52 	bl	800e650 <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 800dfac:	68fb      	ldr	r3, [r7, #12]
 800dfae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800dfb0:	b29b      	uxth	r3, r3
 800dfb2:	2b00      	cmp	r3, #0
 800dfb4:	d19e      	bne.n	800def4 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800dfb6:	697a      	ldr	r2, [r7, #20]
 800dfb8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800dfba:	68f8      	ldr	r0, [r7, #12]
 800dfbc:	f000 faa6 	bl	800e50c <I2C_WaitOnSTOPFlagUntilTimeout>
 800dfc0:	4603      	mov	r3, r0
 800dfc2:	2b00      	cmp	r3, #0
 800dfc4:	d001      	beq.n	800dfca <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800dfc6:	2301      	movs	r3, #1
 800dfc8:	e01a      	b.n	800e000 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800dfca:	68fb      	ldr	r3, [r7, #12]
 800dfcc:	681b      	ldr	r3, [r3, #0]
 800dfce:	2220      	movs	r2, #32
 800dfd0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800dfd2:	68fb      	ldr	r3, [r7, #12]
 800dfd4:	681b      	ldr	r3, [r3, #0]
 800dfd6:	6859      	ldr	r1, [r3, #4]
 800dfd8:	68fb      	ldr	r3, [r7, #12]
 800dfda:	681a      	ldr	r2, [r3, #0]
 800dfdc:	4b0a      	ldr	r3, [pc, #40]	; (800e008 <HAL_I2C_Mem_Write+0x224>)
 800dfde:	400b      	ands	r3, r1
 800dfe0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800dfe2:	68fb      	ldr	r3, [r7, #12]
 800dfe4:	2220      	movs	r2, #32
 800dfe6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800dfea:	68fb      	ldr	r3, [r7, #12]
 800dfec:	2200      	movs	r2, #0
 800dfee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800dff2:	68fb      	ldr	r3, [r7, #12]
 800dff4:	2200      	movs	r2, #0
 800dff6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800dffa:	2300      	movs	r3, #0
 800dffc:	e000      	b.n	800e000 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800dffe:	2302      	movs	r3, #2
  }
}
 800e000:	4618      	mov	r0, r3
 800e002:	3718      	adds	r7, #24
 800e004:	46bd      	mov	sp, r7
 800e006:	bd80      	pop	{r7, pc}
 800e008:	fe00e800 	.word	0xfe00e800

0800e00c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e00c:	b580      	push	{r7, lr}
 800e00e:	b088      	sub	sp, #32
 800e010:	af02      	add	r7, sp, #8
 800e012:	60f8      	str	r0, [r7, #12]
 800e014:	4608      	mov	r0, r1
 800e016:	4611      	mov	r1, r2
 800e018:	461a      	mov	r2, r3
 800e01a:	4603      	mov	r3, r0
 800e01c:	817b      	strh	r3, [r7, #10]
 800e01e:	460b      	mov	r3, r1
 800e020:	813b      	strh	r3, [r7, #8]
 800e022:	4613      	mov	r3, r2
 800e024:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800e026:	68fb      	ldr	r3, [r7, #12]
 800e028:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e02c:	b2db      	uxtb	r3, r3
 800e02e:	2b20      	cmp	r3, #32
 800e030:	f040 80fd 	bne.w	800e22e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800e034:	6a3b      	ldr	r3, [r7, #32]
 800e036:	2b00      	cmp	r3, #0
 800e038:	d002      	beq.n	800e040 <HAL_I2C_Mem_Read+0x34>
 800e03a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e03c:	2b00      	cmp	r3, #0
 800e03e:	d105      	bne.n	800e04c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800e040:	68fb      	ldr	r3, [r7, #12]
 800e042:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e046:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800e048:	2301      	movs	r3, #1
 800e04a:	e0f1      	b.n	800e230 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800e04c:	68fb      	ldr	r3, [r7, #12]
 800e04e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800e052:	2b01      	cmp	r3, #1
 800e054:	d101      	bne.n	800e05a <HAL_I2C_Mem_Read+0x4e>
 800e056:	2302      	movs	r3, #2
 800e058:	e0ea      	b.n	800e230 <HAL_I2C_Mem_Read+0x224>
 800e05a:	68fb      	ldr	r3, [r7, #12]
 800e05c:	2201      	movs	r2, #1
 800e05e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800e062:	f7fd fa41 	bl	800b4e8 <HAL_GetTick>
 800e066:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800e068:	697b      	ldr	r3, [r7, #20]
 800e06a:	9300      	str	r3, [sp, #0]
 800e06c:	2319      	movs	r3, #25
 800e06e:	2201      	movs	r2, #1
 800e070:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800e074:	68f8      	ldr	r0, [r7, #12]
 800e076:	f000 f9c9 	bl	800e40c <I2C_WaitOnFlagUntilTimeout>
 800e07a:	4603      	mov	r3, r0
 800e07c:	2b00      	cmp	r3, #0
 800e07e:	d001      	beq.n	800e084 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800e080:	2301      	movs	r3, #1
 800e082:	e0d5      	b.n	800e230 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800e084:	68fb      	ldr	r3, [r7, #12]
 800e086:	2222      	movs	r2, #34	; 0x22
 800e088:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800e08c:	68fb      	ldr	r3, [r7, #12]
 800e08e:	2240      	movs	r2, #64	; 0x40
 800e090:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800e094:	68fb      	ldr	r3, [r7, #12]
 800e096:	2200      	movs	r2, #0
 800e098:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800e09a:	68fb      	ldr	r3, [r7, #12]
 800e09c:	6a3a      	ldr	r2, [r7, #32]
 800e09e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800e0a0:	68fb      	ldr	r3, [r7, #12]
 800e0a2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e0a4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800e0a6:	68fb      	ldr	r3, [r7, #12]
 800e0a8:	2200      	movs	r2, #0
 800e0aa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800e0ac:	88f8      	ldrh	r0, [r7, #6]
 800e0ae:	893a      	ldrh	r2, [r7, #8]
 800e0b0:	8979      	ldrh	r1, [r7, #10]
 800e0b2:	697b      	ldr	r3, [r7, #20]
 800e0b4:	9301      	str	r3, [sp, #4]
 800e0b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0b8:	9300      	str	r3, [sp, #0]
 800e0ba:	4603      	mov	r3, r0
 800e0bc:	68f8      	ldr	r0, [r7, #12]
 800e0be:	f000 f92d 	bl	800e31c <I2C_RequestMemoryRead>
 800e0c2:	4603      	mov	r3, r0
 800e0c4:	2b00      	cmp	r3, #0
 800e0c6:	d005      	beq.n	800e0d4 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800e0c8:	68fb      	ldr	r3, [r7, #12]
 800e0ca:	2200      	movs	r2, #0
 800e0cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800e0d0:	2301      	movs	r3, #1
 800e0d2:	e0ad      	b.n	800e230 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800e0d4:	68fb      	ldr	r3, [r7, #12]
 800e0d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e0d8:	b29b      	uxth	r3, r3
 800e0da:	2bff      	cmp	r3, #255	; 0xff
 800e0dc:	d90e      	bls.n	800e0fc <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800e0de:	68fb      	ldr	r3, [r7, #12]
 800e0e0:	22ff      	movs	r2, #255	; 0xff
 800e0e2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800e0e4:	68fb      	ldr	r3, [r7, #12]
 800e0e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e0e8:	b2da      	uxtb	r2, r3
 800e0ea:	8979      	ldrh	r1, [r7, #10]
 800e0ec:	4b52      	ldr	r3, [pc, #328]	; (800e238 <HAL_I2C_Mem_Read+0x22c>)
 800e0ee:	9300      	str	r3, [sp, #0]
 800e0f0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800e0f4:	68f8      	ldr	r0, [r7, #12]
 800e0f6:	f000 faab 	bl	800e650 <I2C_TransferConfig>
 800e0fa:	e00f      	b.n	800e11c <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800e0fc:	68fb      	ldr	r3, [r7, #12]
 800e0fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e100:	b29a      	uxth	r2, r3
 800e102:	68fb      	ldr	r3, [r7, #12]
 800e104:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800e106:	68fb      	ldr	r3, [r7, #12]
 800e108:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e10a:	b2da      	uxtb	r2, r3
 800e10c:	8979      	ldrh	r1, [r7, #10]
 800e10e:	4b4a      	ldr	r3, [pc, #296]	; (800e238 <HAL_I2C_Mem_Read+0x22c>)
 800e110:	9300      	str	r3, [sp, #0]
 800e112:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800e116:	68f8      	ldr	r0, [r7, #12]
 800e118:	f000 fa9a 	bl	800e650 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800e11c:	697b      	ldr	r3, [r7, #20]
 800e11e:	9300      	str	r3, [sp, #0]
 800e120:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e122:	2200      	movs	r2, #0
 800e124:	2104      	movs	r1, #4
 800e126:	68f8      	ldr	r0, [r7, #12]
 800e128:	f000 f970 	bl	800e40c <I2C_WaitOnFlagUntilTimeout>
 800e12c:	4603      	mov	r3, r0
 800e12e:	2b00      	cmp	r3, #0
 800e130:	d001      	beq.n	800e136 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800e132:	2301      	movs	r3, #1
 800e134:	e07c      	b.n	800e230 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800e136:	68fb      	ldr	r3, [r7, #12]
 800e138:	681b      	ldr	r3, [r3, #0]
 800e13a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e13c:	68fb      	ldr	r3, [r7, #12]
 800e13e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e140:	b2d2      	uxtb	r2, r2
 800e142:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800e144:	68fb      	ldr	r3, [r7, #12]
 800e146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e148:	1c5a      	adds	r2, r3, #1
 800e14a:	68fb      	ldr	r3, [r7, #12]
 800e14c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800e14e:	68fb      	ldr	r3, [r7, #12]
 800e150:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e152:	3b01      	subs	r3, #1
 800e154:	b29a      	uxth	r2, r3
 800e156:	68fb      	ldr	r3, [r7, #12]
 800e158:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800e15a:	68fb      	ldr	r3, [r7, #12]
 800e15c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e15e:	b29b      	uxth	r3, r3
 800e160:	3b01      	subs	r3, #1
 800e162:	b29a      	uxth	r2, r3
 800e164:	68fb      	ldr	r3, [r7, #12]
 800e166:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800e168:	68fb      	ldr	r3, [r7, #12]
 800e16a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e16c:	b29b      	uxth	r3, r3
 800e16e:	2b00      	cmp	r3, #0
 800e170:	d034      	beq.n	800e1dc <HAL_I2C_Mem_Read+0x1d0>
 800e172:	68fb      	ldr	r3, [r7, #12]
 800e174:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e176:	2b00      	cmp	r3, #0
 800e178:	d130      	bne.n	800e1dc <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800e17a:	697b      	ldr	r3, [r7, #20]
 800e17c:	9300      	str	r3, [sp, #0]
 800e17e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e180:	2200      	movs	r2, #0
 800e182:	2180      	movs	r1, #128	; 0x80
 800e184:	68f8      	ldr	r0, [r7, #12]
 800e186:	f000 f941 	bl	800e40c <I2C_WaitOnFlagUntilTimeout>
 800e18a:	4603      	mov	r3, r0
 800e18c:	2b00      	cmp	r3, #0
 800e18e:	d001      	beq.n	800e194 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800e190:	2301      	movs	r3, #1
 800e192:	e04d      	b.n	800e230 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800e194:	68fb      	ldr	r3, [r7, #12]
 800e196:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e198:	b29b      	uxth	r3, r3
 800e19a:	2bff      	cmp	r3, #255	; 0xff
 800e19c:	d90e      	bls.n	800e1bc <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800e19e:	68fb      	ldr	r3, [r7, #12]
 800e1a0:	22ff      	movs	r2, #255	; 0xff
 800e1a2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800e1a4:	68fb      	ldr	r3, [r7, #12]
 800e1a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e1a8:	b2da      	uxtb	r2, r3
 800e1aa:	8979      	ldrh	r1, [r7, #10]
 800e1ac:	2300      	movs	r3, #0
 800e1ae:	9300      	str	r3, [sp, #0]
 800e1b0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800e1b4:	68f8      	ldr	r0, [r7, #12]
 800e1b6:	f000 fa4b 	bl	800e650 <I2C_TransferConfig>
 800e1ba:	e00f      	b.n	800e1dc <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800e1bc:	68fb      	ldr	r3, [r7, #12]
 800e1be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e1c0:	b29a      	uxth	r2, r3
 800e1c2:	68fb      	ldr	r3, [r7, #12]
 800e1c4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800e1c6:	68fb      	ldr	r3, [r7, #12]
 800e1c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e1ca:	b2da      	uxtb	r2, r3
 800e1cc:	8979      	ldrh	r1, [r7, #10]
 800e1ce:	2300      	movs	r3, #0
 800e1d0:	9300      	str	r3, [sp, #0]
 800e1d2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800e1d6:	68f8      	ldr	r0, [r7, #12]
 800e1d8:	f000 fa3a 	bl	800e650 <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 800e1dc:	68fb      	ldr	r3, [r7, #12]
 800e1de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e1e0:	b29b      	uxth	r3, r3
 800e1e2:	2b00      	cmp	r3, #0
 800e1e4:	d19a      	bne.n	800e11c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800e1e6:	697a      	ldr	r2, [r7, #20]
 800e1e8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e1ea:	68f8      	ldr	r0, [r7, #12]
 800e1ec:	f000 f98e 	bl	800e50c <I2C_WaitOnSTOPFlagUntilTimeout>
 800e1f0:	4603      	mov	r3, r0
 800e1f2:	2b00      	cmp	r3, #0
 800e1f4:	d001      	beq.n	800e1fa <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800e1f6:	2301      	movs	r3, #1
 800e1f8:	e01a      	b.n	800e230 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800e1fa:	68fb      	ldr	r3, [r7, #12]
 800e1fc:	681b      	ldr	r3, [r3, #0]
 800e1fe:	2220      	movs	r2, #32
 800e200:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800e202:	68fb      	ldr	r3, [r7, #12]
 800e204:	681b      	ldr	r3, [r3, #0]
 800e206:	6859      	ldr	r1, [r3, #4]
 800e208:	68fb      	ldr	r3, [r7, #12]
 800e20a:	681a      	ldr	r2, [r3, #0]
 800e20c:	4b0b      	ldr	r3, [pc, #44]	; (800e23c <HAL_I2C_Mem_Read+0x230>)
 800e20e:	400b      	ands	r3, r1
 800e210:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800e212:	68fb      	ldr	r3, [r7, #12]
 800e214:	2220      	movs	r2, #32
 800e216:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800e21a:	68fb      	ldr	r3, [r7, #12]
 800e21c:	2200      	movs	r2, #0
 800e21e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800e222:	68fb      	ldr	r3, [r7, #12]
 800e224:	2200      	movs	r2, #0
 800e226:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800e22a:	2300      	movs	r3, #0
 800e22c:	e000      	b.n	800e230 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800e22e:	2302      	movs	r3, #2
  }
}
 800e230:	4618      	mov	r0, r3
 800e232:	3718      	adds	r7, #24
 800e234:	46bd      	mov	sp, r7
 800e236:	bd80      	pop	{r7, pc}
 800e238:	80002400 	.word	0x80002400
 800e23c:	fe00e800 	.word	0xfe00e800

0800e240 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800e240:	b480      	push	{r7}
 800e242:	b083      	sub	sp, #12
 800e244:	af00      	add	r7, sp, #0
 800e246:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800e248:	687b      	ldr	r3, [r7, #4]
 800e24a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e24e:	b2db      	uxtb	r3, r3
}
 800e250:	4618      	mov	r0, r3
 800e252:	370c      	adds	r7, #12
 800e254:	46bd      	mov	sp, r7
 800e256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e25a:	4770      	bx	lr

0800e25c <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 800e25c:	b480      	push	{r7}
 800e25e:	b083      	sub	sp, #12
 800e260:	af00      	add	r7, sp, #0
 800e262:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 800e264:	687b      	ldr	r3, [r7, #4]
 800e266:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 800e268:	4618      	mov	r0, r3
 800e26a:	370c      	adds	r7, #12
 800e26c:	46bd      	mov	sp, r7
 800e26e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e272:	4770      	bx	lr

0800e274 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800e274:	b580      	push	{r7, lr}
 800e276:	b086      	sub	sp, #24
 800e278:	af02      	add	r7, sp, #8
 800e27a:	60f8      	str	r0, [r7, #12]
 800e27c:	4608      	mov	r0, r1
 800e27e:	4611      	mov	r1, r2
 800e280:	461a      	mov	r2, r3
 800e282:	4603      	mov	r3, r0
 800e284:	817b      	strh	r3, [r7, #10]
 800e286:	460b      	mov	r3, r1
 800e288:	813b      	strh	r3, [r7, #8]
 800e28a:	4613      	mov	r3, r2
 800e28c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800e28e:	88fb      	ldrh	r3, [r7, #6]
 800e290:	b2da      	uxtb	r2, r3
 800e292:	8979      	ldrh	r1, [r7, #10]
 800e294:	4b20      	ldr	r3, [pc, #128]	; (800e318 <I2C_RequestMemoryWrite+0xa4>)
 800e296:	9300      	str	r3, [sp, #0]
 800e298:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800e29c:	68f8      	ldr	r0, [r7, #12]
 800e29e:	f000 f9d7 	bl	800e650 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800e2a2:	69fa      	ldr	r2, [r7, #28]
 800e2a4:	69b9      	ldr	r1, [r7, #24]
 800e2a6:	68f8      	ldr	r0, [r7, #12]
 800e2a8:	f000 f8f0 	bl	800e48c <I2C_WaitOnTXISFlagUntilTimeout>
 800e2ac:	4603      	mov	r3, r0
 800e2ae:	2b00      	cmp	r3, #0
 800e2b0:	d001      	beq.n	800e2b6 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800e2b2:	2301      	movs	r3, #1
 800e2b4:	e02c      	b.n	800e310 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800e2b6:	88fb      	ldrh	r3, [r7, #6]
 800e2b8:	2b01      	cmp	r3, #1
 800e2ba:	d105      	bne.n	800e2c8 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800e2bc:	893b      	ldrh	r3, [r7, #8]
 800e2be:	b2da      	uxtb	r2, r3
 800e2c0:	68fb      	ldr	r3, [r7, #12]
 800e2c2:	681b      	ldr	r3, [r3, #0]
 800e2c4:	629a      	str	r2, [r3, #40]	; 0x28
 800e2c6:	e015      	b.n	800e2f4 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800e2c8:	893b      	ldrh	r3, [r7, #8]
 800e2ca:	0a1b      	lsrs	r3, r3, #8
 800e2cc:	b29b      	uxth	r3, r3
 800e2ce:	b2da      	uxtb	r2, r3
 800e2d0:	68fb      	ldr	r3, [r7, #12]
 800e2d2:	681b      	ldr	r3, [r3, #0]
 800e2d4:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800e2d6:	69fa      	ldr	r2, [r7, #28]
 800e2d8:	69b9      	ldr	r1, [r7, #24]
 800e2da:	68f8      	ldr	r0, [r7, #12]
 800e2dc:	f000 f8d6 	bl	800e48c <I2C_WaitOnTXISFlagUntilTimeout>
 800e2e0:	4603      	mov	r3, r0
 800e2e2:	2b00      	cmp	r3, #0
 800e2e4:	d001      	beq.n	800e2ea <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800e2e6:	2301      	movs	r3, #1
 800e2e8:	e012      	b.n	800e310 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800e2ea:	893b      	ldrh	r3, [r7, #8]
 800e2ec:	b2da      	uxtb	r2, r3
 800e2ee:	68fb      	ldr	r3, [r7, #12]
 800e2f0:	681b      	ldr	r3, [r3, #0]
 800e2f2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800e2f4:	69fb      	ldr	r3, [r7, #28]
 800e2f6:	9300      	str	r3, [sp, #0]
 800e2f8:	69bb      	ldr	r3, [r7, #24]
 800e2fa:	2200      	movs	r2, #0
 800e2fc:	2180      	movs	r1, #128	; 0x80
 800e2fe:	68f8      	ldr	r0, [r7, #12]
 800e300:	f000 f884 	bl	800e40c <I2C_WaitOnFlagUntilTimeout>
 800e304:	4603      	mov	r3, r0
 800e306:	2b00      	cmp	r3, #0
 800e308:	d001      	beq.n	800e30e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800e30a:	2301      	movs	r3, #1
 800e30c:	e000      	b.n	800e310 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800e30e:	2300      	movs	r3, #0
}
 800e310:	4618      	mov	r0, r3
 800e312:	3710      	adds	r7, #16
 800e314:	46bd      	mov	sp, r7
 800e316:	bd80      	pop	{r7, pc}
 800e318:	80002000 	.word	0x80002000

0800e31c <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800e31c:	b580      	push	{r7, lr}
 800e31e:	b086      	sub	sp, #24
 800e320:	af02      	add	r7, sp, #8
 800e322:	60f8      	str	r0, [r7, #12]
 800e324:	4608      	mov	r0, r1
 800e326:	4611      	mov	r1, r2
 800e328:	461a      	mov	r2, r3
 800e32a:	4603      	mov	r3, r0
 800e32c:	817b      	strh	r3, [r7, #10]
 800e32e:	460b      	mov	r3, r1
 800e330:	813b      	strh	r3, [r7, #8]
 800e332:	4613      	mov	r3, r2
 800e334:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800e336:	88fb      	ldrh	r3, [r7, #6]
 800e338:	b2da      	uxtb	r2, r3
 800e33a:	8979      	ldrh	r1, [r7, #10]
 800e33c:	4b20      	ldr	r3, [pc, #128]	; (800e3c0 <I2C_RequestMemoryRead+0xa4>)
 800e33e:	9300      	str	r3, [sp, #0]
 800e340:	2300      	movs	r3, #0
 800e342:	68f8      	ldr	r0, [r7, #12]
 800e344:	f000 f984 	bl	800e650 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800e348:	69fa      	ldr	r2, [r7, #28]
 800e34a:	69b9      	ldr	r1, [r7, #24]
 800e34c:	68f8      	ldr	r0, [r7, #12]
 800e34e:	f000 f89d 	bl	800e48c <I2C_WaitOnTXISFlagUntilTimeout>
 800e352:	4603      	mov	r3, r0
 800e354:	2b00      	cmp	r3, #0
 800e356:	d001      	beq.n	800e35c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800e358:	2301      	movs	r3, #1
 800e35a:	e02c      	b.n	800e3b6 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800e35c:	88fb      	ldrh	r3, [r7, #6]
 800e35e:	2b01      	cmp	r3, #1
 800e360:	d105      	bne.n	800e36e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800e362:	893b      	ldrh	r3, [r7, #8]
 800e364:	b2da      	uxtb	r2, r3
 800e366:	68fb      	ldr	r3, [r7, #12]
 800e368:	681b      	ldr	r3, [r3, #0]
 800e36a:	629a      	str	r2, [r3, #40]	; 0x28
 800e36c:	e015      	b.n	800e39a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800e36e:	893b      	ldrh	r3, [r7, #8]
 800e370:	0a1b      	lsrs	r3, r3, #8
 800e372:	b29b      	uxth	r3, r3
 800e374:	b2da      	uxtb	r2, r3
 800e376:	68fb      	ldr	r3, [r7, #12]
 800e378:	681b      	ldr	r3, [r3, #0]
 800e37a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800e37c:	69fa      	ldr	r2, [r7, #28]
 800e37e:	69b9      	ldr	r1, [r7, #24]
 800e380:	68f8      	ldr	r0, [r7, #12]
 800e382:	f000 f883 	bl	800e48c <I2C_WaitOnTXISFlagUntilTimeout>
 800e386:	4603      	mov	r3, r0
 800e388:	2b00      	cmp	r3, #0
 800e38a:	d001      	beq.n	800e390 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800e38c:	2301      	movs	r3, #1
 800e38e:	e012      	b.n	800e3b6 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800e390:	893b      	ldrh	r3, [r7, #8]
 800e392:	b2da      	uxtb	r2, r3
 800e394:	68fb      	ldr	r3, [r7, #12]
 800e396:	681b      	ldr	r3, [r3, #0]
 800e398:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800e39a:	69fb      	ldr	r3, [r7, #28]
 800e39c:	9300      	str	r3, [sp, #0]
 800e39e:	69bb      	ldr	r3, [r7, #24]
 800e3a0:	2200      	movs	r2, #0
 800e3a2:	2140      	movs	r1, #64	; 0x40
 800e3a4:	68f8      	ldr	r0, [r7, #12]
 800e3a6:	f000 f831 	bl	800e40c <I2C_WaitOnFlagUntilTimeout>
 800e3aa:	4603      	mov	r3, r0
 800e3ac:	2b00      	cmp	r3, #0
 800e3ae:	d001      	beq.n	800e3b4 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800e3b0:	2301      	movs	r3, #1
 800e3b2:	e000      	b.n	800e3b6 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800e3b4:	2300      	movs	r3, #0
}
 800e3b6:	4618      	mov	r0, r3
 800e3b8:	3710      	adds	r7, #16
 800e3ba:	46bd      	mov	sp, r7
 800e3bc:	bd80      	pop	{r7, pc}
 800e3be:	bf00      	nop
 800e3c0:	80002000 	.word	0x80002000

0800e3c4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800e3c4:	b480      	push	{r7}
 800e3c6:	b083      	sub	sp, #12
 800e3c8:	af00      	add	r7, sp, #0
 800e3ca:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800e3cc:	687b      	ldr	r3, [r7, #4]
 800e3ce:	681b      	ldr	r3, [r3, #0]
 800e3d0:	699b      	ldr	r3, [r3, #24]
 800e3d2:	f003 0302 	and.w	r3, r3, #2
 800e3d6:	2b02      	cmp	r3, #2
 800e3d8:	d103      	bne.n	800e3e2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800e3da:	687b      	ldr	r3, [r7, #4]
 800e3dc:	681b      	ldr	r3, [r3, #0]
 800e3de:	2200      	movs	r2, #0
 800e3e0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800e3e2:	687b      	ldr	r3, [r7, #4]
 800e3e4:	681b      	ldr	r3, [r3, #0]
 800e3e6:	699b      	ldr	r3, [r3, #24]
 800e3e8:	f003 0301 	and.w	r3, r3, #1
 800e3ec:	2b01      	cmp	r3, #1
 800e3ee:	d007      	beq.n	800e400 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800e3f0:	687b      	ldr	r3, [r7, #4]
 800e3f2:	681b      	ldr	r3, [r3, #0]
 800e3f4:	699a      	ldr	r2, [r3, #24]
 800e3f6:	687b      	ldr	r3, [r7, #4]
 800e3f8:	681b      	ldr	r3, [r3, #0]
 800e3fa:	f042 0201 	orr.w	r2, r2, #1
 800e3fe:	619a      	str	r2, [r3, #24]
  }
}
 800e400:	bf00      	nop
 800e402:	370c      	adds	r7, #12
 800e404:	46bd      	mov	sp, r7
 800e406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e40a:	4770      	bx	lr

0800e40c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800e40c:	b580      	push	{r7, lr}
 800e40e:	b084      	sub	sp, #16
 800e410:	af00      	add	r7, sp, #0
 800e412:	60f8      	str	r0, [r7, #12]
 800e414:	60b9      	str	r1, [r7, #8]
 800e416:	603b      	str	r3, [r7, #0]
 800e418:	4613      	mov	r3, r2
 800e41a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800e41c:	e022      	b.n	800e464 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e41e:	683b      	ldr	r3, [r7, #0]
 800e420:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e424:	d01e      	beq.n	800e464 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e426:	f7fd f85f 	bl	800b4e8 <HAL_GetTick>
 800e42a:	4602      	mov	r2, r0
 800e42c:	69bb      	ldr	r3, [r7, #24]
 800e42e:	1ad3      	subs	r3, r2, r3
 800e430:	683a      	ldr	r2, [r7, #0]
 800e432:	429a      	cmp	r2, r3
 800e434:	d302      	bcc.n	800e43c <I2C_WaitOnFlagUntilTimeout+0x30>
 800e436:	683b      	ldr	r3, [r7, #0]
 800e438:	2b00      	cmp	r3, #0
 800e43a:	d113      	bne.n	800e464 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800e43c:	68fb      	ldr	r3, [r7, #12]
 800e43e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e440:	f043 0220 	orr.w	r2, r3, #32
 800e444:	68fb      	ldr	r3, [r7, #12]
 800e446:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800e448:	68fb      	ldr	r3, [r7, #12]
 800e44a:	2220      	movs	r2, #32
 800e44c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800e450:	68fb      	ldr	r3, [r7, #12]
 800e452:	2200      	movs	r2, #0
 800e454:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800e458:	68fb      	ldr	r3, [r7, #12]
 800e45a:	2200      	movs	r2, #0
 800e45c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800e460:	2301      	movs	r3, #1
 800e462:	e00f      	b.n	800e484 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800e464:	68fb      	ldr	r3, [r7, #12]
 800e466:	681b      	ldr	r3, [r3, #0]
 800e468:	699a      	ldr	r2, [r3, #24]
 800e46a:	68bb      	ldr	r3, [r7, #8]
 800e46c:	4013      	ands	r3, r2
 800e46e:	68ba      	ldr	r2, [r7, #8]
 800e470:	429a      	cmp	r2, r3
 800e472:	bf0c      	ite	eq
 800e474:	2301      	moveq	r3, #1
 800e476:	2300      	movne	r3, #0
 800e478:	b2db      	uxtb	r3, r3
 800e47a:	461a      	mov	r2, r3
 800e47c:	79fb      	ldrb	r3, [r7, #7]
 800e47e:	429a      	cmp	r2, r3
 800e480:	d0cd      	beq.n	800e41e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800e482:	2300      	movs	r3, #0
}
 800e484:	4618      	mov	r0, r3
 800e486:	3710      	adds	r7, #16
 800e488:	46bd      	mov	sp, r7
 800e48a:	bd80      	pop	{r7, pc}

0800e48c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800e48c:	b580      	push	{r7, lr}
 800e48e:	b084      	sub	sp, #16
 800e490:	af00      	add	r7, sp, #0
 800e492:	60f8      	str	r0, [r7, #12]
 800e494:	60b9      	str	r1, [r7, #8]
 800e496:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800e498:	e02c      	b.n	800e4f4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800e49a:	687a      	ldr	r2, [r7, #4]
 800e49c:	68b9      	ldr	r1, [r7, #8]
 800e49e:	68f8      	ldr	r0, [r7, #12]
 800e4a0:	f000 f870 	bl	800e584 <I2C_IsAcknowledgeFailed>
 800e4a4:	4603      	mov	r3, r0
 800e4a6:	2b00      	cmp	r3, #0
 800e4a8:	d001      	beq.n	800e4ae <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800e4aa:	2301      	movs	r3, #1
 800e4ac:	e02a      	b.n	800e504 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e4ae:	68bb      	ldr	r3, [r7, #8]
 800e4b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e4b4:	d01e      	beq.n	800e4f4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e4b6:	f7fd f817 	bl	800b4e8 <HAL_GetTick>
 800e4ba:	4602      	mov	r2, r0
 800e4bc:	687b      	ldr	r3, [r7, #4]
 800e4be:	1ad3      	subs	r3, r2, r3
 800e4c0:	68ba      	ldr	r2, [r7, #8]
 800e4c2:	429a      	cmp	r2, r3
 800e4c4:	d302      	bcc.n	800e4cc <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800e4c6:	68bb      	ldr	r3, [r7, #8]
 800e4c8:	2b00      	cmp	r3, #0
 800e4ca:	d113      	bne.n	800e4f4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800e4cc:	68fb      	ldr	r3, [r7, #12]
 800e4ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e4d0:	f043 0220 	orr.w	r2, r3, #32
 800e4d4:	68fb      	ldr	r3, [r7, #12]
 800e4d6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800e4d8:	68fb      	ldr	r3, [r7, #12]
 800e4da:	2220      	movs	r2, #32
 800e4dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800e4e0:	68fb      	ldr	r3, [r7, #12]
 800e4e2:	2200      	movs	r2, #0
 800e4e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800e4e8:	68fb      	ldr	r3, [r7, #12]
 800e4ea:	2200      	movs	r2, #0
 800e4ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800e4f0:	2301      	movs	r3, #1
 800e4f2:	e007      	b.n	800e504 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800e4f4:	68fb      	ldr	r3, [r7, #12]
 800e4f6:	681b      	ldr	r3, [r3, #0]
 800e4f8:	699b      	ldr	r3, [r3, #24]
 800e4fa:	f003 0302 	and.w	r3, r3, #2
 800e4fe:	2b02      	cmp	r3, #2
 800e500:	d1cb      	bne.n	800e49a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800e502:	2300      	movs	r3, #0
}
 800e504:	4618      	mov	r0, r3
 800e506:	3710      	adds	r7, #16
 800e508:	46bd      	mov	sp, r7
 800e50a:	bd80      	pop	{r7, pc}

0800e50c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800e50c:	b580      	push	{r7, lr}
 800e50e:	b084      	sub	sp, #16
 800e510:	af00      	add	r7, sp, #0
 800e512:	60f8      	str	r0, [r7, #12]
 800e514:	60b9      	str	r1, [r7, #8]
 800e516:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800e518:	e028      	b.n	800e56c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800e51a:	687a      	ldr	r2, [r7, #4]
 800e51c:	68b9      	ldr	r1, [r7, #8]
 800e51e:	68f8      	ldr	r0, [r7, #12]
 800e520:	f000 f830 	bl	800e584 <I2C_IsAcknowledgeFailed>
 800e524:	4603      	mov	r3, r0
 800e526:	2b00      	cmp	r3, #0
 800e528:	d001      	beq.n	800e52e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800e52a:	2301      	movs	r3, #1
 800e52c:	e026      	b.n	800e57c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e52e:	f7fc ffdb 	bl	800b4e8 <HAL_GetTick>
 800e532:	4602      	mov	r2, r0
 800e534:	687b      	ldr	r3, [r7, #4]
 800e536:	1ad3      	subs	r3, r2, r3
 800e538:	68ba      	ldr	r2, [r7, #8]
 800e53a:	429a      	cmp	r2, r3
 800e53c:	d302      	bcc.n	800e544 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800e53e:	68bb      	ldr	r3, [r7, #8]
 800e540:	2b00      	cmp	r3, #0
 800e542:	d113      	bne.n	800e56c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800e544:	68fb      	ldr	r3, [r7, #12]
 800e546:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e548:	f043 0220 	orr.w	r2, r3, #32
 800e54c:	68fb      	ldr	r3, [r7, #12]
 800e54e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800e550:	68fb      	ldr	r3, [r7, #12]
 800e552:	2220      	movs	r2, #32
 800e554:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800e558:	68fb      	ldr	r3, [r7, #12]
 800e55a:	2200      	movs	r2, #0
 800e55c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800e560:	68fb      	ldr	r3, [r7, #12]
 800e562:	2200      	movs	r2, #0
 800e564:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800e568:	2301      	movs	r3, #1
 800e56a:	e007      	b.n	800e57c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800e56c:	68fb      	ldr	r3, [r7, #12]
 800e56e:	681b      	ldr	r3, [r3, #0]
 800e570:	699b      	ldr	r3, [r3, #24]
 800e572:	f003 0320 	and.w	r3, r3, #32
 800e576:	2b20      	cmp	r3, #32
 800e578:	d1cf      	bne.n	800e51a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800e57a:	2300      	movs	r3, #0
}
 800e57c:	4618      	mov	r0, r3
 800e57e:	3710      	adds	r7, #16
 800e580:	46bd      	mov	sp, r7
 800e582:	bd80      	pop	{r7, pc}

0800e584 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800e584:	b580      	push	{r7, lr}
 800e586:	b084      	sub	sp, #16
 800e588:	af00      	add	r7, sp, #0
 800e58a:	60f8      	str	r0, [r7, #12]
 800e58c:	60b9      	str	r1, [r7, #8]
 800e58e:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800e590:	68fb      	ldr	r3, [r7, #12]
 800e592:	681b      	ldr	r3, [r3, #0]
 800e594:	699b      	ldr	r3, [r3, #24]
 800e596:	f003 0310 	and.w	r3, r3, #16
 800e59a:	2b10      	cmp	r3, #16
 800e59c:	d151      	bne.n	800e642 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800e59e:	e022      	b.n	800e5e6 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800e5a0:	68bb      	ldr	r3, [r7, #8]
 800e5a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e5a6:	d01e      	beq.n	800e5e6 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e5a8:	f7fc ff9e 	bl	800b4e8 <HAL_GetTick>
 800e5ac:	4602      	mov	r2, r0
 800e5ae:	687b      	ldr	r3, [r7, #4]
 800e5b0:	1ad3      	subs	r3, r2, r3
 800e5b2:	68ba      	ldr	r2, [r7, #8]
 800e5b4:	429a      	cmp	r2, r3
 800e5b6:	d302      	bcc.n	800e5be <I2C_IsAcknowledgeFailed+0x3a>
 800e5b8:	68bb      	ldr	r3, [r7, #8]
 800e5ba:	2b00      	cmp	r3, #0
 800e5bc:	d113      	bne.n	800e5e6 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800e5be:	68fb      	ldr	r3, [r7, #12]
 800e5c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e5c2:	f043 0220 	orr.w	r2, r3, #32
 800e5c6:	68fb      	ldr	r3, [r7, #12]
 800e5c8:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800e5ca:	68fb      	ldr	r3, [r7, #12]
 800e5cc:	2220      	movs	r2, #32
 800e5ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800e5d2:	68fb      	ldr	r3, [r7, #12]
 800e5d4:	2200      	movs	r2, #0
 800e5d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800e5da:	68fb      	ldr	r3, [r7, #12]
 800e5dc:	2200      	movs	r2, #0
 800e5de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800e5e2:	2301      	movs	r3, #1
 800e5e4:	e02e      	b.n	800e644 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800e5e6:	68fb      	ldr	r3, [r7, #12]
 800e5e8:	681b      	ldr	r3, [r3, #0]
 800e5ea:	699b      	ldr	r3, [r3, #24]
 800e5ec:	f003 0320 	and.w	r3, r3, #32
 800e5f0:	2b20      	cmp	r3, #32
 800e5f2:	d1d5      	bne.n	800e5a0 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800e5f4:	68fb      	ldr	r3, [r7, #12]
 800e5f6:	681b      	ldr	r3, [r3, #0]
 800e5f8:	2210      	movs	r2, #16
 800e5fa:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800e5fc:	68fb      	ldr	r3, [r7, #12]
 800e5fe:	681b      	ldr	r3, [r3, #0]
 800e600:	2220      	movs	r2, #32
 800e602:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800e604:	68f8      	ldr	r0, [r7, #12]
 800e606:	f7ff fedd 	bl	800e3c4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800e60a:	68fb      	ldr	r3, [r7, #12]
 800e60c:	681b      	ldr	r3, [r3, #0]
 800e60e:	6859      	ldr	r1, [r3, #4]
 800e610:	68fb      	ldr	r3, [r7, #12]
 800e612:	681a      	ldr	r2, [r3, #0]
 800e614:	4b0d      	ldr	r3, [pc, #52]	; (800e64c <I2C_IsAcknowledgeFailed+0xc8>)
 800e616:	400b      	ands	r3, r1
 800e618:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800e61a:	68fb      	ldr	r3, [r7, #12]
 800e61c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e61e:	f043 0204 	orr.w	r2, r3, #4
 800e622:	68fb      	ldr	r3, [r7, #12]
 800e624:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800e626:	68fb      	ldr	r3, [r7, #12]
 800e628:	2220      	movs	r2, #32
 800e62a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800e62e:	68fb      	ldr	r3, [r7, #12]
 800e630:	2200      	movs	r2, #0
 800e632:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800e636:	68fb      	ldr	r3, [r7, #12]
 800e638:	2200      	movs	r2, #0
 800e63a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800e63e:	2301      	movs	r3, #1
 800e640:	e000      	b.n	800e644 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800e642:	2300      	movs	r3, #0
}
 800e644:	4618      	mov	r0, r3
 800e646:	3710      	adds	r7, #16
 800e648:	46bd      	mov	sp, r7
 800e64a:	bd80      	pop	{r7, pc}
 800e64c:	fe00e800 	.word	0xfe00e800

0800e650 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800e650:	b480      	push	{r7}
 800e652:	b085      	sub	sp, #20
 800e654:	af00      	add	r7, sp, #0
 800e656:	60f8      	str	r0, [r7, #12]
 800e658:	607b      	str	r3, [r7, #4]
 800e65a:	460b      	mov	r3, r1
 800e65c:	817b      	strh	r3, [r7, #10]
 800e65e:	4613      	mov	r3, r2
 800e660:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800e662:	68fb      	ldr	r3, [r7, #12]
 800e664:	681b      	ldr	r3, [r3, #0]
 800e666:	685a      	ldr	r2, [r3, #4]
 800e668:	69bb      	ldr	r3, [r7, #24]
 800e66a:	0d5b      	lsrs	r3, r3, #21
 800e66c:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800e670:	4b0d      	ldr	r3, [pc, #52]	; (800e6a8 <I2C_TransferConfig+0x58>)
 800e672:	430b      	orrs	r3, r1
 800e674:	43db      	mvns	r3, r3
 800e676:	ea02 0103 	and.w	r1, r2, r3
 800e67a:	897b      	ldrh	r3, [r7, #10]
 800e67c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800e680:	7a7b      	ldrb	r3, [r7, #9]
 800e682:	041b      	lsls	r3, r3, #16
 800e684:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e688:	431a      	orrs	r2, r3
 800e68a:	687b      	ldr	r3, [r7, #4]
 800e68c:	431a      	orrs	r2, r3
 800e68e:	69bb      	ldr	r3, [r7, #24]
 800e690:	431a      	orrs	r2, r3
 800e692:	68fb      	ldr	r3, [r7, #12]
 800e694:	681b      	ldr	r3, [r3, #0]
 800e696:	430a      	orrs	r2, r1
 800e698:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800e69a:	bf00      	nop
 800e69c:	3714      	adds	r7, #20
 800e69e:	46bd      	mov	sp, r7
 800e6a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6a4:	4770      	bx	lr
 800e6a6:	bf00      	nop
 800e6a8:	03ff63ff 	.word	0x03ff63ff

0800e6ac <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800e6ac:	b480      	push	{r7}
 800e6ae:	b083      	sub	sp, #12
 800e6b0:	af00      	add	r7, sp, #0
 800e6b2:	6078      	str	r0, [r7, #4]
 800e6b4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800e6b6:	687b      	ldr	r3, [r7, #4]
 800e6b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e6bc:	b2db      	uxtb	r3, r3
 800e6be:	2b20      	cmp	r3, #32
 800e6c0:	d138      	bne.n	800e734 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800e6c2:	687b      	ldr	r3, [r7, #4]
 800e6c4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800e6c8:	2b01      	cmp	r3, #1
 800e6ca:	d101      	bne.n	800e6d0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800e6cc:	2302      	movs	r3, #2
 800e6ce:	e032      	b.n	800e736 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800e6d0:	687b      	ldr	r3, [r7, #4]
 800e6d2:	2201      	movs	r2, #1
 800e6d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800e6d8:	687b      	ldr	r3, [r7, #4]
 800e6da:	2224      	movs	r2, #36	; 0x24
 800e6dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800e6e0:	687b      	ldr	r3, [r7, #4]
 800e6e2:	681b      	ldr	r3, [r3, #0]
 800e6e4:	681a      	ldr	r2, [r3, #0]
 800e6e6:	687b      	ldr	r3, [r7, #4]
 800e6e8:	681b      	ldr	r3, [r3, #0]
 800e6ea:	f022 0201 	bic.w	r2, r2, #1
 800e6ee:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800e6f0:	687b      	ldr	r3, [r7, #4]
 800e6f2:	681b      	ldr	r3, [r3, #0]
 800e6f4:	681a      	ldr	r2, [r3, #0]
 800e6f6:	687b      	ldr	r3, [r7, #4]
 800e6f8:	681b      	ldr	r3, [r3, #0]
 800e6fa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800e6fe:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800e700:	687b      	ldr	r3, [r7, #4]
 800e702:	681b      	ldr	r3, [r3, #0]
 800e704:	6819      	ldr	r1, [r3, #0]
 800e706:	687b      	ldr	r3, [r7, #4]
 800e708:	681b      	ldr	r3, [r3, #0]
 800e70a:	683a      	ldr	r2, [r7, #0]
 800e70c:	430a      	orrs	r2, r1
 800e70e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800e710:	687b      	ldr	r3, [r7, #4]
 800e712:	681b      	ldr	r3, [r3, #0]
 800e714:	681a      	ldr	r2, [r3, #0]
 800e716:	687b      	ldr	r3, [r7, #4]
 800e718:	681b      	ldr	r3, [r3, #0]
 800e71a:	f042 0201 	orr.w	r2, r2, #1
 800e71e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800e720:	687b      	ldr	r3, [r7, #4]
 800e722:	2220      	movs	r2, #32
 800e724:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800e728:	687b      	ldr	r3, [r7, #4]
 800e72a:	2200      	movs	r2, #0
 800e72c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800e730:	2300      	movs	r3, #0
 800e732:	e000      	b.n	800e736 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800e734:	2302      	movs	r3, #2
  }
}
 800e736:	4618      	mov	r0, r3
 800e738:	370c      	adds	r7, #12
 800e73a:	46bd      	mov	sp, r7
 800e73c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e740:	4770      	bx	lr

0800e742 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800e742:	b480      	push	{r7}
 800e744:	b085      	sub	sp, #20
 800e746:	af00      	add	r7, sp, #0
 800e748:	6078      	str	r0, [r7, #4]
 800e74a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800e74c:	687b      	ldr	r3, [r7, #4]
 800e74e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e752:	b2db      	uxtb	r3, r3
 800e754:	2b20      	cmp	r3, #32
 800e756:	d139      	bne.n	800e7cc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800e758:	687b      	ldr	r3, [r7, #4]
 800e75a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800e75e:	2b01      	cmp	r3, #1
 800e760:	d101      	bne.n	800e766 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800e762:	2302      	movs	r3, #2
 800e764:	e033      	b.n	800e7ce <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800e766:	687b      	ldr	r3, [r7, #4]
 800e768:	2201      	movs	r2, #1
 800e76a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800e76e:	687b      	ldr	r3, [r7, #4]
 800e770:	2224      	movs	r2, #36	; 0x24
 800e772:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800e776:	687b      	ldr	r3, [r7, #4]
 800e778:	681b      	ldr	r3, [r3, #0]
 800e77a:	681a      	ldr	r2, [r3, #0]
 800e77c:	687b      	ldr	r3, [r7, #4]
 800e77e:	681b      	ldr	r3, [r3, #0]
 800e780:	f022 0201 	bic.w	r2, r2, #1
 800e784:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800e786:	687b      	ldr	r3, [r7, #4]
 800e788:	681b      	ldr	r3, [r3, #0]
 800e78a:	681b      	ldr	r3, [r3, #0]
 800e78c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800e78e:	68fb      	ldr	r3, [r7, #12]
 800e790:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800e794:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800e796:	683b      	ldr	r3, [r7, #0]
 800e798:	021b      	lsls	r3, r3, #8
 800e79a:	68fa      	ldr	r2, [r7, #12]
 800e79c:	4313      	orrs	r3, r2
 800e79e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800e7a0:	687b      	ldr	r3, [r7, #4]
 800e7a2:	681b      	ldr	r3, [r3, #0]
 800e7a4:	68fa      	ldr	r2, [r7, #12]
 800e7a6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800e7a8:	687b      	ldr	r3, [r7, #4]
 800e7aa:	681b      	ldr	r3, [r3, #0]
 800e7ac:	681a      	ldr	r2, [r3, #0]
 800e7ae:	687b      	ldr	r3, [r7, #4]
 800e7b0:	681b      	ldr	r3, [r3, #0]
 800e7b2:	f042 0201 	orr.w	r2, r2, #1
 800e7b6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800e7b8:	687b      	ldr	r3, [r7, #4]
 800e7ba:	2220      	movs	r2, #32
 800e7bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800e7c0:	687b      	ldr	r3, [r7, #4]
 800e7c2:	2200      	movs	r2, #0
 800e7c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800e7c8:	2300      	movs	r3, #0
 800e7ca:	e000      	b.n	800e7ce <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800e7cc:	2302      	movs	r3, #2
  }
}
 800e7ce:	4618      	mov	r0, r3
 800e7d0:	3714      	adds	r7, #20
 800e7d2:	46bd      	mov	sp, r7
 800e7d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7d8:	4770      	bx	lr
	...

0800e7dc <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 800e7dc:	b580      	push	{r7, lr}
 800e7de:	b084      	sub	sp, #16
 800e7e0:	af00      	add	r7, sp, #0
 800e7e2:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 800e7e4:	687b      	ldr	r3, [r7, #4]
 800e7e6:	2b00      	cmp	r3, #0
 800e7e8:	d101      	bne.n	800e7ee <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800e7ea:	2301      	movs	r3, #1
 800e7ec:	e0bf      	b.n	800e96e <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800e7ee:	687b      	ldr	r3, [r7, #4]
 800e7f0:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 800e7f4:	b2db      	uxtb	r3, r3
 800e7f6:	2b00      	cmp	r3, #0
 800e7f8:	d106      	bne.n	800e808 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800e7fa:	687b      	ldr	r3, [r7, #4]
 800e7fc:	2200      	movs	r2, #0
 800e7fe:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800e802:	6878      	ldr	r0, [r7, #4]
 800e804:	f7f5 f88c 	bl	8003920 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800e808:	687b      	ldr	r3, [r7, #4]
 800e80a:	2202      	movs	r2, #2
 800e80c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800e810:	687b      	ldr	r3, [r7, #4]
 800e812:	681b      	ldr	r3, [r3, #0]
 800e814:	699a      	ldr	r2, [r3, #24]
 800e816:	687b      	ldr	r3, [r7, #4]
 800e818:	681b      	ldr	r3, [r3, #0]
 800e81a:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 800e81e:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800e820:	687b      	ldr	r3, [r7, #4]
 800e822:	681b      	ldr	r3, [r3, #0]
 800e824:	6999      	ldr	r1, [r3, #24]
 800e826:	687b      	ldr	r3, [r7, #4]
 800e828:	685a      	ldr	r2, [r3, #4]
 800e82a:	687b      	ldr	r3, [r7, #4]
 800e82c:	689b      	ldr	r3, [r3, #8]
 800e82e:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800e830:	687b      	ldr	r3, [r7, #4]
 800e832:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800e834:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800e836:	687b      	ldr	r3, [r7, #4]
 800e838:	691b      	ldr	r3, [r3, #16]
 800e83a:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800e83c:	687b      	ldr	r3, [r7, #4]
 800e83e:	681b      	ldr	r3, [r3, #0]
 800e840:	430a      	orrs	r2, r1
 800e842:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800e844:	687b      	ldr	r3, [r7, #4]
 800e846:	681b      	ldr	r3, [r3, #0]
 800e848:	6899      	ldr	r1, [r3, #8]
 800e84a:	687b      	ldr	r3, [r7, #4]
 800e84c:	681a      	ldr	r2, [r3, #0]
 800e84e:	4b4a      	ldr	r3, [pc, #296]	; (800e978 <HAL_LTDC_Init+0x19c>)
 800e850:	400b      	ands	r3, r1
 800e852:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800e854:	687b      	ldr	r3, [r7, #4]
 800e856:	695b      	ldr	r3, [r3, #20]
 800e858:	041b      	lsls	r3, r3, #16
 800e85a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800e85c:	687b      	ldr	r3, [r7, #4]
 800e85e:	681b      	ldr	r3, [r3, #0]
 800e860:	6899      	ldr	r1, [r3, #8]
 800e862:	687b      	ldr	r3, [r7, #4]
 800e864:	699a      	ldr	r2, [r3, #24]
 800e866:	68fb      	ldr	r3, [r7, #12]
 800e868:	431a      	orrs	r2, r3
 800e86a:	687b      	ldr	r3, [r7, #4]
 800e86c:	681b      	ldr	r3, [r3, #0]
 800e86e:	430a      	orrs	r2, r1
 800e870:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800e872:	687b      	ldr	r3, [r7, #4]
 800e874:	681b      	ldr	r3, [r3, #0]
 800e876:	68d9      	ldr	r1, [r3, #12]
 800e878:	687b      	ldr	r3, [r7, #4]
 800e87a:	681a      	ldr	r2, [r3, #0]
 800e87c:	4b3e      	ldr	r3, [pc, #248]	; (800e978 <HAL_LTDC_Init+0x19c>)
 800e87e:	400b      	ands	r3, r1
 800e880:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800e882:	687b      	ldr	r3, [r7, #4]
 800e884:	69db      	ldr	r3, [r3, #28]
 800e886:	041b      	lsls	r3, r3, #16
 800e888:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800e88a:	687b      	ldr	r3, [r7, #4]
 800e88c:	681b      	ldr	r3, [r3, #0]
 800e88e:	68d9      	ldr	r1, [r3, #12]
 800e890:	687b      	ldr	r3, [r7, #4]
 800e892:	6a1a      	ldr	r2, [r3, #32]
 800e894:	68fb      	ldr	r3, [r7, #12]
 800e896:	431a      	orrs	r2, r3
 800e898:	687b      	ldr	r3, [r7, #4]
 800e89a:	681b      	ldr	r3, [r3, #0]
 800e89c:	430a      	orrs	r2, r1
 800e89e:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 800e8a0:	687b      	ldr	r3, [r7, #4]
 800e8a2:	681b      	ldr	r3, [r3, #0]
 800e8a4:	6919      	ldr	r1, [r3, #16]
 800e8a6:	687b      	ldr	r3, [r7, #4]
 800e8a8:	681a      	ldr	r2, [r3, #0]
 800e8aa:	4b33      	ldr	r3, [pc, #204]	; (800e978 <HAL_LTDC_Init+0x19c>)
 800e8ac:	400b      	ands	r3, r1
 800e8ae:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 800e8b0:	687b      	ldr	r3, [r7, #4]
 800e8b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e8b4:	041b      	lsls	r3, r3, #16
 800e8b6:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800e8b8:	687b      	ldr	r3, [r7, #4]
 800e8ba:	681b      	ldr	r3, [r3, #0]
 800e8bc:	6919      	ldr	r1, [r3, #16]
 800e8be:	687b      	ldr	r3, [r7, #4]
 800e8c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e8c2:	68fb      	ldr	r3, [r7, #12]
 800e8c4:	431a      	orrs	r2, r3
 800e8c6:	687b      	ldr	r3, [r7, #4]
 800e8c8:	681b      	ldr	r3, [r3, #0]
 800e8ca:	430a      	orrs	r2, r1
 800e8cc:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800e8ce:	687b      	ldr	r3, [r7, #4]
 800e8d0:	681b      	ldr	r3, [r3, #0]
 800e8d2:	6959      	ldr	r1, [r3, #20]
 800e8d4:	687b      	ldr	r3, [r7, #4]
 800e8d6:	681a      	ldr	r2, [r3, #0]
 800e8d8:	4b27      	ldr	r3, [pc, #156]	; (800e978 <HAL_LTDC_Init+0x19c>)
 800e8da:	400b      	ands	r3, r1
 800e8dc:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800e8de:	687b      	ldr	r3, [r7, #4]
 800e8e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e8e2:	041b      	lsls	r3, r3, #16
 800e8e4:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800e8e6:	687b      	ldr	r3, [r7, #4]
 800e8e8:	681b      	ldr	r3, [r3, #0]
 800e8ea:	6959      	ldr	r1, [r3, #20]
 800e8ec:	687b      	ldr	r3, [r7, #4]
 800e8ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e8f0:	68fb      	ldr	r3, [r7, #12]
 800e8f2:	431a      	orrs	r2, r3
 800e8f4:	687b      	ldr	r3, [r7, #4]
 800e8f6:	681b      	ldr	r3, [r3, #0]
 800e8f8:	430a      	orrs	r2, r1
 800e8fa:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800e8fc:	687b      	ldr	r3, [r7, #4]
 800e8fe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800e902:	021b      	lsls	r3, r3, #8
 800e904:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800e906:	687b      	ldr	r3, [r7, #4]
 800e908:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800e90c:	041b      	lsls	r3, r3, #16
 800e90e:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800e910:	687b      	ldr	r3, [r7, #4]
 800e912:	681b      	ldr	r3, [r3, #0]
 800e914:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e916:	687b      	ldr	r3, [r7, #4]
 800e918:	681b      	ldr	r3, [r3, #0]
 800e91a:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800e91e:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800e920:	687b      	ldr	r3, [r7, #4]
 800e922:	681b      	ldr	r3, [r3, #0]
 800e924:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800e926:	68ba      	ldr	r2, [r7, #8]
 800e928:	68fb      	ldr	r3, [r7, #12]
 800e92a:	4313      	orrs	r3, r2
 800e92c:	687a      	ldr	r2, [r7, #4]
 800e92e:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800e932:	431a      	orrs	r2, r3
 800e934:	687b      	ldr	r3, [r7, #4]
 800e936:	681b      	ldr	r3, [r3, #0]
 800e938:	430a      	orrs	r2, r1
 800e93a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800e93c:	687b      	ldr	r3, [r7, #4]
 800e93e:	681b      	ldr	r3, [r3, #0]
 800e940:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e942:	687b      	ldr	r3, [r7, #4]
 800e944:	681b      	ldr	r3, [r3, #0]
 800e946:	f042 0206 	orr.w	r2, r2, #6
 800e94a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 800e94c:	687b      	ldr	r3, [r7, #4]
 800e94e:	681b      	ldr	r3, [r3, #0]
 800e950:	699a      	ldr	r2, [r3, #24]
 800e952:	687b      	ldr	r3, [r7, #4]
 800e954:	681b      	ldr	r3, [r3, #0]
 800e956:	f042 0201 	orr.w	r2, r2, #1
 800e95a:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800e95c:	687b      	ldr	r3, [r7, #4]
 800e95e:	2200      	movs	r2, #0
 800e960:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800e964:	687b      	ldr	r3, [r7, #4]
 800e966:	2201      	movs	r2, #1
 800e968:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 800e96c:	2300      	movs	r3, #0
}
 800e96e:	4618      	mov	r0, r3
 800e970:	3710      	adds	r7, #16
 800e972:	46bd      	mov	sp, r7
 800e974:	bd80      	pop	{r7, pc}
 800e976:	bf00      	nop
 800e978:	f000f800 	.word	0xf000f800

0800e97c <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 800e97c:	b580      	push	{r7, lr}
 800e97e:	b084      	sub	sp, #16
 800e980:	af00      	add	r7, sp, #0
 800e982:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 800e984:	687b      	ldr	r3, [r7, #4]
 800e986:	681b      	ldr	r3, [r3, #0]
 800e988:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e98a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 800e98c:	687b      	ldr	r3, [r7, #4]
 800e98e:	681b      	ldr	r3, [r3, #0]
 800e990:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e992:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 800e994:	68fb      	ldr	r3, [r7, #12]
 800e996:	f003 0304 	and.w	r3, r3, #4
 800e99a:	2b00      	cmp	r3, #0
 800e99c:	d023      	beq.n	800e9e6 <HAL_LTDC_IRQHandler+0x6a>
 800e99e:	68bb      	ldr	r3, [r7, #8]
 800e9a0:	f003 0304 	and.w	r3, r3, #4
 800e9a4:	2b00      	cmp	r3, #0
 800e9a6:	d01e      	beq.n	800e9e6 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 800e9a8:	687b      	ldr	r3, [r7, #4]
 800e9aa:	681b      	ldr	r3, [r3, #0]
 800e9ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e9ae:	687b      	ldr	r3, [r7, #4]
 800e9b0:	681b      	ldr	r3, [r3, #0]
 800e9b2:	f022 0204 	bic.w	r2, r2, #4
 800e9b6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 800e9b8:	687b      	ldr	r3, [r7, #4]
 800e9ba:	681b      	ldr	r3, [r3, #0]
 800e9bc:	2204      	movs	r2, #4
 800e9be:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 800e9c0:	687b      	ldr	r3, [r7, #4]
 800e9c2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800e9c6:	f043 0201 	orr.w	r2, r3, #1
 800e9ca:	687b      	ldr	r3, [r7, #4]
 800e9cc:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800e9d0:	687b      	ldr	r3, [r7, #4]
 800e9d2:	2204      	movs	r2, #4
 800e9d4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	2200      	movs	r2, #0
 800e9dc:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800e9e0:	6878      	ldr	r0, [r7, #4]
 800e9e2:	f000 f86f 	bl	800eac4 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 800e9e6:	68fb      	ldr	r3, [r7, #12]
 800e9e8:	f003 0302 	and.w	r3, r3, #2
 800e9ec:	2b00      	cmp	r3, #0
 800e9ee:	d023      	beq.n	800ea38 <HAL_LTDC_IRQHandler+0xbc>
 800e9f0:	68bb      	ldr	r3, [r7, #8]
 800e9f2:	f003 0302 	and.w	r3, r3, #2
 800e9f6:	2b00      	cmp	r3, #0
 800e9f8:	d01e      	beq.n	800ea38 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800e9fa:	687b      	ldr	r3, [r7, #4]
 800e9fc:	681b      	ldr	r3, [r3, #0]
 800e9fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ea00:	687b      	ldr	r3, [r7, #4]
 800ea02:	681b      	ldr	r3, [r3, #0]
 800ea04:	f022 0202 	bic.w	r2, r2, #2
 800ea08:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800ea0a:	687b      	ldr	r3, [r7, #4]
 800ea0c:	681b      	ldr	r3, [r3, #0]
 800ea0e:	2202      	movs	r2, #2
 800ea10:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800ea12:	687b      	ldr	r3, [r7, #4]
 800ea14:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800ea18:	f043 0202 	orr.w	r2, r3, #2
 800ea1c:	687b      	ldr	r3, [r7, #4]
 800ea1e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800ea22:	687b      	ldr	r3, [r7, #4]
 800ea24:	2204      	movs	r2, #4
 800ea26:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800ea2a:	687b      	ldr	r3, [r7, #4]
 800ea2c:	2200      	movs	r2, #0
 800ea2e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800ea32:	6878      	ldr	r0, [r7, #4]
 800ea34:	f000 f846 	bl	800eac4 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 800ea38:	68fb      	ldr	r3, [r7, #12]
 800ea3a:	f003 0301 	and.w	r3, r3, #1
 800ea3e:	2b00      	cmp	r3, #0
 800ea40:	d01b      	beq.n	800ea7a <HAL_LTDC_IRQHandler+0xfe>
 800ea42:	68bb      	ldr	r3, [r7, #8]
 800ea44:	f003 0301 	and.w	r3, r3, #1
 800ea48:	2b00      	cmp	r3, #0
 800ea4a:	d016      	beq.n	800ea7a <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800ea4c:	687b      	ldr	r3, [r7, #4]
 800ea4e:	681b      	ldr	r3, [r3, #0]
 800ea50:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ea52:	687b      	ldr	r3, [r7, #4]
 800ea54:	681b      	ldr	r3, [r3, #0]
 800ea56:	f022 0201 	bic.w	r2, r2, #1
 800ea5a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 800ea5c:	687b      	ldr	r3, [r7, #4]
 800ea5e:	681b      	ldr	r3, [r3, #0]
 800ea60:	2201      	movs	r2, #1
 800ea62:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800ea64:	687b      	ldr	r3, [r7, #4]
 800ea66:	2201      	movs	r2, #1
 800ea68:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	2200      	movs	r2, #0
 800ea70:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 800ea74:	6878      	ldr	r0, [r7, #4]
 800ea76:	f7f4 f86b 	bl	8002b50 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 800ea7a:	68fb      	ldr	r3, [r7, #12]
 800ea7c:	f003 0308 	and.w	r3, r3, #8
 800ea80:	2b00      	cmp	r3, #0
 800ea82:	d01b      	beq.n	800eabc <HAL_LTDC_IRQHandler+0x140>
 800ea84:	68bb      	ldr	r3, [r7, #8]
 800ea86:	f003 0308 	and.w	r3, r3, #8
 800ea8a:	2b00      	cmp	r3, #0
 800ea8c:	d016      	beq.n	800eabc <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800ea8e:	687b      	ldr	r3, [r7, #4]
 800ea90:	681b      	ldr	r3, [r3, #0]
 800ea92:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ea94:	687b      	ldr	r3, [r7, #4]
 800ea96:	681b      	ldr	r3, [r3, #0]
 800ea98:	f022 0208 	bic.w	r2, r2, #8
 800ea9c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800ea9e:	687b      	ldr	r3, [r7, #4]
 800eaa0:	681b      	ldr	r3, [r3, #0]
 800eaa2:	2208      	movs	r2, #8
 800eaa4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800eaa6:	687b      	ldr	r3, [r7, #4]
 800eaa8:	2201      	movs	r2, #1
 800eaaa:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800eaae:	687b      	ldr	r3, [r7, #4]
 800eab0:	2200      	movs	r2, #0
 800eab2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 800eab6:	6878      	ldr	r0, [r7, #4]
 800eab8:	f000 f80e 	bl	800ead8 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 800eabc:	bf00      	nop
 800eabe:	3710      	adds	r7, #16
 800eac0:	46bd      	mov	sp, r7
 800eac2:	bd80      	pop	{r7, pc}

0800eac4 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 800eac4:	b480      	push	{r7}
 800eac6:	b083      	sub	sp, #12
 800eac8:	af00      	add	r7, sp, #0
 800eaca:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 800eacc:	bf00      	nop
 800eace:	370c      	adds	r7, #12
 800ead0:	46bd      	mov	sp, r7
 800ead2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ead6:	4770      	bx	lr

0800ead8 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 800ead8:	b480      	push	{r7}
 800eada:	b083      	sub	sp, #12
 800eadc:	af00      	add	r7, sp, #0
 800eade:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 800eae0:	bf00      	nop
 800eae2:	370c      	adds	r7, #12
 800eae4:	46bd      	mov	sp, r7
 800eae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaea:	4770      	bx	lr

0800eaec <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800eaec:	b5b0      	push	{r4, r5, r7, lr}
 800eaee:	b084      	sub	sp, #16
 800eaf0:	af00      	add	r7, sp, #0
 800eaf2:	60f8      	str	r0, [r7, #12]
 800eaf4:	60b9      	str	r1, [r7, #8]
 800eaf6:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800eaf8:	68fb      	ldr	r3, [r7, #12]
 800eafa:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800eafe:	2b01      	cmp	r3, #1
 800eb00:	d101      	bne.n	800eb06 <HAL_LTDC_ConfigLayer+0x1a>
 800eb02:	2302      	movs	r3, #2
 800eb04:	e02c      	b.n	800eb60 <HAL_LTDC_ConfigLayer+0x74>
 800eb06:	68fb      	ldr	r3, [r7, #12]
 800eb08:	2201      	movs	r2, #1
 800eb0a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800eb0e:	68fb      	ldr	r3, [r7, #12]
 800eb10:	2202      	movs	r2, #2
 800eb12:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800eb16:	68fa      	ldr	r2, [r7, #12]
 800eb18:	687b      	ldr	r3, [r7, #4]
 800eb1a:	2134      	movs	r1, #52	; 0x34
 800eb1c:	fb01 f303 	mul.w	r3, r1, r3
 800eb20:	4413      	add	r3, r2
 800eb22:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800eb26:	68bb      	ldr	r3, [r7, #8]
 800eb28:	4614      	mov	r4, r2
 800eb2a:	461d      	mov	r5, r3
 800eb2c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800eb2e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800eb30:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800eb32:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800eb34:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800eb36:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800eb38:	682b      	ldr	r3, [r5, #0]
 800eb3a:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800eb3c:	687a      	ldr	r2, [r7, #4]
 800eb3e:	68b9      	ldr	r1, [r7, #8]
 800eb40:	68f8      	ldr	r0, [r7, #12]
 800eb42:	f000 f849 	bl	800ebd8 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800eb46:	68fb      	ldr	r3, [r7, #12]
 800eb48:	681b      	ldr	r3, [r3, #0]
 800eb4a:	2201      	movs	r2, #1
 800eb4c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800eb4e:	68fb      	ldr	r3, [r7, #12]
 800eb50:	2201      	movs	r2, #1
 800eb52:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800eb56:	68fb      	ldr	r3, [r7, #12]
 800eb58:	2200      	movs	r2, #0
 800eb5a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800eb5e:	2300      	movs	r3, #0
}
 800eb60:	4618      	mov	r0, r3
 800eb62:	3710      	adds	r7, #16
 800eb64:	46bd      	mov	sp, r7
 800eb66:	bdb0      	pop	{r4, r5, r7, pc}

0800eb68 <HAL_LTDC_ProgramLineEvent>:
  * @param  Line    Line Interrupt Position.
  * @note   User application may resort to HAL_LTDC_LineEventCallback() at line interrupt generation.
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ProgramLineEvent(LTDC_HandleTypeDef *hltdc, uint32_t Line)
{
 800eb68:	b480      	push	{r7}
 800eb6a:	b083      	sub	sp, #12
 800eb6c:	af00      	add	r7, sp, #0
 800eb6e:	6078      	str	r0, [r7, #4]
 800eb70:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_LIPOS(Line));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800eb72:	687b      	ldr	r3, [r7, #4]
 800eb74:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800eb78:	2b01      	cmp	r3, #1
 800eb7a:	d101      	bne.n	800eb80 <HAL_LTDC_ProgramLineEvent+0x18>
 800eb7c:	2302      	movs	r3, #2
 800eb7e:	e023      	b.n	800ebc8 <HAL_LTDC_ProgramLineEvent+0x60>
 800eb80:	687b      	ldr	r3, [r7, #4]
 800eb82:	2201      	movs	r2, #1
 800eb84:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800eb88:	687b      	ldr	r3, [r7, #4]
 800eb8a:	2202      	movs	r2, #2
 800eb8c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Disable the Line interrupt */
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800eb90:	687b      	ldr	r3, [r7, #4]
 800eb92:	681b      	ldr	r3, [r3, #0]
 800eb94:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800eb96:	687b      	ldr	r3, [r7, #4]
 800eb98:	681b      	ldr	r3, [r3, #0]
 800eb9a:	f022 0201 	bic.w	r2, r2, #1
 800eb9e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the Line Interrupt position */
  LTDC->LIPCR = (uint32_t)Line;
 800eba0:	4a0c      	ldr	r2, [pc, #48]	; (800ebd4 <HAL_LTDC_ProgramLineEvent+0x6c>)
 800eba2:	683b      	ldr	r3, [r7, #0]
 800eba4:	6413      	str	r3, [r2, #64]	; 0x40

  /* Enable the Line interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_LI);
 800eba6:	687b      	ldr	r3, [r7, #4]
 800eba8:	681b      	ldr	r3, [r3, #0]
 800ebaa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ebac:	687b      	ldr	r3, [r7, #4]
 800ebae:	681b      	ldr	r3, [r3, #0]
 800ebb0:	f042 0201 	orr.w	r2, r2, #1
 800ebb4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800ebb6:	687b      	ldr	r3, [r7, #4]
 800ebb8:	2201      	movs	r2, #1
 800ebba:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800ebbe:	687b      	ldr	r3, [r7, #4]
 800ebc0:	2200      	movs	r2, #0
 800ebc2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800ebc6:	2300      	movs	r3, #0
}
 800ebc8:	4618      	mov	r0, r3
 800ebca:	370c      	adds	r7, #12
 800ebcc:	46bd      	mov	sp, r7
 800ebce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebd2:	4770      	bx	lr
 800ebd4:	50001000 	.word	0x50001000

0800ebd8 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800ebd8:	b480      	push	{r7}
 800ebda:	b089      	sub	sp, #36	; 0x24
 800ebdc:	af00      	add	r7, sp, #0
 800ebde:	60f8      	str	r0, [r7, #12]
 800ebe0:	60b9      	str	r1, [r7, #8]
 800ebe2:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800ebe4:	68bb      	ldr	r3, [r7, #8]
 800ebe6:	685a      	ldr	r2, [r3, #4]
 800ebe8:	68fb      	ldr	r3, [r7, #12]
 800ebea:	681b      	ldr	r3, [r3, #0]
 800ebec:	68db      	ldr	r3, [r3, #12]
 800ebee:	0c1b      	lsrs	r3, r3, #16
 800ebf0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ebf4:	4413      	add	r3, r2
 800ebf6:	041b      	lsls	r3, r3, #16
 800ebf8:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800ebfa:	68fb      	ldr	r3, [r7, #12]
 800ebfc:	681b      	ldr	r3, [r3, #0]
 800ebfe:	461a      	mov	r2, r3
 800ec00:	687b      	ldr	r3, [r7, #4]
 800ec02:	01db      	lsls	r3, r3, #7
 800ec04:	4413      	add	r3, r2
 800ec06:	3384      	adds	r3, #132	; 0x84
 800ec08:	685b      	ldr	r3, [r3, #4]
 800ec0a:	68fa      	ldr	r2, [r7, #12]
 800ec0c:	6812      	ldr	r2, [r2, #0]
 800ec0e:	4611      	mov	r1, r2
 800ec10:	687a      	ldr	r2, [r7, #4]
 800ec12:	01d2      	lsls	r2, r2, #7
 800ec14:	440a      	add	r2, r1
 800ec16:	3284      	adds	r2, #132	; 0x84
 800ec18:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800ec1c:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800ec1e:	68bb      	ldr	r3, [r7, #8]
 800ec20:	681a      	ldr	r2, [r3, #0]
 800ec22:	68fb      	ldr	r3, [r7, #12]
 800ec24:	681b      	ldr	r3, [r3, #0]
 800ec26:	68db      	ldr	r3, [r3, #12]
 800ec28:	0c1b      	lsrs	r3, r3, #16
 800ec2a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ec2e:	4413      	add	r3, r2
 800ec30:	1c5a      	adds	r2, r3, #1
 800ec32:	68fb      	ldr	r3, [r7, #12]
 800ec34:	681b      	ldr	r3, [r3, #0]
 800ec36:	4619      	mov	r1, r3
 800ec38:	687b      	ldr	r3, [r7, #4]
 800ec3a:	01db      	lsls	r3, r3, #7
 800ec3c:	440b      	add	r3, r1
 800ec3e:	3384      	adds	r3, #132	; 0x84
 800ec40:	4619      	mov	r1, r3
 800ec42:	69fb      	ldr	r3, [r7, #28]
 800ec44:	4313      	orrs	r3, r2
 800ec46:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800ec48:	68bb      	ldr	r3, [r7, #8]
 800ec4a:	68da      	ldr	r2, [r3, #12]
 800ec4c:	68fb      	ldr	r3, [r7, #12]
 800ec4e:	681b      	ldr	r3, [r3, #0]
 800ec50:	68db      	ldr	r3, [r3, #12]
 800ec52:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ec56:	4413      	add	r3, r2
 800ec58:	041b      	lsls	r3, r3, #16
 800ec5a:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800ec5c:	68fb      	ldr	r3, [r7, #12]
 800ec5e:	681b      	ldr	r3, [r3, #0]
 800ec60:	461a      	mov	r2, r3
 800ec62:	687b      	ldr	r3, [r7, #4]
 800ec64:	01db      	lsls	r3, r3, #7
 800ec66:	4413      	add	r3, r2
 800ec68:	3384      	adds	r3, #132	; 0x84
 800ec6a:	689b      	ldr	r3, [r3, #8]
 800ec6c:	68fa      	ldr	r2, [r7, #12]
 800ec6e:	6812      	ldr	r2, [r2, #0]
 800ec70:	4611      	mov	r1, r2
 800ec72:	687a      	ldr	r2, [r7, #4]
 800ec74:	01d2      	lsls	r2, r2, #7
 800ec76:	440a      	add	r2, r1
 800ec78:	3284      	adds	r2, #132	; 0x84
 800ec7a:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800ec7e:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800ec80:	68bb      	ldr	r3, [r7, #8]
 800ec82:	689a      	ldr	r2, [r3, #8]
 800ec84:	68fb      	ldr	r3, [r7, #12]
 800ec86:	681b      	ldr	r3, [r3, #0]
 800ec88:	68db      	ldr	r3, [r3, #12]
 800ec8a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ec8e:	4413      	add	r3, r2
 800ec90:	1c5a      	adds	r2, r3, #1
 800ec92:	68fb      	ldr	r3, [r7, #12]
 800ec94:	681b      	ldr	r3, [r3, #0]
 800ec96:	4619      	mov	r1, r3
 800ec98:	687b      	ldr	r3, [r7, #4]
 800ec9a:	01db      	lsls	r3, r3, #7
 800ec9c:	440b      	add	r3, r1
 800ec9e:	3384      	adds	r3, #132	; 0x84
 800eca0:	4619      	mov	r1, r3
 800eca2:	69fb      	ldr	r3, [r7, #28]
 800eca4:	4313      	orrs	r3, r2
 800eca6:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800eca8:	68fb      	ldr	r3, [r7, #12]
 800ecaa:	681b      	ldr	r3, [r3, #0]
 800ecac:	461a      	mov	r2, r3
 800ecae:	687b      	ldr	r3, [r7, #4]
 800ecb0:	01db      	lsls	r3, r3, #7
 800ecb2:	4413      	add	r3, r2
 800ecb4:	3384      	adds	r3, #132	; 0x84
 800ecb6:	691b      	ldr	r3, [r3, #16]
 800ecb8:	68fa      	ldr	r2, [r7, #12]
 800ecba:	6812      	ldr	r2, [r2, #0]
 800ecbc:	4611      	mov	r1, r2
 800ecbe:	687a      	ldr	r2, [r7, #4]
 800ecc0:	01d2      	lsls	r2, r2, #7
 800ecc2:	440a      	add	r2, r1
 800ecc4:	3284      	adds	r2, #132	; 0x84
 800ecc6:	f023 0307 	bic.w	r3, r3, #7
 800ecca:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800eccc:	68fb      	ldr	r3, [r7, #12]
 800ecce:	681b      	ldr	r3, [r3, #0]
 800ecd0:	461a      	mov	r2, r3
 800ecd2:	687b      	ldr	r3, [r7, #4]
 800ecd4:	01db      	lsls	r3, r3, #7
 800ecd6:	4413      	add	r3, r2
 800ecd8:	3384      	adds	r3, #132	; 0x84
 800ecda:	461a      	mov	r2, r3
 800ecdc:	68bb      	ldr	r3, [r7, #8]
 800ecde:	691b      	ldr	r3, [r3, #16]
 800ece0:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800ece2:	68bb      	ldr	r3, [r7, #8]
 800ece4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800ece8:	021b      	lsls	r3, r3, #8
 800ecea:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800ecec:	68bb      	ldr	r3, [r7, #8]
 800ecee:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800ecf2:	041b      	lsls	r3, r3, #16
 800ecf4:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800ecf6:	68bb      	ldr	r3, [r7, #8]
 800ecf8:	699b      	ldr	r3, [r3, #24]
 800ecfa:	061b      	lsls	r3, r3, #24
 800ecfc:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 800ecfe:	68fb      	ldr	r3, [r7, #12]
 800ed00:	681b      	ldr	r3, [r3, #0]
 800ed02:	461a      	mov	r2, r3
 800ed04:	687b      	ldr	r3, [r7, #4]
 800ed06:	01db      	lsls	r3, r3, #7
 800ed08:	4413      	add	r3, r2
 800ed0a:	3384      	adds	r3, #132	; 0x84
 800ed0c:	699b      	ldr	r3, [r3, #24]
 800ed0e:	68fb      	ldr	r3, [r7, #12]
 800ed10:	681b      	ldr	r3, [r3, #0]
 800ed12:	461a      	mov	r2, r3
 800ed14:	687b      	ldr	r3, [r7, #4]
 800ed16:	01db      	lsls	r3, r3, #7
 800ed18:	4413      	add	r3, r2
 800ed1a:	3384      	adds	r3, #132	; 0x84
 800ed1c:	461a      	mov	r2, r3
 800ed1e:	2300      	movs	r3, #0
 800ed20:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800ed22:	68bb      	ldr	r3, [r7, #8]
 800ed24:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ed28:	461a      	mov	r2, r3
 800ed2a:	69fb      	ldr	r3, [r7, #28]
 800ed2c:	431a      	orrs	r2, r3
 800ed2e:	69bb      	ldr	r3, [r7, #24]
 800ed30:	431a      	orrs	r2, r3
 800ed32:	68fb      	ldr	r3, [r7, #12]
 800ed34:	681b      	ldr	r3, [r3, #0]
 800ed36:	4619      	mov	r1, r3
 800ed38:	687b      	ldr	r3, [r7, #4]
 800ed3a:	01db      	lsls	r3, r3, #7
 800ed3c:	440b      	add	r3, r1
 800ed3e:	3384      	adds	r3, #132	; 0x84
 800ed40:	4619      	mov	r1, r3
 800ed42:	697b      	ldr	r3, [r7, #20]
 800ed44:	4313      	orrs	r3, r2
 800ed46:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800ed48:	68fb      	ldr	r3, [r7, #12]
 800ed4a:	681b      	ldr	r3, [r3, #0]
 800ed4c:	461a      	mov	r2, r3
 800ed4e:	687b      	ldr	r3, [r7, #4]
 800ed50:	01db      	lsls	r3, r3, #7
 800ed52:	4413      	add	r3, r2
 800ed54:	3384      	adds	r3, #132	; 0x84
 800ed56:	695b      	ldr	r3, [r3, #20]
 800ed58:	68fa      	ldr	r2, [r7, #12]
 800ed5a:	6812      	ldr	r2, [r2, #0]
 800ed5c:	4611      	mov	r1, r2
 800ed5e:	687a      	ldr	r2, [r7, #4]
 800ed60:	01d2      	lsls	r2, r2, #7
 800ed62:	440a      	add	r2, r1
 800ed64:	3284      	adds	r2, #132	; 0x84
 800ed66:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800ed6a:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800ed6c:	68fb      	ldr	r3, [r7, #12]
 800ed6e:	681b      	ldr	r3, [r3, #0]
 800ed70:	461a      	mov	r2, r3
 800ed72:	687b      	ldr	r3, [r7, #4]
 800ed74:	01db      	lsls	r3, r3, #7
 800ed76:	4413      	add	r3, r2
 800ed78:	3384      	adds	r3, #132	; 0x84
 800ed7a:	461a      	mov	r2, r3
 800ed7c:	68bb      	ldr	r3, [r7, #8]
 800ed7e:	695b      	ldr	r3, [r3, #20]
 800ed80:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800ed82:	68fb      	ldr	r3, [r7, #12]
 800ed84:	681b      	ldr	r3, [r3, #0]
 800ed86:	461a      	mov	r2, r3
 800ed88:	687b      	ldr	r3, [r7, #4]
 800ed8a:	01db      	lsls	r3, r3, #7
 800ed8c:	4413      	add	r3, r2
 800ed8e:	3384      	adds	r3, #132	; 0x84
 800ed90:	69da      	ldr	r2, [r3, #28]
 800ed92:	68fb      	ldr	r3, [r7, #12]
 800ed94:	681b      	ldr	r3, [r3, #0]
 800ed96:	4619      	mov	r1, r3
 800ed98:	687b      	ldr	r3, [r7, #4]
 800ed9a:	01db      	lsls	r3, r3, #7
 800ed9c:	440b      	add	r3, r1
 800ed9e:	3384      	adds	r3, #132	; 0x84
 800eda0:	4619      	mov	r1, r3
 800eda2:	4b58      	ldr	r3, [pc, #352]	; (800ef04 <LTDC_SetConfig+0x32c>)
 800eda4:	4013      	ands	r3, r2
 800eda6:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800eda8:	68bb      	ldr	r3, [r7, #8]
 800edaa:	69da      	ldr	r2, [r3, #28]
 800edac:	68bb      	ldr	r3, [r7, #8]
 800edae:	6a1b      	ldr	r3, [r3, #32]
 800edb0:	68f9      	ldr	r1, [r7, #12]
 800edb2:	6809      	ldr	r1, [r1, #0]
 800edb4:	4608      	mov	r0, r1
 800edb6:	6879      	ldr	r1, [r7, #4]
 800edb8:	01c9      	lsls	r1, r1, #7
 800edba:	4401      	add	r1, r0
 800edbc:	3184      	adds	r1, #132	; 0x84
 800edbe:	4313      	orrs	r3, r2
 800edc0:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800edc2:	68fb      	ldr	r3, [r7, #12]
 800edc4:	681b      	ldr	r3, [r3, #0]
 800edc6:	461a      	mov	r2, r3
 800edc8:	687b      	ldr	r3, [r7, #4]
 800edca:	01db      	lsls	r3, r3, #7
 800edcc:	4413      	add	r3, r2
 800edce:	3384      	adds	r3, #132	; 0x84
 800edd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800edd2:	68fb      	ldr	r3, [r7, #12]
 800edd4:	681b      	ldr	r3, [r3, #0]
 800edd6:	461a      	mov	r2, r3
 800edd8:	687b      	ldr	r3, [r7, #4]
 800edda:	01db      	lsls	r3, r3, #7
 800eddc:	4413      	add	r3, r2
 800edde:	3384      	adds	r3, #132	; 0x84
 800ede0:	461a      	mov	r2, r3
 800ede2:	2300      	movs	r3, #0
 800ede4:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800ede6:	68fb      	ldr	r3, [r7, #12]
 800ede8:	681b      	ldr	r3, [r3, #0]
 800edea:	461a      	mov	r2, r3
 800edec:	687b      	ldr	r3, [r7, #4]
 800edee:	01db      	lsls	r3, r3, #7
 800edf0:	4413      	add	r3, r2
 800edf2:	3384      	adds	r3, #132	; 0x84
 800edf4:	461a      	mov	r2, r3
 800edf6:	68bb      	ldr	r3, [r7, #8]
 800edf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800edfa:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800edfc:	68bb      	ldr	r3, [r7, #8]
 800edfe:	691b      	ldr	r3, [r3, #16]
 800ee00:	2b00      	cmp	r3, #0
 800ee02:	d102      	bne.n	800ee0a <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 800ee04:	2304      	movs	r3, #4
 800ee06:	61fb      	str	r3, [r7, #28]
 800ee08:	e01b      	b.n	800ee42 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800ee0a:	68bb      	ldr	r3, [r7, #8]
 800ee0c:	691b      	ldr	r3, [r3, #16]
 800ee0e:	2b01      	cmp	r3, #1
 800ee10:	d102      	bne.n	800ee18 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 800ee12:	2303      	movs	r3, #3
 800ee14:	61fb      	str	r3, [r7, #28]
 800ee16:	e014      	b.n	800ee42 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800ee18:	68bb      	ldr	r3, [r7, #8]
 800ee1a:	691b      	ldr	r3, [r3, #16]
 800ee1c:	2b04      	cmp	r3, #4
 800ee1e:	d00b      	beq.n	800ee38 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800ee20:	68bb      	ldr	r3, [r7, #8]
 800ee22:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800ee24:	2b02      	cmp	r3, #2
 800ee26:	d007      	beq.n	800ee38 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800ee28:	68bb      	ldr	r3, [r7, #8]
 800ee2a:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800ee2c:	2b03      	cmp	r3, #3
 800ee2e:	d003      	beq.n	800ee38 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800ee30:	68bb      	ldr	r3, [r7, #8]
 800ee32:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800ee34:	2b07      	cmp	r3, #7
 800ee36:	d102      	bne.n	800ee3e <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 800ee38:	2302      	movs	r3, #2
 800ee3a:	61fb      	str	r3, [r7, #28]
 800ee3c:	e001      	b.n	800ee42 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 800ee3e:	2301      	movs	r3, #1
 800ee40:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800ee42:	68fb      	ldr	r3, [r7, #12]
 800ee44:	681b      	ldr	r3, [r3, #0]
 800ee46:	461a      	mov	r2, r3
 800ee48:	687b      	ldr	r3, [r7, #4]
 800ee4a:	01db      	lsls	r3, r3, #7
 800ee4c:	4413      	add	r3, r2
 800ee4e:	3384      	adds	r3, #132	; 0x84
 800ee50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee52:	68fa      	ldr	r2, [r7, #12]
 800ee54:	6812      	ldr	r2, [r2, #0]
 800ee56:	4611      	mov	r1, r2
 800ee58:	687a      	ldr	r2, [r7, #4]
 800ee5a:	01d2      	lsls	r2, r2, #7
 800ee5c:	440a      	add	r2, r1
 800ee5e:	3284      	adds	r2, #132	; 0x84
 800ee60:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 800ee64:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 800ee66:	68bb      	ldr	r3, [r7, #8]
 800ee68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ee6a:	69fa      	ldr	r2, [r7, #28]
 800ee6c:	fb02 f303 	mul.w	r3, r2, r3
 800ee70:	041a      	lsls	r2, r3, #16
 800ee72:	68bb      	ldr	r3, [r7, #8]
 800ee74:	6859      	ldr	r1, [r3, #4]
 800ee76:	68bb      	ldr	r3, [r7, #8]
 800ee78:	681b      	ldr	r3, [r3, #0]
 800ee7a:	1acb      	subs	r3, r1, r3
 800ee7c:	69f9      	ldr	r1, [r7, #28]
 800ee7e:	fb01 f303 	mul.w	r3, r1, r3
 800ee82:	3307      	adds	r3, #7
 800ee84:	68f9      	ldr	r1, [r7, #12]
 800ee86:	6809      	ldr	r1, [r1, #0]
 800ee88:	4608      	mov	r0, r1
 800ee8a:	6879      	ldr	r1, [r7, #4]
 800ee8c:	01c9      	lsls	r1, r1, #7
 800ee8e:	4401      	add	r1, r0
 800ee90:	3184      	adds	r1, #132	; 0x84
 800ee92:	4313      	orrs	r3, r2
 800ee94:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800ee96:	68fb      	ldr	r3, [r7, #12]
 800ee98:	681b      	ldr	r3, [r3, #0]
 800ee9a:	461a      	mov	r2, r3
 800ee9c:	687b      	ldr	r3, [r7, #4]
 800ee9e:	01db      	lsls	r3, r3, #7
 800eea0:	4413      	add	r3, r2
 800eea2:	3384      	adds	r3, #132	; 0x84
 800eea4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800eea6:	68fb      	ldr	r3, [r7, #12]
 800eea8:	681b      	ldr	r3, [r3, #0]
 800eeaa:	4619      	mov	r1, r3
 800eeac:	687b      	ldr	r3, [r7, #4]
 800eeae:	01db      	lsls	r3, r3, #7
 800eeb0:	440b      	add	r3, r1
 800eeb2:	3384      	adds	r3, #132	; 0x84
 800eeb4:	4619      	mov	r1, r3
 800eeb6:	4b14      	ldr	r3, [pc, #80]	; (800ef08 <LTDC_SetConfig+0x330>)
 800eeb8:	4013      	ands	r3, r2
 800eeba:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800eebc:	68fb      	ldr	r3, [r7, #12]
 800eebe:	681b      	ldr	r3, [r3, #0]
 800eec0:	461a      	mov	r2, r3
 800eec2:	687b      	ldr	r3, [r7, #4]
 800eec4:	01db      	lsls	r3, r3, #7
 800eec6:	4413      	add	r3, r2
 800eec8:	3384      	adds	r3, #132	; 0x84
 800eeca:	461a      	mov	r2, r3
 800eecc:	68bb      	ldr	r3, [r7, #8]
 800eece:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eed0:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800eed2:	68fb      	ldr	r3, [r7, #12]
 800eed4:	681b      	ldr	r3, [r3, #0]
 800eed6:	461a      	mov	r2, r3
 800eed8:	687b      	ldr	r3, [r7, #4]
 800eeda:	01db      	lsls	r3, r3, #7
 800eedc:	4413      	add	r3, r2
 800eede:	3384      	adds	r3, #132	; 0x84
 800eee0:	681b      	ldr	r3, [r3, #0]
 800eee2:	68fa      	ldr	r2, [r7, #12]
 800eee4:	6812      	ldr	r2, [r2, #0]
 800eee6:	4611      	mov	r1, r2
 800eee8:	687a      	ldr	r2, [r7, #4]
 800eeea:	01d2      	lsls	r2, r2, #7
 800eeec:	440a      	add	r2, r1
 800eeee:	3284      	adds	r2, #132	; 0x84
 800eef0:	f043 0301 	orr.w	r3, r3, #1
 800eef4:	6013      	str	r3, [r2, #0]
}
 800eef6:	bf00      	nop
 800eef8:	3724      	adds	r7, #36	; 0x24
 800eefa:	46bd      	mov	sp, r7
 800eefc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef00:	4770      	bx	lr
 800ef02:	bf00      	nop
 800ef04:	fffff8f8 	.word	0xfffff8f8
 800ef08:	fffff800 	.word	0xfffff800

0800ef0c <HAL_MDMA_Abort>:
  *        and the Channel will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Abort(MDMA_HandleTypeDef *hmdma)
{
 800ef0c:	b580      	push	{r7, lr}
 800ef0e:	b084      	sub	sp, #16
 800ef10:	af00      	add	r7, sp, #0
 800ef12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart =  HAL_GetTick();
 800ef14:	f7fc fae8 	bl	800b4e8 <HAL_GetTick>
 800ef18:	60f8      	str	r0, [r7, #12]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 800ef1a:	687b      	ldr	r3, [r7, #4]
 800ef1c:	2b00      	cmp	r3, #0
 800ef1e:	d101      	bne.n	800ef24 <HAL_MDMA_Abort+0x18>
  {
    return HAL_ERROR;
 800ef20:	2301      	movs	r3, #1
 800ef22:	e04a      	b.n	800efba <HAL_MDMA_Abort+0xae>
  }

  if(HAL_MDMA_STATE_BUSY != hmdma->State)
 800ef24:	687b      	ldr	r3, [r7, #4]
 800ef26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ef2a:	b2db      	uxtb	r3, r3
 800ef2c:	2b02      	cmp	r3, #2
 800ef2e:	d008      	beq.n	800ef42 <HAL_MDMA_Abort+0x36>
  {
    hmdma->ErrorCode = HAL_MDMA_ERROR_NO_XFER;
 800ef30:	687b      	ldr	r3, [r7, #4]
 800ef32:	2280      	movs	r2, #128	; 0x80
 800ef34:	669a      	str	r2, [r3, #104]	; 0x68

    /* Process Unlocked */
    __HAL_UNLOCK(hmdma);
 800ef36:	687b      	ldr	r3, [r7, #4]
 800ef38:	2200      	movs	r2, #0
 800ef3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800ef3e:	2301      	movs	r3, #1
 800ef40:	e03b      	b.n	800efba <HAL_MDMA_Abort+0xae>
  }
  else
  {
    /* Disable all the transfer interrupts */
    __HAL_MDMA_DISABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC | MDMA_IT_BT | MDMA_IT_BRT | MDMA_IT_BFTC));
 800ef42:	687b      	ldr	r3, [r7, #4]
 800ef44:	681b      	ldr	r3, [r3, #0]
 800ef46:	68da      	ldr	r2, [r3, #12]
 800ef48:	687b      	ldr	r3, [r7, #4]
 800ef4a:	681b      	ldr	r3, [r3, #0]
 800ef4c:	f022 023e 	bic.w	r2, r2, #62	; 0x3e
 800ef50:	60da      	str	r2, [r3, #12]

    /* Disable the channel */
    __HAL_MDMA_DISABLE(hmdma);
 800ef52:	687b      	ldr	r3, [r7, #4]
 800ef54:	681b      	ldr	r3, [r3, #0]
 800ef56:	68da      	ldr	r2, [r3, #12]
 800ef58:	687b      	ldr	r3, [r7, #4]
 800ef5a:	681b      	ldr	r3, [r3, #0]
 800ef5c:	f022 0201 	bic.w	r2, r2, #1
 800ef60:	60da      	str	r2, [r3, #12]

    /* Check if the MDMA Channel is effectively disabled */
    while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 800ef62:	e016      	b.n	800ef92 <HAL_MDMA_Abort+0x86>
    {
      /* Check for the Timeout */
      if( (HAL_GetTick()  - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
 800ef64:	f7fc fac0 	bl	800b4e8 <HAL_GetTick>
 800ef68:	4602      	mov	r2, r0
 800ef6a:	68fb      	ldr	r3, [r7, #12]
 800ef6c:	1ad3      	subs	r3, r2, r3
 800ef6e:	2b05      	cmp	r3, #5
 800ef70:	d90f      	bls.n	800ef92 <HAL_MDMA_Abort+0x86>
      {
        /* Update error code */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_TIMEOUT;
 800ef72:	687b      	ldr	r3, [r7, #4]
 800ef74:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ef76:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800ef7a:	687b      	ldr	r3, [r7, #4]
 800ef7c:	669a      	str	r2, [r3, #104]	; 0x68

        /* Process Unlocked */
        __HAL_UNLOCK(hmdma);
 800ef7e:	687b      	ldr	r3, [r7, #4]
 800ef80:	2200      	movs	r2, #0
 800ef82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Change the MDMA state */
        hmdma->State = HAL_MDMA_STATE_ERROR;
 800ef86:	687b      	ldr	r3, [r7, #4]
 800ef88:	2203      	movs	r2, #3
 800ef8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        return HAL_ERROR;
 800ef8e:	2301      	movs	r3, #1
 800ef90:	e013      	b.n	800efba <HAL_MDMA_Abort+0xae>
    while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 800ef92:	687b      	ldr	r3, [r7, #4]
 800ef94:	681b      	ldr	r3, [r3, #0]
 800ef96:	68db      	ldr	r3, [r3, #12]
 800ef98:	f003 0301 	and.w	r3, r3, #1
 800ef9c:	2b00      	cmp	r3, #0
 800ef9e:	d1e1      	bne.n	800ef64 <HAL_MDMA_Abort+0x58>
      }
    }

    /* Clear all interrupt flags */
    __HAL_MDMA_CLEAR_FLAG(hmdma, (MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BT | MDMA_FLAG_BRT | MDMA_FLAG_BFTC));
 800efa0:	687b      	ldr	r3, [r7, #4]
 800efa2:	681b      	ldr	r3, [r3, #0]
 800efa4:	221f      	movs	r2, #31
 800efa6:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hmdma);
 800efa8:	687b      	ldr	r3, [r7, #4]
 800efaa:	2200      	movs	r2, #0
 800efac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Change the MDMA state*/
    hmdma->State = HAL_MDMA_STATE_READY;
 800efb0:	687b      	ldr	r3, [r7, #4]
 800efb2:	2201      	movs	r2, #1
 800efb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

  return HAL_OK;
 800efb8:	2300      	movs	r3, #0
}
 800efba:	4618      	mov	r0, r3
 800efbc:	3710      	adds	r7, #16
 800efbe:	46bd      	mov	sp, r7
 800efc0:	bd80      	pop	{r7, pc}

0800efc2 <HAL_MDMA_Abort_IT>:
  * @param  hmdma  : pointer to a MDMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Abort_IT(MDMA_HandleTypeDef *hmdma)
{
 800efc2:	b480      	push	{r7}
 800efc4:	b083      	sub	sp, #12
 800efc6:	af00      	add	r7, sp, #0
 800efc8:	6078      	str	r0, [r7, #4]
  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 800efca:	687b      	ldr	r3, [r7, #4]
 800efcc:	2b00      	cmp	r3, #0
 800efce:	d101      	bne.n	800efd4 <HAL_MDMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800efd0:	2301      	movs	r3, #1
 800efd2:	e017      	b.n	800f004 <HAL_MDMA_Abort_IT+0x42>
  }

  if(HAL_MDMA_STATE_BUSY != hmdma->State)
 800efd4:	687b      	ldr	r3, [r7, #4]
 800efd6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800efda:	b2db      	uxtb	r3, r3
 800efdc:	2b02      	cmp	r3, #2
 800efde:	d004      	beq.n	800efea <HAL_MDMA_Abort_IT+0x28>
  {
    /* No transfer ongoing */
    hmdma->ErrorCode = HAL_MDMA_ERROR_NO_XFER;
 800efe0:	687b      	ldr	r3, [r7, #4]
 800efe2:	2280      	movs	r2, #128	; 0x80
 800efe4:	669a      	str	r2, [r3, #104]	; 0x68

    return HAL_ERROR;
 800efe6:	2301      	movs	r3, #1
 800efe8:	e00c      	b.n	800f004 <HAL_MDMA_Abort_IT+0x42>
  }
  else
  {
    /* Set Abort State  */
    hmdma->State = HAL_MDMA_STATE_ABORT;
 800efea:	687b      	ldr	r3, [r7, #4]
 800efec:	2204      	movs	r2, #4
 800efee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the stream */
    __HAL_MDMA_DISABLE(hmdma);
 800eff2:	687b      	ldr	r3, [r7, #4]
 800eff4:	681b      	ldr	r3, [r3, #0]
 800eff6:	68da      	ldr	r2, [r3, #12]
 800eff8:	687b      	ldr	r3, [r7, #4]
 800effa:	681b      	ldr	r3, [r3, #0]
 800effc:	f022 0201 	bic.w	r2, r2, #1
 800f000:	60da      	str	r2, [r3, #12]
  }

  return HAL_OK;
 800f002:	2300      	movs	r3, #0
}
 800f004:	4618      	mov	r0, r3
 800f006:	370c      	adds	r7, #12
 800f008:	46bd      	mov	sp, r7
 800f00a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f00e:	4770      	bx	lr

0800f010 <HAL_OSPI_Init>:
  *         in the OSPI_InitTypeDef and initialize the associated handle.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Init (OSPI_HandleTypeDef *hospi)
{
 800f010:	b580      	push	{r7, lr}
 800f012:	b086      	sub	sp, #24
 800f014:	af02      	add	r7, sp, #8
 800f016:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800f018:	2300      	movs	r3, #0
 800f01a:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 800f01c:	f7fc fa64 	bl	800b4e8 <HAL_GetTick>
 800f020:	60b8      	str	r0, [r7, #8]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 800f022:	687b      	ldr	r3, [r7, #4]
 800f024:	2b00      	cmp	r3, #0
 800f026:	d102      	bne.n	800f02e <HAL_OSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 800f028:	2301      	movs	r3, #1
 800f02a:	73fb      	strb	r3, [r7, #15]
 800f02c:	e0a9      	b.n	800f182 <HAL_OSPI_Init+0x172>
    assert_param(IS_OSPI_CKCSHT         (hospi->Init.ClkChipSelectHighTime));
    assert_param(IS_OSPI_DLYBYP         (hospi->Init.DelayBlockBypass));
    assert_param(IS_OSPI_MAXTRAN        (hospi->Init.MaxTran));

    /* Initialize error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 800f02e:	687b      	ldr	r3, [r7, #4]
 800f030:	2200      	movs	r2, #0
 800f032:	659a      	str	r2, [r3, #88]	; 0x58

    /* Check if the state is the reset state */
    if (hospi->State == HAL_OSPI_STATE_RESET)
 800f034:	687b      	ldr	r3, [r7, #4]
 800f036:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f038:	2b00      	cmp	r3, #0
 800f03a:	f040 80a2 	bne.w	800f182 <HAL_OSPI_Init+0x172>

      /* Init the low level hardware */
      hospi->MspInitCallback(hospi);
#else
      /* Initialization of the low level hardware */
      HAL_OSPI_MspInit(hospi);
 800f03e:	6878      	ldr	r0, [r7, #4]
 800f040:	f7f4 fd3a 	bl	8003ab8 <HAL_OSPI_MspInit>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the OSPI memory access */
      (void)HAL_OSPI_SetTimeout(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 800f044:	f241 3188 	movw	r1, #5000	; 0x1388
 800f048:	6878      	ldr	r0, [r7, #4]
 800f04a:	f000 fd48 	bl	800fade <HAL_OSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, clocked chip select high time, delay block bypass, free running clock, clock mode */
      MODIFY_REG(hospi->Instance->DCR1,
 800f04e:	687b      	ldr	r3, [r7, #4]
 800f050:	681b      	ldr	r3, [r3, #0]
 800f052:	689a      	ldr	r2, [r3, #8]
 800f054:	4b4d      	ldr	r3, [pc, #308]	; (800f18c <HAL_OSPI_Init+0x17c>)
 800f056:	4013      	ands	r3, r2
 800f058:	687a      	ldr	r2, [r7, #4]
 800f05a:	68d1      	ldr	r1, [r2, #12]
 800f05c:	687a      	ldr	r2, [r7, #4]
 800f05e:	6912      	ldr	r2, [r2, #16]
 800f060:	3a01      	subs	r2, #1
 800f062:	0412      	lsls	r2, r2, #16
 800f064:	4311      	orrs	r1, r2
 800f066:	687a      	ldr	r2, [r7, #4]
 800f068:	6952      	ldr	r2, [r2, #20]
 800f06a:	3a01      	subs	r2, #1
 800f06c:	0212      	lsls	r2, r2, #8
 800f06e:	4311      	orrs	r1, r2
 800f070:	687a      	ldr	r2, [r7, #4]
 800f072:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800f074:	0112      	lsls	r2, r2, #4
 800f076:	4311      	orrs	r1, r2
 800f078:	687a      	ldr	r2, [r7, #4]
 800f07a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800f07c:	4311      	orrs	r1, r2
 800f07e:	687a      	ldr	r2, [r7, #4]
 800f080:	69d2      	ldr	r2, [r2, #28]
 800f082:	4311      	orrs	r1, r2
 800f084:	687a      	ldr	r2, [r7, #4]
 800f086:	6812      	ldr	r2, [r2, #0]
 800f088:	430b      	orrs	r3, r1
 800f08a:	6093      	str	r3, [r2, #8]
                  ((hospi->Init.ChipSelectHighTime - 1U) << OCTOSPI_DCR1_CSHT_Pos) |
                  (hospi->Init.ClkChipSelectHighTime << OCTOSPI_DCR1_CKCSHT_Pos) |
                  hospi->Init.DelayBlockBypass | hospi->Init.ClockMode));

      /* Configure wrap size */
      MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_WRAPSIZE, hospi->Init.WrapSize);
 800f08c:	687b      	ldr	r3, [r7, #4]
 800f08e:	681b      	ldr	r3, [r3, #0]
 800f090:	68db      	ldr	r3, [r3, #12]
 800f092:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800f096:	687b      	ldr	r3, [r7, #4]
 800f098:	6a1a      	ldr	r2, [r3, #32]
 800f09a:	687b      	ldr	r3, [r7, #4]
 800f09c:	681b      	ldr	r3, [r3, #0]
 800f09e:	430a      	orrs	r2, r1
 800f0a0:	60da      	str	r2, [r3, #12]

      /* Configure chip select boundary and maximum transfer */
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 800f0a2:	687b      	ldr	r3, [r7, #4]
 800f0a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f0a6:	0419      	lsls	r1, r3, #16
                               (hospi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
 800f0a8:	687b      	ldr	r3, [r7, #4]
 800f0aa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 800f0ac:	687b      	ldr	r3, [r7, #4]
 800f0ae:	681b      	ldr	r3, [r3, #0]
 800f0b0:	430a      	orrs	r2, r1
 800f0b2:	611a      	str	r2, [r3, #16]

      /* Configure refresh */
      hospi->Instance->DCR4 = hospi->Init.Refresh;
 800f0b4:	687b      	ldr	r3, [r7, #4]
 800f0b6:	681b      	ldr	r3, [r3, #0]
 800f0b8:	687a      	ldr	r2, [r7, #4]
 800f0ba:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800f0bc:	615a      	str	r2, [r3, #20]

      /* Configure FIFO threshold */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 800f0be:	687b      	ldr	r3, [r7, #4]
 800f0c0:	681b      	ldr	r3, [r3, #0]
 800f0c2:	681b      	ldr	r3, [r3, #0]
 800f0c4:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 800f0c8:	687b      	ldr	r3, [r7, #4]
 800f0ca:	685b      	ldr	r3, [r3, #4]
 800f0cc:	3b01      	subs	r3, #1
 800f0ce:	021a      	lsls	r2, r3, #8
 800f0d0:	687b      	ldr	r3, [r7, #4]
 800f0d2:	681b      	ldr	r3, [r3, #0]
 800f0d4:	430a      	orrs	r2, r1
 800f0d6:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 800f0d8:	687b      	ldr	r3, [r7, #4]
 800f0da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f0dc:	9300      	str	r3, [sp, #0]
 800f0de:	68bb      	ldr	r3, [r7, #8]
 800f0e0:	2200      	movs	r2, #0
 800f0e2:	2120      	movs	r1, #32
 800f0e4:	6878      	ldr	r0, [r7, #4]
 800f0e6:	f000 fd45 	bl	800fb74 <OSPI_WaitFlagStateUntilTimeout>
 800f0ea:	4603      	mov	r3, r0
 800f0ec:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 800f0ee:	7bfb      	ldrb	r3, [r7, #15]
 800f0f0:	2b00      	cmp	r3, #0
 800f0f2:	d146      	bne.n	800f182 <HAL_OSPI_Init+0x172>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER, 
 800f0f4:	687b      	ldr	r3, [r7, #4]
 800f0f6:	681b      	ldr	r3, [r3, #0]
 800f0f8:	68db      	ldr	r3, [r3, #12]
 800f0fa:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800f0fe:	687b      	ldr	r3, [r7, #4]
 800f100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f102:	1e5a      	subs	r2, r3, #1
 800f104:	687b      	ldr	r3, [r7, #4]
 800f106:	681b      	ldr	r3, [r3, #0]
 800f108:	430a      	orrs	r2, r1
 800f10a:	60da      	str	r2, [r3, #12]
                  ((hospi->Init.ClockPrescaler - 1U) << OCTOSPI_DCR2_PRESCALER_Pos));

        /* Configure Dual Quad mode */
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DQM, hospi->Init.DualQuad);
 800f10c:	687b      	ldr	r3, [r7, #4]
 800f10e:	681b      	ldr	r3, [r3, #0]
 800f110:	681b      	ldr	r3, [r3, #0]
 800f112:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 800f116:	687b      	ldr	r3, [r7, #4]
 800f118:	689a      	ldr	r2, [r3, #8]
 800f11a:	687b      	ldr	r3, [r7, #4]
 800f11c:	681b      	ldr	r3, [r3, #0]
 800f11e:	430a      	orrs	r2, r1
 800f120:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC),
 800f122:	687b      	ldr	r3, [r7, #4]
 800f124:	681b      	ldr	r3, [r3, #0]
 800f126:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800f12a:	f023 41a0 	bic.w	r1, r3, #1342177280	; 0x50000000
 800f12e:	687b      	ldr	r3, [r7, #4]
 800f130:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f132:	687b      	ldr	r3, [r7, #4]
 800f134:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f136:	431a      	orrs	r2, r3
 800f138:	687b      	ldr	r3, [r7, #4]
 800f13a:	681b      	ldr	r3, [r3, #0]
 800f13c:	430a      	orrs	r2, r1
 800f13e:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
                  (hospi->Init.SampleShifting | hospi->Init.DelayHoldQuarterCycle));

        /* Enable OctoSPI */
        __HAL_OSPI_ENABLE(hospi);
 800f142:	687b      	ldr	r3, [r7, #4]
 800f144:	681b      	ldr	r3, [r3, #0]
 800f146:	681a      	ldr	r2, [r3, #0]
 800f148:	687b      	ldr	r3, [r7, #4]
 800f14a:	681b      	ldr	r3, [r3, #0]
 800f14c:	f042 0201 	orr.w	r2, r2, #1
 800f150:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after OSPI enable */
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 800f152:	687b      	ldr	r3, [r7, #4]
 800f154:	699b      	ldr	r3, [r3, #24]
 800f156:	2b02      	cmp	r3, #2
 800f158:	d107      	bne.n	800f16a <HAL_OSPI_Init+0x15a>
        {
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 800f15a:	687b      	ldr	r3, [r7, #4]
 800f15c:	681b      	ldr	r3, [r3, #0]
 800f15e:	689a      	ldr	r2, [r3, #8]
 800f160:	687b      	ldr	r3, [r7, #4]
 800f162:	681b      	ldr	r3, [r3, #0]
 800f164:	f042 0202 	orr.w	r2, r2, #2
 800f168:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the OSPI state */
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 800f16a:	687b      	ldr	r3, [r7, #4]
 800f16c:	68db      	ldr	r3, [r3, #12]
 800f16e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800f172:	d103      	bne.n	800f17c <HAL_OSPI_Init+0x16c>
        {
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 800f174:	687b      	ldr	r3, [r7, #4]
 800f176:	2201      	movs	r2, #1
 800f178:	655a      	str	r2, [r3, #84]	; 0x54
 800f17a:	e002      	b.n	800f182 <HAL_OSPI_Init+0x172>
        }
        else
        {
          hospi->State = HAL_OSPI_STATE_READY;
 800f17c:	687b      	ldr	r3, [r7, #4]
 800f17e:	2202      	movs	r2, #2
 800f180:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
  }

  /* Return function status */
  return status;
 800f182:	7bfb      	ldrb	r3, [r7, #15]
}
 800f184:	4618      	mov	r0, r3
 800f186:	3710      	adds	r7, #16
 800f188:	46bd      	mov	sp, r7
 800f18a:	bd80      	pop	{r7, pc}
 800f18c:	f8e0f884 	.word	0xf8e0f884

0800f190 <HAL_OSPI_DeInit>:
  * @brief  De-Initialize the OSPI peripheral.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_DeInit(OSPI_HandleTypeDef *hospi)
{
 800f190:	b580      	push	{r7, lr}
 800f192:	b084      	sub	sp, #16
 800f194:	af00      	add	r7, sp, #0
 800f196:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800f198:	2300      	movs	r3, #0
 800f19a:	73fb      	strb	r3, [r7, #15]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 800f19c:	687b      	ldr	r3, [r7, #4]
 800f19e:	2b00      	cmp	r3, #0
 800f1a0:	d102      	bne.n	800f1a8 <HAL_OSPI_DeInit+0x18>
  {
    status = HAL_ERROR;
 800f1a2:	2301      	movs	r3, #1
 800f1a4:	73fb      	strb	r3, [r7, #15]
 800f1a6:	e015      	b.n	800f1d4 <HAL_OSPI_DeInit+0x44>
    /* No error code can be set set as the handler is null */
  }
  else
  {
     /* Disable OctoSPI */
     __HAL_OSPI_DISABLE(hospi);
 800f1a8:	687b      	ldr	r3, [r7, #4]
 800f1aa:	681b      	ldr	r3, [r3, #0]
 800f1ac:	681a      	ldr	r2, [r3, #0]
 800f1ae:	687b      	ldr	r3, [r7, #4]
 800f1b0:	681b      	ldr	r3, [r3, #0]
 800f1b2:	f022 0201 	bic.w	r2, r2, #1
 800f1b6:	601a      	str	r2, [r3, #0]

     /* Disable free running clock if needed : must be done after OSPI disable */
     CLEAR_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 800f1b8:	687b      	ldr	r3, [r7, #4]
 800f1ba:	681b      	ldr	r3, [r3, #0]
 800f1bc:	689a      	ldr	r2, [r3, #8]
 800f1be:	687b      	ldr	r3, [r7, #4]
 800f1c0:	681b      	ldr	r3, [r3, #0]
 800f1c2:	f022 0202 	bic.w	r2, r2, #2
 800f1c6:	609a      	str	r2, [r3, #8]

     /* DeInit the low level hardware */
     hospi->MspDeInitCallback(hospi);
#else
     /* De-initialize the low-level hardware */
     HAL_OSPI_MspDeInit(hospi);
 800f1c8:	6878      	ldr	r0, [r7, #4]
 800f1ca:	f7f4 fcad 	bl	8003b28 <HAL_OSPI_MspDeInit>
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

     /* Reset the driver state */
     hospi->State = HAL_OSPI_STATE_RESET;
 800f1ce:	687b      	ldr	r3, [r7, #4]
 800f1d0:	2200      	movs	r2, #0
 800f1d2:	655a      	str	r2, [r3, #84]	; 0x54
  }

  return status;
 800f1d4:	7bfb      	ldrb	r3, [r7, #15]
}
 800f1d6:	4618      	mov	r0, r3
 800f1d8:	3710      	adds	r7, #16
 800f1da:	46bd      	mov	sp, r7
 800f1dc:	bd80      	pop	{r7, pc}
	...

0800f1e0 <HAL_OSPI_IRQHandler>:
  * @brief  Handle OSPI interrupt request.
  * @param  hospi : OSPI handle
  * @retval None
  */
void HAL_OSPI_IRQHandler(OSPI_HandleTypeDef *hospi)
{
 800f1e0:	b580      	push	{r7, lr}
 800f1e2:	b086      	sub	sp, #24
 800f1e4:	af00      	add	r7, sp, #0
 800f1e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t *data_reg = &hospi->Instance->DR;
 800f1e8:	687b      	ldr	r3, [r7, #4]
 800f1ea:	681b      	ldr	r3, [r3, #0]
 800f1ec:	3350      	adds	r3, #80	; 0x50
 800f1ee:	617b      	str	r3, [r7, #20]
  uint32_t flag           = hospi->Instance->SR;
 800f1f0:	687b      	ldr	r3, [r7, #4]
 800f1f2:	681b      	ldr	r3, [r3, #0]
 800f1f4:	6a1b      	ldr	r3, [r3, #32]
 800f1f6:	613b      	str	r3, [r7, #16]
  uint32_t itsource       = hospi->Instance->CR;
 800f1f8:	687b      	ldr	r3, [r7, #4]
 800f1fa:	681b      	ldr	r3, [r3, #0]
 800f1fc:	681b      	ldr	r3, [r3, #0]
 800f1fe:	60fb      	str	r3, [r7, #12]
  uint32_t currentstate   = hospi->State;
 800f200:	687b      	ldr	r3, [r7, #4]
 800f202:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f204:	60bb      	str	r3, [r7, #8]

  /* OctoSPI fifo threshold interrupt occurred -------------------------------*/
  if (((flag & HAL_OSPI_FLAG_FT) != 0U) && ((itsource & HAL_OSPI_IT_FT) != 0U))
 800f206:	693b      	ldr	r3, [r7, #16]
 800f208:	f003 0304 	and.w	r3, r3, #4
 800f20c:	2b00      	cmp	r3, #0
 800f20e:	d03a      	beq.n	800f286 <HAL_OSPI_IRQHandler+0xa6>
 800f210:	68fb      	ldr	r3, [r7, #12]
 800f212:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800f216:	2b00      	cmp	r3, #0
 800f218:	d035      	beq.n	800f286 <HAL_OSPI_IRQHandler+0xa6>
  {
    if (currentstate == HAL_OSPI_STATE_BUSY_TX)
 800f21a:	68bb      	ldr	r3, [r7, #8]
 800f21c:	2b18      	cmp	r3, #24
 800f21e:	d10f      	bne.n	800f240 <HAL_OSPI_IRQHandler+0x60>
    {
      /* Write a data in the fifo */
      *((__IO uint8_t *)data_reg) = *hospi->pBuffPtr;
 800f220:	687b      	ldr	r3, [r7, #4]
 800f222:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f224:	781a      	ldrb	r2, [r3, #0]
 800f226:	697b      	ldr	r3, [r7, #20]
 800f228:	701a      	strb	r2, [r3, #0]
      hospi->pBuffPtr++;
 800f22a:	687b      	ldr	r3, [r7, #4]
 800f22c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f22e:	1c5a      	adds	r2, r3, #1
 800f230:	687b      	ldr	r3, [r7, #4]
 800f232:	645a      	str	r2, [r3, #68]	; 0x44
      hospi->XferCount--;
 800f234:	687b      	ldr	r3, [r7, #4]
 800f236:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f238:	1e5a      	subs	r2, r3, #1
 800f23a:	687b      	ldr	r3, [r7, #4]
 800f23c:	64da      	str	r2, [r3, #76]	; 0x4c
 800f23e:	e012      	b.n	800f266 <HAL_OSPI_IRQHandler+0x86>
    }
    else if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 800f240:	68bb      	ldr	r3, [r7, #8]
 800f242:	2b28      	cmp	r3, #40	; 0x28
 800f244:	d10f      	bne.n	800f266 <HAL_OSPI_IRQHandler+0x86>
    {
      /* Read a data from the fifo */
      *hospi->pBuffPtr = *((__IO uint8_t *)data_reg);
 800f246:	687b      	ldr	r3, [r7, #4]
 800f248:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f24a:	697a      	ldr	r2, [r7, #20]
 800f24c:	7812      	ldrb	r2, [r2, #0]
 800f24e:	b2d2      	uxtb	r2, r2
 800f250:	701a      	strb	r2, [r3, #0]
      hospi->pBuffPtr++;
 800f252:	687b      	ldr	r3, [r7, #4]
 800f254:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f256:	1c5a      	adds	r2, r3, #1
 800f258:	687b      	ldr	r3, [r7, #4]
 800f25a:	645a      	str	r2, [r3, #68]	; 0x44
      hospi->XferCount--;
 800f25c:	687b      	ldr	r3, [r7, #4]
 800f25e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f260:	1e5a      	subs	r2, r3, #1
 800f262:	687b      	ldr	r3, [r7, #4]
 800f264:	64da      	str	r2, [r3, #76]	; 0x4c
    else
    {
      /* Nothing to do */
    }

    if (hospi->XferCount == 0U)
 800f266:	687b      	ldr	r3, [r7, #4]
 800f268:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f26a:	2b00      	cmp	r3, #0
 800f26c:	d107      	bne.n	800f27e <HAL_OSPI_IRQHandler+0x9e>
    {
      /* All data have been received or transmitted for the transfer */
      /* Disable fifo threshold interrupt */
      __HAL_OSPI_DISABLE_IT(hospi, HAL_OSPI_IT_FT);
 800f26e:	687b      	ldr	r3, [r7, #4]
 800f270:	681b      	ldr	r3, [r3, #0]
 800f272:	681a      	ldr	r2, [r3, #0]
 800f274:	687b      	ldr	r3, [r7, #4]
 800f276:	681b      	ldr	r3, [r3, #0]
 800f278:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800f27c:	601a      	str	r2, [r3, #0]

    /* Fifo threshold callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
    hospi->FifoThresholdCallback(hospi);
#else
    HAL_OSPI_FifoThresholdCallback(hospi);
 800f27e:	6878      	ldr	r0, [r7, #4]
 800f280:	f000 fb7c 	bl	800f97c <HAL_OSPI_FifoThresholdCallback>
 800f284:	e0e7      	b.n	800f456 <HAL_OSPI_IRQHandler+0x276>
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)*/ 
  }
  /* OctoSPI transfer complete interrupt occurred ----------------------------*/
  else if (((flag & HAL_OSPI_FLAG_TC) != 0U) && ((itsource & HAL_OSPI_IT_TC) != 0U))
 800f286:	693b      	ldr	r3, [r7, #16]
 800f288:	f003 0302 	and.w	r3, r3, #2
 800f28c:	2b00      	cmp	r3, #0
 800f28e:	d067      	beq.n	800f360 <HAL_OSPI_IRQHandler+0x180>
 800f290:	68fb      	ldr	r3, [r7, #12]
 800f292:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f296:	2b00      	cmp	r3, #0
 800f298:	d062      	beq.n	800f360 <HAL_OSPI_IRQHandler+0x180>
  {
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 800f29a:	68bb      	ldr	r3, [r7, #8]
 800f29c:	2b28      	cmp	r3, #40	; 0x28
 800f29e:	d131      	bne.n	800f304 <HAL_OSPI_IRQHandler+0x124>
    {
      if ((hospi->XferCount > 0U) && ((flag & OCTOSPI_SR_FLEVEL) != 0U))
 800f2a0:	687b      	ldr	r3, [r7, #4]
 800f2a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f2a4:	2b00      	cmp	r3, #0
 800f2a6:	d015      	beq.n	800f2d4 <HAL_OSPI_IRQHandler+0xf4>
 800f2a8:	693b      	ldr	r3, [r7, #16]
 800f2aa:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 800f2ae:	2b00      	cmp	r3, #0
 800f2b0:	d010      	beq.n	800f2d4 <HAL_OSPI_IRQHandler+0xf4>
      {
        /* Read the last data received in the fifo */
        *hospi->pBuffPtr = *((__IO uint8_t *)data_reg);
 800f2b2:	687b      	ldr	r3, [r7, #4]
 800f2b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f2b6:	697a      	ldr	r2, [r7, #20]
 800f2b8:	7812      	ldrb	r2, [r2, #0]
 800f2ba:	b2d2      	uxtb	r2, r2
 800f2bc:	701a      	strb	r2, [r3, #0]
        hospi->pBuffPtr++;
 800f2be:	687b      	ldr	r3, [r7, #4]
 800f2c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f2c2:	1c5a      	adds	r2, r3, #1
 800f2c4:	687b      	ldr	r3, [r7, #4]
 800f2c6:	645a      	str	r2, [r3, #68]	; 0x44
        hospi->XferCount--;
 800f2c8:	687b      	ldr	r3, [r7, #4]
 800f2ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f2cc:	1e5a      	subs	r2, r3, #1
 800f2ce:	687b      	ldr	r3, [r7, #4]
 800f2d0:	64da      	str	r2, [r3, #76]	; 0x4c
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 800f2d2:	e0bd      	b.n	800f450 <HAL_OSPI_IRQHandler+0x270>
      }
      else if(hospi->XferCount == 0U)
 800f2d4:	687b      	ldr	r3, [r7, #4]
 800f2d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f2d8:	2b00      	cmp	r3, #0
 800f2da:	f040 80b9 	bne.w	800f450 <HAL_OSPI_IRQHandler+0x270>
      {
        /* Clear flag */
        hospi->Instance->FCR = HAL_OSPI_FLAG_TC;
 800f2de:	687b      	ldr	r3, [r7, #4]
 800f2e0:	681b      	ldr	r3, [r3, #0]
 800f2e2:	2202      	movs	r2, #2
 800f2e4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Disable the interrupts */
        __HAL_OSPI_DISABLE_IT(hospi, HAL_OSPI_IT_TC | HAL_OSPI_IT_FT | HAL_OSPI_IT_TE);
 800f2e6:	687b      	ldr	r3, [r7, #4]
 800f2e8:	681b      	ldr	r3, [r3, #0]
 800f2ea:	681a      	ldr	r2, [r3, #0]
 800f2ec:	687b      	ldr	r3, [r7, #4]
 800f2ee:	681b      	ldr	r3, [r3, #0]
 800f2f0:	f422 22e0 	bic.w	r2, r2, #458752	; 0x70000
 800f2f4:	601a      	str	r2, [r3, #0]

        /* Update state */
        hospi->State = HAL_OSPI_STATE_READY;
 800f2f6:	687b      	ldr	r3, [r7, #4]
 800f2f8:	2202      	movs	r2, #2
 800f2fa:	655a      	str	r2, [r3, #84]	; 0x54

        /* RX complete callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
        hospi->RxCpltCallback(hospi);
#else
        HAL_OSPI_RxCpltCallback(hospi);
 800f2fc:	6878      	ldr	r0, [r7, #4]
 800f2fe:	f000 fb51 	bl	800f9a4 <HAL_OSPI_RxCpltCallback>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 800f302:	e0a5      	b.n	800f450 <HAL_OSPI_IRQHandler+0x270>
      }
    }
    else
    {
      /* Clear flag */
      hospi->Instance->FCR = HAL_OSPI_FLAG_TC;
 800f304:	687b      	ldr	r3, [r7, #4]
 800f306:	681b      	ldr	r3, [r3, #0]
 800f308:	2202      	movs	r2, #2
 800f30a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Disable the interrupts */
      __HAL_OSPI_DISABLE_IT(hospi, HAL_OSPI_IT_TC | HAL_OSPI_IT_FT | HAL_OSPI_IT_TE);
 800f30c:	687b      	ldr	r3, [r7, #4]
 800f30e:	681b      	ldr	r3, [r3, #0]
 800f310:	681a      	ldr	r2, [r3, #0]
 800f312:	687b      	ldr	r3, [r7, #4]
 800f314:	681b      	ldr	r3, [r3, #0]
 800f316:	f422 22e0 	bic.w	r2, r2, #458752	; 0x70000
 800f31a:	601a      	str	r2, [r3, #0]

      /* Update state */
      hospi->State = HAL_OSPI_STATE_READY;
 800f31c:	687b      	ldr	r3, [r7, #4]
 800f31e:	2202      	movs	r2, #2
 800f320:	655a      	str	r2, [r3, #84]	; 0x54

      if (currentstate == HAL_OSPI_STATE_BUSY_TX)
 800f322:	68bb      	ldr	r3, [r7, #8]
 800f324:	2b18      	cmp	r3, #24
 800f326:	d103      	bne.n	800f330 <HAL_OSPI_IRQHandler+0x150>
      {
        /* TX complete callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
        hospi->TxCpltCallback(hospi);
#else
        HAL_OSPI_TxCpltCallback(hospi);
 800f328:	6878      	ldr	r0, [r7, #4]
 800f32a:	f000 fb45 	bl	800f9b8 <HAL_OSPI_TxCpltCallback>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 800f32e:	e08f      	b.n	800f450 <HAL_OSPI_IRQHandler+0x270>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */ 
      }
      else if (currentstate == HAL_OSPI_STATE_BUSY_CMD)
 800f330:	68bb      	ldr	r3, [r7, #8]
 800f332:	2b08      	cmp	r3, #8
 800f334:	d103      	bne.n	800f33e <HAL_OSPI_IRQHandler+0x15e>
      {
        /* Command complete callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
        hospi->CmdCpltCallback(hospi);
#else
        HAL_OSPI_CmdCpltCallback(hospi);
 800f336:	6878      	ldr	r0, [r7, #4]
 800f338:	f000 fb2a 	bl	800f990 <HAL_OSPI_CmdCpltCallback>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 800f33c:	e088      	b.n	800f450 <HAL_OSPI_IRQHandler+0x270>
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */
      }
      else if (currentstate == HAL_OSPI_STATE_ABORT)
 800f33e:	68bb      	ldr	r3, [r7, #8]
 800f340:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f344:	f040 8084 	bne.w	800f450 <HAL_OSPI_IRQHandler+0x270>
      {
        if (hospi->ErrorCode == HAL_OSPI_ERROR_NONE)
 800f348:	687b      	ldr	r3, [r7, #4]
 800f34a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f34c:	2b00      	cmp	r3, #0
 800f34e:	d103      	bne.n	800f358 <HAL_OSPI_IRQHandler+0x178>
          /* Abort called by the user */
          /* Abort complete callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
          hospi->AbortCpltCallback(hospi);
#else
          HAL_OSPI_AbortCpltCallback(hospi);
 800f350:	6878      	ldr	r0, [r7, #4]
 800f352:	f000 fb09 	bl	800f968 <HAL_OSPI_AbortCpltCallback>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 800f356:	e07b      	b.n	800f450 <HAL_OSPI_IRQHandler+0x270>
          /* Abort due to an error (eg : DMA error) */
          /* Error callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
          hospi->ErrorCallback(hospi);
#else
          HAL_OSPI_ErrorCallback(hospi);
 800f358:	6878      	ldr	r0, [r7, #4]
 800f35a:	f000 fafb 	bl	800f954 <HAL_OSPI_ErrorCallback>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 800f35e:	e077      	b.n	800f450 <HAL_OSPI_IRQHandler+0x270>
        /* Nothing to do */
      }
    }
  }
  /* OctoSPI status match interrupt occurred ---------------------------------*/
  else if (((flag & HAL_OSPI_FLAG_SM) != 0U) && ((itsource & HAL_OSPI_IT_SM) != 0U))
 800f360:	693b      	ldr	r3, [r7, #16]
 800f362:	f003 0308 	and.w	r3, r3, #8
 800f366:	2b00      	cmp	r3, #0
 800f368:	d01e      	beq.n	800f3a8 <HAL_OSPI_IRQHandler+0x1c8>
 800f36a:	68fb      	ldr	r3, [r7, #12]
 800f36c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800f370:	2b00      	cmp	r3, #0
 800f372:	d019      	beq.n	800f3a8 <HAL_OSPI_IRQHandler+0x1c8>
  {
    /* Clear flag */
    hospi->Instance->FCR = HAL_OSPI_FLAG_SM;
 800f374:	687b      	ldr	r3, [r7, #4]
 800f376:	681b      	ldr	r3, [r3, #0]
 800f378:	2208      	movs	r2, #8
 800f37a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Check if automatic poll mode stop is activated */
    if ((hospi->Instance->CR & OCTOSPI_CR_APMS) != 0U)
 800f37c:	687b      	ldr	r3, [r7, #4]
 800f37e:	681b      	ldr	r3, [r3, #0]
 800f380:	681b      	ldr	r3, [r3, #0]
 800f382:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800f386:	2b00      	cmp	r3, #0
 800f388:	d00a      	beq.n	800f3a0 <HAL_OSPI_IRQHandler+0x1c0>
    {
      /* Disable the interrupts */
      __HAL_OSPI_DISABLE_IT(hospi, HAL_OSPI_IT_SM | HAL_OSPI_IT_TE);
 800f38a:	687b      	ldr	r3, [r7, #4]
 800f38c:	681b      	ldr	r3, [r3, #0]
 800f38e:	681a      	ldr	r2, [r3, #0]
 800f390:	687b      	ldr	r3, [r7, #4]
 800f392:	681b      	ldr	r3, [r3, #0]
 800f394:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 800f398:	601a      	str	r2, [r3, #0]

      /* Update state */
      hospi->State = HAL_OSPI_STATE_READY;
 800f39a:	687b      	ldr	r3, [r7, #4]
 800f39c:	2202      	movs	r2, #2
 800f39e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Status match callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
    hospi->StatusMatchCallback(hospi);
#else
    HAL_OSPI_StatusMatchCallback(hospi);
 800f3a0:	6878      	ldr	r0, [r7, #4]
 800f3a2:	f000 fb13 	bl	800f9cc <HAL_OSPI_StatusMatchCallback>
 800f3a6:	e056      	b.n	800f456 <HAL_OSPI_IRQHandler+0x276>
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */
  }
  /* OctoSPI transfer error interrupt occurred -------------------------------*/
  else if (((flag & HAL_OSPI_FLAG_TE) != 0U) && ((itsource & HAL_OSPI_IT_TE) != 0U))
 800f3a8:	693b      	ldr	r3, [r7, #16]
 800f3aa:	f003 0301 	and.w	r3, r3, #1
 800f3ae:	2b00      	cmp	r3, #0
 800f3b0:	d03c      	beq.n	800f42c <HAL_OSPI_IRQHandler+0x24c>
 800f3b2:	68fb      	ldr	r3, [r7, #12]
 800f3b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800f3b8:	2b00      	cmp	r3, #0
 800f3ba:	d037      	beq.n	800f42c <HAL_OSPI_IRQHandler+0x24c>
  {
    /* Clear flag */
    hospi->Instance->FCR = HAL_OSPI_FLAG_TE;
 800f3bc:	687b      	ldr	r3, [r7, #4]
 800f3be:	681b      	ldr	r3, [r3, #0]
 800f3c0:	2201      	movs	r2, #1
 800f3c2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable all interrupts */
    __HAL_OSPI_DISABLE_IT(hospi, (HAL_OSPI_IT_TO | HAL_OSPI_IT_SM | HAL_OSPI_IT_FT | HAL_OSPI_IT_TC | HAL_OSPI_IT_TE));
 800f3c4:	687b      	ldr	r3, [r7, #4]
 800f3c6:	681b      	ldr	r3, [r3, #0]
 800f3c8:	681a      	ldr	r2, [r3, #0]
 800f3ca:	687b      	ldr	r3, [r7, #4]
 800f3cc:	681b      	ldr	r3, [r3, #0]
 800f3ce:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 800f3d2:	601a      	str	r2, [r3, #0]

    /* Set error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_TRANSFER;
 800f3d4:	687b      	ldr	r3, [r7, #4]
 800f3d6:	2202      	movs	r2, #2
 800f3d8:	659a      	str	r2, [r3, #88]	; 0x58

    /* Check if the DMA is enabled */
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
 800f3da:	687b      	ldr	r3, [r7, #4]
 800f3dc:	681b      	ldr	r3, [r3, #0]
 800f3de:	681b      	ldr	r3, [r3, #0]
 800f3e0:	f003 0304 	and.w	r3, r3, #4
 800f3e4:	2b00      	cmp	r3, #0
 800f3e6:	d01a      	beq.n	800f41e <HAL_OSPI_IRQHandler+0x23e>
    {
      /* Disable the DMA transfer on the OctoSPI side */
      CLEAR_BIT(hospi->Instance->CR, OCTOSPI_CR_DMAEN);
 800f3e8:	687b      	ldr	r3, [r7, #4]
 800f3ea:	681b      	ldr	r3, [r3, #0]
 800f3ec:	681a      	ldr	r2, [r3, #0]
 800f3ee:	687b      	ldr	r3, [r7, #4]
 800f3f0:	681b      	ldr	r3, [r3, #0]
 800f3f2:	f022 0204 	bic.w	r2, r2, #4
 800f3f6:	601a      	str	r2, [r3, #0]

      /* Disable the DMA transfer on the DMA side */
      hospi->hmdma->XferAbortCallback = OSPI_DMAAbortCplt;
 800f3f8:	687b      	ldr	r3, [r7, #4]
 800f3fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f3fc:	4a18      	ldr	r2, [pc, #96]	; (800f460 <HAL_OSPI_IRQHandler+0x280>)
 800f3fe:	659a      	str	r2, [r3, #88]	; 0x58
      if (HAL_MDMA_Abort_IT(hospi->hmdma) != HAL_OK)
 800f400:	687b      	ldr	r3, [r7, #4]
 800f402:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f404:	4618      	mov	r0, r3
 800f406:	f7ff fddc 	bl	800efc2 <HAL_MDMA_Abort_IT>
 800f40a:	4603      	mov	r3, r0
 800f40c:	2b00      	cmp	r3, #0
 800f40e:	d021      	beq.n	800f454 <HAL_OSPI_IRQHandler+0x274>
      {
        /* Update state */
        hospi->State = HAL_OSPI_STATE_READY;
 800f410:	687b      	ldr	r3, [r7, #4]
 800f412:	2202      	movs	r2, #2
 800f414:	655a      	str	r2, [r3, #84]	; 0x54

        /* Error callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
        hospi->ErrorCallback(hospi);
#else
        HAL_OSPI_ErrorCallback(hospi);
 800f416:	6878      	ldr	r0, [r7, #4]
 800f418:	f000 fa9c 	bl	800f954 <HAL_OSPI_ErrorCallback>
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
 800f41c:	e01a      	b.n	800f454 <HAL_OSPI_IRQHandler+0x274>
      }
    }
    else
    {
      /* Update state */
      hospi->State = HAL_OSPI_STATE_READY;
 800f41e:	687b      	ldr	r3, [r7, #4]
 800f420:	2202      	movs	r2, #2
 800f422:	655a      	str	r2, [r3, #84]	; 0x54

      /* Error callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
      hospi->ErrorCallback(hospi);
#else
      HAL_OSPI_ErrorCallback(hospi);
 800f424:	6878      	ldr	r0, [r7, #4]
 800f426:	f000 fa95 	bl	800f954 <HAL_OSPI_ErrorCallback>
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
 800f42a:	e013      	b.n	800f454 <HAL_OSPI_IRQHandler+0x274>
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */ 
    }
  }
  /* OctoSPI timeout interrupt occurred --------------------------------------*/
  else if (((flag & HAL_OSPI_FLAG_TO) != 0U) && ((itsource & HAL_OSPI_IT_TO) != 0U))
 800f42c:	693b      	ldr	r3, [r7, #16]
 800f42e:	f003 0310 	and.w	r3, r3, #16
 800f432:	2b00      	cmp	r3, #0
 800f434:	d00f      	beq.n	800f456 <HAL_OSPI_IRQHandler+0x276>
 800f436:	68fb      	ldr	r3, [r7, #12]
 800f438:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800f43c:	2b00      	cmp	r3, #0
 800f43e:	d00a      	beq.n	800f456 <HAL_OSPI_IRQHandler+0x276>
  {
    /* Clear flag */
    hospi->Instance->FCR = HAL_OSPI_FLAG_TO;
 800f440:	687b      	ldr	r3, [r7, #4]
 800f442:	681b      	ldr	r3, [r3, #0]
 800f444:	2210      	movs	r2, #16
 800f446:	625a      	str	r2, [r3, #36]	; 0x24

    /* Timeout callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
    hospi->TimeOutCallback(hospi);
#else
    HAL_OSPI_TimeOutCallback(hospi);
 800f448:	6878      	ldr	r0, [r7, #4]
 800f44a:	f000 fac9 	bl	800f9e0 <HAL_OSPI_TimeOutCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800f44e:	e002      	b.n	800f456 <HAL_OSPI_IRQHandler+0x276>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 800f450:	bf00      	nop
 800f452:	e000      	b.n	800f456 <HAL_OSPI_IRQHandler+0x276>
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
 800f454:	bf00      	nop
}
 800f456:	bf00      	nop
 800f458:	3718      	adds	r7, #24
 800f45a:	46bd      	mov	sp, r7
 800f45c:	bd80      	pop	{r7, pc}
 800f45e:	bf00      	nop
 800f460:	0800fafd 	.word	0x0800fafd

0800f464 <HAL_OSPI_Command>:
  * @param  cmd     : structure that contains the command configuration information
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Command(OSPI_HandleTypeDef *hospi, OSPI_RegularCmdTypeDef *cmd, uint32_t Timeout)
{
 800f464:	b580      	push	{r7, lr}
 800f466:	b08a      	sub	sp, #40	; 0x28
 800f468:	af02      	add	r7, sp, #8
 800f46a:	60f8      	str	r0, [r7, #12]
 800f46c:	60b9      	str	r1, [r7, #8]
 800f46e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t state;
  uint32_t tickstart = HAL_GetTick();
 800f470:	f7fc f83a 	bl	800b4e8 <HAL_GetTick>
 800f474:	61b8      	str	r0, [r7, #24]
    assert_param(IS_OSPI_ALT_BYTES_SIZE    (cmd->AlternateBytesSize));
    assert_param(IS_OSPI_ALT_BYTES_DTR_MODE(cmd->AlternateBytesDtrMode));
  }

  assert_param(IS_OSPI_DATA_MODE(cmd->DataMode));
  if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 800f476:	68bb      	ldr	r3, [r7, #8]
 800f478:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f47a:	2b00      	cmp	r3, #0

  assert_param(IS_OSPI_DQS_MODE (cmd->DQSMode));
  assert_param(IS_OSPI_SIOO_MODE(cmd->SIOOMode));

  /* Check the state of the driver */
  state = hospi->State;
 800f47c:	68fb      	ldr	r3, [r7, #12]
 800f47e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f480:	617b      	str	r3, [r7, #20]
  if (((state == HAL_OSPI_STATE_READY)         && (hospi->Init.MemoryType != HAL_OSPI_MEMTYPE_HYPERBUS)) ||
 800f482:	697b      	ldr	r3, [r7, #20]
 800f484:	2b02      	cmp	r3, #2
 800f486:	d104      	bne.n	800f492 <HAL_OSPI_Command+0x2e>
 800f488:	68fb      	ldr	r3, [r7, #12]
 800f48a:	68db      	ldr	r3, [r3, #12]
 800f48c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800f490:	d115      	bne.n	800f4be <HAL_OSPI_Command+0x5a>
 800f492:	697b      	ldr	r3, [r7, #20]
 800f494:	2b14      	cmp	r3, #20
 800f496:	d107      	bne.n	800f4a8 <HAL_OSPI_Command+0x44>
      ((state == HAL_OSPI_STATE_READ_CMD_CFG)  && ((cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG) 
 800f498:	68bb      	ldr	r3, [r7, #8]
 800f49a:	681b      	ldr	r3, [r3, #0]
 800f49c:	2b02      	cmp	r3, #2
 800f49e:	d00e      	beq.n	800f4be <HAL_OSPI_Command+0x5a>
                                                || (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG))) ||
 800f4a0:	68bb      	ldr	r3, [r7, #8]
 800f4a2:	681b      	ldr	r3, [r3, #0]
 800f4a4:	2b03      	cmp	r3, #3
 800f4a6:	d00a      	beq.n	800f4be <HAL_OSPI_Command+0x5a>
 800f4a8:	697b      	ldr	r3, [r7, #20]
 800f4aa:	2b24      	cmp	r3, #36	; 0x24
 800f4ac:	d15b      	bne.n	800f566 <HAL_OSPI_Command+0x102>
      ((state == HAL_OSPI_STATE_WRITE_CMD_CFG) && ((cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)  || 
 800f4ae:	68bb      	ldr	r3, [r7, #8]
 800f4b0:	681b      	ldr	r3, [r3, #0]
 800f4b2:	2b01      	cmp	r3, #1
 800f4b4:	d003      	beq.n	800f4be <HAL_OSPI_Command+0x5a>
                                                   (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG))))
 800f4b6:	68bb      	ldr	r3, [r7, #8]
 800f4b8:	681b      	ldr	r3, [r3, #0]
      ((state == HAL_OSPI_STATE_WRITE_CMD_CFG) && ((cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)  || 
 800f4ba:	2b03      	cmp	r3, #3
 800f4bc:	d153      	bne.n	800f566 <HAL_OSPI_Command+0x102>
  {
    /* Wait till busy flag is reset */
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800f4be:	687b      	ldr	r3, [r7, #4]
 800f4c0:	9300      	str	r3, [sp, #0]
 800f4c2:	69bb      	ldr	r3, [r7, #24]
 800f4c4:	2200      	movs	r2, #0
 800f4c6:	2120      	movs	r1, #32
 800f4c8:	68f8      	ldr	r0, [r7, #12]
 800f4ca:	f000 fb53 	bl	800fb74 <OSPI_WaitFlagStateUntilTimeout>
 800f4ce:	4603      	mov	r3, r0
 800f4d0:	77fb      	strb	r3, [r7, #31]

    if (status == HAL_OK)
 800f4d2:	7ffb      	ldrb	r3, [r7, #31]
 800f4d4:	2b00      	cmp	r3, #0
 800f4d6:	d14c      	bne.n	800f572 <HAL_OSPI_Command+0x10e>
    {
      /* Initialize error code */
      hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 800f4d8:	68fb      	ldr	r3, [r7, #12]
 800f4da:	2200      	movs	r2, #0
 800f4dc:	659a      	str	r2, [r3, #88]	; 0x58

      /* Configure the registers */
      status = OSPI_ConfigCmd(hospi, cmd);
 800f4de:	68b9      	ldr	r1, [r7, #8]
 800f4e0:	68f8      	ldr	r0, [r7, #12]
 800f4e2:	f000 fb7f 	bl	800fbe4 <OSPI_ConfigCmd>
 800f4e6:	4603      	mov	r3, r0
 800f4e8:	77fb      	strb	r3, [r7, #31]

      if (status == HAL_OK)
 800f4ea:	7ffb      	ldrb	r3, [r7, #31]
 800f4ec:	2b00      	cmp	r3, #0
 800f4ee:	d140      	bne.n	800f572 <HAL_OSPI_Command+0x10e>
      {
        if (cmd->DataMode == HAL_OSPI_DATA_NONE)
 800f4f0:	68bb      	ldr	r3, [r7, #8]
 800f4f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f4f4:	2b00      	cmp	r3, #0
 800f4f6:	d10e      	bne.n	800f516 <HAL_OSPI_Command+0xb2>
        {
          /* When there is no data phase, the transfer start as soon as the configuration is done
             so wait until TC flag is set to go back in idle state */
          status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 800f4f8:	687b      	ldr	r3, [r7, #4]
 800f4fa:	9300      	str	r3, [sp, #0]
 800f4fc:	69bb      	ldr	r3, [r7, #24]
 800f4fe:	2201      	movs	r2, #1
 800f500:	2102      	movs	r1, #2
 800f502:	68f8      	ldr	r0, [r7, #12]
 800f504:	f000 fb36 	bl	800fb74 <OSPI_WaitFlagStateUntilTimeout>
 800f508:	4603      	mov	r3, r0
 800f50a:	77fb      	strb	r3, [r7, #31]

          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 800f50c:	68fb      	ldr	r3, [r7, #12]
 800f50e:	681b      	ldr	r3, [r3, #0]
 800f510:	2202      	movs	r2, #2
 800f512:	625a      	str	r2, [r3, #36]	; 0x24
    if (status == HAL_OK)
 800f514:	e02d      	b.n	800f572 <HAL_OSPI_Command+0x10e>
        }
        else
        {
          /* Update the state */
          if (cmd->OperationType == HAL_OSPI_OPTYPE_COMMON_CFG)
 800f516:	68bb      	ldr	r3, [r7, #8]
 800f518:	681b      	ldr	r3, [r3, #0]
 800f51a:	2b00      	cmp	r3, #0
 800f51c:	d103      	bne.n	800f526 <HAL_OSPI_Command+0xc2>
          {
            hospi->State = HAL_OSPI_STATE_CMD_CFG;
 800f51e:	68fb      	ldr	r3, [r7, #12]
 800f520:	2204      	movs	r2, #4
 800f522:	655a      	str	r2, [r3, #84]	; 0x54
    if (status == HAL_OK)
 800f524:	e025      	b.n	800f572 <HAL_OSPI_Command+0x10e>
          }
          else if (cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)
 800f526:	68bb      	ldr	r3, [r7, #8]
 800f528:	681b      	ldr	r3, [r3, #0]
 800f52a:	2b01      	cmp	r3, #1
 800f52c:	d10b      	bne.n	800f546 <HAL_OSPI_Command+0xe2>
          {
            if (hospi->State == HAL_OSPI_STATE_WRITE_CMD_CFG)
 800f52e:	68fb      	ldr	r3, [r7, #12]
 800f530:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f532:	2b24      	cmp	r3, #36	; 0x24
 800f534:	d103      	bne.n	800f53e <HAL_OSPI_Command+0xda>
            {
              hospi->State = HAL_OSPI_STATE_CMD_CFG;
 800f536:	68fb      	ldr	r3, [r7, #12]
 800f538:	2204      	movs	r2, #4
 800f53a:	655a      	str	r2, [r3, #84]	; 0x54
    if (status == HAL_OK)
 800f53c:	e019      	b.n	800f572 <HAL_OSPI_Command+0x10e>
            }
            else
            {
              hospi->State = HAL_OSPI_STATE_READ_CMD_CFG;
 800f53e:	68fb      	ldr	r3, [r7, #12]
 800f540:	2214      	movs	r2, #20
 800f542:	655a      	str	r2, [r3, #84]	; 0x54
    if (status == HAL_OK)
 800f544:	e015      	b.n	800f572 <HAL_OSPI_Command+0x10e>
            }
          }
          else if (cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 800f546:	68bb      	ldr	r3, [r7, #8]
 800f548:	681b      	ldr	r3, [r3, #0]
 800f54a:	2b02      	cmp	r3, #2
 800f54c:	d111      	bne.n	800f572 <HAL_OSPI_Command+0x10e>
          {
            if (hospi->State == HAL_OSPI_STATE_READ_CMD_CFG)
 800f54e:	68fb      	ldr	r3, [r7, #12]
 800f550:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f552:	2b14      	cmp	r3, #20
 800f554:	d103      	bne.n	800f55e <HAL_OSPI_Command+0xfa>
            {
              hospi->State = HAL_OSPI_STATE_CMD_CFG;
 800f556:	68fb      	ldr	r3, [r7, #12]
 800f558:	2204      	movs	r2, #4
 800f55a:	655a      	str	r2, [r3, #84]	; 0x54
    if (status == HAL_OK)
 800f55c:	e009      	b.n	800f572 <HAL_OSPI_Command+0x10e>
            }
            else
            {
              hospi->State = HAL_OSPI_STATE_WRITE_CMD_CFG;
 800f55e:	68fb      	ldr	r3, [r7, #12]
 800f560:	2224      	movs	r2, #36	; 0x24
 800f562:	655a      	str	r2, [r3, #84]	; 0x54
    if (status == HAL_OK)
 800f564:	e005      	b.n	800f572 <HAL_OSPI_Command+0x10e>
      }
    }
  }
  else
  {
    status = HAL_ERROR;
 800f566:	2301      	movs	r3, #1
 800f568:	77fb      	strb	r3, [r7, #31]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 800f56a:	68fb      	ldr	r3, [r7, #12]
 800f56c:	2210      	movs	r2, #16
 800f56e:	659a      	str	r2, [r3, #88]	; 0x58
 800f570:	e000      	b.n	800f574 <HAL_OSPI_Command+0x110>
    if (status == HAL_OK)
 800f572:	bf00      	nop
  }

  /* Return function status */
  return status;
 800f574:	7ffb      	ldrb	r3, [r7, #31]
}
 800f576:	4618      	mov	r0, r3
 800f578:	3720      	adds	r7, #32
 800f57a:	46bd      	mov	sp, r7
 800f57c:	bd80      	pop	{r7, pc}

0800f57e <HAL_OSPI_Transmit>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Transmit(OSPI_HandleTypeDef *hospi, uint8_t *pData, uint32_t Timeout)
{
 800f57e:	b580      	push	{r7, lr}
 800f580:	b08a      	sub	sp, #40	; 0x28
 800f582:	af02      	add	r7, sp, #8
 800f584:	60f8      	str	r0, [r7, #12]
 800f586:	60b9      	str	r1, [r7, #8]
 800f588:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800f58a:	f7fb ffad 	bl	800b4e8 <HAL_GetTick>
 800f58e:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hospi->Instance->DR;
 800f590:	68fb      	ldr	r3, [r7, #12]
 800f592:	681b      	ldr	r3, [r3, #0]
 800f594:	3350      	adds	r3, #80	; 0x50
 800f596:	617b      	str	r3, [r7, #20]

  /* Check the data pointer allocation */
  if (pData == NULL)
 800f598:	68bb      	ldr	r3, [r7, #8]
 800f59a:	2b00      	cmp	r3, #0
 800f59c:	d105      	bne.n	800f5aa <HAL_OSPI_Transmit+0x2c>
  {
    status = HAL_ERROR;
 800f59e:	2301      	movs	r3, #1
 800f5a0:	77fb      	strb	r3, [r7, #31]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 800f5a2:	68fb      	ldr	r3, [r7, #12]
 800f5a4:	2208      	movs	r2, #8
 800f5a6:	659a      	str	r2, [r3, #88]	; 0x58
 800f5a8:	e057      	b.n	800f65a <HAL_OSPI_Transmit+0xdc>
  }
  else
  {
    /* Check the state */
    if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 800f5aa:	68fb      	ldr	r3, [r7, #12]
 800f5ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f5ae:	2b04      	cmp	r3, #4
 800f5b0:	d14e      	bne.n	800f650 <HAL_OSPI_Transmit+0xd2>
    {
      /* Configure counters and size */
      hospi->XferCount = READ_REG(hospi->Instance->DLR) + 1U;
 800f5b2:	68fb      	ldr	r3, [r7, #12]
 800f5b4:	681b      	ldr	r3, [r3, #0]
 800f5b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f5b8:	1c5a      	adds	r2, r3, #1
 800f5ba:	68fb      	ldr	r3, [r7, #12]
 800f5bc:	64da      	str	r2, [r3, #76]	; 0x4c
      hospi->XferSize  = hospi->XferCount;
 800f5be:	68fb      	ldr	r3, [r7, #12]
 800f5c0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f5c2:	68fb      	ldr	r3, [r7, #12]
 800f5c4:	649a      	str	r2, [r3, #72]	; 0x48
      hospi->pBuffPtr  = pData;
 800f5c6:	68fb      	ldr	r3, [r7, #12]
 800f5c8:	68ba      	ldr	r2, [r7, #8]
 800f5ca:	645a      	str	r2, [r3, #68]	; 0x44

      /* Configure CR register with functional mode as indirect write */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, OSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800f5cc:	68fb      	ldr	r3, [r7, #12]
 800f5ce:	681b      	ldr	r3, [r3, #0]
 800f5d0:	681a      	ldr	r2, [r3, #0]
 800f5d2:	68fb      	ldr	r3, [r7, #12]
 800f5d4:	681b      	ldr	r3, [r3, #0]
 800f5d6:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800f5da:	601a      	str	r2, [r3, #0]

      do
      {
        /* Wait till fifo threshold flag is set to send data */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_FT, SET, tickstart, Timeout);
 800f5dc:	687b      	ldr	r3, [r7, #4]
 800f5de:	9300      	str	r3, [sp, #0]
 800f5e0:	69bb      	ldr	r3, [r7, #24]
 800f5e2:	2201      	movs	r2, #1
 800f5e4:	2104      	movs	r1, #4
 800f5e6:	68f8      	ldr	r0, [r7, #12]
 800f5e8:	f000 fac4 	bl	800fb74 <OSPI_WaitFlagStateUntilTimeout>
 800f5ec:	4603      	mov	r3, r0
 800f5ee:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 800f5f0:	7ffb      	ldrb	r3, [r7, #31]
 800f5f2:	2b00      	cmp	r3, #0
 800f5f4:	d113      	bne.n	800f61e <HAL_OSPI_Transmit+0xa0>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hospi->pBuffPtr;
 800f5f6:	68fb      	ldr	r3, [r7, #12]
 800f5f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f5fa:	781a      	ldrb	r2, [r3, #0]
 800f5fc:	697b      	ldr	r3, [r7, #20]
 800f5fe:	701a      	strb	r2, [r3, #0]
        hospi->pBuffPtr++;
 800f600:	68fb      	ldr	r3, [r7, #12]
 800f602:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f604:	1c5a      	adds	r2, r3, #1
 800f606:	68fb      	ldr	r3, [r7, #12]
 800f608:	645a      	str	r2, [r3, #68]	; 0x44
        hospi->XferCount--;
 800f60a:	68fb      	ldr	r3, [r7, #12]
 800f60c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f60e:	1e5a      	subs	r2, r3, #1
 800f610:	68fb      	ldr	r3, [r7, #12]
 800f612:	64da      	str	r2, [r3, #76]	; 0x4c
      } while (hospi->XferCount > 0U);
 800f614:	68fb      	ldr	r3, [r7, #12]
 800f616:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f618:	2b00      	cmp	r3, #0
 800f61a:	d1df      	bne.n	800f5dc <HAL_OSPI_Transmit+0x5e>
 800f61c:	e000      	b.n	800f620 <HAL_OSPI_Transmit+0xa2>
          break;
 800f61e:	bf00      	nop

      if (status == HAL_OK)
 800f620:	7ffb      	ldrb	r3, [r7, #31]
 800f622:	2b00      	cmp	r3, #0
 800f624:	d119      	bne.n	800f65a <HAL_OSPI_Transmit+0xdc>
      {
        /* Wait till transfer complete flag is set to go back in idle state */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 800f626:	687b      	ldr	r3, [r7, #4]
 800f628:	9300      	str	r3, [sp, #0]
 800f62a:	69bb      	ldr	r3, [r7, #24]
 800f62c:	2201      	movs	r2, #1
 800f62e:	2102      	movs	r1, #2
 800f630:	68f8      	ldr	r0, [r7, #12]
 800f632:	f000 fa9f 	bl	800fb74 <OSPI_WaitFlagStateUntilTimeout>
 800f636:	4603      	mov	r3, r0
 800f638:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 800f63a:	7ffb      	ldrb	r3, [r7, #31]
 800f63c:	2b00      	cmp	r3, #0
 800f63e:	d10c      	bne.n	800f65a <HAL_OSPI_Transmit+0xdc>
        {
          /* Clear transfer complete flag */
          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 800f640:	68fb      	ldr	r3, [r7, #12]
 800f642:	681b      	ldr	r3, [r3, #0]
 800f644:	2202      	movs	r2, #2
 800f646:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update state */
          hospi->State = HAL_OSPI_STATE_READY;
 800f648:	68fb      	ldr	r3, [r7, #12]
 800f64a:	2202      	movs	r2, #2
 800f64c:	655a      	str	r2, [r3, #84]	; 0x54
 800f64e:	e004      	b.n	800f65a <HAL_OSPI_Transmit+0xdc>
        }
      }
    }
    else
    {
      status = HAL_ERROR;
 800f650:	2301      	movs	r3, #1
 800f652:	77fb      	strb	r3, [r7, #31]
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 800f654:	68fb      	ldr	r3, [r7, #12]
 800f656:	2210      	movs	r2, #16
 800f658:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }

  /* Return function status */
  return status;
 800f65a:	7ffb      	ldrb	r3, [r7, #31]
}
 800f65c:	4618      	mov	r0, r3
 800f65e:	3720      	adds	r7, #32
 800f660:	46bd      	mov	sp, r7
 800f662:	bd80      	pop	{r7, pc}

0800f664 <HAL_OSPI_Receive>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Receive(OSPI_HandleTypeDef *hospi, uint8_t *pData, uint32_t Timeout)
{
 800f664:	b580      	push	{r7, lr}
 800f666:	b08c      	sub	sp, #48	; 0x30
 800f668:	af02      	add	r7, sp, #8
 800f66a:	60f8      	str	r0, [r7, #12]
 800f66c:	60b9      	str	r1, [r7, #8]
 800f66e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800f670:	f7fb ff3a 	bl	800b4e8 <HAL_GetTick>
 800f674:	6238      	str	r0, [r7, #32]
  __IO uint32_t *data_reg = &hospi->Instance->DR;
 800f676:	68fb      	ldr	r3, [r7, #12]
 800f678:	681b      	ldr	r3, [r3, #0]
 800f67a:	3350      	adds	r3, #80	; 0x50
 800f67c:	61fb      	str	r3, [r7, #28]
  uint32_t addr_reg = hospi->Instance->AR;
 800f67e:	68fb      	ldr	r3, [r7, #12]
 800f680:	681b      	ldr	r3, [r3, #0]
 800f682:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f684:	61bb      	str	r3, [r7, #24]
  uint32_t ir_reg = hospi->Instance->IR;
 800f686:	68fb      	ldr	r3, [r7, #12]
 800f688:	681b      	ldr	r3, [r3, #0]
 800f68a:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 800f68e:	617b      	str	r3, [r7, #20]

  /* Check the data pointer allocation */
  if (pData == NULL)
 800f690:	68bb      	ldr	r3, [r7, #8]
 800f692:	2b00      	cmp	r3, #0
 800f694:	d106      	bne.n	800f6a4 <HAL_OSPI_Receive+0x40>
  {
    status = HAL_ERROR;
 800f696:	2301      	movs	r3, #1
 800f698:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 800f69c:	68fb      	ldr	r3, [r7, #12]
 800f69e:	2208      	movs	r2, #8
 800f6a0:	659a      	str	r2, [r3, #88]	; 0x58
 800f6a2:	e07c      	b.n	800f79e <HAL_OSPI_Receive+0x13a>
  }
  else
  {
    /* Check the state */
    if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 800f6a4:	68fb      	ldr	r3, [r7, #12]
 800f6a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f6a8:	2b04      	cmp	r3, #4
 800f6aa:	d172      	bne.n	800f792 <HAL_OSPI_Receive+0x12e>
    {
      /* Configure counters and size */
      hospi->XferCount = READ_REG(hospi->Instance->DLR) + 1U;
 800f6ac:	68fb      	ldr	r3, [r7, #12]
 800f6ae:	681b      	ldr	r3, [r3, #0]
 800f6b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f6b2:	1c5a      	adds	r2, r3, #1
 800f6b4:	68fb      	ldr	r3, [r7, #12]
 800f6b6:	64da      	str	r2, [r3, #76]	; 0x4c
      hospi->XferSize  = hospi->XferCount;
 800f6b8:	68fb      	ldr	r3, [r7, #12]
 800f6ba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f6bc:	68fb      	ldr	r3, [r7, #12]
 800f6be:	649a      	str	r2, [r3, #72]	; 0x48
      hospi->pBuffPtr  = pData;
 800f6c0:	68fb      	ldr	r3, [r7, #12]
 800f6c2:	68ba      	ldr	r2, [r7, #8]
 800f6c4:	645a      	str	r2, [r3, #68]	; 0x44

      /* Configure CR register with functional mode as indirect read */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, OSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 800f6c6:	68fb      	ldr	r3, [r7, #12]
 800f6c8:	681b      	ldr	r3, [r3, #0]
 800f6ca:	681b      	ldr	r3, [r3, #0]
 800f6cc:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800f6d0:	68fb      	ldr	r3, [r7, #12]
 800f6d2:	681b      	ldr	r3, [r3, #0]
 800f6d4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800f6d8:	601a      	str	r2, [r3, #0]

      /* Trig the transfer by re-writing address or instruction register */
      if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 800f6da:	68fb      	ldr	r3, [r7, #12]
 800f6dc:	68db      	ldr	r3, [r3, #12]
 800f6de:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800f6e2:	d104      	bne.n	800f6ee <HAL_OSPI_Receive+0x8a>
      {
        WRITE_REG(hospi->Instance->AR, addr_reg);
 800f6e4:	68fb      	ldr	r3, [r7, #12]
 800f6e6:	681b      	ldr	r3, [r3, #0]
 800f6e8:	69ba      	ldr	r2, [r7, #24]
 800f6ea:	649a      	str	r2, [r3, #72]	; 0x48
 800f6ec:	e011      	b.n	800f712 <HAL_OSPI_Receive+0xae>
      }
      else
      {
        if (READ_BIT(hospi->Instance->CCR, OCTOSPI_CCR_ADMODE) != HAL_OSPI_ADDRESS_NONE)
 800f6ee:	68fb      	ldr	r3, [r7, #12]
 800f6f0:	681b      	ldr	r3, [r3, #0]
 800f6f2:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800f6f6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800f6fa:	2b00      	cmp	r3, #0
 800f6fc:	d004      	beq.n	800f708 <HAL_OSPI_Receive+0xa4>
        {
          WRITE_REG(hospi->Instance->AR, addr_reg);
 800f6fe:	68fb      	ldr	r3, [r7, #12]
 800f700:	681b      	ldr	r3, [r3, #0]
 800f702:	69ba      	ldr	r2, [r7, #24]
 800f704:	649a      	str	r2, [r3, #72]	; 0x48
 800f706:	e004      	b.n	800f712 <HAL_OSPI_Receive+0xae>
        }
        else
        {
          WRITE_REG(hospi->Instance->IR, ir_reg);
 800f708:	68fb      	ldr	r3, [r7, #12]
 800f70a:	681b      	ldr	r3, [r3, #0]
 800f70c:	697a      	ldr	r2, [r7, #20]
 800f70e:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
      }

      do
      {
        /* Wait till fifo threshold or transfer complete flags are set to read received data */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, (HAL_OSPI_FLAG_FT | HAL_OSPI_FLAG_TC), SET, tickstart, Timeout);
 800f712:	687b      	ldr	r3, [r7, #4]
 800f714:	9300      	str	r3, [sp, #0]
 800f716:	6a3b      	ldr	r3, [r7, #32]
 800f718:	2201      	movs	r2, #1
 800f71a:	2106      	movs	r1, #6
 800f71c:	68f8      	ldr	r0, [r7, #12]
 800f71e:	f000 fa29 	bl	800fb74 <OSPI_WaitFlagStateUntilTimeout>
 800f722:	4603      	mov	r3, r0
 800f724:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        if (status != HAL_OK)
 800f728:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f72c:	2b00      	cmp	r3, #0
 800f72e:	d114      	bne.n	800f75a <HAL_OSPI_Receive+0xf6>
        {
          break;
        }

        *hospi->pBuffPtr = *((__IO uint8_t *)data_reg);
 800f730:	68fb      	ldr	r3, [r7, #12]
 800f732:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f734:	69fa      	ldr	r2, [r7, #28]
 800f736:	7812      	ldrb	r2, [r2, #0]
 800f738:	b2d2      	uxtb	r2, r2
 800f73a:	701a      	strb	r2, [r3, #0]
        hospi->pBuffPtr++;
 800f73c:	68fb      	ldr	r3, [r7, #12]
 800f73e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f740:	1c5a      	adds	r2, r3, #1
 800f742:	68fb      	ldr	r3, [r7, #12]
 800f744:	645a      	str	r2, [r3, #68]	; 0x44
        hospi->XferCount--;
 800f746:	68fb      	ldr	r3, [r7, #12]
 800f748:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f74a:	1e5a      	subs	r2, r3, #1
 800f74c:	68fb      	ldr	r3, [r7, #12]
 800f74e:	64da      	str	r2, [r3, #76]	; 0x4c
      } while(hospi->XferCount > 0U);
 800f750:	68fb      	ldr	r3, [r7, #12]
 800f752:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f754:	2b00      	cmp	r3, #0
 800f756:	d1dc      	bne.n	800f712 <HAL_OSPI_Receive+0xae>
 800f758:	e000      	b.n	800f75c <HAL_OSPI_Receive+0xf8>
          break;
 800f75a:	bf00      	nop

      if (status == HAL_OK)
 800f75c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f760:	2b00      	cmp	r3, #0
 800f762:	d11c      	bne.n	800f79e <HAL_OSPI_Receive+0x13a>
      {
        /* Wait till transfer complete flag is set to go back in idle state */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 800f764:	687b      	ldr	r3, [r7, #4]
 800f766:	9300      	str	r3, [sp, #0]
 800f768:	6a3b      	ldr	r3, [r7, #32]
 800f76a:	2201      	movs	r2, #1
 800f76c:	2102      	movs	r1, #2
 800f76e:	68f8      	ldr	r0, [r7, #12]
 800f770:	f000 fa00 	bl	800fb74 <OSPI_WaitFlagStateUntilTimeout>
 800f774:	4603      	mov	r3, r0
 800f776:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        if (status == HAL_OK)
 800f77a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f77e:	2b00      	cmp	r3, #0
 800f780:	d10d      	bne.n	800f79e <HAL_OSPI_Receive+0x13a>
        {
          /* Clear transfer complete flag */
          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 800f782:	68fb      	ldr	r3, [r7, #12]
 800f784:	681b      	ldr	r3, [r3, #0]
 800f786:	2202      	movs	r2, #2
 800f788:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update state */
          hospi->State = HAL_OSPI_STATE_READY;
 800f78a:	68fb      	ldr	r3, [r7, #12]
 800f78c:	2202      	movs	r2, #2
 800f78e:	655a      	str	r2, [r3, #84]	; 0x54
 800f790:	e005      	b.n	800f79e <HAL_OSPI_Receive+0x13a>
        }
      }
    }
    else
    {
      status = HAL_ERROR;
 800f792:	2301      	movs	r3, #1
 800f794:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 800f798:	68fb      	ldr	r3, [r7, #12]
 800f79a:	2210      	movs	r2, #16
 800f79c:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }

  /* Return function status */
  return status;
 800f79e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800f7a2:	4618      	mov	r0, r3
 800f7a4:	3728      	adds	r7, #40	; 0x28
 800f7a6:	46bd      	mov	sp, r7
 800f7a8:	bd80      	pop	{r7, pc}

0800f7aa <HAL_OSPI_AutoPolling>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_AutoPolling(OSPI_HandleTypeDef *hospi, OSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
 800f7aa:	b580      	push	{r7, lr}
 800f7ac:	b08a      	sub	sp, #40	; 0x28
 800f7ae:	af02      	add	r7, sp, #8
 800f7b0:	60f8      	str	r0, [r7, #12]
 800f7b2:	60b9      	str	r1, [r7, #8]
 800f7b4:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800f7b6:	f7fb fe97 	bl	800b4e8 <HAL_GetTick>
 800f7ba:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = hospi->Instance->AR;
 800f7bc:	68fb      	ldr	r3, [r7, #12]
 800f7be:	681b      	ldr	r3, [r3, #0]
 800f7c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f7c2:	617b      	str	r3, [r7, #20]
  uint32_t ir_reg = hospi->Instance->IR;
 800f7c4:	68fb      	ldr	r3, [r7, #12]
 800f7c6:	681b      	ldr	r3, [r3, #0]
 800f7c8:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 800f7cc:	613b      	str	r3, [r7, #16]
  assert_param(IS_OSPI_AUTOMATIC_STOP   (cfg->AutomaticStop));
  assert_param(IS_OSPI_INTERVAL         (cfg->Interval));
  assert_param(IS_OSPI_STATUS_BYTES_SIZE(dlr_reg+1U));

  /* Check the state */
  if ((hospi->State == HAL_OSPI_STATE_CMD_CFG) && (cfg->AutomaticStop == HAL_OSPI_AUTOMATIC_STOP_ENABLE))
 800f7ce:	68fb      	ldr	r3, [r7, #12]
 800f7d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f7d2:	2b04      	cmp	r3, #4
 800f7d4:	d164      	bne.n	800f8a0 <HAL_OSPI_AutoPolling+0xf6>
 800f7d6:	68bb      	ldr	r3, [r7, #8]
 800f7d8:	68db      	ldr	r3, [r3, #12]
 800f7da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800f7de:	d15f      	bne.n	800f8a0 <HAL_OSPI_AutoPolling+0xf6>
  {
    /* Wait till busy flag is reset */
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800f7e0:	687b      	ldr	r3, [r7, #4]
 800f7e2:	9300      	str	r3, [sp, #0]
 800f7e4:	69bb      	ldr	r3, [r7, #24]
 800f7e6:	2200      	movs	r2, #0
 800f7e8:	2120      	movs	r1, #32
 800f7ea:	68f8      	ldr	r0, [r7, #12]
 800f7ec:	f000 f9c2 	bl	800fb74 <OSPI_WaitFlagStateUntilTimeout>
 800f7f0:	4603      	mov	r3, r0
 800f7f2:	77fb      	strb	r3, [r7, #31]

    if (status == HAL_OK)
 800f7f4:	7ffb      	ldrb	r3, [r7, #31]
 800f7f6:	2b00      	cmp	r3, #0
 800f7f8:	d158      	bne.n	800f8ac <HAL_OSPI_AutoPolling+0x102>
    {
      /* Configure registers */
      WRITE_REG (hospi->Instance->PSMAR, cfg->Match);
 800f7fa:	68fb      	ldr	r3, [r7, #12]
 800f7fc:	681b      	ldr	r3, [r3, #0]
 800f7fe:	68ba      	ldr	r2, [r7, #8]
 800f800:	6812      	ldr	r2, [r2, #0]
 800f802:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      WRITE_REG (hospi->Instance->PSMKR, cfg->Mask);
 800f806:	68fb      	ldr	r3, [r7, #12]
 800f808:	681b      	ldr	r3, [r3, #0]
 800f80a:	68ba      	ldr	r2, [r7, #8]
 800f80c:	6852      	ldr	r2, [r2, #4]
 800f80e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      WRITE_REG (hospi->Instance->PIR,   cfg->Interval);
 800f812:	68fb      	ldr	r3, [r7, #12]
 800f814:	681b      	ldr	r3, [r3, #0]
 800f816:	68ba      	ldr	r2, [r7, #8]
 800f818:	6912      	ldr	r2, [r2, #16]
 800f81a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      MODIFY_REG(hospi->Instance->CR,    (OCTOSPI_CR_PMM | OCTOSPI_CR_APMS | OCTOSPI_CR_FMODE),
 800f81e:	68fb      	ldr	r3, [r7, #12]
 800f820:	681b      	ldr	r3, [r3, #0]
 800f822:	681b      	ldr	r3, [r3, #0]
 800f824:	f023 5243 	bic.w	r2, r3, #817889280	; 0x30c00000
 800f828:	68bb      	ldr	r3, [r7, #8]
 800f82a:	6899      	ldr	r1, [r3, #8]
 800f82c:	68bb      	ldr	r3, [r7, #8]
 800f82e:	68db      	ldr	r3, [r3, #12]
 800f830:	430b      	orrs	r3, r1
 800f832:	431a      	orrs	r2, r3
 800f834:	68fb      	ldr	r3, [r7, #12]
 800f836:	681b      	ldr	r3, [r3, #0]
 800f838:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800f83c:	601a      	str	r2, [r3, #0]
                 (cfg->MatchMode | cfg->AutomaticStop | OSPI_FUNCTIONAL_MODE_AUTO_POLLING));

      /* Trig the transfer by re-writing address or instruction register */
      if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 800f83e:	68fb      	ldr	r3, [r7, #12]
 800f840:	68db      	ldr	r3, [r3, #12]
 800f842:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800f846:	d104      	bne.n	800f852 <HAL_OSPI_AutoPolling+0xa8>
      {
        WRITE_REG(hospi->Instance->AR, addr_reg);
 800f848:	68fb      	ldr	r3, [r7, #12]
 800f84a:	681b      	ldr	r3, [r3, #0]
 800f84c:	697a      	ldr	r2, [r7, #20]
 800f84e:	649a      	str	r2, [r3, #72]	; 0x48
 800f850:	e011      	b.n	800f876 <HAL_OSPI_AutoPolling+0xcc>
      }
      else
      {
        if (READ_BIT(hospi->Instance->CCR, OCTOSPI_CCR_ADMODE) != HAL_OSPI_ADDRESS_NONE)
 800f852:	68fb      	ldr	r3, [r7, #12]
 800f854:	681b      	ldr	r3, [r3, #0]
 800f856:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800f85a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800f85e:	2b00      	cmp	r3, #0
 800f860:	d004      	beq.n	800f86c <HAL_OSPI_AutoPolling+0xc2>
        {
          WRITE_REG(hospi->Instance->AR, addr_reg);
 800f862:	68fb      	ldr	r3, [r7, #12]
 800f864:	681b      	ldr	r3, [r3, #0]
 800f866:	697a      	ldr	r2, [r7, #20]
 800f868:	649a      	str	r2, [r3, #72]	; 0x48
 800f86a:	e004      	b.n	800f876 <HAL_OSPI_AutoPolling+0xcc>
        }
        else
        {
          WRITE_REG(hospi->Instance->IR, ir_reg);
 800f86c:	68fb      	ldr	r3, [r7, #12]
 800f86e:	681b      	ldr	r3, [r3, #0]
 800f870:	693a      	ldr	r2, [r7, #16]
 800f872:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
        }
      }

      /* Wait till status match flag is set to go back in idle state */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_SM, SET, tickstart, Timeout);
 800f876:	687b      	ldr	r3, [r7, #4]
 800f878:	9300      	str	r3, [sp, #0]
 800f87a:	69bb      	ldr	r3, [r7, #24]
 800f87c:	2201      	movs	r2, #1
 800f87e:	2108      	movs	r1, #8
 800f880:	68f8      	ldr	r0, [r7, #12]
 800f882:	f000 f977 	bl	800fb74 <OSPI_WaitFlagStateUntilTimeout>
 800f886:	4603      	mov	r3, r0
 800f888:	77fb      	strb	r3, [r7, #31]

      if (status == HAL_OK)
 800f88a:	7ffb      	ldrb	r3, [r7, #31]
 800f88c:	2b00      	cmp	r3, #0
 800f88e:	d10d      	bne.n	800f8ac <HAL_OSPI_AutoPolling+0x102>
      {
        /* Clear status match flag */
        __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_SM);
 800f890:	68fb      	ldr	r3, [r7, #12]
 800f892:	681b      	ldr	r3, [r3, #0]
 800f894:	2208      	movs	r2, #8
 800f896:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update state */
        hospi->State = HAL_OSPI_STATE_READY;
 800f898:	68fb      	ldr	r3, [r7, #12]
 800f89a:	2202      	movs	r2, #2
 800f89c:	655a      	str	r2, [r3, #84]	; 0x54
    if (status == HAL_OK)
 800f89e:	e005      	b.n	800f8ac <HAL_OSPI_AutoPolling+0x102>
      }
    }
  }
  else
  {
    status = HAL_ERROR;
 800f8a0:	2301      	movs	r3, #1
 800f8a2:	77fb      	strb	r3, [r7, #31]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 800f8a4:	68fb      	ldr	r3, [r7, #12]
 800f8a6:	2210      	movs	r2, #16
 800f8a8:	659a      	str	r2, [r3, #88]	; 0x58
 800f8aa:	e000      	b.n	800f8ae <HAL_OSPI_AutoPolling+0x104>
    if (status == HAL_OK)
 800f8ac:	bf00      	nop
  }

  /* Return function status */
  return status;
 800f8ae:	7ffb      	ldrb	r3, [r7, #31]
}
 800f8b0:	4618      	mov	r0, r3
 800f8b2:	3720      	adds	r7, #32
 800f8b4:	46bd      	mov	sp, r7
 800f8b6:	bd80      	pop	{r7, pc}

0800f8b8 <HAL_OSPI_MemoryMapped>:
  * @param  cfg   : structure that contains the memory mapped configuration information.
  * @note   This function is used only in Memory mapped Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_MemoryMapped(OSPI_HandleTypeDef *hospi, OSPI_MemoryMappedTypeDef *cfg)
{
 800f8b8:	b580      	push	{r7, lr}
 800f8ba:	b086      	sub	sp, #24
 800f8bc:	af02      	add	r7, sp, #8
 800f8be:	6078      	str	r0, [r7, #4]
 800f8c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800f8c2:	f7fb fe11 	bl	800b4e8 <HAL_GetTick>
 800f8c6:	60b8      	str	r0, [r7, #8]

  /* Check the parameters of the memory-mapped configuration structure */
  assert_param(IS_OSPI_TIMEOUT_ACTIVATION(cfg->TimeOutActivation));

  /* Check the state */
  if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 800f8c8:	687b      	ldr	r3, [r7, #4]
 800f8ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f8cc:	2b04      	cmp	r3, #4
 800f8ce:	d134      	bne.n	800f93a <HAL_OSPI_MemoryMapped+0x82>
  {
    /* Wait till busy flag is reset */
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 800f8d0:	687b      	ldr	r3, [r7, #4]
 800f8d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f8d4:	9300      	str	r3, [sp, #0]
 800f8d6:	68bb      	ldr	r3, [r7, #8]
 800f8d8:	2200      	movs	r2, #0
 800f8da:	2120      	movs	r1, #32
 800f8dc:	6878      	ldr	r0, [r7, #4]
 800f8de:	f000 f949 	bl	800fb74 <OSPI_WaitFlagStateUntilTimeout>
 800f8e2:	4603      	mov	r3, r0
 800f8e4:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800f8e6:	7bfb      	ldrb	r3, [r7, #15]
 800f8e8:	2b00      	cmp	r3, #0
 800f8ea:	d12b      	bne.n	800f944 <HAL_OSPI_MemoryMapped+0x8c>
    {
      /* Update state */
      hospi->State = HAL_OSPI_STATE_BUSY_MEM_MAPPED;
 800f8ec:	687b      	ldr	r3, [r7, #4]
 800f8ee:	2288      	movs	r2, #136	; 0x88
 800f8f0:	655a      	str	r2, [r3, #84]	; 0x54

      if (cfg->TimeOutActivation == HAL_OSPI_TIMEOUT_COUNTER_ENABLE)
 800f8f2:	683b      	ldr	r3, [r7, #0]
 800f8f4:	681b      	ldr	r3, [r3, #0]
 800f8f6:	2b08      	cmp	r3, #8
 800f8f8:	d111      	bne.n	800f91e <HAL_OSPI_MemoryMapped+0x66>
      {
        assert_param(IS_OSPI_TIMEOUT_PERIOD(cfg->TimeOutPeriod));

        /* Configure register */
        WRITE_REG(hospi->Instance->LPTR, cfg->TimeOutPeriod);
 800f8fa:	687b      	ldr	r3, [r7, #4]
 800f8fc:	681b      	ldr	r3, [r3, #0]
 800f8fe:	683a      	ldr	r2, [r7, #0]
 800f900:	6852      	ldr	r2, [r2, #4]
 800f902:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130

        /* Clear flags related to interrupt */
        __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TO);
 800f906:	687b      	ldr	r3, [r7, #4]
 800f908:	681b      	ldr	r3, [r3, #0]
 800f90a:	2210      	movs	r2, #16
 800f90c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Enable the timeout interrupt */
        __HAL_OSPI_ENABLE_IT(hospi, HAL_OSPI_IT_TO);
 800f90e:	687b      	ldr	r3, [r7, #4]
 800f910:	681b      	ldr	r3, [r3, #0]
 800f912:	681a      	ldr	r2, [r3, #0]
 800f914:	687b      	ldr	r3, [r7, #4]
 800f916:	681b      	ldr	r3, [r3, #0]
 800f918:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800f91c:	601a      	str	r2, [r3, #0]
      }

      /* Configure CR register with functional mode as memory-mapped */
      MODIFY_REG(hospi->Instance->CR, (OCTOSPI_CR_TCEN | OCTOSPI_CR_FMODE),
 800f91e:	687b      	ldr	r3, [r7, #4]
 800f920:	681b      	ldr	r3, [r3, #0]
 800f922:	681a      	ldr	r2, [r3, #0]
 800f924:	4b0a      	ldr	r3, [pc, #40]	; (800f950 <HAL_OSPI_MemoryMapped+0x98>)
 800f926:	4013      	ands	r3, r2
 800f928:	683a      	ldr	r2, [r7, #0]
 800f92a:	6812      	ldr	r2, [r2, #0]
 800f92c:	431a      	orrs	r2, r3
 800f92e:	687b      	ldr	r3, [r7, #4]
 800f930:	681b      	ldr	r3, [r3, #0]
 800f932:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 800f936:	601a      	str	r2, [r3, #0]
 800f938:	e004      	b.n	800f944 <HAL_OSPI_MemoryMapped+0x8c>
                 (cfg->TimeOutActivation | OSPI_FUNCTIONAL_MODE_MEMORY_MAPPED));
    }
  }
  else
  {
    status = HAL_ERROR;
 800f93a:	2301      	movs	r3, #1
 800f93c:	73fb      	strb	r3, [r7, #15]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 800f93e:	687b      	ldr	r3, [r7, #4]
 800f940:	2210      	movs	r2, #16
 800f942:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Return function status */
  return status;
 800f944:	7bfb      	ldrb	r3, [r7, #15]
}
 800f946:	4618      	mov	r0, r3
 800f948:	3710      	adds	r7, #16
 800f94a:	46bd      	mov	sp, r7
 800f94c:	bd80      	pop	{r7, pc}
 800f94e:	bf00      	nop
 800f950:	cffffff7 	.word	0xcffffff7

0800f954 <HAL_OSPI_ErrorCallback>:
  * @brief  Transfer Error callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_ErrorCallback(OSPI_HandleTypeDef *hospi)
{
 800f954:	b480      	push	{r7}
 800f956:	b083      	sub	sp, #12
 800f958:	af00      	add	r7, sp, #0
 800f95a:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_OSPI_ErrorCallback could be implemented in the user file
   */
}
 800f95c:	bf00      	nop
 800f95e:	370c      	adds	r7, #12
 800f960:	46bd      	mov	sp, r7
 800f962:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f966:	4770      	bx	lr

0800f968 <HAL_OSPI_AbortCpltCallback>:
  * @brief  Abort completed callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_AbortCpltCallback(OSPI_HandleTypeDef *hospi)
{
 800f968:	b480      	push	{r7}
 800f96a:	b083      	sub	sp, #12
 800f96c:	af00      	add	r7, sp, #0
 800f96e:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_OSPI_AbortCpltCallback could be implemented in the user file
   */
}
 800f970:	bf00      	nop
 800f972:	370c      	adds	r7, #12
 800f974:	46bd      	mov	sp, r7
 800f976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f97a:	4770      	bx	lr

0800f97c <HAL_OSPI_FifoThresholdCallback>:
  * @brief  FIFO Threshold callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_FifoThresholdCallback(OSPI_HandleTypeDef *hospi)
{
 800f97c:	b480      	push	{r7}
 800f97e:	b083      	sub	sp, #12
 800f980:	af00      	add	r7, sp, #0
 800f982:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_OSPI_FIFOThresholdCallback could be implemented in the user file
   */
}
 800f984:	bf00      	nop
 800f986:	370c      	adds	r7, #12
 800f988:	46bd      	mov	sp, r7
 800f98a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f98e:	4770      	bx	lr

0800f990 <HAL_OSPI_CmdCpltCallback>:
  * @brief  Command completed callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_CmdCpltCallback(OSPI_HandleTypeDef *hospi)
{
 800f990:	b480      	push	{r7}
 800f992:	b083      	sub	sp, #12
 800f994:	af00      	add	r7, sp, #0
 800f996:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_OSPI_CmdCpltCallback could be implemented in the user file
   */
}
 800f998:	bf00      	nop
 800f99a:	370c      	adds	r7, #12
 800f99c:	46bd      	mov	sp, r7
 800f99e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9a2:	4770      	bx	lr

0800f9a4 <HAL_OSPI_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_RxCpltCallback(OSPI_HandleTypeDef *hospi)
{
 800f9a4:	b480      	push	{r7}
 800f9a6:	b083      	sub	sp, #12
 800f9a8:	af00      	add	r7, sp, #0
 800f9aa:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_OSPI_RxCpltCallback could be implemented in the user file
   */
}
 800f9ac:	bf00      	nop
 800f9ae:	370c      	adds	r7, #12
 800f9b0:	46bd      	mov	sp, r7
 800f9b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9b6:	4770      	bx	lr

0800f9b8 <HAL_OSPI_TxCpltCallback>:
  * @brief  Tx Transfer completed callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
 __weak void HAL_OSPI_TxCpltCallback(OSPI_HandleTypeDef *hospi)
{
 800f9b8:	b480      	push	{r7}
 800f9ba:	b083      	sub	sp, #12
 800f9bc:	af00      	add	r7, sp, #0
 800f9be:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_OSPI_TxCpltCallback could be implemented in the user file
   */
}
 800f9c0:	bf00      	nop
 800f9c2:	370c      	adds	r7, #12
 800f9c4:	46bd      	mov	sp, r7
 800f9c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9ca:	4770      	bx	lr

0800f9cc <HAL_OSPI_StatusMatchCallback>:
  * @brief  Status Match callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_StatusMatchCallback(OSPI_HandleTypeDef *hospi)
{
 800f9cc:	b480      	push	{r7}
 800f9ce:	b083      	sub	sp, #12
 800f9d0:	af00      	add	r7, sp, #0
 800f9d2:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_OSPI_StatusMatchCallback could be implemented in the user file
   */
}
 800f9d4:	bf00      	nop
 800f9d6:	370c      	adds	r7, #12
 800f9d8:	46bd      	mov	sp, r7
 800f9da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9de:	4770      	bx	lr

0800f9e0 <HAL_OSPI_TimeOutCallback>:
  * @brief  Timeout callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_TimeOutCallback(OSPI_HandleTypeDef *hospi)
{
 800f9e0:	b480      	push	{r7}
 800f9e2:	b083      	sub	sp, #12
 800f9e4:	af00      	add	r7, sp, #0
 800f9e6:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_OSPI_TimeOutCallback could be implemented in the user file
   */
}
 800f9e8:	bf00      	nop
 800f9ea:	370c      	adds	r7, #12
 800f9ec:	46bd      	mov	sp, r7
 800f9ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9f2:	4770      	bx	lr

0800f9f4 <HAL_OSPI_Abort>:
* @brief  Abort the current transmission.
* @param  hospi : OSPI handle
* @retval HAL status
*/
HAL_StatusTypeDef HAL_OSPI_Abort(OSPI_HandleTypeDef *hospi)
{
 800f9f4:	b580      	push	{r7, lr}
 800f9f6:	b088      	sub	sp, #32
 800f9f8:	af02      	add	r7, sp, #8
 800f9fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800f9fc:	2300      	movs	r3, #0
 800f9fe:	75fb      	strb	r3, [r7, #23]
  uint32_t state;
  uint32_t tickstart = HAL_GetTick();
 800fa00:	f7fb fd72 	bl	800b4e8 <HAL_GetTick>
 800fa04:	6138      	str	r0, [r7, #16]

  /* Check if the state is in one of the busy or configured states */
  state = hospi->State;
 800fa06:	687b      	ldr	r3, [r7, #4]
 800fa08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fa0a:	60fb      	str	r3, [r7, #12]
  if (((state & OSPI_BUSY_STATE_MASK) != 0U) || ((state & OSPI_CFG_STATE_MASK) != 0U))
 800fa0c:	68fb      	ldr	r3, [r7, #12]
 800fa0e:	f003 0308 	and.w	r3, r3, #8
 800fa12:	2b00      	cmp	r3, #0
 800fa14:	d104      	bne.n	800fa20 <HAL_OSPI_Abort+0x2c>
 800fa16:	68fb      	ldr	r3, [r7, #12]
 800fa18:	f003 0304 	and.w	r3, r3, #4
 800fa1c:	2b00      	cmp	r3, #0
 800fa1e:	d052      	beq.n	800fac6 <HAL_OSPI_Abort+0xd2>
  {
    /* Check if the DMA is enabled */
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
 800fa20:	687b      	ldr	r3, [r7, #4]
 800fa22:	681b      	ldr	r3, [r3, #0]
 800fa24:	681b      	ldr	r3, [r3, #0]
 800fa26:	f003 0304 	and.w	r3, r3, #4
 800fa2a:	2b00      	cmp	r3, #0
 800fa2c:	d014      	beq.n	800fa58 <HAL_OSPI_Abort+0x64>
    {
      /* Disable the DMA transfer on the OctoSPI side */
      CLEAR_BIT(hospi->Instance->CR, OCTOSPI_CR_DMAEN);
 800fa2e:	687b      	ldr	r3, [r7, #4]
 800fa30:	681b      	ldr	r3, [r3, #0]
 800fa32:	681a      	ldr	r2, [r3, #0]
 800fa34:	687b      	ldr	r3, [r7, #4]
 800fa36:	681b      	ldr	r3, [r3, #0]
 800fa38:	f022 0204 	bic.w	r2, r2, #4
 800fa3c:	601a      	str	r2, [r3, #0]

      /* Disable the DMA transfer on the DMA side */
      status = HAL_MDMA_Abort(hospi->hmdma);
 800fa3e:	687b      	ldr	r3, [r7, #4]
 800fa40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fa42:	4618      	mov	r0, r3
 800fa44:	f7ff fa62 	bl	800ef0c <HAL_MDMA_Abort>
 800fa48:	4603      	mov	r3, r0
 800fa4a:	75fb      	strb	r3, [r7, #23]
      if (status != HAL_OK)
 800fa4c:	7dfb      	ldrb	r3, [r7, #23]
 800fa4e:	2b00      	cmp	r3, #0
 800fa50:	d002      	beq.n	800fa58 <HAL_OSPI_Abort+0x64>
      {
        hospi->ErrorCode = HAL_OSPI_ERROR_DMA;
 800fa52:	687b      	ldr	r3, [r7, #4]
 800fa54:	2204      	movs	r2, #4
 800fa56:	659a      	str	r2, [r3, #88]	; 0x58
      }
    }

    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 800fa58:	687b      	ldr	r3, [r7, #4]
 800fa5a:	681b      	ldr	r3, [r3, #0]
 800fa5c:	6a1b      	ldr	r3, [r3, #32]
 800fa5e:	f003 0320 	and.w	r3, r3, #32
 800fa62:	2b00      	cmp	r3, #0
 800fa64:	d02b      	beq.n	800fabe <HAL_OSPI_Abort+0xca>
    {
      /* Perform an abort of the OctoSPI */
      SET_BIT(hospi->Instance->CR, OCTOSPI_CR_ABORT);
 800fa66:	687b      	ldr	r3, [r7, #4]
 800fa68:	681b      	ldr	r3, [r3, #0]
 800fa6a:	681a      	ldr	r2, [r3, #0]
 800fa6c:	687b      	ldr	r3, [r7, #4]
 800fa6e:	681b      	ldr	r3, [r3, #0]
 800fa70:	f042 0202 	orr.w	r2, r2, #2
 800fa74:	601a      	str	r2, [r3, #0]

      /* Wait until the transfer complete flag is set to go back in idle state */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, hospi->Timeout);
 800fa76:	687b      	ldr	r3, [r7, #4]
 800fa78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800fa7a:	9300      	str	r3, [sp, #0]
 800fa7c:	693b      	ldr	r3, [r7, #16]
 800fa7e:	2201      	movs	r2, #1
 800fa80:	2102      	movs	r1, #2
 800fa82:	6878      	ldr	r0, [r7, #4]
 800fa84:	f000 f876 	bl	800fb74 <OSPI_WaitFlagStateUntilTimeout>
 800fa88:	4603      	mov	r3, r0
 800fa8a:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 800fa8c:	7dfb      	ldrb	r3, [r7, #23]
 800fa8e:	2b00      	cmp	r3, #0
 800fa90:	d11f      	bne.n	800fad2 <HAL_OSPI_Abort+0xde>
      {
        /* Clear transfer complete flag */
        __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 800fa92:	687b      	ldr	r3, [r7, #4]
 800fa94:	681b      	ldr	r3, [r3, #0]
 800fa96:	2202      	movs	r2, #2
 800fa98:	625a      	str	r2, [r3, #36]	; 0x24

        /* Wait until the busy flag is reset to go back in idle state */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 800fa9a:	687b      	ldr	r3, [r7, #4]
 800fa9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800fa9e:	9300      	str	r3, [sp, #0]
 800faa0:	693b      	ldr	r3, [r7, #16]
 800faa2:	2200      	movs	r2, #0
 800faa4:	2120      	movs	r1, #32
 800faa6:	6878      	ldr	r0, [r7, #4]
 800faa8:	f000 f864 	bl	800fb74 <OSPI_WaitFlagStateUntilTimeout>
 800faac:	4603      	mov	r3, r0
 800faae:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 800fab0:	7dfb      	ldrb	r3, [r7, #23]
 800fab2:	2b00      	cmp	r3, #0
 800fab4:	d10d      	bne.n	800fad2 <HAL_OSPI_Abort+0xde>
        {
          /* Update state */
          hospi->State = HAL_OSPI_STATE_READY;
 800fab6:	687b      	ldr	r3, [r7, #4]
 800fab8:	2202      	movs	r2, #2
 800faba:	655a      	str	r2, [r3, #84]	; 0x54
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 800fabc:	e009      	b.n	800fad2 <HAL_OSPI_Abort+0xde>
      }
    }
    else
    {
      /* Update state */
      hospi->State = HAL_OSPI_STATE_READY;
 800fabe:	687b      	ldr	r3, [r7, #4]
 800fac0:	2202      	movs	r2, #2
 800fac2:	655a      	str	r2, [r3, #84]	; 0x54
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 800fac4:	e005      	b.n	800fad2 <HAL_OSPI_Abort+0xde>
    }
  }
  else
  {
    status = HAL_ERROR;
 800fac6:	2301      	movs	r3, #1
 800fac8:	75fb      	strb	r3, [r7, #23]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 800faca:	687b      	ldr	r3, [r7, #4]
 800facc:	2210      	movs	r2, #16
 800face:	659a      	str	r2, [r3, #88]	; 0x58
 800fad0:	e000      	b.n	800fad4 <HAL_OSPI_Abort+0xe0>
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 800fad2:	bf00      	nop
  }

  /* Return function status */
  return status;
 800fad4:	7dfb      	ldrb	r3, [r7, #23]
}
 800fad6:	4618      	mov	r0, r3
 800fad8:	3718      	adds	r7, #24
 800fada:	46bd      	mov	sp, r7
 800fadc:	bd80      	pop	{r7, pc}

0800fade <HAL_OSPI_SetTimeout>:
  * @param  hospi   : OSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval None
  */
HAL_StatusTypeDef HAL_OSPI_SetTimeout(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 800fade:	b480      	push	{r7}
 800fae0:	b083      	sub	sp, #12
 800fae2:	af00      	add	r7, sp, #0
 800fae4:	6078      	str	r0, [r7, #4]
 800fae6:	6039      	str	r1, [r7, #0]
  hospi->Timeout = Timeout;
 800fae8:	687b      	ldr	r3, [r7, #4]
 800faea:	683a      	ldr	r2, [r7, #0]
 800faec:	65da      	str	r2, [r3, #92]	; 0x5c
  return HAL_OK;
 800faee:	2300      	movs	r3, #0
}
 800faf0:	4618      	mov	r0, r3
 800faf2:	370c      	adds	r7, #12
 800faf4:	46bd      	mov	sp, r7
 800faf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fafa:	4770      	bx	lr

0800fafc <OSPI_DMAAbortCplt>:
  * @brief  DMA OSPI abort complete callback.
  * @param  hdma : DMA handle
  * @retval None
  */
static void OSPI_DMAAbortCplt(MDMA_HandleTypeDef *hmdma)
{
 800fafc:	b580      	push	{r7, lr}
 800fafe:	b084      	sub	sp, #16
 800fb00:	af00      	add	r7, sp, #0
 800fb02:	6078      	str	r0, [r7, #4]
  OSPI_HandleTypeDef* hospi = ( OSPI_HandleTypeDef* )(hmdma->Parent);
 800fb04:	687b      	ldr	r3, [r7, #4]
 800fb06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fb08:	60fb      	str	r3, [r7, #12]
  hospi->XferCount = 0;
 800fb0a:	68fb      	ldr	r3, [r7, #12]
 800fb0c:	2200      	movs	r2, #0
 800fb0e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Check the state */
  if (hospi->State == HAL_OSPI_STATE_ABORT)
 800fb10:	68fb      	ldr	r3, [r7, #12]
 800fb12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fb14:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fb18:	d122      	bne.n	800fb60 <OSPI_DMAAbortCplt+0x64>
  {
    /* DMA abort called by OctoSPI abort */
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 800fb1a:	68fb      	ldr	r3, [r7, #12]
 800fb1c:	681b      	ldr	r3, [r3, #0]
 800fb1e:	6a1b      	ldr	r3, [r3, #32]
 800fb20:	f003 0320 	and.w	r3, r3, #32
 800fb24:	2b00      	cmp	r3, #0
 800fb26:	d014      	beq.n	800fb52 <OSPI_DMAAbortCplt+0x56>
    {
      /* Clear transfer complete flag */
      __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 800fb28:	68fb      	ldr	r3, [r7, #12]
 800fb2a:	681b      	ldr	r3, [r3, #0]
 800fb2c:	2202      	movs	r2, #2
 800fb2e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enable the transfer complete interrupts */
      __HAL_OSPI_ENABLE_IT(hospi, HAL_OSPI_IT_TC);
 800fb30:	68fb      	ldr	r3, [r7, #12]
 800fb32:	681b      	ldr	r3, [r3, #0]
 800fb34:	681a      	ldr	r2, [r3, #0]
 800fb36:	68fb      	ldr	r3, [r7, #12]
 800fb38:	681b      	ldr	r3, [r3, #0]
 800fb3a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800fb3e:	601a      	str	r2, [r3, #0]

      /* Perform an abort of the OctoSPI */
      SET_BIT(hospi->Instance->CR, OCTOSPI_CR_ABORT);
 800fb40:	68fb      	ldr	r3, [r7, #12]
 800fb42:	681b      	ldr	r3, [r3, #0]
 800fb44:	681a      	ldr	r2, [r3, #0]
 800fb46:	68fb      	ldr	r3, [r7, #12]
 800fb48:	681b      	ldr	r3, [r3, #0]
 800fb4a:	f042 0202 	orr.w	r2, r2, #2
 800fb4e:	601a      	str	r2, [r3, #0]
    hospi->ErrorCallback(hospi);
#else
    HAL_OSPI_ErrorCallback(hospi);
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)*/
  }
}
 800fb50:	e00c      	b.n	800fb6c <OSPI_DMAAbortCplt+0x70>
      hospi->State = HAL_OSPI_STATE_READY;
 800fb52:	68fb      	ldr	r3, [r7, #12]
 800fb54:	2202      	movs	r2, #2
 800fb56:	655a      	str	r2, [r3, #84]	; 0x54
      HAL_OSPI_AbortCpltCallback(hospi);
 800fb58:	68f8      	ldr	r0, [r7, #12]
 800fb5a:	f7ff ff05 	bl	800f968 <HAL_OSPI_AbortCpltCallback>
}
 800fb5e:	e005      	b.n	800fb6c <OSPI_DMAAbortCplt+0x70>
    hospi->State = HAL_OSPI_STATE_READY;
 800fb60:	68fb      	ldr	r3, [r7, #12]
 800fb62:	2202      	movs	r2, #2
 800fb64:	655a      	str	r2, [r3, #84]	; 0x54
    HAL_OSPI_ErrorCallback(hospi);
 800fb66:	68f8      	ldr	r0, [r7, #12]
 800fb68:	f7ff fef4 	bl	800f954 <HAL_OSPI_ErrorCallback>
}
 800fb6c:	bf00      	nop
 800fb6e:	3710      	adds	r7, #16
 800fb70:	46bd      	mov	sp, r7
 800fb72:	bd80      	pop	{r7, pc}

0800fb74 <OSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_WaitFlagStateUntilTimeout(OSPI_HandleTypeDef *hospi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 800fb74:	b580      	push	{r7, lr}
 800fb76:	b084      	sub	sp, #16
 800fb78:	af00      	add	r7, sp, #0
 800fb7a:	60f8      	str	r0, [r7, #12]
 800fb7c:	60b9      	str	r1, [r7, #8]
 800fb7e:	603b      	str	r3, [r7, #0]
 800fb80:	4613      	mov	r3, r2
 800fb82:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 800fb84:	e01a      	b.n	800fbbc <OSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800fb86:	69bb      	ldr	r3, [r7, #24]
 800fb88:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fb8c:	d016      	beq.n	800fbbc <OSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800fb8e:	f7fb fcab 	bl	800b4e8 <HAL_GetTick>
 800fb92:	4602      	mov	r2, r0
 800fb94:	683b      	ldr	r3, [r7, #0]
 800fb96:	1ad3      	subs	r3, r2, r3
 800fb98:	69ba      	ldr	r2, [r7, #24]
 800fb9a:	429a      	cmp	r2, r3
 800fb9c:	d302      	bcc.n	800fba4 <OSPI_WaitFlagStateUntilTimeout+0x30>
 800fb9e:	69bb      	ldr	r3, [r7, #24]
 800fba0:	2b00      	cmp	r3, #0
 800fba2:	d10b      	bne.n	800fbbc <OSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hospi->State     = HAL_OSPI_STATE_ERROR;
 800fba4:	68fb      	ldr	r3, [r7, #12]
 800fba6:	f44f 7200 	mov.w	r2, #512	; 0x200
 800fbaa:	655a      	str	r2, [r3, #84]	; 0x54
        hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 800fbac:	68fb      	ldr	r3, [r7, #12]
 800fbae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fbb0:	f043 0201 	orr.w	r2, r3, #1
 800fbb4:	68fb      	ldr	r3, [r7, #12]
 800fbb6:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 800fbb8:	2301      	movs	r3, #1
 800fbba:	e00e      	b.n	800fbda <OSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 800fbbc:	68fb      	ldr	r3, [r7, #12]
 800fbbe:	681b      	ldr	r3, [r3, #0]
 800fbc0:	6a1a      	ldr	r2, [r3, #32]
 800fbc2:	68bb      	ldr	r3, [r7, #8]
 800fbc4:	4013      	ands	r3, r2
 800fbc6:	2b00      	cmp	r3, #0
 800fbc8:	bf14      	ite	ne
 800fbca:	2301      	movne	r3, #1
 800fbcc:	2300      	moveq	r3, #0
 800fbce:	b2db      	uxtb	r3, r3
 800fbd0:	461a      	mov	r2, r3
 800fbd2:	79fb      	ldrb	r3, [r7, #7]
 800fbd4:	429a      	cmp	r2, r3
 800fbd6:	d1d6      	bne.n	800fb86 <OSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800fbd8:	2300      	movs	r3, #0
}
 800fbda:	4618      	mov	r0, r3
 800fbdc:	3710      	adds	r7, #16
 800fbde:	46bd      	mov	sp, r7
 800fbe0:	bd80      	pop	{r7, pc}
	...

0800fbe4 <OSPI_ConfigCmd>:
  * @param  hospi : OSPI handle
  * @param  cmd   : structure that contains the command configuration information
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_ConfigCmd(OSPI_HandleTypeDef *hospi, OSPI_RegularCmdTypeDef *cmd)
{
 800fbe4:	b480      	push	{r7}
 800fbe6:	b089      	sub	sp, #36	; 0x24
 800fbe8:	af00      	add	r7, sp, #0
 800fbea:	6078      	str	r0, [r7, #4]
 800fbec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800fbee:	2300      	movs	r3, #0
 800fbf0:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *tcr_reg;
  __IO uint32_t *ir_reg; 
  __IO uint32_t *abr_reg;

  /* Re-initialize the value of the functional mode */
  MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, 0U);
 800fbf2:	687b      	ldr	r3, [r7, #4]
 800fbf4:	681b      	ldr	r3, [r3, #0]
 800fbf6:	681a      	ldr	r2, [r3, #0]
 800fbf8:	687b      	ldr	r3, [r7, #4]
 800fbfa:	681b      	ldr	r3, [r3, #0]
 800fbfc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800fc00:	601a      	str	r2, [r3, #0]

  /* Configure the flash ID */
  if (hospi->Init.DualQuad == HAL_OSPI_DUALQUAD_DISABLE)
 800fc02:	687b      	ldr	r3, [r7, #4]
 800fc04:	689b      	ldr	r3, [r3, #8]
 800fc06:	2b00      	cmp	r3, #0
 800fc08:	d10a      	bne.n	800fc20 <OSPI_ConfigCmd+0x3c>
  {
    MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FSEL, cmd->FlashId);
 800fc0a:	687b      	ldr	r3, [r7, #4]
 800fc0c:	681b      	ldr	r3, [r3, #0]
 800fc0e:	681b      	ldr	r3, [r3, #0]
 800fc10:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 800fc14:	683b      	ldr	r3, [r7, #0]
 800fc16:	685a      	ldr	r2, [r3, #4]
 800fc18:	687b      	ldr	r3, [r7, #4]
 800fc1a:	681b      	ldr	r3, [r3, #0]
 800fc1c:	430a      	orrs	r2, r1
 800fc1e:	601a      	str	r2, [r3, #0]
  }

  if (cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 800fc20:	683b      	ldr	r3, [r7, #0]
 800fc22:	681b      	ldr	r3, [r3, #0]
 800fc24:	2b02      	cmp	r3, #2
 800fc26:	d114      	bne.n	800fc52 <OSPI_ConfigCmd+0x6e>
  {
    ccr_reg = &(hospi->Instance->WCCR);
 800fc28:	687b      	ldr	r3, [r7, #4]
 800fc2a:	681b      	ldr	r3, [r3, #0]
 800fc2c:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800fc30:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hospi->Instance->WTCR);
 800fc32:	687b      	ldr	r3, [r7, #4]
 800fc34:	681b      	ldr	r3, [r3, #0]
 800fc36:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800fc3a:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hospi->Instance->WIR);
 800fc3c:	687b      	ldr	r3, [r7, #4]
 800fc3e:	681b      	ldr	r3, [r3, #0]
 800fc40:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800fc44:	613b      	str	r3, [r7, #16]
    abr_reg = &(hospi->Instance->WABR);
 800fc46:	687b      	ldr	r3, [r7, #4]
 800fc48:	681b      	ldr	r3, [r3, #0]
 800fc4a:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 800fc4e:	60fb      	str	r3, [r7, #12]
 800fc50:	e02c      	b.n	800fcac <OSPI_ConfigCmd+0xc8>
  }
  else if (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG)
 800fc52:	683b      	ldr	r3, [r7, #0]
 800fc54:	681b      	ldr	r3, [r3, #0]
 800fc56:	2b03      	cmp	r3, #3
 800fc58:	d114      	bne.n	800fc84 <OSPI_ConfigCmd+0xa0>
  {
    ccr_reg = &(hospi->Instance->WPCCR);
 800fc5a:	687b      	ldr	r3, [r7, #4]
 800fc5c:	681b      	ldr	r3, [r3, #0]
 800fc5e:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800fc62:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hospi->Instance->WPTCR);
 800fc64:	687b      	ldr	r3, [r7, #4]
 800fc66:	681b      	ldr	r3, [r3, #0]
 800fc68:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 800fc6c:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hospi->Instance->WPIR);
 800fc6e:	687b      	ldr	r3, [r7, #4]
 800fc70:	681b      	ldr	r3, [r3, #0]
 800fc72:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800fc76:	613b      	str	r3, [r7, #16]
    abr_reg = &(hospi->Instance->WPABR);
 800fc78:	687b      	ldr	r3, [r7, #4]
 800fc7a:	681b      	ldr	r3, [r3, #0]
 800fc7c:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 800fc80:	60fb      	str	r3, [r7, #12]
 800fc82:	e013      	b.n	800fcac <OSPI_ConfigCmd+0xc8>
  }
  else
  {
    ccr_reg = &(hospi->Instance->CCR);
 800fc84:	687b      	ldr	r3, [r7, #4]
 800fc86:	681b      	ldr	r3, [r3, #0]
 800fc88:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800fc8c:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hospi->Instance->TCR);
 800fc8e:	687b      	ldr	r3, [r7, #4]
 800fc90:	681b      	ldr	r3, [r3, #0]
 800fc92:	f503 7384 	add.w	r3, r3, #264	; 0x108
 800fc96:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hospi->Instance->IR);
 800fc98:	687b      	ldr	r3, [r7, #4]
 800fc9a:	681b      	ldr	r3, [r3, #0]
 800fc9c:	f503 7388 	add.w	r3, r3, #272	; 0x110
 800fca0:	613b      	str	r3, [r7, #16]
    abr_reg = &(hospi->Instance->ABR);
 800fca2:	687b      	ldr	r3, [r7, #4]
 800fca4:	681b      	ldr	r3, [r3, #0]
 800fca6:	f503 7390 	add.w	r3, r3, #288	; 0x120
 800fcaa:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CCR register with DQS and SIOO modes */
  *ccr_reg = (cmd->DQSMode | cmd->SIOOMode);
 800fcac:	683b      	ldr	r3, [r7, #0]
 800fcae:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800fcb0:	683b      	ldr	r3, [r7, #0]
 800fcb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800fcb4:	431a      	orrs	r2, r3
 800fcb6:	69bb      	ldr	r3, [r7, #24]
 800fcb8:	601a      	str	r2, [r3, #0]

  if (cmd->AlternateBytesMode != HAL_OSPI_ALTERNATE_BYTES_NONE)
 800fcba:	683b      	ldr	r3, [r7, #0]
 800fcbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fcbe:	2b00      	cmp	r3, #0
 800fcc0:	d012      	beq.n	800fce8 <OSPI_ConfigCmd+0x104>
  {
    /* Configure the ABR register with alternate bytes value */
    *abr_reg = cmd->AlternateBytes;
 800fcc2:	683b      	ldr	r3, [r7, #0]
 800fcc4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800fcc6:	68fb      	ldr	r3, [r7, #12]
 800fcc8:	601a      	str	r2, [r3, #0]

    /* Configure the CCR register with alternate bytes communication parameters */
    MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ABMODE | OCTOSPI_CCR_ABDTR | OCTOSPI_CCR_ABSIZE),
 800fcca:	69bb      	ldr	r3, [r7, #24]
 800fccc:	681b      	ldr	r3, [r3, #0]
 800fcce:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800fcd2:	683b      	ldr	r3, [r7, #0]
 800fcd4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800fcd6:	683b      	ldr	r3, [r7, #0]
 800fcd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fcda:	4319      	orrs	r1, r3
 800fcdc:	683b      	ldr	r3, [r7, #0]
 800fcde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fce0:	430b      	orrs	r3, r1
 800fce2:	431a      	orrs	r2, r3
 800fce4:	69bb      	ldr	r3, [r7, #24]
 800fce6:	601a      	str	r2, [r3, #0]
                           (cmd->AlternateBytesMode | cmd->AlternateBytesDtrMode | cmd->AlternateBytesSize));
  }

  /* Configure the TCR register with the number of dummy cycles */
  MODIFY_REG((*tcr_reg), OCTOSPI_TCR_DCYC, cmd->DummyCycles);
 800fce8:	697b      	ldr	r3, [r7, #20]
 800fcea:	681b      	ldr	r3, [r3, #0]
 800fcec:	f023 021f 	bic.w	r2, r3, #31
 800fcf0:	683b      	ldr	r3, [r7, #0]
 800fcf2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fcf4:	431a      	orrs	r2, r3
 800fcf6:	697b      	ldr	r3, [r7, #20]
 800fcf8:	601a      	str	r2, [r3, #0]

  if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 800fcfa:	683b      	ldr	r3, [r7, #0]
 800fcfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fcfe:	2b00      	cmp	r3, #0
 800fd00:	d009      	beq.n	800fd16 <OSPI_ConfigCmd+0x132>
  {
    if (cmd->OperationType == HAL_OSPI_OPTYPE_COMMON_CFG)
 800fd02:	683b      	ldr	r3, [r7, #0]
 800fd04:	681b      	ldr	r3, [r3, #0]
 800fd06:	2b00      	cmp	r3, #0
 800fd08:	d105      	bne.n	800fd16 <OSPI_ConfigCmd+0x132>
    {
      /* Configure the DLR register with the number of data */
      hospi->Instance->DLR = (cmd->NbData - 1U);
 800fd0a:	683b      	ldr	r3, [r7, #0]
 800fd0c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800fd0e:	687b      	ldr	r3, [r7, #4]
 800fd10:	681b      	ldr	r3, [r3, #0]
 800fd12:	3a01      	subs	r2, #1
 800fd14:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (cmd->InstructionMode != HAL_OSPI_INSTRUCTION_NONE)
 800fd16:	683b      	ldr	r3, [r7, #0]
 800fd18:	68db      	ldr	r3, [r3, #12]
 800fd1a:	2b00      	cmp	r3, #0
 800fd1c:	f000 8095 	beq.w	800fe4a <OSPI_ConfigCmd+0x266>
  {
    if (cmd->AddressMode != HAL_OSPI_ADDRESS_NONE)
 800fd20:	683b      	ldr	r3, [r7, #0]
 800fd22:	69db      	ldr	r3, [r3, #28]
 800fd24:	2b00      	cmp	r3, #0
 800fd26:	d053      	beq.n	800fdd0 <OSPI_ConfigCmd+0x1ec>
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 800fd28:	683b      	ldr	r3, [r7, #0]
 800fd2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fd2c:	2b00      	cmp	r3, #0
 800fd2e:	d01e      	beq.n	800fd6e <OSPI_ConfigCmd+0x18a>
      {
        /* ---- Command with instruction, address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
 800fd30:	69bb      	ldr	r3, [r7, #24]
 800fd32:	681a      	ldr	r2, [r3, #0]
 800fd34:	4b64      	ldr	r3, [pc, #400]	; (800fec8 <OSPI_ConfigCmd+0x2e4>)
 800fd36:	4013      	ands	r3, r2
 800fd38:	683a      	ldr	r2, [r7, #0]
 800fd3a:	68d1      	ldr	r1, [r2, #12]
 800fd3c:	683a      	ldr	r2, [r7, #0]
 800fd3e:	6952      	ldr	r2, [r2, #20]
 800fd40:	4311      	orrs	r1, r2
 800fd42:	683a      	ldr	r2, [r7, #0]
 800fd44:	6912      	ldr	r2, [r2, #16]
 800fd46:	4311      	orrs	r1, r2
 800fd48:	683a      	ldr	r2, [r7, #0]
 800fd4a:	69d2      	ldr	r2, [r2, #28]
 800fd4c:	4311      	orrs	r1, r2
 800fd4e:	683a      	ldr	r2, [r7, #0]
 800fd50:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800fd52:	4311      	orrs	r1, r2
 800fd54:	683a      	ldr	r2, [r7, #0]
 800fd56:	6a12      	ldr	r2, [r2, #32]
 800fd58:	4311      	orrs	r1, r2
 800fd5a:	683a      	ldr	r2, [r7, #0]
 800fd5c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800fd5e:	4311      	orrs	r1, r2
 800fd60:	683a      	ldr	r2, [r7, #0]
 800fd62:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800fd64:	430a      	orrs	r2, r1
 800fd66:	431a      	orrs	r2, r3
 800fd68:	69bb      	ldr	r3, [r7, #24]
 800fd6a:	601a      	str	r2, [r3, #0]
 800fd6c:	e026      	b.n	800fdbc <OSPI_ConfigCmd+0x1d8>
      else
      {
        /* ---- Command with instruction and address ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
 800fd6e:	69bb      	ldr	r3, [r7, #24]
 800fd70:	681a      	ldr	r2, [r3, #0]
 800fd72:	4b56      	ldr	r3, [pc, #344]	; (800fecc <OSPI_ConfigCmd+0x2e8>)
 800fd74:	4013      	ands	r3, r2
 800fd76:	683a      	ldr	r2, [r7, #0]
 800fd78:	68d1      	ldr	r1, [r2, #12]
 800fd7a:	683a      	ldr	r2, [r7, #0]
 800fd7c:	6952      	ldr	r2, [r2, #20]
 800fd7e:	4311      	orrs	r1, r2
 800fd80:	683a      	ldr	r2, [r7, #0]
 800fd82:	6912      	ldr	r2, [r2, #16]
 800fd84:	4311      	orrs	r1, r2
 800fd86:	683a      	ldr	r2, [r7, #0]
 800fd88:	69d2      	ldr	r2, [r2, #28]
 800fd8a:	4311      	orrs	r1, r2
 800fd8c:	683a      	ldr	r2, [r7, #0]
 800fd8e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800fd90:	4311      	orrs	r1, r2
 800fd92:	683a      	ldr	r2, [r7, #0]
 800fd94:	6a12      	ldr	r2, [r2, #32]
 800fd96:	430a      	orrs	r2, r1
 800fd98:	431a      	orrs	r2, r3
 800fd9a:	69bb      	ldr	r3, [r7, #24]
 800fd9c:	601a      	str	r2, [r3, #0]
                                OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE),
                               (cmd->InstructionMode | cmd->InstructionDtrMode | cmd->InstructionSize |
                                cmd->AddressMode     | cmd->AddressDtrMode     | cmd->AddressSize));

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 800fd9e:	687b      	ldr	r3, [r7, #4]
 800fda0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fda2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800fda6:	d109      	bne.n	800fdbc <OSPI_ConfigCmd+0x1d8>
            (cmd->InstructionDtrMode == HAL_OSPI_INSTRUCTION_DTR_ENABLE))
 800fda8:	683b      	ldr	r3, [r7, #0]
 800fdaa:	695b      	ldr	r3, [r3, #20]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 800fdac:	2b08      	cmp	r3, #8
 800fdae:	d105      	bne.n	800fdbc <OSPI_ConfigCmd+0x1d8>
        {
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
 800fdb0:	69bb      	ldr	r3, [r7, #24]
 800fdb2:	681b      	ldr	r3, [r3, #0]
 800fdb4:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800fdb8:	69bb      	ldr	r3, [r7, #24]
 800fdba:	601a      	str	r2, [r3, #0]
        }
      }

      /* Configure the IR register with the instruction value */
      *ir_reg = cmd->Instruction;
 800fdbc:	683b      	ldr	r3, [r7, #0]
 800fdbe:	689a      	ldr	r2, [r3, #8]
 800fdc0:	693b      	ldr	r3, [r7, #16]
 800fdc2:	601a      	str	r2, [r3, #0]

      /* Configure the AR register with the address value */
      hospi->Instance->AR = cmd->Address;
 800fdc4:	687b      	ldr	r3, [r7, #4]
 800fdc6:	681b      	ldr	r3, [r3, #0]
 800fdc8:	683a      	ldr	r2, [r7, #0]
 800fdca:	6992      	ldr	r2, [r2, #24]
 800fdcc:	649a      	str	r2, [r3, #72]	; 0x48
 800fdce:	e074      	b.n	800feba <OSPI_ConfigCmd+0x2d6>
    }
    else
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 800fdd0:	683b      	ldr	r3, [r7, #0]
 800fdd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fdd4:	2b00      	cmp	r3, #0
 800fdd6:	d015      	beq.n	800fe04 <OSPI_ConfigCmd+0x220>
      {
        /* ---- Command with instruction and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE | OCTOSPI_CCR_IDTR | OCTOSPI_CCR_ISIZE |
 800fdd8:	69bb      	ldr	r3, [r7, #24]
 800fdda:	681a      	ldr	r2, [r3, #0]
 800fddc:	4b3c      	ldr	r3, [pc, #240]	; (800fed0 <OSPI_ConfigCmd+0x2ec>)
 800fdde:	4013      	ands	r3, r2
 800fde0:	683a      	ldr	r2, [r7, #0]
 800fde2:	68d1      	ldr	r1, [r2, #12]
 800fde4:	683a      	ldr	r2, [r7, #0]
 800fde6:	6952      	ldr	r2, [r2, #20]
 800fde8:	4311      	orrs	r1, r2
 800fdea:	683a      	ldr	r2, [r7, #0]
 800fdec:	6912      	ldr	r2, [r2, #16]
 800fdee:	4311      	orrs	r1, r2
 800fdf0:	683a      	ldr	r2, [r7, #0]
 800fdf2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800fdf4:	4311      	orrs	r1, r2
 800fdf6:	683a      	ldr	r2, [r7, #0]
 800fdf8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800fdfa:	430a      	orrs	r2, r1
 800fdfc:	431a      	orrs	r2, r3
 800fdfe:	69bb      	ldr	r3, [r7, #24]
 800fe00:	601a      	str	r2, [r3, #0]
 800fe02:	e01d      	b.n	800fe40 <OSPI_ConfigCmd+0x25c>
      else
      {
        /* ---- Command with only instruction ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE | OCTOSPI_CCR_IDTR | OCTOSPI_CCR_ISIZE),
 800fe04:	69bb      	ldr	r3, [r7, #24]
 800fe06:	681b      	ldr	r3, [r3, #0]
 800fe08:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800fe0c:	683b      	ldr	r3, [r7, #0]
 800fe0e:	68d9      	ldr	r1, [r3, #12]
 800fe10:	683b      	ldr	r3, [r7, #0]
 800fe12:	695b      	ldr	r3, [r3, #20]
 800fe14:	4319      	orrs	r1, r3
 800fe16:	683b      	ldr	r3, [r7, #0]
 800fe18:	691b      	ldr	r3, [r3, #16]
 800fe1a:	430b      	orrs	r3, r1
 800fe1c:	431a      	orrs	r2, r3
 800fe1e:	69bb      	ldr	r3, [r7, #24]
 800fe20:	601a      	str	r2, [r3, #0]
                               (cmd->InstructionMode | cmd->InstructionDtrMode | cmd->InstructionSize));

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 800fe22:	687b      	ldr	r3, [r7, #4]
 800fe24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fe26:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800fe2a:	d109      	bne.n	800fe40 <OSPI_ConfigCmd+0x25c>
            (cmd->InstructionDtrMode == HAL_OSPI_INSTRUCTION_DTR_ENABLE))
 800fe2c:	683b      	ldr	r3, [r7, #0]
 800fe2e:	695b      	ldr	r3, [r3, #20]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 800fe30:	2b08      	cmp	r3, #8
 800fe32:	d105      	bne.n	800fe40 <OSPI_ConfigCmd+0x25c>
        {
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
 800fe34:	69bb      	ldr	r3, [r7, #24]
 800fe36:	681b      	ldr	r3, [r3, #0]
 800fe38:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800fe3c:	69bb      	ldr	r3, [r7, #24]
 800fe3e:	601a      	str	r2, [r3, #0]
        }
      }

      /* Configure the IR register with the instruction value */
      *ir_reg = cmd->Instruction;
 800fe40:	683b      	ldr	r3, [r7, #0]
 800fe42:	689a      	ldr	r2, [r3, #8]
 800fe44:	693b      	ldr	r3, [r7, #16]
 800fe46:	601a      	str	r2, [r3, #0]
 800fe48:	e037      	b.n	800feba <OSPI_ConfigCmd+0x2d6>

    }
  }
  else
  {
    if (cmd->AddressMode != HAL_OSPI_ADDRESS_NONE)
 800fe4a:	683b      	ldr	r3, [r7, #0]
 800fe4c:	69db      	ldr	r3, [r3, #28]
 800fe4e:	2b00      	cmp	r3, #0
 800fe50:	d02e      	beq.n	800feb0 <OSPI_ConfigCmd+0x2cc>
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 800fe52:	683b      	ldr	r3, [r7, #0]
 800fe54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fe56:	2b00      	cmp	r3, #0
 800fe58:	d015      	beq.n	800fe86 <OSPI_ConfigCmd+0x2a2>
      {
        /* ---- Command with address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE |
 800fe5a:	69bb      	ldr	r3, [r7, #24]
 800fe5c:	681a      	ldr	r2, [r3, #0]
 800fe5e:	4b1d      	ldr	r3, [pc, #116]	; (800fed4 <OSPI_ConfigCmd+0x2f0>)
 800fe60:	4013      	ands	r3, r2
 800fe62:	683a      	ldr	r2, [r7, #0]
 800fe64:	69d1      	ldr	r1, [r2, #28]
 800fe66:	683a      	ldr	r2, [r7, #0]
 800fe68:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800fe6a:	4311      	orrs	r1, r2
 800fe6c:	683a      	ldr	r2, [r7, #0]
 800fe6e:	6a12      	ldr	r2, [r2, #32]
 800fe70:	4311      	orrs	r1, r2
 800fe72:	683a      	ldr	r2, [r7, #0]
 800fe74:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800fe76:	4311      	orrs	r1, r2
 800fe78:	683a      	ldr	r2, [r7, #0]
 800fe7a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800fe7c:	430a      	orrs	r2, r1
 800fe7e:	431a      	orrs	r2, r3
 800fe80:	69bb      	ldr	r3, [r7, #24]
 800fe82:	601a      	str	r2, [r3, #0]
 800fe84:	e00e      	b.n	800fea4 <OSPI_ConfigCmd+0x2c0>
      else
      {
        /* ---- Command with only address ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE),
 800fe86:	69bb      	ldr	r3, [r7, #24]
 800fe88:	681b      	ldr	r3, [r3, #0]
 800fe8a:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800fe8e:	683b      	ldr	r3, [r7, #0]
 800fe90:	69d9      	ldr	r1, [r3, #28]
 800fe92:	683b      	ldr	r3, [r7, #0]
 800fe94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fe96:	4319      	orrs	r1, r3
 800fe98:	683b      	ldr	r3, [r7, #0]
 800fe9a:	6a1b      	ldr	r3, [r3, #32]
 800fe9c:	430b      	orrs	r3, r1
 800fe9e:	431a      	orrs	r2, r3
 800fea0:	69bb      	ldr	r3, [r7, #24]
 800fea2:	601a      	str	r2, [r3, #0]
                               (cmd->AddressMode | cmd->AddressDtrMode | cmd->AddressSize));
      }

      /* Configure the AR register with the instruction value */
      hospi->Instance->AR = cmd->Address;
 800fea4:	687b      	ldr	r3, [r7, #4]
 800fea6:	681b      	ldr	r3, [r3, #0]
 800fea8:	683a      	ldr	r2, [r7, #0]
 800feaa:	6992      	ldr	r2, [r2, #24]
 800feac:	649a      	str	r2, [r3, #72]	; 0x48
 800feae:	e004      	b.n	800feba <OSPI_ConfigCmd+0x2d6>
    }
    else
    {
      /* ---- Invalid command configuration (no instruction, no address) ---- */
      status = HAL_ERROR;
 800feb0:	2301      	movs	r3, #1
 800feb2:	77fb      	strb	r3, [r7, #31]
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 800feb4:	687b      	ldr	r3, [r7, #4]
 800feb6:	2208      	movs	r2, #8
 800feb8:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }

  /* Return function status */
  return status;
 800feba:	7ffb      	ldrb	r3, [r7, #31]
}
 800febc:	4618      	mov	r0, r3
 800febe:	3724      	adds	r7, #36	; 0x24
 800fec0:	46bd      	mov	sp, r7
 800fec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fec6:	4770      	bx	lr
 800fec8:	f0ffc0c0 	.word	0xf0ffc0c0
 800fecc:	ffffc0c0 	.word	0xffffc0c0
 800fed0:	f0ffffc0 	.word	0xf0ffffc0
 800fed4:	f0ffc0ff 	.word	0xf0ffc0ff

0800fed8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800fed8:	b580      	push	{r7, lr}
 800feda:	b084      	sub	sp, #16
 800fedc:	af00      	add	r7, sp, #0
 800fede:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 800fee0:	4b29      	ldr	r3, [pc, #164]	; (800ff88 <HAL_PWREx_ConfigSupply+0xb0>)
 800fee2:	68db      	ldr	r3, [r3, #12]
 800fee4:	f003 0307 	and.w	r3, r3, #7
 800fee8:	2b06      	cmp	r3, #6
 800feea:	d00a      	beq.n	800ff02 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800feec:	4b26      	ldr	r3, [pc, #152]	; (800ff88 <HAL_PWREx_ConfigSupply+0xb0>)
 800feee:	68db      	ldr	r3, [r3, #12]
 800fef0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800fef4:	687a      	ldr	r2, [r7, #4]
 800fef6:	429a      	cmp	r2, r3
 800fef8:	d001      	beq.n	800fefe <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800fefa:	2301      	movs	r3, #1
 800fefc:	e040      	b.n	800ff80 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800fefe:	2300      	movs	r3, #0
 800ff00:	e03e      	b.n	800ff80 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800ff02:	4b21      	ldr	r3, [pc, #132]	; (800ff88 <HAL_PWREx_ConfigSupply+0xb0>)
 800ff04:	68db      	ldr	r3, [r3, #12]
 800ff06:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800ff0a:	491f      	ldr	r1, [pc, #124]	; (800ff88 <HAL_PWREx_ConfigSupply+0xb0>)
 800ff0c:	687b      	ldr	r3, [r7, #4]
 800ff0e:	4313      	orrs	r3, r2
 800ff10:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800ff12:	f7fb fae9 	bl	800b4e8 <HAL_GetTick>
 800ff16:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800ff18:	e009      	b.n	800ff2e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800ff1a:	f7fb fae5 	bl	800b4e8 <HAL_GetTick>
 800ff1e:	4602      	mov	r2, r0
 800ff20:	68fb      	ldr	r3, [r7, #12]
 800ff22:	1ad3      	subs	r3, r2, r3
 800ff24:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ff28:	d901      	bls.n	800ff2e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800ff2a:	2301      	movs	r3, #1
 800ff2c:	e028      	b.n	800ff80 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800ff2e:	4b16      	ldr	r3, [pc, #88]	; (800ff88 <HAL_PWREx_ConfigSupply+0xb0>)
 800ff30:	685b      	ldr	r3, [r3, #4]
 800ff32:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800ff36:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ff3a:	d1ee      	bne.n	800ff1a <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 800ff3c:	687b      	ldr	r3, [r7, #4]
 800ff3e:	2b1e      	cmp	r3, #30
 800ff40:	d008      	beq.n	800ff54 <HAL_PWREx_ConfigSupply+0x7c>
 800ff42:	687b      	ldr	r3, [r7, #4]
 800ff44:	2b2e      	cmp	r3, #46	; 0x2e
 800ff46:	d005      	beq.n	800ff54 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 800ff48:	687b      	ldr	r3, [r7, #4]
 800ff4a:	2b1d      	cmp	r3, #29
 800ff4c:	d002      	beq.n	800ff54 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800ff4e:	687b      	ldr	r3, [r7, #4]
 800ff50:	2b2d      	cmp	r3, #45	; 0x2d
 800ff52:	d114      	bne.n	800ff7e <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 800ff54:	f7fb fac8 	bl	800b4e8 <HAL_GetTick>
 800ff58:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800ff5a:	e009      	b.n	800ff70 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800ff5c:	f7fb fac4 	bl	800b4e8 <HAL_GetTick>
 800ff60:	4602      	mov	r2, r0
 800ff62:	68fb      	ldr	r3, [r7, #12]
 800ff64:	1ad3      	subs	r3, r2, r3
 800ff66:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ff6a:	d901      	bls.n	800ff70 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 800ff6c:	2301      	movs	r3, #1
 800ff6e:	e007      	b.n	800ff80 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800ff70:	4b05      	ldr	r3, [pc, #20]	; (800ff88 <HAL_PWREx_ConfigSupply+0xb0>)
 800ff72:	68db      	ldr	r3, [r3, #12]
 800ff74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ff78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ff7c:	d1ee      	bne.n	800ff5c <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800ff7e:	2300      	movs	r3, #0
}
 800ff80:	4618      	mov	r0, r3
 800ff82:	3710      	adds	r7, #16
 800ff84:	46bd      	mov	sp, r7
 800ff86:	bd80      	pop	{r7, pc}
 800ff88:	58024800 	.word	0x58024800

0800ff8c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800ff8c:	b580      	push	{r7, lr}
 800ff8e:	b08c      	sub	sp, #48	; 0x30
 800ff90:	af00      	add	r7, sp, #0
 800ff92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800ff94:	687b      	ldr	r3, [r7, #4]
 800ff96:	2b00      	cmp	r3, #0
 800ff98:	d101      	bne.n	800ff9e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800ff9a:	2301      	movs	r3, #1
 800ff9c:	e3d7      	b.n	801074e <HAL_RCC_OscConfig+0x7c2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800ff9e:	687b      	ldr	r3, [r7, #4]
 800ffa0:	681b      	ldr	r3, [r3, #0]
 800ffa2:	f003 0301 	and.w	r3, r3, #1
 800ffa6:	2b00      	cmp	r3, #0
 800ffa8:	f000 80b3 	beq.w	8010112 <HAL_RCC_OscConfig+0x186>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800ffac:	4b90      	ldr	r3, [pc, #576]	; (80101f0 <HAL_RCC_OscConfig+0x264>)
 800ffae:	691b      	ldr	r3, [r3, #16]
 800ffb0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ffb4:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800ffb6:	4b8e      	ldr	r3, [pc, #568]	; (80101f0 <HAL_RCC_OscConfig+0x264>)
 800ffb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ffba:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800ffbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ffbe:	2b10      	cmp	r3, #16
 800ffc0:	d007      	beq.n	800ffd2 <HAL_RCC_OscConfig+0x46>
 800ffc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ffc4:	2b18      	cmp	r3, #24
 800ffc6:	d112      	bne.n	800ffee <HAL_RCC_OscConfig+0x62>
 800ffc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ffca:	f003 0303 	and.w	r3, r3, #3
 800ffce:	2b02      	cmp	r3, #2
 800ffd0:	d10d      	bne.n	800ffee <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ffd2:	4b87      	ldr	r3, [pc, #540]	; (80101f0 <HAL_RCC_OscConfig+0x264>)
 800ffd4:	681b      	ldr	r3, [r3, #0]
 800ffd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ffda:	2b00      	cmp	r3, #0
 800ffdc:	f000 8098 	beq.w	8010110 <HAL_RCC_OscConfig+0x184>
 800ffe0:	687b      	ldr	r3, [r7, #4]
 800ffe2:	685b      	ldr	r3, [r3, #4]
 800ffe4:	2b00      	cmp	r3, #0
 800ffe6:	f040 8093 	bne.w	8010110 <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 800ffea:	2301      	movs	r3, #1
 800ffec:	e3af      	b.n	801074e <HAL_RCC_OscConfig+0x7c2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800ffee:	687b      	ldr	r3, [r7, #4]
 800fff0:	685b      	ldr	r3, [r3, #4]
 800fff2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fff6:	d106      	bne.n	8010006 <HAL_RCC_OscConfig+0x7a>
 800fff8:	4b7d      	ldr	r3, [pc, #500]	; (80101f0 <HAL_RCC_OscConfig+0x264>)
 800fffa:	681b      	ldr	r3, [r3, #0]
 800fffc:	4a7c      	ldr	r2, [pc, #496]	; (80101f0 <HAL_RCC_OscConfig+0x264>)
 800fffe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8010002:	6013      	str	r3, [r2, #0]
 8010004:	e058      	b.n	80100b8 <HAL_RCC_OscConfig+0x12c>
 8010006:	687b      	ldr	r3, [r7, #4]
 8010008:	685b      	ldr	r3, [r3, #4]
 801000a:	2b00      	cmp	r3, #0
 801000c:	d112      	bne.n	8010034 <HAL_RCC_OscConfig+0xa8>
 801000e:	4b78      	ldr	r3, [pc, #480]	; (80101f0 <HAL_RCC_OscConfig+0x264>)
 8010010:	681b      	ldr	r3, [r3, #0]
 8010012:	4a77      	ldr	r2, [pc, #476]	; (80101f0 <HAL_RCC_OscConfig+0x264>)
 8010014:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8010018:	6013      	str	r3, [r2, #0]
 801001a:	4b75      	ldr	r3, [pc, #468]	; (80101f0 <HAL_RCC_OscConfig+0x264>)
 801001c:	681b      	ldr	r3, [r3, #0]
 801001e:	4a74      	ldr	r2, [pc, #464]	; (80101f0 <HAL_RCC_OscConfig+0x264>)
 8010020:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8010024:	6013      	str	r3, [r2, #0]
 8010026:	4b72      	ldr	r3, [pc, #456]	; (80101f0 <HAL_RCC_OscConfig+0x264>)
 8010028:	681b      	ldr	r3, [r3, #0]
 801002a:	4a71      	ldr	r2, [pc, #452]	; (80101f0 <HAL_RCC_OscConfig+0x264>)
 801002c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8010030:	6013      	str	r3, [r2, #0]
 8010032:	e041      	b.n	80100b8 <HAL_RCC_OscConfig+0x12c>
 8010034:	687b      	ldr	r3, [r7, #4]
 8010036:	685b      	ldr	r3, [r3, #4]
 8010038:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 801003c:	d112      	bne.n	8010064 <HAL_RCC_OscConfig+0xd8>
 801003e:	4b6c      	ldr	r3, [pc, #432]	; (80101f0 <HAL_RCC_OscConfig+0x264>)
 8010040:	681b      	ldr	r3, [r3, #0]
 8010042:	4a6b      	ldr	r2, [pc, #428]	; (80101f0 <HAL_RCC_OscConfig+0x264>)
 8010044:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8010048:	6013      	str	r3, [r2, #0]
 801004a:	4b69      	ldr	r3, [pc, #420]	; (80101f0 <HAL_RCC_OscConfig+0x264>)
 801004c:	681b      	ldr	r3, [r3, #0]
 801004e:	4a68      	ldr	r2, [pc, #416]	; (80101f0 <HAL_RCC_OscConfig+0x264>)
 8010050:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8010054:	6013      	str	r3, [r2, #0]
 8010056:	4b66      	ldr	r3, [pc, #408]	; (80101f0 <HAL_RCC_OscConfig+0x264>)
 8010058:	681b      	ldr	r3, [r3, #0]
 801005a:	4a65      	ldr	r2, [pc, #404]	; (80101f0 <HAL_RCC_OscConfig+0x264>)
 801005c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8010060:	6013      	str	r3, [r2, #0]
 8010062:	e029      	b.n	80100b8 <HAL_RCC_OscConfig+0x12c>
 8010064:	687b      	ldr	r3, [r7, #4]
 8010066:	685b      	ldr	r3, [r3, #4]
 8010068:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 801006c:	d112      	bne.n	8010094 <HAL_RCC_OscConfig+0x108>
 801006e:	4b60      	ldr	r3, [pc, #384]	; (80101f0 <HAL_RCC_OscConfig+0x264>)
 8010070:	681b      	ldr	r3, [r3, #0]
 8010072:	4a5f      	ldr	r2, [pc, #380]	; (80101f0 <HAL_RCC_OscConfig+0x264>)
 8010074:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8010078:	6013      	str	r3, [r2, #0]
 801007a:	4b5d      	ldr	r3, [pc, #372]	; (80101f0 <HAL_RCC_OscConfig+0x264>)
 801007c:	681b      	ldr	r3, [r3, #0]
 801007e:	4a5c      	ldr	r2, [pc, #368]	; (80101f0 <HAL_RCC_OscConfig+0x264>)
 8010080:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8010084:	6013      	str	r3, [r2, #0]
 8010086:	4b5a      	ldr	r3, [pc, #360]	; (80101f0 <HAL_RCC_OscConfig+0x264>)
 8010088:	681b      	ldr	r3, [r3, #0]
 801008a:	4a59      	ldr	r2, [pc, #356]	; (80101f0 <HAL_RCC_OscConfig+0x264>)
 801008c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8010090:	6013      	str	r3, [r2, #0]
 8010092:	e011      	b.n	80100b8 <HAL_RCC_OscConfig+0x12c>
 8010094:	4b56      	ldr	r3, [pc, #344]	; (80101f0 <HAL_RCC_OscConfig+0x264>)
 8010096:	681b      	ldr	r3, [r3, #0]
 8010098:	4a55      	ldr	r2, [pc, #340]	; (80101f0 <HAL_RCC_OscConfig+0x264>)
 801009a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801009e:	6013      	str	r3, [r2, #0]
 80100a0:	4b53      	ldr	r3, [pc, #332]	; (80101f0 <HAL_RCC_OscConfig+0x264>)
 80100a2:	681b      	ldr	r3, [r3, #0]
 80100a4:	4a52      	ldr	r2, [pc, #328]	; (80101f0 <HAL_RCC_OscConfig+0x264>)
 80100a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80100aa:	6013      	str	r3, [r2, #0]
 80100ac:	4b50      	ldr	r3, [pc, #320]	; (80101f0 <HAL_RCC_OscConfig+0x264>)
 80100ae:	681b      	ldr	r3, [r3, #0]
 80100b0:	4a4f      	ldr	r2, [pc, #316]	; (80101f0 <HAL_RCC_OscConfig+0x264>)
 80100b2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80100b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80100b8:	687b      	ldr	r3, [r7, #4]
 80100ba:	685b      	ldr	r3, [r3, #4]
 80100bc:	2b00      	cmp	r3, #0
 80100be:	d013      	beq.n	80100e8 <HAL_RCC_OscConfig+0x15c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80100c0:	f7fb fa12 	bl	800b4e8 <HAL_GetTick>
 80100c4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80100c6:	e008      	b.n	80100da <HAL_RCC_OscConfig+0x14e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80100c8:	f7fb fa0e 	bl	800b4e8 <HAL_GetTick>
 80100cc:	4602      	mov	r2, r0
 80100ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100d0:	1ad3      	subs	r3, r2, r3
 80100d2:	2b64      	cmp	r3, #100	; 0x64
 80100d4:	d901      	bls.n	80100da <HAL_RCC_OscConfig+0x14e>
          {
            return HAL_TIMEOUT;
 80100d6:	2303      	movs	r3, #3
 80100d8:	e339      	b.n	801074e <HAL_RCC_OscConfig+0x7c2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80100da:	4b45      	ldr	r3, [pc, #276]	; (80101f0 <HAL_RCC_OscConfig+0x264>)
 80100dc:	681b      	ldr	r3, [r3, #0]
 80100de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80100e2:	2b00      	cmp	r3, #0
 80100e4:	d0f0      	beq.n	80100c8 <HAL_RCC_OscConfig+0x13c>
 80100e6:	e014      	b.n	8010112 <HAL_RCC_OscConfig+0x186>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80100e8:	f7fb f9fe 	bl	800b4e8 <HAL_GetTick>
 80100ec:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80100ee:	e008      	b.n	8010102 <HAL_RCC_OscConfig+0x176>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80100f0:	f7fb f9fa 	bl	800b4e8 <HAL_GetTick>
 80100f4:	4602      	mov	r2, r0
 80100f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100f8:	1ad3      	subs	r3, r2, r3
 80100fa:	2b64      	cmp	r3, #100	; 0x64
 80100fc:	d901      	bls.n	8010102 <HAL_RCC_OscConfig+0x176>
          {
            return HAL_TIMEOUT;
 80100fe:	2303      	movs	r3, #3
 8010100:	e325      	b.n	801074e <HAL_RCC_OscConfig+0x7c2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8010102:	4b3b      	ldr	r3, [pc, #236]	; (80101f0 <HAL_RCC_OscConfig+0x264>)
 8010104:	681b      	ldr	r3, [r3, #0]
 8010106:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801010a:	2b00      	cmp	r3, #0
 801010c:	d1f0      	bne.n	80100f0 <HAL_RCC_OscConfig+0x164>
 801010e:	e000      	b.n	8010112 <HAL_RCC_OscConfig+0x186>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8010110:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8010112:	687b      	ldr	r3, [r7, #4]
 8010114:	681b      	ldr	r3, [r3, #0]
 8010116:	f003 0302 	and.w	r3, r3, #2
 801011a:	2b00      	cmp	r3, #0
 801011c:	d070      	beq.n	8010200 <HAL_RCC_OscConfig+0x274>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 801011e:	4b34      	ldr	r3, [pc, #208]	; (80101f0 <HAL_RCC_OscConfig+0x264>)
 8010120:	691b      	ldr	r3, [r3, #16]
 8010122:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8010126:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8010128:	4b31      	ldr	r3, [pc, #196]	; (80101f0 <HAL_RCC_OscConfig+0x264>)
 801012a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801012c:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 801012e:	6a3b      	ldr	r3, [r7, #32]
 8010130:	2b00      	cmp	r3, #0
 8010132:	d007      	beq.n	8010144 <HAL_RCC_OscConfig+0x1b8>
 8010134:	6a3b      	ldr	r3, [r7, #32]
 8010136:	2b18      	cmp	r3, #24
 8010138:	d11b      	bne.n	8010172 <HAL_RCC_OscConfig+0x1e6>
 801013a:	69fb      	ldr	r3, [r7, #28]
 801013c:	f003 0303 	and.w	r3, r3, #3
 8010140:	2b00      	cmp	r3, #0
 8010142:	d116      	bne.n	8010172 <HAL_RCC_OscConfig+0x1e6>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8010144:	4b2a      	ldr	r3, [pc, #168]	; (80101f0 <HAL_RCC_OscConfig+0x264>)
 8010146:	681b      	ldr	r3, [r3, #0]
 8010148:	f003 0304 	and.w	r3, r3, #4
 801014c:	2b00      	cmp	r3, #0
 801014e:	d005      	beq.n	801015c <HAL_RCC_OscConfig+0x1d0>
 8010150:	687b      	ldr	r3, [r7, #4]
 8010152:	68db      	ldr	r3, [r3, #12]
 8010154:	2b00      	cmp	r3, #0
 8010156:	d101      	bne.n	801015c <HAL_RCC_OscConfig+0x1d0>
      {
        return HAL_ERROR;
 8010158:	2301      	movs	r3, #1
 801015a:	e2f8      	b.n	801074e <HAL_RCC_OscConfig+0x7c2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801015c:	4b24      	ldr	r3, [pc, #144]	; (80101f0 <HAL_RCC_OscConfig+0x264>)
 801015e:	685b      	ldr	r3, [r3, #4]
 8010160:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8010164:	687b      	ldr	r3, [r7, #4]
 8010166:	691b      	ldr	r3, [r3, #16]
 8010168:	061b      	lsls	r3, r3, #24
 801016a:	4921      	ldr	r1, [pc, #132]	; (80101f0 <HAL_RCC_OscConfig+0x264>)
 801016c:	4313      	orrs	r3, r2
 801016e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8010170:	e046      	b.n	8010200 <HAL_RCC_OscConfig+0x274>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8010172:	687b      	ldr	r3, [r7, #4]
 8010174:	68db      	ldr	r3, [r3, #12]
 8010176:	2b00      	cmp	r3, #0
 8010178:	d026      	beq.n	80101c8 <HAL_RCC_OscConfig+0x23c>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 801017a:	4b1d      	ldr	r3, [pc, #116]	; (80101f0 <HAL_RCC_OscConfig+0x264>)
 801017c:	681b      	ldr	r3, [r3, #0]
 801017e:	f023 0219 	bic.w	r2, r3, #25
 8010182:	687b      	ldr	r3, [r7, #4]
 8010184:	68db      	ldr	r3, [r3, #12]
 8010186:	491a      	ldr	r1, [pc, #104]	; (80101f0 <HAL_RCC_OscConfig+0x264>)
 8010188:	4313      	orrs	r3, r2
 801018a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801018c:	f7fb f9ac 	bl	800b4e8 <HAL_GetTick>
 8010190:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8010192:	e008      	b.n	80101a6 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8010194:	f7fb f9a8 	bl	800b4e8 <HAL_GetTick>
 8010198:	4602      	mov	r2, r0
 801019a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801019c:	1ad3      	subs	r3, r2, r3
 801019e:	2b02      	cmp	r3, #2
 80101a0:	d901      	bls.n	80101a6 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 80101a2:	2303      	movs	r3, #3
 80101a4:	e2d3      	b.n	801074e <HAL_RCC_OscConfig+0x7c2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80101a6:	4b12      	ldr	r3, [pc, #72]	; (80101f0 <HAL_RCC_OscConfig+0x264>)
 80101a8:	681b      	ldr	r3, [r3, #0]
 80101aa:	f003 0304 	and.w	r3, r3, #4
 80101ae:	2b00      	cmp	r3, #0
 80101b0:	d0f0      	beq.n	8010194 <HAL_RCC_OscConfig+0x208>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80101b2:	4b0f      	ldr	r3, [pc, #60]	; (80101f0 <HAL_RCC_OscConfig+0x264>)
 80101b4:	685b      	ldr	r3, [r3, #4]
 80101b6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80101ba:	687b      	ldr	r3, [r7, #4]
 80101bc:	691b      	ldr	r3, [r3, #16]
 80101be:	061b      	lsls	r3, r3, #24
 80101c0:	490b      	ldr	r1, [pc, #44]	; (80101f0 <HAL_RCC_OscConfig+0x264>)
 80101c2:	4313      	orrs	r3, r2
 80101c4:	604b      	str	r3, [r1, #4]
 80101c6:	e01b      	b.n	8010200 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80101c8:	4b09      	ldr	r3, [pc, #36]	; (80101f0 <HAL_RCC_OscConfig+0x264>)
 80101ca:	681b      	ldr	r3, [r3, #0]
 80101cc:	4a08      	ldr	r2, [pc, #32]	; (80101f0 <HAL_RCC_OscConfig+0x264>)
 80101ce:	f023 0301 	bic.w	r3, r3, #1
 80101d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80101d4:	f7fb f988 	bl	800b4e8 <HAL_GetTick>
 80101d8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80101da:	e00b      	b.n	80101f4 <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80101dc:	f7fb f984 	bl	800b4e8 <HAL_GetTick>
 80101e0:	4602      	mov	r2, r0
 80101e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101e4:	1ad3      	subs	r3, r2, r3
 80101e6:	2b02      	cmp	r3, #2
 80101e8:	d904      	bls.n	80101f4 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 80101ea:	2303      	movs	r3, #3
 80101ec:	e2af      	b.n	801074e <HAL_RCC_OscConfig+0x7c2>
 80101ee:	bf00      	nop
 80101f0:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80101f4:	4b99      	ldr	r3, [pc, #612]	; (801045c <HAL_RCC_OscConfig+0x4d0>)
 80101f6:	681b      	ldr	r3, [r3, #0]
 80101f8:	f003 0304 	and.w	r3, r3, #4
 80101fc:	2b00      	cmp	r3, #0
 80101fe:	d1ed      	bne.n	80101dc <HAL_RCC_OscConfig+0x250>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8010200:	687b      	ldr	r3, [r7, #4]
 8010202:	681b      	ldr	r3, [r3, #0]
 8010204:	f003 0310 	and.w	r3, r3, #16
 8010208:	2b00      	cmp	r3, #0
 801020a:	d06a      	beq.n	80102e2 <HAL_RCC_OscConfig+0x356>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 801020c:	4b93      	ldr	r3, [pc, #588]	; (801045c <HAL_RCC_OscConfig+0x4d0>)
 801020e:	691b      	ldr	r3, [r3, #16]
 8010210:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8010214:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8010216:	4b91      	ldr	r3, [pc, #580]	; (801045c <HAL_RCC_OscConfig+0x4d0>)
 8010218:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801021a:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 801021c:	69bb      	ldr	r3, [r7, #24]
 801021e:	2b08      	cmp	r3, #8
 8010220:	d007      	beq.n	8010232 <HAL_RCC_OscConfig+0x2a6>
 8010222:	69bb      	ldr	r3, [r7, #24]
 8010224:	2b18      	cmp	r3, #24
 8010226:	d11b      	bne.n	8010260 <HAL_RCC_OscConfig+0x2d4>
 8010228:	697b      	ldr	r3, [r7, #20]
 801022a:	f003 0303 	and.w	r3, r3, #3
 801022e:	2b01      	cmp	r3, #1
 8010230:	d116      	bne.n	8010260 <HAL_RCC_OscConfig+0x2d4>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8010232:	4b8a      	ldr	r3, [pc, #552]	; (801045c <HAL_RCC_OscConfig+0x4d0>)
 8010234:	681b      	ldr	r3, [r3, #0]
 8010236:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801023a:	2b00      	cmp	r3, #0
 801023c:	d005      	beq.n	801024a <HAL_RCC_OscConfig+0x2be>
 801023e:	687b      	ldr	r3, [r7, #4]
 8010240:	69db      	ldr	r3, [r3, #28]
 8010242:	2b80      	cmp	r3, #128	; 0x80
 8010244:	d001      	beq.n	801024a <HAL_RCC_OscConfig+0x2be>
      {
        return HAL_ERROR;
 8010246:	2301      	movs	r3, #1
 8010248:	e281      	b.n	801074e <HAL_RCC_OscConfig+0x7c2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 801024a:	4b84      	ldr	r3, [pc, #528]	; (801045c <HAL_RCC_OscConfig+0x4d0>)
 801024c:	68db      	ldr	r3, [r3, #12]
 801024e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8010252:	687b      	ldr	r3, [r7, #4]
 8010254:	6a1b      	ldr	r3, [r3, #32]
 8010256:	061b      	lsls	r3, r3, #24
 8010258:	4980      	ldr	r1, [pc, #512]	; (801045c <HAL_RCC_OscConfig+0x4d0>)
 801025a:	4313      	orrs	r3, r2
 801025c:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 801025e:	e040      	b.n	80102e2 <HAL_RCC_OscConfig+0x356>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8010260:	687b      	ldr	r3, [r7, #4]
 8010262:	69db      	ldr	r3, [r3, #28]
 8010264:	2b00      	cmp	r3, #0
 8010266:	d023      	beq.n	80102b0 <HAL_RCC_OscConfig+0x324>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8010268:	4b7c      	ldr	r3, [pc, #496]	; (801045c <HAL_RCC_OscConfig+0x4d0>)
 801026a:	681b      	ldr	r3, [r3, #0]
 801026c:	4a7b      	ldr	r2, [pc, #492]	; (801045c <HAL_RCC_OscConfig+0x4d0>)
 801026e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010272:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8010274:	f7fb f938 	bl	800b4e8 <HAL_GetTick>
 8010278:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 801027a:	e008      	b.n	801028e <HAL_RCC_OscConfig+0x302>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 801027c:	f7fb f934 	bl	800b4e8 <HAL_GetTick>
 8010280:	4602      	mov	r2, r0
 8010282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010284:	1ad3      	subs	r3, r2, r3
 8010286:	2b02      	cmp	r3, #2
 8010288:	d901      	bls.n	801028e <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 801028a:	2303      	movs	r3, #3
 801028c:	e25f      	b.n	801074e <HAL_RCC_OscConfig+0x7c2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 801028e:	4b73      	ldr	r3, [pc, #460]	; (801045c <HAL_RCC_OscConfig+0x4d0>)
 8010290:	681b      	ldr	r3, [r3, #0]
 8010292:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010296:	2b00      	cmp	r3, #0
 8010298:	d0f0      	beq.n	801027c <HAL_RCC_OscConfig+0x2f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 801029a:	4b70      	ldr	r3, [pc, #448]	; (801045c <HAL_RCC_OscConfig+0x4d0>)
 801029c:	68db      	ldr	r3, [r3, #12]
 801029e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80102a2:	687b      	ldr	r3, [r7, #4]
 80102a4:	6a1b      	ldr	r3, [r3, #32]
 80102a6:	061b      	lsls	r3, r3, #24
 80102a8:	496c      	ldr	r1, [pc, #432]	; (801045c <HAL_RCC_OscConfig+0x4d0>)
 80102aa:	4313      	orrs	r3, r2
 80102ac:	60cb      	str	r3, [r1, #12]
 80102ae:	e018      	b.n	80102e2 <HAL_RCC_OscConfig+0x356>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80102b0:	4b6a      	ldr	r3, [pc, #424]	; (801045c <HAL_RCC_OscConfig+0x4d0>)
 80102b2:	681b      	ldr	r3, [r3, #0]
 80102b4:	4a69      	ldr	r2, [pc, #420]	; (801045c <HAL_RCC_OscConfig+0x4d0>)
 80102b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80102ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80102bc:	f7fb f914 	bl	800b4e8 <HAL_GetTick>
 80102c0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80102c2:	e008      	b.n	80102d6 <HAL_RCC_OscConfig+0x34a>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80102c4:	f7fb f910 	bl	800b4e8 <HAL_GetTick>
 80102c8:	4602      	mov	r2, r0
 80102ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80102cc:	1ad3      	subs	r3, r2, r3
 80102ce:	2b02      	cmp	r3, #2
 80102d0:	d901      	bls.n	80102d6 <HAL_RCC_OscConfig+0x34a>
          {
            return HAL_TIMEOUT;
 80102d2:	2303      	movs	r3, #3
 80102d4:	e23b      	b.n	801074e <HAL_RCC_OscConfig+0x7c2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80102d6:	4b61      	ldr	r3, [pc, #388]	; (801045c <HAL_RCC_OscConfig+0x4d0>)
 80102d8:	681b      	ldr	r3, [r3, #0]
 80102da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80102de:	2b00      	cmp	r3, #0
 80102e0:	d1f0      	bne.n	80102c4 <HAL_RCC_OscConfig+0x338>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80102e2:	687b      	ldr	r3, [r7, #4]
 80102e4:	681b      	ldr	r3, [r3, #0]
 80102e6:	f003 0308 	and.w	r3, r3, #8
 80102ea:	2b00      	cmp	r3, #0
 80102ec:	d036      	beq.n	801035c <HAL_RCC_OscConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80102ee:	687b      	ldr	r3, [r7, #4]
 80102f0:	695b      	ldr	r3, [r3, #20]
 80102f2:	2b00      	cmp	r3, #0
 80102f4:	d019      	beq.n	801032a <HAL_RCC_OscConfig+0x39e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80102f6:	4b59      	ldr	r3, [pc, #356]	; (801045c <HAL_RCC_OscConfig+0x4d0>)
 80102f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80102fa:	4a58      	ldr	r2, [pc, #352]	; (801045c <HAL_RCC_OscConfig+0x4d0>)
 80102fc:	f043 0301 	orr.w	r3, r3, #1
 8010300:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8010302:	f7fb f8f1 	bl	800b4e8 <HAL_GetTick>
 8010306:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8010308:	e008      	b.n	801031c <HAL_RCC_OscConfig+0x390>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 801030a:	f7fb f8ed 	bl	800b4e8 <HAL_GetTick>
 801030e:	4602      	mov	r2, r0
 8010310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010312:	1ad3      	subs	r3, r2, r3
 8010314:	2b02      	cmp	r3, #2
 8010316:	d901      	bls.n	801031c <HAL_RCC_OscConfig+0x390>
        {
          return HAL_TIMEOUT;
 8010318:	2303      	movs	r3, #3
 801031a:	e218      	b.n	801074e <HAL_RCC_OscConfig+0x7c2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 801031c:	4b4f      	ldr	r3, [pc, #316]	; (801045c <HAL_RCC_OscConfig+0x4d0>)
 801031e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010320:	f003 0302 	and.w	r3, r3, #2
 8010324:	2b00      	cmp	r3, #0
 8010326:	d0f0      	beq.n	801030a <HAL_RCC_OscConfig+0x37e>
 8010328:	e018      	b.n	801035c <HAL_RCC_OscConfig+0x3d0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 801032a:	4b4c      	ldr	r3, [pc, #304]	; (801045c <HAL_RCC_OscConfig+0x4d0>)
 801032c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801032e:	4a4b      	ldr	r2, [pc, #300]	; (801045c <HAL_RCC_OscConfig+0x4d0>)
 8010330:	f023 0301 	bic.w	r3, r3, #1
 8010334:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8010336:	f7fb f8d7 	bl	800b4e8 <HAL_GetTick>
 801033a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 801033c:	e008      	b.n	8010350 <HAL_RCC_OscConfig+0x3c4>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 801033e:	f7fb f8d3 	bl	800b4e8 <HAL_GetTick>
 8010342:	4602      	mov	r2, r0
 8010344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010346:	1ad3      	subs	r3, r2, r3
 8010348:	2b02      	cmp	r3, #2
 801034a:	d901      	bls.n	8010350 <HAL_RCC_OscConfig+0x3c4>
        {
          return HAL_TIMEOUT;
 801034c:	2303      	movs	r3, #3
 801034e:	e1fe      	b.n	801074e <HAL_RCC_OscConfig+0x7c2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8010350:	4b42      	ldr	r3, [pc, #264]	; (801045c <HAL_RCC_OscConfig+0x4d0>)
 8010352:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010354:	f003 0302 	and.w	r3, r3, #2
 8010358:	2b00      	cmp	r3, #0
 801035a:	d1f0      	bne.n	801033e <HAL_RCC_OscConfig+0x3b2>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 801035c:	687b      	ldr	r3, [r7, #4]
 801035e:	681b      	ldr	r3, [r3, #0]
 8010360:	f003 0320 	and.w	r3, r3, #32
 8010364:	2b00      	cmp	r3, #0
 8010366:	d036      	beq.n	80103d6 <HAL_RCC_OscConfig+0x44a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8010368:	687b      	ldr	r3, [r7, #4]
 801036a:	699b      	ldr	r3, [r3, #24]
 801036c:	2b00      	cmp	r3, #0
 801036e:	d019      	beq.n	80103a4 <HAL_RCC_OscConfig+0x418>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8010370:	4b3a      	ldr	r3, [pc, #232]	; (801045c <HAL_RCC_OscConfig+0x4d0>)
 8010372:	681b      	ldr	r3, [r3, #0]
 8010374:	4a39      	ldr	r2, [pc, #228]	; (801045c <HAL_RCC_OscConfig+0x4d0>)
 8010376:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 801037a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 801037c:	f7fb f8b4 	bl	800b4e8 <HAL_GetTick>
 8010380:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8010382:	e008      	b.n	8010396 <HAL_RCC_OscConfig+0x40a>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8010384:	f7fb f8b0 	bl	800b4e8 <HAL_GetTick>
 8010388:	4602      	mov	r2, r0
 801038a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801038c:	1ad3      	subs	r3, r2, r3
 801038e:	2b02      	cmp	r3, #2
 8010390:	d901      	bls.n	8010396 <HAL_RCC_OscConfig+0x40a>
        {
          return HAL_TIMEOUT;
 8010392:	2303      	movs	r3, #3
 8010394:	e1db      	b.n	801074e <HAL_RCC_OscConfig+0x7c2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8010396:	4b31      	ldr	r3, [pc, #196]	; (801045c <HAL_RCC_OscConfig+0x4d0>)
 8010398:	681b      	ldr	r3, [r3, #0]
 801039a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801039e:	2b00      	cmp	r3, #0
 80103a0:	d0f0      	beq.n	8010384 <HAL_RCC_OscConfig+0x3f8>
 80103a2:	e018      	b.n	80103d6 <HAL_RCC_OscConfig+0x44a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80103a4:	4b2d      	ldr	r3, [pc, #180]	; (801045c <HAL_RCC_OscConfig+0x4d0>)
 80103a6:	681b      	ldr	r3, [r3, #0]
 80103a8:	4a2c      	ldr	r2, [pc, #176]	; (801045c <HAL_RCC_OscConfig+0x4d0>)
 80103aa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80103ae:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80103b0:	f7fb f89a 	bl	800b4e8 <HAL_GetTick>
 80103b4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80103b6:	e008      	b.n	80103ca <HAL_RCC_OscConfig+0x43e>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80103b8:	f7fb f896 	bl	800b4e8 <HAL_GetTick>
 80103bc:	4602      	mov	r2, r0
 80103be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80103c0:	1ad3      	subs	r3, r2, r3
 80103c2:	2b02      	cmp	r3, #2
 80103c4:	d901      	bls.n	80103ca <HAL_RCC_OscConfig+0x43e>
        {
          return HAL_TIMEOUT;
 80103c6:	2303      	movs	r3, #3
 80103c8:	e1c1      	b.n	801074e <HAL_RCC_OscConfig+0x7c2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80103ca:	4b24      	ldr	r3, [pc, #144]	; (801045c <HAL_RCC_OscConfig+0x4d0>)
 80103cc:	681b      	ldr	r3, [r3, #0]
 80103ce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80103d2:	2b00      	cmp	r3, #0
 80103d4:	d1f0      	bne.n	80103b8 <HAL_RCC_OscConfig+0x42c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80103d6:	687b      	ldr	r3, [r7, #4]
 80103d8:	681b      	ldr	r3, [r3, #0]
 80103da:	f003 0304 	and.w	r3, r3, #4
 80103de:	2b00      	cmp	r3, #0
 80103e0:	f000 80af 	beq.w	8010542 <HAL_RCC_OscConfig+0x5b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80103e4:	4b1e      	ldr	r3, [pc, #120]	; (8010460 <HAL_RCC_OscConfig+0x4d4>)
 80103e6:	681b      	ldr	r3, [r3, #0]
 80103e8:	4a1d      	ldr	r2, [pc, #116]	; (8010460 <HAL_RCC_OscConfig+0x4d4>)
 80103ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80103ee:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80103f0:	f7fb f87a 	bl	800b4e8 <HAL_GetTick>
 80103f4:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80103f6:	e008      	b.n	801040a <HAL_RCC_OscConfig+0x47e>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80103f8:	f7fb f876 	bl	800b4e8 <HAL_GetTick>
 80103fc:	4602      	mov	r2, r0
 80103fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010400:	1ad3      	subs	r3, r2, r3
 8010402:	2b64      	cmp	r3, #100	; 0x64
 8010404:	d901      	bls.n	801040a <HAL_RCC_OscConfig+0x47e>
      {
        return HAL_TIMEOUT;
 8010406:	2303      	movs	r3, #3
 8010408:	e1a1      	b.n	801074e <HAL_RCC_OscConfig+0x7c2>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 801040a:	4b15      	ldr	r3, [pc, #84]	; (8010460 <HAL_RCC_OscConfig+0x4d4>)
 801040c:	681b      	ldr	r3, [r3, #0]
 801040e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010412:	2b00      	cmp	r3, #0
 8010414:	d0f0      	beq.n	80103f8 <HAL_RCC_OscConfig+0x46c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8010416:	687b      	ldr	r3, [r7, #4]
 8010418:	689b      	ldr	r3, [r3, #8]
 801041a:	2b01      	cmp	r3, #1
 801041c:	d106      	bne.n	801042c <HAL_RCC_OscConfig+0x4a0>
 801041e:	4b0f      	ldr	r3, [pc, #60]	; (801045c <HAL_RCC_OscConfig+0x4d0>)
 8010420:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010422:	4a0e      	ldr	r2, [pc, #56]	; (801045c <HAL_RCC_OscConfig+0x4d0>)
 8010424:	f043 0301 	orr.w	r3, r3, #1
 8010428:	6713      	str	r3, [r2, #112]	; 0x70
 801042a:	e05b      	b.n	80104e4 <HAL_RCC_OscConfig+0x558>
 801042c:	687b      	ldr	r3, [r7, #4]
 801042e:	689b      	ldr	r3, [r3, #8]
 8010430:	2b00      	cmp	r3, #0
 8010432:	d117      	bne.n	8010464 <HAL_RCC_OscConfig+0x4d8>
 8010434:	4b09      	ldr	r3, [pc, #36]	; (801045c <HAL_RCC_OscConfig+0x4d0>)
 8010436:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010438:	4a08      	ldr	r2, [pc, #32]	; (801045c <HAL_RCC_OscConfig+0x4d0>)
 801043a:	f023 0301 	bic.w	r3, r3, #1
 801043e:	6713      	str	r3, [r2, #112]	; 0x70
 8010440:	4b06      	ldr	r3, [pc, #24]	; (801045c <HAL_RCC_OscConfig+0x4d0>)
 8010442:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010444:	4a05      	ldr	r2, [pc, #20]	; (801045c <HAL_RCC_OscConfig+0x4d0>)
 8010446:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801044a:	6713      	str	r3, [r2, #112]	; 0x70
 801044c:	4b03      	ldr	r3, [pc, #12]	; (801045c <HAL_RCC_OscConfig+0x4d0>)
 801044e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010450:	4a02      	ldr	r2, [pc, #8]	; (801045c <HAL_RCC_OscConfig+0x4d0>)
 8010452:	f023 0304 	bic.w	r3, r3, #4
 8010456:	6713      	str	r3, [r2, #112]	; 0x70
 8010458:	e044      	b.n	80104e4 <HAL_RCC_OscConfig+0x558>
 801045a:	bf00      	nop
 801045c:	58024400 	.word	0x58024400
 8010460:	58024800 	.word	0x58024800
 8010464:	687b      	ldr	r3, [r7, #4]
 8010466:	689b      	ldr	r3, [r3, #8]
 8010468:	2b05      	cmp	r3, #5
 801046a:	d112      	bne.n	8010492 <HAL_RCC_OscConfig+0x506>
 801046c:	4b95      	ldr	r3, [pc, #596]	; (80106c4 <HAL_RCC_OscConfig+0x738>)
 801046e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010470:	4a94      	ldr	r2, [pc, #592]	; (80106c4 <HAL_RCC_OscConfig+0x738>)
 8010472:	f043 0304 	orr.w	r3, r3, #4
 8010476:	6713      	str	r3, [r2, #112]	; 0x70
 8010478:	4b92      	ldr	r3, [pc, #584]	; (80106c4 <HAL_RCC_OscConfig+0x738>)
 801047a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801047c:	4a91      	ldr	r2, [pc, #580]	; (80106c4 <HAL_RCC_OscConfig+0x738>)
 801047e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010482:	6713      	str	r3, [r2, #112]	; 0x70
 8010484:	4b8f      	ldr	r3, [pc, #572]	; (80106c4 <HAL_RCC_OscConfig+0x738>)
 8010486:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010488:	4a8e      	ldr	r2, [pc, #568]	; (80106c4 <HAL_RCC_OscConfig+0x738>)
 801048a:	f043 0301 	orr.w	r3, r3, #1
 801048e:	6713      	str	r3, [r2, #112]	; 0x70
 8010490:	e028      	b.n	80104e4 <HAL_RCC_OscConfig+0x558>
 8010492:	687b      	ldr	r3, [r7, #4]
 8010494:	689b      	ldr	r3, [r3, #8]
 8010496:	2b85      	cmp	r3, #133	; 0x85
 8010498:	d112      	bne.n	80104c0 <HAL_RCC_OscConfig+0x534>
 801049a:	4b8a      	ldr	r3, [pc, #552]	; (80106c4 <HAL_RCC_OscConfig+0x738>)
 801049c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801049e:	4a89      	ldr	r2, [pc, #548]	; (80106c4 <HAL_RCC_OscConfig+0x738>)
 80104a0:	f043 0304 	orr.w	r3, r3, #4
 80104a4:	6713      	str	r3, [r2, #112]	; 0x70
 80104a6:	4b87      	ldr	r3, [pc, #540]	; (80106c4 <HAL_RCC_OscConfig+0x738>)
 80104a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80104aa:	4a86      	ldr	r2, [pc, #536]	; (80106c4 <HAL_RCC_OscConfig+0x738>)
 80104ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80104b0:	6713      	str	r3, [r2, #112]	; 0x70
 80104b2:	4b84      	ldr	r3, [pc, #528]	; (80106c4 <HAL_RCC_OscConfig+0x738>)
 80104b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80104b6:	4a83      	ldr	r2, [pc, #524]	; (80106c4 <HAL_RCC_OscConfig+0x738>)
 80104b8:	f043 0301 	orr.w	r3, r3, #1
 80104bc:	6713      	str	r3, [r2, #112]	; 0x70
 80104be:	e011      	b.n	80104e4 <HAL_RCC_OscConfig+0x558>
 80104c0:	4b80      	ldr	r3, [pc, #512]	; (80106c4 <HAL_RCC_OscConfig+0x738>)
 80104c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80104c4:	4a7f      	ldr	r2, [pc, #508]	; (80106c4 <HAL_RCC_OscConfig+0x738>)
 80104c6:	f023 0301 	bic.w	r3, r3, #1
 80104ca:	6713      	str	r3, [r2, #112]	; 0x70
 80104cc:	4b7d      	ldr	r3, [pc, #500]	; (80106c4 <HAL_RCC_OscConfig+0x738>)
 80104ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80104d0:	4a7c      	ldr	r2, [pc, #496]	; (80106c4 <HAL_RCC_OscConfig+0x738>)
 80104d2:	f023 0304 	bic.w	r3, r3, #4
 80104d6:	6713      	str	r3, [r2, #112]	; 0x70
 80104d8:	4b7a      	ldr	r3, [pc, #488]	; (80106c4 <HAL_RCC_OscConfig+0x738>)
 80104da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80104dc:	4a79      	ldr	r2, [pc, #484]	; (80106c4 <HAL_RCC_OscConfig+0x738>)
 80104de:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80104e2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80104e4:	687b      	ldr	r3, [r7, #4]
 80104e6:	689b      	ldr	r3, [r3, #8]
 80104e8:	2b00      	cmp	r3, #0
 80104ea:	d015      	beq.n	8010518 <HAL_RCC_OscConfig+0x58c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80104ec:	f7fa fffc 	bl	800b4e8 <HAL_GetTick>
 80104f0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80104f2:	e00a      	b.n	801050a <HAL_RCC_OscConfig+0x57e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80104f4:	f7fa fff8 	bl	800b4e8 <HAL_GetTick>
 80104f8:	4602      	mov	r2, r0
 80104fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80104fc:	1ad3      	subs	r3, r2, r3
 80104fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8010502:	4293      	cmp	r3, r2
 8010504:	d901      	bls.n	801050a <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 8010506:	2303      	movs	r3, #3
 8010508:	e121      	b.n	801074e <HAL_RCC_OscConfig+0x7c2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801050a:	4b6e      	ldr	r3, [pc, #440]	; (80106c4 <HAL_RCC_OscConfig+0x738>)
 801050c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801050e:	f003 0302 	and.w	r3, r3, #2
 8010512:	2b00      	cmp	r3, #0
 8010514:	d0ee      	beq.n	80104f4 <HAL_RCC_OscConfig+0x568>
 8010516:	e014      	b.n	8010542 <HAL_RCC_OscConfig+0x5b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8010518:	f7fa ffe6 	bl	800b4e8 <HAL_GetTick>
 801051c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 801051e:	e00a      	b.n	8010536 <HAL_RCC_OscConfig+0x5aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8010520:	f7fa ffe2 	bl	800b4e8 <HAL_GetTick>
 8010524:	4602      	mov	r2, r0
 8010526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010528:	1ad3      	subs	r3, r2, r3
 801052a:	f241 3288 	movw	r2, #5000	; 0x1388
 801052e:	4293      	cmp	r3, r2
 8010530:	d901      	bls.n	8010536 <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 8010532:	2303      	movs	r3, #3
 8010534:	e10b      	b.n	801074e <HAL_RCC_OscConfig+0x7c2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8010536:	4b63      	ldr	r3, [pc, #396]	; (80106c4 <HAL_RCC_OscConfig+0x738>)
 8010538:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801053a:	f003 0302 	and.w	r3, r3, #2
 801053e:	2b00      	cmp	r3, #0
 8010540:	d1ee      	bne.n	8010520 <HAL_RCC_OscConfig+0x594>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8010542:	687b      	ldr	r3, [r7, #4]
 8010544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010546:	2b00      	cmp	r3, #0
 8010548:	f000 8100 	beq.w	801074c <HAL_RCC_OscConfig+0x7c0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 801054c:	4b5d      	ldr	r3, [pc, #372]	; (80106c4 <HAL_RCC_OscConfig+0x738>)
 801054e:	691b      	ldr	r3, [r3, #16]
 8010550:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8010554:	2b18      	cmp	r3, #24
 8010556:	f000 80bb 	beq.w	80106d0 <HAL_RCC_OscConfig+0x744>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 801055a:	687b      	ldr	r3, [r7, #4]
 801055c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801055e:	2b02      	cmp	r3, #2
 8010560:	f040 8095 	bne.w	801068e <HAL_RCC_OscConfig+0x702>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8010564:	4b57      	ldr	r3, [pc, #348]	; (80106c4 <HAL_RCC_OscConfig+0x738>)
 8010566:	681b      	ldr	r3, [r3, #0]
 8010568:	4a56      	ldr	r2, [pc, #344]	; (80106c4 <HAL_RCC_OscConfig+0x738>)
 801056a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 801056e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8010570:	f7fa ffba 	bl	800b4e8 <HAL_GetTick>
 8010574:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8010576:	e008      	b.n	801058a <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8010578:	f7fa ffb6 	bl	800b4e8 <HAL_GetTick>
 801057c:	4602      	mov	r2, r0
 801057e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010580:	1ad3      	subs	r3, r2, r3
 8010582:	2b02      	cmp	r3, #2
 8010584:	d901      	bls.n	801058a <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 8010586:	2303      	movs	r3, #3
 8010588:	e0e1      	b.n	801074e <HAL_RCC_OscConfig+0x7c2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 801058a:	4b4e      	ldr	r3, [pc, #312]	; (80106c4 <HAL_RCC_OscConfig+0x738>)
 801058c:	681b      	ldr	r3, [r3, #0]
 801058e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8010592:	2b00      	cmp	r3, #0
 8010594:	d1f0      	bne.n	8010578 <HAL_RCC_OscConfig+0x5ec>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8010596:	4b4b      	ldr	r3, [pc, #300]	; (80106c4 <HAL_RCC_OscConfig+0x738>)
 8010598:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801059a:	4b4b      	ldr	r3, [pc, #300]	; (80106c8 <HAL_RCC_OscConfig+0x73c>)
 801059c:	4013      	ands	r3, r2
 801059e:	687a      	ldr	r2, [r7, #4]
 80105a0:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80105a2:	687a      	ldr	r2, [r7, #4]
 80105a4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80105a6:	0112      	lsls	r2, r2, #4
 80105a8:	430a      	orrs	r2, r1
 80105aa:	4946      	ldr	r1, [pc, #280]	; (80106c4 <HAL_RCC_OscConfig+0x738>)
 80105ac:	4313      	orrs	r3, r2
 80105ae:	628b      	str	r3, [r1, #40]	; 0x28
 80105b0:	687b      	ldr	r3, [r7, #4]
 80105b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80105b4:	3b01      	subs	r3, #1
 80105b6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80105ba:	687b      	ldr	r3, [r7, #4]
 80105bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80105be:	3b01      	subs	r3, #1
 80105c0:	025b      	lsls	r3, r3, #9
 80105c2:	b29b      	uxth	r3, r3
 80105c4:	431a      	orrs	r2, r3
 80105c6:	687b      	ldr	r3, [r7, #4]
 80105c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80105ca:	3b01      	subs	r3, #1
 80105cc:	041b      	lsls	r3, r3, #16
 80105ce:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80105d2:	431a      	orrs	r2, r3
 80105d4:	687b      	ldr	r3, [r7, #4]
 80105d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80105d8:	3b01      	subs	r3, #1
 80105da:	061b      	lsls	r3, r3, #24
 80105dc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80105e0:	4938      	ldr	r1, [pc, #224]	; (80106c4 <HAL_RCC_OscConfig+0x738>)
 80105e2:	4313      	orrs	r3, r2
 80105e4:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80105e6:	4b37      	ldr	r3, [pc, #220]	; (80106c4 <HAL_RCC_OscConfig+0x738>)
 80105e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80105ea:	4a36      	ldr	r2, [pc, #216]	; (80106c4 <HAL_RCC_OscConfig+0x738>)
 80105ec:	f023 0301 	bic.w	r3, r3, #1
 80105f0:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80105f2:	4b34      	ldr	r3, [pc, #208]	; (80106c4 <HAL_RCC_OscConfig+0x738>)
 80105f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80105f6:	4b35      	ldr	r3, [pc, #212]	; (80106cc <HAL_RCC_OscConfig+0x740>)
 80105f8:	4013      	ands	r3, r2
 80105fa:	687a      	ldr	r2, [r7, #4]
 80105fc:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80105fe:	00d2      	lsls	r2, r2, #3
 8010600:	4930      	ldr	r1, [pc, #192]	; (80106c4 <HAL_RCC_OscConfig+0x738>)
 8010602:	4313      	orrs	r3, r2
 8010604:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8010606:	4b2f      	ldr	r3, [pc, #188]	; (80106c4 <HAL_RCC_OscConfig+0x738>)
 8010608:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801060a:	f023 020c 	bic.w	r2, r3, #12
 801060e:	687b      	ldr	r3, [r7, #4]
 8010610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010612:	492c      	ldr	r1, [pc, #176]	; (80106c4 <HAL_RCC_OscConfig+0x738>)
 8010614:	4313      	orrs	r3, r2
 8010616:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8010618:	4b2a      	ldr	r3, [pc, #168]	; (80106c4 <HAL_RCC_OscConfig+0x738>)
 801061a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801061c:	f023 0202 	bic.w	r2, r3, #2
 8010620:	687b      	ldr	r3, [r7, #4]
 8010622:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010624:	4927      	ldr	r1, [pc, #156]	; (80106c4 <HAL_RCC_OscConfig+0x738>)
 8010626:	4313      	orrs	r3, r2
 8010628:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 801062a:	4b26      	ldr	r3, [pc, #152]	; (80106c4 <HAL_RCC_OscConfig+0x738>)
 801062c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801062e:	4a25      	ldr	r2, [pc, #148]	; (80106c4 <HAL_RCC_OscConfig+0x738>)
 8010630:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8010634:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8010636:	4b23      	ldr	r3, [pc, #140]	; (80106c4 <HAL_RCC_OscConfig+0x738>)
 8010638:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801063a:	4a22      	ldr	r2, [pc, #136]	; (80106c4 <HAL_RCC_OscConfig+0x738>)
 801063c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8010640:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8010642:	4b20      	ldr	r3, [pc, #128]	; (80106c4 <HAL_RCC_OscConfig+0x738>)
 8010644:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010646:	4a1f      	ldr	r2, [pc, #124]	; (80106c4 <HAL_RCC_OscConfig+0x738>)
 8010648:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 801064c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 801064e:	4b1d      	ldr	r3, [pc, #116]	; (80106c4 <HAL_RCC_OscConfig+0x738>)
 8010650:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010652:	4a1c      	ldr	r2, [pc, #112]	; (80106c4 <HAL_RCC_OscConfig+0x738>)
 8010654:	f043 0301 	orr.w	r3, r3, #1
 8010658:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 801065a:	4b1a      	ldr	r3, [pc, #104]	; (80106c4 <HAL_RCC_OscConfig+0x738>)
 801065c:	681b      	ldr	r3, [r3, #0]
 801065e:	4a19      	ldr	r2, [pc, #100]	; (80106c4 <HAL_RCC_OscConfig+0x738>)
 8010660:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8010664:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8010666:	f7fa ff3f 	bl	800b4e8 <HAL_GetTick>
 801066a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 801066c:	e008      	b.n	8010680 <HAL_RCC_OscConfig+0x6f4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801066e:	f7fa ff3b 	bl	800b4e8 <HAL_GetTick>
 8010672:	4602      	mov	r2, r0
 8010674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010676:	1ad3      	subs	r3, r2, r3
 8010678:	2b02      	cmp	r3, #2
 801067a:	d901      	bls.n	8010680 <HAL_RCC_OscConfig+0x6f4>
          {
            return HAL_TIMEOUT;
 801067c:	2303      	movs	r3, #3
 801067e:	e066      	b.n	801074e <HAL_RCC_OscConfig+0x7c2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8010680:	4b10      	ldr	r3, [pc, #64]	; (80106c4 <HAL_RCC_OscConfig+0x738>)
 8010682:	681b      	ldr	r3, [r3, #0]
 8010684:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8010688:	2b00      	cmp	r3, #0
 801068a:	d0f0      	beq.n	801066e <HAL_RCC_OscConfig+0x6e2>
 801068c:	e05e      	b.n	801074c <HAL_RCC_OscConfig+0x7c0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801068e:	4b0d      	ldr	r3, [pc, #52]	; (80106c4 <HAL_RCC_OscConfig+0x738>)
 8010690:	681b      	ldr	r3, [r3, #0]
 8010692:	4a0c      	ldr	r2, [pc, #48]	; (80106c4 <HAL_RCC_OscConfig+0x738>)
 8010694:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8010698:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801069a:	f7fa ff25 	bl	800b4e8 <HAL_GetTick>
 801069e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80106a0:	e008      	b.n	80106b4 <HAL_RCC_OscConfig+0x728>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80106a2:	f7fa ff21 	bl	800b4e8 <HAL_GetTick>
 80106a6:	4602      	mov	r2, r0
 80106a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106aa:	1ad3      	subs	r3, r2, r3
 80106ac:	2b02      	cmp	r3, #2
 80106ae:	d901      	bls.n	80106b4 <HAL_RCC_OscConfig+0x728>
          {
            return HAL_TIMEOUT;
 80106b0:	2303      	movs	r3, #3
 80106b2:	e04c      	b.n	801074e <HAL_RCC_OscConfig+0x7c2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80106b4:	4b03      	ldr	r3, [pc, #12]	; (80106c4 <HAL_RCC_OscConfig+0x738>)
 80106b6:	681b      	ldr	r3, [r3, #0]
 80106b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80106bc:	2b00      	cmp	r3, #0
 80106be:	d1f0      	bne.n	80106a2 <HAL_RCC_OscConfig+0x716>
 80106c0:	e044      	b.n	801074c <HAL_RCC_OscConfig+0x7c0>
 80106c2:	bf00      	nop
 80106c4:	58024400 	.word	0x58024400
 80106c8:	fffffc0c 	.word	0xfffffc0c
 80106cc:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80106d0:	4b21      	ldr	r3, [pc, #132]	; (8010758 <HAL_RCC_OscConfig+0x7cc>)
 80106d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80106d4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80106d6:	4b20      	ldr	r3, [pc, #128]	; (8010758 <HAL_RCC_OscConfig+0x7cc>)
 80106d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80106da:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80106dc:	687b      	ldr	r3, [r7, #4]
 80106de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80106e0:	2b01      	cmp	r3, #1
 80106e2:	d031      	beq.n	8010748 <HAL_RCC_OscConfig+0x7bc>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80106e4:	693b      	ldr	r3, [r7, #16]
 80106e6:	f003 0203 	and.w	r2, r3, #3
 80106ea:	687b      	ldr	r3, [r7, #4]
 80106ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80106ee:	429a      	cmp	r2, r3
 80106f0:	d12a      	bne.n	8010748 <HAL_RCC_OscConfig+0x7bc>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80106f2:	693b      	ldr	r3, [r7, #16]
 80106f4:	091b      	lsrs	r3, r3, #4
 80106f6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80106fa:	687b      	ldr	r3, [r7, #4]
 80106fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80106fe:	429a      	cmp	r2, r3
 8010700:	d122      	bne.n	8010748 <HAL_RCC_OscConfig+0x7bc>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8010702:	68fb      	ldr	r3, [r7, #12]
 8010704:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8010708:	687b      	ldr	r3, [r7, #4]
 801070a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801070c:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 801070e:	429a      	cmp	r2, r3
 8010710:	d11a      	bne.n	8010748 <HAL_RCC_OscConfig+0x7bc>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8010712:	68fb      	ldr	r3, [r7, #12]
 8010714:	0a5b      	lsrs	r3, r3, #9
 8010716:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801071a:	687b      	ldr	r3, [r7, #4]
 801071c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801071e:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8010720:	429a      	cmp	r2, r3
 8010722:	d111      	bne.n	8010748 <HAL_RCC_OscConfig+0x7bc>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8010724:	68fb      	ldr	r3, [r7, #12]
 8010726:	0c1b      	lsrs	r3, r3, #16
 8010728:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801072c:	687b      	ldr	r3, [r7, #4]
 801072e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010730:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8010732:	429a      	cmp	r2, r3
 8010734:	d108      	bne.n	8010748 <HAL_RCC_OscConfig+0x7bc>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8010736:	68fb      	ldr	r3, [r7, #12]
 8010738:	0e1b      	lsrs	r3, r3, #24
 801073a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801073e:	687b      	ldr	r3, [r7, #4]
 8010740:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010742:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8010744:	429a      	cmp	r2, r3
 8010746:	d001      	beq.n	801074c <HAL_RCC_OscConfig+0x7c0>
      {
        return HAL_ERROR;
 8010748:	2301      	movs	r3, #1
 801074a:	e000      	b.n	801074e <HAL_RCC_OscConfig+0x7c2>
      }
    }
  }
  return HAL_OK;
 801074c:	2300      	movs	r3, #0
}
 801074e:	4618      	mov	r0, r3
 8010750:	3730      	adds	r7, #48	; 0x30
 8010752:	46bd      	mov	sp, r7
 8010754:	bd80      	pop	{r7, pc}
 8010756:	bf00      	nop
 8010758:	58024400 	.word	0x58024400

0801075c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 801075c:	b580      	push	{r7, lr}
 801075e:	b086      	sub	sp, #24
 8010760:	af00      	add	r7, sp, #0
 8010762:	6078      	str	r0, [r7, #4]
 8010764:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8010766:	687b      	ldr	r3, [r7, #4]
 8010768:	2b00      	cmp	r3, #0
 801076a:	d101      	bne.n	8010770 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 801076c:	2301      	movs	r3, #1
 801076e:	e19c      	b.n	8010aaa <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8010770:	4b8a      	ldr	r3, [pc, #552]	; (801099c <HAL_RCC_ClockConfig+0x240>)
 8010772:	681b      	ldr	r3, [r3, #0]
 8010774:	f003 030f 	and.w	r3, r3, #15
 8010778:	683a      	ldr	r2, [r7, #0]
 801077a:	429a      	cmp	r2, r3
 801077c:	d910      	bls.n	80107a0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801077e:	4b87      	ldr	r3, [pc, #540]	; (801099c <HAL_RCC_ClockConfig+0x240>)
 8010780:	681b      	ldr	r3, [r3, #0]
 8010782:	f023 020f 	bic.w	r2, r3, #15
 8010786:	4985      	ldr	r1, [pc, #532]	; (801099c <HAL_RCC_ClockConfig+0x240>)
 8010788:	683b      	ldr	r3, [r7, #0]
 801078a:	4313      	orrs	r3, r2
 801078c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 801078e:	4b83      	ldr	r3, [pc, #524]	; (801099c <HAL_RCC_ClockConfig+0x240>)
 8010790:	681b      	ldr	r3, [r3, #0]
 8010792:	f003 030f 	and.w	r3, r3, #15
 8010796:	683a      	ldr	r2, [r7, #0]
 8010798:	429a      	cmp	r2, r3
 801079a:	d001      	beq.n	80107a0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 801079c:	2301      	movs	r3, #1
 801079e:	e184      	b.n	8010aaa <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80107a0:	687b      	ldr	r3, [r7, #4]
 80107a2:	681b      	ldr	r3, [r3, #0]
 80107a4:	f003 0304 	and.w	r3, r3, #4
 80107a8:	2b00      	cmp	r3, #0
 80107aa:	d010      	beq.n	80107ce <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 80107ac:	687b      	ldr	r3, [r7, #4]
 80107ae:	691a      	ldr	r2, [r3, #16]
 80107b0:	4b7b      	ldr	r3, [pc, #492]	; (80109a0 <HAL_RCC_ClockConfig+0x244>)
 80107b2:	699b      	ldr	r3, [r3, #24]
 80107b4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80107b8:	429a      	cmp	r2, r3
 80107ba:	d908      	bls.n	80107ce <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80107bc:	4b78      	ldr	r3, [pc, #480]	; (80109a0 <HAL_RCC_ClockConfig+0x244>)
 80107be:	699b      	ldr	r3, [r3, #24]
 80107c0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80107c4:	687b      	ldr	r3, [r7, #4]
 80107c6:	691b      	ldr	r3, [r3, #16]
 80107c8:	4975      	ldr	r1, [pc, #468]	; (80109a0 <HAL_RCC_ClockConfig+0x244>)
 80107ca:	4313      	orrs	r3, r2
 80107cc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80107ce:	687b      	ldr	r3, [r7, #4]
 80107d0:	681b      	ldr	r3, [r3, #0]
 80107d2:	f003 0308 	and.w	r3, r3, #8
 80107d6:	2b00      	cmp	r3, #0
 80107d8:	d010      	beq.n	80107fc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 80107da:	687b      	ldr	r3, [r7, #4]
 80107dc:	695a      	ldr	r2, [r3, #20]
 80107de:	4b70      	ldr	r3, [pc, #448]	; (80109a0 <HAL_RCC_ClockConfig+0x244>)
 80107e0:	69db      	ldr	r3, [r3, #28]
 80107e2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80107e6:	429a      	cmp	r2, r3
 80107e8:	d908      	bls.n	80107fc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80107ea:	4b6d      	ldr	r3, [pc, #436]	; (80109a0 <HAL_RCC_ClockConfig+0x244>)
 80107ec:	69db      	ldr	r3, [r3, #28]
 80107ee:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80107f2:	687b      	ldr	r3, [r7, #4]
 80107f4:	695b      	ldr	r3, [r3, #20]
 80107f6:	496a      	ldr	r1, [pc, #424]	; (80109a0 <HAL_RCC_ClockConfig+0x244>)
 80107f8:	4313      	orrs	r3, r2
 80107fa:	61cb      	str	r3, [r1, #28]
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80107fc:	687b      	ldr	r3, [r7, #4]
 80107fe:	681b      	ldr	r3, [r3, #0]
 8010800:	f003 0310 	and.w	r3, r3, #16
 8010804:	2b00      	cmp	r3, #0
 8010806:	d010      	beq.n	801082a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
     if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8010808:	687b      	ldr	r3, [r7, #4]
 801080a:	699a      	ldr	r2, [r3, #24]
 801080c:	4b64      	ldr	r3, [pc, #400]	; (80109a0 <HAL_RCC_ClockConfig+0x244>)
 801080e:	69db      	ldr	r3, [r3, #28]
 8010810:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8010814:	429a      	cmp	r2, r3
 8010816:	d908      	bls.n	801082a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8010818:	4b61      	ldr	r3, [pc, #388]	; (80109a0 <HAL_RCC_ClockConfig+0x244>)
 801081a:	69db      	ldr	r3, [r3, #28]
 801081c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8010820:	687b      	ldr	r3, [r7, #4]
 8010822:	699b      	ldr	r3, [r3, #24]
 8010824:	495e      	ldr	r1, [pc, #376]	; (80109a0 <HAL_RCC_ClockConfig+0x244>)
 8010826:	4313      	orrs	r3, r2
 8010828:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 801082a:	687b      	ldr	r3, [r7, #4]
 801082c:	681b      	ldr	r3, [r3, #0]
 801082e:	f003 0320 	and.w	r3, r3, #32
 8010832:	2b00      	cmp	r3, #0
 8010834:	d010      	beq.n	8010858 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
    }
#else
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8010836:	687b      	ldr	r3, [r7, #4]
 8010838:	69da      	ldr	r2, [r3, #28]
 801083a:	4b59      	ldr	r3, [pc, #356]	; (80109a0 <HAL_RCC_ClockConfig+0x244>)
 801083c:	6a1b      	ldr	r3, [r3, #32]
 801083e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8010842:	429a      	cmp	r2, r3
 8010844:	d908      	bls.n	8010858 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8010846:	4b56      	ldr	r3, [pc, #344]	; (80109a0 <HAL_RCC_ClockConfig+0x244>)
 8010848:	6a1b      	ldr	r3, [r3, #32]
 801084a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 801084e:	687b      	ldr	r3, [r7, #4]
 8010850:	69db      	ldr	r3, [r3, #28]
 8010852:	4953      	ldr	r1, [pc, #332]	; (80109a0 <HAL_RCC_ClockConfig+0x244>)
 8010854:	4313      	orrs	r3, r2
 8010856:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8010858:	687b      	ldr	r3, [r7, #4]
 801085a:	681b      	ldr	r3, [r3, #0]
 801085c:	f003 0302 	and.w	r3, r3, #2
 8010860:	2b00      	cmp	r3, #0
 8010862:	d010      	beq.n	8010886 <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
        if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8010864:	687b      	ldr	r3, [r7, #4]
 8010866:	68da      	ldr	r2, [r3, #12]
 8010868:	4b4d      	ldr	r3, [pc, #308]	; (80109a0 <HAL_RCC_ClockConfig+0x244>)
 801086a:	699b      	ldr	r3, [r3, #24]
 801086c:	f003 030f 	and.w	r3, r3, #15
 8010870:	429a      	cmp	r2, r3
 8010872:	d908      	bls.n	8010886 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8010874:	4b4a      	ldr	r3, [pc, #296]	; (80109a0 <HAL_RCC_ClockConfig+0x244>)
 8010876:	699b      	ldr	r3, [r3, #24]
 8010878:	f023 020f 	bic.w	r2, r3, #15
 801087c:	687b      	ldr	r3, [r7, #4]
 801087e:	68db      	ldr	r3, [r3, #12]
 8010880:	4947      	ldr	r1, [pc, #284]	; (80109a0 <HAL_RCC_ClockConfig+0x244>)
 8010882:	4313      	orrs	r3, r2
 8010884:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8010886:	687b      	ldr	r3, [r7, #4]
 8010888:	681b      	ldr	r3, [r3, #0]
 801088a:	f003 0301 	and.w	r3, r3, #1
 801088e:	2b00      	cmp	r3, #0
 8010890:	d055      	beq.n	801093e <HAL_RCC_ClockConfig+0x1e2>
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8010892:	4b43      	ldr	r3, [pc, #268]	; (80109a0 <HAL_RCC_ClockConfig+0x244>)
 8010894:	699b      	ldr	r3, [r3, #24]
 8010896:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 801089a:	687b      	ldr	r3, [r7, #4]
 801089c:	689b      	ldr	r3, [r3, #8]
 801089e:	4940      	ldr	r1, [pc, #256]	; (80109a0 <HAL_RCC_ClockConfig+0x244>)
 80108a0:	4313      	orrs	r3, r2
 80108a2:	618b      	str	r3, [r1, #24]
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80108a4:	687b      	ldr	r3, [r7, #4]
 80108a6:	685b      	ldr	r3, [r3, #4]
 80108a8:	2b02      	cmp	r3, #2
 80108aa:	d107      	bne.n	80108bc <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80108ac:	4b3c      	ldr	r3, [pc, #240]	; (80109a0 <HAL_RCC_ClockConfig+0x244>)
 80108ae:	681b      	ldr	r3, [r3, #0]
 80108b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80108b4:	2b00      	cmp	r3, #0
 80108b6:	d121      	bne.n	80108fc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80108b8:	2301      	movs	r3, #1
 80108ba:	e0f6      	b.n	8010aaa <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80108bc:	687b      	ldr	r3, [r7, #4]
 80108be:	685b      	ldr	r3, [r3, #4]
 80108c0:	2b03      	cmp	r3, #3
 80108c2:	d107      	bne.n	80108d4 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80108c4:	4b36      	ldr	r3, [pc, #216]	; (80109a0 <HAL_RCC_ClockConfig+0x244>)
 80108c6:	681b      	ldr	r3, [r3, #0]
 80108c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80108cc:	2b00      	cmp	r3, #0
 80108ce:	d115      	bne.n	80108fc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80108d0:	2301      	movs	r3, #1
 80108d2:	e0ea      	b.n	8010aaa <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80108d4:	687b      	ldr	r3, [r7, #4]
 80108d6:	685b      	ldr	r3, [r3, #4]
 80108d8:	2b01      	cmp	r3, #1
 80108da:	d107      	bne.n	80108ec <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80108dc:	4b30      	ldr	r3, [pc, #192]	; (80109a0 <HAL_RCC_ClockConfig+0x244>)
 80108de:	681b      	ldr	r3, [r3, #0]
 80108e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80108e4:	2b00      	cmp	r3, #0
 80108e6:	d109      	bne.n	80108fc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80108e8:	2301      	movs	r3, #1
 80108ea:	e0de      	b.n	8010aaa <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80108ec:	4b2c      	ldr	r3, [pc, #176]	; (80109a0 <HAL_RCC_ClockConfig+0x244>)
 80108ee:	681b      	ldr	r3, [r3, #0]
 80108f0:	f003 0304 	and.w	r3, r3, #4
 80108f4:	2b00      	cmp	r3, #0
 80108f6:	d101      	bne.n	80108fc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80108f8:	2301      	movs	r3, #1
 80108fa:	e0d6      	b.n	8010aaa <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80108fc:	4b28      	ldr	r3, [pc, #160]	; (80109a0 <HAL_RCC_ClockConfig+0x244>)
 80108fe:	691b      	ldr	r3, [r3, #16]
 8010900:	f023 0207 	bic.w	r2, r3, #7
 8010904:	687b      	ldr	r3, [r7, #4]
 8010906:	685b      	ldr	r3, [r3, #4]
 8010908:	4925      	ldr	r1, [pc, #148]	; (80109a0 <HAL_RCC_ClockConfig+0x244>)
 801090a:	4313      	orrs	r3, r2
 801090c:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801090e:	f7fa fdeb 	bl	800b4e8 <HAL_GetTick>
 8010912:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8010914:	e00a      	b.n	801092c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8010916:	f7fa fde7 	bl	800b4e8 <HAL_GetTick>
 801091a:	4602      	mov	r2, r0
 801091c:	697b      	ldr	r3, [r7, #20]
 801091e:	1ad3      	subs	r3, r2, r3
 8010920:	f241 3288 	movw	r2, #5000	; 0x1388
 8010924:	4293      	cmp	r3, r2
 8010926:	d901      	bls.n	801092c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8010928:	2303      	movs	r3, #3
 801092a:	e0be      	b.n	8010aaa <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801092c:	4b1c      	ldr	r3, [pc, #112]	; (80109a0 <HAL_RCC_ClockConfig+0x244>)
 801092e:	691b      	ldr	r3, [r3, #16]
 8010930:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8010934:	687b      	ldr	r3, [r7, #4]
 8010936:	685b      	ldr	r3, [r3, #4]
 8010938:	00db      	lsls	r3, r3, #3
 801093a:	429a      	cmp	r2, r3
 801093c:	d1eb      	bne.n	8010916 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801093e:	687b      	ldr	r3, [r7, #4]
 8010940:	681b      	ldr	r3, [r3, #0]
 8010942:	f003 0302 	and.w	r3, r3, #2
 8010946:	2b00      	cmp	r3, #0
 8010948:	d010      	beq.n	801096c <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 801094a:	687b      	ldr	r3, [r7, #4]
 801094c:	68da      	ldr	r2, [r3, #12]
 801094e:	4b14      	ldr	r3, [pc, #80]	; (80109a0 <HAL_RCC_ClockConfig+0x244>)
 8010950:	699b      	ldr	r3, [r3, #24]
 8010952:	f003 030f 	and.w	r3, r3, #15
 8010956:	429a      	cmp	r2, r3
 8010958:	d208      	bcs.n	801096c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 801095a:	4b11      	ldr	r3, [pc, #68]	; (80109a0 <HAL_RCC_ClockConfig+0x244>)
 801095c:	699b      	ldr	r3, [r3, #24]
 801095e:	f023 020f 	bic.w	r2, r3, #15
 8010962:	687b      	ldr	r3, [r7, #4]
 8010964:	68db      	ldr	r3, [r3, #12]
 8010966:	490e      	ldr	r1, [pc, #56]	; (80109a0 <HAL_RCC_ClockConfig+0x244>)
 8010968:	4313      	orrs	r3, r2
 801096a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 801096c:	4b0b      	ldr	r3, [pc, #44]	; (801099c <HAL_RCC_ClockConfig+0x240>)
 801096e:	681b      	ldr	r3, [r3, #0]
 8010970:	f003 030f 	and.w	r3, r3, #15
 8010974:	683a      	ldr	r2, [r7, #0]
 8010976:	429a      	cmp	r2, r3
 8010978:	d214      	bcs.n	80109a4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801097a:	4b08      	ldr	r3, [pc, #32]	; (801099c <HAL_RCC_ClockConfig+0x240>)
 801097c:	681b      	ldr	r3, [r3, #0]
 801097e:	f023 020f 	bic.w	r2, r3, #15
 8010982:	4906      	ldr	r1, [pc, #24]	; (801099c <HAL_RCC_ClockConfig+0x240>)
 8010984:	683b      	ldr	r3, [r7, #0]
 8010986:	4313      	orrs	r3, r2
 8010988:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 801098a:	4b04      	ldr	r3, [pc, #16]	; (801099c <HAL_RCC_ClockConfig+0x240>)
 801098c:	681b      	ldr	r3, [r3, #0]
 801098e:	f003 030f 	and.w	r3, r3, #15
 8010992:	683a      	ldr	r2, [r7, #0]
 8010994:	429a      	cmp	r2, r3
 8010996:	d005      	beq.n	80109a4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8010998:	2301      	movs	r3, #1
 801099a:	e086      	b.n	8010aaa <HAL_RCC_ClockConfig+0x34e>
 801099c:	52002000 	.word	0x52002000
 80109a0:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80109a4:	687b      	ldr	r3, [r7, #4]
 80109a6:	681b      	ldr	r3, [r3, #0]
 80109a8:	f003 0304 	and.w	r3, r3, #4
 80109ac:	2b00      	cmp	r3, #0
 80109ae:	d010      	beq.n	80109d2 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
   }
#else
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 80109b0:	687b      	ldr	r3, [r7, #4]
 80109b2:	691a      	ldr	r2, [r3, #16]
 80109b4:	4b3f      	ldr	r3, [pc, #252]	; (8010ab4 <HAL_RCC_ClockConfig+0x358>)
 80109b6:	699b      	ldr	r3, [r3, #24]
 80109b8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80109bc:	429a      	cmp	r2, r3
 80109be:	d208      	bcs.n	80109d2 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80109c0:	4b3c      	ldr	r3, [pc, #240]	; (8010ab4 <HAL_RCC_ClockConfig+0x358>)
 80109c2:	699b      	ldr	r3, [r3, #24]
 80109c4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80109c8:	687b      	ldr	r3, [r7, #4]
 80109ca:	691b      	ldr	r3, [r3, #16]
 80109cc:	4939      	ldr	r1, [pc, #228]	; (8010ab4 <HAL_RCC_ClockConfig+0x358>)
 80109ce:	4313      	orrs	r3, r2
 80109d0:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80109d2:	687b      	ldr	r3, [r7, #4]
 80109d4:	681b      	ldr	r3, [r3, #0]
 80109d6:	f003 0308 	and.w	r3, r3, #8
 80109da:	2b00      	cmp	r3, #0
 80109dc:	d010      	beq.n	8010a00 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 80109de:	687b      	ldr	r3, [r7, #4]
 80109e0:	695a      	ldr	r2, [r3, #20]
 80109e2:	4b34      	ldr	r3, [pc, #208]	; (8010ab4 <HAL_RCC_ClockConfig+0x358>)
 80109e4:	69db      	ldr	r3, [r3, #28]
 80109e6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80109ea:	429a      	cmp	r2, r3
 80109ec:	d208      	bcs.n	8010a00 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80109ee:	4b31      	ldr	r3, [pc, #196]	; (8010ab4 <HAL_RCC_ClockConfig+0x358>)
 80109f0:	69db      	ldr	r3, [r3, #28]
 80109f2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80109f6:	687b      	ldr	r3, [r7, #4]
 80109f8:	695b      	ldr	r3, [r3, #20]
 80109fa:	492e      	ldr	r1, [pc, #184]	; (8010ab4 <HAL_RCC_ClockConfig+0x358>)
 80109fc:	4313      	orrs	r3, r2
 80109fe:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8010a00:	687b      	ldr	r3, [r7, #4]
 8010a02:	681b      	ldr	r3, [r3, #0]
 8010a04:	f003 0310 	and.w	r3, r3, #16
 8010a08:	2b00      	cmp	r3, #0
 8010a0a:	d010      	beq.n	8010a2e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8010a0c:	687b      	ldr	r3, [r7, #4]
 8010a0e:	699a      	ldr	r2, [r3, #24]
 8010a10:	4b28      	ldr	r3, [pc, #160]	; (8010ab4 <HAL_RCC_ClockConfig+0x358>)
 8010a12:	69db      	ldr	r3, [r3, #28]
 8010a14:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8010a18:	429a      	cmp	r2, r3
 8010a1a:	d208      	bcs.n	8010a2e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8010a1c:	4b25      	ldr	r3, [pc, #148]	; (8010ab4 <HAL_RCC_ClockConfig+0x358>)
 8010a1e:	69db      	ldr	r3, [r3, #28]
 8010a20:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8010a24:	687b      	ldr	r3, [r7, #4]
 8010a26:	699b      	ldr	r3, [r3, #24]
 8010a28:	4922      	ldr	r1, [pc, #136]	; (8010ab4 <HAL_RCC_ClockConfig+0x358>)
 8010a2a:	4313      	orrs	r3, r2
 8010a2c:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8010a2e:	687b      	ldr	r3, [r7, #4]
 8010a30:	681b      	ldr	r3, [r3, #0]
 8010a32:	f003 0320 	and.w	r3, r3, #32
 8010a36:	2b00      	cmp	r3, #0
 8010a38:	d010      	beq.n	8010a5c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
   }
#else
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8010a3a:	687b      	ldr	r3, [r7, #4]
 8010a3c:	69da      	ldr	r2, [r3, #28]
 8010a3e:	4b1d      	ldr	r3, [pc, #116]	; (8010ab4 <HAL_RCC_ClockConfig+0x358>)
 8010a40:	6a1b      	ldr	r3, [r3, #32]
 8010a42:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8010a46:	429a      	cmp	r2, r3
 8010a48:	d208      	bcs.n	8010a5c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8010a4a:	4b1a      	ldr	r3, [pc, #104]	; (8010ab4 <HAL_RCC_ClockConfig+0x358>)
 8010a4c:	6a1b      	ldr	r3, [r3, #32]
 8010a4e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8010a52:	687b      	ldr	r3, [r7, #4]
 8010a54:	69db      	ldr	r3, [r3, #28]
 8010a56:	4917      	ldr	r1, [pc, #92]	; (8010ab4 <HAL_RCC_ClockConfig+0x358>)
 8010a58:	4313      	orrs	r3, r2
 8010a5a:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8010a5c:	f000 f834 	bl	8010ac8 <HAL_RCC_GetSysClockFreq>
 8010a60:	4602      	mov	r2, r0
 8010a62:	4b14      	ldr	r3, [pc, #80]	; (8010ab4 <HAL_RCC_ClockConfig+0x358>)
 8010a64:	699b      	ldr	r3, [r3, #24]
 8010a66:	0a1b      	lsrs	r3, r3, #8
 8010a68:	f003 030f 	and.w	r3, r3, #15
 8010a6c:	4912      	ldr	r1, [pc, #72]	; (8010ab8 <HAL_RCC_ClockConfig+0x35c>)
 8010a6e:	5ccb      	ldrb	r3, [r1, r3]
 8010a70:	f003 031f 	and.w	r3, r3, #31
 8010a74:	fa22 f303 	lsr.w	r3, r2, r3
 8010a78:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8010a7a:	4b0e      	ldr	r3, [pc, #56]	; (8010ab4 <HAL_RCC_ClockConfig+0x358>)
 8010a7c:	699b      	ldr	r3, [r3, #24]
 8010a7e:	f003 030f 	and.w	r3, r3, #15
 8010a82:	4a0d      	ldr	r2, [pc, #52]	; (8010ab8 <HAL_RCC_ClockConfig+0x35c>)
 8010a84:	5cd3      	ldrb	r3, [r2, r3]
 8010a86:	f003 031f 	and.w	r3, r3, #31
 8010a8a:	693a      	ldr	r2, [r7, #16]
 8010a8c:	fa22 f303 	lsr.w	r3, r2, r3
 8010a90:	4a0a      	ldr	r2, [pc, #40]	; (8010abc <HAL_RCC_ClockConfig+0x360>)
 8010a92:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8010a94:	4a0a      	ldr	r2, [pc, #40]	; (8010ac0 <HAL_RCC_ClockConfig+0x364>)
 8010a96:	693b      	ldr	r3, [r7, #16]
 8010a98:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8010a9a:	4b0a      	ldr	r3, [pc, #40]	; (8010ac4 <HAL_RCC_ClockConfig+0x368>)
 8010a9c:	681b      	ldr	r3, [r3, #0]
 8010a9e:	4618      	mov	r0, r3
 8010aa0:	f7f3 f8c4 	bl	8003c2c <HAL_InitTick>
 8010aa4:	4603      	mov	r3, r0
 8010aa6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8010aa8:	7bfb      	ldrb	r3, [r7, #15]
}
 8010aaa:	4618      	mov	r0, r3
 8010aac:	3718      	adds	r7, #24
 8010aae:	46bd      	mov	sp, r7
 8010ab0:	bd80      	pop	{r7, pc}
 8010ab2:	bf00      	nop
 8010ab4:	58024400 	.word	0x58024400
 8010ab8:	0802e3c4 	.word	0x0802e3c4
 8010abc:	24000040 	.word	0x24000040
 8010ac0:	2400003c 	.word	0x2400003c
 8010ac4:	24000044 	.word	0x24000044

08010ac8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8010ac8:	b480      	push	{r7}
 8010aca:	b089      	sub	sp, #36	; 0x24
 8010acc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8010ace:	4bb3      	ldr	r3, [pc, #716]	; (8010d9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8010ad0:	691b      	ldr	r3, [r3, #16]
 8010ad2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8010ad6:	2b18      	cmp	r3, #24
 8010ad8:	f200 8155 	bhi.w	8010d86 <HAL_RCC_GetSysClockFreq+0x2be>
 8010adc:	a201      	add	r2, pc, #4	; (adr r2, 8010ae4 <HAL_RCC_GetSysClockFreq+0x1c>)
 8010ade:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010ae2:	bf00      	nop
 8010ae4:	08010b49 	.word	0x08010b49
 8010ae8:	08010d87 	.word	0x08010d87
 8010aec:	08010d87 	.word	0x08010d87
 8010af0:	08010d87 	.word	0x08010d87
 8010af4:	08010d87 	.word	0x08010d87
 8010af8:	08010d87 	.word	0x08010d87
 8010afc:	08010d87 	.word	0x08010d87
 8010b00:	08010d87 	.word	0x08010d87
 8010b04:	08010b6f 	.word	0x08010b6f
 8010b08:	08010d87 	.word	0x08010d87
 8010b0c:	08010d87 	.word	0x08010d87
 8010b10:	08010d87 	.word	0x08010d87
 8010b14:	08010d87 	.word	0x08010d87
 8010b18:	08010d87 	.word	0x08010d87
 8010b1c:	08010d87 	.word	0x08010d87
 8010b20:	08010d87 	.word	0x08010d87
 8010b24:	08010b75 	.word	0x08010b75
 8010b28:	08010d87 	.word	0x08010d87
 8010b2c:	08010d87 	.word	0x08010d87
 8010b30:	08010d87 	.word	0x08010d87
 8010b34:	08010d87 	.word	0x08010d87
 8010b38:	08010d87 	.word	0x08010d87
 8010b3c:	08010d87 	.word	0x08010d87
 8010b40:	08010d87 	.word	0x08010d87
 8010b44:	08010b7b 	.word	0x08010b7b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8010b48:	4b94      	ldr	r3, [pc, #592]	; (8010d9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8010b4a:	681b      	ldr	r3, [r3, #0]
 8010b4c:	f003 0320 	and.w	r3, r3, #32
 8010b50:	2b00      	cmp	r3, #0
 8010b52:	d009      	beq.n	8010b68 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8010b54:	4b91      	ldr	r3, [pc, #580]	; (8010d9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8010b56:	681b      	ldr	r3, [r3, #0]
 8010b58:	08db      	lsrs	r3, r3, #3
 8010b5a:	f003 0303 	and.w	r3, r3, #3
 8010b5e:	4a90      	ldr	r2, [pc, #576]	; (8010da0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8010b60:	fa22 f303 	lsr.w	r3, r2, r3
 8010b64:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8010b66:	e111      	b.n	8010d8c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8010b68:	4b8d      	ldr	r3, [pc, #564]	; (8010da0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8010b6a:	61bb      	str	r3, [r7, #24]
    break;
 8010b6c:	e10e      	b.n	8010d8c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8010b6e:	4b8d      	ldr	r3, [pc, #564]	; (8010da4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8010b70:	61bb      	str	r3, [r7, #24]
    break;
 8010b72:	e10b      	b.n	8010d8c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8010b74:	4b8c      	ldr	r3, [pc, #560]	; (8010da8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8010b76:	61bb      	str	r3, [r7, #24]
    break;
 8010b78:	e108      	b.n	8010d8c <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8010b7a:	4b88      	ldr	r3, [pc, #544]	; (8010d9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8010b7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010b7e:	f003 0303 	and.w	r3, r3, #3
 8010b82:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8010b84:	4b85      	ldr	r3, [pc, #532]	; (8010d9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8010b86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010b88:	091b      	lsrs	r3, r3, #4
 8010b8a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010b8e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8010b90:	4b82      	ldr	r3, [pc, #520]	; (8010d9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8010b92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010b94:	f003 0301 	and.w	r3, r3, #1
 8010b98:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8010b9a:	4b80      	ldr	r3, [pc, #512]	; (8010d9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8010b9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010b9e:	08db      	lsrs	r3, r3, #3
 8010ba0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8010ba4:	68fa      	ldr	r2, [r7, #12]
 8010ba6:	fb02 f303 	mul.w	r3, r2, r3
 8010baa:	ee07 3a90 	vmov	s15, r3
 8010bae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010bb2:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8010bb6:	693b      	ldr	r3, [r7, #16]
 8010bb8:	2b00      	cmp	r3, #0
 8010bba:	f000 80e1 	beq.w	8010d80 <HAL_RCC_GetSysClockFreq+0x2b8>
 8010bbe:	697b      	ldr	r3, [r7, #20]
 8010bc0:	2b02      	cmp	r3, #2
 8010bc2:	f000 8083 	beq.w	8010ccc <HAL_RCC_GetSysClockFreq+0x204>
 8010bc6:	697b      	ldr	r3, [r7, #20]
 8010bc8:	2b02      	cmp	r3, #2
 8010bca:	f200 80a1 	bhi.w	8010d10 <HAL_RCC_GetSysClockFreq+0x248>
 8010bce:	697b      	ldr	r3, [r7, #20]
 8010bd0:	2b00      	cmp	r3, #0
 8010bd2:	d003      	beq.n	8010bdc <HAL_RCC_GetSysClockFreq+0x114>
 8010bd4:	697b      	ldr	r3, [r7, #20]
 8010bd6:	2b01      	cmp	r3, #1
 8010bd8:	d056      	beq.n	8010c88 <HAL_RCC_GetSysClockFreq+0x1c0>
 8010bda:	e099      	b.n	8010d10 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8010bdc:	4b6f      	ldr	r3, [pc, #444]	; (8010d9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8010bde:	681b      	ldr	r3, [r3, #0]
 8010be0:	f003 0320 	and.w	r3, r3, #32
 8010be4:	2b00      	cmp	r3, #0
 8010be6:	d02d      	beq.n	8010c44 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8010be8:	4b6c      	ldr	r3, [pc, #432]	; (8010d9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8010bea:	681b      	ldr	r3, [r3, #0]
 8010bec:	08db      	lsrs	r3, r3, #3
 8010bee:	f003 0303 	and.w	r3, r3, #3
 8010bf2:	4a6b      	ldr	r2, [pc, #428]	; (8010da0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8010bf4:	fa22 f303 	lsr.w	r3, r2, r3
 8010bf8:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8010bfa:	687b      	ldr	r3, [r7, #4]
 8010bfc:	ee07 3a90 	vmov	s15, r3
 8010c00:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010c04:	693b      	ldr	r3, [r7, #16]
 8010c06:	ee07 3a90 	vmov	s15, r3
 8010c0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010c0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010c12:	4b62      	ldr	r3, [pc, #392]	; (8010d9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8010c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010c16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010c1a:	ee07 3a90 	vmov	s15, r3
 8010c1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010c22:	ed97 6a02 	vldr	s12, [r7, #8]
 8010c26:	eddf 5a61 	vldr	s11, [pc, #388]	; 8010dac <HAL_RCC_GetSysClockFreq+0x2e4>
 8010c2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010c2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010c32:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010c36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010c3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010c3e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8010c42:	e087      	b.n	8010d54 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8010c44:	693b      	ldr	r3, [r7, #16]
 8010c46:	ee07 3a90 	vmov	s15, r3
 8010c4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010c4e:	eddf 6a58 	vldr	s13, [pc, #352]	; 8010db0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8010c52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010c56:	4b51      	ldr	r3, [pc, #324]	; (8010d9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8010c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010c5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010c5e:	ee07 3a90 	vmov	s15, r3
 8010c62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010c66:	ed97 6a02 	vldr	s12, [r7, #8]
 8010c6a:	eddf 5a50 	vldr	s11, [pc, #320]	; 8010dac <HAL_RCC_GetSysClockFreq+0x2e4>
 8010c6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010c72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010c76:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010c7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010c7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010c82:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8010c86:	e065      	b.n	8010d54 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8010c88:	693b      	ldr	r3, [r7, #16]
 8010c8a:	ee07 3a90 	vmov	s15, r3
 8010c8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010c92:	eddf 6a48 	vldr	s13, [pc, #288]	; 8010db4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8010c96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010c9a:	4b40      	ldr	r3, [pc, #256]	; (8010d9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8010c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010c9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010ca2:	ee07 3a90 	vmov	s15, r3
 8010ca6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010caa:	ed97 6a02 	vldr	s12, [r7, #8]
 8010cae:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8010dac <HAL_RCC_GetSysClockFreq+0x2e4>
 8010cb2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010cb6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010cba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010cbe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010cc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010cc6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8010cca:	e043      	b.n	8010d54 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8010ccc:	693b      	ldr	r3, [r7, #16]
 8010cce:	ee07 3a90 	vmov	s15, r3
 8010cd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010cd6:	eddf 6a38 	vldr	s13, [pc, #224]	; 8010db8 <HAL_RCC_GetSysClockFreq+0x2f0>
 8010cda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010cde:	4b2f      	ldr	r3, [pc, #188]	; (8010d9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8010ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010ce2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010ce6:	ee07 3a90 	vmov	s15, r3
 8010cea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010cee:	ed97 6a02 	vldr	s12, [r7, #8]
 8010cf2:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8010dac <HAL_RCC_GetSysClockFreq+0x2e4>
 8010cf6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010cfa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010cfe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010d02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010d06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010d0a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8010d0e:	e021      	b.n	8010d54 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8010d10:	693b      	ldr	r3, [r7, #16]
 8010d12:	ee07 3a90 	vmov	s15, r3
 8010d16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010d1a:	eddf 6a26 	vldr	s13, [pc, #152]	; 8010db4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8010d1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010d22:	4b1e      	ldr	r3, [pc, #120]	; (8010d9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8010d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010d26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010d2a:	ee07 3a90 	vmov	s15, r3
 8010d2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010d32:	ed97 6a02 	vldr	s12, [r7, #8]
 8010d36:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8010dac <HAL_RCC_GetSysClockFreq+0x2e4>
 8010d3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010d3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010d42:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010d46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010d4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010d4e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8010d52:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8010d54:	4b11      	ldr	r3, [pc, #68]	; (8010d9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8010d56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010d58:	0a5b      	lsrs	r3, r3, #9
 8010d5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010d5e:	3301      	adds	r3, #1
 8010d60:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8010d62:	683b      	ldr	r3, [r7, #0]
 8010d64:	ee07 3a90 	vmov	s15, r3
 8010d68:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8010d6c:	edd7 6a07 	vldr	s13, [r7, #28]
 8010d70:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010d74:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010d78:	ee17 3a90 	vmov	r3, s15
 8010d7c:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8010d7e:	e005      	b.n	8010d8c <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8010d80:	2300      	movs	r3, #0
 8010d82:	61bb      	str	r3, [r7, #24]
    break;
 8010d84:	e002      	b.n	8010d8c <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8010d86:	4b07      	ldr	r3, [pc, #28]	; (8010da4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8010d88:	61bb      	str	r3, [r7, #24]
    break;
 8010d8a:	bf00      	nop
  }

  return sysclockfreq;
 8010d8c:	69bb      	ldr	r3, [r7, #24]
}
 8010d8e:	4618      	mov	r0, r3
 8010d90:	3724      	adds	r7, #36	; 0x24
 8010d92:	46bd      	mov	sp, r7
 8010d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d98:	4770      	bx	lr
 8010d9a:	bf00      	nop
 8010d9c:	58024400 	.word	0x58024400
 8010da0:	03d09000 	.word	0x03d09000
 8010da4:	003d0900 	.word	0x003d0900
 8010da8:	016e3600 	.word	0x016e3600
 8010dac:	46000000 	.word	0x46000000
 8010db0:	4c742400 	.word	0x4c742400
 8010db4:	4a742400 	.word	0x4a742400
 8010db8:	4bb71b00 	.word	0x4bb71b00

08010dbc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8010dbc:	b580      	push	{r7, lr}
 8010dbe:	b082      	sub	sp, #8
 8010dc0:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 8010dc2:	f7ff fe81 	bl	8010ac8 <HAL_RCC_GetSysClockFreq>
 8010dc6:	4602      	mov	r2, r0
 8010dc8:	4b10      	ldr	r3, [pc, #64]	; (8010e0c <HAL_RCC_GetHCLKFreq+0x50>)
 8010dca:	699b      	ldr	r3, [r3, #24]
 8010dcc:	0a1b      	lsrs	r3, r3, #8
 8010dce:	f003 030f 	and.w	r3, r3, #15
 8010dd2:	490f      	ldr	r1, [pc, #60]	; (8010e10 <HAL_RCC_GetHCLKFreq+0x54>)
 8010dd4:	5ccb      	ldrb	r3, [r1, r3]
 8010dd6:	f003 031f 	and.w	r3, r3, #31
 8010dda:	fa22 f303 	lsr.w	r3, r2, r3
 8010dde:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8010de0:	4b0a      	ldr	r3, [pc, #40]	; (8010e0c <HAL_RCC_GetHCLKFreq+0x50>)
 8010de2:	699b      	ldr	r3, [r3, #24]
 8010de4:	f003 030f 	and.w	r3, r3, #15
 8010de8:	4a09      	ldr	r2, [pc, #36]	; (8010e10 <HAL_RCC_GetHCLKFreq+0x54>)
 8010dea:	5cd3      	ldrb	r3, [r2, r3]
 8010dec:	f003 031f 	and.w	r3, r3, #31
 8010df0:	687a      	ldr	r2, [r7, #4]
 8010df2:	fa22 f303 	lsr.w	r3, r2, r3
 8010df6:	4a07      	ldr	r2, [pc, #28]	; (8010e14 <HAL_RCC_GetHCLKFreq+0x58>)
 8010df8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8010dfa:	4a07      	ldr	r2, [pc, #28]	; (8010e18 <HAL_RCC_GetHCLKFreq+0x5c>)
 8010dfc:	687b      	ldr	r3, [r7, #4]
 8010dfe:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8010e00:	4b04      	ldr	r3, [pc, #16]	; (8010e14 <HAL_RCC_GetHCLKFreq+0x58>)
 8010e02:	681b      	ldr	r3, [r3, #0]
}
 8010e04:	4618      	mov	r0, r3
 8010e06:	3708      	adds	r7, #8
 8010e08:	46bd      	mov	sp, r7
 8010e0a:	bd80      	pop	{r7, pc}
 8010e0c:	58024400 	.word	0x58024400
 8010e10:	0802e3c4 	.word	0x0802e3c4
 8010e14:	24000040 	.word	0x24000040
 8010e18:	2400003c 	.word	0x2400003c

08010e1c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8010e1c:	b580      	push	{r7, lr}
 8010e1e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 8010e20:	f7ff ffcc 	bl	8010dbc <HAL_RCC_GetHCLKFreq>
 8010e24:	4602      	mov	r2, r0
 8010e26:	4b06      	ldr	r3, [pc, #24]	; (8010e40 <HAL_RCC_GetPCLK1Freq+0x24>)
 8010e28:	69db      	ldr	r3, [r3, #28]
 8010e2a:	091b      	lsrs	r3, r3, #4
 8010e2c:	f003 0307 	and.w	r3, r3, #7
 8010e30:	4904      	ldr	r1, [pc, #16]	; (8010e44 <HAL_RCC_GetPCLK1Freq+0x28>)
 8010e32:	5ccb      	ldrb	r3, [r1, r3]
 8010e34:	f003 031f 	and.w	r3, r3, #31
 8010e38:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8010e3c:	4618      	mov	r0, r3
 8010e3e:	bd80      	pop	{r7, pc}
 8010e40:	58024400 	.word	0x58024400
 8010e44:	0802e3c4 	.word	0x0802e3c4

08010e48 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8010e48:	b580      	push	{r7, lr}
 8010e4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 8010e4c:	f7ff ffb6 	bl	8010dbc <HAL_RCC_GetHCLKFreq>
 8010e50:	4602      	mov	r2, r0
 8010e52:	4b06      	ldr	r3, [pc, #24]	; (8010e6c <HAL_RCC_GetPCLK2Freq+0x24>)
 8010e54:	69db      	ldr	r3, [r3, #28]
 8010e56:	0a1b      	lsrs	r3, r3, #8
 8010e58:	f003 0307 	and.w	r3, r3, #7
 8010e5c:	4904      	ldr	r1, [pc, #16]	; (8010e70 <HAL_RCC_GetPCLK2Freq+0x28>)
 8010e5e:	5ccb      	ldrb	r3, [r1, r3]
 8010e60:	f003 031f 	and.w	r3, r3, #31
 8010e64:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8010e68:	4618      	mov	r0, r3
 8010e6a:	bd80      	pop	{r7, pc}
 8010e6c:	58024400 	.word	0x58024400
 8010e70:	0802e3c4 	.word	0x0802e3c4

08010e74 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8010e74:	b480      	push	{r7}
 8010e76:	b083      	sub	sp, #12
 8010e78:	af00      	add	r7, sp, #0
 8010e7a:	6078      	str	r0, [r7, #4]
 8010e7c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8010e7e:	687b      	ldr	r3, [r7, #4]
 8010e80:	223f      	movs	r2, #63	; 0x3f
 8010e82:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8010e84:	4b1a      	ldr	r3, [pc, #104]	; (8010ef0 <HAL_RCC_GetClockConfig+0x7c>)
 8010e86:	691b      	ldr	r3, [r3, #16]
 8010e88:	f003 0207 	and.w	r2, r3, #7
 8010e8c:	687b      	ldr	r3, [r7, #4]
 8010e8e:	605a      	str	r2, [r3, #4]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
#else
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE);
 8010e90:	4b17      	ldr	r3, [pc, #92]	; (8010ef0 <HAL_RCC_GetClockConfig+0x7c>)
 8010e92:	699b      	ldr	r3, [r3, #24]
 8010e94:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8010e98:	687b      	ldr	r3, [r7, #4]
 8010e9a:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE);
 8010e9c:	4b14      	ldr	r3, [pc, #80]	; (8010ef0 <HAL_RCC_GetClockConfig+0x7c>)
 8010e9e:	699b      	ldr	r3, [r3, #24]
 8010ea0:	f003 020f 	and.w	r2, r3, #15
 8010ea4:	687b      	ldr	r3, [r7, #4]
 8010ea6:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE);
 8010ea8:	4b11      	ldr	r3, [pc, #68]	; (8010ef0 <HAL_RCC_GetClockConfig+0x7c>)
 8010eaa:	699b      	ldr	r3, [r3, #24]
 8010eac:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8010eb0:	687b      	ldr	r3, [r7, #4]
 8010eb2:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1);
 8010eb4:	4b0e      	ldr	r3, [pc, #56]	; (8010ef0 <HAL_RCC_GetClockConfig+0x7c>)
 8010eb6:	69db      	ldr	r3, [r3, #28]
 8010eb8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8010ebc:	687b      	ldr	r3, [r7, #4]
 8010ebe:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2);
 8010ec0:	4b0b      	ldr	r3, [pc, #44]	; (8010ef0 <HAL_RCC_GetClockConfig+0x7c>)
 8010ec2:	69db      	ldr	r3, [r3, #28]
 8010ec4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8010ec8:	687b      	ldr	r3, [r7, #4]
 8010eca:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
 8010ecc:	4b08      	ldr	r3, [pc, #32]	; (8010ef0 <HAL_RCC_GetClockConfig+0x7c>)
 8010ece:	6a1b      	ldr	r3, [r3, #32]
 8010ed0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8010ed4:	687b      	ldr	r3, [r7, #4]
 8010ed6:	61da      	str	r2, [r3, #28]
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8010ed8:	4b06      	ldr	r3, [pc, #24]	; (8010ef4 <HAL_RCC_GetClockConfig+0x80>)
 8010eda:	681b      	ldr	r3, [r3, #0]
 8010edc:	f003 020f 	and.w	r2, r3, #15
 8010ee0:	683b      	ldr	r3, [r7, #0]
 8010ee2:	601a      	str	r2, [r3, #0]
}
 8010ee4:	bf00      	nop
 8010ee6:	370c      	adds	r7, #12
 8010ee8:	46bd      	mov	sp, r7
 8010eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010eee:	4770      	bx	lr
 8010ef0:	58024400 	.word	0x58024400
 8010ef4:	52002000 	.word	0x52002000

08010ef8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8010ef8:	b580      	push	{r7, lr}
 8010efa:	b086      	sub	sp, #24
 8010efc:	af00      	add	r7, sp, #0
 8010efe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8010f00:	2300      	movs	r3, #0
 8010f02:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8010f04:	2300      	movs	r3, #0
 8010f06:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8010f08:	687b      	ldr	r3, [r7, #4]
 8010f0a:	681b      	ldr	r3, [r3, #0]
 8010f0c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8010f10:	2b00      	cmp	r3, #0
 8010f12:	d03f      	beq.n	8010f94 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8010f14:	687b      	ldr	r3, [r7, #4]
 8010f16:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010f18:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8010f1c:	d02a      	beq.n	8010f74 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8010f1e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8010f22:	d824      	bhi.n	8010f6e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8010f24:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8010f28:	d018      	beq.n	8010f5c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8010f2a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8010f2e:	d81e      	bhi.n	8010f6e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8010f30:	2b00      	cmp	r3, #0
 8010f32:	d003      	beq.n	8010f3c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8010f34:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8010f38:	d007      	beq.n	8010f4a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8010f3a:	e018      	b.n	8010f6e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8010f3c:	4ba6      	ldr	r3, [pc, #664]	; (80111d8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8010f3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010f40:	4aa5      	ldr	r2, [pc, #660]	; (80111d8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8010f42:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8010f46:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8010f48:	e015      	b.n	8010f76 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8010f4a:	687b      	ldr	r3, [r7, #4]
 8010f4c:	3304      	adds	r3, #4
 8010f4e:	2102      	movs	r1, #2
 8010f50:	4618      	mov	r0, r3
 8010f52:	f001 ff17 	bl	8012d84 <RCCEx_PLL2_Config>
 8010f56:	4603      	mov	r3, r0
 8010f58:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8010f5a:	e00c      	b.n	8010f76 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8010f5c:	687b      	ldr	r3, [r7, #4]
 8010f5e:	3324      	adds	r3, #36	; 0x24
 8010f60:	2102      	movs	r1, #2
 8010f62:	4618      	mov	r0, r3
 8010f64:	f001 ffc0 	bl	8012ee8 <RCCEx_PLL3_Config>
 8010f68:	4603      	mov	r3, r0
 8010f6a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8010f6c:	e003      	b.n	8010f76 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8010f6e:	2301      	movs	r3, #1
 8010f70:	75fb      	strb	r3, [r7, #23]
      break;
 8010f72:	e000      	b.n	8010f76 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8010f74:	bf00      	nop
    }

    if(ret == HAL_OK)
 8010f76:	7dfb      	ldrb	r3, [r7, #23]
 8010f78:	2b00      	cmp	r3, #0
 8010f7a:	d109      	bne.n	8010f90 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8010f7c:	4b96      	ldr	r3, [pc, #600]	; (80111d8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8010f7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010f80:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8010f84:	687b      	ldr	r3, [r7, #4]
 8010f86:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010f88:	4993      	ldr	r1, [pc, #588]	; (80111d8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8010f8a:	4313      	orrs	r3, r2
 8010f8c:	650b      	str	r3, [r1, #80]	; 0x50
 8010f8e:	e001      	b.n	8010f94 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010f90:	7dfb      	ldrb	r3, [r7, #23]
 8010f92:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8010f94:	687b      	ldr	r3, [r7, #4]
 8010f96:	681b      	ldr	r3, [r3, #0]
 8010f98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010f9c:	2b00      	cmp	r3, #0
 8010f9e:	d03d      	beq.n	801101c <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8010fa0:	687b      	ldr	r3, [r7, #4]
 8010fa2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010fa4:	2b04      	cmp	r3, #4
 8010fa6:	d826      	bhi.n	8010ff6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8010fa8:	a201      	add	r2, pc, #4	; (adr r2, 8010fb0 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8010faa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010fae:	bf00      	nop
 8010fb0:	08010fc5 	.word	0x08010fc5
 8010fb4:	08010fd3 	.word	0x08010fd3
 8010fb8:	08010fe5 	.word	0x08010fe5
 8010fbc:	08010ffd 	.word	0x08010ffd
 8010fc0:	08010ffd 	.word	0x08010ffd
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8010fc4:	4b84      	ldr	r3, [pc, #528]	; (80111d8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8010fc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010fc8:	4a83      	ldr	r2, [pc, #524]	; (80111d8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8010fca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8010fce:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8010fd0:	e015      	b.n	8010ffe <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8010fd2:	687b      	ldr	r3, [r7, #4]
 8010fd4:	3304      	adds	r3, #4
 8010fd6:	2100      	movs	r1, #0
 8010fd8:	4618      	mov	r0, r3
 8010fda:	f001 fed3 	bl	8012d84 <RCCEx_PLL2_Config>
 8010fde:	4603      	mov	r3, r0
 8010fe0:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8010fe2:	e00c      	b.n	8010ffe <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8010fe4:	687b      	ldr	r3, [r7, #4]
 8010fe6:	3324      	adds	r3, #36	; 0x24
 8010fe8:	2100      	movs	r1, #0
 8010fea:	4618      	mov	r0, r3
 8010fec:	f001 ff7c 	bl	8012ee8 <RCCEx_PLL3_Config>
 8010ff0:	4603      	mov	r3, r0
 8010ff2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8010ff4:	e003      	b.n	8010ffe <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8010ff6:	2301      	movs	r3, #1
 8010ff8:	75fb      	strb	r3, [r7, #23]
      break;
 8010ffa:	e000      	b.n	8010ffe <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8010ffc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8010ffe:	7dfb      	ldrb	r3, [r7, #23]
 8011000:	2b00      	cmp	r3, #0
 8011002:	d109      	bne.n	8011018 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8011004:	4b74      	ldr	r3, [pc, #464]	; (80111d8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8011006:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011008:	f023 0207 	bic.w	r2, r3, #7
 801100c:	687b      	ldr	r3, [r7, #4]
 801100e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011010:	4971      	ldr	r1, [pc, #452]	; (80111d8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8011012:	4313      	orrs	r3, r2
 8011014:	650b      	str	r3, [r1, #80]	; 0x50
 8011016:	e001      	b.n	801101c <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8011018:	7dfb      	ldrb	r3, [r7, #23]
 801101a:	75bb      	strb	r3, [r7, #22]

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 801101c:	687b      	ldr	r3, [r7, #4]
 801101e:	681b      	ldr	r3, [r3, #0]
 8011020:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8011024:	2b00      	cmp	r3, #0
 8011026:	d04a      	beq.n	80110be <HAL_RCCEx_PeriphCLKConfig+0x1c6>
  {
    switch(PeriphClkInit->Sai2AClockSelection)
 8011028:	687b      	ldr	r3, [r7, #4]
 801102a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801102c:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8011030:	d031      	beq.n	8011096 <HAL_RCCEx_PeriphCLKConfig+0x19e>
 8011032:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8011036:	d82b      	bhi.n	8011090 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8011038:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801103c:	d02d      	beq.n	801109a <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 801103e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011042:	d825      	bhi.n	8011090 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8011044:	2bc0      	cmp	r3, #192	; 0xc0
 8011046:	d02a      	beq.n	801109e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8011048:	2bc0      	cmp	r3, #192	; 0xc0
 801104a:	d821      	bhi.n	8011090 <HAL_RCCEx_PeriphCLKConfig+0x198>
 801104c:	2b80      	cmp	r3, #128	; 0x80
 801104e:	d016      	beq.n	801107e <HAL_RCCEx_PeriphCLKConfig+0x186>
 8011050:	2b80      	cmp	r3, #128	; 0x80
 8011052:	d81d      	bhi.n	8011090 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8011054:	2b00      	cmp	r3, #0
 8011056:	d002      	beq.n	801105e <HAL_RCCEx_PeriphCLKConfig+0x166>
 8011058:	2b40      	cmp	r3, #64	; 0x40
 801105a:	d007      	beq.n	801106c <HAL_RCCEx_PeriphCLKConfig+0x174>
 801105c:	e018      	b.n	8011090 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
    case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
      /* Enable SAI2A Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801105e:	4b5e      	ldr	r3, [pc, #376]	; (80111d8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8011060:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011062:	4a5d      	ldr	r2, [pc, #372]	; (80111d8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8011064:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8011068:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 801106a:	e019      	b.n	80110a0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>

    case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 801106c:	687b      	ldr	r3, [r7, #4]
 801106e:	3304      	adds	r3, #4
 8011070:	2100      	movs	r1, #0
 8011072:	4618      	mov	r0, r3
 8011074:	f001 fe86 	bl	8012d84 <RCCEx_PLL2_Config>
 8011078:	4603      	mov	r3, r0
 801107a:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 801107c:	e010      	b.n	80110a0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>

    case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 801107e:	687b      	ldr	r3, [r7, #4]
 8011080:	3324      	adds	r3, #36	; 0x24
 8011082:	2100      	movs	r1, #0
 8011084:	4618      	mov	r0, r3
 8011086:	f001 ff2f 	bl	8012ee8 <RCCEx_PLL3_Config>
 801108a:	4603      	mov	r3, r0
 801108c:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 801108e:	e007      	b.n	80110a0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      /* SPDIF clock is used as source of SAI2A clock */
      /* SAI2A clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8011090:	2301      	movs	r3, #1
 8011092:	75fb      	strb	r3, [r7, #23]
      break;
 8011094:	e004      	b.n	80110a0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 8011096:	bf00      	nop
 8011098:	e002      	b.n	80110a0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 801109a:	bf00      	nop
 801109c:	e000      	b.n	80110a0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 801109e:	bf00      	nop
    }

    if(ret == HAL_OK)
 80110a0:	7dfb      	ldrb	r3, [r7, #23]
 80110a2:	2b00      	cmp	r3, #0
 80110a4:	d109      	bne.n	80110ba <HAL_RCCEx_PeriphCLKConfig+0x1c2>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 80110a6:	4b4c      	ldr	r3, [pc, #304]	; (80111d8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80110a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80110aa:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80110ae:	687b      	ldr	r3, [r7, #4]
 80110b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80110b2:	4949      	ldr	r1, [pc, #292]	; (80111d8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80110b4:	4313      	orrs	r3, r2
 80110b6:	650b      	str	r3, [r1, #80]	; 0x50
 80110b8:	e001      	b.n	80110be <HAL_RCCEx_PeriphCLKConfig+0x1c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80110ba:	7dfb      	ldrb	r3, [r7, #23]
 80110bc:	75bb      	strb	r3, [r7, #22]
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 80110be:	687b      	ldr	r3, [r7, #4]
 80110c0:	681b      	ldr	r3, [r3, #0]
 80110c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80110c6:	2b00      	cmp	r3, #0
 80110c8:	d04f      	beq.n	801116a <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    switch(PeriphClkInit->Sai2BClockSelection)
 80110ca:	687b      	ldr	r3, [r7, #4]
 80110cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80110ce:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 80110d2:	d036      	beq.n	8011142 <HAL_RCCEx_PeriphCLKConfig+0x24a>
 80110d4:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 80110d8:	d830      	bhi.n	801113c <HAL_RCCEx_PeriphCLKConfig+0x244>
 80110da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80110de:	d032      	beq.n	8011146 <HAL_RCCEx_PeriphCLKConfig+0x24e>
 80110e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80110e4:	d82a      	bhi.n	801113c <HAL_RCCEx_PeriphCLKConfig+0x244>
 80110e6:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80110ea:	d02e      	beq.n	801114a <HAL_RCCEx_PeriphCLKConfig+0x252>
 80110ec:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80110f0:	d824      	bhi.n	801113c <HAL_RCCEx_PeriphCLKConfig+0x244>
 80110f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80110f6:	d018      	beq.n	801112a <HAL_RCCEx_PeriphCLKConfig+0x232>
 80110f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80110fc:	d81e      	bhi.n	801113c <HAL_RCCEx_PeriphCLKConfig+0x244>
 80110fe:	2b00      	cmp	r3, #0
 8011100:	d003      	beq.n	801110a <HAL_RCCEx_PeriphCLKConfig+0x212>
 8011102:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011106:	d007      	beq.n	8011118 <HAL_RCCEx_PeriphCLKConfig+0x220>
 8011108:	e018      	b.n	801113c <HAL_RCCEx_PeriphCLKConfig+0x244>
    {
    case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801110a:	4b33      	ldr	r3, [pc, #204]	; (80111d8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 801110c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801110e:	4a32      	ldr	r2, [pc, #200]	; (80111d8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8011110:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8011114:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 8011116:	e019      	b.n	801114c <HAL_RCCEx_PeriphCLKConfig+0x254>

    case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8011118:	687b      	ldr	r3, [r7, #4]
 801111a:	3304      	adds	r3, #4
 801111c:	2100      	movs	r1, #0
 801111e:	4618      	mov	r0, r3
 8011120:	f001 fe30 	bl	8012d84 <RCCEx_PLL2_Config>
 8011124:	4603      	mov	r3, r0
 8011126:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 8011128:	e010      	b.n	801114c <HAL_RCCEx_PeriphCLKConfig+0x254>

    case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 801112a:	687b      	ldr	r3, [r7, #4]
 801112c:	3324      	adds	r3, #36	; 0x24
 801112e:	2100      	movs	r1, #0
 8011130:	4618      	mov	r0, r3
 8011132:	f001 fed9 	bl	8012ee8 <RCCEx_PLL3_Config>
 8011136:	4603      	mov	r3, r0
 8011138:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 801113a:	e007      	b.n	801114c <HAL_RCCEx_PeriphCLKConfig+0x254>
      /* SPDIF clock is used as source of SAI2B clock */
      /* SAI2B clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 801113c:	2301      	movs	r3, #1
 801113e:	75fb      	strb	r3, [r7, #23]
      break;
 8011140:	e004      	b.n	801114c <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 8011142:	bf00      	nop
 8011144:	e002      	b.n	801114c <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 8011146:	bf00      	nop
 8011148:	e000      	b.n	801114c <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 801114a:	bf00      	nop
    }

    if(ret == HAL_OK)
 801114c:	7dfb      	ldrb	r3, [r7, #23]
 801114e:	2b00      	cmp	r3, #0
 8011150:	d109      	bne.n	8011166 <HAL_RCCEx_PeriphCLKConfig+0x26e>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8011152:	4b21      	ldr	r3, [pc, #132]	; (80111d8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8011154:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011156:	f423 6260 	bic.w	r2, r3, #3584	; 0xe00
 801115a:	687b      	ldr	r3, [r7, #4]
 801115c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801115e:	491e      	ldr	r1, [pc, #120]	; (80111d8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8011160:	4313      	orrs	r3, r2
 8011162:	650b      	str	r3, [r1, #80]	; 0x50
 8011164:	e001      	b.n	801116a <HAL_RCCEx_PeriphCLKConfig+0x272>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8011166:	7dfb      	ldrb	r3, [r7, #23]
 8011168:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 801116a:	687b      	ldr	r3, [r7, #4]
 801116c:	681b      	ldr	r3, [r3, #0]
 801116e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8011172:	2b00      	cmp	r3, #0
 8011174:	d034      	beq.n	80111e0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
  {
    switch(PeriphClkInit->OspiClockSelection)
 8011176:	687b      	ldr	r3, [r7, #4]
 8011178:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801117a:	2b30      	cmp	r3, #48	; 0x30
 801117c:	d01c      	beq.n	80111b8 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
 801117e:	2b30      	cmp	r3, #48	; 0x30
 8011180:	d817      	bhi.n	80111b2 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8011182:	2b20      	cmp	r3, #32
 8011184:	d00c      	beq.n	80111a0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8011186:	2b20      	cmp	r3, #32
 8011188:	d813      	bhi.n	80111b2 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 801118a:	2b00      	cmp	r3, #0
 801118c:	d016      	beq.n	80111bc <HAL_RCCEx_PeriphCLKConfig+0x2c4>
 801118e:	2b10      	cmp	r3, #16
 8011190:	d10f      	bne.n	80111b2 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8011192:	4b11      	ldr	r3, [pc, #68]	; (80111d8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8011194:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011196:	4a10      	ldr	r2, [pc, #64]	; (80111d8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8011198:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801119c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 801119e:	e00e      	b.n	80111be <HAL_RCCEx_PeriphCLKConfig+0x2c6>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80111a0:	687b      	ldr	r3, [r7, #4]
 80111a2:	3304      	adds	r3, #4
 80111a4:	2102      	movs	r1, #2
 80111a6:	4618      	mov	r0, r3
 80111a8:	f001 fdec 	bl	8012d84 <RCCEx_PLL2_Config>
 80111ac:	4603      	mov	r3, r0
 80111ae:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 80111b0:	e005      	b.n	80111be <HAL_RCCEx_PeriphCLKConfig+0x2c6>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80111b2:	2301      	movs	r3, #1
 80111b4:	75fb      	strb	r3, [r7, #23]
      break;
 80111b6:	e002      	b.n	80111be <HAL_RCCEx_PeriphCLKConfig+0x2c6>
      break;
 80111b8:	bf00      	nop
 80111ba:	e000      	b.n	80111be <HAL_RCCEx_PeriphCLKConfig+0x2c6>
      break;
 80111bc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80111be:	7dfb      	ldrb	r3, [r7, #23]
 80111c0:	2b00      	cmp	r3, #0
 80111c2:	d10b      	bne.n	80111dc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80111c4:	4b04      	ldr	r3, [pc, #16]	; (80111d8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80111c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80111c8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80111cc:	687b      	ldr	r3, [r7, #4]
 80111ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80111d0:	4901      	ldr	r1, [pc, #4]	; (80111d8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80111d2:	4313      	orrs	r3, r2
 80111d4:	64cb      	str	r3, [r1, #76]	; 0x4c
 80111d6:	e003      	b.n	80111e0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
 80111d8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80111dc:	7dfb      	ldrb	r3, [r7, #23]
 80111de:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80111e0:	687b      	ldr	r3, [r7, #4]
 80111e2:	681b      	ldr	r3, [r3, #0]
 80111e4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80111e8:	2b00      	cmp	r3, #0
 80111ea:	d047      	beq.n	801127c <HAL_RCCEx_PeriphCLKConfig+0x384>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80111ec:	687b      	ldr	r3, [r7, #4]
 80111ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80111f0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80111f4:	d030      	beq.n	8011258 <HAL_RCCEx_PeriphCLKConfig+0x360>
 80111f6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80111fa:	d82a      	bhi.n	8011252 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 80111fc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8011200:	d02c      	beq.n	801125c <HAL_RCCEx_PeriphCLKConfig+0x364>
 8011202:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8011206:	d824      	bhi.n	8011252 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8011208:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801120c:	d018      	beq.n	8011240 <HAL_RCCEx_PeriphCLKConfig+0x348>
 801120e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8011212:	d81e      	bhi.n	8011252 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8011214:	2b00      	cmp	r3, #0
 8011216:	d003      	beq.n	8011220 <HAL_RCCEx_PeriphCLKConfig+0x328>
 8011218:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801121c:	d007      	beq.n	801122e <HAL_RCCEx_PeriphCLKConfig+0x336>
 801121e:	e018      	b.n	8011252 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8011220:	4bb0      	ldr	r3, [pc, #704]	; (80114e4 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8011222:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011224:	4aaf      	ldr	r2, [pc, #700]	; (80114e4 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8011226:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801122a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 801122c:	e017      	b.n	801125e <HAL_RCCEx_PeriphCLKConfig+0x366>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 801122e:	687b      	ldr	r3, [r7, #4]
 8011230:	3304      	adds	r3, #4
 8011232:	2100      	movs	r1, #0
 8011234:	4618      	mov	r0, r3
 8011236:	f001 fda5 	bl	8012d84 <RCCEx_PLL2_Config>
 801123a:	4603      	mov	r3, r0
 801123c:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 801123e:	e00e      	b.n	801125e <HAL_RCCEx_PeriphCLKConfig+0x366>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8011240:	687b      	ldr	r3, [r7, #4]
 8011242:	3324      	adds	r3, #36	; 0x24
 8011244:	2100      	movs	r1, #0
 8011246:	4618      	mov	r0, r3
 8011248:	f001 fe4e 	bl	8012ee8 <RCCEx_PLL3_Config>
 801124c:	4603      	mov	r3, r0
 801124e:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8011250:	e005      	b.n	801125e <HAL_RCCEx_PeriphCLKConfig+0x366>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8011252:	2301      	movs	r3, #1
 8011254:	75fb      	strb	r3, [r7, #23]
      break;
 8011256:	e002      	b.n	801125e <HAL_RCCEx_PeriphCLKConfig+0x366>
      break;
 8011258:	bf00      	nop
 801125a:	e000      	b.n	801125e <HAL_RCCEx_PeriphCLKConfig+0x366>
      break;
 801125c:	bf00      	nop
    }

    if(ret == HAL_OK)
 801125e:	7dfb      	ldrb	r3, [r7, #23]
 8011260:	2b00      	cmp	r3, #0
 8011262:	d109      	bne.n	8011278 <HAL_RCCEx_PeriphCLKConfig+0x380>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8011264:	4b9f      	ldr	r3, [pc, #636]	; (80114e4 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8011266:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011268:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 801126c:	687b      	ldr	r3, [r7, #4]
 801126e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8011270:	499c      	ldr	r1, [pc, #624]	; (80114e4 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8011272:	4313      	orrs	r3, r2
 8011274:	650b      	str	r3, [r1, #80]	; 0x50
 8011276:	e001      	b.n	801127c <HAL_RCCEx_PeriphCLKConfig+0x384>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8011278:	7dfb      	ldrb	r3, [r7, #23]
 801127a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 801127c:	687b      	ldr	r3, [r7, #4]
 801127e:	681b      	ldr	r3, [r3, #0]
 8011280:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8011284:	2b00      	cmp	r3, #0
 8011286:	d049      	beq.n	801131c <HAL_RCCEx_PeriphCLKConfig+0x424>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8011288:	687b      	ldr	r3, [r7, #4]
 801128a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801128c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8011290:	d02e      	beq.n	80112f0 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8011292:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8011296:	d828      	bhi.n	80112ea <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8011298:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 801129c:	d02a      	beq.n	80112f4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 801129e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80112a2:	d822      	bhi.n	80112ea <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 80112a4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80112a8:	d026      	beq.n	80112f8 <HAL_RCCEx_PeriphCLKConfig+0x400>
 80112aa:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80112ae:	d81c      	bhi.n	80112ea <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 80112b0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80112b4:	d010      	beq.n	80112d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80112b6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80112ba:	d816      	bhi.n	80112ea <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 80112bc:	2b00      	cmp	r3, #0
 80112be:	d01d      	beq.n	80112fc <HAL_RCCEx_PeriphCLKConfig+0x404>
 80112c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80112c4:	d111      	bne.n	80112ea <HAL_RCCEx_PeriphCLKConfig+0x3f2>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80112c6:	687b      	ldr	r3, [r7, #4]
 80112c8:	3304      	adds	r3, #4
 80112ca:	2101      	movs	r1, #1
 80112cc:	4618      	mov	r0, r3
 80112ce:	f001 fd59 	bl	8012d84 <RCCEx_PLL2_Config>
 80112d2:	4603      	mov	r3, r0
 80112d4:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80112d6:	e012      	b.n	80112fe <HAL_RCCEx_PeriphCLKConfig+0x406>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80112d8:	687b      	ldr	r3, [r7, #4]
 80112da:	3324      	adds	r3, #36	; 0x24
 80112dc:	2101      	movs	r1, #1
 80112de:	4618      	mov	r0, r3
 80112e0:	f001 fe02 	bl	8012ee8 <RCCEx_PLL3_Config>
 80112e4:	4603      	mov	r3, r0
 80112e6:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80112e8:	e009      	b.n	80112fe <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80112ea:	2301      	movs	r3, #1
 80112ec:	75fb      	strb	r3, [r7, #23]
      break;
 80112ee:	e006      	b.n	80112fe <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 80112f0:	bf00      	nop
 80112f2:	e004      	b.n	80112fe <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 80112f4:	bf00      	nop
 80112f6:	e002      	b.n	80112fe <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 80112f8:	bf00      	nop
 80112fa:	e000      	b.n	80112fe <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 80112fc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80112fe:	7dfb      	ldrb	r3, [r7, #23]
 8011300:	2b00      	cmp	r3, #0
 8011302:	d109      	bne.n	8011318 <HAL_RCCEx_PeriphCLKConfig+0x420>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8011304:	4b77      	ldr	r3, [pc, #476]	; (80114e4 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8011306:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011308:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 801130c:	687b      	ldr	r3, [r7, #4]
 801130e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011310:	4974      	ldr	r1, [pc, #464]	; (80114e4 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8011312:	4313      	orrs	r3, r2
 8011314:	650b      	str	r3, [r1, #80]	; 0x50
 8011316:	e001      	b.n	801131c <HAL_RCCEx_PeriphCLKConfig+0x424>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8011318:	7dfb      	ldrb	r3, [r7, #23]
 801131a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 801131c:	687b      	ldr	r3, [r7, #4]
 801131e:	681b      	ldr	r3, [r3, #0]
 8011320:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8011324:	2b00      	cmp	r3, #0
 8011326:	d053      	beq.n	80113d0 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8011328:	687b      	ldr	r3, [r7, #4]
 801132a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 801132e:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8011332:	d034      	beq.n	801139e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8011334:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8011338:	d82e      	bhi.n	8011398 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 801133a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801133e:	d030      	beq.n	80113a2 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
 8011340:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8011344:	d828      	bhi.n	8011398 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8011346:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801134a:	d02c      	beq.n	80113a6 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 801134c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011350:	d822      	bhi.n	8011398 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8011352:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8011356:	d028      	beq.n	80113aa <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8011358:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 801135c:	d81c      	bhi.n	8011398 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 801135e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8011362:	d010      	beq.n	8011386 <HAL_RCCEx_PeriphCLKConfig+0x48e>
 8011364:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8011368:	d816      	bhi.n	8011398 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 801136a:	2b00      	cmp	r3, #0
 801136c:	d01f      	beq.n	80113ae <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 801136e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8011372:	d111      	bne.n	8011398 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8011374:	687b      	ldr	r3, [r7, #4]
 8011376:	3304      	adds	r3, #4
 8011378:	2101      	movs	r1, #1
 801137a:	4618      	mov	r0, r3
 801137c:	f001 fd02 	bl	8012d84 <RCCEx_PLL2_Config>
 8011380:	4603      	mov	r3, r0
 8011382:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8011384:	e014      	b.n	80113b0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8011386:	687b      	ldr	r3, [r7, #4]
 8011388:	3324      	adds	r3, #36	; 0x24
 801138a:	2101      	movs	r1, #1
 801138c:	4618      	mov	r0, r3
 801138e:	f001 fdab 	bl	8012ee8 <RCCEx_PLL3_Config>
 8011392:	4603      	mov	r3, r0
 8011394:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8011396:	e00b      	b.n	80113b0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8011398:	2301      	movs	r3, #1
 801139a:	75fb      	strb	r3, [r7, #23]
      break;
 801139c:	e008      	b.n	80113b0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 801139e:	bf00      	nop
 80113a0:	e006      	b.n	80113b0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 80113a2:	bf00      	nop
 80113a4:	e004      	b.n	80113b0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 80113a6:	bf00      	nop
 80113a8:	e002      	b.n	80113b0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 80113aa:	bf00      	nop
 80113ac:	e000      	b.n	80113b0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 80113ae:	bf00      	nop
    }

    if(ret == HAL_OK)
 80113b0:	7dfb      	ldrb	r3, [r7, #23]
 80113b2:	2b00      	cmp	r3, #0
 80113b4:	d10a      	bne.n	80113cc <HAL_RCCEx_PeriphCLKConfig+0x4d4>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80113b6:	4b4b      	ldr	r3, [pc, #300]	; (80114e4 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80113b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80113ba:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80113be:	687b      	ldr	r3, [r7, #4]
 80113c0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80113c4:	4947      	ldr	r1, [pc, #284]	; (80114e4 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80113c6:	4313      	orrs	r3, r2
 80113c8:	658b      	str	r3, [r1, #88]	; 0x58
 80113ca:	e001      	b.n	80113d0 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80113cc:	7dfb      	ldrb	r3, [r7, #23]
 80113ce:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80113d0:	687b      	ldr	r3, [r7, #4]
 80113d2:	681b      	ldr	r3, [r3, #0]
 80113d4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80113d8:	2b00      	cmp	r3, #0
 80113da:	d02f      	beq.n	801143c <HAL_RCCEx_PeriphCLKConfig+0x544>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80113dc:	687b      	ldr	r3, [r7, #4]
 80113de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80113e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80113e4:	d00e      	beq.n	8011404 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 80113e6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80113ea:	d814      	bhi.n	8011416 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 80113ec:	2b00      	cmp	r3, #0
 80113ee:	d015      	beq.n	801141c <HAL_RCCEx_PeriphCLKConfig+0x524>
 80113f0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80113f4:	d10f      	bne.n	8011416 <HAL_RCCEx_PeriphCLKConfig+0x51e>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80113f6:	4b3b      	ldr	r3, [pc, #236]	; (80114e4 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80113f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80113fa:	4a3a      	ldr	r2, [pc, #232]	; (80114e4 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80113fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8011400:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8011402:	e00c      	b.n	801141e <HAL_RCCEx_PeriphCLKConfig+0x526>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8011404:	687b      	ldr	r3, [r7, #4]
 8011406:	3304      	adds	r3, #4
 8011408:	2101      	movs	r1, #1
 801140a:	4618      	mov	r0, r3
 801140c:	f001 fcba 	bl	8012d84 <RCCEx_PLL2_Config>
 8011410:	4603      	mov	r3, r0
 8011412:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8011414:	e003      	b.n	801141e <HAL_RCCEx_PeriphCLKConfig+0x526>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8011416:	2301      	movs	r3, #1
 8011418:	75fb      	strb	r3, [r7, #23]
      break;
 801141a:	e000      	b.n	801141e <HAL_RCCEx_PeriphCLKConfig+0x526>
      break;
 801141c:	bf00      	nop
    }

    if(ret == HAL_OK)
 801141e:	7dfb      	ldrb	r3, [r7, #23]
 8011420:	2b00      	cmp	r3, #0
 8011422:	d109      	bne.n	8011438 <HAL_RCCEx_PeriphCLKConfig+0x540>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8011424:	4b2f      	ldr	r3, [pc, #188]	; (80114e4 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8011426:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011428:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 801142c:	687b      	ldr	r3, [r7, #4]
 801142e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011430:	492c      	ldr	r1, [pc, #176]	; (80114e4 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8011432:	4313      	orrs	r3, r2
 8011434:	650b      	str	r3, [r1, #80]	; 0x50
 8011436:	e001      	b.n	801143c <HAL_RCCEx_PeriphCLKConfig+0x544>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8011438:	7dfb      	ldrb	r3, [r7, #23]
 801143a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 801143c:	687b      	ldr	r3, [r7, #4]
 801143e:	681b      	ldr	r3, [r3, #0]
 8011440:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8011444:	2b00      	cmp	r3, #0
 8011446:	d032      	beq.n	80114ae <HAL_RCCEx_PeriphCLKConfig+0x5b6>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8011448:	687b      	ldr	r3, [r7, #4]
 801144a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801144c:	2b03      	cmp	r3, #3
 801144e:	d81b      	bhi.n	8011488 <HAL_RCCEx_PeriphCLKConfig+0x590>
 8011450:	a201      	add	r2, pc, #4	; (adr r2, 8011458 <HAL_RCCEx_PeriphCLKConfig+0x560>)
 8011452:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011456:	bf00      	nop
 8011458:	0801148f 	.word	0x0801148f
 801145c:	08011469 	.word	0x08011469
 8011460:	08011477 	.word	0x08011477
 8011464:	0801148f 	.word	0x0801148f
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8011468:	4b1e      	ldr	r3, [pc, #120]	; (80114e4 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 801146a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801146c:	4a1d      	ldr	r2, [pc, #116]	; (80114e4 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 801146e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8011472:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8011474:	e00c      	b.n	8011490 <HAL_RCCEx_PeriphCLKConfig+0x598>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8011476:	687b      	ldr	r3, [r7, #4]
 8011478:	3304      	adds	r3, #4
 801147a:	2102      	movs	r1, #2
 801147c:	4618      	mov	r0, r3
 801147e:	f001 fc81 	bl	8012d84 <RCCEx_PLL2_Config>
 8011482:	4603      	mov	r3, r0
 8011484:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8011486:	e003      	b.n	8011490 <HAL_RCCEx_PeriphCLKConfig+0x598>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8011488:	2301      	movs	r3, #1
 801148a:	75fb      	strb	r3, [r7, #23]
      break;
 801148c:	e000      	b.n	8011490 <HAL_RCCEx_PeriphCLKConfig+0x598>
      break;
 801148e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8011490:	7dfb      	ldrb	r3, [r7, #23]
 8011492:	2b00      	cmp	r3, #0
 8011494:	d109      	bne.n	80114aa <HAL_RCCEx_PeriphCLKConfig+0x5b2>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8011496:	4b13      	ldr	r3, [pc, #76]	; (80114e4 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8011498:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801149a:	f023 0203 	bic.w	r2, r3, #3
 801149e:	687b      	ldr	r3, [r7, #4]
 80114a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80114a2:	4910      	ldr	r1, [pc, #64]	; (80114e4 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80114a4:	4313      	orrs	r3, r2
 80114a6:	64cb      	str	r3, [r1, #76]	; 0x4c
 80114a8:	e001      	b.n	80114ae <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80114aa:	7dfb      	ldrb	r3, [r7, #23]
 80114ac:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80114ae:	687b      	ldr	r3, [r7, #4]
 80114b0:	681b      	ldr	r3, [r3, #0]
 80114b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80114b6:	2b00      	cmp	r3, #0
 80114b8:	f000 808a 	beq.w	80115d0 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80114bc:	4b0a      	ldr	r3, [pc, #40]	; (80114e8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80114be:	681b      	ldr	r3, [r3, #0]
 80114c0:	4a09      	ldr	r2, [pc, #36]	; (80114e8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80114c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80114c6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80114c8:	f7fa f80e 	bl	800b4e8 <HAL_GetTick>
 80114cc:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80114ce:	e00d      	b.n	80114ec <HAL_RCCEx_PeriphCLKConfig+0x5f4>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80114d0:	f7fa f80a 	bl	800b4e8 <HAL_GetTick>
 80114d4:	4602      	mov	r2, r0
 80114d6:	693b      	ldr	r3, [r7, #16]
 80114d8:	1ad3      	subs	r3, r2, r3
 80114da:	2b64      	cmp	r3, #100	; 0x64
 80114dc:	d906      	bls.n	80114ec <HAL_RCCEx_PeriphCLKConfig+0x5f4>
      {
        ret = HAL_TIMEOUT;
 80114de:	2303      	movs	r3, #3
 80114e0:	75fb      	strb	r3, [r7, #23]
        break;
 80114e2:	e009      	b.n	80114f8 <HAL_RCCEx_PeriphCLKConfig+0x600>
 80114e4:	58024400 	.word	0x58024400
 80114e8:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80114ec:	4bba      	ldr	r3, [pc, #744]	; (80117d8 <HAL_RCCEx_PeriphCLKConfig+0x8e0>)
 80114ee:	681b      	ldr	r3, [r3, #0]
 80114f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80114f4:	2b00      	cmp	r3, #0
 80114f6:	d0eb      	beq.n	80114d0 <HAL_RCCEx_PeriphCLKConfig+0x5d8>
      }
    }

    if(ret == HAL_OK)
 80114f8:	7dfb      	ldrb	r3, [r7, #23]
 80114fa:	2b00      	cmp	r3, #0
 80114fc:	d166      	bne.n	80115cc <HAL_RCCEx_PeriphCLKConfig+0x6d4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80114fe:	4bb7      	ldr	r3, [pc, #732]	; (80117dc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8011500:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8011502:	687b      	ldr	r3, [r7, #4]
 8011504:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8011508:	4053      	eors	r3, r2
 801150a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801150e:	2b00      	cmp	r3, #0
 8011510:	d013      	beq.n	801153a <HAL_RCCEx_PeriphCLKConfig+0x642>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8011512:	4bb2      	ldr	r3, [pc, #712]	; (80117dc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8011514:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011516:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801151a:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 801151c:	4baf      	ldr	r3, [pc, #700]	; (80117dc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 801151e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011520:	4aae      	ldr	r2, [pc, #696]	; (80117dc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8011522:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8011526:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8011528:	4bac      	ldr	r3, [pc, #688]	; (80117dc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 801152a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801152c:	4aab      	ldr	r2, [pc, #684]	; (80117dc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 801152e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8011532:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8011534:	4aa9      	ldr	r2, [pc, #676]	; (80117dc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8011536:	68fb      	ldr	r3, [r7, #12]
 8011538:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 801153a:	687b      	ldr	r3, [r7, #4]
 801153c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8011540:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011544:	d115      	bne.n	8011572 <HAL_RCCEx_PeriphCLKConfig+0x67a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8011546:	f7f9 ffcf 	bl	800b4e8 <HAL_GetTick>
 801154a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801154c:	e00b      	b.n	8011566 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801154e:	f7f9 ffcb 	bl	800b4e8 <HAL_GetTick>
 8011552:	4602      	mov	r2, r0
 8011554:	693b      	ldr	r3, [r7, #16]
 8011556:	1ad3      	subs	r3, r2, r3
 8011558:	f241 3288 	movw	r2, #5000	; 0x1388
 801155c:	4293      	cmp	r3, r2
 801155e:	d902      	bls.n	8011566 <HAL_RCCEx_PeriphCLKConfig+0x66e>
          {
            ret = HAL_TIMEOUT;
 8011560:	2303      	movs	r3, #3
 8011562:	75fb      	strb	r3, [r7, #23]
            break;
 8011564:	e005      	b.n	8011572 <HAL_RCCEx_PeriphCLKConfig+0x67a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8011566:	4b9d      	ldr	r3, [pc, #628]	; (80117dc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8011568:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801156a:	f003 0302 	and.w	r3, r3, #2
 801156e:	2b00      	cmp	r3, #0
 8011570:	d0ed      	beq.n	801154e <HAL_RCCEx_PeriphCLKConfig+0x656>
          }
        }
      }

      if(ret == HAL_OK)
 8011572:	7dfb      	ldrb	r3, [r7, #23]
 8011574:	2b00      	cmp	r3, #0
 8011576:	d126      	bne.n	80115c6 <HAL_RCCEx_PeriphCLKConfig+0x6ce>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8011578:	687b      	ldr	r3, [r7, #4]
 801157a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 801157e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8011582:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8011586:	d10d      	bne.n	80115a4 <HAL_RCCEx_PeriphCLKConfig+0x6ac>
 8011588:	4b94      	ldr	r3, [pc, #592]	; (80117dc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 801158a:	691b      	ldr	r3, [r3, #16]
 801158c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8011590:	687b      	ldr	r3, [r7, #4]
 8011592:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8011596:	0919      	lsrs	r1, r3, #4
 8011598:	4b91      	ldr	r3, [pc, #580]	; (80117e0 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 801159a:	400b      	ands	r3, r1
 801159c:	498f      	ldr	r1, [pc, #572]	; (80117dc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 801159e:	4313      	orrs	r3, r2
 80115a0:	610b      	str	r3, [r1, #16]
 80115a2:	e005      	b.n	80115b0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
 80115a4:	4b8d      	ldr	r3, [pc, #564]	; (80117dc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80115a6:	691b      	ldr	r3, [r3, #16]
 80115a8:	4a8c      	ldr	r2, [pc, #560]	; (80117dc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80115aa:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80115ae:	6113      	str	r3, [r2, #16]
 80115b0:	4b8a      	ldr	r3, [pc, #552]	; (80117dc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80115b2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80115b4:	687b      	ldr	r3, [r7, #4]
 80115b6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80115ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80115be:	4987      	ldr	r1, [pc, #540]	; (80117dc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80115c0:	4313      	orrs	r3, r2
 80115c2:	670b      	str	r3, [r1, #112]	; 0x70
 80115c4:	e004      	b.n	80115d0 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80115c6:	7dfb      	ldrb	r3, [r7, #23]
 80115c8:	75bb      	strb	r3, [r7, #22]
 80115ca:	e001      	b.n	80115d0 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80115cc:	7dfb      	ldrb	r3, [r7, #23]
 80115ce:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80115d0:	687b      	ldr	r3, [r7, #4]
 80115d2:	681b      	ldr	r3, [r3, #0]
 80115d4:	f003 0301 	and.w	r3, r3, #1
 80115d8:	2b00      	cmp	r3, #0
 80115da:	d07f      	beq.n	80116dc <HAL_RCCEx_PeriphCLKConfig+0x7e4>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80115dc:	687b      	ldr	r3, [r7, #4]
 80115de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80115e2:	2b28      	cmp	r3, #40	; 0x28
 80115e4:	d866      	bhi.n	80116b4 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
 80115e6:	a201      	add	r2, pc, #4	; (adr r2, 80115ec <HAL_RCCEx_PeriphCLKConfig+0x6f4>)
 80115e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80115ec:	080116bb 	.word	0x080116bb
 80115f0:	080116b5 	.word	0x080116b5
 80115f4:	080116b5 	.word	0x080116b5
 80115f8:	080116b5 	.word	0x080116b5
 80115fc:	080116b5 	.word	0x080116b5
 8011600:	080116b5 	.word	0x080116b5
 8011604:	080116b5 	.word	0x080116b5
 8011608:	080116b5 	.word	0x080116b5
 801160c:	08011691 	.word	0x08011691
 8011610:	080116b5 	.word	0x080116b5
 8011614:	080116b5 	.word	0x080116b5
 8011618:	080116b5 	.word	0x080116b5
 801161c:	080116b5 	.word	0x080116b5
 8011620:	080116b5 	.word	0x080116b5
 8011624:	080116b5 	.word	0x080116b5
 8011628:	080116b5 	.word	0x080116b5
 801162c:	080116a3 	.word	0x080116a3
 8011630:	080116b5 	.word	0x080116b5
 8011634:	080116b5 	.word	0x080116b5
 8011638:	080116b5 	.word	0x080116b5
 801163c:	080116b5 	.word	0x080116b5
 8011640:	080116b5 	.word	0x080116b5
 8011644:	080116b5 	.word	0x080116b5
 8011648:	080116b5 	.word	0x080116b5
 801164c:	080116bb 	.word	0x080116bb
 8011650:	080116b5 	.word	0x080116b5
 8011654:	080116b5 	.word	0x080116b5
 8011658:	080116b5 	.word	0x080116b5
 801165c:	080116b5 	.word	0x080116b5
 8011660:	080116b5 	.word	0x080116b5
 8011664:	080116b5 	.word	0x080116b5
 8011668:	080116b5 	.word	0x080116b5
 801166c:	080116bb 	.word	0x080116bb
 8011670:	080116b5 	.word	0x080116b5
 8011674:	080116b5 	.word	0x080116b5
 8011678:	080116b5 	.word	0x080116b5
 801167c:	080116b5 	.word	0x080116b5
 8011680:	080116b5 	.word	0x080116b5
 8011684:	080116b5 	.word	0x080116b5
 8011688:	080116b5 	.word	0x080116b5
 801168c:	080116bb 	.word	0x080116bb
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8011690:	687b      	ldr	r3, [r7, #4]
 8011692:	3304      	adds	r3, #4
 8011694:	2101      	movs	r1, #1
 8011696:	4618      	mov	r0, r3
 8011698:	f001 fb74 	bl	8012d84 <RCCEx_PLL2_Config>
 801169c:	4603      	mov	r3, r0
 801169e:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80116a0:	e00c      	b.n	80116bc <HAL_RCCEx_PeriphCLKConfig+0x7c4>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80116a2:	687b      	ldr	r3, [r7, #4]
 80116a4:	3324      	adds	r3, #36	; 0x24
 80116a6:	2101      	movs	r1, #1
 80116a8:	4618      	mov	r0, r3
 80116aa:	f001 fc1d 	bl	8012ee8 <RCCEx_PLL3_Config>
 80116ae:	4603      	mov	r3, r0
 80116b0:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80116b2:	e003      	b.n	80116bc <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80116b4:	2301      	movs	r3, #1
 80116b6:	75fb      	strb	r3, [r7, #23]
      break;
 80116b8:	e000      	b.n	80116bc <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      break;
 80116ba:	bf00      	nop
    }

    if(ret == HAL_OK)
 80116bc:	7dfb      	ldrb	r3, [r7, #23]
 80116be:	2b00      	cmp	r3, #0
 80116c0:	d10a      	bne.n	80116d8 <HAL_RCCEx_PeriphCLKConfig+0x7e0>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80116c2:	4b46      	ldr	r3, [pc, #280]	; (80117dc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80116c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80116c6:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80116ca:	687b      	ldr	r3, [r7, #4]
 80116cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80116d0:	4942      	ldr	r1, [pc, #264]	; (80117dc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80116d2:	4313      	orrs	r3, r2
 80116d4:	654b      	str	r3, [r1, #84]	; 0x54
 80116d6:	e001      	b.n	80116dc <HAL_RCCEx_PeriphCLKConfig+0x7e4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80116d8:	7dfb      	ldrb	r3, [r7, #23]
 80116da:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80116dc:	687b      	ldr	r3, [r7, #4]
 80116de:	681b      	ldr	r3, [r3, #0]
 80116e0:	f003 0302 	and.w	r3, r3, #2
 80116e4:	2b00      	cmp	r3, #0
 80116e6:	d038      	beq.n	801175a <HAL_RCCEx_PeriphCLKConfig+0x862>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80116e8:	687b      	ldr	r3, [r7, #4]
 80116ea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80116ec:	2b05      	cmp	r3, #5
 80116ee:	d821      	bhi.n	8011734 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 80116f0:	a201      	add	r2, pc, #4	; (adr r2, 80116f8 <HAL_RCCEx_PeriphCLKConfig+0x800>)
 80116f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80116f6:	bf00      	nop
 80116f8:	0801173b 	.word	0x0801173b
 80116fc:	08011711 	.word	0x08011711
 8011700:	08011723 	.word	0x08011723
 8011704:	0801173b 	.word	0x0801173b
 8011708:	0801173b 	.word	0x0801173b
 801170c:	0801173b 	.word	0x0801173b
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8011710:	687b      	ldr	r3, [r7, #4]
 8011712:	3304      	adds	r3, #4
 8011714:	2101      	movs	r1, #1
 8011716:	4618      	mov	r0, r3
 8011718:	f001 fb34 	bl	8012d84 <RCCEx_PLL2_Config>
 801171c:	4603      	mov	r3, r0
 801171e:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8011720:	e00c      	b.n	801173c <HAL_RCCEx_PeriphCLKConfig+0x844>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8011722:	687b      	ldr	r3, [r7, #4]
 8011724:	3324      	adds	r3, #36	; 0x24
 8011726:	2101      	movs	r1, #1
 8011728:	4618      	mov	r0, r3
 801172a:	f001 fbdd 	bl	8012ee8 <RCCEx_PLL3_Config>
 801172e:	4603      	mov	r3, r0
 8011730:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8011732:	e003      	b.n	801173c <HAL_RCCEx_PeriphCLKConfig+0x844>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8011734:	2301      	movs	r3, #1
 8011736:	75fb      	strb	r3, [r7, #23]
      break;
 8011738:	e000      	b.n	801173c <HAL_RCCEx_PeriphCLKConfig+0x844>
      break;
 801173a:	bf00      	nop
    }

    if(ret == HAL_OK)
 801173c:	7dfb      	ldrb	r3, [r7, #23]
 801173e:	2b00      	cmp	r3, #0
 8011740:	d109      	bne.n	8011756 <HAL_RCCEx_PeriphCLKConfig+0x85e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8011742:	4b26      	ldr	r3, [pc, #152]	; (80117dc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8011744:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011746:	f023 0207 	bic.w	r2, r3, #7
 801174a:	687b      	ldr	r3, [r7, #4]
 801174c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801174e:	4923      	ldr	r1, [pc, #140]	; (80117dc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8011750:	4313      	orrs	r3, r2
 8011752:	654b      	str	r3, [r1, #84]	; 0x54
 8011754:	e001      	b.n	801175a <HAL_RCCEx_PeriphCLKConfig+0x862>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8011756:	7dfb      	ldrb	r3, [r7, #23]
 8011758:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 801175a:	687b      	ldr	r3, [r7, #4]
 801175c:	681b      	ldr	r3, [r3, #0]
 801175e:	f003 0304 	and.w	r3, r3, #4
 8011762:	2b00      	cmp	r3, #0
 8011764:	d040      	beq.n	80117e8 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8011766:	687b      	ldr	r3, [r7, #4]
 8011768:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801176c:	2b05      	cmp	r3, #5
 801176e:	d821      	bhi.n	80117b4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 8011770:	a201      	add	r2, pc, #4	; (adr r2, 8011778 <HAL_RCCEx_PeriphCLKConfig+0x880>)
 8011772:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011776:	bf00      	nop
 8011778:	080117bb 	.word	0x080117bb
 801177c:	08011791 	.word	0x08011791
 8011780:	080117a3 	.word	0x080117a3
 8011784:	080117bb 	.word	0x080117bb
 8011788:	080117bb 	.word	0x080117bb
 801178c:	080117bb 	.word	0x080117bb
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8011790:	687b      	ldr	r3, [r7, #4]
 8011792:	3304      	adds	r3, #4
 8011794:	2101      	movs	r1, #1
 8011796:	4618      	mov	r0, r3
 8011798:	f001 faf4 	bl	8012d84 <RCCEx_PLL2_Config>
 801179c:	4603      	mov	r3, r0
 801179e:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80117a0:	e00c      	b.n	80117bc <HAL_RCCEx_PeriphCLKConfig+0x8c4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80117a2:	687b      	ldr	r3, [r7, #4]
 80117a4:	3324      	adds	r3, #36	; 0x24
 80117a6:	2101      	movs	r1, #1
 80117a8:	4618      	mov	r0, r3
 80117aa:	f001 fb9d 	bl	8012ee8 <RCCEx_PLL3_Config>
 80117ae:	4603      	mov	r3, r0
 80117b0:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80117b2:	e003      	b.n	80117bc <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80117b4:	2301      	movs	r3, #1
 80117b6:	75fb      	strb	r3, [r7, #23]
      break;
 80117b8:	e000      	b.n	80117bc <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      break;
 80117ba:	bf00      	nop
    }

    if(ret == HAL_OK)
 80117bc:	7dfb      	ldrb	r3, [r7, #23]
 80117be:	2b00      	cmp	r3, #0
 80117c0:	d110      	bne.n	80117e4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80117c2:	4b06      	ldr	r3, [pc, #24]	; (80117dc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80117c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80117c6:	f023 0207 	bic.w	r2, r3, #7
 80117ca:	687b      	ldr	r3, [r7, #4]
 80117cc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80117d0:	4902      	ldr	r1, [pc, #8]	; (80117dc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80117d2:	4313      	orrs	r3, r2
 80117d4:	658b      	str	r3, [r1, #88]	; 0x58
 80117d6:	e007      	b.n	80117e8 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
 80117d8:	58024800 	.word	0x58024800
 80117dc:	58024400 	.word	0x58024400
 80117e0:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 80117e4:	7dfb      	ldrb	r3, [r7, #23]
 80117e6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80117e8:	687b      	ldr	r3, [r7, #4]
 80117ea:	681b      	ldr	r3, [r3, #0]
 80117ec:	f003 0320 	and.w	r3, r3, #32
 80117f0:	2b00      	cmp	r3, #0
 80117f2:	d04b      	beq.n	801188c <HAL_RCCEx_PeriphCLKConfig+0x994>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80117f4:	687b      	ldr	r3, [r7, #4]
 80117f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80117fa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80117fe:	d02e      	beq.n	801185e <HAL_RCCEx_PeriphCLKConfig+0x966>
 8011800:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8011804:	d828      	bhi.n	8011858 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8011806:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801180a:	d02a      	beq.n	8011862 <HAL_RCCEx_PeriphCLKConfig+0x96a>
 801180c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011810:	d822      	bhi.n	8011858 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8011812:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8011816:	d026      	beq.n	8011866 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8011818:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 801181c:	d81c      	bhi.n	8011858 <HAL_RCCEx_PeriphCLKConfig+0x960>
 801181e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8011822:	d010      	beq.n	8011846 <HAL_RCCEx_PeriphCLKConfig+0x94e>
 8011824:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8011828:	d816      	bhi.n	8011858 <HAL_RCCEx_PeriphCLKConfig+0x960>
 801182a:	2b00      	cmp	r3, #0
 801182c:	d01d      	beq.n	801186a <HAL_RCCEx_PeriphCLKConfig+0x972>
 801182e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8011832:	d111      	bne.n	8011858 <HAL_RCCEx_PeriphCLKConfig+0x960>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8011834:	687b      	ldr	r3, [r7, #4]
 8011836:	3304      	adds	r3, #4
 8011838:	2100      	movs	r1, #0
 801183a:	4618      	mov	r0, r3
 801183c:	f001 faa2 	bl	8012d84 <RCCEx_PLL2_Config>
 8011840:	4603      	mov	r3, r0
 8011842:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8011844:	e012      	b.n	801186c <HAL_RCCEx_PeriphCLKConfig+0x974>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8011846:	687b      	ldr	r3, [r7, #4]
 8011848:	3324      	adds	r3, #36	; 0x24
 801184a:	2102      	movs	r1, #2
 801184c:	4618      	mov	r0, r3
 801184e:	f001 fb4b 	bl	8012ee8 <RCCEx_PLL3_Config>
 8011852:	4603      	mov	r3, r0
 8011854:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8011856:	e009      	b.n	801186c <HAL_RCCEx_PeriphCLKConfig+0x974>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8011858:	2301      	movs	r3, #1
 801185a:	75fb      	strb	r3, [r7, #23]
      break;
 801185c:	e006      	b.n	801186c <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 801185e:	bf00      	nop
 8011860:	e004      	b.n	801186c <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8011862:	bf00      	nop
 8011864:	e002      	b.n	801186c <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8011866:	bf00      	nop
 8011868:	e000      	b.n	801186c <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 801186a:	bf00      	nop
    }

    if(ret == HAL_OK)
 801186c:	7dfb      	ldrb	r3, [r7, #23]
 801186e:	2b00      	cmp	r3, #0
 8011870:	d10a      	bne.n	8011888 <HAL_RCCEx_PeriphCLKConfig+0x990>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8011872:	4bb3      	ldr	r3, [pc, #716]	; (8011b40 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8011874:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011876:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 801187a:	687b      	ldr	r3, [r7, #4]
 801187c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8011880:	49af      	ldr	r1, [pc, #700]	; (8011b40 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8011882:	4313      	orrs	r3, r2
 8011884:	654b      	str	r3, [r1, #84]	; 0x54
 8011886:	e001      	b.n	801188c <HAL_RCCEx_PeriphCLKConfig+0x994>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8011888:	7dfb      	ldrb	r3, [r7, #23]
 801188a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 801188c:	687b      	ldr	r3, [r7, #4]
 801188e:	681b      	ldr	r3, [r3, #0]
 8011890:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011894:	2b00      	cmp	r3, #0
 8011896:	d04b      	beq.n	8011930 <HAL_RCCEx_PeriphCLKConfig+0xa38>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8011898:	687b      	ldr	r3, [r7, #4]
 801189a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 801189e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80118a2:	d02e      	beq.n	8011902 <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 80118a4:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80118a8:	d828      	bhi.n	80118fc <HAL_RCCEx_PeriphCLKConfig+0xa04>
 80118aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80118ae:	d02a      	beq.n	8011906 <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 80118b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80118b4:	d822      	bhi.n	80118fc <HAL_RCCEx_PeriphCLKConfig+0xa04>
 80118b6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80118ba:	d026      	beq.n	801190a <HAL_RCCEx_PeriphCLKConfig+0xa12>
 80118bc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80118c0:	d81c      	bhi.n	80118fc <HAL_RCCEx_PeriphCLKConfig+0xa04>
 80118c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80118c6:	d010      	beq.n	80118ea <HAL_RCCEx_PeriphCLKConfig+0x9f2>
 80118c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80118cc:	d816      	bhi.n	80118fc <HAL_RCCEx_PeriphCLKConfig+0xa04>
 80118ce:	2b00      	cmp	r3, #0
 80118d0:	d01d      	beq.n	801190e <HAL_RCCEx_PeriphCLKConfig+0xa16>
 80118d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80118d6:	d111      	bne.n	80118fc <HAL_RCCEx_PeriphCLKConfig+0xa04>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80118d8:	687b      	ldr	r3, [r7, #4]
 80118da:	3304      	adds	r3, #4
 80118dc:	2100      	movs	r1, #0
 80118de:	4618      	mov	r0, r3
 80118e0:	f001 fa50 	bl	8012d84 <RCCEx_PLL2_Config>
 80118e4:	4603      	mov	r3, r0
 80118e6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80118e8:	e012      	b.n	8011910 <HAL_RCCEx_PeriphCLKConfig+0xa18>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80118ea:	687b      	ldr	r3, [r7, #4]
 80118ec:	3324      	adds	r3, #36	; 0x24
 80118ee:	2102      	movs	r1, #2
 80118f0:	4618      	mov	r0, r3
 80118f2:	f001 faf9 	bl	8012ee8 <RCCEx_PLL3_Config>
 80118f6:	4603      	mov	r3, r0
 80118f8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80118fa:	e009      	b.n	8011910 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80118fc:	2301      	movs	r3, #1
 80118fe:	75fb      	strb	r3, [r7, #23]
      break;
 8011900:	e006      	b.n	8011910 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8011902:	bf00      	nop
 8011904:	e004      	b.n	8011910 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8011906:	bf00      	nop
 8011908:	e002      	b.n	8011910 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 801190a:	bf00      	nop
 801190c:	e000      	b.n	8011910 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 801190e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8011910:	7dfb      	ldrb	r3, [r7, #23]
 8011912:	2b00      	cmp	r3, #0
 8011914:	d10a      	bne.n	801192c <HAL_RCCEx_PeriphCLKConfig+0xa34>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8011916:	4b8a      	ldr	r3, [pc, #552]	; (8011b40 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8011918:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801191a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 801191e:	687b      	ldr	r3, [r7, #4]
 8011920:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8011924:	4986      	ldr	r1, [pc, #536]	; (8011b40 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8011926:	4313      	orrs	r3, r2
 8011928:	658b      	str	r3, [r1, #88]	; 0x58
 801192a:	e001      	b.n	8011930 <HAL_RCCEx_PeriphCLKConfig+0xa38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801192c:	7dfb      	ldrb	r3, [r7, #23]
 801192e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8011930:	687b      	ldr	r3, [r7, #4]
 8011932:	681b      	ldr	r3, [r3, #0]
 8011934:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011938:	2b00      	cmp	r3, #0
 801193a:	d04b      	beq.n	80119d4 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 801193c:	687b      	ldr	r3, [r7, #4]
 801193e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8011942:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8011946:	d02e      	beq.n	80119a6 <HAL_RCCEx_PeriphCLKConfig+0xaae>
 8011948:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 801194c:	d828      	bhi.n	80119a0 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 801194e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8011952:	d02a      	beq.n	80119aa <HAL_RCCEx_PeriphCLKConfig+0xab2>
 8011954:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8011958:	d822      	bhi.n	80119a0 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 801195a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 801195e:	d026      	beq.n	80119ae <HAL_RCCEx_PeriphCLKConfig+0xab6>
 8011960:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8011964:	d81c      	bhi.n	80119a0 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8011966:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801196a:	d010      	beq.n	801198e <HAL_RCCEx_PeriphCLKConfig+0xa96>
 801196c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8011970:	d816      	bhi.n	80119a0 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8011972:	2b00      	cmp	r3, #0
 8011974:	d01d      	beq.n	80119b2 <HAL_RCCEx_PeriphCLKConfig+0xaba>
 8011976:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801197a:	d111      	bne.n	80119a0 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 801197c:	687b      	ldr	r3, [r7, #4]
 801197e:	3304      	adds	r3, #4
 8011980:	2100      	movs	r1, #0
 8011982:	4618      	mov	r0, r3
 8011984:	f001 f9fe 	bl	8012d84 <RCCEx_PLL2_Config>
 8011988:	4603      	mov	r3, r0
 801198a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 801198c:	e012      	b.n	80119b4 <HAL_RCCEx_PeriphCLKConfig+0xabc>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 801198e:	687b      	ldr	r3, [r7, #4]
 8011990:	3324      	adds	r3, #36	; 0x24
 8011992:	2102      	movs	r1, #2
 8011994:	4618      	mov	r0, r3
 8011996:	f001 faa7 	bl	8012ee8 <RCCEx_PLL3_Config>
 801199a:	4603      	mov	r3, r0
 801199c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 801199e:	e009      	b.n	80119b4 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80119a0:	2301      	movs	r3, #1
 80119a2:	75fb      	strb	r3, [r7, #23]
      break;
 80119a4:	e006      	b.n	80119b4 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 80119a6:	bf00      	nop
 80119a8:	e004      	b.n	80119b4 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 80119aa:	bf00      	nop
 80119ac:	e002      	b.n	80119b4 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 80119ae:	bf00      	nop
 80119b0:	e000      	b.n	80119b4 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 80119b2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80119b4:	7dfb      	ldrb	r3, [r7, #23]
 80119b6:	2b00      	cmp	r3, #0
 80119b8:	d10a      	bne.n	80119d0 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80119ba:	4b61      	ldr	r3, [pc, #388]	; (8011b40 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 80119bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80119be:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80119c2:	687b      	ldr	r3, [r7, #4]
 80119c4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80119c8:	495d      	ldr	r1, [pc, #372]	; (8011b40 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 80119ca:	4313      	orrs	r3, r2
 80119cc:	658b      	str	r3, [r1, #88]	; 0x58
 80119ce:	e001      	b.n	80119d4 <HAL_RCCEx_PeriphCLKConfig+0xadc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80119d0:	7dfb      	ldrb	r3, [r7, #23]
 80119d2:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80119d4:	687b      	ldr	r3, [r7, #4]
 80119d6:	681b      	ldr	r3, [r3, #0]
 80119d8:	f003 0308 	and.w	r3, r3, #8
 80119dc:	2b00      	cmp	r3, #0
 80119de:	d01a      	beq.n	8011a16 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80119e0:	687b      	ldr	r3, [r7, #4]
 80119e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80119e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80119ea:	d10a      	bne.n	8011a02 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80119ec:	687b      	ldr	r3, [r7, #4]
 80119ee:	3324      	adds	r3, #36	; 0x24
 80119f0:	2102      	movs	r1, #2
 80119f2:	4618      	mov	r0, r3
 80119f4:	f001 fa78 	bl	8012ee8 <RCCEx_PLL3_Config>
 80119f8:	4603      	mov	r3, r0
 80119fa:	2b00      	cmp	r3, #0
 80119fc:	d001      	beq.n	8011a02 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
        {
          status = HAL_ERROR;
 80119fe:	2301      	movs	r3, #1
 8011a00:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8011a02:	4b4f      	ldr	r3, [pc, #316]	; (8011b40 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8011a04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011a06:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8011a0a:	687b      	ldr	r3, [r7, #4]
 8011a0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011a10:	494b      	ldr	r1, [pc, #300]	; (8011b40 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8011a12:	4313      	orrs	r3, r2
 8011a14:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8011a16:	687b      	ldr	r3, [r7, #4]
 8011a18:	681b      	ldr	r3, [r3, #0]
 8011a1a:	f003 0310 	and.w	r3, r3, #16
 8011a1e:	2b00      	cmp	r3, #0
 8011a20:	d01a      	beq.n	8011a58 <HAL_RCCEx_PeriphCLKConfig+0xb60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8011a22:	687b      	ldr	r3, [r7, #4]
 8011a24:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8011a28:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011a2c:	d10a      	bne.n	8011a44 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8011a2e:	687b      	ldr	r3, [r7, #4]
 8011a30:	3324      	adds	r3, #36	; 0x24
 8011a32:	2102      	movs	r1, #2
 8011a34:	4618      	mov	r0, r3
 8011a36:	f001 fa57 	bl	8012ee8 <RCCEx_PLL3_Config>
 8011a3a:	4603      	mov	r3, r0
 8011a3c:	2b00      	cmp	r3, #0
 8011a3e:	d001      	beq.n	8011a44 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
      {
        status = HAL_ERROR;
 8011a40:	2301      	movs	r3, #1
 8011a42:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8011a44:	4b3e      	ldr	r3, [pc, #248]	; (8011b40 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8011a46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011a48:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8011a4c:	687b      	ldr	r3, [r7, #4]
 8011a4e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8011a52:	493b      	ldr	r1, [pc, #236]	; (8011b40 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8011a54:	4313      	orrs	r3, r2
 8011a56:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8011a58:	687b      	ldr	r3, [r7, #4]
 8011a5a:	681b      	ldr	r3, [r3, #0]
 8011a5c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8011a60:	2b00      	cmp	r3, #0
 8011a62:	d034      	beq.n	8011ace <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8011a64:	687b      	ldr	r3, [r7, #4]
 8011a66:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8011a6a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8011a6e:	d01d      	beq.n	8011aac <HAL_RCCEx_PeriphCLKConfig+0xbb4>
 8011a70:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8011a74:	d817      	bhi.n	8011aa6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
 8011a76:	2b00      	cmp	r3, #0
 8011a78:	d003      	beq.n	8011a82 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
 8011a7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011a7e:	d009      	beq.n	8011a94 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8011a80:	e011      	b.n	8011aa6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8011a82:	687b      	ldr	r3, [r7, #4]
 8011a84:	3304      	adds	r3, #4
 8011a86:	2100      	movs	r1, #0
 8011a88:	4618      	mov	r0, r3
 8011a8a:	f001 f97b 	bl	8012d84 <RCCEx_PLL2_Config>
 8011a8e:	4603      	mov	r3, r0
 8011a90:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8011a92:	e00c      	b.n	8011aae <HAL_RCCEx_PeriphCLKConfig+0xbb6>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8011a94:	687b      	ldr	r3, [r7, #4]
 8011a96:	3324      	adds	r3, #36	; 0x24
 8011a98:	2102      	movs	r1, #2
 8011a9a:	4618      	mov	r0, r3
 8011a9c:	f001 fa24 	bl	8012ee8 <RCCEx_PLL3_Config>
 8011aa0:	4603      	mov	r3, r0
 8011aa2:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8011aa4:	e003      	b.n	8011aae <HAL_RCCEx_PeriphCLKConfig+0xbb6>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8011aa6:	2301      	movs	r3, #1
 8011aa8:	75fb      	strb	r3, [r7, #23]
      break;
 8011aaa:	e000      	b.n	8011aae <HAL_RCCEx_PeriphCLKConfig+0xbb6>
      break;
 8011aac:	bf00      	nop
    }

    if(ret == HAL_OK)
 8011aae:	7dfb      	ldrb	r3, [r7, #23]
 8011ab0:	2b00      	cmp	r3, #0
 8011ab2:	d10a      	bne.n	8011aca <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8011ab4:	4b22      	ldr	r3, [pc, #136]	; (8011b40 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8011ab6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011ab8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8011abc:	687b      	ldr	r3, [r7, #4]
 8011abe:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8011ac2:	491f      	ldr	r1, [pc, #124]	; (8011b40 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8011ac4:	4313      	orrs	r3, r2
 8011ac6:	658b      	str	r3, [r1, #88]	; 0x58
 8011ac8:	e001      	b.n	8011ace <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8011aca:	7dfb      	ldrb	r3, [r7, #23]
 8011acc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8011ace:	687b      	ldr	r3, [r7, #4]
 8011ad0:	681b      	ldr	r3, [r3, #0]
 8011ad2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8011ad6:	2b00      	cmp	r3, #0
 8011ad8:	d036      	beq.n	8011b48 <HAL_RCCEx_PeriphCLKConfig+0xc50>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8011ada:	687b      	ldr	r3, [r7, #4]
 8011adc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011ae0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8011ae4:	d01c      	beq.n	8011b20 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8011ae6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8011aea:	d816      	bhi.n	8011b1a <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8011aec:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8011af0:	d003      	beq.n	8011afa <HAL_RCCEx_PeriphCLKConfig+0xc02>
 8011af2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8011af6:	d007      	beq.n	8011b08 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8011af8:	e00f      	b.n	8011b1a <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8011afa:	4b11      	ldr	r3, [pc, #68]	; (8011b40 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8011afc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011afe:	4a10      	ldr	r2, [pc, #64]	; (8011b40 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8011b00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8011b04:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8011b06:	e00c      	b.n	8011b22 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8011b08:	687b      	ldr	r3, [r7, #4]
 8011b0a:	3324      	adds	r3, #36	; 0x24
 8011b0c:	2101      	movs	r1, #1
 8011b0e:	4618      	mov	r0, r3
 8011b10:	f001 f9ea 	bl	8012ee8 <RCCEx_PLL3_Config>
 8011b14:	4603      	mov	r3, r0
 8011b16:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8011b18:	e003      	b.n	8011b22 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8011b1a:	2301      	movs	r3, #1
 8011b1c:	75fb      	strb	r3, [r7, #23]
      break;
 8011b1e:	e000      	b.n	8011b22 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8011b20:	bf00      	nop
    }

    if(ret == HAL_OK)
 8011b22:	7dfb      	ldrb	r3, [r7, #23]
 8011b24:	2b00      	cmp	r3, #0
 8011b26:	d10d      	bne.n	8011b44 <HAL_RCCEx_PeriphCLKConfig+0xc4c>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8011b28:	4b05      	ldr	r3, [pc, #20]	; (8011b40 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8011b2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011b2c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8011b30:	687b      	ldr	r3, [r7, #4]
 8011b32:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011b36:	4902      	ldr	r1, [pc, #8]	; (8011b40 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8011b38:	4313      	orrs	r3, r2
 8011b3a:	654b      	str	r3, [r1, #84]	; 0x54
 8011b3c:	e004      	b.n	8011b48 <HAL_RCCEx_PeriphCLKConfig+0xc50>
 8011b3e:	bf00      	nop
 8011b40:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8011b44:	7dfb      	ldrb	r3, [r7, #23]
 8011b46:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8011b48:	687b      	ldr	r3, [r7, #4]
 8011b4a:	681b      	ldr	r3, [r3, #0]
 8011b4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8011b50:	2b00      	cmp	r3, #0
 8011b52:	d029      	beq.n	8011ba8 <HAL_RCCEx_PeriphCLKConfig+0xcb0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8011b54:	687b      	ldr	r3, [r7, #4]
 8011b56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011b58:	2b00      	cmp	r3, #0
 8011b5a:	d003      	beq.n	8011b64 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8011b5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011b60:	d007      	beq.n	8011b72 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
 8011b62:	e00f      	b.n	8011b84 <HAL_RCCEx_PeriphCLKConfig+0xc8c>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8011b64:	4b69      	ldr	r3, [pc, #420]	; (8011d0c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8011b66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011b68:	4a68      	ldr	r2, [pc, #416]	; (8011d0c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8011b6a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8011b6e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8011b70:	e00b      	b.n	8011b8a <HAL_RCCEx_PeriphCLKConfig+0xc92>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8011b72:	687b      	ldr	r3, [r7, #4]
 8011b74:	3304      	adds	r3, #4
 8011b76:	2102      	movs	r1, #2
 8011b78:	4618      	mov	r0, r3
 8011b7a:	f001 f903 	bl	8012d84 <RCCEx_PLL2_Config>
 8011b7e:	4603      	mov	r3, r0
 8011b80:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8011b82:	e002      	b.n	8011b8a <HAL_RCCEx_PeriphCLKConfig+0xc92>

    default:
      ret = HAL_ERROR;
 8011b84:	2301      	movs	r3, #1
 8011b86:	75fb      	strb	r3, [r7, #23]
      break;
 8011b88:	bf00      	nop
    }

    if(ret == HAL_OK)
 8011b8a:	7dfb      	ldrb	r3, [r7, #23]
 8011b8c:	2b00      	cmp	r3, #0
 8011b8e:	d109      	bne.n	8011ba4 <HAL_RCCEx_PeriphCLKConfig+0xcac>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8011b90:	4b5e      	ldr	r3, [pc, #376]	; (8011d0c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8011b92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011b94:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8011b98:	687b      	ldr	r3, [r7, #4]
 8011b9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011b9c:	495b      	ldr	r1, [pc, #364]	; (8011d0c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8011b9e:	4313      	orrs	r3, r2
 8011ba0:	64cb      	str	r3, [r1, #76]	; 0x4c
 8011ba2:	e001      	b.n	8011ba8 <HAL_RCCEx_PeriphCLKConfig+0xcb0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8011ba4:	7dfb      	ldrb	r3, [r7, #23]
 8011ba6:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8011ba8:	687b      	ldr	r3, [r7, #4]
 8011baa:	681b      	ldr	r3, [r3, #0]
 8011bac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8011bb0:	2b00      	cmp	r3, #0
 8011bb2:	d00a      	beq.n	8011bca <HAL_RCCEx_PeriphCLKConfig+0xcd2>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8011bb4:	687b      	ldr	r3, [r7, #4]
 8011bb6:	3324      	adds	r3, #36	; 0x24
 8011bb8:	2102      	movs	r1, #2
 8011bba:	4618      	mov	r0, r3
 8011bbc:	f001 f994 	bl	8012ee8 <RCCEx_PLL3_Config>
 8011bc0:	4603      	mov	r3, r0
 8011bc2:	2b00      	cmp	r3, #0
 8011bc4:	d001      	beq.n	8011bca <HAL_RCCEx_PeriphCLKConfig+0xcd2>
    {
      status=HAL_ERROR;
 8011bc6:	2301      	movs	r3, #1
 8011bc8:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8011bca:	687b      	ldr	r3, [r7, #4]
 8011bcc:	681b      	ldr	r3, [r3, #0]
 8011bce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8011bd2:	2b00      	cmp	r3, #0
 8011bd4:	d032      	beq.n	8011c3c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {

    switch(PeriphClkInit->RngClockSelection)
 8011bd6:	687b      	ldr	r3, [r7, #4]
 8011bd8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011bdc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8011be0:	d017      	beq.n	8011c12 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
 8011be2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8011be6:	d811      	bhi.n	8011c0c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8011be8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011bec:	d013      	beq.n	8011c16 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
 8011bee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011bf2:	d80b      	bhi.n	8011c0c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8011bf4:	2b00      	cmp	r3, #0
 8011bf6:	d010      	beq.n	8011c1a <HAL_RCCEx_PeriphCLKConfig+0xd22>
 8011bf8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011bfc:	d106      	bne.n	8011c0c <HAL_RCCEx_PeriphCLKConfig+0xd14>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8011bfe:	4b43      	ldr	r3, [pc, #268]	; (8011d0c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8011c00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011c02:	4a42      	ldr	r2, [pc, #264]	; (8011d0c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8011c04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8011c08:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8011c0a:	e007      	b.n	8011c1c <HAL_RCCEx_PeriphCLKConfig+0xd24>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8011c0c:	2301      	movs	r3, #1
 8011c0e:	75fb      	strb	r3, [r7, #23]
      break;
 8011c10:	e004      	b.n	8011c1c <HAL_RCCEx_PeriphCLKConfig+0xd24>
      break;
 8011c12:	bf00      	nop
 8011c14:	e002      	b.n	8011c1c <HAL_RCCEx_PeriphCLKConfig+0xd24>
      break;
 8011c16:	bf00      	nop
 8011c18:	e000      	b.n	8011c1c <HAL_RCCEx_PeriphCLKConfig+0xd24>
      break;
 8011c1a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8011c1c:	7dfb      	ldrb	r3, [r7, #23]
 8011c1e:	2b00      	cmp	r3, #0
 8011c20:	d10a      	bne.n	8011c38 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8011c22:	4b3a      	ldr	r3, [pc, #232]	; (8011d0c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8011c24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011c26:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8011c2a:	687b      	ldr	r3, [r7, #4]
 8011c2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011c30:	4936      	ldr	r1, [pc, #216]	; (8011d0c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8011c32:	4313      	orrs	r3, r2
 8011c34:	654b      	str	r3, [r1, #84]	; 0x54
 8011c36:	e001      	b.n	8011c3c <HAL_RCCEx_PeriphCLKConfig+0xd44>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8011c38:	7dfb      	ldrb	r3, [r7, #23]
 8011c3a:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8011c3c:	687b      	ldr	r3, [r7, #4]
 8011c3e:	681b      	ldr	r3, [r3, #0]
 8011c40:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8011c44:	2b00      	cmp	r3, #0
 8011c46:	d008      	beq.n	8011c5a <HAL_RCCEx_PeriphCLKConfig+0xd62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8011c48:	4b30      	ldr	r3, [pc, #192]	; (8011d0c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8011c4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011c4c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8011c50:	687b      	ldr	r3, [r7, #4]
 8011c52:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011c54:	492d      	ldr	r1, [pc, #180]	; (8011d0c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8011c56:	4313      	orrs	r3, r2
 8011c58:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8011c5a:	687b      	ldr	r3, [r7, #4]
 8011c5c:	681b      	ldr	r3, [r3, #0]
 8011c5e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8011c62:	2b00      	cmp	r3, #0
 8011c64:	d008      	beq.n	8011c78 <HAL_RCCEx_PeriphCLKConfig+0xd80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8011c66:	4b29      	ldr	r3, [pc, #164]	; (8011d0c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8011c68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011c6a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8011c6e:	687b      	ldr	r3, [r7, #4]
 8011c70:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011c72:	4926      	ldr	r1, [pc, #152]	; (8011d0c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8011c74:	4313      	orrs	r3, r2
 8011c76:	650b      	str	r3, [r1, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8011c78:	687b      	ldr	r3, [r7, #4]
 8011c7a:	681b      	ldr	r3, [r3, #0]
 8011c7c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8011c80:	2b00      	cmp	r3, #0
 8011c82:	d008      	beq.n	8011c96 <HAL_RCCEx_PeriphCLKConfig+0xd9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8011c84:	4b21      	ldr	r3, [pc, #132]	; (8011d0c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8011c86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011c88:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8011c8c:	687b      	ldr	r3, [r7, #4]
 8011c8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011c90:	491e      	ldr	r1, [pc, #120]	; (8011d0c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8011c92:	4313      	orrs	r3, r2
 8011c94:	658b      	str	r3, [r1, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8011c96:	687b      	ldr	r3, [r7, #4]
 8011c98:	681b      	ldr	r3, [r3, #0]
 8011c9a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8011c9e:	2b00      	cmp	r3, #0
 8011ca0:	d00d      	beq.n	8011cbe <HAL_RCCEx_PeriphCLKConfig+0xdc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8011ca2:	4b1a      	ldr	r3, [pc, #104]	; (8011d0c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8011ca4:	691b      	ldr	r3, [r3, #16]
 8011ca6:	4a19      	ldr	r2, [pc, #100]	; (8011d0c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8011ca8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8011cac:	6113      	str	r3, [r2, #16]
 8011cae:	4b17      	ldr	r3, [pc, #92]	; (8011d0c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8011cb0:	691a      	ldr	r2, [r3, #16]
 8011cb2:	687b      	ldr	r3, [r7, #4]
 8011cb4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8011cb8:	4914      	ldr	r1, [pc, #80]	; (8011d0c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8011cba:	4313      	orrs	r3, r2
 8011cbc:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8011cbe:	687b      	ldr	r3, [r7, #4]
 8011cc0:	681b      	ldr	r3, [r3, #0]
 8011cc2:	2b00      	cmp	r3, #0
 8011cc4:	da08      	bge.n	8011cd8 <HAL_RCCEx_PeriphCLKConfig+0xde0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8011cc6:	4b11      	ldr	r3, [pc, #68]	; (8011d0c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8011cc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011cca:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8011cce:	687b      	ldr	r3, [r7, #4]
 8011cd0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011cd2:	490e      	ldr	r1, [pc, #56]	; (8011d0c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8011cd4:	4313      	orrs	r3, r2
 8011cd6:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8011cd8:	687b      	ldr	r3, [r7, #4]
 8011cda:	681b      	ldr	r3, [r3, #0]
 8011cdc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8011ce0:	2b00      	cmp	r3, #0
 8011ce2:	d009      	beq.n	8011cf8 <HAL_RCCEx_PeriphCLKConfig+0xe00>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8011ce4:	4b09      	ldr	r3, [pc, #36]	; (8011d0c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8011ce6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011ce8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8011cec:	687b      	ldr	r3, [r7, #4]
 8011cee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011cf2:	4906      	ldr	r1, [pc, #24]	; (8011d0c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8011cf4:	4313      	orrs	r3, r2
 8011cf6:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8011cf8:	7dbb      	ldrb	r3, [r7, #22]
 8011cfa:	2b00      	cmp	r3, #0
 8011cfc:	d101      	bne.n	8011d02 <HAL_RCCEx_PeriphCLKConfig+0xe0a>
  {
    return HAL_OK;
 8011cfe:	2300      	movs	r3, #0
 8011d00:	e000      	b.n	8011d04 <HAL_RCCEx_PeriphCLKConfig+0xe0c>
  }
  return HAL_ERROR;
 8011d02:	2301      	movs	r3, #1
}
 8011d04:	4618      	mov	r0, r3
 8011d06:	3718      	adds	r7, #24
 8011d08:	46bd      	mov	sp, r7
 8011d0a:	bd80      	pop	{r7, pc}
 8011d0c:	58024400 	.word	0x58024400

08011d10 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8011d10:	b580      	push	{r7, lr}
 8011d12:	b090      	sub	sp, #64	; 0x40
 8011d14:	af00      	add	r7, sp, #0
 8011d16:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8011d18:	687b      	ldr	r3, [r7, #4]
 8011d1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011d1e:	f040 8089 	bne.w	8011e34 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8011d22:	4ba8      	ldr	r3, [pc, #672]	; (8011fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8011d24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011d26:	f003 0307 	and.w	r3, r3, #7
 8011d2a:	633b      	str	r3, [r7, #48]	; 0x30
 8011d2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d2e:	2b04      	cmp	r3, #4
 8011d30:	d87d      	bhi.n	8011e2e <HAL_RCCEx_GetPeriphCLKFreq+0x11e>
 8011d32:	a201      	add	r2, pc, #4	; (adr r2, 8011d38 <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 8011d34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011d38:	08011d4d 	.word	0x08011d4d
 8011d3c:	08011d71 	.word	0x08011d71
 8011d40:	08011d95 	.word	0x08011d95
 8011d44:	08011e29 	.word	0x08011e29
 8011d48:	08011db9 	.word	0x08011db9

      switch (saiclocksource)
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8011d4c:	4b9d      	ldr	r3, [pc, #628]	; (8011fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8011d4e:	681b      	ldr	r3, [r3, #0]
 8011d50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8011d54:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8011d58:	d107      	bne.n	8011d6a <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8011d5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011d5e:	4618      	mov	r0, r3
 8011d60:	f000 febe 	bl	8012ae0 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 8011d64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d66:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8011d68:	e3f5      	b.n	8012556 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 8011d6a:	2300      	movs	r3, #0
 8011d6c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8011d6e:	e3f2      	b.n	8012556 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8011d70:	4b94      	ldr	r3, [pc, #592]	; (8011fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8011d72:	681b      	ldr	r3, [r3, #0]
 8011d74:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8011d78:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8011d7c:	d107      	bne.n	8011d8e <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8011d7e:	f107 0318 	add.w	r3, r7, #24
 8011d82:	4618      	mov	r0, r3
 8011d84:	f000 fc04 	bl	8012590 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8011d88:	69bb      	ldr	r3, [r7, #24]
 8011d8a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8011d8c:	e3e3      	b.n	8012556 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 8011d8e:	2300      	movs	r3, #0
 8011d90:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8011d92:	e3e0      	b.n	8012556 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8011d94:	4b8b      	ldr	r3, [pc, #556]	; (8011fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8011d96:	681b      	ldr	r3, [r3, #0]
 8011d98:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8011d9c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8011da0:	d107      	bne.n	8011db2 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8011da2:	f107 030c 	add.w	r3, r7, #12
 8011da6:	4618      	mov	r0, r3
 8011da8:	f000 fd46 	bl	8012838 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8011dac:	68fb      	ldr	r3, [r7, #12]
 8011dae:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8011db0:	e3d1      	b.n	8012556 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 8011db2:	2300      	movs	r3, #0
 8011db4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8011db6:	e3ce      	b.n	8012556 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8011db8:	4b82      	ldr	r3, [pc, #520]	; (8011fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8011dba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011dbc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8011dc0:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8011dc2:	4b80      	ldr	r3, [pc, #512]	; (8011fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8011dc4:	681b      	ldr	r3, [r3, #0]
 8011dc6:	f003 0304 	and.w	r3, r3, #4
 8011dca:	2b04      	cmp	r3, #4
 8011dcc:	d10c      	bne.n	8011de8 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 8011dce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011dd0:	2b00      	cmp	r3, #0
 8011dd2:	d109      	bne.n	8011de8 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8011dd4:	4b7b      	ldr	r3, [pc, #492]	; (8011fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8011dd6:	681b      	ldr	r3, [r3, #0]
 8011dd8:	08db      	lsrs	r3, r3, #3
 8011dda:	f003 0303 	and.w	r3, r3, #3
 8011dde:	4a7a      	ldr	r2, [pc, #488]	; (8011fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8011de0:	fa22 f303 	lsr.w	r3, r2, r3
 8011de4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011de6:	e01e      	b.n	8011e26 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8011de8:	4b76      	ldr	r3, [pc, #472]	; (8011fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8011dea:	681b      	ldr	r3, [r3, #0]
 8011dec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011df0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011df4:	d106      	bne.n	8011e04 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 8011df6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011df8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8011dfc:	d102      	bne.n	8011e04 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8011dfe:	4b73      	ldr	r3, [pc, #460]	; (8011fcc <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8011e00:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011e02:	e010      	b.n	8011e26 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8011e04:	4b6f      	ldr	r3, [pc, #444]	; (8011fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8011e06:	681b      	ldr	r3, [r3, #0]
 8011e08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8011e0c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8011e10:	d106      	bne.n	8011e20 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8011e12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011e14:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8011e18:	d102      	bne.n	8011e20 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8011e1a:	4b6d      	ldr	r3, [pc, #436]	; (8011fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8011e1c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011e1e:	e002      	b.n	8011e26 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8011e20:	2300      	movs	r3, #0
 8011e22:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8011e24:	e397      	b.n	8012556 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
 8011e26:	e396      	b.n	8012556 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8011e28:	4b6a      	ldr	r3, [pc, #424]	; (8011fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8011e2a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8011e2c:	e393      	b.n	8012556 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      default :
        {
          frequency = 0;
 8011e2e:	2300      	movs	r3, #0
 8011e30:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8011e32:	e390      	b.n	8012556 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
    }
#endif /* SAI3 */

#if  defined(RCC_CDCCIP1R_SAI2ASEL)

    else if (PeriphClk == RCC_PERIPHCLK_SAI2A)
 8011e34:	687b      	ldr	r3, [r7, #4]
 8011e36:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011e3a:	f040 8095 	bne.w	8011f68 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
    {
      saiclocksource= __HAL_RCC_GET_SAI2A_SOURCE();
 8011e3e:	4b61      	ldr	r3, [pc, #388]	; (8011fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8011e40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011e42:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8011e46:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8011e48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011e4e:	d04d      	beq.n	8011eec <HAL_RCCEx_GetPeriphCLKFreq+0x1dc>
 8011e50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011e56:	f200 8084 	bhi.w	8011f62 <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 8011e5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e5c:	2bc0      	cmp	r3, #192	; 0xc0
 8011e5e:	d07d      	beq.n	8011f5c <HAL_RCCEx_GetPeriphCLKFreq+0x24c>
 8011e60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e62:	2bc0      	cmp	r3, #192	; 0xc0
 8011e64:	d87d      	bhi.n	8011f62 <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 8011e66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e68:	2b80      	cmp	r3, #128	; 0x80
 8011e6a:	d02d      	beq.n	8011ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>
 8011e6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e6e:	2b80      	cmp	r3, #128	; 0x80
 8011e70:	d877      	bhi.n	8011f62 <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 8011e72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e74:	2b00      	cmp	r3, #0
 8011e76:	d003      	beq.n	8011e80 <HAL_RCCEx_GetPeriphCLKFreq+0x170>
 8011e78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e7a:	2b40      	cmp	r3, #64	; 0x40
 8011e7c:	d012      	beq.n	8011ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x194>
 8011e7e:	e070      	b.n	8011f62 <HAL_RCCEx_GetPeriphCLKFreq+0x252>
      {
      case RCC_SAI2ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI2A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8011e80:	4b50      	ldr	r3, [pc, #320]	; (8011fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8011e82:	681b      	ldr	r3, [r3, #0]
 8011e84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8011e88:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8011e8c:	d107      	bne.n	8011e9e <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8011e8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011e92:	4618      	mov	r0, r3
 8011e94:	f000 fe24 	bl	8012ae0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8011e98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011e9a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8011e9c:	e35b      	b.n	8012556 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 8011e9e:	2300      	movs	r3, #0
 8011ea0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8011ea2:	e358      	b.n	8012556 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_SAI2ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8011ea4:	4b47      	ldr	r3, [pc, #284]	; (8011fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8011ea6:	681b      	ldr	r3, [r3, #0]
 8011ea8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8011eac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8011eb0:	d107      	bne.n	8011ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x1b2>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8011eb2:	f107 0318 	add.w	r3, r7, #24
 8011eb6:	4618      	mov	r0, r3
 8011eb8:	f000 fb6a 	bl	8012590 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8011ebc:	69bb      	ldr	r3, [r7, #24]
 8011ebe:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8011ec0:	e349      	b.n	8012556 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 8011ec2:	2300      	movs	r3, #0
 8011ec4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8011ec6:	e346      	b.n	8012556 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case RCC_SAI2ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2A  */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8011ec8:	4b3e      	ldr	r3, [pc, #248]	; (8011fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8011eca:	681b      	ldr	r3, [r3, #0]
 8011ecc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8011ed0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8011ed4:	d107      	bne.n	8011ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x1d6>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8011ed6:	f107 030c 	add.w	r3, r7, #12
 8011eda:	4618      	mov	r0, r3
 8011edc:	f000 fcac 	bl	8012838 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8011ee0:	68fb      	ldr	r3, [r7, #12]
 8011ee2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8011ee4:	e337      	b.n	8012556 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 8011ee6:	2300      	movs	r3, #0
 8011ee8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8011eea:	e334      	b.n	8012556 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case RCC_SAI2ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI2A  */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8011eec:	4b35      	ldr	r3, [pc, #212]	; (8011fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8011eee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011ef0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8011ef4:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8011ef6:	4b33      	ldr	r3, [pc, #204]	; (8011fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8011ef8:	681b      	ldr	r3, [r3, #0]
 8011efa:	f003 0304 	and.w	r3, r3, #4
 8011efe:	2b04      	cmp	r3, #4
 8011f00:	d10c      	bne.n	8011f1c <HAL_RCCEx_GetPeriphCLKFreq+0x20c>
 8011f02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011f04:	2b00      	cmp	r3, #0
 8011f06:	d109      	bne.n	8011f1c <HAL_RCCEx_GetPeriphCLKFreq+0x20c>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8011f08:	4b2e      	ldr	r3, [pc, #184]	; (8011fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8011f0a:	681b      	ldr	r3, [r3, #0]
 8011f0c:	08db      	lsrs	r3, r3, #3
 8011f0e:	f003 0303 	and.w	r3, r3, #3
 8011f12:	4a2d      	ldr	r2, [pc, #180]	; (8011fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8011f14:	fa22 f303 	lsr.w	r3, r2, r3
 8011f18:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011f1a:	e01e      	b.n	8011f5a <HAL_RCCEx_GetPeriphCLKFreq+0x24a>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8011f1c:	4b29      	ldr	r3, [pc, #164]	; (8011fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8011f1e:	681b      	ldr	r3, [r3, #0]
 8011f20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011f24:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011f28:	d106      	bne.n	8011f38 <HAL_RCCEx_GetPeriphCLKFreq+0x228>
 8011f2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011f2c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8011f30:	d102      	bne.n	8011f38 <HAL_RCCEx_GetPeriphCLKFreq+0x228>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8011f32:	4b26      	ldr	r3, [pc, #152]	; (8011fcc <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8011f34:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011f36:	e010      	b.n	8011f5a <HAL_RCCEx_GetPeriphCLKFreq+0x24a>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8011f38:	4b22      	ldr	r3, [pc, #136]	; (8011fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8011f3a:	681b      	ldr	r3, [r3, #0]
 8011f3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8011f40:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8011f44:	d106      	bne.n	8011f54 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 8011f46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011f48:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8011f4c:	d102      	bne.n	8011f54 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8011f4e:	4b20      	ldr	r3, [pc, #128]	; (8011fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8011f50:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011f52:	e002      	b.n	8011f5a <HAL_RCCEx_GetPeriphCLKFreq+0x24a>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8011f54:	2300      	movs	r3, #0
 8011f56:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8011f58:	e2fd      	b.n	8012556 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
 8011f5a:	e2fc      	b.n	8012556 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case (RCC_SAI2ACLKSOURCE_PIN): /* External clock is the clock source for SAI2A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8011f5c:	4b1d      	ldr	r3, [pc, #116]	; (8011fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8011f5e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8011f60:	e2f9      	b.n	8012556 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      default :
        {
          frequency = 0;
 8011f62:	2300      	movs	r3, #0
 8011f64:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8011f66:	e2f6      	b.n	8012556 <HAL_RCCEx_GetPeriphCLKFreq+0x846>

    }
#endif

#if  defined(RCC_CDCCIP1R_SAI2BSEL_0)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2B)
 8011f68:	687b      	ldr	r3, [r7, #4]
 8011f6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8011f6e:	f040 80a7 	bne.w	80120c0 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
    {

      saiclocksource= __HAL_RCC_GET_SAI2B_SOURCE();
 8011f72:	4b14      	ldr	r3, [pc, #80]	; (8011fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8011f74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011f76:	f403 6360 	and.w	r3, r3, #3584	; 0xe00
 8011f7a:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8011f7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f7e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8011f82:	d05f      	beq.n	8012044 <HAL_RCCEx_GetPeriphCLKFreq+0x334>
 8011f84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f86:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8011f8a:	f200 8096 	bhi.w	80120ba <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
 8011f8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f90:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8011f94:	f000 808e 	beq.w	80120b4 <HAL_RCCEx_GetPeriphCLKFreq+0x3a4>
 8011f98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f9a:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8011f9e:	f200 808c 	bhi.w	80120ba <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
 8011fa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011fa4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8011fa8:	d03a      	beq.n	8012020 <HAL_RCCEx_GetPeriphCLKFreq+0x310>
 8011faa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011fac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8011fb0:	f200 8083 	bhi.w	80120ba <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
 8011fb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011fb6:	2b00      	cmp	r3, #0
 8011fb8:	d00e      	beq.n	8011fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>
 8011fba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011fbc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011fc0:	d01c      	beq.n	8011ffc <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>
 8011fc2:	e07a      	b.n	80120ba <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
 8011fc4:	58024400 	.word	0x58024400
 8011fc8:	03d09000 	.word	0x03d09000
 8011fcc:	003d0900 	.word	0x003d0900
 8011fd0:	016e3600 	.word	0x016e3600
 8011fd4:	00bb8000 	.word	0x00bb8000
      {
      case RCC_SAI2BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI2B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8011fd8:	4ba8      	ldr	r3, [pc, #672]	; (801227c <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8011fda:	681b      	ldr	r3, [r3, #0]
 8011fdc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8011fe0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8011fe4:	d107      	bne.n	8011ff6 <HAL_RCCEx_GetPeriphCLKFreq+0x2e6>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8011fe6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011fea:	4618      	mov	r0, r3
 8011fec:	f000 fd78 	bl	8012ae0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8011ff0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ff2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8011ff4:	e2af      	b.n	8012556 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 8011ff6:	2300      	movs	r3, #0
 8011ff8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8011ffa:	e2ac      	b.n	8012556 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_SAI2BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8011ffc:	4b9f      	ldr	r3, [pc, #636]	; (801227c <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8011ffe:	681b      	ldr	r3, [r3, #0]
 8012000:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8012004:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8012008:	d107      	bne.n	801201a <HAL_RCCEx_GetPeriphCLKFreq+0x30a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801200a:	f107 0318 	add.w	r3, r7, #24
 801200e:	4618      	mov	r0, r3
 8012010:	f000 fabe 	bl	8012590 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8012014:	69bb      	ldr	r3, [r7, #24]
 8012016:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8012018:	e29d      	b.n	8012556 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 801201a:	2300      	movs	r3, #0
 801201c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 801201e:	e29a      	b.n	8012556 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case RCC_SAI2BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8012020:	4b96      	ldr	r3, [pc, #600]	; (801227c <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8012022:	681b      	ldr	r3, [r3, #0]
 8012024:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8012028:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801202c:	d107      	bne.n	801203e <HAL_RCCEx_GetPeriphCLKFreq+0x32e>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801202e:	f107 030c 	add.w	r3, r7, #12
 8012032:	4618      	mov	r0, r3
 8012034:	f000 fc00 	bl	8012838 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8012038:	68fb      	ldr	r3, [r7, #12]
 801203a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 801203c:	e28b      	b.n	8012556 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 801203e:	2300      	movs	r3, #0
 8012040:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8012042:	e288      	b.n	8012556 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case RCC_SAI2BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI2B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8012044:	4b8d      	ldr	r3, [pc, #564]	; (801227c <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8012046:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012048:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 801204c:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 801204e:	4b8b      	ldr	r3, [pc, #556]	; (801227c <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8012050:	681b      	ldr	r3, [r3, #0]
 8012052:	f003 0304 	and.w	r3, r3, #4
 8012056:	2b04      	cmp	r3, #4
 8012058:	d10c      	bne.n	8012074 <HAL_RCCEx_GetPeriphCLKFreq+0x364>
 801205a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801205c:	2b00      	cmp	r3, #0
 801205e:	d109      	bne.n	8012074 <HAL_RCCEx_GetPeriphCLKFreq+0x364>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8012060:	4b86      	ldr	r3, [pc, #536]	; (801227c <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8012062:	681b      	ldr	r3, [r3, #0]
 8012064:	08db      	lsrs	r3, r3, #3
 8012066:	f003 0303 	and.w	r3, r3, #3
 801206a:	4a85      	ldr	r2, [pc, #532]	; (8012280 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 801206c:	fa22 f303 	lsr.w	r3, r2, r3
 8012070:	63fb      	str	r3, [r7, #60]	; 0x3c
 8012072:	e01e      	b.n	80120b2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8012074:	4b81      	ldr	r3, [pc, #516]	; (801227c <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8012076:	681b      	ldr	r3, [r3, #0]
 8012078:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801207c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012080:	d106      	bne.n	8012090 <HAL_RCCEx_GetPeriphCLKFreq+0x380>
 8012082:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012084:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8012088:	d102      	bne.n	8012090 <HAL_RCCEx_GetPeriphCLKFreq+0x380>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 801208a:	4b7e      	ldr	r3, [pc, #504]	; (8012284 <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 801208c:	63fb      	str	r3, [r7, #60]	; 0x3c
 801208e:	e010      	b.n	80120b2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8012090:	4b7a      	ldr	r3, [pc, #488]	; (801227c <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8012092:	681b      	ldr	r3, [r3, #0]
 8012094:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8012098:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801209c:	d106      	bne.n	80120ac <HAL_RCCEx_GetPeriphCLKFreq+0x39c>
 801209e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80120a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80120a4:	d102      	bne.n	80120ac <HAL_RCCEx_GetPeriphCLKFreq+0x39c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80120a6:	4b78      	ldr	r3, [pc, #480]	; (8012288 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 80120a8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80120aa:	e002      	b.n	80120b2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80120ac:	2300      	movs	r3, #0
 80120ae:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
          break;
 80120b0:	e251      	b.n	8012556 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
 80120b2:	e250      	b.n	8012556 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case (RCC_SAI2BCLKSOURCE_PIN): /* External clock is the clock source for SAI2B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80120b4:	4b75      	ldr	r3, [pc, #468]	; (801228c <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 80120b6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80120b8:	e24d      	b.n	8012556 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      default :
        {
          frequency = 0;
 80120ba:	2300      	movs	r3, #0
 80120bc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80120be:	e24a      	b.n	8012556 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          break;
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 80120c0:	687b      	ldr	r3, [r7, #4]
 80120c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80120c6:	f040 809c 	bne.w	8012202 <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 80120ca:	4b6c      	ldr	r3, [pc, #432]	; (801227c <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 80120cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80120ce:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80120d2:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80120d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80120d6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80120da:	d054      	beq.n	8012186 <HAL_RCCEx_GetPeriphCLKFreq+0x476>
 80120dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80120de:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80120e2:	f200 808b 	bhi.w	80121fc <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
 80120e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80120e8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80120ec:	f000 8083 	beq.w	80121f6 <HAL_RCCEx_GetPeriphCLKFreq+0x4e6>
 80120f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80120f2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80120f6:	f200 8081 	bhi.w	80121fc <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
 80120fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80120fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8012100:	d02f      	beq.n	8012162 <HAL_RCCEx_GetPeriphCLKFreq+0x452>
 8012102:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012104:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8012108:	d878      	bhi.n	80121fc <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
 801210a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801210c:	2b00      	cmp	r3, #0
 801210e:	d004      	beq.n	801211a <HAL_RCCEx_GetPeriphCLKFreq+0x40a>
 8012110:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012112:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8012116:	d012      	beq.n	801213e <HAL_RCCEx_GetPeriphCLKFreq+0x42e>
 8012118:	e070      	b.n	80121fc <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 801211a:	4b58      	ldr	r3, [pc, #352]	; (801227c <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 801211c:	681b      	ldr	r3, [r3, #0]
 801211e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8012122:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8012126:	d107      	bne.n	8012138 <HAL_RCCEx_GetPeriphCLKFreq+0x428>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8012128:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801212c:	4618      	mov	r0, r3
 801212e:	f000 fcd7 	bl	8012ae0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8012132:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012134:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8012136:	e20e      	b.n	8012556 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 8012138:	2300      	movs	r3, #0
 801213a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 801213c:	e20b      	b.n	8012556 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 801213e:	4b4f      	ldr	r3, [pc, #316]	; (801227c <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8012140:	681b      	ldr	r3, [r3, #0]
 8012142:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8012146:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801214a:	d107      	bne.n	801215c <HAL_RCCEx_GetPeriphCLKFreq+0x44c>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801214c:	f107 0318 	add.w	r3, r7, #24
 8012150:	4618      	mov	r0, r3
 8012152:	f000 fa1d 	bl	8012590 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8012156:	69bb      	ldr	r3, [r7, #24]
 8012158:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 801215a:	e1fc      	b.n	8012556 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 801215c:	2300      	movs	r3, #0
 801215e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8012160:	e1f9      	b.n	8012556 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8012162:	4b46      	ldr	r3, [pc, #280]	; (801227c <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8012164:	681b      	ldr	r3, [r3, #0]
 8012166:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 801216a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801216e:	d107      	bne.n	8012180 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8012170:	f107 030c 	add.w	r3, r7, #12
 8012174:	4618      	mov	r0, r3
 8012176:	f000 fb5f 	bl	8012838 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 801217a:	68fb      	ldr	r3, [r7, #12]
 801217c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 801217e:	e1ea      	b.n	8012556 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 8012180:	2300      	movs	r3, #0
 8012182:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8012184:	e1e7      	b.n	8012556 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8012186:	4b3d      	ldr	r3, [pc, #244]	; (801227c <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8012188:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801218a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 801218e:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8012190:	4b3a      	ldr	r3, [pc, #232]	; (801227c <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8012192:	681b      	ldr	r3, [r3, #0]
 8012194:	f003 0304 	and.w	r3, r3, #4
 8012198:	2b04      	cmp	r3, #4
 801219a:	d10c      	bne.n	80121b6 <HAL_RCCEx_GetPeriphCLKFreq+0x4a6>
 801219c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801219e:	2b00      	cmp	r3, #0
 80121a0:	d109      	bne.n	80121b6 <HAL_RCCEx_GetPeriphCLKFreq+0x4a6>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80121a2:	4b36      	ldr	r3, [pc, #216]	; (801227c <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 80121a4:	681b      	ldr	r3, [r3, #0]
 80121a6:	08db      	lsrs	r3, r3, #3
 80121a8:	f003 0303 	and.w	r3, r3, #3
 80121ac:	4a34      	ldr	r2, [pc, #208]	; (8012280 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 80121ae:	fa22 f303 	lsr.w	r3, r2, r3
 80121b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80121b4:	e01e      	b.n	80121f4 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80121b6:	4b31      	ldr	r3, [pc, #196]	; (801227c <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 80121b8:	681b      	ldr	r3, [r3, #0]
 80121ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80121be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80121c2:	d106      	bne.n	80121d2 <HAL_RCCEx_GetPeriphCLKFreq+0x4c2>
 80121c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80121c6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80121ca:	d102      	bne.n	80121d2 <HAL_RCCEx_GetPeriphCLKFreq+0x4c2>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80121cc:	4b2d      	ldr	r3, [pc, #180]	; (8012284 <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 80121ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80121d0:	e010      	b.n	80121f4 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80121d2:	4b2a      	ldr	r3, [pc, #168]	; (801227c <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 80121d4:	681b      	ldr	r3, [r3, #0]
 80121d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80121da:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80121de:	d106      	bne.n	80121ee <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 80121e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80121e2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80121e6:	d102      	bne.n	80121ee <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80121e8:	4b27      	ldr	r3, [pc, #156]	; (8012288 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 80121ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80121ec:	e002      	b.n	80121f4 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80121ee:	2300      	movs	r3, #0
 80121f0:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80121f2:	e1b0      	b.n	8012556 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
 80121f4:	e1af      	b.n	8012556 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80121f6:	4b25      	ldr	r3, [pc, #148]	; (801228c <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 80121f8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80121fa:	e1ac      	b.n	8012556 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      default :
        {
          frequency = 0;
 80121fc:	2300      	movs	r3, #0
 80121fe:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8012200:	e1a9      	b.n	8012556 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8012202:	687b      	ldr	r3, [r7, #4]
 8012204:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8012208:	d17d      	bne.n	8012306 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 801220a:	4b1c      	ldr	r3, [pc, #112]	; (801227c <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 801220c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801220e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8012212:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8012214:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012216:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801221a:	d039      	beq.n	8012290 <HAL_RCCEx_GetPeriphCLKFreq+0x580>
 801221c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801221e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8012222:	d86d      	bhi.n	8012300 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8012224:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012226:	2b00      	cmp	r3, #0
 8012228:	d004      	beq.n	8012234 <HAL_RCCEx_GetPeriphCLKFreq+0x524>
 801222a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801222c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012230:	d012      	beq.n	8012258 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
 8012232:	e065      	b.n	8012300 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8012234:	4b11      	ldr	r3, [pc, #68]	; (801227c <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8012236:	681b      	ldr	r3, [r3, #0]
 8012238:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801223c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8012240:	d107      	bne.n	8012252 <HAL_RCCEx_GetPeriphCLKFreq+0x542>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8012242:	f107 0318 	add.w	r3, r7, #24
 8012246:	4618      	mov	r0, r3
 8012248:	f000 f9a2 	bl	8012590 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 801224c:	69bb      	ldr	r3, [r7, #24]
 801224e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8012250:	e181      	b.n	8012556 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 8012252:	2300      	movs	r3, #0
 8012254:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8012256:	e17e      	b.n	8012556 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8012258:	4b08      	ldr	r3, [pc, #32]	; (801227c <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 801225a:	681b      	ldr	r3, [r3, #0]
 801225c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8012260:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8012264:	d107      	bne.n	8012276 <HAL_RCCEx_GetPeriphCLKFreq+0x566>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8012266:	f107 030c 	add.w	r3, r7, #12
 801226a:	4618      	mov	r0, r3
 801226c:	f000 fae4 	bl	8012838 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8012270:	697b      	ldr	r3, [r7, #20]
 8012272:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8012274:	e16f      	b.n	8012556 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 8012276:	2300      	movs	r3, #0
 8012278:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 801227a:	e16c      	b.n	8012556 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
 801227c:	58024400 	.word	0x58024400
 8012280:	03d09000 	.word	0x03d09000
 8012284:	003d0900 	.word	0x003d0900
 8012288:	016e3600 	.word	0x016e3600
 801228c:	00bb8000 	.word	0x00bb8000
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8012290:	4ba0      	ldr	r3, [pc, #640]	; (8012514 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8012292:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012294:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8012298:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 801229a:	4b9e      	ldr	r3, [pc, #632]	; (8012514 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 801229c:	681b      	ldr	r3, [r3, #0]
 801229e:	f003 0304 	and.w	r3, r3, #4
 80122a2:	2b04      	cmp	r3, #4
 80122a4:	d10c      	bne.n	80122c0 <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>
 80122a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80122a8:	2b00      	cmp	r3, #0
 80122aa:	d109      	bne.n	80122c0 <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80122ac:	4b99      	ldr	r3, [pc, #612]	; (8012514 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 80122ae:	681b      	ldr	r3, [r3, #0]
 80122b0:	08db      	lsrs	r3, r3, #3
 80122b2:	f003 0303 	and.w	r3, r3, #3
 80122b6:	4a98      	ldr	r2, [pc, #608]	; (8012518 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 80122b8:	fa22 f303 	lsr.w	r3, r2, r3
 80122bc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80122be:	e01e      	b.n	80122fe <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80122c0:	4b94      	ldr	r3, [pc, #592]	; (8012514 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 80122c2:	681b      	ldr	r3, [r3, #0]
 80122c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80122c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80122cc:	d106      	bne.n	80122dc <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 80122ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80122d0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80122d4:	d102      	bne.n	80122dc <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80122d6:	4b91      	ldr	r3, [pc, #580]	; (801251c <HAL_RCCEx_GetPeriphCLKFreq+0x80c>)
 80122d8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80122da:	e010      	b.n	80122fe <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80122dc:	4b8d      	ldr	r3, [pc, #564]	; (8012514 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 80122de:	681b      	ldr	r3, [r3, #0]
 80122e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80122e4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80122e8:	d106      	bne.n	80122f8 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
 80122ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80122ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80122f0:	d102      	bne.n	80122f8 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80122f2:	4b8b      	ldr	r3, [pc, #556]	; (8012520 <HAL_RCCEx_GetPeriphCLKFreq+0x810>)
 80122f4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80122f6:	e002      	b.n	80122fe <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80122f8:	2300      	movs	r3, #0
 80122fa:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80122fc:	e12b      	b.n	8012556 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
 80122fe:	e12a      	b.n	8012556 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      default :
        {
          frequency = 0;
 8012300:	2300      	movs	r3, #0
 8012302:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8012304:	e127      	b.n	8012556 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8012306:	687b      	ldr	r3, [r7, #4]
 8012308:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801230c:	d133      	bne.n	8012376 <HAL_RCCEx_GetPeriphCLKFreq+0x666>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 801230e:	4b81      	ldr	r3, [pc, #516]	; (8012514 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8012310:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012312:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8012316:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8012318:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801231a:	2b00      	cmp	r3, #0
 801231c:	d004      	beq.n	8012328 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
 801231e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012320:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012324:	d012      	beq.n	801234c <HAL_RCCEx_GetPeriphCLKFreq+0x63c>
 8012326:	e023      	b.n	8012370 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8012328:	4b7a      	ldr	r3, [pc, #488]	; (8012514 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 801232a:	681b      	ldr	r3, [r3, #0]
 801232c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8012330:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8012334:	d107      	bne.n	8012346 <HAL_RCCEx_GetPeriphCLKFreq+0x636>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8012336:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801233a:	4618      	mov	r0, r3
 801233c:	f000 fbd0 	bl	8012ae0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8012340:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012342:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8012344:	e107      	b.n	8012556 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          frequency = 0;
 8012346:	2300      	movs	r3, #0
 8012348:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 801234a:	e104      	b.n	8012556 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 801234c:	4b71      	ldr	r3, [pc, #452]	; (8012514 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 801234e:	681b      	ldr	r3, [r3, #0]
 8012350:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8012354:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8012358:	d107      	bne.n	801236a <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801235a:	f107 0318 	add.w	r3, r7, #24
 801235e:	4618      	mov	r0, r3
 8012360:	f000 f916 	bl	8012590 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8012364:	6a3b      	ldr	r3, [r7, #32]
 8012366:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8012368:	e0f5      	b.n	8012556 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          frequency = 0;
 801236a:	2300      	movs	r3, #0
 801236c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 801236e:	e0f2      	b.n	8012556 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      default :
        {
          frequency = 0;
 8012370:	2300      	movs	r3, #0
 8012372:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8012374:	e0ef      	b.n	8012556 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8012376:	687b      	ldr	r3, [r7, #4]
 8012378:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801237c:	f040 8091 	bne.w	80124a2 <HAL_RCCEx_GetPeriphCLKFreq+0x792>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8012380:	4b64      	ldr	r3, [pc, #400]	; (8012514 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8012382:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012384:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8012388:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 801238a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801238c:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8012390:	f000 8081 	beq.w	8012496 <HAL_RCCEx_GetPeriphCLKFreq+0x786>
 8012394:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012396:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 801239a:	d87f      	bhi.n	801249c <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
 801239c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801239e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80123a2:	d06b      	beq.n	801247c <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
 80123a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80123a6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80123aa:	d877      	bhi.n	801249c <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
 80123ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80123ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80123b2:	d056      	beq.n	8012462 <HAL_RCCEx_GetPeriphCLKFreq+0x752>
 80123b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80123b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80123ba:	d86f      	bhi.n	801249c <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
 80123bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80123be:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80123c2:	d03b      	beq.n	801243c <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
 80123c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80123c6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80123ca:	d867      	bhi.n	801249c <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
 80123cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80123ce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80123d2:	d021      	beq.n	8012418 <HAL_RCCEx_GetPeriphCLKFreq+0x708>
 80123d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80123d6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80123da:	d85f      	bhi.n	801249c <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
 80123dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80123de:	2b00      	cmp	r3, #0
 80123e0:	d004      	beq.n	80123ec <HAL_RCCEx_GetPeriphCLKFreq+0x6dc>
 80123e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80123e4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80123e8:	d004      	beq.n	80123f4 <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
 80123ea:	e057      	b.n	801249c <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 80123ec:	f000 f8ba 	bl	8012564 <HAL_RCCEx_GetD3PCLK1Freq>
 80123f0:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 80123f2:	e0b0      	b.n	8012556 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80123f4:	4b47      	ldr	r3, [pc, #284]	; (8012514 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 80123f6:	681b      	ldr	r3, [r3, #0]
 80123f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80123fc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8012400:	d107      	bne.n	8012412 <HAL_RCCEx_GetPeriphCLKFreq+0x702>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8012402:	f107 0318 	add.w	r3, r7, #24
 8012406:	4618      	mov	r0, r3
 8012408:	f000 f8c2 	bl	8012590 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 801240c:	69fb      	ldr	r3, [r7, #28]
 801240e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8012410:	e0a1      	b.n	8012556 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          frequency = 0;
 8012412:	2300      	movs	r3, #0
 8012414:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8012416:	e09e      	b.n	8012556 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8012418:	4b3e      	ldr	r3, [pc, #248]	; (8012514 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 801241a:	681b      	ldr	r3, [r3, #0]
 801241c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8012420:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8012424:	d107      	bne.n	8012436 <HAL_RCCEx_GetPeriphCLKFreq+0x726>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8012426:	f107 030c 	add.w	r3, r7, #12
 801242a:	4618      	mov	r0, r3
 801242c:	f000 fa04 	bl	8012838 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8012430:	693b      	ldr	r3, [r7, #16]
 8012432:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8012434:	e08f      	b.n	8012556 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          frequency = 0;
 8012436:	2300      	movs	r3, #0
 8012438:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 801243a:	e08c      	b.n	8012556 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 801243c:	4b35      	ldr	r3, [pc, #212]	; (8012514 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 801243e:	681b      	ldr	r3, [r3, #0]
 8012440:	f003 0304 	and.w	r3, r3, #4
 8012444:	2b04      	cmp	r3, #4
 8012446:	d109      	bne.n	801245c <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8012448:	4b32      	ldr	r3, [pc, #200]	; (8012514 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 801244a:	681b      	ldr	r3, [r3, #0]
 801244c:	08db      	lsrs	r3, r3, #3
 801244e:	f003 0303 	and.w	r3, r3, #3
 8012452:	4a31      	ldr	r2, [pc, #196]	; (8012518 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8012454:	fa22 f303 	lsr.w	r3, r2, r3
 8012458:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 801245a:	e07c      	b.n	8012556 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          frequency = 0;
 801245c:	2300      	movs	r3, #0
 801245e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8012460:	e079      	b.n	8012556 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8012462:	4b2c      	ldr	r3, [pc, #176]	; (8012514 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8012464:	681b      	ldr	r3, [r3, #0]
 8012466:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801246a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801246e:	d102      	bne.n	8012476 <HAL_RCCEx_GetPeriphCLKFreq+0x766>
         {
          frequency = CSI_VALUE;
 8012470:	4b2a      	ldr	r3, [pc, #168]	; (801251c <HAL_RCCEx_GetPeriphCLKFreq+0x80c>)
 8012472:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8012474:	e06f      	b.n	8012556 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 8012476:	2300      	movs	r3, #0
 8012478:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 801247a:	e06c      	b.n	8012556 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 801247c:	4b25      	ldr	r3, [pc, #148]	; (8012514 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 801247e:	681b      	ldr	r3, [r3, #0]
 8012480:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8012484:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8012488:	d102      	bne.n	8012490 <HAL_RCCEx_GetPeriphCLKFreq+0x780>
         {
          frequency = HSE_VALUE;
 801248a:	4b25      	ldr	r3, [pc, #148]	; (8012520 <HAL_RCCEx_GetPeriphCLKFreq+0x810>)
 801248c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 801248e:	e062      	b.n	8012556 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          frequency = 0;
 8012490:	2300      	movs	r3, #0
 8012492:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8012494:	e05f      	b.n	8012556 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
#if defined(RCC_SPI6CLKSOURCE_PIN)
      case RCC_SPI6CLKSOURCE_PIN: /* External clock is the clock source for SPI6 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8012496:	4b23      	ldr	r3, [pc, #140]	; (8012524 <HAL_RCCEx_GetPeriphCLKFreq+0x814>)
 8012498:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 801249a:	e05c      	b.n	8012556 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 801249c:	2300      	movs	r3, #0
 801249e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80124a0:	e059      	b.n	8012556 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 80124a2:	687b      	ldr	r3, [r7, #4]
 80124a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80124a8:	d153      	bne.n	8012552 <HAL_RCCEx_GetPeriphCLKFreq+0x842>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 80124aa:	4b1a      	ldr	r3, [pc, #104]	; (8012514 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 80124ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80124ae:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80124b2:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80124b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80124b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80124ba:	d035      	beq.n	8012528 <HAL_RCCEx_GetPeriphCLKFreq+0x818>
 80124bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80124be:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80124c2:	d843      	bhi.n	801254c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>
 80124c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80124c6:	2b00      	cmp	r3, #0
 80124c8:	d004      	beq.n	80124d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>
 80124ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80124cc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80124d0:	d00d      	beq.n	80124ee <HAL_RCCEx_GetPeriphCLKFreq+0x7de>
 80124d2:	e03b      	b.n	801254c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80124d4:	4b0f      	ldr	r3, [pc, #60]	; (8012514 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 80124d6:	681b      	ldr	r3, [r3, #0]
 80124d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80124dc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80124e0:	d102      	bne.n	80124e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7d8>
         {
          frequency = HSE_VALUE;
 80124e2:	4b0f      	ldr	r3, [pc, #60]	; (8012520 <HAL_RCCEx_GetPeriphCLKFreq+0x810>)
 80124e4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80124e6:	e036      	b.n	8012556 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          frequency = 0;
 80124e8:	2300      	movs	r3, #0
 80124ea:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80124ec:	e033      	b.n	8012556 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80124ee:	4b09      	ldr	r3, [pc, #36]	; (8012514 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 80124f0:	681b      	ldr	r3, [r3, #0]
 80124f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80124f6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80124fa:	d107      	bne.n	801250c <HAL_RCCEx_GetPeriphCLKFreq+0x7fc>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80124fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8012500:	4618      	mov	r0, r3
 8012502:	f000 faed 	bl	8012ae0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8012506:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012508:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 801250a:	e024      	b.n	8012556 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          frequency = 0;
 801250c:	2300      	movs	r3, #0
 801250e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8012510:	e021      	b.n	8012556 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
 8012512:	bf00      	nop
 8012514:	58024400 	.word	0x58024400
 8012518:	03d09000 	.word	0x03d09000
 801251c:	003d0900 	.word	0x003d0900
 8012520:	016e3600 	.word	0x016e3600
 8012524:	00bb8000 	.word	0x00bb8000
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8012528:	4b0d      	ldr	r3, [pc, #52]	; (8012560 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 801252a:	681b      	ldr	r3, [r3, #0]
 801252c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8012530:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8012534:	d107      	bne.n	8012546 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8012536:	f107 0318 	add.w	r3, r7, #24
 801253a:	4618      	mov	r0, r3
 801253c:	f000 f828 	bl	8012590 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8012540:	69fb      	ldr	r3, [r7, #28]
 8012542:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8012544:	e007      	b.n	8012556 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          frequency = 0;
 8012546:	2300      	movs	r3, #0
 8012548:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 801254a:	e004      	b.n	8012556 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      default :
        {
          frequency = 0;
 801254c:	2300      	movs	r3, #0
 801254e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8012550:	e001      	b.n	8012556 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      }
    }
  else
    {
      frequency = 0;
 8012552:	2300      	movs	r3, #0
 8012554:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 8012556:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8012558:	4618      	mov	r0, r3
 801255a:	3740      	adds	r7, #64	; 0x40
 801255c:	46bd      	mov	sp, r7
 801255e:	bd80      	pop	{r7, pc}
 8012560:	58024400 	.word	0x58024400

08012564 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8012564:	b580      	push	{r7, lr}
 8012566:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 8012568:	f7fe fc28 	bl	8010dbc <HAL_RCC_GetHCLKFreq>
 801256c:	4602      	mov	r2, r0
 801256e:	4b06      	ldr	r3, [pc, #24]	; (8012588 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8012570:	6a1b      	ldr	r3, [r3, #32]
 8012572:	091b      	lsrs	r3, r3, #4
 8012574:	f003 0307 	and.w	r3, r3, #7
 8012578:	4904      	ldr	r1, [pc, #16]	; (801258c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 801257a:	5ccb      	ldrb	r3, [r1, r3]
 801257c:	f003 031f 	and.w	r3, r3, #31
 8012580:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8012584:	4618      	mov	r0, r3
 8012586:	bd80      	pop	{r7, pc}
 8012588:	58024400 	.word	0x58024400
 801258c:	0802e3c4 	.word	0x0802e3c4

08012590 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8012590:	b480      	push	{r7}
 8012592:	b089      	sub	sp, #36	; 0x24
 8012594:	af00      	add	r7, sp, #0
 8012596:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8012598:	4ba1      	ldr	r3, [pc, #644]	; (8012820 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801259a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801259c:	f003 0303 	and.w	r3, r3, #3
 80125a0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80125a2:	4b9f      	ldr	r3, [pc, #636]	; (8012820 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80125a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80125a6:	0b1b      	lsrs	r3, r3, #12
 80125a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80125ac:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80125ae:	4b9c      	ldr	r3, [pc, #624]	; (8012820 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80125b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80125b2:	091b      	lsrs	r3, r3, #4
 80125b4:	f003 0301 	and.w	r3, r3, #1
 80125b8:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80125ba:	4b99      	ldr	r3, [pc, #612]	; (8012820 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80125bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80125be:	08db      	lsrs	r3, r3, #3
 80125c0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80125c4:	693a      	ldr	r2, [r7, #16]
 80125c6:	fb02 f303 	mul.w	r3, r2, r3
 80125ca:	ee07 3a90 	vmov	s15, r3
 80125ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80125d2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80125d6:	697b      	ldr	r3, [r7, #20]
 80125d8:	2b00      	cmp	r3, #0
 80125da:	f000 8111 	beq.w	8012800 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80125de:	69bb      	ldr	r3, [r7, #24]
 80125e0:	2b02      	cmp	r3, #2
 80125e2:	f000 8083 	beq.w	80126ec <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80125e6:	69bb      	ldr	r3, [r7, #24]
 80125e8:	2b02      	cmp	r3, #2
 80125ea:	f200 80a1 	bhi.w	8012730 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80125ee:	69bb      	ldr	r3, [r7, #24]
 80125f0:	2b00      	cmp	r3, #0
 80125f2:	d003      	beq.n	80125fc <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80125f4:	69bb      	ldr	r3, [r7, #24]
 80125f6:	2b01      	cmp	r3, #1
 80125f8:	d056      	beq.n	80126a8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80125fa:	e099      	b.n	8012730 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80125fc:	4b88      	ldr	r3, [pc, #544]	; (8012820 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80125fe:	681b      	ldr	r3, [r3, #0]
 8012600:	f003 0320 	and.w	r3, r3, #32
 8012604:	2b00      	cmp	r3, #0
 8012606:	d02d      	beq.n	8012664 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8012608:	4b85      	ldr	r3, [pc, #532]	; (8012820 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801260a:	681b      	ldr	r3, [r3, #0]
 801260c:	08db      	lsrs	r3, r3, #3
 801260e:	f003 0303 	and.w	r3, r3, #3
 8012612:	4a84      	ldr	r2, [pc, #528]	; (8012824 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8012614:	fa22 f303 	lsr.w	r3, r2, r3
 8012618:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 801261a:	68bb      	ldr	r3, [r7, #8]
 801261c:	ee07 3a90 	vmov	s15, r3
 8012620:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8012624:	697b      	ldr	r3, [r7, #20]
 8012626:	ee07 3a90 	vmov	s15, r3
 801262a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801262e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8012632:	4b7b      	ldr	r3, [pc, #492]	; (8012820 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8012634:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012636:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801263a:	ee07 3a90 	vmov	s15, r3
 801263e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8012642:	ed97 6a03 	vldr	s12, [r7, #12]
 8012646:	eddf 5a78 	vldr	s11, [pc, #480]	; 8012828 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 801264a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801264e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8012652:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8012656:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801265a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801265e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8012662:	e087      	b.n	8012774 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8012664:	697b      	ldr	r3, [r7, #20]
 8012666:	ee07 3a90 	vmov	s15, r3
 801266a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801266e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 801282c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8012672:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8012676:	4b6a      	ldr	r3, [pc, #424]	; (8012820 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8012678:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801267a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801267e:	ee07 3a90 	vmov	s15, r3
 8012682:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8012686:	ed97 6a03 	vldr	s12, [r7, #12]
 801268a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8012828 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 801268e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8012692:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8012696:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801269a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801269e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80126a2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80126a6:	e065      	b.n	8012774 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80126a8:	697b      	ldr	r3, [r7, #20]
 80126aa:	ee07 3a90 	vmov	s15, r3
 80126ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80126b2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8012830 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80126b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80126ba:	4b59      	ldr	r3, [pc, #356]	; (8012820 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80126bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80126be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80126c2:	ee07 3a90 	vmov	s15, r3
 80126c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80126ca:	ed97 6a03 	vldr	s12, [r7, #12]
 80126ce:	eddf 5a56 	vldr	s11, [pc, #344]	; 8012828 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80126d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80126d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80126da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80126de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80126e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80126e6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80126ea:	e043      	b.n	8012774 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80126ec:	697b      	ldr	r3, [r7, #20]
 80126ee:	ee07 3a90 	vmov	s15, r3
 80126f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80126f6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8012834 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80126fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80126fe:	4b48      	ldr	r3, [pc, #288]	; (8012820 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8012700:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012702:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012706:	ee07 3a90 	vmov	s15, r3
 801270a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801270e:	ed97 6a03 	vldr	s12, [r7, #12]
 8012712:	eddf 5a45 	vldr	s11, [pc, #276]	; 8012828 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8012716:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801271a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801271e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8012722:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8012726:	ee67 7a27 	vmul.f32	s15, s14, s15
 801272a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 801272e:	e021      	b.n	8012774 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8012730:	697b      	ldr	r3, [r7, #20]
 8012732:	ee07 3a90 	vmov	s15, r3
 8012736:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801273a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8012830 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 801273e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8012742:	4b37      	ldr	r3, [pc, #220]	; (8012820 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8012744:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012746:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801274a:	ee07 3a90 	vmov	s15, r3
 801274e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8012752:	ed97 6a03 	vldr	s12, [r7, #12]
 8012756:	eddf 5a34 	vldr	s11, [pc, #208]	; 8012828 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 801275a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801275e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8012762:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8012766:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801276a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801276e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8012772:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8012774:	4b2a      	ldr	r3, [pc, #168]	; (8012820 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8012776:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012778:	0a5b      	lsrs	r3, r3, #9
 801277a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801277e:	ee07 3a90 	vmov	s15, r3
 8012782:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012786:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801278a:	ee37 7a87 	vadd.f32	s14, s15, s14
 801278e:	edd7 6a07 	vldr	s13, [r7, #28]
 8012792:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8012796:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801279a:	ee17 2a90 	vmov	r2, s15
 801279e:	687b      	ldr	r3, [r7, #4]
 80127a0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80127a2:	4b1f      	ldr	r3, [pc, #124]	; (8012820 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80127a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80127a6:	0c1b      	lsrs	r3, r3, #16
 80127a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80127ac:	ee07 3a90 	vmov	s15, r3
 80127b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80127b4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80127b8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80127bc:	edd7 6a07 	vldr	s13, [r7, #28]
 80127c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80127c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80127c8:	ee17 2a90 	vmov	r2, s15
 80127cc:	687b      	ldr	r3, [r7, #4]
 80127ce:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80127d0:	4b13      	ldr	r3, [pc, #76]	; (8012820 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80127d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80127d4:	0e1b      	lsrs	r3, r3, #24
 80127d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80127da:	ee07 3a90 	vmov	s15, r3
 80127de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80127e2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80127e6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80127ea:	edd7 6a07 	vldr	s13, [r7, #28]
 80127ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80127f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80127f6:	ee17 2a90 	vmov	r2, s15
 80127fa:	687b      	ldr	r3, [r7, #4]
 80127fc:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80127fe:	e008      	b.n	8012812 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8012800:	687b      	ldr	r3, [r7, #4]
 8012802:	2200      	movs	r2, #0
 8012804:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8012806:	687b      	ldr	r3, [r7, #4]
 8012808:	2200      	movs	r2, #0
 801280a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 801280c:	687b      	ldr	r3, [r7, #4]
 801280e:	2200      	movs	r2, #0
 8012810:	609a      	str	r2, [r3, #8]
}
 8012812:	bf00      	nop
 8012814:	3724      	adds	r7, #36	; 0x24
 8012816:	46bd      	mov	sp, r7
 8012818:	f85d 7b04 	ldr.w	r7, [sp], #4
 801281c:	4770      	bx	lr
 801281e:	bf00      	nop
 8012820:	58024400 	.word	0x58024400
 8012824:	03d09000 	.word	0x03d09000
 8012828:	46000000 	.word	0x46000000
 801282c:	4c742400 	.word	0x4c742400
 8012830:	4a742400 	.word	0x4a742400
 8012834:	4bb71b00 	.word	0x4bb71b00

08012838 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8012838:	b480      	push	{r7}
 801283a:	b089      	sub	sp, #36	; 0x24
 801283c:	af00      	add	r7, sp, #0
 801283e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8012840:	4ba1      	ldr	r3, [pc, #644]	; (8012ac8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8012842:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012844:	f003 0303 	and.w	r3, r3, #3
 8012848:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 801284a:	4b9f      	ldr	r3, [pc, #636]	; (8012ac8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801284c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801284e:	0d1b      	lsrs	r3, r3, #20
 8012850:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012854:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8012856:	4b9c      	ldr	r3, [pc, #624]	; (8012ac8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8012858:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801285a:	0a1b      	lsrs	r3, r3, #8
 801285c:	f003 0301 	and.w	r3, r3, #1
 8012860:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8012862:	4b99      	ldr	r3, [pc, #612]	; (8012ac8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8012864:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012866:	08db      	lsrs	r3, r3, #3
 8012868:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801286c:	693a      	ldr	r2, [r7, #16]
 801286e:	fb02 f303 	mul.w	r3, r2, r3
 8012872:	ee07 3a90 	vmov	s15, r3
 8012876:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801287a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 801287e:	697b      	ldr	r3, [r7, #20]
 8012880:	2b00      	cmp	r3, #0
 8012882:	f000 8111 	beq.w	8012aa8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8012886:	69bb      	ldr	r3, [r7, #24]
 8012888:	2b02      	cmp	r3, #2
 801288a:	f000 8083 	beq.w	8012994 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 801288e:	69bb      	ldr	r3, [r7, #24]
 8012890:	2b02      	cmp	r3, #2
 8012892:	f200 80a1 	bhi.w	80129d8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8012896:	69bb      	ldr	r3, [r7, #24]
 8012898:	2b00      	cmp	r3, #0
 801289a:	d003      	beq.n	80128a4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 801289c:	69bb      	ldr	r3, [r7, #24]
 801289e:	2b01      	cmp	r3, #1
 80128a0:	d056      	beq.n	8012950 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80128a2:	e099      	b.n	80129d8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80128a4:	4b88      	ldr	r3, [pc, #544]	; (8012ac8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80128a6:	681b      	ldr	r3, [r3, #0]
 80128a8:	f003 0320 	and.w	r3, r3, #32
 80128ac:	2b00      	cmp	r3, #0
 80128ae:	d02d      	beq.n	801290c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80128b0:	4b85      	ldr	r3, [pc, #532]	; (8012ac8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80128b2:	681b      	ldr	r3, [r3, #0]
 80128b4:	08db      	lsrs	r3, r3, #3
 80128b6:	f003 0303 	and.w	r3, r3, #3
 80128ba:	4a84      	ldr	r2, [pc, #528]	; (8012acc <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80128bc:	fa22 f303 	lsr.w	r3, r2, r3
 80128c0:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80128c2:	68bb      	ldr	r3, [r7, #8]
 80128c4:	ee07 3a90 	vmov	s15, r3
 80128c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80128cc:	697b      	ldr	r3, [r7, #20]
 80128ce:	ee07 3a90 	vmov	s15, r3
 80128d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80128d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80128da:	4b7b      	ldr	r3, [pc, #492]	; (8012ac8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80128dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80128de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80128e2:	ee07 3a90 	vmov	s15, r3
 80128e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80128ea:	ed97 6a03 	vldr	s12, [r7, #12]
 80128ee:	eddf 5a78 	vldr	s11, [pc, #480]	; 8012ad0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80128f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80128f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80128fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80128fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8012902:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012906:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 801290a:	e087      	b.n	8012a1c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 801290c:	697b      	ldr	r3, [r7, #20]
 801290e:	ee07 3a90 	vmov	s15, r3
 8012912:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012916:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8012ad4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 801291a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801291e:	4b6a      	ldr	r3, [pc, #424]	; (8012ac8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8012920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012922:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012926:	ee07 3a90 	vmov	s15, r3
 801292a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801292e:	ed97 6a03 	vldr	s12, [r7, #12]
 8012932:	eddf 5a67 	vldr	s11, [pc, #412]	; 8012ad0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8012936:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801293a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801293e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8012942:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8012946:	ee67 7a27 	vmul.f32	s15, s14, s15
 801294a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 801294e:	e065      	b.n	8012a1c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8012950:	697b      	ldr	r3, [r7, #20]
 8012952:	ee07 3a90 	vmov	s15, r3
 8012956:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801295a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8012ad8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 801295e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8012962:	4b59      	ldr	r3, [pc, #356]	; (8012ac8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8012964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012966:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801296a:	ee07 3a90 	vmov	s15, r3
 801296e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8012972:	ed97 6a03 	vldr	s12, [r7, #12]
 8012976:	eddf 5a56 	vldr	s11, [pc, #344]	; 8012ad0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801297a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801297e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8012982:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8012986:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801298a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801298e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8012992:	e043      	b.n	8012a1c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8012994:	697b      	ldr	r3, [r7, #20]
 8012996:	ee07 3a90 	vmov	s15, r3
 801299a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801299e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8012adc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80129a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80129a6:	4b48      	ldr	r3, [pc, #288]	; (8012ac8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80129a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80129aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80129ae:	ee07 3a90 	vmov	s15, r3
 80129b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80129b6:	ed97 6a03 	vldr	s12, [r7, #12]
 80129ba:	eddf 5a45 	vldr	s11, [pc, #276]	; 8012ad0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80129be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80129c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80129c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80129ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80129ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80129d2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80129d6:	e021      	b.n	8012a1c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80129d8:	697b      	ldr	r3, [r7, #20]
 80129da:	ee07 3a90 	vmov	s15, r3
 80129de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80129e2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8012ad8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80129e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80129ea:	4b37      	ldr	r3, [pc, #220]	; (8012ac8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80129ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80129ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80129f2:	ee07 3a90 	vmov	s15, r3
 80129f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80129fa:	ed97 6a03 	vldr	s12, [r7, #12]
 80129fe:	eddf 5a34 	vldr	s11, [pc, #208]	; 8012ad0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8012a02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8012a06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8012a0a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8012a0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8012a12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012a16:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8012a1a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8012a1c:	4b2a      	ldr	r3, [pc, #168]	; (8012ac8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8012a1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012a20:	0a5b      	lsrs	r3, r3, #9
 8012a22:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012a26:	ee07 3a90 	vmov	s15, r3
 8012a2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012a2e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8012a32:	ee37 7a87 	vadd.f32	s14, s15, s14
 8012a36:	edd7 6a07 	vldr	s13, [r7, #28]
 8012a3a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8012a3e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8012a42:	ee17 2a90 	vmov	r2, s15
 8012a46:	687b      	ldr	r3, [r7, #4]
 8012a48:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8012a4a:	4b1f      	ldr	r3, [pc, #124]	; (8012ac8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8012a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012a4e:	0c1b      	lsrs	r3, r3, #16
 8012a50:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012a54:	ee07 3a90 	vmov	s15, r3
 8012a58:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012a5c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8012a60:	ee37 7a87 	vadd.f32	s14, s15, s14
 8012a64:	edd7 6a07 	vldr	s13, [r7, #28]
 8012a68:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8012a6c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8012a70:	ee17 2a90 	vmov	r2, s15
 8012a74:	687b      	ldr	r3, [r7, #4]
 8012a76:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8012a78:	4b13      	ldr	r3, [pc, #76]	; (8012ac8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8012a7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012a7c:	0e1b      	lsrs	r3, r3, #24
 8012a7e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012a82:	ee07 3a90 	vmov	s15, r3
 8012a86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012a8a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8012a8e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8012a92:	edd7 6a07 	vldr	s13, [r7, #28]
 8012a96:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8012a9a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8012a9e:	ee17 2a90 	vmov	r2, s15
 8012aa2:	687b      	ldr	r3, [r7, #4]
 8012aa4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8012aa6:	e008      	b.n	8012aba <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8012aa8:	687b      	ldr	r3, [r7, #4]
 8012aaa:	2200      	movs	r2, #0
 8012aac:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8012aae:	687b      	ldr	r3, [r7, #4]
 8012ab0:	2200      	movs	r2, #0
 8012ab2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8012ab4:	687b      	ldr	r3, [r7, #4]
 8012ab6:	2200      	movs	r2, #0
 8012ab8:	609a      	str	r2, [r3, #8]
}
 8012aba:	bf00      	nop
 8012abc:	3724      	adds	r7, #36	; 0x24
 8012abe:	46bd      	mov	sp, r7
 8012ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ac4:	4770      	bx	lr
 8012ac6:	bf00      	nop
 8012ac8:	58024400 	.word	0x58024400
 8012acc:	03d09000 	.word	0x03d09000
 8012ad0:	46000000 	.word	0x46000000
 8012ad4:	4c742400 	.word	0x4c742400
 8012ad8:	4a742400 	.word	0x4a742400
 8012adc:	4bb71b00 	.word	0x4bb71b00

08012ae0 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8012ae0:	b480      	push	{r7}
 8012ae2:	b089      	sub	sp, #36	; 0x24
 8012ae4:	af00      	add	r7, sp, #0
 8012ae6:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8012ae8:	4ba0      	ldr	r3, [pc, #640]	; (8012d6c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8012aea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012aec:	f003 0303 	and.w	r3, r3, #3
 8012af0:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8012af2:	4b9e      	ldr	r3, [pc, #632]	; (8012d6c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8012af4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012af6:	091b      	lsrs	r3, r3, #4
 8012af8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012afc:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8012afe:	4b9b      	ldr	r3, [pc, #620]	; (8012d6c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8012b00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012b02:	f003 0301 	and.w	r3, r3, #1
 8012b06:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8012b08:	4b98      	ldr	r3, [pc, #608]	; (8012d6c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8012b0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012b0c:	08db      	lsrs	r3, r3, #3
 8012b0e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8012b12:	693a      	ldr	r2, [r7, #16]
 8012b14:	fb02 f303 	mul.w	r3, r2, r3
 8012b18:	ee07 3a90 	vmov	s15, r3
 8012b1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012b20:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8012b24:	697b      	ldr	r3, [r7, #20]
 8012b26:	2b00      	cmp	r3, #0
 8012b28:	f000 8111 	beq.w	8012d4e <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8012b2c:	69bb      	ldr	r3, [r7, #24]
 8012b2e:	2b02      	cmp	r3, #2
 8012b30:	f000 8083 	beq.w	8012c3a <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8012b34:	69bb      	ldr	r3, [r7, #24]
 8012b36:	2b02      	cmp	r3, #2
 8012b38:	f200 80a1 	bhi.w	8012c7e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8012b3c:	69bb      	ldr	r3, [r7, #24]
 8012b3e:	2b00      	cmp	r3, #0
 8012b40:	d003      	beq.n	8012b4a <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8012b42:	69bb      	ldr	r3, [r7, #24]
 8012b44:	2b01      	cmp	r3, #1
 8012b46:	d056      	beq.n	8012bf6 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8012b48:	e099      	b.n	8012c7e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8012b4a:	4b88      	ldr	r3, [pc, #544]	; (8012d6c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8012b4c:	681b      	ldr	r3, [r3, #0]
 8012b4e:	f003 0320 	and.w	r3, r3, #32
 8012b52:	2b00      	cmp	r3, #0
 8012b54:	d02d      	beq.n	8012bb2 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8012b56:	4b85      	ldr	r3, [pc, #532]	; (8012d6c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8012b58:	681b      	ldr	r3, [r3, #0]
 8012b5a:	08db      	lsrs	r3, r3, #3
 8012b5c:	f003 0303 	and.w	r3, r3, #3
 8012b60:	4a83      	ldr	r2, [pc, #524]	; (8012d70 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8012b62:	fa22 f303 	lsr.w	r3, r2, r3
 8012b66:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8012b68:	68bb      	ldr	r3, [r7, #8]
 8012b6a:	ee07 3a90 	vmov	s15, r3
 8012b6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8012b72:	697b      	ldr	r3, [r7, #20]
 8012b74:	ee07 3a90 	vmov	s15, r3
 8012b78:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012b7c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8012b80:	4b7a      	ldr	r3, [pc, #488]	; (8012d6c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8012b82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012b84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012b88:	ee07 3a90 	vmov	s15, r3
 8012b8c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8012b90:	ed97 6a03 	vldr	s12, [r7, #12]
 8012b94:	eddf 5a77 	vldr	s11, [pc, #476]	; 8012d74 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8012b98:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8012b9c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8012ba0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8012ba4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8012ba8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012bac:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8012bb0:	e087      	b.n	8012cc2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8012bb2:	697b      	ldr	r3, [r7, #20]
 8012bb4:	ee07 3a90 	vmov	s15, r3
 8012bb8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012bbc:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8012d78 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8012bc0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8012bc4:	4b69      	ldr	r3, [pc, #420]	; (8012d6c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8012bc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012bc8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012bcc:	ee07 3a90 	vmov	s15, r3
 8012bd0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8012bd4:	ed97 6a03 	vldr	s12, [r7, #12]
 8012bd8:	eddf 5a66 	vldr	s11, [pc, #408]	; 8012d74 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8012bdc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8012be0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8012be4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8012be8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8012bec:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012bf0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8012bf4:	e065      	b.n	8012cc2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8012bf6:	697b      	ldr	r3, [r7, #20]
 8012bf8:	ee07 3a90 	vmov	s15, r3
 8012bfc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012c00:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8012d7c <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8012c04:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8012c08:	4b58      	ldr	r3, [pc, #352]	; (8012d6c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8012c0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012c0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012c10:	ee07 3a90 	vmov	s15, r3
 8012c14:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8012c18:	ed97 6a03 	vldr	s12, [r7, #12]
 8012c1c:	eddf 5a55 	vldr	s11, [pc, #340]	; 8012d74 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8012c20:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8012c24:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8012c28:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8012c2c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8012c30:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012c34:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8012c38:	e043      	b.n	8012cc2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8012c3a:	697b      	ldr	r3, [r7, #20]
 8012c3c:	ee07 3a90 	vmov	s15, r3
 8012c40:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012c44:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8012d80 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8012c48:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8012c4c:	4b47      	ldr	r3, [pc, #284]	; (8012d6c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8012c4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012c50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012c54:	ee07 3a90 	vmov	s15, r3
 8012c58:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8012c5c:	ed97 6a03 	vldr	s12, [r7, #12]
 8012c60:	eddf 5a44 	vldr	s11, [pc, #272]	; 8012d74 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8012c64:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8012c68:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8012c6c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8012c70:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8012c74:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012c78:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8012c7c:	e021      	b.n	8012cc2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8012c7e:	697b      	ldr	r3, [r7, #20]
 8012c80:	ee07 3a90 	vmov	s15, r3
 8012c84:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012c88:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8012d78 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8012c8c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8012c90:	4b36      	ldr	r3, [pc, #216]	; (8012d6c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8012c92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012c94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012c98:	ee07 3a90 	vmov	s15, r3
 8012c9c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8012ca0:	ed97 6a03 	vldr	s12, [r7, #12]
 8012ca4:	eddf 5a33 	vldr	s11, [pc, #204]	; 8012d74 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8012ca8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8012cac:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8012cb0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8012cb4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8012cb8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012cbc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8012cc0:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8012cc2:	4b2a      	ldr	r3, [pc, #168]	; (8012d6c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8012cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012cc6:	0a5b      	lsrs	r3, r3, #9
 8012cc8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012ccc:	ee07 3a90 	vmov	s15, r3
 8012cd0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012cd4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8012cd8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8012cdc:	edd7 6a07 	vldr	s13, [r7, #28]
 8012ce0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8012ce4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8012ce8:	ee17 2a90 	vmov	r2, s15
 8012cec:	687b      	ldr	r3, [r7, #4]
 8012cee:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8012cf0:	4b1e      	ldr	r3, [pc, #120]	; (8012d6c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8012cf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012cf4:	0c1b      	lsrs	r3, r3, #16
 8012cf6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012cfa:	ee07 3a90 	vmov	s15, r3
 8012cfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012d02:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8012d06:	ee37 7a87 	vadd.f32	s14, s15, s14
 8012d0a:	edd7 6a07 	vldr	s13, [r7, #28]
 8012d0e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8012d12:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8012d16:	ee17 2a90 	vmov	r2, s15
 8012d1a:	687b      	ldr	r3, [r7, #4]
 8012d1c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8012d1e:	4b13      	ldr	r3, [pc, #76]	; (8012d6c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8012d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012d22:	0e1b      	lsrs	r3, r3, #24
 8012d24:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012d28:	ee07 3a90 	vmov	s15, r3
 8012d2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012d30:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8012d34:	ee37 7a87 	vadd.f32	s14, s15, s14
 8012d38:	edd7 6a07 	vldr	s13, [r7, #28]
 8012d3c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8012d40:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8012d44:	ee17 2a90 	vmov	r2, s15
 8012d48:	687b      	ldr	r3, [r7, #4]
 8012d4a:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8012d4c:	e008      	b.n	8012d60 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8012d4e:	687b      	ldr	r3, [r7, #4]
 8012d50:	2200      	movs	r2, #0
 8012d52:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8012d54:	687b      	ldr	r3, [r7, #4]
 8012d56:	2200      	movs	r2, #0
 8012d58:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8012d5a:	687b      	ldr	r3, [r7, #4]
 8012d5c:	2200      	movs	r2, #0
 8012d5e:	609a      	str	r2, [r3, #8]
}
 8012d60:	bf00      	nop
 8012d62:	3724      	adds	r7, #36	; 0x24
 8012d64:	46bd      	mov	sp, r7
 8012d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d6a:	4770      	bx	lr
 8012d6c:	58024400 	.word	0x58024400
 8012d70:	03d09000 	.word	0x03d09000
 8012d74:	46000000 	.word	0x46000000
 8012d78:	4c742400 	.word	0x4c742400
 8012d7c:	4a742400 	.word	0x4a742400
 8012d80:	4bb71b00 	.word	0x4bb71b00

08012d84 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8012d84:	b580      	push	{r7, lr}
 8012d86:	b084      	sub	sp, #16
 8012d88:	af00      	add	r7, sp, #0
 8012d8a:	6078      	str	r0, [r7, #4]
 8012d8c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8012d8e:	2300      	movs	r3, #0
 8012d90:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8012d92:	4b53      	ldr	r3, [pc, #332]	; (8012ee0 <RCCEx_PLL2_Config+0x15c>)
 8012d94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012d96:	f003 0303 	and.w	r3, r3, #3
 8012d9a:	2b03      	cmp	r3, #3
 8012d9c:	d101      	bne.n	8012da2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8012d9e:	2301      	movs	r3, #1
 8012da0:	e099      	b.n	8012ed6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8012da2:	4b4f      	ldr	r3, [pc, #316]	; (8012ee0 <RCCEx_PLL2_Config+0x15c>)
 8012da4:	681b      	ldr	r3, [r3, #0]
 8012da6:	4a4e      	ldr	r2, [pc, #312]	; (8012ee0 <RCCEx_PLL2_Config+0x15c>)
 8012da8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8012dac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8012dae:	f7f8 fb9b 	bl	800b4e8 <HAL_GetTick>
 8012db2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8012db4:	e008      	b.n	8012dc8 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8012db6:	f7f8 fb97 	bl	800b4e8 <HAL_GetTick>
 8012dba:	4602      	mov	r2, r0
 8012dbc:	68bb      	ldr	r3, [r7, #8]
 8012dbe:	1ad3      	subs	r3, r2, r3
 8012dc0:	2b02      	cmp	r3, #2
 8012dc2:	d901      	bls.n	8012dc8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8012dc4:	2303      	movs	r3, #3
 8012dc6:	e086      	b.n	8012ed6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8012dc8:	4b45      	ldr	r3, [pc, #276]	; (8012ee0 <RCCEx_PLL2_Config+0x15c>)
 8012dca:	681b      	ldr	r3, [r3, #0]
 8012dcc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8012dd0:	2b00      	cmp	r3, #0
 8012dd2:	d1f0      	bne.n	8012db6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8012dd4:	4b42      	ldr	r3, [pc, #264]	; (8012ee0 <RCCEx_PLL2_Config+0x15c>)
 8012dd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012dd8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8012ddc:	687b      	ldr	r3, [r7, #4]
 8012dde:	681b      	ldr	r3, [r3, #0]
 8012de0:	031b      	lsls	r3, r3, #12
 8012de2:	493f      	ldr	r1, [pc, #252]	; (8012ee0 <RCCEx_PLL2_Config+0x15c>)
 8012de4:	4313      	orrs	r3, r2
 8012de6:	628b      	str	r3, [r1, #40]	; 0x28
 8012de8:	687b      	ldr	r3, [r7, #4]
 8012dea:	685b      	ldr	r3, [r3, #4]
 8012dec:	3b01      	subs	r3, #1
 8012dee:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8012df2:	687b      	ldr	r3, [r7, #4]
 8012df4:	689b      	ldr	r3, [r3, #8]
 8012df6:	3b01      	subs	r3, #1
 8012df8:	025b      	lsls	r3, r3, #9
 8012dfa:	b29b      	uxth	r3, r3
 8012dfc:	431a      	orrs	r2, r3
 8012dfe:	687b      	ldr	r3, [r7, #4]
 8012e00:	68db      	ldr	r3, [r3, #12]
 8012e02:	3b01      	subs	r3, #1
 8012e04:	041b      	lsls	r3, r3, #16
 8012e06:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8012e0a:	431a      	orrs	r2, r3
 8012e0c:	687b      	ldr	r3, [r7, #4]
 8012e0e:	691b      	ldr	r3, [r3, #16]
 8012e10:	3b01      	subs	r3, #1
 8012e12:	061b      	lsls	r3, r3, #24
 8012e14:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8012e18:	4931      	ldr	r1, [pc, #196]	; (8012ee0 <RCCEx_PLL2_Config+0x15c>)
 8012e1a:	4313      	orrs	r3, r2
 8012e1c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8012e1e:	4b30      	ldr	r3, [pc, #192]	; (8012ee0 <RCCEx_PLL2_Config+0x15c>)
 8012e20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012e22:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8012e26:	687b      	ldr	r3, [r7, #4]
 8012e28:	695b      	ldr	r3, [r3, #20]
 8012e2a:	492d      	ldr	r1, [pc, #180]	; (8012ee0 <RCCEx_PLL2_Config+0x15c>)
 8012e2c:	4313      	orrs	r3, r2
 8012e2e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8012e30:	4b2b      	ldr	r3, [pc, #172]	; (8012ee0 <RCCEx_PLL2_Config+0x15c>)
 8012e32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012e34:	f023 0220 	bic.w	r2, r3, #32
 8012e38:	687b      	ldr	r3, [r7, #4]
 8012e3a:	699b      	ldr	r3, [r3, #24]
 8012e3c:	4928      	ldr	r1, [pc, #160]	; (8012ee0 <RCCEx_PLL2_Config+0x15c>)
 8012e3e:	4313      	orrs	r3, r2
 8012e40:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8012e42:	4b27      	ldr	r3, [pc, #156]	; (8012ee0 <RCCEx_PLL2_Config+0x15c>)
 8012e44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012e46:	4a26      	ldr	r2, [pc, #152]	; (8012ee0 <RCCEx_PLL2_Config+0x15c>)
 8012e48:	f023 0310 	bic.w	r3, r3, #16
 8012e4c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8012e4e:	4b24      	ldr	r3, [pc, #144]	; (8012ee0 <RCCEx_PLL2_Config+0x15c>)
 8012e50:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8012e52:	4b24      	ldr	r3, [pc, #144]	; (8012ee4 <RCCEx_PLL2_Config+0x160>)
 8012e54:	4013      	ands	r3, r2
 8012e56:	687a      	ldr	r2, [r7, #4]
 8012e58:	69d2      	ldr	r2, [r2, #28]
 8012e5a:	00d2      	lsls	r2, r2, #3
 8012e5c:	4920      	ldr	r1, [pc, #128]	; (8012ee0 <RCCEx_PLL2_Config+0x15c>)
 8012e5e:	4313      	orrs	r3, r2
 8012e60:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8012e62:	4b1f      	ldr	r3, [pc, #124]	; (8012ee0 <RCCEx_PLL2_Config+0x15c>)
 8012e64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012e66:	4a1e      	ldr	r2, [pc, #120]	; (8012ee0 <RCCEx_PLL2_Config+0x15c>)
 8012e68:	f043 0310 	orr.w	r3, r3, #16
 8012e6c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8012e6e:	683b      	ldr	r3, [r7, #0]
 8012e70:	2b00      	cmp	r3, #0
 8012e72:	d106      	bne.n	8012e82 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8012e74:	4b1a      	ldr	r3, [pc, #104]	; (8012ee0 <RCCEx_PLL2_Config+0x15c>)
 8012e76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012e78:	4a19      	ldr	r2, [pc, #100]	; (8012ee0 <RCCEx_PLL2_Config+0x15c>)
 8012e7a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8012e7e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8012e80:	e00f      	b.n	8012ea2 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8012e82:	683b      	ldr	r3, [r7, #0]
 8012e84:	2b01      	cmp	r3, #1
 8012e86:	d106      	bne.n	8012e96 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8012e88:	4b15      	ldr	r3, [pc, #84]	; (8012ee0 <RCCEx_PLL2_Config+0x15c>)
 8012e8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012e8c:	4a14      	ldr	r2, [pc, #80]	; (8012ee0 <RCCEx_PLL2_Config+0x15c>)
 8012e8e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8012e92:	62d3      	str	r3, [r2, #44]	; 0x2c
 8012e94:	e005      	b.n	8012ea2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8012e96:	4b12      	ldr	r3, [pc, #72]	; (8012ee0 <RCCEx_PLL2_Config+0x15c>)
 8012e98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012e9a:	4a11      	ldr	r2, [pc, #68]	; (8012ee0 <RCCEx_PLL2_Config+0x15c>)
 8012e9c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8012ea0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8012ea2:	4b0f      	ldr	r3, [pc, #60]	; (8012ee0 <RCCEx_PLL2_Config+0x15c>)
 8012ea4:	681b      	ldr	r3, [r3, #0]
 8012ea6:	4a0e      	ldr	r2, [pc, #56]	; (8012ee0 <RCCEx_PLL2_Config+0x15c>)
 8012ea8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8012eac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8012eae:	f7f8 fb1b 	bl	800b4e8 <HAL_GetTick>
 8012eb2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8012eb4:	e008      	b.n	8012ec8 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8012eb6:	f7f8 fb17 	bl	800b4e8 <HAL_GetTick>
 8012eba:	4602      	mov	r2, r0
 8012ebc:	68bb      	ldr	r3, [r7, #8]
 8012ebe:	1ad3      	subs	r3, r2, r3
 8012ec0:	2b02      	cmp	r3, #2
 8012ec2:	d901      	bls.n	8012ec8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8012ec4:	2303      	movs	r3, #3
 8012ec6:	e006      	b.n	8012ed6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8012ec8:	4b05      	ldr	r3, [pc, #20]	; (8012ee0 <RCCEx_PLL2_Config+0x15c>)
 8012eca:	681b      	ldr	r3, [r3, #0]
 8012ecc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8012ed0:	2b00      	cmp	r3, #0
 8012ed2:	d0f0      	beq.n	8012eb6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8012ed4:	7bfb      	ldrb	r3, [r7, #15]
}
 8012ed6:	4618      	mov	r0, r3
 8012ed8:	3710      	adds	r7, #16
 8012eda:	46bd      	mov	sp, r7
 8012edc:	bd80      	pop	{r7, pc}
 8012ede:	bf00      	nop
 8012ee0:	58024400 	.word	0x58024400
 8012ee4:	ffff0007 	.word	0xffff0007

08012ee8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8012ee8:	b580      	push	{r7, lr}
 8012eea:	b084      	sub	sp, #16
 8012eec:	af00      	add	r7, sp, #0
 8012eee:	6078      	str	r0, [r7, #4]
 8012ef0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8012ef2:	2300      	movs	r3, #0
 8012ef4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8012ef6:	4b53      	ldr	r3, [pc, #332]	; (8013044 <RCCEx_PLL3_Config+0x15c>)
 8012ef8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012efa:	f003 0303 	and.w	r3, r3, #3
 8012efe:	2b03      	cmp	r3, #3
 8012f00:	d101      	bne.n	8012f06 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8012f02:	2301      	movs	r3, #1
 8012f04:	e099      	b.n	801303a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8012f06:	4b4f      	ldr	r3, [pc, #316]	; (8013044 <RCCEx_PLL3_Config+0x15c>)
 8012f08:	681b      	ldr	r3, [r3, #0]
 8012f0a:	4a4e      	ldr	r2, [pc, #312]	; (8013044 <RCCEx_PLL3_Config+0x15c>)
 8012f0c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8012f10:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8012f12:	f7f8 fae9 	bl	800b4e8 <HAL_GetTick>
 8012f16:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8012f18:	e008      	b.n	8012f2c <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8012f1a:	f7f8 fae5 	bl	800b4e8 <HAL_GetTick>
 8012f1e:	4602      	mov	r2, r0
 8012f20:	68bb      	ldr	r3, [r7, #8]
 8012f22:	1ad3      	subs	r3, r2, r3
 8012f24:	2b02      	cmp	r3, #2
 8012f26:	d901      	bls.n	8012f2c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8012f28:	2303      	movs	r3, #3
 8012f2a:	e086      	b.n	801303a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8012f2c:	4b45      	ldr	r3, [pc, #276]	; (8013044 <RCCEx_PLL3_Config+0x15c>)
 8012f2e:	681b      	ldr	r3, [r3, #0]
 8012f30:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8012f34:	2b00      	cmp	r3, #0
 8012f36:	d1f0      	bne.n	8012f1a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8012f38:	4b42      	ldr	r3, [pc, #264]	; (8013044 <RCCEx_PLL3_Config+0x15c>)
 8012f3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012f3c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8012f40:	687b      	ldr	r3, [r7, #4]
 8012f42:	681b      	ldr	r3, [r3, #0]
 8012f44:	051b      	lsls	r3, r3, #20
 8012f46:	493f      	ldr	r1, [pc, #252]	; (8013044 <RCCEx_PLL3_Config+0x15c>)
 8012f48:	4313      	orrs	r3, r2
 8012f4a:	628b      	str	r3, [r1, #40]	; 0x28
 8012f4c:	687b      	ldr	r3, [r7, #4]
 8012f4e:	685b      	ldr	r3, [r3, #4]
 8012f50:	3b01      	subs	r3, #1
 8012f52:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8012f56:	687b      	ldr	r3, [r7, #4]
 8012f58:	689b      	ldr	r3, [r3, #8]
 8012f5a:	3b01      	subs	r3, #1
 8012f5c:	025b      	lsls	r3, r3, #9
 8012f5e:	b29b      	uxth	r3, r3
 8012f60:	431a      	orrs	r2, r3
 8012f62:	687b      	ldr	r3, [r7, #4]
 8012f64:	68db      	ldr	r3, [r3, #12]
 8012f66:	3b01      	subs	r3, #1
 8012f68:	041b      	lsls	r3, r3, #16
 8012f6a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8012f6e:	431a      	orrs	r2, r3
 8012f70:	687b      	ldr	r3, [r7, #4]
 8012f72:	691b      	ldr	r3, [r3, #16]
 8012f74:	3b01      	subs	r3, #1
 8012f76:	061b      	lsls	r3, r3, #24
 8012f78:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8012f7c:	4931      	ldr	r1, [pc, #196]	; (8013044 <RCCEx_PLL3_Config+0x15c>)
 8012f7e:	4313      	orrs	r3, r2
 8012f80:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8012f82:	4b30      	ldr	r3, [pc, #192]	; (8013044 <RCCEx_PLL3_Config+0x15c>)
 8012f84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012f86:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8012f8a:	687b      	ldr	r3, [r7, #4]
 8012f8c:	695b      	ldr	r3, [r3, #20]
 8012f8e:	492d      	ldr	r1, [pc, #180]	; (8013044 <RCCEx_PLL3_Config+0x15c>)
 8012f90:	4313      	orrs	r3, r2
 8012f92:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8012f94:	4b2b      	ldr	r3, [pc, #172]	; (8013044 <RCCEx_PLL3_Config+0x15c>)
 8012f96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012f98:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8012f9c:	687b      	ldr	r3, [r7, #4]
 8012f9e:	699b      	ldr	r3, [r3, #24]
 8012fa0:	4928      	ldr	r1, [pc, #160]	; (8013044 <RCCEx_PLL3_Config+0x15c>)
 8012fa2:	4313      	orrs	r3, r2
 8012fa4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8012fa6:	4b27      	ldr	r3, [pc, #156]	; (8013044 <RCCEx_PLL3_Config+0x15c>)
 8012fa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012faa:	4a26      	ldr	r2, [pc, #152]	; (8013044 <RCCEx_PLL3_Config+0x15c>)
 8012fac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8012fb0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8012fb2:	4b24      	ldr	r3, [pc, #144]	; (8013044 <RCCEx_PLL3_Config+0x15c>)
 8012fb4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8012fb6:	4b24      	ldr	r3, [pc, #144]	; (8013048 <RCCEx_PLL3_Config+0x160>)
 8012fb8:	4013      	ands	r3, r2
 8012fba:	687a      	ldr	r2, [r7, #4]
 8012fbc:	69d2      	ldr	r2, [r2, #28]
 8012fbe:	00d2      	lsls	r2, r2, #3
 8012fc0:	4920      	ldr	r1, [pc, #128]	; (8013044 <RCCEx_PLL3_Config+0x15c>)
 8012fc2:	4313      	orrs	r3, r2
 8012fc4:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8012fc6:	4b1f      	ldr	r3, [pc, #124]	; (8013044 <RCCEx_PLL3_Config+0x15c>)
 8012fc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012fca:	4a1e      	ldr	r2, [pc, #120]	; (8013044 <RCCEx_PLL3_Config+0x15c>)
 8012fcc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8012fd0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8012fd2:	683b      	ldr	r3, [r7, #0]
 8012fd4:	2b00      	cmp	r3, #0
 8012fd6:	d106      	bne.n	8012fe6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8012fd8:	4b1a      	ldr	r3, [pc, #104]	; (8013044 <RCCEx_PLL3_Config+0x15c>)
 8012fda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012fdc:	4a19      	ldr	r2, [pc, #100]	; (8013044 <RCCEx_PLL3_Config+0x15c>)
 8012fde:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8012fe2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8012fe4:	e00f      	b.n	8013006 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8012fe6:	683b      	ldr	r3, [r7, #0]
 8012fe8:	2b01      	cmp	r3, #1
 8012fea:	d106      	bne.n	8012ffa <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8012fec:	4b15      	ldr	r3, [pc, #84]	; (8013044 <RCCEx_PLL3_Config+0x15c>)
 8012fee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012ff0:	4a14      	ldr	r2, [pc, #80]	; (8013044 <RCCEx_PLL3_Config+0x15c>)
 8012ff2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8012ff6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8012ff8:	e005      	b.n	8013006 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8012ffa:	4b12      	ldr	r3, [pc, #72]	; (8013044 <RCCEx_PLL3_Config+0x15c>)
 8012ffc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012ffe:	4a11      	ldr	r2, [pc, #68]	; (8013044 <RCCEx_PLL3_Config+0x15c>)
 8013000:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8013004:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8013006:	4b0f      	ldr	r3, [pc, #60]	; (8013044 <RCCEx_PLL3_Config+0x15c>)
 8013008:	681b      	ldr	r3, [r3, #0]
 801300a:	4a0e      	ldr	r2, [pc, #56]	; (8013044 <RCCEx_PLL3_Config+0x15c>)
 801300c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8013010:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8013012:	f7f8 fa69 	bl	800b4e8 <HAL_GetTick>
 8013016:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8013018:	e008      	b.n	801302c <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 801301a:	f7f8 fa65 	bl	800b4e8 <HAL_GetTick>
 801301e:	4602      	mov	r2, r0
 8013020:	68bb      	ldr	r3, [r7, #8]
 8013022:	1ad3      	subs	r3, r2, r3
 8013024:	2b02      	cmp	r3, #2
 8013026:	d901      	bls.n	801302c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8013028:	2303      	movs	r3, #3
 801302a:	e006      	b.n	801303a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 801302c:	4b05      	ldr	r3, [pc, #20]	; (8013044 <RCCEx_PLL3_Config+0x15c>)
 801302e:	681b      	ldr	r3, [r3, #0]
 8013030:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8013034:	2b00      	cmp	r3, #0
 8013036:	d0f0      	beq.n	801301a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8013038:	7bfb      	ldrb	r3, [r7, #15]
}
 801303a:	4618      	mov	r0, r3
 801303c:	3710      	adds	r7, #16
 801303e:	46bd      	mov	sp, r7
 8013040:	bd80      	pop	{r7, pc}
 8013042:	bf00      	nop
 8013044:	58024400 	.word	0x58024400
 8013048:	ffff0007 	.word	0xffff0007

0801304c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 801304c:	b580      	push	{r7, lr}
 801304e:	b082      	sub	sp, #8
 8013050:	af00      	add	r7, sp, #0
 8013052:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8013054:	687b      	ldr	r3, [r7, #4]
 8013056:	2b00      	cmp	r3, #0
 8013058:	d101      	bne.n	801305e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 801305a:	2301      	movs	r3, #1
 801305c:	e049      	b.n	80130f2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801305e:	687b      	ldr	r3, [r7, #4]
 8013060:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8013064:	b2db      	uxtb	r3, r3
 8013066:	2b00      	cmp	r3, #0
 8013068:	d106      	bne.n	8013078 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801306a:	687b      	ldr	r3, [r7, #4]
 801306c:	2200      	movs	r2, #0
 801306e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8013072:	6878      	ldr	r0, [r7, #4]
 8013074:	f000 f841 	bl	80130fa <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8013078:	687b      	ldr	r3, [r7, #4]
 801307a:	2202      	movs	r2, #2
 801307c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8013080:	687b      	ldr	r3, [r7, #4]
 8013082:	681a      	ldr	r2, [r3, #0]
 8013084:	687b      	ldr	r3, [r7, #4]
 8013086:	3304      	adds	r3, #4
 8013088:	4619      	mov	r1, r3
 801308a:	4610      	mov	r0, r2
 801308c:	f000 fc68 	bl	8013960 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8013090:	687b      	ldr	r3, [r7, #4]
 8013092:	2201      	movs	r2, #1
 8013094:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8013098:	687b      	ldr	r3, [r7, #4]
 801309a:	2201      	movs	r2, #1
 801309c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80130a0:	687b      	ldr	r3, [r7, #4]
 80130a2:	2201      	movs	r2, #1
 80130a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80130a8:	687b      	ldr	r3, [r7, #4]
 80130aa:	2201      	movs	r2, #1
 80130ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80130b0:	687b      	ldr	r3, [r7, #4]
 80130b2:	2201      	movs	r2, #1
 80130b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80130b8:	687b      	ldr	r3, [r7, #4]
 80130ba:	2201      	movs	r2, #1
 80130bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80130c0:	687b      	ldr	r3, [r7, #4]
 80130c2:	2201      	movs	r2, #1
 80130c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80130c8:	687b      	ldr	r3, [r7, #4]
 80130ca:	2201      	movs	r2, #1
 80130cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80130d0:	687b      	ldr	r3, [r7, #4]
 80130d2:	2201      	movs	r2, #1
 80130d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80130d8:	687b      	ldr	r3, [r7, #4]
 80130da:	2201      	movs	r2, #1
 80130dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80130e0:	687b      	ldr	r3, [r7, #4]
 80130e2:	2201      	movs	r2, #1
 80130e4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80130e8:	687b      	ldr	r3, [r7, #4]
 80130ea:	2201      	movs	r2, #1
 80130ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80130f0:	2300      	movs	r3, #0
}
 80130f2:	4618      	mov	r0, r3
 80130f4:	3708      	adds	r7, #8
 80130f6:	46bd      	mov	sp, r7
 80130f8:	bd80      	pop	{r7, pc}

080130fa <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80130fa:	b480      	push	{r7}
 80130fc:	b083      	sub	sp, #12
 80130fe:	af00      	add	r7, sp, #0
 8013100:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8013102:	bf00      	nop
 8013104:	370c      	adds	r7, #12
 8013106:	46bd      	mov	sp, r7
 8013108:	f85d 7b04 	ldr.w	r7, [sp], #4
 801310c:	4770      	bx	lr
	...

08013110 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8013110:	b480      	push	{r7}
 8013112:	b085      	sub	sp, #20
 8013114:	af00      	add	r7, sp, #0
 8013116:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8013118:	687b      	ldr	r3, [r7, #4]
 801311a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801311e:	b2db      	uxtb	r3, r3
 8013120:	2b01      	cmp	r3, #1
 8013122:	d001      	beq.n	8013128 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8013124:	2301      	movs	r3, #1
 8013126:	e04f      	b.n	80131c8 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8013128:	687b      	ldr	r3, [r7, #4]
 801312a:	2202      	movs	r2, #2
 801312c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8013130:	687b      	ldr	r3, [r7, #4]
 8013132:	681b      	ldr	r3, [r3, #0]
 8013134:	68da      	ldr	r2, [r3, #12]
 8013136:	687b      	ldr	r3, [r7, #4]
 8013138:	681b      	ldr	r3, [r3, #0]
 801313a:	f042 0201 	orr.w	r2, r2, #1
 801313e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8013140:	687b      	ldr	r3, [r7, #4]
 8013142:	681b      	ldr	r3, [r3, #0]
 8013144:	4a23      	ldr	r2, [pc, #140]	; (80131d4 <HAL_TIM_Base_Start_IT+0xc4>)
 8013146:	4293      	cmp	r3, r2
 8013148:	d01d      	beq.n	8013186 <HAL_TIM_Base_Start_IT+0x76>
 801314a:	687b      	ldr	r3, [r7, #4]
 801314c:	681b      	ldr	r3, [r3, #0]
 801314e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8013152:	d018      	beq.n	8013186 <HAL_TIM_Base_Start_IT+0x76>
 8013154:	687b      	ldr	r3, [r7, #4]
 8013156:	681b      	ldr	r3, [r3, #0]
 8013158:	4a1f      	ldr	r2, [pc, #124]	; (80131d8 <HAL_TIM_Base_Start_IT+0xc8>)
 801315a:	4293      	cmp	r3, r2
 801315c:	d013      	beq.n	8013186 <HAL_TIM_Base_Start_IT+0x76>
 801315e:	687b      	ldr	r3, [r7, #4]
 8013160:	681b      	ldr	r3, [r3, #0]
 8013162:	4a1e      	ldr	r2, [pc, #120]	; (80131dc <HAL_TIM_Base_Start_IT+0xcc>)
 8013164:	4293      	cmp	r3, r2
 8013166:	d00e      	beq.n	8013186 <HAL_TIM_Base_Start_IT+0x76>
 8013168:	687b      	ldr	r3, [r7, #4]
 801316a:	681b      	ldr	r3, [r3, #0]
 801316c:	4a1c      	ldr	r2, [pc, #112]	; (80131e0 <HAL_TIM_Base_Start_IT+0xd0>)
 801316e:	4293      	cmp	r3, r2
 8013170:	d009      	beq.n	8013186 <HAL_TIM_Base_Start_IT+0x76>
 8013172:	687b      	ldr	r3, [r7, #4]
 8013174:	681b      	ldr	r3, [r3, #0]
 8013176:	4a1b      	ldr	r2, [pc, #108]	; (80131e4 <HAL_TIM_Base_Start_IT+0xd4>)
 8013178:	4293      	cmp	r3, r2
 801317a:	d004      	beq.n	8013186 <HAL_TIM_Base_Start_IT+0x76>
 801317c:	687b      	ldr	r3, [r7, #4]
 801317e:	681b      	ldr	r3, [r3, #0]
 8013180:	4a19      	ldr	r2, [pc, #100]	; (80131e8 <HAL_TIM_Base_Start_IT+0xd8>)
 8013182:	4293      	cmp	r3, r2
 8013184:	d115      	bne.n	80131b2 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8013186:	687b      	ldr	r3, [r7, #4]
 8013188:	681b      	ldr	r3, [r3, #0]
 801318a:	689a      	ldr	r2, [r3, #8]
 801318c:	4b17      	ldr	r3, [pc, #92]	; (80131ec <HAL_TIM_Base_Start_IT+0xdc>)
 801318e:	4013      	ands	r3, r2
 8013190:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8013192:	68fb      	ldr	r3, [r7, #12]
 8013194:	2b06      	cmp	r3, #6
 8013196:	d015      	beq.n	80131c4 <HAL_TIM_Base_Start_IT+0xb4>
 8013198:	68fb      	ldr	r3, [r7, #12]
 801319a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801319e:	d011      	beq.n	80131c4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80131a0:	687b      	ldr	r3, [r7, #4]
 80131a2:	681b      	ldr	r3, [r3, #0]
 80131a4:	681a      	ldr	r2, [r3, #0]
 80131a6:	687b      	ldr	r3, [r7, #4]
 80131a8:	681b      	ldr	r3, [r3, #0]
 80131aa:	f042 0201 	orr.w	r2, r2, #1
 80131ae:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80131b0:	e008      	b.n	80131c4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80131b2:	687b      	ldr	r3, [r7, #4]
 80131b4:	681b      	ldr	r3, [r3, #0]
 80131b6:	681a      	ldr	r2, [r3, #0]
 80131b8:	687b      	ldr	r3, [r7, #4]
 80131ba:	681b      	ldr	r3, [r3, #0]
 80131bc:	f042 0201 	orr.w	r2, r2, #1
 80131c0:	601a      	str	r2, [r3, #0]
 80131c2:	e000      	b.n	80131c6 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80131c4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80131c6:	2300      	movs	r3, #0
}
 80131c8:	4618      	mov	r0, r3
 80131ca:	3714      	adds	r7, #20
 80131cc:	46bd      	mov	sp, r7
 80131ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131d2:	4770      	bx	lr
 80131d4:	40010000 	.word	0x40010000
 80131d8:	40000400 	.word	0x40000400
 80131dc:	40000800 	.word	0x40000800
 80131e0:	40000c00 	.word	0x40000c00
 80131e4:	40010400 	.word	0x40010400
 80131e8:	40001800 	.word	0x40001800
 80131ec:	00010007 	.word	0x00010007

080131f0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80131f0:	b580      	push	{r7, lr}
 80131f2:	b082      	sub	sp, #8
 80131f4:	af00      	add	r7, sp, #0
 80131f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80131f8:	687b      	ldr	r3, [r7, #4]
 80131fa:	2b00      	cmp	r3, #0
 80131fc:	d101      	bne.n	8013202 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80131fe:	2301      	movs	r3, #1
 8013200:	e049      	b.n	8013296 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8013202:	687b      	ldr	r3, [r7, #4]
 8013204:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8013208:	b2db      	uxtb	r3, r3
 801320a:	2b00      	cmp	r3, #0
 801320c:	d106      	bne.n	801321c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801320e:	687b      	ldr	r3, [r7, #4]
 8013210:	2200      	movs	r2, #0
 8013212:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8013216:	6878      	ldr	r0, [r7, #4]
 8013218:	f7f0 fcaa 	bl	8003b70 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801321c:	687b      	ldr	r3, [r7, #4]
 801321e:	2202      	movs	r2, #2
 8013220:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8013224:	687b      	ldr	r3, [r7, #4]
 8013226:	681a      	ldr	r2, [r3, #0]
 8013228:	687b      	ldr	r3, [r7, #4]
 801322a:	3304      	adds	r3, #4
 801322c:	4619      	mov	r1, r3
 801322e:	4610      	mov	r0, r2
 8013230:	f000 fb96 	bl	8013960 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8013234:	687b      	ldr	r3, [r7, #4]
 8013236:	2201      	movs	r2, #1
 8013238:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801323c:	687b      	ldr	r3, [r7, #4]
 801323e:	2201      	movs	r2, #1
 8013240:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8013244:	687b      	ldr	r3, [r7, #4]
 8013246:	2201      	movs	r2, #1
 8013248:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801324c:	687b      	ldr	r3, [r7, #4]
 801324e:	2201      	movs	r2, #1
 8013250:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8013254:	687b      	ldr	r3, [r7, #4]
 8013256:	2201      	movs	r2, #1
 8013258:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 801325c:	687b      	ldr	r3, [r7, #4]
 801325e:	2201      	movs	r2, #1
 8013260:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8013264:	687b      	ldr	r3, [r7, #4]
 8013266:	2201      	movs	r2, #1
 8013268:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801326c:	687b      	ldr	r3, [r7, #4]
 801326e:	2201      	movs	r2, #1
 8013270:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8013274:	687b      	ldr	r3, [r7, #4]
 8013276:	2201      	movs	r2, #1
 8013278:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801327c:	687b      	ldr	r3, [r7, #4]
 801327e:	2201      	movs	r2, #1
 8013280:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8013284:	687b      	ldr	r3, [r7, #4]
 8013286:	2201      	movs	r2, #1
 8013288:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801328c:	687b      	ldr	r3, [r7, #4]
 801328e:	2201      	movs	r2, #1
 8013290:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8013294:	2300      	movs	r3, #0
}
 8013296:	4618      	mov	r0, r3
 8013298:	3708      	adds	r7, #8
 801329a:	46bd      	mov	sp, r7
 801329c:	bd80      	pop	{r7, pc}
	...

080132a0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80132a0:	b580      	push	{r7, lr}
 80132a2:	b084      	sub	sp, #16
 80132a4:	af00      	add	r7, sp, #0
 80132a6:	6078      	str	r0, [r7, #4]
 80132a8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80132aa:	683b      	ldr	r3, [r7, #0]
 80132ac:	2b00      	cmp	r3, #0
 80132ae:	d109      	bne.n	80132c4 <HAL_TIM_PWM_Start+0x24>
 80132b0:	687b      	ldr	r3, [r7, #4]
 80132b2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80132b6:	b2db      	uxtb	r3, r3
 80132b8:	2b01      	cmp	r3, #1
 80132ba:	bf14      	ite	ne
 80132bc:	2301      	movne	r3, #1
 80132be:	2300      	moveq	r3, #0
 80132c0:	b2db      	uxtb	r3, r3
 80132c2:	e03c      	b.n	801333e <HAL_TIM_PWM_Start+0x9e>
 80132c4:	683b      	ldr	r3, [r7, #0]
 80132c6:	2b04      	cmp	r3, #4
 80132c8:	d109      	bne.n	80132de <HAL_TIM_PWM_Start+0x3e>
 80132ca:	687b      	ldr	r3, [r7, #4]
 80132cc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80132d0:	b2db      	uxtb	r3, r3
 80132d2:	2b01      	cmp	r3, #1
 80132d4:	bf14      	ite	ne
 80132d6:	2301      	movne	r3, #1
 80132d8:	2300      	moveq	r3, #0
 80132da:	b2db      	uxtb	r3, r3
 80132dc:	e02f      	b.n	801333e <HAL_TIM_PWM_Start+0x9e>
 80132de:	683b      	ldr	r3, [r7, #0]
 80132e0:	2b08      	cmp	r3, #8
 80132e2:	d109      	bne.n	80132f8 <HAL_TIM_PWM_Start+0x58>
 80132e4:	687b      	ldr	r3, [r7, #4]
 80132e6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80132ea:	b2db      	uxtb	r3, r3
 80132ec:	2b01      	cmp	r3, #1
 80132ee:	bf14      	ite	ne
 80132f0:	2301      	movne	r3, #1
 80132f2:	2300      	moveq	r3, #0
 80132f4:	b2db      	uxtb	r3, r3
 80132f6:	e022      	b.n	801333e <HAL_TIM_PWM_Start+0x9e>
 80132f8:	683b      	ldr	r3, [r7, #0]
 80132fa:	2b0c      	cmp	r3, #12
 80132fc:	d109      	bne.n	8013312 <HAL_TIM_PWM_Start+0x72>
 80132fe:	687b      	ldr	r3, [r7, #4]
 8013300:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8013304:	b2db      	uxtb	r3, r3
 8013306:	2b01      	cmp	r3, #1
 8013308:	bf14      	ite	ne
 801330a:	2301      	movne	r3, #1
 801330c:	2300      	moveq	r3, #0
 801330e:	b2db      	uxtb	r3, r3
 8013310:	e015      	b.n	801333e <HAL_TIM_PWM_Start+0x9e>
 8013312:	683b      	ldr	r3, [r7, #0]
 8013314:	2b10      	cmp	r3, #16
 8013316:	d109      	bne.n	801332c <HAL_TIM_PWM_Start+0x8c>
 8013318:	687b      	ldr	r3, [r7, #4]
 801331a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801331e:	b2db      	uxtb	r3, r3
 8013320:	2b01      	cmp	r3, #1
 8013322:	bf14      	ite	ne
 8013324:	2301      	movne	r3, #1
 8013326:	2300      	moveq	r3, #0
 8013328:	b2db      	uxtb	r3, r3
 801332a:	e008      	b.n	801333e <HAL_TIM_PWM_Start+0x9e>
 801332c:	687b      	ldr	r3, [r7, #4]
 801332e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8013332:	b2db      	uxtb	r3, r3
 8013334:	2b01      	cmp	r3, #1
 8013336:	bf14      	ite	ne
 8013338:	2301      	movne	r3, #1
 801333a:	2300      	moveq	r3, #0
 801333c:	b2db      	uxtb	r3, r3
 801333e:	2b00      	cmp	r3, #0
 8013340:	d001      	beq.n	8013346 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8013342:	2301      	movs	r3, #1
 8013344:	e09c      	b.n	8013480 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8013346:	683b      	ldr	r3, [r7, #0]
 8013348:	2b00      	cmp	r3, #0
 801334a:	d104      	bne.n	8013356 <HAL_TIM_PWM_Start+0xb6>
 801334c:	687b      	ldr	r3, [r7, #4]
 801334e:	2202      	movs	r2, #2
 8013350:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8013354:	e023      	b.n	801339e <HAL_TIM_PWM_Start+0xfe>
 8013356:	683b      	ldr	r3, [r7, #0]
 8013358:	2b04      	cmp	r3, #4
 801335a:	d104      	bne.n	8013366 <HAL_TIM_PWM_Start+0xc6>
 801335c:	687b      	ldr	r3, [r7, #4]
 801335e:	2202      	movs	r2, #2
 8013360:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8013364:	e01b      	b.n	801339e <HAL_TIM_PWM_Start+0xfe>
 8013366:	683b      	ldr	r3, [r7, #0]
 8013368:	2b08      	cmp	r3, #8
 801336a:	d104      	bne.n	8013376 <HAL_TIM_PWM_Start+0xd6>
 801336c:	687b      	ldr	r3, [r7, #4]
 801336e:	2202      	movs	r2, #2
 8013370:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8013374:	e013      	b.n	801339e <HAL_TIM_PWM_Start+0xfe>
 8013376:	683b      	ldr	r3, [r7, #0]
 8013378:	2b0c      	cmp	r3, #12
 801337a:	d104      	bne.n	8013386 <HAL_TIM_PWM_Start+0xe6>
 801337c:	687b      	ldr	r3, [r7, #4]
 801337e:	2202      	movs	r2, #2
 8013380:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8013384:	e00b      	b.n	801339e <HAL_TIM_PWM_Start+0xfe>
 8013386:	683b      	ldr	r3, [r7, #0]
 8013388:	2b10      	cmp	r3, #16
 801338a:	d104      	bne.n	8013396 <HAL_TIM_PWM_Start+0xf6>
 801338c:	687b      	ldr	r3, [r7, #4]
 801338e:	2202      	movs	r2, #2
 8013390:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8013394:	e003      	b.n	801339e <HAL_TIM_PWM_Start+0xfe>
 8013396:	687b      	ldr	r3, [r7, #4]
 8013398:	2202      	movs	r2, #2
 801339a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 801339e:	687b      	ldr	r3, [r7, #4]
 80133a0:	681b      	ldr	r3, [r3, #0]
 80133a2:	2201      	movs	r2, #1
 80133a4:	6839      	ldr	r1, [r7, #0]
 80133a6:	4618      	mov	r0, r3
 80133a8:	f000 fe42 	bl	8014030 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80133ac:	687b      	ldr	r3, [r7, #4]
 80133ae:	681b      	ldr	r3, [r3, #0]
 80133b0:	4a35      	ldr	r2, [pc, #212]	; (8013488 <HAL_TIM_PWM_Start+0x1e8>)
 80133b2:	4293      	cmp	r3, r2
 80133b4:	d013      	beq.n	80133de <HAL_TIM_PWM_Start+0x13e>
 80133b6:	687b      	ldr	r3, [r7, #4]
 80133b8:	681b      	ldr	r3, [r3, #0]
 80133ba:	4a34      	ldr	r2, [pc, #208]	; (801348c <HAL_TIM_PWM_Start+0x1ec>)
 80133bc:	4293      	cmp	r3, r2
 80133be:	d00e      	beq.n	80133de <HAL_TIM_PWM_Start+0x13e>
 80133c0:	687b      	ldr	r3, [r7, #4]
 80133c2:	681b      	ldr	r3, [r3, #0]
 80133c4:	4a32      	ldr	r2, [pc, #200]	; (8013490 <HAL_TIM_PWM_Start+0x1f0>)
 80133c6:	4293      	cmp	r3, r2
 80133c8:	d009      	beq.n	80133de <HAL_TIM_PWM_Start+0x13e>
 80133ca:	687b      	ldr	r3, [r7, #4]
 80133cc:	681b      	ldr	r3, [r3, #0]
 80133ce:	4a31      	ldr	r2, [pc, #196]	; (8013494 <HAL_TIM_PWM_Start+0x1f4>)
 80133d0:	4293      	cmp	r3, r2
 80133d2:	d004      	beq.n	80133de <HAL_TIM_PWM_Start+0x13e>
 80133d4:	687b      	ldr	r3, [r7, #4]
 80133d6:	681b      	ldr	r3, [r3, #0]
 80133d8:	4a2f      	ldr	r2, [pc, #188]	; (8013498 <HAL_TIM_PWM_Start+0x1f8>)
 80133da:	4293      	cmp	r3, r2
 80133dc:	d101      	bne.n	80133e2 <HAL_TIM_PWM_Start+0x142>
 80133de:	2301      	movs	r3, #1
 80133e0:	e000      	b.n	80133e4 <HAL_TIM_PWM_Start+0x144>
 80133e2:	2300      	movs	r3, #0
 80133e4:	2b00      	cmp	r3, #0
 80133e6:	d007      	beq.n	80133f8 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80133e8:	687b      	ldr	r3, [r7, #4]
 80133ea:	681b      	ldr	r3, [r3, #0]
 80133ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80133ee:	687b      	ldr	r3, [r7, #4]
 80133f0:	681b      	ldr	r3, [r3, #0]
 80133f2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80133f6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80133f8:	687b      	ldr	r3, [r7, #4]
 80133fa:	681b      	ldr	r3, [r3, #0]
 80133fc:	4a22      	ldr	r2, [pc, #136]	; (8013488 <HAL_TIM_PWM_Start+0x1e8>)
 80133fe:	4293      	cmp	r3, r2
 8013400:	d01d      	beq.n	801343e <HAL_TIM_PWM_Start+0x19e>
 8013402:	687b      	ldr	r3, [r7, #4]
 8013404:	681b      	ldr	r3, [r3, #0]
 8013406:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801340a:	d018      	beq.n	801343e <HAL_TIM_PWM_Start+0x19e>
 801340c:	687b      	ldr	r3, [r7, #4]
 801340e:	681b      	ldr	r3, [r3, #0]
 8013410:	4a22      	ldr	r2, [pc, #136]	; (801349c <HAL_TIM_PWM_Start+0x1fc>)
 8013412:	4293      	cmp	r3, r2
 8013414:	d013      	beq.n	801343e <HAL_TIM_PWM_Start+0x19e>
 8013416:	687b      	ldr	r3, [r7, #4]
 8013418:	681b      	ldr	r3, [r3, #0]
 801341a:	4a21      	ldr	r2, [pc, #132]	; (80134a0 <HAL_TIM_PWM_Start+0x200>)
 801341c:	4293      	cmp	r3, r2
 801341e:	d00e      	beq.n	801343e <HAL_TIM_PWM_Start+0x19e>
 8013420:	687b      	ldr	r3, [r7, #4]
 8013422:	681b      	ldr	r3, [r3, #0]
 8013424:	4a1f      	ldr	r2, [pc, #124]	; (80134a4 <HAL_TIM_PWM_Start+0x204>)
 8013426:	4293      	cmp	r3, r2
 8013428:	d009      	beq.n	801343e <HAL_TIM_PWM_Start+0x19e>
 801342a:	687b      	ldr	r3, [r7, #4]
 801342c:	681b      	ldr	r3, [r3, #0]
 801342e:	4a17      	ldr	r2, [pc, #92]	; (801348c <HAL_TIM_PWM_Start+0x1ec>)
 8013430:	4293      	cmp	r3, r2
 8013432:	d004      	beq.n	801343e <HAL_TIM_PWM_Start+0x19e>
 8013434:	687b      	ldr	r3, [r7, #4]
 8013436:	681b      	ldr	r3, [r3, #0]
 8013438:	4a1b      	ldr	r2, [pc, #108]	; (80134a8 <HAL_TIM_PWM_Start+0x208>)
 801343a:	4293      	cmp	r3, r2
 801343c:	d115      	bne.n	801346a <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801343e:	687b      	ldr	r3, [r7, #4]
 8013440:	681b      	ldr	r3, [r3, #0]
 8013442:	689a      	ldr	r2, [r3, #8]
 8013444:	4b19      	ldr	r3, [pc, #100]	; (80134ac <HAL_TIM_PWM_Start+0x20c>)
 8013446:	4013      	ands	r3, r2
 8013448:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801344a:	68fb      	ldr	r3, [r7, #12]
 801344c:	2b06      	cmp	r3, #6
 801344e:	d015      	beq.n	801347c <HAL_TIM_PWM_Start+0x1dc>
 8013450:	68fb      	ldr	r3, [r7, #12]
 8013452:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8013456:	d011      	beq.n	801347c <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8013458:	687b      	ldr	r3, [r7, #4]
 801345a:	681b      	ldr	r3, [r3, #0]
 801345c:	681a      	ldr	r2, [r3, #0]
 801345e:	687b      	ldr	r3, [r7, #4]
 8013460:	681b      	ldr	r3, [r3, #0]
 8013462:	f042 0201 	orr.w	r2, r2, #1
 8013466:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8013468:	e008      	b.n	801347c <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801346a:	687b      	ldr	r3, [r7, #4]
 801346c:	681b      	ldr	r3, [r3, #0]
 801346e:	681a      	ldr	r2, [r3, #0]
 8013470:	687b      	ldr	r3, [r7, #4]
 8013472:	681b      	ldr	r3, [r3, #0]
 8013474:	f042 0201 	orr.w	r2, r2, #1
 8013478:	601a      	str	r2, [r3, #0]
 801347a:	e000      	b.n	801347e <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801347c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 801347e:	2300      	movs	r3, #0
}
 8013480:	4618      	mov	r0, r3
 8013482:	3710      	adds	r7, #16
 8013484:	46bd      	mov	sp, r7
 8013486:	bd80      	pop	{r7, pc}
 8013488:	40010000 	.word	0x40010000
 801348c:	40010400 	.word	0x40010400
 8013490:	40014000 	.word	0x40014000
 8013494:	40014400 	.word	0x40014400
 8013498:	40014800 	.word	0x40014800
 801349c:	40000400 	.word	0x40000400
 80134a0:	40000800 	.word	0x40000800
 80134a4:	40000c00 	.word	0x40000c00
 80134a8:	40001800 	.word	0x40001800
 80134ac:	00010007 	.word	0x00010007

080134b0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80134b0:	b580      	push	{r7, lr}
 80134b2:	b082      	sub	sp, #8
 80134b4:	af00      	add	r7, sp, #0
 80134b6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80134b8:	687b      	ldr	r3, [r7, #4]
 80134ba:	681b      	ldr	r3, [r3, #0]
 80134bc:	691b      	ldr	r3, [r3, #16]
 80134be:	f003 0302 	and.w	r3, r3, #2
 80134c2:	2b02      	cmp	r3, #2
 80134c4:	d122      	bne.n	801350c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80134c6:	687b      	ldr	r3, [r7, #4]
 80134c8:	681b      	ldr	r3, [r3, #0]
 80134ca:	68db      	ldr	r3, [r3, #12]
 80134cc:	f003 0302 	and.w	r3, r3, #2
 80134d0:	2b02      	cmp	r3, #2
 80134d2:	d11b      	bne.n	801350c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80134d4:	687b      	ldr	r3, [r7, #4]
 80134d6:	681b      	ldr	r3, [r3, #0]
 80134d8:	f06f 0202 	mvn.w	r2, #2
 80134dc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80134de:	687b      	ldr	r3, [r7, #4]
 80134e0:	2201      	movs	r2, #1
 80134e2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80134e4:	687b      	ldr	r3, [r7, #4]
 80134e6:	681b      	ldr	r3, [r3, #0]
 80134e8:	699b      	ldr	r3, [r3, #24]
 80134ea:	f003 0303 	and.w	r3, r3, #3
 80134ee:	2b00      	cmp	r3, #0
 80134f0:	d003      	beq.n	80134fa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80134f2:	6878      	ldr	r0, [r7, #4]
 80134f4:	f000 fa16 	bl	8013924 <HAL_TIM_IC_CaptureCallback>
 80134f8:	e005      	b.n	8013506 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80134fa:	6878      	ldr	r0, [r7, #4]
 80134fc:	f000 fa08 	bl	8013910 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8013500:	6878      	ldr	r0, [r7, #4]
 8013502:	f000 fa19 	bl	8013938 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8013506:	687b      	ldr	r3, [r7, #4]
 8013508:	2200      	movs	r2, #0
 801350a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 801350c:	687b      	ldr	r3, [r7, #4]
 801350e:	681b      	ldr	r3, [r3, #0]
 8013510:	691b      	ldr	r3, [r3, #16]
 8013512:	f003 0304 	and.w	r3, r3, #4
 8013516:	2b04      	cmp	r3, #4
 8013518:	d122      	bne.n	8013560 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 801351a:	687b      	ldr	r3, [r7, #4]
 801351c:	681b      	ldr	r3, [r3, #0]
 801351e:	68db      	ldr	r3, [r3, #12]
 8013520:	f003 0304 	and.w	r3, r3, #4
 8013524:	2b04      	cmp	r3, #4
 8013526:	d11b      	bne.n	8013560 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8013528:	687b      	ldr	r3, [r7, #4]
 801352a:	681b      	ldr	r3, [r3, #0]
 801352c:	f06f 0204 	mvn.w	r2, #4
 8013530:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8013532:	687b      	ldr	r3, [r7, #4]
 8013534:	2202      	movs	r2, #2
 8013536:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8013538:	687b      	ldr	r3, [r7, #4]
 801353a:	681b      	ldr	r3, [r3, #0]
 801353c:	699b      	ldr	r3, [r3, #24]
 801353e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8013542:	2b00      	cmp	r3, #0
 8013544:	d003      	beq.n	801354e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8013546:	6878      	ldr	r0, [r7, #4]
 8013548:	f000 f9ec 	bl	8013924 <HAL_TIM_IC_CaptureCallback>
 801354c:	e005      	b.n	801355a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801354e:	6878      	ldr	r0, [r7, #4]
 8013550:	f000 f9de 	bl	8013910 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8013554:	6878      	ldr	r0, [r7, #4]
 8013556:	f000 f9ef 	bl	8013938 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801355a:	687b      	ldr	r3, [r7, #4]
 801355c:	2200      	movs	r2, #0
 801355e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8013560:	687b      	ldr	r3, [r7, #4]
 8013562:	681b      	ldr	r3, [r3, #0]
 8013564:	691b      	ldr	r3, [r3, #16]
 8013566:	f003 0308 	and.w	r3, r3, #8
 801356a:	2b08      	cmp	r3, #8
 801356c:	d122      	bne.n	80135b4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 801356e:	687b      	ldr	r3, [r7, #4]
 8013570:	681b      	ldr	r3, [r3, #0]
 8013572:	68db      	ldr	r3, [r3, #12]
 8013574:	f003 0308 	and.w	r3, r3, #8
 8013578:	2b08      	cmp	r3, #8
 801357a:	d11b      	bne.n	80135b4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 801357c:	687b      	ldr	r3, [r7, #4]
 801357e:	681b      	ldr	r3, [r3, #0]
 8013580:	f06f 0208 	mvn.w	r2, #8
 8013584:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8013586:	687b      	ldr	r3, [r7, #4]
 8013588:	2204      	movs	r2, #4
 801358a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 801358c:	687b      	ldr	r3, [r7, #4]
 801358e:	681b      	ldr	r3, [r3, #0]
 8013590:	69db      	ldr	r3, [r3, #28]
 8013592:	f003 0303 	and.w	r3, r3, #3
 8013596:	2b00      	cmp	r3, #0
 8013598:	d003      	beq.n	80135a2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801359a:	6878      	ldr	r0, [r7, #4]
 801359c:	f000 f9c2 	bl	8013924 <HAL_TIM_IC_CaptureCallback>
 80135a0:	e005      	b.n	80135ae <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80135a2:	6878      	ldr	r0, [r7, #4]
 80135a4:	f000 f9b4 	bl	8013910 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80135a8:	6878      	ldr	r0, [r7, #4]
 80135aa:	f000 f9c5 	bl	8013938 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80135ae:	687b      	ldr	r3, [r7, #4]
 80135b0:	2200      	movs	r2, #0
 80135b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80135b4:	687b      	ldr	r3, [r7, #4]
 80135b6:	681b      	ldr	r3, [r3, #0]
 80135b8:	691b      	ldr	r3, [r3, #16]
 80135ba:	f003 0310 	and.w	r3, r3, #16
 80135be:	2b10      	cmp	r3, #16
 80135c0:	d122      	bne.n	8013608 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80135c2:	687b      	ldr	r3, [r7, #4]
 80135c4:	681b      	ldr	r3, [r3, #0]
 80135c6:	68db      	ldr	r3, [r3, #12]
 80135c8:	f003 0310 	and.w	r3, r3, #16
 80135cc:	2b10      	cmp	r3, #16
 80135ce:	d11b      	bne.n	8013608 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80135d0:	687b      	ldr	r3, [r7, #4]
 80135d2:	681b      	ldr	r3, [r3, #0]
 80135d4:	f06f 0210 	mvn.w	r2, #16
 80135d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80135da:	687b      	ldr	r3, [r7, #4]
 80135dc:	2208      	movs	r2, #8
 80135de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80135e0:	687b      	ldr	r3, [r7, #4]
 80135e2:	681b      	ldr	r3, [r3, #0]
 80135e4:	69db      	ldr	r3, [r3, #28]
 80135e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80135ea:	2b00      	cmp	r3, #0
 80135ec:	d003      	beq.n	80135f6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80135ee:	6878      	ldr	r0, [r7, #4]
 80135f0:	f000 f998 	bl	8013924 <HAL_TIM_IC_CaptureCallback>
 80135f4:	e005      	b.n	8013602 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80135f6:	6878      	ldr	r0, [r7, #4]
 80135f8:	f000 f98a 	bl	8013910 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80135fc:	6878      	ldr	r0, [r7, #4]
 80135fe:	f000 f99b 	bl	8013938 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8013602:	687b      	ldr	r3, [r7, #4]
 8013604:	2200      	movs	r2, #0
 8013606:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8013608:	687b      	ldr	r3, [r7, #4]
 801360a:	681b      	ldr	r3, [r3, #0]
 801360c:	691b      	ldr	r3, [r3, #16]
 801360e:	f003 0301 	and.w	r3, r3, #1
 8013612:	2b01      	cmp	r3, #1
 8013614:	d10e      	bne.n	8013634 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8013616:	687b      	ldr	r3, [r7, #4]
 8013618:	681b      	ldr	r3, [r3, #0]
 801361a:	68db      	ldr	r3, [r3, #12]
 801361c:	f003 0301 	and.w	r3, r3, #1
 8013620:	2b01      	cmp	r3, #1
 8013622:	d107      	bne.n	8013634 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8013624:	687b      	ldr	r3, [r7, #4]
 8013626:	681b      	ldr	r3, [r3, #0]
 8013628:	f06f 0201 	mvn.w	r2, #1
 801362c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 801362e:	6878      	ldr	r0, [r7, #4]
 8013630:	f7f0 f81a 	bl	8003668 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8013634:	687b      	ldr	r3, [r7, #4]
 8013636:	681b      	ldr	r3, [r3, #0]
 8013638:	691b      	ldr	r3, [r3, #16]
 801363a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801363e:	2b80      	cmp	r3, #128	; 0x80
 8013640:	d10e      	bne.n	8013660 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8013642:	687b      	ldr	r3, [r7, #4]
 8013644:	681b      	ldr	r3, [r3, #0]
 8013646:	68db      	ldr	r3, [r3, #12]
 8013648:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801364c:	2b80      	cmp	r3, #128	; 0x80
 801364e:	d107      	bne.n	8013660 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8013650:	687b      	ldr	r3, [r7, #4]
 8013652:	681b      	ldr	r3, [r3, #0]
 8013654:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8013658:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 801365a:	6878      	ldr	r0, [r7, #4]
 801365c:	f000 fe1e 	bl	801429c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8013660:	687b      	ldr	r3, [r7, #4]
 8013662:	681b      	ldr	r3, [r3, #0]
 8013664:	691b      	ldr	r3, [r3, #16]
 8013666:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801366a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801366e:	d10e      	bne.n	801368e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8013670:	687b      	ldr	r3, [r7, #4]
 8013672:	681b      	ldr	r3, [r3, #0]
 8013674:	68db      	ldr	r3, [r3, #12]
 8013676:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801367a:	2b80      	cmp	r3, #128	; 0x80
 801367c:	d107      	bne.n	801368e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 801367e:	687b      	ldr	r3, [r7, #4]
 8013680:	681b      	ldr	r3, [r3, #0]
 8013682:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8013686:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8013688:	6878      	ldr	r0, [r7, #4]
 801368a:	f000 fe11 	bl	80142b0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 801368e:	687b      	ldr	r3, [r7, #4]
 8013690:	681b      	ldr	r3, [r3, #0]
 8013692:	691b      	ldr	r3, [r3, #16]
 8013694:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013698:	2b40      	cmp	r3, #64	; 0x40
 801369a:	d10e      	bne.n	80136ba <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 801369c:	687b      	ldr	r3, [r7, #4]
 801369e:	681b      	ldr	r3, [r3, #0]
 80136a0:	68db      	ldr	r3, [r3, #12]
 80136a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80136a6:	2b40      	cmp	r3, #64	; 0x40
 80136a8:	d107      	bne.n	80136ba <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80136aa:	687b      	ldr	r3, [r7, #4]
 80136ac:	681b      	ldr	r3, [r3, #0]
 80136ae:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80136b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80136b4:	6878      	ldr	r0, [r7, #4]
 80136b6:	f000 f949 	bl	801394c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80136ba:	687b      	ldr	r3, [r7, #4]
 80136bc:	681b      	ldr	r3, [r3, #0]
 80136be:	691b      	ldr	r3, [r3, #16]
 80136c0:	f003 0320 	and.w	r3, r3, #32
 80136c4:	2b20      	cmp	r3, #32
 80136c6:	d10e      	bne.n	80136e6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80136c8:	687b      	ldr	r3, [r7, #4]
 80136ca:	681b      	ldr	r3, [r3, #0]
 80136cc:	68db      	ldr	r3, [r3, #12]
 80136ce:	f003 0320 	and.w	r3, r3, #32
 80136d2:	2b20      	cmp	r3, #32
 80136d4:	d107      	bne.n	80136e6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80136d6:	687b      	ldr	r3, [r7, #4]
 80136d8:	681b      	ldr	r3, [r3, #0]
 80136da:	f06f 0220 	mvn.w	r2, #32
 80136de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80136e0:	6878      	ldr	r0, [r7, #4]
 80136e2:	f000 fdd1 	bl	8014288 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80136e6:	bf00      	nop
 80136e8:	3708      	adds	r7, #8
 80136ea:	46bd      	mov	sp, r7
 80136ec:	bd80      	pop	{r7, pc}
	...

080136f0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80136f0:	b580      	push	{r7, lr}
 80136f2:	b084      	sub	sp, #16
 80136f4:	af00      	add	r7, sp, #0
 80136f6:	60f8      	str	r0, [r7, #12]
 80136f8:	60b9      	str	r1, [r7, #8]
 80136fa:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80136fc:	68fb      	ldr	r3, [r7, #12]
 80136fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8013702:	2b01      	cmp	r3, #1
 8013704:	d101      	bne.n	801370a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8013706:	2302      	movs	r3, #2
 8013708:	e0fd      	b.n	8013906 <HAL_TIM_PWM_ConfigChannel+0x216>
 801370a:	68fb      	ldr	r3, [r7, #12]
 801370c:	2201      	movs	r2, #1
 801370e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8013712:	687b      	ldr	r3, [r7, #4]
 8013714:	2b14      	cmp	r3, #20
 8013716:	f200 80f0 	bhi.w	80138fa <HAL_TIM_PWM_ConfigChannel+0x20a>
 801371a:	a201      	add	r2, pc, #4	; (adr r2, 8013720 <HAL_TIM_PWM_ConfigChannel+0x30>)
 801371c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013720:	08013775 	.word	0x08013775
 8013724:	080138fb 	.word	0x080138fb
 8013728:	080138fb 	.word	0x080138fb
 801372c:	080138fb 	.word	0x080138fb
 8013730:	080137b5 	.word	0x080137b5
 8013734:	080138fb 	.word	0x080138fb
 8013738:	080138fb 	.word	0x080138fb
 801373c:	080138fb 	.word	0x080138fb
 8013740:	080137f7 	.word	0x080137f7
 8013744:	080138fb 	.word	0x080138fb
 8013748:	080138fb 	.word	0x080138fb
 801374c:	080138fb 	.word	0x080138fb
 8013750:	08013837 	.word	0x08013837
 8013754:	080138fb 	.word	0x080138fb
 8013758:	080138fb 	.word	0x080138fb
 801375c:	080138fb 	.word	0x080138fb
 8013760:	08013879 	.word	0x08013879
 8013764:	080138fb 	.word	0x080138fb
 8013768:	080138fb 	.word	0x080138fb
 801376c:	080138fb 	.word	0x080138fb
 8013770:	080138b9 	.word	0x080138b9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8013774:	68fb      	ldr	r3, [r7, #12]
 8013776:	681b      	ldr	r3, [r3, #0]
 8013778:	68b9      	ldr	r1, [r7, #8]
 801377a:	4618      	mov	r0, r3
 801377c:	f000 f98a 	bl	8013a94 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8013780:	68fb      	ldr	r3, [r7, #12]
 8013782:	681b      	ldr	r3, [r3, #0]
 8013784:	699a      	ldr	r2, [r3, #24]
 8013786:	68fb      	ldr	r3, [r7, #12]
 8013788:	681b      	ldr	r3, [r3, #0]
 801378a:	f042 0208 	orr.w	r2, r2, #8
 801378e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8013790:	68fb      	ldr	r3, [r7, #12]
 8013792:	681b      	ldr	r3, [r3, #0]
 8013794:	699a      	ldr	r2, [r3, #24]
 8013796:	68fb      	ldr	r3, [r7, #12]
 8013798:	681b      	ldr	r3, [r3, #0]
 801379a:	f022 0204 	bic.w	r2, r2, #4
 801379e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80137a0:	68fb      	ldr	r3, [r7, #12]
 80137a2:	681b      	ldr	r3, [r3, #0]
 80137a4:	6999      	ldr	r1, [r3, #24]
 80137a6:	68bb      	ldr	r3, [r7, #8]
 80137a8:	691a      	ldr	r2, [r3, #16]
 80137aa:	68fb      	ldr	r3, [r7, #12]
 80137ac:	681b      	ldr	r3, [r3, #0]
 80137ae:	430a      	orrs	r2, r1
 80137b0:	619a      	str	r2, [r3, #24]
      break;
 80137b2:	e0a3      	b.n	80138fc <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80137b4:	68fb      	ldr	r3, [r7, #12]
 80137b6:	681b      	ldr	r3, [r3, #0]
 80137b8:	68b9      	ldr	r1, [r7, #8]
 80137ba:	4618      	mov	r0, r3
 80137bc:	f000 f9fa 	bl	8013bb4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80137c0:	68fb      	ldr	r3, [r7, #12]
 80137c2:	681b      	ldr	r3, [r3, #0]
 80137c4:	699a      	ldr	r2, [r3, #24]
 80137c6:	68fb      	ldr	r3, [r7, #12]
 80137c8:	681b      	ldr	r3, [r3, #0]
 80137ca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80137ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80137d0:	68fb      	ldr	r3, [r7, #12]
 80137d2:	681b      	ldr	r3, [r3, #0]
 80137d4:	699a      	ldr	r2, [r3, #24]
 80137d6:	68fb      	ldr	r3, [r7, #12]
 80137d8:	681b      	ldr	r3, [r3, #0]
 80137da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80137de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80137e0:	68fb      	ldr	r3, [r7, #12]
 80137e2:	681b      	ldr	r3, [r3, #0]
 80137e4:	6999      	ldr	r1, [r3, #24]
 80137e6:	68bb      	ldr	r3, [r7, #8]
 80137e8:	691b      	ldr	r3, [r3, #16]
 80137ea:	021a      	lsls	r2, r3, #8
 80137ec:	68fb      	ldr	r3, [r7, #12]
 80137ee:	681b      	ldr	r3, [r3, #0]
 80137f0:	430a      	orrs	r2, r1
 80137f2:	619a      	str	r2, [r3, #24]
      break;
 80137f4:	e082      	b.n	80138fc <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80137f6:	68fb      	ldr	r3, [r7, #12]
 80137f8:	681b      	ldr	r3, [r3, #0]
 80137fa:	68b9      	ldr	r1, [r7, #8]
 80137fc:	4618      	mov	r0, r3
 80137fe:	f000 fa63 	bl	8013cc8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8013802:	68fb      	ldr	r3, [r7, #12]
 8013804:	681b      	ldr	r3, [r3, #0]
 8013806:	69da      	ldr	r2, [r3, #28]
 8013808:	68fb      	ldr	r3, [r7, #12]
 801380a:	681b      	ldr	r3, [r3, #0]
 801380c:	f042 0208 	orr.w	r2, r2, #8
 8013810:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8013812:	68fb      	ldr	r3, [r7, #12]
 8013814:	681b      	ldr	r3, [r3, #0]
 8013816:	69da      	ldr	r2, [r3, #28]
 8013818:	68fb      	ldr	r3, [r7, #12]
 801381a:	681b      	ldr	r3, [r3, #0]
 801381c:	f022 0204 	bic.w	r2, r2, #4
 8013820:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8013822:	68fb      	ldr	r3, [r7, #12]
 8013824:	681b      	ldr	r3, [r3, #0]
 8013826:	69d9      	ldr	r1, [r3, #28]
 8013828:	68bb      	ldr	r3, [r7, #8]
 801382a:	691a      	ldr	r2, [r3, #16]
 801382c:	68fb      	ldr	r3, [r7, #12]
 801382e:	681b      	ldr	r3, [r3, #0]
 8013830:	430a      	orrs	r2, r1
 8013832:	61da      	str	r2, [r3, #28]
      break;
 8013834:	e062      	b.n	80138fc <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8013836:	68fb      	ldr	r3, [r7, #12]
 8013838:	681b      	ldr	r3, [r3, #0]
 801383a:	68b9      	ldr	r1, [r7, #8]
 801383c:	4618      	mov	r0, r3
 801383e:	f000 fac9 	bl	8013dd4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8013842:	68fb      	ldr	r3, [r7, #12]
 8013844:	681b      	ldr	r3, [r3, #0]
 8013846:	69da      	ldr	r2, [r3, #28]
 8013848:	68fb      	ldr	r3, [r7, #12]
 801384a:	681b      	ldr	r3, [r3, #0]
 801384c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8013850:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8013852:	68fb      	ldr	r3, [r7, #12]
 8013854:	681b      	ldr	r3, [r3, #0]
 8013856:	69da      	ldr	r2, [r3, #28]
 8013858:	68fb      	ldr	r3, [r7, #12]
 801385a:	681b      	ldr	r3, [r3, #0]
 801385c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8013860:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8013862:	68fb      	ldr	r3, [r7, #12]
 8013864:	681b      	ldr	r3, [r3, #0]
 8013866:	69d9      	ldr	r1, [r3, #28]
 8013868:	68bb      	ldr	r3, [r7, #8]
 801386a:	691b      	ldr	r3, [r3, #16]
 801386c:	021a      	lsls	r2, r3, #8
 801386e:	68fb      	ldr	r3, [r7, #12]
 8013870:	681b      	ldr	r3, [r3, #0]
 8013872:	430a      	orrs	r2, r1
 8013874:	61da      	str	r2, [r3, #28]
      break;
 8013876:	e041      	b.n	80138fc <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8013878:	68fb      	ldr	r3, [r7, #12]
 801387a:	681b      	ldr	r3, [r3, #0]
 801387c:	68b9      	ldr	r1, [r7, #8]
 801387e:	4618      	mov	r0, r3
 8013880:	f000 fb10 	bl	8013ea4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8013884:	68fb      	ldr	r3, [r7, #12]
 8013886:	681b      	ldr	r3, [r3, #0]
 8013888:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801388a:	68fb      	ldr	r3, [r7, #12]
 801388c:	681b      	ldr	r3, [r3, #0]
 801388e:	f042 0208 	orr.w	r2, r2, #8
 8013892:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8013894:	68fb      	ldr	r3, [r7, #12]
 8013896:	681b      	ldr	r3, [r3, #0]
 8013898:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801389a:	68fb      	ldr	r3, [r7, #12]
 801389c:	681b      	ldr	r3, [r3, #0]
 801389e:	f022 0204 	bic.w	r2, r2, #4
 80138a2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80138a4:	68fb      	ldr	r3, [r7, #12]
 80138a6:	681b      	ldr	r3, [r3, #0]
 80138a8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80138aa:	68bb      	ldr	r3, [r7, #8]
 80138ac:	691a      	ldr	r2, [r3, #16]
 80138ae:	68fb      	ldr	r3, [r7, #12]
 80138b0:	681b      	ldr	r3, [r3, #0]
 80138b2:	430a      	orrs	r2, r1
 80138b4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80138b6:	e021      	b.n	80138fc <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80138b8:	68fb      	ldr	r3, [r7, #12]
 80138ba:	681b      	ldr	r3, [r3, #0]
 80138bc:	68b9      	ldr	r1, [r7, #8]
 80138be:	4618      	mov	r0, r3
 80138c0:	f000 fb52 	bl	8013f68 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80138c4:	68fb      	ldr	r3, [r7, #12]
 80138c6:	681b      	ldr	r3, [r3, #0]
 80138c8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80138ca:	68fb      	ldr	r3, [r7, #12]
 80138cc:	681b      	ldr	r3, [r3, #0]
 80138ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80138d2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80138d4:	68fb      	ldr	r3, [r7, #12]
 80138d6:	681b      	ldr	r3, [r3, #0]
 80138d8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80138da:	68fb      	ldr	r3, [r7, #12]
 80138dc:	681b      	ldr	r3, [r3, #0]
 80138de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80138e2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80138e4:	68fb      	ldr	r3, [r7, #12]
 80138e6:	681b      	ldr	r3, [r3, #0]
 80138e8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80138ea:	68bb      	ldr	r3, [r7, #8]
 80138ec:	691b      	ldr	r3, [r3, #16]
 80138ee:	021a      	lsls	r2, r3, #8
 80138f0:	68fb      	ldr	r3, [r7, #12]
 80138f2:	681b      	ldr	r3, [r3, #0]
 80138f4:	430a      	orrs	r2, r1
 80138f6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80138f8:	e000      	b.n	80138fc <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 80138fa:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80138fc:	68fb      	ldr	r3, [r7, #12]
 80138fe:	2200      	movs	r2, #0
 8013900:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8013904:	2300      	movs	r3, #0
}
 8013906:	4618      	mov	r0, r3
 8013908:	3710      	adds	r7, #16
 801390a:	46bd      	mov	sp, r7
 801390c:	bd80      	pop	{r7, pc}
 801390e:	bf00      	nop

08013910 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8013910:	b480      	push	{r7}
 8013912:	b083      	sub	sp, #12
 8013914:	af00      	add	r7, sp, #0
 8013916:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8013918:	bf00      	nop
 801391a:	370c      	adds	r7, #12
 801391c:	46bd      	mov	sp, r7
 801391e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013922:	4770      	bx	lr

08013924 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8013924:	b480      	push	{r7}
 8013926:	b083      	sub	sp, #12
 8013928:	af00      	add	r7, sp, #0
 801392a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 801392c:	bf00      	nop
 801392e:	370c      	adds	r7, #12
 8013930:	46bd      	mov	sp, r7
 8013932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013936:	4770      	bx	lr

08013938 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8013938:	b480      	push	{r7}
 801393a:	b083      	sub	sp, #12
 801393c:	af00      	add	r7, sp, #0
 801393e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8013940:	bf00      	nop
 8013942:	370c      	adds	r7, #12
 8013944:	46bd      	mov	sp, r7
 8013946:	f85d 7b04 	ldr.w	r7, [sp], #4
 801394a:	4770      	bx	lr

0801394c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 801394c:	b480      	push	{r7}
 801394e:	b083      	sub	sp, #12
 8013950:	af00      	add	r7, sp, #0
 8013952:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8013954:	bf00      	nop
 8013956:	370c      	adds	r7, #12
 8013958:	46bd      	mov	sp, r7
 801395a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801395e:	4770      	bx	lr

08013960 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8013960:	b480      	push	{r7}
 8013962:	b085      	sub	sp, #20
 8013964:	af00      	add	r7, sp, #0
 8013966:	6078      	str	r0, [r7, #4]
 8013968:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 801396a:	687b      	ldr	r3, [r7, #4]
 801396c:	681b      	ldr	r3, [r3, #0]
 801396e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8013970:	687b      	ldr	r3, [r7, #4]
 8013972:	4a40      	ldr	r2, [pc, #256]	; (8013a74 <TIM_Base_SetConfig+0x114>)
 8013974:	4293      	cmp	r3, r2
 8013976:	d013      	beq.n	80139a0 <TIM_Base_SetConfig+0x40>
 8013978:	687b      	ldr	r3, [r7, #4]
 801397a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801397e:	d00f      	beq.n	80139a0 <TIM_Base_SetConfig+0x40>
 8013980:	687b      	ldr	r3, [r7, #4]
 8013982:	4a3d      	ldr	r2, [pc, #244]	; (8013a78 <TIM_Base_SetConfig+0x118>)
 8013984:	4293      	cmp	r3, r2
 8013986:	d00b      	beq.n	80139a0 <TIM_Base_SetConfig+0x40>
 8013988:	687b      	ldr	r3, [r7, #4]
 801398a:	4a3c      	ldr	r2, [pc, #240]	; (8013a7c <TIM_Base_SetConfig+0x11c>)
 801398c:	4293      	cmp	r3, r2
 801398e:	d007      	beq.n	80139a0 <TIM_Base_SetConfig+0x40>
 8013990:	687b      	ldr	r3, [r7, #4]
 8013992:	4a3b      	ldr	r2, [pc, #236]	; (8013a80 <TIM_Base_SetConfig+0x120>)
 8013994:	4293      	cmp	r3, r2
 8013996:	d003      	beq.n	80139a0 <TIM_Base_SetConfig+0x40>
 8013998:	687b      	ldr	r3, [r7, #4]
 801399a:	4a3a      	ldr	r2, [pc, #232]	; (8013a84 <TIM_Base_SetConfig+0x124>)
 801399c:	4293      	cmp	r3, r2
 801399e:	d108      	bne.n	80139b2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80139a0:	68fb      	ldr	r3, [r7, #12]
 80139a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80139a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80139a8:	683b      	ldr	r3, [r7, #0]
 80139aa:	685b      	ldr	r3, [r3, #4]
 80139ac:	68fa      	ldr	r2, [r7, #12]
 80139ae:	4313      	orrs	r3, r2
 80139b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80139b2:	687b      	ldr	r3, [r7, #4]
 80139b4:	4a2f      	ldr	r2, [pc, #188]	; (8013a74 <TIM_Base_SetConfig+0x114>)
 80139b6:	4293      	cmp	r3, r2
 80139b8:	d01f      	beq.n	80139fa <TIM_Base_SetConfig+0x9a>
 80139ba:	687b      	ldr	r3, [r7, #4]
 80139bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80139c0:	d01b      	beq.n	80139fa <TIM_Base_SetConfig+0x9a>
 80139c2:	687b      	ldr	r3, [r7, #4]
 80139c4:	4a2c      	ldr	r2, [pc, #176]	; (8013a78 <TIM_Base_SetConfig+0x118>)
 80139c6:	4293      	cmp	r3, r2
 80139c8:	d017      	beq.n	80139fa <TIM_Base_SetConfig+0x9a>
 80139ca:	687b      	ldr	r3, [r7, #4]
 80139cc:	4a2b      	ldr	r2, [pc, #172]	; (8013a7c <TIM_Base_SetConfig+0x11c>)
 80139ce:	4293      	cmp	r3, r2
 80139d0:	d013      	beq.n	80139fa <TIM_Base_SetConfig+0x9a>
 80139d2:	687b      	ldr	r3, [r7, #4]
 80139d4:	4a2a      	ldr	r2, [pc, #168]	; (8013a80 <TIM_Base_SetConfig+0x120>)
 80139d6:	4293      	cmp	r3, r2
 80139d8:	d00f      	beq.n	80139fa <TIM_Base_SetConfig+0x9a>
 80139da:	687b      	ldr	r3, [r7, #4]
 80139dc:	4a29      	ldr	r2, [pc, #164]	; (8013a84 <TIM_Base_SetConfig+0x124>)
 80139de:	4293      	cmp	r3, r2
 80139e0:	d00b      	beq.n	80139fa <TIM_Base_SetConfig+0x9a>
 80139e2:	687b      	ldr	r3, [r7, #4]
 80139e4:	4a28      	ldr	r2, [pc, #160]	; (8013a88 <TIM_Base_SetConfig+0x128>)
 80139e6:	4293      	cmp	r3, r2
 80139e8:	d007      	beq.n	80139fa <TIM_Base_SetConfig+0x9a>
 80139ea:	687b      	ldr	r3, [r7, #4]
 80139ec:	4a27      	ldr	r2, [pc, #156]	; (8013a8c <TIM_Base_SetConfig+0x12c>)
 80139ee:	4293      	cmp	r3, r2
 80139f0:	d003      	beq.n	80139fa <TIM_Base_SetConfig+0x9a>
 80139f2:	687b      	ldr	r3, [r7, #4]
 80139f4:	4a26      	ldr	r2, [pc, #152]	; (8013a90 <TIM_Base_SetConfig+0x130>)
 80139f6:	4293      	cmp	r3, r2
 80139f8:	d108      	bne.n	8013a0c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80139fa:	68fb      	ldr	r3, [r7, #12]
 80139fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8013a00:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8013a02:	683b      	ldr	r3, [r7, #0]
 8013a04:	68db      	ldr	r3, [r3, #12]
 8013a06:	68fa      	ldr	r2, [r7, #12]
 8013a08:	4313      	orrs	r3, r2
 8013a0a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8013a0c:	68fb      	ldr	r3, [r7, #12]
 8013a0e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8013a12:	683b      	ldr	r3, [r7, #0]
 8013a14:	695b      	ldr	r3, [r3, #20]
 8013a16:	4313      	orrs	r3, r2
 8013a18:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8013a1a:	687b      	ldr	r3, [r7, #4]
 8013a1c:	68fa      	ldr	r2, [r7, #12]
 8013a1e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8013a20:	683b      	ldr	r3, [r7, #0]
 8013a22:	689a      	ldr	r2, [r3, #8]
 8013a24:	687b      	ldr	r3, [r7, #4]
 8013a26:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8013a28:	683b      	ldr	r3, [r7, #0]
 8013a2a:	681a      	ldr	r2, [r3, #0]
 8013a2c:	687b      	ldr	r3, [r7, #4]
 8013a2e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8013a30:	687b      	ldr	r3, [r7, #4]
 8013a32:	4a10      	ldr	r2, [pc, #64]	; (8013a74 <TIM_Base_SetConfig+0x114>)
 8013a34:	4293      	cmp	r3, r2
 8013a36:	d00f      	beq.n	8013a58 <TIM_Base_SetConfig+0xf8>
 8013a38:	687b      	ldr	r3, [r7, #4]
 8013a3a:	4a12      	ldr	r2, [pc, #72]	; (8013a84 <TIM_Base_SetConfig+0x124>)
 8013a3c:	4293      	cmp	r3, r2
 8013a3e:	d00b      	beq.n	8013a58 <TIM_Base_SetConfig+0xf8>
 8013a40:	687b      	ldr	r3, [r7, #4]
 8013a42:	4a11      	ldr	r2, [pc, #68]	; (8013a88 <TIM_Base_SetConfig+0x128>)
 8013a44:	4293      	cmp	r3, r2
 8013a46:	d007      	beq.n	8013a58 <TIM_Base_SetConfig+0xf8>
 8013a48:	687b      	ldr	r3, [r7, #4]
 8013a4a:	4a10      	ldr	r2, [pc, #64]	; (8013a8c <TIM_Base_SetConfig+0x12c>)
 8013a4c:	4293      	cmp	r3, r2
 8013a4e:	d003      	beq.n	8013a58 <TIM_Base_SetConfig+0xf8>
 8013a50:	687b      	ldr	r3, [r7, #4]
 8013a52:	4a0f      	ldr	r2, [pc, #60]	; (8013a90 <TIM_Base_SetConfig+0x130>)
 8013a54:	4293      	cmp	r3, r2
 8013a56:	d103      	bne.n	8013a60 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8013a58:	683b      	ldr	r3, [r7, #0]
 8013a5a:	691a      	ldr	r2, [r3, #16]
 8013a5c:	687b      	ldr	r3, [r7, #4]
 8013a5e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8013a60:	687b      	ldr	r3, [r7, #4]
 8013a62:	2201      	movs	r2, #1
 8013a64:	615a      	str	r2, [r3, #20]
}
 8013a66:	bf00      	nop
 8013a68:	3714      	adds	r7, #20
 8013a6a:	46bd      	mov	sp, r7
 8013a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a70:	4770      	bx	lr
 8013a72:	bf00      	nop
 8013a74:	40010000 	.word	0x40010000
 8013a78:	40000400 	.word	0x40000400
 8013a7c:	40000800 	.word	0x40000800
 8013a80:	40000c00 	.word	0x40000c00
 8013a84:	40010400 	.word	0x40010400
 8013a88:	40014000 	.word	0x40014000
 8013a8c:	40014400 	.word	0x40014400
 8013a90:	40014800 	.word	0x40014800

08013a94 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8013a94:	b480      	push	{r7}
 8013a96:	b087      	sub	sp, #28
 8013a98:	af00      	add	r7, sp, #0
 8013a9a:	6078      	str	r0, [r7, #4]
 8013a9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8013a9e:	687b      	ldr	r3, [r7, #4]
 8013aa0:	6a1b      	ldr	r3, [r3, #32]
 8013aa2:	f023 0201 	bic.w	r2, r3, #1
 8013aa6:	687b      	ldr	r3, [r7, #4]
 8013aa8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8013aaa:	687b      	ldr	r3, [r7, #4]
 8013aac:	6a1b      	ldr	r3, [r3, #32]
 8013aae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8013ab0:	687b      	ldr	r3, [r7, #4]
 8013ab2:	685b      	ldr	r3, [r3, #4]
 8013ab4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8013ab6:	687b      	ldr	r3, [r7, #4]
 8013ab8:	699b      	ldr	r3, [r3, #24]
 8013aba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8013abc:	68fa      	ldr	r2, [r7, #12]
 8013abe:	4b37      	ldr	r3, [pc, #220]	; (8013b9c <TIM_OC1_SetConfig+0x108>)
 8013ac0:	4013      	ands	r3, r2
 8013ac2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8013ac4:	68fb      	ldr	r3, [r7, #12]
 8013ac6:	f023 0303 	bic.w	r3, r3, #3
 8013aca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8013acc:	683b      	ldr	r3, [r7, #0]
 8013ace:	681b      	ldr	r3, [r3, #0]
 8013ad0:	68fa      	ldr	r2, [r7, #12]
 8013ad2:	4313      	orrs	r3, r2
 8013ad4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8013ad6:	697b      	ldr	r3, [r7, #20]
 8013ad8:	f023 0302 	bic.w	r3, r3, #2
 8013adc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8013ade:	683b      	ldr	r3, [r7, #0]
 8013ae0:	689b      	ldr	r3, [r3, #8]
 8013ae2:	697a      	ldr	r2, [r7, #20]
 8013ae4:	4313      	orrs	r3, r2
 8013ae6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8013ae8:	687b      	ldr	r3, [r7, #4]
 8013aea:	4a2d      	ldr	r2, [pc, #180]	; (8013ba0 <TIM_OC1_SetConfig+0x10c>)
 8013aec:	4293      	cmp	r3, r2
 8013aee:	d00f      	beq.n	8013b10 <TIM_OC1_SetConfig+0x7c>
 8013af0:	687b      	ldr	r3, [r7, #4]
 8013af2:	4a2c      	ldr	r2, [pc, #176]	; (8013ba4 <TIM_OC1_SetConfig+0x110>)
 8013af4:	4293      	cmp	r3, r2
 8013af6:	d00b      	beq.n	8013b10 <TIM_OC1_SetConfig+0x7c>
 8013af8:	687b      	ldr	r3, [r7, #4]
 8013afa:	4a2b      	ldr	r2, [pc, #172]	; (8013ba8 <TIM_OC1_SetConfig+0x114>)
 8013afc:	4293      	cmp	r3, r2
 8013afe:	d007      	beq.n	8013b10 <TIM_OC1_SetConfig+0x7c>
 8013b00:	687b      	ldr	r3, [r7, #4]
 8013b02:	4a2a      	ldr	r2, [pc, #168]	; (8013bac <TIM_OC1_SetConfig+0x118>)
 8013b04:	4293      	cmp	r3, r2
 8013b06:	d003      	beq.n	8013b10 <TIM_OC1_SetConfig+0x7c>
 8013b08:	687b      	ldr	r3, [r7, #4]
 8013b0a:	4a29      	ldr	r2, [pc, #164]	; (8013bb0 <TIM_OC1_SetConfig+0x11c>)
 8013b0c:	4293      	cmp	r3, r2
 8013b0e:	d10c      	bne.n	8013b2a <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8013b10:	697b      	ldr	r3, [r7, #20]
 8013b12:	f023 0308 	bic.w	r3, r3, #8
 8013b16:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8013b18:	683b      	ldr	r3, [r7, #0]
 8013b1a:	68db      	ldr	r3, [r3, #12]
 8013b1c:	697a      	ldr	r2, [r7, #20]
 8013b1e:	4313      	orrs	r3, r2
 8013b20:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8013b22:	697b      	ldr	r3, [r7, #20]
 8013b24:	f023 0304 	bic.w	r3, r3, #4
 8013b28:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8013b2a:	687b      	ldr	r3, [r7, #4]
 8013b2c:	4a1c      	ldr	r2, [pc, #112]	; (8013ba0 <TIM_OC1_SetConfig+0x10c>)
 8013b2e:	4293      	cmp	r3, r2
 8013b30:	d00f      	beq.n	8013b52 <TIM_OC1_SetConfig+0xbe>
 8013b32:	687b      	ldr	r3, [r7, #4]
 8013b34:	4a1b      	ldr	r2, [pc, #108]	; (8013ba4 <TIM_OC1_SetConfig+0x110>)
 8013b36:	4293      	cmp	r3, r2
 8013b38:	d00b      	beq.n	8013b52 <TIM_OC1_SetConfig+0xbe>
 8013b3a:	687b      	ldr	r3, [r7, #4]
 8013b3c:	4a1a      	ldr	r2, [pc, #104]	; (8013ba8 <TIM_OC1_SetConfig+0x114>)
 8013b3e:	4293      	cmp	r3, r2
 8013b40:	d007      	beq.n	8013b52 <TIM_OC1_SetConfig+0xbe>
 8013b42:	687b      	ldr	r3, [r7, #4]
 8013b44:	4a19      	ldr	r2, [pc, #100]	; (8013bac <TIM_OC1_SetConfig+0x118>)
 8013b46:	4293      	cmp	r3, r2
 8013b48:	d003      	beq.n	8013b52 <TIM_OC1_SetConfig+0xbe>
 8013b4a:	687b      	ldr	r3, [r7, #4]
 8013b4c:	4a18      	ldr	r2, [pc, #96]	; (8013bb0 <TIM_OC1_SetConfig+0x11c>)
 8013b4e:	4293      	cmp	r3, r2
 8013b50:	d111      	bne.n	8013b76 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8013b52:	693b      	ldr	r3, [r7, #16]
 8013b54:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8013b58:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8013b5a:	693b      	ldr	r3, [r7, #16]
 8013b5c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8013b60:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8013b62:	683b      	ldr	r3, [r7, #0]
 8013b64:	695b      	ldr	r3, [r3, #20]
 8013b66:	693a      	ldr	r2, [r7, #16]
 8013b68:	4313      	orrs	r3, r2
 8013b6a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8013b6c:	683b      	ldr	r3, [r7, #0]
 8013b6e:	699b      	ldr	r3, [r3, #24]
 8013b70:	693a      	ldr	r2, [r7, #16]
 8013b72:	4313      	orrs	r3, r2
 8013b74:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8013b76:	687b      	ldr	r3, [r7, #4]
 8013b78:	693a      	ldr	r2, [r7, #16]
 8013b7a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8013b7c:	687b      	ldr	r3, [r7, #4]
 8013b7e:	68fa      	ldr	r2, [r7, #12]
 8013b80:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8013b82:	683b      	ldr	r3, [r7, #0]
 8013b84:	685a      	ldr	r2, [r3, #4]
 8013b86:	687b      	ldr	r3, [r7, #4]
 8013b88:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8013b8a:	687b      	ldr	r3, [r7, #4]
 8013b8c:	697a      	ldr	r2, [r7, #20]
 8013b8e:	621a      	str	r2, [r3, #32]
}
 8013b90:	bf00      	nop
 8013b92:	371c      	adds	r7, #28
 8013b94:	46bd      	mov	sp, r7
 8013b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b9a:	4770      	bx	lr
 8013b9c:	fffeff8f 	.word	0xfffeff8f
 8013ba0:	40010000 	.word	0x40010000
 8013ba4:	40010400 	.word	0x40010400
 8013ba8:	40014000 	.word	0x40014000
 8013bac:	40014400 	.word	0x40014400
 8013bb0:	40014800 	.word	0x40014800

08013bb4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8013bb4:	b480      	push	{r7}
 8013bb6:	b087      	sub	sp, #28
 8013bb8:	af00      	add	r7, sp, #0
 8013bba:	6078      	str	r0, [r7, #4]
 8013bbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8013bbe:	687b      	ldr	r3, [r7, #4]
 8013bc0:	6a1b      	ldr	r3, [r3, #32]
 8013bc2:	f023 0210 	bic.w	r2, r3, #16
 8013bc6:	687b      	ldr	r3, [r7, #4]
 8013bc8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8013bca:	687b      	ldr	r3, [r7, #4]
 8013bcc:	6a1b      	ldr	r3, [r3, #32]
 8013bce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8013bd0:	687b      	ldr	r3, [r7, #4]
 8013bd2:	685b      	ldr	r3, [r3, #4]
 8013bd4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8013bd6:	687b      	ldr	r3, [r7, #4]
 8013bd8:	699b      	ldr	r3, [r3, #24]
 8013bda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8013bdc:	68fa      	ldr	r2, [r7, #12]
 8013bde:	4b34      	ldr	r3, [pc, #208]	; (8013cb0 <TIM_OC2_SetConfig+0xfc>)
 8013be0:	4013      	ands	r3, r2
 8013be2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8013be4:	68fb      	ldr	r3, [r7, #12]
 8013be6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8013bea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8013bec:	683b      	ldr	r3, [r7, #0]
 8013bee:	681b      	ldr	r3, [r3, #0]
 8013bf0:	021b      	lsls	r3, r3, #8
 8013bf2:	68fa      	ldr	r2, [r7, #12]
 8013bf4:	4313      	orrs	r3, r2
 8013bf6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8013bf8:	697b      	ldr	r3, [r7, #20]
 8013bfa:	f023 0320 	bic.w	r3, r3, #32
 8013bfe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8013c00:	683b      	ldr	r3, [r7, #0]
 8013c02:	689b      	ldr	r3, [r3, #8]
 8013c04:	011b      	lsls	r3, r3, #4
 8013c06:	697a      	ldr	r2, [r7, #20]
 8013c08:	4313      	orrs	r3, r2
 8013c0a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8013c0c:	687b      	ldr	r3, [r7, #4]
 8013c0e:	4a29      	ldr	r2, [pc, #164]	; (8013cb4 <TIM_OC2_SetConfig+0x100>)
 8013c10:	4293      	cmp	r3, r2
 8013c12:	d003      	beq.n	8013c1c <TIM_OC2_SetConfig+0x68>
 8013c14:	687b      	ldr	r3, [r7, #4]
 8013c16:	4a28      	ldr	r2, [pc, #160]	; (8013cb8 <TIM_OC2_SetConfig+0x104>)
 8013c18:	4293      	cmp	r3, r2
 8013c1a:	d10d      	bne.n	8013c38 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8013c1c:	697b      	ldr	r3, [r7, #20]
 8013c1e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8013c22:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8013c24:	683b      	ldr	r3, [r7, #0]
 8013c26:	68db      	ldr	r3, [r3, #12]
 8013c28:	011b      	lsls	r3, r3, #4
 8013c2a:	697a      	ldr	r2, [r7, #20]
 8013c2c:	4313      	orrs	r3, r2
 8013c2e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8013c30:	697b      	ldr	r3, [r7, #20]
 8013c32:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8013c36:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8013c38:	687b      	ldr	r3, [r7, #4]
 8013c3a:	4a1e      	ldr	r2, [pc, #120]	; (8013cb4 <TIM_OC2_SetConfig+0x100>)
 8013c3c:	4293      	cmp	r3, r2
 8013c3e:	d00f      	beq.n	8013c60 <TIM_OC2_SetConfig+0xac>
 8013c40:	687b      	ldr	r3, [r7, #4]
 8013c42:	4a1d      	ldr	r2, [pc, #116]	; (8013cb8 <TIM_OC2_SetConfig+0x104>)
 8013c44:	4293      	cmp	r3, r2
 8013c46:	d00b      	beq.n	8013c60 <TIM_OC2_SetConfig+0xac>
 8013c48:	687b      	ldr	r3, [r7, #4]
 8013c4a:	4a1c      	ldr	r2, [pc, #112]	; (8013cbc <TIM_OC2_SetConfig+0x108>)
 8013c4c:	4293      	cmp	r3, r2
 8013c4e:	d007      	beq.n	8013c60 <TIM_OC2_SetConfig+0xac>
 8013c50:	687b      	ldr	r3, [r7, #4]
 8013c52:	4a1b      	ldr	r2, [pc, #108]	; (8013cc0 <TIM_OC2_SetConfig+0x10c>)
 8013c54:	4293      	cmp	r3, r2
 8013c56:	d003      	beq.n	8013c60 <TIM_OC2_SetConfig+0xac>
 8013c58:	687b      	ldr	r3, [r7, #4]
 8013c5a:	4a1a      	ldr	r2, [pc, #104]	; (8013cc4 <TIM_OC2_SetConfig+0x110>)
 8013c5c:	4293      	cmp	r3, r2
 8013c5e:	d113      	bne.n	8013c88 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8013c60:	693b      	ldr	r3, [r7, #16]
 8013c62:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8013c66:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8013c68:	693b      	ldr	r3, [r7, #16]
 8013c6a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8013c6e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8013c70:	683b      	ldr	r3, [r7, #0]
 8013c72:	695b      	ldr	r3, [r3, #20]
 8013c74:	009b      	lsls	r3, r3, #2
 8013c76:	693a      	ldr	r2, [r7, #16]
 8013c78:	4313      	orrs	r3, r2
 8013c7a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8013c7c:	683b      	ldr	r3, [r7, #0]
 8013c7e:	699b      	ldr	r3, [r3, #24]
 8013c80:	009b      	lsls	r3, r3, #2
 8013c82:	693a      	ldr	r2, [r7, #16]
 8013c84:	4313      	orrs	r3, r2
 8013c86:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8013c88:	687b      	ldr	r3, [r7, #4]
 8013c8a:	693a      	ldr	r2, [r7, #16]
 8013c8c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8013c8e:	687b      	ldr	r3, [r7, #4]
 8013c90:	68fa      	ldr	r2, [r7, #12]
 8013c92:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8013c94:	683b      	ldr	r3, [r7, #0]
 8013c96:	685a      	ldr	r2, [r3, #4]
 8013c98:	687b      	ldr	r3, [r7, #4]
 8013c9a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8013c9c:	687b      	ldr	r3, [r7, #4]
 8013c9e:	697a      	ldr	r2, [r7, #20]
 8013ca0:	621a      	str	r2, [r3, #32]
}
 8013ca2:	bf00      	nop
 8013ca4:	371c      	adds	r7, #28
 8013ca6:	46bd      	mov	sp, r7
 8013ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cac:	4770      	bx	lr
 8013cae:	bf00      	nop
 8013cb0:	feff8fff 	.word	0xfeff8fff
 8013cb4:	40010000 	.word	0x40010000
 8013cb8:	40010400 	.word	0x40010400
 8013cbc:	40014000 	.word	0x40014000
 8013cc0:	40014400 	.word	0x40014400
 8013cc4:	40014800 	.word	0x40014800

08013cc8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8013cc8:	b480      	push	{r7}
 8013cca:	b087      	sub	sp, #28
 8013ccc:	af00      	add	r7, sp, #0
 8013cce:	6078      	str	r0, [r7, #4]
 8013cd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8013cd2:	687b      	ldr	r3, [r7, #4]
 8013cd4:	6a1b      	ldr	r3, [r3, #32]
 8013cd6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8013cda:	687b      	ldr	r3, [r7, #4]
 8013cdc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8013cde:	687b      	ldr	r3, [r7, #4]
 8013ce0:	6a1b      	ldr	r3, [r3, #32]
 8013ce2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8013ce4:	687b      	ldr	r3, [r7, #4]
 8013ce6:	685b      	ldr	r3, [r3, #4]
 8013ce8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8013cea:	687b      	ldr	r3, [r7, #4]
 8013cec:	69db      	ldr	r3, [r3, #28]
 8013cee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8013cf0:	68fb      	ldr	r3, [r7, #12]
 8013cf2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8013cf6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8013cf8:	68fb      	ldr	r3, [r7, #12]
 8013cfa:	f023 0303 	bic.w	r3, r3, #3
 8013cfe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8013d00:	683b      	ldr	r3, [r7, #0]
 8013d02:	681b      	ldr	r3, [r3, #0]
 8013d04:	68fa      	ldr	r2, [r7, #12]
 8013d06:	4313      	orrs	r3, r2
 8013d08:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8013d0a:	697b      	ldr	r3, [r7, #20]
 8013d0c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8013d10:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8013d12:	683b      	ldr	r3, [r7, #0]
 8013d14:	689b      	ldr	r3, [r3, #8]
 8013d16:	021b      	lsls	r3, r3, #8
 8013d18:	697a      	ldr	r2, [r7, #20]
 8013d1a:	4313      	orrs	r3, r2
 8013d1c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8013d1e:	687b      	ldr	r3, [r7, #4]
 8013d20:	4a27      	ldr	r2, [pc, #156]	; (8013dc0 <TIM_OC3_SetConfig+0xf8>)
 8013d22:	4293      	cmp	r3, r2
 8013d24:	d003      	beq.n	8013d2e <TIM_OC3_SetConfig+0x66>
 8013d26:	687b      	ldr	r3, [r7, #4]
 8013d28:	4a26      	ldr	r2, [pc, #152]	; (8013dc4 <TIM_OC3_SetConfig+0xfc>)
 8013d2a:	4293      	cmp	r3, r2
 8013d2c:	d10d      	bne.n	8013d4a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8013d2e:	697b      	ldr	r3, [r7, #20]
 8013d30:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8013d34:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8013d36:	683b      	ldr	r3, [r7, #0]
 8013d38:	68db      	ldr	r3, [r3, #12]
 8013d3a:	021b      	lsls	r3, r3, #8
 8013d3c:	697a      	ldr	r2, [r7, #20]
 8013d3e:	4313      	orrs	r3, r2
 8013d40:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8013d42:	697b      	ldr	r3, [r7, #20]
 8013d44:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8013d48:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8013d4a:	687b      	ldr	r3, [r7, #4]
 8013d4c:	4a1c      	ldr	r2, [pc, #112]	; (8013dc0 <TIM_OC3_SetConfig+0xf8>)
 8013d4e:	4293      	cmp	r3, r2
 8013d50:	d00f      	beq.n	8013d72 <TIM_OC3_SetConfig+0xaa>
 8013d52:	687b      	ldr	r3, [r7, #4]
 8013d54:	4a1b      	ldr	r2, [pc, #108]	; (8013dc4 <TIM_OC3_SetConfig+0xfc>)
 8013d56:	4293      	cmp	r3, r2
 8013d58:	d00b      	beq.n	8013d72 <TIM_OC3_SetConfig+0xaa>
 8013d5a:	687b      	ldr	r3, [r7, #4]
 8013d5c:	4a1a      	ldr	r2, [pc, #104]	; (8013dc8 <TIM_OC3_SetConfig+0x100>)
 8013d5e:	4293      	cmp	r3, r2
 8013d60:	d007      	beq.n	8013d72 <TIM_OC3_SetConfig+0xaa>
 8013d62:	687b      	ldr	r3, [r7, #4]
 8013d64:	4a19      	ldr	r2, [pc, #100]	; (8013dcc <TIM_OC3_SetConfig+0x104>)
 8013d66:	4293      	cmp	r3, r2
 8013d68:	d003      	beq.n	8013d72 <TIM_OC3_SetConfig+0xaa>
 8013d6a:	687b      	ldr	r3, [r7, #4]
 8013d6c:	4a18      	ldr	r2, [pc, #96]	; (8013dd0 <TIM_OC3_SetConfig+0x108>)
 8013d6e:	4293      	cmp	r3, r2
 8013d70:	d113      	bne.n	8013d9a <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8013d72:	693b      	ldr	r3, [r7, #16]
 8013d74:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8013d78:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8013d7a:	693b      	ldr	r3, [r7, #16]
 8013d7c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8013d80:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8013d82:	683b      	ldr	r3, [r7, #0]
 8013d84:	695b      	ldr	r3, [r3, #20]
 8013d86:	011b      	lsls	r3, r3, #4
 8013d88:	693a      	ldr	r2, [r7, #16]
 8013d8a:	4313      	orrs	r3, r2
 8013d8c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8013d8e:	683b      	ldr	r3, [r7, #0]
 8013d90:	699b      	ldr	r3, [r3, #24]
 8013d92:	011b      	lsls	r3, r3, #4
 8013d94:	693a      	ldr	r2, [r7, #16]
 8013d96:	4313      	orrs	r3, r2
 8013d98:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8013d9a:	687b      	ldr	r3, [r7, #4]
 8013d9c:	693a      	ldr	r2, [r7, #16]
 8013d9e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8013da0:	687b      	ldr	r3, [r7, #4]
 8013da2:	68fa      	ldr	r2, [r7, #12]
 8013da4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8013da6:	683b      	ldr	r3, [r7, #0]
 8013da8:	685a      	ldr	r2, [r3, #4]
 8013daa:	687b      	ldr	r3, [r7, #4]
 8013dac:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8013dae:	687b      	ldr	r3, [r7, #4]
 8013db0:	697a      	ldr	r2, [r7, #20]
 8013db2:	621a      	str	r2, [r3, #32]
}
 8013db4:	bf00      	nop
 8013db6:	371c      	adds	r7, #28
 8013db8:	46bd      	mov	sp, r7
 8013dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013dbe:	4770      	bx	lr
 8013dc0:	40010000 	.word	0x40010000
 8013dc4:	40010400 	.word	0x40010400
 8013dc8:	40014000 	.word	0x40014000
 8013dcc:	40014400 	.word	0x40014400
 8013dd0:	40014800 	.word	0x40014800

08013dd4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8013dd4:	b480      	push	{r7}
 8013dd6:	b087      	sub	sp, #28
 8013dd8:	af00      	add	r7, sp, #0
 8013dda:	6078      	str	r0, [r7, #4]
 8013ddc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8013dde:	687b      	ldr	r3, [r7, #4]
 8013de0:	6a1b      	ldr	r3, [r3, #32]
 8013de2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8013de6:	687b      	ldr	r3, [r7, #4]
 8013de8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8013dea:	687b      	ldr	r3, [r7, #4]
 8013dec:	6a1b      	ldr	r3, [r3, #32]
 8013dee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8013df0:	687b      	ldr	r3, [r7, #4]
 8013df2:	685b      	ldr	r3, [r3, #4]
 8013df4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8013df6:	687b      	ldr	r3, [r7, #4]
 8013df8:	69db      	ldr	r3, [r3, #28]
 8013dfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8013dfc:	68fb      	ldr	r3, [r7, #12]
 8013dfe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8013e02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8013e04:	68fb      	ldr	r3, [r7, #12]
 8013e06:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8013e0a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8013e0c:	683b      	ldr	r3, [r7, #0]
 8013e0e:	681b      	ldr	r3, [r3, #0]
 8013e10:	021b      	lsls	r3, r3, #8
 8013e12:	68fa      	ldr	r2, [r7, #12]
 8013e14:	4313      	orrs	r3, r2
 8013e16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8013e18:	693b      	ldr	r3, [r7, #16]
 8013e1a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8013e1e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8013e20:	683b      	ldr	r3, [r7, #0]
 8013e22:	689b      	ldr	r3, [r3, #8]
 8013e24:	031b      	lsls	r3, r3, #12
 8013e26:	693a      	ldr	r2, [r7, #16]
 8013e28:	4313      	orrs	r3, r2
 8013e2a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8013e2c:	687b      	ldr	r3, [r7, #4]
 8013e2e:	4a18      	ldr	r2, [pc, #96]	; (8013e90 <TIM_OC4_SetConfig+0xbc>)
 8013e30:	4293      	cmp	r3, r2
 8013e32:	d00f      	beq.n	8013e54 <TIM_OC4_SetConfig+0x80>
 8013e34:	687b      	ldr	r3, [r7, #4]
 8013e36:	4a17      	ldr	r2, [pc, #92]	; (8013e94 <TIM_OC4_SetConfig+0xc0>)
 8013e38:	4293      	cmp	r3, r2
 8013e3a:	d00b      	beq.n	8013e54 <TIM_OC4_SetConfig+0x80>
 8013e3c:	687b      	ldr	r3, [r7, #4]
 8013e3e:	4a16      	ldr	r2, [pc, #88]	; (8013e98 <TIM_OC4_SetConfig+0xc4>)
 8013e40:	4293      	cmp	r3, r2
 8013e42:	d007      	beq.n	8013e54 <TIM_OC4_SetConfig+0x80>
 8013e44:	687b      	ldr	r3, [r7, #4]
 8013e46:	4a15      	ldr	r2, [pc, #84]	; (8013e9c <TIM_OC4_SetConfig+0xc8>)
 8013e48:	4293      	cmp	r3, r2
 8013e4a:	d003      	beq.n	8013e54 <TIM_OC4_SetConfig+0x80>
 8013e4c:	687b      	ldr	r3, [r7, #4]
 8013e4e:	4a14      	ldr	r2, [pc, #80]	; (8013ea0 <TIM_OC4_SetConfig+0xcc>)
 8013e50:	4293      	cmp	r3, r2
 8013e52:	d109      	bne.n	8013e68 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8013e54:	697b      	ldr	r3, [r7, #20]
 8013e56:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8013e5a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8013e5c:	683b      	ldr	r3, [r7, #0]
 8013e5e:	695b      	ldr	r3, [r3, #20]
 8013e60:	019b      	lsls	r3, r3, #6
 8013e62:	697a      	ldr	r2, [r7, #20]
 8013e64:	4313      	orrs	r3, r2
 8013e66:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8013e68:	687b      	ldr	r3, [r7, #4]
 8013e6a:	697a      	ldr	r2, [r7, #20]
 8013e6c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8013e6e:	687b      	ldr	r3, [r7, #4]
 8013e70:	68fa      	ldr	r2, [r7, #12]
 8013e72:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8013e74:	683b      	ldr	r3, [r7, #0]
 8013e76:	685a      	ldr	r2, [r3, #4]
 8013e78:	687b      	ldr	r3, [r7, #4]
 8013e7a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8013e7c:	687b      	ldr	r3, [r7, #4]
 8013e7e:	693a      	ldr	r2, [r7, #16]
 8013e80:	621a      	str	r2, [r3, #32]
}
 8013e82:	bf00      	nop
 8013e84:	371c      	adds	r7, #28
 8013e86:	46bd      	mov	sp, r7
 8013e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e8c:	4770      	bx	lr
 8013e8e:	bf00      	nop
 8013e90:	40010000 	.word	0x40010000
 8013e94:	40010400 	.word	0x40010400
 8013e98:	40014000 	.word	0x40014000
 8013e9c:	40014400 	.word	0x40014400
 8013ea0:	40014800 	.word	0x40014800

08013ea4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8013ea4:	b480      	push	{r7}
 8013ea6:	b087      	sub	sp, #28
 8013ea8:	af00      	add	r7, sp, #0
 8013eaa:	6078      	str	r0, [r7, #4]
 8013eac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8013eae:	687b      	ldr	r3, [r7, #4]
 8013eb0:	6a1b      	ldr	r3, [r3, #32]
 8013eb2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8013eb6:	687b      	ldr	r3, [r7, #4]
 8013eb8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8013eba:	687b      	ldr	r3, [r7, #4]
 8013ebc:	6a1b      	ldr	r3, [r3, #32]
 8013ebe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8013ec0:	687b      	ldr	r3, [r7, #4]
 8013ec2:	685b      	ldr	r3, [r3, #4]
 8013ec4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8013ec6:	687b      	ldr	r3, [r7, #4]
 8013ec8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013eca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8013ecc:	68fb      	ldr	r3, [r7, #12]
 8013ece:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8013ed2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8013ed4:	683b      	ldr	r3, [r7, #0]
 8013ed6:	681b      	ldr	r3, [r3, #0]
 8013ed8:	68fa      	ldr	r2, [r7, #12]
 8013eda:	4313      	orrs	r3, r2
 8013edc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8013ede:	693b      	ldr	r3, [r7, #16]
 8013ee0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8013ee4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8013ee6:	683b      	ldr	r3, [r7, #0]
 8013ee8:	689b      	ldr	r3, [r3, #8]
 8013eea:	041b      	lsls	r3, r3, #16
 8013eec:	693a      	ldr	r2, [r7, #16]
 8013eee:	4313      	orrs	r3, r2
 8013ef0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8013ef2:	687b      	ldr	r3, [r7, #4]
 8013ef4:	4a17      	ldr	r2, [pc, #92]	; (8013f54 <TIM_OC5_SetConfig+0xb0>)
 8013ef6:	4293      	cmp	r3, r2
 8013ef8:	d00f      	beq.n	8013f1a <TIM_OC5_SetConfig+0x76>
 8013efa:	687b      	ldr	r3, [r7, #4]
 8013efc:	4a16      	ldr	r2, [pc, #88]	; (8013f58 <TIM_OC5_SetConfig+0xb4>)
 8013efe:	4293      	cmp	r3, r2
 8013f00:	d00b      	beq.n	8013f1a <TIM_OC5_SetConfig+0x76>
 8013f02:	687b      	ldr	r3, [r7, #4]
 8013f04:	4a15      	ldr	r2, [pc, #84]	; (8013f5c <TIM_OC5_SetConfig+0xb8>)
 8013f06:	4293      	cmp	r3, r2
 8013f08:	d007      	beq.n	8013f1a <TIM_OC5_SetConfig+0x76>
 8013f0a:	687b      	ldr	r3, [r7, #4]
 8013f0c:	4a14      	ldr	r2, [pc, #80]	; (8013f60 <TIM_OC5_SetConfig+0xbc>)
 8013f0e:	4293      	cmp	r3, r2
 8013f10:	d003      	beq.n	8013f1a <TIM_OC5_SetConfig+0x76>
 8013f12:	687b      	ldr	r3, [r7, #4]
 8013f14:	4a13      	ldr	r2, [pc, #76]	; (8013f64 <TIM_OC5_SetConfig+0xc0>)
 8013f16:	4293      	cmp	r3, r2
 8013f18:	d109      	bne.n	8013f2e <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8013f1a:	697b      	ldr	r3, [r7, #20]
 8013f1c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8013f20:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8013f22:	683b      	ldr	r3, [r7, #0]
 8013f24:	695b      	ldr	r3, [r3, #20]
 8013f26:	021b      	lsls	r3, r3, #8
 8013f28:	697a      	ldr	r2, [r7, #20]
 8013f2a:	4313      	orrs	r3, r2
 8013f2c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8013f2e:	687b      	ldr	r3, [r7, #4]
 8013f30:	697a      	ldr	r2, [r7, #20]
 8013f32:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8013f34:	687b      	ldr	r3, [r7, #4]
 8013f36:	68fa      	ldr	r2, [r7, #12]
 8013f38:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8013f3a:	683b      	ldr	r3, [r7, #0]
 8013f3c:	685a      	ldr	r2, [r3, #4]
 8013f3e:	687b      	ldr	r3, [r7, #4]
 8013f40:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8013f42:	687b      	ldr	r3, [r7, #4]
 8013f44:	693a      	ldr	r2, [r7, #16]
 8013f46:	621a      	str	r2, [r3, #32]
}
 8013f48:	bf00      	nop
 8013f4a:	371c      	adds	r7, #28
 8013f4c:	46bd      	mov	sp, r7
 8013f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f52:	4770      	bx	lr
 8013f54:	40010000 	.word	0x40010000
 8013f58:	40010400 	.word	0x40010400
 8013f5c:	40014000 	.word	0x40014000
 8013f60:	40014400 	.word	0x40014400
 8013f64:	40014800 	.word	0x40014800

08013f68 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8013f68:	b480      	push	{r7}
 8013f6a:	b087      	sub	sp, #28
 8013f6c:	af00      	add	r7, sp, #0
 8013f6e:	6078      	str	r0, [r7, #4]
 8013f70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8013f72:	687b      	ldr	r3, [r7, #4]
 8013f74:	6a1b      	ldr	r3, [r3, #32]
 8013f76:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8013f7a:	687b      	ldr	r3, [r7, #4]
 8013f7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8013f7e:	687b      	ldr	r3, [r7, #4]
 8013f80:	6a1b      	ldr	r3, [r3, #32]
 8013f82:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8013f84:	687b      	ldr	r3, [r7, #4]
 8013f86:	685b      	ldr	r3, [r3, #4]
 8013f88:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8013f8a:	687b      	ldr	r3, [r7, #4]
 8013f8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013f8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8013f90:	68fb      	ldr	r3, [r7, #12]
 8013f92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8013f96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8013f98:	683b      	ldr	r3, [r7, #0]
 8013f9a:	681b      	ldr	r3, [r3, #0]
 8013f9c:	021b      	lsls	r3, r3, #8
 8013f9e:	68fa      	ldr	r2, [r7, #12]
 8013fa0:	4313      	orrs	r3, r2
 8013fa2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8013fa4:	693b      	ldr	r3, [r7, #16]
 8013fa6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8013faa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8013fac:	683b      	ldr	r3, [r7, #0]
 8013fae:	689b      	ldr	r3, [r3, #8]
 8013fb0:	051b      	lsls	r3, r3, #20
 8013fb2:	693a      	ldr	r2, [r7, #16]
 8013fb4:	4313      	orrs	r3, r2
 8013fb6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8013fb8:	687b      	ldr	r3, [r7, #4]
 8013fba:	4a18      	ldr	r2, [pc, #96]	; (801401c <TIM_OC6_SetConfig+0xb4>)
 8013fbc:	4293      	cmp	r3, r2
 8013fbe:	d00f      	beq.n	8013fe0 <TIM_OC6_SetConfig+0x78>
 8013fc0:	687b      	ldr	r3, [r7, #4]
 8013fc2:	4a17      	ldr	r2, [pc, #92]	; (8014020 <TIM_OC6_SetConfig+0xb8>)
 8013fc4:	4293      	cmp	r3, r2
 8013fc6:	d00b      	beq.n	8013fe0 <TIM_OC6_SetConfig+0x78>
 8013fc8:	687b      	ldr	r3, [r7, #4]
 8013fca:	4a16      	ldr	r2, [pc, #88]	; (8014024 <TIM_OC6_SetConfig+0xbc>)
 8013fcc:	4293      	cmp	r3, r2
 8013fce:	d007      	beq.n	8013fe0 <TIM_OC6_SetConfig+0x78>
 8013fd0:	687b      	ldr	r3, [r7, #4]
 8013fd2:	4a15      	ldr	r2, [pc, #84]	; (8014028 <TIM_OC6_SetConfig+0xc0>)
 8013fd4:	4293      	cmp	r3, r2
 8013fd6:	d003      	beq.n	8013fe0 <TIM_OC6_SetConfig+0x78>
 8013fd8:	687b      	ldr	r3, [r7, #4]
 8013fda:	4a14      	ldr	r2, [pc, #80]	; (801402c <TIM_OC6_SetConfig+0xc4>)
 8013fdc:	4293      	cmp	r3, r2
 8013fde:	d109      	bne.n	8013ff4 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8013fe0:	697b      	ldr	r3, [r7, #20]
 8013fe2:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8013fe6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8013fe8:	683b      	ldr	r3, [r7, #0]
 8013fea:	695b      	ldr	r3, [r3, #20]
 8013fec:	029b      	lsls	r3, r3, #10
 8013fee:	697a      	ldr	r2, [r7, #20]
 8013ff0:	4313      	orrs	r3, r2
 8013ff2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8013ff4:	687b      	ldr	r3, [r7, #4]
 8013ff6:	697a      	ldr	r2, [r7, #20]
 8013ff8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8013ffa:	687b      	ldr	r3, [r7, #4]
 8013ffc:	68fa      	ldr	r2, [r7, #12]
 8013ffe:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8014000:	683b      	ldr	r3, [r7, #0]
 8014002:	685a      	ldr	r2, [r3, #4]
 8014004:	687b      	ldr	r3, [r7, #4]
 8014006:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8014008:	687b      	ldr	r3, [r7, #4]
 801400a:	693a      	ldr	r2, [r7, #16]
 801400c:	621a      	str	r2, [r3, #32]
}
 801400e:	bf00      	nop
 8014010:	371c      	adds	r7, #28
 8014012:	46bd      	mov	sp, r7
 8014014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014018:	4770      	bx	lr
 801401a:	bf00      	nop
 801401c:	40010000 	.word	0x40010000
 8014020:	40010400 	.word	0x40010400
 8014024:	40014000 	.word	0x40014000
 8014028:	40014400 	.word	0x40014400
 801402c:	40014800 	.word	0x40014800

08014030 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8014030:	b480      	push	{r7}
 8014032:	b087      	sub	sp, #28
 8014034:	af00      	add	r7, sp, #0
 8014036:	60f8      	str	r0, [r7, #12]
 8014038:	60b9      	str	r1, [r7, #8]
 801403a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 801403c:	68bb      	ldr	r3, [r7, #8]
 801403e:	f003 031f 	and.w	r3, r3, #31
 8014042:	2201      	movs	r2, #1
 8014044:	fa02 f303 	lsl.w	r3, r2, r3
 8014048:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 801404a:	68fb      	ldr	r3, [r7, #12]
 801404c:	6a1a      	ldr	r2, [r3, #32]
 801404e:	697b      	ldr	r3, [r7, #20]
 8014050:	43db      	mvns	r3, r3
 8014052:	401a      	ands	r2, r3
 8014054:	68fb      	ldr	r3, [r7, #12]
 8014056:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8014058:	68fb      	ldr	r3, [r7, #12]
 801405a:	6a1a      	ldr	r2, [r3, #32]
 801405c:	68bb      	ldr	r3, [r7, #8]
 801405e:	f003 031f 	and.w	r3, r3, #31
 8014062:	6879      	ldr	r1, [r7, #4]
 8014064:	fa01 f303 	lsl.w	r3, r1, r3
 8014068:	431a      	orrs	r2, r3
 801406a:	68fb      	ldr	r3, [r7, #12]
 801406c:	621a      	str	r2, [r3, #32]
}
 801406e:	bf00      	nop
 8014070:	371c      	adds	r7, #28
 8014072:	46bd      	mov	sp, r7
 8014074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014078:	4770      	bx	lr
	...

0801407c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 801407c:	b480      	push	{r7}
 801407e:	b085      	sub	sp, #20
 8014080:	af00      	add	r7, sp, #0
 8014082:	6078      	str	r0, [r7, #4]
 8014084:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8014086:	687b      	ldr	r3, [r7, #4]
 8014088:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801408c:	2b01      	cmp	r3, #1
 801408e:	d101      	bne.n	8014094 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8014090:	2302      	movs	r3, #2
 8014092:	e068      	b.n	8014166 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8014094:	687b      	ldr	r3, [r7, #4]
 8014096:	2201      	movs	r2, #1
 8014098:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 801409c:	687b      	ldr	r3, [r7, #4]
 801409e:	2202      	movs	r2, #2
 80140a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80140a4:	687b      	ldr	r3, [r7, #4]
 80140a6:	681b      	ldr	r3, [r3, #0]
 80140a8:	685b      	ldr	r3, [r3, #4]
 80140aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80140ac:	687b      	ldr	r3, [r7, #4]
 80140ae:	681b      	ldr	r3, [r3, #0]
 80140b0:	689b      	ldr	r3, [r3, #8]
 80140b2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80140b4:	687b      	ldr	r3, [r7, #4]
 80140b6:	681b      	ldr	r3, [r3, #0]
 80140b8:	4a2e      	ldr	r2, [pc, #184]	; (8014174 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80140ba:	4293      	cmp	r3, r2
 80140bc:	d004      	beq.n	80140c8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80140be:	687b      	ldr	r3, [r7, #4]
 80140c0:	681b      	ldr	r3, [r3, #0]
 80140c2:	4a2d      	ldr	r2, [pc, #180]	; (8014178 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80140c4:	4293      	cmp	r3, r2
 80140c6:	d108      	bne.n	80140da <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80140c8:	68fb      	ldr	r3, [r7, #12]
 80140ca:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80140ce:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80140d0:	683b      	ldr	r3, [r7, #0]
 80140d2:	685b      	ldr	r3, [r3, #4]
 80140d4:	68fa      	ldr	r2, [r7, #12]
 80140d6:	4313      	orrs	r3, r2
 80140d8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80140da:	68fb      	ldr	r3, [r7, #12]
 80140dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80140e0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80140e2:	683b      	ldr	r3, [r7, #0]
 80140e4:	681b      	ldr	r3, [r3, #0]
 80140e6:	68fa      	ldr	r2, [r7, #12]
 80140e8:	4313      	orrs	r3, r2
 80140ea:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80140ec:	687b      	ldr	r3, [r7, #4]
 80140ee:	681b      	ldr	r3, [r3, #0]
 80140f0:	68fa      	ldr	r2, [r7, #12]
 80140f2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80140f4:	687b      	ldr	r3, [r7, #4]
 80140f6:	681b      	ldr	r3, [r3, #0]
 80140f8:	4a1e      	ldr	r2, [pc, #120]	; (8014174 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80140fa:	4293      	cmp	r3, r2
 80140fc:	d01d      	beq.n	801413a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80140fe:	687b      	ldr	r3, [r7, #4]
 8014100:	681b      	ldr	r3, [r3, #0]
 8014102:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8014106:	d018      	beq.n	801413a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8014108:	687b      	ldr	r3, [r7, #4]
 801410a:	681b      	ldr	r3, [r3, #0]
 801410c:	4a1b      	ldr	r2, [pc, #108]	; (801417c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 801410e:	4293      	cmp	r3, r2
 8014110:	d013      	beq.n	801413a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8014112:	687b      	ldr	r3, [r7, #4]
 8014114:	681b      	ldr	r3, [r3, #0]
 8014116:	4a1a      	ldr	r2, [pc, #104]	; (8014180 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8014118:	4293      	cmp	r3, r2
 801411a:	d00e      	beq.n	801413a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 801411c:	687b      	ldr	r3, [r7, #4]
 801411e:	681b      	ldr	r3, [r3, #0]
 8014120:	4a18      	ldr	r2, [pc, #96]	; (8014184 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8014122:	4293      	cmp	r3, r2
 8014124:	d009      	beq.n	801413a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8014126:	687b      	ldr	r3, [r7, #4]
 8014128:	681b      	ldr	r3, [r3, #0]
 801412a:	4a13      	ldr	r2, [pc, #76]	; (8014178 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 801412c:	4293      	cmp	r3, r2
 801412e:	d004      	beq.n	801413a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8014130:	687b      	ldr	r3, [r7, #4]
 8014132:	681b      	ldr	r3, [r3, #0]
 8014134:	4a14      	ldr	r2, [pc, #80]	; (8014188 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8014136:	4293      	cmp	r3, r2
 8014138:	d10c      	bne.n	8014154 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 801413a:	68bb      	ldr	r3, [r7, #8]
 801413c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8014140:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8014142:	683b      	ldr	r3, [r7, #0]
 8014144:	689b      	ldr	r3, [r3, #8]
 8014146:	68ba      	ldr	r2, [r7, #8]
 8014148:	4313      	orrs	r3, r2
 801414a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 801414c:	687b      	ldr	r3, [r7, #4]
 801414e:	681b      	ldr	r3, [r3, #0]
 8014150:	68ba      	ldr	r2, [r7, #8]
 8014152:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8014154:	687b      	ldr	r3, [r7, #4]
 8014156:	2201      	movs	r2, #1
 8014158:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 801415c:	687b      	ldr	r3, [r7, #4]
 801415e:	2200      	movs	r2, #0
 8014160:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8014164:	2300      	movs	r3, #0
}
 8014166:	4618      	mov	r0, r3
 8014168:	3714      	adds	r7, #20
 801416a:	46bd      	mov	sp, r7
 801416c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014170:	4770      	bx	lr
 8014172:	bf00      	nop
 8014174:	40010000 	.word	0x40010000
 8014178:	40010400 	.word	0x40010400
 801417c:	40000400 	.word	0x40000400
 8014180:	40000800 	.word	0x40000800
 8014184:	40000c00 	.word	0x40000c00
 8014188:	40001800 	.word	0x40001800

0801418c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 801418c:	b480      	push	{r7}
 801418e:	b085      	sub	sp, #20
 8014190:	af00      	add	r7, sp, #0
 8014192:	6078      	str	r0, [r7, #4]
 8014194:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8014196:	2300      	movs	r3, #0
 8014198:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 801419a:	687b      	ldr	r3, [r7, #4]
 801419c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80141a0:	2b01      	cmp	r3, #1
 80141a2:	d101      	bne.n	80141a8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80141a4:	2302      	movs	r3, #2
 80141a6:	e065      	b.n	8014274 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 80141a8:	687b      	ldr	r3, [r7, #4]
 80141aa:	2201      	movs	r2, #1
 80141ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80141b0:	68fb      	ldr	r3, [r7, #12]
 80141b2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80141b6:	683b      	ldr	r3, [r7, #0]
 80141b8:	68db      	ldr	r3, [r3, #12]
 80141ba:	4313      	orrs	r3, r2
 80141bc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80141be:	68fb      	ldr	r3, [r7, #12]
 80141c0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80141c4:	683b      	ldr	r3, [r7, #0]
 80141c6:	689b      	ldr	r3, [r3, #8]
 80141c8:	4313      	orrs	r3, r2
 80141ca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80141cc:	68fb      	ldr	r3, [r7, #12]
 80141ce:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80141d2:	683b      	ldr	r3, [r7, #0]
 80141d4:	685b      	ldr	r3, [r3, #4]
 80141d6:	4313      	orrs	r3, r2
 80141d8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80141da:	68fb      	ldr	r3, [r7, #12]
 80141dc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80141e0:	683b      	ldr	r3, [r7, #0]
 80141e2:	681b      	ldr	r3, [r3, #0]
 80141e4:	4313      	orrs	r3, r2
 80141e6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80141e8:	68fb      	ldr	r3, [r7, #12]
 80141ea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80141ee:	683b      	ldr	r3, [r7, #0]
 80141f0:	691b      	ldr	r3, [r3, #16]
 80141f2:	4313      	orrs	r3, r2
 80141f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80141f6:	68fb      	ldr	r3, [r7, #12]
 80141f8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80141fc:	683b      	ldr	r3, [r7, #0]
 80141fe:	695b      	ldr	r3, [r3, #20]
 8014200:	4313      	orrs	r3, r2
 8014202:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8014204:	68fb      	ldr	r3, [r7, #12]
 8014206:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 801420a:	683b      	ldr	r3, [r7, #0]
 801420c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801420e:	4313      	orrs	r3, r2
 8014210:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8014212:	68fb      	ldr	r3, [r7, #12]
 8014214:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8014218:	683b      	ldr	r3, [r7, #0]
 801421a:	699b      	ldr	r3, [r3, #24]
 801421c:	041b      	lsls	r3, r3, #16
 801421e:	4313      	orrs	r3, r2
 8014220:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8014222:	687b      	ldr	r3, [r7, #4]
 8014224:	681b      	ldr	r3, [r3, #0]
 8014226:	4a16      	ldr	r2, [pc, #88]	; (8014280 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8014228:	4293      	cmp	r3, r2
 801422a:	d004      	beq.n	8014236 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 801422c:	687b      	ldr	r3, [r7, #4]
 801422e:	681b      	ldr	r3, [r3, #0]
 8014230:	4a14      	ldr	r2, [pc, #80]	; (8014284 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8014232:	4293      	cmp	r3, r2
 8014234:	d115      	bne.n	8014262 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8014236:	68fb      	ldr	r3, [r7, #12]
 8014238:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 801423c:	683b      	ldr	r3, [r7, #0]
 801423e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014240:	051b      	lsls	r3, r3, #20
 8014242:	4313      	orrs	r3, r2
 8014244:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8014246:	68fb      	ldr	r3, [r7, #12]
 8014248:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 801424c:	683b      	ldr	r3, [r7, #0]
 801424e:	69db      	ldr	r3, [r3, #28]
 8014250:	4313      	orrs	r3, r2
 8014252:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8014254:	68fb      	ldr	r3, [r7, #12]
 8014256:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 801425a:	683b      	ldr	r3, [r7, #0]
 801425c:	6a1b      	ldr	r3, [r3, #32]
 801425e:	4313      	orrs	r3, r2
 8014260:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8014262:	687b      	ldr	r3, [r7, #4]
 8014264:	681b      	ldr	r3, [r3, #0]
 8014266:	68fa      	ldr	r2, [r7, #12]
 8014268:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 801426a:	687b      	ldr	r3, [r7, #4]
 801426c:	2200      	movs	r2, #0
 801426e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8014272:	2300      	movs	r3, #0
}
 8014274:	4618      	mov	r0, r3
 8014276:	3714      	adds	r7, #20
 8014278:	46bd      	mov	sp, r7
 801427a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801427e:	4770      	bx	lr
 8014280:	40010000 	.word	0x40010000
 8014284:	40010400 	.word	0x40010400

08014288 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8014288:	b480      	push	{r7}
 801428a:	b083      	sub	sp, #12
 801428c:	af00      	add	r7, sp, #0
 801428e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8014290:	bf00      	nop
 8014292:	370c      	adds	r7, #12
 8014294:	46bd      	mov	sp, r7
 8014296:	f85d 7b04 	ldr.w	r7, [sp], #4
 801429a:	4770      	bx	lr

0801429c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 801429c:	b480      	push	{r7}
 801429e:	b083      	sub	sp, #12
 80142a0:	af00      	add	r7, sp, #0
 80142a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80142a4:	bf00      	nop
 80142a6:	370c      	adds	r7, #12
 80142a8:	46bd      	mov	sp, r7
 80142aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142ae:	4770      	bx	lr

080142b0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80142b0:	b480      	push	{r7}
 80142b2:	b083      	sub	sp, #12
 80142b4:	af00      	add	r7, sp, #0
 80142b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80142b8:	bf00      	nop
 80142ba:	370c      	adds	r7, #12
 80142bc:	46bd      	mov	sp, r7
 80142be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142c2:	4770      	bx	lr

080142c4 <__NVIC_SetPriority>:
{
 80142c4:	b480      	push	{r7}
 80142c6:	b083      	sub	sp, #12
 80142c8:	af00      	add	r7, sp, #0
 80142ca:	4603      	mov	r3, r0
 80142cc:	6039      	str	r1, [r7, #0]
 80142ce:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80142d0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80142d4:	2b00      	cmp	r3, #0
 80142d6:	db0a      	blt.n	80142ee <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80142d8:	683b      	ldr	r3, [r7, #0]
 80142da:	b2da      	uxtb	r2, r3
 80142dc:	490c      	ldr	r1, [pc, #48]	; (8014310 <__NVIC_SetPriority+0x4c>)
 80142de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80142e2:	0112      	lsls	r2, r2, #4
 80142e4:	b2d2      	uxtb	r2, r2
 80142e6:	440b      	add	r3, r1
 80142e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80142ec:	e00a      	b.n	8014304 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80142ee:	683b      	ldr	r3, [r7, #0]
 80142f0:	b2da      	uxtb	r2, r3
 80142f2:	4908      	ldr	r1, [pc, #32]	; (8014314 <__NVIC_SetPriority+0x50>)
 80142f4:	88fb      	ldrh	r3, [r7, #6]
 80142f6:	f003 030f 	and.w	r3, r3, #15
 80142fa:	3b04      	subs	r3, #4
 80142fc:	0112      	lsls	r2, r2, #4
 80142fe:	b2d2      	uxtb	r2, r2
 8014300:	440b      	add	r3, r1
 8014302:	761a      	strb	r2, [r3, #24]
}
 8014304:	bf00      	nop
 8014306:	370c      	adds	r7, #12
 8014308:	46bd      	mov	sp, r7
 801430a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801430e:	4770      	bx	lr
 8014310:	e000e100 	.word	0xe000e100
 8014314:	e000ed00 	.word	0xe000ed00

08014318 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8014318:	b580      	push	{r7, lr}
 801431a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 801431c:	4b05      	ldr	r3, [pc, #20]	; (8014334 <SysTick_Handler+0x1c>)
 801431e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8014320:	f002 fea6 	bl	8017070 <xTaskGetSchedulerState>
 8014324:	4603      	mov	r3, r0
 8014326:	2b01      	cmp	r3, #1
 8014328:	d001      	beq.n	801432e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 801432a:	f000 ffe5 	bl	80152f8 <xPortSysTickHandler>
  }
}
 801432e:	bf00      	nop
 8014330:	bd80      	pop	{r7, pc}
 8014332:	bf00      	nop
 8014334:	e000e010 	.word	0xe000e010

08014338 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8014338:	b580      	push	{r7, lr}
 801433a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 801433c:	2100      	movs	r1, #0
 801433e:	f06f 0004 	mvn.w	r0, #4
 8014342:	f7ff ffbf 	bl	80142c4 <__NVIC_SetPriority>
#endif
}
 8014346:	bf00      	nop
 8014348:	bd80      	pop	{r7, pc}
	...

0801434c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 801434c:	b480      	push	{r7}
 801434e:	b083      	sub	sp, #12
 8014350:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8014352:	f3ef 8305 	mrs	r3, IPSR
 8014356:	603b      	str	r3, [r7, #0]
  return(result);
 8014358:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 801435a:	2b00      	cmp	r3, #0
 801435c:	d003      	beq.n	8014366 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 801435e:	f06f 0305 	mvn.w	r3, #5
 8014362:	607b      	str	r3, [r7, #4]
 8014364:	e00c      	b.n	8014380 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8014366:	4b0a      	ldr	r3, [pc, #40]	; (8014390 <osKernelInitialize+0x44>)
 8014368:	681b      	ldr	r3, [r3, #0]
 801436a:	2b00      	cmp	r3, #0
 801436c:	d105      	bne.n	801437a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 801436e:	4b08      	ldr	r3, [pc, #32]	; (8014390 <osKernelInitialize+0x44>)
 8014370:	2201      	movs	r2, #1
 8014372:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8014374:	2300      	movs	r3, #0
 8014376:	607b      	str	r3, [r7, #4]
 8014378:	e002      	b.n	8014380 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 801437a:	f04f 33ff 	mov.w	r3, #4294967295
 801437e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8014380:	687b      	ldr	r3, [r7, #4]
}
 8014382:	4618      	mov	r0, r3
 8014384:	370c      	adds	r7, #12
 8014386:	46bd      	mov	sp, r7
 8014388:	f85d 7b04 	ldr.w	r7, [sp], #4
 801438c:	4770      	bx	lr
 801438e:	bf00      	nop
 8014390:	24003ba0 	.word	0x24003ba0

08014394 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8014394:	b580      	push	{r7, lr}
 8014396:	b082      	sub	sp, #8
 8014398:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801439a:	f3ef 8305 	mrs	r3, IPSR
 801439e:	603b      	str	r3, [r7, #0]
  return(result);
 80143a0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80143a2:	2b00      	cmp	r3, #0
 80143a4:	d003      	beq.n	80143ae <osKernelStart+0x1a>
    stat = osErrorISR;
 80143a6:	f06f 0305 	mvn.w	r3, #5
 80143aa:	607b      	str	r3, [r7, #4]
 80143ac:	e010      	b.n	80143d0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80143ae:	4b0b      	ldr	r3, [pc, #44]	; (80143dc <osKernelStart+0x48>)
 80143b0:	681b      	ldr	r3, [r3, #0]
 80143b2:	2b01      	cmp	r3, #1
 80143b4:	d109      	bne.n	80143ca <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80143b6:	f7ff ffbf 	bl	8014338 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80143ba:	4b08      	ldr	r3, [pc, #32]	; (80143dc <osKernelStart+0x48>)
 80143bc:	2202      	movs	r2, #2
 80143be:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80143c0:	f002 fa0e 	bl	80167e0 <vTaskStartScheduler>
      stat = osOK;
 80143c4:	2300      	movs	r3, #0
 80143c6:	607b      	str	r3, [r7, #4]
 80143c8:	e002      	b.n	80143d0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80143ca:	f04f 33ff 	mov.w	r3, #4294967295
 80143ce:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80143d0:	687b      	ldr	r3, [r7, #4]
}
 80143d2:	4618      	mov	r0, r3
 80143d4:	3708      	adds	r7, #8
 80143d6:	46bd      	mov	sp, r7
 80143d8:	bd80      	pop	{r7, pc}
 80143da:	bf00      	nop
 80143dc:	24003ba0 	.word	0x24003ba0

080143e0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80143e0:	b580      	push	{r7, lr}
 80143e2:	b08e      	sub	sp, #56	; 0x38
 80143e4:	af04      	add	r7, sp, #16
 80143e6:	60f8      	str	r0, [r7, #12]
 80143e8:	60b9      	str	r1, [r7, #8]
 80143ea:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80143ec:	2300      	movs	r3, #0
 80143ee:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80143f0:	f3ef 8305 	mrs	r3, IPSR
 80143f4:	617b      	str	r3, [r7, #20]
  return(result);
 80143f6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80143f8:	2b00      	cmp	r3, #0
 80143fa:	d17e      	bne.n	80144fa <osThreadNew+0x11a>
 80143fc:	68fb      	ldr	r3, [r7, #12]
 80143fe:	2b00      	cmp	r3, #0
 8014400:	d07b      	beq.n	80144fa <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8014402:	2380      	movs	r3, #128	; 0x80
 8014404:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8014406:	2318      	movs	r3, #24
 8014408:	61fb      	str	r3, [r7, #28]

    name = NULL;
 801440a:	2300      	movs	r3, #0
 801440c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 801440e:	f04f 33ff 	mov.w	r3, #4294967295
 8014412:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8014414:	687b      	ldr	r3, [r7, #4]
 8014416:	2b00      	cmp	r3, #0
 8014418:	d045      	beq.n	80144a6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 801441a:	687b      	ldr	r3, [r7, #4]
 801441c:	681b      	ldr	r3, [r3, #0]
 801441e:	2b00      	cmp	r3, #0
 8014420:	d002      	beq.n	8014428 <osThreadNew+0x48>
        name = attr->name;
 8014422:	687b      	ldr	r3, [r7, #4]
 8014424:	681b      	ldr	r3, [r3, #0]
 8014426:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8014428:	687b      	ldr	r3, [r7, #4]
 801442a:	699b      	ldr	r3, [r3, #24]
 801442c:	2b00      	cmp	r3, #0
 801442e:	d002      	beq.n	8014436 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8014430:	687b      	ldr	r3, [r7, #4]
 8014432:	699b      	ldr	r3, [r3, #24]
 8014434:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8014436:	69fb      	ldr	r3, [r7, #28]
 8014438:	2b00      	cmp	r3, #0
 801443a:	d008      	beq.n	801444e <osThreadNew+0x6e>
 801443c:	69fb      	ldr	r3, [r7, #28]
 801443e:	2b38      	cmp	r3, #56	; 0x38
 8014440:	d805      	bhi.n	801444e <osThreadNew+0x6e>
 8014442:	687b      	ldr	r3, [r7, #4]
 8014444:	685b      	ldr	r3, [r3, #4]
 8014446:	f003 0301 	and.w	r3, r3, #1
 801444a:	2b00      	cmp	r3, #0
 801444c:	d001      	beq.n	8014452 <osThreadNew+0x72>
        return (NULL);
 801444e:	2300      	movs	r3, #0
 8014450:	e054      	b.n	80144fc <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8014452:	687b      	ldr	r3, [r7, #4]
 8014454:	695b      	ldr	r3, [r3, #20]
 8014456:	2b00      	cmp	r3, #0
 8014458:	d003      	beq.n	8014462 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 801445a:	687b      	ldr	r3, [r7, #4]
 801445c:	695b      	ldr	r3, [r3, #20]
 801445e:	089b      	lsrs	r3, r3, #2
 8014460:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8014462:	687b      	ldr	r3, [r7, #4]
 8014464:	689b      	ldr	r3, [r3, #8]
 8014466:	2b00      	cmp	r3, #0
 8014468:	d00e      	beq.n	8014488 <osThreadNew+0xa8>
 801446a:	687b      	ldr	r3, [r7, #4]
 801446c:	68db      	ldr	r3, [r3, #12]
 801446e:	2b5b      	cmp	r3, #91	; 0x5b
 8014470:	d90a      	bls.n	8014488 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8014472:	687b      	ldr	r3, [r7, #4]
 8014474:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8014476:	2b00      	cmp	r3, #0
 8014478:	d006      	beq.n	8014488 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 801447a:	687b      	ldr	r3, [r7, #4]
 801447c:	695b      	ldr	r3, [r3, #20]
 801447e:	2b00      	cmp	r3, #0
 8014480:	d002      	beq.n	8014488 <osThreadNew+0xa8>
        mem = 1;
 8014482:	2301      	movs	r3, #1
 8014484:	61bb      	str	r3, [r7, #24]
 8014486:	e010      	b.n	80144aa <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8014488:	687b      	ldr	r3, [r7, #4]
 801448a:	689b      	ldr	r3, [r3, #8]
 801448c:	2b00      	cmp	r3, #0
 801448e:	d10c      	bne.n	80144aa <osThreadNew+0xca>
 8014490:	687b      	ldr	r3, [r7, #4]
 8014492:	68db      	ldr	r3, [r3, #12]
 8014494:	2b00      	cmp	r3, #0
 8014496:	d108      	bne.n	80144aa <osThreadNew+0xca>
 8014498:	687b      	ldr	r3, [r7, #4]
 801449a:	691b      	ldr	r3, [r3, #16]
 801449c:	2b00      	cmp	r3, #0
 801449e:	d104      	bne.n	80144aa <osThreadNew+0xca>
          mem = 0;
 80144a0:	2300      	movs	r3, #0
 80144a2:	61bb      	str	r3, [r7, #24]
 80144a4:	e001      	b.n	80144aa <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80144a6:	2300      	movs	r3, #0
 80144a8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80144aa:	69bb      	ldr	r3, [r7, #24]
 80144ac:	2b01      	cmp	r3, #1
 80144ae:	d110      	bne.n	80144d2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80144b0:	687b      	ldr	r3, [r7, #4]
 80144b2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80144b4:	687a      	ldr	r2, [r7, #4]
 80144b6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80144b8:	9202      	str	r2, [sp, #8]
 80144ba:	9301      	str	r3, [sp, #4]
 80144bc:	69fb      	ldr	r3, [r7, #28]
 80144be:	9300      	str	r3, [sp, #0]
 80144c0:	68bb      	ldr	r3, [r7, #8]
 80144c2:	6a3a      	ldr	r2, [r7, #32]
 80144c4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80144c6:	68f8      	ldr	r0, [r7, #12]
 80144c8:	f001 ffb4 	bl	8016434 <xTaskCreateStatic>
 80144cc:	4603      	mov	r3, r0
 80144ce:	613b      	str	r3, [r7, #16]
 80144d0:	e013      	b.n	80144fa <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80144d2:	69bb      	ldr	r3, [r7, #24]
 80144d4:	2b00      	cmp	r3, #0
 80144d6:	d110      	bne.n	80144fa <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80144d8:	6a3b      	ldr	r3, [r7, #32]
 80144da:	b29a      	uxth	r2, r3
 80144dc:	f107 0310 	add.w	r3, r7, #16
 80144e0:	9301      	str	r3, [sp, #4]
 80144e2:	69fb      	ldr	r3, [r7, #28]
 80144e4:	9300      	str	r3, [sp, #0]
 80144e6:	68bb      	ldr	r3, [r7, #8]
 80144e8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80144ea:	68f8      	ldr	r0, [r7, #12]
 80144ec:	f001 ffff 	bl	80164ee <xTaskCreate>
 80144f0:	4603      	mov	r3, r0
 80144f2:	2b01      	cmp	r3, #1
 80144f4:	d001      	beq.n	80144fa <osThreadNew+0x11a>
            hTask = NULL;
 80144f6:	2300      	movs	r3, #0
 80144f8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80144fa:	693b      	ldr	r3, [r7, #16]
}
 80144fc:	4618      	mov	r0, r3
 80144fe:	3728      	adds	r7, #40	; 0x28
 8014500:	46bd      	mov	sp, r7
 8014502:	bd80      	pop	{r7, pc}

08014504 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8014504:	b580      	push	{r7, lr}
 8014506:	b084      	sub	sp, #16
 8014508:	af00      	add	r7, sp, #0
 801450a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801450c:	f3ef 8305 	mrs	r3, IPSR
 8014510:	60bb      	str	r3, [r7, #8]
  return(result);
 8014512:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8014514:	2b00      	cmp	r3, #0
 8014516:	d003      	beq.n	8014520 <osDelay+0x1c>
    stat = osErrorISR;
 8014518:	f06f 0305 	mvn.w	r3, #5
 801451c:	60fb      	str	r3, [r7, #12]
 801451e:	e007      	b.n	8014530 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8014520:	2300      	movs	r3, #0
 8014522:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8014524:	687b      	ldr	r3, [r7, #4]
 8014526:	2b00      	cmp	r3, #0
 8014528:	d002      	beq.n	8014530 <osDelay+0x2c>
      vTaskDelay(ticks);
 801452a:	6878      	ldr	r0, [r7, #4]
 801452c:	f002 f924 	bl	8016778 <vTaskDelay>
    }
  }

  return (stat);
 8014530:	68fb      	ldr	r3, [r7, #12]
}
 8014532:	4618      	mov	r0, r3
 8014534:	3710      	adds	r7, #16
 8014536:	46bd      	mov	sp, r7
 8014538:	bd80      	pop	{r7, pc}

0801453a <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 801453a:	b580      	push	{r7, lr}
 801453c:	b08a      	sub	sp, #40	; 0x28
 801453e:	af02      	add	r7, sp, #8
 8014540:	60f8      	str	r0, [r7, #12]
 8014542:	60b9      	str	r1, [r7, #8]
 8014544:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8014546:	2300      	movs	r3, #0
 8014548:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801454a:	f3ef 8305 	mrs	r3, IPSR
 801454e:	613b      	str	r3, [r7, #16]
  return(result);
 8014550:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8014552:	2b00      	cmp	r3, #0
 8014554:	d175      	bne.n	8014642 <osSemaphoreNew+0x108>
 8014556:	68fb      	ldr	r3, [r7, #12]
 8014558:	2b00      	cmp	r3, #0
 801455a:	d072      	beq.n	8014642 <osSemaphoreNew+0x108>
 801455c:	68ba      	ldr	r2, [r7, #8]
 801455e:	68fb      	ldr	r3, [r7, #12]
 8014560:	429a      	cmp	r2, r3
 8014562:	d86e      	bhi.n	8014642 <osSemaphoreNew+0x108>
    mem = -1;
 8014564:	f04f 33ff 	mov.w	r3, #4294967295
 8014568:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 801456a:	687b      	ldr	r3, [r7, #4]
 801456c:	2b00      	cmp	r3, #0
 801456e:	d015      	beq.n	801459c <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8014570:	687b      	ldr	r3, [r7, #4]
 8014572:	689b      	ldr	r3, [r3, #8]
 8014574:	2b00      	cmp	r3, #0
 8014576:	d006      	beq.n	8014586 <osSemaphoreNew+0x4c>
 8014578:	687b      	ldr	r3, [r7, #4]
 801457a:	68db      	ldr	r3, [r3, #12]
 801457c:	2b4f      	cmp	r3, #79	; 0x4f
 801457e:	d902      	bls.n	8014586 <osSemaphoreNew+0x4c>
        mem = 1;
 8014580:	2301      	movs	r3, #1
 8014582:	61bb      	str	r3, [r7, #24]
 8014584:	e00c      	b.n	80145a0 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8014586:	687b      	ldr	r3, [r7, #4]
 8014588:	689b      	ldr	r3, [r3, #8]
 801458a:	2b00      	cmp	r3, #0
 801458c:	d108      	bne.n	80145a0 <osSemaphoreNew+0x66>
 801458e:	687b      	ldr	r3, [r7, #4]
 8014590:	68db      	ldr	r3, [r3, #12]
 8014592:	2b00      	cmp	r3, #0
 8014594:	d104      	bne.n	80145a0 <osSemaphoreNew+0x66>
          mem = 0;
 8014596:	2300      	movs	r3, #0
 8014598:	61bb      	str	r3, [r7, #24]
 801459a:	e001      	b.n	80145a0 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 801459c:	2300      	movs	r3, #0
 801459e:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 80145a0:	69bb      	ldr	r3, [r7, #24]
 80145a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80145a6:	d04c      	beq.n	8014642 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 80145a8:	68fb      	ldr	r3, [r7, #12]
 80145aa:	2b01      	cmp	r3, #1
 80145ac:	d128      	bne.n	8014600 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 80145ae:	69bb      	ldr	r3, [r7, #24]
 80145b0:	2b01      	cmp	r3, #1
 80145b2:	d10a      	bne.n	80145ca <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 80145b4:	687b      	ldr	r3, [r7, #4]
 80145b6:	689b      	ldr	r3, [r3, #8]
 80145b8:	2203      	movs	r2, #3
 80145ba:	9200      	str	r2, [sp, #0]
 80145bc:	2200      	movs	r2, #0
 80145be:	2100      	movs	r1, #0
 80145c0:	2001      	movs	r0, #1
 80145c2:	f000 ff91 	bl	80154e8 <xQueueGenericCreateStatic>
 80145c6:	61f8      	str	r0, [r7, #28]
 80145c8:	e005      	b.n	80145d6 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 80145ca:	2203      	movs	r2, #3
 80145cc:	2100      	movs	r1, #0
 80145ce:	2001      	movs	r0, #1
 80145d0:	f001 f802 	bl	80155d8 <xQueueGenericCreate>
 80145d4:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 80145d6:	69fb      	ldr	r3, [r7, #28]
 80145d8:	2b00      	cmp	r3, #0
 80145da:	d022      	beq.n	8014622 <osSemaphoreNew+0xe8>
 80145dc:	68bb      	ldr	r3, [r7, #8]
 80145de:	2b00      	cmp	r3, #0
 80145e0:	d01f      	beq.n	8014622 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80145e2:	2300      	movs	r3, #0
 80145e4:	2200      	movs	r2, #0
 80145e6:	2100      	movs	r1, #0
 80145e8:	69f8      	ldr	r0, [r7, #28]
 80145ea:	f001 f8bd 	bl	8015768 <xQueueGenericSend>
 80145ee:	4603      	mov	r3, r0
 80145f0:	2b01      	cmp	r3, #1
 80145f2:	d016      	beq.n	8014622 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 80145f4:	69f8      	ldr	r0, [r7, #28]
 80145f6:	f001 fd49 	bl	801608c <vQueueDelete>
            hSemaphore = NULL;
 80145fa:	2300      	movs	r3, #0
 80145fc:	61fb      	str	r3, [r7, #28]
 80145fe:	e010      	b.n	8014622 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8014600:	69bb      	ldr	r3, [r7, #24]
 8014602:	2b01      	cmp	r3, #1
 8014604:	d108      	bne.n	8014618 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8014606:	687b      	ldr	r3, [r7, #4]
 8014608:	689b      	ldr	r3, [r3, #8]
 801460a:	461a      	mov	r2, r3
 801460c:	68b9      	ldr	r1, [r7, #8]
 801460e:	68f8      	ldr	r0, [r7, #12]
 8014610:	f001 f83f 	bl	8015692 <xQueueCreateCountingSemaphoreStatic>
 8014614:	61f8      	str	r0, [r7, #28]
 8014616:	e004      	b.n	8014622 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8014618:	68b9      	ldr	r1, [r7, #8]
 801461a:	68f8      	ldr	r0, [r7, #12]
 801461c:	f001 f870 	bl	8015700 <xQueueCreateCountingSemaphore>
 8014620:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8014622:	69fb      	ldr	r3, [r7, #28]
 8014624:	2b00      	cmp	r3, #0
 8014626:	d00c      	beq.n	8014642 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8014628:	687b      	ldr	r3, [r7, #4]
 801462a:	2b00      	cmp	r3, #0
 801462c:	d003      	beq.n	8014636 <osSemaphoreNew+0xfc>
          name = attr->name;
 801462e:	687b      	ldr	r3, [r7, #4]
 8014630:	681b      	ldr	r3, [r3, #0]
 8014632:	617b      	str	r3, [r7, #20]
 8014634:	e001      	b.n	801463a <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8014636:	2300      	movs	r3, #0
 8014638:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 801463a:	6979      	ldr	r1, [r7, #20]
 801463c:	69f8      	ldr	r0, [r7, #28]
 801463e:	f001 fe71 	bl	8016324 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8014642:	69fb      	ldr	r3, [r7, #28]
}
 8014644:	4618      	mov	r0, r3
 8014646:	3720      	adds	r7, #32
 8014648:	46bd      	mov	sp, r7
 801464a:	bd80      	pop	{r7, pc}

0801464c <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 801464c:	b580      	push	{r7, lr}
 801464e:	b086      	sub	sp, #24
 8014650:	af00      	add	r7, sp, #0
 8014652:	6078      	str	r0, [r7, #4]
 8014654:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8014656:	687b      	ldr	r3, [r7, #4]
 8014658:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 801465a:	2300      	movs	r3, #0
 801465c:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 801465e:	693b      	ldr	r3, [r7, #16]
 8014660:	2b00      	cmp	r3, #0
 8014662:	d103      	bne.n	801466c <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8014664:	f06f 0303 	mvn.w	r3, #3
 8014668:	617b      	str	r3, [r7, #20]
 801466a:	e039      	b.n	80146e0 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801466c:	f3ef 8305 	mrs	r3, IPSR
 8014670:	60fb      	str	r3, [r7, #12]
  return(result);
 8014672:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8014674:	2b00      	cmp	r3, #0
 8014676:	d022      	beq.n	80146be <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8014678:	683b      	ldr	r3, [r7, #0]
 801467a:	2b00      	cmp	r3, #0
 801467c:	d003      	beq.n	8014686 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 801467e:	f06f 0303 	mvn.w	r3, #3
 8014682:	617b      	str	r3, [r7, #20]
 8014684:	e02c      	b.n	80146e0 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8014686:	2300      	movs	r3, #0
 8014688:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 801468a:	f107 0308 	add.w	r3, r7, #8
 801468e:	461a      	mov	r2, r3
 8014690:	2100      	movs	r1, #0
 8014692:	6938      	ldr	r0, [r7, #16]
 8014694:	f001 fc7a 	bl	8015f8c <xQueueReceiveFromISR>
 8014698:	4603      	mov	r3, r0
 801469a:	2b01      	cmp	r3, #1
 801469c:	d003      	beq.n	80146a6 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 801469e:	f06f 0302 	mvn.w	r3, #2
 80146a2:	617b      	str	r3, [r7, #20]
 80146a4:	e01c      	b.n	80146e0 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 80146a6:	68bb      	ldr	r3, [r7, #8]
 80146a8:	2b00      	cmp	r3, #0
 80146aa:	d019      	beq.n	80146e0 <osSemaphoreAcquire+0x94>
 80146ac:	4b0f      	ldr	r3, [pc, #60]	; (80146ec <osSemaphoreAcquire+0xa0>)
 80146ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80146b2:	601a      	str	r2, [r3, #0]
 80146b4:	f3bf 8f4f 	dsb	sy
 80146b8:	f3bf 8f6f 	isb	sy
 80146bc:	e010      	b.n	80146e0 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 80146be:	6839      	ldr	r1, [r7, #0]
 80146c0:	6938      	ldr	r0, [r7, #16]
 80146c2:	f001 fb57 	bl	8015d74 <xQueueSemaphoreTake>
 80146c6:	4603      	mov	r3, r0
 80146c8:	2b01      	cmp	r3, #1
 80146ca:	d009      	beq.n	80146e0 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 80146cc:	683b      	ldr	r3, [r7, #0]
 80146ce:	2b00      	cmp	r3, #0
 80146d0:	d003      	beq.n	80146da <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 80146d2:	f06f 0301 	mvn.w	r3, #1
 80146d6:	617b      	str	r3, [r7, #20]
 80146d8:	e002      	b.n	80146e0 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 80146da:	f06f 0302 	mvn.w	r3, #2
 80146de:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 80146e0:	697b      	ldr	r3, [r7, #20]
}
 80146e2:	4618      	mov	r0, r3
 80146e4:	3718      	adds	r7, #24
 80146e6:	46bd      	mov	sp, r7
 80146e8:	bd80      	pop	{r7, pc}
 80146ea:	bf00      	nop
 80146ec:	e000ed04 	.word	0xe000ed04

080146f0 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 80146f0:	b580      	push	{r7, lr}
 80146f2:	b086      	sub	sp, #24
 80146f4:	af00      	add	r7, sp, #0
 80146f6:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80146f8:	687b      	ldr	r3, [r7, #4]
 80146fa:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80146fc:	2300      	movs	r3, #0
 80146fe:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8014700:	693b      	ldr	r3, [r7, #16]
 8014702:	2b00      	cmp	r3, #0
 8014704:	d103      	bne.n	801470e <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8014706:	f06f 0303 	mvn.w	r3, #3
 801470a:	617b      	str	r3, [r7, #20]
 801470c:	e02c      	b.n	8014768 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801470e:	f3ef 8305 	mrs	r3, IPSR
 8014712:	60fb      	str	r3, [r7, #12]
  return(result);
 8014714:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8014716:	2b00      	cmp	r3, #0
 8014718:	d01a      	beq.n	8014750 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 801471a:	2300      	movs	r3, #0
 801471c:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 801471e:	f107 0308 	add.w	r3, r7, #8
 8014722:	4619      	mov	r1, r3
 8014724:	6938      	ldr	r0, [r7, #16]
 8014726:	f001 f9b8 	bl	8015a9a <xQueueGiveFromISR>
 801472a:	4603      	mov	r3, r0
 801472c:	2b01      	cmp	r3, #1
 801472e:	d003      	beq.n	8014738 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8014730:	f06f 0302 	mvn.w	r3, #2
 8014734:	617b      	str	r3, [r7, #20]
 8014736:	e017      	b.n	8014768 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8014738:	68bb      	ldr	r3, [r7, #8]
 801473a:	2b00      	cmp	r3, #0
 801473c:	d014      	beq.n	8014768 <osSemaphoreRelease+0x78>
 801473e:	4b0d      	ldr	r3, [pc, #52]	; (8014774 <osSemaphoreRelease+0x84>)
 8014740:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014744:	601a      	str	r2, [r3, #0]
 8014746:	f3bf 8f4f 	dsb	sy
 801474a:	f3bf 8f6f 	isb	sy
 801474e:	e00b      	b.n	8014768 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8014750:	2300      	movs	r3, #0
 8014752:	2200      	movs	r2, #0
 8014754:	2100      	movs	r1, #0
 8014756:	6938      	ldr	r0, [r7, #16]
 8014758:	f001 f806 	bl	8015768 <xQueueGenericSend>
 801475c:	4603      	mov	r3, r0
 801475e:	2b01      	cmp	r3, #1
 8014760:	d002      	beq.n	8014768 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8014762:	f06f 0302 	mvn.w	r3, #2
 8014766:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8014768:	697b      	ldr	r3, [r7, #20]
}
 801476a:	4618      	mov	r0, r3
 801476c:	3718      	adds	r7, #24
 801476e:	46bd      	mov	sp, r7
 8014770:	bd80      	pop	{r7, pc}
 8014772:	bf00      	nop
 8014774:	e000ed04 	.word	0xe000ed04

08014778 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8014778:	b580      	push	{r7, lr}
 801477a:	b08a      	sub	sp, #40	; 0x28
 801477c:	af02      	add	r7, sp, #8
 801477e:	60f8      	str	r0, [r7, #12]
 8014780:	60b9      	str	r1, [r7, #8]
 8014782:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8014784:	2300      	movs	r3, #0
 8014786:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8014788:	f3ef 8305 	mrs	r3, IPSR
 801478c:	613b      	str	r3, [r7, #16]
  return(result);
 801478e:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8014790:	2b00      	cmp	r3, #0
 8014792:	d15f      	bne.n	8014854 <osMessageQueueNew+0xdc>
 8014794:	68fb      	ldr	r3, [r7, #12]
 8014796:	2b00      	cmp	r3, #0
 8014798:	d05c      	beq.n	8014854 <osMessageQueueNew+0xdc>
 801479a:	68bb      	ldr	r3, [r7, #8]
 801479c:	2b00      	cmp	r3, #0
 801479e:	d059      	beq.n	8014854 <osMessageQueueNew+0xdc>
    mem = -1;
 80147a0:	f04f 33ff 	mov.w	r3, #4294967295
 80147a4:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80147a6:	687b      	ldr	r3, [r7, #4]
 80147a8:	2b00      	cmp	r3, #0
 80147aa:	d029      	beq.n	8014800 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80147ac:	687b      	ldr	r3, [r7, #4]
 80147ae:	689b      	ldr	r3, [r3, #8]
 80147b0:	2b00      	cmp	r3, #0
 80147b2:	d012      	beq.n	80147da <osMessageQueueNew+0x62>
 80147b4:	687b      	ldr	r3, [r7, #4]
 80147b6:	68db      	ldr	r3, [r3, #12]
 80147b8:	2b4f      	cmp	r3, #79	; 0x4f
 80147ba:	d90e      	bls.n	80147da <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80147bc:	687b      	ldr	r3, [r7, #4]
 80147be:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80147c0:	2b00      	cmp	r3, #0
 80147c2:	d00a      	beq.n	80147da <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80147c4:	687b      	ldr	r3, [r7, #4]
 80147c6:	695a      	ldr	r2, [r3, #20]
 80147c8:	68fb      	ldr	r3, [r7, #12]
 80147ca:	68b9      	ldr	r1, [r7, #8]
 80147cc:	fb01 f303 	mul.w	r3, r1, r3
 80147d0:	429a      	cmp	r2, r3
 80147d2:	d302      	bcc.n	80147da <osMessageQueueNew+0x62>
        mem = 1;
 80147d4:	2301      	movs	r3, #1
 80147d6:	61bb      	str	r3, [r7, #24]
 80147d8:	e014      	b.n	8014804 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80147da:	687b      	ldr	r3, [r7, #4]
 80147dc:	689b      	ldr	r3, [r3, #8]
 80147de:	2b00      	cmp	r3, #0
 80147e0:	d110      	bne.n	8014804 <osMessageQueueNew+0x8c>
 80147e2:	687b      	ldr	r3, [r7, #4]
 80147e4:	68db      	ldr	r3, [r3, #12]
 80147e6:	2b00      	cmp	r3, #0
 80147e8:	d10c      	bne.n	8014804 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80147ea:	687b      	ldr	r3, [r7, #4]
 80147ec:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80147ee:	2b00      	cmp	r3, #0
 80147f0:	d108      	bne.n	8014804 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80147f2:	687b      	ldr	r3, [r7, #4]
 80147f4:	695b      	ldr	r3, [r3, #20]
 80147f6:	2b00      	cmp	r3, #0
 80147f8:	d104      	bne.n	8014804 <osMessageQueueNew+0x8c>
          mem = 0;
 80147fa:	2300      	movs	r3, #0
 80147fc:	61bb      	str	r3, [r7, #24]
 80147fe:	e001      	b.n	8014804 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8014800:	2300      	movs	r3, #0
 8014802:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8014804:	69bb      	ldr	r3, [r7, #24]
 8014806:	2b01      	cmp	r3, #1
 8014808:	d10b      	bne.n	8014822 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 801480a:	687b      	ldr	r3, [r7, #4]
 801480c:	691a      	ldr	r2, [r3, #16]
 801480e:	687b      	ldr	r3, [r7, #4]
 8014810:	689b      	ldr	r3, [r3, #8]
 8014812:	2100      	movs	r1, #0
 8014814:	9100      	str	r1, [sp, #0]
 8014816:	68b9      	ldr	r1, [r7, #8]
 8014818:	68f8      	ldr	r0, [r7, #12]
 801481a:	f000 fe65 	bl	80154e8 <xQueueGenericCreateStatic>
 801481e:	61f8      	str	r0, [r7, #28]
 8014820:	e008      	b.n	8014834 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8014822:	69bb      	ldr	r3, [r7, #24]
 8014824:	2b00      	cmp	r3, #0
 8014826:	d105      	bne.n	8014834 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8014828:	2200      	movs	r2, #0
 801482a:	68b9      	ldr	r1, [r7, #8]
 801482c:	68f8      	ldr	r0, [r7, #12]
 801482e:	f000 fed3 	bl	80155d8 <xQueueGenericCreate>
 8014832:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8014834:	69fb      	ldr	r3, [r7, #28]
 8014836:	2b00      	cmp	r3, #0
 8014838:	d00c      	beq.n	8014854 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 801483a:	687b      	ldr	r3, [r7, #4]
 801483c:	2b00      	cmp	r3, #0
 801483e:	d003      	beq.n	8014848 <osMessageQueueNew+0xd0>
        name = attr->name;
 8014840:	687b      	ldr	r3, [r7, #4]
 8014842:	681b      	ldr	r3, [r3, #0]
 8014844:	617b      	str	r3, [r7, #20]
 8014846:	e001      	b.n	801484c <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8014848:	2300      	movs	r3, #0
 801484a:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 801484c:	6979      	ldr	r1, [r7, #20]
 801484e:	69f8      	ldr	r0, [r7, #28]
 8014850:	f001 fd68 	bl	8016324 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8014854:	69fb      	ldr	r3, [r7, #28]
}
 8014856:	4618      	mov	r0, r3
 8014858:	3720      	adds	r7, #32
 801485a:	46bd      	mov	sp, r7
 801485c:	bd80      	pop	{r7, pc}
	...

08014860 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8014860:	b580      	push	{r7, lr}
 8014862:	b088      	sub	sp, #32
 8014864:	af00      	add	r7, sp, #0
 8014866:	60f8      	str	r0, [r7, #12]
 8014868:	60b9      	str	r1, [r7, #8]
 801486a:	603b      	str	r3, [r7, #0]
 801486c:	4613      	mov	r3, r2
 801486e:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8014870:	68fb      	ldr	r3, [r7, #12]
 8014872:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8014874:	2300      	movs	r3, #0
 8014876:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8014878:	f3ef 8305 	mrs	r3, IPSR
 801487c:	617b      	str	r3, [r7, #20]
  return(result);
 801487e:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8014880:	2b00      	cmp	r3, #0
 8014882:	d028      	beq.n	80148d6 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8014884:	69bb      	ldr	r3, [r7, #24]
 8014886:	2b00      	cmp	r3, #0
 8014888:	d005      	beq.n	8014896 <osMessageQueuePut+0x36>
 801488a:	68bb      	ldr	r3, [r7, #8]
 801488c:	2b00      	cmp	r3, #0
 801488e:	d002      	beq.n	8014896 <osMessageQueuePut+0x36>
 8014890:	683b      	ldr	r3, [r7, #0]
 8014892:	2b00      	cmp	r3, #0
 8014894:	d003      	beq.n	801489e <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8014896:	f06f 0303 	mvn.w	r3, #3
 801489a:	61fb      	str	r3, [r7, #28]
 801489c:	e038      	b.n	8014910 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 801489e:	2300      	movs	r3, #0
 80148a0:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80148a2:	f107 0210 	add.w	r2, r7, #16
 80148a6:	2300      	movs	r3, #0
 80148a8:	68b9      	ldr	r1, [r7, #8]
 80148aa:	69b8      	ldr	r0, [r7, #24]
 80148ac:	f001 f85a 	bl	8015964 <xQueueGenericSendFromISR>
 80148b0:	4603      	mov	r3, r0
 80148b2:	2b01      	cmp	r3, #1
 80148b4:	d003      	beq.n	80148be <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 80148b6:	f06f 0302 	mvn.w	r3, #2
 80148ba:	61fb      	str	r3, [r7, #28]
 80148bc:	e028      	b.n	8014910 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 80148be:	693b      	ldr	r3, [r7, #16]
 80148c0:	2b00      	cmp	r3, #0
 80148c2:	d025      	beq.n	8014910 <osMessageQueuePut+0xb0>
 80148c4:	4b15      	ldr	r3, [pc, #84]	; (801491c <osMessageQueuePut+0xbc>)
 80148c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80148ca:	601a      	str	r2, [r3, #0]
 80148cc:	f3bf 8f4f 	dsb	sy
 80148d0:	f3bf 8f6f 	isb	sy
 80148d4:	e01c      	b.n	8014910 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80148d6:	69bb      	ldr	r3, [r7, #24]
 80148d8:	2b00      	cmp	r3, #0
 80148da:	d002      	beq.n	80148e2 <osMessageQueuePut+0x82>
 80148dc:	68bb      	ldr	r3, [r7, #8]
 80148de:	2b00      	cmp	r3, #0
 80148e0:	d103      	bne.n	80148ea <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 80148e2:	f06f 0303 	mvn.w	r3, #3
 80148e6:	61fb      	str	r3, [r7, #28]
 80148e8:	e012      	b.n	8014910 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80148ea:	2300      	movs	r3, #0
 80148ec:	683a      	ldr	r2, [r7, #0]
 80148ee:	68b9      	ldr	r1, [r7, #8]
 80148f0:	69b8      	ldr	r0, [r7, #24]
 80148f2:	f000 ff39 	bl	8015768 <xQueueGenericSend>
 80148f6:	4603      	mov	r3, r0
 80148f8:	2b01      	cmp	r3, #1
 80148fa:	d009      	beq.n	8014910 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 80148fc:	683b      	ldr	r3, [r7, #0]
 80148fe:	2b00      	cmp	r3, #0
 8014900:	d003      	beq.n	801490a <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8014902:	f06f 0301 	mvn.w	r3, #1
 8014906:	61fb      	str	r3, [r7, #28]
 8014908:	e002      	b.n	8014910 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 801490a:	f06f 0302 	mvn.w	r3, #2
 801490e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8014910:	69fb      	ldr	r3, [r7, #28]
}
 8014912:	4618      	mov	r0, r3
 8014914:	3720      	adds	r7, #32
 8014916:	46bd      	mov	sp, r7
 8014918:	bd80      	pop	{r7, pc}
 801491a:	bf00      	nop
 801491c:	e000ed04 	.word	0xe000ed04

08014920 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8014920:	b580      	push	{r7, lr}
 8014922:	b088      	sub	sp, #32
 8014924:	af00      	add	r7, sp, #0
 8014926:	60f8      	str	r0, [r7, #12]
 8014928:	60b9      	str	r1, [r7, #8]
 801492a:	607a      	str	r2, [r7, #4]
 801492c:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 801492e:	68fb      	ldr	r3, [r7, #12]
 8014930:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8014932:	2300      	movs	r3, #0
 8014934:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8014936:	f3ef 8305 	mrs	r3, IPSR
 801493a:	617b      	str	r3, [r7, #20]
  return(result);
 801493c:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 801493e:	2b00      	cmp	r3, #0
 8014940:	d028      	beq.n	8014994 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8014942:	69bb      	ldr	r3, [r7, #24]
 8014944:	2b00      	cmp	r3, #0
 8014946:	d005      	beq.n	8014954 <osMessageQueueGet+0x34>
 8014948:	68bb      	ldr	r3, [r7, #8]
 801494a:	2b00      	cmp	r3, #0
 801494c:	d002      	beq.n	8014954 <osMessageQueueGet+0x34>
 801494e:	683b      	ldr	r3, [r7, #0]
 8014950:	2b00      	cmp	r3, #0
 8014952:	d003      	beq.n	801495c <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8014954:	f06f 0303 	mvn.w	r3, #3
 8014958:	61fb      	str	r3, [r7, #28]
 801495a:	e037      	b.n	80149cc <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 801495c:	2300      	movs	r3, #0
 801495e:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8014960:	f107 0310 	add.w	r3, r7, #16
 8014964:	461a      	mov	r2, r3
 8014966:	68b9      	ldr	r1, [r7, #8]
 8014968:	69b8      	ldr	r0, [r7, #24]
 801496a:	f001 fb0f 	bl	8015f8c <xQueueReceiveFromISR>
 801496e:	4603      	mov	r3, r0
 8014970:	2b01      	cmp	r3, #1
 8014972:	d003      	beq.n	801497c <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8014974:	f06f 0302 	mvn.w	r3, #2
 8014978:	61fb      	str	r3, [r7, #28]
 801497a:	e027      	b.n	80149cc <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 801497c:	693b      	ldr	r3, [r7, #16]
 801497e:	2b00      	cmp	r3, #0
 8014980:	d024      	beq.n	80149cc <osMessageQueueGet+0xac>
 8014982:	4b15      	ldr	r3, [pc, #84]	; (80149d8 <osMessageQueueGet+0xb8>)
 8014984:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014988:	601a      	str	r2, [r3, #0]
 801498a:	f3bf 8f4f 	dsb	sy
 801498e:	f3bf 8f6f 	isb	sy
 8014992:	e01b      	b.n	80149cc <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8014994:	69bb      	ldr	r3, [r7, #24]
 8014996:	2b00      	cmp	r3, #0
 8014998:	d002      	beq.n	80149a0 <osMessageQueueGet+0x80>
 801499a:	68bb      	ldr	r3, [r7, #8]
 801499c:	2b00      	cmp	r3, #0
 801499e:	d103      	bne.n	80149a8 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 80149a0:	f06f 0303 	mvn.w	r3, #3
 80149a4:	61fb      	str	r3, [r7, #28]
 80149a6:	e011      	b.n	80149cc <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80149a8:	683a      	ldr	r2, [r7, #0]
 80149aa:	68b9      	ldr	r1, [r7, #8]
 80149ac:	69b8      	ldr	r0, [r7, #24]
 80149ae:	f001 f901 	bl	8015bb4 <xQueueReceive>
 80149b2:	4603      	mov	r3, r0
 80149b4:	2b01      	cmp	r3, #1
 80149b6:	d009      	beq.n	80149cc <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 80149b8:	683b      	ldr	r3, [r7, #0]
 80149ba:	2b00      	cmp	r3, #0
 80149bc:	d003      	beq.n	80149c6 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 80149be:	f06f 0301 	mvn.w	r3, #1
 80149c2:	61fb      	str	r3, [r7, #28]
 80149c4:	e002      	b.n	80149cc <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 80149c6:	f06f 0302 	mvn.w	r3, #2
 80149ca:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80149cc:	69fb      	ldr	r3, [r7, #28]
}
 80149ce:	4618      	mov	r0, r3
 80149d0:	3720      	adds	r7, #32
 80149d2:	46bd      	mov	sp, r7
 80149d4:	bd80      	pop	{r7, pc}
 80149d6:	bf00      	nop
 80149d8:	e000ed04 	.word	0xe000ed04

080149dc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80149dc:	b480      	push	{r7}
 80149de:	b085      	sub	sp, #20
 80149e0:	af00      	add	r7, sp, #0
 80149e2:	60f8      	str	r0, [r7, #12]
 80149e4:	60b9      	str	r1, [r7, #8]
 80149e6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80149e8:	68fb      	ldr	r3, [r7, #12]
 80149ea:	4a07      	ldr	r2, [pc, #28]	; (8014a08 <vApplicationGetIdleTaskMemory+0x2c>)
 80149ec:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80149ee:	68bb      	ldr	r3, [r7, #8]
 80149f0:	4a06      	ldr	r2, [pc, #24]	; (8014a0c <vApplicationGetIdleTaskMemory+0x30>)
 80149f2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80149f4:	687b      	ldr	r3, [r7, #4]
 80149f6:	2280      	movs	r2, #128	; 0x80
 80149f8:	601a      	str	r2, [r3, #0]
}
 80149fa:	bf00      	nop
 80149fc:	3714      	adds	r7, #20
 80149fe:	46bd      	mov	sp, r7
 8014a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a04:	4770      	bx	lr
 8014a06:	bf00      	nop
 8014a08:	24003ba4 	.word	0x24003ba4
 8014a0c:	24003c00 	.word	0x24003c00

08014a10 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8014a10:	b480      	push	{r7}
 8014a12:	b085      	sub	sp, #20
 8014a14:	af00      	add	r7, sp, #0
 8014a16:	60f8      	str	r0, [r7, #12]
 8014a18:	60b9      	str	r1, [r7, #8]
 8014a1a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8014a1c:	68fb      	ldr	r3, [r7, #12]
 8014a1e:	4a07      	ldr	r2, [pc, #28]	; (8014a3c <vApplicationGetTimerTaskMemory+0x2c>)
 8014a20:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8014a22:	68bb      	ldr	r3, [r7, #8]
 8014a24:	4a06      	ldr	r2, [pc, #24]	; (8014a40 <vApplicationGetTimerTaskMemory+0x30>)
 8014a26:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8014a28:	687b      	ldr	r3, [r7, #4]
 8014a2a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8014a2e:	601a      	str	r2, [r3, #0]
}
 8014a30:	bf00      	nop
 8014a32:	3714      	adds	r7, #20
 8014a34:	46bd      	mov	sp, r7
 8014a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a3a:	4770      	bx	lr
 8014a3c:	24003e00 	.word	0x24003e00
 8014a40:	24003e5c 	.word	0x24003e5c

08014a44 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8014a44:	b580      	push	{r7, lr}
 8014a46:	b08a      	sub	sp, #40	; 0x28
 8014a48:	af00      	add	r7, sp, #0
 8014a4a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8014a4c:	2300      	movs	r3, #0
 8014a4e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8014a50:	f001 ff2c 	bl	80168ac <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8014a54:	4b5b      	ldr	r3, [pc, #364]	; (8014bc4 <pvPortMalloc+0x180>)
 8014a56:	681b      	ldr	r3, [r3, #0]
 8014a58:	2b00      	cmp	r3, #0
 8014a5a:	d101      	bne.n	8014a60 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8014a5c:	f000 f920 	bl	8014ca0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8014a60:	4b59      	ldr	r3, [pc, #356]	; (8014bc8 <pvPortMalloc+0x184>)
 8014a62:	681a      	ldr	r2, [r3, #0]
 8014a64:	687b      	ldr	r3, [r7, #4]
 8014a66:	4013      	ands	r3, r2
 8014a68:	2b00      	cmp	r3, #0
 8014a6a:	f040 8093 	bne.w	8014b94 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8014a6e:	687b      	ldr	r3, [r7, #4]
 8014a70:	2b00      	cmp	r3, #0
 8014a72:	d01d      	beq.n	8014ab0 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8014a74:	2208      	movs	r2, #8
 8014a76:	687b      	ldr	r3, [r7, #4]
 8014a78:	4413      	add	r3, r2
 8014a7a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8014a7c:	687b      	ldr	r3, [r7, #4]
 8014a7e:	f003 0307 	and.w	r3, r3, #7
 8014a82:	2b00      	cmp	r3, #0
 8014a84:	d014      	beq.n	8014ab0 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8014a86:	687b      	ldr	r3, [r7, #4]
 8014a88:	f023 0307 	bic.w	r3, r3, #7
 8014a8c:	3308      	adds	r3, #8
 8014a8e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8014a90:	687b      	ldr	r3, [r7, #4]
 8014a92:	f003 0307 	and.w	r3, r3, #7
 8014a96:	2b00      	cmp	r3, #0
 8014a98:	d00a      	beq.n	8014ab0 <pvPortMalloc+0x6c>
	__asm volatile
 8014a9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014a9e:	f383 8811 	msr	BASEPRI, r3
 8014aa2:	f3bf 8f6f 	isb	sy
 8014aa6:	f3bf 8f4f 	dsb	sy
 8014aaa:	617b      	str	r3, [r7, #20]
}
 8014aac:	bf00      	nop
 8014aae:	e7fe      	b.n	8014aae <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8014ab0:	687b      	ldr	r3, [r7, #4]
 8014ab2:	2b00      	cmp	r3, #0
 8014ab4:	d06e      	beq.n	8014b94 <pvPortMalloc+0x150>
 8014ab6:	4b45      	ldr	r3, [pc, #276]	; (8014bcc <pvPortMalloc+0x188>)
 8014ab8:	681b      	ldr	r3, [r3, #0]
 8014aba:	687a      	ldr	r2, [r7, #4]
 8014abc:	429a      	cmp	r2, r3
 8014abe:	d869      	bhi.n	8014b94 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8014ac0:	4b43      	ldr	r3, [pc, #268]	; (8014bd0 <pvPortMalloc+0x18c>)
 8014ac2:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8014ac4:	4b42      	ldr	r3, [pc, #264]	; (8014bd0 <pvPortMalloc+0x18c>)
 8014ac6:	681b      	ldr	r3, [r3, #0]
 8014ac8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8014aca:	e004      	b.n	8014ad6 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8014acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014ace:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8014ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014ad2:	681b      	ldr	r3, [r3, #0]
 8014ad4:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8014ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014ad8:	685b      	ldr	r3, [r3, #4]
 8014ada:	687a      	ldr	r2, [r7, #4]
 8014adc:	429a      	cmp	r2, r3
 8014ade:	d903      	bls.n	8014ae8 <pvPortMalloc+0xa4>
 8014ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014ae2:	681b      	ldr	r3, [r3, #0]
 8014ae4:	2b00      	cmp	r3, #0
 8014ae6:	d1f1      	bne.n	8014acc <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8014ae8:	4b36      	ldr	r3, [pc, #216]	; (8014bc4 <pvPortMalloc+0x180>)
 8014aea:	681b      	ldr	r3, [r3, #0]
 8014aec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014aee:	429a      	cmp	r2, r3
 8014af0:	d050      	beq.n	8014b94 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8014af2:	6a3b      	ldr	r3, [r7, #32]
 8014af4:	681b      	ldr	r3, [r3, #0]
 8014af6:	2208      	movs	r2, #8
 8014af8:	4413      	add	r3, r2
 8014afa:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8014afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014afe:	681a      	ldr	r2, [r3, #0]
 8014b00:	6a3b      	ldr	r3, [r7, #32]
 8014b02:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8014b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014b06:	685a      	ldr	r2, [r3, #4]
 8014b08:	687b      	ldr	r3, [r7, #4]
 8014b0a:	1ad2      	subs	r2, r2, r3
 8014b0c:	2308      	movs	r3, #8
 8014b0e:	005b      	lsls	r3, r3, #1
 8014b10:	429a      	cmp	r2, r3
 8014b12:	d91f      	bls.n	8014b54 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8014b14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014b16:	687b      	ldr	r3, [r7, #4]
 8014b18:	4413      	add	r3, r2
 8014b1a:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8014b1c:	69bb      	ldr	r3, [r7, #24]
 8014b1e:	f003 0307 	and.w	r3, r3, #7
 8014b22:	2b00      	cmp	r3, #0
 8014b24:	d00a      	beq.n	8014b3c <pvPortMalloc+0xf8>
	__asm volatile
 8014b26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014b2a:	f383 8811 	msr	BASEPRI, r3
 8014b2e:	f3bf 8f6f 	isb	sy
 8014b32:	f3bf 8f4f 	dsb	sy
 8014b36:	613b      	str	r3, [r7, #16]
}
 8014b38:	bf00      	nop
 8014b3a:	e7fe      	b.n	8014b3a <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8014b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014b3e:	685a      	ldr	r2, [r3, #4]
 8014b40:	687b      	ldr	r3, [r7, #4]
 8014b42:	1ad2      	subs	r2, r2, r3
 8014b44:	69bb      	ldr	r3, [r7, #24]
 8014b46:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8014b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014b4a:	687a      	ldr	r2, [r7, #4]
 8014b4c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8014b4e:	69b8      	ldr	r0, [r7, #24]
 8014b50:	f000 f908 	bl	8014d64 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8014b54:	4b1d      	ldr	r3, [pc, #116]	; (8014bcc <pvPortMalloc+0x188>)
 8014b56:	681a      	ldr	r2, [r3, #0]
 8014b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014b5a:	685b      	ldr	r3, [r3, #4]
 8014b5c:	1ad3      	subs	r3, r2, r3
 8014b5e:	4a1b      	ldr	r2, [pc, #108]	; (8014bcc <pvPortMalloc+0x188>)
 8014b60:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8014b62:	4b1a      	ldr	r3, [pc, #104]	; (8014bcc <pvPortMalloc+0x188>)
 8014b64:	681a      	ldr	r2, [r3, #0]
 8014b66:	4b1b      	ldr	r3, [pc, #108]	; (8014bd4 <pvPortMalloc+0x190>)
 8014b68:	681b      	ldr	r3, [r3, #0]
 8014b6a:	429a      	cmp	r2, r3
 8014b6c:	d203      	bcs.n	8014b76 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8014b6e:	4b17      	ldr	r3, [pc, #92]	; (8014bcc <pvPortMalloc+0x188>)
 8014b70:	681b      	ldr	r3, [r3, #0]
 8014b72:	4a18      	ldr	r2, [pc, #96]	; (8014bd4 <pvPortMalloc+0x190>)
 8014b74:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8014b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014b78:	685a      	ldr	r2, [r3, #4]
 8014b7a:	4b13      	ldr	r3, [pc, #76]	; (8014bc8 <pvPortMalloc+0x184>)
 8014b7c:	681b      	ldr	r3, [r3, #0]
 8014b7e:	431a      	orrs	r2, r3
 8014b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014b82:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8014b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014b86:	2200      	movs	r2, #0
 8014b88:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8014b8a:	4b13      	ldr	r3, [pc, #76]	; (8014bd8 <pvPortMalloc+0x194>)
 8014b8c:	681b      	ldr	r3, [r3, #0]
 8014b8e:	3301      	adds	r3, #1
 8014b90:	4a11      	ldr	r2, [pc, #68]	; (8014bd8 <pvPortMalloc+0x194>)
 8014b92:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8014b94:	f001 fe98 	bl	80168c8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8014b98:	69fb      	ldr	r3, [r7, #28]
 8014b9a:	f003 0307 	and.w	r3, r3, #7
 8014b9e:	2b00      	cmp	r3, #0
 8014ba0:	d00a      	beq.n	8014bb8 <pvPortMalloc+0x174>
	__asm volatile
 8014ba2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014ba6:	f383 8811 	msr	BASEPRI, r3
 8014baa:	f3bf 8f6f 	isb	sy
 8014bae:	f3bf 8f4f 	dsb	sy
 8014bb2:	60fb      	str	r3, [r7, #12]
}
 8014bb4:	bf00      	nop
 8014bb6:	e7fe      	b.n	8014bb6 <pvPortMalloc+0x172>
	return pvReturn;
 8014bb8:	69fb      	ldr	r3, [r7, #28]
}
 8014bba:	4618      	mov	r0, r3
 8014bbc:	3728      	adds	r7, #40	; 0x28
 8014bbe:	46bd      	mov	sp, r7
 8014bc0:	bd80      	pop	{r7, pc}
 8014bc2:	bf00      	nop
 8014bc4:	2400c264 	.word	0x2400c264
 8014bc8:	2400c278 	.word	0x2400c278
 8014bcc:	2400c268 	.word	0x2400c268
 8014bd0:	2400c25c 	.word	0x2400c25c
 8014bd4:	2400c26c 	.word	0x2400c26c
 8014bd8:	2400c270 	.word	0x2400c270

08014bdc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8014bdc:	b580      	push	{r7, lr}
 8014bde:	b086      	sub	sp, #24
 8014be0:	af00      	add	r7, sp, #0
 8014be2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8014be4:	687b      	ldr	r3, [r7, #4]
 8014be6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8014be8:	687b      	ldr	r3, [r7, #4]
 8014bea:	2b00      	cmp	r3, #0
 8014bec:	d04d      	beq.n	8014c8a <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8014bee:	2308      	movs	r3, #8
 8014bf0:	425b      	negs	r3, r3
 8014bf2:	697a      	ldr	r2, [r7, #20]
 8014bf4:	4413      	add	r3, r2
 8014bf6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8014bf8:	697b      	ldr	r3, [r7, #20]
 8014bfa:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8014bfc:	693b      	ldr	r3, [r7, #16]
 8014bfe:	685a      	ldr	r2, [r3, #4]
 8014c00:	4b24      	ldr	r3, [pc, #144]	; (8014c94 <vPortFree+0xb8>)
 8014c02:	681b      	ldr	r3, [r3, #0]
 8014c04:	4013      	ands	r3, r2
 8014c06:	2b00      	cmp	r3, #0
 8014c08:	d10a      	bne.n	8014c20 <vPortFree+0x44>
	__asm volatile
 8014c0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014c0e:	f383 8811 	msr	BASEPRI, r3
 8014c12:	f3bf 8f6f 	isb	sy
 8014c16:	f3bf 8f4f 	dsb	sy
 8014c1a:	60fb      	str	r3, [r7, #12]
}
 8014c1c:	bf00      	nop
 8014c1e:	e7fe      	b.n	8014c1e <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8014c20:	693b      	ldr	r3, [r7, #16]
 8014c22:	681b      	ldr	r3, [r3, #0]
 8014c24:	2b00      	cmp	r3, #0
 8014c26:	d00a      	beq.n	8014c3e <vPortFree+0x62>
	__asm volatile
 8014c28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014c2c:	f383 8811 	msr	BASEPRI, r3
 8014c30:	f3bf 8f6f 	isb	sy
 8014c34:	f3bf 8f4f 	dsb	sy
 8014c38:	60bb      	str	r3, [r7, #8]
}
 8014c3a:	bf00      	nop
 8014c3c:	e7fe      	b.n	8014c3c <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8014c3e:	693b      	ldr	r3, [r7, #16]
 8014c40:	685a      	ldr	r2, [r3, #4]
 8014c42:	4b14      	ldr	r3, [pc, #80]	; (8014c94 <vPortFree+0xb8>)
 8014c44:	681b      	ldr	r3, [r3, #0]
 8014c46:	4013      	ands	r3, r2
 8014c48:	2b00      	cmp	r3, #0
 8014c4a:	d01e      	beq.n	8014c8a <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8014c4c:	693b      	ldr	r3, [r7, #16]
 8014c4e:	681b      	ldr	r3, [r3, #0]
 8014c50:	2b00      	cmp	r3, #0
 8014c52:	d11a      	bne.n	8014c8a <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8014c54:	693b      	ldr	r3, [r7, #16]
 8014c56:	685a      	ldr	r2, [r3, #4]
 8014c58:	4b0e      	ldr	r3, [pc, #56]	; (8014c94 <vPortFree+0xb8>)
 8014c5a:	681b      	ldr	r3, [r3, #0]
 8014c5c:	43db      	mvns	r3, r3
 8014c5e:	401a      	ands	r2, r3
 8014c60:	693b      	ldr	r3, [r7, #16]
 8014c62:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8014c64:	f001 fe22 	bl	80168ac <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8014c68:	693b      	ldr	r3, [r7, #16]
 8014c6a:	685a      	ldr	r2, [r3, #4]
 8014c6c:	4b0a      	ldr	r3, [pc, #40]	; (8014c98 <vPortFree+0xbc>)
 8014c6e:	681b      	ldr	r3, [r3, #0]
 8014c70:	4413      	add	r3, r2
 8014c72:	4a09      	ldr	r2, [pc, #36]	; (8014c98 <vPortFree+0xbc>)
 8014c74:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8014c76:	6938      	ldr	r0, [r7, #16]
 8014c78:	f000 f874 	bl	8014d64 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8014c7c:	4b07      	ldr	r3, [pc, #28]	; (8014c9c <vPortFree+0xc0>)
 8014c7e:	681b      	ldr	r3, [r3, #0]
 8014c80:	3301      	adds	r3, #1
 8014c82:	4a06      	ldr	r2, [pc, #24]	; (8014c9c <vPortFree+0xc0>)
 8014c84:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8014c86:	f001 fe1f 	bl	80168c8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8014c8a:	bf00      	nop
 8014c8c:	3718      	adds	r7, #24
 8014c8e:	46bd      	mov	sp, r7
 8014c90:	bd80      	pop	{r7, pc}
 8014c92:	bf00      	nop
 8014c94:	2400c278 	.word	0x2400c278
 8014c98:	2400c268 	.word	0x2400c268
 8014c9c:	2400c274 	.word	0x2400c274

08014ca0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8014ca0:	b480      	push	{r7}
 8014ca2:	b085      	sub	sp, #20
 8014ca4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8014ca6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8014caa:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8014cac:	4b27      	ldr	r3, [pc, #156]	; (8014d4c <prvHeapInit+0xac>)
 8014cae:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8014cb0:	68fb      	ldr	r3, [r7, #12]
 8014cb2:	f003 0307 	and.w	r3, r3, #7
 8014cb6:	2b00      	cmp	r3, #0
 8014cb8:	d00c      	beq.n	8014cd4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8014cba:	68fb      	ldr	r3, [r7, #12]
 8014cbc:	3307      	adds	r3, #7
 8014cbe:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8014cc0:	68fb      	ldr	r3, [r7, #12]
 8014cc2:	f023 0307 	bic.w	r3, r3, #7
 8014cc6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8014cc8:	68ba      	ldr	r2, [r7, #8]
 8014cca:	68fb      	ldr	r3, [r7, #12]
 8014ccc:	1ad3      	subs	r3, r2, r3
 8014cce:	4a1f      	ldr	r2, [pc, #124]	; (8014d4c <prvHeapInit+0xac>)
 8014cd0:	4413      	add	r3, r2
 8014cd2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8014cd4:	68fb      	ldr	r3, [r7, #12]
 8014cd6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8014cd8:	4a1d      	ldr	r2, [pc, #116]	; (8014d50 <prvHeapInit+0xb0>)
 8014cda:	687b      	ldr	r3, [r7, #4]
 8014cdc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8014cde:	4b1c      	ldr	r3, [pc, #112]	; (8014d50 <prvHeapInit+0xb0>)
 8014ce0:	2200      	movs	r2, #0
 8014ce2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8014ce4:	687b      	ldr	r3, [r7, #4]
 8014ce6:	68ba      	ldr	r2, [r7, #8]
 8014ce8:	4413      	add	r3, r2
 8014cea:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8014cec:	2208      	movs	r2, #8
 8014cee:	68fb      	ldr	r3, [r7, #12]
 8014cf0:	1a9b      	subs	r3, r3, r2
 8014cf2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8014cf4:	68fb      	ldr	r3, [r7, #12]
 8014cf6:	f023 0307 	bic.w	r3, r3, #7
 8014cfa:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8014cfc:	68fb      	ldr	r3, [r7, #12]
 8014cfe:	4a15      	ldr	r2, [pc, #84]	; (8014d54 <prvHeapInit+0xb4>)
 8014d00:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8014d02:	4b14      	ldr	r3, [pc, #80]	; (8014d54 <prvHeapInit+0xb4>)
 8014d04:	681b      	ldr	r3, [r3, #0]
 8014d06:	2200      	movs	r2, #0
 8014d08:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8014d0a:	4b12      	ldr	r3, [pc, #72]	; (8014d54 <prvHeapInit+0xb4>)
 8014d0c:	681b      	ldr	r3, [r3, #0]
 8014d0e:	2200      	movs	r2, #0
 8014d10:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8014d12:	687b      	ldr	r3, [r7, #4]
 8014d14:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8014d16:	683b      	ldr	r3, [r7, #0]
 8014d18:	68fa      	ldr	r2, [r7, #12]
 8014d1a:	1ad2      	subs	r2, r2, r3
 8014d1c:	683b      	ldr	r3, [r7, #0]
 8014d1e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8014d20:	4b0c      	ldr	r3, [pc, #48]	; (8014d54 <prvHeapInit+0xb4>)
 8014d22:	681a      	ldr	r2, [r3, #0]
 8014d24:	683b      	ldr	r3, [r7, #0]
 8014d26:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8014d28:	683b      	ldr	r3, [r7, #0]
 8014d2a:	685b      	ldr	r3, [r3, #4]
 8014d2c:	4a0a      	ldr	r2, [pc, #40]	; (8014d58 <prvHeapInit+0xb8>)
 8014d2e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8014d30:	683b      	ldr	r3, [r7, #0]
 8014d32:	685b      	ldr	r3, [r3, #4]
 8014d34:	4a09      	ldr	r2, [pc, #36]	; (8014d5c <prvHeapInit+0xbc>)
 8014d36:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8014d38:	4b09      	ldr	r3, [pc, #36]	; (8014d60 <prvHeapInit+0xc0>)
 8014d3a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8014d3e:	601a      	str	r2, [r3, #0]
}
 8014d40:	bf00      	nop
 8014d42:	3714      	adds	r7, #20
 8014d44:	46bd      	mov	sp, r7
 8014d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d4a:	4770      	bx	lr
 8014d4c:	2400425c 	.word	0x2400425c
 8014d50:	2400c25c 	.word	0x2400c25c
 8014d54:	2400c264 	.word	0x2400c264
 8014d58:	2400c26c 	.word	0x2400c26c
 8014d5c:	2400c268 	.word	0x2400c268
 8014d60:	2400c278 	.word	0x2400c278

08014d64 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8014d64:	b480      	push	{r7}
 8014d66:	b085      	sub	sp, #20
 8014d68:	af00      	add	r7, sp, #0
 8014d6a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8014d6c:	4b28      	ldr	r3, [pc, #160]	; (8014e10 <prvInsertBlockIntoFreeList+0xac>)
 8014d6e:	60fb      	str	r3, [r7, #12]
 8014d70:	e002      	b.n	8014d78 <prvInsertBlockIntoFreeList+0x14>
 8014d72:	68fb      	ldr	r3, [r7, #12]
 8014d74:	681b      	ldr	r3, [r3, #0]
 8014d76:	60fb      	str	r3, [r7, #12]
 8014d78:	68fb      	ldr	r3, [r7, #12]
 8014d7a:	681b      	ldr	r3, [r3, #0]
 8014d7c:	687a      	ldr	r2, [r7, #4]
 8014d7e:	429a      	cmp	r2, r3
 8014d80:	d8f7      	bhi.n	8014d72 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8014d82:	68fb      	ldr	r3, [r7, #12]
 8014d84:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8014d86:	68fb      	ldr	r3, [r7, #12]
 8014d88:	685b      	ldr	r3, [r3, #4]
 8014d8a:	68ba      	ldr	r2, [r7, #8]
 8014d8c:	4413      	add	r3, r2
 8014d8e:	687a      	ldr	r2, [r7, #4]
 8014d90:	429a      	cmp	r2, r3
 8014d92:	d108      	bne.n	8014da6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8014d94:	68fb      	ldr	r3, [r7, #12]
 8014d96:	685a      	ldr	r2, [r3, #4]
 8014d98:	687b      	ldr	r3, [r7, #4]
 8014d9a:	685b      	ldr	r3, [r3, #4]
 8014d9c:	441a      	add	r2, r3
 8014d9e:	68fb      	ldr	r3, [r7, #12]
 8014da0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8014da2:	68fb      	ldr	r3, [r7, #12]
 8014da4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8014da6:	687b      	ldr	r3, [r7, #4]
 8014da8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8014daa:	687b      	ldr	r3, [r7, #4]
 8014dac:	685b      	ldr	r3, [r3, #4]
 8014dae:	68ba      	ldr	r2, [r7, #8]
 8014db0:	441a      	add	r2, r3
 8014db2:	68fb      	ldr	r3, [r7, #12]
 8014db4:	681b      	ldr	r3, [r3, #0]
 8014db6:	429a      	cmp	r2, r3
 8014db8:	d118      	bne.n	8014dec <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8014dba:	68fb      	ldr	r3, [r7, #12]
 8014dbc:	681a      	ldr	r2, [r3, #0]
 8014dbe:	4b15      	ldr	r3, [pc, #84]	; (8014e14 <prvInsertBlockIntoFreeList+0xb0>)
 8014dc0:	681b      	ldr	r3, [r3, #0]
 8014dc2:	429a      	cmp	r2, r3
 8014dc4:	d00d      	beq.n	8014de2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8014dc6:	687b      	ldr	r3, [r7, #4]
 8014dc8:	685a      	ldr	r2, [r3, #4]
 8014dca:	68fb      	ldr	r3, [r7, #12]
 8014dcc:	681b      	ldr	r3, [r3, #0]
 8014dce:	685b      	ldr	r3, [r3, #4]
 8014dd0:	441a      	add	r2, r3
 8014dd2:	687b      	ldr	r3, [r7, #4]
 8014dd4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8014dd6:	68fb      	ldr	r3, [r7, #12]
 8014dd8:	681b      	ldr	r3, [r3, #0]
 8014dda:	681a      	ldr	r2, [r3, #0]
 8014ddc:	687b      	ldr	r3, [r7, #4]
 8014dde:	601a      	str	r2, [r3, #0]
 8014de0:	e008      	b.n	8014df4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8014de2:	4b0c      	ldr	r3, [pc, #48]	; (8014e14 <prvInsertBlockIntoFreeList+0xb0>)
 8014de4:	681a      	ldr	r2, [r3, #0]
 8014de6:	687b      	ldr	r3, [r7, #4]
 8014de8:	601a      	str	r2, [r3, #0]
 8014dea:	e003      	b.n	8014df4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8014dec:	68fb      	ldr	r3, [r7, #12]
 8014dee:	681a      	ldr	r2, [r3, #0]
 8014df0:	687b      	ldr	r3, [r7, #4]
 8014df2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8014df4:	68fa      	ldr	r2, [r7, #12]
 8014df6:	687b      	ldr	r3, [r7, #4]
 8014df8:	429a      	cmp	r2, r3
 8014dfa:	d002      	beq.n	8014e02 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8014dfc:	68fb      	ldr	r3, [r7, #12]
 8014dfe:	687a      	ldr	r2, [r7, #4]
 8014e00:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8014e02:	bf00      	nop
 8014e04:	3714      	adds	r7, #20
 8014e06:	46bd      	mov	sp, r7
 8014e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e0c:	4770      	bx	lr
 8014e0e:	bf00      	nop
 8014e10:	2400c25c 	.word	0x2400c25c
 8014e14:	2400c264 	.word	0x2400c264

08014e18 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8014e18:	b480      	push	{r7}
 8014e1a:	b083      	sub	sp, #12
 8014e1c:	af00      	add	r7, sp, #0
 8014e1e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8014e20:	687b      	ldr	r3, [r7, #4]
 8014e22:	f103 0208 	add.w	r2, r3, #8
 8014e26:	687b      	ldr	r3, [r7, #4]
 8014e28:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8014e2a:	687b      	ldr	r3, [r7, #4]
 8014e2c:	f04f 32ff 	mov.w	r2, #4294967295
 8014e30:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8014e32:	687b      	ldr	r3, [r7, #4]
 8014e34:	f103 0208 	add.w	r2, r3, #8
 8014e38:	687b      	ldr	r3, [r7, #4]
 8014e3a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8014e3c:	687b      	ldr	r3, [r7, #4]
 8014e3e:	f103 0208 	add.w	r2, r3, #8
 8014e42:	687b      	ldr	r3, [r7, #4]
 8014e44:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8014e46:	687b      	ldr	r3, [r7, #4]
 8014e48:	2200      	movs	r2, #0
 8014e4a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8014e4c:	bf00      	nop
 8014e4e:	370c      	adds	r7, #12
 8014e50:	46bd      	mov	sp, r7
 8014e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e56:	4770      	bx	lr

08014e58 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8014e58:	b480      	push	{r7}
 8014e5a:	b083      	sub	sp, #12
 8014e5c:	af00      	add	r7, sp, #0
 8014e5e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8014e60:	687b      	ldr	r3, [r7, #4]
 8014e62:	2200      	movs	r2, #0
 8014e64:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8014e66:	bf00      	nop
 8014e68:	370c      	adds	r7, #12
 8014e6a:	46bd      	mov	sp, r7
 8014e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e70:	4770      	bx	lr

08014e72 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8014e72:	b480      	push	{r7}
 8014e74:	b085      	sub	sp, #20
 8014e76:	af00      	add	r7, sp, #0
 8014e78:	6078      	str	r0, [r7, #4]
 8014e7a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8014e7c:	687b      	ldr	r3, [r7, #4]
 8014e7e:	685b      	ldr	r3, [r3, #4]
 8014e80:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8014e82:	683b      	ldr	r3, [r7, #0]
 8014e84:	68fa      	ldr	r2, [r7, #12]
 8014e86:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8014e88:	68fb      	ldr	r3, [r7, #12]
 8014e8a:	689a      	ldr	r2, [r3, #8]
 8014e8c:	683b      	ldr	r3, [r7, #0]
 8014e8e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8014e90:	68fb      	ldr	r3, [r7, #12]
 8014e92:	689b      	ldr	r3, [r3, #8]
 8014e94:	683a      	ldr	r2, [r7, #0]
 8014e96:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8014e98:	68fb      	ldr	r3, [r7, #12]
 8014e9a:	683a      	ldr	r2, [r7, #0]
 8014e9c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8014e9e:	683b      	ldr	r3, [r7, #0]
 8014ea0:	687a      	ldr	r2, [r7, #4]
 8014ea2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8014ea4:	687b      	ldr	r3, [r7, #4]
 8014ea6:	681b      	ldr	r3, [r3, #0]
 8014ea8:	1c5a      	adds	r2, r3, #1
 8014eaa:	687b      	ldr	r3, [r7, #4]
 8014eac:	601a      	str	r2, [r3, #0]
}
 8014eae:	bf00      	nop
 8014eb0:	3714      	adds	r7, #20
 8014eb2:	46bd      	mov	sp, r7
 8014eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014eb8:	4770      	bx	lr

08014eba <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8014eba:	b480      	push	{r7}
 8014ebc:	b085      	sub	sp, #20
 8014ebe:	af00      	add	r7, sp, #0
 8014ec0:	6078      	str	r0, [r7, #4]
 8014ec2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8014ec4:	683b      	ldr	r3, [r7, #0]
 8014ec6:	681b      	ldr	r3, [r3, #0]
 8014ec8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8014eca:	68bb      	ldr	r3, [r7, #8]
 8014ecc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014ed0:	d103      	bne.n	8014eda <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8014ed2:	687b      	ldr	r3, [r7, #4]
 8014ed4:	691b      	ldr	r3, [r3, #16]
 8014ed6:	60fb      	str	r3, [r7, #12]
 8014ed8:	e00c      	b.n	8014ef4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8014eda:	687b      	ldr	r3, [r7, #4]
 8014edc:	3308      	adds	r3, #8
 8014ede:	60fb      	str	r3, [r7, #12]
 8014ee0:	e002      	b.n	8014ee8 <vListInsert+0x2e>
 8014ee2:	68fb      	ldr	r3, [r7, #12]
 8014ee4:	685b      	ldr	r3, [r3, #4]
 8014ee6:	60fb      	str	r3, [r7, #12]
 8014ee8:	68fb      	ldr	r3, [r7, #12]
 8014eea:	685b      	ldr	r3, [r3, #4]
 8014eec:	681b      	ldr	r3, [r3, #0]
 8014eee:	68ba      	ldr	r2, [r7, #8]
 8014ef0:	429a      	cmp	r2, r3
 8014ef2:	d2f6      	bcs.n	8014ee2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8014ef4:	68fb      	ldr	r3, [r7, #12]
 8014ef6:	685a      	ldr	r2, [r3, #4]
 8014ef8:	683b      	ldr	r3, [r7, #0]
 8014efa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8014efc:	683b      	ldr	r3, [r7, #0]
 8014efe:	685b      	ldr	r3, [r3, #4]
 8014f00:	683a      	ldr	r2, [r7, #0]
 8014f02:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8014f04:	683b      	ldr	r3, [r7, #0]
 8014f06:	68fa      	ldr	r2, [r7, #12]
 8014f08:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8014f0a:	68fb      	ldr	r3, [r7, #12]
 8014f0c:	683a      	ldr	r2, [r7, #0]
 8014f0e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8014f10:	683b      	ldr	r3, [r7, #0]
 8014f12:	687a      	ldr	r2, [r7, #4]
 8014f14:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8014f16:	687b      	ldr	r3, [r7, #4]
 8014f18:	681b      	ldr	r3, [r3, #0]
 8014f1a:	1c5a      	adds	r2, r3, #1
 8014f1c:	687b      	ldr	r3, [r7, #4]
 8014f1e:	601a      	str	r2, [r3, #0]
}
 8014f20:	bf00      	nop
 8014f22:	3714      	adds	r7, #20
 8014f24:	46bd      	mov	sp, r7
 8014f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f2a:	4770      	bx	lr

08014f2c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8014f2c:	b480      	push	{r7}
 8014f2e:	b085      	sub	sp, #20
 8014f30:	af00      	add	r7, sp, #0
 8014f32:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8014f34:	687b      	ldr	r3, [r7, #4]
 8014f36:	691b      	ldr	r3, [r3, #16]
 8014f38:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8014f3a:	687b      	ldr	r3, [r7, #4]
 8014f3c:	685b      	ldr	r3, [r3, #4]
 8014f3e:	687a      	ldr	r2, [r7, #4]
 8014f40:	6892      	ldr	r2, [r2, #8]
 8014f42:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8014f44:	687b      	ldr	r3, [r7, #4]
 8014f46:	689b      	ldr	r3, [r3, #8]
 8014f48:	687a      	ldr	r2, [r7, #4]
 8014f4a:	6852      	ldr	r2, [r2, #4]
 8014f4c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8014f4e:	68fb      	ldr	r3, [r7, #12]
 8014f50:	685b      	ldr	r3, [r3, #4]
 8014f52:	687a      	ldr	r2, [r7, #4]
 8014f54:	429a      	cmp	r2, r3
 8014f56:	d103      	bne.n	8014f60 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8014f58:	687b      	ldr	r3, [r7, #4]
 8014f5a:	689a      	ldr	r2, [r3, #8]
 8014f5c:	68fb      	ldr	r3, [r7, #12]
 8014f5e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8014f60:	687b      	ldr	r3, [r7, #4]
 8014f62:	2200      	movs	r2, #0
 8014f64:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8014f66:	68fb      	ldr	r3, [r7, #12]
 8014f68:	681b      	ldr	r3, [r3, #0]
 8014f6a:	1e5a      	subs	r2, r3, #1
 8014f6c:	68fb      	ldr	r3, [r7, #12]
 8014f6e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8014f70:	68fb      	ldr	r3, [r7, #12]
 8014f72:	681b      	ldr	r3, [r3, #0]
}
 8014f74:	4618      	mov	r0, r3
 8014f76:	3714      	adds	r7, #20
 8014f78:	46bd      	mov	sp, r7
 8014f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f7e:	4770      	bx	lr

08014f80 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8014f80:	b480      	push	{r7}
 8014f82:	b085      	sub	sp, #20
 8014f84:	af00      	add	r7, sp, #0
 8014f86:	60f8      	str	r0, [r7, #12]
 8014f88:	60b9      	str	r1, [r7, #8]
 8014f8a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8014f8c:	68fb      	ldr	r3, [r7, #12]
 8014f8e:	3b04      	subs	r3, #4
 8014f90:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8014f92:	68fb      	ldr	r3, [r7, #12]
 8014f94:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8014f98:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8014f9a:	68fb      	ldr	r3, [r7, #12]
 8014f9c:	3b04      	subs	r3, #4
 8014f9e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8014fa0:	68bb      	ldr	r3, [r7, #8]
 8014fa2:	f023 0201 	bic.w	r2, r3, #1
 8014fa6:	68fb      	ldr	r3, [r7, #12]
 8014fa8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8014faa:	68fb      	ldr	r3, [r7, #12]
 8014fac:	3b04      	subs	r3, #4
 8014fae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8014fb0:	4a0c      	ldr	r2, [pc, #48]	; (8014fe4 <pxPortInitialiseStack+0x64>)
 8014fb2:	68fb      	ldr	r3, [r7, #12]
 8014fb4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8014fb6:	68fb      	ldr	r3, [r7, #12]
 8014fb8:	3b14      	subs	r3, #20
 8014fba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8014fbc:	687a      	ldr	r2, [r7, #4]
 8014fbe:	68fb      	ldr	r3, [r7, #12]
 8014fc0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8014fc2:	68fb      	ldr	r3, [r7, #12]
 8014fc4:	3b04      	subs	r3, #4
 8014fc6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8014fc8:	68fb      	ldr	r3, [r7, #12]
 8014fca:	f06f 0202 	mvn.w	r2, #2
 8014fce:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8014fd0:	68fb      	ldr	r3, [r7, #12]
 8014fd2:	3b20      	subs	r3, #32
 8014fd4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8014fd6:	68fb      	ldr	r3, [r7, #12]
}
 8014fd8:	4618      	mov	r0, r3
 8014fda:	3714      	adds	r7, #20
 8014fdc:	46bd      	mov	sp, r7
 8014fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014fe2:	4770      	bx	lr
 8014fe4:	08014fe9 	.word	0x08014fe9

08014fe8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8014fe8:	b480      	push	{r7}
 8014fea:	b085      	sub	sp, #20
 8014fec:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8014fee:	2300      	movs	r3, #0
 8014ff0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8014ff2:	4b12      	ldr	r3, [pc, #72]	; (801503c <prvTaskExitError+0x54>)
 8014ff4:	681b      	ldr	r3, [r3, #0]
 8014ff6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014ffa:	d00a      	beq.n	8015012 <prvTaskExitError+0x2a>
	__asm volatile
 8014ffc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015000:	f383 8811 	msr	BASEPRI, r3
 8015004:	f3bf 8f6f 	isb	sy
 8015008:	f3bf 8f4f 	dsb	sy
 801500c:	60fb      	str	r3, [r7, #12]
}
 801500e:	bf00      	nop
 8015010:	e7fe      	b.n	8015010 <prvTaskExitError+0x28>
	__asm volatile
 8015012:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015016:	f383 8811 	msr	BASEPRI, r3
 801501a:	f3bf 8f6f 	isb	sy
 801501e:	f3bf 8f4f 	dsb	sy
 8015022:	60bb      	str	r3, [r7, #8]
}
 8015024:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8015026:	bf00      	nop
 8015028:	687b      	ldr	r3, [r7, #4]
 801502a:	2b00      	cmp	r3, #0
 801502c:	d0fc      	beq.n	8015028 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 801502e:	bf00      	nop
 8015030:	bf00      	nop
 8015032:	3714      	adds	r7, #20
 8015034:	46bd      	mov	sp, r7
 8015036:	f85d 7b04 	ldr.w	r7, [sp], #4
 801503a:	4770      	bx	lr
 801503c:	2400004c 	.word	0x2400004c

08015040 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8015040:	4b07      	ldr	r3, [pc, #28]	; (8015060 <pxCurrentTCBConst2>)
 8015042:	6819      	ldr	r1, [r3, #0]
 8015044:	6808      	ldr	r0, [r1, #0]
 8015046:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801504a:	f380 8809 	msr	PSP, r0
 801504e:	f3bf 8f6f 	isb	sy
 8015052:	f04f 0000 	mov.w	r0, #0
 8015056:	f380 8811 	msr	BASEPRI, r0
 801505a:	4770      	bx	lr
 801505c:	f3af 8000 	nop.w

08015060 <pxCurrentTCBConst2>:
 8015060:	2400c284 	.word	0x2400c284
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8015064:	bf00      	nop
 8015066:	bf00      	nop

08015068 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8015068:	4808      	ldr	r0, [pc, #32]	; (801508c <prvPortStartFirstTask+0x24>)
 801506a:	6800      	ldr	r0, [r0, #0]
 801506c:	6800      	ldr	r0, [r0, #0]
 801506e:	f380 8808 	msr	MSP, r0
 8015072:	f04f 0000 	mov.w	r0, #0
 8015076:	f380 8814 	msr	CONTROL, r0
 801507a:	b662      	cpsie	i
 801507c:	b661      	cpsie	f
 801507e:	f3bf 8f4f 	dsb	sy
 8015082:	f3bf 8f6f 	isb	sy
 8015086:	df00      	svc	0
 8015088:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801508a:	bf00      	nop
 801508c:	e000ed08 	.word	0xe000ed08

08015090 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8015090:	b580      	push	{r7, lr}
 8015092:	b086      	sub	sp, #24
 8015094:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8015096:	4b46      	ldr	r3, [pc, #280]	; (80151b0 <xPortStartScheduler+0x120>)
 8015098:	681b      	ldr	r3, [r3, #0]
 801509a:	4a46      	ldr	r2, [pc, #280]	; (80151b4 <xPortStartScheduler+0x124>)
 801509c:	4293      	cmp	r3, r2
 801509e:	d10a      	bne.n	80150b6 <xPortStartScheduler+0x26>
	__asm volatile
 80150a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80150a4:	f383 8811 	msr	BASEPRI, r3
 80150a8:	f3bf 8f6f 	isb	sy
 80150ac:	f3bf 8f4f 	dsb	sy
 80150b0:	613b      	str	r3, [r7, #16]
}
 80150b2:	bf00      	nop
 80150b4:	e7fe      	b.n	80150b4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80150b6:	4b3e      	ldr	r3, [pc, #248]	; (80151b0 <xPortStartScheduler+0x120>)
 80150b8:	681b      	ldr	r3, [r3, #0]
 80150ba:	4a3f      	ldr	r2, [pc, #252]	; (80151b8 <xPortStartScheduler+0x128>)
 80150bc:	4293      	cmp	r3, r2
 80150be:	d10a      	bne.n	80150d6 <xPortStartScheduler+0x46>
	__asm volatile
 80150c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80150c4:	f383 8811 	msr	BASEPRI, r3
 80150c8:	f3bf 8f6f 	isb	sy
 80150cc:	f3bf 8f4f 	dsb	sy
 80150d0:	60fb      	str	r3, [r7, #12]
}
 80150d2:	bf00      	nop
 80150d4:	e7fe      	b.n	80150d4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80150d6:	4b39      	ldr	r3, [pc, #228]	; (80151bc <xPortStartScheduler+0x12c>)
 80150d8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80150da:	697b      	ldr	r3, [r7, #20]
 80150dc:	781b      	ldrb	r3, [r3, #0]
 80150de:	b2db      	uxtb	r3, r3
 80150e0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80150e2:	697b      	ldr	r3, [r7, #20]
 80150e4:	22ff      	movs	r2, #255	; 0xff
 80150e6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80150e8:	697b      	ldr	r3, [r7, #20]
 80150ea:	781b      	ldrb	r3, [r3, #0]
 80150ec:	b2db      	uxtb	r3, r3
 80150ee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80150f0:	78fb      	ldrb	r3, [r7, #3]
 80150f2:	b2db      	uxtb	r3, r3
 80150f4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80150f8:	b2da      	uxtb	r2, r3
 80150fa:	4b31      	ldr	r3, [pc, #196]	; (80151c0 <xPortStartScheduler+0x130>)
 80150fc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80150fe:	4b31      	ldr	r3, [pc, #196]	; (80151c4 <xPortStartScheduler+0x134>)
 8015100:	2207      	movs	r2, #7
 8015102:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8015104:	e009      	b.n	801511a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8015106:	4b2f      	ldr	r3, [pc, #188]	; (80151c4 <xPortStartScheduler+0x134>)
 8015108:	681b      	ldr	r3, [r3, #0]
 801510a:	3b01      	subs	r3, #1
 801510c:	4a2d      	ldr	r2, [pc, #180]	; (80151c4 <xPortStartScheduler+0x134>)
 801510e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8015110:	78fb      	ldrb	r3, [r7, #3]
 8015112:	b2db      	uxtb	r3, r3
 8015114:	005b      	lsls	r3, r3, #1
 8015116:	b2db      	uxtb	r3, r3
 8015118:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801511a:	78fb      	ldrb	r3, [r7, #3]
 801511c:	b2db      	uxtb	r3, r3
 801511e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8015122:	2b80      	cmp	r3, #128	; 0x80
 8015124:	d0ef      	beq.n	8015106 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8015126:	4b27      	ldr	r3, [pc, #156]	; (80151c4 <xPortStartScheduler+0x134>)
 8015128:	681b      	ldr	r3, [r3, #0]
 801512a:	f1c3 0307 	rsb	r3, r3, #7
 801512e:	2b04      	cmp	r3, #4
 8015130:	d00a      	beq.n	8015148 <xPortStartScheduler+0xb8>
	__asm volatile
 8015132:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015136:	f383 8811 	msr	BASEPRI, r3
 801513a:	f3bf 8f6f 	isb	sy
 801513e:	f3bf 8f4f 	dsb	sy
 8015142:	60bb      	str	r3, [r7, #8]
}
 8015144:	bf00      	nop
 8015146:	e7fe      	b.n	8015146 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8015148:	4b1e      	ldr	r3, [pc, #120]	; (80151c4 <xPortStartScheduler+0x134>)
 801514a:	681b      	ldr	r3, [r3, #0]
 801514c:	021b      	lsls	r3, r3, #8
 801514e:	4a1d      	ldr	r2, [pc, #116]	; (80151c4 <xPortStartScheduler+0x134>)
 8015150:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8015152:	4b1c      	ldr	r3, [pc, #112]	; (80151c4 <xPortStartScheduler+0x134>)
 8015154:	681b      	ldr	r3, [r3, #0]
 8015156:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801515a:	4a1a      	ldr	r2, [pc, #104]	; (80151c4 <xPortStartScheduler+0x134>)
 801515c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 801515e:	687b      	ldr	r3, [r7, #4]
 8015160:	b2da      	uxtb	r2, r3
 8015162:	697b      	ldr	r3, [r7, #20]
 8015164:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8015166:	4b18      	ldr	r3, [pc, #96]	; (80151c8 <xPortStartScheduler+0x138>)
 8015168:	681b      	ldr	r3, [r3, #0]
 801516a:	4a17      	ldr	r2, [pc, #92]	; (80151c8 <xPortStartScheduler+0x138>)
 801516c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8015170:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8015172:	4b15      	ldr	r3, [pc, #84]	; (80151c8 <xPortStartScheduler+0x138>)
 8015174:	681b      	ldr	r3, [r3, #0]
 8015176:	4a14      	ldr	r2, [pc, #80]	; (80151c8 <xPortStartScheduler+0x138>)
 8015178:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 801517c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 801517e:	f000 f8dd 	bl	801533c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8015182:	4b12      	ldr	r3, [pc, #72]	; (80151cc <xPortStartScheduler+0x13c>)
 8015184:	2200      	movs	r2, #0
 8015186:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8015188:	f000 f8fc 	bl	8015384 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801518c:	4b10      	ldr	r3, [pc, #64]	; (80151d0 <xPortStartScheduler+0x140>)
 801518e:	681b      	ldr	r3, [r3, #0]
 8015190:	4a0f      	ldr	r2, [pc, #60]	; (80151d0 <xPortStartScheduler+0x140>)
 8015192:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8015196:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8015198:	f7ff ff66 	bl	8015068 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 801519c:	f001 fcfc 	bl	8016b98 <vTaskSwitchContext>
	prvTaskExitError();
 80151a0:	f7ff ff22 	bl	8014fe8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80151a4:	2300      	movs	r3, #0
}
 80151a6:	4618      	mov	r0, r3
 80151a8:	3718      	adds	r7, #24
 80151aa:	46bd      	mov	sp, r7
 80151ac:	bd80      	pop	{r7, pc}
 80151ae:	bf00      	nop
 80151b0:	e000ed00 	.word	0xe000ed00
 80151b4:	410fc271 	.word	0x410fc271
 80151b8:	410fc270 	.word	0x410fc270
 80151bc:	e000e400 	.word	0xe000e400
 80151c0:	2400c27c 	.word	0x2400c27c
 80151c4:	2400c280 	.word	0x2400c280
 80151c8:	e000ed20 	.word	0xe000ed20
 80151cc:	2400004c 	.word	0x2400004c
 80151d0:	e000ef34 	.word	0xe000ef34

080151d4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80151d4:	b480      	push	{r7}
 80151d6:	b083      	sub	sp, #12
 80151d8:	af00      	add	r7, sp, #0
	__asm volatile
 80151da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80151de:	f383 8811 	msr	BASEPRI, r3
 80151e2:	f3bf 8f6f 	isb	sy
 80151e6:	f3bf 8f4f 	dsb	sy
 80151ea:	607b      	str	r3, [r7, #4]
}
 80151ec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80151ee:	4b0f      	ldr	r3, [pc, #60]	; (801522c <vPortEnterCritical+0x58>)
 80151f0:	681b      	ldr	r3, [r3, #0]
 80151f2:	3301      	adds	r3, #1
 80151f4:	4a0d      	ldr	r2, [pc, #52]	; (801522c <vPortEnterCritical+0x58>)
 80151f6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80151f8:	4b0c      	ldr	r3, [pc, #48]	; (801522c <vPortEnterCritical+0x58>)
 80151fa:	681b      	ldr	r3, [r3, #0]
 80151fc:	2b01      	cmp	r3, #1
 80151fe:	d10f      	bne.n	8015220 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8015200:	4b0b      	ldr	r3, [pc, #44]	; (8015230 <vPortEnterCritical+0x5c>)
 8015202:	681b      	ldr	r3, [r3, #0]
 8015204:	b2db      	uxtb	r3, r3
 8015206:	2b00      	cmp	r3, #0
 8015208:	d00a      	beq.n	8015220 <vPortEnterCritical+0x4c>
	__asm volatile
 801520a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801520e:	f383 8811 	msr	BASEPRI, r3
 8015212:	f3bf 8f6f 	isb	sy
 8015216:	f3bf 8f4f 	dsb	sy
 801521a:	603b      	str	r3, [r7, #0]
}
 801521c:	bf00      	nop
 801521e:	e7fe      	b.n	801521e <vPortEnterCritical+0x4a>
	}
}
 8015220:	bf00      	nop
 8015222:	370c      	adds	r7, #12
 8015224:	46bd      	mov	sp, r7
 8015226:	f85d 7b04 	ldr.w	r7, [sp], #4
 801522a:	4770      	bx	lr
 801522c:	2400004c 	.word	0x2400004c
 8015230:	e000ed04 	.word	0xe000ed04

08015234 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8015234:	b480      	push	{r7}
 8015236:	b083      	sub	sp, #12
 8015238:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801523a:	4b12      	ldr	r3, [pc, #72]	; (8015284 <vPortExitCritical+0x50>)
 801523c:	681b      	ldr	r3, [r3, #0]
 801523e:	2b00      	cmp	r3, #0
 8015240:	d10a      	bne.n	8015258 <vPortExitCritical+0x24>
	__asm volatile
 8015242:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015246:	f383 8811 	msr	BASEPRI, r3
 801524a:	f3bf 8f6f 	isb	sy
 801524e:	f3bf 8f4f 	dsb	sy
 8015252:	607b      	str	r3, [r7, #4]
}
 8015254:	bf00      	nop
 8015256:	e7fe      	b.n	8015256 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8015258:	4b0a      	ldr	r3, [pc, #40]	; (8015284 <vPortExitCritical+0x50>)
 801525a:	681b      	ldr	r3, [r3, #0]
 801525c:	3b01      	subs	r3, #1
 801525e:	4a09      	ldr	r2, [pc, #36]	; (8015284 <vPortExitCritical+0x50>)
 8015260:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8015262:	4b08      	ldr	r3, [pc, #32]	; (8015284 <vPortExitCritical+0x50>)
 8015264:	681b      	ldr	r3, [r3, #0]
 8015266:	2b00      	cmp	r3, #0
 8015268:	d105      	bne.n	8015276 <vPortExitCritical+0x42>
 801526a:	2300      	movs	r3, #0
 801526c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 801526e:	683b      	ldr	r3, [r7, #0]
 8015270:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8015274:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8015276:	bf00      	nop
 8015278:	370c      	adds	r7, #12
 801527a:	46bd      	mov	sp, r7
 801527c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015280:	4770      	bx	lr
 8015282:	bf00      	nop
 8015284:	2400004c 	.word	0x2400004c
	...

08015290 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8015290:	f3ef 8009 	mrs	r0, PSP
 8015294:	f3bf 8f6f 	isb	sy
 8015298:	4b15      	ldr	r3, [pc, #84]	; (80152f0 <pxCurrentTCBConst>)
 801529a:	681a      	ldr	r2, [r3, #0]
 801529c:	f01e 0f10 	tst.w	lr, #16
 80152a0:	bf08      	it	eq
 80152a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80152a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80152aa:	6010      	str	r0, [r2, #0]
 80152ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80152b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80152b4:	f380 8811 	msr	BASEPRI, r0
 80152b8:	f3bf 8f4f 	dsb	sy
 80152bc:	f3bf 8f6f 	isb	sy
 80152c0:	f001 fc6a 	bl	8016b98 <vTaskSwitchContext>
 80152c4:	f04f 0000 	mov.w	r0, #0
 80152c8:	f380 8811 	msr	BASEPRI, r0
 80152cc:	bc09      	pop	{r0, r3}
 80152ce:	6819      	ldr	r1, [r3, #0]
 80152d0:	6808      	ldr	r0, [r1, #0]
 80152d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80152d6:	f01e 0f10 	tst.w	lr, #16
 80152da:	bf08      	it	eq
 80152dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80152e0:	f380 8809 	msr	PSP, r0
 80152e4:	f3bf 8f6f 	isb	sy
 80152e8:	4770      	bx	lr
 80152ea:	bf00      	nop
 80152ec:	f3af 8000 	nop.w

080152f0 <pxCurrentTCBConst>:
 80152f0:	2400c284 	.word	0x2400c284
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80152f4:	bf00      	nop
 80152f6:	bf00      	nop

080152f8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80152f8:	b580      	push	{r7, lr}
 80152fa:	b082      	sub	sp, #8
 80152fc:	af00      	add	r7, sp, #0
	__asm volatile
 80152fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015302:	f383 8811 	msr	BASEPRI, r3
 8015306:	f3bf 8f6f 	isb	sy
 801530a:	f3bf 8f4f 	dsb	sy
 801530e:	607b      	str	r3, [r7, #4]
}
 8015310:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8015312:	f001 fb87 	bl	8016a24 <xTaskIncrementTick>
 8015316:	4603      	mov	r3, r0
 8015318:	2b00      	cmp	r3, #0
 801531a:	d003      	beq.n	8015324 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801531c:	4b06      	ldr	r3, [pc, #24]	; (8015338 <xPortSysTickHandler+0x40>)
 801531e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015322:	601a      	str	r2, [r3, #0]
 8015324:	2300      	movs	r3, #0
 8015326:	603b      	str	r3, [r7, #0]
	__asm volatile
 8015328:	683b      	ldr	r3, [r7, #0]
 801532a:	f383 8811 	msr	BASEPRI, r3
}
 801532e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8015330:	bf00      	nop
 8015332:	3708      	adds	r7, #8
 8015334:	46bd      	mov	sp, r7
 8015336:	bd80      	pop	{r7, pc}
 8015338:	e000ed04 	.word	0xe000ed04

0801533c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801533c:	b480      	push	{r7}
 801533e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8015340:	4b0b      	ldr	r3, [pc, #44]	; (8015370 <vPortSetupTimerInterrupt+0x34>)
 8015342:	2200      	movs	r2, #0
 8015344:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8015346:	4b0b      	ldr	r3, [pc, #44]	; (8015374 <vPortSetupTimerInterrupt+0x38>)
 8015348:	2200      	movs	r2, #0
 801534a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801534c:	4b0a      	ldr	r3, [pc, #40]	; (8015378 <vPortSetupTimerInterrupt+0x3c>)
 801534e:	681b      	ldr	r3, [r3, #0]
 8015350:	4a0a      	ldr	r2, [pc, #40]	; (801537c <vPortSetupTimerInterrupt+0x40>)
 8015352:	fba2 2303 	umull	r2, r3, r2, r3
 8015356:	099b      	lsrs	r3, r3, #6
 8015358:	4a09      	ldr	r2, [pc, #36]	; (8015380 <vPortSetupTimerInterrupt+0x44>)
 801535a:	3b01      	subs	r3, #1
 801535c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801535e:	4b04      	ldr	r3, [pc, #16]	; (8015370 <vPortSetupTimerInterrupt+0x34>)
 8015360:	2207      	movs	r2, #7
 8015362:	601a      	str	r2, [r3, #0]
}
 8015364:	bf00      	nop
 8015366:	46bd      	mov	sp, r7
 8015368:	f85d 7b04 	ldr.w	r7, [sp], #4
 801536c:	4770      	bx	lr
 801536e:	bf00      	nop
 8015370:	e000e010 	.word	0xe000e010
 8015374:	e000e018 	.word	0xe000e018
 8015378:	2400003c 	.word	0x2400003c
 801537c:	10624dd3 	.word	0x10624dd3
 8015380:	e000e014 	.word	0xe000e014

08015384 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8015384:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8015394 <vPortEnableVFP+0x10>
 8015388:	6801      	ldr	r1, [r0, #0]
 801538a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801538e:	6001      	str	r1, [r0, #0]
 8015390:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8015392:	bf00      	nop
 8015394:	e000ed88 	.word	0xe000ed88

08015398 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8015398:	b480      	push	{r7}
 801539a:	b085      	sub	sp, #20
 801539c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801539e:	f3ef 8305 	mrs	r3, IPSR
 80153a2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80153a4:	68fb      	ldr	r3, [r7, #12]
 80153a6:	2b0f      	cmp	r3, #15
 80153a8:	d914      	bls.n	80153d4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80153aa:	4a17      	ldr	r2, [pc, #92]	; (8015408 <vPortValidateInterruptPriority+0x70>)
 80153ac:	68fb      	ldr	r3, [r7, #12]
 80153ae:	4413      	add	r3, r2
 80153b0:	781b      	ldrb	r3, [r3, #0]
 80153b2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80153b4:	4b15      	ldr	r3, [pc, #84]	; (801540c <vPortValidateInterruptPriority+0x74>)
 80153b6:	781b      	ldrb	r3, [r3, #0]
 80153b8:	7afa      	ldrb	r2, [r7, #11]
 80153ba:	429a      	cmp	r2, r3
 80153bc:	d20a      	bcs.n	80153d4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80153be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80153c2:	f383 8811 	msr	BASEPRI, r3
 80153c6:	f3bf 8f6f 	isb	sy
 80153ca:	f3bf 8f4f 	dsb	sy
 80153ce:	607b      	str	r3, [r7, #4]
}
 80153d0:	bf00      	nop
 80153d2:	e7fe      	b.n	80153d2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80153d4:	4b0e      	ldr	r3, [pc, #56]	; (8015410 <vPortValidateInterruptPriority+0x78>)
 80153d6:	681b      	ldr	r3, [r3, #0]
 80153d8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80153dc:	4b0d      	ldr	r3, [pc, #52]	; (8015414 <vPortValidateInterruptPriority+0x7c>)
 80153de:	681b      	ldr	r3, [r3, #0]
 80153e0:	429a      	cmp	r2, r3
 80153e2:	d90a      	bls.n	80153fa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80153e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80153e8:	f383 8811 	msr	BASEPRI, r3
 80153ec:	f3bf 8f6f 	isb	sy
 80153f0:	f3bf 8f4f 	dsb	sy
 80153f4:	603b      	str	r3, [r7, #0]
}
 80153f6:	bf00      	nop
 80153f8:	e7fe      	b.n	80153f8 <vPortValidateInterruptPriority+0x60>
	}
 80153fa:	bf00      	nop
 80153fc:	3714      	adds	r7, #20
 80153fe:	46bd      	mov	sp, r7
 8015400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015404:	4770      	bx	lr
 8015406:	bf00      	nop
 8015408:	e000e3f0 	.word	0xe000e3f0
 801540c:	2400c27c 	.word	0x2400c27c
 8015410:	e000ed0c 	.word	0xe000ed0c
 8015414:	2400c280 	.word	0x2400c280

08015418 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8015418:	b580      	push	{r7, lr}
 801541a:	b084      	sub	sp, #16
 801541c:	af00      	add	r7, sp, #0
 801541e:	6078      	str	r0, [r7, #4]
 8015420:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8015422:	687b      	ldr	r3, [r7, #4]
 8015424:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8015426:	68fb      	ldr	r3, [r7, #12]
 8015428:	2b00      	cmp	r3, #0
 801542a:	d10a      	bne.n	8015442 <xQueueGenericReset+0x2a>
	__asm volatile
 801542c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015430:	f383 8811 	msr	BASEPRI, r3
 8015434:	f3bf 8f6f 	isb	sy
 8015438:	f3bf 8f4f 	dsb	sy
 801543c:	60bb      	str	r3, [r7, #8]
}
 801543e:	bf00      	nop
 8015440:	e7fe      	b.n	8015440 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8015442:	f7ff fec7 	bl	80151d4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8015446:	68fb      	ldr	r3, [r7, #12]
 8015448:	681a      	ldr	r2, [r3, #0]
 801544a:	68fb      	ldr	r3, [r7, #12]
 801544c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801544e:	68f9      	ldr	r1, [r7, #12]
 8015450:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8015452:	fb01 f303 	mul.w	r3, r1, r3
 8015456:	441a      	add	r2, r3
 8015458:	68fb      	ldr	r3, [r7, #12]
 801545a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 801545c:	68fb      	ldr	r3, [r7, #12]
 801545e:	2200      	movs	r2, #0
 8015460:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8015462:	68fb      	ldr	r3, [r7, #12]
 8015464:	681a      	ldr	r2, [r3, #0]
 8015466:	68fb      	ldr	r3, [r7, #12]
 8015468:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801546a:	68fb      	ldr	r3, [r7, #12]
 801546c:	681a      	ldr	r2, [r3, #0]
 801546e:	68fb      	ldr	r3, [r7, #12]
 8015470:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015472:	3b01      	subs	r3, #1
 8015474:	68f9      	ldr	r1, [r7, #12]
 8015476:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8015478:	fb01 f303 	mul.w	r3, r1, r3
 801547c:	441a      	add	r2, r3
 801547e:	68fb      	ldr	r3, [r7, #12]
 8015480:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8015482:	68fb      	ldr	r3, [r7, #12]
 8015484:	22ff      	movs	r2, #255	; 0xff
 8015486:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 801548a:	68fb      	ldr	r3, [r7, #12]
 801548c:	22ff      	movs	r2, #255	; 0xff
 801548e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8015492:	683b      	ldr	r3, [r7, #0]
 8015494:	2b00      	cmp	r3, #0
 8015496:	d114      	bne.n	80154c2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8015498:	68fb      	ldr	r3, [r7, #12]
 801549a:	691b      	ldr	r3, [r3, #16]
 801549c:	2b00      	cmp	r3, #0
 801549e:	d01a      	beq.n	80154d6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80154a0:	68fb      	ldr	r3, [r7, #12]
 80154a2:	3310      	adds	r3, #16
 80154a4:	4618      	mov	r0, r3
 80154a6:	f001 fc25 	bl	8016cf4 <xTaskRemoveFromEventList>
 80154aa:	4603      	mov	r3, r0
 80154ac:	2b00      	cmp	r3, #0
 80154ae:	d012      	beq.n	80154d6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80154b0:	4b0c      	ldr	r3, [pc, #48]	; (80154e4 <xQueueGenericReset+0xcc>)
 80154b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80154b6:	601a      	str	r2, [r3, #0]
 80154b8:	f3bf 8f4f 	dsb	sy
 80154bc:	f3bf 8f6f 	isb	sy
 80154c0:	e009      	b.n	80154d6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80154c2:	68fb      	ldr	r3, [r7, #12]
 80154c4:	3310      	adds	r3, #16
 80154c6:	4618      	mov	r0, r3
 80154c8:	f7ff fca6 	bl	8014e18 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80154cc:	68fb      	ldr	r3, [r7, #12]
 80154ce:	3324      	adds	r3, #36	; 0x24
 80154d0:	4618      	mov	r0, r3
 80154d2:	f7ff fca1 	bl	8014e18 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80154d6:	f7ff fead 	bl	8015234 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80154da:	2301      	movs	r3, #1
}
 80154dc:	4618      	mov	r0, r3
 80154de:	3710      	adds	r7, #16
 80154e0:	46bd      	mov	sp, r7
 80154e2:	bd80      	pop	{r7, pc}
 80154e4:	e000ed04 	.word	0xe000ed04

080154e8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80154e8:	b580      	push	{r7, lr}
 80154ea:	b08e      	sub	sp, #56	; 0x38
 80154ec:	af02      	add	r7, sp, #8
 80154ee:	60f8      	str	r0, [r7, #12]
 80154f0:	60b9      	str	r1, [r7, #8]
 80154f2:	607a      	str	r2, [r7, #4]
 80154f4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80154f6:	68fb      	ldr	r3, [r7, #12]
 80154f8:	2b00      	cmp	r3, #0
 80154fa:	d10a      	bne.n	8015512 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80154fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015500:	f383 8811 	msr	BASEPRI, r3
 8015504:	f3bf 8f6f 	isb	sy
 8015508:	f3bf 8f4f 	dsb	sy
 801550c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 801550e:	bf00      	nop
 8015510:	e7fe      	b.n	8015510 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8015512:	683b      	ldr	r3, [r7, #0]
 8015514:	2b00      	cmp	r3, #0
 8015516:	d10a      	bne.n	801552e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8015518:	f04f 0350 	mov.w	r3, #80	; 0x50
 801551c:	f383 8811 	msr	BASEPRI, r3
 8015520:	f3bf 8f6f 	isb	sy
 8015524:	f3bf 8f4f 	dsb	sy
 8015528:	627b      	str	r3, [r7, #36]	; 0x24
}
 801552a:	bf00      	nop
 801552c:	e7fe      	b.n	801552c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 801552e:	687b      	ldr	r3, [r7, #4]
 8015530:	2b00      	cmp	r3, #0
 8015532:	d002      	beq.n	801553a <xQueueGenericCreateStatic+0x52>
 8015534:	68bb      	ldr	r3, [r7, #8]
 8015536:	2b00      	cmp	r3, #0
 8015538:	d001      	beq.n	801553e <xQueueGenericCreateStatic+0x56>
 801553a:	2301      	movs	r3, #1
 801553c:	e000      	b.n	8015540 <xQueueGenericCreateStatic+0x58>
 801553e:	2300      	movs	r3, #0
 8015540:	2b00      	cmp	r3, #0
 8015542:	d10a      	bne.n	801555a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8015544:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015548:	f383 8811 	msr	BASEPRI, r3
 801554c:	f3bf 8f6f 	isb	sy
 8015550:	f3bf 8f4f 	dsb	sy
 8015554:	623b      	str	r3, [r7, #32]
}
 8015556:	bf00      	nop
 8015558:	e7fe      	b.n	8015558 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 801555a:	687b      	ldr	r3, [r7, #4]
 801555c:	2b00      	cmp	r3, #0
 801555e:	d102      	bne.n	8015566 <xQueueGenericCreateStatic+0x7e>
 8015560:	68bb      	ldr	r3, [r7, #8]
 8015562:	2b00      	cmp	r3, #0
 8015564:	d101      	bne.n	801556a <xQueueGenericCreateStatic+0x82>
 8015566:	2301      	movs	r3, #1
 8015568:	e000      	b.n	801556c <xQueueGenericCreateStatic+0x84>
 801556a:	2300      	movs	r3, #0
 801556c:	2b00      	cmp	r3, #0
 801556e:	d10a      	bne.n	8015586 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8015570:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015574:	f383 8811 	msr	BASEPRI, r3
 8015578:	f3bf 8f6f 	isb	sy
 801557c:	f3bf 8f4f 	dsb	sy
 8015580:	61fb      	str	r3, [r7, #28]
}
 8015582:	bf00      	nop
 8015584:	e7fe      	b.n	8015584 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8015586:	2350      	movs	r3, #80	; 0x50
 8015588:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 801558a:	697b      	ldr	r3, [r7, #20]
 801558c:	2b50      	cmp	r3, #80	; 0x50
 801558e:	d00a      	beq.n	80155a6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8015590:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015594:	f383 8811 	msr	BASEPRI, r3
 8015598:	f3bf 8f6f 	isb	sy
 801559c:	f3bf 8f4f 	dsb	sy
 80155a0:	61bb      	str	r3, [r7, #24]
}
 80155a2:	bf00      	nop
 80155a4:	e7fe      	b.n	80155a4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80155a6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80155a8:	683b      	ldr	r3, [r7, #0]
 80155aa:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80155ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80155ae:	2b00      	cmp	r3, #0
 80155b0:	d00d      	beq.n	80155ce <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80155b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80155b4:	2201      	movs	r2, #1
 80155b6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80155ba:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80155be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80155c0:	9300      	str	r3, [sp, #0]
 80155c2:	4613      	mov	r3, r2
 80155c4:	687a      	ldr	r2, [r7, #4]
 80155c6:	68b9      	ldr	r1, [r7, #8]
 80155c8:	68f8      	ldr	r0, [r7, #12]
 80155ca:	f000 f83f 	bl	801564c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80155ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80155d0:	4618      	mov	r0, r3
 80155d2:	3730      	adds	r7, #48	; 0x30
 80155d4:	46bd      	mov	sp, r7
 80155d6:	bd80      	pop	{r7, pc}

080155d8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80155d8:	b580      	push	{r7, lr}
 80155da:	b08a      	sub	sp, #40	; 0x28
 80155dc:	af02      	add	r7, sp, #8
 80155de:	60f8      	str	r0, [r7, #12]
 80155e0:	60b9      	str	r1, [r7, #8]
 80155e2:	4613      	mov	r3, r2
 80155e4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80155e6:	68fb      	ldr	r3, [r7, #12]
 80155e8:	2b00      	cmp	r3, #0
 80155ea:	d10a      	bne.n	8015602 <xQueueGenericCreate+0x2a>
	__asm volatile
 80155ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80155f0:	f383 8811 	msr	BASEPRI, r3
 80155f4:	f3bf 8f6f 	isb	sy
 80155f8:	f3bf 8f4f 	dsb	sy
 80155fc:	613b      	str	r3, [r7, #16]
}
 80155fe:	bf00      	nop
 8015600:	e7fe      	b.n	8015600 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015602:	68fb      	ldr	r3, [r7, #12]
 8015604:	68ba      	ldr	r2, [r7, #8]
 8015606:	fb02 f303 	mul.w	r3, r2, r3
 801560a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 801560c:	69fb      	ldr	r3, [r7, #28]
 801560e:	3350      	adds	r3, #80	; 0x50
 8015610:	4618      	mov	r0, r3
 8015612:	f7ff fa17 	bl	8014a44 <pvPortMalloc>
 8015616:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8015618:	69bb      	ldr	r3, [r7, #24]
 801561a:	2b00      	cmp	r3, #0
 801561c:	d011      	beq.n	8015642 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 801561e:	69bb      	ldr	r3, [r7, #24]
 8015620:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8015622:	697b      	ldr	r3, [r7, #20]
 8015624:	3350      	adds	r3, #80	; 0x50
 8015626:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8015628:	69bb      	ldr	r3, [r7, #24]
 801562a:	2200      	movs	r2, #0
 801562c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8015630:	79fa      	ldrb	r2, [r7, #7]
 8015632:	69bb      	ldr	r3, [r7, #24]
 8015634:	9300      	str	r3, [sp, #0]
 8015636:	4613      	mov	r3, r2
 8015638:	697a      	ldr	r2, [r7, #20]
 801563a:	68b9      	ldr	r1, [r7, #8]
 801563c:	68f8      	ldr	r0, [r7, #12]
 801563e:	f000 f805 	bl	801564c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8015642:	69bb      	ldr	r3, [r7, #24]
	}
 8015644:	4618      	mov	r0, r3
 8015646:	3720      	adds	r7, #32
 8015648:	46bd      	mov	sp, r7
 801564a:	bd80      	pop	{r7, pc}

0801564c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 801564c:	b580      	push	{r7, lr}
 801564e:	b084      	sub	sp, #16
 8015650:	af00      	add	r7, sp, #0
 8015652:	60f8      	str	r0, [r7, #12]
 8015654:	60b9      	str	r1, [r7, #8]
 8015656:	607a      	str	r2, [r7, #4]
 8015658:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 801565a:	68bb      	ldr	r3, [r7, #8]
 801565c:	2b00      	cmp	r3, #0
 801565e:	d103      	bne.n	8015668 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8015660:	69bb      	ldr	r3, [r7, #24]
 8015662:	69ba      	ldr	r2, [r7, #24]
 8015664:	601a      	str	r2, [r3, #0]
 8015666:	e002      	b.n	801566e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8015668:	69bb      	ldr	r3, [r7, #24]
 801566a:	687a      	ldr	r2, [r7, #4]
 801566c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 801566e:	69bb      	ldr	r3, [r7, #24]
 8015670:	68fa      	ldr	r2, [r7, #12]
 8015672:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8015674:	69bb      	ldr	r3, [r7, #24]
 8015676:	68ba      	ldr	r2, [r7, #8]
 8015678:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 801567a:	2101      	movs	r1, #1
 801567c:	69b8      	ldr	r0, [r7, #24]
 801567e:	f7ff fecb 	bl	8015418 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8015682:	69bb      	ldr	r3, [r7, #24]
 8015684:	78fa      	ldrb	r2, [r7, #3]
 8015686:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 801568a:	bf00      	nop
 801568c:	3710      	adds	r7, #16
 801568e:	46bd      	mov	sp, r7
 8015690:	bd80      	pop	{r7, pc}

08015692 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8015692:	b580      	push	{r7, lr}
 8015694:	b08a      	sub	sp, #40	; 0x28
 8015696:	af02      	add	r7, sp, #8
 8015698:	60f8      	str	r0, [r7, #12]
 801569a:	60b9      	str	r1, [r7, #8]
 801569c:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 801569e:	68fb      	ldr	r3, [r7, #12]
 80156a0:	2b00      	cmp	r3, #0
 80156a2:	d10a      	bne.n	80156ba <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 80156a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80156a8:	f383 8811 	msr	BASEPRI, r3
 80156ac:	f3bf 8f6f 	isb	sy
 80156b0:	f3bf 8f4f 	dsb	sy
 80156b4:	61bb      	str	r3, [r7, #24]
}
 80156b6:	bf00      	nop
 80156b8:	e7fe      	b.n	80156b8 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 80156ba:	68ba      	ldr	r2, [r7, #8]
 80156bc:	68fb      	ldr	r3, [r7, #12]
 80156be:	429a      	cmp	r2, r3
 80156c0:	d90a      	bls.n	80156d8 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 80156c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80156c6:	f383 8811 	msr	BASEPRI, r3
 80156ca:	f3bf 8f6f 	isb	sy
 80156ce:	f3bf 8f4f 	dsb	sy
 80156d2:	617b      	str	r3, [r7, #20]
}
 80156d4:	bf00      	nop
 80156d6:	e7fe      	b.n	80156d6 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80156d8:	2302      	movs	r3, #2
 80156da:	9300      	str	r3, [sp, #0]
 80156dc:	687b      	ldr	r3, [r7, #4]
 80156de:	2200      	movs	r2, #0
 80156e0:	2100      	movs	r1, #0
 80156e2:	68f8      	ldr	r0, [r7, #12]
 80156e4:	f7ff ff00 	bl	80154e8 <xQueueGenericCreateStatic>
 80156e8:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 80156ea:	69fb      	ldr	r3, [r7, #28]
 80156ec:	2b00      	cmp	r3, #0
 80156ee:	d002      	beq.n	80156f6 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80156f0:	69fb      	ldr	r3, [r7, #28]
 80156f2:	68ba      	ldr	r2, [r7, #8]
 80156f4:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80156f6:	69fb      	ldr	r3, [r7, #28]
	}
 80156f8:	4618      	mov	r0, r3
 80156fa:	3720      	adds	r7, #32
 80156fc:	46bd      	mov	sp, r7
 80156fe:	bd80      	pop	{r7, pc}

08015700 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8015700:	b580      	push	{r7, lr}
 8015702:	b086      	sub	sp, #24
 8015704:	af00      	add	r7, sp, #0
 8015706:	6078      	str	r0, [r7, #4]
 8015708:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 801570a:	687b      	ldr	r3, [r7, #4]
 801570c:	2b00      	cmp	r3, #0
 801570e:	d10a      	bne.n	8015726 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8015710:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015714:	f383 8811 	msr	BASEPRI, r3
 8015718:	f3bf 8f6f 	isb	sy
 801571c:	f3bf 8f4f 	dsb	sy
 8015720:	613b      	str	r3, [r7, #16]
}
 8015722:	bf00      	nop
 8015724:	e7fe      	b.n	8015724 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8015726:	683a      	ldr	r2, [r7, #0]
 8015728:	687b      	ldr	r3, [r7, #4]
 801572a:	429a      	cmp	r2, r3
 801572c:	d90a      	bls.n	8015744 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 801572e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015732:	f383 8811 	msr	BASEPRI, r3
 8015736:	f3bf 8f6f 	isb	sy
 801573a:	f3bf 8f4f 	dsb	sy
 801573e:	60fb      	str	r3, [r7, #12]
}
 8015740:	bf00      	nop
 8015742:	e7fe      	b.n	8015742 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8015744:	2202      	movs	r2, #2
 8015746:	2100      	movs	r1, #0
 8015748:	6878      	ldr	r0, [r7, #4]
 801574a:	f7ff ff45 	bl	80155d8 <xQueueGenericCreate>
 801574e:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8015750:	697b      	ldr	r3, [r7, #20]
 8015752:	2b00      	cmp	r3, #0
 8015754:	d002      	beq.n	801575c <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8015756:	697b      	ldr	r3, [r7, #20]
 8015758:	683a      	ldr	r2, [r7, #0]
 801575a:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 801575c:	697b      	ldr	r3, [r7, #20]
	}
 801575e:	4618      	mov	r0, r3
 8015760:	3718      	adds	r7, #24
 8015762:	46bd      	mov	sp, r7
 8015764:	bd80      	pop	{r7, pc}
	...

08015768 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8015768:	b580      	push	{r7, lr}
 801576a:	b08e      	sub	sp, #56	; 0x38
 801576c:	af00      	add	r7, sp, #0
 801576e:	60f8      	str	r0, [r7, #12]
 8015770:	60b9      	str	r1, [r7, #8]
 8015772:	607a      	str	r2, [r7, #4]
 8015774:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8015776:	2300      	movs	r3, #0
 8015778:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801577a:	68fb      	ldr	r3, [r7, #12]
 801577c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 801577e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015780:	2b00      	cmp	r3, #0
 8015782:	d10a      	bne.n	801579a <xQueueGenericSend+0x32>
	__asm volatile
 8015784:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015788:	f383 8811 	msr	BASEPRI, r3
 801578c:	f3bf 8f6f 	isb	sy
 8015790:	f3bf 8f4f 	dsb	sy
 8015794:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8015796:	bf00      	nop
 8015798:	e7fe      	b.n	8015798 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801579a:	68bb      	ldr	r3, [r7, #8]
 801579c:	2b00      	cmp	r3, #0
 801579e:	d103      	bne.n	80157a8 <xQueueGenericSend+0x40>
 80157a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80157a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80157a4:	2b00      	cmp	r3, #0
 80157a6:	d101      	bne.n	80157ac <xQueueGenericSend+0x44>
 80157a8:	2301      	movs	r3, #1
 80157aa:	e000      	b.n	80157ae <xQueueGenericSend+0x46>
 80157ac:	2300      	movs	r3, #0
 80157ae:	2b00      	cmp	r3, #0
 80157b0:	d10a      	bne.n	80157c8 <xQueueGenericSend+0x60>
	__asm volatile
 80157b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80157b6:	f383 8811 	msr	BASEPRI, r3
 80157ba:	f3bf 8f6f 	isb	sy
 80157be:	f3bf 8f4f 	dsb	sy
 80157c2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80157c4:	bf00      	nop
 80157c6:	e7fe      	b.n	80157c6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80157c8:	683b      	ldr	r3, [r7, #0]
 80157ca:	2b02      	cmp	r3, #2
 80157cc:	d103      	bne.n	80157d6 <xQueueGenericSend+0x6e>
 80157ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80157d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80157d2:	2b01      	cmp	r3, #1
 80157d4:	d101      	bne.n	80157da <xQueueGenericSend+0x72>
 80157d6:	2301      	movs	r3, #1
 80157d8:	e000      	b.n	80157dc <xQueueGenericSend+0x74>
 80157da:	2300      	movs	r3, #0
 80157dc:	2b00      	cmp	r3, #0
 80157de:	d10a      	bne.n	80157f6 <xQueueGenericSend+0x8e>
	__asm volatile
 80157e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80157e4:	f383 8811 	msr	BASEPRI, r3
 80157e8:	f3bf 8f6f 	isb	sy
 80157ec:	f3bf 8f4f 	dsb	sy
 80157f0:	623b      	str	r3, [r7, #32]
}
 80157f2:	bf00      	nop
 80157f4:	e7fe      	b.n	80157f4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80157f6:	f001 fc3b 	bl	8017070 <xTaskGetSchedulerState>
 80157fa:	4603      	mov	r3, r0
 80157fc:	2b00      	cmp	r3, #0
 80157fe:	d102      	bne.n	8015806 <xQueueGenericSend+0x9e>
 8015800:	687b      	ldr	r3, [r7, #4]
 8015802:	2b00      	cmp	r3, #0
 8015804:	d101      	bne.n	801580a <xQueueGenericSend+0xa2>
 8015806:	2301      	movs	r3, #1
 8015808:	e000      	b.n	801580c <xQueueGenericSend+0xa4>
 801580a:	2300      	movs	r3, #0
 801580c:	2b00      	cmp	r3, #0
 801580e:	d10a      	bne.n	8015826 <xQueueGenericSend+0xbe>
	__asm volatile
 8015810:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015814:	f383 8811 	msr	BASEPRI, r3
 8015818:	f3bf 8f6f 	isb	sy
 801581c:	f3bf 8f4f 	dsb	sy
 8015820:	61fb      	str	r3, [r7, #28]
}
 8015822:	bf00      	nop
 8015824:	e7fe      	b.n	8015824 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8015826:	f7ff fcd5 	bl	80151d4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801582a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801582c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801582e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015830:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015832:	429a      	cmp	r2, r3
 8015834:	d302      	bcc.n	801583c <xQueueGenericSend+0xd4>
 8015836:	683b      	ldr	r3, [r7, #0]
 8015838:	2b02      	cmp	r3, #2
 801583a:	d129      	bne.n	8015890 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 801583c:	683a      	ldr	r2, [r7, #0]
 801583e:	68b9      	ldr	r1, [r7, #8]
 8015840:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015842:	f000 fc5e 	bl	8016102 <prvCopyDataToQueue>
 8015846:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8015848:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801584a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801584c:	2b00      	cmp	r3, #0
 801584e:	d010      	beq.n	8015872 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8015850:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015852:	3324      	adds	r3, #36	; 0x24
 8015854:	4618      	mov	r0, r3
 8015856:	f001 fa4d 	bl	8016cf4 <xTaskRemoveFromEventList>
 801585a:	4603      	mov	r3, r0
 801585c:	2b00      	cmp	r3, #0
 801585e:	d013      	beq.n	8015888 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8015860:	4b3f      	ldr	r3, [pc, #252]	; (8015960 <xQueueGenericSend+0x1f8>)
 8015862:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015866:	601a      	str	r2, [r3, #0]
 8015868:	f3bf 8f4f 	dsb	sy
 801586c:	f3bf 8f6f 	isb	sy
 8015870:	e00a      	b.n	8015888 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8015872:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015874:	2b00      	cmp	r3, #0
 8015876:	d007      	beq.n	8015888 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8015878:	4b39      	ldr	r3, [pc, #228]	; (8015960 <xQueueGenericSend+0x1f8>)
 801587a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801587e:	601a      	str	r2, [r3, #0]
 8015880:	f3bf 8f4f 	dsb	sy
 8015884:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8015888:	f7ff fcd4 	bl	8015234 <vPortExitCritical>
				return pdPASS;
 801588c:	2301      	movs	r3, #1
 801588e:	e063      	b.n	8015958 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8015890:	687b      	ldr	r3, [r7, #4]
 8015892:	2b00      	cmp	r3, #0
 8015894:	d103      	bne.n	801589e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8015896:	f7ff fccd 	bl	8015234 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 801589a:	2300      	movs	r3, #0
 801589c:	e05c      	b.n	8015958 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 801589e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80158a0:	2b00      	cmp	r3, #0
 80158a2:	d106      	bne.n	80158b2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80158a4:	f107 0314 	add.w	r3, r7, #20
 80158a8:	4618      	mov	r0, r3
 80158aa:	f001 fa87 	bl	8016dbc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80158ae:	2301      	movs	r3, #1
 80158b0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80158b2:	f7ff fcbf 	bl	8015234 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80158b6:	f000 fff9 	bl	80168ac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80158ba:	f7ff fc8b 	bl	80151d4 <vPortEnterCritical>
 80158be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80158c0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80158c4:	b25b      	sxtb	r3, r3
 80158c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80158ca:	d103      	bne.n	80158d4 <xQueueGenericSend+0x16c>
 80158cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80158ce:	2200      	movs	r2, #0
 80158d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80158d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80158d6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80158da:	b25b      	sxtb	r3, r3
 80158dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80158e0:	d103      	bne.n	80158ea <xQueueGenericSend+0x182>
 80158e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80158e4:	2200      	movs	r2, #0
 80158e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80158ea:	f7ff fca3 	bl	8015234 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80158ee:	1d3a      	adds	r2, r7, #4
 80158f0:	f107 0314 	add.w	r3, r7, #20
 80158f4:	4611      	mov	r1, r2
 80158f6:	4618      	mov	r0, r3
 80158f8:	f001 fa76 	bl	8016de8 <xTaskCheckForTimeOut>
 80158fc:	4603      	mov	r3, r0
 80158fe:	2b00      	cmp	r3, #0
 8015900:	d124      	bne.n	801594c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8015902:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015904:	f000 fcf5 	bl	80162f2 <prvIsQueueFull>
 8015908:	4603      	mov	r3, r0
 801590a:	2b00      	cmp	r3, #0
 801590c:	d018      	beq.n	8015940 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 801590e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015910:	3310      	adds	r3, #16
 8015912:	687a      	ldr	r2, [r7, #4]
 8015914:	4611      	mov	r1, r2
 8015916:	4618      	mov	r0, r3
 8015918:	f001 f99c 	bl	8016c54 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 801591c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801591e:	f000 fc80 	bl	8016222 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8015922:	f000 ffd1 	bl	80168c8 <xTaskResumeAll>
 8015926:	4603      	mov	r3, r0
 8015928:	2b00      	cmp	r3, #0
 801592a:	f47f af7c 	bne.w	8015826 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 801592e:	4b0c      	ldr	r3, [pc, #48]	; (8015960 <xQueueGenericSend+0x1f8>)
 8015930:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015934:	601a      	str	r2, [r3, #0]
 8015936:	f3bf 8f4f 	dsb	sy
 801593a:	f3bf 8f6f 	isb	sy
 801593e:	e772      	b.n	8015826 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8015940:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015942:	f000 fc6e 	bl	8016222 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8015946:	f000 ffbf 	bl	80168c8 <xTaskResumeAll>
 801594a:	e76c      	b.n	8015826 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 801594c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801594e:	f000 fc68 	bl	8016222 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8015952:	f000 ffb9 	bl	80168c8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8015956:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8015958:	4618      	mov	r0, r3
 801595a:	3738      	adds	r7, #56	; 0x38
 801595c:	46bd      	mov	sp, r7
 801595e:	bd80      	pop	{r7, pc}
 8015960:	e000ed04 	.word	0xe000ed04

08015964 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8015964:	b580      	push	{r7, lr}
 8015966:	b090      	sub	sp, #64	; 0x40
 8015968:	af00      	add	r7, sp, #0
 801596a:	60f8      	str	r0, [r7, #12]
 801596c:	60b9      	str	r1, [r7, #8]
 801596e:	607a      	str	r2, [r7, #4]
 8015970:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8015972:	68fb      	ldr	r3, [r7, #12]
 8015974:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8015976:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015978:	2b00      	cmp	r3, #0
 801597a:	d10a      	bne.n	8015992 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 801597c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015980:	f383 8811 	msr	BASEPRI, r3
 8015984:	f3bf 8f6f 	isb	sy
 8015988:	f3bf 8f4f 	dsb	sy
 801598c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 801598e:	bf00      	nop
 8015990:	e7fe      	b.n	8015990 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8015992:	68bb      	ldr	r3, [r7, #8]
 8015994:	2b00      	cmp	r3, #0
 8015996:	d103      	bne.n	80159a0 <xQueueGenericSendFromISR+0x3c>
 8015998:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801599a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801599c:	2b00      	cmp	r3, #0
 801599e:	d101      	bne.n	80159a4 <xQueueGenericSendFromISR+0x40>
 80159a0:	2301      	movs	r3, #1
 80159a2:	e000      	b.n	80159a6 <xQueueGenericSendFromISR+0x42>
 80159a4:	2300      	movs	r3, #0
 80159a6:	2b00      	cmp	r3, #0
 80159a8:	d10a      	bne.n	80159c0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80159aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80159ae:	f383 8811 	msr	BASEPRI, r3
 80159b2:	f3bf 8f6f 	isb	sy
 80159b6:	f3bf 8f4f 	dsb	sy
 80159ba:	627b      	str	r3, [r7, #36]	; 0x24
}
 80159bc:	bf00      	nop
 80159be:	e7fe      	b.n	80159be <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80159c0:	683b      	ldr	r3, [r7, #0]
 80159c2:	2b02      	cmp	r3, #2
 80159c4:	d103      	bne.n	80159ce <xQueueGenericSendFromISR+0x6a>
 80159c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80159c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80159ca:	2b01      	cmp	r3, #1
 80159cc:	d101      	bne.n	80159d2 <xQueueGenericSendFromISR+0x6e>
 80159ce:	2301      	movs	r3, #1
 80159d0:	e000      	b.n	80159d4 <xQueueGenericSendFromISR+0x70>
 80159d2:	2300      	movs	r3, #0
 80159d4:	2b00      	cmp	r3, #0
 80159d6:	d10a      	bne.n	80159ee <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80159d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80159dc:	f383 8811 	msr	BASEPRI, r3
 80159e0:	f3bf 8f6f 	isb	sy
 80159e4:	f3bf 8f4f 	dsb	sy
 80159e8:	623b      	str	r3, [r7, #32]
}
 80159ea:	bf00      	nop
 80159ec:	e7fe      	b.n	80159ec <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80159ee:	f7ff fcd3 	bl	8015398 <vPortValidateInterruptPriority>
	__asm volatile
 80159f2:	f3ef 8211 	mrs	r2, BASEPRI
 80159f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80159fa:	f383 8811 	msr	BASEPRI, r3
 80159fe:	f3bf 8f6f 	isb	sy
 8015a02:	f3bf 8f4f 	dsb	sy
 8015a06:	61fa      	str	r2, [r7, #28]
 8015a08:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 8015a0a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8015a0c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8015a0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015a10:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8015a12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015a14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015a16:	429a      	cmp	r2, r3
 8015a18:	d302      	bcc.n	8015a20 <xQueueGenericSendFromISR+0xbc>
 8015a1a:	683b      	ldr	r3, [r7, #0]
 8015a1c:	2b02      	cmp	r3, #2
 8015a1e:	d12f      	bne.n	8015a80 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8015a20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015a22:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8015a26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8015a2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015a2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015a2e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8015a30:	683a      	ldr	r2, [r7, #0]
 8015a32:	68b9      	ldr	r1, [r7, #8]
 8015a34:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8015a36:	f000 fb64 	bl	8016102 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8015a3a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8015a3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015a42:	d112      	bne.n	8015a6a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8015a44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015a48:	2b00      	cmp	r3, #0
 8015a4a:	d016      	beq.n	8015a7a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8015a4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015a4e:	3324      	adds	r3, #36	; 0x24
 8015a50:	4618      	mov	r0, r3
 8015a52:	f001 f94f 	bl	8016cf4 <xTaskRemoveFromEventList>
 8015a56:	4603      	mov	r3, r0
 8015a58:	2b00      	cmp	r3, #0
 8015a5a:	d00e      	beq.n	8015a7a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8015a5c:	687b      	ldr	r3, [r7, #4]
 8015a5e:	2b00      	cmp	r3, #0
 8015a60:	d00b      	beq.n	8015a7a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8015a62:	687b      	ldr	r3, [r7, #4]
 8015a64:	2201      	movs	r2, #1
 8015a66:	601a      	str	r2, [r3, #0]
 8015a68:	e007      	b.n	8015a7a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8015a6a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8015a6e:	3301      	adds	r3, #1
 8015a70:	b2db      	uxtb	r3, r3
 8015a72:	b25a      	sxtb	r2, r3
 8015a74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015a76:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8015a7a:	2301      	movs	r3, #1
 8015a7c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8015a7e:	e001      	b.n	8015a84 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8015a80:	2300      	movs	r3, #0
 8015a82:	63fb      	str	r3, [r7, #60]	; 0x3c
 8015a84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015a86:	617b      	str	r3, [r7, #20]
	__asm volatile
 8015a88:	697b      	ldr	r3, [r7, #20]
 8015a8a:	f383 8811 	msr	BASEPRI, r3
}
 8015a8e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8015a90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8015a92:	4618      	mov	r0, r3
 8015a94:	3740      	adds	r7, #64	; 0x40
 8015a96:	46bd      	mov	sp, r7
 8015a98:	bd80      	pop	{r7, pc}

08015a9a <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8015a9a:	b580      	push	{r7, lr}
 8015a9c:	b08e      	sub	sp, #56	; 0x38
 8015a9e:	af00      	add	r7, sp, #0
 8015aa0:	6078      	str	r0, [r7, #4]
 8015aa2:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8015aa4:	687b      	ldr	r3, [r7, #4]
 8015aa6:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8015aa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015aaa:	2b00      	cmp	r3, #0
 8015aac:	d10a      	bne.n	8015ac4 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8015aae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015ab2:	f383 8811 	msr	BASEPRI, r3
 8015ab6:	f3bf 8f6f 	isb	sy
 8015aba:	f3bf 8f4f 	dsb	sy
 8015abe:	623b      	str	r3, [r7, #32]
}
 8015ac0:	bf00      	nop
 8015ac2:	e7fe      	b.n	8015ac2 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8015ac4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015ac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015ac8:	2b00      	cmp	r3, #0
 8015aca:	d00a      	beq.n	8015ae2 <xQueueGiveFromISR+0x48>
	__asm volatile
 8015acc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015ad0:	f383 8811 	msr	BASEPRI, r3
 8015ad4:	f3bf 8f6f 	isb	sy
 8015ad8:	f3bf 8f4f 	dsb	sy
 8015adc:	61fb      	str	r3, [r7, #28]
}
 8015ade:	bf00      	nop
 8015ae0:	e7fe      	b.n	8015ae0 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8015ae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015ae4:	681b      	ldr	r3, [r3, #0]
 8015ae6:	2b00      	cmp	r3, #0
 8015ae8:	d103      	bne.n	8015af2 <xQueueGiveFromISR+0x58>
 8015aea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015aec:	689b      	ldr	r3, [r3, #8]
 8015aee:	2b00      	cmp	r3, #0
 8015af0:	d101      	bne.n	8015af6 <xQueueGiveFromISR+0x5c>
 8015af2:	2301      	movs	r3, #1
 8015af4:	e000      	b.n	8015af8 <xQueueGiveFromISR+0x5e>
 8015af6:	2300      	movs	r3, #0
 8015af8:	2b00      	cmp	r3, #0
 8015afa:	d10a      	bne.n	8015b12 <xQueueGiveFromISR+0x78>
	__asm volatile
 8015afc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015b00:	f383 8811 	msr	BASEPRI, r3
 8015b04:	f3bf 8f6f 	isb	sy
 8015b08:	f3bf 8f4f 	dsb	sy
 8015b0c:	61bb      	str	r3, [r7, #24]
}
 8015b0e:	bf00      	nop
 8015b10:	e7fe      	b.n	8015b10 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8015b12:	f7ff fc41 	bl	8015398 <vPortValidateInterruptPriority>
	__asm volatile
 8015b16:	f3ef 8211 	mrs	r2, BASEPRI
 8015b1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015b1e:	f383 8811 	msr	BASEPRI, r3
 8015b22:	f3bf 8f6f 	isb	sy
 8015b26:	f3bf 8f4f 	dsb	sy
 8015b2a:	617a      	str	r2, [r7, #20]
 8015b2c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8015b2e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8015b30:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8015b32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015b34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015b36:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8015b38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015b3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015b3c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015b3e:	429a      	cmp	r2, r3
 8015b40:	d22b      	bcs.n	8015b9a <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8015b42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015b44:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8015b48:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8015b4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015b4e:	1c5a      	adds	r2, r3, #1
 8015b50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015b52:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8015b54:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8015b58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015b5c:	d112      	bne.n	8015b84 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8015b5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015b62:	2b00      	cmp	r3, #0
 8015b64:	d016      	beq.n	8015b94 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8015b66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015b68:	3324      	adds	r3, #36	; 0x24
 8015b6a:	4618      	mov	r0, r3
 8015b6c:	f001 f8c2 	bl	8016cf4 <xTaskRemoveFromEventList>
 8015b70:	4603      	mov	r3, r0
 8015b72:	2b00      	cmp	r3, #0
 8015b74:	d00e      	beq.n	8015b94 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8015b76:	683b      	ldr	r3, [r7, #0]
 8015b78:	2b00      	cmp	r3, #0
 8015b7a:	d00b      	beq.n	8015b94 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8015b7c:	683b      	ldr	r3, [r7, #0]
 8015b7e:	2201      	movs	r2, #1
 8015b80:	601a      	str	r2, [r3, #0]
 8015b82:	e007      	b.n	8015b94 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8015b84:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015b88:	3301      	adds	r3, #1
 8015b8a:	b2db      	uxtb	r3, r3
 8015b8c:	b25a      	sxtb	r2, r3
 8015b8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015b90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8015b94:	2301      	movs	r3, #1
 8015b96:	637b      	str	r3, [r7, #52]	; 0x34
 8015b98:	e001      	b.n	8015b9e <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8015b9a:	2300      	movs	r3, #0
 8015b9c:	637b      	str	r3, [r7, #52]	; 0x34
 8015b9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015ba0:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8015ba2:	68fb      	ldr	r3, [r7, #12]
 8015ba4:	f383 8811 	msr	BASEPRI, r3
}
 8015ba8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8015baa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8015bac:	4618      	mov	r0, r3
 8015bae:	3738      	adds	r7, #56	; 0x38
 8015bb0:	46bd      	mov	sp, r7
 8015bb2:	bd80      	pop	{r7, pc}

08015bb4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8015bb4:	b580      	push	{r7, lr}
 8015bb6:	b08c      	sub	sp, #48	; 0x30
 8015bb8:	af00      	add	r7, sp, #0
 8015bba:	60f8      	str	r0, [r7, #12]
 8015bbc:	60b9      	str	r1, [r7, #8]
 8015bbe:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8015bc0:	2300      	movs	r3, #0
 8015bc2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8015bc4:	68fb      	ldr	r3, [r7, #12]
 8015bc6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8015bc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015bca:	2b00      	cmp	r3, #0
 8015bcc:	d10a      	bne.n	8015be4 <xQueueReceive+0x30>
	__asm volatile
 8015bce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015bd2:	f383 8811 	msr	BASEPRI, r3
 8015bd6:	f3bf 8f6f 	isb	sy
 8015bda:	f3bf 8f4f 	dsb	sy
 8015bde:	623b      	str	r3, [r7, #32]
}
 8015be0:	bf00      	nop
 8015be2:	e7fe      	b.n	8015be2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8015be4:	68bb      	ldr	r3, [r7, #8]
 8015be6:	2b00      	cmp	r3, #0
 8015be8:	d103      	bne.n	8015bf2 <xQueueReceive+0x3e>
 8015bea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015bee:	2b00      	cmp	r3, #0
 8015bf0:	d101      	bne.n	8015bf6 <xQueueReceive+0x42>
 8015bf2:	2301      	movs	r3, #1
 8015bf4:	e000      	b.n	8015bf8 <xQueueReceive+0x44>
 8015bf6:	2300      	movs	r3, #0
 8015bf8:	2b00      	cmp	r3, #0
 8015bfa:	d10a      	bne.n	8015c12 <xQueueReceive+0x5e>
	__asm volatile
 8015bfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015c00:	f383 8811 	msr	BASEPRI, r3
 8015c04:	f3bf 8f6f 	isb	sy
 8015c08:	f3bf 8f4f 	dsb	sy
 8015c0c:	61fb      	str	r3, [r7, #28]
}
 8015c0e:	bf00      	nop
 8015c10:	e7fe      	b.n	8015c10 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8015c12:	f001 fa2d 	bl	8017070 <xTaskGetSchedulerState>
 8015c16:	4603      	mov	r3, r0
 8015c18:	2b00      	cmp	r3, #0
 8015c1a:	d102      	bne.n	8015c22 <xQueueReceive+0x6e>
 8015c1c:	687b      	ldr	r3, [r7, #4]
 8015c1e:	2b00      	cmp	r3, #0
 8015c20:	d101      	bne.n	8015c26 <xQueueReceive+0x72>
 8015c22:	2301      	movs	r3, #1
 8015c24:	e000      	b.n	8015c28 <xQueueReceive+0x74>
 8015c26:	2300      	movs	r3, #0
 8015c28:	2b00      	cmp	r3, #0
 8015c2a:	d10a      	bne.n	8015c42 <xQueueReceive+0x8e>
	__asm volatile
 8015c2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015c30:	f383 8811 	msr	BASEPRI, r3
 8015c34:	f3bf 8f6f 	isb	sy
 8015c38:	f3bf 8f4f 	dsb	sy
 8015c3c:	61bb      	str	r3, [r7, #24]
}
 8015c3e:	bf00      	nop
 8015c40:	e7fe      	b.n	8015c40 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8015c42:	f7ff fac7 	bl	80151d4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8015c46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015c48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015c4a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8015c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c4e:	2b00      	cmp	r3, #0
 8015c50:	d01f      	beq.n	8015c92 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8015c52:	68b9      	ldr	r1, [r7, #8]
 8015c54:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015c56:	f000 fabe 	bl	80161d6 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8015c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c5c:	1e5a      	subs	r2, r3, #1
 8015c5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015c60:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8015c62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015c64:	691b      	ldr	r3, [r3, #16]
 8015c66:	2b00      	cmp	r3, #0
 8015c68:	d00f      	beq.n	8015c8a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8015c6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015c6c:	3310      	adds	r3, #16
 8015c6e:	4618      	mov	r0, r3
 8015c70:	f001 f840 	bl	8016cf4 <xTaskRemoveFromEventList>
 8015c74:	4603      	mov	r3, r0
 8015c76:	2b00      	cmp	r3, #0
 8015c78:	d007      	beq.n	8015c8a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8015c7a:	4b3d      	ldr	r3, [pc, #244]	; (8015d70 <xQueueReceive+0x1bc>)
 8015c7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015c80:	601a      	str	r2, [r3, #0]
 8015c82:	f3bf 8f4f 	dsb	sy
 8015c86:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8015c8a:	f7ff fad3 	bl	8015234 <vPortExitCritical>
				return pdPASS;
 8015c8e:	2301      	movs	r3, #1
 8015c90:	e069      	b.n	8015d66 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8015c92:	687b      	ldr	r3, [r7, #4]
 8015c94:	2b00      	cmp	r3, #0
 8015c96:	d103      	bne.n	8015ca0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8015c98:	f7ff facc 	bl	8015234 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8015c9c:	2300      	movs	r3, #0
 8015c9e:	e062      	b.n	8015d66 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8015ca0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015ca2:	2b00      	cmp	r3, #0
 8015ca4:	d106      	bne.n	8015cb4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8015ca6:	f107 0310 	add.w	r3, r7, #16
 8015caa:	4618      	mov	r0, r3
 8015cac:	f001 f886 	bl	8016dbc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8015cb0:	2301      	movs	r3, #1
 8015cb2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8015cb4:	f7ff fabe 	bl	8015234 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8015cb8:	f000 fdf8 	bl	80168ac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8015cbc:	f7ff fa8a 	bl	80151d4 <vPortEnterCritical>
 8015cc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015cc2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8015cc6:	b25b      	sxtb	r3, r3
 8015cc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015ccc:	d103      	bne.n	8015cd6 <xQueueReceive+0x122>
 8015cce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015cd0:	2200      	movs	r2, #0
 8015cd2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8015cd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015cd8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8015cdc:	b25b      	sxtb	r3, r3
 8015cde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015ce2:	d103      	bne.n	8015cec <xQueueReceive+0x138>
 8015ce4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015ce6:	2200      	movs	r2, #0
 8015ce8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8015cec:	f7ff faa2 	bl	8015234 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8015cf0:	1d3a      	adds	r2, r7, #4
 8015cf2:	f107 0310 	add.w	r3, r7, #16
 8015cf6:	4611      	mov	r1, r2
 8015cf8:	4618      	mov	r0, r3
 8015cfa:	f001 f875 	bl	8016de8 <xTaskCheckForTimeOut>
 8015cfe:	4603      	mov	r3, r0
 8015d00:	2b00      	cmp	r3, #0
 8015d02:	d123      	bne.n	8015d4c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8015d04:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015d06:	f000 fade 	bl	80162c6 <prvIsQueueEmpty>
 8015d0a:	4603      	mov	r3, r0
 8015d0c:	2b00      	cmp	r3, #0
 8015d0e:	d017      	beq.n	8015d40 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8015d10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015d12:	3324      	adds	r3, #36	; 0x24
 8015d14:	687a      	ldr	r2, [r7, #4]
 8015d16:	4611      	mov	r1, r2
 8015d18:	4618      	mov	r0, r3
 8015d1a:	f000 ff9b 	bl	8016c54 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8015d1e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015d20:	f000 fa7f 	bl	8016222 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8015d24:	f000 fdd0 	bl	80168c8 <xTaskResumeAll>
 8015d28:	4603      	mov	r3, r0
 8015d2a:	2b00      	cmp	r3, #0
 8015d2c:	d189      	bne.n	8015c42 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8015d2e:	4b10      	ldr	r3, [pc, #64]	; (8015d70 <xQueueReceive+0x1bc>)
 8015d30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015d34:	601a      	str	r2, [r3, #0]
 8015d36:	f3bf 8f4f 	dsb	sy
 8015d3a:	f3bf 8f6f 	isb	sy
 8015d3e:	e780      	b.n	8015c42 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8015d40:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015d42:	f000 fa6e 	bl	8016222 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8015d46:	f000 fdbf 	bl	80168c8 <xTaskResumeAll>
 8015d4a:	e77a      	b.n	8015c42 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8015d4c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015d4e:	f000 fa68 	bl	8016222 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8015d52:	f000 fdb9 	bl	80168c8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8015d56:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015d58:	f000 fab5 	bl	80162c6 <prvIsQueueEmpty>
 8015d5c:	4603      	mov	r3, r0
 8015d5e:	2b00      	cmp	r3, #0
 8015d60:	f43f af6f 	beq.w	8015c42 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8015d64:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8015d66:	4618      	mov	r0, r3
 8015d68:	3730      	adds	r7, #48	; 0x30
 8015d6a:	46bd      	mov	sp, r7
 8015d6c:	bd80      	pop	{r7, pc}
 8015d6e:	bf00      	nop
 8015d70:	e000ed04 	.word	0xe000ed04

08015d74 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8015d74:	b580      	push	{r7, lr}
 8015d76:	b08e      	sub	sp, #56	; 0x38
 8015d78:	af00      	add	r7, sp, #0
 8015d7a:	6078      	str	r0, [r7, #4]
 8015d7c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8015d7e:	2300      	movs	r3, #0
 8015d80:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8015d82:	687b      	ldr	r3, [r7, #4]
 8015d84:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8015d86:	2300      	movs	r3, #0
 8015d88:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8015d8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015d8c:	2b00      	cmp	r3, #0
 8015d8e:	d10a      	bne.n	8015da6 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8015d90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015d94:	f383 8811 	msr	BASEPRI, r3
 8015d98:	f3bf 8f6f 	isb	sy
 8015d9c:	f3bf 8f4f 	dsb	sy
 8015da0:	623b      	str	r3, [r7, #32]
}
 8015da2:	bf00      	nop
 8015da4:	e7fe      	b.n	8015da4 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8015da6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015daa:	2b00      	cmp	r3, #0
 8015dac:	d00a      	beq.n	8015dc4 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8015dae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015db2:	f383 8811 	msr	BASEPRI, r3
 8015db6:	f3bf 8f6f 	isb	sy
 8015dba:	f3bf 8f4f 	dsb	sy
 8015dbe:	61fb      	str	r3, [r7, #28]
}
 8015dc0:	bf00      	nop
 8015dc2:	e7fe      	b.n	8015dc2 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8015dc4:	f001 f954 	bl	8017070 <xTaskGetSchedulerState>
 8015dc8:	4603      	mov	r3, r0
 8015dca:	2b00      	cmp	r3, #0
 8015dcc:	d102      	bne.n	8015dd4 <xQueueSemaphoreTake+0x60>
 8015dce:	683b      	ldr	r3, [r7, #0]
 8015dd0:	2b00      	cmp	r3, #0
 8015dd2:	d101      	bne.n	8015dd8 <xQueueSemaphoreTake+0x64>
 8015dd4:	2301      	movs	r3, #1
 8015dd6:	e000      	b.n	8015dda <xQueueSemaphoreTake+0x66>
 8015dd8:	2300      	movs	r3, #0
 8015dda:	2b00      	cmp	r3, #0
 8015ddc:	d10a      	bne.n	8015df4 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8015dde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015de2:	f383 8811 	msr	BASEPRI, r3
 8015de6:	f3bf 8f6f 	isb	sy
 8015dea:	f3bf 8f4f 	dsb	sy
 8015dee:	61bb      	str	r3, [r7, #24]
}
 8015df0:	bf00      	nop
 8015df2:	e7fe      	b.n	8015df2 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8015df4:	f7ff f9ee 	bl	80151d4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8015df8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015dfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015dfc:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8015dfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015e00:	2b00      	cmp	r3, #0
 8015e02:	d024      	beq.n	8015e4e <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8015e04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015e06:	1e5a      	subs	r2, r3, #1
 8015e08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015e0a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8015e0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015e0e:	681b      	ldr	r3, [r3, #0]
 8015e10:	2b00      	cmp	r3, #0
 8015e12:	d104      	bne.n	8015e1e <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8015e14:	f001 faa2 	bl	801735c <pvTaskIncrementMutexHeldCount>
 8015e18:	4602      	mov	r2, r0
 8015e1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015e1c:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8015e1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015e20:	691b      	ldr	r3, [r3, #16]
 8015e22:	2b00      	cmp	r3, #0
 8015e24:	d00f      	beq.n	8015e46 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8015e26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015e28:	3310      	adds	r3, #16
 8015e2a:	4618      	mov	r0, r3
 8015e2c:	f000 ff62 	bl	8016cf4 <xTaskRemoveFromEventList>
 8015e30:	4603      	mov	r3, r0
 8015e32:	2b00      	cmp	r3, #0
 8015e34:	d007      	beq.n	8015e46 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8015e36:	4b54      	ldr	r3, [pc, #336]	; (8015f88 <xQueueSemaphoreTake+0x214>)
 8015e38:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015e3c:	601a      	str	r2, [r3, #0]
 8015e3e:	f3bf 8f4f 	dsb	sy
 8015e42:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8015e46:	f7ff f9f5 	bl	8015234 <vPortExitCritical>
				return pdPASS;
 8015e4a:	2301      	movs	r3, #1
 8015e4c:	e097      	b.n	8015f7e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8015e4e:	683b      	ldr	r3, [r7, #0]
 8015e50:	2b00      	cmp	r3, #0
 8015e52:	d111      	bne.n	8015e78 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8015e54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015e56:	2b00      	cmp	r3, #0
 8015e58:	d00a      	beq.n	8015e70 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8015e5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015e5e:	f383 8811 	msr	BASEPRI, r3
 8015e62:	f3bf 8f6f 	isb	sy
 8015e66:	f3bf 8f4f 	dsb	sy
 8015e6a:	617b      	str	r3, [r7, #20]
}
 8015e6c:	bf00      	nop
 8015e6e:	e7fe      	b.n	8015e6e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8015e70:	f7ff f9e0 	bl	8015234 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8015e74:	2300      	movs	r3, #0
 8015e76:	e082      	b.n	8015f7e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8015e78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015e7a:	2b00      	cmp	r3, #0
 8015e7c:	d106      	bne.n	8015e8c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8015e7e:	f107 030c 	add.w	r3, r7, #12
 8015e82:	4618      	mov	r0, r3
 8015e84:	f000 ff9a 	bl	8016dbc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8015e88:	2301      	movs	r3, #1
 8015e8a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8015e8c:	f7ff f9d2 	bl	8015234 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8015e90:	f000 fd0c 	bl	80168ac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8015e94:	f7ff f99e 	bl	80151d4 <vPortEnterCritical>
 8015e98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015e9a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8015e9e:	b25b      	sxtb	r3, r3
 8015ea0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015ea4:	d103      	bne.n	8015eae <xQueueSemaphoreTake+0x13a>
 8015ea6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015ea8:	2200      	movs	r2, #0
 8015eaa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8015eae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015eb0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8015eb4:	b25b      	sxtb	r3, r3
 8015eb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015eba:	d103      	bne.n	8015ec4 <xQueueSemaphoreTake+0x150>
 8015ebc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015ebe:	2200      	movs	r2, #0
 8015ec0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8015ec4:	f7ff f9b6 	bl	8015234 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8015ec8:	463a      	mov	r2, r7
 8015eca:	f107 030c 	add.w	r3, r7, #12
 8015ece:	4611      	mov	r1, r2
 8015ed0:	4618      	mov	r0, r3
 8015ed2:	f000 ff89 	bl	8016de8 <xTaskCheckForTimeOut>
 8015ed6:	4603      	mov	r3, r0
 8015ed8:	2b00      	cmp	r3, #0
 8015eda:	d132      	bne.n	8015f42 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8015edc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8015ede:	f000 f9f2 	bl	80162c6 <prvIsQueueEmpty>
 8015ee2:	4603      	mov	r3, r0
 8015ee4:	2b00      	cmp	r3, #0
 8015ee6:	d026      	beq.n	8015f36 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8015ee8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015eea:	681b      	ldr	r3, [r3, #0]
 8015eec:	2b00      	cmp	r3, #0
 8015eee:	d109      	bne.n	8015f04 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8015ef0:	f7ff f970 	bl	80151d4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8015ef4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015ef6:	689b      	ldr	r3, [r3, #8]
 8015ef8:	4618      	mov	r0, r3
 8015efa:	f001 f8d7 	bl	80170ac <xTaskPriorityInherit>
 8015efe:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8015f00:	f7ff f998 	bl	8015234 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8015f04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015f06:	3324      	adds	r3, #36	; 0x24
 8015f08:	683a      	ldr	r2, [r7, #0]
 8015f0a:	4611      	mov	r1, r2
 8015f0c:	4618      	mov	r0, r3
 8015f0e:	f000 fea1 	bl	8016c54 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8015f12:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8015f14:	f000 f985 	bl	8016222 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8015f18:	f000 fcd6 	bl	80168c8 <xTaskResumeAll>
 8015f1c:	4603      	mov	r3, r0
 8015f1e:	2b00      	cmp	r3, #0
 8015f20:	f47f af68 	bne.w	8015df4 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8015f24:	4b18      	ldr	r3, [pc, #96]	; (8015f88 <xQueueSemaphoreTake+0x214>)
 8015f26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015f2a:	601a      	str	r2, [r3, #0]
 8015f2c:	f3bf 8f4f 	dsb	sy
 8015f30:	f3bf 8f6f 	isb	sy
 8015f34:	e75e      	b.n	8015df4 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8015f36:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8015f38:	f000 f973 	bl	8016222 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8015f3c:	f000 fcc4 	bl	80168c8 <xTaskResumeAll>
 8015f40:	e758      	b.n	8015df4 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8015f42:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8015f44:	f000 f96d 	bl	8016222 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8015f48:	f000 fcbe 	bl	80168c8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8015f4c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8015f4e:	f000 f9ba 	bl	80162c6 <prvIsQueueEmpty>
 8015f52:	4603      	mov	r3, r0
 8015f54:	2b00      	cmp	r3, #0
 8015f56:	f43f af4d 	beq.w	8015df4 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8015f5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015f5c:	2b00      	cmp	r3, #0
 8015f5e:	d00d      	beq.n	8015f7c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8015f60:	f7ff f938 	bl	80151d4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8015f64:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8015f66:	f000 f8b4 	bl	80160d2 <prvGetDisinheritPriorityAfterTimeout>
 8015f6a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8015f6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015f6e:	689b      	ldr	r3, [r3, #8]
 8015f70:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8015f72:	4618      	mov	r0, r3
 8015f74:	f001 f970 	bl	8017258 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8015f78:	f7ff f95c 	bl	8015234 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8015f7c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8015f7e:	4618      	mov	r0, r3
 8015f80:	3738      	adds	r7, #56	; 0x38
 8015f82:	46bd      	mov	sp, r7
 8015f84:	bd80      	pop	{r7, pc}
 8015f86:	bf00      	nop
 8015f88:	e000ed04 	.word	0xe000ed04

08015f8c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8015f8c:	b580      	push	{r7, lr}
 8015f8e:	b08e      	sub	sp, #56	; 0x38
 8015f90:	af00      	add	r7, sp, #0
 8015f92:	60f8      	str	r0, [r7, #12]
 8015f94:	60b9      	str	r1, [r7, #8]
 8015f96:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8015f98:	68fb      	ldr	r3, [r7, #12]
 8015f9a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8015f9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015f9e:	2b00      	cmp	r3, #0
 8015fa0:	d10a      	bne.n	8015fb8 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8015fa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015fa6:	f383 8811 	msr	BASEPRI, r3
 8015faa:	f3bf 8f6f 	isb	sy
 8015fae:	f3bf 8f4f 	dsb	sy
 8015fb2:	623b      	str	r3, [r7, #32]
}
 8015fb4:	bf00      	nop
 8015fb6:	e7fe      	b.n	8015fb6 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8015fb8:	68bb      	ldr	r3, [r7, #8]
 8015fba:	2b00      	cmp	r3, #0
 8015fbc:	d103      	bne.n	8015fc6 <xQueueReceiveFromISR+0x3a>
 8015fbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015fc2:	2b00      	cmp	r3, #0
 8015fc4:	d101      	bne.n	8015fca <xQueueReceiveFromISR+0x3e>
 8015fc6:	2301      	movs	r3, #1
 8015fc8:	e000      	b.n	8015fcc <xQueueReceiveFromISR+0x40>
 8015fca:	2300      	movs	r3, #0
 8015fcc:	2b00      	cmp	r3, #0
 8015fce:	d10a      	bne.n	8015fe6 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8015fd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015fd4:	f383 8811 	msr	BASEPRI, r3
 8015fd8:	f3bf 8f6f 	isb	sy
 8015fdc:	f3bf 8f4f 	dsb	sy
 8015fe0:	61fb      	str	r3, [r7, #28]
}
 8015fe2:	bf00      	nop
 8015fe4:	e7fe      	b.n	8015fe4 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8015fe6:	f7ff f9d7 	bl	8015398 <vPortValidateInterruptPriority>
	__asm volatile
 8015fea:	f3ef 8211 	mrs	r2, BASEPRI
 8015fee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015ff2:	f383 8811 	msr	BASEPRI, r3
 8015ff6:	f3bf 8f6f 	isb	sy
 8015ffa:	f3bf 8f4f 	dsb	sy
 8015ffe:	61ba      	str	r2, [r7, #24]
 8016000:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8016002:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8016004:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8016006:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016008:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801600a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801600c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801600e:	2b00      	cmp	r3, #0
 8016010:	d02f      	beq.n	8016072 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8016012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016014:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8016018:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 801601c:	68b9      	ldr	r1, [r7, #8]
 801601e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016020:	f000 f8d9 	bl	80161d6 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8016024:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016026:	1e5a      	subs	r2, r3, #1
 8016028:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801602a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 801602c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8016030:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016034:	d112      	bne.n	801605c <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8016036:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016038:	691b      	ldr	r3, [r3, #16]
 801603a:	2b00      	cmp	r3, #0
 801603c:	d016      	beq.n	801606c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801603e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016040:	3310      	adds	r3, #16
 8016042:	4618      	mov	r0, r3
 8016044:	f000 fe56 	bl	8016cf4 <xTaskRemoveFromEventList>
 8016048:	4603      	mov	r3, r0
 801604a:	2b00      	cmp	r3, #0
 801604c:	d00e      	beq.n	801606c <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 801604e:	687b      	ldr	r3, [r7, #4]
 8016050:	2b00      	cmp	r3, #0
 8016052:	d00b      	beq.n	801606c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8016054:	687b      	ldr	r3, [r7, #4]
 8016056:	2201      	movs	r2, #1
 8016058:	601a      	str	r2, [r3, #0]
 801605a:	e007      	b.n	801606c <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 801605c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016060:	3301      	adds	r3, #1
 8016062:	b2db      	uxtb	r3, r3
 8016064:	b25a      	sxtb	r2, r3
 8016066:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016068:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 801606c:	2301      	movs	r3, #1
 801606e:	637b      	str	r3, [r7, #52]	; 0x34
 8016070:	e001      	b.n	8016076 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8016072:	2300      	movs	r3, #0
 8016074:	637b      	str	r3, [r7, #52]	; 0x34
 8016076:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016078:	613b      	str	r3, [r7, #16]
	__asm volatile
 801607a:	693b      	ldr	r3, [r7, #16]
 801607c:	f383 8811 	msr	BASEPRI, r3
}
 8016080:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8016082:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8016084:	4618      	mov	r0, r3
 8016086:	3738      	adds	r7, #56	; 0x38
 8016088:	46bd      	mov	sp, r7
 801608a:	bd80      	pop	{r7, pc}

0801608c <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 801608c:	b580      	push	{r7, lr}
 801608e:	b084      	sub	sp, #16
 8016090:	af00      	add	r7, sp, #0
 8016092:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8016094:	687b      	ldr	r3, [r7, #4]
 8016096:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8016098:	68fb      	ldr	r3, [r7, #12]
 801609a:	2b00      	cmp	r3, #0
 801609c:	d10a      	bne.n	80160b4 <vQueueDelete+0x28>
	__asm volatile
 801609e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80160a2:	f383 8811 	msr	BASEPRI, r3
 80160a6:	f3bf 8f6f 	isb	sy
 80160aa:	f3bf 8f4f 	dsb	sy
 80160ae:	60bb      	str	r3, [r7, #8]
}
 80160b0:	bf00      	nop
 80160b2:	e7fe      	b.n	80160b2 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80160b4:	68f8      	ldr	r0, [r7, #12]
 80160b6:	f000 f95f 	bl	8016378 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80160ba:	68fb      	ldr	r3, [r7, #12]
 80160bc:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80160c0:	2b00      	cmp	r3, #0
 80160c2:	d102      	bne.n	80160ca <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 80160c4:	68f8      	ldr	r0, [r7, #12]
 80160c6:	f7fe fd89 	bl	8014bdc <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80160ca:	bf00      	nop
 80160cc:	3710      	adds	r7, #16
 80160ce:	46bd      	mov	sp, r7
 80160d0:	bd80      	pop	{r7, pc}

080160d2 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80160d2:	b480      	push	{r7}
 80160d4:	b085      	sub	sp, #20
 80160d6:	af00      	add	r7, sp, #0
 80160d8:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80160da:	687b      	ldr	r3, [r7, #4]
 80160dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80160de:	2b00      	cmp	r3, #0
 80160e0:	d006      	beq.n	80160f0 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80160e2:	687b      	ldr	r3, [r7, #4]
 80160e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80160e6:	681b      	ldr	r3, [r3, #0]
 80160e8:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 80160ec:	60fb      	str	r3, [r7, #12]
 80160ee:	e001      	b.n	80160f4 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80160f0:	2300      	movs	r3, #0
 80160f2:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80160f4:	68fb      	ldr	r3, [r7, #12]
	}
 80160f6:	4618      	mov	r0, r3
 80160f8:	3714      	adds	r7, #20
 80160fa:	46bd      	mov	sp, r7
 80160fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016100:	4770      	bx	lr

08016102 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8016102:	b580      	push	{r7, lr}
 8016104:	b086      	sub	sp, #24
 8016106:	af00      	add	r7, sp, #0
 8016108:	60f8      	str	r0, [r7, #12]
 801610a:	60b9      	str	r1, [r7, #8]
 801610c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 801610e:	2300      	movs	r3, #0
 8016110:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8016112:	68fb      	ldr	r3, [r7, #12]
 8016114:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016116:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8016118:	68fb      	ldr	r3, [r7, #12]
 801611a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801611c:	2b00      	cmp	r3, #0
 801611e:	d10d      	bne.n	801613c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8016120:	68fb      	ldr	r3, [r7, #12]
 8016122:	681b      	ldr	r3, [r3, #0]
 8016124:	2b00      	cmp	r3, #0
 8016126:	d14d      	bne.n	80161c4 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8016128:	68fb      	ldr	r3, [r7, #12]
 801612a:	689b      	ldr	r3, [r3, #8]
 801612c:	4618      	mov	r0, r3
 801612e:	f001 f825 	bl	801717c <xTaskPriorityDisinherit>
 8016132:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8016134:	68fb      	ldr	r3, [r7, #12]
 8016136:	2200      	movs	r2, #0
 8016138:	609a      	str	r2, [r3, #8]
 801613a:	e043      	b.n	80161c4 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 801613c:	687b      	ldr	r3, [r7, #4]
 801613e:	2b00      	cmp	r3, #0
 8016140:	d119      	bne.n	8016176 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8016142:	68fb      	ldr	r3, [r7, #12]
 8016144:	6858      	ldr	r0, [r3, #4]
 8016146:	68fb      	ldr	r3, [r7, #12]
 8016148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801614a:	461a      	mov	r2, r3
 801614c:	68b9      	ldr	r1, [r7, #8]
 801614e:	f015 fc11 	bl	802b974 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8016152:	68fb      	ldr	r3, [r7, #12]
 8016154:	685a      	ldr	r2, [r3, #4]
 8016156:	68fb      	ldr	r3, [r7, #12]
 8016158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801615a:	441a      	add	r2, r3
 801615c:	68fb      	ldr	r3, [r7, #12]
 801615e:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8016160:	68fb      	ldr	r3, [r7, #12]
 8016162:	685a      	ldr	r2, [r3, #4]
 8016164:	68fb      	ldr	r3, [r7, #12]
 8016166:	689b      	ldr	r3, [r3, #8]
 8016168:	429a      	cmp	r2, r3
 801616a:	d32b      	bcc.n	80161c4 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 801616c:	68fb      	ldr	r3, [r7, #12]
 801616e:	681a      	ldr	r2, [r3, #0]
 8016170:	68fb      	ldr	r3, [r7, #12]
 8016172:	605a      	str	r2, [r3, #4]
 8016174:	e026      	b.n	80161c4 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8016176:	68fb      	ldr	r3, [r7, #12]
 8016178:	68d8      	ldr	r0, [r3, #12]
 801617a:	68fb      	ldr	r3, [r7, #12]
 801617c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801617e:	461a      	mov	r2, r3
 8016180:	68b9      	ldr	r1, [r7, #8]
 8016182:	f015 fbf7 	bl	802b974 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8016186:	68fb      	ldr	r3, [r7, #12]
 8016188:	68da      	ldr	r2, [r3, #12]
 801618a:	68fb      	ldr	r3, [r7, #12]
 801618c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801618e:	425b      	negs	r3, r3
 8016190:	441a      	add	r2, r3
 8016192:	68fb      	ldr	r3, [r7, #12]
 8016194:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8016196:	68fb      	ldr	r3, [r7, #12]
 8016198:	68da      	ldr	r2, [r3, #12]
 801619a:	68fb      	ldr	r3, [r7, #12]
 801619c:	681b      	ldr	r3, [r3, #0]
 801619e:	429a      	cmp	r2, r3
 80161a0:	d207      	bcs.n	80161b2 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80161a2:	68fb      	ldr	r3, [r7, #12]
 80161a4:	689a      	ldr	r2, [r3, #8]
 80161a6:	68fb      	ldr	r3, [r7, #12]
 80161a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80161aa:	425b      	negs	r3, r3
 80161ac:	441a      	add	r2, r3
 80161ae:	68fb      	ldr	r3, [r7, #12]
 80161b0:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80161b2:	687b      	ldr	r3, [r7, #4]
 80161b4:	2b02      	cmp	r3, #2
 80161b6:	d105      	bne.n	80161c4 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80161b8:	693b      	ldr	r3, [r7, #16]
 80161ba:	2b00      	cmp	r3, #0
 80161bc:	d002      	beq.n	80161c4 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80161be:	693b      	ldr	r3, [r7, #16]
 80161c0:	3b01      	subs	r3, #1
 80161c2:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80161c4:	693b      	ldr	r3, [r7, #16]
 80161c6:	1c5a      	adds	r2, r3, #1
 80161c8:	68fb      	ldr	r3, [r7, #12]
 80161ca:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80161cc:	697b      	ldr	r3, [r7, #20]
}
 80161ce:	4618      	mov	r0, r3
 80161d0:	3718      	adds	r7, #24
 80161d2:	46bd      	mov	sp, r7
 80161d4:	bd80      	pop	{r7, pc}

080161d6 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80161d6:	b580      	push	{r7, lr}
 80161d8:	b082      	sub	sp, #8
 80161da:	af00      	add	r7, sp, #0
 80161dc:	6078      	str	r0, [r7, #4]
 80161de:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80161e0:	687b      	ldr	r3, [r7, #4]
 80161e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80161e4:	2b00      	cmp	r3, #0
 80161e6:	d018      	beq.n	801621a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80161e8:	687b      	ldr	r3, [r7, #4]
 80161ea:	68da      	ldr	r2, [r3, #12]
 80161ec:	687b      	ldr	r3, [r7, #4]
 80161ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80161f0:	441a      	add	r2, r3
 80161f2:	687b      	ldr	r3, [r7, #4]
 80161f4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80161f6:	687b      	ldr	r3, [r7, #4]
 80161f8:	68da      	ldr	r2, [r3, #12]
 80161fa:	687b      	ldr	r3, [r7, #4]
 80161fc:	689b      	ldr	r3, [r3, #8]
 80161fe:	429a      	cmp	r2, r3
 8016200:	d303      	bcc.n	801620a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8016202:	687b      	ldr	r3, [r7, #4]
 8016204:	681a      	ldr	r2, [r3, #0]
 8016206:	687b      	ldr	r3, [r7, #4]
 8016208:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801620a:	687b      	ldr	r3, [r7, #4]
 801620c:	68d9      	ldr	r1, [r3, #12]
 801620e:	687b      	ldr	r3, [r7, #4]
 8016210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016212:	461a      	mov	r2, r3
 8016214:	6838      	ldr	r0, [r7, #0]
 8016216:	f015 fbad 	bl	802b974 <memcpy>
	}
}
 801621a:	bf00      	nop
 801621c:	3708      	adds	r7, #8
 801621e:	46bd      	mov	sp, r7
 8016220:	bd80      	pop	{r7, pc}

08016222 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8016222:	b580      	push	{r7, lr}
 8016224:	b084      	sub	sp, #16
 8016226:	af00      	add	r7, sp, #0
 8016228:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 801622a:	f7fe ffd3 	bl	80151d4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 801622e:	687b      	ldr	r3, [r7, #4]
 8016230:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8016234:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8016236:	e011      	b.n	801625c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8016238:	687b      	ldr	r3, [r7, #4]
 801623a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801623c:	2b00      	cmp	r3, #0
 801623e:	d012      	beq.n	8016266 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8016240:	687b      	ldr	r3, [r7, #4]
 8016242:	3324      	adds	r3, #36	; 0x24
 8016244:	4618      	mov	r0, r3
 8016246:	f000 fd55 	bl	8016cf4 <xTaskRemoveFromEventList>
 801624a:	4603      	mov	r3, r0
 801624c:	2b00      	cmp	r3, #0
 801624e:	d001      	beq.n	8016254 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8016250:	f000 fe2c 	bl	8016eac <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8016254:	7bfb      	ldrb	r3, [r7, #15]
 8016256:	3b01      	subs	r3, #1
 8016258:	b2db      	uxtb	r3, r3
 801625a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801625c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016260:	2b00      	cmp	r3, #0
 8016262:	dce9      	bgt.n	8016238 <prvUnlockQueue+0x16>
 8016264:	e000      	b.n	8016268 <prvUnlockQueue+0x46>
					break;
 8016266:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8016268:	687b      	ldr	r3, [r7, #4]
 801626a:	22ff      	movs	r2, #255	; 0xff
 801626c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8016270:	f7fe ffe0 	bl	8015234 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8016274:	f7fe ffae 	bl	80151d4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8016278:	687b      	ldr	r3, [r7, #4]
 801627a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801627e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8016280:	e011      	b.n	80162a6 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8016282:	687b      	ldr	r3, [r7, #4]
 8016284:	691b      	ldr	r3, [r3, #16]
 8016286:	2b00      	cmp	r3, #0
 8016288:	d012      	beq.n	80162b0 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801628a:	687b      	ldr	r3, [r7, #4]
 801628c:	3310      	adds	r3, #16
 801628e:	4618      	mov	r0, r3
 8016290:	f000 fd30 	bl	8016cf4 <xTaskRemoveFromEventList>
 8016294:	4603      	mov	r3, r0
 8016296:	2b00      	cmp	r3, #0
 8016298:	d001      	beq.n	801629e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 801629a:	f000 fe07 	bl	8016eac <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 801629e:	7bbb      	ldrb	r3, [r7, #14]
 80162a0:	3b01      	subs	r3, #1
 80162a2:	b2db      	uxtb	r3, r3
 80162a4:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80162a6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80162aa:	2b00      	cmp	r3, #0
 80162ac:	dce9      	bgt.n	8016282 <prvUnlockQueue+0x60>
 80162ae:	e000      	b.n	80162b2 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80162b0:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80162b2:	687b      	ldr	r3, [r7, #4]
 80162b4:	22ff      	movs	r2, #255	; 0xff
 80162b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80162ba:	f7fe ffbb 	bl	8015234 <vPortExitCritical>
}
 80162be:	bf00      	nop
 80162c0:	3710      	adds	r7, #16
 80162c2:	46bd      	mov	sp, r7
 80162c4:	bd80      	pop	{r7, pc}

080162c6 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80162c6:	b580      	push	{r7, lr}
 80162c8:	b084      	sub	sp, #16
 80162ca:	af00      	add	r7, sp, #0
 80162cc:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80162ce:	f7fe ff81 	bl	80151d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80162d2:	687b      	ldr	r3, [r7, #4]
 80162d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80162d6:	2b00      	cmp	r3, #0
 80162d8:	d102      	bne.n	80162e0 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80162da:	2301      	movs	r3, #1
 80162dc:	60fb      	str	r3, [r7, #12]
 80162de:	e001      	b.n	80162e4 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80162e0:	2300      	movs	r3, #0
 80162e2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80162e4:	f7fe ffa6 	bl	8015234 <vPortExitCritical>

	return xReturn;
 80162e8:	68fb      	ldr	r3, [r7, #12]
}
 80162ea:	4618      	mov	r0, r3
 80162ec:	3710      	adds	r7, #16
 80162ee:	46bd      	mov	sp, r7
 80162f0:	bd80      	pop	{r7, pc}

080162f2 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80162f2:	b580      	push	{r7, lr}
 80162f4:	b084      	sub	sp, #16
 80162f6:	af00      	add	r7, sp, #0
 80162f8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80162fa:	f7fe ff6b 	bl	80151d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80162fe:	687b      	ldr	r3, [r7, #4]
 8016300:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8016302:	687b      	ldr	r3, [r7, #4]
 8016304:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016306:	429a      	cmp	r2, r3
 8016308:	d102      	bne.n	8016310 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 801630a:	2301      	movs	r3, #1
 801630c:	60fb      	str	r3, [r7, #12]
 801630e:	e001      	b.n	8016314 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8016310:	2300      	movs	r3, #0
 8016312:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8016314:	f7fe ff8e 	bl	8015234 <vPortExitCritical>

	return xReturn;
 8016318:	68fb      	ldr	r3, [r7, #12]
}
 801631a:	4618      	mov	r0, r3
 801631c:	3710      	adds	r7, #16
 801631e:	46bd      	mov	sp, r7
 8016320:	bd80      	pop	{r7, pc}
	...

08016324 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8016324:	b480      	push	{r7}
 8016326:	b085      	sub	sp, #20
 8016328:	af00      	add	r7, sp, #0
 801632a:	6078      	str	r0, [r7, #4]
 801632c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801632e:	2300      	movs	r3, #0
 8016330:	60fb      	str	r3, [r7, #12]
 8016332:	e014      	b.n	801635e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8016334:	4a0f      	ldr	r2, [pc, #60]	; (8016374 <vQueueAddToRegistry+0x50>)
 8016336:	68fb      	ldr	r3, [r7, #12]
 8016338:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 801633c:	2b00      	cmp	r3, #0
 801633e:	d10b      	bne.n	8016358 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8016340:	490c      	ldr	r1, [pc, #48]	; (8016374 <vQueueAddToRegistry+0x50>)
 8016342:	68fb      	ldr	r3, [r7, #12]
 8016344:	683a      	ldr	r2, [r7, #0]
 8016346:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 801634a:	4a0a      	ldr	r2, [pc, #40]	; (8016374 <vQueueAddToRegistry+0x50>)
 801634c:	68fb      	ldr	r3, [r7, #12]
 801634e:	00db      	lsls	r3, r3, #3
 8016350:	4413      	add	r3, r2
 8016352:	687a      	ldr	r2, [r7, #4]
 8016354:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8016356:	e006      	b.n	8016366 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8016358:	68fb      	ldr	r3, [r7, #12]
 801635a:	3301      	adds	r3, #1
 801635c:	60fb      	str	r3, [r7, #12]
 801635e:	68fb      	ldr	r3, [r7, #12]
 8016360:	2b07      	cmp	r3, #7
 8016362:	d9e7      	bls.n	8016334 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8016364:	bf00      	nop
 8016366:	bf00      	nop
 8016368:	3714      	adds	r7, #20
 801636a:	46bd      	mov	sp, r7
 801636c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016370:	4770      	bx	lr
 8016372:	bf00      	nop
 8016374:	2400cef8 	.word	0x2400cef8

08016378 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8016378:	b480      	push	{r7}
 801637a:	b085      	sub	sp, #20
 801637c:	af00      	add	r7, sp, #0
 801637e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8016380:	2300      	movs	r3, #0
 8016382:	60fb      	str	r3, [r7, #12]
 8016384:	e016      	b.n	80163b4 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8016386:	4a10      	ldr	r2, [pc, #64]	; (80163c8 <vQueueUnregisterQueue+0x50>)
 8016388:	68fb      	ldr	r3, [r7, #12]
 801638a:	00db      	lsls	r3, r3, #3
 801638c:	4413      	add	r3, r2
 801638e:	685b      	ldr	r3, [r3, #4]
 8016390:	687a      	ldr	r2, [r7, #4]
 8016392:	429a      	cmp	r2, r3
 8016394:	d10b      	bne.n	80163ae <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8016396:	4a0c      	ldr	r2, [pc, #48]	; (80163c8 <vQueueUnregisterQueue+0x50>)
 8016398:	68fb      	ldr	r3, [r7, #12]
 801639a:	2100      	movs	r1, #0
 801639c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80163a0:	4a09      	ldr	r2, [pc, #36]	; (80163c8 <vQueueUnregisterQueue+0x50>)
 80163a2:	68fb      	ldr	r3, [r7, #12]
 80163a4:	00db      	lsls	r3, r3, #3
 80163a6:	4413      	add	r3, r2
 80163a8:	2200      	movs	r2, #0
 80163aa:	605a      	str	r2, [r3, #4]
				break;
 80163ac:	e006      	b.n	80163bc <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80163ae:	68fb      	ldr	r3, [r7, #12]
 80163b0:	3301      	adds	r3, #1
 80163b2:	60fb      	str	r3, [r7, #12]
 80163b4:	68fb      	ldr	r3, [r7, #12]
 80163b6:	2b07      	cmp	r3, #7
 80163b8:	d9e5      	bls.n	8016386 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80163ba:	bf00      	nop
 80163bc:	bf00      	nop
 80163be:	3714      	adds	r7, #20
 80163c0:	46bd      	mov	sp, r7
 80163c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80163c6:	4770      	bx	lr
 80163c8:	2400cef8 	.word	0x2400cef8

080163cc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80163cc:	b580      	push	{r7, lr}
 80163ce:	b086      	sub	sp, #24
 80163d0:	af00      	add	r7, sp, #0
 80163d2:	60f8      	str	r0, [r7, #12]
 80163d4:	60b9      	str	r1, [r7, #8]
 80163d6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80163d8:	68fb      	ldr	r3, [r7, #12]
 80163da:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80163dc:	f7fe fefa 	bl	80151d4 <vPortEnterCritical>
 80163e0:	697b      	ldr	r3, [r7, #20]
 80163e2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80163e6:	b25b      	sxtb	r3, r3
 80163e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80163ec:	d103      	bne.n	80163f6 <vQueueWaitForMessageRestricted+0x2a>
 80163ee:	697b      	ldr	r3, [r7, #20]
 80163f0:	2200      	movs	r2, #0
 80163f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80163f6:	697b      	ldr	r3, [r7, #20]
 80163f8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80163fc:	b25b      	sxtb	r3, r3
 80163fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016402:	d103      	bne.n	801640c <vQueueWaitForMessageRestricted+0x40>
 8016404:	697b      	ldr	r3, [r7, #20]
 8016406:	2200      	movs	r2, #0
 8016408:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801640c:	f7fe ff12 	bl	8015234 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8016410:	697b      	ldr	r3, [r7, #20]
 8016412:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016414:	2b00      	cmp	r3, #0
 8016416:	d106      	bne.n	8016426 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8016418:	697b      	ldr	r3, [r7, #20]
 801641a:	3324      	adds	r3, #36	; 0x24
 801641c:	687a      	ldr	r2, [r7, #4]
 801641e:	68b9      	ldr	r1, [r7, #8]
 8016420:	4618      	mov	r0, r3
 8016422:	f000 fc3b 	bl	8016c9c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8016426:	6978      	ldr	r0, [r7, #20]
 8016428:	f7ff fefb 	bl	8016222 <prvUnlockQueue>
	}
 801642c:	bf00      	nop
 801642e:	3718      	adds	r7, #24
 8016430:	46bd      	mov	sp, r7
 8016432:	bd80      	pop	{r7, pc}

08016434 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8016434:	b580      	push	{r7, lr}
 8016436:	b08e      	sub	sp, #56	; 0x38
 8016438:	af04      	add	r7, sp, #16
 801643a:	60f8      	str	r0, [r7, #12]
 801643c:	60b9      	str	r1, [r7, #8]
 801643e:	607a      	str	r2, [r7, #4]
 8016440:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8016442:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016444:	2b00      	cmp	r3, #0
 8016446:	d10a      	bne.n	801645e <xTaskCreateStatic+0x2a>
	__asm volatile
 8016448:	f04f 0350 	mov.w	r3, #80	; 0x50
 801644c:	f383 8811 	msr	BASEPRI, r3
 8016450:	f3bf 8f6f 	isb	sy
 8016454:	f3bf 8f4f 	dsb	sy
 8016458:	623b      	str	r3, [r7, #32]
}
 801645a:	bf00      	nop
 801645c:	e7fe      	b.n	801645c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 801645e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016460:	2b00      	cmp	r3, #0
 8016462:	d10a      	bne.n	801647a <xTaskCreateStatic+0x46>
	__asm volatile
 8016464:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016468:	f383 8811 	msr	BASEPRI, r3
 801646c:	f3bf 8f6f 	isb	sy
 8016470:	f3bf 8f4f 	dsb	sy
 8016474:	61fb      	str	r3, [r7, #28]
}
 8016476:	bf00      	nop
 8016478:	e7fe      	b.n	8016478 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 801647a:	235c      	movs	r3, #92	; 0x5c
 801647c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 801647e:	693b      	ldr	r3, [r7, #16]
 8016480:	2b5c      	cmp	r3, #92	; 0x5c
 8016482:	d00a      	beq.n	801649a <xTaskCreateStatic+0x66>
	__asm volatile
 8016484:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016488:	f383 8811 	msr	BASEPRI, r3
 801648c:	f3bf 8f6f 	isb	sy
 8016490:	f3bf 8f4f 	dsb	sy
 8016494:	61bb      	str	r3, [r7, #24]
}
 8016496:	bf00      	nop
 8016498:	e7fe      	b.n	8016498 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 801649a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 801649c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801649e:	2b00      	cmp	r3, #0
 80164a0:	d01e      	beq.n	80164e0 <xTaskCreateStatic+0xac>
 80164a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80164a4:	2b00      	cmp	r3, #0
 80164a6:	d01b      	beq.n	80164e0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80164a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80164aa:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80164ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80164ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80164b0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80164b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80164b4:	2202      	movs	r2, #2
 80164b6:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80164ba:	2300      	movs	r3, #0
 80164bc:	9303      	str	r3, [sp, #12]
 80164be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80164c0:	9302      	str	r3, [sp, #8]
 80164c2:	f107 0314 	add.w	r3, r7, #20
 80164c6:	9301      	str	r3, [sp, #4]
 80164c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80164ca:	9300      	str	r3, [sp, #0]
 80164cc:	683b      	ldr	r3, [r7, #0]
 80164ce:	687a      	ldr	r2, [r7, #4]
 80164d0:	68b9      	ldr	r1, [r7, #8]
 80164d2:	68f8      	ldr	r0, [r7, #12]
 80164d4:	f000 f850 	bl	8016578 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80164d8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80164da:	f000 f8dd 	bl	8016698 <prvAddNewTaskToReadyList>
 80164de:	e001      	b.n	80164e4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80164e0:	2300      	movs	r3, #0
 80164e2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80164e4:	697b      	ldr	r3, [r7, #20]
	}
 80164e6:	4618      	mov	r0, r3
 80164e8:	3728      	adds	r7, #40	; 0x28
 80164ea:	46bd      	mov	sp, r7
 80164ec:	bd80      	pop	{r7, pc}

080164ee <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80164ee:	b580      	push	{r7, lr}
 80164f0:	b08c      	sub	sp, #48	; 0x30
 80164f2:	af04      	add	r7, sp, #16
 80164f4:	60f8      	str	r0, [r7, #12]
 80164f6:	60b9      	str	r1, [r7, #8]
 80164f8:	603b      	str	r3, [r7, #0]
 80164fa:	4613      	mov	r3, r2
 80164fc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80164fe:	88fb      	ldrh	r3, [r7, #6]
 8016500:	009b      	lsls	r3, r3, #2
 8016502:	4618      	mov	r0, r3
 8016504:	f7fe fa9e 	bl	8014a44 <pvPortMalloc>
 8016508:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 801650a:	697b      	ldr	r3, [r7, #20]
 801650c:	2b00      	cmp	r3, #0
 801650e:	d00e      	beq.n	801652e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8016510:	205c      	movs	r0, #92	; 0x5c
 8016512:	f7fe fa97 	bl	8014a44 <pvPortMalloc>
 8016516:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8016518:	69fb      	ldr	r3, [r7, #28]
 801651a:	2b00      	cmp	r3, #0
 801651c:	d003      	beq.n	8016526 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 801651e:	69fb      	ldr	r3, [r7, #28]
 8016520:	697a      	ldr	r2, [r7, #20]
 8016522:	631a      	str	r2, [r3, #48]	; 0x30
 8016524:	e005      	b.n	8016532 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8016526:	6978      	ldr	r0, [r7, #20]
 8016528:	f7fe fb58 	bl	8014bdc <vPortFree>
 801652c:	e001      	b.n	8016532 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 801652e:	2300      	movs	r3, #0
 8016530:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8016532:	69fb      	ldr	r3, [r7, #28]
 8016534:	2b00      	cmp	r3, #0
 8016536:	d017      	beq.n	8016568 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8016538:	69fb      	ldr	r3, [r7, #28]
 801653a:	2200      	movs	r2, #0
 801653c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8016540:	88fa      	ldrh	r2, [r7, #6]
 8016542:	2300      	movs	r3, #0
 8016544:	9303      	str	r3, [sp, #12]
 8016546:	69fb      	ldr	r3, [r7, #28]
 8016548:	9302      	str	r3, [sp, #8]
 801654a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801654c:	9301      	str	r3, [sp, #4]
 801654e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016550:	9300      	str	r3, [sp, #0]
 8016552:	683b      	ldr	r3, [r7, #0]
 8016554:	68b9      	ldr	r1, [r7, #8]
 8016556:	68f8      	ldr	r0, [r7, #12]
 8016558:	f000 f80e 	bl	8016578 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801655c:	69f8      	ldr	r0, [r7, #28]
 801655e:	f000 f89b 	bl	8016698 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8016562:	2301      	movs	r3, #1
 8016564:	61bb      	str	r3, [r7, #24]
 8016566:	e002      	b.n	801656e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8016568:	f04f 33ff 	mov.w	r3, #4294967295
 801656c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 801656e:	69bb      	ldr	r3, [r7, #24]
	}
 8016570:	4618      	mov	r0, r3
 8016572:	3720      	adds	r7, #32
 8016574:	46bd      	mov	sp, r7
 8016576:	bd80      	pop	{r7, pc}

08016578 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8016578:	b580      	push	{r7, lr}
 801657a:	b088      	sub	sp, #32
 801657c:	af00      	add	r7, sp, #0
 801657e:	60f8      	str	r0, [r7, #12]
 8016580:	60b9      	str	r1, [r7, #8]
 8016582:	607a      	str	r2, [r7, #4]
 8016584:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8016586:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016588:	6b18      	ldr	r0, [r3, #48]	; 0x30
 801658a:	687b      	ldr	r3, [r7, #4]
 801658c:	009b      	lsls	r3, r3, #2
 801658e:	461a      	mov	r2, r3
 8016590:	21a5      	movs	r1, #165	; 0xa5
 8016592:	f015 f9fd 	bl	802b990 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8016596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016598:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801659a:	6879      	ldr	r1, [r7, #4]
 801659c:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80165a0:	440b      	add	r3, r1
 80165a2:	009b      	lsls	r3, r3, #2
 80165a4:	4413      	add	r3, r2
 80165a6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80165a8:	69bb      	ldr	r3, [r7, #24]
 80165aa:	f023 0307 	bic.w	r3, r3, #7
 80165ae:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80165b0:	69bb      	ldr	r3, [r7, #24]
 80165b2:	f003 0307 	and.w	r3, r3, #7
 80165b6:	2b00      	cmp	r3, #0
 80165b8:	d00a      	beq.n	80165d0 <prvInitialiseNewTask+0x58>
	__asm volatile
 80165ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80165be:	f383 8811 	msr	BASEPRI, r3
 80165c2:	f3bf 8f6f 	isb	sy
 80165c6:	f3bf 8f4f 	dsb	sy
 80165ca:	617b      	str	r3, [r7, #20]
}
 80165cc:	bf00      	nop
 80165ce:	e7fe      	b.n	80165ce <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80165d0:	68bb      	ldr	r3, [r7, #8]
 80165d2:	2b00      	cmp	r3, #0
 80165d4:	d01f      	beq.n	8016616 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80165d6:	2300      	movs	r3, #0
 80165d8:	61fb      	str	r3, [r7, #28]
 80165da:	e012      	b.n	8016602 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80165dc:	68ba      	ldr	r2, [r7, #8]
 80165de:	69fb      	ldr	r3, [r7, #28]
 80165e0:	4413      	add	r3, r2
 80165e2:	7819      	ldrb	r1, [r3, #0]
 80165e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80165e6:	69fb      	ldr	r3, [r7, #28]
 80165e8:	4413      	add	r3, r2
 80165ea:	3334      	adds	r3, #52	; 0x34
 80165ec:	460a      	mov	r2, r1
 80165ee:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80165f0:	68ba      	ldr	r2, [r7, #8]
 80165f2:	69fb      	ldr	r3, [r7, #28]
 80165f4:	4413      	add	r3, r2
 80165f6:	781b      	ldrb	r3, [r3, #0]
 80165f8:	2b00      	cmp	r3, #0
 80165fa:	d006      	beq.n	801660a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80165fc:	69fb      	ldr	r3, [r7, #28]
 80165fe:	3301      	adds	r3, #1
 8016600:	61fb      	str	r3, [r7, #28]
 8016602:	69fb      	ldr	r3, [r7, #28]
 8016604:	2b0f      	cmp	r3, #15
 8016606:	d9e9      	bls.n	80165dc <prvInitialiseNewTask+0x64>
 8016608:	e000      	b.n	801660c <prvInitialiseNewTask+0x94>
			{
				break;
 801660a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 801660c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801660e:	2200      	movs	r2, #0
 8016610:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8016614:	e003      	b.n	801661e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8016616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016618:	2200      	movs	r2, #0
 801661a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 801661e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016620:	2b37      	cmp	r3, #55	; 0x37
 8016622:	d901      	bls.n	8016628 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8016624:	2337      	movs	r3, #55	; 0x37
 8016626:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8016628:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801662a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801662c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 801662e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016630:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016632:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8016634:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016636:	2200      	movs	r2, #0
 8016638:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 801663a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801663c:	3304      	adds	r3, #4
 801663e:	4618      	mov	r0, r3
 8016640:	f7fe fc0a 	bl	8014e58 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8016644:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016646:	3318      	adds	r3, #24
 8016648:	4618      	mov	r0, r3
 801664a:	f7fe fc05 	bl	8014e58 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 801664e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016650:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016652:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8016654:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016656:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801665a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801665c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 801665e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016660:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016662:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8016664:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016666:	2200      	movs	r2, #0
 8016668:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801666a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801666c:	2200      	movs	r2, #0
 801666e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8016672:	683a      	ldr	r2, [r7, #0]
 8016674:	68f9      	ldr	r1, [r7, #12]
 8016676:	69b8      	ldr	r0, [r7, #24]
 8016678:	f7fe fc82 	bl	8014f80 <pxPortInitialiseStack>
 801667c:	4602      	mov	r2, r0
 801667e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016680:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8016682:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016684:	2b00      	cmp	r3, #0
 8016686:	d002      	beq.n	801668e <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8016688:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801668a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801668c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801668e:	bf00      	nop
 8016690:	3720      	adds	r7, #32
 8016692:	46bd      	mov	sp, r7
 8016694:	bd80      	pop	{r7, pc}
	...

08016698 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8016698:	b580      	push	{r7, lr}
 801669a:	b082      	sub	sp, #8
 801669c:	af00      	add	r7, sp, #0
 801669e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80166a0:	f7fe fd98 	bl	80151d4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80166a4:	4b2d      	ldr	r3, [pc, #180]	; (801675c <prvAddNewTaskToReadyList+0xc4>)
 80166a6:	681b      	ldr	r3, [r3, #0]
 80166a8:	3301      	adds	r3, #1
 80166aa:	4a2c      	ldr	r2, [pc, #176]	; (801675c <prvAddNewTaskToReadyList+0xc4>)
 80166ac:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80166ae:	4b2c      	ldr	r3, [pc, #176]	; (8016760 <prvAddNewTaskToReadyList+0xc8>)
 80166b0:	681b      	ldr	r3, [r3, #0]
 80166b2:	2b00      	cmp	r3, #0
 80166b4:	d109      	bne.n	80166ca <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80166b6:	4a2a      	ldr	r2, [pc, #168]	; (8016760 <prvAddNewTaskToReadyList+0xc8>)
 80166b8:	687b      	ldr	r3, [r7, #4]
 80166ba:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80166bc:	4b27      	ldr	r3, [pc, #156]	; (801675c <prvAddNewTaskToReadyList+0xc4>)
 80166be:	681b      	ldr	r3, [r3, #0]
 80166c0:	2b01      	cmp	r3, #1
 80166c2:	d110      	bne.n	80166e6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80166c4:	f000 fc16 	bl	8016ef4 <prvInitialiseTaskLists>
 80166c8:	e00d      	b.n	80166e6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80166ca:	4b26      	ldr	r3, [pc, #152]	; (8016764 <prvAddNewTaskToReadyList+0xcc>)
 80166cc:	681b      	ldr	r3, [r3, #0]
 80166ce:	2b00      	cmp	r3, #0
 80166d0:	d109      	bne.n	80166e6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80166d2:	4b23      	ldr	r3, [pc, #140]	; (8016760 <prvAddNewTaskToReadyList+0xc8>)
 80166d4:	681b      	ldr	r3, [r3, #0]
 80166d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80166d8:	687b      	ldr	r3, [r7, #4]
 80166da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80166dc:	429a      	cmp	r2, r3
 80166de:	d802      	bhi.n	80166e6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80166e0:	4a1f      	ldr	r2, [pc, #124]	; (8016760 <prvAddNewTaskToReadyList+0xc8>)
 80166e2:	687b      	ldr	r3, [r7, #4]
 80166e4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80166e6:	4b20      	ldr	r3, [pc, #128]	; (8016768 <prvAddNewTaskToReadyList+0xd0>)
 80166e8:	681b      	ldr	r3, [r3, #0]
 80166ea:	3301      	adds	r3, #1
 80166ec:	4a1e      	ldr	r2, [pc, #120]	; (8016768 <prvAddNewTaskToReadyList+0xd0>)
 80166ee:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80166f0:	4b1d      	ldr	r3, [pc, #116]	; (8016768 <prvAddNewTaskToReadyList+0xd0>)
 80166f2:	681a      	ldr	r2, [r3, #0]
 80166f4:	687b      	ldr	r3, [r7, #4]
 80166f6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80166f8:	687b      	ldr	r3, [r7, #4]
 80166fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80166fc:	4b1b      	ldr	r3, [pc, #108]	; (801676c <prvAddNewTaskToReadyList+0xd4>)
 80166fe:	681b      	ldr	r3, [r3, #0]
 8016700:	429a      	cmp	r2, r3
 8016702:	d903      	bls.n	801670c <prvAddNewTaskToReadyList+0x74>
 8016704:	687b      	ldr	r3, [r7, #4]
 8016706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016708:	4a18      	ldr	r2, [pc, #96]	; (801676c <prvAddNewTaskToReadyList+0xd4>)
 801670a:	6013      	str	r3, [r2, #0]
 801670c:	687b      	ldr	r3, [r7, #4]
 801670e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016710:	4613      	mov	r3, r2
 8016712:	009b      	lsls	r3, r3, #2
 8016714:	4413      	add	r3, r2
 8016716:	009b      	lsls	r3, r3, #2
 8016718:	4a15      	ldr	r2, [pc, #84]	; (8016770 <prvAddNewTaskToReadyList+0xd8>)
 801671a:	441a      	add	r2, r3
 801671c:	687b      	ldr	r3, [r7, #4]
 801671e:	3304      	adds	r3, #4
 8016720:	4619      	mov	r1, r3
 8016722:	4610      	mov	r0, r2
 8016724:	f7fe fba5 	bl	8014e72 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8016728:	f7fe fd84 	bl	8015234 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 801672c:	4b0d      	ldr	r3, [pc, #52]	; (8016764 <prvAddNewTaskToReadyList+0xcc>)
 801672e:	681b      	ldr	r3, [r3, #0]
 8016730:	2b00      	cmp	r3, #0
 8016732:	d00e      	beq.n	8016752 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8016734:	4b0a      	ldr	r3, [pc, #40]	; (8016760 <prvAddNewTaskToReadyList+0xc8>)
 8016736:	681b      	ldr	r3, [r3, #0]
 8016738:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801673a:	687b      	ldr	r3, [r7, #4]
 801673c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801673e:	429a      	cmp	r2, r3
 8016740:	d207      	bcs.n	8016752 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8016742:	4b0c      	ldr	r3, [pc, #48]	; (8016774 <prvAddNewTaskToReadyList+0xdc>)
 8016744:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016748:	601a      	str	r2, [r3, #0]
 801674a:	f3bf 8f4f 	dsb	sy
 801674e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8016752:	bf00      	nop
 8016754:	3708      	adds	r7, #8
 8016756:	46bd      	mov	sp, r7
 8016758:	bd80      	pop	{r7, pc}
 801675a:	bf00      	nop
 801675c:	2400c758 	.word	0x2400c758
 8016760:	2400c284 	.word	0x2400c284
 8016764:	2400c764 	.word	0x2400c764
 8016768:	2400c774 	.word	0x2400c774
 801676c:	2400c760 	.word	0x2400c760
 8016770:	2400c288 	.word	0x2400c288
 8016774:	e000ed04 	.word	0xe000ed04

08016778 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8016778:	b580      	push	{r7, lr}
 801677a:	b084      	sub	sp, #16
 801677c:	af00      	add	r7, sp, #0
 801677e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8016780:	2300      	movs	r3, #0
 8016782:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8016784:	687b      	ldr	r3, [r7, #4]
 8016786:	2b00      	cmp	r3, #0
 8016788:	d017      	beq.n	80167ba <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 801678a:	4b13      	ldr	r3, [pc, #76]	; (80167d8 <vTaskDelay+0x60>)
 801678c:	681b      	ldr	r3, [r3, #0]
 801678e:	2b00      	cmp	r3, #0
 8016790:	d00a      	beq.n	80167a8 <vTaskDelay+0x30>
	__asm volatile
 8016792:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016796:	f383 8811 	msr	BASEPRI, r3
 801679a:	f3bf 8f6f 	isb	sy
 801679e:	f3bf 8f4f 	dsb	sy
 80167a2:	60bb      	str	r3, [r7, #8]
}
 80167a4:	bf00      	nop
 80167a6:	e7fe      	b.n	80167a6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80167a8:	f000 f880 	bl	80168ac <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80167ac:	2100      	movs	r1, #0
 80167ae:	6878      	ldr	r0, [r7, #4]
 80167b0:	f000 fde8 	bl	8017384 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80167b4:	f000 f888 	bl	80168c8 <xTaskResumeAll>
 80167b8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80167ba:	68fb      	ldr	r3, [r7, #12]
 80167bc:	2b00      	cmp	r3, #0
 80167be:	d107      	bne.n	80167d0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80167c0:	4b06      	ldr	r3, [pc, #24]	; (80167dc <vTaskDelay+0x64>)
 80167c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80167c6:	601a      	str	r2, [r3, #0]
 80167c8:	f3bf 8f4f 	dsb	sy
 80167cc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80167d0:	bf00      	nop
 80167d2:	3710      	adds	r7, #16
 80167d4:	46bd      	mov	sp, r7
 80167d6:	bd80      	pop	{r7, pc}
 80167d8:	2400c780 	.word	0x2400c780
 80167dc:	e000ed04 	.word	0xe000ed04

080167e0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80167e0:	b580      	push	{r7, lr}
 80167e2:	b08a      	sub	sp, #40	; 0x28
 80167e4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80167e6:	2300      	movs	r3, #0
 80167e8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80167ea:	2300      	movs	r3, #0
 80167ec:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80167ee:	463a      	mov	r2, r7
 80167f0:	1d39      	adds	r1, r7, #4
 80167f2:	f107 0308 	add.w	r3, r7, #8
 80167f6:	4618      	mov	r0, r3
 80167f8:	f7fe f8f0 	bl	80149dc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80167fc:	6839      	ldr	r1, [r7, #0]
 80167fe:	687b      	ldr	r3, [r7, #4]
 8016800:	68ba      	ldr	r2, [r7, #8]
 8016802:	9202      	str	r2, [sp, #8]
 8016804:	9301      	str	r3, [sp, #4]
 8016806:	2300      	movs	r3, #0
 8016808:	9300      	str	r3, [sp, #0]
 801680a:	2300      	movs	r3, #0
 801680c:	460a      	mov	r2, r1
 801680e:	4921      	ldr	r1, [pc, #132]	; (8016894 <vTaskStartScheduler+0xb4>)
 8016810:	4821      	ldr	r0, [pc, #132]	; (8016898 <vTaskStartScheduler+0xb8>)
 8016812:	f7ff fe0f 	bl	8016434 <xTaskCreateStatic>
 8016816:	4603      	mov	r3, r0
 8016818:	4a20      	ldr	r2, [pc, #128]	; (801689c <vTaskStartScheduler+0xbc>)
 801681a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 801681c:	4b1f      	ldr	r3, [pc, #124]	; (801689c <vTaskStartScheduler+0xbc>)
 801681e:	681b      	ldr	r3, [r3, #0]
 8016820:	2b00      	cmp	r3, #0
 8016822:	d002      	beq.n	801682a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8016824:	2301      	movs	r3, #1
 8016826:	617b      	str	r3, [r7, #20]
 8016828:	e001      	b.n	801682e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 801682a:	2300      	movs	r3, #0
 801682c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 801682e:	697b      	ldr	r3, [r7, #20]
 8016830:	2b01      	cmp	r3, #1
 8016832:	d102      	bne.n	801683a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8016834:	f000 fdfa 	bl	801742c <xTimerCreateTimerTask>
 8016838:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 801683a:	697b      	ldr	r3, [r7, #20]
 801683c:	2b01      	cmp	r3, #1
 801683e:	d116      	bne.n	801686e <vTaskStartScheduler+0x8e>
	__asm volatile
 8016840:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016844:	f383 8811 	msr	BASEPRI, r3
 8016848:	f3bf 8f6f 	isb	sy
 801684c:	f3bf 8f4f 	dsb	sy
 8016850:	613b      	str	r3, [r7, #16]
}
 8016852:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8016854:	4b12      	ldr	r3, [pc, #72]	; (80168a0 <vTaskStartScheduler+0xc0>)
 8016856:	f04f 32ff 	mov.w	r2, #4294967295
 801685a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 801685c:	4b11      	ldr	r3, [pc, #68]	; (80168a4 <vTaskStartScheduler+0xc4>)
 801685e:	2201      	movs	r2, #1
 8016860:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8016862:	4b11      	ldr	r3, [pc, #68]	; (80168a8 <vTaskStartScheduler+0xc8>)
 8016864:	2200      	movs	r2, #0
 8016866:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8016868:	f7fe fc12 	bl	8015090 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 801686c:	e00e      	b.n	801688c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 801686e:	697b      	ldr	r3, [r7, #20]
 8016870:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016874:	d10a      	bne.n	801688c <vTaskStartScheduler+0xac>
	__asm volatile
 8016876:	f04f 0350 	mov.w	r3, #80	; 0x50
 801687a:	f383 8811 	msr	BASEPRI, r3
 801687e:	f3bf 8f6f 	isb	sy
 8016882:	f3bf 8f4f 	dsb	sy
 8016886:	60fb      	str	r3, [r7, #12]
}
 8016888:	bf00      	nop
 801688a:	e7fe      	b.n	801688a <vTaskStartScheduler+0xaa>
}
 801688c:	bf00      	nop
 801688e:	3718      	adds	r7, #24
 8016890:	46bd      	mov	sp, r7
 8016892:	bd80      	pop	{r7, pc}
 8016894:	0802d808 	.word	0x0802d808
 8016898:	08016ec5 	.word	0x08016ec5
 801689c:	2400c77c 	.word	0x2400c77c
 80168a0:	2400c778 	.word	0x2400c778
 80168a4:	2400c764 	.word	0x2400c764
 80168a8:	2400c75c 	.word	0x2400c75c

080168ac <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80168ac:	b480      	push	{r7}
 80168ae:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80168b0:	4b04      	ldr	r3, [pc, #16]	; (80168c4 <vTaskSuspendAll+0x18>)
 80168b2:	681b      	ldr	r3, [r3, #0]
 80168b4:	3301      	adds	r3, #1
 80168b6:	4a03      	ldr	r2, [pc, #12]	; (80168c4 <vTaskSuspendAll+0x18>)
 80168b8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80168ba:	bf00      	nop
 80168bc:	46bd      	mov	sp, r7
 80168be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168c2:	4770      	bx	lr
 80168c4:	2400c780 	.word	0x2400c780

080168c8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80168c8:	b580      	push	{r7, lr}
 80168ca:	b084      	sub	sp, #16
 80168cc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80168ce:	2300      	movs	r3, #0
 80168d0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80168d2:	2300      	movs	r3, #0
 80168d4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80168d6:	4b42      	ldr	r3, [pc, #264]	; (80169e0 <xTaskResumeAll+0x118>)
 80168d8:	681b      	ldr	r3, [r3, #0]
 80168da:	2b00      	cmp	r3, #0
 80168dc:	d10a      	bne.n	80168f4 <xTaskResumeAll+0x2c>
	__asm volatile
 80168de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80168e2:	f383 8811 	msr	BASEPRI, r3
 80168e6:	f3bf 8f6f 	isb	sy
 80168ea:	f3bf 8f4f 	dsb	sy
 80168ee:	603b      	str	r3, [r7, #0]
}
 80168f0:	bf00      	nop
 80168f2:	e7fe      	b.n	80168f2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80168f4:	f7fe fc6e 	bl	80151d4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80168f8:	4b39      	ldr	r3, [pc, #228]	; (80169e0 <xTaskResumeAll+0x118>)
 80168fa:	681b      	ldr	r3, [r3, #0]
 80168fc:	3b01      	subs	r3, #1
 80168fe:	4a38      	ldr	r2, [pc, #224]	; (80169e0 <xTaskResumeAll+0x118>)
 8016900:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8016902:	4b37      	ldr	r3, [pc, #220]	; (80169e0 <xTaskResumeAll+0x118>)
 8016904:	681b      	ldr	r3, [r3, #0]
 8016906:	2b00      	cmp	r3, #0
 8016908:	d162      	bne.n	80169d0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 801690a:	4b36      	ldr	r3, [pc, #216]	; (80169e4 <xTaskResumeAll+0x11c>)
 801690c:	681b      	ldr	r3, [r3, #0]
 801690e:	2b00      	cmp	r3, #0
 8016910:	d05e      	beq.n	80169d0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8016912:	e02f      	b.n	8016974 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8016914:	4b34      	ldr	r3, [pc, #208]	; (80169e8 <xTaskResumeAll+0x120>)
 8016916:	68db      	ldr	r3, [r3, #12]
 8016918:	68db      	ldr	r3, [r3, #12]
 801691a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801691c:	68fb      	ldr	r3, [r7, #12]
 801691e:	3318      	adds	r3, #24
 8016920:	4618      	mov	r0, r3
 8016922:	f7fe fb03 	bl	8014f2c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8016926:	68fb      	ldr	r3, [r7, #12]
 8016928:	3304      	adds	r3, #4
 801692a:	4618      	mov	r0, r3
 801692c:	f7fe fafe 	bl	8014f2c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8016930:	68fb      	ldr	r3, [r7, #12]
 8016932:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016934:	4b2d      	ldr	r3, [pc, #180]	; (80169ec <xTaskResumeAll+0x124>)
 8016936:	681b      	ldr	r3, [r3, #0]
 8016938:	429a      	cmp	r2, r3
 801693a:	d903      	bls.n	8016944 <xTaskResumeAll+0x7c>
 801693c:	68fb      	ldr	r3, [r7, #12]
 801693e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016940:	4a2a      	ldr	r2, [pc, #168]	; (80169ec <xTaskResumeAll+0x124>)
 8016942:	6013      	str	r3, [r2, #0]
 8016944:	68fb      	ldr	r3, [r7, #12]
 8016946:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016948:	4613      	mov	r3, r2
 801694a:	009b      	lsls	r3, r3, #2
 801694c:	4413      	add	r3, r2
 801694e:	009b      	lsls	r3, r3, #2
 8016950:	4a27      	ldr	r2, [pc, #156]	; (80169f0 <xTaskResumeAll+0x128>)
 8016952:	441a      	add	r2, r3
 8016954:	68fb      	ldr	r3, [r7, #12]
 8016956:	3304      	adds	r3, #4
 8016958:	4619      	mov	r1, r3
 801695a:	4610      	mov	r0, r2
 801695c:	f7fe fa89 	bl	8014e72 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8016960:	68fb      	ldr	r3, [r7, #12]
 8016962:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016964:	4b23      	ldr	r3, [pc, #140]	; (80169f4 <xTaskResumeAll+0x12c>)
 8016966:	681b      	ldr	r3, [r3, #0]
 8016968:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801696a:	429a      	cmp	r2, r3
 801696c:	d302      	bcc.n	8016974 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 801696e:	4b22      	ldr	r3, [pc, #136]	; (80169f8 <xTaskResumeAll+0x130>)
 8016970:	2201      	movs	r2, #1
 8016972:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8016974:	4b1c      	ldr	r3, [pc, #112]	; (80169e8 <xTaskResumeAll+0x120>)
 8016976:	681b      	ldr	r3, [r3, #0]
 8016978:	2b00      	cmp	r3, #0
 801697a:	d1cb      	bne.n	8016914 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 801697c:	68fb      	ldr	r3, [r7, #12]
 801697e:	2b00      	cmp	r3, #0
 8016980:	d001      	beq.n	8016986 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8016982:	f000 fb55 	bl	8017030 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8016986:	4b1d      	ldr	r3, [pc, #116]	; (80169fc <xTaskResumeAll+0x134>)
 8016988:	681b      	ldr	r3, [r3, #0]
 801698a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 801698c:	687b      	ldr	r3, [r7, #4]
 801698e:	2b00      	cmp	r3, #0
 8016990:	d010      	beq.n	80169b4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8016992:	f000 f847 	bl	8016a24 <xTaskIncrementTick>
 8016996:	4603      	mov	r3, r0
 8016998:	2b00      	cmp	r3, #0
 801699a:	d002      	beq.n	80169a2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 801699c:	4b16      	ldr	r3, [pc, #88]	; (80169f8 <xTaskResumeAll+0x130>)
 801699e:	2201      	movs	r2, #1
 80169a0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80169a2:	687b      	ldr	r3, [r7, #4]
 80169a4:	3b01      	subs	r3, #1
 80169a6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80169a8:	687b      	ldr	r3, [r7, #4]
 80169aa:	2b00      	cmp	r3, #0
 80169ac:	d1f1      	bne.n	8016992 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80169ae:	4b13      	ldr	r3, [pc, #76]	; (80169fc <xTaskResumeAll+0x134>)
 80169b0:	2200      	movs	r2, #0
 80169b2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80169b4:	4b10      	ldr	r3, [pc, #64]	; (80169f8 <xTaskResumeAll+0x130>)
 80169b6:	681b      	ldr	r3, [r3, #0]
 80169b8:	2b00      	cmp	r3, #0
 80169ba:	d009      	beq.n	80169d0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80169bc:	2301      	movs	r3, #1
 80169be:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80169c0:	4b0f      	ldr	r3, [pc, #60]	; (8016a00 <xTaskResumeAll+0x138>)
 80169c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80169c6:	601a      	str	r2, [r3, #0]
 80169c8:	f3bf 8f4f 	dsb	sy
 80169cc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80169d0:	f7fe fc30 	bl	8015234 <vPortExitCritical>

	return xAlreadyYielded;
 80169d4:	68bb      	ldr	r3, [r7, #8]
}
 80169d6:	4618      	mov	r0, r3
 80169d8:	3710      	adds	r7, #16
 80169da:	46bd      	mov	sp, r7
 80169dc:	bd80      	pop	{r7, pc}
 80169de:	bf00      	nop
 80169e0:	2400c780 	.word	0x2400c780
 80169e4:	2400c758 	.word	0x2400c758
 80169e8:	2400c718 	.word	0x2400c718
 80169ec:	2400c760 	.word	0x2400c760
 80169f0:	2400c288 	.word	0x2400c288
 80169f4:	2400c284 	.word	0x2400c284
 80169f8:	2400c76c 	.word	0x2400c76c
 80169fc:	2400c768 	.word	0x2400c768
 8016a00:	e000ed04 	.word	0xe000ed04

08016a04 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8016a04:	b480      	push	{r7}
 8016a06:	b083      	sub	sp, #12
 8016a08:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8016a0a:	4b05      	ldr	r3, [pc, #20]	; (8016a20 <xTaskGetTickCount+0x1c>)
 8016a0c:	681b      	ldr	r3, [r3, #0]
 8016a0e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8016a10:	687b      	ldr	r3, [r7, #4]
}
 8016a12:	4618      	mov	r0, r3
 8016a14:	370c      	adds	r7, #12
 8016a16:	46bd      	mov	sp, r7
 8016a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a1c:	4770      	bx	lr
 8016a1e:	bf00      	nop
 8016a20:	2400c75c 	.word	0x2400c75c

08016a24 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8016a24:	b580      	push	{r7, lr}
 8016a26:	b086      	sub	sp, #24
 8016a28:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8016a2a:	2300      	movs	r3, #0
 8016a2c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8016a2e:	4b4f      	ldr	r3, [pc, #316]	; (8016b6c <xTaskIncrementTick+0x148>)
 8016a30:	681b      	ldr	r3, [r3, #0]
 8016a32:	2b00      	cmp	r3, #0
 8016a34:	f040 808f 	bne.w	8016b56 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8016a38:	4b4d      	ldr	r3, [pc, #308]	; (8016b70 <xTaskIncrementTick+0x14c>)
 8016a3a:	681b      	ldr	r3, [r3, #0]
 8016a3c:	3301      	adds	r3, #1
 8016a3e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8016a40:	4a4b      	ldr	r2, [pc, #300]	; (8016b70 <xTaskIncrementTick+0x14c>)
 8016a42:	693b      	ldr	r3, [r7, #16]
 8016a44:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8016a46:	693b      	ldr	r3, [r7, #16]
 8016a48:	2b00      	cmp	r3, #0
 8016a4a:	d120      	bne.n	8016a8e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8016a4c:	4b49      	ldr	r3, [pc, #292]	; (8016b74 <xTaskIncrementTick+0x150>)
 8016a4e:	681b      	ldr	r3, [r3, #0]
 8016a50:	681b      	ldr	r3, [r3, #0]
 8016a52:	2b00      	cmp	r3, #0
 8016a54:	d00a      	beq.n	8016a6c <xTaskIncrementTick+0x48>
	__asm volatile
 8016a56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016a5a:	f383 8811 	msr	BASEPRI, r3
 8016a5e:	f3bf 8f6f 	isb	sy
 8016a62:	f3bf 8f4f 	dsb	sy
 8016a66:	603b      	str	r3, [r7, #0]
}
 8016a68:	bf00      	nop
 8016a6a:	e7fe      	b.n	8016a6a <xTaskIncrementTick+0x46>
 8016a6c:	4b41      	ldr	r3, [pc, #260]	; (8016b74 <xTaskIncrementTick+0x150>)
 8016a6e:	681b      	ldr	r3, [r3, #0]
 8016a70:	60fb      	str	r3, [r7, #12]
 8016a72:	4b41      	ldr	r3, [pc, #260]	; (8016b78 <xTaskIncrementTick+0x154>)
 8016a74:	681b      	ldr	r3, [r3, #0]
 8016a76:	4a3f      	ldr	r2, [pc, #252]	; (8016b74 <xTaskIncrementTick+0x150>)
 8016a78:	6013      	str	r3, [r2, #0]
 8016a7a:	4a3f      	ldr	r2, [pc, #252]	; (8016b78 <xTaskIncrementTick+0x154>)
 8016a7c:	68fb      	ldr	r3, [r7, #12]
 8016a7e:	6013      	str	r3, [r2, #0]
 8016a80:	4b3e      	ldr	r3, [pc, #248]	; (8016b7c <xTaskIncrementTick+0x158>)
 8016a82:	681b      	ldr	r3, [r3, #0]
 8016a84:	3301      	adds	r3, #1
 8016a86:	4a3d      	ldr	r2, [pc, #244]	; (8016b7c <xTaskIncrementTick+0x158>)
 8016a88:	6013      	str	r3, [r2, #0]
 8016a8a:	f000 fad1 	bl	8017030 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8016a8e:	4b3c      	ldr	r3, [pc, #240]	; (8016b80 <xTaskIncrementTick+0x15c>)
 8016a90:	681b      	ldr	r3, [r3, #0]
 8016a92:	693a      	ldr	r2, [r7, #16]
 8016a94:	429a      	cmp	r2, r3
 8016a96:	d349      	bcc.n	8016b2c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8016a98:	4b36      	ldr	r3, [pc, #216]	; (8016b74 <xTaskIncrementTick+0x150>)
 8016a9a:	681b      	ldr	r3, [r3, #0]
 8016a9c:	681b      	ldr	r3, [r3, #0]
 8016a9e:	2b00      	cmp	r3, #0
 8016aa0:	d104      	bne.n	8016aac <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8016aa2:	4b37      	ldr	r3, [pc, #220]	; (8016b80 <xTaskIncrementTick+0x15c>)
 8016aa4:	f04f 32ff 	mov.w	r2, #4294967295
 8016aa8:	601a      	str	r2, [r3, #0]
					break;
 8016aaa:	e03f      	b.n	8016b2c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8016aac:	4b31      	ldr	r3, [pc, #196]	; (8016b74 <xTaskIncrementTick+0x150>)
 8016aae:	681b      	ldr	r3, [r3, #0]
 8016ab0:	68db      	ldr	r3, [r3, #12]
 8016ab2:	68db      	ldr	r3, [r3, #12]
 8016ab4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8016ab6:	68bb      	ldr	r3, [r7, #8]
 8016ab8:	685b      	ldr	r3, [r3, #4]
 8016aba:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8016abc:	693a      	ldr	r2, [r7, #16]
 8016abe:	687b      	ldr	r3, [r7, #4]
 8016ac0:	429a      	cmp	r2, r3
 8016ac2:	d203      	bcs.n	8016acc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8016ac4:	4a2e      	ldr	r2, [pc, #184]	; (8016b80 <xTaskIncrementTick+0x15c>)
 8016ac6:	687b      	ldr	r3, [r7, #4]
 8016ac8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8016aca:	e02f      	b.n	8016b2c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8016acc:	68bb      	ldr	r3, [r7, #8]
 8016ace:	3304      	adds	r3, #4
 8016ad0:	4618      	mov	r0, r3
 8016ad2:	f7fe fa2b 	bl	8014f2c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8016ad6:	68bb      	ldr	r3, [r7, #8]
 8016ad8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016ada:	2b00      	cmp	r3, #0
 8016adc:	d004      	beq.n	8016ae8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8016ade:	68bb      	ldr	r3, [r7, #8]
 8016ae0:	3318      	adds	r3, #24
 8016ae2:	4618      	mov	r0, r3
 8016ae4:	f7fe fa22 	bl	8014f2c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8016ae8:	68bb      	ldr	r3, [r7, #8]
 8016aea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016aec:	4b25      	ldr	r3, [pc, #148]	; (8016b84 <xTaskIncrementTick+0x160>)
 8016aee:	681b      	ldr	r3, [r3, #0]
 8016af0:	429a      	cmp	r2, r3
 8016af2:	d903      	bls.n	8016afc <xTaskIncrementTick+0xd8>
 8016af4:	68bb      	ldr	r3, [r7, #8]
 8016af6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016af8:	4a22      	ldr	r2, [pc, #136]	; (8016b84 <xTaskIncrementTick+0x160>)
 8016afa:	6013      	str	r3, [r2, #0]
 8016afc:	68bb      	ldr	r3, [r7, #8]
 8016afe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016b00:	4613      	mov	r3, r2
 8016b02:	009b      	lsls	r3, r3, #2
 8016b04:	4413      	add	r3, r2
 8016b06:	009b      	lsls	r3, r3, #2
 8016b08:	4a1f      	ldr	r2, [pc, #124]	; (8016b88 <xTaskIncrementTick+0x164>)
 8016b0a:	441a      	add	r2, r3
 8016b0c:	68bb      	ldr	r3, [r7, #8]
 8016b0e:	3304      	adds	r3, #4
 8016b10:	4619      	mov	r1, r3
 8016b12:	4610      	mov	r0, r2
 8016b14:	f7fe f9ad 	bl	8014e72 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8016b18:	68bb      	ldr	r3, [r7, #8]
 8016b1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016b1c:	4b1b      	ldr	r3, [pc, #108]	; (8016b8c <xTaskIncrementTick+0x168>)
 8016b1e:	681b      	ldr	r3, [r3, #0]
 8016b20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016b22:	429a      	cmp	r2, r3
 8016b24:	d3b8      	bcc.n	8016a98 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8016b26:	2301      	movs	r3, #1
 8016b28:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8016b2a:	e7b5      	b.n	8016a98 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8016b2c:	4b17      	ldr	r3, [pc, #92]	; (8016b8c <xTaskIncrementTick+0x168>)
 8016b2e:	681b      	ldr	r3, [r3, #0]
 8016b30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016b32:	4915      	ldr	r1, [pc, #84]	; (8016b88 <xTaskIncrementTick+0x164>)
 8016b34:	4613      	mov	r3, r2
 8016b36:	009b      	lsls	r3, r3, #2
 8016b38:	4413      	add	r3, r2
 8016b3a:	009b      	lsls	r3, r3, #2
 8016b3c:	440b      	add	r3, r1
 8016b3e:	681b      	ldr	r3, [r3, #0]
 8016b40:	2b01      	cmp	r3, #1
 8016b42:	d901      	bls.n	8016b48 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8016b44:	2301      	movs	r3, #1
 8016b46:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8016b48:	4b11      	ldr	r3, [pc, #68]	; (8016b90 <xTaskIncrementTick+0x16c>)
 8016b4a:	681b      	ldr	r3, [r3, #0]
 8016b4c:	2b00      	cmp	r3, #0
 8016b4e:	d007      	beq.n	8016b60 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8016b50:	2301      	movs	r3, #1
 8016b52:	617b      	str	r3, [r7, #20]
 8016b54:	e004      	b.n	8016b60 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8016b56:	4b0f      	ldr	r3, [pc, #60]	; (8016b94 <xTaskIncrementTick+0x170>)
 8016b58:	681b      	ldr	r3, [r3, #0]
 8016b5a:	3301      	adds	r3, #1
 8016b5c:	4a0d      	ldr	r2, [pc, #52]	; (8016b94 <xTaskIncrementTick+0x170>)
 8016b5e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8016b60:	697b      	ldr	r3, [r7, #20]
}
 8016b62:	4618      	mov	r0, r3
 8016b64:	3718      	adds	r7, #24
 8016b66:	46bd      	mov	sp, r7
 8016b68:	bd80      	pop	{r7, pc}
 8016b6a:	bf00      	nop
 8016b6c:	2400c780 	.word	0x2400c780
 8016b70:	2400c75c 	.word	0x2400c75c
 8016b74:	2400c710 	.word	0x2400c710
 8016b78:	2400c714 	.word	0x2400c714
 8016b7c:	2400c770 	.word	0x2400c770
 8016b80:	2400c778 	.word	0x2400c778
 8016b84:	2400c760 	.word	0x2400c760
 8016b88:	2400c288 	.word	0x2400c288
 8016b8c:	2400c284 	.word	0x2400c284
 8016b90:	2400c76c 	.word	0x2400c76c
 8016b94:	2400c768 	.word	0x2400c768

08016b98 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8016b98:	b480      	push	{r7}
 8016b9a:	b085      	sub	sp, #20
 8016b9c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8016b9e:	4b28      	ldr	r3, [pc, #160]	; (8016c40 <vTaskSwitchContext+0xa8>)
 8016ba0:	681b      	ldr	r3, [r3, #0]
 8016ba2:	2b00      	cmp	r3, #0
 8016ba4:	d003      	beq.n	8016bae <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8016ba6:	4b27      	ldr	r3, [pc, #156]	; (8016c44 <vTaskSwitchContext+0xac>)
 8016ba8:	2201      	movs	r2, #1
 8016baa:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8016bac:	e041      	b.n	8016c32 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8016bae:	4b25      	ldr	r3, [pc, #148]	; (8016c44 <vTaskSwitchContext+0xac>)
 8016bb0:	2200      	movs	r2, #0
 8016bb2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8016bb4:	4b24      	ldr	r3, [pc, #144]	; (8016c48 <vTaskSwitchContext+0xb0>)
 8016bb6:	681b      	ldr	r3, [r3, #0]
 8016bb8:	60fb      	str	r3, [r7, #12]
 8016bba:	e010      	b.n	8016bde <vTaskSwitchContext+0x46>
 8016bbc:	68fb      	ldr	r3, [r7, #12]
 8016bbe:	2b00      	cmp	r3, #0
 8016bc0:	d10a      	bne.n	8016bd8 <vTaskSwitchContext+0x40>
	__asm volatile
 8016bc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016bc6:	f383 8811 	msr	BASEPRI, r3
 8016bca:	f3bf 8f6f 	isb	sy
 8016bce:	f3bf 8f4f 	dsb	sy
 8016bd2:	607b      	str	r3, [r7, #4]
}
 8016bd4:	bf00      	nop
 8016bd6:	e7fe      	b.n	8016bd6 <vTaskSwitchContext+0x3e>
 8016bd8:	68fb      	ldr	r3, [r7, #12]
 8016bda:	3b01      	subs	r3, #1
 8016bdc:	60fb      	str	r3, [r7, #12]
 8016bde:	491b      	ldr	r1, [pc, #108]	; (8016c4c <vTaskSwitchContext+0xb4>)
 8016be0:	68fa      	ldr	r2, [r7, #12]
 8016be2:	4613      	mov	r3, r2
 8016be4:	009b      	lsls	r3, r3, #2
 8016be6:	4413      	add	r3, r2
 8016be8:	009b      	lsls	r3, r3, #2
 8016bea:	440b      	add	r3, r1
 8016bec:	681b      	ldr	r3, [r3, #0]
 8016bee:	2b00      	cmp	r3, #0
 8016bf0:	d0e4      	beq.n	8016bbc <vTaskSwitchContext+0x24>
 8016bf2:	68fa      	ldr	r2, [r7, #12]
 8016bf4:	4613      	mov	r3, r2
 8016bf6:	009b      	lsls	r3, r3, #2
 8016bf8:	4413      	add	r3, r2
 8016bfa:	009b      	lsls	r3, r3, #2
 8016bfc:	4a13      	ldr	r2, [pc, #76]	; (8016c4c <vTaskSwitchContext+0xb4>)
 8016bfe:	4413      	add	r3, r2
 8016c00:	60bb      	str	r3, [r7, #8]
 8016c02:	68bb      	ldr	r3, [r7, #8]
 8016c04:	685b      	ldr	r3, [r3, #4]
 8016c06:	685a      	ldr	r2, [r3, #4]
 8016c08:	68bb      	ldr	r3, [r7, #8]
 8016c0a:	605a      	str	r2, [r3, #4]
 8016c0c:	68bb      	ldr	r3, [r7, #8]
 8016c0e:	685a      	ldr	r2, [r3, #4]
 8016c10:	68bb      	ldr	r3, [r7, #8]
 8016c12:	3308      	adds	r3, #8
 8016c14:	429a      	cmp	r2, r3
 8016c16:	d104      	bne.n	8016c22 <vTaskSwitchContext+0x8a>
 8016c18:	68bb      	ldr	r3, [r7, #8]
 8016c1a:	685b      	ldr	r3, [r3, #4]
 8016c1c:	685a      	ldr	r2, [r3, #4]
 8016c1e:	68bb      	ldr	r3, [r7, #8]
 8016c20:	605a      	str	r2, [r3, #4]
 8016c22:	68bb      	ldr	r3, [r7, #8]
 8016c24:	685b      	ldr	r3, [r3, #4]
 8016c26:	68db      	ldr	r3, [r3, #12]
 8016c28:	4a09      	ldr	r2, [pc, #36]	; (8016c50 <vTaskSwitchContext+0xb8>)
 8016c2a:	6013      	str	r3, [r2, #0]
 8016c2c:	4a06      	ldr	r2, [pc, #24]	; (8016c48 <vTaskSwitchContext+0xb0>)
 8016c2e:	68fb      	ldr	r3, [r7, #12]
 8016c30:	6013      	str	r3, [r2, #0]
}
 8016c32:	bf00      	nop
 8016c34:	3714      	adds	r7, #20
 8016c36:	46bd      	mov	sp, r7
 8016c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c3c:	4770      	bx	lr
 8016c3e:	bf00      	nop
 8016c40:	2400c780 	.word	0x2400c780
 8016c44:	2400c76c 	.word	0x2400c76c
 8016c48:	2400c760 	.word	0x2400c760
 8016c4c:	2400c288 	.word	0x2400c288
 8016c50:	2400c284 	.word	0x2400c284

08016c54 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8016c54:	b580      	push	{r7, lr}
 8016c56:	b084      	sub	sp, #16
 8016c58:	af00      	add	r7, sp, #0
 8016c5a:	6078      	str	r0, [r7, #4]
 8016c5c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8016c5e:	687b      	ldr	r3, [r7, #4]
 8016c60:	2b00      	cmp	r3, #0
 8016c62:	d10a      	bne.n	8016c7a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8016c64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016c68:	f383 8811 	msr	BASEPRI, r3
 8016c6c:	f3bf 8f6f 	isb	sy
 8016c70:	f3bf 8f4f 	dsb	sy
 8016c74:	60fb      	str	r3, [r7, #12]
}
 8016c76:	bf00      	nop
 8016c78:	e7fe      	b.n	8016c78 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8016c7a:	4b07      	ldr	r3, [pc, #28]	; (8016c98 <vTaskPlaceOnEventList+0x44>)
 8016c7c:	681b      	ldr	r3, [r3, #0]
 8016c7e:	3318      	adds	r3, #24
 8016c80:	4619      	mov	r1, r3
 8016c82:	6878      	ldr	r0, [r7, #4]
 8016c84:	f7fe f919 	bl	8014eba <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8016c88:	2101      	movs	r1, #1
 8016c8a:	6838      	ldr	r0, [r7, #0]
 8016c8c:	f000 fb7a 	bl	8017384 <prvAddCurrentTaskToDelayedList>
}
 8016c90:	bf00      	nop
 8016c92:	3710      	adds	r7, #16
 8016c94:	46bd      	mov	sp, r7
 8016c96:	bd80      	pop	{r7, pc}
 8016c98:	2400c284 	.word	0x2400c284

08016c9c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8016c9c:	b580      	push	{r7, lr}
 8016c9e:	b086      	sub	sp, #24
 8016ca0:	af00      	add	r7, sp, #0
 8016ca2:	60f8      	str	r0, [r7, #12]
 8016ca4:	60b9      	str	r1, [r7, #8]
 8016ca6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8016ca8:	68fb      	ldr	r3, [r7, #12]
 8016caa:	2b00      	cmp	r3, #0
 8016cac:	d10a      	bne.n	8016cc4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8016cae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016cb2:	f383 8811 	msr	BASEPRI, r3
 8016cb6:	f3bf 8f6f 	isb	sy
 8016cba:	f3bf 8f4f 	dsb	sy
 8016cbe:	617b      	str	r3, [r7, #20]
}
 8016cc0:	bf00      	nop
 8016cc2:	e7fe      	b.n	8016cc2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8016cc4:	4b0a      	ldr	r3, [pc, #40]	; (8016cf0 <vTaskPlaceOnEventListRestricted+0x54>)
 8016cc6:	681b      	ldr	r3, [r3, #0]
 8016cc8:	3318      	adds	r3, #24
 8016cca:	4619      	mov	r1, r3
 8016ccc:	68f8      	ldr	r0, [r7, #12]
 8016cce:	f7fe f8d0 	bl	8014e72 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8016cd2:	687b      	ldr	r3, [r7, #4]
 8016cd4:	2b00      	cmp	r3, #0
 8016cd6:	d002      	beq.n	8016cde <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8016cd8:	f04f 33ff 	mov.w	r3, #4294967295
 8016cdc:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8016cde:	6879      	ldr	r1, [r7, #4]
 8016ce0:	68b8      	ldr	r0, [r7, #8]
 8016ce2:	f000 fb4f 	bl	8017384 <prvAddCurrentTaskToDelayedList>
	}
 8016ce6:	bf00      	nop
 8016ce8:	3718      	adds	r7, #24
 8016cea:	46bd      	mov	sp, r7
 8016cec:	bd80      	pop	{r7, pc}
 8016cee:	bf00      	nop
 8016cf0:	2400c284 	.word	0x2400c284

08016cf4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8016cf4:	b580      	push	{r7, lr}
 8016cf6:	b086      	sub	sp, #24
 8016cf8:	af00      	add	r7, sp, #0
 8016cfa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8016cfc:	687b      	ldr	r3, [r7, #4]
 8016cfe:	68db      	ldr	r3, [r3, #12]
 8016d00:	68db      	ldr	r3, [r3, #12]
 8016d02:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8016d04:	693b      	ldr	r3, [r7, #16]
 8016d06:	2b00      	cmp	r3, #0
 8016d08:	d10a      	bne.n	8016d20 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8016d0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016d0e:	f383 8811 	msr	BASEPRI, r3
 8016d12:	f3bf 8f6f 	isb	sy
 8016d16:	f3bf 8f4f 	dsb	sy
 8016d1a:	60fb      	str	r3, [r7, #12]
}
 8016d1c:	bf00      	nop
 8016d1e:	e7fe      	b.n	8016d1e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8016d20:	693b      	ldr	r3, [r7, #16]
 8016d22:	3318      	adds	r3, #24
 8016d24:	4618      	mov	r0, r3
 8016d26:	f7fe f901 	bl	8014f2c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8016d2a:	4b1e      	ldr	r3, [pc, #120]	; (8016da4 <xTaskRemoveFromEventList+0xb0>)
 8016d2c:	681b      	ldr	r3, [r3, #0]
 8016d2e:	2b00      	cmp	r3, #0
 8016d30:	d11d      	bne.n	8016d6e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8016d32:	693b      	ldr	r3, [r7, #16]
 8016d34:	3304      	adds	r3, #4
 8016d36:	4618      	mov	r0, r3
 8016d38:	f7fe f8f8 	bl	8014f2c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8016d3c:	693b      	ldr	r3, [r7, #16]
 8016d3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016d40:	4b19      	ldr	r3, [pc, #100]	; (8016da8 <xTaskRemoveFromEventList+0xb4>)
 8016d42:	681b      	ldr	r3, [r3, #0]
 8016d44:	429a      	cmp	r2, r3
 8016d46:	d903      	bls.n	8016d50 <xTaskRemoveFromEventList+0x5c>
 8016d48:	693b      	ldr	r3, [r7, #16]
 8016d4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016d4c:	4a16      	ldr	r2, [pc, #88]	; (8016da8 <xTaskRemoveFromEventList+0xb4>)
 8016d4e:	6013      	str	r3, [r2, #0]
 8016d50:	693b      	ldr	r3, [r7, #16]
 8016d52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016d54:	4613      	mov	r3, r2
 8016d56:	009b      	lsls	r3, r3, #2
 8016d58:	4413      	add	r3, r2
 8016d5a:	009b      	lsls	r3, r3, #2
 8016d5c:	4a13      	ldr	r2, [pc, #76]	; (8016dac <xTaskRemoveFromEventList+0xb8>)
 8016d5e:	441a      	add	r2, r3
 8016d60:	693b      	ldr	r3, [r7, #16]
 8016d62:	3304      	adds	r3, #4
 8016d64:	4619      	mov	r1, r3
 8016d66:	4610      	mov	r0, r2
 8016d68:	f7fe f883 	bl	8014e72 <vListInsertEnd>
 8016d6c:	e005      	b.n	8016d7a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8016d6e:	693b      	ldr	r3, [r7, #16]
 8016d70:	3318      	adds	r3, #24
 8016d72:	4619      	mov	r1, r3
 8016d74:	480e      	ldr	r0, [pc, #56]	; (8016db0 <xTaskRemoveFromEventList+0xbc>)
 8016d76:	f7fe f87c 	bl	8014e72 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8016d7a:	693b      	ldr	r3, [r7, #16]
 8016d7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016d7e:	4b0d      	ldr	r3, [pc, #52]	; (8016db4 <xTaskRemoveFromEventList+0xc0>)
 8016d80:	681b      	ldr	r3, [r3, #0]
 8016d82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016d84:	429a      	cmp	r2, r3
 8016d86:	d905      	bls.n	8016d94 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8016d88:	2301      	movs	r3, #1
 8016d8a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8016d8c:	4b0a      	ldr	r3, [pc, #40]	; (8016db8 <xTaskRemoveFromEventList+0xc4>)
 8016d8e:	2201      	movs	r2, #1
 8016d90:	601a      	str	r2, [r3, #0]
 8016d92:	e001      	b.n	8016d98 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8016d94:	2300      	movs	r3, #0
 8016d96:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8016d98:	697b      	ldr	r3, [r7, #20]
}
 8016d9a:	4618      	mov	r0, r3
 8016d9c:	3718      	adds	r7, #24
 8016d9e:	46bd      	mov	sp, r7
 8016da0:	bd80      	pop	{r7, pc}
 8016da2:	bf00      	nop
 8016da4:	2400c780 	.word	0x2400c780
 8016da8:	2400c760 	.word	0x2400c760
 8016dac:	2400c288 	.word	0x2400c288
 8016db0:	2400c718 	.word	0x2400c718
 8016db4:	2400c284 	.word	0x2400c284
 8016db8:	2400c76c 	.word	0x2400c76c

08016dbc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8016dbc:	b480      	push	{r7}
 8016dbe:	b083      	sub	sp, #12
 8016dc0:	af00      	add	r7, sp, #0
 8016dc2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8016dc4:	4b06      	ldr	r3, [pc, #24]	; (8016de0 <vTaskInternalSetTimeOutState+0x24>)
 8016dc6:	681a      	ldr	r2, [r3, #0]
 8016dc8:	687b      	ldr	r3, [r7, #4]
 8016dca:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8016dcc:	4b05      	ldr	r3, [pc, #20]	; (8016de4 <vTaskInternalSetTimeOutState+0x28>)
 8016dce:	681a      	ldr	r2, [r3, #0]
 8016dd0:	687b      	ldr	r3, [r7, #4]
 8016dd2:	605a      	str	r2, [r3, #4]
}
 8016dd4:	bf00      	nop
 8016dd6:	370c      	adds	r7, #12
 8016dd8:	46bd      	mov	sp, r7
 8016dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016dde:	4770      	bx	lr
 8016de0:	2400c770 	.word	0x2400c770
 8016de4:	2400c75c 	.word	0x2400c75c

08016de8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8016de8:	b580      	push	{r7, lr}
 8016dea:	b088      	sub	sp, #32
 8016dec:	af00      	add	r7, sp, #0
 8016dee:	6078      	str	r0, [r7, #4]
 8016df0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8016df2:	687b      	ldr	r3, [r7, #4]
 8016df4:	2b00      	cmp	r3, #0
 8016df6:	d10a      	bne.n	8016e0e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8016df8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016dfc:	f383 8811 	msr	BASEPRI, r3
 8016e00:	f3bf 8f6f 	isb	sy
 8016e04:	f3bf 8f4f 	dsb	sy
 8016e08:	613b      	str	r3, [r7, #16]
}
 8016e0a:	bf00      	nop
 8016e0c:	e7fe      	b.n	8016e0c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8016e0e:	683b      	ldr	r3, [r7, #0]
 8016e10:	2b00      	cmp	r3, #0
 8016e12:	d10a      	bne.n	8016e2a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8016e14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016e18:	f383 8811 	msr	BASEPRI, r3
 8016e1c:	f3bf 8f6f 	isb	sy
 8016e20:	f3bf 8f4f 	dsb	sy
 8016e24:	60fb      	str	r3, [r7, #12]
}
 8016e26:	bf00      	nop
 8016e28:	e7fe      	b.n	8016e28 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8016e2a:	f7fe f9d3 	bl	80151d4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8016e2e:	4b1d      	ldr	r3, [pc, #116]	; (8016ea4 <xTaskCheckForTimeOut+0xbc>)
 8016e30:	681b      	ldr	r3, [r3, #0]
 8016e32:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8016e34:	687b      	ldr	r3, [r7, #4]
 8016e36:	685b      	ldr	r3, [r3, #4]
 8016e38:	69ba      	ldr	r2, [r7, #24]
 8016e3a:	1ad3      	subs	r3, r2, r3
 8016e3c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8016e3e:	683b      	ldr	r3, [r7, #0]
 8016e40:	681b      	ldr	r3, [r3, #0]
 8016e42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016e46:	d102      	bne.n	8016e4e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8016e48:	2300      	movs	r3, #0
 8016e4a:	61fb      	str	r3, [r7, #28]
 8016e4c:	e023      	b.n	8016e96 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8016e4e:	687b      	ldr	r3, [r7, #4]
 8016e50:	681a      	ldr	r2, [r3, #0]
 8016e52:	4b15      	ldr	r3, [pc, #84]	; (8016ea8 <xTaskCheckForTimeOut+0xc0>)
 8016e54:	681b      	ldr	r3, [r3, #0]
 8016e56:	429a      	cmp	r2, r3
 8016e58:	d007      	beq.n	8016e6a <xTaskCheckForTimeOut+0x82>
 8016e5a:	687b      	ldr	r3, [r7, #4]
 8016e5c:	685b      	ldr	r3, [r3, #4]
 8016e5e:	69ba      	ldr	r2, [r7, #24]
 8016e60:	429a      	cmp	r2, r3
 8016e62:	d302      	bcc.n	8016e6a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8016e64:	2301      	movs	r3, #1
 8016e66:	61fb      	str	r3, [r7, #28]
 8016e68:	e015      	b.n	8016e96 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8016e6a:	683b      	ldr	r3, [r7, #0]
 8016e6c:	681b      	ldr	r3, [r3, #0]
 8016e6e:	697a      	ldr	r2, [r7, #20]
 8016e70:	429a      	cmp	r2, r3
 8016e72:	d20b      	bcs.n	8016e8c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8016e74:	683b      	ldr	r3, [r7, #0]
 8016e76:	681a      	ldr	r2, [r3, #0]
 8016e78:	697b      	ldr	r3, [r7, #20]
 8016e7a:	1ad2      	subs	r2, r2, r3
 8016e7c:	683b      	ldr	r3, [r7, #0]
 8016e7e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8016e80:	6878      	ldr	r0, [r7, #4]
 8016e82:	f7ff ff9b 	bl	8016dbc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8016e86:	2300      	movs	r3, #0
 8016e88:	61fb      	str	r3, [r7, #28]
 8016e8a:	e004      	b.n	8016e96 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8016e8c:	683b      	ldr	r3, [r7, #0]
 8016e8e:	2200      	movs	r2, #0
 8016e90:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8016e92:	2301      	movs	r3, #1
 8016e94:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8016e96:	f7fe f9cd 	bl	8015234 <vPortExitCritical>

	return xReturn;
 8016e9a:	69fb      	ldr	r3, [r7, #28]
}
 8016e9c:	4618      	mov	r0, r3
 8016e9e:	3720      	adds	r7, #32
 8016ea0:	46bd      	mov	sp, r7
 8016ea2:	bd80      	pop	{r7, pc}
 8016ea4:	2400c75c 	.word	0x2400c75c
 8016ea8:	2400c770 	.word	0x2400c770

08016eac <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8016eac:	b480      	push	{r7}
 8016eae:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8016eb0:	4b03      	ldr	r3, [pc, #12]	; (8016ec0 <vTaskMissedYield+0x14>)
 8016eb2:	2201      	movs	r2, #1
 8016eb4:	601a      	str	r2, [r3, #0]
}
 8016eb6:	bf00      	nop
 8016eb8:	46bd      	mov	sp, r7
 8016eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ebe:	4770      	bx	lr
 8016ec0:	2400c76c 	.word	0x2400c76c

08016ec4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8016ec4:	b580      	push	{r7, lr}
 8016ec6:	b082      	sub	sp, #8
 8016ec8:	af00      	add	r7, sp, #0
 8016eca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8016ecc:	f000 f852 	bl	8016f74 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8016ed0:	4b06      	ldr	r3, [pc, #24]	; (8016eec <prvIdleTask+0x28>)
 8016ed2:	681b      	ldr	r3, [r3, #0]
 8016ed4:	2b01      	cmp	r3, #1
 8016ed6:	d9f9      	bls.n	8016ecc <prvIdleTask+0x8>
			{
				taskYIELD();
 8016ed8:	4b05      	ldr	r3, [pc, #20]	; (8016ef0 <prvIdleTask+0x2c>)
 8016eda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016ede:	601a      	str	r2, [r3, #0]
 8016ee0:	f3bf 8f4f 	dsb	sy
 8016ee4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8016ee8:	e7f0      	b.n	8016ecc <prvIdleTask+0x8>
 8016eea:	bf00      	nop
 8016eec:	2400c288 	.word	0x2400c288
 8016ef0:	e000ed04 	.word	0xe000ed04

08016ef4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8016ef4:	b580      	push	{r7, lr}
 8016ef6:	b082      	sub	sp, #8
 8016ef8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8016efa:	2300      	movs	r3, #0
 8016efc:	607b      	str	r3, [r7, #4]
 8016efe:	e00c      	b.n	8016f1a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8016f00:	687a      	ldr	r2, [r7, #4]
 8016f02:	4613      	mov	r3, r2
 8016f04:	009b      	lsls	r3, r3, #2
 8016f06:	4413      	add	r3, r2
 8016f08:	009b      	lsls	r3, r3, #2
 8016f0a:	4a12      	ldr	r2, [pc, #72]	; (8016f54 <prvInitialiseTaskLists+0x60>)
 8016f0c:	4413      	add	r3, r2
 8016f0e:	4618      	mov	r0, r3
 8016f10:	f7fd ff82 	bl	8014e18 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8016f14:	687b      	ldr	r3, [r7, #4]
 8016f16:	3301      	adds	r3, #1
 8016f18:	607b      	str	r3, [r7, #4]
 8016f1a:	687b      	ldr	r3, [r7, #4]
 8016f1c:	2b37      	cmp	r3, #55	; 0x37
 8016f1e:	d9ef      	bls.n	8016f00 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8016f20:	480d      	ldr	r0, [pc, #52]	; (8016f58 <prvInitialiseTaskLists+0x64>)
 8016f22:	f7fd ff79 	bl	8014e18 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8016f26:	480d      	ldr	r0, [pc, #52]	; (8016f5c <prvInitialiseTaskLists+0x68>)
 8016f28:	f7fd ff76 	bl	8014e18 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8016f2c:	480c      	ldr	r0, [pc, #48]	; (8016f60 <prvInitialiseTaskLists+0x6c>)
 8016f2e:	f7fd ff73 	bl	8014e18 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8016f32:	480c      	ldr	r0, [pc, #48]	; (8016f64 <prvInitialiseTaskLists+0x70>)
 8016f34:	f7fd ff70 	bl	8014e18 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8016f38:	480b      	ldr	r0, [pc, #44]	; (8016f68 <prvInitialiseTaskLists+0x74>)
 8016f3a:	f7fd ff6d 	bl	8014e18 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8016f3e:	4b0b      	ldr	r3, [pc, #44]	; (8016f6c <prvInitialiseTaskLists+0x78>)
 8016f40:	4a05      	ldr	r2, [pc, #20]	; (8016f58 <prvInitialiseTaskLists+0x64>)
 8016f42:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8016f44:	4b0a      	ldr	r3, [pc, #40]	; (8016f70 <prvInitialiseTaskLists+0x7c>)
 8016f46:	4a05      	ldr	r2, [pc, #20]	; (8016f5c <prvInitialiseTaskLists+0x68>)
 8016f48:	601a      	str	r2, [r3, #0]
}
 8016f4a:	bf00      	nop
 8016f4c:	3708      	adds	r7, #8
 8016f4e:	46bd      	mov	sp, r7
 8016f50:	bd80      	pop	{r7, pc}
 8016f52:	bf00      	nop
 8016f54:	2400c288 	.word	0x2400c288
 8016f58:	2400c6e8 	.word	0x2400c6e8
 8016f5c:	2400c6fc 	.word	0x2400c6fc
 8016f60:	2400c718 	.word	0x2400c718
 8016f64:	2400c72c 	.word	0x2400c72c
 8016f68:	2400c744 	.word	0x2400c744
 8016f6c:	2400c710 	.word	0x2400c710
 8016f70:	2400c714 	.word	0x2400c714

08016f74 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8016f74:	b580      	push	{r7, lr}
 8016f76:	b082      	sub	sp, #8
 8016f78:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8016f7a:	e019      	b.n	8016fb0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8016f7c:	f7fe f92a 	bl	80151d4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8016f80:	4b10      	ldr	r3, [pc, #64]	; (8016fc4 <prvCheckTasksWaitingTermination+0x50>)
 8016f82:	68db      	ldr	r3, [r3, #12]
 8016f84:	68db      	ldr	r3, [r3, #12]
 8016f86:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8016f88:	687b      	ldr	r3, [r7, #4]
 8016f8a:	3304      	adds	r3, #4
 8016f8c:	4618      	mov	r0, r3
 8016f8e:	f7fd ffcd 	bl	8014f2c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8016f92:	4b0d      	ldr	r3, [pc, #52]	; (8016fc8 <prvCheckTasksWaitingTermination+0x54>)
 8016f94:	681b      	ldr	r3, [r3, #0]
 8016f96:	3b01      	subs	r3, #1
 8016f98:	4a0b      	ldr	r2, [pc, #44]	; (8016fc8 <prvCheckTasksWaitingTermination+0x54>)
 8016f9a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8016f9c:	4b0b      	ldr	r3, [pc, #44]	; (8016fcc <prvCheckTasksWaitingTermination+0x58>)
 8016f9e:	681b      	ldr	r3, [r3, #0]
 8016fa0:	3b01      	subs	r3, #1
 8016fa2:	4a0a      	ldr	r2, [pc, #40]	; (8016fcc <prvCheckTasksWaitingTermination+0x58>)
 8016fa4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8016fa6:	f7fe f945 	bl	8015234 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8016faa:	6878      	ldr	r0, [r7, #4]
 8016fac:	f000 f810 	bl	8016fd0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8016fb0:	4b06      	ldr	r3, [pc, #24]	; (8016fcc <prvCheckTasksWaitingTermination+0x58>)
 8016fb2:	681b      	ldr	r3, [r3, #0]
 8016fb4:	2b00      	cmp	r3, #0
 8016fb6:	d1e1      	bne.n	8016f7c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8016fb8:	bf00      	nop
 8016fba:	bf00      	nop
 8016fbc:	3708      	adds	r7, #8
 8016fbe:	46bd      	mov	sp, r7
 8016fc0:	bd80      	pop	{r7, pc}
 8016fc2:	bf00      	nop
 8016fc4:	2400c72c 	.word	0x2400c72c
 8016fc8:	2400c758 	.word	0x2400c758
 8016fcc:	2400c740 	.word	0x2400c740

08016fd0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8016fd0:	b580      	push	{r7, lr}
 8016fd2:	b084      	sub	sp, #16
 8016fd4:	af00      	add	r7, sp, #0
 8016fd6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8016fd8:	687b      	ldr	r3, [r7, #4]
 8016fda:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8016fde:	2b00      	cmp	r3, #0
 8016fe0:	d108      	bne.n	8016ff4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8016fe2:	687b      	ldr	r3, [r7, #4]
 8016fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016fe6:	4618      	mov	r0, r3
 8016fe8:	f7fd fdf8 	bl	8014bdc <vPortFree>
				vPortFree( pxTCB );
 8016fec:	6878      	ldr	r0, [r7, #4]
 8016fee:	f7fd fdf5 	bl	8014bdc <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8016ff2:	e018      	b.n	8017026 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8016ff4:	687b      	ldr	r3, [r7, #4]
 8016ff6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8016ffa:	2b01      	cmp	r3, #1
 8016ffc:	d103      	bne.n	8017006 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8016ffe:	6878      	ldr	r0, [r7, #4]
 8017000:	f7fd fdec 	bl	8014bdc <vPortFree>
	}
 8017004:	e00f      	b.n	8017026 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8017006:	687b      	ldr	r3, [r7, #4]
 8017008:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 801700c:	2b02      	cmp	r3, #2
 801700e:	d00a      	beq.n	8017026 <prvDeleteTCB+0x56>
	__asm volatile
 8017010:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017014:	f383 8811 	msr	BASEPRI, r3
 8017018:	f3bf 8f6f 	isb	sy
 801701c:	f3bf 8f4f 	dsb	sy
 8017020:	60fb      	str	r3, [r7, #12]
}
 8017022:	bf00      	nop
 8017024:	e7fe      	b.n	8017024 <prvDeleteTCB+0x54>
	}
 8017026:	bf00      	nop
 8017028:	3710      	adds	r7, #16
 801702a:	46bd      	mov	sp, r7
 801702c:	bd80      	pop	{r7, pc}
	...

08017030 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8017030:	b480      	push	{r7}
 8017032:	b083      	sub	sp, #12
 8017034:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8017036:	4b0c      	ldr	r3, [pc, #48]	; (8017068 <prvResetNextTaskUnblockTime+0x38>)
 8017038:	681b      	ldr	r3, [r3, #0]
 801703a:	681b      	ldr	r3, [r3, #0]
 801703c:	2b00      	cmp	r3, #0
 801703e:	d104      	bne.n	801704a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8017040:	4b0a      	ldr	r3, [pc, #40]	; (801706c <prvResetNextTaskUnblockTime+0x3c>)
 8017042:	f04f 32ff 	mov.w	r2, #4294967295
 8017046:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8017048:	e008      	b.n	801705c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801704a:	4b07      	ldr	r3, [pc, #28]	; (8017068 <prvResetNextTaskUnblockTime+0x38>)
 801704c:	681b      	ldr	r3, [r3, #0]
 801704e:	68db      	ldr	r3, [r3, #12]
 8017050:	68db      	ldr	r3, [r3, #12]
 8017052:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8017054:	687b      	ldr	r3, [r7, #4]
 8017056:	685b      	ldr	r3, [r3, #4]
 8017058:	4a04      	ldr	r2, [pc, #16]	; (801706c <prvResetNextTaskUnblockTime+0x3c>)
 801705a:	6013      	str	r3, [r2, #0]
}
 801705c:	bf00      	nop
 801705e:	370c      	adds	r7, #12
 8017060:	46bd      	mov	sp, r7
 8017062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017066:	4770      	bx	lr
 8017068:	2400c710 	.word	0x2400c710
 801706c:	2400c778 	.word	0x2400c778

08017070 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8017070:	b480      	push	{r7}
 8017072:	b083      	sub	sp, #12
 8017074:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8017076:	4b0b      	ldr	r3, [pc, #44]	; (80170a4 <xTaskGetSchedulerState+0x34>)
 8017078:	681b      	ldr	r3, [r3, #0]
 801707a:	2b00      	cmp	r3, #0
 801707c:	d102      	bne.n	8017084 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801707e:	2301      	movs	r3, #1
 8017080:	607b      	str	r3, [r7, #4]
 8017082:	e008      	b.n	8017096 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8017084:	4b08      	ldr	r3, [pc, #32]	; (80170a8 <xTaskGetSchedulerState+0x38>)
 8017086:	681b      	ldr	r3, [r3, #0]
 8017088:	2b00      	cmp	r3, #0
 801708a:	d102      	bne.n	8017092 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 801708c:	2302      	movs	r3, #2
 801708e:	607b      	str	r3, [r7, #4]
 8017090:	e001      	b.n	8017096 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8017092:	2300      	movs	r3, #0
 8017094:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8017096:	687b      	ldr	r3, [r7, #4]
	}
 8017098:	4618      	mov	r0, r3
 801709a:	370c      	adds	r7, #12
 801709c:	46bd      	mov	sp, r7
 801709e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80170a2:	4770      	bx	lr
 80170a4:	2400c764 	.word	0x2400c764
 80170a8:	2400c780 	.word	0x2400c780

080170ac <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80170ac:	b580      	push	{r7, lr}
 80170ae:	b084      	sub	sp, #16
 80170b0:	af00      	add	r7, sp, #0
 80170b2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80170b4:	687b      	ldr	r3, [r7, #4]
 80170b6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80170b8:	2300      	movs	r3, #0
 80170ba:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80170bc:	687b      	ldr	r3, [r7, #4]
 80170be:	2b00      	cmp	r3, #0
 80170c0:	d051      	beq.n	8017166 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80170c2:	68bb      	ldr	r3, [r7, #8]
 80170c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80170c6:	4b2a      	ldr	r3, [pc, #168]	; (8017170 <xTaskPriorityInherit+0xc4>)
 80170c8:	681b      	ldr	r3, [r3, #0]
 80170ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80170cc:	429a      	cmp	r2, r3
 80170ce:	d241      	bcs.n	8017154 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80170d0:	68bb      	ldr	r3, [r7, #8]
 80170d2:	699b      	ldr	r3, [r3, #24]
 80170d4:	2b00      	cmp	r3, #0
 80170d6:	db06      	blt.n	80170e6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80170d8:	4b25      	ldr	r3, [pc, #148]	; (8017170 <xTaskPriorityInherit+0xc4>)
 80170da:	681b      	ldr	r3, [r3, #0]
 80170dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80170de:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80170e2:	68bb      	ldr	r3, [r7, #8]
 80170e4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80170e6:	68bb      	ldr	r3, [r7, #8]
 80170e8:	6959      	ldr	r1, [r3, #20]
 80170ea:	68bb      	ldr	r3, [r7, #8]
 80170ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80170ee:	4613      	mov	r3, r2
 80170f0:	009b      	lsls	r3, r3, #2
 80170f2:	4413      	add	r3, r2
 80170f4:	009b      	lsls	r3, r3, #2
 80170f6:	4a1f      	ldr	r2, [pc, #124]	; (8017174 <xTaskPriorityInherit+0xc8>)
 80170f8:	4413      	add	r3, r2
 80170fa:	4299      	cmp	r1, r3
 80170fc:	d122      	bne.n	8017144 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80170fe:	68bb      	ldr	r3, [r7, #8]
 8017100:	3304      	adds	r3, #4
 8017102:	4618      	mov	r0, r3
 8017104:	f7fd ff12 	bl	8014f2c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8017108:	4b19      	ldr	r3, [pc, #100]	; (8017170 <xTaskPriorityInherit+0xc4>)
 801710a:	681b      	ldr	r3, [r3, #0]
 801710c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801710e:	68bb      	ldr	r3, [r7, #8]
 8017110:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8017112:	68bb      	ldr	r3, [r7, #8]
 8017114:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017116:	4b18      	ldr	r3, [pc, #96]	; (8017178 <xTaskPriorityInherit+0xcc>)
 8017118:	681b      	ldr	r3, [r3, #0]
 801711a:	429a      	cmp	r2, r3
 801711c:	d903      	bls.n	8017126 <xTaskPriorityInherit+0x7a>
 801711e:	68bb      	ldr	r3, [r7, #8]
 8017120:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017122:	4a15      	ldr	r2, [pc, #84]	; (8017178 <xTaskPriorityInherit+0xcc>)
 8017124:	6013      	str	r3, [r2, #0]
 8017126:	68bb      	ldr	r3, [r7, #8]
 8017128:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801712a:	4613      	mov	r3, r2
 801712c:	009b      	lsls	r3, r3, #2
 801712e:	4413      	add	r3, r2
 8017130:	009b      	lsls	r3, r3, #2
 8017132:	4a10      	ldr	r2, [pc, #64]	; (8017174 <xTaskPriorityInherit+0xc8>)
 8017134:	441a      	add	r2, r3
 8017136:	68bb      	ldr	r3, [r7, #8]
 8017138:	3304      	adds	r3, #4
 801713a:	4619      	mov	r1, r3
 801713c:	4610      	mov	r0, r2
 801713e:	f7fd fe98 	bl	8014e72 <vListInsertEnd>
 8017142:	e004      	b.n	801714e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8017144:	4b0a      	ldr	r3, [pc, #40]	; (8017170 <xTaskPriorityInherit+0xc4>)
 8017146:	681b      	ldr	r3, [r3, #0]
 8017148:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801714a:	68bb      	ldr	r3, [r7, #8]
 801714c:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 801714e:	2301      	movs	r3, #1
 8017150:	60fb      	str	r3, [r7, #12]
 8017152:	e008      	b.n	8017166 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8017154:	68bb      	ldr	r3, [r7, #8]
 8017156:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8017158:	4b05      	ldr	r3, [pc, #20]	; (8017170 <xTaskPriorityInherit+0xc4>)
 801715a:	681b      	ldr	r3, [r3, #0]
 801715c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801715e:	429a      	cmp	r2, r3
 8017160:	d201      	bcs.n	8017166 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8017162:	2301      	movs	r3, #1
 8017164:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8017166:	68fb      	ldr	r3, [r7, #12]
	}
 8017168:	4618      	mov	r0, r3
 801716a:	3710      	adds	r7, #16
 801716c:	46bd      	mov	sp, r7
 801716e:	bd80      	pop	{r7, pc}
 8017170:	2400c284 	.word	0x2400c284
 8017174:	2400c288 	.word	0x2400c288
 8017178:	2400c760 	.word	0x2400c760

0801717c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 801717c:	b580      	push	{r7, lr}
 801717e:	b086      	sub	sp, #24
 8017180:	af00      	add	r7, sp, #0
 8017182:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8017184:	687b      	ldr	r3, [r7, #4]
 8017186:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8017188:	2300      	movs	r3, #0
 801718a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801718c:	687b      	ldr	r3, [r7, #4]
 801718e:	2b00      	cmp	r3, #0
 8017190:	d056      	beq.n	8017240 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8017192:	4b2e      	ldr	r3, [pc, #184]	; (801724c <xTaskPriorityDisinherit+0xd0>)
 8017194:	681b      	ldr	r3, [r3, #0]
 8017196:	693a      	ldr	r2, [r7, #16]
 8017198:	429a      	cmp	r2, r3
 801719a:	d00a      	beq.n	80171b2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 801719c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80171a0:	f383 8811 	msr	BASEPRI, r3
 80171a4:	f3bf 8f6f 	isb	sy
 80171a8:	f3bf 8f4f 	dsb	sy
 80171ac:	60fb      	str	r3, [r7, #12]
}
 80171ae:	bf00      	nop
 80171b0:	e7fe      	b.n	80171b0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80171b2:	693b      	ldr	r3, [r7, #16]
 80171b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80171b6:	2b00      	cmp	r3, #0
 80171b8:	d10a      	bne.n	80171d0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80171ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80171be:	f383 8811 	msr	BASEPRI, r3
 80171c2:	f3bf 8f6f 	isb	sy
 80171c6:	f3bf 8f4f 	dsb	sy
 80171ca:	60bb      	str	r3, [r7, #8]
}
 80171cc:	bf00      	nop
 80171ce:	e7fe      	b.n	80171ce <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80171d0:	693b      	ldr	r3, [r7, #16]
 80171d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80171d4:	1e5a      	subs	r2, r3, #1
 80171d6:	693b      	ldr	r3, [r7, #16]
 80171d8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80171da:	693b      	ldr	r3, [r7, #16]
 80171dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80171de:	693b      	ldr	r3, [r7, #16]
 80171e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80171e2:	429a      	cmp	r2, r3
 80171e4:	d02c      	beq.n	8017240 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80171e6:	693b      	ldr	r3, [r7, #16]
 80171e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80171ea:	2b00      	cmp	r3, #0
 80171ec:	d128      	bne.n	8017240 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80171ee:	693b      	ldr	r3, [r7, #16]
 80171f0:	3304      	adds	r3, #4
 80171f2:	4618      	mov	r0, r3
 80171f4:	f7fd fe9a 	bl	8014f2c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80171f8:	693b      	ldr	r3, [r7, #16]
 80171fa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80171fc:	693b      	ldr	r3, [r7, #16]
 80171fe:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8017200:	693b      	ldr	r3, [r7, #16]
 8017202:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017204:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8017208:	693b      	ldr	r3, [r7, #16]
 801720a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 801720c:	693b      	ldr	r3, [r7, #16]
 801720e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017210:	4b0f      	ldr	r3, [pc, #60]	; (8017250 <xTaskPriorityDisinherit+0xd4>)
 8017212:	681b      	ldr	r3, [r3, #0]
 8017214:	429a      	cmp	r2, r3
 8017216:	d903      	bls.n	8017220 <xTaskPriorityDisinherit+0xa4>
 8017218:	693b      	ldr	r3, [r7, #16]
 801721a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801721c:	4a0c      	ldr	r2, [pc, #48]	; (8017250 <xTaskPriorityDisinherit+0xd4>)
 801721e:	6013      	str	r3, [r2, #0]
 8017220:	693b      	ldr	r3, [r7, #16]
 8017222:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017224:	4613      	mov	r3, r2
 8017226:	009b      	lsls	r3, r3, #2
 8017228:	4413      	add	r3, r2
 801722a:	009b      	lsls	r3, r3, #2
 801722c:	4a09      	ldr	r2, [pc, #36]	; (8017254 <xTaskPriorityDisinherit+0xd8>)
 801722e:	441a      	add	r2, r3
 8017230:	693b      	ldr	r3, [r7, #16]
 8017232:	3304      	adds	r3, #4
 8017234:	4619      	mov	r1, r3
 8017236:	4610      	mov	r0, r2
 8017238:	f7fd fe1b 	bl	8014e72 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 801723c:	2301      	movs	r3, #1
 801723e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8017240:	697b      	ldr	r3, [r7, #20]
	}
 8017242:	4618      	mov	r0, r3
 8017244:	3718      	adds	r7, #24
 8017246:	46bd      	mov	sp, r7
 8017248:	bd80      	pop	{r7, pc}
 801724a:	bf00      	nop
 801724c:	2400c284 	.word	0x2400c284
 8017250:	2400c760 	.word	0x2400c760
 8017254:	2400c288 	.word	0x2400c288

08017258 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8017258:	b580      	push	{r7, lr}
 801725a:	b088      	sub	sp, #32
 801725c:	af00      	add	r7, sp, #0
 801725e:	6078      	str	r0, [r7, #4]
 8017260:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8017262:	687b      	ldr	r3, [r7, #4]
 8017264:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8017266:	2301      	movs	r3, #1
 8017268:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801726a:	687b      	ldr	r3, [r7, #4]
 801726c:	2b00      	cmp	r3, #0
 801726e:	d06a      	beq.n	8017346 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8017270:	69bb      	ldr	r3, [r7, #24]
 8017272:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017274:	2b00      	cmp	r3, #0
 8017276:	d10a      	bne.n	801728e <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8017278:	f04f 0350 	mov.w	r3, #80	; 0x50
 801727c:	f383 8811 	msr	BASEPRI, r3
 8017280:	f3bf 8f6f 	isb	sy
 8017284:	f3bf 8f4f 	dsb	sy
 8017288:	60fb      	str	r3, [r7, #12]
}
 801728a:	bf00      	nop
 801728c:	e7fe      	b.n	801728c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 801728e:	69bb      	ldr	r3, [r7, #24]
 8017290:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8017292:	683a      	ldr	r2, [r7, #0]
 8017294:	429a      	cmp	r2, r3
 8017296:	d902      	bls.n	801729e <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8017298:	683b      	ldr	r3, [r7, #0]
 801729a:	61fb      	str	r3, [r7, #28]
 801729c:	e002      	b.n	80172a4 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 801729e:	69bb      	ldr	r3, [r7, #24]
 80172a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80172a2:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80172a4:	69bb      	ldr	r3, [r7, #24]
 80172a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80172a8:	69fa      	ldr	r2, [r7, #28]
 80172aa:	429a      	cmp	r2, r3
 80172ac:	d04b      	beq.n	8017346 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80172ae:	69bb      	ldr	r3, [r7, #24]
 80172b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80172b2:	697a      	ldr	r2, [r7, #20]
 80172b4:	429a      	cmp	r2, r3
 80172b6:	d146      	bne.n	8017346 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80172b8:	4b25      	ldr	r3, [pc, #148]	; (8017350 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 80172ba:	681b      	ldr	r3, [r3, #0]
 80172bc:	69ba      	ldr	r2, [r7, #24]
 80172be:	429a      	cmp	r2, r3
 80172c0:	d10a      	bne.n	80172d8 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 80172c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80172c6:	f383 8811 	msr	BASEPRI, r3
 80172ca:	f3bf 8f6f 	isb	sy
 80172ce:	f3bf 8f4f 	dsb	sy
 80172d2:	60bb      	str	r3, [r7, #8]
}
 80172d4:	bf00      	nop
 80172d6:	e7fe      	b.n	80172d6 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80172d8:	69bb      	ldr	r3, [r7, #24]
 80172da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80172dc:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80172de:	69bb      	ldr	r3, [r7, #24]
 80172e0:	69fa      	ldr	r2, [r7, #28]
 80172e2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80172e4:	69bb      	ldr	r3, [r7, #24]
 80172e6:	699b      	ldr	r3, [r3, #24]
 80172e8:	2b00      	cmp	r3, #0
 80172ea:	db04      	blt.n	80172f6 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80172ec:	69fb      	ldr	r3, [r7, #28]
 80172ee:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80172f2:	69bb      	ldr	r3, [r7, #24]
 80172f4:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80172f6:	69bb      	ldr	r3, [r7, #24]
 80172f8:	6959      	ldr	r1, [r3, #20]
 80172fa:	693a      	ldr	r2, [r7, #16]
 80172fc:	4613      	mov	r3, r2
 80172fe:	009b      	lsls	r3, r3, #2
 8017300:	4413      	add	r3, r2
 8017302:	009b      	lsls	r3, r3, #2
 8017304:	4a13      	ldr	r2, [pc, #76]	; (8017354 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8017306:	4413      	add	r3, r2
 8017308:	4299      	cmp	r1, r3
 801730a:	d11c      	bne.n	8017346 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801730c:	69bb      	ldr	r3, [r7, #24]
 801730e:	3304      	adds	r3, #4
 8017310:	4618      	mov	r0, r3
 8017312:	f7fd fe0b 	bl	8014f2c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8017316:	69bb      	ldr	r3, [r7, #24]
 8017318:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801731a:	4b0f      	ldr	r3, [pc, #60]	; (8017358 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 801731c:	681b      	ldr	r3, [r3, #0]
 801731e:	429a      	cmp	r2, r3
 8017320:	d903      	bls.n	801732a <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8017322:	69bb      	ldr	r3, [r7, #24]
 8017324:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017326:	4a0c      	ldr	r2, [pc, #48]	; (8017358 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8017328:	6013      	str	r3, [r2, #0]
 801732a:	69bb      	ldr	r3, [r7, #24]
 801732c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801732e:	4613      	mov	r3, r2
 8017330:	009b      	lsls	r3, r3, #2
 8017332:	4413      	add	r3, r2
 8017334:	009b      	lsls	r3, r3, #2
 8017336:	4a07      	ldr	r2, [pc, #28]	; (8017354 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8017338:	441a      	add	r2, r3
 801733a:	69bb      	ldr	r3, [r7, #24]
 801733c:	3304      	adds	r3, #4
 801733e:	4619      	mov	r1, r3
 8017340:	4610      	mov	r0, r2
 8017342:	f7fd fd96 	bl	8014e72 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8017346:	bf00      	nop
 8017348:	3720      	adds	r7, #32
 801734a:	46bd      	mov	sp, r7
 801734c:	bd80      	pop	{r7, pc}
 801734e:	bf00      	nop
 8017350:	2400c284 	.word	0x2400c284
 8017354:	2400c288 	.word	0x2400c288
 8017358:	2400c760 	.word	0x2400c760

0801735c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 801735c:	b480      	push	{r7}
 801735e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8017360:	4b07      	ldr	r3, [pc, #28]	; (8017380 <pvTaskIncrementMutexHeldCount+0x24>)
 8017362:	681b      	ldr	r3, [r3, #0]
 8017364:	2b00      	cmp	r3, #0
 8017366:	d004      	beq.n	8017372 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8017368:	4b05      	ldr	r3, [pc, #20]	; (8017380 <pvTaskIncrementMutexHeldCount+0x24>)
 801736a:	681b      	ldr	r3, [r3, #0]
 801736c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801736e:	3201      	adds	r2, #1
 8017370:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8017372:	4b03      	ldr	r3, [pc, #12]	; (8017380 <pvTaskIncrementMutexHeldCount+0x24>)
 8017374:	681b      	ldr	r3, [r3, #0]
	}
 8017376:	4618      	mov	r0, r3
 8017378:	46bd      	mov	sp, r7
 801737a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801737e:	4770      	bx	lr
 8017380:	2400c284 	.word	0x2400c284

08017384 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8017384:	b580      	push	{r7, lr}
 8017386:	b084      	sub	sp, #16
 8017388:	af00      	add	r7, sp, #0
 801738a:	6078      	str	r0, [r7, #4]
 801738c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801738e:	4b21      	ldr	r3, [pc, #132]	; (8017414 <prvAddCurrentTaskToDelayedList+0x90>)
 8017390:	681b      	ldr	r3, [r3, #0]
 8017392:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8017394:	4b20      	ldr	r3, [pc, #128]	; (8017418 <prvAddCurrentTaskToDelayedList+0x94>)
 8017396:	681b      	ldr	r3, [r3, #0]
 8017398:	3304      	adds	r3, #4
 801739a:	4618      	mov	r0, r3
 801739c:	f7fd fdc6 	bl	8014f2c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80173a0:	687b      	ldr	r3, [r7, #4]
 80173a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80173a6:	d10a      	bne.n	80173be <prvAddCurrentTaskToDelayedList+0x3a>
 80173a8:	683b      	ldr	r3, [r7, #0]
 80173aa:	2b00      	cmp	r3, #0
 80173ac:	d007      	beq.n	80173be <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80173ae:	4b1a      	ldr	r3, [pc, #104]	; (8017418 <prvAddCurrentTaskToDelayedList+0x94>)
 80173b0:	681b      	ldr	r3, [r3, #0]
 80173b2:	3304      	adds	r3, #4
 80173b4:	4619      	mov	r1, r3
 80173b6:	4819      	ldr	r0, [pc, #100]	; (801741c <prvAddCurrentTaskToDelayedList+0x98>)
 80173b8:	f7fd fd5b 	bl	8014e72 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80173bc:	e026      	b.n	801740c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80173be:	68fa      	ldr	r2, [r7, #12]
 80173c0:	687b      	ldr	r3, [r7, #4]
 80173c2:	4413      	add	r3, r2
 80173c4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80173c6:	4b14      	ldr	r3, [pc, #80]	; (8017418 <prvAddCurrentTaskToDelayedList+0x94>)
 80173c8:	681b      	ldr	r3, [r3, #0]
 80173ca:	68ba      	ldr	r2, [r7, #8]
 80173cc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80173ce:	68ba      	ldr	r2, [r7, #8]
 80173d0:	68fb      	ldr	r3, [r7, #12]
 80173d2:	429a      	cmp	r2, r3
 80173d4:	d209      	bcs.n	80173ea <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80173d6:	4b12      	ldr	r3, [pc, #72]	; (8017420 <prvAddCurrentTaskToDelayedList+0x9c>)
 80173d8:	681a      	ldr	r2, [r3, #0]
 80173da:	4b0f      	ldr	r3, [pc, #60]	; (8017418 <prvAddCurrentTaskToDelayedList+0x94>)
 80173dc:	681b      	ldr	r3, [r3, #0]
 80173de:	3304      	adds	r3, #4
 80173e0:	4619      	mov	r1, r3
 80173e2:	4610      	mov	r0, r2
 80173e4:	f7fd fd69 	bl	8014eba <vListInsert>
}
 80173e8:	e010      	b.n	801740c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80173ea:	4b0e      	ldr	r3, [pc, #56]	; (8017424 <prvAddCurrentTaskToDelayedList+0xa0>)
 80173ec:	681a      	ldr	r2, [r3, #0]
 80173ee:	4b0a      	ldr	r3, [pc, #40]	; (8017418 <prvAddCurrentTaskToDelayedList+0x94>)
 80173f0:	681b      	ldr	r3, [r3, #0]
 80173f2:	3304      	adds	r3, #4
 80173f4:	4619      	mov	r1, r3
 80173f6:	4610      	mov	r0, r2
 80173f8:	f7fd fd5f 	bl	8014eba <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80173fc:	4b0a      	ldr	r3, [pc, #40]	; (8017428 <prvAddCurrentTaskToDelayedList+0xa4>)
 80173fe:	681b      	ldr	r3, [r3, #0]
 8017400:	68ba      	ldr	r2, [r7, #8]
 8017402:	429a      	cmp	r2, r3
 8017404:	d202      	bcs.n	801740c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8017406:	4a08      	ldr	r2, [pc, #32]	; (8017428 <prvAddCurrentTaskToDelayedList+0xa4>)
 8017408:	68bb      	ldr	r3, [r7, #8]
 801740a:	6013      	str	r3, [r2, #0]
}
 801740c:	bf00      	nop
 801740e:	3710      	adds	r7, #16
 8017410:	46bd      	mov	sp, r7
 8017412:	bd80      	pop	{r7, pc}
 8017414:	2400c75c 	.word	0x2400c75c
 8017418:	2400c284 	.word	0x2400c284
 801741c:	2400c744 	.word	0x2400c744
 8017420:	2400c714 	.word	0x2400c714
 8017424:	2400c710 	.word	0x2400c710
 8017428:	2400c778 	.word	0x2400c778

0801742c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 801742c:	b580      	push	{r7, lr}
 801742e:	b08a      	sub	sp, #40	; 0x28
 8017430:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8017432:	2300      	movs	r3, #0
 8017434:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8017436:	f000 fb07 	bl	8017a48 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 801743a:	4b1c      	ldr	r3, [pc, #112]	; (80174ac <xTimerCreateTimerTask+0x80>)
 801743c:	681b      	ldr	r3, [r3, #0]
 801743e:	2b00      	cmp	r3, #0
 8017440:	d021      	beq.n	8017486 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8017442:	2300      	movs	r3, #0
 8017444:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8017446:	2300      	movs	r3, #0
 8017448:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 801744a:	1d3a      	adds	r2, r7, #4
 801744c:	f107 0108 	add.w	r1, r7, #8
 8017450:	f107 030c 	add.w	r3, r7, #12
 8017454:	4618      	mov	r0, r3
 8017456:	f7fd fadb 	bl	8014a10 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 801745a:	6879      	ldr	r1, [r7, #4]
 801745c:	68bb      	ldr	r3, [r7, #8]
 801745e:	68fa      	ldr	r2, [r7, #12]
 8017460:	9202      	str	r2, [sp, #8]
 8017462:	9301      	str	r3, [sp, #4]
 8017464:	2302      	movs	r3, #2
 8017466:	9300      	str	r3, [sp, #0]
 8017468:	2300      	movs	r3, #0
 801746a:	460a      	mov	r2, r1
 801746c:	4910      	ldr	r1, [pc, #64]	; (80174b0 <xTimerCreateTimerTask+0x84>)
 801746e:	4811      	ldr	r0, [pc, #68]	; (80174b4 <xTimerCreateTimerTask+0x88>)
 8017470:	f7fe ffe0 	bl	8016434 <xTaskCreateStatic>
 8017474:	4603      	mov	r3, r0
 8017476:	4a10      	ldr	r2, [pc, #64]	; (80174b8 <xTimerCreateTimerTask+0x8c>)
 8017478:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 801747a:	4b0f      	ldr	r3, [pc, #60]	; (80174b8 <xTimerCreateTimerTask+0x8c>)
 801747c:	681b      	ldr	r3, [r3, #0]
 801747e:	2b00      	cmp	r3, #0
 8017480:	d001      	beq.n	8017486 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8017482:	2301      	movs	r3, #1
 8017484:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8017486:	697b      	ldr	r3, [r7, #20]
 8017488:	2b00      	cmp	r3, #0
 801748a:	d10a      	bne.n	80174a2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 801748c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017490:	f383 8811 	msr	BASEPRI, r3
 8017494:	f3bf 8f6f 	isb	sy
 8017498:	f3bf 8f4f 	dsb	sy
 801749c:	613b      	str	r3, [r7, #16]
}
 801749e:	bf00      	nop
 80174a0:	e7fe      	b.n	80174a0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80174a2:	697b      	ldr	r3, [r7, #20]
}
 80174a4:	4618      	mov	r0, r3
 80174a6:	3718      	adds	r7, #24
 80174a8:	46bd      	mov	sp, r7
 80174aa:	bd80      	pop	{r7, pc}
 80174ac:	2400c7b4 	.word	0x2400c7b4
 80174b0:	0802d810 	.word	0x0802d810
 80174b4:	080175f1 	.word	0x080175f1
 80174b8:	2400c7b8 	.word	0x2400c7b8

080174bc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80174bc:	b580      	push	{r7, lr}
 80174be:	b08a      	sub	sp, #40	; 0x28
 80174c0:	af00      	add	r7, sp, #0
 80174c2:	60f8      	str	r0, [r7, #12]
 80174c4:	60b9      	str	r1, [r7, #8]
 80174c6:	607a      	str	r2, [r7, #4]
 80174c8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80174ca:	2300      	movs	r3, #0
 80174cc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80174ce:	68fb      	ldr	r3, [r7, #12]
 80174d0:	2b00      	cmp	r3, #0
 80174d2:	d10a      	bne.n	80174ea <xTimerGenericCommand+0x2e>
	__asm volatile
 80174d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80174d8:	f383 8811 	msr	BASEPRI, r3
 80174dc:	f3bf 8f6f 	isb	sy
 80174e0:	f3bf 8f4f 	dsb	sy
 80174e4:	623b      	str	r3, [r7, #32]
}
 80174e6:	bf00      	nop
 80174e8:	e7fe      	b.n	80174e8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80174ea:	4b1a      	ldr	r3, [pc, #104]	; (8017554 <xTimerGenericCommand+0x98>)
 80174ec:	681b      	ldr	r3, [r3, #0]
 80174ee:	2b00      	cmp	r3, #0
 80174f0:	d02a      	beq.n	8017548 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80174f2:	68bb      	ldr	r3, [r7, #8]
 80174f4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80174f6:	687b      	ldr	r3, [r7, #4]
 80174f8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80174fa:	68fb      	ldr	r3, [r7, #12]
 80174fc:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80174fe:	68bb      	ldr	r3, [r7, #8]
 8017500:	2b05      	cmp	r3, #5
 8017502:	dc18      	bgt.n	8017536 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8017504:	f7ff fdb4 	bl	8017070 <xTaskGetSchedulerState>
 8017508:	4603      	mov	r3, r0
 801750a:	2b02      	cmp	r3, #2
 801750c:	d109      	bne.n	8017522 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 801750e:	4b11      	ldr	r3, [pc, #68]	; (8017554 <xTimerGenericCommand+0x98>)
 8017510:	6818      	ldr	r0, [r3, #0]
 8017512:	f107 0110 	add.w	r1, r7, #16
 8017516:	2300      	movs	r3, #0
 8017518:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801751a:	f7fe f925 	bl	8015768 <xQueueGenericSend>
 801751e:	6278      	str	r0, [r7, #36]	; 0x24
 8017520:	e012      	b.n	8017548 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8017522:	4b0c      	ldr	r3, [pc, #48]	; (8017554 <xTimerGenericCommand+0x98>)
 8017524:	6818      	ldr	r0, [r3, #0]
 8017526:	f107 0110 	add.w	r1, r7, #16
 801752a:	2300      	movs	r3, #0
 801752c:	2200      	movs	r2, #0
 801752e:	f7fe f91b 	bl	8015768 <xQueueGenericSend>
 8017532:	6278      	str	r0, [r7, #36]	; 0x24
 8017534:	e008      	b.n	8017548 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8017536:	4b07      	ldr	r3, [pc, #28]	; (8017554 <xTimerGenericCommand+0x98>)
 8017538:	6818      	ldr	r0, [r3, #0]
 801753a:	f107 0110 	add.w	r1, r7, #16
 801753e:	2300      	movs	r3, #0
 8017540:	683a      	ldr	r2, [r7, #0]
 8017542:	f7fe fa0f 	bl	8015964 <xQueueGenericSendFromISR>
 8017546:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8017548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801754a:	4618      	mov	r0, r3
 801754c:	3728      	adds	r7, #40	; 0x28
 801754e:	46bd      	mov	sp, r7
 8017550:	bd80      	pop	{r7, pc}
 8017552:	bf00      	nop
 8017554:	2400c7b4 	.word	0x2400c7b4

08017558 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8017558:	b580      	push	{r7, lr}
 801755a:	b088      	sub	sp, #32
 801755c:	af02      	add	r7, sp, #8
 801755e:	6078      	str	r0, [r7, #4]
 8017560:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017562:	4b22      	ldr	r3, [pc, #136]	; (80175ec <prvProcessExpiredTimer+0x94>)
 8017564:	681b      	ldr	r3, [r3, #0]
 8017566:	68db      	ldr	r3, [r3, #12]
 8017568:	68db      	ldr	r3, [r3, #12]
 801756a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801756c:	697b      	ldr	r3, [r7, #20]
 801756e:	3304      	adds	r3, #4
 8017570:	4618      	mov	r0, r3
 8017572:	f7fd fcdb 	bl	8014f2c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8017576:	697b      	ldr	r3, [r7, #20]
 8017578:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801757c:	f003 0304 	and.w	r3, r3, #4
 8017580:	2b00      	cmp	r3, #0
 8017582:	d022      	beq.n	80175ca <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8017584:	697b      	ldr	r3, [r7, #20]
 8017586:	699a      	ldr	r2, [r3, #24]
 8017588:	687b      	ldr	r3, [r7, #4]
 801758a:	18d1      	adds	r1, r2, r3
 801758c:	687b      	ldr	r3, [r7, #4]
 801758e:	683a      	ldr	r2, [r7, #0]
 8017590:	6978      	ldr	r0, [r7, #20]
 8017592:	f000 f8d1 	bl	8017738 <prvInsertTimerInActiveList>
 8017596:	4603      	mov	r3, r0
 8017598:	2b00      	cmp	r3, #0
 801759a:	d01f      	beq.n	80175dc <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801759c:	2300      	movs	r3, #0
 801759e:	9300      	str	r3, [sp, #0]
 80175a0:	2300      	movs	r3, #0
 80175a2:	687a      	ldr	r2, [r7, #4]
 80175a4:	2100      	movs	r1, #0
 80175a6:	6978      	ldr	r0, [r7, #20]
 80175a8:	f7ff ff88 	bl	80174bc <xTimerGenericCommand>
 80175ac:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80175ae:	693b      	ldr	r3, [r7, #16]
 80175b0:	2b00      	cmp	r3, #0
 80175b2:	d113      	bne.n	80175dc <prvProcessExpiredTimer+0x84>
	__asm volatile
 80175b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80175b8:	f383 8811 	msr	BASEPRI, r3
 80175bc:	f3bf 8f6f 	isb	sy
 80175c0:	f3bf 8f4f 	dsb	sy
 80175c4:	60fb      	str	r3, [r7, #12]
}
 80175c6:	bf00      	nop
 80175c8:	e7fe      	b.n	80175c8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80175ca:	697b      	ldr	r3, [r7, #20]
 80175cc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80175d0:	f023 0301 	bic.w	r3, r3, #1
 80175d4:	b2da      	uxtb	r2, r3
 80175d6:	697b      	ldr	r3, [r7, #20]
 80175d8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80175dc:	697b      	ldr	r3, [r7, #20]
 80175de:	6a1b      	ldr	r3, [r3, #32]
 80175e0:	6978      	ldr	r0, [r7, #20]
 80175e2:	4798      	blx	r3
}
 80175e4:	bf00      	nop
 80175e6:	3718      	adds	r7, #24
 80175e8:	46bd      	mov	sp, r7
 80175ea:	bd80      	pop	{r7, pc}
 80175ec:	2400c7ac 	.word	0x2400c7ac

080175f0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80175f0:	b580      	push	{r7, lr}
 80175f2:	b084      	sub	sp, #16
 80175f4:	af00      	add	r7, sp, #0
 80175f6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80175f8:	f107 0308 	add.w	r3, r7, #8
 80175fc:	4618      	mov	r0, r3
 80175fe:	f000 f857 	bl	80176b0 <prvGetNextExpireTime>
 8017602:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8017604:	68bb      	ldr	r3, [r7, #8]
 8017606:	4619      	mov	r1, r3
 8017608:	68f8      	ldr	r0, [r7, #12]
 801760a:	f000 f803 	bl	8017614 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 801760e:	f000 f8d5 	bl	80177bc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8017612:	e7f1      	b.n	80175f8 <prvTimerTask+0x8>

08017614 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8017614:	b580      	push	{r7, lr}
 8017616:	b084      	sub	sp, #16
 8017618:	af00      	add	r7, sp, #0
 801761a:	6078      	str	r0, [r7, #4]
 801761c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 801761e:	f7ff f945 	bl	80168ac <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8017622:	f107 0308 	add.w	r3, r7, #8
 8017626:	4618      	mov	r0, r3
 8017628:	f000 f866 	bl	80176f8 <prvSampleTimeNow>
 801762c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 801762e:	68bb      	ldr	r3, [r7, #8]
 8017630:	2b00      	cmp	r3, #0
 8017632:	d130      	bne.n	8017696 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8017634:	683b      	ldr	r3, [r7, #0]
 8017636:	2b00      	cmp	r3, #0
 8017638:	d10a      	bne.n	8017650 <prvProcessTimerOrBlockTask+0x3c>
 801763a:	687a      	ldr	r2, [r7, #4]
 801763c:	68fb      	ldr	r3, [r7, #12]
 801763e:	429a      	cmp	r2, r3
 8017640:	d806      	bhi.n	8017650 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8017642:	f7ff f941 	bl	80168c8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8017646:	68f9      	ldr	r1, [r7, #12]
 8017648:	6878      	ldr	r0, [r7, #4]
 801764a:	f7ff ff85 	bl	8017558 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 801764e:	e024      	b.n	801769a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8017650:	683b      	ldr	r3, [r7, #0]
 8017652:	2b00      	cmp	r3, #0
 8017654:	d008      	beq.n	8017668 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8017656:	4b13      	ldr	r3, [pc, #76]	; (80176a4 <prvProcessTimerOrBlockTask+0x90>)
 8017658:	681b      	ldr	r3, [r3, #0]
 801765a:	681b      	ldr	r3, [r3, #0]
 801765c:	2b00      	cmp	r3, #0
 801765e:	d101      	bne.n	8017664 <prvProcessTimerOrBlockTask+0x50>
 8017660:	2301      	movs	r3, #1
 8017662:	e000      	b.n	8017666 <prvProcessTimerOrBlockTask+0x52>
 8017664:	2300      	movs	r3, #0
 8017666:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8017668:	4b0f      	ldr	r3, [pc, #60]	; (80176a8 <prvProcessTimerOrBlockTask+0x94>)
 801766a:	6818      	ldr	r0, [r3, #0]
 801766c:	687a      	ldr	r2, [r7, #4]
 801766e:	68fb      	ldr	r3, [r7, #12]
 8017670:	1ad3      	subs	r3, r2, r3
 8017672:	683a      	ldr	r2, [r7, #0]
 8017674:	4619      	mov	r1, r3
 8017676:	f7fe fea9 	bl	80163cc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 801767a:	f7ff f925 	bl	80168c8 <xTaskResumeAll>
 801767e:	4603      	mov	r3, r0
 8017680:	2b00      	cmp	r3, #0
 8017682:	d10a      	bne.n	801769a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8017684:	4b09      	ldr	r3, [pc, #36]	; (80176ac <prvProcessTimerOrBlockTask+0x98>)
 8017686:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801768a:	601a      	str	r2, [r3, #0]
 801768c:	f3bf 8f4f 	dsb	sy
 8017690:	f3bf 8f6f 	isb	sy
}
 8017694:	e001      	b.n	801769a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8017696:	f7ff f917 	bl	80168c8 <xTaskResumeAll>
}
 801769a:	bf00      	nop
 801769c:	3710      	adds	r7, #16
 801769e:	46bd      	mov	sp, r7
 80176a0:	bd80      	pop	{r7, pc}
 80176a2:	bf00      	nop
 80176a4:	2400c7b0 	.word	0x2400c7b0
 80176a8:	2400c7b4 	.word	0x2400c7b4
 80176ac:	e000ed04 	.word	0xe000ed04

080176b0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80176b0:	b480      	push	{r7}
 80176b2:	b085      	sub	sp, #20
 80176b4:	af00      	add	r7, sp, #0
 80176b6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80176b8:	4b0e      	ldr	r3, [pc, #56]	; (80176f4 <prvGetNextExpireTime+0x44>)
 80176ba:	681b      	ldr	r3, [r3, #0]
 80176bc:	681b      	ldr	r3, [r3, #0]
 80176be:	2b00      	cmp	r3, #0
 80176c0:	d101      	bne.n	80176c6 <prvGetNextExpireTime+0x16>
 80176c2:	2201      	movs	r2, #1
 80176c4:	e000      	b.n	80176c8 <prvGetNextExpireTime+0x18>
 80176c6:	2200      	movs	r2, #0
 80176c8:	687b      	ldr	r3, [r7, #4]
 80176ca:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80176cc:	687b      	ldr	r3, [r7, #4]
 80176ce:	681b      	ldr	r3, [r3, #0]
 80176d0:	2b00      	cmp	r3, #0
 80176d2:	d105      	bne.n	80176e0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80176d4:	4b07      	ldr	r3, [pc, #28]	; (80176f4 <prvGetNextExpireTime+0x44>)
 80176d6:	681b      	ldr	r3, [r3, #0]
 80176d8:	68db      	ldr	r3, [r3, #12]
 80176da:	681b      	ldr	r3, [r3, #0]
 80176dc:	60fb      	str	r3, [r7, #12]
 80176de:	e001      	b.n	80176e4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80176e0:	2300      	movs	r3, #0
 80176e2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80176e4:	68fb      	ldr	r3, [r7, #12]
}
 80176e6:	4618      	mov	r0, r3
 80176e8:	3714      	adds	r7, #20
 80176ea:	46bd      	mov	sp, r7
 80176ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80176f0:	4770      	bx	lr
 80176f2:	bf00      	nop
 80176f4:	2400c7ac 	.word	0x2400c7ac

080176f8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80176f8:	b580      	push	{r7, lr}
 80176fa:	b084      	sub	sp, #16
 80176fc:	af00      	add	r7, sp, #0
 80176fe:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8017700:	f7ff f980 	bl	8016a04 <xTaskGetTickCount>
 8017704:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8017706:	4b0b      	ldr	r3, [pc, #44]	; (8017734 <prvSampleTimeNow+0x3c>)
 8017708:	681b      	ldr	r3, [r3, #0]
 801770a:	68fa      	ldr	r2, [r7, #12]
 801770c:	429a      	cmp	r2, r3
 801770e:	d205      	bcs.n	801771c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8017710:	f000 f936 	bl	8017980 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8017714:	687b      	ldr	r3, [r7, #4]
 8017716:	2201      	movs	r2, #1
 8017718:	601a      	str	r2, [r3, #0]
 801771a:	e002      	b.n	8017722 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 801771c:	687b      	ldr	r3, [r7, #4]
 801771e:	2200      	movs	r2, #0
 8017720:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8017722:	4a04      	ldr	r2, [pc, #16]	; (8017734 <prvSampleTimeNow+0x3c>)
 8017724:	68fb      	ldr	r3, [r7, #12]
 8017726:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8017728:	68fb      	ldr	r3, [r7, #12]
}
 801772a:	4618      	mov	r0, r3
 801772c:	3710      	adds	r7, #16
 801772e:	46bd      	mov	sp, r7
 8017730:	bd80      	pop	{r7, pc}
 8017732:	bf00      	nop
 8017734:	2400c7bc 	.word	0x2400c7bc

08017738 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8017738:	b580      	push	{r7, lr}
 801773a:	b086      	sub	sp, #24
 801773c:	af00      	add	r7, sp, #0
 801773e:	60f8      	str	r0, [r7, #12]
 8017740:	60b9      	str	r1, [r7, #8]
 8017742:	607a      	str	r2, [r7, #4]
 8017744:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8017746:	2300      	movs	r3, #0
 8017748:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 801774a:	68fb      	ldr	r3, [r7, #12]
 801774c:	68ba      	ldr	r2, [r7, #8]
 801774e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8017750:	68fb      	ldr	r3, [r7, #12]
 8017752:	68fa      	ldr	r2, [r7, #12]
 8017754:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8017756:	68ba      	ldr	r2, [r7, #8]
 8017758:	687b      	ldr	r3, [r7, #4]
 801775a:	429a      	cmp	r2, r3
 801775c:	d812      	bhi.n	8017784 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801775e:	687a      	ldr	r2, [r7, #4]
 8017760:	683b      	ldr	r3, [r7, #0]
 8017762:	1ad2      	subs	r2, r2, r3
 8017764:	68fb      	ldr	r3, [r7, #12]
 8017766:	699b      	ldr	r3, [r3, #24]
 8017768:	429a      	cmp	r2, r3
 801776a:	d302      	bcc.n	8017772 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 801776c:	2301      	movs	r3, #1
 801776e:	617b      	str	r3, [r7, #20]
 8017770:	e01b      	b.n	80177aa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8017772:	4b10      	ldr	r3, [pc, #64]	; (80177b4 <prvInsertTimerInActiveList+0x7c>)
 8017774:	681a      	ldr	r2, [r3, #0]
 8017776:	68fb      	ldr	r3, [r7, #12]
 8017778:	3304      	adds	r3, #4
 801777a:	4619      	mov	r1, r3
 801777c:	4610      	mov	r0, r2
 801777e:	f7fd fb9c 	bl	8014eba <vListInsert>
 8017782:	e012      	b.n	80177aa <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8017784:	687a      	ldr	r2, [r7, #4]
 8017786:	683b      	ldr	r3, [r7, #0]
 8017788:	429a      	cmp	r2, r3
 801778a:	d206      	bcs.n	801779a <prvInsertTimerInActiveList+0x62>
 801778c:	68ba      	ldr	r2, [r7, #8]
 801778e:	683b      	ldr	r3, [r7, #0]
 8017790:	429a      	cmp	r2, r3
 8017792:	d302      	bcc.n	801779a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8017794:	2301      	movs	r3, #1
 8017796:	617b      	str	r3, [r7, #20]
 8017798:	e007      	b.n	80177aa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801779a:	4b07      	ldr	r3, [pc, #28]	; (80177b8 <prvInsertTimerInActiveList+0x80>)
 801779c:	681a      	ldr	r2, [r3, #0]
 801779e:	68fb      	ldr	r3, [r7, #12]
 80177a0:	3304      	adds	r3, #4
 80177a2:	4619      	mov	r1, r3
 80177a4:	4610      	mov	r0, r2
 80177a6:	f7fd fb88 	bl	8014eba <vListInsert>
		}
	}

	return xProcessTimerNow;
 80177aa:	697b      	ldr	r3, [r7, #20]
}
 80177ac:	4618      	mov	r0, r3
 80177ae:	3718      	adds	r7, #24
 80177b0:	46bd      	mov	sp, r7
 80177b2:	bd80      	pop	{r7, pc}
 80177b4:	2400c7b0 	.word	0x2400c7b0
 80177b8:	2400c7ac 	.word	0x2400c7ac

080177bc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80177bc:	b580      	push	{r7, lr}
 80177be:	b08e      	sub	sp, #56	; 0x38
 80177c0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80177c2:	e0ca      	b.n	801795a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80177c4:	687b      	ldr	r3, [r7, #4]
 80177c6:	2b00      	cmp	r3, #0
 80177c8:	da18      	bge.n	80177fc <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80177ca:	1d3b      	adds	r3, r7, #4
 80177cc:	3304      	adds	r3, #4
 80177ce:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80177d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80177d2:	2b00      	cmp	r3, #0
 80177d4:	d10a      	bne.n	80177ec <prvProcessReceivedCommands+0x30>
	__asm volatile
 80177d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80177da:	f383 8811 	msr	BASEPRI, r3
 80177de:	f3bf 8f6f 	isb	sy
 80177e2:	f3bf 8f4f 	dsb	sy
 80177e6:	61fb      	str	r3, [r7, #28]
}
 80177e8:	bf00      	nop
 80177ea:	e7fe      	b.n	80177ea <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80177ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80177ee:	681b      	ldr	r3, [r3, #0]
 80177f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80177f2:	6850      	ldr	r0, [r2, #4]
 80177f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80177f6:	6892      	ldr	r2, [r2, #8]
 80177f8:	4611      	mov	r1, r2
 80177fa:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80177fc:	687b      	ldr	r3, [r7, #4]
 80177fe:	2b00      	cmp	r3, #0
 8017800:	f2c0 80aa 	blt.w	8017958 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8017804:	68fb      	ldr	r3, [r7, #12]
 8017806:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8017808:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801780a:	695b      	ldr	r3, [r3, #20]
 801780c:	2b00      	cmp	r3, #0
 801780e:	d004      	beq.n	801781a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8017810:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017812:	3304      	adds	r3, #4
 8017814:	4618      	mov	r0, r3
 8017816:	f7fd fb89 	bl	8014f2c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801781a:	463b      	mov	r3, r7
 801781c:	4618      	mov	r0, r3
 801781e:	f7ff ff6b 	bl	80176f8 <prvSampleTimeNow>
 8017822:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8017824:	687b      	ldr	r3, [r7, #4]
 8017826:	2b09      	cmp	r3, #9
 8017828:	f200 8097 	bhi.w	801795a <prvProcessReceivedCommands+0x19e>
 801782c:	a201      	add	r2, pc, #4	; (adr r2, 8017834 <prvProcessReceivedCommands+0x78>)
 801782e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017832:	bf00      	nop
 8017834:	0801785d 	.word	0x0801785d
 8017838:	0801785d 	.word	0x0801785d
 801783c:	0801785d 	.word	0x0801785d
 8017840:	080178d1 	.word	0x080178d1
 8017844:	080178e5 	.word	0x080178e5
 8017848:	0801792f 	.word	0x0801792f
 801784c:	0801785d 	.word	0x0801785d
 8017850:	0801785d 	.word	0x0801785d
 8017854:	080178d1 	.word	0x080178d1
 8017858:	080178e5 	.word	0x080178e5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801785c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801785e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8017862:	f043 0301 	orr.w	r3, r3, #1
 8017866:	b2da      	uxtb	r2, r3
 8017868:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801786a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 801786e:	68ba      	ldr	r2, [r7, #8]
 8017870:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017872:	699b      	ldr	r3, [r3, #24]
 8017874:	18d1      	adds	r1, r2, r3
 8017876:	68bb      	ldr	r3, [r7, #8]
 8017878:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801787a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801787c:	f7ff ff5c 	bl	8017738 <prvInsertTimerInActiveList>
 8017880:	4603      	mov	r3, r0
 8017882:	2b00      	cmp	r3, #0
 8017884:	d069      	beq.n	801795a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8017886:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017888:	6a1b      	ldr	r3, [r3, #32]
 801788a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801788c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801788e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017890:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8017894:	f003 0304 	and.w	r3, r3, #4
 8017898:	2b00      	cmp	r3, #0
 801789a:	d05e      	beq.n	801795a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 801789c:	68ba      	ldr	r2, [r7, #8]
 801789e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80178a0:	699b      	ldr	r3, [r3, #24]
 80178a2:	441a      	add	r2, r3
 80178a4:	2300      	movs	r3, #0
 80178a6:	9300      	str	r3, [sp, #0]
 80178a8:	2300      	movs	r3, #0
 80178aa:	2100      	movs	r1, #0
 80178ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80178ae:	f7ff fe05 	bl	80174bc <xTimerGenericCommand>
 80178b2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80178b4:	6a3b      	ldr	r3, [r7, #32]
 80178b6:	2b00      	cmp	r3, #0
 80178b8:	d14f      	bne.n	801795a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80178ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80178be:	f383 8811 	msr	BASEPRI, r3
 80178c2:	f3bf 8f6f 	isb	sy
 80178c6:	f3bf 8f4f 	dsb	sy
 80178ca:	61bb      	str	r3, [r7, #24]
}
 80178cc:	bf00      	nop
 80178ce:	e7fe      	b.n	80178ce <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80178d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80178d2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80178d6:	f023 0301 	bic.w	r3, r3, #1
 80178da:	b2da      	uxtb	r2, r3
 80178dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80178de:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80178e2:	e03a      	b.n	801795a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80178e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80178e6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80178ea:	f043 0301 	orr.w	r3, r3, #1
 80178ee:	b2da      	uxtb	r2, r3
 80178f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80178f2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80178f6:	68ba      	ldr	r2, [r7, #8]
 80178f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80178fa:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80178fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80178fe:	699b      	ldr	r3, [r3, #24]
 8017900:	2b00      	cmp	r3, #0
 8017902:	d10a      	bne.n	801791a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8017904:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017908:	f383 8811 	msr	BASEPRI, r3
 801790c:	f3bf 8f6f 	isb	sy
 8017910:	f3bf 8f4f 	dsb	sy
 8017914:	617b      	str	r3, [r7, #20]
}
 8017916:	bf00      	nop
 8017918:	e7fe      	b.n	8017918 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 801791a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801791c:	699a      	ldr	r2, [r3, #24]
 801791e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017920:	18d1      	adds	r1, r2, r3
 8017922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017924:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017926:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017928:	f7ff ff06 	bl	8017738 <prvInsertTimerInActiveList>
					break;
 801792c:	e015      	b.n	801795a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 801792e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017930:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8017934:	f003 0302 	and.w	r3, r3, #2
 8017938:	2b00      	cmp	r3, #0
 801793a:	d103      	bne.n	8017944 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 801793c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801793e:	f7fd f94d 	bl	8014bdc <vPortFree>
 8017942:	e00a      	b.n	801795a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8017944:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017946:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801794a:	f023 0301 	bic.w	r3, r3, #1
 801794e:	b2da      	uxtb	r2, r3
 8017950:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017952:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8017956:	e000      	b.n	801795a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8017958:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801795a:	4b08      	ldr	r3, [pc, #32]	; (801797c <prvProcessReceivedCommands+0x1c0>)
 801795c:	681b      	ldr	r3, [r3, #0]
 801795e:	1d39      	adds	r1, r7, #4
 8017960:	2200      	movs	r2, #0
 8017962:	4618      	mov	r0, r3
 8017964:	f7fe f926 	bl	8015bb4 <xQueueReceive>
 8017968:	4603      	mov	r3, r0
 801796a:	2b00      	cmp	r3, #0
 801796c:	f47f af2a 	bne.w	80177c4 <prvProcessReceivedCommands+0x8>
	}
}
 8017970:	bf00      	nop
 8017972:	bf00      	nop
 8017974:	3730      	adds	r7, #48	; 0x30
 8017976:	46bd      	mov	sp, r7
 8017978:	bd80      	pop	{r7, pc}
 801797a:	bf00      	nop
 801797c:	2400c7b4 	.word	0x2400c7b4

08017980 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8017980:	b580      	push	{r7, lr}
 8017982:	b088      	sub	sp, #32
 8017984:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8017986:	e048      	b.n	8017a1a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8017988:	4b2d      	ldr	r3, [pc, #180]	; (8017a40 <prvSwitchTimerLists+0xc0>)
 801798a:	681b      	ldr	r3, [r3, #0]
 801798c:	68db      	ldr	r3, [r3, #12]
 801798e:	681b      	ldr	r3, [r3, #0]
 8017990:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017992:	4b2b      	ldr	r3, [pc, #172]	; (8017a40 <prvSwitchTimerLists+0xc0>)
 8017994:	681b      	ldr	r3, [r3, #0]
 8017996:	68db      	ldr	r3, [r3, #12]
 8017998:	68db      	ldr	r3, [r3, #12]
 801799a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801799c:	68fb      	ldr	r3, [r7, #12]
 801799e:	3304      	adds	r3, #4
 80179a0:	4618      	mov	r0, r3
 80179a2:	f7fd fac3 	bl	8014f2c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80179a6:	68fb      	ldr	r3, [r7, #12]
 80179a8:	6a1b      	ldr	r3, [r3, #32]
 80179aa:	68f8      	ldr	r0, [r7, #12]
 80179ac:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80179ae:	68fb      	ldr	r3, [r7, #12]
 80179b0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80179b4:	f003 0304 	and.w	r3, r3, #4
 80179b8:	2b00      	cmp	r3, #0
 80179ba:	d02e      	beq.n	8017a1a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80179bc:	68fb      	ldr	r3, [r7, #12]
 80179be:	699b      	ldr	r3, [r3, #24]
 80179c0:	693a      	ldr	r2, [r7, #16]
 80179c2:	4413      	add	r3, r2
 80179c4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80179c6:	68ba      	ldr	r2, [r7, #8]
 80179c8:	693b      	ldr	r3, [r7, #16]
 80179ca:	429a      	cmp	r2, r3
 80179cc:	d90e      	bls.n	80179ec <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80179ce:	68fb      	ldr	r3, [r7, #12]
 80179d0:	68ba      	ldr	r2, [r7, #8]
 80179d2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80179d4:	68fb      	ldr	r3, [r7, #12]
 80179d6:	68fa      	ldr	r2, [r7, #12]
 80179d8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80179da:	4b19      	ldr	r3, [pc, #100]	; (8017a40 <prvSwitchTimerLists+0xc0>)
 80179dc:	681a      	ldr	r2, [r3, #0]
 80179de:	68fb      	ldr	r3, [r7, #12]
 80179e0:	3304      	adds	r3, #4
 80179e2:	4619      	mov	r1, r3
 80179e4:	4610      	mov	r0, r2
 80179e6:	f7fd fa68 	bl	8014eba <vListInsert>
 80179ea:	e016      	b.n	8017a1a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80179ec:	2300      	movs	r3, #0
 80179ee:	9300      	str	r3, [sp, #0]
 80179f0:	2300      	movs	r3, #0
 80179f2:	693a      	ldr	r2, [r7, #16]
 80179f4:	2100      	movs	r1, #0
 80179f6:	68f8      	ldr	r0, [r7, #12]
 80179f8:	f7ff fd60 	bl	80174bc <xTimerGenericCommand>
 80179fc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80179fe:	687b      	ldr	r3, [r7, #4]
 8017a00:	2b00      	cmp	r3, #0
 8017a02:	d10a      	bne.n	8017a1a <prvSwitchTimerLists+0x9a>
	__asm volatile
 8017a04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017a08:	f383 8811 	msr	BASEPRI, r3
 8017a0c:	f3bf 8f6f 	isb	sy
 8017a10:	f3bf 8f4f 	dsb	sy
 8017a14:	603b      	str	r3, [r7, #0]
}
 8017a16:	bf00      	nop
 8017a18:	e7fe      	b.n	8017a18 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8017a1a:	4b09      	ldr	r3, [pc, #36]	; (8017a40 <prvSwitchTimerLists+0xc0>)
 8017a1c:	681b      	ldr	r3, [r3, #0]
 8017a1e:	681b      	ldr	r3, [r3, #0]
 8017a20:	2b00      	cmp	r3, #0
 8017a22:	d1b1      	bne.n	8017988 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8017a24:	4b06      	ldr	r3, [pc, #24]	; (8017a40 <prvSwitchTimerLists+0xc0>)
 8017a26:	681b      	ldr	r3, [r3, #0]
 8017a28:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8017a2a:	4b06      	ldr	r3, [pc, #24]	; (8017a44 <prvSwitchTimerLists+0xc4>)
 8017a2c:	681b      	ldr	r3, [r3, #0]
 8017a2e:	4a04      	ldr	r2, [pc, #16]	; (8017a40 <prvSwitchTimerLists+0xc0>)
 8017a30:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8017a32:	4a04      	ldr	r2, [pc, #16]	; (8017a44 <prvSwitchTimerLists+0xc4>)
 8017a34:	697b      	ldr	r3, [r7, #20]
 8017a36:	6013      	str	r3, [r2, #0]
}
 8017a38:	bf00      	nop
 8017a3a:	3718      	adds	r7, #24
 8017a3c:	46bd      	mov	sp, r7
 8017a3e:	bd80      	pop	{r7, pc}
 8017a40:	2400c7ac 	.word	0x2400c7ac
 8017a44:	2400c7b0 	.word	0x2400c7b0

08017a48 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8017a48:	b580      	push	{r7, lr}
 8017a4a:	b082      	sub	sp, #8
 8017a4c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8017a4e:	f7fd fbc1 	bl	80151d4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8017a52:	4b15      	ldr	r3, [pc, #84]	; (8017aa8 <prvCheckForValidListAndQueue+0x60>)
 8017a54:	681b      	ldr	r3, [r3, #0]
 8017a56:	2b00      	cmp	r3, #0
 8017a58:	d120      	bne.n	8017a9c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8017a5a:	4814      	ldr	r0, [pc, #80]	; (8017aac <prvCheckForValidListAndQueue+0x64>)
 8017a5c:	f7fd f9dc 	bl	8014e18 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8017a60:	4813      	ldr	r0, [pc, #76]	; (8017ab0 <prvCheckForValidListAndQueue+0x68>)
 8017a62:	f7fd f9d9 	bl	8014e18 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8017a66:	4b13      	ldr	r3, [pc, #76]	; (8017ab4 <prvCheckForValidListAndQueue+0x6c>)
 8017a68:	4a10      	ldr	r2, [pc, #64]	; (8017aac <prvCheckForValidListAndQueue+0x64>)
 8017a6a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8017a6c:	4b12      	ldr	r3, [pc, #72]	; (8017ab8 <prvCheckForValidListAndQueue+0x70>)
 8017a6e:	4a10      	ldr	r2, [pc, #64]	; (8017ab0 <prvCheckForValidListAndQueue+0x68>)
 8017a70:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8017a72:	2300      	movs	r3, #0
 8017a74:	9300      	str	r3, [sp, #0]
 8017a76:	4b11      	ldr	r3, [pc, #68]	; (8017abc <prvCheckForValidListAndQueue+0x74>)
 8017a78:	4a11      	ldr	r2, [pc, #68]	; (8017ac0 <prvCheckForValidListAndQueue+0x78>)
 8017a7a:	2110      	movs	r1, #16
 8017a7c:	200a      	movs	r0, #10
 8017a7e:	f7fd fd33 	bl	80154e8 <xQueueGenericCreateStatic>
 8017a82:	4603      	mov	r3, r0
 8017a84:	4a08      	ldr	r2, [pc, #32]	; (8017aa8 <prvCheckForValidListAndQueue+0x60>)
 8017a86:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8017a88:	4b07      	ldr	r3, [pc, #28]	; (8017aa8 <prvCheckForValidListAndQueue+0x60>)
 8017a8a:	681b      	ldr	r3, [r3, #0]
 8017a8c:	2b00      	cmp	r3, #0
 8017a8e:	d005      	beq.n	8017a9c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8017a90:	4b05      	ldr	r3, [pc, #20]	; (8017aa8 <prvCheckForValidListAndQueue+0x60>)
 8017a92:	681b      	ldr	r3, [r3, #0]
 8017a94:	490b      	ldr	r1, [pc, #44]	; (8017ac4 <prvCheckForValidListAndQueue+0x7c>)
 8017a96:	4618      	mov	r0, r3
 8017a98:	f7fe fc44 	bl	8016324 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8017a9c:	f7fd fbca 	bl	8015234 <vPortExitCritical>
}
 8017aa0:	bf00      	nop
 8017aa2:	46bd      	mov	sp, r7
 8017aa4:	bd80      	pop	{r7, pc}
 8017aa6:	bf00      	nop
 8017aa8:	2400c7b4 	.word	0x2400c7b4
 8017aac:	2400c784 	.word	0x2400c784
 8017ab0:	2400c798 	.word	0x2400c798
 8017ab4:	2400c7ac 	.word	0x2400c7ac
 8017ab8:	2400c7b0 	.word	0x2400c7b0
 8017abc:	2400c860 	.word	0x2400c860
 8017ac0:	2400c7c0 	.word	0x2400c7c0
 8017ac4:	0802d818 	.word	0x0802d818

08017ac8 <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 8017ac8:	8880      	ldrh	r0, [r0, #4]
 8017aca:	4770      	bx	lr

08017acc <_ZN8touchgfx17AbstractPartition5clearEv>:
 8017acc:	2300      	movs	r3, #0
 8017ace:	8083      	strh	r3, [r0, #4]
 8017ad0:	4770      	bx	lr
	...

08017ad4 <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 8017ad4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017ad6:	6803      	ldr	r3, [r0, #0]
 8017ad8:	460e      	mov	r6, r1
 8017ada:	2100      	movs	r1, #0
 8017adc:	4605      	mov	r5, r0
 8017ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017ae0:	4798      	blx	r3
 8017ae2:	4604      	mov	r4, r0
 8017ae4:	682b      	ldr	r3, [r5, #0]
 8017ae6:	4628      	mov	r0, r5
 8017ae8:	1b34      	subs	r4, r6, r4
 8017aea:	6a1b      	ldr	r3, [r3, #32]
 8017aec:	b2a4      	uxth	r4, r4
 8017aee:	4798      	blx	r3
 8017af0:	88ab      	ldrh	r3, [r5, #4]
 8017af2:	fbb4 f4f0 	udiv	r4, r4, r0
 8017af6:	42a3      	cmp	r3, r4
 8017af8:	d805      	bhi.n	8017b06 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x32>
 8017afa:	4b0e      	ldr	r3, [pc, #56]	; (8017b34 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x60>)
 8017afc:	211e      	movs	r1, #30
 8017afe:	4a0e      	ldr	r2, [pc, #56]	; (8017b38 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x64>)
 8017b00:	480e      	ldr	r0, [pc, #56]	; (8017b3c <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x68>)
 8017b02:	f013 feb9 	bl	802b878 <__assert_func>
 8017b06:	682b      	ldr	r3, [r5, #0]
 8017b08:	2100      	movs	r1, #0
 8017b0a:	4628      	mov	r0, r5
 8017b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017b0e:	4798      	blx	r3
 8017b10:	682b      	ldr	r3, [r5, #0]
 8017b12:	4607      	mov	r7, r0
 8017b14:	4628      	mov	r0, r5
 8017b16:	6a1b      	ldr	r3, [r3, #32]
 8017b18:	4798      	blx	r3
 8017b1a:	1bf3      	subs	r3, r6, r7
 8017b1c:	b29b      	uxth	r3, r3
 8017b1e:	fbb3 f2f0 	udiv	r2, r3, r0
 8017b22:	fb02 3010 	mls	r0, r2, r0, r3
 8017b26:	b118      	cbz	r0, 8017b30 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x5c>
 8017b28:	4b05      	ldr	r3, [pc, #20]	; (8017b40 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x6c>)
 8017b2a:	211f      	movs	r1, #31
 8017b2c:	4a02      	ldr	r2, [pc, #8]	; (8017b38 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x64>)
 8017b2e:	e7e7      	b.n	8017b00 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x2c>
 8017b30:	4620      	mov	r0, r4
 8017b32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017b34:	0802e3d4 	.word	0x0802e3d4
 8017b38:	0802e542 	.word	0x0802e542
 8017b3c:	0802e3e9 	.word	0x0802e3e9
 8017b40:	0802e417 	.word	0x0802e417

08017b44 <_ZN8touchgfx17AbstractPartition8allocateEt>:
 8017b44:	b538      	push	{r3, r4, r5, lr}
 8017b46:	6803      	ldr	r3, [r0, #0]
 8017b48:	460d      	mov	r5, r1
 8017b4a:	4604      	mov	r4, r0
 8017b4c:	6a1b      	ldr	r3, [r3, #32]
 8017b4e:	4798      	blx	r3
 8017b50:	4285      	cmp	r5, r0
 8017b52:	d905      	bls.n	8017b60 <_ZN8touchgfx17AbstractPartition8allocateEt+0x1c>
 8017b54:	4b0c      	ldr	r3, [pc, #48]	; (8017b88 <_ZN8touchgfx17AbstractPartition8allocateEt+0x44>)
 8017b56:	2130      	movs	r1, #48	; 0x30
 8017b58:	4a0c      	ldr	r2, [pc, #48]	; (8017b8c <_ZN8touchgfx17AbstractPartition8allocateEt+0x48>)
 8017b5a:	480d      	ldr	r0, [pc, #52]	; (8017b90 <_ZN8touchgfx17AbstractPartition8allocateEt+0x4c>)
 8017b5c:	f013 fe8c 	bl	802b878 <__assert_func>
 8017b60:	6823      	ldr	r3, [r4, #0]
 8017b62:	4620      	mov	r0, r4
 8017b64:	88a5      	ldrh	r5, [r4, #4]
 8017b66:	69db      	ldr	r3, [r3, #28]
 8017b68:	4798      	blx	r3
 8017b6a:	4285      	cmp	r5, r0
 8017b6c:	d303      	bcc.n	8017b76 <_ZN8touchgfx17AbstractPartition8allocateEt+0x32>
 8017b6e:	4b09      	ldr	r3, [pc, #36]	; (8017b94 <_ZN8touchgfx17AbstractPartition8allocateEt+0x50>)
 8017b70:	2131      	movs	r1, #49	; 0x31
 8017b72:	4a06      	ldr	r2, [pc, #24]	; (8017b8c <_ZN8touchgfx17AbstractPartition8allocateEt+0x48>)
 8017b74:	e7f1      	b.n	8017b5a <_ZN8touchgfx17AbstractPartition8allocateEt+0x16>
 8017b76:	6823      	ldr	r3, [r4, #0]
 8017b78:	4620      	mov	r0, r4
 8017b7a:	88a1      	ldrh	r1, [r4, #4]
 8017b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017b7e:	4798      	blx	r3
 8017b80:	88a3      	ldrh	r3, [r4, #4]
 8017b82:	3301      	adds	r3, #1
 8017b84:	80a3      	strh	r3, [r4, #4]
 8017b86:	bd38      	pop	{r3, r4, r5, pc}
 8017b88:	0802e491 	.word	0x0802e491
 8017b8c:	0802e585 	.word	0x0802e585
 8017b90:	0802e3e9 	.word	0x0802e3e9
 8017b94:	0802e4a8 	.word	0x0802e4a8

08017b98 <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 8017b98:	b570      	push	{r4, r5, r6, lr}
 8017b9a:	6803      	ldr	r3, [r0, #0]
 8017b9c:	4616      	mov	r6, r2
 8017b9e:	4604      	mov	r4, r0
 8017ba0:	460d      	mov	r5, r1
 8017ba2:	6a1b      	ldr	r3, [r3, #32]
 8017ba4:	4798      	blx	r3
 8017ba6:	4286      	cmp	r6, r0
 8017ba8:	d905      	bls.n	8017bb6 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x1e>
 8017baa:	4b06      	ldr	r3, [pc, #24]	; (8017bc4 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x2c>)
 8017bac:	213a      	movs	r1, #58	; 0x3a
 8017bae:	4a06      	ldr	r2, [pc, #24]	; (8017bc8 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x30>)
 8017bb0:	4806      	ldr	r0, [pc, #24]	; (8017bcc <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x34>)
 8017bb2:	f013 fe61 	bl	802b878 <__assert_func>
 8017bb6:	6823      	ldr	r3, [r4, #0]
 8017bb8:	4629      	mov	r1, r5
 8017bba:	4620      	mov	r0, r4
 8017bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017bbe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017bc2:	4718      	bx	r3
 8017bc4:	0802e491 	.word	0x0802e491
 8017bc8:	0802e4f8 	.word	0x0802e4f8
 8017bcc:	0802e3e9 	.word	0x0802e3e9

08017bd0 <_ZN8touchgfx17AbstractPartitionD1Ev>:
 8017bd0:	4770      	bx	lr
	...

08017bd4 <_ZN8touchgfx17AbstractPartitionC1Ev>:
 8017bd4:	4a02      	ldr	r2, [pc, #8]	; (8017be0 <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 8017bd6:	6002      	str	r2, [r0, #0]
 8017bd8:	2200      	movs	r2, #0
 8017bda:	8082      	strh	r2, [r0, #4]
 8017bdc:	4770      	bx	lr
 8017bde:	bf00      	nop
 8017be0:	0802e4cc 	.word	0x0802e4cc

08017be4 <_ZNK8touchgfx25AbstractProgressIndicator21getProgressIndicatorXEv>:
 8017be4:	f9b0 005c 	ldrsh.w	r0, [r0, #92]	; 0x5c
 8017be8:	4770      	bx	lr

08017bea <_ZNK8touchgfx25AbstractProgressIndicator21getProgressIndicatorYEv>:
 8017bea:	f9b0 005e 	ldrsh.w	r0, [r0, #94]	; 0x5e
 8017bee:	4770      	bx	lr

08017bf0 <_ZNK8touchgfx25AbstractProgressIndicator25getProgressIndicatorWidthEv>:
 8017bf0:	f9b0 0060 	ldrsh.w	r0, [r0, #96]	; 0x60
 8017bf4:	4770      	bx	lr

08017bf6 <_ZNK8touchgfx25AbstractProgressIndicator26getProgressIndicatorHeightEv>:
 8017bf6:	f9b0 0062 	ldrsh.w	r0, [r0, #98]	; 0x62
 8017bfa:	4770      	bx	lr

08017bfc <_ZNK8touchgfx25AbstractProgressIndicator8getRangeERiS1_RtS2_>:
 8017bfc:	b510      	push	{r4, lr}
 8017bfe:	f8d0 4084 	ldr.w	r4, [r0, #132]	; 0x84
 8017c02:	600c      	str	r4, [r1, #0]
 8017c04:	f8d0 1088 	ldr.w	r1, [r0, #136]	; 0x88
 8017c08:	6011      	str	r1, [r2, #0]
 8017c0a:	f8b0 2090 	ldrh.w	r2, [r0, #144]	; 0x90
 8017c0e:	801a      	strh	r2, [r3, #0]
 8017c10:	9b02      	ldr	r3, [sp, #8]
 8017c12:	f8b0 2092 	ldrh.w	r2, [r0, #146]	; 0x92
 8017c16:	801a      	strh	r2, [r3, #0]
 8017c18:	bd10      	pop	{r4, pc}

08017c1a <_ZNK8touchgfx25AbstractProgressIndicator8getRangeERiS1_Rt>:
 8017c1a:	b510      	push	{r4, lr}
 8017c1c:	f8d0 4084 	ldr.w	r4, [r0, #132]	; 0x84
 8017c20:	600c      	str	r4, [r1, #0]
 8017c22:	f8d0 1088 	ldr.w	r1, [r0, #136]	; 0x88
 8017c26:	6011      	str	r1, [r2, #0]
 8017c28:	f8b0 2090 	ldrh.w	r2, [r0, #144]	; 0x90
 8017c2c:	801a      	strh	r2, [r3, #0]
 8017c2e:	bd10      	pop	{r4, pc}

08017c30 <_ZNK8touchgfx25AbstractProgressIndicator8getRangeERiS1_>:
 8017c30:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 8017c34:	600b      	str	r3, [r1, #0]
 8017c36:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 8017c3a:	6013      	str	r3, [r2, #0]
 8017c3c:	4770      	bx	lr

08017c3e <_ZN8touchgfx25AbstractProgressIndicator17setEasingEquationEPFstsstE>:
 8017c3e:	f8c0 1094 	str.w	r1, [r0, #148]	; 0x94
 8017c42:	4770      	bx	lr

08017c44 <_ZNK8touchgfx25AbstractProgressIndicator8getValueEv>:
 8017c44:	f8d0 008c 	ldr.w	r0, [r0, #140]	; 0x8c
 8017c48:	4770      	bx	lr

08017c4a <_ZN8touchgfx25AbstractProgressIndicator8setAlphaEh>:
 8017c4a:	f880 1054 	strb.w	r1, [r0, #84]	; 0x54
 8017c4e:	4770      	bx	lr

08017c50 <_ZNK8touchgfx25AbstractProgressIndicator8getAlphaEv>:
 8017c50:	f890 0054 	ldrb.w	r0, [r0, #84]	; 0x54
 8017c54:	4770      	bx	lr

08017c56 <_ZN8touchgfx25AbstractProgressIndicator11updateValueEit>:
 8017c56:	b570      	push	{r4, r5, r6, lr}
 8017c58:	f8d0 5084 	ldr.w	r5, [r0, #132]	; 0x84
 8017c5c:	4604      	mov	r4, r0
 8017c5e:	4616      	mov	r6, r2
 8017c60:	428d      	cmp	r5, r1
 8017c62:	bfb8      	it	lt
 8017c64:	460d      	movlt	r5, r1
 8017c66:	f8d0 1088 	ldr.w	r1, [r0, #136]	; 0x88
 8017c6a:	428d      	cmp	r5, r1
 8017c6c:	bfa8      	it	ge
 8017c6e:	460d      	movge	r5, r1
 8017c70:	b99a      	cbnz	r2, 8017c9a <_ZN8touchgfx25AbstractProgressIndicator11updateValueEit+0x44>
 8017c72:	6803      	ldr	r3, [r0, #0]
 8017c74:	4629      	mov	r1, r5
 8017c76:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8017c7a:	4798      	blx	r3
 8017c7c:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
 8017c80:	b358      	cbz	r0, 8017cda <_ZN8touchgfx25AbstractProgressIndicator11updateValueEit+0x84>
 8017c82:	6803      	ldr	r3, [r0, #0]
 8017c84:	68db      	ldr	r3, [r3, #12]
 8017c86:	4798      	blx	r3
 8017c88:	b338      	cbz	r0, 8017cda <_ZN8touchgfx25AbstractProgressIndicator11updateValueEit+0x84>
 8017c8a:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
 8017c8e:	4621      	mov	r1, r4
 8017c90:	6803      	ldr	r3, [r0, #0]
 8017c92:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017c96:	689b      	ldr	r3, [r3, #8]
 8017c98:	4718      	bx	r3
 8017c9a:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
 8017c9e:	2b00      	cmp	r3, #0
 8017ca0:	dd07      	ble.n	8017cb2 <_ZN8touchgfx25AbstractProgressIndicator11updateValueEit+0x5c>
 8017ca2:	f006 fe0f 	bl	801e8c4 <_ZN8touchgfx11Application11getInstanceEv>
 8017ca6:	4621      	mov	r1, r4
 8017ca8:	f006 fe44 	bl	801e934 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE>
 8017cac:	2300      	movs	r3, #0
 8017cae:	f884 3098 	strb.w	r3, [r4, #152]	; 0x98
 8017cb2:	6823      	ldr	r3, [r4, #0]
 8017cb4:	4620      	mov	r0, r4
 8017cb6:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8017cba:	4798      	blx	r3
 8017cbc:	2300      	movs	r3, #0
 8017cbe:	f8c4 60a4 	str.w	r6, [r4, #164]	; 0xa4
 8017cc2:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
 8017cc6:	e9c4 0527 	strd	r0, r5, [r4, #156]	; 0x9c
 8017cca:	f006 fdfb 	bl	801e8c4 <_ZN8touchgfx11Application11getInstanceEv>
 8017cce:	4621      	mov	r1, r4
 8017cd0:	f006 fdfe 	bl	801e8d0 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE>
 8017cd4:	2301      	movs	r3, #1
 8017cd6:	f884 3098 	strb.w	r3, [r4, #152]	; 0x98
 8017cda:	bd70      	pop	{r4, r5, r6, pc}

08017cdc <_ZN8touchgfx25AbstractProgressIndicator8setValueEi>:
 8017cdc:	b510      	push	{r4, lr}
 8017cde:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 8017ce2:	4604      	mov	r4, r0
 8017ce4:	4299      	cmp	r1, r3
 8017ce6:	bfb8      	it	lt
 8017ce8:	4619      	movlt	r1, r3
 8017cea:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 8017cee:	4299      	cmp	r1, r3
 8017cf0:	bfa8      	it	ge
 8017cf2:	4619      	movge	r1, r3
 8017cf4:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
 8017cf8:	428b      	cmp	r3, r1
 8017cfa:	d010      	beq.n	8017d1e <_ZN8touchgfx25AbstractProgressIndicator8setValueEi+0x42>
 8017cfc:	f8c0 108c 	str.w	r1, [r0, #140]	; 0x8c
 8017d00:	f8d0 00ac 	ldr.w	r0, [r0, #172]	; 0xac
 8017d04:	b158      	cbz	r0, 8017d1e <_ZN8touchgfx25AbstractProgressIndicator8setValueEi+0x42>
 8017d06:	6803      	ldr	r3, [r0, #0]
 8017d08:	68db      	ldr	r3, [r3, #12]
 8017d0a:	4798      	blx	r3
 8017d0c:	b138      	cbz	r0, 8017d1e <_ZN8touchgfx25AbstractProgressIndicator8setValueEi+0x42>
 8017d0e:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
 8017d12:	4621      	mov	r1, r4
 8017d14:	6803      	ldr	r3, [r0, #0]
 8017d16:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017d1a:	689b      	ldr	r3, [r3, #8]
 8017d1c:	4718      	bx	r3
 8017d1e:	bd10      	pop	{r4, pc}

08017d20 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt>:
 8017d20:	4291      	cmp	r1, r2
 8017d22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017d26:	4604      	mov	r4, r0
 8017d28:	460e      	mov	r6, r1
 8017d2a:	4615      	mov	r5, r2
 8017d2c:	4698      	mov	r8, r3
 8017d2e:	f8bd 7018 	ldrh.w	r7, [sp, #24]
 8017d32:	db05      	blt.n	8017d40 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt+0x20>
 8017d34:	4b11      	ldr	r3, [pc, #68]	; (8017d7c <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt+0x5c>)
 8017d36:	214b      	movs	r1, #75	; 0x4b
 8017d38:	4a11      	ldr	r2, [pc, #68]	; (8017d80 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt+0x60>)
 8017d3a:	4812      	ldr	r0, [pc, #72]	; (8017d84 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt+0x64>)
 8017d3c:	f013 fd9c 	bl	802b878 <__assert_func>
 8017d40:	6803      	ldr	r3, [r0, #0]
 8017d42:	e9c0 1221 	strd	r1, r2, [r0, #132]	; 0x84
 8017d46:	f8d0 108c 	ldr.w	r1, [r0, #140]	; 0x8c
 8017d4a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8017d4e:	4798      	blx	r3
 8017d50:	f1b8 0f00 	cmp.w	r8, #0
 8017d54:	d10c      	bne.n	8017d70 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt+0x50>
 8017d56:	1bad      	subs	r5, r5, r6
 8017d58:	f8a4 5090 	strh.w	r5, [r4, #144]	; 0x90
 8017d5c:	f8b4 3090 	ldrh.w	r3, [r4, #144]	; 0x90
 8017d60:	f8a4 7092 	strh.w	r7, [r4, #146]	; 0x92
 8017d64:	42bb      	cmp	r3, r7
 8017d66:	d806      	bhi.n	8017d76 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt+0x56>
 8017d68:	4b07      	ldr	r3, [pc, #28]	; (8017d88 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt+0x68>)
 8017d6a:	2158      	movs	r1, #88	; 0x58
 8017d6c:	4a04      	ldr	r2, [pc, #16]	; (8017d80 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt+0x60>)
 8017d6e:	e7e4      	b.n	8017d3a <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt+0x1a>
 8017d70:	f8a4 8090 	strh.w	r8, [r4, #144]	; 0x90
 8017d74:	e7f2      	b.n	8017d5c <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt+0x3c>
 8017d76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017d7a:	bf00      	nop
 8017d7c:	0802e5c3 	.word	0x0802e5c3
 8017d80:	0802e710 	.word	0x0802e710
 8017d84:	0802e5cd 	.word	0x0802e5cd
 8017d88:	0802e624 	.word	0x0802e624

08017d8c <_ZN8touchgfx25AbstractProgressIndicator15handleTickEventEv>:
 8017d8c:	b570      	push	{r4, r5, r6, lr}
 8017d8e:	f890 3098 	ldrb.w	r3, [r0, #152]	; 0x98
 8017d92:	4604      	mov	r4, r0
 8017d94:	b3a3      	cbz	r3, 8017e00 <_ZN8touchgfx25AbstractProgressIndicator15handleTickEventEv+0x74>
 8017d96:	f8d0 00a8 	ldr.w	r0, [r0, #168]	; 0xa8
 8017d9a:	2100      	movs	r1, #0
 8017d9c:	f8d4 5094 	ldr.w	r5, [r4, #148]	; 0x94
 8017da0:	3001      	adds	r0, #1
 8017da2:	e9d4 3227 	ldrd	r3, r2, [r4, #156]	; 0x9c
 8017da6:	f8c4 00a8 	str.w	r0, [r4, #168]	; 0xa8
 8017daa:	b280      	uxth	r0, r0
 8017dac:	1ad2      	subs	r2, r2, r3
 8017dae:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	; 0xa4
 8017db2:	b212      	sxth	r2, r2
 8017db4:	47a8      	blx	r5
 8017db6:	f8d4 109c 	ldr.w	r1, [r4, #156]	; 0x9c
 8017dba:	6823      	ldr	r3, [r4, #0]
 8017dbc:	4401      	add	r1, r0
 8017dbe:	4620      	mov	r0, r4
 8017dc0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8017dc4:	4798      	blx	r3
 8017dc6:	e9d4 3229 	ldrd	r3, r2, [r4, #164]	; 0xa4
 8017dca:	429a      	cmp	r2, r3
 8017dcc:	db18      	blt.n	8017e00 <_ZN8touchgfx25AbstractProgressIndicator15handleTickEventEv+0x74>
 8017dce:	2500      	movs	r5, #0
 8017dd0:	e9c4 5529 	strd	r5, r5, [r4, #164]	; 0xa4
 8017dd4:	f006 fd76 	bl	801e8c4 <_ZN8touchgfx11Application11getInstanceEv>
 8017dd8:	4621      	mov	r1, r4
 8017dda:	f006 fdab 	bl	801e934 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE>
 8017dde:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
 8017de2:	f884 5098 	strb.w	r5, [r4, #152]	; 0x98
 8017de6:	b158      	cbz	r0, 8017e00 <_ZN8touchgfx25AbstractProgressIndicator15handleTickEventEv+0x74>
 8017de8:	6803      	ldr	r3, [r0, #0]
 8017dea:	68db      	ldr	r3, [r3, #12]
 8017dec:	4798      	blx	r3
 8017dee:	b138      	cbz	r0, 8017e00 <_ZN8touchgfx25AbstractProgressIndicator15handleTickEventEv+0x74>
 8017df0:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
 8017df4:	4621      	mov	r1, r4
 8017df6:	6803      	ldr	r3, [r0, #0]
 8017df8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017dfc:	689b      	ldr	r3, [r3, #8]
 8017dfe:	4718      	bx	r3
 8017e00:	bd70      	pop	{r4, r5, r6, pc}

08017e02 <_ZNK8touchgfx25AbstractProgressIndicator11getProgressEt>:
 8017e02:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8017e04:	4604      	mov	r4, r0
 8017e06:	460d      	mov	r5, r1
 8017e08:	b1a9      	cbz	r1, 8017e36 <_ZNK8touchgfx25AbstractProgressIndicator11getProgressEt+0x34>
 8017e0a:	f8b0 6092 	ldrh.w	r6, [r0, #146]	; 0x92
 8017e0e:	ab01      	add	r3, sp, #4
 8017e10:	f8b4 1090 	ldrh.w	r1, [r4, #144]	; 0x90
 8017e14:	f8d4 708c 	ldr.w	r7, [r4, #140]	; 0x8c
 8017e18:	1b89      	subs	r1, r1, r6
 8017e1a:	e9d0 0221 	ldrd	r0, r2, [r0, #132]	; 0x84
 8017e1e:	1a12      	subs	r2, r2, r0
 8017e20:	1a38      	subs	r0, r7, r0
 8017e22:	f007 fee1 	bl	801fbe8 <_ZN8touchgfx6muldivElllRl>
 8017e26:	4629      	mov	r1, r5
 8017e28:	ab01      	add	r3, sp, #4
 8017e2a:	f8b4 2090 	ldrh.w	r2, [r4, #144]	; 0x90
 8017e2e:	4430      	add	r0, r6
 8017e30:	f007 feda 	bl	801fbe8 <_ZN8touchgfx6muldivElllRl>
 8017e34:	b285      	uxth	r5, r0
 8017e36:	4628      	mov	r0, r5
 8017e38:	b003      	add	sp, #12
 8017e3a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08017e3c <_ZN8touchgfx25AbstractProgressIndicator28setProgressIndicatorPositionEssss>:
 8017e3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017e40:	4604      	mov	r4, r0
 8017e42:	f9bd 7018 	ldrsh.w	r7, [sp, #24]
 8017e46:	4698      	mov	r8, r3
 8017e48:	460e      	mov	r6, r1
 8017e4a:	4615      	mov	r5, r2
 8017e4c:	f8a4 105c 	strh.w	r1, [r4, #92]	; 0x5c
 8017e50:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
 8017e54:	4619      	mov	r1, r3
 8017e56:	463a      	mov	r2, r7
 8017e58:	3058      	adds	r0, #88	; 0x58
 8017e5a:	f7ec fa70 	bl	800433e <_ZN8touchgfx8Drawable14setWidthHeightEss>
 8017e5e:	4446      	add	r6, r8
 8017e60:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 8017e64:	443d      	add	r5, r7
 8017e66:	42b3      	cmp	r3, r6
 8017e68:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8017e6c:	bfb8      	it	lt
 8017e6e:	8126      	strhlt	r6, [r4, #8]
 8017e70:	42ab      	cmp	r3, r5
 8017e72:	bfb8      	it	lt
 8017e74:	8165      	strhlt	r5, [r4, #10]
 8017e76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08017e7a <_ZN8touchgfx25AbstractProgressIndicator13setBackgroundERKNS_6BitmapE>:
 8017e7a:	b510      	push	{r4, lr}
 8017e7c:	4604      	mov	r4, r0
 8017e7e:	302c      	adds	r0, #44	; 0x2c
 8017e80:	f004 feba 	bl	801cbf8 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8017e84:	f9b4 2036 	ldrsh.w	r2, [r4, #54]	; 0x36
 8017e88:	4620      	mov	r0, r4
 8017e8a:	f9b4 1034 	ldrsh.w	r1, [r4, #52]	; 0x34
 8017e8e:	f7ec fa56 	bl	800433e <_ZN8touchgfx8Drawable14setWidthHeightEss>
 8017e92:	bd10      	pop	{r4, pc}

08017e94 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev>:
 8017e94:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8017e96:	4604      	mov	r4, r0
 8017e98:	2500      	movs	r5, #0
 8017e9a:	f7ed ff2b 	bl	8005cf4 <_ZN8touchgfx8DrawableC1Ev>
 8017e9e:	4b24      	ldr	r3, [pc, #144]	; (8017f30 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev+0x9c>)
 8017ea0:	4626      	mov	r6, r4
 8017ea2:	f64f 77ff 	movw	r7, #65535	; 0xffff
 8017ea6:	2226      	movs	r2, #38	; 0x26
 8017ea8:	4629      	mov	r1, r5
 8017eaa:	62a5      	str	r5, [r4, #40]	; 0x28
 8017eac:	f846 3b2c 	str.w	r3, [r6], #44
 8017eb0:	4630      	mov	r0, r6
 8017eb2:	f8ad 7004 	strh.w	r7, [sp, #4]
 8017eb6:	f013 fd6b 	bl	802b990 <memset>
 8017eba:	4630      	mov	r0, r6
 8017ebc:	f7ed ff1a 	bl	8005cf4 <_ZN8touchgfx8DrawableC1Ev>
 8017ec0:	a902      	add	r1, sp, #8
 8017ec2:	4b1c      	ldr	r3, [pc, #112]	; (8017f34 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev+0xa0>)
 8017ec4:	4630      	mov	r0, r6
 8017ec6:	f884 7054 	strb.w	r7, [r4, #84]	; 0x54
 8017eca:	f104 0758 	add.w	r7, r4, #88	; 0x58
 8017ece:	62e3      	str	r3, [r4, #44]	; 0x2c
 8017ed0:	f831 3d04 	ldrh.w	r3, [r1, #-4]!
 8017ed4:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 8017ed8:	f004 fe8e 	bl	801cbf8 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8017edc:	4638      	mov	r0, r7
 8017ede:	f7ed ff09 	bl	8005cf4 <_ZN8touchgfx8DrawableC1Ev>
 8017ee2:	4b15      	ldr	r3, [pc, #84]	; (8017f38 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev+0xa4>)
 8017ee4:	4629      	mov	r1, r5
 8017ee6:	4630      	mov	r0, r6
 8017ee8:	65a3      	str	r3, [r4, #88]	; 0x58
 8017eea:	2364      	movs	r3, #100	; 0x64
 8017eec:	f884 5098 	strb.w	r5, [r4, #152]	; 0x98
 8017ef0:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 8017ef4:	e9c4 3522 	strd	r3, r5, [r4, #136]	; 0x88
 8017ef8:	4b10      	ldr	r3, [pc, #64]	; (8017f3c <_ZN8touchgfx25AbstractProgressIndicatorC1Ev+0xa8>)
 8017efa:	e9c4 5520 	strd	r5, r5, [r4, #128]	; 0x80
 8017efe:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
 8017f02:	e9c4 5527 	strd	r5, r5, [r4, #156]	; 0x9c
 8017f06:	e9c4 5529 	strd	r5, r5, [r4, #164]	; 0xa4
 8017f0a:	e9c4 552b 	strd	r5, r5, [r4, #172]	; 0xac
 8017f0e:	f7ec f99c 	bl	800424a <_ZN8touchgfx8Drawable4setXEs>
 8017f12:	4629      	mov	r1, r5
 8017f14:	4630      	mov	r0, r6
 8017f16:	f7ec f9a7 	bl	8004268 <_ZN8touchgfx8Drawable4setYEs>
 8017f1a:	4631      	mov	r1, r6
 8017f1c:	4620      	mov	r0, r4
 8017f1e:	f000 f877 	bl	8018010 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8017f22:	4620      	mov	r0, r4
 8017f24:	4639      	mov	r1, r7
 8017f26:	f000 f873 	bl	8018010 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8017f2a:	4620      	mov	r0, r4
 8017f2c:	b003      	add	sp, #12
 8017f2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017f30:	0802e648 	.word	0x0802e648
 8017f34:	080300c4 	.word	0x080300c4
 8017f38:	0802e83c 	.word	0x0802e83c
 8017f3c:	080202f3 	.word	0x080202f3

08017f40 <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 8017f40:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8017f42:	2000      	movs	r0, #0
 8017f44:	b12b      	cbz	r3, 8017f52 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 8017f46:	b920      	cbnz	r0, 8017f52 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 8017f48:	1a5a      	subs	r2, r3, r1
 8017f4a:	699b      	ldr	r3, [r3, #24]
 8017f4c:	4250      	negs	r0, r2
 8017f4e:	4150      	adcs	r0, r2
 8017f50:	e7f8      	b.n	8017f44 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 8017f52:	4770      	bx	lr

08017f54 <_ZN8touchgfx9Container9removeAllEv>:
 8017f54:	2200      	movs	r2, #0
 8017f56:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8017f58:	b123      	cbz	r3, 8017f64 <_ZN8touchgfx9Container9removeAllEv+0x10>
 8017f5a:	6999      	ldr	r1, [r3, #24]
 8017f5c:	6281      	str	r1, [r0, #40]	; 0x28
 8017f5e:	e9c3 2205 	strd	r2, r2, [r3, #20]
 8017f62:	e7f8      	b.n	8017f56 <_ZN8touchgfx9Container9removeAllEv+0x2>
 8017f64:	4770      	bx	lr

08017f66 <_ZN8touchgfx9Container6unlinkEv>:
 8017f66:	2300      	movs	r3, #0
 8017f68:	6283      	str	r3, [r0, #40]	; 0x28
 8017f6a:	4770      	bx	lr

08017f6c <_ZNK8touchgfx9Container12getSolidRectEv>:
 8017f6c:	2200      	movs	r2, #0
 8017f6e:	8002      	strh	r2, [r0, #0]
 8017f70:	8042      	strh	r2, [r0, #2]
 8017f72:	8082      	strh	r2, [r0, #4]
 8017f74:	80c2      	strh	r2, [r0, #6]
 8017f76:	4770      	bx	lr

08017f78 <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 8017f78:	b570      	push	{r4, r5, r6, lr}
 8017f7a:	460d      	mov	r5, r1
 8017f7c:	4616      	mov	r6, r2
 8017f7e:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8017f80:	b13c      	cbz	r4, 8017f92 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
 8017f82:	6823      	ldr	r3, [r4, #0]
 8017f84:	4620      	mov	r0, r4
 8017f86:	4632      	mov	r2, r6
 8017f88:	4629      	mov	r1, r5
 8017f8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017f8c:	4798      	blx	r3
 8017f8e:	69a4      	ldr	r4, [r4, #24]
 8017f90:	e7f6      	b.n	8017f80 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 8017f92:	bd70      	pop	{r4, r5, r6, pc}

08017f94 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 8017f94:	b538      	push	{r3, r4, r5, lr}
 8017f96:	460d      	mov	r5, r1
 8017f98:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8017f9a:	b134      	cbz	r4, 8017faa <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
 8017f9c:	682b      	ldr	r3, [r5, #0]
 8017f9e:	4621      	mov	r1, r4
 8017fa0:	4628      	mov	r0, r5
 8017fa2:	689b      	ldr	r3, [r3, #8]
 8017fa4:	4798      	blx	r3
 8017fa6:	69a4      	ldr	r4, [r4, #24]
 8017fa8:	e7f7      	b.n	8017f9a <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 8017faa:	bd38      	pop	{r3, r4, r5, pc}

08017fac <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 8017fac:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8017fae:	b19b      	cbz	r3, 8017fd8 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 8017fb0:	428b      	cmp	r3, r1
 8017fb2:	d109      	bne.n	8017fc8 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 8017fb4:	699a      	ldr	r2, [r3, #24]
 8017fb6:	2100      	movs	r1, #0
 8017fb8:	6159      	str	r1, [r3, #20]
 8017fba:	6282      	str	r2, [r0, #40]	; 0x28
 8017fbc:	b902      	cbnz	r2, 8017fc0 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
 8017fbe:	4770      	bx	lr
 8017fc0:	6199      	str	r1, [r3, #24]
 8017fc2:	4770      	bx	lr
 8017fc4:	4613      	mov	r3, r2
 8017fc6:	b13a      	cbz	r2, 8017fd8 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 8017fc8:	699a      	ldr	r2, [r3, #24]
 8017fca:	428a      	cmp	r2, r1
 8017fcc:	d1fa      	bne.n	8017fc4 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 8017fce:	698a      	ldr	r2, [r1, #24]
 8017fd0:	619a      	str	r2, [r3, #24]
 8017fd2:	2300      	movs	r3, #0
 8017fd4:	e9c1 3305 	strd	r3, r3, [r1, #20]
 8017fd8:	4770      	bx	lr

08017fda <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 8017fda:	b410      	push	{r4}
 8017fdc:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8017fde:	4604      	mov	r4, r0
 8017fe0:	b92b      	cbnz	r3, 8017fee <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
 8017fe2:	6803      	ldr	r3, [r0, #0]
 8017fe4:	4611      	mov	r1, r2
 8017fe6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017fea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8017fec:	4718      	bx	r3
 8017fee:	b941      	cbnz	r1, 8018002 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
 8017ff0:	6193      	str	r3, [r2, #24]
 8017ff2:	6282      	str	r2, [r0, #40]	; 0x28
 8017ff4:	6154      	str	r4, [r2, #20]
 8017ff6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017ffa:	4770      	bx	lr
 8017ffc:	4603      	mov	r3, r0
 8017ffe:	2800      	cmp	r0, #0
 8018000:	d0f9      	beq.n	8017ff6 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
 8018002:	4299      	cmp	r1, r3
 8018004:	6998      	ldr	r0, [r3, #24]
 8018006:	d1f9      	bne.n	8017ffc <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 8018008:	6190      	str	r0, [r2, #24]
 801800a:	618a      	str	r2, [r1, #24]
 801800c:	e7f2      	b.n	8017ff4 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>
	...

08018010 <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 8018010:	4288      	cmp	r0, r1
 8018012:	b508      	push	{r3, lr}
 8018014:	d105      	bne.n	8018022 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x12>
 8018016:	4b11      	ldr	r3, [pc, #68]	; (801805c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x4c>)
 8018018:	2123      	movs	r1, #35	; 0x23
 801801a:	4a11      	ldr	r2, [pc, #68]	; (8018060 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 801801c:	4811      	ldr	r0, [pc, #68]	; (8018064 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x54>)
 801801e:	f013 fc2b 	bl	802b878 <__assert_func>
 8018022:	694b      	ldr	r3, [r1, #20]
 8018024:	b11b      	cbz	r3, 801802e <_ZN8touchgfx9Container3addERNS_8DrawableE+0x1e>
 8018026:	4b10      	ldr	r3, [pc, #64]	; (8018068 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x58>)
 8018028:	2124      	movs	r1, #36	; 0x24
 801802a:	4a0d      	ldr	r2, [pc, #52]	; (8018060 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 801802c:	e7f6      	b.n	801801c <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 801802e:	e9c1 0305 	strd	r0, r3, [r1, #20]
 8018032:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8018034:	b913      	cbnz	r3, 801803c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x2c>
 8018036:	6281      	str	r1, [r0, #40]	; 0x28
 8018038:	bd08      	pop	{r3, pc}
 801803a:	4613      	mov	r3, r2
 801803c:	699a      	ldr	r2, [r3, #24]
 801803e:	b12a      	cbz	r2, 801804c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x3c>
 8018040:	428b      	cmp	r3, r1
 8018042:	d1fa      	bne.n	801803a <_ZN8touchgfx9Container3addERNS_8DrawableE+0x2a>
 8018044:	4b09      	ldr	r3, [pc, #36]	; (801806c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x5c>)
 8018046:	2135      	movs	r1, #53	; 0x35
 8018048:	4a05      	ldr	r2, [pc, #20]	; (8018060 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 801804a:	e7e7      	b.n	801801c <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 801804c:	428b      	cmp	r3, r1
 801804e:	d103      	bne.n	8018058 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x48>
 8018050:	4b06      	ldr	r3, [pc, #24]	; (801806c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x5c>)
 8018052:	2138      	movs	r1, #56	; 0x38
 8018054:	4a02      	ldr	r2, [pc, #8]	; (8018060 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 8018056:	e7e1      	b.n	801801c <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 8018058:	6199      	str	r1, [r3, #24]
 801805a:	e7ed      	b.n	8018038 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x28>
 801805c:	0802e769 	.word	0x0802e769
 8018060:	0802e8c0 	.word	0x0802e8c0
 8018064:	0802e795 	.word	0x0802e795
 8018068:	0802e7c8 	.word	0x0802e7c8
 801806c:	0802e7fe 	.word	0x0802e7fe

08018070 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 8018070:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018074:	461f      	mov	r7, r3
 8018076:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 801807a:	460d      	mov	r5, r1
 801807c:	4616      	mov	r6, r2
 801807e:	b103      	cbz	r3, 8018082 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
 8018080:	6038      	str	r0, [r7, #0]
 8018082:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8018084:	b314      	cbz	r4, 80180cc <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 8018086:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 801808a:	b1eb      	cbz	r3, 80180c8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 801808c:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8018090:	428d      	cmp	r5, r1
 8018092:	db19      	blt.n	80180c8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8018094:	b289      	uxth	r1, r1
 8018096:	8923      	ldrh	r3, [r4, #8]
 8018098:	440b      	add	r3, r1
 801809a:	b21b      	sxth	r3, r3
 801809c:	429d      	cmp	r5, r3
 801809e:	da13      	bge.n	80180c8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 80180a0:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 80180a4:	4296      	cmp	r6, r2
 80180a6:	db0f      	blt.n	80180c8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 80180a8:	b292      	uxth	r2, r2
 80180aa:	8963      	ldrh	r3, [r4, #10]
 80180ac:	4413      	add	r3, r2
 80180ae:	b21b      	sxth	r3, r3
 80180b0:	429e      	cmp	r6, r3
 80180b2:	da09      	bge.n	80180c8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 80180b4:	6823      	ldr	r3, [r4, #0]
 80180b6:	1ab2      	subs	r2, r6, r2
 80180b8:	1a69      	subs	r1, r5, r1
 80180ba:	4620      	mov	r0, r4
 80180bc:	f8d3 8020 	ldr.w	r8, [r3, #32]
 80180c0:	b212      	sxth	r2, r2
 80180c2:	463b      	mov	r3, r7
 80180c4:	b209      	sxth	r1, r1
 80180c6:	47c0      	blx	r8
 80180c8:	69a4      	ldr	r4, [r4, #24]
 80180ca:	e7db      	b.n	8018084 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 80180cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080180d0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>:
 80180d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80180d4:	4c6d      	ldr	r4, [pc, #436]	; (801828c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1bc>)
 80180d6:	b0a1      	sub	sp, #132	; 0x84
 80180d8:	4606      	mov	r6, r0
 80180da:	6824      	ldr	r4, [r4, #0]
 80180dc:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
 80180de:	f894 9049 	ldrb.w	r9, [r4, #73]	; 0x49
 80180e2:	2400      	movs	r4, #0
 80180e4:	9303      	str	r3, [sp, #12]
 80180e6:	802c      	strh	r4, [r5, #0]
 80180e8:	9d2b      	ldr	r5, [sp, #172]	; 0xac
 80180ea:	802c      	strh	r4, [r5, #0]
 80180ec:	601c      	str	r4, [r3, #0]
 80180ee:	e9cd 1201 	strd	r1, r2, [sp, #4]
 80180f2:	f7ff ffbd 	bl	8018070 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 80180f6:	f1b9 0f03 	cmp.w	r9, #3
 80180fa:	f340 80c1 	ble.w	8018280 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b0>
 80180fe:	4631      	mov	r1, r6
 8018100:	a80c      	add	r0, sp, #48	; 0x30
 8018102:	f007 fc41 	bl	801f988 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8018106:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 801810a:	9306      	str	r3, [sp, #24]
 801810c:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 8018110:	9307      	str	r3, [sp, #28]
 8018112:	9b03      	ldr	r3, [sp, #12]
 8018114:	f8d3 a000 	ldr.w	sl, [r3]
 8018118:	f1ba 0f00 	cmp.w	sl, #0
 801811c:	f000 80b3 	beq.w	8018286 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b6>
 8018120:	4651      	mov	r1, sl
 8018122:	a810      	add	r0, sp, #64	; 0x40
 8018124:	f007 fc30 	bl	801f988 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8018128:	2002      	movs	r0, #2
 801812a:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	; 0x44
 801812e:	9b01      	ldr	r3, [sp, #4]
 8018130:	9a06      	ldr	r2, [sp, #24]
 8018132:	fb91 f1f0 	sdiv	r1, r1, r0
 8018136:	189d      	adds	r5, r3, r2
 8018138:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	; 0x40
 801813c:	9a07      	ldr	r2, [sp, #28]
 801813e:	4419      	add	r1, r3
 8018140:	9b02      	ldr	r3, [sp, #8]
 8018142:	4413      	add	r3, r2
 8018144:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	; 0x46
 8018148:	1a6d      	subs	r5, r5, r1
 801814a:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 801814e:	fb92 f2f0 	sdiv	r2, r2, r0
 8018152:	440a      	add	r2, r1
 8018154:	1a9b      	subs	r3, r3, r2
 8018156:	435b      	muls	r3, r3
 8018158:	fb05 3505 	mla	r5, r5, r5, r3
 801815c:	4f4c      	ldr	r7, [pc, #304]	; (8018290 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1c0>)
 801815e:	ac10      	add	r4, sp, #64	; 0x40
 8018160:	f1b9 0f0c 	cmp.w	r9, #12
 8018164:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8018166:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8018168:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 801816a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801816c:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 801816e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8018170:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 8018174:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8018178:	f04f 0303 	mov.w	r3, #3
 801817c:	bfd8      	it	le
 801817e:	f109 32ff 	addle.w	r2, r9, #4294967295
 8018182:	f04f 0400 	mov.w	r4, #0
 8018186:	f8cd 9000 	str.w	r9, [sp]
 801818a:	bfcc      	ite	gt
 801818c:	4698      	movgt	r8, r3
 801818e:	fb92 f8f3 	sdivle	r8, r2, r3
 8018192:	1c63      	adds	r3, r4, #1
 8018194:	aa10      	add	r2, sp, #64	; 0x40
 8018196:	f004 0401 	and.w	r4, r4, #1
 801819a:	f04f 0b00 	mov.w	fp, #0
 801819e:	9308      	str	r3, [sp, #32]
 80181a0:	9b00      	ldr	r3, [sp, #0]
 80181a2:	eb02 1444 	add.w	r4, r2, r4, lsl #5
 80181a6:	fb93 f3f8 	sdiv	r3, r3, r8
 80181aa:	3404      	adds	r4, #4
 80181ac:	b29b      	uxth	r3, r3
 80181ae:	9304      	str	r3, [sp, #16]
 80181b0:	9a04      	ldr	r2, [sp, #16]
 80181b2:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80181b6:	fb13 f302 	smulbb	r3, r3, r2
 80181ba:	9a01      	ldr	r2, [sp, #4]
 80181bc:	b29b      	uxth	r3, r3
 80181be:	1899      	adds	r1, r3, r2
 80181c0:	9305      	str	r3, [sp, #20]
 80181c2:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 80181c6:	b209      	sxth	r1, r1
 80181c8:	4299      	cmp	r1, r3
 80181ca:	db4d      	blt.n	8018268 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 80181cc:	8932      	ldrh	r2, [r6, #8]
 80181ce:	4413      	add	r3, r2
 80181d0:	b21b      	sxth	r3, r3
 80181d2:	4299      	cmp	r1, r3
 80181d4:	da48      	bge.n	8018268 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 80181d6:	9b04      	ldr	r3, [sp, #16]
 80181d8:	6827      	ldr	r7, [r4, #0]
 80181da:	fb17 f703 	smulbb	r7, r7, r3
 80181de:	9b02      	ldr	r3, [sp, #8]
 80181e0:	b2bf      	uxth	r7, r7
 80181e2:	18fa      	adds	r2, r7, r3
 80181e4:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 80181e8:	b212      	sxth	r2, r2
 80181ea:	429a      	cmp	r2, r3
 80181ec:	db3c      	blt.n	8018268 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 80181ee:	8970      	ldrh	r0, [r6, #10]
 80181f0:	4403      	add	r3, r0
 80181f2:	b21b      	sxth	r3, r3
 80181f4:	429a      	cmp	r2, r3
 80181f6:	da37      	bge.n	8018268 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 80181f8:	2300      	movs	r3, #0
 80181fa:	4630      	mov	r0, r6
 80181fc:	930b      	str	r3, [sp, #44]	; 0x2c
 80181fe:	ab0b      	add	r3, sp, #44	; 0x2c
 8018200:	f7ff ff36 	bl	8018070 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 8018204:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8018206:	b37a      	cbz	r2, 8018268 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8018208:	4552      	cmp	r2, sl
 801820a:	d02d      	beq.n	8018268 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 801820c:	4611      	mov	r1, r2
 801820e:	a80e      	add	r0, sp, #56	; 0x38
 8018210:	9209      	str	r2, [sp, #36]	; 0x24
 8018212:	f007 fbb9 	bl	801f988 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8018216:	f04f 0e02 	mov.w	lr, #2
 801821a:	f9bd 103c 	ldrsh.w	r1, [sp, #60]	; 0x3c
 801821e:	9a06      	ldr	r2, [sp, #24]
 8018220:	f9bd 0038 	ldrsh.w	r0, [sp, #56]	; 0x38
 8018224:	9b01      	ldr	r3, [sp, #4]
 8018226:	f9bd c03e 	ldrsh.w	ip, [sp, #62]	; 0x3e
 801822a:	4413      	add	r3, r2
 801822c:	9a07      	ldr	r2, [sp, #28]
 801822e:	fb91 f1fe 	sdiv	r1, r1, lr
 8018232:	fb9c fcfe 	sdiv	ip, ip, lr
 8018236:	4401      	add	r1, r0
 8018238:	1a58      	subs	r0, r3, r1
 801823a:	9b02      	ldr	r3, [sp, #8]
 801823c:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	; 0x3a
 8018240:	4413      	add	r3, r2
 8018242:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8018244:	448c      	add	ip, r1
 8018246:	eba3 030c 	sub.w	r3, r3, ip
 801824a:	435b      	muls	r3, r3
 801824c:	fb00 3300 	mla	r3, r0, r0, r3
 8018250:	42ab      	cmp	r3, r5
 8018252:	d208      	bcs.n	8018266 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x196>
 8018254:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8018256:	461d      	mov	r5, r3
 8018258:	9803      	ldr	r0, [sp, #12]
 801825a:	6001      	str	r1, [r0, #0]
 801825c:	992a      	ldr	r1, [sp, #168]	; 0xa8
 801825e:	9805      	ldr	r0, [sp, #20]
 8018260:	8008      	strh	r0, [r1, #0]
 8018262:	992b      	ldr	r1, [sp, #172]	; 0xac
 8018264:	800f      	strh	r7, [r1, #0]
 8018266:	4692      	mov	sl, r2
 8018268:	f10b 0b01 	add.w	fp, fp, #1
 801826c:	3408      	adds	r4, #8
 801826e:	f1bb 0f04 	cmp.w	fp, #4
 8018272:	d19d      	bne.n	80181b0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xe0>
 8018274:	9b00      	ldr	r3, [sp, #0]
 8018276:	9c08      	ldr	r4, [sp, #32]
 8018278:	444b      	add	r3, r9
 801827a:	4544      	cmp	r4, r8
 801827c:	9300      	str	r3, [sp, #0]
 801827e:	d188      	bne.n	8018192 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xc2>
 8018280:	b021      	add	sp, #132	; 0x84
 8018282:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018286:	f04f 35ff 	mov.w	r5, #4294967295
 801828a:	e767      	b.n	801815c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x8c>
 801828c:	2400c8bc 	.word	0x2400c8bc
 8018290:	0802d820 	.word	0x0802d820

08018294 <_ZN8touchgfx4RectaNERKS0_>:
 8018294:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018298:	f9b1 7000 	ldrsh.w	r7, [r1]
 801829c:	888c      	ldrh	r4, [r1, #4]
 801829e:	f9b0 9000 	ldrsh.w	r9, [r0]
 80182a2:	443c      	add	r4, r7
 80182a4:	b2a4      	uxth	r4, r4
 80182a6:	fa0f f884 	sxth.w	r8, r4
 80182aa:	45c1      	cmp	r9, r8
 80182ac:	da2f      	bge.n	801830e <_ZN8touchgfx4RectaNERKS0_+0x7a>
 80182ae:	8882      	ldrh	r2, [r0, #4]
 80182b0:	444a      	add	r2, r9
 80182b2:	b292      	uxth	r2, r2
 80182b4:	fa0f fe82 	sxth.w	lr, r2
 80182b8:	4577      	cmp	r7, lr
 80182ba:	da28      	bge.n	801830e <_ZN8touchgfx4RectaNERKS0_+0x7a>
 80182bc:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 80182c0:	88cb      	ldrh	r3, [r1, #6]
 80182c2:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 80182c6:	442b      	add	r3, r5
 80182c8:	b21b      	sxth	r3, r3
 80182ca:	429e      	cmp	r6, r3
 80182cc:	da1f      	bge.n	801830e <_ZN8touchgfx4RectaNERKS0_+0x7a>
 80182ce:	88c3      	ldrh	r3, [r0, #6]
 80182d0:	4433      	add	r3, r6
 80182d2:	b29b      	uxth	r3, r3
 80182d4:	fa0f fc83 	sxth.w	ip, r3
 80182d8:	4565      	cmp	r5, ip
 80182da:	da18      	bge.n	801830e <_ZN8touchgfx4RectaNERKS0_+0x7a>
 80182dc:	454f      	cmp	r7, r9
 80182de:	bfb8      	it	lt
 80182e0:	464f      	movlt	r7, r9
 80182e2:	42b5      	cmp	r5, r6
 80182e4:	bfb8      	it	lt
 80182e6:	4635      	movlt	r5, r6
 80182e8:	45f0      	cmp	r8, lr
 80182ea:	bfd8      	it	le
 80182ec:	4622      	movle	r2, r4
 80182ee:	1bd2      	subs	r2, r2, r7
 80182f0:	8082      	strh	r2, [r0, #4]
 80182f2:	884a      	ldrh	r2, [r1, #2]
 80182f4:	88c9      	ldrh	r1, [r1, #6]
 80182f6:	8007      	strh	r7, [r0, #0]
 80182f8:	440a      	add	r2, r1
 80182fa:	8045      	strh	r5, [r0, #2]
 80182fc:	b292      	uxth	r2, r2
 80182fe:	b211      	sxth	r1, r2
 8018300:	458c      	cmp	ip, r1
 8018302:	bfa8      	it	ge
 8018304:	4613      	movge	r3, r2
 8018306:	1b5b      	subs	r3, r3, r5
 8018308:	80c3      	strh	r3, [r0, #6]
 801830a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801830e:	2300      	movs	r3, #0
 8018310:	8003      	strh	r3, [r0, #0]
 8018312:	8043      	strh	r3, [r0, #2]
 8018314:	8083      	strh	r3, [r0, #4]
 8018316:	80c3      	strh	r3, [r0, #6]
 8018318:	e7f7      	b.n	801830a <_ZN8touchgfx4RectaNERKS0_+0x76>

0801831a <_ZNK8touchgfx4Rect7isEmptyEv>:
 801831a:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801831e:	2b00      	cmp	r3, #0
 8018320:	dd06      	ble.n	8018330 <_ZNK8touchgfx4Rect7isEmptyEv+0x16>
 8018322:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 8018326:	2800      	cmp	r0, #0
 8018328:	bfcc      	ite	gt
 801832a:	2000      	movgt	r0, #0
 801832c:	2001      	movle	r0, #1
 801832e:	4770      	bx	lr
 8018330:	2001      	movs	r0, #1
 8018332:	4770      	bx	lr

08018334 <_ZNK8touchgfx9Container16getContainedAreaEv>:
 8018334:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018338:	2300      	movs	r3, #0
 801833a:	4604      	mov	r4, r0
 801833c:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 801833e:	8003      	strh	r3, [r0, #0]
 8018340:	8043      	strh	r3, [r0, #2]
 8018342:	8083      	strh	r3, [r0, #4]
 8018344:	80c3      	strh	r3, [r0, #6]
 8018346:	2d00      	cmp	r5, #0
 8018348:	d040      	beq.n	80183cc <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
 801834a:	1d28      	adds	r0, r5, #4
 801834c:	f7ff ffe5 	bl	801831a <_ZNK8touchgfx4Rect7isEmptyEv>
 8018350:	b988      	cbnz	r0, 8018376 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 8018352:	4620      	mov	r0, r4
 8018354:	f7ff ffe1 	bl	801831a <_ZNK8touchgfx4Rect7isEmptyEv>
 8018358:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 801835c:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8018360:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 8018364:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
 8018368:	b138      	cbz	r0, 801837a <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
 801836a:	8022      	strh	r2, [r4, #0]
 801836c:	8063      	strh	r3, [r4, #2]
 801836e:	f8a4 e004 	strh.w	lr, [r4, #4]
 8018372:	f8a4 c006 	strh.w	ip, [r4, #6]
 8018376:	69ad      	ldr	r5, [r5, #24]
 8018378:	e7e5      	b.n	8018346 <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 801837a:	f9b4 0000 	ldrsh.w	r0, [r4]
 801837e:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8018382:	4290      	cmp	r0, r2
 8018384:	4607      	mov	r7, r0
 8018386:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 801838a:	460e      	mov	r6, r1
 801838c:	bfa8      	it	ge
 801838e:	4617      	movge	r7, r2
 8018390:	4299      	cmp	r1, r3
 8018392:	4472      	add	r2, lr
 8018394:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 8018398:	bfa8      	it	ge
 801839a:	461e      	movge	r6, r3
 801839c:	4440      	add	r0, r8
 801839e:	4471      	add	r1, lr
 80183a0:	4463      	add	r3, ip
 80183a2:	b200      	sxth	r0, r0
 80183a4:	8027      	strh	r7, [r4, #0]
 80183a6:	b212      	sxth	r2, r2
 80183a8:	8066      	strh	r6, [r4, #2]
 80183aa:	b209      	sxth	r1, r1
 80183ac:	b21b      	sxth	r3, r3
 80183ae:	4290      	cmp	r0, r2
 80183b0:	bfac      	ite	ge
 80183b2:	ebc7 0200 	rsbge	r2, r7, r0
 80183b6:	ebc7 0202 	rsblt	r2, r7, r2
 80183ba:	4299      	cmp	r1, r3
 80183bc:	bfac      	ite	ge
 80183be:	ebc6 0301 	rsbge	r3, r6, r1
 80183c2:	ebc6 0303 	rsblt	r3, r6, r3
 80183c6:	80a2      	strh	r2, [r4, #4]
 80183c8:	80e3      	strh	r3, [r4, #6]
 80183ca:	e7d4      	b.n	8018376 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 80183cc:	4620      	mov	r0, r4
 80183ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080183d2 <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 80183d2:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80183d6:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 80183da:	b383      	cbz	r3, 801843e <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 80183dc:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80183de:	b374      	cbz	r4, 801843e <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 80183e0:	f9b1 5000 	ldrsh.w	r5, [r1]
 80183e4:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 80183e8:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 80183ec:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 80183f0:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 80183f4:	b303      	cbz	r3, 8018438 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 80183f6:	4668      	mov	r0, sp
 80183f8:	1d21      	adds	r1, r4, #4
 80183fa:	f8ad 5000 	strh.w	r5, [sp]
 80183fe:	f8ad 6002 	strh.w	r6, [sp, #2]
 8018402:	f8ad 7004 	strh.w	r7, [sp, #4]
 8018406:	f8ad 8006 	strh.w	r8, [sp, #6]
 801840a:	f7ff ff43 	bl	8018294 <_ZN8touchgfx4RectaNERKS0_>
 801840e:	4668      	mov	r0, sp
 8018410:	f7ff ff83 	bl	801831a <_ZNK8touchgfx4Rect7isEmptyEv>
 8018414:	b980      	cbnz	r0, 8018438 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 8018416:	f8bd 3000 	ldrh.w	r3, [sp]
 801841a:	4669      	mov	r1, sp
 801841c:	88a2      	ldrh	r2, [r4, #4]
 801841e:	4620      	mov	r0, r4
 8018420:	1a9b      	subs	r3, r3, r2
 8018422:	88e2      	ldrh	r2, [r4, #6]
 8018424:	f8ad 3000 	strh.w	r3, [sp]
 8018428:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801842c:	1a9b      	subs	r3, r3, r2
 801842e:	f8ad 3002 	strh.w	r3, [sp, #2]
 8018432:	6823      	ldr	r3, [r4, #0]
 8018434:	689b      	ldr	r3, [r3, #8]
 8018436:	4798      	blx	r3
 8018438:	69a4      	ldr	r4, [r4, #24]
 801843a:	2c00      	cmp	r4, #0
 801843c:	d1d8      	bne.n	80183f0 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
 801843e:	b002      	add	sp, #8
 8018440:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08018444 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 8018444:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8018446:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 801844a:	460d      	mov	r5, r1
 801844c:	4616      	mov	r6, r2
 801844e:	b323      	cbz	r3, 801849a <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 8018450:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8018452:	b314      	cbz	r4, 801849a <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 8018454:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8018458:	b1eb      	cbz	r3, 8018496 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 801845a:	6828      	ldr	r0, [r5, #0]
 801845c:	466b      	mov	r3, sp
 801845e:	6869      	ldr	r1, [r5, #4]
 8018460:	c303      	stmia	r3!, {r0, r1}
 8018462:	4668      	mov	r0, sp
 8018464:	1d21      	adds	r1, r4, #4
 8018466:	f7ff ff15 	bl	8018294 <_ZN8touchgfx4RectaNERKS0_>
 801846a:	4668      	mov	r0, sp
 801846c:	f7ff ff55 	bl	801831a <_ZNK8touchgfx4Rect7isEmptyEv>
 8018470:	b988      	cbnz	r0, 8018496 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 8018472:	f8bd 3000 	ldrh.w	r3, [sp]
 8018476:	4669      	mov	r1, sp
 8018478:	88a2      	ldrh	r2, [r4, #4]
 801847a:	4620      	mov	r0, r4
 801847c:	1a9b      	subs	r3, r3, r2
 801847e:	88e2      	ldrh	r2, [r4, #6]
 8018480:	f8ad 3000 	strh.w	r3, [sp]
 8018484:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8018488:	1a9b      	subs	r3, r3, r2
 801848a:	4632      	mov	r2, r6
 801848c:	f8ad 3002 	strh.w	r3, [sp, #2]
 8018490:	6823      	ldr	r3, [r4, #0]
 8018492:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8018494:	4798      	blx	r3
 8018496:	69a4      	ldr	r4, [r4, #24]
 8018498:	e7db      	b.n	8018452 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
 801849a:	b002      	add	sp, #8
 801849c:	bd70      	pop	{r4, r5, r6, pc}

0801849e <_ZN8touchgfx3HAL15InvalidateCacheEv>:
 801849e:	4770      	bx	lr

080184a0 <_ZN8touchgfx3HAL10FlushCacheEv>:
 80184a0:	4770      	bx	lr

080184a2 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 80184a2:	6803      	ldr	r3, [r0, #0]
 80184a4:	b513      	push	{r0, r1, r4, lr}
 80184a6:	f8d3 40a0 	ldr.w	r4, [r3, #160]	; 0xa0
 80184aa:	2300      	movs	r3, #0
 80184ac:	e9cd 3300 	strd	r3, r3, [sp]
 80184b0:	466b      	mov	r3, sp
 80184b2:	47a0      	blx	r4
 80184b4:	b002      	add	sp, #8
 80184b6:	bd10      	pop	{r4, pc}

080184b8 <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 80184b8:	2301      	movs	r3, #1
 80184ba:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 80184be:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 80184c2:	4770      	bx	lr

080184c4 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 80184c4:	2301      	movs	r3, #1
 80184c6:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 80184ca:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 80184ce:	4770      	bx	lr

080184d0 <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 80184d0:	6843      	ldr	r3, [r0, #4]
 80184d2:	2201      	movs	r2, #1
 80184d4:	725a      	strb	r2, [r3, #9]
 80184d6:	6840      	ldr	r0, [r0, #4]
 80184d8:	6803      	ldr	r3, [r0, #0]
 80184da:	691b      	ldr	r3, [r3, #16]
 80184dc:	4718      	bx	r3

080184de <_ZN8touchgfx3HAL8flushDMAEv>:
 80184de:	6840      	ldr	r0, [r0, #4]
 80184e0:	6803      	ldr	r3, [r0, #0]
 80184e2:	689b      	ldr	r3, [r3, #8]
 80184e4:	4718      	bx	r3

080184e6 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_b>:
 80184e6:	b530      	push	{r4, r5, lr}
 80184e8:	b08b      	sub	sp, #44	; 0x2c
 80184ea:	6804      	ldr	r4, [r0, #0]
 80184ec:	f89d 5058 	ldrb.w	r5, [sp, #88]	; 0x58
 80184f0:	9509      	str	r5, [sp, #36]	; 0x24
 80184f2:	f89d 5054 	ldrb.w	r5, [sp, #84]	; 0x54
 80184f6:	9508      	str	r5, [sp, #32]
 80184f8:	f89d 5050 	ldrb.w	r5, [sp, #80]	; 0x50
 80184fc:	9507      	str	r5, [sp, #28]
 80184fe:	f8bd 504c 	ldrh.w	r5, [sp, #76]	; 0x4c
 8018502:	9506      	str	r5, [sp, #24]
 8018504:	f89d 5048 	ldrb.w	r5, [sp, #72]	; 0x48
 8018508:	9505      	str	r5, [sp, #20]
 801850a:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 801850e:	9504      	str	r5, [sp, #16]
 8018510:	f8bd 5040 	ldrh.w	r5, [sp, #64]	; 0x40
 8018514:	9503      	str	r5, [sp, #12]
 8018516:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 801851a:	9502      	str	r5, [sp, #8]
 801851c:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 8018520:	e9cd 3500 	strd	r3, r5, [sp]
 8018524:	4613      	mov	r3, r2
 8018526:	6be4      	ldr	r4, [r4, #60]	; 0x3c
 8018528:	2200      	movs	r2, #0
 801852a:	47a0      	blx	r4
 801852c:	b00b      	add	sp, #44	; 0x2c
 801852e:	bd30      	pop	{r4, r5, pc}

08018530 <_ZN8touchgfx3HAL10beginFrameEv>:
 8018530:	4b04      	ldr	r3, [pc, #16]	; (8018544 <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 8018532:	781b      	ldrb	r3, [r3, #0]
 8018534:	b123      	cbz	r3, 8018540 <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 8018536:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
 801853a:	f080 0001 	eor.w	r0, r0, #1
 801853e:	4770      	bx	lr
 8018540:	2001      	movs	r0, #1
 8018542:	4770      	bx	lr
 8018544:	2400c8ba 	.word	0x2400c8ba

08018548 <_ZN8touchgfx3HAL8endFrameEv>:
 8018548:	b510      	push	{r4, lr}
 801854a:	4604      	mov	r4, r0
 801854c:	6840      	ldr	r0, [r0, #4]
 801854e:	6803      	ldr	r3, [r0, #0]
 8018550:	689b      	ldr	r3, [r3, #8]
 8018552:	4798      	blx	r3
 8018554:	f894 3069 	ldrb.w	r3, [r4, #105]	; 0x69
 8018558:	b113      	cbz	r3, 8018560 <_ZN8touchgfx3HAL8endFrameEv+0x18>
 801855a:	2301      	movs	r3, #1
 801855c:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 8018560:	bd10      	pop	{r4, pc}

08018562 <_ZN8touchgfx3HAL10initializeEv>:
 8018562:	b510      	push	{r4, lr}
 8018564:	4604      	mov	r4, r0
 8018566:	f7e8 fcdb 	bl	8000f20 <_ZN8touchgfx10OSWrappers10initializeEv>
 801856a:	6860      	ldr	r0, [r4, #4]
 801856c:	6803      	ldr	r3, [r0, #0]
 801856e:	68db      	ldr	r3, [r3, #12]
 8018570:	4798      	blx	r3
 8018572:	68e0      	ldr	r0, [r4, #12]
 8018574:	6803      	ldr	r3, [r0, #0]
 8018576:	689b      	ldr	r3, [r3, #8]
 8018578:	4798      	blx	r3
 801857a:	6823      	ldr	r3, [r4, #0]
 801857c:	4620      	mov	r0, r4
 801857e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018580:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018584:	4718      	bx	r3

08018586 <_ZN8touchgfx3HAL9taskEntryEv>:
 8018586:	b508      	push	{r3, lr}
 8018588:	6803      	ldr	r3, [r0, #0]
 801858a:	4604      	mov	r4, r0
 801858c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801858e:	4798      	blx	r3
 8018590:	6823      	ldr	r3, [r4, #0]
 8018592:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8018594:	4620      	mov	r0, r4
 8018596:	4798      	blx	r3
 8018598:	f7e8 fd38 	bl	800100c <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
 801859c:	6823      	ldr	r3, [r4, #0]
 801859e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80185a0:	e7f8      	b.n	8018594 <_ZN8touchgfx3HAL9taskEntryEv+0xe>
	...

080185a4 <_ZN8touchgfx3HAL4tickEv>:
 80185a4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80185a6:	6803      	ldr	r3, [r0, #0]
 80185a8:	4604      	mov	r4, r0
 80185aa:	4d5c      	ldr	r5, [pc, #368]	; (801871c <_ZN8touchgfx3HAL4tickEv+0x178>)
 80185ac:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80185b0:	4798      	blx	r3
 80185b2:	2800      	cmp	r0, #0
 80185b4:	f000 8097 	beq.w	80186e6 <_ZN8touchgfx3HAL4tickEv+0x142>
 80185b8:	2001      	movs	r0, #1
 80185ba:	2600      	movs	r6, #0
 80185bc:	f7e8 f974 	bl	80008a8 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 80185c0:	f894 3066 	ldrb.w	r3, [r4, #102]	; 0x66
 80185c4:	f884 604b 	strb.w	r6, [r4, #75]	; 0x4b
 80185c8:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 80185cc:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
 80185d0:	f884 6066 	strb.w	r6, [r4, #102]	; 0x66
 80185d4:	b133      	cbz	r3, 80185e4 <_ZN8touchgfx3HAL4tickEv+0x40>
 80185d6:	6823      	ldr	r3, [r4, #0]
 80185d8:	4620      	mov	r0, r4
 80185da:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80185de:	4798      	blx	r3
 80185e0:	f884 6075 	strb.w	r6, [r4, #117]	; 0x75
 80185e4:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 80185e8:	2601      	movs	r6, #1
 80185ea:	6862      	ldr	r2, [r4, #4]
 80185ec:	f083 0301 	eor.w	r3, r3, #1
 80185f0:	702e      	strb	r6, [r5, #0]
 80185f2:	7253      	strb	r3, [r2, #9]
 80185f4:	f006 f966 	bl	801e8c4 <_ZN8touchgfx11Application11getInstanceEv>
 80185f8:	6803      	ldr	r3, [r0, #0]
 80185fa:	4631      	mov	r1, r6
 80185fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80185fe:	4798      	blx	r3
 8018600:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 8018604:	b90b      	cbnz	r3, 801860a <_ZN8touchgfx3HAL4tickEv+0x66>
 8018606:	f884 6067 	strb.w	r6, [r4, #103]	; 0x67
 801860a:	f006 f95b 	bl	801e8c4 <_ZN8touchgfx11Application11getInstanceEv>
 801860e:	6803      	ldr	r3, [r0, #0]
 8018610:	695b      	ldr	r3, [r3, #20]
 8018612:	4798      	blx	r3
 8018614:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8018616:	6803      	ldr	r3, [r0, #0]
 8018618:	691b      	ldr	r3, [r3, #16]
 801861a:	4798      	blx	r3
 801861c:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 8018620:	f894 2068 	ldrb.w	r2, [r4, #104]	; 0x68
 8018624:	3b01      	subs	r3, #1
 8018626:	b2db      	uxtb	r3, r3
 8018628:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 801862c:	b10a      	cbz	r2, 8018632 <_ZN8touchgfx3HAL4tickEv+0x8e>
 801862e:	2b00      	cmp	r3, #0
 8018630:	d1eb      	bne.n	801860a <_ZN8touchgfx3HAL4tickEv+0x66>
 8018632:	4a3b      	ldr	r2, [pc, #236]	; (8018720 <_ZN8touchgfx3HAL4tickEv+0x17c>)
 8018634:	f994 1064 	ldrsb.w	r1, [r4, #100]	; 0x64
 8018638:	7813      	ldrb	r3, [r2, #0]
 801863a:	3301      	adds	r3, #1
 801863c:	b25b      	sxtb	r3, r3
 801863e:	4299      	cmp	r1, r3
 8018640:	7013      	strb	r3, [r2, #0]
 8018642:	dc10      	bgt.n	8018666 <_ZN8touchgfx3HAL4tickEv+0xc2>
 8018644:	2300      	movs	r3, #0
 8018646:	68e0      	ldr	r0, [r4, #12]
 8018648:	a902      	add	r1, sp, #8
 801864a:	7013      	strb	r3, [r2, #0]
 801864c:	aa03      	add	r2, sp, #12
 801864e:	6803      	ldr	r3, [r0, #0]
 8018650:	68db      	ldr	r3, [r3, #12]
 8018652:	4798      	blx	r3
 8018654:	6823      	ldr	r3, [r4, #0]
 8018656:	2800      	cmp	r0, #0
 8018658:	d051      	beq.n	80186fe <_ZN8touchgfx3HAL4tickEv+0x15a>
 801865a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 801865e:	4620      	mov	r0, r4
 8018660:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8018664:	4798      	blx	r3
 8018666:	2300      	movs	r3, #0
 8018668:	6960      	ldr	r0, [r4, #20]
 801866a:	f88d 3007 	strb.w	r3, [sp, #7]
 801866e:	b158      	cbz	r0, 8018688 <_ZN8touchgfx3HAL4tickEv+0xe4>
 8018670:	6803      	ldr	r3, [r0, #0]
 8018672:	f10d 0107 	add.w	r1, sp, #7
 8018676:	68db      	ldr	r3, [r3, #12]
 8018678:	4798      	blx	r3
 801867a:	b128      	cbz	r0, 8018688 <_ZN8touchgfx3HAL4tickEv+0xe4>
 801867c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801867e:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8018682:	6803      	ldr	r3, [r0, #0]
 8018684:	68db      	ldr	r3, [r3, #12]
 8018686:	4798      	blx	r3
 8018688:	f104 001c 	add.w	r0, r4, #28
 801868c:	f011 fa4e 	bl	8029b2c <_ZN8touchgfx8Gestures4tickEv>
 8018690:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
 8018694:	b30b      	cbz	r3, 80186da <_ZN8touchgfx3HAL4tickEv+0x136>
 8018696:	6920      	ldr	r0, [r4, #16]
 8018698:	6803      	ldr	r3, [r0, #0]
 801869a:	691b      	ldr	r3, [r3, #16]
 801869c:	4798      	blx	r3
 801869e:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80186a0:	4606      	mov	r6, r0
 80186a2:	b903      	cbnz	r3, 80186a6 <_ZN8touchgfx3HAL4tickEv+0x102>
 80186a4:	6720      	str	r0, [r4, #112]	; 0x70
 80186a6:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80186a8:	4a1e      	ldr	r2, [pc, #120]	; (8018724 <_ZN8touchgfx3HAL4tickEv+0x180>)
 80186aa:	1af3      	subs	r3, r6, r3
 80186ac:	4293      	cmp	r3, r2
 80186ae:	d914      	bls.n	80186da <_ZN8touchgfx3HAL4tickEv+0x136>
 80186b0:	6920      	ldr	r0, [r4, #16]
 80186b2:	6803      	ldr	r3, [r0, #0]
 80186b4:	699b      	ldr	r3, [r3, #24]
 80186b6:	4798      	blx	r3
 80186b8:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80186ba:	2264      	movs	r2, #100	; 0x64
 80186bc:	1af3      	subs	r3, r6, r3
 80186be:	fbb3 f3f2 	udiv	r3, r3, r2
 80186c2:	fbb0 f0f3 	udiv	r0, r0, r3
 80186c6:	2800      	cmp	r0, #0
 80186c8:	dc1e      	bgt.n	8018708 <_ZN8touchgfx3HAL4tickEv+0x164>
 80186ca:	f884 2065 	strb.w	r2, [r4, #101]	; 0x65
 80186ce:	6920      	ldr	r0, [r4, #16]
 80186d0:	2100      	movs	r1, #0
 80186d2:	6803      	ldr	r3, [r0, #0]
 80186d4:	69db      	ldr	r3, [r3, #28]
 80186d6:	4798      	blx	r3
 80186d8:	6726      	str	r6, [r4, #112]	; 0x70
 80186da:	f006 f8f3 	bl	801e8c4 <_ZN8touchgfx11Application11getInstanceEv>
 80186de:	6803      	ldr	r3, [r0, #0]
 80186e0:	2100      	movs	r1, #0
 80186e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80186e4:	4798      	blx	r3
 80186e6:	6823      	ldr	r3, [r4, #0]
 80186e8:	4620      	mov	r0, r4
 80186ea:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80186ee:	4798      	blx	r3
 80186f0:	2001      	movs	r0, #1
 80186f2:	f7e8 f919 	bl	8000928 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 80186f6:	2300      	movs	r3, #0
 80186f8:	702b      	strb	r3, [r5, #0]
 80186fa:	b004      	add	sp, #16
 80186fc:	bd70      	pop	{r4, r5, r6, pc}
 80186fe:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8018702:	4620      	mov	r0, r4
 8018704:	4798      	blx	r3
 8018706:	e7ae      	b.n	8018666 <_ZN8touchgfx3HAL4tickEv+0xc2>
 8018708:	2863      	cmp	r0, #99	; 0x63
 801870a:	bfcb      	itete	gt
 801870c:	2300      	movgt	r3, #0
 801870e:	f1c0 0064 	rsble	r0, r0, #100	; 0x64
 8018712:	f884 3065 	strbgt.w	r3, [r4, #101]	; 0x65
 8018716:	f884 0065 	strble.w	r0, [r4, #101]	; 0x65
 801871a:	e7d8      	b.n	80186ce <_ZN8touchgfx3HAL4tickEv+0x12a>
 801871c:	2400c8c0 	.word	0x2400c8c0
 8018720:	2400c8c1 	.word	0x2400c8c1
 8018724:	05f5e100 	.word	0x05f5e100

08018728 <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 8018728:	f7e8 bc3c 	b.w	8000fa4 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

0801872c <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 801872c:	6581      	str	r1, [r0, #88]	; 0x58
 801872e:	301c      	adds	r0, #28
 8018730:	f011 b9fa 	b.w	8029b28 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

08018734 <_ZN8touchgfx3HAL5touchEll>:
 8018734:	b530      	push	{r4, r5, lr}
 8018736:	b087      	sub	sp, #28
 8018738:	4604      	mov	r4, r0
 801873a:	a804      	add	r0, sp, #16
 801873c:	e9cd 1204 	strd	r1, r2, [sp, #16]
 8018740:	f005 fecc 	bl	801e4dc <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 8018744:	9b04      	ldr	r3, [sp, #16]
 8018746:	a906      	add	r1, sp, #24
 8018748:	a803      	add	r0, sp, #12
 801874a:	f8ad 300c 	strh.w	r3, [sp, #12]
 801874e:	9b05      	ldr	r3, [sp, #20]
 8018750:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 8018754:	f005 ff14 	bl	801e580 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 8018758:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
 801875c:	f104 001c 	add.w	r0, r4, #28
 8018760:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 8018764:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8018768:	b189      	cbz	r1, 801878e <_ZN8touchgfx3HAL5touchEll+0x5a>
 801876a:	f8b4 5060 	ldrh.w	r5, [r4, #96]	; 0x60
 801876e:	9300      	str	r3, [sp, #0]
 8018770:	4613      	mov	r3, r2
 8018772:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8018776:	462a      	mov	r2, r5
 8018778:	f011 f9e6 	bl	8029b48 <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 801877c:	b128      	cbz	r0, 801878a <_ZN8touchgfx3HAL5touchEll+0x56>
 801877e:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8018782:	65e3      	str	r3, [r4, #92]	; 0x5c
 8018784:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8018788:	6623      	str	r3, [r4, #96]	; 0x60
 801878a:	b007      	add	sp, #28
 801878c:	bd30      	pop	{r4, r5, pc}
 801878e:	f011 fa1f 	bl	8029bd0 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 8018792:	2301      	movs	r3, #1
 8018794:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 8018798:	e7f1      	b.n	801877e <_ZN8touchgfx3HAL5touchEll+0x4a>

0801879a <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 801879a:	b510      	push	{r4, lr}
 801879c:	2b00      	cmp	r3, #0
 801879e:	d046      	beq.n	801882e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 80187a0:	ea81 0002 	eor.w	r0, r1, r2
 80187a4:	07c4      	lsls	r4, r0, #31
 80187a6:	d508      	bpl.n	80187ba <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 80187a8:	440b      	add	r3, r1
 80187aa:	3a01      	subs	r2, #1
 80187ac:	428b      	cmp	r3, r1
 80187ae:	d93e      	bls.n	801882e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 80187b0:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 80187b4:	f801 0b01 	strb.w	r0, [r1], #1
 80187b8:	e7f8      	b.n	80187ac <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 80187ba:	07d0      	lsls	r0, r2, #31
 80187bc:	bf42      	ittt	mi
 80187be:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 80187c2:	f103 33ff 	addmi.w	r3, r3, #4294967295
 80187c6:	f801 0b01 	strbmi.w	r0, [r1], #1
 80187ca:	2b01      	cmp	r3, #1
 80187cc:	d911      	bls.n	80187f2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 80187ce:	ea81 0402 	eor.w	r4, r1, r2
 80187d2:	4610      	mov	r0, r2
 80187d4:	07a4      	lsls	r4, r4, #30
 80187d6:	d022      	beq.n	801881e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x84>
 80187d8:	f023 0401 	bic.w	r4, r3, #1
 80187dc:	440c      	add	r4, r1
 80187de:	428c      	cmp	r4, r1
 80187e0:	4602      	mov	r2, r0
 80187e2:	d904      	bls.n	80187ee <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x54>
 80187e4:	8812      	ldrh	r2, [r2, #0]
 80187e6:	3002      	adds	r0, #2
 80187e8:	f821 2b02 	strh.w	r2, [r1], #2
 80187ec:	e7f7      	b.n	80187de <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x44>
 80187ee:	f003 0301 	and.w	r3, r3, #1
 80187f2:	f023 0003 	bic.w	r0, r3, #3
 80187f6:	4408      	add	r0, r1
 80187f8:	4288      	cmp	r0, r1
 80187fa:	4614      	mov	r4, r2
 80187fc:	d904      	bls.n	8018808 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x6e>
 80187fe:	6824      	ldr	r4, [r4, #0]
 8018800:	3204      	adds	r2, #4
 8018802:	f841 4b04 	str.w	r4, [r1], #4
 8018806:	e7f7      	b.n	80187f8 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x5e>
 8018808:	f003 0303 	and.w	r3, r3, #3
 801880c:	3a01      	subs	r2, #1
 801880e:	440b      	add	r3, r1
 8018810:	428b      	cmp	r3, r1
 8018812:	d90c      	bls.n	801882e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8018814:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8018818:	f801 0b01 	strb.w	r0, [r1], #1
 801881c:	e7f8      	b.n	8018810 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x76>
 801881e:	0790      	lsls	r0, r2, #30
 8018820:	d0e7      	beq.n	80187f2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 8018822:	f832 0b02 	ldrh.w	r0, [r2], #2
 8018826:	3b02      	subs	r3, #2
 8018828:	f821 0b02 	strh.w	r0, [r1], #2
 801882c:	e7e1      	b.n	80187f2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 801882e:	2001      	movs	r0, #1
 8018830:	bd10      	pop	{r4, pc}

08018832 <_ZN8touchgfx3HAL7noTouchEv>:
 8018832:	b510      	push	{r4, lr}
 8018834:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
 8018838:	4604      	mov	r4, r0
 801883a:	b153      	cbz	r3, 8018852 <_ZN8touchgfx3HAL7noTouchEv+0x20>
 801883c:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
 8018840:	2101      	movs	r1, #1
 8018842:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
 8018846:	301c      	adds	r0, #28
 8018848:	f011 f9c2 	bl	8029bd0 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 801884c:	2300      	movs	r3, #0
 801884e:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 8018852:	bd10      	pop	{r4, pc}

08018854 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 8018854:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018858:	4604      	mov	r4, r0
 801885a:	6980      	ldr	r0, [r0, #24]
 801885c:	b085      	sub	sp, #20
 801885e:	460f      	mov	r7, r1
 8018860:	4690      	mov	r8, r2
 8018862:	4699      	mov	r9, r3
 8018864:	b930      	cbnz	r0, 8018874 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x20>
 8018866:	4b1c      	ldr	r3, [pc, #112]	; (80188d8 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x84>)
 8018868:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 801886c:	4a1b      	ldr	r2, [pc, #108]	; (80188dc <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x88>)
 801886e:	481c      	ldr	r0, [pc, #112]	; (80188e0 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x8c>)
 8018870:	f013 f802 	bl	802b878 <__assert_func>
 8018874:	ad04      	add	r5, sp, #16
 8018876:	2600      	movs	r6, #0
 8018878:	f845 6d04 	str.w	r6, [r5, #-4]!
 801887c:	6806      	ldr	r6, [r0, #0]
 801887e:	9501      	str	r5, [sp, #4]
 8018880:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
 8018884:	9500      	str	r5, [sp, #0]
 8018886:	6835      	ldr	r5, [r6, #0]
 8018888:	47a8      	blx	r5
 801888a:	4d16      	ldr	r5, [pc, #88]	; (80188e4 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x90>)
 801888c:	4606      	mov	r6, r0
 801888e:	f8a5 9000 	strh.w	r9, [r5]
 8018892:	f7eb fdef 	bl	8004474 <_ZN8touchgfx3HAL3lcdEv>
 8018896:	6803      	ldr	r3, [r0, #0]
 8018898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801889a:	4798      	blx	r3
 801889c:	2801      	cmp	r0, #1
 801889e:	d012      	beq.n	80188c6 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x72>
 80188a0:	d306      	bcc.n	80188b0 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x5c>
 80188a2:	280d      	cmp	r0, #13
 80188a4:	d80b      	bhi.n	80188be <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x6a>
 80188a6:	4b10      	ldr	r3, [pc, #64]	; (80188e8 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x94>)
 80188a8:	f240 1167 	movw	r1, #359	; 0x167
 80188ac:	4a0b      	ldr	r2, [pc, #44]	; (80188dc <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x88>)
 80188ae:	e7de      	b.n	801886e <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x1a>
 80188b0:	882b      	ldrh	r3, [r5, #0]
 80188b2:	fb08 7203 	mla	r2, r8, r3, r7
 80188b6:	9b03      	ldr	r3, [sp, #12]
 80188b8:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 80188bc:	63e3      	str	r3, [r4, #60]	; 0x3c
 80188be:	4630      	mov	r0, r6
 80188c0:	b005      	add	sp, #20
 80188c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80188c6:	882a      	ldrh	r2, [r5, #0]
 80188c8:	9b03      	ldr	r3, [sp, #12]
 80188ca:	fb08 7202 	mla	r2, r8, r2, r7
 80188ce:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80188d2:	1a9a      	subs	r2, r3, r2
 80188d4:	63e2      	str	r2, [r4, #60]	; 0x3c
 80188d6:	e7f2      	b.n	80188be <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x6a>
 80188d8:	0802ea68 	.word	0x0802ea68
 80188dc:	0802edf7 	.word	0x0802edf7
 80188e0:	0802eaad 	.word	0x0802eaad
 80188e4:	2400c8b6 	.word	0x2400c8b6
 80188e8:	0802ead3 	.word	0x0802ead3

080188ec <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb>:
 80188ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80188ee:	b08b      	sub	sp, #44	; 0x2c
 80188f0:	4617      	mov	r7, r2
 80188f2:	4604      	mov	r4, r0
 80188f4:	460e      	mov	r6, r1
 80188f6:	461d      	mov	r5, r3
 80188f8:	f7eb fdbc 	bl	8004474 <_ZN8touchgfx3HAL3lcdEv>
 80188fc:	6803      	ldr	r3, [r0, #0]
 80188fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018900:	4798      	blx	r3
 8018902:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 8018906:	9007      	str	r0, [sp, #28]
 8018908:	4631      	mov	r1, r6
 801890a:	6822      	ldr	r2, [r4, #0]
 801890c:	e9cd 0308 	strd	r0, r3, [sp, #32]
 8018910:	4b0c      	ldr	r3, [pc, #48]	; (8018944 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb+0x58>)
 8018912:	4620      	mov	r0, r4
 8018914:	881b      	ldrh	r3, [r3, #0]
 8018916:	9306      	str	r3, [sp, #24]
 8018918:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 801891c:	9305      	str	r3, [sp, #20]
 801891e:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 8018922:	9304      	str	r3, [sp, #16]
 8018924:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8018928:	9303      	str	r3, [sp, #12]
 801892a:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 801892e:	9302      	str	r3, [sp, #8]
 8018930:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8018934:	e9cd 5300 	strd	r5, r3, [sp]
 8018938:	463b      	mov	r3, r7
 801893a:	6bd5      	ldr	r5, [r2, #60]	; 0x3c
 801893c:	2200      	movs	r2, #0
 801893e:	47a8      	blx	r5
 8018940:	b00b      	add	sp, #44	; 0x2c
 8018942:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018944:	2400c8b6 	.word	0x2400c8b6

08018948 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb>:
 8018948:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801894c:	4698      	mov	r8, r3
 801894e:	6803      	ldr	r3, [r0, #0]
 8018950:	b08b      	sub	sp, #44	; 0x2c
 8018952:	4617      	mov	r7, r2
 8018954:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 8018956:	460e      	mov	r6, r1
 8018958:	4b13      	ldr	r3, [pc, #76]	; (80189a8 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb+0x60>)
 801895a:	4604      	mov	r4, r0
 801895c:	f8b3 9000 	ldrh.w	r9, [r3]
 8018960:	f7eb fd88 	bl	8004474 <_ZN8touchgfx3HAL3lcdEv>
 8018964:	6803      	ldr	r3, [r0, #0]
 8018966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018968:	4798      	blx	r3
 801896a:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 801896e:	2200      	movs	r2, #0
 8018970:	4631      	mov	r1, r6
 8018972:	e9cd 0308 	strd	r0, r3, [sp, #32]
 8018976:	2302      	movs	r3, #2
 8018978:	4620      	mov	r0, r4
 801897a:	e9cd 9306 	strd	r9, r3, [sp, #24]
 801897e:	2301      	movs	r3, #1
 8018980:	9305      	str	r3, [sp, #20]
 8018982:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 8018986:	9304      	str	r3, [sp, #16]
 8018988:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 801898c:	9303      	str	r3, [sp, #12]
 801898e:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 8018992:	9302      	str	r3, [sp, #8]
 8018994:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8018998:	e9cd 8300 	strd	r8, r3, [sp]
 801899c:	463b      	mov	r3, r7
 801899e:	47a8      	blx	r5
 80189a0:	b00b      	add	sp, #44	; 0x2c
 80189a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80189a6:	bf00      	nop
 80189a8:	2400c8b6 	.word	0x2400c8b6

080189ac <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb>:
 80189ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80189b0:	4698      	mov	r8, r3
 80189b2:	6803      	ldr	r3, [r0, #0]
 80189b4:	b087      	sub	sp, #28
 80189b6:	460e      	mov	r6, r1
 80189b8:	6d9d      	ldr	r5, [r3, #88]	; 0x58
 80189ba:	4617      	mov	r7, r2
 80189bc:	4b0f      	ldr	r3, [pc, #60]	; (80189fc <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb+0x50>)
 80189be:	4604      	mov	r4, r0
 80189c0:	f8b3 9000 	ldrh.w	r9, [r3]
 80189c4:	f7eb fd56 	bl	8004474 <_ZN8touchgfx3HAL3lcdEv>
 80189c8:	6803      	ldr	r3, [r0, #0]
 80189ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80189cc:	4798      	blx	r3
 80189ce:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
 80189d2:	463a      	mov	r2, r7
 80189d4:	4631      	mov	r1, r6
 80189d6:	f8cd 900c 	str.w	r9, [sp, #12]
 80189da:	e9cd 0304 	strd	r0, r3, [sp, #16]
 80189de:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 80189e2:	4620      	mov	r0, r4
 80189e4:	9302      	str	r3, [sp, #8]
 80189e6:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 80189ea:	9301      	str	r3, [sp, #4]
 80189ec:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 80189f0:	9300      	str	r3, [sp, #0]
 80189f2:	4643      	mov	r3, r8
 80189f4:	47a8      	blx	r5
 80189f6:	b007      	add	sp, #28
 80189f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80189fc:	2400c8b6 	.word	0x2400c8b6

08018a00 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 8018a00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018a04:	4604      	mov	r4, r0
 8018a06:	b08f      	sub	sp, #60	; 0x3c
 8018a08:	4610      	mov	r0, r2
 8018a0a:	460d      	mov	r5, r1
 8018a0c:	4691      	mov	r9, r2
 8018a0e:	461e      	mov	r6, r3
 8018a10:	f008 fdb8 	bl	8021584 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 8018a14:	2800      	cmp	r0, #0
 8018a16:	f000 809c 	beq.w	8018b52 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x152>
 8018a1a:	6823      	ldr	r3, [r4, #0]
 8018a1c:	4620      	mov	r0, r4
 8018a1e:	f8df b194 	ldr.w	fp, [pc, #404]	; 8018bb4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>
 8018a22:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 8018a26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018a28:	4798      	blx	r3
 8018a2a:	6823      	ldr	r3, [r4, #0]
 8018a2c:	4620      	mov	r0, r4
 8018a2e:	f8df a188 	ldr.w	sl, [pc, #392]	; 8018bb8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>
 8018a32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018a34:	4798      	blx	r3
 8018a36:	f8bb 3000 	ldrh.w	r3, [fp]
 8018a3a:	4f5b      	ldr	r7, [pc, #364]	; (8018ba8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1a8>)
 8018a3c:	9301      	str	r3, [sp, #4]
 8018a3e:	f8ba 3000 	ldrh.w	r3, [sl]
 8018a42:	f828 9d1c 	strh.w	r9, [r8, #-28]!
 8018a46:	4640      	mov	r0, r8
 8018a48:	9302      	str	r3, [sp, #8]
 8018a4a:	883b      	ldrh	r3, [r7, #0]
 8018a4c:	9303      	str	r3, [sp, #12]
 8018a4e:	4b57      	ldr	r3, [pc, #348]	; (8018bac <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8018a50:	881a      	ldrh	r2, [r3, #0]
 8018a52:	9305      	str	r3, [sp, #20]
 8018a54:	9204      	str	r2, [sp, #16]
 8018a56:	f008 fe4f 	bl	80216f8 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8018a5a:	8038      	strh	r0, [r7, #0]
 8018a5c:	4640      	mov	r0, r8
 8018a5e:	f008 fe85 	bl	802176c <_ZNK8touchgfx6Bitmap9getHeightEv>
 8018a62:	9b05      	ldr	r3, [sp, #20]
 8018a64:	8018      	strh	r0, [r3, #0]
 8018a66:	4b52      	ldr	r3, [pc, #328]	; (8018bb0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 8018a68:	781b      	ldrb	r3, [r3, #0]
 8018a6a:	2b00      	cmp	r3, #0
 8018a6c:	d174      	bne.n	8018b58 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x158>
 8018a6e:	883b      	ldrh	r3, [r7, #0]
 8018a70:	f8aa 0000 	strh.w	r0, [sl]
 8018a74:	f8ab 3000 	strh.w	r3, [fp]
 8018a78:	4648      	mov	r0, r9
 8018a7a:	e9d4 870f 	ldrd	r8, r7, [r4, #60]	; 0x3c
 8018a7e:	f008 fd81 	bl	8021584 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 8018a82:	2200      	movs	r2, #0
 8018a84:	e9c4 000f 	strd	r0, r0, [r4, #60]	; 0x3c
 8018a88:	4611      	mov	r1, r2
 8018a8a:	4628      	mov	r0, r5
 8018a8c:	f9b5 9004 	ldrsh.w	r9, [r5, #4]
 8018a90:	f9b5 a006 	ldrsh.w	sl, [r5, #6]
 8018a94:	f7eb fbf7 	bl	8004286 <_ZN8touchgfx8Drawable5setXYEss>
 8018a98:	2301      	movs	r3, #1
 8018a9a:	f895 b025 	ldrb.w	fp, [r5, #37]	; 0x25
 8018a9e:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
 8018aa2:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 8018aa6:	2b00      	cmp	r3, #0
 8018aa8:	dd5c      	ble.n	8018b64 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x164>
 8018aaa:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 8018aae:	2b00      	cmp	r3, #0
 8018ab0:	dd58      	ble.n	8018b64 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x164>
 8018ab2:	462a      	mov	r2, r5
 8018ab4:	ab0a      	add	r3, sp, #40	; 0x28
 8018ab6:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8018aba:	6851      	ldr	r1, [r2, #4]
 8018abc:	c303      	stmia	r3!, {r0, r1}
 8018abe:	4631      	mov	r1, r6
 8018ac0:	a80a      	add	r0, sp, #40	; 0x28
 8018ac2:	f7ff fbe7 	bl	8018294 <_ZN8touchgfx4RectaNERKS0_>
 8018ac6:	4b38      	ldr	r3, [pc, #224]	; (8018ba8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1a8>)
 8018ac8:	2100      	movs	r1, #0
 8018aca:	f9b3 2000 	ldrsh.w	r2, [r3]
 8018ace:	4b37      	ldr	r3, [pc, #220]	; (8018bac <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8018ad0:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 8018ad4:	aa0a      	add	r2, sp, #40	; 0x28
 8018ad6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018ada:	910c      	str	r1, [sp, #48]	; 0x30
 8018adc:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 8018ae0:	ab08      	add	r3, sp, #32
 8018ae2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8018ae6:	e883 0003 	stmia.w	r3, {r0, r1}
 8018aea:	4618      	mov	r0, r3
 8018aec:	a90c      	add	r1, sp, #48	; 0x30
 8018aee:	f7ff fbd1 	bl	8018294 <_ZN8touchgfx4RectaNERKS0_>
 8018af2:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8018af4:	2b00      	cmp	r3, #0
 8018af6:	d13c      	bne.n	8018b72 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x172>
 8018af8:	2000      	movs	r0, #0
 8018afa:	f884 0076 	strb.w	r0, [r4, #118]	; 0x76
 8018afe:	2600      	movs	r6, #0
 8018b00:	696b      	ldr	r3, [r5, #20]
 8018b02:	a908      	add	r1, sp, #32
 8018b04:	682a      	ldr	r2, [r5, #0]
 8018b06:	4628      	mov	r0, r5
 8018b08:	9305      	str	r3, [sp, #20]
 8018b0a:	616e      	str	r6, [r5, #20]
 8018b0c:	6892      	ldr	r2, [r2, #8]
 8018b0e:	4790      	blx	r2
 8018b10:	9b05      	ldr	r3, [sp, #20]
 8018b12:	4652      	mov	r2, sl
 8018b14:	4649      	mov	r1, r9
 8018b16:	616b      	str	r3, [r5, #20]
 8018b18:	4628      	mov	r0, r5
 8018b1a:	f884 6076 	strb.w	r6, [r4, #118]	; 0x76
 8018b1e:	f885 b025 	strb.w	fp, [r5, #37]	; 0x25
 8018b22:	f7eb fbb0 	bl	8004286 <_ZN8touchgfx8Drawable5setXYEss>
 8018b26:	9a01      	ldr	r2, [sp, #4]
 8018b28:	4b22      	ldr	r3, [pc, #136]	; (8018bb4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>)
 8018b2a:	4620      	mov	r0, r4
 8018b2c:	801a      	strh	r2, [r3, #0]
 8018b2e:	9a02      	ldr	r2, [sp, #8]
 8018b30:	4b21      	ldr	r3, [pc, #132]	; (8018bb8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>)
 8018b32:	801a      	strh	r2, [r3, #0]
 8018b34:	9a03      	ldr	r2, [sp, #12]
 8018b36:	4b1c      	ldr	r3, [pc, #112]	; (8018ba8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1a8>)
 8018b38:	801a      	strh	r2, [r3, #0]
 8018b3a:	4b1c      	ldr	r3, [pc, #112]	; (8018bac <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8018b3c:	9a04      	ldr	r2, [sp, #16]
 8018b3e:	801a      	strh	r2, [r3, #0]
 8018b40:	6823      	ldr	r3, [r4, #0]
 8018b42:	e9c4 870f 	strd	r8, r7, [r4, #60]	; 0x3c
 8018b46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018b48:	4798      	blx	r3
 8018b4a:	6823      	ldr	r3, [r4, #0]
 8018b4c:	4620      	mov	r0, r4
 8018b4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018b50:	4798      	blx	r3
 8018b52:	b00f      	add	sp, #60	; 0x3c
 8018b54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018b58:	883b      	ldrh	r3, [r7, #0]
 8018b5a:	f8ab 0000 	strh.w	r0, [fp]
 8018b5e:	f8aa 3000 	strh.w	r3, [sl]
 8018b62:	e789      	b.n	8018a78 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x78>
 8018b64:	462a      	mov	r2, r5
 8018b66:	ab0a      	add	r3, sp, #40	; 0x28
 8018b68:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8018b6c:	6851      	ldr	r1, [r2, #4]
 8018b6e:	c303      	stmia	r3!, {r0, r1}
 8018b70:	e7a9      	b.n	8018ac6 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xc6>
 8018b72:	a807      	add	r0, sp, #28
 8018b74:	f008 ff52 	bl	8021a1c <_ZNK8touchgfx6Bitmap9getFormatEv>
 8018b78:	4606      	mov	r6, r0
 8018b7a:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8018b7c:	6803      	ldr	r3, [r0, #0]
 8018b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018b80:	4798      	blx	r3
 8018b82:	4286      	cmp	r6, r0
 8018b84:	d1b8      	bne.n	8018af8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xf8>
 8018b86:	f7eb fc75 	bl	8004474 <_ZN8touchgfx3HAL3lcdEv>
 8018b8a:	6803      	ldr	r3, [r0, #0]
 8018b8c:	4606      	mov	r6, r0
 8018b8e:	a807      	add	r0, sp, #28
 8018b90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018b92:	9305      	str	r3, [sp, #20]
 8018b94:	f008 ff42 	bl	8021a1c <_ZNK8touchgfx6Bitmap9getFormatEv>
 8018b98:	9b05      	ldr	r3, [sp, #20]
 8018b9a:	4601      	mov	r1, r0
 8018b9c:	4630      	mov	r0, r6
 8018b9e:	4798      	blx	r3
 8018ba0:	f080 0001 	eor.w	r0, r0, #1
 8018ba4:	b2c0      	uxtb	r0, r0
 8018ba6:	e7a8      	b.n	8018afa <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfa>
 8018ba8:	2400c8b0 	.word	0x2400c8b0
 8018bac:	2400c8b2 	.word	0x2400c8b2
 8018bb0:	2400c8b4 	.word	0x2400c8b4
 8018bb4:	2400c8b6 	.word	0x2400c8b6
 8018bb8:	2400c8b8 	.word	0x2400c8b8

08018bbc <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 8018bbc:	4b07      	ldr	r3, [pc, #28]	; (8018bdc <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 8018bbe:	b510      	push	{r4, lr}
 8018bc0:	781b      	ldrb	r3, [r3, #0]
 8018bc2:	4604      	mov	r4, r0
 8018bc4:	b13b      	cbz	r3, 8018bd6 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 8018bc6:	6803      	ldr	r3, [r0, #0]
 8018bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018bca:	4798      	blx	r3
 8018bcc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8018bce:	4283      	cmp	r3, r0
 8018bd0:	d101      	bne.n	8018bd6 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 8018bd2:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8018bd4:	bd10      	pop	{r4, pc}
 8018bd6:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8018bd8:	e7fc      	b.n	8018bd4 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
 8018bda:	bf00      	nop
 8018bdc:	2400c8ba 	.word	0x2400c8ba

08018be0 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt>:
 8018be0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018be4:	b088      	sub	sp, #32
 8018be6:	4692      	mov	sl, r2
 8018be8:	461d      	mov	r5, r3
 8018bea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8018bee:	f8bd 904c 	ldrh.w	r9, [sp, #76]	; 0x4c
 8018bf2:	2400      	movs	r4, #0
 8018bf4:	f8bd 8040 	ldrh.w	r8, [sp, #64]	; 0x40
 8018bf8:	4606      	mov	r6, r0
 8018bfa:	f8bd 7044 	ldrh.w	r7, [sp, #68]	; 0x44
 8018bfe:	fb09 a505 	mla	r5, r9, r5, sl
 8018c02:	9403      	str	r4, [sp, #12]
 8018c04:	f8ad 8014 	strh.w	r8, [sp, #20]
 8018c08:	f8ad 7016 	strh.w	r7, [sp, #22]
 8018c0c:	f88d 401c 	strb.w	r4, [sp, #28]
 8018c10:	e9cd 3100 	strd	r3, r1, [sp]
 8018c14:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8018c18:	f8ad 3018 	strh.w	r3, [sp, #24]
 8018c1c:	f7ff ffce 	bl	8018bbc <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8018c20:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8018c24:	f8ad 901a 	strh.w	r9, [sp, #26]
 8018c28:	f88d 401e 	strb.w	r4, [sp, #30]
 8018c2c:	9504      	str	r5, [sp, #16]
 8018c2e:	f88d 401d 	strb.w	r4, [sp, #29]
 8018c32:	f88d 401f 	strb.w	r4, [sp, #31]
 8018c36:	f1b8 0f00 	cmp.w	r8, #0
 8018c3a:	d000      	beq.n	8018c3e <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x5e>
 8018c3c:	b937      	cbnz	r7, 8018c4c <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x6c>
 8018c3e:	4b0d      	ldr	r3, [pc, #52]	; (8018c74 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x94>)
 8018c40:	f240 210b 	movw	r1, #523	; 0x20b
 8018c44:	4a0c      	ldr	r2, [pc, #48]	; (8018c78 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x98>)
 8018c46:	480d      	ldr	r0, [pc, #52]	; (8018c7c <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x9c>)
 8018c48:	f012 fe16 	bl	802b878 <__assert_func>
 8018c4c:	6833      	ldr	r3, [r6, #0]
 8018c4e:	4630      	mov	r0, r6
 8018c50:	9c00      	ldr	r4, [sp, #0]
 8018c52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018c54:	4798      	blx	r3
 8018c56:	4220      	tst	r0, r4
 8018c58:	d104      	bne.n	8018c64 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x84>
 8018c5a:	4b09      	ldr	r3, [pc, #36]	; (8018c80 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0xa0>)
 8018c5c:	f44f 7103 	mov.w	r1, #524	; 0x20c
 8018c60:	4a05      	ldr	r2, [pc, #20]	; (8018c78 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x98>)
 8018c62:	e7f0      	b.n	8018c46 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x66>
 8018c64:	6870      	ldr	r0, [r6, #4]
 8018c66:	4669      	mov	r1, sp
 8018c68:	6803      	ldr	r3, [r0, #0]
 8018c6a:	685b      	ldr	r3, [r3, #4]
 8018c6c:	4798      	blx	r3
 8018c6e:	b008      	add	sp, #32
 8018c70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018c74:	0802e8fb 	.word	0x0802e8fb
 8018c78:	0802ec2c 	.word	0x0802ec2c
 8018c7c:	0802eaad 	.word	0x0802eaad
 8018c80:	0802e933 	.word	0x0802e933

08018c84 <_ZN8touchgfx3HAL12blitFillWordEtttttt>:
 8018c84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018c88:	b089      	sub	sp, #36	; 0x24
 8018c8a:	4693      	mov	fp, r2
 8018c8c:	461d      	mov	r5, r3
 8018c8e:	2400      	movs	r4, #0
 8018c90:	f8bd 9050 	ldrh.w	r9, [sp, #80]	; 0x50
 8018c94:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8018c98:	468a      	mov	sl, r1
 8018c9a:	f8bd 8048 	ldrh.w	r8, [sp, #72]	; 0x48
 8018c9e:	fb09 b505 	mla	r5, r9, r5, fp
 8018ca2:	f8bd 704c 	ldrh.w	r7, [sp, #76]	; 0x4c
 8018ca6:	4606      	mov	r6, r0
 8018ca8:	9403      	str	r4, [sp, #12]
 8018caa:	e9cd 3400 	strd	r3, r4, [sp]
 8018cae:	f7ff ff85 	bl	8018bbc <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8018cb2:	f8ad 8014 	strh.w	r8, [sp, #20]
 8018cb6:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8018cba:	f8ad 7016 	strh.w	r7, [sp, #22]
 8018cbe:	f8ad 4018 	strh.w	r4, [sp, #24]
 8018cc2:	9504      	str	r5, [sp, #16]
 8018cc4:	f8ad 901a 	strh.w	r9, [sp, #26]
 8018cc8:	f8cd a00c 	str.w	sl, [sp, #12]
 8018ccc:	f8ad 401c 	strh.w	r4, [sp, #28]
 8018cd0:	f88d 401e 	strb.w	r4, [sp, #30]
 8018cd4:	f88d 401f 	strb.w	r4, [sp, #31]
 8018cd8:	f1b8 0f00 	cmp.w	r8, #0
 8018cdc:	d000      	beq.n	8018ce0 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x5c>
 8018cde:	b937      	cbnz	r7, 8018cee <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x6a>
 8018ce0:	4b0d      	ldr	r3, [pc, #52]	; (8018d18 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x94>)
 8018ce2:	f240 2121 	movw	r1, #545	; 0x221
 8018ce6:	4a0d      	ldr	r2, [pc, #52]	; (8018d1c <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x98>)
 8018ce8:	480d      	ldr	r0, [pc, #52]	; (8018d20 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x9c>)
 8018cea:	f012 fdc5 	bl	802b878 <__assert_func>
 8018cee:	6833      	ldr	r3, [r6, #0]
 8018cf0:	4630      	mov	r0, r6
 8018cf2:	9c00      	ldr	r4, [sp, #0]
 8018cf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018cf6:	4798      	blx	r3
 8018cf8:	4220      	tst	r0, r4
 8018cfa:	d104      	bne.n	8018d06 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x82>
 8018cfc:	4b09      	ldr	r3, [pc, #36]	; (8018d24 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0xa0>)
 8018cfe:	f240 2122 	movw	r1, #546	; 0x222
 8018d02:	4a06      	ldr	r2, [pc, #24]	; (8018d1c <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x98>)
 8018d04:	e7f0      	b.n	8018ce8 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x64>
 8018d06:	6870      	ldr	r0, [r6, #4]
 8018d08:	4669      	mov	r1, sp
 8018d0a:	6803      	ldr	r3, [r0, #0]
 8018d0c:	685b      	ldr	r3, [r3, #4]
 8018d0e:	4798      	blx	r3
 8018d10:	b009      	add	sp, #36	; 0x24
 8018d12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018d16:	bf00      	nop
 8018d18:	0802e978 	.word	0x0802e978
 8018d1c:	0802eca2 	.word	0x0802eca2
 8018d20:	0802eaad 	.word	0x0802eaad
 8018d24:	0802e9b0 	.word	0x0802e9b0

08018d28 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE>:
 8018d28:	b508      	push	{r3, lr}
 8018d2a:	290d      	cmp	r1, #13
 8018d2c:	d817      	bhi.n	8018d5e <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x36>
 8018d2e:	e8df f001 	tbb	[pc, r1]
 8018d32:	090b      	.short	0x090b
 8018d34:	0d0d0d07 	.word	0x0d0d0d07
 8018d38:	1414140d 	.word	0x1414140d
 8018d3c:	0d0d1414 	.word	0x0d0d1414
 8018d40:	2020      	movs	r0, #32
 8018d42:	bd08      	pop	{r3, pc}
 8018d44:	2018      	movs	r0, #24
 8018d46:	e7fc      	b.n	8018d42 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 8018d48:	2010      	movs	r0, #16
 8018d4a:	e7fa      	b.n	8018d42 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 8018d4c:	4b05      	ldr	r3, [pc, #20]	; (8018d64 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x3c>)
 8018d4e:	f240 2182 	movw	r1, #642	; 0x282
 8018d52:	4a05      	ldr	r2, [pc, #20]	; (8018d68 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x40>)
 8018d54:	4805      	ldr	r0, [pc, #20]	; (8018d6c <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x44>)
 8018d56:	f012 fd8f 	bl	802b878 <__assert_func>
 8018d5a:	2008      	movs	r0, #8
 8018d5c:	e7f1      	b.n	8018d42 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 8018d5e:	2000      	movs	r0, #0
 8018d60:	e7ef      	b.n	8018d42 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 8018d62:	bf00      	nop
 8018d64:	0802eb29 	.word	0x0802eb29
 8018d68:	0802efcd 	.word	0x0802efcd
 8018d6c:	0802eaad 	.word	0x0802eaad

08018d70 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>:
 8018d70:	b570      	push	{r4, r5, r6, lr}
 8018d72:	460d      	mov	r5, r1
 8018d74:	f89d 1014 	ldrb.w	r1, [sp, #20]
 8018d78:	4616      	mov	r6, r2
 8018d7a:	461c      	mov	r4, r3
 8018d7c:	f7ff ffd4 	bl	8018d28 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE>
 8018d80:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 8018d84:	10c0      	asrs	r0, r0, #3
 8018d86:	fb06 5101 	mla	r1, r6, r1, r5
 8018d8a:	fb00 4001 	mla	r0, r0, r1, r4
 8018d8e:	bd70      	pop	{r4, r5, r6, pc}

08018d90 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b>:
 8018d90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018d94:	b08a      	sub	sp, #40	; 0x28
 8018d96:	f04f 0c00 	mov.w	ip, #0
 8018d9a:	4604      	mov	r4, r0
 8018d9c:	469a      	mov	sl, r3
 8018d9e:	f89d 5064 	ldrb.w	r5, [sp, #100]	; 0x64
 8018da2:	f8bd 704c 	ldrh.w	r7, [sp, #76]	; 0x4c
 8018da6:	2d0b      	cmp	r5, #11
 8018da8:	f8bd 6050 	ldrh.w	r6, [sp, #80]	; 0x50
 8018dac:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 8018db0:	f89d 005c 	ldrb.w	r0, [sp, #92]	; 0x5c
 8018db4:	f8bd 9060 	ldrh.w	r9, [sp, #96]	; 0x60
 8018db8:	f89d 8068 	ldrb.w	r8, [sp, #104]	; 0x68
 8018dbc:	f8cd c014 	str.w	ip, [sp, #20]
 8018dc0:	d12d      	bne.n	8018e1e <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x8e>
 8018dc2:	2080      	movs	r0, #128	; 0x80
 8018dc4:	9204      	str	r2, [sp, #16]
 8018dc6:	f8bd 2054 	ldrh.w	r2, [sp, #84]	; 0x54
 8018dca:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8018dce:	f8ad 2020 	strh.w	r2, [sp, #32]
 8018dd2:	f8ad 701c 	strh.w	r7, [sp, #28]
 8018dd6:	f8ad 601e 	strh.w	r6, [sp, #30]
 8018dda:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8018dde:	4620      	mov	r0, r4
 8018de0:	f7ff feec 	bl	8018bbc <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8018de4:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
 8018de8:	4603      	mov	r3, r0
 8018dea:	4651      	mov	r1, sl
 8018dec:	4620      	mov	r0, r4
 8018dee:	e9cd 9800 	strd	r9, r8, [sp]
 8018df2:	f7ff ffbd 	bl	8018d70 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 8018df6:	f89d 306c 	ldrb.w	r3, [sp, #108]	; 0x6c
 8018dfa:	9006      	str	r0, [sp, #24]
 8018dfc:	f8ad 9022 	strh.w	r9, [sp, #34]	; 0x22
 8018e00:	f88d 5025 	strb.w	r5, [sp, #37]	; 0x25
 8018e04:	f88d 8026 	strb.w	r8, [sp, #38]	; 0x26
 8018e08:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
 8018e0c:	b107      	cbz	r7, 8018e10 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x80>
 8018e0e:	b9d6      	cbnz	r6, 8018e46 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xb6>
 8018e10:	4b17      	ldr	r3, [pc, #92]	; (8018e70 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xe0>)
 8018e12:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
 8018e16:	4a17      	ldr	r2, [pc, #92]	; (8018e74 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xe4>)
 8018e18:	4817      	ldr	r0, [pc, #92]	; (8018e78 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xe8>)
 8018e1a:	f012 fd2d 	bl	802b878 <__assert_func>
 8018e1e:	2d02      	cmp	r5, #2
 8018e20:	d108      	bne.n	8018e34 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xa4>
 8018e22:	2bff      	cmp	r3, #255	; 0xff
 8018e24:	d104      	bne.n	8018e30 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xa0>
 8018e26:	2800      	cmp	r0, #0
 8018e28:	bf14      	ite	ne
 8018e2a:	2040      	movne	r0, #64	; 0x40
 8018e2c:	2020      	moveq	r0, #32
 8018e2e:	e7c9      	b.n	8018dc4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x34>
 8018e30:	2040      	movs	r0, #64	; 0x40
 8018e32:	e7c7      	b.n	8018dc4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x34>
 8018e34:	2bff      	cmp	r3, #255	; 0xff
 8018e36:	d104      	bne.n	8018e42 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xb2>
 8018e38:	2800      	cmp	r0, #0
 8018e3a:	bf14      	ite	ne
 8018e3c:	2004      	movne	r0, #4
 8018e3e:	2001      	moveq	r0, #1
 8018e40:	e7c0      	b.n	8018dc4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x34>
 8018e42:	2004      	movs	r0, #4
 8018e44:	e7be      	b.n	8018dc4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x34>
 8018e46:	6823      	ldr	r3, [r4, #0]
 8018e48:	4620      	mov	r0, r4
 8018e4a:	9d02      	ldr	r5, [sp, #8]
 8018e4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018e4e:	4798      	blx	r3
 8018e50:	4228      	tst	r0, r5
 8018e52:	d104      	bne.n	8018e5e <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xce>
 8018e54:	4b09      	ldr	r3, [pc, #36]	; (8018e7c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xec>)
 8018e56:	f240 11d5 	movw	r1, #469	; 0x1d5
 8018e5a:	4a06      	ldr	r2, [pc, #24]	; (8018e74 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xe4>)
 8018e5c:	e7dc      	b.n	8018e18 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x88>
 8018e5e:	6860      	ldr	r0, [r4, #4]
 8018e60:	a902      	add	r1, sp, #8
 8018e62:	6803      	ldr	r3, [r0, #0]
 8018e64:	685b      	ldr	r3, [r3, #4]
 8018e66:	4798      	blx	r3
 8018e68:	b00a      	add	sp, #40	; 0x28
 8018e6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018e6e:	bf00      	nop
 8018e70:	0802e8fb 	.word	0x0802e8fb
 8018e74:	0802ee5b 	.word	0x0802ee5b
 8018e78:	0802eaad 	.word	0x0802eaad
 8018e7c:	0802e933 	.word	0x0802e933

08018e80 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb>:
 8018e80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018e84:	b08b      	sub	sp, #44	; 0x2c
 8018e86:	469b      	mov	fp, r3
 8018e88:	4604      	mov	r4, r0
 8018e8a:	4692      	mov	sl, r2
 8018e8c:	f89d 7058 	ldrb.w	r7, [sp, #88]	; 0x58
 8018e90:	2600      	movs	r6, #0
 8018e92:	f89d 5060 	ldrb.w	r5, [sp, #96]	; 0x60
 8018e96:	4689      	mov	r9, r1
 8018e98:	2fff      	cmp	r7, #255	; 0xff
 8018e9a:	f8bd 805c 	ldrh.w	r8, [sp, #92]	; 0x5c
 8018e9e:	9605      	str	r6, [sp, #20]
 8018ea0:	bf14      	ite	ne
 8018ea2:	2308      	movne	r3, #8
 8018ea4:	2302      	moveq	r3, #2
 8018ea6:	e9cd 3602 	strd	r3, r6, [sp, #8]
 8018eaa:	f7ff fe87 	bl	8018bbc <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8018eae:	465a      	mov	r2, fp
 8018eb0:	4603      	mov	r3, r0
 8018eb2:	4651      	mov	r1, sl
 8018eb4:	4620      	mov	r0, r4
 8018eb6:	e9cd 8500 	strd	r8, r5, [sp]
 8018eba:	f7ff ff59 	bl	8018d70 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 8018ebe:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 8018ec2:	f88d 5025 	strb.w	r5, [sp, #37]	; 0x25
 8018ec6:	f8ad 301c 	strh.w	r3, [sp, #28]
 8018eca:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 8018ece:	f88d 5026 	strb.w	r5, [sp, #38]	; 0x26
 8018ed2:	f8ad 301e 	strh.w	r3, [sp, #30]
 8018ed6:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
 8018eda:	9d02      	ldr	r5, [sp, #8]
 8018edc:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
 8018ee0:	6823      	ldr	r3, [r4, #0]
 8018ee2:	9006      	str	r0, [sp, #24]
 8018ee4:	4620      	mov	r0, r4
 8018ee6:	f8ad 6020 	strh.w	r6, [sp, #32]
 8018eea:	f8ad 8022 	strh.w	r8, [sp, #34]	; 0x22
 8018eee:	f8cd 9014 	str.w	r9, [sp, #20]
 8018ef2:	f88d 7024 	strb.w	r7, [sp, #36]	; 0x24
 8018ef6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018ef8:	4798      	blx	r3
 8018efa:	4228      	tst	r0, r5
 8018efc:	d106      	bne.n	8018f0c <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0x8c>
 8018efe:	4b07      	ldr	r3, [pc, #28]	; (8018f1c <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0x9c>)
 8018f00:	f240 2137 	movw	r1, #567	; 0x237
 8018f04:	4a06      	ldr	r2, [pc, #24]	; (8018f20 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0xa0>)
 8018f06:	4807      	ldr	r0, [pc, #28]	; (8018f24 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0xa4>)
 8018f08:	f012 fcb6 	bl	802b878 <__assert_func>
 8018f0c:	6860      	ldr	r0, [r4, #4]
 8018f0e:	a902      	add	r1, sp, #8
 8018f10:	6803      	ldr	r3, [r0, #0]
 8018f12:	685b      	ldr	r3, [r3, #4]
 8018f14:	4798      	blx	r3
 8018f16:	b00b      	add	sp, #44	; 0x2c
 8018f18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018f1c:	0802e933 	.word	0x0802e933
 8018f20:	0802ef32 	.word	0x0802ef32
 8018f24:	0802eaad 	.word	0x0802eaad

08018f28 <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 8018f28:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8018f2c:	461f      	mov	r7, r3
 8018f2e:	4b0b      	ldr	r3, [pc, #44]	; (8018f5c <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 8018f30:	460d      	mov	r5, r1
 8018f32:	4616      	mov	r6, r2
 8018f34:	f8b3 8000 	ldrh.w	r8, [r3]
 8018f38:	4604      	mov	r4, r0
 8018f3a:	f7eb fa9b 	bl	8004474 <_ZN8touchgfx3HAL3lcdEv>
 8018f3e:	6803      	ldr	r3, [r0, #0]
 8018f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018f42:	4798      	blx	r3
 8018f44:	463b      	mov	r3, r7
 8018f46:	4632      	mov	r2, r6
 8018f48:	4629      	mov	r1, r5
 8018f4a:	e9cd 8000 	strd	r8, r0, [sp]
 8018f4e:	4620      	mov	r0, r4
 8018f50:	f7ff ff0e 	bl	8018d70 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 8018f54:	b002      	add	sp, #8
 8018f56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018f5a:	bf00      	nop
 8018f5c:	2400c8b6 	.word	0x2400c8b6

08018f60 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb>:
 8018f60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018f64:	4698      	mov	r8, r3
 8018f66:	b088      	sub	sp, #32
 8018f68:	2300      	movs	r3, #0
 8018f6a:	4617      	mov	r7, r2
 8018f6c:	4604      	mov	r4, r0
 8018f6e:	f8bd 6038 	ldrh.w	r6, [sp, #56]	; 0x38
 8018f72:	9303      	str	r3, [sp, #12]
 8018f74:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 8018f78:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 8018f7c:	f8ad 6014 	strh.w	r6, [sp, #20]
 8018f80:	f8ad 5016 	strh.w	r5, [sp, #22]
 8018f84:	e9cd 3100 	strd	r3, r1, [sp]
 8018f88:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8018f8c:	f8ad 3018 	strh.w	r3, [sp, #24]
 8018f90:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 8018f94:	f88d 301c 	strb.w	r3, [sp, #28]
 8018f98:	f7ff fe10 	bl	8018bbc <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8018f9c:	4642      	mov	r2, r8
 8018f9e:	4603      	mov	r3, r0
 8018fa0:	4639      	mov	r1, r7
 8018fa2:	4620      	mov	r0, r4
 8018fa4:	f7ff ffc0 	bl	8018f28 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8018fa8:	4b18      	ldr	r3, [pc, #96]	; (801900c <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0xac>)
 8018faa:	9004      	str	r0, [sp, #16]
 8018fac:	881b      	ldrh	r3, [r3, #0]
 8018fae:	f8ad 301a 	strh.w	r3, [sp, #26]
 8018fb2:	f7eb fa5f 	bl	8004474 <_ZN8touchgfx3HAL3lcdEv>
 8018fb6:	6803      	ldr	r3, [r0, #0]
 8018fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018fba:	4798      	blx	r3
 8018fbc:	f88d 001e 	strb.w	r0, [sp, #30]
 8018fc0:	f88d 001d 	strb.w	r0, [sp, #29]
 8018fc4:	b106      	cbz	r6, 8018fc8 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x68>
 8018fc6:	b935      	cbnz	r5, 8018fd6 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x76>
 8018fc8:	4b11      	ldr	r3, [pc, #68]	; (8019010 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0xb0>)
 8018fca:	f240 11f1 	movw	r1, #497	; 0x1f1
 8018fce:	4a11      	ldr	r2, [pc, #68]	; (8019014 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0xb4>)
 8018fd0:	4811      	ldr	r0, [pc, #68]	; (8019018 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0xb8>)
 8018fd2:	f012 fc51 	bl	802b878 <__assert_func>
 8018fd6:	6823      	ldr	r3, [r4, #0]
 8018fd8:	4620      	mov	r0, r4
 8018fda:	9d00      	ldr	r5, [sp, #0]
 8018fdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018fde:	4798      	blx	r3
 8018fe0:	4228      	tst	r0, r5
 8018fe2:	d104      	bne.n	8018fee <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x8e>
 8018fe4:	4b0d      	ldr	r3, [pc, #52]	; (801901c <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0xbc>)
 8018fe6:	f44f 71f9 	mov.w	r1, #498	; 0x1f2
 8018fea:	4a0a      	ldr	r2, [pc, #40]	; (8019014 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0xb4>)
 8018fec:	e7f0      	b.n	8018fd0 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x70>
 8018fee:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8018ff0:	4669      	mov	r1, sp
 8018ff2:	6860      	ldr	r0, [r4, #4]
 8018ff4:	9303      	str	r3, [sp, #12]
 8018ff6:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 8018ffa:	f88d 301f 	strb.w	r3, [sp, #31]
 8018ffe:	6803      	ldr	r3, [r0, #0]
 8019000:	685b      	ldr	r3, [r3, #4]
 8019002:	4798      	blx	r3
 8019004:	b008      	add	sp, #32
 8019006:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801900a:	bf00      	nop
 801900c:	2400c8b6 	.word	0x2400c8b6
 8019010:	0802e8fb 	.word	0x0802e8fb
 8019014:	0802ed07 	.word	0x0802ed07
 8019018:	0802eaad 	.word	0x0802eaad
 801901c:	0802e933 	.word	0x0802e933

08019020 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 8019020:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019022:	b08b      	sub	sp, #44	; 0x2c
 8019024:	4604      	mov	r4, r0
 8019026:	466b      	mov	r3, sp
 8019028:	e883 0006 	stmia.w	r3, {r1, r2}
 801902c:	4b20      	ldr	r3, [pc, #128]	; (80190b0 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x90>)
 801902e:	781b      	ldrb	r3, [r3, #0]
 8019030:	b933      	cbnz	r3, 8019040 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x20>
 8019032:	4b20      	ldr	r3, [pc, #128]	; (80190b4 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x94>)
 8019034:	f44f 7112 	mov.w	r1, #584	; 0x248
 8019038:	4a1f      	ldr	r2, [pc, #124]	; (80190b8 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x98>)
 801903a:	4820      	ldr	r0, [pc, #128]	; (80190bc <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x9c>)
 801903c:	f012 fc1c 	bl	802b878 <__assert_func>
 8019040:	2301      	movs	r3, #1
 8019042:	2500      	movs	r5, #0
 8019044:	f8bd 6000 	ldrh.w	r6, [sp]
 8019048:	9302      	str	r3, [sp, #8]
 801904a:	6803      	ldr	r3, [r0, #0]
 801904c:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 8019050:	9505      	str	r5, [sp, #20]
 8019052:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019054:	4798      	blx	r3
 8019056:	463a      	mov	r2, r7
 8019058:	4631      	mov	r1, r6
 801905a:	4603      	mov	r3, r0
 801905c:	4620      	mov	r0, r4
 801905e:	f7ff ff63 	bl	8018f28 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8019062:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8019064:	9003      	str	r0, [sp, #12]
 8019066:	9306      	str	r3, [sp, #24]
 8019068:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801906c:	f8ad 301c 	strh.w	r3, [sp, #28]
 8019070:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8019074:	f8ad 301e 	strh.w	r3, [sp, #30]
 8019078:	4b11      	ldr	r3, [pc, #68]	; (80190c0 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0xa0>)
 801907a:	881b      	ldrh	r3, [r3, #0]
 801907c:	f8ad 3020 	strh.w	r3, [sp, #32]
 8019080:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8019084:	f7eb f9f6 	bl	8004474 <_ZN8touchgfx3HAL3lcdEv>
 8019088:	6803      	ldr	r3, [r0, #0]
 801908a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801908c:	4798      	blx	r3
 801908e:	23ff      	movs	r3, #255	; 0xff
 8019090:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
 8019094:	a902      	add	r1, sp, #8
 8019096:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
 801909a:	6860      	ldr	r0, [r4, #4]
 801909c:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 80190a0:	f88d 5027 	strb.w	r5, [sp, #39]	; 0x27
 80190a4:	6803      	ldr	r3, [r0, #0]
 80190a6:	685b      	ldr	r3, [r3, #4]
 80190a8:	4798      	blx	r3
 80190aa:	6c60      	ldr	r0, [r4, #68]	; 0x44
 80190ac:	b00b      	add	sp, #44	; 0x2c
 80190ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80190b0:	2400c8bb 	.word	0x2400c8bb
 80190b4:	0802e9fa 	.word	0x0802e9fa
 80190b8:	0802edb1 	.word	0x0802edb1
 80190bc:	0802eaad 	.word	0x0802eaad
 80190c0:	2400c8b6 	.word	0x2400c8b6

080190c4 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 80190c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80190c8:	b08a      	sub	sp, #40	; 0x28
 80190ca:	2600      	movs	r6, #0
 80190cc:	4604      	mov	r4, r0
 80190ce:	466d      	mov	r5, sp
 80190d0:	9605      	str	r6, [sp, #20]
 80190d2:	e885 0006 	stmia.w	r5, {r1, r2}
 80190d6:	461d      	mov	r5, r3
 80190d8:	2301      	movs	r3, #1
 80190da:	f8bd 7000 	ldrh.w	r7, [sp]
 80190de:	9302      	str	r3, [sp, #8]
 80190e0:	6803      	ldr	r3, [r0, #0]
 80190e2:	f8bd 8002 	ldrh.w	r8, [sp, #2]
 80190e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80190e8:	4798      	blx	r3
 80190ea:	4642      	mov	r2, r8
 80190ec:	4639      	mov	r1, r7
 80190ee:	4603      	mov	r3, r0
 80190f0:	4620      	mov	r0, r4
 80190f2:	f7ff ff19 	bl	8018f28 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 80190f6:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80190fa:	9003      	str	r0, [sp, #12]
 80190fc:	f8ad 301c 	strh.w	r3, [sp, #28]
 8019100:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8019104:	9506      	str	r5, [sp, #24]
 8019106:	f8ad 301e 	strh.w	r3, [sp, #30]
 801910a:	4b0f      	ldr	r3, [pc, #60]	; (8019148 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x84>)
 801910c:	881b      	ldrh	r3, [r3, #0]
 801910e:	f8ad 3020 	strh.w	r3, [sp, #32]
 8019112:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8019114:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8019118:	f7eb f9ac 	bl	8004474 <_ZN8touchgfx3HAL3lcdEv>
 801911c:	6803      	ldr	r3, [r0, #0]
 801911e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019120:	4798      	blx	r3
 8019122:	23ff      	movs	r3, #255	; 0xff
 8019124:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
 8019128:	a902      	add	r1, sp, #8
 801912a:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
 801912e:	6860      	ldr	r0, [r4, #4]
 8019130:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8019134:	f88d 6027 	strb.w	r6, [sp, #39]	; 0x27
 8019138:	6803      	ldr	r3, [r0, #0]
 801913a:	685b      	ldr	r3, [r3, #4]
 801913c:	4798      	blx	r3
 801913e:	4628      	mov	r0, r5
 8019140:	b00a      	add	sp, #40	; 0x28
 8019142:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019146:	bf00      	nop
 8019148:	2400c8b6 	.word	0x2400c8b6

0801914c <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 801914c:	b570      	push	{r4, r5, r6, lr}
 801914e:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 8019152:	4604      	mov	r4, r0
 8019154:	b19b      	cbz	r3, 801917e <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 8019156:	2002      	movs	r0, #2
 8019158:	f7e7 fc26 	bl	80009a8 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 801915c:	2300      	movs	r3, #0
 801915e:	4620      	mov	r0, r4
 8019160:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 8019164:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
 8019168:	6823      	ldr	r3, [r4, #0]
 801916a:	f8d3 50b0 	ldr.w	r5, [r3, #176]	; 0xb0
 801916e:	f7ff fd25 	bl	8018bbc <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8019172:	4601      	mov	r1, r0
 8019174:	4620      	mov	r0, r4
 8019176:	462b      	mov	r3, r5
 8019178:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801917c:	4718      	bx	r3
 801917e:	bd70      	pop	{r4, r5, r6, pc}

08019180 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>:
 8019180:	b538      	push	{r3, r4, r5, lr}
 8019182:	f890 2078 	ldrb.w	r2, [r0, #120]	; 0x78
 8019186:	4604      	mov	r4, r0
 8019188:	460d      	mov	r5, r1
 801918a:	428a      	cmp	r2, r1
 801918c:	d008      	beq.n	80191a0 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x20>
 801918e:	2a01      	cmp	r2, #1
 8019190:	6803      	ldr	r3, [r0, #0]
 8019192:	d106      	bne.n	80191a2 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x22>
 8019194:	b929      	cbnz	r1, 80191a2 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x22>
 8019196:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 801919a:	4798      	blx	r3
 801919c:	f884 5078 	strb.w	r5, [r4, #120]	; 0x78
 80191a0:	bd38      	pop	{r3, r4, r5, pc}
 80191a2:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80191a6:	4620      	mov	r0, r4
 80191a8:	e7f7      	b.n	801919a <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1a>
	...

080191ac <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 80191ac:	4b0d      	ldr	r3, [pc, #52]	; (80191e4 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x38>)
 80191ae:	b510      	push	{r4, lr}
 80191b0:	781b      	ldrb	r3, [r3, #0]
 80191b2:	4604      	mov	r4, r0
 80191b4:	b95b      	cbnz	r3, 80191ce <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 80191b6:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
 80191ba:	2b02      	cmp	r3, #2
 80191bc:	d007      	beq.n	80191ce <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 80191be:	6840      	ldr	r0, [r0, #4]
 80191c0:	f000 f936 	bl	8019430 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 80191c4:	b118      	cbz	r0, 80191ce <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 80191c6:	6862      	ldr	r2, [r4, #4]
 80191c8:	7a53      	ldrb	r3, [r2, #9]
 80191ca:	2b00      	cmp	r3, #0
 80191cc:	d0fc      	beq.n	80191c8 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
 80191ce:	f7e7 fedb 	bl	8000f88 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 80191d2:	4620      	mov	r0, r4
 80191d4:	2100      	movs	r1, #0
 80191d6:	f7ff ffd3 	bl	8019180 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 80191da:	4620      	mov	r0, r4
 80191dc:	f7ff fcee 	bl	8018bbc <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80191e0:	bd10      	pop	{r4, pc}
 80191e2:	bf00      	nop
 80191e4:	2400c8ba 	.word	0x2400c8ba

080191e8 <_ZN8touchgfx13DMA_Interface10initializeEv>:
 80191e8:	4770      	bx	lr

080191ea <_ZN8touchgfx13DMA_Interface10getDMATypeEv>:
 80191ea:	2000      	movs	r0, #0
 80191ec:	4770      	bx	lr

080191ee <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 80191ee:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 80191f2:	1a13      	subs	r3, r2, r0
 80191f4:	4258      	negs	r0, r3
 80191f6:	4158      	adcs	r0, r3
 80191f8:	4770      	bx	lr

080191fa <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 80191fa:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 80191fe:	1a9b      	subs	r3, r3, r2
 8019200:	2b00      	cmp	r3, #0
 8019202:	bfdc      	itt	le
 8019204:	6882      	ldrle	r2, [r0, #8]
 8019206:	189b      	addle	r3, r3, r2
 8019208:	2b01      	cmp	r3, #1
 801920a:	bfcc      	ite	gt
 801920c:	2000      	movgt	r0, #0
 801920e:	2001      	movle	r0, #1
 8019210:	4770      	bx	lr

08019212 <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 8019212:	6902      	ldr	r2, [r0, #16]
 8019214:	6840      	ldr	r0, [r0, #4]
 8019216:	eb00 1042 	add.w	r0, r0, r2, lsl #5
 801921a:	4770      	bx	lr

0801921c <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 801921c:	6803      	ldr	r3, [r0, #0]
 801921e:	691b      	ldr	r3, [r3, #16]
 8019220:	4718      	bx	r3

08019222 <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 8019222:	4770      	bx	lr

08019224 <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 8019224:	4770      	bx	lr
	...

08019228 <_ZN8touchgfx13DMA_Interface7executeEv>:
 8019228:	2301      	movs	r3, #1
 801922a:	b570      	push	{r4, r5, r6, lr}
 801922c:	7203      	strb	r3, [r0, #8]
 801922e:	4604      	mov	r4, r0
 8019230:	6840      	ldr	r0, [r0, #4]
 8019232:	6803      	ldr	r3, [r0, #0]
 8019234:	699b      	ldr	r3, [r3, #24]
 8019236:	4798      	blx	r3
 8019238:	6803      	ldr	r3, [r0, #0]
 801923a:	4605      	mov	r5, r0
 801923c:	2b40      	cmp	r3, #64	; 0x40
 801923e:	d039      	beq.n	80192b4 <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 8019240:	d815      	bhi.n	801926e <_ZN8touchgfx13DMA_Interface7executeEv+0x46>
 8019242:	2b04      	cmp	r3, #4
 8019244:	d022      	beq.n	801928c <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 8019246:	d808      	bhi.n	801925a <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8019248:	2b01      	cmp	r3, #1
 801924a:	d033      	beq.n	80192b4 <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 801924c:	2b02      	cmp	r3, #2
 801924e:	d108      	bne.n	8019262 <_ZN8touchgfx13DMA_Interface7executeEv+0x3a>
 8019250:	6823      	ldr	r3, [r4, #0]
 8019252:	4620      	mov	r0, r4
 8019254:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019256:	4798      	blx	r3
 8019258:	e025      	b.n	80192a6 <_ZN8touchgfx13DMA_Interface7executeEv+0x7e>
 801925a:	2b08      	cmp	r3, #8
 801925c:	d01e      	beq.n	801929c <_ZN8touchgfx13DMA_Interface7executeEv+0x74>
 801925e:	2b20      	cmp	r3, #32
 8019260:	d028      	beq.n	80192b4 <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 8019262:	4b17      	ldr	r3, [pc, #92]	; (80192c0 <_ZN8touchgfx13DMA_Interface7executeEv+0x98>)
 8019264:	218b      	movs	r1, #139	; 0x8b
 8019266:	4a17      	ldr	r2, [pc, #92]	; (80192c4 <_ZN8touchgfx13DMA_Interface7executeEv+0x9c>)
 8019268:	4817      	ldr	r0, [pc, #92]	; (80192c8 <_ZN8touchgfx13DMA_Interface7executeEv+0xa0>)
 801926a:	f012 fb05 	bl	802b878 <__assert_func>
 801926e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8019272:	d01f      	beq.n	80192b4 <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 8019274:	d804      	bhi.n	8019280 <_ZN8touchgfx13DMA_Interface7executeEv+0x58>
 8019276:	2b80      	cmp	r3, #128	; 0x80
 8019278:	d01c      	beq.n	80192b4 <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 801927a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801927e:	e7ef      	b.n	8019260 <_ZN8touchgfx13DMA_Interface7executeEv+0x38>
 8019280:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8019284:	d016      	beq.n	80192b4 <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 8019286:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801928a:	e7e0      	b.n	801924e <_ZN8touchgfx13DMA_Interface7executeEv+0x26>
 801928c:	6823      	ldr	r3, [r4, #0]
 801928e:	7f01      	ldrb	r1, [r0, #28]
 8019290:	4620      	mov	r0, r4
 8019292:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019294:	4798      	blx	r3
 8019296:	6823      	ldr	r3, [r4, #0]
 8019298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801929a:	e006      	b.n	80192aa <_ZN8touchgfx13DMA_Interface7executeEv+0x82>
 801929c:	6823      	ldr	r3, [r4, #0]
 801929e:	7f01      	ldrb	r1, [r0, #28]
 80192a0:	4620      	mov	r0, r4
 80192a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80192a4:	4798      	blx	r3
 80192a6:	6823      	ldr	r3, [r4, #0]
 80192a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80192aa:	4629      	mov	r1, r5
 80192ac:	4620      	mov	r0, r4
 80192ae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80192b2:	4718      	bx	r3
 80192b4:	6823      	ldr	r3, [r4, #0]
 80192b6:	4620      	mov	r0, r4
 80192b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80192ba:	4798      	blx	r3
 80192bc:	e7eb      	b.n	8019296 <_ZN8touchgfx13DMA_Interface7executeEv+0x6e>
 80192be:	bf00      	nop
 80192c0:	0802f016 	.word	0x0802f016
 80192c4:	0802f128 	.word	0x0802f128
 80192c8:	0802f03b 	.word	0x0802f03b

080192cc <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 80192cc:	b570      	push	{r4, r5, r6, lr}
 80192ce:	4604      	mov	r4, r0
 80192d0:	460e      	mov	r6, r1
 80192d2:	6860      	ldr	r0, [r4, #4]
 80192d4:	6803      	ldr	r3, [r0, #0]
 80192d6:	685b      	ldr	r3, [r3, #4]
 80192d8:	4798      	blx	r3
 80192da:	2800      	cmp	r0, #0
 80192dc:	d1f9      	bne.n	80192d2 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 80192de:	4d0d      	ldr	r5, [pc, #52]	; (8019314 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x48>)
 80192e0:	6828      	ldr	r0, [r5, #0]
 80192e2:	6803      	ldr	r3, [r0, #0]
 80192e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80192e6:	4798      	blx	r3
 80192e8:	f7e7 fe68 	bl	8000fbc <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 80192ec:	6828      	ldr	r0, [r5, #0]
 80192ee:	2101      	movs	r1, #1
 80192f0:	f7ff ff46 	bl	8019180 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 80192f4:	6860      	ldr	r0, [r4, #4]
 80192f6:	4631      	mov	r1, r6
 80192f8:	6803      	ldr	r3, [r0, #0]
 80192fa:	689b      	ldr	r3, [r3, #8]
 80192fc:	4798      	blx	r3
 80192fe:	6823      	ldr	r3, [r4, #0]
 8019300:	4620      	mov	r0, r4
 8019302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019304:	4798      	blx	r3
 8019306:	6828      	ldr	r0, [r5, #0]
 8019308:	6803      	ldr	r3, [r0, #0]
 801930a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801930e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8019310:	4718      	bx	r3
 8019312:	bf00      	nop
 8019314:	2400c8bc 	.word	0x2400c8bc

08019318 <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 8019318:	b508      	push	{r3, lr}
 801931a:	f7e7 fe35 	bl	8000f88 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 801931e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8019322:	f7e7 be3f 	b.w	8000fa4 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08019326 <_ZN8touchgfx13DMA_Interface5startEv>:
 8019326:	b510      	push	{r4, lr}
 8019328:	4604      	mov	r4, r0
 801932a:	6840      	ldr	r0, [r0, #4]
 801932c:	6803      	ldr	r3, [r0, #0]
 801932e:	681b      	ldr	r3, [r3, #0]
 8019330:	4798      	blx	r3
 8019332:	b948      	cbnz	r0, 8019348 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8019334:	7a63      	ldrb	r3, [r4, #9]
 8019336:	b13b      	cbz	r3, 8019348 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8019338:	7a23      	ldrb	r3, [r4, #8]
 801933a:	b92b      	cbnz	r3, 8019348 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 801933c:	6823      	ldr	r3, [r4, #0]
 801933e:	4620      	mov	r0, r4
 8019340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019342:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019346:	4718      	bx	r3
 8019348:	bd10      	pop	{r4, pc}
	...

0801934c <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 801934c:	b570      	push	{r4, r5, r6, lr}
 801934e:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 8019352:	4606      	mov	r6, r0
 8019354:	1a9b      	subs	r3, r3, r2
 8019356:	2b00      	cmp	r3, #0
 8019358:	bfdc      	itt	le
 801935a:	6880      	ldrle	r0, [r0, #8]
 801935c:	181b      	addle	r3, r3, r0
 801935e:	2b01      	cmp	r3, #1
 8019360:	dd13      	ble.n	801938a <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x3e>
 8019362:	6874      	ldr	r4, [r6, #4]
 8019364:	460d      	mov	r5, r1
 8019366:	eb04 1442 	add.w	r4, r4, r2, lsl #5
 801936a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801936c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801936e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8019372:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8019376:	68f3      	ldr	r3, [r6, #12]
 8019378:	68b2      	ldr	r2, [r6, #8]
 801937a:	f3bf 8f5b 	dmb	ish
 801937e:	3301      	adds	r3, #1
 8019380:	429a      	cmp	r2, r3
 8019382:	bfd8      	it	le
 8019384:	1a9b      	suble	r3, r3, r2
 8019386:	60f3      	str	r3, [r6, #12]
 8019388:	bd70      	pop	{r4, r5, r6, pc}
 801938a:	4b03      	ldr	r3, [pc, #12]	; (8019398 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x4c>)
 801938c:	2139      	movs	r1, #57	; 0x39
 801938e:	4a03      	ldr	r2, [pc, #12]	; (801939c <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x50>)
 8019390:	4803      	ldr	r0, [pc, #12]	; (80193a0 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x54>)
 8019392:	f012 fa71 	bl	802b878 <__assert_func>
 8019396:	bf00      	nop
 8019398:	0802f061 	.word	0x0802f061
 801939c:	0802f158 	.word	0x0802f158
 80193a0:	0802f03b 	.word	0x0802f03b

080193a4 <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 80193a4:	b510      	push	{r4, lr}
 80193a6:	6803      	ldr	r3, [r0, #0]
 80193a8:	4604      	mov	r4, r0
 80193aa:	681b      	ldr	r3, [r3, #0]
 80193ac:	4798      	blx	r3
 80193ae:	b128      	cbz	r0, 80193bc <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x18>
 80193b0:	4b07      	ldr	r3, [pc, #28]	; (80193d0 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x2c>)
 80193b2:	213f      	movs	r1, #63	; 0x3f
 80193b4:	4a07      	ldr	r2, [pc, #28]	; (80193d4 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x30>)
 80193b6:	4808      	ldr	r0, [pc, #32]	; (80193d8 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x34>)
 80193b8:	f012 fa5e 	bl	802b878 <__assert_func>
 80193bc:	6923      	ldr	r3, [r4, #16]
 80193be:	68a2      	ldr	r2, [r4, #8]
 80193c0:	f3bf 8f5b 	dmb	ish
 80193c4:	3301      	adds	r3, #1
 80193c6:	429a      	cmp	r2, r3
 80193c8:	bfd8      	it	le
 80193ca:	1a9b      	suble	r3, r3, r2
 80193cc:	6123      	str	r3, [r4, #16]
 80193ce:	bd10      	pop	{r4, pc}
 80193d0:	0802f084 	.word	0x0802f084
 80193d4:	0802f1a6 	.word	0x0802f1a6
 80193d8:	0802f03b 	.word	0x0802f03b

080193dc <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 80193dc:	b570      	push	{r4, r5, r6, lr}
 80193de:	4604      	mov	r4, r0
 80193e0:	6840      	ldr	r0, [r0, #4]
 80193e2:	6803      	ldr	r3, [r0, #0]
 80193e4:	681b      	ldr	r3, [r3, #0]
 80193e6:	4798      	blx	r3
 80193e8:	4605      	mov	r5, r0
 80193ea:	b930      	cbnz	r0, 80193fa <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 80193ec:	7a23      	ldrb	r3, [r4, #8]
 80193ee:	b123      	cbz	r3, 80193fa <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 80193f0:	6860      	ldr	r0, [r4, #4]
 80193f2:	6803      	ldr	r3, [r0, #0]
 80193f4:	695b      	ldr	r3, [r3, #20]
 80193f6:	4798      	blx	r3
 80193f8:	7225      	strb	r5, [r4, #8]
 80193fa:	6860      	ldr	r0, [r4, #4]
 80193fc:	6803      	ldr	r3, [r0, #0]
 80193fe:	681b      	ldr	r3, [r3, #0]
 8019400:	4798      	blx	r3
 8019402:	b928      	cbnz	r0, 8019410 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 8019404:	6823      	ldr	r3, [r4, #0]
 8019406:	4620      	mov	r0, r4
 8019408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801940a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801940e:	4718      	bx	r3
 8019410:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019414:	f7e7 bdde 	b.w	8000fd4 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>

08019418 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 8019418:	b510      	push	{r4, lr}
 801941a:	6082      	str	r2, [r0, #8]
 801941c:	2200      	movs	r2, #0
 801941e:	4c03      	ldr	r4, [pc, #12]	; (801942c <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 8019420:	e9c0 2203 	strd	r2, r2, [r0, #12]
 8019424:	e9c0 4100 	strd	r4, r1, [r0]
 8019428:	bd10      	pop	{r4, pc}
 801942a:	bf00      	nop
 801942c:	0802f10c 	.word	0x0802f10c

08019430 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 8019430:	6840      	ldr	r0, [r0, #4]
 8019432:	6803      	ldr	r3, [r0, #0]
 8019434:	681b      	ldr	r3, [r3, #0]
 8019436:	4718      	bx	r3

08019438 <_ZN8touchgfx21AbstractPainterRGB88810renderInitEv>:
 8019438:	2001      	movs	r0, #1
 801943a:	4770      	bx	lr

0801943c <_ZN8touchgfx21AbstractPainterRGB88810renderNextERhS1_S1_S1_>:
 801943c:	2000      	movs	r0, #0
 801943e:	4770      	bx	lr

08019440 <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh>:
 8019440:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019444:	460d      	mov	r5, r1
 8019446:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 801944a:	b085      	sub	sp, #20
 801944c:	4690      	mov	r8, r2
 801944e:	4411      	add	r1, r2
 8019450:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 8019454:	4699      	mov	r9, r3
 8019456:	6803      	ldr	r3, [r0, #0]
 8019458:	60c1      	str	r1, [r0, #12]
 801945a:	4604      	mov	r4, r0
 801945c:	990c      	ldr	r1, [sp, #48]	; 0x30
 801945e:	440a      	add	r2, r1
 8019460:	6102      	str	r2, [r0, #16]
 8019462:	68db      	ldr	r3, [r3, #12]
 8019464:	e9dd 670d 	ldrd	r6, r7, [sp, #52]	; 0x34
 8019468:	4798      	blx	r3
 801946a:	2800      	cmp	r0, #0
 801946c:	d03a      	beq.n	80194e4 <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh+0xa4>
 801946e:	44c8      	add	r8, r9
 8019470:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8019474:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8019478:	4445      	add	r5, r8
 801947a:	442e      	add	r6, r5
 801947c:	6823      	ldr	r3, [r4, #0]
 801947e:	f10d 020f 	add.w	r2, sp, #15
 8019482:	a903      	add	r1, sp, #12
 8019484:	4620      	mov	r0, r4
 8019486:	9200      	str	r2, [sp, #0]
 8019488:	f10d 020d 	add.w	r2, sp, #13
 801948c:	f8d3 8010 	ldr.w	r8, [r3, #16]
 8019490:	f10d 030e 	add.w	r3, sp, #14
 8019494:	47c0      	blx	r8
 8019496:	b1f0      	cbz	r0, 80194d6 <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh+0x96>
 8019498:	f89d 300f 	ldrb.w	r3, [sp, #15]
 801949c:	7a20      	ldrb	r0, [r4, #8]
 801949e:	f89d 200c 	ldrb.w	r2, [sp, #12]
 80194a2:	4358      	muls	r0, r3
 80194a4:	f89d 100e 	ldrb.w	r1, [sp, #14]
 80194a8:	1c43      	adds	r3, r0, #1
 80194aa:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 80194ae:	7838      	ldrb	r0, [r7, #0]
 80194b0:	121b      	asrs	r3, r3, #8
 80194b2:	fb10 f003 	smulbb	r0, r0, r3
 80194b6:	b283      	uxth	r3, r0
 80194b8:	1c58      	adds	r0, r3, #1
 80194ba:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 80194be:	6823      	ldr	r3, [r4, #0]
 80194c0:	1200      	asrs	r0, r0, #8
 80194c2:	f8d3 8014 	ldr.w	r8, [r3, #20]
 80194c6:	f89d 300d 	ldrb.w	r3, [sp, #13]
 80194ca:	28ff      	cmp	r0, #255	; 0xff
 80194cc:	d10d      	bne.n	80194ea <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh+0xaa>
 80194ce:	9100      	str	r1, [sp, #0]
 80194d0:	4629      	mov	r1, r5
 80194d2:	4620      	mov	r0, r4
 80194d4:	47c0      	blx	r8
 80194d6:	68e3      	ldr	r3, [r4, #12]
 80194d8:	3503      	adds	r5, #3
 80194da:	3701      	adds	r7, #1
 80194dc:	3301      	adds	r3, #1
 80194de:	42ae      	cmp	r6, r5
 80194e0:	60e3      	str	r3, [r4, #12]
 80194e2:	d8cb      	bhi.n	801947c <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh+0x3c>
 80194e4:	b005      	add	sp, #20
 80194e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80194ea:	fa1f fc80 	uxth.w	ip, r0
 80194ee:	43c0      	mvns	r0, r0
 80194f0:	f895 e002 	ldrb.w	lr, [r5, #2]
 80194f4:	fb12 f20c 	smulbb	r2, r2, ip
 80194f8:	b2c0      	uxtb	r0, r0
 80194fa:	fb13 f30c 	smulbb	r3, r3, ip
 80194fe:	fb0e 2200 	mla	r2, lr, r0, r2
 8019502:	f895 e001 	ldrb.w	lr, [r5, #1]
 8019506:	fb11 f10c 	smulbb	r1, r1, ip
 801950a:	fb0e 3300 	mla	r3, lr, r0, r3
 801950e:	f895 e000 	ldrb.w	lr, [r5]
 8019512:	b292      	uxth	r2, r2
 8019514:	b29b      	uxth	r3, r3
 8019516:	fb0e 1000 	mla	r0, lr, r0, r1
 801951a:	1c59      	adds	r1, r3, #1
 801951c:	b280      	uxth	r0, r0
 801951e:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8019522:	1c51      	adds	r1, r2, #1
 8019524:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8019528:	1c41      	adds	r1, r0, #1
 801952a:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801952e:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 8019532:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8019536:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801953a:	9000      	str	r0, [sp, #0]
 801953c:	e7c8      	b.n	80194d0 <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh+0x90>

0801953e <_ZN8touchgfx21AbstractPainterRGB88811renderPixelEPthhh>:
 801953e:	f89d 0000 	ldrb.w	r0, [sp]
 8019542:	704b      	strb	r3, [r1, #1]
 8019544:	7008      	strb	r0, [r1, #0]
 8019546:	708a      	strb	r2, [r1, #2]
 8019548:	4770      	bx	lr

0801954a <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>:
 801954a:	b507      	push	{r0, r1, r2, lr}
 801954c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8019550:	ab01      	add	r3, sp, #4
 8019552:	6809      	ldr	r1, [r1, #0]
 8019554:	6800      	ldr	r0, [r0, #0]
 8019556:	f006 fb47 	bl	801fbe8 <_ZN8touchgfx6muldivElllRl>
 801955a:	b003      	add	sp, #12
 801955c:	f85d fb04 	ldr.w	pc, [sp], #4

08019560 <_ZN8touchgfx7CWRUtil4sineEi>:
 8019560:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8019564:	fb90 f3f2 	sdiv	r3, r0, r2
 8019568:	fb03 0312 	mls	r3, r3, r2, r0
 801956c:	4413      	add	r3, r2
 801956e:	fb93 f0f2 	sdiv	r0, r3, r2
 8019572:	fb02 3010 	mls	r0, r2, r0, r3
 8019576:	4b0a      	ldr	r3, [pc, #40]	; (80195a0 <_ZN8touchgfx7CWRUtil4sineEi+0x40>)
 8019578:	285a      	cmp	r0, #90	; 0x5a
 801957a:	dc02      	bgt.n	8019582 <_ZN8touchgfx7CWRUtil4sineEi+0x22>
 801957c:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 8019580:	4770      	bx	lr
 8019582:	28b4      	cmp	r0, #180	; 0xb4
 8019584:	dc02      	bgt.n	801958c <_ZN8touchgfx7CWRUtil4sineEi+0x2c>
 8019586:	f1c0 00b4 	rsb	r0, r0, #180	; 0xb4
 801958a:	e7f7      	b.n	801957c <_ZN8touchgfx7CWRUtil4sineEi+0x1c>
 801958c:	f5b0 7f87 	cmp.w	r0, #270	; 0x10e
 8019590:	bfd4      	ite	le
 8019592:	38b4      	suble	r0, #180	; 0xb4
 8019594:	f5c0 70b4 	rsbgt	r0, r0, #360	; 0x168
 8019598:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 801959c:	4240      	negs	r0, r0
 801959e:	4770      	bx	lr
 80195a0:	0802f1f8 	.word	0x0802f1f8

080195a4 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>:
 80195a4:	f44f 5234 	mov.w	r2, #11520	; 0x2d00
 80195a8:	fb90 f3f2 	sdiv	r3, r0, r2
 80195ac:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80195ae:	fb03 0012 	mls	r0, r3, r2, r0
 80195b2:	4410      	add	r0, r2
 80195b4:	fb90 f4f2 	sdiv	r4, r0, r2
 80195b8:	fb02 0414 	mls	r4, r2, r4, r0
 80195bc:	f004 061f 	and.w	r6, r4, #31
 80195c0:	1164      	asrs	r4, r4, #5
 80195c2:	4620      	mov	r0, r4
 80195c4:	f7ff ffcc 	bl	8019560 <_ZN8touchgfx7CWRUtil4sineEi>
 80195c8:	4605      	mov	r5, r0
 80195ca:	b90e      	cbnz	r6, 80195d0 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E+0x2c>
 80195cc:	b002      	add	sp, #8
 80195ce:	bd70      	pop	{r4, r5, r6, pc}
 80195d0:	1c60      	adds	r0, r4, #1
 80195d2:	f7ff ffc5 	bl	8019560 <_ZN8touchgfx7CWRUtil4sineEi>
 80195d6:	ab01      	add	r3, sp, #4
 80195d8:	2220      	movs	r2, #32
 80195da:	4631      	mov	r1, r6
 80195dc:	1b40      	subs	r0, r0, r5
 80195de:	f006 fb03 	bl	801fbe8 <_ZN8touchgfx6muldivElllRl>
 80195e2:	4428      	add	r0, r5
 80195e4:	e7f2      	b.n	80195cc <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E+0x28>

080195e6 <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>:
 80195e6:	b508      	push	{r3, lr}
 80195e8:	f5c0 6034 	rsb	r0, r0, #2880	; 0xb40
 80195ec:	f7ff ffda 	bl	80195a4 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 80195f0:	bd08      	pop	{r3, pc}
	...

080195f4 <_ZN8touchgfx6CircleC1Ev>:
 80195f4:	b510      	push	{r4, lr}
 80195f6:	4604      	mov	r4, r0
 80195f8:	f000 fd7c 	bl	801a0f4 <_ZN8touchgfx12CanvasWidgetC1Ev>
 80195fc:	4b08      	ldr	r3, [pc, #32]	; (8019620 <_ZN8touchgfx6CircleC1Ev+0x2c>)
 80195fe:	f44f 5234 	mov.w	r2, #11520	; 0x2d00
 8019602:	4620      	mov	r0, r4
 8019604:	6023      	str	r3, [r4, #0]
 8019606:	2300      	movs	r3, #0
 8019608:	e9c4 2310 	strd	r2, r3, [r4, #64]	; 0x40
 801960c:	f24b 4205 	movw	r2, #46085	; 0xb405
 8019610:	60a3      	str	r3, [r4, #8]
 8019612:	e9c4 330c 	strd	r3, r3, [r4, #48]	; 0x30
 8019616:	e9c4 330e 	strd	r3, r3, [r4, #56]	; 0x38
 801961a:	f8a4 2048 	strh.w	r2, [r4, #72]	; 0x48
 801961e:	bd10      	pop	{r4, pc}
 8019620:	0802f2b8 	.word	0x0802f2b8

08019624 <_ZNK8touchgfx6Circle9moveToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_>:
 8019624:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8019628:	4606      	mov	r6, r0
 801962a:	6810      	ldr	r0, [r2, #0]
 801962c:	4698      	mov	r8, r3
 801962e:	4691      	mov	r9, r2
 8019630:	460f      	mov	r7, r1
 8019632:	f7ff ffb7 	bl	80195a4 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8019636:	a902      	add	r1, sp, #8
 8019638:	2402      	movs	r4, #2
 801963a:	f841 0d08 	str.w	r0, [r1, #-8]!
 801963e:	4640      	mov	r0, r8
 8019640:	f7ff ff83 	bl	801954a <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8019644:	6b35      	ldr	r5, [r6, #48]	; 0x30
 8019646:	fb90 f0f4 	sdiv	r0, r0, r4
 801964a:	4405      	add	r5, r0
 801964c:	f8d9 0000 	ldr.w	r0, [r9]
 8019650:	f7ff ffc9 	bl	80195e6 <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 8019654:	a902      	add	r1, sp, #8
 8019656:	f841 0d04 	str.w	r0, [r1, #-4]!
 801965a:	4640      	mov	r0, r8
 801965c:	f7ff ff75 	bl	801954a <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8019660:	6b72      	ldr	r2, [r6, #52]	; 0x34
 8019662:	4629      	mov	r1, r5
 8019664:	fb90 f0f4 	sdiv	r0, r0, r4
 8019668:	1a12      	subs	r2, r2, r0
 801966a:	4638      	mov	r0, r7
 801966c:	f010 fd2d 	bl	802a0ca <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>
 8019670:	b003      	add	sp, #12
 8019672:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08019676 <_ZNK8touchgfx6Circle11lineToXYAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_S6_S6_>:
 8019676:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 801967a:	9e08      	ldr	r6, [sp, #32]
 801967c:	4698      	mov	r8, r3
 801967e:	4615      	mov	r5, r2
 8019680:	460f      	mov	r7, r1
 8019682:	6830      	ldr	r0, [r6, #0]
 8019684:	2402      	movs	r4, #2
 8019686:	f7ff ff8d 	bl	80195a4 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 801968a:	a902      	add	r1, sp, #8
 801968c:	f841 0d08 	str.w	r0, [r1, #-8]!
 8019690:	9809      	ldr	r0, [sp, #36]	; 0x24
 8019692:	f7ff ff5a 	bl	801954a <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8019696:	682d      	ldr	r5, [r5, #0]
 8019698:	fb90 f0f4 	sdiv	r0, r0, r4
 801969c:	4405      	add	r5, r0
 801969e:	6830      	ldr	r0, [r6, #0]
 80196a0:	f7ff ffa1 	bl	80195e6 <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 80196a4:	a902      	add	r1, sp, #8
 80196a6:	f841 0d04 	str.w	r0, [r1, #-4]!
 80196aa:	9809      	ldr	r0, [sp, #36]	; 0x24
 80196ac:	f7ff ff4d 	bl	801954a <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 80196b0:	f8d8 2000 	ldr.w	r2, [r8]
 80196b4:	4629      	mov	r1, r5
 80196b6:	fb90 f0f4 	sdiv	r0, r0, r4
 80196ba:	1a12      	subs	r2, r2, r0
 80196bc:	4638      	mov	r0, r7
 80196be:	f010 fc93 	bl	8029fe8 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 80196c2:	b002      	add	sp, #8
 80196c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080196c8 <_ZNK8touchgfx6Circle9lineToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_>:
 80196c8:	b513      	push	{r0, r1, r4, lr}
 80196ca:	e9cd 2300 	strd	r2, r3, [sp]
 80196ce:	f100 0334 	add.w	r3, r0, #52	; 0x34
 80196d2:	f100 0230 	add.w	r2, r0, #48	; 0x30
 80196d6:	f7ff ffce 	bl	8019676 <_ZNK8touchgfx6Circle11lineToXYAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_S6_S6_>
 80196da:	b002      	add	sp, #8
 80196dc:	bd10      	pop	{r4, pc}

080196de <_ZNK8touchgfx6Circle14updateMinMaxXYERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>:
 80196de:	b5f0      	push	{r4, r5, r6, r7, lr}
 80196e0:	680e      	ldr	r6, [r1, #0]
 80196e2:	681f      	ldr	r7, [r3, #0]
 80196e4:	9807      	ldr	r0, [sp, #28]
 80196e6:	42be      	cmp	r6, r7
 80196e8:	e9dd 5405 	ldrd	r5, r4, [sp, #20]
 80196ec:	bfb8      	it	lt
 80196ee:	601e      	strlt	r6, [r3, #0]
 80196f0:	680b      	ldr	r3, [r1, #0]
 80196f2:	6829      	ldr	r1, [r5, #0]
 80196f4:	428b      	cmp	r3, r1
 80196f6:	bfc8      	it	gt
 80196f8:	602b      	strgt	r3, [r5, #0]
 80196fa:	6813      	ldr	r3, [r2, #0]
 80196fc:	6821      	ldr	r1, [r4, #0]
 80196fe:	428b      	cmp	r3, r1
 8019700:	bfb8      	it	lt
 8019702:	6023      	strlt	r3, [r4, #0]
 8019704:	6813      	ldr	r3, [r2, #0]
 8019706:	6802      	ldr	r2, [r0, #0]
 8019708:	4293      	cmp	r3, r2
 801970a:	bfc8      	it	gt
 801970c:	6003      	strgt	r3, [r0, #0]
 801970e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08019710 <_ZNK8touchgfx6Circle14updateMinMaxARERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>:
 8019710:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019714:	b089      	sub	sp, #36	; 0x24
 8019716:	4690      	mov	r8, r2
 8019718:	4606      	mov	r6, r0
 801971a:	2402      	movs	r4, #2
 801971c:	ad08      	add	r5, sp, #32
 801971e:	6808      	ldr	r0, [r1, #0]
 8019720:	461f      	mov	r7, r3
 8019722:	4689      	mov	r9, r1
 8019724:	f7ff ff3e 	bl	80195a4 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8019728:	f845 0d04 	str.w	r0, [r5, #-4]!
 801972c:	4640      	mov	r0, r8
 801972e:	4629      	mov	r1, r5
 8019730:	f7ff ff0b 	bl	801954a <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8019734:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8019736:	fb90 f0f4 	sdiv	r0, r0, r4
 801973a:	4418      	add	r0, r3
 801973c:	9005      	str	r0, [sp, #20]
 801973e:	f8d9 0000 	ldr.w	r0, [r9]
 8019742:	f7ff ff50 	bl	80195e6 <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 8019746:	4629      	mov	r1, r5
 8019748:	9007      	str	r0, [sp, #28]
 801974a:	4640      	mov	r0, r8
 801974c:	f7ff fefd 	bl	801954a <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8019750:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8019752:	aa08      	add	r2, sp, #32
 8019754:	a905      	add	r1, sp, #20
 8019756:	fb90 f0f4 	sdiv	r0, r0, r4
 801975a:	6b74      	ldr	r4, [r6, #52]	; 0x34
 801975c:	1a24      	subs	r4, r4, r0
 801975e:	4630      	mov	r0, r6
 8019760:	f842 4d08 	str.w	r4, [r2, #-8]!
 8019764:	9302      	str	r3, [sp, #8]
 8019766:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8019768:	9301      	str	r3, [sp, #4]
 801976a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801976c:	9300      	str	r3, [sp, #0]
 801976e:	463b      	mov	r3, r7
 8019770:	f7ff ffb5 	bl	80196de <_ZNK8touchgfx6Circle14updateMinMaxXYERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>
 8019774:	b009      	add	sp, #36	; 0x24
 8019776:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0801977a <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_>:
 801977a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801977e:	4291      	cmp	r1, r2
 8019780:	b08d      	sub	sp, #52	; 0x34
 8019782:	461e      	mov	r6, r3
 8019784:	4604      	mov	r4, r0
 8019786:	f8dd 9060 	ldr.w	r9, [sp, #96]	; 0x60
 801978a:	ad0c      	add	r5, sp, #48	; 0x30
 801978c:	f10d 0a30 	add.w	sl, sp, #48	; 0x30
 8019790:	e9cd 2106 	strd	r2, r1, [sp, #24]
 8019794:	bfc8      	it	gt
 8019796:	e9cd 1206 	strdgt	r1, r2, [sp, #24]
 801979a:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 801979e:	e9dd 7816 	ldrd	r7, r8, [sp, #88]	; 0x58
 80197a2:	1a9b      	subs	r3, r3, r2
 80197a4:	a907      	add	r1, sp, #28
 80197a6:	f5b3 5f34 	cmp.w	r3, #11520	; 0x2d00
 80197aa:	bfa2      	ittt	ge
 80197ac:	f44f 5334 	movge.w	r3, #11520	; 0x2d00
 80197b0:	2200      	movge	r2, #0
 80197b2:	e9cd 3206 	strdge	r3, r2, [sp, #24]
 80197b6:	6b82      	ldr	r2, [r0, #56]	; 0x38
 80197b8:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80197ba:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 80197be:	f845 3d04 	str.w	r3, [r5, #-4]!
 80197c2:	4633      	mov	r3, r6
 80197c4:	462a      	mov	r2, r5
 80197c6:	9700      	str	r7, [sp, #0]
 80197c8:	e9cd 8901 	strd	r8, r9, [sp, #4]
 80197cc:	f7ff ffa0 	bl	8019710 <_ZNK8touchgfx6Circle14updateMinMaxARERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>
 80197d0:	9b07      	ldr	r3, [sp, #28]
 80197d2:	f44f 6034 	mov.w	r0, #2880	; 0xb40
 80197d6:	f103 0120 	add.w	r1, r3, #32
 80197da:	fb91 f3f0 	sdiv	r3, r1, r0
 80197de:	fb00 1313 	mls	r3, r0, r3, r1
 80197e2:	1ac3      	subs	r3, r0, r3
 80197e4:	fb93 f2f0 	sdiv	r2, r3, r0
 80197e8:	fb00 3312 	mls	r3, r0, r2, r3
 80197ec:	440b      	add	r3, r1
 80197ee:	f84a 3d0c 	str.w	r3, [sl, #-12]!
 80197f2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80197f4:	9906      	ldr	r1, [sp, #24]
 80197f6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80197f8:	4291      	cmp	r1, r2
 80197fa:	db11      	blt.n	8019820 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0xa6>
 80197fc:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80197fe:	4651      	mov	r1, sl
 8019800:	9700      	str	r7, [sp, #0]
 8019802:	4620      	mov	r0, r4
 8019804:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8019808:	462a      	mov	r2, r5
 801980a:	930b      	str	r3, [sp, #44]	; 0x2c
 801980c:	4633      	mov	r3, r6
 801980e:	e9cd 8901 	strd	r8, r9, [sp, #4]
 8019812:	f7ff ff7d 	bl	8019710 <_ZNK8touchgfx6Circle14updateMinMaxARERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>
 8019816:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019818:	f503 6334 	add.w	r3, r3, #2880	; 0xb40
 801981c:	9309      	str	r3, [sp, #36]	; 0x24
 801981e:	e7e8      	b.n	80197f2 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x78>
 8019820:	f5a2 6234 	sub.w	r2, r2, #2880	; 0xb40
 8019824:	4291      	cmp	r1, r2
 8019826:	dd0c      	ble.n	8019842 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0xc8>
 8019828:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 801982a:	a906      	add	r1, sp, #24
 801982c:	9700      	str	r7, [sp, #0]
 801982e:	4620      	mov	r0, r4
 8019830:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8019834:	462a      	mov	r2, r5
 8019836:	930b      	str	r3, [sp, #44]	; 0x2c
 8019838:	4633      	mov	r3, r6
 801983a:	e9cd 8901 	strd	r8, r9, [sp, #4]
 801983e:	f7ff ff67 	bl	8019710 <_ZNK8touchgfx6Circle14updateMinMaxARERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>
 8019842:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8019844:	2b00      	cmp	r3, #0
 8019846:	f040 8097 	bne.w	8019978 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x1fe>
 801984a:	e9dd 2106 	ldrd	r2, r1, [sp, #24]
 801984e:	1a52      	subs	r2, r2, r1
 8019850:	f5b2 5f34 	cmp.w	r2, #11520	; 0x2d00
 8019854:	da0a      	bge.n	801986c <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0xf2>
 8019856:	462a      	mov	r2, r5
 8019858:	a90a      	add	r1, sp, #40	; 0x28
 801985a:	9700      	str	r7, [sp, #0]
 801985c:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
 8019860:	4633      	mov	r3, r6
 8019862:	e9cd 8901 	strd	r8, r9, [sp, #4]
 8019866:	4620      	mov	r0, r4
 8019868:	f7ff ff52 	bl	8019710 <_ZNK8touchgfx6Circle14updateMinMaxARERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>
 801986c:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
 8019870:	2bb3      	cmp	r3, #179	; 0xb3
 8019872:	d87e      	bhi.n	8019972 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x1f8>
 8019874:	e9dd 3006 	ldrd	r3, r0, [sp, #24]
 8019878:	1a1b      	subs	r3, r3, r0
 801987a:	f5b3 5f34 	cmp.w	r3, #11520	; 0x2d00
 801987e:	da78      	bge.n	8019972 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x1f8>
 8019880:	ad0c      	add	r5, sp, #48	; 0x30
 8019882:	f104 0b38 	add.w	fp, r4, #56	; 0x38
 8019886:	f7ff fe8d 	bl	80195a4 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 801988a:	f04f 0a02 	mov.w	sl, #2
 801988e:	f845 0d04 	str.w	r0, [r5, #-4]!
 8019892:	4658      	mov	r0, fp
 8019894:	4629      	mov	r1, r5
 8019896:	f7ff fe58 	bl	801954a <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 801989a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801989c:	18c3      	adds	r3, r0, r3
 801989e:	9807      	ldr	r0, [sp, #28]
 80198a0:	9305      	str	r3, [sp, #20]
 80198a2:	f7ff fea0 	bl	80195e6 <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 80198a6:	4629      	mov	r1, r5
 80198a8:	900b      	str	r0, [sp, #44]	; 0x2c
 80198aa:	4658      	mov	r0, fp
 80198ac:	f7ff fe4d 	bl	801954a <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 80198b0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80198b2:	9a05      	ldr	r2, [sp, #20]
 80198b4:	a90a      	add	r1, sp, #40	; 0x28
 80198b6:	1a1b      	subs	r3, r3, r0
 80198b8:	9700      	str	r7, [sp, #0]
 80198ba:	4620      	mov	r0, r4
 80198bc:	9304      	str	r3, [sp, #16]
 80198be:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80198c0:	fb93 f3fa 	sdiv	r3, r3, sl
 80198c4:	1ad2      	subs	r2, r2, r3
 80198c6:	920a      	str	r2, [sp, #40]	; 0x28
 80198c8:	9a04      	ldr	r2, [sp, #16]
 80198ca:	1ad3      	subs	r3, r2, r3
 80198cc:	462a      	mov	r2, r5
 80198ce:	930b      	str	r3, [sp, #44]	; 0x2c
 80198d0:	4633      	mov	r3, r6
 80198d2:	e9cd 8901 	strd	r8, r9, [sp, #4]
 80198d6:	f7ff ff02 	bl	80196de <_ZNK8touchgfx6Circle14updateMinMaxXYERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>
 80198da:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80198dc:	9a05      	ldr	r2, [sp, #20]
 80198de:	a90a      	add	r1, sp, #40	; 0x28
 80198e0:	4620      	mov	r0, r4
 80198e2:	9700      	str	r7, [sp, #0]
 80198e4:	fb93 f3fa 	sdiv	r3, r3, sl
 80198e8:	189a      	adds	r2, r3, r2
 80198ea:	920a      	str	r2, [sp, #40]	; 0x28
 80198ec:	9a04      	ldr	r2, [sp, #16]
 80198ee:	4413      	add	r3, r2
 80198f0:	462a      	mov	r2, r5
 80198f2:	930b      	str	r3, [sp, #44]	; 0x2c
 80198f4:	4633      	mov	r3, r6
 80198f6:	e9cd 8901 	strd	r8, r9, [sp, #4]
 80198fa:	f7ff fef0 	bl	80196de <_ZNK8touchgfx6Circle14updateMinMaxXYERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>
 80198fe:	9806      	ldr	r0, [sp, #24]
 8019900:	f7ff fe50 	bl	80195a4 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8019904:	4629      	mov	r1, r5
 8019906:	900b      	str	r0, [sp, #44]	; 0x2c
 8019908:	4658      	mov	r0, fp
 801990a:	f7ff fe1e 	bl	801954a <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 801990e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8019910:	18c3      	adds	r3, r0, r3
 8019912:	9806      	ldr	r0, [sp, #24]
 8019914:	9304      	str	r3, [sp, #16]
 8019916:	f7ff fe66 	bl	80195e6 <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 801991a:	4629      	mov	r1, r5
 801991c:	900b      	str	r0, [sp, #44]	; 0x2c
 801991e:	4658      	mov	r0, fp
 8019920:	f7ff fe13 	bl	801954a <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8019924:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8019926:	9a04      	ldr	r2, [sp, #16]
 8019928:	a90a      	add	r1, sp, #40	; 0x28
 801992a:	eba3 0b00 	sub.w	fp, r3, r0
 801992e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8019930:	4620      	mov	r0, r4
 8019932:	9700      	str	r7, [sp, #0]
 8019934:	fb93 f3fa 	sdiv	r3, r3, sl
 8019938:	1ad2      	subs	r2, r2, r3
 801993a:	ebab 0303 	sub.w	r3, fp, r3
 801993e:	920a      	str	r2, [sp, #40]	; 0x28
 8019940:	462a      	mov	r2, r5
 8019942:	930b      	str	r3, [sp, #44]	; 0x2c
 8019944:	4633      	mov	r3, r6
 8019946:	e9cd 8901 	strd	r8, r9, [sp, #4]
 801994a:	f7ff fec8 	bl	80196de <_ZNK8touchgfx6Circle14updateMinMaxXYERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>
 801994e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8019950:	9700      	str	r7, [sp, #0]
 8019952:	462a      	mov	r2, r5
 8019954:	a90a      	add	r1, sp, #40	; 0x28
 8019956:	4620      	mov	r0, r4
 8019958:	fb93 fafa 	sdiv	sl, r3, sl
 801995c:	9b04      	ldr	r3, [sp, #16]
 801995e:	4453      	add	r3, sl
 8019960:	930a      	str	r3, [sp, #40]	; 0x28
 8019962:	eb0a 030b 	add.w	r3, sl, fp
 8019966:	e9cd 8901 	strd	r8, r9, [sp, #4]
 801996a:	930b      	str	r3, [sp, #44]	; 0x2c
 801996c:	4633      	mov	r3, r6
 801996e:	f7ff feb6 	bl	80196de <_ZNK8touchgfx6Circle14updateMinMaxXYERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>
 8019972:	b00d      	add	sp, #52	; 0x34
 8019974:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019978:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 801997a:	a907      	add	r1, sp, #28
 801997c:	9700      	str	r7, [sp, #0]
 801997e:	4620      	mov	r0, r4
 8019980:	ebc3 0342 	rsb	r3, r3, r2, lsl #1
 8019984:	462a      	mov	r2, r5
 8019986:	930b      	str	r3, [sp, #44]	; 0x2c
 8019988:	4633      	mov	r3, r6
 801998a:	e9cd 8901 	strd	r8, r9, [sp, #4]
 801998e:	f7ff febf 	bl	8019710 <_ZNK8touchgfx6Circle14updateMinMaxARERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>
 8019992:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8019994:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8019996:	a906      	add	r1, sp, #24
 8019998:	9700      	str	r7, [sp, #0]
 801999a:	ebc3 0342 	rsb	r3, r3, r2, lsl #1
 801999e:	462a      	mov	r2, r5
 80199a0:	930b      	str	r3, [sp, #44]	; 0x2c
 80199a2:	4633      	mov	r3, r6
 80199a4:	e9cd 8901 	strd	r8, r9, [sp, #4]
 80199a8:	e75d      	b.n	8019866 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0xec>

080199aa <_ZNK8touchgfx6Circle14getMinimalRectENS_7CWRUtil2Q5ES2_>:
 80199aa:	b530      	push	{r4, r5, lr}
 80199ac:	4604      	mov	r4, r0
 80199ae:	4608      	mov	r0, r1
 80199b0:	4611      	mov	r1, r2
 80199b2:	461a      	mov	r2, r3
 80199b4:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 80199b8:	b089      	sub	sp, #36	; 0x24
 80199ba:	2500      	movs	r5, #0
 80199bc:	015b      	lsls	r3, r3, #5
 80199be:	9505      	str	r5, [sp, #20]
 80199c0:	9304      	str	r3, [sp, #16]
 80199c2:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 80199c6:	015b      	lsls	r3, r3, #5
 80199c8:	e9cd 3506 	strd	r3, r5, [sp, #24]
 80199cc:	ab07      	add	r3, sp, #28
 80199ce:	2520      	movs	r5, #32
 80199d0:	9302      	str	r3, [sp, #8]
 80199d2:	ab06      	add	r3, sp, #24
 80199d4:	9301      	str	r3, [sp, #4]
 80199d6:	ab05      	add	r3, sp, #20
 80199d8:	9300      	str	r3, [sp, #0]
 80199da:	ab04      	add	r3, sp, #16
 80199dc:	f7ff fecd 	bl	801977a <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_>
 80199e0:	9a04      	ldr	r2, [sp, #16]
 80199e2:	9805      	ldr	r0, [sp, #20]
 80199e4:	9b06      	ldr	r3, [sp, #24]
 80199e6:	9907      	ldr	r1, [sp, #28]
 80199e8:	fb92 f2f5 	sdiv	r2, r2, r5
 80199ec:	fb90 f0f5 	sdiv	r0, r0, r5
 80199f0:	fb93 f3f5 	sdiv	r3, r3, r5
 80199f4:	fb91 f1f5 	sdiv	r1, r1, r5
 80199f8:	b292      	uxth	r2, r2
 80199fa:	3002      	adds	r0, #2
 80199fc:	b29b      	uxth	r3, r3
 80199fe:	3102      	adds	r1, #2
 8019a00:	1a80      	subs	r0, r0, r2
 8019a02:	3a01      	subs	r2, #1
 8019a04:	1ac9      	subs	r1, r1, r3
 8019a06:	3b01      	subs	r3, #1
 8019a08:	80a0      	strh	r0, [r4, #4]
 8019a0a:	4620      	mov	r0, r4
 8019a0c:	8022      	strh	r2, [r4, #0]
 8019a0e:	8063      	strh	r3, [r4, #2]
 8019a10:	80e1      	strh	r1, [r4, #6]
 8019a12:	b009      	add	sp, #36	; 0x24
 8019a14:	bd30      	pop	{r4, r5, pc}

08019a16 <_ZNK8touchgfx6Circle14getMinimalRectEv>:
 8019a16:	b510      	push	{r4, lr}
 8019a18:	4604      	mov	r4, r0
 8019a1a:	e9d1 230f 	ldrd	r2, r3, [r1, #60]	; 0x3c
 8019a1e:	f7ff ffc4 	bl	80199aa <_ZNK8touchgfx6Circle14getMinimalRectENS_7CWRUtil2Q5ES2_>
 8019a22:	4620      	mov	r0, r4
 8019a24:	bd10      	pop	{r4, pc}

08019a26 <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E>:
 8019a26:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019a28:	e9d1 540f 	ldrd	r5, r4, [r1, #60]	; 0x3c
 8019a2c:	4606      	mov	r6, r0
 8019a2e:	f891 0048 	ldrb.w	r0, [r1, #72]	; 0x48
 8019a32:	42a5      	cmp	r5, r4
 8019a34:	6813      	ldr	r3, [r2, #0]
 8019a36:	ea4f 1040 	mov.w	r0, r0, lsl #5
 8019a3a:	da2b      	bge.n	8019a94 <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E+0x6e>
 8019a3c:	42a3      	cmp	r3, r4
 8019a3e:	dd14      	ble.n	8019a6a <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E+0x44>
 8019a40:	b168      	cbz	r0, 8019a5e <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E+0x38>
 8019a42:	4267      	negs	r7, r4
 8019a44:	fb97 f2f0 	sdiv	r2, r7, r0
 8019a48:	fb00 7212 	mls	r2, r0, r2, r7
 8019a4c:	1a82      	subs	r2, r0, r2
 8019a4e:	fb92 f7f0 	sdiv	r7, r2, r0
 8019a52:	fb00 2017 	mls	r0, r0, r7, r2
 8019a56:	1a24      	subs	r4, r4, r0
 8019a58:	42ac      	cmp	r4, r5
 8019a5a:	bfb8      	it	lt
 8019a5c:	462c      	movlt	r4, r5
 8019a5e:	4630      	mov	r0, r6
 8019a60:	4622      	mov	r2, r4
 8019a62:	f7ff ffa2 	bl	80199aa <_ZNK8touchgfx6Circle14getMinimalRectENS_7CWRUtil2Q5ES2_>
 8019a66:	4630      	mov	r0, r6
 8019a68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019a6a:	42ab      	cmp	r3, r5
 8019a6c:	dd0e      	ble.n	8019a8c <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E+0x66>
 8019a6e:	b168      	cbz	r0, 8019a8c <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E+0x66>
 8019a70:	425f      	negs	r7, r3
 8019a72:	fb97 f2f0 	sdiv	r2, r7, r0
 8019a76:	fb00 7212 	mls	r2, r0, r2, r7
 8019a7a:	1a82      	subs	r2, r0, r2
 8019a7c:	fb92 f7f0 	sdiv	r7, r2, r0
 8019a80:	fb00 2017 	mls	r0, r0, r7, r2
 8019a84:	1a1b      	subs	r3, r3, r0
 8019a86:	42ab      	cmp	r3, r5
 8019a88:	bfb8      	it	lt
 8019a8a:	462b      	movlt	r3, r5
 8019a8c:	4622      	mov	r2, r4
 8019a8e:	461c      	mov	r4, r3
 8019a90:	4613      	mov	r3, r2
 8019a92:	e7e4      	b.n	8019a5e <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E+0x38>
 8019a94:	42a3      	cmp	r3, r4
 8019a96:	da10      	bge.n	8019aba <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E+0x94>
 8019a98:	b148      	cbz	r0, 8019aae <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E+0x88>
 8019a9a:	fb94 f2f0 	sdiv	r2, r4, r0
 8019a9e:	fb00 4212 	mls	r2, r0, r2, r4
 8019aa2:	1a82      	subs	r2, r0, r2
 8019aa4:	fb92 f7f0 	sdiv	r7, r2, r0
 8019aa8:	fb00 2017 	mls	r0, r0, r7, r2
 8019aac:	4404      	add	r4, r0
 8019aae:	42a5      	cmp	r5, r4
 8019ab0:	bfa8      	it	ge
 8019ab2:	4625      	movge	r5, r4
 8019ab4:	461c      	mov	r4, r3
 8019ab6:	462b      	mov	r3, r5
 8019ab8:	e7d1      	b.n	8019a5e <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E+0x38>
 8019aba:	42ab      	cmp	r3, r5
 8019abc:	dacf      	bge.n	8019a5e <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E+0x38>
 8019abe:	2800      	cmp	r0, #0
 8019ac0:	d0cd      	beq.n	8019a5e <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E+0x38>
 8019ac2:	fb93 f2f0 	sdiv	r2, r3, r0
 8019ac6:	fb00 3212 	mls	r2, r0, r2, r3
 8019aca:	1a82      	subs	r2, r0, r2
 8019acc:	fb92 f7f0 	sdiv	r7, r2, r0
 8019ad0:	fb00 2017 	mls	r0, r0, r7, r2
 8019ad4:	4403      	add	r3, r0
 8019ad6:	42ab      	cmp	r3, r5
 8019ad8:	bfa8      	it	ge
 8019ada:	462b      	movge	r3, r5
 8019adc:	e7bf      	b.n	8019a5e <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E+0x38>

08019ade <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE>:
 8019ade:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019ae2:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8019ae4:	b0ba      	sub	sp, #232	; 0xe8
 8019ae6:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8019ae8:	4604      	mov	r4, r0
 8019aea:	9303      	str	r3, [sp, #12]
 8019aec:	460f      	mov	r7, r1
 8019aee:	429a      	cmp	r2, r3
 8019af0:	9204      	str	r2, [sp, #16]
 8019af2:	ae0a      	add	r6, sp, #40	; 0x28
 8019af4:	bfb8      	it	lt
 8019af6:	e9cd 2303 	strdlt	r2, r3, [sp, #12]
 8019afa:	e9dd 2303 	ldrd	r2, r3, [sp, #12]
 8019afe:	1a9b      	subs	r3, r3, r2
 8019b00:	f5b3 5f34 	cmp.w	r3, #11520	; 0x2d00
 8019b04:	bfa2      	ittt	ge
 8019b06:	2200      	movge	r2, #0
 8019b08:	f44f 5334 	movge.w	r3, #11520	; 0x2d00
 8019b0c:	e9cd 2303 	strdge	r2, r3, [sp, #12]
 8019b10:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8019b12:	2a00      	cmp	r2, #0
 8019b14:	d131      	bne.n	8019b7a <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x9c>
 8019b16:	463a      	mov	r2, r7
 8019b18:	4621      	mov	r1, r4
 8019b1a:	a80b      	add	r0, sp, #44	; 0x2c
 8019b1c:	f010 f90a 	bl	8029d34 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE>
 8019b20:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8019b22:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8019b24:	9205      	str	r2, [sp, #20]
 8019b26:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 8019b2a:	9306      	str	r3, [sp, #24]
 8019b2c:	dc6f      	bgt.n	8019c0e <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x130>
 8019b2e:	9b03      	ldr	r3, [sp, #12]
 8019b30:	a90b      	add	r1, sp, #44	; 0x2c
 8019b32:	f894 5048 	ldrb.w	r5, [r4, #72]	; 0x48
 8019b36:	4620      	mov	r0, r4
 8019b38:	9307      	str	r3, [sp, #28]
 8019b3a:	016d      	lsls	r5, r5, #5
 8019b3c:	e9dd 2305 	ldrd	r2, r3, [sp, #20]
 8019b40:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8019b44:	aa07      	add	r2, sp, #28
 8019b46:	930a      	str	r3, [sp, #40]	; 0x28
 8019b48:	4633      	mov	r3, r6
 8019b4a:	f7ff fd6b 	bl	8019624 <_ZNK8touchgfx6Circle9moveToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_>
 8019b4e:	9f07      	ldr	r7, [sp, #28]
 8019b50:	2d00      	cmp	r5, #0
 8019b52:	d165      	bne.n	8019c20 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x142>
 8019b54:	3720      	adds	r7, #32
 8019b56:	4639      	mov	r1, r7
 8019b58:	9a04      	ldr	r2, [sp, #16]
 8019b5a:	9b06      	ldr	r3, [sp, #24]
 8019b5c:	442f      	add	r7, r5
 8019b5e:	4291      	cmp	r1, r2
 8019b60:	dc6b      	bgt.n	8019c3a <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x15c>
 8019b62:	9a05      	ldr	r2, [sp, #20]
 8019b64:	4620      	mov	r0, r4
 8019b66:	9107      	str	r1, [sp, #28]
 8019b68:	a90b      	add	r1, sp, #44	; 0x2c
 8019b6a:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8019b6e:	aa07      	add	r2, sp, #28
 8019b70:	930a      	str	r3, [sp, #40]	; 0x28
 8019b72:	4633      	mov	r3, r6
 8019b74:	f7ff fda8 	bl	80196c8 <_ZNK8touchgfx6Circle9lineToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_>
 8019b78:	e7ed      	b.n	8019b56 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x78>
 8019b7a:	f9b1 c000 	ldrsh.w	ip, [r1]
 8019b7e:	88bd      	ldrh	r5, [r7, #4]
 8019b80:	f9b1 0002 	ldrsh.w	r0, [r1, #2]
 8019b84:	4465      	add	r5, ip
 8019b86:	e9d4 310c 	ldrd	r3, r1, [r4, #48]	; 0x30
 8019b8a:	b22d      	sxth	r5, r5
 8019b8c:	eba3 1545 	sub.w	r5, r3, r5, lsl #5
 8019b90:	eba3 134c 	sub.w	r3, r3, ip, lsl #5
 8019b94:	2d00      	cmp	r5, #0
 8019b96:	bfb8      	it	lt
 8019b98:	426d      	neglt	r5, r5
 8019b9a:	2b00      	cmp	r3, #0
 8019b9c:	bfb8      	it	lt
 8019b9e:	425b      	neglt	r3, r3
 8019ba0:	429d      	cmp	r5, r3
 8019ba2:	bfb8      	it	lt
 8019ba4:	461d      	movlt	r5, r3
 8019ba6:	88fb      	ldrh	r3, [r7, #6]
 8019ba8:	4403      	add	r3, r0
 8019baa:	116d      	asrs	r5, r5, #5
 8019bac:	b21b      	sxth	r3, r3
 8019bae:	3501      	adds	r5, #1
 8019bb0:	eba1 1343 	sub.w	r3, r1, r3, lsl #5
 8019bb4:	eba1 1140 	sub.w	r1, r1, r0, lsl #5
 8019bb8:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 8019bbc:	2b00      	cmp	r3, #0
 8019bbe:	f100 0001 	add.w	r0, r0, #1
 8019bc2:	bfb8      	it	lt
 8019bc4:	425b      	neglt	r3, r3
 8019bc6:	2900      	cmp	r1, #0
 8019bc8:	ea4f 0060 	mov.w	r0, r0, asr #1
 8019bcc:	bfb8      	it	lt
 8019bce:	4249      	neglt	r1, r1
 8019bd0:	f1c0 005a 	rsb	r0, r0, #90	; 0x5a
 8019bd4:	428b      	cmp	r3, r1
 8019bd6:	bfb8      	it	lt
 8019bd8:	460b      	movlt	r3, r1
 8019bda:	115b      	asrs	r3, r3, #5
 8019bdc:	3301      	adds	r3, #1
 8019bde:	435b      	muls	r3, r3
 8019be0:	fb05 3505 	mla	r5, r5, r5, r3
 8019be4:	2302      	movs	r3, #2
 8019be6:	fb92 f2f3 	sdiv	r2, r2, r3
 8019bea:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8019bec:	1a9a      	subs	r2, r3, r2
 8019bee:	920a      	str	r2, [sp, #40]	; 0x28
 8019bf0:	f7ff fcb6 	bl	8019560 <_ZN8touchgfx7CWRUtil4sineEi>
 8019bf4:	a90b      	add	r1, sp, #44	; 0x2c
 8019bf6:	900b      	str	r0, [sp, #44]	; 0x2c
 8019bf8:	4630      	mov	r0, r6
 8019bfa:	f7ff fca6 	bl	801954a <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8019bfe:	2320      	movs	r3, #32
 8019c00:	fb90 f0f3 	sdiv	r0, r0, r3
 8019c04:	4340      	muls	r0, r0
 8019c06:	42a8      	cmp	r0, r5
 8019c08:	dd85      	ble.n	8019b16 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x38>
 8019c0a:	2401      	movs	r4, #1
 8019c0c:	e037      	b.n	8019c7e <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x1a0>
 8019c0e:	2102      	movs	r1, #2
 8019c10:	fb93 f3f1 	sdiv	r3, r3, r1
 8019c14:	4413      	add	r3, r2
 8019c16:	9306      	str	r3, [sp, #24]
 8019c18:	fb93 f3f1 	sdiv	r3, r3, r1
 8019c1c:	9305      	str	r3, [sp, #20]
 8019c1e:	e786      	b.n	8019b2e <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x50>
 8019c20:	f107 0320 	add.w	r3, r7, #32
 8019c24:	fb93 f7f5 	sdiv	r7, r3, r5
 8019c28:	fb05 3717 	mls	r7, r5, r7, r3
 8019c2c:	1bea      	subs	r2, r5, r7
 8019c2e:	fb92 f7f5 	sdiv	r7, r2, r5
 8019c32:	fb05 2717 	mls	r7, r5, r7, r2
 8019c36:	441f      	add	r7, r3
 8019c38:	e78d      	b.n	8019b56 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x78>
 8019c3a:	9907      	ldr	r1, [sp, #28]
 8019c3c:	428a      	cmp	r2, r1
 8019c3e:	dd09      	ble.n	8019c54 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x176>
 8019c40:	9a05      	ldr	r2, [sp, #20]
 8019c42:	a90b      	add	r1, sp, #44	; 0x2c
 8019c44:	4620      	mov	r0, r4
 8019c46:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8019c4a:	aa04      	add	r2, sp, #16
 8019c4c:	930a      	str	r3, [sp, #40]	; 0x28
 8019c4e:	4633      	mov	r3, r6
 8019c50:	f7ff fd3a 	bl	80196c8 <_ZNK8touchgfx6Circle9lineToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_>
 8019c54:	9a06      	ldr	r2, [sp, #24]
 8019c56:	e9dd 3003 	ldrd	r3, r0, [sp, #12]
 8019c5a:	1ac3      	subs	r3, r0, r3
 8019c5c:	b99a      	cbnz	r2, 8019c86 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x1a8>
 8019c5e:	f5b3 5f34 	cmp.w	r3, #11520	; 0x2d00
 8019c62:	da04      	bge.n	8019c6e <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x190>
 8019c64:	a80b      	add	r0, sp, #44	; 0x2c
 8019c66:	e9d4 120c 	ldrd	r1, r2, [r4, #48]	; 0x30
 8019c6a:	f010 f9bd 	bl	8029fe8 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8019c6e:	21ff      	movs	r1, #255	; 0xff
 8019c70:	a80b      	add	r0, sp, #44	; 0x2c
 8019c72:	f010 fb2e 	bl	802a2d2 <_ZN8touchgfx6Canvas6renderEh>
 8019c76:	4604      	mov	r4, r0
 8019c78:	a80b      	add	r0, sp, #44	; 0x2c
 8019c7a:	f010 fb69 	bl	802a350 <_ZN8touchgfx6CanvasD1Ev>
 8019c7e:	4620      	mov	r0, r4
 8019c80:	b03a      	add	sp, #232	; 0xe8
 8019c82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019c86:	f894 7049 	ldrb.w	r7, [r4, #73]	; 0x49
 8019c8a:	f5b3 5f34 	cmp.w	r3, #11520	; 0x2d00
 8019c8e:	ea4f 1747 	mov.w	r7, r7, lsl #5
 8019c92:	da2b      	bge.n	8019cec <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x20e>
 8019c94:	f7ff fc86 	bl	80195a4 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8019c98:	4631      	mov	r1, r6
 8019c9a:	900a      	str	r0, [sp, #40]	; 0x28
 8019c9c:	a805      	add	r0, sp, #20
 8019c9e:	f7ff fc54 	bl	801954a <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8019ca2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8019ca4:	f10d 0818 	add.w	r8, sp, #24
 8019ca8:	4418      	add	r0, r3
 8019caa:	9008      	str	r0, [sp, #32]
 8019cac:	9804      	ldr	r0, [sp, #16]
 8019cae:	f7ff fc9a 	bl	80195e6 <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 8019cb2:	4631      	mov	r1, r6
 8019cb4:	900a      	str	r0, [sp, #40]	; 0x28
 8019cb6:	a805      	add	r0, sp, #20
 8019cb8:	f7ff fc47 	bl	801954a <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8019cbc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8019cbe:	1a18      	subs	r0, r3, r0
 8019cc0:	9b04      	ldr	r3, [sp, #16]
 8019cc2:	443b      	add	r3, r7
 8019cc4:	9009      	str	r0, [sp, #36]	; 0x24
 8019cc6:	930a      	str	r3, [sp, #40]	; 0x28
 8019cc8:	9b04      	ldr	r3, [sp, #16]
 8019cca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8019ccc:	f503 53b4 	add.w	r3, r3, #5760	; 0x1680
 8019cd0:	4293      	cmp	r3, r2
 8019cd2:	dd0b      	ble.n	8019cec <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x20e>
 8019cd4:	ab09      	add	r3, sp, #36	; 0x24
 8019cd6:	aa08      	add	r2, sp, #32
 8019cd8:	a90b      	add	r1, sp, #44	; 0x2c
 8019cda:	4620      	mov	r0, r4
 8019cdc:	e9cd 6800 	strd	r6, r8, [sp]
 8019ce0:	f7ff fcc9 	bl	8019676 <_ZNK8touchgfx6Circle11lineToXYAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_S6_S6_>
 8019ce4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019ce6:	443b      	add	r3, r7
 8019ce8:	930a      	str	r3, [sp, #40]	; 0x28
 8019cea:	e7ed      	b.n	8019cc8 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x1ea>
 8019cec:	9a04      	ldr	r2, [sp, #16]
 8019cee:	9b07      	ldr	r3, [sp, #28]
 8019cf0:	429a      	cmp	r2, r3
 8019cf2:	dd0a      	ble.n	8019d0a <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x22c>
 8019cf4:	a90b      	add	r1, sp, #44	; 0x2c
 8019cf6:	4620      	mov	r0, r4
 8019cf8:	e9dd 2305 	ldrd	r2, r3, [sp, #20]
 8019cfc:	ebc3 0342 	rsb	r3, r3, r2, lsl #1
 8019d00:	aa04      	add	r2, sp, #16
 8019d02:	930a      	str	r3, [sp, #40]	; 0x28
 8019d04:	4633      	mov	r3, r6
 8019d06:	f7ff fcdf 	bl	80196c8 <_ZNK8touchgfx6Circle9lineToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_>
 8019d0a:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8019d0e:	4642      	mov	r2, r8
 8019d10:	9b03      	ldr	r3, [sp, #12]
 8019d12:	eba8 0805 	sub.w	r8, r8, r5
 8019d16:	429a      	cmp	r2, r3
 8019d18:	db0c      	blt.n	8019d34 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x256>
 8019d1a:	9207      	str	r2, [sp, #28]
 8019d1c:	a90b      	add	r1, sp, #44	; 0x2c
 8019d1e:	4620      	mov	r0, r4
 8019d20:	e9dd 2305 	ldrd	r2, r3, [sp, #20]
 8019d24:	ebc3 0342 	rsb	r3, r3, r2, lsl #1
 8019d28:	aa07      	add	r2, sp, #28
 8019d2a:	930a      	str	r3, [sp, #40]	; 0x28
 8019d2c:	4633      	mov	r3, r6
 8019d2e:	f7ff fccb 	bl	80196c8 <_ZNK8touchgfx6Circle9lineToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_>
 8019d32:	e7ec      	b.n	8019d0e <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x230>
 8019d34:	9a07      	ldr	r2, [sp, #28]
 8019d36:	4293      	cmp	r3, r2
 8019d38:	da0a      	bge.n	8019d50 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x272>
 8019d3a:	a90b      	add	r1, sp, #44	; 0x2c
 8019d3c:	4620      	mov	r0, r4
 8019d3e:	e9dd 2305 	ldrd	r2, r3, [sp, #20]
 8019d42:	ebc3 0342 	rsb	r3, r3, r2, lsl #1
 8019d46:	aa03      	add	r2, sp, #12
 8019d48:	930a      	str	r3, [sp, #40]	; 0x28
 8019d4a:	4633      	mov	r3, r6
 8019d4c:	f7ff fcbc 	bl	80196c8 <_ZNK8touchgfx6Circle9lineToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_>
 8019d50:	e9dd 0303 	ldrd	r0, r3, [sp, #12]
 8019d54:	1a1b      	subs	r3, r3, r0
 8019d56:	f5b3 5f34 	cmp.w	r3, #11520	; 0x2d00
 8019d5a:	da88      	bge.n	8019c6e <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x190>
 8019d5c:	f7ff fc22 	bl	80195a4 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8019d60:	4631      	mov	r1, r6
 8019d62:	900a      	str	r0, [sp, #40]	; 0x28
 8019d64:	a805      	add	r0, sp, #20
 8019d66:	f7ff fbf0 	bl	801954a <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8019d6a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8019d6c:	ad06      	add	r5, sp, #24
 8019d6e:	4418      	add	r0, r3
 8019d70:	9008      	str	r0, [sp, #32]
 8019d72:	9803      	ldr	r0, [sp, #12]
 8019d74:	f7ff fc37 	bl	80195e6 <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 8019d78:	4631      	mov	r1, r6
 8019d7a:	900a      	str	r0, [sp, #40]	; 0x28
 8019d7c:	a805      	add	r0, sp, #20
 8019d7e:	f7ff fbe4 	bl	801954a <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8019d82:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8019d84:	1a18      	subs	r0, r3, r0
 8019d86:	9b03      	ldr	r3, [sp, #12]
 8019d88:	f5a3 53b4 	sub.w	r3, r3, #5760	; 0x1680
 8019d8c:	9009      	str	r0, [sp, #36]	; 0x24
 8019d8e:	443b      	add	r3, r7
 8019d90:	930a      	str	r3, [sp, #40]	; 0x28
 8019d92:	9a03      	ldr	r2, [sp, #12]
 8019d94:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019d96:	429a      	cmp	r2, r3
 8019d98:	f77f af69 	ble.w	8019c6e <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x190>
 8019d9c:	ab09      	add	r3, sp, #36	; 0x24
 8019d9e:	aa08      	add	r2, sp, #32
 8019da0:	a90b      	add	r1, sp, #44	; 0x2c
 8019da2:	4620      	mov	r0, r4
 8019da4:	e9cd 6500 	strd	r6, r5, [sp]
 8019da8:	f7ff fc65 	bl	8019676 <_ZNK8touchgfx6Circle11lineToXYAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_S6_S6_>
 8019dac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019dae:	443b      	add	r3, r7
 8019db0:	930a      	str	r3, [sp, #40]	; 0x28
 8019db2:	e7ee      	b.n	8019d92 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x2b4>

08019db4 <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh>:
 8019db4:	4413      	add	r3, r2
 8019db6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8019dba:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019dbc:	4419      	add	r1, r3
 8019dbe:	7a03      	ldrb	r3, [r0, #8]
 8019dc0:	e9dd 6406 	ldrd	r6, r4, [sp, #24]
 8019dc4:	2bff      	cmp	r3, #255	; 0xff
 8019dc6:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8019dca:	440e      	add	r6, r1
 8019dcc:	d13d      	bne.n	8019e4a <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x96>
 8019dce:	f814 3b01 	ldrb.w	r3, [r4], #1
 8019dd2:	3103      	adds	r1, #3
 8019dd4:	7d87      	ldrb	r7, [r0, #22]
 8019dd6:	2bff      	cmp	r3, #255	; 0xff
 8019dd8:	d10a      	bne.n	8019df0 <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x3c>
 8019dda:	f801 7c03 	strb.w	r7, [r1, #-3]
 8019dde:	7d43      	ldrb	r3, [r0, #21]
 8019de0:	f801 3c02 	strb.w	r3, [r1, #-2]
 8019de4:	7d03      	ldrb	r3, [r0, #20]
 8019de6:	f801 3c01 	strb.w	r3, [r1, #-1]
 8019dea:	428e      	cmp	r6, r1
 8019dec:	d8ef      	bhi.n	8019dce <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x1a>
 8019dee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019df0:	b29a      	uxth	r2, r3
 8019df2:	43db      	mvns	r3, r3
 8019df4:	f811 5c03 	ldrb.w	r5, [r1, #-3]
 8019df8:	fb17 f702 	smulbb	r7, r7, r2
 8019dfc:	b2db      	uxtb	r3, r3
 8019dfe:	fb05 7503 	mla	r5, r5, r3, r7
 8019e02:	b2ad      	uxth	r5, r5
 8019e04:	1c6f      	adds	r7, r5, #1
 8019e06:	eb07 2515 	add.w	r5, r7, r5, lsr #8
 8019e0a:	f811 7c02 	ldrb.w	r7, [r1, #-2]
 8019e0e:	fb17 f703 	smulbb	r7, r7, r3
 8019e12:	122d      	asrs	r5, r5, #8
 8019e14:	f801 5c03 	strb.w	r5, [r1, #-3]
 8019e18:	7d45      	ldrb	r5, [r0, #21]
 8019e1a:	fb05 7502 	mla	r5, r5, r2, r7
 8019e1e:	b2ad      	uxth	r5, r5
 8019e20:	1c6f      	adds	r7, r5, #1
 8019e22:	eb07 2515 	add.w	r5, r7, r5, lsr #8
 8019e26:	122d      	asrs	r5, r5, #8
 8019e28:	f801 5c02 	strb.w	r5, [r1, #-2]
 8019e2c:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 8019e30:	7d07      	ldrb	r7, [r0, #20]
 8019e32:	fb15 f303 	smulbb	r3, r5, r3
 8019e36:	fb07 3202 	mla	r2, r7, r2, r3
 8019e3a:	b292      	uxth	r2, r2
 8019e3c:	1c53      	adds	r3, r2, #1
 8019e3e:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8019e42:	1212      	asrs	r2, r2, #8
 8019e44:	f801 2c01 	strb.w	r2, [r1, #-1]
 8019e48:	e7cf      	b.n	8019dea <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x36>
 8019e4a:	3103      	adds	r1, #3
 8019e4c:	f814 2b01 	ldrb.w	r2, [r4], #1
 8019e50:	428e      	cmp	r6, r1
 8019e52:	7a03      	ldrb	r3, [r0, #8]
 8019e54:	f101 0103 	add.w	r1, r1, #3
 8019e58:	f811 cc06 	ldrb.w	ip, [r1, #-6]
 8019e5c:	fb02 f303 	mul.w	r3, r2, r3
 8019e60:	f103 0201 	add.w	r2, r3, #1
 8019e64:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8019e68:	ea4f 2222 	mov.w	r2, r2, asr #8
 8019e6c:	b295      	uxth	r5, r2
 8019e6e:	ea6f 0202 	mvn.w	r2, r2
 8019e72:	b2d3      	uxtb	r3, r2
 8019e74:	7d82      	ldrb	r2, [r0, #22]
 8019e76:	fb1c fc03 	smulbb	ip, ip, r3
 8019e7a:	fb02 c205 	mla	r2, r2, r5, ip
 8019e7e:	b292      	uxth	r2, r2
 8019e80:	f102 0c01 	add.w	ip, r2, #1
 8019e84:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8019e88:	f811 cc05 	ldrb.w	ip, [r1, #-5]
 8019e8c:	fb1c fc03 	smulbb	ip, ip, r3
 8019e90:	ea4f 2222 	mov.w	r2, r2, asr #8
 8019e94:	f801 2c06 	strb.w	r2, [r1, #-6]
 8019e98:	7d42      	ldrb	r2, [r0, #21]
 8019e9a:	fb02 c205 	mla	r2, r2, r5, ip
 8019e9e:	b292      	uxth	r2, r2
 8019ea0:	f102 0c01 	add.w	ip, r2, #1
 8019ea4:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8019ea8:	ea4f 2222 	mov.w	r2, r2, asr #8
 8019eac:	f801 2c05 	strb.w	r2, [r1, #-5]
 8019eb0:	f811 2c04 	ldrb.w	r2, [r1, #-4]
 8019eb4:	f890 c014 	ldrb.w	ip, [r0, #20]
 8019eb8:	fb12 f303 	smulbb	r3, r2, r3
 8019ebc:	fb0c 3305 	mla	r3, ip, r5, r3
 8019ec0:	b29b      	uxth	r3, r3
 8019ec2:	f103 0201 	add.w	r2, r3, #1
 8019ec6:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8019eca:	ea4f 2323 	mov.w	r3, r3, asr #8
 8019ece:	f801 3c04 	strb.w	r3, [r1, #-4]
 8019ed2:	d8bb      	bhi.n	8019e4c <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x98>
 8019ed4:	e78b      	b.n	8019dee <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x3a>

08019ed6 <_ZN8touchgfx13PainterRGB88810renderNextERhS1_S1_S1_>:
 8019ed6:	b510      	push	{r4, lr}
 8019ed8:	7d04      	ldrb	r4, [r0, #20]
 8019eda:	700c      	strb	r4, [r1, #0]
 8019edc:	7d41      	ldrb	r1, [r0, #21]
 8019ede:	7011      	strb	r1, [r2, #0]
 8019ee0:	7d82      	ldrb	r2, [r0, #22]
 8019ee2:	2001      	movs	r0, #1
 8019ee4:	701a      	strb	r2, [r3, #0]
 8019ee6:	22ff      	movs	r2, #255	; 0xff
 8019ee8:	9b02      	ldr	r3, [sp, #8]
 8019eea:	701a      	strb	r2, [r3, #0]
 8019eec:	bd10      	pop	{r4, pc}

08019eee <_ZN8touchgfx12CanvasWidget10setPainterERNS_15AbstractPainterE>:
 8019eee:	6281      	str	r1, [r0, #40]	; 0x28
 8019ef0:	4770      	bx	lr

08019ef2 <_ZNK8touchgfx12CanvasWidget14getMinimalRectEv>:
 8019ef2:	b510      	push	{r4, lr}
 8019ef4:	2200      	movs	r2, #0
 8019ef6:	f9b1 4008 	ldrsh.w	r4, [r1, #8]
 8019efa:	f9b1 100a 	ldrsh.w	r1, [r1, #10]
 8019efe:	8002      	strh	r2, [r0, #0]
 8019f00:	8042      	strh	r2, [r0, #2]
 8019f02:	8084      	strh	r4, [r0, #4]
 8019f04:	80c1      	strh	r1, [r0, #6]
 8019f06:	bd10      	pop	{r4, pc}

08019f08 <_ZNK8touchgfx12CanvasWidget12getSolidRectEv>:
 8019f08:	2200      	movs	r2, #0
 8019f0a:	8002      	strh	r2, [r0, #0]
 8019f0c:	8042      	strh	r2, [r0, #2]
 8019f0e:	8082      	strh	r2, [r0, #4]
 8019f10:	80c2      	strh	r2, [r0, #6]
 8019f12:	4770      	bx	lr

08019f14 <_ZNK8touchgfx12CanvasWidget10getPainterEv>:
 8019f14:	b508      	push	{r3, lr}
 8019f16:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8019f18:	b928      	cbnz	r0, 8019f26 <_ZNK8touchgfx12CanvasWidget10getPainterEv+0x12>
 8019f1a:	4b03      	ldr	r3, [pc, #12]	; (8019f28 <_ZNK8touchgfx12CanvasWidget10getPainterEv+0x14>)
 8019f1c:	2126      	movs	r1, #38	; 0x26
 8019f1e:	4a03      	ldr	r2, [pc, #12]	; (8019f2c <_ZNK8touchgfx12CanvasWidget10getPainterEv+0x18>)
 8019f20:	4803      	ldr	r0, [pc, #12]	; (8019f30 <_ZNK8touchgfx12CanvasWidget10getPainterEv+0x1c>)
 8019f22:	f011 fca9 	bl	802b878 <__assert_func>
 8019f26:	bd08      	pop	{r3, pc}
 8019f28:	0802f34c 	.word	0x0802f34c
 8019f2c:	0802f42c 	.word	0x0802f42c
 8019f30:	0802f373 	.word	0x0802f373

08019f34 <_ZNK8touchgfx4Rect9intersectERKS0_>:
 8019f34:	b510      	push	{r4, lr}
 8019f36:	f9b1 4000 	ldrsh.w	r4, [r1]
 8019f3a:	888a      	ldrh	r2, [r1, #4]
 8019f3c:	f9b0 3000 	ldrsh.w	r3, [r0]
 8019f40:	4422      	add	r2, r4
 8019f42:	b212      	sxth	r2, r2
 8019f44:	4293      	cmp	r3, r2
 8019f46:	da15      	bge.n	8019f74 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8019f48:	8882      	ldrh	r2, [r0, #4]
 8019f4a:	4413      	add	r3, r2
 8019f4c:	b21b      	sxth	r3, r3
 8019f4e:	429c      	cmp	r4, r3
 8019f50:	da10      	bge.n	8019f74 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8019f52:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 8019f56:	88c9      	ldrh	r1, [r1, #6]
 8019f58:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8019f5c:	4419      	add	r1, r3
 8019f5e:	b209      	sxth	r1, r1
 8019f60:	428a      	cmp	r2, r1
 8019f62:	da07      	bge.n	8019f74 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8019f64:	88c0      	ldrh	r0, [r0, #6]
 8019f66:	4410      	add	r0, r2
 8019f68:	b200      	sxth	r0, r0
 8019f6a:	4283      	cmp	r3, r0
 8019f6c:	bfac      	ite	ge
 8019f6e:	2000      	movge	r0, #0
 8019f70:	2001      	movlt	r0, #1
 8019f72:	bd10      	pop	{r4, pc}
 8019f74:	2000      	movs	r0, #0
 8019f76:	e7fc      	b.n	8019f72 <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

08019f78 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE>:
 8019f78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019f7c:	b08b      	sub	sp, #44	; 0x2c
 8019f7e:	4604      	mov	r4, r0
 8019f80:	6808      	ldr	r0, [r1, #0]
 8019f82:	f04f 0a00 	mov.w	sl, #0
 8019f86:	6849      	ldr	r1, [r1, #4]
 8019f88:	ab04      	add	r3, sp, #16
 8019f8a:	f647 7bff 	movw	fp, #32767	; 0x7fff
 8019f8e:	c303      	stmia	r3!, {r0, r1}
 8019f90:	4b35      	ldr	r3, [pc, #212]	; (801a068 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xf0>)
 8019f92:	4621      	mov	r1, r4
 8019f94:	a806      	add	r0, sp, #24
 8019f96:	781b      	ldrb	r3, [r3, #0]
 8019f98:	2b01      	cmp	r3, #1
 8019f9a:	6823      	ldr	r3, [r4, #0]
 8019f9c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019f9e:	bf1f      	itttt	ne
 8019fa0:	f10d 090e 	addne.w	r9, sp, #14
 8019fa4:	ae05      	addne	r6, sp, #20
 8019fa6:	f10d 0516 	addne.w	r5, sp, #22
 8019faa:	f10d 0812 	addne.w	r8, sp, #18
 8019fae:	bf01      	itttt	eq
 8019fb0:	f10d 0916 	addeq.w	r9, sp, #22
 8019fb4:	f10d 060e 	addeq.w	r6, sp, #14
 8019fb8:	ad05      	addeq	r5, sp, #20
 8019fba:	f10d 0810 	addeq.w	r8, sp, #16
 8019fbe:	4798      	blx	r3
 8019fc0:	f9b5 3000 	ldrsh.w	r3, [r5]
 8019fc4:	f9b4 202c 	ldrsh.w	r2, [r4, #44]	; 0x2c
 8019fc8:	2b00      	cmp	r3, #0
 8019fca:	d042      	beq.n	801a052 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xda>
 8019fcc:	4293      	cmp	r3, r2
 8019fce:	bfa8      	it	ge
 8019fd0:	4613      	movge	r3, r2
 8019fd2:	f8ad 300e 	strh.w	r3, [sp, #14]
 8019fd6:	f9bd 700e 	ldrsh.w	r7, [sp, #14]
 8019fda:	2f00      	cmp	r7, #0
 8019fdc:	dd21      	ble.n	801a022 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xaa>
 8019fde:	f9bd 0010 	ldrsh.w	r0, [sp, #16]
 8019fe2:	f9bd 1012 	ldrsh.w	r1, [sp, #18]
 8019fe6:	f9b6 2000 	ldrsh.w	r2, [r6]
 8019fea:	f9b9 3000 	ldrsh.w	r3, [r9]
 8019fee:	f8ad 0020 	strh.w	r0, [sp, #32]
 8019ff2:	a808      	add	r0, sp, #32
 8019ff4:	f8ad 1022 	strh.w	r1, [sp, #34]	; 0x22
 8019ff8:	a906      	add	r1, sp, #24
 8019ffa:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
 8019ffe:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 801a002:	f7ff ff97 	bl	8019f34 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801a006:	9001      	str	r0, [sp, #4]
 801a008:	b1d0      	cbz	r0, 801a040 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xc8>
 801a00a:	6822      	ldr	r2, [r4, #0]
 801a00c:	a908      	add	r1, sp, #32
 801a00e:	4620      	mov	r0, r4
 801a010:	6f12      	ldr	r2, [r2, #112]	; 0x70
 801a012:	4790      	blx	r2
 801a014:	b9a0      	cbnz	r0, 801a040 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xc8>
 801a016:	107f      	asrs	r7, r7, #1
 801a018:	9b01      	ldr	r3, [sp, #4]
 801a01a:	f8ad 700e 	strh.w	r7, [sp, #14]
 801a01e:	469a      	mov	sl, r3
 801a020:	e7d9      	b.n	8019fd6 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x5e>
 801a022:	d10d      	bne.n	801a040 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xc8>
 801a024:	2301      	movs	r3, #1
 801a026:	f8ad 300e 	strh.w	r3, [sp, #14]
 801a02a:	f8b8 2000 	ldrh.w	r2, [r8]
 801a02e:	f8bd 100e 	ldrh.w	r1, [sp, #14]
 801a032:	440a      	add	r2, r1
 801a034:	f8a8 2000 	strh.w	r2, [r8]
 801a038:	882b      	ldrh	r3, [r5, #0]
 801a03a:	1a5b      	subs	r3, r3, r1
 801a03c:	802b      	strh	r3, [r5, #0]
 801a03e:	e7bf      	b.n	8019fc0 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 801a040:	f1ba 0f00 	cmp.w	sl, #0
 801a044:	d0f1      	beq.n	801a02a <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xb2>
 801a046:	f9b4 302c 	ldrsh.w	r3, [r4, #44]	; 0x2c
 801a04a:	455b      	cmp	r3, fp
 801a04c:	bf08      	it	eq
 801a04e:	85a7      	strheq	r7, [r4, #44]	; 0x2c
 801a050:	e7eb      	b.n	801a02a <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xb2>
 801a052:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801a056:	429a      	cmp	r2, r3
 801a058:	bf04      	itt	eq
 801a05a:	f647 73fe 	movweq	r3, #32766	; 0x7ffe
 801a05e:	85a3      	strheq	r3, [r4, #44]	; 0x2c
 801a060:	b00b      	add	sp, #44	; 0x2c
 801a062:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a066:	bf00      	nop
 801a068:	2400c8b4 	.word	0x2400c8b4

0801a06c <_ZNK8touchgfx12CanvasWidget10invalidateEv>:
 801a06c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a06e:	b085      	sub	sp, #20
 801a070:	6803      	ldr	r3, [r0, #0]
 801a072:	4604      	mov	r4, r0
 801a074:	4601      	mov	r1, r0
 801a076:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801a078:	4668      	mov	r0, sp
 801a07a:	4798      	blx	r3
 801a07c:	f9b4 6008 	ldrsh.w	r6, [r4, #8]
 801a080:	f9b4 500a 	ldrsh.w	r5, [r4, #10]
 801a084:	2300      	movs	r3, #0
 801a086:	a902      	add	r1, sp, #8
 801a088:	4668      	mov	r0, sp
 801a08a:	9302      	str	r3, [sp, #8]
 801a08c:	f8ad 600c 	strh.w	r6, [sp, #12]
 801a090:	f8ad 500e 	strh.w	r5, [sp, #14]
 801a094:	f7ff ff4e 	bl	8019f34 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801a098:	b340      	cbz	r0, 801a0ec <_ZNK8touchgfx12CanvasWidget10invalidateEv+0x80>
 801a09a:	f9bd 2000 	ldrsh.w	r2, [sp]
 801a09e:	f8bd 7004 	ldrh.w	r7, [sp, #4]
 801a0a2:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
 801a0a6:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 801a0aa:	443a      	add	r2, r7
 801a0ac:	ea23 71e3 	bic.w	r1, r3, r3, asr #31
 801a0b0:	f8ad 0000 	strh.w	r0, [sp]
 801a0b4:	b292      	uxth	r2, r2
 801a0b6:	f8ad 1002 	strh.w	r1, [sp, #2]
 801a0ba:	b217      	sxth	r7, r2
 801a0bc:	42be      	cmp	r6, r7
 801a0be:	bfd8      	it	le
 801a0c0:	b2b2      	uxthle	r2, r6
 801a0c2:	1a12      	subs	r2, r2, r0
 801a0c4:	f8ad 2004 	strh.w	r2, [sp, #4]
 801a0c8:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 801a0cc:	4413      	add	r3, r2
 801a0ce:	b29b      	uxth	r3, r3
 801a0d0:	b21a      	sxth	r2, r3
 801a0d2:	4295      	cmp	r5, r2
 801a0d4:	bfd8      	it	le
 801a0d6:	b2ab      	uxthle	r3, r5
 801a0d8:	1a5b      	subs	r3, r3, r1
 801a0da:	f8ad 3006 	strh.w	r3, [sp, #6]
 801a0de:	6823      	ldr	r3, [r4, #0]
 801a0e0:	4669      	mov	r1, sp
 801a0e2:	4620      	mov	r0, r4
 801a0e4:	691b      	ldr	r3, [r3, #16]
 801a0e6:	4798      	blx	r3
 801a0e8:	b005      	add	sp, #20
 801a0ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a0ec:	e9cd 0000 	strd	r0, r0, [sp]
 801a0f0:	e7f5      	b.n	801a0de <_ZNK8touchgfx12CanvasWidget10invalidateEv+0x72>
	...

0801a0f4 <_ZN8touchgfx12CanvasWidgetC1Ev>:
 801a0f4:	2200      	movs	r2, #0
 801a0f6:	2101      	movs	r1, #1
 801a0f8:	8082      	strh	r2, [r0, #4]
 801a0fa:	80c2      	strh	r2, [r0, #6]
 801a0fc:	8102      	strh	r2, [r0, #8]
 801a0fe:	8142      	strh	r2, [r0, #10]
 801a100:	8182      	strh	r2, [r0, #12]
 801a102:	81c2      	strh	r2, [r0, #14]
 801a104:	8202      	strh	r2, [r0, #16]
 801a106:	8242      	strh	r2, [r0, #18]
 801a108:	61c2      	str	r2, [r0, #28]
 801a10a:	8402      	strh	r2, [r0, #32]
 801a10c:	8442      	strh	r2, [r0, #34]	; 0x22
 801a10e:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
 801a112:	6282      	str	r2, [r0, #40]	; 0x28
 801a114:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
 801a118:	4905      	ldr	r1, [pc, #20]	; (801a130 <_ZN8touchgfx12CanvasWidgetC1Ev+0x3c>)
 801a11a:	e9c0 2205 	strd	r2, r2, [r0, #20]
 801a11e:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801a122:	6001      	str	r1, [r0, #0]
 801a124:	8582      	strh	r2, [r0, #44]	; 0x2c
 801a126:	22ff      	movs	r2, #255	; 0xff
 801a128:	f880 202e 	strb.w	r2, [r0, #46]	; 0x2e
 801a12c:	4770      	bx	lr
 801a12e:	bf00      	nop
 801a130:	0802f3b8 	.word	0x0802f3b8

0801a134 <_ZN8touchgfx17AbstractDataGraph8setScaleEi>:
 801a134:	62c1      	str	r1, [r0, #44]	; 0x2c
 801a136:	4770      	bx	lr

0801a138 <_ZNK8touchgfx17AbstractDataGraph19getXAxisScaleScaledEv>:
 801a138:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 801a13a:	4770      	bx	lr

0801a13c <_ZN8touchgfx17AbstractDataGraph5clearEv>:
 801a13c:	2300      	movs	r3, #0
 801a13e:	f8a0 311a 	strh.w	r3, [r0, #282]	; 0x11a
 801a142:	4770      	bx	lr

0801a144 <_ZNK8touchgfx17AbstractDataGraph18indexToGlobalIndexEs>:
 801a144:	4608      	mov	r0, r1
 801a146:	4770      	bx	lr

0801a148 <_ZN8touchgfx17AbstractDataGraph15handleDragEventERKNS_9DragEventE>:
 801a148:	b530      	push	{r4, r5, lr}
 801a14a:	460d      	mov	r5, r1
 801a14c:	8f03      	ldrh	r3, [r0, #56]	; 0x38
 801a14e:	8949      	ldrh	r1, [r1, #10]
 801a150:	b085      	sub	sp, #20
 801a152:	4604      	mov	r4, r0
 801a154:	1ac9      	subs	r1, r1, r3
 801a156:	6803      	ldr	r3, [r0, #0]
 801a158:	f10d 0206 	add.w	r2, sp, #6
 801a15c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 801a160:	b209      	sxth	r1, r1
 801a162:	4798      	blx	r3
 801a164:	b1a0      	cbz	r0, 801a190 <_ZN8touchgfx17AbstractDataGraph15handleDragEventERKNS_9DragEventE+0x48>
 801a166:	792b      	ldrb	r3, [r5, #4]
 801a168:	b993      	cbnz	r3, 801a190 <_ZN8touchgfx17AbstractDataGraph15handleDragEventERKNS_9DragEventE+0x48>
 801a16a:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
 801a16e:	b178      	cbz	r0, 801a190 <_ZN8touchgfx17AbstractDataGraph15handleDragEventERKNS_9DragEventE+0x48>
 801a170:	6803      	ldr	r3, [r0, #0]
 801a172:	68db      	ldr	r3, [r3, #12]
 801a174:	4798      	blx	r3
 801a176:	b158      	cbz	r0, 801a190 <_ZN8touchgfx17AbstractDataGraph15handleDragEventERKNS_9DragEventE+0x48>
 801a178:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 801a17c:	aa02      	add	r2, sp, #8
 801a17e:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
 801a182:	4621      	mov	r1, r4
 801a184:	f8ad 3008 	strh.w	r3, [sp, #8]
 801a188:	9503      	str	r5, [sp, #12]
 801a18a:	6803      	ldr	r3, [r0, #0]
 801a18c:	689b      	ldr	r3, [r3, #8]
 801a18e:	4798      	blx	r3
 801a190:	b005      	add	sp, #20
 801a192:	bd30      	pop	{r4, r5, pc}

0801a194 <_ZNK8touchgfx17AbstractDataGraph20getXAxisOffsetScaledEv>:
 801a194:	2000      	movs	r0, #0
 801a196:	4770      	bx	lr

0801a198 <_ZN8touchgfx22AbstractDataGraphWithY14setGraphRangeYEii>:
 801a198:	b410      	push	{r4}
 801a19a:	6804      	ldr	r4, [r0, #0]
 801a19c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 801a19e:	f8d4 40bc 	ldr.w	r4, [r4, #188]	; 0xbc
 801a1a2:	435a      	muls	r2, r3
 801a1a4:	4359      	muls	r1, r3
 801a1a6:	4623      	mov	r3, r4
 801a1a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a1ac:	4718      	bx	r3

0801a1ae <_ZNK8touchgfx22AbstractDataGraphWithY17getGraphRangeXMinEv>:
 801a1ae:	f8d0 0138 	ldr.w	r0, [r0, #312]	; 0x138
 801a1b2:	4770      	bx	lr

0801a1b4 <_ZNK8touchgfx22AbstractDataGraphWithY17getGraphRangeXMaxEv>:
 801a1b4:	f8d0 013c 	ldr.w	r0, [r0, #316]	; 0x13c
 801a1b8:	4770      	bx	lr

0801a1ba <_ZNK8touchgfx22AbstractDataGraphWithY24getGraphRangeYMinAsFloatEv>:
 801a1ba:	edd0 7a50 	vldr	s15, [r0, #320]	; 0x140
 801a1be:	ed90 0a0b 	vldr	s0, [r0, #44]	; 0x2c
 801a1c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801a1c6:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 801a1ca:	ee87 0a80 	vdiv.f32	s0, s15, s0
 801a1ce:	4770      	bx	lr

0801a1d0 <_ZNK8touchgfx22AbstractDataGraphWithY24getGraphRangeYMaxAsFloatEv>:
 801a1d0:	edd0 7a51 	vldr	s15, [r0, #324]	; 0x144
 801a1d4:	ed90 0a0b 	vldr	s0, [r0, #44]	; 0x2c
 801a1d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801a1dc:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 801a1e0:	ee87 0a80 	vdiv.f32	s0, s15, s0
 801a1e4:	4770      	bx	lr

0801a1e6 <_ZN8touchgfx22AbstractDataGraphWithY13setXAxisScaleEi>:
 801a1e6:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 801a1e8:	6803      	ldr	r3, [r0, #0]
 801a1ea:	4351      	muls	r1, r2
 801a1ec:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 801a1f0:	4718      	bx	r3

0801a1f2 <_ZNK8touchgfx22AbstractDataGraphWithY20getXAxisScaleAsFloatEv>:
 801a1f2:	b510      	push	{r4, lr}
 801a1f4:	6803      	ldr	r3, [r0, #0]
 801a1f6:	4604      	mov	r4, r0
 801a1f8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 801a1fc:	4798      	blx	r3
 801a1fe:	ed94 0a0b 	vldr	s0, [r4, #44]	; 0x2c
 801a202:	ee07 0a90 	vmov	s15, r0
 801a206:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 801a20a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801a20e:	ee87 0a80 	vdiv.f32	s0, s15, s0
 801a212:	bd10      	pop	{r4, pc}

0801a214 <_ZN8touchgfx22AbstractDataGraphWithY14setXAxisOffsetEi>:
 801a214:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 801a216:	6803      	ldr	r3, [r0, #0]
 801a218:	4351      	muls	r1, r2
 801a21a:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 801a21e:	4718      	bx	r3

0801a220 <_ZNK8touchgfx22AbstractDataGraphWithY21getXAxisOffsetAsFloatEv>:
 801a220:	b510      	push	{r4, lr}
 801a222:	6803      	ldr	r3, [r0, #0]
 801a224:	4604      	mov	r4, r0
 801a226:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 801a22a:	4798      	blx	r3
 801a22c:	ed94 0a0b 	vldr	s0, [r4, #44]	; 0x2c
 801a230:	ee07 0a90 	vmov	s15, r0
 801a234:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 801a238:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801a23c:	ee87 0a80 	vdiv.f32	s0, s15, s0
 801a240:	bd10      	pop	{r4, pc}

0801a242 <_ZN8touchgfx22AbstractDataGraphWithY14beforeAddValueEv>:
 801a242:	4770      	bx	lr

0801a244 <_ZNK8touchgfx22AbstractDataGraphWithY9realIndexEs>:
 801a244:	4608      	mov	r0, r1
 801a246:	4770      	bx	lr

0801a248 <_ZNK8touchgfx22AbstractDataGraphWithY23indexToDataPointXScaledEs>:
 801a248:	b538      	push	{r3, r4, r5, lr}
 801a24a:	6803      	ldr	r3, [r0, #0]
 801a24c:	4604      	mov	r4, r0
 801a24e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 801a252:	4798      	blx	r3
 801a254:	6823      	ldr	r3, [r4, #0]
 801a256:	4605      	mov	r5, r0
 801a258:	4620      	mov	r0, r4
 801a25a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 801a25e:	4798      	blx	r3
 801a260:	6823      	ldr	r3, [r4, #0]
 801a262:	4345      	muls	r5, r0
 801a264:	4620      	mov	r0, r4
 801a266:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 801a26a:	4798      	blx	r3
 801a26c:	4428      	add	r0, r5
 801a26e:	bd38      	pop	{r3, r4, r5, pc}

0801a270 <_ZNK8touchgfx22AbstractDataGraphWithY23indexToDataPointYScaledEs>:
 801a270:	b510      	push	{r4, lr}
 801a272:	6803      	ldr	r3, [r0, #0]
 801a274:	f8d0 4128 	ldr.w	r4, [r0, #296]	; 0x128
 801a278:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 801a27c:	4798      	blx	r3
 801a27e:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 801a282:	bd10      	pop	{r4, pc}

0801a284 <_ZN8touchgfx22AbstractDataGraphWithY19setXAxisScaleScaledEi>:
 801a284:	f8c0 1134 	str.w	r1, [r0, #308]	; 0x134
 801a288:	4770      	bx	lr

0801a28a <_ZNK8touchgfx22AbstractDataGraphWithY19getXAxisScaleScaledEv>:
 801a28a:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
 801a28e:	4770      	bx	lr

0801a290 <_ZNK8touchgfx22AbstractDataGraphWithY23getGraphRangeYMinScaledEv>:
 801a290:	f8d0 0140 	ldr.w	r0, [r0, #320]	; 0x140
 801a294:	4770      	bx	lr

0801a296 <_ZNK8touchgfx22AbstractDataGraphWithY23getGraphRangeYMaxScaledEv>:
 801a296:	f8d0 0144 	ldr.w	r0, [r0, #324]	; 0x144
 801a29a:	4770      	bx	lr

0801a29c <_ZN8touchgfx22AbstractDataGraphWithY20setXAxisOffsetScaledEi>:
 801a29c:	f8c0 1130 	str.w	r1, [r0, #304]	; 0x130
 801a2a0:	4770      	bx	lr

0801a2a2 <_ZNK8touchgfx22AbstractDataGraphWithY20getXAxisOffsetScaledEv>:
 801a2a2:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
 801a2a6:	4770      	bx	lr

0801a2a8 <_ZNK8touchgfx22AbstractDataGraphWithY16indexToScreenXQ5Es>:
 801a2a8:	6803      	ldr	r3, [r0, #0]
 801a2aa:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 801a2ae:	4718      	bx	r3

0801a2b0 <_ZNK8touchgfx22AbstractDataGraphWithY16indexToScreenYQ5Es>:
 801a2b0:	b570      	push	{r4, r5, r6, lr}
 801a2b2:	6803      	ldr	r3, [r0, #0]
 801a2b4:	4604      	mov	r4, r0
 801a2b6:	f8d0 6128 	ldr.w	r6, [r0, #296]	; 0x128
 801a2ba:	f8d3 50d4 	ldr.w	r5, [r3, #212]	; 0xd4
 801a2be:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 801a2c2:	4798      	blx	r3
 801a2c4:	462b      	mov	r3, r5
 801a2c6:	f856 1020 	ldr.w	r1, [r6, r0, lsl #2]
 801a2ca:	4620      	mov	r0, r4
 801a2cc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a2d0:	4718      	bx	r3
	...

0801a2d4 <_ZN8touchgfx22AbstractDataGraphWithY14setGraphRangeXEii>:
 801a2d4:	4291      	cmp	r1, r2
 801a2d6:	b510      	push	{r4, lr}
 801a2d8:	4604      	mov	r4, r0
 801a2da:	d106      	bne.n	801a2ea <_ZN8touchgfx22AbstractDataGraphWithY14setGraphRangeXEii+0x16>
 801a2dc:	4b12      	ldr	r3, [pc, #72]	; (801a328 <_ZN8touchgfx22AbstractDataGraphWithY14setGraphRangeXEii+0x54>)
 801a2de:	f44f 71f1 	mov.w	r1, #482	; 0x1e2
 801a2e2:	4a12      	ldr	r2, [pc, #72]	; (801a32c <_ZN8touchgfx22AbstractDataGraphWithY14setGraphRangeXEii+0x58>)
 801a2e4:	4812      	ldr	r0, [pc, #72]	; (801a330 <_ZN8touchgfx22AbstractDataGraphWithY14setGraphRangeXEii+0x5c>)
 801a2e6:	f011 fac7 	bl	802b878 <__assert_func>
 801a2ea:	bfc2      	ittt	gt
 801a2ec:	460b      	movgt	r3, r1
 801a2ee:	4611      	movgt	r1, r2
 801a2f0:	461a      	movgt	r2, r3
 801a2f2:	f8d0 3138 	ldr.w	r3, [r0, #312]	; 0x138
 801a2f6:	428b      	cmp	r3, r1
 801a2f8:	d103      	bne.n	801a302 <_ZN8touchgfx22AbstractDataGraphWithY14setGraphRangeXEii+0x2e>
 801a2fa:	f8d0 313c 	ldr.w	r3, [r0, #316]	; 0x13c
 801a2fe:	4293      	cmp	r3, r2
 801a300:	d011      	beq.n	801a326 <_ZN8touchgfx22AbstractDataGraphWithY14setGraphRangeXEii+0x52>
 801a302:	f8c4 1138 	str.w	r1, [r4, #312]	; 0x138
 801a306:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
 801a30a:	f8c4 213c 	str.w	r2, [r4, #316]	; 0x13c
 801a30e:	f005 faa3 	bl	801f858 <_ZNK8touchgfx8Drawable10invalidateEv>
 801a312:	f104 0034 	add.w	r0, r4, #52	; 0x34
 801a316:	f005 fa9f 	bl	801f858 <_ZNK8touchgfx8Drawable10invalidateEv>
 801a31a:	f104 00e4 	add.w	r0, r4, #228	; 0xe4
 801a31e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a322:	f005 ba99 	b.w	801f858 <_ZNK8touchgfx8Drawable10invalidateEv>
 801a326:	bd10      	pop	{r4, pc}
 801a328:	0802f47a 	.word	0x0802f47a
 801a32c:	0802f6ec 	.word	0x0802f6ec
 801a330:	0802f485 	.word	0x0802f485

0801a334 <_ZN8touchgfx22AbstractDataGraphWithY20setGraphRangeYScaledEii>:
 801a334:	4291      	cmp	r1, r2
 801a336:	b510      	push	{r4, lr}
 801a338:	4604      	mov	r4, r0
 801a33a:	d106      	bne.n	801a34a <_ZN8touchgfx22AbstractDataGraphWithY20setGraphRangeYScaledEii+0x16>
 801a33c:	4b12      	ldr	r3, [pc, #72]	; (801a388 <_ZN8touchgfx22AbstractDataGraphWithY20setGraphRangeYScaledEii+0x54>)
 801a33e:	f240 21c1 	movw	r1, #705	; 0x2c1
 801a342:	4a12      	ldr	r2, [pc, #72]	; (801a38c <_ZN8touchgfx22AbstractDataGraphWithY20setGraphRangeYScaledEii+0x58>)
 801a344:	4812      	ldr	r0, [pc, #72]	; (801a390 <_ZN8touchgfx22AbstractDataGraphWithY20setGraphRangeYScaledEii+0x5c>)
 801a346:	f011 fa97 	bl	802b878 <__assert_func>
 801a34a:	bfc2      	ittt	gt
 801a34c:	460b      	movgt	r3, r1
 801a34e:	4611      	movgt	r1, r2
 801a350:	461a      	movgt	r2, r3
 801a352:	f8d0 3140 	ldr.w	r3, [r0, #320]	; 0x140
 801a356:	428b      	cmp	r3, r1
 801a358:	d103      	bne.n	801a362 <_ZN8touchgfx22AbstractDataGraphWithY20setGraphRangeYScaledEii+0x2e>
 801a35a:	f8d0 3144 	ldr.w	r3, [r0, #324]	; 0x144
 801a35e:	4293      	cmp	r3, r2
 801a360:	d011      	beq.n	801a386 <_ZN8touchgfx22AbstractDataGraphWithY20setGraphRangeYScaledEii+0x52>
 801a362:	f8c4 1140 	str.w	r1, [r4, #320]	; 0x140
 801a366:	f104 0060 	add.w	r0, r4, #96	; 0x60
 801a36a:	f8c4 2144 	str.w	r2, [r4, #324]	; 0x144
 801a36e:	f005 fa73 	bl	801f858 <_ZNK8touchgfx8Drawable10invalidateEv>
 801a372:	f104 0034 	add.w	r0, r4, #52	; 0x34
 801a376:	f005 fa6f 	bl	801f858 <_ZNK8touchgfx8Drawable10invalidateEv>
 801a37a:	f104 008c 	add.w	r0, r4, #140	; 0x8c
 801a37e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a382:	f005 ba69 	b.w	801f858 <_ZNK8touchgfx8Drawable10invalidateEv>
 801a386:	bd10      	pop	{r4, pc}
 801a388:	0802f47a 	.word	0x0802f47a
 801a38c:	0802f734 	.word	0x0802f734
 801a390:	0802f485 	.word	0x0802f485

0801a394 <_ZN8touchgfx17AbstractDataGraph16handleClickEventERKNS_10ClickEventE>:
 801a394:	b530      	push	{r4, r5, lr}
 801a396:	790b      	ldrb	r3, [r1, #4]
 801a398:	b085      	sub	sp, #20
 801a39a:	4604      	mov	r4, r0
 801a39c:	460d      	mov	r5, r1
 801a39e:	2b02      	cmp	r3, #2
 801a3a0:	d020      	beq.n	801a3e4 <_ZN8touchgfx17AbstractDataGraph16handleClickEventERKNS_10ClickEventE+0x50>
 801a3a2:	8f03      	ldrh	r3, [r0, #56]	; 0x38
 801a3a4:	f10d 0206 	add.w	r2, sp, #6
 801a3a8:	88c9      	ldrh	r1, [r1, #6]
 801a3aa:	1ac9      	subs	r1, r1, r3
 801a3ac:	6803      	ldr	r3, [r0, #0]
 801a3ae:	b209      	sxth	r1, r1
 801a3b0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 801a3b4:	4798      	blx	r3
 801a3b6:	b1a8      	cbz	r0, 801a3e4 <_ZN8touchgfx17AbstractDataGraph16handleClickEventERKNS_10ClickEventE+0x50>
 801a3b8:	792b      	ldrb	r3, [r5, #4]
 801a3ba:	2b01      	cmp	r3, #1
 801a3bc:	d812      	bhi.n	801a3e4 <_ZN8touchgfx17AbstractDataGraph16handleClickEventERKNS_10ClickEventE+0x50>
 801a3be:	f8d4 0120 	ldr.w	r0, [r4, #288]	; 0x120
 801a3c2:	b178      	cbz	r0, 801a3e4 <_ZN8touchgfx17AbstractDataGraph16handleClickEventERKNS_10ClickEventE+0x50>
 801a3c4:	6803      	ldr	r3, [r0, #0]
 801a3c6:	68db      	ldr	r3, [r3, #12]
 801a3c8:	4798      	blx	r3
 801a3ca:	b158      	cbz	r0, 801a3e4 <_ZN8touchgfx17AbstractDataGraph16handleClickEventERKNS_10ClickEventE+0x50>
 801a3cc:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 801a3d0:	aa02      	add	r2, sp, #8
 801a3d2:	f8d4 0120 	ldr.w	r0, [r4, #288]	; 0x120
 801a3d6:	4621      	mov	r1, r4
 801a3d8:	f8ad 3008 	strh.w	r3, [sp, #8]
 801a3dc:	9503      	str	r5, [sp, #12]
 801a3de:	6803      	ldr	r3, [r0, #0]
 801a3e0:	689b      	ldr	r3, [r3, #8]
 801a3e2:	4798      	blx	r3
 801a3e4:	b005      	add	sp, #20
 801a3e6:	bd30      	pop	{r4, r5, pc}

0801a3e8 <_ZNK8touchgfx7CWRUtil2Q55roundEv>:
 801a3e8:	6800      	ldr	r0, [r0, #0]
 801a3ea:	2800      	cmp	r0, #0
 801a3ec:	bfbd      	ittte	lt
 801a3ee:	380f      	sublt	r0, #15
 801a3f0:	2320      	movlt	r3, #32
 801a3f2:	fb90 f0f3 	sdivlt	r0, r0, r3
 801a3f6:	3010      	addge	r0, #16
 801a3f8:	bfa8      	it	ge
 801a3fa:	1140      	asrge	r0, r0, #5
 801a3fc:	4770      	bx	lr

0801a3fe <_ZN8touchgfx7CWRUtil11muldiv_toQ5Elll>:
 801a3fe:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801a400:	ab01      	add	r3, sp, #4
 801a402:	4615      	mov	r5, r2
 801a404:	f005 fbf0 	bl	801fbe8 <_ZN8touchgfx6muldivElllRl>
 801a408:	2800      	cmp	r0, #0
 801a40a:	462a      	mov	r2, r5
 801a40c:	9901      	ldr	r1, [sp, #4]
 801a40e:	ea4f 1440 	mov.w	r4, r0, lsl #5
 801a412:	f04f 0020 	mov.w	r0, #32
 801a416:	db04      	blt.n	801a422 <_ZN8touchgfx7CWRUtil11muldiv_toQ5Elll+0x24>
 801a418:	f005 fc05 	bl	801fc26 <_ZN8touchgfx6muldivElll>
 801a41c:	4420      	add	r0, r4
 801a41e:	b003      	add	sp, #12
 801a420:	bd30      	pop	{r4, r5, pc}
 801a422:	f005 fc00 	bl	801fc26 <_ZN8touchgfx6muldivElll>
 801a426:	1a20      	subs	r0, r4, r0
 801a428:	e7f9      	b.n	801a41e <_ZN8touchgfx7CWRUtil11muldiv_toQ5Elll+0x20>

0801a42a <_ZN8touchgfx17AbstractDataGraph12float2scaledEfi>:
 801a42a:	ee07 0a90 	vmov	s15, r0
 801a42e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801a432:	ee27 0a80 	vmul.f32	s0, s15, s0
 801a436:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801a43a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a43e:	db08      	blt.n	801a452 <_ZN8touchgfx17AbstractDataGraph12float2scaledEfi+0x28>
 801a440:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801a444:	ee30 0a27 	vadd.f32	s0, s0, s15
 801a448:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 801a44c:	ee17 0a90 	vmov	r0, s15
 801a450:	4770      	bx	lr
 801a452:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 801a456:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801a45a:	ee17 3a90 	vmov	r3, s15
 801a45e:	1e58      	subs	r0, r3, #1
 801a460:	ee30 0a47 	vsub.f32	s0, s0, s14
 801a464:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 801a468:	ee30 0a07 	vadd.f32	s0, s0, s14
 801a46c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801a470:	ee10 3a10 	vmov	r3, s0
 801a474:	4403      	add	r3, r0
 801a476:	4618      	mov	r0, r3
 801a478:	4770      	bx	lr

0801a47a <_ZN8touchgfx22AbstractDataGraphWithY14setGraphRangeYEff>:
 801a47a:	b570      	push	{r4, r5, r6, lr}
 801a47c:	ed2d 8b02 	vpush	{d8}
 801a480:	eeb0 8a60 	vmov.f32	s16, s1
 801a484:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
 801a486:	4604      	mov	r4, r0
 801a488:	4628      	mov	r0, r5
 801a48a:	f7ff ffce 	bl	801a42a <_ZN8touchgfx17AbstractDataGraph12float2scaledEfi>
 801a48e:	eeb0 0a48 	vmov.f32	s0, s16
 801a492:	4606      	mov	r6, r0
 801a494:	4628      	mov	r0, r5
 801a496:	f7ff ffc8 	bl	801a42a <_ZN8touchgfx17AbstractDataGraph12float2scaledEfi>
 801a49a:	6823      	ldr	r3, [r4, #0]
 801a49c:	4602      	mov	r2, r0
 801a49e:	4631      	mov	r1, r6
 801a4a0:	4620      	mov	r0, r4
 801a4a2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 801a4a6:	ecbd 8b02 	vpop	{d8}
 801a4aa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a4ae:	4718      	bx	r3

0801a4b0 <_ZN8touchgfx22AbstractDataGraphWithY13setXAxisScaleEf>:
 801a4b0:	b510      	push	{r4, lr}
 801a4b2:	4604      	mov	r4, r0
 801a4b4:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 801a4b6:	f7ff ffb8 	bl	801a42a <_ZN8touchgfx17AbstractDataGraph12float2scaledEfi>
 801a4ba:	4601      	mov	r1, r0
 801a4bc:	6823      	ldr	r3, [r4, #0]
 801a4be:	4620      	mov	r0, r4
 801a4c0:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 801a4c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a4c8:	4718      	bx	r3

0801a4ca <_ZN8touchgfx22AbstractDataGraphWithY14setXAxisOffsetEf>:
 801a4ca:	b510      	push	{r4, lr}
 801a4cc:	4604      	mov	r4, r0
 801a4ce:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 801a4d0:	f7ff ffab 	bl	801a42a <_ZN8touchgfx17AbstractDataGraph12float2scaledEfi>
 801a4d4:	4601      	mov	r1, r0
 801a4d6:	6823      	ldr	r3, [r4, #0]
 801a4d8:	4620      	mov	r0, r4
 801a4da:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 801a4de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a4e2:	4718      	bx	r3

0801a4e4 <_ZN8touchgfx17AbstractDataGraph10scaled2intEii>:
 801a4e4:	2800      	cmp	r0, #0
 801a4e6:	db07      	blt.n	801a4f8 <_ZN8touchgfx17AbstractDataGraph10scaled2intEii+0x14>
 801a4e8:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 801a4ec:	fb90 f0f1 	sdiv	r0, r0, r1
 801a4f0:	2102      	movs	r1, #2
 801a4f2:	fb90 f0f1 	sdiv	r0, r0, r1
 801a4f6:	4770      	bx	lr
 801a4f8:	f06f 0301 	mvn.w	r3, #1
 801a4fc:	fb03 1000 	mla	r0, r3, r0, r1
 801a500:	3801      	subs	r0, #1
 801a502:	fb90 f0f1 	sdiv	r0, r0, r1
 801a506:	2102      	movs	r1, #2
 801a508:	fb90 f0f1 	sdiv	r0, r0, r1
 801a50c:	4240      	negs	r0, r0
 801a50e:	4770      	bx	lr

0801a510 <_ZNK8touchgfx22AbstractDataGraphWithY22getGraphRangeYMinAsIntEv>:
 801a510:	b508      	push	{r3, lr}
 801a512:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 801a514:	f8d0 0140 	ldr.w	r0, [r0, #320]	; 0x140
 801a518:	f7ff ffe4 	bl	801a4e4 <_ZN8touchgfx17AbstractDataGraph10scaled2intEii>
 801a51c:	bd08      	pop	{r3, pc}

0801a51e <_ZNK8touchgfx22AbstractDataGraphWithY22getGraphRangeYMaxAsIntEv>:
 801a51e:	b508      	push	{r3, lr}
 801a520:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 801a522:	f8d0 0144 	ldr.w	r0, [r0, #324]	; 0x144
 801a526:	f7ff ffdd 	bl	801a4e4 <_ZN8touchgfx17AbstractDataGraph10scaled2intEii>
 801a52a:	bd08      	pop	{r3, pc}

0801a52c <_ZNK8touchgfx22AbstractDataGraphWithY18getXAxisScaleAsIntEv>:
 801a52c:	b510      	push	{r4, lr}
 801a52e:	6803      	ldr	r3, [r0, #0]
 801a530:	4604      	mov	r4, r0
 801a532:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 801a536:	4798      	blx	r3
 801a538:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 801a53a:	f7ff ffd3 	bl	801a4e4 <_ZN8touchgfx17AbstractDataGraph10scaled2intEii>
 801a53e:	bd10      	pop	{r4, pc}

0801a540 <_ZNK8touchgfx22AbstractDataGraphWithY19getXAxisOffsetAsIntEv>:
 801a540:	b510      	push	{r4, lr}
 801a542:	6803      	ldr	r3, [r0, #0]
 801a544:	4604      	mov	r4, r0
 801a546:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 801a54a:	4798      	blx	r3
 801a54c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 801a54e:	f7ff ffc9 	bl	801a4e4 <_ZN8touchgfx17AbstractDataGraph10scaled2intEii>
 801a552:	bd10      	pop	{r4, pc}

0801a554 <_ZNK8touchgfx17AbstractDataGraph8getAlphaEv>:
 801a554:	f890 0030 	ldrb.w	r0, [r0, #48]	; 0x30
 801a558:	4770      	bx	lr

0801a55a <_ZN8touchgfx17AbstractDataGraph19setGraphAreaPaddingEssss>:
 801a55a:	f8a0 3114 	strh.w	r3, [r0, #276]	; 0x114
 801a55e:	f9bd 3000 	ldrsh.w	r3, [sp]
 801a562:	f8a0 1110 	strh.w	r1, [r0, #272]	; 0x110
 801a566:	f8a0 2112 	strh.w	r2, [r0, #274]	; 0x112
 801a56a:	f8a0 3116 	strh.w	r3, [r0, #278]	; 0x116
 801a56e:	4770      	bx	lr

0801a570 <_ZNK8touchgfx17AbstractDataGraph22getGraphAreaPaddingTopEv>:
 801a570:	f9b0 0110 	ldrsh.w	r0, [r0, #272]	; 0x110
 801a574:	4770      	bx	lr

0801a576 <_ZNK8touchgfx17AbstractDataGraph17getGraphAreaWidthEv>:
 801a576:	f8b0 3112 	ldrh.w	r3, [r0, #274]	; 0x112
 801a57a:	f8b0 2114 	ldrh.w	r2, [r0, #276]	; 0x114
 801a57e:	8f80      	ldrh	r0, [r0, #60]	; 0x3c
 801a580:	4413      	add	r3, r2
 801a582:	1ac0      	subs	r0, r0, r3
 801a584:	b200      	sxth	r0, r0
 801a586:	4770      	bx	lr

0801a588 <_ZNK8touchgfx22AbstractDataGraphWithY24xScreenRangeToIndexRangeEssRsS1_>:
 801a588:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a58c:	4690      	mov	r8, r2
 801a58e:	f9b0 211a 	ldrsh.w	r2, [r0, #282]	; 0x11a
 801a592:	4604      	mov	r4, r0
 801a594:	461e      	mov	r6, r3
 801a596:	9d06      	ldr	r5, [sp, #24]
 801a598:	b92a      	cbnz	r2, 801a5a6 <_ZNK8touchgfx22AbstractDataGraphWithY24xScreenRangeToIndexRangeEssRsS1_+0x1e>
 801a59a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801a59e:	802b      	strh	r3, [r5, #0]
 801a5a0:	8033      	strh	r3, [r6, #0]
 801a5a2:	2000      	movs	r0, #0
 801a5a4:	e009      	b.n	801a5ba <_ZNK8touchgfx22AbstractDataGraphWithY24xScreenRangeToIndexRangeEssRsS1_+0x32>
 801a5a6:	f7ff ffe6 	bl	801a576 <_ZNK8touchgfx17AbstractDataGraph17getGraphAreaWidthEv>
 801a5aa:	2801      	cmp	r0, #1
 801a5ac:	d107      	bne.n	801a5be <_ZNK8touchgfx22AbstractDataGraphWithY24xScreenRangeToIndexRangeEssRsS1_+0x36>
 801a5ae:	2300      	movs	r3, #0
 801a5b0:	8033      	strh	r3, [r6, #0]
 801a5b2:	f8b4 311a 	ldrh.w	r3, [r4, #282]	; 0x11a
 801a5b6:	3b01      	subs	r3, #1
 801a5b8:	802b      	strh	r3, [r5, #0]
 801a5ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a5be:	f9b4 c112 	ldrsh.w	ip, [r4, #274]	; 0x112
 801a5c2:	1e42      	subs	r2, r0, #1
 801a5c4:	f8d4 713c 	ldr.w	r7, [r4, #316]	; 0x13c
 801a5c8:	eba1 0c0c 	sub.w	ip, r1, ip
 801a5cc:	f8d4 3138 	ldr.w	r3, [r4, #312]	; 0x138
 801a5d0:	ea4f 104c 	mov.w	r0, ip, lsl #5
 801a5d4:	1af9      	subs	r1, r7, r3
 801a5d6:	f005 fb26 	bl	801fc26 <_ZN8touchgfx6muldivElll>
 801a5da:	f8d4 3138 	ldr.w	r3, [r4, #312]	; 0x138
 801a5de:	f8d4 113c 	ldr.w	r1, [r4, #316]	; 0x13c
 801a5e2:	eb00 1743 	add.w	r7, r0, r3, lsl #5
 801a5e6:	4620      	mov	r0, r4
 801a5e8:	1ac9      	subs	r1, r1, r3
 801a5ea:	f7ff ffc4 	bl	801a576 <_ZNK8touchgfx17AbstractDataGraph17getGraphAreaWidthEv>
 801a5ee:	f9b4 3112 	ldrsh.w	r3, [r4, #274]	; 0x112
 801a5f2:	1e42      	subs	r2, r0, #1
 801a5f4:	eba8 0803 	sub.w	r8, r8, r3
 801a5f8:	ea4f 1048 	mov.w	r0, r8, lsl #5
 801a5fc:	f005 fb13 	bl	801fc26 <_ZN8touchgfx6muldivElll>
 801a600:	f8d4 2138 	ldr.w	r2, [r4, #312]	; 0x138
 801a604:	eb00 1042 	add.w	r0, r0, r2, lsl #5
 801a608:	4287      	cmp	r7, r0
 801a60a:	bfc2      	ittt	gt
 801a60c:	463b      	movgt	r3, r7
 801a60e:	4607      	movgt	r7, r0
 801a610:	4618      	movgt	r0, r3
 801a612:	2800      	cmp	r0, #0
 801a614:	bfb5      	itete	lt
 801a616:	2320      	movlt	r3, #32
 801a618:	301f      	addge	r0, #31
 801a61a:	fb90 f0f3 	sdivlt	r0, r0, r3
 801a61e:	1140      	asrge	r0, r0, #5
 801a620:	2800      	cmp	r0, #0
 801a622:	da03      	bge.n	801a62c <_ZNK8touchgfx22AbstractDataGraphWithY24xScreenRangeToIndexRangeEssRsS1_+0xa4>
 801a624:	2000      	movs	r0, #0
 801a626:	8028      	strh	r0, [r5, #0]
 801a628:	8030      	strh	r0, [r6, #0]
 801a62a:	e7c6      	b.n	801a5ba <_ZNK8touchgfx22AbstractDataGraphWithY24xScreenRangeToIndexRangeEssRsS1_+0x32>
 801a62c:	2320      	movs	r3, #32
 801a62e:	fb97 f7f3 	sdiv	r7, r7, r3
 801a632:	f9b4 311a 	ldrsh.w	r3, [r4, #282]	; 0x11a
 801a636:	3b01      	subs	r3, #1
 801a638:	429f      	cmp	r7, r3
 801a63a:	dd03      	ble.n	801a644 <_ZNK8touchgfx22AbstractDataGraphWithY24xScreenRangeToIndexRangeEssRsS1_+0xbc>
 801a63c:	b218      	sxth	r0, r3
 801a63e:	8028      	strh	r0, [r5, #0]
 801a640:	8030      	strh	r0, [r6, #0]
 801a642:	e7ae      	b.n	801a5a2 <_ZNK8touchgfx22AbstractDataGraphWithY24xScreenRangeToIndexRangeEssRsS1_+0x1a>
 801a644:	4283      	cmp	r3, r0
 801a646:	ea27 77e7 	bic.w	r7, r7, r7, asr #31
 801a64a:	bfb8      	it	lt
 801a64c:	b218      	sxthlt	r0, r3
 801a64e:	8037      	strh	r7, [r6, #0]
 801a650:	bfa8      	it	ge
 801a652:	b200      	sxthge	r0, r0
 801a654:	8028      	strh	r0, [r5, #0]
 801a656:	2001      	movs	r0, #1
 801a658:	e7af      	b.n	801a5ba <_ZNK8touchgfx22AbstractDataGraphWithY24xScreenRangeToIndexRangeEssRsS1_+0x32>

0801a65a <_ZNK8touchgfx22AbstractDataGraphWithY16valueToScreenXQ5Ei>:
 801a65a:	b570      	push	{r4, r5, r6, lr}
 801a65c:	4604      	mov	r4, r0
 801a65e:	f8d0 5138 	ldr.w	r5, [r0, #312]	; 0x138
 801a662:	1b4e      	subs	r6, r1, r5
 801a664:	f7ff ff87 	bl	801a576 <_ZNK8touchgfx17AbstractDataGraph17getGraphAreaWidthEv>
 801a668:	f8d4 213c 	ldr.w	r2, [r4, #316]	; 0x13c
 801a66c:	1e41      	subs	r1, r0, #1
 801a66e:	4630      	mov	r0, r6
 801a670:	1b52      	subs	r2, r2, r5
 801a672:	f7ff fec4 	bl	801a3fe <_ZN8touchgfx7CWRUtil11muldiv_toQ5Elll>
 801a676:	f9b4 3112 	ldrsh.w	r3, [r4, #274]	; 0x112
 801a67a:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 801a67e:	bd70      	pop	{r4, r5, r6, pc}

0801a680 <_ZNK8touchgfx17AbstractDataGraph33getGraphAreaWidthIncludingPaddingEv>:
 801a680:	f9b0 003c 	ldrsh.w	r0, [r0, #60]	; 0x3c
 801a684:	4770      	bx	lr

0801a686 <_ZNK8touchgfx17AbstractDataGraph18getGraphAreaHeightEv>:
 801a686:	f8b0 3110 	ldrh.w	r3, [r0, #272]	; 0x110
 801a68a:	f8b0 2116 	ldrh.w	r2, [r0, #278]	; 0x116
 801a68e:	8fc0      	ldrh	r0, [r0, #62]	; 0x3e
 801a690:	4413      	add	r3, r2
 801a692:	1ac0      	subs	r0, r0, r3
 801a694:	b200      	sxth	r0, r0
 801a696:	4770      	bx	lr

0801a698 <_ZNK8touchgfx22AbstractDataGraphWithY16valueToScreenYQ5Ei>:
 801a698:	b570      	push	{r4, r5, r6, lr}
 801a69a:	4605      	mov	r5, r0
 801a69c:	460e      	mov	r6, r1
 801a69e:	f7ff fff2 	bl	801a686 <_ZNK8touchgfx17AbstractDataGraph18getGraphAreaHeightEv>
 801a6a2:	1e41      	subs	r1, r0, #1
 801a6a4:	f9b5 4110 	ldrsh.w	r4, [r5, #272]	; 0x110
 801a6a8:	f8d5 3140 	ldr.w	r3, [r5, #320]	; 0x140
 801a6ac:	4404      	add	r4, r0
 801a6ae:	f8d5 2144 	ldr.w	r2, [r5, #324]	; 0x144
 801a6b2:	1af0      	subs	r0, r6, r3
 801a6b4:	3c01      	subs	r4, #1
 801a6b6:	1ad2      	subs	r2, r2, r3
 801a6b8:	f7ff fea1 	bl	801a3fe <_ZN8touchgfx7CWRUtil11muldiv_toQ5Elll>
 801a6bc:	0164      	lsls	r4, r4, #5
 801a6be:	1a20      	subs	r0, r4, r0
 801a6c0:	bd70      	pop	{r4, r5, r6, pc}

0801a6c2 <_ZNK8touchgfx17AbstractDataGraph17getGapBeforeIndexEv>:
 801a6c2:	f9b0 011c 	ldrsh.w	r0, [r0, #284]	; 0x11c
 801a6c6:	4770      	bx	lr

0801a6c8 <_ZN8touchgfx17AbstractDataGraph15addGraphElementERNS_20AbstractGraphElementE>:
 801a6c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801a6ca:	4604      	mov	r4, r0
 801a6cc:	3034      	adds	r0, #52	; 0x34
 801a6ce:	460d      	mov	r5, r1
 801a6d0:	f7fd fc9e 	bl	8018010 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 801a6d4:	f9b4 203e 	ldrsh.w	r2, [r4, #62]	; 0x3e
 801a6d8:	f9b4 303c 	ldrsh.w	r3, [r4, #60]	; 0x3c
 801a6dc:	4628      	mov	r0, r5
 801a6de:	9200      	str	r2, [sp, #0]
 801a6e0:	2200      	movs	r2, #0
 801a6e2:	4611      	mov	r1, r2
 801a6e4:	f7e9 fd83 	bl	80041ee <_ZN8touchgfx8Drawable11setPositionEssss>
 801a6e8:	b003      	add	sp, #12
 801a6ea:	bd30      	pop	{r4, r5, pc}

0801a6ec <_ZNK8touchgfx17AbstractDataGraph15getUsedCapacityEv>:
 801a6ec:	f9b0 011a 	ldrsh.w	r0, [r0, #282]	; 0x11a
 801a6f0:	4770      	bx	lr

0801a6f2 <_ZNK8touchgfx17AbstractDataGraph14indexToScreenXEs>:
 801a6f2:	b507      	push	{r0, r1, r2, lr}
 801a6f4:	6803      	ldr	r3, [r0, #0]
 801a6f6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 801a6fa:	4798      	blx	r3
 801a6fc:	ab02      	add	r3, sp, #8
 801a6fe:	f843 0d04 	str.w	r0, [r3, #-4]!
 801a702:	4618      	mov	r0, r3
 801a704:	f7ff fe70 	bl	801a3e8 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 801a708:	b200      	sxth	r0, r0
 801a70a:	b003      	add	sp, #12
 801a70c:	f85d fb04 	ldr.w	pc, [sp], #4

0801a710 <_ZNK8touchgfx17AbstractDataGraph25getNearestIndexForScreenXEsRs>:
 801a710:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a712:	f9b0 311a 	ldrsh.w	r3, [r0, #282]	; 0x11a
 801a716:	b085      	sub	sp, #20
 801a718:	4605      	mov	r5, r0
 801a71a:	460f      	mov	r7, r1
 801a71c:	4616      	mov	r6, r2
 801a71e:	b333      	cbz	r3, 801a76e <_ZNK8touchgfx17AbstractDataGraph25getNearestIndexForScreenXEsRs+0x5e>
 801a720:	6803      	ldr	r3, [r0, #0]
 801a722:	f10d 020e 	add.w	r2, sp, #14
 801a726:	9200      	str	r2, [sp, #0]
 801a728:	460a      	mov	r2, r1
 801a72a:	f8d3 40e0 	ldr.w	r4, [r3, #224]	; 0xe0
 801a72e:	ab03      	add	r3, sp, #12
 801a730:	47a0      	blx	r4
 801a732:	f9bd 100c 	ldrsh.w	r1, [sp, #12]
 801a736:	4628      	mov	r0, r5
 801a738:	f7ff ffdb 	bl	801a6f2 <_ZNK8touchgfx17AbstractDataGraph14indexToScreenXEs>
 801a73c:	f9bd 100e 	ldrsh.w	r1, [sp, #14]
 801a740:	4604      	mov	r4, r0
 801a742:	4628      	mov	r0, r5
 801a744:	f7ff ffd5 	bl	801a6f2 <_ZNK8touchgfx17AbstractDataGraph14indexToScreenXEs>
 801a748:	1bc0      	subs	r0, r0, r7
 801a74a:	1be4      	subs	r4, r4, r7
 801a74c:	2800      	cmp	r0, #0
 801a74e:	bfb8      	it	lt
 801a750:	4240      	neglt	r0, r0
 801a752:	2c00      	cmp	r4, #0
 801a754:	bfb8      	it	lt
 801a756:	4264      	neglt	r4, r4
 801a758:	42a0      	cmp	r0, r4
 801a75a:	f04f 0001 	mov.w	r0, #1
 801a75e:	bfac      	ite	ge
 801a760:	f9bd 300c 	ldrshge.w	r3, [sp, #12]
 801a764:	f9bd 300e 	ldrshlt.w	r3, [sp, #14]
 801a768:	8033      	strh	r3, [r6, #0]
 801a76a:	b005      	add	sp, #20
 801a76c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a76e:	4618      	mov	r0, r3
 801a770:	e7fb      	b.n	801a76a <_ZNK8touchgfx17AbstractDataGraph25getNearestIndexForScreenXEsRs+0x5a>

0801a772 <_ZNK8touchgfx17AbstractDataGraph14indexToScreenYEs>:
 801a772:	b507      	push	{r0, r1, r2, lr}
 801a774:	6803      	ldr	r3, [r0, #0]
 801a776:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 801a77a:	4798      	blx	r3
 801a77c:	ab02      	add	r3, sp, #8
 801a77e:	f843 0d04 	str.w	r0, [r3, #-4]!
 801a782:	4618      	mov	r0, r3
 801a784:	f7ff fe30 	bl	801a3e8 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 801a788:	b200      	sxth	r0, r0
 801a78a:	b003      	add	sp, #12
 801a78c:	f85d fb04 	ldr.w	pc, [sp], #4

0801a790 <_ZN8touchgfx17AbstractDataGraph26getNearestIndexForScreenXYEssRs>:
 801a790:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a794:	4605      	mov	r5, r0
 801a796:	f9b0 011a 	ldrsh.w	r0, [r0, #282]	; 0x11a
 801a79a:	4689      	mov	r9, r1
 801a79c:	4692      	mov	sl, r2
 801a79e:	469b      	mov	fp, r3
 801a7a0:	b338      	cbz	r0, 801a7f2 <_ZN8touchgfx17AbstractDataGraph26getNearestIndexForScreenXYEssRs+0x62>
 801a7a2:	2700      	movs	r7, #0
 801a7a4:	f06f 4800 	mvn.w	r8, #2147483648	; 0x80000000
 801a7a8:	b23e      	sxth	r6, r7
 801a7aa:	f9b5 311a 	ldrsh.w	r3, [r5, #282]	; 0x11a
 801a7ae:	42b3      	cmp	r3, r6
 801a7b0:	dd1e      	ble.n	801a7f0 <_ZN8touchgfx17AbstractDataGraph26getNearestIndexForScreenXYEssRs+0x60>
 801a7b2:	4631      	mov	r1, r6
 801a7b4:	4628      	mov	r0, r5
 801a7b6:	f7ff ff9c 	bl	801a6f2 <_ZNK8touchgfx17AbstractDataGraph14indexToScreenXEs>
 801a7ba:	eba0 0409 	sub.w	r4, r0, r9
 801a7be:	4631      	mov	r1, r6
 801a7c0:	4628      	mov	r0, r5
 801a7c2:	2c00      	cmp	r4, #0
 801a7c4:	f107 0701 	add.w	r7, r7, #1
 801a7c8:	bfb8      	it	lt
 801a7ca:	4264      	neglt	r4, r4
 801a7cc:	f7ff ffd1 	bl	801a772 <_ZNK8touchgfx17AbstractDataGraph14indexToScreenYEs>
 801a7d0:	eba0 000a 	sub.w	r0, r0, sl
 801a7d4:	b224      	sxth	r4, r4
 801a7d6:	2800      	cmp	r0, #0
 801a7d8:	bfb8      	it	lt
 801a7da:	4240      	neglt	r0, r0
 801a7dc:	fb10 f000 	smulbb	r0, r0, r0
 801a7e0:	fb04 0004 	mla	r0, r4, r4, r0
 801a7e4:	4540      	cmp	r0, r8
 801a7e6:	bfbc      	itt	lt
 801a7e8:	f8ab 6000 	strhlt.w	r6, [fp]
 801a7ec:	4680      	movlt	r8, r0
 801a7ee:	e7db      	b.n	801a7a8 <_ZN8touchgfx17AbstractDataGraph26getNearestIndexForScreenXYEssRs+0x18>
 801a7f0:	2001      	movs	r0, #1
 801a7f2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801a7f6 <_ZN8touchgfx17AbstractDataGraph22invalidateGraphPointAtEs>:
 801a7f6:	b538      	push	{r3, r4, r5, lr}
 801a7f8:	f9b0 311a 	ldrsh.w	r3, [r0, #282]	; 0x11a
 801a7fc:	460d      	mov	r5, r1
 801a7fe:	428b      	cmp	r3, r1
 801a800:	dd08      	ble.n	801a814 <_ZN8touchgfx17AbstractDataGraph22invalidateGraphPointAtEs+0x1e>
 801a802:	6dc4      	ldr	r4, [r0, #92]	; 0x5c
 801a804:	b134      	cbz	r4, 801a814 <_ZN8touchgfx17AbstractDataGraph22invalidateGraphPointAtEs+0x1e>
 801a806:	6823      	ldr	r3, [r4, #0]
 801a808:	4620      	mov	r0, r4
 801a80a:	4629      	mov	r1, r5
 801a80c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801a80e:	4798      	blx	r3
 801a810:	69a4      	ldr	r4, [r4, #24]
 801a812:	e7f7      	b.n	801a804 <_ZN8touchgfx17AbstractDataGraph22invalidateGraphPointAtEs+0xe>
 801a814:	bd38      	pop	{r3, r4, r5, pc}

0801a816 <_ZN8touchgfx17AbstractDataGraph19invalidateGraphAreaEv>:
 801a816:	3034      	adds	r0, #52	; 0x34
 801a818:	f005 b81e 	b.w	801f858 <_ZNK8touchgfx8Drawable10invalidateEv>

0801a81c <_ZN8touchgfx17AbstractDataGraph22invalidateXAxisPointAtEs>:
 801a81c:	b570      	push	{r4, r5, r6, lr}
 801a81e:	4606      	mov	r6, r0
 801a820:	460d      	mov	r5, r1
 801a822:	f8d0 40e0 	ldr.w	r4, [r0, #224]	; 0xe0
 801a826:	b134      	cbz	r4, 801a836 <_ZN8touchgfx17AbstractDataGraph22invalidateXAxisPointAtEs+0x1a>
 801a828:	6823      	ldr	r3, [r4, #0]
 801a82a:	4620      	mov	r0, r4
 801a82c:	4629      	mov	r1, r5
 801a82e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801a830:	4798      	blx	r3
 801a832:	69a4      	ldr	r4, [r4, #24]
 801a834:	e7f7      	b.n	801a826 <_ZN8touchgfx17AbstractDataGraph22invalidateXAxisPointAtEs+0xa>
 801a836:	f8d6 410c 	ldr.w	r4, [r6, #268]	; 0x10c
 801a83a:	b134      	cbz	r4, 801a84a <_ZN8touchgfx17AbstractDataGraph22invalidateXAxisPointAtEs+0x2e>
 801a83c:	6823      	ldr	r3, [r4, #0]
 801a83e:	4620      	mov	r0, r4
 801a840:	4629      	mov	r1, r5
 801a842:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801a844:	4798      	blx	r3
 801a846:	69a4      	ldr	r4, [r4, #24]
 801a848:	e7f7      	b.n	801a83a <_ZN8touchgfx17AbstractDataGraph22invalidateXAxisPointAtEs+0x1e>
 801a84a:	bd70      	pop	{r4, r5, r6, pc}

0801a84c <_ZN8touchgfx17AbstractDataGraph24invalidateAllXAxisPointsEv>:
 801a84c:	b570      	push	{r4, r5, r6, lr}
 801a84e:	6803      	ldr	r3, [r0, #0]
 801a850:	4605      	mov	r5, r0
 801a852:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801a856:	4798      	blx	r3
 801a858:	682b      	ldr	r3, [r5, #0]
 801a85a:	4604      	mov	r4, r0
 801a85c:	4628      	mov	r0, r5
 801a85e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801a862:	4798      	blx	r3
 801a864:	4284      	cmp	r4, r0
 801a866:	4606      	mov	r6, r0
 801a868:	bfc2      	ittt	gt
 801a86a:	b223      	sxthgt	r3, r4
 801a86c:	4604      	movgt	r4, r0
 801a86e:	461e      	movgt	r6, r3
 801a870:	42a6      	cmp	r6, r4
 801a872:	db05      	blt.n	801a880 <_ZN8touchgfx17AbstractDataGraph24invalidateAllXAxisPointsEv+0x34>
 801a874:	b221      	sxth	r1, r4
 801a876:	4628      	mov	r0, r5
 801a878:	f7ff ffd0 	bl	801a81c <_ZN8touchgfx17AbstractDataGraph22invalidateXAxisPointAtEs>
 801a87c:	3401      	adds	r4, #1
 801a87e:	e7f7      	b.n	801a870 <_ZN8touchgfx17AbstractDataGraph24invalidateAllXAxisPointsEv+0x24>
 801a880:	bd70      	pop	{r4, r5, r6, pc}

0801a882 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv>:
 801a882:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801a884:	4604      	mov	r4, r0
 801a886:	6dc5      	ldr	r5, [r0, #92]	; 0x5c
 801a888:	b15d      	cbz	r5, 801a8a2 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x20>
 801a88a:	f9b4 203e 	ldrsh.w	r2, [r4, #62]	; 0x3e
 801a88e:	4628      	mov	r0, r5
 801a890:	f9b4 303c 	ldrsh.w	r3, [r4, #60]	; 0x3c
 801a894:	9200      	str	r2, [sp, #0]
 801a896:	2200      	movs	r2, #0
 801a898:	4611      	mov	r1, r2
 801a89a:	f7e9 fca8 	bl	80041ee <_ZN8touchgfx8Drawable11setPositionEssss>
 801a89e:	69ad      	ldr	r5, [r5, #24]
 801a8a0:	e7f2      	b.n	801a888 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x6>
 801a8a2:	f8d4 50e0 	ldr.w	r5, [r4, #224]	; 0xe0
 801a8a6:	b15d      	cbz	r5, 801a8c0 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x3e>
 801a8a8:	f9b4 20c2 	ldrsh.w	r2, [r4, #194]	; 0xc2
 801a8ac:	4628      	mov	r0, r5
 801a8ae:	f9b4 30c0 	ldrsh.w	r3, [r4, #192]	; 0xc0
 801a8b2:	9200      	str	r2, [sp, #0]
 801a8b4:	2200      	movs	r2, #0
 801a8b6:	4611      	mov	r1, r2
 801a8b8:	f7e9 fc99 	bl	80041ee <_ZN8touchgfx8Drawable11setPositionEssss>
 801a8bc:	69ad      	ldr	r5, [r5, #24]
 801a8be:	e7f2      	b.n	801a8a6 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x24>
 801a8c0:	f8d4 5088 	ldr.w	r5, [r4, #136]	; 0x88
 801a8c4:	b15d      	cbz	r5, 801a8de <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x5c>
 801a8c6:	f9b4 206a 	ldrsh.w	r2, [r4, #106]	; 0x6a
 801a8ca:	4628      	mov	r0, r5
 801a8cc:	f9b4 3068 	ldrsh.w	r3, [r4, #104]	; 0x68
 801a8d0:	9200      	str	r2, [sp, #0]
 801a8d2:	2200      	movs	r2, #0
 801a8d4:	4611      	mov	r1, r2
 801a8d6:	f7e9 fc8a 	bl	80041ee <_ZN8touchgfx8Drawable11setPositionEssss>
 801a8da:	69ad      	ldr	r5, [r5, #24]
 801a8dc:	e7f2      	b.n	801a8c4 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x42>
 801a8de:	f8d4 50b4 	ldr.w	r5, [r4, #180]	; 0xb4
 801a8e2:	b15d      	cbz	r5, 801a8fc <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x7a>
 801a8e4:	f9b4 2096 	ldrsh.w	r2, [r4, #150]	; 0x96
 801a8e8:	4628      	mov	r0, r5
 801a8ea:	f9b4 3094 	ldrsh.w	r3, [r4, #148]	; 0x94
 801a8ee:	9200      	str	r2, [sp, #0]
 801a8f0:	2200      	movs	r2, #0
 801a8f2:	4611      	mov	r1, r2
 801a8f4:	f7e9 fc7b 	bl	80041ee <_ZN8touchgfx8Drawable11setPositionEssss>
 801a8f8:	69ad      	ldr	r5, [r5, #24]
 801a8fa:	e7f2      	b.n	801a8e2 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x60>
 801a8fc:	f8d4 510c 	ldr.w	r5, [r4, #268]	; 0x10c
 801a900:	b15d      	cbz	r5, 801a91a <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x98>
 801a902:	f9b4 20ee 	ldrsh.w	r2, [r4, #238]	; 0xee
 801a906:	4628      	mov	r0, r5
 801a908:	f9b4 30ec 	ldrsh.w	r3, [r4, #236]	; 0xec
 801a90c:	9200      	str	r2, [sp, #0]
 801a90e:	2200      	movs	r2, #0
 801a910:	4611      	mov	r1, r2
 801a912:	f7e9 fc6c 	bl	80041ee <_ZN8touchgfx8Drawable11setPositionEssss>
 801a916:	69ad      	ldr	r5, [r5, #24]
 801a918:	e7f2      	b.n	801a900 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x7e>
 801a91a:	6823      	ldr	r3, [r4, #0]
 801a91c:	4620      	mov	r0, r4
 801a91e:	695b      	ldr	r3, [r3, #20]
 801a920:	b003      	add	sp, #12
 801a922:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801a926:	4718      	bx	r3

0801a928 <_ZN8touchgfx17AbstractDataGraph8setWidthEs>:
 801a928:	b430      	push	{r4, r5}
 801a92a:	b28a      	uxth	r2, r1
 801a92c:	f8b0 4094 	ldrh.w	r4, [r0, #148]	; 0x94
 801a930:	f8a0 10c0 	strh.w	r1, [r0, #192]	; 0xc0
 801a934:	1b15      	subs	r5, r2, r4
 801a936:	f8a0 10ec 	strh.w	r1, [r0, #236]	; 0xec
 801a93a:	8101      	strh	r1, [r0, #8]
 801a93c:	f8a0 5090 	strh.w	r5, [r0, #144]	; 0x90
 801a940:	f8b0 5068 	ldrh.w	r5, [r0, #104]	; 0x68
 801a944:	442c      	add	r4, r5
 801a946:	1b12      	subs	r2, r2, r4
 801a948:	bc30      	pop	{r4, r5}
 801a94a:	8782      	strh	r2, [r0, #60]	; 0x3c
 801a94c:	f7ff bf99 	b.w	801a882 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv>

0801a950 <_ZN8touchgfx17AbstractDataGraph9setHeightEs>:
 801a950:	b430      	push	{r4, r5}
 801a952:	b28a      	uxth	r2, r1
 801a954:	f8b0 40ee 	ldrh.w	r4, [r0, #238]	; 0xee
 801a958:	f8a0 106a 	strh.w	r1, [r0, #106]	; 0x6a
 801a95c:	1b15      	subs	r5, r2, r4
 801a95e:	f8a0 1096 	strh.w	r1, [r0, #150]	; 0x96
 801a962:	8141      	strh	r1, [r0, #10]
 801a964:	f8a0 50ea 	strh.w	r5, [r0, #234]	; 0xea
 801a968:	f8b0 50c2 	ldrh.w	r5, [r0, #194]	; 0xc2
 801a96c:	442c      	add	r4, r5
 801a96e:	1b12      	subs	r2, r2, r4
 801a970:	bc30      	pop	{r4, r5}
 801a972:	87c2      	strh	r2, [r0, #62]	; 0x3e
 801a974:	f7ff bf85 	b.w	801a882 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv>

0801a978 <_ZN8touchgfx17AbstractDataGraph18setGraphAreaMarginEssss>:
 801a978:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 801a97c:	fa1f fa83 	uxth.w	sl, r3
 801a980:	f9bd 7028 	ldrsh.w	r7, [sp, #40]	; 0x28
 801a984:	4615      	mov	r5, r2
 801a986:	4699      	mov	r9, r3
 801a988:	fa1f f887 	uxth.w	r8, r7
 801a98c:	8903      	ldrh	r3, [r0, #8]
 801a98e:	4452      	add	r2, sl
 801a990:	4604      	mov	r4, r0
 801a992:	8940      	ldrh	r0, [r0, #10]
 801a994:	460e      	mov	r6, r1
 801a996:	1a9b      	subs	r3, r3, r2
 801a998:	eb08 0201 	add.w	r2, r8, r1
 801a99c:	1a80      	subs	r0, r0, r2
 801a99e:	b21b      	sxth	r3, r3
 801a9a0:	460a      	mov	r2, r1
 801a9a2:	4629      	mov	r1, r5
 801a9a4:	b200      	sxth	r0, r0
 801a9a6:	9000      	str	r0, [sp, #0]
 801a9a8:	f104 0034 	add.w	r0, r4, #52	; 0x34
 801a9ac:	f7e9 fc1f 	bl	80041ee <_ZN8touchgfx8Drawable11setPositionEssss>
 801a9b0:	2200      	movs	r2, #0
 801a9b2:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 801a9b6:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
 801a9ba:	4611      	mov	r1, r2
 801a9bc:	9600      	str	r6, [sp, #0]
 801a9be:	f7e9 fc16 	bl	80041ee <_ZN8touchgfx8Drawable11setPositionEssss>
 801a9c2:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 801a9c6:	2200      	movs	r2, #0
 801a9c8:	f104 0060 	add.w	r0, r4, #96	; 0x60
 801a9cc:	9300      	str	r3, [sp, #0]
 801a9ce:	462b      	mov	r3, r5
 801a9d0:	4611      	mov	r1, r2
 801a9d2:	f7e9 fc0c 	bl	80041ee <_ZN8touchgfx8Drawable11setPositionEssss>
 801a9d6:	8921      	ldrh	r1, [r4, #8]
 801a9d8:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 801a9dc:	f104 008c 	add.w	r0, r4, #140	; 0x8c
 801a9e0:	eba1 010a 	sub.w	r1, r1, sl
 801a9e4:	2200      	movs	r2, #0
 801a9e6:	9300      	str	r3, [sp, #0]
 801a9e8:	464b      	mov	r3, r9
 801a9ea:	b209      	sxth	r1, r1
 801a9ec:	f7e9 fbff 	bl	80041ee <_ZN8touchgfx8Drawable11setPositionEssss>
 801a9f0:	8962      	ldrh	r2, [r4, #10]
 801a9f2:	f104 00e4 	add.w	r0, r4, #228	; 0xe4
 801a9f6:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 801a9fa:	eba2 0208 	sub.w	r2, r2, r8
 801a9fe:	9700      	str	r7, [sp, #0]
 801aa00:	2100      	movs	r1, #0
 801aa02:	b212      	sxth	r2, r2
 801aa04:	f7e9 fbf3 	bl	80041ee <_ZN8touchgfx8Drawable11setPositionEssss>
 801aa08:	4620      	mov	r0, r4
 801aa0a:	b002      	add	sp, #8
 801aa0c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801aa10:	f7ff bf37 	b.w	801a882 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv>

0801aa14 <_ZN8touchgfx17AbstractDataGraphC1Es>:
 801aa14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801aa18:	b085      	sub	sp, #20
 801aa1a:	4604      	mov	r4, r0
 801aa1c:	2500      	movs	r5, #0
 801aa1e:	2701      	movs	r7, #1
 801aa20:	9103      	str	r1, [sp, #12]
 801aa22:	f7eb f967 	bl	8005cf4 <_ZN8touchgfx8DrawableC1Ev>
 801aa26:	4b32      	ldr	r3, [pc, #200]	; (801aaf0 <_ZN8touchgfx17AbstractDataGraphC1Es+0xdc>)
 801aa28:	f104 0a60 	add.w	sl, r4, #96	; 0x60
 801aa2c:	4e31      	ldr	r6, [pc, #196]	; (801aaf4 <_ZN8touchgfx17AbstractDataGraphC1Es+0xe0>)
 801aa2e:	f104 098c 	add.w	r9, r4, #140	; 0x8c
 801aa32:	6023      	str	r3, [r4, #0]
 801aa34:	23ff      	movs	r3, #255	; 0xff
 801aa36:	62a5      	str	r5, [r4, #40]	; 0x28
 801aa38:	f104 0bb8 	add.w	fp, r4, #184	; 0xb8
 801aa3c:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
 801aa40:	f104 0334 	add.w	r3, r4, #52	; 0x34
 801aa44:	62e7      	str	r7, [r4, #44]	; 0x2c
 801aa46:	f104 08e4 	add.w	r8, r4, #228	; 0xe4
 801aa4a:	4618      	mov	r0, r3
 801aa4c:	9302      	str	r3, [sp, #8]
 801aa4e:	f7eb f951 	bl	8005cf4 <_ZN8touchgfx8DrawableC1Ev>
 801aa52:	6366      	str	r6, [r4, #52]	; 0x34
 801aa54:	65e5      	str	r5, [r4, #92]	; 0x5c
 801aa56:	4650      	mov	r0, sl
 801aa58:	f7eb f94c 	bl	8005cf4 <_ZN8touchgfx8DrawableC1Ev>
 801aa5c:	6626      	str	r6, [r4, #96]	; 0x60
 801aa5e:	f8c4 5088 	str.w	r5, [r4, #136]	; 0x88
 801aa62:	4648      	mov	r0, r9
 801aa64:	f7eb f946 	bl	8005cf4 <_ZN8touchgfx8DrawableC1Ev>
 801aa68:	f8c4 608c 	str.w	r6, [r4, #140]	; 0x8c
 801aa6c:	f8c4 50b4 	str.w	r5, [r4, #180]	; 0xb4
 801aa70:	4658      	mov	r0, fp
 801aa72:	f7eb f93f 	bl	8005cf4 <_ZN8touchgfx8DrawableC1Ev>
 801aa76:	f8c4 60b8 	str.w	r6, [r4, #184]	; 0xb8
 801aa7a:	f8c4 50e0 	str.w	r5, [r4, #224]	; 0xe0
 801aa7e:	4640      	mov	r0, r8
 801aa80:	f7eb f938 	bl	8005cf4 <_ZN8touchgfx8DrawableC1Ev>
 801aa84:	9b02      	ldr	r3, [sp, #8]
 801aa86:	9903      	ldr	r1, [sp, #12]
 801aa88:	4620      	mov	r0, r4
 801aa8a:	f8c4 60e4 	str.w	r6, [r4, #228]	; 0xe4
 801aa8e:	f8a4 1118 	strh.w	r1, [r4, #280]	; 0x118
 801aa92:	4619      	mov	r1, r3
 801aa94:	f8c4 510c 	str.w	r5, [r4, #268]	; 0x10c
 801aa98:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
 801aa9c:	f8c4 5114 	str.w	r5, [r4, #276]	; 0x114
 801aaa0:	f8a4 511a 	strh.w	r5, [r4, #282]	; 0x11a
 801aaa4:	f8a4 511c 	strh.w	r5, [r4, #284]	; 0x11c
 801aaa8:	f8c4 5120 	str.w	r5, [r4, #288]	; 0x120
 801aaac:	f8c4 5124 	str.w	r5, [r4, #292]	; 0x124
 801aab0:	f7fd faae 	bl	8018010 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 801aab4:	4659      	mov	r1, fp
 801aab6:	4620      	mov	r0, r4
 801aab8:	f7fd faaa 	bl	8018010 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 801aabc:	4651      	mov	r1, sl
 801aabe:	4620      	mov	r0, r4
 801aac0:	f7fd faa6 	bl	8018010 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 801aac4:	4649      	mov	r1, r9
 801aac6:	4620      	mov	r0, r4
 801aac8:	f7fd faa2 	bl	8018010 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 801aacc:	4641      	mov	r1, r8
 801aace:	4620      	mov	r0, r4
 801aad0:	f7fd fa9e 	bl	8018010 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 801aad4:	4620      	mov	r0, r4
 801aad6:	9500      	str	r5, [sp, #0]
 801aad8:	462b      	mov	r3, r5
 801aada:	462a      	mov	r2, r5
 801aadc:	4629      	mov	r1, r5
 801aade:	f7ff ff4b 	bl	801a978 <_ZN8touchgfx17AbstractDataGraph18setGraphAreaMarginEssss>
 801aae2:	4620      	mov	r0, r4
 801aae4:	f884 7024 	strb.w	r7, [r4, #36]	; 0x24
 801aae8:	b005      	add	sp, #20
 801aaea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801aaee:	bf00      	nop
 801aaf0:	0802f4d8 	.word	0x0802f4d8
 801aaf4:	0802e83c 	.word	0x0802e83c

0801aaf8 <_ZNK8touchgfx17AbstractDataGraph19convertToGraphScaleEii>:
 801aaf8:	460b      	mov	r3, r1
 801aafa:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 801aafc:	4291      	cmp	r1, r2
 801aafe:	4618      	mov	r0, r3
 801ab00:	d001      	beq.n	801ab06 <_ZNK8touchgfx17AbstractDataGraph19convertToGraphScaleEii+0xe>
 801ab02:	f005 b890 	b.w	801fc26 <_ZN8touchgfx6muldivElll>
 801ab06:	4770      	bx	lr

0801ab08 <_ZN8touchgfx22AbstractDataGraphWithY8setScaleEi>:
 801ab08:	b538      	push	{r3, r4, r5, lr}
 801ab0a:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
 801ab0c:	4604      	mov	r4, r0
 801ab0e:	62c1      	str	r1, [r0, #44]	; 0x2c
 801ab10:	462a      	mov	r2, r5
 801ab12:	f8d0 1134 	ldr.w	r1, [r0, #308]	; 0x134
 801ab16:	f7ff ffef 	bl	801aaf8 <_ZNK8touchgfx17AbstractDataGraph19convertToGraphScaleEii>
 801ab1a:	462a      	mov	r2, r5
 801ab1c:	f8c4 0134 	str.w	r0, [r4, #308]	; 0x134
 801ab20:	4620      	mov	r0, r4
 801ab22:	f8d4 1130 	ldr.w	r1, [r4, #304]	; 0x130
 801ab26:	f7ff ffe7 	bl	801aaf8 <_ZNK8touchgfx17AbstractDataGraph19convertToGraphScaleEii>
 801ab2a:	f8c4 0130 	str.w	r0, [r4, #304]	; 0x130
 801ab2e:	bd38      	pop	{r3, r4, r5, pc}

0801ab30 <_ZN8touchgfx22AbstractDataGraphWithYC1EsPi>:
 801ab30:	b570      	push	{r4, r5, r6, lr}
 801ab32:	4604      	mov	r4, r0
 801ab34:	460d      	mov	r5, r1
 801ab36:	4616      	mov	r6, r2
 801ab38:	f7ff ff6c 	bl	801aa14 <_ZN8touchgfx17AbstractDataGraphC1Es>
 801ab3c:	2100      	movs	r1, #0
 801ab3e:	4b11      	ldr	r3, [pc, #68]	; (801ab84 <_ZN8touchgfx22AbstractDataGraphWithYC1EsPi+0x54>)
 801ab40:	f8c4 6128 	str.w	r6, [r4, #296]	; 0x128
 801ab44:	6023      	str	r3, [r4, #0]
 801ab46:	428d      	cmp	r5, r1
 801ab48:	f04f 0301 	mov.w	r3, #1
 801ab4c:	f8c4 112c 	str.w	r1, [r4, #300]	; 0x12c
 801ab50:	f8c4 1130 	str.w	r1, [r4, #304]	; 0x130
 801ab54:	f8c4 3134 	str.w	r3, [r4, #308]	; 0x134
 801ab58:	f8c4 1138 	str.w	r1, [r4, #312]	; 0x138
 801ab5c:	f8c4 113c 	str.w	r1, [r4, #316]	; 0x13c
 801ab60:	f8c4 1140 	str.w	r1, [r4, #320]	; 0x140
 801ab64:	f8c4 1144 	str.w	r1, [r4, #324]	; 0x144
 801ab68:	dc06      	bgt.n	801ab78 <_ZN8touchgfx22AbstractDataGraphWithYC1EsPi+0x48>
 801ab6a:	4b07      	ldr	r3, [pc, #28]	; (801ab88 <_ZN8touchgfx22AbstractDataGraphWithYC1EsPi+0x58>)
 801ab6c:	f44f 71e9 	mov.w	r1, #466	; 0x1d2
 801ab70:	4a06      	ldr	r2, [pc, #24]	; (801ab8c <_ZN8touchgfx22AbstractDataGraphWithYC1EsPi+0x5c>)
 801ab72:	4807      	ldr	r0, [pc, #28]	; (801ab90 <_ZN8touchgfx22AbstractDataGraphWithYC1EsPi+0x60>)
 801ab74:	f010 fe80 	bl	802b878 <__assert_func>
 801ab78:	4620      	mov	r0, r4
 801ab7a:	1e6a      	subs	r2, r5, #1
 801ab7c:	f7ff fbaa 	bl	801a2d4 <_ZN8touchgfx22AbstractDataGraphWithY14setGraphRangeXEii>
 801ab80:	4620      	mov	r0, r4
 801ab82:	bd70      	pop	{r4, r5, r6, pc}
 801ab84:	0802f5cc 	.word	0x0802f5cc
 801ab88:	0802f4c3 	.word	0x0802f4c3
 801ab8c:	0802f782 	.word	0x0802f782
 801ab90:	0802f485 	.word	0x0802f485

0801ab94 <_ZN8touchgfx22AbstractDataGraphWithY18addDataPointScaledEi>:
 801ab94:	b570      	push	{r4, r5, r6, lr}
 801ab96:	6803      	ldr	r3, [r0, #0]
 801ab98:	4604      	mov	r4, r0
 801ab9a:	460d      	mov	r5, r1
 801ab9c:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 801aba0:	4798      	blx	r3
 801aba2:	f8d4 312c 	ldr.w	r3, [r4, #300]	; 0x12c
 801aba6:	4629      	mov	r1, r5
 801aba8:	4620      	mov	r0, r4
 801abaa:	3301      	adds	r3, #1
 801abac:	f8c4 312c 	str.w	r3, [r4, #300]	; 0x12c
 801abb0:	6823      	ldr	r3, [r4, #0]
 801abb2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801abb6:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 801abba:	4718      	bx	r3

0801abbc <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEi>:
 801abbc:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 801abbe:	4359      	muls	r1, r3
 801abc0:	f7ff bfe8 	b.w	801ab94 <_ZN8touchgfx22AbstractDataGraphWithY18addDataPointScaledEi>

0801abc4 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>:
 801abc4:	b510      	push	{r4, lr}
 801abc6:	4604      	mov	r4, r0
 801abc8:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 801abca:	f7ff fc2e 	bl	801a42a <_ZN8touchgfx17AbstractDataGraph12float2scaledEfi>
 801abce:	4601      	mov	r1, r0
 801abd0:	4620      	mov	r0, r4
 801abd2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801abd6:	f7ff bfdd 	b.w	801ab94 <_ZN8touchgfx22AbstractDataGraphWithY18addDataPointScaledEi>

0801abda <_ZNK8touchgfx20AbstractGraphElement16indexToScreenYQ5EPKNS_17AbstractDataGraphEs.constprop.9>:
 801abda:	6803      	ldr	r3, [r0, #0]
 801abdc:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 801abe0:	4718      	bx	r3

0801abe2 <_ZNK8touchgfx20AbstractGraphElement16indexToScreenXQ5EPKNS_17AbstractDataGraphEs.constprop.11>:
 801abe2:	6803      	ldr	r3, [r0, #0]
 801abe4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 801abe8:	4718      	bx	r3

0801abea <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 801abea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801abec:	4604      	mov	r4, r0
 801abee:	4608      	mov	r0, r1
 801abf0:	460d      	mov	r5, r1
 801abf2:	f7fd fb92 	bl	801831a <_ZNK8touchgfx4Rect7isEmptyEv>
 801abf6:	b978      	cbnz	r0, 801ac18 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
 801abf8:	4620      	mov	r0, r4
 801abfa:	f7fd fb8e 	bl	801831a <_ZNK8touchgfx4Rect7isEmptyEv>
 801abfe:	f9b5 6000 	ldrsh.w	r6, [r5]
 801ac02:	b150      	cbz	r0, 801ac1a <_ZN8touchgfx4Rect11expandToFitERKS0_+0x30>
 801ac04:	8026      	strh	r6, [r4, #0]
 801ac06:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 801ac0a:	8063      	strh	r3, [r4, #2]
 801ac0c:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 801ac10:	80a3      	strh	r3, [r4, #4]
 801ac12:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 801ac16:	80e3      	strh	r3, [r4, #6]
 801ac18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ac1a:	f9b4 1000 	ldrsh.w	r1, [r4]
 801ac1e:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 801ac22:	42b1      	cmp	r1, r6
 801ac24:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 801ac28:	f8b5 c004 	ldrh.w	ip, [r5, #4]
 801ac2c:	460f      	mov	r7, r1
 801ac2e:	88ed      	ldrh	r5, [r5, #6]
 801ac30:	bfa8      	it	ge
 801ac32:	4637      	movge	r7, r6
 801ac34:	4293      	cmp	r3, r2
 801ac36:	4618      	mov	r0, r3
 801ac38:	4466      	add	r6, ip
 801ac3a:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 801ac3e:	bfa8      	it	ge
 801ac40:	4610      	movge	r0, r2
 801ac42:	442a      	add	r2, r5
 801ac44:	88e5      	ldrh	r5, [r4, #6]
 801ac46:	4461      	add	r1, ip
 801ac48:	b236      	sxth	r6, r6
 801ac4a:	8027      	strh	r7, [r4, #0]
 801ac4c:	442b      	add	r3, r5
 801ac4e:	b209      	sxth	r1, r1
 801ac50:	b212      	sxth	r2, r2
 801ac52:	8060      	strh	r0, [r4, #2]
 801ac54:	b21b      	sxth	r3, r3
 801ac56:	428e      	cmp	r6, r1
 801ac58:	bfac      	ite	ge
 801ac5a:	ebc7 0106 	rsbge	r1, r7, r6
 801ac5e:	ebc7 0101 	rsblt	r1, r7, r1
 801ac62:	429a      	cmp	r2, r3
 801ac64:	bfac      	ite	ge
 801ac66:	ebc0 0202 	rsbge	r2, r0, r2
 801ac6a:	ebc0 0203 	rsblt	r2, r0, r3
 801ac6e:	80a1      	strh	r1, [r4, #4]
 801ac70:	80e2      	strh	r2, [r4, #6]
 801ac72:	e7d1      	b.n	801ac18 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>

0801ac74 <_ZNK8touchgfx7CWRUtil2Q54ceilEv>:
 801ac74:	6800      	ldr	r0, [r0, #0]
 801ac76:	2800      	cmp	r0, #0
 801ac78:	bfb9      	ittee	lt
 801ac7a:	2320      	movlt	r3, #32
 801ac7c:	fb90 f0f3 	sdivlt	r0, r0, r3
 801ac80:	301f      	addge	r0, #31
 801ac82:	1140      	asrge	r0, r0, #5
 801ac84:	4770      	bx	lr

0801ac86 <_ZNK8touchgfx20AbstractGraphElement7roundQ5ENS_7CWRUtil2Q5E.constprop.10>:
 801ac86:	b507      	push	{r0, r1, r2, lr}
 801ac88:	ab02      	add	r3, sp, #8
 801ac8a:	f843 0d04 	str.w	r0, [r3, #-4]!
 801ac8e:	4618      	mov	r0, r3
 801ac90:	f7ff fbaa 	bl	801a3e8 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 801ac94:	0140      	lsls	r0, r0, #5
 801ac96:	b003      	add	sp, #12
 801ac98:	f85d fb04 	ldr.w	pc, [sp], #4

0801ac9c <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_>:
 801ac9c:	b510      	push	{r4, lr}
 801ac9e:	ea80 73e0 	eor.w	r3, r0, r0, asr #31
 801aca2:	ea81 74e1 	eor.w	r4, r1, r1, asr #31
 801aca6:	eba3 73e0 	sub.w	r3, r3, r0, asr #31
 801acaa:	eba4 74e1 	sub.w	r4, r4, r1, asr #31
 801acae:	139b      	asrs	r3, r3, #14
 801acb0:	13a4      	asrs	r4, r4, #14
 801acb2:	429c      	cmp	r4, r3
 801acb4:	bfb8      	it	lt
 801acb6:	461c      	movlt	r4, r3
 801acb8:	2c01      	cmp	r4, #1
 801acba:	dd07      	ble.n	801accc <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_+0x30>
 801acbc:	fb91 f1f4 	sdiv	r1, r1, r4
 801acc0:	fb90 f0f4 	sdiv	r0, r0, r4
 801acc4:	f7ff ffea 	bl	801ac9c <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_>
 801acc8:	4360      	muls	r0, r4
 801acca:	bd10      	pop	{r4, pc}
 801accc:	4340      	muls	r0, r0
 801acce:	fb01 0101 	mla	r1, r1, r1, r0
 801acd2:	2000      	movs	r0, #0
 801acd4:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 801acd8:	bfb4      	ite	lt
 801acda:	f44f 4380 	movlt.w	r3, #16384	; 0x4000
 801acde:	f04f 4380 	movge.w	r3, #1073741824	; 0x40000000
 801ace2:	18c2      	adds	r2, r0, r3
 801ace4:	428a      	cmp	r2, r1
 801ace6:	bf9c      	itt	ls
 801ace8:	1898      	addls	r0, r3, r2
 801acea:	1a89      	subls	r1, r1, r2
 801acec:	089b      	lsrs	r3, r3, #2
 801acee:	ea4f 0050 	mov.w	r0, r0, lsr #1
 801acf2:	d1f6      	bne.n	801ace2 <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_+0x46>
 801acf4:	e7e9      	b.n	801acca <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_+0x2e>
	...

0801acf8 <_ZN8touchgfx20AbstractGraphElementC1Ev>:
 801acf8:	b510      	push	{r4, lr}
 801acfa:	4604      	mov	r4, r0
 801acfc:	f7ff f9fa 	bl	801a0f4 <_ZN8touchgfx12CanvasWidgetC1Ev>
 801ad00:	4b02      	ldr	r3, [pc, #8]	; (801ad0c <_ZN8touchgfx20AbstractGraphElementC1Ev+0x14>)
 801ad02:	4620      	mov	r0, r4
 801ad04:	6023      	str	r3, [r4, #0]
 801ad06:	2301      	movs	r3, #1
 801ad08:	6323      	str	r3, [r4, #48]	; 0x30
 801ad0a:	bd10      	pop	{r4, pc}
 801ad0c:	0802e0d8 	.word	0x0802e0d8

0801ad10 <_ZN8touchgfx20AbstractGraphElement8setScaleEi>:
 801ad10:	6301      	str	r1, [r0, #48]	; 0x30
 801ad12:	4770      	bx	lr

0801ad14 <_ZNK8touchgfx20AbstractGraphElement24xScreenRangeToIndexRangeEssRsS1_>:
 801ad14:	b410      	push	{r4}
 801ad16:	6940      	ldr	r0, [r0, #20]
 801ad18:	6940      	ldr	r0, [r0, #20]
 801ad1a:	6804      	ldr	r4, [r0, #0]
 801ad1c:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
 801ad20:	46a4      	mov	ip, r4
 801ad22:	f85d 4b04 	ldr.w	r4, [sp], #4
 801ad26:	4760      	bx	ip

0801ad28 <_ZNK8touchgfx20AbstractGraphElement21rectFromQ5CoordinatesENS_7CWRUtil2Q5ES2_S2_S2_>:
 801ad28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ad2a:	9906      	ldr	r1, [sp, #24]
 801ad2c:	4606      	mov	r6, r0
 801ad2e:	461c      	mov	r4, r3
 801ad30:	2020      	movs	r0, #32
 801ad32:	4291      	cmp	r1, r2
 801ad34:	bfbc      	itt	lt
 801ad36:	9206      	strlt	r2, [sp, #24]
 801ad38:	460a      	movlt	r2, r1
 801ad3a:	9907      	ldr	r1, [sp, #28]
 801ad3c:	428b      	cmp	r3, r1
 801ad3e:	bfc4      	itt	gt
 801ad40:	460c      	movgt	r4, r1
 801ad42:	9307      	strgt	r3, [sp, #28]
 801ad44:	fb92 f5f0 	sdiv	r5, r2, r0
 801ad48:	fb94 f4f0 	sdiv	r4, r4, r0
 801ad4c:	a806      	add	r0, sp, #24
 801ad4e:	f7ff ff91 	bl	801ac74 <_ZNK8touchgfx7CWRUtil2Q54ceilEv>
 801ad52:	4607      	mov	r7, r0
 801ad54:	a807      	add	r0, sp, #28
 801ad56:	f7ff ff8d 	bl	801ac74 <_ZNK8touchgfx7CWRUtil2Q54ceilEv>
 801ad5a:	1b7a      	subs	r2, r7, r5
 801ad5c:	1b00      	subs	r0, r0, r4
 801ad5e:	8035      	strh	r5, [r6, #0]
 801ad60:	8074      	strh	r4, [r6, #2]
 801ad62:	80f0      	strh	r0, [r6, #6]
 801ad64:	4630      	mov	r0, r6
 801ad66:	80b2      	strh	r2, [r6, #4]
 801ad68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801ad6a <_ZNK8touchgfx20AbstractGraphElement10rectAroundENS_7CWRUtil2Q5ES2_S2_>:
 801ad6a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801ad6c:	9c08      	ldr	r4, [sp, #32]
 801ad6e:	2602      	movs	r6, #2
 801ad70:	4605      	mov	r5, r0
 801ad72:	3401      	adds	r4, #1
 801ad74:	fb94 f4f6 	sdiv	r4, r4, r6
 801ad78:	18a6      	adds	r6, r4, r2
 801ad7a:	191f      	adds	r7, r3, r4
 801ad7c:	1b12      	subs	r2, r2, r4
 801ad7e:	1b1b      	subs	r3, r3, r4
 801ad80:	e9cd 6700 	strd	r6, r7, [sp]
 801ad84:	f7ff ffd0 	bl	801ad28 <_ZNK8touchgfx20AbstractGraphElement21rectFromQ5CoordinatesENS_7CWRUtil2Q5ES2_S2_S2_>
 801ad88:	4628      	mov	r0, r5
 801ad8a:	b003      	add	sp, #12
 801ad8c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801ad8e <_ZN8touchgfx16GraphElementLine22invalidateGraphPointAtEs>:
 801ad8e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ad92:	6943      	ldr	r3, [r0, #20]
 801ad94:	b089      	sub	sp, #36	; 0x24
 801ad96:	f890 9034 	ldrb.w	r9, [r0, #52]	; 0x34
 801ad9a:	460d      	mov	r5, r1
 801ad9c:	695c      	ldr	r4, [r3, #20]
 801ad9e:	4680      	mov	r8, r0
 801ada0:	ea4f 1949 	mov.w	r9, r9, lsl #5
 801ada4:	af02      	add	r7, sp, #8
 801ada6:	4620      	mov	r0, r4
 801ada8:	f7ff ff1b 	bl	801abe2 <_ZNK8touchgfx20AbstractGraphElement16indexToScreenXQ5EPKNS_17AbstractDataGraphEs.constprop.11>
 801adac:	4606      	mov	r6, r0
 801adae:	4629      	mov	r1, r5
 801adb0:	4620      	mov	r0, r4
 801adb2:	f7ff ff12 	bl	801abda <_ZNK8touchgfx20AbstractGraphElement16indexToScreenYQ5EPKNS_17AbstractDataGraphEs.constprop.9>
 801adb6:	4632      	mov	r2, r6
 801adb8:	4603      	mov	r3, r0
 801adba:	f8cd 9000 	str.w	r9, [sp]
 801adbe:	4641      	mov	r1, r8
 801adc0:	4638      	mov	r0, r7
 801adc2:	f7ff ffd2 	bl	801ad6a <_ZNK8touchgfx20AbstractGraphElement10rectAroundENS_7CWRUtil2Q5ES2_S2_>
 801adc6:	2d00      	cmp	r5, #0
 801adc8:	ae06      	add	r6, sp, #24
 801adca:	dd18      	ble.n	801adfe <_ZN8touchgfx16GraphElementLine22invalidateGraphPointAtEs+0x70>
 801adcc:	f105 3aff 	add.w	sl, r5, #4294967295
 801add0:	4620      	mov	r0, r4
 801add2:	fa0f fa8a 	sxth.w	sl, sl
 801add6:	4651      	mov	r1, sl
 801add8:	f7ff ff03 	bl	801abe2 <_ZNK8touchgfx20AbstractGraphElement16indexToScreenXQ5EPKNS_17AbstractDataGraphEs.constprop.11>
 801addc:	4683      	mov	fp, r0
 801adde:	4651      	mov	r1, sl
 801ade0:	4620      	mov	r0, r4
 801ade2:	f7ff fefa 	bl	801abda <_ZNK8touchgfx20AbstractGraphElement16indexToScreenYQ5EPKNS_17AbstractDataGraphEs.constprop.9>
 801ade6:	4641      	mov	r1, r8
 801ade8:	4603      	mov	r3, r0
 801adea:	f8cd 9000 	str.w	r9, [sp]
 801adee:	4630      	mov	r0, r6
 801adf0:	465a      	mov	r2, fp
 801adf2:	f7ff ffba 	bl	801ad6a <_ZNK8touchgfx20AbstractGraphElement10rectAroundENS_7CWRUtil2Q5ES2_S2_>
 801adf6:	4631      	mov	r1, r6
 801adf8:	4638      	mov	r0, r7
 801adfa:	f7ff fef6 	bl	801abea <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801adfe:	4620      	mov	r0, r4
 801ae00:	f7ff fc74 	bl	801a6ec <_ZNK8touchgfx17AbstractDataGraph15getUsedCapacityEv>
 801ae04:	3801      	subs	r0, #1
 801ae06:	4285      	cmp	r5, r0
 801ae08:	da16      	bge.n	801ae38 <_ZN8touchgfx16GraphElementLine22invalidateGraphPointAtEs+0xaa>
 801ae0a:	3501      	adds	r5, #1
 801ae0c:	4620      	mov	r0, r4
 801ae0e:	b22d      	sxth	r5, r5
 801ae10:	4629      	mov	r1, r5
 801ae12:	f7ff fee6 	bl	801abe2 <_ZNK8touchgfx20AbstractGraphElement16indexToScreenXQ5EPKNS_17AbstractDataGraphEs.constprop.11>
 801ae16:	4682      	mov	sl, r0
 801ae18:	4629      	mov	r1, r5
 801ae1a:	4620      	mov	r0, r4
 801ae1c:	f7ff fedd 	bl	801abda <_ZNK8touchgfx20AbstractGraphElement16indexToScreenYQ5EPKNS_17AbstractDataGraphEs.constprop.9>
 801ae20:	4641      	mov	r1, r8
 801ae22:	4603      	mov	r3, r0
 801ae24:	f8cd 9000 	str.w	r9, [sp]
 801ae28:	4630      	mov	r0, r6
 801ae2a:	4652      	mov	r2, sl
 801ae2c:	f7ff ff9d 	bl	801ad6a <_ZNK8touchgfx20AbstractGraphElement10rectAroundENS_7CWRUtil2Q5ES2_S2_>
 801ae30:	4631      	mov	r1, r6
 801ae32:	4638      	mov	r0, r7
 801ae34:	f7ff fed9 	bl	801abea <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801ae38:	4620      	mov	r0, r4
 801ae3a:	f7ff fb99 	bl	801a570 <_ZNK8touchgfx17AbstractDataGraph22getGraphAreaPaddingTopEv>
 801ae3e:	4681      	mov	r9, r0
 801ae40:	4620      	mov	r0, r4
 801ae42:	f7ff fc1d 	bl	801a680 <_ZNK8touchgfx17AbstractDataGraph33getGraphAreaWidthIncludingPaddingEv>
 801ae46:	4605      	mov	r5, r0
 801ae48:	4620      	mov	r0, r4
 801ae4a:	f7ff fc1c 	bl	801a686 <_ZNK8touchgfx17AbstractDataGraph18getGraphAreaHeightEv>
 801ae4e:	f8ad 0016 	strh.w	r0, [sp, #22]
 801ae52:	2300      	movs	r3, #0
 801ae54:	f8ad 9012 	strh.w	r9, [sp, #18]
 801ae58:	f8ad 5014 	strh.w	r5, [sp, #20]
 801ae5c:	f8ad 3010 	strh.w	r3, [sp, #16]
 801ae60:	e897 0003 	ldmia.w	r7, {r0, r1}
 801ae64:	e886 0003 	stmia.w	r6, {r0, r1}
 801ae68:	a904      	add	r1, sp, #16
 801ae6a:	4630      	mov	r0, r6
 801ae6c:	f7fd fa12 	bl	8018294 <_ZN8touchgfx4RectaNERKS0_>
 801ae70:	f8d8 3000 	ldr.w	r3, [r8]
 801ae74:	e896 0003 	ldmia.w	r6, {r0, r1}
 801ae78:	691b      	ldr	r3, [r3, #16]
 801ae7a:	e887 0003 	stmia.w	r7, {r0, r1}
 801ae7e:	4639      	mov	r1, r7
 801ae80:	4640      	mov	r0, r8
 801ae82:	4798      	blx	r3
 801ae84:	b009      	add	sp, #36	; 0x24
 801ae86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801ae8c <_ZN8touchgfx16GraphElementLineC1Ev>:
 801ae8c:	b510      	push	{r4, lr}
 801ae8e:	4604      	mov	r4, r0
 801ae90:	f7ff ff32 	bl	801acf8 <_ZN8touchgfx20AbstractGraphElementC1Ev>
 801ae94:	4b03      	ldr	r3, [pc, #12]	; (801aea4 <_ZN8touchgfx16GraphElementLineC1Ev+0x18>)
 801ae96:	4620      	mov	r0, r4
 801ae98:	6023      	str	r3, [r4, #0]
 801ae9a:	2302      	movs	r3, #2
 801ae9c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 801aea0:	bd10      	pop	{r4, pc}
 801aea2:	bf00      	nop
 801aea4:	0802f7d4 	.word	0x0802f7d4

0801aea8 <_ZN8touchgfx16GraphElementLine12setLineWidthEh>:
 801aea8:	f880 1034 	strb.w	r1, [r0, #52]	; 0x34
 801aeac:	4770      	bx	lr

0801aeae <_ZNK8touchgfx16GraphElementLine14drawIndexRangeERNS_6CanvasEPKNS_17AbstractDataGraphEss>:
 801aeae:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801aeb2:	b087      	sub	sp, #28
 801aeb4:	461d      	mov	r5, r3
 801aeb6:	4690      	mov	r8, r2
 801aeb8:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	; 0x40
 801aebc:	9102      	str	r1, [sp, #8]
 801aebe:	429d      	cmp	r5, r3
 801aec0:	9304      	str	r3, [sp, #16]
 801aec2:	d059      	beq.n	801af78 <_ZNK8touchgfx16GraphElementLine14drawIndexRangeERNS_6CanvasEPKNS_17AbstractDataGraphEss+0xca>
 801aec4:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
 801aec8:	4629      	mov	r1, r5
 801aeca:	4610      	mov	r0, r2
 801aecc:	462c      	mov	r4, r5
 801aece:	015b      	lsls	r3, r3, #5
 801aed0:	9303      	str	r3, [sp, #12]
 801aed2:	f7ff fe86 	bl	801abe2 <_ZNK8touchgfx20AbstractGraphElement16indexToScreenXQ5EPKNS_17AbstractDataGraphEs.constprop.11>
 801aed6:	f7ff fed6 	bl	801ac86 <_ZNK8touchgfx20AbstractGraphElement7roundQ5ENS_7CWRUtil2Q5E.constprop.10>
 801aeda:	4629      	mov	r1, r5
 801aedc:	4606      	mov	r6, r0
 801aede:	4640      	mov	r0, r8
 801aee0:	f7ff fe7b 	bl	801abda <_ZNK8touchgfx20AbstractGraphElement16indexToScreenYQ5EPKNS_17AbstractDataGraphEs.constprop.9>
 801aee4:	f7ff fecf 	bl	801ac86 <_ZNK8touchgfx20AbstractGraphElement7roundQ5ENS_7CWRUtil2Q5E.constprop.10>
 801aee8:	4631      	mov	r1, r6
 801aeea:	4602      	mov	r2, r0
 801aeec:	4607      	mov	r7, r0
 801aeee:	9802      	ldr	r0, [sp, #8]
 801aef0:	f00f f8eb 	bl	802a0ca <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>
 801aef4:	2301      	movs	r3, #1
 801aef6:	9300      	str	r3, [sp, #0]
 801aef8:	4640      	mov	r0, r8
 801aefa:	9b00      	ldr	r3, [sp, #0]
 801aefc:	441c      	add	r4, r3
 801aefe:	b224      	sxth	r4, r4
 801af00:	4621      	mov	r1, r4
 801af02:	f7ff fe6e 	bl	801abe2 <_ZNK8touchgfx20AbstractGraphElement16indexToScreenXQ5EPKNS_17AbstractDataGraphEs.constprop.11>
 801af06:	f7ff febe 	bl	801ac86 <_ZNK8touchgfx20AbstractGraphElement7roundQ5ENS_7CWRUtil2Q5E.constprop.10>
 801af0a:	4621      	mov	r1, r4
 801af0c:	9001      	str	r0, [sp, #4]
 801af0e:	4640      	mov	r0, r8
 801af10:	f7ff fe63 	bl	801abda <_ZNK8touchgfx20AbstractGraphElement16indexToScreenYQ5EPKNS_17AbstractDataGraphEs.constprop.9>
 801af14:	f7ff feb7 	bl	801ac86 <_ZNK8touchgfx20AbstractGraphElement7roundQ5ENS_7CWRUtil2Q5E.constprop.10>
 801af18:	9b01      	ldr	r3, [sp, #4]
 801af1a:	eba0 0a07 	sub.w	sl, r0, r7
 801af1e:	4681      	mov	r9, r0
 801af20:	eba3 0b06 	sub.w	fp, r3, r6
 801af24:	4651      	mov	r1, sl
 801af26:	4658      	mov	r0, fp
 801af28:	f7ff feb8 	bl	801ac9c <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_>
 801af2c:	b310      	cbz	r0, 801af74 <_ZNK8touchgfx16GraphElementLine14drawIndexRangeERNS_6CanvasEPKNS_17AbstractDataGraphEss+0xc6>
 801af2e:	4602      	mov	r2, r0
 801af30:	4651      	mov	r1, sl
 801af32:	9005      	str	r0, [sp, #20]
 801af34:	9803      	ldr	r0, [sp, #12]
 801af36:	f004 fe76 	bl	801fc26 <_ZN8touchgfx6muldivElll>
 801af3a:	2302      	movs	r3, #2
 801af3c:	4659      	mov	r1, fp
 801af3e:	fb90 faf3 	sdiv	sl, r0, r3
 801af42:	9b05      	ldr	r3, [sp, #20]
 801af44:	9803      	ldr	r0, [sp, #12]
 801af46:	461a      	mov	r2, r3
 801af48:	f004 fe6d 	bl	801fc26 <_ZN8touchgfx6muldivElll>
 801af4c:	2302      	movs	r3, #2
 801af4e:	eba6 010a 	sub.w	r1, r6, sl
 801af52:	fb90 fbf3 	sdiv	fp, r0, r3
 801af56:	9802      	ldr	r0, [sp, #8]
 801af58:	eb0b 0207 	add.w	r2, fp, r7
 801af5c:	f00f f844 	bl	8029fe8 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 801af60:	9b01      	ldr	r3, [sp, #4]
 801af62:	eb09 020b 	add.w	r2, r9, fp
 801af66:	9802      	ldr	r0, [sp, #8]
 801af68:	eba3 010a 	sub.w	r1, r3, sl
 801af6c:	464f      	mov	r7, r9
 801af6e:	f00f f83b 	bl	8029fe8 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 801af72:	9e01      	ldr	r6, [sp, #4]
 801af74:	42a5      	cmp	r5, r4
 801af76:	db02      	blt.n	801af7e <_ZNK8touchgfx16GraphElementLine14drawIndexRangeERNS_6CanvasEPKNS_17AbstractDataGraphEss+0xd0>
 801af78:	b007      	add	sp, #28
 801af7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801af7e:	9b00      	ldr	r3, [sp, #0]
 801af80:	9a04      	ldr	r2, [sp, #16]
 801af82:	42a2      	cmp	r2, r4
 801af84:	bf08      	it	eq
 801af86:	f04f 33ff 	moveq.w	r3, #4294967295
 801af8a:	e7b4      	b.n	801aef6 <_ZNK8touchgfx16GraphElementLine14drawIndexRangeERNS_6CanvasEPKNS_17AbstractDataGraphEss+0x48>

0801af8c <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE>:
 801af8c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801af90:	6943      	ldr	r3, [r0, #20]
 801af92:	b0b5      	sub	sp, #212	; 0xd4
 801af94:	4606      	mov	r6, r0
 801af96:	460f      	mov	r7, r1
 801af98:	695d      	ldr	r5, [r3, #20]
 801af9a:	4628      	mov	r0, r5
 801af9c:	f7ff fba6 	bl	801a6ec <_ZNK8touchgfx17AbstractDataGraph15getUsedCapacityEv>
 801afa0:	2801      	cmp	r0, #1
 801afa2:	dc04      	bgt.n	801afae <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0x22>
 801afa4:	2501      	movs	r5, #1
 801afa6:	4628      	mov	r0, r5
 801afa8:	b035      	add	sp, #212	; 0xd4
 801afaa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801afae:	f896 3034 	ldrb.w	r3, [r6, #52]	; 0x34
 801afb2:	ac34      	add	r4, sp, #208	; 0xd0
 801afb4:	011b      	lsls	r3, r3, #4
 801afb6:	f844 3dbc 	str.w	r3, [r4, #-188]!
 801afba:	4620      	mov	r0, r4
 801afbc:	f7ff fe5a 	bl	801ac74 <_ZNK8touchgfx7CWRUtil2Q54ceilEv>
 801afc0:	8839      	ldrh	r1, [r7, #0]
 801afc2:	88ba      	ldrh	r2, [r7, #4]
 801afc4:	b280      	uxth	r0, r0
 801afc6:	f10d 030a 	add.w	r3, sp, #10
 801afca:	440a      	add	r2, r1
 801afcc:	1a09      	subs	r1, r1, r0
 801afce:	9300      	str	r3, [sp, #0]
 801afd0:	ab02      	add	r3, sp, #8
 801afd2:	4402      	add	r2, r0
 801afd4:	b209      	sxth	r1, r1
 801afd6:	4630      	mov	r0, r6
 801afd8:	b212      	sxth	r2, r2
 801afda:	f7ff fe9b 	bl	801ad14 <_ZNK8touchgfx20AbstractGraphElement24xScreenRangeToIndexRangeEssRsS1_>
 801afde:	2800      	cmp	r0, #0
 801afe0:	d0e0      	beq.n	801afa4 <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0x18>
 801afe2:	4628      	mov	r0, r5
 801afe4:	f7ff fac4 	bl	801a570 <_ZNK8touchgfx17AbstractDataGraph22getGraphAreaPaddingTopEv>
 801afe8:	4681      	mov	r9, r0
 801afea:	4628      	mov	r0, r5
 801afec:	f7ff fb48 	bl	801a680 <_ZNK8touchgfx17AbstractDataGraph33getGraphAreaWidthIncludingPaddingEv>
 801aff0:	4680      	mov	r8, r0
 801aff2:	4628      	mov	r0, r5
 801aff4:	f7ff fb47 	bl	801a686 <_ZNK8touchgfx17AbstractDataGraph18getGraphAreaHeightEv>
 801aff8:	2300      	movs	r3, #0
 801affa:	4639      	mov	r1, r7
 801affc:	f8ad 0012 	strh.w	r0, [sp, #18]
 801b000:	a803      	add	r0, sp, #12
 801b002:	f8ad 300c 	strh.w	r3, [sp, #12]
 801b006:	f8ad 900e 	strh.w	r9, [sp, #14]
 801b00a:	f8ad 8010 	strh.w	r8, [sp, #16]
 801b00e:	f7fd f941 	bl	8018294 <_ZN8touchgfx4RectaNERKS0_>
 801b012:	aa03      	add	r2, sp, #12
 801b014:	4631      	mov	r1, r6
 801b016:	4620      	mov	r0, r4
 801b018:	f00e fe8c 	bl	8029d34 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE>
 801b01c:	4628      	mov	r0, r5
 801b01e:	f7ff fb50 	bl	801a6c2 <_ZNK8touchgfx17AbstractDataGraph17getGapBeforeIndexEv>
 801b022:	1e07      	subs	r7, r0, #0
 801b024:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 801b028:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 801b02c:	dd03      	ble.n	801b036 <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0xaa>
 801b02e:	42bb      	cmp	r3, r7
 801b030:	da01      	bge.n	801b036 <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0xaa>
 801b032:	42ba      	cmp	r2, r7
 801b034:	da11      	bge.n	801b05a <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0xce>
 801b036:	9200      	str	r2, [sp, #0]
 801b038:	462a      	mov	r2, r5
 801b03a:	4621      	mov	r1, r4
 801b03c:	4630      	mov	r0, r6
 801b03e:	f7ff ff36 	bl	801aeae <_ZNK8touchgfx16GraphElementLine14drawIndexRangeERNS_6CanvasEPKNS_17AbstractDataGraphEss>
 801b042:	4628      	mov	r0, r5
 801b044:	f7ff fa86 	bl	801a554 <_ZNK8touchgfx17AbstractDataGraph8getAlphaEv>
 801b048:	4601      	mov	r1, r0
 801b04a:	4620      	mov	r0, r4
 801b04c:	f00f f941 	bl	802a2d2 <_ZN8touchgfx6Canvas6renderEh>
 801b050:	4605      	mov	r5, r0
 801b052:	4620      	mov	r0, r4
 801b054:	f00f f97c 	bl	802a350 <_ZN8touchgfx6CanvasD1Ev>
 801b058:	e7a5      	b.n	801afa6 <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0x1a>
 801b05a:	1e7a      	subs	r2, r7, #1
 801b05c:	4621      	mov	r1, r4
 801b05e:	4630      	mov	r0, r6
 801b060:	b212      	sxth	r2, r2
 801b062:	9200      	str	r2, [sp, #0]
 801b064:	462a      	mov	r2, r5
 801b066:	f7ff ff22 	bl	801aeae <_ZNK8touchgfx16GraphElementLine14drawIndexRangeERNS_6CanvasEPKNS_17AbstractDataGraphEss>
 801b06a:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 801b06e:	9300      	str	r3, [sp, #0]
 801b070:	463b      	mov	r3, r7
 801b072:	e7e1      	b.n	801b038 <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0xac>

0801b074 <_ZNK8touchgfx15DataGraphScroll9realIndexEs>:
 801b074:	f9b0 3118 	ldrsh.w	r3, [r0, #280]	; 0x118
 801b078:	f9b0 211a 	ldrsh.w	r2, [r0, #282]	; 0x11a
 801b07c:	429a      	cmp	r2, r3
 801b07e:	db07      	blt.n	801b090 <_ZNK8touchgfx15DataGraphScroll9realIndexEs+0x1c>
 801b080:	f9b0 0148 	ldrsh.w	r0, [r0, #328]	; 0x148
 801b084:	4408      	add	r0, r1
 801b086:	fb90 f1f3 	sdiv	r1, r0, r3
 801b08a:	fb03 0111 	mls	r1, r3, r1, r0
 801b08e:	b209      	sxth	r1, r1
 801b090:	4608      	mov	r0, r1
 801b092:	4770      	bx	lr

0801b094 <_ZNK8touchgfx15DataGraphScroll10indexToXQ5Es>:
 801b094:	0148      	lsls	r0, r1, #5
 801b096:	4770      	bx	lr

0801b098 <_ZN8touchgfx15DataGraphScroll5clearEv>:
 801b098:	b510      	push	{r4, lr}
 801b09a:	4604      	mov	r4, r0
 801b09c:	f7ff f84e 	bl	801a13c <_ZN8touchgfx17AbstractDataGraph5clearEv>
 801b0a0:	2300      	movs	r3, #0
 801b0a2:	f8a4 3148 	strh.w	r3, [r4, #328]	; 0x148
 801b0a6:	bd10      	pop	{r4, pc}

0801b0a8 <_ZN8touchgfx15DataGraphScroll14beforeAddValueEv>:
 801b0a8:	f9b0 211a 	ldrsh.w	r2, [r0, #282]	; 0x11a
 801b0ac:	f9b0 3118 	ldrsh.w	r3, [r0, #280]	; 0x118
 801b0b0:	429a      	cmp	r2, r3
 801b0b2:	d101      	bne.n	801b0b8 <_ZN8touchgfx15DataGraphScroll14beforeAddValueEv+0x10>
 801b0b4:	f7ff bbca 	b.w	801a84c <_ZN8touchgfx17AbstractDataGraph24invalidateAllXAxisPointsEv>
 801b0b8:	4770      	bx	lr

0801b0ba <_ZNK8touchgfx15DataGraphScroll18indexToGlobalIndexEs>:
 801b0ba:	b538      	push	{r3, r4, r5, lr}
 801b0bc:	f9b0 4118 	ldrsh.w	r4, [r0, #280]	; 0x118
 801b0c0:	f9b0 511a 	ldrsh.w	r5, [r0, #282]	; 0x11a
 801b0c4:	42a5      	cmp	r5, r4
 801b0c6:	da04      	bge.n	801b0d2 <_ZNK8touchgfx15DataGraphScroll18indexToGlobalIndexEs+0x18>
 801b0c8:	6803      	ldr	r3, [r0, #0]
 801b0ca:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 801b0ce:	4798      	blx	r3
 801b0d0:	bd38      	pop	{r3, r4, r5, pc}
 801b0d2:	f8d0 012c 	ldr.w	r0, [r0, #300]	; 0x12c
 801b0d6:	4408      	add	r0, r1
 801b0d8:	1b00      	subs	r0, r0, r4
 801b0da:	e7f9      	b.n	801b0d0 <_ZNK8touchgfx15DataGraphScroll18indexToGlobalIndexEs+0x16>

0801b0dc <_ZN8touchgfx15DataGraphScroll8addValueEi>:
 801b0dc:	b570      	push	{r4, r5, r6, lr}
 801b0de:	f9b0 5148 	ldrsh.w	r5, [r0, #328]	; 0x148
 801b0e2:	4604      	mov	r4, r0
 801b0e4:	f9b0 2118 	ldrsh.w	r2, [r0, #280]	; 0x118
 801b0e8:	1c6b      	adds	r3, r5, #1
 801b0ea:	f9b0 611a 	ldrsh.w	r6, [r0, #282]	; 0x11a
 801b0ee:	b21b      	sxth	r3, r3
 801b0f0:	42ae      	cmp	r6, r5
 801b0f2:	fb93 f0f2 	sdiv	r0, r3, r2
 801b0f6:	bf08      	it	eq
 801b0f8:	f8a4 311a 	strheq.w	r3, [r4, #282]	; 0x11a
 801b0fc:	4296      	cmp	r6, r2
 801b0fe:	fb02 3010 	mls	r0, r2, r0, r3
 801b102:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 801b106:	f8a4 0148 	strh.w	r0, [r4, #328]	; 0x148
 801b10a:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
 801b10e:	d107      	bne.n	801b120 <_ZN8touchgfx15DataGraphScroll8addValueEi+0x44>
 801b110:	4620      	mov	r0, r4
 801b112:	f7ff fb80 	bl	801a816 <_ZN8touchgfx17AbstractDataGraph19invalidateGraphAreaEv>
 801b116:	4620      	mov	r0, r4
 801b118:	f7ff fb98 	bl	801a84c <_ZN8touchgfx17AbstractDataGraph24invalidateAllXAxisPointsEv>
 801b11c:	4628      	mov	r0, r5
 801b11e:	bd70      	pop	{r4, r5, r6, pc}
 801b120:	4629      	mov	r1, r5
 801b122:	4620      	mov	r0, r4
 801b124:	f7ff fb67 	bl	801a7f6 <_ZN8touchgfx17AbstractDataGraph22invalidateGraphPointAtEs>
 801b128:	e7f8      	b.n	801b11c <_ZN8touchgfx15DataGraphScroll8addValueEi+0x40>
	...

0801b12c <_ZN8touchgfx15DataGraphScrollC1EsPi>:
 801b12c:	b510      	push	{r4, lr}
 801b12e:	4604      	mov	r4, r0
 801b130:	f7ff fcfe 	bl	801ab30 <_ZN8touchgfx22AbstractDataGraphWithYC1EsPi>
 801b134:	4b03      	ldr	r3, [pc, #12]	; (801b144 <_ZN8touchgfx15DataGraphScrollC1EsPi+0x18>)
 801b136:	4620      	mov	r0, r4
 801b138:	6023      	str	r3, [r4, #0]
 801b13a:	2300      	movs	r3, #0
 801b13c:	f8a4 3148 	strh.w	r3, [r4, #328]	; 0x148
 801b140:	bd10      	pop	{r4, pc}
 801b142:	bf00      	nop
 801b144:	0802f854 	.word	0x0802f854

0801b148 <_ZNK8touchgfx14AbstractButton15getPressedStateEv>:
 801b148:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
 801b14c:	4770      	bx	lr

0801b14e <_ZN8touchgfx14AbstractButton13executeActionEv>:
 801b14e:	b510      	push	{r4, lr}
 801b150:	4604      	mov	r4, r0
 801b152:	6a80      	ldr	r0, [r0, #40]	; 0x28
 801b154:	b150      	cbz	r0, 801b16c <_ZN8touchgfx14AbstractButton13executeActionEv+0x1e>
 801b156:	6803      	ldr	r3, [r0, #0]
 801b158:	68db      	ldr	r3, [r3, #12]
 801b15a:	4798      	blx	r3
 801b15c:	b130      	cbz	r0, 801b16c <_ZN8touchgfx14AbstractButton13executeActionEv+0x1e>
 801b15e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 801b160:	4621      	mov	r1, r4
 801b162:	6803      	ldr	r3, [r0, #0]
 801b164:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b168:	689b      	ldr	r3, [r3, #8]
 801b16a:	4718      	bx	r3
 801b16c:	bd10      	pop	{r4, pc}

0801b16e <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE>:
 801b16e:	790b      	ldrb	r3, [r1, #4]
 801b170:	2b00      	cmp	r3, #0
 801b172:	bf0c      	ite	eq
 801b174:	2301      	moveq	r3, #1
 801b176:	2300      	movne	r3, #0
 801b178:	b570      	push	{r4, r5, r6, lr}
 801b17a:	4604      	mov	r4, r0
 801b17c:	f890 502c 	ldrb.w	r5, [r0, #44]	; 0x2c
 801b180:	460e      	mov	r6, r1
 801b182:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
 801b186:	d109      	bne.n	801b19c <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x2e>
 801b188:	b14d      	cbz	r5, 801b19e <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x30>
 801b18a:	7933      	ldrb	r3, [r6, #4]
 801b18c:	2b01      	cmp	r3, #1
 801b18e:	d10c      	bne.n	801b1aa <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3c>
 801b190:	6823      	ldr	r3, [r4, #0]
 801b192:	4620      	mov	r0, r4
 801b194:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801b196:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801b19a:	4718      	bx	r3
 801b19c:	b12d      	cbz	r5, 801b1aa <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3c>
 801b19e:	6823      	ldr	r3, [r4, #0]
 801b1a0:	4620      	mov	r0, r4
 801b1a2:	695b      	ldr	r3, [r3, #20]
 801b1a4:	4798      	blx	r3
 801b1a6:	2d00      	cmp	r5, #0
 801b1a8:	d1ef      	bne.n	801b18a <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x1c>
 801b1aa:	bd70      	pop	{r4, r5, r6, pc}

0801b1ac <_ZN8touchgfx13TextureMapper21setRenderingAlgorithmENS0_18RenderingAlgorithmE>:
 801b1ac:	f880 1029 	strb.w	r1, [r0, #41]	; 0x29
 801b1b0:	4770      	bx	lr

0801b1b2 <_ZNK8touchgfx13TextureMapper21getRenderingAlgorithmEv>:
 801b1b2:	f890 0029 	ldrb.w	r0, [r0, #41]	; 0x29
 801b1b6:	4770      	bx	lr

0801b1b8 <_ZN8touchgfx13TextureMapper9setXAngleEf>:
 801b1b8:	6802      	ldr	r2, [r0, #0]
 801b1ba:	ed90 1a0f 	vldr	s2, [r0, #60]	; 0x3c
 801b1be:	6e92      	ldr	r2, [r2, #104]	; 0x68
 801b1c0:	edd0 0a0e 	vldr	s1, [r0, #56]	; 0x38
 801b1c4:	4710      	bx	r2

0801b1c6 <_ZN8touchgfx13TextureMapper9setYAngleEf>:
 801b1c6:	6802      	ldr	r2, [r0, #0]
 801b1c8:	eef0 0a40 	vmov.f32	s1, s0
 801b1cc:	ed90 1a0f 	vldr	s2, [r0, #60]	; 0x3c
 801b1d0:	6e92      	ldr	r2, [r2, #104]	; 0x68
 801b1d2:	ed90 0a0d 	vldr	s0, [r0, #52]	; 0x34
 801b1d6:	4710      	bx	r2

0801b1d8 <_ZN8touchgfx13TextureMapper9setZAngleEf>:
 801b1d8:	6802      	ldr	r2, [r0, #0]
 801b1da:	eeb0 1a40 	vmov.f32	s2, s0
 801b1de:	edd0 0a0e 	vldr	s1, [r0, #56]	; 0x38
 801b1e2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 801b1e4:	ed90 0a0d 	vldr	s0, [r0, #52]	; 0x34
 801b1e8:	4710      	bx	r2

0801b1ea <_ZN8touchgfx13TextureMapper12updateXAngleEf>:
 801b1ea:	6802      	ldr	r2, [r0, #0]
 801b1ec:	ed90 1a0f 	vldr	s2, [r0, #60]	; 0x3c
 801b1f0:	6f92      	ldr	r2, [r2, #120]	; 0x78
 801b1f2:	edd0 0a0e 	vldr	s1, [r0, #56]	; 0x38
 801b1f6:	4710      	bx	r2

0801b1f8 <_ZN8touchgfx13TextureMapper12updateYAngleEf>:
 801b1f8:	6802      	ldr	r2, [r0, #0]
 801b1fa:	eef0 0a40 	vmov.f32	s1, s0
 801b1fe:	ed90 1a0f 	vldr	s2, [r0, #60]	; 0x3c
 801b202:	6f92      	ldr	r2, [r2, #120]	; 0x78
 801b204:	ed90 0a0d 	vldr	s0, [r0, #52]	; 0x34
 801b208:	4710      	bx	r2

0801b20a <_ZN8touchgfx13TextureMapper12updateZAngleEf>:
 801b20a:	6802      	ldr	r2, [r0, #0]
 801b20c:	eeb0 1a40 	vmov.f32	s2, s0
 801b210:	edd0 0a0e 	vldr	s1, [r0, #56]	; 0x38
 801b214:	6f92      	ldr	r2, [r2, #120]	; 0x78
 801b216:	ed90 0a0d 	vldr	s0, [r0, #52]	; 0x34
 801b21a:	4710      	bx	r2

0801b21c <_ZNK8touchgfx13TextureMapper9getXAngleEv>:
 801b21c:	ed90 0a0d 	vldr	s0, [r0, #52]	; 0x34
 801b220:	4770      	bx	lr

0801b222 <_ZNK8touchgfx13TextureMapper9getYAngleEv>:
 801b222:	ed90 0a0e 	vldr	s0, [r0, #56]	; 0x38
 801b226:	4770      	bx	lr

0801b228 <_ZNK8touchgfx13TextureMapper9getZAngleEv>:
 801b228:	ed90 0a0f 	vldr	s0, [r0, #60]	; 0x3c
 801b22c:	4770      	bx	lr

0801b22e <_ZNK8touchgfx13TextureMapper8getScaleEv>:
 801b22e:	ed90 0a10 	vldr	s0, [r0, #64]	; 0x40
 801b232:	4770      	bx	lr

0801b234 <_ZNK8touchgfx13TextureMapper9getOrigoXEv>:
 801b234:	ed90 0a11 	vldr	s0, [r0, #68]	; 0x44
 801b238:	4770      	bx	lr

0801b23a <_ZNK8touchgfx13TextureMapper9getOrigoYEv>:
 801b23a:	ed90 0a12 	vldr	s0, [r0, #72]	; 0x48
 801b23e:	4770      	bx	lr

0801b240 <_ZNK8touchgfx13TextureMapper9getOrigoZEv>:
 801b240:	ed90 0a13 	vldr	s0, [r0, #76]	; 0x4c
 801b244:	4770      	bx	lr

0801b246 <_ZNK8touchgfx13TextureMapper10getCameraXEv>:
 801b246:	ed90 0a14 	vldr	s0, [r0, #80]	; 0x50
 801b24a:	4770      	bx	lr

0801b24c <_ZNK8touchgfx13TextureMapper10getCameraYEv>:
 801b24c:	ed90 0a15 	vldr	s0, [r0, #84]	; 0x54
 801b250:	4770      	bx	lr

0801b252 <_ZNK8touchgfx13TextureMapper17getCameraDistanceEv>:
 801b252:	ed90 0a16 	vldr	s0, [r0, #88]	; 0x58
 801b256:	4770      	bx	lr

0801b258 <_ZN8touchgfx13TextureMapper17setBitmapPositionEii>:
 801b258:	ee07 2a90 	vmov	s15, r2
 801b25c:	6803      	ldr	r3, [r0, #0]
 801b25e:	eef8 0ae7 	vcvt.f32.s32	s1, s15
 801b262:	ee07 1a90 	vmov	s15, r1
 801b266:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 801b26a:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 801b26e:	4718      	bx	r3

0801b270 <_ZNK8touchgfx13TextureMapper18getBitmapPositionXEv>:
 801b270:	ed90 0a0b 	vldr	s0, [r0, #44]	; 0x2c
 801b274:	4770      	bx	lr

0801b276 <_ZNK8touchgfx13TextureMapper18getBitmapPositionYEv>:
 801b276:	ed90 0a0c 	vldr	s0, [r0, #48]	; 0x30
 801b27a:	4770      	bx	lr

0801b27c <_ZNK8touchgfx13TextureMapper5getX0Ev>:
 801b27c:	ed90 0a17 	vldr	s0, [r0, #92]	; 0x5c
 801b280:	4770      	bx	lr

0801b282 <_ZNK8touchgfx13TextureMapper5getX1Ev>:
 801b282:	ed90 0a1a 	vldr	s0, [r0, #104]	; 0x68
 801b286:	4770      	bx	lr

0801b288 <_ZNK8touchgfx13TextureMapper5getX2Ev>:
 801b288:	ed90 0a1d 	vldr	s0, [r0, #116]	; 0x74
 801b28c:	4770      	bx	lr

0801b28e <_ZNK8touchgfx13TextureMapper5getX3Ev>:
 801b28e:	ed90 0a20 	vldr	s0, [r0, #128]	; 0x80
 801b292:	4770      	bx	lr

0801b294 <_ZNK8touchgfx13TextureMapper5getY0Ev>:
 801b294:	ed90 0a18 	vldr	s0, [r0, #96]	; 0x60
 801b298:	4770      	bx	lr

0801b29a <_ZNK8touchgfx13TextureMapper5getY1Ev>:
 801b29a:	ed90 0a1b 	vldr	s0, [r0, #108]	; 0x6c
 801b29e:	4770      	bx	lr

0801b2a0 <_ZNK8touchgfx13TextureMapper5getY2Ev>:
 801b2a0:	ed90 0a1e 	vldr	s0, [r0, #120]	; 0x78
 801b2a4:	4770      	bx	lr

0801b2a6 <_ZNK8touchgfx13TextureMapper5getY3Ev>:
 801b2a6:	ed90 0a21 	vldr	s0, [r0, #132]	; 0x84
 801b2aa:	4770      	bx	lr

0801b2ac <_ZNK8touchgfx13TextureMapper5getZ0Ev>:
 801b2ac:	ed90 0a19 	vldr	s0, [r0, #100]	; 0x64
 801b2b0:	4770      	bx	lr

0801b2b2 <_ZNK8touchgfx13TextureMapper5getZ1Ev>:
 801b2b2:	ed90 0a1c 	vldr	s0, [r0, #112]	; 0x70
 801b2b6:	4770      	bx	lr

0801b2b8 <_ZNK8touchgfx13TextureMapper5getZ2Ev>:
 801b2b8:	ed90 0a1f 	vldr	s0, [r0, #124]	; 0x7c
 801b2bc:	4770      	bx	lr

0801b2be <_ZNK8touchgfx13TextureMapper5getZ3Ev>:
 801b2be:	ed90 0a22 	vldr	s0, [r0, #136]	; 0x88
 801b2c2:	4770      	bx	lr

0801b2c4 <_ZNK8touchgfx13TextureMapper12getSolidRectEv>:
 801b2c4:	2200      	movs	r2, #0
 801b2c6:	8002      	strh	r2, [r0, #0]
 801b2c8:	8042      	strh	r2, [r0, #2]
 801b2ca:	8082      	strh	r2, [r0, #4]
 801b2cc:	80c2      	strh	r2, [r0, #6]
 801b2ce:	4770      	bx	lr

0801b2d0 <_ZN8touchgfx13TextureMapperC1ERKNS_6BitmapE>:
 801b2d0:	b538      	push	{r3, r4, r5, lr}
 801b2d2:	2301      	movs	r3, #1
 801b2d4:	2500      	movs	r5, #0
 801b2d6:	4604      	mov	r4, r0
 801b2d8:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
 801b2dc:	4b1f      	ldr	r3, [pc, #124]	; (801b35c <_ZN8touchgfx13TextureMapperC1ERKNS_6BitmapE+0x8c>)
 801b2de:	8085      	strh	r5, [r0, #4]
 801b2e0:	80c5      	strh	r5, [r0, #6]
 801b2e2:	8105      	strh	r5, [r0, #8]
 801b2e4:	8145      	strh	r5, [r0, #10]
 801b2e6:	8185      	strh	r5, [r0, #12]
 801b2e8:	81c5      	strh	r5, [r0, #14]
 801b2ea:	8205      	strh	r5, [r0, #16]
 801b2ec:	8245      	strh	r5, [r0, #18]
 801b2ee:	61c5      	str	r5, [r0, #28]
 801b2f0:	8405      	strh	r5, [r0, #32]
 801b2f2:	8445      	strh	r5, [r0, #34]	; 0x22
 801b2f4:	f880 5024 	strb.w	r5, [r0, #36]	; 0x24
 801b2f8:	6003      	str	r3, [r0, #0]
 801b2fa:	e9c0 5505 	strd	r5, r5, [r0, #20]
 801b2fe:	880b      	ldrh	r3, [r1, #0]
 801b300:	84c3      	strh	r3, [r0, #38]	; 0x26
 801b302:	23ff      	movs	r3, #255	; 0xff
 801b304:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
 801b308:	f001 fc76 	bl	801cbf8 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 801b30c:	4b14      	ldr	r3, [pc, #80]	; (801b360 <_ZN8touchgfx13TextureMapperC1ERKNS_6BitmapE+0x90>)
 801b30e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 801b312:	4914      	ldr	r1, [pc, #80]	; (801b364 <_ZN8touchgfx13TextureMapperC1ERKNS_6BitmapE+0x94>)
 801b314:	6023      	str	r3, [r4, #0]
 801b316:	2300      	movs	r3, #0
 801b318:	f884 5029 	strb.w	r5, [r4, #41]	; 0x29
 801b31c:	4620      	mov	r0, r4
 801b31e:	62e3      	str	r3, [r4, #44]	; 0x2c
 801b320:	6323      	str	r3, [r4, #48]	; 0x30
 801b322:	6363      	str	r3, [r4, #52]	; 0x34
 801b324:	63a3      	str	r3, [r4, #56]	; 0x38
 801b326:	63e3      	str	r3, [r4, #60]	; 0x3c
 801b328:	6463      	str	r3, [r4, #68]	; 0x44
 801b32a:	64a3      	str	r3, [r4, #72]	; 0x48
 801b32c:	6523      	str	r3, [r4, #80]	; 0x50
 801b32e:	6563      	str	r3, [r4, #84]	; 0x54
 801b330:	65e3      	str	r3, [r4, #92]	; 0x5c
 801b332:	6623      	str	r3, [r4, #96]	; 0x60
 801b334:	66a3      	str	r3, [r4, #104]	; 0x68
 801b336:	66e3      	str	r3, [r4, #108]	; 0x6c
 801b338:	6763      	str	r3, [r4, #116]	; 0x74
 801b33a:	67a3      	str	r3, [r4, #120]	; 0x78
 801b33c:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
 801b340:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
 801b344:	230c      	movs	r3, #12
 801b346:	6422      	str	r2, [r4, #64]	; 0x40
 801b348:	64e1      	str	r1, [r4, #76]	; 0x4c
 801b34a:	65a1      	str	r1, [r4, #88]	; 0x58
 801b34c:	6662      	str	r2, [r4, #100]	; 0x64
 801b34e:	6722      	str	r2, [r4, #112]	; 0x70
 801b350:	67e2      	str	r2, [r4, #124]	; 0x7c
 801b352:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
 801b356:	f8a4 308c 	strh.w	r3, [r4, #140]	; 0x8c
 801b35a:	bd38      	pop	{r3, r4, r5, pc}
 801b35c:	080300c4 	.word	0x080300c4
 801b360:	0802f9ec 	.word	0x0802f9ec
 801b364:	447a0000 	.word	0x447a0000

0801b368 <_ZN8touchgfx13TextureMapper19applyTransformationEv>:
 801b368:	b570      	push	{r4, r5, r6, lr}
 801b36a:	ed2d 8b04 	vpush	{d8-d9}
 801b36e:	f5ad 7d50 	sub.w	sp, sp, #832	; 0x340
 801b372:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
 801b374:	4604      	mov	r4, r0
 801b376:	add0      	add	r5, sp, #832	; 0x340
 801b378:	f825 3d40 	strh.w	r3, [r5, #-64]!
 801b37c:	4628      	mov	r0, r5
 801b37e:	f006 f9bb 	bl	80216f8 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801b382:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 801b384:	4606      	mov	r6, r0
 801b386:	4628      	mov	r0, r5
 801b388:	f8ad 3300 	strh.w	r3, [sp, #768]	; 0x300
 801b38c:	f006 f9ee 	bl	802176c <_ZNK8touchgfx6Bitmap9getHeightEv>
 801b390:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801b394:	1c72      	adds	r2, r6, #1
 801b396:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 801b39a:	3001      	adds	r0, #1
 801b39c:	ee07 2a90 	vmov	s15, r2
 801b3a0:	ed94 6a0b 	vldr	s12, [r4, #44]	; 0x2c
 801b3a4:	ee76 5ac7 	vsub.f32	s11, s13, s14
 801b3a8:	ee06 0a90 	vmov	s13, r0
 801b3ac:	ee36 6a47 	vsub.f32	s12, s12, s14
 801b3b0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801b3b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801b3b6:	ed94 9a11 	vldr	s18, [r4, #68]	; 0x44
 801b3ba:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801b3be:	9312      	str	r3, [sp, #72]	; 0x48
 801b3c0:	9316      	str	r3, [sp, #88]	; 0x58
 801b3c2:	a830      	add	r0, sp, #192	; 0xc0
 801b3c4:	ee77 7a86 	vadd.f32	s15, s15, s12
 801b3c8:	931a      	str	r3, [sp, #104]	; 0x68
 801b3ca:	ee76 6aa5 	vadd.f32	s13, s13, s11
 801b3ce:	931e      	str	r3, [sp, #120]	; 0x78
 801b3d0:	2300      	movs	r3, #0
 801b3d2:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801b3d6:	edcd 5a11 	vstr	s11, [sp, #68]	; 0x44
 801b3da:	ae70      	add	r6, sp, #448	; 0x1c0
 801b3dc:	9320      	str	r3, [sp, #128]	; 0x80
 801b3de:	9321      	str	r3, [sp, #132]	; 0x84
 801b3e0:	9322      	str	r3, [sp, #136]	; 0x88
 801b3e2:	9324      	str	r3, [sp, #144]	; 0x90
 801b3e4:	9325      	str	r3, [sp, #148]	; 0x94
 801b3e6:	9326      	str	r3, [sp, #152]	; 0x98
 801b3e8:	9328      	str	r3, [sp, #160]	; 0xa0
 801b3ea:	9329      	str	r3, [sp, #164]	; 0xa4
 801b3ec:	932a      	str	r3, [sp, #168]	; 0xa8
 801b3ee:	932c      	str	r3, [sp, #176]	; 0xb0
 801b3f0:	932d      	str	r3, [sp, #180]	; 0xb4
 801b3f2:	932e      	str	r3, [sp, #184]	; 0xb8
 801b3f4:	ed8d 7a13 	vstr	s14, [sp, #76]	; 0x4c
 801b3f8:	edcd 7a14 	vstr	s15, [sp, #80]	; 0x50
 801b3fc:	edcd 5a15 	vstr	s11, [sp, #84]	; 0x54
 801b400:	ed8d 7a17 	vstr	s14, [sp, #92]	; 0x5c
 801b404:	edcd 7a18 	vstr	s15, [sp, #96]	; 0x60
 801b408:	edcd 6a19 	vstr	s13, [sp, #100]	; 0x64
 801b40c:	ed8d 7a1b 	vstr	s14, [sp, #108]	; 0x6c
 801b410:	ed8d 6a1c 	vstr	s12, [sp, #112]	; 0x70
 801b414:	edcd 6a1d 	vstr	s13, [sp, #116]	; 0x74
 801b418:	ed8d 7a1f 	vstr	s14, [sp, #124]	; 0x7c
 801b41c:	edd4 8a12 	vldr	s17, [r4, #72]	; 0x48
 801b420:	ed94 8a13 	vldr	s16, [r4, #76]	; 0x4c
 801b424:	f005 fd5c 	bl	8020ee0 <_ZN8touchgfx9Matrix4x4C1Ev>
 801b428:	eeb1 0a49 	vneg.f32	s0, s18
 801b42c:	a830      	add	r0, sp, #192	; 0xc0
 801b42e:	f005 fe27 	bl	8021080 <_ZN8touchgfx9Matrix4x423concatenateXTranslationEf>
 801b432:	eeb1 0a68 	vneg.f32	s0, s17
 801b436:	f005 fe31 	bl	802109c <_ZN8touchgfx9Matrix4x423concatenateYTranslationEf>
 801b43a:	eeb1 0a48 	vneg.f32	s0, s16
 801b43e:	f005 fe3c 	bl	80210ba <_ZN8touchgfx9Matrix4x423concatenateZTranslationEf>
 801b442:	a840      	add	r0, sp, #256	; 0x100
 801b444:	f005 fd4c 	bl	8020ee0 <_ZN8touchgfx9Matrix4x4C1Ev>
 801b448:	ed94 0a0d 	vldr	s0, [r4, #52]	; 0x34
 801b44c:	a840      	add	r0, sp, #256	; 0x100
 801b44e:	f005 fd9b 	bl	8020f88 <_ZN8touchgfx9Matrix4x420concatenateXRotationEf>
 801b452:	ed94 0a0e 	vldr	s0, [r4, #56]	; 0x38
 801b456:	f005 fdc1 	bl	8020fdc <_ZN8touchgfx9Matrix4x420concatenateYRotationEf>
 801b45a:	ed94 0a0f 	vldr	s0, [r4, #60]	; 0x3c
 801b45e:	f005 fde6 	bl	802102e <_ZN8touchgfx9Matrix4x420concatenateZRotationEf>
 801b462:	a850      	add	r0, sp, #320	; 0x140
 801b464:	f005 fd3c 	bl	8020ee0 <_ZN8touchgfx9Matrix4x4C1Ev>
 801b468:	ed94 0a10 	vldr	s0, [r4, #64]	; 0x40
 801b46c:	a850      	add	r0, sp, #320	; 0x140
 801b46e:	f005 fe33 	bl	80210d8 <_ZN8touchgfx9Matrix4x417concatenateXScaleEf>
 801b472:	ed94 0a10 	vldr	s0, [r4, #64]	; 0x40
 801b476:	f005 fe3b 	bl	80210f0 <_ZN8touchgfx9Matrix4x417concatenateYScaleEf>
 801b47a:	ed94 0a10 	vldr	s0, [r4, #64]	; 0x40
 801b47e:	f005 fe44 	bl	802110a <_ZN8touchgfx9Matrix4x417concatenateZScaleEf>
 801b482:	a860      	add	r0, sp, #384	; 0x180
 801b484:	f005 fd2c 	bl	8020ee0 <_ZN8touchgfx9Matrix4x4C1Ev>
 801b488:	eeb0 0a49 	vmov.f32	s0, s18
 801b48c:	a860      	add	r0, sp, #384	; 0x180
 801b48e:	f005 fdf7 	bl	8021080 <_ZN8touchgfx9Matrix4x423concatenateXTranslationEf>
 801b492:	eeb0 0a68 	vmov.f32	s0, s17
 801b496:	f005 fe01 	bl	802109c <_ZN8touchgfx9Matrix4x423concatenateYTranslationEf>
 801b49a:	eeb0 0a48 	vmov.f32	s0, s16
 801b49e:	f005 fe0c 	bl	80210ba <_ZN8touchgfx9Matrix4x423concatenateZTranslationEf>
 801b4a2:	aa50      	add	r2, sp, #320	; 0x140
 801b4a4:	a960      	add	r1, sp, #384	; 0x180
 801b4a6:	a8b0      	add	r0, sp, #704	; 0x2c0
 801b4a8:	f005 fd32 	bl	8020f10 <_ZN8touchgfxmlERKNS_9Matrix4x4ES2_>
 801b4ac:	4628      	mov	r0, r5
 801b4ae:	aa40      	add	r2, sp, #256	; 0x100
 801b4b0:	a9b0      	add	r1, sp, #704	; 0x2c0
 801b4b2:	f005 fd2d 	bl	8020f10 <_ZN8touchgfxmlERKNS_9Matrix4x4ES2_>
 801b4b6:	4629      	mov	r1, r5
 801b4b8:	aa30      	add	r2, sp, #192	; 0xc0
 801b4ba:	a870      	add	r0, sp, #448	; 0x1c0
 801b4bc:	f005 fd28 	bl	8020f10 <_ZN8touchgfxmlERKNS_9Matrix4x4ES2_>
 801b4c0:	a880      	add	r0, sp, #512	; 0x200
 801b4c2:	f005 fd0d 	bl	8020ee0 <_ZN8touchgfx9Matrix4x4C1Ev>
 801b4c6:	ed94 0a14 	vldr	s0, [r4, #80]	; 0x50
 801b4ca:	a880      	add	r0, sp, #512	; 0x200
 801b4cc:	eeb1 0a40 	vneg.f32	s0, s0
 801b4d0:	f005 fdd6 	bl	8021080 <_ZN8touchgfx9Matrix4x423concatenateXTranslationEf>
 801b4d4:	ed94 0a15 	vldr	s0, [r4, #84]	; 0x54
 801b4d8:	a880      	add	r0, sp, #512	; 0x200
 801b4da:	eeb1 0a40 	vneg.f32	s0, s0
 801b4de:	f005 fddd 	bl	802109c <_ZN8touchgfx9Matrix4x423concatenateYTranslationEf>
 801b4e2:	a890      	add	r0, sp, #576	; 0x240
 801b4e4:	f005 fcfc 	bl	8020ee0 <_ZN8touchgfx9Matrix4x4C1Ev>
 801b4e8:	ed94 0a16 	vldr	s0, [r4, #88]	; 0x58
 801b4ec:	a890      	add	r0, sp, #576	; 0x240
 801b4ee:	f005 fd3b 	bl	8020f68 <_ZN8touchgfx9Matrix4x415setViewDistanceEf>
 801b4f2:	a8a0      	add	r0, sp, #640	; 0x280
 801b4f4:	f005 fcf4 	bl	8020ee0 <_ZN8touchgfx9Matrix4x4C1Ev>
 801b4f8:	ed94 0a14 	vldr	s0, [r4, #80]	; 0x50
 801b4fc:	a8a0      	add	r0, sp, #640	; 0x280
 801b4fe:	f005 fdbf 	bl	8021080 <_ZN8touchgfx9Matrix4x423concatenateXTranslationEf>
 801b502:	ed94 0a15 	vldr	s0, [r4, #84]	; 0x54
 801b506:	f005 fdc9 	bl	802109c <_ZN8touchgfx9Matrix4x423concatenateYTranslationEf>
 801b50a:	aa90      	add	r2, sp, #576	; 0x240
 801b50c:	a9a0      	add	r1, sp, #640	; 0x280
 801b50e:	a8b0      	add	r0, sp, #704	; 0x2c0
 801b510:	f005 fcfe 	bl	8020f10 <_ZN8touchgfxmlERKNS_9Matrix4x4ES2_>
 801b514:	4628      	mov	r0, r5
 801b516:	aa80      	add	r2, sp, #512	; 0x200
 801b518:	a9b0      	add	r1, sp, #704	; 0x2c0
 801b51a:	f005 fcf9 	bl	8020f10 <_ZN8touchgfxmlERKNS_9Matrix4x4ES2_>
 801b51e:	4629      	mov	r1, r5
 801b520:	466d      	mov	r5, sp
 801b522:	aa70      	add	r2, sp, #448	; 0x1c0
 801b524:	4668      	mov	r0, sp
 801b526:	f005 fcf3 	bl	8020f10 <_ZN8touchgfxmlERKNS_9Matrix4x4ES2_>
 801b52a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801b52c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 801b52e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801b530:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 801b532:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801b534:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 801b536:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 801b53a:	2500      	movs	r5, #0
 801b53c:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
 801b540:	0129      	lsls	r1, r5, #4
 801b542:	ab20      	add	r3, sp, #128	; 0x80
 801b544:	3501      	adds	r5, #1
 801b546:	a870      	add	r0, sp, #448	; 0x1c0
 801b548:	185e      	adds	r6, r3, r1
 801b54a:	ab10      	add	r3, sp, #64	; 0x40
 801b54c:	4419      	add	r1, r3
 801b54e:	f005 fc97 	bl	8020e80 <_ZN8touchgfxmlERKNS_9Matrix4x4ERKNS_6Point4E>
 801b552:	2d04      	cmp	r5, #4
 801b554:	ed86 0a00 	vstr	s0, [r6]
 801b558:	edc6 0a01 	vstr	s1, [r6, #4]
 801b55c:	ed86 1a02 	vstr	s2, [r6, #8]
 801b560:	edc6 1a03 	vstr	s3, [r6, #12]
 801b564:	d1ec      	bne.n	801b540 <_ZN8touchgfx13TextureMapper19applyTransformationEv+0x1d8>
 801b566:	edd4 7a16 	vldr	s15, [r4, #88]	; 0x58
 801b56a:	eddd 6a20 	vldr	s13, [sp, #128]	; 0x80
 801b56e:	ed9d 7a22 	vldr	s14, [sp, #136]	; 0x88
 801b572:	ee67 6aa6 	vmul.f32	s13, s15, s13
 801b576:	ed84 7a19 	vstr	s14, [r4, #100]	; 0x64
 801b57a:	ee86 6a87 	vdiv.f32	s12, s13, s14
 801b57e:	eddd 6a21 	vldr	s13, [sp, #132]	; 0x84
 801b582:	ee67 6aa6 	vmul.f32	s13, s15, s13
 801b586:	ed84 6a17 	vstr	s12, [r4, #92]	; 0x5c
 801b58a:	ee86 6a87 	vdiv.f32	s12, s13, s14
 801b58e:	eddd 6a24 	vldr	s13, [sp, #144]	; 0x90
 801b592:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 801b596:	ed84 7a1c 	vstr	s14, [r4, #112]	; 0x70
 801b59a:	ee67 6aa6 	vmul.f32	s13, s15, s13
 801b59e:	ed84 6a18 	vstr	s12, [r4, #96]	; 0x60
 801b5a2:	ee86 6a87 	vdiv.f32	s12, s13, s14
 801b5a6:	eddd 6a25 	vldr	s13, [sp, #148]	; 0x94
 801b5aa:	ee67 6aa6 	vmul.f32	s13, s15, s13
 801b5ae:	ed84 6a1a 	vstr	s12, [r4, #104]	; 0x68
 801b5b2:	ee86 6a87 	vdiv.f32	s12, s13, s14
 801b5b6:	eddd 6a28 	vldr	s13, [sp, #160]	; 0xa0
 801b5ba:	ed9d 7a2a 	vldr	s14, [sp, #168]	; 0xa8
 801b5be:	ed84 7a1f 	vstr	s14, [r4, #124]	; 0x7c
 801b5c2:	ee67 6aa6 	vmul.f32	s13, s15, s13
 801b5c6:	ed84 6a1b 	vstr	s12, [r4, #108]	; 0x6c
 801b5ca:	ee86 6a87 	vdiv.f32	s12, s13, s14
 801b5ce:	eddd 6a29 	vldr	s13, [sp, #164]	; 0xa4
 801b5d2:	ee67 6aa6 	vmul.f32	s13, s15, s13
 801b5d6:	ed84 6a1d 	vstr	s12, [r4, #116]	; 0x74
 801b5da:	ee86 6a87 	vdiv.f32	s12, s13, s14
 801b5de:	eddd 6a2c 	vldr	s13, [sp, #176]	; 0xb0
 801b5e2:	ed9d 7a2e 	vldr	s14, [sp, #184]	; 0xb8
 801b5e6:	ed84 7a22 	vstr	s14, [r4, #136]	; 0x88
 801b5ea:	ee67 6aa6 	vmul.f32	s13, s15, s13
 801b5ee:	ed84 6a1e 	vstr	s12, [r4, #120]	; 0x78
 801b5f2:	ee86 6a87 	vdiv.f32	s12, s13, s14
 801b5f6:	eddd 6a2d 	vldr	s13, [sp, #180]	; 0xb4
 801b5fa:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801b5fe:	eec7 6a87 	vdiv.f32	s13, s15, s14
 801b602:	ed84 6a20 	vstr	s12, [r4, #128]	; 0x80
 801b606:	edc4 6a21 	vstr	s13, [r4, #132]	; 0x84
 801b60a:	f50d 7d50 	add.w	sp, sp, #832	; 0x340
 801b60e:	ecbd 8b04 	vpop	{d8-d9}
 801b612:	bd70      	pop	{r4, r5, r6, pc}

0801b614 <_ZN8touchgfx13TextureMapper9setBitmapERKNS_6BitmapE>:
 801b614:	b510      	push	{r4, lr}
 801b616:	4604      	mov	r4, r0
 801b618:	f001 faee 	bl	801cbf8 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 801b61c:	4620      	mov	r0, r4
 801b61e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b622:	f7ff bea1 	b.w	801b368 <_ZN8touchgfx13TextureMapper19applyTransformationEv>

0801b626 <_ZN8touchgfx13TextureMapper9setAnglesEfff>:
 801b626:	ed80 0a0d 	vstr	s0, [r0, #52]	; 0x34
 801b62a:	edc0 0a0e 	vstr	s1, [r0, #56]	; 0x38
 801b62e:	ed80 1a0f 	vstr	s2, [r0, #60]	; 0x3c
 801b632:	f7ff be99 	b.w	801b368 <_ZN8touchgfx13TextureMapper19applyTransformationEv>

0801b636 <_ZN8touchgfx13TextureMapper8setScaleEf>:
 801b636:	ed80 0a10 	vstr	s0, [r0, #64]	; 0x40
 801b63a:	f7ff be95 	b.w	801b368 <_ZN8touchgfx13TextureMapper19applyTransformationEv>

0801b63e <_ZN8touchgfx13TextureMapper17setBitmapPositionEff>:
 801b63e:	ed80 0a0b 	vstr	s0, [r0, #44]	; 0x2c
 801b642:	edc0 0a0c 	vstr	s1, [r0, #48]	; 0x30
 801b646:	f7ff be8f 	b.w	801b368 <_ZN8touchgfx13TextureMapper19applyTransformationEv>

0801b64a <_ZN8touchgfx13TextureMapper17setCameraDistanceEf>:
 801b64a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801b64e:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801b652:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b656:	fe30 0a27 	vselgt.f32	s0, s0, s15
 801b65a:	ed80 0a16 	vstr	s0, [r0, #88]	; 0x58
 801b65e:	f7ff be83 	b.w	801b368 <_ZN8touchgfx13TextureMapper19applyTransformationEv>

0801b662 <_ZN8touchgfx13TextureMapper9setCameraEff>:
 801b662:	ed80 0a14 	vstr	s0, [r0, #80]	; 0x50
 801b666:	edc0 0a15 	vstr	s1, [r0, #84]	; 0x54
 801b66a:	f7ff be7d 	b.w	801b368 <_ZN8touchgfx13TextureMapper19applyTransformationEv>

0801b66e <_ZN8touchgfx13TextureMapper8setOrigoEff>:
 801b66e:	ed80 0a11 	vstr	s0, [r0, #68]	; 0x44
 801b672:	edc0 0a12 	vstr	s1, [r0, #72]	; 0x48
 801b676:	f7ff be77 	b.w	801b368 <_ZN8touchgfx13TextureMapper19applyTransformationEv>

0801b67a <_ZN8touchgfx13TextureMapper8setOrigoEfff>:
 801b67a:	ed80 0a11 	vstr	s0, [r0, #68]	; 0x44
 801b67e:	edc0 0a12 	vstr	s1, [r0, #72]	; 0x48
 801b682:	ed80 1a13 	vstr	s2, [r0, #76]	; 0x4c
 801b686:	f7ff be6f 	b.w	801b368 <_ZN8touchgfx13TextureMapper19applyTransformationEv>

0801b68a <_ZNK8touchgfx13TextureMapper15getBoundingRectEv>:
 801b68a:	b510      	push	{r4, lr}
 801b68c:	edd1 5a1a 	vldr	s11, [r1, #104]	; 0x68
 801b690:	edd1 7a17 	vldr	s15, [r1, #92]	; 0x5c
 801b694:	ed91 6a1d 	vldr	s12, [r1, #116]	; 0x74
 801b698:	eef4 7ae5 	vcmpe.f32	s15, s11
 801b69c:	edd1 6a20 	vldr	s13, [r1, #128]	; 0x80
 801b6a0:	f9b1 4008 	ldrsh.w	r4, [r1, #8]
 801b6a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b6a8:	bf54      	ite	pl
 801b6aa:	eeb0 7a65 	vmovpl.f32	s14, s11
 801b6ae:	eeb0 7a67 	vmovmi.f32	s14, s15
 801b6b2:	eeb4 6ac7 	vcmpe.f32	s12, s14
 801b6b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b6ba:	fe37 7a06 	vselgt.f32	s14, s14, s12
 801b6be:	eef4 6ac7 	vcmpe.f32	s13, s14
 801b6c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b6c6:	fe37 7a26 	vselgt.f32	s14, s14, s13
 801b6ca:	febb 7a47 	vrintm.f32	s14, s14
 801b6ce:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 801b6d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b6d6:	eef4 7ae5 	vcmpe.f32	s15, s11
 801b6da:	bf56      	itet	pl
 801b6dc:	eebd 7ac7 	vcvtpl.s32.f32	s14, s14
 801b6e0:	2200      	movmi	r2, #0
 801b6e2:	ee17 3a10 	vmovpl	r3, s14
 801b6e6:	ee07 4a10 	vmov	s14, r4
 801b6ea:	bf58      	it	pl
 801b6ec:	b21a      	sxthpl	r2, r3
 801b6ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b6f2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801b6f6:	8002      	strh	r2, [r0, #0]
 801b6f8:	fe77 7aa5 	vselgt.f32	s15, s15, s11
 801b6fc:	eeb4 6ae7 	vcmpe.f32	s12, s15
 801b700:	edd1 5a1b 	vldr	s11, [r1, #108]	; 0x6c
 801b704:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b708:	bf58      	it	pl
 801b70a:	eef0 7a46 	vmovpl.f32	s15, s12
 801b70e:	ed91 6a1e 	vldr	s12, [r1, #120]	; 0x78
 801b712:	eef4 6ae7 	vcmpe.f32	s13, s15
 801b716:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b71a:	bf58      	it	pl
 801b71c:	eef0 7a66 	vmovpl.f32	s15, s13
 801b720:	edd1 6a21 	vldr	s13, [r1, #132]	; 0x84
 801b724:	fefa 7a67 	vrintp.f32	s15, s15
 801b728:	eef4 7ac7 	vcmpe.f32	s15, s14
 801b72c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b730:	bfdc      	itt	le
 801b732:	eefd 7ae7 	vcvtle.s32.f32	s15, s15
 801b736:	ee17 3a90 	vmovle	r3, s15
 801b73a:	edd1 7a18 	vldr	s15, [r1, #96]	; 0x60
 801b73e:	f9b1 100a 	ldrsh.w	r1, [r1, #10]
 801b742:	eef4 7ae5 	vcmpe.f32	s15, s11
 801b746:	bfd8      	it	le
 801b748:	b21c      	sxthle	r4, r3
 801b74a:	1aa2      	subs	r2, r4, r2
 801b74c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b750:	8082      	strh	r2, [r0, #4]
 801b752:	bf54      	ite	pl
 801b754:	eeb0 7a65 	vmovpl.f32	s14, s11
 801b758:	eeb0 7a67 	vmovmi.f32	s14, s15
 801b75c:	eeb4 6ac7 	vcmpe.f32	s12, s14
 801b760:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b764:	fe37 7a06 	vselgt.f32	s14, s14, s12
 801b768:	eef4 6ac7 	vcmpe.f32	s13, s14
 801b76c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b770:	fe37 7a26 	vselgt.f32	s14, s14, s13
 801b774:	febb 7a47 	vrintm.f32	s14, s14
 801b778:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 801b77c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b780:	eef4 7ae5 	vcmpe.f32	s15, s11
 801b784:	bf56      	itet	pl
 801b786:	eebd 7ac7 	vcvtpl.s32.f32	s14, s14
 801b78a:	2300      	movmi	r3, #0
 801b78c:	ee17 3a10 	vmovpl	r3, s14
 801b790:	ee07 1a10 	vmov	s14, r1
 801b794:	bf58      	it	pl
 801b796:	b21b      	sxthpl	r3, r3
 801b798:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b79c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801b7a0:	8043      	strh	r3, [r0, #2]
 801b7a2:	fe77 7aa5 	vselgt.f32	s15, s15, s11
 801b7a6:	eeb4 6ae7 	vcmpe.f32	s12, s15
 801b7aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b7ae:	bf58      	it	pl
 801b7b0:	eef0 7a46 	vmovpl.f32	s15, s12
 801b7b4:	eef4 6ae7 	vcmpe.f32	s13, s15
 801b7b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b7bc:	bf58      	it	pl
 801b7be:	eef0 7a66 	vmovpl.f32	s15, s13
 801b7c2:	fefa 7a67 	vrintp.f32	s15, s15
 801b7c6:	eef4 7ac7 	vcmpe.f32	s15, s14
 801b7ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b7ce:	bfde      	ittt	le
 801b7d0:	eefd 7ae7 	vcvtle.s32.f32	s15, s15
 801b7d4:	ee17 1a90 	vmovle	r1, s15
 801b7d8:	b209      	sxthle	r1, r1
 801b7da:	1acb      	subs	r3, r1, r3
 801b7dc:	80c3      	strh	r3, [r0, #6]
 801b7de:	bd10      	pop	{r4, pc}

0801b7e0 <_ZN8touchgfx13TextureMapper12updateAnglesEfff>:
 801b7e0:	b510      	push	{r4, lr}
 801b7e2:	ed2d 8b04 	vpush	{d8-d9}
 801b7e6:	b084      	sub	sp, #16
 801b7e8:	4604      	mov	r4, r0
 801b7ea:	4601      	mov	r1, r0
 801b7ec:	eeb0 8a40 	vmov.f32	s16, s0
 801b7f0:	4668      	mov	r0, sp
 801b7f2:	eef0 8a60 	vmov.f32	s17, s1
 801b7f6:	eeb0 9a41 	vmov.f32	s18, s2
 801b7fa:	f7ff ff46 	bl	801b68a <_ZNK8touchgfx13TextureMapper15getBoundingRectEv>
 801b7fe:	6823      	ldr	r3, [r4, #0]
 801b800:	4669      	mov	r1, sp
 801b802:	4620      	mov	r0, r4
 801b804:	691b      	ldr	r3, [r3, #16]
 801b806:	4798      	blx	r3
 801b808:	6823      	ldr	r3, [r4, #0]
 801b80a:	eeb0 1a49 	vmov.f32	s2, s18
 801b80e:	4620      	mov	r0, r4
 801b810:	eef0 0a68 	vmov.f32	s1, s17
 801b814:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801b816:	eeb0 0a48 	vmov.f32	s0, s16
 801b81a:	4798      	blx	r3
 801b81c:	4621      	mov	r1, r4
 801b81e:	a802      	add	r0, sp, #8
 801b820:	f7ff ff33 	bl	801b68a <_ZNK8touchgfx13TextureMapper15getBoundingRectEv>
 801b824:	6823      	ldr	r3, [r4, #0]
 801b826:	a902      	add	r1, sp, #8
 801b828:	4620      	mov	r0, r4
 801b82a:	691b      	ldr	r3, [r3, #16]
 801b82c:	4798      	blx	r3
 801b82e:	b004      	add	sp, #16
 801b830:	ecbd 8b04 	vpop	{d8-d9}
 801b834:	bd10      	pop	{r4, pc}

0801b836 <_ZN8touchgfx13TextureMapper11updateScaleEf>:
 801b836:	b510      	push	{r4, lr}
 801b838:	ed2d 8b02 	vpush	{d8}
 801b83c:	b084      	sub	sp, #16
 801b83e:	4604      	mov	r4, r0
 801b840:	4601      	mov	r1, r0
 801b842:	eeb0 8a40 	vmov.f32	s16, s0
 801b846:	4668      	mov	r0, sp
 801b848:	f7ff ff1f 	bl	801b68a <_ZNK8touchgfx13TextureMapper15getBoundingRectEv>
 801b84c:	6823      	ldr	r3, [r4, #0]
 801b84e:	4669      	mov	r1, sp
 801b850:	4620      	mov	r0, r4
 801b852:	691b      	ldr	r3, [r3, #16]
 801b854:	4798      	blx	r3
 801b856:	6823      	ldr	r3, [r4, #0]
 801b858:	eeb0 0a48 	vmov.f32	s0, s16
 801b85c:	4620      	mov	r0, r4
 801b85e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801b862:	4798      	blx	r3
 801b864:	4621      	mov	r1, r4
 801b866:	a802      	add	r0, sp, #8
 801b868:	f7ff ff0f 	bl	801b68a <_ZNK8touchgfx13TextureMapper15getBoundingRectEv>
 801b86c:	6823      	ldr	r3, [r4, #0]
 801b86e:	a902      	add	r1, sp, #8
 801b870:	4620      	mov	r0, r4
 801b872:	691b      	ldr	r3, [r3, #16]
 801b874:	4798      	blx	r3
 801b876:	b004      	add	sp, #16
 801b878:	ecbd 8b02 	vpop	{d8}
 801b87c:	bd10      	pop	{r4, pc}

0801b87e <_ZNK8touchgfx13TextureMapper19lookupRenderVariantEv>:
 801b87e:	4603      	mov	r3, r0
 801b880:	3026      	adds	r0, #38	; 0x26
 801b882:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 801b886:	b90b      	cbnz	r3, 801b88c <_ZNK8touchgfx13TextureMapper19lookupRenderVariantEv+0xe>
 801b888:	f004 b923 	b.w	801fad2 <_ZN8touchgfx34lookupNearestNeighborRenderVariantERKNS_6BitmapE>
 801b88c:	f004 b931 	b.w	801faf2 <_ZN8touchgfx27lookupBilinearRenderVariantERKNS_6BitmapE>

0801b890 <_ZNK8touchgfx13TextureMapper8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_>:
 801b890:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b894:	4604      	mov	r4, r0
 801b896:	469b      	mov	fp, r3
 801b898:	ed2d 8b04 	vpush	{d8-d9}
 801b89c:	f9b0 c008 	ldrsh.w	ip, [r0, #8]
 801b8a0:	b0b3      	sub	sp, #204	; 0xcc
 801b8a2:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 801b8a6:	f9b1 6000 	ldrsh.w	r6, [r1]
 801b8aa:	8888      	ldrh	r0, [r1, #4]
 801b8ac:	9206      	str	r2, [sp, #24]
 801b8ae:	2200      	movs	r2, #0
 801b8b0:	4430      	add	r0, r6
 801b8b2:	f8dd a100 	ldr.w	sl, [sp, #256]	; 0x100
 801b8b6:	f8dd 9104 	ldr.w	r9, [sp, #260]	; 0x104
 801b8ba:	b280      	uxth	r0, r0
 801b8bc:	f8dd 8108 	ldr.w	r8, [sp, #264]	; 0x108
 801b8c0:	9f43      	ldr	r7, [sp, #268]	; 0x10c
 801b8c2:	fa0f fe80 	sxth.w	lr, r0
 801b8c6:	9211      	str	r2, [sp, #68]	; 0x44
 801b8c8:	4596      	cmp	lr, r2
 801b8ca:	f340 8129 	ble.w	801bb20 <_ZNK8touchgfx13TextureMapper8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x290>
 801b8ce:	45b4      	cmp	ip, r6
 801b8d0:	f340 8126 	ble.w	801bb20 <_ZNK8touchgfx13TextureMapper8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x290>
 801b8d4:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 801b8d8:	88ca      	ldrh	r2, [r1, #6]
 801b8da:	442a      	add	r2, r5
 801b8dc:	b292      	uxth	r2, r2
 801b8de:	b211      	sxth	r1, r2
 801b8e0:	2900      	cmp	r1, #0
 801b8e2:	f340 811d 	ble.w	801bb20 <_ZNK8touchgfx13TextureMapper8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x290>
 801b8e6:	42ab      	cmp	r3, r5
 801b8e8:	f340 811a 	ble.w	801bb20 <_ZNK8touchgfx13TextureMapper8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x290>
 801b8ec:	45f4      	cmp	ip, lr
 801b8ee:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
 801b8f2:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 801b8f6:	bfb8      	it	lt
 801b8f8:	fa1f f08c 	uxthlt.w	r0, ip
 801b8fc:	428b      	cmp	r3, r1
 801b8fe:	f8ad 6044 	strh.w	r6, [sp, #68]	; 0x44
 801b902:	bfb8      	it	lt
 801b904:	b29a      	uxthlt	r2, r3
 801b906:	1b80      	subs	r0, r0, r6
 801b908:	f8ad 5046 	strh.w	r5, [sp, #70]	; 0x46
 801b90c:	1b52      	subs	r2, r2, r5
 801b90e:	f8ad 0048 	strh.w	r0, [sp, #72]	; 0x48
 801b912:	f8ad 204a 	strh.w	r2, [sp, #74]	; 0x4a
 801b916:	ab11      	add	r3, sp, #68	; 0x44
 801b918:	ad13      	add	r5, sp, #76	; 0x4c
 801b91a:	6822      	ldr	r2, [r4, #0]
 801b91c:	1d26      	adds	r6, r4, #4
 801b91e:	9307      	str	r3, [sp, #28]
 801b920:	6a92      	ldr	r2, [r2, #40]	; 0x28
 801b922:	e893 0003 	ldmia.w	r3, {r0, r1}
 801b926:	e885 0003 	stmia.w	r5, {r0, r1}
 801b92a:	4629      	mov	r1, r5
 801b92c:	4620      	mov	r0, r4
 801b92e:	4790      	blx	r2
 801b930:	4621      	mov	r1, r4
 801b932:	a815      	add	r0, sp, #84	; 0x54
 801b934:	f004 f828 	bl	801f988 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801b938:	a815      	add	r0, sp, #84	; 0x54
 801b93a:	f002 fe4f 	bl	801e5dc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801b93e:	9b07      	ldr	r3, [sp, #28]
 801b940:	4631      	mov	r1, r6
 801b942:	4618      	mov	r0, r3
 801b944:	f002 fe8e 	bl	801e664 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801b948:	4628      	mov	r0, r5
 801b94a:	f104 0526 	add.w	r5, r4, #38	; 0x26
 801b94e:	f002 fe45 	bl	801e5dc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801b952:	4628      	mov	r0, r5
 801b954:	f005 ffd8 	bl	8021908 <_ZNK8touchgfx6Bitmap7getDataEv>
 801b958:	9007      	str	r0, [sp, #28]
 801b95a:	2800      	cmp	r0, #0
 801b95c:	f000 80db 	beq.w	801bb16 <_ZNK8touchgfx13TextureMapper8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x286>
 801b960:	f8db 2000 	ldr.w	r2, [fp]
 801b964:	a90d      	add	r1, sp, #52	; 0x34
 801b966:	a809      	add	r0, sp, #36	; 0x24
 801b968:	9209      	str	r2, [sp, #36]	; 0x24
 801b96a:	f8db 2004 	ldr.w	r2, [fp, #4]
 801b96e:	920a      	str	r2, [sp, #40]	; 0x28
 801b970:	f8db 2008 	ldr.w	r2, [fp, #8]
 801b974:	920b      	str	r2, [sp, #44]	; 0x2c
 801b976:	f8db 200c 	ldr.w	r2, [fp, #12]
 801b97a:	920c      	str	r2, [sp, #48]	; 0x30
 801b97c:	f8da 2000 	ldr.w	r2, [sl]
 801b980:	920d      	str	r2, [sp, #52]	; 0x34
 801b982:	f8da 2004 	ldr.w	r2, [sl, #4]
 801b986:	920e      	str	r2, [sp, #56]	; 0x38
 801b988:	f8da 2008 	ldr.w	r2, [sl, #8]
 801b98c:	920f      	str	r2, [sp, #60]	; 0x3c
 801b98e:	f8da 200c 	ldr.w	r2, [sl, #12]
 801b992:	9210      	str	r2, [sp, #64]	; 0x40
 801b994:	4632      	mov	r2, r6
 801b996:	f002 fe49 	bl	801e62c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>
 801b99a:	4632      	mov	r2, r6
 801b99c:	a90e      	add	r1, sp, #56	; 0x38
 801b99e:	a80a      	add	r0, sp, #40	; 0x28
 801b9a0:	f002 fe44 	bl	801e62c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>
 801b9a4:	4632      	mov	r2, r6
 801b9a6:	a90f      	add	r1, sp, #60	; 0x3c
 801b9a8:	a80b      	add	r0, sp, #44	; 0x2c
 801b9aa:	f002 fe3f 	bl	801e62c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>
 801b9ae:	4632      	mov	r2, r6
 801b9b0:	a910      	add	r1, sp, #64	; 0x40
 801b9b2:	a80c      	add	r0, sp, #48	; 0x30
 801b9b4:	f002 fe3a 	bl	801e62c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>
 801b9b8:	eddd 7a0d 	vldr	s15, [sp, #52]	; 0x34
 801b9bc:	edd7 4a00 	vldr	s9, [r7]
 801b9c0:	eef0 6a67 	vmov.f32	s13, s15
 801b9c4:	eddd 7a0a 	vldr	s15, [sp, #40]	; 0x28
 801b9c8:	edd7 5a01 	vldr	s11, [r7, #4]
 801b9cc:	eeb0 7a67 	vmov.f32	s14, s15
 801b9d0:	eddd 7a0e 	vldr	s15, [sp, #56]	; 0x38
 801b9d4:	eefe 6ace 	vcvt.s32.f32	s13, s13, #4
 801b9d8:	ed98 4a00 	vldr	s8, [r8]
 801b9dc:	eeb0 6a67 	vmov.f32	s12, s15
 801b9e0:	eddd 7a0b 	vldr	s15, [sp, #44]	; 0x2c
 801b9e4:	eebe 7ace 	vcvt.s32.f32	s14, s14, #4
 801b9e8:	ed98 5a01 	vldr	s10, [r8, #4]
 801b9ec:	ed99 9a00 	vldr	s18, [r9]
 801b9f0:	eebe 6ace 	vcvt.s32.f32	s12, s12, #4
 801b9f4:	ed99 8a01 	vldr	s16, [r9, #4]
 801b9f8:	edd9 8a02 	vldr	s17, [r9, #8]
 801b9fc:	f8d9 e00c 	ldr.w	lr, [r9, #12]
 801ba00:	ee16 6a10 	vmov	r6, s12
 801ba04:	eeb0 6a67 	vmov.f32	s12, s15
 801ba08:	eddd 7a0f 	vldr	s15, [sp, #60]	; 0x3c
 801ba0c:	f8d8 c00c 	ldr.w	ip, [r8, #12]
 801ba10:	eebe 6ace 	vcvt.s32.f32	s12, s12, #4
 801ba14:	edcd 6a1f 	vstr	s13, [sp, #124]	; 0x7c
 801ba18:	ed8d 4a21 	vstr	s8, [sp, #132]	; 0x84
 801ba1c:	edcd 4a22 	vstr	s9, [sp, #136]	; 0x88
 801ba20:	ee16 0a10 	vmov	r0, s12
 801ba24:	eeb0 6a67 	vmov.f32	s12, s15
 801ba28:	eddd 7a0c 	vldr	s15, [sp, #48]	; 0x30
 801ba2c:	ed8d 7a23 	vstr	s14, [sp, #140]	; 0x8c
 801ba30:	eebe 6ace 	vcvt.s32.f32	s12, s12, #4
 801ba34:	ed8d 5a26 	vstr	s10, [sp, #152]	; 0x98
 801ba38:	edcd 5a27 	vstr	s11, [sp, #156]	; 0x9c
 801ba3c:	f8d7 a008 	ldr.w	sl, [r7, #8]
 801ba40:	ee16 1a10 	vmov	r1, s12
 801ba44:	eeb0 6a67 	vmov.f32	s12, s15
 801ba48:	eddd 7a10 	vldr	s15, [sp, #64]	; 0x40
 801ba4c:	f8d8 b008 	ldr.w	fp, [r8, #8]
 801ba50:	eebe 6ace 	vcvt.s32.f32	s12, s12, #4
 801ba54:	68ff      	ldr	r7, [r7, #12]
 801ba56:	9624      	str	r6, [sp, #144]	; 0x90
 801ba58:	eefe 7ace 	vcvt.s32.f32	s15, s15, #4
 801ba5c:	ed8d 9a20 	vstr	s18, [sp, #128]	; 0x80
 801ba60:	ee16 2a10 	vmov	r2, s12
 801ba64:	ed9d 6a09 	vldr	s12, [sp, #36]	; 0x24
 801ba68:	ed8d 8a25 	vstr	s16, [sp, #148]	; 0x94
 801ba6c:	eebe 6ace 	vcvt.s32.f32	s12, s12, #4
 801ba70:	e9cd 0128 	strd	r0, r1, [sp, #160]	; 0xa0
 801ba74:	ed8d 6a1e 	vstr	s12, [sp, #120]	; 0x78
 801ba78:	4628      	mov	r0, r5
 801ba7a:	edcd 8a2a 	vstr	s17, [sp, #168]	; 0xa8
 801ba7e:	9b06      	ldr	r3, [sp, #24]
 801ba80:	922d      	str	r2, [sp, #180]	; 0xb4
 801ba82:	4a29      	ldr	r2, [pc, #164]	; (801bb28 <_ZNK8touchgfx13TextureMapper8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x298>)
 801ba84:	9317      	str	r3, [sp, #92]	; 0x5c
 801ba86:	8812      	ldrh	r2, [r2, #0]
 801ba88:	9b07      	ldr	r3, [sp, #28]
 801ba8a:	edcd 7a2e 	vstr	s15, [sp, #184]	; 0xb8
 801ba8e:	f8cd e0bc 	str.w	lr, [sp, #188]	; 0xbc
 801ba92:	f8cd c0c0 	str.w	ip, [sp, #192]	; 0xc0
 801ba96:	9218      	str	r2, [sp, #96]	; 0x60
 801ba98:	9319      	str	r3, [sp, #100]	; 0x64
 801ba9a:	f8cd b0ac 	str.w	fp, [sp, #172]	; 0xac
 801ba9e:	f8cd a0b0 	str.w	sl, [sp, #176]	; 0xb0
 801baa2:	9731      	str	r7, [sp, #196]	; 0xc4
 801baa4:	f005 ff62 	bl	802196c <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 801baa8:	901a      	str	r0, [sp, #104]	; 0x68
 801baaa:	4628      	mov	r0, r5
 801baac:	f005 fe24 	bl	80216f8 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801bab0:	901b      	str	r0, [sp, #108]	; 0x6c
 801bab2:	4628      	mov	r0, r5
 801bab4:	f005 fe5a 	bl	802176c <_ZNK8touchgfx6Bitmap9getHeightEv>
 801bab8:	901c      	str	r0, [sp, #112]	; 0x70
 801baba:	4628      	mov	r0, r5
 801babc:	f005 fe1c 	bl	80216f8 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801bac0:	eeb4 9a48 	vcmp.f32	s18, s16
 801bac4:	901d      	str	r0, [sp, #116]	; 0x74
 801bac6:	f8b4 608c 	ldrh.w	r6, [r4, #140]	; 0x8c
 801baca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bace:	d107      	bne.n	801bae0 <_ZNK8touchgfx13TextureMapper8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x250>
 801bad0:	eeb4 8a68 	vcmp.f32	s16, s17
 801bad4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801bad8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801badc:	bf08      	it	eq
 801bade:	461e      	moveq	r6, r3
 801bae0:	4b12      	ldr	r3, [pc, #72]	; (801bb2c <_ZNK8touchgfx13TextureMapper8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x29c>)
 801bae2:	681b      	ldr	r3, [r3, #0]
 801bae4:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 801bae8:	b10a      	cbz	r2, 801baee <_ZNK8touchgfx13TextureMapper8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x25e>
 801baea:	6cdd      	ldr	r5, [r3, #76]	; 0x4c
 801baec:	b905      	cbnz	r5, 801baf0 <_ZNK8touchgfx13TextureMapper8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x260>
 801baee:	689d      	ldr	r5, [r3, #8]
 801baf0:	682b      	ldr	r3, [r5, #0]
 801baf2:	4620      	mov	r0, r4
 801baf4:	6b9f      	ldr	r7, [r3, #56]	; 0x38
 801baf6:	f7ff fec2 	bl	801b87e <_ZNK8touchgfx13TextureMapper19lookupRenderVariantEv>
 801bafa:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 801bafe:	aa1e      	add	r2, sp, #120	; 0x78
 801bb00:	9604      	str	r6, [sp, #16]
 801bb02:	a917      	add	r1, sp, #92	; 0x5c
 801bb04:	e9cd 0302 	strd	r0, r3, [sp, #8]
 801bb08:	ab13      	add	r3, sp, #76	; 0x4c
 801bb0a:	4628      	mov	r0, r5
 801bb0c:	9301      	str	r3, [sp, #4]
 801bb0e:	ab15      	add	r3, sp, #84	; 0x54
 801bb10:	9300      	str	r3, [sp, #0]
 801bb12:	ab19      	add	r3, sp, #100	; 0x64
 801bb14:	47b8      	blx	r7
 801bb16:	b033      	add	sp, #204	; 0xcc
 801bb18:	ecbd 8b04 	vpop	{d8-d9}
 801bb1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bb20:	2300      	movs	r3, #0
 801bb22:	9312      	str	r3, [sp, #72]	; 0x48
 801bb24:	e6f7      	b.n	801b916 <_ZNK8touchgfx13TextureMapper8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x86>
 801bb26:	bf00      	nop
 801bb28:	2400c8b6 	.word	0x2400c8b6
 801bb2c:	2400c8bc 	.word	0x2400c8bc

0801bb30 <_ZNK8touchgfx13TextureMapper4drawERKNS_4RectE>:
 801bb30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bb34:	ed2d 8b02 	vpush	{d8}
 801bb38:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
 801bb3c:	b098      	sub	sp, #96	; 0x60
 801bb3e:	4604      	mov	r4, r0
 801bb40:	4688      	mov	r8, r1
 801bb42:	2b00      	cmp	r3, #0
 801bb44:	d077      	beq.n	801bc36 <_ZNK8touchgfx13TextureMapper4drawERKNS_4RectE+0x106>
 801bb46:	f100 0526 	add.w	r5, r0, #38	; 0x26
 801bb4a:	4628      	mov	r0, r5
 801bb4c:	f005 fdd4 	bl	80216f8 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801bb50:	ee07 0a90 	vmov	s15, r0
 801bb54:	4628      	mov	r0, r5
 801bb56:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 801bb5a:	f005 fe07 	bl	802176c <_ZNK8touchgfx6Bitmap9getHeightEv>
 801bb5e:	4b4e      	ldr	r3, [pc, #312]	; (801bc98 <_ZNK8touchgfx13TextureMapper4drawERKNS_4RectE+0x168>)
 801bb60:	ee07 0a90 	vmov	s15, r0
 801bb64:	781b      	ldrb	r3, [r3, #0]
 801bb66:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 801bb6a:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 801bb6e:	2b01      	cmp	r3, #1
 801bb70:	d066      	beq.n	801bc40 <_ZNK8touchgfx13TextureMapper4drawERKNS_4RectE+0x110>
 801bb72:	eeb0 6a47 	vmov.f32	s12, s14
 801bb76:	ee17 3a10 	vmov	r3, s14
 801bb7a:	eeb0 4a48 	vmov.f32	s8, s16
 801bb7e:	eeb0 7a48 	vmov.f32	s14, s16
 801bb82:	eef0 4a67 	vmov.f32	s9, s15
 801bb86:	eeb0 8a67 	vmov.f32	s16, s15
 801bb8a:	ed94 5a17 	vldr	s10, [r4, #92]	; 0x5c
 801bb8e:	edd4 5a18 	vldr	s11, [r4, #96]	; 0x60
 801bb92:	ed94 3a1b 	vldr	s6, [r4, #108]	; 0x6c
 801bb96:	edd4 2a1d 	vldr	s5, [r4, #116]	; 0x74
 801bb9a:	ee73 1a65 	vsub.f32	s3, s6, s11
 801bb9e:	ed94 2a1a 	vldr	s4, [r4, #104]	; 0x68
 801bba2:	ee72 6ac5 	vsub.f32	s13, s5, s10
 801bba6:	edd4 3a1e 	vldr	s7, [r4, #120]	; 0x78
 801bbaa:	ee32 1a45 	vsub.f32	s2, s4, s10
 801bbae:	6f25      	ldr	r5, [r4, #112]	; 0x70
 801bbb0:	6e66      	ldr	r6, [r4, #100]	; 0x64
 801bbb2:	ee66 6ae1 	vnmul.f32	s13, s13, s3
 801bbb6:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 801bbb8:	ee73 1ae5 	vsub.f32	s3, s7, s11
 801bbbc:	f8d4 c080 	ldr.w	ip, [r4, #128]	; 0x80
 801bbc0:	f8d4 7084 	ldr.w	r7, [r4, #132]	; 0x84
 801bbc4:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 801bbc8:	eee1 6a21 	vfma.f32	s13, s2, s3
 801bbcc:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 801bbd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bbd4:	dd3d      	ble.n	801bc52 <_ZNK8touchgfx13TextureMapper4drawERKNS_4RectE+0x122>
 801bbd6:	ed8d 5a04 	vstr	s10, [sp, #16]
 801bbda:	ed8d 2a05 	vstr	s4, [sp, #20]
 801bbde:	edcd 2a06 	vstr	s5, [sp, #24]
 801bbe2:	f8cd c01c 	str.w	ip, [sp, #28]
 801bbe6:	edcd 5a08 	vstr	s11, [sp, #32]
 801bbea:	ed8d 3a09 	vstr	s6, [sp, #36]	; 0x24
 801bbee:	edcd 3a0a 	vstr	s7, [sp, #40]	; 0x28
 801bbf2:	970b      	str	r7, [sp, #44]	; 0x2c
 801bbf4:	960c      	str	r6, [sp, #48]	; 0x30
 801bbf6:	950d      	str	r5, [sp, #52]	; 0x34
 801bbf8:	920e      	str	r2, [sp, #56]	; 0x38
 801bbfa:	900f      	str	r0, [sp, #60]	; 0x3c
 801bbfc:	edcd 7a10 	vstr	s15, [sp, #64]	; 0x40
 801bc00:	ed8d 4a11 	vstr	s8, [sp, #68]	; 0x44
 801bc04:	ed8d 7a12 	vstr	s14, [sp, #72]	; 0x48
 801bc08:	edcd 4a13 	vstr	s9, [sp, #76]	; 0x4c
 801bc0c:	ed8d 8a14 	vstr	s16, [sp, #80]	; 0x50
 801bc10:	edcd 7a15 	vstr	s15, [sp, #84]	; 0x54
 801bc14:	9316      	str	r3, [sp, #88]	; 0x58
 801bc16:	ed8d 6a17 	vstr	s12, [sp, #92]	; 0x5c
 801bc1a:	ab14      	add	r3, sp, #80	; 0x50
 801bc1c:	2200      	movs	r2, #0
 801bc1e:	4641      	mov	r1, r8
 801bc20:	4620      	mov	r0, r4
 801bc22:	9303      	str	r3, [sp, #12]
 801bc24:	ab10      	add	r3, sp, #64	; 0x40
 801bc26:	9302      	str	r3, [sp, #8]
 801bc28:	ab0c      	add	r3, sp, #48	; 0x30
 801bc2a:	9301      	str	r3, [sp, #4]
 801bc2c:	ab08      	add	r3, sp, #32
 801bc2e:	9300      	str	r3, [sp, #0]
 801bc30:	ab04      	add	r3, sp, #16
 801bc32:	f7ff fe2d 	bl	801b890 <_ZNK8touchgfx13TextureMapper8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_>
 801bc36:	b018      	add	sp, #96	; 0x60
 801bc38:	ecbd 8b02 	vpop	{d8}
 801bc3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bc40:	eeb0 6a48 	vmov.f32	s12, s16
 801bc44:	ee17 3a90 	vmov	r3, s15
 801bc48:	eef0 4a47 	vmov.f32	s9, s14
 801bc4c:	eeb0 4a67 	vmov.f32	s8, s15
 801bc50:	e79b      	b.n	801bb8a <_ZNK8touchgfx13TextureMapper4drawERKNS_4RectE+0x5a>
 801bc52:	ed8d 5a05 	vstr	s10, [sp, #20]
 801bc56:	ed8d 2a04 	vstr	s4, [sp, #16]
 801bc5a:	f8cd c018 	str.w	ip, [sp, #24]
 801bc5e:	edcd 2a07 	vstr	s5, [sp, #28]
 801bc62:	edcd 5a09 	vstr	s11, [sp, #36]	; 0x24
 801bc66:	ed8d 3a08 	vstr	s6, [sp, #32]
 801bc6a:	970a      	str	r7, [sp, #40]	; 0x28
 801bc6c:	edcd 3a0b 	vstr	s7, [sp, #44]	; 0x2c
 801bc70:	960d      	str	r6, [sp, #52]	; 0x34
 801bc72:	950c      	str	r5, [sp, #48]	; 0x30
 801bc74:	900e      	str	r0, [sp, #56]	; 0x38
 801bc76:	920f      	str	r2, [sp, #60]	; 0x3c
 801bc78:	edcd 7a11 	vstr	s15, [sp, #68]	; 0x44
 801bc7c:	ed8d 4a10 	vstr	s8, [sp, #64]	; 0x40
 801bc80:	edcd 4a12 	vstr	s9, [sp, #72]	; 0x48
 801bc84:	ed8d 7a13 	vstr	s14, [sp, #76]	; 0x4c
 801bc88:	ed8d 8a15 	vstr	s16, [sp, #84]	; 0x54
 801bc8c:	edcd 7a14 	vstr	s15, [sp, #80]	; 0x50
 801bc90:	ed8d 6a16 	vstr	s12, [sp, #88]	; 0x58
 801bc94:	9317      	str	r3, [sp, #92]	; 0x5c
 801bc96:	e7c0      	b.n	801bc1a <_ZNK8touchgfx13TextureMapper4drawERKNS_4RectE+0xea>
 801bc98:	2400c8b4 	.word	0x2400c8b4

0801bc9c <_ZN8touchgfx14SnapshotWidget12makeSnapshotEv>:
 801bc9c:	6803      	ldr	r3, [r0, #0]
 801bc9e:	f64f 71fe 	movw	r1, #65534	; 0xfffe
 801bca2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801bca4:	4718      	bx	r3

0801bca6 <_ZNK8touchgfx14SnapshotWidget12getSolidRectEv>:
 801bca6:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 801bcaa:	2bff      	cmp	r3, #255	; 0xff
 801bcac:	b510      	push	{r4, lr}
 801bcae:	d104      	bne.n	801bcba <_ZNK8touchgfx14SnapshotWidget12getSolidRectEv+0x14>
 801bcb0:	8cca      	ldrh	r2, [r1, #38]	; 0x26
 801bcb2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801bcb6:	429a      	cmp	r2, r3
 801bcb8:	d105      	bne.n	801bcc6 <_ZNK8touchgfx14SnapshotWidget12getSolidRectEv+0x20>
 801bcba:	2300      	movs	r3, #0
 801bcbc:	8003      	strh	r3, [r0, #0]
 801bcbe:	8043      	strh	r3, [r0, #2]
 801bcc0:	8083      	strh	r3, [r0, #4]
 801bcc2:	80c3      	strh	r3, [r0, #6]
 801bcc4:	bd10      	pop	{r4, pc}
 801bcc6:	2300      	movs	r3, #0
 801bcc8:	f9b1 4008 	ldrsh.w	r4, [r1, #8]
 801bccc:	f9b1 200a 	ldrsh.w	r2, [r1, #10]
 801bcd0:	8003      	strh	r3, [r0, #0]
 801bcd2:	8043      	strh	r3, [r0, #2]
 801bcd4:	8084      	strh	r4, [r0, #4]
 801bcd6:	80c2      	strh	r2, [r0, #6]
 801bcd8:	e7f4      	b.n	801bcc4 <_ZNK8touchgfx14SnapshotWidget12getSolidRectEv+0x1e>

0801bcda <_ZNK8touchgfx14SnapshotWidget4drawERKNS_4RectE>:
 801bcda:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801bcde:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
 801bce2:	b087      	sub	sp, #28
 801bce4:	4604      	mov	r4, r0
 801bce6:	4689      	mov	r9, r1
 801bce8:	b363      	cbz	r3, 801bd44 <_ZNK8touchgfx14SnapshotWidget4drawERKNS_4RectE+0x6a>
 801bcea:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 801bcec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801bcf0:	429a      	cmp	r2, r3
 801bcf2:	d027      	beq.n	801bd44 <_ZNK8touchgfx14SnapshotWidget4drawERKNS_4RectE+0x6a>
 801bcf4:	ad06      	add	r5, sp, #24
 801bcf6:	2700      	movs	r7, #0
 801bcf8:	f825 2d0c 	strh.w	r2, [r5, #-12]!
 801bcfc:	4628      	mov	r0, r5
 801bcfe:	f005 fcfb 	bl	80216f8 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801bd02:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 801bd06:	a904      	add	r1, sp, #16
 801bd08:	f8ad 0014 	strh.w	r0, [sp, #20]
 801bd0c:	f8ad 3016 	strh.w	r3, [sp, #22]
 801bd10:	4620      	mov	r0, r4
 801bd12:	6823      	ldr	r3, [r4, #0]
 801bd14:	9704      	str	r7, [sp, #16]
 801bd16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801bd18:	4798      	blx	r3
 801bd1a:	f7e8 fbab 	bl	8004474 <_ZN8touchgfx3HAL3lcdEv>
 801bd1e:	6803      	ldr	r3, [r0, #0]
 801bd20:	4606      	mov	r6, r0
 801bd22:	4628      	mov	r0, r5
 801bd24:	f8d3 800c 	ldr.w	r8, [r3, #12]
 801bd28:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 801bd2a:	f8ad 300c 	strh.w	r3, [sp, #12]
 801bd2e:	f005 fdeb 	bl	8021908 <_ZNK8touchgfx6Bitmap7getDataEv>
 801bd32:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 801bd36:	4601      	mov	r1, r0
 801bd38:	9701      	str	r7, [sp, #4]
 801bd3a:	aa04      	add	r2, sp, #16
 801bd3c:	9300      	str	r3, [sp, #0]
 801bd3e:	4630      	mov	r0, r6
 801bd40:	464b      	mov	r3, r9
 801bd42:	47c0      	blx	r8
 801bd44:	b007      	add	sp, #28
 801bd46:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0801bd4a <_ZN8touchgfx14SnapshotWidget12makeSnapshotEt>:
 801bd4a:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 801bd4c:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 801bd50:	460d      	mov	r5, r1
 801bd52:	f9b0 2008 	ldrsh.w	r2, [r0, #8]
 801bd56:	2100      	movs	r1, #0
 801bd58:	f8ad 3006 	strh.w	r3, [sp, #6]
 801bd5c:	4604      	mov	r4, r0
 801bd5e:	6803      	ldr	r3, [r0, #0]
 801bd60:	f8ad 2004 	strh.w	r2, [sp, #4]
 801bd64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801bd66:	9100      	str	r1, [sp, #0]
 801bd68:	4669      	mov	r1, sp
 801bd6a:	4798      	blx	r3
 801bd6c:	4621      	mov	r1, r4
 801bd6e:	a802      	add	r0, sp, #8
 801bd70:	f003 fe0a 	bl	801f988 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801bd74:	f7e8 fb7e 	bl	8004474 <_ZN8touchgfx3HAL3lcdEv>
 801bd78:	6803      	ldr	r3, [r0, #0]
 801bd7a:	aa02      	add	r2, sp, #8
 801bd7c:	4669      	mov	r1, sp
 801bd7e:	695e      	ldr	r6, [r3, #20]
 801bd80:	462b      	mov	r3, r5
 801bd82:	47b0      	blx	r6
 801bd84:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801bd88:	2800      	cmp	r0, #0
 801bd8a:	bf08      	it	eq
 801bd8c:	461d      	moveq	r5, r3
 801bd8e:	84e5      	strh	r5, [r4, #38]	; 0x26
 801bd90:	b004      	add	sp, #16
 801bd92:	bd70      	pop	{r4, r5, r6, pc}

0801bd94 <_ZN8touchgfx14SnapshotWidgetC1Ev>:
 801bd94:	2200      	movs	r2, #0
 801bd96:	8082      	strh	r2, [r0, #4]
 801bd98:	80c2      	strh	r2, [r0, #6]
 801bd9a:	8102      	strh	r2, [r0, #8]
 801bd9c:	8142      	strh	r2, [r0, #10]
 801bd9e:	8182      	strh	r2, [r0, #12]
 801bda0:	81c2      	strh	r2, [r0, #14]
 801bda2:	8202      	strh	r2, [r0, #16]
 801bda4:	8242      	strh	r2, [r0, #18]
 801bda6:	61c2      	str	r2, [r0, #28]
 801bda8:	8402      	strh	r2, [r0, #32]
 801bdaa:	8442      	strh	r2, [r0, #34]	; 0x22
 801bdac:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
 801bdb0:	e9c0 2205 	strd	r2, r2, [r0, #20]
 801bdb4:	2201      	movs	r2, #1
 801bdb6:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
 801bdba:	4a04      	ldr	r2, [pc, #16]	; (801bdcc <_ZN8touchgfx14SnapshotWidgetC1Ev+0x38>)
 801bdbc:	6002      	str	r2, [r0, #0]
 801bdbe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801bdc2:	84c2      	strh	r2, [r0, #38]	; 0x26
 801bdc4:	f880 2028 	strb.w	r2, [r0, #40]	; 0x28
 801bdc8:	4770      	bx	lr
 801bdca:	bf00      	nop
 801bdcc:	0802fafc 	.word	0x0802fafc

0801bdd0 <_ZNK8touchgfx8TextArea12getSolidRectEv>:
 801bdd0:	2200      	movs	r2, #0
 801bdd2:	8002      	strh	r2, [r0, #0]
 801bdd4:	8042      	strh	r2, [r0, #2]
 801bdd6:	8082      	strh	r2, [r0, #4]
 801bdd8:	80c2      	strh	r2, [r0, #6]
 801bdda:	4770      	bx	lr

0801bddc <_ZN8touchgfx8TextArea13setXBaselineYEss>:
 801bddc:	b570      	push	{r4, r5, r6, lr}
 801bdde:	6803      	ldr	r3, [r0, #0]
 801bde0:	4604      	mov	r4, r0
 801bde2:	4615      	mov	r5, r2
 801bde4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801bde6:	4798      	blx	r3
 801bde8:	6823      	ldr	r3, [r4, #0]
 801bdea:	4629      	mov	r1, r5
 801bdec:	4620      	mov	r0, r4
 801bdee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801bdf0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801bdf4:	4718      	bx	r3
	...

0801bdf8 <_ZNK8touchgfx8TextArea12getTextWidthEv>:
 801bdf8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801bdfa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801bdfe:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 801be00:	4299      	cmp	r1, r3
 801be02:	d029      	beq.n	801be58 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x60>
 801be04:	4b15      	ldr	r3, [pc, #84]	; (801be5c <_ZNK8touchgfx8TextArea12getTextWidthEv+0x64>)
 801be06:	681b      	ldr	r3, [r3, #0]
 801be08:	b92b      	cbnz	r3, 801be16 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x1e>
 801be0a:	4b15      	ldr	r3, [pc, #84]	; (801be60 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x68>)
 801be0c:	21ae      	movs	r1, #174	; 0xae
 801be0e:	4a15      	ldr	r2, [pc, #84]	; (801be64 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x6c>)
 801be10:	4815      	ldr	r0, [pc, #84]	; (801be68 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x70>)
 801be12:	f00f fd31 	bl	802b878 <__assert_func>
 801be16:	4a15      	ldr	r2, [pc, #84]	; (801be6c <_ZNK8touchgfx8TextArea12getTextWidthEv+0x74>)
 801be18:	8812      	ldrh	r2, [r2, #0]
 801be1a:	428a      	cmp	r2, r1
 801be1c:	d803      	bhi.n	801be26 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x2e>
 801be1e:	4b14      	ldr	r3, [pc, #80]	; (801be70 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x78>)
 801be20:	21af      	movs	r1, #175	; 0xaf
 801be22:	4a10      	ldr	r2, [pc, #64]	; (801be64 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x6c>)
 801be24:	e7f4      	b.n	801be10 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x18>
 801be26:	eb03 0241 	add.w	r2, r3, r1, lsl #1
 801be2a:	f813 0011 	ldrb.w	r0, [r3, r1, lsl #1]
 801be2e:	4b11      	ldr	r3, [pc, #68]	; (801be74 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x7c>)
 801be30:	7854      	ldrb	r4, [r2, #1]
 801be32:	681b      	ldr	r3, [r3, #0]
 801be34:	f3c4 0481 	ubfx	r4, r4, #2, #2
 801be38:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
 801be3c:	682b      	ldr	r3, [r5, #0]
 801be3e:	69de      	ldr	r6, [r3, #28]
 801be40:	4b0d      	ldr	r3, [pc, #52]	; (801be78 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x80>)
 801be42:	6818      	ldr	r0, [r3, #0]
 801be44:	f7ec facc 	bl	80083e0 <_ZNK8touchgfx5Texts7getTextEt>
 801be48:	2300      	movs	r3, #0
 801be4a:	4602      	mov	r2, r0
 801be4c:	4621      	mov	r1, r4
 801be4e:	9300      	str	r3, [sp, #0]
 801be50:	4628      	mov	r0, r5
 801be52:	47b0      	blx	r6
 801be54:	b002      	add	sp, #8
 801be56:	bd70      	pop	{r4, r5, r6, pc}
 801be58:	2000      	movs	r0, #0
 801be5a:	e7fb      	b.n	801be54 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x5c>
 801be5c:	2400c92c 	.word	0x2400c92c
 801be60:	0802fb60 	.word	0x0802fb60
 801be64:	0802fc98 	.word	0x0802fc98
 801be68:	0802fba2 	.word	0x0802fba2
 801be6c:	2400c930 	.word	0x2400c930
 801be70:	0802fbcb 	.word	0x0802fbcb
 801be74:	2400c934 	.word	0x2400c934
 801be78:	2400c938 	.word	0x2400c938

0801be7c <_ZN8touchgfx8TextArea12setBaselineYEs>:
 801be7c:	b570      	push	{r4, r5, r6, lr}
 801be7e:	6803      	ldr	r3, [r0, #0]
 801be80:	4604      	mov	r4, r0
 801be82:	b28d      	uxth	r5, r1
 801be84:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 801be86:	6b1e      	ldr	r6, [r3, #48]	; 0x30
 801be88:	4b10      	ldr	r3, [pc, #64]	; (801becc <_ZN8touchgfx8TextArea12setBaselineYEs+0x50>)
 801be8a:	681b      	ldr	r3, [r3, #0]
 801be8c:	b92b      	cbnz	r3, 801be9a <_ZN8touchgfx8TextArea12setBaselineYEs+0x1e>
 801be8e:	4b10      	ldr	r3, [pc, #64]	; (801bed0 <_ZN8touchgfx8TextArea12setBaselineYEs+0x54>)
 801be90:	21ae      	movs	r1, #174	; 0xae
 801be92:	4a10      	ldr	r2, [pc, #64]	; (801bed4 <_ZN8touchgfx8TextArea12setBaselineYEs+0x58>)
 801be94:	4810      	ldr	r0, [pc, #64]	; (801bed8 <_ZN8touchgfx8TextArea12setBaselineYEs+0x5c>)
 801be96:	f00f fcef 	bl	802b878 <__assert_func>
 801be9a:	4910      	ldr	r1, [pc, #64]	; (801bedc <_ZN8touchgfx8TextArea12setBaselineYEs+0x60>)
 801be9c:	8809      	ldrh	r1, [r1, #0]
 801be9e:	4291      	cmp	r1, r2
 801bea0:	d803      	bhi.n	801beaa <_ZN8touchgfx8TextArea12setBaselineYEs+0x2e>
 801bea2:	4b0f      	ldr	r3, [pc, #60]	; (801bee0 <_ZN8touchgfx8TextArea12setBaselineYEs+0x64>)
 801bea4:	21af      	movs	r1, #175	; 0xaf
 801bea6:	4a0b      	ldr	r2, [pc, #44]	; (801bed4 <_ZN8touchgfx8TextArea12setBaselineYEs+0x58>)
 801bea8:	e7f4      	b.n	801be94 <_ZN8touchgfx8TextArea12setBaselineYEs+0x18>
 801beaa:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 801beae:	4b0d      	ldr	r3, [pc, #52]	; (801bee4 <_ZN8touchgfx8TextArea12setBaselineYEs+0x68>)
 801beb0:	681b      	ldr	r3, [r3, #0]
 801beb2:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801beb6:	6803      	ldr	r3, [r0, #0]
 801beb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801beba:	4798      	blx	r3
 801bebc:	1a29      	subs	r1, r5, r0
 801bebe:	4633      	mov	r3, r6
 801bec0:	4620      	mov	r0, r4
 801bec2:	b209      	sxth	r1, r1
 801bec4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801bec8:	4718      	bx	r3
 801beca:	bf00      	nop
 801becc:	2400c92c 	.word	0x2400c92c
 801bed0:	0802fb60 	.word	0x0802fb60
 801bed4:	0802fc98 	.word	0x0802fc98
 801bed8:	0802fba2 	.word	0x0802fba2
 801bedc:	2400c930 	.word	0x2400c930
 801bee0:	0802fbcb 	.word	0x0802fbcb
 801bee4:	2400c934 	.word	0x2400c934

0801bee8 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE>:
 801bee8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801beec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801bef0:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
 801bef2:	b08c      	sub	sp, #48	; 0x30
 801bef4:	4604      	mov	r4, r0
 801bef6:	4293      	cmp	r3, r2
 801bef8:	4688      	mov	r8, r1
 801befa:	d05f      	beq.n	801bfbc <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd4>
 801befc:	4e31      	ldr	r6, [pc, #196]	; (801bfc4 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xdc>)
 801befe:	6832      	ldr	r2, [r6, #0]
 801bf00:	b92a      	cbnz	r2, 801bf0e <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x26>
 801bf02:	4b31      	ldr	r3, [pc, #196]	; (801bfc8 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xe0>)
 801bf04:	21ae      	movs	r1, #174	; 0xae
 801bf06:	4a31      	ldr	r2, [pc, #196]	; (801bfcc <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xe4>)
 801bf08:	4831      	ldr	r0, [pc, #196]	; (801bfd0 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xe8>)
 801bf0a:	f00f fcb5 	bl	802b878 <__assert_func>
 801bf0e:	4d31      	ldr	r5, [pc, #196]	; (801bfd4 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xec>)
 801bf10:	8829      	ldrh	r1, [r5, #0]
 801bf12:	4299      	cmp	r1, r3
 801bf14:	d803      	bhi.n	801bf1e <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x36>
 801bf16:	4b30      	ldr	r3, [pc, #192]	; (801bfd8 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xf0>)
 801bf18:	21af      	movs	r1, #175	; 0xaf
 801bf1a:	4a2c      	ldr	r2, [pc, #176]	; (801bfcc <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xe4>)
 801bf1c:	e7f4      	b.n	801bf08 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x20>
 801bf1e:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 801bf22:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 801bf26:	4b2d      	ldr	r3, [pc, #180]	; (801bfdc <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xf4>)
 801bf28:	681b      	ldr	r3, [r3, #0]
 801bf2a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801bf2e:	2a00      	cmp	r2, #0
 801bf30:	d044      	beq.n	801bfbc <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd4>
 801bf32:	784b      	ldrb	r3, [r1, #1]
 801bf34:	f890 c036 	ldrb.w	ip, [r0, #54]	; 0x36
 801bf38:	f3c3 0a01 	ubfx	sl, r3, #0, #2
 801bf3c:	f3c3 0381 	ubfx	r3, r3, #2, #2
 801bf40:	f9b0 e034 	ldrsh.w	lr, [r0, #52]	; 0x34
 801bf44:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
 801bf48:	4b25      	ldr	r3, [pc, #148]	; (801bfe0 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xf8>)
 801bf4a:	f890 9038 	ldrb.w	r9, [r0, #56]	; 0x38
 801bf4e:	681b      	ldr	r3, [r3, #0]
 801bf50:	f890 7037 	ldrb.w	r7, [r0, #55]	; 0x37
 801bf54:	f890 1039 	ldrb.w	r1, [r0, #57]	; 0x39
 801bf58:	9207      	str	r2, [sp, #28]
 801bf5a:	6b00      	ldr	r0, [r0, #48]	; 0x30
 801bf5c:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 801bf60:	f88d a020 	strb.w	sl, [sp, #32]
 801bf64:	f88d 9022 	strb.w	r9, [sp, #34]	; 0x22
 801bf68:	9009      	str	r0, [sp, #36]	; 0x24
 801bf6a:	f8ad e028 	strh.w	lr, [sp, #40]	; 0x28
 801bf6e:	f88d c02a 	strb.w	ip, [sp, #42]	; 0x2a
 801bf72:	f88d 702b 	strb.w	r7, [sp, #43]	; 0x2b
 801bf76:	f88d 102c 	strb.w	r1, [sp, #44]	; 0x2c
 801bf7a:	b10a      	cbz	r2, 801bf80 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x98>
 801bf7c:	6cdf      	ldr	r7, [r3, #76]	; 0x4c
 801bf7e:	b907      	cbnz	r7, 801bf82 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x9a>
 801bf80:	689f      	ldr	r7, [r3, #8]
 801bf82:	f10d 0914 	add.w	r9, sp, #20
 801bf86:	4621      	mov	r1, r4
 801bf88:	4648      	mov	r0, r9
 801bf8a:	f003 fcfd 	bl	801f988 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801bf8e:	6833      	ldr	r3, [r6, #0]
 801bf90:	2b00      	cmp	r3, #0
 801bf92:	d0b6      	beq.n	801bf02 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x1a>
 801bf94:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 801bf96:	882b      	ldrh	r3, [r5, #0]
 801bf98:	428b      	cmp	r3, r1
 801bf9a:	d9bc      	bls.n	801bf16 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x2e>
 801bf9c:	4b11      	ldr	r3, [pc, #68]	; (801bfe4 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xfc>)
 801bf9e:	6818      	ldr	r0, [r3, #0]
 801bfa0:	f7ec fa1e 	bl	80083e0 <_ZNK8touchgfx5Texts7getTextEt>
 801bfa4:	2300      	movs	r3, #0
 801bfa6:	9001      	str	r0, [sp, #4]
 801bfa8:	4638      	mov	r0, r7
 801bfaa:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801bfae:	ab07      	add	r3, sp, #28
 801bfb0:	9300      	str	r3, [sp, #0]
 801bfb2:	4643      	mov	r3, r8
 801bfb4:	e899 0006 	ldmia.w	r9, {r1, r2}
 801bfb8:	f7ec f9a3 	bl	8008302 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 801bfbc:	b00c      	add	sp, #48	; 0x30
 801bfbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801bfc2:	bf00      	nop
 801bfc4:	2400c92c 	.word	0x2400c92c
 801bfc8:	0802fb60 	.word	0x0802fb60
 801bfcc:	0802fc98 	.word	0x0802fc98
 801bfd0:	0802fba2 	.word	0x0802fba2
 801bfd4:	2400c930 	.word	0x2400c930
 801bfd8:	0802fbcb 	.word	0x0802fbcb
 801bfdc:	2400c934 	.word	0x2400c934
 801bfe0:	2400c8bc 	.word	0x2400c8bc
 801bfe4:	2400c938 	.word	0x2400c938

0801bfe8 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz>:
 801bfe8:	b40e      	push	{r1, r2, r3}
 801bfea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801bfee:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bff2:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
 801bff4:	b09c      	sub	sp, #112	; 0x70
 801bff6:	4604      	mov	r4, r0
 801bff8:	4293      	cmp	r3, r2
 801bffa:	d06b      	beq.n	801c0d4 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xec>
 801bffc:	aa26      	add	r2, sp, #152	; 0x98
 801bffe:	f8df a0e8 	ldr.w	sl, [pc, #232]	; 801c0e8 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x100>
 801c002:	9202      	str	r2, [sp, #8]
 801c004:	f8da 2000 	ldr.w	r2, [sl]
 801c008:	b92a      	cbnz	r2, 801c016 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x2e>
 801c00a:	4b33      	ldr	r3, [pc, #204]	; (801c0d8 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xf0>)
 801c00c:	21ae      	movs	r1, #174	; 0xae
 801c00e:	4a33      	ldr	r2, [pc, #204]	; (801c0dc <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xf4>)
 801c010:	4833      	ldr	r0, [pc, #204]	; (801c0e0 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xf8>)
 801c012:	f00f fc31 	bl	802b878 <__assert_func>
 801c016:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 801c0ec <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x104>
 801c01a:	f8b8 1000 	ldrh.w	r1, [r8]
 801c01e:	4299      	cmp	r1, r3
 801c020:	d803      	bhi.n	801c02a <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x42>
 801c022:	4b30      	ldr	r3, [pc, #192]	; (801c0e4 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xfc>)
 801c024:	21af      	movs	r1, #175	; 0xaf
 801c026:	4a2d      	ldr	r2, [pc, #180]	; (801c0dc <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xf4>)
 801c028:	e7f2      	b.n	801c010 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x28>
 801c02a:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 801c0f0 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x108>
 801c02e:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 801c032:	f8d9 3000 	ldr.w	r3, [r9]
 801c036:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 801c03a:	682b      	ldr	r3, [r5, #0]
 801c03c:	4628      	mov	r0, r5
 801c03e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c040:	4798      	blx	r3
 801c042:	4606      	mov	r6, r0
 801c044:	b207      	sxth	r7, r0
 801c046:	a803      	add	r0, sp, #12
 801c048:	f004 f982 	bl	8020350 <_ZN8touchgfx12TextProviderC1Ev>
 801c04c:	682b      	ldr	r3, [r5, #0]
 801c04e:	4628      	mov	r0, r5
 801c050:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801c052:	4798      	blx	r3
 801c054:	682b      	ldr	r3, [r5, #0]
 801c056:	4683      	mov	fp, r0
 801c058:	4628      	mov	r0, r5
 801c05a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801c05c:	4798      	blx	r3
 801c05e:	465b      	mov	r3, fp
 801c060:	9000      	str	r0, [sp, #0]
 801c062:	a803      	add	r0, sp, #12
 801c064:	9925      	ldr	r1, [sp, #148]	; 0x94
 801c066:	9a02      	ldr	r2, [sp, #8]
 801c068:	f004 f9c5 	bl	80203f6 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801c06c:	f8da 3000 	ldr.w	r3, [sl]
 801c070:	f894 1039 	ldrb.w	r1, [r4, #57]	; 0x39
 801c074:	2b00      	cmp	r3, #0
 801c076:	d0c8      	beq.n	801c00a <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x22>
 801c078:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 801c07a:	f8b8 0000 	ldrh.w	r0, [r8]
 801c07e:	4290      	cmp	r0, r2
 801c080:	d9cf      	bls.n	801c022 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x3a>
 801c082:	eb03 0542 	add.w	r5, r3, r2, lsl #1
 801c086:	f813 0012 	ldrb.w	r0, [r3, r2, lsl #1]
 801c08a:	f894 c037 	ldrb.w	ip, [r4, #55]	; 0x37
 801c08e:	786a      	ldrb	r2, [r5, #1]
 801c090:	8925      	ldrh	r5, [r4, #8]
 801c092:	f8d9 3000 	ldr.w	r3, [r9]
 801c096:	f3c2 0281 	ubfx	r2, r2, #2, #2
 801c09a:	eba5 050c 	sub.w	r5, r5, ip
 801c09e:	b22d      	sxth	r5, r5
 801c0a0:	9500      	str	r5, [sp, #0]
 801c0a2:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 801c0a6:	a803      	add	r0, sp, #12
 801c0a8:	f001 ffb3 	bl	801e012 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>
 801c0ac:	f9b4 2034 	ldrsh.w	r2, [r4, #52]	; 0x34
 801c0b0:	b203      	sxth	r3, r0
 801c0b2:	18b9      	adds	r1, r7, r2
 801c0b4:	2900      	cmp	r1, #0
 801c0b6:	dd0b      	ble.n	801c0d0 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xe8>
 801c0b8:	3b01      	subs	r3, #1
 801c0ba:	fb13 f302 	smulbb	r3, r3, r2
 801c0be:	fb16 3300 	smlabb	r3, r6, r0, r3
 801c0c2:	b21f      	sxth	r7, r3
 801c0c4:	4638      	mov	r0, r7
 801c0c6:	b01c      	add	sp, #112	; 0x70
 801c0c8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c0cc:	b003      	add	sp, #12
 801c0ce:	4770      	bx	lr
 801c0d0:	2b00      	cmp	r3, #0
 801c0d2:	dcf7      	bgt.n	801c0c4 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xdc>
 801c0d4:	2700      	movs	r7, #0
 801c0d6:	e7f5      	b.n	801c0c4 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xdc>
 801c0d8:	0802fb60 	.word	0x0802fb60
 801c0dc:	0802fc98 	.word	0x0802fc98
 801c0e0:	0802fba2 	.word	0x0802fba2
 801c0e4:	0802fbcb 	.word	0x0802fbcb
 801c0e8:	2400c92c 	.word	0x2400c92c
 801c0ec:	2400c930 	.word	0x2400c930
 801c0f0:	2400c934 	.word	0x2400c934

0801c0f4 <_ZN8touchgfx8TextArea13getTextHeightEv>:
 801c0f4:	b570      	push	{r4, r5, r6, lr}
 801c0f6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801c0fa:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 801c0fc:	4604      	mov	r4, r0
 801c0fe:	4299      	cmp	r1, r3
 801c100:	d01e      	beq.n	801c140 <_ZN8touchgfx8TextArea13getTextHeightEv+0x4c>
 801c102:	6803      	ldr	r3, [r0, #0]
 801c104:	6edd      	ldr	r5, [r3, #108]	; 0x6c
 801c106:	4b0f      	ldr	r3, [pc, #60]	; (801c144 <_ZN8touchgfx8TextArea13getTextHeightEv+0x50>)
 801c108:	681b      	ldr	r3, [r3, #0]
 801c10a:	b92b      	cbnz	r3, 801c118 <_ZN8touchgfx8TextArea13getTextHeightEv+0x24>
 801c10c:	4b0e      	ldr	r3, [pc, #56]	; (801c148 <_ZN8touchgfx8TextArea13getTextHeightEv+0x54>)
 801c10e:	21ae      	movs	r1, #174	; 0xae
 801c110:	4a0e      	ldr	r2, [pc, #56]	; (801c14c <_ZN8touchgfx8TextArea13getTextHeightEv+0x58>)
 801c112:	480f      	ldr	r0, [pc, #60]	; (801c150 <_ZN8touchgfx8TextArea13getTextHeightEv+0x5c>)
 801c114:	f00f fbb0 	bl	802b878 <__assert_func>
 801c118:	4b0e      	ldr	r3, [pc, #56]	; (801c154 <_ZN8touchgfx8TextArea13getTextHeightEv+0x60>)
 801c11a:	881b      	ldrh	r3, [r3, #0]
 801c11c:	428b      	cmp	r3, r1
 801c11e:	d803      	bhi.n	801c128 <_ZN8touchgfx8TextArea13getTextHeightEv+0x34>
 801c120:	4b0d      	ldr	r3, [pc, #52]	; (801c158 <_ZN8touchgfx8TextArea13getTextHeightEv+0x64>)
 801c122:	21af      	movs	r1, #175	; 0xaf
 801c124:	4a09      	ldr	r2, [pc, #36]	; (801c14c <_ZN8touchgfx8TextArea13getTextHeightEv+0x58>)
 801c126:	e7f4      	b.n	801c112 <_ZN8touchgfx8TextArea13getTextHeightEv+0x1e>
 801c128:	4b0c      	ldr	r3, [pc, #48]	; (801c15c <_ZN8touchgfx8TextArea13getTextHeightEv+0x68>)
 801c12a:	6818      	ldr	r0, [r3, #0]
 801c12c:	f7ec f958 	bl	80083e0 <_ZNK8touchgfx5Texts7getTextEt>
 801c130:	2300      	movs	r3, #0
 801c132:	4601      	mov	r1, r0
 801c134:	46ac      	mov	ip, r5
 801c136:	4620      	mov	r0, r4
 801c138:	461a      	mov	r2, r3
 801c13a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801c13e:	4760      	bx	ip
 801c140:	2000      	movs	r0, #0
 801c142:	bd70      	pop	{r4, r5, r6, pc}
 801c144:	2400c92c 	.word	0x2400c92c
 801c148:	0802fb60 	.word	0x0802fb60
 801c14c:	0802fc98 	.word	0x0802fc98
 801c150:	0802fba2 	.word	0x0802fba2
 801c154:	2400c930 	.word	0x2400c930
 801c158:	0802fbcb 	.word	0x0802fbcb
 801c15c:	2400c938 	.word	0x2400c938

0801c160 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>:
 801c160:	b538      	push	{r3, r4, r5, lr}
 801c162:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801c166:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 801c168:	4604      	mov	r4, r0
 801c16a:	429a      	cmp	r2, r3
 801c16c:	d014      	beq.n	801c198 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x38>
 801c16e:	6803      	ldr	r3, [r0, #0]
 801c170:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801c172:	4798      	blx	r3
 801c174:	6823      	ldr	r3, [r4, #0]
 801c176:	4605      	mov	r5, r0
 801c178:	4620      	mov	r0, r4
 801c17a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801c17c:	4798      	blx	r3
 801c17e:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 801c182:	b22d      	sxth	r5, r5
 801c184:	4601      	mov	r1, r0
 801c186:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 801c18a:	bf06      	itte	eq
 801c18c:	4602      	moveq	r2, r0
 801c18e:	4629      	moveq	r1, r5
 801c190:	462a      	movne	r2, r5
 801c192:	4620      	mov	r0, r4
 801c194:	f7e8 f8d3 	bl	800433e <_ZN8touchgfx8Drawable14setWidthHeightEss>
 801c198:	bd38      	pop	{r3, r4, r5, pc}

0801c19a <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>:
 801c19a:	888a      	ldrh	r2, [r1, #4]
 801c19c:	8582      	strh	r2, [r0, #44]	; 0x2c
 801c19e:	f9b0 2008 	ldrsh.w	r2, [r0, #8]
 801c1a2:	b922      	cbnz	r2, 801c1ae <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x14>
 801c1a4:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 801c1a8:	b90b      	cbnz	r3, 801c1ae <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x14>
 801c1aa:	f7ff bfd9 	b.w	801c160 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
 801c1ae:	4770      	bx	lr

0801c1b0 <_ZNK8touchgfx3Box12getSolidRectEv>:
 801c1b0:	2300      	movs	r3, #0
 801c1b2:	8083      	strh	r3, [r0, #4]
 801c1b4:	80c3      	strh	r3, [r0, #6]
 801c1b6:	8003      	strh	r3, [r0, #0]
 801c1b8:	8043      	strh	r3, [r0, #2]
 801c1ba:	f891 3026 	ldrb.w	r3, [r1, #38]	; 0x26
 801c1be:	2bff      	cmp	r3, #255	; 0xff
 801c1c0:	bf01      	itttt	eq
 801c1c2:	890b      	ldrheq	r3, [r1, #8]
 801c1c4:	8083      	strheq	r3, [r0, #4]
 801c1c6:	894b      	ldrheq	r3, [r1, #10]
 801c1c8:	80c3      	strheq	r3, [r0, #6]
 801c1ca:	4770      	bx	lr

0801c1cc <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
 801c1cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801c1ce:	4604      	mov	r4, r0
 801c1d0:	466b      	mov	r3, sp
 801c1d2:	6808      	ldr	r0, [r1, #0]
 801c1d4:	6849      	ldr	r1, [r1, #4]
 801c1d6:	c303      	stmia	r3!, {r0, r1}
 801c1d8:	6823      	ldr	r3, [r4, #0]
 801c1da:	4669      	mov	r1, sp
 801c1dc:	4620      	mov	r0, r4
 801c1de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c1e0:	4798      	blx	r3
 801c1e2:	4b08      	ldr	r3, [pc, #32]	; (801c204 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
 801c1e4:	681b      	ldr	r3, [r3, #0]
 801c1e6:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 801c1ea:	b10a      	cbz	r2, 801c1f0 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
 801c1ec:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 801c1ee:	b900      	cbnz	r0, 801c1f2 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
 801c1f0:	6898      	ldr	r0, [r3, #8]
 801c1f2:	6803      	ldr	r3, [r0, #0]
 801c1f4:	4669      	mov	r1, sp
 801c1f6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 801c1f8:	699d      	ldr	r5, [r3, #24]
 801c1fa:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 801c1fe:	47a8      	blx	r5
 801c200:	b003      	add	sp, #12
 801c202:	bd30      	pop	{r4, r5, pc}
 801c204:	2400c8bc 	.word	0x2400c8bc

0801c208 <_ZN8touchgfx10TiledImage9setOffsetEss>:
 801c208:	b570      	push	{r4, r5, r6, lr}
 801c20a:	6803      	ldr	r3, [r0, #0]
 801c20c:	4604      	mov	r4, r0
 801c20e:	4615      	mov	r5, r2
 801c210:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801c212:	4798      	blx	r3
 801c214:	6823      	ldr	r3, [r4, #0]
 801c216:	4629      	mov	r1, r5
 801c218:	4620      	mov	r0, r4
 801c21a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801c21c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801c220:	4718      	bx	r3

0801c222 <_ZN8touchgfx10TiledImage9getOffsetERsS1_>:
 801c222:	b570      	push	{r4, r5, r6, lr}
 801c224:	6803      	ldr	r3, [r0, #0]
 801c226:	4604      	mov	r4, r0
 801c228:	460e      	mov	r6, r1
 801c22a:	4615      	mov	r5, r2
 801c22c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801c22e:	4798      	blx	r3
 801c230:	8030      	strh	r0, [r6, #0]
 801c232:	6823      	ldr	r3, [r4, #0]
 801c234:	4620      	mov	r0, r4
 801c236:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801c238:	4798      	blx	r3
 801c23a:	8028      	strh	r0, [r5, #0]
 801c23c:	bd70      	pop	{r4, r5, r6, pc}

0801c23e <_ZN8touchgfx10TiledImage10getXOffsetEv>:
 801c23e:	f9b0 002a 	ldrsh.w	r0, [r0, #42]	; 0x2a
 801c242:	4770      	bx	lr

0801c244 <_ZN8touchgfx10TiledImage10getYOffsetEv>:
 801c244:	f9b0 002c 	ldrsh.w	r0, [r0, #44]	; 0x2c
 801c248:	4770      	bx	lr

0801c24a <_ZN8touchgfx10TiledImage9setBitmapERKNS_6BitmapE>:
 801c24a:	b510      	push	{r4, lr}
 801c24c:	4604      	mov	r4, r0
 801c24e:	f000 fcd3 	bl	801cbf8 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 801c252:	6823      	ldr	r3, [r4, #0]
 801c254:	4620      	mov	r0, r4
 801c256:	f9b4 202c 	ldrsh.w	r2, [r4, #44]	; 0x2c
 801c25a:	f9b4 102a 	ldrsh.w	r1, [r4, #42]	; 0x2a
 801c25e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801c260:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c264:	4718      	bx	r3

0801c266 <_ZN8touchgfx10TiledImage10setXOffsetEs>:
 801c266:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c268:	f100 0626 	add.w	r6, r0, #38	; 0x26
 801c26c:	4605      	mov	r5, r0
 801c26e:	8541      	strh	r1, [r0, #42]	; 0x2a
 801c270:	4630      	mov	r0, r6
 801c272:	f005 fa41 	bl	80216f8 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801c276:	b1a0      	cbz	r0, 801c2a2 <_ZN8touchgfx10TiledImage10setXOffsetEs+0x3c>
 801c278:	f9b5 702a 	ldrsh.w	r7, [r5, #42]	; 0x2a
 801c27c:	4630      	mov	r0, r6
 801c27e:	f005 fa3b 	bl	80216f8 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801c282:	fb97 f4f0 	sdiv	r4, r7, r0
 801c286:	fb04 7410 	mls	r4, r4, r0, r7
 801c28a:	4630      	mov	r0, r6
 801c28c:	f005 fa34 	bl	80216f8 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801c290:	4404      	add	r4, r0
 801c292:	4630      	mov	r0, r6
 801c294:	f005 fa30 	bl	80216f8 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801c298:	fb94 f3f0 	sdiv	r3, r4, r0
 801c29c:	fb03 4010 	mls	r0, r3, r0, r4
 801c2a0:	8568      	strh	r0, [r5, #42]	; 0x2a
 801c2a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801c2a4 <_ZN8touchgfx10TiledImage10setYOffsetEs>:
 801c2a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c2a6:	f100 0626 	add.w	r6, r0, #38	; 0x26
 801c2aa:	4605      	mov	r5, r0
 801c2ac:	8581      	strh	r1, [r0, #44]	; 0x2c
 801c2ae:	4630      	mov	r0, r6
 801c2b0:	f005 fa5c 	bl	802176c <_ZNK8touchgfx6Bitmap9getHeightEv>
 801c2b4:	b1a0      	cbz	r0, 801c2e0 <_ZN8touchgfx10TiledImage10setYOffsetEs+0x3c>
 801c2b6:	f9b5 702c 	ldrsh.w	r7, [r5, #44]	; 0x2c
 801c2ba:	4630      	mov	r0, r6
 801c2bc:	f005 fa56 	bl	802176c <_ZNK8touchgfx6Bitmap9getHeightEv>
 801c2c0:	fb97 f4f0 	sdiv	r4, r7, r0
 801c2c4:	fb04 7410 	mls	r4, r4, r0, r7
 801c2c8:	4630      	mov	r0, r6
 801c2ca:	f005 fa4f 	bl	802176c <_ZNK8touchgfx6Bitmap9getHeightEv>
 801c2ce:	4404      	add	r4, r0
 801c2d0:	4630      	mov	r0, r6
 801c2d2:	f005 fa4b 	bl	802176c <_ZNK8touchgfx6Bitmap9getHeightEv>
 801c2d6:	fb94 f3f0 	sdiv	r3, r4, r0
 801c2da:	fb03 4010 	mls	r0, r3, r0, r4
 801c2de:	85a8      	strh	r0, [r5, #44]	; 0x2c
 801c2e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801c2e4 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE>:
 801c2e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c2e8:	f100 0b26 	add.w	fp, r0, #38	; 0x26
 801c2ec:	b093      	sub	sp, #76	; 0x4c
 801c2ee:	4607      	mov	r7, r0
 801c2f0:	460e      	mov	r6, r1
 801c2f2:	4658      	mov	r0, fp
 801c2f4:	f005 fa00 	bl	80216f8 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801c2f8:	4605      	mov	r5, r0
 801c2fa:	4658      	mov	r0, fp
 801c2fc:	f005 fa36 	bl	802176c <_ZNK8touchgfx6Bitmap9getHeightEv>
 801c300:	4680      	mov	r8, r0
 801c302:	2d00      	cmp	r5, #0
 801c304:	f000 80c5 	beq.w	801c492 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1ae>
 801c308:	2800      	cmp	r0, #0
 801c30a:	f000 80c2 	beq.w	801c492 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1ae>
 801c30e:	2300      	movs	r3, #0
 801c310:	a90e      	add	r1, sp, #56	; 0x38
 801c312:	4638      	mov	r0, r7
 801c314:	e9cd 330e 	strd	r3, r3, [sp, #56]	; 0x38
 801c318:	683b      	ldr	r3, [r7, #0]
 801c31a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c31c:	4798      	blx	r3
 801c31e:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 801c322:	f9b6 3000 	ldrsh.w	r3, [r6]
 801c326:	88b1      	ldrh	r1, [r6, #4]
 801c328:	189c      	adds	r4, r3, r2
 801c32a:	440b      	add	r3, r1
 801c32c:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	; 0x2c
 801c330:	fa02 f383 	sxtah	r3, r2, r3
 801c334:	3b01      	subs	r3, #1
 801c336:	fb93 f3f5 	sdiv	r3, r3, r5
 801c33a:	fb94 f4f5 	sdiv	r4, r4, r5
 801c33e:	fb13 f305 	smulbb	r3, r3, r5
 801c342:	fb14 f405 	smulbb	r4, r4, r5
 801c346:	b21b      	sxth	r3, r3
 801c348:	1aa4      	subs	r4, r4, r2
 801c34a:	930b      	str	r3, [sp, #44]	; 0x2c
 801c34c:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 801c350:	b2a4      	uxth	r4, r4
 801c352:	185a      	adds	r2, r3, r1
 801c354:	fb92 f2f8 	sdiv	r2, r2, r8
 801c358:	fb12 f208 	smulbb	r2, r2, r8
 801c35c:	1a52      	subs	r2, r2, r1
 801c35e:	b212      	sxth	r2, r2
 801c360:	920c      	str	r2, [sp, #48]	; 0x30
 801c362:	88f2      	ldrh	r2, [r6, #6]
 801c364:	4413      	add	r3, r2
 801c366:	fa01 f383 	sxtah	r3, r1, r3
 801c36a:	3b01      	subs	r3, #1
 801c36c:	fb93 f3f8 	sdiv	r3, r3, r8
 801c370:	fb13 f308 	smulbb	r3, r3, r8
 801c374:	b21b      	sxth	r3, r3
 801c376:	930d      	str	r3, [sp, #52]	; 0x34
 801c378:	1963      	adds	r3, r4, r5
 801c37a:	fa1f fa83 	uxth.w	sl, r3
 801c37e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801c380:	b223      	sxth	r3, r4
 801c382:	4293      	cmp	r3, r2
 801c384:	9305      	str	r3, [sp, #20]
 801c386:	f300 8084 	bgt.w	801c492 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1ae>
 801c38a:	fa0f f38a 	sxth.w	r3, sl
 801c38e:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 801c392:	930a      	str	r3, [sp, #40]	; 0x28
 801c394:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801c396:	4599      	cmp	r9, r3
 801c398:	dd04      	ble.n	801c3a4 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0xc0>
 801c39a:	442c      	add	r4, r5
 801c39c:	eb05 030a 	add.w	r3, r5, sl
 801c3a0:	b2a4      	uxth	r4, r4
 801c3a2:	e7ea      	b.n	801c37a <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x96>
 801c3a4:	f9b6 c000 	ldrsh.w	ip, [r6]
 801c3a8:	88b2      	ldrh	r2, [r6, #4]
 801c3aa:	4462      	add	r2, ip
 801c3ac:	b292      	uxth	r2, r2
 801c3ae:	b213      	sxth	r3, r2
 801c3b0:	9308      	str	r3, [sp, #32]
 801c3b2:	fa1f f389 	uxth.w	r3, r9
 801c3b6:	eb08 0103 	add.w	r1, r8, r3
 801c3ba:	9306      	str	r3, [sp, #24]
 801c3bc:	b289      	uxth	r1, r1
 801c3be:	b208      	sxth	r0, r1
 801c3c0:	9007      	str	r0, [sp, #28]
 801c3c2:	9805      	ldr	r0, [sp, #20]
 801c3c4:	4603      	mov	r3, r0
 801c3c6:	9808      	ldr	r0, [sp, #32]
 801c3c8:	4283      	cmp	r3, r0
 801c3ca:	da5e      	bge.n	801c48a <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1a6>
 801c3cc:	980a      	ldr	r0, [sp, #40]	; 0x28
 801c3ce:	4584      	cmp	ip, r0
 801c3d0:	da5b      	bge.n	801c48a <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1a6>
 801c3d2:	f9b6 0002 	ldrsh.w	r0, [r6, #2]
 801c3d6:	f8b6 e006 	ldrh.w	lr, [r6, #6]
 801c3da:	4486      	add	lr, r0
 801c3dc:	fa1f fe8e 	uxth.w	lr, lr
 801c3e0:	fa0f f38e 	sxth.w	r3, lr
 801c3e4:	4599      	cmp	r9, r3
 801c3e6:	9309      	str	r3, [sp, #36]	; 0x24
 801c3e8:	da4f      	bge.n	801c48a <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1a6>
 801c3ea:	9b07      	ldr	r3, [sp, #28]
 801c3ec:	4298      	cmp	r0, r3
 801c3ee:	da4c      	bge.n	801c48a <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1a6>
 801c3f0:	9b05      	ldr	r3, [sp, #20]
 801c3f2:	459c      	cmp	ip, r3
 801c3f4:	bfb8      	it	lt
 801c3f6:	469c      	movlt	ip, r3
 801c3f8:	4548      	cmp	r0, r9
 801c3fa:	9b08      	ldr	r3, [sp, #32]
 801c3fc:	bfb8      	it	lt
 801c3fe:	4648      	movlt	r0, r9
 801c400:	f8ad c040 	strh.w	ip, [sp, #64]	; 0x40
 801c404:	4699      	mov	r9, r3
 801c406:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c408:	f8ad 0042 	strh.w	r0, [sp, #66]	; 0x42
 801c40c:	4599      	cmp	r9, r3
 801c40e:	bfc8      	it	gt
 801c410:	4652      	movgt	r2, sl
 801c412:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c414:	eba2 020c 	sub.w	r2, r2, ip
 801c418:	f8ad 2044 	strh.w	r2, [sp, #68]	; 0x44
 801c41c:	9a07      	ldr	r2, [sp, #28]
 801c41e:	4293      	cmp	r3, r2
 801c420:	bfd8      	it	le
 801c422:	4671      	movle	r1, lr
 801c424:	1a09      	subs	r1, r1, r0
 801c426:	f8ad 1046 	strh.w	r1, [sp, #70]	; 0x46
 801c42a:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 801c42e:	9b06      	ldr	r3, [sp, #24]
 801c430:	1b12      	subs	r2, r2, r4
 801c432:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 801c436:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 801c43a:	1ad2      	subs	r2, r2, r3
 801c43c:	4b16      	ldr	r3, [pc, #88]	; (801c498 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1b4>)
 801c43e:	f8ad 2042 	strh.w	r2, [sp, #66]	; 0x42
 801c442:	681a      	ldr	r2, [r3, #0]
 801c444:	f892 1076 	ldrb.w	r1, [r2, #118]	; 0x76
 801c448:	b109      	cbz	r1, 801c44e <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x16a>
 801c44a:	6cd0      	ldr	r0, [r2, #76]	; 0x4c
 801c44c:	b900      	cbnz	r0, 801c450 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x16c>
 801c44e:	6890      	ldr	r0, [r2, #8]
 801c450:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 801c454:	f04f 0c01 	mov.w	ip, #1
 801c458:	9b06      	ldr	r3, [sp, #24]
 801c45a:	6801      	ldr	r1, [r0, #0]
 801c45c:	4413      	add	r3, r2
 801c45e:	f8cd c008 	str.w	ip, [sp, #8]
 801c462:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
 801c466:	f897 c028 	ldrb.w	ip, [r7, #40]	; 0x28
 801c46a:	b21b      	sxth	r3, r3
 801c46c:	4422      	add	r2, r4
 801c46e:	f8cd c004 	str.w	ip, [sp, #4]
 801c472:	f10d 0c40 	add.w	ip, sp, #64	; 0x40
 801c476:	b212      	sxth	r2, r2
 801c478:	f8cd c000 	str.w	ip, [sp]
 801c47c:	f8d1 9008 	ldr.w	r9, [r1, #8]
 801c480:	4659      	mov	r1, fp
 801c482:	47c8      	blx	r9
 801c484:	f8dd 901c 	ldr.w	r9, [sp, #28]
 801c488:	e784      	b.n	801c394 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0xb0>
 801c48a:	2300      	movs	r3, #0
 801c48c:	e9cd 3310 	strd	r3, r3, [sp, #64]	; 0x40
 801c490:	e7cb      	b.n	801c42a <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x146>
 801c492:	b013      	add	sp, #76	; 0x4c
 801c494:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c498:	2400c8bc 	.word	0x2400c8bc

0801c49c <_ZNK8touchgfx10TiledImage12getSolidRectEv>:
 801c49c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c4a0:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 801c4a4:	4606      	mov	r6, r0
 801c4a6:	4689      	mov	r9, r1
 801c4a8:	2bff      	cmp	r3, #255	; 0xff
 801c4aa:	d008      	beq.n	801c4be <_ZNK8touchgfx10TiledImage12getSolidRectEv+0x22>
 801c4ac:	2300      	movs	r3, #0
 801c4ae:	8003      	strh	r3, [r0, #0]
 801c4b0:	8043      	strh	r3, [r0, #2]
 801c4b2:	8083      	strh	r3, [r0, #4]
 801c4b4:	4630      	mov	r0, r6
 801c4b6:	80f3      	strh	r3, [r6, #6]
 801c4b8:	b003      	add	sp, #12
 801c4ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c4be:	f101 0b26 	add.w	fp, r1, #38	; 0x26
 801c4c2:	4668      	mov	r0, sp
 801c4c4:	4659      	mov	r1, fp
 801c4c6:	f005 f98b 	bl	80217e0 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 801c4ca:	f9bd 4004 	ldrsh.w	r4, [sp, #4]
 801c4ce:	4658      	mov	r0, fp
 801c4d0:	f9bd 7000 	ldrsh.w	r7, [sp]
 801c4d4:	f9bd a002 	ldrsh.w	sl, [sp, #2]
 801c4d8:	f9bd 8006 	ldrsh.w	r8, [sp, #6]
 801c4dc:	f005 f90c 	bl	80216f8 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801c4e0:	4284      	cmp	r4, r0
 801c4e2:	d10d      	bne.n	801c500 <_ZNK8touchgfx10TiledImage12getSolidRectEv+0x64>
 801c4e4:	f9b9 5008 	ldrsh.w	r5, [r9, #8]
 801c4e8:	4658      	mov	r0, fp
 801c4ea:	f005 f93f 	bl	802176c <_ZNK8touchgfx6Bitmap9getHeightEv>
 801c4ee:	4580      	cmp	r8, r0
 801c4f0:	d12a      	bne.n	801c548 <_ZNK8touchgfx10TiledImage12getSolidRectEv+0xac>
 801c4f2:	f9b9 300a 	ldrsh.w	r3, [r9, #10]
 801c4f6:	8037      	strh	r7, [r6, #0]
 801c4f8:	f8a6 a002 	strh.w	sl, [r6, #2]
 801c4fc:	80b5      	strh	r5, [r6, #4]
 801c4fe:	e7d9      	b.n	801c4b4 <_ZNK8touchgfx10TiledImage12getSolidRectEv+0x18>
 801c500:	f8b9 502a 	ldrh.w	r5, [r9, #42]	; 0x2a
 801c504:	4658      	mov	r0, fp
 801c506:	f005 f8f7 	bl	80216f8 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801c50a:	f9b9 2008 	ldrsh.w	r2, [r9, #8]
 801c50e:	1b7f      	subs	r7, r7, r5
 801c510:	b2a3      	uxth	r3, r4
 801c512:	b2bd      	uxth	r5, r7
 801c514:	b22f      	sxth	r7, r5
 801c516:	4428      	add	r0, r5
 801c518:	2f00      	cmp	r7, #0
 801c51a:	b280      	uxth	r0, r0
 801c51c:	bfb8      	it	lt
 801c51e:	18ed      	addlt	r5, r5, r3
 801c520:	4403      	add	r3, r0
 801c522:	bfac      	ite	ge
 801c524:	4625      	movge	r5, r4
 801c526:	2700      	movlt	r7, #0
 801c528:	b29b      	uxth	r3, r3
 801c52a:	bfb8      	it	lt
 801c52c:	b22d      	sxthlt	r5, r5
 801c52e:	b219      	sxth	r1, r3
 801c530:	bfb8      	it	lt
 801c532:	ea25 75e5 	biclt.w	r5, r5, r5, asr #31
 801c536:	4291      	cmp	r1, r2
 801c538:	bfc4      	itt	gt
 801c53a:	1a9c      	subgt	r4, r3, r2
 801c53c:	b224      	sxthgt	r4, r4
 801c53e:	42ac      	cmp	r4, r5
 801c540:	bfc4      	itt	gt
 801c542:	b207      	sxthgt	r7, r0
 801c544:	4625      	movgt	r5, r4
 801c546:	e7cf      	b.n	801c4e8 <_ZNK8touchgfx10TiledImage12getSolidRectEv+0x4c>
 801c548:	f8b9 402c 	ldrh.w	r4, [r9, #44]	; 0x2c
 801c54c:	4658      	mov	r0, fp
 801c54e:	f005 f90d 	bl	802176c <_ZNK8touchgfx6Bitmap9getHeightEv>
 801c552:	f9b9 100a 	ldrsh.w	r1, [r9, #10]
 801c556:	ebaa 0404 	sub.w	r4, sl, r4
 801c55a:	fa1f f288 	uxth.w	r2, r8
 801c55e:	b2a4      	uxth	r4, r4
 801c560:	fa0f fa84 	sxth.w	sl, r4
 801c564:	4420      	add	r0, r4
 801c566:	f1ba 0f00 	cmp.w	sl, #0
 801c56a:	b280      	uxth	r0, r0
 801c56c:	bfb8      	it	lt
 801c56e:	18a3      	addlt	r3, r4, r2
 801c570:	4402      	add	r2, r0
 801c572:	bfac      	ite	ge
 801c574:	4643      	movge	r3, r8
 801c576:	f04f 0a00 	movlt.w	sl, #0
 801c57a:	b292      	uxth	r2, r2
 801c57c:	bfb8      	it	lt
 801c57e:	b21b      	sxthlt	r3, r3
 801c580:	b214      	sxth	r4, r2
 801c582:	bfb8      	it	lt
 801c584:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 801c588:	428c      	cmp	r4, r1
 801c58a:	bfc4      	itt	gt
 801c58c:	eba2 0801 	subgt.w	r8, r2, r1
 801c590:	fa0f f888 	sxthgt.w	r8, r8
 801c594:	4598      	cmp	r8, r3
 801c596:	bfc4      	itt	gt
 801c598:	fa0f fa80 	sxthgt.w	sl, r0
 801c59c:	4643      	movgt	r3, r8
 801c59e:	e7aa      	b.n	801c4f6 <_ZNK8touchgfx10TiledImage12getSolidRectEv+0x5a>

0801c5a0 <_ZNK8touchgfx5Gauge9getCenterERiS1_>:
 801c5a0:	f9b0 3150 	ldrsh.w	r3, [r0, #336]	; 0x150
 801c5a4:	600b      	str	r3, [r1, #0]
 801c5a6:	f9b0 3152 	ldrsh.w	r3, [r0, #338]	; 0x152
 801c5aa:	6013      	str	r3, [r2, #0]
 801c5ac:	4770      	bx	lr

0801c5ae <_ZN8touchgfx5Gauge8setWidthEs>:
 801c5ae:	8101      	strh	r1, [r0, #8]
 801c5b0:	f8a0 10bc 	strh.w	r1, [r0, #188]	; 0xbc
 801c5b4:	f8a0 1160 	strh.w	r1, [r0, #352]	; 0x160
 801c5b8:	4770      	bx	lr

0801c5ba <_ZN8touchgfx5Gauge9setHeightEs>:
 801c5ba:	8141      	strh	r1, [r0, #10]
 801c5bc:	f8a0 10be 	strh.w	r1, [r0, #190]	; 0xbe
 801c5c0:	f8a0 1162 	strh.w	r1, [r0, #354]	; 0x162
 801c5c4:	4770      	bx	lr

0801c5c6 <_ZNK8touchgfx5Gauge13getStartAngleEv>:
 801c5c6:	f8d0 0148 	ldr.w	r0, [r0, #328]	; 0x148
 801c5ca:	4770      	bx	lr

0801c5cc <_ZNK8touchgfx5Gauge11getEndAngleEv>:
 801c5cc:	f8d0 014c 	ldr.w	r0, [r0, #332]	; 0x14c
 801c5d0:	4770      	bx	lr

0801c5d2 <_ZN8touchgfx5Gauge28setProgressIndicatorPositionEssss>:
 801c5d2:	4770      	bx	lr

0801c5d4 <_ZN8touchgfx5Gauge8setAlphaEh>:
 801c5d4:	b538      	push	{r3, r4, r5, lr}
 801c5d6:	4604      	mov	r4, r0
 801c5d8:	460d      	mov	r5, r1
 801c5da:	f7fb fb36 	bl	8017c4a <_ZN8touchgfx25AbstractProgressIndicator8setAlphaEh>
 801c5de:	f884 50dc 	strb.w	r5, [r4, #220]	; 0xdc
 801c5e2:	f884 5186 	strb.w	r5, [r4, #390]	; 0x186
 801c5e6:	bd38      	pop	{r3, r4, r5, pc}

0801c5e8 <_ZN8touchgfx5GaugeC1Ev>:
 801c5e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801c5ea:	4604      	mov	r4, r0
 801c5ec:	f7fb fc52 	bl	8017e94 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev>
 801c5f0:	4b18      	ldr	r3, [pc, #96]	; (801c654 <_ZN8touchgfx5GaugeC1Ev+0x6c>)
 801c5f2:	a902      	add	r1, sp, #8
 801c5f4:	4626      	mov	r6, r4
 801c5f6:	2500      	movs	r5, #0
 801c5f8:	f504 77ac 	add.w	r7, r4, #344	; 0x158
 801c5fc:	f846 3bb4 	str.w	r3, [r6], #180
 801c600:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801c604:	4630      	mov	r0, r6
 801c606:	f821 3d04 	strh.w	r3, [r1, #-4]!
 801c60a:	f7fe fe61 	bl	801b2d0 <_ZN8touchgfx13TextureMapperC1ERKNS_6BitmapE>
 801c60e:	2301      	movs	r3, #1
 801c610:	f8c4 5148 	str.w	r5, [r4, #328]	; 0x148
 801c614:	4638      	mov	r0, r7
 801c616:	f884 3144 	strb.w	r3, [r4, #324]	; 0x144
 801c61a:	f884 3145 	strb.w	r3, [r4, #325]	; 0x145
 801c61e:	f8c4 514c 	str.w	r5, [r4, #332]	; 0x14c
 801c622:	f8c4 5150 	str.w	r5, [r4, #336]	; 0x150
 801c626:	f8c4 5154 	str.w	r5, [r4, #340]	; 0x154
 801c62a:	f7fc ffe3 	bl	80195f4 <_ZN8touchgfx6CircleC1Ev>
 801c62e:	f104 0158 	add.w	r1, r4, #88	; 0x58
 801c632:	4620      	mov	r0, r4
 801c634:	f7fb fcba 	bl	8017fac <_ZN8touchgfx9Container6removeERNS_8DrawableE>
 801c638:	4639      	mov	r1, r7
 801c63a:	4620      	mov	r0, r4
 801c63c:	f7fb fce8 	bl	8018010 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 801c640:	4620      	mov	r0, r4
 801c642:	4631      	mov	r1, r6
 801c644:	f7fb fce4 	bl	8018010 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 801c648:	4620      	mov	r0, r4
 801c64a:	f884 517d 	strb.w	r5, [r4, #381]	; 0x17d
 801c64e:	b003      	add	sp, #12
 801c650:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c652:	bf00      	nop
 801c654:	0802fdf8 	.word	0x0802fdf8

0801c658 <_ZN8touchgfx5Gauge33setMovingNeedleRenderingAlgorithmENS_13TextureMapper18RenderingAlgorithmE>:
 801c658:	f880 1144 	strb.w	r1, [r0, #324]	; 0x144
 801c65c:	4770      	bx	lr

0801c65e <_ZN8touchgfx5Gauge33setSteadyNeedleRenderingAlgorithmENS_13TextureMapper18RenderingAlgorithmE>:
 801c65e:	f880 1145 	strb.w	r1, [r0, #325]	; 0x145
 801c662:	4770      	bx	lr

0801c664 <_ZN8touchgfx5Gauge24setupNeedleTextureMapperEv>:
 801c664:	b538      	push	{r3, r4, r5, lr}
 801c666:	8902      	ldrh	r2, [r0, #8]
 801c668:	f100 05b4 	add.w	r5, r0, #180	; 0xb4
 801c66c:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 801c670:	4604      	mov	r4, r0
 801c672:	f8a0 20bc 	strh.w	r2, [r0, #188]	; 0xbc
 801c676:	2200      	movs	r2, #0
 801c678:	f8a0 30be 	strh.w	r3, [r0, #190]	; 0xbe
 801c67c:	4628      	mov	r0, r5
 801c67e:	4611      	mov	r1, r2
 801c680:	f7e7 fe01 	bl	8004286 <_ZN8touchgfx8Drawable5setXYEss>
 801c684:	f9b4 2156 	ldrsh.w	r2, [r4, #342]	; 0x156
 801c688:	f9b4 3152 	ldrsh.w	r3, [r4, #338]	; 0x152
 801c68c:	4628      	mov	r0, r5
 801c68e:	1a9b      	subs	r3, r3, r2
 801c690:	f9b4 2154 	ldrsh.w	r2, [r4, #340]	; 0x154
 801c694:	ee07 3a90 	vmov	s15, r3
 801c698:	f9b4 3150 	ldrsh.w	r3, [r4, #336]	; 0x150
 801c69c:	1a9b      	subs	r3, r3, r2
 801c69e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801c6a2:	ee07 3a10 	vmov	s14, r3
 801c6a6:	edc4 7a39 	vstr	s15, [r4, #228]	; 0xe4
 801c6aa:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801c6ae:	ed84 7a38 	vstr	s14, [r4, #224]	; 0xe0
 801c6b2:	f7fe fe59 	bl	801b368 <_ZN8touchgfx13TextureMapper19applyTransformationEv>
 801c6b6:	4b16      	ldr	r3, [pc, #88]	; (801c710 <_ZN8touchgfx5Gauge24setupNeedleTextureMapperEv+0xac>)
 801c6b8:	4628      	mov	r0, r5
 801c6ba:	f8c4 310c 	str.w	r3, [r4, #268]	; 0x10c
 801c6be:	f7fe fe53 	bl	801b368 <_ZN8touchgfx13TextureMapper19applyTransformationEv>
 801c6c2:	f9b4 3152 	ldrsh.w	r3, [r4, #338]	; 0x152
 801c6c6:	f9b4 2150 	ldrsh.w	r2, [r4, #336]	; 0x150
 801c6ca:	4628      	mov	r0, r5
 801c6cc:	ee07 3a90 	vmov	s15, r3
 801c6d0:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
 801c6d4:	ee07 2a10 	vmov	s14, r2
 801c6d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801c6dc:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 801c6e0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801c6e4:	edc4 7a3f 	vstr	s15, [r4, #252]	; 0xfc
 801c6e8:	ed84 7a3e 	vstr	s14, [r4, #248]	; 0xf8
 801c6ec:	f7fe fe3c 	bl	801b368 <_ZN8touchgfx13TextureMapper19applyTransformationEv>
 801c6f0:	f8d4 30fc 	ldr.w	r3, [r4, #252]	; 0xfc
 801c6f4:	f8d4 20f8 	ldr.w	r2, [r4, #248]	; 0xf8
 801c6f8:	4628      	mov	r0, r5
 801c6fa:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
 801c6fe:	f8c4 2104 	str.w	r2, [r4, #260]	; 0x104
 801c702:	f7fe fe31 	bl	801b368 <_ZN8touchgfx13TextureMapper19applyTransformationEv>
 801c706:	2301      	movs	r3, #1
 801c708:	f884 30dd 	strb.w	r3, [r4, #221]	; 0xdd
 801c70c:	bd38      	pop	{r3, r4, r5, pc}
 801c70e:	bf00      	nop
 801c710:	43960000 	.word	0x43960000

0801c714 <_ZN8touchgfx5Gauge9setNeedleEtss>:
 801c714:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801c716:	4604      	mov	r4, r0
 801c718:	a802      	add	r0, sp, #8
 801c71a:	4616      	mov	r6, r2
 801c71c:	461d      	mov	r5, r3
 801c71e:	f820 1d04 	strh.w	r1, [r0, #-4]!
 801c722:	4601      	mov	r1, r0
 801c724:	f104 00b4 	add.w	r0, r4, #180	; 0xb4
 801c728:	f7fe ff74 	bl	801b614 <_ZN8touchgfx13TextureMapper9setBitmapERKNS_6BitmapE>
 801c72c:	4620      	mov	r0, r4
 801c72e:	f8a4 6154 	strh.w	r6, [r4, #340]	; 0x154
 801c732:	f8a4 5156 	strh.w	r5, [r4, #342]	; 0x156
 801c736:	f7ff ff95 	bl	801c664 <_ZN8touchgfx5Gauge24setupNeedleTextureMapperEv>
 801c73a:	b002      	add	sp, #8
 801c73c:	bd70      	pop	{r4, r5, r6, pc}

0801c73e <_ZN8touchgfx5Gauge9setCenterEii>:
 801c73e:	b570      	push	{r4, r5, r6, lr}
 801c740:	4606      	mov	r6, r0
 801c742:	460d      	mov	r5, r1
 801c744:	4614      	mov	r4, r2
 801c746:	f8a6 1150 	strh.w	r1, [r6, #336]	; 0x150
 801c74a:	f8a6 2152 	strh.w	r2, [r6, #338]	; 0x152
 801c74e:	f7ff ff89 	bl	801c664 <_ZN8touchgfx5Gauge24setupNeedleTextureMapperEv>
 801c752:	f9b6 215e 	ldrsh.w	r2, [r6, #350]	; 0x15e
 801c756:	f9b6 115c 	ldrsh.w	r1, [r6, #348]	; 0x15c
 801c75a:	1aa4      	subs	r4, r4, r2
 801c75c:	1a6d      	subs	r5, r5, r1
 801c75e:	0164      	lsls	r4, r4, #5
 801c760:	016d      	lsls	r5, r5, #5
 801c762:	3410      	adds	r4, #16
 801c764:	3510      	adds	r5, #16
 801c766:	f8c6 418c 	str.w	r4, [r6, #396]	; 0x18c
 801c76a:	f8c6 5188 	str.w	r5, [r6, #392]	; 0x188
 801c76e:	bd70      	pop	{r4, r5, r6, pc}

0801c770 <_ZN8touchgfx6Circle12updateArcEndIiEEvT_>:
 801c770:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801c772:	0149      	lsls	r1, r1, #5
 801c774:	6c03      	ldr	r3, [r0, #64]	; 0x40
 801c776:	4604      	mov	r4, r0
 801c778:	4299      	cmp	r1, r3
 801c77a:	9101      	str	r1, [sp, #4]
 801c77c:	d00b      	beq.n	801c796 <_ZN8touchgfx6Circle12updateArcEndIiEEvT_+0x26>
 801c77e:	4601      	mov	r1, r0
 801c780:	aa01      	add	r2, sp, #4
 801c782:	a802      	add	r0, sp, #8
 801c784:	f7fd f94f 	bl	8019a26 <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E>
 801c788:	9b01      	ldr	r3, [sp, #4]
 801c78a:	a902      	add	r1, sp, #8
 801c78c:	4620      	mov	r0, r4
 801c78e:	6423      	str	r3, [r4, #64]	; 0x40
 801c790:	6823      	ldr	r3, [r4, #0]
 801c792:	691b      	ldr	r3, [r3, #16]
 801c794:	4798      	blx	r3
 801c796:	b004      	add	sp, #16
 801c798:	bd10      	pop	{r4, pc}
	...

0801c79c <_ZN8touchgfx5Gauge8setValueEi>:
 801c79c:	b570      	push	{r4, r5, r6, lr}
 801c79e:	4604      	mov	r4, r0
 801c7a0:	f7fb fa9c 	bl	8017cdc <_ZN8touchgfx25AbstractProgressIndicator8setValueEi>
 801c7a4:	e9d4 3229 	ldrd	r3, r2, [r4, #164]	; 0xa4
 801c7a8:	f8d4 114c 	ldr.w	r1, [r4, #332]	; 0x14c
 801c7ac:	4620      	mov	r0, r4
 801c7ae:	429a      	cmp	r2, r3
 801c7b0:	f504 76ac 	add.w	r6, r4, #344	; 0x158
 801c7b4:	bfac      	ite	ge
 801c7b6:	f894 3145 	ldrbge.w	r3, [r4, #325]	; 0x145
 801c7ba:	f894 3144 	ldrblt.w	r3, [r4, #324]	; 0x144
 801c7be:	f884 30dd 	strb.w	r3, [r4, #221]	; 0xdd
 801c7c2:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
 801c7c6:	1ac9      	subs	r1, r1, r3
 801c7c8:	2900      	cmp	r1, #0
 801c7ca:	bfb8      	it	lt
 801c7cc:	4249      	neglt	r1, r1
 801c7ce:	b289      	uxth	r1, r1
 801c7d0:	f7fb fb17 	bl	8017e02 <_ZNK8touchgfx25AbstractProgressIndicator11getProgressEt>
 801c7d4:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
 801c7d8:	f8d4 214c 	ldr.w	r2, [r4, #332]	; 0x14c
 801c7dc:	4605      	mov	r5, r0
 801c7de:	eddf 6a18 	vldr	s13, [pc, #96]	; 801c840 <_ZN8touchgfx5Gauge8setValueEi+0xa4>
 801c7e2:	f104 00b4 	add.w	r0, r4, #180	; 0xb4
 801c7e6:	429a      	cmp	r2, r3
 801c7e8:	ed9f 7a16 	vldr	s14, [pc, #88]	; 801c844 <_ZN8touchgfx5Gauge8setValueEi+0xa8>
 801c7ec:	da15      	bge.n	801c81a <_ZN8touchgfx5Gauge8setValueEi+0x7e>
 801c7ee:	1b5b      	subs	r3, r3, r5
 801c7f0:	edd4 0a3b 	vldr	s1, [r4, #236]	; 0xec
 801c7f4:	ed94 0a3a 	vldr	s0, [r4, #232]	; 0xe8
 801c7f8:	ee07 3a90 	vmov	s15, r3
 801c7fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801c800:	ee87 1aa6 	vdiv.f32	s2, s15, s13
 801c804:	ee21 1a07 	vmul.f32	s2, s2, s14
 801c808:	f7fe ffea 	bl	801b7e0 <_ZN8touchgfx13TextureMapper12updateAnglesEfff>
 801c80c:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
 801c810:	1b49      	subs	r1, r1, r5
 801c812:	4630      	mov	r0, r6
 801c814:	f7ff ffac 	bl	801c770 <_ZN8touchgfx6Circle12updateArcEndIiEEvT_>
 801c818:	bd70      	pop	{r4, r5, r6, pc}
 801c81a:	442b      	add	r3, r5
 801c81c:	edd4 0a3b 	vldr	s1, [r4, #236]	; 0xec
 801c820:	ed94 0a3a 	vldr	s0, [r4, #232]	; 0xe8
 801c824:	ee07 3a90 	vmov	s15, r3
 801c828:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801c82c:	ee87 1aa6 	vdiv.f32	s2, s15, s13
 801c830:	ee21 1a07 	vmul.f32	s2, s2, s14
 801c834:	f7fe ffd4 	bl	801b7e0 <_ZN8touchgfx13TextureMapper12updateAnglesEfff>
 801c838:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
 801c83c:	4429      	add	r1, r5
 801c83e:	e7e8      	b.n	801c812 <_ZN8touchgfx5Gauge8setValueEi+0x76>
 801c840:	43340000 	.word	0x43340000
 801c844:	40490fdb 	.word	0x40490fdb

0801c848 <_ZN8touchgfx5Gauge16setStartEndAngleEii>:
 801c848:	4291      	cmp	r1, r2
 801c84a:	b510      	push	{r4, lr}
 801c84c:	4604      	mov	r4, r0
 801c84e:	d105      	bne.n	801c85c <_ZN8touchgfx5Gauge16setStartEndAngleEii+0x14>
 801c850:	4b0b      	ldr	r3, [pc, #44]	; (801c880 <_ZN8touchgfx5Gauge16setStartEndAngleEii+0x38>)
 801c852:	215e      	movs	r1, #94	; 0x5e
 801c854:	4a0b      	ldr	r2, [pc, #44]	; (801c884 <_ZN8touchgfx5Gauge16setStartEndAngleEii+0x3c>)
 801c856:	480c      	ldr	r0, [pc, #48]	; (801c888 <_ZN8touchgfx5Gauge16setStartEndAngleEii+0x40>)
 801c858:	f00f f80e 	bl	802b878 <__assert_func>
 801c85c:	f8c0 1148 	str.w	r1, [r0, #328]	; 0x148
 801c860:	0149      	lsls	r1, r1, #5
 801c862:	f8c0 214c 	str.w	r2, [r0, #332]	; 0x14c
 801c866:	0152      	lsls	r2, r2, #5
 801c868:	f8c0 1194 	str.w	r1, [r0, #404]	; 0x194
 801c86c:	f8c0 2198 	str.w	r2, [r0, #408]	; 0x198
 801c870:	f7fb f9e8 	bl	8017c44 <_ZNK8touchgfx25AbstractProgressIndicator8getValueEv>
 801c874:	4601      	mov	r1, r0
 801c876:	4620      	mov	r0, r4
 801c878:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c87c:	f7ff bf8e 	b.w	801c79c <_ZN8touchgfx5Gauge8setValueEi>
 801c880:	0802fdac 	.word	0x0802fdac
 801c884:	0802fed4 	.word	0x0802fed4
 801c888:	0802fdc3 	.word	0x0802fdc3

0801c88c <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>:
 801c88c:	b570      	push	{r4, r5, r6, lr}
 801c88e:	880b      	ldrh	r3, [r1, #0]
 801c890:	4605      	mov	r5, r0
 801c892:	4604      	mov	r4, r0
 801c894:	85c3      	strh	r3, [r0, #46]	; 0x2e
 801c896:	8813      	ldrh	r3, [r2, #0]
 801c898:	f825 3f30 	strh.w	r3, [r5, #48]!
 801c89c:	4628      	mov	r0, r5
 801c89e:	f004 ff2b 	bl	80216f8 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801c8a2:	4606      	mov	r6, r0
 801c8a4:	4628      	mov	r0, r5
 801c8a6:	f004 ff61 	bl	802176c <_ZNK8touchgfx6Bitmap9getHeightEv>
 801c8aa:	6823      	ldr	r3, [r4, #0]
 801c8ac:	4605      	mov	r5, r0
 801c8ae:	b231      	sxth	r1, r6
 801c8b0:	4620      	mov	r0, r4
 801c8b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801c8b4:	4798      	blx	r3
 801c8b6:	6823      	ldr	r3, [r4, #0]
 801c8b8:	b229      	sxth	r1, r5
 801c8ba:	4620      	mov	r0, r4
 801c8bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c8be:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801c8c2:	4718      	bx	r3

0801c8c4 <_ZNK8touchgfx6Button12getSolidRectEv>:
 801c8c4:	b510      	push	{r4, lr}
 801c8c6:	f891 3032 	ldrb.w	r3, [r1, #50]	; 0x32
 801c8ca:	4604      	mov	r4, r0
 801c8cc:	2bff      	cmp	r3, #255	; 0xff
 801c8ce:	d006      	beq.n	801c8de <_ZNK8touchgfx6Button12getSolidRectEv+0x1a>
 801c8d0:	2300      	movs	r3, #0
 801c8d2:	8003      	strh	r3, [r0, #0]
 801c8d4:	8043      	strh	r3, [r0, #2]
 801c8d6:	8083      	strh	r3, [r0, #4]
 801c8d8:	80c3      	strh	r3, [r0, #6]
 801c8da:	4620      	mov	r0, r4
 801c8dc:	bd10      	pop	{r4, pc}
 801c8de:	f891 302c 	ldrb.w	r3, [r1, #44]	; 0x2c
 801c8e2:	b11b      	cbz	r3, 801c8ec <_ZNK8touchgfx6Button12getSolidRectEv+0x28>
 801c8e4:	3130      	adds	r1, #48	; 0x30
 801c8e6:	f004 ff7b 	bl	80217e0 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 801c8ea:	e7f6      	b.n	801c8da <_ZNK8touchgfx6Button12getSolidRectEv+0x16>
 801c8ec:	312e      	adds	r1, #46	; 0x2e
 801c8ee:	e7fa      	b.n	801c8e6 <_ZNK8touchgfx6Button12getSolidRectEv+0x22>

0801c8f0 <_ZNK8touchgfx6Button4drawERKNS_4RectE>:
 801c8f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c8f4:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 801c8f8:	b08a      	sub	sp, #40	; 0x28
 801c8fa:	4604      	mov	r4, r0
 801c8fc:	4688      	mov	r8, r1
 801c8fe:	2b00      	cmp	r3, #0
 801c900:	d044      	beq.n	801c98c <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x9c>
 801c902:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 801c904:	a805      	add	r0, sp, #20
 801c906:	f8ad 3014 	strh.w	r3, [sp, #20]
 801c90a:	f004 fef5 	bl	80216f8 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801c90e:	4605      	mov	r5, r0
 801c910:	b206      	sxth	r6, r0
 801c912:	a805      	add	r0, sp, #20
 801c914:	f004 ff2a 	bl	802176c <_ZNK8touchgfx6Bitmap9getHeightEv>
 801c918:	f9b8 2000 	ldrsh.w	r2, [r8]
 801c91c:	f8b8 7004 	ldrh.w	r7, [r8, #4]
 801c920:	2300      	movs	r3, #0
 801c922:	fa0f fc80 	sxth.w	ip, r0
 801c926:	4417      	add	r7, r2
 801c928:	9306      	str	r3, [sp, #24]
 801c92a:	b2bf      	uxth	r7, r7
 801c92c:	fa0f fe87 	sxth.w	lr, r7
 801c930:	459e      	cmp	lr, r3
 801c932:	dd2d      	ble.n	801c990 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xa0>
 801c934:	4296      	cmp	r6, r2
 801c936:	dd2b      	ble.n	801c990 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xa0>
 801c938:	f9b8 3002 	ldrsh.w	r3, [r8, #2]
 801c93c:	f8b8 1006 	ldrh.w	r1, [r8, #6]
 801c940:	4419      	add	r1, r3
 801c942:	b289      	uxth	r1, r1
 801c944:	fa0f f881 	sxth.w	r8, r1
 801c948:	f1b8 0f00 	cmp.w	r8, #0
 801c94c:	dd20      	ble.n	801c990 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xa0>
 801c94e:	459c      	cmp	ip, r3
 801c950:	dd1e      	ble.n	801c990 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xa0>
 801c952:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 801c956:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801c95a:	4576      	cmp	r6, lr
 801c95c:	bfa8      	it	ge
 801c95e:	463d      	movge	r5, r7
 801c960:	45c4      	cmp	ip, r8
 801c962:	bfa8      	it	ge
 801c964:	4608      	movge	r0, r1
 801c966:	f8ad 2018 	strh.w	r2, [sp, #24]
 801c96a:	1aad      	subs	r5, r5, r2
 801c96c:	1ac0      	subs	r0, r0, r3
 801c96e:	f8ad 301a 	strh.w	r3, [sp, #26]
 801c972:	f8ad 501c 	strh.w	r5, [sp, #28]
 801c976:	f8ad 001e 	strh.w	r0, [sp, #30]
 801c97a:	4b1f      	ldr	r3, [pc, #124]	; (801c9f8 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x108>)
 801c97c:	681b      	ldr	r3, [r3, #0]
 801c97e:	b953      	cbnz	r3, 801c996 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xa6>
 801c980:	4b1e      	ldr	r3, [pc, #120]	; (801c9fc <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x10c>)
 801c982:	2187      	movs	r1, #135	; 0x87
 801c984:	4a1e      	ldr	r2, [pc, #120]	; (801ca00 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x110>)
 801c986:	481f      	ldr	r0, [pc, #124]	; (801ca04 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x114>)
 801c988:	f00e ff76 	bl	802b878 <__assert_func>
 801c98c:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 801c98e:	e7b9      	b.n	801c904 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x14>
 801c990:	2300      	movs	r3, #0
 801c992:	9307      	str	r3, [sp, #28]
 801c994:	e7f1      	b.n	801c97a <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x8a>
 801c996:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 801c99a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801c99e:	429a      	cmp	r2, r3
 801c9a0:	d026      	beq.n	801c9f0 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x100>
 801c9a2:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801c9a6:	2b00      	cmp	r3, #0
 801c9a8:	dd22      	ble.n	801c9f0 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x100>
 801c9aa:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 801c9ae:	2b00      	cmp	r3, #0
 801c9b0:	dd1e      	ble.n	801c9f0 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x100>
 801c9b2:	2300      	movs	r3, #0
 801c9b4:	a908      	add	r1, sp, #32
 801c9b6:	4620      	mov	r0, r4
 801c9b8:	e9cd 3308 	strd	r3, r3, [sp, #32]
 801c9bc:	6823      	ldr	r3, [r4, #0]
 801c9be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c9c0:	4798      	blx	r3
 801c9c2:	4b11      	ldr	r3, [pc, #68]	; (801ca08 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x118>)
 801c9c4:	681b      	ldr	r3, [r3, #0]
 801c9c6:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 801c9ca:	b10a      	cbz	r2, 801c9d0 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe0>
 801c9cc:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 801c9ce:	b900      	cbnz	r0, 801c9d2 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe2>
 801c9d0:	6898      	ldr	r0, [r3, #8]
 801c9d2:	2501      	movs	r5, #1
 801c9d4:	6801      	ldr	r1, [r0, #0]
 801c9d6:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 801c9da:	9502      	str	r5, [sp, #8]
 801c9dc:	f894 4032 	ldrb.w	r4, [r4, #50]	; 0x32
 801c9e0:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801c9e4:	9401      	str	r4, [sp, #4]
 801c9e6:	ac06      	add	r4, sp, #24
 801c9e8:	9400      	str	r4, [sp, #0]
 801c9ea:	688c      	ldr	r4, [r1, #8]
 801c9ec:	a905      	add	r1, sp, #20
 801c9ee:	47a0      	blx	r4
 801c9f0:	b00a      	add	sp, #40	; 0x28
 801c9f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c9f6:	bf00      	nop
 801c9f8:	2400c964 	.word	0x2400c964
 801c9fc:	0802ff0d 	.word	0x0802ff0d
 801ca00:	0802ffe0 	.word	0x0802ffe0
 801ca04:	0802ff49 	.word	0x0802ff49
 801ca08:	2400c8bc 	.word	0x2400c8bc

0801ca0c <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv>:
 801ca0c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801ca0e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801ca12:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 801ca14:	4606      	mov	r6, r0
 801ca16:	4299      	cmp	r1, r3
 801ca18:	d02a      	beq.n	801ca70 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x64>
 801ca1a:	4b16      	ldr	r3, [pc, #88]	; (801ca74 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x68>)
 801ca1c:	681b      	ldr	r3, [r3, #0]
 801ca1e:	b92b      	cbnz	r3, 801ca2c <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x20>
 801ca20:	4b15      	ldr	r3, [pc, #84]	; (801ca78 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x6c>)
 801ca22:	21ae      	movs	r1, #174	; 0xae
 801ca24:	4a15      	ldr	r2, [pc, #84]	; (801ca7c <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x70>)
 801ca26:	4816      	ldr	r0, [pc, #88]	; (801ca80 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x74>)
 801ca28:	f00e ff26 	bl	802b878 <__assert_func>
 801ca2c:	4a15      	ldr	r2, [pc, #84]	; (801ca84 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x78>)
 801ca2e:	8812      	ldrh	r2, [r2, #0]
 801ca30:	428a      	cmp	r2, r1
 801ca32:	d803      	bhi.n	801ca3c <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x30>
 801ca34:	4b14      	ldr	r3, [pc, #80]	; (801ca88 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x7c>)
 801ca36:	21af      	movs	r1, #175	; 0xaf
 801ca38:	4a10      	ldr	r2, [pc, #64]	; (801ca7c <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x70>)
 801ca3a:	e7f4      	b.n	801ca26 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x1a>
 801ca3c:	eb03 0241 	add.w	r2, r3, r1, lsl #1
 801ca40:	f813 0011 	ldrb.w	r0, [r3, r1, lsl #1]
 801ca44:	4b11      	ldr	r3, [pc, #68]	; (801ca8c <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x80>)
 801ca46:	7854      	ldrb	r4, [r2, #1]
 801ca48:	681b      	ldr	r3, [r3, #0]
 801ca4a:	f3c4 0481 	ubfx	r4, r4, #2, #2
 801ca4e:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
 801ca52:	682b      	ldr	r3, [r5, #0]
 801ca54:	69df      	ldr	r7, [r3, #28]
 801ca56:	4b0e      	ldr	r3, [pc, #56]	; (801ca90 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x84>)
 801ca58:	6818      	ldr	r0, [r3, #0]
 801ca5a:	f7eb fcc1 	bl	80083e0 <_ZNK8touchgfx5Texts7getTextEt>
 801ca5e:	2300      	movs	r3, #0
 801ca60:	4602      	mov	r2, r0
 801ca62:	4621      	mov	r1, r4
 801ca64:	9300      	str	r3, [sp, #0]
 801ca66:	4628      	mov	r0, r5
 801ca68:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
 801ca6a:	47b8      	blx	r7
 801ca6c:	b003      	add	sp, #12
 801ca6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ca70:	2000      	movs	r0, #0
 801ca72:	e7fb      	b.n	801ca6c <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x60>
 801ca74:	2400c92c 	.word	0x2400c92c
 801ca78:	0802fb60 	.word	0x0802fb60
 801ca7c:	0803008c 	.word	0x0803008c
 801ca80:	0802fba2 	.word	0x0802fba2
 801ca84:	2400c930 	.word	0x2400c930
 801ca88:	0802fbcb 	.word	0x0802fbcb
 801ca8c:	2400c934 	.word	0x2400c934
 801ca90:	2400c938 	.word	0x2400c938

0801ca94 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv>:
 801ca94:	b570      	push	{r4, r5, r6, lr}
 801ca96:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801ca9a:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 801ca9c:	4604      	mov	r4, r0
 801ca9e:	4299      	cmp	r1, r3
 801caa0:	d01e      	beq.n	801cae0 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x4c>
 801caa2:	6803      	ldr	r3, [r0, #0]
 801caa4:	6edd      	ldr	r5, [r3, #108]	; 0x6c
 801caa6:	4b0f      	ldr	r3, [pc, #60]	; (801cae4 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x50>)
 801caa8:	681b      	ldr	r3, [r3, #0]
 801caaa:	b92b      	cbnz	r3, 801cab8 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x24>
 801caac:	4b0e      	ldr	r3, [pc, #56]	; (801cae8 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x54>)
 801caae:	21ae      	movs	r1, #174	; 0xae
 801cab0:	4a0e      	ldr	r2, [pc, #56]	; (801caec <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x58>)
 801cab2:	480f      	ldr	r0, [pc, #60]	; (801caf0 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x5c>)
 801cab4:	f00e fee0 	bl	802b878 <__assert_func>
 801cab8:	4b0e      	ldr	r3, [pc, #56]	; (801caf4 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x60>)
 801caba:	881b      	ldrh	r3, [r3, #0]
 801cabc:	428b      	cmp	r3, r1
 801cabe:	d803      	bhi.n	801cac8 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x34>
 801cac0:	4b0d      	ldr	r3, [pc, #52]	; (801caf8 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x64>)
 801cac2:	21af      	movs	r1, #175	; 0xaf
 801cac4:	4a09      	ldr	r2, [pc, #36]	; (801caec <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x58>)
 801cac6:	e7f4      	b.n	801cab2 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x1e>
 801cac8:	4b0c      	ldr	r3, [pc, #48]	; (801cafc <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x68>)
 801caca:	6818      	ldr	r0, [r3, #0]
 801cacc:	f7eb fc88 	bl	80083e0 <_ZNK8touchgfx5Texts7getTextEt>
 801cad0:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 801cad2:	4601      	mov	r1, r0
 801cad4:	46ac      	mov	ip, r5
 801cad6:	4620      	mov	r0, r4
 801cad8:	2300      	movs	r3, #0
 801cada:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801cade:	4760      	bx	ip
 801cae0:	2000      	movs	r0, #0
 801cae2:	bd70      	pop	{r4, r5, r6, pc}
 801cae4:	2400c92c 	.word	0x2400c92c
 801cae8:	0802fb60 	.word	0x0802fb60
 801caec:	0803008c 	.word	0x0803008c
 801caf0:	0802fba2 	.word	0x0802fba2
 801caf4:	2400c930 	.word	0x2400c930
 801caf8:	0802fbcb 	.word	0x0802fbcb
 801cafc:	2400c938 	.word	0x2400c938

0801cb00 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE>:
 801cb00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801cb04:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801cb08:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
 801cb0a:	b08c      	sub	sp, #48	; 0x30
 801cb0c:	4604      	mov	r4, r0
 801cb0e:	4293      	cmp	r3, r2
 801cb10:	460e      	mov	r6, r1
 801cb12:	d05d      	beq.n	801cbd0 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xd0>
 801cb14:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 801cbf4 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xf4>
 801cb18:	f8d8 2000 	ldr.w	r2, [r8]
 801cb1c:	b92a      	cbnz	r2, 801cb2a <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x2a>
 801cb1e:	4b2e      	ldr	r3, [pc, #184]	; (801cbd8 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xd8>)
 801cb20:	21ae      	movs	r1, #174	; 0xae
 801cb22:	4a2e      	ldr	r2, [pc, #184]	; (801cbdc <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xdc>)
 801cb24:	482e      	ldr	r0, [pc, #184]	; (801cbe0 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xe0>)
 801cb26:	f00e fea7 	bl	802b878 <__assert_func>
 801cb2a:	4f2e      	ldr	r7, [pc, #184]	; (801cbe4 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xe4>)
 801cb2c:	8839      	ldrh	r1, [r7, #0]
 801cb2e:	4299      	cmp	r1, r3
 801cb30:	d803      	bhi.n	801cb3a <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x3a>
 801cb32:	4b2d      	ldr	r3, [pc, #180]	; (801cbe8 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xe8>)
 801cb34:	21af      	movs	r1, #175	; 0xaf
 801cb36:	4a29      	ldr	r2, [pc, #164]	; (801cbdc <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xdc>)
 801cb38:	e7f4      	b.n	801cb24 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x24>
 801cb3a:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 801cb3e:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 801cb42:	4b2a      	ldr	r3, [pc, #168]	; (801cbec <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xec>)
 801cb44:	681b      	ldr	r3, [r3, #0]
 801cb46:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801cb4a:	2a00      	cmp	r2, #0
 801cb4c:	d040      	beq.n	801cbd0 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xd0>
 801cb4e:	784b      	ldrb	r3, [r1, #1]
 801cb50:	f890 5037 	ldrb.w	r5, [r0, #55]	; 0x37
 801cb54:	f890 1039 	ldrb.w	r1, [r0, #57]	; 0x39
 801cb58:	f3c3 0a01 	ubfx	sl, r3, #0, #2
 801cb5c:	f890 c036 	ldrb.w	ip, [r0, #54]	; 0x36
 801cb60:	f3c3 0381 	ubfx	r3, r3, #2, #2
 801cb64:	f9b0 e034 	ldrsh.w	lr, [r0, #52]	; 0x34
 801cb68:	f890 9038 	ldrb.w	r9, [r0, #56]	; 0x38
 801cb6c:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 801cb70:	ad05      	add	r5, sp, #20
 801cb72:	6b00      	ldr	r0, [r0, #48]	; 0x30
 801cb74:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
 801cb78:	9207      	str	r2, [sp, #28]
 801cb7a:	f88d 9022 	strb.w	r9, [sp, #34]	; 0x22
 801cb7e:	f8ad e028 	strh.w	lr, [sp, #40]	; 0x28
 801cb82:	f88d c02a 	strb.w	ip, [sp, #42]	; 0x2a
 801cb86:	f88d 102c 	strb.w	r1, [sp, #44]	; 0x2c
 801cb8a:	f88d a020 	strb.w	sl, [sp, #32]
 801cb8e:	9009      	str	r0, [sp, #36]	; 0x24
 801cb90:	f7e7 fc70 	bl	8004474 <_ZN8touchgfx3HAL3lcdEv>
 801cb94:	4621      	mov	r1, r4
 801cb96:	4681      	mov	r9, r0
 801cb98:	4628      	mov	r0, r5
 801cb9a:	f002 fef5 	bl	801f988 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801cb9e:	f8d8 3000 	ldr.w	r3, [r8]
 801cba2:	2b00      	cmp	r3, #0
 801cba4:	d0bb      	beq.n	801cb1e <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x1e>
 801cba6:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 801cba8:	883b      	ldrh	r3, [r7, #0]
 801cbaa:	428b      	cmp	r3, r1
 801cbac:	d9c1      	bls.n	801cb32 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x32>
 801cbae:	4b10      	ldr	r3, [pc, #64]	; (801cbf0 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xf0>)
 801cbb0:	6818      	ldr	r0, [r3, #0]
 801cbb2:	f7eb fc15 	bl	80083e0 <_ZNK8touchgfx5Texts7getTextEt>
 801cbb6:	2300      	movs	r3, #0
 801cbb8:	9303      	str	r3, [sp, #12]
 801cbba:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801cbbc:	e9cd 0301 	strd	r0, r3, [sp, #4]
 801cbc0:	ab07      	add	r3, sp, #28
 801cbc2:	4648      	mov	r0, r9
 801cbc4:	9300      	str	r3, [sp, #0]
 801cbc6:	4633      	mov	r3, r6
 801cbc8:	e895 0006 	ldmia.w	r5, {r1, r2}
 801cbcc:	f7eb fb99 	bl	8008302 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 801cbd0:	b00c      	add	sp, #48	; 0x30
 801cbd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801cbd6:	bf00      	nop
 801cbd8:	0802fb60 	.word	0x0802fb60
 801cbdc:	0803008c 	.word	0x0803008c
 801cbe0:	0802fba2 	.word	0x0802fba2
 801cbe4:	2400c930 	.word	0x2400c930
 801cbe8:	0802fbcb 	.word	0x0802fbcb
 801cbec:	2400c934 	.word	0x2400c934
 801cbf0:	2400c938 	.word	0x2400c938
 801cbf4:	2400c92c 	.word	0x2400c92c

0801cbf8 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>:
 801cbf8:	b570      	push	{r4, r5, r6, lr}
 801cbfa:	880b      	ldrh	r3, [r1, #0]
 801cbfc:	460d      	mov	r5, r1
 801cbfe:	4604      	mov	r4, r0
 801cc00:	84c3      	strh	r3, [r0, #38]	; 0x26
 801cc02:	4608      	mov	r0, r1
 801cc04:	f004 fd78 	bl	80216f8 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801cc08:	4606      	mov	r6, r0
 801cc0a:	4628      	mov	r0, r5
 801cc0c:	f004 fdae 	bl	802176c <_ZNK8touchgfx6Bitmap9getHeightEv>
 801cc10:	6823      	ldr	r3, [r4, #0]
 801cc12:	4605      	mov	r5, r0
 801cc14:	b231      	sxth	r1, r6
 801cc16:	4620      	mov	r0, r4
 801cc18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801cc1a:	4798      	blx	r3
 801cc1c:	6823      	ldr	r3, [r4, #0]
 801cc1e:	b229      	sxth	r1, r5
 801cc20:	4620      	mov	r0, r4
 801cc22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801cc24:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801cc28:	4718      	bx	r3

0801cc2a <_ZNK8touchgfx5Image12getSolidRectEv>:
 801cc2a:	b510      	push	{r4, lr}
 801cc2c:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 801cc30:	4604      	mov	r4, r0
 801cc32:	2bff      	cmp	r3, #255	; 0xff
 801cc34:	d006      	beq.n	801cc44 <_ZNK8touchgfx5Image12getSolidRectEv+0x1a>
 801cc36:	2300      	movs	r3, #0
 801cc38:	8003      	strh	r3, [r0, #0]
 801cc3a:	8043      	strh	r3, [r0, #2]
 801cc3c:	8083      	strh	r3, [r0, #4]
 801cc3e:	80c3      	strh	r3, [r0, #6]
 801cc40:	4620      	mov	r0, r4
 801cc42:	bd10      	pop	{r4, pc}
 801cc44:	3126      	adds	r1, #38	; 0x26
 801cc46:	f004 fdcb 	bl	80217e0 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 801cc4a:	e7f9      	b.n	801cc40 <_ZNK8touchgfx5Image12getSolidRectEv+0x16>

0801cc4c <_ZNK8touchgfx5Image4drawERKNS_4RectE>:
 801cc4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801cc50:	4604      	mov	r4, r0
 801cc52:	b088      	sub	sp, #32
 801cc54:	2500      	movs	r5, #0
 801cc56:	460f      	mov	r7, r1
 801cc58:	f854 3b26 	ldr.w	r3, [r4], #38
 801cc5c:	a904      	add	r1, sp, #16
 801cc5e:	4606      	mov	r6, r0
 801cc60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801cc62:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801cc66:	4798      	blx	r3
 801cc68:	4620      	mov	r0, r4
 801cc6a:	f004 fd45 	bl	80216f8 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801cc6e:	4680      	mov	r8, r0
 801cc70:	4620      	mov	r0, r4
 801cc72:	f004 fd7b 	bl	802176c <_ZNK8touchgfx6Bitmap9getHeightEv>
 801cc76:	9506      	str	r5, [sp, #24]
 801cc78:	ad06      	add	r5, sp, #24
 801cc7a:	f8ad 001e 	strh.w	r0, [sp, #30]
 801cc7e:	4639      	mov	r1, r7
 801cc80:	f8ad 801c 	strh.w	r8, [sp, #28]
 801cc84:	4628      	mov	r0, r5
 801cc86:	f7fb fb05 	bl	8018294 <_ZN8touchgfx4RectaNERKS0_>
 801cc8a:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801cc8e:	2b00      	cmp	r3, #0
 801cc90:	dd19      	ble.n	801ccc6 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 801cc92:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 801cc96:	2b00      	cmp	r3, #0
 801cc98:	dd15      	ble.n	801ccc6 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 801cc9a:	4b0c      	ldr	r3, [pc, #48]	; (801cccc <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x80>)
 801cc9c:	681b      	ldr	r3, [r3, #0]
 801cc9e:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 801cca2:	b10a      	cbz	r2, 801cca8 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5c>
 801cca4:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 801cca6:	b900      	cbnz	r0, 801ccaa <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5e>
 801cca8:	6898      	ldr	r0, [r3, #8]
 801ccaa:	2701      	movs	r7, #1
 801ccac:	6801      	ldr	r1, [r0, #0]
 801ccae:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801ccb2:	9702      	str	r7, [sp, #8]
 801ccb4:	f896 6028 	ldrb.w	r6, [r6, #40]	; 0x28
 801ccb8:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 801ccbc:	e9cd 5600 	strd	r5, r6, [sp]
 801ccc0:	688d      	ldr	r5, [r1, #8]
 801ccc2:	4621      	mov	r1, r4
 801ccc4:	47a8      	blx	r5
 801ccc6:	b008      	add	sp, #32
 801ccc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801cccc:	2400c8bc 	.word	0x2400c8bc

0801ccd0 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE>:
 801ccd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ccd4:	4604      	mov	r4, r0
 801ccd6:	b08c      	sub	sp, #48	; 0x30
 801ccd8:	4688      	mov	r8, r1
 801ccda:	f7ff fe09 	bl	801c8f0 <_ZNK8touchgfx6Button4drawERKNS_4RectE>
 801ccde:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 801cce0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801cce4:	4293      	cmp	r3, r2
 801cce6:	f000 809a 	beq.w	801ce1e <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x14e>
 801ccea:	4e55      	ldr	r6, [pc, #340]	; (801ce40 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x170>)
 801ccec:	6832      	ldr	r2, [r6, #0]
 801ccee:	b92a      	cbnz	r2, 801ccfc <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x2c>
 801ccf0:	4b54      	ldr	r3, [pc, #336]	; (801ce44 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x174>)
 801ccf2:	21ae      	movs	r1, #174	; 0xae
 801ccf4:	4a54      	ldr	r2, [pc, #336]	; (801ce48 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x178>)
 801ccf6:	4855      	ldr	r0, [pc, #340]	; (801ce4c <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x17c>)
 801ccf8:	f00e fdbe 	bl	802b878 <__assert_func>
 801ccfc:	4d54      	ldr	r5, [pc, #336]	; (801ce50 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x180>)
 801ccfe:	8829      	ldrh	r1, [r5, #0]
 801cd00:	4299      	cmp	r1, r3
 801cd02:	d803      	bhi.n	801cd0c <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x3c>
 801cd04:	4b53      	ldr	r3, [pc, #332]	; (801ce54 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x184>)
 801cd06:	21af      	movs	r1, #175	; 0xaf
 801cd08:	4a4f      	ldr	r2, [pc, #316]	; (801ce48 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x178>)
 801cd0a:	e7f4      	b.n	801ccf6 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x26>
 801cd0c:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 801cd10:	f04f 0c02 	mov.w	ip, #2
 801cd14:	4b50      	ldr	r3, [pc, #320]	; (801ce58 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x188>)
 801cd16:	f894 e044 	ldrb.w	lr, [r4, #68]	; 0x44
 801cd1a:	681b      	ldr	r3, [r3, #0]
 801cd1c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801cd20:	f1be 0f01 	cmp.w	lr, #1
 801cd24:	f853 7022 	ldr.w	r7, [r3, r2, lsl #2]
 801cd28:	f04f 0300 	mov.w	r3, #0
 801cd2c:	b208      	sxth	r0, r1
 801cd2e:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
 801cd32:	9303      	str	r3, [sp, #12]
 801cd34:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 801cd38:	d074      	beq.n	801ce24 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x154>
 801cd3a:	f1be 0f03 	cmp.w	lr, #3
 801cd3e:	d071      	beq.n	801ce24 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x154>
 801cd40:	1a52      	subs	r2, r2, r1
 801cd42:	f8ad 3010 	strh.w	r3, [sp, #16]
 801cd46:	f8ad 0012 	strh.w	r0, [sp, #18]
 801cd4a:	fb92 f2fc 	sdiv	r2, r2, ip
 801cd4e:	f8ad 200e 	strh.w	r2, [sp, #14]
 801cd52:	f10d 090c 	add.w	r9, sp, #12
 801cd56:	f10d 0a14 	add.w	sl, sp, #20
 801cd5a:	e899 0003 	ldmia.w	r9, {r0, r1}
 801cd5e:	e88a 0003 	stmia.w	sl, {r0, r1}
 801cd62:	4641      	mov	r1, r8
 801cd64:	4650      	mov	r0, sl
 801cd66:	f7fb fa95 	bl	8018294 <_ZN8touchgfx4RectaNERKS0_>
 801cd6a:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 801cd6e:	2b00      	cmp	r3, #0
 801cd70:	dd55      	ble.n	801ce1e <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x14e>
 801cd72:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 801cd76:	2b00      	cmp	r3, #0
 801cd78:	dd51      	ble.n	801ce1e <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x14e>
 801cd7a:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 801cd7e:	4649      	mov	r1, r9
 801cd80:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 801cd84:	4620      	mov	r0, r4
 801cd86:	1a9b      	subs	r3, r3, r2
 801cd88:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 801cd8c:	f8ad 3014 	strh.w	r3, [sp, #20]
 801cd90:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 801cd94:	1a9b      	subs	r3, r3, r2
 801cd96:	f8ad 3016 	strh.w	r3, [sp, #22]
 801cd9a:	6823      	ldr	r3, [r4, #0]
 801cd9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801cd9e:	4798      	blx	r3
 801cda0:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 801cda4:	2b00      	cmp	r3, #0
 801cda6:	d047      	beq.n	801ce38 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x168>
 801cda8:	f104 0240 	add.w	r2, r4, #64	; 0x40
 801cdac:	6833      	ldr	r3, [r6, #0]
 801cdae:	f894 0032 	ldrb.w	r0, [r4, #50]	; 0x32
 801cdb2:	2b00      	cmp	r3, #0
 801cdb4:	d09c      	beq.n	801ccf0 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x20>
 801cdb6:	8f21      	ldrh	r1, [r4, #56]	; 0x38
 801cdb8:	882d      	ldrh	r5, [r5, #0]
 801cdba:	428d      	cmp	r5, r1
 801cdbc:	d9a2      	bls.n	801cd04 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x34>
 801cdbe:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 801cdc2:	6812      	ldr	r2, [r2, #0]
 801cdc4:	f894 4044 	ldrb.w	r4, [r4, #68]	; 0x44
 801cdc8:	785b      	ldrb	r3, [r3, #1]
 801cdca:	9209      	str	r2, [sp, #36]	; 0x24
 801cdcc:	f3c3 0501 	ubfx	r5, r3, #0, #2
 801cdd0:	f3c3 0381 	ubfx	r3, r3, #2, #2
 801cdd4:	9707      	str	r7, [sp, #28]
 801cdd6:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
 801cdda:	2300      	movs	r3, #0
 801cddc:	f88d 5020 	strb.w	r5, [sp, #32]
 801cde0:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
 801cde4:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 801cde8:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 801cdec:	4b1b      	ldr	r3, [pc, #108]	; (801ce5c <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x18c>)
 801cdee:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 801cdf2:	681b      	ldr	r3, [r3, #0]
 801cdf4:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
 801cdf8:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 801cdfc:	b10a      	cbz	r2, 801ce02 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x132>
 801cdfe:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 801ce00:	b904      	cbnz	r4, 801ce04 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x134>
 801ce02:	689c      	ldr	r4, [r3, #8]
 801ce04:	4b16      	ldr	r3, [pc, #88]	; (801ce60 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x190>)
 801ce06:	6818      	ldr	r0, [r3, #0]
 801ce08:	f7eb faea 	bl	80083e0 <_ZNK8touchgfx5Texts7getTextEt>
 801ce0c:	ab07      	add	r3, sp, #28
 801ce0e:	9001      	str	r0, [sp, #4]
 801ce10:	4620      	mov	r0, r4
 801ce12:	9300      	str	r3, [sp, #0]
 801ce14:	4653      	mov	r3, sl
 801ce16:	e899 0006 	ldmia.w	r9, {r1, r2}
 801ce1a:	f7eb fa72 	bl	8008302 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 801ce1e:	b00c      	add	sp, #48	; 0x30
 801ce20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ce24:	1a5b      	subs	r3, r3, r1
 801ce26:	f8ad 0010 	strh.w	r0, [sp, #16]
 801ce2a:	f8ad 2012 	strh.w	r2, [sp, #18]
 801ce2e:	fb93 f3fc 	sdiv	r3, r3, ip
 801ce32:	f8ad 300c 	strh.w	r3, [sp, #12]
 801ce36:	e78c      	b.n	801cd52 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x82>
 801ce38:	f104 023c 	add.w	r2, r4, #60	; 0x3c
 801ce3c:	e7b6      	b.n	801cdac <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0xdc>
 801ce3e:	bf00      	nop
 801ce40:	2400c92c 	.word	0x2400c92c
 801ce44:	0802fb60 	.word	0x0802fb60
 801ce48:	08030194 	.word	0x08030194
 801ce4c:	0802fba2 	.word	0x0802fba2
 801ce50:	2400c930 	.word	0x2400c930
 801ce54:	0802fbcb 	.word	0x0802fbcb
 801ce58:	2400c934 	.word	0x2400c934
 801ce5c:	2400c8bc 	.word	0x2400c8bc
 801ce60:	2400c938 	.word	0x2400c938

0801ce64 <_ZN8touchgfx15ButtonWithLabelC1Ev>:
 801ce64:	2101      	movs	r1, #1
 801ce66:	2200      	movs	r2, #0
 801ce68:	b510      	push	{r4, lr}
 801ce6a:	4c13      	ldr	r4, [pc, #76]	; (801ceb8 <_ZN8touchgfx15ButtonWithLabelC1Ev+0x54>)
 801ce6c:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
 801ce70:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
 801ce74:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801ce78:	6004      	str	r4, [r0, #0]
 801ce7a:	4c10      	ldr	r4, [pc, #64]	; (801cebc <_ZN8touchgfx15ButtonWithLabelC1Ev+0x58>)
 801ce7c:	8082      	strh	r2, [r0, #4]
 801ce7e:	80c2      	strh	r2, [r0, #6]
 801ce80:	8102      	strh	r2, [r0, #8]
 801ce82:	8142      	strh	r2, [r0, #10]
 801ce84:	8182      	strh	r2, [r0, #12]
 801ce86:	81c2      	strh	r2, [r0, #14]
 801ce88:	8202      	strh	r2, [r0, #16]
 801ce8a:	8242      	strh	r2, [r0, #18]
 801ce8c:	61c2      	str	r2, [r0, #28]
 801ce8e:	8402      	strh	r2, [r0, #32]
 801ce90:	8442      	strh	r2, [r0, #34]	; 0x22
 801ce92:	6282      	str	r2, [r0, #40]	; 0x28
 801ce94:	f880 202c 	strb.w	r2, [r0, #44]	; 0x2c
 801ce98:	85c1      	strh	r1, [r0, #46]	; 0x2e
 801ce9a:	8601      	strh	r1, [r0, #48]	; 0x30
 801ce9c:	f880 1032 	strb.w	r1, [r0, #50]	; 0x32
 801cea0:	6344      	str	r4, [r0, #52]	; 0x34
 801cea2:	8701      	strh	r1, [r0, #56]	; 0x38
 801cea4:	f880 2044 	strb.w	r2, [r0, #68]	; 0x44
 801cea8:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
 801ceac:	e9c0 2205 	strd	r2, r2, [r0, #20]
 801ceb0:	e9c0 220f 	strd	r2, r2, [r0, #60]	; 0x3c
 801ceb4:	bd10      	pop	{r4, pc}
 801ceb6:	bf00      	nop
 801ceb8:	0803012c 	.word	0x0803012c
 801cebc:	0802dd78 	.word	0x0802dd78

0801cec0 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj>:
 801cec0:	4b02      	ldr	r3, [pc, #8]	; (801cecc <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj+0xc>)
 801cec2:	6018      	str	r0, [r3, #0]
 801cec4:	4b02      	ldr	r3, [pc, #8]	; (801ced0 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj+0x10>)
 801cec6:	6019      	str	r1, [r3, #0]
 801cec8:	4770      	bx	lr
 801ceca:	bf00      	nop
 801cecc:	2400c8c4 	.word	0x2400c8c4
 801ced0:	2400c8d8 	.word	0x2400c8d8

0801ced4 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj>:
 801ced4:	b538      	push	{r3, r4, r5, lr}
 801ced6:	4c2b      	ldr	r4, [pc, #172]	; (801cf84 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xb0>)
 801ced8:	4b2b      	ldr	r3, [pc, #172]	; (801cf88 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xb4>)
 801ceda:	6821      	ldr	r1, [r4, #0]
 801cedc:	681a      	ldr	r2, [r3, #0]
 801cede:	4281      	cmp	r1, r0
 801cee0:	4d2a      	ldr	r5, [pc, #168]	; (801cf8c <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xb8>)
 801cee2:	492b      	ldr	r1, [pc, #172]	; (801cf90 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xbc>)
 801cee4:	d108      	bne.n	801cef8 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x24>
 801cee6:	682b      	ldr	r3, [r5, #0]
 801cee8:	4293      	cmp	r3, r2
 801ceea:	d105      	bne.n	801cef8 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x24>
 801ceec:	6808      	ldr	r0, [r1, #0]
 801ceee:	280f      	cmp	r0, #15
 801cef0:	bf94      	ite	ls
 801cef2:	2000      	movls	r0, #0
 801cef4:	2001      	movhi	r0, #1
 801cef6:	bd38      	pop	{r3, r4, r5, pc}
 801cef8:	4b26      	ldr	r3, [pc, #152]	; (801cf94 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc0>)
 801cefa:	6020      	str	r0, [r4, #0]
 801cefc:	681b      	ldr	r3, [r3, #0]
 801cefe:	602a      	str	r2, [r5, #0]
 801cf00:	4298      	cmp	r0, r3
 801cf02:	d905      	bls.n	801cf10 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x3c>
 801cf04:	4b24      	ldr	r3, [pc, #144]	; (801cf98 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc4>)
 801cf06:	2137      	movs	r1, #55	; 0x37
 801cf08:	4a24      	ldr	r2, [pc, #144]	; (801cf9c <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc8>)
 801cf0a:	4825      	ldr	r0, [pc, #148]	; (801cfa0 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xcc>)
 801cf0c:	f00e fcb4 	bl	802b878 <__assert_func>
 801cf10:	f010 0403 	ands.w	r4, r0, #3
 801cf14:	bf1f      	itttt	ne
 801cf16:	f1c4 0504 	rsbne	r5, r4, #4
 801cf1a:	3b04      	subne	r3, #4
 801cf1c:	1952      	addne	r2, r2, r5
 801cf1e:	191b      	addne	r3, r3, r4
 801cf20:	4d20      	ldr	r5, [pc, #128]	; (801cfa4 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xd0>)
 801cf22:	4402      	add	r2, r0
 801cf24:	1a1b      	subs	r3, r3, r0
 801cf26:	3001      	adds	r0, #1
 801cf28:	602a      	str	r2, [r5, #0]
 801cf2a:	f020 0401 	bic.w	r4, r0, #1
 801cf2e:	42a3      	cmp	r3, r4
 801cf30:	d203      	bcs.n	801cf3a <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x66>
 801cf32:	4b19      	ldr	r3, [pc, #100]	; (801cf98 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc4>)
 801cf34:	214a      	movs	r1, #74	; 0x4a
 801cf36:	4a19      	ldr	r2, [pc, #100]	; (801cf9c <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc8>)
 801cf38:	e7e7      	b.n	801cf0a <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x36>
 801cf3a:	f010 0002 	ands.w	r0, r0, #2
 801cf3e:	bf1f      	itttt	ne
 801cf40:	f1c0 0504 	rsbne	r5, r0, #4
 801cf44:	1952      	addne	r2, r2, r5
 801cf46:	1f05      	subne	r5, r0, #4
 801cf48:	195b      	addne	r3, r3, r5
 801cf4a:	4422      	add	r2, r4
 801cf4c:	4d16      	ldr	r5, [pc, #88]	; (801cfa8 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xd4>)
 801cf4e:	1b1b      	subs	r3, r3, r4
 801cf50:	602a      	str	r2, [r5, #0]
 801cf52:	429c      	cmp	r4, r3
 801cf54:	d903      	bls.n	801cf5e <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x8a>
 801cf56:	4b10      	ldr	r3, [pc, #64]	; (801cf98 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc4>)
 801cf58:	215d      	movs	r1, #93	; 0x5d
 801cf5a:	4a10      	ldr	r2, [pc, #64]	; (801cf9c <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc8>)
 801cf5c:	e7d5      	b.n	801cf0a <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x36>
 801cf5e:	b120      	cbz	r0, 801cf6a <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x96>
 801cf60:	f1c0 0504 	rsb	r5, r0, #4
 801cf64:	3804      	subs	r0, #4
 801cf66:	442a      	add	r2, r5
 801cf68:	4403      	add	r3, r0
 801cf6a:	1b1b      	subs	r3, r3, r4
 801cf6c:	4422      	add	r2, r4
 801cf6e:	480f      	ldr	r0, [pc, #60]	; (801cfac <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xd8>)
 801cf70:	2b0f      	cmp	r3, #15
 801cf72:	600b      	str	r3, [r1, #0]
 801cf74:	6002      	str	r2, [r0, #0]
 801cf76:	d803      	bhi.n	801cf80 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xac>
 801cf78:	4b0d      	ldr	r3, [pc, #52]	; (801cfb0 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xdc>)
 801cf7a:	2170      	movs	r1, #112	; 0x70
 801cf7c:	4a07      	ldr	r2, [pc, #28]	; (801cf9c <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc8>)
 801cf7e:	e7c4      	b.n	801cf0a <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x36>
 801cf80:	2001      	movs	r0, #1
 801cf82:	e7b8      	b.n	801cef6 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x22>
 801cf84:	2400c8cc 	.word	0x2400c8cc
 801cf88:	2400c8c4 	.word	0x2400c8c4
 801cf8c:	2400c8d4 	.word	0x2400c8d4
 801cf90:	2400c8dc 	.word	0x2400c8dc
 801cf94:	2400c8d8 	.word	0x2400c8d8
 801cf98:	080301c2 	.word	0x080301c2
 801cf9c:	0803028a 	.word	0x0803028a
 801cfa0:	080301fb 	.word	0x080301fb
 801cfa4:	2400c8e0 	.word	0x2400c8e0
 801cfa8:	2400c8d0 	.word	0x2400c8d0
 801cfac:	2400c8c8 	.word	0x2400c8c8
 801cfb0:	08030245 	.word	0x08030245

0801cfb4 <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv>:
 801cfb4:	4b04      	ldr	r3, [pc, #16]	; (801cfc8 <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv+0x14>)
 801cfb6:	6818      	ldr	r0, [r3, #0]
 801cfb8:	b120      	cbz	r0, 801cfc4 <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv+0x10>
 801cfba:	4b04      	ldr	r3, [pc, #16]	; (801cfcc <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv+0x18>)
 801cfbc:	6818      	ldr	r0, [r3, #0]
 801cfbe:	3000      	adds	r0, #0
 801cfc0:	bf18      	it	ne
 801cfc2:	2001      	movne	r0, #1
 801cfc4:	4770      	bx	lr
 801cfc6:	bf00      	nop
 801cfc8:	2400c8c4 	.word	0x2400c8c4
 801cfcc:	2400c8d8 	.word	0x2400c8d8

0801cfd0 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>:
 801cfd0:	4b01      	ldr	r3, [pc, #4]	; (801cfd8 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv+0x8>)
 801cfd2:	6818      	ldr	r0, [r3, #0]
 801cfd4:	4770      	bx	lr
 801cfd6:	bf00      	nop
 801cfd8:	2400c8cc 	.word	0x2400c8cc

0801cfdc <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCoversEv>:
 801cfdc:	4b01      	ldr	r3, [pc, #4]	; (801cfe4 <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCoversEv+0x8>)
 801cfde:	6818      	ldr	r0, [r3, #0]
 801cfe0:	4770      	bx	lr
 801cfe2:	bf00      	nop
 801cfe4:	2400c8d4 	.word	0x2400c8d4

0801cfe8 <_ZN8touchgfx20CanvasWidgetRenderer23getScanlineStartIndicesEv>:
 801cfe8:	4b01      	ldr	r3, [pc, #4]	; (801cff0 <_ZN8touchgfx20CanvasWidgetRenderer23getScanlineStartIndicesEv+0x8>)
 801cfea:	6818      	ldr	r0, [r3, #0]
 801cfec:	4770      	bx	lr
 801cfee:	bf00      	nop
 801cff0:	2400c8e0 	.word	0x2400c8e0

0801cff4 <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCountsEv>:
 801cff4:	4b01      	ldr	r3, [pc, #4]	; (801cffc <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCountsEv+0x8>)
 801cff6:	6818      	ldr	r0, [r3, #0]
 801cff8:	4770      	bx	lr
 801cffa:	bf00      	nop
 801cffc:	2400c8d0 	.word	0x2400c8d0

0801d000 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>:
 801d000:	4b01      	ldr	r3, [pc, #4]	; (801d008 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv+0x8>)
 801d002:	6818      	ldr	r0, [r3, #0]
 801d004:	4770      	bx	lr
 801d006:	bf00      	nop
 801d008:	2400c8c8 	.word	0x2400c8c8

0801d00c <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>:
 801d00c:	4b01      	ldr	r3, [pc, #4]	; (801d014 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv+0x8>)
 801d00e:	6818      	ldr	r0, [r3, #0]
 801d010:	4770      	bx	lr
 801d012:	bf00      	nop
 801d014:	2400c8dc 	.word	0x2400c8dc

0801d018 <_ZN8touchgfx3LCD27supportDynamicBitmapDrawingENS_6Bitmap12BitmapFormatE>:
 801d018:	b510      	push	{r4, lr}
 801d01a:	6803      	ldr	r3, [r0, #0]
 801d01c:	460c      	mov	r4, r1
 801d01e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d020:	4798      	blx	r3
 801d022:	1b03      	subs	r3, r0, r4
 801d024:	4258      	negs	r0, r3
 801d026:	4158      	adcs	r0, r3
 801d028:	bd10      	pop	{r4, pc}
	...

0801d02c <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE>:
 801d02c:	4b01      	ldr	r3, [pc, #4]	; (801d034 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE+0x8>)
 801d02e:	6019      	str	r1, [r3, #0]
 801d030:	4770      	bx	lr
 801d032:	bf00      	nop
 801d034:	2400c8e4 	.word	0x2400c8e4

0801d038 <_ZN8touchgfx3LCD18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 801d038:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d03c:	4696      	mov	lr, r2
 801d03e:	b097      	sub	sp, #92	; 0x5c
 801d040:	4605      	mov	r5, r0
 801d042:	4614      	mov	r4, r2
 801d044:	460e      	mov	r6, r1
 801d046:	461f      	mov	r7, r3
 801d048:	f10d 0c1c 	add.w	ip, sp, #28
 801d04c:	f8bd 8088 	ldrh.w	r8, [sp, #136]	; 0x88
 801d050:	f89d 908c 	ldrb.w	r9, [sp, #140]	; 0x8c
 801d054:	f8bd a090 	ldrh.w	sl, [sp, #144]	; 0x90
 801d058:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801d05c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801d060:	f8de 3000 	ldr.w	r3, [lr]
 801d064:	f104 0e14 	add.w	lr, r4, #20
 801d068:	f8cc 3000 	str.w	r3, [ip]
 801d06c:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 801d070:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801d074:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801d078:	f8de 3000 	ldr.w	r3, [lr]
 801d07c:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 801d080:	f8cc 3000 	str.w	r3, [ip]
 801d084:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 801d088:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801d08c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801d090:	f8de 3000 	ldr.w	r3, [lr]
 801d094:	4631      	mov	r1, r6
 801d096:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801d098:	4628      	mov	r0, r5
 801d09a:	f8cc 3000 	str.w	r3, [ip]
 801d09e:	682b      	ldr	r3, [r5, #0]
 801d0a0:	9201      	str	r2, [sp, #4]
 801d0a2:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801d0a4:	f8cd 8008 	str.w	r8, [sp, #8]
 801d0a8:	9200      	str	r2, [sp, #0]
 801d0aa:	aa07      	add	r2, sp, #28
 801d0ac:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 801d0b0:	f8d3 b034 	ldr.w	fp, [r3, #52]	; 0x34
 801d0b4:	463b      	mov	r3, r7
 801d0b6:	47d8      	blx	fp
 801d0b8:	46a6      	mov	lr, r4
 801d0ba:	f10d 0c1c 	add.w	ip, sp, #28
 801d0be:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801d0c2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801d0c6:	f8de 3000 	ldr.w	r3, [lr]
 801d0ca:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 801d0ce:	343c      	adds	r4, #60	; 0x3c
 801d0d0:	f8cc 3000 	str.w	r3, [ip]
 801d0d4:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 801d0d8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801d0dc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801d0e0:	f8de 3000 	ldr.w	r3, [lr]
 801d0e4:	f8cc 3000 	str.w	r3, [ip]
 801d0e8:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 801d0ec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801d0ee:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801d0f2:	6823      	ldr	r3, [r4, #0]
 801d0f4:	4631      	mov	r1, r6
 801d0f6:	4628      	mov	r0, r5
 801d0f8:	f8cc 3000 	str.w	r3, [ip]
 801d0fc:	682b      	ldr	r3, [r5, #0]
 801d0fe:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 801d102:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801d104:	f8cd 8008 	str.w	r8, [sp, #8]
 801d108:	9201      	str	r2, [sp, #4]
 801d10a:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801d10c:	9200      	str	r2, [sp, #0]
 801d10e:	aa07      	add	r2, sp, #28
 801d110:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 801d112:	463b      	mov	r3, r7
 801d114:	47a0      	blx	r4
 801d116:	b017      	add	sp, #92	; 0x5c
 801d118:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801d11c <_ZN8touchgfx3LCD28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 801d11c:	2000      	movs	r0, #0
 801d11e:	4770      	bx	lr

0801d120 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 801d120:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d124:	b08d      	sub	sp, #52	; 0x34
 801d126:	4688      	mov	r8, r1
 801d128:	f8d3 c000 	ldr.w	ip, [r3]
 801d12c:	9916      	ldr	r1, [sp, #88]	; 0x58
 801d12e:	f8bd 4070 	ldrh.w	r4, [sp, #112]	; 0x70
 801d132:	680f      	ldr	r7, [r1, #0]
 801d134:	ed92 4a09 	vldr	s8, [r2, #36]	; 0x24
 801d138:	eba7 070c 	sub.w	r7, r7, ip
 801d13c:	edd2 4a0b 	vldr	s9, [r2, #44]	; 0x2c
 801d140:	edd3 6a07 	vldr	s13, [r3, #28]
 801d144:	42bc      	cmp	r4, r7
 801d146:	9918      	ldr	r1, [sp, #96]	; 0x60
 801d148:	f8dd a064 	ldr.w	sl, [sp, #100]	; 0x64
 801d14c:	bfa8      	it	ge
 801d14e:	463c      	movge	r4, r7
 801d150:	f9b1 9000 	ldrsh.w	r9, [r1]
 801d154:	f9ba 1000 	ldrsh.w	r1, [sl]
 801d158:	ee07 4a90 	vmov	s15, r4
 801d15c:	eb09 0e0c 	add.w	lr, r9, ip
 801d160:	edd3 1a0a 	vldr	s3, [r3, #40]	; 0x28
 801d164:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 801d168:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 801d16c:	ed93 2a0d 	vldr	s4, [r3, #52]	; 0x34
 801d170:	4571      	cmp	r1, lr
 801d172:	ee25 4a04 	vmul.f32	s8, s10, s8
 801d176:	ee65 4a24 	vmul.f32	s9, s10, s9
 801d17a:	ee25 5a27 	vmul.f32	s10, s10, s15
 801d17e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801d182:	ee71 0aa4 	vadd.f32	s1, s3, s9
 801d186:	ee32 1a05 	vadd.f32	s2, s4, s10
 801d18a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 801d18e:	ee36 0a84 	vadd.f32	s0, s13, s8
 801d192:	ee61 1a87 	vmul.f32	s3, s3, s14
 801d196:	ee22 2a07 	vmul.f32	s4, s4, s14
 801d19a:	f340 808c 	ble.w	801d2b6 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x196>
 801d19e:	eba1 060e 	sub.w	r6, r1, lr
 801d1a2:	fb96 f5f4 	sdiv	r5, r6, r4
 801d1a6:	ee07 5a10 	vmov	s14, r5
 801d1aa:	2d00      	cmp	r5, #0
 801d1ac:	fb04 6615 	mls	r6, r4, r5, r6
 801d1b0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801d1b4:	eea7 0a04 	vfma.f32	s0, s14, s8
 801d1b8:	eee7 0a24 	vfma.f32	s1, s14, s9
 801d1bc:	eea7 1a05 	vfma.f32	s2, s14, s10
 801d1c0:	dd12      	ble.n	801d1e8 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xc8>
 801d1c2:	ee70 6a44 	vsub.f32	s13, s0, s8
 801d1c6:	ee70 1ae4 	vsub.f32	s3, s1, s9
 801d1ca:	ee31 2a45 	vsub.f32	s4, s2, s10
 801d1ce:	eef5 6a40 	vcmp.f32	s13, #0.0
 801d1d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d1d6:	bf14      	ite	ne
 801d1d8:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 801d1dc:	eeb0 7a67 	vmoveq.f32	s14, s15
 801d1e0:	ee61 1a87 	vmul.f32	s3, s3, s14
 801d1e4:	ee22 2a07 	vmul.f32	s4, s4, s14
 801d1e8:	fb05 f204 	mul.w	r2, r5, r4
 801d1ec:	1abf      	subs	r7, r7, r2
 801d1ee:	4494      	add	ip, r2
 801d1f0:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 801d1f4:	4411      	add	r1, r2
 801d1f6:	eb09 020c 	add.w	r2, r9, ip
 801d1fa:	b209      	sxth	r1, r1
 801d1fc:	443a      	add	r2, r7
 801d1fe:	428a      	cmp	r2, r1
 801d200:	bfc4      	itt	gt
 801d202:	eba1 0209 	subgt.w	r2, r1, r9
 801d206:	eba2 070c 	subgt.w	r7, r2, ip
 801d20a:	2f00      	cmp	r7, #0
 801d20c:	dd50      	ble.n	801d2b0 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x190>
 801d20e:	fb97 f1f4 	sdiv	r1, r7, r4
 801d212:	fb04 7211 	mls	r2, r4, r1, r7
 801d216:	b90a      	cbnz	r2, 801d21c <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfc>
 801d218:	3901      	subs	r1, #1
 801d21a:	4622      	mov	r2, r4
 801d21c:	eec7 3a80 	vdiv.f32	s7, s15, s0
 801d220:	6840      	ldr	r0, [r0, #4]
 801d222:	f89d b06c 	ldrb.w	fp, [sp, #108]	; 0x6c
 801d226:	44b6      	add	lr, r6
 801d228:	f8d0 a000 	ldr.w	sl, [r0]
 801d22c:	2900      	cmp	r1, #0
 801d22e:	bfcc      	ite	gt
 801d230:	46a1      	movgt	r9, r4
 801d232:	4691      	movle	r9, r2
 801d234:	900b      	str	r0, [sp, #44]	; 0x2c
 801d236:	9817      	ldr	r0, [sp, #92]	; 0x5c
 801d238:	fb04 e505 	mla	r5, r4, r5, lr
 801d23c:	eef0 6a42 	vmov.f32	s13, s4
 801d240:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 801d244:	9008      	str	r0, [sp, #32]
 801d246:	eeb0 7a61 	vmov.f32	s14, s3
 801d24a:	9818      	ldr	r0, [sp, #96]	; 0x60
 801d24c:	695b      	ldr	r3, [r3, #20]
 801d24e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801d252:	f9b0 b002 	ldrsh.w	fp, [r0, #2]
 801d256:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801d25a:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801d25c:	445b      	add	r3, fp
 801d25e:	9307      	str	r3, [sp, #28]
 801d260:	ee16 3a90 	vmov	r3, s13
 801d264:	e9cd 8505 	strd	r8, r5, [sp, #20]
 801d268:	ee60 2aa3 	vmul.f32	s5, s1, s7
 801d26c:	ee21 3a23 	vmul.f32	s6, s2, s7
 801d270:	ee72 7ae1 	vsub.f32	s15, s5, s3
 801d274:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 801d278:	ee17 7a90 	vmov	r7, s15
 801d27c:	ee73 7a42 	vsub.f32	s15, s6, s4
 801d280:	fb97 f7f4 	sdiv	r7, r7, r4
 801d284:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 801d288:	ee17 ca90 	vmov	ip, s15
 801d28c:	fb9c fcf4 	sdiv	ip, ip, r4
 801d290:	fb0c 3306 	mla	r3, ip, r6, r3
 801d294:	9302      	str	r3, [sp, #8]
 801d296:	ee17 3a10 	vmov	r3, s14
 801d29a:	e9cd 7c03 	strd	r7, ip, [sp, #12]
 801d29e:	fb07 3706 	mla	r7, r7, r6, r3
 801d2a2:	eba9 0306 	sub.w	r3, r9, r6
 801d2a6:	e9cd 4700 	strd	r4, r7, [sp]
 801d2aa:	f8da 4008 	ldr.w	r4, [sl, #8]
 801d2ae:	47a0      	blx	r4
 801d2b0:	b00d      	add	sp, #52	; 0x34
 801d2b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d2b6:	2500      	movs	r5, #0
 801d2b8:	462e      	mov	r6, r5
 801d2ba:	e799      	b.n	801d1f0 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd0>

0801d2bc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 801d2bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d2c0:	b0db      	sub	sp, #364	; 0x16c
 801d2c2:	461d      	mov	r5, r3
 801d2c4:	4614      	mov	r4, r2
 801d2c6:	f8bd 3198 	ldrh.w	r3, [sp, #408]	; 0x198
 801d2ca:	910f      	str	r1, [sp, #60]	; 0x3c
 801d2cc:	4629      	mov	r1, r5
 801d2ce:	930a      	str	r3, [sp, #40]	; 0x28
 801d2d0:	f89d 319c 	ldrb.w	r3, [sp, #412]	; 0x19c
 801d2d4:	9009      	str	r0, [sp, #36]	; 0x24
 801d2d6:	930b      	str	r3, [sp, #44]	; 0x2c
 801d2d8:	f8bd 31a0 	ldrh.w	r3, [sp, #416]	; 0x1a0
 801d2dc:	f8dd b194 	ldr.w	fp, [sp, #404]	; 0x194
 801d2e0:	9310      	str	r3, [sp, #64]	; 0x40
 801d2e2:	6803      	ldr	r3, [r0, #0]
 801d2e4:	6bdf      	ldr	r7, [r3, #60]	; 0x3c
 801d2e6:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801d2ea:	47b8      	blx	r7
 801d2ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d2ee:	6058      	str	r0, [r3, #4]
 801d2f0:	2800      	cmp	r0, #0
 801d2f2:	f000 83a1 	beq.w	801da38 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801d2f6:	682b      	ldr	r3, [r5, #0]
 801d2f8:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 801d2fc:	ed94 7a02 	vldr	s14, [r4, #8]
 801d300:	9314      	str	r3, [sp, #80]	; 0x50
 801d302:	686b      	ldr	r3, [r5, #4]
 801d304:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801d308:	9315      	str	r3, [sp, #84]	; 0x54
 801d30a:	4bc1      	ldr	r3, [pc, #772]	; (801d610 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x354>)
 801d30c:	7819      	ldrb	r1, [r3, #0]
 801d30e:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 801d312:	2900      	cmp	r1, #0
 801d314:	bf16      	itet	ne
 801d316:	4619      	movne	r1, r3
 801d318:	4611      	moveq	r1, r2
 801d31a:	4613      	movne	r3, r2
 801d31c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d320:	9116      	str	r1, [sp, #88]	; 0x58
 801d322:	e9cd 3217 	strd	r3, r2, [sp, #92]	; 0x5c
 801d326:	f240 8387 	bls.w	801da38 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801d32a:	ed94 7a07 	vldr	s14, [r4, #28]
 801d32e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801d332:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d336:	f240 837f 	bls.w	801da38 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801d33a:	ed94 7a0c 	vldr	s14, [r4, #48]	; 0x30
 801d33e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801d342:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d346:	f240 8377 	bls.w	801da38 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801d34a:	6822      	ldr	r2, [r4, #0]
 801d34c:	4bb1      	ldr	r3, [pc, #708]	; (801d614 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x358>)
 801d34e:	429a      	cmp	r2, r3
 801d350:	f2c0 8372 	blt.w	801da38 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801d354:	49b0      	ldr	r1, [pc, #704]	; (801d618 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x35c>)
 801d356:	6963      	ldr	r3, [r4, #20]
 801d358:	428a      	cmp	r2, r1
 801d35a:	f300 836d 	bgt.w	801da38 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801d35e:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 801d362:	48ae      	ldr	r0, [pc, #696]	; (801d61c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x360>)
 801d364:	33ff      	adds	r3, #255	; 0xff
 801d366:	4283      	cmp	r3, r0
 801d368:	f200 8366 	bhi.w	801da38 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801d36c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801d36e:	4dac      	ldr	r5, [pc, #688]	; (801d620 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x364>)
 801d370:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 801d374:	33ff      	adds	r3, #255	; 0xff
 801d376:	42ab      	cmp	r3, r5
 801d378:	f200 835e 	bhi.w	801da38 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801d37c:	6862      	ldr	r2, [r4, #4]
 801d37e:	f502 331c 	add.w	r3, r2, #159744	; 0x27000
 801d382:	33ff      	adds	r3, #255	; 0xff
 801d384:	4283      	cmp	r3, r0
 801d386:	f200 8357 	bhi.w	801da38 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801d38a:	69a1      	ldr	r1, [r4, #24]
 801d38c:	f501 331c 	add.w	r3, r1, #159744	; 0x27000
 801d390:	33ff      	adds	r3, #255	; 0xff
 801d392:	4283      	cmp	r3, r0
 801d394:	f200 8350 	bhi.w	801da38 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801d398:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 801d39a:	f503 301c 	add.w	r0, r3, #159744	; 0x27000
 801d39e:	30ff      	adds	r0, #255	; 0xff
 801d3a0:	42a8      	cmp	r0, r5
 801d3a2:	f200 8349 	bhi.w	801da38 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801d3a6:	428a      	cmp	r2, r1
 801d3a8:	f280 8110 	bge.w	801d5cc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x310>
 801d3ac:	429a      	cmp	r2, r3
 801d3ae:	f300 8119 	bgt.w	801d5e4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x328>
 801d3b2:	4299      	cmp	r1, r3
 801d3b4:	f280 811d 	bge.w	801d5f2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x336>
 801d3b8:	2502      	movs	r5, #2
 801d3ba:	2701      	movs	r7, #1
 801d3bc:	46a9      	mov	r9, r5
 801d3be:	46b8      	mov	r8, r7
 801d3c0:	f04f 0a00 	mov.w	sl, #0
 801d3c4:	4621      	mov	r1, r4
 801d3c6:	a849      	add	r0, sp, #292	; 0x124
 801d3c8:	f003 fee4 	bl	8021194 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>
 801d3cc:	4622      	mov	r2, r4
 801d3ce:	4653      	mov	r3, sl
 801d3d0:	a949      	add	r1, sp, #292	; 0x124
 801d3d2:	f8cd 9000 	str.w	r9, [sp]
 801d3d6:	a819      	add	r0, sp, #100	; 0x64
 801d3d8:	f004 f80c 	bl	80213f4 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 801d3dc:	4622      	mov	r2, r4
 801d3de:	4653      	mov	r3, sl
 801d3e0:	a949      	add	r1, sp, #292	; 0x124
 801d3e2:	f8cd 8000 	str.w	r8, [sp]
 801d3e6:	a829      	add	r0, sp, #164	; 0xa4
 801d3e8:	f004 f804 	bl	80213f4 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 801d3ec:	4643      	mov	r3, r8
 801d3ee:	4622      	mov	r2, r4
 801d3f0:	a949      	add	r1, sp, #292	; 0x124
 801d3f2:	f8cd 9000 	str.w	r9, [sp]
 801d3f6:	a839      	add	r0, sp, #228	; 0xe4
 801d3f8:	f003 fffc 	bl	80213f4 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 801d3fc:	42af      	cmp	r7, r5
 801d3fe:	af12      	add	r7, sp, #72	; 0x48
 801d400:	bfb7      	itett	lt
 801d402:	2300      	movlt	r3, #0
 801d404:	2301      	movge	r3, #1
 801d406:	ad29      	addlt	r5, sp, #164	; 0xa4
 801d408:	ac19      	addlt	r4, sp, #100	; 0x64
 801d40a:	bfb1      	iteee	lt
 801d40c:	930e      	strlt	r3, [sp, #56]	; 0x38
 801d40e:	ad19      	addge	r5, sp, #100	; 0x64
 801d410:	930e      	strge	r3, [sp, #56]	; 0x38
 801d412:	ac29      	addge	r4, sp, #164	; 0xa4
 801d414:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801d416:	e893 0003 	ldmia.w	r3, {r0, r1}
 801d41a:	e887 0003 	stmia.w	r7, {r0, r1}
 801d41e:	b928      	cbnz	r0, 801d42c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x170>
 801d420:	4b80      	ldr	r3, [pc, #512]	; (801d624 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x368>)
 801d422:	6818      	ldr	r0, [r3, #0]
 801d424:	6803      	ldr	r3, [r0, #0]
 801d426:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d428:	4798      	blx	r3
 801d42a:	6038      	str	r0, [r7, #0]
 801d42c:	9b64      	ldr	r3, [sp, #400]	; 0x190
 801d42e:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 801d432:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801d436:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 801d438:	930c      	str	r3, [sp, #48]	; 0x30
 801d43a:	990c      	ldr	r1, [sp, #48]	; 0x30
 801d43c:	6963      	ldr	r3, [r4, #20]
 801d43e:	440b      	add	r3, r1
 801d440:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 801d444:	4408      	add	r0, r1
 801d446:	b200      	sxth	r0, r0
 801d448:	4283      	cmp	r3, r0
 801d44a:	900d      	str	r0, [sp, #52]	; 0x34
 801d44c:	f280 80dd 	bge.w	801d60a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x34e>
 801d450:	428b      	cmp	r3, r1
 801d452:	da08      	bge.n	801d466 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 801d454:	2a00      	cmp	r2, #0
 801d456:	dd06      	ble.n	801d466 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 801d458:	1acb      	subs	r3, r1, r3
 801d45a:	429a      	cmp	r2, r3
 801d45c:	f2c0 80e4 	blt.w	801d628 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36c>
 801d460:	2b00      	cmp	r3, #0
 801d462:	f300 80e2 	bgt.w	801d62a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36e>
 801d466:	6967      	ldr	r7, [r4, #20]
 801d468:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 801d46c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801d46e:	443b      	add	r3, r7
 801d470:	461f      	mov	r7, r3
 801d472:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801d474:	1bdf      	subs	r7, r3, r7
 801d476:	4297      	cmp	r7, r2
 801d478:	bfa8      	it	ge
 801d47a:	4617      	movge	r7, r2
 801d47c:	2f00      	cmp	r7, #0
 801d47e:	f340 8166 	ble.w	801d74e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x492>
 801d482:	9b64      	ldr	r3, [sp, #400]	; 0x190
 801d484:	6829      	ldr	r1, [r5, #0]
 801d486:	f9b3 2000 	ldrsh.w	r2, [r3]
 801d48a:	f9bb 3000 	ldrsh.w	r3, [fp]
 801d48e:	4411      	add	r1, r2
 801d490:	6820      	ldr	r0, [r4, #0]
 801d492:	4299      	cmp	r1, r3
 801d494:	dd1a      	ble.n	801d4cc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 801d496:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 801d49a:	4402      	add	r2, r0
 801d49c:	440b      	add	r3, r1
 801d49e:	b21b      	sxth	r3, r3
 801d4a0:	429a      	cmp	r2, r3
 801d4a2:	dc13      	bgt.n	801d4cc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 801d4a4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801d4a6:	a912      	add	r1, sp, #72	; 0x48
 801d4a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d4aa:	9809      	ldr	r0, [sp, #36]	; 0x24
 801d4ac:	681b      	ldr	r3, [r3, #0]
 801d4ae:	9206      	str	r2, [sp, #24]
 801d4b0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801d4b2:	9500      	str	r5, [sp, #0]
 801d4b4:	9205      	str	r2, [sp, #20]
 801d4b6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801d4b8:	e9cd b203 	strd	fp, r2, [sp, #12]
 801d4bc:	9a64      	ldr	r2, [sp, #400]	; 0x190
 801d4be:	e9cd 8201 	strd	r8, r2, [sp, #4]
 801d4c2:	aa49      	add	r2, sp, #292	; 0x124
 801d4c4:	f8d3 9040 	ldr.w	r9, [r3, #64]	; 0x40
 801d4c8:	4623      	mov	r3, r4
 801d4ca:	47c8      	blx	r9
 801d4cc:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 801d4d0:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 801d4d4:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 801d4d8:	ee37 7a27 	vadd.f32	s14, s14, s15
 801d4dc:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 801d4e0:	68a1      	ldr	r1, [r4, #8]
 801d4e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801d4e6:	ed94 6a08 	vldr	s12, [r4, #32]
 801d4ea:	edd4 6a07 	vldr	s13, [r4, #28]
 801d4ee:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 801d4f2:	ee76 6a86 	vadd.f32	s13, s13, s12
 801d4f6:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 801d4fa:	e9d4 2300 	ldrd	r2, r3, [r4]
 801d4fe:	edc4 6a07 	vstr	s13, [r4, #28]
 801d502:	441a      	add	r2, r3
 801d504:	6963      	ldr	r3, [r4, #20]
 801d506:	3301      	adds	r3, #1
 801d508:	6022      	str	r2, [r4, #0]
 801d50a:	6163      	str	r3, [r4, #20]
 801d50c:	69a3      	ldr	r3, [r4, #24]
 801d50e:	3b01      	subs	r3, #1
 801d510:	61a3      	str	r3, [r4, #24]
 801d512:	6923      	ldr	r3, [r4, #16]
 801d514:	440b      	add	r3, r1
 801d516:	68e1      	ldr	r1, [r4, #12]
 801d518:	428b      	cmp	r3, r1
 801d51a:	6123      	str	r3, [r4, #16]
 801d51c:	db15      	blt.n	801d54a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x28e>
 801d51e:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 801d522:	3201      	adds	r2, #1
 801d524:	1a5b      	subs	r3, r3, r1
 801d526:	ee76 6a26 	vadd.f32	s13, s12, s13
 801d52a:	6022      	str	r2, [r4, #0]
 801d52c:	6123      	str	r3, [r4, #16]
 801d52e:	edc4 6a07 	vstr	s13, [r4, #28]
 801d532:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 801d536:	ee36 7a87 	vadd.f32	s14, s13, s14
 801d53a:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 801d53e:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 801d542:	ee77 7a27 	vadd.f32	s15, s14, s15
 801d546:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 801d54a:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 801d54e:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 801d552:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 801d556:	ee37 7a27 	vadd.f32	s14, s14, s15
 801d55a:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 801d55e:	68a9      	ldr	r1, [r5, #8]
 801d560:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801d564:	ed95 6a08 	vldr	s12, [r5, #32]
 801d568:	edd5 6a07 	vldr	s13, [r5, #28]
 801d56c:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 801d570:	ee76 6a86 	vadd.f32	s13, s13, s12
 801d574:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 801d578:	e9d5 2300 	ldrd	r2, r3, [r5]
 801d57c:	edc5 6a07 	vstr	s13, [r5, #28]
 801d580:	441a      	add	r2, r3
 801d582:	696b      	ldr	r3, [r5, #20]
 801d584:	3301      	adds	r3, #1
 801d586:	602a      	str	r2, [r5, #0]
 801d588:	616b      	str	r3, [r5, #20]
 801d58a:	69ab      	ldr	r3, [r5, #24]
 801d58c:	3b01      	subs	r3, #1
 801d58e:	61ab      	str	r3, [r5, #24]
 801d590:	692b      	ldr	r3, [r5, #16]
 801d592:	440b      	add	r3, r1
 801d594:	68e9      	ldr	r1, [r5, #12]
 801d596:	428b      	cmp	r3, r1
 801d598:	612b      	str	r3, [r5, #16]
 801d59a:	db15      	blt.n	801d5c8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x30c>
 801d59c:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 801d5a0:	3201      	adds	r2, #1
 801d5a2:	1a5b      	subs	r3, r3, r1
 801d5a4:	ee76 6a26 	vadd.f32	s13, s12, s13
 801d5a8:	602a      	str	r2, [r5, #0]
 801d5aa:	612b      	str	r3, [r5, #16]
 801d5ac:	edc5 6a07 	vstr	s13, [r5, #28]
 801d5b0:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 801d5b4:	ee36 7a87 	vadd.f32	s14, s13, s14
 801d5b8:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 801d5bc:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 801d5c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 801d5c4:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 801d5c8:	3f01      	subs	r7, #1
 801d5ca:	e757      	b.n	801d47c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1c0>
 801d5cc:	4299      	cmp	r1, r3
 801d5ce:	dc13      	bgt.n	801d5f8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x33c>
 801d5d0:	429a      	cmp	r2, r3
 801d5d2:	da14      	bge.n	801d5fe <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x342>
 801d5d4:	2502      	movs	r5, #2
 801d5d6:	2703      	movs	r7, #3
 801d5d8:	f04f 0800 	mov.w	r8, #0
 801d5dc:	46a9      	mov	r9, r5
 801d5de:	f04f 0a01 	mov.w	sl, #1
 801d5e2:	e6ef      	b.n	801d3c4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 801d5e4:	2501      	movs	r5, #1
 801d5e6:	2700      	movs	r7, #0
 801d5e8:	46a9      	mov	r9, r5
 801d5ea:	46b8      	mov	r8, r7
 801d5ec:	f04f 0a02 	mov.w	sl, #2
 801d5f0:	e6e8      	b.n	801d3c4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 801d5f2:	2501      	movs	r5, #1
 801d5f4:	2702      	movs	r7, #2
 801d5f6:	e6e1      	b.n	801d3bc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x100>
 801d5f8:	2500      	movs	r5, #0
 801d5fa:	2701      	movs	r7, #1
 801d5fc:	e7f4      	b.n	801d5e8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x32c>
 801d5fe:	2702      	movs	r7, #2
 801d600:	2503      	movs	r5, #3
 801d602:	f04f 0900 	mov.w	r9, #0
 801d606:	46b8      	mov	r8, r7
 801d608:	e7e9      	b.n	801d5de <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x322>
 801d60a:	4613      	mov	r3, r2
 801d60c:	e728      	b.n	801d460 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1a4>
 801d60e:	bf00      	nop
 801d610:	2400c8b4 	.word	0x2400c8b4
 801d614:	fffd8f01 	.word	0xfffd8f01
 801d618:	00027100 	.word	0x00027100
 801d61c:	0004e1ff 	.word	0x0004e1ff
 801d620:	0004e1fe 	.word	0x0004e1fe
 801d624:	2400c8bc 	.word	0x2400c8bc
 801d628:	4613      	mov	r3, r2
 801d62a:	992b      	ldr	r1, [sp, #172]	; 0xac
 801d62c:	469e      	mov	lr, r3
 801d62e:	9f2e      	ldr	r7, [sp, #184]	; 0xb8
 801d630:	469c      	mov	ip, r3
 801d632:	9111      	str	r1, [sp, #68]	; 0x44
 801d634:	f04f 0900 	mov.w	r9, #0
 801d638:	eddd 4a34 	vldr	s9, [sp, #208]	; 0xd0
 801d63c:	ed9d 7a33 	vldr	s14, [sp, #204]	; 0xcc
 801d640:	ed9d 4a37 	vldr	s8, [sp, #220]	; 0xdc
 801d644:	eddd 7a36 	vldr	s15, [sp, #216]	; 0xd8
 801d648:	eddd 3a31 	vldr	s7, [sp, #196]	; 0xc4
 801d64c:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 801d650:	ed9d 5a32 	vldr	s10, [sp, #200]	; 0xc8
 801d654:	eddd 5a35 	vldr	s11, [sp, #212]	; 0xd4
 801d658:	ed9d 6a38 	vldr	s12, [sp, #224]	; 0xe0
 801d65c:	e9dd 0a29 	ldrd	r0, sl, [sp, #164]	; 0xa4
 801d660:	e9dd 812c 	ldrd	r8, r1, [sp, #176]	; 0xb0
 801d664:	f1bc 0f00 	cmp.w	ip, #0
 801d668:	d147      	bne.n	801d6fa <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x43e>
 801d66a:	eb03 0c07 	add.w	ip, r3, r7
 801d66e:	1ad7      	subs	r7, r2, r3
 801d670:	f1b9 0f00 	cmp.w	r9, #0
 801d674:	d009      	beq.n	801d68a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3ce>
 801d676:	9029      	str	r0, [sp, #164]	; 0xa4
 801d678:	ed8d 7a33 	vstr	s14, [sp, #204]	; 0xcc
 801d67c:	edcd 7a36 	vstr	s15, [sp, #216]	; 0xd8
 801d680:	edcd 6a30 	vstr	s13, [sp, #192]	; 0xc0
 801d684:	912d      	str	r1, [sp, #180]	; 0xb4
 801d686:	e9cd c72e 	strd	ip, r7, [sp, #184]	; 0xb8
 801d68a:	991b      	ldr	r1, [sp, #108]	; 0x6c
 801d68c:	f04f 0800 	mov.w	r8, #0
 801d690:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 801d694:	9111      	str	r1, [sp, #68]	; 0x44
 801d696:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 801d69a:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 801d69e:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 801d6a2:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 801d6a6:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 801d6aa:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 801d6ae:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 801d6b2:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 801d6b6:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 801d6ba:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 801d6be:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 801d6c2:	f1be 0f00 	cmp.w	lr, #0
 801d6c6:	d031      	beq.n	801d72c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x470>
 801d6c8:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801d6ca:	4450      	add	r0, sl
 801d6cc:	ee76 6aa4 	vadd.f32	s13, s13, s9
 801d6d0:	4431      	add	r1, r6
 801d6d2:	ee37 7a04 	vadd.f32	s14, s14, s8
 801d6d6:	ee77 7aa3 	vadd.f32	s15, s15, s7
 801d6da:	4549      	cmp	r1, r9
 801d6dc:	db08      	blt.n	801d6f0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x434>
 801d6de:	ee77 7a85 	vadd.f32	s15, s15, s10
 801d6e2:	3001      	adds	r0, #1
 801d6e4:	ee76 6aa5 	vadd.f32	s13, s13, s11
 801d6e8:	eba1 0109 	sub.w	r1, r1, r9
 801d6ec:	ee37 7a06 	vadd.f32	s14, s14, s12
 801d6f0:	f10e 3eff 	add.w	lr, lr, #4294967295
 801d6f4:	f04f 0801 	mov.w	r8, #1
 801d6f8:	e7e3      	b.n	801d6c2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x406>
 801d6fa:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801d6fc:	4450      	add	r0, sl
 801d6fe:	ee37 7a24 	vadd.f32	s14, s14, s9
 801d702:	4431      	add	r1, r6
 801d704:	ee77 7a84 	vadd.f32	s15, s15, s8
 801d708:	ee76 6aa3 	vadd.f32	s13, s13, s7
 801d70c:	4541      	cmp	r1, r8
 801d70e:	db08      	blt.n	801d722 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x466>
 801d710:	ee76 6a85 	vadd.f32	s13, s13, s10
 801d714:	3001      	adds	r0, #1
 801d716:	ee37 7a25 	vadd.f32	s14, s14, s11
 801d71a:	eba1 0108 	sub.w	r1, r1, r8
 801d71e:	ee77 7a86 	vadd.f32	s15, s15, s12
 801d722:	f10c 3cff 	add.w	ip, ip, #4294967295
 801d726:	f04f 0901 	mov.w	r9, #1
 801d72a:	e79b      	b.n	801d664 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3a8>
 801d72c:	449c      	add	ip, r3
 801d72e:	1aff      	subs	r7, r7, r3
 801d730:	f1b8 0f00 	cmp.w	r8, #0
 801d734:	d009      	beq.n	801d74a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x48e>
 801d736:	9019      	str	r0, [sp, #100]	; 0x64
 801d738:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 801d73c:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 801d740:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 801d744:	911d      	str	r1, [sp, #116]	; 0x74
 801d746:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 801d74a:	1ad2      	subs	r2, r2, r3
 801d74c:	e68b      	b.n	801d466 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 801d74e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d750:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
 801d752:	2b00      	cmp	r3, #0
 801d754:	f000 80d1 	beq.w	801d8fa <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63e>
 801d758:	ad19      	add	r5, sp, #100	; 0x64
 801d75a:	ac39      	add	r4, sp, #228	; 0xe4
 801d75c:	9b64      	ldr	r3, [sp, #400]	; 0x190
 801d75e:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 801d762:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801d766:	930c      	str	r3, [sp, #48]	; 0x30
 801d768:	990c      	ldr	r1, [sp, #48]	; 0x30
 801d76a:	6963      	ldr	r3, [r4, #20]
 801d76c:	440b      	add	r3, r1
 801d76e:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 801d772:	4408      	add	r0, r1
 801d774:	b200      	sxth	r0, r0
 801d776:	4283      	cmp	r3, r0
 801d778:	900d      	str	r0, [sp, #52]	; 0x34
 801d77a:	f280 80c1 	bge.w	801d900 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x644>
 801d77e:	428b      	cmp	r3, r1
 801d780:	da08      	bge.n	801d794 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 801d782:	2a00      	cmp	r2, #0
 801d784:	dd06      	ble.n	801d794 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 801d786:	1acb      	subs	r3, r1, r3
 801d788:	429a      	cmp	r2, r3
 801d78a:	f2c0 80bb 	blt.w	801d904 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x648>
 801d78e:	2b00      	cmp	r3, #0
 801d790:	f300 80b9 	bgt.w	801d906 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x64a>
 801d794:	6967      	ldr	r7, [r4, #20]
 801d796:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 801d79a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801d79c:	443b      	add	r3, r7
 801d79e:	461f      	mov	r7, r3
 801d7a0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801d7a2:	1bdf      	subs	r7, r3, r7
 801d7a4:	4297      	cmp	r7, r2
 801d7a6:	bfa8      	it	ge
 801d7a8:	4617      	movge	r7, r2
 801d7aa:	2f00      	cmp	r7, #0
 801d7ac:	f340 813c 	ble.w	801da28 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x76c>
 801d7b0:	9b64      	ldr	r3, [sp, #400]	; 0x190
 801d7b2:	6829      	ldr	r1, [r5, #0]
 801d7b4:	f9b3 2000 	ldrsh.w	r2, [r3]
 801d7b8:	f9bb 3000 	ldrsh.w	r3, [fp]
 801d7bc:	4411      	add	r1, r2
 801d7be:	6820      	ldr	r0, [r4, #0]
 801d7c0:	4299      	cmp	r1, r3
 801d7c2:	dd1a      	ble.n	801d7fa <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 801d7c4:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 801d7c8:	4402      	add	r2, r0
 801d7ca:	440b      	add	r3, r1
 801d7cc:	b21b      	sxth	r3, r3
 801d7ce:	429a      	cmp	r2, r3
 801d7d0:	dc13      	bgt.n	801d7fa <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 801d7d2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801d7d4:	a912      	add	r1, sp, #72	; 0x48
 801d7d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d7d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 801d7da:	681b      	ldr	r3, [r3, #0]
 801d7dc:	9206      	str	r2, [sp, #24]
 801d7de:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801d7e0:	9500      	str	r5, [sp, #0]
 801d7e2:	9205      	str	r2, [sp, #20]
 801d7e4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801d7e6:	e9cd b203 	strd	fp, r2, [sp, #12]
 801d7ea:	9a64      	ldr	r2, [sp, #400]	; 0x190
 801d7ec:	e9cd 8201 	strd	r8, r2, [sp, #4]
 801d7f0:	aa49      	add	r2, sp, #292	; 0x124
 801d7f2:	f8d3 9040 	ldr.w	r9, [r3, #64]	; 0x40
 801d7f6:	4623      	mov	r3, r4
 801d7f8:	47c8      	blx	r9
 801d7fa:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 801d7fe:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 801d802:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 801d806:	ee37 7a27 	vadd.f32	s14, s14, s15
 801d80a:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 801d80e:	68a1      	ldr	r1, [r4, #8]
 801d810:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801d814:	ed94 6a08 	vldr	s12, [r4, #32]
 801d818:	edd4 6a07 	vldr	s13, [r4, #28]
 801d81c:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 801d820:	ee76 6a86 	vadd.f32	s13, s13, s12
 801d824:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 801d828:	e9d4 2300 	ldrd	r2, r3, [r4]
 801d82c:	edc4 6a07 	vstr	s13, [r4, #28]
 801d830:	441a      	add	r2, r3
 801d832:	6963      	ldr	r3, [r4, #20]
 801d834:	3301      	adds	r3, #1
 801d836:	6022      	str	r2, [r4, #0]
 801d838:	6163      	str	r3, [r4, #20]
 801d83a:	69a3      	ldr	r3, [r4, #24]
 801d83c:	3b01      	subs	r3, #1
 801d83e:	61a3      	str	r3, [r4, #24]
 801d840:	6923      	ldr	r3, [r4, #16]
 801d842:	440b      	add	r3, r1
 801d844:	68e1      	ldr	r1, [r4, #12]
 801d846:	428b      	cmp	r3, r1
 801d848:	6123      	str	r3, [r4, #16]
 801d84a:	db15      	blt.n	801d878 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x5bc>
 801d84c:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 801d850:	3201      	adds	r2, #1
 801d852:	1a5b      	subs	r3, r3, r1
 801d854:	ee76 6a26 	vadd.f32	s13, s12, s13
 801d858:	6022      	str	r2, [r4, #0]
 801d85a:	6123      	str	r3, [r4, #16]
 801d85c:	edc4 6a07 	vstr	s13, [r4, #28]
 801d860:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 801d864:	ee36 7a87 	vadd.f32	s14, s13, s14
 801d868:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 801d86c:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 801d870:	ee77 7a27 	vadd.f32	s15, s14, s15
 801d874:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 801d878:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 801d87c:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 801d880:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 801d884:	ee37 7a27 	vadd.f32	s14, s14, s15
 801d888:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 801d88c:	68a9      	ldr	r1, [r5, #8]
 801d88e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801d892:	ed95 6a08 	vldr	s12, [r5, #32]
 801d896:	edd5 6a07 	vldr	s13, [r5, #28]
 801d89a:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 801d89e:	ee76 6a86 	vadd.f32	s13, s13, s12
 801d8a2:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 801d8a6:	e9d5 2300 	ldrd	r2, r3, [r5]
 801d8aa:	edc5 6a07 	vstr	s13, [r5, #28]
 801d8ae:	441a      	add	r2, r3
 801d8b0:	696b      	ldr	r3, [r5, #20]
 801d8b2:	3301      	adds	r3, #1
 801d8b4:	602a      	str	r2, [r5, #0]
 801d8b6:	616b      	str	r3, [r5, #20]
 801d8b8:	69ab      	ldr	r3, [r5, #24]
 801d8ba:	3b01      	subs	r3, #1
 801d8bc:	61ab      	str	r3, [r5, #24]
 801d8be:	692b      	ldr	r3, [r5, #16]
 801d8c0:	440b      	add	r3, r1
 801d8c2:	68e9      	ldr	r1, [r5, #12]
 801d8c4:	428b      	cmp	r3, r1
 801d8c6:	612b      	str	r3, [r5, #16]
 801d8c8:	db15      	blt.n	801d8f6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63a>
 801d8ca:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 801d8ce:	3201      	adds	r2, #1
 801d8d0:	1a5b      	subs	r3, r3, r1
 801d8d2:	ee76 6a26 	vadd.f32	s13, s12, s13
 801d8d6:	602a      	str	r2, [r5, #0]
 801d8d8:	612b      	str	r3, [r5, #16]
 801d8da:	edc5 6a07 	vstr	s13, [r5, #28]
 801d8de:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 801d8e2:	ee36 7a87 	vadd.f32	s14, s13, s14
 801d8e6:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 801d8ea:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 801d8ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 801d8f2:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 801d8f6:	3f01      	subs	r7, #1
 801d8f8:	e757      	b.n	801d7aa <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4ee>
 801d8fa:	ad39      	add	r5, sp, #228	; 0xe4
 801d8fc:	ac19      	add	r4, sp, #100	; 0x64
 801d8fe:	e72d      	b.n	801d75c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4a0>
 801d900:	4613      	mov	r3, r2
 801d902:	e744      	b.n	801d78e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d2>
 801d904:	4613      	mov	r3, r2
 801d906:	9e3b      	ldr	r6, [sp, #236]	; 0xec
 801d908:	469e      	mov	lr, r3
 801d90a:	f8dd c0f8 	ldr.w	ip, [sp, #248]	; 0xf8
 801d90e:	461f      	mov	r7, r3
 801d910:	ed9d 7a43 	vldr	s14, [sp, #268]	; 0x10c
 801d914:	f04f 0900 	mov.w	r9, #0
 801d918:	eddd 4a44 	vldr	s9, [sp, #272]	; 0x110
 801d91c:	eddd 7a46 	vldr	s15, [sp, #280]	; 0x118
 801d920:	ed9d 4a47 	vldr	s8, [sp, #284]	; 0x11c
 801d924:	eddd 6a40 	vldr	s13, [sp, #256]	; 0x100
 801d928:	eddd 3a41 	vldr	s7, [sp, #260]	; 0x104
 801d92c:	993d      	ldr	r1, [sp, #244]	; 0xf4
 801d92e:	f8dd 80f0 	ldr.w	r8, [sp, #240]	; 0xf0
 801d932:	ed9d 5a42 	vldr	s10, [sp, #264]	; 0x108
 801d936:	eddd 5a45 	vldr	s11, [sp, #276]	; 0x114
 801d93a:	ed9d 6a48 	vldr	s12, [sp, #288]	; 0x120
 801d93e:	960e      	str	r6, [sp, #56]	; 0x38
 801d940:	e9dd 0a39 	ldrd	r0, sl, [sp, #228]	; 0xe4
 801d944:	2f00      	cmp	r7, #0
 801d946:	d146      	bne.n	801d9d6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x71a>
 801d948:	449c      	add	ip, r3
 801d94a:	1ad7      	subs	r7, r2, r3
 801d94c:	f1b9 0f00 	cmp.w	r9, #0
 801d950:	d009      	beq.n	801d966 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6aa>
 801d952:	9039      	str	r0, [sp, #228]	; 0xe4
 801d954:	913d      	str	r1, [sp, #244]	; 0xf4
 801d956:	edcd 6a40 	vstr	s13, [sp, #256]	; 0x100
 801d95a:	ed8d 7a43 	vstr	s14, [sp, #268]	; 0x10c
 801d95e:	edcd 7a46 	vstr	s15, [sp, #280]	; 0x118
 801d962:	e9cd c73e 	strd	ip, r7, [sp, #248]	; 0xf8
 801d966:	991b      	ldr	r1, [sp, #108]	; 0x6c
 801d968:	f04f 0800 	mov.w	r8, #0
 801d96c:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 801d970:	910e      	str	r1, [sp, #56]	; 0x38
 801d972:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 801d976:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 801d97a:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 801d97e:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 801d982:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 801d986:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 801d98a:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 801d98e:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 801d992:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 801d996:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 801d99a:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 801d99e:	f1be 0f00 	cmp.w	lr, #0
 801d9a2:	d030      	beq.n	801da06 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x74a>
 801d9a4:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 801d9a6:	4450      	add	r0, sl
 801d9a8:	ee76 6aa4 	vadd.f32	s13, s13, s9
 801d9ac:	4431      	add	r1, r6
 801d9ae:	ee37 7a04 	vadd.f32	s14, s14, s8
 801d9b2:	ee77 7aa3 	vadd.f32	s15, s15, s7
 801d9b6:	4549      	cmp	r1, r9
 801d9b8:	db08      	blt.n	801d9cc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x710>
 801d9ba:	ee77 7a85 	vadd.f32	s15, s15, s10
 801d9be:	3001      	adds	r0, #1
 801d9c0:	ee76 6aa5 	vadd.f32	s13, s13, s11
 801d9c4:	eba1 0109 	sub.w	r1, r1, r9
 801d9c8:	ee37 7a06 	vadd.f32	s14, s14, s12
 801d9cc:	f10e 3eff 	add.w	lr, lr, #4294967295
 801d9d0:	f04f 0801 	mov.w	r8, #1
 801d9d4:	e7e3      	b.n	801d99e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6e2>
 801d9d6:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 801d9d8:	4450      	add	r0, sl
 801d9da:	ee37 7a24 	vadd.f32	s14, s14, s9
 801d9de:	4431      	add	r1, r6
 801d9e0:	ee77 7a84 	vadd.f32	s15, s15, s8
 801d9e4:	ee76 6aa3 	vadd.f32	s13, s13, s7
 801d9e8:	4541      	cmp	r1, r8
 801d9ea:	db08      	blt.n	801d9fe <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x742>
 801d9ec:	ee76 6a85 	vadd.f32	s13, s13, s10
 801d9f0:	3001      	adds	r0, #1
 801d9f2:	ee37 7a25 	vadd.f32	s14, s14, s11
 801d9f6:	eba1 0108 	sub.w	r1, r1, r8
 801d9fa:	ee77 7a86 	vadd.f32	s15, s15, s12
 801d9fe:	3f01      	subs	r7, #1
 801da00:	f04f 0901 	mov.w	r9, #1
 801da04:	e79e      	b.n	801d944 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x688>
 801da06:	449c      	add	ip, r3
 801da08:	1aff      	subs	r7, r7, r3
 801da0a:	f1b8 0f00 	cmp.w	r8, #0
 801da0e:	d009      	beq.n	801da24 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x768>
 801da10:	9019      	str	r0, [sp, #100]	; 0x64
 801da12:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 801da16:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 801da1a:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 801da1e:	911d      	str	r1, [sp, #116]	; 0x74
 801da20:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 801da24:	1ad2      	subs	r2, r2, r3
 801da26:	e6b5      	b.n	801d794 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 801da28:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801da2a:	681b      	ldr	r3, [r3, #0]
 801da2c:	b923      	cbnz	r3, 801da38 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801da2e:	4b04      	ldr	r3, [pc, #16]	; (801da40 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x784>)
 801da30:	6818      	ldr	r0, [r3, #0]
 801da32:	6803      	ldr	r3, [r0, #0]
 801da34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801da36:	4798      	blx	r3
 801da38:	b05b      	add	sp, #364	; 0x16c
 801da3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801da3e:	bf00      	nop
 801da40:	2400c8bc 	.word	0x2400c8bc

0801da44 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>:
 801da44:	b570      	push	{r4, r5, r6, lr}
 801da46:	4604      	mov	r4, r0
 801da48:	2500      	movs	r5, #0
 801da4a:	9804      	ldr	r0, [sp, #16]
 801da4c:	7223      	strb	r3, [r4, #8]
 801da4e:	f89d 3014 	ldrb.w	r3, [sp, #20]
 801da52:	8025      	strh	r5, [r4, #0]
 801da54:	6061      	str	r1, [r4, #4]
 801da56:	7263      	strb	r3, [r4, #9]
 801da58:	60e0      	str	r0, [r4, #12]
 801da5a:	8222      	strh	r2, [r4, #16]
 801da5c:	8265      	strh	r5, [r4, #18]
 801da5e:	82a5      	strh	r5, [r4, #20]
 801da60:	82e5      	strh	r5, [r4, #22]
 801da62:	8325      	strh	r5, [r4, #24]
 801da64:	8365      	strh	r5, [r4, #26]
 801da66:	83a5      	strh	r5, [r4, #28]
 801da68:	77a5      	strb	r5, [r4, #30]
 801da6a:	6803      	ldr	r3, [r0, #0]
 801da6c:	695b      	ldr	r3, [r3, #20]
 801da6e:	4798      	blx	r3
 801da70:	4606      	mov	r6, r0
 801da72:	b1f8      	cbz	r0, 801dab4 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x70>
 801da74:	68e0      	ldr	r0, [r4, #12]
 801da76:	4631      	mov	r1, r6
 801da78:	6803      	ldr	r3, [r0, #0]
 801da7a:	68db      	ldr	r3, [r3, #12]
 801da7c:	4798      	blx	r3
 801da7e:	7b43      	ldrb	r3, [r0, #13]
 801da80:	7a82      	ldrb	r2, [r0, #10]
 801da82:	4605      	mov	r5, r0
 801da84:	005b      	lsls	r3, r3, #1
 801da86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801da8a:	4313      	orrs	r3, r2
 801da8c:	83a3      	strh	r3, [r4, #28]
 801da8e:	7a63      	ldrb	r3, [r4, #9]
 801da90:	2b04      	cmp	r3, #4
 801da92:	d10f      	bne.n	801dab4 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x70>
 801da94:	68e0      	ldr	r0, [r4, #12]
 801da96:	462a      	mov	r2, r5
 801da98:	4631      	mov	r1, r6
 801da9a:	6803      	ldr	r3, [r0, #0]
 801da9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801da9e:	4798      	blx	r3
 801daa0:	7b6b      	ldrb	r3, [r5, #13]
 801daa2:	005b      	lsls	r3, r3, #1
 801daa4:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801daa8:	7aab      	ldrb	r3, [r5, #10]
 801daaa:	4313      	orrs	r3, r2
 801daac:	4418      	add	r0, r3
 801daae:	8ba3      	ldrh	r3, [r4, #28]
 801dab0:	4418      	add	r0, r3
 801dab2:	83a0      	strh	r0, [r4, #28]
 801dab4:	4620      	mov	r0, r4
 801dab6:	bd70      	pop	{r4, r5, r6, pc}

0801dab8 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>:
 801dab8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dabc:	2400      	movs	r4, #0
 801dabe:	b085      	sub	sp, #20
 801dac0:	4681      	mov	r9, r0
 801dac2:	4688      	mov	r8, r1
 801dac4:	4692      	mov	sl, r2
 801dac6:	469b      	mov	fp, r3
 801dac8:	4627      	mov	r7, r4
 801daca:	4625      	mov	r5, r4
 801dacc:	4626      	mov	r6, r4
 801dace:	4554      	cmp	r4, sl
 801dad0:	da2a      	bge.n	801db28 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 801dad2:	2300      	movs	r3, #0
 801dad4:	9303      	str	r3, [sp, #12]
 801dad6:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801dada:	429d      	cmp	r5, r3
 801dadc:	d004      	beq.n	801dae8 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x30>
 801dade:	f242 030b 	movw	r3, #8203	; 0x200b
 801dae2:	429d      	cmp	r5, r3
 801dae4:	bf18      	it	ne
 801dae6:	462f      	movne	r7, r5
 801dae8:	ab03      	add	r3, sp, #12
 801daea:	4642      	mov	r2, r8
 801daec:	4659      	mov	r1, fp
 801daee:	4648      	mov	r0, r9
 801daf0:	f002 ff82 	bl	80209f8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801daf4:	4605      	mov	r5, r0
 801daf6:	b1b8      	cbz	r0, 801db28 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 801daf8:	280a      	cmp	r0, #10
 801dafa:	d015      	beq.n	801db28 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 801dafc:	9a03      	ldr	r2, [sp, #12]
 801dafe:	b18a      	cbz	r2, 801db24 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x6c>
 801db00:	7b50      	ldrb	r0, [r2, #13]
 801db02:	4639      	mov	r1, r7
 801db04:	7a93      	ldrb	r3, [r2, #10]
 801db06:	0040      	lsls	r0, r0, #1
 801db08:	8895      	ldrh	r5, [r2, #4]
 801db0a:	f400 7080 	and.w	r0, r0, #256	; 0x100
 801db0e:	4303      	orrs	r3, r0
 801db10:	4640      	mov	r0, r8
 801db12:	9301      	str	r3, [sp, #4]
 801db14:	f8d8 3000 	ldr.w	r3, [r8]
 801db18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801db1a:	4798      	blx	r3
 801db1c:	9b01      	ldr	r3, [sp, #4]
 801db1e:	4418      	add	r0, r3
 801db20:	4406      	add	r6, r0
 801db22:	b2b6      	uxth	r6, r6
 801db24:	3401      	adds	r4, #1
 801db26:	e7d2      	b.n	801dace <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x16>
 801db28:	4630      	mov	r0, r6
 801db2a:	b005      	add	sp, #20
 801db2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801db30 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>:
 801db30:	2a02      	cmp	r2, #2
 801db32:	b530      	push	{r4, r5, lr}
 801db34:	d011      	beq.n	801db5a <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x2a>
 801db36:	2a03      	cmp	r2, #3
 801db38:	d01c      	beq.n	801db74 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x44>
 801db3a:	2a01      	cmp	r2, #1
 801db3c:	d10c      	bne.n	801db58 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 801db3e:	888b      	ldrh	r3, [r1, #4]
 801db40:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 801db44:	8801      	ldrh	r1, [r0, #0]
 801db46:	1a9b      	subs	r3, r3, r2
 801db48:	8844      	ldrh	r4, [r0, #2]
 801db4a:	1a5b      	subs	r3, r3, r1
 801db4c:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 801db50:	8004      	strh	r4, [r0, #0]
 801db52:	8043      	strh	r3, [r0, #2]
 801db54:	8081      	strh	r1, [r0, #4]
 801db56:	80c2      	strh	r2, [r0, #6]
 801db58:	bd30      	pop	{r4, r5, pc}
 801db5a:	88cb      	ldrh	r3, [r1, #6]
 801db5c:	88c2      	ldrh	r2, [r0, #6]
 801db5e:	1a9b      	subs	r3, r3, r2
 801db60:	8842      	ldrh	r2, [r0, #2]
 801db62:	1a9b      	subs	r3, r3, r2
 801db64:	888a      	ldrh	r2, [r1, #4]
 801db66:	8881      	ldrh	r1, [r0, #4]
 801db68:	8043      	strh	r3, [r0, #2]
 801db6a:	1a52      	subs	r2, r2, r1
 801db6c:	8801      	ldrh	r1, [r0, #0]
 801db6e:	1a52      	subs	r2, r2, r1
 801db70:	8002      	strh	r2, [r0, #0]
 801db72:	e7f1      	b.n	801db58 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 801db74:	88cb      	ldrh	r3, [r1, #6]
 801db76:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 801db7a:	8841      	ldrh	r1, [r0, #2]
 801db7c:	1a9b      	subs	r3, r3, r2
 801db7e:	f9b0 5000 	ldrsh.w	r5, [r0]
 801db82:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 801db86:	1a5b      	subs	r3, r3, r1
 801db88:	8045      	strh	r5, [r0, #2]
 801db8a:	8082      	strh	r2, [r0, #4]
 801db8c:	8003      	strh	r3, [r0, #0]
 801db8e:	80c4      	strh	r4, [r0, #6]
 801db90:	e7e2      	b.n	801db58 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>

0801db92 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>:
 801db92:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801db96:	b09f      	sub	sp, #124	; 0x7c
 801db98:	9116      	str	r1, [sp, #88]	; 0x58
 801db9a:	9317      	str	r3, [sp, #92]	; 0x5c
 801db9c:	9929      	ldr	r1, [sp, #164]	; 0xa4
 801db9e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801dba0:	8809      	ldrh	r1, [r1, #0]
 801dba2:	889b      	ldrh	r3, [r3, #4]
 801dba4:	f8dd 80a8 	ldr.w	r8, [sp, #168]	; 0xa8
 801dba8:	440b      	add	r3, r1
 801dbaa:	9212      	str	r2, [sp, #72]	; 0x48
 801dbac:	f89d 20b8 	ldrb.w	r2, [sp, #184]	; 0xb8
 801dbb0:	b21b      	sxth	r3, r3
 801dbb2:	9011      	str	r0, [sp, #68]	; 0x44
 801dbb4:	f89d b0ac 	ldrb.w	fp, [sp, #172]	; 0xac
 801dbb8:	9310      	str	r3, [sp, #64]	; 0x40
 801dbba:	f8d8 3000 	ldr.w	r3, [r8]
 801dbbe:	7a59      	ldrb	r1, [r3, #9]
 801dbc0:	7a1b      	ldrb	r3, [r3, #8]
 801dbc2:	9114      	str	r1, [sp, #80]	; 0x50
 801dbc4:	9315      	str	r3, [sp, #84]	; 0x54
 801dbc6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801dbc8:	f9b3 5000 	ldrsh.w	r5, [r3]
 801dbcc:	2a00      	cmp	r2, #0
 801dbce:	d067      	beq.n	801dca0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x10e>
 801dbd0:	f898 3010 	ldrb.w	r3, [r8, #16]
 801dbd4:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801dbd6:	2b04      	cmp	r3, #4
 801dbd8:	bf14      	ite	ne
 801dbda:	2301      	movne	r3, #1
 801dbdc:	2302      	moveq	r3, #2
 801dbde:	4413      	add	r3, r2
 801dbe0:	f04f 0900 	mov.w	r9, #0
 801dbe4:	930f      	str	r3, [sp, #60]	; 0x3c
 801dbe6:	464c      	mov	r4, r9
 801dbe8:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 801dbec:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
 801dbf0:	e9dd 320e 	ldrd	r3, r2, [sp, #56]	; 0x38
 801dbf4:	4293      	cmp	r3, r2
 801dbf6:	f280 808c 	bge.w	801dd12 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x180>
 801dbfa:	2300      	movs	r3, #0
 801dbfc:	931c      	str	r3, [sp, #112]	; 0x70
 801dbfe:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801dc02:	429c      	cmp	r4, r3
 801dc04:	d006      	beq.n	801dc14 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x82>
 801dc06:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801dc08:	f242 020b 	movw	r2, #8203	; 0x200b
 801dc0c:	4294      	cmp	r4, r2
 801dc0e:	bf18      	it	ne
 801dc10:	4623      	movne	r3, r4
 801dc12:	930d      	str	r3, [sp, #52]	; 0x34
 801dc14:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801dc16:	992d      	ldr	r1, [sp, #180]	; 0xb4
 801dc18:	f8d8 2000 	ldr.w	r2, [r8]
 801dc1c:	428b      	cmp	r3, r1
 801dc1e:	db41      	blt.n	801dca4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x112>
 801dc20:	6813      	ldr	r3, [r2, #0]
 801dc22:	4610      	mov	r0, r2
 801dc24:	695b      	ldr	r3, [r3, #20]
 801dc26:	4798      	blx	r3
 801dc28:	4604      	mov	r4, r0
 801dc2a:	f8d8 0000 	ldr.w	r0, [r8]
 801dc2e:	aa1d      	add	r2, sp, #116	; 0x74
 801dc30:	4621      	mov	r1, r4
 801dc32:	6803      	ldr	r3, [r0, #0]
 801dc34:	689e      	ldr	r6, [r3, #8]
 801dc36:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
 801dc3a:	47b0      	blx	r6
 801dc3c:	901c      	str	r0, [sp, #112]	; 0x70
 801dc3e:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801dc42:	429c      	cmp	r4, r3
 801dc44:	f000 80ea 	beq.w	801de1c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 801dc48:	f242 030b 	movw	r3, #8203	; 0x200b
 801dc4c:	429c      	cmp	r4, r3
 801dc4e:	f000 80e5 	beq.w	801de1c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 801dc52:	2c00      	cmp	r4, #0
 801dc54:	f000 80f7 	beq.w	801de46 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b4>
 801dc58:	2c0a      	cmp	r4, #10
 801dc5a:	d060      	beq.n	801dd1e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18c>
 801dc5c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 801dc5e:	b36a      	cbz	r2, 801dcbc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x12a>
 801dc60:	8894      	ldrh	r4, [r2, #4]
 801dc62:	f1bb 0f00 	cmp.w	fp, #0
 801dc66:	d03b      	beq.n	801dce0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x14e>
 801dc68:	f892 900d 	ldrb.w	r9, [r2, #13]
 801dc6c:	f1bb 0f01 	cmp.w	fp, #1
 801dc70:	ea4f 0949 	mov.w	r9, r9, lsl #1
 801dc74:	f409 7380 	and.w	r3, r9, #256	; 0x100
 801dc78:	f892 900a 	ldrb.w	r9, [r2, #10]
 801dc7c:	ea49 0903 	orr.w	r9, r9, r3
 801dc80:	d134      	bne.n	801dcec <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x15a>
 801dc82:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801dc84:	eba5 0509 	sub.w	r5, r5, r9
 801dc88:	2b00      	cmp	r3, #0
 801dc8a:	d14f      	bne.n	801dd2c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19a>
 801dc8c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801dc8e:	eb09 0305 	add.w	r3, r9, r5
 801dc92:	4413      	add	r3, r2
 801dc94:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801dc96:	f9b2 2000 	ldrsh.w	r2, [r2]
 801dc9a:	4293      	cmp	r3, r2
 801dc9c:	da51      	bge.n	801dd42 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b0>
 801dc9e:	e038      	b.n	801dd12 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x180>
 801dca0:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801dca2:	e79d      	b.n	801dbe0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x4e>
 801dca4:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
 801dca8:	4659      	mov	r1, fp
 801dcaa:	982c      	ldr	r0, [sp, #176]	; 0xb0
 801dcac:	9301      	str	r3, [sp, #4]
 801dcae:	ab1d      	add	r3, sp, #116	; 0x74
 801dcb0:	9300      	str	r3, [sp, #0]
 801dcb2:	ab1c      	add	r3, sp, #112	; 0x70
 801dcb4:	f002 fef8 	bl	8020aa8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>
 801dcb8:	4604      	mov	r4, r0
 801dcba:	e7c0      	b.n	801dc3e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xac>
 801dcbc:	f8d8 0000 	ldr.w	r0, [r8]
 801dcc0:	6803      	ldr	r3, [r0, #0]
 801dcc2:	691b      	ldr	r3, [r3, #16]
 801dcc4:	4798      	blx	r3
 801dcc6:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801dcca:	4298      	cmp	r0, r3
 801dccc:	f000 80a6 	beq.w	801de1c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 801dcd0:	f242 030b 	movw	r3, #8203	; 0x200b
 801dcd4:	4298      	cmp	r0, r3
 801dcd6:	f000 80a1 	beq.w	801de1c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 801dcda:	f1bb 0f00 	cmp.w	fp, #0
 801dcde:	d100      	bne.n	801dce2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x150>
 801dce0:	444d      	add	r5, r9
 801dce2:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 801dce4:	2a00      	cmp	r2, #0
 801dce6:	d1bf      	bne.n	801dc68 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xd6>
 801dce8:	4691      	mov	r9, r2
 801dcea:	e097      	b.n	801de1c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 801dcec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801dcee:	2b00      	cmp	r3, #0
 801dcf0:	f000 80ab 	beq.w	801de4a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b8>
 801dcf4:	f1bb 0f00 	cmp.w	fp, #0
 801dcf8:	d118      	bne.n	801dd2c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19a>
 801dcfa:	f8d8 0000 	ldr.w	r0, [r8]
 801dcfe:	990d      	ldr	r1, [sp, #52]	; 0x34
 801dd00:	6803      	ldr	r3, [r0, #0]
 801dd02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801dd04:	4798      	blx	r3
 801dd06:	4405      	add	r5, r0
 801dd08:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801dd0a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801dd0c:	1aeb      	subs	r3, r5, r3
 801dd0e:	4293      	cmp	r3, r2
 801dd10:	dd17      	ble.n	801dd42 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b0>
 801dd12:	2c00      	cmp	r4, #0
 801dd14:	f000 8097 	beq.w	801de46 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b4>
 801dd18:	2c0a      	cmp	r4, #10
 801dd1a:	f040 8085 	bne.w	801de28 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x296>
 801dd1e:	240a      	movs	r4, #10
 801dd20:	fab4 f084 	clz	r0, r4
 801dd24:	0940      	lsrs	r0, r0, #5
 801dd26:	b01f      	add	sp, #124	; 0x7c
 801dd28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801dd2c:	f8d8 0000 	ldr.w	r0, [r8]
 801dd30:	990d      	ldr	r1, [sp, #52]	; 0x34
 801dd32:	6803      	ldr	r3, [r0, #0]
 801dd34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801dd36:	4798      	blx	r3
 801dd38:	f1bb 0f01 	cmp.w	fp, #1
 801dd3c:	eba5 0500 	sub.w	r5, r5, r0
 801dd40:	d0a4      	beq.n	801dc8c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xfa>
 801dd42:	981c      	ldr	r0, [sp, #112]	; 0x70
 801dd44:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801dd46:	f990 1009 	ldrsb.w	r1, [r0, #9]
 801dd4a:	f9b3 6000 	ldrsh.w	r6, [r3]
 801dd4e:	7b43      	ldrb	r3, [r0, #13]
 801dd50:	4429      	add	r1, r5
 801dd52:	015b      	lsls	r3, r3, #5
 801dd54:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801dd58:	7983      	ldrb	r3, [r0, #6]
 801dd5a:	4313      	orrs	r3, r2
 801dd5c:	440b      	add	r3, r1
 801dd5e:	42b3      	cmp	r3, r6
 801dd60:	db5c      	blt.n	801de1c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 801dd62:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801dd64:	4299      	cmp	r1, r3
 801dd66:	da59      	bge.n	801de1c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 801dd68:	f8d8 0000 	ldr.w	r0, [r8]
 801dd6c:	42ae      	cmp	r6, r5
 801dd6e:	6803      	ldr	r3, [r0, #0]
 801dd70:	bfcc      	ite	gt
 801dd72:	1b76      	subgt	r6, r6, r5
 801dd74:	2600      	movle	r6, #0
 801dd76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801dd78:	bfc8      	it	gt
 801dd7a:	b2b6      	uxthgt	r6, r6
 801dd7c:	4798      	blx	r3
 801dd7e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801dd80:	7b5a      	ldrb	r2, [r3, #13]
 801dd82:	00d1      	lsls	r1, r2, #3
 801dd84:	f401 7780 	and.w	r7, r1, #256	; 0x100
 801dd88:	7a19      	ldrb	r1, [r3, #8]
 801dd8a:	4339      	orrs	r1, r7
 801dd8c:	0657      	lsls	r7, r2, #25
 801dd8e:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 801dd90:	bf48      	it	mi
 801dd92:	f5a1 7100 	submi.w	r1, r1, #512	; 0x200
 801dd96:	4407      	add	r7, r0
 801dd98:	bf48      	it	mi
 801dd9a:	b209      	sxthmi	r1, r1
 801dd9c:	1a7f      	subs	r7, r7, r1
 801dd9e:	9929      	ldr	r1, [sp, #164]	; 0xa4
 801dda0:	b2bf      	uxth	r7, r7
 801dda2:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 801dda6:	fa0f fa87 	sxth.w	sl, r7
 801ddaa:	4551      	cmp	r1, sl
 801ddac:	dd3a      	ble.n	801de24 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 801ddae:	0112      	lsls	r2, r2, #4
 801ddb0:	79d8      	ldrb	r0, [r3, #7]
 801ddb2:	f402 7280 	and.w	r2, r2, #256	; 0x100
 801ddb6:	4302      	orrs	r2, r0
 801ddb8:	4492      	add	sl, r2
 801ddba:	4551      	cmp	r1, sl
 801ddbc:	dc2e      	bgt.n	801de1c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 801ddbe:	1bcf      	subs	r7, r1, r7
 801ddc0:	468a      	mov	sl, r1
 801ddc2:	b2bf      	uxth	r7, r7
 801ddc4:	9319      	str	r3, [sp, #100]	; 0x64
 801ddc6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801ddc8:	f8d8 0000 	ldr.w	r0, [r8]
 801ddcc:	681a      	ldr	r2, [r3, #0]
 801ddce:	6801      	ldr	r1, [r0, #0]
 801ddd0:	6c53      	ldr	r3, [r2, #68]	; 0x44
 801ddd2:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801ddd4:	9313      	str	r3, [sp, #76]	; 0x4c
 801ddd6:	9218      	str	r2, [sp, #96]	; 0x60
 801ddd8:	6b89      	ldr	r1, [r1, #56]	; 0x38
 801ddda:	4788      	blx	r1
 801dddc:	f898 1006 	ldrb.w	r1, [r8, #6]
 801dde0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801dde2:	910b      	str	r1, [sp, #44]	; 0x2c
 801dde4:	f898 100e 	ldrb.w	r1, [r8, #14]
 801dde8:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801ddea:	910a      	str	r1, [sp, #40]	; 0x28
 801ddec:	f89d 106f 	ldrb.w	r1, [sp, #111]	; 0x6f
 801ddf0:	9109      	str	r1, [sp, #36]	; 0x24
 801ddf2:	f8d8 1008 	ldr.w	r1, [r8, #8]
 801ddf6:	9305      	str	r3, [sp, #20]
 801ddf8:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801ddfa:	9206      	str	r2, [sp, #24]
 801ddfc:	e9cd a601 	strd	sl, r6, [sp, #4]
 801de00:	442e      	add	r6, r5
 801de02:	e9cd 7303 	strd	r7, r3, [sp, #12]
 801de06:	b236      	sxth	r6, r6
 801de08:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801de0a:	e9cd 0107 	strd	r0, r1, [sp, #28]
 801de0e:	9600      	str	r6, [sp, #0]
 801de10:	9916      	ldr	r1, [sp, #88]	; 0x58
 801de12:	681a      	ldr	r2, [r3, #0]
 801de14:	9811      	ldr	r0, [sp, #68]	; 0x44
 801de16:	685b      	ldr	r3, [r3, #4]
 801de18:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801de1a:	47b0      	blx	r6
 801de1c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801de1e:	3301      	adds	r3, #1
 801de20:	930e      	str	r3, [sp, #56]	; 0x38
 801de22:	e6e5      	b.n	801dbf0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x5e>
 801de24:	2700      	movs	r7, #0
 801de26:	e7cd      	b.n	801ddc4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x232>
 801de28:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 801de2a:	3501      	adds	r5, #1
 801de2c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801de2e:	429d      	cmp	r5, r3
 801de30:	f6bf af76 	bge.w	801dd20 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18e>
 801de34:	4659      	mov	r1, fp
 801de36:	982c      	ldr	r0, [sp, #176]	; 0xb0
 801de38:	f7ea f9b2 	bl	80081a0 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801de3c:	4604      	mov	r4, r0
 801de3e:	b110      	cbz	r0, 801de46 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b4>
 801de40:	280a      	cmp	r0, #10
 801de42:	d1f2      	bne.n	801de2a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x298>
 801de44:	e76b      	b.n	801dd1e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18c>
 801de46:	2400      	movs	r4, #0
 801de48:	e76a      	b.n	801dd20 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18e>
 801de4a:	f1bb 0f00 	cmp.w	fp, #0
 801de4e:	f43f af5b 	beq.w	801dd08 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x176>
 801de52:	e776      	b.n	801dd42 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b0>

0801de54 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>:
 801de54:	b530      	push	{r4, r5, lr}
 801de56:	8a44      	ldrh	r4, [r0, #18]
 801de58:	8ac5      	ldrh	r5, [r0, #22]
 801de5a:	82c3      	strh	r3, [r0, #22]
 801de5c:	442c      	add	r4, r5
 801de5e:	1ae4      	subs	r4, r4, r3
 801de60:	8b03      	ldrh	r3, [r0, #24]
 801de62:	8244      	strh	r4, [r0, #18]
 801de64:	8a84      	ldrh	r4, [r0, #20]
 801de66:	4422      	add	r2, r4
 801de68:	440c      	add	r4, r1
 801de6a:	1a59      	subs	r1, r3, r1
 801de6c:	8342      	strh	r2, [r0, #26]
 801de6e:	8284      	strh	r4, [r0, #20]
 801de70:	8301      	strh	r1, [r0, #24]
 801de72:	bd30      	pop	{r4, r5, pc}

0801de74 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>:
 801de74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801de78:	7a43      	ldrb	r3, [r0, #9]
 801de7a:	b087      	sub	sp, #28
 801de7c:	4604      	mov	r4, r0
 801de7e:	460f      	mov	r7, r1
 801de80:	1eda      	subs	r2, r3, #3
 801de82:	b2d2      	uxtb	r2, r2
 801de84:	2900      	cmp	r1, #0
 801de86:	d036      	beq.n	801def6 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x82>
 801de88:	2a01      	cmp	r2, #1
 801de8a:	d932      	bls.n	801def2 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x7e>
 801de8c:	1e58      	subs	r0, r3, #1
 801de8e:	f1d0 0b00 	rsbs	fp, r0, #0
 801de92:	eb4b 0b00 	adc.w	fp, fp, r0
 801de96:	1e99      	subs	r1, r3, #2
 801de98:	424b      	negs	r3, r1
 801de9a:	414b      	adcs	r3, r1
 801de9c:	9303      	str	r3, [sp, #12]
 801de9e:	2300      	movs	r3, #0
 801dea0:	e9cd 3301 	strd	r3, r3, [sp, #4]
 801dea4:	2500      	movs	r5, #0
 801dea6:	f242 0a0b 	movw	sl, #8203	; 0x200b
 801deaa:	46a9      	mov	r9, r5
 801deac:	8265      	strh	r5, [r4, #18]
 801deae:	82a5      	strh	r5, [r4, #20]
 801deb0:	2300      	movs	r3, #0
 801deb2:	9305      	str	r3, [sp, #20]
 801deb4:	8823      	ldrh	r3, [r4, #0]
 801deb6:	2b20      	cmp	r3, #32
 801deb8:	d02b      	beq.n	801df12 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x9e>
 801deba:	eba3 020a 	sub.w	r2, r3, sl
 801debe:	4256      	negs	r6, r2
 801dec0:	4156      	adcs	r6, r2
 801dec2:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 801dec6:	4293      	cmp	r3, r2
 801dec8:	d004      	beq.n	801ded4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x60>
 801deca:	4553      	cmp	r3, sl
 801decc:	bf16      	itet	ne
 801dece:	4699      	movne	r9, r3
 801ded0:	2601      	moveq	r6, #1
 801ded2:	2600      	movne	r6, #0
 801ded4:	ab05      	add	r3, sp, #20
 801ded6:	68e2      	ldr	r2, [r4, #12]
 801ded8:	7a21      	ldrb	r1, [r4, #8]
 801deda:	6860      	ldr	r0, [r4, #4]
 801dedc:	f002 fd8c 	bl	80209f8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801dee0:	8020      	strh	r0, [r4, #0]
 801dee2:	b9c8      	cbnz	r0, 801df18 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xa4>
 801dee4:	8b22      	ldrh	r2, [r4, #24]
 801dee6:	2300      	movs	r3, #0
 801dee8:	4611      	mov	r1, r2
 801deea:	4620      	mov	r0, r4
 801deec:	f7ff ffb2 	bl	801de54 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 801def0:	e066      	b.n	801dfc0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x14c>
 801def2:	468b      	mov	fp, r1
 801def4:	e7cf      	b.n	801de96 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x22>
 801def6:	3b01      	subs	r3, #1
 801def8:	2a01      	cmp	r2, #1
 801defa:	9103      	str	r1, [sp, #12]
 801defc:	468b      	mov	fp, r1
 801defe:	bf8c      	ite	hi
 801df00:	2200      	movhi	r2, #0
 801df02:	2201      	movls	r2, #1
 801df04:	2b01      	cmp	r3, #1
 801df06:	9202      	str	r2, [sp, #8]
 801df08:	bf8c      	ite	hi
 801df0a:	2300      	movhi	r3, #0
 801df0c:	2301      	movls	r3, #1
 801df0e:	9301      	str	r3, [sp, #4]
 801df10:	e7c8      	b.n	801dea4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x30>
 801df12:	4699      	mov	r9, r3
 801df14:	2601      	movs	r6, #1
 801df16:	e7dd      	b.n	801ded4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x60>
 801df18:	8ae3      	ldrh	r3, [r4, #22]
 801df1a:	280a      	cmp	r0, #10
 801df1c:	f103 0301 	add.w	r3, r3, #1
 801df20:	82e3      	strh	r3, [r4, #22]
 801df22:	d0df      	beq.n	801dee4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x70>
 801df24:	9a05      	ldr	r2, [sp, #20]
 801df26:	bb42      	cbnz	r2, 801df7a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x106>
 801df28:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801df2c:	4298      	cmp	r0, r3
 801df2e:	d001      	beq.n	801df34 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xc0>
 801df30:	4550      	cmp	r0, sl
 801df32:	d1bd      	bne.n	801deb0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801df34:	8823      	ldrh	r3, [r4, #0]
 801df36:	8b21      	ldrh	r1, [r4, #24]
 801df38:	2b20      	cmp	r3, #32
 801df3a:	d001      	beq.n	801df40 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xcc>
 801df3c:	4553      	cmp	r3, sl
 801df3e:	d131      	bne.n	801dfa4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x130>
 801df40:	2e00      	cmp	r6, #0
 801df42:	bf0a      	itet	eq
 801df44:	460d      	moveq	r5, r1
 801df46:	4630      	movne	r0, r6
 801df48:	2001      	moveq	r0, #1
 801df4a:	440a      	add	r2, r1
 801df4c:	8aa3      	ldrh	r3, [r4, #20]
 801df4e:	f8b4 c010 	ldrh.w	ip, [r4, #16]
 801df52:	b292      	uxth	r2, r2
 801df54:	8322      	strh	r2, [r4, #24]
 801df56:	4413      	add	r3, r2
 801df58:	2f00      	cmp	r7, #0
 801df5a:	d03a      	beq.n	801dfd2 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x15e>
 801df5c:	f1bb 0f00 	cmp.w	fp, #0
 801df60:	d102      	bne.n	801df68 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xf4>
 801df62:	9903      	ldr	r1, [sp, #12]
 801df64:	b301      	cbz	r1, 801dfa8 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x134>
 801df66:	b1f8      	cbz	r0, 801dfa8 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x134>
 801df68:	8ba1      	ldrh	r1, [r4, #28]
 801df6a:	4419      	add	r1, r3
 801df6c:	458c      	cmp	ip, r1
 801df6e:	da2a      	bge.n	801dfc6 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x152>
 801df70:	8a61      	ldrh	r1, [r4, #18]
 801df72:	b341      	cbz	r1, 801dfc6 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x152>
 801df74:	4563      	cmp	r3, ip
 801df76:	dd9b      	ble.n	801deb0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801df78:	e01c      	b.n	801dfb4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x140>
 801df7a:	8893      	ldrh	r3, [r2, #4]
 801df7c:	4649      	mov	r1, r9
 801df7e:	8023      	strh	r3, [r4, #0]
 801df80:	f892 800d 	ldrb.w	r8, [r2, #13]
 801df84:	ea4f 0848 	mov.w	r8, r8, lsl #1
 801df88:	f408 7080 	and.w	r0, r8, #256	; 0x100
 801df8c:	f892 800a 	ldrb.w	r8, [r2, #10]
 801df90:	ea48 0800 	orr.w	r8, r8, r0
 801df94:	68e0      	ldr	r0, [r4, #12]
 801df96:	6803      	ldr	r3, [r0, #0]
 801df98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801df9a:	4798      	blx	r3
 801df9c:	eb08 0200 	add.w	r2, r8, r0
 801dfa0:	b292      	uxth	r2, r2
 801dfa2:	e7c7      	b.n	801df34 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xc0>
 801dfa4:	2000      	movs	r0, #0
 801dfa6:	e7d0      	b.n	801df4a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xd6>
 801dfa8:	4563      	cmp	r3, ip
 801dfaa:	dd81      	ble.n	801deb0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801dfac:	8a63      	ldrh	r3, [r4, #18]
 801dfae:	2b00      	cmp	r3, #0
 801dfb0:	f43f af7e 	beq.w	801deb0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801dfb4:	2301      	movs	r3, #1
 801dfb6:	8ba2      	ldrh	r2, [r4, #28]
 801dfb8:	77a3      	strb	r3, [r4, #30]
 801dfba:	8b63      	ldrh	r3, [r4, #26]
 801dfbc:	4413      	add	r3, r2
 801dfbe:	8363      	strh	r3, [r4, #26]
 801dfc0:	b007      	add	sp, #28
 801dfc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801dfc6:	2300      	movs	r3, #0
 801dfc8:	4611      	mov	r1, r2
 801dfca:	4620      	mov	r0, r4
 801dfcc:	f7ff ff42 	bl	801de54 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 801dfd0:	e76e      	b.n	801deb0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801dfd2:	4563      	cmp	r3, ip
 801dfd4:	dd14      	ble.n	801e000 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x18c>
 801dfd6:	9b02      	ldr	r3, [sp, #8]
 801dfd8:	b113      	cbz	r3, 801dfe0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x16c>
 801dfda:	2301      	movs	r3, #1
 801dfdc:	460a      	mov	r2, r1
 801dfde:	e783      	b.n	801dee8 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x74>
 801dfe0:	9b01      	ldr	r3, [sp, #4]
 801dfe2:	2b00      	cmp	r3, #0
 801dfe4:	f43f af64 	beq.w	801deb0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801dfe8:	2800      	cmp	r0, #0
 801dfea:	f47f af61 	bne.w	801deb0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801dfee:	b116      	cbz	r6, 801dff6 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x182>
 801dff0:	2301      	movs	r3, #1
 801dff2:	462a      	mov	r2, r5
 801dff4:	e779      	b.n	801deea <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x76>
 801dff6:	8a63      	ldrh	r3, [r4, #18]
 801dff8:	2b00      	cmp	r3, #0
 801dffa:	f43f af59 	beq.w	801deb0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801dffe:	e7df      	b.n	801dfc0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x14c>
 801e000:	2800      	cmp	r0, #0
 801e002:	f47f af55 	bne.w	801deb0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801e006:	2e00      	cmp	r6, #0
 801e008:	f43f af52 	beq.w	801deb0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801e00c:	2301      	movs	r3, #1
 801e00e:	462a      	mov	r2, r5
 801e010:	e7db      	b.n	801dfca <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x156>

0801e012 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>:
 801e012:	b530      	push	{r4, r5, lr}
 801e014:	4605      	mov	r5, r0
 801e016:	b08b      	sub	sp, #44	; 0x2c
 801e018:	b191      	cbz	r1, 801e040 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x2e>
 801e01a:	2401      	movs	r4, #1
 801e01c:	e9cd 3100 	strd	r3, r1, [sp]
 801e020:	4613      	mov	r3, r2
 801e022:	4601      	mov	r1, r0
 801e024:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
 801e028:	a802      	add	r0, sp, #8
 801e02a:	f7ff fd0b 	bl	801da44 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
 801e02e:	2100      	movs	r1, #0
 801e030:	a802      	add	r0, sp, #8
 801e032:	f7ff ff1f 	bl	801de74 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 801e036:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801e03a:	b163      	cbz	r3, 801e056 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x44>
 801e03c:	3401      	adds	r4, #1
 801e03e:	e7f6      	b.n	801e02e <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x1c>
 801e040:	2401      	movs	r4, #1
 801e042:	f002 fdd3 	bl	8020bec <_ZN8touchgfx12TextProvider11getNextCharEv>
 801e046:	280a      	cmp	r0, #10
 801e048:	4628      	mov	r0, r5
 801e04a:	bf08      	it	eq
 801e04c:	3401      	addeq	r4, #1
 801e04e:	f002 fdcd 	bl	8020bec <_ZN8touchgfx12TextProvider11getNextCharEv>
 801e052:	2800      	cmp	r0, #0
 801e054:	d1f7      	bne.n	801e046 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x34>
 801e056:	b2a0      	uxth	r0, r4
 801e058:	b00b      	add	sp, #44	; 0x2c
 801e05a:	bd30      	pop	{r4, r5, pc}

0801e05c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>:
 801e05c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e060:	b0e5      	sub	sp, #404	; 0x194
 801e062:	4689      	mov	r9, r1
 801e064:	461c      	mov	r4, r3
 801e066:	f8dd a1b8 	ldr.w	sl, [sp, #440]	; 0x1b8
 801e06a:	900a      	str	r0, [sp, #40]	; 0x28
 801e06c:	f1ba 0f00 	cmp.w	sl, #0
 801e070:	f000 80b4 	beq.w	801e1dc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 801e074:	681b      	ldr	r3, [r3, #0]
 801e076:	2b00      	cmp	r3, #0
 801e078:	f000 80b0 	beq.w	801e1dc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 801e07c:	7ba3      	ldrb	r3, [r4, #14]
 801e07e:	2b00      	cmp	r3, #0
 801e080:	f000 80ac 	beq.w	801e1dc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 801e084:	f10d 0834 	add.w	r8, sp, #52	; 0x34
 801e088:	6810      	ldr	r0, [r2, #0]
 801e08a:	6851      	ldr	r1, [r2, #4]
 801e08c:	2500      	movs	r5, #0
 801e08e:	4643      	mov	r3, r8
 801e090:	f9b9 2004 	ldrsh.w	r2, [r9, #4]
 801e094:	950f      	str	r5, [sp, #60]	; 0x3c
 801e096:	af19      	add	r7, sp, #100	; 0x64
 801e098:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 801e09c:	79a2      	ldrb	r2, [r4, #6]
 801e09e:	c303      	stmia	r3!, {r0, r1}
 801e0a0:	f9b9 3006 	ldrsh.w	r3, [r9, #6]
 801e0a4:	a90f      	add	r1, sp, #60	; 0x3c
 801e0a6:	4640      	mov	r0, r8
 801e0a8:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 801e0ac:	f7ff fd40 	bl	801db30 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 801e0b0:	a90f      	add	r1, sp, #60	; 0x3c
 801e0b2:	79a2      	ldrb	r2, [r4, #6]
 801e0b4:	4608      	mov	r0, r1
 801e0b6:	f7ff fd3b 	bl	801db30 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 801e0ba:	4638      	mov	r0, r7
 801e0bc:	f002 f948 	bl	8020350 <_ZN8touchgfx12TextProviderC1Ev>
 801e0c0:	6820      	ldr	r0, [r4, #0]
 801e0c2:	6803      	ldr	r3, [r0, #0]
 801e0c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801e0c6:	4798      	blx	r3
 801e0c8:	4606      	mov	r6, r0
 801e0ca:	6820      	ldr	r0, [r4, #0]
 801e0cc:	6803      	ldr	r3, [r0, #0]
 801e0ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801e0d0:	4798      	blx	r3
 801e0d2:	4633      	mov	r3, r6
 801e0d4:	9000      	str	r0, [sp, #0]
 801e0d6:	4651      	mov	r1, sl
 801e0d8:	9a6f      	ldr	r2, [sp, #444]	; 0x1bc
 801e0da:	4638      	mov	r0, r7
 801e0dc:	f002 f98b 	bl	80203f6 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801e0e0:	7923      	ldrb	r3, [r4, #4]
 801e0e2:	6820      	ldr	r0, [r4, #0]
 801e0e4:	9308      	str	r3, [sp, #32]
 801e0e6:	6803      	ldr	r3, [r0, #0]
 801e0e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801e0ea:	4798      	blx	r3
 801e0ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e0f0:	181e      	adds	r6, r3, r0
 801e0f2:	42ae      	cmp	r6, r5
 801e0f4:	dd06      	ble.n	801e104 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xa8>
 801e0f6:	f9b8 2002 	ldrsh.w	r2, [r8, #2]
 801e0fa:	4282      	cmp	r2, r0
 801e0fc:	bfa4      	itt	ge
 801e0fe:	189d      	addge	r5, r3, r2
 801e100:	fb95 f5f6 	sdivge	r5, r5, r6
 801e104:	a832      	add	r0, sp, #200	; 0xc8
 801e106:	f002 f923 	bl	8020350 <_ZN8touchgfx12TextProviderC1Ev>
 801e10a:	7c23      	ldrb	r3, [r4, #16]
 801e10c:	b17b      	cbz	r3, 801e12e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xd2>
 801e10e:	6820      	ldr	r0, [r4, #0]
 801e110:	6803      	ldr	r3, [r0, #0]
 801e112:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801e114:	4798      	blx	r3
 801e116:	4683      	mov	fp, r0
 801e118:	6820      	ldr	r0, [r4, #0]
 801e11a:	6803      	ldr	r3, [r0, #0]
 801e11c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801e11e:	4798      	blx	r3
 801e120:	465b      	mov	r3, fp
 801e122:	9000      	str	r0, [sp, #0]
 801e124:	4651      	mov	r1, sl
 801e126:	9a6f      	ldr	r2, [sp, #444]	; 0x1bc
 801e128:	a832      	add	r0, sp, #200	; 0xc8
 801e12a:	f002 f964 	bl	80203f6 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801e12e:	7be1      	ldrb	r1, [r4, #15]
 801e130:	a811      	add	r0, sp, #68	; 0x44
 801e132:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 801e136:	7963      	ldrb	r3, [r4, #5]
 801e138:	1a52      	subs	r2, r2, r1
 801e13a:	7c21      	ldrb	r1, [r4, #16]
 801e13c:	9101      	str	r1, [sp, #4]
 801e13e:	b292      	uxth	r2, r2
 801e140:	6821      	ldr	r1, [r4, #0]
 801e142:	9100      	str	r1, [sp, #0]
 801e144:	a932      	add	r1, sp, #200	; 0xc8
 801e146:	f7ff fc7d 	bl	801da44 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
 801e14a:	7c23      	ldrb	r3, [r4, #16]
 801e14c:	b9bb      	cbnz	r3, 801e17e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x122>
 801e14e:	fa1f fa86 	uxth.w	sl, r6
 801e152:	2d00      	cmp	r5, #0
 801e154:	dd45      	ble.n	801e1e2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x186>
 801e156:	4638      	mov	r0, r7
 801e158:	f002 fd48 	bl	8020bec <_ZN8touchgfx12TextProvider11getNextCharEv>
 801e15c:	2800      	cmp	r0, #0
 801e15e:	d03d      	beq.n	801e1dc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 801e160:	280a      	cmp	r0, #10
 801e162:	d1f6      	bne.n	801e152 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf6>
 801e164:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 801e168:	3d01      	subs	r5, #1
 801e16a:	4453      	add	r3, sl
 801e16c:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 801e170:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
 801e174:	eba3 030a 	sub.w	r3, r3, sl
 801e178:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 801e17c:	e7e9      	b.n	801e152 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf6>
 801e17e:	0073      	lsls	r3, r6, #1
 801e180:	f64f 7bff 	movw	fp, #65535	; 0xffff
 801e184:	fa1f fa86 	uxth.w	sl, r6
 801e188:	9309      	str	r3, [sp, #36]	; 0x24
 801e18a:	2d00      	cmp	r5, #0
 801e18c:	dd29      	ble.n	801e1e2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x186>
 801e18e:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 801e192:	a811      	add	r0, sp, #68	; 0x44
 801e194:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e196:	428b      	cmp	r3, r1
 801e198:	bfd4      	ite	le
 801e19a:	2100      	movle	r1, #0
 801e19c:	2101      	movgt	r1, #1
 801e19e:	f7ff fe69 	bl	801de74 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 801e1a2:	f8bd 3056 	ldrh.w	r3, [sp, #86]	; 0x56
 801e1a6:	3b01      	subs	r3, #1
 801e1a8:	b29b      	uxth	r3, r3
 801e1aa:	455b      	cmp	r3, fp
 801e1ac:	930b      	str	r3, [sp, #44]	; 0x2c
 801e1ae:	d005      	beq.n	801e1bc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x160>
 801e1b0:	7961      	ldrb	r1, [r4, #5]
 801e1b2:	4638      	mov	r0, r7
 801e1b4:	f7e9 fff4 	bl	80081a0 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801e1b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801e1ba:	e7f4      	b.n	801e1a6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x14a>
 801e1bc:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 801e1c0:	3d01      	subs	r5, #1
 801e1c2:	4453      	add	r3, sl
 801e1c4:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 801e1c8:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
 801e1cc:	eba3 030a 	sub.w	r3, r3, sl
 801e1d0:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 801e1d4:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 801e1d8:	2b00      	cmp	r3, #0
 801e1da:	d1d6      	bne.n	801e18a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x12e>
 801e1dc:	b065      	add	sp, #404	; 0x194
 801e1de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e1e2:	ea4f 0a46 	mov.w	sl, r6, lsl #1
 801e1e6:	ad4b      	add	r5, sp, #300	; 0x12c
 801e1e8:	f04f 0b00 	mov.w	fp, #0
 801e1ec:	7c23      	ldrb	r3, [r4, #16]
 801e1ee:	2b00      	cmp	r3, #0
 801e1f0:	d067      	beq.n	801e2c2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x266>
 801e1f2:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 801e1f6:	a811      	add	r0, sp, #68	; 0x44
 801e1f8:	458a      	cmp	sl, r1
 801e1fa:	bfd4      	ite	le
 801e1fc:	2100      	movle	r1, #0
 801e1fe:	2101      	movgt	r1, #1
 801e200:	f7ff fe38 	bl	801de74 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 801e204:	9b08      	ldr	r3, [sp, #32]
 801e206:	2b00      	cmp	r3, #0
 801e208:	d056      	beq.n	801e2b8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x25c>
 801e20a:	7c23      	ldrb	r3, [r4, #16]
 801e20c:	2264      	movs	r2, #100	; 0x64
 801e20e:	4639      	mov	r1, r7
 801e210:	4628      	mov	r0, r5
 801e212:	9309      	str	r3, [sp, #36]	; 0x24
 801e214:	f00d fbae 	bl	802b974 <memcpy>
 801e218:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e21a:	2b00      	cmp	r3, #0
 801e21c:	d059      	beq.n	801e2d2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x276>
 801e21e:	f9bd 305e 	ldrsh.w	r3, [sp, #94]	; 0x5e
 801e222:	7922      	ldrb	r2, [r4, #4]
 801e224:	2a01      	cmp	r2, #1
 801e226:	d13d      	bne.n	801e2a4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x248>
 801e228:	f9bd 0040 	ldrsh.w	r0, [sp, #64]	; 0x40
 801e22c:	1ac0      	subs	r0, r0, r3
 801e22e:	2302      	movs	r3, #2
 801e230:	fb90 f0f3 	sdiv	r0, r0, r3
 801e234:	b200      	sxth	r0, r0
 801e236:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 801e23a:	4418      	add	r0, r3
 801e23c:	7c23      	ldrb	r3, [r4, #16]
 801e23e:	f8ad 012c 	strh.w	r0, [sp, #300]	; 0x12c
 801e242:	2b00      	cmp	r3, #0
 801e244:	d03a      	beq.n	801e2bc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x260>
 801e246:	f8bd 2056 	ldrh.w	r2, [sp, #86]	; 0x56
 801e24a:	f89d 1062 	ldrb.w	r1, [sp, #98]	; 0x62
 801e24e:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
 801e252:	9500      	str	r5, [sp, #0]
 801e254:	980a      	ldr	r0, [sp, #40]	; 0x28
 801e256:	e9cd 2105 	strd	r2, r1, [sp, #20]
 801e25a:	e9cd b703 	strd	fp, r7, [sp, #12]
 801e25e:	e9cd 8401 	strd	r8, r4, [sp, #4]
 801e262:	464a      	mov	r2, r9
 801e264:	2100      	movs	r1, #0
 801e266:	f7ff fc94 	bl	801db92 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>
 801e26a:	2800      	cmp	r0, #0
 801e26c:	d1b6      	bne.n	801e1dc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 801e26e:	b2b2      	uxth	r2, r6
 801e270:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 801e274:	4611      	mov	r1, r2
 801e276:	4413      	add	r3, r2
 801e278:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 801e27c:	b21b      	sxth	r3, r3
 801e27e:	1a52      	subs	r2, r2, r1
 801e280:	7c21      	ldrb	r1, [r4, #16]
 801e282:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 801e286:	b212      	sxth	r2, r2
 801e288:	f8ad 2042 	strh.w	r2, [sp, #66]	; 0x42
 801e28c:	b109      	cbz	r1, 801e292 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x236>
 801e28e:	42b2      	cmp	r2, r6
 801e290:	dba4      	blt.n	801e1dc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 801e292:	f8b8 2006 	ldrh.w	r2, [r8, #6]
 801e296:	f8b8 1002 	ldrh.w	r1, [r8, #2]
 801e29a:	440a      	add	r2, r1
 801e29c:	b212      	sxth	r2, r2
 801e29e:	4293      	cmp	r3, r2
 801e2a0:	dda4      	ble.n	801e1ec <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x190>
 801e2a2:	e79b      	b.n	801e1dc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 801e2a4:	2a02      	cmp	r2, #2
 801e2a6:	d105      	bne.n	801e2b4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x258>
 801e2a8:	7be2      	ldrb	r2, [r4, #15]
 801e2aa:	f8bd 0040 	ldrh.w	r0, [sp, #64]	; 0x40
 801e2ae:	1a80      	subs	r0, r0, r2
 801e2b0:	1ac0      	subs	r0, r0, r3
 801e2b2:	e7bf      	b.n	801e234 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1d8>
 801e2b4:	2000      	movs	r0, #0
 801e2b6:	e7be      	b.n	801e236 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1da>
 801e2b8:	7be0      	ldrb	r0, [r4, #15]
 801e2ba:	e7bc      	b.n	801e236 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1da>
 801e2bc:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801e2c0:	e7c3      	b.n	801e24a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1ee>
 801e2c2:	9b08      	ldr	r3, [sp, #32]
 801e2c4:	2b00      	cmp	r3, #0
 801e2c6:	d0f7      	beq.n	801e2b8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x25c>
 801e2c8:	2264      	movs	r2, #100	; 0x64
 801e2ca:	4639      	mov	r1, r7
 801e2cc:	4628      	mov	r0, r5
 801e2ce:	f00d fb51 	bl	802b974 <memcpy>
 801e2d2:	2300      	movs	r3, #0
 801e2d4:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801e2d8:	6821      	ldr	r1, [r4, #0]
 801e2da:	4628      	mov	r0, r5
 801e2dc:	f7ff fbec 	bl	801dab8 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 801e2e0:	b203      	sxth	r3, r0
 801e2e2:	e79e      	b.n	801e222 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1c6>

0801e2e4 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 801e2e4:	2b02      	cmp	r3, #2
 801e2e6:	b510      	push	{r4, lr}
 801e2e8:	f9b0 4000 	ldrsh.w	r4, [r0]
 801e2ec:	d00b      	beq.n	801e306 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x22>
 801e2ee:	2b03      	cmp	r3, #3
 801e2f0:	d00e      	beq.n	801e310 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x2c>
 801e2f2:	2b01      	cmp	r3, #1
 801e2f4:	d001      	beq.n	801e2fa <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x16>
 801e2f6:	1860      	adds	r0, r4, r1
 801e2f8:	bd10      	pop	{r4, pc}
 801e2fa:	8880      	ldrh	r0, [r0, #4]
 801e2fc:	4420      	add	r0, r4
 801e2fe:	b200      	sxth	r0, r0
 801e300:	1a80      	subs	r0, r0, r2
 801e302:	3801      	subs	r0, #1
 801e304:	e7f8      	b.n	801e2f8 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x14>
 801e306:	8880      	ldrh	r0, [r0, #4]
 801e308:	4420      	add	r0, r4
 801e30a:	b200      	sxth	r0, r0
 801e30c:	1a40      	subs	r0, r0, r1
 801e30e:	e7f8      	b.n	801e302 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 801e310:	18a0      	adds	r0, r4, r2
 801e312:	e7f1      	b.n	801e2f8 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x14>

0801e314 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 801e314:	2b02      	cmp	r3, #2
 801e316:	b510      	push	{r4, lr}
 801e318:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
 801e31c:	d006      	beq.n	801e32c <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x18>
 801e31e:	2b03      	cmp	r3, #3
 801e320:	d00a      	beq.n	801e338 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 801e322:	2b01      	cmp	r3, #1
 801e324:	bf14      	ite	ne
 801e326:	18a0      	addne	r0, r4, r2
 801e328:	1860      	addeq	r0, r4, r1
 801e32a:	bd10      	pop	{r4, pc}
 801e32c:	88c0      	ldrh	r0, [r0, #6]
 801e32e:	4420      	add	r0, r4
 801e330:	b200      	sxth	r0, r0
 801e332:	1a80      	subs	r0, r0, r2
 801e334:	3801      	subs	r0, #1
 801e336:	e7f8      	b.n	801e32a <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x16>
 801e338:	88c0      	ldrh	r0, [r0, #6]
 801e33a:	4420      	add	r0, r4
 801e33c:	b200      	sxth	r0, r0
 801e33e:	1a40      	subs	r0, r0, r1
 801e340:	e7f8      	b.n	801e334 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x20>
	...

0801e344 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 801e344:	4b01      	ldr	r3, [pc, #4]	; (801e34c <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 801e346:	2200      	movs	r2, #0
 801e348:	601a      	str	r2, [r3, #0]
 801e34a:	4770      	bx	lr
 801e34c:	2400c8e4 	.word	0x2400c8e4

0801e350 <_ZN8touchgfx16TouchCalibration4clzuEm>:
 801e350:	4603      	mov	r3, r0
 801e352:	b1c8      	cbz	r0, 801e388 <_ZN8touchgfx16TouchCalibration4clzuEm+0x38>
 801e354:	0c02      	lsrs	r2, r0, #16
 801e356:	0412      	lsls	r2, r2, #16
 801e358:	b9a2      	cbnz	r2, 801e384 <_ZN8touchgfx16TouchCalibration4clzuEm+0x34>
 801e35a:	0403      	lsls	r3, r0, #16
 801e35c:	2010      	movs	r0, #16
 801e35e:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 801e362:	bf04      	itt	eq
 801e364:	021b      	lsleq	r3, r3, #8
 801e366:	3008      	addeq	r0, #8
 801e368:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 801e36c:	bf04      	itt	eq
 801e36e:	011b      	lsleq	r3, r3, #4
 801e370:	3004      	addeq	r0, #4
 801e372:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 801e376:	bf04      	itt	eq
 801e378:	009b      	lsleq	r3, r3, #2
 801e37a:	3002      	addeq	r0, #2
 801e37c:	2b00      	cmp	r3, #0
 801e37e:	db04      	blt.n	801e38a <_ZN8touchgfx16TouchCalibration4clzuEm+0x3a>
 801e380:	3001      	adds	r0, #1
 801e382:	4770      	bx	lr
 801e384:	2000      	movs	r0, #0
 801e386:	e7ea      	b.n	801e35e <_ZN8touchgfx16TouchCalibration4clzuEm+0xe>
 801e388:	2020      	movs	r0, #32
 801e38a:	4770      	bx	lr

0801e38c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>:
 801e38c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e390:	b087      	sub	sp, #28
 801e392:	4681      	mov	r9, r0
 801e394:	4698      	mov	r8, r3
 801e396:	4610      	mov	r0, r2
 801e398:	460d      	mov	r5, r1
 801e39a:	e9dd 4710 	ldrd	r4, r7, [sp, #64]	; 0x40
 801e39e:	b981      	cbnz	r1, 801e3c2 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x36>
 801e3a0:	b14b      	cbz	r3, 801e3b6 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x2a>
 801e3a2:	460b      	mov	r3, r1
 801e3a4:	464a      	mov	r2, r9
 801e3a6:	4641      	mov	r1, r8
 801e3a8:	e9cd 4700 	strd	r4, r7, [sp]
 801e3ac:	f7ff ffee 	bl	801e38c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801e3b0:	b007      	add	sp, #28
 801e3b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e3b6:	f04f 33ff 	mov.w	r3, #4294967295
 801e3ba:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 801e3be:	603b      	str	r3, [r7, #0]
 801e3c0:	e7f6      	b.n	801e3b0 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 801e3c2:	fa32 fa01 	lsrs.w	sl, r2, r1
 801e3c6:	d107      	bne.n	801e3d8 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x4c>
 801e3c8:	fb09 f602 	mul.w	r6, r9, r2
 801e3cc:	fbb6 f0f4 	udiv	r0, r6, r4
 801e3d0:	fb04 6610 	mls	r6, r4, r0, r6
 801e3d4:	603e      	str	r6, [r7, #0]
 801e3d6:	e7eb      	b.n	801e3b0 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 801e3d8:	2601      	movs	r6, #1
 801e3da:	fa09 fb01 	lsl.w	fp, r9, r1
 801e3de:	408e      	lsls	r6, r1
 801e3e0:	fbbb f3f4 	udiv	r3, fp, r4
 801e3e4:	3e01      	subs	r6, #1
 801e3e6:	9302      	str	r3, [sp, #8]
 801e3e8:	fb0a f303 	mul.w	r3, sl, r3
 801e3ec:	4016      	ands	r6, r2
 801e3ee:	9303      	str	r3, [sp, #12]
 801e3f0:	4630      	mov	r0, r6
 801e3f2:	f7ff ffad 	bl	801e350 <_ZN8touchgfx16TouchCalibration4clzuEm>
 801e3f6:	464a      	mov	r2, r9
 801e3f8:	460b      	mov	r3, r1
 801e3fa:	4601      	mov	r1, r0
 801e3fc:	4630      	mov	r0, r6
 801e3fe:	e9cd 4700 	strd	r4, r7, [sp]
 801e402:	f7ff ffc3 	bl	801e38c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801e406:	9b02      	ldr	r3, [sp, #8]
 801e408:	4606      	mov	r6, r0
 801e40a:	eb05 0108 	add.w	r1, r5, r8
 801e40e:	fb04 bb13 	mls	fp, r4, r3, fp
 801e412:	4658      	mov	r0, fp
 801e414:	f7ff ff9c 	bl	801e350 <_ZN8touchgfx16TouchCalibration4clzuEm>
 801e418:	ab05      	add	r3, sp, #20
 801e41a:	465a      	mov	r2, fp
 801e41c:	e9cd 4300 	strd	r4, r3, [sp]
 801e420:	4603      	mov	r3, r0
 801e422:	4650      	mov	r0, sl
 801e424:	f7ff ffb2 	bl	801e38c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801e428:	6839      	ldr	r1, [r7, #0]
 801e42a:	9a05      	ldr	r2, [sp, #20]
 801e42c:	9b03      	ldr	r3, [sp, #12]
 801e42e:	4411      	add	r1, r2
 801e430:	fbb1 f2f4 	udiv	r2, r1, r4
 801e434:	18d3      	adds	r3, r2, r3
 801e436:	fb04 1412 	mls	r4, r4, r2, r1
 801e43a:	441e      	add	r6, r3
 801e43c:	603c      	str	r4, [r7, #0]
 801e43e:	4430      	add	r0, r6
 801e440:	e7b6      	b.n	801e3b0 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>

0801e442 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>:
 801e442:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801e446:	b085      	sub	sp, #20
 801e448:	f1b0 0900 	subs.w	r9, r0, #0
 801e44c:	461d      	mov	r5, r3
 801e44e:	4617      	mov	r7, r2
 801e450:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801e452:	bfbb      	ittet	lt
 801e454:	f1c9 0900 	rsblt	r9, r9, #0
 801e458:	f04f 36ff 	movlt.w	r6, #4294967295
 801e45c:	2601      	movge	r6, #1
 801e45e:	6823      	ldrlt	r3, [r4, #0]
 801e460:	bfbc      	itt	lt
 801e462:	425b      	neglt	r3, r3
 801e464:	6023      	strlt	r3, [r4, #0]
 801e466:	2a00      	cmp	r2, #0
 801e468:	da04      	bge.n	801e474 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x32>
 801e46a:	6823      	ldr	r3, [r4, #0]
 801e46c:	4257      	negs	r7, r2
 801e46e:	4276      	negs	r6, r6
 801e470:	425b      	negs	r3, r3
 801e472:	6023      	str	r3, [r4, #0]
 801e474:	2d00      	cmp	r5, #0
 801e476:	4638      	mov	r0, r7
 801e478:	bfba      	itte	lt
 801e47a:	426d      	neglt	r5, r5
 801e47c:	f04f 38ff 	movlt.w	r8, #4294967295
 801e480:	f04f 0801 	movge.w	r8, #1
 801e484:	f7ff ff64 	bl	801e350 <_ZN8touchgfx16TouchCalibration4clzuEm>
 801e488:	ab03      	add	r3, sp, #12
 801e48a:	463a      	mov	r2, r7
 801e48c:	e9cd 5300 	strd	r5, r3, [sp]
 801e490:	4603      	mov	r3, r0
 801e492:	4648      	mov	r0, r9
 801e494:	f7ff ff7a 	bl	801e38c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801e498:	6823      	ldr	r3, [r4, #0]
 801e49a:	9a03      	ldr	r2, [sp, #12]
 801e49c:	4546      	cmp	r6, r8
 801e49e:	441a      	add	r2, r3
 801e4a0:	fb92 f3f5 	sdiv	r3, r2, r5
 801e4a4:	4418      	add	r0, r3
 801e4a6:	fb05 2313 	mls	r3, r5, r3, r2
 801e4aa:	bf18      	it	ne
 801e4ac:	4240      	negne	r0, r0
 801e4ae:	1c72      	adds	r2, r6, #1
 801e4b0:	6023      	str	r3, [r4, #0]
 801e4b2:	d105      	bne.n	801e4c0 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7e>
 801e4b4:	2b00      	cmp	r3, #0
 801e4b6:	f1c3 0200 	rsb	r2, r3, #0
 801e4ba:	db0b      	blt.n	801e4d4 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x92>
 801e4bc:	6022      	str	r2, [r4, #0]
 801e4be:	e006      	b.n	801e4ce <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 801e4c0:	2e01      	cmp	r6, #1
 801e4c2:	d104      	bne.n	801e4ce <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 801e4c4:	2b00      	cmp	r3, #0
 801e4c6:	da02      	bge.n	801e4ce <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 801e4c8:	442b      	add	r3, r5
 801e4ca:	3801      	subs	r0, #1
 801e4cc:	6023      	str	r3, [r4, #0]
 801e4ce:	b005      	add	sp, #20
 801e4d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801e4d4:	3801      	subs	r0, #1
 801e4d6:	1b52      	subs	r2, r2, r5
 801e4d8:	e7f0      	b.n	801e4bc <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7a>
	...

0801e4dc <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 801e4dc:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 801e4e0:	4c1c      	ldr	r4, [pc, #112]	; (801e554 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x78>)
 801e4e2:	4605      	mov	r5, r0
 801e4e4:	6807      	ldr	r7, [r0, #0]
 801e4e6:	69a3      	ldr	r3, [r4, #24]
 801e4e8:	b92b      	cbnz	r3, 801e4f6 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1a>
 801e4ea:	6840      	ldr	r0, [r0, #4]
 801e4ec:	e9c5 7000 	strd	r7, r0, [r5]
 801e4f0:	b004      	add	sp, #16
 801e4f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e4f6:	f04f 0802 	mov.w	r8, #2
 801e4fa:	68a2      	ldr	r2, [r4, #8]
 801e4fc:	ae04      	add	r6, sp, #16
 801e4fe:	6820      	ldr	r0, [r4, #0]
 801e500:	fb93 f1f8 	sdiv	r1, r3, r8
 801e504:	440a      	add	r2, r1
 801e506:	69e1      	ldr	r1, [r4, #28]
 801e508:	f846 2d04 	str.w	r2, [r6, #-4]!
 801e50c:	463a      	mov	r2, r7
 801e50e:	9600      	str	r6, [sp, #0]
 801e510:	f7ff ff97 	bl	801e442 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801e514:	69a3      	ldr	r3, [r4, #24]
 801e516:	4607      	mov	r7, r0
 801e518:	686a      	ldr	r2, [r5, #4]
 801e51a:	6a21      	ldr	r1, [r4, #32]
 801e51c:	9600      	str	r6, [sp, #0]
 801e51e:	6860      	ldr	r0, [r4, #4]
 801e520:	f7ff ff8f 	bl	801e442 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801e524:	69a3      	ldr	r3, [r4, #24]
 801e526:	6962      	ldr	r2, [r4, #20]
 801e528:	4407      	add	r7, r0
 801e52a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801e52c:	9600      	str	r6, [sp, #0]
 801e52e:	68e0      	ldr	r0, [r4, #12]
 801e530:	fb93 f8f8 	sdiv	r8, r3, r8
 801e534:	4442      	add	r2, r8
 801e536:	9203      	str	r2, [sp, #12]
 801e538:	682a      	ldr	r2, [r5, #0]
 801e53a:	f7ff ff82 	bl	801e442 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801e53e:	4680      	mov	r8, r0
 801e540:	9600      	str	r6, [sp, #0]
 801e542:	69a3      	ldr	r3, [r4, #24]
 801e544:	686a      	ldr	r2, [r5, #4]
 801e546:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 801e548:	6920      	ldr	r0, [r4, #16]
 801e54a:	f7ff ff7a 	bl	801e442 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801e54e:	4440      	add	r0, r8
 801e550:	e7cc      	b.n	801e4ec <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x10>
 801e552:	bf00      	nop
 801e554:	2400c8e8 	.word	0x2400c8e8

0801e558 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 801e558:	4b07      	ldr	r3, [pc, #28]	; (801e578 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x20>)
 801e55a:	781b      	ldrb	r3, [r3, #0]
 801e55c:	2b01      	cmp	r3, #1
 801e55e:	d109      	bne.n	801e574 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x1c>
 801e560:	f9b1 3000 	ldrsh.w	r3, [r1]
 801e564:	f9b0 2000 	ldrsh.w	r2, [r0]
 801e568:	8003      	strh	r3, [r0, #0]
 801e56a:	4b04      	ldr	r3, [pc, #16]	; (801e57c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 801e56c:	881b      	ldrh	r3, [r3, #0]
 801e56e:	3b01      	subs	r3, #1
 801e570:	1a9b      	subs	r3, r3, r2
 801e572:	800b      	strh	r3, [r1, #0]
 801e574:	4770      	bx	lr
 801e576:	bf00      	nop
 801e578:	2400c8b4 	.word	0x2400c8b4
 801e57c:	2400c8b8 	.word	0x2400c8b8

0801e580 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 801e580:	4b07      	ldr	r3, [pc, #28]	; (801e5a0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 801e582:	b510      	push	{r4, lr}
 801e584:	781b      	ldrb	r3, [r3, #0]
 801e586:	2b01      	cmp	r3, #1
 801e588:	d108      	bne.n	801e59c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 801e58a:	4b06      	ldr	r3, [pc, #24]	; (801e5a4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 801e58c:	880c      	ldrh	r4, [r1, #0]
 801e58e:	881b      	ldrh	r3, [r3, #0]
 801e590:	f9b0 2000 	ldrsh.w	r2, [r0]
 801e594:	3b01      	subs	r3, #1
 801e596:	1b1b      	subs	r3, r3, r4
 801e598:	8003      	strh	r3, [r0, #0]
 801e59a:	800a      	strh	r2, [r1, #0]
 801e59c:	bd10      	pop	{r4, pc}
 801e59e:	bf00      	nop
 801e5a0:	2400c8b4 	.word	0x2400c8b4
 801e5a4:	2400c8b8 	.word	0x2400c8b8

0801e5a8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 801e5a8:	4b0a      	ldr	r3, [pc, #40]	; (801e5d4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 801e5aa:	b510      	push	{r4, lr}
 801e5ac:	781b      	ldrb	r3, [r3, #0]
 801e5ae:	2b01      	cmp	r3, #1
 801e5b0:	d10e      	bne.n	801e5d0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 801e5b2:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 801e5b6:	8843      	ldrh	r3, [r0, #2]
 801e5b8:	f9b0 4000 	ldrsh.w	r4, [r0]
 801e5bc:	18ca      	adds	r2, r1, r3
 801e5be:	4b06      	ldr	r3, [pc, #24]	; (801e5d8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 801e5c0:	8044      	strh	r4, [r0, #2]
 801e5c2:	881b      	ldrh	r3, [r3, #0]
 801e5c4:	1a9b      	subs	r3, r3, r2
 801e5c6:	8003      	strh	r3, [r0, #0]
 801e5c8:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801e5cc:	8081      	strh	r1, [r0, #4]
 801e5ce:	80c3      	strh	r3, [r0, #6]
 801e5d0:	bd10      	pop	{r4, pc}
 801e5d2:	bf00      	nop
 801e5d4:	2400c8b4 	.word	0x2400c8b4
 801e5d8:	2400c8b8 	.word	0x2400c8b8

0801e5dc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 801e5dc:	4b08      	ldr	r3, [pc, #32]	; (801e600 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x24>)
 801e5de:	781b      	ldrb	r3, [r3, #0]
 801e5e0:	2b01      	cmp	r3, #1
 801e5e2:	d10c      	bne.n	801e5fe <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x22>
 801e5e4:	8803      	ldrh	r3, [r0, #0]
 801e5e6:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 801e5ea:	8842      	ldrh	r2, [r0, #2]
 801e5ec:	8002      	strh	r2, [r0, #0]
 801e5ee:	185a      	adds	r2, r3, r1
 801e5f0:	4b04      	ldr	r3, [pc, #16]	; (801e604 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 801e5f2:	881b      	ldrh	r3, [r3, #0]
 801e5f4:	1a9b      	subs	r3, r3, r2
 801e5f6:	8043      	strh	r3, [r0, #2]
 801e5f8:	88c3      	ldrh	r3, [r0, #6]
 801e5fa:	80c1      	strh	r1, [r0, #6]
 801e5fc:	8083      	strh	r3, [r0, #4]
 801e5fe:	4770      	bx	lr
 801e600:	2400c8b4 	.word	0x2400c8b4
 801e604:	2400c8b8 	.word	0x2400c8b8

0801e608 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 801e608:	4b07      	ldr	r3, [pc, #28]	; (801e628 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 801e60a:	b510      	push	{r4, lr}
 801e60c:	781b      	ldrb	r3, [r3, #0]
 801e60e:	2b01      	cmp	r3, #1
 801e610:	d108      	bne.n	801e624 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 801e612:	f9b1 3000 	ldrsh.w	r3, [r1]
 801e616:	f9b0 4000 	ldrsh.w	r4, [r0]
 801e61a:	8003      	strh	r3, [r0, #0]
 801e61c:	8893      	ldrh	r3, [r2, #4]
 801e61e:	3b01      	subs	r3, #1
 801e620:	1b1b      	subs	r3, r3, r4
 801e622:	800b      	strh	r3, [r1, #0]
 801e624:	bd10      	pop	{r4, pc}
 801e626:	bf00      	nop
 801e628:	2400c8b4 	.word	0x2400c8b4

0801e62c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>:
 801e62c:	4b0b      	ldr	r3, [pc, #44]	; (801e65c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE+0x30>)
 801e62e:	781b      	ldrb	r3, [r3, #0]
 801e630:	2b01      	cmp	r3, #1
 801e632:	d111      	bne.n	801e658 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE+0x2c>
 801e634:	680b      	ldr	r3, [r1, #0]
 801e636:	ed90 7a00 	vldr	s14, [r0]
 801e63a:	6003      	str	r3, [r0, #0]
 801e63c:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
 801e640:	eddf 6a07 	vldr	s13, [pc, #28]	; 801e660 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE+0x34>
 801e644:	ee07 3a90 	vmov	s15, r3
 801e648:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801e64c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801e650:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801e654:	edc1 7a00 	vstr	s15, [r1]
 801e658:	4770      	bx	lr
 801e65a:	bf00      	nop
 801e65c:	2400c8b4 	.word	0x2400c8b4
 801e660:	38d1b717 	.word	0x38d1b717

0801e664 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 801e664:	4b0a      	ldr	r3, [pc, #40]	; (801e690 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 801e666:	460a      	mov	r2, r1
 801e668:	b510      	push	{r4, lr}
 801e66a:	781b      	ldrb	r3, [r3, #0]
 801e66c:	2b01      	cmp	r3, #1
 801e66e:	d10d      	bne.n	801e68c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 801e670:	8881      	ldrh	r1, [r0, #4]
 801e672:	8803      	ldrh	r3, [r0, #0]
 801e674:	440b      	add	r3, r1
 801e676:	4601      	mov	r1, r0
 801e678:	3b01      	subs	r3, #1
 801e67a:	f821 3b02 	strh.w	r3, [r1], #2
 801e67e:	f7ff ffc3 	bl	801e608 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 801e682:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801e686:	88c2      	ldrh	r2, [r0, #6]
 801e688:	80c3      	strh	r3, [r0, #6]
 801e68a:	8082      	strh	r2, [r0, #4]
 801e68c:	bd10      	pop	{r4, pc}
 801e68e:	bf00      	nop
 801e690:	2400c8b4 	.word	0x2400c8b4

0801e694 <_ZN8touchgfx11Application13requestRedrawEv>:
 801e694:	4b06      	ldr	r3, [pc, #24]	; (801e6b0 <_ZN8touchgfx11Application13requestRedrawEv+0x1c>)
 801e696:	2100      	movs	r1, #0
 801e698:	f9b3 2000 	ldrsh.w	r2, [r3]
 801e69c:	4b05      	ldr	r3, [pc, #20]	; (801e6b4 <_ZN8touchgfx11Application13requestRedrawEv+0x20>)
 801e69e:	f8c0 112c 	str.w	r1, [r0, #300]	; 0x12c
 801e6a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 801e6a6:	f8a0 2130 	strh.w	r2, [r0, #304]	; 0x130
 801e6aa:	f8a0 3132 	strh.w	r3, [r0, #306]	; 0x132
 801e6ae:	4770      	bx	lr
 801e6b0:	2400c8b0 	.word	0x2400c8b0
 801e6b4:	2400c8b2 	.word	0x2400c8b2

0801e6b8 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 801e6b8:	4b03      	ldr	r3, [pc, #12]	; (801e6c8 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 801e6ba:	6818      	ldr	r0, [r3, #0]
 801e6bc:	b110      	cbz	r0, 801e6c4 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 801e6be:	6803      	ldr	r3, [r0, #0]
 801e6c0:	699b      	ldr	r3, [r3, #24]
 801e6c2:	4718      	bx	r3
 801e6c4:	4770      	bx	lr
 801e6c6:	bf00      	nop
 801e6c8:	2400c918 	.word	0x2400c918

0801e6cc <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 801e6cc:	4770      	bx	lr
	...

0801e6d0 <_ZN8touchgfx11Application4drawEv>:
 801e6d0:	4b09      	ldr	r3, [pc, #36]	; (801e6f8 <_ZN8touchgfx11Application4drawEv+0x28>)
 801e6d2:	b507      	push	{r0, r1, r2, lr}
 801e6d4:	f9b3 2000 	ldrsh.w	r2, [r3]
 801e6d8:	2100      	movs	r1, #0
 801e6da:	4b08      	ldr	r3, [pc, #32]	; (801e6fc <_ZN8touchgfx11Application4drawEv+0x2c>)
 801e6dc:	9100      	str	r1, [sp, #0]
 801e6de:	4669      	mov	r1, sp
 801e6e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 801e6e4:	f8ad 2004 	strh.w	r2, [sp, #4]
 801e6e8:	f8ad 3006 	strh.w	r3, [sp, #6]
 801e6ec:	6803      	ldr	r3, [r0, #0]
 801e6ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801e6f0:	4798      	blx	r3
 801e6f2:	b003      	add	sp, #12
 801e6f4:	f85d fb04 	ldr.w	pc, [sp], #4
 801e6f8:	2400c8b0 	.word	0x2400c8b0
 801e6fc:	2400c8b2 	.word	0x2400c8b2

0801e700 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 801e700:	4b03      	ldr	r3, [pc, #12]	; (801e710 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 801e702:	6818      	ldr	r0, [r3, #0]
 801e704:	b110      	cbz	r0, 801e70c <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 801e706:	6803      	ldr	r3, [r0, #0]
 801e708:	69db      	ldr	r3, [r3, #28]
 801e70a:	4718      	bx	r3
 801e70c:	4770      	bx	lr
 801e70e:	bf00      	nop
 801e710:	2400c918 	.word	0x2400c918

0801e714 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 801e714:	4b03      	ldr	r3, [pc, #12]	; (801e724 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 801e716:	6818      	ldr	r0, [r3, #0]
 801e718:	b110      	cbz	r0, 801e720 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 801e71a:	6803      	ldr	r3, [r0, #0]
 801e71c:	6a1b      	ldr	r3, [r3, #32]
 801e71e:	4718      	bx	r3
 801e720:	4770      	bx	lr
 801e722:	bf00      	nop
 801e724:	2400c918 	.word	0x2400c918

0801e728 <_ZN8touchgfx11Application14handleKeyEventEh>:
 801e728:	4b03      	ldr	r3, [pc, #12]	; (801e738 <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 801e72a:	6818      	ldr	r0, [r3, #0]
 801e72c:	b110      	cbz	r0, 801e734 <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 801e72e:	6803      	ldr	r3, [r0, #0]
 801e730:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e732:	4718      	bx	r3
 801e734:	4770      	bx	lr
 801e736:	bf00      	nop
 801e738:	2400c918 	.word	0x2400c918

0801e73c <_ZN8touchgfx11Application15handleTickEventEv>:
 801e73c:	b570      	push	{r4, r5, r6, lr}
 801e73e:	4d38      	ldr	r5, [pc, #224]	; (801e820 <_ZN8touchgfx11Application15handleTickEventEv+0xe4>)
 801e740:	4604      	mov	r4, r0
 801e742:	6828      	ldr	r0, [r5, #0]
 801e744:	b140      	cbz	r0, 801e758 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 801e746:	7a03      	ldrb	r3, [r0, #8]
 801e748:	b933      	cbnz	r3, 801e758 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 801e74a:	f884 3135 	strb.w	r3, [r4, #309]	; 0x135
 801e74e:	6803      	ldr	r3, [r0, #0]
 801e750:	689b      	ldr	r3, [r3, #8]
 801e752:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801e756:	4718      	bx	r3
 801e758:	f894 3135 	ldrb.w	r3, [r4, #309]	; 0x135
 801e75c:	b97b      	cbnz	r3, 801e77e <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 801e75e:	b170      	cbz	r0, 801e77e <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 801e760:	7a03      	ldrb	r3, [r0, #8]
 801e762:	b163      	cbz	r3, 801e77e <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 801e764:	4b2f      	ldr	r3, [pc, #188]	; (801e824 <_ZN8touchgfx11Application15handleTickEventEv+0xe8>)
 801e766:	6818      	ldr	r0, [r3, #0]
 801e768:	b110      	cbz	r0, 801e770 <_ZN8touchgfx11Application15handleTickEventEv+0x34>
 801e76a:	6803      	ldr	r3, [r0, #0]
 801e76c:	691b      	ldr	r3, [r3, #16]
 801e76e:	4798      	blx	r3
 801e770:	6828      	ldr	r0, [r5, #0]
 801e772:	6803      	ldr	r3, [r0, #0]
 801e774:	68db      	ldr	r3, [r3, #12]
 801e776:	4798      	blx	r3
 801e778:	2301      	movs	r3, #1
 801e77a:	f884 3135 	strb.w	r3, [r4, #309]	; 0x135
 801e77e:	2500      	movs	r5, #0
 801e780:	f8b4 0084 	ldrh.w	r0, [r4, #132]	; 0x84
 801e784:	42a8      	cmp	r0, r5
 801e786:	dd0c      	ble.n	801e7a2 <_ZN8touchgfx11Application15handleTickEventEv+0x66>
 801e788:	1963      	adds	r3, r4, r5
 801e78a:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 801e78e:	b132      	cbz	r2, 801e79e <_ZN8touchgfx11Application15handleTickEventEv+0x62>
 801e790:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 801e794:	4413      	add	r3, r2
 801e796:	6858      	ldr	r0, [r3, #4]
 801e798:	6803      	ldr	r3, [r0, #0]
 801e79a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801e79c:	4798      	blx	r3
 801e79e:	3501      	adds	r5, #1
 801e7a0:	e7ee      	b.n	801e780 <_ZN8touchgfx11Application15handleTickEventEv+0x44>
 801e7a2:	2300      	movs	r3, #0
 801e7a4:	461a      	mov	r2, r3
 801e7a6:	4298      	cmp	r0, r3
 801e7a8:	d10f      	bne.n	801e7ca <_ZN8touchgfx11Application15handleTickEventEv+0x8e>
 801e7aa:	1d25      	adds	r5, r4, #4
 801e7ac:	f8b4 1084 	ldrh.w	r1, [r4, #132]	; 0x84
 801e7b0:	4291      	cmp	r1, r2
 801e7b2:	dd2d      	ble.n	801e810 <_ZN8touchgfx11Application15handleTickEventEv+0xd4>
 801e7b4:	1e48      	subs	r0, r1, #1
 801e7b6:	b280      	uxth	r0, r0
 801e7b8:	4288      	cmp	r0, r1
 801e7ba:	d31a      	bcc.n	801e7f2 <_ZN8touchgfx11Application15handleTickEventEv+0xb6>
 801e7bc:	4b1a      	ldr	r3, [pc, #104]	; (801e828 <_ZN8touchgfx11Application15handleTickEventEv+0xec>)
 801e7be:	f240 11a9 	movw	r1, #425	; 0x1a9
 801e7c2:	4a1a      	ldr	r2, [pc, #104]	; (801e82c <_ZN8touchgfx11Application15handleTickEventEv+0xf0>)
 801e7c4:	481a      	ldr	r0, [pc, #104]	; (801e830 <_ZN8touchgfx11Application15handleTickEventEv+0xf4>)
 801e7c6:	f00d f857 	bl	802b878 <__assert_func>
 801e7ca:	18e1      	adds	r1, r4, r3
 801e7cc:	f891 5088 	ldrb.w	r5, [r1, #136]	; 0x88
 801e7d0:	b16d      	cbz	r5, 801e7ee <_ZN8touchgfx11Application15handleTickEventEv+0xb2>
 801e7d2:	429a      	cmp	r2, r3
 801e7d4:	d00a      	beq.n	801e7ec <_ZN8touchgfx11Application15handleTickEventEv+0xb0>
 801e7d6:	eb03 0643 	add.w	r6, r3, r3, lsl #1
 801e7da:	4431      	add	r1, r6
 801e7dc:	684e      	ldr	r6, [r1, #4]
 801e7de:	b291      	uxth	r1, r2
 801e7e0:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 801e7e4:	604e      	str	r6, [r1, #4]
 801e7e6:	18a1      	adds	r1, r4, r2
 801e7e8:	f881 5088 	strb.w	r5, [r1, #136]	; 0x88
 801e7ec:	3201      	adds	r2, #1
 801e7ee:	3301      	adds	r3, #1
 801e7f0:	e7d9      	b.n	801e7a6 <_ZN8touchgfx11Application15handleTickEventEv+0x6a>
 801e7f2:	eb04 0380 	add.w	r3, r4, r0, lsl #2
 801e7f6:	eb05 0181 	add.w	r1, r5, r1, lsl #2
 801e7fa:	3304      	adds	r3, #4
 801e7fc:	428b      	cmp	r3, r1
 801e7fe:	d004      	beq.n	801e80a <_ZN8touchgfx11Application15handleTickEventEv+0xce>
 801e800:	f853 6f04 	ldr.w	r6, [r3, #4]!
 801e804:	f843 6c04 	str.w	r6, [r3, #-4]
 801e808:	e7f8      	b.n	801e7fc <_ZN8touchgfx11Application15handleTickEventEv+0xc0>
 801e80a:	f8a4 0084 	strh.w	r0, [r4, #132]	; 0x84
 801e80e:	e7cd      	b.n	801e7ac <_ZN8touchgfx11Application15handleTickEventEv+0x70>
 801e810:	4b04      	ldr	r3, [pc, #16]	; (801e824 <_ZN8touchgfx11Application15handleTickEventEv+0xe8>)
 801e812:	6818      	ldr	r0, [r3, #0]
 801e814:	b110      	cbz	r0, 801e81c <_ZN8touchgfx11Application15handleTickEventEv+0xe0>
 801e816:	6803      	ldr	r3, [r0, #0]
 801e818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e81a:	e79a      	b.n	801e752 <_ZN8touchgfx11Application15handleTickEventEv+0x16>
 801e81c:	bd70      	pop	{r4, r5, r6, pc}
 801e81e:	bf00      	nop
 801e820:	2400c91c 	.word	0x2400c91c
 801e824:	2400c918 	.word	0x2400c918
 801e828:	0803035c 	.word	0x0803035c
 801e82c:	080305b5 	.word	0x080305b5
 801e830:	0803036a 	.word	0x0803036a

0801e834 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 801e834:	b570      	push	{r4, r5, r6, lr}
 801e836:	4606      	mov	r6, r0
 801e838:	460c      	mov	r4, r1
 801e83a:	b929      	cbnz	r1, 801e848 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x14>
 801e83c:	4b0c      	ldr	r3, [pc, #48]	; (801e870 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x3c>)
 801e83e:	2167      	movs	r1, #103	; 0x67
 801e840:	4a0c      	ldr	r2, [pc, #48]	; (801e874 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x40>)
 801e842:	480d      	ldr	r0, [pc, #52]	; (801e878 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x44>)
 801e844:	f00d f818 	bl	802b878 <__assert_func>
 801e848:	2300      	movs	r3, #0
 801e84a:	4d0c      	ldr	r5, [pc, #48]	; (801e87c <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x48>)
 801e84c:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
 801e850:	6828      	ldr	r0, [r5, #0]
 801e852:	b110      	cbz	r0, 801e85a <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x26>
 801e854:	6803      	ldr	r3, [r0, #0]
 801e856:	695b      	ldr	r3, [r3, #20]
 801e858:	4798      	blx	r3
 801e85a:	602c      	str	r4, [r5, #0]
 801e85c:	4620      	mov	r0, r4
 801e85e:	6823      	ldr	r3, [r4, #0]
 801e860:	68db      	ldr	r3, [r3, #12]
 801e862:	4798      	blx	r3
 801e864:	6833      	ldr	r3, [r6, #0]
 801e866:	4630      	mov	r0, r6
 801e868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801e86a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801e86e:	4718      	bx	r3
 801e870:	08030328 	.word	0x08030328
 801e874:	08030430 	.word	0x08030430
 801e878:	08030332 	.word	0x08030332
 801e87c:	2400c918 	.word	0x2400c918

0801e880 <_ZNK8touchgfx4Rect8includesERKS0_>:
 801e880:	b570      	push	{r4, r5, r6, lr}
 801e882:	f9b1 4000 	ldrsh.w	r4, [r1]
 801e886:	f9b0 5000 	ldrsh.w	r5, [r0]
 801e88a:	42ac      	cmp	r4, r5
 801e88c:	db18      	blt.n	801e8c0 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 801e88e:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
 801e892:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 801e896:	429a      	cmp	r2, r3
 801e898:	db12      	blt.n	801e8c0 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 801e89a:	8886      	ldrh	r6, [r0, #4]
 801e89c:	4435      	add	r5, r6
 801e89e:	888e      	ldrh	r6, [r1, #4]
 801e8a0:	4434      	add	r4, r6
 801e8a2:	b22d      	sxth	r5, r5
 801e8a4:	b224      	sxth	r4, r4
 801e8a6:	42a5      	cmp	r5, r4
 801e8a8:	db0a      	blt.n	801e8c0 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 801e8aa:	88c0      	ldrh	r0, [r0, #6]
 801e8ac:	4418      	add	r0, r3
 801e8ae:	88cb      	ldrh	r3, [r1, #6]
 801e8b0:	441a      	add	r2, r3
 801e8b2:	b200      	sxth	r0, r0
 801e8b4:	b212      	sxth	r2, r2
 801e8b6:	4290      	cmp	r0, r2
 801e8b8:	bfb4      	ite	lt
 801e8ba:	2000      	movlt	r0, #0
 801e8bc:	2001      	movge	r0, #1
 801e8be:	bd70      	pop	{r4, r5, r6, pc}
 801e8c0:	2000      	movs	r0, #0
 801e8c2:	e7fc      	b.n	801e8be <_ZNK8touchgfx4Rect8includesERKS0_+0x3e>

0801e8c4 <_ZN8touchgfx11Application11getInstanceEv>:
 801e8c4:	4b01      	ldr	r3, [pc, #4]	; (801e8cc <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 801e8c6:	6818      	ldr	r0, [r3, #0]
 801e8c8:	4770      	bx	lr
 801e8ca:	bf00      	nop
 801e8cc:	2400c928 	.word	0x2400c928

0801e8d0 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE>:
 801e8d0:	b570      	push	{r4, r5, r6, lr}
 801e8d2:	2200      	movs	r2, #0
 801e8d4:	f8b0 3084 	ldrh.w	r3, [r0, #132]	; 0x84
 801e8d8:	1d04      	adds	r4, r0, #4
 801e8da:	b295      	uxth	r5, r2
 801e8dc:	42ab      	cmp	r3, r5
 801e8de:	d90e      	bls.n	801e8fe <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x2e>
 801e8e0:	f854 6b04 	ldr.w	r6, [r4], #4
 801e8e4:	4615      	mov	r5, r2
 801e8e6:	3201      	adds	r2, #1
 801e8e8:	428e      	cmp	r6, r1
 801e8ea:	d1f6      	bne.n	801e8da <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0xa>
 801e8ec:	4428      	add	r0, r5
 801e8ee:	f890 3088 	ldrb.w	r3, [r0, #136]	; 0x88
 801e8f2:	2bff      	cmp	r3, #255	; 0xff
 801e8f4:	d002      	beq.n	801e8fc <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x2c>
 801e8f6:	3301      	adds	r3, #1
 801e8f8:	f880 3088 	strb.w	r3, [r0, #136]	; 0x88
 801e8fc:	bd70      	pop	{r4, r5, r6, pc}
 801e8fe:	2b20      	cmp	r3, #32
 801e900:	d106      	bne.n	801e910 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x40>
 801e902:	4b09      	ldr	r3, [pc, #36]	; (801e928 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x58>)
 801e904:	f240 215f 	movw	r1, #607	; 0x25f
 801e908:	4a08      	ldr	r2, [pc, #32]	; (801e92c <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x5c>)
 801e90a:	4809      	ldr	r0, [pc, #36]	; (801e930 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x60>)
 801e90c:	f00c ffb4 	bl	802b878 <__assert_func>
 801e910:	18c2      	adds	r2, r0, r3
 801e912:	2401      	movs	r4, #1
 801e914:	f882 4088 	strb.w	r4, [r2, #136]	; 0x88
 801e918:	191a      	adds	r2, r3, r4
 801e91a:	f8a0 2084 	strh.w	r2, [r0, #132]	; 0x84
 801e91e:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 801e922:	6041      	str	r1, [r0, #4]
 801e924:	e7ea      	b.n	801e8fc <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x2c>
 801e926:	bf00      	nop
 801e928:	08030393 	.word	0x08030393
 801e92c:	08030474 	.word	0x08030474
 801e930:	08030332 	.word	0x08030332

0801e934 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE>:
 801e934:	b570      	push	{r4, r5, r6, lr}
 801e936:	2300      	movs	r3, #0
 801e938:	f8b0 6084 	ldrh.w	r6, [r0, #132]	; 0x84
 801e93c:	1d04      	adds	r4, r0, #4
 801e93e:	b29a      	uxth	r2, r3
 801e940:	4296      	cmp	r6, r2
 801e942:	d90a      	bls.n	801e95a <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE+0x26>
 801e944:	f854 2b04 	ldr.w	r2, [r4], #4
 801e948:	428a      	cmp	r2, r1
 801e94a:	d107      	bne.n	801e95c <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE+0x28>
 801e94c:	18c5      	adds	r5, r0, r3
 801e94e:	f895 2088 	ldrb.w	r2, [r5, #136]	; 0x88
 801e952:	b11a      	cbz	r2, 801e95c <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE+0x28>
 801e954:	3a01      	subs	r2, #1
 801e956:	f885 2088 	strb.w	r2, [r5, #136]	; 0x88
 801e95a:	bd70      	pop	{r4, r5, r6, pc}
 801e95c:	3301      	adds	r3, #1
 801e95e:	e7ee      	b.n	801e93e <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE+0xa>

0801e960 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>:
 801e960:	2300      	movs	r3, #0
 801e962:	f100 0288 	add.w	r2, r0, #136	; 0x88
 801e966:	30a8      	adds	r0, #168	; 0xa8
 801e968:	f820 3c24 	strh.w	r3, [r0, #-36]
 801e96c:	f802 3b01 	strb.w	r3, [r2], #1
 801e970:	4282      	cmp	r2, r0
 801e972:	d1fb      	bne.n	801e96c <_ZN8touchgfx11Application20clearAllTimerWidgetsEv+0xc>
 801e974:	4770      	bx	lr

0801e976 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 801e976:	4603      	mov	r3, r0
 801e978:	f100 0140 	add.w	r1, r0, #64	; 0x40
 801e97c:	2200      	movs	r2, #0
 801e97e:	801a      	strh	r2, [r3, #0]
 801e980:	3308      	adds	r3, #8
 801e982:	f823 2c06 	strh.w	r2, [r3, #-6]
 801e986:	f823 2c04 	strh.w	r2, [r3, #-4]
 801e98a:	f823 2c02 	strh.w	r2, [r3, #-2]
 801e98e:	428b      	cmp	r3, r1
 801e990:	d1f5      	bne.n	801e97e <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 801e992:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 801e996:	4770      	bx	lr

0801e998 <_ZN8touchgfx11ApplicationC1Ev>:
 801e998:	b570      	push	{r4, r5, r6, lr}
 801e99a:	4b1a      	ldr	r3, [pc, #104]	; (801ea04 <_ZN8touchgfx11ApplicationC1Ev+0x6c>)
 801e99c:	2500      	movs	r5, #0
 801e99e:	4604      	mov	r4, r0
 801e9a0:	30a8      	adds	r0, #168	; 0xa8
 801e9a2:	f840 3ca8 	str.w	r3, [r0, #-168]
 801e9a6:	f820 5c24 	strh.w	r5, [r0, #-36]
 801e9aa:	f7ff ffe4 	bl	801e976 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801e9ae:	f104 00ea 	add.w	r0, r4, #234	; 0xea
 801e9b2:	f7ff ffe0 	bl	801e976 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801e9b6:	f8a4 512c 	strh.w	r5, [r4, #300]	; 0x12c
 801e9ba:	f8a4 512e 	strh.w	r5, [r4, #302]	; 0x12e
 801e9be:	f8a4 5130 	strh.w	r5, [r4, #304]	; 0x130
 801e9c2:	f8a4 5132 	strh.w	r5, [r4, #306]	; 0x132
 801e9c6:	f884 5134 	strb.w	r5, [r4, #308]	; 0x134
 801e9ca:	f884 5135 	strb.w	r5, [r4, #309]	; 0x135
 801e9ce:	490e      	ldr	r1, [pc, #56]	; (801ea08 <_ZN8touchgfx11ApplicationC1Ev+0x70>)
 801e9d0:	480e      	ldr	r0, [pc, #56]	; (801ea0c <_ZN8touchgfx11ApplicationC1Ev+0x74>)
 801e9d2:	f00b f857 	bl	8029a84 <CRC_Lock>
 801e9d6:	4e0e      	ldr	r6, [pc, #56]	; (801ea10 <_ZN8touchgfx11ApplicationC1Ev+0x78>)
 801e9d8:	4b0e      	ldr	r3, [pc, #56]	; (801ea14 <_ZN8touchgfx11ApplicationC1Ev+0x7c>)
 801e9da:	b158      	cbz	r0, 801e9f4 <_ZN8touchgfx11ApplicationC1Ev+0x5c>
 801e9dc:	801d      	strh	r5, [r3, #0]
 801e9de:	2300      	movs	r3, #0
 801e9e0:	4a0d      	ldr	r2, [pc, #52]	; (801ea18 <_ZN8touchgfx11ApplicationC1Ev+0x80>)
 801e9e2:	4620      	mov	r0, r4
 801e9e4:	6013      	str	r3, [r2, #0]
 801e9e6:	4a0d      	ldr	r2, [pc, #52]	; (801ea1c <_ZN8touchgfx11ApplicationC1Ev+0x84>)
 801e9e8:	6033      	str	r3, [r6, #0]
 801e9ea:	6013      	str	r3, [r2, #0]
 801e9ec:	f7ff ffb8 	bl	801e960 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
 801e9f0:	4620      	mov	r0, r4
 801e9f2:	bd70      	pop	{r4, r5, r6, pc}
 801e9f4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801e9f8:	2002      	movs	r0, #2
 801e9fa:	801a      	strh	r2, [r3, #0]
 801e9fc:	6030      	str	r0, [r6, #0]
 801e9fe:	f001 facb 	bl	801ff98 <_ZN8touchgfx6Screen4drawEv>
 801ea02:	e7ec      	b.n	801e9de <_ZN8touchgfx11ApplicationC1Ev+0x46>
 801ea04:	080303f4 	.word	0x080303f4
 801ea08:	b5e8b5cd 	.word	0xb5e8b5cd
 801ea0c:	f407a5c2 	.word	0xf407a5c2
 801ea10:	2400c918 	.word	0x2400c918
 801ea14:	24000050 	.word	0x24000050
 801ea18:	2400c928 	.word	0x2400c928
 801ea1c:	2400c91c 	.word	0x2400c91c

0801ea20 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 801ea20:	b510      	push	{r4, lr}
 801ea22:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 801ea26:	428b      	cmp	r3, r1
 801ea28:	d806      	bhi.n	801ea38 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x18>
 801ea2a:	4b0b      	ldr	r3, [pc, #44]	; (801ea58 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x38>)
 801ea2c:	f44f 71de 	mov.w	r1, #444	; 0x1bc
 801ea30:	4a0a      	ldr	r2, [pc, #40]	; (801ea5c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x3c>)
 801ea32:	480b      	ldr	r0, [pc, #44]	; (801ea60 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x40>)
 801ea34:	f00c ff20 	bl	802b878 <__assert_func>
 801ea38:	3b01      	subs	r3, #1
 801ea3a:	b29b      	uxth	r3, r3
 801ea3c:	428b      	cmp	r3, r1
 801ea3e:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
 801ea42:	d908      	bls.n	801ea56 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x36>
 801ea44:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 801ea48:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
 801ea4c:	681a      	ldr	r2, [r3, #0]
 801ea4e:	f840 2031 	str.w	r2, [r0, r1, lsl #3]
 801ea52:	685a      	ldr	r2, [r3, #4]
 801ea54:	6062      	str	r2, [r4, #4]
 801ea56:	bd10      	pop	{r4, pc}
 801ea58:	0803035c 	.word	0x0803035c
 801ea5c:	080304b9 	.word	0x080304b9
 801ea60:	0803036a 	.word	0x0803036a

0801ea64 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>:
 801ea64:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801ea66:	466b      	mov	r3, sp
 801ea68:	4604      	mov	r4, r0
 801ea6a:	e883 0006 	stmia.w	r3, {r1, r2}
 801ea6e:	f8b0 2040 	ldrh.w	r2, [r0, #64]	; 0x40
 801ea72:	2a07      	cmp	r2, #7
 801ea74:	d906      	bls.n	801ea84 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x20>
 801ea76:	4b09      	ldr	r3, [pc, #36]	; (801ea9c <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x38>)
 801ea78:	f44f 71c1 	mov.w	r1, #386	; 0x182
 801ea7c:	4a08      	ldr	r2, [pc, #32]	; (801eaa0 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x3c>)
 801ea7e:	4809      	ldr	r0, [pc, #36]	; (801eaa4 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x40>)
 801ea80:	f00c fefa 	bl	802b878 <__assert_func>
 801ea84:	1c51      	adds	r1, r2, #1
 801ea86:	eb00 05c2 	add.w	r5, r0, r2, lsl #3
 801ea8a:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 801ea8e:	cb03      	ldmia	r3!, {r0, r1}
 801ea90:	f844 0032 	str.w	r0, [r4, r2, lsl #3]
 801ea94:	6069      	str	r1, [r5, #4]
 801ea96:	b003      	add	sp, #12
 801ea98:	bd30      	pop	{r4, r5, pc}
 801ea9a:	bf00      	nop
 801ea9c:	080303bb 	.word	0x080303bb
 801eaa0:	0803054f 	.word	0x0803054f
 801eaa4:	0803036a 	.word	0x0803036a

0801eaa8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 801eaa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801eaac:	b08d      	sub	sp, #52	; 0x34
 801eaae:	4683      	mov	fp, r0
 801eab0:	ac08      	add	r4, sp, #32
 801eab2:	4620      	mov	r0, r4
 801eab4:	e884 0006 	stmia.w	r4, {r1, r2}
 801eab8:	f7f9 fc2f 	bl	801831a <_ZNK8touchgfx4Rect7isEmptyEv>
 801eabc:	2800      	cmp	r0, #0
 801eabe:	d16a      	bne.n	801eb96 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xee>
 801eac0:	9402      	str	r4, [sp, #8]
 801eac2:	f8bb 50e8 	ldrh.w	r5, [fp, #232]	; 0xe8
 801eac6:	f10b 03a8 	add.w	r3, fp, #168	; 0xa8
 801eaca:	2400      	movs	r4, #0
 801eacc:	eb0b 06c5 	add.w	r6, fp, r5, lsl #3
 801ead0:	9301      	str	r3, [sp, #4]
 801ead2:	36a0      	adds	r6, #160	; 0xa0
 801ead4:	42a5      	cmp	r5, r4
 801ead6:	d00d      	beq.n	801eaf4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c>
 801ead8:	eba6 01c4 	sub.w	r1, r6, r4, lsl #3
 801eadc:	9802      	ldr	r0, [sp, #8]
 801eade:	f7ff fecf 	bl	801e880 <_ZNK8touchgfx4Rect8includesERKS0_>
 801eae2:	b128      	cbz	r0, 801eaf0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x48>
 801eae4:	1e69      	subs	r1, r5, #1
 801eae6:	9801      	ldr	r0, [sp, #4]
 801eae8:	1b09      	subs	r1, r1, r4
 801eaea:	b289      	uxth	r1, r1
 801eaec:	f7ff ff98 	bl	801ea20 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801eaf0:	3401      	adds	r4, #1
 801eaf2:	e7ef      	b.n	801ead4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801eaf4:	f8bb 70e8 	ldrh.w	r7, [fp, #232]	; 0xe8
 801eaf8:	1e7b      	subs	r3, r7, #1
 801eafa:	eb0b 0ac7 	add.w	sl, fp, r7, lsl #3
 801eafe:	9703      	str	r7, [sp, #12]
 801eb00:	9300      	str	r3, [sp, #0]
 801eb02:	2400      	movs	r4, #0
 801eb04:	4655      	mov	r5, sl
 801eb06:	9704      	str	r7, [sp, #16]
 801eb08:	4626      	mov	r6, r4
 801eb0a:	9b04      	ldr	r3, [sp, #16]
 801eb0c:	2b00      	cmp	r3, #0
 801eb0e:	d078      	beq.n	801ec02 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x15a>
 801eb10:	9902      	ldr	r1, [sp, #8]
 801eb12:	f105 00a0 	add.w	r0, r5, #160	; 0xa0
 801eb16:	f7fb fa0d 	bl	8019f34 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801eb1a:	b360      	cbz	r0, 801eb76 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xce>
 801eb1c:	f9bd e020 	ldrsh.w	lr, [sp, #32]
 801eb20:	f9b5 c0a0 	ldrsh.w	ip, [r5, #160]	; 0xa0
 801eb24:	f9bd 9022 	ldrsh.w	r9, [sp, #34]	; 0x22
 801eb28:	45e6      	cmp	lr, ip
 801eb2a:	f9b5 80a2 	ldrsh.w	r8, [r5, #162]	; 0xa2
 801eb2e:	db35      	blt.n	801eb9c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xf4>
 801eb30:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 801eb34:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
 801eb38:	4472      	add	r2, lr
 801eb3a:	4463      	add	r3, ip
 801eb3c:	b212      	sxth	r2, r2
 801eb3e:	b21b      	sxth	r3, r3
 801eb40:	429a      	cmp	r2, r3
 801eb42:	dc2b      	bgt.n	801eb9c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xf4>
 801eb44:	fa1f f288 	uxth.w	r2, r8
 801eb48:	f8b5 30a6 	ldrh.w	r3, [r5, #166]	; 0xa6
 801eb4c:	45c1      	cmp	r9, r8
 801eb4e:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
 801eb52:	4413      	add	r3, r2
 801eb54:	fa1f fc89 	uxth.w	ip, r9
 801eb58:	b29b      	uxth	r3, r3
 801eb5a:	fa0f fe83 	sxth.w	lr, r3
 801eb5e:	db0f      	blt.n	801eb80 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xd8>
 801eb60:	eba3 030c 	sub.w	r3, r3, ip
 801eb64:	1ac9      	subs	r1, r1, r3
 801eb66:	b209      	sxth	r1, r1
 801eb68:	2900      	cmp	r1, #0
 801eb6a:	f8ad 1026 	strh.w	r1, [sp, #38]	; 0x26
 801eb6e:	dd12      	ble.n	801eb96 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xee>
 801eb70:	f8ad e022 	strh.w	lr, [sp, #34]	; 0x22
 801eb74:	4604      	mov	r4, r0
 801eb76:	9b04      	ldr	r3, [sp, #16]
 801eb78:	3d08      	subs	r5, #8
 801eb7a:	3b01      	subs	r3, #1
 801eb7c:	9304      	str	r3, [sp, #16]
 801eb7e:	e7c4      	b.n	801eb0a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x62>
 801eb80:	4461      	add	r1, ip
 801eb82:	b209      	sxth	r1, r1
 801eb84:	4571      	cmp	r1, lr
 801eb86:	dc3a      	bgt.n	801ebfe <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x156>
 801eb88:	eba2 020c 	sub.w	r2, r2, ip
 801eb8c:	b212      	sxth	r2, r2
 801eb8e:	f8ad 2026 	strh.w	r2, [sp, #38]	; 0x26
 801eb92:	2a00      	cmp	r2, #0
 801eb94:	dcee      	bgt.n	801eb74 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xcc>
 801eb96:	b00d      	add	sp, #52	; 0x34
 801eb98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801eb9c:	45c1      	cmp	r9, r8
 801eb9e:	db2e      	blt.n	801ebfe <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x156>
 801eba0:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 801eba4:	4499      	add	r9, r3
 801eba6:	f8b5 30a6 	ldrh.w	r3, [r5, #166]	; 0xa6
 801ebaa:	4498      	add	r8, r3
 801ebac:	fa0f f989 	sxth.w	r9, r9
 801ebb0:	fa0f f888 	sxth.w	r8, r8
 801ebb4:	45c1      	cmp	r9, r8
 801ebb6:	dc22      	bgt.n	801ebfe <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x156>
 801ebb8:	fa1f f28c 	uxth.w	r2, ip
 801ebbc:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
 801ebc0:	45e6      	cmp	lr, ip
 801ebc2:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 801ebc6:	4413      	add	r3, r2
 801ebc8:	fa1f f88e 	uxth.w	r8, lr
 801ebcc:	b29b      	uxth	r3, r3
 801ebce:	fa0f f983 	sxth.w	r9, r3
 801ebd2:	db0a      	blt.n	801ebea <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x142>
 801ebd4:	eba3 0308 	sub.w	r3, r3, r8
 801ebd8:	1ac9      	subs	r1, r1, r3
 801ebda:	b209      	sxth	r1, r1
 801ebdc:	2900      	cmp	r1, #0
 801ebde:	f8ad 1024 	strh.w	r1, [sp, #36]	; 0x24
 801ebe2:	ddd8      	ble.n	801eb96 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xee>
 801ebe4:	f8ad 9020 	strh.w	r9, [sp, #32]
 801ebe8:	e7c4      	b.n	801eb74 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xcc>
 801ebea:	4441      	add	r1, r8
 801ebec:	b209      	sxth	r1, r1
 801ebee:	4549      	cmp	r1, r9
 801ebf0:	dc05      	bgt.n	801ebfe <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x156>
 801ebf2:	eba2 0208 	sub.w	r2, r2, r8
 801ebf6:	b212      	sxth	r2, r2
 801ebf8:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
 801ebfc:	e7c9      	b.n	801eb92 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xea>
 801ebfe:	4606      	mov	r6, r0
 801ec00:	e7b9      	b.n	801eb76 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xce>
 801ec02:	2c00      	cmp	r4, #0
 801ec04:	f47f af7d 	bne.w	801eb02 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5a>
 801ec08:	2e00      	cmp	r6, #0
 801ec0a:	f000 81dc 	beq.w	801efc6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x51e>
 801ec0e:	f9bd 7022 	ldrsh.w	r7, [sp, #34]	; 0x22
 801ec12:	4655      	mov	r5, sl
 801ec14:	f9bd 6020 	ldrsh.w	r6, [sp, #32]
 801ec18:	b2b9      	uxth	r1, r7
 801ec1a:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 801ec1e:	b2b3      	uxth	r3, r6
 801ec20:	9104      	str	r1, [sp, #16]
 801ec22:	9804      	ldr	r0, [sp, #16]
 801ec24:	441a      	add	r2, r3
 801ec26:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
 801ec2a:	b292      	uxth	r2, r2
 801ec2c:	4401      	add	r1, r0
 801ec2e:	fa0f f882 	sxth.w	r8, r2
 801ec32:	b289      	uxth	r1, r1
 801ec34:	9105      	str	r1, [sp, #20]
 801ec36:	f9bd 9014 	ldrsh.w	r9, [sp, #20]
 801ec3a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801ec3e:	9b03      	ldr	r3, [sp, #12]
 801ec40:	2b00      	cmp	r3, #0
 801ec42:	d054      	beq.n	801ecee <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x246>
 801ec44:	9902      	ldr	r1, [sp, #8]
 801ec46:	f105 00a0 	add.w	r0, r5, #160	; 0xa0
 801ec4a:	f7fb f973 	bl	8019f34 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801ec4e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801ec52:	b1d8      	cbz	r0, 801ec8c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 801ec54:	f9b5 e0a0 	ldrsh.w	lr, [r5, #160]	; 0xa0
 801ec58:	f9b5 10a2 	ldrsh.w	r1, [r5, #162]	; 0xa2
 801ec5c:	4576      	cmp	r6, lr
 801ec5e:	dc26      	bgt.n	801ecae <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 801ec60:	f8b5 c0a4 	ldrh.w	ip, [r5, #164]	; 0xa4
 801ec64:	44f4      	add	ip, lr
 801ec66:	fa0f fc8c 	sxth.w	ip, ip
 801ec6a:	45e0      	cmp	r8, ip
 801ec6c:	db1f      	blt.n	801ecae <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 801ec6e:	428f      	cmp	r7, r1
 801ec70:	fa1f fc81 	uxth.w	ip, r1
 801ec74:	f8b5 10a6 	ldrh.w	r1, [r5, #166]	; 0xa6
 801ec78:	dc0f      	bgt.n	801ec9a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f2>
 801ec7a:	9805      	ldr	r0, [sp, #20]
 801ec7c:	f8a5 90a2 	strh.w	r9, [r5, #162]	; 0xa2
 801ec80:	eba0 0c0c 	sub.w	ip, r0, ip
 801ec84:	eba1 010c 	sub.w	r1, r1, ip
 801ec88:	f8a5 10a6 	strh.w	r1, [r5, #166]	; 0xa6
 801ec8c:	4620      	mov	r0, r4
 801ec8e:	9903      	ldr	r1, [sp, #12]
 801ec90:	3d08      	subs	r5, #8
 801ec92:	4604      	mov	r4, r0
 801ec94:	3901      	subs	r1, #1
 801ec96:	9103      	str	r1, [sp, #12]
 801ec98:	e7cf      	b.n	801ec3a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x192>
 801ec9a:	4461      	add	r1, ip
 801ec9c:	b209      	sxth	r1, r1
 801ec9e:	4549      	cmp	r1, r9
 801eca0:	dcf5      	bgt.n	801ec8e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 801eca2:	9904      	ldr	r1, [sp, #16]
 801eca4:	eba1 0c0c 	sub.w	ip, r1, ip
 801eca8:	f8a5 c0a6 	strh.w	ip, [r5, #166]	; 0xa6
 801ecac:	e7ee      	b.n	801ec8c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 801ecae:	428f      	cmp	r7, r1
 801ecb0:	dced      	bgt.n	801ec8e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 801ecb2:	f8b5 c0a6 	ldrh.w	ip, [r5, #166]	; 0xa6
 801ecb6:	4461      	add	r1, ip
 801ecb8:	b209      	sxth	r1, r1
 801ecba:	4589      	cmp	r9, r1
 801ecbc:	dbe7      	blt.n	801ec8e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 801ecbe:	4576      	cmp	r6, lr
 801ecc0:	fa1f fc8e 	uxth.w	ip, lr
 801ecc4:	f8b5 10a4 	ldrh.w	r1, [r5, #164]	; 0xa4
 801ecc8:	dc08      	bgt.n	801ecdc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x234>
 801ecca:	eba2 0c0c 	sub.w	ip, r2, ip
 801ecce:	f8a5 80a0 	strh.w	r8, [r5, #160]	; 0xa0
 801ecd2:	eba1 010c 	sub.w	r1, r1, ip
 801ecd6:	f8a5 10a4 	strh.w	r1, [r5, #164]	; 0xa4
 801ecda:	e7d7      	b.n	801ec8c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 801ecdc:	4461      	add	r1, ip
 801ecde:	b209      	sxth	r1, r1
 801ece0:	4588      	cmp	r8, r1
 801ece2:	dbd4      	blt.n	801ec8e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 801ece4:	eba3 0c0c 	sub.w	ip, r3, ip
 801ece8:	f8a5 c0a4 	strh.w	ip, [r5, #164]	; 0xa4
 801ecec:	e7ce      	b.n	801ec8c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 801ecee:	2c00      	cmp	r4, #0
 801ecf0:	f000 8169 	beq.w	801efc6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x51e>
 801ecf4:	9b00      	ldr	r3, [sp, #0]
 801ecf6:	3301      	adds	r3, #1
 801ecf8:	f000 8165 	beq.w	801efc6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x51e>
 801ecfc:	f10a 04a0 	add.w	r4, sl, #160	; 0xa0
 801ed00:	9802      	ldr	r0, [sp, #8]
 801ed02:	4621      	mov	r1, r4
 801ed04:	f7ff fdbc 	bl	801e880 <_ZNK8touchgfx4Rect8includesERKS0_>
 801ed08:	b120      	cbz	r0, 801ed14 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x26c>
 801ed0a:	f8bd 1000 	ldrh.w	r1, [sp]
 801ed0e:	9801      	ldr	r0, [sp, #4]
 801ed10:	f7ff fe86 	bl	801ea20 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801ed14:	9902      	ldr	r1, [sp, #8]
 801ed16:	4620      	mov	r0, r4
 801ed18:	f7fb f90c 	bl	8019f34 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801ed1c:	2800      	cmp	r0, #0
 801ed1e:	f000 809b 	beq.w	801ee58 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3b0>
 801ed22:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
 801ed26:	f8bd 7024 	ldrh.w	r7, [sp, #36]	; 0x24
 801ed2a:	fa1f f288 	uxth.w	r2, r8
 801ed2e:	f9ba 40a0 	ldrsh.w	r4, [sl, #160]	; 0xa0
 801ed32:	f8ba 30a4 	ldrh.w	r3, [sl, #164]	; 0xa4
 801ed36:	19d5      	adds	r5, r2, r7
 801ed38:	b2a1      	uxth	r1, r4
 801ed3a:	45a0      	cmp	r8, r4
 801ed3c:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
 801ed40:	fa1f f985 	uxth.w	r9, r5
 801ed44:	440b      	add	r3, r1
 801ed46:	f9ba 00a2 	ldrsh.w	r0, [sl, #162]	; 0xa2
 801ed4a:	fa0f f589 	sxth.w	r5, r9
 801ed4e:	b29b      	uxth	r3, r3
 801ed50:	9503      	str	r5, [sp, #12]
 801ed52:	f8bb 50e8 	ldrh.w	r5, [fp, #232]	; 0xe8
 801ed56:	9507      	str	r5, [sp, #28]
 801ed58:	f340 809d 	ble.w	801ee96 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ee>
 801ed5c:	1a52      	subs	r2, r2, r1
 801ed5e:	4584      	cmp	ip, r0
 801ed60:	fa0f fe83 	sxth.w	lr, r3
 801ed64:	b292      	uxth	r2, r2
 801ed66:	b215      	sxth	r5, r2
 801ed68:	dd2f      	ble.n	801edca <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x322>
 801ed6a:	9e00      	ldr	r6, [sp, #0]
 801ed6c:	fa1f fc8c 	uxth.w	ip, ip
 801ed70:	b280      	uxth	r0, r0
 801ed72:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
 801ed76:	eb0b 08c6 	add.w	r8, fp, r6, lsl #3
 801ed7a:	9e03      	ldr	r6, [sp, #12]
 801ed7c:	ebac 0300 	sub.w	r3, ip, r0
 801ed80:	448c      	add	ip, r1
 801ed82:	eba6 060e 	sub.w	r6, r6, lr
 801ed86:	f8b8 e0ae 	ldrh.w	lr, [r8, #174]	; 0xae
 801ed8a:	b29b      	uxth	r3, r3
 801ed8c:	4470      	add	r0, lr
 801ed8e:	fa0f fc8c 	sxth.w	ip, ip
 801ed92:	b21c      	sxth	r4, r3
 801ed94:	b200      	sxth	r0, r0
 801ed96:	4366      	muls	r6, r4
 801ed98:	ebac 0000 	sub.w	r0, ip, r0
 801ed9c:	4368      	muls	r0, r5
 801ed9e:	4286      	cmp	r6, r0
 801eda0:	db09      	blt.n	801edb6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x30e>
 801eda2:	f8b8 30a8 	ldrh.w	r3, [r8, #168]	; 0xa8
 801eda6:	f8a8 40ae 	strh.w	r4, [r8, #174]	; 0xae
 801edaa:	4417      	add	r7, r2
 801edac:	f8ad 3020 	strh.w	r3, [sp, #32]
 801edb0:	f8ad 7024 	strh.w	r7, [sp, #36]	; 0x24
 801edb4:	e685      	b.n	801eac2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 801edb6:	440b      	add	r3, r1
 801edb8:	f8a8 50ac 	strh.w	r5, [r8, #172]	; 0xac
 801edbc:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 801edc0:	f8b8 30aa 	ldrh.w	r3, [r8, #170]	; 0xaa
 801edc4:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801edc8:	e67b      	b.n	801eac2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 801edca:	9e03      	ldr	r6, [sp, #12]
 801edcc:	45b6      	cmp	lr, r6
 801edce:	da28      	bge.n	801ee22 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x37a>
 801edd0:	9b00      	ldr	r3, [sp, #0]
 801edd2:	eba6 060e 	sub.w	r6, r6, lr
 801edd6:	f8bd 4026 	ldrh.w	r4, [sp, #38]	; 0x26
 801edda:	eb0b 01c3 	add.w	r1, fp, r3, lsl #3
 801edde:	eb04 030c 	add.w	r3, r4, ip
 801ede2:	fa1f f883 	uxth.w	r8, r3
 801ede6:	f8b1 30ae 	ldrh.w	r3, [r1, #174]	; 0xae
 801edea:	4403      	add	r3, r0
 801edec:	fa0f f988 	sxth.w	r9, r8
 801edf0:	eba0 000c 	sub.w	r0, r0, ip
 801edf4:	eba3 0308 	sub.w	r3, r3, r8
 801edf8:	4368      	muls	r0, r5
 801edfa:	b29b      	uxth	r3, r3
 801edfc:	fa0f f883 	sxth.w	r8, r3
 801ee00:	fb08 f606 	mul.w	r6, r8, r6
 801ee04:	42b0      	cmp	r0, r6
 801ee06:	dc06      	bgt.n	801ee16 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x36e>
 801ee08:	f8a1 90aa 	strh.w	r9, [r1, #170]	; 0xaa
 801ee0c:	f8a1 80ae 	strh.w	r8, [r1, #174]	; 0xae
 801ee10:	f8b1 30a8 	ldrh.w	r3, [r1, #168]	; 0xa8
 801ee14:	e7c9      	b.n	801edaa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x302>
 801ee16:	4423      	add	r3, r4
 801ee18:	f8a1 50ac 	strh.w	r5, [r1, #172]	; 0xac
 801ee1c:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 801ee20:	e64f      	b.n	801eac2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 801ee22:	eba3 0309 	sub.w	r3, r3, r9
 801ee26:	9807      	ldr	r0, [sp, #28]
 801ee28:	b29b      	uxth	r3, r3
 801ee2a:	2806      	cmp	r0, #6
 801ee2c:	fa0f fc83 	sxth.w	ip, r3
 801ee30:	d818      	bhi.n	801ee64 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3bc>
 801ee32:	4652      	mov	r2, sl
 801ee34:	ab0a      	add	r3, sp, #40	; 0x28
 801ee36:	f852 0fa0 	ldr.w	r0, [r2, #160]!
 801ee3a:	6851      	ldr	r1, [r2, #4]
 801ee3c:	f8aa c0a4 	strh.w	ip, [sl, #164]	; 0xa4
 801ee40:	c303      	stmia	r3!, {r0, r1}
 801ee42:	9b03      	ldr	r3, [sp, #12]
 801ee44:	f8ad 502c 	strh.w	r5, [sp, #44]	; 0x2c
 801ee48:	f8aa 30a0 	strh.w	r3, [sl, #160]	; 0xa0
 801ee4c:	ab0a      	add	r3, sp, #40	; 0x28
 801ee4e:	9801      	ldr	r0, [sp, #4]
 801ee50:	e893 0006 	ldmia.w	r3, {r1, r2}
 801ee54:	f7ff fe06 	bl	801ea64 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 801ee58:	9b00      	ldr	r3, [sp, #0]
 801ee5a:	f1aa 0a08 	sub.w	sl, sl, #8
 801ee5e:	3b01      	subs	r3, #1
 801ee60:	9300      	str	r3, [sp, #0]
 801ee62:	e747      	b.n	801ecf4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x24c>
 801ee64:	9800      	ldr	r0, [sp, #0]
 801ee66:	45ac      	cmp	ip, r5
 801ee68:	ea4f 00c0 	mov.w	r0, r0, lsl #3
 801ee6c:	db0c      	blt.n	801ee88 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3e0>
 801ee6e:	4417      	add	r7, r2
 801ee70:	4458      	add	r0, fp
 801ee72:	f8ad 4020 	strh.w	r4, [sp, #32]
 801ee76:	b2bf      	uxth	r7, r7
 801ee78:	f8a0 c0ac 	strh.w	ip, [r0, #172]	; 0xac
 801ee7c:	f8ad 7024 	strh.w	r7, [sp, #36]	; 0x24
 801ee80:	440f      	add	r7, r1
 801ee82:	f8a0 70a8 	strh.w	r7, [r0, #168]	; 0xa8
 801ee86:	e61c      	b.n	801eac2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 801ee88:	4458      	add	r0, fp
 801ee8a:	f8a0 50ac 	strh.w	r5, [r0, #172]	; 0xac
 801ee8e:	443b      	add	r3, r7
 801ee90:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 801ee94:	e615      	b.n	801eac2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 801ee96:	fa1f f18c 	uxth.w	r1, ip
 801ee9a:	f8bd 5026 	ldrh.w	r5, [sp, #38]	; 0x26
 801ee9e:	b282      	uxth	r2, r0
 801eea0:	4584      	cmp	ip, r0
 801eea2:	eb01 0e05 	add.w	lr, r1, r5
 801eea6:	9204      	str	r2, [sp, #16]
 801eea8:	fa1f fe8e 	uxth.w	lr, lr
 801eeac:	9e04      	ldr	r6, [sp, #16]
 801eeae:	fa0f f28e 	sxth.w	r2, lr
 801eeb2:	9205      	str	r2, [sp, #20]
 801eeb4:	f8ba 20a6 	ldrh.w	r2, [sl, #166]	; 0xa6
 801eeb8:	4432      	add	r2, r6
 801eeba:	b292      	uxth	r2, r2
 801eebc:	9206      	str	r2, [sp, #24]
 801eebe:	da26      	bge.n	801ef0e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x466>
 801eec0:	eba3 0309 	sub.w	r3, r3, r9
 801eec4:	eba2 020e 	sub.w	r2, r2, lr
 801eec8:	eba0 000c 	sub.w	r0, r0, ip
 801eecc:	eba4 0408 	sub.w	r4, r4, r8
 801eed0:	b29b      	uxth	r3, r3
 801eed2:	b292      	uxth	r2, r2
 801eed4:	fa0f fa83 	sxth.w	sl, r3
 801eed8:	b211      	sxth	r1, r2
 801eeda:	fb0a f000 	mul.w	r0, sl, r0
 801eede:	434c      	muls	r4, r1
 801eee0:	42a0      	cmp	r0, r4
 801eee2:	9800      	ldr	r0, [sp, #0]
 801eee4:	ea4f 00c0 	mov.w	r0, r0, lsl #3
 801eee8:	dc06      	bgt.n	801eef8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x450>
 801eeea:	4458      	add	r0, fp
 801eeec:	9a05      	ldr	r2, [sp, #20]
 801eeee:	f8a0 10ae 	strh.w	r1, [r0, #174]	; 0xae
 801eef2:	f8a0 20aa 	strh.w	r2, [r0, #170]	; 0xaa
 801eef6:	e7ca      	b.n	801ee8e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3e6>
 801eef8:	eb0b 0300 	add.w	r3, fp, r0
 801eefc:	9903      	ldr	r1, [sp, #12]
 801eefe:	f8a3 a0ac 	strh.w	sl, [r3, #172]	; 0xac
 801ef02:	f8a3 10a8 	strh.w	r1, [r3, #168]	; 0xa8
 801ef06:	442a      	add	r2, r5
 801ef08:	f8ad 2026 	strh.w	r2, [sp, #38]	; 0x26
 801ef0c:	e5d9      	b.n	801eac2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 801ef0e:	9e04      	ldr	r6, [sp, #16]
 801ef10:	9a03      	ldr	r2, [sp, #12]
 801ef12:	1b89      	subs	r1, r1, r6
 801ef14:	b21e      	sxth	r6, r3
 801ef16:	b289      	uxth	r1, r1
 801ef18:	4296      	cmp	r6, r2
 801ef1a:	fa0f fc81 	sxth.w	ip, r1
 801ef1e:	dd25      	ble.n	801ef6c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c4>
 801ef20:	eba3 0309 	sub.w	r3, r3, r9
 801ef24:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
 801ef28:	9e05      	ldr	r6, [sp, #20]
 801ef2a:	eba4 0408 	sub.w	r4, r4, r8
 801ef2e:	b29b      	uxth	r3, r3
 801ef30:	eba6 0902 	sub.w	r9, r6, r2
 801ef34:	fb0c f404 	mul.w	r4, ip, r4
 801ef38:	b218      	sxth	r0, r3
 801ef3a:	9a00      	ldr	r2, [sp, #0]
 801ef3c:	fb00 f909 	mul.w	r9, r0, r9
 801ef40:	00d2      	lsls	r2, r2, #3
 801ef42:	454c      	cmp	r4, r9
 801ef44:	db03      	blt.n	801ef4e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4a6>
 801ef46:	445a      	add	r2, fp
 801ef48:	f8a2 c0ae 	strh.w	ip, [r2, #174]	; 0xae
 801ef4c:	e79f      	b.n	801ee8e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3e6>
 801ef4e:	eb0b 0302 	add.w	r3, fp, r2
 801ef52:	9a03      	ldr	r2, [sp, #12]
 801ef54:	4429      	add	r1, r5
 801ef56:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
 801ef5a:	f8a3 00ac 	strh.w	r0, [r3, #172]	; 0xac
 801ef5e:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	; 0xaa
 801ef62:	f8ad 1026 	strh.w	r1, [sp, #38]	; 0x26
 801ef66:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801ef6a:	e5aa      	b.n	801eac2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 801ef6c:	9b06      	ldr	r3, [sp, #24]
 801ef6e:	9c07      	ldr	r4, [sp, #28]
 801ef70:	eba3 020e 	sub.w	r2, r3, lr
 801ef74:	2c06      	cmp	r4, #6
 801ef76:	b292      	uxth	r2, r2
 801ef78:	b213      	sxth	r3, r2
 801ef7a:	d80d      	bhi.n	801ef98 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4f0>
 801ef7c:	4651      	mov	r1, sl
 801ef7e:	aa0a      	add	r2, sp, #40	; 0x28
 801ef80:	f851 0fa0 	ldr.w	r0, [r1, #160]!
 801ef84:	6849      	ldr	r1, [r1, #4]
 801ef86:	f8aa 30a6 	strh.w	r3, [sl, #166]	; 0xa6
 801ef8a:	9b05      	ldr	r3, [sp, #20]
 801ef8c:	c203      	stmia	r2!, {r0, r1}
 801ef8e:	f8aa 30a2 	strh.w	r3, [sl, #162]	; 0xa2
 801ef92:	f8ad c02e 	strh.w	ip, [sp, #46]	; 0x2e
 801ef96:	e759      	b.n	801ee4c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3a4>
 801ef98:	9c00      	ldr	r4, [sp, #0]
 801ef9a:	4563      	cmp	r3, ip
 801ef9c:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 801efa0:	db0d      	blt.n	801efbe <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x516>
 801efa2:	4429      	add	r1, r5
 801efa4:	9a04      	ldr	r2, [sp, #16]
 801efa6:	445c      	add	r4, fp
 801efa8:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 801efac:	b289      	uxth	r1, r1
 801efae:	f8a4 30ae 	strh.w	r3, [r4, #174]	; 0xae
 801efb2:	f8ad 1026 	strh.w	r1, [sp, #38]	; 0x26
 801efb6:	4411      	add	r1, r2
 801efb8:	f8a4 10aa 	strh.w	r1, [r4, #170]	; 0xaa
 801efbc:	e581      	b.n	801eac2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 801efbe:	445c      	add	r4, fp
 801efc0:	f8a4 c0ae 	strh.w	ip, [r4, #174]	; 0xae
 801efc4:	e79f      	b.n	801ef06 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x45e>
 801efc6:	f8bb 70e8 	ldrh.w	r7, [fp, #232]	; 0xe8
 801efca:	2f07      	cmp	r7, #7
 801efcc:	d806      	bhi.n	801efdc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x534>
 801efce:	ab08      	add	r3, sp, #32
 801efd0:	9801      	ldr	r0, [sp, #4]
 801efd2:	e893 0006 	ldmia.w	r3, {r1, r2}
 801efd6:	f7ff fd45 	bl	801ea64 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 801efda:	e5dc      	b.n	801eb96 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xee>
 801efdc:	f107 39ff 	add.w	r9, r7, #4294967295
 801efe0:	f10b 03a8 	add.w	r3, fp, #168	; 0xa8
 801efe4:	eb0b 07c7 	add.w	r7, fp, r7, lsl #3
 801efe8:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 801efec:	f04f 35ff 	mov.w	r5, #4294967295
 801eff0:	2400      	movs	r4, #0
 801eff2:	9304      	str	r3, [sp, #16]
 801eff4:	f9b7 30a4 	ldrsh.w	r3, [r7, #164]	; 0xa4
 801eff8:	f109 32ff 	add.w	r2, r9, #4294967295
 801effc:	9300      	str	r3, [sp, #0]
 801effe:	4690      	mov	r8, r2
 801f000:	f9b7 30a6 	ldrsh.w	r3, [r7, #166]	; 0xa6
 801f004:	9303      	str	r3, [sp, #12]
 801f006:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 801f00a:	f1b8 3fff 	cmp.w	r8, #4294967295
 801f00e:	6818      	ldr	r0, [r3, #0]
 801f010:	f10d 0c28 	add.w	ip, sp, #40	; 0x28
 801f014:	9206      	str	r2, [sp, #24]
 801f016:	bf16      	itet	ne
 801f018:	9904      	ldrne	r1, [sp, #16]
 801f01a:	f8dd e008 	ldreq.w	lr, [sp, #8]
 801f01e:	eb01 0ec8 	addne.w	lr, r1, r8, lsl #3
 801f022:	9305      	str	r3, [sp, #20]
 801f024:	f8be 1006 	ldrh.w	r1, [lr, #6]
 801f028:	f8be 6004 	ldrh.w	r6, [lr, #4]
 801f02c:	fb16 f601 	smulbb	r6, r6, r1
 801f030:	6859      	ldr	r1, [r3, #4]
 801f032:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 801f036:	4671      	mov	r1, lr
 801f038:	a80a      	add	r0, sp, #40	; 0x28
 801f03a:	f7fb fdd6 	bl	801abea <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801f03e:	f8bd 002e 	ldrh.w	r0, [sp, #46]	; 0x2e
 801f042:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 801f046:	9b03      	ldr	r3, [sp, #12]
 801f048:	9a00      	ldr	r2, [sp, #0]
 801f04a:	fb11 f100 	smulbb	r1, r1, r0
 801f04e:	2008      	movs	r0, #8
 801f050:	fb02 6603 	mla	r6, r2, r3, r6
 801f054:	1b8e      	subs	r6, r1, r6
 801f056:	fb91 f1f0 	sdiv	r1, r1, r0
 801f05a:	42b1      	cmp	r1, r6
 801f05c:	dc21      	bgt.n	801f0a2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5fa>
 801f05e:	4556      	cmp	r6, sl
 801f060:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
 801f064:	da03      	bge.n	801f06e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5c6>
 801f066:	b1e6      	cbz	r6, 801f0a2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5fa>
 801f068:	46b2      	mov	sl, r6
 801f06a:	4645      	mov	r5, r8
 801f06c:	464c      	mov	r4, r9
 801f06e:	f108 38ff 	add.w	r8, r8, #4294967295
 801f072:	f118 0f02 	cmn.w	r8, #2
 801f076:	d1c8      	bne.n	801f00a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x562>
 801f078:	f1b2 3fff 	cmp.w	r2, #4294967295
 801f07c:	f1a7 0708 	sub.w	r7, r7, #8
 801f080:	4691      	mov	r9, r2
 801f082:	d1b7      	bne.n	801eff4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x54c>
 801f084:	9b01      	ldr	r3, [sp, #4]
 801f086:	b2a6      	uxth	r6, r4
 801f088:	00e4      	lsls	r4, r4, #3
 801f08a:	1918      	adds	r0, r3, r4
 801f08c:	1c6b      	adds	r3, r5, #1
 801f08e:	d10b      	bne.n	801f0a8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x600>
 801f090:	4601      	mov	r1, r0
 801f092:	9802      	ldr	r0, [sp, #8]
 801f094:	f7fb fda9 	bl	801abea <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801f098:	4631      	mov	r1, r6
 801f09a:	9801      	ldr	r0, [sp, #4]
 801f09c:	f7ff fcc0 	bl	801ea20 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801f0a0:	e50f      	b.n	801eac2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 801f0a2:	4645      	mov	r5, r8
 801f0a4:	464c      	mov	r4, r9
 801f0a6:	e7ed      	b.n	801f084 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5dc>
 801f0a8:	9b01      	ldr	r3, [sp, #4]
 801f0aa:	00ed      	lsls	r5, r5, #3
 801f0ac:	445c      	add	r4, fp
 801f0ae:	1959      	adds	r1, r3, r5
 801f0b0:	445d      	add	r5, fp
 801f0b2:	f7fb fd9a 	bl	801abea <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801f0b6:	9b02      	ldr	r3, [sp, #8]
 801f0b8:	cb03      	ldmia	r3!, {r0, r1}
 801f0ba:	9b02      	ldr	r3, [sp, #8]
 801f0bc:	f8c5 00a8 	str.w	r0, [r5, #168]	; 0xa8
 801f0c0:	f8c5 10ac 	str.w	r1, [r5, #172]	; 0xac
 801f0c4:	f854 0fa8 	ldr.w	r0, [r4, #168]!
 801f0c8:	6861      	ldr	r1, [r4, #4]
 801f0ca:	c303      	stmia	r3!, {r0, r1}
 801f0cc:	e7e4      	b.n	801f098 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5f0>
	...

0801f0d0 <_ZN8touchgfx11Application4drawERNS_4RectE>:
 801f0d0:	4b1d      	ldr	r3, [pc, #116]	; (801f148 <_ZN8touchgfx11Application4drawERNS_4RectE+0x78>)
 801f0d2:	b530      	push	{r4, r5, lr}
 801f0d4:	f9b3 2000 	ldrsh.w	r2, [r3]
 801f0d8:	b085      	sub	sp, #20
 801f0da:	4b1c      	ldr	r3, [pc, #112]	; (801f14c <_ZN8touchgfx11Application4drawERNS_4RectE+0x7c>)
 801f0dc:	460c      	mov	r4, r1
 801f0de:	2100      	movs	r1, #0
 801f0e0:	4605      	mov	r5, r0
 801f0e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 801f0e6:	6820      	ldr	r0, [r4, #0]
 801f0e8:	9100      	str	r1, [sp, #0]
 801f0ea:	f8ad 3006 	strh.w	r3, [sp, #6]
 801f0ee:	ab02      	add	r3, sp, #8
 801f0f0:	6861      	ldr	r1, [r4, #4]
 801f0f2:	f8ad 2004 	strh.w	r2, [sp, #4]
 801f0f6:	c303      	stmia	r3!, {r0, r1}
 801f0f8:	4669      	mov	r1, sp
 801f0fa:	a802      	add	r0, sp, #8
 801f0fc:	f7f9 f8ca 	bl	8018294 <_ZN8touchgfx4RectaNERKS0_>
 801f100:	ab02      	add	r3, sp, #8
 801f102:	cb03      	ldmia	r3!, {r0, r1}
 801f104:	4b12      	ldr	r3, [pc, #72]	; (801f150 <_ZN8touchgfx11Application4drawERNS_4RectE+0x80>)
 801f106:	6020      	str	r0, [r4, #0]
 801f108:	6818      	ldr	r0, [r3, #0]
 801f10a:	6061      	str	r1, [r4, #4]
 801f10c:	b138      	cbz	r0, 801f11e <_ZN8touchgfx11Application4drawERNS_4RectE+0x4e>
 801f10e:	f895 3134 	ldrb.w	r3, [r5, #308]	; 0x134
 801f112:	b133      	cbz	r3, 801f122 <_ZN8touchgfx11Application4drawERNS_4RectE+0x52>
 801f114:	6821      	ldr	r1, [r4, #0]
 801f116:	4628      	mov	r0, r5
 801f118:	6862      	ldr	r2, [r4, #4]
 801f11a:	f7ff fcc5 	bl	801eaa8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801f11e:	b005      	add	sp, #20
 801f120:	bd30      	pop	{r4, r5, pc}
 801f122:	6803      	ldr	r3, [r0, #0]
 801f124:	4621      	mov	r1, r4
 801f126:	689b      	ldr	r3, [r3, #8]
 801f128:	4798      	blx	r3
 801f12a:	4b0a      	ldr	r3, [pc, #40]	; (801f154 <_ZN8touchgfx11Application4drawERNS_4RectE+0x84>)
 801f12c:	6818      	ldr	r0, [r3, #0]
 801f12e:	b118      	cbz	r0, 801f138 <_ZN8touchgfx11Application4drawERNS_4RectE+0x68>
 801f130:	6803      	ldr	r3, [r0, #0]
 801f132:	4621      	mov	r1, r4
 801f134:	689b      	ldr	r3, [r3, #8]
 801f136:	4798      	blx	r3
 801f138:	4b07      	ldr	r3, [pc, #28]	; (801f158 <_ZN8touchgfx11Application4drawERNS_4RectE+0x88>)
 801f13a:	4621      	mov	r1, r4
 801f13c:	6818      	ldr	r0, [r3, #0]
 801f13e:	6803      	ldr	r3, [r0, #0]
 801f140:	69db      	ldr	r3, [r3, #28]
 801f142:	4798      	blx	r3
 801f144:	e7eb      	b.n	801f11e <_ZN8touchgfx11Application4drawERNS_4RectE+0x4e>
 801f146:	bf00      	nop
 801f148:	2400c8b0 	.word	0x2400c8b0
 801f14c:	2400c8b2 	.word	0x2400c8b2
 801f150:	2400c918 	.word	0x2400c918
 801f154:	2400c914 	.word	0x2400c914
 801f158:	2400c8bc 	.word	0x2400c8bc

0801f15c <_ZN8touchgfx11Application19cacheDrawOperationsEb>:
 801f15c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f160:	4604      	mov	r4, r0
 801f162:	b09b      	sub	sp, #108	; 0x6c
 801f164:	f880 1134 	strb.w	r1, [r0, #308]	; 0x134
 801f168:	b129      	cbz	r1, 801f176 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1a>
 801f16a:	2300      	movs	r3, #0
 801f16c:	f8a0 30e8 	strh.w	r3, [r0, #232]	; 0xe8
 801f170:	b01b      	add	sp, #108	; 0x6c
 801f172:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f176:	f500 7696 	add.w	r6, r0, #300	; 0x12c
 801f17a:	4630      	mov	r0, r6
 801f17c:	f7f9 f8cd 	bl	801831a <_ZNK8touchgfx4Rect7isEmptyEv>
 801f180:	4605      	mov	r5, r0
 801f182:	b940      	cbnz	r0, 801f196 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x3a>
 801f184:	4620      	mov	r0, r4
 801f186:	e896 0006 	ldmia.w	r6, {r1, r2}
 801f18a:	f7ff fc8d 	bl	801eaa8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801f18e:	f8c4 512c 	str.w	r5, [r4, #300]	; 0x12c
 801f192:	f8c4 5130 	str.w	r5, [r4, #304]	; 0x130
 801f196:	4ba6      	ldr	r3, [pc, #664]	; (801f430 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2d4>)
 801f198:	681b      	ldr	r3, [r3, #0]
 801f19a:	b33b      	cbz	r3, 801f1ec <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x90>
 801f19c:	4da5      	ldr	r5, [pc, #660]	; (801f434 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2d8>)
 801f19e:	4628      	mov	r0, r5
 801f1a0:	f7f9 f8bb 	bl	801831a <_ZNK8touchgfx4Rect7isEmptyEv>
 801f1a4:	4606      	mov	r6, r0
 801f1a6:	bb08      	cbnz	r0, 801f1ec <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x90>
 801f1a8:	4628      	mov	r0, r5
 801f1aa:	f7ff f9fd 	bl	801e5a8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 801f1ae:	6829      	ldr	r1, [r5, #0]
 801f1b0:	686a      	ldr	r2, [r5, #4]
 801f1b2:	4620      	mov	r0, r4
 801f1b4:	f7ff fc78 	bl	801eaa8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801f1b8:	802e      	strh	r6, [r5, #0]
 801f1ba:	806e      	strh	r6, [r5, #2]
 801f1bc:	80ae      	strh	r6, [r5, #4]
 801f1be:	80ee      	strh	r6, [r5, #6]
 801f1c0:	4f9d      	ldr	r7, [pc, #628]	; (801f438 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2dc>)
 801f1c2:	a809      	add	r0, sp, #36	; 0x24
 801f1c4:	f7ff fbd7 	bl	801e976 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801f1c8:	883d      	ldrh	r5, [r7, #0]
 801f1ca:	462e      	mov	r6, r5
 801f1cc:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801f1d0:	42b3      	cmp	r3, r6
 801f1d2:	d910      	bls.n	801f1f6 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x9a>
 801f1d4:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 801f1d8:	3601      	adds	r6, #1
 801f1da:	a809      	add	r0, sp, #36	; 0x24
 801f1dc:	f8d3 10a8 	ldr.w	r1, [r3, #168]	; 0xa8
 801f1e0:	b2b6      	uxth	r6, r6
 801f1e2:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 801f1e6:	f7ff fc3d 	bl	801ea64 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 801f1ea:	e7ef      	b.n	801f1cc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x70>
 801f1ec:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801f1f0:	2b00      	cmp	r3, #0
 801f1f2:	d1e5      	bne.n	801f1c0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x64>
 801f1f4:	e7bc      	b.n	801f170 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 801f1f6:	462e      	mov	r6, r5
 801f1f8:	f8b4 312a 	ldrh.w	r3, [r4, #298]	; 0x12a
 801f1fc:	42b3      	cmp	r3, r6
 801f1fe:	d90b      	bls.n	801f218 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xbc>
 801f200:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 801f204:	3601      	adds	r6, #1
 801f206:	4620      	mov	r0, r4
 801f208:	f8d3 10ea 	ldr.w	r1, [r3, #234]	; 0xea
 801f20c:	b2b6      	uxth	r6, r6
 801f20e:	f8d3 20ee 	ldr.w	r2, [r3, #238]	; 0xee
 801f212:	f7ff fc49 	bl	801eaa8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801f216:	e7ef      	b.n	801f1f8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x9c>
 801f218:	4a88      	ldr	r2, [pc, #544]	; (801f43c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e0>)
 801f21a:	6813      	ldr	r3, [r2, #0]
 801f21c:	4690      	mov	r8, r2
 801f21e:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801f222:	2b01      	cmp	r3, #1
 801f224:	f040 8094 	bne.w	801f350 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1f4>
 801f228:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
 801f22c:	f8b4 00e8 	ldrh.w	r0, [r4, #232]	; 0xe8
 801f230:	f04f 0900 	mov.w	r9, #0
 801f234:	33aa      	adds	r3, #170	; 0xaa
 801f236:	42a8      	cmp	r0, r5
 801f238:	f103 0308 	add.w	r3, r3, #8
 801f23c:	dd0a      	ble.n	801f254 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xf8>
 801f23e:	f833 2c08 	ldrh.w	r2, [r3, #-8]
 801f242:	3501      	adds	r5, #1
 801f244:	f833 1c04 	ldrh.w	r1, [r3, #-4]
 801f248:	440a      	add	r2, r1
 801f24a:	b212      	sxth	r2, r2
 801f24c:	4591      	cmp	r9, r2
 801f24e:	bfb8      	it	lt
 801f250:	4691      	movlt	r9, r2
 801f252:	e7f0      	b.n	801f236 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xda>
 801f254:	4b7a      	ldr	r3, [pc, #488]	; (801f440 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e4>)
 801f256:	4e7b      	ldr	r6, [pc, #492]	; (801f444 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e8>)
 801f258:	881d      	ldrh	r5, [r3, #0]
 801f25a:	2300      	movs	r3, #0
 801f25c:	2d0f      	cmp	r5, #15
 801f25e:	bf8c      	ite	hi
 801f260:	08ed      	lsrhi	r5, r5, #3
 801f262:	2501      	movls	r5, #1
 801f264:	e9cd 3305 	strd	r3, r3, [sp, #20]
 801f268:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 801f26c:	f8bd 101a 	ldrh.w	r1, [sp, #26]
 801f270:	f8d8 0000 	ldr.w	r0, [r8]
 801f274:	440b      	add	r3, r1
 801f276:	6802      	ldr	r2, [r0, #0]
 801f278:	b21b      	sxth	r3, r3
 801f27a:	4599      	cmp	r9, r3
 801f27c:	dd4b      	ble.n	801f316 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1ba>
 801f27e:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 801f282:	4798      	blx	r3
 801f284:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801f288:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 801f28c:	4413      	add	r3, r2
 801f28e:	b21b      	sxth	r3, r3
 801f290:	195a      	adds	r2, r3, r5
 801f292:	4290      	cmp	r0, r2
 801f294:	da07      	bge.n	801f2a6 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14a>
 801f296:	4581      	cmp	r9, r0
 801f298:	dd05      	ble.n	801f2a6 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14a>
 801f29a:	4298      	cmp	r0, r3
 801f29c:	da33      	bge.n	801f306 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1aa>
 801f29e:	2b00      	cmp	r3, #0
 801f2a0:	dd31      	ble.n	801f306 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1aa>
 801f2a2:	4648      	mov	r0, r9
 801f2a4:	e004      	b.n	801f2b0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x154>
 801f2a6:	4298      	cmp	r0, r3
 801f2a8:	dbfb      	blt.n	801f2a2 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x146>
 801f2aa:	4548      	cmp	r0, r9
 801f2ac:	bfa8      	it	ge
 801f2ae:	4648      	movge	r0, r9
 801f2b0:	f9b6 2000 	ldrsh.w	r2, [r6]
 801f2b4:	2100      	movs	r1, #0
 801f2b6:	1ac0      	subs	r0, r0, r3
 801f2b8:	f8b7 a000 	ldrh.w	sl, [r7]
 801f2bc:	f8ad 1014 	strh.w	r1, [sp, #20]
 801f2c0:	f8ad 3016 	strh.w	r3, [sp, #22]
 801f2c4:	f8ad 2018 	strh.w	r2, [sp, #24]
 801f2c8:	f8ad 001a 	strh.w	r0, [sp, #26]
 801f2cc:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801f2d0:	4553      	cmp	r3, sl
 801f2d2:	d9c9      	bls.n	801f268 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x10c>
 801f2d4:	eb04 02ca 	add.w	r2, r4, sl, lsl #3
 801f2d8:	ab07      	add	r3, sp, #28
 801f2da:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 801f2de:	6851      	ldr	r1, [r2, #4]
 801f2e0:	c303      	stmia	r3!, {r0, r1}
 801f2e2:	a807      	add	r0, sp, #28
 801f2e4:	a905      	add	r1, sp, #20
 801f2e6:	f7f8 ffd5 	bl	8018294 <_ZN8touchgfx4RectaNERKS0_>
 801f2ea:	a807      	add	r0, sp, #28
 801f2ec:	f7f9 f815 	bl	801831a <_ZNK8touchgfx4Rect7isEmptyEv>
 801f2f0:	b920      	cbnz	r0, 801f2fc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1a0>
 801f2f2:	6823      	ldr	r3, [r4, #0]
 801f2f4:	a907      	add	r1, sp, #28
 801f2f6:	4620      	mov	r0, r4
 801f2f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801f2fa:	4798      	blx	r3
 801f2fc:	f10a 0a01 	add.w	sl, sl, #1
 801f300:	fa1f fa8a 	uxth.w	sl, sl
 801f304:	e7e2      	b.n	801f2cc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x170>
 801f306:	f8d8 0000 	ldr.w	r0, [r8]
 801f30a:	2101      	movs	r1, #1
 801f30c:	6803      	ldr	r3, [r0, #0]
 801f30e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801f312:	4798      	blx	r3
 801f314:	e7a8      	b.n	801f268 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x10c>
 801f316:	6a53      	ldr	r3, [r2, #36]	; 0x24
 801f318:	4798      	blx	r3
 801f31a:	4b4b      	ldr	r3, [pc, #300]	; (801f448 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2ec>)
 801f31c:	781b      	ldrb	r3, [r3, #0]
 801f31e:	2b00      	cmp	r3, #0
 801f320:	f43f af26 	beq.w	801f170 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 801f324:	2300      	movs	r3, #0
 801f326:	883d      	ldrh	r5, [r7, #0]
 801f328:	34ea      	adds	r4, #234	; 0xea
 801f32a:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
 801f32e:	f8bd 3064 	ldrh.w	r3, [sp, #100]	; 0x64
 801f332:	42ab      	cmp	r3, r5
 801f334:	f67f af1c 	bls.w	801f170 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 801f338:	ab1a      	add	r3, sp, #104	; 0x68
 801f33a:	4620      	mov	r0, r4
 801f33c:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801f340:	3501      	adds	r5, #1
 801f342:	3b44      	subs	r3, #68	; 0x44
 801f344:	b2ad      	uxth	r5, r5
 801f346:	e893 0006 	ldmia.w	r3, {r1, r2}
 801f34a:	f7ff fb8b 	bl	801ea64 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 801f34e:	e7ee      	b.n	801f32e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1d2>
 801f350:	2b02      	cmp	r3, #2
 801f352:	f040 813d 	bne.w	801f5d0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x474>
 801f356:	4b3d      	ldr	r3, [pc, #244]	; (801f44c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2f0>)
 801f358:	781b      	ldrb	r3, [r3, #0]
 801f35a:	2b01      	cmp	r3, #1
 801f35c:	d02c      	beq.n	801f3b8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x25c>
 801f35e:	f104 0ba8 	add.w	fp, r4, #168	; 0xa8
 801f362:	883a      	ldrh	r2, [r7, #0]
 801f364:	f8b4 10e8 	ldrh.w	r1, [r4, #232]	; 0xe8
 801f368:	3201      	adds	r2, #1
 801f36a:	b292      	uxth	r2, r2
 801f36c:	2900      	cmp	r1, #0
 801f36e:	d0d4      	beq.n	801f31a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1be>
 801f370:	f8b4 50aa 	ldrh.w	r5, [r4, #170]	; 0xaa
 801f374:	4610      	mov	r0, r2
 801f376:	f8b4 30ae 	ldrh.w	r3, [r4, #174]	; 0xae
 801f37a:	f04f 0a00 	mov.w	sl, #0
 801f37e:	441d      	add	r5, r3
 801f380:	b22d      	sxth	r5, r5
 801f382:	b283      	uxth	r3, r0
 801f384:	ea4f 06ca 	mov.w	r6, sl, lsl #3
 801f388:	4299      	cmp	r1, r3
 801f38a:	f240 80c3 	bls.w	801f514 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x3b8>
 801f38e:	4426      	add	r6, r4
 801f390:	eb04 09c0 	add.w	r9, r4, r0, lsl #3
 801f394:	4684      	mov	ip, r0
 801f396:	f9b6 30aa 	ldrsh.w	r3, [r6, #170]	; 0xaa
 801f39a:	f9b9 e0aa 	ldrsh.w	lr, [r9, #170]	; 0xaa
 801f39e:	4573      	cmp	r3, lr
 801f3a0:	f340 80a5 	ble.w	801f4ee <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x392>
 801f3a4:	f8b9 50ae 	ldrh.w	r5, [r9, #174]	; 0xae
 801f3a8:	4475      	add	r5, lr
 801f3aa:	b22d      	sxth	r5, r5
 801f3ac:	429d      	cmp	r5, r3
 801f3ae:	bfa8      	it	ge
 801f3b0:	461d      	movge	r5, r3
 801f3b2:	3001      	adds	r0, #1
 801f3b4:	46e2      	mov	sl, ip
 801f3b6:	e7e4      	b.n	801f382 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x226>
 801f3b8:	f104 09a8 	add.w	r9, r4, #168	; 0xa8
 801f3bc:	f8b4 b0e8 	ldrh.w	fp, [r4, #232]	; 0xe8
 801f3c0:	f1bb 0f00 	cmp.w	fp, #0
 801f3c4:	d0a9      	beq.n	801f31a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1be>
 801f3c6:	883b      	ldrh	r3, [r7, #0]
 801f3c8:	2600      	movs	r6, #0
 801f3ca:	f9b4 20a8 	ldrsh.w	r2, [r4, #168]	; 0xa8
 801f3ce:	3301      	adds	r3, #1
 801f3d0:	b29b      	uxth	r3, r3
 801f3d2:	b299      	uxth	r1, r3
 801f3d4:	00f5      	lsls	r5, r6, #3
 801f3d6:	458b      	cmp	fp, r1
 801f3d8:	d93a      	bls.n	801f450 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2f4>
 801f3da:	4425      	add	r5, r4
 801f3dc:	eb04 0ac3 	add.w	sl, r4, r3, lsl #3
 801f3e0:	469c      	mov	ip, r3
 801f3e2:	f8b5 10ac 	ldrh.w	r1, [r5, #172]	; 0xac
 801f3e6:	f8b5 00a8 	ldrh.w	r0, [r5, #168]	; 0xa8
 801f3ea:	f9ba e0a8 	ldrsh.w	lr, [sl, #168]	; 0xa8
 801f3ee:	4408      	add	r0, r1
 801f3f0:	f8ba 10ac 	ldrh.w	r1, [sl, #172]	; 0xac
 801f3f4:	4471      	add	r1, lr
 801f3f6:	b200      	sxth	r0, r0
 801f3f8:	b209      	sxth	r1, r1
 801f3fa:	4288      	cmp	r0, r1
 801f3fc:	da06      	bge.n	801f40c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2b0>
 801f3fe:	4586      	cmp	lr, r0
 801f400:	4672      	mov	r2, lr
 801f402:	bfb8      	it	lt
 801f404:	4602      	movlt	r2, r0
 801f406:	3301      	adds	r3, #1
 801f408:	4666      	mov	r6, ip
 801f40a:	e7e2      	b.n	801f3d2 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x276>
 801f40c:	d10b      	bne.n	801f426 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2ca>
 801f40e:	f9b5 c0ae 	ldrsh.w	ip, [r5, #174]	; 0xae
 801f412:	f9ba 10ae 	ldrsh.w	r1, [sl, #174]	; 0xae
 801f416:	458c      	cmp	ip, r1
 801f418:	bfb4      	ite	lt
 801f41a:	469c      	movlt	ip, r3
 801f41c:	46b4      	movge	ip, r6
 801f41e:	4572      	cmp	r2, lr
 801f420:	bfb8      	it	lt
 801f422:	4672      	movlt	r2, lr
 801f424:	e7ef      	b.n	801f406 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2aa>
 801f426:	428a      	cmp	r2, r1
 801f428:	46b4      	mov	ip, r6
 801f42a:	bfb8      	it	lt
 801f42c:	460a      	movlt	r2, r1
 801f42e:	e7ea      	b.n	801f406 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2aa>
 801f430:	2400c914 	.word	0x2400c914
 801f434:	2400c920 	.word	0x2400c920
 801f438:	24000050 	.word	0x24000050
 801f43c:	2400c8bc 	.word	0x2400c8bc
 801f440:	2400c8b2 	.word	0x2400c8b2
 801f444:	2400c8b0 	.word	0x2400c8b0
 801f448:	2400c8ba 	.word	0x2400c8ba
 801f44c:	2400c8b4 	.word	0x2400c8b4
 801f450:	1961      	adds	r1, r4, r5
 801f452:	ab07      	add	r3, sp, #28
 801f454:	f851 0fa8 	ldr.w	r0, [r1, #168]!
 801f458:	6849      	ldr	r1, [r1, #4]
 801f45a:	c303      	stmia	r3!, {r0, r1}
 801f45c:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 801f460:	a807      	add	r0, sp, #28
 801f462:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801f466:	2b13      	cmp	r3, #19
 801f468:	440b      	add	r3, r1
 801f46a:	bfd8      	it	le
 801f46c:	f9bd 201c 	ldrshle.w	r2, [sp, #28]
 801f470:	1a9b      	subs	r3, r3, r2
 801f472:	f8ad 201c 	strh.w	r2, [sp, #28]
 801f476:	f8ad 3020 	strh.w	r3, [sp, #32]
 801f47a:	f7ff f8af 	bl	801e5dc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801f47e:	a807      	add	r0, sp, #28
 801f480:	f7f8 ff4b 	bl	801831a <_ZNK8touchgfx4Rect7isEmptyEv>
 801f484:	2800      	cmp	r0, #0
 801f486:	d199      	bne.n	801f3bc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x260>
 801f488:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
 801f48c:	4425      	add	r5, r4
 801f48e:	f8d8 0000 	ldr.w	r0, [r8]
 801f492:	f1bc 0f14 	cmp.w	ip, #20
 801f496:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801f49a:	f8d0 e000 	ldr.w	lr, [r0]
 801f49e:	bfa8      	it	ge
 801f4a0:	f04f 0c14 	movge.w	ip, #20
 801f4a4:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 801f4a8:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801f4ac:	fa1f fc8c 	uxth.w	ip, ip
 801f4b0:	f8cd c000 	str.w	ip, [sp]
 801f4b4:	f8de a088 	ldr.w	sl, [lr, #136]	; 0x88
 801f4b8:	47d0      	blx	sl
 801f4ba:	4682      	mov	sl, r0
 801f4bc:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 801f4c0:	a807      	add	r0, sp, #28
 801f4c2:	f7ff f871 	bl	801e5a8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 801f4c6:	6823      	ldr	r3, [r4, #0]
 801f4c8:	4620      	mov	r0, r4
 801f4ca:	a907      	add	r1, sp, #28
 801f4cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801f4ce:	4798      	blx	r3
 801f4d0:	f8b5 00ac 	ldrh.w	r0, [r5, #172]	; 0xac
 801f4d4:	eba0 000a 	sub.w	r0, r0, sl
 801f4d8:	b200      	sxth	r0, r0
 801f4da:	f8a5 00ac 	strh.w	r0, [r5, #172]	; 0xac
 801f4de:	2800      	cmp	r0, #0
 801f4e0:	f47f af6c 	bne.w	801f3bc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x260>
 801f4e4:	b2b1      	uxth	r1, r6
 801f4e6:	4648      	mov	r0, r9
 801f4e8:	f7ff fa9a 	bl	801ea20 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801f4ec:	e766      	b.n	801f3bc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x260>
 801f4ee:	d10c      	bne.n	801f50a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x3ae>
 801f4f0:	f9b6 c0ac 	ldrsh.w	ip, [r6, #172]	; 0xac
 801f4f4:	f9b9 60ac 	ldrsh.w	r6, [r9, #172]	; 0xac
 801f4f8:	45b4      	cmp	ip, r6
 801f4fa:	bfb4      	ite	lt
 801f4fc:	4684      	movlt	ip, r0
 801f4fe:	46d4      	movge	ip, sl
 801f500:	f8b9 60ae 	ldrh.w	r6, [r9, #174]	; 0xae
 801f504:	4433      	add	r3, r6
 801f506:	b21b      	sxth	r3, r3
 801f508:	e750      	b.n	801f3ac <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x250>
 801f50a:	4575      	cmp	r5, lr
 801f50c:	46d4      	mov	ip, sl
 801f50e:	bfa8      	it	ge
 801f510:	4675      	movge	r5, lr
 801f512:	e74e      	b.n	801f3b2 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x256>
 801f514:	eb0b 0006 	add.w	r0, fp, r6
 801f518:	4426      	add	r6, r4
 801f51a:	f9b6 90ae 	ldrsh.w	r9, [r6, #174]	; 0xae
 801f51e:	f1b9 0f13 	cmp.w	r9, #19
 801f522:	bfdc      	itt	le
 801f524:	f8b6 50aa 	ldrhle.w	r5, [r6, #170]	; 0xaa
 801f528:	444d      	addle	r5, r9
 801f52a:	e9cd 1202 	strd	r1, r2, [sp, #8]
 801f52e:	bfd8      	it	le
 801f530:	b22d      	sxthle	r5, r5
 801f532:	f7f8 fef2 	bl	801831a <_ZNK8touchgfx4Rect7isEmptyEv>
 801f536:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 801f53a:	2800      	cmp	r0, #0
 801f53c:	f47f af16 	bne.w	801f36c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x210>
 801f540:	f9b6 c0aa 	ldrsh.w	ip, [r6, #170]	; 0xaa
 801f544:	fa1f f989 	uxth.w	r9, r9
 801f548:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 801f54c:	eba5 050c 	sub.w	r5, r5, ip
 801f550:	fa1f f28c 	uxth.w	r2, ip
 801f554:	f9b6 10a8 	ldrsh.w	r1, [r6, #168]	; 0xa8
 801f558:	eb02 0009 	add.w	r0, r2, r9
 801f55c:	2d14      	cmp	r5, #20
 801f55e:	f9b6 30ac 	ldrsh.w	r3, [r6, #172]	; 0xac
 801f562:	bfa8      	it	ge
 801f564:	2514      	movge	r5, #20
 801f566:	b200      	sxth	r0, r0
 801f568:	f8ad 101c 	strh.w	r1, [sp, #28]
 801f56c:	b289      	uxth	r1, r1
 801f56e:	fa1f fe85 	uxth.w	lr, r5
 801f572:	eba0 000c 	sub.w	r0, r0, ip
 801f576:	f8ad c01e 	strh.w	ip, [sp, #30]
 801f57a:	4586      	cmp	lr, r0
 801f57c:	f8d8 0000 	ldr.w	r0, [r8]
 801f580:	f8ad 3020 	strh.w	r3, [sp, #32]
 801f584:	b29b      	uxth	r3, r3
 801f586:	bfb8      	it	lt
 801f588:	46f1      	movlt	r9, lr
 801f58a:	6805      	ldr	r5, [r0, #0]
 801f58c:	f8cd 9000 	str.w	r9, [sp]
 801f590:	f8d5 5088 	ldr.w	r5, [r5, #136]	; 0x88
 801f594:	47a8      	blx	r5
 801f596:	6823      	ldr	r3, [r4, #0]
 801f598:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 801f59c:	a907      	add	r1, sp, #28
 801f59e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801f5a0:	4620      	mov	r0, r4
 801f5a2:	4798      	blx	r3
 801f5a4:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 801f5a8:	f8b6 30ae 	ldrh.w	r3, [r6, #174]	; 0xae
 801f5ac:	f8b6 20aa 	ldrh.w	r2, [r6, #170]	; 0xaa
 801f5b0:	1a5b      	subs	r3, r3, r1
 801f5b2:	440a      	add	r2, r1
 801f5b4:	b21b      	sxth	r3, r3
 801f5b6:	f8a6 20aa 	strh.w	r2, [r6, #170]	; 0xaa
 801f5ba:	f8a6 30ae 	strh.w	r3, [r6, #174]	; 0xae
 801f5be:	2b00      	cmp	r3, #0
 801f5c0:	f47f aecf 	bne.w	801f362 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x206>
 801f5c4:	fa1f f18a 	uxth.w	r1, sl
 801f5c8:	4658      	mov	r0, fp
 801f5ca:	f7ff fa29 	bl	801ea20 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801f5ce:	e6c8      	b.n	801f362 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x206>
 801f5d0:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801f5d4:	42ab      	cmp	r3, r5
 801f5d6:	f67f aea0 	bls.w	801f31a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1be>
 801f5da:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
 801f5de:	ab07      	add	r3, sp, #28
 801f5e0:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 801f5e4:	6851      	ldr	r1, [r2, #4]
 801f5e6:	c303      	stmia	r3!, {r0, r1}
 801f5e8:	a807      	add	r0, sp, #28
 801f5ea:	f7f8 fe96 	bl	801831a <_ZNK8touchgfx4Rect7isEmptyEv>
 801f5ee:	b920      	cbnz	r0, 801f5fa <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x49e>
 801f5f0:	6823      	ldr	r3, [r4, #0]
 801f5f2:	a907      	add	r1, sp, #28
 801f5f4:	4620      	mov	r0, r4
 801f5f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801f5f8:	4798      	blx	r3
 801f5fa:	3501      	adds	r5, #1
 801f5fc:	b2ad      	uxth	r5, r5
 801f5fe:	e7e7      	b.n	801f5d0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x474>

0801f600 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 801f600:	4b03      	ldr	r3, [pc, #12]	; (801f610 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 801f602:	2200      	movs	r2, #0
 801f604:	801a      	strh	r2, [r3, #0]
 801f606:	805a      	strh	r2, [r3, #2]
 801f608:	809a      	strh	r2, [r3, #4]
 801f60a:	80da      	strh	r2, [r3, #6]
 801f60c:	4770      	bx	lr
 801f60e:	bf00      	nop
 801f610:	2400c920 	.word	0x2400c920

0801f614 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 801f614:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f618:	b09d      	sub	sp, #116	; 0x74
 801f61a:	4606      	mov	r6, r0
 801f61c:	4614      	mov	r4, r2
 801f61e:	468a      	mov	sl, r1
 801f620:	a803      	add	r0, sp, #12
 801f622:	461d      	mov	r5, r3
 801f624:	f000 fe94 	bl	8020350 <_ZN8touchgfx12TextProviderC1Ev>
 801f628:	6833      	ldr	r3, [r6, #0]
 801f62a:	4630      	mov	r0, r6
 801f62c:	f242 0b0b 	movw	fp, #8203	; 0x200b
 801f630:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801f632:	4798      	blx	r3
 801f634:	6833      	ldr	r3, [r6, #0]
 801f636:	4607      	mov	r7, r0
 801f638:	4630      	mov	r0, r6
 801f63a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801f63c:	4798      	blx	r3
 801f63e:	462a      	mov	r2, r5
 801f640:	2500      	movs	r5, #0
 801f642:	4621      	mov	r1, r4
 801f644:	9000      	str	r0, [sp, #0]
 801f646:	463b      	mov	r3, r7
 801f648:	462c      	mov	r4, r5
 801f64a:	46a9      	mov	r9, r5
 801f64c:	46a8      	mov	r8, r5
 801f64e:	a803      	add	r0, sp, #12
 801f650:	f000 fed1 	bl	80203f6 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801f654:	2300      	movs	r3, #0
 801f656:	9302      	str	r3, [sp, #8]
 801f658:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801f65c:	429c      	cmp	r4, r3
 801f65e:	d002      	beq.n	801f666 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x52>
 801f660:	455c      	cmp	r4, fp
 801f662:	bf18      	it	ne
 801f664:	4625      	movne	r5, r4
 801f666:	ab02      	add	r3, sp, #8
 801f668:	4632      	mov	r2, r6
 801f66a:	4651      	mov	r1, sl
 801f66c:	a803      	add	r0, sp, #12
 801f66e:	f001 f9c3 	bl	80209f8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801f672:	4604      	mov	r4, r0
 801f674:	b108      	cbz	r0, 801f67a <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x66>
 801f676:	280a      	cmp	r0, #10
 801f678:	d10a      	bne.n	801f690 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x7c>
 801f67a:	45c1      	cmp	r9, r8
 801f67c:	bf38      	it	cc
 801f67e:	46c1      	movcc	r9, r8
 801f680:	f04f 0800 	mov.w	r8, #0
 801f684:	2c00      	cmp	r4, #0
 801f686:	d1e5      	bne.n	801f654 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 801f688:	4648      	mov	r0, r9
 801f68a:	b01d      	add	sp, #116	; 0x74
 801f68c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f690:	9a02      	ldr	r2, [sp, #8]
 801f692:	2a00      	cmp	r2, #0
 801f694:	d0de      	beq.n	801f654 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 801f696:	7b57      	ldrb	r7, [r2, #13]
 801f698:	4629      	mov	r1, r5
 801f69a:	6833      	ldr	r3, [r6, #0]
 801f69c:	007f      	lsls	r7, r7, #1
 801f69e:	8894      	ldrh	r4, [r2, #4]
 801f6a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801f6a2:	f407 7080 	and.w	r0, r7, #256	; 0x100
 801f6a6:	7a97      	ldrb	r7, [r2, #10]
 801f6a8:	4307      	orrs	r7, r0
 801f6aa:	4630      	mov	r0, r6
 801f6ac:	4798      	blx	r3
 801f6ae:	4438      	add	r0, r7
 801f6b0:	4480      	add	r8, r0
 801f6b2:	fa1f f888 	uxth.w	r8, r8
 801f6b6:	e7e5      	b.n	801f684 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x70>

0801f6b8 <_ZNK8touchgfx4Font12getCharWidthEt>:
 801f6b8:	b508      	push	{r3, lr}
 801f6ba:	6803      	ldr	r3, [r0, #0]
 801f6bc:	68db      	ldr	r3, [r3, #12]
 801f6be:	4798      	blx	r3
 801f6c0:	b128      	cbz	r0, 801f6ce <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 801f6c2:	7b43      	ldrb	r3, [r0, #13]
 801f6c4:	7a80      	ldrb	r0, [r0, #10]
 801f6c6:	005b      	lsls	r3, r3, #1
 801f6c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801f6cc:	4318      	orrs	r0, r3
 801f6ce:	bd08      	pop	{r3, pc}

0801f6d0 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 801f6d0:	b40e      	push	{r1, r2, r3}
 801f6d2:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f6d4:	b09e      	sub	sp, #120	; 0x78
 801f6d6:	4605      	mov	r5, r0
 801f6d8:	ab23      	add	r3, sp, #140	; 0x8c
 801f6da:	a805      	add	r0, sp, #20
 801f6dc:	f853 4b04 	ldr.w	r4, [r3], #4
 801f6e0:	9303      	str	r3, [sp, #12]
 801f6e2:	f000 fe35 	bl	8020350 <_ZN8touchgfx12TextProviderC1Ev>
 801f6e6:	682b      	ldr	r3, [r5, #0]
 801f6e8:	4628      	mov	r0, r5
 801f6ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801f6ec:	4798      	blx	r3
 801f6ee:	682b      	ldr	r3, [r5, #0]
 801f6f0:	4606      	mov	r6, r0
 801f6f2:	4628      	mov	r0, r5
 801f6f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801f6f6:	4798      	blx	r3
 801f6f8:	4633      	mov	r3, r6
 801f6fa:	4621      	mov	r1, r4
 801f6fc:	ae1e      	add	r6, sp, #120	; 0x78
 801f6fe:	2400      	movs	r4, #0
 801f700:	9000      	str	r0, [sp, #0]
 801f702:	9a03      	ldr	r2, [sp, #12]
 801f704:	a805      	add	r0, sp, #20
 801f706:	f000 fe76 	bl	80203f6 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801f70a:	f846 4d68 	str.w	r4, [r6, #-104]!
 801f70e:	462a      	mov	r2, r5
 801f710:	4633      	mov	r3, r6
 801f712:	4621      	mov	r1, r4
 801f714:	a805      	add	r0, sp, #20
 801f716:	f001 f96f 	bl	80209f8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801f71a:	b300      	cbz	r0, 801f75e <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x8e>
 801f71c:	280a      	cmp	r0, #10
 801f71e:	d01a      	beq.n	801f756 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 801f720:	9f04      	ldr	r7, [sp, #16]
 801f722:	b1c7      	cbz	r7, 801f756 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 801f724:	7b78      	ldrb	r0, [r7, #13]
 801f726:	7a3b      	ldrb	r3, [r7, #8]
 801f728:	00c1      	lsls	r1, r0, #3
 801f72a:	88aa      	ldrh	r2, [r5, #4]
 801f72c:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801f730:	4319      	orrs	r1, r3
 801f732:	0643      	lsls	r3, r0, #25
 801f734:	ea4f 1000 	mov.w	r0, r0, lsl #4
 801f738:	bf48      	it	mi
 801f73a:	f5a1 7300 	submi.w	r3, r1, #512	; 0x200
 801f73e:	f400 7080 	and.w	r0, r0, #256	; 0x100
 801f742:	bf48      	it	mi
 801f744:	b219      	sxthmi	r1, r3
 801f746:	79fb      	ldrb	r3, [r7, #7]
 801f748:	4303      	orrs	r3, r0
 801f74a:	4413      	add	r3, r2
 801f74c:	1a5b      	subs	r3, r3, r1
 801f74e:	b29b      	uxth	r3, r3
 801f750:	42a3      	cmp	r3, r4
 801f752:	bfc8      	it	gt
 801f754:	b21c      	sxthgt	r4, r3
 801f756:	4633      	mov	r3, r6
 801f758:	462a      	mov	r2, r5
 801f75a:	2100      	movs	r1, #0
 801f75c:	e7da      	b.n	801f714 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x44>
 801f75e:	b2a0      	uxth	r0, r4
 801f760:	b01e      	add	sp, #120	; 0x78
 801f762:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801f766:	b003      	add	sp, #12
 801f768:	4770      	bx	lr

0801f76a <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 801f76a:	b40e      	push	{r1, r2, r3}
 801f76c:	b570      	push	{r4, r5, r6, lr}
 801f76e:	b09d      	sub	sp, #116	; 0x74
 801f770:	4604      	mov	r4, r0
 801f772:	ab21      	add	r3, sp, #132	; 0x84
 801f774:	a803      	add	r0, sp, #12
 801f776:	f853 5b04 	ldr.w	r5, [r3], #4
 801f77a:	9302      	str	r3, [sp, #8]
 801f77c:	f000 fde8 	bl	8020350 <_ZN8touchgfx12TextProviderC1Ev>
 801f780:	6823      	ldr	r3, [r4, #0]
 801f782:	4620      	mov	r0, r4
 801f784:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801f786:	4798      	blx	r3
 801f788:	6823      	ldr	r3, [r4, #0]
 801f78a:	4606      	mov	r6, r0
 801f78c:	4620      	mov	r0, r4
 801f78e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801f790:	2401      	movs	r4, #1
 801f792:	4798      	blx	r3
 801f794:	4633      	mov	r3, r6
 801f796:	9000      	str	r0, [sp, #0]
 801f798:	4629      	mov	r1, r5
 801f79a:	9a02      	ldr	r2, [sp, #8]
 801f79c:	a803      	add	r0, sp, #12
 801f79e:	f000 fe2a 	bl	80203f6 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801f7a2:	a803      	add	r0, sp, #12
 801f7a4:	f001 fa22 	bl	8020bec <_ZN8touchgfx12TextProvider11getNextCharEv>
 801f7a8:	b2a3      	uxth	r3, r4
 801f7aa:	b138      	cbz	r0, 801f7bc <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x52>
 801f7ac:	280a      	cmp	r0, #10
 801f7ae:	a803      	add	r0, sp, #12
 801f7b0:	bf04      	itt	eq
 801f7b2:	3301      	addeq	r3, #1
 801f7b4:	b21c      	sxtheq	r4, r3
 801f7b6:	f001 fa19 	bl	8020bec <_ZN8touchgfx12TextProvider11getNextCharEv>
 801f7ba:	e7f5      	b.n	801f7a8 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x3e>
 801f7bc:	4618      	mov	r0, r3
 801f7be:	b01d      	add	sp, #116	; 0x74
 801f7c0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801f7c4:	b003      	add	sp, #12
 801f7c6:	4770      	bx	lr

0801f7c8 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 801f7c8:	b40e      	push	{r1, r2, r3}
 801f7ca:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f7cc:	b09e      	sub	sp, #120	; 0x78
 801f7ce:	4604      	mov	r4, r0
 801f7d0:	ab23      	add	r3, sp, #140	; 0x8c
 801f7d2:	a805      	add	r0, sp, #20
 801f7d4:	f853 5b04 	ldr.w	r5, [r3], #4
 801f7d8:	9303      	str	r3, [sp, #12]
 801f7da:	f000 fdb9 	bl	8020350 <_ZN8touchgfx12TextProviderC1Ev>
 801f7de:	6823      	ldr	r3, [r4, #0]
 801f7e0:	4620      	mov	r0, r4
 801f7e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801f7e4:	4798      	blx	r3
 801f7e6:	6823      	ldr	r3, [r4, #0]
 801f7e8:	4606      	mov	r6, r0
 801f7ea:	4620      	mov	r0, r4
 801f7ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801f7ee:	4798      	blx	r3
 801f7f0:	4633      	mov	r3, r6
 801f7f2:	4629      	mov	r1, r5
 801f7f4:	9000      	str	r0, [sp, #0]
 801f7f6:	9a03      	ldr	r2, [sp, #12]
 801f7f8:	a805      	add	r0, sp, #20
 801f7fa:	f000 fdfc 	bl	80203f6 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801f7fe:	ad1e      	add	r5, sp, #120	; 0x78
 801f800:	2100      	movs	r1, #0
 801f802:	26ff      	movs	r6, #255	; 0xff
 801f804:	4622      	mov	r2, r4
 801f806:	a805      	add	r0, sp, #20
 801f808:	f845 1d68 	str.w	r1, [r5, #-104]!
 801f80c:	462b      	mov	r3, r5
 801f80e:	f001 f8f3 	bl	80209f8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801f812:	b1d8      	cbz	r0, 801f84c <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x84>
 801f814:	280a      	cmp	r0, #10
 801f816:	d012      	beq.n	801f83e <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x76>
 801f818:	9804      	ldr	r0, [sp, #16]
 801f81a:	b180      	cbz	r0, 801f83e <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x76>
 801f81c:	7b47      	ldrb	r7, [r0, #13]
 801f81e:	7922      	ldrb	r2, [r4, #4]
 801f820:	00fb      	lsls	r3, r7, #3
 801f822:	f403 7180 	and.w	r1, r3, #256	; 0x100
 801f826:	7a03      	ldrb	r3, [r0, #8]
 801f828:	430b      	orrs	r3, r1
 801f82a:	0679      	lsls	r1, r7, #25
 801f82c:	bf44      	itt	mi
 801f82e:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801f832:	b21b      	sxthmi	r3, r3
 801f834:	1ad3      	subs	r3, r2, r3
 801f836:	b2db      	uxtb	r3, r3
 801f838:	429e      	cmp	r6, r3
 801f83a:	bf28      	it	cs
 801f83c:	461e      	movcs	r6, r3
 801f83e:	462b      	mov	r3, r5
 801f840:	4622      	mov	r2, r4
 801f842:	2100      	movs	r1, #0
 801f844:	a805      	add	r0, sp, #20
 801f846:	f001 f8d7 	bl	80209f8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801f84a:	e7e2      	b.n	801f812 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x4a>
 801f84c:	4630      	mov	r0, r6
 801f84e:	b01e      	add	sp, #120	; 0x78
 801f850:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801f854:	b003      	add	sp, #12
 801f856:	4770      	bx	lr

0801f858 <_ZNK8touchgfx8Drawable10invalidateEv>:
 801f858:	b513      	push	{r0, r1, r4, lr}
 801f85a:	6803      	ldr	r3, [r0, #0]
 801f85c:	2400      	movs	r4, #0
 801f85e:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 801f862:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801f866:	f8ad 1004 	strh.w	r1, [sp, #4]
 801f86a:	4669      	mov	r1, sp
 801f86c:	691b      	ldr	r3, [r3, #16]
 801f86e:	9400      	str	r4, [sp, #0]
 801f870:	f8ad 2006 	strh.w	r2, [sp, #6]
 801f874:	4798      	blx	r3
 801f876:	b002      	add	sp, #8
 801f878:	bd10      	pop	{r4, pc}

0801f87a <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 801f87a:	b538      	push	{r3, r4, r5, lr}
 801f87c:	680b      	ldr	r3, [r1, #0]
 801f87e:	460c      	mov	r4, r1
 801f880:	4605      	mov	r5, r0
 801f882:	68db      	ldr	r3, [r3, #12]
 801f884:	4798      	blx	r3
 801f886:	6823      	ldr	r3, [r4, #0]
 801f888:	4620      	mov	r0, r4
 801f88a:	4629      	mov	r1, r5
 801f88c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801f88e:	4798      	blx	r3
 801f890:	4628      	mov	r0, r5
 801f892:	bd38      	pop	{r3, r4, r5, pc}

0801f894 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 801f894:	b410      	push	{r4}
 801f896:	880a      	ldrh	r2, [r1, #0]
 801f898:	8884      	ldrh	r4, [r0, #4]
 801f89a:	4422      	add	r2, r4
 801f89c:	800a      	strh	r2, [r1, #0]
 801f89e:	884a      	ldrh	r2, [r1, #2]
 801f8a0:	88c4      	ldrh	r4, [r0, #6]
 801f8a2:	4422      	add	r2, r4
 801f8a4:	804a      	strh	r2, [r1, #2]
 801f8a6:	6940      	ldr	r0, [r0, #20]
 801f8a8:	b120      	cbz	r0, 801f8b4 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 801f8aa:	6803      	ldr	r3, [r0, #0]
 801f8ac:	f85d 4b04 	ldr.w	r4, [sp], #4
 801f8b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801f8b2:	4718      	bx	r3
 801f8b4:	f85d 4b04 	ldr.w	r4, [sp], #4
 801f8b8:	4770      	bx	lr

0801f8ba <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 801f8ba:	b570      	push	{r4, r5, r6, lr}
 801f8bc:	8882      	ldrh	r2, [r0, #4]
 801f8be:	460c      	mov	r4, r1
 801f8c0:	880b      	ldrh	r3, [r1, #0]
 801f8c2:	4605      	mov	r5, r0
 801f8c4:	4413      	add	r3, r2
 801f8c6:	800b      	strh	r3, [r1, #0]
 801f8c8:	884b      	ldrh	r3, [r1, #2]
 801f8ca:	88c2      	ldrh	r2, [r0, #6]
 801f8cc:	4413      	add	r3, r2
 801f8ce:	804b      	strh	r3, [r1, #2]
 801f8d0:	1d01      	adds	r1, r0, #4
 801f8d2:	4620      	mov	r0, r4
 801f8d4:	f7f8 fcde 	bl	8018294 <_ZN8touchgfx4RectaNERKS0_>
 801f8d8:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 801f8dc:	2b00      	cmp	r3, #0
 801f8de:	dd0b      	ble.n	801f8f8 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801f8e0:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801f8e4:	2b00      	cmp	r3, #0
 801f8e6:	dd07      	ble.n	801f8f8 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801f8e8:	6968      	ldr	r0, [r5, #20]
 801f8ea:	b128      	cbz	r0, 801f8f8 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801f8ec:	6803      	ldr	r3, [r0, #0]
 801f8ee:	4621      	mov	r1, r4
 801f8f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f8f2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801f8f6:	4718      	bx	r3
 801f8f8:	bd70      	pop	{r4, r5, r6, pc}
	...

0801f8fc <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 801f8fc:	b570      	push	{r4, r5, r6, lr}
 801f8fe:	8882      	ldrh	r2, [r0, #4]
 801f900:	460c      	mov	r4, r1
 801f902:	880b      	ldrh	r3, [r1, #0]
 801f904:	4605      	mov	r5, r0
 801f906:	4413      	add	r3, r2
 801f908:	800b      	strh	r3, [r1, #0]
 801f90a:	884b      	ldrh	r3, [r1, #2]
 801f90c:	88c2      	ldrh	r2, [r0, #6]
 801f90e:	4413      	add	r3, r2
 801f910:	804b      	strh	r3, [r1, #2]
 801f912:	1d01      	adds	r1, r0, #4
 801f914:	4620      	mov	r0, r4
 801f916:	f7f8 fcbd 	bl	8018294 <_ZN8touchgfx4RectaNERKS0_>
 801f91a:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 801f91e:	2b00      	cmp	r3, #0
 801f920:	dd15      	ble.n	801f94e <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x52>
 801f922:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801f926:	2b00      	cmp	r3, #0
 801f928:	dd11      	ble.n	801f94e <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x52>
 801f92a:	6968      	ldr	r0, [r5, #20]
 801f92c:	b128      	cbz	r0, 801f93a <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3e>
 801f92e:	6803      	ldr	r3, [r0, #0]
 801f930:	691b      	ldr	r3, [r3, #16]
 801f932:	4621      	mov	r1, r4
 801f934:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801f938:	4718      	bx	r3
 801f93a:	4b05      	ldr	r3, [pc, #20]	; (801f950 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x54>)
 801f93c:	681b      	ldr	r3, [r3, #0]
 801f93e:	3304      	adds	r3, #4
 801f940:	429d      	cmp	r5, r3
 801f942:	d104      	bne.n	801f94e <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x52>
 801f944:	f7fe ffbe 	bl	801e8c4 <_ZN8touchgfx11Application11getInstanceEv>
 801f948:	6803      	ldr	r3, [r0, #0]
 801f94a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801f94c:	e7f1      	b.n	801f932 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x36>
 801f94e:	bd70      	pop	{r4, r5, r6, pc}
 801f950:	2400c918 	.word	0x2400c918

0801f954 <_ZN8touchgfx8Drawable12moveRelativeEss>:
 801f954:	b570      	push	{r4, r5, r6, lr}
 801f956:	4604      	mov	r4, r0
 801f958:	4616      	mov	r6, r2
 801f95a:	460d      	mov	r5, r1
 801f95c:	b901      	cbnz	r1, 801f960 <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 801f95e:	b192      	cbz	r2, 801f986 <_ZN8touchgfx8Drawable12moveRelativeEss+0x32>
 801f960:	6823      	ldr	r3, [r4, #0]
 801f962:	4620      	mov	r0, r4
 801f964:	695b      	ldr	r3, [r3, #20]
 801f966:	4798      	blx	r3
 801f968:	88e2      	ldrh	r2, [r4, #6]
 801f96a:	88a1      	ldrh	r1, [r4, #4]
 801f96c:	4620      	mov	r0, r4
 801f96e:	4432      	add	r2, r6
 801f970:	4429      	add	r1, r5
 801f972:	b212      	sxth	r2, r2
 801f974:	b209      	sxth	r1, r1
 801f976:	f7e4 fc86 	bl	8004286 <_ZN8touchgfx8Drawable5setXYEss>
 801f97a:	6823      	ldr	r3, [r4, #0]
 801f97c:	4620      	mov	r0, r4
 801f97e:	695b      	ldr	r3, [r3, #20]
 801f980:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801f984:	4718      	bx	r3
 801f986:	bd70      	pop	{r4, r5, r6, pc}

0801f988 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 801f988:	b510      	push	{r4, lr}
 801f98a:	2300      	movs	r3, #0
 801f98c:	4604      	mov	r4, r0
 801f98e:	4608      	mov	r0, r1
 801f990:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 801f994:	8023      	strh	r3, [r4, #0]
 801f996:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801f99a:	8063      	strh	r3, [r4, #2]
 801f99c:	6803      	ldr	r3, [r0, #0]
 801f99e:	80a1      	strh	r1, [r4, #4]
 801f9a0:	4621      	mov	r1, r4
 801f9a2:	80e2      	strh	r2, [r4, #6]
 801f9a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801f9a6:	4798      	blx	r3
 801f9a8:	4620      	mov	r0, r4
 801f9aa:	bd10      	pop	{r4, pc}

0801f9ac <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>:
 801f9ac:	b530      	push	{r4, r5, lr}
 801f9ae:	8083      	strh	r3, [r0, #4]
 801f9b0:	f89d 300c 	ldrb.w	r3, [sp, #12]
 801f9b4:	f89d 5010 	ldrb.w	r5, [sp, #16]
 801f9b8:	7183      	strb	r3, [r0, #6]
 801f9ba:	79c3      	ldrb	r3, [r0, #7]
 801f9bc:	6101      	str	r1, [r0, #16]
 801f9be:	f365 0306 	bfi	r3, r5, #0, #7
 801f9c2:	f89d 5014 	ldrb.w	r5, [sp, #20]
 801f9c6:	8282      	strh	r2, [r0, #20]
 801f9c8:	f365 13c7 	bfi	r3, r5, #7, #1
 801f9cc:	71c3      	strb	r3, [r0, #7]
 801f9ce:	f89d 3018 	ldrb.w	r3, [sp, #24]
 801f9d2:	7203      	strb	r3, [r0, #8]
 801f9d4:	f89d 301c 	ldrb.w	r3, [sp, #28]
 801f9d8:	7243      	strb	r3, [r0, #9]
 801f9da:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801f9de:	8143      	strh	r3, [r0, #10]
 801f9e0:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 801f9e4:	8183      	strh	r3, [r0, #12]
 801f9e6:	4b01      	ldr	r3, [pc, #4]	; (801f9ec <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt+0x40>)
 801f9e8:	6003      	str	r3, [r0, #0]
 801f9ea:	bd30      	pop	{r4, r5, pc}
 801f9ec:	080306b8 	.word	0x080306b8

0801f9f0 <_ZNK8touchgfx9ConstFont4findEt>:
 801f9f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f9f2:	6904      	ldr	r4, [r0, #16]
 801f9f4:	b3bc      	cbz	r4, 801fa66 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801f9f6:	88a3      	ldrh	r3, [r4, #4]
 801f9f8:	8a82      	ldrh	r2, [r0, #20]
 801f9fa:	1acb      	subs	r3, r1, r3
 801f9fc:	f102 32ff 	add.w	r2, r2, #4294967295
 801fa00:	d431      	bmi.n	801fa66 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801fa02:	4293      	cmp	r3, r2
 801fa04:	dd0c      	ble.n	801fa20 <_ZNK8touchgfx9ConstFont4findEt+0x30>
 801fa06:	230e      	movs	r3, #14
 801fa08:	fb03 4302 	mla	r3, r3, r2, r4
 801fa0c:	889b      	ldrh	r3, [r3, #4]
 801fa0e:	1a5b      	subs	r3, r3, r1
 801fa10:	1ad3      	subs	r3, r2, r3
 801fa12:	429a      	cmp	r2, r3
 801fa14:	db27      	blt.n	801fa66 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801fa16:	2b00      	cmp	r3, #0
 801fa18:	bfbc      	itt	lt
 801fa1a:	2302      	movlt	r3, #2
 801fa1c:	fb92 f3f3 	sdivlt	r3, r2, r3
 801fa20:	2500      	movs	r5, #0
 801fa22:	260e      	movs	r6, #14
 801fa24:	4295      	cmp	r5, r2
 801fa26:	dc1e      	bgt.n	801fa66 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801fa28:	fb06 4003 	mla	r0, r6, r3, r4
 801fa2c:	8887      	ldrh	r7, [r0, #4]
 801fa2e:	42b9      	cmp	r1, r7
 801fa30:	d01a      	beq.n	801fa68 <_ZNK8touchgfx9ConstFont4findEt+0x78>
 801fa32:	d20d      	bcs.n	801fa50 <_ZNK8touchgfx9ConstFont4findEt+0x60>
 801fa34:	1e5a      	subs	r2, r3, #1
 801fa36:	4295      	cmp	r5, r2
 801fa38:	dc15      	bgt.n	801fa66 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801fa3a:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
 801fa3e:	1a5b      	subs	r3, r3, r1
 801fa40:	1ad3      	subs	r3, r2, r3
 801fa42:	429a      	cmp	r2, r3
 801fa44:	db0f      	blt.n	801fa66 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801fa46:	429d      	cmp	r5, r3
 801fa48:	ddec      	ble.n	801fa24 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801fa4a:	1953      	adds	r3, r2, r5
 801fa4c:	105b      	asrs	r3, r3, #1
 801fa4e:	e7e9      	b.n	801fa24 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801fa50:	1c5d      	adds	r5, r3, #1
 801fa52:	42aa      	cmp	r2, r5
 801fa54:	db07      	blt.n	801fa66 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801fa56:	8a43      	ldrh	r3, [r0, #18]
 801fa58:	1acb      	subs	r3, r1, r3
 801fa5a:	442b      	add	r3, r5
 801fa5c:	429d      	cmp	r5, r3
 801fa5e:	dc02      	bgt.n	801fa66 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801fa60:	429a      	cmp	r2, r3
 801fa62:	dadf      	bge.n	801fa24 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801fa64:	e7f1      	b.n	801fa4a <_ZNK8touchgfx9ConstFont4findEt+0x5a>
 801fa66:	2000      	movs	r0, #0
 801fa68:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801fa6a <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 801fa6a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801fa6c:	4604      	mov	r4, r0
 801fa6e:	4617      	mov	r7, r2
 801fa70:	461e      	mov	r6, r3
 801fa72:	b911      	cbnz	r1, 801fa7a <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 801fa74:	2500      	movs	r5, #0
 801fa76:	4628      	mov	r0, r5
 801fa78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801fa7a:	290a      	cmp	r1, #10
 801fa7c:	d0fa      	beq.n	801fa74 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801fa7e:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 801fa82:	4291      	cmp	r1, r2
 801fa84:	d0f6      	beq.n	801fa74 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801fa86:	f242 020b 	movw	r2, #8203	; 0x200b
 801fa8a:	4291      	cmp	r1, r2
 801fa8c:	d0f2      	beq.n	801fa74 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801fa8e:	f7ff ffaf 	bl	801f9f0 <_ZNK8touchgfx9ConstFont4findEt>
 801fa92:	4605      	mov	r5, r0
 801fa94:	b950      	cbnz	r0, 801faac <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
 801fa96:	6823      	ldr	r3, [r4, #0]
 801fa98:	4620      	mov	r0, r4
 801fa9a:	691b      	ldr	r3, [r3, #16]
 801fa9c:	4798      	blx	r3
 801fa9e:	4601      	mov	r1, r0
 801faa0:	4620      	mov	r0, r4
 801faa2:	f7ff ffa5 	bl	801f9f0 <_ZNK8touchgfx9ConstFont4findEt>
 801faa6:	4605      	mov	r5, r0
 801faa8:	2800      	cmp	r0, #0
 801faaa:	d0e3      	beq.n	801fa74 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801faac:	6823      	ldr	r3, [r4, #0]
 801faae:	4629      	mov	r1, r5
 801fab0:	4620      	mov	r0, r4
 801fab2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801fab4:	4798      	blx	r3
 801fab6:	6038      	str	r0, [r7, #0]
 801fab8:	6823      	ldr	r3, [r4, #0]
 801faba:	4620      	mov	r0, r4
 801fabc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801fabe:	4798      	blx	r3
 801fac0:	7030      	strb	r0, [r6, #0]
 801fac2:	e7d8      	b.n	801fa76 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

0801fac4 <_ZN8touchgfx6memsetEPvhm>:
 801fac4:	4402      	add	r2, r0
 801fac6:	4290      	cmp	r0, r2
 801fac8:	d002      	beq.n	801fad0 <_ZN8touchgfx6memsetEPvhm+0xc>
 801faca:	f800 1b01 	strb.w	r1, [r0], #1
 801face:	e7fa      	b.n	801fac6 <_ZN8touchgfx6memsetEPvhm+0x2>
 801fad0:	4770      	bx	lr

0801fad2 <_ZN8touchgfx34lookupNearestNeighborRenderVariantERKNS_6BitmapE>:
 801fad2:	b538      	push	{r3, r4, r5, lr}
 801fad4:	4605      	mov	r5, r0
 801fad6:	f001 ffa1 	bl	8021a1c <_ZNK8touchgfx6Bitmap9getFormatEv>
 801fada:	4604      	mov	r4, r0
 801fadc:	4628      	mov	r0, r5
 801fade:	f001 fed9 	bl	8021894 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 801fae2:	2800      	cmp	r0, #0
 801fae4:	bf14      	ite	ne
 801fae6:	2002      	movne	r0, #2
 801fae8:	2000      	moveq	r0, #0
 801faea:	ea40 0084 	orr.w	r0, r0, r4, lsl #2
 801faee:	b280      	uxth	r0, r0
 801faf0:	bd38      	pop	{r3, r4, r5, pc}

0801faf2 <_ZN8touchgfx27lookupBilinearRenderVariantERKNS_6BitmapE>:
 801faf2:	b538      	push	{r3, r4, r5, lr}
 801faf4:	4605      	mov	r5, r0
 801faf6:	f001 ff91 	bl	8021a1c <_ZNK8touchgfx6Bitmap9getFormatEv>
 801fafa:	4604      	mov	r4, r0
 801fafc:	4628      	mov	r0, r5
 801fafe:	f001 fec9 	bl	8021894 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 801fb02:	2800      	cmp	r0, #0
 801fb04:	bf14      	ite	ne
 801fb06:	2002      	movne	r0, #2
 801fb08:	2000      	moveq	r0, #0
 801fb0a:	ea40 0084 	orr.w	r0, r0, r4, lsl #2
 801fb0e:	f040 0001 	orr.w	r0, r0, #1
 801fb12:	b280      	uxth	r0, r0
 801fb14:	bd38      	pop	{r3, r4, r5, pc}

0801fb16 <_ZN8touchgfx4clzuEm>:
 801fb16:	4603      	mov	r3, r0
 801fb18:	b1c8      	cbz	r0, 801fb4e <_ZN8touchgfx4clzuEm+0x38>
 801fb1a:	0c02      	lsrs	r2, r0, #16
 801fb1c:	0412      	lsls	r2, r2, #16
 801fb1e:	b9a2      	cbnz	r2, 801fb4a <_ZN8touchgfx4clzuEm+0x34>
 801fb20:	0403      	lsls	r3, r0, #16
 801fb22:	2010      	movs	r0, #16
 801fb24:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 801fb28:	bf04      	itt	eq
 801fb2a:	021b      	lsleq	r3, r3, #8
 801fb2c:	3008      	addeq	r0, #8
 801fb2e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 801fb32:	bf04      	itt	eq
 801fb34:	011b      	lsleq	r3, r3, #4
 801fb36:	3004      	addeq	r0, #4
 801fb38:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 801fb3c:	bf04      	itt	eq
 801fb3e:	009b      	lsleq	r3, r3, #2
 801fb40:	3002      	addeq	r0, #2
 801fb42:	2b00      	cmp	r3, #0
 801fb44:	db04      	blt.n	801fb50 <_ZN8touchgfx4clzuEm+0x3a>
 801fb46:	3001      	adds	r0, #1
 801fb48:	4770      	bx	lr
 801fb4a:	2000      	movs	r0, #0
 801fb4c:	e7ea      	b.n	801fb24 <_ZN8touchgfx4clzuEm+0xe>
 801fb4e:	2020      	movs	r0, #32
 801fb50:	4770      	bx	lr

0801fb52 <_ZN8touchgfx7muldivuEmmmRm>:
 801fb52:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fb56:	4680      	mov	r8, r0
 801fb58:	460f      	mov	r7, r1
 801fb5a:	4615      	mov	r5, r2
 801fb5c:	461e      	mov	r6, r3
 801fb5e:	f7ff ffda 	bl	801fb16 <_ZN8touchgfx4clzuEm>
 801fb62:	b998      	cbnz	r0, 801fb8c <_ZN8touchgfx7muldivuEmmmRm+0x3a>
 801fb64:	4608      	mov	r0, r1
 801fb66:	f7ff ffd6 	bl	801fb16 <_ZN8touchgfx4clzuEm>
 801fb6a:	2800      	cmp	r0, #0
 801fb6c:	dd08      	ble.n	801fb80 <_ZN8touchgfx7muldivuEmmmRm+0x2e>
 801fb6e:	4633      	mov	r3, r6
 801fb70:	462a      	mov	r2, r5
 801fb72:	4641      	mov	r1, r8
 801fb74:	4638      	mov	r0, r7
 801fb76:	f7ff ffec 	bl	801fb52 <_ZN8touchgfx7muldivuEmmmRm>
 801fb7a:	b003      	add	sp, #12
 801fb7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fb80:	f04f 33ff 	mov.w	r3, #4294967295
 801fb84:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 801fb88:	6033      	str	r3, [r6, #0]
 801fb8a:	e7f6      	b.n	801fb7a <_ZN8touchgfx7muldivuEmmmRm+0x28>
 801fb8c:	fa31 f900 	lsrs.w	r9, r1, r0
 801fb90:	fb01 f308 	mul.w	r3, r1, r8
 801fb94:	d105      	bne.n	801fba2 <_ZN8touchgfx7muldivuEmmmRm+0x50>
 801fb96:	fbb3 f0f5 	udiv	r0, r3, r5
 801fb9a:	fb05 3510 	mls	r5, r5, r0, r3
 801fb9e:	6035      	str	r5, [r6, #0]
 801fba0:	e7eb      	b.n	801fb7a <_ZN8touchgfx7muldivuEmmmRm+0x28>
 801fba2:	2301      	movs	r3, #1
 801fba4:	fa08 fb00 	lsl.w	fp, r8, r0
 801fba8:	462a      	mov	r2, r5
 801fbaa:	4641      	mov	r1, r8
 801fbac:	fa03 f000 	lsl.w	r0, r3, r0
 801fbb0:	4633      	mov	r3, r6
 801fbb2:	fbbb faf5 	udiv	sl, fp, r5
 801fbb6:	3801      	subs	r0, #1
 801fbb8:	fb09 f40a 	mul.w	r4, r9, sl
 801fbbc:	4038      	ands	r0, r7
 801fbbe:	f7ff ffc8 	bl	801fb52 <_ZN8touchgfx7muldivuEmmmRm>
 801fbc2:	462a      	mov	r2, r5
 801fbc4:	4607      	mov	r7, r0
 801fbc6:	ab01      	add	r3, sp, #4
 801fbc8:	fb05 b11a 	mls	r1, r5, sl, fp
 801fbcc:	4648      	mov	r0, r9
 801fbce:	f7ff ffc0 	bl	801fb52 <_ZN8touchgfx7muldivuEmmmRm>
 801fbd2:	9b01      	ldr	r3, [sp, #4]
 801fbd4:	6832      	ldr	r2, [r6, #0]
 801fbd6:	441a      	add	r2, r3
 801fbd8:	fbb2 f3f5 	udiv	r3, r2, r5
 801fbdc:	441c      	add	r4, r3
 801fbde:	fb05 2513 	mls	r5, r5, r3, r2
 801fbe2:	443c      	add	r4, r7
 801fbe4:	4420      	add	r0, r4
 801fbe6:	e7da      	b.n	801fb9e <_ZN8touchgfx7muldivuEmmmRm+0x4c>

0801fbe8 <_ZN8touchgfx6muldivElllRl>:
 801fbe8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801fbea:	2800      	cmp	r0, #0
 801fbec:	461e      	mov	r6, r3
 801fbee:	bfba      	itte	lt
 801fbf0:	4240      	neglt	r0, r0
 801fbf2:	f04f 34ff 	movlt.w	r4, #4294967295
 801fbf6:	2401      	movge	r4, #1
 801fbf8:	2900      	cmp	r1, #0
 801fbfa:	bfbc      	itt	lt
 801fbfc:	4249      	neglt	r1, r1
 801fbfe:	4264      	neglt	r4, r4
 801fc00:	2a00      	cmp	r2, #0
 801fc02:	bfb6      	itet	lt
 801fc04:	4265      	neglt	r5, r4
 801fc06:	4625      	movge	r5, r4
 801fc08:	4252      	neglt	r2, r2
 801fc0a:	4288      	cmp	r0, r1
 801fc0c:	bfc2      	ittt	gt
 801fc0e:	4603      	movgt	r3, r0
 801fc10:	4608      	movgt	r0, r1
 801fc12:	4619      	movgt	r1, r3
 801fc14:	ab01      	add	r3, sp, #4
 801fc16:	f7ff ff9c 	bl	801fb52 <_ZN8touchgfx7muldivuEmmmRm>
 801fc1a:	9b01      	ldr	r3, [sp, #4]
 801fc1c:	4368      	muls	r0, r5
 801fc1e:	435c      	muls	r4, r3
 801fc20:	6034      	str	r4, [r6, #0]
 801fc22:	b002      	add	sp, #8
 801fc24:	bd70      	pop	{r4, r5, r6, pc}

0801fc26 <_ZN8touchgfx6muldivElll>:
 801fc26:	b513      	push	{r0, r1, r4, lr}
 801fc28:	4614      	mov	r4, r2
 801fc2a:	ab01      	add	r3, sp, #4
 801fc2c:	f7ff ffdc 	bl	801fbe8 <_ZN8touchgfx6muldivElllRl>
 801fc30:	2800      	cmp	r0, #0
 801fc32:	ea84 72e4 	eor.w	r2, r4, r4, asr #31
 801fc36:	9b01      	ldr	r3, [sp, #4]
 801fc38:	eba2 72e4 	sub.w	r2, r2, r4, asr #31
 801fc3c:	db0a      	blt.n	801fc54 <_ZN8touchgfx6muldivElll+0x2e>
 801fc3e:	2b00      	cmp	r3, #0
 801fc40:	f102 0201 	add.w	r2, r2, #1
 801fc44:	bfb8      	it	lt
 801fc46:	425b      	neglt	r3, r3
 801fc48:	ebb3 0f62 	cmp.w	r3, r2, asr #1
 801fc4c:	db00      	blt.n	801fc50 <_ZN8touchgfx6muldivElll+0x2a>
 801fc4e:	3001      	adds	r0, #1
 801fc50:	b002      	add	sp, #8
 801fc52:	bd10      	pop	{r4, pc}
 801fc54:	2b00      	cmp	r3, #0
 801fc56:	bfb8      	it	lt
 801fc58:	425b      	neglt	r3, r3
 801fc5a:	ebb3 0f62 	cmp.w	r3, r2, asr #1
 801fc5e:	bfc8      	it	gt
 801fc60:	f100 30ff 	addgt.w	r0, r0, #4294967295
 801fc64:	e7f4      	b.n	801fc50 <_ZN8touchgfx6muldivElll+0x2a>

0801fc66 <_ZN8touchgfx10ClickEvent12getEventTypeEv>:
 801fc66:	2000      	movs	r0, #0
 801fc68:	4770      	bx	lr

0801fc6a <_ZN8touchgfx9DragEvent12getEventTypeEv>:
 801fc6a:	2001      	movs	r0, #1
 801fc6c:	4770      	bx	lr

0801fc6e <_ZN8touchgfx12GestureEvent12getEventTypeEv>:
 801fc6e:	2002      	movs	r0, #2
 801fc70:	4770      	bx	lr

0801fc72 <_ZN8touchgfx12GestureEventD1Ev>:
 801fc72:	4770      	bx	lr

0801fc74 <_ZN8touchgfx9DragEventD1Ev>:
 801fc74:	4770      	bx	lr

0801fc76 <_ZN8touchgfx10ClickEventD1Ev>:
 801fc76:	4770      	bx	lr

0801fc78 <_ZN8touchgfx10ClickEventD0Ev>:
 801fc78:	b510      	push	{r4, lr}
 801fc7a:	4604      	mov	r4, r0
 801fc7c:	210c      	movs	r1, #12
 801fc7e:	f00b fc26 	bl	802b4ce <_ZdlPvj>
 801fc82:	4620      	mov	r0, r4
 801fc84:	bd10      	pop	{r4, pc}

0801fc86 <_ZN8touchgfx9DragEventD0Ev>:
 801fc86:	b510      	push	{r4, lr}
 801fc88:	4604      	mov	r4, r0
 801fc8a:	2110      	movs	r1, #16
 801fc8c:	f00b fc1f 	bl	802b4ce <_ZdlPvj>
 801fc90:	4620      	mov	r0, r4
 801fc92:	bd10      	pop	{r4, pc}

0801fc94 <_ZN8touchgfx12GestureEventD0Ev>:
 801fc94:	b510      	push	{r4, lr}
 801fc96:	4604      	mov	r4, r0
 801fc98:	210c      	movs	r1, #12
 801fc9a:	f00b fc18 	bl	802b4ce <_ZdlPvj>
 801fc9e:	4620      	mov	r0, r4
 801fca0:	bd10      	pop	{r4, pc}
	...

0801fca4 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 801fca4:	b530      	push	{r4, r5, lr}
 801fca6:	460d      	mov	r5, r1
 801fca8:	6b01      	ldr	r1, [r0, #48]	; 0x30
 801fcaa:	b087      	sub	sp, #28
 801fcac:	4604      	mov	r4, r0
 801fcae:	b301      	cbz	r1, 801fcf2 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 801fcb0:	a801      	add	r0, sp, #4
 801fcb2:	f7ff fe69 	bl	801f988 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801fcb6:	892a      	ldrh	r2, [r5, #8]
 801fcb8:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801fcbc:	7928      	ldrb	r0, [r5, #4]
 801fcbe:	1ad2      	subs	r2, r2, r3
 801fcc0:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 801fcc2:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 801fcc6:	441a      	add	r2, r3
 801fcc8:	896b      	ldrh	r3, [r5, #10]
 801fcca:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 801fcce:	f88d 0010 	strb.w	r0, [sp, #16]
 801fcd2:	1b5b      	subs	r3, r3, r5
 801fcd4:	8ee5      	ldrh	r5, [r4, #54]	; 0x36
 801fcd6:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801fcd8:	442b      	add	r3, r5
 801fcda:	4d07      	ldr	r5, [pc, #28]	; (801fcf8 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 801fcdc:	f8ad 1012 	strh.w	r1, [sp, #18]
 801fce0:	a903      	add	r1, sp, #12
 801fce2:	9503      	str	r5, [sp, #12]
 801fce4:	f8ad 2014 	strh.w	r2, [sp, #20]
 801fce8:	f8ad 3016 	strh.w	r3, [sp, #22]
 801fcec:	6803      	ldr	r3, [r0, #0]
 801fcee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801fcf0:	4798      	blx	r3
 801fcf2:	b007      	add	sp, #28
 801fcf4:	bd30      	pop	{r4, r5, pc}
 801fcf6:	bf00      	nop
 801fcf8:	08030738 	.word	0x08030738

0801fcfc <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 801fcfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801fd00:	6b03      	ldr	r3, [r0, #48]	; 0x30
 801fd02:	b08a      	sub	sp, #40	; 0x28
 801fd04:	4604      	mov	r4, r0
 801fd06:	460d      	mov	r5, r1
 801fd08:	b113      	cbz	r3, 801fd10 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x14>
 801fd0a:	790b      	ldrb	r3, [r1, #4]
 801fd0c:	2b00      	cmp	r3, #0
 801fd0e:	d044      	beq.n	801fd9a <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 801fd10:	f104 0804 	add.w	r8, r4, #4
 801fd14:	a803      	add	r0, sp, #12
 801fd16:	4641      	mov	r1, r8
 801fd18:	f7ff fe36 	bl	801f988 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801fd1c:	792b      	ldrb	r3, [r5, #4]
 801fd1e:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 801fd22:	f9bd 600e 	ldrsh.w	r6, [sp, #14]
 801fd26:	b983      	cbnz	r3, 801fd4a <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x4e>
 801fd28:	f104 0336 	add.w	r3, r4, #54	; 0x36
 801fd2c:	892a      	ldrh	r2, [r5, #8]
 801fd2e:	88e9      	ldrh	r1, [r5, #6]
 801fd30:	4640      	mov	r0, r8
 801fd32:	1b92      	subs	r2, r2, r6
 801fd34:	9301      	str	r3, [sp, #4]
 801fd36:	1bc9      	subs	r1, r1, r7
 801fd38:	f104 0334 	add.w	r3, r4, #52	; 0x34
 801fd3c:	b212      	sxth	r2, r2
 801fd3e:	9300      	str	r3, [sp, #0]
 801fd40:	b209      	sxth	r1, r1
 801fd42:	f104 0330 	add.w	r3, r4, #48	; 0x30
 801fd46:	f7f8 f9c3 	bl	80180d0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>
 801fd4a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801fd4c:	b329      	cbz	r1, 801fd9a <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 801fd4e:	a805      	add	r0, sp, #20
 801fd50:	f7ff fe1a 	bl	801f988 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801fd54:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 801fd58:	792b      	ldrb	r3, [r5, #4]
 801fd5a:	a907      	add	r1, sp, #28
 801fd5c:	1abf      	subs	r7, r7, r2
 801fd5e:	88ea      	ldrh	r2, [r5, #6]
 801fd60:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801fd62:	4417      	add	r7, r2
 801fd64:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
 801fd66:	f88d 3020 	strb.w	r3, [sp, #32]
 801fd6a:	4417      	add	r7, r2
 801fd6c:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 801fd70:	1ab6      	subs	r6, r6, r2
 801fd72:	892a      	ldrh	r2, [r5, #8]
 801fd74:	f8ad 7022 	strh.w	r7, [sp, #34]	; 0x22
 801fd78:	4416      	add	r6, r2
 801fd7a:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 801fd7c:	4416      	add	r6, r2
 801fd7e:	4a08      	ldr	r2, [pc, #32]	; (801fda0 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xa4>)
 801fd80:	f8ad 6024 	strh.w	r6, [sp, #36]	; 0x24
 801fd84:	2600      	movs	r6, #0
 801fd86:	9207      	str	r2, [sp, #28]
 801fd88:	f8ad 6026 	strh.w	r6, [sp, #38]	; 0x26
 801fd8c:	6803      	ldr	r3, [r0, #0]
 801fd8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801fd90:	4798      	blx	r3
 801fd92:	792b      	ldrb	r3, [r5, #4]
 801fd94:	b10b      	cbz	r3, 801fd9a <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 801fd96:	e9c4 660c 	strd	r6, r6, [r4, #48]	; 0x30
 801fd9a:	b00a      	add	sp, #40	; 0x28
 801fd9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801fda0:	08030710 	.word	0x08030710

0801fda4 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 801fda4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801fda8:	460c      	mov	r4, r1
 801fdaa:	6b01      	ldr	r1, [r0, #48]	; 0x30
 801fdac:	b088      	sub	sp, #32
 801fdae:	4605      	mov	r5, r0
 801fdb0:	2900      	cmp	r1, #0
 801fdb2:	d06d      	beq.n	801fe90 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xec>
 801fdb4:	4668      	mov	r0, sp
 801fdb6:	f7ff fde7 	bl	801f988 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801fdba:	8ea9      	ldrh	r1, [r5, #52]	; 0x34
 801fdbc:	88e3      	ldrh	r3, [r4, #6]
 801fdbe:	f9bd 8000 	ldrsh.w	r8, [sp]
 801fdc2:	440b      	add	r3, r1
 801fdc4:	f9bd 7002 	ldrsh.w	r7, [sp, #2]
 801fdc8:	b21b      	sxth	r3, r3
 801fdca:	4543      	cmp	r3, r8
 801fdcc:	db31      	blt.n	801fe32 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801fdce:	f8bd c004 	ldrh.w	ip, [sp, #4]
 801fdd2:	44c4      	add	ip, r8
 801fdd4:	fa0f fc8c 	sxth.w	ip, ip
 801fdd8:	4563      	cmp	r3, ip
 801fdda:	da2a      	bge.n	801fe32 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801fddc:	8eea      	ldrh	r2, [r5, #54]	; 0x36
 801fdde:	8926      	ldrh	r6, [r4, #8]
 801fde0:	4416      	add	r6, r2
 801fde2:	b236      	sxth	r6, r6
 801fde4:	42be      	cmp	r6, r7
 801fde6:	db24      	blt.n	801fe32 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801fde8:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 801fdec:	4438      	add	r0, r7
 801fdee:	b200      	sxth	r0, r0
 801fdf0:	4286      	cmp	r6, r0
 801fdf2:	da1e      	bge.n	801fe32 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801fdf4:	8963      	ldrh	r3, [r4, #10]
 801fdf6:	4419      	add	r1, r3
 801fdf8:	b209      	sxth	r1, r1
 801fdfa:	4541      	cmp	r1, r8
 801fdfc:	db08      	blt.n	801fe10 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 801fdfe:	4561      	cmp	r1, ip
 801fe00:	da06      	bge.n	801fe10 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 801fe02:	89a3      	ldrh	r3, [r4, #12]
 801fe04:	441a      	add	r2, r3
 801fe06:	b212      	sxth	r2, r2
 801fe08:	42ba      	cmp	r2, r7
 801fe0a:	db01      	blt.n	801fe10 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 801fe0c:	4282      	cmp	r2, r0
 801fe0e:	db10      	blt.n	801fe32 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801fe10:	4b21      	ldr	r3, [pc, #132]	; (801fe98 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf4>)
 801fe12:	a904      	add	r1, sp, #16
 801fe14:	6b28      	ldr	r0, [r5, #48]	; 0x30
 801fe16:	9304      	str	r3, [sp, #16]
 801fe18:	2302      	movs	r3, #2
 801fe1a:	f88d 3014 	strb.w	r3, [sp, #20]
 801fe1e:	2300      	movs	r3, #0
 801fe20:	f8ad 3016 	strh.w	r3, [sp, #22]
 801fe24:	f8ad 3018 	strh.w	r3, [sp, #24]
 801fe28:	f8ad 301a 	strh.w	r3, [sp, #26]
 801fe2c:	6803      	ldr	r3, [r0, #0]
 801fe2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801fe30:	4798      	blx	r3
 801fe32:	1d29      	adds	r1, r5, #4
 801fe34:	a802      	add	r0, sp, #8
 801fe36:	f7ff fda7 	bl	801f988 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801fe3a:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801fe3e:	88e0      	ldrh	r0, [r4, #6]
 801fe40:	eba3 0808 	sub.w	r8, r3, r8
 801fe44:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801fe48:	7921      	ldrb	r1, [r4, #4]
 801fe4a:	fa1f f888 	uxth.w	r8, r8
 801fe4e:	1bdf      	subs	r7, r3, r7
 801fe50:	f8b5 c034 	ldrh.w	ip, [r5, #52]	; 0x34
 801fe54:	b2bb      	uxth	r3, r7
 801fe56:	4440      	add	r0, r8
 801fe58:	8922      	ldrh	r2, [r4, #8]
 801fe5a:	8967      	ldrh	r7, [r4, #10]
 801fe5c:	4460      	add	r0, ip
 801fe5e:	89a4      	ldrh	r4, [r4, #12]
 801fe60:	441a      	add	r2, r3
 801fe62:	8eee      	ldrh	r6, [r5, #54]	; 0x36
 801fe64:	44b8      	add	r8, r7
 801fe66:	4423      	add	r3, r4
 801fe68:	f8ad 0016 	strh.w	r0, [sp, #22]
 801fe6c:	4432      	add	r2, r6
 801fe6e:	44e0      	add	r8, ip
 801fe70:	4433      	add	r3, r6
 801fe72:	4c0a      	ldr	r4, [pc, #40]	; (801fe9c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf8>)
 801fe74:	6b28      	ldr	r0, [r5, #48]	; 0x30
 801fe76:	f88d 1014 	strb.w	r1, [sp, #20]
 801fe7a:	a904      	add	r1, sp, #16
 801fe7c:	9404      	str	r4, [sp, #16]
 801fe7e:	f8ad 2018 	strh.w	r2, [sp, #24]
 801fe82:	f8ad 801a 	strh.w	r8, [sp, #26]
 801fe86:	f8ad 301c 	strh.w	r3, [sp, #28]
 801fe8a:	6803      	ldr	r3, [r0, #0]
 801fe8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801fe8e:	4798      	blx	r3
 801fe90:	b008      	add	sp, #32
 801fe92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801fe96:	bf00      	nop
 801fe98:	08030710 	.word	0x08030710
 801fe9c:	08030724 	.word	0x08030724

0801fea0 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 801fea0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801fea2:	4604      	mov	r4, r0
 801fea4:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 801fea8:	3201      	adds	r2, #1
 801feaa:	d112      	bne.n	801fed2 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
 801feac:	2500      	movs	r5, #0
 801feae:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 801feb2:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801feb6:	6803      	ldr	r3, [r0, #0]
 801feb8:	9500      	str	r5, [sp, #0]
 801feba:	466d      	mov	r5, sp
 801febc:	f8ad 1004 	strh.w	r1, [sp, #4]
 801fec0:	f8ad 2006 	strh.w	r2, [sp, #6]
 801fec4:	4629      	mov	r1, r5
 801fec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801fec8:	4798      	blx	r3
 801feca:	e895 0003 	ldmia.w	r5, {r0, r1}
 801fece:	e884 0003 	stmia.w	r4, {r0, r1}
 801fed2:	4620      	mov	r0, r4
 801fed4:	b003      	add	sp, #12
 801fed6:	bd30      	pop	{r4, r5, pc}

0801fed8 <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 801fed8:	b513      	push	{r0, r1, r4, lr}
 801feda:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 801fede:	4604      	mov	r4, r0
 801fee0:	3301      	adds	r3, #1
 801fee2:	d109      	bne.n	801fef8 <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 801fee4:	4601      	mov	r1, r0
 801fee6:	4668      	mov	r0, sp
 801fee8:	f7ff fd4e 	bl	801f988 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801feec:	f8bd 3000 	ldrh.w	r3, [sp]
 801fef0:	8423      	strh	r3, [r4, #32]
 801fef2:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801fef6:	8463      	strh	r3, [r4, #34]	; 0x22
 801fef8:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 801fefc:	b002      	add	sp, #8
 801fefe:	bd10      	pop	{r4, pc}

0801ff00 <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 801ff00:	b513      	push	{r0, r1, r4, lr}
 801ff02:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
 801ff06:	4604      	mov	r4, r0
 801ff08:	3301      	adds	r3, #1
 801ff0a:	d109      	bne.n	801ff20 <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 801ff0c:	4601      	mov	r1, r0
 801ff0e:	4668      	mov	r0, sp
 801ff10:	f7ff fd3a 	bl	801f988 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801ff14:	f8bd 3000 	ldrh.w	r3, [sp]
 801ff18:	8423      	strh	r3, [r4, #32]
 801ff1a:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801ff1e:	8463      	strh	r3, [r4, #34]	; 0x22
 801ff20:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	; 0x22
 801ff24:	b002      	add	sp, #8
 801ff26:	bd10      	pop	{r4, pc}

0801ff28 <_ZN8touchgfx6ScreenC1Ev>:
 801ff28:	b570      	push	{r4, r5, r6, lr}
 801ff2a:	4b17      	ldr	r3, [pc, #92]	; (801ff88 <_ZN8touchgfx6ScreenC1Ev+0x60>)
 801ff2c:	4605      	mov	r5, r0
 801ff2e:	4a17      	ldr	r2, [pc, #92]	; (801ff8c <_ZN8touchgfx6ScreenC1Ev+0x64>)
 801ff30:	2101      	movs	r1, #1
 801ff32:	f845 3b04 	str.w	r3, [r5], #4
 801ff36:	2300      	movs	r3, #0
 801ff38:	6042      	str	r2, [r0, #4]
 801ff3a:	4604      	mov	r4, r0
 801ff3c:	8103      	strh	r3, [r0, #8]
 801ff3e:	8143      	strh	r3, [r0, #10]
 801ff40:	8183      	strh	r3, [r0, #12]
 801ff42:	81c3      	strh	r3, [r0, #14]
 801ff44:	8203      	strh	r3, [r0, #16]
 801ff46:	8243      	strh	r3, [r0, #18]
 801ff48:	8283      	strh	r3, [r0, #20]
 801ff4a:	82c3      	strh	r3, [r0, #22]
 801ff4c:	6203      	str	r3, [r0, #32]
 801ff4e:	8483      	strh	r3, [r0, #36]	; 0x24
 801ff50:	84c3      	strh	r3, [r0, #38]	; 0x26
 801ff52:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
 801ff56:	6343      	str	r3, [r0, #52]	; 0x34
 801ff58:	f880 1029 	strb.w	r1, [r0, #41]	; 0x29
 801ff5c:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
 801ff60:	e9c0 3306 	strd	r3, r3, [r0, #24]
 801ff64:	e9c0 330b 	strd	r3, r3, [r0, #44]	; 0x2c
 801ff68:	4b09      	ldr	r3, [pc, #36]	; (801ff90 <_ZN8touchgfx6ScreenC1Ev+0x68>)
 801ff6a:	4628      	mov	r0, r5
 801ff6c:	f9b3 6000 	ldrsh.w	r6, [r3]
 801ff70:	6b53      	ldr	r3, [r2, #52]	; 0x34
 801ff72:	4a08      	ldr	r2, [pc, #32]	; (801ff94 <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 801ff74:	f9b2 1000 	ldrsh.w	r1, [r2]
 801ff78:	4798      	blx	r3
 801ff7a:	6863      	ldr	r3, [r4, #4]
 801ff7c:	4628      	mov	r0, r5
 801ff7e:	4631      	mov	r1, r6
 801ff80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801ff82:	4798      	blx	r3
 801ff84:	4620      	mov	r0, r4
 801ff86:	bd70      	pop	{r4, r5, r6, pc}
 801ff88:	0803074c 	.word	0x0803074c
 801ff8c:	0802e83c 	.word	0x0802e83c
 801ff90:	2400c8b2 	.word	0x2400c8b2
 801ff94:	2400c8b0 	.word	0x2400c8b0

0801ff98 <_ZN8touchgfx6Screen4drawEv>:
 801ff98:	4b09      	ldr	r3, [pc, #36]	; (801ffc0 <_ZN8touchgfx6Screen4drawEv+0x28>)
 801ff9a:	b507      	push	{r0, r1, r2, lr}
 801ff9c:	f9b3 2000 	ldrsh.w	r2, [r3]
 801ffa0:	2100      	movs	r1, #0
 801ffa2:	4b08      	ldr	r3, [pc, #32]	; (801ffc4 <_ZN8touchgfx6Screen4drawEv+0x2c>)
 801ffa4:	9100      	str	r1, [sp, #0]
 801ffa6:	4669      	mov	r1, sp
 801ffa8:	f9b3 3000 	ldrsh.w	r3, [r3]
 801ffac:	f8ad 2004 	strh.w	r2, [sp, #4]
 801ffb0:	f8ad 3006 	strh.w	r3, [sp, #6]
 801ffb4:	6803      	ldr	r3, [r0, #0]
 801ffb6:	689b      	ldr	r3, [r3, #8]
 801ffb8:	4798      	blx	r3
 801ffba:	b003      	add	sp, #12
 801ffbc:	f85d fb04 	ldr.w	pc, [sp], #4
 801ffc0:	2400c8b0 	.word	0x2400c8b0
 801ffc4:	2400c8b2 	.word	0x2400c8b2

0801ffc8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 801ffc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ffcc:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 801ffd0:	b089      	sub	sp, #36	; 0x24
 801ffd2:	4680      	mov	r8, r0
 801ffd4:	460c      	mov	r4, r1
 801ffd6:	2b00      	cmp	r3, #0
 801ffd8:	4615      	mov	r5, r2
 801ffda:	dd0e      	ble.n	801fffa <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801ffdc:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 801ffe0:	2b00      	cmp	r3, #0
 801ffe2:	dd0a      	ble.n	801fffa <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801ffe4:	4628      	mov	r0, r5
 801ffe6:	f7ff ff5b 	bl	801fea0 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801ffea:	4621      	mov	r1, r4
 801ffec:	f7f9 ffa2 	bl	8019f34 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801fff0:	69eb      	ldr	r3, [r5, #28]
 801fff2:	b928      	cbnz	r0, 8020000 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x38>
 801fff4:	461d      	mov	r5, r3
 801fff6:	2b00      	cmp	r3, #0
 801fff8:	d1f4      	bne.n	801ffe4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1c>
 801fffa:	b009      	add	sp, #36	; 0x24
 801fffc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020000:	ae04      	add	r6, sp, #16
 8020002:	2b00      	cmp	r3, #0
 8020004:	f000 80b5 	beq.w	8020172 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 8020008:	682b      	ldr	r3, [r5, #0]
 802000a:	4629      	mov	r1, r5
 802000c:	a802      	add	r0, sp, #8
 802000e:	68db      	ldr	r3, [r3, #12]
 8020010:	4798      	blx	r3
 8020012:	4628      	mov	r0, r5
 8020014:	f7ff ff60 	bl	801fed8 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 8020018:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 802001c:	4407      	add	r7, r0
 802001e:	4628      	mov	r0, r5
 8020020:	f7ff ff6e 	bl	801ff00 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 8020024:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8020028:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 802002c:	b23f      	sxth	r7, r7
 802002e:	4418      	add	r0, r3
 8020030:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8020034:	4621      	mov	r1, r4
 8020036:	f8ad 2014 	strh.w	r2, [sp, #20]
 802003a:	f8ad 0012 	strh.w	r0, [sp, #18]
 802003e:	4630      	mov	r0, r6
 8020040:	f8ad 3016 	strh.w	r3, [sp, #22]
 8020044:	f8ad 7010 	strh.w	r7, [sp, #16]
 8020048:	f7f8 f924 	bl	8018294 <_ZN8touchgfx4RectaNERKS0_>
 802004c:	4628      	mov	r0, r5
 802004e:	f7ff ff27 	bl	801fea0 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 8020052:	ab06      	add	r3, sp, #24
 8020054:	4602      	mov	r2, r0
 8020056:	e896 0003 	ldmia.w	r6, {r0, r1}
 802005a:	e883 0003 	stmia.w	r3, {r0, r1}
 802005e:	4611      	mov	r1, r2
 8020060:	4618      	mov	r0, r3
 8020062:	f7f8 f917 	bl	8018294 <_ZN8touchgfx4RectaNERKS0_>
 8020066:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 802006a:	f9b4 1000 	ldrsh.w	r1, [r4]
 802006e:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 8020072:	4299      	cmp	r1, r3
 8020074:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 8020078:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 802007c:	d10b      	bne.n	8020096 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 802007e:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8020082:	4552      	cmp	r2, sl
 8020084:	d107      	bne.n	8020096 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 8020086:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 802008a:	455a      	cmp	r2, fp
 802008c:	d103      	bne.n	8020096 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 802008e:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8020092:	454a      	cmp	r2, r9
 8020094:	d06d      	beq.n	8020172 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 8020096:	f1bb 0f00 	cmp.w	fp, #0
 802009a:	dd65      	ble.n	8020168 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 802009c:	f1b9 0f00 	cmp.w	r9, #0
 80200a0:	dd62      	ble.n	8020168 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 80200a2:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 80200a6:	fa1f f08a 	uxth.w	r0, sl
 80200aa:	4552      	cmp	r2, sl
 80200ac:	9000      	str	r0, [sp, #0]
 80200ae:	da12      	bge.n	80200d6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x10e>
 80200b0:	9301      	str	r3, [sp, #4]
 80200b2:	9b00      	ldr	r3, [sp, #0]
 80200b4:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 80200b8:	f8ad 2012 	strh.w	r2, [sp, #18]
 80200bc:	1a9a      	subs	r2, r3, r2
 80200be:	f8ad 1010 	strh.w	r1, [sp, #16]
 80200c2:	4631      	mov	r1, r6
 80200c4:	f8ad 0014 	strh.w	r0, [sp, #20]
 80200c8:	4640      	mov	r0, r8
 80200ca:	f8ad 2016 	strh.w	r2, [sp, #22]
 80200ce:	69ea      	ldr	r2, [r5, #28]
 80200d0:	f7ff ff7a 	bl	801ffc8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 80200d4:	9b01      	ldr	r3, [sp, #4]
 80200d6:	f9b4 2000 	ldrsh.w	r2, [r4]
 80200da:	b29f      	uxth	r7, r3
 80200dc:	429a      	cmp	r2, r3
 80200de:	da0d      	bge.n	80200fc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x134>
 80200e0:	f8ad 2010 	strh.w	r2, [sp, #16]
 80200e4:	1aba      	subs	r2, r7, r2
 80200e6:	f8ad a012 	strh.w	sl, [sp, #18]
 80200ea:	4631      	mov	r1, r6
 80200ec:	f8ad 2014 	strh.w	r2, [sp, #20]
 80200f0:	4640      	mov	r0, r8
 80200f2:	f8ad 9016 	strh.w	r9, [sp, #22]
 80200f6:	69ea      	ldr	r2, [r5, #28]
 80200f8:	f7ff ff66 	bl	801ffc8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 80200fc:	8822      	ldrh	r2, [r4, #0]
 80200fe:	445f      	add	r7, fp
 8020100:	88a3      	ldrh	r3, [r4, #4]
 8020102:	b2bf      	uxth	r7, r7
 8020104:	4413      	add	r3, r2
 8020106:	b23a      	sxth	r2, r7
 8020108:	b29b      	uxth	r3, r3
 802010a:	b219      	sxth	r1, r3
 802010c:	4291      	cmp	r1, r2
 802010e:	dd0d      	ble.n	802012c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x164>
 8020110:	1bdb      	subs	r3, r3, r7
 8020112:	f8ad 2010 	strh.w	r2, [sp, #16]
 8020116:	f8ad a012 	strh.w	sl, [sp, #18]
 802011a:	4631      	mov	r1, r6
 802011c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8020120:	4640      	mov	r0, r8
 8020122:	f8ad 9016 	strh.w	r9, [sp, #22]
 8020126:	69ea      	ldr	r2, [r5, #28]
 8020128:	f7ff ff4e 	bl	801ffc8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 802012c:	88e2      	ldrh	r2, [r4, #6]
 802012e:	8863      	ldrh	r3, [r4, #2]
 8020130:	4413      	add	r3, r2
 8020132:	9a00      	ldr	r2, [sp, #0]
 8020134:	444a      	add	r2, r9
 8020136:	b29b      	uxth	r3, r3
 8020138:	fa1f f982 	uxth.w	r9, r2
 802013c:	b219      	sxth	r1, r3
 802013e:	fa0f f289 	sxth.w	r2, r9
 8020142:	428a      	cmp	r2, r1
 8020144:	da15      	bge.n	8020172 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 8020146:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 802014a:	eba3 0309 	sub.w	r3, r3, r9
 802014e:	f9b4 0000 	ldrsh.w	r0, [r4]
 8020152:	f8ad 1014 	strh.w	r1, [sp, #20]
 8020156:	4631      	mov	r1, r6
 8020158:	f8ad 0010 	strh.w	r0, [sp, #16]
 802015c:	f8ad 2012 	strh.w	r2, [sp, #18]
 8020160:	f8ad 3016 	strh.w	r3, [sp, #22]
 8020164:	69ea      	ldr	r2, [r5, #28]
 8020166:	e001      	b.n	802016c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a4>
 8020168:	69ea      	ldr	r2, [r5, #28]
 802016a:	4621      	mov	r1, r4
 802016c:	4640      	mov	r0, r8
 802016e:	f7ff ff2b 	bl	801ffc8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8020172:	4628      	mov	r0, r5
 8020174:	f7ff fe94 	bl	801fea0 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 8020178:	6861      	ldr	r1, [r4, #4]
 802017a:	4602      	mov	r2, r0
 802017c:	4633      	mov	r3, r6
 802017e:	6820      	ldr	r0, [r4, #0]
 8020180:	c303      	stmia	r3!, {r0, r1}
 8020182:	4611      	mov	r1, r2
 8020184:	4630      	mov	r0, r6
 8020186:	f7f8 f885 	bl	8018294 <_ZN8touchgfx4RectaNERKS0_>
 802018a:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 802018e:	2b00      	cmp	r3, #0
 8020190:	f77f af33 	ble.w	801fffa <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8020194:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 8020198:	2b00      	cmp	r3, #0
 802019a:	f77f af2e 	ble.w	801fffa <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 802019e:	4628      	mov	r0, r5
 80201a0:	f7ff fe9a 	bl	801fed8 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 80201a4:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 80201a8:	1a18      	subs	r0, r3, r0
 80201aa:	f8ad 0010 	strh.w	r0, [sp, #16]
 80201ae:	4628      	mov	r0, r5
 80201b0:	f7ff fea6 	bl	801ff00 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 80201b4:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 80201b8:	4631      	mov	r1, r6
 80201ba:	1a18      	subs	r0, r3, r0
 80201bc:	f8ad 0012 	strh.w	r0, [sp, #18]
 80201c0:	4628      	mov	r0, r5
 80201c2:	682b      	ldr	r3, [r5, #0]
 80201c4:	689b      	ldr	r3, [r3, #8]
 80201c6:	4798      	blx	r3
 80201c8:	e717      	b.n	801fffa <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>

080201ca <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 80201ca:	b570      	push	{r4, r5, r6, lr}
 80201cc:	1d06      	adds	r6, r0, #4
 80201ce:	b086      	sub	sp, #24
 80201d0:	460c      	mov	r4, r1
 80201d2:	2300      	movs	r3, #0
 80201d4:	4631      	mov	r1, r6
 80201d6:	4605      	mov	r5, r0
 80201d8:	a802      	add	r0, sp, #8
 80201da:	9301      	str	r3, [sp, #4]
 80201dc:	f7ff fbd4 	bl	801f988 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80201e0:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 80201e4:	8822      	ldrh	r2, [r4, #0]
 80201e6:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 80201ea:	1ad2      	subs	r2, r2, r3
 80201ec:	8863      	ldrh	r3, [r4, #2]
 80201ee:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 80201f2:	1a5b      	subs	r3, r3, r1
 80201f4:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 80201f8:	f8ad 2010 	strh.w	r2, [sp, #16]
 80201fc:	aa01      	add	r2, sp, #4
 80201fe:	f8ad 0014 	strh.w	r0, [sp, #20]
 8020202:	4630      	mov	r0, r6
 8020204:	f8ad 1016 	strh.w	r1, [sp, #22]
 8020208:	a904      	add	r1, sp, #16
 802020a:	f8ad 3012 	strh.w	r3, [sp, #18]
 802020e:	f7f8 f919 	bl	8018444 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 8020212:	9a01      	ldr	r2, [sp, #4]
 8020214:	b11a      	cbz	r2, 802021e <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x54>
 8020216:	4621      	mov	r1, r4
 8020218:	4628      	mov	r0, r5
 802021a:	f7ff fed5 	bl	801ffc8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 802021e:	b006      	add	sp, #24
 8020220:	bd70      	pop	{r4, r5, r6, pc}

08020222 <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 8020222:	4602      	mov	r2, r0
 8020224:	b530      	push	{r4, r5, lr}
 8020226:	4604      	mov	r4, r0
 8020228:	b085      	sub	sp, #20
 802022a:	f852 0f08 	ldr.w	r0, [r2, #8]!
 802022e:	460d      	mov	r5, r1
 8020230:	466b      	mov	r3, sp
 8020232:	6851      	ldr	r1, [r2, #4]
 8020234:	c303      	stmia	r3!, {r0, r1}
 8020236:	4629      	mov	r1, r5
 8020238:	4668      	mov	r0, sp
 802023a:	f7f8 f82b 	bl	8018294 <_ZN8touchgfx4RectaNERKS0_>
 802023e:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8020242:	b12b      	cbz	r3, 8020250 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2e>
 8020244:	4669      	mov	r1, sp
 8020246:	4620      	mov	r0, r4
 8020248:	f7ff ffbf 	bl	80201ca <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 802024c:	b005      	add	sp, #20
 802024e:	bd30      	pop	{r4, r5, pc}
 8020250:	3404      	adds	r4, #4
 8020252:	a802      	add	r0, sp, #8
 8020254:	4621      	mov	r1, r4
 8020256:	f7ff fb97 	bl	801f988 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 802025a:	f8bd 3000 	ldrh.w	r3, [sp]
 802025e:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 8020262:	4669      	mov	r1, sp
 8020264:	4620      	mov	r0, r4
 8020266:	1a9b      	subs	r3, r3, r2
 8020268:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 802026c:	f8ad 3000 	strh.w	r3, [sp]
 8020270:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8020274:	1a9b      	subs	r3, r3, r2
 8020276:	f8ad 3002 	strh.w	r3, [sp, #2]
 802027a:	f7f8 f8aa 	bl	80183d2 <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 802027e:	e7e5      	b.n	802024c <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2a>

08020280 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 8020280:	460b      	mov	r3, r1
 8020282:	680a      	ldr	r2, [r1, #0]
 8020284:	1d01      	adds	r1, r0, #4
 8020286:	6992      	ldr	r2, [r2, #24]
 8020288:	4618      	mov	r0, r3
 802028a:	4710      	bx	r2

0802028c <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>:
 802028c:	4298      	cmp	r0, r3
 802028e:	d200      	bcs.n	8020292 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst+0x6>
 8020290:	b913      	cbnz	r3, 8020298 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst+0xc>
 8020292:	440a      	add	r2, r1
 8020294:	b210      	sxth	r0, r2
 8020296:	4770      	bx	lr
 8020298:	ee07 0a90 	vmov	s15, r0
 802029c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80202a0:	ee07 3a90 	vmov	s15, r3
 80202a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80202a8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80202ac:	ee07 2a90 	vmov	s15, r2
 80202b0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80202b4:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 80202b8:	ee07 1a90 	vmov	s15, r1
 80202bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80202c0:	ee37 7a66 	vsub.f32	s14, s14, s13
 80202c4:	ee67 5a07 	vmul.f32	s11, s14, s14
 80202c8:	eee5 6a87 	vfma.f32	s13, s11, s14
 80202cc:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80202d0:	eee6 7a26 	vfma.f32	s15, s12, s13
 80202d4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80202d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80202dc:	bfcc      	ite	gt
 80202de:	ee77 7a87 	vaddgt.f32	s15, s15, s14
 80202e2:	ee77 7ac7 	vsuble.f32	s15, s15, s14
 80202e6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80202ea:	ee17 3a90 	vmov	r3, s15
 80202ee:	b218      	sxth	r0, r3
 80202f0:	4770      	bx	lr

080202f2 <_ZN8touchgfx15EasingEquations14linearEaseNoneEtsst>:
 80202f2:	4298      	cmp	r0, r3
 80202f4:	d200      	bcs.n	80202f8 <_ZN8touchgfx15EasingEquations14linearEaseNoneEtsst+0x6>
 80202f6:	b913      	cbnz	r3, 80202fe <_ZN8touchgfx15EasingEquations14linearEaseNoneEtsst+0xc>
 80202f8:	440a      	add	r2, r1
 80202fa:	b210      	sxth	r0, r2
 80202fc:	4770      	bx	lr
 80202fe:	ee07 2a90 	vmov	s15, r2
 8020302:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8020306:	ee07 0a90 	vmov	s15, r0
 802030a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 802030e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8020312:	ee07 3a10 	vmov	s14, r3
 8020316:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 802031a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 802031e:	ee07 1a90 	vmov	s15, r1
 8020322:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8020326:	ee77 7a27 	vadd.f32	s15, s14, s15
 802032a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 802032e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8020332:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020336:	bfcc      	ite	gt
 8020338:	ee77 7a87 	vaddgt.f32	s15, s15, s14
 802033c:	ee77 7ac7 	vsuble.f32	s15, s15, s14
 8020340:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8020344:	ee17 3a90 	vmov	r3, s15
 8020348:	b218      	sxth	r0, r3
 802034a:	4770      	bx	lr

0802034c <_ZN8touchgfx15EasingEquations12linearEaseInEtsst>:
 802034c:	f7ff bfd1 	b.w	80202f2 <_ZN8touchgfx15EasingEquations14linearEaseNoneEtsst>

08020350 <_ZN8touchgfx12TextProviderC1Ev>:
 8020350:	b538      	push	{r3, r4, r5, lr}
 8020352:	2500      	movs	r5, #0
 8020354:	2302      	movs	r3, #2
 8020356:	4604      	mov	r4, r0
 8020358:	220e      	movs	r2, #14
 802035a:	7403      	strb	r3, [r0, #16]
 802035c:	4629      	mov	r1, r5
 802035e:	6145      	str	r5, [r0, #20]
 8020360:	7605      	strb	r5, [r0, #24]
 8020362:	83c5      	strh	r5, [r0, #30]
 8020364:	8405      	strh	r5, [r0, #32]
 8020366:	86c5      	strh	r5, [r0, #54]	; 0x36
 8020368:	8705      	strh	r5, [r0, #56]	; 0x38
 802036a:	87c5      	strh	r5, [r0, #62]	; 0x3e
 802036c:	f8a0 5040 	strh.w	r5, [r0, #64]	; 0x40
 8020370:	e9c0 5500 	strd	r5, r5, [r0]
 8020374:	e9c0 5511 	strd	r5, r5, [r0, #68]	; 0x44
 8020378:	304c      	adds	r0, #76	; 0x4c
 802037a:	f00b fb09 	bl	802b990 <memset>
 802037e:	2301      	movs	r3, #1
 8020380:	4620      	mov	r0, r4
 8020382:	f8a4 505a 	strh.w	r5, [r4, #90]	; 0x5a
 8020386:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 802038a:	f8a4 505e 	strh.w	r5, [r4, #94]	; 0x5e
 802038e:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
 8020392:	f884 5061 	strb.w	r5, [r4, #97]	; 0x61
 8020396:	f7e7 ffa9 	bl	80082ec <_ZN8touchgfx12TextProvider18initializeInternalEv>
 802039a:	4620      	mov	r0, r4
 802039c:	bd38      	pop	{r3, r4, r5, pc}

0802039e <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 802039e:	b530      	push	{r4, r5, lr}
 80203a0:	2500      	movs	r5, #0
 80203a2:	2401      	movs	r4, #1
 80203a4:	6843      	ldr	r3, [r0, #4]
 80203a6:	b913      	cbnz	r3, 80203ae <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 80203a8:	6803      	ldr	r3, [r0, #0]
 80203aa:	b313      	cbz	r3, 80203f2 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 80203ac:	6043      	str	r3, [r0, #4]
 80203ae:	7e03      	ldrb	r3, [r0, #24]
 80203b0:	b143      	cbz	r3, 80203c4 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 80203b2:	6943      	ldr	r3, [r0, #20]
 80203b4:	b12b      	cbz	r3, 80203c2 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 80203b6:	881a      	ldrh	r2, [r3, #0]
 80203b8:	b11a      	cbz	r2, 80203c2 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 80203ba:	1c9a      	adds	r2, r3, #2
 80203bc:	6142      	str	r2, [r0, #20]
 80203be:	8818      	ldrh	r0, [r3, #0]
 80203c0:	bd30      	pop	{r4, r5, pc}
 80203c2:	7605      	strb	r5, [r0, #24]
 80203c4:	6843      	ldr	r3, [r0, #4]
 80203c6:	8819      	ldrh	r1, [r3, #0]
 80203c8:	b199      	cbz	r1, 80203f2 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 80203ca:	1c9a      	adds	r2, r3, #2
 80203cc:	2902      	cmp	r1, #2
 80203ce:	6042      	str	r2, [r0, #4]
 80203d0:	d1f5      	bne.n	80203be <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 80203d2:	7c03      	ldrb	r3, [r0, #16]
 80203d4:	2b01      	cmp	r3, #1
 80203d6:	d8e5      	bhi.n	80203a4 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 80203d8:	1c5a      	adds	r2, r3, #1
 80203da:	3302      	adds	r3, #2
 80203dc:	7402      	strb	r2, [r0, #16]
 80203de:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80203e2:	6143      	str	r3, [r0, #20]
 80203e4:	2b00      	cmp	r3, #0
 80203e6:	d0dd      	beq.n	80203a4 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 80203e8:	881b      	ldrh	r3, [r3, #0]
 80203ea:	2b00      	cmp	r3, #0
 80203ec:	d0da      	beq.n	80203a4 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 80203ee:	7604      	strb	r4, [r0, #24]
 80203f0:	e7d8      	b.n	80203a4 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 80203f2:	2000      	movs	r0, #0
 80203f4:	e7e4      	b.n	80203c0 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

080203f6 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>:
 80203f6:	b430      	push	{r4, r5}
 80203f8:	6815      	ldr	r5, [r2, #0]
 80203fa:	6085      	str	r5, [r0, #8]
 80203fc:	6852      	ldr	r2, [r2, #4]
 80203fe:	6443      	str	r3, [r0, #68]	; 0x44
 8020400:	60c2      	str	r2, [r0, #12]
 8020402:	2200      	movs	r2, #0
 8020404:	9b02      	ldr	r3, [sp, #8]
 8020406:	7402      	strb	r2, [r0, #16]
 8020408:	6001      	str	r1, [r0, #0]
 802040a:	6483      	str	r3, [r0, #72]	; 0x48
 802040c:	6042      	str	r2, [r0, #4]
 802040e:	6142      	str	r2, [r0, #20]
 8020410:	7602      	strb	r2, [r0, #24]
 8020412:	8702      	strh	r2, [r0, #56]	; 0x38
 8020414:	8402      	strh	r2, [r0, #32]
 8020416:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 802041a:	bc30      	pop	{r4, r5}
 802041c:	f7e7 bf66 	b.w	80082ec <_ZN8touchgfx12TextProvider18initializeInternalEv>

08020420 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 8020420:	b5f0      	push	{r4, r5, r6, r7, lr}
 8020422:	4605      	mov	r5, r0
 8020424:	4608      	mov	r0, r1
 8020426:	b1f1      	cbz	r1, 8020466 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x46>
 8020428:	f105 044c 	add.w	r4, r5, #76	; 0x4c
 802042c:	460b      	mov	r3, r1
 802042e:	f101 0708 	add.w	r7, r1, #8
 8020432:	4622      	mov	r2, r4
 8020434:	6818      	ldr	r0, [r3, #0]
 8020436:	3308      	adds	r3, #8
 8020438:	f853 1c04 	ldr.w	r1, [r3, #-4]
 802043c:	4626      	mov	r6, r4
 802043e:	42bb      	cmp	r3, r7
 8020440:	c603      	stmia	r6!, {r0, r1}
 8020442:	4634      	mov	r4, r6
 8020444:	d1f6      	bne.n	8020434 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 8020446:	6818      	ldr	r0, [r3, #0]
 8020448:	6030      	str	r0, [r6, #0]
 802044a:	4610      	mov	r0, r2
 802044c:	889b      	ldrh	r3, [r3, #4]
 802044e:	80b3      	strh	r3, [r6, #4]
 8020450:	f895 3059 	ldrb.w	r3, [r5, #89]	; 0x59
 8020454:	015b      	lsls	r3, r3, #5
 8020456:	f403 7180 	and.w	r1, r3, #256	; 0x100
 802045a:	f895 3052 	ldrb.w	r3, [r5, #82]	; 0x52
 802045e:	430b      	orrs	r3, r1
 8020460:	425b      	negs	r3, r3
 8020462:	f885 3055 	strb.w	r3, [r5, #85]	; 0x55
 8020466:	bdf0      	pop	{r4, r5, r6, r7, pc}

08020468 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 8020468:	b538      	push	{r3, r4, r5, lr}
 802046a:	460c      	mov	r4, r1
 802046c:	6811      	ldr	r1, [r2, #0]
 802046e:	4610      	mov	r0, r2
 8020470:	68cd      	ldr	r5, [r1, #12]
 8020472:	4619      	mov	r1, r3
 8020474:	47a8      	blx	r5
 8020476:	2800      	cmp	r0, #0
 8020478:	bf08      	it	eq
 802047a:	4620      	moveq	r0, r4
 802047c:	bd38      	pop	{r3, r4, r5, pc}
	...

08020480 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 8020480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020482:	4604      	mov	r4, r0
 8020484:	4615      	mov	r5, r2
 8020486:	4608      	mov	r0, r1
 8020488:	b93a      	cbnz	r2, 802049a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 802048a:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 802048e:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 8020492:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
 8020496:	4628      	mov	r0, r5
 8020498:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802049a:	f892 c00d 	ldrb.w	ip, [r2, #13]
 802049e:	8893      	ldrh	r3, [r2, #4]
 80204a0:	ea4f 160c 	mov.w	r6, ip, lsl #4
 80204a4:	f406 7280 	and.w	r2, r6, #256	; 0x100
 80204a8:	79ee      	ldrb	r6, [r5, #7]
 80204aa:	4316      	orrs	r6, r2
 80204ac:	f46f 6263 	mvn.w	r2, #3632	; 0xe30
 80204b0:	189a      	adds	r2, r3, r2
 80204b2:	b2b7      	uxth	r7, r6
 80204b4:	b291      	uxth	r1, r2
 80204b6:	291d      	cmp	r1, #29
 80204b8:	f200 8084 	bhi.w	80205c4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x144>
 80204bc:	2201      	movs	r2, #1
 80204be:	10f6      	asrs	r6, r6, #3
 80204c0:	408a      	lsls	r2, r1
 80204c2:	4978      	ldr	r1, [pc, #480]	; (80206a4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x224>)
 80204c4:	420a      	tst	r2, r1
 80204c6:	d12e      	bne.n	8020526 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa6>
 80204c8:	f412 7f60 	tst.w	r2, #896	; 0x380
 80204cc:	d07a      	beq.n	80205c4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x144>
 80204ce:	f104 024c 	add.w	r2, r4, #76	; 0x4c
 80204d2:	462b      	mov	r3, r5
 80204d4:	f105 0e08 	add.w	lr, r5, #8
 80204d8:	4615      	mov	r5, r2
 80204da:	6818      	ldr	r0, [r3, #0]
 80204dc:	3308      	adds	r3, #8
 80204de:	f853 1c04 	ldr.w	r1, [r3, #-4]
 80204e2:	4694      	mov	ip, r2
 80204e4:	4573      	cmp	r3, lr
 80204e6:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 80204ea:	4662      	mov	r2, ip
 80204ec:	d1f5      	bne.n	80204da <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x5a>
 80204ee:	6818      	ldr	r0, [r3, #0]
 80204f0:	f8cc 0000 	str.w	r0, [ip]
 80204f4:	889b      	ldrh	r3, [r3, #4]
 80204f6:	f8ac 3004 	strh.w	r3, [ip, #4]
 80204fa:	b2b3      	uxth	r3, r6
 80204fc:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8020500:	f894 0059 	ldrb.w	r0, [r4, #89]	; 0x59
 8020504:	1aca      	subs	r2, r1, r3
 8020506:	1bcf      	subs	r7, r1, r7
 8020508:	f020 0060 	bic.w	r0, r0, #96	; 0x60
 802050c:	b292      	uxth	r2, r2
 802050e:	1afb      	subs	r3, r7, r3
 8020510:	f884 2054 	strb.w	r2, [r4, #84]	; 0x54
 8020514:	10d2      	asrs	r2, r2, #3
 8020516:	f002 0260 	and.w	r2, r2, #96	; 0x60
 802051a:	4302      	orrs	r2, r0
 802051c:	f884 2059 	strb.w	r2, [r4, #89]	; 0x59
 8020520:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 8020524:	e7b7      	b.n	8020496 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 8020526:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 8020528:	b92b      	cbnz	r3, 8020536 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xb6>
 802052a:	4b5f      	ldr	r3, [pc, #380]	; (80206a8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x228>)
 802052c:	21c0      	movs	r1, #192	; 0xc0
 802052e:	4a5f      	ldr	r2, [pc, #380]	; (80206ac <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x22c>)
 8020530:	485f      	ldr	r0, [pc, #380]	; (80206b0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x230>)
 8020532:	f00b f9a1 	bl	802b878 <__assert_func>
 8020536:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8020538:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 802053c:	8c59      	ldrh	r1, [r3, #34]	; 0x22
 802053e:	f640 6333 	movw	r3, #3635	; 0xe33
 8020542:	4299      	cmp	r1, r3
 8020544:	d110      	bne.n	8020568 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xe8>
 8020546:	6803      	ldr	r3, [r0, #0]
 8020548:	68db      	ldr	r3, [r3, #12]
 802054a:	4798      	blx	r3
 802054c:	7b41      	ldrb	r1, [r0, #13]
 802054e:	00cb      	lsls	r3, r1, #3
 8020550:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8020554:	7a03      	ldrb	r3, [r0, #8]
 8020556:	0648      	lsls	r0, r1, #25
 8020558:	ea43 0302 	orr.w	r3, r3, r2
 802055c:	bf44      	itt	mi
 802055e:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8020562:	b21b      	sxthmi	r3, r3
 8020564:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8020568:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 802056c:	462a      	mov	r2, r5
 802056e:	f105 0c08 	add.w	ip, r5, #8
 8020572:	443b      	add	r3, r7
 8020574:	4433      	add	r3, r6
 8020576:	f104 064c 	add.w	r6, r4, #76	; 0x4c
 802057a:	b29b      	uxth	r3, r3
 802057c:	4635      	mov	r5, r6
 802057e:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8020582:	6810      	ldr	r0, [r2, #0]
 8020584:	3208      	adds	r2, #8
 8020586:	f852 1c04 	ldr.w	r1, [r2, #-4]
 802058a:	4637      	mov	r7, r6
 802058c:	4562      	cmp	r2, ip
 802058e:	c703      	stmia	r7!, {r0, r1}
 8020590:	463e      	mov	r6, r7
 8020592:	d1f6      	bne.n	8020582 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x102>
 8020594:	6810      	ldr	r0, [r2, #0]
 8020596:	6038      	str	r0, [r7, #0]
 8020598:	8892      	ldrh	r2, [r2, #4]
 802059a:	80ba      	strh	r2, [r7, #4]
 802059c:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 80205a0:	10db      	asrs	r3, r3, #3
 80205a2:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 80205a6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80205aa:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80205ae:	4313      	orrs	r3, r2
 80205b0:	f894 205e 	ldrb.w	r2, [r4, #94]	; 0x5e
 80205b4:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 80205b8:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
 80205bc:	1a9b      	subs	r3, r3, r2
 80205be:	f884 3055 	strb.w	r3, [r4, #85]	; 0x55
 80205c2:	e768      	b.n	8020496 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 80205c4:	f023 0204 	bic.w	r2, r3, #4
 80205c8:	f640 611b 	movw	r1, #3611	; 0xe1b
 80205cc:	428a      	cmp	r2, r1
 80205ce:	d003      	beq.n	80205d8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x158>
 80205d0:	f640 621d 	movw	r2, #3613	; 0xe1d
 80205d4:	4293      	cmp	r3, r2
 80205d6:	d120      	bne.n	802061a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x19a>
 80205d8:	3b01      	subs	r3, #1
 80205da:	4602      	mov	r2, r0
 80205dc:	4629      	mov	r1, r5
 80205de:	4620      	mov	r0, r4
 80205e0:	b29b      	uxth	r3, r3
 80205e2:	f7ff ff41 	bl	8020468 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 80205e6:	7b41      	ldrb	r1, [r0, #13]
 80205e8:	00cb      	lsls	r3, r1, #3
 80205ea:	0649      	lsls	r1, r1, #25
 80205ec:	f403 7280 	and.w	r2, r3, #256	; 0x100
 80205f0:	7a03      	ldrb	r3, [r0, #8]
 80205f2:	ea43 0302 	orr.w	r3, r3, r2
 80205f6:	bf44      	itt	mi
 80205f8:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 80205fc:	b21b      	sxthmi	r3, r3
 80205fe:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8020602:	7b6b      	ldrb	r3, [r5, #13]
 8020604:	7aaa      	ldrb	r2, [r5, #10]
 8020606:	005b      	lsls	r3, r3, #1
 8020608:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802060c:	4313      	orrs	r3, r2
 802060e:	115a      	asrs	r2, r3, #5
 8020610:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 8020614:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
 8020618:	e035      	b.n	8020686 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x206>
 802061a:	ea4f 02cc 	mov.w	r2, ip, lsl #3
 802061e:	f01c 0f40 	tst.w	ip, #64	; 0x40
 8020622:	f402 7180 	and.w	r1, r2, #256	; 0x100
 8020626:	7a2a      	ldrb	r2, [r5, #8]
 8020628:	ea42 0201 	orr.w	r2, r2, r1
 802062c:	f640 6109 	movw	r1, #3593	; 0xe09
 8020630:	bf1c      	itt	ne
 8020632:	f5a2 7200 	subne.w	r2, r2, #512	; 0x200
 8020636:	b212      	sxthne	r2, r2
 8020638:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 802063c:	f023 0210 	bic.w	r2, r3, #16
 8020640:	428a      	cmp	r2, r1
 8020642:	d003      	beq.n	802064c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1cc>
 8020644:	f640 6213 	movw	r2, #3603	; 0xe13
 8020648:	4293      	cmp	r3, r2
 802064a:	d129      	bne.n	80206a0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x220>
 802064c:	7b6e      	ldrb	r6, [r5, #13]
 802064e:	4629      	mov	r1, r5
 8020650:	0076      	lsls	r6, r6, #1
 8020652:	f406 7280 	and.w	r2, r6, #256	; 0x100
 8020656:	7aae      	ldrb	r6, [r5, #10]
 8020658:	4316      	orrs	r6, r2
 802065a:	f640 6213 	movw	r2, #3603	; 0xe13
 802065e:	4293      	cmp	r3, r2
 8020660:	4602      	mov	r2, r0
 8020662:	4620      	mov	r0, r4
 8020664:	bf16      	itet	ne
 8020666:	f103 33ff 	addne.w	r3, r3, #4294967295
 802066a:	f640 630c 	movweq	r3, #3596	; 0xe0c
 802066e:	b29b      	uxthne	r3, r3
 8020670:	f7ff fefa 	bl	8020468 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 8020674:	7b43      	ldrb	r3, [r0, #13]
 8020676:	7a82      	ldrb	r2, [r0, #10]
 8020678:	005b      	lsls	r3, r3, #1
 802067a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802067e:	4313      	orrs	r3, r2
 8020680:	1af6      	subs	r6, r6, r3
 8020682:	f8a4 605e 	strh.w	r6, [r4, #94]	; 0x5e
 8020686:	7b69      	ldrb	r1, [r5, #13]
 8020688:	00cb      	lsls	r3, r1, #3
 802068a:	f403 7280 	and.w	r2, r3, #256	; 0x100
 802068e:	7a2b      	ldrb	r3, [r5, #8]
 8020690:	4313      	orrs	r3, r2
 8020692:	064a      	lsls	r2, r1, #25
 8020694:	bf44      	itt	mi
 8020696:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 802069a:	b21b      	sxthmi	r3, r3
 802069c:	1bdb      	subs	r3, r3, r7
 802069e:	e73f      	b.n	8020520 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa0>
 80206a0:	2300      	movs	r3, #0
 80206a2:	e7b7      	b.n	8020614 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x194>
 80206a4:	3fc00079 	.word	0x3fc00079
 80206a8:	08030778 	.word	0x08030778
 80206ac:	080309ea 	.word	0x080309ea
 80206b0:	08030781 	.word	0x08030781

080206b4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
 80206b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80206b8:	4604      	mov	r4, r0
 80206ba:	b942      	cbnz	r2, 80206ce <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
 80206bc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80206c0:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
 80206c4:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 80206c8:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
 80206cc:	e046      	b.n	802075c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa8>
 80206ce:	7b51      	ldrb	r1, [r2, #13]
 80206d0:	8893      	ldrh	r3, [r2, #4]
 80206d2:	010f      	lsls	r7, r1, #4
 80206d4:	f407 7080 	and.w	r0, r7, #256	; 0x100
 80206d8:	79d7      	ldrb	r7, [r2, #7]
 80206da:	4307      	orrs	r7, r0
 80206dc:	2f04      	cmp	r7, #4
 80206de:	b2bd      	uxth	r5, r7
 80206e0:	bfcc      	ite	gt
 80206e2:	08bf      	lsrgt	r7, r7, #2
 80206e4:	2701      	movle	r7, #1
 80206e6:	f5b3 6fdd 	cmp.w	r3, #1768	; 0x6e8
 80206ea:	f200 80ab 	bhi.w	8020844 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x190>
 80206ee:	f240 60e7 	movw	r0, #1767	; 0x6e7
 80206f2:	4283      	cmp	r3, r0
 80206f4:	d216      	bcs.n	8020724 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 80206f6:	f240 605b 	movw	r0, #1627	; 0x65b
 80206fa:	4283      	cmp	r3, r0
 80206fc:	d859      	bhi.n	80207b2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xfe>
 80206fe:	f240 6057 	movw	r0, #1623	; 0x657
 8020702:	4283      	cmp	r3, r0
 8020704:	d20e      	bcs.n	8020724 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8020706:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 802070a:	d24a      	bcs.n	80207a2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xee>
 802070c:	f240 604e 	movw	r0, #1614	; 0x64e
 8020710:	4283      	cmp	r3, r0
 8020712:	d207      	bcs.n	8020724 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8020714:	f240 601a 	movw	r0, #1562	; 0x61a
 8020718:	4283      	cmp	r3, r0
 802071a:	d02a      	beq.n	8020772 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 802071c:	d821      	bhi.n	8020762 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xae>
 802071e:	f5b3 6fc2 	cmp.w	r3, #1552	; 0x610
 8020722:	d35b      	bcc.n	80207dc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 8020724:	f9b4 305a 	ldrsh.w	r3, [r4, #90]	; 0x5a
 8020728:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 802072c:	f040 80d0 	bne.w	80208d0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21c>
 8020730:	f9b4 005c 	ldrsh.w	r0, [r4, #92]	; 0x5c
 8020734:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 8020738:	f040 80ca 	bne.w	80208d0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21c>
 802073c:	00cb      	lsls	r3, r1, #3
 802073e:	0649      	lsls	r1, r1, #25
 8020740:	f403 7080 	and.w	r0, r3, #256	; 0x100
 8020744:	7a13      	ldrb	r3, [r2, #8]
 8020746:	ea43 0300 	orr.w	r3, r3, r0
 802074a:	bf44      	itt	mi
 802074c:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8020750:	b21b      	sxthmi	r3, r3
 8020752:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8020756:	1b5d      	subs	r5, r3, r5
 8020758:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 802075c:	4610      	mov	r0, r2
 802075e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8020762:	f240 604b 	movw	r0, #1611	; 0x64b
 8020766:	4283      	cmp	r3, r0
 8020768:	d338      	bcc.n	80207dc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 802076a:	f240 604c 	movw	r0, #1612	; 0x64c
 802076e:	4283      	cmp	r3, r0
 8020770:	d9d8      	bls.n	8020724 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8020772:	f9b4 005a 	ldrsh.w	r0, [r4, #90]	; 0x5a
 8020776:	f9b4 305c 	ldrsh.w	r3, [r4, #92]	; 0x5c
 802077a:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 802077e:	f040 80f2 	bne.w	8020966 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b2>
 8020782:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8020786:	f040 80ee 	bne.w	8020966 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b2>
 802078a:	00cb      	lsls	r3, r1, #3
 802078c:	064e      	lsls	r6, r1, #25
 802078e:	f403 7080 	and.w	r0, r3, #256	; 0x100
 8020792:	7a13      	ldrb	r3, [r2, #8]
 8020794:	ea43 0300 	orr.w	r3, r3, r0
 8020798:	bf44      	itt	mi
 802079a:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 802079e:	b21b      	sxthmi	r3, r3
 80207a0:	e7d9      	b.n	8020756 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa2>
 80207a2:	f240 6054 	movw	r0, #1620	; 0x654
 80207a6:	4283      	cmp	r3, r0
 80207a8:	d8e3      	bhi.n	8020772 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 80207aa:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 80207ae:	d9e0      	bls.n	8020772 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 80207b0:	e7b8      	b.n	8020724 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 80207b2:	f240 6074 	movw	r0, #1652	; 0x674
 80207b6:	4283      	cmp	r3, r0
 80207b8:	d0b4      	beq.n	8020724 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 80207ba:	d82d      	bhi.n	8020818 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x164>
 80207bc:	f240 605e 	movw	r0, #1630	; 0x65e
 80207c0:	4283      	cmp	r3, r0
 80207c2:	d804      	bhi.n	80207ce <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11a>
 80207c4:	f240 605d 	movw	r0, #1629	; 0x65d
 80207c8:	4283      	cmp	r3, r0
 80207ca:	d3d2      	bcc.n	8020772 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 80207cc:	e7aa      	b.n	8020724 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 80207ce:	f240 605f 	movw	r0, #1631	; 0x65f
 80207d2:	4283      	cmp	r3, r0
 80207d4:	d0cd      	beq.n	8020772 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 80207d6:	f5b3 6fce 	cmp.w	r3, #1648	; 0x670
 80207da:	d0a3      	beq.n	8020724 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 80207dc:	00cb      	lsls	r3, r1, #3
 80207de:	0649      	lsls	r1, r1, #25
 80207e0:	f403 7080 	and.w	r0, r3, #256	; 0x100
 80207e4:	7a13      	ldrb	r3, [r2, #8]
 80207e6:	ea43 0300 	orr.w	r3, r3, r0
 80207ea:	bf44      	itt	mi
 80207ec:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 80207f0:	b21b      	sxthmi	r3, r3
 80207f2:	1b5d      	subs	r5, r3, r5
 80207f4:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 80207f8:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 80207fc:	7b53      	ldrb	r3, [r2, #13]
 80207fe:	015b      	lsls	r3, r3, #5
 8020800:	f403 7180 	and.w	r1, r3, #256	; 0x100
 8020804:	7993      	ldrb	r3, [r2, #6]
 8020806:	430b      	orrs	r3, r1
 8020808:	2105      	movs	r1, #5
 802080a:	005b      	lsls	r3, r3, #1
 802080c:	fb93 f3f1 	sdiv	r3, r3, r1
 8020810:	f992 1009 	ldrsb.w	r1, [r2, #9]
 8020814:	440b      	add	r3, r1
 8020816:	e757      	b.n	80206c8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
 8020818:	f240 60e2 	movw	r0, #1762	; 0x6e2
 802081c:	4283      	cmp	r3, r0
 802081e:	d809      	bhi.n	8020834 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x180>
 8020820:	f240 60df 	movw	r0, #1759	; 0x6df
 8020824:	4283      	cmp	r3, r0
 8020826:	f4bf af7d 	bcs.w	8020724 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 802082a:	f2a3 63d6 	subw	r3, r3, #1750	; 0x6d6
 802082e:	2b05      	cmp	r3, #5
 8020830:	d8d4      	bhi.n	80207dc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 8020832:	e777      	b.n	8020724 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8020834:	f240 60e3 	movw	r0, #1763	; 0x6e3
 8020838:	4283      	cmp	r3, r0
 802083a:	d09a      	beq.n	8020772 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 802083c:	f240 60e4 	movw	r0, #1764	; 0x6e4
 8020840:	4283      	cmp	r3, r0
 8020842:	e7ca      	b.n	80207da <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x126>
 8020844:	f5b3 6f0f 	cmp.w	r3, #2288	; 0x8f0
 8020848:	d22b      	bcs.n	80208a2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1ee>
 802084a:	f640 00ed 	movw	r0, #2285	; 0x8ed
 802084e:	4283      	cmp	r3, r0
 8020850:	d28f      	bcs.n	8020772 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8020852:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8020856:	4283      	cmp	r3, r0
 8020858:	d816      	bhi.n	8020888 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d4>
 802085a:	f640 00e4 	movw	r0, #2276	; 0x8e4
 802085e:	4283      	cmp	r3, r0
 8020860:	f4bf af60 	bcs.w	8020724 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8020864:	f240 60ec 	movw	r0, #1772	; 0x6ec
 8020868:	4283      	cmp	r3, r0
 802086a:	d80a      	bhi.n	8020882 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1ce>
 802086c:	f240 60eb 	movw	r0, #1771	; 0x6eb
 8020870:	4283      	cmp	r3, r0
 8020872:	f4bf af57 	bcs.w	8020724 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8020876:	f240 60ea 	movw	r0, #1770	; 0x6ea
 802087a:	4283      	cmp	r3, r0
 802087c:	f43f af79 	beq.w	8020772 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8020880:	e7ac      	b.n	80207dc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 8020882:	f240 60ed 	movw	r0, #1773	; 0x6ed
 8020886:	e7f8      	b.n	802087a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c6>
 8020888:	f640 00e8 	movw	r0, #2280	; 0x8e8
 802088c:	4283      	cmp	r3, r0
 802088e:	d802      	bhi.n	8020896 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e2>
 8020890:	f640 00e7 	movw	r0, #2279	; 0x8e7
 8020894:	e798      	b.n	80207c8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x114>
 8020896:	f640 00e9 	movw	r0, #2281	; 0x8e9
 802089a:	4283      	cmp	r3, r0
 802089c:	f47f af42 	bne.w	8020724 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 80208a0:	e767      	b.n	8020772 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 80208a2:	f640 00f6 	movw	r0, #2294	; 0x8f6
 80208a6:	4283      	cmp	r3, r0
 80208a8:	f43f af63 	beq.w	8020772 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 80208ac:	d802      	bhi.n	80208b4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x200>
 80208ae:	f640 00f2 	movw	r0, #2290	; 0x8f2
 80208b2:	e7f2      	b.n	802089a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e6>
 80208b4:	f640 00fa 	movw	r0, #2298	; 0x8fa
 80208b8:	4283      	cmp	r3, r0
 80208ba:	d805      	bhi.n	80208c8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x214>
 80208bc:	f640 00f9 	movw	r0, #2297	; 0x8f9
 80208c0:	4283      	cmp	r3, r0
 80208c2:	f4ff af2f 	bcc.w	8020724 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 80208c6:	e754      	b.n	8020772 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 80208c8:	f640 00fe 	movw	r0, #2302	; 0x8fe
 80208cc:	4283      	cmp	r3, r0
 80208ce:	e7af      	b.n	8020830 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17c>
 80208d0:	f104 0c4c 	add.w	ip, r4, #76	; 0x4c
 80208d4:	4617      	mov	r7, r2
 80208d6:	f102 0808 	add.w	r8, r2, #8
 80208da:	4666      	mov	r6, ip
 80208dc:	6838      	ldr	r0, [r7, #0]
 80208de:	3708      	adds	r7, #8
 80208e0:	f857 1c04 	ldr.w	r1, [r7, #-4]
 80208e4:	46e6      	mov	lr, ip
 80208e6:	4547      	cmp	r7, r8
 80208e8:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 80208ec:	46f4      	mov	ip, lr
 80208ee:	d1f5      	bne.n	80208dc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x228>
 80208f0:	6838      	ldr	r0, [r7, #0]
 80208f2:	f8ce 0000 	str.w	r0, [lr]
 80208f6:	88b9      	ldrh	r1, [r7, #4]
 80208f8:	f8ae 1004 	strh.w	r1, [lr, #4]
 80208fc:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
 8020900:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 8020904:	d009      	beq.n	802091a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x266>
 8020906:	7b51      	ldrb	r1, [r2, #13]
 8020908:	7992      	ldrb	r2, [r2, #6]
 802090a:	0149      	lsls	r1, r1, #5
 802090c:	f401 7180 	and.w	r1, r1, #256	; 0x100
 8020910:	4311      	orrs	r1, r2
 8020912:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 8020916:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
 802091a:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 802091e:	d00d      	beq.n	802093c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x288>
 8020920:	442b      	add	r3, r5
 8020922:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 8020926:	b29b      	uxth	r3, r3
 8020928:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 802092c:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 8020930:	10db      	asrs	r3, r3, #3
 8020932:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8020936:	4313      	orrs	r3, r2
 8020938:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 802093c:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 8020940:	00cb      	lsls	r3, r1, #3
 8020942:	064f      	lsls	r7, r1, #25
 8020944:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8020948:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 802094c:	ea43 0302 	orr.w	r3, r3, r2
 8020950:	bf44      	itt	mi
 8020952:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8020956:	b21b      	sxthmi	r3, r3
 8020958:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 802095c:	1b5d      	subs	r5, r3, r5
 802095e:	4632      	mov	r2, r6
 8020960:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 8020964:	e6fa      	b.n	802075c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa8>
 8020966:	f104 0e4c 	add.w	lr, r4, #76	; 0x4c
 802096a:	4694      	mov	ip, r2
 802096c:	f102 0908 	add.w	r9, r2, #8
 8020970:	4676      	mov	r6, lr
 8020972:	f8dc 0000 	ldr.w	r0, [ip]
 8020976:	f10c 0c08 	add.w	ip, ip, #8
 802097a:	f85c 1c04 	ldr.w	r1, [ip, #-4]
 802097e:	46f0      	mov	r8, lr
 8020980:	45cc      	cmp	ip, r9
 8020982:	e8a8 0003 	stmia.w	r8!, {r0, r1}
 8020986:	46c6      	mov	lr, r8
 8020988:	d1f3      	bne.n	8020972 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2be>
 802098a:	f8dc 0000 	ldr.w	r0, [ip]
 802098e:	f8c8 0000 	str.w	r0, [r8]
 8020992:	f8bc 1004 	ldrh.w	r1, [ip, #4]
 8020996:	f8a8 1004 	strh.w	r1, [r8, #4]
 802099a:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
 802099e:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 80209a2:	d009      	beq.n	80209b8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x304>
 80209a4:	7b51      	ldrb	r1, [r2, #13]
 80209a6:	7992      	ldrb	r2, [r2, #6]
 80209a8:	0149      	lsls	r1, r1, #5
 80209aa:	f401 7180 	and.w	r1, r1, #256	; 0x100
 80209ae:	4311      	orrs	r1, r2
 80209b0:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 80209b4:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
 80209b8:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 80209bc:	d00d      	beq.n	80209da <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x326>
 80209be:	1bdb      	subs	r3, r3, r7
 80209c0:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 80209c4:	b29b      	uxth	r3, r3
 80209c6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80209ca:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 80209ce:	10db      	asrs	r3, r3, #3
 80209d0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80209d4:	4313      	orrs	r3, r2
 80209d6:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 80209da:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 80209de:	00cb      	lsls	r3, r1, #3
 80209e0:	0648      	lsls	r0, r1, #25
 80209e2:	f403 7280 	and.w	r2, r3, #256	; 0x100
 80209e6:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 80209ea:	ea43 0302 	orr.w	r3, r3, r2
 80209ee:	bf44      	itt	mi
 80209f0:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 80209f4:	b21b      	sxthmi	r3, r3
 80209f6:	e7b1      	b.n	802095c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2a8>

080209f8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 80209f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80209fc:	461e      	mov	r6, r3
 80209fe:	8f03      	ldrh	r3, [r0, #56]	; 0x38
 8020a00:	4604      	mov	r4, r0
 8020a02:	4617      	mov	r7, r2
 8020a04:	b92b      	cbnz	r3, 8020a12 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1a>
 8020a06:	4b25      	ldr	r3, [pc, #148]	; (8020a9c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0xa4>)
 8020a08:	21c0      	movs	r1, #192	; 0xc0
 8020a0a:	4a25      	ldr	r2, [pc, #148]	; (8020aa0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0xa8>)
 8020a0c:	4825      	ldr	r0, [pc, #148]	; (8020aa4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0xac>)
 8020a0e:	f00a ff33 	bl	802b878 <__assert_func>
 8020a12:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 8020a14:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8020a18:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 8020a1c:	f7e7 fbc0 	bl	80081a0 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8020a20:	4605      	mov	r5, r0
 8020a22:	b918      	cbnz	r0, 8020a2c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x34>
 8020a24:	6030      	str	r0, [r6, #0]
 8020a26:	4628      	mov	r0, r5
 8020a28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8020a2c:	683b      	ldr	r3, [r7, #0]
 8020a2e:	4601      	mov	r1, r0
 8020a30:	4638      	mov	r0, r7
 8020a32:	68db      	ldr	r3, [r3, #12]
 8020a34:	4798      	blx	r3
 8020a36:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 8020a3a:	4602      	mov	r2, r0
 8020a3c:	6030      	str	r0, [r6, #0]
 8020a3e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8020a42:	d213      	bcs.n	8020a6c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x74>
 8020a44:	4643      	mov	r3, r8
 8020a46:	4639      	mov	r1, r7
 8020a48:	4620      	mov	r0, r4
 8020a4a:	f7ff fe33 	bl	80206b4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 8020a4e:	6030      	str	r0, [r6, #0]
 8020a50:	6833      	ldr	r3, [r6, #0]
 8020a52:	b143      	cbz	r3, 8020a66 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x6e>
 8020a54:	7b5a      	ldrb	r2, [r3, #13]
 8020a56:	7a9b      	ldrb	r3, [r3, #10]
 8020a58:	0052      	lsls	r2, r2, #1
 8020a5a:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8020a5e:	4313      	orrs	r3, r2
 8020a60:	bf0c      	ite	eq
 8020a62:	2301      	moveq	r3, #1
 8020a64:	2300      	movne	r3, #0
 8020a66:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
 8020a6a:	e7dc      	b.n	8020a26 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x2e>
 8020a6c:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 8020a70:	b29b      	uxth	r3, r3
 8020a72:	2b7f      	cmp	r3, #127	; 0x7f
 8020a74:	d804      	bhi.n	8020a80 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x88>
 8020a76:	4639      	mov	r1, r7
 8020a78:	4620      	mov	r0, r4
 8020a7a:	f7ff fd01 	bl	8020480 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 8020a7e:	e7e6      	b.n	8020a4e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x56>
 8020a80:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 8020a84:	2b00      	cmp	r3, #0
 8020a86:	d0e3      	beq.n	8020a50 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x58>
 8020a88:	f640 1302 	movw	r3, #2306	; 0x902
 8020a8c:	429d      	cmp	r5, r3
 8020a8e:	d1df      	bne.n	8020a50 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x58>
 8020a90:	4601      	mov	r1, r0
 8020a92:	4620      	mov	r0, r4
 8020a94:	f7ff fcc4 	bl	8020420 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 8020a98:	e7d9      	b.n	8020a4e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x56>
 8020a9a:	bf00      	nop
 8020a9c:	08030778 	.word	0x08030778
 8020aa0:	080309ea 	.word	0x080309ea
 8020aa4:	08030781 	.word	0x08030781

08020aa8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>:
 8020aa8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8020aac:	461e      	mov	r6, r3
 8020aae:	8f03      	ldrh	r3, [r0, #56]	; 0x38
 8020ab0:	4604      	mov	r4, r0
 8020ab2:	4617      	mov	r7, r2
 8020ab4:	b92b      	cbnz	r3, 8020ac2 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x1a>
 8020ab6:	4b26      	ldr	r3, [pc, #152]	; (8020b50 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0xa8>)
 8020ab8:	21c0      	movs	r1, #192	; 0xc0
 8020aba:	4a26      	ldr	r2, [pc, #152]	; (8020b54 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0xac>)
 8020abc:	4826      	ldr	r0, [pc, #152]	; (8020b58 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0xb0>)
 8020abe:	f00a fedb 	bl	802b878 <__assert_func>
 8020ac2:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 8020ac4:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8020ac8:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 8020acc:	f7e7 fb68 	bl	80081a0 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8020ad0:	4605      	mov	r5, r0
 8020ad2:	b918      	cbnz	r0, 8020adc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x34>
 8020ad4:	6030      	str	r0, [r6, #0]
 8020ad6:	4628      	mov	r0, r5
 8020ad8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8020adc:	683b      	ldr	r3, [r7, #0]
 8020ade:	4601      	mov	r1, r0
 8020ae0:	4638      	mov	r0, r7
 8020ae2:	f8d3 9008 	ldr.w	r9, [r3, #8]
 8020ae6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8020aea:	47c8      	blx	r9
 8020aec:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 8020af0:	4602      	mov	r2, r0
 8020af2:	6030      	str	r0, [r6, #0]
 8020af4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8020af8:	d213      	bcs.n	8020b22 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x7a>
 8020afa:	4643      	mov	r3, r8
 8020afc:	4639      	mov	r1, r7
 8020afe:	4620      	mov	r0, r4
 8020b00:	f7ff fdd8 	bl	80206b4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 8020b04:	6030      	str	r0, [r6, #0]
 8020b06:	6833      	ldr	r3, [r6, #0]
 8020b08:	b143      	cbz	r3, 8020b1c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x74>
 8020b0a:	7b5a      	ldrb	r2, [r3, #13]
 8020b0c:	7a9b      	ldrb	r3, [r3, #10]
 8020b0e:	0052      	lsls	r2, r2, #1
 8020b10:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8020b14:	4313      	orrs	r3, r2
 8020b16:	bf0c      	ite	eq
 8020b18:	2301      	moveq	r3, #1
 8020b1a:	2300      	movne	r3, #0
 8020b1c:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
 8020b20:	e7d9      	b.n	8020ad6 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x2e>
 8020b22:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 8020b26:	b29b      	uxth	r3, r3
 8020b28:	2b7f      	cmp	r3, #127	; 0x7f
 8020b2a:	d804      	bhi.n	8020b36 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x8e>
 8020b2c:	4639      	mov	r1, r7
 8020b2e:	4620      	mov	r0, r4
 8020b30:	f7ff fca6 	bl	8020480 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 8020b34:	e7e6      	b.n	8020b04 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x5c>
 8020b36:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 8020b3a:	2b00      	cmp	r3, #0
 8020b3c:	d0e3      	beq.n	8020b06 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x5e>
 8020b3e:	f640 1302 	movw	r3, #2306	; 0x902
 8020b42:	429d      	cmp	r5, r3
 8020b44:	d1df      	bne.n	8020b06 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x5e>
 8020b46:	4601      	mov	r1, r0
 8020b48:	4620      	mov	r0, r4
 8020b4a:	f7ff fc69 	bl	8020420 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 8020b4e:	e7d9      	b.n	8020b04 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x5c>
 8020b50:	08030778 	.word	0x08030778
 8020b54:	080309ea 	.word	0x080309ea
 8020b58:	08030781 	.word	0x08030781

08020b5c <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 8020b5c:	b510      	push	{r4, lr}
 8020b5e:	4604      	mov	r4, r0
 8020b60:	f8b4 1040 	ldrh.w	r1, [r4, #64]	; 0x40
 8020b64:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 8020b66:	b9d9      	cbnz	r1, 8020ba0 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x44>
 8020b68:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 8020b6a:	2b0a      	cmp	r3, #10
 8020b6c:	d037      	beq.n	8020bde <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x82>
 8020b6e:	4620      	mov	r0, r4
 8020b70:	f7ff fc15 	bl	802039e <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 8020b74:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 8020b76:	2b09      	cmp	r3, #9
 8020b78:	d906      	bls.n	8020b88 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x2c>
 8020b7a:	4b19      	ldr	r3, [pc, #100]	; (8020be0 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x84>)
 8020b7c:	f44f 7182 	mov.w	r1, #260	; 0x104
 8020b80:	4a18      	ldr	r2, [pc, #96]	; (8020be4 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x88>)
 8020b82:	4819      	ldr	r0, [pc, #100]	; (8020be8 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x8c>)
 8020b84:	f00a fe78 	bl	802b878 <__assert_func>
 8020b88:	1c5a      	adds	r2, r3, #1
 8020b8a:	8722      	strh	r2, [r4, #56]	; 0x38
 8020b8c:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8020b8e:	4413      	add	r3, r2
 8020b90:	b29b      	uxth	r3, r3
 8020b92:	2b09      	cmp	r3, #9
 8020b94:	bf88      	it	hi
 8020b96:	3b0a      	subhi	r3, #10
 8020b98:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8020b9c:	8458      	strh	r0, [r3, #34]	; 0x22
 8020b9e:	e7e3      	b.n	8020b68 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0xc>
 8020ba0:	2b0a      	cmp	r3, #10
 8020ba2:	d01c      	beq.n	8020bde <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x82>
 8020ba4:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8020ba6:	3901      	subs	r1, #1
 8020ba8:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 8020bac:	8f40      	ldrh	r0, [r0, #58]	; 0x3a
 8020bae:	f8a4 1040 	strh.w	r1, [r4, #64]	; 0x40
 8020bb2:	1c51      	adds	r1, r2, #1
 8020bb4:	b289      	uxth	r1, r1
 8020bb6:	2901      	cmp	r1, #1
 8020bb8:	bf8a      	itet	hi
 8020bba:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8020bbe:	87e1      	strhls	r1, [r4, #62]	; 0x3e
 8020bc0:	87e2      	strhhi	r2, [r4, #62]	; 0x3e
 8020bc2:	2b09      	cmp	r3, #9
 8020bc4:	d8d9      	bhi.n	8020b7a <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x1e>
 8020bc6:	1c5a      	adds	r2, r3, #1
 8020bc8:	8722      	strh	r2, [r4, #56]	; 0x38
 8020bca:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8020bcc:	4413      	add	r3, r2
 8020bce:	b29b      	uxth	r3, r3
 8020bd0:	2b09      	cmp	r3, #9
 8020bd2:	bf88      	it	hi
 8020bd4:	3b0a      	subhi	r3, #10
 8020bd6:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8020bda:	8458      	strh	r0, [r3, #34]	; 0x22
 8020bdc:	e7c0      	b.n	8020b60 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
 8020bde:	bd10      	pop	{r4, pc}
 8020be0:	080307ad 	.word	0x080307ad
 8020be4:	08030b40 	.word	0x08030b40
 8020be8:	08030781 	.word	0x08030781

08020bec <_ZN8touchgfx12TextProvider11getNextCharEv>:
 8020bec:	b538      	push	{r3, r4, r5, lr}
 8020bee:	8f02      	ldrh	r2, [r0, #56]	; 0x38
 8020bf0:	4604      	mov	r4, r0
 8020bf2:	b92a      	cbnz	r2, 8020c00 <_ZN8touchgfx12TextProvider11getNextCharEv+0x14>
 8020bf4:	4b13      	ldr	r3, [pc, #76]	; (8020c44 <_ZN8touchgfx12TextProvider11getNextCharEv+0x58>)
 8020bf6:	21d5      	movs	r1, #213	; 0xd5
 8020bf8:	4a13      	ldr	r2, [pc, #76]	; (8020c48 <_ZN8touchgfx12TextProvider11getNextCharEv+0x5c>)
 8020bfa:	4814      	ldr	r0, [pc, #80]	; (8020c4c <_ZN8touchgfx12TextProvider11getNextCharEv+0x60>)
 8020bfc:	f00a fe3c 	bl	802b878 <__assert_func>
 8020c00:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 8020c02:	3a01      	subs	r2, #1
 8020c04:	eb00 0143 	add.w	r1, r0, r3, lsl #1
 8020c08:	8c4d      	ldrh	r5, [r1, #34]	; 0x22
 8020c0a:	8702      	strh	r2, [r0, #56]	; 0x38
 8020c0c:	1c5a      	adds	r2, r3, #1
 8020c0e:	b292      	uxth	r2, r2
 8020c10:	2a09      	cmp	r2, #9
 8020c12:	bf8a      	itet	hi
 8020c14:	3b09      	subhi	r3, #9
 8020c16:	86c2      	strhls	r2, [r0, #54]	; 0x36
 8020c18:	86c3      	strhhi	r3, [r0, #54]	; 0x36
 8020c1a:	f7ff ff9f 	bl	8020b5c <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 8020c1e:	8c23      	ldrh	r3, [r4, #32]
 8020c20:	2b01      	cmp	r3, #1
 8020c22:	bf9c      	itt	ls
 8020c24:	3301      	addls	r3, #1
 8020c26:	8423      	strhls	r3, [r4, #32]
 8020c28:	8be3      	ldrh	r3, [r4, #30]
 8020c2a:	b90b      	cbnz	r3, 8020c30 <_ZN8touchgfx12TextProvider11getNextCharEv+0x44>
 8020c2c:	2302      	movs	r3, #2
 8020c2e:	83e3      	strh	r3, [r4, #30]
 8020c30:	8be3      	ldrh	r3, [r4, #30]
 8020c32:	4628      	mov	r0, r5
 8020c34:	3b01      	subs	r3, #1
 8020c36:	b29b      	uxth	r3, r3
 8020c38:	83e3      	strh	r3, [r4, #30]
 8020c3a:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8020c3e:	8365      	strh	r5, [r4, #26]
 8020c40:	bd38      	pop	{r3, r4, r5, pc}
 8020c42:	bf00      	nop
 8020c44:	08030778 	.word	0x08030778
 8020c48:	08030a95 	.word	0x08030a95
 8020c4c:	08030781 	.word	0x08030781

08020c50 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 8020c50:	428a      	cmp	r2, r1
 8020c52:	b538      	push	{r3, r4, r5, lr}
 8020c54:	8f04      	ldrh	r4, [r0, #56]	; 0x38
 8020c56:	d90c      	bls.n	8020c72 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x22>
 8020c58:	b92c      	cbnz	r4, 8020c66 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x16>
 8020c5a:	4b1c      	ldr	r3, [pc, #112]	; (8020ccc <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x7c>)
 8020c5c:	21e1      	movs	r1, #225	; 0xe1
 8020c5e:	4a1c      	ldr	r2, [pc, #112]	; (8020cd0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x80>)
 8020c60:	481c      	ldr	r0, [pc, #112]	; (8020cd4 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x84>)
 8020c62:	f00a fe09 	bl	802b878 <__assert_func>
 8020c66:	3c01      	subs	r4, #1
 8020c68:	4b1b      	ldr	r3, [pc, #108]	; (8020cd8 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x88>)
 8020c6a:	4a1c      	ldr	r2, [pc, #112]	; (8020cdc <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x8c>)
 8020c6c:	21c5      	movs	r1, #197	; 0xc5
 8020c6e:	8704      	strh	r4, [r0, #56]	; 0x38
 8020c70:	e7f6      	b.n	8020c60 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x10>
 8020c72:	428c      	cmp	r4, r1
 8020c74:	d203      	bcs.n	8020c7e <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x2e>
 8020c76:	4b1a      	ldr	r3, [pc, #104]	; (8020ce0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x90>)
 8020c78:	21cb      	movs	r1, #203	; 0xcb
 8020c7a:	4a1a      	ldr	r2, [pc, #104]	; (8020ce4 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x94>)
 8020c7c:	e7f0      	b.n	8020c60 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x10>
 8020c7e:	1a64      	subs	r4, r4, r1
 8020c80:	250a      	movs	r5, #10
 8020c82:	8704      	strh	r4, [r0, #56]	; 0x38
 8020c84:	8ec4      	ldrh	r4, [r0, #54]	; 0x36
 8020c86:	4421      	add	r1, r4
 8020c88:	b289      	uxth	r1, r1
 8020c8a:	2909      	cmp	r1, #9
 8020c8c:	bf88      	it	hi
 8020c8e:	390a      	subhi	r1, #10
 8020c90:	86c1      	strh	r1, [r0, #54]	; 0x36
 8020c92:	b1ba      	cbz	r2, 8020cc4 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x74>
 8020c94:	3a01      	subs	r2, #1
 8020c96:	8f01      	ldrh	r1, [r0, #56]	; 0x38
 8020c98:	b292      	uxth	r2, r2
 8020c9a:	2909      	cmp	r1, #9
 8020c9c:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
 8020ca0:	d903      	bls.n	8020caa <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x5a>
 8020ca2:	4b11      	ldr	r3, [pc, #68]	; (8020ce8 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x98>)
 8020ca4:	21e6      	movs	r1, #230	; 0xe6
 8020ca6:	4a11      	ldr	r2, [pc, #68]	; (8020cec <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x9c>)
 8020ca8:	e7da      	b.n	8020c60 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x10>
 8020caa:	3101      	adds	r1, #1
 8020cac:	8701      	strh	r1, [r0, #56]	; 0x38
 8020cae:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
 8020cb0:	b901      	cbnz	r1, 8020cb4 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x64>
 8020cb2:	86c5      	strh	r5, [r0, #54]	; 0x36
 8020cb4:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
 8020cb6:	3901      	subs	r1, #1
 8020cb8:	b289      	uxth	r1, r1
 8020cba:	86c1      	strh	r1, [r0, #54]	; 0x36
 8020cbc:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 8020cc0:	844c      	strh	r4, [r1, #34]	; 0x22
 8020cc2:	e7e6      	b.n	8020c92 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x42>
 8020cc4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8020cc8:	f7ff bf48 	b.w	8020b5c <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 8020ccc:	08030778 	.word	0x08030778
 8020cd0:	0803086e 	.word	0x0803086e
 8020cd4:	08030781 	.word	0x08030781
 8020cd8:	080307b9 	.word	0x080307b9
 8020cdc:	08030918 	.word	0x08030918
 8020ce0:	080307c7 	.word	0x080307c7
 8020ce4:	08030bef 	.word	0x08030bef
 8020ce8:	080307d3 	.word	0x080307d3
 8020cec:	080307e6 	.word	0x080307e6

08020cf0 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 8020cf0:	3a01      	subs	r2, #1
 8020cf2:	b570      	push	{r4, r5, r6, lr}
 8020cf4:	b292      	uxth	r2, r2
 8020cf6:	f64f 76ff 	movw	r6, #65535	; 0xffff
 8020cfa:	42b2      	cmp	r2, r6
 8020cfc:	d019      	beq.n	8020d32 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x42>
 8020cfe:	8c04      	ldrh	r4, [r0, #32]
 8020d00:	f831 5b02 	ldrh.w	r5, [r1], #2
 8020d04:	4294      	cmp	r4, r2
 8020d06:	d805      	bhi.n	8020d14 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x24>
 8020d08:	4b19      	ldr	r3, [pc, #100]	; (8020d70 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x80>)
 8020d0a:	4a1a      	ldr	r2, [pc, #104]	; (8020d74 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x84>)
 8020d0c:	21c5      	movs	r1, #197	; 0xc5
 8020d0e:	481a      	ldr	r0, [pc, #104]	; (8020d78 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x88>)
 8020d10:	f00a fdb2 	bl	802b878 <__assert_func>
 8020d14:	8bc4      	ldrh	r4, [r0, #30]
 8020d16:	4414      	add	r4, r2
 8020d18:	3a01      	subs	r2, #1
 8020d1a:	b2a4      	uxth	r4, r4
 8020d1c:	b292      	uxth	r2, r2
 8020d1e:	2c01      	cmp	r4, #1
 8020d20:	bf88      	it	hi
 8020d22:	3c02      	subhi	r4, #2
 8020d24:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8020d28:	8b64      	ldrh	r4, [r4, #26]
 8020d2a:	42ac      	cmp	r4, r5
 8020d2c:	d0e5      	beq.n	8020cfa <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0xa>
 8020d2e:	2000      	movs	r0, #0
 8020d30:	bd70      	pop	{r4, r5, r6, pc}
 8020d32:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8020d36:	2400      	movs	r4, #0
 8020d38:	4413      	add	r3, r2
 8020d3a:	b2a2      	uxth	r2, r4
 8020d3c:	429a      	cmp	r2, r3
 8020d3e:	da14      	bge.n	8020d6a <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x7a>
 8020d40:	8f06      	ldrh	r6, [r0, #56]	; 0x38
 8020d42:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
 8020d46:	4296      	cmp	r6, r2
 8020d48:	d802      	bhi.n	8020d50 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x60>
 8020d4a:	4b09      	ldr	r3, [pc, #36]	; (8020d70 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x80>)
 8020d4c:	4a0b      	ldr	r2, [pc, #44]	; (8020d7c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x8c>)
 8020d4e:	e7dd      	b.n	8020d0c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x1c>
 8020d50:	8ec6      	ldrh	r6, [r0, #54]	; 0x36
 8020d52:	3401      	adds	r4, #1
 8020d54:	4432      	add	r2, r6
 8020d56:	b292      	uxth	r2, r2
 8020d58:	2a09      	cmp	r2, #9
 8020d5a:	bf88      	it	hi
 8020d5c:	3a0a      	subhi	r2, #10
 8020d5e:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8020d62:	8c52      	ldrh	r2, [r2, #34]	; 0x22
 8020d64:	42aa      	cmp	r2, r5
 8020d66:	d0e8      	beq.n	8020d3a <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4a>
 8020d68:	e7e1      	b.n	8020d2e <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x3e>
 8020d6a:	2001      	movs	r0, #1
 8020d6c:	e7e0      	b.n	8020d30 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x40>
 8020d6e:	bf00      	nop
 8020d70:	080307b9 	.word	0x080307b9
 8020d74:	08030c73 	.word	0x08030c73
 8020d78:	08030781 	.word	0x08030781
 8020d7c:	08030918 	.word	0x08030918

08020d80 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 8020d80:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020d84:	4605      	mov	r5, r0
 8020d86:	4616      	mov	r6, r2
 8020d88:	1c8c      	adds	r4, r1, #2
 8020d8a:	8809      	ldrh	r1, [r1, #0]
 8020d8c:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 8020d90:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 8020d94:	42b3      	cmp	r3, r6
 8020d96:	d124      	bne.n	8020de2 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 8020d98:	f3c1 2903 	ubfx	r9, r1, #8, #4
 8020d9c:	f3c1 1803 	ubfx	r8, r1, #4, #4
 8020da0:	f001 070f 	and.w	r7, r1, #15
 8020da4:	4652      	mov	r2, sl
 8020da6:	f8cd 8000 	str.w	r8, [sp]
 8020daa:	464b      	mov	r3, r9
 8020dac:	4621      	mov	r1, r4
 8020dae:	4628      	mov	r0, r5
 8020db0:	f7ff ff9e 	bl	8020cf0 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 8020db4:	4683      	mov	fp, r0
 8020db6:	b168      	cbz	r0, 8020dd4 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 8020db8:	eb0a 0109 	add.w	r1, sl, r9
 8020dbc:	463a      	mov	r2, r7
 8020dbe:	4628      	mov	r0, r5
 8020dc0:	4441      	add	r1, r8
 8020dc2:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 8020dc6:	4649      	mov	r1, r9
 8020dc8:	f7ff ff42 	bl	8020c50 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 8020dcc:	4658      	mov	r0, fp
 8020dce:	b003      	add	sp, #12
 8020dd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020dd4:	eb07 010a 	add.w	r1, r7, sl
 8020dd8:	4449      	add	r1, r9
 8020dda:	4441      	add	r1, r8
 8020ddc:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 8020de0:	e7d2      	b.n	8020d88 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 8020de2:	f04f 0b00 	mov.w	fp, #0
 8020de6:	e7f1      	b.n	8020dcc <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

08020de8 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 8020de8:	b570      	push	{r4, r5, r6, lr}
 8020dea:	8810      	ldrh	r0, [r2, #0]
 8020dec:	4298      	cmp	r0, r3
 8020dee:	d817      	bhi.n	8020e20 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8020df0:	1e48      	subs	r0, r1, #1
 8020df2:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 8020df6:	4298      	cmp	r0, r3
 8020df8:	d312      	bcc.n	8020e20 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8020dfa:	2400      	movs	r4, #0
 8020dfc:	428c      	cmp	r4, r1
 8020dfe:	d20f      	bcs.n	8020e20 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8020e00:	1860      	adds	r0, r4, r1
 8020e02:	1040      	asrs	r0, r0, #1
 8020e04:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 8020e08:	0085      	lsls	r5, r0, #2
 8020e0a:	42b3      	cmp	r3, r6
 8020e0c:	d902      	bls.n	8020e14 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 8020e0e:	3001      	adds	r0, #1
 8020e10:	b284      	uxth	r4, r0
 8020e12:	e7f3      	b.n	8020dfc <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 8020e14:	d201      	bcs.n	8020e1a <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
 8020e16:	b281      	uxth	r1, r0
 8020e18:	e7f0      	b.n	8020dfc <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 8020e1a:	442a      	add	r2, r5
 8020e1c:	8850      	ldrh	r0, [r2, #2]
 8020e1e:	bd70      	pop	{r4, r5, r6, pc}
 8020e20:	2000      	movs	r0, #0
 8020e22:	e7fc      	b.n	8020e1e <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

08020e24 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 8020e24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020e28:	6c45      	ldr	r5, [r0, #68]	; 0x44
 8020e2a:	4604      	mov	r4, r0
 8020e2c:	260b      	movs	r6, #11
 8020e2e:	886f      	ldrh	r7, [r5, #2]
 8020e30:	087f      	lsrs	r7, r7, #1
 8020e32:	3e01      	subs	r6, #1
 8020e34:	d01b      	beq.n	8020e6e <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x4a>
 8020e36:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 8020e38:	b92b      	cbnz	r3, 8020e46 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x22>
 8020e3a:	4b0e      	ldr	r3, [pc, #56]	; (8020e74 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x50>)
 8020e3c:	21c0      	movs	r1, #192	; 0xc0
 8020e3e:	4a0e      	ldr	r2, [pc, #56]	; (8020e78 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x54>)
 8020e40:	480e      	ldr	r0, [pc, #56]	; (8020e7c <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x58>)
 8020e42:	f00a fd19 	bl	802b878 <__assert_func>
 8020e46:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8020e48:	462a      	mov	r2, r5
 8020e4a:	4639      	mov	r1, r7
 8020e4c:	4620      	mov	r0, r4
 8020e4e:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8020e52:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 8020e56:	4643      	mov	r3, r8
 8020e58:	f7ff ffc6 	bl	8020de8 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 8020e5c:	b138      	cbz	r0, 8020e6e <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x4a>
 8020e5e:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 8020e62:	4642      	mov	r2, r8
 8020e64:	4620      	mov	r0, r4
 8020e66:	f7ff ff8b 	bl	8020d80 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 8020e6a:	2800      	cmp	r0, #0
 8020e6c:	d1e1      	bne.n	8020e32 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
 8020e6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8020e72:	bf00      	nop
 8020e74:	08030778 	.word	0x08030778
 8020e78:	080309ea 	.word	0x080309ea
 8020e7c:	08030781 	.word	0x08030781

08020e80 <_ZN8touchgfxmlERKNS_9Matrix4x4ERKNS_6Point4E>:
 8020e80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8020e82:	2300      	movs	r3, #0
 8020e84:	b08d      	sub	sp, #52	; 0x34
 8020e86:	f100 0640 	add.w	r6, r0, #64	; 0x40
 8020e8a:	f101 0710 	add.w	r7, r1, #16
 8020e8e:	9304      	str	r3, [sp, #16]
 8020e90:	aa04      	add	r2, sp, #16
 8020e92:	9305      	str	r3, [sp, #20]
 8020e94:	9306      	str	r3, [sp, #24]
 8020e96:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8020e9a:	9307      	str	r3, [sp, #28]
 8020e9c:	4613      	mov	r3, r2
 8020e9e:	460c      	mov	r4, r1
 8020ea0:	4605      	mov	r5, r0
 8020ea2:	eddf 7a0e 	vldr	s15, [pc, #56]	; 8020edc <_ZN8touchgfxmlERKNS_9Matrix4x4ERKNS_6Point4E+0x5c>
 8020ea6:	ecb4 7a01 	vldmia	r4!, {s14}
 8020eaa:	ecf5 6a01 	vldmia	r5!, {s13}
 8020eae:	42bc      	cmp	r4, r7
 8020eb0:	eee6 7a87 	vfma.f32	s15, s13, s14
 8020eb4:	d1f7      	bne.n	8020ea6 <_ZN8touchgfxmlERKNS_9Matrix4x4ERKNS_6Point4E+0x26>
 8020eb6:	3010      	adds	r0, #16
 8020eb8:	ece2 7a01 	vstmia	r2!, {s15}
 8020ebc:	42b0      	cmp	r0, r6
 8020ebe:	d1ee      	bne.n	8020e9e <_ZN8touchgfxmlERKNS_9Matrix4x4ERKNS_6Point4E+0x1e>
 8020ec0:	ac0c      	add	r4, sp, #48	; 0x30
 8020ec2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8020ec4:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 8020ec8:	ed9d 0a08 	vldr	s0, [sp, #32]
 8020ecc:	eddd 0a09 	vldr	s1, [sp, #36]	; 0x24
 8020ed0:	ed9d 1a0a 	vldr	s2, [sp, #40]	; 0x28
 8020ed4:	eddd 1a0b 	vldr	s3, [sp, #44]	; 0x2c
 8020ed8:	b00d      	add	sp, #52	; 0x34
 8020eda:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8020edc:	00000000 	.word	0x00000000

08020ee0 <_ZN8touchgfx9Matrix4x4C1Ev>:
 8020ee0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8020ee4:	2300      	movs	r3, #0
 8020ee6:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8020f0c <_ZN8touchgfx9Matrix4x4C1Ev+0x2c>
 8020eea:	eb00 1103 	add.w	r1, r0, r3, lsl #4
 8020eee:	2200      	movs	r2, #0
 8020ef0:	4293      	cmp	r3, r2
 8020ef2:	f102 0201 	add.w	r2, r2, #1
 8020ef6:	fe47 6a87 	vseleq.f32	s13, s15, s14
 8020efa:	2a04      	cmp	r2, #4
 8020efc:	ece1 6a01 	vstmia	r1!, {s13}
 8020f00:	d1f6      	bne.n	8020ef0 <_ZN8touchgfx9Matrix4x4C1Ev+0x10>
 8020f02:	3301      	adds	r3, #1
 8020f04:	2b04      	cmp	r3, #4
 8020f06:	d1f0      	bne.n	8020eea <_ZN8touchgfx9Matrix4x4C1Ev+0xa>
 8020f08:	4770      	bx	lr
 8020f0a:	bf00      	nop
 8020f0c:	00000000 	.word	0x00000000

08020f10 <_ZN8touchgfxmlERKNS_9Matrix4x4ES2_>:
 8020f10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020f14:	460c      	mov	r4, r1
 8020f16:	4605      	mov	r5, r0
 8020f18:	4690      	mov	r8, r2
 8020f1a:	f7ff ffe1 	bl	8020ee0 <_ZN8touchgfx9Matrix4x4C1Ev>
 8020f1e:	4628      	mov	r0, r5
 8020f20:	4621      	mov	r1, r4
 8020f22:	f104 0c40 	add.w	ip, r4, #64	; 0x40
 8020f26:	2300      	movs	r3, #0
 8020f28:	eb08 0603 	add.w	r6, r8, r3
 8020f2c:	460f      	mov	r7, r1
 8020f2e:	2400      	movs	r4, #0
 8020f30:	eddf 7a0c 	vldr	s15, [pc, #48]	; 8020f64 <_ZN8touchgfxmlERKNS_9Matrix4x4ES2_+0x54>
 8020f34:	4632      	mov	r2, r6
 8020f36:	3401      	adds	r4, #1
 8020f38:	ecf7 6a01 	vldmia	r7!, {s13}
 8020f3c:	3610      	adds	r6, #16
 8020f3e:	ed92 7a00 	vldr	s14, [r2]
 8020f42:	2c04      	cmp	r4, #4
 8020f44:	eee6 7a87 	vfma.f32	s15, s13, s14
 8020f48:	d1f4      	bne.n	8020f34 <_ZN8touchgfxmlERKNS_9Matrix4x4ES2_+0x24>
 8020f4a:	18c2      	adds	r2, r0, r3
 8020f4c:	3304      	adds	r3, #4
 8020f4e:	2b10      	cmp	r3, #16
 8020f50:	edc2 7a00 	vstr	s15, [r2]
 8020f54:	d1e8      	bne.n	8020f28 <_ZN8touchgfxmlERKNS_9Matrix4x4ES2_+0x18>
 8020f56:	3110      	adds	r1, #16
 8020f58:	3010      	adds	r0, #16
 8020f5a:	4561      	cmp	r1, ip
 8020f5c:	d1e3      	bne.n	8020f26 <_ZN8touchgfxmlERKNS_9Matrix4x4ES2_+0x16>
 8020f5e:	4628      	mov	r0, r5
 8020f60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8020f64:	00000000 	.word	0x00000000

08020f68 <_ZN8touchgfx9Matrix4x415setViewDistanceEf>:
 8020f68:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8020f6c:	f100 0320 	add.w	r3, r0, #32
 8020f70:	3030      	adds	r0, #48	; 0x30
 8020f72:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8020f76:	ecf3 7a01 	vldmia	r3!, {s15}
 8020f7a:	4283      	cmp	r3, r0
 8020f7c:	ee60 7a27 	vmul.f32	s15, s0, s15
 8020f80:	edc3 7a03 	vstr	s15, [r3, #12]
 8020f84:	d1f7      	bne.n	8020f76 <_ZN8touchgfx9Matrix4x415setViewDistanceEf+0xe>
 8020f86:	4770      	bx	lr

08020f88 <_ZN8touchgfx9Matrix4x420concatenateXRotationEf>:
 8020f88:	b510      	push	{r4, lr}
 8020f8a:	ed2d 8b02 	vpush	{d8}
 8020f8e:	eef0 8a40 	vmov.f32	s17, s0
 8020f92:	4604      	mov	r4, r0
 8020f94:	f00a fbc8 	bl	802b728 <sinf>
 8020f98:	eeb0 8a40 	vmov.f32	s16, s0
 8020f9c:	eeb0 0a68 	vmov.f32	s0, s17
 8020fa0:	f00a faea 	bl	802b578 <cosf>
 8020fa4:	eeb1 6a48 	vneg.f32	s12, s16
 8020fa8:	f104 0310 	add.w	r3, r4, #16
 8020fac:	f104 0220 	add.w	r2, r4, #32
 8020fb0:	edd3 7a04 	vldr	s15, [r3, #16]
 8020fb4:	edd3 6a00 	vldr	s13, [r3]
 8020fb8:	ee26 7a27 	vmul.f32	s14, s12, s15
 8020fbc:	ee67 7a80 	vmul.f32	s15, s15, s0
 8020fc0:	eea6 7a80 	vfma.f32	s14, s13, s0
 8020fc4:	eee6 7a88 	vfma.f32	s15, s13, s16
 8020fc8:	eca3 7a01 	vstmia	r3!, {s14}
 8020fcc:	429a      	cmp	r2, r3
 8020fce:	edc3 7a03 	vstr	s15, [r3, #12]
 8020fd2:	d1ed      	bne.n	8020fb0 <_ZN8touchgfx9Matrix4x420concatenateXRotationEf+0x28>
 8020fd4:	4620      	mov	r0, r4
 8020fd6:	ecbd 8b02 	vpop	{d8}
 8020fda:	bd10      	pop	{r4, pc}

08020fdc <_ZN8touchgfx9Matrix4x420concatenateYRotationEf>:
 8020fdc:	b510      	push	{r4, lr}
 8020fde:	ed2d 8b02 	vpush	{d8}
 8020fe2:	eef0 8a40 	vmov.f32	s17, s0
 8020fe6:	4604      	mov	r4, r0
 8020fe8:	f00a fb9e 	bl	802b728 <sinf>
 8020fec:	eeb0 8a40 	vmov.f32	s16, s0
 8020ff0:	eeb0 0a68 	vmov.f32	s0, s17
 8020ff4:	f00a fac0 	bl	802b578 <cosf>
 8020ff8:	eeb1 6a48 	vneg.f32	s12, s16
 8020ffc:	4623      	mov	r3, r4
 8020ffe:	f104 0210 	add.w	r2, r4, #16
 8021002:	edd3 7a08 	vldr	s15, [r3, #32]
 8021006:	edd3 6a00 	vldr	s13, [r3]
 802100a:	ee27 7a88 	vmul.f32	s14, s15, s16
 802100e:	ee67 7a80 	vmul.f32	s15, s15, s0
 8021012:	eea6 7a80 	vfma.f32	s14, s13, s0
 8021016:	eee6 7a26 	vfma.f32	s15, s12, s13
 802101a:	eca3 7a01 	vstmia	r3!, {s14}
 802101e:	429a      	cmp	r2, r3
 8021020:	edc3 7a07 	vstr	s15, [r3, #28]
 8021024:	d1ed      	bne.n	8021002 <_ZN8touchgfx9Matrix4x420concatenateYRotationEf+0x26>
 8021026:	4620      	mov	r0, r4
 8021028:	ecbd 8b02 	vpop	{d8}
 802102c:	bd10      	pop	{r4, pc}

0802102e <_ZN8touchgfx9Matrix4x420concatenateZRotationEf>:
 802102e:	b510      	push	{r4, lr}
 8021030:	ed2d 8b02 	vpush	{d8}
 8021034:	eef0 8a40 	vmov.f32	s17, s0
 8021038:	4604      	mov	r4, r0
 802103a:	f00a fb75 	bl	802b728 <sinf>
 802103e:	eeb0 8a40 	vmov.f32	s16, s0
 8021042:	eeb0 0a68 	vmov.f32	s0, s17
 8021046:	f00a fa97 	bl	802b578 <cosf>
 802104a:	eeb1 6a48 	vneg.f32	s12, s16
 802104e:	4623      	mov	r3, r4
 8021050:	f104 0210 	add.w	r2, r4, #16
 8021054:	edd3 7a04 	vldr	s15, [r3, #16]
 8021058:	edd3 6a00 	vldr	s13, [r3]
 802105c:	ee26 7a27 	vmul.f32	s14, s12, s15
 8021060:	ee67 7a80 	vmul.f32	s15, s15, s0
 8021064:	eea6 7a80 	vfma.f32	s14, s13, s0
 8021068:	eee6 7a88 	vfma.f32	s15, s13, s16
 802106c:	eca3 7a01 	vstmia	r3!, {s14}
 8021070:	429a      	cmp	r2, r3
 8021072:	edc3 7a03 	vstr	s15, [r3, #12]
 8021076:	d1ed      	bne.n	8021054 <_ZN8touchgfx9Matrix4x420concatenateZRotationEf+0x26>
 8021078:	4620      	mov	r0, r4
 802107a:	ecbd 8b02 	vpop	{d8}
 802107e:	bd10      	pop	{r4, pc}

08021080 <_ZN8touchgfx9Matrix4x423concatenateXTranslationEf>:
 8021080:	4603      	mov	r3, r0
 8021082:	f100 0210 	add.w	r2, r0, #16
 8021086:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 802108a:	edd3 7a00 	vldr	s15, [r3]
 802108e:	eee7 7a00 	vfma.f32	s15, s14, s0
 8021092:	ece3 7a01 	vstmia	r3!, {s15}
 8021096:	4293      	cmp	r3, r2
 8021098:	d1f5      	bne.n	8021086 <_ZN8touchgfx9Matrix4x423concatenateXTranslationEf+0x6>
 802109a:	4770      	bx	lr

0802109c <_ZN8touchgfx9Matrix4x423concatenateYTranslationEf>:
 802109c:	f100 0310 	add.w	r3, r0, #16
 80210a0:	f100 0220 	add.w	r2, r0, #32
 80210a4:	ed93 7a08 	vldr	s14, [r3, #32]
 80210a8:	edd3 7a00 	vldr	s15, [r3]
 80210ac:	eee7 7a00 	vfma.f32	s15, s14, s0
 80210b0:	ece3 7a01 	vstmia	r3!, {s15}
 80210b4:	4293      	cmp	r3, r2
 80210b6:	d1f5      	bne.n	80210a4 <_ZN8touchgfx9Matrix4x423concatenateYTranslationEf+0x8>
 80210b8:	4770      	bx	lr

080210ba <_ZN8touchgfx9Matrix4x423concatenateZTranslationEf>:
 80210ba:	f100 0320 	add.w	r3, r0, #32
 80210be:	f100 0230 	add.w	r2, r0, #48	; 0x30
 80210c2:	ed93 7a04 	vldr	s14, [r3, #16]
 80210c6:	edd3 7a00 	vldr	s15, [r3]
 80210ca:	eee7 7a00 	vfma.f32	s15, s14, s0
 80210ce:	ece3 7a01 	vstmia	r3!, {s15}
 80210d2:	4293      	cmp	r3, r2
 80210d4:	d1f5      	bne.n	80210c2 <_ZN8touchgfx9Matrix4x423concatenateZTranslationEf+0x8>
 80210d6:	4770      	bx	lr

080210d8 <_ZN8touchgfx9Matrix4x417concatenateXScaleEf>:
 80210d8:	4603      	mov	r3, r0
 80210da:	f100 0210 	add.w	r2, r0, #16
 80210de:	edd3 7a00 	vldr	s15, [r3]
 80210e2:	ee67 7a80 	vmul.f32	s15, s15, s0
 80210e6:	ece3 7a01 	vstmia	r3!, {s15}
 80210ea:	4293      	cmp	r3, r2
 80210ec:	d1f7      	bne.n	80210de <_ZN8touchgfx9Matrix4x417concatenateXScaleEf+0x6>
 80210ee:	4770      	bx	lr

080210f0 <_ZN8touchgfx9Matrix4x417concatenateYScaleEf>:
 80210f0:	f100 0310 	add.w	r3, r0, #16
 80210f4:	f100 0220 	add.w	r2, r0, #32
 80210f8:	edd3 7a00 	vldr	s15, [r3]
 80210fc:	ee67 7a80 	vmul.f32	s15, s15, s0
 8021100:	ece3 7a01 	vstmia	r3!, {s15}
 8021104:	4293      	cmp	r3, r2
 8021106:	d1f7      	bne.n	80210f8 <_ZN8touchgfx9Matrix4x417concatenateYScaleEf+0x8>
 8021108:	4770      	bx	lr

0802110a <_ZN8touchgfx9Matrix4x417concatenateZScaleEf>:
 802110a:	f100 0320 	add.w	r3, r0, #32
 802110e:	f100 0230 	add.w	r2, r0, #48	; 0x30
 8021112:	edd3 7a00 	vldr	s15, [r3]
 8021116:	ee67 7a80 	vmul.f32	s15, s15, s0
 802111a:	ece3 7a01 	vstmia	r3!, {s15}
 802111e:	4293      	cmp	r3, r2
 8021120:	d1f7      	bne.n	8021112 <_ZN8touchgfx9Matrix4x417concatenateZScaleEf+0x8>
 8021122:	4770      	bx	lr

08021124 <_ZN8touchgfx8ceil28_4El>:
 8021124:	f110 030f 	adds.w	r3, r0, #15
 8021128:	d401      	bmi.n	802112e <_ZN8touchgfx8ceil28_4El+0xa>
 802112a:	1118      	asrs	r0, r3, #4
 802112c:	4770      	bx	lr
 802112e:	2210      	movs	r2, #16
 8021130:	f1c0 0001 	rsb	r0, r0, #1
 8021134:	fb93 f3f2 	sdiv	r3, r3, r2
 8021138:	f010 000f 	ands.w	r0, r0, #15
 802113c:	bf18      	it	ne
 802113e:	2001      	movne	r0, #1
 8021140:	1a18      	subs	r0, r3, r0
 8021142:	4770      	bx	lr

08021144 <_ZN8touchgfx11floorDivModEllRlS0_>:
 8021144:	2900      	cmp	r1, #0
 8021146:	b538      	push	{r3, r4, r5, lr}
 8021148:	dc05      	bgt.n	8021156 <_ZN8touchgfx11floorDivModEllRlS0_+0x12>
 802114a:	4b0f      	ldr	r3, [pc, #60]	; (8021188 <_ZN8touchgfx11floorDivModEllRlS0_+0x44>)
 802114c:	21f7      	movs	r1, #247	; 0xf7
 802114e:	4a0f      	ldr	r2, [pc, #60]	; (802118c <_ZN8touchgfx11floorDivModEllRlS0_+0x48>)
 8021150:	480f      	ldr	r0, [pc, #60]	; (8021190 <_ZN8touchgfx11floorDivModEllRlS0_+0x4c>)
 8021152:	f00a fb91 	bl	802b878 <__assert_func>
 8021156:	2800      	cmp	r0, #0
 8021158:	db06      	blt.n	8021168 <_ZN8touchgfx11floorDivModEllRlS0_+0x24>
 802115a:	fb90 f4f1 	sdiv	r4, r0, r1
 802115e:	fb01 0114 	mls	r1, r1, r4, r0
 8021162:	6014      	str	r4, [r2, #0]
 8021164:	6019      	str	r1, [r3, #0]
 8021166:	bd38      	pop	{r3, r4, r5, pc}
 8021168:	4240      	negs	r0, r0
 802116a:	fb90 f4f1 	sdiv	r4, r0, r1
 802116e:	4265      	negs	r5, r4
 8021170:	fb01 0014 	mls	r0, r1, r4, r0
 8021174:	6015      	str	r5, [r2, #0]
 8021176:	6018      	str	r0, [r3, #0]
 8021178:	2800      	cmp	r0, #0
 802117a:	d0f4      	beq.n	8021166 <_ZN8touchgfx11floorDivModEllRlS0_+0x22>
 802117c:	6810      	ldr	r0, [r2, #0]
 802117e:	3801      	subs	r0, #1
 8021180:	6010      	str	r0, [r2, #0]
 8021182:	6818      	ldr	r0, [r3, #0]
 8021184:	1a09      	subs	r1, r1, r0
 8021186:	e7ed      	b.n	8021164 <_ZN8touchgfx11floorDivModEllRlS0_+0x20>
 8021188:	08030d44 	.word	0x08030d44
 802118c:	08030d83 	.word	0x08030d83
 8021190:	08030d54 	.word	0x08030d54

08021194 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>:
 8021194:	b570      	push	{r4, r5, r6, lr}
 8021196:	694a      	ldr	r2, [r1, #20]
 8021198:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 802119a:	684b      	ldr	r3, [r1, #4]
 802119c:	1b54      	subs	r4, r2, r5
 802119e:	6ace      	ldr	r6, [r1, #44]	; 0x2c
 80211a0:	f000 8106 	beq.w	80213b0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21c>
 80211a4:	1b9b      	subs	r3, r3, r6
 80211a6:	d003      	beq.n	80211b0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 80211a8:	4363      	muls	r3, r4
 80211aa:	2210      	movs	r2, #16
 80211ac:	fb93 f3f2 	sdiv	r3, r3, r2
 80211b0:	680c      	ldr	r4, [r1, #0]
 80211b2:	698a      	ldr	r2, [r1, #24]
 80211b4:	1b65      	subs	r5, r4, r5
 80211b6:	f000 80fd 	beq.w	80213b4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x220>
 80211ba:	1b92      	subs	r2, r2, r6
 80211bc:	d003      	beq.n	80211c6 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 80211be:	436a      	muls	r2, r5
 80211c0:	2410      	movs	r4, #16
 80211c2:	fb92 f2f4 	sdiv	r2, r2, r4
 80211c6:	1a9b      	subs	r3, r3, r2
 80211c8:	ed9f 4a89 	vldr	s8, [pc, #548]	; 80213f0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x25c>
 80211cc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80211d0:	460a      	mov	r2, r1
 80211d2:	ee07 3a90 	vmov	s15, r3
 80211d6:	f100 040c 	add.w	r4, r0, #12
 80211da:	4603      	mov	r3, r0
 80211dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80211e0:	ee67 7a84 	vmul.f32	s15, s15, s8
 80211e4:	ee87 3a27 	vdiv.f32	s6, s14, s15
 80211e8:	eeb1 6a43 	vneg.f32	s12, s6
 80211ec:	edd2 7a02 	vldr	s15, [r2, #8]
 80211f0:	3214      	adds	r2, #20
 80211f2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80211f6:	ece3 6a01 	vstmia	r3!, {s13}
 80211fa:	429c      	cmp	r4, r3
 80211fc:	ed52 7a02 	vldr	s15, [r2, #-8]
 8021200:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8021204:	edc3 7a02 	vstr	s15, [r3, #8]
 8021208:	ed52 7a01 	vldr	s15, [r2, #-4]
 802120c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8021210:	edc3 7a05 	vstr	s15, [r3, #20]
 8021214:	d1ea      	bne.n	80211ec <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x58>
 8021216:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8021218:	698b      	ldr	r3, [r1, #24]
 802121a:	edd0 4a02 	vldr	s9, [r0, #8]
 802121e:	1a9b      	subs	r3, r3, r2
 8021220:	edd0 3a00 	vldr	s7, [r0]
 8021224:	edd0 6a01 	vldr	s13, [r0, #4]
 8021228:	ee07 3a90 	vmov	s15, r3
 802122c:	684b      	ldr	r3, [r1, #4]
 802122e:	ee76 6ae4 	vsub.f32	s13, s13, s9
 8021232:	ed90 5a05 	vldr	s10, [r0, #20]
 8021236:	1a9b      	subs	r3, r3, r2
 8021238:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 802123c:	ee73 4ae4 	vsub.f32	s9, s7, s9
 8021240:	ed90 2a03 	vldr	s4, [r0, #12]
 8021244:	ee07 3a10 	vmov	s14, r3
 8021248:	edd0 5a04 	vldr	s11, [r0, #16]
 802124c:	ee67 7a84 	vmul.f32	s15, s15, s8
 8021250:	ed90 1a07 	vldr	s2, [r0, #28]
 8021254:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8021258:	edd0 2a06 	vldr	s5, [r0, #24]
 802125c:	ee75 5ac5 	vsub.f32	s11, s11, s10
 8021260:	ee64 7ae7 	vnmul.f32	s15, s9, s15
 8021264:	ee27 7a04 	vmul.f32	s14, s14, s8
 8021268:	ee32 5a45 	vsub.f32	s10, s4, s10
 802126c:	eee6 7a87 	vfma.f32	s15, s13, s14
 8021270:	ee67 7a83 	vmul.f32	s15, s15, s6
 8021274:	edc0 7a09 	vstr	s15, [r0, #36]	; 0x24
 8021278:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 802127a:	694a      	ldr	r2, [r1, #20]
 802127c:	1b13      	subs	r3, r2, r4
 802127e:	ee07 3a10 	vmov	s14, r3
 8021282:	680b      	ldr	r3, [r1, #0]
 8021284:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8021288:	1b1b      	subs	r3, r3, r4
 802128a:	ee27 7a04 	vmul.f32	s14, s14, s8
 802128e:	ee64 4ac7 	vnmul.f32	s9, s9, s14
 8021292:	ee07 3a10 	vmov	s14, r3
 8021296:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 802129a:	ee27 7a04 	vmul.f32	s14, s14, s8
 802129e:	eee6 4a87 	vfma.f32	s9, s13, s14
 80212a2:	ee64 4a86 	vmul.f32	s9, s9, s12
 80212a6:	edc0 4a0a 	vstr	s9, [r0, #40]	; 0x28
 80212aa:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 80212ac:	698b      	ldr	r3, [r1, #24]
 80212ae:	1a9b      	subs	r3, r3, r2
 80212b0:	ee06 3a90 	vmov	s13, r3
 80212b4:	684b      	ldr	r3, [r1, #4]
 80212b6:	1a9b      	subs	r3, r3, r2
 80212b8:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80212bc:	ee07 3a10 	vmov	s14, r3
 80212c0:	ee66 6a84 	vmul.f32	s13, s13, s8
 80212c4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80212c8:	ee65 6a66 	vnmul.f32	s13, s10, s13
 80212cc:	ee27 7a04 	vmul.f32	s14, s14, s8
 80212d0:	eee5 6a87 	vfma.f32	s13, s11, s14
 80212d4:	ee66 6a83 	vmul.f32	s13, s13, s6
 80212d8:	edc0 6a0b 	vstr	s13, [r0, #44]	; 0x2c
 80212dc:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 80212de:	694a      	ldr	r2, [r1, #20]
 80212e0:	1b13      	subs	r3, r2, r4
 80212e2:	ee07 3a10 	vmov	s14, r3
 80212e6:	680b      	ldr	r3, [r1, #0]
 80212e8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80212ec:	1b1b      	subs	r3, r3, r4
 80212ee:	ee27 7a04 	vmul.f32	s14, s14, s8
 80212f2:	ee25 5a47 	vnmul.f32	s10, s10, s14
 80212f6:	ee07 3a10 	vmov	s14, r3
 80212fa:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80212fe:	ee27 7a04 	vmul.f32	s14, s14, s8
 8021302:	eea5 5a87 	vfma.f32	s10, s11, s14
 8021306:	edd0 5a08 	vldr	s11, [r0, #32]
 802130a:	ee31 1a65 	vsub.f32	s2, s2, s11
 802130e:	ee72 5ae5 	vsub.f32	s11, s5, s11
 8021312:	ee25 5a06 	vmul.f32	s10, s10, s12
 8021316:	ed80 5a0c 	vstr	s10, [r0, #48]	; 0x30
 802131a:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 802131c:	698b      	ldr	r3, [r1, #24]
 802131e:	1a9b      	subs	r3, r3, r2
 8021320:	ee07 3a10 	vmov	s14, r3
 8021324:	684b      	ldr	r3, [r1, #4]
 8021326:	1a9b      	subs	r3, r3, r2
 8021328:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 802132c:	ee01 3a90 	vmov	s3, r3
 8021330:	ee27 7a04 	vmul.f32	s14, s14, s8
 8021334:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 8021338:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 802133c:	ee61 1a84 	vmul.f32	s3, s3, s8
 8021340:	eea1 7a21 	vfma.f32	s14, s2, s3
 8021344:	ee27 7a03 	vmul.f32	s14, s14, s6
 8021348:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
 802134c:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 802134e:	694a      	ldr	r2, [r1, #20]
 8021350:	1b13      	subs	r3, r2, r4
 8021352:	ee03 3a10 	vmov	s6, r3
 8021356:	680b      	ldr	r3, [r1, #0]
 8021358:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 802135c:	1b1b      	subs	r3, r3, r4
 802135e:	ee23 3a04 	vmul.f32	s6, s6, s8
 8021362:	ee65 5ac3 	vnmul.f32	s11, s11, s6
 8021366:	ee03 3a10 	vmov	s6, r3
 802136a:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 802136e:	ee23 4a04 	vmul.f32	s8, s6, s8
 8021372:	eee1 5a04 	vfma.f32	s11, s2, s8
 8021376:	ee25 6a86 	vmul.f32	s12, s11, s12
 802137a:	ee62 5a67 	vnmul.f32	s11, s4, s15
 802137e:	ed80 6a0e 	vstr	s12, [r0, #56]	; 0x38
 8021382:	eee3 5aa6 	vfma.f32	s11, s7, s13
 8021386:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 802138a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802138e:	dd13      	ble.n	80213b8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x224>
 8021390:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8021394:	ee62 7ae7 	vnmul.f32	s15, s5, s15
 8021398:	63c3      	str	r3, [r0, #60]	; 0x3c
 802139a:	eee3 7a87 	vfma.f32	s15, s7, s14
 802139e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80213a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80213a6:	dd15      	ble.n	80213d4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x240>
 80213a8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80213ac:	6403      	str	r3, [r0, #64]	; 0x40
 80213ae:	bd70      	pop	{r4, r5, r6, pc}
 80213b0:	4623      	mov	r3, r4
 80213b2:	e6fd      	b.n	80211b0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 80213b4:	462a      	mov	r2, r5
 80213b6:	e706      	b.n	80211c6 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 80213b8:	d502      	bpl.n	80213c0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x22c>
 80213ba:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80213be:	e7e9      	b.n	8021394 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x200>
 80213c0:	ee22 2a64 	vnmul.f32	s4, s4, s9
 80213c4:	eea3 2a85 	vfma.f32	s4, s7, s10
 80213c8:	eeb5 2ac0 	vcmpe.f32	s4, #0.0
 80213cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80213d0:	dade      	bge.n	8021390 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1fc>
 80213d2:	e7f2      	b.n	80213ba <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x226>
 80213d4:	d502      	bpl.n	80213dc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x248>
 80213d6:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80213da:	e7e7      	b.n	80213ac <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x218>
 80213dc:	ee62 4ae4 	vnmul.f32	s9, s5, s9
 80213e0:	eee3 4a86 	vfma.f32	s9, s7, s12
 80213e4:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 80213e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80213ec:	dadc      	bge.n	80213a8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x214>
 80213ee:	e7f2      	b.n	80213d6 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x242>
 80213f0:	3d800000 	.word	0x3d800000

080213f4 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>:
 80213f4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80213f8:	f04f 0814 	mov.w	r8, #20
 80213fc:	4604      	mov	r4, r0
 80213fe:	4617      	mov	r7, r2
 8021400:	460d      	mov	r5, r1
 8021402:	fb08 f903 	mul.w	r9, r8, r3
 8021406:	461e      	mov	r6, r3
 8021408:	eb02 0a09 	add.w	sl, r2, r9
 802140c:	f8da 0004 	ldr.w	r0, [sl, #4]
 8021410:	f7ff fe88 	bl	8021124 <_ZN8touchgfx8ceil28_4El>
 8021414:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8021416:	6160      	str	r0, [r4, #20]
 8021418:	fb08 f803 	mul.w	r8, r8, r3
 802141c:	9001      	str	r0, [sp, #4]
 802141e:	eb07 0b08 	add.w	fp, r7, r8
 8021422:	f8db 0004 	ldr.w	r0, [fp, #4]
 8021426:	f7ff fe7d 	bl	8021124 <_ZN8touchgfx8ceil28_4El>
 802142a:	9a01      	ldr	r2, [sp, #4]
 802142c:	1a80      	subs	r0, r0, r2
 802142e:	61a0      	str	r0, [r4, #24]
 8021430:	2800      	cmp	r0, #0
 8021432:	f000 8088 	beq.w	8021546 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x152>
 8021436:	f857 3009 	ldr.w	r3, [r7, r9]
 802143a:	f857 c008 	ldr.w	ip, [r7, r8]
 802143e:	f8db 0004 	ldr.w	r0, [fp, #4]
 8021442:	ebac 0c03 	sub.w	ip, ip, r3
 8021446:	f8da 1004 	ldr.w	r1, [sl, #4]
 802144a:	ea4f 1b0c 	mov.w	fp, ip, lsl #4
 802144e:	1a40      	subs	r0, r0, r1
 8021450:	fb0b f202 	mul.w	r2, fp, r2
 8021454:	ea4f 1800 	mov.w	r8, r0, lsl #4
 8021458:	fb0c 2211 	mls	r2, ip, r1, r2
 802145c:	4641      	mov	r1, r8
 802145e:	fb00 2003 	mla	r0, r0, r3, r2
 8021462:	f104 0310 	add.w	r3, r4, #16
 8021466:	4622      	mov	r2, r4
 8021468:	3801      	subs	r0, #1
 802146a:	4440      	add	r0, r8
 802146c:	f7ff fe6a 	bl	8021144 <_ZN8touchgfx11floorDivModEllRlS0_>
 8021470:	f104 0308 	add.w	r3, r4, #8
 8021474:	1d22      	adds	r2, r4, #4
 8021476:	4641      	mov	r1, r8
 8021478:	4658      	mov	r0, fp
 802147a:	f7ff fe63 	bl	8021144 <_ZN8touchgfx11floorDivModEllRlS0_>
 802147e:	f8c4 800c 	str.w	r8, [r4, #12]
 8021482:	6962      	ldr	r2, [r4, #20]
 8021484:	f8da 3004 	ldr.w	r3, [sl, #4]
 8021488:	eddf 6a31 	vldr	s13, [pc, #196]	; 8021550 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x15c>
 802148c:	ebc3 1302 	rsb	r3, r3, r2, lsl #4
 8021490:	6822      	ldr	r2, [r4, #0]
 8021492:	ed95 6a0a 	vldr	s12, [r5, #40]	; 0x28
 8021496:	ee07 3a10 	vmov	s14, r3
 802149a:	f857 3009 	ldr.w	r3, [r7, r9]
 802149e:	ebc3 1302 	rsb	r3, r3, r2, lsl #4
 80214a2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80214a6:	ee07 3a90 	vmov	s15, r3
 80214aa:	eb05 0386 	add.w	r3, r5, r6, lsl #2
 80214ae:	ee27 7a26 	vmul.f32	s14, s14, s13
 80214b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80214b6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80214ba:	edd3 6a00 	vldr	s13, [r3]
 80214be:	eee6 6a07 	vfma.f32	s13, s12, s14
 80214c2:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 80214c6:	eee6 6a27 	vfma.f32	s13, s12, s15
 80214ca:	edc4 6a07 	vstr	s13, [r4, #28]
 80214ce:	edd4 6a01 	vldr	s13, [r4, #4]
 80214d2:	edd5 5a09 	vldr	s11, [r5, #36]	; 0x24
 80214d6:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80214da:	ed95 6a0a 	vldr	s12, [r5, #40]	; 0x28
 80214de:	eea6 6aa5 	vfma.f32	s12, s13, s11
 80214e2:	ed84 6a08 	vstr	s12, [r4, #32]
 80214e6:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 80214e8:	6262      	str	r2, [r4, #36]	; 0x24
 80214ea:	edd5 5a0c 	vldr	s11, [r5, #48]	; 0x30
 80214ee:	ed93 6a03 	vldr	s12, [r3, #12]
 80214f2:	eea5 6a87 	vfma.f32	s12, s11, s14
 80214f6:	edd5 5a0b 	vldr	s11, [r5, #44]	; 0x2c
 80214fa:	eea5 6aa7 	vfma.f32	s12, s11, s15
 80214fe:	ed84 6a0a 	vstr	s12, [r4, #40]	; 0x28
 8021502:	edd5 5a0b 	vldr	s11, [r5, #44]	; 0x2c
 8021506:	ed95 6a0c 	vldr	s12, [r5, #48]	; 0x30
 802150a:	eea6 6aa5 	vfma.f32	s12, s13, s11
 802150e:	ed84 6a0b 	vstr	s12, [r4, #44]	; 0x2c
 8021512:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8021514:	6322      	str	r2, [r4, #48]	; 0x30
 8021516:	ed93 6a06 	vldr	s12, [r3, #24]
 802151a:	edd5 5a0e 	vldr	s11, [r5, #56]	; 0x38
 802151e:	eea5 6a87 	vfma.f32	s12, s11, s14
 8021522:	eeb0 7a46 	vmov.f32	s14, s12
 8021526:	ed95 6a0d 	vldr	s12, [r5, #52]	; 0x34
 802152a:	eea6 7a27 	vfma.f32	s14, s12, s15
 802152e:	ed84 7a0d 	vstr	s14, [r4, #52]	; 0x34
 8021532:	ed95 7a0d 	vldr	s14, [r5, #52]	; 0x34
 8021536:	edd5 7a0e 	vldr	s15, [r5, #56]	; 0x38
 802153a:	eee6 7a87 	vfma.f32	s15, s13, s14
 802153e:	edc4 7a0e 	vstr	s15, [r4, #56]	; 0x38
 8021542:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8021544:	63e3      	str	r3, [r4, #60]	; 0x3c
 8021546:	4620      	mov	r0, r4
 8021548:	b003      	add	sp, #12
 802154a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802154e:	bf00      	nop
 8021550:	3d800000 	.word	0x3d800000

08021554 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 8021554:	4b01      	ldr	r3, [pc, #4]	; (802155c <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 8021556:	6018      	str	r0, [r3, #0]
 8021558:	4770      	bx	lr
 802155a:	bf00      	nop
 802155c:	2400c93c 	.word	0x2400c93c

08021560 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>:
 8021560:	4b06      	ldr	r3, [pc, #24]	; (802157c <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x1c>)
 8021562:	881a      	ldrh	r2, [r3, #0]
 8021564:	4282      	cmp	r2, r0
 8021566:	d807      	bhi.n	8021578 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x18>
 8021568:	4b05      	ldr	r3, [pc, #20]	; (8021580 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x20>)
 802156a:	881b      	ldrh	r3, [r3, #0]
 802156c:	4413      	add	r3, r2
 802156e:	4298      	cmp	r0, r3
 8021570:	bfac      	ite	ge
 8021572:	2000      	movge	r0, #0
 8021574:	2001      	movlt	r0, #1
 8021576:	4770      	bx	lr
 8021578:	2000      	movs	r0, #0
 802157a:	4770      	bx	lr
 802157c:	2400c95c 	.word	0x2400c95c
 8021580:	2400c960 	.word	0x2400c960

08021584 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 8021584:	b508      	push	{r3, lr}
 8021586:	4601      	mov	r1, r0
 8021588:	f7ff ffea 	bl	8021560 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 802158c:	b118      	cbz	r0, 8021596 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x12>
 802158e:	4b02      	ldr	r3, [pc, #8]	; (8021598 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x14>)
 8021590:	681b      	ldr	r3, [r3, #0]
 8021592:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 8021596:	bd08      	pop	{r3, pc}
 8021598:	2400c940 	.word	0x2400c940

0802159c <_ZN8touchgfx6Bitmap10clearCacheEv>:
 802159c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80215a0:	4d28      	ldr	r5, [pc, #160]	; (8021644 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 80215a2:	682b      	ldr	r3, [r5, #0]
 80215a4:	2b00      	cmp	r3, #0
 80215a6:	d04a      	beq.n	802163e <_ZN8touchgfx6Bitmap10clearCacheEv+0xa2>
 80215a8:	4a27      	ldr	r2, [pc, #156]	; (8021648 <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 80215aa:	4e28      	ldr	r6, [pc, #160]	; (802164c <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 80215ac:	8810      	ldrh	r0, [r2, #0]
 80215ae:	f8b6 8000 	ldrh.w	r8, [r6]
 80215b2:	4c27      	ldr	r4, [pc, #156]	; (8021650 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 80215b4:	4440      	add	r0, r8
 80215b6:	4f27      	ldr	r7, [pc, #156]	; (8021654 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 80215b8:	1c41      	adds	r1, r0, #1
 80215ba:	ea4f 0e80 	mov.w	lr, r0, lsl #2
 80215be:	f021 0101 	bic.w	r1, r1, #1
 80215c2:	eb03 020e 	add.w	r2, r3, lr
 80215c6:	0409      	lsls	r1, r1, #16
 80215c8:	6022      	str	r2, [r4, #0]
 80215ca:	0c09      	lsrs	r1, r1, #16
 80215cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80215d0:	eb0e 010c 	add.w	r1, lr, ip
 80215d4:	185a      	adds	r2, r3, r1
 80215d6:	603a      	str	r2, [r7, #0]
 80215d8:	220e      	movs	r2, #14
 80215da:	fb02 f208 	mul.w	r2, r2, r8
 80215de:	3203      	adds	r2, #3
 80215e0:	f022 0203 	bic.w	r2, r2, #3
 80215e4:	4411      	add	r1, r2
 80215e6:	440b      	add	r3, r1
 80215e8:	491b      	ldr	r1, [pc, #108]	; (8021658 <_ZN8touchgfx6Bitmap10clearCacheEv+0xbc>)
 80215ea:	600b      	str	r3, [r1, #0]
 80215ec:	2300      	movs	r3, #0
 80215ee:	491b      	ldr	r1, [pc, #108]	; (802165c <_ZN8touchgfx6Bitmap10clearCacheEv+0xc0>)
 80215f0:	800b      	strh	r3, [r1, #0]
 80215f2:	491b      	ldr	r1, [pc, #108]	; (8021660 <_ZN8touchgfx6Bitmap10clearCacheEv+0xc4>)
 80215f4:	6809      	ldr	r1, [r1, #0]
 80215f6:	eba1 010e 	sub.w	r1, r1, lr
 80215fa:	eba1 010c 	sub.w	r1, r1, ip
 80215fe:	469c      	mov	ip, r3
 8021600:	1a8a      	subs	r2, r1, r2
 8021602:	4918      	ldr	r1, [pc, #96]	; (8021664 <_ZN8touchgfx6Bitmap10clearCacheEv+0xc8>)
 8021604:	600a      	str	r2, [r1, #0]
 8021606:	f64f 71ff 	movw	r1, #65535	; 0xffff
 802160a:	4a17      	ldr	r2, [pc, #92]	; (8021668 <_ZN8touchgfx6Bitmap10clearCacheEv+0xcc>)
 802160c:	8013      	strh	r3, [r2, #0]
 802160e:	4283      	cmp	r3, r0
 8021610:	d10d      	bne.n	802162e <_ZN8touchgfx6Bitmap10clearCacheEv+0x92>
 8021612:	8835      	ldrh	r5, [r6, #0]
 8021614:	2300      	movs	r3, #0
 8021616:	6838      	ldr	r0, [r7, #0]
 8021618:	240e      	movs	r4, #14
 802161a:	429d      	cmp	r5, r3
 802161c:	d90f      	bls.n	802163e <_ZN8touchgfx6Bitmap10clearCacheEv+0xa2>
 802161e:	fb04 0203 	mla	r2, r4, r3, r0
 8021622:	3301      	adds	r3, #1
 8021624:	7b11      	ldrb	r1, [r2, #12]
 8021626:	f36f 1145 	bfc	r1, #5, #1
 802162a:	7311      	strb	r1, [r2, #12]
 802162c:	e7f5      	b.n	802161a <_ZN8touchgfx6Bitmap10clearCacheEv+0x7e>
 802162e:	682a      	ldr	r2, [r5, #0]
 8021630:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
 8021634:	6822      	ldr	r2, [r4, #0]
 8021636:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 802163a:	3301      	adds	r3, #1
 802163c:	e7e7      	b.n	802160e <_ZN8touchgfx6Bitmap10clearCacheEv+0x72>
 802163e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8021642:	bf00      	nop
 8021644:	2400c940 	.word	0x2400c940
 8021648:	2400c95c 	.word	0x2400c95c
 802164c:	2400c960 	.word	0x2400c960
 8021650:	2400c954 	.word	0x2400c954
 8021654:	2400c944 	.word	0x2400c944
 8021658:	2400c94c 	.word	0x2400c94c
 802165c:	2400c95e 	.word	0x2400c95e
 8021660:	2400c948 	.word	0x2400c948
 8021664:	2400c958 	.word	0x2400c958
 8021668:	2400c950 	.word	0x2400c950

0802166c <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 802166c:	4b10      	ldr	r3, [pc, #64]	; (80216b0 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x44>)
 802166e:	b510      	push	{r4, lr}
 8021670:	681b      	ldr	r3, [r3, #0]
 8021672:	b9db      	cbnz	r3, 80216ac <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x40>
 8021674:	b1d1      	cbz	r1, 80216ac <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x40>
 8021676:	4b0f      	ldr	r3, [pc, #60]	; (80216b4 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x48>)
 8021678:	240e      	movs	r4, #14
 802167a:	801a      	strh	r2, [r3, #0]
 802167c:	b292      	uxth	r2, r2
 802167e:	4b0e      	ldr	r3, [pc, #56]	; (80216b8 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x4c>)
 8021680:	881b      	ldrh	r3, [r3, #0]
 8021682:	4413      	add	r3, r2
 8021684:	4362      	muls	r2, r4
 8021686:	2406      	movs	r4, #6
 8021688:	fb04 2203 	mla	r2, r4, r3, r2
 802168c:	428a      	cmp	r2, r1
 802168e:	d305      	bcc.n	802169c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x30>
 8021690:	4b0a      	ldr	r3, [pc, #40]	; (80216bc <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x50>)
 8021692:	2135      	movs	r1, #53	; 0x35
 8021694:	4a0a      	ldr	r2, [pc, #40]	; (80216c0 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x54>)
 8021696:	480b      	ldr	r0, [pc, #44]	; (80216c4 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x58>)
 8021698:	f00a f8ee 	bl	802b878 <__assert_func>
 802169c:	4b0a      	ldr	r3, [pc, #40]	; (80216c8 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x5c>)
 802169e:	6019      	str	r1, [r3, #0]
 80216a0:	4b0a      	ldr	r3, [pc, #40]	; (80216cc <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x60>)
 80216a2:	6018      	str	r0, [r3, #0]
 80216a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80216a8:	f7ff bf78 	b.w	802159c <_ZN8touchgfx6Bitmap10clearCacheEv>
 80216ac:	bd10      	pop	{r4, pc}
 80216ae:	bf00      	nop
 80216b0:	2400c94c 	.word	0x2400c94c
 80216b4:	2400c960 	.word	0x2400c960
 80216b8:	2400c95c 	.word	0x2400c95c
 80216bc:	08030e21 	.word	0x08030e21
 80216c0:	08030e7a 	.word	0x08030e7a
 80216c4:	08030dfc 	.word	0x08030dfc
 80216c8:	2400c948 	.word	0x2400c948
 80216cc:	2400c940 	.word	0x2400c940

080216d0 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 80216d0:	b470      	push	{r4, r5, r6}
 80216d2:	4c07      	ldr	r4, [pc, #28]	; (80216f0 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 80216d4:	4605      	mov	r5, r0
 80216d6:	4610      	mov	r0, r2
 80216d8:	9a03      	ldr	r2, [sp, #12]
 80216da:	6826      	ldr	r6, [r4, #0]
 80216dc:	b936      	cbnz	r6, 80216ec <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 80216de:	6025      	str	r5, [r4, #0]
 80216e0:	4c04      	ldr	r4, [pc, #16]	; (80216f4 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 80216e2:	8021      	strh	r1, [r4, #0]
 80216e4:	4619      	mov	r1, r3
 80216e6:	bc70      	pop	{r4, r5, r6}
 80216e8:	f7ff bfc0 	b.w	802166c <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 80216ec:	bc70      	pop	{r4, r5, r6}
 80216ee:	4770      	bx	lr
 80216f0:	2400c964 	.word	0x2400c964
 80216f4:	2400c95c 	.word	0x2400c95c

080216f8 <_ZNK8touchgfx6Bitmap8getWidthEv>:
 80216f8:	b508      	push	{r3, lr}
 80216fa:	4b14      	ldr	r3, [pc, #80]	; (802174c <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 80216fc:	6819      	ldr	r1, [r3, #0]
 80216fe:	b931      	cbnz	r1, 802170e <_ZNK8touchgfx6Bitmap8getWidthEv+0x16>
 8021700:	4b13      	ldr	r3, [pc, #76]	; (8021750 <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 8021702:	f240 4185 	movw	r1, #1157	; 0x485
 8021706:	4a13      	ldr	r2, [pc, #76]	; (8021754 <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 8021708:	4813      	ldr	r0, [pc, #76]	; (8021758 <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 802170a:	f00a f8b5 	bl	802b878 <__assert_func>
 802170e:	4a13      	ldr	r2, [pc, #76]	; (802175c <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 8021710:	8803      	ldrh	r3, [r0, #0]
 8021712:	8812      	ldrh	r2, [r2, #0]
 8021714:	4293      	cmp	r3, r2
 8021716:	d204      	bcs.n	8021722 <_ZNK8touchgfx6Bitmap8getWidthEv+0x2a>
 8021718:	2214      	movs	r2, #20
 802171a:	fb02 1303 	mla	r3, r2, r3, r1
 802171e:	8918      	ldrh	r0, [r3, #8]
 8021720:	bd08      	pop	{r3, pc}
 8021722:	490f      	ldr	r1, [pc, #60]	; (8021760 <_ZNK8touchgfx6Bitmap8getWidthEv+0x68>)
 8021724:	8809      	ldrh	r1, [r1, #0]
 8021726:	4411      	add	r1, r2
 8021728:	428b      	cmp	r3, r1
 802172a:	da06      	bge.n	802173a <_ZNK8touchgfx6Bitmap8getWidthEv+0x42>
 802172c:	1a9b      	subs	r3, r3, r2
 802172e:	4a0d      	ldr	r2, [pc, #52]	; (8021764 <_ZNK8touchgfx6Bitmap8getWidthEv+0x6c>)
 8021730:	210e      	movs	r1, #14
 8021732:	6812      	ldr	r2, [r2, #0]
 8021734:	fb01 2303 	mla	r3, r1, r3, r2
 8021738:	e7f1      	b.n	802171e <_ZNK8touchgfx6Bitmap8getWidthEv+0x26>
 802173a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 802173e:	4293      	cmp	r3, r2
 8021740:	bf0a      	itet	eq
 8021742:	4b09      	ldreq	r3, [pc, #36]	; (8021768 <_ZNK8touchgfx6Bitmap8getWidthEv+0x70>)
 8021744:	2000      	movne	r0, #0
 8021746:	8818      	ldrheq	r0, [r3, #0]
 8021748:	e7ea      	b.n	8021720 <_ZNK8touchgfx6Bitmap8getWidthEv+0x28>
 802174a:	bf00      	nop
 802174c:	2400c964 	.word	0x2400c964
 8021750:	0802ff0d 	.word	0x0802ff0d
 8021754:	08030f27 	.word	0x08030f27
 8021758:	08030dfc 	.word	0x08030dfc
 802175c:	2400c95c 	.word	0x2400c95c
 8021760:	2400c960 	.word	0x2400c960
 8021764:	2400c944 	.word	0x2400c944
 8021768:	2400c8b0 	.word	0x2400c8b0

0802176c <_ZNK8touchgfx6Bitmap9getHeightEv>:
 802176c:	b508      	push	{r3, lr}
 802176e:	4b14      	ldr	r3, [pc, #80]	; (80217c0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 8021770:	6819      	ldr	r1, [r3, #0]
 8021772:	b931      	cbnz	r1, 8021782 <_ZNK8touchgfx6Bitmap9getHeightEv+0x16>
 8021774:	4b13      	ldr	r3, [pc, #76]	; (80217c4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 8021776:	f240 4199 	movw	r1, #1177	; 0x499
 802177a:	4a13      	ldr	r2, [pc, #76]	; (80217c8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 802177c:	4813      	ldr	r0, [pc, #76]	; (80217cc <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 802177e:	f00a f87b 	bl	802b878 <__assert_func>
 8021782:	4a13      	ldr	r2, [pc, #76]	; (80217d0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 8021784:	8803      	ldrh	r3, [r0, #0]
 8021786:	8812      	ldrh	r2, [r2, #0]
 8021788:	4293      	cmp	r3, r2
 802178a:	d204      	bcs.n	8021796 <_ZNK8touchgfx6Bitmap9getHeightEv+0x2a>
 802178c:	2214      	movs	r2, #20
 802178e:	fb02 1303 	mla	r3, r2, r3, r1
 8021792:	8958      	ldrh	r0, [r3, #10]
 8021794:	bd08      	pop	{r3, pc}
 8021796:	490f      	ldr	r1, [pc, #60]	; (80217d4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x68>)
 8021798:	8809      	ldrh	r1, [r1, #0]
 802179a:	4411      	add	r1, r2
 802179c:	428b      	cmp	r3, r1
 802179e:	da06      	bge.n	80217ae <_ZNK8touchgfx6Bitmap9getHeightEv+0x42>
 80217a0:	1a9b      	subs	r3, r3, r2
 80217a2:	4a0d      	ldr	r2, [pc, #52]	; (80217d8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x6c>)
 80217a4:	210e      	movs	r1, #14
 80217a6:	6812      	ldr	r2, [r2, #0]
 80217a8:	fb01 2303 	mla	r3, r1, r3, r2
 80217ac:	e7f1      	b.n	8021792 <_ZNK8touchgfx6Bitmap9getHeightEv+0x26>
 80217ae:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80217b2:	4293      	cmp	r3, r2
 80217b4:	bf0a      	itet	eq
 80217b6:	4b09      	ldreq	r3, [pc, #36]	; (80217dc <_ZNK8touchgfx6Bitmap9getHeightEv+0x70>)
 80217b8:	2000      	movne	r0, #0
 80217ba:	8818      	ldrheq	r0, [r3, #0]
 80217bc:	e7ea      	b.n	8021794 <_ZNK8touchgfx6Bitmap9getHeightEv+0x28>
 80217be:	bf00      	nop
 80217c0:	2400c964 	.word	0x2400c964
 80217c4:	0802ff0d 	.word	0x0802ff0d
 80217c8:	08030f53 	.word	0x08030f53
 80217cc:	08030dfc 	.word	0x08030dfc
 80217d0:	2400c95c 	.word	0x2400c95c
 80217d4:	2400c960 	.word	0x2400c960
 80217d8:	2400c944 	.word	0x2400c944
 80217dc:	2400c8b2 	.word	0x2400c8b2

080217e0 <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
 80217e0:	4b23      	ldr	r3, [pc, #140]	; (8021870 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
 80217e2:	b510      	push	{r4, lr}
 80217e4:	681c      	ldr	r4, [r3, #0]
 80217e6:	b934      	cbnz	r4, 80217f6 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x16>
 80217e8:	4b22      	ldr	r3, [pc, #136]	; (8021874 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
 80217ea:	f240 41ad 	movw	r1, #1197	; 0x4ad
 80217ee:	4a22      	ldr	r2, [pc, #136]	; (8021878 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x98>)
 80217f0:	4822      	ldr	r0, [pc, #136]	; (802187c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x9c>)
 80217f2:	f00a f841 	bl	802b878 <__assert_func>
 80217f6:	4a22      	ldr	r2, [pc, #136]	; (8021880 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa0>)
 80217f8:	880b      	ldrh	r3, [r1, #0]
 80217fa:	8812      	ldrh	r2, [r2, #0]
 80217fc:	4293      	cmp	r3, r2
 80217fe:	d211      	bcs.n	8021824 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x44>
 8021800:	2214      	movs	r2, #20
 8021802:	fb02 4303 	mla	r3, r2, r3, r4
 8021806:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 802180a:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 802180e:	8a1a      	ldrh	r2, [r3, #16]
 8021810:	8a5b      	ldrh	r3, [r3, #18]
 8021812:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8021816:	8004      	strh	r4, [r0, #0]
 8021818:	f3c3 030c 	ubfx	r3, r3, #0, #13
 802181c:	8041      	strh	r1, [r0, #2]
 802181e:	8082      	strh	r2, [r0, #4]
 8021820:	80c3      	strh	r3, [r0, #6]
 8021822:	e00e      	b.n	8021842 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x62>
 8021824:	4917      	ldr	r1, [pc, #92]	; (8021884 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa4>)
 8021826:	8809      	ldrh	r1, [r1, #0]
 8021828:	4411      	add	r1, r2
 802182a:	428b      	cmp	r3, r1
 802182c:	da0a      	bge.n	8021844 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x64>
 802182e:	1a9b      	subs	r3, r3, r2
 8021830:	4a15      	ldr	r2, [pc, #84]	; (8021888 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa8>)
 8021832:	210e      	movs	r1, #14
 8021834:	6812      	ldr	r2, [r2, #0]
 8021836:	fb01 2303 	mla	r3, r1, r3, r2
 802183a:	681a      	ldr	r2, [r3, #0]
 802183c:	6002      	str	r2, [r0, #0]
 802183e:	685a      	ldr	r2, [r3, #4]
 8021840:	6042      	str	r2, [r0, #4]
 8021842:	bd10      	pop	{r4, pc}
 8021844:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8021848:	4293      	cmp	r3, r2
 802184a:	d10b      	bne.n	8021864 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x84>
 802184c:	4b0f      	ldr	r3, [pc, #60]	; (802188c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xac>)
 802184e:	f9b3 1000 	ldrsh.w	r1, [r3]
 8021852:	4b0f      	ldr	r3, [pc, #60]	; (8021890 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xb0>)
 8021854:	8081      	strh	r1, [r0, #4]
 8021856:	f9b3 2000 	ldrsh.w	r2, [r3]
 802185a:	2300      	movs	r3, #0
 802185c:	80c2      	strh	r2, [r0, #6]
 802185e:	8003      	strh	r3, [r0, #0]
 8021860:	8043      	strh	r3, [r0, #2]
 8021862:	e7ee      	b.n	8021842 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x62>
 8021864:	2300      	movs	r3, #0
 8021866:	8003      	strh	r3, [r0, #0]
 8021868:	8043      	strh	r3, [r0, #2]
 802186a:	8083      	strh	r3, [r0, #4]
 802186c:	e7d8      	b.n	8021820 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x40>
 802186e:	bf00      	nop
 8021870:	2400c964 	.word	0x2400c964
 8021874:	0802ff0d 	.word	0x0802ff0d
 8021878:	08030ec0 	.word	0x08030ec0
 802187c:	08030dfc 	.word	0x08030dfc
 8021880:	2400c95c 	.word	0x2400c95c
 8021884:	2400c960 	.word	0x2400c960
 8021888:	2400c944 	.word	0x2400c944
 802188c:	2400c8b0 	.word	0x2400c8b0
 8021890:	2400c8b2 	.word	0x2400c8b2

08021894 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>:
 8021894:	4b18      	ldr	r3, [pc, #96]	; (80218f8 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x64>)
 8021896:	681b      	ldr	r3, [r3, #0]
 8021898:	b34b      	cbz	r3, 80218ee <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5a>
 802189a:	4a18      	ldr	r2, [pc, #96]	; (80218fc <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x68>)
 802189c:	8800      	ldrh	r0, [r0, #0]
 802189e:	8812      	ldrh	r2, [r2, #0]
 80218a0:	4290      	cmp	r0, r2
 80218a2:	d211      	bcs.n	80218c8 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x34>
 80218a4:	2214      	movs	r2, #20
 80218a6:	fb02 3300 	mla	r3, r2, r0, r3
 80218aa:	8a1a      	ldrh	r2, [r3, #16]
 80218ac:	8919      	ldrh	r1, [r3, #8]
 80218ae:	f3c2 020c 	ubfx	r2, r2, #0, #13
 80218b2:	428a      	cmp	r2, r1
 80218b4:	db1d      	blt.n	80218f2 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5e>
 80218b6:	8a58      	ldrh	r0, [r3, #18]
 80218b8:	f3c0 000c 	ubfx	r0, r0, #0, #13
 80218bc:	895b      	ldrh	r3, [r3, #10]
 80218be:	4298      	cmp	r0, r3
 80218c0:	bfac      	ite	ge
 80218c2:	2000      	movge	r0, #0
 80218c4:	2001      	movlt	r0, #1
 80218c6:	4770      	bx	lr
 80218c8:	4b0d      	ldr	r3, [pc, #52]	; (8021900 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x6c>)
 80218ca:	881b      	ldrh	r3, [r3, #0]
 80218cc:	4413      	add	r3, r2
 80218ce:	4298      	cmp	r0, r3
 80218d0:	da0d      	bge.n	80218ee <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5a>
 80218d2:	4b0c      	ldr	r3, [pc, #48]	; (8021904 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x70>)
 80218d4:	1a80      	subs	r0, r0, r2
 80218d6:	220e      	movs	r2, #14
 80218d8:	681b      	ldr	r3, [r3, #0]
 80218da:	fb02 3300 	mla	r3, r2, r0, r3
 80218de:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 80218e2:	891a      	ldrh	r2, [r3, #8]
 80218e4:	4291      	cmp	r1, r2
 80218e6:	db04      	blt.n	80218f2 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5e>
 80218e8:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
 80218ec:	e7e6      	b.n	80218bc <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x28>
 80218ee:	2000      	movs	r0, #0
 80218f0:	4770      	bx	lr
 80218f2:	2001      	movs	r0, #1
 80218f4:	4770      	bx	lr
 80218f6:	bf00      	nop
 80218f8:	2400c964 	.word	0x2400c964
 80218fc:	2400c95c 	.word	0x2400c95c
 8021900:	2400c960 	.word	0x2400c960
 8021904:	2400c944 	.word	0x2400c944

08021908 <_ZNK8touchgfx6Bitmap7getDataEv>:
 8021908:	b508      	push	{r3, lr}
 802190a:	4b12      	ldr	r3, [pc, #72]	; (8021954 <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 802190c:	6819      	ldr	r1, [r3, #0]
 802190e:	b931      	cbnz	r1, 802191e <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 8021910:	4b11      	ldr	r3, [pc, #68]	; (8021958 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 8021912:	f240 41d1 	movw	r1, #1233	; 0x4d1
 8021916:	4a11      	ldr	r2, [pc, #68]	; (802195c <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 8021918:	4811      	ldr	r0, [pc, #68]	; (8021960 <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 802191a:	f009 ffad 	bl	802b878 <__assert_func>
 802191e:	8803      	ldrh	r3, [r0, #0]
 8021920:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8021924:	4293      	cmp	r3, r2
 8021926:	d012      	beq.n	802194e <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 8021928:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 802192c:	4293      	cmp	r3, r2
 802192e:	d103      	bne.n	8021938 <_ZNK8touchgfx6Bitmap7getDataEv+0x30>
 8021930:	4b0c      	ldr	r3, [pc, #48]	; (8021964 <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 8021932:	681b      	ldr	r3, [r3, #0]
 8021934:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8021936:	bd08      	pop	{r3, pc}
 8021938:	4a0b      	ldr	r2, [pc, #44]	; (8021968 <_ZNK8touchgfx6Bitmap7getDataEv+0x60>)
 802193a:	6812      	ldr	r2, [r2, #0]
 802193c:	b11a      	cbz	r2, 8021946 <_ZNK8touchgfx6Bitmap7getDataEv+0x3e>
 802193e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8021942:	2800      	cmp	r0, #0
 8021944:	d1f7      	bne.n	8021936 <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 8021946:	2214      	movs	r2, #20
 8021948:	4353      	muls	r3, r2
 802194a:	58c8      	ldr	r0, [r1, r3]
 802194c:	e7f3      	b.n	8021936 <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 802194e:	2000      	movs	r0, #0
 8021950:	e7f1      	b.n	8021936 <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 8021952:	bf00      	nop
 8021954:	2400c964 	.word	0x2400c964
 8021958:	0802ff0d 	.word	0x0802ff0d
 802195c:	08030ef6 	.word	0x08030ef6
 8021960:	08030dfc 	.word	0x08030dfc
 8021964:	2400c8bc 	.word	0x2400c8bc
 8021968:	2400c940 	.word	0x2400c940

0802196c <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 802196c:	8802      	ldrh	r2, [r0, #0]
 802196e:	f64f 73fd 	movw	r3, #65533	; 0xfffd
 8021972:	429a      	cmp	r2, r3
 8021974:	d845      	bhi.n	8021a02 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x96>
 8021976:	4b24      	ldr	r3, [pc, #144]	; (8021a08 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 8021978:	8818      	ldrh	r0, [r3, #0]
 802197a:	4282      	cmp	r2, r0
 802197c:	d221      	bcs.n	80219c2 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x56>
 802197e:	4b23      	ldr	r3, [pc, #140]	; (8021a0c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 8021980:	6819      	ldr	r1, [r3, #0]
 8021982:	2314      	movs	r3, #20
 8021984:	fb03 1302 	mla	r3, r3, r2, r1
 8021988:	6858      	ldr	r0, [r3, #4]
 802198a:	2800      	cmp	r0, #0
 802198c:	d03a      	beq.n	8021a04 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>
 802198e:	4920      	ldr	r1, [pc, #128]	; (8021a10 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 8021990:	6809      	ldr	r1, [r1, #0]
 8021992:	2900      	cmp	r1, #0
 8021994:	d036      	beq.n	8021a04 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>
 8021996:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 802199a:	2900      	cmp	r1, #0
 802199c:	d032      	beq.n	8021a04 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>
 802199e:	891a      	ldrh	r2, [r3, #8]
 80219a0:	8958      	ldrh	r0, [r3, #10]
 80219a2:	4350      	muls	r0, r2
 80219a4:	7c5a      	ldrb	r2, [r3, #17]
 80219a6:	7cdb      	ldrb	r3, [r3, #19]
 80219a8:	0952      	lsrs	r2, r2, #5
 80219aa:	f3c3 1342 	ubfx	r3, r3, #5, #3
 80219ae:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80219b2:	2b0b      	cmp	r3, #11
 80219b4:	bf18      	it	ne
 80219b6:	0040      	lslne	r0, r0, #1
 80219b8:	3003      	adds	r0, #3
 80219ba:	f020 0003 	bic.w	r0, r0, #3
 80219be:	4408      	add	r0, r1
 80219c0:	4770      	bx	lr
 80219c2:	4b14      	ldr	r3, [pc, #80]	; (8021a14 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa8>)
 80219c4:	881b      	ldrh	r3, [r3, #0]
 80219c6:	4403      	add	r3, r0
 80219c8:	429a      	cmp	r2, r3
 80219ca:	da1a      	bge.n	8021a02 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x96>
 80219cc:	4b12      	ldr	r3, [pc, #72]	; (8021a18 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xac>)
 80219ce:	1a10      	subs	r0, r2, r0
 80219d0:	210e      	movs	r1, #14
 80219d2:	681b      	ldr	r3, [r3, #0]
 80219d4:	fb01 3000 	mla	r0, r1, r0, r3
 80219d8:	7b03      	ldrb	r3, [r0, #12]
 80219da:	f003 031f 	and.w	r3, r3, #31
 80219de:	2b0b      	cmp	r3, #11
 80219e0:	d10b      	bne.n	80219fa <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 80219e2:	8903      	ldrh	r3, [r0, #8]
 80219e4:	8940      	ldrh	r0, [r0, #10]
 80219e6:	4358      	muls	r0, r3
 80219e8:	4b09      	ldr	r3, [pc, #36]	; (8021a10 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 80219ea:	3003      	adds	r0, #3
 80219ec:	6819      	ldr	r1, [r3, #0]
 80219ee:	f020 0303 	bic.w	r3, r0, #3
 80219f2:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 80219f6:	4418      	add	r0, r3
 80219f8:	4770      	bx	lr
 80219fa:	2b0d      	cmp	r3, #13
 80219fc:	d101      	bne.n	8021a02 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x96>
 80219fe:	300d      	adds	r0, #13
 8021a00:	4770      	bx	lr
 8021a02:	2000      	movs	r0, #0
 8021a04:	4770      	bx	lr
 8021a06:	bf00      	nop
 8021a08:	2400c95c 	.word	0x2400c95c
 8021a0c:	2400c964 	.word	0x2400c964
 8021a10:	2400c940 	.word	0x2400c940
 8021a14:	2400c960 	.word	0x2400c960
 8021a18:	2400c944 	.word	0x2400c944

08021a1c <_ZNK8touchgfx6Bitmap9getFormatEv>:
 8021a1c:	4b17      	ldr	r3, [pc, #92]	; (8021a7c <_ZNK8touchgfx6Bitmap9getFormatEv+0x60>)
 8021a1e:	b510      	push	{r4, lr}
 8021a20:	6819      	ldr	r1, [r3, #0]
 8021a22:	8803      	ldrh	r3, [r0, #0]
 8021a24:	b1e9      	cbz	r1, 8021a62 <_ZNK8touchgfx6Bitmap9getFormatEv+0x46>
 8021a26:	4a16      	ldr	r2, [pc, #88]	; (8021a80 <_ZNK8touchgfx6Bitmap9getFormatEv+0x64>)
 8021a28:	8812      	ldrh	r2, [r2, #0]
 8021a2a:	429a      	cmp	r2, r3
 8021a2c:	d90a      	bls.n	8021a44 <_ZNK8touchgfx6Bitmap9getFormatEv+0x28>
 8021a2e:	2214      	movs	r2, #20
 8021a30:	fb02 1303 	mla	r3, r2, r3, r1
 8021a34:	7c58      	ldrb	r0, [r3, #17]
 8021a36:	0942      	lsrs	r2, r0, #5
 8021a38:	7cd8      	ldrb	r0, [r3, #19]
 8021a3a:	f3c0 1042 	ubfx	r0, r0, #5, #3
 8021a3e:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
 8021a42:	bd10      	pop	{r4, pc}
 8021a44:	490f      	ldr	r1, [pc, #60]	; (8021a84 <_ZNK8touchgfx6Bitmap9getFormatEv+0x68>)
 8021a46:	8809      	ldrh	r1, [r1, #0]
 8021a48:	4411      	add	r1, r2
 8021a4a:	428b      	cmp	r3, r1
 8021a4c:	da09      	bge.n	8021a62 <_ZNK8touchgfx6Bitmap9getFormatEv+0x46>
 8021a4e:	1a9b      	subs	r3, r3, r2
 8021a50:	4a0d      	ldr	r2, [pc, #52]	; (8021a88 <_ZNK8touchgfx6Bitmap9getFormatEv+0x6c>)
 8021a52:	210e      	movs	r1, #14
 8021a54:	6812      	ldr	r2, [r2, #0]
 8021a56:	fb01 2303 	mla	r3, r1, r3, r2
 8021a5a:	7b18      	ldrb	r0, [r3, #12]
 8021a5c:	f000 001f 	and.w	r0, r0, #31
 8021a60:	e7ef      	b.n	8021a42 <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 8021a62:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8021a66:	4293      	cmp	r3, r2
 8021a68:	d106      	bne.n	8021a78 <_ZNK8touchgfx6Bitmap9getFormatEv+0x5c>
 8021a6a:	f7e2 fd03 	bl	8004474 <_ZN8touchgfx3HAL3lcdEv>
 8021a6e:	6803      	ldr	r3, [r0, #0]
 8021a70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8021a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8021a76:	4718      	bx	r3
 8021a78:	2000      	movs	r0, #0
 8021a7a:	e7e2      	b.n	8021a42 <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 8021a7c:	2400c964 	.word	0x2400c964
 8021a80:	2400c95c 	.word	0x2400c95c
 8021a84:	2400c960 	.word	0x2400c960
 8021a88:	2400c944 	.word	0x2400c944

08021a8c <_ZNK8touchgfx8LCD24bpp8bitDepthEv>:
 8021a8c:	2018      	movs	r0, #24
 8021a8e:	4770      	bx	lr

08021a90 <_ZNK8touchgfx8LCD24bpp17framebufferFormatEv>:
 8021a90:	2001      	movs	r0, #1
 8021a92:	4770      	bx	lr

08021a94 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8021a94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021a98:	b085      	sub	sp, #20
 8021a9a:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8021a9c:	9203      	str	r2, [sp, #12]
 8021a9e:	6870      	ldr	r0, [r6, #4]
 8021aa0:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 8021aa4:	f89d 505c 	ldrb.w	r5, [sp, #92]	; 0x5c
 8021aa8:	9101      	str	r1, [sp, #4]
 8021aaa:	fa1f f885 	uxth.w	r8, r5
 8021aae:	43ed      	mvns	r5, r5
 8021ab0:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 8021ab4:	b2ed      	uxtb	r5, r5
 8021ab6:	fb00 2404 	mla	r4, r0, r4, r2
 8021aba:	6832      	ldr	r2, [r6, #0]
 8021abc:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8021ac0:	4414      	add	r4, r2
 8021ac2:	f8dc 2000 	ldr.w	r2, [ip]
 8021ac6:	9202      	str	r2, [sp, #8]
 8021ac8:	f8dc 2004 	ldr.w	r2, [ip, #4]
 8021acc:	f102 0e04 	add.w	lr, r2, #4
 8021ad0:	9a01      	ldr	r2, [sp, #4]
 8021ad2:	2a00      	cmp	r2, #0
 8021ad4:	dc03      	bgt.n	8021ade <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 8021ad6:	9a03      	ldr	r2, [sp, #12]
 8021ad8:	2a00      	cmp	r2, #0
 8021ada:	f340 8116 	ble.w	8021d0a <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 8021ade:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8021ae0:	f9bc a008 	ldrsh.w	sl, [ip, #8]
 8021ae4:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8021ae8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8021aea:	f9bc 900c 	ldrsh.w	r9, [ip, #12]
 8021aee:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8021af2:	2b00      	cmp	r3, #0
 8021af4:	dd0e      	ble.n	8021b14 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 8021af6:	1406      	asrs	r6, r0, #16
 8021af8:	d405      	bmi.n	8021b06 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8021afa:	4556      	cmp	r6, sl
 8021afc:	da03      	bge.n	8021b06 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8021afe:	1416      	asrs	r6, r2, #16
 8021b00:	d401      	bmi.n	8021b06 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8021b02:	454e      	cmp	r6, r9
 8021b04:	db07      	blt.n	8021b16 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8021b06:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8021b08:	3b01      	subs	r3, #1
 8021b0a:	3403      	adds	r4, #3
 8021b0c:	4430      	add	r0, r6
 8021b0e:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8021b10:	4432      	add	r2, r6
 8021b12:	e7ee      	b.n	8021af2 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 8021b14:	d063      	beq.n	8021bde <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 8021b16:	1e5e      	subs	r6, r3, #1
 8021b18:	9f11      	ldr	r7, [sp, #68]	; 0x44
 8021b1a:	fb07 0706 	mla	r7, r7, r6, r0
 8021b1e:	143f      	asrs	r7, r7, #16
 8021b20:	d454      	bmi.n	8021bcc <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 8021b22:	4557      	cmp	r7, sl
 8021b24:	da52      	bge.n	8021bcc <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 8021b26:	9f12      	ldr	r7, [sp, #72]	; 0x48
 8021b28:	fb07 2606 	mla	r6, r7, r6, r2
 8021b2c:	1436      	asrs	r6, r6, #16
 8021b2e:	d44d      	bmi.n	8021bcc <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 8021b30:	454e      	cmp	r6, r9
 8021b32:	da4b      	bge.n	8021bcc <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 8021b34:	1ce6      	adds	r6, r4, #3
 8021b36:	4699      	mov	r9, r3
 8021b38:	f1b9 0f00 	cmp.w	r9, #0
 8021b3c:	f106 0603 	add.w	r6, r6, #3
 8021b40:	dd48      	ble.n	8021bd4 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 8021b42:	f9bc b008 	ldrsh.w	fp, [ip, #8]
 8021b46:	1417      	asrs	r7, r2, #16
 8021b48:	9902      	ldr	r1, [sp, #8]
 8021b4a:	ea4f 4a20 	mov.w	sl, r0, asr #16
 8021b4e:	f109 39ff 	add.w	r9, r9, #4294967295
 8021b52:	fb0b 1707 	mla	r7, fp, r7, r1
 8021b56:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 8021b5a:	9911      	ldr	r1, [sp, #68]	; 0x44
 8021b5c:	f817 700a 	ldrb.w	r7, [r7, sl]
 8021b60:	fb1b fb05 	smulbb	fp, fp, r5
 8021b64:	4408      	add	r0, r1
 8021b66:	9912      	ldr	r1, [sp, #72]	; 0x48
 8021b68:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8021b6c:	440a      	add	r2, r1
 8021b6e:	eb0e 0a07 	add.w	sl, lr, r7
 8021b72:	f81e 7007 	ldrb.w	r7, [lr, r7]
 8021b76:	fb07 b708 	mla	r7, r7, r8, fp
 8021b7a:	b2bf      	uxth	r7, r7
 8021b7c:	f107 0b01 	add.w	fp, r7, #1
 8021b80:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 8021b84:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 8021b88:	fb1b fb05 	smulbb	fp, fp, r5
 8021b8c:	123f      	asrs	r7, r7, #8
 8021b8e:	f806 7c06 	strb.w	r7, [r6, #-6]
 8021b92:	f89a 7001 	ldrb.w	r7, [sl, #1]
 8021b96:	fb07 b708 	mla	r7, r7, r8, fp
 8021b9a:	b2bf      	uxth	r7, r7
 8021b9c:	f107 0b01 	add.w	fp, r7, #1
 8021ba0:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 8021ba4:	123f      	asrs	r7, r7, #8
 8021ba6:	f806 7c05 	strb.w	r7, [r6, #-5]
 8021baa:	f89a 7002 	ldrb.w	r7, [sl, #2]
 8021bae:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 8021bb2:	fb1a fa05 	smulbb	sl, sl, r5
 8021bb6:	fb07 a708 	mla	r7, r7, r8, sl
 8021bba:	b2bf      	uxth	r7, r7
 8021bbc:	f107 0a01 	add.w	sl, r7, #1
 8021bc0:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 8021bc4:	123f      	asrs	r7, r7, #8
 8021bc6:	f806 7c04 	strb.w	r7, [r6, #-4]
 8021bca:	e7b5      	b.n	8021b38 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 8021bcc:	2700      	movs	r7, #0
 8021bce:	1bde      	subs	r6, r3, r7
 8021bd0:	2e00      	cmp	r6, #0
 8021bd2:	dc42      	bgt.n	8021c5a <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 8021bd4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8021bd8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8021bdc:	441c      	add	r4, r3
 8021bde:	9b01      	ldr	r3, [sp, #4]
 8021be0:	2b00      	cmp	r3, #0
 8021be2:	f340 8092 	ble.w	8021d0a <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 8021be6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8021bea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8021bec:	ee30 0a04 	vadd.f32	s0, s0, s8
 8021bf0:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8021bf4:	eef0 6a62 	vmov.f32	s13, s5
 8021bf8:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8021bfc:	ee31 1a05 	vadd.f32	s2, s2, s10
 8021c00:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8021c04:	edcd 6a0f 	vstr	s13, [sp, #60]	; 0x3c
 8021c08:	eef0 6a43 	vmov.f32	s13, s6
 8021c0c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8021c10:	edcd 6a10 	vstr	s13, [sp, #64]	; 0x40
 8021c14:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8021c18:	ee61 7a27 	vmul.f32	s15, s2, s15
 8021c1c:	ee77 2a62 	vsub.f32	s5, s14, s5
 8021c20:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8021c24:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8021c28:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8021c2c:	ee12 2a90 	vmov	r2, s5
 8021c30:	eef0 2a47 	vmov.f32	s5, s14
 8021c34:	fb92 f3f3 	sdiv	r3, r2, r3
 8021c38:	ee13 2a10 	vmov	r2, s6
 8021c3c:	9311      	str	r3, [sp, #68]	; 0x44
 8021c3e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8021c40:	eeb0 3a67 	vmov.f32	s6, s15
 8021c44:	fb92 f3f3 	sdiv	r3, r2, r3
 8021c48:	9312      	str	r3, [sp, #72]	; 0x48
 8021c4a:	9b01      	ldr	r3, [sp, #4]
 8021c4c:	9a03      	ldr	r2, [sp, #12]
 8021c4e:	3b01      	subs	r3, #1
 8021c50:	9301      	str	r3, [sp, #4]
 8021c52:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8021c54:	bf08      	it	eq
 8021c56:	4613      	moveq	r3, r2
 8021c58:	e73a      	b.n	8021ad0 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8021c5a:	ea5f 4a20 	movs.w	sl, r0, asr #16
 8021c5e:	d44e      	bmi.n	8021cfe <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 8021c60:	f8dc 6008 	ldr.w	r6, [ip, #8]
 8021c64:	4556      	cmp	r6, sl
 8021c66:	dd4a      	ble.n	8021cfe <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 8021c68:	ea5f 4b22 	movs.w	fp, r2, asr #16
 8021c6c:	d447      	bmi.n	8021cfe <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 8021c6e:	f8dc 100c 	ldr.w	r1, [ip, #12]
 8021c72:	4559      	cmp	r1, fp
 8021c74:	dd43      	ble.n	8021cfe <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 8021c76:	fa0f f986 	sxth.w	r9, r6
 8021c7a:	9902      	ldr	r1, [sp, #8]
 8021c7c:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 8021c80:	fb0b 1909 	mla	r9, fp, r9, r1
 8021c84:	f814 b006 	ldrb.w	fp, [r4, r6]
 8021c88:	f819 900a 	ldrb.w	r9, [r9, sl]
 8021c8c:	fb1b fb05 	smulbb	fp, fp, r5
 8021c90:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 8021c94:	eb0e 0a09 	add.w	sl, lr, r9
 8021c98:	f81e 9009 	ldrb.w	r9, [lr, r9]
 8021c9c:	fb09 b908 	mla	r9, r9, r8, fp
 8021ca0:	fa1f f989 	uxth.w	r9, r9
 8021ca4:	f109 0b01 	add.w	fp, r9, #1
 8021ca8:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8021cac:	ea4f 2929 	mov.w	r9, r9, asr #8
 8021cb0:	f804 9006 	strb.w	r9, [r4, r6]
 8021cb4:	4426      	add	r6, r4
 8021cb6:	f89a 9001 	ldrb.w	r9, [sl, #1]
 8021cba:	f896 b001 	ldrb.w	fp, [r6, #1]
 8021cbe:	fb1b fb05 	smulbb	fp, fp, r5
 8021cc2:	fb09 b908 	mla	r9, r9, r8, fp
 8021cc6:	fa1f f989 	uxth.w	r9, r9
 8021cca:	f109 0b01 	add.w	fp, r9, #1
 8021cce:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8021cd2:	ea4f 2929 	mov.w	r9, r9, asr #8
 8021cd6:	f886 9001 	strb.w	r9, [r6, #1]
 8021cda:	f89a 9002 	ldrb.w	r9, [sl, #2]
 8021cde:	f896 a002 	ldrb.w	sl, [r6, #2]
 8021ce2:	fb1a fa05 	smulbb	sl, sl, r5
 8021ce6:	fb09 a908 	mla	r9, r9, r8, sl
 8021cea:	fa1f f989 	uxth.w	r9, r9
 8021cee:	f109 0a01 	add.w	sl, r9, #1
 8021cf2:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 8021cf6:	ea4f 2929 	mov.w	r9, r9, asr #8
 8021cfa:	f886 9002 	strb.w	r9, [r6, #2]
 8021cfe:	9911      	ldr	r1, [sp, #68]	; 0x44
 8021d00:	3701      	adds	r7, #1
 8021d02:	4408      	add	r0, r1
 8021d04:	9912      	ldr	r1, [sp, #72]	; 0x48
 8021d06:	440a      	add	r2, r1
 8021d08:	e761      	b.n	8021bce <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 8021d0a:	b005      	add	sp, #20
 8021d0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08021d10 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8021d10:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021d14:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8021d16:	4693      	mov	fp, r2
 8021d18:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8021d1a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8021d1e:	6868      	ldr	r0, [r5, #4]
 8021d20:	6877      	ldr	r7, [r6, #4]
 8021d22:	9100      	str	r1, [sp, #0]
 8021d24:	3704      	adds	r7, #4
 8021d26:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 8021d2a:	e9dd 8e0f 	ldrd	r8, lr, [sp, #60]	; 0x3c
 8021d2e:	fb00 2404 	mla	r4, r0, r4, r2
 8021d32:	682a      	ldr	r2, [r5, #0]
 8021d34:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8021d38:	4414      	add	r4, r2
 8021d3a:	6832      	ldr	r2, [r6, #0]
 8021d3c:	9201      	str	r2, [sp, #4]
 8021d3e:	9a00      	ldr	r2, [sp, #0]
 8021d40:	2a00      	cmp	r2, #0
 8021d42:	dc03      	bgt.n	8021d4c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8021d44:	f1bb 0f00 	cmp.w	fp, #0
 8021d48:	f340 80bc 	ble.w	8021ec4 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 8021d4c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8021d4e:	f9b6 a008 	ldrsh.w	sl, [r6, #8]
 8021d52:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8021d56:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8021d58:	f9b6 900c 	ldrsh.w	r9, [r6, #12]
 8021d5c:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8021d60:	2b00      	cmp	r3, #0
 8021d62:	dd0c      	ble.n	8021d7e <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8021d64:	1405      	asrs	r5, r0, #16
 8021d66:	d405      	bmi.n	8021d74 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 8021d68:	4555      	cmp	r5, sl
 8021d6a:	da03      	bge.n	8021d74 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 8021d6c:	1415      	asrs	r5, r2, #16
 8021d6e:	d401      	bmi.n	8021d74 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 8021d70:	454d      	cmp	r5, r9
 8021d72:	db05      	blt.n	8021d80 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8021d74:	4440      	add	r0, r8
 8021d76:	4472      	add	r2, lr
 8021d78:	3b01      	subs	r3, #1
 8021d7a:	3403      	adds	r4, #3
 8021d7c:	e7f0      	b.n	8021d60 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 8021d7e:	d03f      	beq.n	8021e00 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf0>
 8021d80:	1e5d      	subs	r5, r3, #1
 8021d82:	fb08 0c05 	mla	ip, r8, r5, r0
 8021d86:	ea5f 4c2c 	movs.w	ip, ip, asr #16
 8021d8a:	d42e      	bmi.n	8021dea <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 8021d8c:	45d4      	cmp	ip, sl
 8021d8e:	da2c      	bge.n	8021dea <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 8021d90:	fb0e 2505 	mla	r5, lr, r5, r2
 8021d94:	142d      	asrs	r5, r5, #16
 8021d96:	d428      	bmi.n	8021dea <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 8021d98:	454d      	cmp	r5, r9
 8021d9a:	da26      	bge.n	8021dea <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 8021d9c:	1ce5      	adds	r5, r4, #3
 8021d9e:	469c      	mov	ip, r3
 8021da0:	f1bc 0f00 	cmp.w	ip, #0
 8021da4:	f105 0503 	add.w	r5, r5, #3
 8021da8:	dd25      	ble.n	8021df6 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xe6>
 8021daa:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 8021dae:	ea4f 4922 	mov.w	r9, r2, asr #16
 8021db2:	f10c 3cff 	add.w	ip, ip, #4294967295
 8021db6:	4472      	add	r2, lr
 8021db8:	468a      	mov	sl, r1
 8021dba:	9901      	ldr	r1, [sp, #4]
 8021dbc:	fb0a 1909 	mla	r9, sl, r9, r1
 8021dc0:	1401      	asrs	r1, r0, #16
 8021dc2:	4440      	add	r0, r8
 8021dc4:	f819 9001 	ldrb.w	r9, [r9, r1]
 8021dc8:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 8021dcc:	eb07 0a09 	add.w	sl, r7, r9
 8021dd0:	f817 9009 	ldrb.w	r9, [r7, r9]
 8021dd4:	f805 9c06 	strb.w	r9, [r5, #-6]
 8021dd8:	f89a 9001 	ldrb.w	r9, [sl, #1]
 8021ddc:	f805 9c05 	strb.w	r9, [r5, #-5]
 8021de0:	f89a 9002 	ldrb.w	r9, [sl, #2]
 8021de4:	f805 9c04 	strb.w	r9, [r5, #-4]
 8021de8:	e7da      	b.n	8021da0 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8021dea:	2500      	movs	r5, #0
 8021dec:	eba3 0c05 	sub.w	ip, r3, r5
 8021df0:	f1bc 0f00 	cmp.w	ip, #0
 8021df4:	dc3b      	bgt.n	8021e6e <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
 8021df6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8021dfa:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8021dfe:	441c      	add	r4, r3
 8021e00:	9b00      	ldr	r3, [sp, #0]
 8021e02:	2b00      	cmp	r3, #0
 8021e04:	dd5e      	ble.n	8021ec4 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 8021e06:	ee30 0a04 	vadd.f32	s0, s0, s8
 8021e0a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8021e0c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8021e10:	eeb0 6a62 	vmov.f32	s12, s5
 8021e14:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8021e18:	ee31 1a05 	vadd.f32	s2, s2, s10
 8021e1c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8021e20:	ed8d 6a0d 	vstr	s12, [sp, #52]	; 0x34
 8021e24:	eeb0 6a43 	vmov.f32	s12, s6
 8021e28:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8021e2c:	ed8d 6a0e 	vstr	s12, [sp, #56]	; 0x38
 8021e30:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8021e34:	ee61 7a27 	vmul.f32	s15, s2, s15
 8021e38:	ee77 2a62 	vsub.f32	s5, s14, s5
 8021e3c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8021e40:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8021e44:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8021e48:	ee12 2a90 	vmov	r2, s5
 8021e4c:	eef0 2a47 	vmov.f32	s5, s14
 8021e50:	fb92 f8f3 	sdiv	r8, r2, r3
 8021e54:	ee13 2a10 	vmov	r2, s6
 8021e58:	eeb0 3a67 	vmov.f32	s6, s15
 8021e5c:	fb92 fef3 	sdiv	lr, r2, r3
 8021e60:	9b00      	ldr	r3, [sp, #0]
 8021e62:	3b01      	subs	r3, #1
 8021e64:	9300      	str	r3, [sp, #0]
 8021e66:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8021e68:	bf08      	it	eq
 8021e6a:	465b      	moveq	r3, fp
 8021e6c:	e767      	b.n	8021d3e <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 8021e6e:	ea5f 4920 	movs.w	r9, r0, asr #16
 8021e72:	d423      	bmi.n	8021ebc <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 8021e74:	f8d6 c008 	ldr.w	ip, [r6, #8]
 8021e78:	45cc      	cmp	ip, r9
 8021e7a:	dd1f      	ble.n	8021ebc <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 8021e7c:	ea5f 4a22 	movs.w	sl, r2, asr #16
 8021e80:	d41c      	bmi.n	8021ebc <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 8021e82:	68f1      	ldr	r1, [r6, #12]
 8021e84:	4551      	cmp	r1, sl
 8021e86:	dd19      	ble.n	8021ebc <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 8021e88:	fa0f fc8c 	sxth.w	ip, ip
 8021e8c:	9901      	ldr	r1, [sp, #4]
 8021e8e:	fb0a 1c0c 	mla	ip, sl, ip, r1
 8021e92:	f81c c009 	ldrb.w	ip, [ip, r9]
 8021e96:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8021e9a:	f817 a00c 	ldrb.w	sl, [r7, ip]
 8021e9e:	eb07 090c 	add.w	r9, r7, ip
 8021ea2:	eb05 0c45 	add.w	ip, r5, r5, lsl #1
 8021ea6:	f804 a00c 	strb.w	sl, [r4, ip]
 8021eaa:	44a4      	add	ip, r4
 8021eac:	f899 a001 	ldrb.w	sl, [r9, #1]
 8021eb0:	f88c a001 	strb.w	sl, [ip, #1]
 8021eb4:	f899 9002 	ldrb.w	r9, [r9, #2]
 8021eb8:	f88c 9002 	strb.w	r9, [ip, #2]
 8021ebc:	4440      	add	r0, r8
 8021ebe:	4472      	add	r2, lr
 8021ec0:	3501      	adds	r5, #1
 8021ec2:	e793      	b.n	8021dec <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xdc>
 8021ec4:	b003      	add	sp, #12
 8021ec6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08021eca <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8021eca:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021ece:	b085      	sub	sp, #20
 8021ed0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8021ed4:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8021ed6:	9202      	str	r2, [sp, #8]
 8021ed8:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
 8021edc:	6860      	ldr	r0, [r4, #4]
 8021ede:	9203      	str	r2, [sp, #12]
 8021ee0:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 8021ee4:	f8dd e044 	ldr.w	lr, [sp, #68]	; 0x44
 8021ee8:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	; 0x50
 8021eec:	fb00 2505 	mla	r5, r0, r5, r2
 8021ef0:	6822      	ldr	r2, [r4, #0]
 8021ef2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8021ef6:	4415      	add	r5, r2
 8021ef8:	f8dc 2000 	ldr.w	r2, [ip]
 8021efc:	9200      	str	r2, [sp, #0]
 8021efe:	f8dc 2004 	ldr.w	r2, [ip, #4]
 8021f02:	3204      	adds	r2, #4
 8021f04:	9201      	str	r2, [sp, #4]
 8021f06:	2900      	cmp	r1, #0
 8021f08:	dc03      	bgt.n	8021f12 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8021f0a:	9a02      	ldr	r2, [sp, #8]
 8021f0c:	2a00      	cmp	r2, #0
 8021f0e:	f340 8127 	ble.w	8022160 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 8021f12:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8021f14:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 8021f18:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 8021f1c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8021f1e:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 8021f22:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8021f26:	2b00      	cmp	r3, #0
 8021f28:	dd0d      	ble.n	8021f46 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8021f2a:	1422      	asrs	r2, r4, #16
 8021f2c:	d405      	bmi.n	8021f3a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8021f2e:	4542      	cmp	r2, r8
 8021f30:	da03      	bge.n	8021f3a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8021f32:	1402      	asrs	r2, r0, #16
 8021f34:	d401      	bmi.n	8021f3a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8021f36:	42ba      	cmp	r2, r7
 8021f38:	db06      	blt.n	8021f48 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8021f3a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8021f3c:	4474      	add	r4, lr
 8021f3e:	3b01      	subs	r3, #1
 8021f40:	3503      	adds	r5, #3
 8021f42:	4410      	add	r0, r2
 8021f44:	e7ef      	b.n	8021f26 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8021f46:	d075      	beq.n	8022034 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16a>
 8021f48:	1e5a      	subs	r2, r3, #1
 8021f4a:	fb0e 4602 	mla	r6, lr, r2, r4
 8021f4e:	1436      	asrs	r6, r6, #16
 8021f50:	d465      	bmi.n	802201e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 8021f52:	4546      	cmp	r6, r8
 8021f54:	da63      	bge.n	802201e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 8021f56:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8021f58:	fb06 0202 	mla	r2, r6, r2, r0
 8021f5c:	1412      	asrs	r2, r2, #16
 8021f5e:	d45e      	bmi.n	802201e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 8021f60:	42ba      	cmp	r2, r7
 8021f62:	da5c      	bge.n	802201e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 8021f64:	1cef      	adds	r7, r5, #3
 8021f66:	4699      	mov	r9, r3
 8021f68:	f1b9 0f00 	cmp.w	r9, #0
 8021f6c:	dd5d      	ble.n	802202a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x160>
 8021f6e:	1402      	asrs	r2, r0, #16
 8021f70:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 8021f74:	1426      	asrs	r6, r4, #16
 8021f76:	4692      	mov	sl, r2
 8021f78:	9a00      	ldr	r2, [sp, #0]
 8021f7a:	fb08 220a 	mla	r2, r8, sl, r2
 8021f7e:	5d92      	ldrb	r2, [r2, r6]
 8021f80:	9e01      	ldr	r6, [sp, #4]
 8021f82:	f856 6022 	ldr.w	r6, [r6, r2, lsl #2]
 8021f86:	ea5f 6816 	movs.w	r8, r6, lsr #24
 8021f8a:	d041      	beq.n	8022010 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 8021f8c:	9a03      	ldr	r2, [sp, #12]
 8021f8e:	fa5f fb86 	uxtb.w	fp, r6
 8021f92:	fb02 f808 	mul.w	r8, r2, r8
 8021f96:	f108 0201 	add.w	r2, r8, #1
 8021f9a:	eb02 2228 	add.w	r2, r2, r8, asr #8
 8021f9e:	f817 8c03 	ldrb.w	r8, [r7, #-3]
 8021fa2:	1212      	asrs	r2, r2, #8
 8021fa4:	fa1f fa82 	uxth.w	sl, r2
 8021fa8:	43d2      	mvns	r2, r2
 8021faa:	fb1b fb0a 	smulbb	fp, fp, sl
 8021fae:	b2d2      	uxtb	r2, r2
 8021fb0:	fb08 b802 	mla	r8, r8, r2, fp
 8021fb4:	fa1f f888 	uxth.w	r8, r8
 8021fb8:	f108 0b01 	add.w	fp, r8, #1
 8021fbc:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8021fc0:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 8021fc4:	f3c6 4607 	ubfx	r6, r6, #16, #8
 8021fc8:	fb1b fb0a 	smulbb	fp, fp, sl
 8021fcc:	ea4f 2828 	mov.w	r8, r8, asr #8
 8021fd0:	fb16 fa0a 	smulbb	sl, r6, sl
 8021fd4:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 8021fd8:	f807 8c03 	strb.w	r8, [r7, #-3]
 8021fdc:	f817 8c02 	ldrb.w	r8, [r7, #-2]
 8021fe0:	fb06 aa02 	mla	sl, r6, r2, sl
 8021fe4:	fb08 b802 	mla	r8, r8, r2, fp
 8021fe8:	fa1f fa8a 	uxth.w	sl, sl
 8021fec:	fa1f f888 	uxth.w	r8, r8
 8021ff0:	f10a 0601 	add.w	r6, sl, #1
 8021ff4:	f108 0b01 	add.w	fp, r8, #1
 8021ff8:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 8021ffc:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8022000:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8022004:	ea4f 2828 	mov.w	r8, r8, asr #8
 8022008:	f807 ac01 	strb.w	sl, [r7, #-1]
 802200c:	f807 8c02 	strb.w	r8, [r7, #-2]
 8022010:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8022012:	4474      	add	r4, lr
 8022014:	3703      	adds	r7, #3
 8022016:	f109 39ff 	add.w	r9, r9, #4294967295
 802201a:	4410      	add	r0, r2
 802201c:	e7a4      	b.n	8021f68 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 802201e:	f04f 0800 	mov.w	r8, #0
 8022022:	eba3 0208 	sub.w	r2, r3, r8
 8022026:	2a00      	cmp	r2, #0
 8022028:	dc3b      	bgt.n	80220a2 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d8>
 802202a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 802202e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8022032:	441d      	add	r5, r3
 8022034:	2900      	cmp	r1, #0
 8022036:	f340 8093 	ble.w	8022160 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 802203a:	ee30 0a04 	vadd.f32	s0, s0, s8
 802203e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8022040:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8022044:	3901      	subs	r1, #1
 8022046:	eeb0 6a62 	vmov.f32	s12, s5
 802204a:	eec6 7a80 	vdiv.f32	s15, s13, s0
 802204e:	ee31 1a05 	vadd.f32	s2, s2, s10
 8022052:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8022056:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 802205a:	eeb0 6a43 	vmov.f32	s12, s6
 802205e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8022062:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 8022066:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802206a:	ee61 7a27 	vmul.f32	s15, s2, s15
 802206e:	ee77 2a62 	vsub.f32	s5, s14, s5
 8022072:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8022076:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802207a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802207e:	ee12 2a90 	vmov	r2, s5
 8022082:	eef0 2a47 	vmov.f32	s5, s14
 8022086:	fb92 fef3 	sdiv	lr, r2, r3
 802208a:	ee13 2a10 	vmov	r2, s6
 802208e:	eeb0 3a67 	vmov.f32	s6, s15
 8022092:	fb92 f3f3 	sdiv	r3, r2, r3
 8022096:	9a02      	ldr	r2, [sp, #8]
 8022098:	9312      	str	r3, [sp, #72]	; 0x48
 802209a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802209c:	bf08      	it	eq
 802209e:	4613      	moveq	r3, r2
 80220a0:	e731      	b.n	8021f06 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 80220a2:	1427      	asrs	r7, r4, #16
 80220a4:	d456      	bmi.n	8022154 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 80220a6:	f8dc 6008 	ldr.w	r6, [ip, #8]
 80220aa:	42be      	cmp	r6, r7
 80220ac:	dd52      	ble.n	8022154 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 80220ae:	ea5f 4920 	movs.w	r9, r0, asr #16
 80220b2:	d44f      	bmi.n	8022154 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 80220b4:	f8dc 200c 	ldr.w	r2, [ip, #12]
 80220b8:	454a      	cmp	r2, r9
 80220ba:	dd4b      	ble.n	8022154 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 80220bc:	9a00      	ldr	r2, [sp, #0]
 80220be:	b236      	sxth	r6, r6
 80220c0:	fb09 2606 	mla	r6, r9, r6, r2
 80220c4:	5df2      	ldrb	r2, [r6, r7]
 80220c6:	9e01      	ldr	r6, [sp, #4]
 80220c8:	f856 7022 	ldr.w	r7, [r6, r2, lsl #2]
 80220cc:	0e3a      	lsrs	r2, r7, #24
 80220ce:	d041      	beq.n	8022154 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 80220d0:	9e03      	ldr	r6, [sp, #12]
 80220d2:	fa5f fb87 	uxtb.w	fp, r7
 80220d6:	4372      	muls	r2, r6
 80220d8:	1c56      	adds	r6, r2, #1
 80220da:	eb06 2222 	add.w	r2, r6, r2, asr #8
 80220de:	eb08 0648 	add.w	r6, r8, r8, lsl #1
 80220e2:	1212      	asrs	r2, r2, #8
 80220e4:	f815 9006 	ldrb.w	r9, [r5, r6]
 80220e8:	fa1f fa82 	uxth.w	sl, r2
 80220ec:	43d2      	mvns	r2, r2
 80220ee:	fb1b fb0a 	smulbb	fp, fp, sl
 80220f2:	b2d2      	uxtb	r2, r2
 80220f4:	fb09 b902 	mla	r9, r9, r2, fp
 80220f8:	fa1f f989 	uxth.w	r9, r9
 80220fc:	f109 0b01 	add.w	fp, r9, #1
 8022100:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8022104:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 8022108:	f3c7 4707 	ubfx	r7, r7, #16, #8
 802210c:	fb1b fb0a 	smulbb	fp, fp, sl
 8022110:	ea4f 2929 	mov.w	r9, r9, asr #8
 8022114:	fb17 fa0a 	smulbb	sl, r7, sl
 8022118:	f805 9006 	strb.w	r9, [r5, r6]
 802211c:	442e      	add	r6, r5
 802211e:	78b7      	ldrb	r7, [r6, #2]
 8022120:	f896 9001 	ldrb.w	r9, [r6, #1]
 8022124:	fb07 aa02 	mla	sl, r7, r2, sl
 8022128:	fb09 b902 	mla	r9, r9, r2, fp
 802212c:	fa1f fa8a 	uxth.w	sl, sl
 8022130:	fa1f f989 	uxth.w	r9, r9
 8022134:	f10a 0701 	add.w	r7, sl, #1
 8022138:	f109 0b01 	add.w	fp, r9, #1
 802213c:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8022140:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8022144:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8022148:	ea4f 2929 	mov.w	r9, r9, asr #8
 802214c:	f886 a002 	strb.w	sl, [r6, #2]
 8022150:	f886 9001 	strb.w	r9, [r6, #1]
 8022154:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8022156:	4474      	add	r4, lr
 8022158:	f108 0801 	add.w	r8, r8, #1
 802215c:	4410      	add	r0, r2
 802215e:	e760      	b.n	8022022 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x158>
 8022160:	b005      	add	sp, #20
 8022162:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08022166 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8022166:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802216a:	b085      	sub	sp, #20
 802216c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8022170:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8022172:	9203      	str	r2, [sp, #12]
 8022174:	6868      	ldr	r0, [r5, #4]
 8022176:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 802217a:	f8dd e044 	ldr.w	lr, [sp, #68]	; 0x44
 802217e:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 8022182:	fb00 2404 	mla	r4, r0, r4, r2
 8022186:	682a      	ldr	r2, [r5, #0]
 8022188:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 802218c:	4414      	add	r4, r2
 802218e:	f8dc 2000 	ldr.w	r2, [ip]
 8022192:	9201      	str	r2, [sp, #4]
 8022194:	f8dc 2004 	ldr.w	r2, [ip, #4]
 8022198:	3204      	adds	r2, #4
 802219a:	9202      	str	r2, [sp, #8]
 802219c:	2900      	cmp	r1, #0
 802219e:	dc03      	bgt.n	80221a8 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 80221a0:	9a03      	ldr	r2, [sp, #12]
 80221a2:	2a00      	cmp	r2, #0
 80221a4:	f340 8137 	ble.w	8022416 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 80221a8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80221aa:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 80221ae:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 80221b2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80221b4:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 80221b8:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 80221bc:	2b00      	cmp	r3, #0
 80221be:	dd0d      	ble.n	80221dc <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 80221c0:	1405      	asrs	r5, r0, #16
 80221c2:	d405      	bmi.n	80221d0 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 80221c4:	4545      	cmp	r5, r8
 80221c6:	da03      	bge.n	80221d0 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 80221c8:	1415      	asrs	r5, r2, #16
 80221ca:	d401      	bmi.n	80221d0 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 80221cc:	42bd      	cmp	r5, r7
 80221ce:	db06      	blt.n	80221de <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 80221d0:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80221d2:	4470      	add	r0, lr
 80221d4:	3b01      	subs	r3, #1
 80221d6:	3403      	adds	r4, #3
 80221d8:	442a      	add	r2, r5
 80221da:	e7ef      	b.n	80221bc <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 80221dc:	d070      	beq.n	80222c0 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15a>
 80221de:	1e5d      	subs	r5, r3, #1
 80221e0:	fb0e 0605 	mla	r6, lr, r5, r0
 80221e4:	1436      	asrs	r6, r6, #16
 80221e6:	d462      	bmi.n	80222ae <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 80221e8:	4546      	cmp	r6, r8
 80221ea:	da60      	bge.n	80222ae <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 80221ec:	9e12      	ldr	r6, [sp, #72]	; 0x48
 80221ee:	fb06 2505 	mla	r5, r6, r5, r2
 80221f2:	142d      	asrs	r5, r5, #16
 80221f4:	d45b      	bmi.n	80222ae <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 80221f6:	42bd      	cmp	r5, r7
 80221f8:	da59      	bge.n	80222ae <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 80221fa:	1ce5      	adds	r5, r4, #3
 80221fc:	469a      	mov	sl, r3
 80221fe:	f1ba 0f00 	cmp.w	sl, #0
 8022202:	dd58      	ble.n	80222b6 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x150>
 8022204:	1416      	asrs	r6, r2, #16
 8022206:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 802220a:	1407      	asrs	r7, r0, #16
 802220c:	46b1      	mov	r9, r6
 802220e:	9e01      	ldr	r6, [sp, #4]
 8022210:	fb08 6609 	mla	r6, r8, r9, r6
 8022214:	5df6      	ldrb	r6, [r6, r7]
 8022216:	9f02      	ldr	r7, [sp, #8]
 8022218:	f857 6026 	ldr.w	r6, [r7, r6, lsl #2]
 802221c:	0e37      	lsrs	r7, r6, #24
 802221e:	2fff      	cmp	r7, #255	; 0xff
 8022220:	f000 80f0 	beq.w	8022404 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29e>
 8022224:	fa5f f887 	uxtb.w	r8, r7
 8022228:	b3d7      	cbz	r7, 80222a0 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 802222a:	fa1f f788 	uxth.w	r7, r8
 802222e:	ea6f 0808 	mvn.w	r8, r8
 8022232:	fa5f fb86 	uxtb.w	fp, r6
 8022236:	f815 9c03 	ldrb.w	r9, [r5, #-3]
 802223a:	fa5f f888 	uxtb.w	r8, r8
 802223e:	fb1b fb07 	smulbb	fp, fp, r7
 8022242:	fb09 b908 	mla	r9, r9, r8, fp
 8022246:	fa1f f989 	uxth.w	r9, r9
 802224a:	f109 0b01 	add.w	fp, r9, #1
 802224e:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8022252:	f815 bc02 	ldrb.w	fp, [r5, #-2]
 8022256:	fb1b fb08 	smulbb	fp, fp, r8
 802225a:	ea4f 2929 	mov.w	r9, r9, asr #8
 802225e:	f805 9c03 	strb.w	r9, [r5, #-3]
 8022262:	f3c6 2907 	ubfx	r9, r6, #8, #8
 8022266:	f3c6 4607 	ubfx	r6, r6, #16, #8
 802226a:	fb09 b907 	mla	r9, r9, r7, fp
 802226e:	fa1f f989 	uxth.w	r9, r9
 8022272:	f109 0b01 	add.w	fp, r9, #1
 8022276:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 802227a:	ea4f 2929 	mov.w	r9, r9, asr #8
 802227e:	f805 9c02 	strb.w	r9, [r5, #-2]
 8022282:	f815 9c01 	ldrb.w	r9, [r5, #-1]
 8022286:	fb19 f808 	smulbb	r8, r9, r8
 802228a:	fb06 8607 	mla	r6, r6, r7, r8
 802228e:	b2b6      	uxth	r6, r6
 8022290:	f106 0801 	add.w	r8, r6, #1
 8022294:	eb08 2816 	add.w	r8, r8, r6, lsr #8
 8022298:	ea4f 2828 	mov.w	r8, r8, asr #8
 802229c:	f805 8c01 	strb.w	r8, [r5, #-1]
 80222a0:	9e12      	ldr	r6, [sp, #72]	; 0x48
 80222a2:	4470      	add	r0, lr
 80222a4:	3503      	adds	r5, #3
 80222a6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80222aa:	4432      	add	r2, r6
 80222ac:	e7a7      	b.n	80221fe <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 80222ae:	2600      	movs	r6, #0
 80222b0:	1b9d      	subs	r5, r3, r6
 80222b2:	2d00      	cmp	r5, #0
 80222b4:	dc3b      	bgt.n	802232e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 80222b6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80222ba:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80222be:	441c      	add	r4, r3
 80222c0:	2900      	cmp	r1, #0
 80222c2:	f340 80a8 	ble.w	8022416 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 80222c6:	ee30 0a04 	vadd.f32	s0, s0, s8
 80222ca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80222cc:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80222d0:	3901      	subs	r1, #1
 80222d2:	eeb0 6a62 	vmov.f32	s12, s5
 80222d6:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80222da:	ee31 1a05 	vadd.f32	s2, s2, s10
 80222de:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80222e2:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 80222e6:	eeb0 6a43 	vmov.f32	s12, s6
 80222ea:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80222ee:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 80222f2:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80222f6:	ee61 7a27 	vmul.f32	s15, s2, s15
 80222fa:	ee77 2a62 	vsub.f32	s5, s14, s5
 80222fe:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8022302:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8022306:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802230a:	ee12 2a90 	vmov	r2, s5
 802230e:	eef0 2a47 	vmov.f32	s5, s14
 8022312:	fb92 fef3 	sdiv	lr, r2, r3
 8022316:	ee13 2a10 	vmov	r2, s6
 802231a:	eeb0 3a67 	vmov.f32	s6, s15
 802231e:	fb92 f3f3 	sdiv	r3, r2, r3
 8022322:	9a03      	ldr	r2, [sp, #12]
 8022324:	9312      	str	r3, [sp, #72]	; 0x48
 8022326:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8022328:	bf08      	it	eq
 802232a:	4613      	moveq	r3, r2
 802232c:	e736      	b.n	802219c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 802232e:	ea5f 4820 	movs.w	r8, r0, asr #16
 8022332:	d457      	bmi.n	80223e4 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8022334:	f8dc 7008 	ldr.w	r7, [ip, #8]
 8022338:	4547      	cmp	r7, r8
 802233a:	dd53      	ble.n	80223e4 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 802233c:	ea5f 4922 	movs.w	r9, r2, asr #16
 8022340:	d450      	bmi.n	80223e4 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8022342:	f8dc 500c 	ldr.w	r5, [ip, #12]
 8022346:	454d      	cmp	r5, r9
 8022348:	dd4c      	ble.n	80223e4 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 802234a:	9d01      	ldr	r5, [sp, #4]
 802234c:	b23f      	sxth	r7, r7
 802234e:	fb09 5707 	mla	r7, r9, r7, r5
 8022352:	f817 5008 	ldrb.w	r5, [r7, r8]
 8022356:	9f02      	ldr	r7, [sp, #8]
 8022358:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 802235c:	0e2f      	lsrs	r7, r5, #24
 802235e:	2fff      	cmp	r7, #255	; 0xff
 8022360:	d045      	beq.n	80223ee <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 8022362:	fa5f f987 	uxtb.w	r9, r7
 8022366:	b3ef      	cbz	r7, 80223e4 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8022368:	fa1f f889 	uxth.w	r8, r9
 802236c:	ea6f 0909 	mvn.w	r9, r9
 8022370:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 8022374:	fa5f fb85 	uxtb.w	fp, r5
 8022378:	f814 a007 	ldrb.w	sl, [r4, r7]
 802237c:	fa5f f989 	uxtb.w	r9, r9
 8022380:	fb1b fb08 	smulbb	fp, fp, r8
 8022384:	fb0a ba09 	mla	sl, sl, r9, fp
 8022388:	fa1f fa8a 	uxth.w	sl, sl
 802238c:	f10a 0b01 	add.w	fp, sl, #1
 8022390:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 8022394:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8022398:	f804 a007 	strb.w	sl, [r4, r7]
 802239c:	4427      	add	r7, r4
 802239e:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 80223a2:	f3c5 4507 	ubfx	r5, r5, #16, #8
 80223a6:	f897 b001 	ldrb.w	fp, [r7, #1]
 80223aa:	fb1b fb09 	smulbb	fp, fp, r9
 80223ae:	fb0a ba08 	mla	sl, sl, r8, fp
 80223b2:	fa1f fa8a 	uxth.w	sl, sl
 80223b6:	f10a 0b01 	add.w	fp, sl, #1
 80223ba:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 80223be:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 80223c2:	f887 a001 	strb.w	sl, [r7, #1]
 80223c6:	f897 a002 	ldrb.w	sl, [r7, #2]
 80223ca:	fb1a f909 	smulbb	r9, sl, r9
 80223ce:	fb05 9508 	mla	r5, r5, r8, r9
 80223d2:	b2ad      	uxth	r5, r5
 80223d4:	f105 0901 	add.w	r9, r5, #1
 80223d8:	eb09 2915 	add.w	r9, r9, r5, lsr #8
 80223dc:	ea4f 2929 	mov.w	r9, r9, asr #8
 80223e0:	f887 9002 	strb.w	r9, [r7, #2]
 80223e4:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80223e6:	4470      	add	r0, lr
 80223e8:	3601      	adds	r6, #1
 80223ea:	442a      	add	r2, r5
 80223ec:	e760      	b.n	80222b0 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 80223ee:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 80223f2:	ea4f 2815 	mov.w	r8, r5, lsr #8
 80223f6:	55e5      	strb	r5, [r4, r7]
 80223f8:	4427      	add	r7, r4
 80223fa:	0c2d      	lsrs	r5, r5, #16
 80223fc:	f887 8001 	strb.w	r8, [r7, #1]
 8022400:	70bd      	strb	r5, [r7, #2]
 8022402:	e7ef      	b.n	80223e4 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8022404:	0a37      	lsrs	r7, r6, #8
 8022406:	f805 6c03 	strb.w	r6, [r5, #-3]
 802240a:	0c36      	lsrs	r6, r6, #16
 802240c:	f805 7c02 	strb.w	r7, [r5, #-2]
 8022410:	f805 6c01 	strb.w	r6, [r5, #-1]
 8022414:	e744      	b.n	80222a0 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 8022416:	b005      	add	sp, #20
 8022418:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802241c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802241c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022420:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8022422:	9201      	str	r2, [sp, #4]
 8022424:	6870      	ldr	r0, [r6, #4]
 8022426:	f89d 5054 	ldrb.w	r5, [sp, #84]	; 0x54
 802242a:	f8dd c050 	ldr.w	ip, [sp, #80]	; 0x50
 802242e:	fa1f fe85 	uxth.w	lr, r5
 8022432:	43ed      	mvns	r5, r5
 8022434:	f8dc 8000 	ldr.w	r8, [ip]
 8022438:	b2ed      	uxtb	r5, r5
 802243a:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 802243e:	fb00 2404 	mla	r4, r0, r4, r2
 8022442:	6832      	ldr	r2, [r6, #0]
 8022444:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8022448:	4414      	add	r4, r2
 802244a:	2900      	cmp	r1, #0
 802244c:	dc03      	bgt.n	8022456 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 802244e:	9a01      	ldr	r2, [sp, #4]
 8022450:	2a00      	cmp	r2, #0
 8022452:	f340 810d 	ble.w	8022670 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 8022456:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8022458:	f9bc a008 	ldrsh.w	sl, [ip, #8]
 802245c:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8022460:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8022462:	f9bc 900c 	ldrsh.w	r9, [ip, #12]
 8022466:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 802246a:	2b00      	cmp	r3, #0
 802246c:	dd0e      	ble.n	802248c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 802246e:	1406      	asrs	r6, r0, #16
 8022470:	d405      	bmi.n	802247e <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 8022472:	4556      	cmp	r6, sl
 8022474:	da03      	bge.n	802247e <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 8022476:	1416      	asrs	r6, r2, #16
 8022478:	d401      	bmi.n	802247e <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 802247a:	454e      	cmp	r6, r9
 802247c:	db07      	blt.n	802248e <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 802247e:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8022480:	3b01      	subs	r3, #1
 8022482:	3403      	adds	r4, #3
 8022484:	4430      	add	r0, r6
 8022486:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8022488:	4432      	add	r2, r6
 802248a:	e7ee      	b.n	802246a <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e>
 802248c:	d060      	beq.n	8022550 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x134>
 802248e:	1e5e      	subs	r6, r3, #1
 8022490:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8022492:	fb07 0706 	mla	r7, r7, r6, r0
 8022496:	143f      	asrs	r7, r7, #16
 8022498:	d451      	bmi.n	802253e <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 802249a:	4557      	cmp	r7, sl
 802249c:	da4f      	bge.n	802253e <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 802249e:	9f10      	ldr	r7, [sp, #64]	; 0x40
 80224a0:	fb07 2606 	mla	r6, r7, r6, r2
 80224a4:	1436      	asrs	r6, r6, #16
 80224a6:	d44a      	bmi.n	802253e <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 80224a8:	454e      	cmp	r6, r9
 80224aa:	da48      	bge.n	802253e <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 80224ac:	1ce6      	adds	r6, r4, #3
 80224ae:	4699      	mov	r9, r3
 80224b0:	f1b9 0f00 	cmp.w	r9, #0
 80224b4:	f106 0603 	add.w	r6, r6, #3
 80224b8:	dd45      	ble.n	8022546 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x12a>
 80224ba:	f9bc b008 	ldrsh.w	fp, [ip, #8]
 80224be:	ea4f 4a20 	mov.w	sl, r0, asr #16
 80224c2:	1417      	asrs	r7, r2, #16
 80224c4:	f109 39ff 	add.w	r9, r9, #4294967295
 80224c8:	fb0b a707 	mla	r7, fp, r7, sl
 80224cc:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 80224d0:	fb1b fb05 	smulbb	fp, fp, r5
 80224d4:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 80224d8:	eb08 0a07 	add.w	sl, r8, r7
 80224dc:	f818 7007 	ldrb.w	r7, [r8, r7]
 80224e0:	fb07 b70e 	mla	r7, r7, lr, fp
 80224e4:	b2bf      	uxth	r7, r7
 80224e6:	f107 0b01 	add.w	fp, r7, #1
 80224ea:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 80224ee:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 80224f2:	fb1b fb05 	smulbb	fp, fp, r5
 80224f6:	123f      	asrs	r7, r7, #8
 80224f8:	f806 7c06 	strb.w	r7, [r6, #-6]
 80224fc:	f89a 7001 	ldrb.w	r7, [sl, #1]
 8022500:	fb07 b70e 	mla	r7, r7, lr, fp
 8022504:	b2bf      	uxth	r7, r7
 8022506:	f107 0b01 	add.w	fp, r7, #1
 802250a:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 802250e:	123f      	asrs	r7, r7, #8
 8022510:	f806 7c05 	strb.w	r7, [r6, #-5]
 8022514:	f89a 7002 	ldrb.w	r7, [sl, #2]
 8022518:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 802251c:	fb1a fa05 	smulbb	sl, sl, r5
 8022520:	fb07 a70e 	mla	r7, r7, lr, sl
 8022524:	b2bf      	uxth	r7, r7
 8022526:	f107 0a01 	add.w	sl, r7, #1
 802252a:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 802252e:	123f      	asrs	r7, r7, #8
 8022530:	f806 7c04 	strb.w	r7, [r6, #-4]
 8022534:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8022536:	4438      	add	r0, r7
 8022538:	9f10      	ldr	r7, [sp, #64]	; 0x40
 802253a:	443a      	add	r2, r7
 802253c:	e7b8      	b.n	80224b0 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 802253e:	2700      	movs	r7, #0
 8022540:	1bde      	subs	r6, r3, r7
 8022542:	2e00      	cmp	r6, #0
 8022544:	dc3f      	bgt.n	80225c6 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 8022546:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 802254a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 802254e:	441c      	add	r4, r3
 8022550:	2900      	cmp	r1, #0
 8022552:	f340 808d 	ble.w	8022670 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 8022556:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802255a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802255c:	ee30 0a04 	vadd.f32	s0, s0, s8
 8022560:	3901      	subs	r1, #1
 8022562:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8022566:	eef0 6a62 	vmov.f32	s13, s5
 802256a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802256e:	ee31 1a05 	vadd.f32	s2, s2, s10
 8022572:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022576:	edcd 6a0d 	vstr	s13, [sp, #52]	; 0x34
 802257a:	eef0 6a43 	vmov.f32	s13, s6
 802257e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022582:	edcd 6a0e 	vstr	s13, [sp, #56]	; 0x38
 8022586:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802258a:	ee61 7a27 	vmul.f32	s15, s2, s15
 802258e:	ee77 2a62 	vsub.f32	s5, s14, s5
 8022592:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8022596:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802259a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802259e:	ee12 2a90 	vmov	r2, s5
 80225a2:	eef0 2a47 	vmov.f32	s5, s14
 80225a6:	fb92 f3f3 	sdiv	r3, r2, r3
 80225aa:	ee13 2a10 	vmov	r2, s6
 80225ae:	930f      	str	r3, [sp, #60]	; 0x3c
 80225b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80225b2:	eeb0 3a67 	vmov.f32	s6, s15
 80225b6:	fb92 f3f3 	sdiv	r3, r2, r3
 80225ba:	9a01      	ldr	r2, [sp, #4]
 80225bc:	9310      	str	r3, [sp, #64]	; 0x40
 80225be:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80225c0:	bf08      	it	eq
 80225c2:	4613      	moveq	r3, r2
 80225c4:	e741      	b.n	802244a <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 80225c6:	ea5f 4920 	movs.w	r9, r0, asr #16
 80225ca:	d44b      	bmi.n	8022664 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 80225cc:	f8dc b008 	ldr.w	fp, [ip, #8]
 80225d0:	45cb      	cmp	fp, r9
 80225d2:	dd47      	ble.n	8022664 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 80225d4:	ea5f 4a22 	movs.w	sl, r2, asr #16
 80225d8:	d444      	bmi.n	8022664 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 80225da:	f8dc 600c 	ldr.w	r6, [ip, #12]
 80225de:	4556      	cmp	r6, sl
 80225e0:	dd40      	ble.n	8022664 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 80225e2:	fa0f f68b 	sxth.w	r6, fp
 80225e6:	fb0a 9906 	mla	r9, sl, r6, r9
 80225ea:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 80225ee:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 80225f2:	f814 b006 	ldrb.w	fp, [r4, r6]
 80225f6:	fb1b fb05 	smulbb	fp, fp, r5
 80225fa:	eb08 0a09 	add.w	sl, r8, r9
 80225fe:	f818 9009 	ldrb.w	r9, [r8, r9]
 8022602:	fb09 b90e 	mla	r9, r9, lr, fp
 8022606:	fa1f f989 	uxth.w	r9, r9
 802260a:	f109 0b01 	add.w	fp, r9, #1
 802260e:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8022612:	ea4f 2929 	mov.w	r9, r9, asr #8
 8022616:	f804 9006 	strb.w	r9, [r4, r6]
 802261a:	4426      	add	r6, r4
 802261c:	f89a 9001 	ldrb.w	r9, [sl, #1]
 8022620:	f896 b001 	ldrb.w	fp, [r6, #1]
 8022624:	fb1b fb05 	smulbb	fp, fp, r5
 8022628:	fb09 b90e 	mla	r9, r9, lr, fp
 802262c:	fa1f f989 	uxth.w	r9, r9
 8022630:	f109 0b01 	add.w	fp, r9, #1
 8022634:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8022638:	ea4f 2929 	mov.w	r9, r9, asr #8
 802263c:	f886 9001 	strb.w	r9, [r6, #1]
 8022640:	f89a 9002 	ldrb.w	r9, [sl, #2]
 8022644:	f896 a002 	ldrb.w	sl, [r6, #2]
 8022648:	fb1a fa05 	smulbb	sl, sl, r5
 802264c:	fb09 a90e 	mla	r9, r9, lr, sl
 8022650:	fa1f f989 	uxth.w	r9, r9
 8022654:	f109 0a01 	add.w	sl, r9, #1
 8022658:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 802265c:	ea4f 2929 	mov.w	r9, r9, asr #8
 8022660:	f886 9002 	strb.w	r9, [r6, #2]
 8022664:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8022666:	3701      	adds	r7, #1
 8022668:	4430      	add	r0, r6
 802266a:	9e10      	ldr	r6, [sp, #64]	; 0x40
 802266c:	4432      	add	r2, r6
 802266e:	e767      	b.n	8022540 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
 8022670:	b003      	add	sp, #12
 8022672:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08022676 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8022676:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802267a:	9d11      	ldr	r5, [sp, #68]	; 0x44
 802267c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8022680:	9201      	str	r2, [sp, #4]
 8022682:	6868      	ldr	r0, [r5, #4]
 8022684:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8022686:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 802268a:	e9dd ec0f 	ldrd	lr, ip, [sp, #60]	; 0x3c
 802268e:	fb00 2404 	mla	r4, r0, r4, r2
 8022692:	682a      	ldr	r2, [r5, #0]
 8022694:	f8d7 8000 	ldr.w	r8, [r7]
 8022698:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 802269c:	4414      	add	r4, r2
 802269e:	2900      	cmp	r1, #0
 80226a0:	dc03      	bgt.n	80226aa <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 80226a2:	9a01      	ldr	r2, [sp, #4]
 80226a4:	2a00      	cmp	r2, #0
 80226a6:	f340 80af 	ble.w	8022808 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 80226aa:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80226ac:	f9b7 a008 	ldrsh.w	sl, [r7, #8]
 80226b0:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 80226b4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80226b6:	f9b7 900c 	ldrsh.w	r9, [r7, #12]
 80226ba:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 80226be:	2b00      	cmp	r3, #0
 80226c0:	dd0c      	ble.n	80226dc <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 80226c2:	1405      	asrs	r5, r0, #16
 80226c4:	d405      	bmi.n	80226d2 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 80226c6:	4555      	cmp	r5, sl
 80226c8:	da03      	bge.n	80226d2 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 80226ca:	1415      	asrs	r5, r2, #16
 80226cc:	d401      	bmi.n	80226d2 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 80226ce:	454d      	cmp	r5, r9
 80226d0:	db05      	blt.n	80226de <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 80226d2:	4470      	add	r0, lr
 80226d4:	4462      	add	r2, ip
 80226d6:	3b01      	subs	r3, #1
 80226d8:	3403      	adds	r4, #3
 80226da:	e7f0      	b.n	80226be <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 80226dc:	d038      	beq.n	8022750 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 80226de:	1e5d      	subs	r5, r3, #1
 80226e0:	fb0e 0605 	mla	r6, lr, r5, r0
 80226e4:	1436      	asrs	r6, r6, #16
 80226e6:	d42a      	bmi.n	802273e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 80226e8:	4556      	cmp	r6, sl
 80226ea:	da28      	bge.n	802273e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 80226ec:	fb0c 2505 	mla	r5, ip, r5, r2
 80226f0:	142d      	asrs	r5, r5, #16
 80226f2:	d424      	bmi.n	802273e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 80226f4:	454d      	cmp	r5, r9
 80226f6:	da22      	bge.n	802273e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 80226f8:	1ce6      	adds	r6, r4, #3
 80226fa:	4699      	mov	r9, r3
 80226fc:	f1b9 0f00 	cmp.w	r9, #0
 8022700:	f106 0603 	add.w	r6, r6, #3
 8022704:	dd1f      	ble.n	8022746 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xd0>
 8022706:	f9b7 b008 	ldrsh.w	fp, [r7, #8]
 802270a:	ea4f 4a20 	mov.w	sl, r0, asr #16
 802270e:	1415      	asrs	r5, r2, #16
 8022710:	4470      	add	r0, lr
 8022712:	4462      	add	r2, ip
 8022714:	f109 39ff 	add.w	r9, r9, #4294967295
 8022718:	fb0b a505 	mla	r5, fp, r5, sl
 802271c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8022720:	eb08 0a05 	add.w	sl, r8, r5
 8022724:	f818 5005 	ldrb.w	r5, [r8, r5]
 8022728:	f806 5c06 	strb.w	r5, [r6, #-6]
 802272c:	f89a 5001 	ldrb.w	r5, [sl, #1]
 8022730:	f806 5c05 	strb.w	r5, [r6, #-5]
 8022734:	f89a 5002 	ldrb.w	r5, [sl, #2]
 8022738:	f806 5c04 	strb.w	r5, [r6, #-4]
 802273c:	e7de      	b.n	80226fc <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 802273e:	2600      	movs	r6, #0
 8022740:	1b9d      	subs	r5, r3, r6
 8022742:	2d00      	cmp	r5, #0
 8022744:	dc38      	bgt.n	80227b8 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 8022746:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 802274a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 802274e:	441c      	add	r4, r3
 8022750:	2900      	cmp	r1, #0
 8022752:	dd59      	ble.n	8022808 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 8022754:	ee30 0a04 	vadd.f32	s0, s0, s8
 8022758:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802275a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 802275e:	3901      	subs	r1, #1
 8022760:	eeb0 6a62 	vmov.f32	s12, s5
 8022764:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8022768:	ee31 1a05 	vadd.f32	s2, s2, s10
 802276c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8022770:	ed8d 6a0d 	vstr	s12, [sp, #52]	; 0x34
 8022774:	eeb0 6a43 	vmov.f32	s12, s6
 8022778:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 802277c:	ed8d 6a0e 	vstr	s12, [sp, #56]	; 0x38
 8022780:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8022784:	ee61 7a27 	vmul.f32	s15, s2, s15
 8022788:	ee77 2a62 	vsub.f32	s5, s14, s5
 802278c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8022790:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8022794:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8022798:	ee12 2a90 	vmov	r2, s5
 802279c:	eef0 2a47 	vmov.f32	s5, s14
 80227a0:	fb92 fef3 	sdiv	lr, r2, r3
 80227a4:	ee13 2a10 	vmov	r2, s6
 80227a8:	eeb0 3a67 	vmov.f32	s6, s15
 80227ac:	fb92 fcf3 	sdiv	ip, r2, r3
 80227b0:	9a01      	ldr	r2, [sp, #4]
 80227b2:	bf08      	it	eq
 80227b4:	4613      	moveq	r3, r2
 80227b6:	e772      	b.n	802269e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28>
 80227b8:	ea5f 4920 	movs.w	r9, r0, asr #16
 80227bc:	d420      	bmi.n	8022800 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 80227be:	f8d7 b008 	ldr.w	fp, [r7, #8]
 80227c2:	45cb      	cmp	fp, r9
 80227c4:	dd1c      	ble.n	8022800 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 80227c6:	ea5f 4a22 	movs.w	sl, r2, asr #16
 80227ca:	d419      	bmi.n	8022800 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 80227cc:	68fd      	ldr	r5, [r7, #12]
 80227ce:	4555      	cmp	r5, sl
 80227d0:	dd16      	ble.n	8022800 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 80227d2:	fa0f f58b 	sxth.w	r5, fp
 80227d6:	fb0a 9505 	mla	r5, sl, r5, r9
 80227da:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80227de:	f818 9005 	ldrb.w	r9, [r8, r5]
 80227e2:	eb08 0b05 	add.w	fp, r8, r5
 80227e6:	eb06 0546 	add.w	r5, r6, r6, lsl #1
 80227ea:	f804 9005 	strb.w	r9, [r4, r5]
 80227ee:	4425      	add	r5, r4
 80227f0:	f89b 9001 	ldrb.w	r9, [fp, #1]
 80227f4:	f885 9001 	strb.w	r9, [r5, #1]
 80227f8:	f89b 9002 	ldrb.w	r9, [fp, #2]
 80227fc:	f885 9002 	strb.w	r9, [r5, #2]
 8022800:	4470      	add	r0, lr
 8022802:	4462      	add	r2, ip
 8022804:	3601      	adds	r6, #1
 8022806:	e79b      	b.n	8022740 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xca>
 8022808:	b003      	add	sp, #12
 802280a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802280e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802280e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022812:	b085      	sub	sp, #20
 8022814:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8022818:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 802281a:	9202      	str	r2, [sp, #8]
 802281c:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
 8022820:	6860      	ldr	r0, [r4, #4]
 8022822:	9203      	str	r2, [sp, #12]
 8022824:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 8022828:	f8dd e044 	ldr.w	lr, [sp, #68]	; 0x44
 802282c:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	; 0x50
 8022830:	fb00 2505 	mla	r5, r0, r5, r2
 8022834:	6822      	ldr	r2, [r4, #0]
 8022836:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 802283a:	4415      	add	r5, r2
 802283c:	f8dc 2000 	ldr.w	r2, [ip]
 8022840:	9201      	str	r2, [sp, #4]
 8022842:	2900      	cmp	r1, #0
 8022844:	dc03      	bgt.n	802284e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 8022846:	9a02      	ldr	r2, [sp, #8]
 8022848:	2a00      	cmp	r2, #0
 802284a:	f340 8122 	ble.w	8022a92 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 802284e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8022850:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 8022854:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 8022858:	9a10      	ldr	r2, [sp, #64]	; 0x40
 802285a:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 802285e:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8022862:	2b00      	cmp	r3, #0
 8022864:	dd0d      	ble.n	8022882 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8022866:	1422      	asrs	r2, r4, #16
 8022868:	d405      	bmi.n	8022876 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 802286a:	4542      	cmp	r2, r8
 802286c:	da03      	bge.n	8022876 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 802286e:	1402      	asrs	r2, r0, #16
 8022870:	d401      	bmi.n	8022876 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8022872:	42ba      	cmp	r2, r7
 8022874:	db06      	blt.n	8022884 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8022876:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8022878:	4474      	add	r4, lr
 802287a:	3b01      	subs	r3, #1
 802287c:	3503      	adds	r5, #3
 802287e:	4410      	add	r0, r2
 8022880:	e7ef      	b.n	8022862 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 8022882:	d072      	beq.n	802296a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15c>
 8022884:	1e5a      	subs	r2, r3, #1
 8022886:	fb0e 4602 	mla	r6, lr, r2, r4
 802288a:	1436      	asrs	r6, r6, #16
 802288c:	d462      	bmi.n	8022954 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 802288e:	4546      	cmp	r6, r8
 8022890:	da60      	bge.n	8022954 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 8022892:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8022894:	fb06 0202 	mla	r2, r6, r2, r0
 8022898:	1412      	asrs	r2, r2, #16
 802289a:	d45b      	bmi.n	8022954 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 802289c:	42ba      	cmp	r2, r7
 802289e:	da59      	bge.n	8022954 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 80228a0:	1cef      	adds	r7, r5, #3
 80228a2:	4699      	mov	r9, r3
 80228a4:	f1b9 0f00 	cmp.w	r9, #0
 80228a8:	dd5a      	ble.n	8022960 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 80228aa:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 80228ae:	1426      	asrs	r6, r4, #16
 80228b0:	1402      	asrs	r2, r0, #16
 80228b2:	fb08 6202 	mla	r2, r8, r2, r6
 80228b6:	9e01      	ldr	r6, [sp, #4]
 80228b8:	f856 6022 	ldr.w	r6, [r6, r2, lsl #2]
 80228bc:	ea5f 6816 	movs.w	r8, r6, lsr #24
 80228c0:	d041      	beq.n	8022946 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 80228c2:	9a03      	ldr	r2, [sp, #12]
 80228c4:	fa5f fb86 	uxtb.w	fp, r6
 80228c8:	fb02 f808 	mul.w	r8, r2, r8
 80228cc:	f108 0201 	add.w	r2, r8, #1
 80228d0:	eb02 2228 	add.w	r2, r2, r8, asr #8
 80228d4:	f817 8c03 	ldrb.w	r8, [r7, #-3]
 80228d8:	1212      	asrs	r2, r2, #8
 80228da:	fa1f fa82 	uxth.w	sl, r2
 80228de:	43d2      	mvns	r2, r2
 80228e0:	fb1b fb0a 	smulbb	fp, fp, sl
 80228e4:	b2d2      	uxtb	r2, r2
 80228e6:	fb08 b802 	mla	r8, r8, r2, fp
 80228ea:	fa1f f888 	uxth.w	r8, r8
 80228ee:	f108 0b01 	add.w	fp, r8, #1
 80228f2:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 80228f6:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 80228fa:	f3c6 4607 	ubfx	r6, r6, #16, #8
 80228fe:	fb1b fb0a 	smulbb	fp, fp, sl
 8022902:	ea4f 2828 	mov.w	r8, r8, asr #8
 8022906:	fb16 fa0a 	smulbb	sl, r6, sl
 802290a:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 802290e:	f807 8c03 	strb.w	r8, [r7, #-3]
 8022912:	f817 8c02 	ldrb.w	r8, [r7, #-2]
 8022916:	fb06 aa02 	mla	sl, r6, r2, sl
 802291a:	fb08 b802 	mla	r8, r8, r2, fp
 802291e:	fa1f fa8a 	uxth.w	sl, sl
 8022922:	fa1f f888 	uxth.w	r8, r8
 8022926:	f10a 0601 	add.w	r6, sl, #1
 802292a:	f108 0b01 	add.w	fp, r8, #1
 802292e:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 8022932:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8022936:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 802293a:	ea4f 2828 	mov.w	r8, r8, asr #8
 802293e:	f807 ac01 	strb.w	sl, [r7, #-1]
 8022942:	f807 8c02 	strb.w	r8, [r7, #-2]
 8022946:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8022948:	4474      	add	r4, lr
 802294a:	3703      	adds	r7, #3
 802294c:	f109 39ff 	add.w	r9, r9, #4294967295
 8022950:	4410      	add	r0, r2
 8022952:	e7a7      	b.n	80228a4 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8022954:	f04f 0800 	mov.w	r8, #0
 8022958:	eba3 0208 	sub.w	r2, r3, r8
 802295c:	2a00      	cmp	r2, #0
 802295e:	dc3b      	bgt.n	80229d8 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ca>
 8022960:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8022964:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8022968:	441d      	add	r5, r3
 802296a:	2900      	cmp	r1, #0
 802296c:	f340 8091 	ble.w	8022a92 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 8022970:	ee30 0a04 	vadd.f32	s0, s0, s8
 8022974:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8022976:	ee70 0aa4 	vadd.f32	s1, s1, s9
 802297a:	3901      	subs	r1, #1
 802297c:	eeb0 6a62 	vmov.f32	s12, s5
 8022980:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8022984:	ee31 1a05 	vadd.f32	s2, s2, s10
 8022988:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 802298c:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 8022990:	eeb0 6a43 	vmov.f32	s12, s6
 8022994:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8022998:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 802299c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80229a0:	ee61 7a27 	vmul.f32	s15, s2, s15
 80229a4:	ee77 2a62 	vsub.f32	s5, s14, s5
 80229a8:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80229ac:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80229b0:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80229b4:	ee12 2a90 	vmov	r2, s5
 80229b8:	eef0 2a47 	vmov.f32	s5, s14
 80229bc:	fb92 fef3 	sdiv	lr, r2, r3
 80229c0:	ee13 2a10 	vmov	r2, s6
 80229c4:	eeb0 3a67 	vmov.f32	s6, s15
 80229c8:	fb92 f3f3 	sdiv	r3, r2, r3
 80229cc:	9a02      	ldr	r2, [sp, #8]
 80229ce:	9312      	str	r3, [sp, #72]	; 0x48
 80229d0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80229d2:	bf08      	it	eq
 80229d4:	4613      	moveq	r3, r2
 80229d6:	e734      	b.n	8022842 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 80229d8:	1427      	asrs	r7, r4, #16
 80229da:	d454      	bmi.n	8022a86 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 80229dc:	f8dc 6008 	ldr.w	r6, [ip, #8]
 80229e0:	42be      	cmp	r6, r7
 80229e2:	dd50      	ble.n	8022a86 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 80229e4:	ea5f 4920 	movs.w	r9, r0, asr #16
 80229e8:	d44d      	bmi.n	8022a86 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 80229ea:	f8dc 200c 	ldr.w	r2, [ip, #12]
 80229ee:	454a      	cmp	r2, r9
 80229f0:	dd49      	ble.n	8022a86 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 80229f2:	b236      	sxth	r6, r6
 80229f4:	9a01      	ldr	r2, [sp, #4]
 80229f6:	fb09 7606 	mla	r6, r9, r6, r7
 80229fa:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
 80229fe:	0e3a      	lsrs	r2, r7, #24
 8022a00:	d041      	beq.n	8022a86 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 8022a02:	9e03      	ldr	r6, [sp, #12]
 8022a04:	fa5f fb87 	uxtb.w	fp, r7
 8022a08:	4372      	muls	r2, r6
 8022a0a:	1c56      	adds	r6, r2, #1
 8022a0c:	eb06 2222 	add.w	r2, r6, r2, asr #8
 8022a10:	eb08 0648 	add.w	r6, r8, r8, lsl #1
 8022a14:	1212      	asrs	r2, r2, #8
 8022a16:	f815 9006 	ldrb.w	r9, [r5, r6]
 8022a1a:	fa1f fa82 	uxth.w	sl, r2
 8022a1e:	43d2      	mvns	r2, r2
 8022a20:	fb1b fb0a 	smulbb	fp, fp, sl
 8022a24:	b2d2      	uxtb	r2, r2
 8022a26:	fb09 b902 	mla	r9, r9, r2, fp
 8022a2a:	fa1f f989 	uxth.w	r9, r9
 8022a2e:	f109 0b01 	add.w	fp, r9, #1
 8022a32:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8022a36:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 8022a3a:	f3c7 4707 	ubfx	r7, r7, #16, #8
 8022a3e:	fb1b fb0a 	smulbb	fp, fp, sl
 8022a42:	ea4f 2929 	mov.w	r9, r9, asr #8
 8022a46:	fb17 fa0a 	smulbb	sl, r7, sl
 8022a4a:	f805 9006 	strb.w	r9, [r5, r6]
 8022a4e:	442e      	add	r6, r5
 8022a50:	78b7      	ldrb	r7, [r6, #2]
 8022a52:	f896 9001 	ldrb.w	r9, [r6, #1]
 8022a56:	fb07 aa02 	mla	sl, r7, r2, sl
 8022a5a:	fb09 b902 	mla	r9, r9, r2, fp
 8022a5e:	fa1f fa8a 	uxth.w	sl, sl
 8022a62:	fa1f f989 	uxth.w	r9, r9
 8022a66:	f10a 0701 	add.w	r7, sl, #1
 8022a6a:	f109 0b01 	add.w	fp, r9, #1
 8022a6e:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8022a72:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8022a76:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8022a7a:	ea4f 2929 	mov.w	r9, r9, asr #8
 8022a7e:	f886 a002 	strb.w	sl, [r6, #2]
 8022a82:	f886 9001 	strb.w	r9, [r6, #1]
 8022a86:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8022a88:	4474      	add	r4, lr
 8022a8a:	f108 0801 	add.w	r8, r8, #1
 8022a8e:	4410      	add	r0, r2
 8022a90:	e762      	b.n	8022958 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 8022a92:	b005      	add	sp, #20
 8022a94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08022a98 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8022a98:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022a9c:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8022a9e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8022aa2:	9201      	str	r2, [sp, #4]
 8022aa4:	6860      	ldr	r0, [r4, #4]
 8022aa6:	f8dd c050 	ldr.w	ip, [sp, #80]	; 0x50
 8022aaa:	e9dd 2512 	ldrd	r2, r5, [sp, #72]	; 0x48
 8022aae:	fb00 2505 	mla	r5, r0, r5, r2
 8022ab2:	6822      	ldr	r2, [r4, #0]
 8022ab4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8022ab8:	4415      	add	r5, r2
 8022aba:	f8dc 2000 	ldr.w	r2, [ip]
 8022abe:	9200      	str	r2, [sp, #0]
 8022ac0:	2900      	cmp	r1, #0
 8022ac2:	dc03      	bgt.n	8022acc <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 8022ac4:	9a01      	ldr	r2, [sp, #4]
 8022ac6:	2a00      	cmp	r2, #0
 8022ac8:	f340 812b 	ble.w	8022d22 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8022acc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8022ace:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 8022ad2:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 8022ad6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8022ad8:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 8022adc:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8022ae0:	2b00      	cmp	r3, #0
 8022ae2:	dd0e      	ble.n	8022b02 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8022ae4:	1422      	asrs	r2, r4, #16
 8022ae6:	d405      	bmi.n	8022af4 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8022ae8:	4572      	cmp	r2, lr
 8022aea:	da03      	bge.n	8022af4 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8022aec:	1402      	asrs	r2, r0, #16
 8022aee:	d401      	bmi.n	8022af4 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8022af0:	42ba      	cmp	r2, r7
 8022af2:	db07      	blt.n	8022b04 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8022af4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8022af6:	3b01      	subs	r3, #1
 8022af8:	3503      	adds	r5, #3
 8022afa:	4414      	add	r4, r2
 8022afc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8022afe:	4410      	add	r0, r2
 8022b00:	e7ee      	b.n	8022ae0 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8022b02:	d06f      	beq.n	8022be4 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 8022b04:	1e5a      	subs	r2, r3, #1
 8022b06:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8022b08:	fb06 4602 	mla	r6, r6, r2, r4
 8022b0c:	1436      	asrs	r6, r6, #16
 8022b0e:	d45e      	bmi.n	8022bce <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 8022b10:	4576      	cmp	r6, lr
 8022b12:	da5c      	bge.n	8022bce <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 8022b14:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8022b16:	fb06 0202 	mla	r2, r6, r2, r0
 8022b1a:	1412      	asrs	r2, r2, #16
 8022b1c:	d457      	bmi.n	8022bce <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 8022b1e:	42ba      	cmp	r2, r7
 8022b20:	da55      	bge.n	8022bce <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 8022b22:	1cee      	adds	r6, r5, #3
 8022b24:	469a      	mov	sl, r3
 8022b26:	f1ba 0f00 	cmp.w	sl, #0
 8022b2a:	dd56      	ble.n	8022bda <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 8022b2c:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 8022b30:	1427      	asrs	r7, r4, #16
 8022b32:	1402      	asrs	r2, r0, #16
 8022b34:	fb0e 7202 	mla	r2, lr, r2, r7
 8022b38:	9f00      	ldr	r7, [sp, #0]
 8022b3a:	f857 7022 	ldr.w	r7, [r7, r2, lsl #2]
 8022b3e:	ea5f 6e17 	movs.w	lr, r7, lsr #24
 8022b42:	d03c      	beq.n	8022bbe <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 8022b44:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8022b48:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 8022b4c:	f3c7 2907 	ubfx	r9, r7, #8, #8
 8022b50:	fa5f f28e 	uxtb.w	r2, lr
 8022b54:	b2ff      	uxtb	r7, r7
 8022b56:	f000 80dd 	beq.w	8022d14 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 8022b5a:	fa1f f882 	uxth.w	r8, r2
 8022b5e:	43d2      	mvns	r2, r2
 8022b60:	f816 ec03 	ldrb.w	lr, [r6, #-3]
 8022b64:	fb17 f708 	smulbb	r7, r7, r8
 8022b68:	b2d2      	uxtb	r2, r2
 8022b6a:	fb19 f908 	smulbb	r9, r9, r8
 8022b6e:	fb0e 7702 	mla	r7, lr, r2, r7
 8022b72:	fb1b f808 	smulbb	r8, fp, r8
 8022b76:	b2bf      	uxth	r7, r7
 8022b78:	f107 0e01 	add.w	lr, r7, #1
 8022b7c:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 8022b80:	123f      	asrs	r7, r7, #8
 8022b82:	f806 7c03 	strb.w	r7, [r6, #-3]
 8022b86:	f816 7c02 	ldrb.w	r7, [r6, #-2]
 8022b8a:	fb07 9902 	mla	r9, r7, r2, r9
 8022b8e:	fa1f f989 	uxth.w	r9, r9
 8022b92:	f109 0701 	add.w	r7, r9, #1
 8022b96:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 8022b9a:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 8022b9e:	fb07 8802 	mla	r8, r7, r2, r8
 8022ba2:	ea4f 2929 	mov.w	r9, r9, asr #8
 8022ba6:	fa1f f888 	uxth.w	r8, r8
 8022baa:	f806 9c02 	strb.w	r9, [r6, #-2]
 8022bae:	f108 0201 	add.w	r2, r8, #1
 8022bb2:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 8022bb6:	ea4f 2828 	mov.w	r8, r8, asr #8
 8022bba:	f806 8c01 	strb.w	r8, [r6, #-1]
 8022bbe:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8022bc0:	3603      	adds	r6, #3
 8022bc2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8022bc6:	4414      	add	r4, r2
 8022bc8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8022bca:	4410      	add	r0, r2
 8022bcc:	e7ab      	b.n	8022b26 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8022bce:	f04f 0e00 	mov.w	lr, #0
 8022bd2:	eba3 020e 	sub.w	r2, r3, lr
 8022bd6:	2a00      	cmp	r2, #0
 8022bd8:	dc3d      	bgt.n	8022c56 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 8022bda:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8022bde:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8022be2:	441d      	add	r5, r3
 8022be4:	2900      	cmp	r1, #0
 8022be6:	f340 809c 	ble.w	8022d22 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8022bea:	ee30 0a04 	vadd.f32	s0, s0, s8
 8022bee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8022bf0:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8022bf4:	3901      	subs	r1, #1
 8022bf6:	eeb0 6a62 	vmov.f32	s12, s5
 8022bfa:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8022bfe:	ee31 1a05 	vadd.f32	s2, s2, s10
 8022c02:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8022c06:	ed8d 6a0d 	vstr	s12, [sp, #52]	; 0x34
 8022c0a:	eeb0 6a43 	vmov.f32	s12, s6
 8022c0e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8022c12:	ed8d 6a0e 	vstr	s12, [sp, #56]	; 0x38
 8022c16:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8022c1a:	ee61 7a27 	vmul.f32	s15, s2, s15
 8022c1e:	ee77 2a62 	vsub.f32	s5, s14, s5
 8022c22:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8022c26:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8022c2a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8022c2e:	ee12 2a90 	vmov	r2, s5
 8022c32:	eef0 2a47 	vmov.f32	s5, s14
 8022c36:	fb92 f3f3 	sdiv	r3, r2, r3
 8022c3a:	ee13 2a10 	vmov	r2, s6
 8022c3e:	930f      	str	r3, [sp, #60]	; 0x3c
 8022c40:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8022c42:	eeb0 3a67 	vmov.f32	s6, s15
 8022c46:	fb92 f3f3 	sdiv	r3, r2, r3
 8022c4a:	9a01      	ldr	r2, [sp, #4]
 8022c4c:	9310      	str	r3, [sp, #64]	; 0x40
 8022c4e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8022c50:	bf08      	it	eq
 8022c52:	4613      	moveq	r3, r2
 8022c54:	e734      	b.n	8022ac0 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28>
 8022c56:	1427      	asrs	r7, r4, #16
 8022c58:	d44d      	bmi.n	8022cf6 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8022c5a:	f8dc 6008 	ldr.w	r6, [ip, #8]
 8022c5e:	42be      	cmp	r6, r7
 8022c60:	dd49      	ble.n	8022cf6 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8022c62:	ea5f 4820 	movs.w	r8, r0, asr #16
 8022c66:	d446      	bmi.n	8022cf6 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8022c68:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8022c6c:	4542      	cmp	r2, r8
 8022c6e:	dd42      	ble.n	8022cf6 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8022c70:	b236      	sxth	r6, r6
 8022c72:	9a00      	ldr	r2, [sp, #0]
 8022c74:	fb08 7606 	mla	r6, r8, r6, r7
 8022c78:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
 8022c7c:	0e3a      	lsrs	r2, r7, #24
 8022c7e:	d03a      	beq.n	8022cf6 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8022c80:	2aff      	cmp	r2, #255	; 0xff
 8022c82:	b2d6      	uxtb	r6, r2
 8022c84:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 8022c88:	f3c7 2a07 	ubfx	sl, r7, #8, #8
 8022c8c:	ea4f 024e 	mov.w	r2, lr, lsl #1
 8022c90:	b2ff      	uxtb	r7, r7
 8022c92:	d037      	beq.n	8022d04 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26c>
 8022c94:	fa1f f986 	uxth.w	r9, r6
 8022c98:	4472      	add	r2, lr
 8022c9a:	43f6      	mvns	r6, r6
 8022c9c:	f815 8002 	ldrb.w	r8, [r5, r2]
 8022ca0:	fb17 f709 	smulbb	r7, r7, r9
 8022ca4:	fb1a fa09 	smulbb	sl, sl, r9
 8022ca8:	b2f6      	uxtb	r6, r6
 8022caa:	fb1b f909 	smulbb	r9, fp, r9
 8022cae:	fb08 7706 	mla	r7, r8, r6, r7
 8022cb2:	b2bf      	uxth	r7, r7
 8022cb4:	f107 0801 	add.w	r8, r7, #1
 8022cb8:	eb08 2717 	add.w	r7, r8, r7, lsr #8
 8022cbc:	123f      	asrs	r7, r7, #8
 8022cbe:	54af      	strb	r7, [r5, r2]
 8022cc0:	442a      	add	r2, r5
 8022cc2:	7857      	ldrb	r7, [r2, #1]
 8022cc4:	fb07 aa06 	mla	sl, r7, r6, sl
 8022cc8:	fa1f fa8a 	uxth.w	sl, sl
 8022ccc:	f10a 0701 	add.w	r7, sl, #1
 8022cd0:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8022cd4:	7897      	ldrb	r7, [r2, #2]
 8022cd6:	fb07 9906 	mla	r9, r7, r6, r9
 8022cda:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8022cde:	fa1f f989 	uxth.w	r9, r9
 8022ce2:	f882 a001 	strb.w	sl, [r2, #1]
 8022ce6:	f109 0601 	add.w	r6, r9, #1
 8022cea:	eb06 2919 	add.w	r9, r6, r9, lsr #8
 8022cee:	ea4f 2929 	mov.w	r9, r9, asr #8
 8022cf2:	f882 9002 	strb.w	r9, [r2, #2]
 8022cf6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8022cf8:	f10e 0e01 	add.w	lr, lr, #1
 8022cfc:	4414      	add	r4, r2
 8022cfe:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8022d00:	4410      	add	r0, r2
 8022d02:	e766      	b.n	8022bd2 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 8022d04:	4472      	add	r2, lr
 8022d06:	54af      	strb	r7, [r5, r2]
 8022d08:	442a      	add	r2, r5
 8022d0a:	f882 a001 	strb.w	sl, [r2, #1]
 8022d0e:	f882 b002 	strb.w	fp, [r2, #2]
 8022d12:	e7f0      	b.n	8022cf6 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8022d14:	f806 7c03 	strb.w	r7, [r6, #-3]
 8022d18:	f806 9c02 	strb.w	r9, [r6, #-2]
 8022d1c:	f806 bc01 	strb.w	fp, [r6, #-1]
 8022d20:	e74d      	b.n	8022bbe <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 8022d22:	b003      	add	sp, #12
 8022d24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08022d28 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8022d28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022d2c:	b087      	sub	sp, #28
 8022d2e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8022d32:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8022d34:	9204      	str	r2, [sp, #16]
 8022d36:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 8022d3a:	6860      	ldr	r0, [r4, #4]
 8022d3c:	9205      	str	r2, [sp, #20]
 8022d3e:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
 8022d42:	f8dd e04c 	ldr.w	lr, [sp, #76]	; 0x4c
 8022d46:	9101      	str	r1, [sp, #4]
 8022d48:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	; 0x58
 8022d4c:	fb00 2505 	mla	r5, r0, r5, r2
 8022d50:	6822      	ldr	r2, [r4, #0]
 8022d52:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8022d56:	4415      	add	r5, r2
 8022d58:	f8dc 2008 	ldr.w	r2, [ip, #8]
 8022d5c:	3201      	adds	r2, #1
 8022d5e:	f022 0201 	bic.w	r2, r2, #1
 8022d62:	9202      	str	r2, [sp, #8]
 8022d64:	f8dc 2000 	ldr.w	r2, [ip]
 8022d68:	9203      	str	r2, [sp, #12]
 8022d6a:	9a01      	ldr	r2, [sp, #4]
 8022d6c:	2a00      	cmp	r2, #0
 8022d6e:	dc03      	bgt.n	8022d78 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 8022d70:	9a04      	ldr	r2, [sp, #16]
 8022d72:	2a00      	cmp	r2, #0
 8022d74:	f340 8135 	ble.w	8022fe2 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 8022d78:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8022d7a:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 8022d7e:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 8022d82:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8022d84:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 8022d88:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8022d8c:	2b00      	cmp	r3, #0
 8022d8e:	dd0d      	ble.n	8022dac <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8022d90:	1422      	asrs	r2, r4, #16
 8022d92:	d405      	bmi.n	8022da0 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8022d94:	4542      	cmp	r2, r8
 8022d96:	da03      	bge.n	8022da0 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8022d98:	1402      	asrs	r2, r0, #16
 8022d9a:	d401      	bmi.n	8022da0 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8022d9c:	42ba      	cmp	r2, r7
 8022d9e:	db06      	blt.n	8022dae <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 8022da0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8022da2:	4474      	add	r4, lr
 8022da4:	3b01      	subs	r3, #1
 8022da6:	3503      	adds	r5, #3
 8022da8:	4410      	add	r0, r2
 8022daa:	e7ef      	b.n	8022d8c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 8022dac:	d077      	beq.n	8022e9e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 8022dae:	1e5a      	subs	r2, r3, #1
 8022db0:	fb0e 4602 	mla	r6, lr, r2, r4
 8022db4:	1436      	asrs	r6, r6, #16
 8022db6:	d469      	bmi.n	8022e8c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8022db8:	4546      	cmp	r6, r8
 8022dba:	da67      	bge.n	8022e8c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8022dbc:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8022dbe:	fb06 0202 	mla	r2, r6, r2, r0
 8022dc2:	1412      	asrs	r2, r2, #16
 8022dc4:	d462      	bmi.n	8022e8c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8022dc6:	42ba      	cmp	r2, r7
 8022dc8:	da60      	bge.n	8022e8c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8022dca:	1cee      	adds	r6, r5, #3
 8022dcc:	4699      	mov	r9, r3
 8022dce:	f1b9 0f00 	cmp.w	r9, #0
 8022dd2:	dd5f      	ble.n	8022e94 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 8022dd4:	1422      	asrs	r2, r4, #16
 8022dd6:	9902      	ldr	r1, [sp, #8]
 8022dd8:	1407      	asrs	r7, r0, #16
 8022dda:	fb01 2707 	mla	r7, r1, r7, r2
 8022dde:	9903      	ldr	r1, [sp, #12]
 8022de0:	087a      	lsrs	r2, r7, #1
 8022de2:	5c8a      	ldrb	r2, [r1, r2]
 8022de4:	07f9      	lsls	r1, r7, #31
 8022de6:	bf54      	ite	pl
 8022de8:	f002 020f 	andpl.w	r2, r2, #15
 8022dec:	1112      	asrmi	r2, r2, #4
 8022dee:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8022df2:	b2d2      	uxtb	r2, r2
 8022df4:	2a00      	cmp	r2, #0
 8022df6:	d042      	beq.n	8022e7e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 8022df8:	497b      	ldr	r1, [pc, #492]	; (8022fe8 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c0>)
 8022dfa:	680f      	ldr	r7, [r1, #0]
 8022dfc:	9905      	ldr	r1, [sp, #20]
 8022dfe:	fa5f fb87 	uxtb.w	fp, r7
 8022e02:	434a      	muls	r2, r1
 8022e04:	f102 0801 	add.w	r8, r2, #1
 8022e08:	eb08 2222 	add.w	r2, r8, r2, asr #8
 8022e0c:	f816 8c03 	ldrb.w	r8, [r6, #-3]
 8022e10:	1212      	asrs	r2, r2, #8
 8022e12:	fa1f fa82 	uxth.w	sl, r2
 8022e16:	43d2      	mvns	r2, r2
 8022e18:	fb1b fb0a 	smulbb	fp, fp, sl
 8022e1c:	b2d2      	uxtb	r2, r2
 8022e1e:	fb08 b802 	mla	r8, r8, r2, fp
 8022e22:	fa1f f888 	uxth.w	r8, r8
 8022e26:	f108 0b01 	add.w	fp, r8, #1
 8022e2a:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8022e2e:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 8022e32:	f3c7 4707 	ubfx	r7, r7, #16, #8
 8022e36:	fb1b fb0a 	smulbb	fp, fp, sl
 8022e3a:	ea4f 2828 	mov.w	r8, r8, asr #8
 8022e3e:	fb17 fa0a 	smulbb	sl, r7, sl
 8022e42:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 8022e46:	f806 8c03 	strb.w	r8, [r6, #-3]
 8022e4a:	f816 8c02 	ldrb.w	r8, [r6, #-2]
 8022e4e:	fb07 aa02 	mla	sl, r7, r2, sl
 8022e52:	fb08 b802 	mla	r8, r8, r2, fp
 8022e56:	fa1f fa8a 	uxth.w	sl, sl
 8022e5a:	fa1f f888 	uxth.w	r8, r8
 8022e5e:	f10a 0701 	add.w	r7, sl, #1
 8022e62:	f108 0b01 	add.w	fp, r8, #1
 8022e66:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8022e6a:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8022e6e:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8022e72:	ea4f 2828 	mov.w	r8, r8, asr #8
 8022e76:	f806 ac01 	strb.w	sl, [r6, #-1]
 8022e7a:	f806 8c02 	strb.w	r8, [r6, #-2]
 8022e7e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8022e80:	4474      	add	r4, lr
 8022e82:	3603      	adds	r6, #3
 8022e84:	f109 39ff 	add.w	r9, r9, #4294967295
 8022e88:	4410      	add	r0, r2
 8022e8a:	e7a0      	b.n	8022dce <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 8022e8c:	2700      	movs	r7, #0
 8022e8e:	1bda      	subs	r2, r3, r7
 8022e90:	2a00      	cmp	r2, #0
 8022e92:	dc3e      	bgt.n	8022f12 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8022e94:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8022e98:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8022e9c:	441d      	add	r5, r3
 8022e9e:	9b01      	ldr	r3, [sp, #4]
 8022ea0:	2b00      	cmp	r3, #0
 8022ea2:	f340 809e 	ble.w	8022fe2 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 8022ea6:	ee30 0a04 	vadd.f32	s0, s0, s8
 8022eaa:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8022eac:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8022eb0:	eeb0 6a62 	vmov.f32	s12, s5
 8022eb4:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8022eb8:	ee31 1a05 	vadd.f32	s2, s2, s10
 8022ebc:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8022ec0:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 8022ec4:	eeb0 6a43 	vmov.f32	s12, s6
 8022ec8:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8022ecc:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 8022ed0:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8022ed4:	ee61 7a27 	vmul.f32	s15, s2, s15
 8022ed8:	ee77 2a62 	vsub.f32	s5, s14, s5
 8022edc:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8022ee0:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8022ee4:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8022ee8:	ee12 2a90 	vmov	r2, s5
 8022eec:	eef0 2a47 	vmov.f32	s5, s14
 8022ef0:	fb92 fef3 	sdiv	lr, r2, r3
 8022ef4:	ee13 2a10 	vmov	r2, s6
 8022ef8:	eeb0 3a67 	vmov.f32	s6, s15
 8022efc:	fb92 f3f3 	sdiv	r3, r2, r3
 8022f00:	9314      	str	r3, [sp, #80]	; 0x50
 8022f02:	9b01      	ldr	r3, [sp, #4]
 8022f04:	9a04      	ldr	r2, [sp, #16]
 8022f06:	3b01      	subs	r3, #1
 8022f08:	9301      	str	r3, [sp, #4]
 8022f0a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8022f0c:	bf08      	it	eq
 8022f0e:	4613      	moveq	r3, r2
 8022f10:	e72b      	b.n	8022d6a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 8022f12:	1426      	asrs	r6, r4, #16
 8022f14:	d460      	bmi.n	8022fd8 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8022f16:	f8dc 2008 	ldr.w	r2, [ip, #8]
 8022f1a:	42b2      	cmp	r2, r6
 8022f1c:	dd5c      	ble.n	8022fd8 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8022f1e:	ea5f 4820 	movs.w	r8, r0, asr #16
 8022f22:	d459      	bmi.n	8022fd8 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8022f24:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8022f28:	4542      	cmp	r2, r8
 8022f2a:	dd55      	ble.n	8022fd8 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8022f2c:	9a02      	ldr	r2, [sp, #8]
 8022f2e:	9903      	ldr	r1, [sp, #12]
 8022f30:	fb08 6602 	mla	r6, r8, r2, r6
 8022f34:	0872      	lsrs	r2, r6, #1
 8022f36:	07f6      	lsls	r6, r6, #31
 8022f38:	5c8a      	ldrb	r2, [r1, r2]
 8022f3a:	bf54      	ite	pl
 8022f3c:	f002 020f 	andpl.w	r2, r2, #15
 8022f40:	1112      	asrmi	r2, r2, #4
 8022f42:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8022f46:	b2d2      	uxtb	r2, r2
 8022f48:	2a00      	cmp	r2, #0
 8022f4a:	d045      	beq.n	8022fd8 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8022f4c:	4926      	ldr	r1, [pc, #152]	; (8022fe8 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c0>)
 8022f4e:	f8d1 8000 	ldr.w	r8, [r1]
 8022f52:	9905      	ldr	r1, [sp, #20]
 8022f54:	fa5f fb88 	uxtb.w	fp, r8
 8022f58:	434a      	muls	r2, r1
 8022f5a:	1c56      	adds	r6, r2, #1
 8022f5c:	eb06 2222 	add.w	r2, r6, r2, asr #8
 8022f60:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 8022f64:	1212      	asrs	r2, r2, #8
 8022f66:	f815 9006 	ldrb.w	r9, [r5, r6]
 8022f6a:	fa1f fa82 	uxth.w	sl, r2
 8022f6e:	43d2      	mvns	r2, r2
 8022f70:	fb1b fb0a 	smulbb	fp, fp, sl
 8022f74:	b2d2      	uxtb	r2, r2
 8022f76:	fb09 b902 	mla	r9, r9, r2, fp
 8022f7a:	fa1f f989 	uxth.w	r9, r9
 8022f7e:	f109 0b01 	add.w	fp, r9, #1
 8022f82:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8022f86:	f3c8 2b07 	ubfx	fp, r8, #8, #8
 8022f8a:	f3c8 4807 	ubfx	r8, r8, #16, #8
 8022f8e:	fb1b fb0a 	smulbb	fp, fp, sl
 8022f92:	ea4f 2929 	mov.w	r9, r9, asr #8
 8022f96:	fb18 fa0a 	smulbb	sl, r8, sl
 8022f9a:	f805 9006 	strb.w	r9, [r5, r6]
 8022f9e:	442e      	add	r6, r5
 8022fa0:	f896 8002 	ldrb.w	r8, [r6, #2]
 8022fa4:	f896 9001 	ldrb.w	r9, [r6, #1]
 8022fa8:	fb08 aa02 	mla	sl, r8, r2, sl
 8022fac:	fb09 b902 	mla	r9, r9, r2, fp
 8022fb0:	fa1f fa8a 	uxth.w	sl, sl
 8022fb4:	fa1f f989 	uxth.w	r9, r9
 8022fb8:	f10a 0801 	add.w	r8, sl, #1
 8022fbc:	f109 0b01 	add.w	fp, r9, #1
 8022fc0:	eb08 2a1a 	add.w	sl, r8, sl, lsr #8
 8022fc4:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8022fc8:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8022fcc:	ea4f 2929 	mov.w	r9, r9, asr #8
 8022fd0:	f886 a002 	strb.w	sl, [r6, #2]
 8022fd4:	f886 9001 	strb.w	r9, [r6, #1]
 8022fd8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8022fda:	4474      	add	r4, lr
 8022fdc:	3701      	adds	r7, #1
 8022fde:	4410      	add	r0, r2
 8022fe0:	e755      	b.n	8022e8e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x166>
 8022fe2:	b007      	add	sp, #28
 8022fe4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022fe8:	2400c8e4 	.word	0x2400c8e4

08022fec <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8022fec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022ff0:	b085      	sub	sp, #20
 8022ff2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8022ff6:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8022ff8:	9203      	str	r2, [sp, #12]
 8022ffa:	6860      	ldr	r0, [r4, #4]
 8022ffc:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 8023000:	9100      	str	r1, [sp, #0]
 8023002:	e9dd 2614 	ldrd	r2, r6, [sp, #80]	; 0x50
 8023006:	fb00 2606 	mla	r6, r0, r6, r2
 802300a:	6822      	ldr	r2, [r4, #0]
 802300c:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8023010:	4416      	add	r6, r2
 8023012:	f8dc 2008 	ldr.w	r2, [ip, #8]
 8023016:	3201      	adds	r2, #1
 8023018:	f022 0201 	bic.w	r2, r2, #1
 802301c:	9201      	str	r2, [sp, #4]
 802301e:	f8dc 2000 	ldr.w	r2, [ip]
 8023022:	9202      	str	r2, [sp, #8]
 8023024:	9a00      	ldr	r2, [sp, #0]
 8023026:	2a00      	cmp	r2, #0
 8023028:	dc03      	bgt.n	8023032 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 802302a:	9a03      	ldr	r2, [sp, #12]
 802302c:	2a00      	cmp	r2, #0
 802302e:	f340 8140 	ble.w	80232b2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c6>
 8023032:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8023034:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 8023038:	f502 4500 	add.w	r5, r2, #32768	; 0x8000
 802303c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 802303e:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 8023042:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 8023046:	2b00      	cmp	r3, #0
 8023048:	dd0e      	ble.n	8023068 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 802304a:	142a      	asrs	r2, r5, #16
 802304c:	d405      	bmi.n	802305a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 802304e:	4572      	cmp	r2, lr
 8023050:	da03      	bge.n	802305a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8023052:	1422      	asrs	r2, r4, #16
 8023054:	d401      	bmi.n	802305a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8023056:	42ba      	cmp	r2, r7
 8023058:	db07      	blt.n	802306a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 802305a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 802305c:	3b01      	subs	r3, #1
 802305e:	3603      	adds	r6, #3
 8023060:	4415      	add	r5, r2
 8023062:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8023064:	4414      	add	r4, r2
 8023066:	e7ee      	b.n	8023046 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 8023068:	d072      	beq.n	8023150 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 802306a:	1e5a      	subs	r2, r3, #1
 802306c:	9811      	ldr	r0, [sp, #68]	; 0x44
 802306e:	fb00 5002 	mla	r0, r0, r2, r5
 8023072:	1400      	asrs	r0, r0, #16
 8023074:	d463      	bmi.n	802313e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8023076:	4570      	cmp	r0, lr
 8023078:	da61      	bge.n	802313e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 802307a:	9812      	ldr	r0, [sp, #72]	; 0x48
 802307c:	fb00 4202 	mla	r2, r0, r2, r4
 8023080:	1412      	asrs	r2, r2, #16
 8023082:	d45c      	bmi.n	802313e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8023084:	42ba      	cmp	r2, r7
 8023086:	da5a      	bge.n	802313e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8023088:	1cf0      	adds	r0, r6, #3
 802308a:	469a      	mov	sl, r3
 802308c:	f1ba 0f00 	cmp.w	sl, #0
 8023090:	dd59      	ble.n	8023146 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15a>
 8023092:	142a      	asrs	r2, r5, #16
 8023094:	9901      	ldr	r1, [sp, #4]
 8023096:	1427      	asrs	r7, r4, #16
 8023098:	fb01 2707 	mla	r7, r1, r7, r2
 802309c:	9902      	ldr	r1, [sp, #8]
 802309e:	087a      	lsrs	r2, r7, #1
 80230a0:	5c8a      	ldrb	r2, [r1, r2]
 80230a2:	07f9      	lsls	r1, r7, #31
 80230a4:	bf54      	ite	pl
 80230a6:	f002 020f 	andpl.w	r2, r2, #15
 80230aa:	1112      	asrmi	r2, r2, #4
 80230ac:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 80230b0:	b2d2      	uxtb	r2, r2
 80230b2:	2a00      	cmp	r2, #0
 80230b4:	d03b      	beq.n	802312e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 80230b6:	4980      	ldr	r1, [pc, #512]	; (80232b8 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2cc>)
 80230b8:	2aff      	cmp	r2, #255	; 0xff
 80230ba:	680f      	ldr	r7, [r1, #0]
 80230bc:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 80230c0:	f3c7 2907 	ubfx	r9, r7, #8, #8
 80230c4:	b2ff      	uxtb	r7, r7
 80230c6:	f000 80ed 	beq.w	80232a4 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b8>
 80230ca:	fa1f f882 	uxth.w	r8, r2
 80230ce:	43d2      	mvns	r2, r2
 80230d0:	f810 ec03 	ldrb.w	lr, [r0, #-3]
 80230d4:	fb17 f708 	smulbb	r7, r7, r8
 80230d8:	b2d2      	uxtb	r2, r2
 80230da:	fb19 f908 	smulbb	r9, r9, r8
 80230de:	fb0e 7702 	mla	r7, lr, r2, r7
 80230e2:	fb1b f808 	smulbb	r8, fp, r8
 80230e6:	b2bf      	uxth	r7, r7
 80230e8:	f107 0e01 	add.w	lr, r7, #1
 80230ec:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 80230f0:	123f      	asrs	r7, r7, #8
 80230f2:	f800 7c03 	strb.w	r7, [r0, #-3]
 80230f6:	f810 7c02 	ldrb.w	r7, [r0, #-2]
 80230fa:	fb07 9902 	mla	r9, r7, r2, r9
 80230fe:	fa1f f989 	uxth.w	r9, r9
 8023102:	f109 0701 	add.w	r7, r9, #1
 8023106:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 802310a:	f810 7c01 	ldrb.w	r7, [r0, #-1]
 802310e:	fb07 8802 	mla	r8, r7, r2, r8
 8023112:	ea4f 2929 	mov.w	r9, r9, asr #8
 8023116:	fa1f f888 	uxth.w	r8, r8
 802311a:	f800 9c02 	strb.w	r9, [r0, #-2]
 802311e:	f108 0201 	add.w	r2, r8, #1
 8023122:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 8023126:	ea4f 2828 	mov.w	r8, r8, asr #8
 802312a:	f800 8c01 	strb.w	r8, [r0, #-1]
 802312e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8023130:	3003      	adds	r0, #3
 8023132:	f10a 3aff 	add.w	sl, sl, #4294967295
 8023136:	4415      	add	r5, r2
 8023138:	9a12      	ldr	r2, [sp, #72]	; 0x48
 802313a:	4414      	add	r4, r2
 802313c:	e7a6      	b.n	802308c <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 802313e:	2700      	movs	r7, #0
 8023140:	1bda      	subs	r2, r3, r7
 8023142:	2a00      	cmp	r2, #0
 8023144:	dc40      	bgt.n	80231c8 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>
 8023146:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 802314a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 802314e:	441e      	add	r6, r3
 8023150:	9b00      	ldr	r3, [sp, #0]
 8023152:	2b00      	cmp	r3, #0
 8023154:	f340 80ad 	ble.w	80232b2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c6>
 8023158:	ee30 0a04 	vadd.f32	s0, s0, s8
 802315c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802315e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8023162:	eeb0 6a62 	vmov.f32	s12, s5
 8023166:	eec6 7a80 	vdiv.f32	s15, s13, s0
 802316a:	ee31 1a05 	vadd.f32	s2, s2, s10
 802316e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8023172:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 8023176:	eeb0 6a43 	vmov.f32	s12, s6
 802317a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 802317e:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 8023182:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8023186:	ee61 7a27 	vmul.f32	s15, s2, s15
 802318a:	ee77 2a62 	vsub.f32	s5, s14, s5
 802318e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8023192:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8023196:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802319a:	ee12 2a90 	vmov	r2, s5
 802319e:	eef0 2a47 	vmov.f32	s5, s14
 80231a2:	fb92 f3f3 	sdiv	r3, r2, r3
 80231a6:	ee13 2a10 	vmov	r2, s6
 80231aa:	9311      	str	r3, [sp, #68]	; 0x44
 80231ac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80231ae:	eeb0 3a67 	vmov.f32	s6, s15
 80231b2:	fb92 f3f3 	sdiv	r3, r2, r3
 80231b6:	9312      	str	r3, [sp, #72]	; 0x48
 80231b8:	9b00      	ldr	r3, [sp, #0]
 80231ba:	9a03      	ldr	r2, [sp, #12]
 80231bc:	3b01      	subs	r3, #1
 80231be:	9300      	str	r3, [sp, #0]
 80231c0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80231c2:	bf08      	it	eq
 80231c4:	4613      	moveq	r3, r2
 80231c6:	e72d      	b.n	8023024 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 80231c8:	1428      	asrs	r0, r5, #16
 80231ca:	d45c      	bmi.n	8023286 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 80231cc:	f8dc 2008 	ldr.w	r2, [ip, #8]
 80231d0:	4282      	cmp	r2, r0
 80231d2:	dd58      	ble.n	8023286 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 80231d4:	ea5f 4e24 	movs.w	lr, r4, asr #16
 80231d8:	d455      	bmi.n	8023286 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 80231da:	f8dc 200c 	ldr.w	r2, [ip, #12]
 80231de:	4572      	cmp	r2, lr
 80231e0:	dd51      	ble.n	8023286 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 80231e2:	9a01      	ldr	r2, [sp, #4]
 80231e4:	9902      	ldr	r1, [sp, #8]
 80231e6:	fb0e 0002 	mla	r0, lr, r2, r0
 80231ea:	0842      	lsrs	r2, r0, #1
 80231ec:	07c0      	lsls	r0, r0, #31
 80231ee:	5c8a      	ldrb	r2, [r1, r2]
 80231f0:	bf54      	ite	pl
 80231f2:	f002 020f 	andpl.w	r2, r2, #15
 80231f6:	1112      	asrmi	r2, r2, #4
 80231f8:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 80231fc:	b2d2      	uxtb	r2, r2
 80231fe:	2a00      	cmp	r2, #0
 8023200:	d041      	beq.n	8023286 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8023202:	492d      	ldr	r1, [pc, #180]	; (80232b8 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2cc>)
 8023204:	2aff      	cmp	r2, #255	; 0xff
 8023206:	6808      	ldr	r0, [r1, #0]
 8023208:	f3c0 4b07 	ubfx	fp, r0, #16, #8
 802320c:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 8023210:	fa5f fe80 	uxtb.w	lr, r0
 8023214:	ea4f 0047 	mov.w	r0, r7, lsl #1
 8023218:	d03b      	beq.n	8023292 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 802321a:	fa1f f982 	uxth.w	r9, r2
 802321e:	4438      	add	r0, r7
 8023220:	43d2      	mvns	r2, r2
 8023222:	f816 8000 	ldrb.w	r8, [r6, r0]
 8023226:	fb1e fe09 	smulbb	lr, lr, r9
 802322a:	fb1a fa09 	smulbb	sl, sl, r9
 802322e:	b2d2      	uxtb	r2, r2
 8023230:	fb1b f909 	smulbb	r9, fp, r9
 8023234:	fb08 ee02 	mla	lr, r8, r2, lr
 8023238:	fa1f fe8e 	uxth.w	lr, lr
 802323c:	f10e 0801 	add.w	r8, lr, #1
 8023240:	eb08 2e1e 	add.w	lr, r8, lr, lsr #8
 8023244:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8023248:	f806 e000 	strb.w	lr, [r6, r0]
 802324c:	4430      	add	r0, r6
 802324e:	f890 e001 	ldrb.w	lr, [r0, #1]
 8023252:	fb0e aa02 	mla	sl, lr, r2, sl
 8023256:	fa1f fa8a 	uxth.w	sl, sl
 802325a:	f10a 0e01 	add.w	lr, sl, #1
 802325e:	eb0e 2a1a 	add.w	sl, lr, sl, lsr #8
 8023262:	f890 e002 	ldrb.w	lr, [r0, #2]
 8023266:	fb0e 9902 	mla	r9, lr, r2, r9
 802326a:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 802326e:	fa1f f989 	uxth.w	r9, r9
 8023272:	f880 a001 	strb.w	sl, [r0, #1]
 8023276:	f109 0201 	add.w	r2, r9, #1
 802327a:	eb02 2919 	add.w	r9, r2, r9, lsr #8
 802327e:	ea4f 2929 	mov.w	r9, r9, asr #8
 8023282:	f880 9002 	strb.w	r9, [r0, #2]
 8023286:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8023288:	3701      	adds	r7, #1
 802328a:	4415      	add	r5, r2
 802328c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 802328e:	4414      	add	r4, r2
 8023290:	e756      	b.n	8023140 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 8023292:	4438      	add	r0, r7
 8023294:	f806 e000 	strb.w	lr, [r6, r0]
 8023298:	4430      	add	r0, r6
 802329a:	f880 a001 	strb.w	sl, [r0, #1]
 802329e:	f880 b002 	strb.w	fp, [r0, #2]
 80232a2:	e7f0      	b.n	8023286 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 80232a4:	f800 7c03 	strb.w	r7, [r0, #-3]
 80232a8:	f800 9c02 	strb.w	r9, [r0, #-2]
 80232ac:	f800 bc01 	strb.w	fp, [r0, #-1]
 80232b0:	e73d      	b.n	802312e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 80232b2:	b005      	add	sp, #20
 80232b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80232b8:	2400c8e4 	.word	0x2400c8e4

080232bc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev>:
 80232bc:	4770      	bx	lr

080232be <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev>:
 80232be:	4770      	bx	lr

080232c0 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev>:
 80232c0:	4770      	bx	lr

080232c2 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev>:
 80232c2:	4770      	bx	lr

080232c4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 80232c4:	4770      	bx	lr

080232c6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 80232c6:	4770      	bx	lr

080232c8 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 80232c8:	4770      	bx	lr

080232ca <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 80232ca:	4770      	bx	lr

080232cc <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 80232cc:	4770      	bx	lr

080232ce <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 80232ce:	4770      	bx	lr

080232d0 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 80232d0:	4770      	bx	lr

080232d2 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 80232d2:	4770      	bx	lr

080232d4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 80232d4:	4770      	bx	lr

080232d6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 80232d6:	4770      	bx	lr

080232d8 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 80232d8:	4770      	bx	lr

080232da <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 80232da:	4770      	bx	lr

080232dc <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 80232dc:	4770      	bx	lr

080232de <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 80232de:	4770      	bx	lr

080232e0 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 80232e0:	4770      	bx	lr

080232e2 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 80232e2:	4770      	bx	lr

080232e4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 80232e4:	2bff      	cmp	r3, #255	; 0xff
 80232e6:	b508      	push	{r3, lr}
 80232e8:	d04f      	beq.n	802338a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa6>
 80232ea:	2a2c      	cmp	r2, #44	; 0x2c
 80232ec:	d032      	beq.n	8023354 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x70>
 80232ee:	d80f      	bhi.n	8023310 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x2c>
 80232f0:	2a08      	cmp	r2, #8
 80232f2:	d046      	beq.n	8023382 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 80232f4:	d805      	bhi.n	8023302 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1e>
 80232f6:	2a04      	cmp	r2, #4
 80232f8:	d041      	beq.n	802337e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 80232fa:	2a05      	cmp	r2, #5
 80232fc:	d03d      	beq.n	802337a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x96>
 80232fe:	2000      	movs	r0, #0
 8023300:	e027      	b.n	8023352 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8023302:	2a0a      	cmp	r2, #10
 8023304:	d03d      	beq.n	8023382 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 8023306:	d301      	bcc.n	802330c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x28>
 8023308:	2a0b      	cmp	r2, #11
 802330a:	d1f8      	bne.n	80232fe <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 802330c:	6c00      	ldr	r0, [r0, #64]	; 0x40
 802330e:	e020      	b.n	8023352 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8023310:	2a30      	cmp	r2, #48	; 0x30
 8023312:	d038      	beq.n	8023386 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 8023314:	d808      	bhi.n	8023328 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x44>
 8023316:	2a2e      	cmp	r2, #46	; 0x2e
 8023318:	684b      	ldr	r3, [r1, #4]
 802331a:	d029      	beq.n	8023370 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8c>
 802331c:	d90b      	bls.n	8023336 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x52>
 802331e:	781b      	ldrb	r3, [r3, #0]
 8023320:	2b00      	cmp	r3, #0
 8023322:	d1ec      	bne.n	80232fe <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 8023324:	6a00      	ldr	r0, [r0, #32]
 8023326:	e014      	b.n	8023352 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8023328:	2a32      	cmp	r2, #50	; 0x32
 802332a:	d02c      	beq.n	8023386 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 802332c:	d301      	bcc.n	8023332 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4e>
 802332e:	2a33      	cmp	r2, #51	; 0x33
 8023330:	d1e5      	bne.n	80232fe <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 8023332:	6d00      	ldr	r0, [r0, #80]	; 0x50
 8023334:	e00d      	b.n	8023352 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8023336:	781b      	ldrb	r3, [r3, #0]
 8023338:	2b01      	cmp	r3, #1
 802333a:	d009      	beq.n	8023350 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6c>
 802333c:	d3f2      	bcc.n	8023324 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x40>
 802333e:	2b02      	cmp	r3, #2
 8023340:	d1dd      	bne.n	80232fe <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 8023342:	4b39      	ldr	r3, [pc, #228]	; (8023428 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x144>)
 8023344:	f240 4109 	movw	r1, #1033	; 0x409
 8023348:	4a38      	ldr	r2, [pc, #224]	; (802342c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x148>)
 802334a:	4839      	ldr	r0, [pc, #228]	; (8023430 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x14c>)
 802334c:	f008 fa94 	bl	802b878 <__assert_func>
 8023350:	6900      	ldr	r0, [r0, #16]
 8023352:	bd08      	pop	{r3, pc}
 8023354:	684b      	ldr	r3, [r1, #4]
 8023356:	781b      	ldrb	r3, [r3, #0]
 8023358:	2b01      	cmp	r3, #1
 802335a:	d007      	beq.n	802336c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x88>
 802335c:	d30b      	bcc.n	8023376 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x92>
 802335e:	2b02      	cmp	r3, #2
 8023360:	d1cd      	bne.n	80232fe <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 8023362:	4b31      	ldr	r3, [pc, #196]	; (8023428 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x144>)
 8023364:	f240 4115 	movw	r1, #1045	; 0x415
 8023368:	4a30      	ldr	r2, [pc, #192]	; (802342c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x148>)
 802336a:	e7ee      	b.n	802334a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 802336c:	6880      	ldr	r0, [r0, #8]
 802336e:	e7f0      	b.n	8023352 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8023370:	781b      	ldrb	r3, [r3, #0]
 8023372:	2b00      	cmp	r3, #0
 8023374:	d1c3      	bne.n	80232fe <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 8023376:	6980      	ldr	r0, [r0, #24]
 8023378:	e7eb      	b.n	8023352 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 802337a:	6b00      	ldr	r0, [r0, #48]	; 0x30
 802337c:	e7e9      	b.n	8023352 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 802337e:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8023380:	e7e7      	b.n	8023352 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8023382:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8023384:	e7e5      	b.n	8023352 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8023386:	6c80      	ldr	r0, [r0, #72]	; 0x48
 8023388:	e7e3      	b.n	8023352 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 802338a:	2a2c      	cmp	r2, #44	; 0x2c
 802338c:	d030      	beq.n	80233f0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x10c>
 802338e:	d80f      	bhi.n	80233b0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xcc>
 8023390:	2a08      	cmp	r2, #8
 8023392:	d044      	beq.n	802341e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13a>
 8023394:	d805      	bhi.n	80233a2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xbe>
 8023396:	2a04      	cmp	r2, #4
 8023398:	d03f      	beq.n	802341a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x136>
 802339a:	2a05      	cmp	r2, #5
 802339c:	d1af      	bne.n	80232fe <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 802339e:	6b40      	ldr	r0, [r0, #52]	; 0x34
 80233a0:	e7d7      	b.n	8023352 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 80233a2:	2a0a      	cmp	r2, #10
 80233a4:	d03b      	beq.n	802341e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13a>
 80233a6:	d301      	bcc.n	80233ac <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc8>
 80233a8:	2a0b      	cmp	r2, #11
 80233aa:	d1a8      	bne.n	80232fe <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 80233ac:	6c40      	ldr	r0, [r0, #68]	; 0x44
 80233ae:	e7d0      	b.n	8023352 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 80233b0:	2a30      	cmp	r2, #48	; 0x30
 80233b2:	d036      	beq.n	8023422 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 80233b4:	d808      	bhi.n	80233c8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe4>
 80233b6:	2a2e      	cmp	r2, #46	; 0x2e
 80233b8:	684b      	ldr	r3, [r1, #4]
 80233ba:	d028      	beq.n	802340e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x12a>
 80233bc:	d90b      	bls.n	80233d6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xf2>
 80233be:	781b      	ldrb	r3, [r3, #0]
 80233c0:	2b00      	cmp	r3, #0
 80233c2:	d19c      	bne.n	80232fe <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 80233c4:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80233c6:	e7c4      	b.n	8023352 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 80233c8:	2a32      	cmp	r2, #50	; 0x32
 80233ca:	d02a      	beq.n	8023422 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 80233cc:	d301      	bcc.n	80233d2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xee>
 80233ce:	2a33      	cmp	r2, #51	; 0x33
 80233d0:	d195      	bne.n	80232fe <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 80233d2:	6d40      	ldr	r0, [r0, #84]	; 0x54
 80233d4:	e7bd      	b.n	8023352 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 80233d6:	781b      	ldrb	r3, [r3, #0]
 80233d8:	2b01      	cmp	r3, #1
 80233da:	d007      	beq.n	80233ec <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x108>
 80233dc:	d3f2      	bcc.n	80233c4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe0>
 80233de:	2b02      	cmp	r3, #2
 80233e0:	d18d      	bne.n	80232fe <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 80233e2:	4b11      	ldr	r3, [pc, #68]	; (8023428 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x144>)
 80233e4:	f240 4146 	movw	r1, #1094	; 0x446
 80233e8:	4a10      	ldr	r2, [pc, #64]	; (802342c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x148>)
 80233ea:	e7ae      	b.n	802334a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 80233ec:	6940      	ldr	r0, [r0, #20]
 80233ee:	e7b0      	b.n	8023352 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 80233f0:	684b      	ldr	r3, [r1, #4]
 80233f2:	781b      	ldrb	r3, [r3, #0]
 80233f4:	2b01      	cmp	r3, #1
 80233f6:	d008      	beq.n	802340a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x126>
 80233f8:	d30d      	bcc.n	8023416 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x132>
 80233fa:	2b02      	cmp	r3, #2
 80233fc:	f47f af7f 	bne.w	80232fe <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 8023400:	4b09      	ldr	r3, [pc, #36]	; (8023428 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x144>)
 8023402:	f240 4152 	movw	r1, #1106	; 0x452
 8023406:	4a09      	ldr	r2, [pc, #36]	; (802342c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x148>)
 8023408:	e79f      	b.n	802334a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 802340a:	68c0      	ldr	r0, [r0, #12]
 802340c:	e7a1      	b.n	8023352 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 802340e:	781b      	ldrb	r3, [r3, #0]
 8023410:	2b00      	cmp	r3, #0
 8023412:	f47f af74 	bne.w	80232fe <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 8023416:	69c0      	ldr	r0, [r0, #28]
 8023418:	e79b      	b.n	8023352 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 802341a:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 802341c:	e799      	b.n	8023352 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 802341e:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 8023420:	e797      	b.n	8023352 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8023422:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8023424:	e795      	b.n	8023352 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8023426:	bf00      	nop
 8023428:	0803109c 	.word	0x0803109c
 802342c:	0803184f 	.word	0x0803184f
 8023430:	080310e8 	.word	0x080310e8

08023434 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv>:
 8023434:	b508      	push	{r3, lr}
 8023436:	4b06      	ldr	r3, [pc, #24]	; (8023450 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x1c>)
 8023438:	8818      	ldrh	r0, [r3, #0]
 802343a:	b928      	cbnz	r0, 8023448 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x14>
 802343c:	4b05      	ldr	r3, [pc, #20]	; (8023454 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x20>)
 802343e:	214d      	movs	r1, #77	; 0x4d
 8023440:	4a05      	ldr	r2, [pc, #20]	; (8023458 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x24>)
 8023442:	4806      	ldr	r0, [pc, #24]	; (802345c <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x28>)
 8023444:	f008 fa18 	bl	802b878 <__assert_func>
 8023448:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 802344c:	b280      	uxth	r0, r0
 802344e:	bd08      	pop	{r3, pc}
 8023450:	2400c8b6 	.word	0x2400c8b6
 8023454:	08031335 	.word	0x08031335
 8023458:	08031814 	.word	0x08031814
 802345c:	08031377 	.word	0x08031377

08023460 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 8023460:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8023464:	b08b      	sub	sp, #44	; 0x2c
 8023466:	460d      	mov	r5, r1
 8023468:	4616      	mov	r6, r2
 802346a:	f89d 8048 	ldrb.w	r8, [sp, #72]	; 0x48
 802346e:	f1b8 0f00 	cmp.w	r8, #0
 8023472:	d047      	beq.n	8023504 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa4>
 8023474:	6810      	ldr	r0, [r2, #0]
 8023476:	ac06      	add	r4, sp, #24
 8023478:	6851      	ldr	r1, [r2, #4]
 802347a:	4f51      	ldr	r7, [pc, #324]	; (80235c0 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x160>)
 802347c:	c403      	stmia	r4!, {r0, r1}
 802347e:	6818      	ldr	r0, [r3, #0]
 8023480:	ac08      	add	r4, sp, #32
 8023482:	6859      	ldr	r1, [r3, #4]
 8023484:	c403      	stmia	r4!, {r0, r1}
 8023486:	a806      	add	r0, sp, #24
 8023488:	f7fb f8a8 	bl	801e5dc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802348c:	4631      	mov	r1, r6
 802348e:	a808      	add	r0, sp, #32
 8023490:	f7fb f8e8 	bl	801e664 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8023494:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 8023498:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 802349c:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 80234a0:	6838      	ldr	r0, [r7, #0]
 80234a2:	fb11 2103 	smlabb	r1, r1, r3, r2
 80234a6:	f9bd 6024 	ldrsh.w	r6, [sp, #36]	; 0x24
 80234aa:	f9bd 4026 	ldrsh.w	r4, [sp, #38]	; 0x26
 80234ae:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80234b2:	440d      	add	r5, r1
 80234b4:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 80234b8:	440a      	add	r2, r1
 80234ba:	f8ad 2020 	strh.w	r2, [sp, #32]
 80234be:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 80234c2:	4413      	add	r3, r2
 80234c4:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 80234c8:	6803      	ldr	r3, [r0, #0]
 80234ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80234cc:	4798      	blx	r3
 80234ce:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 80234d2:	d01a      	beq.n	802350a <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xaa>
 80234d4:	f010 0f04 	tst.w	r0, #4
 80234d8:	6838      	ldr	r0, [r7, #0]
 80234da:	d019      	beq.n	8023510 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb0>
 80234dc:	2100      	movs	r1, #0
 80234de:	6807      	ldr	r7, [r0, #0]
 80234e0:	b2a4      	uxth	r4, r4
 80234e2:	f8cd 800c 	str.w	r8, [sp, #12]
 80234e6:	b2b6      	uxth	r6, r6
 80234e8:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 80234ec:	9401      	str	r4, [sp, #4]
 80234ee:	9600      	str	r6, [sp, #0]
 80234f0:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 80234f4:	e9cd 1104 	strd	r1, r1, [sp, #16]
 80234f8:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 80234fc:	9102      	str	r1, [sp, #8]
 80234fe:	4629      	mov	r1, r5
 8023500:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 8023502:	47a0      	blx	r4
 8023504:	b00b      	add	sp, #44	; 0x2c
 8023506:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 802350a:	f010 0f01 	tst.w	r0, #1
 802350e:	e7e3      	b.n	80234d8 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x78>
 8023510:	6803      	ldr	r3, [r0, #0]
 8023512:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8023514:	4798      	blx	r3
 8023516:	4a2b      	ldr	r2, [pc, #172]	; (80235c4 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x164>)
 8023518:	f9bd 1022 	ldrsh.w	r1, [sp, #34]	; 0x22
 802351c:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8023520:	8813      	ldrh	r3, [r2, #0]
 8023522:	f9bd c020 	ldrsh.w	ip, [sp, #32]
 8023526:	fb03 f404 	mul.w	r4, r3, r4
 802352a:	fb03 c101 	mla	r1, r3, r1, ip
 802352e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8023532:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8023536:	4408      	add	r0, r1
 8023538:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 802353c:	4404      	add	r4, r0
 802353e:	d02e      	beq.n	802359e <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x13e>
 8023540:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
 8023544:	1b9b      	subs	r3, r3, r6
 8023546:	f1c8 0cff 	rsb	ip, r8, #255	; 0xff
 802354a:	1b96      	subs	r6, r2, r6
 802354c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8023550:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8023554:	42a0      	cmp	r0, r4
 8023556:	d22d      	bcs.n	80235b4 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x154>
 8023558:	eb00 0e01 	add.w	lr, r0, r1
 802355c:	4570      	cmp	r0, lr
 802355e:	d210      	bcs.n	8023582 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x122>
 8023560:	f890 9000 	ldrb.w	r9, [r0]
 8023564:	f815 2b01 	ldrb.w	r2, [r5], #1
 8023568:	fb19 f90c 	smulbb	r9, r9, ip
 802356c:	fb02 9208 	mla	r2, r2, r8, r9
 8023570:	b292      	uxth	r2, r2
 8023572:	f102 0901 	add.w	r9, r2, #1
 8023576:	eb09 2212 	add.w	r2, r9, r2, lsr #8
 802357a:	1212      	asrs	r2, r2, #8
 802357c:	f800 2b01 	strb.w	r2, [r0], #1
 8023580:	e7ec      	b.n	802355c <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xfc>
 8023582:	4418      	add	r0, r3
 8023584:	4435      	add	r5, r6
 8023586:	e7e5      	b.n	8023554 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xf4>
 8023588:	8813      	ldrh	r3, [r2, #0]
 802358a:	1b9b      	subs	r3, r3, r6
 802358c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8023590:	4418      	add	r0, r3
 8023592:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8023596:	1b9b      	subs	r3, r3, r6
 8023598:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 802359c:	441d      	add	r5, r3
 802359e:	42a0      	cmp	r0, r4
 80235a0:	d208      	bcs.n	80235b4 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x154>
 80235a2:	eb00 0c01 	add.w	ip, r0, r1
 80235a6:	4560      	cmp	r0, ip
 80235a8:	d2ee      	bcs.n	8023588 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x128>
 80235aa:	f815 3b01 	ldrb.w	r3, [r5], #1
 80235ae:	f800 3b01 	strb.w	r3, [r0], #1
 80235b2:	e7f8      	b.n	80235a6 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x146>
 80235b4:	6838      	ldr	r0, [r7, #0]
 80235b6:	6803      	ldr	r3, [r0, #0]
 80235b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80235ba:	4798      	blx	r3
 80235bc:	e7a2      	b.n	8023504 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa4>
 80235be:	bf00      	nop
 80235c0:	2400c8bc 	.word	0x2400c8bc
 80235c4:	2400c8b6 	.word	0x2400c8b6

080235c8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 80235c8:	b510      	push	{r4, lr}
 80235ca:	4604      	mov	r4, r0
 80235cc:	2104      	movs	r1, #4
 80235ce:	f007 ff7e 	bl	802b4ce <_ZdlPvj>
 80235d2:	4620      	mov	r0, r4
 80235d4:	bd10      	pop	{r4, pc}

080235d6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 80235d6:	b510      	push	{r4, lr}
 80235d8:	4604      	mov	r4, r0
 80235da:	2104      	movs	r1, #4
 80235dc:	f007 ff77 	bl	802b4ce <_ZdlPvj>
 80235e0:	4620      	mov	r0, r4
 80235e2:	bd10      	pop	{r4, pc}

080235e4 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 80235e4:	b510      	push	{r4, lr}
 80235e6:	4604      	mov	r4, r0
 80235e8:	2104      	movs	r1, #4
 80235ea:	f007 ff70 	bl	802b4ce <_ZdlPvj>
 80235ee:	4620      	mov	r0, r4
 80235f0:	bd10      	pop	{r4, pc}

080235f2 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 80235f2:	b510      	push	{r4, lr}
 80235f4:	4604      	mov	r4, r0
 80235f6:	2104      	movs	r1, #4
 80235f8:	f007 ff69 	bl	802b4ce <_ZdlPvj>
 80235fc:	4620      	mov	r0, r4
 80235fe:	bd10      	pop	{r4, pc}

08023600 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 8023600:	b510      	push	{r4, lr}
 8023602:	4604      	mov	r4, r0
 8023604:	2104      	movs	r1, #4
 8023606:	f007 ff62 	bl	802b4ce <_ZdlPvj>
 802360a:	4620      	mov	r0, r4
 802360c:	bd10      	pop	{r4, pc}

0802360e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 802360e:	b510      	push	{r4, lr}
 8023610:	4604      	mov	r4, r0
 8023612:	2104      	movs	r1, #4
 8023614:	f007 ff5b 	bl	802b4ce <_ZdlPvj>
 8023618:	4620      	mov	r0, r4
 802361a:	bd10      	pop	{r4, pc}

0802361c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 802361c:	b510      	push	{r4, lr}
 802361e:	4604      	mov	r4, r0
 8023620:	2104      	movs	r1, #4
 8023622:	f007 ff54 	bl	802b4ce <_ZdlPvj>
 8023626:	4620      	mov	r0, r4
 8023628:	bd10      	pop	{r4, pc}

0802362a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 802362a:	b510      	push	{r4, lr}
 802362c:	4604      	mov	r4, r0
 802362e:	2104      	movs	r1, #4
 8023630:	f007 ff4d 	bl	802b4ce <_ZdlPvj>
 8023634:	4620      	mov	r0, r4
 8023636:	bd10      	pop	{r4, pc}

08023638 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 8023638:	b510      	push	{r4, lr}
 802363a:	4604      	mov	r4, r0
 802363c:	2104      	movs	r1, #4
 802363e:	f007 ff46 	bl	802b4ce <_ZdlPvj>
 8023642:	4620      	mov	r0, r4
 8023644:	bd10      	pop	{r4, pc}

08023646 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 8023646:	b510      	push	{r4, lr}
 8023648:	4604      	mov	r4, r0
 802364a:	2104      	movs	r1, #4
 802364c:	f007 ff3f 	bl	802b4ce <_ZdlPvj>
 8023650:	4620      	mov	r0, r4
 8023652:	bd10      	pop	{r4, pc}

08023654 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 8023654:	b510      	push	{r4, lr}
 8023656:	4604      	mov	r4, r0
 8023658:	2104      	movs	r1, #4
 802365a:	f007 ff38 	bl	802b4ce <_ZdlPvj>
 802365e:	4620      	mov	r0, r4
 8023660:	bd10      	pop	{r4, pc}

08023662 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 8023662:	b510      	push	{r4, lr}
 8023664:	4604      	mov	r4, r0
 8023666:	2104      	movs	r1, #4
 8023668:	f007 ff31 	bl	802b4ce <_ZdlPvj>
 802366c:	4620      	mov	r0, r4
 802366e:	bd10      	pop	{r4, pc}

08023670 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 8023670:	b510      	push	{r4, lr}
 8023672:	4604      	mov	r4, r0
 8023674:	2104      	movs	r1, #4
 8023676:	f007 ff2a 	bl	802b4ce <_ZdlPvj>
 802367a:	4620      	mov	r0, r4
 802367c:	bd10      	pop	{r4, pc}

0802367e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 802367e:	b510      	push	{r4, lr}
 8023680:	4604      	mov	r4, r0
 8023682:	2104      	movs	r1, #4
 8023684:	f007 ff23 	bl	802b4ce <_ZdlPvj>
 8023688:	4620      	mov	r0, r4
 802368a:	bd10      	pop	{r4, pc}

0802368c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 802368c:	b510      	push	{r4, lr}
 802368e:	4604      	mov	r4, r0
 8023690:	2104      	movs	r1, #4
 8023692:	f007 ff1c 	bl	802b4ce <_ZdlPvj>
 8023696:	4620      	mov	r0, r4
 8023698:	bd10      	pop	{r4, pc}

0802369a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 802369a:	b510      	push	{r4, lr}
 802369c:	4604      	mov	r4, r0
 802369e:	2104      	movs	r1, #4
 80236a0:	f007 ff15 	bl	802b4ce <_ZdlPvj>
 80236a4:	4620      	mov	r0, r4
 80236a6:	bd10      	pop	{r4, pc}

080236a8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD0Ev>:
 80236a8:	b510      	push	{r4, lr}
 80236aa:	4604      	mov	r4, r0
 80236ac:	2104      	movs	r1, #4
 80236ae:	f007 ff0e 	bl	802b4ce <_ZdlPvj>
 80236b2:	4620      	mov	r0, r4
 80236b4:	bd10      	pop	{r4, pc}

080236b6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD0Ev>:
 80236b6:	b510      	push	{r4, lr}
 80236b8:	4604      	mov	r4, r0
 80236ba:	2104      	movs	r1, #4
 80236bc:	f007 ff07 	bl	802b4ce <_ZdlPvj>
 80236c0:	4620      	mov	r0, r4
 80236c2:	bd10      	pop	{r4, pc}

080236c4 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD0Ev>:
 80236c4:	b510      	push	{r4, lr}
 80236c6:	4604      	mov	r4, r0
 80236c8:	2104      	movs	r1, #4
 80236ca:	f007 ff00 	bl	802b4ce <_ZdlPvj>
 80236ce:	4620      	mov	r0, r4
 80236d0:	bd10      	pop	{r4, pc}

080236d2 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD0Ev>:
 80236d2:	b510      	push	{r4, lr}
 80236d4:	4604      	mov	r4, r0
 80236d6:	2104      	movs	r1, #4
 80236d8:	f007 fef9 	bl	802b4ce <_ZdlPvj>
 80236dc:	4620      	mov	r0, r4
 80236de:	bd10      	pop	{r4, pc}

080236e0 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 80236e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80236e4:	4db4      	ldr	r5, [pc, #720]	; (80239b8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2d8>)
 80236e6:	4690      	mov	r8, r2
 80236e8:	b08d      	sub	sp, #52	; 0x34
 80236ea:	4604      	mov	r4, r0
 80236ec:	682a      	ldr	r2, [r5, #0]
 80236ee:	4689      	mov	r9, r1
 80236f0:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
 80236f4:	2a02      	cmp	r2, #2
 80236f6:	d106      	bne.n	8023706 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26>
 80236f8:	4bb0      	ldr	r3, [pc, #704]	; (80239bc <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2dc>)
 80236fa:	f240 11ed 	movw	r1, #493	; 0x1ed
 80236fe:	4ab0      	ldr	r2, [pc, #704]	; (80239c0 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2e0>)
 8023700:	48b0      	ldr	r0, [pc, #704]	; (80239c4 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2e4>)
 8023702:	f008 f8b9 	bl	802b878 <__assert_func>
 8023706:	ae0c      	add	r6, sp, #48	; 0x30
 8023708:	f826 3d1c 	strh.w	r3, [r6, #-28]!
 802370c:	4630      	mov	r0, r6
 802370e:	f7fe f985 	bl	8021a1c <_ZNK8touchgfx6Bitmap9getFormatEv>
 8023712:	6823      	ldr	r3, [r4, #0]
 8023714:	4607      	mov	r7, r0
 8023716:	4620      	mov	r0, r4
 8023718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802371a:	4798      	blx	r3
 802371c:	4287      	cmp	r7, r0
 802371e:	d004      	beq.n	802372a <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x4a>
 8023720:	4ba9      	ldr	r3, [pc, #676]	; (80239c8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2e8>)
 8023722:	f240 11ef 	movw	r1, #495	; 0x1ef
 8023726:	4aa6      	ldr	r2, [pc, #664]	; (80239c0 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2e0>)
 8023728:	e7ea      	b.n	8023700 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 802372a:	4630      	mov	r0, r6
 802372c:	f7fe f8ec 	bl	8021908 <_ZNK8touchgfx6Bitmap7getDataEv>
 8023730:	4607      	mov	r7, r0
 8023732:	b920      	cbnz	r0, 802373e <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x5e>
 8023734:	4ba5      	ldr	r3, [pc, #660]	; (80239cc <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2ec>)
 8023736:	f240 11f1 	movw	r1, #497	; 0x1f1
 802373a:	4aa1      	ldr	r2, [pc, #644]	; (80239c0 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2e0>)
 802373c:	e7e0      	b.n	8023700 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 802373e:	f8d8 0000 	ldr.w	r0, [r8]
 8023742:	ab06      	add	r3, sp, #24
 8023744:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8023748:	f9b8 a000 	ldrsh.w	sl, [r8]
 802374c:	c303      	stmia	r3!, {r0, r1}
 802374e:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8023752:	ab08      	add	r3, sp, #32
 8023754:	f8d9 0000 	ldr.w	r0, [r9]
 8023758:	f9b8 9002 	ldrsh.w	r9, [r8, #2]
 802375c:	c303      	stmia	r3!, {r0, r1}
 802375e:	4630      	mov	r0, r6
 8023760:	f7fd ffca 	bl	80216f8 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8023764:	4680      	mov	r8, r0
 8023766:	4630      	mov	r0, r6
 8023768:	f7fe f800 	bl	802176c <_ZNK8touchgfx6Bitmap9getHeightEv>
 802376c:	f8ad 902a 	strh.w	r9, [sp, #42]	; 0x2a
 8023770:	f10d 0920 	add.w	r9, sp, #32
 8023774:	f8ad 002e 	strh.w	r0, [sp, #46]	; 0x2e
 8023778:	a806      	add	r0, sp, #24
 802377a:	f8ad a028 	strh.w	sl, [sp, #40]	; 0x28
 802377e:	f8ad 802c 	strh.w	r8, [sp, #44]	; 0x2c
 8023782:	f7fa ff2b 	bl	801e5dc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8023786:	4648      	mov	r0, r9
 8023788:	f7fa ff28 	bl	801e5dc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802378c:	a80a      	add	r0, sp, #40	; 0x28
 802378e:	f7fa ff25 	bl	801e5dc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8023792:	4b8f      	ldr	r3, [pc, #572]	; (80239d0 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2f0>)
 8023794:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 8023798:	881e      	ldrh	r6, [r3, #0]
 802379a:	4b8e      	ldr	r3, [pc, #568]	; (80239d4 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2f4>)
 802379c:	fa0f fb86 	sxth.w	fp, r6
 80237a0:	8819      	ldrh	r1, [r3, #0]
 80237a2:	4593      	cmp	fp, r2
 80237a4:	dd75      	ble.n	8023892 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1b2>
 80237a6:	f8bd c024 	ldrh.w	ip, [sp, #36]	; 0x24
 80237aa:	4494      	add	ip, r2
 80237ac:	fa1f fc8c 	uxth.w	ip, ip
 80237b0:	fa0f fa8c 	sxth.w	sl, ip
 80237b4:	f1ba 0f00 	cmp.w	sl, #0
 80237b8:	dd6b      	ble.n	8023892 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1b2>
 80237ba:	fa0f f881 	sxth.w	r8, r1
 80237be:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 80237c2:	4598      	cmp	r8, r3
 80237c4:	dd65      	ble.n	8023892 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1b2>
 80237c6:	f8bd 0026 	ldrh.w	r0, [sp, #38]	; 0x26
 80237ca:	4418      	add	r0, r3
 80237cc:	b280      	uxth	r0, r0
 80237ce:	fa0f fe80 	sxth.w	lr, r0
 80237d2:	f1be 0f00 	cmp.w	lr, #0
 80237d6:	dd5c      	ble.n	8023892 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1b2>
 80237d8:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 80237dc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80237e0:	45d3      	cmp	fp, sl
 80237e2:	bfc8      	it	gt
 80237e4:	4666      	movgt	r6, ip
 80237e6:	45f0      	cmp	r8, lr
 80237e8:	bfc8      	it	gt
 80237ea:	4601      	movgt	r1, r0
 80237ec:	f8ad 2020 	strh.w	r2, [sp, #32]
 80237f0:	1ab6      	subs	r6, r6, r2
 80237f2:	1ac9      	subs	r1, r1, r3
 80237f4:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 80237f8:	f8ad 6024 	strh.w	r6, [sp, #36]	; 0x24
 80237fc:	f8ad 1026 	strh.w	r1, [sp, #38]	; 0x26
 8023800:	f9bd c024 	ldrsh.w	ip, [sp, #36]	; 0x24
 8023804:	f1bc 0f00 	cmp.w	ip, #0
 8023808:	f340 80aa 	ble.w	8023960 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x280>
 802380c:	f9bd 6026 	ldrsh.w	r6, [sp, #38]	; 0x26
 8023810:	2e00      	cmp	r6, #0
 8023812:	f340 80a5 	ble.w	8023960 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x280>
 8023816:	f9bd 0020 	ldrsh.w	r0, [sp, #32]
 802381a:	f9bd 1018 	ldrsh.w	r1, [sp, #24]
 802381e:	4288      	cmp	r0, r1
 8023820:	db3b      	blt.n	802389a <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1ba>
 8023822:	f9bd 2022 	ldrsh.w	r2, [sp, #34]	; 0x22
 8023826:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 802382a:	429a      	cmp	r2, r3
 802382c:	db35      	blt.n	802389a <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1ba>
 802382e:	4460      	add	r0, ip
 8023830:	f8bd c01c 	ldrh.w	ip, [sp, #28]
 8023834:	4461      	add	r1, ip
 8023836:	b200      	sxth	r0, r0
 8023838:	b209      	sxth	r1, r1
 802383a:	4288      	cmp	r0, r1
 802383c:	dc2d      	bgt.n	802389a <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1ba>
 802383e:	f8bd 101e 	ldrh.w	r1, [sp, #30]
 8023842:	4432      	add	r2, r6
 8023844:	440b      	add	r3, r1
 8023846:	b212      	sxth	r2, r2
 8023848:	b21b      	sxth	r3, r3
 802384a:	429a      	cmp	r2, r3
 802384c:	dc25      	bgt.n	802389a <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1ba>
 802384e:	6823      	ldr	r3, [r4, #0]
 8023850:	4620      	mov	r0, r4
 8023852:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8023854:	4798      	blx	r3
 8023856:	4682      	mov	sl, r0
 8023858:	6828      	ldr	r0, [r5, #0]
 802385a:	6803      	ldr	r3, [r0, #0]
 802385c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802385e:	4798      	blx	r3
 8023860:	f9bd b02c 	ldrsh.w	fp, [sp, #44]	; 0x2c
 8023864:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 8023868:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
 802386c:	9303      	str	r3, [sp, #12]
 802386e:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8023872:	1a9b      	subs	r3, r3, r2
 8023874:	b29b      	uxth	r3, r3
 8023876:	b21c      	sxth	r4, r3
 8023878:	2c00      	cmp	r4, #0
 802387a:	dc13      	bgt.n	80238a4 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1c4>
 802387c:	bf18      	it	ne
 802387e:	f8ad 2020 	strhne.w	r2, [sp, #32]
 8023882:	463c      	mov	r4, r7
 8023884:	bf1e      	ittt	ne
 8023886:	f8bd 2024 	ldrhne.w	r2, [sp, #36]	; 0x24
 802388a:	189b      	addne	r3, r3, r2
 802388c:	f8ad 3024 	strhne.w	r3, [sp, #36]	; 0x24
 8023890:	e00f      	b.n	80238b2 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1d2>
 8023892:	2300      	movs	r3, #0
 8023894:	e9cd 3308 	strd	r3, r3, [sp, #32]
 8023898:	e7b2      	b.n	8023800 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x120>
 802389a:	4b4f      	ldr	r3, [pc, #316]	; (80239d8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2f8>)
 802389c:	f240 11ff 	movw	r1, #511	; 0x1ff
 80238a0:	4a47      	ldr	r2, [pc, #284]	; (80239c0 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2e0>)
 80238a2:	e72d      	b.n	8023700 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 80238a4:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80238a8:	ebab 0303 	sub.w	r3, fp, r3
 80238ac:	443c      	add	r4, r7
 80238ae:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
 80238b2:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
 80238b6:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 80238ba:	1a9b      	subs	r3, r3, r2
 80238bc:	b29b      	uxth	r3, r3
 80238be:	b219      	sxth	r1, r3
 80238c0:	2900      	cmp	r1, #0
 80238c2:	dd51      	ble.n	8023968 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x288>
 80238c4:	9a03      	ldr	r2, [sp, #12]
 80238c6:	fb02 4401 	mla	r4, r2, r1, r4
 80238ca:	f8bd 202e 	ldrh.w	r2, [sp, #46]	; 0x2e
 80238ce:	1ad3      	subs	r3, r2, r3
 80238d0:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 80238d4:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	; 0x2c
 80238d8:	2b00      	cmp	r3, #0
 80238da:	dd41      	ble.n	8023960 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x280>
 80238dc:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	; 0x2e
 80238e0:	2e00      	cmp	r6, #0
 80238e2:	dd3d      	ble.n	8023960 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x280>
 80238e4:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
 80238e8:	f04f 0803 	mov.w	r8, #3
 80238ec:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 80238f0:	fb0a f10c 	mul.w	r1, sl, ip
 80238f4:	fb12 1808 	smlabb	r8, r2, r8, r1
 80238f8:	4935      	ldr	r1, [pc, #212]	; (80239d0 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2f0>)
 80238fa:	4480      	add	r8, r0
 80238fc:	f9bd 0024 	ldrsh.w	r0, [sp, #36]	; 0x24
 8023900:	8809      	ldrh	r1, [r1, #0]
 8023902:	4283      	cmp	r3, r0
 8023904:	eba1 0202 	sub.w	r2, r1, r2
 8023908:	bfa8      	it	ge
 802390a:	4603      	movge	r3, r0
 802390c:	4293      	cmp	r3, r2
 802390e:	bfa8      	it	ge
 8023910:	4613      	movge	r3, r2
 8023912:	f9bd 2026 	ldrsh.w	r2, [sp, #38]	; 0x26
 8023916:	4296      	cmp	r6, r2
 8023918:	bfa8      	it	ge
 802391a:	4616      	movge	r6, r2
 802391c:	4a2d      	ldr	r2, [pc, #180]	; (80239d4 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2f4>)
 802391e:	8812      	ldrh	r2, [r2, #0]
 8023920:	eba2 0c0c 	sub.w	ip, r2, ip
 8023924:	4632      	mov	r2, r6
 8023926:	4566      	cmp	r6, ip
 8023928:	bfa8      	it	ge
 802392a:	4662      	movge	r2, ip
 802392c:	4299      	cmp	r1, r3
 802392e:	9202      	str	r2, [sp, #8]
 8023930:	d12d      	bne.n	802398e <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2ae>
 8023932:	4559      	cmp	r1, fp
 8023934:	d12b      	bne.n	802398e <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2ae>
 8023936:	6828      	ldr	r0, [r5, #0]
 8023938:	6803      	ldr	r3, [r0, #0]
 802393a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802393c:	4798      	blx	r3
 802393e:	07c3      	lsls	r3, r0, #31
 8023940:	d51b      	bpl.n	802397a <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x29a>
 8023942:	6828      	ldr	r0, [r5, #0]
 8023944:	9b02      	ldr	r3, [sp, #8]
 8023946:	f8ad b024 	strh.w	fp, [sp, #36]	; 0x24
 802394a:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 802394e:	6803      	ldr	r3, [r0, #0]
 8023950:	f8cd b000 	str.w	fp, [sp]
 8023954:	6e9d      	ldr	r5, [r3, #104]	; 0x68
 8023956:	4623      	mov	r3, r4
 8023958:	e899 0006 	ldmia.w	r9, {r1, r2}
 802395c:	47a8      	blx	r5
 802395e:	4607      	mov	r7, r0
 8023960:	4638      	mov	r0, r7
 8023962:	b00d      	add	sp, #52	; 0x34
 8023964:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023968:	bf1f      	itttt	ne
 802396a:	f8ad 2022 	strhne.w	r2, [sp, #34]	; 0x22
 802396e:	f8bd 2026 	ldrhne.w	r2, [sp, #38]	; 0x26
 8023972:	189b      	addne	r3, r3, r2
 8023974:	f8ad 3026 	strhne.w	r3, [sp, #38]	; 0x26
 8023978:	e7ac      	b.n	80238d4 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1f4>
 802397a:	6828      	ldr	r0, [r5, #0]
 802397c:	4642      	mov	r2, r8
 802397e:	4621      	mov	r1, r4
 8023980:	6803      	ldr	r3, [r0, #0]
 8023982:	6b5d      	ldr	r5, [r3, #52]	; 0x34
 8023984:	9b02      	ldr	r3, [sp, #8]
 8023986:	fb03 f30a 	mul.w	r3, r3, sl
 802398a:	47a8      	blx	r5
 802398c:	e7e8      	b.n	8023960 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x280>
 802398e:	eb03 0b43 	add.w	fp, r3, r3, lsl #1
 8023992:	f04f 0900 	mov.w	r9, #0
 8023996:	9b02      	ldr	r3, [sp, #8]
 8023998:	454b      	cmp	r3, r9
 802399a:	dde1      	ble.n	8023960 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x280>
 802399c:	6828      	ldr	r0, [r5, #0]
 802399e:	4642      	mov	r2, r8
 80239a0:	4621      	mov	r1, r4
 80239a2:	44d0      	add	r8, sl
 80239a4:	6803      	ldr	r3, [r0, #0]
 80239a6:	f109 0901 	add.w	r9, r9, #1
 80239aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80239ac:	461e      	mov	r6, r3
 80239ae:	465b      	mov	r3, fp
 80239b0:	47b0      	blx	r6
 80239b2:	9b03      	ldr	r3, [sp, #12]
 80239b4:	441c      	add	r4, r3
 80239b6:	e7ee      	b.n	8023996 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2b6>
 80239b8:	2400c8bc 	.word	0x2400c8bc
 80239bc:	0803111a 	.word	0x0803111a
 80239c0:	080318f9 	.word	0x080318f9
 80239c4:	080310e8 	.word	0x080310e8
 80239c8:	080311cc 	.word	0x080311cc
 80239cc:	08031221 	.word	0x08031221
 80239d0:	2400c8b6 	.word	0x2400c8b6
 80239d4:	2400c8b8 	.word	0x2400c8b8
 80239d8:	0803125f 	.word	0x0803125f

080239dc <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh>:
 80239dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80239e0:	f89d 001c 	ldrb.w	r0, [sp, #28]
 80239e4:	9c06      	ldr	r4, [sp, #24]
 80239e6:	2800      	cmp	r0, #0
 80239e8:	d06e      	beq.n	8023ac8 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 80239ea:	f9b3 5004 	ldrsh.w	r5, [r3, #4]
 80239ee:	2d00      	cmp	r5, #0
 80239f0:	dd6a      	ble.n	8023ac8 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 80239f2:	f9b3 c006 	ldrsh.w	ip, [r3, #6]
 80239f6:	f1bc 0f00 	cmp.w	ip, #0
 80239fa:	dd65      	ble.n	8023ac8 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 80239fc:	f9b3 6002 	ldrsh.w	r6, [r3, #2]
 8023a00:	28ff      	cmp	r0, #255	; 0xff
 8023a02:	f9b3 3000 	ldrsh.w	r3, [r3]
 8023a06:	f3c4 2707 	ubfx	r7, r4, #8, #8
 8023a0a:	fb02 3306 	mla	r3, r2, r6, r3
 8023a0e:	f3c4 4607 	ubfx	r6, r4, #16, #8
 8023a12:	b2e4      	uxtb	r4, r4
 8023a14:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8023a18:	4419      	add	r1, r3
 8023a1a:	fb02 f30c 	mul.w	r3, r2, ip
 8023a1e:	eba2 0205 	sub.w	r2, r2, r5
 8023a22:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8023a26:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8023a2a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8023a2e:	440b      	add	r3, r1
 8023a30:	d03e      	beq.n	8023ab0 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xd4>
 8023a32:	fa1f fc80 	uxth.w	ip, r0
 8023a36:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 8023a3a:	fb06 f60c 	mul.w	r6, r6, ip
 8023a3e:	b280      	uxth	r0, r0
 8023a40:	fb07 f70c 	mul.w	r7, r7, ip
 8023a44:	fb04 f40c 	mul.w	r4, r4, ip
 8023a48:	4299      	cmp	r1, r3
 8023a4a:	d23d      	bcs.n	8023ac8 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 8023a4c:	eb01 0c05 	add.w	ip, r1, r5
 8023a50:	458c      	cmp	ip, r1
 8023a52:	f101 0e03 	add.w	lr, r1, #3
 8023a56:	d928      	bls.n	8023aaa <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xce>
 8023a58:	f81e 1c03 	ldrb.w	r1, [lr, #-3]
 8023a5c:	fb11 f100 	smulbb	r1, r1, r0
 8023a60:	4421      	add	r1, r4
 8023a62:	b289      	uxth	r1, r1
 8023a64:	f101 0801 	add.w	r8, r1, #1
 8023a68:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 8023a6c:	1209      	asrs	r1, r1, #8
 8023a6e:	f80e 1c03 	strb.w	r1, [lr, #-3]
 8023a72:	f81e 1c02 	ldrb.w	r1, [lr, #-2]
 8023a76:	fb11 f100 	smulbb	r1, r1, r0
 8023a7a:	4439      	add	r1, r7
 8023a7c:	b289      	uxth	r1, r1
 8023a7e:	f101 0801 	add.w	r8, r1, #1
 8023a82:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 8023a86:	1209      	asrs	r1, r1, #8
 8023a88:	f80e 1c02 	strb.w	r1, [lr, #-2]
 8023a8c:	f81e 1c01 	ldrb.w	r1, [lr, #-1]
 8023a90:	fb11 f100 	smulbb	r1, r1, r0
 8023a94:	4431      	add	r1, r6
 8023a96:	b289      	uxth	r1, r1
 8023a98:	f101 0801 	add.w	r8, r1, #1
 8023a9c:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 8023aa0:	1209      	asrs	r1, r1, #8
 8023aa2:	f80e 1c01 	strb.w	r1, [lr, #-1]
 8023aa6:	4671      	mov	r1, lr
 8023aa8:	e7d2      	b.n	8023a50 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x74>
 8023aaa:	4411      	add	r1, r2
 8023aac:	e7cc      	b.n	8023a48 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x6c>
 8023aae:	4411      	add	r1, r2
 8023ab0:	4299      	cmp	r1, r3
 8023ab2:	d209      	bcs.n	8023ac8 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 8023ab4:	1948      	adds	r0, r1, r5
 8023ab6:	4281      	cmp	r1, r0
 8023ab8:	d2f9      	bcs.n	8023aae <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xd2>
 8023aba:	700c      	strb	r4, [r1, #0]
 8023abc:	3103      	adds	r1, #3
 8023abe:	f801 7c02 	strb.w	r7, [r1, #-2]
 8023ac2:	f801 6c01 	strb.w	r6, [r1, #-1]
 8023ac6:	e7f6      	b.n	8023ab6 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xda>
 8023ac8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08023acc <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 8023acc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8023ace:	4606      	mov	r6, r0
 8023ad0:	b087      	sub	sp, #28
 8023ad2:	4615      	mov	r5, r2
 8023ad4:	461f      	mov	r7, r3
 8023ad6:	b353      	cbz	r3, 8023b2e <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 8023ad8:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 8023adc:	2b00      	cmp	r3, #0
 8023ade:	dd26      	ble.n	8023b2e <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 8023ae0:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 8023ae4:	2b00      	cmp	r3, #0
 8023ae6:	dd22      	ble.n	8023b2e <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 8023ae8:	6808      	ldr	r0, [r1, #0]
 8023aea:	aa04      	add	r2, sp, #16
 8023aec:	6849      	ldr	r1, [r1, #4]
 8023aee:	4c1b      	ldr	r4, [pc, #108]	; (8023b5c <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x90>)
 8023af0:	c203      	stmia	r2!, {r0, r1}
 8023af2:	a804      	add	r0, sp, #16
 8023af4:	f7fa fd72 	bl	801e5dc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8023af8:	6820      	ldr	r0, [r4, #0]
 8023afa:	6803      	ldr	r3, [r0, #0]
 8023afc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8023afe:	4798      	blx	r3
 8023b00:	2fff      	cmp	r7, #255	; 0xff
 8023b02:	d016      	beq.n	8023b32 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x66>
 8023b04:	f010 0f08 	tst.w	r0, #8
 8023b08:	6820      	ldr	r0, [r4, #0]
 8023b0a:	d015      	beq.n	8023b38 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x6c>
 8023b0c:	2400      	movs	r4, #0
 8023b0e:	6801      	ldr	r1, [r0, #0]
 8023b10:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8023b14:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8023b18:	e9cd 7402 	strd	r7, r4, [sp, #8]
 8023b1c:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 8023b20:	9401      	str	r4, [sp, #4]
 8023b22:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 8023b26:	9400      	str	r4, [sp, #0]
 8023b28:	6dcc      	ldr	r4, [r1, #92]	; 0x5c
 8023b2a:	4629      	mov	r1, r5
 8023b2c:	47a0      	blx	r4
 8023b2e:	b007      	add	sp, #28
 8023b30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8023b32:	f010 0f02 	tst.w	r0, #2
 8023b36:	e7e7      	b.n	8023b08 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x3c>
 8023b38:	6803      	ldr	r3, [r0, #0]
 8023b3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8023b3c:	4798      	blx	r3
 8023b3e:	4b08      	ldr	r3, [pc, #32]	; (8023b60 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x94>)
 8023b40:	4601      	mov	r1, r0
 8023b42:	4630      	mov	r0, r6
 8023b44:	881a      	ldrh	r2, [r3, #0]
 8023b46:	6833      	ldr	r3, [r6, #0]
 8023b48:	e9cd 5700 	strd	r5, r7, [sp]
 8023b4c:	69dd      	ldr	r5, [r3, #28]
 8023b4e:	ab04      	add	r3, sp, #16
 8023b50:	47a8      	blx	r5
 8023b52:	6820      	ldr	r0, [r4, #0]
 8023b54:	6803      	ldr	r3, [r0, #0]
 8023b56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8023b58:	4798      	blx	r3
 8023b5a:	e7e8      	b.n	8023b2e <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 8023b5c:	2400c8bc 	.word	0x2400c8bc
 8023b60:	2400c8b6 	.word	0x2400c8b6

08023b64 <_ZN8touchgfx8LCD24bppC1Ev>:
 8023b64:	2200      	movs	r2, #0
 8023b66:	490c      	ldr	r1, [pc, #48]	; (8023b98 <_ZN8touchgfx8LCD24bppC1Ev+0x34>)
 8023b68:	6042      	str	r2, [r0, #4]
 8023b6a:	6001      	str	r1, [r0, #0]
 8023b6c:	e9c0 2202 	strd	r2, r2, [r0, #8]
 8023b70:	e9c0 2204 	strd	r2, r2, [r0, #16]
 8023b74:	e9c0 2206 	strd	r2, r2, [r0, #24]
 8023b78:	e9c0 2208 	strd	r2, r2, [r0, #32]
 8023b7c:	e9c0 220a 	strd	r2, r2, [r0, #40]	; 0x28
 8023b80:	e9c0 220c 	strd	r2, r2, [r0, #48]	; 0x30
 8023b84:	e9c0 220e 	strd	r2, r2, [r0, #56]	; 0x38
 8023b88:	e9c0 2210 	strd	r2, r2, [r0, #64]	; 0x40
 8023b8c:	e9c0 2212 	strd	r2, r2, [r0, #72]	; 0x48
 8023b90:	e9c0 2214 	strd	r2, r2, [r0, #80]	; 0x50
 8023b94:	4770      	bx	lr
 8023b96:	bf00      	nop
 8023b98:	08031544 	.word	0x08031544

08023b9c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 8023b9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023ba0:	b091      	sub	sp, #68	; 0x44
 8023ba2:	880d      	ldrh	r5, [r1, #0]
 8023ba4:	4607      	mov	r7, r0
 8023ba6:	4688      	mov	r8, r1
 8023ba8:	4616      	mov	r6, r2
 8023baa:	f89d 9068 	ldrb.w	r9, [sp, #104]	; 0x68
 8023bae:	b12d      	cbz	r5, 8023bbc <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x20>
 8023bb0:	4b69      	ldr	r3, [pc, #420]	; (8023d58 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1bc>)
 8023bb2:	2160      	movs	r1, #96	; 0x60
 8023bb4:	4a69      	ldr	r2, [pc, #420]	; (8023d5c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c0>)
 8023bb6:	486a      	ldr	r0, [pc, #424]	; (8023d60 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c4>)
 8023bb8:	f007 fe5e 	bl	802b878 <__assert_func>
 8023bbc:	6810      	ldr	r0, [r2, #0]
 8023bbe:	ac0c      	add	r4, sp, #48	; 0x30
 8023bc0:	6851      	ldr	r1, [r2, #4]
 8023bc2:	f8df a1a0 	ldr.w	sl, [pc, #416]	; 8023d64 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c8>
 8023bc6:	f8df b1a0 	ldr.w	fp, [pc, #416]	; 8023d68 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1cc>
 8023bca:	c403      	stmia	r4!, {r0, r1}
 8023bcc:	6818      	ldr	r0, [r3, #0]
 8023bce:	ac0e      	add	r4, sp, #56	; 0x38
 8023bd0:	6859      	ldr	r1, [r3, #4]
 8023bd2:	c403      	stmia	r4!, {r0, r1}
 8023bd4:	a80c      	add	r0, sp, #48	; 0x30
 8023bd6:	f7fa fd01 	bl	801e5dc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8023bda:	4631      	mov	r1, r6
 8023bdc:	a80e      	add	r0, sp, #56	; 0x38
 8023bde:	f7fa fd41 	bl	801e664 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8023be2:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 8023be6:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 8023bea:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 8023bee:	f8da 0000 	ldr.w	r0, [sl]
 8023bf2:	fb11 2103 	smlabb	r1, r1, r3, r2
 8023bf6:	f9bd 403c 	ldrsh.w	r4, [sp, #60]	; 0x3c
 8023bfa:	f9bd 603e 	ldrsh.w	r6, [sp, #62]	; 0x3e
 8023bfe:	440f      	add	r7, r1
 8023c00:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 8023c04:	440a      	add	r2, r1
 8023c06:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 8023c0a:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 8023c0e:	4413      	add	r3, r2
 8023c10:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 8023c14:	6803      	ldr	r3, [r0, #0]
 8023c16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8023c18:	4798      	blx	r3
 8023c1a:	f010 0f80 	tst.w	r0, #128	; 0x80
 8023c1e:	f8da 0000 	ldr.w	r0, [sl]
 8023c22:	d01e      	beq.n	8023c62 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xc6>
 8023c24:	6801      	ldr	r1, [r0, #0]
 8023c26:	2201      	movs	r2, #1
 8023c28:	9509      	str	r5, [sp, #36]	; 0x24
 8023c2a:	250b      	movs	r5, #11
 8023c2c:	b2a4      	uxth	r4, r4
 8023c2e:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8023c32:	b2b6      	uxth	r6, r6
 8023c34:	e9cd 5207 	strd	r5, r2, [sp, #28]
 8023c38:	f8bb 5000 	ldrh.w	r5, [fp]
 8023c3c:	f8cd 9010 	str.w	r9, [sp, #16]
 8023c40:	9602      	str	r6, [sp, #8]
 8023c42:	9401      	str	r4, [sp, #4]
 8023c44:	e9cd 2505 	strd	r2, r5, [sp, #20]
 8023c48:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 8023c4c:	9203      	str	r2, [sp, #12]
 8023c4e:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 8023c52:	9200      	str	r2, [sp, #0]
 8023c54:	4642      	mov	r2, r8
 8023c56:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
 8023c58:	4639      	mov	r1, r7
 8023c5a:	47a0      	blx	r4
 8023c5c:	b011      	add	sp, #68	; 0x44
 8023c5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023c62:	6803      	ldr	r3, [r0, #0]
 8023c64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8023c66:	4798      	blx	r3
 8023c68:	f8bb 5000 	ldrh.w	r5, [fp]
 8023c6c:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 8023c70:	f04f 0e04 	mov.w	lr, #4
 8023c74:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 8023c78:	436e      	muls	r6, r5
 8023c7a:	fb05 2303 	mla	r3, r5, r3, r2
 8023c7e:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8023c82:	1b2d      	subs	r5, r5, r4
 8023c84:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8023c88:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8023c8c:	4418      	add	r0, r3
 8023c8e:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 8023c92:	1982      	adds	r2, r0, r6
 8023c94:	1b1b      	subs	r3, r3, r4
 8023c96:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8023c9a:	930b      	str	r3, [sp, #44]	; 0x2c
 8023c9c:	4290      	cmp	r0, r2
 8023c9e:	d254      	bcs.n	8023d4a <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1ae>
 8023ca0:	eb00 0a04 	add.w	sl, r0, r4
 8023ca4:	4550      	cmp	r0, sl
 8023ca6:	d24c      	bcs.n	8023d42 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1a6>
 8023ca8:	f817 1b01 	ldrb.w	r1, [r7], #1
 8023cac:	fb1e e101 	smlabb	r1, lr, r1, lr
 8023cb0:	eb08 0c01 	add.w	ip, r8, r1
 8023cb4:	f89c 3003 	ldrb.w	r3, [ip, #3]
 8023cb8:	b173      	cbz	r3, 8023cd8 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x13c>
 8023cba:	2bff      	cmp	r3, #255	; 0xff
 8023cbc:	f818 b001 	ldrb.w	fp, [r8, r1]
 8023cc0:	d10c      	bne.n	8023cdc <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x140>
 8023cc2:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8023cc6:	d109      	bne.n	8023cdc <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x140>
 8023cc8:	f880 b000 	strb.w	fp, [r0]
 8023ccc:	f89c 3001 	ldrb.w	r3, [ip, #1]
 8023cd0:	7043      	strb	r3, [r0, #1]
 8023cd2:	f89c 3002 	ldrb.w	r3, [ip, #2]
 8023cd6:	7083      	strb	r3, [r0, #2]
 8023cd8:	3003      	adds	r0, #3
 8023cda:	e7e3      	b.n	8023ca4 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x108>
 8023cdc:	fb09 f103 	mul.w	r1, r9, r3
 8023ce0:	1c4b      	adds	r3, r1, #1
 8023ce2:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8023ce6:	7801      	ldrb	r1, [r0, #0]
 8023ce8:	121b      	asrs	r3, r3, #8
 8023cea:	b29e      	uxth	r6, r3
 8023cec:	43db      	mvns	r3, r3
 8023cee:	fb1b fb06 	smulbb	fp, fp, r6
 8023cf2:	b2db      	uxtb	r3, r3
 8023cf4:	fb01 b103 	mla	r1, r1, r3, fp
 8023cf8:	b289      	uxth	r1, r1
 8023cfa:	f101 0b01 	add.w	fp, r1, #1
 8023cfe:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 8023d02:	f890 b001 	ldrb.w	fp, [r0, #1]
 8023d06:	fb1b fb03 	smulbb	fp, fp, r3
 8023d0a:	1209      	asrs	r1, r1, #8
 8023d0c:	7001      	strb	r1, [r0, #0]
 8023d0e:	f89c 1001 	ldrb.w	r1, [ip, #1]
 8023d12:	fb01 b106 	mla	r1, r1, r6, fp
 8023d16:	b289      	uxth	r1, r1
 8023d18:	f101 0b01 	add.w	fp, r1, #1
 8023d1c:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 8023d20:	1209      	asrs	r1, r1, #8
 8023d22:	7041      	strb	r1, [r0, #1]
 8023d24:	f89c 1002 	ldrb.w	r1, [ip, #2]
 8023d28:	f890 c002 	ldrb.w	ip, [r0, #2]
 8023d2c:	fb1c f303 	smulbb	r3, ip, r3
 8023d30:	fb01 3606 	mla	r6, r1, r6, r3
 8023d34:	b2b6      	uxth	r6, r6
 8023d36:	1c73      	adds	r3, r6, #1
 8023d38:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 8023d3c:	1236      	asrs	r6, r6, #8
 8023d3e:	7086      	strb	r6, [r0, #2]
 8023d40:	e7ca      	b.n	8023cd8 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x13c>
 8023d42:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8023d44:	4428      	add	r0, r5
 8023d46:	441f      	add	r7, r3
 8023d48:	e7a8      	b.n	8023c9c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x100>
 8023d4a:	4b06      	ldr	r3, [pc, #24]	; (8023d64 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c8>)
 8023d4c:	6818      	ldr	r0, [r3, #0]
 8023d4e:	6803      	ldr	r3, [r0, #0]
 8023d50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8023d52:	4798      	blx	r3
 8023d54:	e782      	b.n	8023c5c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xc0>
 8023d56:	bf00      	nop
 8023d58:	0803104c 	.word	0x0803104c
 8023d5c:	0803171b 	.word	0x0803171b
 8023d60:	080310e8 	.word	0x080310e8
 8023d64:	2400c8bc 	.word	0x2400c8bc
 8023d68:	2400c8b6 	.word	0x2400c8b6

08023d6c <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 8023d6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023d70:	f8b1 9000 	ldrh.w	r9, [r1]
 8023d74:	b091      	sub	sp, #68	; 0x44
 8023d76:	4604      	mov	r4, r0
 8023d78:	460e      	mov	r6, r1
 8023d7a:	f1b9 0f01 	cmp.w	r9, #1
 8023d7e:	4690      	mov	r8, r2
 8023d80:	f89d 7068 	ldrb.w	r7, [sp, #104]	; 0x68
 8023d84:	d005      	beq.n	8023d92 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x26>
 8023d86:	4b69      	ldr	r3, [pc, #420]	; (8023f2c <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1c0>)
 8023d88:	21ae      	movs	r1, #174	; 0xae
 8023d8a:	4a69      	ldr	r2, [pc, #420]	; (8023f30 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1c4>)
 8023d8c:	4869      	ldr	r0, [pc, #420]	; (8023f34 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1c8>)
 8023d8e:	f007 fd73 	bl	802b878 <__assert_func>
 8023d92:	6810      	ldr	r0, [r2, #0]
 8023d94:	ad0c      	add	r5, sp, #48	; 0x30
 8023d96:	6851      	ldr	r1, [r2, #4]
 8023d98:	f8df a19c 	ldr.w	sl, [pc, #412]	; 8023f38 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1cc>
 8023d9c:	f8df b19c 	ldr.w	fp, [pc, #412]	; 8023f3c <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1d0>
 8023da0:	c503      	stmia	r5!, {r0, r1}
 8023da2:	6818      	ldr	r0, [r3, #0]
 8023da4:	ad0e      	add	r5, sp, #56	; 0x38
 8023da6:	6859      	ldr	r1, [r3, #4]
 8023da8:	c503      	stmia	r5!, {r0, r1}
 8023daa:	a80c      	add	r0, sp, #48	; 0x30
 8023dac:	f7fa fc16 	bl	801e5dc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8023db0:	4641      	mov	r1, r8
 8023db2:	a80e      	add	r0, sp, #56	; 0x38
 8023db4:	f7fa fc56 	bl	801e664 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8023db8:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 8023dbc:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 8023dc0:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 8023dc4:	f8da 0000 	ldr.w	r0, [sl]
 8023dc8:	fb11 2103 	smlabb	r1, r1, r3, r2
 8023dcc:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
 8023dd0:	f9bd 503e 	ldrsh.w	r5, [sp, #62]	; 0x3e
 8023dd4:	440c      	add	r4, r1
 8023dd6:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 8023dda:	440a      	add	r2, r1
 8023ddc:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 8023de0:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 8023de4:	4413      	add	r3, r2
 8023de6:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 8023dea:	6803      	ldr	r3, [r0, #0]
 8023dec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8023dee:	4798      	blx	r3
 8023df0:	f010 0f80 	tst.w	r0, #128	; 0x80
 8023df4:	f8da 0000 	ldr.w	r0, [sl]
 8023df8:	d020      	beq.n	8023e3c <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xd0>
 8023dfa:	2200      	movs	r2, #0
 8023dfc:	f04f 0c0b 	mov.w	ip, #11
 8023e00:	6801      	ldr	r1, [r0, #0]
 8023e02:	b2ad      	uxth	r5, r5
 8023e04:	f8cd c01c 	str.w	ip, [sp, #28]
 8023e08:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8023e0c:	e9cd 9208 	strd	r9, r2, [sp, #32]
 8023e10:	f8bb c000 	ldrh.w	ip, [fp]
 8023e14:	9704      	str	r7, [sp, #16]
 8023e16:	9502      	str	r5, [sp, #8]
 8023e18:	e9cd 2c05 	strd	r2, ip, [sp, #20]
 8023e1c:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 8023e20:	9203      	str	r2, [sp, #12]
 8023e22:	fa1f f288 	uxth.w	r2, r8
 8023e26:	9201      	str	r2, [sp, #4]
 8023e28:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 8023e2c:	9200      	str	r2, [sp, #0]
 8023e2e:	4632      	mov	r2, r6
 8023e30:	6bcd      	ldr	r5, [r1, #60]	; 0x3c
 8023e32:	4621      	mov	r1, r4
 8023e34:	47a8      	blx	r5
 8023e36:	b011      	add	sp, #68	; 0x44
 8023e38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023e3c:	6803      	ldr	r3, [r0, #0]
 8023e3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8023e40:	4798      	blx	r3
 8023e42:	f8bb 2000 	ldrh.w	r2, [fp]
 8023e46:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 8023e4a:	f04f 0e03 	mov.w	lr, #3
 8023e4e:	f9bd 1038 	ldrsh.w	r1, [sp, #56]	; 0x38
 8023e52:	4355      	muls	r5, r2
 8023e54:	fa1f fc87 	uxth.w	ip, r7
 8023e58:	fb02 1303 	mla	r3, r2, r3, r1
 8023e5c:	eba2 0208 	sub.w	r2, r2, r8
 8023e60:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8023e64:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8023e68:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8023e6c:	4418      	add	r0, r3
 8023e6e:	920b      	str	r2, [sp, #44]	; 0x2c
 8023e70:	1943      	adds	r3, r0, r5
 8023e72:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	; 0x34
 8023e76:	f1c7 05ff 	rsb	r5, r7, #255	; 0xff
 8023e7a:	eba2 0208 	sub.w	r2, r2, r8
 8023e7e:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8023e82:	b2ad      	uxth	r5, r5
 8023e84:	4298      	cmp	r0, r3
 8023e86:	d24a      	bcs.n	8023f1e <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b2>
 8023e88:	eb00 0908 	add.w	r9, r0, r8
 8023e8c:	4621      	mov	r1, r4
 8023e8e:	4548      	cmp	r0, r9
 8023e90:	460c      	mov	r4, r1
 8023e92:	d240      	bcs.n	8023f16 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1aa>
 8023e94:	f04f 0a04 	mov.w	sl, #4
 8023e98:	7824      	ldrb	r4, [r4, #0]
 8023e9a:	2fff      	cmp	r7, #255	; 0xff
 8023e9c:	f101 0101 	add.w	r1, r1, #1
 8023ea0:	fb1e a404 	smlabb	r4, lr, r4, sl
 8023ea4:	eb06 0a04 	add.w	sl, r6, r4
 8023ea8:	f816 b004 	ldrb.w	fp, [r6, r4]
 8023eac:	d02b      	beq.n	8023f06 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x19a>
 8023eae:	7804      	ldrb	r4, [r0, #0]
 8023eb0:	fb14 f405 	smulbb	r4, r4, r5
 8023eb4:	fb0b 440c 	mla	r4, fp, ip, r4
 8023eb8:	b2a4      	uxth	r4, r4
 8023eba:	f104 0b01 	add.w	fp, r4, #1
 8023ebe:	eb0b 2414 	add.w	r4, fp, r4, lsr #8
 8023ec2:	f890 b001 	ldrb.w	fp, [r0, #1]
 8023ec6:	fb1b fb05 	smulbb	fp, fp, r5
 8023eca:	1224      	asrs	r4, r4, #8
 8023ecc:	7004      	strb	r4, [r0, #0]
 8023ece:	f89a 4001 	ldrb.w	r4, [sl, #1]
 8023ed2:	fb04 b40c 	mla	r4, r4, ip, fp
 8023ed6:	b2a4      	uxth	r4, r4
 8023ed8:	f104 0b01 	add.w	fp, r4, #1
 8023edc:	eb0b 2414 	add.w	r4, fp, r4, lsr #8
 8023ee0:	1224      	asrs	r4, r4, #8
 8023ee2:	7044      	strb	r4, [r0, #1]
 8023ee4:	f89a 4002 	ldrb.w	r4, [sl, #2]
 8023ee8:	f890 a002 	ldrb.w	sl, [r0, #2]
 8023eec:	fb1a fa05 	smulbb	sl, sl, r5
 8023ef0:	fb04 a40c 	mla	r4, r4, ip, sl
 8023ef4:	b2a4      	uxth	r4, r4
 8023ef6:	f104 0a01 	add.w	sl, r4, #1
 8023efa:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 8023efe:	1224      	asrs	r4, r4, #8
 8023f00:	7084      	strb	r4, [r0, #2]
 8023f02:	3003      	adds	r0, #3
 8023f04:	e7c3      	b.n	8023e8e <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x122>
 8023f06:	f880 b000 	strb.w	fp, [r0]
 8023f0a:	f89a 4001 	ldrb.w	r4, [sl, #1]
 8023f0e:	7044      	strb	r4, [r0, #1]
 8023f10:	f89a 4002 	ldrb.w	r4, [sl, #2]
 8023f14:	e7f4      	b.n	8023f00 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x194>
 8023f16:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8023f18:	4420      	add	r0, r4
 8023f1a:	188c      	adds	r4, r1, r2
 8023f1c:	e7b2      	b.n	8023e84 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x118>
 8023f1e:	4b06      	ldr	r3, [pc, #24]	; (8023f38 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1cc>)
 8023f20:	6818      	ldr	r0, [r3, #0]
 8023f22:	6803      	ldr	r3, [r0, #0]
 8023f24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8023f26:	4798      	blx	r3
 8023f28:	e785      	b.n	8023e36 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xca>
 8023f2a:	bf00      	nop
 8023f2c:	08030fcb 	.word	0x08030fcb
 8023f30:	0803160e 	.word	0x0803160e
 8023f34:	080310e8 	.word	0x080310e8
 8023f38:	2400c8bc 	.word	0x2400c8bc
 8023f3c:	2400c8b6 	.word	0x2400c8b6

08023f40 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 8023f40:	b570      	push	{r4, r5, r6, lr}
 8023f42:	780d      	ldrb	r5, [r1, #0]
 8023f44:	f89d 4010 	ldrb.w	r4, [sp, #16]
 8023f48:	2d01      	cmp	r5, #1
 8023f4a:	d00d      	beq.n	8023f68 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x28>
 8023f4c:	d307      	bcc.n	8023f5e <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x1e>
 8023f4e:	2d02      	cmp	r5, #2
 8023f50:	d10f      	bne.n	8023f72 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x32>
 8023f52:	4b08      	ldr	r3, [pc, #32]	; (8023f74 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x34>)
 8023f54:	2153      	movs	r1, #83	; 0x53
 8023f56:	4a08      	ldr	r2, [pc, #32]	; (8023f78 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x38>)
 8023f58:	4808      	ldr	r0, [pc, #32]	; (8023f7c <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x3c>)
 8023f5a:	f007 fc8d 	bl	802b878 <__assert_func>
 8023f5e:	9404      	str	r4, [sp, #16]
 8023f60:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8023f64:	f7ff be1a 	b.w	8023b9c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 8023f68:	9404      	str	r4, [sp, #16]
 8023f6a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8023f6e:	f7ff befd 	b.w	8023d6c <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
 8023f72:	bd70      	pop	{r4, r5, r6, pc}
 8023f74:	08030f80 	.word	0x08030f80
 8023f78:	0803158c 	.word	0x0803158c
 8023f7c:	080310e8 	.word	0x080310e8

08023f80 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>:
 8023f80:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8023f84:	4605      	mov	r5, r0
 8023f86:	b08f      	sub	sp, #60	; 0x3c
 8023f88:	460c      	mov	r4, r1
 8023f8a:	461f      	mov	r7, r3
 8023f8c:	2b00      	cmp	r3, #0
 8023f8e:	d052      	beq.n	8024036 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xb6>
 8023f90:	6808      	ldr	r0, [r1, #0]
 8023f92:	ab0a      	add	r3, sp, #40	; 0x28
 8023f94:	6849      	ldr	r1, [r1, #4]
 8023f96:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 8024160 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e0>
 8023f9a:	f8df 91c8 	ldr.w	r9, [pc, #456]	; 8024164 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e4>
 8023f9e:	c303      	stmia	r3!, {r0, r1}
 8023fa0:	6810      	ldr	r0, [r2, #0]
 8023fa2:	ab0c      	add	r3, sp, #48	; 0x30
 8023fa4:	6851      	ldr	r1, [r2, #4]
 8023fa6:	c303      	stmia	r3!, {r0, r1}
 8023fa8:	a80a      	add	r0, sp, #40	; 0x28
 8023faa:	f7fa fb17 	bl	801e5dc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8023fae:	4621      	mov	r1, r4
 8023fb0:	a80c      	add	r0, sp, #48	; 0x30
 8023fb2:	f7fa fb57 	bl	801e664 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8023fb6:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
 8023fba:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 8023fbe:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 8023fc2:	f8d8 0000 	ldr.w	r0, [r8]
 8023fc6:	fb11 2103 	smlabb	r1, r1, r3, r2
 8023fca:	f9bd 6034 	ldrsh.w	r6, [sp, #52]	; 0x34
 8023fce:	f9bd 4036 	ldrsh.w	r4, [sp, #54]	; 0x36
 8023fd2:	eb05 0541 	add.w	r5, r5, r1, lsl #1
 8023fd6:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
 8023fda:	440a      	add	r2, r1
 8023fdc:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
 8023fe0:	f8bd 202a 	ldrh.w	r2, [sp, #42]	; 0x2a
 8023fe4:	4413      	add	r3, r2
 8023fe6:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 8023fea:	6803      	ldr	r3, [r0, #0]
 8023fec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8023fee:	4798      	blx	r3
 8023ff0:	2fff      	cmp	r7, #255	; 0xff
 8023ff2:	d023      	beq.n	802403c <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xbc>
 8023ff4:	f010 0f04 	tst.w	r0, #4
 8023ff8:	f8d8 0000 	ldr.w	r0, [r8]
 8023ffc:	d021      	beq.n	8024042 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xc2>
 8023ffe:	2100      	movs	r1, #0
 8024000:	f04f 0e01 	mov.w	lr, #1
 8024004:	f8d0 c000 	ldr.w	ip, [r0]
 8024008:	b2a4      	uxth	r4, r4
 802400a:	9106      	str	r1, [sp, #24]
 802400c:	b2b6      	uxth	r6, r6
 802400e:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
 8024012:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
 8024016:	e9cd e107 	strd	lr, r1, [sp, #28]
 802401a:	f8b9 e000 	ldrh.w	lr, [r9]
 802401e:	9703      	str	r7, [sp, #12]
 8024020:	9401      	str	r4, [sp, #4]
 8024022:	9600      	str	r6, [sp, #0]
 8024024:	e9cd 1e04 	strd	r1, lr, [sp, #16]
 8024028:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 802402c:	9102      	str	r1, [sp, #8]
 802402e:	4629      	mov	r1, r5
 8024030:	f8dc 4040 	ldr.w	r4, [ip, #64]	; 0x40
 8024034:	47a0      	blx	r4
 8024036:	b00f      	add	sp, #60	; 0x3c
 8024038:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 802403c:	f010 0f01 	tst.w	r0, #1
 8024040:	e7da      	b.n	8023ff8 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x78>
 8024042:	6803      	ldr	r3, [r0, #0]
 8024044:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8024046:	4798      	blx	r3
 8024048:	f8b9 1000 	ldrh.w	r1, [r9]
 802404c:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 8024050:	eb06 0c46 	add.w	ip, r6, r6, lsl #1
 8024054:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
 8024058:	434c      	muls	r4, r1
 802405a:	2fff      	cmp	r7, #255	; 0xff
 802405c:	fb01 2303 	mla	r3, r1, r3, r2
 8024060:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8024064:	eba1 0106 	sub.w	r1, r1, r6
 8024068:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 802406c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8024070:	4418      	add	r0, r3
 8024072:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	; 0x2c
 8024076:	eba3 0606 	sub.w	r6, r3, r6
 802407a:	4404      	add	r4, r0
 802407c:	ea4f 0646 	mov.w	r6, r6, lsl #1
 8024080:	d04a      	beq.n	8024118 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x198>
 8024082:	43fa      	mvns	r2, r7
 8024084:	b2bb      	uxth	r3, r7
 8024086:	b2d7      	uxtb	r7, r2
 8024088:	42a0      	cmp	r0, r4
 802408a:	d263      	bcs.n	8024154 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1d4>
 802408c:	eb00 0e0c 	add.w	lr, r0, ip
 8024090:	4586      	cmp	lr, r0
 8024092:	f100 0803 	add.w	r8, r0, #3
 8024096:	d93a      	bls.n	802410e <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x18e>
 8024098:	f835 2b02 	ldrh.w	r2, [r5], #2
 802409c:	f818 9c03 	ldrb.w	r9, [r8, #-3]
 80240a0:	00d0      	lsls	r0, r2, #3
 80240a2:	fb19 f907 	smulbb	r9, r9, r7
 80240a6:	b2c0      	uxtb	r0, r0
 80240a8:	ea40 1050 	orr.w	r0, r0, r0, lsr #5
 80240ac:	fb00 9003 	mla	r0, r0, r3, r9
 80240b0:	b280      	uxth	r0, r0
 80240b2:	f100 0901 	add.w	r9, r0, #1
 80240b6:	eb09 2010 	add.w	r0, r9, r0, lsr #8
 80240ba:	f818 9c02 	ldrb.w	r9, [r8, #-2]
 80240be:	fb19 f907 	smulbb	r9, r9, r7
 80240c2:	1200      	asrs	r0, r0, #8
 80240c4:	f808 0c03 	strb.w	r0, [r8, #-3]
 80240c8:	10d0      	asrs	r0, r2, #3
 80240ca:	1212      	asrs	r2, r2, #8
 80240cc:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 80240d0:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 80240d4:	ea40 1090 	orr.w	r0, r0, r0, lsr #6
 80240d8:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 80240dc:	fb00 9003 	mla	r0, r0, r3, r9
 80240e0:	b280      	uxth	r0, r0
 80240e2:	f100 0901 	add.w	r9, r0, #1
 80240e6:	eb09 2010 	add.w	r0, r9, r0, lsr #8
 80240ea:	1200      	asrs	r0, r0, #8
 80240ec:	f808 0c02 	strb.w	r0, [r8, #-2]
 80240f0:	f818 0c01 	ldrb.w	r0, [r8, #-1]
 80240f4:	fb10 f007 	smulbb	r0, r0, r7
 80240f8:	fb02 0203 	mla	r2, r2, r3, r0
 80240fc:	b292      	uxth	r2, r2
 80240fe:	1c50      	adds	r0, r2, #1
 8024100:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 8024104:	4640      	mov	r0, r8
 8024106:	1212      	asrs	r2, r2, #8
 8024108:	f808 2c01 	strb.w	r2, [r8, #-1]
 802410c:	e7c0      	b.n	8024090 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x110>
 802410e:	4408      	add	r0, r1
 8024110:	4435      	add	r5, r6
 8024112:	e7b9      	b.n	8024088 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x108>
 8024114:	4408      	add	r0, r1
 8024116:	4435      	add	r5, r6
 8024118:	42a0      	cmp	r0, r4
 802411a:	d21b      	bcs.n	8024154 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1d4>
 802411c:	eb00 070c 	add.w	r7, r0, ip
 8024120:	42b8      	cmp	r0, r7
 8024122:	d2f7      	bcs.n	8024114 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x194>
 8024124:	f835 3b02 	ldrh.w	r3, [r5], #2
 8024128:	3003      	adds	r0, #3
 802412a:	00da      	lsls	r2, r3, #3
 802412c:	b2d2      	uxtb	r2, r2
 802412e:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 8024132:	f800 2c03 	strb.w	r2, [r0, #-3]
 8024136:	10da      	asrs	r2, r3, #3
 8024138:	121b      	asrs	r3, r3, #8
 802413a:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 802413e:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8024142:	ea42 1292 	orr.w	r2, r2, r2, lsr #6
 8024146:	ea43 1353 	orr.w	r3, r3, r3, lsr #5
 802414a:	f800 2c02 	strb.w	r2, [r0, #-2]
 802414e:	f800 3c01 	strb.w	r3, [r0, #-1]
 8024152:	e7e5      	b.n	8024120 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1a0>
 8024154:	4b02      	ldr	r3, [pc, #8]	; (8024160 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e0>)
 8024156:	6818      	ldr	r0, [r3, #0]
 8024158:	6803      	ldr	r3, [r0, #0]
 802415a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802415c:	4798      	blx	r3
 802415e:	e76a      	b.n	8024036 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xb6>
 8024160:	2400c8bc 	.word	0x2400c8bc
 8024164:	2400c8b6 	.word	0x2400c8b6

08024168 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 8024168:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802416c:	b08a      	sub	sp, #40	; 0x28
 802416e:	460d      	mov	r5, r1
 8024170:	4604      	mov	r4, r0
 8024172:	461e      	mov	r6, r3
 8024174:	6808      	ldr	r0, [r1, #0]
 8024176:	ab06      	add	r3, sp, #24
 8024178:	6849      	ldr	r1, [r1, #4]
 802417a:	4f5d      	ldr	r7, [pc, #372]	; (80242f0 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x188>)
 802417c:	c303      	stmia	r3!, {r0, r1}
 802417e:	6810      	ldr	r0, [r2, #0]
 8024180:	ab08      	add	r3, sp, #32
 8024182:	6851      	ldr	r1, [r2, #4]
 8024184:	c303      	stmia	r3!, {r0, r1}
 8024186:	a806      	add	r0, sp, #24
 8024188:	f7fa fa28 	bl	801e5dc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802418c:	4629      	mov	r1, r5
 802418e:	a808      	add	r0, sp, #32
 8024190:	f7fa fa68 	bl	801e664 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8024194:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 8024198:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 802419c:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 80241a0:	6838      	ldr	r0, [r7, #0]
 80241a2:	fb11 2103 	smlabb	r1, r1, r3, r2
 80241a6:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	; 0x24
 80241aa:	f9bd 5026 	ldrsh.w	r5, [sp, #38]	; 0x26
 80241ae:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 80241b2:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 80241b6:	440a      	add	r2, r1
 80241b8:	f8ad 2020 	strh.w	r2, [sp, #32]
 80241bc:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 80241c0:	4413      	add	r3, r2
 80241c2:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 80241c6:	6803      	ldr	r3, [r0, #0]
 80241c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80241ca:	4798      	blx	r3
 80241cc:	2eff      	cmp	r6, #255	; 0xff
 80241ce:	d119      	bne.n	8024204 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9c>
 80241d0:	f010 0f20 	tst.w	r0, #32
 80241d4:	6838      	ldr	r0, [r7, #0]
 80241d6:	d018      	beq.n	802420a <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa2>
 80241d8:	b2ad      	uxth	r5, r5
 80241da:	2700      	movs	r7, #0
 80241dc:	6801      	ldr	r1, [r0, #0]
 80241de:	9501      	str	r5, [sp, #4]
 80241e0:	fa1f f588 	uxth.w	r5, r8
 80241e4:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 80241e8:	9500      	str	r5, [sp, #0]
 80241ea:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 80241ee:	e9cd 6703 	strd	r6, r7, [sp, #12]
 80241f2:	f8bd 601c 	ldrh.w	r6, [sp, #28]
 80241f6:	9602      	str	r6, [sp, #8]
 80241f8:	6d0d      	ldr	r5, [r1, #80]	; 0x50
 80241fa:	4621      	mov	r1, r4
 80241fc:	47a8      	blx	r5
 80241fe:	b00a      	add	sp, #40	; 0x28
 8024200:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8024204:	f010 0f40 	tst.w	r0, #64	; 0x40
 8024208:	e7e4      	b.n	80241d4 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6c>
 802420a:	6803      	ldr	r3, [r0, #0]
 802420c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802420e:	4798      	blx	r3
 8024210:	4b38      	ldr	r3, [pc, #224]	; (80242f4 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x18c>)
 8024212:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 8024216:	f8b3 c000 	ldrh.w	ip, [r3]
 802421a:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 802421e:	fb0c f505 	mul.w	r5, ip, r5
 8024222:	f9bd e01c 	ldrsh.w	lr, [sp, #28]
 8024226:	fb0c 2303 	mla	r3, ip, r3, r2
 802422a:	ebac 0c08 	sub.w	ip, ip, r8
 802422e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8024232:	ebae 0e08 	sub.w	lr, lr, r8
 8024236:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 802423a:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 802423e:	4418      	add	r0, r3
 8024240:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8024244:	eb08 0348 	add.w	r3, r8, r8, lsl #1
 8024248:	4405      	add	r5, r0
 802424a:	42a8      	cmp	r0, r5
 802424c:	d24a      	bcs.n	80242e4 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x17c>
 802424e:	eb00 0803 	add.w	r8, r0, r3
 8024252:	4540      	cmp	r0, r8
 8024254:	d243      	bcs.n	80242de <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x176>
 8024256:	78e2      	ldrb	r2, [r4, #3]
 8024258:	b15a      	cbz	r2, 8024272 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x10a>
 802425a:	2aff      	cmp	r2, #255	; 0xff
 802425c:	f894 9000 	ldrb.w	r9, [r4]
 8024260:	d10a      	bne.n	8024278 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x110>
 8024262:	2eff      	cmp	r6, #255	; 0xff
 8024264:	d108      	bne.n	8024278 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x110>
 8024266:	f880 9000 	strb.w	r9, [r0]
 802426a:	7862      	ldrb	r2, [r4, #1]
 802426c:	7042      	strb	r2, [r0, #1]
 802426e:	78a2      	ldrb	r2, [r4, #2]
 8024270:	7082      	strb	r2, [r0, #2]
 8024272:	3003      	adds	r0, #3
 8024274:	3404      	adds	r4, #4
 8024276:	e7ec      	b.n	8024252 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xea>
 8024278:	4372      	muls	r2, r6
 802427a:	1c51      	adds	r1, r2, #1
 802427c:	eb01 2112 	add.w	r1, r1, r2, lsr #8
 8024280:	1209      	asrs	r1, r1, #8
 8024282:	fa1f fa81 	uxth.w	sl, r1
 8024286:	43c9      	mvns	r1, r1
 8024288:	fb19 f90a 	smulbb	r9, r9, sl
 802428c:	b2ca      	uxtb	r2, r1
 802428e:	7801      	ldrb	r1, [r0, #0]
 8024290:	fb01 9902 	mla	r9, r1, r2, r9
 8024294:	fa1f f989 	uxth.w	r9, r9
 8024298:	f109 0101 	add.w	r1, r9, #1
 802429c:	eb01 2919 	add.w	r9, r1, r9, lsr #8
 80242a0:	ea4f 2929 	mov.w	r9, r9, asr #8
 80242a4:	f880 9000 	strb.w	r9, [r0]
 80242a8:	f890 9001 	ldrb.w	r9, [r0, #1]
 80242ac:	7861      	ldrb	r1, [r4, #1]
 80242ae:	fb19 f902 	smulbb	r9, r9, r2
 80242b2:	fb01 910a 	mla	r1, r1, sl, r9
 80242b6:	b289      	uxth	r1, r1
 80242b8:	f101 0901 	add.w	r9, r1, #1
 80242bc:	eb09 2111 	add.w	r1, r9, r1, lsr #8
 80242c0:	1209      	asrs	r1, r1, #8
 80242c2:	7041      	strb	r1, [r0, #1]
 80242c4:	7881      	ldrb	r1, [r0, #2]
 80242c6:	f894 9002 	ldrb.w	r9, [r4, #2]
 80242ca:	fb11 f202 	smulbb	r2, r1, r2
 80242ce:	fb09 220a 	mla	r2, r9, sl, r2
 80242d2:	b292      	uxth	r2, r2
 80242d4:	1c51      	adds	r1, r2, #1
 80242d6:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 80242da:	1212      	asrs	r2, r2, #8
 80242dc:	e7c8      	b.n	8024270 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x108>
 80242de:	4460      	add	r0, ip
 80242e0:	4474      	add	r4, lr
 80242e2:	e7b2      	b.n	802424a <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xe2>
 80242e4:	6838      	ldr	r0, [r7, #0]
 80242e6:	6803      	ldr	r3, [r0, #0]
 80242e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80242ea:	4798      	blx	r3
 80242ec:	e787      	b.n	80241fe <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x96>
 80242ee:	bf00      	nop
 80242f0:	2400c8bc 	.word	0x2400c8bc
 80242f4:	2400c8b6 	.word	0x2400c8b6

080242f8 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 80242f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80242fc:	b085      	sub	sp, #20
 80242fe:	4606      	mov	r6, r0
 8024300:	460c      	mov	r4, r1
 8024302:	4691      	mov	r9, r2
 8024304:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
 8024308:	4698      	mov	r8, r3
 802430a:	b31d      	cbz	r5, 8024354 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 802430c:	4608      	mov	r0, r1
 802430e:	f7fd f9f3 	bl	80216f8 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8024312:	4607      	mov	r7, r0
 8024314:	4620      	mov	r0, r4
 8024316:	f7fd fa29 	bl	802176c <_ZNK8touchgfx6Bitmap9getHeightEv>
 802431a:	f8ad 000e 	strh.w	r0, [sp, #14]
 802431e:	4620      	mov	r0, r4
 8024320:	f8ad 9008 	strh.w	r9, [sp, #8]
 8024324:	f8ad 800a 	strh.w	r8, [sp, #10]
 8024328:	f8ad 700c 	strh.w	r7, [sp, #12]
 802432c:	f7fd fb76 	bl	8021a1c <_ZNK8touchgfx6Bitmap9getFormatEv>
 8024330:	280b      	cmp	r0, #11
 8024332:	d838      	bhi.n	80243a6 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xae>
 8024334:	e8df f000 	tbb	[pc, r0]
 8024338:	37062920 	.word	0x37062920
 802433c:	37373737 	.word	0x37373737
 8024340:	11373737 	.word	0x11373737
 8024344:	4620      	mov	r0, r4
 8024346:	f7fd fadf 	bl	8021908 <_ZNK8touchgfx6Bitmap7getDataEv>
 802434a:	462b      	mov	r3, r5
 802434c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 802434e:	a902      	add	r1, sp, #8
 8024350:	f7ff ff0a 	bl	8024168 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8024354:	b005      	add	sp, #20
 8024356:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 802435a:	4620      	mov	r0, r4
 802435c:	f7fd fad4 	bl	8021908 <_ZNK8touchgfx6Bitmap7getDataEv>
 8024360:	4606      	mov	r6, r0
 8024362:	4620      	mov	r0, r4
 8024364:	f7fd fb02 	bl	802196c <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 8024368:	9500      	str	r5, [sp, #0]
 802436a:	4601      	mov	r1, r0
 802436c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802436e:	aa02      	add	r2, sp, #8
 8024370:	4630      	mov	r0, r6
 8024372:	f7ff fde5 	bl	8023f40 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 8024376:	e7ed      	b.n	8024354 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 8024378:	4620      	mov	r0, r4
 802437a:	f7fd fac5 	bl	8021908 <_ZNK8touchgfx6Bitmap7getDataEv>
 802437e:	462b      	mov	r3, r5
 8024380:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8024382:	a902      	add	r1, sp, #8
 8024384:	f7ff fdfc 	bl	8023f80 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>
 8024388:	e7e4      	b.n	8024354 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 802438a:	6833      	ldr	r3, [r6, #0]
 802438c:	4620      	mov	r0, r4
 802438e:	68df      	ldr	r7, [r3, #12]
 8024390:	f7fd faba 	bl	8021908 <_ZNK8touchgfx6Bitmap7getDataEv>
 8024394:	2300      	movs	r3, #0
 8024396:	4601      	mov	r1, r0
 8024398:	aa02      	add	r2, sp, #8
 802439a:	4630      	mov	r0, r6
 802439c:	e9cd 5300 	strd	r5, r3, [sp]
 80243a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80243a2:	47b8      	blx	r7
 80243a4:	e7d6      	b.n	8024354 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 80243a6:	4b03      	ldr	r3, [pc, #12]	; (80243b4 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xbc>)
 80243a8:	2147      	movs	r1, #71	; 0x47
 80243aa:	4a03      	ldr	r2, [pc, #12]	; (80243b8 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc0>)
 80243ac:	4803      	ldr	r0, [pc, #12]	; (80243bc <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc4>)
 80243ae:	f007 fa63 	bl	802b878 <__assert_func>
 80243b2:	bf00      	nop
 80243b4:	08031019 	.word	0x08031019
 80243b8:	08031697 	.word	0x08031697
 80243bc:	080310e8 	.word	0x080310e8

080243c0 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 80243c0:	b570      	push	{r4, r5, r6, lr}
 80243c2:	9d04      	ldr	r5, [sp, #16]
 80243c4:	460c      	mov	r4, r1
 80243c6:	4619      	mov	r1, r3
 80243c8:	f89d 3014 	ldrb.w	r3, [sp, #20]
 80243cc:	2a0d      	cmp	r2, #13
 80243ce:	d826      	bhi.n	802441e <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x5e>
 80243d0:	e8df f002 	tbb	[pc, r2]
 80243d4:	200e1407 	.word	0x200e1407
 80243d8:	20202020 	.word	0x20202020
 80243dc:	20202020 	.word	0x20202020
 80243e0:	2020      	.short	0x2020
 80243e2:	4b0f      	ldr	r3, [pc, #60]	; (8024420 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x60>)
 80243e4:	f240 11d3 	movw	r1, #467	; 0x1d3
 80243e8:	4a0e      	ldr	r2, [pc, #56]	; (8024424 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x64>)
 80243ea:	480f      	ldr	r0, [pc, #60]	; (8024428 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x68>)
 80243ec:	f007 fa44 	bl	802b878 <__assert_func>
 80243f0:	462a      	mov	r2, r5
 80243f2:	4620      	mov	r0, r4
 80243f4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80243f8:	f7ff beb6 	b.w	8024168 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 80243fc:	6802      	ldr	r2, [r0, #0]
 80243fe:	2600      	movs	r6, #0
 8024400:	e9cd 3604 	strd	r3, r6, [sp, #16]
 8024404:	68d6      	ldr	r6, [r2, #12]
 8024406:	462b      	mov	r3, r5
 8024408:	460a      	mov	r2, r1
 802440a:	4621      	mov	r1, r4
 802440c:	46b4      	mov	ip, r6
 802440e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8024412:	4760      	bx	ip
 8024414:	4b05      	ldr	r3, [pc, #20]	; (802442c <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x6c>)
 8024416:	f44f 71f3 	mov.w	r1, #486	; 0x1e6
 802441a:	4a02      	ldr	r2, [pc, #8]	; (8024424 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x64>)
 802441c:	e7e5      	b.n	80243ea <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x2a>
 802441e:	bd70      	pop	{r4, r5, r6, pc}
 8024420:	080312bf 	.word	0x080312bf
 8024424:	0803197f 	.word	0x0803197f
 8024428:	080310e8 	.word	0x080310e8
 802442c:	08031300 	.word	0x08031300

08024430 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>:
 8024430:	b158      	cbz	r0, 802444a <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x1a>
 8024432:	2902      	cmp	r1, #2
 8024434:	d00f      	beq.n	8024456 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x26>
 8024436:	2903      	cmp	r1, #3
 8024438:	d010      	beq.n	802445c <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x2c>
 802443a:	2901      	cmp	r1, #1
 802443c:	d101      	bne.n	8024442 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x12>
 802443e:	2001      	movs	r0, #1
 8024440:	4770      	bx	lr
 8024442:	4b08      	ldr	r3, [pc, #32]	; (8024464 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x34>)
 8024444:	8819      	ldrh	r1, [r3, #0]
 8024446:	4248      	negs	r0, r1
 8024448:	4770      	bx	lr
 802444a:	2902      	cmp	r1, #2
 802444c:	d006      	beq.n	802445c <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x2c>
 802444e:	2903      	cmp	r1, #3
 8024450:	d0f7      	beq.n	8024442 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x12>
 8024452:	2901      	cmp	r1, #1
 8024454:	d1f3      	bne.n	802443e <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0xe>
 8024456:	4b03      	ldr	r3, [pc, #12]	; (8024464 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x34>)
 8024458:	8818      	ldrh	r0, [r3, #0]
 802445a:	4770      	bx	lr
 802445c:	f04f 30ff 	mov.w	r0, #4294967295
 8024460:	4770      	bx	lr
 8024462:	bf00      	nop
 8024464:	2400c8b6 	.word	0x2400c8b6

08024468 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>:
 8024468:	b170      	cbz	r0, 8024488 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x20>
 802446a:	2902      	cmp	r1, #2
 802446c:	d012      	beq.n	8024494 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x2c>
 802446e:	2903      	cmp	r1, #3
 8024470:	d006      	beq.n	8024480 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x18>
 8024472:	2901      	cmp	r1, #1
 8024474:	d001      	beq.n	802447a <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x12>
 8024476:	2001      	movs	r0, #1
 8024478:	4770      	bx	lr
 802447a:	4b08      	ldr	r3, [pc, #32]	; (802449c <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x34>)
 802447c:	8818      	ldrh	r0, [r3, #0]
 802447e:	4770      	bx	lr
 8024480:	4b06      	ldr	r3, [pc, #24]	; (802449c <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x34>)
 8024482:	8818      	ldrh	r0, [r3, #0]
 8024484:	4240      	negs	r0, r0
 8024486:	4770      	bx	lr
 8024488:	2902      	cmp	r1, #2
 802448a:	d0f9      	beq.n	8024480 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x18>
 802448c:	2903      	cmp	r1, #3
 802448e:	d0f2      	beq.n	8024476 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0xe>
 8024490:	2901      	cmp	r1, #1
 8024492:	d1f2      	bne.n	802447a <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x12>
 8024494:	f04f 30ff 	mov.w	r0, #4294967295
 8024498:	4770      	bx	lr
 802449a:	bf00      	nop
 802449c:	2400c8b6 	.word	0x2400c8b6

080244a0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 80244a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80244a4:	b097      	sub	sp, #92	; 0x5c
 80244a6:	910b      	str	r1, [sp, #44]	; 0x2c
 80244a8:	a912      	add	r1, sp, #72	; 0x48
 80244aa:	f9bd 6080 	ldrsh.w	r6, [sp, #128]	; 0x80
 80244ae:	f8bd 7088 	ldrh.w	r7, [sp, #136]	; 0x88
 80244b2:	f8bd 408c 	ldrh.w	r4, [sp, #140]	; 0x8c
 80244b6:	f89d 80a4 	ldrb.w	r8, [sp, #164]	; 0xa4
 80244ba:	f89d 90ac 	ldrb.w	r9, [sp, #172]	; 0xac
 80244be:	e881 000c 	stmia.w	r1, {r2, r3}
 80244c2:	f9bd 3084 	ldrsh.w	r3, [sp, #132]	; 0x84
 80244c6:	930a      	str	r3, [sp, #40]	; 0x28
 80244c8:	f89d 309c 	ldrb.w	r3, [sp, #156]	; 0x9c
 80244cc:	e9dd 2124 	ldrd	r2, r1, [sp, #144]	; 0x90
 80244d0:	9311      	str	r3, [sp, #68]	; 0x44
 80244d2:	f89d 30a8 	ldrb.w	r3, [sp, #168]	; 0xa8
 80244d6:	798d      	ldrb	r5, [r1, #6]
 80244d8:	930c      	str	r3, [sp, #48]	; 0x30
 80244da:	7b4b      	ldrb	r3, [r1, #13]
 80244dc:	0158      	lsls	r0, r3, #5
 80244de:	f400 7080 	and.w	r0, r0, #256	; 0x100
 80244e2:	4328      	orrs	r0, r5
 80244e4:	9009      	str	r0, [sp, #36]	; 0x24
 80244e6:	f000 817d 	beq.w	80247e4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x344>
 80244ea:	011b      	lsls	r3, r3, #4
 80244ec:	79c8      	ldrb	r0, [r1, #7]
 80244ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80244f2:	4303      	orrs	r3, r0
 80244f4:	930e      	str	r3, [sp, #56]	; 0x38
 80244f6:	f000 8175 	beq.w	80247e4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x344>
 80244fa:	f991 3009 	ldrsb.w	r3, [r1, #9]
 80244fe:	b29b      	uxth	r3, r3
 8024500:	2f00      	cmp	r7, #0
 8024502:	f000 8117 	beq.w	8024734 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x294>
 8024506:	1aff      	subs	r7, r7, r3
 8024508:	b2bf      	uxth	r7, r7
 802450a:	043b      	lsls	r3, r7, #16
 802450c:	d502      	bpl.n	8024514 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 802450e:	1bf6      	subs	r6, r6, r7
 8024510:	2700      	movs	r7, #0
 8024512:	b236      	sxth	r6, r6
 8024514:	f9b2 1000 	ldrsh.w	r1, [r2]
 8024518:	a812      	add	r0, sp, #72	; 0x48
 802451a:	f8b2 a002 	ldrh.w	sl, [r2, #2]
 802451e:	428e      	cmp	r6, r1
 8024520:	b28b      	uxth	r3, r1
 8024522:	f8bd 5024 	ldrh.w	r5, [sp, #36]	; 0x24
 8024526:	bfbf      	itttt	lt
 8024528:	18ff      	addlt	r7, r7, r3
 802452a:	1bbe      	sublt	r6, r7, r6
 802452c:	b2b7      	uxthlt	r7, r6
 802452e:	460e      	movlt	r6, r1
 8024530:	8891      	ldrh	r1, [r2, #4]
 8024532:	440b      	add	r3, r1
 8024534:	4631      	mov	r1, r6
 8024536:	b21b      	sxth	r3, r3
 8024538:	9310      	str	r3, [sp, #64]	; 0x40
 802453a:	88d3      	ldrh	r3, [r2, #6]
 802453c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802453e:	449a      	add	sl, r3
 8024540:	fa0f f38a 	sxth.w	r3, sl
 8024544:	f8bd a038 	ldrh.w	sl, [sp, #56]	; 0x38
 8024548:	930f      	str	r3, [sp, #60]	; 0x3c
 802454a:	4bb6      	ldr	r3, [pc, #728]	; (8024824 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x384>)
 802454c:	f893 b000 	ldrb.w	fp, [r3]
 8024550:	f10b 3cff 	add.w	ip, fp, #4294967295
 8024554:	f1dc 0300 	rsbs	r3, ip, #0
 8024558:	eb43 030c 	adc.w	r3, r3, ip
 802455c:	930d      	str	r3, [sp, #52]	; 0x34
 802455e:	464b      	mov	r3, r9
 8024560:	f7f9 fec0 	bl	801e2e4 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 8024564:	4631      	mov	r1, r6
 8024566:	f8ad 0054 	strh.w	r0, [sp, #84]	; 0x54
 802456a:	464b      	mov	r3, r9
 802456c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802456e:	a812      	add	r0, sp, #72	; 0x48
 8024570:	f7f9 fed0 	bl	801e314 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 8024574:	a916      	add	r1, sp, #88	; 0x58
 8024576:	f821 0d02 	strh.w	r0, [r1, #-2]!
 802457a:	a815      	add	r0, sp, #84	; 0x54
 802457c:	f7f9 ffec 	bl	801e558 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 8024580:	f1b9 0f00 	cmp.w	r9, #0
 8024584:	f040 80d9 	bne.w	802473a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x29a>
 8024588:	f1bb 0f01 	cmp.w	fp, #1
 802458c:	f040 80dd 	bne.w	802474a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2aa>
 8024590:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8024592:	b153      	cbz	r3, 80245aa <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x10a>
 8024594:	2508      	movs	r5, #8
 8024596:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8024598:	fb95 f3f8 	sdiv	r3, r5, r8
 802459c:	1e5d      	subs	r5, r3, #1
 802459e:	4415      	add	r5, r2
 80245a0:	fb95 f5f3 	sdiv	r5, r5, r3
 80245a4:	fb15 f503 	smulbb	r5, r5, r3
 80245a8:	b2ad      	uxth	r5, r5
 80245aa:	b907      	cbnz	r7, 80245ae <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x10e>
 80245ac:	b16c      	cbz	r4, 80245ca <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x12a>
 80245ae:	fb04 7305 	mla	r3, r4, r5, r7
 80245b2:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80245b4:	ebaa 0a04 	sub.w	sl, sl, r4
 80245b8:	fb08 f303 	mul.w	r3, r8, r3
 80245bc:	fa1f fa8a 	uxth.w	sl, sl
 80245c0:	eb02 02d3 	add.w	r2, r2, r3, lsr #3
 80245c4:	f003 0407 	and.w	r4, r3, #7
 80245c8:	9226      	str	r2, [sp, #152]	; 0x98
 80245ca:	4649      	mov	r1, r9
 80245cc:	980d      	ldr	r0, [sp, #52]	; 0x34
 80245ce:	f7ff ff2f 	bl	8024430 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>
 80245d2:	4649      	mov	r1, r9
 80245d4:	4683      	mov	fp, r0
 80245d6:	980d      	ldr	r0, [sp, #52]	; 0x34
 80245d8:	f7ff ff46 	bl	8024468 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>
 80245dc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80245de:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80245e0:	4681      	mov	r9, r0
 80245e2:	1a9b      	subs	r3, r3, r2
 80245e4:	459a      	cmp	sl, r3
 80245e6:	bfa8      	it	ge
 80245e8:	469a      	movge	sl, r3
 80245ea:	f1ba 0f00 	cmp.w	sl, #0
 80245ee:	f340 80f9 	ble.w	80247e4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x344>
 80245f2:	1bf6      	subs	r6, r6, r7
 80245f4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80245f6:	1b9e      	subs	r6, r3, r6
 80245f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80245fa:	429e      	cmp	r6, r3
 80245fc:	bfd4      	ite	le
 80245fe:	ebc7 0706 	rsble	r7, r7, r6
 8024602:	ebc7 0703 	rsbgt	r7, r7, r3
 8024606:	2f00      	cmp	r7, #0
 8024608:	f340 80ec 	ble.w	80247e4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x344>
 802460c:	1bed      	subs	r5, r5, r7
 802460e:	fb08 f305 	mul.w	r3, r8, r5
 8024612:	930d      	str	r3, [sp, #52]	; 0x34
 8024614:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8024616:	f3c3 4307 	ubfx	r3, r3, #16, #8
 802461a:	930e      	str	r3, [sp, #56]	; 0x38
 802461c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802461e:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8024622:	930f      	str	r3, [sp, #60]	; 0x3c
 8024624:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8024626:	b2db      	uxtb	r3, r3
 8024628:	9310      	str	r3, [sp, #64]	; 0x40
 802462a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802462c:	2b00      	cmp	r3, #0
 802462e:	f040 80de 	bne.w	80247ee <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x34e>
 8024632:	4b7d      	ldr	r3, [pc, #500]	; (8024828 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x388>)
 8024634:	6818      	ldr	r0, [r3, #0]
 8024636:	6803      	ldr	r3, [r0, #0]
 8024638:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802463a:	4798      	blx	r3
 802463c:	2301      	movs	r3, #1
 802463e:	4a7b      	ldr	r2, [pc, #492]	; (802482c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x38c>)
 8024640:	eb0b 064b 	add.w	r6, fp, fp, lsl #1
 8024644:	fb07 9b1b 	mls	fp, r7, fp, r9
 8024648:	fa03 f308 	lsl.w	r3, r3, r8
 802464c:	8811      	ldrh	r1, [r2, #0]
 802464e:	f9bd 2054 	ldrsh.w	r2, [sp, #84]	; 0x54
 8024652:	eb0b 0b4b 	add.w	fp, fp, fp, lsl #1
 8024656:	3b01      	subs	r3, #1
 8024658:	fb06 bb07 	mla	fp, r6, r7, fp
 802465c:	b2db      	uxtb	r3, r3
 802465e:	930a      	str	r3, [sp, #40]	; 0x28
 8024660:	f9bd 3056 	ldrsh.w	r3, [sp, #86]	; 0x56
 8024664:	fb01 2303 	mla	r3, r1, r3, r2
 8024668:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 802466c:	18c3      	adds	r3, r0, r3
 802466e:	9309      	str	r3, [sp, #36]	; 0x24
 8024670:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8024672:	781a      	ldrb	r2, [r3, #0]
 8024674:	4122      	asrs	r2, r4
 8024676:	b2d2      	uxtb	r2, r2
 8024678:	f11a 3aff 	adds.w	sl, sl, #4294967295
 802467c:	f0c0 80d8 	bcc.w	8024830 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x390>
 8024680:	46be      	mov	lr, r7
 8024682:	9909      	ldr	r1, [sp, #36]	; 0x24
 8024684:	f11e 3eff 	adds.w	lr, lr, #4294967295
 8024688:	f0c0 80ba 	bcc.w	8024800 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x360>
 802468c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802468e:	4013      	ands	r3, r2
 8024690:	d041      	beq.n	8024716 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x276>
 8024692:	20ff      	movs	r0, #255	; 0xff
 8024694:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8024696:	fb90 f5f5 	sdiv	r5, r0, r5
 802469a:	436b      	muls	r3, r5
 802469c:	2bfe      	cmp	r3, #254	; 0xfe
 802469e:	dd03      	ble.n	80246a8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x208>
 80246a0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80246a2:	4285      	cmp	r5, r0
 80246a4:	f000 80a5 	beq.w	80247f2 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x352>
 80246a8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80246aa:	9810      	ldr	r0, [sp, #64]	; 0x40
 80246ac:	fb15 f303 	smulbb	r3, r5, r3
 80246b0:	b29b      	uxth	r3, r3
 80246b2:	1c5d      	adds	r5, r3, #1
 80246b4:	eb05 2313 	add.w	r3, r5, r3, lsr #8
 80246b8:	780d      	ldrb	r5, [r1, #0]
 80246ba:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80246be:	fa1f fc83 	uxth.w	ip, r3
 80246c2:	43db      	mvns	r3, r3
 80246c4:	fb10 f90c 	smulbb	r9, r0, ip
 80246c8:	b2db      	uxtb	r3, r3
 80246ca:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80246cc:	fb05 9503 	mla	r5, r5, r3, r9
 80246d0:	b2ad      	uxth	r5, r5
 80246d2:	f105 0901 	add.w	r9, r5, #1
 80246d6:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 80246da:	fb10 f90c 	smulbb	r9, r0, ip
 80246de:	980e      	ldr	r0, [sp, #56]	; 0x38
 80246e0:	122d      	asrs	r5, r5, #8
 80246e2:	fb10 fc0c 	smulbb	ip, r0, ip
 80246e6:	700d      	strb	r5, [r1, #0]
 80246e8:	784d      	ldrb	r5, [r1, #1]
 80246ea:	fb05 9503 	mla	r5, r5, r3, r9
 80246ee:	b2ad      	uxth	r5, r5
 80246f0:	f105 0901 	add.w	r9, r5, #1
 80246f4:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 80246f8:	122d      	asrs	r5, r5, #8
 80246fa:	704d      	strb	r5, [r1, #1]
 80246fc:	788d      	ldrb	r5, [r1, #2]
 80246fe:	fb05 cc03 	mla	ip, r5, r3, ip
 8024702:	fa1f fc8c 	uxth.w	ip, ip
 8024706:	f10c 0301 	add.w	r3, ip, #1
 802470a:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 802470e:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8024712:	f881 c002 	strb.w	ip, [r1, #2]
 8024716:	4444      	add	r4, r8
 8024718:	4431      	add	r1, r6
 802471a:	b2a4      	uxth	r4, r4
 802471c:	2c07      	cmp	r4, #7
 802471e:	bf89      	itett	hi
 8024720:	9b26      	ldrhi	r3, [sp, #152]	; 0x98
 8024722:	fa42 f208 	asrls.w	r2, r2, r8
 8024726:	2400      	movhi	r4, #0
 8024728:	785a      	ldrbhi	r2, [r3, #1]
 802472a:	bf8a      	itet	hi
 802472c:	3301      	addhi	r3, #1
 802472e:	b2d2      	uxtbls	r2, r2
 8024730:	9326      	strhi	r3, [sp, #152]	; 0x98
 8024732:	e7a7      	b.n	8024684 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1e4>
 8024734:	441e      	add	r6, r3
 8024736:	b236      	sxth	r6, r6
 8024738:	e6ec      	b.n	8024514 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 802473a:	f1b9 0f01 	cmp.w	r9, #1
 802473e:	f47f af27 	bne.w	8024590 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8024742:	f1bb 0f01 	cmp.w	fp, #1
 8024746:	f47f af23 	bne.w	8024590 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 802474a:	f8df b0dc 	ldr.w	fp, [pc, #220]	; 8024828 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x388>
 802474e:	f8db 0000 	ldr.w	r0, [fp]
 8024752:	6803      	ldr	r3, [r0, #0]
 8024754:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8024756:	4798      	blx	r3
 8024758:	f410 7380 	ands.w	r3, r0, #256	; 0x100
 802475c:	465a      	mov	r2, fp
 802475e:	d006      	beq.n	802476e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2ce>
 8024760:	f1b8 0f04 	cmp.w	r8, #4
 8024764:	d141      	bne.n	80247ea <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x34a>
 8024766:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8024768:	3300      	adds	r3, #0
 802476a:	bf18      	it	ne
 802476c:	2301      	movne	r3, #1
 802476e:	0580      	lsls	r0, r0, #22
 8024770:	d567      	bpl.n	8024842 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a2>
 8024772:	f1b8 0f08 	cmp.w	r8, #8
 8024776:	d164      	bne.n	8024842 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a2>
 8024778:	2b00      	cmp	r3, #0
 802477a:	bf0c      	ite	eq
 802477c:	f44f 7100 	moveq.w	r1, #512	; 0x200
 8024780:	f44f 7180 	movne.w	r1, #256	; 0x100
 8024784:	2f00      	cmp	r7, #0
 8024786:	f47f af03 	bne.w	8024590 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 802478a:	2c00      	cmp	r4, #0
 802478c:	f47f af00 	bne.w	8024590 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8024790:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024792:	9810      	ldr	r0, [sp, #64]	; 0x40
 8024794:	18f3      	adds	r3, r6, r3
 8024796:	4283      	cmp	r3, r0
 8024798:	f73f aefa 	bgt.w	8024590 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 802479c:	980a      	ldr	r0, [sp, #40]	; 0x28
 802479e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80247a0:	4403      	add	r3, r0
 80247a2:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80247a4:	4283      	cmp	r3, r0
 80247a6:	f73f aef3 	bgt.w	8024590 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 80247aa:	f1b8 0f08 	cmp.w	r8, #8
 80247ae:	6810      	ldr	r0, [r2, #0]
 80247b0:	f04f 0600 	mov.w	r6, #0
 80247b4:	f8bd 3056 	ldrh.w	r3, [sp, #86]	; 0x56
 80247b8:	bf18      	it	ne
 80247ba:	3501      	addne	r5, #1
 80247bc:	6804      	ldr	r4, [r0, #0]
 80247be:	f8bd 2054 	ldrh.w	r2, [sp, #84]	; 0x54
 80247c2:	bf18      	it	ne
 80247c4:	f025 0501 	bicne.w	r5, r5, #1
 80247c8:	e9cd 1605 	strd	r1, r6, [sp, #20]
 80247cc:	990c      	ldr	r1, [sp, #48]	; 0x30
 80247ce:	bf18      	it	ne
 80247d0:	b2ad      	uxthne	r5, r5
 80247d2:	9104      	str	r1, [sp, #16]
 80247d4:	9928      	ldr	r1, [sp, #160]	; 0xa0
 80247d6:	e9cd 5a00 	strd	r5, sl, [sp]
 80247da:	e9cd 5102 	strd	r5, r1, [sp, #8]
 80247de:	9926      	ldr	r1, [sp, #152]	; 0x98
 80247e0:	6d64      	ldr	r4, [r4, #84]	; 0x54
 80247e2:	47a0      	blx	r4
 80247e4:	b017      	add	sp, #92	; 0x5c
 80247e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80247ea:	2300      	movs	r3, #0
 80247ec:	e7bf      	b.n	802476e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2ce>
 80247ee:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80247f0:	e724      	b.n	802463c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x19c>
 80247f2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80247f4:	700b      	strb	r3, [r1, #0]
 80247f6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80247f8:	704b      	strb	r3, [r1, #1]
 80247fa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80247fc:	708b      	strb	r3, [r1, #2]
 80247fe:	e78a      	b.n	8024716 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x276>
 8024800:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8024802:	b153      	cbz	r3, 802481a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x37a>
 8024804:	441c      	add	r4, r3
 8024806:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8024808:	b2a4      	uxth	r4, r4
 802480a:	eb03 03d4 	add.w	r3, r3, r4, lsr #3
 802480e:	f004 0407 	and.w	r4, r4, #7
 8024812:	781a      	ldrb	r2, [r3, #0]
 8024814:	9326      	str	r3, [sp, #152]	; 0x98
 8024816:	4122      	asrs	r2, r4
 8024818:	b2d2      	uxtb	r2, r2
 802481a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802481c:	445b      	add	r3, fp
 802481e:	9309      	str	r3, [sp, #36]	; 0x24
 8024820:	e72a      	b.n	8024678 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1d8>
 8024822:	bf00      	nop
 8024824:	2400c8b4 	.word	0x2400c8b4
 8024828:	2400c8bc 	.word	0x2400c8bc
 802482c:	2400c8b6 	.word	0x2400c8b6
 8024830:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8024832:	2b00      	cmp	r3, #0
 8024834:	d1d6      	bne.n	80247e4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x344>
 8024836:	4b06      	ldr	r3, [pc, #24]	; (8024850 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3b0>)
 8024838:	6818      	ldr	r0, [r3, #0]
 802483a:	6803      	ldr	r3, [r0, #0]
 802483c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802483e:	4798      	blx	r3
 8024840:	e7d0      	b.n	80247e4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x344>
 8024842:	2b00      	cmp	r3, #0
 8024844:	f43f aea4 	beq.w	8024590 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8024848:	f44f 7180 	mov.w	r1, #256	; 0x100
 802484c:	e79a      	b.n	8024784 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2e4>
 802484e:	bf00      	nop
 8024850:	2400c8bc 	.word	0x2400c8bc

08024854 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>:
 8024854:	b538      	push	{r3, r4, r5, lr}
 8024856:	4c15      	ldr	r4, [pc, #84]	; (80248ac <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
 8024858:	4605      	mov	r5, r0
 802485a:	7823      	ldrb	r3, [r4, #0]
 802485c:	f3bf 8f5b 	dmb	ish
 8024860:	07da      	lsls	r2, r3, #31
 8024862:	d40b      	bmi.n	802487c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 8024864:	4620      	mov	r0, r4
 8024866:	f006 fe34 	bl	802b4d2 <__cxa_guard_acquire>
 802486a:	b138      	cbz	r0, 802487c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 802486c:	4620      	mov	r0, r4
 802486e:	f006 fe3c 	bl	802b4ea <__cxa_guard_release>
 8024872:	4a0f      	ldr	r2, [pc, #60]	; (80248b0 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 8024874:	490f      	ldr	r1, [pc, #60]	; (80248b4 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
 8024876:	4810      	ldr	r0, [pc, #64]	; (80248b8 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 8024878:	f006 fe24 	bl	802b4c4 <__aeabi_atexit>
 802487c:	4c0f      	ldr	r4, [pc, #60]	; (80248bc <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x68>)
 802487e:	7823      	ldrb	r3, [r4, #0]
 8024880:	f3bf 8f5b 	dmb	ish
 8024884:	07db      	lsls	r3, r3, #31
 8024886:	d40b      	bmi.n	80248a0 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 8024888:	4620      	mov	r0, r4
 802488a:	f006 fe22 	bl	802b4d2 <__cxa_guard_acquire>
 802488e:	b138      	cbz	r0, 80248a0 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 8024890:	4620      	mov	r0, r4
 8024892:	f006 fe2a 	bl	802b4ea <__cxa_guard_release>
 8024896:	4a06      	ldr	r2, [pc, #24]	; (80248b0 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 8024898:	4909      	ldr	r1, [pc, #36]	; (80248c0 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
 802489a:	480a      	ldr	r0, [pc, #40]	; (80248c4 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 802489c:	f006 fe12 	bl	802b4c4 <__aeabi_atexit>
 80248a0:	4b05      	ldr	r3, [pc, #20]	; (80248b8 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 80248a2:	612b      	str	r3, [r5, #16]
 80248a4:	4b07      	ldr	r3, [pc, #28]	; (80248c4 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 80248a6:	616b      	str	r3, [r5, #20]
 80248a8:	bd38      	pop	{r3, r4, r5, pc}
 80248aa:	bf00      	nop
 80248ac:	2400c9a8 	.word	0x2400c9a8
 80248b0:	24000000 	.word	0x24000000
 80248b4:	080232df 	.word	0x080232df
 80248b8:	24000094 	.word	0x24000094
 80248bc:	2400c9ac 	.word	0x2400c9ac
 80248c0:	080232dd 	.word	0x080232dd
 80248c4:	24000098 	.word	0x24000098

080248c8 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>:
 80248c8:	b538      	push	{r3, r4, r5, lr}
 80248ca:	4c15      	ldr	r4, [pc, #84]	; (8024920 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
 80248cc:	4605      	mov	r5, r0
 80248ce:	7823      	ldrb	r3, [r4, #0]
 80248d0:	f3bf 8f5b 	dmb	ish
 80248d4:	07da      	lsls	r2, r3, #31
 80248d6:	d40b      	bmi.n	80248f0 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 80248d8:	4620      	mov	r0, r4
 80248da:	f006 fdfa 	bl	802b4d2 <__cxa_guard_acquire>
 80248de:	b138      	cbz	r0, 80248f0 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 80248e0:	4620      	mov	r0, r4
 80248e2:	f006 fe02 	bl	802b4ea <__cxa_guard_release>
 80248e6:	4a0f      	ldr	r2, [pc, #60]	; (8024924 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 80248e8:	490f      	ldr	r1, [pc, #60]	; (8024928 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
 80248ea:	4810      	ldr	r0, [pc, #64]	; (802492c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 80248ec:	f006 fdea 	bl	802b4c4 <__aeabi_atexit>
 80248f0:	4c0f      	ldr	r4, [pc, #60]	; (8024930 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x68>)
 80248f2:	7823      	ldrb	r3, [r4, #0]
 80248f4:	f3bf 8f5b 	dmb	ish
 80248f8:	07db      	lsls	r3, r3, #31
 80248fa:	d40b      	bmi.n	8024914 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 80248fc:	4620      	mov	r0, r4
 80248fe:	f006 fde8 	bl	802b4d2 <__cxa_guard_acquire>
 8024902:	b138      	cbz	r0, 8024914 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 8024904:	4620      	mov	r0, r4
 8024906:	f006 fdf0 	bl	802b4ea <__cxa_guard_release>
 802490a:	4a06      	ldr	r2, [pc, #24]	; (8024924 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 802490c:	4909      	ldr	r1, [pc, #36]	; (8024934 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
 802490e:	480a      	ldr	r0, [pc, #40]	; (8024938 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 8024910:	f006 fdd8 	bl	802b4c4 <__aeabi_atexit>
 8024914:	4b05      	ldr	r3, [pc, #20]	; (802492c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 8024916:	60ab      	str	r3, [r5, #8]
 8024918:	4b07      	ldr	r3, [pc, #28]	; (8024938 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 802491a:	60eb      	str	r3, [r5, #12]
 802491c:	bd38      	pop	{r3, r4, r5, pc}
 802491e:	bf00      	nop
 8024920:	2400c988 	.word	0x2400c988
 8024924:	24000000 	.word	0x24000000
 8024928:	080232e3 	.word	0x080232e3
 802492c:	24000074 	.word	0x24000074
 8024930:	2400c98c 	.word	0x2400c98c
 8024934:	080232e1 	.word	0x080232e1
 8024938:	24000078 	.word	0x24000078

0802493c <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>:
 802493c:	b510      	push	{r4, lr}
 802493e:	4604      	mov	r4, r0
 8024940:	f7ff ff88 	bl	8024854 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>
 8024944:	4620      	mov	r0, r4
 8024946:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802494a:	f7ff bfbd 	b.w	80248c8 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>
	...

08024950 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>:
 8024950:	b538      	push	{r3, r4, r5, lr}
 8024952:	4c15      	ldr	r4, [pc, #84]	; (80249a8 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x58>)
 8024954:	4605      	mov	r5, r0
 8024956:	7823      	ldrb	r3, [r4, #0]
 8024958:	f3bf 8f5b 	dmb	ish
 802495c:	07da      	lsls	r2, r3, #31
 802495e:	d40b      	bmi.n	8024978 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 8024960:	4620      	mov	r0, r4
 8024962:	f006 fdb6 	bl	802b4d2 <__cxa_guard_acquire>
 8024966:	b138      	cbz	r0, 8024978 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 8024968:	4620      	mov	r0, r4
 802496a:	f006 fdbe 	bl	802b4ea <__cxa_guard_release>
 802496e:	4a0f      	ldr	r2, [pc, #60]	; (80249ac <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 8024970:	490f      	ldr	r1, [pc, #60]	; (80249b0 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x60>)
 8024972:	4810      	ldr	r0, [pc, #64]	; (80249b4 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 8024974:	f006 fda6 	bl	802b4c4 <__aeabi_atexit>
 8024978:	4c0f      	ldr	r4, [pc, #60]	; (80249b8 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x68>)
 802497a:	7823      	ldrb	r3, [r4, #0]
 802497c:	f3bf 8f5b 	dmb	ish
 8024980:	07db      	lsls	r3, r3, #31
 8024982:	d40b      	bmi.n	802499c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 8024984:	4620      	mov	r0, r4
 8024986:	f006 fda4 	bl	802b4d2 <__cxa_guard_acquire>
 802498a:	b138      	cbz	r0, 802499c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 802498c:	4620      	mov	r0, r4
 802498e:	f006 fdac 	bl	802b4ea <__cxa_guard_release>
 8024992:	4a06      	ldr	r2, [pc, #24]	; (80249ac <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 8024994:	4909      	ldr	r1, [pc, #36]	; (80249bc <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x6c>)
 8024996:	480a      	ldr	r0, [pc, #40]	; (80249c0 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 8024998:	f006 fd94 	bl	802b4c4 <__aeabi_atexit>
 802499c:	4b05      	ldr	r3, [pc, #20]	; (80249b4 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 802499e:	622b      	str	r3, [r5, #32]
 80249a0:	4b07      	ldr	r3, [pc, #28]	; (80249c0 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 80249a2:	626b      	str	r3, [r5, #36]	; 0x24
 80249a4:	bd38      	pop	{r3, r4, r5, pc}
 80249a6:	bf00      	nop
 80249a8:	2400c9b0 	.word	0x2400c9b0
 80249ac:	24000000 	.word	0x24000000
 80249b0:	080232d7 	.word	0x080232d7
 80249b4:	2400009c 	.word	0x2400009c
 80249b8:	2400c9b4 	.word	0x2400c9b4
 80249bc:	080232d5 	.word	0x080232d5
 80249c0:	240000a0 	.word	0x240000a0

080249c4 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>:
 80249c4:	b538      	push	{r3, r4, r5, lr}
 80249c6:	4c15      	ldr	r4, [pc, #84]	; (8024a1c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x58>)
 80249c8:	4605      	mov	r5, r0
 80249ca:	7823      	ldrb	r3, [r4, #0]
 80249cc:	f3bf 8f5b 	dmb	ish
 80249d0:	07da      	lsls	r2, r3, #31
 80249d2:	d40b      	bmi.n	80249ec <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 80249d4:	4620      	mov	r0, r4
 80249d6:	f006 fd7c 	bl	802b4d2 <__cxa_guard_acquire>
 80249da:	b138      	cbz	r0, 80249ec <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 80249dc:	4620      	mov	r0, r4
 80249de:	f006 fd84 	bl	802b4ea <__cxa_guard_release>
 80249e2:	4a0f      	ldr	r2, [pc, #60]	; (8024a20 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 80249e4:	490f      	ldr	r1, [pc, #60]	; (8024a24 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x60>)
 80249e6:	4810      	ldr	r0, [pc, #64]	; (8024a28 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 80249e8:	f006 fd6c 	bl	802b4c4 <__aeabi_atexit>
 80249ec:	4c0f      	ldr	r4, [pc, #60]	; (8024a2c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x68>)
 80249ee:	7823      	ldrb	r3, [r4, #0]
 80249f0:	f3bf 8f5b 	dmb	ish
 80249f4:	07db      	lsls	r3, r3, #31
 80249f6:	d40b      	bmi.n	8024a10 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 80249f8:	4620      	mov	r0, r4
 80249fa:	f006 fd6a 	bl	802b4d2 <__cxa_guard_acquire>
 80249fe:	b138      	cbz	r0, 8024a10 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 8024a00:	4620      	mov	r0, r4
 8024a02:	f006 fd72 	bl	802b4ea <__cxa_guard_release>
 8024a06:	4a06      	ldr	r2, [pc, #24]	; (8024a20 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 8024a08:	4909      	ldr	r1, [pc, #36]	; (8024a30 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x6c>)
 8024a0a:	480a      	ldr	r0, [pc, #40]	; (8024a34 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 8024a0c:	f006 fd5a 	bl	802b4c4 <__aeabi_atexit>
 8024a10:	4b05      	ldr	r3, [pc, #20]	; (8024a28 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 8024a12:	61ab      	str	r3, [r5, #24]
 8024a14:	4b07      	ldr	r3, [pc, #28]	; (8024a34 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 8024a16:	61eb      	str	r3, [r5, #28]
 8024a18:	bd38      	pop	{r3, r4, r5, pc}
 8024a1a:	bf00      	nop
 8024a1c:	2400c990 	.word	0x2400c990
 8024a20:	24000000 	.word	0x24000000
 8024a24:	080232db 	.word	0x080232db
 8024a28:	2400007c 	.word	0x2400007c
 8024a2c:	2400c994 	.word	0x2400c994
 8024a30:	080232d9 	.word	0x080232d9
 8024a34:	24000080 	.word	0x24000080

08024a38 <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>:
 8024a38:	b510      	push	{r4, lr}
 8024a3a:	4604      	mov	r4, r0
 8024a3c:	f7ff ff88 	bl	8024950 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>
 8024a40:	4620      	mov	r0, r4
 8024a42:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8024a46:	f7ff bfbd 	b.w	80249c4 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>
	...

08024a4c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>:
 8024a4c:	b538      	push	{r3, r4, r5, lr}
 8024a4e:	4c15      	ldr	r4, [pc, #84]	; (8024aa4 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x58>)
 8024a50:	4605      	mov	r5, r0
 8024a52:	7823      	ldrb	r3, [r4, #0]
 8024a54:	f3bf 8f5b 	dmb	ish
 8024a58:	07da      	lsls	r2, r3, #31
 8024a5a:	d40b      	bmi.n	8024a74 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 8024a5c:	4620      	mov	r0, r4
 8024a5e:	f006 fd38 	bl	802b4d2 <__cxa_guard_acquire>
 8024a62:	b138      	cbz	r0, 8024a74 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 8024a64:	4620      	mov	r0, r4
 8024a66:	f006 fd40 	bl	802b4ea <__cxa_guard_release>
 8024a6a:	4a0f      	ldr	r2, [pc, #60]	; (8024aa8 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 8024a6c:	490f      	ldr	r1, [pc, #60]	; (8024aac <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x60>)
 8024a6e:	4810      	ldr	r0, [pc, #64]	; (8024ab0 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 8024a70:	f006 fd28 	bl	802b4c4 <__aeabi_atexit>
 8024a74:	4c0f      	ldr	r4, [pc, #60]	; (8024ab4 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x68>)
 8024a76:	7823      	ldrb	r3, [r4, #0]
 8024a78:	f3bf 8f5b 	dmb	ish
 8024a7c:	07db      	lsls	r3, r3, #31
 8024a7e:	d40b      	bmi.n	8024a98 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 8024a80:	4620      	mov	r0, r4
 8024a82:	f006 fd26 	bl	802b4d2 <__cxa_guard_acquire>
 8024a86:	b138      	cbz	r0, 8024a98 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 8024a88:	4620      	mov	r0, r4
 8024a8a:	f006 fd2e 	bl	802b4ea <__cxa_guard_release>
 8024a8e:	4a06      	ldr	r2, [pc, #24]	; (8024aa8 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 8024a90:	4909      	ldr	r1, [pc, #36]	; (8024ab8 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x6c>)
 8024a92:	480a      	ldr	r0, [pc, #40]	; (8024abc <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 8024a94:	f006 fd16 	bl	802b4c4 <__aeabi_atexit>
 8024a98:	4b05      	ldr	r3, [pc, #20]	; (8024ab0 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 8024a9a:	632b      	str	r3, [r5, #48]	; 0x30
 8024a9c:	4b07      	ldr	r3, [pc, #28]	; (8024abc <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 8024a9e:	636b      	str	r3, [r5, #52]	; 0x34
 8024aa0:	bd38      	pop	{r3, r4, r5, pc}
 8024aa2:	bf00      	nop
 8024aa4:	2400c998 	.word	0x2400c998
 8024aa8:	24000000 	.word	0x24000000
 8024aac:	080232cf 	.word	0x080232cf
 8024ab0:	24000084 	.word	0x24000084
 8024ab4:	2400c99c 	.word	0x2400c99c
 8024ab8:	080232cd 	.word	0x080232cd
 8024abc:	24000088 	.word	0x24000088

08024ac0 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>:
 8024ac0:	b538      	push	{r3, r4, r5, lr}
 8024ac2:	4c15      	ldr	r4, [pc, #84]	; (8024b18 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x58>)
 8024ac4:	4605      	mov	r5, r0
 8024ac6:	7823      	ldrb	r3, [r4, #0]
 8024ac8:	f3bf 8f5b 	dmb	ish
 8024acc:	07da      	lsls	r2, r3, #31
 8024ace:	d40b      	bmi.n	8024ae8 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 8024ad0:	4620      	mov	r0, r4
 8024ad2:	f006 fcfe 	bl	802b4d2 <__cxa_guard_acquire>
 8024ad6:	b138      	cbz	r0, 8024ae8 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 8024ad8:	4620      	mov	r0, r4
 8024ada:	f006 fd06 	bl	802b4ea <__cxa_guard_release>
 8024ade:	4a0f      	ldr	r2, [pc, #60]	; (8024b1c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 8024ae0:	490f      	ldr	r1, [pc, #60]	; (8024b20 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x60>)
 8024ae2:	4810      	ldr	r0, [pc, #64]	; (8024b24 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 8024ae4:	f006 fcee 	bl	802b4c4 <__aeabi_atexit>
 8024ae8:	4c0f      	ldr	r4, [pc, #60]	; (8024b28 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x68>)
 8024aea:	7823      	ldrb	r3, [r4, #0]
 8024aec:	f3bf 8f5b 	dmb	ish
 8024af0:	07db      	lsls	r3, r3, #31
 8024af2:	d40b      	bmi.n	8024b0c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 8024af4:	4620      	mov	r0, r4
 8024af6:	f006 fcec 	bl	802b4d2 <__cxa_guard_acquire>
 8024afa:	b138      	cbz	r0, 8024b0c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 8024afc:	4620      	mov	r0, r4
 8024afe:	f006 fcf4 	bl	802b4ea <__cxa_guard_release>
 8024b02:	4a06      	ldr	r2, [pc, #24]	; (8024b1c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 8024b04:	4909      	ldr	r1, [pc, #36]	; (8024b2c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x6c>)
 8024b06:	480a      	ldr	r0, [pc, #40]	; (8024b30 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 8024b08:	f006 fcdc 	bl	802b4c4 <__aeabi_atexit>
 8024b0c:	4b05      	ldr	r3, [pc, #20]	; (8024b24 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 8024b0e:	62ab      	str	r3, [r5, #40]	; 0x28
 8024b10:	4b07      	ldr	r3, [pc, #28]	; (8024b30 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 8024b12:	62eb      	str	r3, [r5, #44]	; 0x2c
 8024b14:	bd38      	pop	{r3, r4, r5, pc}
 8024b16:	bf00      	nop
 8024b18:	2400c970 	.word	0x2400c970
 8024b1c:	24000000 	.word	0x24000000
 8024b20:	080232d3 	.word	0x080232d3
 8024b24:	2400005c 	.word	0x2400005c
 8024b28:	2400c974 	.word	0x2400c974
 8024b2c:	080232d1 	.word	0x080232d1
 8024b30:	24000060 	.word	0x24000060

08024b34 <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>:
 8024b34:	b510      	push	{r4, lr}
 8024b36:	4604      	mov	r4, r0
 8024b38:	f7ff ff88 	bl	8024a4c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>
 8024b3c:	4620      	mov	r0, r4
 8024b3e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8024b42:	f7ff bfbd 	b.w	8024ac0 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>
	...

08024b48 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>:
 8024b48:	b538      	push	{r3, r4, r5, lr}
 8024b4a:	4c15      	ldr	r4, [pc, #84]	; (8024ba0 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
 8024b4c:	4605      	mov	r5, r0
 8024b4e:	7823      	ldrb	r3, [r4, #0]
 8024b50:	f3bf 8f5b 	dmb	ish
 8024b54:	07da      	lsls	r2, r3, #31
 8024b56:	d40b      	bmi.n	8024b70 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 8024b58:	4620      	mov	r0, r4
 8024b5a:	f006 fcba 	bl	802b4d2 <__cxa_guard_acquire>
 8024b5e:	b138      	cbz	r0, 8024b70 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 8024b60:	4620      	mov	r0, r4
 8024b62:	f006 fcc2 	bl	802b4ea <__cxa_guard_release>
 8024b66:	4a0f      	ldr	r2, [pc, #60]	; (8024ba4 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 8024b68:	490f      	ldr	r1, [pc, #60]	; (8024ba8 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
 8024b6a:	4810      	ldr	r0, [pc, #64]	; (8024bac <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 8024b6c:	f006 fcaa 	bl	802b4c4 <__aeabi_atexit>
 8024b70:	4c0f      	ldr	r4, [pc, #60]	; (8024bb0 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x68>)
 8024b72:	7823      	ldrb	r3, [r4, #0]
 8024b74:	f3bf 8f5b 	dmb	ish
 8024b78:	07db      	lsls	r3, r3, #31
 8024b7a:	d40b      	bmi.n	8024b94 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 8024b7c:	4620      	mov	r0, r4
 8024b7e:	f006 fca8 	bl	802b4d2 <__cxa_guard_acquire>
 8024b82:	b138      	cbz	r0, 8024b94 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 8024b84:	4620      	mov	r0, r4
 8024b86:	f006 fcb0 	bl	802b4ea <__cxa_guard_release>
 8024b8a:	4a06      	ldr	r2, [pc, #24]	; (8024ba4 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 8024b8c:	4909      	ldr	r1, [pc, #36]	; (8024bb4 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
 8024b8e:	480a      	ldr	r0, [pc, #40]	; (8024bb8 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 8024b90:	f006 fc98 	bl	802b4c4 <__aeabi_atexit>
 8024b94:	4b05      	ldr	r3, [pc, #20]	; (8024bac <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 8024b96:	642b      	str	r3, [r5, #64]	; 0x40
 8024b98:	4b07      	ldr	r3, [pc, #28]	; (8024bb8 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 8024b9a:	646b      	str	r3, [r5, #68]	; 0x44
 8024b9c:	bd38      	pop	{r3, r4, r5, pc}
 8024b9e:	bf00      	nop
 8024ba0:	2400c9a0 	.word	0x2400c9a0
 8024ba4:	24000000 	.word	0x24000000
 8024ba8:	080232c7 	.word	0x080232c7
 8024bac:	2400008c 	.word	0x2400008c
 8024bb0:	2400c9a4 	.word	0x2400c9a4
 8024bb4:	080232c5 	.word	0x080232c5
 8024bb8:	24000090 	.word	0x24000090

08024bbc <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>:
 8024bbc:	b538      	push	{r3, r4, r5, lr}
 8024bbe:	4c15      	ldr	r4, [pc, #84]	; (8024c14 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
 8024bc0:	4605      	mov	r5, r0
 8024bc2:	7823      	ldrb	r3, [r4, #0]
 8024bc4:	f3bf 8f5b 	dmb	ish
 8024bc8:	07da      	lsls	r2, r3, #31
 8024bca:	d40b      	bmi.n	8024be4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 8024bcc:	4620      	mov	r0, r4
 8024bce:	f006 fc80 	bl	802b4d2 <__cxa_guard_acquire>
 8024bd2:	b138      	cbz	r0, 8024be4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 8024bd4:	4620      	mov	r0, r4
 8024bd6:	f006 fc88 	bl	802b4ea <__cxa_guard_release>
 8024bda:	4a0f      	ldr	r2, [pc, #60]	; (8024c18 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 8024bdc:	490f      	ldr	r1, [pc, #60]	; (8024c1c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
 8024bde:	4810      	ldr	r0, [pc, #64]	; (8024c20 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 8024be0:	f006 fc70 	bl	802b4c4 <__aeabi_atexit>
 8024be4:	4c0f      	ldr	r4, [pc, #60]	; (8024c24 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x68>)
 8024be6:	7823      	ldrb	r3, [r4, #0]
 8024be8:	f3bf 8f5b 	dmb	ish
 8024bec:	07db      	lsls	r3, r3, #31
 8024bee:	d40b      	bmi.n	8024c08 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 8024bf0:	4620      	mov	r0, r4
 8024bf2:	f006 fc6e 	bl	802b4d2 <__cxa_guard_acquire>
 8024bf6:	b138      	cbz	r0, 8024c08 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 8024bf8:	4620      	mov	r0, r4
 8024bfa:	f006 fc76 	bl	802b4ea <__cxa_guard_release>
 8024bfe:	4a06      	ldr	r2, [pc, #24]	; (8024c18 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 8024c00:	4909      	ldr	r1, [pc, #36]	; (8024c28 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
 8024c02:	480a      	ldr	r0, [pc, #40]	; (8024c2c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 8024c04:	f006 fc5e 	bl	802b4c4 <__aeabi_atexit>
 8024c08:	4b05      	ldr	r3, [pc, #20]	; (8024c20 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 8024c0a:	63ab      	str	r3, [r5, #56]	; 0x38
 8024c0c:	4b07      	ldr	r3, [pc, #28]	; (8024c2c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 8024c0e:	63eb      	str	r3, [r5, #60]	; 0x3c
 8024c10:	bd38      	pop	{r3, r4, r5, pc}
 8024c12:	bf00      	nop
 8024c14:	2400c980 	.word	0x2400c980
 8024c18:	24000000 	.word	0x24000000
 8024c1c:	080232cb 	.word	0x080232cb
 8024c20:	2400006c 	.word	0x2400006c
 8024c24:	2400c984 	.word	0x2400c984
 8024c28:	080232c9 	.word	0x080232c9
 8024c2c:	24000070 	.word	0x24000070

08024c30 <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>:
 8024c30:	b510      	push	{r4, lr}
 8024c32:	4604      	mov	r4, r0
 8024c34:	f7ff ff88 	bl	8024b48 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>
 8024c38:	4620      	mov	r0, r4
 8024c3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8024c3e:	f7ff bfbd 	b.w	8024bbc <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>
	...

08024c44 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>:
 8024c44:	b538      	push	{r3, r4, r5, lr}
 8024c46:	4c15      	ldr	r4, [pc, #84]	; (8024c9c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
 8024c48:	4605      	mov	r5, r0
 8024c4a:	7823      	ldrb	r3, [r4, #0]
 8024c4c:	f3bf 8f5b 	dmb	ish
 8024c50:	07da      	lsls	r2, r3, #31
 8024c52:	d40b      	bmi.n	8024c6c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 8024c54:	4620      	mov	r0, r4
 8024c56:	f006 fc3c 	bl	802b4d2 <__cxa_guard_acquire>
 8024c5a:	b138      	cbz	r0, 8024c6c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 8024c5c:	4620      	mov	r0, r4
 8024c5e:	f006 fc44 	bl	802b4ea <__cxa_guard_release>
 8024c62:	4a0f      	ldr	r2, [pc, #60]	; (8024ca0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 8024c64:	490f      	ldr	r1, [pc, #60]	; (8024ca4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
 8024c66:	4810      	ldr	r0, [pc, #64]	; (8024ca8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 8024c68:	f006 fc2c 	bl	802b4c4 <__aeabi_atexit>
 8024c6c:	4c0f      	ldr	r4, [pc, #60]	; (8024cac <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x68>)
 8024c6e:	7823      	ldrb	r3, [r4, #0]
 8024c70:	f3bf 8f5b 	dmb	ish
 8024c74:	07db      	lsls	r3, r3, #31
 8024c76:	d40b      	bmi.n	8024c90 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 8024c78:	4620      	mov	r0, r4
 8024c7a:	f006 fc2a 	bl	802b4d2 <__cxa_guard_acquire>
 8024c7e:	b138      	cbz	r0, 8024c90 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 8024c80:	4620      	mov	r0, r4
 8024c82:	f006 fc32 	bl	802b4ea <__cxa_guard_release>
 8024c86:	4a06      	ldr	r2, [pc, #24]	; (8024ca0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 8024c88:	4909      	ldr	r1, [pc, #36]	; (8024cb0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
 8024c8a:	480a      	ldr	r0, [pc, #40]	; (8024cb4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 8024c8c:	f006 fc1a 	bl	802b4c4 <__aeabi_atexit>
 8024c90:	4b05      	ldr	r3, [pc, #20]	; (8024ca8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 8024c92:	652b      	str	r3, [r5, #80]	; 0x50
 8024c94:	4b07      	ldr	r3, [pc, #28]	; (8024cb4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 8024c96:	656b      	str	r3, [r5, #84]	; 0x54
 8024c98:	bd38      	pop	{r3, r4, r5, pc}
 8024c9a:	bf00      	nop
 8024c9c:	2400c978 	.word	0x2400c978
 8024ca0:	24000000 	.word	0x24000000
 8024ca4:	080232bf 	.word	0x080232bf
 8024ca8:	24000064 	.word	0x24000064
 8024cac:	2400c97c 	.word	0x2400c97c
 8024cb0:	080232bd 	.word	0x080232bd
 8024cb4:	24000068 	.word	0x24000068

08024cb8 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>:
 8024cb8:	b538      	push	{r3, r4, r5, lr}
 8024cba:	4c15      	ldr	r4, [pc, #84]	; (8024d10 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
 8024cbc:	4605      	mov	r5, r0
 8024cbe:	7823      	ldrb	r3, [r4, #0]
 8024cc0:	f3bf 8f5b 	dmb	ish
 8024cc4:	07da      	lsls	r2, r3, #31
 8024cc6:	d40b      	bmi.n	8024ce0 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 8024cc8:	4620      	mov	r0, r4
 8024cca:	f006 fc02 	bl	802b4d2 <__cxa_guard_acquire>
 8024cce:	b138      	cbz	r0, 8024ce0 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 8024cd0:	4620      	mov	r0, r4
 8024cd2:	f006 fc0a 	bl	802b4ea <__cxa_guard_release>
 8024cd6:	4a0f      	ldr	r2, [pc, #60]	; (8024d14 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 8024cd8:	490f      	ldr	r1, [pc, #60]	; (8024d18 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
 8024cda:	4810      	ldr	r0, [pc, #64]	; (8024d1c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 8024cdc:	f006 fbf2 	bl	802b4c4 <__aeabi_atexit>
 8024ce0:	4c0f      	ldr	r4, [pc, #60]	; (8024d20 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x68>)
 8024ce2:	7823      	ldrb	r3, [r4, #0]
 8024ce4:	f3bf 8f5b 	dmb	ish
 8024ce8:	07db      	lsls	r3, r3, #31
 8024cea:	d40b      	bmi.n	8024d04 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 8024cec:	4620      	mov	r0, r4
 8024cee:	f006 fbf0 	bl	802b4d2 <__cxa_guard_acquire>
 8024cf2:	b138      	cbz	r0, 8024d04 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 8024cf4:	4620      	mov	r0, r4
 8024cf6:	f006 fbf8 	bl	802b4ea <__cxa_guard_release>
 8024cfa:	4a06      	ldr	r2, [pc, #24]	; (8024d14 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 8024cfc:	4909      	ldr	r1, [pc, #36]	; (8024d24 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
 8024cfe:	480a      	ldr	r0, [pc, #40]	; (8024d28 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 8024d00:	f006 fbe0 	bl	802b4c4 <__aeabi_atexit>
 8024d04:	4b05      	ldr	r3, [pc, #20]	; (8024d1c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 8024d06:	64ab      	str	r3, [r5, #72]	; 0x48
 8024d08:	4b07      	ldr	r3, [pc, #28]	; (8024d28 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 8024d0a:	64eb      	str	r3, [r5, #76]	; 0x4c
 8024d0c:	bd38      	pop	{r3, r4, r5, pc}
 8024d0e:	bf00      	nop
 8024d10:	2400c968 	.word	0x2400c968
 8024d14:	24000000 	.word	0x24000000
 8024d18:	080232c3 	.word	0x080232c3
 8024d1c:	24000054 	.word	0x24000054
 8024d20:	2400c96c 	.word	0x2400c96c
 8024d24:	080232c1 	.word	0x080232c1
 8024d28:	24000058 	.word	0x24000058

08024d2c <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>:
 8024d2c:	b510      	push	{r4, lr}
 8024d2e:	4604      	mov	r4, r0
 8024d30:	f7ff ff88 	bl	8024c44 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>
 8024d34:	4620      	mov	r0, r4
 8024d36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8024d3a:	f7ff bfbd 	b.w	8024cb8 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>

08024d3e <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>:
 8024d3e:	b510      	push	{r4, lr}
 8024d40:	4604      	mov	r4, r0
 8024d42:	f7ff fff3 	bl	8024d2c <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>
 8024d46:	4620      	mov	r0, r4
 8024d48:	f7ff ff72 	bl	8024c30 <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>
 8024d4c:	4620      	mov	r0, r4
 8024d4e:	f7ff fe73 	bl	8024a38 <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>
 8024d52:	4620      	mov	r0, r4
 8024d54:	f7ff fdf2 	bl	802493c <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>
 8024d58:	4620      	mov	r0, r4
 8024d5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8024d5e:	f7ff bee9 	b.w	8024b34 <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>
	...

08024d64 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>:
 8024d64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024d68:	b087      	sub	sp, #28
 8024d6a:	7888      	ldrb	r0, [r1, #2]
 8024d6c:	4616      	mov	r6, r2
 8024d6e:	9001      	str	r0, [sp, #4]
 8024d70:	7848      	ldrb	r0, [r1, #1]
 8024d72:	9100      	str	r1, [sp, #0]
 8024d74:	9002      	str	r0, [sp, #8]
 8024d76:	7808      	ldrb	r0, [r1, #0]
 8024d78:	9901      	ldr	r1, [sp, #4]
 8024d7a:	9003      	str	r0, [sp, #12]
 8024d7c:	9802      	ldr	r0, [sp, #8]
 8024d7e:	f9bd e040 	ldrsh.w	lr, [sp, #64]	; 0x40
 8024d82:	0200      	lsls	r0, r0, #8
 8024d84:	f9bd 9044 	ldrsh.w	r9, [sp, #68]	; 0x44
 8024d88:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
 8024d8c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8024d90:	9903      	ldr	r1, [sp, #12]
 8024d92:	f89d 4054 	ldrb.w	r4, [sp, #84]	; 0x54
 8024d96:	4308      	orrs	r0, r1
 8024d98:	f89d 7058 	ldrb.w	r7, [sp, #88]	; 0x58
 8024d9c:	e9dd c512 	ldrd	ip, r5, [sp, #72]	; 0x48
 8024da0:	9005      	str	r0, [sp, #20]
 8024da2:	fb05 ca0e 	mla	sl, r5, lr, ip
 8024da6:	2d00      	cmp	r5, #0
 8024da8:	eb06 080a 	add.w	r8, r6, sl
 8024dac:	db4a      	blt.n	8024e44 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe0>
 8024dae:	45a9      	cmp	r9, r5
 8024db0:	dd48      	ble.n	8024e44 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe0>
 8024db2:	f1bc 0f00 	cmp.w	ip, #0
 8024db6:	db43      	blt.n	8024e40 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xdc>
 8024db8:	45e6      	cmp	lr, ip
 8024dba:	dd41      	ble.n	8024e40 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xdc>
 8024dbc:	f816 600a 	ldrb.w	r6, [r6, sl]
 8024dc0:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8024dc4:	441e      	add	r6, r3
 8024dc6:	f11c 0001 	adds.w	r0, ip, #1
 8024dca:	d43e      	bmi.n	8024e4a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe6>
 8024dcc:	4586      	cmp	lr, r0
 8024dce:	dd3c      	ble.n	8024e4a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe6>
 8024dd0:	2a00      	cmp	r2, #0
 8024dd2:	d03a      	beq.n	8024e4a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe6>
 8024dd4:	f898 0001 	ldrb.w	r0, [r8, #1]
 8024dd8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8024ddc:	4418      	add	r0, r3
 8024dde:	3501      	adds	r5, #1
 8024de0:	d437      	bmi.n	8024e52 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xee>
 8024de2:	45a9      	cmp	r9, r5
 8024de4:	dd35      	ble.n	8024e52 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xee>
 8024de6:	b3a4      	cbz	r4, 8024e52 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xee>
 8024de8:	f1bc 0f00 	cmp.w	ip, #0
 8024dec:	db2f      	blt.n	8024e4e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xea>
 8024dee:	45e6      	cmp	lr, ip
 8024df0:	dd2d      	ble.n	8024e4e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xea>
 8024df2:	f818 500e 	ldrb.w	r5, [r8, lr]
 8024df6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8024dfa:	441d      	add	r5, r3
 8024dfc:	f11c 0c01 	adds.w	ip, ip, #1
 8024e00:	d42a      	bmi.n	8024e58 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf4>
 8024e02:	45e6      	cmp	lr, ip
 8024e04:	dd28      	ble.n	8024e58 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf4>
 8024e06:	b33a      	cbz	r2, 8024e58 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf4>
 8024e08:	44c6      	add	lr, r8
 8024e0a:	f89e c001 	ldrb.w	ip, [lr, #1]
 8024e0e:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8024e12:	4463      	add	r3, ip
 8024e14:	ea6f 0c07 	mvn.w	ip, r7
 8024e18:	2a0f      	cmp	r2, #15
 8024e1a:	f896 a000 	ldrb.w	sl, [r6]
 8024e1e:	fa5f fc8c 	uxtb.w	ip, ip
 8024e22:	f890 b000 	ldrb.w	fp, [r0]
 8024e26:	f895 9000 	ldrb.w	r9, [r5]
 8024e2a:	7819      	ldrb	r1, [r3, #0]
 8024e2c:	d801      	bhi.n	8024e32 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xce>
 8024e2e:	2c0f      	cmp	r4, #15
 8024e30:	d914      	bls.n	8024e5c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf8>
 8024e32:	4b40      	ldr	r3, [pc, #256]	; (8024f34 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1d0>)
 8024e34:	f240 1157 	movw	r1, #343	; 0x157
 8024e38:	4a3f      	ldr	r2, [pc, #252]	; (8024f38 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1d4>)
 8024e3a:	4840      	ldr	r0, [pc, #256]	; (8024f3c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1d8>)
 8024e3c:	f006 fd1c 	bl	802b878 <__assert_func>
 8024e40:	ae05      	add	r6, sp, #20
 8024e42:	e7c0      	b.n	8024dc6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x62>
 8024e44:	a805      	add	r0, sp, #20
 8024e46:	4606      	mov	r6, r0
 8024e48:	e7c9      	b.n	8024dde <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x7a>
 8024e4a:	a805      	add	r0, sp, #20
 8024e4c:	e7c7      	b.n	8024dde <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x7a>
 8024e4e:	ad05      	add	r5, sp, #20
 8024e50:	e7d4      	b.n	8024dfc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x98>
 8024e52:	ab05      	add	r3, sp, #20
 8024e54:	461d      	mov	r5, r3
 8024e56:	e7dd      	b.n	8024e14 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xb0>
 8024e58:	ab05      	add	r3, sp, #20
 8024e5a:	e7db      	b.n	8024e14 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xb0>
 8024e5c:	b292      	uxth	r2, r2
 8024e5e:	b2a4      	uxth	r4, r4
 8024e60:	fa1f fc8c 	uxth.w	ip, ip
 8024e64:	fb02 f804 	mul.w	r8, r2, r4
 8024e68:	0112      	lsls	r2, r2, #4
 8024e6a:	b2bf      	uxth	r7, r7
 8024e6c:	ebc8 1404 	rsb	r4, r8, r4, lsl #4
 8024e70:	f5c2 7e80 	rsb	lr, r2, #256	; 0x100
 8024e74:	eba2 0208 	sub.w	r2, r2, r8
 8024e78:	b2a4      	uxth	r4, r4
 8024e7a:	b292      	uxth	r2, r2
 8024e7c:	ebae 0e04 	sub.w	lr, lr, r4
 8024e80:	fb02 fb0b 	mul.w	fp, r2, fp
 8024e84:	fa1f fe8e 	uxth.w	lr, lr
 8024e88:	fb0e ba0a 	mla	sl, lr, sl, fp
 8024e8c:	fb04 aa09 	mla	sl, r4, r9, sl
 8024e90:	fb08 aa01 	mla	sl, r8, r1, sl
 8024e94:	9903      	ldr	r1, [sp, #12]
 8024e96:	fb11 f90c 	smulbb	r9, r1, ip
 8024e9a:	f3ca 2a07 	ubfx	sl, sl, #8, #8
 8024e9e:	9900      	ldr	r1, [sp, #0]
 8024ea0:	fb0a 9a07 	mla	sl, sl, r7, r9
 8024ea4:	fa1f fa8a 	uxth.w	sl, sl
 8024ea8:	f10a 0901 	add.w	r9, sl, #1
 8024eac:	eb09 2a1a 	add.w	sl, r9, sl, lsr #8
 8024eb0:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8024eb4:	f881 a000 	strb.w	sl, [r1]
 8024eb8:	f890 a001 	ldrb.w	sl, [r0, #1]
 8024ebc:	f896 9001 	ldrb.w	r9, [r6, #1]
 8024ec0:	fb02 fa0a 	mul.w	sl, r2, sl
 8024ec4:	9902      	ldr	r1, [sp, #8]
 8024ec6:	fb0e aa09 	mla	sl, lr, r9, sl
 8024eca:	f895 9001 	ldrb.w	r9, [r5, #1]
 8024ece:	fb04 aa09 	mla	sl, r4, r9, sl
 8024ed2:	f893 9001 	ldrb.w	r9, [r3, #1]
 8024ed6:	fb08 a909 	mla	r9, r8, r9, sl
 8024eda:	fb11 fa0c 	smulbb	sl, r1, ip
 8024ede:	9900      	ldr	r1, [sp, #0]
 8024ee0:	f3c9 2907 	ubfx	r9, r9, #8, #8
 8024ee4:	fb09 a907 	mla	r9, r9, r7, sl
 8024ee8:	fa1f f989 	uxth.w	r9, r9
 8024eec:	f109 0a01 	add.w	sl, r9, #1
 8024ef0:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 8024ef4:	ea4f 2929 	mov.w	r9, r9, asr #8
 8024ef8:	f881 9001 	strb.w	r9, [r1, #1]
 8024efc:	7880      	ldrb	r0, [r0, #2]
 8024efe:	78b6      	ldrb	r6, [r6, #2]
 8024f00:	4342      	muls	r2, r0
 8024f02:	78a8      	ldrb	r0, [r5, #2]
 8024f04:	789b      	ldrb	r3, [r3, #2]
 8024f06:	fb0e 2206 	mla	r2, lr, r6, r2
 8024f0a:	fb04 2400 	mla	r4, r4, r0, r2
 8024f0e:	fb08 4803 	mla	r8, r8, r3, r4
 8024f12:	9b01      	ldr	r3, [sp, #4]
 8024f14:	fb13 fc0c 	smulbb	ip, r3, ip
 8024f18:	f3c8 2807 	ubfx	r8, r8, #8, #8
 8024f1c:	fb08 c707 	mla	r7, r8, r7, ip
 8024f20:	b2bf      	uxth	r7, r7
 8024f22:	f107 0c01 	add.w	ip, r7, #1
 8024f26:	eb0c 2717 	add.w	r7, ip, r7, lsr #8
 8024f2a:	123f      	asrs	r7, r7, #8
 8024f2c:	708f      	strb	r7, [r1, #2]
 8024f2e:	b007      	add	sp, #28
 8024f30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024f34:	080312ae 	.word	0x080312ae
 8024f38:	080317a6 	.word	0x080317a6
 8024f3c:	08031377 	.word	0x08031377

08024f40 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8024f40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024f44:	ed2d 8b08 	vpush	{d8-d11}
 8024f48:	b093      	sub	sp, #76	; 0x4c
 8024f4a:	eeb0 aa40 	vmov.f32	s20, s0
 8024f4e:	eef0 9a60 	vmov.f32	s19, s1
 8024f52:	9210      	str	r2, [sp, #64]	; 0x40
 8024f54:	eeb0 9a41 	vmov.f32	s18, s2
 8024f58:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8024f5a:	eeb0 8a62 	vmov.f32	s16, s5
 8024f5e:	9309      	str	r3, [sp, #36]	; 0x24
 8024f60:	eef0 8a43 	vmov.f32	s17, s6
 8024f64:	f89d 30b4 	ldrb.w	r3, [sp, #180]	; 0xb4
 8024f68:	eef0 ba44 	vmov.f32	s23, s8
 8024f6c:	9011      	str	r0, [sp, #68]	; 0x44
 8024f6e:	eeb0 ba64 	vmov.f32	s22, s9
 8024f72:	930e      	str	r3, [sp, #56]	; 0x38
 8024f74:	eef0 aa45 	vmov.f32	s21, s10
 8024f78:	6850      	ldr	r0, [r2, #4]
 8024f7a:	910d      	str	r1, [sp, #52]	; 0x34
 8024f7c:	6812      	ldr	r2, [r2, #0]
 8024f7e:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 8024f82:	fb00 1303 	mla	r3, r0, r3, r1
 8024f86:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8024f8a:	18d3      	adds	r3, r2, r3
 8024f8c:	930a      	str	r3, [sp, #40]	; 0x28
 8024f8e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8024f90:	681b      	ldr	r3, [r3, #0]
 8024f92:	930c      	str	r3, [sp, #48]	; 0x30
 8024f94:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8024f96:	685c      	ldr	r4, [r3, #4]
 8024f98:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8024f9a:	3404      	adds	r4, #4
 8024f9c:	43db      	mvns	r3, r3
 8024f9e:	b2db      	uxtb	r3, r3
 8024fa0:	930b      	str	r3, [sp, #44]	; 0x2c
 8024fa2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8024fa4:	2b00      	cmp	r3, #0
 8024fa6:	dc03      	bgt.n	8024fb0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8024fa8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8024faa:	2b00      	cmp	r3, #0
 8024fac:	f340 8250 	ble.w	8025450 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x510>
 8024fb0:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8024fb2:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8024fb6:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8024fba:	1e48      	subs	r0, r1, #1
 8024fbc:	1e55      	subs	r5, r2, #1
 8024fbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024fc0:	2b00      	cmp	r3, #0
 8024fc2:	f340 80ee 	ble.w	80251a2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x262>
 8024fc6:	9e25      	ldr	r6, [sp, #148]	; 0x94
 8024fc8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8024fca:	1436      	asrs	r6, r6, #16
 8024fcc:	ea4f 4323 	mov.w	r3, r3, asr #16
 8024fd0:	d406      	bmi.n	8024fe0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8024fd2:	4286      	cmp	r6, r0
 8024fd4:	da04      	bge.n	8024fe0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8024fd6:	2b00      	cmp	r3, #0
 8024fd8:	db02      	blt.n	8024fe0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8024fda:	42ab      	cmp	r3, r5
 8024fdc:	f2c0 80e2 	blt.w	80251a4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x264>
 8024fe0:	3601      	adds	r6, #1
 8024fe2:	f100 80cf 	bmi.w	8025184 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x244>
 8024fe6:	42b1      	cmp	r1, r6
 8024fe8:	f2c0 80cc 	blt.w	8025184 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x244>
 8024fec:	3301      	adds	r3, #1
 8024fee:	f100 80c9 	bmi.w	8025184 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x244>
 8024ff2:	429a      	cmp	r2, r3
 8024ff4:	f2c0 80c6 	blt.w	8025184 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x244>
 8024ff8:	e9dd b609 	ldrd	fp, r6, [sp, #36]	; 0x24
 8024ffc:	f1bb 0f00 	cmp.w	fp, #0
 8025000:	f340 80f1 	ble.w	80251e6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 8025004:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8025006:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8025008:	982c      	ldr	r0, [sp, #176]	; 0xb0
 802500a:	141d      	asrs	r5, r3, #16
 802500c:	9b25      	ldr	r3, [sp, #148]	; 0x94
 802500e:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8025012:	68c7      	ldr	r7, [r0, #12]
 8025014:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8025016:	1418      	asrs	r0, r3, #16
 8025018:	f3c3 3803 	ubfx	r8, r3, #12, #4
 802501c:	6892      	ldr	r2, [r2, #8]
 802501e:	f100 8137 	bmi.w	8025290 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 8025022:	f102 3cff 	add.w	ip, r2, #4294967295
 8025026:	4560      	cmp	r0, ip
 8025028:	f280 8132 	bge.w	8025290 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 802502c:	2d00      	cmp	r5, #0
 802502e:	f2c0 812f 	blt.w	8025290 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 8025032:	f107 3cff 	add.w	ip, r7, #4294967295
 8025036:	4565      	cmp	r5, ip
 8025038:	f280 812a 	bge.w	8025290 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 802503c:	b212      	sxth	r2, r2
 802503e:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8025040:	fb05 0002 	mla	r0, r5, r2, r0
 8025044:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8025046:	f817 c000 	ldrb.w	ip, [r7, r0]
 802504a:	4405      	add	r5, r0
 802504c:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8025050:	eb04 0e0c 	add.w	lr, r4, ip
 8025054:	f1b8 0f00 	cmp.w	r8, #0
 8025058:	f000 810c 	beq.w	8025274 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x334>
 802505c:	786f      	ldrb	r7, [r5, #1]
 802505e:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8025062:	4427      	add	r7, r4
 8025064:	2900      	cmp	r1, #0
 8025066:	f000 810d 	beq.w	8025284 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 802506a:	18a8      	adds	r0, r5, r2
 802506c:	5caa      	ldrb	r2, [r5, r2]
 802506e:	7840      	ldrb	r0, [r0, #1]
 8025070:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8025074:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8025078:	4422      	add	r2, r4
 802507a:	4420      	add	r0, r4
 802507c:	fa1f f388 	uxth.w	r3, r8
 8025080:	f814 a00c 	ldrb.w	sl, [r4, ip]
 8025084:	b289      	uxth	r1, r1
 8025086:	f897 c000 	ldrb.w	ip, [r7]
 802508a:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 802508e:	fb03 f901 	mul.w	r9, r3, r1
 8025092:	011b      	lsls	r3, r3, #4
 8025094:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8025098:	f5c3 7880 	rsb	r8, r3, #256	; 0x100
 802509c:	eba3 0309 	sub.w	r3, r3, r9
 80250a0:	b289      	uxth	r1, r1
 80250a2:	b29b      	uxth	r3, r3
 80250a4:	eba8 0801 	sub.w	r8, r8, r1
 80250a8:	fb03 fc0c 	mul.w	ip, r3, ip
 80250ac:	fa1f f888 	uxth.w	r8, r8
 80250b0:	930f      	str	r3, [sp, #60]	; 0x3c
 80250b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80250b4:	fb08 cc0a 	mla	ip, r8, sl, ip
 80250b8:	f892 a000 	ldrb.w	sl, [r2]
 80250bc:	fb01 cc0a 	mla	ip, r1, sl, ip
 80250c0:	f890 a000 	ldrb.w	sl, [r0]
 80250c4:	fb09 cc0a 	mla	ip, r9, sl, ip
 80250c8:	f896 a000 	ldrb.w	sl, [r6]
 80250cc:	fb1a fa03 	smulbb	sl, sl, r3
 80250d0:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 80250d4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80250d6:	fb0c ac05 	mla	ip, ip, r5, sl
 80250da:	fa1f fc8c 	uxth.w	ip, ip
 80250de:	f10c 0a01 	add.w	sl, ip, #1
 80250e2:	eb0a 2a1c 	add.w	sl, sl, ip, lsr #8
 80250e6:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 80250ea:	f886 a000 	strb.w	sl, [r6]
 80250ee:	f897 c001 	ldrb.w	ip, [r7, #1]
 80250f2:	f89e a001 	ldrb.w	sl, [lr, #1]
 80250f6:	fb03 fc0c 	mul.w	ip, r3, ip
 80250fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80250fc:	fb08 cc0a 	mla	ip, r8, sl, ip
 8025100:	f892 a001 	ldrb.w	sl, [r2, #1]
 8025104:	fb01 cc0a 	mla	ip, r1, sl, ip
 8025108:	f890 a001 	ldrb.w	sl, [r0, #1]
 802510c:	fb09 cc0a 	mla	ip, r9, sl, ip
 8025110:	f896 a001 	ldrb.w	sl, [r6, #1]
 8025114:	fb1a fa03 	smulbb	sl, sl, r3
 8025118:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 802511c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 802511e:	fb0c ac05 	mla	ip, ip, r5, sl
 8025122:	fa1f fc8c 	uxth.w	ip, ip
 8025126:	f10c 0a01 	add.w	sl, ip, #1
 802512a:	eb0a 2c1c 	add.w	ip, sl, ip, lsr #8
 802512e:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8025132:	f886 c001 	strb.w	ip, [r6, #1]
 8025136:	78bf      	ldrb	r7, [r7, #2]
 8025138:	f89e c002 	ldrb.w	ip, [lr, #2]
 802513c:	437b      	muls	r3, r7
 802513e:	fb08 330c 	mla	r3, r8, ip, r3
 8025142:	f892 c002 	ldrb.w	ip, [r2, #2]
 8025146:	7882      	ldrb	r2, [r0, #2]
 8025148:	fb01 310c 	mla	r1, r1, ip, r3
 802514c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802514e:	fb09 1902 	mla	r9, r9, r2, r1
 8025152:	78b1      	ldrb	r1, [r6, #2]
 8025154:	fb11 f103 	smulbb	r1, r1, r3
 8025158:	f3c9 2907 	ubfx	r9, r9, #8, #8
 802515c:	fb09 1505 	mla	r5, r9, r5, r1
 8025160:	b2ad      	uxth	r5, r5
 8025162:	1c6b      	adds	r3, r5, #1
 8025164:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8025168:	122d      	asrs	r5, r5, #8
 802516a:	70b5      	strb	r5, [r6, #2]
 802516c:	9b25      	ldr	r3, [sp, #148]	; 0x94
 802516e:	3603      	adds	r6, #3
 8025170:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8025172:	f10b 3bff 	add.w	fp, fp, #4294967295
 8025176:	4413      	add	r3, r2
 8025178:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 802517a:	9325      	str	r3, [sp, #148]	; 0x94
 802517c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 802517e:	4413      	add	r3, r2
 8025180:	9326      	str	r3, [sp, #152]	; 0x98
 8025182:	e73b      	b.n	8024ffc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbc>
 8025184:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8025186:	9e27      	ldr	r6, [sp, #156]	; 0x9c
 8025188:	4433      	add	r3, r6
 802518a:	9e28      	ldr	r6, [sp, #160]	; 0xa0
 802518c:	9325      	str	r3, [sp, #148]	; 0x94
 802518e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8025190:	4433      	add	r3, r6
 8025192:	9326      	str	r3, [sp, #152]	; 0x98
 8025194:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025196:	3b01      	subs	r3, #1
 8025198:	9309      	str	r3, [sp, #36]	; 0x24
 802519a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802519c:	3303      	adds	r3, #3
 802519e:	930a      	str	r3, [sp, #40]	; 0x28
 80251a0:	e70d      	b.n	8024fbe <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 80251a2:	d028      	beq.n	80251f6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 80251a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80251a6:	9827      	ldr	r0, [sp, #156]	; 0x9c
 80251a8:	3b01      	subs	r3, #1
 80251aa:	9d25      	ldr	r5, [sp, #148]	; 0x94
 80251ac:	fb00 5003 	mla	r0, r0, r3, r5
 80251b0:	1400      	asrs	r0, r0, #16
 80251b2:	f53f af21 	bmi.w	8024ff8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 80251b6:	3901      	subs	r1, #1
 80251b8:	4288      	cmp	r0, r1
 80251ba:	f6bf af1d 	bge.w	8024ff8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 80251be:	9928      	ldr	r1, [sp, #160]	; 0xa0
 80251c0:	9826      	ldr	r0, [sp, #152]	; 0x98
 80251c2:	fb01 0303 	mla	r3, r1, r3, r0
 80251c6:	141b      	asrs	r3, r3, #16
 80251c8:	f53f af16 	bmi.w	8024ff8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 80251cc:	3a01      	subs	r2, #1
 80251ce:	4293      	cmp	r3, r2
 80251d0:	f6bf af12 	bge.w	8024ff8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 80251d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80251d6:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80251da:	1cdf      	adds	r7, r3, #3
 80251dc:	f8bd a038 	ldrh.w	sl, [sp, #56]	; 0x38
 80251e0:	f1b9 0f00 	cmp.w	r9, #0
 80251e4:	dc73      	bgt.n	80252ce <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38e>
 80251e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80251e8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80251ea:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80251ee:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80251f2:	441a      	add	r2, r3
 80251f4:	920a      	str	r2, [sp, #40]	; 0x28
 80251f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80251f8:	2b00      	cmp	r3, #0
 80251fa:	f340 8129 	ble.w	8025450 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x510>
 80251fe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8025202:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8025204:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8025208:	ee79 9a8b 	vadd.f32	s19, s19, s22
 802520c:	eef0 6a48 	vmov.f32	s13, s16
 8025210:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8025214:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8025218:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802521c:	edcd 6a25 	vstr	s13, [sp, #148]	; 0x94
 8025220:	eef0 6a68 	vmov.f32	s13, s17
 8025224:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8025228:	edcd 6a26 	vstr	s13, [sp, #152]	; 0x98
 802522c:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8025230:	ee69 7a27 	vmul.f32	s15, s18, s15
 8025234:	ee37 8a48 	vsub.f32	s16, s14, s16
 8025238:	ee77 8ae8 	vsub.f32	s17, s15, s17
 802523c:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8025240:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8025244:	ee18 2a10 	vmov	r2, s16
 8025248:	eeb0 8a47 	vmov.f32	s16, s14
 802524c:	fb92 f3f3 	sdiv	r3, r2, r3
 8025250:	ee18 2a90 	vmov	r2, s17
 8025254:	9327      	str	r3, [sp, #156]	; 0x9c
 8025256:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8025258:	eef0 8a67 	vmov.f32	s17, s15
 802525c:	fb92 f3f3 	sdiv	r3, r2, r3
 8025260:	9328      	str	r3, [sp, #160]	; 0xa0
 8025262:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8025264:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8025266:	3b01      	subs	r3, #1
 8025268:	930d      	str	r3, [sp, #52]	; 0x34
 802526a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802526c:	bf08      	it	eq
 802526e:	4613      	moveq	r3, r2
 8025270:	9309      	str	r3, [sp, #36]	; 0x24
 8025272:	e696      	b.n	8024fa2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 8025274:	b149      	cbz	r1, 802528a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 8025276:	5caa      	ldrb	r2, [r5, r2]
 8025278:	4670      	mov	r0, lr
 802527a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 802527e:	4422      	add	r2, r4
 8025280:	4677      	mov	r7, lr
 8025282:	e6fb      	b.n	802507c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13c>
 8025284:	4670      	mov	r0, lr
 8025286:	4672      	mov	r2, lr
 8025288:	e6f8      	b.n	802507c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13c>
 802528a:	4670      	mov	r0, lr
 802528c:	4672      	mov	r2, lr
 802528e:	e7f7      	b.n	8025280 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x340>
 8025290:	f110 0c01 	adds.w	ip, r0, #1
 8025294:	f53f af6a 	bmi.w	802516c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22c>
 8025298:	4562      	cmp	r2, ip
 802529a:	f6ff af67 	blt.w	802516c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22c>
 802529e:	f115 0c01 	adds.w	ip, r5, #1
 80252a2:	f53f af63 	bmi.w	802516c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22c>
 80252a6:	4567      	cmp	r7, ip
 80252a8:	f6ff af60 	blt.w	802516c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22c>
 80252ac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80252ae:	b23f      	sxth	r7, r7
 80252b0:	b212      	sxth	r2, r2
 80252b2:	9002      	str	r0, [sp, #8]
 80252b4:	9701      	str	r7, [sp, #4]
 80252b6:	9200      	str	r2, [sp, #0]
 80252b8:	9811      	ldr	r0, [sp, #68]	; 0x44
 80252ba:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80252bc:	e9cd 1305 	strd	r1, r3, [sp, #20]
 80252c0:	e9cd 5803 	strd	r5, r8, [sp, #12]
 80252c4:	4623      	mov	r3, r4
 80252c6:	4631      	mov	r1, r6
 80252c8:	f7ff fd4c 	bl	8024d64 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>
 80252cc:	e74e      	b.n	802516c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22c>
 80252ce:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80252d0:	9826      	ldr	r0, [sp, #152]	; 0x98
 80252d2:	f3c2 3103 	ubfx	r1, r2, #12, #4
 80252d6:	9d25      	ldr	r5, [sp, #148]	; 0x94
 80252d8:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 80252da:	1400      	asrs	r0, r0, #16
 80252dc:	142d      	asrs	r5, r5, #16
 80252de:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80252e0:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 80252e4:	f3c3 3303 	ubfx	r3, r3, #12, #4
 80252e8:	fb02 5000 	mla	r0, r2, r0, r5
 80252ec:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80252ee:	f815 e000 	ldrb.w	lr, [r5, r0]
 80252f2:	eb05 0c00 	add.w	ip, r5, r0
 80252f6:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 80252fa:	eb04 060e 	add.w	r6, r4, lr
 80252fe:	2b00      	cmp	r3, #0
 8025300:	f000 8097 	beq.w	8025432 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f2>
 8025304:	f89c 5001 	ldrb.w	r5, [ip, #1]
 8025308:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 802530c:	4425      	add	r5, r4
 802530e:	2900      	cmp	r1, #0
 8025310:	f000 8098 	beq.w	8025444 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x504>
 8025314:	eb0c 0002 	add.w	r0, ip, r2
 8025318:	f81c 2002 	ldrb.w	r2, [ip, r2]
 802531c:	7840      	ldrb	r0, [r0, #1]
 802531e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8025322:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8025326:	4422      	add	r2, r4
 8025328:	4420      	add	r0, r4
 802532a:	b29b      	uxth	r3, r3
 802532c:	f814 b00e 	ldrb.w	fp, [r4, lr]
 8025330:	b289      	uxth	r1, r1
 8025332:	f895 e000 	ldrb.w	lr, [r5]
 8025336:	3703      	adds	r7, #3
 8025338:	f109 39ff 	add.w	r9, r9, #4294967295
 802533c:	fb03 f801 	mul.w	r8, r3, r1
 8025340:	011b      	lsls	r3, r3, #4
 8025342:	ebc8 1101 	rsb	r1, r8, r1, lsl #4
 8025346:	f5c3 7c80 	rsb	ip, r3, #256	; 0x100
 802534a:	eba3 0308 	sub.w	r3, r3, r8
 802534e:	b289      	uxth	r1, r1
 8025350:	b29b      	uxth	r3, r3
 8025352:	ebac 0c01 	sub.w	ip, ip, r1
 8025356:	fb03 fe0e 	mul.w	lr, r3, lr
 802535a:	fa1f fc8c 	uxth.w	ip, ip
 802535e:	930f      	str	r3, [sp, #60]	; 0x3c
 8025360:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8025362:	fb0c ee0b 	mla	lr, ip, fp, lr
 8025366:	f892 b000 	ldrb.w	fp, [r2]
 802536a:	fb01 ee0b 	mla	lr, r1, fp, lr
 802536e:	f890 b000 	ldrb.w	fp, [r0]
 8025372:	fb08 ee0b 	mla	lr, r8, fp, lr
 8025376:	f817 bc06 	ldrb.w	fp, [r7, #-6]
 802537a:	fb1b fb03 	smulbb	fp, fp, r3
 802537e:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 8025382:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8025384:	fb0e be0a 	mla	lr, lr, sl, fp
 8025388:	fa1f fe8e 	uxth.w	lr, lr
 802538c:	f10e 0b01 	add.w	fp, lr, #1
 8025390:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 8025394:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8025398:	f807 ec06 	strb.w	lr, [r7, #-6]
 802539c:	f895 e001 	ldrb.w	lr, [r5, #1]
 80253a0:	f896 b001 	ldrb.w	fp, [r6, #1]
 80253a4:	fb03 fe0e 	mul.w	lr, r3, lr
 80253a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80253aa:	fb0c ee0b 	mla	lr, ip, fp, lr
 80253ae:	f892 b001 	ldrb.w	fp, [r2, #1]
 80253b2:	fb01 ee0b 	mla	lr, r1, fp, lr
 80253b6:	f890 b001 	ldrb.w	fp, [r0, #1]
 80253ba:	fb08 ee0b 	mla	lr, r8, fp, lr
 80253be:	f817 bc05 	ldrb.w	fp, [r7, #-5]
 80253c2:	fb1b fb03 	smulbb	fp, fp, r3
 80253c6:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 80253ca:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80253cc:	fb0e be0a 	mla	lr, lr, sl, fp
 80253d0:	fa1f fe8e 	uxth.w	lr, lr
 80253d4:	f10e 0b01 	add.w	fp, lr, #1
 80253d8:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 80253dc:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 80253e0:	f807 ec05 	strb.w	lr, [r7, #-5]
 80253e4:	78ad      	ldrb	r5, [r5, #2]
 80253e6:	78b6      	ldrb	r6, [r6, #2]
 80253e8:	436b      	muls	r3, r5
 80253ea:	7895      	ldrb	r5, [r2, #2]
 80253ec:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80253ee:	fb0c 3306 	mla	r3, ip, r6, r3
 80253f2:	fb01 3305 	mla	r3, r1, r5, r3
 80253f6:	7885      	ldrb	r5, [r0, #2]
 80253f8:	fb08 3805 	mla	r8, r8, r5, r3
 80253fc:	f817 3c04 	ldrb.w	r3, [r7, #-4]
 8025400:	fb13 f302 	smulbb	r3, r3, r2
 8025404:	f3c8 2807 	ubfx	r8, r8, #8, #8
 8025408:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 802540a:	fb08 380a 	mla	r8, r8, sl, r3
 802540e:	fa1f f888 	uxth.w	r8, r8
 8025412:	f108 0301 	add.w	r3, r8, #1
 8025416:	eb03 2818 	add.w	r8, r3, r8, lsr #8
 802541a:	9b25      	ldr	r3, [sp, #148]	; 0x94
 802541c:	4413      	add	r3, r2
 802541e:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8025420:	ea4f 2828 	mov.w	r8, r8, asr #8
 8025424:	9325      	str	r3, [sp, #148]	; 0x94
 8025426:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8025428:	f807 8c04 	strb.w	r8, [r7, #-4]
 802542c:	4413      	add	r3, r2
 802542e:	9326      	str	r3, [sp, #152]	; 0x98
 8025430:	e6d6      	b.n	80251e0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 8025432:	b151      	cbz	r1, 802544a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50a>
 8025434:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8025438:	4630      	mov	r0, r6
 802543a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 802543e:	4422      	add	r2, r4
 8025440:	4635      	mov	r5, r6
 8025442:	e772      	b.n	802532a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ea>
 8025444:	4630      	mov	r0, r6
 8025446:	4632      	mov	r2, r6
 8025448:	e76f      	b.n	802532a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ea>
 802544a:	4630      	mov	r0, r6
 802544c:	4632      	mov	r2, r6
 802544e:	e7f7      	b.n	8025440 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x500>
 8025450:	b013      	add	sp, #76	; 0x4c
 8025452:	ecbd 8b08 	vpop	{d8-d11}
 8025456:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0802545c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>:
 802545c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025460:	784d      	ldrb	r5, [r1, #1]
 8025462:	f891 9002 	ldrb.w	r9, [r1, #2]
 8025466:	022d      	lsls	r5, r5, #8
 8025468:	f9bd c030 	ldrsh.w	ip, [sp, #48]	; 0x30
 802546c:	f9bd 8034 	ldrsh.w	r8, [sp, #52]	; 0x34
 8025470:	ea45 4509 	orr.w	r5, r5, r9, lsl #16
 8025474:	f891 9000 	ldrb.w	r9, [r1]
 8025478:	f89d a040 	ldrb.w	sl, [sp, #64]	; 0x40
 802547c:	ea45 0509 	orr.w	r5, r5, r9
 8025480:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 8025484:	e9dd 460e 	ldrd	r4, r6, [sp, #56]	; 0x38
 8025488:	9501      	str	r5, [sp, #4]
 802548a:	fb06 470c 	mla	r7, r6, ip, r4
 802548e:	2e00      	cmp	r6, #0
 8025490:	eb02 0e07 	add.w	lr, r2, r7
 8025494:	db46      	blt.n	8025524 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xc8>
 8025496:	45b0      	cmp	r8, r6
 8025498:	dd44      	ble.n	8025524 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xc8>
 802549a:	2c00      	cmp	r4, #0
 802549c:	db40      	blt.n	8025520 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xc4>
 802549e:	45a4      	cmp	ip, r4
 80254a0:	dd3e      	ble.n	8025520 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xc4>
 80254a2:	5dd7      	ldrb	r7, [r2, r7]
 80254a4:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 80254a8:	441f      	add	r7, r3
 80254aa:	1c62      	adds	r2, r4, #1
 80254ac:	d43d      	bmi.n	802552a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xce>
 80254ae:	4594      	cmp	ip, r2
 80254b0:	dd3b      	ble.n	802552a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xce>
 80254b2:	f1ba 0f00 	cmp.w	sl, #0
 80254b6:	d038      	beq.n	802552a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xce>
 80254b8:	f89e 5001 	ldrb.w	r5, [lr, #1]
 80254bc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80254c0:	441d      	add	r5, r3
 80254c2:	3601      	adds	r6, #1
 80254c4:	d435      	bmi.n	8025532 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd6>
 80254c6:	45b0      	cmp	r8, r6
 80254c8:	dd33      	ble.n	8025532 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd6>
 80254ca:	b390      	cbz	r0, 8025532 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd6>
 80254cc:	2c00      	cmp	r4, #0
 80254ce:	db2e      	blt.n	802552e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd2>
 80254d0:	45a4      	cmp	ip, r4
 80254d2:	dd2c      	ble.n	802552e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd2>
 80254d4:	f81e 600c 	ldrb.w	r6, [lr, ip]
 80254d8:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 80254dc:	441e      	add	r6, r3
 80254de:	1c62      	adds	r2, r4, #1
 80254e0:	d42a      	bmi.n	8025538 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xdc>
 80254e2:	4594      	cmp	ip, r2
 80254e4:	dd28      	ble.n	8025538 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xdc>
 80254e6:	f1ba 0f00 	cmp.w	sl, #0
 80254ea:	d025      	beq.n	8025538 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xdc>
 80254ec:	44f4      	add	ip, lr
 80254ee:	f89c 2001 	ldrb.w	r2, [ip, #1]
 80254f2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80254f6:	4413      	add	r3, r2
 80254f8:	f1ba 0f0f 	cmp.w	sl, #15
 80254fc:	f897 8000 	ldrb.w	r8, [r7]
 8025500:	f895 9000 	ldrb.w	r9, [r5]
 8025504:	f896 e000 	ldrb.w	lr, [r6]
 8025508:	f893 c000 	ldrb.w	ip, [r3]
 802550c:	d801      	bhi.n	8025512 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xb6>
 802550e:	280f      	cmp	r0, #15
 8025510:	d914      	bls.n	802553c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xe0>
 8025512:	4b29      	ldr	r3, [pc, #164]	; (80255b8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x15c>)
 8025514:	f240 1157 	movw	r1, #343	; 0x157
 8025518:	4a28      	ldr	r2, [pc, #160]	; (80255bc <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x160>)
 802551a:	4829      	ldr	r0, [pc, #164]	; (80255c0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x164>)
 802551c:	f006 f9ac 	bl	802b878 <__assert_func>
 8025520:	af01      	add	r7, sp, #4
 8025522:	e7c2      	b.n	80254aa <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x4e>
 8025524:	ad01      	add	r5, sp, #4
 8025526:	462f      	mov	r7, r5
 8025528:	e7cb      	b.n	80254c2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x66>
 802552a:	ad01      	add	r5, sp, #4
 802552c:	e7c9      	b.n	80254c2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x66>
 802552e:	ae01      	add	r6, sp, #4
 8025530:	e7d5      	b.n	80254de <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x82>
 8025532:	ab01      	add	r3, sp, #4
 8025534:	461e      	mov	r6, r3
 8025536:	e7df      	b.n	80254f8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x9c>
 8025538:	ab01      	add	r3, sp, #4
 802553a:	e7dd      	b.n	80254f8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x9c>
 802553c:	fa1f f48a 	uxth.w	r4, sl
 8025540:	b280      	uxth	r0, r0
 8025542:	fb04 fa00 	mul.w	sl, r4, r0
 8025546:	0124      	lsls	r4, r4, #4
 8025548:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 802554c:	f5c4 7b80 	rsb	fp, r4, #256	; 0x100
 8025550:	b282      	uxth	r2, r0
 8025552:	eba4 000a 	sub.w	r0, r4, sl
 8025556:	ebab 0b02 	sub.w	fp, fp, r2
 802555a:	b280      	uxth	r0, r0
 802555c:	fa1f fb8b 	uxth.w	fp, fp
 8025560:	fb00 f909 	mul.w	r9, r0, r9
 8025564:	fb0b 9808 	mla	r8, fp, r8, r9
 8025568:	fb02 8e0e 	mla	lr, r2, lr, r8
 802556c:	fb0a ec0c 	mla	ip, sl, ip, lr
 8025570:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8025574:	f881 c000 	strb.w	ip, [r1]
 8025578:	786c      	ldrb	r4, [r5, #1]
 802557a:	f897 c001 	ldrb.w	ip, [r7, #1]
 802557e:	4344      	muls	r4, r0
 8025580:	fb0b 4c0c 	mla	ip, fp, ip, r4
 8025584:	7874      	ldrb	r4, [r6, #1]
 8025586:	fb02 cc04 	mla	ip, r2, r4, ip
 802558a:	785c      	ldrb	r4, [r3, #1]
 802558c:	fb0a c404 	mla	r4, sl, r4, ip
 8025590:	1224      	asrs	r4, r4, #8
 8025592:	704c      	strb	r4, [r1, #1]
 8025594:	78ad      	ldrb	r5, [r5, #2]
 8025596:	78bc      	ldrb	r4, [r7, #2]
 8025598:	4368      	muls	r0, r5
 802559a:	fb0b 0b04 	mla	fp, fp, r4, r0
 802559e:	78b0      	ldrb	r0, [r6, #2]
 80255a0:	fb02 b000 	mla	r0, r2, r0, fp
 80255a4:	789a      	ldrb	r2, [r3, #2]
 80255a6:	fb0a 0a02 	mla	sl, sl, r2, r0
 80255aa:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 80255ae:	f881 a002 	strb.w	sl, [r1, #2]
 80255b2:	b003      	add	sp, #12
 80255b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80255b8:	080312ae 	.word	0x080312ae
 80255bc:	080317a6 	.word	0x080317a6
 80255c0:	08031377 	.word	0x08031377

080255c4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80255c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80255c8:	ed2d 8b0a 	vpush	{d8-d12}
 80255cc:	b08d      	sub	sp, #52	; 0x34
 80255ce:	eeb0 aa40 	vmov.f32	s20, s0
 80255d2:	eef0 9a60 	vmov.f32	s19, s1
 80255d6:	900b      	str	r0, [sp, #44]	; 0x2c
 80255d8:	eeb0 9a41 	vmov.f32	s18, s2
 80255dc:	9306      	str	r3, [sp, #24]
 80255de:	eeb0 8a62 	vmov.f32	s16, s5
 80255e2:	eef0 8a43 	vmov.f32	s17, s6
 80255e6:	9c21      	ldr	r4, [sp, #132]	; 0x84
 80255e8:	eeb0 ca44 	vmov.f32	s24, s8
 80255ec:	eef0 ba64 	vmov.f32	s23, s9
 80255f0:	eeb0 ba45 	vmov.f32	s22, s10
 80255f4:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
 80255f8:	e9cd 1209 	strd	r1, r2, [sp, #36]	; 0x24
 80255fc:	9a25      	ldr	r2, [sp, #148]	; 0x94
 80255fe:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	; 0x98
 8025602:	6850      	ldr	r0, [r2, #4]
 8025604:	6812      	ldr	r2, [r2, #0]
 8025606:	fb00 1303 	mla	r3, r0, r3, r1
 802560a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 802560e:	18d3      	adds	r3, r2, r3
 8025610:	9307      	str	r3, [sp, #28]
 8025612:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8025614:	681b      	ldr	r3, [r3, #0]
 8025616:	9308      	str	r3, [sp, #32]
 8025618:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802561a:	685d      	ldr	r5, [r3, #4]
 802561c:	3504      	adds	r5, #4
 802561e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025620:	2b00      	cmp	r3, #0
 8025622:	dc03      	bgt.n	802562c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8025624:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8025626:	2b00      	cmp	r3, #0
 8025628:	f340 81e6 	ble.w	80259f8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x434>
 802562c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802562e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8025632:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8025636:	1e48      	subs	r0, r1, #1
 8025638:	1e56      	subs	r6, r2, #1
 802563a:	9b06      	ldr	r3, [sp, #24]
 802563c:	2b00      	cmp	r3, #0
 802563e:	f340 80bd 	ble.w	80257bc <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f8>
 8025642:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8025644:	1427      	asrs	r7, r4, #16
 8025646:	ea4f 4323 	mov.w	r3, r3, asr #16
 802564a:	d406      	bmi.n	802565a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 802564c:	4287      	cmp	r7, r0
 802564e:	da04      	bge.n	802565a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8025650:	2b00      	cmp	r3, #0
 8025652:	db02      	blt.n	802565a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8025654:	42b3      	cmp	r3, r6
 8025656:	f2c0 80b2 	blt.w	80257be <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 802565a:	3701      	adds	r7, #1
 802565c:	f100 80a1 	bmi.w	80257a2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1de>
 8025660:	42b9      	cmp	r1, r7
 8025662:	f2c0 809e 	blt.w	80257a2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1de>
 8025666:	3301      	adds	r3, #1
 8025668:	f100 809b 	bmi.w	80257a2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1de>
 802566c:	429a      	cmp	r2, r3
 802566e:	f2c0 8098 	blt.w	80257a2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1de>
 8025672:	e9dd b606 	ldrd	fp, r6, [sp, #24]
 8025676:	f1bb 0f00 	cmp.w	fp, #0
 802567a:	f340 80bf 	ble.w	80257fc <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x238>
 802567e:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8025680:	9828      	ldr	r0, [sp, #160]	; 0xa0
 8025682:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8025684:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8025688:	f8d0 c00c 	ldr.w	ip, [r0, #12]
 802568c:	1420      	asrs	r0, r4, #16
 802568e:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8025690:	ea4f 4723 	mov.w	r7, r3, asr #16
 8025694:	f3c4 3303 	ubfx	r3, r4, #12, #4
 8025698:	6892      	ldr	r2, [r2, #8]
 802569a:	f100 8103 	bmi.w	80258a4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 802569e:	f102 3eff 	add.w	lr, r2, #4294967295
 80256a2:	4570      	cmp	r0, lr
 80256a4:	f280 80fe 	bge.w	80258a4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 80256a8:	2f00      	cmp	r7, #0
 80256aa:	f2c0 80fb 	blt.w	80258a4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 80256ae:	f10c 3eff 	add.w	lr, ip, #4294967295
 80256b2:	4577      	cmp	r7, lr
 80256b4:	f280 80f6 	bge.w	80258a4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 80256b8:	b212      	sxth	r2, r2
 80256ba:	fb07 0002 	mla	r0, r7, r2, r0
 80256be:	9f08      	ldr	r7, [sp, #32]
 80256c0:	f817 8000 	ldrb.w	r8, [r7, r0]
 80256c4:	eb07 0e00 	add.w	lr, r7, r0
 80256c8:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 80256cc:	eb05 0c08 	add.w	ip, r5, r8
 80256d0:	2b00      	cmp	r3, #0
 80256d2:	f000 80d8 	beq.w	8025886 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c2>
 80256d6:	f89e 7001 	ldrb.w	r7, [lr, #1]
 80256da:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 80256de:	442f      	add	r7, r5
 80256e0:	2900      	cmp	r1, #0
 80256e2:	f000 80d9 	beq.w	8025898 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d4>
 80256e6:	eb0e 0002 	add.w	r0, lr, r2
 80256ea:	f81e 2002 	ldrb.w	r2, [lr, r2]
 80256ee:	7840      	ldrb	r0, [r0, #1]
 80256f0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80256f4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80256f8:	442a      	add	r2, r5
 80256fa:	4428      	add	r0, r5
 80256fc:	b29b      	uxth	r3, r3
 80256fe:	f815 a008 	ldrb.w	sl, [r5, r8]
 8025702:	b289      	uxth	r1, r1
 8025704:	f897 8000 	ldrb.w	r8, [r7]
 8025708:	fb03 f901 	mul.w	r9, r3, r1
 802570c:	011b      	lsls	r3, r3, #4
 802570e:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8025712:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 8025716:	eba3 0309 	sub.w	r3, r3, r9
 802571a:	b289      	uxth	r1, r1
 802571c:	b29b      	uxth	r3, r3
 802571e:	ebae 0e01 	sub.w	lr, lr, r1
 8025722:	fb03 f808 	mul.w	r8, r3, r8
 8025726:	fa1f fe8e 	uxth.w	lr, lr
 802572a:	fb0e 880a 	mla	r8, lr, sl, r8
 802572e:	f892 a000 	ldrb.w	sl, [r2]
 8025732:	fb01 880a 	mla	r8, r1, sl, r8
 8025736:	f890 a000 	ldrb.w	sl, [r0]
 802573a:	fb09 880a 	mla	r8, r9, sl, r8
 802573e:	ea4f 2828 	mov.w	r8, r8, asr #8
 8025742:	f886 8000 	strb.w	r8, [r6]
 8025746:	f897 8001 	ldrb.w	r8, [r7, #1]
 802574a:	f89c a001 	ldrb.w	sl, [ip, #1]
 802574e:	fb03 f808 	mul.w	r8, r3, r8
 8025752:	fb0e 880a 	mla	r8, lr, sl, r8
 8025756:	f892 a001 	ldrb.w	sl, [r2, #1]
 802575a:	fb01 880a 	mla	r8, r1, sl, r8
 802575e:	f890 a001 	ldrb.w	sl, [r0, #1]
 8025762:	fb09 880a 	mla	r8, r9, sl, r8
 8025766:	ea4f 2828 	mov.w	r8, r8, asr #8
 802576a:	f886 8001 	strb.w	r8, [r6, #1]
 802576e:	78bf      	ldrb	r7, [r7, #2]
 8025770:	f89c c002 	ldrb.w	ip, [ip, #2]
 8025774:	437b      	muls	r3, r7
 8025776:	7892      	ldrb	r2, [r2, #2]
 8025778:	fb0e 330c 	mla	r3, lr, ip, r3
 802577c:	fb01 3102 	mla	r1, r1, r2, r3
 8025780:	7882      	ldrb	r2, [r0, #2]
 8025782:	fb09 1902 	mla	r9, r9, r2, r1
 8025786:	ea4f 2929 	mov.w	r9, r9, asr #8
 802578a:	f886 9002 	strb.w	r9, [r6, #2]
 802578e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8025790:	3603      	adds	r6, #3
 8025792:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8025794:	f10b 3bff 	add.w	fp, fp, #4294967295
 8025798:	441c      	add	r4, r3
 802579a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 802579c:	4413      	add	r3, r2
 802579e:	9322      	str	r3, [sp, #136]	; 0x88
 80257a0:	e769      	b.n	8025676 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 80257a2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80257a4:	9f24      	ldr	r7, [sp, #144]	; 0x90
 80257a6:	441c      	add	r4, r3
 80257a8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80257aa:	443b      	add	r3, r7
 80257ac:	9322      	str	r3, [sp, #136]	; 0x88
 80257ae:	9b06      	ldr	r3, [sp, #24]
 80257b0:	3b01      	subs	r3, #1
 80257b2:	9306      	str	r3, [sp, #24]
 80257b4:	9b07      	ldr	r3, [sp, #28]
 80257b6:	3303      	adds	r3, #3
 80257b8:	9307      	str	r3, [sp, #28]
 80257ba:	e73e      	b.n	802563a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 80257bc:	d026      	beq.n	802580c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 80257be:	9b06      	ldr	r3, [sp, #24]
 80257c0:	9823      	ldr	r0, [sp, #140]	; 0x8c
 80257c2:	3b01      	subs	r3, #1
 80257c4:	fb00 4003 	mla	r0, r0, r3, r4
 80257c8:	1400      	asrs	r0, r0, #16
 80257ca:	f53f af52 	bmi.w	8025672 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 80257ce:	3901      	subs	r1, #1
 80257d0:	4288      	cmp	r0, r1
 80257d2:	f6bf af4e 	bge.w	8025672 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 80257d6:	9924      	ldr	r1, [sp, #144]	; 0x90
 80257d8:	9822      	ldr	r0, [sp, #136]	; 0x88
 80257da:	fb01 0303 	mla	r3, r1, r3, r0
 80257de:	141b      	asrs	r3, r3, #16
 80257e0:	f53f af47 	bmi.w	8025672 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 80257e4:	3a01      	subs	r2, #1
 80257e6:	4293      	cmp	r3, r2
 80257e8:	f6bf af43 	bge.w	8025672 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 80257ec:	9b07      	ldr	r3, [sp, #28]
 80257ee:	f8dd a018 	ldr.w	sl, [sp, #24]
 80257f2:	f103 0803 	add.w	r8, r3, #3
 80257f6:	f1ba 0f00 	cmp.w	sl, #0
 80257fa:	dc71      	bgt.n	80258e0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 80257fc:	9b06      	ldr	r3, [sp, #24]
 80257fe:	9a07      	ldr	r2, [sp, #28]
 8025800:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8025804:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8025808:	441a      	add	r2, r3
 802580a:	9207      	str	r2, [sp, #28]
 802580c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802580e:	2b00      	cmp	r3, #0
 8025810:	f340 80f2 	ble.w	80259f8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x434>
 8025814:	ee3a aa0c 	vadd.f32	s20, s20, s24
 8025818:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802581a:	ee79 9aab 	vadd.f32	s19, s19, s23
 802581e:	eef0 6a48 	vmov.f32	s13, s16
 8025822:	eeca 7a8a 	vdiv.f32	s15, s21, s20
 8025826:	ee39 9a0b 	vadd.f32	s18, s18, s22
 802582a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802582e:	ee16 4a90 	vmov	r4, s13
 8025832:	eef0 6a68 	vmov.f32	s13, s17
 8025836:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802583a:	edcd 6a22 	vstr	s13, [sp, #136]	; 0x88
 802583e:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8025842:	ee69 7a27 	vmul.f32	s15, s18, s15
 8025846:	ee37 8a48 	vsub.f32	s16, s14, s16
 802584a:	ee77 8ae8 	vsub.f32	s17, s15, s17
 802584e:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8025852:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8025856:	ee18 2a10 	vmov	r2, s16
 802585a:	eeb0 8a47 	vmov.f32	s16, s14
 802585e:	fb92 f3f3 	sdiv	r3, r2, r3
 8025862:	ee18 2a90 	vmov	r2, s17
 8025866:	9323      	str	r3, [sp, #140]	; 0x8c
 8025868:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802586a:	eef0 8a67 	vmov.f32	s17, s15
 802586e:	fb92 f3f3 	sdiv	r3, r2, r3
 8025872:	9324      	str	r3, [sp, #144]	; 0x90
 8025874:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025876:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8025878:	3b01      	subs	r3, #1
 802587a:	9309      	str	r3, [sp, #36]	; 0x24
 802587c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802587e:	bf08      	it	eq
 8025880:	4613      	moveq	r3, r2
 8025882:	9306      	str	r3, [sp, #24]
 8025884:	e6cb      	b.n	802561e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 8025886:	b151      	cbz	r1, 802589e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2da>
 8025888:	f81e 2002 	ldrb.w	r2, [lr, r2]
 802588c:	4660      	mov	r0, ip
 802588e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8025892:	442a      	add	r2, r5
 8025894:	4667      	mov	r7, ip
 8025896:	e731      	b.n	80256fc <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 8025898:	4660      	mov	r0, ip
 802589a:	4662      	mov	r2, ip
 802589c:	e72e      	b.n	80256fc <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 802589e:	4660      	mov	r0, ip
 80258a0:	4662      	mov	r2, ip
 80258a2:	e7f7      	b.n	8025894 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d0>
 80258a4:	f110 0e01 	adds.w	lr, r0, #1
 80258a8:	f53f af71 	bmi.w	802578e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ca>
 80258ac:	4572      	cmp	r2, lr
 80258ae:	f6ff af6e 	blt.w	802578e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ca>
 80258b2:	f117 0e01 	adds.w	lr, r7, #1
 80258b6:	f53f af6a 	bmi.w	802578e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ca>
 80258ba:	45f4      	cmp	ip, lr
 80258bc:	f6ff af67 	blt.w	802578e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ca>
 80258c0:	b212      	sxth	r2, r2
 80258c2:	e9cd 3104 	strd	r3, r1, [sp, #16]
 80258c6:	fa0f f38c 	sxth.w	r3, ip
 80258ca:	9200      	str	r2, [sp, #0]
 80258cc:	4631      	mov	r1, r6
 80258ce:	9a08      	ldr	r2, [sp, #32]
 80258d0:	9301      	str	r3, [sp, #4]
 80258d2:	462b      	mov	r3, r5
 80258d4:	e9cd 0702 	strd	r0, r7, [sp, #8]
 80258d8:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80258da:	f7ff fdbf 	bl	802545c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>
 80258de:	e756      	b.n	802578e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ca>
 80258e0:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80258e2:	1426      	asrs	r6, r4, #16
 80258e4:	9822      	ldr	r0, [sp, #136]	; 0x88
 80258e6:	f3c4 3303 	ubfx	r3, r4, #12, #4
 80258ea:	f3c2 3103 	ubfx	r1, r2, #12, #4
 80258ee:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 80258f0:	1400      	asrs	r0, r0, #16
 80258f2:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 80258f6:	fb02 6000 	mla	r0, r2, r0, r6
 80258fa:	9e08      	ldr	r6, [sp, #32]
 80258fc:	f816 e000 	ldrb.w	lr, [r6, r0]
 8025900:	eb06 0c00 	add.w	ip, r6, r0
 8025904:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8025908:	eb05 070e 	add.w	r7, r5, lr
 802590c:	2b00      	cmp	r3, #0
 802590e:	d064      	beq.n	80259da <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x416>
 8025910:	f89c 6001 	ldrb.w	r6, [ip, #1]
 8025914:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8025918:	442e      	add	r6, r5
 802591a:	2900      	cmp	r1, #0
 802591c:	d066      	beq.n	80259ec <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x428>
 802591e:	eb0c 0002 	add.w	r0, ip, r2
 8025922:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8025926:	7840      	ldrb	r0, [r0, #1]
 8025928:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 802592c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8025930:	442a      	add	r2, r5
 8025932:	4428      	add	r0, r5
 8025934:	b29b      	uxth	r3, r3
 8025936:	f815 b00e 	ldrb.w	fp, [r5, lr]
 802593a:	b289      	uxth	r1, r1
 802593c:	f896 e000 	ldrb.w	lr, [r6]
 8025940:	f108 0803 	add.w	r8, r8, #3
 8025944:	f10a 3aff 	add.w	sl, sl, #4294967295
 8025948:	fb03 f901 	mul.w	r9, r3, r1
 802594c:	011b      	lsls	r3, r3, #4
 802594e:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8025952:	f5c3 7c80 	rsb	ip, r3, #256	; 0x100
 8025956:	eba3 0309 	sub.w	r3, r3, r9
 802595a:	b289      	uxth	r1, r1
 802595c:	b29b      	uxth	r3, r3
 802595e:	ebac 0c01 	sub.w	ip, ip, r1
 8025962:	fb03 fe0e 	mul.w	lr, r3, lr
 8025966:	fa1f fc8c 	uxth.w	ip, ip
 802596a:	fb0c ee0b 	mla	lr, ip, fp, lr
 802596e:	f892 b000 	ldrb.w	fp, [r2]
 8025972:	fb01 ee0b 	mla	lr, r1, fp, lr
 8025976:	f890 b000 	ldrb.w	fp, [r0]
 802597a:	fb09 ee0b 	mla	lr, r9, fp, lr
 802597e:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8025982:	f808 ec06 	strb.w	lr, [r8, #-6]
 8025986:	f896 e001 	ldrb.w	lr, [r6, #1]
 802598a:	f897 b001 	ldrb.w	fp, [r7, #1]
 802598e:	fb03 fe0e 	mul.w	lr, r3, lr
 8025992:	fb0c ee0b 	mla	lr, ip, fp, lr
 8025996:	f892 b001 	ldrb.w	fp, [r2, #1]
 802599a:	fb01 ee0b 	mla	lr, r1, fp, lr
 802599e:	f890 b001 	ldrb.w	fp, [r0, #1]
 80259a2:	fb09 ee0b 	mla	lr, r9, fp, lr
 80259a6:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 80259aa:	f808 ec05 	strb.w	lr, [r8, #-5]
 80259ae:	78b6      	ldrb	r6, [r6, #2]
 80259b0:	78bf      	ldrb	r7, [r7, #2]
 80259b2:	4373      	muls	r3, r6
 80259b4:	7896      	ldrb	r6, [r2, #2]
 80259b6:	7882      	ldrb	r2, [r0, #2]
 80259b8:	fb0c 3307 	mla	r3, ip, r7, r3
 80259bc:	fb01 3306 	mla	r3, r1, r6, r3
 80259c0:	fb09 3902 	mla	r9, r9, r2, r3
 80259c4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80259c6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80259c8:	441c      	add	r4, r3
 80259ca:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80259cc:	ea4f 2929 	mov.w	r9, r9, asr #8
 80259d0:	4413      	add	r3, r2
 80259d2:	f808 9c04 	strb.w	r9, [r8, #-4]
 80259d6:	9322      	str	r3, [sp, #136]	; 0x88
 80259d8:	e70d      	b.n	80257f6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x232>
 80259da:	b151      	cbz	r1, 80259f2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42e>
 80259dc:	f81c 2002 	ldrb.w	r2, [ip, r2]
 80259e0:	4638      	mov	r0, r7
 80259e2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80259e6:	442a      	add	r2, r5
 80259e8:	463e      	mov	r6, r7
 80259ea:	e7a3      	b.n	8025934 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 80259ec:	4638      	mov	r0, r7
 80259ee:	463a      	mov	r2, r7
 80259f0:	e7a0      	b.n	8025934 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 80259f2:	4638      	mov	r0, r7
 80259f4:	463a      	mov	r2, r7
 80259f6:	e7f7      	b.n	80259e8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x424>
 80259f8:	b00d      	add	sp, #52	; 0x34
 80259fa:	ecbd 8b0a 	vpop	{d8-d12}
 80259fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08025a04 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>:
 8025a04:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025a08:	e9dd 050e 	ldrd	r0, r5, [sp, #56]	; 0x38
 8025a0c:	f9bd e030 	ldrsh.w	lr, [sp, #48]	; 0x30
 8025a10:	2d00      	cmp	r5, #0
 8025a12:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	; 0x34
 8025a16:	fb05 040e 	mla	r4, r5, lr, r0
 8025a1a:	f89d 7040 	ldrb.w	r7, [sp, #64]	; 0x40
 8025a1e:	f89d c044 	ldrb.w	ip, [sp, #68]	; 0x44
 8025a22:	eb02 0804 	add.w	r8, r2, r4
 8025a26:	db40      	blt.n	8025aaa <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xa6>
 8025a28:	45a9      	cmp	r9, r5
 8025a2a:	dd3e      	ble.n	8025aaa <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xa6>
 8025a2c:	2800      	cmp	r0, #0
 8025a2e:	db3a      	blt.n	8025aa6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xa2>
 8025a30:	4586      	cmp	lr, r0
 8025a32:	dd38      	ble.n	8025aa6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xa2>
 8025a34:	5d12      	ldrb	r2, [r2, r4]
 8025a36:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 8025a3a:	1c42      	adds	r2, r0, #1
 8025a3c:	d438      	bmi.n	8025ab0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xac>
 8025a3e:	4596      	cmp	lr, r2
 8025a40:	dd36      	ble.n	8025ab0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xac>
 8025a42:	b3bf      	cbz	r7, 8025ab4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xb0>
 8025a44:	f898 2001 	ldrb.w	r2, [r8, #1]
 8025a48:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 8025a4c:	3501      	adds	r5, #1
 8025a4e:	d435      	bmi.n	8025abc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xb8>
 8025a50:	45a9      	cmp	r9, r5
 8025a52:	dd33      	ble.n	8025abc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xb8>
 8025a54:	f1bc 0f00 	cmp.w	ip, #0
 8025a58:	d033      	beq.n	8025ac2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xbe>
 8025a5a:	2800      	cmp	r0, #0
 8025a5c:	db2c      	blt.n	8025ab8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xb4>
 8025a5e:	4586      	cmp	lr, r0
 8025a60:	dd2a      	ble.n	8025ab8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xb4>
 8025a62:	f818 200e 	ldrb.w	r2, [r8, lr]
 8025a66:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8025a6a:	3001      	adds	r0, #1
 8025a6c:	d42c      	bmi.n	8025ac8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xc4>
 8025a6e:	4586      	cmp	lr, r0
 8025a70:	dd2a      	ble.n	8025ac8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xc4>
 8025a72:	b35f      	cbz	r7, 8025acc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xc8>
 8025a74:	44c6      	add	lr, r8
 8025a76:	f89e 2001 	ldrb.w	r2, [lr, #1]
 8025a7a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8025a7e:	2f0f      	cmp	r7, #15
 8025a80:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 8025a84:	ea4f 6a14 	mov.w	sl, r4, lsr #24
 8025a88:	ea4f 6915 	mov.w	r9, r5, lsr #24
 8025a8c:	ea4f 6812 	mov.w	r8, r2, lsr #24
 8025a90:	d802      	bhi.n	8025a98 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x94>
 8025a92:	f1bc 0f0f 	cmp.w	ip, #15
 8025a96:	d91b      	bls.n	8025ad0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xcc>
 8025a98:	4b77      	ldr	r3, [pc, #476]	; (8025c78 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x274>)
 8025a9a:	f240 1157 	movw	r1, #343	; 0x157
 8025a9e:	4a77      	ldr	r2, [pc, #476]	; (8025c7c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x278>)
 8025aa0:	4877      	ldr	r0, [pc, #476]	; (8025c80 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x27c>)
 8025aa2:	f005 fee9 	bl	802b878 <__assert_func>
 8025aa6:	2600      	movs	r6, #0
 8025aa8:	e7c7      	b.n	8025a3a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x36>
 8025aaa:	2400      	movs	r4, #0
 8025aac:	4626      	mov	r6, r4
 8025aae:	e7cd      	b.n	8025a4c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x48>
 8025ab0:	2400      	movs	r4, #0
 8025ab2:	e7cb      	b.n	8025a4c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x48>
 8025ab4:	463c      	mov	r4, r7
 8025ab6:	e7c9      	b.n	8025a4c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x48>
 8025ab8:	2500      	movs	r5, #0
 8025aba:	e7d6      	b.n	8025a6a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x66>
 8025abc:	2200      	movs	r2, #0
 8025abe:	4615      	mov	r5, r2
 8025ac0:	e7dd      	b.n	8025a7e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x7a>
 8025ac2:	4662      	mov	r2, ip
 8025ac4:	4665      	mov	r5, ip
 8025ac6:	e7da      	b.n	8025a7e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x7a>
 8025ac8:	2200      	movs	r2, #0
 8025aca:	e7d8      	b.n	8025a7e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x7a>
 8025acc:	463a      	mov	r2, r7
 8025ace:	e7d6      	b.n	8025a7e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x7a>
 8025ad0:	b2bf      	uxth	r7, r7
 8025ad2:	fa1f f08c 	uxth.w	r0, ip
 8025ad6:	ea4f 1c07 	mov.w	ip, r7, lsl #4
 8025ada:	fb00 fe07 	mul.w	lr, r0, r7
 8025ade:	f5cc 7380 	rsb	r3, ip, #256	; 0x100
 8025ae2:	ebce 1000 	rsb	r0, lr, r0, lsl #4
 8025ae6:	ebac 070e 	sub.w	r7, ip, lr
 8025aea:	b280      	uxth	r0, r0
 8025aec:	b2bf      	uxth	r7, r7
 8025aee:	1a1b      	subs	r3, r3, r0
 8025af0:	fb07 fc0a 	mul.w	ip, r7, sl
 8025af4:	b29b      	uxth	r3, r3
 8025af6:	fb03 cc0b 	mla	ip, r3, fp, ip
 8025afa:	9300      	str	r3, [sp, #0]
 8025afc:	fb00 cc09 	mla	ip, r0, r9, ip
 8025b00:	fb0e cc08 	mla	ip, lr, r8, ip
 8025b04:	f3cc 2307 	ubfx	r3, ip, #8, #8
 8025b08:	9301      	str	r3, [sp, #4]
 8025b0a:	2b00      	cmp	r3, #0
 8025b0c:	f000 80b0 	beq.w	8025c70 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x26c>
 8025b10:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 8025b14:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8025b18:	fb0b fc0c 	mul.w	ip, fp, ip
 8025b1c:	fb0b f606 	mul.w	r6, fp, r6
 8025b20:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 8025b24:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8025b28:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 8025b2c:	44dc      	add	ip, fp
 8025b2e:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8025b32:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8025b36:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025b3a:	fb0a fb0b 	mul.w	fp, sl, fp
 8025b3e:	fb0a fa04 	mul.w	sl, sl, r4
 8025b42:	f00c 13ff 	and.w	r3, ip, #16711935	; 0xff00ff
 8025b46:	f506 7c80 	add.w	ip, r6, #256	; 0x100
 8025b4a:	f50a 7480 	add.w	r4, sl, #256	; 0x100
 8025b4e:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 8025b52:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 8025b56:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8025b5a:	eb04 2a1a 	add.w	sl, r4, sl, lsr #8
 8025b5e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8025b62:	0a36      	lsrs	r6, r6, #8
 8025b64:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8025b68:	44dc      	add	ip, fp
 8025b6a:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8025b6e:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8025b72:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8025b76:	fb09 fb0b 	mul.w	fp, r9, fp
 8025b7a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025b7e:	fb09 f905 	mul.w	r9, r9, r5
 8025b82:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8025b86:	ea4f 241b 	mov.w	r4, fp, lsr #8
 8025b8a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8025b8e:	f509 7580 	add.w	r5, r9, #256	; 0x100
 8025b92:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8025b96:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8025b9a:	fb0c fc07 	mul.w	ip, ip, r7
 8025b9e:	eb05 2919 	add.w	r9, r5, r9, lsr #8
 8025ba2:	f002 15ff 	and.w	r5, r2, #16711935	; 0xff00ff
 8025ba6:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8025baa:	445c      	add	r4, fp
 8025bac:	fb08 f505 	mul.w	r5, r8, r5
 8025bb0:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8025bb4:	fb08 f802 	mul.w	r8, r8, r2
 8025bb8:	0a24      	lsrs	r4, r4, #8
 8025bba:	0a2a      	lsrs	r2, r5, #8
 8025bbc:	f105 1501 	add.w	r5, r5, #65537	; 0x10001
 8025bc0:	fb07 f70a 	mul.w	r7, r7, sl
 8025bc4:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8025bc8:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8025bcc:	4415      	add	r5, r2
 8025bce:	f508 7280 	add.w	r2, r8, #256	; 0x100
 8025bd2:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 8025bd6:	9a00      	ldr	r2, [sp, #0]
 8025bd8:	0a2d      	lsrs	r5, r5, #8
 8025bda:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8025bde:	fb03 cc02 	mla	ip, r3, r2, ip
 8025be2:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8025be6:	fb02 7306 	mla	r3, r2, r6, r7
 8025bea:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8025bee:	9a01      	ldr	r2, [sp, #4]
 8025bf0:	fb05 c50e 	mla	r5, r5, lr, ip
 8025bf4:	fb0e 3e08 	mla	lr, lr, r8, r3
 8025bf8:	f409 437f 	and.w	r3, r9, #65280	; 0xff00
 8025bfc:	fb04 5400 	mla	r4, r4, r0, r5
 8025c00:	fb00 e303 	mla	r3, r0, r3, lr
 8025c04:	0a24      	lsrs	r4, r4, #8
 8025c06:	0a1b      	lsrs	r3, r3, #8
 8025c08:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8025c0c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8025c10:	431c      	orrs	r4, r3
 8025c12:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 8025c16:	b29b      	uxth	r3, r3
 8025c18:	b2e0      	uxtb	r0, r4
 8025c1a:	435a      	muls	r2, r3
 8025c1c:	fb10 f003 	smulbb	r0, r0, r3
 8025c20:	1c55      	adds	r5, r2, #1
 8025c22:	eb05 2512 	add.w	r5, r5, r2, lsr #8
 8025c26:	780a      	ldrb	r2, [r1, #0]
 8025c28:	ea6f 2515 	mvn.w	r5, r5, lsr #8
 8025c2c:	b2ed      	uxtb	r5, r5
 8025c2e:	fb02 0205 	mla	r2, r2, r5, r0
 8025c32:	b292      	uxth	r2, r2
 8025c34:	1c50      	adds	r0, r2, #1
 8025c36:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 8025c3a:	7848      	ldrb	r0, [r1, #1]
 8025c3c:	fb10 f005 	smulbb	r0, r0, r5
 8025c40:	1212      	asrs	r2, r2, #8
 8025c42:	700a      	strb	r2, [r1, #0]
 8025c44:	f3c4 2207 	ubfx	r2, r4, #8, #8
 8025c48:	0c24      	lsrs	r4, r4, #16
 8025c4a:	fb02 0203 	mla	r2, r2, r3, r0
 8025c4e:	b292      	uxth	r2, r2
 8025c50:	1c50      	adds	r0, r2, #1
 8025c52:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 8025c56:	1212      	asrs	r2, r2, #8
 8025c58:	704a      	strb	r2, [r1, #1]
 8025c5a:	788a      	ldrb	r2, [r1, #2]
 8025c5c:	fb12 f505 	smulbb	r5, r2, r5
 8025c60:	fb04 5303 	mla	r3, r4, r3, r5
 8025c64:	b29b      	uxth	r3, r3
 8025c66:	1c5a      	adds	r2, r3, #1
 8025c68:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8025c6c:	121b      	asrs	r3, r3, #8
 8025c6e:	708b      	strb	r3, [r1, #2]
 8025c70:	b003      	add	sp, #12
 8025c72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025c76:	bf00      	nop
 8025c78:	080312ae 	.word	0x080312ae
 8025c7c:	080317a6 	.word	0x080317a6
 8025c80:	08031377 	.word	0x08031377

08025c84 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8025c84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025c88:	ed2d 8b08 	vpush	{d8-d11}
 8025c8c:	b09f      	sub	sp, #124	; 0x7c
 8025c8e:	eeb0 aa40 	vmov.f32	s20, s0
 8025c92:	eef0 9a60 	vmov.f32	s19, s1
 8025c96:	921b      	str	r2, [sp, #108]	; 0x6c
 8025c98:	eeb0 9a41 	vmov.f32	s18, s2
 8025c9c:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 8025c9e:	eeb0 8a62 	vmov.f32	s16, s5
 8025ca2:	9309      	str	r3, [sp, #36]	; 0x24
 8025ca4:	eef0 8a43 	vmov.f32	s17, s6
 8025ca8:	f89d 30e4 	ldrb.w	r3, [sp, #228]	; 0xe4
 8025cac:	eef0 ba44 	vmov.f32	s23, s8
 8025cb0:	901d      	str	r0, [sp, #116]	; 0x74
 8025cb2:	eeb0 ba64 	vmov.f32	s22, s9
 8025cb6:	931c      	str	r3, [sp, #112]	; 0x70
 8025cb8:	eef0 aa45 	vmov.f32	s21, s10
 8025cbc:	6850      	ldr	r0, [r2, #4]
 8025cbe:	9119      	str	r1, [sp, #100]	; 0x64
 8025cc0:	6812      	ldr	r2, [r2, #0]
 8025cc2:	9d32      	ldr	r5, [sp, #200]	; 0xc8
 8025cc4:	e9dd 1336 	ldrd	r1, r3, [sp, #216]	; 0xd8
 8025cc8:	fb00 1303 	mla	r3, r0, r3, r1
 8025ccc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8025cd0:	18d3      	adds	r3, r2, r3
 8025cd2:	930c      	str	r3, [sp, #48]	; 0x30
 8025cd4:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 8025cd6:	681b      	ldr	r3, [r3, #0]
 8025cd8:	9312      	str	r3, [sp, #72]	; 0x48
 8025cda:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 8025cdc:	685e      	ldr	r6, [r3, #4]
 8025cde:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
 8025ce2:	3604      	adds	r6, #4
 8025ce4:	930d      	str	r3, [sp, #52]	; 0x34
 8025ce6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8025ce8:	2b00      	cmp	r3, #0
 8025cea:	dc03      	bgt.n	8025cf4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8025cec:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8025cee:	2b00      	cmp	r3, #0
 8025cf0:	f340 8378 	ble.w	80263e4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x760>
 8025cf4:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 8025cf6:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8025cfa:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8025cfe:	1e48      	subs	r0, r1, #1
 8025d00:	1e57      	subs	r7, r2, #1
 8025d02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025d04:	2b00      	cmp	r3, #0
 8025d06:	f340 818c 	ble.w	8026022 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39e>
 8025d0a:	9c31      	ldr	r4, [sp, #196]	; 0xc4
 8025d0c:	142b      	asrs	r3, r5, #16
 8025d0e:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8025d12:	d406      	bmi.n	8025d22 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8025d14:	4584      	cmp	ip, r0
 8025d16:	da04      	bge.n	8025d22 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8025d18:	2b00      	cmp	r3, #0
 8025d1a:	db02      	blt.n	8025d22 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8025d1c:	42bb      	cmp	r3, r7
 8025d1e:	f2c0 8181 	blt.w	8026024 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a0>
 8025d22:	f11c 0c01 	adds.w	ip, ip, #1
 8025d26:	f100 816f 	bmi.w	8026008 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x384>
 8025d2a:	4561      	cmp	r1, ip
 8025d2c:	f2c0 816c 	blt.w	8026008 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x384>
 8025d30:	3301      	adds	r3, #1
 8025d32:	f100 8169 	bmi.w	8026008 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x384>
 8025d36:	429a      	cmp	r2, r3
 8025d38:	f2c0 8166 	blt.w	8026008 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x384>
 8025d3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025d3e:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8025d40:	931a      	str	r3, [sp, #104]	; 0x68
 8025d42:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8025d44:	2b00      	cmp	r3, #0
 8025d46:	f340 818c 	ble.w	8026062 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3de>
 8025d4a:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8025d4c:	ea4f 4c25 	mov.w	ip, r5, asr #16
 8025d50:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8025d54:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8025d58:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 8025d5a:	e9d3 0e02 	ldrd	r0, lr, [r3, #8]
 8025d5e:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8025d60:	141b      	asrs	r3, r3, #16
 8025d62:	f100 81d0 	bmi.w	8026106 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x482>
 8025d66:	f100 38ff 	add.w	r8, r0, #4294967295
 8025d6a:	4543      	cmp	r3, r8
 8025d6c:	f280 81cb 	bge.w	8026106 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x482>
 8025d70:	f1bc 0f00 	cmp.w	ip, #0
 8025d74:	f2c0 81c7 	blt.w	8026106 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x482>
 8025d78:	f10e 38ff 	add.w	r8, lr, #4294967295
 8025d7c:	45c4      	cmp	ip, r8
 8025d7e:	f280 81c2 	bge.w	8026106 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x482>
 8025d82:	b200      	sxth	r0, r0
 8025d84:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8025d86:	fb0c 3300 	mla	r3, ip, r0, r3
 8025d8a:	eb04 0803 	add.w	r8, r4, r3
 8025d8e:	5ce3      	ldrb	r3, [r4, r3]
 8025d90:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8025d94:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 8025d98:	2a00      	cmp	r2, #0
 8025d9a:	f000 81a9 	beq.w	80260f0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46c>
 8025d9e:	f898 c001 	ldrb.w	ip, [r8, #1]
 8025da2:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 8025da6:	940e      	str	r4, [sp, #56]	; 0x38
 8025da8:	0e24      	lsrs	r4, r4, #24
 8025daa:	9415      	str	r4, [sp, #84]	; 0x54
 8025dac:	b179      	cbz	r1, 8025dce <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 8025dae:	eb08 0c00 	add.w	ip, r8, r0
 8025db2:	f818 0000 	ldrb.w	r0, [r8, r0]
 8025db6:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8025dba:	900a      	str	r0, [sp, #40]	; 0x28
 8025dbc:	0e00      	lsrs	r0, r0, #24
 8025dbe:	9013      	str	r0, [sp, #76]	; 0x4c
 8025dc0:	f89c 0001 	ldrb.w	r0, [ip, #1]
 8025dc4:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8025dc8:	900f      	str	r0, [sp, #60]	; 0x3c
 8025dca:	0e00      	lsrs	r0, r0, #24
 8025dcc:	9016      	str	r0, [sp, #88]	; 0x58
 8025dce:	b292      	uxth	r2, r2
 8025dd0:	9815      	ldr	r0, [sp, #84]	; 0x54
 8025dd2:	b289      	uxth	r1, r1
 8025dd4:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8025dd6:	fb02 f901 	mul.w	r9, r2, r1
 8025dda:	0112      	lsls	r2, r2, #4
 8025ddc:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8025de0:	eba2 0809 	sub.w	r8, r2, r9
 8025de4:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8025de8:	b289      	uxth	r1, r1
 8025dea:	fa1f f888 	uxth.w	r8, r8
 8025dee:	1a52      	subs	r2, r2, r1
 8025df0:	fb08 f000 	mul.w	r0, r8, r0
 8025df4:	b292      	uxth	r2, r2
 8025df6:	fb02 000e 	mla	r0, r2, lr, r0
 8025dfa:	fb01 0004 	mla	r0, r1, r4, r0
 8025dfe:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8025e00:	fb09 0004 	mla	r0, r9, r4, r0
 8025e04:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8025e08:	2800      	cmp	r0, #0
 8025e0a:	f000 80f2 	beq.w	8025ff2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 8025e0e:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8025e12:	d01b      	beq.n	8025e4c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 8025e14:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8025e18:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8025e1c:	fb0e fa0a 	mul.w	sl, lr, sl
 8025e20:	fb0e fe03 	mul.w	lr, lr, r3
 8025e24:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8025e28:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8025e2c:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8025e30:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8025e34:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8025e38:	4453      	add	r3, sl
 8025e3a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025e3e:	0a1b      	lsrs	r3, r3, #8
 8025e40:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8025e44:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8025e48:	ea43 030c 	orr.w	r3, r3, ip
 8025e4c:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8025e4e:	2cff      	cmp	r4, #255	; 0xff
 8025e50:	d021      	beq.n	8025e96 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
 8025e52:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8025e54:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8025e58:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8025e5a:	fb04 fb0b 	mul.w	fp, r4, fp
 8025e5e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8025e60:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8025e64:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8025e66:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8025e6a:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8025e6e:	fb04 fa0a 	mul.w	sl, r4, sl
 8025e72:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8025e76:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8025e7a:	44de      	add	lr, fp
 8025e7c:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8025e80:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8025e84:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8025e88:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8025e8c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8025e90:	ea4e 040a 	orr.w	r4, lr, sl
 8025e94:	940e      	str	r4, [sp, #56]	; 0x38
 8025e96:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8025e98:	2cff      	cmp	r4, #255	; 0xff
 8025e9a:	d021      	beq.n	8025ee0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25c>
 8025e9c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8025e9e:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8025ea2:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8025ea4:	fb04 fb0b 	mul.w	fp, r4, fp
 8025ea8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8025eaa:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8025eae:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8025eb0:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8025eb4:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8025eb8:	fb04 fa0a 	mul.w	sl, r4, sl
 8025ebc:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8025ec0:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8025ec4:	44de      	add	lr, fp
 8025ec6:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8025eca:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8025ece:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8025ed2:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8025ed6:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8025eda:	ea4e 040a 	orr.w	r4, lr, sl
 8025ede:	940a      	str	r4, [sp, #40]	; 0x28
 8025ee0:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8025ee2:	2cff      	cmp	r4, #255	; 0xff
 8025ee4:	d021      	beq.n	8025f2a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 8025ee6:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8025ee8:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8025eec:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8025eee:	fb04 fb0b 	mul.w	fp, r4, fp
 8025ef2:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8025ef4:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8025ef8:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8025efa:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8025efe:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8025f02:	fb04 fa0a 	mul.w	sl, r4, sl
 8025f06:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8025f0a:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8025f0e:	44de      	add	lr, fp
 8025f10:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8025f14:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8025f18:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8025f1c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8025f20:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8025f24:	ea4e 040a 	orr.w	r4, lr, sl
 8025f28:	940f      	str	r4, [sp, #60]	; 0x3c
 8025f2a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8025f2c:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 8025f30:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8025f34:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8025f38:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8025f3a:	fb08 fc0c 	mul.w	ip, r8, ip
 8025f3e:	fb02 cc0e 	mla	ip, r2, lr, ip
 8025f42:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8025f46:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8025f48:	fb01 cc0e 	mla	ip, r1, lr, ip
 8025f4c:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8025f50:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8025f52:	fb09 cc0e 	mla	ip, r9, lr, ip
 8025f56:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 8025f5a:	fb08 f80e 	mul.w	r8, r8, lr
 8025f5e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025f62:	fb02 8303 	mla	r3, r2, r3, r8
 8025f66:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8025f68:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8025f6c:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 8025f70:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8025f72:	fb01 330a 	mla	r3, r1, sl, r3
 8025f76:	f402 417f 	and.w	r1, r2, #65280	; 0xff00
 8025f7a:	fb09 3901 	mla	r9, r9, r1, r3
 8025f7e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8025f80:	990d      	ldr	r1, [sp, #52]	; 0x34
 8025f82:	4343      	muls	r3, r0
 8025f84:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8025f88:	1c58      	adds	r0, r3, #1
 8025f8a:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8025f8e:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8025f92:	ea4c 0c09 	orr.w	ip, ip, r9
 8025f96:	783b      	ldrb	r3, [r7, #0]
 8025f98:	fa5f f28c 	uxtb.w	r2, ip
 8025f9c:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 8025fa0:	fb12 f201 	smulbb	r2, r2, r1
 8025fa4:	b2c0      	uxtb	r0, r0
 8025fa6:	fb03 2300 	mla	r3, r3, r0, r2
 8025faa:	b29b      	uxth	r3, r3
 8025fac:	1c5a      	adds	r2, r3, #1
 8025fae:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8025fb2:	787a      	ldrb	r2, [r7, #1]
 8025fb4:	fb12 f200 	smulbb	r2, r2, r0
 8025fb8:	121b      	asrs	r3, r3, #8
 8025fba:	703b      	strb	r3, [r7, #0]
 8025fbc:	f3cc 2307 	ubfx	r3, ip, #8, #8
 8025fc0:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8025fc4:	fb03 2301 	mla	r3, r3, r1, r2
 8025fc8:	b29b      	uxth	r3, r3
 8025fca:	1c5a      	adds	r2, r3, #1
 8025fcc:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8025fd0:	121b      	asrs	r3, r3, #8
 8025fd2:	707b      	strb	r3, [r7, #1]
 8025fd4:	78bb      	ldrb	r3, [r7, #2]
 8025fd6:	fb13 f000 	smulbb	r0, r3, r0
 8025fda:	fb0c 0c01 	mla	ip, ip, r1, r0
 8025fde:	fa1f fc8c 	uxth.w	ip, ip
 8025fe2:	f10c 0301 	add.w	r3, ip, #1
 8025fe6:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 8025fea:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8025fee:	f887 c002 	strb.w	ip, [r7, #2]
 8025ff2:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8025ff4:	3703      	adds	r7, #3
 8025ff6:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 8025ff8:	441a      	add	r2, r3
 8025ffa:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8025ffc:	441d      	add	r5, r3
 8025ffe:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8026000:	9231      	str	r2, [sp, #196]	; 0xc4
 8026002:	3b01      	subs	r3, #1
 8026004:	931a      	str	r3, [sp, #104]	; 0x68
 8026006:	e69c      	b.n	8025d42 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbe>
 8026008:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 802600a:	9c31      	ldr	r4, [sp, #196]	; 0xc4
 802600c:	441c      	add	r4, r3
 802600e:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8026010:	441d      	add	r5, r3
 8026012:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8026014:	9431      	str	r4, [sp, #196]	; 0xc4
 8026016:	3b01      	subs	r3, #1
 8026018:	9309      	str	r3, [sp, #36]	; 0x24
 802601a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802601c:	3303      	adds	r3, #3
 802601e:	930c      	str	r3, [sp, #48]	; 0x30
 8026020:	e66f      	b.n	8025d02 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8026022:	d026      	beq.n	8026072 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 8026024:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8026026:	9833      	ldr	r0, [sp, #204]	; 0xcc
 8026028:	3b01      	subs	r3, #1
 802602a:	9c31      	ldr	r4, [sp, #196]	; 0xc4
 802602c:	fb00 4003 	mla	r0, r0, r3, r4
 8026030:	1400      	asrs	r0, r0, #16
 8026032:	f53f ae83 	bmi.w	8025d3c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 8026036:	3901      	subs	r1, #1
 8026038:	4288      	cmp	r0, r1
 802603a:	f6bf ae7f 	bge.w	8025d3c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 802603e:	9934      	ldr	r1, [sp, #208]	; 0xd0
 8026040:	fb01 5303 	mla	r3, r1, r3, r5
 8026044:	141b      	asrs	r3, r3, #16
 8026046:	f53f ae79 	bmi.w	8025d3c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 802604a:	3a01      	subs	r2, #1
 802604c:	4293      	cmp	r3, r2
 802604e:	f6bf ae75 	bge.w	8025d3c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 8026052:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8026054:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 8026058:	f103 0e03 	add.w	lr, r3, #3
 802605c:	f1bb 0f00 	cmp.w	fp, #0
 8026060:	dc71      	bgt.n	8026146 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 8026062:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8026064:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8026068:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802606a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 802606e:	4423      	add	r3, r4
 8026070:	930c      	str	r3, [sp, #48]	; 0x30
 8026072:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8026074:	2b00      	cmp	r3, #0
 8026076:	f340 81b5 	ble.w	80263e4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x760>
 802607a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802607e:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8026080:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8026084:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8026088:	eef0 6a48 	vmov.f32	s13, s16
 802608c:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8026090:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8026094:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8026098:	edcd 6a31 	vstr	s13, [sp, #196]	; 0xc4
 802609c:	eef0 6a68 	vmov.f32	s13, s17
 80260a0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80260a4:	ee16 5a90 	vmov	r5, s13
 80260a8:	ee29 7aa7 	vmul.f32	s14, s19, s15
 80260ac:	ee69 7a27 	vmul.f32	s15, s18, s15
 80260b0:	ee37 8a48 	vsub.f32	s16, s14, s16
 80260b4:	ee77 8ae8 	vsub.f32	s17, s15, s17
 80260b8:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 80260bc:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 80260c0:	ee18 2a10 	vmov	r2, s16
 80260c4:	eeb0 8a47 	vmov.f32	s16, s14
 80260c8:	fb92 f3f3 	sdiv	r3, r2, r3
 80260cc:	ee18 2a90 	vmov	r2, s17
 80260d0:	9333      	str	r3, [sp, #204]	; 0xcc
 80260d2:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80260d4:	eef0 8a67 	vmov.f32	s17, s15
 80260d8:	fb92 f3f3 	sdiv	r3, r2, r3
 80260dc:	9334      	str	r3, [sp, #208]	; 0xd0
 80260de:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80260e0:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80260e2:	3b01      	subs	r3, #1
 80260e4:	9319      	str	r3, [sp, #100]	; 0x64
 80260e6:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80260e8:	bf08      	it	eq
 80260ea:	4613      	moveq	r3, r2
 80260ec:	9309      	str	r3, [sp, #36]	; 0x24
 80260ee:	e5fa      	b.n	8025ce6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 80260f0:	2900      	cmp	r1, #0
 80260f2:	f43f ae6c 	beq.w	8025dce <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 80260f6:	f818 0000 	ldrb.w	r0, [r8, r0]
 80260fa:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 80260fe:	900a      	str	r0, [sp, #40]	; 0x28
 8026100:	0e00      	lsrs	r0, r0, #24
 8026102:	9013      	str	r0, [sp, #76]	; 0x4c
 8026104:	e663      	b.n	8025dce <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 8026106:	f113 0801 	adds.w	r8, r3, #1
 802610a:	f53f af72 	bmi.w	8025ff2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 802610e:	4540      	cmp	r0, r8
 8026110:	f6ff af6f 	blt.w	8025ff2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 8026114:	f11c 0801 	adds.w	r8, ip, #1
 8026118:	f53f af6b 	bmi.w	8025ff2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 802611c:	45c6      	cmp	lr, r8
 802611e:	f6ff af68 	blt.w	8025ff2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 8026122:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8026124:	b200      	sxth	r0, r0
 8026126:	9302      	str	r3, [sp, #8]
 8026128:	fa0f f38e 	sxth.w	r3, lr
 802612c:	9000      	str	r0, [sp, #0]
 802612e:	9301      	str	r3, [sp, #4]
 8026130:	4633      	mov	r3, r6
 8026132:	981d      	ldr	r0, [sp, #116]	; 0x74
 8026134:	e9cd 1405 	strd	r1, r4, [sp, #20]
 8026138:	e9cd c203 	strd	ip, r2, [sp, #12]
 802613c:	4639      	mov	r1, r7
 802613e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8026140:	f7ff fc60 	bl	8025a04 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>
 8026144:	e755      	b.n	8025ff2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 8026146:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8026148:	f3c5 3003 	ubfx	r0, r5, #12, #4
 802614c:	9c31      	ldr	r4, [sp, #196]	; 0xc4
 802614e:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8026152:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 8026154:	1427      	asrs	r7, r4, #16
 8026156:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8026158:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802615c:	142b      	asrs	r3, r5, #16
 802615e:	fb01 7303 	mla	r3, r1, r3, r7
 8026162:	18e7      	adds	r7, r4, r3
 8026164:	5ce3      	ldrb	r3, [r4, r3]
 8026166:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 802616a:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 802616e:	2a00      	cmp	r2, #0
 8026170:	f000 812e 	beq.w	80263d0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74c>
 8026174:	f897 8001 	ldrb.w	r8, [r7, #1]
 8026178:	f856 4028 	ldr.w	r4, [r6, r8, lsl #2]
 802617c:	9410      	str	r4, [sp, #64]	; 0x40
 802617e:	0e24      	lsrs	r4, r4, #24
 8026180:	9417      	str	r4, [sp, #92]	; 0x5c
 8026182:	b170      	cbz	r0, 80261a2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x51e>
 8026184:	eb07 0801 	add.w	r8, r7, r1
 8026188:	5c79      	ldrb	r1, [r7, r1]
 802618a:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 802618e:	910b      	str	r1, [sp, #44]	; 0x2c
 8026190:	0e09      	lsrs	r1, r1, #24
 8026192:	9114      	str	r1, [sp, #80]	; 0x50
 8026194:	f898 1001 	ldrb.w	r1, [r8, #1]
 8026198:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 802619c:	9111      	str	r1, [sp, #68]	; 0x44
 802619e:	0e09      	lsrs	r1, r1, #24
 80261a0:	9118      	str	r1, [sp, #96]	; 0x60
 80261a2:	b292      	uxth	r2, r2
 80261a4:	9917      	ldr	r1, [sp, #92]	; 0x5c
 80261a6:	b280      	uxth	r0, r0
 80261a8:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80261aa:	fb02 f900 	mul.w	r9, r2, r0
 80261ae:	0112      	lsls	r2, r2, #4
 80261b0:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 80261b4:	eba2 0809 	sub.w	r8, r2, r9
 80261b8:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 80261bc:	b280      	uxth	r0, r0
 80261be:	fa1f f888 	uxth.w	r8, r8
 80261c2:	1a12      	subs	r2, r2, r0
 80261c4:	fb08 f101 	mul.w	r1, r8, r1
 80261c8:	b292      	uxth	r2, r2
 80261ca:	fb02 110c 	mla	r1, r2, ip, r1
 80261ce:	fb00 1104 	mla	r1, r0, r4, r1
 80261d2:	9c18      	ldr	r4, [sp, #96]	; 0x60
 80261d4:	fb09 1104 	mla	r1, r9, r4, r1
 80261d8:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80261dc:	2900      	cmp	r1, #0
 80261de:	f000 80ec 	beq.w	80263ba <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x736>
 80261e2:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 80261e6:	d019      	beq.n	802621c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x598>
 80261e8:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 80261ec:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80261f0:	fb0c fa0a 	mul.w	sl, ip, sl
 80261f4:	fb0c fc03 	mul.w	ip, ip, r3
 80261f8:	ea4f 231a 	mov.w	r3, sl, lsr #8
 80261fc:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8026200:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 8026204:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8026208:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 802620c:	4453      	add	r3, sl
 802620e:	0a3f      	lsrs	r7, r7, #8
 8026210:	0a1b      	lsrs	r3, r3, #8
 8026212:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8026216:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802621a:	433b      	orrs	r3, r7
 802621c:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 802621e:	2cff      	cmp	r4, #255	; 0xff
 8026220:	d020      	beq.n	8026264 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e0>
 8026222:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8026224:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8026228:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 802622a:	4367      	muls	r7, r4
 802622c:	9c10      	ldr	r4, [sp, #64]	; 0x40
 802622e:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8026232:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8026236:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8026238:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 802623c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8026240:	fb04 fa0a 	mul.w	sl, r4, sl
 8026244:	44bc      	add	ip, r7
 8026246:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 802624a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802624e:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8026252:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8026256:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802625a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802625e:	ea4c 040a 	orr.w	r4, ip, sl
 8026262:	9410      	str	r4, [sp, #64]	; 0x40
 8026264:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8026266:	2cff      	cmp	r4, #255	; 0xff
 8026268:	d020      	beq.n	80262ac <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x628>
 802626a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 802626c:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8026270:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8026272:	4367      	muls	r7, r4
 8026274:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8026276:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 802627a:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 802627e:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8026280:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8026284:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8026288:	fb04 fa0a 	mul.w	sl, r4, sl
 802628c:	44bc      	add	ip, r7
 802628e:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8026292:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8026296:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 802629a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802629e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80262a2:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80262a6:	ea4c 040a 	orr.w	r4, ip, sl
 80262aa:	940b      	str	r4, [sp, #44]	; 0x2c
 80262ac:	9c18      	ldr	r4, [sp, #96]	; 0x60
 80262ae:	2cff      	cmp	r4, #255	; 0xff
 80262b0:	d020      	beq.n	80262f4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x670>
 80262b2:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80262b4:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 80262b8:	9c18      	ldr	r4, [sp, #96]	; 0x60
 80262ba:	4367      	muls	r7, r4
 80262bc:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80262be:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80262c2:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80262c6:	9c18      	ldr	r4, [sp, #96]	; 0x60
 80262c8:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80262cc:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80262d0:	fb04 fa0a 	mul.w	sl, r4, sl
 80262d4:	44bc      	add	ip, r7
 80262d6:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 80262da:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80262de:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80262e2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80262e6:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80262ea:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80262ee:	ea4c 040a 	orr.w	r4, ip, sl
 80262f2:	9411      	str	r4, [sp, #68]	; 0x44
 80262f4:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80262f6:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 80262fa:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80262fe:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8026302:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8026304:	fb08 f707 	mul.w	r7, r8, r7
 8026308:	fb02 770c 	mla	r7, r2, ip, r7
 802630c:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8026310:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8026312:	fb00 770c 	mla	r7, r0, ip, r7
 8026316:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 802631a:	9c10      	ldr	r4, [sp, #64]	; 0x40
 802631c:	fb09 770c 	mla	r7, r9, ip, r7
 8026320:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 8026324:	fb08 f80c 	mul.w	r8, r8, ip
 8026328:	0a3f      	lsrs	r7, r7, #8
 802632a:	fb02 8303 	mla	r3, r2, r3, r8
 802632e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8026330:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8026334:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 8026338:	9a11      	ldr	r2, [sp, #68]	; 0x44
 802633a:	fb00 330a 	mla	r3, r0, sl, r3
 802633e:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 8026342:	980d      	ldr	r0, [sp, #52]	; 0x34
 8026344:	fb09 3c0c 	mla	ip, r9, ip, r3
 8026348:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802634a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802634e:	434b      	muls	r3, r1
 8026350:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8026354:	1c59      	adds	r1, r3, #1
 8026356:	ea47 070c 	orr.w	r7, r7, ip
 802635a:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 802635e:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 8026362:	b2fa      	uxtb	r2, r7
 8026364:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 8026368:	fb12 f200 	smulbb	r2, r2, r0
 802636c:	b2c9      	uxtb	r1, r1
 802636e:	fb03 2301 	mla	r3, r3, r1, r2
 8026372:	b29b      	uxth	r3, r3
 8026374:	1c5a      	adds	r2, r3, #1
 8026376:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 802637a:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 802637e:	fb12 f201 	smulbb	r2, r2, r1
 8026382:	121b      	asrs	r3, r3, #8
 8026384:	f80e 3c03 	strb.w	r3, [lr, #-3]
 8026388:	f3c7 2307 	ubfx	r3, r7, #8, #8
 802638c:	0c3f      	lsrs	r7, r7, #16
 802638e:	fb03 2300 	mla	r3, r3, r0, r2
 8026392:	b29b      	uxth	r3, r3
 8026394:	1c5a      	adds	r2, r3, #1
 8026396:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 802639a:	121b      	asrs	r3, r3, #8
 802639c:	f80e 3c02 	strb.w	r3, [lr, #-2]
 80263a0:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 80263a4:	fb13 f101 	smulbb	r1, r3, r1
 80263a8:	fb07 1700 	mla	r7, r7, r0, r1
 80263ac:	b2bf      	uxth	r7, r7
 80263ae:	1c7b      	adds	r3, r7, #1
 80263b0:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 80263b4:	123f      	asrs	r7, r7, #8
 80263b6:	f80e 7c01 	strb.w	r7, [lr, #-1]
 80263ba:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 80263bc:	f10e 0e03 	add.w	lr, lr, #3
 80263c0:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 80263c2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80263c6:	441a      	add	r2, r3
 80263c8:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 80263ca:	9231      	str	r2, [sp, #196]	; 0xc4
 80263cc:	441d      	add	r5, r3
 80263ce:	e645      	b.n	802605c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3d8>
 80263d0:	2800      	cmp	r0, #0
 80263d2:	f43f aee6 	beq.w	80261a2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x51e>
 80263d6:	5c79      	ldrb	r1, [r7, r1]
 80263d8:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80263dc:	910b      	str	r1, [sp, #44]	; 0x2c
 80263de:	0e09      	lsrs	r1, r1, #24
 80263e0:	9114      	str	r1, [sp, #80]	; 0x50
 80263e2:	e6de      	b.n	80261a2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x51e>
 80263e4:	b01f      	add	sp, #124	; 0x7c
 80263e6:	ecbd 8b08 	vpop	{d8-d11}
 80263ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080263f0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>:
 80263f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80263f4:	e9dd 040e 	ldrd	r0, r4, [sp, #56]	; 0x38
 80263f8:	f9bd c030 	ldrsh.w	ip, [sp, #48]	; 0x30
 80263fc:	2c00      	cmp	r4, #0
 80263fe:	f9bd 8034 	ldrsh.w	r8, [sp, #52]	; 0x34
 8026402:	fb04 060c 	mla	r6, r4, ip, r0
 8026406:	f89d 5040 	ldrb.w	r5, [sp, #64]	; 0x40
 802640a:	f89d 7044 	ldrb.w	r7, [sp, #68]	; 0x44
 802640e:	eb02 0e06 	add.w	lr, r2, r6
 8026412:	db3d      	blt.n	8026490 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xa0>
 8026414:	45a0      	cmp	r8, r4
 8026416:	dd3b      	ble.n	8026490 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xa0>
 8026418:	2800      	cmp	r0, #0
 802641a:	db37      	blt.n	802648c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>
 802641c:	4584      	cmp	ip, r0
 802641e:	dd35      	ble.n	802648c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>
 8026420:	5d92      	ldrb	r2, [r2, r6]
 8026422:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8026426:	1c46      	adds	r6, r0, #1
 8026428:	d435      	bmi.n	8026496 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xa6>
 802642a:	45b4      	cmp	ip, r6
 802642c:	dd33      	ble.n	8026496 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xa6>
 802642e:	b3a5      	cbz	r5, 802649a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xaa>
 8026430:	f89e 6001 	ldrb.w	r6, [lr, #1]
 8026434:	f853 6026 	ldr.w	r6, [r3, r6, lsl #2]
 8026438:	3401      	adds	r4, #1
 802643a:	d432      	bmi.n	80264a2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xb2>
 802643c:	45a0      	cmp	r8, r4
 802643e:	dd30      	ble.n	80264a2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xb2>
 8026440:	b397      	cbz	r7, 80264a8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xb8>
 8026442:	2800      	cmp	r0, #0
 8026444:	db2b      	blt.n	802649e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xae>
 8026446:	4584      	cmp	ip, r0
 8026448:	dd29      	ble.n	802649e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xae>
 802644a:	f81e 400c 	ldrb.w	r4, [lr, ip]
 802644e:	f853 4024 	ldr.w	r4, [r3, r4, lsl #2]
 8026452:	3001      	adds	r0, #1
 8026454:	d42b      	bmi.n	80264ae <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xbe>
 8026456:	4584      	cmp	ip, r0
 8026458:	dd29      	ble.n	80264ae <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xbe>
 802645a:	b355      	cbz	r5, 80264b2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xc2>
 802645c:	44f4      	add	ip, lr
 802645e:	f89c 0001 	ldrb.w	r0, [ip, #1]
 8026462:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8026466:	2d0f      	cmp	r5, #15
 8026468:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 802646c:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 8026470:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8026474:	ea4f 6813 	mov.w	r8, r3, lsr #24
 8026478:	d801      	bhi.n	802647e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x8e>
 802647a:	2f0f      	cmp	r7, #15
 802647c:	d91b      	bls.n	80264b6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xc6>
 802647e:	4b7f      	ldr	r3, [pc, #508]	; (802667c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x28c>)
 8026480:	f240 1157 	movw	r1, #343	; 0x157
 8026484:	4a7e      	ldr	r2, [pc, #504]	; (8026680 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x290>)
 8026486:	487f      	ldr	r0, [pc, #508]	; (8026684 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x294>)
 8026488:	f005 f9f6 	bl	802b878 <__assert_func>
 802648c:	2200      	movs	r2, #0
 802648e:	e7ca      	b.n	8026426 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x36>
 8026490:	2600      	movs	r6, #0
 8026492:	4632      	mov	r2, r6
 8026494:	e7d0      	b.n	8026438 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x48>
 8026496:	2600      	movs	r6, #0
 8026498:	e7ce      	b.n	8026438 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x48>
 802649a:	462e      	mov	r6, r5
 802649c:	e7cc      	b.n	8026438 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x48>
 802649e:	2400      	movs	r4, #0
 80264a0:	e7d7      	b.n	8026452 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x62>
 80264a2:	2300      	movs	r3, #0
 80264a4:	461c      	mov	r4, r3
 80264a6:	e7de      	b.n	8026466 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x76>
 80264a8:	463b      	mov	r3, r7
 80264aa:	463c      	mov	r4, r7
 80264ac:	e7db      	b.n	8026466 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x76>
 80264ae:	2300      	movs	r3, #0
 80264b0:	e7d9      	b.n	8026466 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x76>
 80264b2:	462b      	mov	r3, r5
 80264b4:	e7d7      	b.n	8026466 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x76>
 80264b6:	b2a8      	uxth	r0, r5
 80264b8:	b2bf      	uxth	r7, r7
 80264ba:	fb07 fe00 	mul.w	lr, r7, r0
 80264be:	0100      	lsls	r0, r0, #4
 80264c0:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 80264c4:	eba0 0c0e 	sub.w	ip, r0, lr
 80264c8:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 80264cc:	b2bf      	uxth	r7, r7
 80264ce:	fa1f fc8c 	uxth.w	ip, ip
 80264d2:	1bc5      	subs	r5, r0, r7
 80264d4:	fb0c f00a 	mul.w	r0, ip, sl
 80264d8:	b2ad      	uxth	r5, r5
 80264da:	fb05 000b 	mla	r0, r5, fp, r0
 80264de:	fb07 0009 	mla	r0, r7, r9, r0
 80264e2:	fb0e 0008 	mla	r0, lr, r8, r0
 80264e6:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80264ea:	9001      	str	r0, [sp, #4]
 80264ec:	2800      	cmp	r0, #0
 80264ee:	f000 80c2 	beq.w	8026676 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x286>
 80264f2:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 80264f6:	d018      	beq.n	802652a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x13a>
 80264f8:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 80264fc:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8026500:	fb0b f000 	mul.w	r0, fp, r0
 8026504:	fb0b fb02 	mul.w	fp, fp, r2
 8026508:	0a02      	lsrs	r2, r0, #8
 802650a:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 802650e:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8026512:	4402      	add	r2, r0
 8026514:	f50b 7080 	add.w	r0, fp, #256	; 0x100
 8026518:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 802651c:	0a12      	lsrs	r2, r2, #8
 802651e:	0a00      	lsrs	r0, r0, #8
 8026520:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8026524:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8026528:	4302      	orrs	r2, r0
 802652a:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 802652e:	d01a      	beq.n	8026566 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x176>
 8026530:	f006 10ff 	and.w	r0, r6, #16711935	; 0xff00ff
 8026534:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8026538:	fb0a f000 	mul.w	r0, sl, r0
 802653c:	fb0a fa06 	mul.w	sl, sl, r6
 8026540:	0a06      	lsrs	r6, r0, #8
 8026542:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 8026546:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 802654a:	4406      	add	r6, r0
 802654c:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 8026550:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 8026554:	0a36      	lsrs	r6, r6, #8
 8026556:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802655a:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 802655e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8026562:	ea46 060a 	orr.w	r6, r6, sl
 8026566:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 802656a:	d01b      	beq.n	80265a4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x1b4>
 802656c:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 8026570:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8026574:	fb09 fa0a 	mul.w	sl, r9, sl
 8026578:	fb09 f004 	mul.w	r0, r9, r4
 802657c:	ea4f 241a 	mov.w	r4, sl, lsr #8
 8026580:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8026584:	f500 7980 	add.w	r9, r0, #256	; 0x100
 8026588:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 802658c:	eb09 2910 	add.w	r9, r9, r0, lsr #8
 8026590:	4454      	add	r4, sl
 8026592:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8026596:	0a24      	lsrs	r4, r4, #8
 8026598:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 802659c:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 80265a0:	ea44 0409 	orr.w	r4, r4, r9
 80265a4:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 80265a8:	d01b      	beq.n	80265e2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x1f2>
 80265aa:	f003 19ff 	and.w	r9, r3, #16711935	; 0xff00ff
 80265ae:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80265b2:	fb08 f909 	mul.w	r9, r8, r9
 80265b6:	fb08 f003 	mul.w	r0, r8, r3
 80265ba:	ea4f 2319 	mov.w	r3, r9, lsr #8
 80265be:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 80265c2:	f500 7880 	add.w	r8, r0, #256	; 0x100
 80265c6:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80265ca:	eb08 2810 	add.w	r8, r8, r0, lsr #8
 80265ce:	444b      	add	r3, r9
 80265d0:	ea4f 2818 	mov.w	r8, r8, lsr #8
 80265d4:	0a1b      	lsrs	r3, r3, #8
 80265d6:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 80265da:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80265de:	ea43 0308 	orr.w	r3, r3, r8
 80265e2:	f006 10ff 	and.w	r0, r6, #16711935	; 0xff00ff
 80265e6:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80265ea:	f002 18ff 	and.w	r8, r2, #16711935	; 0xff00ff
 80265ee:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80265f2:	fb0c f000 	mul.w	r0, ip, r0
 80265f6:	fb0c f606 	mul.w	r6, ip, r6
 80265fa:	fb05 0808 	mla	r8, r5, r8, r0
 80265fe:	f004 10ff 	and.w	r0, r4, #16711935	; 0xff00ff
 8026602:	fb05 6502 	mla	r5, r5, r2, r6
 8026606:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 802660a:	fb07 8800 	mla	r8, r7, r0, r8
 802660e:	f003 10ff 	and.w	r0, r3, #16711935	; 0xff00ff
 8026612:	fb07 5704 	mla	r7, r7, r4, r5
 8026616:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802661a:	fb0e 8000 	mla	r0, lr, r0, r8
 802661e:	780a      	ldrb	r2, [r1, #0]
 8026620:	fb0e 7e03 	mla	lr, lr, r3, r7
 8026624:	9b01      	ldr	r3, [sp, #4]
 8026626:	0a00      	lsrs	r0, r0, #8
 8026628:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802662c:	43db      	mvns	r3, r3
 802662e:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8026632:	b2db      	uxtb	r3, r3
 8026634:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8026638:	ea40 0e0e 	orr.w	lr, r0, lr
 802663c:	fb02 f003 	mul.w	r0, r2, r3
 8026640:	1c42      	adds	r2, r0, #1
 8026642:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 8026646:	eb0e 2212 	add.w	r2, lr, r2, lsr #8
 802664a:	700a      	strb	r2, [r1, #0]
 802664c:	784a      	ldrb	r2, [r1, #1]
 802664e:	435a      	muls	r2, r3
 8026650:	1c50      	adds	r0, r2, #1
 8026652:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 8026656:	ea4f 221e 	mov.w	r2, lr, lsr #8
 802665a:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 802665e:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 8026662:	704a      	strb	r2, [r1, #1]
 8026664:	788a      	ldrb	r2, [r1, #2]
 8026666:	4353      	muls	r3, r2
 8026668:	1c5a      	adds	r2, r3, #1
 802666a:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 802666e:	eb0e 2e13 	add.w	lr, lr, r3, lsr #8
 8026672:	f881 e002 	strb.w	lr, [r1, #2]
 8026676:	b003      	add	sp, #12
 8026678:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802667c:	080312ae 	.word	0x080312ae
 8026680:	080317a6 	.word	0x080317a6
 8026684:	08031377 	.word	0x08031377

08026688 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8026688:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802668c:	ed2d 8b0a 	vpush	{d8-d12}
 8026690:	b09b      	sub	sp, #108	; 0x6c
 8026692:	eeb0 aa40 	vmov.f32	s20, s0
 8026696:	eef0 9a60 	vmov.f32	s19, s1
 802669a:	9218      	str	r2, [sp, #96]	; 0x60
 802669c:	eeb0 9a41 	vmov.f32	s18, s2
 80266a0:	9a33      	ldr	r2, [sp, #204]	; 0xcc
 80266a2:	eeb0 8a62 	vmov.f32	s16, s5
 80266a6:	9019      	str	r0, [sp, #100]	; 0x64
 80266a8:	eef0 8a43 	vmov.f32	s17, s6
 80266ac:	6850      	ldr	r0, [r2, #4]
 80266ae:	eeb0 ca44 	vmov.f32	s24, s8
 80266b2:	9116      	str	r1, [sp, #88]	; 0x58
 80266b4:	eef0 ba64 	vmov.f32	s23, s9
 80266b8:	9307      	str	r3, [sp, #28]
 80266ba:	eeb0 ba45 	vmov.f32	s22, s10
 80266be:	6812      	ldr	r2, [r2, #0]
 80266c0:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
 80266c4:	9d30      	ldr	r5, [sp, #192]	; 0xc0
 80266c6:	e9dd 1334 	ldrd	r1, r3, [sp, #208]	; 0xd0
 80266ca:	fb00 1303 	mla	r3, r0, r3, r1
 80266ce:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80266d2:	18d3      	adds	r3, r2, r3
 80266d4:	930a      	str	r3, [sp, #40]	; 0x28
 80266d6:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 80266d8:	681b      	ldr	r3, [r3, #0]
 80266da:	930f      	str	r3, [sp, #60]	; 0x3c
 80266dc:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 80266de:	685e      	ldr	r6, [r3, #4]
 80266e0:	3604      	adds	r6, #4
 80266e2:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80266e4:	2b00      	cmp	r3, #0
 80266e6:	dc03      	bgt.n	80266f0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 80266e8:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80266ea:	2b00      	cmp	r3, #0
 80266ec:	f340 834f 	ble.w	8026d8e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x706>
 80266f0:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 80266f2:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80266f6:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80266fa:	1e48      	subs	r0, r1, #1
 80266fc:	1e57      	subs	r7, r2, #1
 80266fe:	9b07      	ldr	r3, [sp, #28]
 8026700:	2b00      	cmp	r3, #0
 8026702:	f340 8178 	ble.w	80269f6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 8026706:	9c2f      	ldr	r4, [sp, #188]	; 0xbc
 8026708:	142b      	asrs	r3, r5, #16
 802670a:	ea5f 4c24 	movs.w	ip, r4, asr #16
 802670e:	d406      	bmi.n	802671e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8026710:	4584      	cmp	ip, r0
 8026712:	da04      	bge.n	802671e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8026714:	2b00      	cmp	r3, #0
 8026716:	db02      	blt.n	802671e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8026718:	42bb      	cmp	r3, r7
 802671a:	f2c0 816d 	blt.w	80269f8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 802671e:	f11c 0c01 	adds.w	ip, ip, #1
 8026722:	f100 815b 	bmi.w	80269dc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 8026726:	4561      	cmp	r1, ip
 8026728:	f2c0 8158 	blt.w	80269dc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 802672c:	3301      	adds	r3, #1
 802672e:	f100 8155 	bmi.w	80269dc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 8026732:	429a      	cmp	r2, r3
 8026734:	f2c0 8152 	blt.w	80269dc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 8026738:	9b07      	ldr	r3, [sp, #28]
 802673a:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 802673c:	9317      	str	r3, [sp, #92]	; 0x5c
 802673e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8026740:	2b00      	cmp	r3, #0
 8026742:	f340 8178 	ble.w	8026a36 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 8026746:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8026748:	ea4f 4c25 	mov.w	ip, r5, asr #16
 802674c:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8026750:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8026754:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8026756:	e9d3 1e02 	ldrd	r1, lr, [r3, #8]
 802675a:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 802675c:	141b      	asrs	r3, r3, #16
 802675e:	f100 81ba 	bmi.w	8026ad6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 8026762:	f101 38ff 	add.w	r8, r1, #4294967295
 8026766:	4543      	cmp	r3, r8
 8026768:	f280 81b5 	bge.w	8026ad6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 802676c:	f1bc 0f00 	cmp.w	ip, #0
 8026770:	f2c0 81b1 	blt.w	8026ad6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 8026774:	f10e 38ff 	add.w	r8, lr, #4294967295
 8026778:	45c4      	cmp	ip, r8
 802677a:	f280 81ac 	bge.w	8026ad6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 802677e:	b209      	sxth	r1, r1
 8026780:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8026782:	fb0c 3301 	mla	r3, ip, r1, r3
 8026786:	eb04 0803 	add.w	r8, r4, r3
 802678a:	5ce3      	ldrb	r3, [r4, r3]
 802678c:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8026790:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 8026794:	2a00      	cmp	r2, #0
 8026796:	f000 8193 	beq.w	8026ac0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x438>
 802679a:	f898 c001 	ldrb.w	ip, [r8, #1]
 802679e:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 80267a2:	940b      	str	r4, [sp, #44]	; 0x2c
 80267a4:	0e24      	lsrs	r4, r4, #24
 80267a6:	9412      	str	r4, [sp, #72]	; 0x48
 80267a8:	b178      	cbz	r0, 80267ca <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 80267aa:	eb08 0c01 	add.w	ip, r8, r1
 80267ae:	f818 1001 	ldrb.w	r1, [r8, r1]
 80267b2:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80267b6:	9108      	str	r1, [sp, #32]
 80267b8:	0e09      	lsrs	r1, r1, #24
 80267ba:	9110      	str	r1, [sp, #64]	; 0x40
 80267bc:	f89c 1001 	ldrb.w	r1, [ip, #1]
 80267c0:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80267c4:	910c      	str	r1, [sp, #48]	; 0x30
 80267c6:	0e09      	lsrs	r1, r1, #24
 80267c8:	9113      	str	r1, [sp, #76]	; 0x4c
 80267ca:	b292      	uxth	r2, r2
 80267cc:	9912      	ldr	r1, [sp, #72]	; 0x48
 80267ce:	b280      	uxth	r0, r0
 80267d0:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80267d2:	fb02 f900 	mul.w	r9, r2, r0
 80267d6:	0112      	lsls	r2, r2, #4
 80267d8:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 80267dc:	eba2 0809 	sub.w	r8, r2, r9
 80267e0:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 80267e4:	b280      	uxth	r0, r0
 80267e6:	fa1f f888 	uxth.w	r8, r8
 80267ea:	1a12      	subs	r2, r2, r0
 80267ec:	fb08 f101 	mul.w	r1, r8, r1
 80267f0:	b292      	uxth	r2, r2
 80267f2:	fb02 110e 	mla	r1, r2, lr, r1
 80267f6:	fb00 1104 	mla	r1, r0, r4, r1
 80267fa:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80267fc:	fb09 1104 	mla	r1, r9, r4, r1
 8026800:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8026804:	2900      	cmp	r1, #0
 8026806:	f000 80de 	beq.w	80269c6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 802680a:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 802680e:	d01b      	beq.n	8026848 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c0>
 8026810:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8026814:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8026818:	fb0e fa0a 	mul.w	sl, lr, sl
 802681c:	fb0e fe03 	mul.w	lr, lr, r3
 8026820:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8026824:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8026828:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 802682c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8026830:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8026834:	4453      	add	r3, sl
 8026836:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802683a:	0a1b      	lsrs	r3, r3, #8
 802683c:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8026840:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8026844:	ea43 030c 	orr.w	r3, r3, ip
 8026848:	9c12      	ldr	r4, [sp, #72]	; 0x48
 802684a:	2cff      	cmp	r4, #255	; 0xff
 802684c:	d021      	beq.n	8026892 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20a>
 802684e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8026850:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8026854:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8026856:	fb04 fb0b 	mul.w	fp, r4, fp
 802685a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 802685c:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8026860:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8026862:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8026866:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 802686a:	fb04 fa0a 	mul.w	sl, r4, sl
 802686e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8026872:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8026876:	44de      	add	lr, fp
 8026878:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802687c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8026880:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8026884:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8026888:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802688c:	ea4e 040a 	orr.w	r4, lr, sl
 8026890:	940b      	str	r4, [sp, #44]	; 0x2c
 8026892:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8026894:	2cff      	cmp	r4, #255	; 0xff
 8026896:	d021      	beq.n	80268dc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 8026898:	9c08      	ldr	r4, [sp, #32]
 802689a:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 802689e:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80268a0:	fb04 fb0b 	mul.w	fp, r4, fp
 80268a4:	9c08      	ldr	r4, [sp, #32]
 80268a6:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80268aa:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80268ac:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80268b0:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80268b4:	fb04 fa0a 	mul.w	sl, r4, sl
 80268b8:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80268bc:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80268c0:	44de      	add	lr, fp
 80268c2:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80268c6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80268ca:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80268ce:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80268d2:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80268d6:	ea4e 040a 	orr.w	r4, lr, sl
 80268da:	9408      	str	r4, [sp, #32]
 80268dc:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80268de:	2cff      	cmp	r4, #255	; 0xff
 80268e0:	d021      	beq.n	8026926 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29e>
 80268e2:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80268e4:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 80268e8:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80268ea:	fb04 fb0b 	mul.w	fp, r4, fp
 80268ee:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80268f0:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80268f4:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80268f6:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80268fa:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80268fe:	fb04 fa0a 	mul.w	sl, r4, sl
 8026902:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8026906:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 802690a:	44de      	add	lr, fp
 802690c:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8026910:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8026914:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8026918:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802691c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8026920:	ea4e 040a 	orr.w	r4, lr, sl
 8026924:	940c      	str	r4, [sp, #48]	; 0x30
 8026926:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8026928:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 802692c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8026930:	43c9      	mvns	r1, r1
 8026932:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8026936:	9c08      	ldr	r4, [sp, #32]
 8026938:	b2c9      	uxtb	r1, r1
 802693a:	fb08 fc0c 	mul.w	ip, r8, ip
 802693e:	fb02 cc0e 	mla	ip, r2, lr, ip
 8026942:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8026946:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8026948:	fb00 cc0e 	mla	ip, r0, lr, ip
 802694c:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8026950:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8026952:	fb09 cc0e 	mla	ip, r9, lr, ip
 8026956:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 802695a:	fb08 f80e 	mul.w	r8, r8, lr
 802695e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8026962:	fb02 8303 	mla	r3, r2, r3, r8
 8026966:	9a08      	ldr	r2, [sp, #32]
 8026968:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802696c:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 8026970:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8026972:	fb00 330a 	mla	r3, r0, sl, r3
 8026976:	f402 407f 	and.w	r0, r2, #65280	; 0xff00
 802697a:	fb09 3900 	mla	r9, r9, r0, r3
 802697e:	783b      	ldrb	r3, [r7, #0]
 8026980:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8026984:	fb03 f201 	mul.w	r2, r3, r1
 8026988:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 802698c:	1c53      	adds	r3, r2, #1
 802698e:	ea4c 0c09 	orr.w	ip, ip, r9
 8026992:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8026996:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 802699a:	703b      	strb	r3, [r7, #0]
 802699c:	787b      	ldrb	r3, [r7, #1]
 802699e:	434b      	muls	r3, r1
 80269a0:	1c5a      	adds	r2, r3, #1
 80269a2:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 80269a6:	ea4f 231c 	mov.w	r3, ip, lsr #8
 80269aa:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80269ae:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80269b2:	707b      	strb	r3, [r7, #1]
 80269b4:	78bb      	ldrb	r3, [r7, #2]
 80269b6:	4359      	muls	r1, r3
 80269b8:	1c4b      	adds	r3, r1, #1
 80269ba:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 80269be:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 80269c2:	f887 c002 	strb.w	ip, [r7, #2]
 80269c6:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 80269c8:	3703      	adds	r7, #3
 80269ca:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 80269cc:	441a      	add	r2, r3
 80269ce:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 80269d0:	441d      	add	r5, r3
 80269d2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80269d4:	922f      	str	r2, [sp, #188]	; 0xbc
 80269d6:	3b01      	subs	r3, #1
 80269d8:	9317      	str	r3, [sp, #92]	; 0x5c
 80269da:	e6b0      	b.n	802673e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 80269dc:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 80269de:	9c2f      	ldr	r4, [sp, #188]	; 0xbc
 80269e0:	441c      	add	r4, r3
 80269e2:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 80269e4:	441d      	add	r5, r3
 80269e6:	9b07      	ldr	r3, [sp, #28]
 80269e8:	942f      	str	r4, [sp, #188]	; 0xbc
 80269ea:	3b01      	subs	r3, #1
 80269ec:	9307      	str	r3, [sp, #28]
 80269ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80269f0:	3303      	adds	r3, #3
 80269f2:	930a      	str	r3, [sp, #40]	; 0x28
 80269f4:	e683      	b.n	80266fe <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 80269f6:	d026      	beq.n	8026a46 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3be>
 80269f8:	9b07      	ldr	r3, [sp, #28]
 80269fa:	9831      	ldr	r0, [sp, #196]	; 0xc4
 80269fc:	3b01      	subs	r3, #1
 80269fe:	9c2f      	ldr	r4, [sp, #188]	; 0xbc
 8026a00:	fb00 4003 	mla	r0, r0, r3, r4
 8026a04:	1400      	asrs	r0, r0, #16
 8026a06:	f53f ae97 	bmi.w	8026738 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 8026a0a:	3901      	subs	r1, #1
 8026a0c:	4288      	cmp	r0, r1
 8026a0e:	f6bf ae93 	bge.w	8026738 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 8026a12:	9932      	ldr	r1, [sp, #200]	; 0xc8
 8026a14:	fb01 5303 	mla	r3, r1, r3, r5
 8026a18:	141b      	asrs	r3, r3, #16
 8026a1a:	f53f ae8d 	bmi.w	8026738 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 8026a1e:	3a01      	subs	r2, #1
 8026a20:	4293      	cmp	r3, r2
 8026a22:	f6bf ae89 	bge.w	8026738 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 8026a26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8026a28:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8026a2c:	f103 0e03 	add.w	lr, r3, #3
 8026a30:	f1bb 0f00 	cmp.w	fp, #0
 8026a34:	dc6d      	bgt.n	8026b12 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48a>
 8026a36:	9b07      	ldr	r3, [sp, #28]
 8026a38:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8026a3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8026a3e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8026a42:	4423      	add	r3, r4
 8026a44:	930a      	str	r3, [sp, #40]	; 0x28
 8026a46:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8026a48:	2b00      	cmp	r3, #0
 8026a4a:	f340 81a0 	ble.w	8026d8e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x706>
 8026a4e:	ee3a aa0c 	vadd.f32	s20, s20, s24
 8026a52:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8026a54:	ee79 9aab 	vadd.f32	s19, s19, s23
 8026a58:	eef0 6a48 	vmov.f32	s13, s16
 8026a5c:	eeca 7a8a 	vdiv.f32	s15, s21, s20
 8026a60:	ee39 9a0b 	vadd.f32	s18, s18, s22
 8026a64:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8026a68:	edcd 6a2f 	vstr	s13, [sp, #188]	; 0xbc
 8026a6c:	eef0 6a68 	vmov.f32	s13, s17
 8026a70:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8026a74:	ee16 5a90 	vmov	r5, s13
 8026a78:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8026a7c:	ee69 7a27 	vmul.f32	s15, s18, s15
 8026a80:	ee37 8a48 	vsub.f32	s16, s14, s16
 8026a84:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8026a88:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8026a8c:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8026a90:	ee18 2a10 	vmov	r2, s16
 8026a94:	eeb0 8a47 	vmov.f32	s16, s14
 8026a98:	fb92 f3f3 	sdiv	r3, r2, r3
 8026a9c:	ee18 2a90 	vmov	r2, s17
 8026aa0:	9331      	str	r3, [sp, #196]	; 0xc4
 8026aa2:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8026aa4:	eef0 8a67 	vmov.f32	s17, s15
 8026aa8:	fb92 f3f3 	sdiv	r3, r2, r3
 8026aac:	9332      	str	r3, [sp, #200]	; 0xc8
 8026aae:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8026ab0:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8026ab2:	3b01      	subs	r3, #1
 8026ab4:	9316      	str	r3, [sp, #88]	; 0x58
 8026ab6:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8026ab8:	bf08      	it	eq
 8026aba:	4613      	moveq	r3, r2
 8026abc:	9307      	str	r3, [sp, #28]
 8026abe:	e610      	b.n	80266e2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 8026ac0:	2800      	cmp	r0, #0
 8026ac2:	f43f ae82 	beq.w	80267ca <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 8026ac6:	f818 1001 	ldrb.w	r1, [r8, r1]
 8026aca:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8026ace:	9108      	str	r1, [sp, #32]
 8026ad0:	0e09      	lsrs	r1, r1, #24
 8026ad2:	9110      	str	r1, [sp, #64]	; 0x40
 8026ad4:	e679      	b.n	80267ca <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 8026ad6:	f113 0801 	adds.w	r8, r3, #1
 8026ada:	f53f af74 	bmi.w	80269c6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 8026ade:	4541      	cmp	r1, r8
 8026ae0:	f6ff af71 	blt.w	80269c6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 8026ae4:	f11c 0801 	adds.w	r8, ip, #1
 8026ae8:	f53f af6d 	bmi.w	80269c6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 8026aec:	45c6      	cmp	lr, r8
 8026aee:	f6ff af6a 	blt.w	80269c6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 8026af2:	b209      	sxth	r1, r1
 8026af4:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 8026af8:	fa0f f38e 	sxth.w	r3, lr
 8026afc:	9100      	str	r1, [sp, #0]
 8026afe:	4639      	mov	r1, r7
 8026b00:	9301      	str	r3, [sp, #4]
 8026b02:	4633      	mov	r3, r6
 8026b04:	e9cd 2004 	strd	r2, r0, [sp, #16]
 8026b08:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8026b0a:	9819      	ldr	r0, [sp, #100]	; 0x64
 8026b0c:	f7ff fc70 	bl	80263f0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>
 8026b10:	e759      	b.n	80269c6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 8026b12:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8026b14:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8026b18:	9c2f      	ldr	r4, [sp, #188]	; 0xbc
 8026b1a:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8026b1e:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8026b20:	1427      	asrs	r7, r4, #16
 8026b22:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8026b24:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8026b28:	142b      	asrs	r3, r5, #16
 8026b2a:	fb01 7303 	mla	r3, r1, r3, r7
 8026b2e:	18e7      	adds	r7, r4, r3
 8026b30:	5ce3      	ldrb	r3, [r4, r3]
 8026b32:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8026b36:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8026b3a:	2a00      	cmp	r2, #0
 8026b3c:	f000 811d 	beq.w	8026d7a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6f2>
 8026b40:	f897 8001 	ldrb.w	r8, [r7, #1]
 8026b44:	f856 4028 	ldr.w	r4, [r6, r8, lsl #2]
 8026b48:	940d      	str	r4, [sp, #52]	; 0x34
 8026b4a:	0e24      	lsrs	r4, r4, #24
 8026b4c:	9414      	str	r4, [sp, #80]	; 0x50
 8026b4e:	b170      	cbz	r0, 8026b6e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e6>
 8026b50:	eb07 0801 	add.w	r8, r7, r1
 8026b54:	5c79      	ldrb	r1, [r7, r1]
 8026b56:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8026b5a:	9109      	str	r1, [sp, #36]	; 0x24
 8026b5c:	0e09      	lsrs	r1, r1, #24
 8026b5e:	9111      	str	r1, [sp, #68]	; 0x44
 8026b60:	f898 1001 	ldrb.w	r1, [r8, #1]
 8026b64:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8026b68:	910e      	str	r1, [sp, #56]	; 0x38
 8026b6a:	0e09      	lsrs	r1, r1, #24
 8026b6c:	9115      	str	r1, [sp, #84]	; 0x54
 8026b6e:	b292      	uxth	r2, r2
 8026b70:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8026b72:	b280      	uxth	r0, r0
 8026b74:	fb02 f900 	mul.w	r9, r2, r0
 8026b78:	0112      	lsls	r2, r2, #4
 8026b7a:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8026b7e:	eba2 0809 	sub.w	r8, r2, r9
 8026b82:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 8026b86:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8026b88:	b280      	uxth	r0, r0
 8026b8a:	fa1f f888 	uxth.w	r8, r8
 8026b8e:	1a09      	subs	r1, r1, r0
 8026b90:	fb08 f202 	mul.w	r2, r8, r2
 8026b94:	b289      	uxth	r1, r1
 8026b96:	fb01 220c 	mla	r2, r1, ip, r2
 8026b9a:	fb00 2204 	mla	r2, r0, r4, r2
 8026b9e:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8026ba0:	fb09 2204 	mla	r2, r9, r4, r2
 8026ba4:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8026ba8:	2a00      	cmp	r2, #0
 8026baa:	f000 80db 	beq.w	8026d64 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6dc>
 8026bae:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8026bb2:	d019      	beq.n	8026be8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x560>
 8026bb4:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8026bb8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8026bbc:	fb0c fa0a 	mul.w	sl, ip, sl
 8026bc0:	fb0c fc03 	mul.w	ip, ip, r3
 8026bc4:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8026bc8:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8026bcc:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 8026bd0:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8026bd4:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8026bd8:	4453      	add	r3, sl
 8026bda:	0a3f      	lsrs	r7, r7, #8
 8026bdc:	0a1b      	lsrs	r3, r3, #8
 8026bde:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8026be2:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8026be6:	433b      	orrs	r3, r7
 8026be8:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8026bea:	2cff      	cmp	r4, #255	; 0xff
 8026bec:	d020      	beq.n	8026c30 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a8>
 8026bee:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8026bf0:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8026bf4:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8026bf6:	4367      	muls	r7, r4
 8026bf8:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8026bfa:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8026bfe:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8026c02:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8026c04:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8026c08:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8026c0c:	fb04 fa0a 	mul.w	sl, r4, sl
 8026c10:	44bc      	add	ip, r7
 8026c12:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8026c16:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8026c1a:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8026c1e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8026c22:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8026c26:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8026c2a:	ea4c 040a 	orr.w	r4, ip, sl
 8026c2e:	940d      	str	r4, [sp, #52]	; 0x34
 8026c30:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8026c32:	2cff      	cmp	r4, #255	; 0xff
 8026c34:	d020      	beq.n	8026c78 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5f0>
 8026c36:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8026c38:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8026c3c:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8026c3e:	4367      	muls	r7, r4
 8026c40:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8026c42:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8026c46:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8026c4a:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8026c4c:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8026c50:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8026c54:	fb04 fa0a 	mul.w	sl, r4, sl
 8026c58:	44bc      	add	ip, r7
 8026c5a:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8026c5e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8026c62:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8026c66:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8026c6a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8026c6e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8026c72:	ea4c 040a 	orr.w	r4, ip, sl
 8026c76:	9409      	str	r4, [sp, #36]	; 0x24
 8026c78:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8026c7a:	2cff      	cmp	r4, #255	; 0xff
 8026c7c:	d020      	beq.n	8026cc0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x638>
 8026c7e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8026c80:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8026c84:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8026c86:	4367      	muls	r7, r4
 8026c88:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8026c8a:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8026c8e:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8026c92:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8026c94:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8026c98:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8026c9c:	fb04 fa0a 	mul.w	sl, r4, sl
 8026ca0:	44bc      	add	ip, r7
 8026ca2:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8026ca6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8026caa:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8026cae:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8026cb2:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8026cb6:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8026cba:	ea4c 040a 	orr.w	r4, ip, sl
 8026cbe:	940e      	str	r4, [sp, #56]	; 0x38
 8026cc0:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8026cc2:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8026cc6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8026cca:	43d2      	mvns	r2, r2
 8026ccc:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8026cd0:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8026cd2:	b2d2      	uxtb	r2, r2
 8026cd4:	fb08 f707 	mul.w	r7, r8, r7
 8026cd8:	fb01 770c 	mla	r7, r1, ip, r7
 8026cdc:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8026ce0:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8026ce2:	fb00 770c 	mla	r7, r0, ip, r7
 8026ce6:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8026cea:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8026cec:	fb09 770c 	mla	r7, r9, ip, r7
 8026cf0:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 8026cf4:	fb08 f80c 	mul.w	r8, r8, ip
 8026cf8:	0a3f      	lsrs	r7, r7, #8
 8026cfa:	fb01 8303 	mla	r3, r1, r3, r8
 8026cfe:	9909      	ldr	r1, [sp, #36]	; 0x24
 8026d00:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8026d04:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 8026d08:	990e      	ldr	r1, [sp, #56]	; 0x38
 8026d0a:	fb00 330a 	mla	r3, r0, sl, r3
 8026d0e:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 8026d12:	fb09 3c0c 	mla	ip, r9, ip, r3
 8026d16:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 8026d1a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8026d1e:	fb03 f102 	mul.w	r1, r3, r2
 8026d22:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8026d26:	1c4b      	adds	r3, r1, #1
 8026d28:	ea47 070c 	orr.w	r7, r7, ip
 8026d2c:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8026d30:	eb07 2313 	add.w	r3, r7, r3, lsr #8
 8026d34:	f80e 3c03 	strb.w	r3, [lr, #-3]
 8026d38:	f81e 3c02 	ldrb.w	r3, [lr, #-2]
 8026d3c:	4353      	muls	r3, r2
 8026d3e:	1c59      	adds	r1, r3, #1
 8026d40:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8026d44:	0a3b      	lsrs	r3, r7, #8
 8026d46:	0c3f      	lsrs	r7, r7, #16
 8026d48:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8026d4c:	f80e 3c02 	strb.w	r3, [lr, #-2]
 8026d50:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 8026d54:	435a      	muls	r2, r3
 8026d56:	1c53      	adds	r3, r2, #1
 8026d58:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8026d5c:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 8026d60:	f80e 7c01 	strb.w	r7, [lr, #-1]
 8026d64:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8026d66:	f10e 0e03 	add.w	lr, lr, #3
 8026d6a:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8026d6c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8026d70:	441a      	add	r2, r3
 8026d72:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8026d74:	922f      	str	r2, [sp, #188]	; 0xbc
 8026d76:	441d      	add	r5, r3
 8026d78:	e65a      	b.n	8026a30 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a8>
 8026d7a:	2800      	cmp	r0, #0
 8026d7c:	f43f aef7 	beq.w	8026b6e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e6>
 8026d80:	5c79      	ldrb	r1, [r7, r1]
 8026d82:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8026d86:	9109      	str	r1, [sp, #36]	; 0x24
 8026d88:	0e09      	lsrs	r1, r1, #24
 8026d8a:	9111      	str	r1, [sp, #68]	; 0x44
 8026d8c:	e6ef      	b.n	8026b6e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e6>
 8026d8e:	b01b      	add	sp, #108	; 0x6c
 8026d90:	ecbd 8b0a 	vpop	{d8-d12}
 8026d94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08026d98 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>:
 8026d98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026d9c:	b08d      	sub	sp, #52	; 0x34
 8026d9e:	e9dd 5717 	ldrd	r5, r7, [sp, #92]	; 0x5c
 8026da2:	9103      	str	r1, [sp, #12]
 8026da4:	fb07 5803 	mla	r8, r7, r3, r5
 8026da8:	f89d 106c 	ldrb.w	r1, [sp, #108]	; 0x6c
 8026dac:	9803      	ldr	r0, [sp, #12]
 8026dae:	2f00      	cmp	r7, #0
 8026db0:	910b      	str	r1, [sp, #44]	; 0x2c
 8026db2:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8026db6:	9903      	ldr	r1, [sp, #12]
 8026db8:	9c03      	ldr	r4, [sp, #12]
 8026dba:	eb02 0608 	add.w	r6, r2, r8
 8026dbe:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 8026dc2:	f89d c064 	ldrb.w	ip, [sp, #100]	; 0x64
 8026dc6:	f89d 9068 	ldrb.w	r9, [sp, #104]	; 0x68
 8026dca:	7809      	ldrb	r1, [r1, #0]
 8026dcc:	7840      	ldrb	r0, [r0, #1]
 8026dce:	78a4      	ldrb	r4, [r4, #2]
 8026dd0:	db51      	blt.n	8026e76 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xde>
 8026dd2:	45be      	cmp	lr, r7
 8026dd4:	dd4f      	ble.n	8026e76 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xde>
 8026dd6:	2d00      	cmp	r5, #0
 8026dd8:	db49      	blt.n	8026e6e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xd6>
 8026dda:	42ab      	cmp	r3, r5
 8026ddc:	dd47      	ble.n	8026e6e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xd6>
 8026dde:	f812 2008 	ldrb.w	r2, [r2, r8]
 8026de2:	9204      	str	r2, [sp, #16]
 8026de4:	7872      	ldrb	r2, [r6, #1]
 8026de6:	9205      	str	r2, [sp, #20]
 8026de8:	78b2      	ldrb	r2, [r6, #2]
 8026dea:	9206      	str	r2, [sp, #24]
 8026dec:	1c6a      	adds	r2, r5, #1
 8026dee:	d449      	bmi.n	8026e84 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xec>
 8026df0:	4293      	cmp	r3, r2
 8026df2:	dd47      	ble.n	8026e84 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xec>
 8026df4:	f1bc 0f00 	cmp.w	ip, #0
 8026df8:	d044      	beq.n	8026e84 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xec>
 8026dfa:	7972      	ldrb	r2, [r6, #5]
 8026dfc:	f896 b003 	ldrb.w	fp, [r6, #3]
 8026e00:	f896 a004 	ldrb.w	sl, [r6, #4]
 8026e04:	9201      	str	r2, [sp, #4]
 8026e06:	3701      	adds	r7, #1
 8026e08:	d444      	bmi.n	8026e94 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xfc>
 8026e0a:	45be      	cmp	lr, r7
 8026e0c:	dd42      	ble.n	8026e94 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xfc>
 8026e0e:	f1b9 0f00 	cmp.w	r9, #0
 8026e12:	f000 80c1 	beq.w	8026f98 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x200>
 8026e16:	2d00      	cmp	r5, #0
 8026e18:	db38      	blt.n	8026e8c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xf4>
 8026e1a:	42ab      	cmp	r3, r5
 8026e1c:	dd36      	ble.n	8026e8c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xf4>
 8026e1e:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8026e22:	f816 8002 	ldrb.w	r8, [r6, r2]
 8026e26:	2203      	movs	r2, #3
 8026e28:	fb03 6702 	mla	r7, r3, r2, r6
 8026e2c:	fb03 6202 	mla	r2, r3, r2, r6
 8026e30:	787f      	ldrb	r7, [r7, #1]
 8026e32:	f892 e002 	ldrb.w	lr, [r2, #2]
 8026e36:	9702      	str	r7, [sp, #8]
 8026e38:	3501      	adds	r5, #1
 8026e3a:	d432      	bmi.n	8026ea2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x10a>
 8026e3c:	42ab      	cmp	r3, r5
 8026e3e:	dd30      	ble.n	8026ea2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x10a>
 8026e40:	f1bc 0f00 	cmp.w	ip, #0
 8026e44:	d031      	beq.n	8026eaa <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x112>
 8026e46:	2703      	movs	r7, #3
 8026e48:	fb13 7207 	smlabb	r2, r3, r7, r7
 8026e4c:	5cb5      	ldrb	r5, [r6, r2]
 8026e4e:	fb03 6207 	mla	r2, r3, r7, r6
 8026e52:	fb03 6307 	mla	r3, r3, r7, r6
 8026e56:	7912      	ldrb	r2, [r2, #4]
 8026e58:	795e      	ldrb	r6, [r3, #5]
 8026e5a:	f1bc 0f0f 	cmp.w	ip, #15
 8026e5e:	d927      	bls.n	8026eb0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x118>
 8026e60:	4b53      	ldr	r3, [pc, #332]	; (8026fb0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x218>)
 8026e62:	f240 1157 	movw	r1, #343	; 0x157
 8026e66:	4a53      	ldr	r2, [pc, #332]	; (8026fb4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x21c>)
 8026e68:	4853      	ldr	r0, [pc, #332]	; (8026fb8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x220>)
 8026e6a:	f004 fd05 	bl	802b878 <__assert_func>
 8026e6e:	e9cd 0405 	strd	r0, r4, [sp, #20]
 8026e72:	9104      	str	r1, [sp, #16]
 8026e74:	e7ba      	b.n	8026dec <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x54>
 8026e76:	9401      	str	r4, [sp, #4]
 8026e78:	4682      	mov	sl, r0
 8026e7a:	468b      	mov	fp, r1
 8026e7c:	9104      	str	r1, [sp, #16]
 8026e7e:	e9cd 0405 	strd	r0, r4, [sp, #20]
 8026e82:	e7c0      	b.n	8026e06 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x6e>
 8026e84:	9401      	str	r4, [sp, #4]
 8026e86:	4682      	mov	sl, r0
 8026e88:	468b      	mov	fp, r1
 8026e8a:	e7bc      	b.n	8026e06 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x6e>
 8026e8c:	46a6      	mov	lr, r4
 8026e8e:	9002      	str	r0, [sp, #8]
 8026e90:	4688      	mov	r8, r1
 8026e92:	e7d1      	b.n	8026e38 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xa0>
 8026e94:	4626      	mov	r6, r4
 8026e96:	4602      	mov	r2, r0
 8026e98:	460d      	mov	r5, r1
 8026e9a:	46a6      	mov	lr, r4
 8026e9c:	9002      	str	r0, [sp, #8]
 8026e9e:	4688      	mov	r8, r1
 8026ea0:	e7db      	b.n	8026e5a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xc2>
 8026ea2:	4626      	mov	r6, r4
 8026ea4:	4602      	mov	r2, r0
 8026ea6:	460d      	mov	r5, r1
 8026ea8:	e7d7      	b.n	8026e5a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xc2>
 8026eaa:	4626      	mov	r6, r4
 8026eac:	4602      	mov	r2, r0
 8026eae:	460d      	mov	r5, r1
 8026eb0:	f1b9 0f0f 	cmp.w	r9, #15
 8026eb4:	d8d4      	bhi.n	8026e60 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xc8>
 8026eb6:	fa1f f38c 	uxth.w	r3, ip
 8026eba:	fa1f fc89 	uxth.w	ip, r9
 8026ebe:	fb03 f70c 	mul.w	r7, r3, ip
 8026ec2:	011b      	lsls	r3, r3, #4
 8026ec4:	ebc7 1c0c 	rsb	ip, r7, ip, lsl #4
 8026ec8:	9707      	str	r7, [sp, #28]
 8026eca:	f5c3 7780 	rsb	r7, r3, #256	; 0x100
 8026ece:	fa1f fc8c 	uxth.w	ip, ip
 8026ed2:	eba7 070c 	sub.w	r7, r7, ip
 8026ed6:	b2bf      	uxth	r7, r7
 8026ed8:	9709      	str	r7, [sp, #36]	; 0x24
 8026eda:	9f07      	ldr	r7, [sp, #28]
 8026edc:	1bdb      	subs	r3, r3, r7
 8026ede:	f8bd 702c 	ldrh.w	r7, [sp, #44]	; 0x2c
 8026ee2:	b29b      	uxth	r3, r3
 8026ee4:	9708      	str	r7, [sp, #32]
 8026ee6:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8026ee8:	930a      	str	r3, [sp, #40]	; 0x28
 8026eea:	ea6f 0907 	mvn.w	r9, r7
 8026eee:	fb03 fb0b 	mul.w	fp, r3, fp
 8026ef2:	9f04      	ldr	r7, [sp, #16]
 8026ef4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8026ef6:	fa5f f989 	uxtb.w	r9, r9
 8026efa:	fb03 bb07 	mla	fp, r3, r7, fp
 8026efe:	9f07      	ldr	r7, [sp, #28]
 8026f00:	fb11 f109 	smulbb	r1, r1, r9
 8026f04:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8026f06:	fb0c b808 	mla	r8, ip, r8, fp
 8026f0a:	fb10 f009 	smulbb	r0, r0, r9
 8026f0e:	fb14 f409 	smulbb	r4, r4, r9
 8026f12:	fb07 8805 	mla	r8, r7, r5, r8
 8026f16:	9d08      	ldr	r5, [sp, #32]
 8026f18:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8026f1a:	f3c8 2807 	ubfx	r8, r8, #8, #8
 8026f1e:	fb08 1805 	mla	r8, r8, r5, r1
 8026f22:	9d05      	ldr	r5, [sp, #20]
 8026f24:	fa1f f888 	uxth.w	r8, r8
 8026f28:	f108 0101 	add.w	r1, r8, #1
 8026f2c:	eb01 2818 	add.w	r8, r1, r8, lsr #8
 8026f30:	9903      	ldr	r1, [sp, #12]
 8026f32:	ea4f 2828 	mov.w	r8, r8, asr #8
 8026f36:	f881 8000 	strb.w	r8, [r1]
 8026f3a:	fb03 f10a 	mul.w	r1, r3, sl
 8026f3e:	fb07 1105 	mla	r1, r7, r5, r1
 8026f42:	9d02      	ldr	r5, [sp, #8]
 8026f44:	fb0c 1105 	mla	r1, ip, r5, r1
 8026f48:	9d07      	ldr	r5, [sp, #28]
 8026f4a:	fb05 1102 	mla	r1, r5, r2, r1
 8026f4e:	9a08      	ldr	r2, [sp, #32]
 8026f50:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8026f54:	fb01 0102 	mla	r1, r1, r2, r0
 8026f58:	9a03      	ldr	r2, [sp, #12]
 8026f5a:	b289      	uxth	r1, r1
 8026f5c:	1c48      	adds	r0, r1, #1
 8026f5e:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 8026f62:	1209      	asrs	r1, r1, #8
 8026f64:	7051      	strb	r1, [r2, #1]
 8026f66:	9a01      	ldr	r2, [sp, #4]
 8026f68:	4353      	muls	r3, r2
 8026f6a:	9a06      	ldr	r2, [sp, #24]
 8026f6c:	fb07 3702 	mla	r7, r7, r2, r3
 8026f70:	9b08      	ldr	r3, [sp, #32]
 8026f72:	fb0c 7c0e 	mla	ip, ip, lr, r7
 8026f76:	fb05 c606 	mla	r6, r5, r6, ip
 8026f7a:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8026f7e:	fb06 4603 	mla	r6, r6, r3, r4
 8026f82:	9b03      	ldr	r3, [sp, #12]
 8026f84:	b2b6      	uxth	r6, r6
 8026f86:	f106 0e01 	add.w	lr, r6, #1
 8026f8a:	eb0e 2616 	add.w	r6, lr, r6, lsr #8
 8026f8e:	1236      	asrs	r6, r6, #8
 8026f90:	709e      	strb	r6, [r3, #2]
 8026f92:	b00d      	add	sp, #52	; 0x34
 8026f94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026f98:	f1bc 0f0f 	cmp.w	ip, #15
 8026f9c:	f63f af60 	bhi.w	8026e60 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xc8>
 8026fa0:	4626      	mov	r6, r4
 8026fa2:	4602      	mov	r2, r0
 8026fa4:	460d      	mov	r5, r1
 8026fa6:	46a6      	mov	lr, r4
 8026fa8:	9002      	str	r0, [sp, #8]
 8026faa:	4688      	mov	r8, r1
 8026fac:	e783      	b.n	8026eb6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x11e>
 8026fae:	bf00      	nop
 8026fb0:	080312ae 	.word	0x080312ae
 8026fb4:	080317a6 	.word	0x080317a6
 8026fb8:	08031377 	.word	0x08031377

08026fbc <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8026fbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026fc0:	ed2d 8b08 	vpush	{d8-d11}
 8026fc4:	b09f      	sub	sp, #124	; 0x7c
 8026fc6:	eeb0 aa40 	vmov.f32	s20, s0
 8026fca:	eef0 9a60 	vmov.f32	s19, s1
 8026fce:	920e      	str	r2, [sp, #56]	; 0x38
 8026fd0:	eeb0 9a41 	vmov.f32	s18, s2
 8026fd4:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 8026fd6:	eeb0 8a62 	vmov.f32	s16, s5
 8026fda:	9307      	str	r3, [sp, #28]
 8026fdc:	eef0 8a43 	vmov.f32	s17, s6
 8026fe0:	f89d 30e4 	ldrb.w	r3, [sp, #228]	; 0xe4
 8026fe4:	eef0 ba44 	vmov.f32	s23, s8
 8026fe8:	901d      	str	r0, [sp, #116]	; 0x74
 8026fea:	eeb0 ba64 	vmov.f32	s22, s9
 8026fee:	930c      	str	r3, [sp, #48]	; 0x30
 8026ff0:	eef0 aa45 	vmov.f32	s21, s10
 8026ff4:	6850      	ldr	r0, [r2, #4]
 8026ff6:	910b      	str	r1, [sp, #44]	; 0x2c
 8026ff8:	6812      	ldr	r2, [r2, #0]
 8026ffa:	e9dd 1336 	ldrd	r1, r3, [sp, #216]	; 0xd8
 8026ffe:	e9dd a831 	ldrd	sl, r8, [sp, #196]	; 0xc4
 8027002:	fb00 1303 	mla	r3, r0, r3, r1
 8027006:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 802700a:	18d3      	adds	r3, r2, r3
 802700c:	9308      	str	r3, [sp, #32]
 802700e:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 8027010:	681b      	ldr	r3, [r3, #0]
 8027012:	930a      	str	r3, [sp, #40]	; 0x28
 8027014:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8027016:	43db      	mvns	r3, r3
 8027018:	b2db      	uxtb	r3, r3
 802701a:	9309      	str	r3, [sp, #36]	; 0x24
 802701c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802701e:	2b00      	cmp	r3, #0
 8027020:	dc03      	bgt.n	802702a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8027022:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8027024:	2b00      	cmp	r3, #0
 8027026:	f340 81f5 	ble.w	8027414 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x458>
 802702a:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 802702c:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8027030:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8027034:	1e48      	subs	r0, r1, #1
 8027036:	1e54      	subs	r4, r2, #1
 8027038:	9b07      	ldr	r3, [sp, #28]
 802703a:	2b00      	cmp	r3, #0
 802703c:	f340 80d5 	ble.w	80271ea <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22e>
 8027040:	ea5f 452a 	movs.w	r5, sl, asr #16
 8027044:	ea4f 4328 	mov.w	r3, r8, asr #16
 8027048:	d406      	bmi.n	8027058 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 802704a:	4285      	cmp	r5, r0
 802704c:	da04      	bge.n	8027058 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 802704e:	2b00      	cmp	r3, #0
 8027050:	db02      	blt.n	8027058 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8027052:	42a3      	cmp	r3, r4
 8027054:	f2c0 80ca 	blt.w	80271ec <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x230>
 8027058:	3501      	adds	r5, #1
 802705a:	f100 80bb 	bmi.w	80271d4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
 802705e:	42a9      	cmp	r1, r5
 8027060:	f2c0 80b8 	blt.w	80271d4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
 8027064:	3301      	adds	r3, #1
 8027066:	f100 80b5 	bmi.w	80271d4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
 802706a:	429a      	cmp	r2, r3
 802706c:	f2c0 80b2 	blt.w	80271d4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
 8027070:	9b07      	ldr	r3, [sp, #28]
 8027072:	9d08      	ldr	r5, [sp, #32]
 8027074:	930d      	str	r3, [sp, #52]	; 0x34
 8027076:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8027078:	2b00      	cmp	r3, #0
 802707a:	f340 80d6 	ble.w	802722a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26e>
 802707e:	9838      	ldr	r0, [sp, #224]	; 0xe0
 8027080:	ea4f 4428 	mov.w	r4, r8, asr #16
 8027084:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 8027086:	f3ca 3203 	ubfx	r2, sl, #12, #4
 802708a:	68c6      	ldr	r6, [r0, #12]
 802708c:	ea5f 402a 	movs.w	r0, sl, asr #16
 8027090:	f3c8 3103 	ubfx	r1, r8, #12, #4
 8027094:	689b      	ldr	r3, [r3, #8]
 8027096:	f100 810f 	bmi.w	80272b8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>
 802709a:	1e5f      	subs	r7, r3, #1
 802709c:	42b8      	cmp	r0, r7
 802709e:	f280 810b 	bge.w	80272b8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>
 80270a2:	2c00      	cmp	r4, #0
 80270a4:	f2c0 8108 	blt.w	80272b8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>
 80270a8:	1e77      	subs	r7, r6, #1
 80270aa:	42bc      	cmp	r4, r7
 80270ac:	f280 8104 	bge.w	80272b8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>
 80270b0:	b21b      	sxth	r3, r3
 80270b2:	fb04 0003 	mla	r0, r4, r3, r0
 80270b6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80270b8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80270bc:	1826      	adds	r6, r4, r0
 80270be:	5c24      	ldrb	r4, [r4, r0]
 80270c0:	78b7      	ldrb	r7, [r6, #2]
 80270c2:	7870      	ldrb	r0, [r6, #1]
 80270c4:	970f      	str	r7, [sp, #60]	; 0x3c
 80270c6:	7977      	ldrb	r7, [r6, #5]
 80270c8:	f896 e003 	ldrb.w	lr, [r6, #3]
 80270cc:	f896 c004 	ldrb.w	ip, [r6, #4]
 80270d0:	9710      	str	r7, [sp, #64]	; 0x40
 80270d2:	b1c9      	cbz	r1, 8027108 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 80270d4:	f04f 0b03 	mov.w	fp, #3
 80270d8:	f06f 0904 	mvn.w	r9, #4
 80270dc:	3605      	adds	r6, #5
 80270de:	fb13 930b 	smlabb	r3, r3, fp, r9
 80270e2:	eb06 0b03 	add.w	fp, r6, r3
 80270e6:	5cf3      	ldrb	r3, [r6, r3]
 80270e8:	9311      	str	r3, [sp, #68]	; 0x44
 80270ea:	f89b 3001 	ldrb.w	r3, [fp, #1]
 80270ee:	9313      	str	r3, [sp, #76]	; 0x4c
 80270f0:	f89b 3002 	ldrb.w	r3, [fp, #2]
 80270f4:	9315      	str	r3, [sp, #84]	; 0x54
 80270f6:	f89b 3003 	ldrb.w	r3, [fp, #3]
 80270fa:	9312      	str	r3, [sp, #72]	; 0x48
 80270fc:	f89b 3004 	ldrb.w	r3, [fp, #4]
 8027100:	9314      	str	r3, [sp, #80]	; 0x50
 8027102:	f89b 3005 	ldrb.w	r3, [fp, #5]
 8027106:	9316      	str	r3, [sp, #88]	; 0x58
 8027108:	b292      	uxth	r2, r2
 802710a:	9f11      	ldr	r7, [sp, #68]	; 0x44
 802710c:	b289      	uxth	r1, r1
 802710e:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 8027112:	fb02 f601 	mul.w	r6, r2, r1
 8027116:	0112      	lsls	r2, r2, #4
 8027118:	ebc6 1101 	rsb	r1, r6, r1, lsl #4
 802711c:	f5c2 7980 	rsb	r9, r2, #256	; 0x100
 8027120:	1b92      	subs	r2, r2, r6
 8027122:	b289      	uxth	r1, r1
 8027124:	b292      	uxth	r2, r2
 8027126:	eba9 0901 	sub.w	r9, r9, r1
 802712a:	fb02 fe0e 	mul.w	lr, r2, lr
 802712e:	fa1f f989 	uxth.w	r9, r9
 8027132:	fb02 fc0c 	mul.w	ip, r2, ip
 8027136:	fb09 e404 	mla	r4, r9, r4, lr
 802713a:	f895 e000 	ldrb.w	lr, [r5]
 802713e:	fb09 c000 	mla	r0, r9, r0, ip
 8027142:	fb01 4407 	mla	r4, r1, r7, r4
 8027146:	9f12      	ldr	r7, [sp, #72]	; 0x48
 8027148:	fb06 4407 	mla	r4, r6, r7, r4
 802714c:	9f09      	ldr	r7, [sp, #36]	; 0x24
 802714e:	fb1e fe07 	smulbb	lr, lr, r7
 8027152:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8027156:	fb04 e403 	mla	r4, r4, r3, lr
 802715a:	b2a4      	uxth	r4, r4
 802715c:	f104 0e01 	add.w	lr, r4, #1
 8027160:	eb0e 2e14 	add.w	lr, lr, r4, lsr #8
 8027164:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8027166:	fb01 0004 	mla	r0, r1, r4, r0
 802716a:	9c14      	ldr	r4, [sp, #80]	; 0x50
 802716c:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8027170:	fb06 0004 	mla	r0, r6, r4, r0
 8027174:	786c      	ldrb	r4, [r5, #1]
 8027176:	f885 e000 	strb.w	lr, [r5]
 802717a:	fb14 f407 	smulbb	r4, r4, r7
 802717e:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8027182:	fb00 4003 	mla	r0, r0, r3, r4
 8027186:	b280      	uxth	r0, r0
 8027188:	1c44      	adds	r4, r0, #1
 802718a:	eb04 2010 	add.w	r0, r4, r0, lsr #8
 802718e:	1200      	asrs	r0, r0, #8
 8027190:	7068      	strb	r0, [r5, #1]
 8027192:	9810      	ldr	r0, [sp, #64]	; 0x40
 8027194:	4342      	muls	r2, r0
 8027196:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8027198:	fb09 2200 	mla	r2, r9, r0, r2
 802719c:	9815      	ldr	r0, [sp, #84]	; 0x54
 802719e:	fb01 2100 	mla	r1, r1, r0, r2
 80271a2:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80271a4:	fb06 1602 	mla	r6, r6, r2, r1
 80271a8:	78a9      	ldrb	r1, [r5, #2]
 80271aa:	fb11 f107 	smulbb	r1, r1, r7
 80271ae:	f3c6 2607 	ubfx	r6, r6, #8, #8
 80271b2:	fb06 1303 	mla	r3, r6, r3, r1
 80271b6:	b29b      	uxth	r3, r3
 80271b8:	1c5e      	adds	r6, r3, #1
 80271ba:	eb06 2313 	add.w	r3, r6, r3, lsr #8
 80271be:	121b      	asrs	r3, r3, #8
 80271c0:	70ab      	strb	r3, [r5, #2]
 80271c2:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 80271c4:	3503      	adds	r5, #3
 80271c6:	449a      	add	sl, r3
 80271c8:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 80271ca:	4498      	add	r8, r3
 80271cc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80271ce:	3b01      	subs	r3, #1
 80271d0:	930d      	str	r3, [sp, #52]	; 0x34
 80271d2:	e750      	b.n	8027076 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 80271d4:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 80271d6:	449a      	add	sl, r3
 80271d8:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 80271da:	4498      	add	r8, r3
 80271dc:	9b07      	ldr	r3, [sp, #28]
 80271de:	3b01      	subs	r3, #1
 80271e0:	9307      	str	r3, [sp, #28]
 80271e2:	9b08      	ldr	r3, [sp, #32]
 80271e4:	3303      	adds	r3, #3
 80271e6:	9308      	str	r3, [sp, #32]
 80271e8:	e726      	b.n	8027038 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 80271ea:	d026      	beq.n	802723a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 80271ec:	9b07      	ldr	r3, [sp, #28]
 80271ee:	9833      	ldr	r0, [sp, #204]	; 0xcc
 80271f0:	3b01      	subs	r3, #1
 80271f2:	fb00 a003 	mla	r0, r0, r3, sl
 80271f6:	1400      	asrs	r0, r0, #16
 80271f8:	f53f af3a 	bmi.w	8027070 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 80271fc:	3901      	subs	r1, #1
 80271fe:	4288      	cmp	r0, r1
 8027200:	f6bf af36 	bge.w	8027070 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 8027204:	9934      	ldr	r1, [sp, #208]	; 0xd0
 8027206:	fb01 8303 	mla	r3, r1, r3, r8
 802720a:	141b      	asrs	r3, r3, #16
 802720c:	f53f af30 	bmi.w	8027070 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 8027210:	3a01      	subs	r2, #1
 8027212:	4293      	cmp	r3, r2
 8027214:	f6bf af2c 	bge.w	8027070 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 8027218:	9b08      	ldr	r3, [sp, #32]
 802721a:	f8dd c01c 	ldr.w	ip, [sp, #28]
 802721e:	1cdd      	adds	r5, r3, #3
 8027220:	f8bd e030 	ldrh.w	lr, [sp, #48]	; 0x30
 8027224:	f1bc 0f00 	cmp.w	ip, #0
 8027228:	dc5f      	bgt.n	80272ea <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32e>
 802722a:	9b07      	ldr	r3, [sp, #28]
 802722c:	9a08      	ldr	r2, [sp, #32]
 802722e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8027232:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8027236:	441a      	add	r2, r3
 8027238:	9208      	str	r2, [sp, #32]
 802723a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802723c:	2b00      	cmp	r3, #0
 802723e:	f340 80e9 	ble.w	8027414 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x458>
 8027242:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8027246:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8027248:	ee3a aa2b 	vadd.f32	s20, s20, s23
 802724c:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8027250:	eef0 6a48 	vmov.f32	s13, s16
 8027254:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8027258:	ee39 9a2a 	vadd.f32	s18, s18, s21
 802725c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8027260:	ee16 aa90 	vmov	sl, s13
 8027264:	eef0 6a68 	vmov.f32	s13, s17
 8027268:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802726c:	ee16 8a90 	vmov	r8, s13
 8027270:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8027274:	ee69 7a27 	vmul.f32	s15, s18, s15
 8027278:	ee37 8a48 	vsub.f32	s16, s14, s16
 802727c:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8027280:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8027284:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8027288:	ee18 2a10 	vmov	r2, s16
 802728c:	eeb0 8a47 	vmov.f32	s16, s14
 8027290:	fb92 f3f3 	sdiv	r3, r2, r3
 8027294:	ee18 2a90 	vmov	r2, s17
 8027298:	9333      	str	r3, [sp, #204]	; 0xcc
 802729a:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 802729c:	eef0 8a67 	vmov.f32	s17, s15
 80272a0:	fb92 f3f3 	sdiv	r3, r2, r3
 80272a4:	9334      	str	r3, [sp, #208]	; 0xd0
 80272a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80272a8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80272aa:	3b01      	subs	r3, #1
 80272ac:	930b      	str	r3, [sp, #44]	; 0x2c
 80272ae:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80272b0:	bf08      	it	eq
 80272b2:	4613      	moveq	r3, r2
 80272b4:	9307      	str	r3, [sp, #28]
 80272b6:	e6b1      	b.n	802701c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 80272b8:	1c47      	adds	r7, r0, #1
 80272ba:	d482      	bmi.n	80271c2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 80272bc:	42bb      	cmp	r3, r7
 80272be:	db80      	blt.n	80271c2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 80272c0:	1c67      	adds	r7, r4, #1
 80272c2:	f53f af7e 	bmi.w	80271c2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 80272c6:	42be      	cmp	r6, r7
 80272c8:	f6ff af7b 	blt.w	80271c2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 80272cc:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 80272ce:	b236      	sxth	r6, r6
 80272d0:	9001      	str	r0, [sp, #4]
 80272d2:	b21b      	sxth	r3, r3
 80272d4:	9600      	str	r6, [sp, #0]
 80272d6:	981d      	ldr	r0, [sp, #116]	; 0x74
 80272d8:	e9cd 1704 	strd	r1, r7, [sp, #16]
 80272dc:	e9cd 4202 	strd	r4, r2, [sp, #8]
 80272e0:	4629      	mov	r1, r5
 80272e2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80272e4:	f7ff fd58 	bl	8026d98 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>
 80272e8:	e76b      	b.n	80271c2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 80272ea:	9938      	ldr	r1, [sp, #224]	; 0xe0
 80272ec:	ea4f 402a 	mov.w	r0, sl, asr #16
 80272f0:	f3c8 3203 	ubfx	r2, r8, #12, #4
 80272f4:	f3ca 3303 	ubfx	r3, sl, #12, #4
 80272f8:	f9b1 7008 	ldrsh.w	r7, [r1, #8]
 80272fc:	ea4f 4128 	mov.w	r1, r8, asr #16
 8027300:	fb07 0101 	mla	r1, r7, r1, r0
 8027304:	980a      	ldr	r0, [sp, #40]	; 0x28
 8027306:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 802730a:	1844      	adds	r4, r0, r1
 802730c:	5c40      	ldrb	r0, [r0, r1]
 802730e:	78a6      	ldrb	r6, [r4, #2]
 8027310:	7861      	ldrb	r1, [r4, #1]
 8027312:	960f      	str	r6, [sp, #60]	; 0x3c
 8027314:	78e6      	ldrb	r6, [r4, #3]
 8027316:	910d      	str	r1, [sp, #52]	; 0x34
 8027318:	9610      	str	r6, [sp, #64]	; 0x40
 802731a:	f894 9004 	ldrb.w	r9, [r4, #4]
 802731e:	f894 b005 	ldrb.w	fp, [r4, #5]
 8027322:	b192      	cbz	r2, 802734a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38e>
 8027324:	f06f 0604 	mvn.w	r6, #4
 8027328:	2103      	movs	r1, #3
 802732a:	3405      	adds	r4, #5
 802732c:	fb17 6701 	smlabb	r7, r7, r1, r6
 8027330:	19e6      	adds	r6, r4, r7
 8027332:	5de4      	ldrb	r4, [r4, r7]
 8027334:	9417      	str	r4, [sp, #92]	; 0x5c
 8027336:	7874      	ldrb	r4, [r6, #1]
 8027338:	9419      	str	r4, [sp, #100]	; 0x64
 802733a:	78b4      	ldrb	r4, [r6, #2]
 802733c:	941b      	str	r4, [sp, #108]	; 0x6c
 802733e:	78f4      	ldrb	r4, [r6, #3]
 8027340:	9418      	str	r4, [sp, #96]	; 0x60
 8027342:	7934      	ldrb	r4, [r6, #4]
 8027344:	941a      	str	r4, [sp, #104]	; 0x68
 8027346:	7974      	ldrb	r4, [r6, #5]
 8027348:	941c      	str	r4, [sp, #112]	; 0x70
 802734a:	b29b      	uxth	r3, r3
 802734c:	9f10      	ldr	r7, [sp, #64]	; 0x40
 802734e:	b292      	uxth	r2, r2
 8027350:	9909      	ldr	r1, [sp, #36]	; 0x24
 8027352:	3503      	adds	r5, #3
 8027354:	f10c 3cff 	add.w	ip, ip, #4294967295
 8027358:	fb03 f402 	mul.w	r4, r3, r2
 802735c:	011b      	lsls	r3, r3, #4
 802735e:	ebc4 1202 	rsb	r2, r4, r2, lsl #4
 8027362:	f5c3 7680 	rsb	r6, r3, #256	; 0x100
 8027366:	1b1b      	subs	r3, r3, r4
 8027368:	b292      	uxth	r2, r2
 802736a:	b29b      	uxth	r3, r3
 802736c:	1ab6      	subs	r6, r6, r2
 802736e:	435f      	muls	r7, r3
 8027370:	b2b6      	uxth	r6, r6
 8027372:	fb03 f909 	mul.w	r9, r3, r9
 8027376:	fb03 fb0b 	mul.w	fp, r3, fp
 802737a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 802737c:	fb06 7000 	mla	r0, r6, r0, r7
 8027380:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 8027382:	fb06 bb03 	mla	fp, r6, r3, fp
 8027386:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8027388:	fb02 0007 	mla	r0, r2, r7, r0
 802738c:	9f18      	ldr	r7, [sp, #96]	; 0x60
 802738e:	fb02 bb03 	mla	fp, r2, r3, fp
 8027392:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8027394:	fb04 0007 	mla	r0, r4, r7, r0
 8027398:	f815 7c06 	ldrb.w	r7, [r5, #-6]
 802739c:	fb17 f701 	smulbb	r7, r7, r1
 80273a0:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80273a4:	990d      	ldr	r1, [sp, #52]	; 0x34
 80273a6:	fb00 700e 	mla	r0, r0, lr, r7
 80273aa:	fb06 9101 	mla	r1, r6, r1, r9
 80273ae:	b280      	uxth	r0, r0
 80273b0:	1c47      	adds	r7, r0, #1
 80273b2:	eb07 2010 	add.w	r0, r7, r0, lsr #8
 80273b6:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80273b8:	1200      	asrs	r0, r0, #8
 80273ba:	f805 0c06 	strb.w	r0, [r5, #-6]
 80273be:	9819      	ldr	r0, [sp, #100]	; 0x64
 80273c0:	fb02 1100 	mla	r1, r2, r0, r1
 80273c4:	981a      	ldr	r0, [sp, #104]	; 0x68
 80273c6:	fb04 1100 	mla	r1, r4, r0, r1
 80273ca:	f815 0c05 	ldrb.w	r0, [r5, #-5]
 80273ce:	fb04 b403 	mla	r4, r4, r3, fp
 80273d2:	f815 3c04 	ldrb.w	r3, [r5, #-4]
 80273d6:	fb10 f007 	smulbb	r0, r0, r7
 80273da:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80273de:	fb13 f307 	smulbb	r3, r3, r7
 80273e2:	f3c4 2407 	ubfx	r4, r4, #8, #8
 80273e6:	fb01 010e 	mla	r1, r1, lr, r0
 80273ea:	fb04 340e 	mla	r4, r4, lr, r3
 80273ee:	b289      	uxth	r1, r1
 80273f0:	b2a4      	uxth	r4, r4
 80273f2:	1c48      	adds	r0, r1, #1
 80273f4:	1c63      	adds	r3, r4, #1
 80273f6:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 80273fa:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 80273fe:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8027400:	1209      	asrs	r1, r1, #8
 8027402:	1224      	asrs	r4, r4, #8
 8027404:	449a      	add	sl, r3
 8027406:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8027408:	f805 1c05 	strb.w	r1, [r5, #-5]
 802740c:	f805 4c04 	strb.w	r4, [r5, #-4]
 8027410:	4498      	add	r8, r3
 8027412:	e707      	b.n	8027224 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x268>
 8027414:	b01f      	add	sp, #124	; 0x7c
 8027416:	ecbd 8b08 	vpop	{d8-d11}
 802741a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08027420 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>:
 8027420:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027424:	b085      	sub	sp, #20
 8027426:	784d      	ldrb	r5, [r1, #1]
 8027428:	788e      	ldrb	r6, [r1, #2]
 802742a:	f89d 4048 	ldrb.w	r4, [sp, #72]	; 0x48
 802742e:	f9bd 9038 	ldrsh.w	r9, [sp, #56]	; 0x38
 8027432:	9403      	str	r4, [sp, #12]
 8027434:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 8027438:	780c      	ldrb	r4, [r1, #0]
 802743a:	e9dd c70f 	ldrd	ip, r7, [sp, #60]	; 0x3c
 802743e:	fb07 ce03 	mla	lr, r7, r3, ip
 8027442:	2f00      	cmp	r7, #0
 8027444:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8027448:	eb02 0b0e 	add.w	fp, r2, lr
 802744c:	db56      	blt.n	80274fc <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xdc>
 802744e:	45b9      	cmp	r9, r7
 8027450:	dd54      	ble.n	80274fc <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xdc>
 8027452:	f1bc 0f00 	cmp.w	ip, #0
 8027456:	db4d      	blt.n	80274f4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xd4>
 8027458:	4563      	cmp	r3, ip
 802745a:	dd4b      	ble.n	80274f4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xd4>
 802745c:	f812 200e 	ldrb.w	r2, [r2, lr]
 8027460:	9200      	str	r2, [sp, #0]
 8027462:	f89b 2001 	ldrb.w	r2, [fp, #1]
 8027466:	9201      	str	r2, [sp, #4]
 8027468:	f89b 2002 	ldrb.w	r2, [fp, #2]
 802746c:	9202      	str	r2, [sp, #8]
 802746e:	f11c 0201 	adds.w	r2, ip, #1
 8027472:	d44a      	bmi.n	802750a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xea>
 8027474:	4293      	cmp	r3, r2
 8027476:	dd48      	ble.n	802750a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xea>
 8027478:	2800      	cmp	r0, #0
 802747a:	d046      	beq.n	802750a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xea>
 802747c:	f89b e003 	ldrb.w	lr, [fp, #3]
 8027480:	f89b 8004 	ldrb.w	r8, [fp, #4]
 8027484:	f89b a005 	ldrb.w	sl, [fp, #5]
 8027488:	3701      	adds	r7, #1
 802748a:	d446      	bmi.n	802751a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xfa>
 802748c:	45b9      	cmp	r9, r7
 802748e:	dd44      	ble.n	802751a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xfa>
 8027490:	9a03      	ldr	r2, [sp, #12]
 8027492:	2a00      	cmp	r2, #0
 8027494:	d045      	beq.n	8027522 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x102>
 8027496:	f1bc 0f00 	cmp.w	ip, #0
 802749a:	db3a      	blt.n	8027512 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xf2>
 802749c:	4563      	cmp	r3, ip
 802749e:	dd38      	ble.n	8027512 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xf2>
 80274a0:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 80274a4:	f04f 0903 	mov.w	r9, #3
 80274a8:	f81b 7002 	ldrb.w	r7, [fp, r2]
 80274ac:	fb03 b209 	mla	r2, r3, r9, fp
 80274b0:	fb03 b909 	mla	r9, r3, r9, fp
 80274b4:	7852      	ldrb	r2, [r2, #1]
 80274b6:	f899 9002 	ldrb.w	r9, [r9, #2]
 80274ba:	f11c 0c01 	adds.w	ip, ip, #1
 80274be:	d40d      	bmi.n	80274dc <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xbc>
 80274c0:	4563      	cmp	r3, ip
 80274c2:	dd0b      	ble.n	80274dc <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xbc>
 80274c4:	b160      	cbz	r0, 80274e0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xc0>
 80274c6:	2603      	movs	r6, #3
 80274c8:	fb13 6406 	smlabb	r4, r3, r6, r6
 80274cc:	fb03 b506 	mla	r5, r3, r6, fp
 80274d0:	fb03 b306 	mla	r3, r3, r6, fp
 80274d4:	f81b 4004 	ldrb.w	r4, [fp, r4]
 80274d8:	792d      	ldrb	r5, [r5, #4]
 80274da:	795e      	ldrb	r6, [r3, #5]
 80274dc:	280f      	cmp	r0, #15
 80274de:	d802      	bhi.n	80274e6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xc6>
 80274e0:	9b03      	ldr	r3, [sp, #12]
 80274e2:	2b0f      	cmp	r3, #15
 80274e4:	d922      	bls.n	802752c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x10c>
 80274e6:	4b2f      	ldr	r3, [pc, #188]	; (80275a4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x184>)
 80274e8:	f240 1157 	movw	r1, #343	; 0x157
 80274ec:	4a2e      	ldr	r2, [pc, #184]	; (80275a8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x188>)
 80274ee:	482f      	ldr	r0, [pc, #188]	; (80275ac <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x18c>)
 80274f0:	f004 f9c2 	bl	802b878 <__assert_func>
 80274f4:	e9cd 5601 	strd	r5, r6, [sp, #4]
 80274f8:	9400      	str	r4, [sp, #0]
 80274fa:	e7b8      	b.n	802746e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x4e>
 80274fc:	46b2      	mov	sl, r6
 80274fe:	46a8      	mov	r8, r5
 8027500:	46a6      	mov	lr, r4
 8027502:	9400      	str	r4, [sp, #0]
 8027504:	e9cd 5601 	strd	r5, r6, [sp, #4]
 8027508:	e7be      	b.n	8027488 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x68>
 802750a:	46b2      	mov	sl, r6
 802750c:	46a8      	mov	r8, r5
 802750e:	46a6      	mov	lr, r4
 8027510:	e7ba      	b.n	8027488 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x68>
 8027512:	46b1      	mov	r9, r6
 8027514:	462a      	mov	r2, r5
 8027516:	4627      	mov	r7, r4
 8027518:	e7cf      	b.n	80274ba <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x9a>
 802751a:	46b1      	mov	r9, r6
 802751c:	462a      	mov	r2, r5
 802751e:	4627      	mov	r7, r4
 8027520:	e7dc      	b.n	80274dc <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xbc>
 8027522:	280f      	cmp	r0, #15
 8027524:	d8df      	bhi.n	80274e6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xc6>
 8027526:	46b1      	mov	r9, r6
 8027528:	462a      	mov	r2, r5
 802752a:	4627      	mov	r7, r4
 802752c:	f8bd b00c 	ldrh.w	fp, [sp, #12]
 8027530:	b280      	uxth	r0, r0
 8027532:	fb00 f30b 	mul.w	r3, r0, fp
 8027536:	0100      	lsls	r0, r0, #4
 8027538:	ebc3 1b0b 	rsb	fp, r3, fp, lsl #4
 802753c:	f5c0 7c80 	rsb	ip, r0, #256	; 0x100
 8027540:	1ac0      	subs	r0, r0, r3
 8027542:	fa1f fb8b 	uxth.w	fp, fp
 8027546:	b280      	uxth	r0, r0
 8027548:	ebac 0c0b 	sub.w	ip, ip, fp
 802754c:	9003      	str	r0, [sp, #12]
 802754e:	fa1f fc8c 	uxth.w	ip, ip
 8027552:	fb00 fe0e 	mul.w	lr, r0, lr
 8027556:	9800      	ldr	r0, [sp, #0]
 8027558:	fb0c ee00 	mla	lr, ip, r0, lr
 802755c:	9803      	ldr	r0, [sp, #12]
 802755e:	fb00 f808 	mul.w	r8, r0, r8
 8027562:	9801      	ldr	r0, [sp, #4]
 8027564:	fb0b ee07 	mla	lr, fp, r7, lr
 8027568:	fb0c 8800 	mla	r8, ip, r0, r8
 802756c:	fb03 ee04 	mla	lr, r3, r4, lr
 8027570:	fb0b 8202 	mla	r2, fp, r2, r8
 8027574:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8027578:	fb03 2505 	mla	r5, r3, r5, r2
 802757c:	9a03      	ldr	r2, [sp, #12]
 802757e:	f881 e000 	strb.w	lr, [r1]
 8027582:	fb02 f00a 	mul.w	r0, r2, sl
 8027586:	9a02      	ldr	r2, [sp, #8]
 8027588:	122d      	asrs	r5, r5, #8
 802758a:	fb0c 0c02 	mla	ip, ip, r2, r0
 802758e:	704d      	strb	r5, [r1, #1]
 8027590:	fb0b c909 	mla	r9, fp, r9, ip
 8027594:	fb03 9606 	mla	r6, r3, r6, r9
 8027598:	1236      	asrs	r6, r6, #8
 802759a:	708e      	strb	r6, [r1, #2]
 802759c:	b005      	add	sp, #20
 802759e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80275a2:	bf00      	nop
 80275a4:	080312ae 	.word	0x080312ae
 80275a8:	080317a6 	.word	0x080317a6
 80275ac:	08031377 	.word	0x08031377

080275b0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80275b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80275b4:	ed2d 8b08 	vpush	{d8-d11}
 80275b8:	b09b      	sub	sp, #108	; 0x6c
 80275ba:	eeb0 aa40 	vmov.f32	s20, s0
 80275be:	eef0 9a60 	vmov.f32	s19, s1
 80275c2:	920b      	str	r2, [sp, #44]	; 0x2c
 80275c4:	eeb0 9a41 	vmov.f32	s18, s2
 80275c8:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 80275ca:	eeb0 8a62 	vmov.f32	s16, s5
 80275ce:	9019      	str	r0, [sp, #100]	; 0x64
 80275d0:	eef0 8a43 	vmov.f32	s17, s6
 80275d4:	6850      	ldr	r0, [r2, #4]
 80275d6:	eef0 ba44 	vmov.f32	s23, s8
 80275da:	9109      	str	r1, [sp, #36]	; 0x24
 80275dc:	eeb0 ba64 	vmov.f32	s22, s9
 80275e0:	9306      	str	r3, [sp, #24]
 80275e2:	eef0 aa45 	vmov.f32	s21, s10
 80275e6:	6812      	ldr	r2, [r2, #0]
 80275e8:	e9dd 1332 	ldrd	r1, r3, [sp, #200]	; 0xc8
 80275ec:	e9dd b42d 	ldrd	fp, r4, [sp, #180]	; 0xb4
 80275f0:	fb00 1303 	mla	r3, r0, r3, r1
 80275f4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80275f8:	18d3      	adds	r3, r2, r3
 80275fa:	9307      	str	r3, [sp, #28]
 80275fc:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 80275fe:	681b      	ldr	r3, [r3, #0]
 8027600:	9308      	str	r3, [sp, #32]
 8027602:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8027604:	2b00      	cmp	r3, #0
 8027606:	dc03      	bgt.n	8027610 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 8027608:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802760a:	2b00      	cmp	r3, #0
 802760c:	f340 81ab 	ble.w	8027966 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b6>
 8027610:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8027612:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8027616:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802761a:	1e48      	subs	r0, r1, #1
 802761c:	1e55      	subs	r5, r2, #1
 802761e:	9b06      	ldr	r3, [sp, #24]
 8027620:	2b00      	cmp	r3, #0
 8027622:	f340 80b1 	ble.w	8027788 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d8>
 8027626:	ea5f 462b 	movs.w	r6, fp, asr #16
 802762a:	ea4f 4324 	mov.w	r3, r4, asr #16
 802762e:	d406      	bmi.n	802763e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8027630:	4286      	cmp	r6, r0
 8027632:	da04      	bge.n	802763e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8027634:	2b00      	cmp	r3, #0
 8027636:	db02      	blt.n	802763e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8027638:	42ab      	cmp	r3, r5
 802763a:	f2c0 80a6 	blt.w	802778a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1da>
 802763e:	3601      	adds	r6, #1
 8027640:	f100 8097 	bmi.w	8027772 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 8027644:	42b1      	cmp	r1, r6
 8027646:	f2c0 8094 	blt.w	8027772 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 802764a:	3301      	adds	r3, #1
 802764c:	f100 8091 	bmi.w	8027772 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 8027650:	429a      	cmp	r2, r3
 8027652:	f2c0 808e 	blt.w	8027772 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 8027656:	9b06      	ldr	r3, [sp, #24]
 8027658:	9e07      	ldr	r6, [sp, #28]
 802765a:	930a      	str	r3, [sp, #40]	; 0x28
 802765c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802765e:	2b00      	cmp	r3, #0
 8027660:	f340 80b0 	ble.w	80277c4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 8027664:	9834      	ldr	r0, [sp, #208]	; 0xd0
 8027666:	1425      	asrs	r5, r4, #16
 8027668:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 802766a:	f3cb 3203 	ubfx	r2, fp, #12, #4
 802766e:	68c7      	ldr	r7, [r0, #12]
 8027670:	ea5f 402b 	movs.w	r0, fp, asr #16
 8027674:	f3c4 3103 	ubfx	r1, r4, #12, #4
 8027678:	689b      	ldr	r3, [r3, #8]
 802767a:	f100 80ea 	bmi.w	8027852 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 802767e:	f103 3cff 	add.w	ip, r3, #4294967295
 8027682:	4560      	cmp	r0, ip
 8027684:	f280 80e5 	bge.w	8027852 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 8027688:	2d00      	cmp	r5, #0
 802768a:	f2c0 80e2 	blt.w	8027852 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 802768e:	f107 3cff 	add.w	ip, r7, #4294967295
 8027692:	4565      	cmp	r5, ip
 8027694:	f280 80dd 	bge.w	8027852 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 8027698:	b21b      	sxth	r3, r3
 802769a:	fb05 0003 	mla	r0, r5, r3, r0
 802769e:	9d08      	ldr	r5, [sp, #32]
 80276a0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80276a4:	182f      	adds	r7, r5, r0
 80276a6:	5c2d      	ldrb	r5, [r5, r0]
 80276a8:	7878      	ldrb	r0, [r7, #1]
 80276aa:	f897 e002 	ldrb.w	lr, [r7, #2]
 80276ae:	900c      	str	r0, [sp, #48]	; 0x30
 80276b0:	f897 9003 	ldrb.w	r9, [r7, #3]
 80276b4:	f897 8004 	ldrb.w	r8, [r7, #4]
 80276b8:	f897 a005 	ldrb.w	sl, [r7, #5]
 80276bc:	b1c9      	cbz	r1, 80276f2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 80276be:	f04f 0c03 	mov.w	ip, #3
 80276c2:	f06f 0004 	mvn.w	r0, #4
 80276c6:	3705      	adds	r7, #5
 80276c8:	fb13 030c 	smlabb	r3, r3, ip, r0
 80276cc:	eb07 0c03 	add.w	ip, r7, r3
 80276d0:	5cfb      	ldrb	r3, [r7, r3]
 80276d2:	930d      	str	r3, [sp, #52]	; 0x34
 80276d4:	f89c 3001 	ldrb.w	r3, [ip, #1]
 80276d8:	930f      	str	r3, [sp, #60]	; 0x3c
 80276da:	f89c 3002 	ldrb.w	r3, [ip, #2]
 80276de:	9311      	str	r3, [sp, #68]	; 0x44
 80276e0:	f89c 3003 	ldrb.w	r3, [ip, #3]
 80276e4:	930e      	str	r3, [sp, #56]	; 0x38
 80276e6:	f89c 3004 	ldrb.w	r3, [ip, #4]
 80276ea:	9310      	str	r3, [sp, #64]	; 0x40
 80276ec:	f89c 3005 	ldrb.w	r3, [ip, #5]
 80276f0:	9312      	str	r3, [sp, #72]	; 0x48
 80276f2:	b292      	uxth	r2, r2
 80276f4:	980c      	ldr	r0, [sp, #48]	; 0x30
 80276f6:	b289      	uxth	r1, r1
 80276f8:	fb02 f301 	mul.w	r3, r2, r1
 80276fc:	0112      	lsls	r2, r2, #4
 80276fe:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 8027702:	f5c2 7780 	rsb	r7, r2, #256	; 0x100
 8027706:	1ad2      	subs	r2, r2, r3
 8027708:	b289      	uxth	r1, r1
 802770a:	b292      	uxth	r2, r2
 802770c:	1a7f      	subs	r7, r7, r1
 802770e:	fb02 f909 	mul.w	r9, r2, r9
 8027712:	b2bf      	uxth	r7, r7
 8027714:	fb02 f808 	mul.w	r8, r2, r8
 8027718:	fb02 fa0a 	mul.w	sl, r2, sl
 802771c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 802771e:	fb07 9905 	mla	r9, r7, r5, r9
 8027722:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8027724:	fb07 8800 	mla	r8, r7, r0, r8
 8027728:	980f      	ldr	r0, [sp, #60]	; 0x3c
 802772a:	fb07 aa0e 	mla	sl, r7, lr, sl
 802772e:	fb01 9905 	mla	r9, r1, r5, r9
 8027732:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8027734:	fb01 8800 	mla	r8, r1, r0, r8
 8027738:	9810      	ldr	r0, [sp, #64]	; 0x40
 802773a:	fb01 a102 	mla	r1, r1, r2, sl
 802773e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8027740:	fb03 9905 	mla	r9, r3, r5, r9
 8027744:	fb03 8800 	mla	r8, r3, r0, r8
 8027748:	fb03 1302 	mla	r3, r3, r2, r1
 802774c:	ea4f 2929 	mov.w	r9, r9, asr #8
 8027750:	ea4f 2828 	mov.w	r8, r8, asr #8
 8027754:	121b      	asrs	r3, r3, #8
 8027756:	f886 9000 	strb.w	r9, [r6]
 802775a:	f886 8001 	strb.w	r8, [r6, #1]
 802775e:	70b3      	strb	r3, [r6, #2]
 8027760:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8027762:	3603      	adds	r6, #3
 8027764:	449b      	add	fp, r3
 8027766:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8027768:	441c      	add	r4, r3
 802776a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802776c:	3b01      	subs	r3, #1
 802776e:	930a      	str	r3, [sp, #40]	; 0x28
 8027770:	e774      	b.n	802765c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xac>
 8027772:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8027774:	449b      	add	fp, r3
 8027776:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8027778:	441c      	add	r4, r3
 802777a:	9b06      	ldr	r3, [sp, #24]
 802777c:	3b01      	subs	r3, #1
 802777e:	9306      	str	r3, [sp, #24]
 8027780:	9b07      	ldr	r3, [sp, #28]
 8027782:	3303      	adds	r3, #3
 8027784:	9307      	str	r3, [sp, #28]
 8027786:	e74a      	b.n	802761e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8027788:	d024      	beq.n	80277d4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 802778a:	9b06      	ldr	r3, [sp, #24]
 802778c:	982f      	ldr	r0, [sp, #188]	; 0xbc
 802778e:	3b01      	subs	r3, #1
 8027790:	fb00 b003 	mla	r0, r0, r3, fp
 8027794:	1400      	asrs	r0, r0, #16
 8027796:	f53f af5e 	bmi.w	8027656 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 802779a:	3901      	subs	r1, #1
 802779c:	4288      	cmp	r0, r1
 802779e:	f6bf af5a 	bge.w	8027656 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 80277a2:	9930      	ldr	r1, [sp, #192]	; 0xc0
 80277a4:	fb01 4303 	mla	r3, r1, r3, r4
 80277a8:	141b      	asrs	r3, r3, #16
 80277aa:	f53f af54 	bmi.w	8027656 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 80277ae:	3a01      	subs	r2, #1
 80277b0:	4293      	cmp	r3, r2
 80277b2:	f6bf af50 	bge.w	8027656 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 80277b6:	9b07      	ldr	r3, [sp, #28]
 80277b8:	f8dd e018 	ldr.w	lr, [sp, #24]
 80277bc:	1cde      	adds	r6, r3, #3
 80277be:	f1be 0f00 	cmp.w	lr, #0
 80277c2:	dc5f      	bgt.n	8027884 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d4>
 80277c4:	9b06      	ldr	r3, [sp, #24]
 80277c6:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 80277ca:	9b07      	ldr	r3, [sp, #28]
 80277cc:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80277d0:	4423      	add	r3, r4
 80277d2:	9307      	str	r3, [sp, #28]
 80277d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80277d6:	2b00      	cmp	r3, #0
 80277d8:	f340 80c5 	ble.w	8027966 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b6>
 80277dc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80277e0:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80277e2:	ee3a aa2b 	vadd.f32	s20, s20, s23
 80277e6:	ee79 9a8b 	vadd.f32	s19, s19, s22
 80277ea:	eef0 6a48 	vmov.f32	s13, s16
 80277ee:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 80277f2:	ee39 9a2a 	vadd.f32	s18, s18, s21
 80277f6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80277fa:	ee16 ba90 	vmov	fp, s13
 80277fe:	eef0 6a68 	vmov.f32	s13, s17
 8027802:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8027806:	ee16 4a90 	vmov	r4, s13
 802780a:	ee29 7aa7 	vmul.f32	s14, s19, s15
 802780e:	ee69 7a27 	vmul.f32	s15, s18, s15
 8027812:	ee37 8a48 	vsub.f32	s16, s14, s16
 8027816:	ee77 8ae8 	vsub.f32	s17, s15, s17
 802781a:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 802781e:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8027822:	ee18 2a10 	vmov	r2, s16
 8027826:	eeb0 8a47 	vmov.f32	s16, s14
 802782a:	fb92 f3f3 	sdiv	r3, r2, r3
 802782e:	ee18 2a90 	vmov	r2, s17
 8027832:	932f      	str	r3, [sp, #188]	; 0xbc
 8027834:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8027836:	eef0 8a67 	vmov.f32	s17, s15
 802783a:	fb92 f3f3 	sdiv	r3, r2, r3
 802783e:	9330      	str	r3, [sp, #192]	; 0xc0
 8027840:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8027842:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8027844:	3b01      	subs	r3, #1
 8027846:	9309      	str	r3, [sp, #36]	; 0x24
 8027848:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802784a:	bf08      	it	eq
 802784c:	4613      	moveq	r3, r2
 802784e:	9306      	str	r3, [sp, #24]
 8027850:	e6d7      	b.n	8027602 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 8027852:	f110 0c01 	adds.w	ip, r0, #1
 8027856:	d483      	bmi.n	8027760 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b0>
 8027858:	4563      	cmp	r3, ip
 802785a:	db81      	blt.n	8027760 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b0>
 802785c:	f115 0c01 	adds.w	ip, r5, #1
 8027860:	f53f af7e 	bmi.w	8027760 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b0>
 8027864:	4567      	cmp	r7, ip
 8027866:	f6ff af7b 	blt.w	8027760 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b0>
 802786a:	b23f      	sxth	r7, r7
 802786c:	b21b      	sxth	r3, r3
 802786e:	9700      	str	r7, [sp, #0]
 8027870:	e9cd 2103 	strd	r2, r1, [sp, #12]
 8027874:	e9cd 0501 	strd	r0, r5, [sp, #4]
 8027878:	9a08      	ldr	r2, [sp, #32]
 802787a:	4631      	mov	r1, r6
 802787c:	9819      	ldr	r0, [sp, #100]	; 0x64
 802787e:	f7ff fdcf 	bl	8027420 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>
 8027882:	e76d      	b.n	8027760 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b0>
 8027884:	9934      	ldr	r1, [sp, #208]	; 0xd0
 8027886:	ea4f 402b 	mov.w	r0, fp, asr #16
 802788a:	f3cb 3303 	ubfx	r3, fp, #12, #4
 802788e:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8027892:	f9b1 c008 	ldrsh.w	ip, [r1, #8]
 8027896:	1421      	asrs	r1, r4, #16
 8027898:	930a      	str	r3, [sp, #40]	; 0x28
 802789a:	fb0c 0101 	mla	r1, ip, r1, r0
 802789e:	9808      	ldr	r0, [sp, #32]
 80278a0:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80278a4:	1845      	adds	r5, r0, r1
 80278a6:	5c40      	ldrb	r0, [r0, r1]
 80278a8:	796f      	ldrb	r7, [r5, #5]
 80278aa:	7869      	ldrb	r1, [r5, #1]
 80278ac:	f895 8002 	ldrb.w	r8, [r5, #2]
 80278b0:	f895 a003 	ldrb.w	sl, [r5, #3]
 80278b4:	f895 9004 	ldrb.w	r9, [r5, #4]
 80278b8:	970c      	str	r7, [sp, #48]	; 0x30
 80278ba:	b1a2      	cbz	r2, 80278e6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x336>
 80278bc:	2703      	movs	r7, #3
 80278be:	f06f 0304 	mvn.w	r3, #4
 80278c2:	3505      	adds	r5, #5
 80278c4:	fb1c 3c07 	smlabb	ip, ip, r7, r3
 80278c8:	eb05 070c 	add.w	r7, r5, ip
 80278cc:	f815 500c 	ldrb.w	r5, [r5, ip]
 80278d0:	9513      	str	r5, [sp, #76]	; 0x4c
 80278d2:	787d      	ldrb	r5, [r7, #1]
 80278d4:	9515      	str	r5, [sp, #84]	; 0x54
 80278d6:	78bd      	ldrb	r5, [r7, #2]
 80278d8:	9517      	str	r5, [sp, #92]	; 0x5c
 80278da:	78fd      	ldrb	r5, [r7, #3]
 80278dc:	9514      	str	r5, [sp, #80]	; 0x50
 80278de:	793d      	ldrb	r5, [r7, #4]
 80278e0:	9516      	str	r5, [sp, #88]	; 0x58
 80278e2:	797d      	ldrb	r5, [r7, #5]
 80278e4:	9518      	str	r5, [sp, #96]	; 0x60
 80278e6:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 80278ea:	b292      	uxth	r2, r2
 80278ec:	3603      	adds	r6, #3
 80278ee:	f10e 3eff 	add.w	lr, lr, #4294967295
 80278f2:	fb03 f502 	mul.w	r5, r3, r2
 80278f6:	011b      	lsls	r3, r3, #4
 80278f8:	ebc5 1202 	rsb	r2, r5, r2, lsl #4
 80278fc:	f5c3 7780 	rsb	r7, r3, #256	; 0x100
 8027900:	1b5b      	subs	r3, r3, r5
 8027902:	b292      	uxth	r2, r2
 8027904:	b29b      	uxth	r3, r3
 8027906:	1abf      	subs	r7, r7, r2
 8027908:	fb03 f909 	mul.w	r9, r3, r9
 802790c:	b2bf      	uxth	r7, r7
 802790e:	fb03 fa0a 	mul.w	sl, r3, sl
 8027912:	fb07 9901 	mla	r9, r7, r1, r9
 8027916:	9915      	ldr	r1, [sp, #84]	; 0x54
 8027918:	fb07 aa00 	mla	sl, r7, r0, sl
 802791c:	9813      	ldr	r0, [sp, #76]	; 0x4c
 802791e:	fb02 9901 	mla	r9, r2, r1, r9
 8027922:	9916      	ldr	r1, [sp, #88]	; 0x58
 8027924:	fb02 aa00 	mla	sl, r2, r0, sl
 8027928:	9814      	ldr	r0, [sp, #80]	; 0x50
 802792a:	fb05 9901 	mla	r9, r5, r1, r9
 802792e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8027930:	fb05 aa00 	mla	sl, r5, r0, sl
 8027934:	434b      	muls	r3, r1
 8027936:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8027938:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 802793c:	fb07 3308 	mla	r3, r7, r8, r3
 8027940:	ea4f 2929 	mov.w	r9, r9, asr #8
 8027944:	f806 ac06 	strb.w	sl, [r6, #-6]
 8027948:	fb02 3201 	mla	r2, r2, r1, r3
 802794c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 802794e:	f806 9c05 	strb.w	r9, [r6, #-5]
 8027952:	fb05 2503 	mla	r5, r5, r3, r2
 8027956:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8027958:	122d      	asrs	r5, r5, #8
 802795a:	449b      	add	fp, r3
 802795c:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 802795e:	f806 5c04 	strb.w	r5, [r6, #-4]
 8027962:	441c      	add	r4, r3
 8027964:	e72b      	b.n	80277be <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 8027966:	b01b      	add	sp, #108	; 0x6c
 8027968:	ecbd 8b08 	vpop	{d8-d11}
 802796c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08027970 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>:
 8027970:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027974:	e9dd 540d 	ldrd	r5, r4, [sp, #52]	; 0x34
 8027978:	f9bd e030 	ldrsh.w	lr, [sp, #48]	; 0x30
 802797c:	fb04 5603 	mla	r6, r4, r3, r5
 8027980:	2c00      	cmp	r4, #0
 8027982:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 8027986:	f89d 7040 	ldrb.w	r7, [sp, #64]	; 0x40
 802798a:	eb02 0c86 	add.w	ip, r2, r6, lsl #2
 802798e:	db36      	blt.n	80279fe <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8e>
 8027990:	45a6      	cmp	lr, r4
 8027992:	dd34      	ble.n	80279fe <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8e>
 8027994:	2d00      	cmp	r5, #0
 8027996:	db30      	blt.n	80279fa <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8a>
 8027998:	42ab      	cmp	r3, r5
 802799a:	dd2e      	ble.n	80279fa <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8a>
 802799c:	f852 2026 	ldr.w	r2, [r2, r6, lsl #2]
 80279a0:	1c6e      	adds	r6, r5, #1
 80279a2:	d42f      	bmi.n	8027a04 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x94>
 80279a4:	42b3      	cmp	r3, r6
 80279a6:	dd2d      	ble.n	8027a04 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x94>
 80279a8:	b370      	cbz	r0, 8027a08 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x98>
 80279aa:	f8dc 6004 	ldr.w	r6, [ip, #4]
 80279ae:	3401      	adds	r4, #1
 80279b0:	d42e      	bmi.n	8027a10 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xa0>
 80279b2:	45a6      	cmp	lr, r4
 80279b4:	dd2c      	ble.n	8027a10 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xa0>
 80279b6:	b377      	cbz	r7, 8027a16 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xa6>
 80279b8:	2d00      	cmp	r5, #0
 80279ba:	db27      	blt.n	8027a0c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x9c>
 80279bc:	42ab      	cmp	r3, r5
 80279be:	dd25      	ble.n	8027a0c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x9c>
 80279c0:	f85c 4023 	ldr.w	r4, [ip, r3, lsl #2]
 80279c4:	3501      	adds	r5, #1
 80279c6:	d429      	bmi.n	8027a1c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xac>
 80279c8:	42ab      	cmp	r3, r5
 80279ca:	dd27      	ble.n	8027a1c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xac>
 80279cc:	b340      	cbz	r0, 8027a20 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xb0>
 80279ce:	3301      	adds	r3, #1
 80279d0:	f85c 3023 	ldr.w	r3, [ip, r3, lsl #2]
 80279d4:	280f      	cmp	r0, #15
 80279d6:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 80279da:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 80279de:	ea4f 6914 	mov.w	r9, r4, lsr #24
 80279e2:	ea4f 6813 	mov.w	r8, r3, lsr #24
 80279e6:	d801      	bhi.n	80279ec <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x7c>
 80279e8:	2f0f      	cmp	r7, #15
 80279ea:	d91b      	bls.n	8027a24 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xb4>
 80279ec:	4b89      	ldr	r3, [pc, #548]	; (8027c14 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x2a4>)
 80279ee:	f240 1157 	movw	r1, #343	; 0x157
 80279f2:	4a89      	ldr	r2, [pc, #548]	; (8027c18 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x2a8>)
 80279f4:	4889      	ldr	r0, [pc, #548]	; (8027c1c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x2ac>)
 80279f6:	f003 ff3f 	bl	802b878 <__assert_func>
 80279fa:	2200      	movs	r2, #0
 80279fc:	e7d0      	b.n	80279a0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x30>
 80279fe:	2600      	movs	r6, #0
 8027a00:	4632      	mov	r2, r6
 8027a02:	e7d4      	b.n	80279ae <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x3e>
 8027a04:	2600      	movs	r6, #0
 8027a06:	e7d2      	b.n	80279ae <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x3e>
 8027a08:	4606      	mov	r6, r0
 8027a0a:	e7d0      	b.n	80279ae <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x3e>
 8027a0c:	2400      	movs	r4, #0
 8027a0e:	e7d9      	b.n	80279c4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x54>
 8027a10:	2300      	movs	r3, #0
 8027a12:	461c      	mov	r4, r3
 8027a14:	e7de      	b.n	80279d4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x64>
 8027a16:	463b      	mov	r3, r7
 8027a18:	463c      	mov	r4, r7
 8027a1a:	e7db      	b.n	80279d4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x64>
 8027a1c:	2300      	movs	r3, #0
 8027a1e:	e7d9      	b.n	80279d4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x64>
 8027a20:	4603      	mov	r3, r0
 8027a22:	e7d7      	b.n	80279d4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x64>
 8027a24:	b280      	uxth	r0, r0
 8027a26:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 8027a2a:	b2bf      	uxth	r7, r7
 8027a2c:	fb00 fe07 	mul.w	lr, r0, r7
 8027a30:	ea4f 1000 	mov.w	r0, r0, lsl #4
 8027a34:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 8027a38:	eba0 0c0e 	sub.w	ip, r0, lr
 8027a3c:	f5c0 7580 	rsb	r5, r0, #256	; 0x100
 8027a40:	b2bf      	uxth	r7, r7
 8027a42:	fa1f fc8c 	uxth.w	ip, ip
 8027a46:	eba5 0507 	sub.w	r5, r5, r7
 8027a4a:	fb0c f00a 	mul.w	r0, ip, sl
 8027a4e:	b2ad      	uxth	r5, r5
 8027a50:	fb05 000b 	mla	r0, r5, fp, r0
 8027a54:	fb07 0009 	mla	r0, r7, r9, r0
 8027a58:	fb0e 0008 	mla	r0, lr, r8, r0
 8027a5c:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8027a60:	9001      	str	r0, [sp, #4]
 8027a62:	d018      	beq.n	8027a96 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x126>
 8027a64:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 8027a68:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8027a6c:	fb0b f000 	mul.w	r0, fp, r0
 8027a70:	fb0b fb02 	mul.w	fp, fp, r2
 8027a74:	0a02      	lsrs	r2, r0, #8
 8027a76:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 8027a7a:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8027a7e:	4402      	add	r2, r0
 8027a80:	f50b 7080 	add.w	r0, fp, #256	; 0x100
 8027a84:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 8027a88:	0a12      	lsrs	r2, r2, #8
 8027a8a:	0a00      	lsrs	r0, r0, #8
 8027a8c:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8027a90:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8027a94:	4302      	orrs	r2, r0
 8027a96:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8027a9a:	d01a      	beq.n	8027ad2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x162>
 8027a9c:	f006 10ff 	and.w	r0, r6, #16711935	; 0xff00ff
 8027aa0:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8027aa4:	fb0a f000 	mul.w	r0, sl, r0
 8027aa8:	fb0a fa06 	mul.w	sl, sl, r6
 8027aac:	0a06      	lsrs	r6, r0, #8
 8027aae:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 8027ab2:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8027ab6:	4406      	add	r6, r0
 8027ab8:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 8027abc:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 8027ac0:	0a36      	lsrs	r6, r6, #8
 8027ac2:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8027ac6:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8027aca:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8027ace:	ea46 060a 	orr.w	r6, r6, sl
 8027ad2:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8027ad6:	d01b      	beq.n	8027b10 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x1a0>
 8027ad8:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 8027adc:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8027ae0:	fb09 fa0a 	mul.w	sl, r9, sl
 8027ae4:	fb09 f004 	mul.w	r0, r9, r4
 8027ae8:	ea4f 241a 	mov.w	r4, sl, lsr #8
 8027aec:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8027af0:	f500 7980 	add.w	r9, r0, #256	; 0x100
 8027af4:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8027af8:	eb09 2910 	add.w	r9, r9, r0, lsr #8
 8027afc:	4454      	add	r4, sl
 8027afe:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8027b02:	0a24      	lsrs	r4, r4, #8
 8027b04:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8027b08:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8027b0c:	ea44 0409 	orr.w	r4, r4, r9
 8027b10:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8027b14:	d01b      	beq.n	8027b4e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x1de>
 8027b16:	f003 19ff 	and.w	r9, r3, #16711935	; 0xff00ff
 8027b1a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8027b1e:	fb08 f909 	mul.w	r9, r8, r9
 8027b22:	fb08 f003 	mul.w	r0, r8, r3
 8027b26:	ea4f 2319 	mov.w	r3, r9, lsr #8
 8027b2a:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 8027b2e:	f500 7880 	add.w	r8, r0, #256	; 0x100
 8027b32:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8027b36:	eb08 2810 	add.w	r8, r8, r0, lsr #8
 8027b3a:	444b      	add	r3, r9
 8027b3c:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8027b40:	0a1b      	lsrs	r3, r3, #8
 8027b42:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8027b46:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8027b4a:	ea43 0308 	orr.w	r3, r3, r8
 8027b4e:	f006 10ff 	and.w	r0, r6, #16711935	; 0xff00ff
 8027b52:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8027b56:	f002 18ff 	and.w	r8, r2, #16711935	; 0xff00ff
 8027b5a:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8027b5e:	fb0c f000 	mul.w	r0, ip, r0
 8027b62:	fb0c f606 	mul.w	r6, ip, r6
 8027b66:	fb05 0808 	mla	r8, r5, r8, r0
 8027b6a:	f004 10ff 	and.w	r0, r4, #16711935	; 0xff00ff
 8027b6e:	fb05 6502 	mla	r5, r5, r2, r6
 8027b72:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8027b76:	fb07 8800 	mla	r8, r7, r0, r8
 8027b7a:	f003 10ff 	and.w	r0, r3, #16711935	; 0xff00ff
 8027b7e:	fb07 5704 	mla	r7, r7, r4, r5
 8027b82:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8027b86:	fb0e 8000 	mla	r0, lr, r0, r8
 8027b8a:	fb0e 7e03 	mla	lr, lr, r3, r7
 8027b8e:	9b01      	ldr	r3, [sp, #4]
 8027b90:	0a00      	lsrs	r0, r0, #8
 8027b92:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8027b96:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8027b9a:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8027b9e:	ea40 0e0e 	orr.w	lr, r0, lr
 8027ba2:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 8027ba6:	b280      	uxth	r0, r0
 8027ba8:	fa5f f48e 	uxtb.w	r4, lr
 8027bac:	4343      	muls	r3, r0
 8027bae:	fb14 f400 	smulbb	r4, r4, r0
 8027bb2:	1c5a      	adds	r2, r3, #1
 8027bb4:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8027bb8:	780b      	ldrb	r3, [r1, #0]
 8027bba:	ea6f 2212 	mvn.w	r2, r2, lsr #8
 8027bbe:	b2d2      	uxtb	r2, r2
 8027bc0:	fb03 4302 	mla	r3, r3, r2, r4
 8027bc4:	b29b      	uxth	r3, r3
 8027bc6:	1c5c      	adds	r4, r3, #1
 8027bc8:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 8027bcc:	784c      	ldrb	r4, [r1, #1]
 8027bce:	fb14 f402 	smulbb	r4, r4, r2
 8027bd2:	121b      	asrs	r3, r3, #8
 8027bd4:	700b      	strb	r3, [r1, #0]
 8027bd6:	f3ce 2307 	ubfx	r3, lr, #8, #8
 8027bda:	fb03 4300 	mla	r3, r3, r0, r4
 8027bde:	b29b      	uxth	r3, r3
 8027be0:	1c5c      	adds	r4, r3, #1
 8027be2:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 8027be6:	121b      	asrs	r3, r3, #8
 8027be8:	704b      	strb	r3, [r1, #1]
 8027bea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8027bee:	f891 e002 	ldrb.w	lr, [r1, #2]
 8027bf2:	fb1e fe02 	smulbb	lr, lr, r2
 8027bf6:	fb03 ee00 	mla	lr, r3, r0, lr
 8027bfa:	fa1f fe8e 	uxth.w	lr, lr
 8027bfe:	f10e 0301 	add.w	r3, lr, #1
 8027c02:	eb03 2e1e 	add.w	lr, r3, lr, lsr #8
 8027c06:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8027c0a:	f881 e002 	strb.w	lr, [r1, #2]
 8027c0e:	b003      	add	sp, #12
 8027c10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8027c14:	080312ae 	.word	0x080312ae
 8027c18:	080317a6 	.word	0x080317a6
 8027c1c:	08031377 	.word	0x08031377

08027c20 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8027c20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027c24:	ed2d 8b08 	vpush	{d8-d11}
 8027c28:	b09d      	sub	sp, #116	; 0x74
 8027c2a:	eeb0 aa40 	vmov.f32	s20, s0
 8027c2e:	eef0 9a60 	vmov.f32	s19, s1
 8027c32:	9219      	str	r2, [sp, #100]	; 0x64
 8027c34:	eeb0 9a41 	vmov.f32	s18, s2
 8027c38:	9a33      	ldr	r2, [sp, #204]	; 0xcc
 8027c3a:	eeb0 8a62 	vmov.f32	s16, s5
 8027c3e:	9307      	str	r3, [sp, #28]
 8027c40:	eef0 8a43 	vmov.f32	s17, s6
 8027c44:	f89d 30dc 	ldrb.w	r3, [sp, #220]	; 0xdc
 8027c48:	eef0 ba44 	vmov.f32	s23, s8
 8027c4c:	901b      	str	r0, [sp, #108]	; 0x6c
 8027c4e:	eeb0 ba64 	vmov.f32	s22, s9
 8027c52:	931a      	str	r3, [sp, #104]	; 0x68
 8027c54:	eef0 aa45 	vmov.f32	s21, s10
 8027c58:	6850      	ldr	r0, [r2, #4]
 8027c5a:	9117      	str	r1, [sp, #92]	; 0x5c
 8027c5c:	6812      	ldr	r2, [r2, #0]
 8027c5e:	e9dd 1334 	ldrd	r1, r3, [sp, #208]	; 0xd0
 8027c62:	e9dd 562f 	ldrd	r5, r6, [sp, #188]	; 0xbc
 8027c66:	fb00 1303 	mla	r3, r0, r3, r1
 8027c6a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8027c6e:	18d3      	adds	r3, r2, r3
 8027c70:	930a      	str	r3, [sp, #40]	; 0x28
 8027c72:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8027c74:	681b      	ldr	r3, [r3, #0]
 8027c76:	9310      	str	r3, [sp, #64]	; 0x40
 8027c78:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
 8027c7c:	930b      	str	r3, [sp, #44]	; 0x2c
 8027c7e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8027c80:	2b00      	cmp	r3, #0
 8027c82:	dc03      	bgt.n	8027c8c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8027c84:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8027c86:	2b00      	cmp	r3, #0
 8027c88:	f340 8368 	ble.w	802835c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73c>
 8027c8c:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8027c8e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8027c92:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8027c96:	1e48      	subs	r0, r1, #1
 8027c98:	1e57      	subs	r7, r2, #1
 8027c9a:	9b07      	ldr	r3, [sp, #28]
 8027c9c:	2b00      	cmp	r3, #0
 8027c9e:	f340 8187 	ble.w	8027fb0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x390>
 8027ca2:	ea5f 4c25 	movs.w	ip, r5, asr #16
 8027ca6:	ea4f 4326 	mov.w	r3, r6, asr #16
 8027caa:	d406      	bmi.n	8027cba <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 8027cac:	4584      	cmp	ip, r0
 8027cae:	da04      	bge.n	8027cba <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 8027cb0:	2b00      	cmp	r3, #0
 8027cb2:	db02      	blt.n	8027cba <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 8027cb4:	42bb      	cmp	r3, r7
 8027cb6:	f2c0 817c 	blt.w	8027fb2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 8027cba:	f11c 0c01 	adds.w	ip, ip, #1
 8027cbe:	f100 816c 	bmi.w	8027f9a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 8027cc2:	4561      	cmp	r1, ip
 8027cc4:	f2c0 8169 	blt.w	8027f9a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 8027cc8:	3301      	adds	r3, #1
 8027cca:	f100 8166 	bmi.w	8027f9a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 8027cce:	429a      	cmp	r2, r3
 8027cd0:	f2c0 8163 	blt.w	8027f9a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 8027cd4:	9b07      	ldr	r3, [sp, #28]
 8027cd6:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8027cd8:	9318      	str	r3, [sp, #96]	; 0x60
 8027cda:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8027cdc:	2b00      	cmp	r3, #0
 8027cde:	f340 8186 	ble.w	8027fee <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ce>
 8027ce2:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8027ce4:	142a      	asrs	r2, r5, #16
 8027ce6:	ea4f 4026 	mov.w	r0, r6, asr #16
 8027cea:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8027cee:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 8027cf2:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 8027cf6:	f100 81cb 	bmi.w	8028090 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x470>
 8027cfa:	f10e 38ff 	add.w	r8, lr, #4294967295
 8027cfe:	4542      	cmp	r2, r8
 8027d00:	f280 81c6 	bge.w	8028090 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x470>
 8027d04:	2800      	cmp	r0, #0
 8027d06:	f2c0 81c3 	blt.w	8028090 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x470>
 8027d0a:	f103 38ff 	add.w	r8, r3, #4294967295
 8027d0e:	4540      	cmp	r0, r8
 8027d10:	f280 81be 	bge.w	8028090 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x470>
 8027d14:	fa0f f38e 	sxth.w	r3, lr
 8027d18:	fb00 2203 	mla	r2, r0, r3, r2
 8027d1c:	9810      	ldr	r0, [sp, #64]	; 0x40
 8027d1e:	eb00 0882 	add.w	r8, r0, r2, lsl #2
 8027d22:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 8027d26:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 8027d2a:	2900      	cmp	r1, #0
 8027d2c:	f000 81a6 	beq.w	802807c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45c>
 8027d30:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8027d34:	900c      	str	r0, [sp, #48]	; 0x30
 8027d36:	0e00      	lsrs	r0, r0, #24
 8027d38:	9013      	str	r0, [sp, #76]	; 0x4c
 8027d3a:	f1bc 0f00 	cmp.w	ip, #0
 8027d3e:	d00f      	beq.n	8027d60 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 8027d40:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8027d44:	3b01      	subs	r3, #1
 8027d46:	009b      	lsls	r3, r3, #2
 8027d48:	3304      	adds	r3, #4
 8027d4a:	eb08 0003 	add.w	r0, r8, r3
 8027d4e:	f858 3003 	ldr.w	r3, [r8, r3]
 8027d52:	9308      	str	r3, [sp, #32]
 8027d54:	0e1b      	lsrs	r3, r3, #24
 8027d56:	9311      	str	r3, [sp, #68]	; 0x44
 8027d58:	6843      	ldr	r3, [r0, #4]
 8027d5a:	930d      	str	r3, [sp, #52]	; 0x34
 8027d5c:	0e1b      	lsrs	r3, r3, #24
 8027d5e:	9314      	str	r3, [sp, #80]	; 0x50
 8027d60:	b289      	uxth	r1, r1
 8027d62:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8027d64:	fa1f fc8c 	uxth.w	ip, ip
 8027d68:	0108      	lsls	r0, r1, #4
 8027d6a:	fb01 f90c 	mul.w	r9, r1, ip
 8027d6e:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 8027d72:	ebc9 1c0c 	rsb	ip, r9, ip, lsl #4
 8027d76:	eba0 0809 	sub.w	r8, r0, r9
 8027d7a:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8027d7c:	fa1f f18c 	uxth.w	r1, ip
 8027d80:	fa1f f888 	uxth.w	r8, r8
 8027d84:	1a5b      	subs	r3, r3, r1
 8027d86:	fb08 f000 	mul.w	r0, r8, r0
 8027d8a:	b29b      	uxth	r3, r3
 8027d8c:	fb03 000e 	mla	r0, r3, lr, r0
 8027d90:	fb01 0004 	mla	r0, r1, r4, r0
 8027d94:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8027d96:	fb09 0004 	mla	r0, r9, r4, r0
 8027d9a:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8027d9e:	2800      	cmp	r0, #0
 8027da0:	f000 80f2 	beq.w	8027f88 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 8027da4:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8027da8:	d01b      	beq.n	8027de2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 8027daa:	f002 1aff 	and.w	sl, r2, #16711935	; 0xff00ff
 8027dae:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8027db2:	fb0e fa0a 	mul.w	sl, lr, sl
 8027db6:	fb0e fe02 	mul.w	lr, lr, r2
 8027dba:	ea4f 221a 	mov.w	r2, sl, lsr #8
 8027dbe:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8027dc2:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8027dc6:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8027dca:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8027dce:	4452      	add	r2, sl
 8027dd0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8027dd4:	0a12      	lsrs	r2, r2, #8
 8027dd6:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8027dda:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8027dde:	ea42 020c 	orr.w	r2, r2, ip
 8027de2:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8027de4:	2cff      	cmp	r4, #255	; 0xff
 8027de6:	d021      	beq.n	8027e2c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 8027de8:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8027dea:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8027dee:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8027df0:	fb04 fb0b 	mul.w	fp, r4, fp
 8027df4:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8027df6:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8027dfa:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8027dfc:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8027e00:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8027e04:	fb04 fa0a 	mul.w	sl, r4, sl
 8027e08:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8027e0c:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8027e10:	44de      	add	lr, fp
 8027e12:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8027e16:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8027e1a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8027e1e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8027e22:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8027e26:	ea4e 040a 	orr.w	r4, lr, sl
 8027e2a:	940c      	str	r4, [sp, #48]	; 0x30
 8027e2c:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8027e2e:	2cff      	cmp	r4, #255	; 0xff
 8027e30:	d021      	beq.n	8027e76 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x256>
 8027e32:	9c08      	ldr	r4, [sp, #32]
 8027e34:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8027e38:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8027e3a:	fb04 fb0b 	mul.w	fp, r4, fp
 8027e3e:	9c08      	ldr	r4, [sp, #32]
 8027e40:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8027e44:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8027e46:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8027e4a:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8027e4e:	fb04 fa0a 	mul.w	sl, r4, sl
 8027e52:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8027e56:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8027e5a:	44de      	add	lr, fp
 8027e5c:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8027e60:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8027e64:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8027e68:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8027e6c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8027e70:	ea4e 040a 	orr.w	r4, lr, sl
 8027e74:	9408      	str	r4, [sp, #32]
 8027e76:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8027e78:	2cff      	cmp	r4, #255	; 0xff
 8027e7a:	d021      	beq.n	8027ec0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 8027e7c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8027e7e:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8027e82:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8027e84:	fb04 fb0b 	mul.w	fp, r4, fp
 8027e88:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8027e8a:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8027e8e:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8027e90:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8027e94:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8027e98:	fb04 fa0a 	mul.w	sl, r4, sl
 8027e9c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8027ea0:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8027ea4:	44de      	add	lr, fp
 8027ea6:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8027eaa:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8027eae:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8027eb2:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8027eb6:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8027eba:	ea4e 040a 	orr.w	r4, lr, sl
 8027ebe:	940d      	str	r4, [sp, #52]	; 0x34
 8027ec0:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8027ec2:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 8027ec6:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8027eca:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8027ece:	9c08      	ldr	r4, [sp, #32]
 8027ed0:	fb08 fc0c 	mul.w	ip, r8, ip
 8027ed4:	fb03 cc0e 	mla	ip, r3, lr, ip
 8027ed8:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8027edc:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8027ede:	fb01 cc0e 	mla	ip, r1, lr, ip
 8027ee2:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8027ee6:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8027ee8:	fb09 cc0e 	mla	ip, r9, lr, ip
 8027eec:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 8027ef0:	fb08 f80e 	mul.w	r8, r8, lr
 8027ef4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8027ef8:	fb03 8202 	mla	r2, r3, r2, r8
 8027efc:	9b08      	ldr	r3, [sp, #32]
 8027efe:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8027f02:	f403 4a7f 	and.w	sl, r3, #65280	; 0xff00
 8027f06:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8027f08:	fb01 220a 	mla	r2, r1, sl, r2
 8027f0c:	f403 417f 	and.w	r1, r3, #65280	; 0xff00
 8027f10:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8027f12:	fb09 2901 	mla	r9, r9, r1, r2
 8027f16:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8027f18:	4343      	muls	r3, r0
 8027f1a:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8027f1e:	1c58      	adds	r0, r3, #1
 8027f20:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8027f24:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8027f28:	783b      	ldrb	r3, [r7, #0]
 8027f2a:	ea4c 0c09 	orr.w	ip, ip, r9
 8027f2e:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 8027f32:	fa5f f28c 	uxtb.w	r2, ip
 8027f36:	b2c0      	uxtb	r0, r0
 8027f38:	fb12 f201 	smulbb	r2, r2, r1
 8027f3c:	fb03 2300 	mla	r3, r3, r0, r2
 8027f40:	b29b      	uxth	r3, r3
 8027f42:	1c5a      	adds	r2, r3, #1
 8027f44:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8027f48:	787a      	ldrb	r2, [r7, #1]
 8027f4a:	fb12 f200 	smulbb	r2, r2, r0
 8027f4e:	121b      	asrs	r3, r3, #8
 8027f50:	703b      	strb	r3, [r7, #0]
 8027f52:	f3cc 2307 	ubfx	r3, ip, #8, #8
 8027f56:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8027f5a:	fb03 2301 	mla	r3, r3, r1, r2
 8027f5e:	b29b      	uxth	r3, r3
 8027f60:	1c5a      	adds	r2, r3, #1
 8027f62:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8027f66:	121b      	asrs	r3, r3, #8
 8027f68:	707b      	strb	r3, [r7, #1]
 8027f6a:	78bb      	ldrb	r3, [r7, #2]
 8027f6c:	fb13 f000 	smulbb	r0, r3, r0
 8027f70:	fb0c 0c01 	mla	ip, ip, r1, r0
 8027f74:	fa1f fc8c 	uxth.w	ip, ip
 8027f78:	f10c 0301 	add.w	r3, ip, #1
 8027f7c:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 8027f80:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8027f84:	f887 c002 	strb.w	ip, [r7, #2]
 8027f88:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8027f8a:	3703      	adds	r7, #3
 8027f8c:	441d      	add	r5, r3
 8027f8e:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8027f90:	441e      	add	r6, r3
 8027f92:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8027f94:	3b01      	subs	r3, #1
 8027f96:	9318      	str	r3, [sp, #96]	; 0x60
 8027f98:	e69f      	b.n	8027cda <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 8027f9a:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8027f9c:	441d      	add	r5, r3
 8027f9e:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8027fa0:	441e      	add	r6, r3
 8027fa2:	9b07      	ldr	r3, [sp, #28]
 8027fa4:	3b01      	subs	r3, #1
 8027fa6:	9307      	str	r3, [sp, #28]
 8027fa8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8027faa:	3303      	adds	r3, #3
 8027fac:	930a      	str	r3, [sp, #40]	; 0x28
 8027fae:	e674      	b.n	8027c9a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8027fb0:	d025      	beq.n	8027ffe <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3de>
 8027fb2:	9b07      	ldr	r3, [sp, #28]
 8027fb4:	9831      	ldr	r0, [sp, #196]	; 0xc4
 8027fb6:	3b01      	subs	r3, #1
 8027fb8:	fb00 5003 	mla	r0, r0, r3, r5
 8027fbc:	1400      	asrs	r0, r0, #16
 8027fbe:	f53f ae89 	bmi.w	8027cd4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 8027fc2:	3901      	subs	r1, #1
 8027fc4:	4288      	cmp	r0, r1
 8027fc6:	f6bf ae85 	bge.w	8027cd4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 8027fca:	9932      	ldr	r1, [sp, #200]	; 0xc8
 8027fcc:	fb01 6303 	mla	r3, r1, r3, r6
 8027fd0:	141b      	asrs	r3, r3, #16
 8027fd2:	f53f ae7f 	bmi.w	8027cd4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 8027fd6:	3a01      	subs	r2, #1
 8027fd8:	4293      	cmp	r3, r2
 8027fda:	f6bf ae7b 	bge.w	8027cd4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 8027fde:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8027fe0:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8027fe4:	f103 0e03 	add.w	lr, r3, #3
 8027fe8:	f1bb 0f00 	cmp.w	fp, #0
 8027fec:	dc6e      	bgt.n	80280cc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ac>
 8027fee:	9b07      	ldr	r3, [sp, #28]
 8027ff0:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8027ff4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8027ff6:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8027ffa:	4423      	add	r3, r4
 8027ffc:	930a      	str	r3, [sp, #40]	; 0x28
 8027ffe:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8028000:	2b00      	cmp	r3, #0
 8028002:	f340 81ab 	ble.w	802835c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73c>
 8028006:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802800a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 802800c:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8028010:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8028014:	eef0 6a48 	vmov.f32	s13, s16
 8028018:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 802801c:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8028020:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8028024:	ee16 5a90 	vmov	r5, s13
 8028028:	eef0 6a68 	vmov.f32	s13, s17
 802802c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8028030:	ee16 6a90 	vmov	r6, s13
 8028034:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8028038:	ee69 7a27 	vmul.f32	s15, s18, s15
 802803c:	ee37 8a48 	vsub.f32	s16, s14, s16
 8028040:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8028044:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8028048:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 802804c:	ee18 2a10 	vmov	r2, s16
 8028050:	eeb0 8a47 	vmov.f32	s16, s14
 8028054:	fb92 f3f3 	sdiv	r3, r2, r3
 8028058:	ee18 2a90 	vmov	r2, s17
 802805c:	9331      	str	r3, [sp, #196]	; 0xc4
 802805e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8028060:	eef0 8a67 	vmov.f32	s17, s15
 8028064:	fb92 f3f3 	sdiv	r3, r2, r3
 8028068:	9332      	str	r3, [sp, #200]	; 0xc8
 802806a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 802806c:	9a19      	ldr	r2, [sp, #100]	; 0x64
 802806e:	3b01      	subs	r3, #1
 8028070:	9317      	str	r3, [sp, #92]	; 0x5c
 8028072:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8028074:	bf08      	it	eq
 8028076:	4613      	moveq	r3, r2
 8028078:	9307      	str	r3, [sp, #28]
 802807a:	e600      	b.n	8027c7e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 802807c:	f1bc 0f00 	cmp.w	ip, #0
 8028080:	f43f ae6e 	beq.w	8027d60 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 8028084:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 8028088:	9308      	str	r3, [sp, #32]
 802808a:	0e1b      	lsrs	r3, r3, #24
 802808c:	9311      	str	r3, [sp, #68]	; 0x44
 802808e:	e667      	b.n	8027d60 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 8028090:	f112 0801 	adds.w	r8, r2, #1
 8028094:	f53f af78 	bmi.w	8027f88 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 8028098:	45c6      	cmp	lr, r8
 802809a:	f6ff af75 	blt.w	8027f88 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 802809e:	f110 0801 	adds.w	r8, r0, #1
 80280a2:	f53f af71 	bmi.w	8027f88 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 80280a6:	4543      	cmp	r3, r8
 80280a8:	f6ff af6e 	blt.w	8027f88 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 80280ac:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 80280ae:	b21b      	sxth	r3, r3
 80280b0:	9201      	str	r2, [sp, #4]
 80280b2:	9300      	str	r3, [sp, #0]
 80280b4:	fa0f f38e 	sxth.w	r3, lr
 80280b8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80280ba:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80280be:	e9cd c404 	strd	ip, r4, [sp, #16]
 80280c2:	4639      	mov	r1, r7
 80280c4:	981b      	ldr	r0, [sp, #108]	; 0x6c
 80280c6:	f7ff fc53 	bl	8027970 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>
 80280ca:	e75d      	b.n	8027f88 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 80280cc:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 80280ce:	142f      	asrs	r7, r5, #16
 80280d0:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80280d2:	f3c5 3103 	ubfx	r1, r5, #12, #4
 80280d6:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 80280da:	1433      	asrs	r3, r6, #16
 80280dc:	f3c6 3003 	ubfx	r0, r6, #12, #4
 80280e0:	fb02 7303 	mla	r3, r2, r3, r7
 80280e4:	eb04 0783 	add.w	r7, r4, r3, lsl #2
 80280e8:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 80280ec:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 80280f0:	2900      	cmp	r1, #0
 80280f2:	f000 812a 	beq.w	802834a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72a>
 80280f6:	687c      	ldr	r4, [r7, #4]
 80280f8:	940e      	str	r4, [sp, #56]	; 0x38
 80280fa:	0e24      	lsrs	r4, r4, #24
 80280fc:	9415      	str	r4, [sp, #84]	; 0x54
 80280fe:	b178      	cbz	r0, 8028120 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x500>
 8028100:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8028104:	3a01      	subs	r2, #1
 8028106:	0092      	lsls	r2, r2, #2
 8028108:	3204      	adds	r2, #4
 802810a:	eb07 0802 	add.w	r8, r7, r2
 802810e:	58ba      	ldr	r2, [r7, r2]
 8028110:	9209      	str	r2, [sp, #36]	; 0x24
 8028112:	0e12      	lsrs	r2, r2, #24
 8028114:	9212      	str	r2, [sp, #72]	; 0x48
 8028116:	f8d8 2004 	ldr.w	r2, [r8, #4]
 802811a:	920f      	str	r2, [sp, #60]	; 0x3c
 802811c:	0e12      	lsrs	r2, r2, #24
 802811e:	9216      	str	r2, [sp, #88]	; 0x58
 8028120:	b289      	uxth	r1, r1
 8028122:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8028124:	b280      	uxth	r0, r0
 8028126:	fb01 f900 	mul.w	r9, r1, r0
 802812a:	0109      	lsls	r1, r1, #4
 802812c:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8028130:	eba1 0809 	sub.w	r8, r1, r9
 8028134:	f5c1 7280 	rsb	r2, r1, #256	; 0x100
 8028138:	9915      	ldr	r1, [sp, #84]	; 0x54
 802813a:	b280      	uxth	r0, r0
 802813c:	fa1f f888 	uxth.w	r8, r8
 8028140:	1a12      	subs	r2, r2, r0
 8028142:	fb08 f101 	mul.w	r1, r8, r1
 8028146:	b292      	uxth	r2, r2
 8028148:	fb02 110c 	mla	r1, r2, ip, r1
 802814c:	fb00 1104 	mla	r1, r0, r4, r1
 8028150:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8028152:	fb09 1104 	mla	r1, r9, r4, r1
 8028156:	f3c1 2107 	ubfx	r1, r1, #8, #8
 802815a:	2900      	cmp	r1, #0
 802815c:	f000 80ec 	beq.w	8028338 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x718>
 8028160:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8028164:	d019      	beq.n	802819a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x57a>
 8028166:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 802816a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802816e:	fb0c fa0a 	mul.w	sl, ip, sl
 8028172:	fb0c fc03 	mul.w	ip, ip, r3
 8028176:	ea4f 231a 	mov.w	r3, sl, lsr #8
 802817a:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 802817e:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 8028182:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8028186:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 802818a:	4453      	add	r3, sl
 802818c:	0a3f      	lsrs	r7, r7, #8
 802818e:	0a1b      	lsrs	r3, r3, #8
 8028190:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8028194:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8028198:	433b      	orrs	r3, r7
 802819a:	9c15      	ldr	r4, [sp, #84]	; 0x54
 802819c:	2cff      	cmp	r4, #255	; 0xff
 802819e:	d020      	beq.n	80281e2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c2>
 80281a0:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80281a2:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 80281a6:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80281a8:	4367      	muls	r7, r4
 80281aa:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80281ac:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80281b0:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80281b4:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80281b6:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80281ba:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80281be:	fb04 fa0a 	mul.w	sl, r4, sl
 80281c2:	44bc      	add	ip, r7
 80281c4:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 80281c8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80281cc:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80281d0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80281d4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80281d8:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80281dc:	ea4c 040a 	orr.w	r4, ip, sl
 80281e0:	940e      	str	r4, [sp, #56]	; 0x38
 80281e2:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80281e4:	2cff      	cmp	r4, #255	; 0xff
 80281e6:	d020      	beq.n	802822a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60a>
 80281e8:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80281ea:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 80281ee:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80281f0:	4367      	muls	r7, r4
 80281f2:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80281f4:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80281f8:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80281fc:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80281fe:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8028202:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8028206:	fb04 fa0a 	mul.w	sl, r4, sl
 802820a:	44bc      	add	ip, r7
 802820c:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8028210:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8028214:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8028218:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802821c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8028220:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8028224:	ea4c 040a 	orr.w	r4, ip, sl
 8028228:	9409      	str	r4, [sp, #36]	; 0x24
 802822a:	9c16      	ldr	r4, [sp, #88]	; 0x58
 802822c:	2cff      	cmp	r4, #255	; 0xff
 802822e:	d020      	beq.n	8028272 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x652>
 8028230:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8028232:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8028236:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8028238:	4367      	muls	r7, r4
 802823a:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 802823c:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8028240:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8028244:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8028246:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 802824a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802824e:	fb04 fa0a 	mul.w	sl, r4, sl
 8028252:	44bc      	add	ip, r7
 8028254:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8028258:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802825c:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8028260:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8028264:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8028268:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802826c:	ea4c 040a 	orr.w	r4, ip, sl
 8028270:	940f      	str	r4, [sp, #60]	; 0x3c
 8028272:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8028274:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8028278:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802827c:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8028280:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8028282:	fb08 f707 	mul.w	r7, r8, r7
 8028286:	fb02 770c 	mla	r7, r2, ip, r7
 802828a:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 802828e:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8028290:	fb00 770c 	mla	r7, r0, ip, r7
 8028294:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8028298:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 802829a:	fb09 770c 	mla	r7, r9, ip, r7
 802829e:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 80282a2:	fb08 f80c 	mul.w	r8, r8, ip
 80282a6:	0a3f      	lsrs	r7, r7, #8
 80282a8:	fb02 8303 	mla	r3, r2, r3, r8
 80282ac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80282ae:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80282b2:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 80282b6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80282b8:	fb00 330a 	mla	r3, r0, sl, r3
 80282bc:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 80282c0:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80282c2:	fb09 3c0c 	mla	ip, r9, ip, r3
 80282c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80282c8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80282cc:	434b      	muls	r3, r1
 80282ce:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 80282d2:	1c59      	adds	r1, r3, #1
 80282d4:	ea47 070c 	orr.w	r7, r7, ip
 80282d8:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 80282dc:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 80282e0:	b2fa      	uxtb	r2, r7
 80282e2:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 80282e6:	fb12 f200 	smulbb	r2, r2, r0
 80282ea:	b2c9      	uxtb	r1, r1
 80282ec:	fb03 2301 	mla	r3, r3, r1, r2
 80282f0:	b29b      	uxth	r3, r3
 80282f2:	1c5a      	adds	r2, r3, #1
 80282f4:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80282f8:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 80282fc:	fb12 f201 	smulbb	r2, r2, r1
 8028300:	121b      	asrs	r3, r3, #8
 8028302:	f80e 3c03 	strb.w	r3, [lr, #-3]
 8028306:	f3c7 2307 	ubfx	r3, r7, #8, #8
 802830a:	0c3f      	lsrs	r7, r7, #16
 802830c:	fb03 2300 	mla	r3, r3, r0, r2
 8028310:	b29b      	uxth	r3, r3
 8028312:	1c5a      	adds	r2, r3, #1
 8028314:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8028318:	121b      	asrs	r3, r3, #8
 802831a:	f80e 3c02 	strb.w	r3, [lr, #-2]
 802831e:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 8028322:	fb13 f101 	smulbb	r1, r3, r1
 8028326:	fb07 1700 	mla	r7, r7, r0, r1
 802832a:	b2bf      	uxth	r7, r7
 802832c:	1c79      	adds	r1, r7, #1
 802832e:	eb01 2717 	add.w	r7, r1, r7, lsr #8
 8028332:	123f      	asrs	r7, r7, #8
 8028334:	f80e 7c01 	strb.w	r7, [lr, #-1]
 8028338:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 802833a:	f10e 0e03 	add.w	lr, lr, #3
 802833e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8028342:	441d      	add	r5, r3
 8028344:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8028346:	441e      	add	r6, r3
 8028348:	e64e      	b.n	8027fe8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c8>
 802834a:	2800      	cmp	r0, #0
 802834c:	f43f aee8 	beq.w	8028120 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x500>
 8028350:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 8028354:	9209      	str	r2, [sp, #36]	; 0x24
 8028356:	0e12      	lsrs	r2, r2, #24
 8028358:	9212      	str	r2, [sp, #72]	; 0x48
 802835a:	e6e1      	b.n	8028120 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x500>
 802835c:	b01d      	add	sp, #116	; 0x74
 802835e:	ecbd 8b08 	vpop	{d8-d11}
 8028362:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08028368 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>:
 8028368:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802836c:	e9dd 540d 	ldrd	r5, r4, [sp, #52]	; 0x34
 8028370:	f9bd e030 	ldrsh.w	lr, [sp, #48]	; 0x30
 8028374:	fb04 5603 	mla	r6, r4, r3, r5
 8028378:	2c00      	cmp	r4, #0
 802837a:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 802837e:	f89d 7040 	ldrb.w	r7, [sp, #64]	; 0x40
 8028382:	eb02 0c86 	add.w	ip, r2, r6, lsl #2
 8028386:	db36      	blt.n	80283f6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8e>
 8028388:	45a6      	cmp	lr, r4
 802838a:	dd34      	ble.n	80283f6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8e>
 802838c:	2d00      	cmp	r5, #0
 802838e:	db30      	blt.n	80283f2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8a>
 8028390:	42ab      	cmp	r3, r5
 8028392:	dd2e      	ble.n	80283f2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8a>
 8028394:	f852 2026 	ldr.w	r2, [r2, r6, lsl #2]
 8028398:	1c6e      	adds	r6, r5, #1
 802839a:	d42f      	bmi.n	80283fc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x94>
 802839c:	42b3      	cmp	r3, r6
 802839e:	dd2d      	ble.n	80283fc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x94>
 80283a0:	b370      	cbz	r0, 8028400 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x98>
 80283a2:	f8dc 6004 	ldr.w	r6, [ip, #4]
 80283a6:	3401      	adds	r4, #1
 80283a8:	d42e      	bmi.n	8028408 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xa0>
 80283aa:	45a6      	cmp	lr, r4
 80283ac:	dd2c      	ble.n	8028408 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xa0>
 80283ae:	b377      	cbz	r7, 802840e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xa6>
 80283b0:	2d00      	cmp	r5, #0
 80283b2:	db27      	blt.n	8028404 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x9c>
 80283b4:	42ab      	cmp	r3, r5
 80283b6:	dd25      	ble.n	8028404 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x9c>
 80283b8:	f85c 4023 	ldr.w	r4, [ip, r3, lsl #2]
 80283bc:	3501      	adds	r5, #1
 80283be:	d429      	bmi.n	8028414 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xac>
 80283c0:	42ab      	cmp	r3, r5
 80283c2:	dd27      	ble.n	8028414 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xac>
 80283c4:	b340      	cbz	r0, 8028418 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xb0>
 80283c6:	3301      	adds	r3, #1
 80283c8:	f85c 3023 	ldr.w	r3, [ip, r3, lsl #2]
 80283cc:	280f      	cmp	r0, #15
 80283ce:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 80283d2:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 80283d6:	ea4f 6914 	mov.w	r9, r4, lsr #24
 80283da:	ea4f 6813 	mov.w	r8, r3, lsr #24
 80283de:	d801      	bhi.n	80283e4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x7c>
 80283e0:	2f0f      	cmp	r7, #15
 80283e2:	d91b      	bls.n	802841c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xb4>
 80283e4:	4b7e      	ldr	r3, [pc, #504]	; (80285e0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x278>)
 80283e6:	f240 1157 	movw	r1, #343	; 0x157
 80283ea:	4a7e      	ldr	r2, [pc, #504]	; (80285e4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x27c>)
 80283ec:	487e      	ldr	r0, [pc, #504]	; (80285e8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x280>)
 80283ee:	f003 fa43 	bl	802b878 <__assert_func>
 80283f2:	2200      	movs	r2, #0
 80283f4:	e7d0      	b.n	8028398 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x30>
 80283f6:	2600      	movs	r6, #0
 80283f8:	4632      	mov	r2, r6
 80283fa:	e7d4      	b.n	80283a6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x3e>
 80283fc:	2600      	movs	r6, #0
 80283fe:	e7d2      	b.n	80283a6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x3e>
 8028400:	4606      	mov	r6, r0
 8028402:	e7d0      	b.n	80283a6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x3e>
 8028404:	2400      	movs	r4, #0
 8028406:	e7d9      	b.n	80283bc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x54>
 8028408:	2300      	movs	r3, #0
 802840a:	461c      	mov	r4, r3
 802840c:	e7de      	b.n	80283cc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x64>
 802840e:	463b      	mov	r3, r7
 8028410:	463c      	mov	r4, r7
 8028412:	e7db      	b.n	80283cc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x64>
 8028414:	2300      	movs	r3, #0
 8028416:	e7d9      	b.n	80283cc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x64>
 8028418:	4603      	mov	r3, r0
 802841a:	e7d7      	b.n	80283cc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x64>
 802841c:	b280      	uxth	r0, r0
 802841e:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 8028422:	b2bf      	uxth	r7, r7
 8028424:	fb00 fe07 	mul.w	lr, r0, r7
 8028428:	ea4f 1000 	mov.w	r0, r0, lsl #4
 802842c:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 8028430:	eba0 0c0e 	sub.w	ip, r0, lr
 8028434:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 8028438:	b2bf      	uxth	r7, r7
 802843a:	fa1f fc8c 	uxth.w	ip, ip
 802843e:	eba0 0507 	sub.w	r5, r0, r7
 8028442:	fb0c f00a 	mul.w	r0, ip, sl
 8028446:	b2ad      	uxth	r5, r5
 8028448:	fb05 000b 	mla	r0, r5, fp, r0
 802844c:	fb07 0009 	mla	r0, r7, r9, r0
 8028450:	fb0e 0008 	mla	r0, lr, r8, r0
 8028454:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8028458:	9001      	str	r0, [sp, #4]
 802845a:	d018      	beq.n	802848e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x126>
 802845c:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 8028460:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8028464:	fb0b f000 	mul.w	r0, fp, r0
 8028468:	fb0b fb02 	mul.w	fp, fp, r2
 802846c:	0a02      	lsrs	r2, r0, #8
 802846e:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 8028472:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8028476:	4402      	add	r2, r0
 8028478:	f50b 7080 	add.w	r0, fp, #256	; 0x100
 802847c:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 8028480:	0a12      	lsrs	r2, r2, #8
 8028482:	0a00      	lsrs	r0, r0, #8
 8028484:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8028488:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 802848c:	4302      	orrs	r2, r0
 802848e:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8028492:	d01a      	beq.n	80284ca <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x162>
 8028494:	f006 10ff 	and.w	r0, r6, #16711935	; 0xff00ff
 8028498:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 802849c:	fb0a f000 	mul.w	r0, sl, r0
 80284a0:	fb0a fa06 	mul.w	sl, sl, r6
 80284a4:	0a06      	lsrs	r6, r0, #8
 80284a6:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 80284aa:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 80284ae:	4406      	add	r6, r0
 80284b0:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 80284b4:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 80284b8:	0a36      	lsrs	r6, r6, #8
 80284ba:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80284be:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 80284c2:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80284c6:	ea46 060a 	orr.w	r6, r6, sl
 80284ca:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 80284ce:	d01b      	beq.n	8028508 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x1a0>
 80284d0:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 80284d4:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 80284d8:	fb09 fa0a 	mul.w	sl, r9, sl
 80284dc:	fb09 f004 	mul.w	r0, r9, r4
 80284e0:	ea4f 241a 	mov.w	r4, sl, lsr #8
 80284e4:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 80284e8:	f500 7980 	add.w	r9, r0, #256	; 0x100
 80284ec:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 80284f0:	eb09 2910 	add.w	r9, r9, r0, lsr #8
 80284f4:	4454      	add	r4, sl
 80284f6:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80284fa:	0a24      	lsrs	r4, r4, #8
 80284fc:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8028500:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8028504:	ea44 0409 	orr.w	r4, r4, r9
 8028508:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 802850c:	d01b      	beq.n	8028546 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x1de>
 802850e:	f003 19ff 	and.w	r9, r3, #16711935	; 0xff00ff
 8028512:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8028516:	fb08 f909 	mul.w	r9, r8, r9
 802851a:	fb08 f003 	mul.w	r0, r8, r3
 802851e:	ea4f 2319 	mov.w	r3, r9, lsr #8
 8028522:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 8028526:	f500 7880 	add.w	r8, r0, #256	; 0x100
 802852a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802852e:	eb08 2810 	add.w	r8, r8, r0, lsr #8
 8028532:	444b      	add	r3, r9
 8028534:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8028538:	0a1b      	lsrs	r3, r3, #8
 802853a:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 802853e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8028542:	ea43 0308 	orr.w	r3, r3, r8
 8028546:	f006 10ff 	and.w	r0, r6, #16711935	; 0xff00ff
 802854a:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 802854e:	f002 18ff 	and.w	r8, r2, #16711935	; 0xff00ff
 8028552:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8028556:	fb0c f000 	mul.w	r0, ip, r0
 802855a:	fb0c f606 	mul.w	r6, ip, r6
 802855e:	fb05 0808 	mla	r8, r5, r8, r0
 8028562:	f004 10ff 	and.w	r0, r4, #16711935	; 0xff00ff
 8028566:	fb05 6502 	mla	r5, r5, r2, r6
 802856a:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 802856e:	fb07 8800 	mla	r8, r7, r0, r8
 8028572:	f003 10ff 	and.w	r0, r3, #16711935	; 0xff00ff
 8028576:	fb07 5704 	mla	r7, r7, r4, r5
 802857a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802857e:	fb0e 8000 	mla	r0, lr, r0, r8
 8028582:	780a      	ldrb	r2, [r1, #0]
 8028584:	fb0e 7e03 	mla	lr, lr, r3, r7
 8028588:	9b01      	ldr	r3, [sp, #4]
 802858a:	0a00      	lsrs	r0, r0, #8
 802858c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8028590:	43db      	mvns	r3, r3
 8028592:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8028596:	b2db      	uxtb	r3, r3
 8028598:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 802859c:	ea40 0e0e 	orr.w	lr, r0, lr
 80285a0:	fb02 f003 	mul.w	r0, r2, r3
 80285a4:	1c42      	adds	r2, r0, #1
 80285a6:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 80285aa:	eb0e 2212 	add.w	r2, lr, r2, lsr #8
 80285ae:	700a      	strb	r2, [r1, #0]
 80285b0:	784a      	ldrb	r2, [r1, #1]
 80285b2:	435a      	muls	r2, r3
 80285b4:	1c50      	adds	r0, r2, #1
 80285b6:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 80285ba:	ea4f 221e 	mov.w	r2, lr, lsr #8
 80285be:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 80285c2:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 80285c6:	704a      	strb	r2, [r1, #1]
 80285c8:	788a      	ldrb	r2, [r1, #2]
 80285ca:	4353      	muls	r3, r2
 80285cc:	1c5a      	adds	r2, r3, #1
 80285ce:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80285d2:	eb0e 2e13 	add.w	lr, lr, r3, lsr #8
 80285d6:	f881 e002 	strb.w	lr, [r1, #2]
 80285da:	b003      	add	sp, #12
 80285dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80285e0:	080312ae 	.word	0x080312ae
 80285e4:	080317a6 	.word	0x080317a6
 80285e8:	08031377 	.word	0x08031377

080285ec <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80285ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80285f0:	ed2d 8b08 	vpush	{d8-d11}
 80285f4:	b099      	sub	sp, #100	; 0x64
 80285f6:	eeb0 aa40 	vmov.f32	s20, s0
 80285fa:	eef0 9a60 	vmov.f32	s19, s1
 80285fe:	9017      	str	r0, [sp, #92]	; 0x5c
 8028600:	eeb0 9a41 	vmov.f32	s18, s2
 8028604:	9306      	str	r3, [sp, #24]
 8028606:	eeb0 8a62 	vmov.f32	s16, s5
 802860a:	eef0 8a43 	vmov.f32	s17, s6
 802860e:	eef0 ba44 	vmov.f32	s23, s8
 8028612:	eeb0 ba64 	vmov.f32	s22, s9
 8028616:	eef0 aa45 	vmov.f32	s21, s10
 802861a:	e9cd 1215 	strd	r1, r2, [sp, #84]	; 0x54
 802861e:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8028620:	e9dd 1330 	ldrd	r1, r3, [sp, #192]	; 0xc0
 8028624:	6850      	ldr	r0, [r2, #4]
 8028626:	6812      	ldr	r2, [r2, #0]
 8028628:	fb00 1303 	mla	r3, r0, r3, r1
 802862c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8028630:	18d3      	adds	r3, r2, r3
 8028632:	9309      	str	r3, [sp, #36]	; 0x24
 8028634:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8028636:	e9dd 562b 	ldrd	r5, r6, [sp, #172]	; 0xac
 802863a:	681b      	ldr	r3, [r3, #0]
 802863c:	930e      	str	r3, [sp, #56]	; 0x38
 802863e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8028640:	2b00      	cmp	r3, #0
 8028642:	dc03      	bgt.n	802864c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 8028644:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8028646:	2b00      	cmp	r3, #0
 8028648:	f340 8360 	ble.w	8028d0c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x720>
 802864c:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 802864e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8028652:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8028656:	1e48      	subs	r0, r1, #1
 8028658:	1e57      	subs	r7, r2, #1
 802865a:	9b06      	ldr	r3, [sp, #24]
 802865c:	2b00      	cmp	r3, #0
 802865e:	f340 817b 	ble.w	8028958 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 8028662:	ea5f 4c25 	movs.w	ip, r5, asr #16
 8028666:	ea4f 4326 	mov.w	r3, r6, asr #16
 802866a:	d406      	bmi.n	802867a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 802866c:	4584      	cmp	ip, r0
 802866e:	da04      	bge.n	802867a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8028670:	2b00      	cmp	r3, #0
 8028672:	db02      	blt.n	802867a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8028674:	42bb      	cmp	r3, r7
 8028676:	f2c0 8170 	blt.w	802895a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 802867a:	f11c 0c01 	adds.w	ip, ip, #1
 802867e:	f100 8160 	bmi.w	8028942 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 8028682:	4561      	cmp	r1, ip
 8028684:	f2c0 815d 	blt.w	8028942 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 8028688:	3301      	adds	r3, #1
 802868a:	f100 815a 	bmi.w	8028942 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 802868e:	429a      	cmp	r2, r3
 8028690:	f2c0 8157 	blt.w	8028942 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 8028694:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8028698:	9f09      	ldr	r7, [sp, #36]	; 0x24
 802869a:	f1b8 0f00 	cmp.w	r8, #0
 802869e:	f340 8179 	ble.w	8028994 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a8>
 80286a2:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 80286a4:	ea4f 4c26 	mov.w	ip, r6, asr #16
 80286a8:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 80286aa:	f3c5 3103 	ubfx	r1, r5, #12, #4
 80286ae:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 80286b2:	142a      	asrs	r2, r5, #16
 80286b4:	f3c6 3003 	ubfx	r0, r6, #12, #4
 80286b8:	689b      	ldr	r3, [r3, #8]
 80286ba:	f100 81be 	bmi.w	8028a3a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 80286be:	f103 39ff 	add.w	r9, r3, #4294967295
 80286c2:	454a      	cmp	r2, r9
 80286c4:	f280 81b9 	bge.w	8028a3a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 80286c8:	f1bc 0f00 	cmp.w	ip, #0
 80286cc:	f2c0 81b5 	blt.w	8028a3a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 80286d0:	f10e 39ff 	add.w	r9, lr, #4294967295
 80286d4:	45cc      	cmp	ip, r9
 80286d6:	f280 81b0 	bge.w	8028a3a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 80286da:	b21b      	sxth	r3, r3
 80286dc:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80286de:	fb0c 2203 	mla	r2, ip, r3, r2
 80286e2:	eb04 0982 	add.w	r9, r4, r2, lsl #2
 80286e6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80286ea:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 80286ee:	2900      	cmp	r1, #0
 80286f0:	f000 8197 	beq.w	8028a22 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x436>
 80286f4:	f8d9 4004 	ldr.w	r4, [r9, #4]
 80286f8:	940a      	str	r4, [sp, #40]	; 0x28
 80286fa:	0e24      	lsrs	r4, r4, #24
 80286fc:	9411      	str	r4, [sp, #68]	; 0x44
 80286fe:	b180      	cbz	r0, 8028722 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 8028700:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8028704:	3b01      	subs	r3, #1
 8028706:	009b      	lsls	r3, r3, #2
 8028708:	3304      	adds	r3, #4
 802870a:	eb09 0c03 	add.w	ip, r9, r3
 802870e:	f859 3003 	ldr.w	r3, [r9, r3]
 8028712:	9307      	str	r3, [sp, #28]
 8028714:	0e1b      	lsrs	r3, r3, #24
 8028716:	930f      	str	r3, [sp, #60]	; 0x3c
 8028718:	f8dc 3004 	ldr.w	r3, [ip, #4]
 802871c:	930b      	str	r3, [sp, #44]	; 0x2c
 802871e:	0e1b      	lsrs	r3, r3, #24
 8028720:	9312      	str	r3, [sp, #72]	; 0x48
 8028722:	b289      	uxth	r1, r1
 8028724:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8028726:	b280      	uxth	r0, r0
 8028728:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 802872a:	fb01 fa00 	mul.w	sl, r1, r0
 802872e:	0109      	lsls	r1, r1, #4
 8028730:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 8028734:	eba1 090a 	sub.w	r9, r1, sl
 8028738:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
 802873c:	b280      	uxth	r0, r0
 802873e:	fa1f f989 	uxth.w	r9, r9
 8028742:	1a09      	subs	r1, r1, r0
 8028744:	fb09 f303 	mul.w	r3, r9, r3
 8028748:	b289      	uxth	r1, r1
 802874a:	fb01 330e 	mla	r3, r1, lr, r3
 802874e:	fb00 3304 	mla	r3, r0, r4, r3
 8028752:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8028754:	fb0a 3304 	mla	r3, sl, r4, r3
 8028758:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802875c:	2b00      	cmp	r3, #0
 802875e:	f000 80e8 	beq.w	8028932 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x346>
 8028762:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8028766:	d01b      	beq.n	80287a0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 8028768:	f002 1bff 	and.w	fp, r2, #16711935	; 0xff00ff
 802876c:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8028770:	fb0e fb0b 	mul.w	fp, lr, fp
 8028774:	fb0e fe02 	mul.w	lr, lr, r2
 8028778:	ea4f 221b 	mov.w	r2, fp, lsr #8
 802877c:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8028780:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8028784:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8028788:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 802878c:	445a      	add	r2, fp
 802878e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8028792:	0a12      	lsrs	r2, r2, #8
 8028794:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8028798:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 802879c:	ea42 020c 	orr.w	r2, r2, ip
 80287a0:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80287a2:	2cff      	cmp	r4, #255	; 0xff
 80287a4:	d021      	beq.n	80287ea <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fe>
 80287a6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80287a8:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 80287ac:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80287ae:	fb04 fc0c 	mul.w	ip, r4, ip
 80287b2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80287b4:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 80287b8:	f404 4b7f 	and.w	fp, r4, #65280	; 0xff00
 80287bc:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80287be:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80287c2:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80287c6:	fb04 fb0b 	mul.w	fp, r4, fp
 80287ca:	44e6      	add	lr, ip
 80287cc:	f50b 7c80 	add.w	ip, fp, #256	; 0x100
 80287d0:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80287d4:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 80287d8:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80287dc:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 80287e0:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 80287e4:	ea4e 040b 	orr.w	r4, lr, fp
 80287e8:	940a      	str	r4, [sp, #40]	; 0x28
 80287ea:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80287ec:	2cff      	cmp	r4, #255	; 0xff
 80287ee:	d021      	beq.n	8028834 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 80287f0:	9c07      	ldr	r4, [sp, #28]
 80287f2:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 80287f6:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80287f8:	fb04 fc0c 	mul.w	ip, r4, ip
 80287fc:	9c07      	ldr	r4, [sp, #28]
 80287fe:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8028802:	f404 4b7f 	and.w	fp, r4, #65280	; 0xff00
 8028806:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8028808:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 802880c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8028810:	fb04 fb0b 	mul.w	fp, r4, fp
 8028814:	44e6      	add	lr, ip
 8028816:	f50b 7c80 	add.w	ip, fp, #256	; 0x100
 802881a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802881e:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 8028822:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8028826:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 802882a:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 802882e:	ea4e 040b 	orr.w	r4, lr, fp
 8028832:	9407      	str	r4, [sp, #28]
 8028834:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8028836:	2cff      	cmp	r4, #255	; 0xff
 8028838:	d021      	beq.n	802887e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x292>
 802883a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 802883c:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8028840:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8028842:	fb04 fc0c 	mul.w	ip, r4, ip
 8028846:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8028848:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 802884c:	f404 4b7f 	and.w	fp, r4, #65280	; 0xff00
 8028850:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8028852:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8028856:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802885a:	fb04 fb0b 	mul.w	fp, r4, fp
 802885e:	44e6      	add	lr, ip
 8028860:	f50b 7c80 	add.w	ip, fp, #256	; 0x100
 8028864:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8028868:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 802886c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8028870:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 8028874:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 8028878:	ea4e 040b 	orr.w	r4, lr, fp
 802887c:	940b      	str	r4, [sp, #44]	; 0x2c
 802887e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8028880:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 8028884:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8028888:	2bff      	cmp	r3, #255	; 0xff
 802888a:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 802888e:	9c07      	ldr	r4, [sp, #28]
 8028890:	fb09 fc0c 	mul.w	ip, r9, ip
 8028894:	fb01 cc0e 	mla	ip, r1, lr, ip
 8028898:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 802889c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 802889e:	fb00 cc0e 	mla	ip, r0, lr, ip
 80288a2:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 80288a6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80288a8:	fb0a cc0e 	mla	ip, sl, lr, ip
 80288ac:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 80288b0:	fb09 f90e 	mul.w	r9, r9, lr
 80288b4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80288b8:	fb01 9202 	mla	r2, r1, r2, r9
 80288bc:	9907      	ldr	r1, [sp, #28]
 80288be:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80288c2:	f401 4b7f 	and.w	fp, r1, #65280	; 0xff00
 80288c6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80288c8:	fb00 220b 	mla	r2, r0, fp, r2
 80288cc:	f401 407f 	and.w	r0, r1, #65280	; 0xff00
 80288d0:	fb0a 2a00 	mla	sl, sl, r0, r2
 80288d4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80288d8:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80288dc:	ea4c 0c0a 	orr.w	ip, ip, sl
 80288e0:	fa5f f08c 	uxtb.w	r0, ip
 80288e4:	f3cc 2107 	ubfx	r1, ip, #8, #8
 80288e8:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80288ec:	f000 80a2 	beq.w	8028a34 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x448>
 80288f0:	43db      	mvns	r3, r3
 80288f2:	783a      	ldrb	r2, [r7, #0]
 80288f4:	f897 a002 	ldrb.w	sl, [r7, #2]
 80288f8:	b2db      	uxtb	r3, r3
 80288fa:	fb02 fe03 	mul.w	lr, r2, r3
 80288fe:	fb0a fa03 	mul.w	sl, sl, r3
 8028902:	f10e 0201 	add.w	r2, lr, #1
 8028906:	eb02 221e 	add.w	r2, r2, lr, lsr #8
 802890a:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 802890e:	703a      	strb	r2, [r7, #0]
 8028910:	787a      	ldrb	r2, [r7, #1]
 8028912:	fb02 f003 	mul.w	r0, r2, r3
 8028916:	f10a 0301 	add.w	r3, sl, #1
 802891a:	1c42      	adds	r2, r0, #1
 802891c:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 8028920:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 8028924:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 8028928:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 802892c:	707a      	strb	r2, [r7, #1]
 802892e:	f887 c002 	strb.w	ip, [r7, #2]
 8028932:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8028934:	3703      	adds	r7, #3
 8028936:	f108 38ff 	add.w	r8, r8, #4294967295
 802893a:	441d      	add	r5, r3
 802893c:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 802893e:	441e      	add	r6, r3
 8028940:	e6ab      	b.n	802869a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 8028942:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8028944:	441d      	add	r5, r3
 8028946:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8028948:	441e      	add	r6, r3
 802894a:	9b06      	ldr	r3, [sp, #24]
 802894c:	3b01      	subs	r3, #1
 802894e:	9306      	str	r3, [sp, #24]
 8028950:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8028952:	3303      	adds	r3, #3
 8028954:	9309      	str	r3, [sp, #36]	; 0x24
 8028956:	e680      	b.n	802865a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8028958:	d024      	beq.n	80289a4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b8>
 802895a:	9b06      	ldr	r3, [sp, #24]
 802895c:	982d      	ldr	r0, [sp, #180]	; 0xb4
 802895e:	3b01      	subs	r3, #1
 8028960:	fb00 5003 	mla	r0, r0, r3, r5
 8028964:	1400      	asrs	r0, r0, #16
 8028966:	f53f ae95 	bmi.w	8028694 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 802896a:	3901      	subs	r1, #1
 802896c:	4288      	cmp	r0, r1
 802896e:	f6bf ae91 	bge.w	8028694 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 8028972:	992e      	ldr	r1, [sp, #184]	; 0xb8
 8028974:	fb01 6303 	mla	r3, r1, r3, r6
 8028978:	141b      	asrs	r3, r3, #16
 802897a:	f53f ae8b 	bmi.w	8028694 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 802897e:	3a01      	subs	r2, #1
 8028980:	4293      	cmp	r3, r2
 8028982:	f6bf ae87 	bge.w	8028694 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 8028986:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8028988:	f8dd b018 	ldr.w	fp, [sp, #24]
 802898c:	1cdf      	adds	r7, r3, #3
 802898e:	f1bb 0f00 	cmp.w	fp, #0
 8028992:	dc6e      	bgt.n	8028a72 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x486>
 8028994:	9b06      	ldr	r3, [sp, #24]
 8028996:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 802899a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802899c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80289a0:	4423      	add	r3, r4
 80289a2:	9309      	str	r3, [sp, #36]	; 0x24
 80289a4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80289a6:	2b00      	cmp	r3, #0
 80289a8:	f340 81b0 	ble.w	8028d0c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x720>
 80289ac:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80289b0:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80289b2:	ee3a aa2b 	vadd.f32	s20, s20, s23
 80289b6:	ee79 9a8b 	vadd.f32	s19, s19, s22
 80289ba:	eef0 6a48 	vmov.f32	s13, s16
 80289be:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 80289c2:	ee39 9a2a 	vadd.f32	s18, s18, s21
 80289c6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80289ca:	ee16 5a90 	vmov	r5, s13
 80289ce:	eef0 6a68 	vmov.f32	s13, s17
 80289d2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80289d6:	ee16 6a90 	vmov	r6, s13
 80289da:	ee29 7aa7 	vmul.f32	s14, s19, s15
 80289de:	ee69 7a27 	vmul.f32	s15, s18, s15
 80289e2:	ee37 8a48 	vsub.f32	s16, s14, s16
 80289e6:	ee77 8ae8 	vsub.f32	s17, s15, s17
 80289ea:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 80289ee:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 80289f2:	ee18 2a10 	vmov	r2, s16
 80289f6:	eeb0 8a47 	vmov.f32	s16, s14
 80289fa:	fb92 f3f3 	sdiv	r3, r2, r3
 80289fe:	ee18 2a90 	vmov	r2, s17
 8028a02:	932d      	str	r3, [sp, #180]	; 0xb4
 8028a04:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8028a06:	eef0 8a67 	vmov.f32	s17, s15
 8028a0a:	fb92 f3f3 	sdiv	r3, r2, r3
 8028a0e:	932e      	str	r3, [sp, #184]	; 0xb8
 8028a10:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8028a12:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8028a14:	3b01      	subs	r3, #1
 8028a16:	9315      	str	r3, [sp, #84]	; 0x54
 8028a18:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8028a1a:	bf08      	it	eq
 8028a1c:	4613      	moveq	r3, r2
 8028a1e:	9306      	str	r3, [sp, #24]
 8028a20:	e60d      	b.n	802863e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 8028a22:	2800      	cmp	r0, #0
 8028a24:	f43f ae7d 	beq.w	8028722 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 8028a28:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8028a2c:	9307      	str	r3, [sp, #28]
 8028a2e:	0e1b      	lsrs	r3, r3, #24
 8028a30:	930f      	str	r3, [sp, #60]	; 0x3c
 8028a32:	e676      	b.n	8028722 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 8028a34:	7038      	strb	r0, [r7, #0]
 8028a36:	7079      	strb	r1, [r7, #1]
 8028a38:	e779      	b.n	802892e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 8028a3a:	f112 0901 	adds.w	r9, r2, #1
 8028a3e:	f53f af78 	bmi.w	8028932 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x346>
 8028a42:	454b      	cmp	r3, r9
 8028a44:	f6ff af75 	blt.w	8028932 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x346>
 8028a48:	f11c 0901 	adds.w	r9, ip, #1
 8028a4c:	f53f af71 	bmi.w	8028932 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x346>
 8028a50:	45ce      	cmp	lr, r9
 8028a52:	f6ff af6e 	blt.w	8028932 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x346>
 8028a56:	b21b      	sxth	r3, r3
 8028a58:	e9cd 2c01 	strd	r2, ip, [sp, #4]
 8028a5c:	fa0f f28e 	sxth.w	r2, lr
 8028a60:	e9cd 1003 	strd	r1, r0, [sp, #12]
 8028a64:	9200      	str	r2, [sp, #0]
 8028a66:	4639      	mov	r1, r7
 8028a68:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8028a6a:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8028a6c:	f7ff fc7c 	bl	8028368 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>
 8028a70:	e75f      	b.n	8028932 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x346>
 8028a72:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8028a74:	1429      	asrs	r1, r5, #16
 8028a76:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8028a78:	f3c5 3203 	ubfx	r2, r5, #12, #4
 8028a7c:	f9b3 c008 	ldrsh.w	ip, [r3, #8]
 8028a80:	1433      	asrs	r3, r6, #16
 8028a82:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8028a86:	fb0c 1303 	mla	r3, ip, r3, r1
 8028a8a:	990e      	ldr	r1, [sp, #56]	; 0x38
 8028a8c:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8028a90:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8028a94:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 8028a98:	2a00      	cmp	r2, #0
 8028a9a:	f000 8129 	beq.w	8028cf0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x704>
 8028a9e:	684c      	ldr	r4, [r1, #4]
 8028aa0:	940c      	str	r4, [sp, #48]	; 0x30
 8028aa2:	0e24      	lsrs	r4, r4, #24
 8028aa4:	9413      	str	r4, [sp, #76]	; 0x4c
 8028aa6:	b198      	cbz	r0, 8028ad0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 8028aa8:	f10c 4c80 	add.w	ip, ip, #1073741824	; 0x40000000
 8028aac:	f10c 3cff 	add.w	ip, ip, #4294967295
 8028ab0:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8028ab4:	f10c 0c04 	add.w	ip, ip, #4
 8028ab8:	eb01 080c 	add.w	r8, r1, ip
 8028abc:	f851 100c 	ldr.w	r1, [r1, ip]
 8028ac0:	9108      	str	r1, [sp, #32]
 8028ac2:	0e09      	lsrs	r1, r1, #24
 8028ac4:	9110      	str	r1, [sp, #64]	; 0x40
 8028ac6:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8028aca:	910d      	str	r1, [sp, #52]	; 0x34
 8028acc:	0e09      	lsrs	r1, r1, #24
 8028ace:	9114      	str	r1, [sp, #80]	; 0x50
 8028ad0:	b292      	uxth	r2, r2
 8028ad2:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8028ad4:	b280      	uxth	r0, r0
 8028ad6:	fb02 f900 	mul.w	r9, r2, r0
 8028ada:	0112      	lsls	r2, r2, #4
 8028adc:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8028ae0:	eba2 0809 	sub.w	r8, r2, r9
 8028ae4:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 8028ae8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8028aea:	b280      	uxth	r0, r0
 8028aec:	fa1f f888 	uxth.w	r8, r8
 8028af0:	1a09      	subs	r1, r1, r0
 8028af2:	fb08 f202 	mul.w	r2, r8, r2
 8028af6:	b289      	uxth	r1, r1
 8028af8:	fb01 220e 	mla	r2, r1, lr, r2
 8028afc:	fb00 2204 	mla	r2, r0, r4, r2
 8028b00:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8028b02:	fb09 2204 	mla	r2, r9, r4, r2
 8028b06:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8028b0a:	2a00      	cmp	r2, #0
 8028b0c:	f000 80e8 	beq.w	8028ce0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6f4>
 8028b10:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8028b14:	d01b      	beq.n	8028b4e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x562>
 8028b16:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8028b1a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8028b1e:	fb0e fa0a 	mul.w	sl, lr, sl
 8028b22:	fb0e fe03 	mul.w	lr, lr, r3
 8028b26:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8028b2a:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8028b2e:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8028b32:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8028b36:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8028b3a:	4453      	add	r3, sl
 8028b3c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8028b40:	0a1b      	lsrs	r3, r3, #8
 8028b42:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8028b46:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8028b4a:	ea43 030c 	orr.w	r3, r3, ip
 8028b4e:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8028b50:	2cff      	cmp	r4, #255	; 0xff
 8028b52:	d021      	beq.n	8028b98 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5ac>
 8028b54:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8028b56:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8028b5a:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8028b5c:	fb04 fc0c 	mul.w	ip, r4, ip
 8028b60:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8028b62:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8028b66:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8028b6a:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8028b6c:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8028b70:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8028b74:	fb04 fa0a 	mul.w	sl, r4, sl
 8028b78:	44e6      	add	lr, ip
 8028b7a:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8028b7e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8028b82:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8028b86:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8028b8a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8028b8e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8028b92:	ea4e 040a 	orr.w	r4, lr, sl
 8028b96:	940c      	str	r4, [sp, #48]	; 0x30
 8028b98:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8028b9a:	2cff      	cmp	r4, #255	; 0xff
 8028b9c:	d021      	beq.n	8028be2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5f6>
 8028b9e:	9c08      	ldr	r4, [sp, #32]
 8028ba0:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8028ba4:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8028ba6:	fb04 fc0c 	mul.w	ip, r4, ip
 8028baa:	9c08      	ldr	r4, [sp, #32]
 8028bac:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 8028bb0:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8028bb2:	fb04 fa0e 	mul.w	sl, r4, lr
 8028bb6:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8028bba:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8028bbe:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8028bc2:	44e6      	add	lr, ip
 8028bc4:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8028bc8:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8028bcc:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8028bd0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8028bd4:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8028bd8:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8028bdc:	ea4e 040a 	orr.w	r4, lr, sl
 8028be0:	9408      	str	r4, [sp, #32]
 8028be2:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8028be4:	2cff      	cmp	r4, #255	; 0xff
 8028be6:	d021      	beq.n	8028c2c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x640>
 8028be8:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8028bea:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8028bee:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8028bf0:	fb04 fc0c 	mul.w	ip, r4, ip
 8028bf4:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8028bf6:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8028bfa:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8028bfe:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8028c00:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8028c04:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8028c08:	fb04 fa0a 	mul.w	sl, r4, sl
 8028c0c:	44e6      	add	lr, ip
 8028c0e:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8028c12:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8028c16:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8028c1a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8028c1e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8028c22:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8028c26:	ea4e 040a 	orr.w	r4, lr, sl
 8028c2a:	940d      	str	r4, [sp, #52]	; 0x34
 8028c2c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8028c2e:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 8028c32:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8028c36:	2aff      	cmp	r2, #255	; 0xff
 8028c38:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8028c3c:	9c08      	ldr	r4, [sp, #32]
 8028c3e:	fb08 fc0c 	mul.w	ip, r8, ip
 8028c42:	fb01 cc0e 	mla	ip, r1, lr, ip
 8028c46:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8028c4a:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8028c4c:	fb00 cc0e 	mla	ip, r0, lr, ip
 8028c50:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8028c54:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8028c56:	fb09 cc0e 	mla	ip, r9, lr, ip
 8028c5a:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 8028c5e:	fb08 f80e 	mul.w	r8, r8, lr
 8028c62:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8028c66:	fb01 8303 	mla	r3, r1, r3, r8
 8028c6a:	9908      	ldr	r1, [sp, #32]
 8028c6c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8028c70:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 8028c74:	990d      	ldr	r1, [sp, #52]	; 0x34
 8028c76:	fb00 330a 	mla	r3, r0, sl, r3
 8028c7a:	f401 4e7f 	and.w	lr, r1, #65280	; 0xff00
 8028c7e:	fb09 3e0e 	mla	lr, r9, lr, r3
 8028c82:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8028c86:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8028c8a:	ea4c 0c0e 	orr.w	ip, ip, lr
 8028c8e:	fa5f f08c 	uxtb.w	r0, ip
 8028c92:	f3cc 2107 	ubfx	r1, ip, #8, #8
 8028c96:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8028c9a:	d032      	beq.n	8028d02 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x716>
 8028c9c:	43d2      	mvns	r2, r2
 8028c9e:	f817 ec03 	ldrb.w	lr, [r7, #-3]
 8028ca2:	b2d2      	uxtb	r2, r2
 8028ca4:	fb0e fe02 	mul.w	lr, lr, r2
 8028ca8:	f10e 0301 	add.w	r3, lr, #1
 8028cac:	eb03 231e 	add.w	r3, r3, lr, lsr #8
 8028cb0:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 8028cb4:	f817 0c02 	ldrb.w	r0, [r7, #-2]
 8028cb8:	4350      	muls	r0, r2
 8028cba:	f807 3c03 	strb.w	r3, [r7, #-3]
 8028cbe:	1c43      	adds	r3, r0, #1
 8028cc0:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8028cc4:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8028cc8:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8028ccc:	4353      	muls	r3, r2
 8028cce:	f807 1c02 	strb.w	r1, [r7, #-2]
 8028cd2:	1c5a      	adds	r2, r3, #1
 8028cd4:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8028cd8:	eb0c 2c12 	add.w	ip, ip, r2, lsr #8
 8028cdc:	f807 cc01 	strb.w	ip, [r7, #-1]
 8028ce0:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8028ce2:	3703      	adds	r7, #3
 8028ce4:	f10b 3bff 	add.w	fp, fp, #4294967295
 8028ce8:	441d      	add	r5, r3
 8028cea:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8028cec:	441e      	add	r6, r3
 8028cee:	e64e      	b.n	802898e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a2>
 8028cf0:	2800      	cmp	r0, #0
 8028cf2:	f43f aeed 	beq.w	8028ad0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 8028cf6:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 8028cfa:	9108      	str	r1, [sp, #32]
 8028cfc:	0e09      	lsrs	r1, r1, #24
 8028cfe:	9110      	str	r1, [sp, #64]	; 0x40
 8028d00:	e6e6      	b.n	8028ad0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 8028d02:	f807 0c03 	strb.w	r0, [r7, #-3]
 8028d06:	f807 1c02 	strb.w	r1, [r7, #-2]
 8028d0a:	e7e7      	b.n	8028cdc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6f0>
 8028d0c:	b019      	add	sp, #100	; 0x64
 8028d0e:	ecbd 8b08 	vpop	{d8-d11}
 8028d12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08028d18 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>:
 8028d18:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028d1c:	e9dd 0c0c 	ldrd	r0, ip, [sp, #48]	; 0x30
 8028d20:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 8028d24:	2800      	cmp	r0, #0
 8028d26:	f9bd 902c 	ldrsh.w	r9, [sp, #44]	; 0x2c
 8028d2a:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
 8028d2e:	fb0c 0e03 	mla	lr, ip, r3, r0
 8028d32:	f89d 503c 	ldrb.w	r5, [sp, #60]	; 0x3c
 8028d36:	db6b      	blt.n	8028e10 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf8>
 8028d38:	4580      	cmp	r8, r0
 8028d3a:	dd69      	ble.n	8028e10 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf8>
 8028d3c:	f1bc 0f00 	cmp.w	ip, #0
 8028d40:	db66      	blt.n	8028e10 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf8>
 8028d42:	45e1      	cmp	r9, ip
 8028d44:	dd64      	ble.n	8028e10 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf8>
 8028d46:	ea4f 045e 	mov.w	r4, lr, lsr #1
 8028d4a:	f01e 0f01 	tst.w	lr, #1
 8028d4e:	5d16      	ldrb	r6, [r2, r4]
 8028d50:	bf0c      	ite	eq
 8028d52:	f006 060f 	andeq.w	r6, r6, #15
 8028d56:	1136      	asrne	r6, r6, #4
 8028d58:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 8028d5c:	b2f6      	uxtb	r6, r6
 8028d5e:	f110 0a01 	adds.w	sl, r0, #1
 8028d62:	d457      	bmi.n	8028e14 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xfc>
 8028d64:	45d0      	cmp	r8, sl
 8028d66:	dd55      	ble.n	8028e14 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xfc>
 8028d68:	f1bc 0f00 	cmp.w	ip, #0
 8028d6c:	db52      	blt.n	8028e14 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xfc>
 8028d6e:	45e1      	cmp	r9, ip
 8028d70:	dd50      	ble.n	8028e14 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xfc>
 8028d72:	2f00      	cmp	r7, #0
 8028d74:	f000 80ac 	beq.w	8028ed0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1b8>
 8028d78:	f10e 0b01 	add.w	fp, lr, #1
 8028d7c:	ea4f 045b 	mov.w	r4, fp, lsr #1
 8028d80:	f01b 0f01 	tst.w	fp, #1
 8028d84:	5d14      	ldrb	r4, [r2, r4]
 8028d86:	bf0c      	ite	eq
 8028d88:	f004 040f 	andeq.w	r4, r4, #15
 8028d8c:	1124      	asrne	r4, r4, #4
 8028d8e:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 8028d92:	b2e4      	uxtb	r4, r4
 8028d94:	2d00      	cmp	r5, #0
 8028d96:	f000 8096 	beq.w	8028ec6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1ae>
 8028d9a:	2800      	cmp	r0, #0
 8028d9c:	f10c 0c01 	add.w	ip, ip, #1
 8028da0:	db3c      	blt.n	8028e1c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x104>
 8028da2:	4580      	cmp	r8, r0
 8028da4:	dd3a      	ble.n	8028e1c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x104>
 8028da6:	f1bc 0f00 	cmp.w	ip, #0
 8028daa:	db37      	blt.n	8028e1c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x104>
 8028dac:	45e1      	cmp	r9, ip
 8028dae:	dd35      	ble.n	8028e1c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x104>
 8028db0:	eb03 0b0e 	add.w	fp, r3, lr
 8028db4:	ea4f 005b 	mov.w	r0, fp, lsr #1
 8028db8:	f01b 0f01 	tst.w	fp, #1
 8028dbc:	5c10      	ldrb	r0, [r2, r0]
 8028dbe:	bf0c      	ite	eq
 8028dc0:	f000 000f 	andeq.w	r0, r0, #15
 8028dc4:	1100      	asrne	r0, r0, #4
 8028dc6:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8028dca:	b2c0      	uxtb	r0, r0
 8028dcc:	f1ba 0f00 	cmp.w	sl, #0
 8028dd0:	db26      	blt.n	8028e20 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x108>
 8028dd2:	45d0      	cmp	r8, sl
 8028dd4:	dd24      	ble.n	8028e20 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x108>
 8028dd6:	f1bc 0f00 	cmp.w	ip, #0
 8028dda:	db21      	blt.n	8028e20 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x108>
 8028ddc:	45e1      	cmp	r9, ip
 8028dde:	dd1f      	ble.n	8028e20 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x108>
 8028de0:	b307      	cbz	r7, 8028e24 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x10c>
 8028de2:	3301      	adds	r3, #1
 8028de4:	449e      	add	lr, r3
 8028de6:	ea4f 035e 	mov.w	r3, lr, lsr #1
 8028dea:	f01e 0f01 	tst.w	lr, #1
 8028dee:	5cd3      	ldrb	r3, [r2, r3]
 8028df0:	bf0c      	ite	eq
 8028df2:	f003 030f 	andeq.w	r3, r3, #15
 8028df6:	111b      	asrne	r3, r3, #4
 8028df8:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8028dfc:	b2db      	uxtb	r3, r3
 8028dfe:	2f0f      	cmp	r7, #15
 8028e00:	d911      	bls.n	8028e26 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x10e>
 8028e02:	4b35      	ldr	r3, [pc, #212]	; (8028ed8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1c0>)
 8028e04:	f240 1157 	movw	r1, #343	; 0x157
 8028e08:	4a34      	ldr	r2, [pc, #208]	; (8028edc <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1c4>)
 8028e0a:	4835      	ldr	r0, [pc, #212]	; (8028ee0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1c8>)
 8028e0c:	f002 fd34 	bl	802b878 <__assert_func>
 8028e10:	2600      	movs	r6, #0
 8028e12:	e7a4      	b.n	8028d5e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x46>
 8028e14:	2400      	movs	r4, #0
 8028e16:	e7bd      	b.n	8028d94 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x7c>
 8028e18:	463c      	mov	r4, r7
 8028e1a:	e7be      	b.n	8028d9a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x82>
 8028e1c:	2000      	movs	r0, #0
 8028e1e:	e7d5      	b.n	8028dcc <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xb4>
 8028e20:	2300      	movs	r3, #0
 8028e22:	e7ec      	b.n	8028dfe <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xe6>
 8028e24:	463b      	mov	r3, r7
 8028e26:	2d0f      	cmp	r5, #15
 8028e28:	d8eb      	bhi.n	8028e02 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xea>
 8028e2a:	b2bf      	uxth	r7, r7
 8028e2c:	b2ad      	uxth	r5, r5
 8028e2e:	fb07 f205 	mul.w	r2, r7, r5
 8028e32:	013f      	lsls	r7, r7, #4
 8028e34:	ebc2 1505 	rsb	r5, r2, r5, lsl #4
 8028e38:	f5c7 7c80 	rsb	ip, r7, #256	; 0x100
 8028e3c:	1abf      	subs	r7, r7, r2
 8028e3e:	b2ad      	uxth	r5, r5
 8028e40:	b2bf      	uxth	r7, r7
 8028e42:	ebac 0c05 	sub.w	ip, ip, r5
 8028e46:	437c      	muls	r4, r7
 8028e48:	fa1f fc8c 	uxth.w	ip, ip
 8028e4c:	fb06 440c 	mla	r4, r6, ip, r4
 8028e50:	fb05 4400 	mla	r4, r5, r0, r4
 8028e54:	fb02 4203 	mla	r2, r2, r3, r4
 8028e58:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8028e5c:	b38a      	cbz	r2, 8028ec2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1aa>
 8028e5e:	4b21      	ldr	r3, [pc, #132]	; (8028ee4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1cc>)
 8028e60:	681c      	ldr	r4, [r3, #0]
 8028e62:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 8028e66:	b2e5      	uxtb	r5, r4
 8028e68:	4353      	muls	r3, r2
 8028e6a:	1c5a      	adds	r2, r3, #1
 8028e6c:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8028e70:	1212      	asrs	r2, r2, #8
 8028e72:	b290      	uxth	r0, r2
 8028e74:	43d2      	mvns	r2, r2
 8028e76:	fb15 f500 	smulbb	r5, r5, r0
 8028e7a:	b2d3      	uxtb	r3, r2
 8028e7c:	780a      	ldrb	r2, [r1, #0]
 8028e7e:	fb02 5203 	mla	r2, r2, r3, r5
 8028e82:	b292      	uxth	r2, r2
 8028e84:	1c55      	adds	r5, r2, #1
 8028e86:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 8028e8a:	784d      	ldrb	r5, [r1, #1]
 8028e8c:	fb15 f503 	smulbb	r5, r5, r3
 8028e90:	1212      	asrs	r2, r2, #8
 8028e92:	700a      	strb	r2, [r1, #0]
 8028e94:	f3c4 2207 	ubfx	r2, r4, #8, #8
 8028e98:	f3c4 4407 	ubfx	r4, r4, #16, #8
 8028e9c:	fb02 5200 	mla	r2, r2, r0, r5
 8028ea0:	b292      	uxth	r2, r2
 8028ea2:	1c55      	adds	r5, r2, #1
 8028ea4:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 8028ea8:	1212      	asrs	r2, r2, #8
 8028eaa:	704a      	strb	r2, [r1, #1]
 8028eac:	788a      	ldrb	r2, [r1, #2]
 8028eae:	fb12 f303 	smulbb	r3, r2, r3
 8028eb2:	fb04 3300 	mla	r3, r4, r0, r3
 8028eb6:	b29b      	uxth	r3, r3
 8028eb8:	1c5a      	adds	r2, r3, #1
 8028eba:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8028ebe:	121b      	asrs	r3, r3, #8
 8028ec0:	708b      	strb	r3, [r1, #2]
 8028ec2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8028ec6:	2f0f      	cmp	r7, #15
 8028ec8:	d89b      	bhi.n	8028e02 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xea>
 8028eca:	462b      	mov	r3, r5
 8028ecc:	4628      	mov	r0, r5
 8028ece:	e7ac      	b.n	8028e2a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x112>
 8028ed0:	2d00      	cmp	r5, #0
 8028ed2:	d1a1      	bne.n	8028e18 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x100>
 8028ed4:	462c      	mov	r4, r5
 8028ed6:	e7f8      	b.n	8028eca <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1b2>
 8028ed8:	080312ae 	.word	0x080312ae
 8028edc:	080317a6 	.word	0x080317a6
 8028ee0:	08031377 	.word	0x08031377
 8028ee4:	2400c8e4 	.word	0x2400c8e4

08028ee8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8028ee8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028eec:	ed2d 8b08 	vpush	{d8-d11}
 8028ef0:	b097      	sub	sp, #92	; 0x5c
 8028ef2:	eeb0 aa40 	vmov.f32	s20, s0
 8028ef6:	eef0 9a60 	vmov.f32	s19, s1
 8028efa:	9214      	str	r2, [sp, #80]	; 0x50
 8028efc:	eeb0 9a41 	vmov.f32	s18, s2
 8028f00:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8028f02:	eeb0 8a62 	vmov.f32	s16, s5
 8028f06:	9309      	str	r3, [sp, #36]	; 0x24
 8028f08:	eef0 8a43 	vmov.f32	s17, s6
 8028f0c:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
 8028f10:	eef0 ba44 	vmov.f32	s23, s8
 8028f14:	9015      	str	r0, [sp, #84]	; 0x54
 8028f16:	eeb0 ba64 	vmov.f32	s22, s9
 8028f1a:	6850      	ldr	r0, [r2, #4]
 8028f1c:	eef0 aa45 	vmov.f32	s21, s10
 8028f20:	910c      	str	r1, [sp, #48]	; 0x30
 8028f22:	930e      	str	r3, [sp, #56]	; 0x38
 8028f24:	6812      	ldr	r2, [r2, #0]
 8028f26:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 8028f2a:	e9dd 5629 	ldrd	r5, r6, [sp, #164]	; 0xa4
 8028f2e:	fb00 1303 	mla	r3, r0, r3, r1
 8028f32:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8028f36:	eb02 0a03 	add.w	sl, r2, r3
 8028f3a:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8028f3c:	689b      	ldr	r3, [r3, #8]
 8028f3e:	3301      	adds	r3, #1
 8028f40:	f023 0301 	bic.w	r3, r3, #1
 8028f44:	930f      	str	r3, [sp, #60]	; 0x3c
 8028f46:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8028f48:	681f      	ldr	r7, [r3, #0]
 8028f4a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8028f4c:	2b00      	cmp	r3, #0
 8028f4e:	dc03      	bgt.n	8028f58 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8028f50:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8028f52:	2b00      	cmp	r3, #0
 8028f54:	f340 8247 	ble.w	80293e6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fe>
 8028f58:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8028f5a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8028f5e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8028f62:	1e48      	subs	r0, r1, #1
 8028f64:	f102 3cff 	add.w	ip, r2, #4294967295
 8028f68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8028f6a:	2b00      	cmp	r3, #0
 8028f6c:	f340 80e5 	ble.w	802913a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 8028f70:	ea5f 4e25 	movs.w	lr, r5, asr #16
 8028f74:	ea4f 4326 	mov.w	r3, r6, asr #16
 8028f78:	d406      	bmi.n	8028f88 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8028f7a:	4586      	cmp	lr, r0
 8028f7c:	da04      	bge.n	8028f88 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8028f7e:	2b00      	cmp	r3, #0
 8028f80:	db02      	blt.n	8028f88 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8028f82:	4563      	cmp	r3, ip
 8028f84:	f2c0 80da 	blt.w	802913c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 8028f88:	f11e 0e01 	adds.w	lr, lr, #1
 8028f8c:	f100 80cb 	bmi.w	8029126 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23e>
 8028f90:	4571      	cmp	r1, lr
 8028f92:	f2c0 80c8 	blt.w	8029126 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23e>
 8028f96:	3301      	adds	r3, #1
 8028f98:	f100 80c5 	bmi.w	8029126 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23e>
 8028f9c:	429a      	cmp	r2, r3
 8028f9e:	f2c0 80c2 	blt.w	8029126 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23e>
 8028fa2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8028fa4:	46d0      	mov	r8, sl
 8028fa6:	f9bd 903c 	ldrsh.w	r9, [sp, #60]	; 0x3c
 8028faa:	930d      	str	r3, [sp, #52]	; 0x34
 8028fac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8028fae:	2b00      	cmp	r3, #0
 8028fb0:	f340 80e3 	ble.w	802917a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x292>
 8028fb4:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8028fb6:	1430      	asrs	r0, r6, #16
 8028fb8:	f3c5 3203 	ubfx	r2, r5, #12, #4
 8028fbc:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8028fc0:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 8028fc4:	142b      	asrs	r3, r5, #16
 8028fc6:	f100 812e 	bmi.w	8029226 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 8028fca:	f10c 3bff 	add.w	fp, ip, #4294967295
 8028fce:	455b      	cmp	r3, fp
 8028fd0:	f280 8129 	bge.w	8029226 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 8028fd4:	2800      	cmp	r0, #0
 8028fd6:	f2c0 8126 	blt.w	8029226 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 8028fda:	f10e 3bff 	add.w	fp, lr, #4294967295
 8028fde:	4558      	cmp	r0, fp
 8028fe0:	f280 8121 	bge.w	8029226 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 8028fe4:	fb00 3309 	mla	r3, r0, r9, r3
 8028fe8:	0858      	lsrs	r0, r3, #1
 8028fea:	07dc      	lsls	r4, r3, #31
 8028fec:	f817 c000 	ldrb.w	ip, [r7, r0]
 8028ff0:	bf54      	ite	pl
 8028ff2:	f00c 0c0f 	andpl.w	ip, ip, #15
 8028ff6:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8028ffa:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8028ffe:	fa5f fc8c 	uxtb.w	ip, ip
 8029002:	2a00      	cmp	r2, #0
 8029004:	f000 80fe 	beq.w	8029204 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 8029008:	1c58      	adds	r0, r3, #1
 802900a:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 802900e:	07c0      	lsls	r0, r0, #31
 8029010:	f817 e00e 	ldrb.w	lr, [r7, lr]
 8029014:	bf54      	ite	pl
 8029016:	f00e 0e0f 	andpl.w	lr, lr, #15
 802901a:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 802901e:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 8029022:	fa5f f08e 	uxtb.w	r0, lr
 8029026:	9010      	str	r0, [sp, #64]	; 0x40
 8029028:	b1d9      	cbz	r1, 8029062 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17a>
 802902a:	444b      	add	r3, r9
 802902c:	0858      	lsrs	r0, r3, #1
 802902e:	07dc      	lsls	r4, r3, #31
 8029030:	f103 0301 	add.w	r3, r3, #1
 8029034:	5c38      	ldrb	r0, [r7, r0]
 8029036:	bf54      	ite	pl
 8029038:	f000 000f 	andpl.w	r0, r0, #15
 802903c:	1100      	asrmi	r0, r0, #4
 802903e:	07dc      	lsls	r4, r3, #31
 8029040:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8029044:	b2c0      	uxtb	r0, r0
 8029046:	900a      	str	r0, [sp, #40]	; 0x28
 8029048:	ea4f 0053 	mov.w	r0, r3, lsr #1
 802904c:	f817 e000 	ldrb.w	lr, [r7, r0]
 8029050:	bf54      	ite	pl
 8029052:	f00e 030f 	andpl.w	r3, lr, #15
 8029056:	ea4f 132e 	movmi.w	r3, lr, asr #4
 802905a:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 802905e:	b2db      	uxtb	r3, r3
 8029060:	9311      	str	r3, [sp, #68]	; 0x44
 8029062:	b292      	uxth	r2, r2
 8029064:	b289      	uxth	r1, r1
 8029066:	0113      	lsls	r3, r2, #4
 8029068:	fb02 f001 	mul.w	r0, r2, r1
 802906c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 802906e:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 8029072:	ebc0 1101 	rsb	r1, r0, r1, lsl #4
 8029076:	1a1b      	subs	r3, r3, r0
 8029078:	b289      	uxth	r1, r1
 802907a:	b29b      	uxth	r3, r3
 802907c:	ebae 0e01 	sub.w	lr, lr, r1
 8029080:	4353      	muls	r3, r2
 8029082:	fa1f fe8e 	uxth.w	lr, lr
 8029086:	fb0c 320e 	mla	r2, ip, lr, r3
 802908a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802908c:	fb01 2203 	mla	r2, r1, r3, r2
 8029090:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8029092:	fb00 2203 	mla	r2, r0, r3, r2
 8029096:	f3c2 2207 	ubfx	r2, r2, #8, #8
 802909a:	2a00      	cmp	r2, #0
 802909c:	d039      	beq.n	8029112 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 802909e:	4bc7      	ldr	r3, [pc, #796]	; (80293bc <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d4>)
 80290a0:	6819      	ldr	r1, [r3, #0]
 80290a2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80290a4:	fa5f fc81 	uxtb.w	ip, r1
 80290a8:	435a      	muls	r2, r3
 80290aa:	1c53      	adds	r3, r2, #1
 80290ac:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 80290b0:	1212      	asrs	r2, r2, #8
 80290b2:	b290      	uxth	r0, r2
 80290b4:	43d2      	mvns	r2, r2
 80290b6:	fb1c fc00 	smulbb	ip, ip, r0
 80290ba:	b2d3      	uxtb	r3, r2
 80290bc:	f898 2000 	ldrb.w	r2, [r8]
 80290c0:	fb02 c203 	mla	r2, r2, r3, ip
 80290c4:	b292      	uxth	r2, r2
 80290c6:	f102 0c01 	add.w	ip, r2, #1
 80290ca:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 80290ce:	f898 c001 	ldrb.w	ip, [r8, #1]
 80290d2:	fb1c fc03 	smulbb	ip, ip, r3
 80290d6:	1212      	asrs	r2, r2, #8
 80290d8:	f888 2000 	strb.w	r2, [r8]
 80290dc:	f3c1 2207 	ubfx	r2, r1, #8, #8
 80290e0:	f3c1 4107 	ubfx	r1, r1, #16, #8
 80290e4:	fb02 c200 	mla	r2, r2, r0, ip
 80290e8:	b292      	uxth	r2, r2
 80290ea:	f102 0c01 	add.w	ip, r2, #1
 80290ee:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 80290f2:	1212      	asrs	r2, r2, #8
 80290f4:	f888 2001 	strb.w	r2, [r8, #1]
 80290f8:	f898 2002 	ldrb.w	r2, [r8, #2]
 80290fc:	fb12 f303 	smulbb	r3, r2, r3
 8029100:	fb01 3300 	mla	r3, r1, r0, r3
 8029104:	b29b      	uxth	r3, r3
 8029106:	1c5a      	adds	r2, r3, #1
 8029108:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 802910c:	121b      	asrs	r3, r3, #8
 802910e:	f888 3002 	strb.w	r3, [r8, #2]
 8029112:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8029114:	f108 0803 	add.w	r8, r8, #3
 8029118:	441d      	add	r5, r3
 802911a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802911c:	441e      	add	r6, r3
 802911e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8029120:	3b01      	subs	r3, #1
 8029122:	930d      	str	r3, [sp, #52]	; 0x34
 8029124:	e742      	b.n	8028fac <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc4>
 8029126:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8029128:	f10a 0a03 	add.w	sl, sl, #3
 802912c:	441d      	add	r5, r3
 802912e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8029130:	441e      	add	r6, r3
 8029132:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8029134:	3b01      	subs	r3, #1
 8029136:	9309      	str	r3, [sp, #36]	; 0x24
 8029138:	e716      	b.n	8028f68 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 802913a:	d024      	beq.n	8029186 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29e>
 802913c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802913e:	982b      	ldr	r0, [sp, #172]	; 0xac
 8029140:	3b01      	subs	r3, #1
 8029142:	fb00 5003 	mla	r0, r0, r3, r5
 8029146:	1400      	asrs	r0, r0, #16
 8029148:	f53f af2b 	bmi.w	8028fa2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 802914c:	3901      	subs	r1, #1
 802914e:	4288      	cmp	r0, r1
 8029150:	f6bf af27 	bge.w	8028fa2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 8029154:	992c      	ldr	r1, [sp, #176]	; 0xb0
 8029156:	fb01 6303 	mla	r3, r1, r3, r6
 802915a:	141b      	asrs	r3, r3, #16
 802915c:	f53f af21 	bmi.w	8028fa2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 8029160:	3a01      	subs	r2, #1
 8029162:	4293      	cmp	r3, r2
 8029164:	f6bf af1d 	bge.w	8028fa2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 8029168:	f10a 0e03 	add.w	lr, sl, #3
 802916c:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 8029170:	f9bd 903c 	ldrsh.w	r9, [sp, #60]	; 0x3c
 8029174:	f1b8 0f00 	cmp.w	r8, #0
 8029178:	dc76      	bgt.n	8029268 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x380>
 802917a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802917c:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8029180:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8029184:	44a2      	add	sl, r4
 8029186:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8029188:	2b00      	cmp	r3, #0
 802918a:	f340 812c 	ble.w	80293e6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fe>
 802918e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8029192:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8029194:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8029198:	ee79 9a8b 	vadd.f32	s19, s19, s22
 802919c:	eef0 6a48 	vmov.f32	s13, s16
 80291a0:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 80291a4:	ee39 9a2a 	vadd.f32	s18, s18, s21
 80291a8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80291ac:	ee16 5a90 	vmov	r5, s13
 80291b0:	eef0 6a68 	vmov.f32	s13, s17
 80291b4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80291b8:	ee16 6a90 	vmov	r6, s13
 80291bc:	ee29 7aa7 	vmul.f32	s14, s19, s15
 80291c0:	ee69 7a27 	vmul.f32	s15, s18, s15
 80291c4:	ee37 8a48 	vsub.f32	s16, s14, s16
 80291c8:	ee77 8ae8 	vsub.f32	s17, s15, s17
 80291cc:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 80291d0:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 80291d4:	ee18 2a10 	vmov	r2, s16
 80291d8:	eeb0 8a47 	vmov.f32	s16, s14
 80291dc:	fb92 f3f3 	sdiv	r3, r2, r3
 80291e0:	ee18 2a90 	vmov	r2, s17
 80291e4:	932b      	str	r3, [sp, #172]	; 0xac
 80291e6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80291e8:	eef0 8a67 	vmov.f32	s17, s15
 80291ec:	fb92 f3f3 	sdiv	r3, r2, r3
 80291f0:	932c      	str	r3, [sp, #176]	; 0xb0
 80291f2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80291f4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80291f6:	3b01      	subs	r3, #1
 80291f8:	930c      	str	r3, [sp, #48]	; 0x30
 80291fa:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80291fc:	bf08      	it	eq
 80291fe:	4613      	moveq	r3, r2
 8029200:	9309      	str	r3, [sp, #36]	; 0x24
 8029202:	e6a2      	b.n	8028f4a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 8029204:	2900      	cmp	r1, #0
 8029206:	f43f af2c 	beq.w	8029062 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17a>
 802920a:	eb09 0003 	add.w	r0, r9, r3
 802920e:	0843      	lsrs	r3, r0, #1
 8029210:	07c0      	lsls	r0, r0, #31
 8029212:	5cfb      	ldrb	r3, [r7, r3]
 8029214:	bf54      	ite	pl
 8029216:	f003 030f 	andpl.w	r3, r3, #15
 802921a:	111b      	asrmi	r3, r3, #4
 802921c:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8029220:	b2db      	uxtb	r3, r3
 8029222:	930a      	str	r3, [sp, #40]	; 0x28
 8029224:	e71d      	b.n	8029062 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17a>
 8029226:	f113 0b01 	adds.w	fp, r3, #1
 802922a:	f53f af72 	bmi.w	8029112 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 802922e:	45dc      	cmp	ip, fp
 8029230:	f6ff af6f 	blt.w	8029112 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 8029234:	f110 0b01 	adds.w	fp, r0, #1
 8029238:	f53f af6b 	bmi.w	8029112 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 802923c:	45de      	cmp	lr, fp
 802923e:	f6ff af68 	blt.w	8029112 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 8029242:	9302      	str	r3, [sp, #8]
 8029244:	fa0f f38e 	sxth.w	r3, lr
 8029248:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 802924a:	9301      	str	r3, [sp, #4]
 802924c:	fa0f f38c 	sxth.w	r3, ip
 8029250:	e9cd 0203 	strd	r0, r2, [sp, #12]
 8029254:	e9cd 1405 	strd	r1, r4, [sp, #20]
 8029258:	9300      	str	r3, [sp, #0]
 802925a:	463a      	mov	r2, r7
 802925c:	464b      	mov	r3, r9
 802925e:	4641      	mov	r1, r8
 8029260:	9815      	ldr	r0, [sp, #84]	; 0x54
 8029262:	f7ff fd59 	bl	8028d18 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>
 8029266:	e754      	b.n	8029112 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 8029268:	142a      	asrs	r2, r5, #16
 802926a:	f3c5 3103 	ubfx	r1, r5, #12, #4
 802926e:	1433      	asrs	r3, r6, #16
 8029270:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8029274:	fb09 2303 	mla	r3, r9, r3, r2
 8029278:	085a      	lsrs	r2, r3, #1
 802927a:	07dc      	lsls	r4, r3, #31
 802927c:	5cba      	ldrb	r2, [r7, r2]
 802927e:	bf54      	ite	pl
 8029280:	f002 020f 	andpl.w	r2, r2, #15
 8029284:	1112      	asrmi	r2, r2, #4
 8029286:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 802928a:	b2d2      	uxtb	r2, r2
 802928c:	2900      	cmp	r1, #0
 802928e:	f000 8097 	beq.w	80293c0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
 8029292:	f103 0b01 	add.w	fp, r3, #1
 8029296:	ea4f 0c5b 	mov.w	ip, fp, lsr #1
 802929a:	f01b 0f01 	tst.w	fp, #1
 802929e:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80292a2:	bf0c      	ite	eq
 80292a4:	f00c 0c0f 	andeq.w	ip, ip, #15
 80292a8:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 80292ac:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80292b0:	fa5f f48c 	uxtb.w	r4, ip
 80292b4:	9412      	str	r4, [sp, #72]	; 0x48
 80292b6:	b300      	cbz	r0, 80292fa <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x412>
 80292b8:	444b      	add	r3, r9
 80292ba:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 80292be:	07dc      	lsls	r4, r3, #31
 80292c0:	f103 0301 	add.w	r3, r3, #1
 80292c4:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80292c8:	bf54      	ite	pl
 80292ca:	f00c 0c0f 	andpl.w	ip, ip, #15
 80292ce:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 80292d2:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80292d6:	fa5f f48c 	uxtb.w	r4, ip
 80292da:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 80292de:	940b      	str	r4, [sp, #44]	; 0x2c
 80292e0:	07dc      	lsls	r4, r3, #31
 80292e2:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80292e6:	bf54      	ite	pl
 80292e8:	f00c 0c0f 	andpl.w	ip, ip, #15
 80292ec:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 80292f0:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80292f4:	fa5f f38c 	uxtb.w	r3, ip
 80292f8:	9313      	str	r3, [sp, #76]	; 0x4c
 80292fa:	b289      	uxth	r1, r1
 80292fc:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80292fe:	b280      	uxth	r0, r0
 8029300:	fb01 f300 	mul.w	r3, r1, r0
 8029304:	0109      	lsls	r1, r1, #4
 8029306:	ebc3 1000 	rsb	r0, r3, r0, lsl #4
 802930a:	f5c1 7c80 	rsb	ip, r1, #256	; 0x100
 802930e:	1ac9      	subs	r1, r1, r3
 8029310:	b280      	uxth	r0, r0
 8029312:	b289      	uxth	r1, r1
 8029314:	ebac 0c00 	sub.w	ip, ip, r0
 8029318:	4361      	muls	r1, r4
 802931a:	fa1f fc8c 	uxth.w	ip, ip
 802931e:	fb02 120c 	mla	r2, r2, ip, r1
 8029322:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8029324:	fb00 2001 	mla	r0, r0, r1, r2
 8029328:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 802932a:	fb03 0302 	mla	r3, r3, r2, r0
 802932e:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8029332:	2b00      	cmp	r3, #0
 8029334:	d039      	beq.n	80293aa <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 8029336:	4a21      	ldr	r2, [pc, #132]	; (80293bc <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d4>)
 8029338:	f81e 1c03 	ldrb.w	r1, [lr, #-3]
 802933c:	6810      	ldr	r0, [r2, #0]
 802933e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8029340:	fa5f fc80 	uxtb.w	ip, r0
 8029344:	4353      	muls	r3, r2
 8029346:	1c5a      	adds	r2, r3, #1
 8029348:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 802934c:	121b      	asrs	r3, r3, #8
 802934e:	b29a      	uxth	r2, r3
 8029350:	43db      	mvns	r3, r3
 8029352:	fb1c fc02 	smulbb	ip, ip, r2
 8029356:	b2db      	uxtb	r3, r3
 8029358:	fb01 c103 	mla	r1, r1, r3, ip
 802935c:	b289      	uxth	r1, r1
 802935e:	f101 0c01 	add.w	ip, r1, #1
 8029362:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 8029366:	f81e cc02 	ldrb.w	ip, [lr, #-2]
 802936a:	fb1c fc03 	smulbb	ip, ip, r3
 802936e:	1209      	asrs	r1, r1, #8
 8029370:	f80e 1c03 	strb.w	r1, [lr, #-3]
 8029374:	f3c0 2107 	ubfx	r1, r0, #8, #8
 8029378:	f3c0 4007 	ubfx	r0, r0, #16, #8
 802937c:	fb01 c102 	mla	r1, r1, r2, ip
 8029380:	b289      	uxth	r1, r1
 8029382:	f101 0c01 	add.w	ip, r1, #1
 8029386:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 802938a:	1209      	asrs	r1, r1, #8
 802938c:	f80e 1c02 	strb.w	r1, [lr, #-2]
 8029390:	f81e 1c01 	ldrb.w	r1, [lr, #-1]
 8029394:	fb11 f303 	smulbb	r3, r1, r3
 8029398:	fb00 3002 	mla	r0, r0, r2, r3
 802939c:	b280      	uxth	r0, r0
 802939e:	1c42      	adds	r2, r0, #1
 80293a0:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 80293a4:	1200      	asrs	r0, r0, #8
 80293a6:	f80e 0c01 	strb.w	r0, [lr, #-1]
 80293aa:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 80293ac:	f10e 0e03 	add.w	lr, lr, #3
 80293b0:	f108 38ff 	add.w	r8, r8, #4294967295
 80293b4:	441d      	add	r5, r3
 80293b6:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80293b8:	441e      	add	r6, r3
 80293ba:	e6db      	b.n	8029174 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 80293bc:	2400c8e4 	.word	0x2400c8e4
 80293c0:	2800      	cmp	r0, #0
 80293c2:	d09a      	beq.n	80292fa <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x412>
 80293c4:	444b      	add	r3, r9
 80293c6:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 80293ca:	07db      	lsls	r3, r3, #31
 80293cc:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80293d0:	bf54      	ite	pl
 80293d2:	f00c 0c0f 	andpl.w	ip, ip, #15
 80293d6:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 80293da:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80293de:	fa5f f38c 	uxtb.w	r3, ip
 80293e2:	930b      	str	r3, [sp, #44]	; 0x2c
 80293e4:	e789      	b.n	80292fa <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x412>
 80293e6:	b017      	add	sp, #92	; 0x5c
 80293e8:	ecbd 8b08 	vpop	{d8-d11}
 80293ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080293f0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>:
 80293f0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80293f4:	e9dd 0c0c 	ldrd	r0, ip, [sp, #48]	; 0x30
 80293f8:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 80293fc:	2800      	cmp	r0, #0
 80293fe:	f9bd 902c 	ldrsh.w	r9, [sp, #44]	; 0x2c
 8029402:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
 8029406:	fb0c 0e03 	mla	lr, ip, r3, r0
 802940a:	f89d 503c 	ldrb.w	r5, [sp, #60]	; 0x3c
 802940e:	db6b      	blt.n	80294e8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf8>
 8029410:	4580      	cmp	r8, r0
 8029412:	dd69      	ble.n	80294e8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf8>
 8029414:	f1bc 0f00 	cmp.w	ip, #0
 8029418:	db66      	blt.n	80294e8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf8>
 802941a:	45e1      	cmp	r9, ip
 802941c:	dd64      	ble.n	80294e8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf8>
 802941e:	ea4f 045e 	mov.w	r4, lr, lsr #1
 8029422:	f01e 0f01 	tst.w	lr, #1
 8029426:	5d16      	ldrb	r6, [r2, r4]
 8029428:	bf0c      	ite	eq
 802942a:	f006 060f 	andeq.w	r6, r6, #15
 802942e:	1136      	asrne	r6, r6, #4
 8029430:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 8029434:	b2f6      	uxtb	r6, r6
 8029436:	f110 0a01 	adds.w	sl, r0, #1
 802943a:	d457      	bmi.n	80294ec <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xfc>
 802943c:	45d0      	cmp	r8, sl
 802943e:	dd55      	ble.n	80294ec <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xfc>
 8029440:	f1bc 0f00 	cmp.w	ip, #0
 8029444:	db52      	blt.n	80294ec <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xfc>
 8029446:	45e1      	cmp	r9, ip
 8029448:	dd50      	ble.n	80294ec <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xfc>
 802944a:	2f00      	cmp	r7, #0
 802944c:	f000 80a5 	beq.w	802959a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1aa>
 8029450:	f10e 0b01 	add.w	fp, lr, #1
 8029454:	ea4f 045b 	mov.w	r4, fp, lsr #1
 8029458:	f01b 0f01 	tst.w	fp, #1
 802945c:	5d14      	ldrb	r4, [r2, r4]
 802945e:	bf0c      	ite	eq
 8029460:	f004 040f 	andeq.w	r4, r4, #15
 8029464:	1124      	asrne	r4, r4, #4
 8029466:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 802946a:	b2e4      	uxtb	r4, r4
 802946c:	2d00      	cmp	r5, #0
 802946e:	f000 808f 	beq.w	8029590 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1a0>
 8029472:	2800      	cmp	r0, #0
 8029474:	f10c 0c01 	add.w	ip, ip, #1
 8029478:	db3c      	blt.n	80294f4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x104>
 802947a:	4580      	cmp	r8, r0
 802947c:	dd3a      	ble.n	80294f4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x104>
 802947e:	f1bc 0f00 	cmp.w	ip, #0
 8029482:	db37      	blt.n	80294f4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x104>
 8029484:	45e1      	cmp	r9, ip
 8029486:	dd35      	ble.n	80294f4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x104>
 8029488:	eb03 0b0e 	add.w	fp, r3, lr
 802948c:	ea4f 005b 	mov.w	r0, fp, lsr #1
 8029490:	f01b 0f01 	tst.w	fp, #1
 8029494:	5c10      	ldrb	r0, [r2, r0]
 8029496:	bf0c      	ite	eq
 8029498:	f000 000f 	andeq.w	r0, r0, #15
 802949c:	1100      	asrne	r0, r0, #4
 802949e:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 80294a2:	b2c0      	uxtb	r0, r0
 80294a4:	f1ba 0f00 	cmp.w	sl, #0
 80294a8:	db26      	blt.n	80294f8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x108>
 80294aa:	45d0      	cmp	r8, sl
 80294ac:	dd24      	ble.n	80294f8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x108>
 80294ae:	f1bc 0f00 	cmp.w	ip, #0
 80294b2:	db21      	blt.n	80294f8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x108>
 80294b4:	45e1      	cmp	r9, ip
 80294b6:	dd1f      	ble.n	80294f8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x108>
 80294b8:	b307      	cbz	r7, 80294fc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x10c>
 80294ba:	3301      	adds	r3, #1
 80294bc:	449e      	add	lr, r3
 80294be:	ea4f 035e 	mov.w	r3, lr, lsr #1
 80294c2:	f01e 0f01 	tst.w	lr, #1
 80294c6:	5cd3      	ldrb	r3, [r2, r3]
 80294c8:	bf0c      	ite	eq
 80294ca:	f003 030f 	andeq.w	r3, r3, #15
 80294ce:	111b      	asrne	r3, r3, #4
 80294d0:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 80294d4:	b2db      	uxtb	r3, r3
 80294d6:	2f0f      	cmp	r7, #15
 80294d8:	d911      	bls.n	80294fe <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x10e>
 80294da:	4b32      	ldr	r3, [pc, #200]	; (80295a4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1b4>)
 80294dc:	f240 1157 	movw	r1, #343	; 0x157
 80294e0:	4a31      	ldr	r2, [pc, #196]	; (80295a8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1b8>)
 80294e2:	4832      	ldr	r0, [pc, #200]	; (80295ac <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1bc>)
 80294e4:	f002 f9c8 	bl	802b878 <__assert_func>
 80294e8:	2600      	movs	r6, #0
 80294ea:	e7a4      	b.n	8029436 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x46>
 80294ec:	2400      	movs	r4, #0
 80294ee:	e7bd      	b.n	802946c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x7c>
 80294f0:	463c      	mov	r4, r7
 80294f2:	e7be      	b.n	8029472 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x82>
 80294f4:	2000      	movs	r0, #0
 80294f6:	e7d5      	b.n	80294a4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xb4>
 80294f8:	2300      	movs	r3, #0
 80294fa:	e7ec      	b.n	80294d6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xe6>
 80294fc:	463b      	mov	r3, r7
 80294fe:	2d0f      	cmp	r5, #15
 8029500:	d8eb      	bhi.n	80294da <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xea>
 8029502:	b2bf      	uxth	r7, r7
 8029504:	b2ad      	uxth	r5, r5
 8029506:	fb07 f205 	mul.w	r2, r7, r5
 802950a:	013f      	lsls	r7, r7, #4
 802950c:	ebc2 1505 	rsb	r5, r2, r5, lsl #4
 8029510:	f5c7 7c80 	rsb	ip, r7, #256	; 0x100
 8029514:	1abf      	subs	r7, r7, r2
 8029516:	b2ad      	uxth	r5, r5
 8029518:	b2bf      	uxth	r7, r7
 802951a:	ebac 0c05 	sub.w	ip, ip, r5
 802951e:	437c      	muls	r4, r7
 8029520:	fa1f fc8c 	uxth.w	ip, ip
 8029524:	fb06 440c 	mla	r4, r6, ip, r4
 8029528:	fb05 4400 	mla	r4, r5, r0, r4
 802952c:	fb02 4303 	mla	r3, r2, r3, r4
 8029530:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8029534:	b353      	cbz	r3, 802958c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19c>
 8029536:	4a1e      	ldr	r2, [pc, #120]	; (80295b0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1c0>)
 8029538:	7808      	ldrb	r0, [r1, #0]
 802953a:	6814      	ldr	r4, [r2, #0]
 802953c:	b29a      	uxth	r2, r3
 802953e:	43db      	mvns	r3, r3
 8029540:	b2e5      	uxtb	r5, r4
 8029542:	b2db      	uxtb	r3, r3
 8029544:	fb15 f502 	smulbb	r5, r5, r2
 8029548:	fb00 5003 	mla	r0, r0, r3, r5
 802954c:	b280      	uxth	r0, r0
 802954e:	1c45      	adds	r5, r0, #1
 8029550:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8029554:	784d      	ldrb	r5, [r1, #1]
 8029556:	fb15 f503 	smulbb	r5, r5, r3
 802955a:	1200      	asrs	r0, r0, #8
 802955c:	7008      	strb	r0, [r1, #0]
 802955e:	f3c4 2007 	ubfx	r0, r4, #8, #8
 8029562:	f3c4 4407 	ubfx	r4, r4, #16, #8
 8029566:	fb00 5002 	mla	r0, r0, r2, r5
 802956a:	b280      	uxth	r0, r0
 802956c:	1c45      	adds	r5, r0, #1
 802956e:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8029572:	1200      	asrs	r0, r0, #8
 8029574:	7048      	strb	r0, [r1, #1]
 8029576:	7888      	ldrb	r0, [r1, #2]
 8029578:	fb10 f303 	smulbb	r3, r0, r3
 802957c:	fb04 3202 	mla	r2, r4, r2, r3
 8029580:	b292      	uxth	r2, r2
 8029582:	1c53      	adds	r3, r2, #1
 8029584:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8029588:	1212      	asrs	r2, r2, #8
 802958a:	708a      	strb	r2, [r1, #2]
 802958c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8029590:	2f0f      	cmp	r7, #15
 8029592:	d8a2      	bhi.n	80294da <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xea>
 8029594:	462b      	mov	r3, r5
 8029596:	4628      	mov	r0, r5
 8029598:	e7b3      	b.n	8029502 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x112>
 802959a:	2d00      	cmp	r5, #0
 802959c:	d1a8      	bne.n	80294f0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x100>
 802959e:	462c      	mov	r4, r5
 80295a0:	e7f8      	b.n	8029594 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1a4>
 80295a2:	bf00      	nop
 80295a4:	080312ae 	.word	0x080312ae
 80295a8:	080317a6 	.word	0x080317a6
 80295ac:	08031377 	.word	0x08031377
 80295b0:	2400c8e4 	.word	0x2400c8e4

080295b4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80295b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80295b8:	ed2d 8b08 	vpush	{d8-d11}
 80295bc:	b093      	sub	sp, #76	; 0x4c
 80295be:	461c      	mov	r4, r3
 80295c0:	eeb0 aa40 	vmov.f32	s20, s0
 80295c4:	920c      	str	r2, [sp, #48]	; 0x30
 80295c6:	eef0 9a60 	vmov.f32	s19, s1
 80295ca:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80295cc:	eeb0 9a41 	vmov.f32	s18, s2
 80295d0:	9011      	str	r0, [sp, #68]	; 0x44
 80295d2:	eeb0 8a62 	vmov.f32	s16, s5
 80295d6:	6850      	ldr	r0, [r2, #4]
 80295d8:	eef0 8a43 	vmov.f32	s17, s6
 80295dc:	9107      	str	r1, [sp, #28]
 80295de:	eef0 ba44 	vmov.f32	s23, s8
 80295e2:	6812      	ldr	r2, [r2, #0]
 80295e4:	eeb0 ba64 	vmov.f32	s22, s9
 80295e8:	eef0 aa45 	vmov.f32	s21, s10
 80295ec:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 80295f0:	e9dd 5625 	ldrd	r5, r6, [sp, #148]	; 0x94
 80295f4:	fb00 1303 	mla	r3, r0, r3, r1
 80295f8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80295fc:	eb02 0b03 	add.w	fp, r2, r3
 8029600:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8029602:	689b      	ldr	r3, [r3, #8]
 8029604:	3301      	adds	r3, #1
 8029606:	f023 0301 	bic.w	r3, r3, #1
 802960a:	9309      	str	r3, [sp, #36]	; 0x24
 802960c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802960e:	f8d3 8000 	ldr.w	r8, [r3]
 8029612:	9b07      	ldr	r3, [sp, #28]
 8029614:	2b00      	cmp	r3, #0
 8029616:	dc03      	bgt.n	8029620 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8029618:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802961a:	2b00      	cmp	r3, #0
 802961c:	f340 822b 	ble.w	8029a76 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 8029620:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8029622:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8029626:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802962a:	1e48      	subs	r0, r1, #1
 802962c:	1e57      	subs	r7, r2, #1
 802962e:	2c00      	cmp	r4, #0
 8029630:	f340 80d7 	ble.w	80297e2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22e>
 8029634:	ea5f 4c25 	movs.w	ip, r5, asr #16
 8029638:	ea4f 4326 	mov.w	r3, r6, asr #16
 802963c:	d406      	bmi.n	802964c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 802963e:	4584      	cmp	ip, r0
 8029640:	da04      	bge.n	802964c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8029642:	2b00      	cmp	r3, #0
 8029644:	db02      	blt.n	802964c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8029646:	42bb      	cmp	r3, r7
 8029648:	f2c0 80cc 	blt.w	80297e4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x230>
 802964c:	f11c 0c01 	adds.w	ip, ip, #1
 8029650:	f100 80bf 	bmi.w	80297d2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21e>
 8029654:	4561      	cmp	r1, ip
 8029656:	f2c0 80bc 	blt.w	80297d2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21e>
 802965a:	3301      	adds	r3, #1
 802965c:	f100 80b9 	bmi.w	80297d2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21e>
 8029660:	429a      	cmp	r2, r3
 8029662:	f2c0 80b6 	blt.w	80297d2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21e>
 8029666:	46a2      	mov	sl, r4
 8029668:	465f      	mov	r7, fp
 802966a:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 802966e:	f1ba 0f00 	cmp.w	sl, #0
 8029672:	f340 80d4 	ble.w	802981e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 8029676:	f3c5 3303 	ubfx	r3, r5, #12, #4
 802967a:	1430      	asrs	r0, r6, #16
 802967c:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8029680:	9308      	str	r3, [sp, #32]
 8029682:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8029684:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 8029688:	142b      	asrs	r3, r5, #16
 802968a:	f100 8124 	bmi.w	80298d6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 802968e:	f10c 32ff 	add.w	r2, ip, #4294967295
 8029692:	4293      	cmp	r3, r2
 8029694:	f280 811f 	bge.w	80298d6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 8029698:	2800      	cmp	r0, #0
 802969a:	f2c0 811c 	blt.w	80298d6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 802969e:	f10e 32ff 	add.w	r2, lr, #4294967295
 80296a2:	4290      	cmp	r0, r2
 80296a4:	f280 8117 	bge.w	80298d6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 80296a8:	fb00 3309 	mla	r3, r0, r9, r3
 80296ac:	0858      	lsrs	r0, r3, #1
 80296ae:	07da      	lsls	r2, r3, #31
 80296b0:	9a08      	ldr	r2, [sp, #32]
 80296b2:	f818 c000 	ldrb.w	ip, [r8, r0]
 80296b6:	bf54      	ite	pl
 80296b8:	f00c 0c0f 	andpl.w	ip, ip, #15
 80296bc:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 80296c0:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80296c4:	fa5f fc8c 	uxtb.w	ip, ip
 80296c8:	2a00      	cmp	r2, #0
 80296ca:	f000 80ed 	beq.w	80298a8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 80296ce:	1c58      	adds	r0, r3, #1
 80296d0:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 80296d4:	07c0      	lsls	r0, r0, #31
 80296d6:	f818 e00e 	ldrb.w	lr, [r8, lr]
 80296da:	bf54      	ite	pl
 80296dc:	f00e 0e0f 	andpl.w	lr, lr, #15
 80296e0:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 80296e4:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 80296e8:	fa5f fe8e 	uxtb.w	lr, lr
 80296ec:	f8cd e034 	str.w	lr, [sp, #52]	; 0x34
 80296f0:	b1c9      	cbz	r1, 8029726 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x172>
 80296f2:	444b      	add	r3, r9
 80296f4:	0858      	lsrs	r0, r3, #1
 80296f6:	07da      	lsls	r2, r3, #31
 80296f8:	f818 0000 	ldrb.w	r0, [r8, r0]
 80296fc:	bf54      	ite	pl
 80296fe:	f000 000f 	andpl.w	r0, r0, #15
 8029702:	1100      	asrmi	r0, r0, #4
 8029704:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8029708:	b2c0      	uxtb	r0, r0
 802970a:	900a      	str	r0, [sp, #40]	; 0x28
 802970c:	1c58      	adds	r0, r3, #1
 802970e:	0843      	lsrs	r3, r0, #1
 8029710:	07c2      	lsls	r2, r0, #31
 8029712:	f818 3003 	ldrb.w	r3, [r8, r3]
 8029716:	bf54      	ite	pl
 8029718:	f003 030f 	andpl.w	r3, r3, #15
 802971c:	111b      	asrmi	r3, r3, #4
 802971e:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8029722:	b2db      	uxtb	r3, r3
 8029724:	930e      	str	r3, [sp, #56]	; 0x38
 8029726:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 802972a:	b289      	uxth	r1, r1
 802972c:	fb02 f301 	mul.w	r3, r2, r1
 8029730:	0112      	lsls	r2, r2, #4
 8029732:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 8029736:	f5c2 7080 	rsb	r0, r2, #256	; 0x100
 802973a:	1ad2      	subs	r2, r2, r3
 802973c:	b289      	uxth	r1, r1
 802973e:	b292      	uxth	r2, r2
 8029740:	1a40      	subs	r0, r0, r1
 8029742:	fa1f fe80 	uxth.w	lr, r0
 8029746:	980d      	ldr	r0, [sp, #52]	; 0x34
 8029748:	4342      	muls	r2, r0
 802974a:	fb0c 2c0e 	mla	ip, ip, lr, r2
 802974e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8029750:	fb01 c102 	mla	r1, r1, r2, ip
 8029754:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8029756:	fb03 1302 	mla	r3, r3, r2, r1
 802975a:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802975e:	b383      	cbz	r3, 80297c2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 8029760:	4ac7      	ldr	r2, [pc, #796]	; (8029a80 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4cc>)
 8029762:	2bff      	cmp	r3, #255	; 0xff
 8029764:	6812      	ldr	r2, [r2, #0]
 8029766:	f3c2 4e07 	ubfx	lr, r2, #16, #8
 802976a:	f3c2 2007 	ubfx	r0, r2, #8, #8
 802976e:	b2d2      	uxtb	r2, r2
 8029770:	f000 80ac 	beq.w	80298cc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x318>
 8029774:	b299      	uxth	r1, r3
 8029776:	43db      	mvns	r3, r3
 8029778:	f897 c000 	ldrb.w	ip, [r7]
 802977c:	fb12 f201 	smulbb	r2, r2, r1
 8029780:	b2db      	uxtb	r3, r3
 8029782:	fb10 f001 	smulbb	r0, r0, r1
 8029786:	fb0c 2203 	mla	r2, ip, r3, r2
 802978a:	fb1e f101 	smulbb	r1, lr, r1
 802978e:	b292      	uxth	r2, r2
 8029790:	f102 0c01 	add.w	ip, r2, #1
 8029794:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8029798:	1212      	asrs	r2, r2, #8
 802979a:	703a      	strb	r2, [r7, #0]
 802979c:	787a      	ldrb	r2, [r7, #1]
 802979e:	fb02 0003 	mla	r0, r2, r3, r0
 80297a2:	b280      	uxth	r0, r0
 80297a4:	1c42      	adds	r2, r0, #1
 80297a6:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 80297aa:	78ba      	ldrb	r2, [r7, #2]
 80297ac:	fb02 1303 	mla	r3, r2, r3, r1
 80297b0:	1200      	asrs	r0, r0, #8
 80297b2:	b29b      	uxth	r3, r3
 80297b4:	7078      	strb	r0, [r7, #1]
 80297b6:	f103 0e01 	add.w	lr, r3, #1
 80297ba:	eb0e 2313 	add.w	r3, lr, r3, lsr #8
 80297be:	121b      	asrs	r3, r3, #8
 80297c0:	70bb      	strb	r3, [r7, #2]
 80297c2:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80297c4:	3703      	adds	r7, #3
 80297c6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80297ca:	441d      	add	r5, r3
 80297cc:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80297ce:	441e      	add	r6, r3
 80297d0:	e74d      	b.n	802966e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 80297d2:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80297d4:	3c01      	subs	r4, #1
 80297d6:	f10b 0b03 	add.w	fp, fp, #3
 80297da:	441d      	add	r5, r3
 80297dc:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80297de:	441e      	add	r6, r3
 80297e0:	e725      	b.n	802962e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 80297e2:	d021      	beq.n	8029828 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x274>
 80297e4:	1e63      	subs	r3, r4, #1
 80297e6:	9827      	ldr	r0, [sp, #156]	; 0x9c
 80297e8:	fb00 5003 	mla	r0, r0, r3, r5
 80297ec:	1400      	asrs	r0, r0, #16
 80297ee:	f53f af3a 	bmi.w	8029666 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 80297f2:	3901      	subs	r1, #1
 80297f4:	4288      	cmp	r0, r1
 80297f6:	f6bf af36 	bge.w	8029666 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 80297fa:	9928      	ldr	r1, [sp, #160]	; 0xa0
 80297fc:	fb01 6303 	mla	r3, r1, r3, r6
 8029800:	141b      	asrs	r3, r3, #16
 8029802:	f53f af30 	bmi.w	8029666 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 8029806:	3a01      	subs	r2, #1
 8029808:	4293      	cmp	r3, r2
 802980a:	f6bf af2c 	bge.w	8029666 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 802980e:	f10b 0c03 	add.w	ip, fp, #3
 8029812:	46a6      	mov	lr, r4
 8029814:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 8029818:	f1be 0f00 	cmp.w	lr, #0
 802981c:	dc79      	bgt.n	8029912 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35e>
 802981e:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8029822:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8029826:	44a3      	add	fp, r4
 8029828:	9b07      	ldr	r3, [sp, #28]
 802982a:	2b00      	cmp	r3, #0
 802982c:	f340 8123 	ble.w	8029a76 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 8029830:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8029834:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8029836:	ee3a aa2b 	vadd.f32	s20, s20, s23
 802983a:	ee79 9a8b 	vadd.f32	s19, s19, s22
 802983e:	eef0 6a48 	vmov.f32	s13, s16
 8029842:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8029846:	ee39 9a2a 	vadd.f32	s18, s18, s21
 802984a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802984e:	ee16 5a90 	vmov	r5, s13
 8029852:	eef0 6a68 	vmov.f32	s13, s17
 8029856:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802985a:	ee16 6a90 	vmov	r6, s13
 802985e:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8029862:	ee69 7a27 	vmul.f32	s15, s18, s15
 8029866:	ee37 8a48 	vsub.f32	s16, s14, s16
 802986a:	ee77 8ae8 	vsub.f32	s17, s15, s17
 802986e:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8029872:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8029876:	ee18 2a10 	vmov	r2, s16
 802987a:	eeb0 8a47 	vmov.f32	s16, s14
 802987e:	fb92 f3f3 	sdiv	r3, r2, r3
 8029882:	ee18 2a90 	vmov	r2, s17
 8029886:	9327      	str	r3, [sp, #156]	; 0x9c
 8029888:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802988a:	eef0 8a67 	vmov.f32	s17, s15
 802988e:	fb92 f3f3 	sdiv	r3, r2, r3
 8029892:	9328      	str	r3, [sp, #160]	; 0xa0
 8029894:	9b07      	ldr	r3, [sp, #28]
 8029896:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8029898:	3b01      	subs	r3, #1
 802989a:	9307      	str	r3, [sp, #28]
 802989c:	bf08      	it	eq
 802989e:	4614      	moveq	r4, r2
 80298a0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80298a2:	bf18      	it	ne
 80298a4:	461c      	movne	r4, r3
 80298a6:	e6b4      	b.n	8029612 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 80298a8:	2900      	cmp	r1, #0
 80298aa:	f43f af3c 	beq.w	8029726 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x172>
 80298ae:	eb09 0003 	add.w	r0, r9, r3
 80298b2:	0843      	lsrs	r3, r0, #1
 80298b4:	07c0      	lsls	r0, r0, #31
 80298b6:	f818 3003 	ldrb.w	r3, [r8, r3]
 80298ba:	bf54      	ite	pl
 80298bc:	f003 030f 	andpl.w	r3, r3, #15
 80298c0:	111b      	asrmi	r3, r3, #4
 80298c2:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 80298c6:	b2db      	uxtb	r3, r3
 80298c8:	930a      	str	r3, [sp, #40]	; 0x28
 80298ca:	e72c      	b.n	8029726 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x172>
 80298cc:	703a      	strb	r2, [r7, #0]
 80298ce:	7078      	strb	r0, [r7, #1]
 80298d0:	f887 e002 	strb.w	lr, [r7, #2]
 80298d4:	e775      	b.n	80297c2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 80298d6:	1c5a      	adds	r2, r3, #1
 80298d8:	f53f af73 	bmi.w	80297c2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 80298dc:	4594      	cmp	ip, r2
 80298de:	f6ff af70 	blt.w	80297c2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 80298e2:	1c42      	adds	r2, r0, #1
 80298e4:	f53f af6d 	bmi.w	80297c2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 80298e8:	4596      	cmp	lr, r2
 80298ea:	f6ff af6a 	blt.w	80297c2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 80298ee:	9302      	str	r3, [sp, #8]
 80298f0:	fa0f f38e 	sxth.w	r3, lr
 80298f4:	9a08      	ldr	r2, [sp, #32]
 80298f6:	9301      	str	r3, [sp, #4]
 80298f8:	fa0f f38c 	sxth.w	r3, ip
 80298fc:	9105      	str	r1, [sp, #20]
 80298fe:	4639      	mov	r1, r7
 8029900:	9300      	str	r3, [sp, #0]
 8029902:	464b      	mov	r3, r9
 8029904:	e9cd 0203 	strd	r0, r2, [sp, #12]
 8029908:	4642      	mov	r2, r8
 802990a:	9811      	ldr	r0, [sp, #68]	; 0x44
 802990c:	f7ff fd70 	bl	80293f0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>
 8029910:	e757      	b.n	80297c2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 8029912:	142a      	asrs	r2, r5, #16
 8029914:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8029918:	1433      	asrs	r3, r6, #16
 802991a:	f3c6 3703 	ubfx	r7, r6, #12, #4
 802991e:	fb09 2303 	mla	r3, r9, r3, r2
 8029922:	085a      	lsrs	r2, r3, #1
 8029924:	07d9      	lsls	r1, r3, #31
 8029926:	f818 2002 	ldrb.w	r2, [r8, r2]
 802992a:	bf54      	ite	pl
 802992c:	f002 020f 	andpl.w	r2, r2, #15
 8029930:	1112      	asrmi	r2, r2, #4
 8029932:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8029936:	b2d2      	uxtb	r2, r2
 8029938:	2800      	cmp	r0, #0
 802993a:	f000 8085 	beq.w	8029a48 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
 802993e:	f103 0a01 	add.w	sl, r3, #1
 8029942:	ea4f 015a 	mov.w	r1, sl, lsr #1
 8029946:	f01a 0f01 	tst.w	sl, #1
 802994a:	f818 1001 	ldrb.w	r1, [r8, r1]
 802994e:	bf0c      	ite	eq
 8029950:	f001 010f 	andeq.w	r1, r1, #15
 8029954:	1109      	asrne	r1, r1, #4
 8029956:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 802995a:	b2c9      	uxtb	r1, r1
 802995c:	910f      	str	r1, [sp, #60]	; 0x3c
 802995e:	b1df      	cbz	r7, 8029998 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e4>
 8029960:	444b      	add	r3, r9
 8029962:	0859      	lsrs	r1, r3, #1
 8029964:	f013 0f01 	tst.w	r3, #1
 8029968:	f103 0301 	add.w	r3, r3, #1
 802996c:	f818 1001 	ldrb.w	r1, [r8, r1]
 8029970:	bf0c      	ite	eq
 8029972:	f001 010f 	andeq.w	r1, r1, #15
 8029976:	1109      	asrne	r1, r1, #4
 8029978:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 802997c:	b2c9      	uxtb	r1, r1
 802997e:	910b      	str	r1, [sp, #44]	; 0x2c
 8029980:	0859      	lsrs	r1, r3, #1
 8029982:	07db      	lsls	r3, r3, #31
 8029984:	f818 1001 	ldrb.w	r1, [r8, r1]
 8029988:	bf54      	ite	pl
 802998a:	f001 010f 	andpl.w	r1, r1, #15
 802998e:	1109      	asrmi	r1, r1, #4
 8029990:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8029994:	b2c9      	uxtb	r1, r1
 8029996:	9110      	str	r1, [sp, #64]	; 0x40
 8029998:	b280      	uxth	r0, r0
 802999a:	b2bf      	uxth	r7, r7
 802999c:	fb00 f307 	mul.w	r3, r0, r7
 80299a0:	0100      	lsls	r0, r0, #4
 80299a2:	ebc3 1707 	rsb	r7, r3, r7, lsl #4
 80299a6:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
 80299aa:	1ac0      	subs	r0, r0, r3
 80299ac:	b2bf      	uxth	r7, r7
 80299ae:	b280      	uxth	r0, r0
 80299b0:	1bc9      	subs	r1, r1, r7
 80299b2:	fa1f fa81 	uxth.w	sl, r1
 80299b6:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80299b8:	4348      	muls	r0, r1
 80299ba:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80299bc:	fb02 020a 	mla	r2, r2, sl, r0
 80299c0:	fb07 2701 	mla	r7, r7, r1, r2
 80299c4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80299c6:	fb03 7302 	mla	r3, r3, r2, r7
 80299ca:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80299ce:	b393      	cbz	r3, 8029a36 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x482>
 80299d0:	4a2b      	ldr	r2, [pc, #172]	; (8029a80 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4cc>)
 80299d2:	2bff      	cmp	r3, #255	; 0xff
 80299d4:	6811      	ldr	r1, [r2, #0]
 80299d6:	f3c1 4a07 	ubfx	sl, r1, #16, #8
 80299da:	f3c1 2707 	ubfx	r7, r1, #8, #8
 80299de:	b2c9      	uxtb	r1, r1
 80299e0:	d042      	beq.n	8029a68 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 80299e2:	b298      	uxth	r0, r3
 80299e4:	43db      	mvns	r3, r3
 80299e6:	f81c 2c03 	ldrb.w	r2, [ip, #-3]
 80299ea:	fb11 f100 	smulbb	r1, r1, r0
 80299ee:	b2db      	uxtb	r3, r3
 80299f0:	fb17 f700 	smulbb	r7, r7, r0
 80299f4:	fb02 1103 	mla	r1, r2, r3, r1
 80299f8:	fb1a f000 	smulbb	r0, sl, r0
 80299fc:	b289      	uxth	r1, r1
 80299fe:	1c4a      	adds	r2, r1, #1
 8029a00:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8029a04:	f81c 2c02 	ldrb.w	r2, [ip, #-2]
 8029a08:	fb02 7703 	mla	r7, r2, r3, r7
 8029a0c:	1209      	asrs	r1, r1, #8
 8029a0e:	b2bf      	uxth	r7, r7
 8029a10:	f80c 1c03 	strb.w	r1, [ip, #-3]
 8029a14:	1c7a      	adds	r2, r7, #1
 8029a16:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 8029a1a:	f81c 2c01 	ldrb.w	r2, [ip, #-1]
 8029a1e:	fb02 0303 	mla	r3, r2, r3, r0
 8029a22:	123f      	asrs	r7, r7, #8
 8029a24:	b29b      	uxth	r3, r3
 8029a26:	f80c 7c02 	strb.w	r7, [ip, #-2]
 8029a2a:	1c5a      	adds	r2, r3, #1
 8029a2c:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8029a30:	121b      	asrs	r3, r3, #8
 8029a32:	f80c 3c01 	strb.w	r3, [ip, #-1]
 8029a36:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8029a38:	f10c 0c03 	add.w	ip, ip, #3
 8029a3c:	f10e 3eff 	add.w	lr, lr, #4294967295
 8029a40:	441d      	add	r5, r3
 8029a42:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8029a44:	441e      	add	r6, r3
 8029a46:	e6e7      	b.n	8029818 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x264>
 8029a48:	2f00      	cmp	r7, #0
 8029a4a:	d0a5      	beq.n	8029998 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e4>
 8029a4c:	444b      	add	r3, r9
 8029a4e:	0859      	lsrs	r1, r3, #1
 8029a50:	07db      	lsls	r3, r3, #31
 8029a52:	f818 1001 	ldrb.w	r1, [r8, r1]
 8029a56:	bf54      	ite	pl
 8029a58:	f001 010f 	andpl.w	r1, r1, #15
 8029a5c:	1109      	asrmi	r1, r1, #4
 8029a5e:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8029a62:	b2c9      	uxtb	r1, r1
 8029a64:	910b      	str	r1, [sp, #44]	; 0x2c
 8029a66:	e797      	b.n	8029998 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e4>
 8029a68:	f80c 1c03 	strb.w	r1, [ip, #-3]
 8029a6c:	f80c 7c02 	strb.w	r7, [ip, #-2]
 8029a70:	f80c ac01 	strb.w	sl, [ip, #-1]
 8029a74:	e7df      	b.n	8029a36 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x482>
 8029a76:	b013      	add	sp, #76	; 0x4c
 8029a78:	ecbd 8b08 	vpop	{d8-d11}
 8029a7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8029a80:	2400c8e4 	.word	0x2400c8e4

08029a84 <CRC_Lock>:
 8029a84:	4a20      	ldr	r2, [pc, #128]	; (8029b08 <CRC_Lock+0x84>)
 8029a86:	b530      	push	{r4, r5, lr}
 8029a88:	6813      	ldr	r3, [r2, #0]
 8029a8a:	f64f 74f0 	movw	r4, #65520	; 0xfff0
 8029a8e:	f24c 2540 	movw	r5, #49728	; 0xc240
 8029a92:	f023 0301 	bic.w	r3, r3, #1
 8029a96:	6013      	str	r3, [r2, #0]
 8029a98:	4b1c      	ldr	r3, [pc, #112]	; (8029b0c <CRC_Lock+0x88>)
 8029a9a:	681a      	ldr	r2, [r3, #0]
 8029a9c:	4022      	ands	r2, r4
 8029a9e:	42aa      	cmp	r2, r5
 8029aa0:	d005      	beq.n	8029aae <CRC_Lock+0x2a>
 8029aa2:	681b      	ldr	r3, [r3, #0]
 8029aa4:	f24c 2270 	movw	r2, #49776	; 0xc270
 8029aa8:	4023      	ands	r3, r4
 8029aaa:	4293      	cmp	r3, r2
 8029aac:	d124      	bne.n	8029af8 <CRC_Lock+0x74>
 8029aae:	4b18      	ldr	r3, [pc, #96]	; (8029b10 <CRC_Lock+0x8c>)
 8029ab0:	681b      	ldr	r3, [r3, #0]
 8029ab2:	bb0b      	cbnz	r3, 8029af8 <CRC_Lock+0x74>
 8029ab4:	4b17      	ldr	r3, [pc, #92]	; (8029b14 <CRC_Lock+0x90>)
 8029ab6:	681a      	ldr	r2, [r3, #0]
 8029ab8:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8029abc:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 8029ac0:	d00d      	beq.n	8029ade <CRC_Lock+0x5a>
 8029ac2:	681a      	ldr	r2, [r3, #0]
 8029ac4:	f240 4483 	movw	r4, #1155	; 0x483
 8029ac8:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8029acc:	42a2      	cmp	r2, r4
 8029ace:	d006      	beq.n	8029ade <CRC_Lock+0x5a>
 8029ad0:	681b      	ldr	r3, [r3, #0]
 8029ad2:	f240 4285 	movw	r2, #1157	; 0x485
 8029ad6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8029ada:	4293      	cmp	r3, r2
 8029adc:	d10c      	bne.n	8029af8 <CRC_Lock+0x74>
 8029ade:	4b0e      	ldr	r3, [pc, #56]	; (8029b18 <CRC_Lock+0x94>)
 8029ae0:	2201      	movs	r2, #1
 8029ae2:	601a      	str	r2, [r3, #0]
 8029ae4:	681a      	ldr	r2, [r3, #0]
 8029ae6:	2a00      	cmp	r2, #0
 8029ae8:	d1fc      	bne.n	8029ae4 <CRC_Lock+0x60>
 8029aea:	4b0c      	ldr	r3, [pc, #48]	; (8029b1c <CRC_Lock+0x98>)
 8029aec:	6018      	str	r0, [r3, #0]
 8029aee:	6818      	ldr	r0, [r3, #0]
 8029af0:	1a43      	subs	r3, r0, r1
 8029af2:	4258      	negs	r0, r3
 8029af4:	4158      	adcs	r0, r3
 8029af6:	bd30      	pop	{r4, r5, pc}
 8029af8:	4b09      	ldr	r3, [pc, #36]	; (8029b20 <CRC_Lock+0x9c>)
 8029afa:	2201      	movs	r2, #1
 8029afc:	601a      	str	r2, [r3, #0]
 8029afe:	681a      	ldr	r2, [r3, #0]
 8029b00:	2a00      	cmp	r2, #0
 8029b02:	d1fc      	bne.n	8029afe <CRC_Lock+0x7a>
 8029b04:	4b07      	ldr	r3, [pc, #28]	; (8029b24 <CRC_Lock+0xa0>)
 8029b06:	e7f1      	b.n	8029aec <CRC_Lock+0x68>
 8029b08:	e0002000 	.word	0xe0002000
 8029b0c:	e000ed00 	.word	0xe000ed00
 8029b10:	e0042000 	.word	0xe0042000
 8029b14:	5c001000 	.word	0x5c001000
 8029b18:	58024c08 	.word	0x58024c08
 8029b1c:	58024c00 	.word	0x58024c00
 8029b20:	40023008 	.word	0x40023008
 8029b24:	40023000 	.word	0x40023000

08029b28 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 8029b28:	6101      	str	r1, [r0, #16]
 8029b2a:	4770      	bx	lr

08029b2c <_ZN8touchgfx8Gestures4tickEv>:
 8029b2c:	7b83      	ldrb	r3, [r0, #14]
 8029b2e:	b14b      	cbz	r3, 8029b44 <_ZN8touchgfx8Gestures4tickEv+0x18>
 8029b30:	8903      	ldrh	r3, [r0, #8]
 8029b32:	3301      	adds	r3, #1
 8029b34:	b29b      	uxth	r3, r3
 8029b36:	2b07      	cmp	r3, #7
 8029b38:	8103      	strh	r3, [r0, #8]
 8029b3a:	bf81      	itttt	hi
 8029b3c:	2300      	movhi	r3, #0
 8029b3e:	8143      	strhhi	r3, [r0, #10]
 8029b40:	8183      	strhhi	r3, [r0, #12]
 8029b42:	7383      	strbhi	r3, [r0, #14]
 8029b44:	4770      	bx	lr
	...

08029b48 <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 8029b48:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8029b4c:	4604      	mov	r4, r0
 8029b4e:	4698      	mov	r8, r3
 8029b50:	8880      	ldrh	r0, [r0, #4]
 8029b52:	4617      	mov	r7, r2
 8029b54:	4b1d      	ldr	r3, [pc, #116]	; (8029bcc <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x84>)
 8029b56:	460e      	mov	r6, r1
 8029b58:	f8ad 0006 	strh.w	r0, [sp, #6]
 8029b5c:	eba8 0000 	sub.w	r0, r8, r0
 8029b60:	9300      	str	r3, [sp, #0]
 8029b62:	2300      	movs	r3, #0
 8029b64:	b280      	uxth	r0, r0
 8029b66:	8aa2      	ldrh	r2, [r4, #20]
 8029b68:	f88d 3004 	strb.w	r3, [sp, #4]
 8029b6c:	b203      	sxth	r3, r0
 8029b6e:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
 8029b72:	88e1      	ldrh	r1, [r4, #6]
 8029b74:	2b00      	cmp	r3, #0
 8029b76:	f8ad 800a 	strh.w	r8, [sp, #10]
 8029b7a:	f8ad 1008 	strh.w	r1, [sp, #8]
 8029b7e:	bfb8      	it	lt
 8029b80:	4240      	neglt	r0, r0
 8029b82:	f8ad 500c 	strh.w	r5, [sp, #12]
 8029b86:	bfb8      	it	lt
 8029b88:	b203      	sxthlt	r3, r0
 8029b8a:	4293      	cmp	r3, r2
 8029b8c:	dc08      	bgt.n	8029ba0 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x58>
 8029b8e:	1a69      	subs	r1, r5, r1
 8029b90:	b289      	uxth	r1, r1
 8029b92:	b20b      	sxth	r3, r1
 8029b94:	2b00      	cmp	r3, #0
 8029b96:	bfbc      	itt	lt
 8029b98:	4249      	neglt	r1, r1
 8029b9a:	b20b      	sxthlt	r3, r1
 8029b9c:	429a      	cmp	r2, r3
 8029b9e:	da13      	bge.n	8029bc8 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x80>
 8029ba0:	6920      	ldr	r0, [r4, #16]
 8029ba2:	4669      	mov	r1, sp
 8029ba4:	eba8 0606 	sub.w	r6, r8, r6
 8029ba8:	1bef      	subs	r7, r5, r7
 8029baa:	6803      	ldr	r3, [r0, #0]
 8029bac:	685b      	ldr	r3, [r3, #4]
 8029bae:	4798      	blx	r3
 8029bb0:	2300      	movs	r3, #0
 8029bb2:	2001      	movs	r0, #1
 8029bb4:	8166      	strh	r6, [r4, #10]
 8029bb6:	8123      	strh	r3, [r4, #8]
 8029bb8:	81a7      	strh	r7, [r4, #12]
 8029bba:	f8a4 8004 	strh.w	r8, [r4, #4]
 8029bbe:	80e5      	strh	r5, [r4, #6]
 8029bc0:	73a0      	strb	r0, [r4, #14]
 8029bc2:	b004      	add	sp, #16
 8029bc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8029bc8:	2000      	movs	r0, #0
 8029bca:	e7fa      	b.n	8029bc2 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7a>
 8029bcc:	08030724 	.word	0x08030724

08029bd0 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 8029bd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8029bd2:	461e      	mov	r6, r3
 8029bd4:	1e4b      	subs	r3, r1, #1
 8029bd6:	b085      	sub	sp, #20
 8029bd8:	4604      	mov	r4, r0
 8029bda:	2b01      	cmp	r3, #1
 8029bdc:	460d      	mov	r5, r1
 8029bde:	4617      	mov	r7, r2
 8029be0:	d84b      	bhi.n	8029c7a <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 8029be2:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8029be6:	1cd3      	adds	r3, r2, #3
 8029be8:	b29b      	uxth	r3, r3
 8029bea:	2b06      	cmp	r3, #6
 8029bec:	d916      	bls.n	8029c1c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 8029bee:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 8029c90 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 8029bf2:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8029bf6:	f8cd c004 	str.w	ip, [sp, #4]
 8029bfa:	f04f 0c00 	mov.w	ip, #0
 8029bfe:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8029c02:	6900      	ldr	r0, [r0, #16]
 8029c04:	f8ad 100c 	strh.w	r1, [sp, #12]
 8029c08:	a901      	add	r1, sp, #4
 8029c0a:	f88d c008 	strb.w	ip, [sp, #8]
 8029c0e:	f8ad 200a 	strh.w	r2, [sp, #10]
 8029c12:	f8ad 300e 	strh.w	r3, [sp, #14]
 8029c16:	6803      	ldr	r3, [r0, #0]
 8029c18:	689b      	ldr	r3, [r3, #8]
 8029c1a:	4798      	blx	r3
 8029c1c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8029c20:	1cd3      	adds	r3, r2, #3
 8029c22:	b29b      	uxth	r3, r3
 8029c24:	2b06      	cmp	r3, #6
 8029c26:	d916      	bls.n	8029c56 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8029c28:	f8df c064 	ldr.w	ip, [pc, #100]	; 8029c90 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 8029c2c:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8029c30:	f8cd c004 	str.w	ip, [sp, #4]
 8029c34:	f04f 0c01 	mov.w	ip, #1
 8029c38:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8029c3c:	6920      	ldr	r0, [r4, #16]
 8029c3e:	f8ad 100c 	strh.w	r1, [sp, #12]
 8029c42:	a901      	add	r1, sp, #4
 8029c44:	f88d c008 	strb.w	ip, [sp, #8]
 8029c48:	f8ad 200a 	strh.w	r2, [sp, #10]
 8029c4c:	f8ad 300e 	strh.w	r3, [sp, #14]
 8029c50:	6803      	ldr	r3, [r0, #0]
 8029c52:	689b      	ldr	r3, [r3, #8]
 8029c54:	4798      	blx	r3
 8029c56:	4b0d      	ldr	r3, [pc, #52]	; (8029c8c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xbc>)
 8029c58:	a901      	add	r1, sp, #4
 8029c5a:	6920      	ldr	r0, [r4, #16]
 8029c5c:	9301      	str	r3, [sp, #4]
 8029c5e:	2300      	movs	r3, #0
 8029c60:	f88d 5008 	strb.w	r5, [sp, #8]
 8029c64:	f8ad 700a 	strh.w	r7, [sp, #10]
 8029c68:	f8ad 600c 	strh.w	r6, [sp, #12]
 8029c6c:	f8ad 300e 	strh.w	r3, [sp, #14]
 8029c70:	6803      	ldr	r3, [r0, #0]
 8029c72:	681b      	ldr	r3, [r3, #0]
 8029c74:	4798      	blx	r3
 8029c76:	b005      	add	sp, #20
 8029c78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8029c7a:	2900      	cmp	r1, #0
 8029c7c:	d1eb      	bne.n	8029c56 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8029c7e:	80a2      	strh	r2, [r4, #4]
 8029c80:	80c6      	strh	r6, [r0, #6]
 8029c82:	60a1      	str	r1, [r4, #8]
 8029c84:	81a1      	strh	r1, [r4, #12]
 8029c86:	73a1      	strb	r1, [r4, #14]
 8029c88:	e7e5      	b.n	8029c56 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8029c8a:	bf00      	nop
 8029c8c:	08030710 	.word	0x08030710
 8029c90:	08030738 	.word	0x08030738

08029c94 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.14>:
 8029c94:	10c9      	asrs	r1, r1, #3
 8029c96:	2900      	cmp	r1, #0
 8029c98:	bfb8      	it	lt
 8029c9a:	4249      	neglt	r1, r1
 8029c9c:	2801      	cmp	r0, #1
 8029c9e:	d108      	bne.n	8029cb2 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.14+0x1e>
 8029ca0:	f3c1 0008 	ubfx	r0, r1, #0, #9
 8029ca4:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8029ca8:	4601      	mov	r1, r0
 8029caa:	dd02      	ble.n	8029cb2 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.14+0x1e>
 8029cac:	f5c0 7000 	rsb	r0, r0, #512	; 0x200
 8029cb0:	4770      	bx	lr
 8029cb2:	29ff      	cmp	r1, #255	; 0xff
 8029cb4:	bfa8      	it	ge
 8029cb6:	21ff      	movge	r1, #255	; 0xff
 8029cb8:	4608      	mov	r0, r1
 8029cba:	4770      	bx	lr

08029cbc <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE>:
 8029cbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8029cc0:	688c      	ldr	r4, [r1, #8]
 8029cc2:	b087      	sub	sp, #28
 8029cc4:	4607      	mov	r7, r0
 8029cc6:	2c00      	cmp	r4, #0
 8029cc8:	db2b      	blt.n	8029d22 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x66>
 8029cca:	6803      	ldr	r3, [r0, #0]
 8029ccc:	691a      	ldr	r2, [r3, #16]
 8029cce:	42a2      	cmp	r2, r4
 8029cd0:	dd27      	ble.n	8029d22 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x66>
 8029cd2:	685a      	ldr	r2, [r3, #4]
 8029cd4:	695e      	ldr	r6, [r3, #20]
 8029cd6:	68cd      	ldr	r5, [r1, #12]
 8029cd8:	fb06 2604 	mla	r6, r6, r4, r2
 8029cdc:	f8d1 901c 	ldr.w	r9, [r1, #28]
 8029ce0:	698a      	ldr	r2, [r1, #24]
 8029ce2:	f893 a008 	ldrb.w	sl, [r3, #8]
 8029ce6:	f8d1 8020 	ldr.w	r8, [r1, #32]
 8029cea:	9205      	str	r2, [sp, #20]
 8029cec:	f839 2f02 	ldrh.w	r2, [r9, #2]!
 8029cf0:	9b05      	ldr	r3, [sp, #20]
 8029cf2:	6839      	ldr	r1, [r7, #0]
 8029cf4:	eb03 0c02 	add.w	ip, r3, r2
 8029cf8:	f838 3f02 	ldrh.w	r3, [r8, #2]!
 8029cfc:	68c9      	ldr	r1, [r1, #12]
 8029cfe:	1898      	adds	r0, r3, r2
 8029d00:	4288      	cmp	r0, r1
 8029d02:	db02      	blt.n	8029d0a <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x4e>
 8029d04:	1a8b      	subs	r3, r1, r2
 8029d06:	2b00      	cmp	r3, #0
 8029d08:	dd09      	ble.n	8029d1e <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x62>
 8029d0a:	6878      	ldr	r0, [r7, #4]
 8029d0c:	6801      	ldr	r1, [r0, #0]
 8029d0e:	9400      	str	r4, [sp, #0]
 8029d10:	e9cd 3c01 	strd	r3, ip, [sp, #4]
 8029d14:	4653      	mov	r3, sl
 8029d16:	f8d1 b008 	ldr.w	fp, [r1, #8]
 8029d1a:	4631      	mov	r1, r6
 8029d1c:	47d8      	blx	fp
 8029d1e:	3d01      	subs	r5, #1
 8029d20:	d1e4      	bne.n	8029cec <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x30>
 8029d22:	b007      	add	sp, #28
 8029d24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08029d28 <_ZN8touchgfx10Rasterizer6lineToEii>:
 8029d28:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 8029d2c:	b90b      	cbnz	r3, 8029d32 <_ZN8touchgfx10Rasterizer6lineToEii+0xa>
 8029d2e:	f001 b991 	b.w	802b054 <_ZN8touchgfx7Outline6lineToEii>
 8029d32:	4770      	bx	lr

08029d34 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE>:
 8029d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8029d38:	4604      	mov	r4, r0
 8029d3a:	2600      	movs	r6, #0
 8029d3c:	4b8f      	ldr	r3, [pc, #572]	; (8029f7c <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x248>)
 8029d3e:	f100 0518 	add.w	r5, r0, #24
 8029d42:	f104 0730 	add.w	r7, r4, #48	; 0x30
 8029d46:	b086      	sub	sp, #24
 8029d48:	4690      	mov	r8, r2
 8029d4a:	e9c0 3100 	strd	r3, r1, [r0]
 8029d4e:	e9c0 6602 	strd	r6, r6, [r0, #8]
 8029d52:	e9c0 6604 	strd	r6, r6, [r0, #16]
 8029d56:	4628      	mov	r0, r5
 8029d58:	f001 fba0 	bl	802b49c <_ZN8touchgfx15RenderingBufferC1Ev>
 8029d5c:	4638      	mov	r0, r7
 8029d5e:	f000 fb45 	bl	802a3ec <_ZN8touchgfx7OutlineC1Ev>
 8029d62:	f104 0078 	add.w	r0, r4, #120	; 0x78
 8029d66:	f001 fb41 	bl	802b3ec <_ZN8touchgfx8ScanlineC1Ev>
 8029d6a:	2301      	movs	r3, #1
 8029d6c:	f884 609c 	strb.w	r6, [r4, #156]	; 0x9c
 8029d70:	f8c4 60a0 	str.w	r6, [r4, #160]	; 0xa0
 8029d74:	f884 60a4 	strb.w	r6, [r4, #164]	; 0xa4
 8029d78:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
 8029d7c:	f884 60a6 	strb.w	r6, [r4, #166]	; 0xa6
 8029d80:	f8a4 60b0 	strh.w	r6, [r4, #176]	; 0xb0
 8029d84:	e9c4 662a 	strd	r6, r6, [r4, #168]	; 0xa8
 8029d88:	e9c4 662d 	strd	r6, r6, [r4, #180]	; 0xb4
 8029d8c:	f7f3 f912 	bl	801cfb4 <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv>
 8029d90:	b928      	cbnz	r0, 8029d9e <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x6a>
 8029d92:	4b7b      	ldr	r3, [pc, #492]	; (8029f80 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x24c>)
 8029d94:	212d      	movs	r1, #45	; 0x2d
 8029d96:	4a7b      	ldr	r2, [pc, #492]	; (8029f84 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x250>)
 8029d98:	487b      	ldr	r0, [pc, #492]	; (8029f88 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x254>)
 8029d9a:	f001 fd6d 	bl	802b878 <__assert_func>
 8029d9e:	f9b8 2000 	ldrsh.w	r2, [r8]
 8029da2:	f8b8 0004 	ldrh.w	r0, [r8, #4]
 8029da6:	f8d4 c004 	ldr.w	ip, [r4, #4]
 8029daa:	4410      	add	r0, r2
 8029dac:	9602      	str	r6, [sp, #8]
 8029dae:	f9bc 9008 	ldrsh.w	r9, [ip, #8]
 8029db2:	b280      	uxth	r0, r0
 8029db4:	f9bc e00a 	ldrsh.w	lr, [ip, #10]
 8029db8:	fa0f fa80 	sxth.w	sl, r0
 8029dbc:	f1ba 0f00 	cmp.w	sl, #0
 8029dc0:	dd70      	ble.n	8029ea4 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x170>
 8029dc2:	4591      	cmp	r9, r2
 8029dc4:	dd6e      	ble.n	8029ea4 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x170>
 8029dc6:	f9b8 1002 	ldrsh.w	r1, [r8, #2]
 8029dca:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 8029dce:	440b      	add	r3, r1
 8029dd0:	b29b      	uxth	r3, r3
 8029dd2:	b21e      	sxth	r6, r3
 8029dd4:	2e00      	cmp	r6, #0
 8029dd6:	dd65      	ble.n	8029ea4 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x170>
 8029dd8:	458e      	cmp	lr, r1
 8029dda:	dd63      	ble.n	8029ea4 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x170>
 8029ddc:	45d1      	cmp	r9, sl
 8029dde:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 8029de2:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 8029de6:	bfb8      	it	lt
 8029de8:	fa1f f089 	uxthlt.w	r0, r9
 8029dec:	45b6      	cmp	lr, r6
 8029dee:	f8ad 2008 	strh.w	r2, [sp, #8]
 8029df2:	bfb8      	it	lt
 8029df4:	fa1f f38e 	uxthlt.w	r3, lr
 8029df8:	1a80      	subs	r0, r0, r2
 8029dfa:	f8ad 100a 	strh.w	r1, [sp, #10]
 8029dfe:	1a5b      	subs	r3, r3, r1
 8029e00:	f8ad 000c 	strh.w	r0, [sp, #12]
 8029e04:	f8ad 300e 	strh.w	r3, [sp, #14]
 8029e08:	f10d 0808 	add.w	r8, sp, #8
 8029e0c:	ae04      	add	r6, sp, #16
 8029e0e:	e898 0003 	ldmia.w	r8, {r0, r1}
 8029e12:	e886 0003 	stmia.w	r6, {r0, r1}
 8029e16:	f8dc 3000 	ldr.w	r3, [ip]
 8029e1a:	4660      	mov	r0, ip
 8029e1c:	4631      	mov	r1, r6
 8029e1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8029e20:	4798      	blx	r3
 8029e22:	6861      	ldr	r1, [r4, #4]
 8029e24:	4640      	mov	r0, r8
 8029e26:	3104      	adds	r1, #4
 8029e28:	f7f4 fc1c 	bl	801e664 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8029e2c:	4630      	mov	r0, r6
 8029e2e:	f7f4 fbd5 	bl	801e5dc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8029e32:	f9bd 000c 	ldrsh.w	r0, [sp, #12]
 8029e36:	f7f3 f84d 	bl	801ced4 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj>
 8029e3a:	f884 00a4 	strb.w	r0, [r4, #164]	; 0xa4
 8029e3e:	4638      	mov	r0, r7
 8029e40:	f000 fab0 	bl	802a3a4 <_ZN8touchgfx7Outline5resetEv>
 8029e44:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 8029e48:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 8029e4c:	f8a4 30a2 	strh.w	r3, [r4, #162]	; 0xa2
 8029e50:	015b      	lsls	r3, r3, #5
 8029e52:	f8a4 20a0 	strh.w	r2, [r4, #160]	; 0xa0
 8029e56:	0152      	lsls	r2, r2, #5
 8029e58:	60e3      	str	r3, [r4, #12]
 8029e5a:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8029e5e:	60a2      	str	r2, [r4, #8]
 8029e60:	015b      	lsls	r3, r3, #5
 8029e62:	6123      	str	r3, [r4, #16]
 8029e64:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8029e68:	015b      	lsls	r3, r3, #5
 8029e6a:	6163      	str	r3, [r4, #20]
 8029e6c:	4b47      	ldr	r3, [pc, #284]	; (8029f8c <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x258>)
 8029e6e:	6818      	ldr	r0, [r3, #0]
 8029e70:	6803      	ldr	r3, [r0, #0]
 8029e72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8029e74:	4798      	blx	r3
 8029e76:	4606      	mov	r6, r0
 8029e78:	f7da fafc 	bl	8004474 <_ZN8touchgfx3HAL3lcdEv>
 8029e7c:	6803      	ldr	r3, [r0, #0]
 8029e7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8029e80:	4798      	blx	r3
 8029e82:	4607      	mov	r7, r0
 8029e84:	f7da faf6 	bl	8004474 <_ZN8touchgfx3HAL3lcdEv>
 8029e88:	6803      	ldr	r3, [r0, #0]
 8029e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8029e8c:	4798      	blx	r3
 8029e8e:	280d      	cmp	r0, #13
 8029e90:	d854      	bhi.n	8029f3c <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x208>
 8029e92:	e8df f000 	tbb	[pc, r0]
 8029e96:	554b      	.short	0x554b
 8029e98:	2b6e0a66 	.word	0x2b6e0a66
 8029e9c:	5f5f5f3b 	.word	0x5f5f5f3b
 8029ea0:	6e6e5f5f 	.word	0x6e6e5f5f
 8029ea4:	2300      	movs	r3, #0
 8029ea6:	9303      	str	r3, [sp, #12]
 8029ea8:	e7ae      	b.n	8029e08 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0xd4>
 8029eaa:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8029eae:	2108      	movs	r1, #8
 8029eb0:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8029eb4:	fb92 f1f1 	sdiv	r1, r2, r1
 8029eb8:	fb07 1303 	mla	r3, r7, r3, r1
 8029ebc:	441e      	add	r6, r3
 8029ebe:	4253      	negs	r3, r2
 8029ec0:	f002 0207 	and.w	r2, r2, #7
 8029ec4:	f003 0307 	and.w	r3, r3, #7
 8029ec8:	bf58      	it	pl
 8029eca:	425a      	negpl	r2, r3
 8029ecc:	b2d2      	uxtb	r2, r2
 8029ece:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 8029ed2:	4628      	mov	r0, r5
 8029ed4:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 8029ed8:	6721      	str	r1, [r4, #112]	; 0x70
 8029eda:	e9cd 1700 	strd	r1, r7, [sp]
 8029ede:	4631      	mov	r1, r6
 8029ee0:	f001 fae8 	bl	802b4b4 <_ZN8touchgfx15RenderingBuffer6attachEPhhjji>
 8029ee4:	4620      	mov	r0, r4
 8029ee6:	b006      	add	sp, #24
 8029ee8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8029eec:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8029ef0:	2104      	movs	r1, #4
 8029ef2:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8029ef6:	fb92 f1f1 	sdiv	r1, r2, r1
 8029efa:	fb07 1303 	mla	r3, r7, r3, r1
 8029efe:	441e      	add	r6, r3
 8029f00:	4253      	negs	r3, r2
 8029f02:	f002 0203 	and.w	r2, r2, #3
 8029f06:	f003 0303 	and.w	r3, r3, #3
 8029f0a:	e7dd      	b.n	8029ec8 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x194>
 8029f0c:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8029f10:	2102      	movs	r1, #2
 8029f12:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8029f16:	2a00      	cmp	r2, #0
 8029f18:	fb92 f1f1 	sdiv	r1, r2, r1
 8029f1c:	f002 0201 	and.w	r2, r2, #1
 8029f20:	fb07 1303 	mla	r3, r7, r3, r1
 8029f24:	bfb8      	it	lt
 8029f26:	4252      	neglt	r2, r2
 8029f28:	441e      	add	r6, r3
 8029f2a:	e7cf      	b.n	8029ecc <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x198>
 8029f2c:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8029f30:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8029f34:	437b      	muls	r3, r7
 8029f36:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8029f3a:	441e      	add	r6, r3
 8029f3c:	2200      	movs	r2, #0
 8029f3e:	e7c6      	b.n	8029ece <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x19a>
 8029f40:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8029f44:	2103      	movs	r1, #3
 8029f46:	fb07 f203 	mul.w	r2, r7, r3
 8029f4a:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8029f4e:	fb13 2301 	smlabb	r3, r3, r1, r2
 8029f52:	e7f2      	b.n	8029f3a <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x206>
 8029f54:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8029f58:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8029f5c:	fb07 2303 	mla	r3, r7, r3, r2
 8029f60:	e7eb      	b.n	8029f3a <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x206>
 8029f62:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8029f66:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8029f6a:	437b      	muls	r3, r7
 8029f6c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8029f70:	e7e3      	b.n	8029f3a <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x206>
 8029f72:	4b07      	ldr	r3, [pc, #28]	; (8029f90 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x25c>)
 8029f74:	216c      	movs	r1, #108	; 0x6c
 8029f76:	4a03      	ldr	r2, [pc, #12]	; (8029f84 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x250>)
 8029f78:	e70e      	b.n	8029d98 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x64>
 8029f7a:	bf00      	nop
 8029f7c:	08031acc 	.word	0x08031acc
 8029f80:	08031a16 	.word	0x08031a16
 8029f84:	08031ad4 	.word	0x08031ad4
 8029f88:	08031a72 	.word	0x08031a72
 8029f8c:	2400c8bc 	.word	0x2400c8bc
 8029f90:	08031aa6 	.word	0x08031aa6

08029f94 <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_>:
 8029f94:	6812      	ldr	r2, [r2, #0]
 8029f96:	2a00      	cmp	r2, #0
 8029f98:	db0b      	blt.n	8029fb2 <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_+0x1e>
 8029f9a:	9800      	ldr	r0, [sp, #0]
 8029f9c:	6800      	ldr	r0, [r0, #0]
 8029f9e:	4290      	cmp	r0, r2
 8029fa0:	bfd4      	ite	le
 8029fa2:	2002      	movle	r0, #2
 8029fa4:	2000      	movgt	r0, #0
 8029fa6:	680a      	ldr	r2, [r1, #0]
 8029fa8:	2a00      	cmp	r2, #0
 8029faa:	da04      	bge.n	8029fb6 <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_+0x22>
 8029fac:	f040 0004 	orr.w	r0, r0, #4
 8029fb0:	4770      	bx	lr
 8029fb2:	2001      	movs	r0, #1
 8029fb4:	e7f7      	b.n	8029fa6 <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_+0x12>
 8029fb6:	681b      	ldr	r3, [r3, #0]
 8029fb8:	4293      	cmp	r3, r2
 8029fba:	bfd8      	it	le
 8029fbc:	f040 0008 	orrle.w	r0, r0, #8
 8029fc0:	4770      	bx	lr
	...

08029fc4 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>:
 8029fc4:	4b07      	ldr	r3, [pc, #28]	; (8029fe4 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x20>)
 8029fc6:	b510      	push	{r4, lr}
 8029fc8:	781b      	ldrb	r3, [r3, #0]
 8029fca:	2b01      	cmp	r3, #1
 8029fcc:	d108      	bne.n	8029fe0 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x1c>
 8029fce:	6843      	ldr	r3, [r0, #4]
 8029fd0:	6814      	ldr	r4, [r2, #0]
 8029fd2:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 8029fd6:	680b      	ldr	r3, [r1, #0]
 8029fd8:	ebc3 1340 	rsb	r3, r3, r0, lsl #5
 8029fdc:	6013      	str	r3, [r2, #0]
 8029fde:	600c      	str	r4, [r1, #0]
 8029fe0:	bd10      	pop	{r4, pc}
 8029fe2:	bf00      	nop
 8029fe4:	2400c8b4 	.word	0x2400c8b4

08029fe8 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>:
 8029fe8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8029fea:	b085      	sub	sp, #20
 8029fec:	f890 30a4 	ldrb.w	r3, [r0, #164]	; 0xa4
 8029ff0:	4604      	mov	r4, r0
 8029ff2:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8029ff6:	b33b      	cbz	r3, 802a048 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x60>
 8029ff8:	aa02      	add	r2, sp, #8
 8029ffa:	a903      	add	r1, sp, #12
 8029ffc:	f7ff ffe2 	bl	8029fc4 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 802a000:	68a3      	ldr	r3, [r4, #8]
 802a002:	9e03      	ldr	r6, [sp, #12]
 802a004:	aa02      	add	r2, sp, #8
 802a006:	9f02      	ldr	r7, [sp, #8]
 802a008:	a903      	add	r1, sp, #12
 802a00a:	1af6      	subs	r6, r6, r3
 802a00c:	68e3      	ldr	r3, [r4, #12]
 802a00e:	4620      	mov	r0, r4
 802a010:	1aff      	subs	r7, r7, r3
 802a012:	f104 0314 	add.w	r3, r4, #20
 802a016:	9603      	str	r6, [sp, #12]
 802a018:	9300      	str	r3, [sp, #0]
 802a01a:	f104 0310 	add.w	r3, r4, #16
 802a01e:	9702      	str	r7, [sp, #8]
 802a020:	f7ff ffb8 	bl	8029f94 <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_>
 802a024:	f894 30b0 	ldrb.w	r3, [r4, #176]	; 0xb0
 802a028:	4605      	mov	r5, r0
 802a02a:	b97b      	cbnz	r3, 802a04c <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x64>
 802a02c:	463a      	mov	r2, r7
 802a02e:	4631      	mov	r1, r6
 802a030:	f104 0030 	add.w	r0, r4, #48	; 0x30
 802a034:	f7ff fe78 	bl	8029d28 <_ZN8touchgfx10Rasterizer6lineToEii>
 802a038:	9b03      	ldr	r3, [sp, #12]
 802a03a:	f884 50b0 	strb.w	r5, [r4, #176]	; 0xb0
 802a03e:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
 802a042:	9b02      	ldr	r3, [sp, #8]
 802a044:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
 802a048:	b005      	add	sp, #20
 802a04a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802a04c:	b110      	cbz	r0, 802a054 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x6c>
 802a04e:	ea13 0200 	ands.w	r2, r3, r0
 802a052:	d11c      	bne.n	802a08e <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0xa6>
 802a054:	f894 00a5 	ldrb.w	r0, [r4, #165]	; 0xa5
 802a058:	f104 0630 	add.w	r6, r4, #48	; 0x30
 802a05c:	e9d4 122a 	ldrd	r1, r2, [r4, #168]	; 0xa8
 802a060:	b188      	cbz	r0, 802a086 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x9e>
 802a062:	f884 30b1 	strb.w	r3, [r4, #177]	; 0xb1
 802a066:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
 802a06a:	b913      	cbnz	r3, 802a072 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x8a>
 802a06c:	4630      	mov	r0, r6
 802a06e:	f001 f821 	bl	802b0b4 <_ZN8touchgfx7Outline6moveToEii>
 802a072:	2300      	movs	r3, #0
 802a074:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
 802a078:	2301      	movs	r3, #1
 802a07a:	f884 30a6 	strb.w	r3, [r4, #166]	; 0xa6
 802a07e:	4630      	mov	r0, r6
 802a080:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 802a084:	e7d6      	b.n	802a034 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x4c>
 802a086:	4630      	mov	r0, r6
 802a088:	f7ff fe4e 	bl	8029d28 <_ZN8touchgfx10Rasterizer6lineToEii>
 802a08c:	e7f7      	b.n	802a07e <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x96>
 802a08e:	4615      	mov	r5, r2
 802a090:	e7d2      	b.n	802a038 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x50>

0802a092 <_ZN8touchgfx6Canvas5closeEv>:
 802a092:	b538      	push	{r3, r4, r5, lr}
 802a094:	f890 30a5 	ldrb.w	r3, [r0, #165]	; 0xa5
 802a098:	4604      	mov	r4, r0
 802a09a:	b993      	cbnz	r3, 802a0c2 <_ZN8touchgfx6Canvas5closeEv+0x30>
 802a09c:	f890 30b0 	ldrb.w	r3, [r0, #176]	; 0xb0
 802a0a0:	f890 20b1 	ldrb.w	r2, [r0, #177]	; 0xb1
 802a0a4:	4213      	tst	r3, r2
 802a0a6:	d10c      	bne.n	802a0c2 <_ZN8touchgfx6Canvas5closeEv+0x30>
 802a0a8:	f100 0530 	add.w	r5, r0, #48	; 0x30
 802a0ac:	b123      	cbz	r3, 802a0b8 <_ZN8touchgfx6Canvas5closeEv+0x26>
 802a0ae:	e9d0 122a 	ldrd	r1, r2, [r0, #168]	; 0xa8
 802a0b2:	4628      	mov	r0, r5
 802a0b4:	f7ff fe38 	bl	8029d28 <_ZN8touchgfx10Rasterizer6lineToEii>
 802a0b8:	4628      	mov	r0, r5
 802a0ba:	e9d4 122d 	ldrd	r1, r2, [r4, #180]	; 0xb4
 802a0be:	f7ff fe33 	bl	8029d28 <_ZN8touchgfx10Rasterizer6lineToEii>
 802a0c2:	2300      	movs	r3, #0
 802a0c4:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
 802a0c8:	bd38      	pop	{r3, r4, r5, pc}

0802a0ca <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>:
 802a0ca:	b5f0      	push	{r4, r5, r6, r7, lr}
 802a0cc:	b085      	sub	sp, #20
 802a0ce:	f890 30a4 	ldrb.w	r3, [r0, #164]	; 0xa4
 802a0d2:	4604      	mov	r4, r0
 802a0d4:	e9cd 2102 	strd	r2, r1, [sp, #8]
 802a0d8:	b353      	cbz	r3, 802a130 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x66>
 802a0da:	f890 30a5 	ldrb.w	r3, [r0, #165]	; 0xa5
 802a0de:	b90b      	cbnz	r3, 802a0e4 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x1a>
 802a0e0:	f7ff ffd7 	bl	802a092 <_ZN8touchgfx6Canvas5closeEv>
 802a0e4:	aa02      	add	r2, sp, #8
 802a0e6:	a903      	add	r1, sp, #12
 802a0e8:	4620      	mov	r0, r4
 802a0ea:	f7ff ff6b 	bl	8029fc4 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 802a0ee:	68a3      	ldr	r3, [r4, #8]
 802a0f0:	9d03      	ldr	r5, [sp, #12]
 802a0f2:	aa02      	add	r2, sp, #8
 802a0f4:	9e02      	ldr	r6, [sp, #8]
 802a0f6:	a903      	add	r1, sp, #12
 802a0f8:	1aed      	subs	r5, r5, r3
 802a0fa:	68e3      	ldr	r3, [r4, #12]
 802a0fc:	4620      	mov	r0, r4
 802a0fe:	1af6      	subs	r6, r6, r3
 802a100:	f104 0314 	add.w	r3, r4, #20
 802a104:	9503      	str	r5, [sp, #12]
 802a106:	9300      	str	r3, [sp, #0]
 802a108:	f104 0310 	add.w	r3, r4, #16
 802a10c:	9602      	str	r6, [sp, #8]
 802a10e:	f7ff ff41 	bl	8029f94 <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_>
 802a112:	4607      	mov	r7, r0
 802a114:	b170      	cbz	r0, 802a134 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x6a>
 802a116:	2301      	movs	r3, #1
 802a118:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
 802a11c:	9a03      	ldr	r2, [sp, #12]
 802a11e:	9b02      	ldr	r3, [sp, #8]
 802a120:	f8c4 20b4 	str.w	r2, [r4, #180]	; 0xb4
 802a124:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
 802a128:	f884 70b0 	strb.w	r7, [r4, #176]	; 0xb0
 802a12c:	e9c4 232a 	strd	r2, r3, [r4, #168]	; 0xa8
 802a130:	b005      	add	sp, #20
 802a132:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802a134:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
 802a138:	f884 00b1 	strb.w	r0, [r4, #177]	; 0xb1
 802a13c:	b92b      	cbnz	r3, 802a14a <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x80>
 802a13e:	4632      	mov	r2, r6
 802a140:	4629      	mov	r1, r5
 802a142:	f104 0030 	add.w	r0, r4, #48	; 0x30
 802a146:	f000 ffb5 	bl	802b0b4 <_ZN8touchgfx7Outline6moveToEii>
 802a14a:	2300      	movs	r3, #0
 802a14c:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
 802a150:	2301      	movs	r3, #1
 802a152:	f884 30a6 	strb.w	r3, [r4, #166]	; 0xa6
 802a156:	e7e1      	b.n	802a11c <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x52>

0802a158 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_>:
 802a158:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802a15c:	4604      	mov	r4, r0
 802a15e:	b087      	sub	sp, #28
 802a160:	9105      	str	r1, [sp, #20]
 802a162:	f001 f8ec 	bl	802b33e <_ZN8touchgfx7Outline8getCellsEv>
 802a166:	f8d4 9008 	ldr.w	r9, [r4, #8]
 802a16a:	4605      	mov	r5, r0
 802a16c:	f1b9 0f00 	cmp.w	r9, #0
 802a170:	d103      	bne.n	802a17a <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x22>
 802a172:	2001      	movs	r0, #1
 802a174:	b007      	add	sp, #28
 802a176:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802a17a:	f894 6044 	ldrb.w	r6, [r4, #68]	; 0x44
 802a17e:	2e00      	cmp	r6, #0
 802a180:	d139      	bne.n	802a1f6 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x9e>
 802a182:	f104 0848 	add.w	r8, r4, #72	; 0x48
 802a186:	f105 0708 	add.w	r7, r5, #8
 802a18a:	4640      	mov	r0, r8
 802a18c:	f001 f919 	bl	802b3c2 <_ZN8touchgfx8Scanline5resetEv>
 802a190:	f109 33ff 	add.w	r3, r9, #4294967295
 802a194:	9303      	str	r3, [sp, #12]
 802a196:	f9b5 b000 	ldrsh.w	fp, [r5]
 802a19a:	f9b5 9002 	ldrsh.w	r9, [r5, #2]
 802a19e:	46da      	mov	sl, fp
 802a1a0:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 802a1a4:	eb0b 4009 	add.w	r0, fp, r9, lsl #16
 802a1a8:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 802a1ac:	9b03      	ldr	r3, [sp, #12]
 802a1ae:	4416      	add	r6, r2
 802a1b0:	9504      	str	r5, [sp, #16]
 802a1b2:	463d      	mov	r5, r7
 802a1b4:	3b01      	subs	r3, #1
 802a1b6:	9303      	str	r3, [sp, #12]
 802a1b8:	3301      	adds	r3, #1
 802a1ba:	d01e      	beq.n	802a1fa <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xa2>
 802a1bc:	3708      	adds	r7, #8
 802a1be:	f937 cc06 	ldrsh.w	ip, [r7, #-6]
 802a1c2:	f937 2c08 	ldrsh.w	r2, [r7, #-8]
 802a1c6:	eb02 420c 	add.w	r2, r2, ip, lsl #16
 802a1ca:	4290      	cmp	r0, r2
 802a1cc:	d11e      	bne.n	802a20c <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xb4>
 802a1ce:	f937 2c02 	ldrsh.w	r2, [r7, #-2]
 802a1d2:	4411      	add	r1, r2
 802a1d4:	f937 2c04 	ldrsh.w	r2, [r7, #-4]
 802a1d8:	e7e8      	b.n	802a1ac <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x54>
 802a1da:	1c91      	adds	r1, r2, #2
 802a1dc:	f04f 0301 	mov.w	r3, #1
 802a1e0:	65e1      	str	r1, [r4, #92]	; 0x5c
 802a1e2:	8053      	strh	r3, [r2, #2]
 802a1e4:	6da2      	ldr	r2, [r4, #88]	; 0x58
 802a1e6:	1c91      	adds	r1, r2, #2
 802a1e8:	65a1      	str	r1, [r4, #88]	; 0x58
 802a1ea:	f8a2 b002 	strh.w	fp, [r2, #2]
 802a1ee:	6d62      	ldr	r2, [r4, #84]	; 0x54
 802a1f0:	3201      	adds	r2, #1
 802a1f2:	6562      	str	r2, [r4, #84]	; 0x54
 802a1f4:	e03a      	b.n	802a26c <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x114>
 802a1f6:	2000      	movs	r0, #0
 802a1f8:	e7bc      	b.n	802a174 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x1c>
 802a1fa:	b951      	cbnz	r1, 802a212 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xba>
 802a1fc:	6d63      	ldr	r3, [r4, #84]	; 0x54
 802a1fe:	2b00      	cmp	r3, #0
 802a200:	d0b7      	beq.n	802a172 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x1a>
 802a202:	4641      	mov	r1, r8
 802a204:	9805      	ldr	r0, [sp, #20]
 802a206:	f7ff fd59 	bl	8029cbc <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE>
 802a20a:	e7b2      	b.n	802a172 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x1a>
 802a20c:	2900      	cmp	r1, #0
 802a20e:	d035      	beq.n	802a27c <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x124>
 802a210:	9504      	str	r5, [sp, #16]
 802a212:	ebc1 1186 	rsb	r1, r1, r6, lsl #6
 802a216:	f894 006c 	ldrb.w	r0, [r4, #108]	; 0x6c
 802a21a:	f7ff fd3b 	bl	8029c94 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.14>
 802a21e:	4605      	mov	r5, r0
 802a220:	b330      	cbz	r0, 802a270 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x118>
 802a222:	6d62      	ldr	r2, [r4, #84]	; 0x54
 802a224:	b182      	cbz	r2, 802a248 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xf0>
 802a226:	6d22      	ldr	r2, [r4, #80]	; 0x50
 802a228:	4591      	cmp	r9, r2
 802a22a:	d00d      	beq.n	802a248 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xf0>
 802a22c:	4641      	mov	r1, r8
 802a22e:	9805      	ldr	r0, [sp, #20]
 802a230:	f7ff fd44 	bl	8029cbc <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE>
 802a234:	f647 73ff 	movw	r3, #32767	; 0x7fff
 802a238:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 802a23a:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
 802a23e:	65e2      	str	r2, [r4, #92]	; 0x5c
 802a240:	2300      	movs	r3, #0
 802a242:	6e62      	ldr	r2, [r4, #100]	; 0x64
 802a244:	6563      	str	r3, [r4, #84]	; 0x54
 802a246:	65a2      	str	r2, [r4, #88]	; 0x58
 802a248:	f1bb 0f00 	cmp.w	fp, #0
 802a24c:	db10      	blt.n	802a270 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x118>
 802a24e:	f7f2 febf 	bl	801cfd0 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>
 802a252:	4583      	cmp	fp, r0
 802a254:	da0c      	bge.n	802a270 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x118>
 802a256:	6e22      	ldr	r2, [r4, #96]	; 0x60
 802a258:	f802 500b 	strb.w	r5, [r2, fp]
 802a25c:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 802a25e:	3201      	adds	r2, #1
 802a260:	4593      	cmp	fp, r2
 802a262:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 802a264:	d1b9      	bne.n	802a1da <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x82>
 802a266:	8811      	ldrh	r1, [r2, #0]
 802a268:	3101      	adds	r1, #1
 802a26a:	8011      	strh	r1, [r2, #0]
 802a26c:	e9c4 b913 	strd	fp, r9, [r4, #76]	; 0x4c
 802a270:	9b03      	ldr	r3, [sp, #12]
 802a272:	3301      	adds	r3, #1
 802a274:	d0c2      	beq.n	802a1fc <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xa4>
 802a276:	f10b 0a01 	add.w	sl, fp, #1
 802a27a:	9d04      	ldr	r5, [sp, #16]
 802a27c:	f9b5 3000 	ldrsh.w	r3, [r5]
 802a280:	4553      	cmp	r3, sl
 802a282:	dd88      	ble.n	802a196 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x3e>
 802a284:	01b1      	lsls	r1, r6, #6
 802a286:	f894 006c 	ldrb.w	r0, [r4, #108]	; 0x6c
 802a28a:	f7ff fd03 	bl	8029c94 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.14>
 802a28e:	4683      	mov	fp, r0
 802a290:	2800      	cmp	r0, #0
 802a292:	d080      	beq.n	802a196 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x3e>
 802a294:	6d63      	ldr	r3, [r4, #84]	; 0x54
 802a296:	b183      	cbz	r3, 802a2ba <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x162>
 802a298:	6d23      	ldr	r3, [r4, #80]	; 0x50
 802a29a:	4599      	cmp	r9, r3
 802a29c:	d00d      	beq.n	802a2ba <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x162>
 802a29e:	4641      	mov	r1, r8
 802a2a0:	9805      	ldr	r0, [sp, #20]
 802a2a2:	f7ff fd0b 	bl	8029cbc <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE>
 802a2a6:	f647 73ff 	movw	r3, #32767	; 0x7fff
 802a2aa:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
 802a2ae:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 802a2b0:	65e3      	str	r3, [r4, #92]	; 0x5c
 802a2b2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802a2b4:	65a3      	str	r3, [r4, #88]	; 0x58
 802a2b6:	2300      	movs	r3, #0
 802a2b8:	6563      	str	r3, [r4, #84]	; 0x54
 802a2ba:	f9b5 3000 	ldrsh.w	r3, [r5]
 802a2be:	464a      	mov	r2, r9
 802a2c0:	f8cd b000 	str.w	fp, [sp]
 802a2c4:	4651      	mov	r1, sl
 802a2c6:	eba3 030a 	sub.w	r3, r3, sl
 802a2ca:	4640      	mov	r0, r8
 802a2cc:	f001 f8a4 	bl	802b418 <_ZN8touchgfx8Scanline7addSpanEiijj>
 802a2d0:	e761      	b.n	802a196 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x3e>

0802a2d2 <_ZN8touchgfx6Canvas6renderEh>:
 802a2d2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 802a2d4:	f890 30a4 	ldrb.w	r3, [r0, #164]	; 0xa4
 802a2d8:	4604      	mov	r4, r0
 802a2da:	460d      	mov	r5, r1
 802a2dc:	b913      	cbnz	r3, 802a2e4 <_ZN8touchgfx6Canvas6renderEh+0x12>
 802a2de:	2001      	movs	r0, #1
 802a2e0:	b003      	add	sp, #12
 802a2e2:	bd30      	pop	{r4, r5, pc}
 802a2e4:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
 802a2e8:	2b00      	cmp	r3, #0
 802a2ea:	d12f      	bne.n	802a34c <_ZN8touchgfx6Canvas6renderEh+0x7a>
 802a2ec:	f890 30a6 	ldrb.w	r3, [r0, #166]	; 0xa6
 802a2f0:	2b00      	cmp	r3, #0
 802a2f2:	d0f4      	beq.n	802a2de <_ZN8touchgfx6Canvas6renderEh+0xc>
 802a2f4:	6840      	ldr	r0, [r0, #4]
 802a2f6:	6803      	ldr	r3, [r0, #0]
 802a2f8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 802a2fa:	4798      	blx	r3
 802a2fc:	fb10 f105 	smulbb	r1, r0, r5
 802a300:	b288      	uxth	r0, r1
 802a302:	1c41      	adds	r1, r0, #1
 802a304:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 802a308:	120d      	asrs	r5, r1, #8
 802a30a:	d0e8      	beq.n	802a2de <_ZN8touchgfx6Canvas6renderEh+0xc>
 802a30c:	4620      	mov	r0, r4
 802a30e:	f7ff fec0 	bl	802a092 <_ZN8touchgfx6Canvas5closeEv>
 802a312:	6860      	ldr	r0, [r4, #4]
 802a314:	6803      	ldr	r3, [r0, #0]
 802a316:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 802a318:	4798      	blx	r3
 802a31a:	f9b4 20a0 	ldrsh.w	r2, [r4, #160]	; 0xa0
 802a31e:	f9b4 30a2 	ldrsh.w	r3, [r4, #162]	; 0xa2
 802a322:	8082      	strh	r2, [r0, #4]
 802a324:	80c3      	strh	r3, [r0, #6]
 802a326:	6860      	ldr	r0, [r4, #4]
 802a328:	6803      	ldr	r3, [r0, #0]
 802a32a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 802a32c:	4798      	blx	r3
 802a32e:	7205      	strb	r5, [r0, #8]
 802a330:	6860      	ldr	r0, [r4, #4]
 802a332:	6803      	ldr	r3, [r0, #0]
 802a334:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 802a336:	4798      	blx	r3
 802a338:	f104 0318 	add.w	r3, r4, #24
 802a33c:	4669      	mov	r1, sp
 802a33e:	e9cd 3000 	strd	r3, r0, [sp]
 802a342:	f104 0030 	add.w	r0, r4, #48	; 0x30
 802a346:	f7ff ff07 	bl	802a158 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_>
 802a34a:	e7c9      	b.n	802a2e0 <_ZN8touchgfx6Canvas6renderEh+0xe>
 802a34c:	2000      	movs	r0, #0
 802a34e:	e7c7      	b.n	802a2e0 <_ZN8touchgfx6Canvas6renderEh+0xe>

0802a350 <_ZN8touchgfx6CanvasD1Ev>:
 802a350:	b538      	push	{r3, r4, r5, lr}
 802a352:	4605      	mov	r5, r0
 802a354:	4b08      	ldr	r3, [pc, #32]	; (802a378 <_ZN8touchgfx6CanvasD1Ev+0x28>)
 802a356:	4604      	mov	r4, r0
 802a358:	f845 3b30 	str.w	r3, [r5], #48
 802a35c:	4b07      	ldr	r3, [pc, #28]	; (802a37c <_ZN8touchgfx6CanvasD1Ev+0x2c>)
 802a35e:	6818      	ldr	r0, [r3, #0]
 802a360:	6803      	ldr	r3, [r0, #0]
 802a362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802a364:	4798      	blx	r3
 802a366:	4628      	mov	r0, r5
 802a368:	f000 f814 	bl	802a394 <_ZN8touchgfx7OutlineD1Ev>
 802a36c:	f104 0018 	add.w	r0, r4, #24
 802a370:	f001 f88b 	bl	802b48a <_ZN8touchgfx15RenderingBufferD1Ev>
 802a374:	4620      	mov	r0, r4
 802a376:	bd38      	pop	{r3, r4, r5, pc}
 802a378:	08031acc 	.word	0x08031acc
 802a37c:	2400c8bc 	.word	0x2400c8bc

0802a380 <_ZN8touchgfx6CanvasD0Ev>:
 802a380:	b510      	push	{r4, lr}
 802a382:	4604      	mov	r4, r0
 802a384:	f7ff ffe4 	bl	802a350 <_ZN8touchgfx6CanvasD1Ev>
 802a388:	21bc      	movs	r1, #188	; 0xbc
 802a38a:	4620      	mov	r0, r4
 802a38c:	f001 f89f 	bl	802b4ce <_ZdlPvj>
 802a390:	4620      	mov	r0, r4
 802a392:	bd10      	pop	{r4, pc}

0802a394 <_ZN8touchgfx7OutlineD1Ev>:
 802a394:	4770      	bx	lr

0802a396 <_ZN8touchgfx7OutlineD0Ev>:
 802a396:	b510      	push	{r4, lr}
 802a398:	4604      	mov	r4, r0
 802a39a:	2148      	movs	r1, #72	; 0x48
 802a39c:	f001 f897 	bl	802b4ce <_ZdlPvj>
 802a3a0:	4620      	mov	r0, r4
 802a3a2:	bd10      	pop	{r4, pc}

0802a3a4 <_ZN8touchgfx7Outline5resetEv>:
 802a3a4:	b510      	push	{r4, lr}
 802a3a6:	4604      	mov	r4, r0
 802a3a8:	f7f2 fe2a 	bl	801d000 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>
 802a3ac:	60e0      	str	r0, [r4, #12]
 802a3ae:	f7f2 fe2d 	bl	801d00c <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>
 802a3b2:	68e3      	ldr	r3, [r4, #12]
 802a3b4:	2200      	movs	r2, #0
 802a3b6:	08c0      	lsrs	r0, r0, #3
 802a3b8:	6123      	str	r3, [r4, #16]
 802a3ba:	f647 73ff 	movw	r3, #32767	; 0x7fff
 802a3be:	6060      	str	r0, [r4, #4]
 802a3c0:	82a3      	strh	r3, [r4, #20]
 802a3c2:	82e3      	strh	r3, [r4, #22]
 802a3c4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 802a3c6:	60a2      	str	r2, [r4, #8]
 802a3c8:	f023 0301 	bic.w	r3, r3, #1
 802a3cc:	8322      	strh	r2, [r4, #24]
 802a3ce:	8362      	strh	r2, [r4, #26]
 802a3d0:	f043 0302 	orr.w	r3, r3, #2
 802a3d4:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 802a3d8:	63e3      	str	r3, [r4, #60]	; 0x3c
 802a3da:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 802a3de:	e9c4 330b 	strd	r3, r3, [r4, #44]	; 0x2c
 802a3e2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 802a3e6:	e9c4 330d 	strd	r3, r3, [r4, #52]	; 0x34
 802a3ea:	bd10      	pop	{r4, pc}

0802a3ec <_ZN8touchgfx7OutlineC1Ev>:
 802a3ec:	4b0f      	ldr	r3, [pc, #60]	; (802a42c <_ZN8touchgfx7OutlineC1Ev+0x40>)
 802a3ee:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 802a3f2:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 802a3f6:	b510      	push	{r4, lr}
 802a3f8:	6003      	str	r3, [r0, #0]
 802a3fa:	2300      	movs	r3, #0
 802a3fc:	4604      	mov	r4, r0
 802a3fe:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
 802a402:	e9c0 3301 	strd	r3, r3, [r0, #4]
 802a406:	e9c0 3303 	strd	r3, r3, [r0, #12]
 802a40a:	e9c0 3305 	strd	r3, r3, [r0, #20]
 802a40e:	e9c0 3307 	strd	r3, r3, [r0, #28]
 802a412:	e9c0 3309 	strd	r3, r3, [r0, #36]	; 0x24
 802a416:	e9c0 220b 	strd	r2, r2, [r0, #44]	; 0x2c
 802a41a:	e9c0 110d 	strd	r1, r1, [r0, #52]	; 0x34
 802a41e:	e9c0 320f 	strd	r3, r2, [r0, #60]	; 0x3c
 802a422:	f7ff ffbf 	bl	802a3a4 <_ZN8touchgfx7Outline5resetEv>
 802a426:	4620      	mov	r0, r4
 802a428:	bd10      	pop	{r4, pc}
 802a42a:	bf00      	nop
 802a42c:	08031b9c 	.word	0x08031b9c

0802a430 <_ZN8touchgfx7Outline10renderLineEiiii>:
 802a430:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802a434:	b095      	sub	sp, #84	; 0x54
 802a436:	4604      	mov	r4, r0
 802a438:	1155      	asrs	r5, r2, #5
 802a43a:	f002 061f 	and.w	r6, r2, #31
 802a43e:	981e      	ldr	r0, [sp, #120]	; 0x78
 802a440:	1157      	asrs	r7, r2, #5
 802a442:	9304      	str	r3, [sp, #16]
 802a444:	1153      	asrs	r3, r2, #5
 802a446:	9300      	str	r3, [sp, #0]
 802a448:	1143      	asrs	r3, r0, #5
 802a44a:	930c      	str	r3, [sp, #48]	; 0x30
 802a44c:	f000 031f 	and.w	r3, r0, #31
 802a450:	9303      	str	r3, [sp, #12]
 802a452:	6b23      	ldr	r3, [r4, #48]	; 0x30
 802a454:	42ab      	cmp	r3, r5
 802a456:	bfc8      	it	gt
 802a458:	462b      	movgt	r3, r5
 802a45a:	ea4f 1562 	mov.w	r5, r2, asr #5
 802a45e:	bfc8      	it	gt
 802a460:	6323      	strgt	r3, [r4, #48]	; 0x30
 802a462:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 802a464:	42ab      	cmp	r3, r5
 802a466:	bfd8      	it	le
 802a468:	462b      	movle	r3, r5
 802a46a:	ea4f 1560 	mov.w	r5, r0, asr #5
 802a46e:	bfdc      	itt	le
 802a470:	3301      	addle	r3, #1
 802a472:	63a3      	strle	r3, [r4, #56]	; 0x38
 802a474:	6b23      	ldr	r3, [r4, #48]	; 0x30
 802a476:	42ab      	cmp	r3, r5
 802a478:	bfc8      	it	gt
 802a47a:	462b      	movgt	r3, r5
 802a47c:	ea4f 1560 	mov.w	r5, r0, asr #5
 802a480:	bfc8      	it	gt
 802a482:	6323      	strgt	r3, [r4, #48]	; 0x30
 802a484:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 802a486:	42ab      	cmp	r3, r5
 802a488:	bfd8      	it	le
 802a48a:	462b      	movle	r3, r5
 802a48c:	ea4f 1561 	mov.w	r5, r1, asr #5
 802a490:	bfdc      	itt	le
 802a492:	3301      	addle	r3, #1
 802a494:	63a3      	strle	r3, [r4, #56]	; 0x38
 802a496:	9b04      	ldr	r3, [sp, #16]
 802a498:	eba3 0a01 	sub.w	sl, r3, r1
 802a49c:	1143      	asrs	r3, r0, #5
 802a49e:	429f      	cmp	r7, r3
 802a4a0:	f040 811d 	bne.w	802a6de <_ZN8touchgfx7Outline10renderLineEiiii+0x2ae>
 802a4a4:	9b04      	ldr	r3, [sp, #16]
 802a4a6:	ea4f 1b63 	mov.w	fp, r3, asr #5
 802a4aa:	9b03      	ldr	r3, [sp, #12]
 802a4ac:	429e      	cmp	r6, r3
 802a4ae:	d131      	bne.n	802a514 <_ZN8touchgfx7Outline10renderLineEiiii+0xe4>
 802a4b0:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 802a4b4:	fa0f fb8b 	sxth.w	fp, fp
 802a4b8:	f9bd 2000 	ldrsh.w	r2, [sp]
 802a4bc:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
 802a4c0:	eb0b 4002 	add.w	r0, fp, r2, lsl #16
 802a4c4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 802a4c8:	4281      	cmp	r1, r0
 802a4ca:	f000 80e6 	beq.w	802a69a <_ZN8touchgfx7Outline10renderLineEiiii+0x26a>
 802a4ce:	8b60      	ldrh	r0, [r4, #26]
 802a4d0:	8b21      	ldrh	r1, [r4, #24]
 802a4d2:	4301      	orrs	r1, r0
 802a4d4:	d00b      	beq.n	802a4ee <_ZN8touchgfx7Outline10renderLineEiiii+0xbe>
 802a4d6:	2b00      	cmp	r3, #0
 802a4d8:	db09      	blt.n	802a4ee <_ZN8touchgfx7Outline10renderLineEiiii+0xbe>
 802a4da:	6c21      	ldr	r1, [r4, #64]	; 0x40
 802a4dc:	428b      	cmp	r3, r1
 802a4de:	da06      	bge.n	802a4ee <_ZN8touchgfx7Outline10renderLineEiiii+0xbe>
 802a4e0:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 802a4e4:	4299      	cmp	r1, r3
 802a4e6:	d308      	bcc.n	802a4fa <_ZN8touchgfx7Outline10renderLineEiiii+0xca>
 802a4e8:	2301      	movs	r3, #1
 802a4ea:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 802a4ee:	f8a4 b014 	strh.w	fp, [r4, #20]
 802a4f2:	2300      	movs	r3, #0
 802a4f4:	82e2      	strh	r2, [r4, #22]
 802a4f6:	8323      	strh	r3, [r4, #24]
 802a4f8:	e01f      	b.n	802a53a <_ZN8touchgfx7Outline10renderLineEiiii+0x10a>
 802a4fa:	f104 0314 	add.w	r3, r4, #20
 802a4fe:	6925      	ldr	r5, [r4, #16]
 802a500:	cb03      	ldmia	r3!, {r0, r1}
 802a502:	6028      	str	r0, [r5, #0]
 802a504:	6069      	str	r1, [r5, #4]
 802a506:	6923      	ldr	r3, [r4, #16]
 802a508:	3308      	adds	r3, #8
 802a50a:	6123      	str	r3, [r4, #16]
 802a50c:	68a3      	ldr	r3, [r4, #8]
 802a50e:	3301      	adds	r3, #1
 802a510:	60a3      	str	r3, [r4, #8]
 802a512:	e7ec      	b.n	802a4ee <_ZN8touchgfx7Outline10renderLineEiiii+0xbe>
 802a514:	9b04      	ldr	r3, [sp, #16]
 802a516:	45ab      	cmp	fp, r5
 802a518:	f001 011f 	and.w	r1, r1, #31
 802a51c:	8b20      	ldrh	r0, [r4, #24]
 802a51e:	f003 031f 	and.w	r3, r3, #31
 802a522:	8b62      	ldrh	r2, [r4, #26]
 802a524:	9305      	str	r3, [sp, #20]
 802a526:	9b03      	ldr	r3, [sp, #12]
 802a528:	eba3 0306 	sub.w	r3, r3, r6
 802a52c:	d107      	bne.n	802a53e <_ZN8touchgfx7Outline10renderLineEiiii+0x10e>
 802a52e:	4418      	add	r0, r3
 802a530:	8320      	strh	r0, [r4, #24]
 802a532:	9805      	ldr	r0, [sp, #20]
 802a534:	4401      	add	r1, r0
 802a536:	fb03 2301 	mla	r3, r3, r1, r2
 802a53a:	8363      	strh	r3, [r4, #26]
 802a53c:	e0ad      	b.n	802a69a <_ZN8touchgfx7Outline10renderLineEiiii+0x26a>
 802a53e:	f1ba 0f00 	cmp.w	sl, #0
 802a542:	db33      	blt.n	802a5ac <_ZN8touchgfx7Outline10renderLineEiiii+0x17c>
 802a544:	2701      	movs	r7, #1
 802a546:	f1c1 0c20 	rsb	ip, r1, #32
 802a54a:	9702      	str	r7, [sp, #8]
 802a54c:	2720      	movs	r7, #32
 802a54e:	fb03 f30c 	mul.w	r3, r3, ip
 802a552:	9701      	str	r7, [sp, #4]
 802a554:	9f01      	ldr	r7, [sp, #4]
 802a556:	f9b4 8016 	ldrsh.w	r8, [r4, #22]
 802a55a:	4439      	add	r1, r7
 802a55c:	fb93 fcfa 	sdiv	ip, r3, sl
 802a560:	fb0a 331c 	mls	r3, sl, ip, r3
 802a564:	2b00      	cmp	r3, #0
 802a566:	bfbc      	itt	lt
 802a568:	f10c 3cff 	addlt.w	ip, ip, #4294967295
 802a56c:	4453      	addlt	r3, sl
 802a56e:	fb0c 2101 	mla	r1, ip, r1, r2
 802a572:	9a02      	ldr	r2, [sp, #8]
 802a574:	4460      	add	r0, ip
 802a576:	4415      	add	r5, r2
 802a578:	f9bd 2000 	ldrsh.w	r2, [sp]
 802a57c:	b200      	sxth	r0, r0
 802a57e:	0417      	lsls	r7, r2, #16
 802a580:	9200      	str	r2, [sp, #0]
 802a582:	fa0f fe85 	sxth.w	lr, r5
 802a586:	8320      	strh	r0, [r4, #24]
 802a588:	9704      	str	r7, [sp, #16]
 802a58a:	b209      	sxth	r1, r1
 802a58c:	f9b4 7014 	ldrsh.w	r7, [r4, #20]
 802a590:	9a04      	ldr	r2, [sp, #16]
 802a592:	eb07 4708 	add.w	r7, r7, r8, lsl #16
 802a596:	8361      	strh	r1, [r4, #26]
 802a598:	eb0e 0902 	add.w	r9, lr, r2
 802a59c:	454f      	cmp	r7, r9
 802a59e:	d10d      	bne.n	802a5bc <_ZN8touchgfx7Outline10renderLineEiiii+0x18c>
 802a5a0:	4ba0      	ldr	r3, [pc, #640]	; (802a824 <_ZN8touchgfx7Outline10renderLineEiiii+0x3f4>)
 802a5a2:	2177      	movs	r1, #119	; 0x77
 802a5a4:	4aa0      	ldr	r2, [pc, #640]	; (802a828 <_ZN8touchgfx7Outline10renderLineEiiii+0x3f8>)
 802a5a6:	48a1      	ldr	r0, [pc, #644]	; (802a82c <_ZN8touchgfx7Outline10renderLineEiiii+0x3fc>)
 802a5a8:	f001 f966 	bl	802b878 <__assert_func>
 802a5ac:	f04f 37ff 	mov.w	r7, #4294967295
 802a5b0:	434b      	muls	r3, r1
 802a5b2:	f1ca 0a00 	rsb	sl, sl, #0
 802a5b6:	9702      	str	r7, [sp, #8]
 802a5b8:	2700      	movs	r7, #0
 802a5ba:	e7ca      	b.n	802a552 <_ZN8touchgfx7Outline10renderLineEiiii+0x122>
 802a5bc:	ea50 0201 	orrs.w	r2, r0, r1
 802a5c0:	d00c      	beq.n	802a5dc <_ZN8touchgfx7Outline10renderLineEiiii+0x1ac>
 802a5c2:	f1b8 0f00 	cmp.w	r8, #0
 802a5c6:	db09      	blt.n	802a5dc <_ZN8touchgfx7Outline10renderLineEiiii+0x1ac>
 802a5c8:	6c21      	ldr	r1, [r4, #64]	; 0x40
 802a5ca:	4588      	cmp	r8, r1
 802a5cc:	da06      	bge.n	802a5dc <_ZN8touchgfx7Outline10renderLineEiiii+0x1ac>
 802a5ce:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 802a5d2:	4288      	cmp	r0, r1
 802a5d4:	d364      	bcc.n	802a6a0 <_ZN8touchgfx7Outline10renderLineEiiii+0x270>
 802a5d6:	2101      	movs	r1, #1
 802a5d8:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 802a5dc:	2100      	movs	r1, #0
 802a5de:	9a00      	ldr	r2, [sp, #0]
 802a5e0:	45ab      	cmp	fp, r5
 802a5e2:	f8a4 e014 	strh.w	lr, [r4, #20]
 802a5e6:	82e2      	strh	r2, [r4, #22]
 802a5e8:	4466      	add	r6, ip
 802a5ea:	8321      	strh	r1, [r4, #24]
 802a5ec:	8361      	strh	r1, [r4, #26]
 802a5ee:	d04b      	beq.n	802a688 <_ZN8touchgfx7Outline10renderLineEiiii+0x258>
 802a5f0:	9a03      	ldr	r2, [sp, #12]
 802a5f2:	eba3 030a 	sub.w	r3, r3, sl
 802a5f6:	f04f 0800 	mov.w	r8, #0
 802a5fa:	1b91      	subs	r1, r2, r6
 802a5fc:	448c      	add	ip, r1
 802a5fe:	ea4f 1c4c 	mov.w	ip, ip, lsl #5
 802a602:	fb9c f7fa 	sdiv	r7, ip, sl
 802a606:	fb0a cc17 	mls	ip, sl, r7, ip
 802a60a:	f1bc 0f00 	cmp.w	ip, #0
 802a60e:	bfbc      	itt	lt
 802a610:	f107 37ff 	addlt.w	r7, r7, #4294967295
 802a614:	44d4      	addlt	ip, sl
 802a616:	1c7a      	adds	r2, r7, #1
 802a618:	9207      	str	r2, [sp, #28]
 802a61a:	eb13 030c 	adds.w	r3, r3, ip
 802a61e:	9a02      	ldr	r2, [sp, #8]
 802a620:	bf54      	ite	pl
 802a622:	9807      	ldrpl	r0, [sp, #28]
 802a624:	4638      	movmi	r0, r7
 802a626:	4415      	add	r5, r2
 802a628:	9a04      	ldr	r2, [sp, #16]
 802a62a:	fa0f fe80 	sxth.w	lr, r0
 802a62e:	4406      	add	r6, r0
 802a630:	ea4f 1140 	mov.w	r1, r0, lsl #5
 802a634:	f9b4 0014 	ldrsh.w	r0, [r4, #20]
 802a638:	fa0f f985 	sxth.w	r9, r5
 802a63c:	bf58      	it	pl
 802a63e:	eba3 030a 	subpl.w	r3, r3, sl
 802a642:	4410      	add	r0, r2
 802a644:	b209      	sxth	r1, r1
 802a646:	444a      	add	r2, r9
 802a648:	f8a4 e018 	strh.w	lr, [r4, #24]
 802a64c:	8361      	strh	r1, [r4, #26]
 802a64e:	4290      	cmp	r0, r2
 802a650:	d0a6      	beq.n	802a5a0 <_ZN8touchgfx7Outline10renderLineEiiii+0x170>
 802a652:	ea5e 0201 	orrs.w	r2, lr, r1
 802a656:	d00d      	beq.n	802a674 <_ZN8touchgfx7Outline10renderLineEiiii+0x244>
 802a658:	9a00      	ldr	r2, [sp, #0]
 802a65a:	2a00      	cmp	r2, #0
 802a65c:	db0a      	blt.n	802a674 <_ZN8touchgfx7Outline10renderLineEiiii+0x244>
 802a65e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 802a660:	428a      	cmp	r2, r1
 802a662:	da07      	bge.n	802a674 <_ZN8touchgfx7Outline10renderLineEiiii+0x244>
 802a664:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 802a668:	4288      	cmp	r0, r1
 802a66a:	d329      	bcc.n	802a6c0 <_ZN8touchgfx7Outline10renderLineEiiii+0x290>
 802a66c:	f04f 0201 	mov.w	r2, #1
 802a670:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 802a674:	9a00      	ldr	r2, [sp, #0]
 802a676:	45ab      	cmp	fp, r5
 802a678:	f8a4 9014 	strh.w	r9, [r4, #20]
 802a67c:	82e2      	strh	r2, [r4, #22]
 802a67e:	f8a4 8018 	strh.w	r8, [r4, #24]
 802a682:	f8a4 801a 	strh.w	r8, [r4, #26]
 802a686:	d1c8      	bne.n	802a61a <_ZN8touchgfx7Outline10renderLineEiiii+0x1ea>
 802a688:	9b03      	ldr	r3, [sp, #12]
 802a68a:	9a01      	ldr	r2, [sp, #4]
 802a68c:	1b9e      	subs	r6, r3, r6
 802a68e:	9b05      	ldr	r3, [sp, #20]
 802a690:	3320      	adds	r3, #32
 802a692:	8326      	strh	r6, [r4, #24]
 802a694:	1a9b      	subs	r3, r3, r2
 802a696:	435e      	muls	r6, r3
 802a698:	8366      	strh	r6, [r4, #26]
 802a69a:	b015      	add	sp, #84	; 0x54
 802a69c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802a6a0:	f104 0714 	add.w	r7, r4, #20
 802a6a4:	f8d4 8010 	ldr.w	r8, [r4, #16]
 802a6a8:	cf03      	ldmia	r7!, {r0, r1}
 802a6aa:	f8c8 0000 	str.w	r0, [r8]
 802a6ae:	f8c8 1004 	str.w	r1, [r8, #4]
 802a6b2:	6921      	ldr	r1, [r4, #16]
 802a6b4:	3108      	adds	r1, #8
 802a6b6:	6121      	str	r1, [r4, #16]
 802a6b8:	68a1      	ldr	r1, [r4, #8]
 802a6ba:	3101      	adds	r1, #1
 802a6bc:	60a1      	str	r1, [r4, #8]
 802a6be:	e78d      	b.n	802a5dc <_ZN8touchgfx7Outline10renderLineEiiii+0x1ac>
 802a6c0:	f104 0e14 	add.w	lr, r4, #20
 802a6c4:	6922      	ldr	r2, [r4, #16]
 802a6c6:	e8be 0003 	ldmia.w	lr!, {r0, r1}
 802a6ca:	9206      	str	r2, [sp, #24]
 802a6cc:	6010      	str	r0, [r2, #0]
 802a6ce:	6051      	str	r1, [r2, #4]
 802a6d0:	6921      	ldr	r1, [r4, #16]
 802a6d2:	3108      	adds	r1, #8
 802a6d4:	6121      	str	r1, [r4, #16]
 802a6d6:	68a1      	ldr	r1, [r4, #8]
 802a6d8:	3101      	adds	r1, #1
 802a6da:	60a1      	str	r1, [r4, #8]
 802a6dc:	e7ca      	b.n	802a674 <_ZN8touchgfx7Outline10renderLineEiiii+0x244>
 802a6de:	eba0 0b02 	sub.w	fp, r0, r2
 802a6e2:	f1ba 0f00 	cmp.w	sl, #0
 802a6e6:	f040 80a3 	bne.w	802a830 <_ZN8touchgfx7Outline10renderLineEiiii+0x400>
 802a6ea:	f1bb 0f00 	cmp.w	fp, #0
 802a6ee:	ea4f 0141 	mov.w	r1, r1, lsl #1
 802a6f2:	8b62      	ldrh	r2, [r4, #26]
 802a6f4:	b22d      	sxth	r5, r5
 802a6f6:	bfa8      	it	ge
 802a6f8:	f04f 0a20 	movge.w	sl, #32
 802a6fc:	f001 033e 	and.w	r3, r1, #62	; 0x3e
 802a700:	8b21      	ldrh	r1, [r4, #24]
 802a702:	bfb8      	it	lt
 802a704:	f04f 39ff 	movlt.w	r9, #4294967295
 802a708:	ebaa 0606 	sub.w	r6, sl, r6
 802a70c:	bfa8      	it	ge
 802a70e:	f04f 0901 	movge.w	r9, #1
 802a712:	f9b4 0016 	ldrsh.w	r0, [r4, #22]
 802a716:	4431      	add	r1, r6
 802a718:	fb06 2603 	mla	r6, r6, r3, r2
 802a71c:	9a00      	ldr	r2, [sp, #0]
 802a71e:	f9b4 c014 	ldrsh.w	ip, [r4, #20]
 802a722:	b209      	sxth	r1, r1
 802a724:	444a      	add	r2, r9
 802a726:	b236      	sxth	r6, r6
 802a728:	eb0c 4c00 	add.w	ip, ip, r0, lsl #16
 802a72c:	8321      	strh	r1, [r4, #24]
 802a72e:	b217      	sxth	r7, r2
 802a730:	8366      	strh	r6, [r4, #26]
 802a732:	eb05 4e07 	add.w	lr, r5, r7, lsl #16
 802a736:	45f4      	cmp	ip, lr
 802a738:	f43f af32 	beq.w	802a5a0 <_ZN8touchgfx7Outline10renderLineEiiii+0x170>
 802a73c:	4331      	orrs	r1, r6
 802a73e:	d00b      	beq.n	802a758 <_ZN8touchgfx7Outline10renderLineEiiii+0x328>
 802a740:	2800      	cmp	r0, #0
 802a742:	db09      	blt.n	802a758 <_ZN8touchgfx7Outline10renderLineEiiii+0x328>
 802a744:	6c21      	ldr	r1, [r4, #64]	; 0x40
 802a746:	4288      	cmp	r0, r1
 802a748:	da06      	bge.n	802a758 <_ZN8touchgfx7Outline10renderLineEiiii+0x328>
 802a74a:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 802a74e:	4288      	cmp	r0, r1
 802a750:	d33b      	bcc.n	802a7ca <_ZN8touchgfx7Outline10renderLineEiiii+0x39a>
 802a752:	2101      	movs	r1, #1
 802a754:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 802a758:	f1aa 0610 	sub.w	r6, sl, #16
 802a75c:	82e7      	strh	r7, [r4, #22]
 802a75e:	2700      	movs	r7, #0
 802a760:	82a5      	strh	r5, [r4, #20]
 802a762:	0076      	lsls	r6, r6, #1
 802a764:	8327      	strh	r7, [r4, #24]
 802a766:	fb06 fc03 	mul.w	ip, r6, r3
 802a76a:	b236      	sxth	r6, r6
 802a76c:	8367      	strh	r7, [r4, #26]
 802a76e:	fa0f fc8c 	sxth.w	ip, ip
 802a772:	ea46 010c 	orr.w	r1, r6, ip
 802a776:	9100      	str	r1, [sp, #0]
 802a778:	990c      	ldr	r1, [sp, #48]	; 0x30
 802a77a:	428a      	cmp	r2, r1
 802a77c:	d046      	beq.n	802a80c <_ZN8touchgfx7Outline10renderLineEiiii+0x3dc>
 802a77e:	444a      	add	r2, r9
 802a780:	f9b4 1016 	ldrsh.w	r1, [r4, #22]
 802a784:	f9b4 0014 	ldrsh.w	r0, [r4, #20]
 802a788:	fa0f f882 	sxth.w	r8, r2
 802a78c:	8326      	strh	r6, [r4, #24]
 802a78e:	eb00 4001 	add.w	r0, r0, r1, lsl #16
 802a792:	f8a4 c01a 	strh.w	ip, [r4, #26]
 802a796:	eb05 4e08 	add.w	lr, r5, r8, lsl #16
 802a79a:	4570      	cmp	r0, lr
 802a79c:	f43f af00 	beq.w	802a5a0 <_ZN8touchgfx7Outline10renderLineEiiii+0x170>
 802a7a0:	9800      	ldr	r0, [sp, #0]
 802a7a2:	b160      	cbz	r0, 802a7be <_ZN8touchgfx7Outline10renderLineEiiii+0x38e>
 802a7a4:	2900      	cmp	r1, #0
 802a7a6:	db0a      	blt.n	802a7be <_ZN8touchgfx7Outline10renderLineEiiii+0x38e>
 802a7a8:	6c20      	ldr	r0, [r4, #64]	; 0x40
 802a7aa:	4281      	cmp	r1, r0
 802a7ac:	da07      	bge.n	802a7be <_ZN8touchgfx7Outline10renderLineEiiii+0x38e>
 802a7ae:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 802a7b2:	4288      	cmp	r0, r1
 802a7b4:	d319      	bcc.n	802a7ea <_ZN8touchgfx7Outline10renderLineEiiii+0x3ba>
 802a7b6:	f04f 0101 	mov.w	r1, #1
 802a7ba:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 802a7be:	82a5      	strh	r5, [r4, #20]
 802a7c0:	f8a4 8016 	strh.w	r8, [r4, #22]
 802a7c4:	8327      	strh	r7, [r4, #24]
 802a7c6:	8367      	strh	r7, [r4, #26]
 802a7c8:	e7d6      	b.n	802a778 <_ZN8touchgfx7Outline10renderLineEiiii+0x348>
 802a7ca:	f104 0614 	add.w	r6, r4, #20
 802a7ce:	f8d4 c010 	ldr.w	ip, [r4, #16]
 802a7d2:	ce03      	ldmia	r6!, {r0, r1}
 802a7d4:	f8cc 0000 	str.w	r0, [ip]
 802a7d8:	f8cc 1004 	str.w	r1, [ip, #4]
 802a7dc:	6921      	ldr	r1, [r4, #16]
 802a7de:	3108      	adds	r1, #8
 802a7e0:	6121      	str	r1, [r4, #16]
 802a7e2:	68a1      	ldr	r1, [r4, #8]
 802a7e4:	3101      	adds	r1, #1
 802a7e6:	60a1      	str	r1, [r4, #8]
 802a7e8:	e7b6      	b.n	802a758 <_ZN8touchgfx7Outline10renderLineEiiii+0x328>
 802a7ea:	f104 0e14 	add.w	lr, r4, #20
 802a7ee:	f8d4 b010 	ldr.w	fp, [r4, #16]
 802a7f2:	e8be 0003 	ldmia.w	lr!, {r0, r1}
 802a7f6:	f8cb 0000 	str.w	r0, [fp]
 802a7fa:	f8cb 1004 	str.w	r1, [fp, #4]
 802a7fe:	6921      	ldr	r1, [r4, #16]
 802a800:	3108      	adds	r1, #8
 802a802:	6121      	str	r1, [r4, #16]
 802a804:	68a1      	ldr	r1, [r4, #8]
 802a806:	3101      	adds	r1, #1
 802a808:	60a1      	str	r1, [r4, #8]
 802a80a:	e7d8      	b.n	802a7be <_ZN8touchgfx7Outline10renderLineEiiii+0x38e>
 802a80c:	9a03      	ldr	r2, [sp, #12]
 802a80e:	8b61      	ldrh	r1, [r4, #26]
 802a810:	f1a2 0e20 	sub.w	lr, r2, #32
 802a814:	8b22      	ldrh	r2, [r4, #24]
 802a816:	44d6      	add	lr, sl
 802a818:	4472      	add	r2, lr
 802a81a:	fb0e 1303 	mla	r3, lr, r3, r1
 802a81e:	8322      	strh	r2, [r4, #24]
 802a820:	e68b      	b.n	802a53a <_ZN8touchgfx7Outline10renderLineEiiii+0x10a>
 802a822:	bf00      	nop
 802a824:	08031b23 	.word	0x08031b23
 802a828:	08031ba4 	.word	0x08031ba4
 802a82c:	08031b54 	.word	0x08031b54
 802a830:	f1bb 0f00 	cmp.w	fp, #0
 802a834:	f2c0 8124 	blt.w	802aa80 <_ZN8touchgfx7Outline10renderLineEiiii+0x650>
 802a838:	2201      	movs	r2, #1
 802a83a:	f1c6 0320 	rsb	r3, r6, #32
 802a83e:	920b      	str	r2, [sp, #44]	; 0x2c
 802a840:	2220      	movs	r2, #32
 802a842:	fb0a f303 	mul.w	r3, sl, r3
 802a846:	f9b4 8016 	ldrsh.w	r8, [r4, #22]
 802a84a:	9202      	str	r2, [sp, #8]
 802a84c:	fb93 fcfb 	sdiv	ip, r3, fp
 802a850:	fb0b 331c 	mls	r3, fp, ip, r3
 802a854:	2b00      	cmp	r3, #0
 802a856:	9308      	str	r3, [sp, #32]
 802a858:	bfbe      	ittt	lt
 802a85a:	f10c 3cff 	addlt.w	ip, ip, #4294967295
 802a85e:	445b      	addlt	r3, fp
 802a860:	9308      	strlt	r3, [sp, #32]
 802a862:	eb0c 0301 	add.w	r3, ip, r1
 802a866:	9301      	str	r3, [sp, #4]
 802a868:	115b      	asrs	r3, r3, #5
 802a86a:	9305      	str	r3, [sp, #20]
 802a86c:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
 802a870:	eb03 4308 	add.w	r3, r3, r8, lsl #16
 802a874:	461f      	mov	r7, r3
 802a876:	9b02      	ldr	r3, [sp, #8]
 802a878:	42b3      	cmp	r3, r6
 802a87a:	f040 8117 	bne.w	802aaac <_ZN8touchgfx7Outline10renderLineEiiii+0x67c>
 802a87e:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
 802a882:	f9bd 3000 	ldrsh.w	r3, [sp]
 802a886:	eb02 4103 	add.w	r1, r2, r3, lsl #16
 802a88a:	42b9      	cmp	r1, r7
 802a88c:	d016      	beq.n	802a8bc <_ZN8touchgfx7Outline10renderLineEiiii+0x48c>
 802a88e:	8b60      	ldrh	r0, [r4, #26]
 802a890:	8b21      	ldrh	r1, [r4, #24]
 802a892:	4301      	orrs	r1, r0
 802a894:	d00d      	beq.n	802a8b2 <_ZN8touchgfx7Outline10renderLineEiiii+0x482>
 802a896:	f1b8 0f00 	cmp.w	r8, #0
 802a89a:	db0a      	blt.n	802a8b2 <_ZN8touchgfx7Outline10renderLineEiiii+0x482>
 802a89c:	6c21      	ldr	r1, [r4, #64]	; 0x40
 802a89e:	4541      	cmp	r1, r8
 802a8a0:	dd07      	ble.n	802a8b2 <_ZN8touchgfx7Outline10renderLineEiiii+0x482>
 802a8a2:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 802a8a6:	4288      	cmp	r0, r1
 802a8a8:	f0c0 80f3 	bcc.w	802aa92 <_ZN8touchgfx7Outline10renderLineEiiii+0x662>
 802a8ac:	2101      	movs	r1, #1
 802a8ae:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 802a8b2:	82e3      	strh	r3, [r4, #22]
 802a8b4:	2300      	movs	r3, #0
 802a8b6:	82a2      	strh	r2, [r4, #20]
 802a8b8:	8323      	strh	r3, [r4, #24]
 802a8ba:	8363      	strh	r3, [r4, #26]
 802a8bc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802a8be:	9a00      	ldr	r2, [sp, #0]
 802a8c0:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
 802a8c4:	441a      	add	r2, r3
 802a8c6:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 802a8ca:	4691      	mov	r9, r2
 802a8cc:	f9b4 2016 	ldrsh.w	r2, [r4, #22]
 802a8d0:	fa0f f589 	sxth.w	r5, r9
 802a8d4:	eb01 4102 	add.w	r1, r1, r2, lsl #16
 802a8d8:	eb03 4005 	add.w	r0, r3, r5, lsl #16
 802a8dc:	4281      	cmp	r1, r0
 802a8de:	d015      	beq.n	802a90c <_ZN8touchgfx7Outline10renderLineEiiii+0x4dc>
 802a8e0:	8b60      	ldrh	r0, [r4, #26]
 802a8e2:	8b21      	ldrh	r1, [r4, #24]
 802a8e4:	4301      	orrs	r1, r0
 802a8e6:	d00c      	beq.n	802a902 <_ZN8touchgfx7Outline10renderLineEiiii+0x4d2>
 802a8e8:	2a00      	cmp	r2, #0
 802a8ea:	db0a      	blt.n	802a902 <_ZN8touchgfx7Outline10renderLineEiiii+0x4d2>
 802a8ec:	6c21      	ldr	r1, [r4, #64]	; 0x40
 802a8ee:	428a      	cmp	r2, r1
 802a8f0:	da07      	bge.n	802a902 <_ZN8touchgfx7Outline10renderLineEiiii+0x4d2>
 802a8f2:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 802a8f6:	4291      	cmp	r1, r2
 802a8f8:	f0c0 81ae 	bcc.w	802ac58 <_ZN8touchgfx7Outline10renderLineEiiii+0x828>
 802a8fc:	2201      	movs	r2, #1
 802a8fe:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 802a902:	82a3      	strh	r3, [r4, #20]
 802a904:	2300      	movs	r3, #0
 802a906:	82e5      	strh	r5, [r4, #22]
 802a908:	8323      	strh	r3, [r4, #24]
 802a90a:	8363      	strh	r3, [r4, #26]
 802a90c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802a90e:	454b      	cmp	r3, r9
 802a910:	f000 808a 	beq.w	802aa28 <_ZN8touchgfx7Outline10renderLineEiiii+0x5f8>
 802a914:	ea4f 134a 	mov.w	r3, sl, lsl #5
 802a918:	fb93 f2fb 	sdiv	r2, r3, fp
 802a91c:	fb0b 3312 	mls	r3, fp, r2, r3
 802a920:	9205      	str	r2, [sp, #20]
 802a922:	2b00      	cmp	r3, #0
 802a924:	9307      	str	r3, [sp, #28]
 802a926:	da04      	bge.n	802a932 <_ZN8touchgfx7Outline10renderLineEiiii+0x502>
 802a928:	1e53      	subs	r3, r2, #1
 802a92a:	9305      	str	r3, [sp, #20]
 802a92c:	9b07      	ldr	r3, [sp, #28]
 802a92e:	445b      	add	r3, fp
 802a930:	9307      	str	r3, [sp, #28]
 802a932:	9b08      	ldr	r3, [sp, #32]
 802a934:	f04f 0a00 	mov.w	sl, #0
 802a938:	eba3 030b 	sub.w	r3, r3, fp
 802a93c:	9308      	str	r3, [sp, #32]
 802a93e:	e9dd c301 	ldrd	ip, r3, [sp, #4]
 802a942:	f1c3 0320 	rsb	r3, r3, #32
 802a946:	930a      	str	r3, [sp, #40]	; 0x28
 802a948:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802a94a:	9b02      	ldr	r3, [sp, #8]
 802a94c:	1a9b      	subs	r3, r3, r2
 802a94e:	9309      	str	r3, [sp, #36]	; 0x24
 802a950:	9902      	ldr	r1, [sp, #8]
 802a952:	f9b4 6016 	ldrsh.w	r6, [r4, #22]
 802a956:	f9b4 8014 	ldrsh.w	r8, [r4, #20]
 802a95a:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 802a95e:	eb08 4806 	add.w	r8, r8, r6, lsl #16
 802a962:	189b      	adds	r3, r3, r2
 802a964:	9308      	str	r3, [sp, #32]
 802a966:	bf57      	itett	pl
 802a968:	eba3 030b 	subpl.w	r3, r3, fp
 802a96c:	9b05      	ldrmi	r3, [sp, #20]
 802a96e:	9308      	strpl	r3, [sp, #32]
 802a970:	9b05      	ldrpl	r3, [sp, #20]
 802a972:	bf58      	it	pl
 802a974:	3301      	addpl	r3, #1
 802a976:	9300      	str	r3, [sp, #0]
 802a978:	e9dd 2300 	ldrd	r2, r3, [sp]
 802a97c:	4413      	add	r3, r2
 802a97e:	9301      	str	r3, [sp, #4]
 802a980:	115b      	asrs	r3, r3, #5
 802a982:	9306      	str	r3, [sp, #24]
 802a984:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802a986:	428b      	cmp	r3, r1
 802a988:	f040 8180 	bne.w	802ac8c <_ZN8touchgfx7Outline10renderLineEiiii+0x85c>
 802a98c:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
 802a990:	fa0f f389 	sxth.w	r3, r9
 802a994:	eb02 4103 	add.w	r1, r2, r3, lsl #16
 802a998:	4541      	cmp	r1, r8
 802a99a:	d017      	beq.n	802a9cc <_ZN8touchgfx7Outline10renderLineEiiii+0x59c>
 802a99c:	8b60      	ldrh	r0, [r4, #26]
 802a99e:	8b21      	ldrh	r1, [r4, #24]
 802a9a0:	4301      	orrs	r1, r0
 802a9a2:	d00d      	beq.n	802a9c0 <_ZN8touchgfx7Outline10renderLineEiiii+0x590>
 802a9a4:	2e00      	cmp	r6, #0
 802a9a6:	db0b      	blt.n	802a9c0 <_ZN8touchgfx7Outline10renderLineEiiii+0x590>
 802a9a8:	6c21      	ldr	r1, [r4, #64]	; 0x40
 802a9aa:	42b1      	cmp	r1, r6
 802a9ac:	dd08      	ble.n	802a9c0 <_ZN8touchgfx7Outline10renderLineEiiii+0x590>
 802a9ae:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 802a9b2:	4288      	cmp	r0, r1
 802a9b4:	f0c0 815d 	bcc.w	802ac72 <_ZN8touchgfx7Outline10renderLineEiiii+0x842>
 802a9b8:	f04f 0101 	mov.w	r1, #1
 802a9bc:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 802a9c0:	82a2      	strh	r2, [r4, #20]
 802a9c2:	82e3      	strh	r3, [r4, #22]
 802a9c4:	f8a4 a018 	strh.w	sl, [r4, #24]
 802a9c8:	f8a4 a01a 	strh.w	sl, [r4, #26]
 802a9cc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802a9ce:	f9b4 2016 	ldrsh.w	r2, [r4, #22]
 802a9d2:	4499      	add	r9, r3
 802a9d4:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
 802a9d8:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 802a9dc:	fa0f f589 	sxth.w	r5, r9
 802a9e0:	eb01 4102 	add.w	r1, r1, r2, lsl #16
 802a9e4:	eb03 4005 	add.w	r0, r3, r5, lsl #16
 802a9e8:	4281      	cmp	r1, r0
 802a9ea:	f43f add9 	beq.w	802a5a0 <_ZN8touchgfx7Outline10renderLineEiiii+0x170>
 802a9ee:	8b60      	ldrh	r0, [r4, #26]
 802a9f0:	8b21      	ldrh	r1, [r4, #24]
 802a9f2:	4301      	orrs	r1, r0
 802a9f4:	d00d      	beq.n	802aa12 <_ZN8touchgfx7Outline10renderLineEiiii+0x5e2>
 802a9f6:	2a00      	cmp	r2, #0
 802a9f8:	db0b      	blt.n	802aa12 <_ZN8touchgfx7Outline10renderLineEiiii+0x5e2>
 802a9fa:	6c21      	ldr	r1, [r4, #64]	; 0x40
 802a9fc:	428a      	cmp	r2, r1
 802a9fe:	da08      	bge.n	802aa12 <_ZN8touchgfx7Outline10renderLineEiiii+0x5e2>
 802aa00:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 802aa04:	4291      	cmp	r1, r2
 802aa06:	f0c0 8228 	bcc.w	802ae5a <_ZN8touchgfx7Outline10renderLineEiiii+0xa2a>
 802aa0a:	f04f 0201 	mov.w	r2, #1
 802aa0e:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 802aa12:	82a3      	strh	r3, [r4, #20]
 802aa14:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802aa16:	82e5      	strh	r5, [r4, #22]
 802aa18:	454b      	cmp	r3, r9
 802aa1a:	f8a4 a018 	strh.w	sl, [r4, #24]
 802aa1e:	f8a4 a01a 	strh.w	sl, [r4, #26]
 802aa22:	f8dd c004 	ldr.w	ip, [sp, #4]
 802aa26:	d193      	bne.n	802a950 <_ZN8touchgfx7Outline10renderLineEiiii+0x520>
 802aa28:	9b02      	ldr	r3, [sp, #8]
 802aa2a:	f1c3 0e20 	rsb	lr, r3, #32
 802aa2e:	9b04      	ldr	r3, [sp, #16]
 802aa30:	ea4f 1b63 	mov.w	fp, r3, asr #5
 802aa34:	9b03      	ldr	r3, [sp, #12]
 802aa36:	459e      	cmp	lr, r3
 802aa38:	f040 8229 	bne.w	802ae8e <_ZN8touchgfx7Outline10renderLineEiiii+0xa5e>
 802aa3c:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 802aa40:	fa0f f58b 	sxth.w	r5, fp
 802aa44:	fa0f f289 	sxth.w	r2, r9
 802aa48:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
 802aa4c:	eb05 4002 	add.w	r0, r5, r2, lsl #16
 802aa50:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 802aa54:	4281      	cmp	r1, r0
 802aa56:	f43f ae20 	beq.w	802a69a <_ZN8touchgfx7Outline10renderLineEiiii+0x26a>
 802aa5a:	8b60      	ldrh	r0, [r4, #26]
 802aa5c:	8b21      	ldrh	r1, [r4, #24]
 802aa5e:	4301      	orrs	r1, r0
 802aa60:	d00c      	beq.n	802aa7c <_ZN8touchgfx7Outline10renderLineEiiii+0x64c>
 802aa62:	2b00      	cmp	r3, #0
 802aa64:	db0a      	blt.n	802aa7c <_ZN8touchgfx7Outline10renderLineEiiii+0x64c>
 802aa66:	6c21      	ldr	r1, [r4, #64]	; 0x40
 802aa68:	428b      	cmp	r3, r1
 802aa6a:	da07      	bge.n	802aa7c <_ZN8touchgfx7Outline10renderLineEiiii+0x64c>
 802aa6c:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 802aa70:	4299      	cmp	r1, r3
 802aa72:	f0c0 81ff 	bcc.w	802ae74 <_ZN8touchgfx7Outline10renderLineEiiii+0xa44>
 802aa76:	2301      	movs	r3, #1
 802aa78:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 802aa7c:	82a5      	strh	r5, [r4, #20]
 802aa7e:	e538      	b.n	802a4f2 <_ZN8touchgfx7Outline10renderLineEiiii+0xc2>
 802aa80:	f04f 32ff 	mov.w	r2, #4294967295
 802aa84:	fb0a f306 	mul.w	r3, sl, r6
 802aa88:	f1cb 0b00 	rsb	fp, fp, #0
 802aa8c:	920b      	str	r2, [sp, #44]	; 0x2c
 802aa8e:	2200      	movs	r2, #0
 802aa90:	e6d9      	b.n	802a846 <_ZN8touchgfx7Outline10renderLineEiiii+0x416>
 802aa92:	f104 0514 	add.w	r5, r4, #20
 802aa96:	6926      	ldr	r6, [r4, #16]
 802aa98:	cd03      	ldmia	r5!, {r0, r1}
 802aa9a:	6030      	str	r0, [r6, #0]
 802aa9c:	6071      	str	r1, [r6, #4]
 802aa9e:	6921      	ldr	r1, [r4, #16]
 802aaa0:	3108      	adds	r1, #8
 802aaa2:	6121      	str	r1, [r4, #16]
 802aaa4:	68a1      	ldr	r1, [r4, #8]
 802aaa6:	3101      	adds	r1, #1
 802aaa8:	60a1      	str	r1, [r4, #8]
 802aaaa:	e702      	b.n	802a8b2 <_ZN8touchgfx7Outline10renderLineEiiii+0x482>
 802aaac:	9b01      	ldr	r3, [sp, #4]
 802aaae:	f001 011f 	and.w	r1, r1, #31
 802aab2:	8b20      	ldrh	r0, [r4, #24]
 802aab4:	f003 031f 	and.w	r3, r3, #31
 802aab8:	f8b4 901a 	ldrh.w	r9, [r4, #26]
 802aabc:	930d      	str	r3, [sp, #52]	; 0x34
 802aabe:	9b02      	ldr	r3, [sp, #8]
 802aac0:	1b9a      	subs	r2, r3, r6
 802aac2:	9b05      	ldr	r3, [sp, #20]
 802aac4:	42ab      	cmp	r3, r5
 802aac6:	d107      	bne.n	802aad8 <_ZN8touchgfx7Outline10renderLineEiiii+0x6a8>
 802aac8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802aaca:	4410      	add	r0, r2
 802aacc:	4419      	add	r1, r3
 802aace:	8320      	strh	r0, [r4, #24]
 802aad0:	fb02 9201 	mla	r2, r2, r1, r9
 802aad4:	8362      	strh	r2, [r4, #26]
 802aad6:	e6f1      	b.n	802a8bc <_ZN8touchgfx7Outline10renderLineEiiii+0x48c>
 802aad8:	f1bc 0f00 	cmp.w	ip, #0
 802aadc:	f2c0 8093 	blt.w	802ac06 <_ZN8touchgfx7Outline10renderLineEiiii+0x7d6>
 802aae0:	f1c1 0320 	rsb	r3, r1, #32
 802aae4:	435a      	muls	r2, r3
 802aae6:	2301      	movs	r3, #1
 802aae8:	9309      	str	r3, [sp, #36]	; 0x24
 802aaea:	2320      	movs	r3, #32
 802aaec:	9307      	str	r3, [sp, #28]
 802aaee:	9b07      	ldr	r3, [sp, #28]
 802aaf0:	fb92 fefc 	sdiv	lr, r2, ip
 802aaf4:	fb0c 221e 	mls	r2, ip, lr, r2
 802aaf8:	4419      	add	r1, r3
 802aafa:	2a00      	cmp	r2, #0
 802aafc:	bfbc      	itt	lt
 802aafe:	f10e 3eff 	addlt.w	lr, lr, #4294967295
 802ab02:	4462      	addlt	r2, ip
 802ab04:	fb0e 9101 	mla	r1, lr, r1, r9
 802ab08:	4470      	add	r0, lr
 802ab0a:	b20b      	sxth	r3, r1
 802ab0c:	9909      	ldr	r1, [sp, #36]	; 0x24
 802ab0e:	b200      	sxth	r0, r0
 802ab10:	440d      	add	r5, r1
 802ab12:	f9bd 1000 	ldrsh.w	r1, [sp]
 802ab16:	8320      	strh	r0, [r4, #24]
 802ab18:	fa0f f985 	sxth.w	r9, r5
 802ab1c:	9106      	str	r1, [sp, #24]
 802ab1e:	0409      	lsls	r1, r1, #16
 802ab20:	8363      	strh	r3, [r4, #26]
 802ab22:	910a      	str	r1, [sp, #40]	; 0x28
 802ab24:	4449      	add	r1, r9
 802ab26:	42b9      	cmp	r1, r7
 802ab28:	f43f ad3a 	beq.w	802a5a0 <_ZN8touchgfx7Outline10renderLineEiiii+0x170>
 802ab2c:	4303      	orrs	r3, r0
 802ab2e:	d00c      	beq.n	802ab4a <_ZN8touchgfx7Outline10renderLineEiiii+0x71a>
 802ab30:	f1b8 0f00 	cmp.w	r8, #0
 802ab34:	db09      	blt.n	802ab4a <_ZN8touchgfx7Outline10renderLineEiiii+0x71a>
 802ab36:	6c23      	ldr	r3, [r4, #64]	; 0x40
 802ab38:	4543      	cmp	r3, r8
 802ab3a:	dd06      	ble.n	802ab4a <_ZN8touchgfx7Outline10renderLineEiiii+0x71a>
 802ab3c:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 802ab40:	4299      	cmp	r1, r3
 802ab42:	d368      	bcc.n	802ac16 <_ZN8touchgfx7Outline10renderLineEiiii+0x7e6>
 802ab44:	2301      	movs	r3, #1
 802ab46:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 802ab4a:	9b06      	ldr	r3, [sp, #24]
 802ab4c:	4476      	add	r6, lr
 802ab4e:	f8a4 9014 	strh.w	r9, [r4, #20]
 802ab52:	82e3      	strh	r3, [r4, #22]
 802ab54:	2300      	movs	r3, #0
 802ab56:	8323      	strh	r3, [r4, #24]
 802ab58:	8363      	strh	r3, [r4, #26]
 802ab5a:	9b05      	ldr	r3, [sp, #20]
 802ab5c:	42ab      	cmp	r3, r5
 802ab5e:	d048      	beq.n	802abf2 <_ZN8touchgfx7Outline10renderLineEiiii+0x7c2>
 802ab60:	9b02      	ldr	r3, [sp, #8]
 802ab62:	eba2 020c 	sub.w	r2, r2, ip
 802ab66:	1b9b      	subs	r3, r3, r6
 802ab68:	4473      	add	r3, lr
 802ab6a:	015b      	lsls	r3, r3, #5
 802ab6c:	fb93 f8fc 	sdiv	r8, r3, ip
 802ab70:	fb0c 3318 	mls	r3, ip, r8, r3
 802ab74:	2b00      	cmp	r3, #0
 802ab76:	bfbc      	itt	lt
 802ab78:	f108 38ff 	addlt.w	r8, r8, #4294967295
 802ab7c:	4463      	addlt	r3, ip
 802ab7e:	f108 0101 	add.w	r1, r8, #1
 802ab82:	910f      	str	r1, [sp, #60]	; 0x3c
 802ab84:	18d2      	adds	r2, r2, r3
 802ab86:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 802ab88:	bf56      	itet	pl
 802ab8a:	980f      	ldrpl	r0, [sp, #60]	; 0x3c
 802ab8c:	4640      	movmi	r0, r8
 802ab8e:	eba2 020c 	subpl.w	r2, r2, ip
 802ab92:	fa0f fe80 	sxth.w	lr, r0
 802ab96:	4406      	add	r6, r0
 802ab98:	0141      	lsls	r1, r0, #5
 802ab9a:	9809      	ldr	r0, [sp, #36]	; 0x24
 802ab9c:	f8a4 e018 	strh.w	lr, [r4, #24]
 802aba0:	4405      	add	r5, r0
 802aba2:	f9b4 0014 	ldrsh.w	r0, [r4, #20]
 802aba6:	b209      	sxth	r1, r1
 802aba8:	fa0f f985 	sxth.w	r9, r5
 802abac:	4438      	add	r0, r7
 802abae:	8361      	strh	r1, [r4, #26]
 802abb0:	444f      	add	r7, r9
 802abb2:	42b8      	cmp	r0, r7
 802abb4:	f43f acf4 	beq.w	802a5a0 <_ZN8touchgfx7Outline10renderLineEiiii+0x170>
 802abb8:	ea5e 0101 	orrs.w	r1, lr, r1
 802abbc:	d00e      	beq.n	802abdc <_ZN8touchgfx7Outline10renderLineEiiii+0x7ac>
 802abbe:	9906      	ldr	r1, [sp, #24]
 802abc0:	2900      	cmp	r1, #0
 802abc2:	db0b      	blt.n	802abdc <_ZN8touchgfx7Outline10renderLineEiiii+0x7ac>
 802abc4:	6c21      	ldr	r1, [r4, #64]	; 0x40
 802abc6:	9806      	ldr	r0, [sp, #24]
 802abc8:	4288      	cmp	r0, r1
 802abca:	da07      	bge.n	802abdc <_ZN8touchgfx7Outline10renderLineEiiii+0x7ac>
 802abcc:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 802abd0:	4288      	cmp	r0, r1
 802abd2:	d330      	bcc.n	802ac36 <_ZN8touchgfx7Outline10renderLineEiiii+0x806>
 802abd4:	f04f 0101 	mov.w	r1, #1
 802abd8:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 802abdc:	9906      	ldr	r1, [sp, #24]
 802abde:	f8a4 9014 	strh.w	r9, [r4, #20]
 802abe2:	82e1      	strh	r1, [r4, #22]
 802abe4:	f04f 0100 	mov.w	r1, #0
 802abe8:	8321      	strh	r1, [r4, #24]
 802abea:	8361      	strh	r1, [r4, #26]
 802abec:	9905      	ldr	r1, [sp, #20]
 802abee:	42a9      	cmp	r1, r5
 802abf0:	d1c8      	bne.n	802ab84 <_ZN8touchgfx7Outline10renderLineEiiii+0x754>
 802abf2:	9b02      	ldr	r3, [sp, #8]
 802abf4:	990d      	ldr	r1, [sp, #52]	; 0x34
 802abf6:	1b9e      	subs	r6, r3, r6
 802abf8:	9b07      	ldr	r3, [sp, #28]
 802abfa:	3120      	adds	r1, #32
 802abfc:	8326      	strh	r6, [r4, #24]
 802abfe:	1ac9      	subs	r1, r1, r3
 802ac00:	434e      	muls	r6, r1
 802ac02:	8366      	strh	r6, [r4, #26]
 802ac04:	e65a      	b.n	802a8bc <_ZN8touchgfx7Outline10renderLineEiiii+0x48c>
 802ac06:	f04f 33ff 	mov.w	r3, #4294967295
 802ac0a:	434a      	muls	r2, r1
 802ac0c:	f1cc 0c00 	rsb	ip, ip, #0
 802ac10:	9309      	str	r3, [sp, #36]	; 0x24
 802ac12:	2300      	movs	r3, #0
 802ac14:	e76a      	b.n	802aaec <_ZN8touchgfx7Outline10renderLineEiiii+0x6bc>
 802ac16:	f104 0314 	add.w	r3, r4, #20
 802ac1a:	f8d4 8010 	ldr.w	r8, [r4, #16]
 802ac1e:	cb03      	ldmia	r3!, {r0, r1}
 802ac20:	f8c8 0000 	str.w	r0, [r8]
 802ac24:	f8c8 1004 	str.w	r1, [r8, #4]
 802ac28:	6923      	ldr	r3, [r4, #16]
 802ac2a:	3308      	adds	r3, #8
 802ac2c:	6123      	str	r3, [r4, #16]
 802ac2e:	68a3      	ldr	r3, [r4, #8]
 802ac30:	3301      	adds	r3, #1
 802ac32:	60a3      	str	r3, [r4, #8]
 802ac34:	e789      	b.n	802ab4a <_ZN8touchgfx7Outline10renderLineEiiii+0x71a>
 802ac36:	6921      	ldr	r1, [r4, #16]
 802ac38:	f104 0e14 	add.w	lr, r4, #20
 802ac3c:	910e      	str	r1, [sp, #56]	; 0x38
 802ac3e:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 802ac40:	e8be 0003 	ldmia.w	lr!, {r0, r1}
 802ac44:	6038      	str	r0, [r7, #0]
 802ac46:	4638      	mov	r0, r7
 802ac48:	6079      	str	r1, [r7, #4]
 802ac4a:	6921      	ldr	r1, [r4, #16]
 802ac4c:	3108      	adds	r1, #8
 802ac4e:	6121      	str	r1, [r4, #16]
 802ac50:	68a1      	ldr	r1, [r4, #8]
 802ac52:	3101      	adds	r1, #1
 802ac54:	60a1      	str	r1, [r4, #8]
 802ac56:	e7c1      	b.n	802abdc <_ZN8touchgfx7Outline10renderLineEiiii+0x7ac>
 802ac58:	f104 0214 	add.w	r2, r4, #20
 802ac5c:	6926      	ldr	r6, [r4, #16]
 802ac5e:	ca03      	ldmia	r2!, {r0, r1}
 802ac60:	6030      	str	r0, [r6, #0]
 802ac62:	6071      	str	r1, [r6, #4]
 802ac64:	6922      	ldr	r2, [r4, #16]
 802ac66:	3208      	adds	r2, #8
 802ac68:	6122      	str	r2, [r4, #16]
 802ac6a:	68a2      	ldr	r2, [r4, #8]
 802ac6c:	3201      	adds	r2, #1
 802ac6e:	60a2      	str	r2, [r4, #8]
 802ac70:	e647      	b.n	802a902 <_ZN8touchgfx7Outline10renderLineEiiii+0x4d2>
 802ac72:	f104 0514 	add.w	r5, r4, #20
 802ac76:	6926      	ldr	r6, [r4, #16]
 802ac78:	cd03      	ldmia	r5!, {r0, r1}
 802ac7a:	6030      	str	r0, [r6, #0]
 802ac7c:	6071      	str	r1, [r6, #4]
 802ac7e:	6921      	ldr	r1, [r4, #16]
 802ac80:	3108      	adds	r1, #8
 802ac82:	6121      	str	r1, [r4, #16]
 802ac84:	68a1      	ldr	r1, [r4, #8]
 802ac86:	3101      	adds	r1, #1
 802ac88:	60a1      	str	r1, [r4, #8]
 802ac8a:	e699      	b.n	802a9c0 <_ZN8touchgfx7Outline10renderLineEiiii+0x590>
 802ac8c:	9b01      	ldr	r3, [sp, #4]
 802ac8e:	ea4f 176c 	mov.w	r7, ip, asr #5
 802ac92:	8b20      	ldrh	r0, [r4, #24]
 802ac94:	f00c 0c1f 	and.w	ip, ip, #31
 802ac98:	f003 031f 	and.w	r3, r3, #31
 802ac9c:	f8b4 e01a 	ldrh.w	lr, [r4, #26]
 802aca0:	9310      	str	r3, [sp, #64]	; 0x40
 802aca2:	9b06      	ldr	r3, [sp, #24]
 802aca4:	429f      	cmp	r7, r3
 802aca6:	d10a      	bne.n	802acbe <_ZN8touchgfx7Outline10renderLineEiiii+0x88e>
 802aca8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802acaa:	4418      	add	r0, r3
 802acac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 802acae:	449c      	add	ip, r3
 802acb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802acb2:	8320      	strh	r0, [r4, #24]
 802acb4:	fb03 ee0c 	mla	lr, r3, ip, lr
 802acb8:	f8a4 e01a 	strh.w	lr, [r4, #26]
 802acbc:	e686      	b.n	802a9cc <_ZN8touchgfx7Outline10renderLineEiiii+0x59c>
 802acbe:	9b00      	ldr	r3, [sp, #0]
 802acc0:	2b00      	cmp	r3, #0
 802acc2:	f2c0 80a0 	blt.w	802ae06 <_ZN8touchgfx7Outline10renderLineEiiii+0x9d6>
 802acc6:	9909      	ldr	r1, [sp, #36]	; 0x24
 802acc8:	f1cc 0320 	rsb	r3, ip, #32
 802accc:	434b      	muls	r3, r1
 802acce:	2101      	movs	r1, #1
 802acd0:	910e      	str	r1, [sp, #56]	; 0x38
 802acd2:	2120      	movs	r1, #32
 802acd4:	9a00      	ldr	r2, [sp, #0]
 802acd6:	910d      	str	r1, [sp, #52]	; 0x34
 802acd8:	990d      	ldr	r1, [sp, #52]	; 0x34
 802acda:	fb93 f5f2 	sdiv	r5, r3, r2
 802acde:	fb02 3315 	mls	r3, r2, r5, r3
 802ace2:	448c      	add	ip, r1
 802ace4:	2b00      	cmp	r3, #0
 802ace6:	bfbc      	itt	lt
 802ace8:	f105 35ff 	addlt.w	r5, r5, #4294967295
 802acec:	189b      	addlt	r3, r3, r2
 802acee:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 802acf0:	fb05 ec0c 	mla	ip, r5, ip, lr
 802acf4:	4428      	add	r0, r5
 802acf6:	4417      	add	r7, r2
 802acf8:	fa0f f18c 	sxth.w	r1, ip
 802acfc:	fa0f fc89 	sxth.w	ip, r9
 802ad00:	fa0f fe87 	sxth.w	lr, r7
 802ad04:	8361      	strh	r1, [r4, #26]
 802ad06:	ea4f 420c 	mov.w	r2, ip, lsl #16
 802ad0a:	b200      	sxth	r0, r0
 802ad0c:	920f      	str	r2, [sp, #60]	; 0x3c
 802ad0e:	4472      	add	r2, lr
 802ad10:	8320      	strh	r0, [r4, #24]
 802ad12:	4542      	cmp	r2, r8
 802ad14:	f43f ac44 	beq.w	802a5a0 <_ZN8touchgfx7Outline10renderLineEiiii+0x170>
 802ad18:	ea50 0201 	orrs.w	r2, r0, r1
 802ad1c:	d00c      	beq.n	802ad38 <_ZN8touchgfx7Outline10renderLineEiiii+0x908>
 802ad1e:	2e00      	cmp	r6, #0
 802ad20:	db0a      	blt.n	802ad38 <_ZN8touchgfx7Outline10renderLineEiiii+0x908>
 802ad22:	6c21      	ldr	r1, [r4, #64]	; 0x40
 802ad24:	42b1      	cmp	r1, r6
 802ad26:	dd07      	ble.n	802ad38 <_ZN8touchgfx7Outline10renderLineEiiii+0x908>
 802ad28:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 802ad2c:	4288      	cmp	r0, r1
 802ad2e:	d375      	bcc.n	802ae1c <_ZN8touchgfx7Outline10renderLineEiiii+0x9ec>
 802ad30:	f04f 0201 	mov.w	r2, #1
 802ad34:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 802ad38:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802ad3a:	f8a4 e014 	strh.w	lr, [r4, #20]
 802ad3e:	1956      	adds	r6, r2, r5
 802ad40:	9a06      	ldr	r2, [sp, #24]
 802ad42:	f8a4 c016 	strh.w	ip, [r4, #22]
 802ad46:	42ba      	cmp	r2, r7
 802ad48:	f8a4 a018 	strh.w	sl, [r4, #24]
 802ad4c:	f8a4 a01a 	strh.w	sl, [r4, #26]
 802ad50:	d04c      	beq.n	802adec <_ZN8touchgfx7Outline10renderLineEiiii+0x9bc>
 802ad52:	9a02      	ldr	r2, [sp, #8]
 802ad54:	1b91      	subs	r1, r2, r6
 802ad56:	9a00      	ldr	r2, [sp, #0]
 802ad58:	440d      	add	r5, r1
 802ad5a:	016d      	lsls	r5, r5, #5
 802ad5c:	fb95 fef2 	sdiv	lr, r5, r2
 802ad60:	fb02 551e 	mls	r5, r2, lr, r5
 802ad64:	2d00      	cmp	r5, #0
 802ad66:	bfbc      	itt	lt
 802ad68:	f10e 3eff 	addlt.w	lr, lr, #4294967295
 802ad6c:	18ad      	addlt	r5, r5, r2
 802ad6e:	9a00      	ldr	r2, [sp, #0]
 802ad70:	1a9b      	subs	r3, r3, r2
 802ad72:	f10e 0201 	add.w	r2, lr, #1
 802ad76:	9213      	str	r2, [sp, #76]	; 0x4c
 802ad78:	195b      	adds	r3, r3, r5
 802ad7a:	bf57      	itett	pl
 802ad7c:	9a00      	ldrpl	r2, [sp, #0]
 802ad7e:	4670      	movmi	r0, lr
 802ad80:	9813      	ldrpl	r0, [sp, #76]	; 0x4c
 802ad82:	1a9b      	subpl	r3, r3, r2
 802ad84:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 802ad86:	fa0f f880 	sxth.w	r8, r0
 802ad8a:	4406      	add	r6, r0
 802ad8c:	4417      	add	r7, r2
 802ad8e:	0141      	lsls	r1, r0, #5
 802ad90:	f9b4 0014 	ldrsh.w	r0, [r4, #20]
 802ad94:	b23a      	sxth	r2, r7
 802ad96:	f8a4 8018 	strh.w	r8, [r4, #24]
 802ad9a:	b209      	sxth	r1, r1
 802ad9c:	9211      	str	r2, [sp, #68]	; 0x44
 802ad9e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 802ada0:	8361      	strh	r1, [r4, #26]
 802ada2:	1882      	adds	r2, r0, r2
 802ada4:	980f      	ldr	r0, [sp, #60]	; 0x3c
 802ada6:	9212      	str	r2, [sp, #72]	; 0x48
 802ada8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 802adaa:	4402      	add	r2, r0
 802adac:	9812      	ldr	r0, [sp, #72]	; 0x48
 802adae:	4290      	cmp	r0, r2
 802adb0:	f43f abf6 	beq.w	802a5a0 <_ZN8touchgfx7Outline10renderLineEiiii+0x170>
 802adb4:	ea58 0201 	orrs.w	r2, r8, r1
 802adb8:	d00d      	beq.n	802add6 <_ZN8touchgfx7Outline10renderLineEiiii+0x9a6>
 802adba:	f1bc 0f00 	cmp.w	ip, #0
 802adbe:	db0a      	blt.n	802add6 <_ZN8touchgfx7Outline10renderLineEiiii+0x9a6>
 802adc0:	6c21      	ldr	r1, [r4, #64]	; 0x40
 802adc2:	458c      	cmp	ip, r1
 802adc4:	da07      	bge.n	802add6 <_ZN8touchgfx7Outline10renderLineEiiii+0x9a6>
 802adc6:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 802adca:	4288      	cmp	r0, r1
 802adcc:	d336      	bcc.n	802ae3c <_ZN8touchgfx7Outline10renderLineEiiii+0xa0c>
 802adce:	f04f 0201 	mov.w	r2, #1
 802add2:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 802add6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 802add8:	f8a4 c016 	strh.w	ip, [r4, #22]
 802addc:	82a2      	strh	r2, [r4, #20]
 802adde:	9a06      	ldr	r2, [sp, #24]
 802ade0:	f8a4 a018 	strh.w	sl, [r4, #24]
 802ade4:	42ba      	cmp	r2, r7
 802ade6:	f8a4 a01a 	strh.w	sl, [r4, #26]
 802adea:	d1c5      	bne.n	802ad78 <_ZN8touchgfx7Outline10renderLineEiiii+0x948>
 802adec:	9b02      	ldr	r3, [sp, #8]
 802adee:	1b9e      	subs	r6, r3, r6
 802adf0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 802adf2:	f103 0c20 	add.w	ip, r3, #32
 802adf6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802adf8:	8326      	strh	r6, [r4, #24]
 802adfa:	ebac 0c03 	sub.w	ip, ip, r3
 802adfe:	fb06 f60c 	mul.w	r6, r6, ip
 802ae02:	8366      	strh	r6, [r4, #26]
 802ae04:	e5e2      	b.n	802a9cc <_ZN8touchgfx7Outline10renderLineEiiii+0x59c>
 802ae06:	9a00      	ldr	r2, [sp, #0]
 802ae08:	f04f 31ff 	mov.w	r1, #4294967295
 802ae0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802ae0e:	4252      	negs	r2, r2
 802ae10:	910e      	str	r1, [sp, #56]	; 0x38
 802ae12:	fb03 f30c 	mul.w	r3, r3, ip
 802ae16:	2100      	movs	r1, #0
 802ae18:	9200      	str	r2, [sp, #0]
 802ae1a:	e75b      	b.n	802acd4 <_ZN8touchgfx7Outline10renderLineEiiii+0x8a4>
 802ae1c:	f104 0614 	add.w	r6, r4, #20
 802ae20:	f8d4 8010 	ldr.w	r8, [r4, #16]
 802ae24:	ce03      	ldmia	r6!, {r0, r1}
 802ae26:	f8c8 0000 	str.w	r0, [r8]
 802ae2a:	f8c8 1004 	str.w	r1, [r8, #4]
 802ae2e:	6921      	ldr	r1, [r4, #16]
 802ae30:	3108      	adds	r1, #8
 802ae32:	6121      	str	r1, [r4, #16]
 802ae34:	68a1      	ldr	r1, [r4, #8]
 802ae36:	3101      	adds	r1, #1
 802ae38:	60a1      	str	r1, [r4, #8]
 802ae3a:	e77d      	b.n	802ad38 <_ZN8touchgfx7Outline10renderLineEiiii+0x908>
 802ae3c:	f104 0814 	add.w	r8, r4, #20
 802ae40:	6922      	ldr	r2, [r4, #16]
 802ae42:	e8b8 0003 	ldmia.w	r8!, {r0, r1}
 802ae46:	9212      	str	r2, [sp, #72]	; 0x48
 802ae48:	6010      	str	r0, [r2, #0]
 802ae4a:	6051      	str	r1, [r2, #4]
 802ae4c:	6921      	ldr	r1, [r4, #16]
 802ae4e:	3108      	adds	r1, #8
 802ae50:	6121      	str	r1, [r4, #16]
 802ae52:	68a1      	ldr	r1, [r4, #8]
 802ae54:	3101      	adds	r1, #1
 802ae56:	60a1      	str	r1, [r4, #8]
 802ae58:	e7bd      	b.n	802add6 <_ZN8touchgfx7Outline10renderLineEiiii+0x9a6>
 802ae5a:	f104 0214 	add.w	r2, r4, #20
 802ae5e:	6926      	ldr	r6, [r4, #16]
 802ae60:	ca03      	ldmia	r2!, {r0, r1}
 802ae62:	6030      	str	r0, [r6, #0]
 802ae64:	6071      	str	r1, [r6, #4]
 802ae66:	6922      	ldr	r2, [r4, #16]
 802ae68:	3208      	adds	r2, #8
 802ae6a:	6122      	str	r2, [r4, #16]
 802ae6c:	68a2      	ldr	r2, [r4, #8]
 802ae6e:	3201      	adds	r2, #1
 802ae70:	60a2      	str	r2, [r4, #8]
 802ae72:	e5ce      	b.n	802aa12 <_ZN8touchgfx7Outline10renderLineEiiii+0x5e2>
 802ae74:	f104 0314 	add.w	r3, r4, #20
 802ae78:	6926      	ldr	r6, [r4, #16]
 802ae7a:	cb03      	ldmia	r3!, {r0, r1}
 802ae7c:	6030      	str	r0, [r6, #0]
 802ae7e:	6071      	str	r1, [r6, #4]
 802ae80:	6923      	ldr	r3, [r4, #16]
 802ae82:	3308      	adds	r3, #8
 802ae84:	6123      	str	r3, [r4, #16]
 802ae86:	68a3      	ldr	r3, [r4, #8]
 802ae88:	3301      	adds	r3, #1
 802ae8a:	60a3      	str	r3, [r4, #8]
 802ae8c:	e5f6      	b.n	802aa7c <_ZN8touchgfx7Outline10renderLineEiiii+0x64c>
 802ae8e:	9b01      	ldr	r3, [sp, #4]
 802ae90:	8b20      	ldrh	r0, [r4, #24]
 802ae92:	ea4f 1c63 	mov.w	ip, r3, asr #5
 802ae96:	f003 021f 	and.w	r2, r3, #31
 802ae9a:	9b04      	ldr	r3, [sp, #16]
 802ae9c:	45dc      	cmp	ip, fp
 802ae9e:	8b66      	ldrh	r6, [r4, #26]
 802aea0:	f003 031f 	and.w	r3, r3, #31
 802aea4:	9305      	str	r3, [sp, #20]
 802aea6:	9b03      	ldr	r3, [sp, #12]
 802aea8:	eba3 050e 	sub.w	r5, r3, lr
 802aeac:	d108      	bne.n	802aec0 <_ZN8touchgfx7Outline10renderLineEiiii+0xa90>
 802aeae:	9b05      	ldr	r3, [sp, #20]
 802aeb0:	4428      	add	r0, r5
 802aeb2:	441a      	add	r2, r3
 802aeb4:	8320      	strh	r0, [r4, #24]
 802aeb6:	fb05 6502 	mla	r5, r5, r2, r6
 802aeba:	8365      	strh	r5, [r4, #26]
 802aebc:	f7ff bbed 	b.w	802a69a <_ZN8touchgfx7Outline10renderLineEiiii+0x26a>
 802aec0:	9b04      	ldr	r3, [sp, #16]
 802aec2:	9901      	ldr	r1, [sp, #4]
 802aec4:	1a5b      	subs	r3, r3, r1
 802aec6:	9300      	str	r3, [sp, #0]
 802aec8:	f100 809c 	bmi.w	802b004 <_ZN8touchgfx7Outline10renderLineEiiii+0xbd4>
 802aecc:	f1c2 0120 	rsb	r1, r2, #32
 802aed0:	434d      	muls	r5, r1
 802aed2:	2101      	movs	r1, #1
 802aed4:	9102      	str	r1, [sp, #8]
 802aed6:	2120      	movs	r1, #32
 802aed8:	9b00      	ldr	r3, [sp, #0]
 802aeda:	9101      	str	r1, [sp, #4]
 802aedc:	9901      	ldr	r1, [sp, #4]
 802aede:	fb95 f7f3 	sdiv	r7, r5, r3
 802aee2:	fb03 5517 	mls	r5, r3, r7, r5
 802aee6:	440a      	add	r2, r1
 802aee8:	2d00      	cmp	r5, #0
 802aeea:	bfbc      	itt	lt
 802aeec:	f107 37ff 	addlt.w	r7, r7, #4294967295
 802aef0:	18ed      	addlt	r5, r5, r3
 802aef2:	fb07 6202 	mla	r2, r7, r2, r6
 802aef6:	f9b4 6016 	ldrsh.w	r6, [r4, #22]
 802aefa:	4438      	add	r0, r7
 802aefc:	b211      	sxth	r1, r2
 802aefe:	9a02      	ldr	r2, [sp, #8]
 802af00:	b200      	sxth	r0, r0
 802af02:	4494      	add	ip, r2
 802af04:	fa0f f289 	sxth.w	r2, r9
 802af08:	f9b4 9014 	ldrsh.w	r9, [r4, #20]
 802af0c:	0413      	lsls	r3, r2, #16
 802af0e:	8320      	strh	r0, [r4, #24]
 802af10:	fa0f f88c 	sxth.w	r8, ip
 802af14:	8361      	strh	r1, [r4, #26]
 802af16:	eb09 4906 	add.w	r9, r9, r6, lsl #16
 802af1a:	9304      	str	r3, [sp, #16]
 802af1c:	eb08 0a03 	add.w	sl, r8, r3
 802af20:	45d1      	cmp	r9, sl
 802af22:	f43f ab3d 	beq.w	802a5a0 <_ZN8touchgfx7Outline10renderLineEiiii+0x170>
 802af26:	ea50 0301 	orrs.w	r3, r0, r1
 802af2a:	d00b      	beq.n	802af44 <_ZN8touchgfx7Outline10renderLineEiiii+0xb14>
 802af2c:	2e00      	cmp	r6, #0
 802af2e:	db09      	blt.n	802af44 <_ZN8touchgfx7Outline10renderLineEiiii+0xb14>
 802af30:	6c21      	ldr	r1, [r4, #64]	; 0x40
 802af32:	428e      	cmp	r6, r1
 802af34:	da06      	bge.n	802af44 <_ZN8touchgfx7Outline10renderLineEiiii+0xb14>
 802af36:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 802af3a:	4288      	cmp	r0, r1
 802af3c:	d36b      	bcc.n	802b016 <_ZN8touchgfx7Outline10renderLineEiiii+0xbe6>
 802af3e:	2101      	movs	r1, #1
 802af40:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 802af44:	2100      	movs	r1, #0
 802af46:	45e3      	cmp	fp, ip
 802af48:	f8a4 8014 	strh.w	r8, [r4, #20]
 802af4c:	44be      	add	lr, r7
 802af4e:	82e2      	strh	r2, [r4, #22]
 802af50:	8321      	strh	r1, [r4, #24]
 802af52:	8361      	strh	r1, [r4, #26]
 802af54:	d047      	beq.n	802afe6 <_ZN8touchgfx7Outline10renderLineEiiii+0xbb6>
 802af56:	9b03      	ldr	r3, [sp, #12]
 802af58:	f04f 0900 	mov.w	r9, #0
 802af5c:	eba3 060e 	sub.w	r6, r3, lr
 802af60:	9b00      	ldr	r3, [sp, #0]
 802af62:	443e      	add	r6, r7
 802af64:	0176      	lsls	r6, r6, #5
 802af66:	fb96 f7f3 	sdiv	r7, r6, r3
 802af6a:	fb03 6617 	mls	r6, r3, r7, r6
 802af6e:	428e      	cmp	r6, r1
 802af70:	bfbc      	itt	lt
 802af72:	f107 37ff 	addlt.w	r7, r7, #4294967295
 802af76:	18f6      	addlt	r6, r6, r3
 802af78:	9b00      	ldr	r3, [sp, #0]
 802af7a:	1aed      	subs	r5, r5, r3
 802af7c:	1c7b      	adds	r3, r7, #1
 802af7e:	9307      	str	r3, [sp, #28]
 802af80:	19ad      	adds	r5, r5, r6
 802af82:	bf57      	itett	pl
 802af84:	9b00      	ldrpl	r3, [sp, #0]
 802af86:	4638      	movmi	r0, r7
 802af88:	9807      	ldrpl	r0, [sp, #28]
 802af8a:	1aed      	subpl	r5, r5, r3
 802af8c:	9b02      	ldr	r3, [sp, #8]
 802af8e:	fa0f f880 	sxth.w	r8, r0
 802af92:	4486      	add	lr, r0
 802af94:	449c      	add	ip, r3
 802af96:	0141      	lsls	r1, r0, #5
 802af98:	9b04      	ldr	r3, [sp, #16]
 802af9a:	fa0f fa8c 	sxth.w	sl, ip
 802af9e:	f9b4 0014 	ldrsh.w	r0, [r4, #20]
 802afa2:	b209      	sxth	r1, r1
 802afa4:	f8a4 8018 	strh.w	r8, [r4, #24]
 802afa8:	4418      	add	r0, r3
 802afaa:	4453      	add	r3, sl
 802afac:	8361      	strh	r1, [r4, #26]
 802afae:	4298      	cmp	r0, r3
 802afb0:	f43f aaf6 	beq.w	802a5a0 <_ZN8touchgfx7Outline10renderLineEiiii+0x170>
 802afb4:	ea58 0301 	orrs.w	r3, r8, r1
 802afb8:	d00c      	beq.n	802afd4 <_ZN8touchgfx7Outline10renderLineEiiii+0xba4>
 802afba:	2a00      	cmp	r2, #0
 802afbc:	db0a      	blt.n	802afd4 <_ZN8touchgfx7Outline10renderLineEiiii+0xba4>
 802afbe:	6c21      	ldr	r1, [r4, #64]	; 0x40
 802afc0:	428a      	cmp	r2, r1
 802afc2:	da07      	bge.n	802afd4 <_ZN8touchgfx7Outline10renderLineEiiii+0xba4>
 802afc4:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 802afc8:	4288      	cmp	r0, r1
 802afca:	d334      	bcc.n	802b036 <_ZN8touchgfx7Outline10renderLineEiiii+0xc06>
 802afcc:	f04f 0301 	mov.w	r3, #1
 802afd0:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 802afd4:	45e3      	cmp	fp, ip
 802afd6:	f8a4 a014 	strh.w	sl, [r4, #20]
 802afda:	82e2      	strh	r2, [r4, #22]
 802afdc:	f8a4 9018 	strh.w	r9, [r4, #24]
 802afe0:	f8a4 901a 	strh.w	r9, [r4, #26]
 802afe4:	d1cc      	bne.n	802af80 <_ZN8touchgfx7Outline10renderLineEiiii+0xb50>
 802afe6:	9b03      	ldr	r3, [sp, #12]
 802afe8:	9e05      	ldr	r6, [sp, #20]
 802afea:	eba3 0e0e 	sub.w	lr, r3, lr
 802afee:	9b01      	ldr	r3, [sp, #4]
 802aff0:	3620      	adds	r6, #32
 802aff2:	f8a4 e018 	strh.w	lr, [r4, #24]
 802aff6:	1af6      	subs	r6, r6, r3
 802aff8:	fb0e fe06 	mul.w	lr, lr, r6
 802affc:	f8a4 e01a 	strh.w	lr, [r4, #26]
 802b000:	f7ff bb4b 	b.w	802a69a <_ZN8touchgfx7Outline10renderLineEiiii+0x26a>
 802b004:	9b00      	ldr	r3, [sp, #0]
 802b006:	f04f 31ff 	mov.w	r1, #4294967295
 802b00a:	4355      	muls	r5, r2
 802b00c:	425b      	negs	r3, r3
 802b00e:	9102      	str	r1, [sp, #8]
 802b010:	2100      	movs	r1, #0
 802b012:	9300      	str	r3, [sp, #0]
 802b014:	e760      	b.n	802aed8 <_ZN8touchgfx7Outline10renderLineEiiii+0xaa8>
 802b016:	f104 0614 	add.w	r6, r4, #20
 802b01a:	f8d4 9010 	ldr.w	r9, [r4, #16]
 802b01e:	ce03      	ldmia	r6!, {r0, r1}
 802b020:	f8c9 0000 	str.w	r0, [r9]
 802b024:	f8c9 1004 	str.w	r1, [r9, #4]
 802b028:	6921      	ldr	r1, [r4, #16]
 802b02a:	3108      	adds	r1, #8
 802b02c:	6121      	str	r1, [r4, #16]
 802b02e:	68a1      	ldr	r1, [r4, #8]
 802b030:	3101      	adds	r1, #1
 802b032:	60a1      	str	r1, [r4, #8]
 802b034:	e786      	b.n	802af44 <_ZN8touchgfx7Outline10renderLineEiiii+0xb14>
 802b036:	f104 0814 	add.w	r8, r4, #20
 802b03a:	6923      	ldr	r3, [r4, #16]
 802b03c:	e8b8 0003 	ldmia.w	r8!, {r0, r1}
 802b040:	9306      	str	r3, [sp, #24]
 802b042:	6018      	str	r0, [r3, #0]
 802b044:	6059      	str	r1, [r3, #4]
 802b046:	6921      	ldr	r1, [r4, #16]
 802b048:	3108      	adds	r1, #8
 802b04a:	6121      	str	r1, [r4, #16]
 802b04c:	68a1      	ldr	r1, [r4, #8]
 802b04e:	3101      	adds	r1, #1
 802b050:	60a1      	str	r1, [r4, #8]
 802b052:	e7bf      	b.n	802afd4 <_ZN8touchgfx7Outline10renderLineEiiii+0xba4>

0802b054 <_ZN8touchgfx7Outline6lineToEii>:
 802b054:	b573      	push	{r0, r1, r4, r5, r6, lr}
 802b056:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 802b058:	4604      	mov	r4, r0
 802b05a:	460d      	mov	r5, r1
 802b05c:	4616      	mov	r6, r2
 802b05e:	079b      	lsls	r3, r3, #30
 802b060:	d526      	bpl.n	802b0b0 <_ZN8touchgfx7Outline6lineToEii+0x5c>
 802b062:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
 802b066:	ea85 0001 	eor.w	r0, r5, r1
 802b06a:	ea86 0302 	eor.w	r3, r6, r2
 802b06e:	4303      	orrs	r3, r0
 802b070:	d01e      	beq.n	802b0b0 <_ZN8touchgfx7Outline6lineToEii+0x5c>
 802b072:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 802b074:	114b      	asrs	r3, r1, #5
 802b076:	9600      	str	r6, [sp, #0]
 802b078:	4283      	cmp	r3, r0
 802b07a:	6b60      	ldr	r0, [r4, #52]	; 0x34
 802b07c:	bfb8      	it	lt
 802b07e:	62e3      	strlt	r3, [r4, #44]	; 0x2c
 802b080:	3301      	adds	r3, #1
 802b082:	4283      	cmp	r3, r0
 802b084:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 802b086:	bfc8      	it	gt
 802b088:	6363      	strgt	r3, [r4, #52]	; 0x34
 802b08a:	116b      	asrs	r3, r5, #5
 802b08c:	4283      	cmp	r3, r0
 802b08e:	6b60      	ldr	r0, [r4, #52]	; 0x34
 802b090:	bfb8      	it	lt
 802b092:	62e3      	strlt	r3, [r4, #44]	; 0x2c
 802b094:	3301      	adds	r3, #1
 802b096:	4283      	cmp	r3, r0
 802b098:	4620      	mov	r0, r4
 802b09a:	bfc8      	it	gt
 802b09c:	6363      	strgt	r3, [r4, #52]	; 0x34
 802b09e:	462b      	mov	r3, r5
 802b0a0:	f7ff f9c6 	bl	802a430 <_ZN8touchgfx7Outline10renderLineEiiii>
 802b0a4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 802b0a6:	f043 0301 	orr.w	r3, r3, #1
 802b0aa:	e9c4 5607 	strd	r5, r6, [r4, #28]
 802b0ae:	63e3      	str	r3, [r4, #60]	; 0x3c
 802b0b0:	b002      	add	sp, #8
 802b0b2:	bd70      	pop	{r4, r5, r6, pc}

0802b0b4 <_ZN8touchgfx7Outline6moveToEii>:
 802b0b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802b0b6:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 802b0b8:	4615      	mov	r5, r2
 802b0ba:	4604      	mov	r4, r0
 802b0bc:	460e      	mov	r6, r1
 802b0be:	079a      	lsls	r2, r3, #30
 802b0c0:	d401      	bmi.n	802b0c6 <_ZN8touchgfx7Outline6moveToEii+0x12>
 802b0c2:	f7ff f96f 	bl	802a3a4 <_ZN8touchgfx7Outline5resetEv>
 802b0c6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 802b0c8:	07db      	lsls	r3, r3, #31
 802b0ca:	d504      	bpl.n	802b0d6 <_ZN8touchgfx7Outline6moveToEii+0x22>
 802b0cc:	4620      	mov	r0, r4
 802b0ce:	e9d4 1209 	ldrd	r1, r2, [r4, #36]	; 0x24
 802b0d2:	f7ff ffbf 	bl	802b054 <_ZN8touchgfx7Outline6lineToEii>
 802b0d6:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 802b0da:	f346 1c4f 	sbfx	ip, r6, #5, #16
 802b0de:	f345 174f 	sbfx	r7, r5, #5, #16
 802b0e2:	f9b4 2014 	ldrsh.w	r2, [r4, #20]
 802b0e6:	eb0c 4107 	add.w	r1, ip, r7, lsl #16
 802b0ea:	eb02 4203 	add.w	r2, r2, r3, lsl #16
 802b0ee:	428a      	cmp	r2, r1
 802b0f0:	d015      	beq.n	802b11e <_ZN8touchgfx7Outline6moveToEii+0x6a>
 802b0f2:	8b61      	ldrh	r1, [r4, #26]
 802b0f4:	8b22      	ldrh	r2, [r4, #24]
 802b0f6:	430a      	orrs	r2, r1
 802b0f8:	d00b      	beq.n	802b112 <_ZN8touchgfx7Outline6moveToEii+0x5e>
 802b0fa:	2b00      	cmp	r3, #0
 802b0fc:	db09      	blt.n	802b112 <_ZN8touchgfx7Outline6moveToEii+0x5e>
 802b0fe:	6c22      	ldr	r2, [r4, #64]	; 0x40
 802b100:	4293      	cmp	r3, r2
 802b102:	da06      	bge.n	802b112 <_ZN8touchgfx7Outline6moveToEii+0x5e>
 802b104:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
 802b108:	429a      	cmp	r2, r3
 802b10a:	d30d      	bcc.n	802b128 <_ZN8touchgfx7Outline6moveToEii+0x74>
 802b10c:	2301      	movs	r3, #1
 802b10e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 802b112:	2300      	movs	r3, #0
 802b114:	f8a4 c014 	strh.w	ip, [r4, #20]
 802b118:	82e7      	strh	r7, [r4, #22]
 802b11a:	8323      	strh	r3, [r4, #24]
 802b11c:	8363      	strh	r3, [r4, #26]
 802b11e:	61e6      	str	r6, [r4, #28]
 802b120:	62a5      	str	r5, [r4, #40]	; 0x28
 802b122:	e9c4 5608 	strd	r5, r6, [r4, #32]
 802b126:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802b128:	f104 0314 	add.w	r3, r4, #20
 802b12c:	6922      	ldr	r2, [r4, #16]
 802b12e:	cb03      	ldmia	r3!, {r0, r1}
 802b130:	6010      	str	r0, [r2, #0]
 802b132:	6051      	str	r1, [r2, #4]
 802b134:	6923      	ldr	r3, [r4, #16]
 802b136:	3308      	adds	r3, #8
 802b138:	6123      	str	r3, [r4, #16]
 802b13a:	68a3      	ldr	r3, [r4, #8]
 802b13c:	3301      	adds	r3, #1
 802b13e:	60a3      	str	r3, [r4, #8]
 802b140:	e7e7      	b.n	802b112 <_ZN8touchgfx7Outline6moveToEii+0x5e>

0802b142 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>:
 802b142:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802b146:	b0d1      	sub	sp, #324	; 0x144
 802b148:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 802b14c:	466c      	mov	r4, sp
 802b14e:	1a0d      	subs	r5, r1, r0
 802b150:	f100 0208 	add.w	r2, r0, #8
 802b154:	2d48      	cmp	r5, #72	; 0x48
 802b156:	f340 80ba 	ble.w	802b2ce <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x18c>
 802b15a:	112d      	asrs	r5, r5, #4
 802b15c:	f9b0 c004 	ldrsh.w	ip, [r0, #4]
 802b160:	f9b0 7006 	ldrsh.w	r7, [r0, #6]
 802b164:	eb00 03c5 	add.w	r3, r0, r5, lsl #3
 802b168:	f9b0 8000 	ldrsh.w	r8, [r0]
 802b16c:	f9b0 e002 	ldrsh.w	lr, [r0, #2]
 802b170:	681e      	ldr	r6, [r3, #0]
 802b172:	6006      	str	r6, [r0, #0]
 802b174:	685e      	ldr	r6, [r3, #4]
 802b176:	6046      	str	r6, [r0, #4]
 802b178:	f820 8035 	strh.w	r8, [r0, r5, lsl #3]
 802b17c:	f8a3 e002 	strh.w	lr, [r3, #2]
 802b180:	f8a3 c004 	strh.w	ip, [r3, #4]
 802b184:	80df      	strh	r7, [r3, #6]
 802b186:	f1a1 0308 	sub.w	r3, r1, #8
 802b18a:	f931 cc06 	ldrsh.w	ip, [r1, #-6]
 802b18e:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
 802b192:	f9b0 600a 	ldrsh.w	r6, [r0, #10]
 802b196:	f931 5c08 	ldrsh.w	r5, [r1, #-8]
 802b19a:	eb05 450c 	add.w	r5, r5, ip, lsl #16
 802b19e:	eb07 4c06 	add.w	ip, r7, r6, lsl #16
 802b1a2:	4565      	cmp	r5, ip
 802b1a4:	da0f      	bge.n	802b1c6 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x84>
 802b1a6:	681d      	ldr	r5, [r3, #0]
 802b1a8:	f9b0 e00c 	ldrsh.w	lr, [r0, #12]
 802b1ac:	f9b0 c00e 	ldrsh.w	ip, [r0, #14]
 802b1b0:	6015      	str	r5, [r2, #0]
 802b1b2:	685d      	ldr	r5, [r3, #4]
 802b1b4:	6055      	str	r5, [r2, #4]
 802b1b6:	f821 7c08 	strh.w	r7, [r1, #-8]
 802b1ba:	f821 6c06 	strh.w	r6, [r1, #-6]
 802b1be:	f821 ec04 	strh.w	lr, [r1, #-4]
 802b1c2:	f821 cc02 	strh.w	ip, [r1, #-2]
 802b1c6:	f9b0 7000 	ldrsh.w	r7, [r0]
 802b1ca:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 802b1ce:	f9b0 e00a 	ldrsh.w	lr, [r0, #10]
 802b1d2:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
 802b1d6:	eb07 4c06 	add.w	ip, r7, r6, lsl #16
 802b1da:	eb05 450e 	add.w	r5, r5, lr, lsl #16
 802b1de:	45ac      	cmp	ip, r5
 802b1e0:	da0d      	bge.n	802b1fe <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xbc>
 802b1e2:	6815      	ldr	r5, [r2, #0]
 802b1e4:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 802b1e8:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 802b1ec:	6005      	str	r5, [r0, #0]
 802b1ee:	6855      	ldr	r5, [r2, #4]
 802b1f0:	8107      	strh	r7, [r0, #8]
 802b1f2:	6045      	str	r5, [r0, #4]
 802b1f4:	8146      	strh	r6, [r0, #10]
 802b1f6:	f8a0 e00c 	strh.w	lr, [r0, #12]
 802b1fa:	f8a0 c00e 	strh.w	ip, [r0, #14]
 802b1fe:	f931 cc06 	ldrsh.w	ip, [r1, #-6]
 802b202:	f9b0 7000 	ldrsh.w	r7, [r0]
 802b206:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 802b20a:	f931 5c08 	ldrsh.w	r5, [r1, #-8]
 802b20e:	eb05 450c 	add.w	r5, r5, ip, lsl #16
 802b212:	eb07 4c06 	add.w	ip, r7, r6, lsl #16
 802b216:	4565      	cmp	r5, ip
 802b218:	da0f      	bge.n	802b23a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xf8>
 802b21a:	681d      	ldr	r5, [r3, #0]
 802b21c:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 802b220:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 802b224:	6005      	str	r5, [r0, #0]
 802b226:	685d      	ldr	r5, [r3, #4]
 802b228:	6045      	str	r5, [r0, #4]
 802b22a:	f821 7c08 	strh.w	r7, [r1, #-8]
 802b22e:	f821 6c06 	strh.w	r6, [r1, #-6]
 802b232:	f821 ec04 	strh.w	lr, [r1, #-4]
 802b236:	f821 cc02 	strh.w	ip, [r1, #-2]
 802b23a:	f9b2 9008 	ldrsh.w	r9, [r2, #8]
 802b23e:	f102 0508 	add.w	r5, r2, #8
 802b242:	f9b2 800a 	ldrsh.w	r8, [r2, #10]
 802b246:	f9b0 e000 	ldrsh.w	lr, [r0]
 802b24a:	462f      	mov	r7, r5
 802b24c:	f9b0 c002 	ldrsh.w	ip, [r0, #2]
 802b250:	eb09 4608 	add.w	r6, r9, r8, lsl #16
 802b254:	eb0e 4a0c 	add.w	sl, lr, ip, lsl #16
 802b258:	4556      	cmp	r6, sl
 802b25a:	db18      	blt.n	802b28e <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x14c>
 802b25c:	3b08      	subs	r3, #8
 802b25e:	f9b3 b002 	ldrsh.w	fp, [r3, #2]
 802b262:	f9b3 6000 	ldrsh.w	r6, [r3]
 802b266:	eb06 460b 	add.w	r6, r6, fp, lsl #16
 802b26a:	45b2      	cmp	sl, r6
 802b26c:	dbf6      	blt.n	802b25c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x11a>
 802b26e:	42ab      	cmp	r3, r5
 802b270:	681e      	ldr	r6, [r3, #0]
 802b272:	d30e      	bcc.n	802b292 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x150>
 802b274:	f9b2 700c 	ldrsh.w	r7, [r2, #12]
 802b278:	f9b2 200e 	ldrsh.w	r2, [r2, #14]
 802b27c:	602e      	str	r6, [r5, #0]
 802b27e:	685e      	ldr	r6, [r3, #4]
 802b280:	606e      	str	r6, [r5, #4]
 802b282:	f8a3 9000 	strh.w	r9, [r3]
 802b286:	f8a3 8002 	strh.w	r8, [r3, #2]
 802b28a:	809f      	strh	r7, [r3, #4]
 802b28c:	80da      	strh	r2, [r3, #6]
 802b28e:	462a      	mov	r2, r5
 802b290:	e7d3      	b.n	802b23a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xf8>
 802b292:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 802b296:	6006      	str	r6, [r0, #0]
 802b298:	685e      	ldr	r6, [r3, #4]
 802b29a:	f9b0 8004 	ldrsh.w	r8, [r0, #4]
 802b29e:	6046      	str	r6, [r0, #4]
 802b2a0:	1a1e      	subs	r6, r3, r0
 802b2a2:	80da      	strh	r2, [r3, #6]
 802b2a4:	1b4a      	subs	r2, r1, r5
 802b2a6:	f8a3 e000 	strh.w	lr, [r3]
 802b2aa:	10d2      	asrs	r2, r2, #3
 802b2ac:	f8a3 c002 	strh.w	ip, [r3, #2]
 802b2b0:	f8a3 8004 	strh.w	r8, [r3, #4]
 802b2b4:	ebb2 0fe6 	cmp.w	r2, r6, asr #3
 802b2b8:	bfb5      	itete	lt
 802b2ba:	e9c4 0300 	strdlt	r0, r3, [r4]
 802b2be:	4607      	movge	r7, r0
 802b2c0:	460b      	movlt	r3, r1
 802b2c2:	e9c4 5100 	strdge	r5, r1, [r4]
 802b2c6:	4638      	mov	r0, r7
 802b2c8:	3408      	adds	r4, #8
 802b2ca:	4619      	mov	r1, r3
 802b2cc:	e73f      	b.n	802b14e <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xc>
 802b2ce:	4291      	cmp	r1, r2
 802b2d0:	d925      	bls.n	802b31e <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1dc>
 802b2d2:	f1a2 0310 	sub.w	r3, r2, #16
 802b2d6:	f9b3 c010 	ldrsh.w	ip, [r3, #16]
 802b2da:	f9b3 7012 	ldrsh.w	r7, [r3, #18]
 802b2de:	f9b3 e00a 	ldrsh.w	lr, [r3, #10]
 802b2e2:	f9b3 5008 	ldrsh.w	r5, [r3, #8]
 802b2e6:	eb0c 4607 	add.w	r6, ip, r7, lsl #16
 802b2ea:	eb05 450e 	add.w	r5, r5, lr, lsl #16
 802b2ee:	42ae      	cmp	r6, r5
 802b2f0:	da13      	bge.n	802b31a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1d8>
 802b2f2:	461d      	mov	r5, r3
 802b2f4:	f9b3 8014 	ldrsh.w	r8, [r3, #20]
 802b2f8:	f9b3 e016 	ldrsh.w	lr, [r3, #22]
 802b2fc:	3b08      	subs	r3, #8
 802b2fe:	f855 6f08 	ldr.w	r6, [r5, #8]!
 802b302:	619e      	str	r6, [r3, #24]
 802b304:	42a8      	cmp	r0, r5
 802b306:	686e      	ldr	r6, [r5, #4]
 802b308:	f8a3 c010 	strh.w	ip, [r3, #16]
 802b30c:	61de      	str	r6, [r3, #28]
 802b30e:	825f      	strh	r7, [r3, #18]
 802b310:	f8a3 8014 	strh.w	r8, [r3, #20]
 802b314:	f8a3 e016 	strh.w	lr, [r3, #22]
 802b318:	d1dd      	bne.n	802b2d6 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x194>
 802b31a:	3208      	adds	r2, #8
 802b31c:	e7d7      	b.n	802b2ce <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x18c>
 802b31e:	466b      	mov	r3, sp
 802b320:	429c      	cmp	r4, r3
 802b322:	d903      	bls.n	802b32c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1ea>
 802b324:	e954 0102 	ldrd	r0, r1, [r4, #-8]
 802b328:	3c08      	subs	r4, #8
 802b32a:	e710      	b.n	802b14e <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xc>
 802b32c:	b051      	add	sp, #324	; 0x144
 802b32e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802b332 <_ZN8touchgfx7Outline9sortCellsEv>:
 802b332:	6881      	ldr	r1, [r0, #8]
 802b334:	b111      	cbz	r1, 802b33c <_ZN8touchgfx7Outline9sortCellsEv+0xa>
 802b336:	68c0      	ldr	r0, [r0, #12]
 802b338:	f7ff bf03 	b.w	802b142 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>
 802b33c:	4770      	bx	lr

0802b33e <_ZN8touchgfx7Outline8getCellsEv>:
 802b33e:	b510      	push	{r4, lr}
 802b340:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 802b342:	4604      	mov	r4, r0
 802b344:	07da      	lsls	r2, r3, #31
 802b346:	d507      	bpl.n	802b358 <_ZN8touchgfx7Outline8getCellsEv+0x1a>
 802b348:	e9d0 1209 	ldrd	r1, r2, [r0, #36]	; 0x24
 802b34c:	f7ff fe82 	bl	802b054 <_ZN8touchgfx7Outline6lineToEii>
 802b350:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 802b352:	f023 0301 	bic.w	r3, r3, #1
 802b356:	63e3      	str	r3, [r4, #60]	; 0x3c
 802b358:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 802b35a:	079b      	lsls	r3, r3, #30
 802b35c:	d51a      	bpl.n	802b394 <_ZN8touchgfx7Outline8getCellsEv+0x56>
 802b35e:	8b62      	ldrh	r2, [r4, #26]
 802b360:	8b23      	ldrh	r3, [r4, #24]
 802b362:	4313      	orrs	r3, r2
 802b364:	d00d      	beq.n	802b382 <_ZN8touchgfx7Outline8getCellsEv+0x44>
 802b366:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 802b36a:	2b00      	cmp	r3, #0
 802b36c:	db09      	blt.n	802b382 <_ZN8touchgfx7Outline8getCellsEv+0x44>
 802b36e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 802b370:	4293      	cmp	r3, r2
 802b372:	da06      	bge.n	802b382 <_ZN8touchgfx7Outline8getCellsEv+0x44>
 802b374:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 802b378:	429a      	cmp	r2, r3
 802b37a:	d80d      	bhi.n	802b398 <_ZN8touchgfx7Outline8getCellsEv+0x5a>
 802b37c:	2301      	movs	r3, #1
 802b37e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 802b382:	68a0      	ldr	r0, [r4, #8]
 802b384:	b138      	cbz	r0, 802b396 <_ZN8touchgfx7Outline8getCellsEv+0x58>
 802b386:	4620      	mov	r0, r4
 802b388:	f7ff ffd3 	bl	802b332 <_ZN8touchgfx7Outline9sortCellsEv>
 802b38c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 802b38e:	f023 0302 	bic.w	r3, r3, #2
 802b392:	63e3      	str	r3, [r4, #60]	; 0x3c
 802b394:	68e0      	ldr	r0, [r4, #12]
 802b396:	bd10      	pop	{r4, pc}
 802b398:	f104 0314 	add.w	r3, r4, #20
 802b39c:	6922      	ldr	r2, [r4, #16]
 802b39e:	cb03      	ldmia	r3!, {r0, r1}
 802b3a0:	6010      	str	r0, [r2, #0]
 802b3a2:	6051      	str	r1, [r2, #4]
 802b3a4:	6923      	ldr	r3, [r4, #16]
 802b3a6:	3308      	adds	r3, #8
 802b3a8:	6123      	str	r3, [r4, #16]
 802b3aa:	68a3      	ldr	r3, [r4, #8]
 802b3ac:	3301      	adds	r3, #1
 802b3ae:	60a3      	str	r3, [r4, #8]
 802b3b0:	e7e7      	b.n	802b382 <_ZN8touchgfx7Outline8getCellsEv+0x44>

0802b3b2 <_ZN8touchgfx8ScanlineD1Ev>:
 802b3b2:	4770      	bx	lr

0802b3b4 <_ZN8touchgfx8ScanlineD0Ev>:
 802b3b4:	b510      	push	{r4, lr}
 802b3b6:	4604      	mov	r4, r0
 802b3b8:	2124      	movs	r1, #36	; 0x24
 802b3ba:	f000 f888 	bl	802b4ce <_ZdlPvj>
 802b3be:	4620      	mov	r0, r4
 802b3c0:	bd10      	pop	{r4, pc}

0802b3c2 <_ZN8touchgfx8Scanline5resetEv>:
 802b3c2:	b510      	push	{r4, lr}
 802b3c4:	4604      	mov	r4, r0
 802b3c6:	f7f1 fe09 	bl	801cfdc <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCoversEv>
 802b3ca:	61a0      	str	r0, [r4, #24]
 802b3cc:	f7f1 fe0c 	bl	801cfe8 <_ZN8touchgfx20CanvasWidgetRenderer23getScanlineStartIndicesEv>
 802b3d0:	61e0      	str	r0, [r4, #28]
 802b3d2:	f7f1 fe0f 	bl	801cff4 <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCountsEv>
 802b3d6:	f647 73ff 	movw	r3, #32767	; 0x7fff
 802b3da:	6220      	str	r0, [r4, #32]
 802b3dc:	6160      	str	r0, [r4, #20]
 802b3de:	e9c4 3301 	strd	r3, r3, [r4, #4]
 802b3e2:	69e3      	ldr	r3, [r4, #28]
 802b3e4:	6123      	str	r3, [r4, #16]
 802b3e6:	2300      	movs	r3, #0
 802b3e8:	60e3      	str	r3, [r4, #12]
 802b3ea:	bd10      	pop	{r4, pc}

0802b3ec <_ZN8touchgfx8ScanlineC1Ev>:
 802b3ec:	4b09      	ldr	r3, [pc, #36]	; (802b414 <_ZN8touchgfx8ScanlineC1Ev+0x28>)
 802b3ee:	b510      	push	{r4, lr}
 802b3f0:	6003      	str	r3, [r0, #0]
 802b3f2:	f647 73ff 	movw	r3, #32767	; 0x7fff
 802b3f6:	4604      	mov	r4, r0
 802b3f8:	e9c0 3301 	strd	r3, r3, [r0, #4]
 802b3fc:	2300      	movs	r3, #0
 802b3fe:	e9c0 3303 	strd	r3, r3, [r0, #12]
 802b402:	e9c0 3305 	strd	r3, r3, [r0, #20]
 802b406:	e9c0 3307 	strd	r3, r3, [r0, #28]
 802b40a:	f7ff ffda 	bl	802b3c2 <_ZN8touchgfx8Scanline5resetEv>
 802b40e:	4620      	mov	r0, r4
 802b410:	bd10      	pop	{r4, pc}
 802b412:	bf00      	nop
 802b414:	08031bdc 	.word	0x08031bdc

0802b418 <_ZN8touchgfx8Scanline7addSpanEiijj>:
 802b418:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802b41c:	1e0c      	subs	r4, r1, #0
 802b41e:	4605      	mov	r5, r0
 802b420:	4617      	mov	r7, r2
 802b422:	461e      	mov	r6, r3
 802b424:	da03      	bge.n	802b42e <_ZN8touchgfx8Scanline7addSpanEiijj+0x16>
 802b426:	4426      	add	r6, r4
 802b428:	2e01      	cmp	r6, #1
 802b42a:	d421      	bmi.n	802b470 <_ZN8touchgfx8Scanline7addSpanEiijj+0x58>
 802b42c:	2400      	movs	r4, #0
 802b42e:	f7f1 fdcf 	bl	801cfd0 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>
 802b432:	42a0      	cmp	r0, r4
 802b434:	dd1c      	ble.n	802b470 <_ZN8touchgfx8Scanline7addSpanEiijj+0x58>
 802b436:	eb04 0806 	add.w	r8, r4, r6
 802b43a:	f7f1 fdc9 	bl	801cfd0 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>
 802b43e:	4580      	cmp	r8, r0
 802b440:	d902      	bls.n	802b448 <_ZN8touchgfx8Scanline7addSpanEiijj+0x30>
 802b442:	f7f1 fdc5 	bl	801cfd0 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>
 802b446:	1b06      	subs	r6, r0, r4
 802b448:	69a8      	ldr	r0, [r5, #24]
 802b44a:	4632      	mov	r2, r6
 802b44c:	f89d 1018 	ldrb.w	r1, [sp, #24]
 802b450:	4420      	add	r0, r4
 802b452:	f7f4 fb37 	bl	801fac4 <_ZN8touchgfx6memsetEPvhm>
 802b456:	686b      	ldr	r3, [r5, #4]
 802b458:	b2b2      	uxth	r2, r6
 802b45a:	3301      	adds	r3, #1
 802b45c:	42a3      	cmp	r3, r4
 802b45e:	696b      	ldr	r3, [r5, #20]
 802b460:	d108      	bne.n	802b474 <_ZN8touchgfx8Scanline7addSpanEiijj+0x5c>
 802b462:	8819      	ldrh	r1, [r3, #0]
 802b464:	440a      	add	r2, r1
 802b466:	801a      	strh	r2, [r3, #0]
 802b468:	3c01      	subs	r4, #1
 802b46a:	4434      	add	r4, r6
 802b46c:	e9c5 4701 	strd	r4, r7, [r5, #4]
 802b470:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802b474:	1c99      	adds	r1, r3, #2
 802b476:	6169      	str	r1, [r5, #20]
 802b478:	805a      	strh	r2, [r3, #2]
 802b47a:	692b      	ldr	r3, [r5, #16]
 802b47c:	1c9a      	adds	r2, r3, #2
 802b47e:	612a      	str	r2, [r5, #16]
 802b480:	805c      	strh	r4, [r3, #2]
 802b482:	68eb      	ldr	r3, [r5, #12]
 802b484:	3301      	adds	r3, #1
 802b486:	60eb      	str	r3, [r5, #12]
 802b488:	e7ee      	b.n	802b468 <_ZN8touchgfx8Scanline7addSpanEiijj+0x50>

0802b48a <_ZN8touchgfx15RenderingBufferD1Ev>:
 802b48a:	4770      	bx	lr

0802b48c <_ZN8touchgfx15RenderingBufferD0Ev>:
 802b48c:	b510      	push	{r4, lr}
 802b48e:	4604      	mov	r4, r0
 802b490:	2118      	movs	r1, #24
 802b492:	f000 f81c 	bl	802b4ce <_ZdlPvj>
 802b496:	4620      	mov	r0, r4
 802b498:	bd10      	pop	{r4, pc}
	...

0802b49c <_ZN8touchgfx15RenderingBufferC1Ev>:
 802b49c:	4a04      	ldr	r2, [pc, #16]	; (802b4b0 <_ZN8touchgfx15RenderingBufferC1Ev+0x14>)
 802b49e:	6002      	str	r2, [r0, #0]
 802b4a0:	2200      	movs	r2, #0
 802b4a2:	6042      	str	r2, [r0, #4]
 802b4a4:	7202      	strb	r2, [r0, #8]
 802b4a6:	6142      	str	r2, [r0, #20]
 802b4a8:	e9c0 2203 	strd	r2, r2, [r0, #12]
 802b4ac:	4770      	bx	lr
 802b4ae:	bf00      	nop
 802b4b0:	08031bec 	.word	0x08031bec

0802b4b4 <_ZN8touchgfx15RenderingBuffer6attachEPhhjji>:
 802b4b4:	60c3      	str	r3, [r0, #12]
 802b4b6:	9b00      	ldr	r3, [sp, #0]
 802b4b8:	6041      	str	r1, [r0, #4]
 802b4ba:	6103      	str	r3, [r0, #16]
 802b4bc:	9b01      	ldr	r3, [sp, #4]
 802b4be:	7202      	strb	r2, [r0, #8]
 802b4c0:	6143      	str	r3, [r0, #20]
 802b4c2:	4770      	bx	lr

0802b4c4 <__aeabi_atexit>:
 802b4c4:	460b      	mov	r3, r1
 802b4c6:	4601      	mov	r1, r0
 802b4c8:	4618      	mov	r0, r3
 802b4ca:	f000 b9f9 	b.w	802b8c0 <__cxa_atexit>

0802b4ce <_ZdlPvj>:
 802b4ce:	f000 b812 	b.w	802b4f6 <_ZdlPv>

0802b4d2 <__cxa_guard_acquire>:
 802b4d2:	6803      	ldr	r3, [r0, #0]
 802b4d4:	07db      	lsls	r3, r3, #31
 802b4d6:	d406      	bmi.n	802b4e6 <__cxa_guard_acquire+0x14>
 802b4d8:	7843      	ldrb	r3, [r0, #1]
 802b4da:	b103      	cbz	r3, 802b4de <__cxa_guard_acquire+0xc>
 802b4dc:	deff      	udf	#255	; 0xff
 802b4de:	2301      	movs	r3, #1
 802b4e0:	7043      	strb	r3, [r0, #1]
 802b4e2:	4618      	mov	r0, r3
 802b4e4:	4770      	bx	lr
 802b4e6:	2000      	movs	r0, #0
 802b4e8:	4770      	bx	lr

0802b4ea <__cxa_guard_release>:
 802b4ea:	2301      	movs	r3, #1
 802b4ec:	6003      	str	r3, [r0, #0]
 802b4ee:	4770      	bx	lr

0802b4f0 <__cxa_pure_virtual>:
 802b4f0:	b508      	push	{r3, lr}
 802b4f2:	f000 f80f 	bl	802b514 <_ZSt9terminatev>

0802b4f6 <_ZdlPv>:
 802b4f6:	f000 ba35 	b.w	802b964 <free>

0802b4fa <_ZN10__cxxabiv111__terminateEPFvvE>:
 802b4fa:	b508      	push	{r3, lr}
 802b4fc:	4780      	blx	r0
 802b4fe:	f000 f9b3 	bl	802b868 <abort>
	...

0802b504 <_ZSt13get_terminatev>:
 802b504:	4b02      	ldr	r3, [pc, #8]	; (802b510 <_ZSt13get_terminatev+0xc>)
 802b506:	6818      	ldr	r0, [r3, #0]
 802b508:	f3bf 8f5b 	dmb	ish
 802b50c:	4770      	bx	lr
 802b50e:	bf00      	nop
 802b510:	240000a4 	.word	0x240000a4

0802b514 <_ZSt9terminatev>:
 802b514:	b508      	push	{r3, lr}
 802b516:	f7ff fff5 	bl	802b504 <_ZSt13get_terminatev>
 802b51a:	f7ff ffee 	bl	802b4fa <_ZN10__cxxabiv111__terminateEPFvvE>

0802b51e <sinf_poly>:
 802b51e:	07cb      	lsls	r3, r1, #31
 802b520:	d412      	bmi.n	802b548 <sinf_poly+0x2a>
 802b522:	ee21 6b00 	vmul.f64	d6, d1, d0
 802b526:	ed90 5b1a 	vldr	d5, [r0, #104]	; 0x68
 802b52a:	ed90 7b18 	vldr	d7, [r0, #96]	; 0x60
 802b52e:	eea5 7b01 	vfma.f64	d7, d5, d1
 802b532:	ed90 5b16 	vldr	d5, [r0, #88]	; 0x58
 802b536:	ee21 1b06 	vmul.f64	d1, d1, d6
 802b53a:	eea5 0b06 	vfma.f64	d0, d5, d6
 802b53e:	eea7 0b01 	vfma.f64	d0, d7, d1
 802b542:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 802b546:	4770      	bx	lr
 802b548:	ed90 5b14 	vldr	d5, [r0, #80]	; 0x50
 802b54c:	ee21 6b01 	vmul.f64	d6, d1, d1
 802b550:	ed90 7b12 	vldr	d7, [r0, #72]	; 0x48
 802b554:	ed90 0b0c 	vldr	d0, [r0, #48]	; 0x30
 802b558:	eea1 7b05 	vfma.f64	d7, d1, d5
 802b55c:	ed90 5b0e 	vldr	d5, [r0, #56]	; 0x38
 802b560:	eea1 0b05 	vfma.f64	d0, d1, d5
 802b564:	ed90 5b10 	vldr	d5, [r0, #64]	; 0x40
 802b568:	ee21 1b06 	vmul.f64	d1, d1, d6
 802b56c:	eea6 0b05 	vfma.f64	d0, d6, d5
 802b570:	e7e5      	b.n	802b53e <sinf_poly+0x20>
 802b572:	0000      	movs	r0, r0
 802b574:	0000      	movs	r0, r0
	...

0802b578 <cosf>:
 802b578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802b57a:	ee10 4a10 	vmov	r4, s0
 802b57e:	f3c4 530a 	ubfx	r3, r4, #20, #11
 802b582:	f5b3 7f7d 	cmp.w	r3, #1012	; 0x3f4
 802b586:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 802b58a:	d20c      	bcs.n	802b5a6 <cosf+0x2e>
 802b58c:	ee26 1b06 	vmul.f64	d1, d6, d6
 802b590:	f5b3 7f66 	cmp.w	r3, #920	; 0x398
 802b594:	d378      	bcc.n	802b688 <cosf+0x110>
 802b596:	eeb0 0b46 	vmov.f64	d0, d6
 802b59a:	483f      	ldr	r0, [pc, #252]	; (802b698 <cosf+0x120>)
 802b59c:	2101      	movs	r1, #1
 802b59e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 802b5a2:	f7ff bfbc 	b.w	802b51e <sinf_poly>
 802b5a6:	f240 422e 	movw	r2, #1070	; 0x42e
 802b5aa:	4293      	cmp	r3, r2
 802b5ac:	d826      	bhi.n	802b5fc <cosf+0x84>
 802b5ae:	4b3a      	ldr	r3, [pc, #232]	; (802b698 <cosf+0x120>)
 802b5b0:	ed93 7b08 	vldr	d7, [r3, #32]
 802b5b4:	ee26 7b07 	vmul.f64	d7, d6, d7
 802b5b8:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 802b5bc:	f103 0070 	add.w	r0, r3, #112	; 0x70
 802b5c0:	ee17 1a90 	vmov	r1, s15
 802b5c4:	f501 0100 	add.w	r1, r1, #8388608	; 0x800000
 802b5c8:	1609      	asrs	r1, r1, #24
 802b5ca:	ee07 1a90 	vmov	s15, r1
 802b5ce:	f001 0203 	and.w	r2, r1, #3
 802b5d2:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 802b5d6:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 802b5da:	ed92 0b00 	vldr	d0, [r2]
 802b5de:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 802b5e2:	f011 0f02 	tst.w	r1, #2
 802b5e6:	eea5 6b47 	vfms.f64	d6, d5, d7
 802b5ea:	f081 0101 	eor.w	r1, r1, #1
 802b5ee:	bf08      	it	eq
 802b5f0:	4618      	moveq	r0, r3
 802b5f2:	ee26 1b06 	vmul.f64	d1, d6, d6
 802b5f6:	ee20 0b06 	vmul.f64	d0, d0, d6
 802b5fa:	e7d0      	b.n	802b59e <cosf+0x26>
 802b5fc:	f5b3 6fff 	cmp.w	r3, #2040	; 0x7f8
 802b600:	d23e      	bcs.n	802b680 <cosf+0x108>
 802b602:	4b26      	ldr	r3, [pc, #152]	; (802b69c <cosf+0x124>)
 802b604:	f3c4 6283 	ubfx	r2, r4, #26, #4
 802b608:	eb03 0082 	add.w	r0, r3, r2, lsl #2
 802b60c:	f3c4 0116 	ubfx	r1, r4, #0, #23
 802b610:	f3c4 55c2 	ubfx	r5, r4, #23, #3
 802b614:	6a06      	ldr	r6, [r0, #32]
 802b616:	6900      	ldr	r0, [r0, #16]
 802b618:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 802b61c:	40a9      	lsls	r1, r5
 802b61e:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 802b622:	fba1 6706 	umull	r6, r7, r1, r6
 802b626:	fb05 f301 	mul.w	r3, r5, r1
 802b62a:	463a      	mov	r2, r7
 802b62c:	fbe0 2301 	umlal	r2, r3, r0, r1
 802b630:	1c11      	adds	r1, r2, #0
 802b632:	f143 5600 	adc.w	r6, r3, #536870912	; 0x20000000
 802b636:	2000      	movs	r0, #0
 802b638:	1a10      	subs	r0, r2, r0
 802b63a:	f006 4140 	and.w	r1, r6, #3221225472	; 0xc0000000
 802b63e:	eb63 0101 	sbc.w	r1, r3, r1
 802b642:	f7d5 f833 	bl	80006ac <__aeabi_l2d>
 802b646:	0fb5      	lsrs	r5, r6, #30
 802b648:	4b13      	ldr	r3, [pc, #76]	; (802b698 <cosf+0x120>)
 802b64a:	eb05 74d4 	add.w	r4, r5, r4, lsr #31
 802b64e:	ed9f 0b10 	vldr	d0, [pc, #64]	; 802b690 <cosf+0x118>
 802b652:	ec41 0b17 	vmov	d7, r0, r1
 802b656:	f004 0203 	and.w	r2, r4, #3
 802b65a:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 802b65e:	ee27 0b00 	vmul.f64	d0, d7, d0
 802b662:	ed92 7b00 	vldr	d7, [r2]
 802b666:	ee20 1b00 	vmul.f64	d1, d0, d0
 802b66a:	f014 0f02 	tst.w	r4, #2
 802b66e:	f103 0070 	add.w	r0, r3, #112	; 0x70
 802b672:	f085 0101 	eor.w	r1, r5, #1
 802b676:	bf08      	it	eq
 802b678:	4618      	moveq	r0, r3
 802b67a:	ee27 0b00 	vmul.f64	d0, d7, d0
 802b67e:	e78e      	b.n	802b59e <cosf+0x26>
 802b680:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 802b684:	f000 b817 	b.w	802b6b6 <__math_invalidf>
 802b688:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 802b68c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802b68e:	bf00      	nop
 802b690:	54442d18 	.word	0x54442d18
 802b694:	3c1921fb 	.word	0x3c1921fb
 802b698:	08031c58 	.word	0x08031c58
 802b69c:	08031bf4 	.word	0x08031bf4

0802b6a0 <with_errnof>:
 802b6a0:	b513      	push	{r0, r1, r4, lr}
 802b6a2:	4604      	mov	r4, r0
 802b6a4:	ed8d 0a01 	vstr	s0, [sp, #4]
 802b6a8:	f000 f918 	bl	802b8dc <__errno>
 802b6ac:	ed9d 0a01 	vldr	s0, [sp, #4]
 802b6b0:	6004      	str	r4, [r0, #0]
 802b6b2:	b002      	add	sp, #8
 802b6b4:	bd10      	pop	{r4, pc}

0802b6b6 <__math_invalidf>:
 802b6b6:	eef0 7a40 	vmov.f32	s15, s0
 802b6ba:	ee30 7a40 	vsub.f32	s14, s0, s0
 802b6be:	eef4 7a67 	vcmp.f32	s15, s15
 802b6c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802b6c6:	ee87 0a07 	vdiv.f32	s0, s14, s14
 802b6ca:	d602      	bvs.n	802b6d2 <__math_invalidf+0x1c>
 802b6cc:	2021      	movs	r0, #33	; 0x21
 802b6ce:	f7ff bfe7 	b.w	802b6a0 <with_errnof>
 802b6d2:	4770      	bx	lr

0802b6d4 <sinf_poly>:
 802b6d4:	07cb      	lsls	r3, r1, #31
 802b6d6:	d412      	bmi.n	802b6fe <sinf_poly+0x2a>
 802b6d8:	ee21 6b00 	vmul.f64	d6, d1, d0
 802b6dc:	ed90 5b1a 	vldr	d5, [r0, #104]	; 0x68
 802b6e0:	ed90 7b18 	vldr	d7, [r0, #96]	; 0x60
 802b6e4:	eea5 7b01 	vfma.f64	d7, d5, d1
 802b6e8:	ed90 5b16 	vldr	d5, [r0, #88]	; 0x58
 802b6ec:	ee21 1b06 	vmul.f64	d1, d1, d6
 802b6f0:	eea5 0b06 	vfma.f64	d0, d5, d6
 802b6f4:	eea7 0b01 	vfma.f64	d0, d7, d1
 802b6f8:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 802b6fc:	4770      	bx	lr
 802b6fe:	ed90 5b14 	vldr	d5, [r0, #80]	; 0x50
 802b702:	ee21 6b01 	vmul.f64	d6, d1, d1
 802b706:	ed90 7b12 	vldr	d7, [r0, #72]	; 0x48
 802b70a:	ed90 0b0c 	vldr	d0, [r0, #48]	; 0x30
 802b70e:	eea1 7b05 	vfma.f64	d7, d1, d5
 802b712:	ed90 5b0e 	vldr	d5, [r0, #56]	; 0x38
 802b716:	eea1 0b05 	vfma.f64	d0, d1, d5
 802b71a:	ed90 5b10 	vldr	d5, [r0, #64]	; 0x40
 802b71e:	ee21 1b06 	vmul.f64	d1, d1, d6
 802b722:	eea6 0b05 	vfma.f64	d0, d6, d5
 802b726:	e7e5      	b.n	802b6f4 <sinf_poly+0x20>

0802b728 <sinf>:
 802b728:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 802b72a:	ee10 4a10 	vmov	r4, s0
 802b72e:	f3c4 530a 	ubfx	r3, r4, #20, #11
 802b732:	f5b3 7f7d 	cmp.w	r3, #1012	; 0x3f4
 802b736:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 802b73a:	eef0 7a40 	vmov.f32	s15, s0
 802b73e:	ea4f 5214 	mov.w	r2, r4, lsr #20
 802b742:	d218      	bcs.n	802b776 <sinf+0x4e>
 802b744:	ee26 1b06 	vmul.f64	d1, d6, d6
 802b748:	f5b3 7f66 	cmp.w	r3, #920	; 0x398
 802b74c:	d20a      	bcs.n	802b764 <sinf+0x3c>
 802b74e:	f412 6fff 	tst.w	r2, #2040	; 0x7f8
 802b752:	d103      	bne.n	802b75c <sinf+0x34>
 802b754:	eeb7 1bc1 	vcvt.f32.f64	s2, d1
 802b758:	ed8d 1a01 	vstr	s2, [sp, #4]
 802b75c:	eeb0 0a67 	vmov.f32	s0, s15
 802b760:	b003      	add	sp, #12
 802b762:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802b764:	483e      	ldr	r0, [pc, #248]	; (802b860 <sinf+0x138>)
 802b766:	eeb0 0b46 	vmov.f64	d0, d6
 802b76a:	2100      	movs	r1, #0
 802b76c:	b003      	add	sp, #12
 802b76e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 802b772:	f7ff bfaf 	b.w	802b6d4 <sinf_poly>
 802b776:	f240 422e 	movw	r2, #1070	; 0x42e
 802b77a:	4293      	cmp	r3, r2
 802b77c:	d824      	bhi.n	802b7c8 <sinf+0xa0>
 802b77e:	4b38      	ldr	r3, [pc, #224]	; (802b860 <sinf+0x138>)
 802b780:	ed93 7b08 	vldr	d7, [r3, #32]
 802b784:	ee26 7b07 	vmul.f64	d7, d6, d7
 802b788:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 802b78c:	f103 0070 	add.w	r0, r3, #112	; 0x70
 802b790:	ee17 1a90 	vmov	r1, s15
 802b794:	f501 0100 	add.w	r1, r1, #8388608	; 0x800000
 802b798:	1609      	asrs	r1, r1, #24
 802b79a:	ee07 1a90 	vmov	s15, r1
 802b79e:	f001 0203 	and.w	r2, r1, #3
 802b7a2:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 802b7a6:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 802b7aa:	ed92 0b00 	vldr	d0, [r2]
 802b7ae:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 802b7b2:	f011 0f02 	tst.w	r1, #2
 802b7b6:	eea5 6b47 	vfms.f64	d6, d5, d7
 802b7ba:	bf08      	it	eq
 802b7bc:	4618      	moveq	r0, r3
 802b7be:	ee26 1b06 	vmul.f64	d1, d6, d6
 802b7c2:	ee20 0b06 	vmul.f64	d0, d0, d6
 802b7c6:	e7d1      	b.n	802b76c <sinf+0x44>
 802b7c8:	f5b3 6fff 	cmp.w	r3, #2040	; 0x7f8
 802b7cc:	d23d      	bcs.n	802b84a <sinf+0x122>
 802b7ce:	4b25      	ldr	r3, [pc, #148]	; (802b864 <sinf+0x13c>)
 802b7d0:	f3c4 6283 	ubfx	r2, r4, #26, #4
 802b7d4:	eb03 0082 	add.w	r0, r3, r2, lsl #2
 802b7d8:	f3c4 0116 	ubfx	r1, r4, #0, #23
 802b7dc:	6a06      	ldr	r6, [r0, #32]
 802b7de:	6900      	ldr	r0, [r0, #16]
 802b7e0:	f3c4 55c2 	ubfx	r5, r4, #23, #3
 802b7e4:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 802b7e8:	40a9      	lsls	r1, r5
 802b7ea:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 802b7ee:	fba1 6706 	umull	r6, r7, r1, r6
 802b7f2:	fb05 f301 	mul.w	r3, r5, r1
 802b7f6:	463a      	mov	r2, r7
 802b7f8:	fbe0 2301 	umlal	r2, r3, r0, r1
 802b7fc:	1c11      	adds	r1, r2, #0
 802b7fe:	f143 5600 	adc.w	r6, r3, #536870912	; 0x20000000
 802b802:	2000      	movs	r0, #0
 802b804:	1a10      	subs	r0, r2, r0
 802b806:	f006 4140 	and.w	r1, r6, #3221225472	; 0xc0000000
 802b80a:	eb63 0101 	sbc.w	r1, r3, r1
 802b80e:	f7d4 ff4d 	bl	80006ac <__aeabi_l2d>
 802b812:	0fb5      	lsrs	r5, r6, #30
 802b814:	4a12      	ldr	r2, [pc, #72]	; (802b860 <sinf+0x138>)
 802b816:	eb05 73d4 	add.w	r3, r5, r4, lsr #31
 802b81a:	ed9f 0b0f 	vldr	d0, [pc, #60]	; 802b858 <sinf+0x130>
 802b81e:	ec41 0b17 	vmov	d7, r0, r1
 802b822:	f003 0103 	and.w	r1, r3, #3
 802b826:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 802b82a:	ee27 0b00 	vmul.f64	d0, d7, d0
 802b82e:	ed91 7b00 	vldr	d7, [r1]
 802b832:	ee20 1b00 	vmul.f64	d1, d0, d0
 802b836:	f013 0f02 	tst.w	r3, #2
 802b83a:	f102 0070 	add.w	r0, r2, #112	; 0x70
 802b83e:	4629      	mov	r1, r5
 802b840:	bf08      	it	eq
 802b842:	4610      	moveq	r0, r2
 802b844:	ee27 0b00 	vmul.f64	d0, d7, d0
 802b848:	e790      	b.n	802b76c <sinf+0x44>
 802b84a:	b003      	add	sp, #12
 802b84c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 802b850:	f7ff bf31 	b.w	802b6b6 <__math_invalidf>
 802b854:	f3af 8000 	nop.w
 802b858:	54442d18 	.word	0x54442d18
 802b85c:	3c1921fb 	.word	0x3c1921fb
 802b860:	08031c58 	.word	0x08031c58
 802b864:	08031bf4 	.word	0x08031bf4

0802b868 <abort>:
 802b868:	b508      	push	{r3, lr}
 802b86a:	2006      	movs	r0, #6
 802b86c:	f000 fc68 	bl	802c140 <raise>
 802b870:	2001      	movs	r0, #1
 802b872:	f7d8 fab3 	bl	8003ddc <_exit>
	...

0802b878 <__assert_func>:
 802b878:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 802b87a:	4614      	mov	r4, r2
 802b87c:	461a      	mov	r2, r3
 802b87e:	4b09      	ldr	r3, [pc, #36]	; (802b8a4 <__assert_func+0x2c>)
 802b880:	681b      	ldr	r3, [r3, #0]
 802b882:	4605      	mov	r5, r0
 802b884:	68d8      	ldr	r0, [r3, #12]
 802b886:	b14c      	cbz	r4, 802b89c <__assert_func+0x24>
 802b888:	4b07      	ldr	r3, [pc, #28]	; (802b8a8 <__assert_func+0x30>)
 802b88a:	9100      	str	r1, [sp, #0]
 802b88c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 802b890:	4906      	ldr	r1, [pc, #24]	; (802b8ac <__assert_func+0x34>)
 802b892:	462b      	mov	r3, r5
 802b894:	f000 f828 	bl	802b8e8 <fiprintf>
 802b898:	f7ff ffe6 	bl	802b868 <abort>
 802b89c:	4b04      	ldr	r3, [pc, #16]	; (802b8b0 <__assert_func+0x38>)
 802b89e:	461c      	mov	r4, r3
 802b8a0:	e7f3      	b.n	802b88a <__assert_func+0x12>
 802b8a2:	bf00      	nop
 802b8a4:	240000a8 	.word	0x240000a8
 802b8a8:	08031d38 	.word	0x08031d38
 802b8ac:	08031d45 	.word	0x08031d45
 802b8b0:	08031d73 	.word	0x08031d73

0802b8b4 <atexit>:
 802b8b4:	2300      	movs	r3, #0
 802b8b6:	4601      	mov	r1, r0
 802b8b8:	461a      	mov	r2, r3
 802b8ba:	4618      	mov	r0, r3
 802b8bc:	f000 bd1c 	b.w	802c2f8 <__register_exitproc>

0802b8c0 <__cxa_atexit>:
 802b8c0:	b510      	push	{r4, lr}
 802b8c2:	4c05      	ldr	r4, [pc, #20]	; (802b8d8 <__cxa_atexit+0x18>)
 802b8c4:	4613      	mov	r3, r2
 802b8c6:	b12c      	cbz	r4, 802b8d4 <__cxa_atexit+0x14>
 802b8c8:	460a      	mov	r2, r1
 802b8ca:	4601      	mov	r1, r0
 802b8cc:	2002      	movs	r0, #2
 802b8ce:	f000 fd13 	bl	802c2f8 <__register_exitproc>
 802b8d2:	bd10      	pop	{r4, pc}
 802b8d4:	4620      	mov	r0, r4
 802b8d6:	e7fc      	b.n	802b8d2 <__cxa_atexit+0x12>
 802b8d8:	0802c2f9 	.word	0x0802c2f9

0802b8dc <__errno>:
 802b8dc:	4b01      	ldr	r3, [pc, #4]	; (802b8e4 <__errno+0x8>)
 802b8de:	6818      	ldr	r0, [r3, #0]
 802b8e0:	4770      	bx	lr
 802b8e2:	bf00      	nop
 802b8e4:	240000a8 	.word	0x240000a8

0802b8e8 <fiprintf>:
 802b8e8:	b40e      	push	{r1, r2, r3}
 802b8ea:	b503      	push	{r0, r1, lr}
 802b8ec:	4601      	mov	r1, r0
 802b8ee:	ab03      	add	r3, sp, #12
 802b8f0:	4805      	ldr	r0, [pc, #20]	; (802b908 <fiprintf+0x20>)
 802b8f2:	f853 2b04 	ldr.w	r2, [r3], #4
 802b8f6:	6800      	ldr	r0, [r0, #0]
 802b8f8:	9301      	str	r3, [sp, #4]
 802b8fa:	f000 f925 	bl	802bb48 <_vfiprintf_r>
 802b8fe:	b002      	add	sp, #8
 802b900:	f85d eb04 	ldr.w	lr, [sp], #4
 802b904:	b003      	add	sp, #12
 802b906:	4770      	bx	lr
 802b908:	240000a8 	.word	0x240000a8

0802b90c <__libc_init_array>:
 802b90c:	b570      	push	{r4, r5, r6, lr}
 802b90e:	4d0d      	ldr	r5, [pc, #52]	; (802b944 <__libc_init_array+0x38>)
 802b910:	4c0d      	ldr	r4, [pc, #52]	; (802b948 <__libc_init_array+0x3c>)
 802b912:	1b64      	subs	r4, r4, r5
 802b914:	10a4      	asrs	r4, r4, #2
 802b916:	2600      	movs	r6, #0
 802b918:	42a6      	cmp	r6, r4
 802b91a:	d109      	bne.n	802b930 <__libc_init_array+0x24>
 802b91c:	4d0b      	ldr	r5, [pc, #44]	; (802b94c <__libc_init_array+0x40>)
 802b91e:	4c0c      	ldr	r4, [pc, #48]	; (802b950 <__libc_init_array+0x44>)
 802b920:	f001 f824 	bl	802c96c <_init>
 802b924:	1b64      	subs	r4, r4, r5
 802b926:	10a4      	asrs	r4, r4, #2
 802b928:	2600      	movs	r6, #0
 802b92a:	42a6      	cmp	r6, r4
 802b92c:	d105      	bne.n	802b93a <__libc_init_array+0x2e>
 802b92e:	bd70      	pop	{r4, r5, r6, pc}
 802b930:	f855 3b04 	ldr.w	r3, [r5], #4
 802b934:	4798      	blx	r3
 802b936:	3601      	adds	r6, #1
 802b938:	e7ee      	b.n	802b918 <__libc_init_array+0xc>
 802b93a:	f855 3b04 	ldr.w	r3, [r5], #4
 802b93e:	4798      	blx	r3
 802b940:	3601      	adds	r6, #1
 802b942:	e7f2      	b.n	802b92a <__libc_init_array+0x1e>
 802b944:	08031e2c 	.word	0x08031e2c
 802b948:	08031e2c 	.word	0x08031e2c
 802b94c:	08031e2c 	.word	0x08031e2c
 802b950:	08031e40 	.word	0x08031e40

0802b954 <malloc>:
 802b954:	4b02      	ldr	r3, [pc, #8]	; (802b960 <malloc+0xc>)
 802b956:	4601      	mov	r1, r0
 802b958:	6818      	ldr	r0, [r3, #0]
 802b95a:	f000 b871 	b.w	802ba40 <_malloc_r>
 802b95e:	bf00      	nop
 802b960:	240000a8 	.word	0x240000a8

0802b964 <free>:
 802b964:	4b02      	ldr	r3, [pc, #8]	; (802b970 <free+0xc>)
 802b966:	4601      	mov	r1, r0
 802b968:	6818      	ldr	r0, [r3, #0]
 802b96a:	f000 b819 	b.w	802b9a0 <_free_r>
 802b96e:	bf00      	nop
 802b970:	240000a8 	.word	0x240000a8

0802b974 <memcpy>:
 802b974:	440a      	add	r2, r1
 802b976:	4291      	cmp	r1, r2
 802b978:	f100 33ff 	add.w	r3, r0, #4294967295
 802b97c:	d100      	bne.n	802b980 <memcpy+0xc>
 802b97e:	4770      	bx	lr
 802b980:	b510      	push	{r4, lr}
 802b982:	f811 4b01 	ldrb.w	r4, [r1], #1
 802b986:	f803 4f01 	strb.w	r4, [r3, #1]!
 802b98a:	4291      	cmp	r1, r2
 802b98c:	d1f9      	bne.n	802b982 <memcpy+0xe>
 802b98e:	bd10      	pop	{r4, pc}

0802b990 <memset>:
 802b990:	4402      	add	r2, r0
 802b992:	4603      	mov	r3, r0
 802b994:	4293      	cmp	r3, r2
 802b996:	d100      	bne.n	802b99a <memset+0xa>
 802b998:	4770      	bx	lr
 802b99a:	f803 1b01 	strb.w	r1, [r3], #1
 802b99e:	e7f9      	b.n	802b994 <memset+0x4>

0802b9a0 <_free_r>:
 802b9a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 802b9a2:	2900      	cmp	r1, #0
 802b9a4:	d048      	beq.n	802ba38 <_free_r+0x98>
 802b9a6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802b9aa:	9001      	str	r0, [sp, #4]
 802b9ac:	2b00      	cmp	r3, #0
 802b9ae:	f1a1 0404 	sub.w	r4, r1, #4
 802b9b2:	bfb8      	it	lt
 802b9b4:	18e4      	addlt	r4, r4, r3
 802b9b6:	f000 ff21 	bl	802c7fc <__malloc_lock>
 802b9ba:	4a20      	ldr	r2, [pc, #128]	; (802ba3c <_free_r+0x9c>)
 802b9bc:	9801      	ldr	r0, [sp, #4]
 802b9be:	6813      	ldr	r3, [r2, #0]
 802b9c0:	4615      	mov	r5, r2
 802b9c2:	b933      	cbnz	r3, 802b9d2 <_free_r+0x32>
 802b9c4:	6063      	str	r3, [r4, #4]
 802b9c6:	6014      	str	r4, [r2, #0]
 802b9c8:	b003      	add	sp, #12
 802b9ca:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 802b9ce:	f000 bf1b 	b.w	802c808 <__malloc_unlock>
 802b9d2:	42a3      	cmp	r3, r4
 802b9d4:	d90b      	bls.n	802b9ee <_free_r+0x4e>
 802b9d6:	6821      	ldr	r1, [r4, #0]
 802b9d8:	1862      	adds	r2, r4, r1
 802b9da:	4293      	cmp	r3, r2
 802b9dc:	bf04      	itt	eq
 802b9de:	681a      	ldreq	r2, [r3, #0]
 802b9e0:	685b      	ldreq	r3, [r3, #4]
 802b9e2:	6063      	str	r3, [r4, #4]
 802b9e4:	bf04      	itt	eq
 802b9e6:	1852      	addeq	r2, r2, r1
 802b9e8:	6022      	streq	r2, [r4, #0]
 802b9ea:	602c      	str	r4, [r5, #0]
 802b9ec:	e7ec      	b.n	802b9c8 <_free_r+0x28>
 802b9ee:	461a      	mov	r2, r3
 802b9f0:	685b      	ldr	r3, [r3, #4]
 802b9f2:	b10b      	cbz	r3, 802b9f8 <_free_r+0x58>
 802b9f4:	42a3      	cmp	r3, r4
 802b9f6:	d9fa      	bls.n	802b9ee <_free_r+0x4e>
 802b9f8:	6811      	ldr	r1, [r2, #0]
 802b9fa:	1855      	adds	r5, r2, r1
 802b9fc:	42a5      	cmp	r5, r4
 802b9fe:	d10b      	bne.n	802ba18 <_free_r+0x78>
 802ba00:	6824      	ldr	r4, [r4, #0]
 802ba02:	4421      	add	r1, r4
 802ba04:	1854      	adds	r4, r2, r1
 802ba06:	42a3      	cmp	r3, r4
 802ba08:	6011      	str	r1, [r2, #0]
 802ba0a:	d1dd      	bne.n	802b9c8 <_free_r+0x28>
 802ba0c:	681c      	ldr	r4, [r3, #0]
 802ba0e:	685b      	ldr	r3, [r3, #4]
 802ba10:	6053      	str	r3, [r2, #4]
 802ba12:	4421      	add	r1, r4
 802ba14:	6011      	str	r1, [r2, #0]
 802ba16:	e7d7      	b.n	802b9c8 <_free_r+0x28>
 802ba18:	d902      	bls.n	802ba20 <_free_r+0x80>
 802ba1a:	230c      	movs	r3, #12
 802ba1c:	6003      	str	r3, [r0, #0]
 802ba1e:	e7d3      	b.n	802b9c8 <_free_r+0x28>
 802ba20:	6825      	ldr	r5, [r4, #0]
 802ba22:	1961      	adds	r1, r4, r5
 802ba24:	428b      	cmp	r3, r1
 802ba26:	bf04      	itt	eq
 802ba28:	6819      	ldreq	r1, [r3, #0]
 802ba2a:	685b      	ldreq	r3, [r3, #4]
 802ba2c:	6063      	str	r3, [r4, #4]
 802ba2e:	bf04      	itt	eq
 802ba30:	1949      	addeq	r1, r1, r5
 802ba32:	6021      	streq	r1, [r4, #0]
 802ba34:	6054      	str	r4, [r2, #4]
 802ba36:	e7c7      	b.n	802b9c8 <_free_r+0x28>
 802ba38:	b003      	add	sp, #12
 802ba3a:	bd30      	pop	{r4, r5, pc}
 802ba3c:	2400c9b8 	.word	0x2400c9b8

0802ba40 <_malloc_r>:
 802ba40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802ba42:	1ccd      	adds	r5, r1, #3
 802ba44:	f025 0503 	bic.w	r5, r5, #3
 802ba48:	3508      	adds	r5, #8
 802ba4a:	2d0c      	cmp	r5, #12
 802ba4c:	bf38      	it	cc
 802ba4e:	250c      	movcc	r5, #12
 802ba50:	2d00      	cmp	r5, #0
 802ba52:	4606      	mov	r6, r0
 802ba54:	db01      	blt.n	802ba5a <_malloc_r+0x1a>
 802ba56:	42a9      	cmp	r1, r5
 802ba58:	d903      	bls.n	802ba62 <_malloc_r+0x22>
 802ba5a:	230c      	movs	r3, #12
 802ba5c:	6033      	str	r3, [r6, #0]
 802ba5e:	2000      	movs	r0, #0
 802ba60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802ba62:	f000 fecb 	bl	802c7fc <__malloc_lock>
 802ba66:	4921      	ldr	r1, [pc, #132]	; (802baec <_malloc_r+0xac>)
 802ba68:	680a      	ldr	r2, [r1, #0]
 802ba6a:	4614      	mov	r4, r2
 802ba6c:	b99c      	cbnz	r4, 802ba96 <_malloc_r+0x56>
 802ba6e:	4f20      	ldr	r7, [pc, #128]	; (802baf0 <_malloc_r+0xb0>)
 802ba70:	683b      	ldr	r3, [r7, #0]
 802ba72:	b923      	cbnz	r3, 802ba7e <_malloc_r+0x3e>
 802ba74:	4621      	mov	r1, r4
 802ba76:	4630      	mov	r0, r6
 802ba78:	f000 fb2a 	bl	802c0d0 <_sbrk_r>
 802ba7c:	6038      	str	r0, [r7, #0]
 802ba7e:	4629      	mov	r1, r5
 802ba80:	4630      	mov	r0, r6
 802ba82:	f000 fb25 	bl	802c0d0 <_sbrk_r>
 802ba86:	1c43      	adds	r3, r0, #1
 802ba88:	d123      	bne.n	802bad2 <_malloc_r+0x92>
 802ba8a:	230c      	movs	r3, #12
 802ba8c:	6033      	str	r3, [r6, #0]
 802ba8e:	4630      	mov	r0, r6
 802ba90:	f000 feba 	bl	802c808 <__malloc_unlock>
 802ba94:	e7e3      	b.n	802ba5e <_malloc_r+0x1e>
 802ba96:	6823      	ldr	r3, [r4, #0]
 802ba98:	1b5b      	subs	r3, r3, r5
 802ba9a:	d417      	bmi.n	802bacc <_malloc_r+0x8c>
 802ba9c:	2b0b      	cmp	r3, #11
 802ba9e:	d903      	bls.n	802baa8 <_malloc_r+0x68>
 802baa0:	6023      	str	r3, [r4, #0]
 802baa2:	441c      	add	r4, r3
 802baa4:	6025      	str	r5, [r4, #0]
 802baa6:	e004      	b.n	802bab2 <_malloc_r+0x72>
 802baa8:	6863      	ldr	r3, [r4, #4]
 802baaa:	42a2      	cmp	r2, r4
 802baac:	bf0c      	ite	eq
 802baae:	600b      	streq	r3, [r1, #0]
 802bab0:	6053      	strne	r3, [r2, #4]
 802bab2:	4630      	mov	r0, r6
 802bab4:	f000 fea8 	bl	802c808 <__malloc_unlock>
 802bab8:	f104 000b 	add.w	r0, r4, #11
 802babc:	1d23      	adds	r3, r4, #4
 802babe:	f020 0007 	bic.w	r0, r0, #7
 802bac2:	1ac2      	subs	r2, r0, r3
 802bac4:	d0cc      	beq.n	802ba60 <_malloc_r+0x20>
 802bac6:	1a1b      	subs	r3, r3, r0
 802bac8:	50a3      	str	r3, [r4, r2]
 802baca:	e7c9      	b.n	802ba60 <_malloc_r+0x20>
 802bacc:	4622      	mov	r2, r4
 802bace:	6864      	ldr	r4, [r4, #4]
 802bad0:	e7cc      	b.n	802ba6c <_malloc_r+0x2c>
 802bad2:	1cc4      	adds	r4, r0, #3
 802bad4:	f024 0403 	bic.w	r4, r4, #3
 802bad8:	42a0      	cmp	r0, r4
 802bada:	d0e3      	beq.n	802baa4 <_malloc_r+0x64>
 802badc:	1a21      	subs	r1, r4, r0
 802bade:	4630      	mov	r0, r6
 802bae0:	f000 faf6 	bl	802c0d0 <_sbrk_r>
 802bae4:	3001      	adds	r0, #1
 802bae6:	d1dd      	bne.n	802baa4 <_malloc_r+0x64>
 802bae8:	e7cf      	b.n	802ba8a <_malloc_r+0x4a>
 802baea:	bf00      	nop
 802baec:	2400c9b8 	.word	0x2400c9b8
 802baf0:	2400c9bc 	.word	0x2400c9bc

0802baf4 <__sfputc_r>:
 802baf4:	6893      	ldr	r3, [r2, #8]
 802baf6:	3b01      	subs	r3, #1
 802baf8:	2b00      	cmp	r3, #0
 802bafa:	b410      	push	{r4}
 802bafc:	6093      	str	r3, [r2, #8]
 802bafe:	da08      	bge.n	802bb12 <__sfputc_r+0x1e>
 802bb00:	6994      	ldr	r4, [r2, #24]
 802bb02:	42a3      	cmp	r3, r4
 802bb04:	db01      	blt.n	802bb0a <__sfputc_r+0x16>
 802bb06:	290a      	cmp	r1, #10
 802bb08:	d103      	bne.n	802bb12 <__sfputc_r+0x1e>
 802bb0a:	f85d 4b04 	ldr.w	r4, [sp], #4
 802bb0e:	f000 bb33 	b.w	802c178 <__swbuf_r>
 802bb12:	6813      	ldr	r3, [r2, #0]
 802bb14:	1c58      	adds	r0, r3, #1
 802bb16:	6010      	str	r0, [r2, #0]
 802bb18:	7019      	strb	r1, [r3, #0]
 802bb1a:	4608      	mov	r0, r1
 802bb1c:	f85d 4b04 	ldr.w	r4, [sp], #4
 802bb20:	4770      	bx	lr

0802bb22 <__sfputs_r>:
 802bb22:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802bb24:	4606      	mov	r6, r0
 802bb26:	460f      	mov	r7, r1
 802bb28:	4614      	mov	r4, r2
 802bb2a:	18d5      	adds	r5, r2, r3
 802bb2c:	42ac      	cmp	r4, r5
 802bb2e:	d101      	bne.n	802bb34 <__sfputs_r+0x12>
 802bb30:	2000      	movs	r0, #0
 802bb32:	e007      	b.n	802bb44 <__sfputs_r+0x22>
 802bb34:	f814 1b01 	ldrb.w	r1, [r4], #1
 802bb38:	463a      	mov	r2, r7
 802bb3a:	4630      	mov	r0, r6
 802bb3c:	f7ff ffda 	bl	802baf4 <__sfputc_r>
 802bb40:	1c43      	adds	r3, r0, #1
 802bb42:	d1f3      	bne.n	802bb2c <__sfputs_r+0xa>
 802bb44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0802bb48 <_vfiprintf_r>:
 802bb48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802bb4c:	460d      	mov	r5, r1
 802bb4e:	b09d      	sub	sp, #116	; 0x74
 802bb50:	4614      	mov	r4, r2
 802bb52:	4698      	mov	r8, r3
 802bb54:	4606      	mov	r6, r0
 802bb56:	b118      	cbz	r0, 802bb60 <_vfiprintf_r+0x18>
 802bb58:	6983      	ldr	r3, [r0, #24]
 802bb5a:	b90b      	cbnz	r3, 802bb60 <_vfiprintf_r+0x18>
 802bb5c:	f000 fd48 	bl	802c5f0 <__sinit>
 802bb60:	4b89      	ldr	r3, [pc, #548]	; (802bd88 <_vfiprintf_r+0x240>)
 802bb62:	429d      	cmp	r5, r3
 802bb64:	d11b      	bne.n	802bb9e <_vfiprintf_r+0x56>
 802bb66:	6875      	ldr	r5, [r6, #4]
 802bb68:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802bb6a:	07d9      	lsls	r1, r3, #31
 802bb6c:	d405      	bmi.n	802bb7a <_vfiprintf_r+0x32>
 802bb6e:	89ab      	ldrh	r3, [r5, #12]
 802bb70:	059a      	lsls	r2, r3, #22
 802bb72:	d402      	bmi.n	802bb7a <_vfiprintf_r+0x32>
 802bb74:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802bb76:	f000 fdd9 	bl	802c72c <__retarget_lock_acquire_recursive>
 802bb7a:	89ab      	ldrh	r3, [r5, #12]
 802bb7c:	071b      	lsls	r3, r3, #28
 802bb7e:	d501      	bpl.n	802bb84 <_vfiprintf_r+0x3c>
 802bb80:	692b      	ldr	r3, [r5, #16]
 802bb82:	b9eb      	cbnz	r3, 802bbc0 <_vfiprintf_r+0x78>
 802bb84:	4629      	mov	r1, r5
 802bb86:	4630      	mov	r0, r6
 802bb88:	f000 fb48 	bl	802c21c <__swsetup_r>
 802bb8c:	b1c0      	cbz	r0, 802bbc0 <_vfiprintf_r+0x78>
 802bb8e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802bb90:	07dc      	lsls	r4, r3, #31
 802bb92:	d50e      	bpl.n	802bbb2 <_vfiprintf_r+0x6a>
 802bb94:	f04f 30ff 	mov.w	r0, #4294967295
 802bb98:	b01d      	add	sp, #116	; 0x74
 802bb9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802bb9e:	4b7b      	ldr	r3, [pc, #492]	; (802bd8c <_vfiprintf_r+0x244>)
 802bba0:	429d      	cmp	r5, r3
 802bba2:	d101      	bne.n	802bba8 <_vfiprintf_r+0x60>
 802bba4:	68b5      	ldr	r5, [r6, #8]
 802bba6:	e7df      	b.n	802bb68 <_vfiprintf_r+0x20>
 802bba8:	4b79      	ldr	r3, [pc, #484]	; (802bd90 <_vfiprintf_r+0x248>)
 802bbaa:	429d      	cmp	r5, r3
 802bbac:	bf08      	it	eq
 802bbae:	68f5      	ldreq	r5, [r6, #12]
 802bbb0:	e7da      	b.n	802bb68 <_vfiprintf_r+0x20>
 802bbb2:	89ab      	ldrh	r3, [r5, #12]
 802bbb4:	0598      	lsls	r0, r3, #22
 802bbb6:	d4ed      	bmi.n	802bb94 <_vfiprintf_r+0x4c>
 802bbb8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802bbba:	f000 fdb9 	bl	802c730 <__retarget_lock_release_recursive>
 802bbbe:	e7e9      	b.n	802bb94 <_vfiprintf_r+0x4c>
 802bbc0:	2300      	movs	r3, #0
 802bbc2:	9309      	str	r3, [sp, #36]	; 0x24
 802bbc4:	2320      	movs	r3, #32
 802bbc6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 802bbca:	f8cd 800c 	str.w	r8, [sp, #12]
 802bbce:	2330      	movs	r3, #48	; 0x30
 802bbd0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 802bd94 <_vfiprintf_r+0x24c>
 802bbd4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 802bbd8:	f04f 0901 	mov.w	r9, #1
 802bbdc:	4623      	mov	r3, r4
 802bbde:	469a      	mov	sl, r3
 802bbe0:	f813 2b01 	ldrb.w	r2, [r3], #1
 802bbe4:	b10a      	cbz	r2, 802bbea <_vfiprintf_r+0xa2>
 802bbe6:	2a25      	cmp	r2, #37	; 0x25
 802bbe8:	d1f9      	bne.n	802bbde <_vfiprintf_r+0x96>
 802bbea:	ebba 0b04 	subs.w	fp, sl, r4
 802bbee:	d00b      	beq.n	802bc08 <_vfiprintf_r+0xc0>
 802bbf0:	465b      	mov	r3, fp
 802bbf2:	4622      	mov	r2, r4
 802bbf4:	4629      	mov	r1, r5
 802bbf6:	4630      	mov	r0, r6
 802bbf8:	f7ff ff93 	bl	802bb22 <__sfputs_r>
 802bbfc:	3001      	adds	r0, #1
 802bbfe:	f000 80aa 	beq.w	802bd56 <_vfiprintf_r+0x20e>
 802bc02:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802bc04:	445a      	add	r2, fp
 802bc06:	9209      	str	r2, [sp, #36]	; 0x24
 802bc08:	f89a 3000 	ldrb.w	r3, [sl]
 802bc0c:	2b00      	cmp	r3, #0
 802bc0e:	f000 80a2 	beq.w	802bd56 <_vfiprintf_r+0x20e>
 802bc12:	2300      	movs	r3, #0
 802bc14:	f04f 32ff 	mov.w	r2, #4294967295
 802bc18:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802bc1c:	f10a 0a01 	add.w	sl, sl, #1
 802bc20:	9304      	str	r3, [sp, #16]
 802bc22:	9307      	str	r3, [sp, #28]
 802bc24:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 802bc28:	931a      	str	r3, [sp, #104]	; 0x68
 802bc2a:	4654      	mov	r4, sl
 802bc2c:	2205      	movs	r2, #5
 802bc2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 802bc32:	4858      	ldr	r0, [pc, #352]	; (802bd94 <_vfiprintf_r+0x24c>)
 802bc34:	f7d4 fb5c 	bl	80002f0 <memchr>
 802bc38:	9a04      	ldr	r2, [sp, #16]
 802bc3a:	b9d8      	cbnz	r0, 802bc74 <_vfiprintf_r+0x12c>
 802bc3c:	06d1      	lsls	r1, r2, #27
 802bc3e:	bf44      	itt	mi
 802bc40:	2320      	movmi	r3, #32
 802bc42:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802bc46:	0713      	lsls	r3, r2, #28
 802bc48:	bf44      	itt	mi
 802bc4a:	232b      	movmi	r3, #43	; 0x2b
 802bc4c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802bc50:	f89a 3000 	ldrb.w	r3, [sl]
 802bc54:	2b2a      	cmp	r3, #42	; 0x2a
 802bc56:	d015      	beq.n	802bc84 <_vfiprintf_r+0x13c>
 802bc58:	9a07      	ldr	r2, [sp, #28]
 802bc5a:	4654      	mov	r4, sl
 802bc5c:	2000      	movs	r0, #0
 802bc5e:	f04f 0c0a 	mov.w	ip, #10
 802bc62:	4621      	mov	r1, r4
 802bc64:	f811 3b01 	ldrb.w	r3, [r1], #1
 802bc68:	3b30      	subs	r3, #48	; 0x30
 802bc6a:	2b09      	cmp	r3, #9
 802bc6c:	d94e      	bls.n	802bd0c <_vfiprintf_r+0x1c4>
 802bc6e:	b1b0      	cbz	r0, 802bc9e <_vfiprintf_r+0x156>
 802bc70:	9207      	str	r2, [sp, #28]
 802bc72:	e014      	b.n	802bc9e <_vfiprintf_r+0x156>
 802bc74:	eba0 0308 	sub.w	r3, r0, r8
 802bc78:	fa09 f303 	lsl.w	r3, r9, r3
 802bc7c:	4313      	orrs	r3, r2
 802bc7e:	9304      	str	r3, [sp, #16]
 802bc80:	46a2      	mov	sl, r4
 802bc82:	e7d2      	b.n	802bc2a <_vfiprintf_r+0xe2>
 802bc84:	9b03      	ldr	r3, [sp, #12]
 802bc86:	1d19      	adds	r1, r3, #4
 802bc88:	681b      	ldr	r3, [r3, #0]
 802bc8a:	9103      	str	r1, [sp, #12]
 802bc8c:	2b00      	cmp	r3, #0
 802bc8e:	bfbb      	ittet	lt
 802bc90:	425b      	neglt	r3, r3
 802bc92:	f042 0202 	orrlt.w	r2, r2, #2
 802bc96:	9307      	strge	r3, [sp, #28]
 802bc98:	9307      	strlt	r3, [sp, #28]
 802bc9a:	bfb8      	it	lt
 802bc9c:	9204      	strlt	r2, [sp, #16]
 802bc9e:	7823      	ldrb	r3, [r4, #0]
 802bca0:	2b2e      	cmp	r3, #46	; 0x2e
 802bca2:	d10c      	bne.n	802bcbe <_vfiprintf_r+0x176>
 802bca4:	7863      	ldrb	r3, [r4, #1]
 802bca6:	2b2a      	cmp	r3, #42	; 0x2a
 802bca8:	d135      	bne.n	802bd16 <_vfiprintf_r+0x1ce>
 802bcaa:	9b03      	ldr	r3, [sp, #12]
 802bcac:	1d1a      	adds	r2, r3, #4
 802bcae:	681b      	ldr	r3, [r3, #0]
 802bcb0:	9203      	str	r2, [sp, #12]
 802bcb2:	2b00      	cmp	r3, #0
 802bcb4:	bfb8      	it	lt
 802bcb6:	f04f 33ff 	movlt.w	r3, #4294967295
 802bcba:	3402      	adds	r4, #2
 802bcbc:	9305      	str	r3, [sp, #20]
 802bcbe:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 802bda4 <_vfiprintf_r+0x25c>
 802bcc2:	7821      	ldrb	r1, [r4, #0]
 802bcc4:	2203      	movs	r2, #3
 802bcc6:	4650      	mov	r0, sl
 802bcc8:	f7d4 fb12 	bl	80002f0 <memchr>
 802bccc:	b140      	cbz	r0, 802bce0 <_vfiprintf_r+0x198>
 802bcce:	2340      	movs	r3, #64	; 0x40
 802bcd0:	eba0 000a 	sub.w	r0, r0, sl
 802bcd4:	fa03 f000 	lsl.w	r0, r3, r0
 802bcd8:	9b04      	ldr	r3, [sp, #16]
 802bcda:	4303      	orrs	r3, r0
 802bcdc:	3401      	adds	r4, #1
 802bcde:	9304      	str	r3, [sp, #16]
 802bce0:	f814 1b01 	ldrb.w	r1, [r4], #1
 802bce4:	482c      	ldr	r0, [pc, #176]	; (802bd98 <_vfiprintf_r+0x250>)
 802bce6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 802bcea:	2206      	movs	r2, #6
 802bcec:	f7d4 fb00 	bl	80002f0 <memchr>
 802bcf0:	2800      	cmp	r0, #0
 802bcf2:	d03f      	beq.n	802bd74 <_vfiprintf_r+0x22c>
 802bcf4:	4b29      	ldr	r3, [pc, #164]	; (802bd9c <_vfiprintf_r+0x254>)
 802bcf6:	bb1b      	cbnz	r3, 802bd40 <_vfiprintf_r+0x1f8>
 802bcf8:	9b03      	ldr	r3, [sp, #12]
 802bcfa:	3307      	adds	r3, #7
 802bcfc:	f023 0307 	bic.w	r3, r3, #7
 802bd00:	3308      	adds	r3, #8
 802bd02:	9303      	str	r3, [sp, #12]
 802bd04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802bd06:	443b      	add	r3, r7
 802bd08:	9309      	str	r3, [sp, #36]	; 0x24
 802bd0a:	e767      	b.n	802bbdc <_vfiprintf_r+0x94>
 802bd0c:	fb0c 3202 	mla	r2, ip, r2, r3
 802bd10:	460c      	mov	r4, r1
 802bd12:	2001      	movs	r0, #1
 802bd14:	e7a5      	b.n	802bc62 <_vfiprintf_r+0x11a>
 802bd16:	2300      	movs	r3, #0
 802bd18:	3401      	adds	r4, #1
 802bd1a:	9305      	str	r3, [sp, #20]
 802bd1c:	4619      	mov	r1, r3
 802bd1e:	f04f 0c0a 	mov.w	ip, #10
 802bd22:	4620      	mov	r0, r4
 802bd24:	f810 2b01 	ldrb.w	r2, [r0], #1
 802bd28:	3a30      	subs	r2, #48	; 0x30
 802bd2a:	2a09      	cmp	r2, #9
 802bd2c:	d903      	bls.n	802bd36 <_vfiprintf_r+0x1ee>
 802bd2e:	2b00      	cmp	r3, #0
 802bd30:	d0c5      	beq.n	802bcbe <_vfiprintf_r+0x176>
 802bd32:	9105      	str	r1, [sp, #20]
 802bd34:	e7c3      	b.n	802bcbe <_vfiprintf_r+0x176>
 802bd36:	fb0c 2101 	mla	r1, ip, r1, r2
 802bd3a:	4604      	mov	r4, r0
 802bd3c:	2301      	movs	r3, #1
 802bd3e:	e7f0      	b.n	802bd22 <_vfiprintf_r+0x1da>
 802bd40:	ab03      	add	r3, sp, #12
 802bd42:	9300      	str	r3, [sp, #0]
 802bd44:	462a      	mov	r2, r5
 802bd46:	4b16      	ldr	r3, [pc, #88]	; (802bda0 <_vfiprintf_r+0x258>)
 802bd48:	a904      	add	r1, sp, #16
 802bd4a:	4630      	mov	r0, r6
 802bd4c:	f3af 8000 	nop.w
 802bd50:	4607      	mov	r7, r0
 802bd52:	1c78      	adds	r0, r7, #1
 802bd54:	d1d6      	bne.n	802bd04 <_vfiprintf_r+0x1bc>
 802bd56:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802bd58:	07d9      	lsls	r1, r3, #31
 802bd5a:	d405      	bmi.n	802bd68 <_vfiprintf_r+0x220>
 802bd5c:	89ab      	ldrh	r3, [r5, #12]
 802bd5e:	059a      	lsls	r2, r3, #22
 802bd60:	d402      	bmi.n	802bd68 <_vfiprintf_r+0x220>
 802bd62:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802bd64:	f000 fce4 	bl	802c730 <__retarget_lock_release_recursive>
 802bd68:	89ab      	ldrh	r3, [r5, #12]
 802bd6a:	065b      	lsls	r3, r3, #25
 802bd6c:	f53f af12 	bmi.w	802bb94 <_vfiprintf_r+0x4c>
 802bd70:	9809      	ldr	r0, [sp, #36]	; 0x24
 802bd72:	e711      	b.n	802bb98 <_vfiprintf_r+0x50>
 802bd74:	ab03      	add	r3, sp, #12
 802bd76:	9300      	str	r3, [sp, #0]
 802bd78:	462a      	mov	r2, r5
 802bd7a:	4b09      	ldr	r3, [pc, #36]	; (802bda0 <_vfiprintf_r+0x258>)
 802bd7c:	a904      	add	r1, sp, #16
 802bd7e:	4630      	mov	r0, r6
 802bd80:	f000 f880 	bl	802be84 <_printf_i>
 802bd84:	e7e4      	b.n	802bd50 <_vfiprintf_r+0x208>
 802bd86:	bf00      	nop
 802bd88:	08031dd0 	.word	0x08031dd0
 802bd8c:	08031df0 	.word	0x08031df0
 802bd90:	08031db0 	.word	0x08031db0
 802bd94:	08031d78 	.word	0x08031d78
 802bd98:	08031d82 	.word	0x08031d82
 802bd9c:	00000000 	.word	0x00000000
 802bda0:	0802bb23 	.word	0x0802bb23
 802bda4:	08031d7e 	.word	0x08031d7e

0802bda8 <_printf_common>:
 802bda8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802bdac:	4616      	mov	r6, r2
 802bdae:	4699      	mov	r9, r3
 802bdb0:	688a      	ldr	r2, [r1, #8]
 802bdb2:	690b      	ldr	r3, [r1, #16]
 802bdb4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 802bdb8:	4293      	cmp	r3, r2
 802bdba:	bfb8      	it	lt
 802bdbc:	4613      	movlt	r3, r2
 802bdbe:	6033      	str	r3, [r6, #0]
 802bdc0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 802bdc4:	4607      	mov	r7, r0
 802bdc6:	460c      	mov	r4, r1
 802bdc8:	b10a      	cbz	r2, 802bdce <_printf_common+0x26>
 802bdca:	3301      	adds	r3, #1
 802bdcc:	6033      	str	r3, [r6, #0]
 802bdce:	6823      	ldr	r3, [r4, #0]
 802bdd0:	0699      	lsls	r1, r3, #26
 802bdd2:	bf42      	ittt	mi
 802bdd4:	6833      	ldrmi	r3, [r6, #0]
 802bdd6:	3302      	addmi	r3, #2
 802bdd8:	6033      	strmi	r3, [r6, #0]
 802bdda:	6825      	ldr	r5, [r4, #0]
 802bddc:	f015 0506 	ands.w	r5, r5, #6
 802bde0:	d106      	bne.n	802bdf0 <_printf_common+0x48>
 802bde2:	f104 0a19 	add.w	sl, r4, #25
 802bde6:	68e3      	ldr	r3, [r4, #12]
 802bde8:	6832      	ldr	r2, [r6, #0]
 802bdea:	1a9b      	subs	r3, r3, r2
 802bdec:	42ab      	cmp	r3, r5
 802bdee:	dc26      	bgt.n	802be3e <_printf_common+0x96>
 802bdf0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 802bdf4:	1e13      	subs	r3, r2, #0
 802bdf6:	6822      	ldr	r2, [r4, #0]
 802bdf8:	bf18      	it	ne
 802bdfa:	2301      	movne	r3, #1
 802bdfc:	0692      	lsls	r2, r2, #26
 802bdfe:	d42b      	bmi.n	802be58 <_printf_common+0xb0>
 802be00:	f104 0243 	add.w	r2, r4, #67	; 0x43
 802be04:	4649      	mov	r1, r9
 802be06:	4638      	mov	r0, r7
 802be08:	47c0      	blx	r8
 802be0a:	3001      	adds	r0, #1
 802be0c:	d01e      	beq.n	802be4c <_printf_common+0xa4>
 802be0e:	6823      	ldr	r3, [r4, #0]
 802be10:	68e5      	ldr	r5, [r4, #12]
 802be12:	6832      	ldr	r2, [r6, #0]
 802be14:	f003 0306 	and.w	r3, r3, #6
 802be18:	2b04      	cmp	r3, #4
 802be1a:	bf08      	it	eq
 802be1c:	1aad      	subeq	r5, r5, r2
 802be1e:	68a3      	ldr	r3, [r4, #8]
 802be20:	6922      	ldr	r2, [r4, #16]
 802be22:	bf0c      	ite	eq
 802be24:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 802be28:	2500      	movne	r5, #0
 802be2a:	4293      	cmp	r3, r2
 802be2c:	bfc4      	itt	gt
 802be2e:	1a9b      	subgt	r3, r3, r2
 802be30:	18ed      	addgt	r5, r5, r3
 802be32:	2600      	movs	r6, #0
 802be34:	341a      	adds	r4, #26
 802be36:	42b5      	cmp	r5, r6
 802be38:	d11a      	bne.n	802be70 <_printf_common+0xc8>
 802be3a:	2000      	movs	r0, #0
 802be3c:	e008      	b.n	802be50 <_printf_common+0xa8>
 802be3e:	2301      	movs	r3, #1
 802be40:	4652      	mov	r2, sl
 802be42:	4649      	mov	r1, r9
 802be44:	4638      	mov	r0, r7
 802be46:	47c0      	blx	r8
 802be48:	3001      	adds	r0, #1
 802be4a:	d103      	bne.n	802be54 <_printf_common+0xac>
 802be4c:	f04f 30ff 	mov.w	r0, #4294967295
 802be50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802be54:	3501      	adds	r5, #1
 802be56:	e7c6      	b.n	802bde6 <_printf_common+0x3e>
 802be58:	18e1      	adds	r1, r4, r3
 802be5a:	1c5a      	adds	r2, r3, #1
 802be5c:	2030      	movs	r0, #48	; 0x30
 802be5e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 802be62:	4422      	add	r2, r4
 802be64:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 802be68:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 802be6c:	3302      	adds	r3, #2
 802be6e:	e7c7      	b.n	802be00 <_printf_common+0x58>
 802be70:	2301      	movs	r3, #1
 802be72:	4622      	mov	r2, r4
 802be74:	4649      	mov	r1, r9
 802be76:	4638      	mov	r0, r7
 802be78:	47c0      	blx	r8
 802be7a:	3001      	adds	r0, #1
 802be7c:	d0e6      	beq.n	802be4c <_printf_common+0xa4>
 802be7e:	3601      	adds	r6, #1
 802be80:	e7d9      	b.n	802be36 <_printf_common+0x8e>
	...

0802be84 <_printf_i>:
 802be84:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 802be88:	460c      	mov	r4, r1
 802be8a:	4691      	mov	r9, r2
 802be8c:	7e27      	ldrb	r7, [r4, #24]
 802be8e:	990c      	ldr	r1, [sp, #48]	; 0x30
 802be90:	2f78      	cmp	r7, #120	; 0x78
 802be92:	4680      	mov	r8, r0
 802be94:	469a      	mov	sl, r3
 802be96:	f104 0243 	add.w	r2, r4, #67	; 0x43
 802be9a:	d807      	bhi.n	802beac <_printf_i+0x28>
 802be9c:	2f62      	cmp	r7, #98	; 0x62
 802be9e:	d80a      	bhi.n	802beb6 <_printf_i+0x32>
 802bea0:	2f00      	cmp	r7, #0
 802bea2:	f000 80d8 	beq.w	802c056 <_printf_i+0x1d2>
 802bea6:	2f58      	cmp	r7, #88	; 0x58
 802bea8:	f000 80a3 	beq.w	802bff2 <_printf_i+0x16e>
 802beac:	f104 0642 	add.w	r6, r4, #66	; 0x42
 802beb0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 802beb4:	e03a      	b.n	802bf2c <_printf_i+0xa8>
 802beb6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 802beba:	2b15      	cmp	r3, #21
 802bebc:	d8f6      	bhi.n	802beac <_printf_i+0x28>
 802bebe:	a001      	add	r0, pc, #4	; (adr r0, 802bec4 <_printf_i+0x40>)
 802bec0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 802bec4:	0802bf1d 	.word	0x0802bf1d
 802bec8:	0802bf31 	.word	0x0802bf31
 802becc:	0802bead 	.word	0x0802bead
 802bed0:	0802bead 	.word	0x0802bead
 802bed4:	0802bead 	.word	0x0802bead
 802bed8:	0802bead 	.word	0x0802bead
 802bedc:	0802bf31 	.word	0x0802bf31
 802bee0:	0802bead 	.word	0x0802bead
 802bee4:	0802bead 	.word	0x0802bead
 802bee8:	0802bead 	.word	0x0802bead
 802beec:	0802bead 	.word	0x0802bead
 802bef0:	0802c03d 	.word	0x0802c03d
 802bef4:	0802bf61 	.word	0x0802bf61
 802bef8:	0802c01f 	.word	0x0802c01f
 802befc:	0802bead 	.word	0x0802bead
 802bf00:	0802bead 	.word	0x0802bead
 802bf04:	0802c05f 	.word	0x0802c05f
 802bf08:	0802bead 	.word	0x0802bead
 802bf0c:	0802bf61 	.word	0x0802bf61
 802bf10:	0802bead 	.word	0x0802bead
 802bf14:	0802bead 	.word	0x0802bead
 802bf18:	0802c027 	.word	0x0802c027
 802bf1c:	680b      	ldr	r3, [r1, #0]
 802bf1e:	1d1a      	adds	r2, r3, #4
 802bf20:	681b      	ldr	r3, [r3, #0]
 802bf22:	600a      	str	r2, [r1, #0]
 802bf24:	f104 0642 	add.w	r6, r4, #66	; 0x42
 802bf28:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 802bf2c:	2301      	movs	r3, #1
 802bf2e:	e0a3      	b.n	802c078 <_printf_i+0x1f4>
 802bf30:	6825      	ldr	r5, [r4, #0]
 802bf32:	6808      	ldr	r0, [r1, #0]
 802bf34:	062e      	lsls	r6, r5, #24
 802bf36:	f100 0304 	add.w	r3, r0, #4
 802bf3a:	d50a      	bpl.n	802bf52 <_printf_i+0xce>
 802bf3c:	6805      	ldr	r5, [r0, #0]
 802bf3e:	600b      	str	r3, [r1, #0]
 802bf40:	2d00      	cmp	r5, #0
 802bf42:	da03      	bge.n	802bf4c <_printf_i+0xc8>
 802bf44:	232d      	movs	r3, #45	; 0x2d
 802bf46:	426d      	negs	r5, r5
 802bf48:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802bf4c:	485e      	ldr	r0, [pc, #376]	; (802c0c8 <_printf_i+0x244>)
 802bf4e:	230a      	movs	r3, #10
 802bf50:	e019      	b.n	802bf86 <_printf_i+0x102>
 802bf52:	f015 0f40 	tst.w	r5, #64	; 0x40
 802bf56:	6805      	ldr	r5, [r0, #0]
 802bf58:	600b      	str	r3, [r1, #0]
 802bf5a:	bf18      	it	ne
 802bf5c:	b22d      	sxthne	r5, r5
 802bf5e:	e7ef      	b.n	802bf40 <_printf_i+0xbc>
 802bf60:	680b      	ldr	r3, [r1, #0]
 802bf62:	6825      	ldr	r5, [r4, #0]
 802bf64:	1d18      	adds	r0, r3, #4
 802bf66:	6008      	str	r0, [r1, #0]
 802bf68:	0628      	lsls	r0, r5, #24
 802bf6a:	d501      	bpl.n	802bf70 <_printf_i+0xec>
 802bf6c:	681d      	ldr	r5, [r3, #0]
 802bf6e:	e002      	b.n	802bf76 <_printf_i+0xf2>
 802bf70:	0669      	lsls	r1, r5, #25
 802bf72:	d5fb      	bpl.n	802bf6c <_printf_i+0xe8>
 802bf74:	881d      	ldrh	r5, [r3, #0]
 802bf76:	4854      	ldr	r0, [pc, #336]	; (802c0c8 <_printf_i+0x244>)
 802bf78:	2f6f      	cmp	r7, #111	; 0x6f
 802bf7a:	bf0c      	ite	eq
 802bf7c:	2308      	moveq	r3, #8
 802bf7e:	230a      	movne	r3, #10
 802bf80:	2100      	movs	r1, #0
 802bf82:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 802bf86:	6866      	ldr	r6, [r4, #4]
 802bf88:	60a6      	str	r6, [r4, #8]
 802bf8a:	2e00      	cmp	r6, #0
 802bf8c:	bfa2      	ittt	ge
 802bf8e:	6821      	ldrge	r1, [r4, #0]
 802bf90:	f021 0104 	bicge.w	r1, r1, #4
 802bf94:	6021      	strge	r1, [r4, #0]
 802bf96:	b90d      	cbnz	r5, 802bf9c <_printf_i+0x118>
 802bf98:	2e00      	cmp	r6, #0
 802bf9a:	d04d      	beq.n	802c038 <_printf_i+0x1b4>
 802bf9c:	4616      	mov	r6, r2
 802bf9e:	fbb5 f1f3 	udiv	r1, r5, r3
 802bfa2:	fb03 5711 	mls	r7, r3, r1, r5
 802bfa6:	5dc7      	ldrb	r7, [r0, r7]
 802bfa8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 802bfac:	462f      	mov	r7, r5
 802bfae:	42bb      	cmp	r3, r7
 802bfb0:	460d      	mov	r5, r1
 802bfb2:	d9f4      	bls.n	802bf9e <_printf_i+0x11a>
 802bfb4:	2b08      	cmp	r3, #8
 802bfb6:	d10b      	bne.n	802bfd0 <_printf_i+0x14c>
 802bfb8:	6823      	ldr	r3, [r4, #0]
 802bfba:	07df      	lsls	r7, r3, #31
 802bfbc:	d508      	bpl.n	802bfd0 <_printf_i+0x14c>
 802bfbe:	6923      	ldr	r3, [r4, #16]
 802bfc0:	6861      	ldr	r1, [r4, #4]
 802bfc2:	4299      	cmp	r1, r3
 802bfc4:	bfde      	ittt	le
 802bfc6:	2330      	movle	r3, #48	; 0x30
 802bfc8:	f806 3c01 	strble.w	r3, [r6, #-1]
 802bfcc:	f106 36ff 	addle.w	r6, r6, #4294967295
 802bfd0:	1b92      	subs	r2, r2, r6
 802bfd2:	6122      	str	r2, [r4, #16]
 802bfd4:	f8cd a000 	str.w	sl, [sp]
 802bfd8:	464b      	mov	r3, r9
 802bfda:	aa03      	add	r2, sp, #12
 802bfdc:	4621      	mov	r1, r4
 802bfde:	4640      	mov	r0, r8
 802bfe0:	f7ff fee2 	bl	802bda8 <_printf_common>
 802bfe4:	3001      	adds	r0, #1
 802bfe6:	d14c      	bne.n	802c082 <_printf_i+0x1fe>
 802bfe8:	f04f 30ff 	mov.w	r0, #4294967295
 802bfec:	b004      	add	sp, #16
 802bfee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802bff2:	4835      	ldr	r0, [pc, #212]	; (802c0c8 <_printf_i+0x244>)
 802bff4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 802bff8:	6823      	ldr	r3, [r4, #0]
 802bffa:	680e      	ldr	r6, [r1, #0]
 802bffc:	061f      	lsls	r7, r3, #24
 802bffe:	f856 5b04 	ldr.w	r5, [r6], #4
 802c002:	600e      	str	r6, [r1, #0]
 802c004:	d514      	bpl.n	802c030 <_printf_i+0x1ac>
 802c006:	07d9      	lsls	r1, r3, #31
 802c008:	bf44      	itt	mi
 802c00a:	f043 0320 	orrmi.w	r3, r3, #32
 802c00e:	6023      	strmi	r3, [r4, #0]
 802c010:	b91d      	cbnz	r5, 802c01a <_printf_i+0x196>
 802c012:	6823      	ldr	r3, [r4, #0]
 802c014:	f023 0320 	bic.w	r3, r3, #32
 802c018:	6023      	str	r3, [r4, #0]
 802c01a:	2310      	movs	r3, #16
 802c01c:	e7b0      	b.n	802bf80 <_printf_i+0xfc>
 802c01e:	6823      	ldr	r3, [r4, #0]
 802c020:	f043 0320 	orr.w	r3, r3, #32
 802c024:	6023      	str	r3, [r4, #0]
 802c026:	2378      	movs	r3, #120	; 0x78
 802c028:	4828      	ldr	r0, [pc, #160]	; (802c0cc <_printf_i+0x248>)
 802c02a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 802c02e:	e7e3      	b.n	802bff8 <_printf_i+0x174>
 802c030:	065e      	lsls	r6, r3, #25
 802c032:	bf48      	it	mi
 802c034:	b2ad      	uxthmi	r5, r5
 802c036:	e7e6      	b.n	802c006 <_printf_i+0x182>
 802c038:	4616      	mov	r6, r2
 802c03a:	e7bb      	b.n	802bfb4 <_printf_i+0x130>
 802c03c:	680b      	ldr	r3, [r1, #0]
 802c03e:	6826      	ldr	r6, [r4, #0]
 802c040:	6960      	ldr	r0, [r4, #20]
 802c042:	1d1d      	adds	r5, r3, #4
 802c044:	600d      	str	r5, [r1, #0]
 802c046:	0635      	lsls	r5, r6, #24
 802c048:	681b      	ldr	r3, [r3, #0]
 802c04a:	d501      	bpl.n	802c050 <_printf_i+0x1cc>
 802c04c:	6018      	str	r0, [r3, #0]
 802c04e:	e002      	b.n	802c056 <_printf_i+0x1d2>
 802c050:	0671      	lsls	r1, r6, #25
 802c052:	d5fb      	bpl.n	802c04c <_printf_i+0x1c8>
 802c054:	8018      	strh	r0, [r3, #0]
 802c056:	2300      	movs	r3, #0
 802c058:	6123      	str	r3, [r4, #16]
 802c05a:	4616      	mov	r6, r2
 802c05c:	e7ba      	b.n	802bfd4 <_printf_i+0x150>
 802c05e:	680b      	ldr	r3, [r1, #0]
 802c060:	1d1a      	adds	r2, r3, #4
 802c062:	600a      	str	r2, [r1, #0]
 802c064:	681e      	ldr	r6, [r3, #0]
 802c066:	6862      	ldr	r2, [r4, #4]
 802c068:	2100      	movs	r1, #0
 802c06a:	4630      	mov	r0, r6
 802c06c:	f7d4 f940 	bl	80002f0 <memchr>
 802c070:	b108      	cbz	r0, 802c076 <_printf_i+0x1f2>
 802c072:	1b80      	subs	r0, r0, r6
 802c074:	6060      	str	r0, [r4, #4]
 802c076:	6863      	ldr	r3, [r4, #4]
 802c078:	6123      	str	r3, [r4, #16]
 802c07a:	2300      	movs	r3, #0
 802c07c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802c080:	e7a8      	b.n	802bfd4 <_printf_i+0x150>
 802c082:	6923      	ldr	r3, [r4, #16]
 802c084:	4632      	mov	r2, r6
 802c086:	4649      	mov	r1, r9
 802c088:	4640      	mov	r0, r8
 802c08a:	47d0      	blx	sl
 802c08c:	3001      	adds	r0, #1
 802c08e:	d0ab      	beq.n	802bfe8 <_printf_i+0x164>
 802c090:	6823      	ldr	r3, [r4, #0]
 802c092:	079b      	lsls	r3, r3, #30
 802c094:	d413      	bmi.n	802c0be <_printf_i+0x23a>
 802c096:	68e0      	ldr	r0, [r4, #12]
 802c098:	9b03      	ldr	r3, [sp, #12]
 802c09a:	4298      	cmp	r0, r3
 802c09c:	bfb8      	it	lt
 802c09e:	4618      	movlt	r0, r3
 802c0a0:	e7a4      	b.n	802bfec <_printf_i+0x168>
 802c0a2:	2301      	movs	r3, #1
 802c0a4:	4632      	mov	r2, r6
 802c0a6:	4649      	mov	r1, r9
 802c0a8:	4640      	mov	r0, r8
 802c0aa:	47d0      	blx	sl
 802c0ac:	3001      	adds	r0, #1
 802c0ae:	d09b      	beq.n	802bfe8 <_printf_i+0x164>
 802c0b0:	3501      	adds	r5, #1
 802c0b2:	68e3      	ldr	r3, [r4, #12]
 802c0b4:	9903      	ldr	r1, [sp, #12]
 802c0b6:	1a5b      	subs	r3, r3, r1
 802c0b8:	42ab      	cmp	r3, r5
 802c0ba:	dcf2      	bgt.n	802c0a2 <_printf_i+0x21e>
 802c0bc:	e7eb      	b.n	802c096 <_printf_i+0x212>
 802c0be:	2500      	movs	r5, #0
 802c0c0:	f104 0619 	add.w	r6, r4, #25
 802c0c4:	e7f5      	b.n	802c0b2 <_printf_i+0x22e>
 802c0c6:	bf00      	nop
 802c0c8:	08031d89 	.word	0x08031d89
 802c0cc:	08031d9a 	.word	0x08031d9a

0802c0d0 <_sbrk_r>:
 802c0d0:	b538      	push	{r3, r4, r5, lr}
 802c0d2:	4d06      	ldr	r5, [pc, #24]	; (802c0ec <_sbrk_r+0x1c>)
 802c0d4:	2300      	movs	r3, #0
 802c0d6:	4604      	mov	r4, r0
 802c0d8:	4608      	mov	r0, r1
 802c0da:	602b      	str	r3, [r5, #0]
 802c0dc:	f7d7 fef6 	bl	8003ecc <_sbrk>
 802c0e0:	1c43      	adds	r3, r0, #1
 802c0e2:	d102      	bne.n	802c0ea <_sbrk_r+0x1a>
 802c0e4:	682b      	ldr	r3, [r5, #0]
 802c0e6:	b103      	cbz	r3, 802c0ea <_sbrk_r+0x1a>
 802c0e8:	6023      	str	r3, [r4, #0]
 802c0ea:	bd38      	pop	{r3, r4, r5, pc}
 802c0ec:	2400cf44 	.word	0x2400cf44

0802c0f0 <_raise_r>:
 802c0f0:	291f      	cmp	r1, #31
 802c0f2:	b538      	push	{r3, r4, r5, lr}
 802c0f4:	4604      	mov	r4, r0
 802c0f6:	460d      	mov	r5, r1
 802c0f8:	d904      	bls.n	802c104 <_raise_r+0x14>
 802c0fa:	2316      	movs	r3, #22
 802c0fc:	6003      	str	r3, [r0, #0]
 802c0fe:	f04f 30ff 	mov.w	r0, #4294967295
 802c102:	bd38      	pop	{r3, r4, r5, pc}
 802c104:	6c42      	ldr	r2, [r0, #68]	; 0x44
 802c106:	b112      	cbz	r2, 802c10e <_raise_r+0x1e>
 802c108:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 802c10c:	b94b      	cbnz	r3, 802c122 <_raise_r+0x32>
 802c10e:	4620      	mov	r0, r4
 802c110:	f000 f830 	bl	802c174 <_getpid_r>
 802c114:	462a      	mov	r2, r5
 802c116:	4601      	mov	r1, r0
 802c118:	4620      	mov	r0, r4
 802c11a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802c11e:	f000 b817 	b.w	802c150 <_kill_r>
 802c122:	2b01      	cmp	r3, #1
 802c124:	d00a      	beq.n	802c13c <_raise_r+0x4c>
 802c126:	1c59      	adds	r1, r3, #1
 802c128:	d103      	bne.n	802c132 <_raise_r+0x42>
 802c12a:	2316      	movs	r3, #22
 802c12c:	6003      	str	r3, [r0, #0]
 802c12e:	2001      	movs	r0, #1
 802c130:	e7e7      	b.n	802c102 <_raise_r+0x12>
 802c132:	2400      	movs	r4, #0
 802c134:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 802c138:	4628      	mov	r0, r5
 802c13a:	4798      	blx	r3
 802c13c:	2000      	movs	r0, #0
 802c13e:	e7e0      	b.n	802c102 <_raise_r+0x12>

0802c140 <raise>:
 802c140:	4b02      	ldr	r3, [pc, #8]	; (802c14c <raise+0xc>)
 802c142:	4601      	mov	r1, r0
 802c144:	6818      	ldr	r0, [r3, #0]
 802c146:	f7ff bfd3 	b.w	802c0f0 <_raise_r>
 802c14a:	bf00      	nop
 802c14c:	240000a8 	.word	0x240000a8

0802c150 <_kill_r>:
 802c150:	b538      	push	{r3, r4, r5, lr}
 802c152:	4d07      	ldr	r5, [pc, #28]	; (802c170 <_kill_r+0x20>)
 802c154:	2300      	movs	r3, #0
 802c156:	4604      	mov	r4, r0
 802c158:	4608      	mov	r0, r1
 802c15a:	4611      	mov	r1, r2
 802c15c:	602b      	str	r3, [r5, #0]
 802c15e:	f7d7 fe2d 	bl	8003dbc <_kill>
 802c162:	1c43      	adds	r3, r0, #1
 802c164:	d102      	bne.n	802c16c <_kill_r+0x1c>
 802c166:	682b      	ldr	r3, [r5, #0]
 802c168:	b103      	cbz	r3, 802c16c <_kill_r+0x1c>
 802c16a:	6023      	str	r3, [r4, #0]
 802c16c:	bd38      	pop	{r3, r4, r5, pc}
 802c16e:	bf00      	nop
 802c170:	2400cf44 	.word	0x2400cf44

0802c174 <_getpid_r>:
 802c174:	f7d7 be1a 	b.w	8003dac <_getpid>

0802c178 <__swbuf_r>:
 802c178:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802c17a:	460e      	mov	r6, r1
 802c17c:	4614      	mov	r4, r2
 802c17e:	4605      	mov	r5, r0
 802c180:	b118      	cbz	r0, 802c18a <__swbuf_r+0x12>
 802c182:	6983      	ldr	r3, [r0, #24]
 802c184:	b90b      	cbnz	r3, 802c18a <__swbuf_r+0x12>
 802c186:	f000 fa33 	bl	802c5f0 <__sinit>
 802c18a:	4b21      	ldr	r3, [pc, #132]	; (802c210 <__swbuf_r+0x98>)
 802c18c:	429c      	cmp	r4, r3
 802c18e:	d12b      	bne.n	802c1e8 <__swbuf_r+0x70>
 802c190:	686c      	ldr	r4, [r5, #4]
 802c192:	69a3      	ldr	r3, [r4, #24]
 802c194:	60a3      	str	r3, [r4, #8]
 802c196:	89a3      	ldrh	r3, [r4, #12]
 802c198:	071a      	lsls	r2, r3, #28
 802c19a:	d52f      	bpl.n	802c1fc <__swbuf_r+0x84>
 802c19c:	6923      	ldr	r3, [r4, #16]
 802c19e:	b36b      	cbz	r3, 802c1fc <__swbuf_r+0x84>
 802c1a0:	6923      	ldr	r3, [r4, #16]
 802c1a2:	6820      	ldr	r0, [r4, #0]
 802c1a4:	1ac0      	subs	r0, r0, r3
 802c1a6:	6963      	ldr	r3, [r4, #20]
 802c1a8:	b2f6      	uxtb	r6, r6
 802c1aa:	4283      	cmp	r3, r0
 802c1ac:	4637      	mov	r7, r6
 802c1ae:	dc04      	bgt.n	802c1ba <__swbuf_r+0x42>
 802c1b0:	4621      	mov	r1, r4
 802c1b2:	4628      	mov	r0, r5
 802c1b4:	f000 f988 	bl	802c4c8 <_fflush_r>
 802c1b8:	bb30      	cbnz	r0, 802c208 <__swbuf_r+0x90>
 802c1ba:	68a3      	ldr	r3, [r4, #8]
 802c1bc:	3b01      	subs	r3, #1
 802c1be:	60a3      	str	r3, [r4, #8]
 802c1c0:	6823      	ldr	r3, [r4, #0]
 802c1c2:	1c5a      	adds	r2, r3, #1
 802c1c4:	6022      	str	r2, [r4, #0]
 802c1c6:	701e      	strb	r6, [r3, #0]
 802c1c8:	6963      	ldr	r3, [r4, #20]
 802c1ca:	3001      	adds	r0, #1
 802c1cc:	4283      	cmp	r3, r0
 802c1ce:	d004      	beq.n	802c1da <__swbuf_r+0x62>
 802c1d0:	89a3      	ldrh	r3, [r4, #12]
 802c1d2:	07db      	lsls	r3, r3, #31
 802c1d4:	d506      	bpl.n	802c1e4 <__swbuf_r+0x6c>
 802c1d6:	2e0a      	cmp	r6, #10
 802c1d8:	d104      	bne.n	802c1e4 <__swbuf_r+0x6c>
 802c1da:	4621      	mov	r1, r4
 802c1dc:	4628      	mov	r0, r5
 802c1de:	f000 f973 	bl	802c4c8 <_fflush_r>
 802c1e2:	b988      	cbnz	r0, 802c208 <__swbuf_r+0x90>
 802c1e4:	4638      	mov	r0, r7
 802c1e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802c1e8:	4b0a      	ldr	r3, [pc, #40]	; (802c214 <__swbuf_r+0x9c>)
 802c1ea:	429c      	cmp	r4, r3
 802c1ec:	d101      	bne.n	802c1f2 <__swbuf_r+0x7a>
 802c1ee:	68ac      	ldr	r4, [r5, #8]
 802c1f0:	e7cf      	b.n	802c192 <__swbuf_r+0x1a>
 802c1f2:	4b09      	ldr	r3, [pc, #36]	; (802c218 <__swbuf_r+0xa0>)
 802c1f4:	429c      	cmp	r4, r3
 802c1f6:	bf08      	it	eq
 802c1f8:	68ec      	ldreq	r4, [r5, #12]
 802c1fa:	e7ca      	b.n	802c192 <__swbuf_r+0x1a>
 802c1fc:	4621      	mov	r1, r4
 802c1fe:	4628      	mov	r0, r5
 802c200:	f000 f80c 	bl	802c21c <__swsetup_r>
 802c204:	2800      	cmp	r0, #0
 802c206:	d0cb      	beq.n	802c1a0 <__swbuf_r+0x28>
 802c208:	f04f 37ff 	mov.w	r7, #4294967295
 802c20c:	e7ea      	b.n	802c1e4 <__swbuf_r+0x6c>
 802c20e:	bf00      	nop
 802c210:	08031dd0 	.word	0x08031dd0
 802c214:	08031df0 	.word	0x08031df0
 802c218:	08031db0 	.word	0x08031db0

0802c21c <__swsetup_r>:
 802c21c:	4b32      	ldr	r3, [pc, #200]	; (802c2e8 <__swsetup_r+0xcc>)
 802c21e:	b570      	push	{r4, r5, r6, lr}
 802c220:	681d      	ldr	r5, [r3, #0]
 802c222:	4606      	mov	r6, r0
 802c224:	460c      	mov	r4, r1
 802c226:	b125      	cbz	r5, 802c232 <__swsetup_r+0x16>
 802c228:	69ab      	ldr	r3, [r5, #24]
 802c22a:	b913      	cbnz	r3, 802c232 <__swsetup_r+0x16>
 802c22c:	4628      	mov	r0, r5
 802c22e:	f000 f9df 	bl	802c5f0 <__sinit>
 802c232:	4b2e      	ldr	r3, [pc, #184]	; (802c2ec <__swsetup_r+0xd0>)
 802c234:	429c      	cmp	r4, r3
 802c236:	d10f      	bne.n	802c258 <__swsetup_r+0x3c>
 802c238:	686c      	ldr	r4, [r5, #4]
 802c23a:	89a3      	ldrh	r3, [r4, #12]
 802c23c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802c240:	0719      	lsls	r1, r3, #28
 802c242:	d42c      	bmi.n	802c29e <__swsetup_r+0x82>
 802c244:	06dd      	lsls	r5, r3, #27
 802c246:	d411      	bmi.n	802c26c <__swsetup_r+0x50>
 802c248:	2309      	movs	r3, #9
 802c24a:	6033      	str	r3, [r6, #0]
 802c24c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 802c250:	81a3      	strh	r3, [r4, #12]
 802c252:	f04f 30ff 	mov.w	r0, #4294967295
 802c256:	e03e      	b.n	802c2d6 <__swsetup_r+0xba>
 802c258:	4b25      	ldr	r3, [pc, #148]	; (802c2f0 <__swsetup_r+0xd4>)
 802c25a:	429c      	cmp	r4, r3
 802c25c:	d101      	bne.n	802c262 <__swsetup_r+0x46>
 802c25e:	68ac      	ldr	r4, [r5, #8]
 802c260:	e7eb      	b.n	802c23a <__swsetup_r+0x1e>
 802c262:	4b24      	ldr	r3, [pc, #144]	; (802c2f4 <__swsetup_r+0xd8>)
 802c264:	429c      	cmp	r4, r3
 802c266:	bf08      	it	eq
 802c268:	68ec      	ldreq	r4, [r5, #12]
 802c26a:	e7e6      	b.n	802c23a <__swsetup_r+0x1e>
 802c26c:	0758      	lsls	r0, r3, #29
 802c26e:	d512      	bpl.n	802c296 <__swsetup_r+0x7a>
 802c270:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802c272:	b141      	cbz	r1, 802c286 <__swsetup_r+0x6a>
 802c274:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802c278:	4299      	cmp	r1, r3
 802c27a:	d002      	beq.n	802c282 <__swsetup_r+0x66>
 802c27c:	4630      	mov	r0, r6
 802c27e:	f7ff fb8f 	bl	802b9a0 <_free_r>
 802c282:	2300      	movs	r3, #0
 802c284:	6363      	str	r3, [r4, #52]	; 0x34
 802c286:	89a3      	ldrh	r3, [r4, #12]
 802c288:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 802c28c:	81a3      	strh	r3, [r4, #12]
 802c28e:	2300      	movs	r3, #0
 802c290:	6063      	str	r3, [r4, #4]
 802c292:	6923      	ldr	r3, [r4, #16]
 802c294:	6023      	str	r3, [r4, #0]
 802c296:	89a3      	ldrh	r3, [r4, #12]
 802c298:	f043 0308 	orr.w	r3, r3, #8
 802c29c:	81a3      	strh	r3, [r4, #12]
 802c29e:	6923      	ldr	r3, [r4, #16]
 802c2a0:	b94b      	cbnz	r3, 802c2b6 <__swsetup_r+0x9a>
 802c2a2:	89a3      	ldrh	r3, [r4, #12]
 802c2a4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 802c2a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 802c2ac:	d003      	beq.n	802c2b6 <__swsetup_r+0x9a>
 802c2ae:	4621      	mov	r1, r4
 802c2b0:	4630      	mov	r0, r6
 802c2b2:	f000 fa63 	bl	802c77c <__smakebuf_r>
 802c2b6:	89a0      	ldrh	r0, [r4, #12]
 802c2b8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802c2bc:	f010 0301 	ands.w	r3, r0, #1
 802c2c0:	d00a      	beq.n	802c2d8 <__swsetup_r+0xbc>
 802c2c2:	2300      	movs	r3, #0
 802c2c4:	60a3      	str	r3, [r4, #8]
 802c2c6:	6963      	ldr	r3, [r4, #20]
 802c2c8:	425b      	negs	r3, r3
 802c2ca:	61a3      	str	r3, [r4, #24]
 802c2cc:	6923      	ldr	r3, [r4, #16]
 802c2ce:	b943      	cbnz	r3, 802c2e2 <__swsetup_r+0xc6>
 802c2d0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 802c2d4:	d1ba      	bne.n	802c24c <__swsetup_r+0x30>
 802c2d6:	bd70      	pop	{r4, r5, r6, pc}
 802c2d8:	0781      	lsls	r1, r0, #30
 802c2da:	bf58      	it	pl
 802c2dc:	6963      	ldrpl	r3, [r4, #20]
 802c2de:	60a3      	str	r3, [r4, #8]
 802c2e0:	e7f4      	b.n	802c2cc <__swsetup_r+0xb0>
 802c2e2:	2000      	movs	r0, #0
 802c2e4:	e7f7      	b.n	802c2d6 <__swsetup_r+0xba>
 802c2e6:	bf00      	nop
 802c2e8:	240000a8 	.word	0x240000a8
 802c2ec:	08031dd0 	.word	0x08031dd0
 802c2f0:	08031df0 	.word	0x08031df0
 802c2f4:	08031db0 	.word	0x08031db0

0802c2f8 <__register_exitproc>:
 802c2f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802c2fc:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 802c3b8 <__register_exitproc+0xc0>
 802c300:	4606      	mov	r6, r0
 802c302:	f8d8 0000 	ldr.w	r0, [r8]
 802c306:	461f      	mov	r7, r3
 802c308:	460d      	mov	r5, r1
 802c30a:	4691      	mov	r9, r2
 802c30c:	f000 fa0e 	bl	802c72c <__retarget_lock_acquire_recursive>
 802c310:	4b25      	ldr	r3, [pc, #148]	; (802c3a8 <__register_exitproc+0xb0>)
 802c312:	681c      	ldr	r4, [r3, #0]
 802c314:	b934      	cbnz	r4, 802c324 <__register_exitproc+0x2c>
 802c316:	4c25      	ldr	r4, [pc, #148]	; (802c3ac <__register_exitproc+0xb4>)
 802c318:	601c      	str	r4, [r3, #0]
 802c31a:	4b25      	ldr	r3, [pc, #148]	; (802c3b0 <__register_exitproc+0xb8>)
 802c31c:	b113      	cbz	r3, 802c324 <__register_exitproc+0x2c>
 802c31e:	681b      	ldr	r3, [r3, #0]
 802c320:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 802c324:	6863      	ldr	r3, [r4, #4]
 802c326:	2b1f      	cmp	r3, #31
 802c328:	dd07      	ble.n	802c33a <__register_exitproc+0x42>
 802c32a:	f8d8 0000 	ldr.w	r0, [r8]
 802c32e:	f000 f9ff 	bl	802c730 <__retarget_lock_release_recursive>
 802c332:	f04f 30ff 	mov.w	r0, #4294967295
 802c336:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802c33a:	b34e      	cbz	r6, 802c390 <__register_exitproc+0x98>
 802c33c:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 802c340:	b988      	cbnz	r0, 802c366 <__register_exitproc+0x6e>
 802c342:	4b1c      	ldr	r3, [pc, #112]	; (802c3b4 <__register_exitproc+0xbc>)
 802c344:	b923      	cbnz	r3, 802c350 <__register_exitproc+0x58>
 802c346:	f8d8 0000 	ldr.w	r0, [r8]
 802c34a:	f000 f9f0 	bl	802c72e <__retarget_lock_release>
 802c34e:	e7f0      	b.n	802c332 <__register_exitproc+0x3a>
 802c350:	f44f 7084 	mov.w	r0, #264	; 0x108
 802c354:	f7ff fafe 	bl	802b954 <malloc>
 802c358:	2800      	cmp	r0, #0
 802c35a:	d0f4      	beq.n	802c346 <__register_exitproc+0x4e>
 802c35c:	2300      	movs	r3, #0
 802c35e:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 802c362:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 802c366:	6863      	ldr	r3, [r4, #4]
 802c368:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 802c36c:	2201      	movs	r2, #1
 802c36e:	409a      	lsls	r2, r3
 802c370:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 802c374:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 802c378:	4313      	orrs	r3, r2
 802c37a:	2e02      	cmp	r6, #2
 802c37c:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 802c380:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 802c384:	bf02      	ittt	eq
 802c386:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 802c38a:	431a      	orreq	r2, r3
 802c38c:	f8c0 2104 	streq.w	r2, [r0, #260]	; 0x104
 802c390:	6863      	ldr	r3, [r4, #4]
 802c392:	f8d8 0000 	ldr.w	r0, [r8]
 802c396:	1c5a      	adds	r2, r3, #1
 802c398:	3302      	adds	r3, #2
 802c39a:	6062      	str	r2, [r4, #4]
 802c39c:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 802c3a0:	f000 f9c6 	bl	802c730 <__retarget_lock_release_recursive>
 802c3a4:	2000      	movs	r0, #0
 802c3a6:	e7c6      	b.n	802c336 <__register_exitproc+0x3e>
 802c3a8:	2400cb54 	.word	0x2400cb54
 802c3ac:	2400cac8 	.word	0x2400cac8
 802c3b0:	08031dac 	.word	0x08031dac
 802c3b4:	0802b955 	.word	0x0802b955
 802c3b8:	2400010c 	.word	0x2400010c

0802c3bc <__sflush_r>:
 802c3bc:	898a      	ldrh	r2, [r1, #12]
 802c3be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802c3c2:	4605      	mov	r5, r0
 802c3c4:	0710      	lsls	r0, r2, #28
 802c3c6:	460c      	mov	r4, r1
 802c3c8:	d458      	bmi.n	802c47c <__sflush_r+0xc0>
 802c3ca:	684b      	ldr	r3, [r1, #4]
 802c3cc:	2b00      	cmp	r3, #0
 802c3ce:	dc05      	bgt.n	802c3dc <__sflush_r+0x20>
 802c3d0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 802c3d2:	2b00      	cmp	r3, #0
 802c3d4:	dc02      	bgt.n	802c3dc <__sflush_r+0x20>
 802c3d6:	2000      	movs	r0, #0
 802c3d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802c3dc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 802c3de:	2e00      	cmp	r6, #0
 802c3e0:	d0f9      	beq.n	802c3d6 <__sflush_r+0x1a>
 802c3e2:	2300      	movs	r3, #0
 802c3e4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 802c3e8:	682f      	ldr	r7, [r5, #0]
 802c3ea:	602b      	str	r3, [r5, #0]
 802c3ec:	d032      	beq.n	802c454 <__sflush_r+0x98>
 802c3ee:	6d60      	ldr	r0, [r4, #84]	; 0x54
 802c3f0:	89a3      	ldrh	r3, [r4, #12]
 802c3f2:	075a      	lsls	r2, r3, #29
 802c3f4:	d505      	bpl.n	802c402 <__sflush_r+0x46>
 802c3f6:	6863      	ldr	r3, [r4, #4]
 802c3f8:	1ac0      	subs	r0, r0, r3
 802c3fa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 802c3fc:	b10b      	cbz	r3, 802c402 <__sflush_r+0x46>
 802c3fe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 802c400:	1ac0      	subs	r0, r0, r3
 802c402:	2300      	movs	r3, #0
 802c404:	4602      	mov	r2, r0
 802c406:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 802c408:	6a21      	ldr	r1, [r4, #32]
 802c40a:	4628      	mov	r0, r5
 802c40c:	47b0      	blx	r6
 802c40e:	1c43      	adds	r3, r0, #1
 802c410:	89a3      	ldrh	r3, [r4, #12]
 802c412:	d106      	bne.n	802c422 <__sflush_r+0x66>
 802c414:	6829      	ldr	r1, [r5, #0]
 802c416:	291d      	cmp	r1, #29
 802c418:	d82c      	bhi.n	802c474 <__sflush_r+0xb8>
 802c41a:	4a2a      	ldr	r2, [pc, #168]	; (802c4c4 <__sflush_r+0x108>)
 802c41c:	40ca      	lsrs	r2, r1
 802c41e:	07d6      	lsls	r6, r2, #31
 802c420:	d528      	bpl.n	802c474 <__sflush_r+0xb8>
 802c422:	2200      	movs	r2, #0
 802c424:	6062      	str	r2, [r4, #4]
 802c426:	04d9      	lsls	r1, r3, #19
 802c428:	6922      	ldr	r2, [r4, #16]
 802c42a:	6022      	str	r2, [r4, #0]
 802c42c:	d504      	bpl.n	802c438 <__sflush_r+0x7c>
 802c42e:	1c42      	adds	r2, r0, #1
 802c430:	d101      	bne.n	802c436 <__sflush_r+0x7a>
 802c432:	682b      	ldr	r3, [r5, #0]
 802c434:	b903      	cbnz	r3, 802c438 <__sflush_r+0x7c>
 802c436:	6560      	str	r0, [r4, #84]	; 0x54
 802c438:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802c43a:	602f      	str	r7, [r5, #0]
 802c43c:	2900      	cmp	r1, #0
 802c43e:	d0ca      	beq.n	802c3d6 <__sflush_r+0x1a>
 802c440:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802c444:	4299      	cmp	r1, r3
 802c446:	d002      	beq.n	802c44e <__sflush_r+0x92>
 802c448:	4628      	mov	r0, r5
 802c44a:	f7ff faa9 	bl	802b9a0 <_free_r>
 802c44e:	2000      	movs	r0, #0
 802c450:	6360      	str	r0, [r4, #52]	; 0x34
 802c452:	e7c1      	b.n	802c3d8 <__sflush_r+0x1c>
 802c454:	6a21      	ldr	r1, [r4, #32]
 802c456:	2301      	movs	r3, #1
 802c458:	4628      	mov	r0, r5
 802c45a:	47b0      	blx	r6
 802c45c:	1c41      	adds	r1, r0, #1
 802c45e:	d1c7      	bne.n	802c3f0 <__sflush_r+0x34>
 802c460:	682b      	ldr	r3, [r5, #0]
 802c462:	2b00      	cmp	r3, #0
 802c464:	d0c4      	beq.n	802c3f0 <__sflush_r+0x34>
 802c466:	2b1d      	cmp	r3, #29
 802c468:	d001      	beq.n	802c46e <__sflush_r+0xb2>
 802c46a:	2b16      	cmp	r3, #22
 802c46c:	d101      	bne.n	802c472 <__sflush_r+0xb6>
 802c46e:	602f      	str	r7, [r5, #0]
 802c470:	e7b1      	b.n	802c3d6 <__sflush_r+0x1a>
 802c472:	89a3      	ldrh	r3, [r4, #12]
 802c474:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802c478:	81a3      	strh	r3, [r4, #12]
 802c47a:	e7ad      	b.n	802c3d8 <__sflush_r+0x1c>
 802c47c:	690f      	ldr	r7, [r1, #16]
 802c47e:	2f00      	cmp	r7, #0
 802c480:	d0a9      	beq.n	802c3d6 <__sflush_r+0x1a>
 802c482:	0793      	lsls	r3, r2, #30
 802c484:	680e      	ldr	r6, [r1, #0]
 802c486:	bf08      	it	eq
 802c488:	694b      	ldreq	r3, [r1, #20]
 802c48a:	600f      	str	r7, [r1, #0]
 802c48c:	bf18      	it	ne
 802c48e:	2300      	movne	r3, #0
 802c490:	eba6 0807 	sub.w	r8, r6, r7
 802c494:	608b      	str	r3, [r1, #8]
 802c496:	f1b8 0f00 	cmp.w	r8, #0
 802c49a:	dd9c      	ble.n	802c3d6 <__sflush_r+0x1a>
 802c49c:	6a21      	ldr	r1, [r4, #32]
 802c49e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 802c4a0:	4643      	mov	r3, r8
 802c4a2:	463a      	mov	r2, r7
 802c4a4:	4628      	mov	r0, r5
 802c4a6:	47b0      	blx	r6
 802c4a8:	2800      	cmp	r0, #0
 802c4aa:	dc06      	bgt.n	802c4ba <__sflush_r+0xfe>
 802c4ac:	89a3      	ldrh	r3, [r4, #12]
 802c4ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802c4b2:	81a3      	strh	r3, [r4, #12]
 802c4b4:	f04f 30ff 	mov.w	r0, #4294967295
 802c4b8:	e78e      	b.n	802c3d8 <__sflush_r+0x1c>
 802c4ba:	4407      	add	r7, r0
 802c4bc:	eba8 0800 	sub.w	r8, r8, r0
 802c4c0:	e7e9      	b.n	802c496 <__sflush_r+0xda>
 802c4c2:	bf00      	nop
 802c4c4:	20400001 	.word	0x20400001

0802c4c8 <_fflush_r>:
 802c4c8:	b538      	push	{r3, r4, r5, lr}
 802c4ca:	690b      	ldr	r3, [r1, #16]
 802c4cc:	4605      	mov	r5, r0
 802c4ce:	460c      	mov	r4, r1
 802c4d0:	b913      	cbnz	r3, 802c4d8 <_fflush_r+0x10>
 802c4d2:	2500      	movs	r5, #0
 802c4d4:	4628      	mov	r0, r5
 802c4d6:	bd38      	pop	{r3, r4, r5, pc}
 802c4d8:	b118      	cbz	r0, 802c4e2 <_fflush_r+0x1a>
 802c4da:	6983      	ldr	r3, [r0, #24]
 802c4dc:	b90b      	cbnz	r3, 802c4e2 <_fflush_r+0x1a>
 802c4de:	f000 f887 	bl	802c5f0 <__sinit>
 802c4e2:	4b14      	ldr	r3, [pc, #80]	; (802c534 <_fflush_r+0x6c>)
 802c4e4:	429c      	cmp	r4, r3
 802c4e6:	d11b      	bne.n	802c520 <_fflush_r+0x58>
 802c4e8:	686c      	ldr	r4, [r5, #4]
 802c4ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802c4ee:	2b00      	cmp	r3, #0
 802c4f0:	d0ef      	beq.n	802c4d2 <_fflush_r+0xa>
 802c4f2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 802c4f4:	07d0      	lsls	r0, r2, #31
 802c4f6:	d404      	bmi.n	802c502 <_fflush_r+0x3a>
 802c4f8:	0599      	lsls	r1, r3, #22
 802c4fa:	d402      	bmi.n	802c502 <_fflush_r+0x3a>
 802c4fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802c4fe:	f000 f915 	bl	802c72c <__retarget_lock_acquire_recursive>
 802c502:	4628      	mov	r0, r5
 802c504:	4621      	mov	r1, r4
 802c506:	f7ff ff59 	bl	802c3bc <__sflush_r>
 802c50a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802c50c:	07da      	lsls	r2, r3, #31
 802c50e:	4605      	mov	r5, r0
 802c510:	d4e0      	bmi.n	802c4d4 <_fflush_r+0xc>
 802c512:	89a3      	ldrh	r3, [r4, #12]
 802c514:	059b      	lsls	r3, r3, #22
 802c516:	d4dd      	bmi.n	802c4d4 <_fflush_r+0xc>
 802c518:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802c51a:	f000 f909 	bl	802c730 <__retarget_lock_release_recursive>
 802c51e:	e7d9      	b.n	802c4d4 <_fflush_r+0xc>
 802c520:	4b05      	ldr	r3, [pc, #20]	; (802c538 <_fflush_r+0x70>)
 802c522:	429c      	cmp	r4, r3
 802c524:	d101      	bne.n	802c52a <_fflush_r+0x62>
 802c526:	68ac      	ldr	r4, [r5, #8]
 802c528:	e7df      	b.n	802c4ea <_fflush_r+0x22>
 802c52a:	4b04      	ldr	r3, [pc, #16]	; (802c53c <_fflush_r+0x74>)
 802c52c:	429c      	cmp	r4, r3
 802c52e:	bf08      	it	eq
 802c530:	68ec      	ldreq	r4, [r5, #12]
 802c532:	e7da      	b.n	802c4ea <_fflush_r+0x22>
 802c534:	08031dd0 	.word	0x08031dd0
 802c538:	08031df0 	.word	0x08031df0
 802c53c:	08031db0 	.word	0x08031db0

0802c540 <std>:
 802c540:	2300      	movs	r3, #0
 802c542:	b510      	push	{r4, lr}
 802c544:	4604      	mov	r4, r0
 802c546:	e9c0 3300 	strd	r3, r3, [r0]
 802c54a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 802c54e:	6083      	str	r3, [r0, #8]
 802c550:	8181      	strh	r1, [r0, #12]
 802c552:	6643      	str	r3, [r0, #100]	; 0x64
 802c554:	81c2      	strh	r2, [r0, #14]
 802c556:	6183      	str	r3, [r0, #24]
 802c558:	4619      	mov	r1, r3
 802c55a:	2208      	movs	r2, #8
 802c55c:	305c      	adds	r0, #92	; 0x5c
 802c55e:	f7ff fa17 	bl	802b990 <memset>
 802c562:	4b05      	ldr	r3, [pc, #20]	; (802c578 <std+0x38>)
 802c564:	6263      	str	r3, [r4, #36]	; 0x24
 802c566:	4b05      	ldr	r3, [pc, #20]	; (802c57c <std+0x3c>)
 802c568:	62a3      	str	r3, [r4, #40]	; 0x28
 802c56a:	4b05      	ldr	r3, [pc, #20]	; (802c580 <std+0x40>)
 802c56c:	62e3      	str	r3, [r4, #44]	; 0x2c
 802c56e:	4b05      	ldr	r3, [pc, #20]	; (802c584 <std+0x44>)
 802c570:	6224      	str	r4, [r4, #32]
 802c572:	6323      	str	r3, [r4, #48]	; 0x30
 802c574:	bd10      	pop	{r4, pc}
 802c576:	bf00      	nop
 802c578:	0802c815 	.word	0x0802c815
 802c57c:	0802c837 	.word	0x0802c837
 802c580:	0802c86f 	.word	0x0802c86f
 802c584:	0802c893 	.word	0x0802c893

0802c588 <_cleanup_r>:
 802c588:	4901      	ldr	r1, [pc, #4]	; (802c590 <_cleanup_r+0x8>)
 802c58a:	f000 b8af 	b.w	802c6ec <_fwalk_reent>
 802c58e:	bf00      	nop
 802c590:	0802c4c9 	.word	0x0802c4c9

0802c594 <__sfmoreglue>:
 802c594:	b570      	push	{r4, r5, r6, lr}
 802c596:	1e4a      	subs	r2, r1, #1
 802c598:	2568      	movs	r5, #104	; 0x68
 802c59a:	4355      	muls	r5, r2
 802c59c:	460e      	mov	r6, r1
 802c59e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 802c5a2:	f7ff fa4d 	bl	802ba40 <_malloc_r>
 802c5a6:	4604      	mov	r4, r0
 802c5a8:	b140      	cbz	r0, 802c5bc <__sfmoreglue+0x28>
 802c5aa:	2100      	movs	r1, #0
 802c5ac:	e9c0 1600 	strd	r1, r6, [r0]
 802c5b0:	300c      	adds	r0, #12
 802c5b2:	60a0      	str	r0, [r4, #8]
 802c5b4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 802c5b8:	f7ff f9ea 	bl	802b990 <memset>
 802c5bc:	4620      	mov	r0, r4
 802c5be:	bd70      	pop	{r4, r5, r6, pc}

0802c5c0 <__sfp_lock_acquire>:
 802c5c0:	4801      	ldr	r0, [pc, #4]	; (802c5c8 <__sfp_lock_acquire+0x8>)
 802c5c2:	f000 b8b3 	b.w	802c72c <__retarget_lock_acquire_recursive>
 802c5c6:	bf00      	nop
 802c5c8:	2400cf3c 	.word	0x2400cf3c

0802c5cc <__sfp_lock_release>:
 802c5cc:	4801      	ldr	r0, [pc, #4]	; (802c5d4 <__sfp_lock_release+0x8>)
 802c5ce:	f000 b8af 	b.w	802c730 <__retarget_lock_release_recursive>
 802c5d2:	bf00      	nop
 802c5d4:	2400cf3c 	.word	0x2400cf3c

0802c5d8 <__sinit_lock_acquire>:
 802c5d8:	4801      	ldr	r0, [pc, #4]	; (802c5e0 <__sinit_lock_acquire+0x8>)
 802c5da:	f000 b8a7 	b.w	802c72c <__retarget_lock_acquire_recursive>
 802c5de:	bf00      	nop
 802c5e0:	2400cf3b 	.word	0x2400cf3b

0802c5e4 <__sinit_lock_release>:
 802c5e4:	4801      	ldr	r0, [pc, #4]	; (802c5ec <__sinit_lock_release+0x8>)
 802c5e6:	f000 b8a3 	b.w	802c730 <__retarget_lock_release_recursive>
 802c5ea:	bf00      	nop
 802c5ec:	2400cf3b 	.word	0x2400cf3b

0802c5f0 <__sinit>:
 802c5f0:	b510      	push	{r4, lr}
 802c5f2:	4604      	mov	r4, r0
 802c5f4:	f7ff fff0 	bl	802c5d8 <__sinit_lock_acquire>
 802c5f8:	69a3      	ldr	r3, [r4, #24]
 802c5fa:	b11b      	cbz	r3, 802c604 <__sinit+0x14>
 802c5fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802c600:	f7ff bff0 	b.w	802c5e4 <__sinit_lock_release>
 802c604:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 802c608:	6523      	str	r3, [r4, #80]	; 0x50
 802c60a:	4b13      	ldr	r3, [pc, #76]	; (802c658 <__sinit+0x68>)
 802c60c:	4a13      	ldr	r2, [pc, #76]	; (802c65c <__sinit+0x6c>)
 802c60e:	681b      	ldr	r3, [r3, #0]
 802c610:	62a2      	str	r2, [r4, #40]	; 0x28
 802c612:	42a3      	cmp	r3, r4
 802c614:	bf04      	itt	eq
 802c616:	2301      	moveq	r3, #1
 802c618:	61a3      	streq	r3, [r4, #24]
 802c61a:	4620      	mov	r0, r4
 802c61c:	f000 f820 	bl	802c660 <__sfp>
 802c620:	6060      	str	r0, [r4, #4]
 802c622:	4620      	mov	r0, r4
 802c624:	f000 f81c 	bl	802c660 <__sfp>
 802c628:	60a0      	str	r0, [r4, #8]
 802c62a:	4620      	mov	r0, r4
 802c62c:	f000 f818 	bl	802c660 <__sfp>
 802c630:	2200      	movs	r2, #0
 802c632:	60e0      	str	r0, [r4, #12]
 802c634:	2104      	movs	r1, #4
 802c636:	6860      	ldr	r0, [r4, #4]
 802c638:	f7ff ff82 	bl	802c540 <std>
 802c63c:	68a0      	ldr	r0, [r4, #8]
 802c63e:	2201      	movs	r2, #1
 802c640:	2109      	movs	r1, #9
 802c642:	f7ff ff7d 	bl	802c540 <std>
 802c646:	68e0      	ldr	r0, [r4, #12]
 802c648:	2202      	movs	r2, #2
 802c64a:	2112      	movs	r1, #18
 802c64c:	f7ff ff78 	bl	802c540 <std>
 802c650:	2301      	movs	r3, #1
 802c652:	61a3      	str	r3, [r4, #24]
 802c654:	e7d2      	b.n	802c5fc <__sinit+0xc>
 802c656:	bf00      	nop
 802c658:	08031d74 	.word	0x08031d74
 802c65c:	0802c589 	.word	0x0802c589

0802c660 <__sfp>:
 802c660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802c662:	4607      	mov	r7, r0
 802c664:	f7ff ffac 	bl	802c5c0 <__sfp_lock_acquire>
 802c668:	4b1e      	ldr	r3, [pc, #120]	; (802c6e4 <__sfp+0x84>)
 802c66a:	681e      	ldr	r6, [r3, #0]
 802c66c:	69b3      	ldr	r3, [r6, #24]
 802c66e:	b913      	cbnz	r3, 802c676 <__sfp+0x16>
 802c670:	4630      	mov	r0, r6
 802c672:	f7ff ffbd 	bl	802c5f0 <__sinit>
 802c676:	3648      	adds	r6, #72	; 0x48
 802c678:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 802c67c:	3b01      	subs	r3, #1
 802c67e:	d503      	bpl.n	802c688 <__sfp+0x28>
 802c680:	6833      	ldr	r3, [r6, #0]
 802c682:	b30b      	cbz	r3, 802c6c8 <__sfp+0x68>
 802c684:	6836      	ldr	r6, [r6, #0]
 802c686:	e7f7      	b.n	802c678 <__sfp+0x18>
 802c688:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 802c68c:	b9d5      	cbnz	r5, 802c6c4 <__sfp+0x64>
 802c68e:	4b16      	ldr	r3, [pc, #88]	; (802c6e8 <__sfp+0x88>)
 802c690:	60e3      	str	r3, [r4, #12]
 802c692:	f104 0058 	add.w	r0, r4, #88	; 0x58
 802c696:	6665      	str	r5, [r4, #100]	; 0x64
 802c698:	f000 f847 	bl	802c72a <__retarget_lock_init_recursive>
 802c69c:	f7ff ff96 	bl	802c5cc <__sfp_lock_release>
 802c6a0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 802c6a4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 802c6a8:	6025      	str	r5, [r4, #0]
 802c6aa:	61a5      	str	r5, [r4, #24]
 802c6ac:	2208      	movs	r2, #8
 802c6ae:	4629      	mov	r1, r5
 802c6b0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 802c6b4:	f7ff f96c 	bl	802b990 <memset>
 802c6b8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 802c6bc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 802c6c0:	4620      	mov	r0, r4
 802c6c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802c6c4:	3468      	adds	r4, #104	; 0x68
 802c6c6:	e7d9      	b.n	802c67c <__sfp+0x1c>
 802c6c8:	2104      	movs	r1, #4
 802c6ca:	4638      	mov	r0, r7
 802c6cc:	f7ff ff62 	bl	802c594 <__sfmoreglue>
 802c6d0:	4604      	mov	r4, r0
 802c6d2:	6030      	str	r0, [r6, #0]
 802c6d4:	2800      	cmp	r0, #0
 802c6d6:	d1d5      	bne.n	802c684 <__sfp+0x24>
 802c6d8:	f7ff ff78 	bl	802c5cc <__sfp_lock_release>
 802c6dc:	230c      	movs	r3, #12
 802c6de:	603b      	str	r3, [r7, #0]
 802c6e0:	e7ee      	b.n	802c6c0 <__sfp+0x60>
 802c6e2:	bf00      	nop
 802c6e4:	08031d74 	.word	0x08031d74
 802c6e8:	ffff0001 	.word	0xffff0001

0802c6ec <_fwalk_reent>:
 802c6ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802c6f0:	4606      	mov	r6, r0
 802c6f2:	4688      	mov	r8, r1
 802c6f4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 802c6f8:	2700      	movs	r7, #0
 802c6fa:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 802c6fe:	f1b9 0901 	subs.w	r9, r9, #1
 802c702:	d505      	bpl.n	802c710 <_fwalk_reent+0x24>
 802c704:	6824      	ldr	r4, [r4, #0]
 802c706:	2c00      	cmp	r4, #0
 802c708:	d1f7      	bne.n	802c6fa <_fwalk_reent+0xe>
 802c70a:	4638      	mov	r0, r7
 802c70c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802c710:	89ab      	ldrh	r3, [r5, #12]
 802c712:	2b01      	cmp	r3, #1
 802c714:	d907      	bls.n	802c726 <_fwalk_reent+0x3a>
 802c716:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 802c71a:	3301      	adds	r3, #1
 802c71c:	d003      	beq.n	802c726 <_fwalk_reent+0x3a>
 802c71e:	4629      	mov	r1, r5
 802c720:	4630      	mov	r0, r6
 802c722:	47c0      	blx	r8
 802c724:	4307      	orrs	r7, r0
 802c726:	3568      	adds	r5, #104	; 0x68
 802c728:	e7e9      	b.n	802c6fe <_fwalk_reent+0x12>

0802c72a <__retarget_lock_init_recursive>:
 802c72a:	4770      	bx	lr

0802c72c <__retarget_lock_acquire_recursive>:
 802c72c:	4770      	bx	lr

0802c72e <__retarget_lock_release>:
 802c72e:	4770      	bx	lr

0802c730 <__retarget_lock_release_recursive>:
 802c730:	4770      	bx	lr

0802c732 <__swhatbuf_r>:
 802c732:	b570      	push	{r4, r5, r6, lr}
 802c734:	460e      	mov	r6, r1
 802c736:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802c73a:	2900      	cmp	r1, #0
 802c73c:	b096      	sub	sp, #88	; 0x58
 802c73e:	4614      	mov	r4, r2
 802c740:	461d      	mov	r5, r3
 802c742:	da07      	bge.n	802c754 <__swhatbuf_r+0x22>
 802c744:	2300      	movs	r3, #0
 802c746:	602b      	str	r3, [r5, #0]
 802c748:	89b3      	ldrh	r3, [r6, #12]
 802c74a:	061a      	lsls	r2, r3, #24
 802c74c:	d410      	bmi.n	802c770 <__swhatbuf_r+0x3e>
 802c74e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 802c752:	e00e      	b.n	802c772 <__swhatbuf_r+0x40>
 802c754:	466a      	mov	r2, sp
 802c756:	f000 f8c3 	bl	802c8e0 <_fstat_r>
 802c75a:	2800      	cmp	r0, #0
 802c75c:	dbf2      	blt.n	802c744 <__swhatbuf_r+0x12>
 802c75e:	9a01      	ldr	r2, [sp, #4]
 802c760:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 802c764:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 802c768:	425a      	negs	r2, r3
 802c76a:	415a      	adcs	r2, r3
 802c76c:	602a      	str	r2, [r5, #0]
 802c76e:	e7ee      	b.n	802c74e <__swhatbuf_r+0x1c>
 802c770:	2340      	movs	r3, #64	; 0x40
 802c772:	2000      	movs	r0, #0
 802c774:	6023      	str	r3, [r4, #0]
 802c776:	b016      	add	sp, #88	; 0x58
 802c778:	bd70      	pop	{r4, r5, r6, pc}
	...

0802c77c <__smakebuf_r>:
 802c77c:	898b      	ldrh	r3, [r1, #12]
 802c77e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 802c780:	079d      	lsls	r5, r3, #30
 802c782:	4606      	mov	r6, r0
 802c784:	460c      	mov	r4, r1
 802c786:	d507      	bpl.n	802c798 <__smakebuf_r+0x1c>
 802c788:	f104 0347 	add.w	r3, r4, #71	; 0x47
 802c78c:	6023      	str	r3, [r4, #0]
 802c78e:	6123      	str	r3, [r4, #16]
 802c790:	2301      	movs	r3, #1
 802c792:	6163      	str	r3, [r4, #20]
 802c794:	b002      	add	sp, #8
 802c796:	bd70      	pop	{r4, r5, r6, pc}
 802c798:	ab01      	add	r3, sp, #4
 802c79a:	466a      	mov	r2, sp
 802c79c:	f7ff ffc9 	bl	802c732 <__swhatbuf_r>
 802c7a0:	9900      	ldr	r1, [sp, #0]
 802c7a2:	4605      	mov	r5, r0
 802c7a4:	4630      	mov	r0, r6
 802c7a6:	f7ff f94b 	bl	802ba40 <_malloc_r>
 802c7aa:	b948      	cbnz	r0, 802c7c0 <__smakebuf_r+0x44>
 802c7ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802c7b0:	059a      	lsls	r2, r3, #22
 802c7b2:	d4ef      	bmi.n	802c794 <__smakebuf_r+0x18>
 802c7b4:	f023 0303 	bic.w	r3, r3, #3
 802c7b8:	f043 0302 	orr.w	r3, r3, #2
 802c7bc:	81a3      	strh	r3, [r4, #12]
 802c7be:	e7e3      	b.n	802c788 <__smakebuf_r+0xc>
 802c7c0:	4b0d      	ldr	r3, [pc, #52]	; (802c7f8 <__smakebuf_r+0x7c>)
 802c7c2:	62b3      	str	r3, [r6, #40]	; 0x28
 802c7c4:	89a3      	ldrh	r3, [r4, #12]
 802c7c6:	6020      	str	r0, [r4, #0]
 802c7c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 802c7cc:	81a3      	strh	r3, [r4, #12]
 802c7ce:	9b00      	ldr	r3, [sp, #0]
 802c7d0:	6163      	str	r3, [r4, #20]
 802c7d2:	9b01      	ldr	r3, [sp, #4]
 802c7d4:	6120      	str	r0, [r4, #16]
 802c7d6:	b15b      	cbz	r3, 802c7f0 <__smakebuf_r+0x74>
 802c7d8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802c7dc:	4630      	mov	r0, r6
 802c7de:	f000 f891 	bl	802c904 <_isatty_r>
 802c7e2:	b128      	cbz	r0, 802c7f0 <__smakebuf_r+0x74>
 802c7e4:	89a3      	ldrh	r3, [r4, #12]
 802c7e6:	f023 0303 	bic.w	r3, r3, #3
 802c7ea:	f043 0301 	orr.w	r3, r3, #1
 802c7ee:	81a3      	strh	r3, [r4, #12]
 802c7f0:	89a0      	ldrh	r0, [r4, #12]
 802c7f2:	4305      	orrs	r5, r0
 802c7f4:	81a5      	strh	r5, [r4, #12]
 802c7f6:	e7cd      	b.n	802c794 <__smakebuf_r+0x18>
 802c7f8:	0802c589 	.word	0x0802c589

0802c7fc <__malloc_lock>:
 802c7fc:	4801      	ldr	r0, [pc, #4]	; (802c804 <__malloc_lock+0x8>)
 802c7fe:	f7ff bf95 	b.w	802c72c <__retarget_lock_acquire_recursive>
 802c802:	bf00      	nop
 802c804:	2400cf38 	.word	0x2400cf38

0802c808 <__malloc_unlock>:
 802c808:	4801      	ldr	r0, [pc, #4]	; (802c810 <__malloc_unlock+0x8>)
 802c80a:	f7ff bf91 	b.w	802c730 <__retarget_lock_release_recursive>
 802c80e:	bf00      	nop
 802c810:	2400cf38 	.word	0x2400cf38

0802c814 <__sread>:
 802c814:	b510      	push	{r4, lr}
 802c816:	460c      	mov	r4, r1
 802c818:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802c81c:	f000 f894 	bl	802c948 <_read_r>
 802c820:	2800      	cmp	r0, #0
 802c822:	bfab      	itete	ge
 802c824:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 802c826:	89a3      	ldrhlt	r3, [r4, #12]
 802c828:	181b      	addge	r3, r3, r0
 802c82a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 802c82e:	bfac      	ite	ge
 802c830:	6563      	strge	r3, [r4, #84]	; 0x54
 802c832:	81a3      	strhlt	r3, [r4, #12]
 802c834:	bd10      	pop	{r4, pc}

0802c836 <__swrite>:
 802c836:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802c83a:	461f      	mov	r7, r3
 802c83c:	898b      	ldrh	r3, [r1, #12]
 802c83e:	05db      	lsls	r3, r3, #23
 802c840:	4605      	mov	r5, r0
 802c842:	460c      	mov	r4, r1
 802c844:	4616      	mov	r6, r2
 802c846:	d505      	bpl.n	802c854 <__swrite+0x1e>
 802c848:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802c84c:	2302      	movs	r3, #2
 802c84e:	2200      	movs	r2, #0
 802c850:	f000 f868 	bl	802c924 <_lseek_r>
 802c854:	89a3      	ldrh	r3, [r4, #12]
 802c856:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802c85a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 802c85e:	81a3      	strh	r3, [r4, #12]
 802c860:	4632      	mov	r2, r6
 802c862:	463b      	mov	r3, r7
 802c864:	4628      	mov	r0, r5
 802c866:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802c86a:	f000 b817 	b.w	802c89c <_write_r>

0802c86e <__sseek>:
 802c86e:	b510      	push	{r4, lr}
 802c870:	460c      	mov	r4, r1
 802c872:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802c876:	f000 f855 	bl	802c924 <_lseek_r>
 802c87a:	1c43      	adds	r3, r0, #1
 802c87c:	89a3      	ldrh	r3, [r4, #12]
 802c87e:	bf15      	itete	ne
 802c880:	6560      	strne	r0, [r4, #84]	; 0x54
 802c882:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 802c886:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 802c88a:	81a3      	strheq	r3, [r4, #12]
 802c88c:	bf18      	it	ne
 802c88e:	81a3      	strhne	r3, [r4, #12]
 802c890:	bd10      	pop	{r4, pc}

0802c892 <__sclose>:
 802c892:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802c896:	f000 b813 	b.w	802c8c0 <_close_r>
	...

0802c89c <_write_r>:
 802c89c:	b538      	push	{r3, r4, r5, lr}
 802c89e:	4d07      	ldr	r5, [pc, #28]	; (802c8bc <_write_r+0x20>)
 802c8a0:	4604      	mov	r4, r0
 802c8a2:	4608      	mov	r0, r1
 802c8a4:	4611      	mov	r1, r2
 802c8a6:	2200      	movs	r2, #0
 802c8a8:	602a      	str	r2, [r5, #0]
 802c8aa:	461a      	mov	r2, r3
 802c8ac:	f7d7 fabd 	bl	8003e2a <_write>
 802c8b0:	1c43      	adds	r3, r0, #1
 802c8b2:	d102      	bne.n	802c8ba <_write_r+0x1e>
 802c8b4:	682b      	ldr	r3, [r5, #0]
 802c8b6:	b103      	cbz	r3, 802c8ba <_write_r+0x1e>
 802c8b8:	6023      	str	r3, [r4, #0]
 802c8ba:	bd38      	pop	{r3, r4, r5, pc}
 802c8bc:	2400cf44 	.word	0x2400cf44

0802c8c0 <_close_r>:
 802c8c0:	b538      	push	{r3, r4, r5, lr}
 802c8c2:	4d06      	ldr	r5, [pc, #24]	; (802c8dc <_close_r+0x1c>)
 802c8c4:	2300      	movs	r3, #0
 802c8c6:	4604      	mov	r4, r0
 802c8c8:	4608      	mov	r0, r1
 802c8ca:	602b      	str	r3, [r5, #0]
 802c8cc:	f7d7 fac9 	bl	8003e62 <_close>
 802c8d0:	1c43      	adds	r3, r0, #1
 802c8d2:	d102      	bne.n	802c8da <_close_r+0x1a>
 802c8d4:	682b      	ldr	r3, [r5, #0]
 802c8d6:	b103      	cbz	r3, 802c8da <_close_r+0x1a>
 802c8d8:	6023      	str	r3, [r4, #0]
 802c8da:	bd38      	pop	{r3, r4, r5, pc}
 802c8dc:	2400cf44 	.word	0x2400cf44

0802c8e0 <_fstat_r>:
 802c8e0:	b538      	push	{r3, r4, r5, lr}
 802c8e2:	4d07      	ldr	r5, [pc, #28]	; (802c900 <_fstat_r+0x20>)
 802c8e4:	2300      	movs	r3, #0
 802c8e6:	4604      	mov	r4, r0
 802c8e8:	4608      	mov	r0, r1
 802c8ea:	4611      	mov	r1, r2
 802c8ec:	602b      	str	r3, [r5, #0]
 802c8ee:	f7d7 fac4 	bl	8003e7a <_fstat>
 802c8f2:	1c43      	adds	r3, r0, #1
 802c8f4:	d102      	bne.n	802c8fc <_fstat_r+0x1c>
 802c8f6:	682b      	ldr	r3, [r5, #0]
 802c8f8:	b103      	cbz	r3, 802c8fc <_fstat_r+0x1c>
 802c8fa:	6023      	str	r3, [r4, #0]
 802c8fc:	bd38      	pop	{r3, r4, r5, pc}
 802c8fe:	bf00      	nop
 802c900:	2400cf44 	.word	0x2400cf44

0802c904 <_isatty_r>:
 802c904:	b538      	push	{r3, r4, r5, lr}
 802c906:	4d06      	ldr	r5, [pc, #24]	; (802c920 <_isatty_r+0x1c>)
 802c908:	2300      	movs	r3, #0
 802c90a:	4604      	mov	r4, r0
 802c90c:	4608      	mov	r0, r1
 802c90e:	602b      	str	r3, [r5, #0]
 802c910:	f7d7 fac3 	bl	8003e9a <_isatty>
 802c914:	1c43      	adds	r3, r0, #1
 802c916:	d102      	bne.n	802c91e <_isatty_r+0x1a>
 802c918:	682b      	ldr	r3, [r5, #0]
 802c91a:	b103      	cbz	r3, 802c91e <_isatty_r+0x1a>
 802c91c:	6023      	str	r3, [r4, #0]
 802c91e:	bd38      	pop	{r3, r4, r5, pc}
 802c920:	2400cf44 	.word	0x2400cf44

0802c924 <_lseek_r>:
 802c924:	b538      	push	{r3, r4, r5, lr}
 802c926:	4d07      	ldr	r5, [pc, #28]	; (802c944 <_lseek_r+0x20>)
 802c928:	4604      	mov	r4, r0
 802c92a:	4608      	mov	r0, r1
 802c92c:	4611      	mov	r1, r2
 802c92e:	2200      	movs	r2, #0
 802c930:	602a      	str	r2, [r5, #0]
 802c932:	461a      	mov	r2, r3
 802c934:	f7d7 fabc 	bl	8003eb0 <_lseek>
 802c938:	1c43      	adds	r3, r0, #1
 802c93a:	d102      	bne.n	802c942 <_lseek_r+0x1e>
 802c93c:	682b      	ldr	r3, [r5, #0]
 802c93e:	b103      	cbz	r3, 802c942 <_lseek_r+0x1e>
 802c940:	6023      	str	r3, [r4, #0]
 802c942:	bd38      	pop	{r3, r4, r5, pc}
 802c944:	2400cf44 	.word	0x2400cf44

0802c948 <_read_r>:
 802c948:	b538      	push	{r3, r4, r5, lr}
 802c94a:	4d07      	ldr	r5, [pc, #28]	; (802c968 <_read_r+0x20>)
 802c94c:	4604      	mov	r4, r0
 802c94e:	4608      	mov	r0, r1
 802c950:	4611      	mov	r1, r2
 802c952:	2200      	movs	r2, #0
 802c954:	602a      	str	r2, [r5, #0]
 802c956:	461a      	mov	r2, r3
 802c958:	f7d7 fa4a 	bl	8003df0 <_read>
 802c95c:	1c43      	adds	r3, r0, #1
 802c95e:	d102      	bne.n	802c966 <_read_r+0x1e>
 802c960:	682b      	ldr	r3, [r5, #0]
 802c962:	b103      	cbz	r3, 802c966 <_read_r+0x1e>
 802c964:	6023      	str	r3, [r4, #0]
 802c966:	bd38      	pop	{r3, r4, r5, pc}
 802c968:	2400cf44 	.word	0x2400cf44

0802c96c <_init>:
 802c96c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802c96e:	bf00      	nop
 802c970:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802c972:	bc08      	pop	{r3}
 802c974:	469e      	mov	lr, r3
 802c976:	4770      	bx	lr

0802c978 <_fini>:
 802c978:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802c97a:	bf00      	nop
 802c97c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802c97e:	bc08      	pop	{r3}
 802c980:	469e      	mov	lr, r3
 802c982:	4770      	bx	lr
