
NUCLEO-F446RE_PredictiveMaintenance.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08004000  08004000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001b8c0  080041d0  080041d0  000041d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00018140  0801fa90  0801fa90  0001fa90  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08037bd0  08037bd0  00037bd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08037bd8  08037bd8  00037bd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08037bdc  08037bdc  00037bdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000a5c  20000000  08037be0  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000b5cc  20000a60  0803863c  00040a60  2**3
                  ALLOC
  8 ._user_heap_stack 00013000  2000c02c  0803863c  0004c02c  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00040a5c  2**0
                  CONTENTS, READONLY
 10 .debug_info   000d2b04  00000000  00000000  00040a8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000e55b  00000000  00000000  00113590  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_loc    00045280  00000000  00000000  00121aeb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00003e30  00000000  00000000  00166d70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 00005c18  00000000  00000000  0016aba0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  000357b0  00000000  00000000  001707b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   000620cf  00000000  00000000  001a5f68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0010c0ae  00000000  00000000  00208037  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000140  00000000  00000000  003140e5  2**0
                  CONTENTS, READONLY
 19 .debug_frame  0000e4bc  00000000  00000000  00314228  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080041d0 <__do_global_dtors_aux>:
 80041d0:	b510      	push	{r4, lr}
 80041d2:	4c05      	ldr	r4, [pc, #20]	; (80041e8 <__do_global_dtors_aux+0x18>)
 80041d4:	7823      	ldrb	r3, [r4, #0]
 80041d6:	b933      	cbnz	r3, 80041e6 <__do_global_dtors_aux+0x16>
 80041d8:	4b04      	ldr	r3, [pc, #16]	; (80041ec <__do_global_dtors_aux+0x1c>)
 80041da:	b113      	cbz	r3, 80041e2 <__do_global_dtors_aux+0x12>
 80041dc:	4804      	ldr	r0, [pc, #16]	; (80041f0 <__do_global_dtors_aux+0x20>)
 80041de:	f3af 8000 	nop.w
 80041e2:	2301      	movs	r3, #1
 80041e4:	7023      	strb	r3, [r4, #0]
 80041e6:	bd10      	pop	{r4, pc}
 80041e8:	20000a60 	.word	0x20000a60
 80041ec:	00000000 	.word	0x00000000
 80041f0:	0801fa78 	.word	0x0801fa78

080041f4 <frame_dummy>:
 80041f4:	b508      	push	{r3, lr}
 80041f6:	4b03      	ldr	r3, [pc, #12]	; (8004204 <frame_dummy+0x10>)
 80041f8:	b11b      	cbz	r3, 8004202 <frame_dummy+0xe>
 80041fa:	4903      	ldr	r1, [pc, #12]	; (8004208 <frame_dummy+0x14>)
 80041fc:	4803      	ldr	r0, [pc, #12]	; (800420c <frame_dummy+0x18>)
 80041fe:	f3af 8000 	nop.w
 8004202:	bd08      	pop	{r3, pc}
 8004204:	00000000 	.word	0x00000000
 8004208:	20000a64 	.word	0x20000a64
 800420c:	0801fa78 	.word	0x0801fa78

08004210 <arm_bitreversal_32>:
 8004210:	1c4b      	adds	r3, r1, #1
 8004212:	2b01      	cmp	r3, #1
 8004214:	bf98      	it	ls
 8004216:	4770      	bxls	lr
 8004218:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 800421c:	1c91      	adds	r1, r2, #2
 800421e:	089b      	lsrs	r3, r3, #2

08004220 <arm_bitreversal_32_0>:
 8004220:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 8004224:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 8004228:	880a      	ldrh	r2, [r1, #0]
 800422a:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 800422e:	4480      	add	r8, r0
 8004230:	4481      	add	r9, r0
 8004232:	4402      	add	r2, r0
 8004234:	4484      	add	ip, r0
 8004236:	f8d9 7000 	ldr.w	r7, [r9]
 800423a:	f8d8 6000 	ldr.w	r6, [r8]
 800423e:	6815      	ldr	r5, [r2, #0]
 8004240:	f8dc 4000 	ldr.w	r4, [ip]
 8004244:	f8c9 6000 	str.w	r6, [r9]
 8004248:	f8c8 7000 	str.w	r7, [r8]
 800424c:	f8cc 5000 	str.w	r5, [ip]
 8004250:	6014      	str	r4, [r2, #0]
 8004252:	f8d9 7004 	ldr.w	r7, [r9, #4]
 8004256:	f8d8 6004 	ldr.w	r6, [r8, #4]
 800425a:	6855      	ldr	r5, [r2, #4]
 800425c:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8004260:	f8c9 6004 	str.w	r6, [r9, #4]
 8004264:	f8c8 7004 	str.w	r7, [r8, #4]
 8004268:	f8cc 5004 	str.w	r5, [ip, #4]
 800426c:	6054      	str	r4, [r2, #4]
 800426e:	3108      	adds	r1, #8
 8004270:	3b01      	subs	r3, #1
 8004272:	d1d5      	bne.n	8004220 <arm_bitreversal_32_0>
 8004274:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8004278:	4770      	bx	lr

0800427a <arm_bitreversal_16>:
 800427a:	1c4b      	adds	r3, r1, #1
 800427c:	2b01      	cmp	r3, #1
 800427e:	bf98      	it	ls
 8004280:	4770      	bxls	lr
 8004282:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 8004286:	1c91      	adds	r1, r2, #2
 8004288:	089b      	lsrs	r3, r3, #2

0800428a <arm_bitreversal_16_0>:
 800428a:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 800428e:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 8004292:	880a      	ldrh	r2, [r1, #0]
 8004294:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 8004298:	eb00 0858 	add.w	r8, r0, r8, lsr #1
 800429c:	eb00 0959 	add.w	r9, r0, r9, lsr #1
 80042a0:	eb00 0252 	add.w	r2, r0, r2, lsr #1
 80042a4:	eb00 0c5c 	add.w	ip, r0, ip, lsr #1
 80042a8:	f8d9 7000 	ldr.w	r7, [r9]
 80042ac:	f8d8 6000 	ldr.w	r6, [r8]
 80042b0:	6815      	ldr	r5, [r2, #0]
 80042b2:	f8dc 4000 	ldr.w	r4, [ip]
 80042b6:	f8c9 6000 	str.w	r6, [r9]
 80042ba:	f8c8 7000 	str.w	r7, [r8]
 80042be:	f8cc 5000 	str.w	r5, [ip]
 80042c2:	6014      	str	r4, [r2, #0]
 80042c4:	3108      	adds	r1, #8
 80042c6:	3b01      	subs	r3, #1
 80042c8:	d1df      	bne.n	800428a <arm_bitreversal_16_0>
 80042ca:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 80042ce:	4770      	bx	lr

080042d0 <strcmp>:
 80042d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80042d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80042d8:	2a01      	cmp	r2, #1
 80042da:	bf28      	it	cs
 80042dc:	429a      	cmpcs	r2, r3
 80042de:	d0f7      	beq.n	80042d0 <strcmp>
 80042e0:	1ad0      	subs	r0, r2, r3
 80042e2:	4770      	bx	lr

080042e4 <strlen>:
 80042e4:	4603      	mov	r3, r0
 80042e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80042ea:	2a00      	cmp	r2, #0
 80042ec:	d1fb      	bne.n	80042e6 <strlen+0x2>
 80042ee:	1a18      	subs	r0, r3, r0
 80042f0:	3801      	subs	r0, #1
 80042f2:	4770      	bx	lr
	...

08004300 <memchr>:
 8004300:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8004304:	2a10      	cmp	r2, #16
 8004306:	db2b      	blt.n	8004360 <memchr+0x60>
 8004308:	f010 0f07 	tst.w	r0, #7
 800430c:	d008      	beq.n	8004320 <memchr+0x20>
 800430e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8004312:	3a01      	subs	r2, #1
 8004314:	428b      	cmp	r3, r1
 8004316:	d02d      	beq.n	8004374 <memchr+0x74>
 8004318:	f010 0f07 	tst.w	r0, #7
 800431c:	b342      	cbz	r2, 8004370 <memchr+0x70>
 800431e:	d1f6      	bne.n	800430e <memchr+0xe>
 8004320:	b4f0      	push	{r4, r5, r6, r7}
 8004322:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8004326:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800432a:	f022 0407 	bic.w	r4, r2, #7
 800432e:	f07f 0700 	mvns.w	r7, #0
 8004332:	2300      	movs	r3, #0
 8004334:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8004338:	3c08      	subs	r4, #8
 800433a:	ea85 0501 	eor.w	r5, r5, r1
 800433e:	ea86 0601 	eor.w	r6, r6, r1
 8004342:	fa85 f547 	uadd8	r5, r5, r7
 8004346:	faa3 f587 	sel	r5, r3, r7
 800434a:	fa86 f647 	uadd8	r6, r6, r7
 800434e:	faa5 f687 	sel	r6, r5, r7
 8004352:	b98e      	cbnz	r6, 8004378 <memchr+0x78>
 8004354:	d1ee      	bne.n	8004334 <memchr+0x34>
 8004356:	bcf0      	pop	{r4, r5, r6, r7}
 8004358:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800435c:	f002 0207 	and.w	r2, r2, #7
 8004360:	b132      	cbz	r2, 8004370 <memchr+0x70>
 8004362:	f810 3b01 	ldrb.w	r3, [r0], #1
 8004366:	3a01      	subs	r2, #1
 8004368:	ea83 0301 	eor.w	r3, r3, r1
 800436c:	b113      	cbz	r3, 8004374 <memchr+0x74>
 800436e:	d1f8      	bne.n	8004362 <memchr+0x62>
 8004370:	2000      	movs	r0, #0
 8004372:	4770      	bx	lr
 8004374:	3801      	subs	r0, #1
 8004376:	4770      	bx	lr
 8004378:	2d00      	cmp	r5, #0
 800437a:	bf06      	itte	eq
 800437c:	4635      	moveq	r5, r6
 800437e:	3803      	subeq	r0, #3
 8004380:	3807      	subne	r0, #7
 8004382:	f015 0f01 	tst.w	r5, #1
 8004386:	d107      	bne.n	8004398 <memchr+0x98>
 8004388:	3001      	adds	r0, #1
 800438a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800438e:	bf02      	ittt	eq
 8004390:	3001      	addeq	r0, #1
 8004392:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8004396:	3001      	addeq	r0, #1
 8004398:	bcf0      	pop	{r4, r5, r6, r7}
 800439a:	3801      	subs	r0, #1
 800439c:	4770      	bx	lr
 800439e:	bf00      	nop

080043a0 <__aeabi_drsub>:
 80043a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80043a4:	e002      	b.n	80043ac <__adddf3>
 80043a6:	bf00      	nop

080043a8 <__aeabi_dsub>:
 80043a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080043ac <__adddf3>:
 80043ac:	b530      	push	{r4, r5, lr}
 80043ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80043b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80043b6:	ea94 0f05 	teq	r4, r5
 80043ba:	bf08      	it	eq
 80043bc:	ea90 0f02 	teqeq	r0, r2
 80043c0:	bf1f      	itttt	ne
 80043c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80043c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80043ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80043ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80043d2:	f000 80e2 	beq.w	800459a <__adddf3+0x1ee>
 80043d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80043da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80043de:	bfb8      	it	lt
 80043e0:	426d      	neglt	r5, r5
 80043e2:	dd0c      	ble.n	80043fe <__adddf3+0x52>
 80043e4:	442c      	add	r4, r5
 80043e6:	ea80 0202 	eor.w	r2, r0, r2
 80043ea:	ea81 0303 	eor.w	r3, r1, r3
 80043ee:	ea82 0000 	eor.w	r0, r2, r0
 80043f2:	ea83 0101 	eor.w	r1, r3, r1
 80043f6:	ea80 0202 	eor.w	r2, r0, r2
 80043fa:	ea81 0303 	eor.w	r3, r1, r3
 80043fe:	2d36      	cmp	r5, #54	; 0x36
 8004400:	bf88      	it	hi
 8004402:	bd30      	pophi	{r4, r5, pc}
 8004404:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8004408:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800440c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8004410:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8004414:	d002      	beq.n	800441c <__adddf3+0x70>
 8004416:	4240      	negs	r0, r0
 8004418:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800441c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8004420:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8004424:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8004428:	d002      	beq.n	8004430 <__adddf3+0x84>
 800442a:	4252      	negs	r2, r2
 800442c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8004430:	ea94 0f05 	teq	r4, r5
 8004434:	f000 80a7 	beq.w	8004586 <__adddf3+0x1da>
 8004438:	f1a4 0401 	sub.w	r4, r4, #1
 800443c:	f1d5 0e20 	rsbs	lr, r5, #32
 8004440:	db0d      	blt.n	800445e <__adddf3+0xb2>
 8004442:	fa02 fc0e 	lsl.w	ip, r2, lr
 8004446:	fa22 f205 	lsr.w	r2, r2, r5
 800444a:	1880      	adds	r0, r0, r2
 800444c:	f141 0100 	adc.w	r1, r1, #0
 8004450:	fa03 f20e 	lsl.w	r2, r3, lr
 8004454:	1880      	adds	r0, r0, r2
 8004456:	fa43 f305 	asr.w	r3, r3, r5
 800445a:	4159      	adcs	r1, r3
 800445c:	e00e      	b.n	800447c <__adddf3+0xd0>
 800445e:	f1a5 0520 	sub.w	r5, r5, #32
 8004462:	f10e 0e20 	add.w	lr, lr, #32
 8004466:	2a01      	cmp	r2, #1
 8004468:	fa03 fc0e 	lsl.w	ip, r3, lr
 800446c:	bf28      	it	cs
 800446e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8004472:	fa43 f305 	asr.w	r3, r3, r5
 8004476:	18c0      	adds	r0, r0, r3
 8004478:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800447c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8004480:	d507      	bpl.n	8004492 <__adddf3+0xe6>
 8004482:	f04f 0e00 	mov.w	lr, #0
 8004486:	f1dc 0c00 	rsbs	ip, ip, #0
 800448a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800448e:	eb6e 0101 	sbc.w	r1, lr, r1
 8004492:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8004496:	d31b      	bcc.n	80044d0 <__adddf3+0x124>
 8004498:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800449c:	d30c      	bcc.n	80044b8 <__adddf3+0x10c>
 800449e:	0849      	lsrs	r1, r1, #1
 80044a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80044a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80044a8:	f104 0401 	add.w	r4, r4, #1
 80044ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80044b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80044b4:	f080 809a 	bcs.w	80045ec <__adddf3+0x240>
 80044b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80044bc:	bf08      	it	eq
 80044be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80044c2:	f150 0000 	adcs.w	r0, r0, #0
 80044c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80044ca:	ea41 0105 	orr.w	r1, r1, r5
 80044ce:	bd30      	pop	{r4, r5, pc}
 80044d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80044d4:	4140      	adcs	r0, r0
 80044d6:	eb41 0101 	adc.w	r1, r1, r1
 80044da:	3c01      	subs	r4, #1
 80044dc:	bf28      	it	cs
 80044de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80044e2:	d2e9      	bcs.n	80044b8 <__adddf3+0x10c>
 80044e4:	f091 0f00 	teq	r1, #0
 80044e8:	bf04      	itt	eq
 80044ea:	4601      	moveq	r1, r0
 80044ec:	2000      	moveq	r0, #0
 80044ee:	fab1 f381 	clz	r3, r1
 80044f2:	bf08      	it	eq
 80044f4:	3320      	addeq	r3, #32
 80044f6:	f1a3 030b 	sub.w	r3, r3, #11
 80044fa:	f1b3 0220 	subs.w	r2, r3, #32
 80044fe:	da0c      	bge.n	800451a <__adddf3+0x16e>
 8004500:	320c      	adds	r2, #12
 8004502:	dd08      	ble.n	8004516 <__adddf3+0x16a>
 8004504:	f102 0c14 	add.w	ip, r2, #20
 8004508:	f1c2 020c 	rsb	r2, r2, #12
 800450c:	fa01 f00c 	lsl.w	r0, r1, ip
 8004510:	fa21 f102 	lsr.w	r1, r1, r2
 8004514:	e00c      	b.n	8004530 <__adddf3+0x184>
 8004516:	f102 0214 	add.w	r2, r2, #20
 800451a:	bfd8      	it	le
 800451c:	f1c2 0c20 	rsble	ip, r2, #32
 8004520:	fa01 f102 	lsl.w	r1, r1, r2
 8004524:	fa20 fc0c 	lsr.w	ip, r0, ip
 8004528:	bfdc      	itt	le
 800452a:	ea41 010c 	orrle.w	r1, r1, ip
 800452e:	4090      	lslle	r0, r2
 8004530:	1ae4      	subs	r4, r4, r3
 8004532:	bfa2      	ittt	ge
 8004534:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8004538:	4329      	orrge	r1, r5
 800453a:	bd30      	popge	{r4, r5, pc}
 800453c:	ea6f 0404 	mvn.w	r4, r4
 8004540:	3c1f      	subs	r4, #31
 8004542:	da1c      	bge.n	800457e <__adddf3+0x1d2>
 8004544:	340c      	adds	r4, #12
 8004546:	dc0e      	bgt.n	8004566 <__adddf3+0x1ba>
 8004548:	f104 0414 	add.w	r4, r4, #20
 800454c:	f1c4 0220 	rsb	r2, r4, #32
 8004550:	fa20 f004 	lsr.w	r0, r0, r4
 8004554:	fa01 f302 	lsl.w	r3, r1, r2
 8004558:	ea40 0003 	orr.w	r0, r0, r3
 800455c:	fa21 f304 	lsr.w	r3, r1, r4
 8004560:	ea45 0103 	orr.w	r1, r5, r3
 8004564:	bd30      	pop	{r4, r5, pc}
 8004566:	f1c4 040c 	rsb	r4, r4, #12
 800456a:	f1c4 0220 	rsb	r2, r4, #32
 800456e:	fa20 f002 	lsr.w	r0, r0, r2
 8004572:	fa01 f304 	lsl.w	r3, r1, r4
 8004576:	ea40 0003 	orr.w	r0, r0, r3
 800457a:	4629      	mov	r1, r5
 800457c:	bd30      	pop	{r4, r5, pc}
 800457e:	fa21 f004 	lsr.w	r0, r1, r4
 8004582:	4629      	mov	r1, r5
 8004584:	bd30      	pop	{r4, r5, pc}
 8004586:	f094 0f00 	teq	r4, #0
 800458a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800458e:	bf06      	itte	eq
 8004590:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8004594:	3401      	addeq	r4, #1
 8004596:	3d01      	subne	r5, #1
 8004598:	e74e      	b.n	8004438 <__adddf3+0x8c>
 800459a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800459e:	bf18      	it	ne
 80045a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80045a4:	d029      	beq.n	80045fa <__adddf3+0x24e>
 80045a6:	ea94 0f05 	teq	r4, r5
 80045aa:	bf08      	it	eq
 80045ac:	ea90 0f02 	teqeq	r0, r2
 80045b0:	d005      	beq.n	80045be <__adddf3+0x212>
 80045b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80045b6:	bf04      	itt	eq
 80045b8:	4619      	moveq	r1, r3
 80045ba:	4610      	moveq	r0, r2
 80045bc:	bd30      	pop	{r4, r5, pc}
 80045be:	ea91 0f03 	teq	r1, r3
 80045c2:	bf1e      	ittt	ne
 80045c4:	2100      	movne	r1, #0
 80045c6:	2000      	movne	r0, #0
 80045c8:	bd30      	popne	{r4, r5, pc}
 80045ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80045ce:	d105      	bne.n	80045dc <__adddf3+0x230>
 80045d0:	0040      	lsls	r0, r0, #1
 80045d2:	4149      	adcs	r1, r1
 80045d4:	bf28      	it	cs
 80045d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80045da:	bd30      	pop	{r4, r5, pc}
 80045dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80045e0:	bf3c      	itt	cc
 80045e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80045e6:	bd30      	popcc	{r4, r5, pc}
 80045e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80045ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80045f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80045f4:	f04f 0000 	mov.w	r0, #0
 80045f8:	bd30      	pop	{r4, r5, pc}
 80045fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80045fe:	bf1a      	itte	ne
 8004600:	4619      	movne	r1, r3
 8004602:	4610      	movne	r0, r2
 8004604:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8004608:	bf1c      	itt	ne
 800460a:	460b      	movne	r3, r1
 800460c:	4602      	movne	r2, r0
 800460e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8004612:	bf06      	itte	eq
 8004614:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8004618:	ea91 0f03 	teqeq	r1, r3
 800461c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8004620:	bd30      	pop	{r4, r5, pc}
 8004622:	bf00      	nop

08004624 <__aeabi_ui2d>:
 8004624:	f090 0f00 	teq	r0, #0
 8004628:	bf04      	itt	eq
 800462a:	2100      	moveq	r1, #0
 800462c:	4770      	bxeq	lr
 800462e:	b530      	push	{r4, r5, lr}
 8004630:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8004634:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8004638:	f04f 0500 	mov.w	r5, #0
 800463c:	f04f 0100 	mov.w	r1, #0
 8004640:	e750      	b.n	80044e4 <__adddf3+0x138>
 8004642:	bf00      	nop

08004644 <__aeabi_i2d>:
 8004644:	f090 0f00 	teq	r0, #0
 8004648:	bf04      	itt	eq
 800464a:	2100      	moveq	r1, #0
 800464c:	4770      	bxeq	lr
 800464e:	b530      	push	{r4, r5, lr}
 8004650:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8004654:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8004658:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800465c:	bf48      	it	mi
 800465e:	4240      	negmi	r0, r0
 8004660:	f04f 0100 	mov.w	r1, #0
 8004664:	e73e      	b.n	80044e4 <__adddf3+0x138>
 8004666:	bf00      	nop

08004668 <__aeabi_f2d>:
 8004668:	0042      	lsls	r2, r0, #1
 800466a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800466e:	ea4f 0131 	mov.w	r1, r1, rrx
 8004672:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8004676:	bf1f      	itttt	ne
 8004678:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800467c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8004680:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8004684:	4770      	bxne	lr
 8004686:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800468a:	bf08      	it	eq
 800468c:	4770      	bxeq	lr
 800468e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8004692:	bf04      	itt	eq
 8004694:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8004698:	4770      	bxeq	lr
 800469a:	b530      	push	{r4, r5, lr}
 800469c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80046a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80046a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80046a8:	e71c      	b.n	80044e4 <__adddf3+0x138>
 80046aa:	bf00      	nop

080046ac <__aeabi_ul2d>:
 80046ac:	ea50 0201 	orrs.w	r2, r0, r1
 80046b0:	bf08      	it	eq
 80046b2:	4770      	bxeq	lr
 80046b4:	b530      	push	{r4, r5, lr}
 80046b6:	f04f 0500 	mov.w	r5, #0
 80046ba:	e00a      	b.n	80046d2 <__aeabi_l2d+0x16>

080046bc <__aeabi_l2d>:
 80046bc:	ea50 0201 	orrs.w	r2, r0, r1
 80046c0:	bf08      	it	eq
 80046c2:	4770      	bxeq	lr
 80046c4:	b530      	push	{r4, r5, lr}
 80046c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80046ca:	d502      	bpl.n	80046d2 <__aeabi_l2d+0x16>
 80046cc:	4240      	negs	r0, r0
 80046ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80046d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80046d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80046da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80046de:	f43f aed8 	beq.w	8004492 <__adddf3+0xe6>
 80046e2:	f04f 0203 	mov.w	r2, #3
 80046e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80046ea:	bf18      	it	ne
 80046ec:	3203      	addne	r2, #3
 80046ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80046f2:	bf18      	it	ne
 80046f4:	3203      	addne	r2, #3
 80046f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80046fa:	f1c2 0320 	rsb	r3, r2, #32
 80046fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8004702:	fa20 f002 	lsr.w	r0, r0, r2
 8004706:	fa01 fe03 	lsl.w	lr, r1, r3
 800470a:	ea40 000e 	orr.w	r0, r0, lr
 800470e:	fa21 f102 	lsr.w	r1, r1, r2
 8004712:	4414      	add	r4, r2
 8004714:	e6bd      	b.n	8004492 <__adddf3+0xe6>
 8004716:	bf00      	nop

08004718 <__aeabi_dmul>:
 8004718:	b570      	push	{r4, r5, r6, lr}
 800471a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800471e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8004722:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8004726:	bf1d      	ittte	ne
 8004728:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800472c:	ea94 0f0c 	teqne	r4, ip
 8004730:	ea95 0f0c 	teqne	r5, ip
 8004734:	f000 f8de 	bleq	80048f4 <__aeabi_dmul+0x1dc>
 8004738:	442c      	add	r4, r5
 800473a:	ea81 0603 	eor.w	r6, r1, r3
 800473e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8004742:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8004746:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800474a:	bf18      	it	ne
 800474c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8004750:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8004754:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004758:	d038      	beq.n	80047cc <__aeabi_dmul+0xb4>
 800475a:	fba0 ce02 	umull	ip, lr, r0, r2
 800475e:	f04f 0500 	mov.w	r5, #0
 8004762:	fbe1 e502 	umlal	lr, r5, r1, r2
 8004766:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800476a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800476e:	f04f 0600 	mov.w	r6, #0
 8004772:	fbe1 5603 	umlal	r5, r6, r1, r3
 8004776:	f09c 0f00 	teq	ip, #0
 800477a:	bf18      	it	ne
 800477c:	f04e 0e01 	orrne.w	lr, lr, #1
 8004780:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8004784:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8004788:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800478c:	d204      	bcs.n	8004798 <__aeabi_dmul+0x80>
 800478e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8004792:	416d      	adcs	r5, r5
 8004794:	eb46 0606 	adc.w	r6, r6, r6
 8004798:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800479c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80047a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80047a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80047a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80047ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80047b0:	bf88      	it	hi
 80047b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80047b6:	d81e      	bhi.n	80047f6 <__aeabi_dmul+0xde>
 80047b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80047bc:	bf08      	it	eq
 80047be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80047c2:	f150 0000 	adcs.w	r0, r0, #0
 80047c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80047ca:	bd70      	pop	{r4, r5, r6, pc}
 80047cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80047d0:	ea46 0101 	orr.w	r1, r6, r1
 80047d4:	ea40 0002 	orr.w	r0, r0, r2
 80047d8:	ea81 0103 	eor.w	r1, r1, r3
 80047dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80047e0:	bfc2      	ittt	gt
 80047e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80047e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80047ea:	bd70      	popgt	{r4, r5, r6, pc}
 80047ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80047f0:	f04f 0e00 	mov.w	lr, #0
 80047f4:	3c01      	subs	r4, #1
 80047f6:	f300 80ab 	bgt.w	8004950 <__aeabi_dmul+0x238>
 80047fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80047fe:	bfde      	ittt	le
 8004800:	2000      	movle	r0, #0
 8004802:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8004806:	bd70      	pople	{r4, r5, r6, pc}
 8004808:	f1c4 0400 	rsb	r4, r4, #0
 800480c:	3c20      	subs	r4, #32
 800480e:	da35      	bge.n	800487c <__aeabi_dmul+0x164>
 8004810:	340c      	adds	r4, #12
 8004812:	dc1b      	bgt.n	800484c <__aeabi_dmul+0x134>
 8004814:	f104 0414 	add.w	r4, r4, #20
 8004818:	f1c4 0520 	rsb	r5, r4, #32
 800481c:	fa00 f305 	lsl.w	r3, r0, r5
 8004820:	fa20 f004 	lsr.w	r0, r0, r4
 8004824:	fa01 f205 	lsl.w	r2, r1, r5
 8004828:	ea40 0002 	orr.w	r0, r0, r2
 800482c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8004830:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8004834:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8004838:	fa21 f604 	lsr.w	r6, r1, r4
 800483c:	eb42 0106 	adc.w	r1, r2, r6
 8004840:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8004844:	bf08      	it	eq
 8004846:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800484a:	bd70      	pop	{r4, r5, r6, pc}
 800484c:	f1c4 040c 	rsb	r4, r4, #12
 8004850:	f1c4 0520 	rsb	r5, r4, #32
 8004854:	fa00 f304 	lsl.w	r3, r0, r4
 8004858:	fa20 f005 	lsr.w	r0, r0, r5
 800485c:	fa01 f204 	lsl.w	r2, r1, r4
 8004860:	ea40 0002 	orr.w	r0, r0, r2
 8004864:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8004868:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800486c:	f141 0100 	adc.w	r1, r1, #0
 8004870:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8004874:	bf08      	it	eq
 8004876:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800487a:	bd70      	pop	{r4, r5, r6, pc}
 800487c:	f1c4 0520 	rsb	r5, r4, #32
 8004880:	fa00 f205 	lsl.w	r2, r0, r5
 8004884:	ea4e 0e02 	orr.w	lr, lr, r2
 8004888:	fa20 f304 	lsr.w	r3, r0, r4
 800488c:	fa01 f205 	lsl.w	r2, r1, r5
 8004890:	ea43 0302 	orr.w	r3, r3, r2
 8004894:	fa21 f004 	lsr.w	r0, r1, r4
 8004898:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800489c:	fa21 f204 	lsr.w	r2, r1, r4
 80048a0:	ea20 0002 	bic.w	r0, r0, r2
 80048a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80048a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80048ac:	bf08      	it	eq
 80048ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80048b2:	bd70      	pop	{r4, r5, r6, pc}
 80048b4:	f094 0f00 	teq	r4, #0
 80048b8:	d10f      	bne.n	80048da <__aeabi_dmul+0x1c2>
 80048ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80048be:	0040      	lsls	r0, r0, #1
 80048c0:	eb41 0101 	adc.w	r1, r1, r1
 80048c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80048c8:	bf08      	it	eq
 80048ca:	3c01      	subeq	r4, #1
 80048cc:	d0f7      	beq.n	80048be <__aeabi_dmul+0x1a6>
 80048ce:	ea41 0106 	orr.w	r1, r1, r6
 80048d2:	f095 0f00 	teq	r5, #0
 80048d6:	bf18      	it	ne
 80048d8:	4770      	bxne	lr
 80048da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80048de:	0052      	lsls	r2, r2, #1
 80048e0:	eb43 0303 	adc.w	r3, r3, r3
 80048e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80048e8:	bf08      	it	eq
 80048ea:	3d01      	subeq	r5, #1
 80048ec:	d0f7      	beq.n	80048de <__aeabi_dmul+0x1c6>
 80048ee:	ea43 0306 	orr.w	r3, r3, r6
 80048f2:	4770      	bx	lr
 80048f4:	ea94 0f0c 	teq	r4, ip
 80048f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80048fc:	bf18      	it	ne
 80048fe:	ea95 0f0c 	teqne	r5, ip
 8004902:	d00c      	beq.n	800491e <__aeabi_dmul+0x206>
 8004904:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8004908:	bf18      	it	ne
 800490a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800490e:	d1d1      	bne.n	80048b4 <__aeabi_dmul+0x19c>
 8004910:	ea81 0103 	eor.w	r1, r1, r3
 8004914:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8004918:	f04f 0000 	mov.w	r0, #0
 800491c:	bd70      	pop	{r4, r5, r6, pc}
 800491e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8004922:	bf06      	itte	eq
 8004924:	4610      	moveq	r0, r2
 8004926:	4619      	moveq	r1, r3
 8004928:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800492c:	d019      	beq.n	8004962 <__aeabi_dmul+0x24a>
 800492e:	ea94 0f0c 	teq	r4, ip
 8004932:	d102      	bne.n	800493a <__aeabi_dmul+0x222>
 8004934:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8004938:	d113      	bne.n	8004962 <__aeabi_dmul+0x24a>
 800493a:	ea95 0f0c 	teq	r5, ip
 800493e:	d105      	bne.n	800494c <__aeabi_dmul+0x234>
 8004940:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8004944:	bf1c      	itt	ne
 8004946:	4610      	movne	r0, r2
 8004948:	4619      	movne	r1, r3
 800494a:	d10a      	bne.n	8004962 <__aeabi_dmul+0x24a>
 800494c:	ea81 0103 	eor.w	r1, r1, r3
 8004950:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8004954:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8004958:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800495c:	f04f 0000 	mov.w	r0, #0
 8004960:	bd70      	pop	{r4, r5, r6, pc}
 8004962:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8004966:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800496a:	bd70      	pop	{r4, r5, r6, pc}

0800496c <__aeabi_ddiv>:
 800496c:	b570      	push	{r4, r5, r6, lr}
 800496e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8004972:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8004976:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800497a:	bf1d      	ittte	ne
 800497c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8004980:	ea94 0f0c 	teqne	r4, ip
 8004984:	ea95 0f0c 	teqne	r5, ip
 8004988:	f000 f8a7 	bleq	8004ada <__aeabi_ddiv+0x16e>
 800498c:	eba4 0405 	sub.w	r4, r4, r5
 8004990:	ea81 0e03 	eor.w	lr, r1, r3
 8004994:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8004998:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800499c:	f000 8088 	beq.w	8004ab0 <__aeabi_ddiv+0x144>
 80049a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80049a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80049a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80049ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80049b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80049b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80049b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80049bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80049c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80049c4:	429d      	cmp	r5, r3
 80049c6:	bf08      	it	eq
 80049c8:	4296      	cmpeq	r6, r2
 80049ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80049ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80049d2:	d202      	bcs.n	80049da <__aeabi_ddiv+0x6e>
 80049d4:	085b      	lsrs	r3, r3, #1
 80049d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80049da:	1ab6      	subs	r6, r6, r2
 80049dc:	eb65 0503 	sbc.w	r5, r5, r3
 80049e0:	085b      	lsrs	r3, r3, #1
 80049e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80049e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80049ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80049ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80049f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80049f6:	bf22      	ittt	cs
 80049f8:	1ab6      	subcs	r6, r6, r2
 80049fa:	4675      	movcs	r5, lr
 80049fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8004a00:	085b      	lsrs	r3, r3, #1
 8004a02:	ea4f 0232 	mov.w	r2, r2, rrx
 8004a06:	ebb6 0e02 	subs.w	lr, r6, r2
 8004a0a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8004a0e:	bf22      	ittt	cs
 8004a10:	1ab6      	subcs	r6, r6, r2
 8004a12:	4675      	movcs	r5, lr
 8004a14:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8004a18:	085b      	lsrs	r3, r3, #1
 8004a1a:	ea4f 0232 	mov.w	r2, r2, rrx
 8004a1e:	ebb6 0e02 	subs.w	lr, r6, r2
 8004a22:	eb75 0e03 	sbcs.w	lr, r5, r3
 8004a26:	bf22      	ittt	cs
 8004a28:	1ab6      	subcs	r6, r6, r2
 8004a2a:	4675      	movcs	r5, lr
 8004a2c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8004a30:	085b      	lsrs	r3, r3, #1
 8004a32:	ea4f 0232 	mov.w	r2, r2, rrx
 8004a36:	ebb6 0e02 	subs.w	lr, r6, r2
 8004a3a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8004a3e:	bf22      	ittt	cs
 8004a40:	1ab6      	subcs	r6, r6, r2
 8004a42:	4675      	movcs	r5, lr
 8004a44:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8004a48:	ea55 0e06 	orrs.w	lr, r5, r6
 8004a4c:	d018      	beq.n	8004a80 <__aeabi_ddiv+0x114>
 8004a4e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8004a52:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8004a56:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8004a5a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8004a5e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8004a62:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8004a66:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8004a6a:	d1c0      	bne.n	80049ee <__aeabi_ddiv+0x82>
 8004a6c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8004a70:	d10b      	bne.n	8004a8a <__aeabi_ddiv+0x11e>
 8004a72:	ea41 0100 	orr.w	r1, r1, r0
 8004a76:	f04f 0000 	mov.w	r0, #0
 8004a7a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8004a7e:	e7b6      	b.n	80049ee <__aeabi_ddiv+0x82>
 8004a80:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8004a84:	bf04      	itt	eq
 8004a86:	4301      	orreq	r1, r0
 8004a88:	2000      	moveq	r0, #0
 8004a8a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8004a8e:	bf88      	it	hi
 8004a90:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8004a94:	f63f aeaf 	bhi.w	80047f6 <__aeabi_dmul+0xde>
 8004a98:	ebb5 0c03 	subs.w	ip, r5, r3
 8004a9c:	bf04      	itt	eq
 8004a9e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8004aa2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8004aa6:	f150 0000 	adcs.w	r0, r0, #0
 8004aaa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8004aae:	bd70      	pop	{r4, r5, r6, pc}
 8004ab0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8004ab4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8004ab8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8004abc:	bfc2      	ittt	gt
 8004abe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8004ac2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8004ac6:	bd70      	popgt	{r4, r5, r6, pc}
 8004ac8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8004acc:	f04f 0e00 	mov.w	lr, #0
 8004ad0:	3c01      	subs	r4, #1
 8004ad2:	e690      	b.n	80047f6 <__aeabi_dmul+0xde>
 8004ad4:	ea45 0e06 	orr.w	lr, r5, r6
 8004ad8:	e68d      	b.n	80047f6 <__aeabi_dmul+0xde>
 8004ada:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8004ade:	ea94 0f0c 	teq	r4, ip
 8004ae2:	bf08      	it	eq
 8004ae4:	ea95 0f0c 	teqeq	r5, ip
 8004ae8:	f43f af3b 	beq.w	8004962 <__aeabi_dmul+0x24a>
 8004aec:	ea94 0f0c 	teq	r4, ip
 8004af0:	d10a      	bne.n	8004b08 <__aeabi_ddiv+0x19c>
 8004af2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8004af6:	f47f af34 	bne.w	8004962 <__aeabi_dmul+0x24a>
 8004afa:	ea95 0f0c 	teq	r5, ip
 8004afe:	f47f af25 	bne.w	800494c <__aeabi_dmul+0x234>
 8004b02:	4610      	mov	r0, r2
 8004b04:	4619      	mov	r1, r3
 8004b06:	e72c      	b.n	8004962 <__aeabi_dmul+0x24a>
 8004b08:	ea95 0f0c 	teq	r5, ip
 8004b0c:	d106      	bne.n	8004b1c <__aeabi_ddiv+0x1b0>
 8004b0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8004b12:	f43f aefd 	beq.w	8004910 <__aeabi_dmul+0x1f8>
 8004b16:	4610      	mov	r0, r2
 8004b18:	4619      	mov	r1, r3
 8004b1a:	e722      	b.n	8004962 <__aeabi_dmul+0x24a>
 8004b1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8004b20:	bf18      	it	ne
 8004b22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8004b26:	f47f aec5 	bne.w	80048b4 <__aeabi_dmul+0x19c>
 8004b2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8004b2e:	f47f af0d 	bne.w	800494c <__aeabi_dmul+0x234>
 8004b32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8004b36:	f47f aeeb 	bne.w	8004910 <__aeabi_dmul+0x1f8>
 8004b3a:	e712      	b.n	8004962 <__aeabi_dmul+0x24a>

08004b3c <__gedf2>:
 8004b3c:	f04f 3cff 	mov.w	ip, #4294967295
 8004b40:	e006      	b.n	8004b50 <__cmpdf2+0x4>
 8004b42:	bf00      	nop

08004b44 <__ledf2>:
 8004b44:	f04f 0c01 	mov.w	ip, #1
 8004b48:	e002      	b.n	8004b50 <__cmpdf2+0x4>
 8004b4a:	bf00      	nop

08004b4c <__cmpdf2>:
 8004b4c:	f04f 0c01 	mov.w	ip, #1
 8004b50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8004b54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8004b58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8004b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8004b60:	bf18      	it	ne
 8004b62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8004b66:	d01b      	beq.n	8004ba0 <__cmpdf2+0x54>
 8004b68:	b001      	add	sp, #4
 8004b6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8004b6e:	bf0c      	ite	eq
 8004b70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8004b74:	ea91 0f03 	teqne	r1, r3
 8004b78:	bf02      	ittt	eq
 8004b7a:	ea90 0f02 	teqeq	r0, r2
 8004b7e:	2000      	moveq	r0, #0
 8004b80:	4770      	bxeq	lr
 8004b82:	f110 0f00 	cmn.w	r0, #0
 8004b86:	ea91 0f03 	teq	r1, r3
 8004b8a:	bf58      	it	pl
 8004b8c:	4299      	cmppl	r1, r3
 8004b8e:	bf08      	it	eq
 8004b90:	4290      	cmpeq	r0, r2
 8004b92:	bf2c      	ite	cs
 8004b94:	17d8      	asrcs	r0, r3, #31
 8004b96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8004b9a:	f040 0001 	orr.w	r0, r0, #1
 8004b9e:	4770      	bx	lr
 8004ba0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8004ba4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8004ba8:	d102      	bne.n	8004bb0 <__cmpdf2+0x64>
 8004baa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8004bae:	d107      	bne.n	8004bc0 <__cmpdf2+0x74>
 8004bb0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8004bb4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8004bb8:	d1d6      	bne.n	8004b68 <__cmpdf2+0x1c>
 8004bba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8004bbe:	d0d3      	beq.n	8004b68 <__cmpdf2+0x1c>
 8004bc0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8004bc4:	4770      	bx	lr
 8004bc6:	bf00      	nop

08004bc8 <__aeabi_cdrcmple>:
 8004bc8:	4684      	mov	ip, r0
 8004bca:	4610      	mov	r0, r2
 8004bcc:	4662      	mov	r2, ip
 8004bce:	468c      	mov	ip, r1
 8004bd0:	4619      	mov	r1, r3
 8004bd2:	4663      	mov	r3, ip
 8004bd4:	e000      	b.n	8004bd8 <__aeabi_cdcmpeq>
 8004bd6:	bf00      	nop

08004bd8 <__aeabi_cdcmpeq>:
 8004bd8:	b501      	push	{r0, lr}
 8004bda:	f7ff ffb7 	bl	8004b4c <__cmpdf2>
 8004bde:	2800      	cmp	r0, #0
 8004be0:	bf48      	it	mi
 8004be2:	f110 0f00 	cmnmi.w	r0, #0
 8004be6:	bd01      	pop	{r0, pc}

08004be8 <__aeabi_dcmpeq>:
 8004be8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8004bec:	f7ff fff4 	bl	8004bd8 <__aeabi_cdcmpeq>
 8004bf0:	bf0c      	ite	eq
 8004bf2:	2001      	moveq	r0, #1
 8004bf4:	2000      	movne	r0, #0
 8004bf6:	f85d fb08 	ldr.w	pc, [sp], #8
 8004bfa:	bf00      	nop

08004bfc <__aeabi_dcmplt>:
 8004bfc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8004c00:	f7ff ffea 	bl	8004bd8 <__aeabi_cdcmpeq>
 8004c04:	bf34      	ite	cc
 8004c06:	2001      	movcc	r0, #1
 8004c08:	2000      	movcs	r0, #0
 8004c0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8004c0e:	bf00      	nop

08004c10 <__aeabi_dcmple>:
 8004c10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8004c14:	f7ff ffe0 	bl	8004bd8 <__aeabi_cdcmpeq>
 8004c18:	bf94      	ite	ls
 8004c1a:	2001      	movls	r0, #1
 8004c1c:	2000      	movhi	r0, #0
 8004c1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8004c22:	bf00      	nop

08004c24 <__aeabi_dcmpge>:
 8004c24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8004c28:	f7ff ffce 	bl	8004bc8 <__aeabi_cdrcmple>
 8004c2c:	bf94      	ite	ls
 8004c2e:	2001      	movls	r0, #1
 8004c30:	2000      	movhi	r0, #0
 8004c32:	f85d fb08 	ldr.w	pc, [sp], #8
 8004c36:	bf00      	nop

08004c38 <__aeabi_dcmpgt>:
 8004c38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8004c3c:	f7ff ffc4 	bl	8004bc8 <__aeabi_cdrcmple>
 8004c40:	bf34      	ite	cc
 8004c42:	2001      	movcc	r0, #1
 8004c44:	2000      	movcs	r0, #0
 8004c46:	f85d fb08 	ldr.w	pc, [sp], #8
 8004c4a:	bf00      	nop

08004c4c <__aeabi_dcmpun>:
 8004c4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8004c50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8004c54:	d102      	bne.n	8004c5c <__aeabi_dcmpun+0x10>
 8004c56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8004c5a:	d10a      	bne.n	8004c72 <__aeabi_dcmpun+0x26>
 8004c5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8004c60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8004c64:	d102      	bne.n	8004c6c <__aeabi_dcmpun+0x20>
 8004c66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8004c6a:	d102      	bne.n	8004c72 <__aeabi_dcmpun+0x26>
 8004c6c:	f04f 0000 	mov.w	r0, #0
 8004c70:	4770      	bx	lr
 8004c72:	f04f 0001 	mov.w	r0, #1
 8004c76:	4770      	bx	lr

08004c78 <__aeabi_d2iz>:
 8004c78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8004c7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8004c80:	d215      	bcs.n	8004cae <__aeabi_d2iz+0x36>
 8004c82:	d511      	bpl.n	8004ca8 <__aeabi_d2iz+0x30>
 8004c84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8004c88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8004c8c:	d912      	bls.n	8004cb4 <__aeabi_d2iz+0x3c>
 8004c8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8004c92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004c96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8004c9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8004c9e:	fa23 f002 	lsr.w	r0, r3, r2
 8004ca2:	bf18      	it	ne
 8004ca4:	4240      	negne	r0, r0
 8004ca6:	4770      	bx	lr
 8004ca8:	f04f 0000 	mov.w	r0, #0
 8004cac:	4770      	bx	lr
 8004cae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8004cb2:	d105      	bne.n	8004cc0 <__aeabi_d2iz+0x48>
 8004cb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8004cb8:	bf08      	it	eq
 8004cba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8004cbe:	4770      	bx	lr
 8004cc0:	f04f 0000 	mov.w	r0, #0
 8004cc4:	4770      	bx	lr
 8004cc6:	bf00      	nop

08004cc8 <__aeabi_d2uiz>:
 8004cc8:	004a      	lsls	r2, r1, #1
 8004cca:	d211      	bcs.n	8004cf0 <__aeabi_d2uiz+0x28>
 8004ccc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8004cd0:	d211      	bcs.n	8004cf6 <__aeabi_d2uiz+0x2e>
 8004cd2:	d50d      	bpl.n	8004cf0 <__aeabi_d2uiz+0x28>
 8004cd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8004cd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8004cdc:	d40e      	bmi.n	8004cfc <__aeabi_d2uiz+0x34>
 8004cde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8004ce2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004ce6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8004cea:	fa23 f002 	lsr.w	r0, r3, r2
 8004cee:	4770      	bx	lr
 8004cf0:	f04f 0000 	mov.w	r0, #0
 8004cf4:	4770      	bx	lr
 8004cf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8004cfa:	d102      	bne.n	8004d02 <__aeabi_d2uiz+0x3a>
 8004cfc:	f04f 30ff 	mov.w	r0, #4294967295
 8004d00:	4770      	bx	lr
 8004d02:	f04f 0000 	mov.w	r0, #0
 8004d06:	4770      	bx	lr

08004d08 <__aeabi_d2f>:
 8004d08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8004d0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8004d10:	bf24      	itt	cs
 8004d12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8004d16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8004d1a:	d90d      	bls.n	8004d38 <__aeabi_d2f+0x30>
 8004d1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8004d20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8004d24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8004d28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8004d2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8004d30:	bf08      	it	eq
 8004d32:	f020 0001 	biceq.w	r0, r0, #1
 8004d36:	4770      	bx	lr
 8004d38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8004d3c:	d121      	bne.n	8004d82 <__aeabi_d2f+0x7a>
 8004d3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8004d42:	bfbc      	itt	lt
 8004d44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8004d48:	4770      	bxlt	lr
 8004d4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8004d4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8004d52:	f1c2 0218 	rsb	r2, r2, #24
 8004d56:	f1c2 0c20 	rsb	ip, r2, #32
 8004d5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8004d5e:	fa20 f002 	lsr.w	r0, r0, r2
 8004d62:	bf18      	it	ne
 8004d64:	f040 0001 	orrne.w	r0, r0, #1
 8004d68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8004d6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8004d70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8004d74:	ea40 000c 	orr.w	r0, r0, ip
 8004d78:	fa23 f302 	lsr.w	r3, r3, r2
 8004d7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8004d80:	e7cc      	b.n	8004d1c <__aeabi_d2f+0x14>
 8004d82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8004d86:	d107      	bne.n	8004d98 <__aeabi_d2f+0x90>
 8004d88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8004d8c:	bf1e      	ittt	ne
 8004d8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8004d92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8004d96:	4770      	bxne	lr
 8004d98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8004d9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8004da0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8004da4:	4770      	bx	lr
 8004da6:	bf00      	nop

08004da8 <__aeabi_uldivmod>:
 8004da8:	b953      	cbnz	r3, 8004dc0 <__aeabi_uldivmod+0x18>
 8004daa:	b94a      	cbnz	r2, 8004dc0 <__aeabi_uldivmod+0x18>
 8004dac:	2900      	cmp	r1, #0
 8004dae:	bf08      	it	eq
 8004db0:	2800      	cmpeq	r0, #0
 8004db2:	bf1c      	itt	ne
 8004db4:	f04f 31ff 	movne.w	r1, #4294967295
 8004db8:	f04f 30ff 	movne.w	r0, #4294967295
 8004dbc:	f000 b9a4 	b.w	8005108 <__aeabi_idiv0>
 8004dc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8004dc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8004dc8:	f000 f83c 	bl	8004e44 <__udivmoddi4>
 8004dcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8004dd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004dd4:	b004      	add	sp, #16
 8004dd6:	4770      	bx	lr

08004dd8 <__aeabi_d2lz>:
 8004dd8:	b538      	push	{r3, r4, r5, lr}
 8004dda:	2200      	movs	r2, #0
 8004ddc:	2300      	movs	r3, #0
 8004dde:	4604      	mov	r4, r0
 8004de0:	460d      	mov	r5, r1
 8004de2:	f7ff ff0b 	bl	8004bfc <__aeabi_dcmplt>
 8004de6:	b928      	cbnz	r0, 8004df4 <__aeabi_d2lz+0x1c>
 8004de8:	4620      	mov	r0, r4
 8004dea:	4629      	mov	r1, r5
 8004dec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004df0:	f000 b80a 	b.w	8004e08 <__aeabi_d2ulz>
 8004df4:	4620      	mov	r0, r4
 8004df6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8004dfa:	f000 f805 	bl	8004e08 <__aeabi_d2ulz>
 8004dfe:	4240      	negs	r0, r0
 8004e00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8004e04:	bd38      	pop	{r3, r4, r5, pc}
 8004e06:	bf00      	nop

08004e08 <__aeabi_d2ulz>:
 8004e08:	b5d0      	push	{r4, r6, r7, lr}
 8004e0a:	4b0c      	ldr	r3, [pc, #48]	; (8004e3c <__aeabi_d2ulz+0x34>)
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	4606      	mov	r6, r0
 8004e10:	460f      	mov	r7, r1
 8004e12:	f7ff fc81 	bl	8004718 <__aeabi_dmul>
 8004e16:	f7ff ff57 	bl	8004cc8 <__aeabi_d2uiz>
 8004e1a:	4604      	mov	r4, r0
 8004e1c:	f7ff fc02 	bl	8004624 <__aeabi_ui2d>
 8004e20:	4b07      	ldr	r3, [pc, #28]	; (8004e40 <__aeabi_d2ulz+0x38>)
 8004e22:	2200      	movs	r2, #0
 8004e24:	f7ff fc78 	bl	8004718 <__aeabi_dmul>
 8004e28:	4602      	mov	r2, r0
 8004e2a:	460b      	mov	r3, r1
 8004e2c:	4630      	mov	r0, r6
 8004e2e:	4639      	mov	r1, r7
 8004e30:	f7ff faba 	bl	80043a8 <__aeabi_dsub>
 8004e34:	f7ff ff48 	bl	8004cc8 <__aeabi_d2uiz>
 8004e38:	4621      	mov	r1, r4
 8004e3a:	bdd0      	pop	{r4, r6, r7, pc}
 8004e3c:	3df00000 	.word	0x3df00000
 8004e40:	41f00000 	.word	0x41f00000

08004e44 <__udivmoddi4>:
 8004e44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e48:	9d08      	ldr	r5, [sp, #32]
 8004e4a:	4604      	mov	r4, r0
 8004e4c:	468c      	mov	ip, r1
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	f040 8083 	bne.w	8004f5a <__udivmoddi4+0x116>
 8004e54:	428a      	cmp	r2, r1
 8004e56:	4617      	mov	r7, r2
 8004e58:	d947      	bls.n	8004eea <__udivmoddi4+0xa6>
 8004e5a:	fab2 f282 	clz	r2, r2
 8004e5e:	b142      	cbz	r2, 8004e72 <__udivmoddi4+0x2e>
 8004e60:	f1c2 0020 	rsb	r0, r2, #32
 8004e64:	fa24 f000 	lsr.w	r0, r4, r0
 8004e68:	4091      	lsls	r1, r2
 8004e6a:	4097      	lsls	r7, r2
 8004e6c:	ea40 0c01 	orr.w	ip, r0, r1
 8004e70:	4094      	lsls	r4, r2
 8004e72:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8004e76:	0c23      	lsrs	r3, r4, #16
 8004e78:	fbbc f6f8 	udiv	r6, ip, r8
 8004e7c:	fa1f fe87 	uxth.w	lr, r7
 8004e80:	fb08 c116 	mls	r1, r8, r6, ip
 8004e84:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8004e88:	fb06 f10e 	mul.w	r1, r6, lr
 8004e8c:	4299      	cmp	r1, r3
 8004e8e:	d909      	bls.n	8004ea4 <__udivmoddi4+0x60>
 8004e90:	18fb      	adds	r3, r7, r3
 8004e92:	f106 30ff 	add.w	r0, r6, #4294967295
 8004e96:	f080 8119 	bcs.w	80050cc <__udivmoddi4+0x288>
 8004e9a:	4299      	cmp	r1, r3
 8004e9c:	f240 8116 	bls.w	80050cc <__udivmoddi4+0x288>
 8004ea0:	3e02      	subs	r6, #2
 8004ea2:	443b      	add	r3, r7
 8004ea4:	1a5b      	subs	r3, r3, r1
 8004ea6:	b2a4      	uxth	r4, r4
 8004ea8:	fbb3 f0f8 	udiv	r0, r3, r8
 8004eac:	fb08 3310 	mls	r3, r8, r0, r3
 8004eb0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8004eb4:	fb00 fe0e 	mul.w	lr, r0, lr
 8004eb8:	45a6      	cmp	lr, r4
 8004eba:	d909      	bls.n	8004ed0 <__udivmoddi4+0x8c>
 8004ebc:	193c      	adds	r4, r7, r4
 8004ebe:	f100 33ff 	add.w	r3, r0, #4294967295
 8004ec2:	f080 8105 	bcs.w	80050d0 <__udivmoddi4+0x28c>
 8004ec6:	45a6      	cmp	lr, r4
 8004ec8:	f240 8102 	bls.w	80050d0 <__udivmoddi4+0x28c>
 8004ecc:	3802      	subs	r0, #2
 8004ece:	443c      	add	r4, r7
 8004ed0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8004ed4:	eba4 040e 	sub.w	r4, r4, lr
 8004ed8:	2600      	movs	r6, #0
 8004eda:	b11d      	cbz	r5, 8004ee4 <__udivmoddi4+0xa0>
 8004edc:	40d4      	lsrs	r4, r2
 8004ede:	2300      	movs	r3, #0
 8004ee0:	e9c5 4300 	strd	r4, r3, [r5]
 8004ee4:	4631      	mov	r1, r6
 8004ee6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004eea:	b902      	cbnz	r2, 8004eee <__udivmoddi4+0xaa>
 8004eec:	deff      	udf	#255	; 0xff
 8004eee:	fab2 f282 	clz	r2, r2
 8004ef2:	2a00      	cmp	r2, #0
 8004ef4:	d150      	bne.n	8004f98 <__udivmoddi4+0x154>
 8004ef6:	1bcb      	subs	r3, r1, r7
 8004ef8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8004efc:	fa1f f887 	uxth.w	r8, r7
 8004f00:	2601      	movs	r6, #1
 8004f02:	fbb3 fcfe 	udiv	ip, r3, lr
 8004f06:	0c21      	lsrs	r1, r4, #16
 8004f08:	fb0e 331c 	mls	r3, lr, ip, r3
 8004f0c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8004f10:	fb08 f30c 	mul.w	r3, r8, ip
 8004f14:	428b      	cmp	r3, r1
 8004f16:	d907      	bls.n	8004f28 <__udivmoddi4+0xe4>
 8004f18:	1879      	adds	r1, r7, r1
 8004f1a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8004f1e:	d202      	bcs.n	8004f26 <__udivmoddi4+0xe2>
 8004f20:	428b      	cmp	r3, r1
 8004f22:	f200 80e9 	bhi.w	80050f8 <__udivmoddi4+0x2b4>
 8004f26:	4684      	mov	ip, r0
 8004f28:	1ac9      	subs	r1, r1, r3
 8004f2a:	b2a3      	uxth	r3, r4
 8004f2c:	fbb1 f0fe 	udiv	r0, r1, lr
 8004f30:	fb0e 1110 	mls	r1, lr, r0, r1
 8004f34:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8004f38:	fb08 f800 	mul.w	r8, r8, r0
 8004f3c:	45a0      	cmp	r8, r4
 8004f3e:	d907      	bls.n	8004f50 <__udivmoddi4+0x10c>
 8004f40:	193c      	adds	r4, r7, r4
 8004f42:	f100 33ff 	add.w	r3, r0, #4294967295
 8004f46:	d202      	bcs.n	8004f4e <__udivmoddi4+0x10a>
 8004f48:	45a0      	cmp	r8, r4
 8004f4a:	f200 80d9 	bhi.w	8005100 <__udivmoddi4+0x2bc>
 8004f4e:	4618      	mov	r0, r3
 8004f50:	eba4 0408 	sub.w	r4, r4, r8
 8004f54:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8004f58:	e7bf      	b.n	8004eda <__udivmoddi4+0x96>
 8004f5a:	428b      	cmp	r3, r1
 8004f5c:	d909      	bls.n	8004f72 <__udivmoddi4+0x12e>
 8004f5e:	2d00      	cmp	r5, #0
 8004f60:	f000 80b1 	beq.w	80050c6 <__udivmoddi4+0x282>
 8004f64:	2600      	movs	r6, #0
 8004f66:	e9c5 0100 	strd	r0, r1, [r5]
 8004f6a:	4630      	mov	r0, r6
 8004f6c:	4631      	mov	r1, r6
 8004f6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f72:	fab3 f683 	clz	r6, r3
 8004f76:	2e00      	cmp	r6, #0
 8004f78:	d14a      	bne.n	8005010 <__udivmoddi4+0x1cc>
 8004f7a:	428b      	cmp	r3, r1
 8004f7c:	d302      	bcc.n	8004f84 <__udivmoddi4+0x140>
 8004f7e:	4282      	cmp	r2, r0
 8004f80:	f200 80b8 	bhi.w	80050f4 <__udivmoddi4+0x2b0>
 8004f84:	1a84      	subs	r4, r0, r2
 8004f86:	eb61 0103 	sbc.w	r1, r1, r3
 8004f8a:	2001      	movs	r0, #1
 8004f8c:	468c      	mov	ip, r1
 8004f8e:	2d00      	cmp	r5, #0
 8004f90:	d0a8      	beq.n	8004ee4 <__udivmoddi4+0xa0>
 8004f92:	e9c5 4c00 	strd	r4, ip, [r5]
 8004f96:	e7a5      	b.n	8004ee4 <__udivmoddi4+0xa0>
 8004f98:	f1c2 0320 	rsb	r3, r2, #32
 8004f9c:	fa20 f603 	lsr.w	r6, r0, r3
 8004fa0:	4097      	lsls	r7, r2
 8004fa2:	fa01 f002 	lsl.w	r0, r1, r2
 8004fa6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8004faa:	40d9      	lsrs	r1, r3
 8004fac:	4330      	orrs	r0, r6
 8004fae:	0c03      	lsrs	r3, r0, #16
 8004fb0:	fbb1 f6fe 	udiv	r6, r1, lr
 8004fb4:	fa1f f887 	uxth.w	r8, r7
 8004fb8:	fb0e 1116 	mls	r1, lr, r6, r1
 8004fbc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8004fc0:	fb06 f108 	mul.w	r1, r6, r8
 8004fc4:	4299      	cmp	r1, r3
 8004fc6:	fa04 f402 	lsl.w	r4, r4, r2
 8004fca:	d909      	bls.n	8004fe0 <__udivmoddi4+0x19c>
 8004fcc:	18fb      	adds	r3, r7, r3
 8004fce:	f106 3cff 	add.w	ip, r6, #4294967295
 8004fd2:	f080 808d 	bcs.w	80050f0 <__udivmoddi4+0x2ac>
 8004fd6:	4299      	cmp	r1, r3
 8004fd8:	f240 808a 	bls.w	80050f0 <__udivmoddi4+0x2ac>
 8004fdc:	3e02      	subs	r6, #2
 8004fde:	443b      	add	r3, r7
 8004fe0:	1a5b      	subs	r3, r3, r1
 8004fe2:	b281      	uxth	r1, r0
 8004fe4:	fbb3 f0fe 	udiv	r0, r3, lr
 8004fe8:	fb0e 3310 	mls	r3, lr, r0, r3
 8004fec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8004ff0:	fb00 f308 	mul.w	r3, r0, r8
 8004ff4:	428b      	cmp	r3, r1
 8004ff6:	d907      	bls.n	8005008 <__udivmoddi4+0x1c4>
 8004ff8:	1879      	adds	r1, r7, r1
 8004ffa:	f100 3cff 	add.w	ip, r0, #4294967295
 8004ffe:	d273      	bcs.n	80050e8 <__udivmoddi4+0x2a4>
 8005000:	428b      	cmp	r3, r1
 8005002:	d971      	bls.n	80050e8 <__udivmoddi4+0x2a4>
 8005004:	3802      	subs	r0, #2
 8005006:	4439      	add	r1, r7
 8005008:	1acb      	subs	r3, r1, r3
 800500a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800500e:	e778      	b.n	8004f02 <__udivmoddi4+0xbe>
 8005010:	f1c6 0c20 	rsb	ip, r6, #32
 8005014:	fa03 f406 	lsl.w	r4, r3, r6
 8005018:	fa22 f30c 	lsr.w	r3, r2, ip
 800501c:	431c      	orrs	r4, r3
 800501e:	fa20 f70c 	lsr.w	r7, r0, ip
 8005022:	fa01 f306 	lsl.w	r3, r1, r6
 8005026:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800502a:	fa21 f10c 	lsr.w	r1, r1, ip
 800502e:	431f      	orrs	r7, r3
 8005030:	0c3b      	lsrs	r3, r7, #16
 8005032:	fbb1 f9fe 	udiv	r9, r1, lr
 8005036:	fa1f f884 	uxth.w	r8, r4
 800503a:	fb0e 1119 	mls	r1, lr, r9, r1
 800503e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8005042:	fb09 fa08 	mul.w	sl, r9, r8
 8005046:	458a      	cmp	sl, r1
 8005048:	fa02 f206 	lsl.w	r2, r2, r6
 800504c:	fa00 f306 	lsl.w	r3, r0, r6
 8005050:	d908      	bls.n	8005064 <__udivmoddi4+0x220>
 8005052:	1861      	adds	r1, r4, r1
 8005054:	f109 30ff 	add.w	r0, r9, #4294967295
 8005058:	d248      	bcs.n	80050ec <__udivmoddi4+0x2a8>
 800505a:	458a      	cmp	sl, r1
 800505c:	d946      	bls.n	80050ec <__udivmoddi4+0x2a8>
 800505e:	f1a9 0902 	sub.w	r9, r9, #2
 8005062:	4421      	add	r1, r4
 8005064:	eba1 010a 	sub.w	r1, r1, sl
 8005068:	b2bf      	uxth	r7, r7
 800506a:	fbb1 f0fe 	udiv	r0, r1, lr
 800506e:	fb0e 1110 	mls	r1, lr, r0, r1
 8005072:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8005076:	fb00 f808 	mul.w	r8, r0, r8
 800507a:	45b8      	cmp	r8, r7
 800507c:	d907      	bls.n	800508e <__udivmoddi4+0x24a>
 800507e:	19e7      	adds	r7, r4, r7
 8005080:	f100 31ff 	add.w	r1, r0, #4294967295
 8005084:	d22e      	bcs.n	80050e4 <__udivmoddi4+0x2a0>
 8005086:	45b8      	cmp	r8, r7
 8005088:	d92c      	bls.n	80050e4 <__udivmoddi4+0x2a0>
 800508a:	3802      	subs	r0, #2
 800508c:	4427      	add	r7, r4
 800508e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8005092:	eba7 0708 	sub.w	r7, r7, r8
 8005096:	fba0 8902 	umull	r8, r9, r0, r2
 800509a:	454f      	cmp	r7, r9
 800509c:	46c6      	mov	lr, r8
 800509e:	4649      	mov	r1, r9
 80050a0:	d31a      	bcc.n	80050d8 <__udivmoddi4+0x294>
 80050a2:	d017      	beq.n	80050d4 <__udivmoddi4+0x290>
 80050a4:	b15d      	cbz	r5, 80050be <__udivmoddi4+0x27a>
 80050a6:	ebb3 020e 	subs.w	r2, r3, lr
 80050aa:	eb67 0701 	sbc.w	r7, r7, r1
 80050ae:	fa07 fc0c 	lsl.w	ip, r7, ip
 80050b2:	40f2      	lsrs	r2, r6
 80050b4:	ea4c 0202 	orr.w	r2, ip, r2
 80050b8:	40f7      	lsrs	r7, r6
 80050ba:	e9c5 2700 	strd	r2, r7, [r5]
 80050be:	2600      	movs	r6, #0
 80050c0:	4631      	mov	r1, r6
 80050c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050c6:	462e      	mov	r6, r5
 80050c8:	4628      	mov	r0, r5
 80050ca:	e70b      	b.n	8004ee4 <__udivmoddi4+0xa0>
 80050cc:	4606      	mov	r6, r0
 80050ce:	e6e9      	b.n	8004ea4 <__udivmoddi4+0x60>
 80050d0:	4618      	mov	r0, r3
 80050d2:	e6fd      	b.n	8004ed0 <__udivmoddi4+0x8c>
 80050d4:	4543      	cmp	r3, r8
 80050d6:	d2e5      	bcs.n	80050a4 <__udivmoddi4+0x260>
 80050d8:	ebb8 0e02 	subs.w	lr, r8, r2
 80050dc:	eb69 0104 	sbc.w	r1, r9, r4
 80050e0:	3801      	subs	r0, #1
 80050e2:	e7df      	b.n	80050a4 <__udivmoddi4+0x260>
 80050e4:	4608      	mov	r0, r1
 80050e6:	e7d2      	b.n	800508e <__udivmoddi4+0x24a>
 80050e8:	4660      	mov	r0, ip
 80050ea:	e78d      	b.n	8005008 <__udivmoddi4+0x1c4>
 80050ec:	4681      	mov	r9, r0
 80050ee:	e7b9      	b.n	8005064 <__udivmoddi4+0x220>
 80050f0:	4666      	mov	r6, ip
 80050f2:	e775      	b.n	8004fe0 <__udivmoddi4+0x19c>
 80050f4:	4630      	mov	r0, r6
 80050f6:	e74a      	b.n	8004f8e <__udivmoddi4+0x14a>
 80050f8:	f1ac 0c02 	sub.w	ip, ip, #2
 80050fc:	4439      	add	r1, r7
 80050fe:	e713      	b.n	8004f28 <__udivmoddi4+0xe4>
 8005100:	3802      	subs	r0, #2
 8005102:	443c      	add	r4, r7
 8005104:	e724      	b.n	8004f50 <__udivmoddi4+0x10c>
 8005106:	bf00      	nop

08005108 <__aeabi_idiv0>:
 8005108:	4770      	bx	lr
 800510a:	bf00      	nop

0800510c <HTS221_GetCapabilities>:
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Humidity    = 1;
  Capabilities->Pressure    = 0;
  Capabilities->Temperature = 1;
 800510c:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8005110:	600b      	str	r3, [r1, #0]
  Capabilities->LowPower    = 0;
  Capabilities->HumMaxOdr   = 12.5f;
 8005112:	4b03      	ldr	r3, [pc, #12]	; (8005120 <HTS221_GetCapabilities+0x14>)
 8005114:	604b      	str	r3, [r1, #4]
  Capabilities->TempMaxOdr  = 12.5f;
 8005116:	608b      	str	r3, [r1, #8]
  Capabilities->PressMaxOdr = 0.0f;
 8005118:	2300      	movs	r3, #0
 800511a:	60cb      	str	r3, [r1, #12]
  return HTS221_OK;
}
 800511c:	2000      	movs	r0, #0
 800511e:	4770      	bx	lr
 8005120:	41480000 	.word	0x41480000

08005124 <HTS221_HUM_Enable>:
 * @brief  Enable the HTS221 humidity sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_HUM_Enable(HTS221_Object_t *pObj)
{
 8005124:	b510      	push	{r4, lr}
  /* Check if the component is already enabled */
  if (pObj->hum_is_enabled == 1U)
 8005126:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
 800512a:	2b01      	cmp	r3, #1
{
 800512c:	4604      	mov	r4, r0
  if (pObj->hum_is_enabled == 1U)
 800512e:	d005      	beq.n	800513c <HTS221_HUM_Enable+0x18>
    return HTS221_OK;
  }

  /* Check if the HTS221 temperature sensor is already enabled. */
  /* If yes, skip the enable function, if not call enable function */
  if (pObj->temp_is_enabled == 0U)
 8005130:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
 8005134:	b123      	cbz	r3, 8005140 <HTS221_HUM_Enable+0x1c>
    {
      return HTS221_ERROR;
    }
  }

  pObj->hum_is_enabled = 1;
 8005136:	2301      	movs	r3, #1
 8005138:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
    return HTS221_OK;
 800513c:	2000      	movs	r0, #0
 800513e:	e007      	b.n	8005150 <HTS221_HUM_Enable+0x2c>
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 8005140:	2101      	movs	r1, #1
 8005142:	301c      	adds	r0, #28
 8005144:	f000 fa28 	bl	8005598 <hts221_power_on_set>
 8005148:	2800      	cmp	r0, #0
 800514a:	d0f4      	beq.n	8005136 <HTS221_HUM_Enable+0x12>
      return HTS221_ERROR;
 800514c:	f04f 30ff 	mov.w	r0, #4294967295

  return HTS221_OK;
}
 8005150:	bd10      	pop	{r4, pc}

08005152 <HTS221_TEMP_Enable>:
 * @brief  Enable the HTS221 temperature sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_TEMP_Enable(HTS221_Object_t *pObj)
{
 8005152:	b510      	push	{r4, lr}
  /* Check if the component is already enabled */
  if (pObj->temp_is_enabled == 1U)
 8005154:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
 8005158:	2b01      	cmp	r3, #1
{
 800515a:	4604      	mov	r4, r0
  if (pObj->temp_is_enabled == 1U)
 800515c:	d005      	beq.n	800516a <HTS221_TEMP_Enable+0x18>
    return HTS221_OK;
  }

  /* Check if the HTS221 humidity sensor is already enabled. */
  /* If yes, skip the enable function, if not call enable function */
  if (pObj->hum_is_enabled == 0U)
 800515e:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
 8005162:	b123      	cbz	r3, 800516e <HTS221_TEMP_Enable+0x1c>
    {
      return HTS221_ERROR;
    }
  }

  pObj->temp_is_enabled = 1;
 8005164:	2301      	movs	r3, #1
 8005166:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
    return HTS221_OK;
 800516a:	2000      	movs	r0, #0
 800516c:	e007      	b.n	800517e <HTS221_TEMP_Enable+0x2c>
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 800516e:	2101      	movs	r1, #1
 8005170:	301c      	adds	r0, #28
 8005172:	f000 fa11 	bl	8005598 <hts221_power_on_set>
 8005176:	2800      	cmp	r0, #0
 8005178:	d0f4      	beq.n	8005164 <HTS221_TEMP_Enable+0x12>
      return HTS221_ERROR;
 800517a:	f04f 30ff 	mov.w	r0, #4294967295

  return HTS221_OK;
}
 800517e:	bd10      	pop	{r4, pc}

08005180 <HTS221_SetOutputDataRate>:
static int32_t HTS221_SetOutputDataRate(HTS221_Object_t *pObj, float Odr)
{
  hts221_odr_t new_odr;

  new_odr = (Odr <= 1.0f) ? HTS221_ODR_1Hz
            : (Odr <= 7.0f) ? HTS221_ODR_7Hz
 8005180:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8005184:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8005188:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
{
 800518c:	b508      	push	{r3, lr}
            : (Odr <= 7.0f) ? HTS221_ODR_7Hz
 800518e:	d910      	bls.n	80051b2 <HTS221_SetOutputDataRate+0x32>
 8005190:	eef1 7a0c 	vmov.f32	s15, #28	; 0x40e00000  7.0
 8005194:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8005198:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800519c:	bf94      	ite	ls
 800519e:	2102      	movls	r1, #2
 80051a0:	2103      	movhi	r1, #3
            :                 HTS221_ODR_12Hz5;

  if (hts221_data_rate_set(&(pObj->Ctx), new_odr) != HTS221_OK)
 80051a2:	301c      	adds	r0, #28
 80051a4:	f000 f988 	bl	80054b8 <hts221_data_rate_set>
 80051a8:	3800      	subs	r0, #0
 80051aa:	bf18      	it	ne
 80051ac:	2001      	movne	r0, #1
  {
    return HTS221_ERROR;
  }

  return HTS221_OK;
}
 80051ae:	4240      	negs	r0, r0
 80051b0:	bd08      	pop	{r3, pc}
            : (Odr <= 7.0f) ? HTS221_ODR_7Hz
 80051b2:	2101      	movs	r1, #1
 80051b4:	e7f5      	b.n	80051a2 <HTS221_SetOutputDataRate+0x22>

080051b6 <HTS221_Init>:
{
 80051b6:	b538      	push	{r3, r4, r5, lr}
  if (pObj->is_initialized == 0U)
 80051b8:	f890 1028 	ldrb.w	r1, [r0, #40]	; 0x28
{
 80051bc:	4604      	mov	r4, r0
  if (pObj->is_initialized == 0U)
 80051be:	b121      	cbz	r1, 80051ca <HTS221_Init+0x14>
  pObj->is_initialized = 1;
 80051c0:	2301      	movs	r3, #1
 80051c2:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
  return HTS221_OK;
 80051c6:	2000      	movs	r0, #0
}
 80051c8:	bd38      	pop	{r3, r4, r5, pc}
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t HTS221_Initialize(HTS221_Object_t *pObj)
{
  /* Power off the component. */
  if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_DISABLE) != HTS221_OK)
 80051ca:	f100 051c 	add.w	r5, r0, #28
 80051ce:	4628      	mov	r0, r5
 80051d0:	f000 f9e2 	bl	8005598 <hts221_power_on_set>
 80051d4:	b110      	cbz	r0, 80051dc <HTS221_Init+0x26>
      return HTS221_ERROR;
 80051d6:	f04f 30ff 	mov.w	r0, #4294967295
 80051da:	e7f5      	b.n	80051c8 <HTS221_Init+0x12>
  {
    return HTS221_ERROR;
  }

  /* Enable BDU */
  if (hts221_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 80051dc:	2101      	movs	r1, #1
 80051de:	4628      	mov	r0, r5
 80051e0:	f000 f99e 	bl	8005520 <hts221_block_data_update_set>
 80051e4:	2800      	cmp	r0, #0
 80051e6:	d1f6      	bne.n	80051d6 <HTS221_Init+0x20>
  {
    return HTS221_ERROR;
  }

  /* Set default ODR */
  if (HTS221_SetOutputDataRate(pObj, 1.0f) != HTS221_OK)
 80051e8:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80051ec:	4620      	mov	r0, r4
 80051ee:	f7ff ffc7 	bl	8005180 <HTS221_SetOutputDataRate>
 80051f2:	2800      	cmp	r0, #0
 80051f4:	d0e4      	beq.n	80051c0 <HTS221_Init+0xa>
 80051f6:	e7ee      	b.n	80051d6 <HTS221_Init+0x20>

080051f8 <HTS221_HUM_SetOutputDataRate>:
  return HTS221_SetOutputDataRate(pObj, Odr);
 80051f8:	f7ff bfc2 	b.w	8005180 <HTS221_SetOutputDataRate>

080051fc <HTS221_ReadID>:
{
 80051fc:	b508      	push	{r3, lr}
  if (hts221_device_id_get(&(pObj->Ctx), Id) != HTS221_OK)
 80051fe:	301c      	adds	r0, #28
 8005200:	f000 f9c5 	bl	800558e <hts221_device_id_get>
 8005204:	3800      	subs	r0, #0
 8005206:	bf18      	it	ne
 8005208:	2001      	movne	r0, #1
}
 800520a:	4240      	negs	r0, r0
 800520c:	bd08      	pop	{r3, pc}
	...

08005210 <HTS221_GetOutputDataRate>:
{
 8005210:	b513      	push	{r0, r1, r4, lr}
 8005212:	460c      	mov	r4, r1
  if (hts221_data_rate_get(&(pObj->Ctx), &odr_low_level) != HTS221_OK)
 8005214:	301c      	adds	r0, #28
 8005216:	f10d 0107 	add.w	r1, sp, #7
 800521a:	f000 f964 	bl	80054e6 <hts221_data_rate_get>
 800521e:	b990      	cbnz	r0, 8005246 <HTS221_GetOutputDataRate+0x36>
  switch (odr_low_level)
 8005220:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8005224:	2b03      	cmp	r3, #3
 8005226:	d80e      	bhi.n	8005246 <HTS221_GetOutputDataRate+0x36>
 8005228:	e8df f003 	tbb	[pc, r3]
 800522c:	0b090602 	.word	0x0b090602
      *Odr = 0.0f;
 8005230:	2300      	movs	r3, #0
      *Odr = 12.5f;
 8005232:	6023      	str	r3, [r4, #0]
}
 8005234:	b002      	add	sp, #8
 8005236:	bd10      	pop	{r4, pc}
      *Odr = 1.0f;
 8005238:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800523c:	e7f9      	b.n	8005232 <HTS221_GetOutputDataRate+0x22>
      *Odr = 7.0f;
 800523e:	4b03      	ldr	r3, [pc, #12]	; (800524c <HTS221_GetOutputDataRate+0x3c>)
 8005240:	e7f7      	b.n	8005232 <HTS221_GetOutputDataRate+0x22>
      *Odr = 12.5f;
 8005242:	4b03      	ldr	r3, [pc, #12]	; (8005250 <HTS221_GetOutputDataRate+0x40>)
 8005244:	e7f5      	b.n	8005232 <HTS221_GetOutputDataRate+0x22>
  switch (odr_low_level)
 8005246:	f04f 30ff 	mov.w	r0, #4294967295
 800524a:	e7f3      	b.n	8005234 <HTS221_GetOutputDataRate+0x24>
 800524c:	40e00000 	.word	0x40e00000
 8005250:	41480000 	.word	0x41480000

08005254 <HTS221_HUM_GetOutputDataRate>:
  return HTS221_GetOutputDataRate(pObj, Odr);
 8005254:	f7ff bfdc 	b.w	8005210 <HTS221_GetOutputDataRate>

08005258 <HTS221_HUM_GetHumidity>:
{
 8005258:	b530      	push	{r4, r5, lr}
  if (hts221_hum_adc_point_0_get(&(pObj->Ctx), &lin_hum.x0) != HTS221_OK)
 800525a:	f100 041c 	add.w	r4, r0, #28
{
 800525e:	b087      	sub	sp, #28
 8005260:	460d      	mov	r5, r1
  if (hts221_hum_adc_point_0_get(&(pObj->Ctx), &lin_hum.x0) != HTS221_OK)
 8005262:	4620      	mov	r0, r4
 8005264:	a902      	add	r1, sp, #8
 8005266:	f000 fa12 	bl	800568e <hts221_hum_adc_point_0_get>
 800526a:	b118      	cbz	r0, 8005274 <HTS221_HUM_GetHumidity+0x1c>
    return HTS221_ERROR;
 800526c:	f04f 30ff 	mov.w	r0, #4294967295
}
 8005270:	b007      	add	sp, #28
 8005272:	bd30      	pop	{r4, r5, pc}
  if (hts221_hum_rh_point_0_get(&(pObj->Ctx), &lin_hum.y0) != HTS221_OK)
 8005274:	a903      	add	r1, sp, #12
 8005276:	4620      	mov	r0, r4
 8005278:	f000 f9a5 	bl	80055c6 <hts221_hum_rh_point_0_get>
 800527c:	2800      	cmp	r0, #0
 800527e:	d1f5      	bne.n	800526c <HTS221_HUM_GetHumidity+0x14>
  if (hts221_hum_adc_point_1_get(&(pObj->Ctx), &lin_hum.x1) != HTS221_OK)
 8005280:	a904      	add	r1, sp, #16
 8005282:	4620      	mov	r0, r4
 8005284:	f000 fa19 	bl	80056ba <hts221_hum_adc_point_1_get>
 8005288:	2800      	cmp	r0, #0
 800528a:	d1ef      	bne.n	800526c <HTS221_HUM_GetHumidity+0x14>
  if (hts221_hum_rh_point_1_get(&(pObj->Ctx), &lin_hum.y1) != HTS221_OK)
 800528c:	a905      	add	r1, sp, #20
 800528e:	4620      	mov	r0, r4
 8005290:	f000 f9ab 	bl	80055ea <hts221_hum_rh_point_1_get>
 8005294:	2800      	cmp	r0, #0
 8005296:	d1e9      	bne.n	800526c <HTS221_HUM_GetHumidity+0x14>
  (void)memset(&data_raw_humidity.i16bit, 0x00, sizeof(int16_t));
 8005298:	f8ad 0004 	strh.w	r0, [sp, #4]
  if (hts221_humidity_raw_get(&(pObj->Ctx), &data_raw_humidity.i16bit) != HTS221_OK)
 800529c:	a901      	add	r1, sp, #4
 800529e:	4620      	mov	r0, r4
 80052a0:	f000 f955 	bl	800554e <hts221_humidity_raw_get>
 80052a4:	2800      	cmp	r0, #0
 80052a6:	d1e1      	bne.n	800526c <HTS221_HUM_GetHumidity+0x14>
 * @param  Coeff the coefficient
 * @retval Calculation result
 */
static float Linear_Interpolation(lin_t *Lin, float Coeff)
{
  return (((Lin->y1 - Lin->y0) * Coeff) + ((Lin->x1 * Lin->y0) - (Lin->x0 * Lin->y1))) / (Lin->x1 - Lin->x0);
 80052a8:	ed9d 6a03 	vldr	s12, [sp, #12]
 80052ac:	eddd 7a05 	vldr	s15, [sp, #20]
 80052b0:	eddd 6a02 	vldr	s13, [sp, #8]
 80052b4:	ed9d 7a04 	vldr	s14, [sp, #16]
  *Value = Linear_Interpolation(&lin_hum, (float)data_raw_humidity.i16bit);
 80052b8:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
  return (((Lin->y1 - Lin->y0) * Coeff) + ((Lin->x1 * Lin->y0) - (Lin->x0 * Lin->y1))) / (Lin->x1 - Lin->x0);
 80052bc:	ee77 5ac6 	vsub.f32	s11, s15, s12
 80052c0:	ee66 7ae7 	vnmul.f32	s15, s13, s15
 80052c4:	ee77 6a66 	vsub.f32	s13, s14, s13
 80052c8:	eee6 7a07 	vfma.f32	s15, s12, s14
  *Value = Linear_Interpolation(&lin_hum, (float)data_raw_humidity.i16bit);
 80052cc:	ee06 3a10 	vmov	s12, r3
 80052d0:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
  return (((Lin->y1 - Lin->y0) * Coeff) + ((Lin->x1 * Lin->y0) - (Lin->x0 * Lin->y1))) / (Lin->x1 - Lin->x0);
 80052d4:	eee6 7a25 	vfma.f32	s15, s12, s11
 80052d8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
  if (*Value < 0.0f)
 80052dc:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 80052e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052e4:	d409      	bmi.n	80052fa <HTS221_HUM_GetHumidity+0xa2>
  if (*Value > 100.0f)
 80052e6:	eddf 7a08 	vldr	s15, [pc, #32]	; 8005308 <HTS221_HUM_GetHumidity+0xb0>
 80052ea:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80052ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052f2:	dc05      	bgt.n	8005300 <HTS221_HUM_GetHumidity+0xa8>
 80052f4:	ed85 7a00 	vstr	s14, [r5]
 80052f8:	e7ba      	b.n	8005270 <HTS221_HUM_GetHumidity+0x18>
    *Value = 0.0f;
 80052fa:	ed9f 7a04 	vldr	s14, [pc, #16]	; 800530c <HTS221_HUM_GetHumidity+0xb4>
 80052fe:	e7f9      	b.n	80052f4 <HTS221_HUM_GetHumidity+0x9c>
    *Value = 100.0f;
 8005300:	edc5 7a00 	vstr	s15, [r5]
 8005304:	e7b4      	b.n	8005270 <HTS221_HUM_GetHumidity+0x18>
 8005306:	bf00      	nop
 8005308:	42c80000 	.word	0x42c80000
 800530c:	00000000 	.word	0x00000000

08005310 <ReadRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8005310:	b430      	push	{r4, r5}
 8005312:	4604      	mov	r4, r0
 8005314:	6945      	ldr	r5, [r0, #20]
  HTS221_Object_t *pObj = (HTS221_Object_t *)Handle;

  if (pObj->IO.BusType == (uint32_t)HTS221_I2C_BUS) /* I2C */
 8005316:	68a4      	ldr	r4, [r4, #8]
 8005318:	7b00      	ldrb	r0, [r0, #12]
 800531a:	b924      	cbnz	r4, 8005326 <ReadRegWrap+0x16>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 800531c:	f041 0180 	orr.w	r1, r1, #128	; 0x80
  }
  else /* SPI 3-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8005320:	46ac      	mov	ip, r5
  }
}
 8005322:	bc30      	pop	{r4, r5}
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8005324:	4760      	bx	ip
 8005326:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 800532a:	e7f9      	b.n	8005320 <ReadRegWrap+0x10>

0800532c <WriteRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800532c:	b430      	push	{r4, r5}
 800532e:	4604      	mov	r4, r0
 8005330:	6905      	ldr	r5, [r0, #16]
  HTS221_Object_t *pObj = (HTS221_Object_t *)Handle;

  if (pObj->IO.BusType == (uint32_t)HTS221_I2C_BUS) /* I2C */
 8005332:	68a4      	ldr	r4, [r4, #8]
 8005334:	7b00      	ldrb	r0, [r0, #12]
 8005336:	b924      	cbnz	r4, 8005342 <WriteRegWrap+0x16>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8005338:	f041 0180 	orr.w	r1, r1, #128	; 0x80
  }
  else /* SPI 3-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 800533c:	46ac      	mov	ip, r5
  }
}
 800533e:	bc30      	pop	{r4, r5}
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8005340:	4760      	bx	ip
 8005342:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8005346:	e7f9      	b.n	800533c <WriteRegWrap+0x10>

08005348 <HTS221_HUM_Disable>:
{
 8005348:	b510      	push	{r4, lr}
 800534a:	4604      	mov	r4, r0
  if (pObj->hum_is_enabled == 0U)
 800534c:	f890 0029 	ldrb.w	r0, [r0, #41]	; 0x29
 8005350:	b130      	cbz	r0, 8005360 <HTS221_HUM_Disable+0x18>
  if (pObj->temp_is_enabled == 0U)
 8005352:	f894 102a 	ldrb.w	r1, [r4, #42]	; 0x2a
 8005356:	b121      	cbz	r1, 8005362 <HTS221_HUM_Disable+0x1a>
  pObj->hum_is_enabled = 0;
 8005358:	2300      	movs	r3, #0
 800535a:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
  return HTS221_OK;
 800535e:	4618      	mov	r0, r3
}
 8005360:	bd10      	pop	{r4, pc}
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_DISABLE) != HTS221_OK)
 8005362:	f104 001c 	add.w	r0, r4, #28
 8005366:	f000 f917 	bl	8005598 <hts221_power_on_set>
 800536a:	2800      	cmp	r0, #0
 800536c:	d0f4      	beq.n	8005358 <HTS221_HUM_Disable+0x10>
      return HTS221_ERROR;
 800536e:	f04f 30ff 	mov.w	r0, #4294967295
 8005372:	e7f5      	b.n	8005360 <HTS221_HUM_Disable+0x18>

08005374 <HTS221_TEMP_Disable>:
{
 8005374:	b510      	push	{r4, lr}
 8005376:	4604      	mov	r4, r0
  if (pObj->temp_is_enabled == 0U)
 8005378:	f890 002a 	ldrb.w	r0, [r0, #42]	; 0x2a
 800537c:	b130      	cbz	r0, 800538c <HTS221_TEMP_Disable+0x18>
  if (pObj->hum_is_enabled == 0U)
 800537e:	f894 1029 	ldrb.w	r1, [r4, #41]	; 0x29
 8005382:	b121      	cbz	r1, 800538e <HTS221_TEMP_Disable+0x1a>
  pObj->temp_is_enabled = 0;
 8005384:	2300      	movs	r3, #0
 8005386:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
  return HTS221_OK;
 800538a:	4618      	mov	r0, r3
}
 800538c:	bd10      	pop	{r4, pc}
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_DISABLE) != HTS221_OK)
 800538e:	f104 001c 	add.w	r0, r4, #28
 8005392:	f000 f901 	bl	8005598 <hts221_power_on_set>
 8005396:	2800      	cmp	r0, #0
 8005398:	d0f4      	beq.n	8005384 <HTS221_TEMP_Disable+0x10>
      return HTS221_ERROR;
 800539a:	f04f 30ff 	mov.w	r0, #4294967295
 800539e:	e7f5      	b.n	800538c <HTS221_TEMP_Disable+0x18>

080053a0 <HTS221_DeInit>:
{
 80053a0:	b510      	push	{r4, lr}
  if (pObj->is_initialized == 1U)
 80053a2:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
 80053a6:	2b01      	cmp	r3, #1
{
 80053a8:	4604      	mov	r4, r0
  if (pObj->is_initialized == 1U)
 80053aa:	d003      	beq.n	80053b4 <HTS221_DeInit+0x14>
  pObj->is_initialized = 0;
 80053ac:	2000      	movs	r0, #0
 80053ae:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
}
 80053b2:	bd10      	pop	{r4, pc}
    if (HTS221_HUM_Disable(pObj) != HTS221_OK)
 80053b4:	f7ff ffc8 	bl	8005348 <HTS221_HUM_Disable>
 80053b8:	b110      	cbz	r0, 80053c0 <HTS221_DeInit+0x20>
      return HTS221_ERROR;
 80053ba:	f04f 30ff 	mov.w	r0, #4294967295
 80053be:	e7f8      	b.n	80053b2 <HTS221_DeInit+0x12>
    if (HTS221_TEMP_Disable(pObj) != HTS221_OK)
 80053c0:	4620      	mov	r0, r4
 80053c2:	f7ff ffd7 	bl	8005374 <HTS221_TEMP_Disable>
 80053c6:	2800      	cmp	r0, #0
 80053c8:	d0f0      	beq.n	80053ac <HTS221_DeInit+0xc>
 80053ca:	e7f6      	b.n	80053ba <HTS221_DeInit+0x1a>

080053cc <HTS221_TEMP_SetOutputDataRate>:
 80053cc:	f7ff bed8 	b.w	8005180 <HTS221_SetOutputDataRate>

080053d0 <HTS221_TEMP_GetOutputDataRate>:
 80053d0:	f7ff bf1e 	b.w	8005210 <HTS221_GetOutputDataRate>

080053d4 <HTS221_TEMP_GetTemperature>:
{
 80053d4:	b530      	push	{r4, r5, lr}
  if (hts221_temp_adc_point_0_get(&(pObj->Ctx), &lin_temp.x0) != HTS221_OK)
 80053d6:	f100 041c 	add.w	r4, r0, #28
{
 80053da:	b087      	sub	sp, #28
 80053dc:	460d      	mov	r5, r1
  if (hts221_temp_adc_point_0_get(&(pObj->Ctx), &lin_temp.x0) != HTS221_OK)
 80053de:	4620      	mov	r0, r4
 80053e0:	a902      	add	r1, sp, #8
 80053e2:	f000 f980 	bl	80056e6 <hts221_temp_adc_point_0_get>
 80053e6:	b118      	cbz	r0, 80053f0 <HTS221_TEMP_GetTemperature+0x1c>
    return HTS221_ERROR;
 80053e8:	f04f 30ff 	mov.w	r0, #4294967295
}
 80053ec:	b007      	add	sp, #28
 80053ee:	bd30      	pop	{r4, r5, pc}
  if (hts221_temp_deg_point_0_get(&(pObj->Ctx), &lin_temp.y0) != HTS221_OK)
 80053f0:	a903      	add	r1, sp, #12
 80053f2:	4620      	mov	r0, r4
 80053f4:	f000 f90b 	bl	800560e <hts221_temp_deg_point_0_get>
 80053f8:	2800      	cmp	r0, #0
 80053fa:	d1f5      	bne.n	80053e8 <HTS221_TEMP_GetTemperature+0x14>
  if (hts221_temp_adc_point_1_get(&(pObj->Ctx), &lin_temp.x1) != HTS221_OK)
 80053fc:	a904      	add	r1, sp, #16
 80053fe:	4620      	mov	r0, r4
 8005400:	f000 f987 	bl	8005712 <hts221_temp_adc_point_1_get>
 8005404:	2800      	cmp	r0, #0
 8005406:	d1ef      	bne.n	80053e8 <HTS221_TEMP_GetTemperature+0x14>
  if (hts221_temp_deg_point_1_get(&(pObj->Ctx), &lin_temp.y1) != HTS221_OK)
 8005408:	a905      	add	r1, sp, #20
 800540a:	4620      	mov	r0, r4
 800540c:	f000 f91f 	bl	800564e <hts221_temp_deg_point_1_get>
 8005410:	2800      	cmp	r0, #0
 8005412:	d1e9      	bne.n	80053e8 <HTS221_TEMP_GetTemperature+0x14>
  (void)memset(&data_raw_temperature.i16bit, 0x00, sizeof(int16_t));
 8005414:	f8ad 0004 	strh.w	r0, [sp, #4]
  if (hts221_temperature_raw_get(&(pObj->Ctx), &data_raw_temperature.i16bit) != HTS221_OK)
 8005418:	a901      	add	r1, sp, #4
 800541a:	4620      	mov	r0, r4
 800541c:	f000 f8a7 	bl	800556e <hts221_temperature_raw_get>
 8005420:	2800      	cmp	r0, #0
 8005422:	d1e1      	bne.n	80053e8 <HTS221_TEMP_GetTemperature+0x14>
  return (((Lin->y1 - Lin->y0) * Coeff) + ((Lin->x1 * Lin->y0) - (Lin->x0 * Lin->y1))) / (Lin->x1 - Lin->x0);
 8005424:	eddd 6a03 	vldr	s13, [sp, #12]
 8005428:	eddd 7a05 	vldr	s15, [sp, #20]
 800542c:	ed9d 6a02 	vldr	s12, [sp, #8]
 8005430:	ed9d 7a04 	vldr	s14, [sp, #16]
  *Value = Linear_Interpolation(&lin_temp, (float)data_raw_temperature.i16bit);
 8005434:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
  return (((Lin->y1 - Lin->y0) * Coeff) + ((Lin->x1 * Lin->y0) - (Lin->x0 * Lin->y1))) / (Lin->x1 - Lin->x0);
 8005438:	ee77 5ae6 	vsub.f32	s11, s15, s13
 800543c:	ee66 7a67 	vnmul.f32	s15, s12, s15
 8005440:	eee6 7a87 	vfma.f32	s15, s13, s14
  *Value = Linear_Interpolation(&lin_temp, (float)data_raw_temperature.i16bit);
 8005444:	ee06 3a90 	vmov	s13, r3
 8005448:	eef8 6ae6 	vcvt.f32.s32	s13, s13
  return (((Lin->y1 - Lin->y0) * Coeff) + ((Lin->x1 * Lin->y0) - (Lin->x0 * Lin->y1))) / (Lin->x1 - Lin->x0);
 800544c:	ee37 7a46 	vsub.f32	s14, s14, s12
 8005450:	eee6 7aa5 	vfma.f32	s15, s13, s11
 8005454:	eec7 6a87 	vdiv.f32	s13, s15, s14
  *Value = Linear_Interpolation(&lin_temp, (float)data_raw_temperature.i16bit);
 8005458:	edc5 6a00 	vstr	s13, [r5]
  return HTS221_OK;
 800545c:	e7c6      	b.n	80053ec <HTS221_TEMP_GetTemperature+0x18>
	...

08005460 <HTS221_RegisterBusIO>:
  if (pObj == NULL)
 8005460:	b1a0      	cbz	r0, 800548c <HTS221_RegisterBusIO+0x2c>
    pObj->IO.DeInit    = pIO->DeInit;
 8005462:	684a      	ldr	r2, [r1, #4]
    pObj->IO.Init      = pIO->Init;
 8005464:	680b      	ldr	r3, [r1, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8005466:	6042      	str	r2, [r0, #4]
    pObj->IO.BusType   = pIO->BusType;
 8005468:	688a      	ldr	r2, [r1, #8]
    pObj->IO.Init      = pIO->Init;
 800546a:	6003      	str	r3, [r0, #0]
    pObj->IO.BusType   = pIO->BusType;
 800546c:	6082      	str	r2, [r0, #8]
    pObj->IO.Address   = pIO->Address;
 800546e:	7b0a      	ldrb	r2, [r1, #12]
 8005470:	7302      	strb	r2, [r0, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8005472:	690a      	ldr	r2, [r1, #16]
 8005474:	6102      	str	r2, [r0, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8005476:	694a      	ldr	r2, [r1, #20]
 8005478:	6142      	str	r2, [r0, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 800547a:	698a      	ldr	r2, [r1, #24]
 800547c:	6182      	str	r2, [r0, #24]
    pObj->Ctx.read_reg  = ReadRegWrap;
 800547e:	4a05      	ldr	r2, [pc, #20]	; (8005494 <HTS221_RegisterBusIO+0x34>)
 8005480:	6202      	str	r2, [r0, #32]
    pObj->Ctx.write_reg = WriteRegWrap;
 8005482:	4a05      	ldr	r2, [pc, #20]	; (8005498 <HTS221_RegisterBusIO+0x38>)
 8005484:	61c2      	str	r2, [r0, #28]
    pObj->Ctx.handle   = pObj;
 8005486:	6240      	str	r0, [r0, #36]	; 0x24
    if (pObj->IO.Init != NULL)
 8005488:	b103      	cbz	r3, 800548c <HTS221_RegisterBusIO+0x2c>
      ret = pObj->IO.Init();
 800548a:	4718      	bx	r3
}
 800548c:	f04f 30ff 	mov.w	r0, #4294967295
 8005490:	4770      	bx	lr
 8005492:	bf00      	nop
 8005494:	08005311 	.word	0x08005311
 8005498:	0800532d 	.word	0x0800532d

0800549c <hts221_read_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_read_reg(stmdev_ctx_t *ctx, uint8_t reg, uint8_t *data,
                        uint16_t len)
{
 800549c:	b410      	push	{r4}
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800549e:	e9d0 4001 	ldrd	r4, r0, [r0, #4]
 80054a2:	46a4      	mov	ip, r4
  return ret;
}
 80054a4:	f85d 4b04 	ldr.w	r4, [sp], #4
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80054a8:	4760      	bx	ip

080054aa <hts221_write_reg>:
  *
  */
int32_t hts221_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 80054aa:	b410      	push	{r4}
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80054ac:	6804      	ldr	r4, [r0, #0]
 80054ae:	6880      	ldr	r0, [r0, #8]
 80054b0:	46a4      	mov	ip, r4
  return ret;
}
 80054b2:	f85d 4b04 	ldr.w	r4, [sp], #4
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80054b6:	4760      	bx	ip

080054b8 <hts221_data_rate_set>:
  * @param  val     change the values of odr in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_data_rate_set(stmdev_ctx_t *ctx, hts221_odr_t val)
{
 80054b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
  hts221_ctrl_reg1_t reg;
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 80054ba:	2301      	movs	r3, #1
{
 80054bc:	460d      	mov	r5, r1
  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 80054be:	aa01      	add	r2, sp, #4
 80054c0:	2120      	movs	r1, #32
{
 80054c2:	4604      	mov	r4, r0
  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 80054c4:	f7ff ffea 	bl	800549c <hts221_read_reg>

  if (ret == 0) {
 80054c8:	b958      	cbnz	r0, 80054e2 <hts221_data_rate_set+0x2a>
    reg.odr = (uint8_t)val;
 80054ca:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80054ce:	f365 0301 	bfi	r3, r5, #0, #2
 80054d2:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 80054d6:	aa01      	add	r2, sp, #4
 80054d8:	2301      	movs	r3, #1
 80054da:	2120      	movs	r1, #32
 80054dc:	4620      	mov	r0, r4
 80054de:	f7ff ffe4 	bl	80054aa <hts221_write_reg>
  }

  return ret;
}
 80054e2:	b003      	add	sp, #12
 80054e4:	bd30      	pop	{r4, r5, pc}

080054e6 <hts221_data_rate_get>:
  * @param  val     Get the values of odr in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_data_rate_get(stmdev_ctx_t *ctx, hts221_odr_t *val)
{
 80054e6:	b513      	push	{r0, r1, r4, lr}
  hts221_ctrl_reg1_t reg;
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 80054e8:	2301      	movs	r3, #1
{
 80054ea:	460c      	mov	r4, r1
  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 80054ec:	aa01      	add	r2, sp, #4
 80054ee:	2120      	movs	r1, #32
 80054f0:	f7ff ffd4 	bl	800549c <hts221_read_reg>

  switch (reg.odr) {
 80054f4:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80054f8:	f003 0303 	and.w	r3, r3, #3
 80054fc:	2b03      	cmp	r3, #3
 80054fe:	d80d      	bhi.n	800551c <hts221_data_rate_get+0x36>
 8005500:	e8df f003 	tbb	[pc, r3]
 8005504:	0a080602 	.word	0x0a080602
    case HTS221_ONE_SHOT:
      *val = HTS221_ONE_SHOT;
 8005508:	2300      	movs	r3, #0
    case HTS221_ODR_12Hz5:
      *val = HTS221_ODR_12Hz5;
      break;

    default:
      *val = HTS221_ODR_ND;
 800550a:	7023      	strb	r3, [r4, #0]
      break;
  }

  return ret;
}
 800550c:	b002      	add	sp, #8
 800550e:	bd10      	pop	{r4, pc}
      *val = HTS221_ODR_1Hz;
 8005510:	2301      	movs	r3, #1
 8005512:	e7fa      	b.n	800550a <hts221_data_rate_get+0x24>
      *val = HTS221_ODR_7Hz;
 8005514:	2302      	movs	r3, #2
 8005516:	e7f8      	b.n	800550a <hts221_data_rate_get+0x24>
      *val = HTS221_ODR_12Hz5;
 8005518:	2303      	movs	r3, #3
 800551a:	e7f6      	b.n	800550a <hts221_data_rate_get+0x24>
      *val = HTS221_ODR_ND;
 800551c:	2304      	movs	r3, #4
 800551e:	e7f4      	b.n	800550a <hts221_data_rate_get+0x24>

08005520 <hts221_block_data_update_set>:
  * @param  val     change the values of bdu in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8005520:	b537      	push	{r0, r1, r2, r4, r5, lr}
  hts221_ctrl_reg1_t reg;
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8005522:	2301      	movs	r3, #1
{
 8005524:	460d      	mov	r5, r1
  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8005526:	aa01      	add	r2, sp, #4
 8005528:	2120      	movs	r1, #32
{
 800552a:	4604      	mov	r4, r0
  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 800552c:	f7ff ffb6 	bl	800549c <hts221_read_reg>

  if (ret == 0) {
 8005530:	b958      	cbnz	r0, 800554a <hts221_block_data_update_set+0x2a>
    reg.bdu = val;
 8005532:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8005536:	f365 0382 	bfi	r3, r5, #2, #1
 800553a:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 800553e:	aa01      	add	r2, sp, #4
 8005540:	2301      	movs	r3, #1
 8005542:	2120      	movs	r1, #32
 8005544:	4620      	mov	r0, r4
 8005546:	f7ff ffb0 	bl	80054aa <hts221_write_reg>
  }

  return ret;
}
 800554a:	b003      	add	sp, #12
 800554c:	bd30      	pop	{r4, r5, pc}

0800554e <hts221_humidity_raw_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_humidity_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 800554e:	b513      	push	{r0, r1, r4, lr}
  uint8_t buff[2];
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_HUMIDITY_OUT_L, buff, 2);
 8005550:	2302      	movs	r3, #2
{
 8005552:	460c      	mov	r4, r1
  ret = hts221_read_reg(ctx, HTS221_HUMIDITY_OUT_L, buff, 2);
 8005554:	aa01      	add	r2, sp, #4
 8005556:	2128      	movs	r1, #40	; 0x28
 8005558:	f7ff ffa0 	bl	800549c <hts221_read_reg>
  *val = (int16_t)buff[1];
  *val = (*val * 256) +  (int16_t)buff[0];
 800555c:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8005560:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8005564:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8005568:	8023      	strh	r3, [r4, #0]
  return ret;
}
 800556a:	b002      	add	sp, #8
 800556c:	bd10      	pop	{r4, pc}

0800556e <hts221_temperature_raw_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 800556e:	b513      	push	{r0, r1, r4, lr}
  uint8_t buff[2];
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_TEMP_OUT_L, buff, 2);
 8005570:	2302      	movs	r3, #2
{
 8005572:	460c      	mov	r4, r1
  ret = hts221_read_reg(ctx, HTS221_TEMP_OUT_L, buff, 2);
 8005574:	aa01      	add	r2, sp, #4
 8005576:	212a      	movs	r1, #42	; 0x2a
 8005578:	f7ff ff90 	bl	800549c <hts221_read_reg>
  *val = (int16_t)buff[1];
  *val = (*val * 256) +  (int16_t)buff[0];
 800557c:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8005580:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8005584:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8005588:	8023      	strh	r3, [r4, #0]
  return ret;
}
 800558a:	b002      	add	sp, #8
 800558c:	bd10      	pop	{r4, pc}

0800558e <hts221_device_id_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 800558e:	460a      	mov	r2, r1
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_WHO_AM_I, buff, 1);
 8005590:	2301      	movs	r3, #1
 8005592:	210f      	movs	r1, #15
 8005594:	f7ff bf82 	b.w	800549c <hts221_read_reg>

08005598 <hts221_power_on_set>:
  * @param  val     change the values of pd in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_power_on_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8005598:	b537      	push	{r0, r1, r2, r4, r5, lr}
  hts221_ctrl_reg1_t reg;
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 800559a:	2301      	movs	r3, #1
{
 800559c:	460d      	mov	r5, r1
  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 800559e:	aa01      	add	r2, sp, #4
 80055a0:	2120      	movs	r1, #32
{
 80055a2:	4604      	mov	r4, r0
  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 80055a4:	f7ff ff7a 	bl	800549c <hts221_read_reg>

  if (ret == 0) {
 80055a8:	b958      	cbnz	r0, 80055c2 <hts221_power_on_set+0x2a>
    reg.pd = val;
 80055aa:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80055ae:	f365 13c7 	bfi	r3, r5, #7, #1
 80055b2:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 80055b6:	aa01      	add	r2, sp, #4
 80055b8:	2301      	movs	r3, #1
 80055ba:	2120      	movs	r1, #32
 80055bc:	4620      	mov	r0, r4
 80055be:	f7ff ff74 	bl	80054aa <hts221_write_reg>
  }

  return ret;
}
 80055c2:	b003      	add	sp, #12
 80055c4:	bd30      	pop	{r4, r5, pc}

080055c6 <hts221_hum_rh_point_0_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_rh_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 80055c6:	b513      	push	{r0, r1, r4, lr}
  uint8_t coeff;
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_H0_RH_X2, &coeff, 1);
 80055c8:	2301      	movs	r3, #1
{
 80055ca:	460c      	mov	r4, r1
  ret = hts221_read_reg(ctx, HTS221_H0_RH_X2, &coeff, 1);
 80055cc:	f10d 0207 	add.w	r2, sp, #7
 80055d0:	2130      	movs	r1, #48	; 0x30
 80055d2:	f7ff ff63 	bl	800549c <hts221_read_reg>
  *val = coeff / 2.0f;
 80055d6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80055da:	ee07 3a90 	vmov	s15, r3
 80055de:	eefa 7aef 	vcvt.f32.s32	s15, s15, #1
 80055e2:	edc4 7a00 	vstr	s15, [r4]
  return ret;
}
 80055e6:	b002      	add	sp, #8
 80055e8:	bd10      	pop	{r4, pc}

080055ea <hts221_hum_rh_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_rh_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 80055ea:	b513      	push	{r0, r1, r4, lr}
  uint8_t coeff;
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_H1_RH_X2, &coeff, 1);
 80055ec:	2301      	movs	r3, #1
{
 80055ee:	460c      	mov	r4, r1
  ret = hts221_read_reg(ctx, HTS221_H1_RH_X2, &coeff, 1);
 80055f0:	f10d 0207 	add.w	r2, sp, #7
 80055f4:	2131      	movs	r1, #49	; 0x31
 80055f6:	f7ff ff51 	bl	800549c <hts221_read_reg>
  *val = coeff / 2.0f;
 80055fa:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80055fe:	ee07 3a90 	vmov	s15, r3
 8005602:	eefa 7aef 	vcvt.f32.s32	s15, s15, #1
 8005606:	edc4 7a00 	vstr	s15, [r4]
  return ret;
}
 800560a:	b002      	add	sp, #8
 800560c:	bd10      	pop	{r4, pc}

0800560e <hts221_temp_deg_point_0_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_deg_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 800560e:	b537      	push	{r0, r1, r2, r4, r5, lr}
  hts221_t1_t0_msb_t reg;
  uint8_t coeff_h, coeff_l;
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_T0_DEGC_X8, &coeff_l, 1);
 8005610:	2301      	movs	r3, #1
{
 8005612:	460c      	mov	r4, r1
  ret = hts221_read_reg(ctx, HTS221_T0_DEGC_X8, &coeff_l, 1);
 8005614:	f10d 0207 	add.w	r2, sp, #7
 8005618:	2132      	movs	r1, #50	; 0x32
{
 800561a:	4605      	mov	r5, r0
  ret = hts221_read_reg(ctx, HTS221_T0_DEGC_X8, &coeff_l, 1);
 800561c:	f7ff ff3e 	bl	800549c <hts221_read_reg>

  if (ret == 0) {
 8005620:	b998      	cbnz	r0, 800564a <hts221_temp_deg_point_0_get+0x3c>
    ret = hts221_read_reg(ctx, HTS221_T1_T0_MSB, (uint8_t *) &reg, 1);
 8005622:	2301      	movs	r3, #1
 8005624:	aa01      	add	r2, sp, #4
 8005626:	2135      	movs	r1, #53	; 0x35
 8005628:	4628      	mov	r0, r5
 800562a:	f7ff ff37 	bl	800549c <hts221_read_reg>
    coeff_h = reg.t0_msb;
 800562e:	f89d 2004 	ldrb.w	r2, [sp, #4]
    *val = ((coeff_h * 256) + coeff_l) / 8.0f;
 8005632:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8005636:	f002 0203 	and.w	r2, r2, #3
 800563a:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800563e:	ee07 3a90 	vmov	s15, r3
 8005642:	eefa 7aee 	vcvt.f32.s32	s15, s15, #3
 8005646:	edc4 7a00 	vstr	s15, [r4]
  }

  return ret;
}
 800564a:	b003      	add	sp, #12
 800564c:	bd30      	pop	{r4, r5, pc}

0800564e <hts221_temp_deg_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_deg_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 800564e:	b537      	push	{r0, r1, r2, r4, r5, lr}
  hts221_t1_t0_msb_t reg;
  uint8_t coeff_h, coeff_l;
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_T1_DEGC_X8, &coeff_l, 1);
 8005650:	2301      	movs	r3, #1
{
 8005652:	460c      	mov	r4, r1
  ret = hts221_read_reg(ctx, HTS221_T1_DEGC_X8, &coeff_l, 1);
 8005654:	f10d 0207 	add.w	r2, sp, #7
 8005658:	2133      	movs	r1, #51	; 0x33
{
 800565a:	4605      	mov	r5, r0
  ret = hts221_read_reg(ctx, HTS221_T1_DEGC_X8, &coeff_l, 1);
 800565c:	f7ff ff1e 	bl	800549c <hts221_read_reg>

  if (ret == 0) {
 8005660:	b998      	cbnz	r0, 800568a <hts221_temp_deg_point_1_get+0x3c>
    ret = hts221_read_reg(ctx, HTS221_T1_T0_MSB, (uint8_t *) &reg, 1);
 8005662:	2301      	movs	r3, #1
 8005664:	aa01      	add	r2, sp, #4
 8005666:	2135      	movs	r1, #53	; 0x35
 8005668:	4628      	mov	r0, r5
 800566a:	f7ff ff17 	bl	800549c <hts221_read_reg>
    coeff_h = reg.t1_msb;
 800566e:	f89d 2004 	ldrb.w	r2, [sp, #4]
    *val = ((coeff_h * 256) + coeff_l) / 8.0f;
 8005672:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8005676:	f3c2 0281 	ubfx	r2, r2, #2, #2
 800567a:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800567e:	ee07 3a90 	vmov	s15, r3
 8005682:	eefa 7aee 	vcvt.f32.s32	s15, s15, #3
 8005686:	edc4 7a00 	vstr	s15, [r4]
  }

  return ret;
}
 800568a:	b003      	add	sp, #12
 800568c:	bd30      	pop	{r4, r5, pc}

0800568e <hts221_hum_adc_point_0_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_adc_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 800568e:	b513      	push	{r0, r1, r4, lr}
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_H0_T0_OUT_L, coeff_p, 2);
 8005690:	2302      	movs	r3, #2
{
 8005692:	460c      	mov	r4, r1
  ret = hts221_read_reg(ctx, HTS221_H0_T0_OUT_L, coeff_p, 2);
 8005694:	aa01      	add	r2, sp, #4
 8005696:	2136      	movs	r1, #54	; 0x36
 8005698:	f7ff ff00 	bl	800549c <hts221_read_reg>
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 800569c:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80056a0:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80056a4:	eb03 2302 	add.w	r3, r3, r2, lsl #8
  *val = coeff * 1.0f;
 80056a8:	b21b      	sxth	r3, r3
 80056aa:	ee07 3a90 	vmov	s15, r3
 80056ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80056b2:	edc4 7a00 	vstr	s15, [r4]
  return ret;
}
 80056b6:	b002      	add	sp, #8
 80056b8:	bd10      	pop	{r4, pc}

080056ba <hts221_hum_adc_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_adc_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 80056ba:	b513      	push	{r0, r1, r4, lr}
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_H1_T0_OUT_L, coeff_p, 2);
 80056bc:	2302      	movs	r3, #2
{
 80056be:	460c      	mov	r4, r1
  ret = hts221_read_reg(ctx, HTS221_H1_T0_OUT_L, coeff_p, 2);
 80056c0:	aa01      	add	r2, sp, #4
 80056c2:	213a      	movs	r1, #58	; 0x3a
 80056c4:	f7ff feea 	bl	800549c <hts221_read_reg>
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 80056c8:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80056cc:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80056d0:	eb03 2302 	add.w	r3, r3, r2, lsl #8
  *val = coeff * 1.0f;
 80056d4:	b21b      	sxth	r3, r3
 80056d6:	ee07 3a90 	vmov	s15, r3
 80056da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80056de:	edc4 7a00 	vstr	s15, [r4]
  return ret;
}
 80056e2:	b002      	add	sp, #8
 80056e4:	bd10      	pop	{r4, pc}

080056e6 <hts221_temp_adc_point_0_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_adc_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 80056e6:	b513      	push	{r0, r1, r4, lr}
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_T0_OUT_L, coeff_p, 2);
 80056e8:	2302      	movs	r3, #2
{
 80056ea:	460c      	mov	r4, r1
  ret = hts221_read_reg(ctx, HTS221_T0_OUT_L, coeff_p, 2);
 80056ec:	aa01      	add	r2, sp, #4
 80056ee:	213c      	movs	r1, #60	; 0x3c
 80056f0:	f7ff fed4 	bl	800549c <hts221_read_reg>
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 80056f4:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80056f8:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80056fc:	eb03 2302 	add.w	r3, r3, r2, lsl #8
  *val = coeff * 1.0f;
 8005700:	b21b      	sxth	r3, r3
 8005702:	ee07 3a90 	vmov	s15, r3
 8005706:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800570a:	edc4 7a00 	vstr	s15, [r4]
  return ret;
}
 800570e:	b002      	add	sp, #8
 8005710:	bd10      	pop	{r4, pc}

08005712 <hts221_temp_adc_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_adc_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 8005712:	b513      	push	{r0, r1, r4, lr}
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_T1_OUT_L, coeff_p, 2);
 8005714:	2302      	movs	r3, #2
{
 8005716:	460c      	mov	r4, r1
  ret = hts221_read_reg(ctx, HTS221_T1_OUT_L, coeff_p, 2);
 8005718:	aa01      	add	r2, sp, #4
 800571a:	213e      	movs	r1, #62	; 0x3e
 800571c:	f7ff febe 	bl	800549c <hts221_read_reg>
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 8005720:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8005724:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8005728:	eb03 2302 	add.w	r3, r3, r2, lsl #8
  *val = coeff * 1.0f;
 800572c:	b21b      	sxth	r3, r3
 800572e:	ee07 3a90 	vmov	s15, r3
 8005732:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005736:	edc4 7a00 	vstr	s15, [r4]
  return ret;
}
 800573a:	b002      	add	sp, #8
 800573c:	bd10      	pop	{r4, pc}
	...

08005740 <LIS2MDL_GetCapabilities>:

  Capabilities->Acc          = 0;
  Capabilities->Gyro         = 0;
  Capabilities->Magneto      = 1;
  Capabilities->LowPower     = 0;
  Capabilities->GyroMaxFS    = 0;
 8005740:	2000      	movs	r0, #0
 8005742:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005746:	e9c1 3000 	strd	r3, r0, [r1]
  Capabilities->AccMaxFS     = 0;
  Capabilities->MagMaxFS     = 50;
 800574a:	2332      	movs	r3, #50	; 0x32
 800574c:	60cb      	str	r3, [r1, #12]
  Capabilities->GyroMaxOdr   = 0.0f;
 800574e:	2300      	movs	r3, #0
 8005750:	610b      	str	r3, [r1, #16]
  Capabilities->AccMaxOdr    = 0.0f;
 8005752:	614b      	str	r3, [r1, #20]
  Capabilities->MagMaxOdr    = 100.0f;
 8005754:	4b01      	ldr	r3, [pc, #4]	; (800575c <LIS2MDL_GetCapabilities+0x1c>)
  Capabilities->AccMaxFS     = 0;
 8005756:	6088      	str	r0, [r1, #8]
  Capabilities->MagMaxOdr    = 100.0f;
 8005758:	618b      	str	r3, [r1, #24]
  return LIS2MDL_OK;
}
 800575a:	4770      	bx	lr
 800575c:	42c80000 	.word	0x42c80000

08005760 <LIS2MDL_MAG_GetSensitivity>:
 * @param  Sensitivity pointer
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2MDL_MAG_GetSensitivity(LIS2MDL_Object_t *pObj, float *Sensitivity)
{
  *Sensitivity = LIS2MDL_MAG_SENSITIVITY_FS_50GAUSS;
 8005760:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8005764:	600b      	str	r3, [r1, #0]

  return LIS2MDL_OK;
}
 8005766:	2000      	movs	r0, #0
 8005768:	4770      	bx	lr

0800576a <LIS2MDL_MAG_GetFullScale>:
 * @param  FullScale pointer where the full scale is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2MDL_MAG_GetFullScale(LIS2MDL_Object_t *pObj, int32_t *FullScale)
{
  *FullScale = 50;
 800576a:	2332      	movs	r3, #50	; 0x32
 800576c:	600b      	str	r3, [r1, #0]

  return LIS2MDL_OK;
}
 800576e:	2000      	movs	r0, #0
 8005770:	4770      	bx	lr

08005772 <LIS2MDL_MAG_SetFullScale>:
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2MDL_MAG_SetFullScale(LIS2MDL_Object_t *pObj, int32_t FullScale)
{
  return LIS2MDL_OK;
}
 8005772:	2000      	movs	r0, #0
 8005774:	4770      	bx	lr
	...

08005778 <LIS2MDL_MAG_SetOutputDataRate>:
            : (Odr <= 20.000f) ? LIS2MDL_ODR_20Hz
 8005778:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 800577c:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8005780:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
{
 8005784:	b508      	push	{r3, lr}
            : (Odr <= 20.000f) ? LIS2MDL_ODR_20Hz
 8005786:	d917      	bls.n	80057b8 <LIS2MDL_MAG_SetOutputDataRate+0x40>
 8005788:	eef3 7a04 	vmov.f32	s15, #52	; 0x41a00000  20.0
 800578c:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8005790:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005794:	d912      	bls.n	80057bc <LIS2MDL_MAG_SetOutputDataRate+0x44>
 8005796:	eddf 7a0a 	vldr	s15, [pc, #40]	; 80057c0 <LIS2MDL_MAG_SetOutputDataRate+0x48>
 800579a:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800579e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80057a2:	bf94      	ite	ls
 80057a4:	2102      	movls	r1, #2
 80057a6:	2103      	movhi	r1, #3
  if (lis2mdl_data_rate_set(&(pObj->Ctx), new_odr) != LIS2MDL_OK)
 80057a8:	301c      	adds	r0, #28
 80057aa:	f000 f962 	bl	8005a72 <lis2mdl_data_rate_set>
 80057ae:	3800      	subs	r0, #0
 80057b0:	bf18      	it	ne
 80057b2:	2001      	movne	r0, #1
}
 80057b4:	4240      	negs	r0, r0
 80057b6:	bd08      	pop	{r3, pc}
            : (Odr <= 20.000f) ? LIS2MDL_ODR_20Hz
 80057b8:	2100      	movs	r1, #0
 80057ba:	e7f5      	b.n	80057a8 <LIS2MDL_MAG_SetOutputDataRate+0x30>
 80057bc:	2101      	movs	r1, #1
 80057be:	e7f3      	b.n	80057a8 <LIS2MDL_MAG_SetOutputDataRate+0x30>
 80057c0:	42480000 	.word	0x42480000

080057c4 <LIS2MDL_Init>:
{
 80057c4:	b538      	push	{r3, r4, r5, lr}
  if (lis2mdl_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LIS2MDL_OK)
 80057c6:	f100 051c 	add.w	r5, r0, #28
{
 80057ca:	4604      	mov	r4, r0
  if (lis2mdl_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LIS2MDL_OK)
 80057cc:	2101      	movs	r1, #1
 80057ce:	4628      	mov	r0, r5
 80057d0:	f000 f97d 	bl	8005ace <lis2mdl_block_data_update_set>
 80057d4:	b110      	cbz	r0, 80057dc <LIS2MDL_Init+0x18>
    return LIS2MDL_ERROR;
 80057d6:	f04f 30ff 	mov.w	r0, #4294967295
}
 80057da:	bd38      	pop	{r3, r4, r5, pc}
  if (lis2mdl_operating_mode_set(&(pObj->Ctx), LIS2MDL_POWER_DOWN) != LIS2MDL_OK)
 80057dc:	2102      	movs	r1, #2
 80057de:	4628      	mov	r0, r5
 80057e0:	f000 f930 	bl	8005a44 <lis2mdl_operating_mode_set>
 80057e4:	2800      	cmp	r0, #0
 80057e6:	d1f6      	bne.n	80057d6 <LIS2MDL_Init+0x12>
  if (lis2mdl_data_rate_set(&(pObj->Ctx), LIS2MDL_ODR_100Hz) != LIS2MDL_OK)
 80057e8:	2103      	movs	r1, #3
 80057ea:	4628      	mov	r0, r5
 80057ec:	f000 f941 	bl	8005a72 <lis2mdl_data_rate_set>
 80057f0:	4601      	mov	r1, r0
 80057f2:	2800      	cmp	r0, #0
 80057f4:	d1ef      	bne.n	80057d6 <LIS2MDL_Init+0x12>
  if (lis2mdl_self_test_set(&(pObj->Ctx), PROPERTY_DISABLE) != LIS2MDL_OK)
 80057f6:	4628      	mov	r0, r5
 80057f8:	f000 f9a3 	bl	8005b42 <lis2mdl_self_test_set>
 80057fc:	2800      	cmp	r0, #0
 80057fe:	d1ea      	bne.n	80057d6 <LIS2MDL_Init+0x12>
  pObj->is_initialized = 1;
 8005800:	2301      	movs	r3, #1
 8005802:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
  return LIS2MDL_OK;
 8005806:	e7e8      	b.n	80057da <LIS2MDL_Init+0x16>

08005808 <LIS2MDL_ReadID>:
{
 8005808:	b508      	push	{r3, lr}
  if (lis2mdl_device_id_get(&(pObj->Ctx), Id) != LIS2MDL_OK)
 800580a:	301c      	adds	r0, #28
 800580c:	f000 f994 	bl	8005b38 <lis2mdl_device_id_get>
 8005810:	3800      	subs	r0, #0
 8005812:	bf18      	it	ne
 8005814:	2001      	movne	r0, #1
}
 8005816:	4240      	negs	r0, r0
 8005818:	bd08      	pop	{r3, pc}
	...

0800581c <LIS2MDL_MAG_GetOutputDataRate>:
{
 800581c:	b513      	push	{r0, r1, r4, lr}
 800581e:	460c      	mov	r4, r1
  if (lis2mdl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LIS2MDL_OK)
 8005820:	301c      	adds	r0, #28
 8005822:	f10d 0107 	add.w	r1, sp, #7
 8005826:	f000 f93b 	bl	8005aa0 <lis2mdl_data_rate_get>
 800582a:	b988      	cbnz	r0, 8005850 <LIS2MDL_MAG_GetOutputDataRate+0x34>
  switch (odr_low_level)
 800582c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8005830:	2b03      	cmp	r3, #3
 8005832:	d80d      	bhi.n	8005850 <LIS2MDL_MAG_GetOutputDataRate+0x34>
 8005834:	e8df f003 	tbb	[pc, r3]
 8005838:	0a080602 	.word	0x0a080602
      *Odr = 10.0f;
 800583c:	4b06      	ldr	r3, [pc, #24]	; (8005858 <LIS2MDL_MAG_GetOutputDataRate+0x3c>)
      *Odr = 100.0f;
 800583e:	6023      	str	r3, [r4, #0]
}
 8005840:	b002      	add	sp, #8
 8005842:	bd10      	pop	{r4, pc}
      *Odr = 20.0f;
 8005844:	4b05      	ldr	r3, [pc, #20]	; (800585c <LIS2MDL_MAG_GetOutputDataRate+0x40>)
 8005846:	e7fa      	b.n	800583e <LIS2MDL_MAG_GetOutputDataRate+0x22>
      *Odr = 50.0f;
 8005848:	4b05      	ldr	r3, [pc, #20]	; (8005860 <LIS2MDL_MAG_GetOutputDataRate+0x44>)
 800584a:	e7f8      	b.n	800583e <LIS2MDL_MAG_GetOutputDataRate+0x22>
      *Odr = 100.0f;
 800584c:	4b05      	ldr	r3, [pc, #20]	; (8005864 <LIS2MDL_MAG_GetOutputDataRate+0x48>)
 800584e:	e7f6      	b.n	800583e <LIS2MDL_MAG_GetOutputDataRate+0x22>
  switch (odr_low_level)
 8005850:	f04f 30ff 	mov.w	r0, #4294967295
 8005854:	e7f4      	b.n	8005840 <LIS2MDL_MAG_GetOutputDataRate+0x24>
 8005856:	bf00      	nop
 8005858:	41200000 	.word	0x41200000
 800585c:	41a00000 	.word	0x41a00000
 8005860:	42480000 	.word	0x42480000
 8005864:	42c80000 	.word	0x42c80000

08005868 <LIS2MDL_MAG_GetAxesRaw>:
 * @param  pObj the device pObj
 * @param  Value pointer where the raw values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2MDL_MAG_GetAxesRaw(LIS2MDL_Object_t *pObj, LIS2MDL_AxesRaw_t *Value)
{
 8005868:	b513      	push	{r0, r1, r4, lr}
 800586a:	460c      	mov	r4, r1
  lis2mdl_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lis2mdl_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != LIS2MDL_OK)
 800586c:	301c      	adds	r0, #28
 800586e:	4669      	mov	r1, sp
 8005870:	f000 f944 	bl	8005afc <lis2mdl_magnetic_raw_get>
 8005874:	b950      	cbnz	r0, 800588c <LIS2MDL_MAG_GetAxesRaw+0x24>
  {
    return LIS2MDL_ERROR;
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8005876:	f8bd 3000 	ldrh.w	r3, [sp]
 800587a:	8023      	strh	r3, [r4, #0]
  Value->y = data_raw.i16bit[1];
 800587c:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8005880:	8063      	strh	r3, [r4, #2]
  Value->z = data_raw.i16bit[2];
 8005882:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8005886:	80a3      	strh	r3, [r4, #4]

  return LIS2MDL_OK;
}
 8005888:	b002      	add	sp, #8
 800588a:	bd10      	pop	{r4, pc}
    return LIS2MDL_ERROR;
 800588c:	f04f 30ff 	mov.w	r0, #4294967295
 8005890:	e7fa      	b.n	8005888 <LIS2MDL_MAG_GetAxesRaw+0x20>

08005892 <LIS2MDL_MAG_GetAxes>:
 * @param  pObj the device pObj
 * @param  MagneticField pointer where the values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2MDL_MAG_GetAxes(LIS2MDL_Object_t *pObj, LIS2MDL_Axes_t *MagneticField)
{
 8005892:	b513      	push	{r0, r1, r4, lr}
 8005894:	460c      	mov	r4, r1
  lis2mdl_axis3bit16_t data_raw;
  float sensitivity;

  /* Read raw data values. */
  if (lis2mdl_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != LIS2MDL_OK)
 8005896:	301c      	adds	r0, #28
 8005898:	4669      	mov	r1, sp
 800589a:	f000 f92f 	bl	8005afc <lis2mdl_magnetic_raw_get>
 800589e:	bb38      	cbnz	r0, 80058f0 <LIS2MDL_MAG_GetAxes+0x5e>

  /* Get LIS2MDL actual sensitivity. */
  (void)LIS2MDL_MAG_GetSensitivity(pObj, &sensitivity);

  /* Calculate the data. */
  MagneticField->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 80058a0:	f9bd 3000 	ldrsh.w	r3, [sp]
 80058a4:	ee07 3a10 	vmov	s14, r3
 80058a8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80058ac:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 80058b0:	ee27 7a26 	vmul.f32	s14, s14, s13
  MagneticField->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 80058b4:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
  MagneticField->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 80058b8:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 80058bc:	ed84 7a00 	vstr	s14, [r4]
  MagneticField->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 80058c0:	ee07 3a10 	vmov	s14, r3
  MagneticField->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 80058c4:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 80058c8:	ee07 3a90 	vmov	s15, r3
  MagneticField->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 80058cc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  MagneticField->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 80058d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  MagneticField->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 80058d4:	ee27 7a26 	vmul.f32	s14, s14, s13
  MagneticField->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 80058d8:	ee67 7aa6 	vmul.f32	s15, s15, s13
  MagneticField->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 80058dc:	eebd 7ac7 	vcvt.s32.f32	s14, s14
  MagneticField->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 80058e0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
  MagneticField->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 80058e4:	ed84 7a01 	vstr	s14, [r4, #4]
  MagneticField->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 80058e8:	edc4 7a02 	vstr	s15, [r4, #8]

  return LIS2MDL_OK;
}
 80058ec:	b002      	add	sp, #8
 80058ee:	bd10      	pop	{r4, pc}
    return LIS2MDL_ERROR;
 80058f0:	f04f 30ff 	mov.w	r0, #4294967295
 80058f4:	e7fa      	b.n	80058ec <LIS2MDL_MAG_GetAxes+0x5a>

080058f6 <ReadMagRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80058f6:	b430      	push	{r4, r5}
 80058f8:	4604      	mov	r4, r0
 80058fa:	6945      	ldr	r5, [r0, #20]
  LIS2MDL_Object_t *pObj = (LIS2MDL_Object_t *)Handle;

  if (pObj->IO.BusType == LIS2MDL_I2C_BUS) /* I2C */
 80058fc:	68a4      	ldr	r4, [r4, #8]
 80058fe:	7b00      	ldrb	r0, [r0, #12]
 8005900:	b924      	cbnz	r4, 800590c <ReadMagRegWrap+0x16>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8005902:	f041 0180 	orr.w	r1, r1, #128	; 0x80
  }
  else   /* SPI 3-Wires or SPI 4-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8005906:	46ac      	mov	ip, r5
  }
}
 8005908:	bc30      	pop	{r4, r5}
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 800590a:	4760      	bx	ip
 800590c:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8005910:	e7f9      	b.n	8005906 <ReadMagRegWrap+0x10>

08005912 <WriteMagRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8005912:	b430      	push	{r4, r5}
 8005914:	4604      	mov	r4, r0
 8005916:	6905      	ldr	r5, [r0, #16]
  LIS2MDL_Object_t *pObj = (LIS2MDL_Object_t *)Handle;

  if (pObj->IO.BusType == LIS2MDL_I2C_BUS) /* I2C */
 8005918:	68a4      	ldr	r4, [r4, #8]
 800591a:	7b00      	ldrb	r0, [r0, #12]
 800591c:	b924      	cbnz	r4, 8005928 <WriteMagRegWrap+0x16>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 800591e:	f041 0180 	orr.w	r1, r1, #128	; 0x80
  }
  else   /* SPI 3-Wires or SPI 4-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8005922:	46ac      	mov	ip, r5
  }
}
 8005924:	bc30      	pop	{r4, r5}
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8005926:	4760      	bx	ip
 8005928:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 800592c:	e7f9      	b.n	8005922 <WriteMagRegWrap+0x10>

0800592e <LIS2MDL_MAG_Enable>:
{
 800592e:	b510      	push	{r4, lr}
  if (pObj->mag_is_enabled == 1U)
 8005930:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
 8005934:	2b01      	cmp	r3, #1
{
 8005936:	4604      	mov	r4, r0
  if (pObj->mag_is_enabled == 1U)
 8005938:	d008      	beq.n	800594c <LIS2MDL_MAG_Enable+0x1e>
  if (lis2mdl_operating_mode_set(&(pObj->Ctx), LIS2MDL_CONTINUOUS_MODE) != LIS2MDL_OK)
 800593a:	2100      	movs	r1, #0
 800593c:	301c      	adds	r0, #28
 800593e:	f000 f881 	bl	8005a44 <lis2mdl_operating_mode_set>
 8005942:	b928      	cbnz	r0, 8005950 <LIS2MDL_MAG_Enable+0x22>
  pObj->mag_is_enabled = 1;
 8005944:	2301      	movs	r3, #1
 8005946:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
}
 800594a:	bd10      	pop	{r4, pc}
    return LIS2MDL_OK;
 800594c:	2000      	movs	r0, #0
 800594e:	e7fc      	b.n	800594a <LIS2MDL_MAG_Enable+0x1c>
    return LIS2MDL_ERROR;
 8005950:	f04f 30ff 	mov.w	r0, #4294967295
 8005954:	e7f9      	b.n	800594a <LIS2MDL_MAG_Enable+0x1c>

08005956 <LIS2MDL_MAG_Disable>:
{
 8005956:	b510      	push	{r4, lr}
 8005958:	4604      	mov	r4, r0
  if (pObj->mag_is_enabled == 0U)
 800595a:	f890 0029 	ldrb.w	r0, [r0, #41]	; 0x29
 800595e:	b138      	cbz	r0, 8005970 <LIS2MDL_MAG_Disable+0x1a>
  if (lis2mdl_operating_mode_set(&(pObj->Ctx), LIS2MDL_POWER_DOWN) != LIS2MDL_OK)
 8005960:	2102      	movs	r1, #2
 8005962:	f104 001c 	add.w	r0, r4, #28
 8005966:	f000 f86d 	bl	8005a44 <lis2mdl_operating_mode_set>
 800596a:	b910      	cbnz	r0, 8005972 <LIS2MDL_MAG_Disable+0x1c>
  pObj->mag_is_enabled = 0;
 800596c:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
}
 8005970:	bd10      	pop	{r4, pc}
    return LIS2MDL_ERROR;
 8005972:	f04f 30ff 	mov.w	r0, #4294967295
 8005976:	e7fb      	b.n	8005970 <LIS2MDL_MAG_Disable+0x1a>

08005978 <LIS2MDL_DeInit>:
{
 8005978:	b510      	push	{r4, lr}
 800597a:	4604      	mov	r4, r0
  if (LIS2MDL_MAG_Disable(pObj) != LIS2MDL_OK)
 800597c:	f7ff ffeb 	bl	8005956 <LIS2MDL_MAG_Disable>
 8005980:	b910      	cbnz	r0, 8005988 <LIS2MDL_DeInit+0x10>
  pObj->is_initialized = 0;
 8005982:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
}
 8005986:	bd10      	pop	{r4, pc}
    return LIS2MDL_ERROR;
 8005988:	f04f 30ff 	mov.w	r0, #4294967295
 800598c:	e7fb      	b.n	8005986 <LIS2MDL_DeInit+0xe>

0800598e <LIS2MDL_Write_Reg>:
{
 800598e:	b507      	push	{r0, r1, r2, lr}
  if (lis2mdl_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LIS2MDL_OK)
 8005990:	2301      	movs	r3, #1
{
 8005992:	f88d 2007 	strb.w	r2, [sp, #7]
  if (lis2mdl_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LIS2MDL_OK)
 8005996:	301c      	adds	r0, #28
 8005998:	f10d 0207 	add.w	r2, sp, #7
 800599c:	f000 f84b 	bl	8005a36 <lis2mdl_write_reg>
 80059a0:	3800      	subs	r0, #0
 80059a2:	bf18      	it	ne
 80059a4:	2001      	movne	r0, #1
}
 80059a6:	4240      	negs	r0, r0
 80059a8:	b003      	add	sp, #12
 80059aa:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080059b0 <LIS2MDL_RegisterBusIO>:
{
 80059b0:	b510      	push	{r4, lr}
  if (pObj == NULL)
 80059b2:	4604      	mov	r4, r0
 80059b4:	b910      	cbnz	r0, 80059bc <LIS2MDL_RegisterBusIO+0xc>
    ret = LIS2MDL_ERROR;
 80059b6:	f04f 30ff 	mov.w	r0, #4294967295
}
 80059ba:	bd10      	pop	{r4, pc}
    pObj->IO.DeInit    = pIO->DeInit;
 80059bc:	684a      	ldr	r2, [r1, #4]
    pObj->IO.Init      = pIO->Init;
 80059be:	680b      	ldr	r3, [r1, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 80059c0:	6042      	str	r2, [r0, #4]
    pObj->IO.BusType   = pIO->BusType;
 80059c2:	688a      	ldr	r2, [r1, #8]
    pObj->IO.Init      = pIO->Init;
 80059c4:	6003      	str	r3, [r0, #0]
    pObj->IO.BusType   = pIO->BusType;
 80059c6:	6082      	str	r2, [r0, #8]
    pObj->IO.Address   = pIO->Address;
 80059c8:	7b0a      	ldrb	r2, [r1, #12]
 80059ca:	7302      	strb	r2, [r0, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 80059cc:	690a      	ldr	r2, [r1, #16]
 80059ce:	6102      	str	r2, [r0, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 80059d0:	694a      	ldr	r2, [r1, #20]
 80059d2:	6142      	str	r2, [r0, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 80059d4:	698a      	ldr	r2, [r1, #24]
 80059d6:	6182      	str	r2, [r0, #24]
    pObj->Ctx.read_reg  = ReadMagRegWrap;
 80059d8:	4a11      	ldr	r2, [pc, #68]	; (8005a20 <LIS2MDL_RegisterBusIO+0x70>)
 80059da:	6202      	str	r2, [r0, #32]
    pObj->Ctx.write_reg = WriteMagRegWrap;
 80059dc:	4a11      	ldr	r2, [pc, #68]	; (8005a24 <LIS2MDL_RegisterBusIO+0x74>)
 80059de:	61c2      	str	r2, [r0, #28]
    pObj->Ctx.handle    = pObj;
 80059e0:	6240      	str	r0, [r0, #36]	; 0x24
    if (pObj->IO.Init == NULL)
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d0e7      	beq.n	80059b6 <LIS2MDL_RegisterBusIO+0x6>
    else if (pObj->IO.Init() != LIS2MDL_OK)
 80059e6:	4798      	blx	r3
 80059e8:	2800      	cmp	r0, #0
 80059ea:	d1e4      	bne.n	80059b6 <LIS2MDL_RegisterBusIO+0x6>
      if (pObj->IO.BusType != LIS2MDL_I2C_BUS) /* If the bus type is not I2C */
 80059ec:	68a3      	ldr	r3, [r4, #8]
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d0e3      	beq.n	80059ba <LIS2MDL_RegisterBusIO+0xa>
        if (pObj->is_initialized == 0U)
 80059f2:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 80059f6:	2a00      	cmp	r2, #0
 80059f8:	d1df      	bne.n	80059ba <LIS2MDL_RegisterBusIO+0xa>
          if (pObj->IO.BusType == LIS2MDL_SPI_4WIRES_BUS) /* SPI 4-Wires */
 80059fa:	2b01      	cmp	r3, #1
 80059fc:	d109      	bne.n	8005a12 <LIS2MDL_RegisterBusIO+0x62>
            if (LIS2MDL_Write_Reg(pObj, LIS2MDL_CFG_REG_C, data) != LIS2MDL_OK)
 80059fe:	2234      	movs	r2, #52	; 0x34
 8005a00:	2162      	movs	r1, #98	; 0x62
 8005a02:	4620      	mov	r0, r4
 8005a04:	f7ff ffc3 	bl	800598e <LIS2MDL_Write_Reg>
            if (lis2mdl_i2c_interface_set(&(pObj->Ctx), LIS2MDL_I2C_DISABLE) != LIS2MDL_OK)
 8005a08:	3800      	subs	r0, #0
 8005a0a:	bf18      	it	ne
 8005a0c:	2001      	movne	r0, #1
 8005a0e:	4240      	negs	r0, r0
 8005a10:	e7d3      	b.n	80059ba <LIS2MDL_RegisterBusIO+0xa>
 8005a12:	2101      	movs	r1, #1
 8005a14:	f104 001c 	add.w	r0, r4, #28
 8005a18:	f000 f8aa 	bl	8005b70 <lis2mdl_i2c_interface_set>
 8005a1c:	e7f4      	b.n	8005a08 <LIS2MDL_RegisterBusIO+0x58>
 8005a1e:	bf00      	nop
 8005a20:	080058f7 	.word	0x080058f7
 8005a24:	08005913 	.word	0x08005913

08005a28 <lis2mdl_read_reg>:
  *
  */
int32_t lis2mdl_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 8005a28:	b410      	push	{r4}
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8005a2a:	e9d0 4001 	ldrd	r4, r0, [r0, #4]
 8005a2e:	46a4      	mov	ip, r4
  return ret;
}
 8005a30:	f85d 4b04 	ldr.w	r4, [sp], #4
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8005a34:	4760      	bx	ip

08005a36 <lis2mdl_write_reg>:
  *
  */
int32_t lis2mdl_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8005a36:	b410      	push	{r4}
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8005a38:	6804      	ldr	r4, [r0, #0]
 8005a3a:	6880      	ldr	r0, [r0, #8]
 8005a3c:	46a4      	mov	ip, r4
  return ret;
}
 8005a3e:	f85d 4b04 	ldr.w	r4, [sp], #4
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8005a42:	4760      	bx	ip

08005a44 <lis2mdl_operating_mode_set>:
  * @retval        interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_operating_mode_set(stmdev_ctx_t *ctx,
                                   lis2mdl_md_t val)
{
 8005a44:	b537      	push	{r0, r1, r2, r4, r5, lr}
  lis2mdl_cfg_reg_a_t reg;
  int32_t ret;
  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 8005a46:	2301      	movs	r3, #1
{
 8005a48:	460d      	mov	r5, r1
  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 8005a4a:	aa01      	add	r2, sp, #4
 8005a4c:	2160      	movs	r1, #96	; 0x60
{
 8005a4e:	4604      	mov	r4, r0
  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 8005a50:	f7ff ffea 	bl	8005a28 <lis2mdl_read_reg>

  if (ret == 0) {
 8005a54:	b958      	cbnz	r0, 8005a6e <lis2mdl_operating_mode_set+0x2a>
    reg.md = (uint8_t)val;
 8005a56:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8005a5a:	f365 0301 	bfi	r3, r5, #0, #2
 8005a5e:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 8005a62:	aa01      	add	r2, sp, #4
 8005a64:	2301      	movs	r3, #1
 8005a66:	2160      	movs	r1, #96	; 0x60
 8005a68:	4620      	mov	r0, r4
 8005a6a:	f7ff ffe4 	bl	8005a36 <lis2mdl_write_reg>
  }

  return ret;
}
 8005a6e:	b003      	add	sp, #12
 8005a70:	bd30      	pop	{r4, r5, pc}

08005a72 <lis2mdl_data_rate_set>:
  * @param  val   change the values of odr in reg CFG_REG_A
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_data_rate_set(stmdev_ctx_t *ctx, lis2mdl_odr_t val)
{
 8005a72:	b537      	push	{r0, r1, r2, r4, r5, lr}
  lis2mdl_cfg_reg_a_t reg;
  int32_t ret;
  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 8005a74:	2301      	movs	r3, #1
{
 8005a76:	460d      	mov	r5, r1
  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 8005a78:	aa01      	add	r2, sp, #4
 8005a7a:	2160      	movs	r1, #96	; 0x60
{
 8005a7c:	4604      	mov	r4, r0
  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 8005a7e:	f7ff ffd3 	bl	8005a28 <lis2mdl_read_reg>

  if (ret == 0) {
 8005a82:	b958      	cbnz	r0, 8005a9c <lis2mdl_data_rate_set+0x2a>
    reg.odr = (uint8_t)val;
 8005a84:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8005a88:	f365 0383 	bfi	r3, r5, #2, #2
 8005a8c:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 8005a90:	aa01      	add	r2, sp, #4
 8005a92:	2301      	movs	r3, #1
 8005a94:	2160      	movs	r1, #96	; 0x60
 8005a96:	4620      	mov	r0, r4
 8005a98:	f7ff ffcd 	bl	8005a36 <lis2mdl_write_reg>
  }

  return ret;
}
 8005a9c:	b003      	add	sp, #12
 8005a9e:	bd30      	pop	{r4, r5, pc}

08005aa0 <lis2mdl_data_rate_get>:
  * @param  val   Get the values of odr in reg CFG_REG_A.(ptr)
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_data_rate_get(stmdev_ctx_t *ctx, lis2mdl_odr_t *val)
{
 8005aa0:	b513      	push	{r0, r1, r4, lr}
  lis2mdl_cfg_reg_a_t reg;
  int32_t ret;
  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 8005aa2:	2301      	movs	r3, #1
 8005aa4:	aa01      	add	r2, sp, #4
{
 8005aa6:	460c      	mov	r4, r1
  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 8005aa8:	2160      	movs	r1, #96	; 0x60
 8005aaa:	f7ff ffbd 	bl	8005a28 <lis2mdl_read_reg>

  switch (reg.odr) {
 8005aae:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8005ab2:	f3c3 0281 	ubfx	r2, r3, #2, #2
 8005ab6:	2a02      	cmp	r2, #2
 8005ab8:	d007      	beq.n	8005aca <lis2mdl_data_rate_get+0x2a>
 8005aba:	2a03      	cmp	r2, #3
 8005abc:	d005      	beq.n	8005aca <lis2mdl_data_rate_get+0x2a>
 8005abe:	2a01      	cmp	r2, #1
 8005ac0:	d003      	beq.n	8005aca <lis2mdl_data_rate_get+0x2a>
    case LIS2MDL_ODR_10Hz:
      *val = LIS2MDL_ODR_10Hz;
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	7023      	strb	r3, [r4, #0]
      *val = LIS2MDL_ODR_10Hz;
      break;
  }

  return ret;
}
 8005ac6:	b002      	add	sp, #8
 8005ac8:	bd10      	pop	{r4, pc}
      *val = LIS2MDL_ODR_100Hz;
 8005aca:	7022      	strb	r2, [r4, #0]
  return ret;
 8005acc:	e7fb      	b.n	8005ac6 <lis2mdl_data_rate_get+0x26>

08005ace <lis2mdl_block_data_update_set>:
  * @param  val   change the values of bdu in reg CFG_REG_C
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8005ace:	b537      	push	{r0, r1, r2, r4, r5, lr}
  lis2mdl_cfg_reg_c_t reg;
  int32_t ret;
  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 8005ad0:	2301      	movs	r3, #1
{
 8005ad2:	460d      	mov	r5, r1
  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 8005ad4:	aa01      	add	r2, sp, #4
 8005ad6:	2162      	movs	r1, #98	; 0x62
{
 8005ad8:	4604      	mov	r4, r0
  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 8005ada:	f7ff ffa5 	bl	8005a28 <lis2mdl_read_reg>

  if (ret == 0) {
 8005ade:	b958      	cbnz	r0, 8005af8 <lis2mdl_block_data_update_set+0x2a>
    reg.bdu = val;
 8005ae0:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8005ae4:	f365 1304 	bfi	r3, r5, #4, #1
 8005ae8:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 8005aec:	aa01      	add	r2, sp, #4
 8005aee:	2301      	movs	r3, #1
 8005af0:	2162      	movs	r1, #98	; 0x62
 8005af2:	4620      	mov	r0, r4
 8005af4:	f7ff ff9f 	bl	8005a36 <lis2mdl_write_reg>
  }

  return ret;
}
 8005af8:	b003      	add	sp, #12
 8005afa:	bd30      	pop	{r4, r5, pc}

08005afc <lis2mdl_magnetic_raw_get>:
  * @param  buff  that stores data read
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_magnetic_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8005afc:	b513      	push	{r0, r1, r4, lr}
  uint8_t buff[6];
  int32_t ret;
  ret = lis2mdl_read_reg(ctx, LIS2MDL_OUTX_L_REG, buff, 6);
 8005afe:	2306      	movs	r3, #6
{
 8005b00:	460c      	mov	r4, r1
  ret = lis2mdl_read_reg(ctx, LIS2MDL_OUTX_L_REG, buff, 6);
 8005b02:	466a      	mov	r2, sp
 8005b04:	2168      	movs	r1, #104	; 0x68
 8005b06:	f7ff ff8f 	bl	8005a28 <lis2mdl_read_reg>
  val[0] = (int16_t)buff[1];
  val[0] = (val[0] * 256) +  (int16_t)buff[0];
 8005b0a:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8005b0e:	f89d 3000 	ldrb.w	r3, [sp]
 8005b12:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8005b16:	8023      	strh	r3, [r4, #0]
  val[1] = (int16_t)buff[3];
  val[1] = (val[1] * 256) +  (int16_t)buff[2];
 8005b18:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8005b1c:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8005b20:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8005b24:	8063      	strh	r3, [r4, #2]
  val[2] = (int16_t)buff[5];
  val[2] = (val[2] * 256) +  (int16_t)buff[4];
 8005b26:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8005b2a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8005b2e:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8005b32:	80a3      	strh	r3, [r4, #4]
  return ret;
}
 8005b34:	b002      	add	sp, #8
 8005b36:	bd10      	pop	{r4, pc}

08005b38 <lis2mdl_device_id_get>:
  * @param  buff  that stores data read
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8005b38:	460a      	mov	r2, r1
  int32_t ret;
  ret = lis2mdl_read_reg(ctx, LIS2MDL_WHO_AM_I, buff, 1);
 8005b3a:	2301      	movs	r3, #1
 8005b3c:	214f      	movs	r1, #79	; 0x4f
 8005b3e:	f7ff bf73 	b.w	8005a28 <lis2mdl_read_reg>

08005b42 <lis2mdl_self_test_set>:
  * @param  val   change the values of self_test in reg CFG_REG_C
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_self_test_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8005b42:	b537      	push	{r0, r1, r2, r4, r5, lr}
  lis2mdl_cfg_reg_c_t reg;
  int32_t ret;
  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 8005b44:	2301      	movs	r3, #1
{
 8005b46:	460d      	mov	r5, r1
  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 8005b48:	aa01      	add	r2, sp, #4
 8005b4a:	2162      	movs	r1, #98	; 0x62
{
 8005b4c:	4604      	mov	r4, r0
  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 8005b4e:	f7ff ff6b 	bl	8005a28 <lis2mdl_read_reg>

  if (ret == 0) {
 8005b52:	b958      	cbnz	r0, 8005b6c <lis2mdl_self_test_set+0x2a>
    reg.self_test = val;
 8005b54:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8005b58:	f365 0341 	bfi	r3, r5, #1, #1
 8005b5c:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 8005b60:	aa01      	add	r2, sp, #4
 8005b62:	2301      	movs	r3, #1
 8005b64:	2162      	movs	r1, #98	; 0x62
 8005b66:	4620      	mov	r0, r4
 8005b68:	f7ff ff65 	bl	8005a36 <lis2mdl_write_reg>
  }

  return ret;
}
 8005b6c:	b003      	add	sp, #12
 8005b6e:	bd30      	pop	{r4, r5, pc}

08005b70 <lis2mdl_i2c_interface_set>:
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_i2c_interface_set(stmdev_ctx_t *ctx,
                                  lis2mdl_i2c_dis_t val)
{
 8005b70:	b537      	push	{r0, r1, r2, r4, r5, lr}
  lis2mdl_cfg_reg_c_t reg;
  int32_t ret;
  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 8005b72:	2301      	movs	r3, #1
{
 8005b74:	460d      	mov	r5, r1
  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 8005b76:	aa01      	add	r2, sp, #4
 8005b78:	2162      	movs	r1, #98	; 0x62
{
 8005b7a:	4604      	mov	r4, r0
  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 8005b7c:	f7ff ff54 	bl	8005a28 <lis2mdl_read_reg>

  if (ret == 0) {
 8005b80:	b958      	cbnz	r0, 8005b9a <lis2mdl_i2c_interface_set+0x2a>
    reg.i2c_dis = (uint8_t)val;
 8005b82:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8005b86:	f365 1345 	bfi	r3, r5, #5, #1
 8005b8a:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 8005b8e:	aa01      	add	r2, sp, #4
 8005b90:	2301      	movs	r3, #1
 8005b92:	2162      	movs	r1, #98	; 0x62
 8005b94:	4620      	mov	r0, r4
 8005b96:	f7ff ff4e 	bl	8005a36 <lis2mdl_write_reg>
  }

  return ret;
}
 8005b9a:	b003      	add	sp, #12
 8005b9c:	bd30      	pop	{r4, r5, pc}
	...

08005ba0 <LPS22HH_GetCapabilities>:
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Humidity    = 0;
  Capabilities->Pressure    = 1;
  Capabilities->Temperature = 1;
 8005ba0:	f240 1301 	movw	r3, #257	; 0x101
 8005ba4:	600b      	str	r3, [r1, #0]
  Capabilities->LowPower    = 0;
  Capabilities->HumMaxOdr   = 0.0f;
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	604b      	str	r3, [r1, #4]
  Capabilities->TempMaxOdr  = 200.0f;
 8005baa:	4b02      	ldr	r3, [pc, #8]	; (8005bb4 <LPS22HH_GetCapabilities+0x14>)
 8005bac:	608b      	str	r3, [r1, #8]
  Capabilities->PressMaxOdr = 200.0f;
 8005bae:	60cb      	str	r3, [r1, #12]
  return LPS22HH_OK;
}
 8005bb0:	2000      	movs	r0, #0
 8005bb2:	4770      	bx	lr
 8005bb4:	43480000 	.word	0x43480000

08005bb8 <ReadRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8005bb8:	b410      	push	{r4}
  LPS22HH_Object_t *pObj = (LPS22HH_Object_t *)Handle;

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8005bba:	6944      	ldr	r4, [r0, #20]
 8005bbc:	7b00      	ldrb	r0, [r0, #12]
 8005bbe:	46a4      	mov	ip, r4
}
 8005bc0:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8005bc4:	4760      	bx	ip

08005bc6 <WriteRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8005bc6:	b410      	push	{r4}
  LPS22HH_Object_t *pObj = (LPS22HH_Object_t *)Handle;

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8005bc8:	6904      	ldr	r4, [r0, #16]
 8005bca:	7b00      	ldrb	r0, [r0, #12]
 8005bcc:	46a4      	mov	ip, r4
}
 8005bce:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8005bd2:	4760      	bx	ip

08005bd4 <LPS22HH_Init>:
{
 8005bd4:	b538      	push	{r3, r4, r5, lr}
  if (pObj->is_initialized == 0U)
 8005bd6:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
{
 8005bda:	4604      	mov	r4, r0
  if (pObj->is_initialized == 0U)
 8005bdc:	bb23      	cbnz	r3, 8005c28 <LPS22HH_Init+0x54>
  if (lps22hh_i3c_interface_set(&(pObj->Ctx), LPS22HH_I3C_DISABLE) != LPS22HH_OK)
 8005bde:	f100 051c 	add.w	r5, r0, #28
 8005be2:	2111      	movs	r1, #17
 8005be4:	4628      	mov	r0, r5
 8005be6:	f000 fb05 	bl	80061f4 <lps22hh_i3c_interface_set>
 8005bea:	b110      	cbz	r0, 8005bf2 <LPS22HH_Init+0x1e>
      return LPS22HH_ERROR;
 8005bec:	f04f 30ff 	mov.w	r0, #4294967295
}
 8005bf0:	bd38      	pop	{r3, r4, r5, pc}
  if (lps22hh_data_rate_set(&(pObj->Ctx), (lps22hh_odr_t)(LPS22HH_POWER_DOWN | 0x10)) != LPS22HH_OK)
 8005bf2:	2110      	movs	r1, #16
 8005bf4:	4628      	mov	r0, r5
 8005bf6:	f000 fa26 	bl	8006046 <lps22hh_data_rate_set>
 8005bfa:	4601      	mov	r1, r0
 8005bfc:	2800      	cmp	r0, #0
 8005bfe:	d1f5      	bne.n	8005bec <LPS22HH_Init+0x18>
  if (lps22hh_lp_bandwidth_set(&(pObj->Ctx), LPS22HH_LPF_ODR_DIV_2) != LPS22HH_OK)
 8005c00:	4628      	mov	r0, r5
 8005c02:	f000 fae0 	bl	80061c6 <lps22hh_lp_bandwidth_set>
 8005c06:	2800      	cmp	r0, #0
 8005c08:	d1f0      	bne.n	8005bec <LPS22HH_Init+0x18>
  if (lps22hh_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LPS22HH_OK)
 8005c0a:	2101      	movs	r1, #1
 8005c0c:	4628      	mov	r0, r5
 8005c0e:	f000 fa03 	bl	8006018 <lps22hh_block_data_update_set>
 8005c12:	2800      	cmp	r0, #0
 8005c14:	d1ea      	bne.n	8005bec <LPS22HH_Init+0x18>
  if (lps22hh_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LPS22HH_OK)
 8005c16:	2101      	movs	r1, #1
 8005c18:	4628      	mov	r0, r5
 8005c1a:	f000 fabd 	bl	8006198 <lps22hh_auto_increment_set>
 8005c1e:	2800      	cmp	r0, #0
 8005c20:	d1e4      	bne.n	8005bec <LPS22HH_Init+0x18>
  pObj->last_odr = LPS22HH_25_Hz;
 8005c22:	2303      	movs	r3, #3
 8005c24:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
  pObj->is_initialized = 1U;
 8005c28:	2301      	movs	r3, #1
 8005c2a:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
  return LPS22HH_OK;
 8005c2e:	2000      	movs	r0, #0
 8005c30:	e7de      	b.n	8005bf0 <LPS22HH_Init+0x1c>

08005c32 <LPS22HH_ReadID>:
{
 8005c32:	b508      	push	{r3, lr}
  if (lps22hh_device_id_get(&(pObj->Ctx), Id) != LPS22HH_OK)
 8005c34:	301c      	adds	r0, #28
 8005c36:	f000 faaa 	bl	800618e <lps22hh_device_id_get>
 8005c3a:	3800      	subs	r0, #0
 8005c3c:	bf18      	it	ne
 8005c3e:	2001      	movne	r0, #1
}
 8005c40:	4240      	negs	r0, r0
 8005c42:	bd08      	pop	{r3, pc}

08005c44 <LPS22HH_GetOutputDataRate>:
{
 8005c44:	b513      	push	{r0, r1, r4, lr}
 8005c46:	460c      	mov	r4, r1
  if (lps22hh_data_rate_get(&(pObj->Ctx), &odr_low_level) != LPS22HH_OK)
 8005c48:	301c      	adds	r0, #28
 8005c4a:	f10d 0107 	add.w	r1, sp, #7
 8005c4e:	f000 fa28 	bl	80060a2 <lps22hh_data_rate_get>
 8005c52:	b9e0      	cbnz	r0, 8005c8e <LPS22HH_GetOutputDataRate+0x4a>
  switch (odr_low_level)
 8005c54:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8005c58:	2b07      	cmp	r3, #7
 8005c5a:	d818      	bhi.n	8005c8e <LPS22HH_GetOutputDataRate+0x4a>
 8005c5c:	e8df f003 	tbb	[pc, r3]
 8005c60:	0d0b0804 	.word	0x0d0b0804
 8005c64:	1513110f 	.word	0x1513110f
      *Odr = 0.0f;
 8005c68:	2300      	movs	r3, #0
      *Odr = 200.0f;
 8005c6a:	6023      	str	r3, [r4, #0]
}
 8005c6c:	b002      	add	sp, #8
 8005c6e:	bd10      	pop	{r4, pc}
      *Odr = 1.0f;
 8005c70:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8005c74:	e7f9      	b.n	8005c6a <LPS22HH_GetOutputDataRate+0x26>
      *Odr = 10.0f;
 8005c76:	4b07      	ldr	r3, [pc, #28]	; (8005c94 <LPS22HH_GetOutputDataRate+0x50>)
 8005c78:	e7f7      	b.n	8005c6a <LPS22HH_GetOutputDataRate+0x26>
      *Odr = 25.0f;
 8005c7a:	4b07      	ldr	r3, [pc, #28]	; (8005c98 <LPS22HH_GetOutputDataRate+0x54>)
 8005c7c:	e7f5      	b.n	8005c6a <LPS22HH_GetOutputDataRate+0x26>
      *Odr = 50.0f;
 8005c7e:	4b07      	ldr	r3, [pc, #28]	; (8005c9c <LPS22HH_GetOutputDataRate+0x58>)
 8005c80:	e7f3      	b.n	8005c6a <LPS22HH_GetOutputDataRate+0x26>
      *Odr = 75.0f;
 8005c82:	4b07      	ldr	r3, [pc, #28]	; (8005ca0 <LPS22HH_GetOutputDataRate+0x5c>)
 8005c84:	e7f1      	b.n	8005c6a <LPS22HH_GetOutputDataRate+0x26>
      *Odr = 100.0f;
 8005c86:	4b07      	ldr	r3, [pc, #28]	; (8005ca4 <LPS22HH_GetOutputDataRate+0x60>)
 8005c88:	e7ef      	b.n	8005c6a <LPS22HH_GetOutputDataRate+0x26>
      *Odr = 200.0f;
 8005c8a:	4b07      	ldr	r3, [pc, #28]	; (8005ca8 <LPS22HH_GetOutputDataRate+0x64>)
 8005c8c:	e7ed      	b.n	8005c6a <LPS22HH_GetOutputDataRate+0x26>
  switch (odr_low_level)
 8005c8e:	f04f 30ff 	mov.w	r0, #4294967295
 8005c92:	e7eb      	b.n	8005c6c <LPS22HH_GetOutputDataRate+0x28>
 8005c94:	41200000 	.word	0x41200000
 8005c98:	41c80000 	.word	0x41c80000
 8005c9c:	42480000 	.word	0x42480000
 8005ca0:	42960000 	.word	0x42960000
 8005ca4:	42c80000 	.word	0x42c80000
 8005ca8:	43480000 	.word	0x43480000

08005cac <LPS22HH_PRESS_GetOutputDataRate>:
  return LPS22HH_GetOutputDataRate(pObj, Odr);
 8005cac:	f7ff bfca 	b.w	8005c44 <LPS22HH_GetOutputDataRate>

08005cb0 <LPS22HH_SetOutputDataRate_When_Enabled>:
          : (Odr <=  10.0f) ? LPS22HH_10_Hz
 8005cb0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8005cb4:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8005cb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
{
 8005cbc:	b538      	push	{r3, r4, r5, lr}
 8005cbe:	4604      	mov	r4, r0
          : (Odr <=  10.0f) ? LPS22HH_10_Hz
 8005cc0:	d934      	bls.n	8005d2c <LPS22HH_SetOutputDataRate_When_Enabled+0x7c>
 8005cc2:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 8005cc6:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8005cca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005cce:	d92f      	bls.n	8005d30 <LPS22HH_SetOutputDataRate_When_Enabled+0x80>
 8005cd0:	eef3 7a09 	vmov.f32	s15, #57	; 0x41c80000  25.0
 8005cd4:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8005cd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005cdc:	d92a      	bls.n	8005d34 <LPS22HH_SetOutputDataRate_When_Enabled+0x84>
 8005cde:	eddf 7a1a 	vldr	s15, [pc, #104]	; 8005d48 <LPS22HH_SetOutputDataRate_When_Enabled+0x98>
 8005ce2:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8005ce6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005cea:	d925      	bls.n	8005d38 <LPS22HH_SetOutputDataRate_When_Enabled+0x88>
 8005cec:	eddf 7a17 	vldr	s15, [pc, #92]	; 8005d4c <LPS22HH_SetOutputDataRate_When_Enabled+0x9c>
 8005cf0:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8005cf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005cf8:	d920      	bls.n	8005d3c <LPS22HH_SetOutputDataRate_When_Enabled+0x8c>
 8005cfa:	eddf 7a15 	vldr	s15, [pc, #84]	; 8005d50 <LPS22HH_SetOutputDataRate_When_Enabled+0xa0>
 8005cfe:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8005d02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d06:	bf94      	ite	ls
 8005d08:	2106      	movls	r1, #6
 8005d0a:	2107      	movhi	r1, #7
  if (lps22hh_data_rate_set(&(pObj->Ctx), new_odr) != LPS22HH_OK)
 8005d0c:	f104 051c 	add.w	r5, r4, #28
 8005d10:	4628      	mov	r0, r5
 8005d12:	f000 f998 	bl	8006046 <lps22hh_data_rate_set>
 8005d16:	b998      	cbnz	r0, 8005d40 <LPS22HH_SetOutputDataRate_When_Enabled+0x90>
  if (lps22hh_data_rate_get(&(pObj->Ctx), &pObj->last_odr) != LPS22HH_OK)
 8005d18:	f104 012b 	add.w	r1, r4, #43	; 0x2b
 8005d1c:	4628      	mov	r0, r5
 8005d1e:	f000 f9c0 	bl	80060a2 <lps22hh_data_rate_get>
 8005d22:	3800      	subs	r0, #0
 8005d24:	bf18      	it	ne
 8005d26:	2001      	movne	r0, #1
 8005d28:	4240      	negs	r0, r0
}
 8005d2a:	bd38      	pop	{r3, r4, r5, pc}
          : (Odr <=  10.0f) ? LPS22HH_10_Hz
 8005d2c:	2101      	movs	r1, #1
 8005d2e:	e7ed      	b.n	8005d0c <LPS22HH_SetOutputDataRate_When_Enabled+0x5c>
 8005d30:	2102      	movs	r1, #2
 8005d32:	e7eb      	b.n	8005d0c <LPS22HH_SetOutputDataRate_When_Enabled+0x5c>
 8005d34:	2103      	movs	r1, #3
 8005d36:	e7e9      	b.n	8005d0c <LPS22HH_SetOutputDataRate_When_Enabled+0x5c>
 8005d38:	2104      	movs	r1, #4
 8005d3a:	e7e7      	b.n	8005d0c <LPS22HH_SetOutputDataRate_When_Enabled+0x5c>
 8005d3c:	2105      	movs	r1, #5
 8005d3e:	e7e5      	b.n	8005d0c <LPS22HH_SetOutputDataRate_When_Enabled+0x5c>
    return LPS22HH_ERROR;
 8005d40:	f04f 30ff 	mov.w	r0, #4294967295
 8005d44:	e7f1      	b.n	8005d2a <LPS22HH_SetOutputDataRate_When_Enabled+0x7a>
 8005d46:	bf00      	nop
 8005d48:	42480000 	.word	0x42480000
 8005d4c:	42960000 	.word	0x42960000
 8005d50:	42c80000 	.word	0x42c80000

08005d54 <LPS22HH_PRESS_GetPressure>:
{
 8005d54:	b537      	push	{r0, r1, r2, r4, r5, lr}
  (void)memset(data_raw_pressure.u8bit, 0x00, sizeof(int32_t));
 8005d56:	2300      	movs	r3, #0
{
 8005d58:	460d      	mov	r5, r1
  if (lps22hh_pressure_raw_get(&(pObj->Ctx), (uint32_t *)&data_raw_pressure.i32bit) != LPS22HH_OK)
 8005d5a:	301c      	adds	r0, #28
 8005d5c:	a901      	add	r1, sp, #4
  (void)memset(data_raw_pressure.u8bit, 0x00, sizeof(int32_t));
 8005d5e:	9301      	str	r3, [sp, #4]
  if (lps22hh_pressure_raw_get(&(pObj->Ctx), (uint32_t *)&data_raw_pressure.i32bit) != LPS22HH_OK)
 8005d60:	f000 f9f0 	bl	8006144 <lps22hh_pressure_raw_get>
 8005d64:	4604      	mov	r4, r0
 8005d66:	b938      	cbnz	r0, 8005d78 <LPS22HH_PRESS_GetPressure+0x24>
  *Value = lps22hh_from_lsb_to_hpa((uint32_t)data_raw_pressure.i32bit);
 8005d68:	9801      	ldr	r0, [sp, #4]
 8005d6a:	f000 f943 	bl	8005ff4 <lps22hh_from_lsb_to_hpa>
 8005d6e:	ed85 0a00 	vstr	s0, [r5]
}
 8005d72:	4620      	mov	r0, r4
 8005d74:	b003      	add	sp, #12
 8005d76:	bd30      	pop	{r4, r5, pc}
    return LPS22HH_ERROR;
 8005d78:	f04f 34ff 	mov.w	r4, #4294967295
 8005d7c:	e7f9      	b.n	8005d72 <LPS22HH_PRESS_GetPressure+0x1e>

08005d7e <LPS22HH_TEMP_GetTemperature>:
{
 8005d7e:	b537      	push	{r0, r1, r2, r4, r5, lr}
  (void)memset(data_raw_temperature.u8bit, 0x00, sizeof(int16_t));
 8005d80:	2300      	movs	r3, #0
{
 8005d82:	460d      	mov	r5, r1
  if (lps22hh_temperature_raw_get(&(pObj->Ctx), &data_raw_temperature.i16bit) != LPS22HH_OK)
 8005d84:	301c      	adds	r0, #28
 8005d86:	a901      	add	r1, sp, #4
  (void)memset(data_raw_temperature.u8bit, 0x00, sizeof(int16_t));
 8005d88:	f8ad 3004 	strh.w	r3, [sp, #4]
  if (lps22hh_temperature_raw_get(&(pObj->Ctx), &data_raw_temperature.i16bit) != LPS22HH_OK)
 8005d8c:	f000 f9ef 	bl	800616e <lps22hh_temperature_raw_get>
 8005d90:	4604      	mov	r4, r0
 8005d92:	b940      	cbnz	r0, 8005da6 <LPS22HH_TEMP_GetTemperature+0x28>
  *Value = lps22hh_from_lsb_to_celsius(data_raw_temperature.i16bit);
 8005d94:	f9bd 0004 	ldrsh.w	r0, [sp, #4]
 8005d98:	f000 f932 	bl	8006000 <lps22hh_from_lsb_to_celsius>
 8005d9c:	ed85 0a00 	vstr	s0, [r5]
}
 8005da0:	4620      	mov	r0, r4
 8005da2:	b003      	add	sp, #12
 8005da4:	bd30      	pop	{r4, r5, pc}
    return LPS22HH_ERROR;
 8005da6:	f04f 34ff 	mov.w	r4, #4294967295
 8005daa:	e7f9      	b.n	8005da0 <LPS22HH_TEMP_GetTemperature+0x22>

08005dac <LPS22HH_SetOutputDataRate_When_Disabled.isra.0>:
                 : (Odr <=  10.0f) ? LPS22HH_10_Hz
 8005dac:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8005db0:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8005db4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005db8:	d927      	bls.n	8005e0a <LPS22HH_SetOutputDataRate_When_Disabled.isra.0+0x5e>
 8005dba:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 8005dbe:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8005dc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005dc6:	d922      	bls.n	8005e0e <LPS22HH_SetOutputDataRate_When_Disabled.isra.0+0x62>
 8005dc8:	eef3 7a09 	vmov.f32	s15, #57	; 0x41c80000  25.0
 8005dcc:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8005dd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005dd4:	d91d      	bls.n	8005e12 <LPS22HH_SetOutputDataRate_When_Disabled.isra.0+0x66>
 8005dd6:	eddf 7a12 	vldr	s15, [pc, #72]	; 8005e20 <LPS22HH_SetOutputDataRate_When_Disabled.isra.0+0x74>
 8005dda:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8005dde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005de2:	d918      	bls.n	8005e16 <LPS22HH_SetOutputDataRate_When_Disabled.isra.0+0x6a>
 8005de4:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8005e24 <LPS22HH_SetOutputDataRate_When_Disabled.isra.0+0x78>
 8005de8:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8005dec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005df0:	d913      	bls.n	8005e1a <LPS22HH_SetOutputDataRate_When_Disabled.isra.0+0x6e>
 8005df2:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8005e28 <LPS22HH_SetOutputDataRate_When_Disabled.isra.0+0x7c>
 8005df6:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8005dfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005dfe:	bf94      	ite	ls
 8005e00:	2306      	movls	r3, #6
 8005e02:	2307      	movhi	r3, #7
  pObj->last_odr = (Odr <=   1.0f) ? LPS22HH_1_Hz
 8005e04:	7003      	strb	r3, [r0, #0]
}
 8005e06:	2000      	movs	r0, #0
 8005e08:	4770      	bx	lr
                 : (Odr <=  10.0f) ? LPS22HH_10_Hz
 8005e0a:	2301      	movs	r3, #1
 8005e0c:	e7fa      	b.n	8005e04 <LPS22HH_SetOutputDataRate_When_Disabled.isra.0+0x58>
 8005e0e:	2302      	movs	r3, #2
 8005e10:	e7f8      	b.n	8005e04 <LPS22HH_SetOutputDataRate_When_Disabled.isra.0+0x58>
 8005e12:	2303      	movs	r3, #3
 8005e14:	e7f6      	b.n	8005e04 <LPS22HH_SetOutputDataRate_When_Disabled.isra.0+0x58>
 8005e16:	2304      	movs	r3, #4
 8005e18:	e7f4      	b.n	8005e04 <LPS22HH_SetOutputDataRate_When_Disabled.isra.0+0x58>
 8005e1a:	2305      	movs	r3, #5
 8005e1c:	e7f2      	b.n	8005e04 <LPS22HH_SetOutputDataRate_When_Disabled.isra.0+0x58>
 8005e1e:	bf00      	nop
 8005e20:	42480000 	.word	0x42480000
 8005e24:	42960000 	.word	0x42960000
 8005e28:	42c80000 	.word	0x42c80000

08005e2c <LPS22HH_PRESS_SetOutputDataRate>:
  if (pObj->press_is_enabled == 1U)
 8005e2c:	f890 2029 	ldrb.w	r2, [r0, #41]	; 0x29
 8005e30:	2a01      	cmp	r2, #1
 8005e32:	d101      	bne.n	8005e38 <LPS22HH_PRESS_SetOutputDataRate+0xc>
    return LPS22HH_SetOutputDataRate_When_Enabled(pObj, Odr);
 8005e34:	f7ff bf3c 	b.w	8005cb0 <LPS22HH_SetOutputDataRate_When_Enabled>
    return LPS22HH_SetOutputDataRate_When_Disabled(pObj, Odr);
 8005e38:	302b      	adds	r0, #43	; 0x2b
 8005e3a:	f7ff bfb7 	b.w	8005dac <LPS22HH_SetOutputDataRate_When_Disabled.isra.0>

08005e3e <LPS22HH_TEMP_SetOutputDataRate>:
  if (pObj->temp_is_enabled == 1U)
 8005e3e:	f890 202a 	ldrb.w	r2, [r0, #42]	; 0x2a
 8005e42:	2a01      	cmp	r2, #1
 8005e44:	d101      	bne.n	8005e4a <LPS22HH_TEMP_SetOutputDataRate+0xc>
    return LPS22HH_SetOutputDataRate_When_Enabled(pObj, Odr);
 8005e46:	f7ff bf33 	b.w	8005cb0 <LPS22HH_SetOutputDataRate_When_Enabled>
    return LPS22HH_SetOutputDataRate_When_Disabled(pObj, Odr);
 8005e4a:	302b      	adds	r0, #43	; 0x2b
 8005e4c:	f7ff bfae 	b.w	8005dac <LPS22HH_SetOutputDataRate_When_Disabled.isra.0>

08005e50 <LPS22HH_PRESS_Enable>:
{
 8005e50:	b510      	push	{r4, lr}
  if (pObj->press_is_enabled == 1U)
 8005e52:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
 8005e56:	2b01      	cmp	r3, #1
{
 8005e58:	4604      	mov	r4, r0
  if (pObj->press_is_enabled == 1U)
 8005e5a:	d009      	beq.n	8005e70 <LPS22HH_PRESS_Enable+0x20>
  if (lps22hh_data_rate_set(&(pObj->Ctx), pObj->last_odr) != LPS22HH_OK)
 8005e5c:	f890 102b 	ldrb.w	r1, [r0, #43]	; 0x2b
 8005e60:	301c      	adds	r0, #28
 8005e62:	f000 f8f0 	bl	8006046 <lps22hh_data_rate_set>
 8005e66:	b928      	cbnz	r0, 8005e74 <LPS22HH_PRESS_Enable+0x24>
  pObj->press_is_enabled = 1;
 8005e68:	2301      	movs	r3, #1
 8005e6a:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
}
 8005e6e:	bd10      	pop	{r4, pc}
    return LPS22HH_OK;
 8005e70:	2000      	movs	r0, #0
 8005e72:	e7fc      	b.n	8005e6e <LPS22HH_PRESS_Enable+0x1e>
    return LPS22HH_ERROR;
 8005e74:	f04f 30ff 	mov.w	r0, #4294967295
 8005e78:	e7f9      	b.n	8005e6e <LPS22HH_PRESS_Enable+0x1e>

08005e7a <LPS22HH_TEMP_Enable>:
{
 8005e7a:	b510      	push	{r4, lr}
  if (pObj->temp_is_enabled == 1U)
 8005e7c:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
 8005e80:	2b01      	cmp	r3, #1
{
 8005e82:	4604      	mov	r4, r0
  if (pObj->temp_is_enabled == 1U)
 8005e84:	d009      	beq.n	8005e9a <LPS22HH_TEMP_Enable+0x20>
  if (lps22hh_data_rate_set(&(pObj->Ctx), pObj->last_odr) != LPS22HH_OK)
 8005e86:	f890 102b 	ldrb.w	r1, [r0, #43]	; 0x2b
 8005e8a:	301c      	adds	r0, #28
 8005e8c:	f000 f8db 	bl	8006046 <lps22hh_data_rate_set>
 8005e90:	b928      	cbnz	r0, 8005e9e <LPS22HH_TEMP_Enable+0x24>
  pObj->temp_is_enabled = 1;
 8005e92:	2301      	movs	r3, #1
 8005e94:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
}
 8005e98:	bd10      	pop	{r4, pc}
    return LPS22HH_OK;
 8005e9a:	2000      	movs	r0, #0
 8005e9c:	e7fc      	b.n	8005e98 <LPS22HH_TEMP_Enable+0x1e>
    return LPS22HH_ERROR;
 8005e9e:	f04f 30ff 	mov.w	r0, #4294967295
 8005ea2:	e7f9      	b.n	8005e98 <LPS22HH_TEMP_Enable+0x1e>

08005ea4 <LPS22HH_PRESS_Disable>:
{
 8005ea4:	b538      	push	{r3, r4, r5, lr}
 8005ea6:	4604      	mov	r4, r0
  if (pObj->press_is_enabled == 0U)
 8005ea8:	f890 0029 	ldrb.w	r0, [r0, #41]	; 0x29
 8005eac:	b130      	cbz	r0, 8005ebc <LPS22HH_PRESS_Disable+0x18>
  if (pObj->temp_is_enabled == 0U)
 8005eae:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
 8005eb2:	b123      	cbz	r3, 8005ebe <LPS22HH_PRESS_Disable+0x1a>
  pObj->press_is_enabled = 0;
 8005eb4:	2300      	movs	r3, #0
 8005eb6:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
  return LPS22HH_OK;
 8005eba:	4618      	mov	r0, r3
}
 8005ebc:	bd38      	pop	{r3, r4, r5, pc}
    if (lps22hh_data_rate_get(&(pObj->Ctx), &pObj->last_odr) != LPS22HH_OK)
 8005ebe:	f104 051c 	add.w	r5, r4, #28
 8005ec2:	f104 012b 	add.w	r1, r4, #43	; 0x2b
 8005ec6:	4628      	mov	r0, r5
 8005ec8:	f000 f8eb 	bl	80060a2 <lps22hh_data_rate_get>
 8005ecc:	4601      	mov	r1, r0
 8005ece:	b110      	cbz	r0, 8005ed6 <LPS22HH_PRESS_Disable+0x32>
      return LPS22HH_ERROR;
 8005ed0:	f04f 30ff 	mov.w	r0, #4294967295
 8005ed4:	e7f2      	b.n	8005ebc <LPS22HH_PRESS_Disable+0x18>
    if (lps22hh_data_rate_set(&(pObj->Ctx), LPS22HH_POWER_DOWN) != LPS22HH_OK)
 8005ed6:	4628      	mov	r0, r5
 8005ed8:	f000 f8b5 	bl	8006046 <lps22hh_data_rate_set>
 8005edc:	2800      	cmp	r0, #0
 8005ede:	d0e9      	beq.n	8005eb4 <LPS22HH_PRESS_Disable+0x10>
 8005ee0:	e7f6      	b.n	8005ed0 <LPS22HH_PRESS_Disable+0x2c>

08005ee2 <LPS22HH_TEMP_Disable>:
{
 8005ee2:	b538      	push	{r3, r4, r5, lr}
 8005ee4:	4604      	mov	r4, r0
  if (pObj->temp_is_enabled == 0U)
 8005ee6:	f890 002a 	ldrb.w	r0, [r0, #42]	; 0x2a
 8005eea:	b130      	cbz	r0, 8005efa <LPS22HH_TEMP_Disable+0x18>
  if (pObj->press_is_enabled == 0U)
 8005eec:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
 8005ef0:	b123      	cbz	r3, 8005efc <LPS22HH_TEMP_Disable+0x1a>
  pObj->temp_is_enabled = 0;
 8005ef2:	2300      	movs	r3, #0
 8005ef4:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
  return LPS22HH_OK;
 8005ef8:	4618      	mov	r0, r3
}
 8005efa:	bd38      	pop	{r3, r4, r5, pc}
    if (lps22hh_data_rate_get(&(pObj->Ctx), &pObj->last_odr) != LPS22HH_OK)
 8005efc:	f104 051c 	add.w	r5, r4, #28
 8005f00:	f104 012b 	add.w	r1, r4, #43	; 0x2b
 8005f04:	4628      	mov	r0, r5
 8005f06:	f000 f8cc 	bl	80060a2 <lps22hh_data_rate_get>
 8005f0a:	4601      	mov	r1, r0
 8005f0c:	b110      	cbz	r0, 8005f14 <LPS22HH_TEMP_Disable+0x32>
      return LPS22HH_ERROR;
 8005f0e:	f04f 30ff 	mov.w	r0, #4294967295
 8005f12:	e7f2      	b.n	8005efa <LPS22HH_TEMP_Disable+0x18>
    if (lps22hh_data_rate_set(&(pObj->Ctx), LPS22HH_POWER_DOWN) != LPS22HH_OK)
 8005f14:	4628      	mov	r0, r5
 8005f16:	f000 f896 	bl	8006046 <lps22hh_data_rate_set>
 8005f1a:	2800      	cmp	r0, #0
 8005f1c:	d0e9      	beq.n	8005ef2 <LPS22HH_TEMP_Disable+0x10>
 8005f1e:	e7f6      	b.n	8005f0e <LPS22HH_TEMP_Disable+0x2c>

08005f20 <LPS22HH_DeInit>:
{
 8005f20:	b510      	push	{r4, lr}
  if (pObj->is_initialized == 1U)
 8005f22:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
 8005f26:	2b01      	cmp	r3, #1
{
 8005f28:	4604      	mov	r4, r0
  if (pObj->is_initialized == 1U)
 8005f2a:	d003      	beq.n	8005f34 <LPS22HH_DeInit+0x14>
  pObj->is_initialized = 0;
 8005f2c:	2000      	movs	r0, #0
 8005f2e:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
}
 8005f32:	bd10      	pop	{r4, pc}
    if (LPS22HH_PRESS_Disable(pObj) != LPS22HH_OK)
 8005f34:	f7ff ffb6 	bl	8005ea4 <LPS22HH_PRESS_Disable>
 8005f38:	b110      	cbz	r0, 8005f40 <LPS22HH_DeInit+0x20>
      return LPS22HH_ERROR;
 8005f3a:	f04f 30ff 	mov.w	r0, #4294967295
 8005f3e:	e7f8      	b.n	8005f32 <LPS22HH_DeInit+0x12>
    if (LPS22HH_TEMP_Disable(pObj) != LPS22HH_OK)
 8005f40:	4620      	mov	r0, r4
 8005f42:	f7ff ffce 	bl	8005ee2 <LPS22HH_TEMP_Disable>
 8005f46:	2800      	cmp	r0, #0
 8005f48:	d0f0      	beq.n	8005f2c <LPS22HH_DeInit+0xc>
 8005f4a:	e7f6      	b.n	8005f3a <LPS22HH_DeInit+0x1a>

08005f4c <LPS22HH_TEMP_GetOutputDataRate>:
 8005f4c:	f7ff be7a 	b.w	8005c44 <LPS22HH_GetOutputDataRate>

08005f50 <LPS22HH_Write_Reg>:
{
 8005f50:	b507      	push	{r0, r1, r2, lr}
  if (lps22hh_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LPS22HH_OK)
 8005f52:	2301      	movs	r3, #1
{
 8005f54:	f88d 2007 	strb.w	r2, [sp, #7]
  if (lps22hh_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LPS22HH_OK)
 8005f58:	301c      	adds	r0, #28
 8005f5a:	f10d 0207 	add.w	r2, sp, #7
 8005f5e:	f000 f842 	bl	8005fe6 <lps22hh_write_reg>
 8005f62:	3800      	subs	r0, #0
 8005f64:	bf18      	it	ne
 8005f66:	2001      	movne	r0, #1
}
 8005f68:	4240      	negs	r0, r0
 8005f6a:	b003      	add	sp, #12
 8005f6c:	f85d fb04 	ldr.w	pc, [sp], #4

08005f70 <LPS22HH_RegisterBusIO>:
{
 8005f70:	b510      	push	{r4, lr}
  if (pObj == NULL)
 8005f72:	4604      	mov	r4, r0
 8005f74:	b910      	cbnz	r0, 8005f7c <LPS22HH_RegisterBusIO+0xc>
    ret = LPS22HH_ERROR;
 8005f76:	f04f 30ff 	mov.w	r0, #4294967295
}
 8005f7a:	bd10      	pop	{r4, pc}
    pObj->IO.DeInit    = pIO->DeInit;
 8005f7c:	684a      	ldr	r2, [r1, #4]
    pObj->IO.Init      = pIO->Init;
 8005f7e:	680b      	ldr	r3, [r1, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8005f80:	6042      	str	r2, [r0, #4]
    pObj->IO.BusType   = pIO->BusType;
 8005f82:	688a      	ldr	r2, [r1, #8]
    pObj->IO.Init      = pIO->Init;
 8005f84:	6003      	str	r3, [r0, #0]
    pObj->IO.BusType   = pIO->BusType;
 8005f86:	6082      	str	r2, [r0, #8]
    pObj->IO.Address   = pIO->Address;
 8005f88:	7b0a      	ldrb	r2, [r1, #12]
 8005f8a:	7302      	strb	r2, [r0, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8005f8c:	690a      	ldr	r2, [r1, #16]
 8005f8e:	6102      	str	r2, [r0, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8005f90:	694a      	ldr	r2, [r1, #20]
 8005f92:	6142      	str	r2, [r0, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8005f94:	698a      	ldr	r2, [r1, #24]
 8005f96:	6182      	str	r2, [r0, #24]
    pObj->Ctx.read_reg  = ReadRegWrap;
 8005f98:	4a0d      	ldr	r2, [pc, #52]	; (8005fd0 <LPS22HH_RegisterBusIO+0x60>)
 8005f9a:	6202      	str	r2, [r0, #32]
    pObj->Ctx.write_reg = WriteRegWrap;
 8005f9c:	4a0d      	ldr	r2, [pc, #52]	; (8005fd4 <LPS22HH_RegisterBusIO+0x64>)
 8005f9e:	61c2      	str	r2, [r0, #28]
    pObj->Ctx.handle   = pObj;
 8005fa0:	6240      	str	r0, [r0, #36]	; 0x24
    if (pObj->IO.Init == NULL)
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d0e7      	beq.n	8005f76 <LPS22HH_RegisterBusIO+0x6>
    else if (pObj->IO.Init() != LPS22HH_OK)
 8005fa6:	4798      	blx	r3
 8005fa8:	2800      	cmp	r0, #0
 8005faa:	d1e4      	bne.n	8005f76 <LPS22HH_RegisterBusIO+0x6>
      if (pObj->IO.BusType == LPS22HH_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8005fac:	68a3      	ldr	r3, [r4, #8]
 8005fae:	2b02      	cmp	r3, #2
 8005fb0:	d1e3      	bne.n	8005f7a <LPS22HH_RegisterBusIO+0xa>
        if (pObj->is_initialized == 0U)
 8005fb2:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d1df      	bne.n	8005f7a <LPS22HH_RegisterBusIO+0xa>
          if (LPS22HH_Write_Reg(pObj, LPS22HH_CTRL_REG1, data) != LPS22HH_OK)
 8005fba:	2201      	movs	r2, #1
 8005fbc:	2110      	movs	r1, #16
 8005fbe:	4620      	mov	r0, r4
 8005fc0:	f7ff ffc6 	bl	8005f50 <LPS22HH_Write_Reg>
 8005fc4:	3800      	subs	r0, #0
 8005fc6:	bf18      	it	ne
 8005fc8:	2001      	movne	r0, #1
 8005fca:	4240      	negs	r0, r0
  return ret;
 8005fcc:	e7d5      	b.n	8005f7a <LPS22HH_RegisterBusIO+0xa>
 8005fce:	bf00      	nop
 8005fd0:	08005bb9 	.word	0x08005bb9
 8005fd4:	08005bc7 	.word	0x08005bc7

08005fd8 <lps22hh_read_reg>:
  *
  */
int32_t lps22hh_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 8005fd8:	b410      	push	{r4}
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8005fda:	e9d0 4001 	ldrd	r4, r0, [r0, #4]
 8005fde:	46a4      	mov	ip, r4
  return ret;
}
 8005fe0:	f85d 4b04 	ldr.w	r4, [sp], #4
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8005fe4:	4760      	bx	ip

08005fe6 <lps22hh_write_reg>:
  *
  */
int32_t lps22hh_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8005fe6:	b410      	push	{r4}
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8005fe8:	6804      	ldr	r4, [r0, #0]
 8005fea:	6880      	ldr	r0, [r0, #8]
 8005fec:	46a4      	mov	ip, r4
  return ret;
}
 8005fee:	f85d 4b04 	ldr.w	r4, [sp], #4
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8005ff2:	4760      	bx	ip

08005ff4 <lps22hh_from_lsb_to_hpa>:
  * @brief       These functions convert raw-data into engineering units.
  * @{
  *
  */
float_t lps22hh_from_lsb_to_hpa(uint32_t lsb)
{
 8005ff4:	ee00 0a10 	vmov	s0, r0
  return ( (float_t) lsb / 1048576.0f );
}
 8005ff8:	eebb 0ac6 	vcvt.f32.u32	s0, s0, #20
 8005ffc:	4770      	bx	lr
	...

08006000 <lps22hh_from_lsb_to_celsius>:

float_t lps22hh_from_lsb_to_celsius(int16_t lsb)
{
  return ( (float_t) lsb / 100.0f );
 8006000:	ee07 0a90 	vmov	s15, r0
 8006004:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
}
 8006008:	eddf 7a02 	vldr	s15, [pc, #8]	; 8006014 <lps22hh_from_lsb_to_celsius+0x14>
 800600c:	ee80 0a27 	vdiv.f32	s0, s0, s15
 8006010:	4770      	bx	lr
 8006012:	bf00      	nop
 8006014:	42c80000 	.word	0x42c80000

08006018 <lps22hh_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8006018:	b537      	push	{r0, r1, r2, r4, r5, lr}
  lps22hh_ctrl_reg1_t reg;
  int32_t ret;
  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 800601a:	2301      	movs	r3, #1
{
 800601c:	460d      	mov	r5, r1
  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 800601e:	aa01      	add	r2, sp, #4
 8006020:	2110      	movs	r1, #16
{
 8006022:	4604      	mov	r4, r0
  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 8006024:	f7ff ffd8 	bl	8005fd8 <lps22hh_read_reg>

  if (ret == 0) {
 8006028:	b958      	cbnz	r0, 8006042 <lps22hh_block_data_update_set+0x2a>
    reg.bdu = val;
 800602a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800602e:	f365 0341 	bfi	r3, r5, #1, #1
 8006032:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 8006036:	aa01      	add	r2, sp, #4
 8006038:	2301      	movs	r3, #1
 800603a:	2110      	movs	r1, #16
 800603c:	4620      	mov	r0, r4
 800603e:	f7ff ffd2 	bl	8005fe6 <lps22hh_write_reg>
  }

  return ret;
}
 8006042:	b003      	add	sp, #12
 8006044:	bd30      	pop	{r4, r5, pc}

08006046 <lps22hh_data_rate_set>:
  * @param  val      change the values of odr in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_data_rate_set(stmdev_ctx_t *ctx, lps22hh_odr_t val)
{
 8006046:	b537      	push	{r0, r1, r2, r4, r5, lr}
  lps22hh_ctrl_reg1_t ctrl_reg1;
  lps22hh_ctrl_reg2_t ctrl_reg2;
  int32_t ret;
  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1,
 8006048:	2301      	movs	r3, #1
{
 800604a:	460c      	mov	r4, r1
  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1,
 800604c:	466a      	mov	r2, sp
 800604e:	2110      	movs	r1, #16
{
 8006050:	4605      	mov	r5, r0
  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1,
 8006052:	f7ff ffc1 	bl	8005fd8 <lps22hh_read_reg>
                         1);

  if (ret == 0) {
 8006056:	bb10      	cbnz	r0, 800609e <lps22hh_data_rate_set+0x58>
    ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2,
 8006058:	2301      	movs	r3, #1
 800605a:	aa01      	add	r2, sp, #4
 800605c:	2111      	movs	r1, #17
 800605e:	4628      	mov	r0, r5
 8006060:	f7ff ffba 	bl	8005fd8 <lps22hh_read_reg>
                           1);
  }

  if (ret == 0) {
 8006064:	b9d8      	cbnz	r0, 800609e <lps22hh_data_rate_set+0x58>
    ctrl_reg1.odr = (uint8_t)val & 0x07U;
 8006066:	f89d 3000 	ldrb.w	r3, [sp]
 800606a:	f364 1306 	bfi	r3, r4, #4, #3
 800606e:	f88d 3000 	strb.w	r3, [sp]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1,
 8006072:	466a      	mov	r2, sp
 8006074:	2301      	movs	r3, #1
 8006076:	2110      	movs	r1, #16
 8006078:	4628      	mov	r0, r5
 800607a:	f7ff ffb4 	bl	8005fe6 <lps22hh_write_reg>
                            1);
  }

  if (ret == 0) {
 800607e:	b970      	cbnz	r0, 800609e <lps22hh_data_rate_set+0x58>
    ctrl_reg2.low_noise_en = ((uint8_t)val & 0x10U) >> 4;
    ctrl_reg2.one_shot = ((uint8_t)val & 0x08U) >> 3;
 8006080:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8006084:	f3c4 04c1 	ubfx	r4, r4, #3, #2
 8006088:	f021 0103 	bic.w	r1, r1, #3
 800608c:	430c      	orrs	r4, r1
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2,
 800608e:	2301      	movs	r3, #1
 8006090:	aa01      	add	r2, sp, #4
 8006092:	2111      	movs	r1, #17
 8006094:	4628      	mov	r0, r5
    ctrl_reg2.one_shot = ((uint8_t)val & 0x08U) >> 3;
 8006096:	f88d 4004 	strb.w	r4, [sp, #4]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2,
 800609a:	f7ff ffa4 	bl	8005fe6 <lps22hh_write_reg>
                            1);
  }

  return ret;
}
 800609e:	b003      	add	sp, #12
 80060a0:	bd30      	pop	{r4, r5, pc}

080060a2 <lps22hh_data_rate_get>:
  * @param  val      Get the values of odr in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_data_rate_get(stmdev_ctx_t *ctx, lps22hh_odr_t *val)
{
 80060a2:	b537      	push	{r0, r1, r2, r4, r5, lr}
  lps22hh_ctrl_reg1_t ctrl_reg1;
  lps22hh_ctrl_reg2_t ctrl_reg2;
  int32_t ret;
  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1,
 80060a4:	2301      	movs	r3, #1
{
 80060a6:	460c      	mov	r4, r1
  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1,
 80060a8:	466a      	mov	r2, sp
 80060aa:	2110      	movs	r1, #16
{
 80060ac:	4605      	mov	r5, r0
  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1,
 80060ae:	f7ff ff93 	bl	8005fd8 <lps22hh_read_reg>
                         1);

  if (ret == 0) {
 80060b2:	bb58      	cbnz	r0, 800610c <lps22hh_data_rate_get+0x6a>
    ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2,
 80060b4:	2301      	movs	r3, #1
 80060b6:	aa01      	add	r2, sp, #4
 80060b8:	2111      	movs	r1, #17
 80060ba:	4628      	mov	r0, r5
 80060bc:	f7ff ff8c 	bl	8005fd8 <lps22hh_read_reg>
                           1);
  }

  if (ret == 0) {
 80060c0:	bb20      	cbnz	r0, 800610c <lps22hh_data_rate_get+0x6a>
    ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2,
 80060c2:	2301      	movs	r3, #1
 80060c4:	aa01      	add	r2, sp, #4
 80060c6:	2111      	movs	r1, #17
 80060c8:	4628      	mov	r0, r5
 80060ca:	f7ff ff85 	bl	8005fd8 <lps22hh_read_reg>
                           1);

    switch (((ctrl_reg2.low_noise_en << 4) + (ctrl_reg2.one_shot << 3) +
 80060ce:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80060d2:	f3c2 0140 	ubfx	r1, r2, #1, #1
 80060d6:	f002 0301 	and.w	r3, r2, #1
             ctrl_reg1.odr )) {
 80060da:	f89d 2000 	ldrb.w	r2, [sp]
    switch (((ctrl_reg2.low_noise_en << 4) + (ctrl_reg2.one_shot << 3) +
 80060de:	00db      	lsls	r3, r3, #3
 80060e0:	eb03 1301 	add.w	r3, r3, r1, lsl #4
             ctrl_reg1.odr )) {
 80060e4:	f3c2 1202 	ubfx	r2, r2, #4, #3
    switch (((ctrl_reg2.low_noise_en << 4) + (ctrl_reg2.one_shot << 3) +
 80060e8:	4413      	add	r3, r2
 80060ea:	2b15      	cmp	r3, #21
 80060ec:	d828      	bhi.n	8006140 <lps22hh_data_rate_get+0x9e>
 80060ee:	e8df f003 	tbb	[pc, r3]
 80060f2:	0f27      	.short	0x0f27
 80060f4:	17151311 	.word	0x17151311
 80060f8:	270b2523 	.word	0x270b2523
 80060fc:	27272727 	.word	0x27272727
 8006100:	19272727 	.word	0x19272727
 8006104:	211f1d1b 	.word	0x211f1d1b
      case LPS22HH_POWER_DOWN:
        *val = LPS22HH_POWER_DOWN;
        break;

      case LPS22HH_ONE_SHOOT:
        *val = LPS22HH_ONE_SHOOT;
 8006108:	2308      	movs	r3, #8
      case LPS22HH_200_Hz:
        *val = LPS22HH_200_Hz;
        break;

      default:
        *val = LPS22HH_POWER_DOWN;
 800610a:	7023      	strb	r3, [r4, #0]
        break;
    }
  }

  return ret;
}
 800610c:	b003      	add	sp, #12
 800610e:	bd30      	pop	{r4, r5, pc}
        *val = LPS22HH_1_Hz;
 8006110:	2301      	movs	r3, #1
 8006112:	e7fa      	b.n	800610a <lps22hh_data_rate_get+0x68>
        *val = LPS22HH_10_Hz;
 8006114:	2302      	movs	r3, #2
 8006116:	e7f8      	b.n	800610a <lps22hh_data_rate_get+0x68>
        *val = LPS22HH_25_Hz;
 8006118:	2303      	movs	r3, #3
 800611a:	e7f6      	b.n	800610a <lps22hh_data_rate_get+0x68>
        *val = LPS22HH_50_Hz;
 800611c:	2304      	movs	r3, #4
 800611e:	e7f4      	b.n	800610a <lps22hh_data_rate_get+0x68>
        *val = LPS22HH_75_Hz;
 8006120:	2305      	movs	r3, #5
 8006122:	e7f2      	b.n	800610a <lps22hh_data_rate_get+0x68>
        *val = LPS22HH_1_Hz_LOW_NOISE;
 8006124:	2311      	movs	r3, #17
 8006126:	e7f0      	b.n	800610a <lps22hh_data_rate_get+0x68>
        *val = LPS22HH_10_Hz_LOW_NOISE;
 8006128:	2312      	movs	r3, #18
 800612a:	e7ee      	b.n	800610a <lps22hh_data_rate_get+0x68>
        *val = LPS22HH_25_Hz_LOW_NOISE;
 800612c:	2313      	movs	r3, #19
 800612e:	e7ec      	b.n	800610a <lps22hh_data_rate_get+0x68>
        *val = LPS22HH_50_Hz_LOW_NOISE;
 8006130:	2314      	movs	r3, #20
 8006132:	e7ea      	b.n	800610a <lps22hh_data_rate_get+0x68>
        *val = LPS22HH_75_Hz_LOW_NOISE;
 8006134:	2315      	movs	r3, #21
 8006136:	e7e8      	b.n	800610a <lps22hh_data_rate_get+0x68>
        *val = LPS22HH_100_Hz;
 8006138:	2306      	movs	r3, #6
 800613a:	e7e6      	b.n	800610a <lps22hh_data_rate_get+0x68>
        *val = LPS22HH_200_Hz;
 800613c:	2307      	movs	r3, #7
 800613e:	e7e4      	b.n	800610a <lps22hh_data_rate_get+0x68>
        *val = LPS22HH_POWER_DOWN;
 8006140:	2300      	movs	r3, #0
 8006142:	e7e2      	b.n	800610a <lps22hh_data_rate_get+0x68>

08006144 <lps22hh_pressure_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_pressure_raw_get(stmdev_ctx_t *ctx, uint32_t *buff)
{
 8006144:	b513      	push	{r0, r1, r4, lr}
  int32_t ret;
  uint8_t reg[3];
  ret =  lps22hh_read_reg(ctx, LPS22HH_PRESS_OUT_XL, reg, 3);
 8006146:	2303      	movs	r3, #3
{
 8006148:	460c      	mov	r4, r1
  ret =  lps22hh_read_reg(ctx, LPS22HH_PRESS_OUT_XL, reg, 3);
 800614a:	aa01      	add	r2, sp, #4
 800614c:	2128      	movs	r1, #40	; 0x28
 800614e:	f7ff ff43 	bl	8005fd8 <lps22hh_read_reg>
  *buff = reg[2];
  *buff = (*buff * 256) + reg[1];
 8006152:	f89d 3005 	ldrb.w	r3, [sp, #5]
  *buff = reg[2];
 8006156:	f89d 2006 	ldrb.w	r2, [sp, #6]
  *buff = (*buff * 256) + reg[1];
 800615a:	eb03 2202 	add.w	r2, r3, r2, lsl #8
  *buff = (*buff * 256) + reg[0];
 800615e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8006162:	eb03 2302 	add.w	r3, r3, r2, lsl #8
  *buff *= 256;
 8006166:	021b      	lsls	r3, r3, #8
 8006168:	6023      	str	r3, [r4, #0]
  return ret;
}
 800616a:	b002      	add	sp, #8
 800616c:	bd10      	pop	{r4, pc}

0800616e <lps22hh_temperature_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *buff)
{
 800616e:	b513      	push	{r0, r1, r4, lr}
  int32_t ret;
  uint8_t reg[2];
  ret =  lps22hh_read_reg(ctx, LPS22HH_TEMP_OUT_L, reg, 2);
 8006170:	2302      	movs	r3, #2
{
 8006172:	460c      	mov	r4, r1
  ret =  lps22hh_read_reg(ctx, LPS22HH_TEMP_OUT_L, reg, 2);
 8006174:	aa01      	add	r2, sp, #4
 8006176:	212b      	movs	r1, #43	; 0x2b
 8006178:	f7ff ff2e 	bl	8005fd8 <lps22hh_read_reg>
  *buff = reg[1];
  *buff = (*buff * 256) + reg[0];
 800617c:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8006180:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8006184:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8006188:	8023      	strh	r3, [r4, #0]
  return ret;
}
 800618a:	b002      	add	sp, #8
 800618c:	bd10      	pop	{r4, pc}

0800618e <lps22hh_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 800618e:	460a      	mov	r2, r1
  int32_t ret;
  ret =  lps22hh_read_reg(ctx, LPS22HH_WHO_AM_I, buff, 1);
 8006190:	2301      	movs	r3, #1
 8006192:	210f      	movs	r1, #15
 8006194:	f7ff bf20 	b.w	8005fd8 <lps22hh_read_reg>

08006198 <lps22hh_auto_increment_set>:
  * @param  val      change the values of if_add_inc in reg CTRL_REG2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8006198:	b537      	push	{r0, r1, r2, r4, r5, lr}
  lps22hh_ctrl_reg2_t reg;
  int32_t ret;
  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 800619a:	2301      	movs	r3, #1
{
 800619c:	460d      	mov	r5, r1
  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 800619e:	aa01      	add	r2, sp, #4
 80061a0:	2111      	movs	r1, #17
{
 80061a2:	4604      	mov	r4, r0
  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 80061a4:	f7ff ff18 	bl	8005fd8 <lps22hh_read_reg>

  if (ret == 0) {
 80061a8:	b958      	cbnz	r0, 80061c2 <lps22hh_auto_increment_set+0x2a>
    reg.if_add_inc = val;
 80061aa:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80061ae:	f365 1304 	bfi	r3, r5, #4, #1
 80061b2:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 80061b6:	aa01      	add	r2, sp, #4
 80061b8:	2301      	movs	r3, #1
 80061ba:	2111      	movs	r1, #17
 80061bc:	4620      	mov	r0, r4
 80061be:	f7ff ff12 	bl	8005fe6 <lps22hh_write_reg>
  }

  return ret;
}
 80061c2:	b003      	add	sp, #12
 80061c4:	bd30      	pop	{r4, r5, pc}

080061c6 <lps22hh_lp_bandwidth_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_lp_bandwidth_set(stmdev_ctx_t *ctx,
                                 lps22hh_lpfp_cfg_t val)
{
 80061c6:	b537      	push	{r0, r1, r2, r4, r5, lr}
  lps22hh_ctrl_reg1_t reg;
  int32_t ret;
  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 80061c8:	2301      	movs	r3, #1
{
 80061ca:	460d      	mov	r5, r1
  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 80061cc:	aa01      	add	r2, sp, #4
 80061ce:	2110      	movs	r1, #16
{
 80061d0:	4604      	mov	r4, r0
  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 80061d2:	f7ff ff01 	bl	8005fd8 <lps22hh_read_reg>

  if (ret == 0) {
 80061d6:	b958      	cbnz	r0, 80061f0 <lps22hh_lp_bandwidth_set+0x2a>
    reg.lpfp_cfg = (uint8_t)val;
 80061d8:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80061dc:	f365 0383 	bfi	r3, r5, #2, #2
 80061e0:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 80061e4:	aa01      	add	r2, sp, #4
 80061e6:	2301      	movs	r3, #1
 80061e8:	2110      	movs	r1, #16
 80061ea:	4620      	mov	r0, r4
 80061ec:	f7ff fefb 	bl	8005fe6 <lps22hh_write_reg>
  }

  return ret;
}
 80061f0:	b003      	add	sp, #12
 80061f2:	bd30      	pop	{r4, r5, pc}

080061f4 <lps22hh_i3c_interface_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_i3c_interface_set(stmdev_ctx_t *ctx,
                                  lps22hh_i3c_disable_t val)
{
 80061f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
  lps22hh_if_ctrl_t reg;
  int32_t ret;
  ret = lps22hh_read_reg(ctx, LPS22HH_IF_CTRL, (uint8_t *) &reg, 1);
 80061f6:	2301      	movs	r3, #1
{
 80061f8:	460c      	mov	r4, r1
  ret = lps22hh_read_reg(ctx, LPS22HH_IF_CTRL, (uint8_t *) &reg, 1);
 80061fa:	aa01      	add	r2, sp, #4
 80061fc:	210e      	movs	r1, #14
{
 80061fe:	4605      	mov	r5, r0
  ret = lps22hh_read_reg(ctx, LPS22HH_IF_CTRL, (uint8_t *) &reg, 1);
 8006200:	f7ff feea 	bl	8005fd8 <lps22hh_read_reg>

  if (ret == 0) {
 8006204:	b990      	cbnz	r0, 800622c <lps22hh_i3c_interface_set+0x38>
    reg.i3c_disable = ((uint8_t)val & 0x01u);
    reg.int_en_i3c = ((uint8_t)val & 0x10U) >> 4;
 8006206:	0923      	lsrs	r3, r4, #4
    reg.i3c_disable = ((uint8_t)val & 0x01u);
 8006208:	0064      	lsls	r4, r4, #1
 800620a:	f004 0402 	and.w	r4, r4, #2
 800620e:	ea44 14c3 	orr.w	r4, r4, r3, lsl #7
 8006212:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8006216:	f003 037d 	and.w	r3, r3, #125	; 0x7d
 800621a:	431c      	orrs	r4, r3
    ret = lps22hh_write_reg(ctx, LPS22HH_IF_CTRL, (uint8_t *) &reg, 1);
 800621c:	aa01      	add	r2, sp, #4
 800621e:	2301      	movs	r3, #1
 8006220:	210e      	movs	r1, #14
 8006222:	4628      	mov	r0, r5
    reg.i3c_disable = ((uint8_t)val & 0x01u);
 8006224:	f88d 4004 	strb.w	r4, [sp, #4]
    ret = lps22hh_write_reg(ctx, LPS22HH_IF_CTRL, (uint8_t *) &reg, 1);
 8006228:	f7ff fedd 	bl	8005fe6 <lps22hh_write_reg>
  }

  return ret;
}
 800622c:	b003      	add	sp, #12
 800622e:	bd30      	pop	{r4, r5, pc}

08006230 <ism330dlc_read_reg>:
  *
  */
int32_t ism330dlc_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                           uint8_t *data,
                           uint16_t len)
{
 8006230:	b410      	push	{r4}
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8006232:	e9d0 4001 	ldrd	r4, r0, [r0, #4]
 8006236:	46a4      	mov	ip, r4
  return ret;
}
 8006238:	f85d 4b04 	ldr.w	r4, [sp], #4
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800623c:	4760      	bx	ip

0800623e <ism330dlc_write_reg>:
  *
  */
int32_t ism330dlc_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                            uint8_t *data,
                            uint16_t len)
{
 800623e:	b410      	push	{r4}
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8006240:	6804      	ldr	r4, [r0, #0]
 8006242:	6880      	ldr	r0, [r0, #8]
 8006244:	46a4      	mov	ip, r4
  return ret;
}
 8006246:	f85d 4b04 	ldr.w	r4, [sp], #4
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800624a:	4760      	bx	ip

0800624c <ism330dlc_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dlc_xl_full_scale_set(stmdev_ctx_t *ctx,
                                    ism330dlc_fs_xl_t val)
{
 800624c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  ism330dlc_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  ret = ism330dlc_read_reg(ctx, ISM330DLC_CTRL1_XL,
 800624e:	2301      	movs	r3, #1
{
 8006250:	460d      	mov	r5, r1
  ret = ism330dlc_read_reg(ctx, ISM330DLC_CTRL1_XL,
 8006252:	aa01      	add	r2, sp, #4
 8006254:	2110      	movs	r1, #16
{
 8006256:	4604      	mov	r4, r0
  ret = ism330dlc_read_reg(ctx, ISM330DLC_CTRL1_XL,
 8006258:	f7ff ffea 	bl	8006230 <ism330dlc_read_reg>
                           (uint8_t *)&ctrl1_xl, 1);

  if (ret == 0) {
 800625c:	b958      	cbnz	r0, 8006276 <ism330dlc_xl_full_scale_set+0x2a>
    ctrl1_xl.fs_xl = (uint8_t) val;
 800625e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8006262:	f365 0383 	bfi	r3, r5, #2, #2
 8006266:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = ism330dlc_write_reg(ctx, ISM330DLC_CTRL1_XL,
 800626a:	aa01      	add	r2, sp, #4
 800626c:	2301      	movs	r3, #1
 800626e:	2110      	movs	r1, #16
 8006270:	4620      	mov	r0, r4
 8006272:	f7ff ffe4 	bl	800623e <ism330dlc_write_reg>
                              (uint8_t *)&ctrl1_xl, 1);
  }

  return ret;
}
 8006276:	b003      	add	sp, #12
 8006278:	bd30      	pop	{r4, r5, pc}

0800627a <ism330dlc_xl_full_scale_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dlc_xl_full_scale_get(stmdev_ctx_t *ctx,
                                    ism330dlc_fs_xl_t *val)
{
 800627a:	b513      	push	{r0, r1, r4, lr}
  ism330dlc_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  ret = ism330dlc_read_reg(ctx, ISM330DLC_CTRL1_XL,
 800627c:	2301      	movs	r3, #1
 800627e:	aa01      	add	r2, sp, #4
{
 8006280:	460c      	mov	r4, r1
  ret = ism330dlc_read_reg(ctx, ISM330DLC_CTRL1_XL,
 8006282:	2110      	movs	r1, #16
 8006284:	f7ff ffd4 	bl	8006230 <ism330dlc_read_reg>
                           (uint8_t *)&ctrl1_xl, 1);

  switch (ctrl1_xl.fs_xl) {
 8006288:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800628c:	f3c3 0281 	ubfx	r2, r3, #2, #2
 8006290:	2a02      	cmp	r2, #2
 8006292:	d007      	beq.n	80062a4 <ism330dlc_xl_full_scale_get+0x2a>
 8006294:	2a03      	cmp	r2, #3
 8006296:	d005      	beq.n	80062a4 <ism330dlc_xl_full_scale_get+0x2a>
 8006298:	2a01      	cmp	r2, #1
 800629a:	d003      	beq.n	80062a4 <ism330dlc_xl_full_scale_get+0x2a>
    case ISM330DLC_2g:
      *val = ISM330DLC_2g;
 800629c:	2300      	movs	r3, #0
 800629e:	7023      	strb	r3, [r4, #0]
      *val = ISM330DLC_2g;
      break;
  }

  return ret;
}
 80062a0:	b002      	add	sp, #8
 80062a2:	bd10      	pop	{r4, pc}
      *val = ISM330DLC_8g;
 80062a4:	7022      	strb	r2, [r4, #0]
  return ret;
 80062a6:	e7fb      	b.n	80062a0 <ism330dlc_xl_full_scale_get+0x26>

080062a8 <ism330dlc_xl_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dlc_xl_data_rate_set(stmdev_ctx_t *ctx,
                                   ism330dlc_odr_xl_t val)
{
 80062a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
  ism330dlc_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  ret = ism330dlc_read_reg(ctx, ISM330DLC_CTRL1_XL,
 80062aa:	2301      	movs	r3, #1
{
 80062ac:	460d      	mov	r5, r1
  ret = ism330dlc_read_reg(ctx, ISM330DLC_CTRL1_XL,
 80062ae:	aa01      	add	r2, sp, #4
 80062b0:	2110      	movs	r1, #16
{
 80062b2:	4604      	mov	r4, r0
  ret = ism330dlc_read_reg(ctx, ISM330DLC_CTRL1_XL,
 80062b4:	f7ff ffbc 	bl	8006230 <ism330dlc_read_reg>
                           (uint8_t *)&ctrl1_xl, 1);

  if (ret == 0) {
 80062b8:	b958      	cbnz	r0, 80062d2 <ism330dlc_xl_data_rate_set+0x2a>
    ctrl1_xl.odr_xl = (uint8_t) val;
 80062ba:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80062be:	f365 1307 	bfi	r3, r5, #4, #4
 80062c2:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = ism330dlc_write_reg(ctx, ISM330DLC_CTRL1_XL,
 80062c6:	aa01      	add	r2, sp, #4
 80062c8:	2301      	movs	r3, #1
 80062ca:	2110      	movs	r1, #16
 80062cc:	4620      	mov	r0, r4
 80062ce:	f7ff ffb6 	bl	800623e <ism330dlc_write_reg>
                              (uint8_t *)&ctrl1_xl, 1);
  }

  return ret;
}
 80062d2:	b003      	add	sp, #12
 80062d4:	bd30      	pop	{r4, r5, pc}

080062d6 <ism330dlc_xl_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dlc_xl_data_rate_get(stmdev_ctx_t *ctx,
                                   ism330dlc_odr_xl_t *val)
{
 80062d6:	b513      	push	{r0, r1, r4, lr}
  ism330dlc_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  ret = ism330dlc_read_reg(ctx, ISM330DLC_CTRL1_XL,
 80062d8:	2301      	movs	r3, #1
{
 80062da:	460c      	mov	r4, r1
  ret = ism330dlc_read_reg(ctx, ISM330DLC_CTRL1_XL,
 80062dc:	aa01      	add	r2, sp, #4
 80062de:	2110      	movs	r1, #16
 80062e0:	f7ff ffa6 	bl	8006230 <ism330dlc_read_reg>
                           (uint8_t *)&ctrl1_xl, 1);

  switch (ctrl1_xl.odr_xl) {
 80062e4:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80062e8:	091b      	lsrs	r3, r3, #4
 80062ea:	2b0b      	cmp	r3, #11
 80062ec:	d81f      	bhi.n	800632e <ism330dlc_xl_data_rate_get+0x58>
 80062ee:	e8df f003 	tbb	[pc, r3]
 80062f2:	061e      	.short	0x061e
 80062f4:	100e0c0a 	.word	0x100e0c0a
 80062f8:	18161412 	.word	0x18161412
 80062fc:	1c1a      	.short	0x1c1a
    case ISM330DLC_XL_ODR_OFF:
      *val = ISM330DLC_XL_ODR_OFF;
      break;

    case ISM330DLC_XL_ODR_12Hz5:
      *val = ISM330DLC_XL_ODR_12Hz5;
 80062fe:	2301      	movs	r3, #1
    case ISM330DLC_XL_ODR_1Hz6:
      *val = ISM330DLC_XL_ODR_1Hz6;
      break;

    default:
      *val = ISM330DLC_XL_ODR_OFF;
 8006300:	7023      	strb	r3, [r4, #0]
      break;
  }

  return ret;
}
 8006302:	b002      	add	sp, #8
 8006304:	bd10      	pop	{r4, pc}
      *val = ISM330DLC_XL_ODR_26Hz;
 8006306:	2302      	movs	r3, #2
 8006308:	e7fa      	b.n	8006300 <ism330dlc_xl_data_rate_get+0x2a>
      *val = ISM330DLC_XL_ODR_52Hz;
 800630a:	2303      	movs	r3, #3
 800630c:	e7f8      	b.n	8006300 <ism330dlc_xl_data_rate_get+0x2a>
      *val = ISM330DLC_XL_ODR_104Hz;
 800630e:	2304      	movs	r3, #4
 8006310:	e7f6      	b.n	8006300 <ism330dlc_xl_data_rate_get+0x2a>
      *val = ISM330DLC_XL_ODR_208Hz;
 8006312:	2305      	movs	r3, #5
 8006314:	e7f4      	b.n	8006300 <ism330dlc_xl_data_rate_get+0x2a>
      *val = ISM330DLC_XL_ODR_416Hz;
 8006316:	2306      	movs	r3, #6
 8006318:	e7f2      	b.n	8006300 <ism330dlc_xl_data_rate_get+0x2a>
      *val = ISM330DLC_XL_ODR_833Hz;
 800631a:	2307      	movs	r3, #7
 800631c:	e7f0      	b.n	8006300 <ism330dlc_xl_data_rate_get+0x2a>
      *val = ISM330DLC_XL_ODR_1k66Hz;
 800631e:	2308      	movs	r3, #8
 8006320:	e7ee      	b.n	8006300 <ism330dlc_xl_data_rate_get+0x2a>
      *val = ISM330DLC_XL_ODR_3k33Hz;
 8006322:	2309      	movs	r3, #9
 8006324:	e7ec      	b.n	8006300 <ism330dlc_xl_data_rate_get+0x2a>
      *val = ISM330DLC_XL_ODR_6k66Hz;
 8006326:	230a      	movs	r3, #10
 8006328:	e7ea      	b.n	8006300 <ism330dlc_xl_data_rate_get+0x2a>
      *val = ISM330DLC_XL_ODR_1Hz6;
 800632a:	230b      	movs	r3, #11
 800632c:	e7e8      	b.n	8006300 <ism330dlc_xl_data_rate_get+0x2a>
      *val = ISM330DLC_XL_ODR_OFF;
 800632e:	2300      	movs	r3, #0
 8006330:	e7e6      	b.n	8006300 <ism330dlc_xl_data_rate_get+0x2a>

08006332 <ism330dlc_gy_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dlc_gy_full_scale_set(stmdev_ctx_t *ctx,
                                    ism330dlc_fs_g_t val)
{
 8006332:	b537      	push	{r0, r1, r2, r4, r5, lr}
  ism330dlc_ctrl2_g_t ctrl2_g;
  int32_t ret;
  ret = ism330dlc_read_reg(ctx, ISM330DLC_CTRL2_G, (uint8_t *)&ctrl2_g,
 8006334:	2301      	movs	r3, #1
{
 8006336:	460d      	mov	r5, r1
  ret = ism330dlc_read_reg(ctx, ISM330DLC_CTRL2_G, (uint8_t *)&ctrl2_g,
 8006338:	aa01      	add	r2, sp, #4
 800633a:	2111      	movs	r1, #17
{
 800633c:	4604      	mov	r4, r0
  ret = ism330dlc_read_reg(ctx, ISM330DLC_CTRL2_G, (uint8_t *)&ctrl2_g,
 800633e:	f7ff ff77 	bl	8006230 <ism330dlc_read_reg>
                           1);

  if (ret == 0) {
 8006342:	b958      	cbnz	r0, 800635c <ism330dlc_gy_full_scale_set+0x2a>
    ctrl2_g.fs_g = (uint8_t) val;
 8006344:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8006348:	f365 0343 	bfi	r3, r5, #1, #3
 800634c:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = ism330dlc_write_reg(ctx, ISM330DLC_CTRL2_G, (uint8_t *)&ctrl2_g,
 8006350:	aa01      	add	r2, sp, #4
 8006352:	2301      	movs	r3, #1
 8006354:	2111      	movs	r1, #17
 8006356:	4620      	mov	r0, r4
 8006358:	f7ff ff71 	bl	800623e <ism330dlc_write_reg>
                              1);
  }

  return ret;
}
 800635c:	b003      	add	sp, #12
 800635e:	bd30      	pop	{r4, r5, pc}

08006360 <ism330dlc_gy_full_scale_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dlc_gy_full_scale_get(stmdev_ctx_t *ctx,
                                    ism330dlc_fs_g_t *val)
{
 8006360:	b513      	push	{r0, r1, r4, lr}
  ism330dlc_ctrl2_g_t ctrl2_g;
  int32_t ret;
  ret = ism330dlc_read_reg(ctx, ISM330DLC_CTRL2_G, (uint8_t *)&ctrl2_g,
 8006362:	2301      	movs	r3, #1
{
 8006364:	460c      	mov	r4, r1
  ret = ism330dlc_read_reg(ctx, ISM330DLC_CTRL2_G, (uint8_t *)&ctrl2_g,
 8006366:	aa01      	add	r2, sp, #4
 8006368:	2111      	movs	r1, #17
 800636a:	f7ff ff61 	bl	8006230 <ism330dlc_read_reg>
                           1);

  switch (ctrl2_g.fs_g) {
 800636e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8006372:	f3c3 0342 	ubfx	r3, r3, #1, #3
 8006376:	3b01      	subs	r3, #1
 8006378:	2b05      	cmp	r3, #5
 800637a:	d804      	bhi.n	8006386 <ism330dlc_gy_full_scale_get+0x26>
 800637c:	e8df f003 	tbb	[pc, r3]
 8006380:	0b030907 	.word	0x0b030907
 8006384:	0d03      	.short	0x0d03
    case ISM330DLC_250dps:
      *val = ISM330DLC_250dps;
 8006386:	2300      	movs	r3, #0
    case ISM330DLC_1000dps:
      *val = ISM330DLC_1000dps;
      break;

    case ISM330DLC_2000dps:
      *val = ISM330DLC_2000dps;
 8006388:	7023      	strb	r3, [r4, #0]
      *val = ISM330DLC_250dps;
      break;
  }

  return ret;
}
 800638a:	b002      	add	sp, #8
 800638c:	bd10      	pop	{r4, pc}
      *val = ISM330DLC_125dps;
 800638e:	2301      	movs	r3, #1
 8006390:	e7fa      	b.n	8006388 <ism330dlc_gy_full_scale_get+0x28>
      *val = ISM330DLC_500dps;
 8006392:	2302      	movs	r3, #2
 8006394:	e7f8      	b.n	8006388 <ism330dlc_gy_full_scale_get+0x28>
      *val = ISM330DLC_1000dps;
 8006396:	2304      	movs	r3, #4
 8006398:	e7f6      	b.n	8006388 <ism330dlc_gy_full_scale_get+0x28>
      *val = ISM330DLC_2000dps;
 800639a:	2306      	movs	r3, #6
 800639c:	e7f4      	b.n	8006388 <ism330dlc_gy_full_scale_get+0x28>

0800639e <ism330dlc_gy_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dlc_gy_data_rate_set(stmdev_ctx_t *ctx,
                                   ism330dlc_odr_g_t val)
{
 800639e:	b537      	push	{r0, r1, r2, r4, r5, lr}
  ism330dlc_ctrl2_g_t ctrl2_g;
  int32_t ret;
  ret = ism330dlc_read_reg(ctx, ISM330DLC_CTRL2_G, (uint8_t *)&ctrl2_g,
 80063a0:	2301      	movs	r3, #1
{
 80063a2:	460d      	mov	r5, r1
  ret = ism330dlc_read_reg(ctx, ISM330DLC_CTRL2_G, (uint8_t *)&ctrl2_g,
 80063a4:	aa01      	add	r2, sp, #4
 80063a6:	2111      	movs	r1, #17
{
 80063a8:	4604      	mov	r4, r0
  ret = ism330dlc_read_reg(ctx, ISM330DLC_CTRL2_G, (uint8_t *)&ctrl2_g,
 80063aa:	f7ff ff41 	bl	8006230 <ism330dlc_read_reg>
                           1);

  if (ret == 0) {
 80063ae:	b958      	cbnz	r0, 80063c8 <ism330dlc_gy_data_rate_set+0x2a>
    ctrl2_g.odr_g = (uint8_t) val;
 80063b0:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80063b4:	f365 1307 	bfi	r3, r5, #4, #4
 80063b8:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = ism330dlc_write_reg(ctx, ISM330DLC_CTRL2_G, (uint8_t *)&ctrl2_g,
 80063bc:	aa01      	add	r2, sp, #4
 80063be:	2301      	movs	r3, #1
 80063c0:	2111      	movs	r1, #17
 80063c2:	4620      	mov	r0, r4
 80063c4:	f7ff ff3b 	bl	800623e <ism330dlc_write_reg>
                              1);
  }

  return ret;
}
 80063c8:	b003      	add	sp, #12
 80063ca:	bd30      	pop	{r4, r5, pc}

080063cc <ism330dlc_gy_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dlc_gy_data_rate_get(stmdev_ctx_t *ctx,
                                   ism330dlc_odr_g_t *val)
{
 80063cc:	b513      	push	{r0, r1, r4, lr}
  ism330dlc_ctrl2_g_t ctrl2_g;
  int32_t ret;
  ret = ism330dlc_read_reg(ctx, ISM330DLC_CTRL2_G, (uint8_t *)&ctrl2_g,
 80063ce:	2301      	movs	r3, #1
{
 80063d0:	460c      	mov	r4, r1
  ret = ism330dlc_read_reg(ctx, ISM330DLC_CTRL2_G, (uint8_t *)&ctrl2_g,
 80063d2:	aa01      	add	r2, sp, #4
 80063d4:	2111      	movs	r1, #17
 80063d6:	f7ff ff2b 	bl	8006230 <ism330dlc_read_reg>
                           1);

  switch (ctrl2_g.odr_g) {
 80063da:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80063de:	091b      	lsrs	r3, r3, #4
 80063e0:	2b0a      	cmp	r3, #10
 80063e2:	d81d      	bhi.n	8006420 <ism330dlc_gy_data_rate_get+0x54>
 80063e4:	e8df f003 	tbb	[pc, r3]
 80063e8:	0c0a061c 	.word	0x0c0a061c
 80063ec:	1412100e 	.word	0x1412100e
 80063f0:	1816      	.short	0x1816
 80063f2:	1a          	.byte	0x1a
 80063f3:	00          	.byte	0x00
    case ISM330DLC_GY_ODR_OFF:
      *val = ISM330DLC_GY_ODR_OFF;
      break;

    case ISM330DLC_GY_ODR_12Hz5:
      *val = ISM330DLC_GY_ODR_12Hz5;
 80063f4:	2301      	movs	r3, #1
    case ISM330DLC_GY_ODR_6k66Hz:
      *val = ISM330DLC_GY_ODR_6k66Hz;
      break;

    default:
      *val = ISM330DLC_GY_ODR_OFF;
 80063f6:	7023      	strb	r3, [r4, #0]
      break;
  }

  return ret;
}
 80063f8:	b002      	add	sp, #8
 80063fa:	bd10      	pop	{r4, pc}
      *val = ISM330DLC_GY_ODR_26Hz;
 80063fc:	2302      	movs	r3, #2
 80063fe:	e7fa      	b.n	80063f6 <ism330dlc_gy_data_rate_get+0x2a>
      *val = ISM330DLC_GY_ODR_52Hz;
 8006400:	2303      	movs	r3, #3
 8006402:	e7f8      	b.n	80063f6 <ism330dlc_gy_data_rate_get+0x2a>
      *val = ISM330DLC_GY_ODR_104Hz;
 8006404:	2304      	movs	r3, #4
 8006406:	e7f6      	b.n	80063f6 <ism330dlc_gy_data_rate_get+0x2a>
      *val = ISM330DLC_GY_ODR_208Hz;
 8006408:	2305      	movs	r3, #5
 800640a:	e7f4      	b.n	80063f6 <ism330dlc_gy_data_rate_get+0x2a>
      *val = ISM330DLC_GY_ODR_416Hz;
 800640c:	2306      	movs	r3, #6
 800640e:	e7f2      	b.n	80063f6 <ism330dlc_gy_data_rate_get+0x2a>
      *val = ISM330DLC_GY_ODR_833Hz;
 8006410:	2307      	movs	r3, #7
 8006412:	e7f0      	b.n	80063f6 <ism330dlc_gy_data_rate_get+0x2a>
      *val = ISM330DLC_GY_ODR_1k66Hz;
 8006414:	2308      	movs	r3, #8
 8006416:	e7ee      	b.n	80063f6 <ism330dlc_gy_data_rate_get+0x2a>
      *val = ISM330DLC_GY_ODR_3k33Hz;
 8006418:	2309      	movs	r3, #9
 800641a:	e7ec      	b.n	80063f6 <ism330dlc_gy_data_rate_get+0x2a>
      *val = ISM330DLC_GY_ODR_6k66Hz;
 800641c:	230a      	movs	r3, #10
 800641e:	e7ea      	b.n	80063f6 <ism330dlc_gy_data_rate_get+0x2a>
      *val = ISM330DLC_GY_ODR_OFF;
 8006420:	2300      	movs	r3, #0
 8006422:	e7e8      	b.n	80063f6 <ism330dlc_gy_data_rate_get+0x2a>

08006424 <ism330dlc_block_data_update_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dlc_block_data_update_set(stmdev_ctx_t *ctx,
                                        uint8_t val)
{
 8006424:	b537      	push	{r0, r1, r2, r4, r5, lr}
  ism330dlc_ctrl3_c_t ctrl3_c;
  int32_t ret;
  ret = ism330dlc_read_reg(ctx, ISM330DLC_CTRL3_C, (uint8_t *)&ctrl3_c,
 8006426:	2301      	movs	r3, #1
{
 8006428:	460d      	mov	r5, r1
  ret = ism330dlc_read_reg(ctx, ISM330DLC_CTRL3_C, (uint8_t *)&ctrl3_c,
 800642a:	aa01      	add	r2, sp, #4
 800642c:	2112      	movs	r1, #18
{
 800642e:	4604      	mov	r4, r0
  ret = ism330dlc_read_reg(ctx, ISM330DLC_CTRL3_C, (uint8_t *)&ctrl3_c,
 8006430:	f7ff fefe 	bl	8006230 <ism330dlc_read_reg>
                           1);

  if (ret == 0) {
 8006434:	b958      	cbnz	r0, 800644e <ism330dlc_block_data_update_set+0x2a>
    ctrl3_c.bdu = val;
 8006436:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800643a:	f365 1386 	bfi	r3, r5, #6, #1
 800643e:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = ism330dlc_write_reg(ctx, ISM330DLC_CTRL3_C, (uint8_t *)&ctrl3_c,
 8006442:	aa01      	add	r2, sp, #4
 8006444:	2301      	movs	r3, #1
 8006446:	2112      	movs	r1, #18
 8006448:	4620      	mov	r0, r4
 800644a:	f7ff fef8 	bl	800623e <ism330dlc_write_reg>
                              1);
  }

  return ret;
}
 800644e:	b003      	add	sp, #12
 8006450:	bd30      	pop	{r4, r5, pc}

08006452 <ism330dlc_angular_rate_raw_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dlc_angular_rate_raw_get(stmdev_ctx_t *ctx,
                                       int16_t *val)
{
 8006452:	b513      	push	{r0, r1, r4, lr}
  uint8_t buff[6];
  int32_t ret;
  ret = ism330dlc_read_reg(ctx, ISM330DLC_OUTX_L_G, buff, 6);
 8006454:	2306      	movs	r3, #6
{
 8006456:	460c      	mov	r4, r1
  ret = ism330dlc_read_reg(ctx, ISM330DLC_OUTX_L_G, buff, 6);
 8006458:	466a      	mov	r2, sp
 800645a:	2122      	movs	r1, #34	; 0x22
 800645c:	f7ff fee8 	bl	8006230 <ism330dlc_read_reg>
  val[0] = (int16_t)buff[1];
  val[0] = (val[0] * 256) +  (int16_t)buff[0];
 8006460:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8006464:	f89d 3000 	ldrb.w	r3, [sp]
 8006468:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800646c:	8023      	strh	r3, [r4, #0]
  val[1] = (int16_t)buff[3];
  val[1] = (val[1] * 256) +  (int16_t)buff[2];
 800646e:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8006472:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8006476:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800647a:	8063      	strh	r3, [r4, #2]
  val[2] = (int16_t)buff[5];
  val[2] = (val[2] * 256) +  (int16_t)buff[4];
 800647c:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8006480:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8006484:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8006488:	80a3      	strh	r3, [r4, #4]
  return ret;
}
 800648a:	b002      	add	sp, #8
 800648c:	bd10      	pop	{r4, pc}

0800648e <ism330dlc_acceleration_raw_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dlc_acceleration_raw_get(stmdev_ctx_t *ctx,
                                       int16_t *val)
{
 800648e:	b513      	push	{r0, r1, r4, lr}
  uint8_t buff[6];
  int32_t ret;
  ret = ism330dlc_read_reg(ctx, ISM330DLC_OUTX_L_XL, buff, 6);
 8006490:	2306      	movs	r3, #6
{
 8006492:	460c      	mov	r4, r1
  ret = ism330dlc_read_reg(ctx, ISM330DLC_OUTX_L_XL, buff, 6);
 8006494:	466a      	mov	r2, sp
 8006496:	2128      	movs	r1, #40	; 0x28
 8006498:	f7ff feca 	bl	8006230 <ism330dlc_read_reg>
  val[0] = (int16_t)buff[1];
  val[0] = (val[0] * 256) +  (int16_t)buff[0];
 800649c:	f89d 2001 	ldrb.w	r2, [sp, #1]
 80064a0:	f89d 3000 	ldrb.w	r3, [sp]
 80064a4:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80064a8:	8023      	strh	r3, [r4, #0]
  val[1] = (int16_t)buff[3];
  val[1] = (val[1] * 256) +  (int16_t)buff[2];
 80064aa:	f89d 2003 	ldrb.w	r2, [sp, #3]
 80064ae:	f89d 3002 	ldrb.w	r3, [sp, #2]
 80064b2:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80064b6:	8063      	strh	r3, [r4, #2]
  val[2] = (int16_t)buff[5];
  val[2] = (val[2] * 256) +  (int16_t)buff[4];
 80064b8:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80064bc:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80064c0:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80064c4:	80a3      	strh	r3, [r4, #4]
  return ret;
}
 80064c6:	b002      	add	sp, #8
 80064c8:	bd10      	pop	{r4, pc}

080064ca <ism330dlc_data_ready_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dlc_data_ready_mode_set(stmdev_ctx_t *ctx,
                                      ism330dlc_drdy_pulsed_t val)
{
 80064ca:	b537      	push	{r0, r1, r2, r4, r5, lr}
  ism330dlc_drdy_pulse_cfg_t drdy_pulse_cfg_g;
  int32_t ret;
  ret = ism330dlc_read_reg(ctx, ISM330DLC_DRDY_PULSE_CFG,
 80064cc:	2301      	movs	r3, #1
{
 80064ce:	460d      	mov	r5, r1
  ret = ism330dlc_read_reg(ctx, ISM330DLC_DRDY_PULSE_CFG,
 80064d0:	aa01      	add	r2, sp, #4
 80064d2:	210b      	movs	r1, #11
{
 80064d4:	4604      	mov	r4, r0
  ret = ism330dlc_read_reg(ctx, ISM330DLC_DRDY_PULSE_CFG,
 80064d6:	f7ff feab 	bl	8006230 <ism330dlc_read_reg>
                           (uint8_t *)&drdy_pulse_cfg_g, 1);

  if (ret == 0) {
 80064da:	b958      	cbnz	r0, 80064f4 <ism330dlc_data_ready_mode_set+0x2a>
    drdy_pulse_cfg_g.drdy_pulsed = (uint8_t) val;
 80064dc:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80064e0:	f365 13c7 	bfi	r3, r5, #7, #1
 80064e4:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = ism330dlc_write_reg(ctx, ISM330DLC_DRDY_PULSE_CFG,
 80064e8:	aa01      	add	r2, sp, #4
 80064ea:	2301      	movs	r3, #1
 80064ec:	210b      	movs	r1, #11
 80064ee:	4620      	mov	r0, r4
 80064f0:	f7ff fea5 	bl	800623e <ism330dlc_write_reg>
                              (uint8_t *)&drdy_pulse_cfg_g, 1);
  }

  return ret;
}
 80064f4:	b003      	add	sp, #12
 80064f6:	bd30      	pop	{r4, r5, pc}

080064f8 <ism330dlc_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dlc_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80064f8:	460a      	mov	r2, r1
  int32_t ret;
  ret = ism330dlc_read_reg(ctx, ISM330DLC_WHO_AM_I, buff, 1);
 80064fa:	2301      	movs	r3, #1
 80064fc:	210f      	movs	r1, #15
 80064fe:	f7ff be97 	b.w	8006230 <ism330dlc_read_reg>

08006502 <ism330dlc_reset_set>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dlc_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8006502:	b537      	push	{r0, r1, r2, r4, r5, lr}
  ism330dlc_ctrl3_c_t ctrl3_c;
  int32_t ret;
  ret = ism330dlc_read_reg(ctx, ISM330DLC_CTRL3_C, (uint8_t *)&ctrl3_c,
 8006504:	2301      	movs	r3, #1
{
 8006506:	460d      	mov	r5, r1
  ret = ism330dlc_read_reg(ctx, ISM330DLC_CTRL3_C, (uint8_t *)&ctrl3_c,
 8006508:	aa01      	add	r2, sp, #4
 800650a:	2112      	movs	r1, #18
{
 800650c:	4604      	mov	r4, r0
  ret = ism330dlc_read_reg(ctx, ISM330DLC_CTRL3_C, (uint8_t *)&ctrl3_c,
 800650e:	f7ff fe8f 	bl	8006230 <ism330dlc_read_reg>
                           1);

  if (ret == 0) {
 8006512:	b958      	cbnz	r0, 800652c <ism330dlc_reset_set+0x2a>
    ctrl3_c.sw_reset = val;
 8006514:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8006518:	f365 0300 	bfi	r3, r5, #0, #1
 800651c:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = ism330dlc_write_reg(ctx, ISM330DLC_CTRL3_C, (uint8_t *)&ctrl3_c,
 8006520:	aa01      	add	r2, sp, #4
 8006522:	2301      	movs	r3, #1
 8006524:	2112      	movs	r1, #18
 8006526:	4620      	mov	r0, r4
 8006528:	f7ff fe89 	bl	800623e <ism330dlc_write_reg>
                              1);
  }

  return ret;
}
 800652c:	b003      	add	sp, #12
 800652e:	bd30      	pop	{r4, r5, pc}

08006530 <ism330dlc_auto_increment_set>:
  * @param  val    Change the values of if_inc in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dlc_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8006530:	b537      	push	{r0, r1, r2, r4, r5, lr}
  ism330dlc_ctrl3_c_t ctrl3_c;
  int32_t ret;
  ret = ism330dlc_read_reg(ctx, ISM330DLC_CTRL3_C, (uint8_t *)&ctrl3_c,
 8006532:	2301      	movs	r3, #1
{
 8006534:	460d      	mov	r5, r1
  ret = ism330dlc_read_reg(ctx, ISM330DLC_CTRL3_C, (uint8_t *)&ctrl3_c,
 8006536:	aa01      	add	r2, sp, #4
 8006538:	2112      	movs	r1, #18
{
 800653a:	4604      	mov	r4, r0
  ret = ism330dlc_read_reg(ctx, ISM330DLC_CTRL3_C, (uint8_t *)&ctrl3_c,
 800653c:	f7ff fe78 	bl	8006230 <ism330dlc_read_reg>
                           1);

  if (ret == 0) {
 8006540:	b958      	cbnz	r0, 800655a <ism330dlc_auto_increment_set+0x2a>
    ctrl3_c.if_inc = val;
 8006542:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8006546:	f365 0382 	bfi	r3, r5, #2, #1
 800654a:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = ism330dlc_write_reg(ctx, ISM330DLC_CTRL3_C, (uint8_t *)&ctrl3_c,
 800654e:	aa01      	add	r2, sp, #4
 8006550:	2301      	movs	r3, #1
 8006552:	2112      	movs	r1, #18
 8006554:	4620      	mov	r0, r4
 8006556:	f7ff fe72 	bl	800623e <ism330dlc_write_reg>
                              1);
  }

  return ret;
}
 800655a:	b003      	add	sp, #12
 800655c:	bd30      	pop	{r4, r5, pc}

0800655e <ism330dlc_xl_hp_bandwidth_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dlc_xl_hp_bandwidth_set(stmdev_ctx_t *ctx,
                                      ism330dlc_hpcf_xl_t val)
{
 800655e:	b537      	push	{r0, r1, r2, r4, r5, lr}
  ism330dlc_ctrl8_xl_t ctrl8_xl;
  int32_t ret;
  ret = ism330dlc_read_reg(ctx, ISM330DLC_CTRL8_XL,
 8006560:	2301      	movs	r3, #1
{
 8006562:	460c      	mov	r4, r1
  ret = ism330dlc_read_reg(ctx, ISM330DLC_CTRL8_XL,
 8006564:	aa01      	add	r2, sp, #4
 8006566:	2117      	movs	r1, #23
{
 8006568:	4605      	mov	r5, r0
  ret = ism330dlc_read_reg(ctx, ISM330DLC_CTRL8_XL,
 800656a:	f7ff fe61 	bl	8006230 <ism330dlc_read_reg>
                           (uint8_t *)&ctrl8_xl, 1);

  if (ret == 0) {
 800656e:	b988      	cbnz	r0, 8006594 <ism330dlc_xl_hp_bandwidth_set+0x36>
    ctrl8_xl.input_composite = 0;
    ctrl8_xl.hpcf_xl = (uint8_t)val & 0x03U;
    ctrl8_xl.hp_slope_xl_en = 1;
 8006570:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8006574:	0164      	lsls	r4, r4, #5
 8006576:	f004 0460 	and.w	r4, r4, #96	; 0x60
 800657a:	f023 036c 	bic.w	r3, r3, #108	; 0x6c
 800657e:	f044 0404 	orr.w	r4, r4, #4
 8006582:	431c      	orrs	r4, r3
    ret = ism330dlc_write_reg(ctx, ISM330DLC_CTRL8_XL,
 8006584:	aa01      	add	r2, sp, #4
 8006586:	2301      	movs	r3, #1
 8006588:	2117      	movs	r1, #23
 800658a:	4628      	mov	r0, r5
    ctrl8_xl.hp_slope_xl_en = 1;
 800658c:	f88d 4004 	strb.w	r4, [sp, #4]
    ret = ism330dlc_write_reg(ctx, ISM330DLC_CTRL8_XL,
 8006590:	f7ff fe55 	bl	800623e <ism330dlc_write_reg>
                              (uint8_t *)&ctrl8_xl, 1);
  }

  return ret;
}
 8006594:	b003      	add	sp, #12
 8006596:	bd30      	pop	{r4, r5, pc}

08006598 <ism330dlc_fifo_watermark_set>:
  * @param  val    Change the values of fth in reg FIFO_CTRL1
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dlc_fifo_watermark_set(stmdev_ctx_t *ctx, uint16_t val)
{
 8006598:	b537      	push	{r0, r1, r2, r4, r5, lr}
  ism330dlc_fifo_ctrl1_t fifo_ctrl1;
  ism330dlc_fifo_ctrl2_t fifo_ctrl2;
  int32_t ret;
  ret = ism330dlc_read_reg(ctx, ISM330DLC_FIFO_CTRL2,
 800659a:	2301      	movs	r3, #1
{
 800659c:	460d      	mov	r5, r1
  ret = ism330dlc_read_reg(ctx, ISM330DLC_FIFO_CTRL2,
 800659e:	aa01      	add	r2, sp, #4
 80065a0:	2107      	movs	r1, #7
{
 80065a2:	4604      	mov	r4, r0
  ret = ism330dlc_read_reg(ctx, ISM330DLC_FIFO_CTRL2,
 80065a4:	f7ff fe44 	bl	8006230 <ism330dlc_read_reg>
                           (uint8_t *)&fifo_ctrl2, 1);

  if (ret == 0) {
 80065a8:	b9a8      	cbnz	r0, 80065d6 <ism330dlc_fifo_watermark_set+0x3e>
    fifo_ctrl2.fth = (uint8_t) (uint8_t) (val / 256U);
 80065aa:	f89d 3004 	ldrb.w	r3, [sp, #4]
    fifo_ctrl1.fth = (uint8_t) (uint8_t) (val - (fifo_ctrl2.fth * 256U));
 80065ae:	f88d 5000 	strb.w	r5, [sp]
    fifo_ctrl2.fth = (uint8_t) (uint8_t) (val / 256U);
 80065b2:	0a2a      	lsrs	r2, r5, #8
 80065b4:	f362 0302 	bfi	r3, r2, #0, #3
 80065b8:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = ism330dlc_write_reg(ctx, ISM330DLC_FIFO_CTRL1,
 80065bc:	466a      	mov	r2, sp
 80065be:	2301      	movs	r3, #1
 80065c0:	2106      	movs	r1, #6
 80065c2:	4620      	mov	r0, r4
 80065c4:	f7ff fe3b 	bl	800623e <ism330dlc_write_reg>
                              (uint8_t *)&fifo_ctrl1, 1);

    if (ret == 0) {
 80065c8:	b928      	cbnz	r0, 80065d6 <ism330dlc_fifo_watermark_set+0x3e>
      ret = ism330dlc_write_reg(ctx, ISM330DLC_FIFO_CTRL2,
 80065ca:	2301      	movs	r3, #1
 80065cc:	aa01      	add	r2, sp, #4
 80065ce:	2107      	movs	r1, #7
 80065d0:	4620      	mov	r0, r4
 80065d2:	f7ff fe34 	bl	800623e <ism330dlc_write_reg>
                                (uint8_t *)&fifo_ctrl2, 1);
    }
  }

  return ret;
}
 80065d6:	b003      	add	sp, #12
 80065d8:	bd30      	pop	{r4, r5, pc}

080065da <ism330dlc_fifo_xl_batch_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dlc_fifo_xl_batch_set(stmdev_ctx_t *ctx,
                                    ism330dlc_dec_fifo_xl_t val)
{
 80065da:	b537      	push	{r0, r1, r2, r4, r5, lr}
  ism330dlc_fifo_ctrl3_t fifo_ctrl3;
  int32_t ret;
  ret = ism330dlc_read_reg(ctx, ISM330DLC_FIFO_CTRL3,
 80065dc:	2301      	movs	r3, #1
{
 80065de:	460d      	mov	r5, r1
  ret = ism330dlc_read_reg(ctx, ISM330DLC_FIFO_CTRL3,
 80065e0:	aa01      	add	r2, sp, #4
 80065e2:	2108      	movs	r1, #8
{
 80065e4:	4604      	mov	r4, r0
  ret = ism330dlc_read_reg(ctx, ISM330DLC_FIFO_CTRL3,
 80065e6:	f7ff fe23 	bl	8006230 <ism330dlc_read_reg>
                           (uint8_t *)&fifo_ctrl3, 1);

  if (ret == 0) {
 80065ea:	b958      	cbnz	r0, 8006604 <ism330dlc_fifo_xl_batch_set+0x2a>
    fifo_ctrl3.dec_fifo_xl = (uint8_t)val;
 80065ec:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80065f0:	f365 0302 	bfi	r3, r5, #0, #3
 80065f4:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = ism330dlc_write_reg(ctx, ISM330DLC_FIFO_CTRL3,
 80065f8:	aa01      	add	r2, sp, #4
 80065fa:	2301      	movs	r3, #1
 80065fc:	2108      	movs	r1, #8
 80065fe:	4620      	mov	r0, r4
 8006600:	f7ff fe1d 	bl	800623e <ism330dlc_write_reg>
                              (uint8_t *)&fifo_ctrl3, 1);
  }

  return ret;
}
 8006604:	b003      	add	sp, #12
 8006606:	bd30      	pop	{r4, r5, pc}

08006608 <ism330dlc_fifo_gy_batch_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dlc_fifo_gy_batch_set(stmdev_ctx_t *ctx,
                                    ism330dlc_dec_fifo_gyro_t val)
{
 8006608:	b537      	push	{r0, r1, r2, r4, r5, lr}
  ism330dlc_fifo_ctrl3_t fifo_ctrl3;
  int32_t ret;
  ret = ism330dlc_read_reg(ctx, ISM330DLC_FIFO_CTRL3,
 800660a:	2301      	movs	r3, #1
{
 800660c:	460d      	mov	r5, r1
  ret = ism330dlc_read_reg(ctx, ISM330DLC_FIFO_CTRL3,
 800660e:	aa01      	add	r2, sp, #4
 8006610:	2108      	movs	r1, #8
{
 8006612:	4604      	mov	r4, r0
  ret = ism330dlc_read_reg(ctx, ISM330DLC_FIFO_CTRL3,
 8006614:	f7ff fe0c 	bl	8006230 <ism330dlc_read_reg>
                           (uint8_t *)&fifo_ctrl3, 1);

  if (ret == 0) {
 8006618:	b958      	cbnz	r0, 8006632 <ism330dlc_fifo_gy_batch_set+0x2a>
    fifo_ctrl3.dec_fifo_gyro = (uint8_t)val;
 800661a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800661e:	f365 03c5 	bfi	r3, r5, #3, #3
 8006622:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = ism330dlc_write_reg(ctx, ISM330DLC_FIFO_CTRL3,
 8006626:	aa01      	add	r2, sp, #4
 8006628:	2301      	movs	r3, #1
 800662a:	2108      	movs	r1, #8
 800662c:	4620      	mov	r0, r4
 800662e:	f7ff fe06 	bl	800623e <ism330dlc_write_reg>
                              (uint8_t *)&fifo_ctrl3, 1);
  }

  return ret;
}
 8006632:	b003      	add	sp, #12
 8006634:	bd30      	pop	{r4, r5, pc}

08006636 <ism330dlc_fifo_stop_on_wtm_set>:
  * @param  val    Change the values of stop_on_fth in reg FIFO_CTRL4
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dlc_fifo_stop_on_wtm_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8006636:	b537      	push	{r0, r1, r2, r4, r5, lr}
  ism330dlc_fifo_ctrl4_t fifo_ctrl4;
  int32_t ret;
  ret = ism330dlc_read_reg(ctx, ISM330DLC_FIFO_CTRL4,
 8006638:	2301      	movs	r3, #1
{
 800663a:	460d      	mov	r5, r1
  ret = ism330dlc_read_reg(ctx, ISM330DLC_FIFO_CTRL4,
 800663c:	aa01      	add	r2, sp, #4
 800663e:	2109      	movs	r1, #9
{
 8006640:	4604      	mov	r4, r0
  ret = ism330dlc_read_reg(ctx, ISM330DLC_FIFO_CTRL4,
 8006642:	f7ff fdf5 	bl	8006230 <ism330dlc_read_reg>
                           (uint8_t *)&fifo_ctrl4, 1);

  if (ret == 0) {
 8006646:	b958      	cbnz	r0, 8006660 <ism330dlc_fifo_stop_on_wtm_set+0x2a>
    fifo_ctrl4.stop_on_fth = val;
 8006648:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800664c:	f365 13c7 	bfi	r3, r5, #7, #1
 8006650:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = ism330dlc_write_reg(ctx, ISM330DLC_FIFO_CTRL4,
 8006654:	aa01      	add	r2, sp, #4
 8006656:	2301      	movs	r3, #1
 8006658:	2109      	movs	r1, #9
 800665a:	4620      	mov	r0, r4
 800665c:	f7ff fdef 	bl	800623e <ism330dlc_write_reg>
                              (uint8_t *)&fifo_ctrl4, 1);
  }

  return ret;
}
 8006660:	b003      	add	sp, #12
 8006662:	bd30      	pop	{r4, r5, pc}

08006664 <ism330dlc_fifo_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dlc_fifo_mode_set(stmdev_ctx_t *ctx,
                                ism330dlc_fifo_mode_t val)
{
 8006664:	b537      	push	{r0, r1, r2, r4, r5, lr}
  ism330dlc_fifo_ctrl5_t fifo_ctrl5;
  int32_t ret;
  ret = ism330dlc_read_reg(ctx, ISM330DLC_FIFO_CTRL5,
 8006666:	2301      	movs	r3, #1
{
 8006668:	460d      	mov	r5, r1
  ret = ism330dlc_read_reg(ctx, ISM330DLC_FIFO_CTRL5,
 800666a:	aa01      	add	r2, sp, #4
 800666c:	210a      	movs	r1, #10
{
 800666e:	4604      	mov	r4, r0
  ret = ism330dlc_read_reg(ctx, ISM330DLC_FIFO_CTRL5,
 8006670:	f7ff fdde 	bl	8006230 <ism330dlc_read_reg>
                           (uint8_t *)&fifo_ctrl5, 1);

  if (ret == 0) {
 8006674:	b958      	cbnz	r0, 800668e <ism330dlc_fifo_mode_set+0x2a>
    fifo_ctrl5.fifo_mode = (uint8_t)val;
 8006676:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800667a:	f365 0302 	bfi	r3, r5, #0, #3
 800667e:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = ism330dlc_write_reg(ctx, ISM330DLC_FIFO_CTRL5,
 8006682:	aa01      	add	r2, sp, #4
 8006684:	2301      	movs	r3, #1
 8006686:	210a      	movs	r1, #10
 8006688:	4620      	mov	r0, r4
 800668a:	f7ff fdd8 	bl	800623e <ism330dlc_write_reg>
                              (uint8_t *)&fifo_ctrl5, 1);
  }

  return ret;
}
 800668e:	b003      	add	sp, #12
 8006690:	bd30      	pop	{r4, r5, pc}

08006692 <ism330dlc_fifo_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dlc_fifo_data_rate_set(stmdev_ctx_t *ctx,
                                     ism330dlc_odr_fifo_t val)
{
 8006692:	b537      	push	{r0, r1, r2, r4, r5, lr}
  ism330dlc_fifo_ctrl5_t fifo_ctrl5;
  int32_t ret;
  ret = ism330dlc_read_reg(ctx, ISM330DLC_FIFO_CTRL5,
 8006694:	2301      	movs	r3, #1
{
 8006696:	460d      	mov	r5, r1
  ret = ism330dlc_read_reg(ctx, ISM330DLC_FIFO_CTRL5,
 8006698:	aa01      	add	r2, sp, #4
 800669a:	210a      	movs	r1, #10
{
 800669c:	4604      	mov	r4, r0
  ret = ism330dlc_read_reg(ctx, ISM330DLC_FIFO_CTRL5,
 800669e:	f7ff fdc7 	bl	8006230 <ism330dlc_read_reg>
                           (uint8_t *)&fifo_ctrl5, 1);

  if (ret == 0) {
 80066a2:	b958      	cbnz	r0, 80066bc <ism330dlc_fifo_data_rate_set+0x2a>
    fifo_ctrl5.odr_fifo = (uint8_t)val;
 80066a4:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80066a8:	f365 03c6 	bfi	r3, r5, #3, #4
 80066ac:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = ism330dlc_write_reg(ctx, ISM330DLC_FIFO_CTRL5,
 80066b0:	aa01      	add	r2, sp, #4
 80066b2:	2301      	movs	r3, #1
 80066b4:	210a      	movs	r1, #10
 80066b6:	4620      	mov	r0, r4
 80066b8:	f7ff fdc1 	bl	800623e <ism330dlc_write_reg>
                              (uint8_t *)&fifo_ctrl5, 1);
  }

  return ret;
}
 80066bc:	b003      	add	sp, #12
 80066be:	bd30      	pop	{r4, r5, pc}

080066c0 <CCA02M2_AUDIO_IN_DeInit>:
  {
    return BSP_ERROR_WRONG_PARAM;
  }
  else
  {
    if(Instance != 0U)
 80066c0:	b910      	cbnz	r0, 80066c8 <CCA02M2_AUDIO_IN_DeInit+0x8>
#else
      return  BSP_ERROR_WRONG_PARAM;
#endif
    }
  /* Update BSP AUDIO IN state */     
  AudioInCtx[Instance].State = AUDIO_IN_STATE_RESET;   
 80066c2:	4b03      	ldr	r3, [pc, #12]	; (80066d0 <CCA02M2_AUDIO_IN_DeInit+0x10>)
 80066c4:	6258      	str	r0, [r3, #36]	; 0x24
  }
  /* Return BSP status */
  return BSP_ERROR_NONE;
 80066c6:	4770      	bx	lr
      return  BSP_ERROR_WRONG_PARAM;
 80066c8:	f06f 0001 	mvn.w	r0, #1
}
 80066cc:	4770      	bx	lr
 80066ce:	bf00      	nop
 80066d0:	20000a7c 	.word	0x20000a7c

080066d4 <MX_I2S_IN_ClockConfig>:
* @note   This API is called by CCA02M2_AUDIO_IN_Init() 
*         Being __weak it can be overwritten by the application     
* @retval HAL_OK if no problem during execution, HAL_ERROR otherwise
*/
__weak HAL_StatusTypeDef MX_I2S_IN_ClockConfig(I2S_HandleTypeDef *hi2s, uint32_t PDM_rate)
{ 
 80066d4:	b510      	push	{r4, lr}
 80066d6:	b098      	sub	sp, #96	; 0x60
  UNUSED(hi2s);
  
  HAL_StatusTypeDef ret = HAL_OK;
  /*I2S PLL Configuration*/
  RCC_PeriphCLKInitTypeDef rccclkinit;
  HAL_RCCEx_GetPeriphCLKConfig(&rccclkinit); 
 80066d8:	a801      	add	r0, sp, #4
{ 
 80066da:	460c      	mov	r4, r1
  HAL_RCCEx_GetPeriphCLKConfig(&rccclkinit); 
 80066dc:	f002 fed6 	bl	800948c <HAL_RCCEx_GetPeriphCLKConfig>
  
#if defined(STM32F446xx)
  rccclkinit.PLLI2S.PLLI2SQ = 2;
 80066e0:	2302      	movs	r3, #2
 80066e2:	9305      	str	r3, [sp, #20]
  rccclkinit.PLLI2SDivQ = 1;
 80066e4:	2301      	movs	r3, #1
 80066e6:	930b      	str	r3, [sp, #44]	; 0x2c
 80066e8:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 80066ec:	fbb4 f1f3 	udiv	r1, r4, r3
 80066f0:	fb03 4411 	mls	r4, r3, r1, r4
#endif
  if ((PDM_rate % 1280U) == 0U)
 80066f4:	b97c      	cbnz	r4, 8006716 <MX_I2S_IN_ClockConfig+0x42>
  {
#if defined(STM32F411xE) || defined (STM32F446xx)    
    rccclkinit.PLLI2S.PLLI2SM = 10;
    rccclkinit.PLLI2S.PLLI2SN = 96;
 80066f6:	2360      	movs	r3, #96	; 0x60
 80066f8:	210a      	movs	r1, #10
 80066fa:	e9cd 1302 	strd	r1, r3, [sp, #8]
#else
    rccclkinit.PLLI2S.PLLI2SN = 192;
#endif
    rccclkinit.PLLI2S.PLLI2SR = 5;
 80066fe:	2305      	movs	r3, #5
#if defined(STM32F411xE) || defined (STM32F446xx)
    
    rccclkinit.PLLI2S.PLLI2SM = 8;
#endif
    rccclkinit.PLLI2S.PLLI2SN = 258;
    rccclkinit.PLLI2S.PLLI2SR = 3;
 8006700:	9306      	str	r3, [sp, #24]
  rccclkinit.PeriphClockSelection = RCC_PERIPHCLK_I2S_APB2;
#else
  rccclkinit.PeriphClockSelection = RCC_PERIPHCLK_I2S;
#endif
  
  if(HAL_RCCEx_PeriphCLKConfig(&rccclkinit) != HAL_OK)
 8006702:	a801      	add	r0, sp, #4
  rccclkinit.PeriphClockSelection = RCC_PERIPHCLK_I2S_APB2;
 8006704:	2302      	movs	r3, #2
 8006706:	9301      	str	r3, [sp, #4]
  if(HAL_RCCEx_PeriphCLKConfig(&rccclkinit) != HAL_OK)
 8006708:	f002 fcb4 	bl	8009074 <HAL_RCCEx_PeriphCLKConfig>
  {
    ret = HAL_ERROR;
  }  
  return ret;
}
 800670c:	3800      	subs	r0, #0
 800670e:	bf18      	it	ne
 8006710:	2001      	movne	r0, #1
 8006712:	b018      	add	sp, #96	; 0x60
 8006714:	bd10      	pop	{r4, pc}
    rccclkinit.PLLI2S.PLLI2SN = 258;
 8006716:	f44f 7381 	mov.w	r3, #258	; 0x102
 800671a:	2208      	movs	r2, #8
 800671c:	e9cd 2302 	strd	r2, r3, [sp, #8]
    rccclkinit.PLLI2S.PLLI2SR = 3;
 8006720:	2303      	movs	r3, #3
 8006722:	e7ed      	b.n	8006700 <MX_I2S_IN_ClockConfig+0x2c>

08006724 <MX_SPI_Init>:
__weak HAL_StatusTypeDef MX_SPI_Init(SPI_HandleTypeDef* hspi, MX_SPI_Config *MXConfig)
{  
  static DMA_HandleTypeDef hdma_rx;
  HAL_StatusTypeDef ret = HAL_OK;
  
  hspi->Init.BaudRatePrescaler = MXConfig->BaudRatePrescaler; 
 8006724:	698b      	ldr	r3, [r1, #24]
  hspi->Init.TIMode            = MXConfig->TIMode;            
  hspi->Init.Mode              = MXConfig->Mode; 
  
  /* Configure the DMA handler for Transmission process */
  hdma_rx.Instance                 = AUDIO_IN_SPI_RX_DMA_STREAM;
  hdma_rx.Init.Channel             = AUDIO_IN_SPI_RX_DMA_CHANNEL;
 8006726:	4a22      	ldr	r2, [pc, #136]	; (80067b0 <MX_SPI_Init+0x8c>)
{  
 8006728:	b570      	push	{r4, r5, r6, lr}
  hspi->Init.BaudRatePrescaler = MXConfig->BaudRatePrescaler; 
 800672a:	61c3      	str	r3, [r0, #28]
  hspi->Init.Direction         = MXConfig->Direction;         
 800672c:	684b      	ldr	r3, [r1, #4]
 800672e:	6083      	str	r3, [r0, #8]
  hspi->Init.CLKPhase          = MXConfig->CLKPhase;          
 8006730:	690b      	ldr	r3, [r1, #16]
 8006732:	6143      	str	r3, [r0, #20]
  hspi->Init.CLKPolarity       = MXConfig->CLKPolarity;       
 8006734:	68cb      	ldr	r3, [r1, #12]
 8006736:	6103      	str	r3, [r0, #16]
  hspi->Init.CRCCalculation    = MXConfig->CRCCalculation;    
 8006738:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 800673a:	6283      	str	r3, [r0, #40]	; 0x28
  hspi->Init.CRCPolynomial     = MXConfig->CRCPolynomial;     
 800673c:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 800673e:	62c3      	str	r3, [r0, #44]	; 0x2c
  hspi->Init.DataSize          = MXConfig->DataSize;          
 8006740:	688b      	ldr	r3, [r1, #8]
 8006742:	60c3      	str	r3, [r0, #12]
  hspi->Init.FirstBit          = MXConfig->FirstBit;         
 8006744:	69cb      	ldr	r3, [r1, #28]
 8006746:	6203      	str	r3, [r0, #32]
  hspi->Init.NSS               = MXConfig->NSS;               
 8006748:	694b      	ldr	r3, [r1, #20]
 800674a:	6183      	str	r3, [r0, #24]
  hspi->Init.TIMode            = MXConfig->TIMode;            
 800674c:	6a0b      	ldr	r3, [r1, #32]
  hdma_rx.Instance                 = AUDIO_IN_SPI_RX_DMA_STREAM;
 800674e:	4c19      	ldr	r4, [pc, #100]	; (80067b4 <MX_SPI_Init+0x90>)
  hspi->Init.TIMode            = MXConfig->TIMode;            
 8006750:	6243      	str	r3, [r0, #36]	; 0x24
  hspi->Init.Mode              = MXConfig->Mode; 
 8006752:	680b      	ldr	r3, [r1, #0]
 8006754:	6043      	str	r3, [r0, #4]
  hdma_rx.Init.Channel             = AUDIO_IN_SPI_RX_DMA_CHANNEL;
 8006756:	f04f 63c0 	mov.w	r3, #100663296	; 0x6000000
 800675a:	e9c4 234b 	strd	r2, r3, [r4, #300]	; 0x12c
  hdma_rx.Init.Direction           = DMA_PERIPH_TO_MEMORY;
  hdma_rx.Init.PeriphInc           = DMA_PINC_DISABLE;
  hdma_rx.Init.MemInc              = DMA_MINC_ENABLE;
  hdma_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800675e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006762:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006766:	e9c4 124f 	strd	r1, r2, [r4, #316]	; 0x13c
{  
 800676a:	4605      	mov	r5, r0
  hdma_rx.Init.MemDataAlignment    = DMA_MDATAALIGN_HALFWORD;
  hdma_rx.Init.Mode                = DMA_CIRCULAR;
 800676c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006770:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8006774:	e9c4 0251 	strd	r0, r2, [r4, #324]	; 0x144
  hdma_rx.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 8006778:	2300      	movs	r3, #0
  hdma_rx.Init.Priority            = DMA_PRIORITY_HIGH;
 800677a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
  hdma_rx.Init.PeriphInc           = DMA_PINC_DISABLE;
 800677e:	e9c4 334d 	strd	r3, r3, [r4, #308]	; 0x134
  hdma_rx.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
  hdma_rx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
  hdma_rx.Init.MemBurst            = DMA_MBURST_INC4;
 8006782:	2603      	movs	r6, #3
  hdma_rx.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 8006784:	e9c4 2353 	strd	r2, r3, [r4, #332]	; 0x14c
  hdma_rx.Init.MemBurst            = DMA_MBURST_INC4;
 8006788:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800678c:	e9c4 6355 	strd	r6, r3, [r4, #340]	; 0x154
  hdma_rx.Init.PeriphBurst         = DMA_PBURST_INC4;
  
  /* Configure the DMA Stream */ 
  if (HAL_DMA_Init(&hdma_rx) != HAL_OK)
 8006790:	f504 7696 	add.w	r6, r4, #300	; 0x12c
  hdma_rx.Init.PeriphBurst         = DMA_PBURST_INC4;
 8006794:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
  if (HAL_DMA_Init(&hdma_rx) != HAL_OK)
 8006798:	4630      	mov	r0, r6
  hdma_rx.Init.PeriphBurst         = DMA_PBURST_INC4;
 800679a:	f8c4 315c 	str.w	r3, [r4, #348]	; 0x15c
  if (HAL_DMA_Init(&hdma_rx) != HAL_OK)
 800679e:	f000 ffe3 	bl	8007768 <HAL_DMA_Init>
  
  /* Associate the initialized DMA handle to the the SPI handle */
  __HAL_LINKDMA(hspi, hdmarx, hdma_rx);      
  
  return ret;
}
 80067a2:	3800      	subs	r0, #0
  __HAL_LINKDMA(hspi, hdmarx, hdma_rx);      
 80067a4:	64ee      	str	r6, [r5, #76]	; 0x4c
 80067a6:	f8c4 5164 	str.w	r5, [r4, #356]	; 0x164
}
 80067aa:	bf18      	it	ne
 80067ac:	2001      	movne	r0, #1
 80067ae:	bd70      	pop	{r4, r5, r6, pc}
 80067b0:	40026440 	.word	0x40026440
 80067b4:	20000a7c 	.word	0x20000a7c

080067b8 <MX_I2S_IN_Init>:
__weak HAL_StatusTypeDef MX_I2S_IN_Init(I2S_HandleTypeDef* hi2s, MX_I2S_IN_Config *MXConfig)
{
  static DMA_HandleTypeDef hdma_i2sRx;
  HAL_StatusTypeDef ret = HAL_OK;
  
  hi2s->Init.DataFormat = MXConfig->DataFormat;
 80067b8:	688b      	ldr	r3, [r1, #8]
{
 80067ba:	b537      	push	{r0, r1, r2, r4, r5, lr}
  hi2s->Init.DataFormat = MXConfig->DataFormat;
 80067bc:	60c3      	str	r3, [r0, #12]
  hi2s->Init.AudioFreq = MXConfig->AudioFreq;
 80067be:	690b      	ldr	r3, [r1, #16]
 80067c0:	6143      	str	r3, [r0, #20]
  hi2s->Init.ClockSource = MXConfig->ClockSource;
 80067c2:	698b      	ldr	r3, [r1, #24]
 80067c4:	61c3      	str	r3, [r0, #28]
  hi2s->Init.CPOL = MXConfig->CPOL;
 80067c6:	694b      	ldr	r3, [r1, #20]
 80067c8:	6183      	str	r3, [r0, #24]
  hi2s->Init.MCLKOutput = MXConfig->MCLKOutput;
 80067ca:	68cb      	ldr	r3, [r1, #12]
 80067cc:	6103      	str	r3, [r0, #16]
  hi2s->Init.Mode = MXConfig->Mode;
 80067ce:	680b      	ldr	r3, [r1, #0]
 80067d0:	6043      	str	r3, [r0, #4]
  hi2s->Init.Standard = MXConfig->Standard;
 80067d2:	684b      	ldr	r3, [r1, #4]
 80067d4:	6083      	str	r3, [r0, #8]
#ifdef USE_STM32F4XX_NUCLEO
  hi2s->Init.FullDuplexMode = MXConfig->FullDuplexMode;  
 80067d6:	69cb      	ldr	r3, [r1, #28]
 80067d8:	6203      	str	r3, [r0, #32]
#endif
  
  /* Enable the DMA clock */
  AUDIO_IN_I2S_DMAx_CLK_ENABLE();
 80067da:	2200      	movs	r2, #0
 80067dc:	4b24      	ldr	r3, [pc, #144]	; (8006870 <MX_I2S_IN_Init+0xb8>)
 80067de:	9201      	str	r2, [sp, #4]
 80067e0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80067e2:	f441 1100 	orr.w	r1, r1, #2097152	; 0x200000
 80067e6:	6319      	str	r1, [r3, #48]	; 0x30
 80067e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  
  if(hi2s->Instance == AUDIO_IN_I2S_INSTANCE)
 80067ea:	6801      	ldr	r1, [r0, #0]
  AUDIO_IN_I2S_DMAx_CLK_ENABLE();
 80067ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80067f0:	9301      	str	r3, [sp, #4]
 80067f2:	9b01      	ldr	r3, [sp, #4]
  if(hi2s->Instance == AUDIO_IN_I2S_INSTANCE)
 80067f4:	4b1f      	ldr	r3, [pc, #124]	; (8006874 <MX_I2S_IN_Init+0xbc>)
 80067f6:	4299      	cmp	r1, r3
 80067f8:	d137      	bne.n	800686a <MX_I2S_IN_Init+0xb2>
  {
    /* Configure the hdma_i2sRx handle parameters */
    hdma_i2sRx.Init.Channel             = AUDIO_IN_I2S_DMAx_CHANNEL;
 80067fa:	4b1f      	ldr	r3, [pc, #124]	; (8006878 <MX_I2S_IN_Init+0xc0>)
    hdma_i2sRx.Init.Direction           = DMA_PERIPH_TO_MEMORY;
    hdma_i2sRx.Init.PeriphInc           = DMA_PINC_DISABLE;
    hdma_i2sRx.Init.MemInc              = DMA_MINC_ENABLE;
    hdma_i2sRx.Init.PeriphDataAlignment = AUDIO_IN_I2S_DMAx_PERIPH_DATA_SIZE;
 80067fc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8006800:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006804:	e9c3 4167 	strd	r4, r1, [r3, #412]	; 0x19c
    hdma_i2sRx.Init.MemDataAlignment    = AUDIO_IN_I2S_DMAx_MEM_DATA_SIZE;
    hdma_i2sRx.Init.Mode                = DMA_CIRCULAR;
 8006808:	f44f 5500 	mov.w	r5, #8192	; 0x2000
 800680c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006810:	e9c3 5169 	strd	r5, r1, [r3, #420]	; 0x1a4
    hdma_i2sRx.Init.Priority            = DMA_PRIORITY_HIGH;
 8006814:	f44f 3100 	mov.w	r1, #131072	; 0x20000
    hdma_i2sRx.Init.PeriphBurst         = DMA_MBURST_SINGLE;
    
    hdma_i2sRx.Instance = AUDIO_IN_I2S_DMAx_STREAM;
    
    /* Associate the DMA handle */
    __HAL_LINKDMA(hi2s, hdmarx, hdma_i2sRx);    
 8006818:	f503 75c6 	add.w	r5, r3, #396	; 0x18c
    hdma_i2sRx.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 800681c:	e9c3 126b 	strd	r1, r2, [r3, #428]	; 0x1ac
    hdma_i2sRx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8006820:	2103      	movs	r1, #3
    hdma_i2sRx.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 8006822:	e9c3 2264 	strd	r2, r2, [r3, #400]	; 0x190
    hdma_i2sRx.Init.MemBurst            = DMA_MBURST_SINGLE;
 8006826:	e9c3 126d 	strd	r1, r2, [r3, #436]	; 0x1b4
    hdma_i2sRx.Init.PeriphInc           = DMA_PINC_DISABLE;
 800682a:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
    hdma_i2sRx.Init.PeriphBurst         = DMA_MBURST_SINGLE;
 800682e:	f8c3 21bc 	str.w	r2, [r3, #444]	; 0x1bc
    __HAL_LINKDMA(hi2s, hdmarx, hdma_i2sRx);    
 8006832:	63c5      	str	r5, [r0, #60]	; 0x3c
    hdma_i2sRx.Instance = AUDIO_IN_I2S_DMAx_STREAM;
 8006834:	4a11      	ldr	r2, [pc, #68]	; (800687c <MX_I2S_IN_Init+0xc4>)
    __HAL_LINKDMA(hi2s, hdmarx, hdma_i2sRx);    
 8006836:	f8c3 01c4 	str.w	r0, [r3, #452]	; 0x1c4
    /* Deinitialize the Stream for new transfer */
    if (HAL_DMA_DeInit(&hdma_i2sRx) != HAL_OK)
 800683a:	4628      	mov	r0, r5
    hdma_i2sRx.Instance = AUDIO_IN_I2S_DMAx_STREAM;
 800683c:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
    if (HAL_DMA_DeInit(&hdma_i2sRx) != HAL_OK)
 8006840:	f001 f812 	bl	8007868 <HAL_DMA_DeInit>
 8006844:	4604      	mov	r4, r0
    {
      ret = HAL_ERROR;
    }    
    /* Configure the DMA Stream */
    if (HAL_DMA_Init(&hdma_i2sRx) != HAL_OK)
 8006846:	4628      	mov	r0, r5
 8006848:	f000 ff8e 	bl	8007768 <HAL_DMA_Init>
 800684c:	b968      	cbnz	r0, 800686a <MX_I2S_IN_Init+0xb2>
  HAL_StatusTypeDef ret = HAL_OK;
 800684e:	3c00      	subs	r4, #0
 8006850:	bf18      	it	ne
 8006852:	2401      	movne	r4, #1
  else
  {
    ret = HAL_ERROR;
  }  
  /* I2S DMA IRQ Channel configuration */
  HAL_NVIC_SetPriority(AUDIO_IN_I2S_DMAx_IRQ, CCA02M2_AUDIO_IN_IT_PRIORITY, CCA02M2_AUDIO_IN_IT_PRIORITY);
 8006854:	2206      	movs	r2, #6
 8006856:	4611      	mov	r1, r2
 8006858:	200e      	movs	r0, #14
 800685a:	f000 feb3 	bl	80075c4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_IN_I2S_DMAx_IRQ); 
 800685e:	200e      	movs	r0, #14
 8006860:	f000 fee2 	bl	8007628 <HAL_NVIC_EnableIRQ>
  
  return ret;
}
 8006864:	4620      	mov	r0, r4
 8006866:	b003      	add	sp, #12
 8006868:	bd30      	pop	{r4, r5, pc}
      ret = HAL_ERROR;
 800686a:	2401      	movs	r4, #1
 800686c:	e7f2      	b.n	8006854 <MX_I2S_IN_Init+0x9c>
 800686e:	bf00      	nop
 8006870:	40023800 	.word	0x40023800
 8006874:	40003800 	.word	0x40003800
 8006878:	20000a7c 	.word	0x20000a7c
 800687c:	40026058 	.word	0x40026058

08006880 <CCA02M2_AUDIO_IN_PDMToPCM_Init>:
* @param  ChnlNbrIn  Number of input audio channels in the PDM buffer
* @param  ChnlNbrOut Number of desired output audio channels in the  resulting PCM buffer
* @retval BSP status
*/
__weak int32_t CCA02M2_AUDIO_IN_PDMToPCM_Init(uint32_t Instance, uint32_t AudioFreq, uint32_t ChnlNbrIn, uint32_t ChnlNbrOut)
{  
 8006880:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006884:	b087      	sub	sp, #28
 8006886:	4690      	mov	r8, r2
 8006888:	9303      	str	r3, [sp, #12]
  if(Instance != 0U)
 800688a:	4606      	mov	r6, r0
 800688c:	2800      	cmp	r0, #0
 800688e:	d17b      	bne.n	8006988 <CCA02M2_AUDIO_IN_PDMToPCM_Init+0x108>
    static int16_t aState_ARM[4][DECIMATOR_STATE_LENGTH];
    static int16_t aCoeffs[] = { -1406, 1634, -1943, 2386, -3080, 4325, -7223, 21690, 21690, -7223, 4325, -3080, 2386, -1943, 1634, -1406, };
#endif
    
    /* Enable CRC peripheral to unlock the PDM library */
    __HAL_RCC_CRC_CLK_ENABLE();
 8006890:	4b3f      	ldr	r3, [pc, #252]	; (8006990 <CCA02M2_AUDIO_IN_PDMToPCM_Init+0x110>)
 8006892:	9004      	str	r0, [sp, #16]
 8006894:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006896:	4d3f      	ldr	r5, [pc, #252]	; (8006994 <CCA02M2_AUDIO_IN_PDMToPCM_Init+0x114>)
 8006898:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800689c:	631a      	str	r2, [r3, #48]	; 0x30
 800689e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068a0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
      PDM_FilterHandler[index].high_pass_tap = 2122358088;
      PDM_FilterHandler[index].out_ptr_channels = (uint16_t)ChnlNbrOut;
      PDM_FilterHandler[index].in_ptr_channels  = (uint16_t)ChnlNbrIn;
      
      /* PDM lib config phase */
      PDM_FilterConfig[index].output_samples_number = (uint16_t) ((AudioFreq/1000U) * N_MS_PER_INTERRUPT);
 80068a4:	f44f 777a 	mov.w	r7, #1000	; 0x3e8
    __HAL_RCC_CRC_CLK_ENABLE();
 80068a8:	9304      	str	r3, [sp, #16]
      PDM_FilterConfig[index].output_samples_number = (uint16_t) ((AudioFreq/1000U) * N_MS_PER_INTERRUPT);
 80068aa:	fbb1 f1f7 	udiv	r1, r1, r7
 80068ae:	b28f      	uxth	r7, r1
    __HAL_RCC_CRC_CLK_ENABLE();
 80068b0:	9b04      	ldr	r3, [sp, #16]
      case 128:
        PDM_FilterConfig[index].decimation_factor = PDM_FILTER_DEC_FACTOR_128;
        break;
      case 160:
        PDM_FilterConfig[index].decimation_factor = PDM_FILTER_DEC_FACTOR_80;
        PDM_FilterConfig[index].output_samples_number *= 2U;        
 80068b2:	007b      	lsls	r3, r7, #1
 80068b4:	fa1f f983 	uxth.w	r9, r3
 80068b8:	f505 7498 	add.w	r4, r5, #304	; 0x130
        PDM_FilterHandler[index].out_ptr_channels = 1;
        (void)arm_fir_decimate_init_q15  (&ARM_Decimator_State[index], DECIMATOR_NUM_TAPS, DECIMATOR_FACTOR,
 80068bc:	f505 7aa4 	add.w	sl, r5, #328	; 0x148
 80068c0:	f505 7bbc 	add.w	fp, r5, #376	; 0x178
    for(index = 0; index < ChnlNbrIn; index++)
 80068c4:	45b0      	cmp	r8, r6
 80068c6:	f04f 0000 	mov.w	r0, #0
 80068ca:	d023      	beq.n	8006914 <CCA02M2_AUDIO_IN_PDMToPCM_Init+0x94>
      if (ChnlNbrIn == 1U)
 80068cc:	f108 32ff 	add.w	r2, r8, #4294967295
 80068d0:	4253      	negs	r3, r2
 80068d2:	4153      	adcs	r3, r2
 80068d4:	806b      	strh	r3, [r5, #2]
      PDM_FilterHandler[index].high_pass_tap = 2122358088;
 80068d6:	4b30      	ldr	r3, [pc, #192]	; (8006998 <CCA02M2_AUDIO_IN_PDMToPCM_Init+0x118>)
 80068d8:	606b      	str	r3, [r5, #4]
      PDM_FilterHandler[index].out_ptr_channels = (uint16_t)ChnlNbrOut;
 80068da:	9b03      	ldr	r3, [sp, #12]
 80068dc:	816b      	strh	r3, [r5, #10]
      PDM_FilterConfig[index].mic_gain = 24;
 80068de:	2318      	movs	r3, #24
 80068e0:	80a3      	strh	r3, [r4, #4]
      switch (AudioInCtx[0].DecimationFactor)
 80068e2:	4b2e      	ldr	r3, [pc, #184]	; (800699c <CCA02M2_AUDIO_IN_PDMToPCM_Init+0x11c>)
      volatile uint32_t error = 0;
 80068e4:	9005      	str	r0, [sp, #20]
      switch (AudioInCtx[0].DecimationFactor)
 80068e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
      PDM_FilterHandler[index].bit_order  = PDM_FILTER_BIT_ORDER_LSB;
 80068e8:	8028      	strh	r0, [r5, #0]
      switch (AudioInCtx[0].DecimationFactor)
 80068ea:	2b40      	cmp	r3, #64	; 0x40
      PDM_FilterHandler[index].in_ptr_channels  = (uint16_t)ChnlNbrIn;
 80068ec:	f8a5 8008 	strh.w	r8, [r5, #8]
      PDM_FilterConfig[index].output_samples_number = (uint16_t) ((AudioFreq/1000U) * N_MS_PER_INTERRUPT);
 80068f0:	8067      	strh	r7, [r4, #2]
      switch (AudioInCtx[0].DecimationFactor)
 80068f2:	d025      	beq.n	8006940 <CCA02M2_AUDIO_IN_PDMToPCM_Init+0xc0>
 80068f4:	d815      	bhi.n	8006922 <CCA02M2_AUDIO_IN_PDMToPCM_Init+0xa2>
 80068f6:	2b20      	cmp	r3, #32
 80068f8:	d020      	beq.n	800693c <CCA02M2_AUDIO_IN_PDMToPCM_Init+0xbc>
 80068fa:	d80e      	bhi.n	800691a <CCA02M2_AUDIO_IN_PDMToPCM_Init+0x9a>
 80068fc:	2b10      	cmp	r3, #16
 80068fe:	d018      	beq.n	8006932 <CCA02M2_AUDIO_IN_PDMToPCM_Init+0xb2>
 8006900:	2b18      	cmp	r3, #24
 8006902:	d019      	beq.n	8006938 <CCA02M2_AUDIO_IN_PDMToPCM_Init+0xb8>
      default:
        break;        
      }
#endif
      
      error = PDM_Filter_Init((PDM_Filter_Handler_t *)(&PDM_FilterHandler[index]));
 8006904:	4628      	mov	r0, r5
 8006906:	f011 f873 	bl	80179f0 <PDM_Filter_Init>
 800690a:	9005      	str	r0, [sp, #20]
      if (error!=0U)
 800690c:	9b05      	ldr	r3, [sp, #20]
 800690e:	b37b      	cbz	r3, 8006970 <CCA02M2_AUDIO_IN_PDMToPCM_Init+0xf0>
      {
        return  BSP_ERROR_NO_INIT;
 8006910:	f04f 30ff 	mov.w	r0, #4294967295
      }
    }    
#endif
  } 
  return BSP_ERROR_NONE;
}
 8006914:	b007      	add	sp, #28
 8006916:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (AudioInCtx[0].DecimationFactor)
 800691a:	2b30      	cmp	r3, #48	; 0x30
 800691c:	d1f2      	bne.n	8006904 <CCA02M2_AUDIO_IN_PDMToPCM_Init+0x84>
        PDM_FilterConfig[index].decimation_factor = PDM_FILTER_DEC_FACTOR_48;
 800691e:	2301      	movs	r3, #1
 8006920:	e008      	b.n	8006934 <CCA02M2_AUDIO_IN_PDMToPCM_Init+0xb4>
      switch (AudioInCtx[0].DecimationFactor)
 8006922:	2b80      	cmp	r3, #128	; 0x80
 8006924:	d00e      	beq.n	8006944 <CCA02M2_AUDIO_IN_PDMToPCM_Init+0xc4>
 8006926:	2ba0      	cmp	r3, #160	; 0xa0
 8006928:	d00e      	beq.n	8006948 <CCA02M2_AUDIO_IN_PDMToPCM_Init+0xc8>
 800692a:	2b50      	cmp	r3, #80	; 0x50
 800692c:	d1ea      	bne.n	8006904 <CCA02M2_AUDIO_IN_PDMToPCM_Init+0x84>
        PDM_FilterConfig[index].decimation_factor = PDM_FILTER_DEC_FACTOR_80;
 800692e:	2303      	movs	r3, #3
 8006930:	e000      	b.n	8006934 <CCA02M2_AUDIO_IN_PDMToPCM_Init+0xb4>
        PDM_FilterConfig[index].decimation_factor = PDM_FILTER_DEC_FACTOR_16;
 8006932:	2305      	movs	r3, #5
        PDM_FilterConfig[index].decimation_factor = PDM_FILTER_DEC_FACTOR_24;
 8006934:	8023      	strh	r3, [r4, #0]
        break;
 8006936:	e7e5      	b.n	8006904 <CCA02M2_AUDIO_IN_PDMToPCM_Init+0x84>
        PDM_FilterConfig[index].decimation_factor = PDM_FILTER_DEC_FACTOR_24;
 8006938:	2306      	movs	r3, #6
 800693a:	e7fb      	b.n	8006934 <CCA02M2_AUDIO_IN_PDMToPCM_Init+0xb4>
        PDM_FilterConfig[index].decimation_factor = PDM_FILTER_DEC_FACTOR_32;
 800693c:	2307      	movs	r3, #7
 800693e:	e7f9      	b.n	8006934 <CCA02M2_AUDIO_IN_PDMToPCM_Init+0xb4>
        PDM_FilterConfig[index].decimation_factor = PDM_FILTER_DEC_FACTOR_64;
 8006940:	2302      	movs	r3, #2
 8006942:	e7f7      	b.n	8006934 <CCA02M2_AUDIO_IN_PDMToPCM_Init+0xb4>
        PDM_FilterConfig[index].decimation_factor = PDM_FILTER_DEC_FACTOR_128;
 8006944:	2304      	movs	r3, #4
 8006946:	e7f5      	b.n	8006934 <CCA02M2_AUDIO_IN_PDMToPCM_Init+0xb4>
        PDM_FilterConfig[index].decimation_factor = PDM_FILTER_DEC_FACTOR_80;
 8006948:	2303      	movs	r3, #3
 800694a:	8023      	strh	r3, [r4, #0]
        PDM_FilterHandler[index].out_ptr_channels = 1;
 800694c:	2301      	movs	r3, #1
 800694e:	816b      	strh	r3, [r5, #10]
        (void)arm_fir_decimate_init_q15  (&ARM_Decimator_State[index], DECIMATOR_NUM_TAPS, DECIMATOR_FACTOR,
 8006950:	233e      	movs	r3, #62	; 0x3e
 8006952:	fb03 b306 	mla	r3, r3, r6, fp
 8006956:	2110      	movs	r1, #16
 8006958:	200c      	movs	r0, #12
        PDM_FilterConfig[index].output_samples_number *= 2U;        
 800695a:	f8a4 9002 	strh.w	r9, [r4, #2]
        (void)arm_fir_decimate_init_q15  (&ARM_Decimator_State[index], DECIMATOR_NUM_TAPS, DECIMATOR_FACTOR,
 800695e:	2202      	movs	r2, #2
 8006960:	9300      	str	r3, [sp, #0]
 8006962:	9101      	str	r1, [sp, #4]
 8006964:	4b0e      	ldr	r3, [pc, #56]	; (80069a0 <CCA02M2_AUDIO_IN_PDMToPCM_Init+0x120>)
 8006966:	fb00 a006 	mla	r0, r0, r6, sl
 800696a:	f012 f97f 	bl	8018c6c <arm_fir_decimate_init_q15>
         break;
 800696e:	e7c9      	b.n	8006904 <CCA02M2_AUDIO_IN_PDMToPCM_Init+0x84>
      error = PDM_Filter_setConfig((PDM_Filter_Handler_t *)&PDM_FilterHandler[index], &PDM_FilterConfig[index]);
 8006970:	4621      	mov	r1, r4
 8006972:	4628      	mov	r0, r5
 8006974:	f011 f8c6 	bl	8017b04 <PDM_Filter_setConfig>
 8006978:	9005      	str	r0, [sp, #20]
      if (error!=0U)
 800697a:	9b05      	ldr	r3, [sp, #20]
 800697c:	354c      	adds	r5, #76	; 0x4c
 800697e:	3406      	adds	r4, #6
 8006980:	2b00      	cmp	r3, #0
 8006982:	d1c5      	bne.n	8006910 <CCA02M2_AUDIO_IN_PDMToPCM_Init+0x90>
    for(index = 0; index < ChnlNbrIn; index++)
 8006984:	3601      	adds	r6, #1
 8006986:	e79d      	b.n	80068c4 <CCA02M2_AUDIO_IN_PDMToPCM_Init+0x44>
    return  BSP_ERROR_WRONG_PARAM;
 8006988:	f06f 0001 	mvn.w	r0, #1
 800698c:	e7c2      	b.n	8006914 <CCA02M2_AUDIO_IN_PDMToPCM_Init+0x94>
 800698e:	bf00      	nop
 8006990:	40023800 	.word	0x40023800
 8006994:	20000c68 	.word	0x20000c68
 8006998:	7e809d48 	.word	0x7e809d48
 800699c:	20000a7c 	.word	0x20000a7c
 80069a0:	200000a4 	.word	0x200000a4

080069a4 <CCA02M2_AUDIO_IN_Init>:
{  
 80069a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if(Instance >= AUDIO_IN_INSTANCES_NBR)
 80069a8:	2802      	cmp	r0, #2
{  
 80069aa:	b09e      	sub	sp, #120	; 0x78
 80069ac:	4607      	mov	r7, r0
  if(Instance >= AUDIO_IN_INSTANCES_NBR)
 80069ae:	d902      	bls.n	80069b6 <CCA02M2_AUDIO_IN_Init+0x12>
      switch (AudioInit->SampleRate)
 80069b0:	f06f 0001 	mvn.w	r0, #1
 80069b4:	e0c1      	b.n	8006b3a <CCA02M2_AUDIO_IN_Init+0x196>
    AudioInCtx[Instance].Device          = AudioInit->Device;
 80069b6:	4c64      	ldr	r4, [pc, #400]	; (8006b48 <CCA02M2_AUDIO_IN_Init+0x1a4>)
 80069b8:	680b      	ldr	r3, [r1, #0]
 80069ba:	2264      	movs	r2, #100	; 0x64
 80069bc:	fb02 4200 	mla	r2, r2, r0, r4
    AudioInCtx[Instance].BitsPerSample   = AudioInit->BitsPerSample;
 80069c0:	6888      	ldr	r0, [r1, #8]
    AudioInCtx[Instance].Device          = AudioInit->Device;
 80069c2:	6053      	str	r3, [r2, #4]
    AudioInCtx[Instance].ChannelsNbr     = AudioInit->ChannelsNbr;  
 80069c4:	68cb      	ldr	r3, [r1, #12]
 80069c6:	6113      	str	r3, [r2, #16]
    AudioInCtx[Instance].SampleRate      = AudioInit->SampleRate; 
 80069c8:	684b      	ldr	r3, [r1, #4]
    AudioInCtx[Instance].Volume          = AudioInit->Volume;
 80069ca:	6909      	ldr	r1, [r1, #16]
 80069cc:	6211      	str	r1, [r2, #32]
    AudioInCtx[Instance].State           = AUDIO_IN_STATE_RESET;
 80069ce:	2100      	movs	r1, #0
    AudioInCtx[Instance].SampleRate      = AudioInit->SampleRate; 
 80069d0:	6093      	str	r3, [r2, #8]
    AudioInCtx[Instance].BitsPerSample   = AudioInit->BitsPerSample;
 80069d2:	60d0      	str	r0, [r2, #12]
    AudioInCtx[Instance].State           = AUDIO_IN_STATE_RESET;
 80069d4:	6251      	str	r1, [r2, #36]	; 0x24
    if(Instance == 0U)
 80069d6:	2f00      	cmp	r7, #0
 80069d8:	f040 819e 	bne.w	8006d18 <CCA02M2_AUDIO_IN_Init+0x374>
      switch (AudioInit->SampleRate)
 80069dc:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 80069e0:	f000 80ae 	beq.w	8006b40 <CCA02M2_AUDIO_IN_Init+0x19c>
 80069e4:	d808      	bhi.n	80069f8 <CCA02M2_AUDIO_IN_Init+0x54>
 80069e6:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 80069ea:	d002      	beq.n	80069f2 <CCA02M2_AUDIO_IN_Init+0x4e>
 80069ec:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 80069f0:	d1de      	bne.n	80069b0 <CCA02M2_AUDIO_IN_Init+0xc>
 80069f2:	f44f 69a0 	mov.w	r9, #1280	; 0x500
 80069f6:	e005      	b.n	8006a04 <CCA02M2_AUDIO_IN_Init+0x60>
 80069f8:	f64b 3280 	movw	r2, #48000	; 0xbb80
 80069fc:	4293      	cmp	r3, r2
 80069fe:	d1d7      	bne.n	80069b0 <CCA02M2_AUDIO_IN_Init+0xc>
        PDM_Clock_Freq = 3072;
 8006a00:	f44f 6940 	mov.w	r9, #3072	; 0xc00
      AudioInCtx[Instance].DecimationFactor = (PDM_Clock_Freq * 1000U)/AudioInit->SampleRate;
 8006a04:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006a08:	fb02 f209 	mul.w	r2, r2, r9
 8006a0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a10:	6623      	str	r3, [r4, #96]	; 0x60
      AudioInCtx[Instance].Size = (PDM_Clock_Freq/8U) * 2U * N_MS_PER_INTERRUPT;
 8006a12:	ea4f 03d9 	mov.w	r3, r9, lsr #3
 8006a16:	005b      	lsls	r3, r3, #1
 8006a18:	61e3      	str	r3, [r4, #28]
      if(AudioInCtx[0].ChannelsNbr == 1U)
 8006a1a:	6923      	ldr	r3, [r4, #16]
        i2s_config.DataFormat = I2S_DATAFORMAT_16B;
 8006a1c:	2b01      	cmp	r3, #1
 8006a1e:	bf14      	ite	ne
 8006a20:	2305      	movne	r3, #5
 8006a22:	2300      	moveq	r3, #0
 8006a24:	930d      	str	r3, [sp, #52]	; 0x34
      i2s_config.CPOL = I2S_CPOL_HIGH;
 8006a26:	f04f 0308 	mov.w	r3, #8
      i2s_config.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8006a2a:	f04f 0500 	mov.w	r5, #0
      i2s_config.AudioFreq = ((PDM_Clock_Freq * 1000U) / 32U);
 8006a2e:	ea4f 1252 	mov.w	r2, r2, lsr #5
      i2s_config.CPOL = I2S_CPOL_HIGH;
 8006a32:	9310      	str	r3, [sp, #64]	; 0x40
      i2s_config.Standard = I2S_STANDARD_MSB;
 8006a34:	f04f 0110 	mov.w	r1, #16
 8006a38:	f44f 7340 	mov.w	r3, #768	; 0x300
 8006a3c:	e9cd 310b 	strd	r3, r1, [sp, #44]	; 0x2c
      i2s_config.ClockSource = I2S_CLOCK_PLL;
 8006a40:	e9cd 5511 	strd	r5, r5, [sp, #68]	; 0x44
      i2s_config.AudioFreq = ((PDM_Clock_Freq * 1000U) / 32U);
 8006a44:	920f      	str	r2, [sp, #60]	; 0x3c
      i2s_config.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8006a46:	950e      	str	r5, [sp, #56]	; 0x38
      if (AudioInCtx[0].ChannelsNbr>1U)
 8006a48:	f240 8092 	bls.w	8006b70 <CCA02M2_AUDIO_IN_Init+0x1cc>
  static TIM_IC_InitTypeDef       sICConfig;
  static TIM_OC_InitTypeDef       sOCConfig; 
  GPIO_InitTypeDef   GPIO_InitStruct;
  
  /* Enable AUDIO_TIMER clock*/
  AUDIO_IN_TIMER_CLK_ENABLE();
 8006a4c:	4b3f      	ldr	r3, [pc, #252]	; (8006b4c <CCA02M2_AUDIO_IN_Init+0x1a8>)
 8006a4e:	9500      	str	r5, [sp, #0]
 8006a50:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
  
  GPIO_InitStruct.Alternate = AUDIO_IN_TIMER_CHIN_AF;
  GPIO_InitStruct.Pin = AUDIO_IN_TIMER_CHIN_PIN;
  HAL_GPIO_Init(AUDIO_IN_TIMER_CHIN_GPIO_PORT, &GPIO_InitStruct);
 8006a52:	483f      	ldr	r0, [pc, #252]	; (8006b50 <CCA02M2_AUDIO_IN_Init+0x1ac>)
  AUDIO_IN_TIMER_CLK_ENABLE();
 8006a54:	f042 0202 	orr.w	r2, r2, #2
 8006a58:	641a      	str	r2, [r3, #64]	; 0x40
 8006a5a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006a5c:	f002 0202 	and.w	r2, r2, #2
 8006a60:	9200      	str	r2, [sp, #0]
 8006a62:	9a00      	ldr	r2, [sp, #0]
  AUDIO_IN_TIMER_CHOUT_GPIO_PORT_CLK_ENABLE();
 8006a64:	9501      	str	r5, [sp, #4]
 8006a66:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006a68:	f042 0202 	orr.w	r2, r2, #2
 8006a6c:	631a      	str	r2, [r3, #48]	; 0x30
 8006a6e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006a70:	f002 0202 	and.w	r2, r2, #2
 8006a74:	9201      	str	r2, [sp, #4]
 8006a76:	9a01      	ldr	r2, [sp, #4]
  AUDIO_IN_TIMER_CHIN_GPIO_PORT_CLK_ENABLE();
 8006a78:	9502      	str	r5, [sp, #8]
 8006a7a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006a7c:	f042 0202 	orr.w	r2, r2, #2
 8006a80:	631a      	str	r2, [r3, #48]	; 0x30
 8006a82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  GPIO_InitStruct.Pin = AUDIO_IN_TIMER_CHIN_PIN;
 8006a84:	9113      	str	r1, [sp, #76]	; 0x4c
  AUDIO_IN_TIMER_CHIN_GPIO_PORT_CLK_ENABLE();
 8006a86:	f003 0302 	and.w	r3, r3, #2
 8006a8a:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006a8c:	f04f 0801 	mov.w	r8, #1
 8006a90:	2602      	movs	r6, #2
  AUDIO_IN_TIMER_CHIN_GPIO_PORT_CLK_ENABLE();
 8006a92:	9b02      	ldr	r3, [sp, #8]
  HAL_GPIO_Init(AUDIO_IN_TIMER_CHIN_GPIO_PORT, &GPIO_InitStruct);
 8006a94:	a913      	add	r1, sp, #76	; 0x4c
  GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8006a96:	2303      	movs	r3, #3
  GPIO_InitStruct.Alternate = AUDIO_IN_TIMER_CHIN_AF;
 8006a98:	e9cd 3616 	strd	r3, r6, [sp, #88]	; 0x58
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006a9c:	e9cd 6814 	strd	r6, r8, [sp, #80]	; 0x50
  HAL_GPIO_Init(AUDIO_IN_TIMER_CHIN_GPIO_PORT, &GPIO_InitStruct);
 8006aa0:	f001 fa22 	bl	8007ee8 <HAL_GPIO_Init>
  
  GPIO_InitStruct.Alternate = AUDIO_IN_TIMER_CHOUT_AF;
  GPIO_InitStruct.Pin = AUDIO_IN_TIMER_CHOUT_PIN;
 8006aa4:	2320      	movs	r3, #32
  HAL_GPIO_Init(AUDIO_IN_TIMER_CHOUT_GPIO_PORT, &GPIO_InitStruct);
 8006aa6:	482a      	ldr	r0, [pc, #168]	; (8006b50 <CCA02M2_AUDIO_IN_Init+0x1ac>)
  GPIO_InitStruct.Alternate = AUDIO_IN_TIMER_CHOUT_AF;
 8006aa8:	9617      	str	r6, [sp, #92]	; 0x5c
  HAL_GPIO_Init(AUDIO_IN_TIMER_CHOUT_GPIO_PORT, &GPIO_InitStruct);
 8006aaa:	a913      	add	r1, sp, #76	; 0x4c
  GPIO_InitStruct.Pin = AUDIO_IN_TIMER_CHOUT_PIN;
 8006aac:	9313      	str	r3, [sp, #76]	; 0x4c
  HAL_GPIO_Init(AUDIO_IN_TIMER_CHOUT_GPIO_PORT, &GPIO_InitStruct);
 8006aae:	f001 fa1b 	bl	8007ee8 <HAL_GPIO_Init>
  /* Configure the Input: channel_1 */
  sICConfig.ICPolarity  = TIM_ICPOLARITY_RISING;
  sICConfig.ICSelection = TIM_ICSELECTION_DIRECTTI;
  sICConfig.ICPrescaler = TIM_ICPSC_DIV1;
  sICConfig.ICFilter = 0;
  if(HAL_TIM_IC_ConfigChannel(&TimDividerHandle, &sICConfig, TIM_CHANNEL_1) != HAL_OK)
 8006ab2:	4928      	ldr	r1, [pc, #160]	; (8006b54 <CCA02M2_AUDIO_IN_Init+0x1b0>)
  TimDividerHandle.Instance = AUDIO_IN_TIMER;
 8006ab4:	4b28      	ldr	r3, [pc, #160]	; (8006b58 <CCA02M2_AUDIO_IN_Init+0x1b4>)
 8006ab6:	f8c4 345c 	str.w	r3, [r4, #1116]	; 0x45c
  if(HAL_TIM_IC_ConfigChannel(&TimDividerHandle, &sICConfig, TIM_CHANNEL_1) != HAL_OK)
 8006aba:	462a      	mov	r2, r5
 8006abc:	f1a1 0048 	sub.w	r0, r1, #72	; 0x48
  sICConfig.ICPolarity  = TIM_ICPOLARITY_RISING;
 8006ac0:	f8c4 54a4 	str.w	r5, [r4, #1188]	; 0x4a4
  sICConfig.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8006ac4:	f8c4 84a8 	str.w	r8, [r4, #1192]	; 0x4a8
  sICConfig.ICPrescaler = TIM_ICPSC_DIV1;
 8006ac8:	f8c4 54ac 	str.w	r5, [r4, #1196]	; 0x4ac
  sICConfig.ICFilter = 0;
 8006acc:	f8c4 54b0 	str.w	r5, [r4, #1200]	; 0x4b0
  if(HAL_TIM_IC_ConfigChannel(&TimDividerHandle, &sICConfig, TIM_CHANNEL_1) != HAL_OK)
 8006ad0:	f003 ff9a 	bl	800aa08 <HAL_TIM_IC_ConfigChannel>
  
  /* Configure TIM1 in Gated Slave mode for the external trigger (Filtered Timer
  Input 1) */
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
  sSlaveConfig.SlaveMode    = TIM_SLAVEMODE_EXTERNAL1;
  if( HAL_TIM_SlaveConfigSynchronization(&TimDividerHandle, &sSlaveConfig) != HAL_OK)
 8006ad4:	4921      	ldr	r1, [pc, #132]	; (8006b5c <CCA02M2_AUDIO_IN_Init+0x1b8>)
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8006ad6:	2350      	movs	r3, #80	; 0x50
  if(HAL_TIM_IC_ConfigChannel(&TimDividerHandle, &sICConfig, TIM_CHANNEL_1) != HAL_OK)
 8006ad8:	4606      	mov	r6, r0
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8006ada:	f8c4 34b8 	str.w	r3, [r4, #1208]	; 0x4b8
  if( HAL_TIM_SlaveConfigSynchronization(&TimDividerHandle, &sSlaveConfig) != HAL_OK)
 8006ade:	f1a1 0058 	sub.w	r0, r1, #88	; 0x58
  sSlaveConfig.SlaveMode    = TIM_SLAVEMODE_EXTERNAL1;
 8006ae2:	2307      	movs	r3, #7
 8006ae4:	f8c4 34b4 	str.w	r3, [r4, #1204]	; 0x4b4
  if( HAL_TIM_SlaveConfigSynchronization(&TimDividerHandle, &sSlaveConfig) != HAL_OK)
 8006ae8:	f004 f86f 	bl	800abca <HAL_TIM_SlaveConfigSynchro>
 8006aec:	4306      	orrs	r6, r0
 8006aee:	b2f6      	uxtb	r6, r6
  {
    ret =  HAL_ERROR;
 8006af0:	1b76      	subs	r6, r6, r5
  TimDividerHandle.Init.Period            = 1;
  TimDividerHandle.Init.Prescaler         = 0;
  TimDividerHandle.Init.ClockDivision     = 0;
  TimDividerHandle.Init.CounterMode       = TIM_COUNTERMODE_UP;
  TimDividerHandle.Init.RepetitionCounter = 0;
  if(HAL_TIM_PWM_Init(&TimDividerHandle) != HAL_OK)
 8006af2:	481b      	ldr	r0, [pc, #108]	; (8006b60 <CCA02M2_AUDIO_IN_Init+0x1bc>)
  TimDividerHandle.Init.Period            = 1;
 8006af4:	f8c4 8468 	str.w	r8, [r4, #1128]	; 0x468
    ret =  HAL_ERROR;
 8006af8:	bf18      	it	ne
 8006afa:	2601      	movne	r6, #1
  TimDividerHandle.Init.Prescaler         = 0;
 8006afc:	f8c4 5460 	str.w	r5, [r4, #1120]	; 0x460
  TimDividerHandle.Init.ClockDivision     = 0;
 8006b00:	f8c4 546c 	str.w	r5, [r4, #1132]	; 0x46c
  TimDividerHandle.Init.CounterMode       = TIM_COUNTERMODE_UP;
 8006b04:	f8c4 5464 	str.w	r5, [r4, #1124]	; 0x464
  TimDividerHandle.Init.RepetitionCounter = 0;
 8006b08:	f8c4 5470 	str.w	r5, [r4, #1136]	; 0x470
  if(HAL_TIM_PWM_Init(&TimDividerHandle) != HAL_OK)
 8006b0c:	f003 fe5e 	bl	800a7cc <HAL_TIM_PWM_Init>
  
  /* Configure the PWM_channel_1  */
  sOCConfig.OCMode     = TIM_OCMODE_PWM1;
  sOCConfig.OCPolarity = TIM_OCPOLARITY_HIGH;
  sOCConfig.Pulse = 1;
  if(HAL_TIM_PWM_ConfigChannel(&TimDividerHandle, &sOCConfig, TIM_CHANNEL_2) != HAL_OK)
 8006b10:	4914      	ldr	r1, [pc, #80]	; (8006b64 <CCA02M2_AUDIO_IN_Init+0x1c0>)
  sOCConfig.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006b12:	f8c4 54d0 	str.w	r5, [r4, #1232]	; 0x4d0
    ret =  HAL_ERROR;
 8006b16:	42a8      	cmp	r0, r5
  sOCConfig.OCMode     = TIM_OCMODE_PWM1;
 8006b18:	f04f 0360 	mov.w	r3, #96	; 0x60
  if(HAL_TIM_PWM_ConfigChannel(&TimDividerHandle, &sOCConfig, TIM_CHANNEL_2) != HAL_OK)
 8006b1c:	f04f 0204 	mov.w	r2, #4
 8006b20:	f1a1 006c 	sub.w	r0, r1, #108	; 0x6c
    ret =  HAL_ERROR;
 8006b24:	bf18      	it	ne
 8006b26:	4646      	movne	r6, r8
  sOCConfig.OCMode     = TIM_OCMODE_PWM1;
 8006b28:	f8c4 34c8 	str.w	r3, [r4, #1224]	; 0x4c8
  sOCConfig.Pulse = 1;
 8006b2c:	f8c4 84cc 	str.w	r8, [r4, #1228]	; 0x4cc
  if(HAL_TIM_PWM_ConfigChannel(&TimDividerHandle, &sOCConfig, TIM_CHANNEL_2) != HAL_OK)
 8006b30:	f003 fed5 	bl	800a8de <HAL_TIM_PWM_ConfigChannel>
 8006b34:	b1c0      	cbz	r0, 8006b68 <CCA02M2_AUDIO_IN_Init+0x1c4>
          return  BSP_ERROR_PERIPH_FAILURE;
 8006b36:	f06f 0003 	mvn.w	r0, #3
}
 8006b3a:	b01e      	add	sp, #120	; 0x78
 8006b3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        PDM_Clock_Freq = 2048;
 8006b40:	f44f 6900 	mov.w	r9, #2048	; 0x800
 8006b44:	e75e      	b.n	8006a04 <CCA02M2_AUDIO_IN_Init+0x60>
 8006b46:	bf00      	nop
 8006b48:	20000a7c 	.word	0x20000a7c
 8006b4c:	40023800 	.word	0x40023800
 8006b50:	40020400 	.word	0x40020400
 8006b54:	20000f20 	.word	0x20000f20
 8006b58:	40000400 	.word	0x40000400
 8006b5c:	20000f30 	.word	0x20000f30
 8006b60:	20000ed8 	.word	0x20000ed8
 8006b64:	20000f44 	.word	0x20000f44
        if (AUDIO_IN_Timer_Init() != HAL_OK)
 8006b68:	2e00      	cmp	r6, #0
 8006b6a:	d1e4      	bne.n	8006b36 <CCA02M2_AUDIO_IN_Init+0x192>
        PDM_Clock_Freq *=2U;
 8006b6c:	ea4f 0949 	mov.w	r9, r9, lsl #1
      if(MX_I2S_IN_ClockConfig(&hAudioInI2s, PDM_Clock_Freq) != HAL_OK)
 8006b70:	4e6e      	ldr	r6, [pc, #440]	; (8006d2c <CCA02M2_AUDIO_IN_Init+0x388>)
 8006b72:	4649      	mov	r1, r9
 8006b74:	4630      	mov	r0, r6
 8006b76:	f7ff fdad 	bl	80066d4 <MX_I2S_IN_ClockConfig>
 8006b7a:	2800      	cmp	r0, #0
 8006b7c:	f040 80c9 	bne.w	8006d12 <CCA02M2_AUDIO_IN_Init+0x36e>
      hAudioInI2s.Instance          = AUDIO_IN_I2S_INSTANCE;
 8006b80:	4b6b      	ldr	r3, [pc, #428]	; (8006d30 <CCA02M2_AUDIO_IN_Init+0x38c>)
  AUDIO_IN_I2S_CLK_ENABLE();  
 8006b82:	4d6c      	ldr	r5, [pc, #432]	; (8006d34 <CCA02M2_AUDIO_IN_Init+0x390>)
      __HAL_I2S_DISABLE(&hAudioInI2s);
 8006b84:	69da      	ldr	r2, [r3, #28]
      hAudioInI2s.Instance          = AUDIO_IN_I2S_INSTANCE;
 8006b86:	6033      	str	r3, [r6, #0]
      __HAL_I2S_DISABLE(&hAudioInI2s);
 8006b88:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006b8c:	61da      	str	r2, [r3, #28]
  AUDIO_IN_I2S_CLK_ENABLE();  
 8006b8e:	9003      	str	r0, [sp, #12]
 8006b90:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8006b92:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006b96:	642b      	str	r3, [r5, #64]	; 0x40
 8006b98:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8006b9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006b9e:	9303      	str	r3, [sp, #12]
 8006ba0:	9b03      	ldr	r3, [sp, #12]
  AUDIO_IN_I2S_SCK_GPIO_CLK_ENABLE();
 8006ba2:	9004      	str	r0, [sp, #16]
 8006ba4:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8006ba6:	f043 0302 	orr.w	r3, r3, #2
 8006baa:	632b      	str	r3, [r5, #48]	; 0x30
 8006bac:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8006bae:	f003 0302 	and.w	r3, r3, #2
 8006bb2:	9304      	str	r3, [sp, #16]
 8006bb4:	9b04      	ldr	r3, [sp, #16]
  AUDIO_IN_I2S_MOSI_GPIO_CLK_ENABLE();
 8006bb6:	9005      	str	r0, [sp, #20]
 8006bb8:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8006bba:	f043 0302 	orr.w	r3, r3, #2
 8006bbe:	632b      	str	r3, [r5, #48]	; 0x30
 8006bc0:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8006bc2:	f003 0302 	and.w	r3, r3, #2
 8006bc6:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(AUDIO_IN_I2S_SCK_GPIO_PORT, &GPIO_InitStruct);
 8006bc8:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
  AUDIO_IN_I2S_MOSI_GPIO_CLK_ENABLE();
 8006bcc:	9b05      	ldr	r3, [sp, #20]
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
 8006bce:	f04f 0802 	mov.w	r8, #2
  GPIO_InitStruct.Pin       = AUDIO_IN_I2S_SCK_PIN;
 8006bd2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  GPIO_InitStruct.Alternate = AUDIO_IN_I2S_SCK_AF;
 8006bd6:	f04f 0905 	mov.w	r9, #5
  HAL_GPIO_Init(AUDIO_IN_I2S_SCK_GPIO_PORT, &GPIO_InitStruct);
 8006bda:	a913      	add	r1, sp, #76	; 0x4c
 8006bdc:	f500 3001 	add.w	r0, r0, #132096	; 0x20400
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
 8006be0:	f04f 0a01 	mov.w	sl, #1
  GPIO_InitStruct.Pin       = AUDIO_IN_I2S_SCK_PIN;
 8006be4:	9313      	str	r3, [sp, #76]	; 0x4c
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
 8006be6:	e9cd 8a14 	strd	r8, sl, [sp, #80]	; 0x50
  GPIO_InitStruct.Speed     = GPIO_SPEED_FAST;
 8006bea:	f8cd 8058 	str.w	r8, [sp, #88]	; 0x58
  GPIO_InitStruct.Alternate = AUDIO_IN_I2S_SCK_AF;
 8006bee:	f8cd 905c 	str.w	r9, [sp, #92]	; 0x5c
  HAL_GPIO_Init(AUDIO_IN_I2S_SCK_GPIO_PORT, &GPIO_InitStruct);
 8006bf2:	f001 f979 	bl	8007ee8 <HAL_GPIO_Init>
  HAL_GPIO_Init(AUDIO_IN_I2S_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8006bf6:	4850      	ldr	r0, [pc, #320]	; (8006d38 <CCA02M2_AUDIO_IN_Init+0x394>)
  GPIO_InitStruct.Alternate = AUDIO_IN_I2S_MOSI_AF;
 8006bf8:	f8cd 905c 	str.w	r9, [sp, #92]	; 0x5c
  GPIO_InitStruct.Pin       = AUDIO_IN_I2S_MOSI_PIN ;
 8006bfc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  HAL_GPIO_Init(AUDIO_IN_I2S_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8006c00:	a913      	add	r1, sp, #76	; 0x4c
  GPIO_InitStruct.Pin       = AUDIO_IN_I2S_MOSI_PIN ;
 8006c02:	9313      	str	r3, [sp, #76]	; 0x4c
  HAL_GPIO_Init(AUDIO_IN_I2S_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8006c04:	f001 f970 	bl	8007ee8 <HAL_GPIO_Init>
      if (MX_I2S_IN_Init(&hAudioInI2s, &i2s_config)!= HAL_OK)
 8006c08:	a90b      	add	r1, sp, #44	; 0x2c
 8006c0a:	4630      	mov	r0, r6
 8006c0c:	f7ff fdd4 	bl	80067b8 <MX_I2S_IN_Init>
 8006c10:	2800      	cmp	r0, #0
 8006c12:	d190      	bne.n	8006b36 <CCA02M2_AUDIO_IN_Init+0x192>
      if (HAL_I2S_Init(&hAudioInI2s) != HAL_OK)
 8006c14:	4630      	mov	r0, r6
 8006c16:	f001 ff63 	bl	8008ae0 <HAL_I2S_Init>
 8006c1a:	4606      	mov	r6, r0
 8006c1c:	2800      	cmp	r0, #0
 8006c1e:	d18a      	bne.n	8006b36 <CCA02M2_AUDIO_IN_Init+0x192>
      if (AudioInCtx[0].ChannelsNbr>2U)
 8006c20:	6923      	ldr	r3, [r4, #16]
 8006c22:	4543      	cmp	r3, r8
 8006c24:	d96b      	bls.n	8006cfe <CCA02M2_AUDIO_IN_Init+0x35a>
        hAudioInSPI.Instance = AUDIO_IN_SPI_INSTANCE;
 8006c26:	4b45      	ldr	r3, [pc, #276]	; (8006d3c <CCA02M2_AUDIO_IN_Init+0x398>)
 8006c28:	f8c4 34e4 	str.w	r3, [r4, #1252]	; 0x4e4
        __HAL_SPI_DISABLE(&hAudioInSPI);
 8006c2c:	681a      	ldr	r2, [r3, #0]
 8006c2e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006c32:	601a      	str	r2, [r3, #0]
  AUDIO_IN_SPI_SCK_GPIO_CLK_ENABLE();
 8006c34:	9006      	str	r0, [sp, #24]
 8006c36:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8006c38:	ea43 030a 	orr.w	r3, r3, sl
 8006c3c:	632b      	str	r3, [r5, #48]	; 0x30
 8006c3e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8006c40:	ea03 030a 	and.w	r3, r3, sl
 8006c44:	9306      	str	r3, [sp, #24]
 8006c46:	9b06      	ldr	r3, [sp, #24]
  AUDIO_IN_SPI_MISO_GPIO_CLK_ENABLE();
 8006c48:	9007      	str	r0, [sp, #28]
 8006c4a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8006c4c:	ea43 030a 	orr.w	r3, r3, sl
 8006c50:	632b      	str	r3, [r5, #48]	; 0x30
 8006c52:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8006c54:	ea03 030a 	and.w	r3, r3, sl
 8006c58:	9307      	str	r3, [sp, #28]
 8006c5a:	9b07      	ldr	r3, [sp, #28]
  AUDIO_IN_SPI_MOSI_GPIO_CLK_ENABLE();
 8006c5c:	9008      	str	r0, [sp, #32]
 8006c5e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8006c60:	ea43 030a 	orr.w	r3, r3, sl
 8006c64:	632b      	str	r3, [r5, #48]	; 0x30
 8006c66:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8006c68:	ea03 030a 	and.w	r3, r3, sl
 8006c6c:	9308      	str	r3, [sp, #32]
 8006c6e:	9b08      	ldr	r3, [sp, #32]
  AUDIO_IN_SPI_CLK_ENABLE();
 8006c70:	9009      	str	r0, [sp, #36]	; 0x24
 8006c72:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8006c74:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006c78:	646b      	str	r3, [r5, #68]	; 0x44
 8006c7a:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8006c7c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006c80:	9309      	str	r3, [sp, #36]	; 0x24
 8006c82:	9b09      	ldr	r3, [sp, #36]	; 0x24
  AUDIO_IN_SPI_DMAx_CLK_ENABLE();
 8006c84:	900a      	str	r0, [sp, #40]	; 0x28
 8006c86:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  HAL_GPIO_Init(AUDIO_IN_SPI_SCK_GPIO_PORT, &GPIO_InitStruct);
 8006c88:	482d      	ldr	r0, [pc, #180]	; (8006d40 <CCA02M2_AUDIO_IN_Init+0x39c>)
  AUDIO_IN_SPI_DMAx_CLK_ENABLE();
 8006c8a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006c8e:	632b      	str	r3, [r5, #48]	; 0x30
 8006c90:	6b2b      	ldr	r3, [r5, #48]	; 0x30
        if (MX_SPI_Init(&hAudioInSPI, &spi_config)!= HAL_OK)
 8006c92:	4d2c      	ldr	r5, [pc, #176]	; (8006d44 <CCA02M2_AUDIO_IN_Init+0x3a0>)
  AUDIO_IN_SPI_DMAx_CLK_ENABLE();
 8006c94:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006c98:	930a      	str	r3, [sp, #40]	; 0x28
 8006c9a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  GPIO_InitStruct.Alternate = AUDIO_IN_SPI_SCK_AF;  
 8006c9c:	f8cd 905c 	str.w	r9, [sp, #92]	; 0x5c
  GPIO_InitStruct.Pin       = AUDIO_IN_SPI_SCK_PIN;
 8006ca0:	2320      	movs	r3, #32
  HAL_GPIO_Init(AUDIO_IN_SPI_SCK_GPIO_PORT, &GPIO_InitStruct);
 8006ca2:	a913      	add	r1, sp, #76	; 0x4c
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8006ca4:	e9cd 3813 	strd	r3, r8, [sp, #76]	; 0x4c
  GPIO_InitStruct.Speed     = GPIO_SPEED_FAST;
 8006ca8:	e9cd a815 	strd	sl, r8, [sp, #84]	; 0x54
  HAL_GPIO_Init(AUDIO_IN_SPI_SCK_GPIO_PORT, &GPIO_InitStruct);
 8006cac:	f001 f91c 	bl	8007ee8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = AUDIO_IN_SPI_MOSI_PIN;
 8006cb0:	2380      	movs	r3, #128	; 0x80
  HAL_GPIO_Init(AUDIO_IN_SPI_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8006cb2:	4823      	ldr	r0, [pc, #140]	; (8006d40 <CCA02M2_AUDIO_IN_Init+0x39c>)
  GPIO_InitStruct.Pin = AUDIO_IN_SPI_MOSI_PIN;
 8006cb4:	9313      	str	r3, [sp, #76]	; 0x4c
  HAL_GPIO_Init(AUDIO_IN_SPI_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8006cb6:	a913      	add	r1, sp, #76	; 0x4c
  GPIO_InitStruct.Alternate = AUDIO_IN_SPI_MOSI_AF;
 8006cb8:	f8cd 905c 	str.w	r9, [sp, #92]	; 0x5c
  HAL_GPIO_Init(AUDIO_IN_SPI_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8006cbc:	f001 f914 	bl	8007ee8 <HAL_GPIO_Init>
        spi_config.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8006cc0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006cc4:	9314      	str	r3, [sp, #80]	; 0x50
        spi_config.CRCPolynomial = 7;
 8006cc6:	2307      	movs	r3, #7
 8006cc8:	931d      	str	r3, [sp, #116]	; 0x74
        spi_config.DataSize = SPI_DATASIZE_16BIT;
 8006cca:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006cce:	9315      	str	r3, [sp, #84]	; 0x54
        if (MX_SPI_Init(&hAudioInSPI, &spi_config)!= HAL_OK)
 8006cd0:	a913      	add	r1, sp, #76	; 0x4c
        spi_config.NSS = SPI_NSS_SOFT;
 8006cd2:	f44f 7300 	mov.w	r3, #512	; 0x200
        if (MX_SPI_Init(&hAudioInSPI, &spi_config)!= HAL_OK)
 8006cd6:	4628      	mov	r0, r5
        spi_config.CLKPolarity = SPI_POLARITY_HIGH;
 8006cd8:	e9cd 8a16 	strd	r8, sl, [sp, #88]	; 0x58
        spi_config.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006cdc:	9619      	str	r6, [sp, #100]	; 0x64
        spi_config.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 8006cde:	961c      	str	r6, [sp, #112]	; 0x70
        spi_config.FirstBit = SPI_FIRSTBIT_MSB;
 8006ce0:	961a      	str	r6, [sp, #104]	; 0x68
        spi_config.NSS = SPI_NSS_SOFT;
 8006ce2:	9318      	str	r3, [sp, #96]	; 0x60
        spi_config.TIMode = SPI_TIMODE_DISABLED;
 8006ce4:	961b      	str	r6, [sp, #108]	; 0x6c
        spi_config.Mode = SPI_MODE_SLAVE;
 8006ce6:	9613      	str	r6, [sp, #76]	; 0x4c
        if (MX_SPI_Init(&hAudioInSPI, &spi_config)!= HAL_OK)
 8006ce8:	f7ff fd1c 	bl	8006724 <MX_SPI_Init>
 8006cec:	2800      	cmp	r0, #0
 8006cee:	f47f af22 	bne.w	8006b36 <CCA02M2_AUDIO_IN_Init+0x192>
        if (HAL_SPI_Init(&hAudioInSPI) != HAL_OK)
 8006cf2:	4628      	mov	r0, r5
 8006cf4:	f002 ffe7 	bl	8009cc6 <HAL_SPI_Init>
 8006cf8:	2800      	cmp	r0, #0
 8006cfa:	f47f af1c 	bne.w	8006b36 <CCA02M2_AUDIO_IN_Init+0x192>
      if (CCA02M2_AUDIO_IN_PDMToPCM_Init(Instance, AudioInCtx[0].SampleRate, AudioInCtx[0].ChannelsNbr, AudioInCtx[0].ChannelsNbr)!= BSP_ERROR_NONE)
 8006cfe:	6923      	ldr	r3, [r4, #16]
 8006d00:	68a1      	ldr	r1, [r4, #8]
 8006d02:	461a      	mov	r2, r3
 8006d04:	2000      	movs	r0, #0
 8006d06:	f7ff fdbb 	bl	8006880 <CCA02M2_AUDIO_IN_PDMToPCM_Init>
 8006d0a:	b140      	cbz	r0, 8006d1e <CCA02M2_AUDIO_IN_Init+0x37a>
        return  BSP_ERROR_NO_INIT;
 8006d0c:	f04f 30ff 	mov.w	r0, #4294967295
 8006d10:	e713      	b.n	8006b3a <CCA02M2_AUDIO_IN_Init+0x196>
        return  BSP_ERROR_CLOCK_FAILURE;
 8006d12:	f06f 0008 	mvn.w	r0, #8
 8006d16:	e710      	b.n	8006b3a <CCA02M2_AUDIO_IN_Init+0x196>
    else if(Instance == 1U)
 8006d18:	2f01      	cmp	r7, #1
 8006d1a:	f43f ae49 	beq.w	80069b0 <CCA02M2_AUDIO_IN_Init+0xc>
    AudioInCtx[Instance].State = AUDIO_IN_STATE_STOP; 
 8006d1e:	2064      	movs	r0, #100	; 0x64
 8006d20:	fb00 4407 	mla	r4, r0, r7, r4
 8006d24:	2302      	movs	r3, #2
 8006d26:	6263      	str	r3, [r4, #36]	; 0x24
  return BSP_ERROR_NONE;
 8006d28:	2000      	movs	r0, #0
 8006d2a:	e706      	b.n	8006b3a <CCA02M2_AUDIO_IN_Init+0x196>
 8006d2c:	20009918 	.word	0x20009918
 8006d30:	40003800 	.word	0x40003800
 8006d34:	40023800 	.word	0x40023800
 8006d38:	40020400 	.word	0x40020400
 8006d3c:	40013000 	.word	0x40013000
 8006d40:	40020000 	.word	0x40020000
 8006d44:	20000f60 	.word	0x20000f60

08006d48 <CCA02M2_AUDIO_IN_PDMToPCM>:
{    
 8006d48:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006d4c:	460e      	mov	r6, r1
 8006d4e:	b08d      	sub	sp, #52	; 0x34
 8006d50:	4617      	mov	r7, r2
  if(Instance != 0U)
 8006d52:	2800      	cmp	r0, #0
 8006d54:	d147      	bne.n	8006de6 <CCA02M2_AUDIO_IN_PDMToPCM+0x9e>
    for(index = 0; index < AudioInCtx[Instance].ChannelsNbr; index++)
 8006d56:	4d25      	ldr	r5, [pc, #148]	; (8006dec <CCA02M2_AUDIO_IN_PDMToPCM+0xa4>)
 8006d58:	4604      	mov	r4, r0
          (void)PDM_Filter(&((uint8_t*)(PDMBuf))[index], &((uint8_t*)(PCMBuf))[3U*index], &PDM_FilterHandler[index]);          
 8006d5a:	f505 78f6 	add.w	r8, r5, #492	; 0x1ec
        (void)arm_fir_decimate_q15 (&ARM_Decimator_State[index], (q15_t *)&(PDM_Filter_Out), (q15_t*)&(Decimate_Out), DECIMATOR_BLOCK_SIZE);
 8006d5e:	f505 794d 	add.w	r9, r5, #820	; 0x334
    for(index = 0; index < AudioInCtx[Instance].ChannelsNbr; index++)
 8006d62:	692b      	ldr	r3, [r5, #16]
 8006d64:	42a3      	cmp	r3, r4
 8006d66:	d803      	bhi.n	8006d70 <CCA02M2_AUDIO_IN_PDMToPCM+0x28>
  return BSP_ERROR_NONE;
 8006d68:	2000      	movs	r0, #0
}
 8006d6a:	b00d      	add	sp, #52	; 0x34
 8006d6c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      if (AudioInCtx[Instance].SampleRate == 8000U)
 8006d70:	68ab      	ldr	r3, [r5, #8]
 8006d72:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8006d76:	d11f      	bne.n	8006db8 <CCA02M2_AUDIO_IN_PDMToPCM+0x70>
        (void)PDM_Filter(&((uint8_t*)(PDMBuf))[index], PDM_Filter_Out, &PDM_FilterHandler[index]);
 8006d78:	224c      	movs	r2, #76	; 0x4c
 8006d7a:	fb02 8204 	mla	r2, r2, r4, r8
 8006d7e:	a904      	add	r1, sp, #16
 8006d80:	1930      	adds	r0, r6, r4
 8006d82:	f010 ffb1 	bl	8017ce8 <PDM_Filter>
        (void)arm_fir_decimate_q15 (&ARM_Decimator_State[index], (q15_t *)&(PDM_Filter_Out), (q15_t*)&(Decimate_Out), DECIMATOR_BLOCK_SIZE);
 8006d86:	2310      	movs	r3, #16
 8006d88:	200c      	movs	r0, #12
 8006d8a:	eb0d 0103 	add.w	r1, sp, r3
 8006d8e:	466a      	mov	r2, sp
 8006d90:	fb00 9004 	mla	r0, r0, r4, r9
 8006d94:	f011 fd58 	bl	8018848 <arm_fir_decimate_q15>
        for (ii=0; ii<(8U*N_MS_PER_INTERRUPT); ii++)
 8006d98:	692a      	ldr	r2, [r5, #16]
 8006d9a:	466b      	mov	r3, sp
 8006d9c:	0050      	lsls	r0, r2, #1
 8006d9e:	eb07 0144 	add.w	r1, r7, r4, lsl #1
 8006da2:	2200      	movs	r2, #0
 8006da4:	3201      	adds	r2, #1
          PCMBuf[(ii * AudioInCtx[Instance].ChannelsNbr) + index] = Decimate_Out[ii];
 8006da6:	f833 cb02 	ldrh.w	ip, [r3], #2
 8006daa:	f8a1 c000 	strh.w	ip, [r1]
        for (ii=0; ii<(8U*N_MS_PER_INTERRUPT); ii++)
 8006dae:	2a08      	cmp	r2, #8
 8006db0:	4401      	add	r1, r0
 8006db2:	d1f7      	bne.n	8006da4 <CCA02M2_AUDIO_IN_PDMToPCM+0x5c>
    for(index = 0; index < AudioInCtx[Instance].ChannelsNbr; index++)
 8006db4:	3401      	adds	r4, #1
 8006db6:	e7d4      	b.n	8006d62 <CCA02M2_AUDIO_IN_PDMToPCM+0x1a>
        switch(AudioInCtx[Instance].BitsPerSample)
 8006db8:	68eb      	ldr	r3, [r5, #12]
 8006dba:	2b18      	cmp	r3, #24
 8006dbc:	d009      	beq.n	8006dd2 <CCA02M2_AUDIO_IN_PDMToPCM+0x8a>
 8006dbe:	2b20      	cmp	r3, #32
 8006dc0:	d001      	beq.n	8006dc6 <CCA02M2_AUDIO_IN_PDMToPCM+0x7e>
 8006dc2:	2b10      	cmp	r3, #16
 8006dc4:	d1f6      	bne.n	8006db4 <CCA02M2_AUDIO_IN_PDMToPCM+0x6c>
          (void)PDM_Filter(&((uint8_t*)(PDMBuf))[index], (uint32_t*)&(PCMBuf[index]), &PDM_FilterHandler[index]);          
 8006dc6:	224c      	movs	r2, #76	; 0x4c
 8006dc8:	fb02 8204 	mla	r2, r2, r4, r8
 8006dcc:	eb07 0144 	add.w	r1, r7, r4, lsl #1
 8006dd0:	e005      	b.n	8006dde <CCA02M2_AUDIO_IN_PDMToPCM+0x96>
          (void)PDM_Filter(&((uint8_t*)(PDMBuf))[index], &((uint8_t*)(PCMBuf))[3U*index], &PDM_FilterHandler[index]);          
 8006dd2:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 8006dd6:	224c      	movs	r2, #76	; 0x4c
 8006dd8:	fb02 8204 	mla	r2, r2, r4, r8
 8006ddc:	4439      	add	r1, r7
          (void)PDM_Filter(&((uint8_t*)(PDMBuf))[index], (uint32_t*)&(PCMBuf[index]), &PDM_FilterHandler[index]);          
 8006dde:	1930      	adds	r0, r6, r4
 8006de0:	f010 ff82 	bl	8017ce8 <PDM_Filter>
          break;
 8006de4:	e7e6      	b.n	8006db4 <CCA02M2_AUDIO_IN_PDMToPCM+0x6c>
    return  BSP_ERROR_WRONG_PARAM;
 8006de6:	f06f 0001 	mvn.w	r0, #1
 8006dea:	e7be      	b.n	8006d6a <CCA02M2_AUDIO_IN_PDMToPCM+0x22>
 8006dec:	20000a7c 	.word	0x20000a7c

08006df0 <CCA02M2_AUDIO_IN_Record>:
  if(Instance >= (AUDIO_IN_INSTANCES_NBR - 1U) )
 8006df0:	2801      	cmp	r0, #1
{  
 8006df2:	b538      	push	{r3, r4, r5, lr}
  if(Instance >= (AUDIO_IN_INSTANCES_NBR - 1U) )
 8006df4:	d902      	bls.n	8006dfc <CCA02M2_AUDIO_IN_Record+0xc>
    return BSP_ERROR_WRONG_PARAM;
 8006df6:	f06f 0001 	mvn.w	r0, #1
}
 8006dfa:	bd38      	pop	{r3, r4, r5, pc}
    AudioInCtx[Instance].pBuff = (uint16_t*)pBuf;
 8006dfc:	4c18      	ldr	r4, [pc, #96]	; (8006e60 <CCA02M2_AUDIO_IN_Record+0x70>)
 8006dfe:	2364      	movs	r3, #100	; 0x64
 8006e00:	fb03 4300 	mla	r3, r3, r0, r4
 8006e04:	6159      	str	r1, [r3, #20]
    if(Instance == 0U)
 8006e06:	2800      	cmp	r0, #0
 8006e08:	d1f5      	bne.n	8006df6 <CCA02M2_AUDIO_IN_Record+0x6>
      if(AudioInCtx[Instance].ChannelsNbr > 2U)
 8006e0a:	6923      	ldr	r3, [r4, #16]
 8006e0c:	2b02      	cmp	r3, #2
 8006e0e:	d80c      	bhi.n	8006e2a <CCA02M2_AUDIO_IN_Record+0x3a>
      if(AudioInCtx[Instance].ChannelsNbr != 1U)
 8006e10:	6923      	ldr	r3, [r4, #16]
 8006e12:	2b01      	cmp	r3, #1
 8006e14:	d115      	bne.n	8006e42 <CCA02M2_AUDIO_IN_Record+0x52>
      if(HAL_I2S_Receive_DMA(&hAudioInI2s, I2S_InternalBuffer, (uint16_t)AudioInCtx[Instance].Size/2U) != HAL_OK)
 8006e16:	8ba2      	ldrh	r2, [r4, #28]
 8006e18:	4912      	ldr	r1, [pc, #72]	; (8006e64 <CCA02M2_AUDIO_IN_Record+0x74>)
 8006e1a:	4813      	ldr	r0, [pc, #76]	; (8006e68 <CCA02M2_AUDIO_IN_Record+0x78>)
 8006e1c:	0852      	lsrs	r2, r2, #1
 8006e1e:	f001 fee1 	bl	8008be4 <HAL_I2S_Receive_DMA>
 8006e22:	b958      	cbnz	r0, 8006e3c <CCA02M2_AUDIO_IN_Record+0x4c>
      AudioInCtx[Instance].State = AUDIO_IN_STATE_RECORDING;           
 8006e24:	2301      	movs	r3, #1
 8006e26:	6263      	str	r3, [r4, #36]	; 0x24
  return BSP_ERROR_NONE;
 8006e28:	e7e7      	b.n	8006dfa <CCA02M2_AUDIO_IN_Record+0xa>
        if(HAL_SPI_Receive_DMA(&hAudioInSPI, (uint8_t *)SPI_InternalBuffer, (uint16_t)AudioInCtx[Instance].Size) != HAL_OK)
 8006e2a:	8ba2      	ldrh	r2, [r4, #28]
 8006e2c:	f204 513c 	addw	r1, r4, #1340	; 0x53c
 8006e30:	f204 40e4 	addw	r0, r4, #1252	; 0x4e4
 8006e34:	f003 f97e 	bl	800a134 <HAL_SPI_Receive_DMA>
 8006e38:	2800      	cmp	r0, #0
 8006e3a:	d0e9      	beq.n	8006e10 <CCA02M2_AUDIO_IN_Record+0x20>
          return BSP_ERROR_PERIPH_FAILURE;
 8006e3c:	f06f 0003 	mvn.w	r0, #3
 8006e40:	e7db      	b.n	8006dfa <CCA02M2_AUDIO_IN_Record+0xa>
* @retval None
*/
static HAL_StatusTypeDef AUDIO_IN_Timer_Start(void)
{  
  HAL_StatusTypeDef ret =  HAL_OK;
  if(HAL_TIM_IC_Start(&TimDividerHandle, TIM_CHANNEL_1) != HAL_OK)
 8006e42:	2100      	movs	r1, #0
 8006e44:	4809      	ldr	r0, [pc, #36]	; (8006e6c <CCA02M2_AUDIO_IN_Record+0x7c>)
 8006e46:	f004 f82f 	bl	800aea8 <HAL_TIM_IC_Start>
  {
    ret =  HAL_ERROR;
  }
  /* Start the Output Compare */
  if(HAL_TIM_OC_Start(&TimDividerHandle, TIM_CHANNEL_2) != HAL_OK)
 8006e4a:	2104      	movs	r1, #4
  if(HAL_TIM_IC_Start(&TimDividerHandle, TIM_CHANNEL_1) != HAL_OK)
 8006e4c:	4605      	mov	r5, r0
  if(HAL_TIM_OC_Start(&TimDividerHandle, TIM_CHANNEL_2) != HAL_OK)
 8006e4e:	4807      	ldr	r0, [pc, #28]	; (8006e6c <CCA02M2_AUDIO_IN_Record+0x7c>)
 8006e50:	f003 fef0 	bl	800ac34 <HAL_TIM_OC_Start>
 8006e54:	4328      	orrs	r0, r5
 8006e56:	f010 0fff 	tst.w	r0, #255	; 0xff
 8006e5a:	d1ef      	bne.n	8006e3c <CCA02M2_AUDIO_IN_Record+0x4c>
 8006e5c:	e7db      	b.n	8006e16 <CCA02M2_AUDIO_IN_Record+0x26>
 8006e5e:	bf00      	nop
 8006e60:	20000a7c 	.word	0x20000a7c
 8006e64:	200015b8 	.word	0x200015b8
 8006e68:	20009918 	.word	0x20009918
 8006e6c:	20000ed8 	.word	0x20000ed8

08006e70 <CCA02M2_AUDIO_IN_Stop>:
{
 8006e70:	b510      	push	{r4, lr}
    if(Instance == 0U)
 8006e72:	b9a0      	cbnz	r0, 8006e9e <CCA02M2_AUDIO_IN_Stop+0x2e>
      if(AudioInCtx[Instance].ChannelsNbr > 2U)
 8006e74:	4c0b      	ldr	r4, [pc, #44]	; (8006ea4 <CCA02M2_AUDIO_IN_Stop+0x34>)
 8006e76:	6923      	ldr	r3, [r4, #16]
 8006e78:	2b02      	cmp	r3, #2
 8006e7a:	d806      	bhi.n	8006e8a <CCA02M2_AUDIO_IN_Stop+0x1a>
      if(HAL_I2S_DMAStop(&hAudioInI2s) != HAL_OK)
 8006e7c:	480a      	ldr	r0, [pc, #40]	; (8006ea8 <CCA02M2_AUDIO_IN_Stop+0x38>)
 8006e7e:	f001 ff21 	bl	8008cc4 <HAL_I2S_DMAStop>
 8006e82:	b148      	cbz	r0, 8006e98 <CCA02M2_AUDIO_IN_Stop+0x28>
          return BSP_ERROR_PERIPH_FAILURE;
 8006e84:	f06f 0003 	mvn.w	r0, #3
}
 8006e88:	bd10      	pop	{r4, pc}
        if(HAL_SPI_DMAStop(&hAudioInSPI)!= HAL_OK)
 8006e8a:	f204 40e4 	addw	r0, r4, #1252	; 0x4e4
 8006e8e:	f003 f9d3 	bl	800a238 <HAL_SPI_DMAStop>
 8006e92:	2800      	cmp	r0, #0
 8006e94:	d0f2      	beq.n	8006e7c <CCA02M2_AUDIO_IN_Stop+0xc>
 8006e96:	e7f5      	b.n	8006e84 <CCA02M2_AUDIO_IN_Stop+0x14>
    AudioInCtx[Instance].State = AUDIO_IN_STATE_STOP;
 8006e98:	2302      	movs	r3, #2
 8006e9a:	6263      	str	r3, [r4, #36]	; 0x24
  return BSP_ERROR_NONE;  
 8006e9c:	e7f4      	b.n	8006e88 <CCA02M2_AUDIO_IN_Stop+0x18>
      return  BSP_ERROR_WRONG_PARAM;
 8006e9e:	f06f 0001 	mvn.w	r0, #1
 8006ea2:	e7f1      	b.n	8006e88 <CCA02M2_AUDIO_IN_Stop+0x18>
 8006ea4:	20000a7c 	.word	0x20000a7c
 8006ea8:	20009918 	.word	0x20009918

08006eac <CCA02M2_AUDIO_IN_SetVolume>:
  if(Instance >= AUDIO_IN_INSTANCES_NBR)
 8006eac:	2802      	cmp	r0, #2
{
 8006eae:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006eb2:	4604      	mov	r4, r0
 8006eb4:	460e      	mov	r6, r1
  if(Instance >= AUDIO_IN_INSTANCES_NBR)
 8006eb6:	d823      	bhi.n	8006f00 <CCA02M2_AUDIO_IN_SetVolume+0x54>
  else if (Instance == 0U)
 8006eb8:	4f13      	ldr	r7, [pc, #76]	; (8006f08 <CCA02M2_AUDIO_IN_SetVolume+0x5c>)
 8006eba:	b9e0      	cbnz	r0, 8006ef6 <CCA02M2_AUDIO_IN_SetVolume+0x4a>
      if (PDM_FilterConfig[index].mic_gain != VolumeGain[Volume])
 8006ebc:	f8df 804c 	ldr.w	r8, [pc, #76]	; 8006f0c <CCA02M2_AUDIO_IN_SetVolume+0x60>
 8006ec0:	f507 7547 	add.w	r5, r7, #796	; 0x31c
        (void)PDM_Filter_setConfig((PDM_Filter_Handler_t *)&PDM_FilterHandler[index], &PDM_FilterConfig[index]);
 8006ec4:	f04f 094c 	mov.w	r9, #76	; 0x4c
 8006ec8:	f507 7af6 	add.w	sl, r7, #492	; 0x1ec
    for (index = 0; index < AudioInCtx[Instance].ChannelsNbr; index++)
 8006ecc:	693b      	ldr	r3, [r7, #16]
 8006ece:	42a3      	cmp	r3, r4
 8006ed0:	d802      	bhi.n	8006ed8 <CCA02M2_AUDIO_IN_SetVolume+0x2c>
  return BSP_ERROR_NONE;  
 8006ed2:	2000      	movs	r0, #0
}
 8006ed4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if (PDM_FilterConfig[index].mic_gain != VolumeGain[Volume])
 8006ed8:	f938 3016 	ldrsh.w	r3, [r8, r6, lsl #1]
 8006edc:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 8006ee0:	429a      	cmp	r2, r3
 8006ee2:	d005      	beq.n	8006ef0 <CCA02M2_AUDIO_IN_SetVolume+0x44>
        PDM_FilterConfig[index].mic_gain = VolumeGain[Volume];
 8006ee4:	80ab      	strh	r3, [r5, #4]
        (void)PDM_Filter_setConfig((PDM_Filter_Handler_t *)&PDM_FilterHandler[index], &PDM_FilterConfig[index]);
 8006ee6:	4629      	mov	r1, r5
 8006ee8:	fb09 a004 	mla	r0, r9, r4, sl
 8006eec:	f010 fe0a 	bl	8017b04 <PDM_Filter_setConfig>
    for (index = 0; index < AudioInCtx[Instance].ChannelsNbr; index++)
 8006ef0:	3401      	adds	r4, #1
 8006ef2:	3506      	adds	r5, #6
 8006ef4:	e7ea      	b.n	8006ecc <CCA02M2_AUDIO_IN_SetVolume+0x20>
    AudioInCtx[Instance].Volume = Volume;
 8006ef6:	2064      	movs	r0, #100	; 0x64
 8006ef8:	fb00 7404 	mla	r4, r0, r4, r7
 8006efc:	6221      	str	r1, [r4, #32]
 8006efe:	e7e8      	b.n	8006ed2 <CCA02M2_AUDIO_IN_SetVolume+0x26>
    return BSP_ERROR_WRONG_PARAM;
 8006f00:	f06f 0001 	mvn.w	r0, #1
 8006f04:	e7e6      	b.n	8006ed4 <CCA02M2_AUDIO_IN_SetVolume+0x28>
 8006f06:	bf00      	nop
 8006f08:	20000a7c 	.word	0x20000a7c
 8006f0c:	0801fa90 	.word	0x0801fa90

08006f10 <HAL_I2S_RxCpltCallback>:
  switch(AudioInCtx[0].ChannelsNbr)
 8006f10:	4a59      	ldr	r2, [pc, #356]	; (8007078 <HAL_I2S_RxCpltCallback+0x168>)
 8006f12:	6911      	ldr	r1, [r2, #16]
 8006f14:	2902      	cmp	r1, #2
{
 8006f16:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f1a:	4613      	mov	r3, r2
  switch(AudioInCtx[0].ChannelsNbr)
 8006f1c:	d018      	beq.n	8006f50 <HAL_I2S_RxCpltCallback+0x40>
 8006f1e:	2904      	cmp	r1, #4
 8006f20:	d048      	beq.n	8006fb4 <HAL_I2S_RxCpltCallback+0xa4>
 8006f22:	2901      	cmp	r1, #1
 8006f24:	d109      	bne.n	8006f3a <HAL_I2S_RxCpltCallback+0x2a>
      uint16_t * DataTempI2S = &I2S_InternalBuffer[AudioInCtx[0].Size/4U] ;
 8006f26:	69d1      	ldr	r1, [r2, #28]
 8006f28:	f602 303c 	addw	r0, r2, #2876	; 0xb3c
 8006f2c:	0889      	lsrs	r1, r1, #2
        AudioInCtx[0].pBuff[index] = (DataTempI2S[index]);
 8006f2e:	6952      	ldr	r2, [r2, #20]
      uint16_t * DataTempI2S = &I2S_InternalBuffer[AudioInCtx[0].Size/4U] ;
 8006f30:	eb00 0041 	add.w	r0, r0, r1, lsl #1
      for(index = 0; index < (AudioInCtx[0].Size/4U); index++)
 8006f34:	2300      	movs	r3, #0
 8006f36:	4299      	cmp	r1, r3
 8006f38:	d104      	bne.n	8006f44 <HAL_I2S_RxCpltCallback+0x34>
  CCA02M2_AUDIO_IN_TransferComplete_CallBack(0);
 8006f3a:	2000      	movs	r0, #0
 8006f3c:	f00d f850 	bl	8013fe0 <CCA02M2_AUDIO_IN_TransferComplete_CallBack>
}
 8006f40:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        AudioInCtx[0].pBuff[index] = (DataTempI2S[index]);
 8006f44:	f830 4013 	ldrh.w	r4, [r0, r3, lsl #1]
 8006f48:	f822 4013 	strh.w	r4, [r2, r3, lsl #1]
      for(index = 0; index < (AudioInCtx[0].Size/4U); index++)
 8006f4c:	3301      	adds	r3, #1
 8006f4e:	e7f2      	b.n	8006f36 <HAL_I2S_RxCpltCallback+0x26>
      uint16_t * DataTempI2S = &(I2S_InternalBuffer[AudioInCtx[0].Size/2U]);
 8006f50:	f602 353c 	addw	r5, r2, #2876	; 0xb3c
 8006f54:	69d2      	ldr	r2, [r2, #28]
        ((uint8_t *)(AudioInCtx[0].pBuff))[(index*2U)] = Channel_Demux[a & CHANNEL_DEMUX_MASK] | (Channel_Demux[b & CHANNEL_DEMUX_MASK] << 4);;
 8006f56:	4f49      	ldr	r7, [pc, #292]	; (800707c <HAL_I2S_RxCpltCallback+0x16c>)
      uint16_t * DataTempI2S = &(I2S_InternalBuffer[AudioInCtx[0].Size/2U]);
 8006f58:	f022 0201 	bic.w	r2, r2, #1
 8006f5c:	4415      	add	r5, r2
      for(index=0; index<(AudioInCtx[0].Size/2U); index++) 
 8006f5e:	2601      	movs	r6, #1
 8006f60:	2400      	movs	r4, #0
 8006f62:	69da      	ldr	r2, [r3, #28]
 8006f64:	ebb4 0f52 	cmp.w	r4, r2, lsr #1
 8006f68:	d2e7      	bcs.n	8006f3a <HAL_I2S_RxCpltCallback+0x2a>
        a = ((uint8_t *)(DataTempI2S))[(index*2U)];
 8006f6a:	f815 2014 	ldrb.w	r2, [r5, r4, lsl #1]
        b = ((uint8_t *)(DataTempI2S))[(index*2U)+1U];
 8006f6e:	5da9      	ldrb	r1, [r5, r6]
        ((uint8_t *)(AudioInCtx[0].pBuff))[(index*2U)] = Channel_Demux[a & CHANNEL_DEMUX_MASK] | (Channel_Demux[b & CHANNEL_DEMUX_MASK] << 4);;
 8006f70:	6958      	ldr	r0, [r3, #20]
 8006f72:	f001 0c55 	and.w	ip, r1, #85	; 0x55
 8006f76:	f002 0e55 	and.w	lr, r2, #85	; 0x55
 8006f7a:	44bc      	add	ip, r7
 8006f7c:	44be      	add	lr, r7
 8006f7e:	f89c 8102 	ldrb.w	r8, [ip, #258]	; 0x102
 8006f82:	f89e c102 	ldrb.w	ip, [lr, #258]	; 0x102
        ((uint8_t *)(AudioInCtx[0].pBuff))[(index*2U)+1U] = Channel_Demux[(a>>1) & CHANNEL_DEMUX_MASK] | (Channel_Demux[(b>>1) & CHANNEL_DEMUX_MASK] << 4);
 8006f86:	0849      	lsrs	r1, r1, #1
 8006f88:	0852      	lsrs	r2, r2, #1
 8006f8a:	f001 0155 	and.w	r1, r1, #85	; 0x55
 8006f8e:	f002 0255 	and.w	r2, r2, #85	; 0x55
        ((uint8_t *)(AudioInCtx[0].pBuff))[(index*2U)] = Channel_Demux[a & CHANNEL_DEMUX_MASK] | (Channel_Demux[b & CHANNEL_DEMUX_MASK] << 4);;
 8006f92:	ea4c 1c08 	orr.w	ip, ip, r8, lsl #4
        ((uint8_t *)(AudioInCtx[0].pBuff))[(index*2U)+1U] = Channel_Demux[(a>>1) & CHANNEL_DEMUX_MASK] | (Channel_Demux[(b>>1) & CHANNEL_DEMUX_MASK] << 4);
 8006f96:	4439      	add	r1, r7
 8006f98:	443a      	add	r2, r7
        ((uint8_t *)(AudioInCtx[0].pBuff))[(index*2U)] = Channel_Demux[a & CHANNEL_DEMUX_MASK] | (Channel_Demux[b & CHANNEL_DEMUX_MASK] << 4);;
 8006f9a:	f800 c014 	strb.w	ip, [r0, r4, lsl #1]
        ((uint8_t *)(AudioInCtx[0].pBuff))[(index*2U)+1U] = Channel_Demux[(a>>1) & CHANNEL_DEMUX_MASK] | (Channel_Demux[(b>>1) & CHANNEL_DEMUX_MASK] << 4);
 8006f9e:	f891 1102 	ldrb.w	r1, [r1, #258]	; 0x102
 8006fa2:	f892 2102 	ldrb.w	r2, [r2, #258]	; 0x102
 8006fa6:	6958      	ldr	r0, [r3, #20]
 8006fa8:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
 8006fac:	5582      	strb	r2, [r0, r6]
      for(index=0; index<(AudioInCtx[0].Size/2U); index++) 
 8006fae:	3401      	adds	r4, #1
 8006fb0:	3602      	adds	r6, #2
 8006fb2:	e7d6      	b.n	8006f62 <HAL_I2S_RxCpltCallback+0x52>
      uint16_t * DataTempI2S = &(I2S_InternalBuffer[AudioInCtx[0].Size/2U]);
 8006fb4:	69d6      	ldr	r6, [r2, #28]
 8006fb6:	f603 353c 	addw	r5, r3, #2876	; 0xb3c
 8006fba:	f026 0201 	bic.w	r2, r6, #1
      uint16_t * DataTempSPI = &(SPI_InternalBuffer[AudioInCtx[0].Size/2U]);
 8006fbe:	f203 563c 	addw	r6, r3, #1340	; 0x53c
      uint16_t * DataTempI2S = &(I2S_InternalBuffer[AudioInCtx[0].Size/2U]);
 8006fc2:	4415      	add	r5, r2
      uint16_t * DataTempSPI = &(SPI_InternalBuffer[AudioInCtx[0].Size/2U]);
 8006fc4:	4416      	add	r6, r2
      for(index=0; index<(AudioInCtx[0].Size/2U); index++) 
 8006fc6:	2400      	movs	r4, #0
          (Channel_Demux[b & CHANNEL_DEMUX_MASK] << 4);;
 8006fc8:	4a2c      	ldr	r2, [pc, #176]	; (800707c <HAL_I2S_RxCpltCallback+0x16c>)
      for(index=0; index<(AudioInCtx[0].Size/2U); index++) 
 8006fca:	4620      	mov	r0, r4
        b = ((uint8_t *)(DataTempI2S))[(index*2U)+1U];
 8006fcc:	f105 0c01 	add.w	ip, r5, #1
            b = ((uint8_t *)(DataTempSPI))[(index*2U)+1U];
 8006fd0:	f106 0e01 	add.w	lr, r6, #1
      for(index=0; index<(AudioInCtx[0].Size/2U); index++) 
 8006fd4:	69d9      	ldr	r1, [r3, #28]
 8006fd6:	ebb0 0f51 	cmp.w	r0, r1, lsr #1
 8006fda:	d2ae      	bcs.n	8006f3a <HAL_I2S_RxCpltCallback+0x2a>
        a = ((uint8_t *)(DataTempI2S))[(index*2U)];
 8006fdc:	f815 7010 	ldrb.w	r7, [r5, r0, lsl #1]
        b = ((uint8_t *)(DataTempI2S))[(index*2U)+1U];
 8006fe0:	f81c 8010 	ldrb.w	r8, [ip, r0, lsl #1]
        ((uint8_t *)(AudioInCtx[0].pBuff))[(index*4U)] = Channel_Demux[a & CHANNEL_DEMUX_MASK] |
 8006fe4:	6959      	ldr	r1, [r3, #20]
          (Channel_Demux[b & CHANNEL_DEMUX_MASK] << 4);;
 8006fe6:	f008 0955 	and.w	r9, r8, #85	; 0x55
        ((uint8_t *)(AudioInCtx[0].pBuff))[(index*4U)] = Channel_Demux[a & CHANNEL_DEMUX_MASK] |
 8006fea:	f007 0a55 	and.w	sl, r7, #85	; 0x55
          (Channel_Demux[b & CHANNEL_DEMUX_MASK] << 4);;
 8006fee:	4491      	add	r9, r2
        ((uint8_t *)(AudioInCtx[0].pBuff))[(index*4U)] = Channel_Demux[a & CHANNEL_DEMUX_MASK] |
 8006ff0:	4492      	add	sl, r2
          (Channel_Demux[b & CHANNEL_DEMUX_MASK] << 4);;
 8006ff2:	f899 b102 	ldrb.w	fp, [r9, #258]	; 0x102
        ((uint8_t *)(AudioInCtx[0].pBuff))[(index*4U)] = Channel_Demux[a & CHANNEL_DEMUX_MASK] |
 8006ff6:	f89a 9102 	ldrb.w	r9, [sl, #258]	; 0x102
            (Channel_Demux[(b>>1) & CHANNEL_DEMUX_MASK] << 4);
 8006ffa:	ea4f 0858 	mov.w	r8, r8, lsr #1
        ((uint8_t *)(AudioInCtx[0].pBuff))[(index*4U)] = Channel_Demux[a & CHANNEL_DEMUX_MASK] |
 8006ffe:	ea49 190b 	orr.w	r9, r9, fp, lsl #4
          ((uint8_t *)(AudioInCtx[0].pBuff))[(index*4U)+1U] = Channel_Demux[(a>>1) & CHANNEL_DEMUX_MASK] |
 8007002:	087f      	lsrs	r7, r7, #1
        ((uint8_t *)(AudioInCtx[0].pBuff))[(index*4U)] = Channel_Demux[a & CHANNEL_DEMUX_MASK] |
 8007004:	f801 9004 	strb.w	r9, [r1, r4]
            (Channel_Demux[(b>>1) & CHANNEL_DEMUX_MASK] << 4);
 8007008:	f008 0855 	and.w	r8, r8, #85	; 0x55
          ((uint8_t *)(AudioInCtx[0].pBuff))[(index*4U)+1U] = Channel_Demux[(a>>1) & CHANNEL_DEMUX_MASK] |
 800700c:	f007 0755 	and.w	r7, r7, #85	; 0x55
            (Channel_Demux[(b>>1) & CHANNEL_DEMUX_MASK] << 4);
 8007010:	4490      	add	r8, r2
          ((uint8_t *)(AudioInCtx[0].pBuff))[(index*4U)+1U] = Channel_Demux[(a>>1) & CHANNEL_DEMUX_MASK] |
 8007012:	4417      	add	r7, r2
 8007014:	6959      	ldr	r1, [r3, #20]
            (Channel_Demux[(b>>1) & CHANNEL_DEMUX_MASK] << 4);
 8007016:	f898 8102 	ldrb.w	r8, [r8, #258]	; 0x102
          ((uint8_t *)(AudioInCtx[0].pBuff))[(index*4U)+1U] = Channel_Demux[(a>>1) & CHANNEL_DEMUX_MASK] |
 800701a:	f897 7102 	ldrb.w	r7, [r7, #258]	; 0x102
 800701e:	4421      	add	r1, r4
 8007020:	ea47 1708 	orr.w	r7, r7, r8, lsl #4
 8007024:	704f      	strb	r7, [r1, #1]
            a = ((uint8_t *)(DataTempSPI))[(index*2U)];
 8007026:	f816 1010 	ldrb.w	r1, [r6, r0, lsl #1]
            b = ((uint8_t *)(DataTempSPI))[(index*2U)+1U];
 800702a:	f81e 8010 	ldrb.w	r8, [lr, r0, lsl #1]
            ((uint8_t *)(AudioInCtx[0].pBuff))[(index*4U)+2U] = Channel_Demux[a & CHANNEL_DEMUX_MASK] |
 800702e:	695f      	ldr	r7, [r3, #20]
              (Channel_Demux[b & CHANNEL_DEMUX_MASK] << 4);;
 8007030:	f008 0955 	and.w	r9, r8, #85	; 0x55
            ((uint8_t *)(AudioInCtx[0].pBuff))[(index*4U)+2U] = Channel_Demux[a & CHANNEL_DEMUX_MASK] |
 8007034:	f001 0a55 	and.w	sl, r1, #85	; 0x55
              (Channel_Demux[b & CHANNEL_DEMUX_MASK] << 4);;
 8007038:	4491      	add	r9, r2
            ((uint8_t *)(AudioInCtx[0].pBuff))[(index*4U)+2U] = Channel_Demux[a & CHANNEL_DEMUX_MASK] |
 800703a:	4492      	add	sl, r2
              (Channel_Demux[b & CHANNEL_DEMUX_MASK] << 4);;
 800703c:	f899 b102 	ldrb.w	fp, [r9, #258]	; 0x102
            ((uint8_t *)(AudioInCtx[0].pBuff))[(index*4U)+2U] = Channel_Demux[a & CHANNEL_DEMUX_MASK] |
 8007040:	f89a 9102 	ldrb.w	r9, [sl, #258]	; 0x102
 8007044:	4427      	add	r7, r4
                (Channel_Demux[(b>>1) & CHANNEL_DEMUX_MASK] << 4);
 8007046:	ea4f 0858 	mov.w	r8, r8, lsr #1
              ((uint8_t *)(AudioInCtx[0].pBuff))[(index*4U)+3U] = Channel_Demux[(a>>1) & CHANNEL_DEMUX_MASK] |
 800704a:	0849      	lsrs	r1, r1, #1
            ((uint8_t *)(AudioInCtx[0].pBuff))[(index*4U)+2U] = Channel_Demux[a & CHANNEL_DEMUX_MASK] |
 800704c:	ea49 190b 	orr.w	r9, r9, fp, lsl #4
                (Channel_Demux[(b>>1) & CHANNEL_DEMUX_MASK] << 4);
 8007050:	f008 0855 	and.w	r8, r8, #85	; 0x55
              ((uint8_t *)(AudioInCtx[0].pBuff))[(index*4U)+3U] = Channel_Demux[(a>>1) & CHANNEL_DEMUX_MASK] |
 8007054:	f001 0155 	and.w	r1, r1, #85	; 0x55
            ((uint8_t *)(AudioInCtx[0].pBuff))[(index*4U)+2U] = Channel_Demux[a & CHANNEL_DEMUX_MASK] |
 8007058:	f887 9002 	strb.w	r9, [r7, #2]
                (Channel_Demux[(b>>1) & CHANNEL_DEMUX_MASK] << 4);
 800705c:	4490      	add	r8, r2
              ((uint8_t *)(AudioInCtx[0].pBuff))[(index*4U)+3U] = Channel_Demux[(a>>1) & CHANNEL_DEMUX_MASK] |
 800705e:	4411      	add	r1, r2
 8007060:	695f      	ldr	r7, [r3, #20]
                (Channel_Demux[(b>>1) & CHANNEL_DEMUX_MASK] << 4);
 8007062:	f898 8102 	ldrb.w	r8, [r8, #258]	; 0x102
              ((uint8_t *)(AudioInCtx[0].pBuff))[(index*4U)+3U] = Channel_Demux[(a>>1) & CHANNEL_DEMUX_MASK] |
 8007066:	f891 1102 	ldrb.w	r1, [r1, #258]	; 0x102
 800706a:	4427      	add	r7, r4
 800706c:	ea41 1108 	orr.w	r1, r1, r8, lsl #4
 8007070:	70f9      	strb	r1, [r7, #3]
      for(index=0; index<(AudioInCtx[0].Size/2U); index++) 
 8007072:	3001      	adds	r0, #1
 8007074:	3404      	adds	r4, #4
 8007076:	e7ad      	b.n	8006fd4 <HAL_I2S_RxCpltCallback+0xc4>
 8007078:	20000a7c 	.word	0x20000a7c
 800707c:	0801fa90 	.word	0x0801fa90

08007080 <HAL_I2S_RxHalfCpltCallback>:
  switch(AudioInCtx[0].ChannelsNbr)
 8007080:	4a55      	ldr	r2, [pc, #340]	; (80071d8 <HAL_I2S_RxHalfCpltCallback+0x158>)
 8007082:	6911      	ldr	r1, [r2, #16]
 8007084:	2902      	cmp	r1, #2
{
 8007086:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800708a:	4613      	mov	r3, r2
  switch(AudioInCtx[0].ChannelsNbr)
 800708c:	d06e      	beq.n	800716c <HAL_I2S_RxHalfCpltCallback+0xec>
 800708e:	2904      	cmp	r1, #4
 8007090:	d010      	beq.n	80070b4 <HAL_I2S_RxHalfCpltCallback+0x34>
 8007092:	2901      	cmp	r1, #1
 8007094:	d109      	bne.n	80070aa <HAL_I2S_RxHalfCpltCallback+0x2a>
      for(index = 0; index < (AudioInCtx[0].Size/4U); index++)
 8007096:	69d3      	ldr	r3, [r2, #28]
 8007098:	6951      	ldr	r1, [r2, #20]
 800709a:	089b      	lsrs	r3, r3, #2
 800709c:	f602 303c 	addw	r0, r2, #2876	; 0xb3c
 80070a0:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 80070a4:	4299      	cmp	r1, r3
 80070a6:	f040 8092 	bne.w	80071ce <HAL_I2S_RxHalfCpltCallback+0x14e>
  CCA02M2_AUDIO_IN_HalfTransfer_CallBack(0);
 80070aa:	2000      	movs	r0, #0
 80070ac:	f00c ff96 	bl	8013fdc <CCA02M2_AUDIO_IN_HalfTransfer_CallBack>
}
 80070b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80070b4:	f602 363c 	addw	r6, r2, #2876	; 0xb3c
 80070b8:	f202 553c 	addw	r5, r2, #1340	; 0x53c
  switch(AudioInCtx[0].ChannelsNbr)
 80070bc:	2400      	movs	r4, #0
          (Channel_Demux[b & CHANNEL_DEMUX_MASK] << 4);;
 80070be:	4a47      	ldr	r2, [pc, #284]	; (80071dc <HAL_I2S_RxHalfCpltCallback+0x15c>)
      for(index=0; index<(AudioInCtx[0].Size/2U); index++) 
 80070c0:	46a4      	mov	ip, r4
 80070c2:	69d9      	ldr	r1, [r3, #28]
 80070c4:	ebbc 0f51 	cmp.w	ip, r1, lsr #1
 80070c8:	f106 0602 	add.w	r6, r6, #2
 80070cc:	f105 0502 	add.w	r5, r5, #2
 80070d0:	d2eb      	bcs.n	80070aa <HAL_I2S_RxHalfCpltCallback+0x2a>
        a = ((uint8_t *)(DataTempI2S))[(index*2U)];
 80070d2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
        b = ((uint8_t *)(DataTempI2S))[(index*2U)+1U];
 80070d6:	f816 7c01 	ldrb.w	r7, [r6, #-1]
        ((uint8_t *)(AudioInCtx[0].pBuff))[(index*4U)] = Channel_Demux[a & CHANNEL_DEMUX_MASK] |
 80070da:	6958      	ldr	r0, [r3, #20]
          (Channel_Demux[b & CHANNEL_DEMUX_MASK] << 4);;
 80070dc:	f007 0e55 	and.w	lr, r7, #85	; 0x55
        ((uint8_t *)(AudioInCtx[0].pBuff))[(index*4U)] = Channel_Demux[a & CHANNEL_DEMUX_MASK] |
 80070e0:	f001 0855 	and.w	r8, r1, #85	; 0x55
          (Channel_Demux[b & CHANNEL_DEMUX_MASK] << 4);;
 80070e4:	4496      	add	lr, r2
        ((uint8_t *)(AudioInCtx[0].pBuff))[(index*4U)] = Channel_Demux[a & CHANNEL_DEMUX_MASK] |
 80070e6:	4490      	add	r8, r2
          (Channel_Demux[b & CHANNEL_DEMUX_MASK] << 4);;
 80070e8:	f89e 9102 	ldrb.w	r9, [lr, #258]	; 0x102
        ((uint8_t *)(AudioInCtx[0].pBuff))[(index*4U)] = Channel_Demux[a & CHANNEL_DEMUX_MASK] |
 80070ec:	f898 e102 	ldrb.w	lr, [r8, #258]	; 0x102
            (Channel_Demux[(b>>1) & CHANNEL_DEMUX_MASK] << 4);
 80070f0:	087f      	lsrs	r7, r7, #1
        ((uint8_t *)(AudioInCtx[0].pBuff))[(index*4U)] = Channel_Demux[a & CHANNEL_DEMUX_MASK] |
 80070f2:	ea4e 1e09 	orr.w	lr, lr, r9, lsl #4
          ((uint8_t *)(AudioInCtx[0].pBuff))[(index*4U)+1U] = Channel_Demux[(a>>1) & CHANNEL_DEMUX_MASK] |
 80070f6:	0849      	lsrs	r1, r1, #1
        ((uint8_t *)(AudioInCtx[0].pBuff))[(index*4U)] = Channel_Demux[a & CHANNEL_DEMUX_MASK] |
 80070f8:	f800 e004 	strb.w	lr, [r0, r4]
            (Channel_Demux[(b>>1) & CHANNEL_DEMUX_MASK] << 4);
 80070fc:	f007 0755 	and.w	r7, r7, #85	; 0x55
          ((uint8_t *)(AudioInCtx[0].pBuff))[(index*4U)+1U] = Channel_Demux[(a>>1) & CHANNEL_DEMUX_MASK] |
 8007100:	f001 0155 	and.w	r1, r1, #85	; 0x55
            (Channel_Demux[(b>>1) & CHANNEL_DEMUX_MASK] << 4);
 8007104:	4417      	add	r7, r2
          ((uint8_t *)(AudioInCtx[0].pBuff))[(index*4U)+1U] = Channel_Demux[(a>>1) & CHANNEL_DEMUX_MASK] |
 8007106:	4411      	add	r1, r2
 8007108:	6958      	ldr	r0, [r3, #20]
            (Channel_Demux[(b>>1) & CHANNEL_DEMUX_MASK] << 4);
 800710a:	f897 7102 	ldrb.w	r7, [r7, #258]	; 0x102
          ((uint8_t *)(AudioInCtx[0].pBuff))[(index*4U)+1U] = Channel_Demux[(a>>1) & CHANNEL_DEMUX_MASK] |
 800710e:	f891 1102 	ldrb.w	r1, [r1, #258]	; 0x102
 8007112:	4420      	add	r0, r4
 8007114:	ea41 1107 	orr.w	r1, r1, r7, lsl #4
 8007118:	7041      	strb	r1, [r0, #1]
            a = ((uint8_t *)(DataTempSPI))[(index*2U)];
 800711a:	f815 1c02 	ldrb.w	r1, [r5, #-2]
            b = ((uint8_t *)(DataTempSPI))[(index*2U)+1U];
 800711e:	f815 0c01 	ldrb.w	r0, [r5, #-1]
            ((uint8_t *)(AudioInCtx[0].pBuff))[(index*4U)+2U] = Channel_Demux[a & CHANNEL_DEMUX_MASK] |
 8007122:	695f      	ldr	r7, [r3, #20]
              (Channel_Demux[b & CHANNEL_DEMUX_MASK] << 4);;
 8007124:	f000 0e55 	and.w	lr, r0, #85	; 0x55
            ((uint8_t *)(AudioInCtx[0].pBuff))[(index*4U)+2U] = Channel_Demux[a & CHANNEL_DEMUX_MASK] |
 8007128:	f001 0855 	and.w	r8, r1, #85	; 0x55
              (Channel_Demux[b & CHANNEL_DEMUX_MASK] << 4);;
 800712c:	4496      	add	lr, r2
            ((uint8_t *)(AudioInCtx[0].pBuff))[(index*4U)+2U] = Channel_Demux[a & CHANNEL_DEMUX_MASK] |
 800712e:	4490      	add	r8, r2
              (Channel_Demux[b & CHANNEL_DEMUX_MASK] << 4);;
 8007130:	f89e 9102 	ldrb.w	r9, [lr, #258]	; 0x102
            ((uint8_t *)(AudioInCtx[0].pBuff))[(index*4U)+2U] = Channel_Demux[a & CHANNEL_DEMUX_MASK] |
 8007134:	f898 e102 	ldrb.w	lr, [r8, #258]	; 0x102
 8007138:	4427      	add	r7, r4
                (Channel_Demux[(b>>1) & CHANNEL_DEMUX_MASK] << 4);
 800713a:	0840      	lsrs	r0, r0, #1
              ((uint8_t *)(AudioInCtx[0].pBuff))[(index*4U)+3U] = Channel_Demux[(a>>1) & CHANNEL_DEMUX_MASK] |
 800713c:	0849      	lsrs	r1, r1, #1
            ((uint8_t *)(AudioInCtx[0].pBuff))[(index*4U)+2U] = Channel_Demux[a & CHANNEL_DEMUX_MASK] |
 800713e:	ea4e 1e09 	orr.w	lr, lr, r9, lsl #4
                (Channel_Demux[(b>>1) & CHANNEL_DEMUX_MASK] << 4);
 8007142:	f000 0055 	and.w	r0, r0, #85	; 0x55
              ((uint8_t *)(AudioInCtx[0].pBuff))[(index*4U)+3U] = Channel_Demux[(a>>1) & CHANNEL_DEMUX_MASK] |
 8007146:	f001 0155 	and.w	r1, r1, #85	; 0x55
            ((uint8_t *)(AudioInCtx[0].pBuff))[(index*4U)+2U] = Channel_Demux[a & CHANNEL_DEMUX_MASK] |
 800714a:	f887 e002 	strb.w	lr, [r7, #2]
                (Channel_Demux[(b>>1) & CHANNEL_DEMUX_MASK] << 4);
 800714e:	4410      	add	r0, r2
              ((uint8_t *)(AudioInCtx[0].pBuff))[(index*4U)+3U] = Channel_Demux[(a>>1) & CHANNEL_DEMUX_MASK] |
 8007150:	4411      	add	r1, r2
 8007152:	695f      	ldr	r7, [r3, #20]
                (Channel_Demux[(b>>1) & CHANNEL_DEMUX_MASK] << 4);
 8007154:	f890 0102 	ldrb.w	r0, [r0, #258]	; 0x102
              ((uint8_t *)(AudioInCtx[0].pBuff))[(index*4U)+3U] = Channel_Demux[(a>>1) & CHANNEL_DEMUX_MASK] |
 8007158:	f891 1102 	ldrb.w	r1, [r1, #258]	; 0x102
 800715c:	4427      	add	r7, r4
 800715e:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
 8007162:	70f9      	strb	r1, [r7, #3]
      for(index=0; index<(AudioInCtx[0].Size/2U); index++) 
 8007164:	f10c 0c01 	add.w	ip, ip, #1
 8007168:	3404      	adds	r4, #4
 800716a:	e7aa      	b.n	80070c2 <HAL_I2S_RxHalfCpltCallback+0x42>
          (Channel_Demux[b & CHANNEL_DEMUX_MASK] << 4);;
 800716c:	4d1b      	ldr	r5, [pc, #108]	; (80071dc <HAL_I2S_RxHalfCpltCallback+0x15c>)
 800716e:	f602 343c 	addw	r4, r2, #2876	; 0xb3c
      for(index=0; index<(AudioInCtx[0].Size/2U); index++) 
 8007172:	2000      	movs	r0, #0
 8007174:	69da      	ldr	r2, [r3, #28]
 8007176:	ebb0 0f52 	cmp.w	r0, r2, lsr #1
 800717a:	f104 0402 	add.w	r4, r4, #2
 800717e:	d294      	bcs.n	80070aa <HAL_I2S_RxHalfCpltCallback+0x2a>
        a = ((uint8_t *)(DataTempI2S))[(index*2U)];
 8007180:	f814 2c02 	ldrb.w	r2, [r4, #-2]
        b = ((uint8_t *)(DataTempI2S))[(index*2U)+1U];
 8007184:	f814 1c01 	ldrb.w	r1, [r4, #-1]
        ((uint8_t *)(AudioInCtx[0].pBuff))[(index*2U)] = Channel_Demux[a & CHANNEL_DEMUX_MASK] |
 8007188:	695f      	ldr	r7, [r3, #20]
          (Channel_Demux[b & CHANNEL_DEMUX_MASK] << 4);;
 800718a:	f001 0655 	and.w	r6, r1, #85	; 0x55
        ((uint8_t *)(AudioInCtx[0].pBuff))[(index*2U)] = Channel_Demux[a & CHANNEL_DEMUX_MASK] |
 800718e:	f002 0c55 	and.w	ip, r2, #85	; 0x55
          (Channel_Demux[b & CHANNEL_DEMUX_MASK] << 4);;
 8007192:	442e      	add	r6, r5
        ((uint8_t *)(AudioInCtx[0].pBuff))[(index*2U)] = Channel_Demux[a & CHANNEL_DEMUX_MASK] |
 8007194:	44ac      	add	ip, r5
          (Channel_Demux[b & CHANNEL_DEMUX_MASK] << 4);;
 8007196:	f896 e102 	ldrb.w	lr, [r6, #258]	; 0x102
        ((uint8_t *)(AudioInCtx[0].pBuff))[(index*2U)] = Channel_Demux[a & CHANNEL_DEMUX_MASK] |
 800719a:	f89c 6102 	ldrb.w	r6, [ip, #258]	; 0x102
            (Channel_Demux[(b>>1) & CHANNEL_DEMUX_MASK] << 4);
 800719e:	0849      	lsrs	r1, r1, #1
        ((uint8_t *)(AudioInCtx[0].pBuff))[(index*2U)] = Channel_Demux[a & CHANNEL_DEMUX_MASK] |
 80071a0:	ea46 160e 	orr.w	r6, r6, lr, lsl #4
          ((uint8_t *)(AudioInCtx[0].pBuff))[(index*2U)+1U] = Channel_Demux[(a>>1) & CHANNEL_DEMUX_MASK] |
 80071a4:	0852      	lsrs	r2, r2, #1
        ((uint8_t *)(AudioInCtx[0].pBuff))[(index*2U)] = Channel_Demux[a & CHANNEL_DEMUX_MASK] |
 80071a6:	f807 6010 	strb.w	r6, [r7, r0, lsl #1]
            (Channel_Demux[(b>>1) & CHANNEL_DEMUX_MASK] << 4);
 80071aa:	f001 0155 	and.w	r1, r1, #85	; 0x55
          ((uint8_t *)(AudioInCtx[0].pBuff))[(index*2U)+1U] = Channel_Demux[(a>>1) & CHANNEL_DEMUX_MASK] |
 80071ae:	f002 0255 	and.w	r2, r2, #85	; 0x55
            (Channel_Demux[(b>>1) & CHANNEL_DEMUX_MASK] << 4);
 80071b2:	4429      	add	r1, r5
          ((uint8_t *)(AudioInCtx[0].pBuff))[(index*2U)+1U] = Channel_Demux[(a>>1) & CHANNEL_DEMUX_MASK] |
 80071b4:	442a      	add	r2, r5
 80071b6:	695e      	ldr	r6, [r3, #20]
            (Channel_Demux[(b>>1) & CHANNEL_DEMUX_MASK] << 4);
 80071b8:	f891 1102 	ldrb.w	r1, [r1, #258]	; 0x102
          ((uint8_t *)(AudioInCtx[0].pBuff))[(index*2U)+1U] = Channel_Demux[(a>>1) & CHANNEL_DEMUX_MASK] |
 80071bc:	f892 2102 	ldrb.w	r2, [r2, #258]	; 0x102
 80071c0:	eb06 0640 	add.w	r6, r6, r0, lsl #1
 80071c4:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
 80071c8:	7072      	strb	r2, [r6, #1]
      for(index=0; index<(AudioInCtx[0].Size/2U); index++) 
 80071ca:	3001      	adds	r0, #1
 80071cc:	e7d2      	b.n	8007174 <HAL_I2S_RxHalfCpltCallback+0xf4>
        AudioInCtx[0].pBuff[index] = (DataTempI2S[index]);
 80071ce:	f830 2b02 	ldrh.w	r2, [r0], #2
 80071d2:	f821 2b02 	strh.w	r2, [r1], #2
      for(index = 0; index < (AudioInCtx[0].Size/4U); index++)
 80071d6:	e765      	b.n	80070a4 <HAL_I2S_RxHalfCpltCallback+0x24>
 80071d8:	20000a7c 	.word	0x20000a7c
 80071dc:	0801fa90 	.word	0x0801fa90

080071e0 <IKS01A3_ENV_SENSOR_Init>:
 *         - ENV_TEMPERATURE and/or ENV_PRESSURE for instance 1
 *         - ENV_TEMPERATURE for instance 2
 * @retval BSP status
 */
int32_t IKS01A3_ENV_SENSOR_Init(uint32_t Instance, uint32_t Functions)
{
 80071e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071e4:	460e      	mov	r6, r1
 80071e6:	b08d      	sub	sp, #52	; 0x34
  uint32_t function = ENV_TEMPERATURE;
  uint32_t i;
  uint32_t component_functions = 0;
  IKS01A3_ENV_SENSOR_Capabilities_t cap;

  switch (Instance)
 80071e8:	4607      	mov	r7, r0
 80071ea:	b130      	cbz	r0, 80071fa <IKS01A3_ENV_SENSOR_Init+0x1a>
 80071ec:	2801      	cmp	r0, #1
 80071ee:	d060      	beq.n	80072b2 <IKS01A3_ENV_SENSOR_Init+0xd2>
 80071f0:	f06f 0001 	mvn.w	r0, #1
    }
    function = function << 1;
  }

  return ret;
}
 80071f4:	b00d      	add	sp, #52	; 0x34
 80071f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  static HTS221_Object_t hts221_obj_0;
  HTS221_Capabilities_t  cap;

  /* Configure the environmental sensor driver */
  io_ctx.BusType     = HTS221_I2C_BUS; /* I2C */
  io_ctx.Address     = HTS221_I2C_ADDRESS;
 80071fa:	23bf      	movs	r3, #191	; 0xbf
 80071fc:	f88d 3020 	strb.w	r3, [sp, #32]
  io_ctx.Init        = IKS01A3_I2C_Init;
 8007200:	4b74      	ldr	r3, [pc, #464]	; (80073d4 <IKS01A3_ENV_SENSOR_Init+0x1f4>)
 8007202:	9305      	str	r3, [sp, #20]
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 8007204:	4b74      	ldr	r3, [pc, #464]	; (80073d8 <IKS01A3_ENV_SENSOR_Init+0x1f8>)
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
  io_ctx.GetTick     = IKS01A3_GetTick;

  if (HTS221_RegisterBusIO(&hts221_obj_0, &io_ctx) != HTS221_OK)
 8007206:	4c75      	ldr	r4, [pc, #468]	; (80073dc <IKS01A3_ENV_SENSOR_Init+0x1fc>)
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 8007208:	9306      	str	r3, [sp, #24]
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 800720a:	4b75      	ldr	r3, [pc, #468]	; (80073e0 <IKS01A3_ENV_SENSOR_Init+0x200>)
 800720c:	930a      	str	r3, [sp, #40]	; 0x28
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 800720e:	4b75      	ldr	r3, [pc, #468]	; (80073e4 <IKS01A3_ENV_SENSOR_Init+0x204>)
  io_ctx.BusType     = HTS221_I2C_BUS; /* I2C */
 8007210:	9007      	str	r0, [sp, #28]
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 8007212:	9309      	str	r3, [sp, #36]	; 0x24
  if (HTS221_RegisterBusIO(&hts221_obj_0, &io_ctx) != HTS221_OK)
 8007214:	a905      	add	r1, sp, #20
  io_ctx.GetTick     = IKS01A3_GetTick;
 8007216:	4b74      	ldr	r3, [pc, #464]	; (80073e8 <IKS01A3_ENV_SENSOR_Init+0x208>)
 8007218:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HTS221_RegisterBusIO(&hts221_obj_0, &io_ctx) != HTS221_OK)
 800721a:	4620      	mov	r0, r4
 800721c:	f7fe f920 	bl	8005460 <HTS221_RegisterBusIO>
 8007220:	2800      	cmp	r0, #0
 8007222:	d136      	bne.n	8007292 <IKS01A3_ENV_SENSOR_Init+0xb2>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
  }
  else if (HTS221_ReadID(&hts221_obj_0, &id) != HTS221_OK)
 8007224:	f10d 0103 	add.w	r1, sp, #3
 8007228:	4620      	mov	r0, r4
 800722a:	f7fd ffe7 	bl	80051fc <HTS221_ReadID>
 800722e:	2800      	cmp	r0, #0
 8007230:	d12f      	bne.n	8007292 <IKS01A3_ENV_SENSOR_Init+0xb2>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
  }
  else if (id != HTS221_ID)
 8007232:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8007236:	2bbc      	cmp	r3, #188	; 0xbc
 8007238:	d12b      	bne.n	8007292 <IKS01A3_ENV_SENSOR_Init+0xb2>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
  }
  else
  {
    (void)HTS221_GetCapabilities(&hts221_obj_0, &cap);
 800723a:	a901      	add	r1, sp, #4
 800723c:	4620      	mov	r0, r4
 800723e:	f7fd ff65 	bl	800510c <HTS221_GetCapabilities>
    EnvCtx[IKS01A3_HTS221_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 8007242:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8007246:	f89d 1005 	ldrb.w	r1, [sp, #5]
 800724a:	f89d 2004 	ldrb.w	r2, [sp, #4]
                                           uint32_t)cap.Humidity << 2);

    EnvCompObj[IKS01A3_HTS221_0] = &hts221_obj_0;
 800724e:	4d67      	ldr	r5, [pc, #412]	; (80073ec <IKS01A3_ENV_SENSOR_Init+0x20c>)
                                           uint32_t)cap.Humidity << 2);
 8007250:	009b      	lsls	r3, r3, #2
    EnvCtx[IKS01A3_HTS221_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 8007252:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 8007256:	4313      	orrs	r3, r2
 8007258:	62e3      	str	r3, [r4, #44]	; 0x2c
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    EnvDrv[IKS01A3_HTS221_0] = (ENV_SENSOR_CommonDrv_t *)(void *)&HTS221_COMMON_Driver;

    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_TEMPERATURE) == ENV_TEMPERATURE) && (cap.Temperature == 1U))
 800725a:	07f1      	lsls	r1, r6, #31
    EnvDrv[IKS01A3_HTS221_0] = (ENV_SENSOR_CommonDrv_t *)(void *)&HTS221_COMMON_Driver;
 800725c:	4b64      	ldr	r3, [pc, #400]	; (80073f0 <IKS01A3_ENV_SENSOR_Init+0x210>)
    EnvCompObj[IKS01A3_HTS221_0] = &hts221_obj_0;
 800725e:	602c      	str	r4, [r5, #0]
    EnvDrv[IKS01A3_HTS221_0] = (ENV_SENSOR_CommonDrv_t *)(void *)&HTS221_COMMON_Driver;
 8007260:	6363      	str	r3, [r4, #52]	; 0x34
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_TEMPERATURE) == ENV_TEMPERATURE) && (cap.Temperature == 1U))
 8007262:	d40d      	bmi.n	8007280 <IKS01A3_ENV_SENSOR_Init+0xa0>
      else
      {
        ret = BSP_ERROR_NONE;
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_HUMIDITY) == ENV_HUMIDITY) && (cap.Humidity == 1U))
 8007264:	0772      	lsls	r2, r6, #29
 8007266:	d417      	bmi.n	8007298 <IKS01A3_ENV_SENSOR_Init+0xb8>
      else
      {
        ret = BSP_ERROR_NONE;
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_PRESSURE) == ENV_PRESSURE))
 8007268:	07b3      	lsls	r3, r6, #30
 800726a:	d412      	bmi.n	8007292 <IKS01A3_ENV_SENSOR_Init+0xb2>
      if (EnvDrv[Instance]->GetCapabilities(EnvCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 800726c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800726e:	6828      	ldr	r0, [r5, #0]
 8007270:	68db      	ldr	r3, [r3, #12]
 8007272:	a905      	add	r1, sp, #20
 8007274:	4798      	blx	r3
 8007276:	2800      	cmp	r0, #0
 8007278:	d074      	beq.n	8007364 <IKS01A3_ENV_SENSOR_Init+0x184>
        return BSP_ERROR_UNKNOWN_COMPONENT;
 800727a:	f06f 0006 	mvn.w	r0, #6
 800727e:	e7b9      	b.n	80071f4 <IKS01A3_ENV_SENSOR_Init+0x14>
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_TEMPERATURE) == ENV_TEMPERATURE) && (cap.Temperature == 1U))
 8007280:	2a01      	cmp	r2, #1
 8007282:	d1ef      	bne.n	8007264 <IKS01A3_ENV_SENSOR_Init+0x84>
      EnvFuncDrv[IKS01A3_HTS221_0][FunctionIndex[ENV_TEMPERATURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&HTS221_TEMP_Driver;
 8007284:	4a5b      	ldr	r2, [pc, #364]	; (80073f4 <IKS01A3_ENV_SENSOR_Init+0x214>)
      if (EnvDrv[IKS01A3_HTS221_0]->Init(EnvCompObj[IKS01A3_HTS221_0]) != HTS221_OK)
 8007286:	681b      	ldr	r3, [r3, #0]
      EnvFuncDrv[IKS01A3_HTS221_0][FunctionIndex[ENV_TEMPERATURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&HTS221_TEMP_Driver;
 8007288:	63e2      	str	r2, [r4, #60]	; 0x3c
      if (EnvDrv[IKS01A3_HTS221_0]->Init(EnvCompObj[IKS01A3_HTS221_0]) != HTS221_OK)
 800728a:	4620      	mov	r0, r4
 800728c:	4798      	blx	r3
 800728e:	2800      	cmp	r0, #0
 8007290:	d0e8      	beq.n	8007264 <IKS01A3_ENV_SENSOR_Init+0x84>
        return BSP_ERROR_NO_INIT;
 8007292:	f04f 30ff 	mov.w	r0, #4294967295
 8007296:	e7ad      	b.n	80071f4 <IKS01A3_ENV_SENSOR_Init+0x14>
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_HUMIDITY) == ENV_HUMIDITY) && (cap.Humidity == 1U))
 8007298:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800729c:	2b01      	cmp	r3, #1
 800729e:	d1e3      	bne.n	8007268 <IKS01A3_ENV_SENSOR_Init+0x88>
      EnvFuncDrv[IKS01A3_HTS221_0][FunctionIndex[ENV_HUMIDITY]] = (ENV_SENSOR_FuncDrv_t *)(void *)&HTS221_HUM_Driver;
 80072a0:	4b55      	ldr	r3, [pc, #340]	; (80073f8 <IKS01A3_ENV_SENSOR_Init+0x218>)
 80072a2:	6463      	str	r3, [r4, #68]	; 0x44
      if (EnvDrv[IKS01A3_HTS221_0]->Init(EnvCompObj[IKS01A3_HTS221_0]) != HTS221_OK)
 80072a4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80072a6:	6828      	ldr	r0, [r5, #0]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	4798      	blx	r3
 80072ac:	2800      	cmp	r0, #0
 80072ae:	d0db      	beq.n	8007268 <IKS01A3_ENV_SENSOR_Init+0x88>
 80072b0:	e7ef      	b.n	8007292 <IKS01A3_ENV_SENSOR_Init+0xb2>
  int32_t                 ret = BSP_ERROR_NONE;
  static LPS22HH_Object_t lps22hh_obj_0;
  LPS22HH_Capabilities_t  cap;

  /* Configure the pressure driver */
  io_ctx.BusType     = LPS22HH_I2C_BUS; /* I2C */
 80072b2:	2300      	movs	r3, #0
 80072b4:	9307      	str	r3, [sp, #28]
  io_ctx.Address     = LPS22HH_I2C_ADD_H;
 80072b6:	23bb      	movs	r3, #187	; 0xbb
 80072b8:	f88d 3020 	strb.w	r3, [sp, #32]
  io_ctx.Init        = IKS01A3_I2C_Init;
 80072bc:	4b45      	ldr	r3, [pc, #276]	; (80073d4 <IKS01A3_ENV_SENSOR_Init+0x1f4>)
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
  io_ctx.GetTick     = IKS01A3_GetTick;

  if (LPS22HH_RegisterBusIO(&lps22hh_obj_0, &io_ctx) != LPS22HH_OK)
 80072be:	4c47      	ldr	r4, [pc, #284]	; (80073dc <IKS01A3_ENV_SENSOR_Init+0x1fc>)
  io_ctx.Init        = IKS01A3_I2C_Init;
 80072c0:	9305      	str	r3, [sp, #20]
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 80072c2:	4b45      	ldr	r3, [pc, #276]	; (80073d8 <IKS01A3_ENV_SENSOR_Init+0x1f8>)
 80072c4:	9306      	str	r3, [sp, #24]
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 80072c6:	4b46      	ldr	r3, [pc, #280]	; (80073e0 <IKS01A3_ENV_SENSOR_Init+0x200>)
 80072c8:	930a      	str	r3, [sp, #40]	; 0x28
  if (LPS22HH_RegisterBusIO(&lps22hh_obj_0, &io_ctx) != LPS22HH_OK)
 80072ca:	f104 0854 	add.w	r8, r4, #84	; 0x54
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 80072ce:	4b45      	ldr	r3, [pc, #276]	; (80073e4 <IKS01A3_ENV_SENSOR_Init+0x204>)
 80072d0:	9309      	str	r3, [sp, #36]	; 0x24
  if (LPS22HH_RegisterBusIO(&lps22hh_obj_0, &io_ctx) != LPS22HH_OK)
 80072d2:	a905      	add	r1, sp, #20
  io_ctx.GetTick     = IKS01A3_GetTick;
 80072d4:	4b44      	ldr	r3, [pc, #272]	; (80073e8 <IKS01A3_ENV_SENSOR_Init+0x208>)
 80072d6:	930b      	str	r3, [sp, #44]	; 0x2c
  if (LPS22HH_RegisterBusIO(&lps22hh_obj_0, &io_ctx) != LPS22HH_OK)
 80072d8:	4640      	mov	r0, r8
 80072da:	f7fe fe49 	bl	8005f70 <LPS22HH_RegisterBusIO>
 80072de:	2800      	cmp	r0, #0
 80072e0:	d1d7      	bne.n	8007292 <IKS01A3_ENV_SENSOR_Init+0xb2>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
  }
  else if (LPS22HH_ReadID(&lps22hh_obj_0, &id) != LPS22HH_OK)
 80072e2:	f10d 0103 	add.w	r1, sp, #3
 80072e6:	4640      	mov	r0, r8
 80072e8:	f7fe fca3 	bl	8005c32 <LPS22HH_ReadID>
 80072ec:	2800      	cmp	r0, #0
 80072ee:	d1d0      	bne.n	8007292 <IKS01A3_ENV_SENSOR_Init+0xb2>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
  }
  else if (id != LPS22HH_ID)
 80072f0:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80072f4:	2bb3      	cmp	r3, #179	; 0xb3
 80072f6:	d1cc      	bne.n	8007292 <IKS01A3_ENV_SENSOR_Init+0xb2>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
  }
  else
  {
    (void)LPS22HH_GetCapabilities(&lps22hh_obj_0, &cap);
 80072f8:	a901      	add	r1, sp, #4
 80072fa:	4640      	mov	r0, r8
 80072fc:	f7fe fc50 	bl	8005ba0 <LPS22HH_GetCapabilities>

    EnvCtx[IKS01A3_LPS22HH_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 8007300:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8007304:	f89d 1005 	ldrb.w	r1, [sp, #5]
 8007308:	f89d 2004 	ldrb.w	r2, [sp, #4]
                                            uint32_t)cap.Humidity << 2);

    EnvCompObj[IKS01A3_LPS22HH_0] = &lps22hh_obj_0;
 800730c:	4d37      	ldr	r5, [pc, #220]	; (80073ec <IKS01A3_ENV_SENSOR_Init+0x20c>)
                                            uint32_t)cap.Humidity << 2);
 800730e:	009b      	lsls	r3, r3, #2
    EnvCtx[IKS01A3_LPS22HH_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 8007310:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 8007314:	4313      	orrs	r3, r2
 8007316:	6323      	str	r3, [r4, #48]	; 0x30
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    EnvDrv[IKS01A3_LPS22HH_0] = (ENV_SENSOR_CommonDrv_t *)(void *)&LPS22HH_COMMON_Driver;

    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_TEMPERATURE) == ENV_TEMPERATURE) && (cap.Temperature == 1U))
 8007318:	07f0      	lsls	r0, r6, #31
    EnvDrv[IKS01A3_LPS22HH_0] = (ENV_SENSOR_CommonDrv_t *)(void *)&LPS22HH_COMMON_Driver;
 800731a:	4b38      	ldr	r3, [pc, #224]	; (80073fc <IKS01A3_ENV_SENSOR_Init+0x21c>)
    EnvCompObj[IKS01A3_LPS22HH_0] = &lps22hh_obj_0;
 800731c:	f8c5 8004 	str.w	r8, [r5, #4]
    EnvDrv[IKS01A3_LPS22HH_0] = (ENV_SENSOR_CommonDrv_t *)(void *)&LPS22HH_COMMON_Driver;
 8007320:	63a3      	str	r3, [r4, #56]	; 0x38
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_TEMPERATURE) == ENV_TEMPERATURE) && (cap.Temperature == 1U))
 8007322:	d408      	bmi.n	8007336 <IKS01A3_ENV_SENSOR_Init+0x156>
      else
      {
        ret = BSP_ERROR_NONE;
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_PRESSURE) == ENV_PRESSURE) && (cap.Pressure == 1U))
 8007324:	07b1      	lsls	r1, r6, #30
 8007326:	d410      	bmi.n	800734a <IKS01A3_ENV_SENSOR_Init+0x16a>
      else
      {
        ret = BSP_ERROR_NONE;
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_HUMIDITY) == ENV_HUMIDITY))
 8007328:	0772      	lsls	r2, r6, #29
 800732a:	d4b2      	bmi.n	8007292 <IKS01A3_ENV_SENSOR_Init+0xb2>
      if (EnvDrv[Instance]->GetCapabilities(EnvCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 800732c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800732e:	6868      	ldr	r0, [r5, #4]
 8007330:	68db      	ldr	r3, [r3, #12]
 8007332:	a905      	add	r1, sp, #20
 8007334:	e79e      	b.n	8007274 <IKS01A3_ENV_SENSOR_Init+0x94>
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_TEMPERATURE) == ENV_TEMPERATURE) && (cap.Temperature == 1U))
 8007336:	2a01      	cmp	r2, #1
 8007338:	d1f4      	bne.n	8007324 <IKS01A3_ENV_SENSOR_Init+0x144>
      EnvFuncDrv[IKS01A3_LPS22HH_0][FunctionIndex[ENV_TEMPERATURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&LPS22HH_TEMP_Driver;
 800733a:	4a31      	ldr	r2, [pc, #196]	; (8007400 <IKS01A3_ENV_SENSOR_Init+0x220>)
      if (EnvDrv[IKS01A3_LPS22HH_0]->Init(EnvCompObj[IKS01A3_LPS22HH_0]) != LPS22HH_OK)
 800733c:	681b      	ldr	r3, [r3, #0]
      EnvFuncDrv[IKS01A3_LPS22HH_0][FunctionIndex[ENV_TEMPERATURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&LPS22HH_TEMP_Driver;
 800733e:	64a2      	str	r2, [r4, #72]	; 0x48
      if (EnvDrv[IKS01A3_LPS22HH_0]->Init(EnvCompObj[IKS01A3_LPS22HH_0]) != LPS22HH_OK)
 8007340:	4640      	mov	r0, r8
 8007342:	4798      	blx	r3
 8007344:	2800      	cmp	r0, #0
 8007346:	d1a4      	bne.n	8007292 <IKS01A3_ENV_SENSOR_Init+0xb2>
 8007348:	e7ec      	b.n	8007324 <IKS01A3_ENV_SENSOR_Init+0x144>
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_PRESSURE) == ENV_PRESSURE) && (cap.Pressure == 1U))
 800734a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800734e:	2b01      	cmp	r3, #1
 8007350:	d1ea      	bne.n	8007328 <IKS01A3_ENV_SENSOR_Init+0x148>
      EnvFuncDrv[IKS01A3_LPS22HH_0][FunctionIndex[ENV_PRESSURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&LPS22HH_PRESS_Driver;
 8007352:	4b2c      	ldr	r3, [pc, #176]	; (8007404 <IKS01A3_ENV_SENSOR_Init+0x224>)
 8007354:	64e3      	str	r3, [r4, #76]	; 0x4c
      if (EnvDrv[IKS01A3_LPS22HH_0]->Init(EnvCompObj[IKS01A3_LPS22HH_0]) != LPS22HH_OK)
 8007356:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007358:	6868      	ldr	r0, [r5, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	4798      	blx	r3
 800735e:	2800      	cmp	r0, #0
 8007360:	d0e2      	beq.n	8007328 <IKS01A3_ENV_SENSOR_Init+0x148>
 8007362:	e796      	b.n	8007292 <IKS01A3_ENV_SENSOR_Init+0xb2>
      if (cap.Temperature == 1U)
 8007364:	f89d 4014 	ldrb.w	r4, [sp, #20]
 8007368:	1e63      	subs	r3, r4, #1
 800736a:	425c      	negs	r4, r3
 800736c:	415c      	adcs	r4, r3
      if (cap.Humidity == 1U)
 800736e:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8007372:	2b01      	cmp	r3, #1
      if (cap.Pressure == 1U)
 8007374:	f89d 3015 	ldrb.w	r3, [sp, #21]
        component_functions |= ENV_HUMIDITY;
 8007378:	bf08      	it	eq
 800737a:	f044 0404 	orreq.w	r4, r4, #4
      if (cap.Pressure == 1U)
 800737e:	2b01      	cmp	r3, #1
 8007380:	d101      	bne.n	8007386 <IKS01A3_ENV_SENSOR_Init+0x1a6>
        component_functions |= ENV_PRESSURE;
 8007382:	f044 0402 	orr.w	r4, r4, #2
      if (EnvFuncDrv[Instance][FunctionIndex[function]]->Enable(EnvCompObj[Instance]) != BSP_ERROR_NONE)
 8007386:	f8df b064 	ldr.w	fp, [pc, #100]	; 80073ec <IKS01A3_ENV_SENSOR_Init+0x20c>
 800738a:	f8df a050 	ldr.w	sl, [pc, #80]	; 80073dc <IKS01A3_ENV_SENSOR_Init+0x1fc>
 800738e:	f8df 9078 	ldr.w	r9, [pc, #120]	; 8007408 <IKS01A3_ENV_SENSOR_Init+0x228>
{
 8007392:	2503      	movs	r5, #3
 8007394:	f04f 0801 	mov.w	r8, #1
    if (((Functions & function) == function) && ((component_functions & function) == function))
 8007398:	ea38 0306 	bics.w	r3, r8, r6
 800739c:	d005      	beq.n	80073aa <IKS01A3_ENV_SENSOR_Init+0x1ca>
  for (i = 0; i < IKS01A3_ENV_FUNCTIONS_NBR; i++)
 800739e:	3d01      	subs	r5, #1
    function = function << 1;
 80073a0:	ea4f 0848 	mov.w	r8, r8, lsl #1
  for (i = 0; i < IKS01A3_ENV_FUNCTIONS_NBR; i++)
 80073a4:	d1f8      	bne.n	8007398 <IKS01A3_ENV_SENSOR_Init+0x1b8>
 80073a6:	4628      	mov	r0, r5
 80073a8:	e724      	b.n	80071f4 <IKS01A3_ENV_SENSOR_Init+0x14>
    if (((Functions & function) == function) && ((component_functions & function) == function))
 80073aa:	ea38 0304 	bics.w	r3, r8, r4
 80073ae:	d1f6      	bne.n	800739e <IKS01A3_ENV_SENSOR_Init+0x1be>
      if (EnvFuncDrv[Instance][FunctionIndex[function]]->Enable(EnvCompObj[Instance]) != BSP_ERROR_NONE)
 80073b0:	f859 2028 	ldr.w	r2, [r9, r8, lsl #2]
 80073b4:	f85b 0027 	ldr.w	r0, [fp, r7, lsl #2]
 80073b8:	eb07 0347 	add.w	r3, r7, r7, lsl #1
 80073bc:	4413      	add	r3, r2
 80073be:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
 80073c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	4798      	blx	r3
 80073c8:	2800      	cmp	r0, #0
 80073ca:	d0e8      	beq.n	800739e <IKS01A3_ENV_SENSOR_Init+0x1be>
        return BSP_ERROR_COMPONENT_FAILURE;
 80073cc:	f06f 0004 	mvn.w	r0, #4
 80073d0:	e710      	b.n	80071f4 <IKS01A3_ENV_SENSOR_Init+0x14>
 80073d2:	bf00      	nop
 80073d4:	08014df1 	.word	0x08014df1
 80073d8:	08014c09 	.word	0x08014c09
 80073dc:	20001bd0 	.word	0x20001bd0
 80073e0:	08014c85 	.word	0x08014c85
 80073e4:	08014c51 	.word	0x08014c51
 80073e8:	08014cb9 	.word	0x08014cb9
 80073ec:	20009960 	.word	0x20009960
 80073f0:	20000028 	.word	0x20000028
 80073f4:	20000000 	.word	0x20000000
 80073f8:	20000014 	.word	0x20000014
 80073fc:	20000094 	.word	0x20000094
 8007400:	2000006c 	.word	0x2000006c
 8007404:	20000080 	.word	0x20000080
 8007408:	0801fc14 	.word	0x0801fc14

0800740c <IKS01A3_ENV_SENSOR_Enable>:
  if (Instance >= IKS01A3_ENV_INSTANCES_NBR)
 800740c:	2801      	cmp	r0, #1
{
 800740e:	b510      	push	{r4, lr}
  if (Instance >= IKS01A3_ENV_INSTANCES_NBR)
 8007410:	d81b      	bhi.n	800744a <IKS01A3_ENV_SENSOR_Enable+0x3e>
    if ((EnvCtx[Instance].Functions & Function) == Function)
 8007412:	4b0f      	ldr	r3, [pc, #60]	; (8007450 <IKS01A3_ENV_SENSOR_Enable+0x44>)
 8007414:	eb03 0280 	add.w	r2, r3, r0, lsl #2
 8007418:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800741a:	ea01 0402 	and.w	r4, r1, r2
 800741e:	ea31 0202 	bics.w	r2, r1, r2
 8007422:	d112      	bne.n	800744a <IKS01A3_ENV_SENSOR_Enable+0x3e>
      if (EnvFuncDrv[Instance][FunctionIndex[Function]]->Enable(EnvCompObj[Instance]) != BSP_ERROR_NONE)
 8007424:	490b      	ldr	r1, [pc, #44]	; (8007454 <IKS01A3_ENV_SENSOR_Enable+0x48>)
 8007426:	f851 1024 	ldr.w	r1, [r1, r4, lsl #2]
 800742a:	eb00 0240 	add.w	r2, r0, r0, lsl #1
 800742e:	440a      	add	r2, r1
 8007430:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8007434:	4a08      	ldr	r2, [pc, #32]	; (8007458 <IKS01A3_ENV_SENSOR_Enable+0x4c>)
 8007436:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007438:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	4798      	blx	r3
 8007440:	2800      	cmp	r0, #0
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8007442:	bf18      	it	ne
 8007444:	f06f 0004 	mvnne.w	r0, #4
}
 8007448:	bd10      	pop	{r4, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 800744a:	f06f 0001 	mvn.w	r0, #1
 800744e:	e7fb      	b.n	8007448 <IKS01A3_ENV_SENSOR_Enable+0x3c>
 8007450:	20001bd0 	.word	0x20001bd0
 8007454:	0801fc14 	.word	0x0801fc14
 8007458:	20009960 	.word	0x20009960

0800745c <IKS01A3_ENV_SENSOR_GetValue>:
  if (Instance >= IKS01A3_ENV_INSTANCES_NBR)
 800745c:	2801      	cmp	r0, #1
{
 800745e:	b538      	push	{r3, r4, r5, lr}
 8007460:	460c      	mov	r4, r1
 8007462:	4611      	mov	r1, r2
  if (Instance >= IKS01A3_ENV_INSTANCES_NBR)
 8007464:	d81b      	bhi.n	800749e <IKS01A3_ENV_SENSOR_GetValue+0x42>
    if ((EnvCtx[Instance].Functions & Function) == Function)
 8007466:	4b0f      	ldr	r3, [pc, #60]	; (80074a4 <IKS01A3_ENV_SENSOR_GetValue+0x48>)
 8007468:	eb03 0280 	add.w	r2, r3, r0, lsl #2
 800746c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800746e:	ea04 0502 	and.w	r5, r4, r2
 8007472:	ea34 0202 	bics.w	r2, r4, r2
 8007476:	d112      	bne.n	800749e <IKS01A3_ENV_SENSOR_GetValue+0x42>
      if (EnvFuncDrv[Instance][FunctionIndex[Function]]->GetValue(EnvCompObj[Instance], Value) != BSP_ERROR_NONE)
 8007478:	4c0b      	ldr	r4, [pc, #44]	; (80074a8 <IKS01A3_ENV_SENSOR_GetValue+0x4c>)
 800747a:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
 800747e:	eb00 0240 	add.w	r2, r0, r0, lsl #1
 8007482:	4422      	add	r2, r4
 8007484:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8007488:	4a08      	ldr	r2, [pc, #32]	; (80074ac <IKS01A3_ENV_SENSOR_GetValue+0x50>)
 800748a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800748c:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 8007490:	691b      	ldr	r3, [r3, #16]
 8007492:	4798      	blx	r3
 8007494:	2800      	cmp	r0, #0
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8007496:	bf18      	it	ne
 8007498:	f06f 0004 	mvnne.w	r0, #4
}
 800749c:	bd38      	pop	{r3, r4, r5, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 800749e:	f06f 0001 	mvn.w	r0, #1
 80074a2:	e7fb      	b.n	800749c <IKS01A3_ENV_SENSOR_GetValue+0x40>
 80074a4:	20001bd0 	.word	0x20001bd0
 80074a8:	0801fc14 	.word	0x0801fc14
 80074ac:	20009960 	.word	0x20009960

080074b0 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80074b0:	490e      	ldr	r1, [pc, #56]	; (80074ec <SystemInit+0x3c>)
 80074b2:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80074b6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80074ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80074be:	4b0c      	ldr	r3, [pc, #48]	; (80074f0 <SystemInit+0x40>)
 80074c0:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80074c2:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 80074c4:	f042 0201 	orr.w	r2, r2, #1
 80074c8:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 80074ca:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80074cc:	681a      	ldr	r2, [r3, #0]
 80074ce:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80074d2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80074d6:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80074d8:	4a06      	ldr	r2, [pc, #24]	; (80074f4 <SystemInit+0x44>)
 80074da:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80074dc:	681a      	ldr	r2, [r3, #0]
 80074de:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80074e2:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80074e4:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80074e6:	4b04      	ldr	r3, [pc, #16]	; (80074f8 <SystemInit+0x48>)
 80074e8:	608b      	str	r3, [r1, #8]
#endif
}
 80074ea:	4770      	bx	lr
 80074ec:	e000ed00 	.word	0xe000ed00
 80074f0:	40023800 	.word	0x40023800
 80074f4:	24003010 	.word	0x24003010
 80074f8:	08004000 	.word	0x08004000

080074fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80074fc:	b570      	push	{r4, r5, r6, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80074fe:	4a0e      	ldr	r2, [pc, #56]	; (8007538 <HAL_InitTick+0x3c>)
 8007500:	4e0e      	ldr	r6, [pc, #56]	; (800753c <HAL_InitTick+0x40>)
{
 8007502:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8007504:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007508:	7830      	ldrb	r0, [r6, #0]
 800750a:	fbb3 f3f0 	udiv	r3, r3, r0
 800750e:	6810      	ldr	r0, [r2, #0]
 8007510:	fbb0 f0f3 	udiv	r0, r0, r3
 8007514:	f000 f8bc 	bl	8007690 <HAL_SYSTICK_Config>
 8007518:	4604      	mov	r4, r0
 800751a:	b950      	cbnz	r0, 8007532 <HAL_InitTick+0x36>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800751c:	2d0f      	cmp	r5, #15
 800751e:	d808      	bhi.n	8007532 <HAL_InitTick+0x36>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8007520:	4602      	mov	r2, r0
 8007522:	4629      	mov	r1, r5
 8007524:	f04f 30ff 	mov.w	r0, #4294967295
 8007528:	f000 f84c 	bl	80075c4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800752c:	6075      	str	r5, [r6, #4]
 800752e:	4620      	mov	r0, r4
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8007530:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8007532:	2001      	movs	r0, #1
 8007534:	e7fc      	b.n	8007530 <HAL_InitTick+0x34>
 8007536:	bf00      	nop
 8007538:	200000c4 	.word	0x200000c4
 800753c:	200000c8 	.word	0x200000c8

08007540 <HAL_Init>:
{
 8007540:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8007542:	4b0b      	ldr	r3, [pc, #44]	; (8007570 <HAL_Init+0x30>)
 8007544:	681a      	ldr	r2, [r3, #0]
 8007546:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800754a:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800754c:	681a      	ldr	r2, [r3, #0]
 800754e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007552:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8007554:	681a      	ldr	r2, [r3, #0]
 8007556:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800755a:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800755c:	2003      	movs	r0, #3
 800755e:	f000 f81f 	bl	80075a0 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8007562:	200d      	movs	r0, #13
 8007564:	f7ff ffca 	bl	80074fc <HAL_InitTick>
  HAL_MspInit();
 8007568:	f00d f9b4 	bl	80148d4 <HAL_MspInit>
}
 800756c:	2000      	movs	r0, #0
 800756e:	bd08      	pop	{r3, pc}
 8007570:	40023c00 	.word	0x40023c00

08007574 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8007574:	4a03      	ldr	r2, [pc, #12]	; (8007584 <HAL_IncTick+0x10>)
 8007576:	4b04      	ldr	r3, [pc, #16]	; (8007588 <HAL_IncTick+0x14>)
 8007578:	6811      	ldr	r1, [r2, #0]
 800757a:	781b      	ldrb	r3, [r3, #0]
 800757c:	440b      	add	r3, r1
 800757e:	6013      	str	r3, [r2, #0]
}
 8007580:	4770      	bx	lr
 8007582:	bf00      	nop
 8007584:	20009968 	.word	0x20009968
 8007588:	200000c8 	.word	0x200000c8

0800758c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800758c:	4b01      	ldr	r3, [pc, #4]	; (8007594 <HAL_GetTick+0x8>)
 800758e:	6818      	ldr	r0, [r3, #0]
}
 8007590:	4770      	bx	lr
 8007592:	bf00      	nop
 8007594:	20009968 	.word	0x20009968

08007598 <HAL_GetHalVersion>:
  * @retval version : 0xXYZR (8bits for each decimal, R for RC)
  */
uint32_t HAL_GetHalVersion(void)
{
  return __STM32F4xx_HAL_VERSION;
}
 8007598:	4800      	ldr	r0, [pc, #0]	; (800759c <HAL_GetHalVersion+0x4>)
 800759a:	4770      	bx	lr
 800759c:	01070b00 	.word	0x01070b00

080075a0 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80075a0:	4907      	ldr	r1, [pc, #28]	; (80075c0 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80075a2:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80075a4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80075a8:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80075aa:	0412      	lsls	r2, r2, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80075ac:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80075b0:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80075b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80075b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80075b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80075bc:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80075be:	4770      	bx	lr
 80075c0:	e000ed00 	.word	0xe000ed00

080075c4 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80075c4:	4b16      	ldr	r3, [pc, #88]	; (8007620 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80075c6:	b530      	push	{r4, r5, lr}
 80075c8:	68dc      	ldr	r4, [r3, #12]
 80075ca:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80075ce:	f1c4 0507 	rsb	r5, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80075d2:	1d23      	adds	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80075d4:	2d04      	cmp	r5, #4
 80075d6:	bf28      	it	cs
 80075d8:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80075da:	2b06      	cmp	r3, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80075dc:	f04f 33ff 	mov.w	r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80075e0:	bf8c      	ite	hi
 80075e2:	3c03      	subhi	r4, #3
 80075e4:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80075e6:	fa03 f505 	lsl.w	r5, r3, r5
 80075ea:	ea21 0105 	bic.w	r1, r1, r5
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80075ee:	40a3      	lsls	r3, r4
 80075f0:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80075f4:	40a1      	lsls	r1, r4
  if ((int32_t)(IRQn) >= 0)
 80075f6:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80075f8:	ea41 0302 	orr.w	r3, r1, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80075fc:	bfac      	ite	ge
 80075fe:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007602:	4a08      	ldrlt	r2, [pc, #32]	; (8007624 <HAL_NVIC_SetPriority+0x60>)
 8007604:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8007608:	bfb8      	it	lt
 800760a:	f000 000f 	andlt.w	r0, r0, #15
 800760e:	b2db      	uxtb	r3, r3
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007610:	bfaa      	itet	ge
 8007612:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007616:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007618:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800761c:	bd30      	pop	{r4, r5, pc}
 800761e:	bf00      	nop
 8007620:	e000ed00 	.word	0xe000ed00
 8007624:	e000ed14 	.word	0xe000ed14

08007628 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8007628:	2800      	cmp	r0, #0
 800762a:	db08      	blt.n	800763e <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800762c:	0942      	lsrs	r2, r0, #5
 800762e:	2301      	movs	r3, #1
 8007630:	f000 001f 	and.w	r0, r0, #31
 8007634:	fa03 f000 	lsl.w	r0, r3, r0
 8007638:	4b01      	ldr	r3, [pc, #4]	; (8007640 <HAL_NVIC_EnableIRQ+0x18>)
 800763a:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800763e:	4770      	bx	lr
 8007640:	e000e100 	.word	0xe000e100

08007644 <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8007644:	2800      	cmp	r0, #0
 8007646:	db0d      	blt.n	8007664 <HAL_NVIC_DisableIRQ+0x20>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007648:	0943      	lsrs	r3, r0, #5
 800764a:	2201      	movs	r2, #1
 800764c:	f000 001f 	and.w	r0, r0, #31
 8007650:	fa02 f000 	lsl.w	r0, r2, r0
 8007654:	3320      	adds	r3, #32
 8007656:	4a04      	ldr	r2, [pc, #16]	; (8007668 <HAL_NVIC_DisableIRQ+0x24>)
 8007658:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800765c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8007660:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 8007664:	4770      	bx	lr
 8007666:	bf00      	nop
 8007668:	e000e100 	.word	0xe000e100

0800766c <HAL_NVIC_SystemReset>:
  __ASM volatile ("dsb 0xF":::"memory");
 800766c:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8007670:	4905      	ldr	r1, [pc, #20]	; (8007688 <HAL_NVIC_SystemReset+0x1c>)
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8007672:	4b06      	ldr	r3, [pc, #24]	; (800768c <HAL_NVIC_SystemReset+0x20>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8007674:	68ca      	ldr	r2, [r1, #12]
 8007676:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800767a:	4313      	orrs	r3, r2
 800767c:	60cb      	str	r3, [r1, #12]
 800767e:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8007682:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 8007684:	e7fd      	b.n	8007682 <HAL_NVIC_SystemReset+0x16>
 8007686:	bf00      	nop
 8007688:	e000ed00 	.word	0xe000ed00
 800768c:	05fa0004 	.word	0x05fa0004

08007690 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007690:	3801      	subs	r0, #1
 8007692:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8007696:	d20a      	bcs.n	80076ae <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007698:	4b06      	ldr	r3, [pc, #24]	; (80076b4 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800769a:	4a07      	ldr	r2, [pc, #28]	; (80076b8 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800769c:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800769e:	21f0      	movs	r1, #240	; 0xf0
 80076a0:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80076a4:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80076a6:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80076a8:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80076aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80076ac:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80076ae:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80076b0:	4770      	bx	lr
 80076b2:	bf00      	nop
 80076b4:	e000e010 	.word	0xe000e010
 80076b8:	e000ed00 	.word	0xe000ed00

080076bc <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80076bc:	b510      	push	{r4, lr}
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80076be:	4604      	mov	r4, r0
 80076c0:	b150      	cbz	r0, 80076d8 <HAL_CRC_Init+0x1c>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80076c2:	7943      	ldrb	r3, [r0, #5]
 80076c4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80076c8:	b913      	cbnz	r3, 80076d0 <HAL_CRC_Init+0x14>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80076ca:	7102      	strb	r2, [r0, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80076cc:	f00d f920 	bl	8014910 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80076d0:	2301      	movs	r3, #1
 80076d2:	7163      	strb	r3, [r4, #5]

  /* Return function status */
  return HAL_OK;
 80076d4:	2000      	movs	r0, #0
}
 80076d6:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80076d8:	2001      	movs	r0, #1
 80076da:	e7fc      	b.n	80076d6 <HAL_CRC_Init+0x1a>

080076dc <HAL_CRC_DeInit>:
  * @brief  DeInitialize the CRC peripheral.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_DeInit(CRC_HandleTypeDef *hcrc)
{
 80076dc:	b538      	push	{r3, r4, r5, lr}
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80076de:	4605      	mov	r5, r0
 80076e0:	b198      	cbz	r0, 800770a <HAL_CRC_DeInit+0x2e>

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  /* Check the CRC peripheral state */
  if (hcrc->State == HAL_CRC_STATE_BUSY)
 80076e2:	7943      	ldrb	r3, [r0, #5]
 80076e4:	2b02      	cmp	r3, #2
 80076e6:	b2dc      	uxtb	r4, r3
 80076e8:	d00d      	beq.n	8007706 <HAL_CRC_DeInit+0x2a>
  {
    return HAL_BUSY;
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 80076ea:	2302      	movs	r3, #2
 80076ec:	7143      	strb	r3, [r0, #5]

  /* Reset CRC calculation unit */
  __HAL_CRC_DR_RESET(hcrc);
 80076ee:	6803      	ldr	r3, [r0, #0]
 80076f0:	689a      	ldr	r2, [r3, #8]
 80076f2:	f042 0201 	orr.w	r2, r2, #1
 80076f6:	609a      	str	r2, [r3, #8]

  /* Reset IDR register content */
  CLEAR_BIT(hcrc->Instance->IDR, CRC_IDR_IDR);
 80076f8:	2400      	movs	r4, #0
 80076fa:	791a      	ldrb	r2, [r3, #4]
 80076fc:	711c      	strb	r4, [r3, #4]

  /* DeInit the low level hardware */
  HAL_CRC_MspDeInit(hcrc);
 80076fe:	f00d f91f 	bl	8014940 <HAL_CRC_MspDeInit>

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_RESET;
 8007702:	716c      	strb	r4, [r5, #5]

  /* Process unlocked */
  __HAL_UNLOCK(hcrc);
 8007704:	712c      	strb	r4, [r5, #4]

  /* Return function status */
  return HAL_OK;
}
 8007706:	4620      	mov	r0, r4
 8007708:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800770a:	2401      	movs	r4, #1
 800770c:	e7fb      	b.n	8007706 <HAL_CRC_DeInit+0x2a>

0800770e <HAL_CRC_Calculate>:
  * @param  pBuffer pointer to the input data buffer.
  * @param  BufferLength input data buffer length (number of uint32_t words).
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 800770e:	4603      	mov	r3, r0
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8007710:	2002      	movs	r0, #2
 8007712:	7158      	strb	r0, [r3, #5]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 8007714:	6818      	ldr	r0, [r3, #0]
{
 8007716:	b510      	push	{r4, lr}
  __HAL_CRC_DR_RESET(hcrc);
 8007718:	6884      	ldr	r4, [r0, #8]
 800771a:	f044 0401 	orr.w	r4, r4, #1
 800771e:	6084      	str	r4, [r0, #8]

  /* Enter 32-bit input data to the CRC calculator */
  for (index = 0U; index < BufferLength; index++)
 8007720:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8007724:	4291      	cmp	r1, r2
 8007726:	d103      	bne.n	8007730 <HAL_CRC_Calculate+0x22>
    hcrc->Instance->DR = pBuffer[index];
  }
  temp = hcrc->Instance->DR;

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8007728:	2201      	movs	r2, #1
  temp = hcrc->Instance->DR;
 800772a:	6800      	ldr	r0, [r0, #0]
  hcrc->State = HAL_CRC_STATE_READY;
 800772c:	715a      	strb	r2, [r3, #5]

  /* Return the CRC computed value */
  return temp;
}
 800772e:	bd10      	pop	{r4, pc}
    hcrc->Instance->DR = pBuffer[index];
 8007730:	f851 4b04 	ldr.w	r4, [r1], #4
 8007734:	6004      	str	r4, [r0, #0]
  for (index = 0U; index < BufferLength; index++)
 8007736:	e7f5      	b.n	8007724 <HAL_CRC_Calculate+0x16>

08007738 <HAL_CRC_GetState>:
  * @retval HAL state
  */
HAL_CRC_StateTypeDef HAL_CRC_GetState(CRC_HandleTypeDef *hcrc)
{
  /* Return CRC handle state */
  return hcrc->State;
 8007738:	7940      	ldrb	r0, [r0, #5]
}
 800773a:	4770      	bx	lr

0800773c <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800773c:	6803      	ldr	r3, [r0, #0]
{
 800773e:	b510      	push	{r4, lr}
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8007740:	4c08      	ldr	r4, [pc, #32]	; (8007764 <DMA_CalcBaseAndBitshift+0x28>)
{
 8007742:	4602      	mov	r2, r0
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8007744:	b2d9      	uxtb	r1, r3
 8007746:	3910      	subs	r1, #16
 8007748:	2018      	movs	r0, #24
 800774a:	fbb1 f0f0 	udiv	r0, r1, r0
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800774e:	5c20      	ldrb	r0, [r4, r0]
 8007750:	65d0      	str	r0, [r2, #92]	; 0x5c
  
  if (stream_number > 3U)
 8007752:	f423 707f 	bic.w	r0, r3, #1020	; 0x3fc
 8007756:	f020 0003 	bic.w	r0, r0, #3
 800775a:	295f      	cmp	r1, #95	; 0x5f
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800775c:	bf88      	it	hi
 800775e:	3004      	addhi	r0, #4
 8007760:	6590      	str	r0, [r2, #88]	; 0x58
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
  }
  
  return hdma->StreamBaseAddress;
}
 8007762:	bd10      	pop	{r4, pc}
 8007764:	0801fc40 	.word	0x0801fc40

08007768 <HAL_DMA_Init>:
{
 8007768:	b570      	push	{r4, r5, r6, lr}
 800776a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800776c:	f7ff ff0e 	bl	800758c <HAL_GetTick>
 8007770:	4605      	mov	r5, r0
  if(hdma == NULL)
 8007772:	2c00      	cmp	r4, #0
 8007774:	d073      	beq.n	800785e <HAL_DMA_Init+0xf6>
  __HAL_UNLOCK(hdma);
 8007776:	2300      	movs	r3, #0
 8007778:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  __HAL_DMA_DISABLE(hdma);
 800777c:	6822      	ldr	r2, [r4, #0]
  hdma->State = HAL_DMA_STATE_BUSY;
 800777e:	2302      	movs	r3, #2
 8007780:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 8007784:	6813      	ldr	r3, [r2, #0]
 8007786:	f023 0301 	bic.w	r3, r3, #1
 800778a:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800778c:	6821      	ldr	r1, [r4, #0]
 800778e:	680b      	ldr	r3, [r1, #0]
 8007790:	07d8      	lsls	r0, r3, #31
 8007792:	d42f      	bmi.n	80077f4 <HAL_DMA_Init+0x8c>
  tmp = hdma->Instance->CR;
 8007794:	680b      	ldr	r3, [r1, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8007796:	4d33      	ldr	r5, [pc, #204]	; (8007864 <HAL_DMA_Init+0xfc>)
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007798:	69a0      	ldr	r0, [r4, #24]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800779a:	401d      	ands	r5, r3
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800779c:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 80077a0:	4313      	orrs	r3, r2
 80077a2:	68e2      	ldr	r2, [r4, #12]
 80077a4:	4313      	orrs	r3, r2
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80077a6:	6922      	ldr	r2, [r4, #16]
 80077a8:	4313      	orrs	r3, r2
 80077aa:	6962      	ldr	r2, [r4, #20]
 80077ac:	4313      	orrs	r3, r2
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80077ae:	69e2      	ldr	r2, [r4, #28]
 80077b0:	4303      	orrs	r3, r0
 80077b2:	4313      	orrs	r3, r2
          hdma->Init.Mode                | hdma->Init.Priority;
 80077b4:	6a22      	ldr	r2, [r4, #32]
 80077b6:	4313      	orrs	r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80077b8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80077ba:	2a04      	cmp	r2, #4
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80077bc:	ea43 0305 	orr.w	r3, r3, r5
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80077c0:	bf02      	ittt	eq
 80077c2:	e9d4 560b 	ldrdeq	r5, r6, [r4, #44]	; 0x2c
 80077c6:	4335      	orreq	r5, r6
 80077c8:	432b      	orreq	r3, r5
  hdma->Instance->CR = tmp;  
 80077ca:	600b      	str	r3, [r1, #0]
  tmp = hdma->Instance->FCR;
 80077cc:	694b      	ldr	r3, [r1, #20]
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80077ce:	2a04      	cmp	r2, #4
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80077d0:	f023 0307 	bic.w	r3, r3, #7
  tmp |= hdma->Init.FIFOMode;
 80077d4:	ea43 0302 	orr.w	r3, r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80077d8:	d133      	bne.n	8007842 <HAL_DMA_Init+0xda>
    tmp |= hdma->Init.FIFOThreshold;
 80077da:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80077dc:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    tmp |= hdma->Init.FIFOThreshold;
 80077de:	4313      	orrs	r3, r2
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80077e0:	b37d      	cbz	r5, 8007842 <HAL_DMA_Init+0xda>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80077e2:	b990      	cbnz	r0, 800780a <HAL_DMA_Init+0xa2>
  {
    switch (tmp)
 80077e4:	2a01      	cmp	r2, #1
 80077e6:	d021      	beq.n	800782c <HAL_DMA_Init+0xc4>
 80077e8:	f032 0202 	bics.w	r2, r2, #2
 80077ec:	d129      	bne.n	8007842 <HAL_DMA_Init+0xda>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80077ee:	01ea      	lsls	r2, r5, #7
 80077f0:	d527      	bpl.n	8007842 <HAL_DMA_Init+0xda>
 80077f2:	e01e      	b.n	8007832 <HAL_DMA_Init+0xca>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80077f4:	f7ff feca 	bl	800758c <HAL_GetTick>
 80077f8:	1b40      	subs	r0, r0, r5
 80077fa:	2805      	cmp	r0, #5
 80077fc:	d9c6      	bls.n	800778c <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80077fe:	2320      	movs	r3, #32
 8007800:	6563      	str	r3, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8007802:	2003      	movs	r0, #3
        hdma->State = HAL_DMA_STATE_READY;
 8007804:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 8007808:	bd70      	pop	{r4, r5, r6, pc}
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800780a:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 800780e:	d114      	bne.n	800783a <HAL_DMA_Init+0xd2>
    switch (tmp)
 8007810:	2a03      	cmp	r2, #3
 8007812:	d816      	bhi.n	8007842 <HAL_DMA_Init+0xda>
 8007814:	a001      	add	r0, pc, #4	; (adr r0, 800781c <HAL_DMA_Init+0xb4>)
 8007816:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 800781a:	bf00      	nop
 800781c:	08007833 	.word	0x08007833
 8007820:	080077ef 	.word	0x080077ef
 8007824:	08007833 	.word	0x08007833
 8007828:	0800782d 	.word	0x0800782d
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800782c:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 8007830:	d107      	bne.n	8007842 <HAL_DMA_Init+0xda>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8007832:	2340      	movs	r3, #64	; 0x40
 8007834:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8007836:	2001      	movs	r0, #1
 8007838:	e7e4      	b.n	8007804 <HAL_DMA_Init+0x9c>
    switch (tmp)
 800783a:	2a02      	cmp	r2, #2
 800783c:	d9f9      	bls.n	8007832 <HAL_DMA_Init+0xca>
 800783e:	2a03      	cmp	r2, #3
 8007840:	d0d5      	beq.n	80077ee <HAL_DMA_Init+0x86>
  hdma->Instance->FCR = tmp;
 8007842:	614b      	str	r3, [r1, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8007844:	4620      	mov	r0, r4
 8007846:	f7ff ff79 	bl	800773c <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800784a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800784c:	233f      	movs	r3, #63	; 0x3f
 800784e:	4093      	lsls	r3, r2
 8007850:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007852:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 8007854:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007856:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8007858:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 800785c:	e7d4      	b.n	8007808 <HAL_DMA_Init+0xa0>
    return HAL_ERROR;
 800785e:	2001      	movs	r0, #1
 8007860:	e7d2      	b.n	8007808 <HAL_DMA_Init+0xa0>
 8007862:	bf00      	nop
 8007864:	f010803f 	.word	0xf010803f

08007868 <HAL_DMA_DeInit>:
{
 8007868:	b538      	push	{r3, r4, r5, lr}
  if(hdma == NULL)
 800786a:	4605      	mov	r5, r0
 800786c:	b320      	cbz	r0, 80078b8 <HAL_DMA_DeInit+0x50>
  if(hdma->State == HAL_DMA_STATE_BUSY)
 800786e:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8007872:	2b02      	cmp	r3, #2
 8007874:	b2dc      	uxtb	r4, r3
 8007876:	d01d      	beq.n	80078b4 <HAL_DMA_DeInit+0x4c>
  __HAL_DMA_DISABLE(hdma);
 8007878:	6803      	ldr	r3, [r0, #0]
 800787a:	681a      	ldr	r2, [r3, #0]
 800787c:	f022 0201 	bic.w	r2, r2, #1
  hdma->Instance->CR   = 0U;
 8007880:	2400      	movs	r4, #0
  __HAL_DMA_DISABLE(hdma);
 8007882:	601a      	str	r2, [r3, #0]
  hdma->Instance->FCR  = 0x00000021U;
 8007884:	2221      	movs	r2, #33	; 0x21
  hdma->Instance->CR   = 0U;
 8007886:	601c      	str	r4, [r3, #0]
  hdma->Instance->NDTR = 0U;
 8007888:	605c      	str	r4, [r3, #4]
  hdma->Instance->PAR  = 0U;
 800788a:	609c      	str	r4, [r3, #8]
  hdma->Instance->M0AR = 0U;
 800788c:	60dc      	str	r4, [r3, #12]
  hdma->Instance->M1AR = 0U;
 800788e:	611c      	str	r4, [r3, #16]
  hdma->Instance->FCR  = 0x00000021U;
 8007890:	615a      	str	r2, [r3, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8007892:	f7ff ff53 	bl	800773c <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007896:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 8007898:	233f      	movs	r3, #63	; 0x3f
 800789a:	4093      	lsls	r3, r2
  hdma->XferHalfCpltCallback = NULL;
 800789c:	e9c5 440f 	strd	r4, r4, [r5, #60]	; 0x3c
  hdma->XferM1HalfCpltCallback = NULL;
 80078a0:	e9c5 4411 	strd	r4, r4, [r5, #68]	; 0x44
  hdma->XferAbortCallback = NULL;
 80078a4:	e9c5 4413 	strd	r4, r4, [r5, #76]	; 0x4c
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80078a8:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80078aa:	656c      	str	r4, [r5, #84]	; 0x54
  __HAL_UNLOCK(hdma);
 80078ac:	f885 4034 	strb.w	r4, [r5, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_RESET;
 80078b0:	f885 4035 	strb.w	r4, [r5, #53]	; 0x35
}
 80078b4:	4620      	mov	r0, r4
 80078b6:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80078b8:	2401      	movs	r4, #1
 80078ba:	e7fb      	b.n	80078b4 <HAL_DMA_DeInit+0x4c>

080078bc <HAL_DMA_Start_IT>:
{
 80078bc:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hdma);
 80078be:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80078c2:	6d86      	ldr	r6, [r0, #88]	; 0x58
  __HAL_LOCK(hdma);
 80078c4:	2c01      	cmp	r4, #1
 80078c6:	d031      	beq.n	800792c <HAL_DMA_Start_IT+0x70>
 80078c8:	2401      	movs	r4, #1
 80078ca:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 80078ce:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
 80078d2:	2c01      	cmp	r4, #1
 80078d4:	f04f 0500 	mov.w	r5, #0
 80078d8:	f04f 0402 	mov.w	r4, #2
 80078dc:	d124      	bne.n	8007928 <HAL_DMA_Start_IT+0x6c>
    hdma->State = HAL_DMA_STATE_BUSY;
 80078de:	f880 4035 	strb.w	r4, [r0, #53]	; 0x35
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80078e2:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80078e4:	6545      	str	r5, [r0, #84]	; 0x54
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80078e6:	6825      	ldr	r5, [r4, #0]
 80078e8:	f425 2580 	bic.w	r5, r5, #262144	; 0x40000
 80078ec:	6025      	str	r5, [r4, #0]
  hdma->Instance->NDTR = DataLength;
 80078ee:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80078f0:	6883      	ldr	r3, [r0, #8]
 80078f2:	2b40      	cmp	r3, #64	; 0x40
    hdma->Instance->PAR = DstAddress;
 80078f4:	bf0e      	itee	eq
 80078f6:	60a2      	streq	r2, [r4, #8]
    hdma->Instance->PAR = SrcAddress;
 80078f8:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->M0AR = DstAddress;
 80078fa:	60e2      	strne	r2, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80078fc:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
    hdma->Instance->M0AR = SrcAddress;
 80078fe:	bf08      	it	eq
 8007900:	60e1      	streq	r1, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007902:	233f      	movs	r3, #63	; 0x3f
 8007904:	4093      	lsls	r3, r2
 8007906:	60b3      	str	r3, [r6, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8007908:	6823      	ldr	r3, [r4, #0]
 800790a:	f043 0316 	orr.w	r3, r3, #22
 800790e:	6023      	str	r3, [r4, #0]
    if(hdma->XferHalfCpltCallback != NULL)
 8007910:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8007912:	b11b      	cbz	r3, 800791c <HAL_DMA_Start_IT+0x60>
      hdma->Instance->CR  |= DMA_IT_HT;
 8007914:	6823      	ldr	r3, [r4, #0]
 8007916:	f043 0308 	orr.w	r3, r3, #8
 800791a:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 800791c:	6823      	ldr	r3, [r4, #0]
 800791e:	f043 0301 	orr.w	r3, r3, #1
 8007922:	6023      	str	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007924:	2000      	movs	r0, #0
}
 8007926:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_UNLOCK(hdma);	  
 8007928:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
  __HAL_LOCK(hdma);
 800792c:	2002      	movs	r0, #2
 800792e:	e7fa      	b.n	8007926 <HAL_DMA_Start_IT+0x6a>

08007930 <HAL_DMA_Abort>:
{
 8007930:	b570      	push	{r4, r5, r6, lr}
 8007932:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007934:	6d86      	ldr	r6, [r0, #88]	; 0x58
  uint32_t tickstart = HAL_GetTick();
 8007936:	f7ff fe29 	bl	800758c <HAL_GetTick>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800793a:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 800793e:	2b02      	cmp	r3, #2
  uint32_t tickstart = HAL_GetTick();
 8007940:	4605      	mov	r5, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007942:	d006      	beq.n	8007952 <HAL_DMA_Abort+0x22>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007944:	2380      	movs	r3, #128	; 0x80
 8007946:	6563      	str	r3, [r4, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 8007948:	2300      	movs	r3, #0
 800794a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    return HAL_ERROR;
 800794e:	2001      	movs	r0, #1
}
 8007950:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007952:	6823      	ldr	r3, [r4, #0]
 8007954:	681a      	ldr	r2, [r3, #0]
 8007956:	f022 0216 	bic.w	r2, r2, #22
 800795a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800795c:	695a      	ldr	r2, [r3, #20]
 800795e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007962:	615a      	str	r2, [r3, #20]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007964:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8007966:	b90a      	cbnz	r2, 800796c <HAL_DMA_Abort+0x3c>
 8007968:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800796a:	b11a      	cbz	r2, 8007974 <HAL_DMA_Abort+0x44>
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800796c:	681a      	ldr	r2, [r3, #0]
 800796e:	f022 0208 	bic.w	r2, r2, #8
 8007972:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8007974:	681a      	ldr	r2, [r3, #0]
 8007976:	f022 0201 	bic.w	r2, r2, #1
 800797a:	601a      	str	r2, [r3, #0]
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800797c:	6823      	ldr	r3, [r4, #0]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	f013 0301 	ands.w	r3, r3, #1
 8007984:	d10a      	bne.n	800799c <HAL_DMA_Abort+0x6c>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007986:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8007988:	223f      	movs	r2, #63	; 0x3f
 800798a:	408a      	lsls	r2, r1
 800798c:	60b2      	str	r2, [r6, #8]
    hdma->State = HAL_DMA_STATE_READY;
 800798e:	2201      	movs	r2, #1
    __HAL_UNLOCK(hdma);
 8007990:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    hdma->State = HAL_DMA_STATE_READY;
 8007994:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
  return HAL_OK;
 8007998:	4618      	mov	r0, r3
 800799a:	e7d9      	b.n	8007950 <HAL_DMA_Abort+0x20>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800799c:	f7ff fdf6 	bl	800758c <HAL_GetTick>
 80079a0:	1b40      	subs	r0, r0, r5
 80079a2:	2805      	cmp	r0, #5
 80079a4:	d9ea      	bls.n	800797c <HAL_DMA_Abort+0x4c>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80079a6:	2320      	movs	r3, #32
 80079a8:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80079aa:	2003      	movs	r0, #3
        __HAL_UNLOCK(hdma);
 80079ac:	2300      	movs	r3, #0
 80079ae:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80079b2:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        return HAL_TIMEOUT;
 80079b6:	e7cb      	b.n	8007950 <HAL_DMA_Abort+0x20>

080079b8 <HAL_DMA_IRQHandler>:
{
 80079b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t count = 0U;
 80079ba:	2300      	movs	r3, #0
 80079bc:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 80079be:	4b5c      	ldr	r3, [pc, #368]	; (8007b30 <HAL_DMA_IRQHandler+0x178>)
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80079c0:	6d85      	ldr	r5, [r0, #88]	; 0x58
  uint32_t timeout = SystemCoreClock / 9600U;
 80079c2:	681f      	ldr	r7, [r3, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80079c4:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
  tmpisr = regs->ISR;
 80079c6:	682e      	ldr	r6, [r5, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80079c8:	2208      	movs	r2, #8
 80079ca:	409a      	lsls	r2, r3
 80079cc:	4232      	tst	r2, r6
{
 80079ce:	4604      	mov	r4, r0
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80079d0:	d00c      	beq.n	80079ec <HAL_DMA_IRQHandler+0x34>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80079d2:	6801      	ldr	r1, [r0, #0]
 80079d4:	6808      	ldr	r0, [r1, #0]
 80079d6:	0740      	lsls	r0, r0, #29
 80079d8:	d508      	bpl.n	80079ec <HAL_DMA_IRQHandler+0x34>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80079da:	6808      	ldr	r0, [r1, #0]
 80079dc:	f020 0004 	bic.w	r0, r0, #4
 80079e0:	6008      	str	r0, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80079e2:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80079e4:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80079e6:	f042 0201 	orr.w	r2, r2, #1
 80079ea:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80079ec:	2201      	movs	r2, #1
 80079ee:	409a      	lsls	r2, r3
 80079f0:	4232      	tst	r2, r6
 80079f2:	d008      	beq.n	8007a06 <HAL_DMA_IRQHandler+0x4e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80079f4:	6821      	ldr	r1, [r4, #0]
 80079f6:	6949      	ldr	r1, [r1, #20]
 80079f8:	0609      	lsls	r1, r1, #24
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80079fa:	bf41      	itttt	mi
 80079fc:	60aa      	strmi	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80079fe:	6d62      	ldrmi	r2, [r4, #84]	; 0x54
 8007a00:	f042 0202 	orrmi.w	r2, r2, #2
 8007a04:	6562      	strmi	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8007a06:	2204      	movs	r2, #4
 8007a08:	409a      	lsls	r2, r3
 8007a0a:	4232      	tst	r2, r6
 8007a0c:	d008      	beq.n	8007a20 <HAL_DMA_IRQHandler+0x68>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8007a0e:	6821      	ldr	r1, [r4, #0]
 8007a10:	6809      	ldr	r1, [r1, #0]
 8007a12:	0788      	lsls	r0, r1, #30
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8007a14:	bf41      	itttt	mi
 8007a16:	60aa      	strmi	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8007a18:	6d62      	ldrmi	r2, [r4, #84]	; 0x54
 8007a1a:	f042 0204 	orrmi.w	r2, r2, #4
 8007a1e:	6562      	strmi	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8007a20:	2210      	movs	r2, #16
 8007a22:	409a      	lsls	r2, r3
 8007a24:	4232      	tst	r2, r6
 8007a26:	d010      	beq.n	8007a4a <HAL_DMA_IRQHandler+0x92>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8007a28:	6823      	ldr	r3, [r4, #0]
 8007a2a:	6819      	ldr	r1, [r3, #0]
 8007a2c:	0709      	lsls	r1, r1, #28
 8007a2e:	d50c      	bpl.n	8007a4a <HAL_DMA_IRQHandler+0x92>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8007a30:	60aa      	str	r2, [r5, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8007a32:	681a      	ldr	r2, [r3, #0]
 8007a34:	0350      	lsls	r0, r2, #13
 8007a36:	d537      	bpl.n	8007aa8 <HAL_DMA_IRQHandler+0xf0>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	0319      	lsls	r1, r3, #12
 8007a3c:	d401      	bmi.n	8007a42 <HAL_DMA_IRQHandler+0x8a>
        if(hdma->XferHalfCpltCallback != NULL)
 8007a3e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007a40:	e000      	b.n	8007a44 <HAL_DMA_IRQHandler+0x8c>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8007a42:	6ca3      	ldr	r3, [r4, #72]	; 0x48
        if(hdma->XferHalfCpltCallback != NULL)
 8007a44:	b10b      	cbz	r3, 8007a4a <HAL_DMA_IRQHandler+0x92>
          hdma->XferHalfCpltCallback(hdma);
 8007a46:	4620      	mov	r0, r4
 8007a48:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8007a4a:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8007a4c:	2220      	movs	r2, #32
 8007a4e:	408a      	lsls	r2, r1
 8007a50:	4232      	tst	r2, r6
 8007a52:	d03a      	beq.n	8007aca <HAL_DMA_IRQHandler+0x112>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8007a54:	6823      	ldr	r3, [r4, #0]
 8007a56:	6818      	ldr	r0, [r3, #0]
 8007a58:	06c6      	lsls	r6, r0, #27
 8007a5a:	d536      	bpl.n	8007aca <HAL_DMA_IRQHandler+0x112>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8007a5c:	60aa      	str	r2, [r5, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8007a5e:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 8007a62:	2a05      	cmp	r2, #5
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007a64:	681a      	ldr	r2, [r3, #0]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8007a66:	d127      	bne.n	8007ab8 <HAL_DMA_IRQHandler+0x100>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007a68:	f022 0216 	bic.w	r2, r2, #22
 8007a6c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8007a6e:	695a      	ldr	r2, [r3, #20]
 8007a70:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007a74:	615a      	str	r2, [r3, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007a76:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8007a78:	b90a      	cbnz	r2, 8007a7e <HAL_DMA_IRQHandler+0xc6>
 8007a7a:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8007a7c:	b11a      	cbz	r2, 8007a86 <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007a7e:	681a      	ldr	r2, [r3, #0]
 8007a80:	f022 0208 	bic.w	r2, r2, #8
 8007a84:	601a      	str	r2, [r3, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007a86:	233f      	movs	r3, #63	; 0x3f
 8007a88:	408b      	lsls	r3, r1
 8007a8a:	60ab      	str	r3, [r5, #8]
        __HAL_UNLOCK(hdma);
 8007a8c:	2300      	movs	r3, #0
 8007a8e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 8007a92:	2301      	movs	r3, #1
 8007a94:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 8007a98:	6d23      	ldr	r3, [r4, #80]	; 0x50
    if(hdma->XferErrorCallback != NULL)
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d045      	beq.n	8007b2a <HAL_DMA_IRQHandler+0x172>
      hdma->XferErrorCallback(hdma);
 8007a9e:	4620      	mov	r0, r4
}
 8007aa0:	b003      	add	sp, #12
 8007aa2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
      hdma->XferErrorCallback(hdma);
 8007aa6:	4718      	bx	r3
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8007aa8:	681a      	ldr	r2, [r3, #0]
 8007aaa:	05d2      	lsls	r2, r2, #23
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007aac:	bf5e      	ittt	pl
 8007aae:	681a      	ldrpl	r2, [r3, #0]
 8007ab0:	f022 0208 	bicpl.w	r2, r2, #8
 8007ab4:	601a      	strpl	r2, [r3, #0]
 8007ab6:	e7c2      	b.n	8007a3e <HAL_DMA_IRQHandler+0x86>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8007ab8:	0350      	lsls	r0, r2, #13
 8007aba:	d527      	bpl.n	8007b0c <HAL_DMA_IRQHandler+0x154>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	0319      	lsls	r1, r3, #12
 8007ac0:	d431      	bmi.n	8007b26 <HAL_DMA_IRQHandler+0x16e>
          if(hdma->XferM1CpltCallback != NULL)
 8007ac2:	6c63      	ldr	r3, [r4, #68]	; 0x44
        if(hdma->XferCpltCallback != NULL)
 8007ac4:	b10b      	cbz	r3, 8007aca <HAL_DMA_IRQHandler+0x112>
          hdma->XferCpltCallback(hdma);
 8007ac6:	4620      	mov	r0, r4
 8007ac8:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8007aca:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8007acc:	b36b      	cbz	r3, 8007b2a <HAL_DMA_IRQHandler+0x172>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8007ace:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8007ad0:	07da      	lsls	r2, r3, #31
 8007ad2:	d519      	bpl.n	8007b08 <HAL_DMA_IRQHandler+0x150>
      __HAL_DMA_DISABLE(hdma);
 8007ad4:	6822      	ldr	r2, [r4, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 8007ad6:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8007ada:	fbb7 f7f3 	udiv	r7, r7, r3
      hdma->State = HAL_DMA_STATE_ABORT;
 8007ade:	2305      	movs	r3, #5
 8007ae0:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 8007ae4:	6813      	ldr	r3, [r2, #0]
 8007ae6:	f023 0301 	bic.w	r3, r3, #1
 8007aea:	6013      	str	r3, [r2, #0]
        if (++count > timeout)
 8007aec:	9b01      	ldr	r3, [sp, #4]
 8007aee:	3301      	adds	r3, #1
 8007af0:	42bb      	cmp	r3, r7
 8007af2:	9301      	str	r3, [sp, #4]
 8007af4:	d802      	bhi.n	8007afc <HAL_DMA_IRQHandler+0x144>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8007af6:	6813      	ldr	r3, [r2, #0]
 8007af8:	07db      	lsls	r3, r3, #31
 8007afa:	d4f7      	bmi.n	8007aec <HAL_DMA_IRQHandler+0x134>
      __HAL_UNLOCK(hdma);
 8007afc:	2300      	movs	r3, #0
 8007afe:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 8007b02:	2301      	movs	r3, #1
 8007b04:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 8007b08:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8007b0a:	e7c6      	b.n	8007a9a <HAL_DMA_IRQHandler+0xe2>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8007b0c:	681a      	ldr	r2, [r3, #0]
 8007b0e:	f412 7280 	ands.w	r2, r2, #256	; 0x100
 8007b12:	d108      	bne.n	8007b26 <HAL_DMA_IRQHandler+0x16e>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8007b14:	6819      	ldr	r1, [r3, #0]
 8007b16:	f021 0110 	bic.w	r1, r1, #16
 8007b1a:	6019      	str	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8007b1c:	2301      	movs	r3, #1
          __HAL_UNLOCK(hdma);
 8007b1e:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 8007b22:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 8007b26:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8007b28:	e7cc      	b.n	8007ac4 <HAL_DMA_IRQHandler+0x10c>
}
 8007b2a:	b003      	add	sp, #12
 8007b2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007b2e:	bf00      	nop
 8007b30:	200000c4 	.word	0x200000c4

08007b34 <HAL_EXTI_RegisterCallback>:
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
  HAL_StatusTypeDef status = HAL_OK;

  switch (CallbackID)
 8007b34:	b911      	cbnz	r1, 8007b3c <HAL_EXTI_RegisterCallback+0x8>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8007b36:	6042      	str	r2, [r0, #4]
      status = HAL_ERROR;
      break;
  }

  return status;
}
 8007b38:	4608      	mov	r0, r1
 8007b3a:	4770      	bx	lr
      status = HAL_ERROR;
 8007b3c:	2101      	movs	r1, #1
 8007b3e:	e7fb      	b.n	8007b38 <HAL_EXTI_RegisterCallback+0x4>

08007b40 <HAL_EXTI_GetHandle>:
{
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8007b40:	b110      	cbz	r0, 8007b48 <HAL_EXTI_GetHandle+0x8>
    return HAL_ERROR;
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8007b42:	6001      	str	r1, [r0, #0]

    return HAL_OK;
 8007b44:	2000      	movs	r0, #0
 8007b46:	4770      	bx	lr
    return HAL_ERROR;
 8007b48:	2001      	movs	r0, #1
  }
}
 8007b4a:	4770      	bx	lr

08007b4c <HAL_EXTI_IRQHandler>:
{
  uint32_t regval;
  uint32_t maskline;

  /* Compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8007b4c:	6803      	ldr	r3, [r0, #0]
 8007b4e:	f003 021f 	and.w	r2, r3, #31
 8007b52:	2301      	movs	r3, #1
 8007b54:	4093      	lsls	r3, r2

  /* Get pending bit  */
  regval = (EXTI->PR & maskline);
 8007b56:	4a04      	ldr	r2, [pc, #16]	; (8007b68 <HAL_EXTI_IRQHandler+0x1c>)
 8007b58:	6951      	ldr	r1, [r2, #20]
  if (regval != 0x00u)
 8007b5a:	4219      	tst	r1, r3
 8007b5c:	d003      	beq.n	8007b66 <HAL_EXTI_IRQHandler+0x1a>
  {
    /* Clear pending bit */
    EXTI->PR = maskline;
 8007b5e:	6153      	str	r3, [r2, #20]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 8007b60:	6843      	ldr	r3, [r0, #4]
 8007b62:	b103      	cbz	r3, 8007b66 <HAL_EXTI_IRQHandler+0x1a>
    {
      hexti->PendingCallback();
 8007b64:	4718      	bx	r3
    }
  }
}
 8007b66:	4770      	bx	lr
 8007b68:	40013c00 	.word	0x40013c00

08007b6c <FLASH_Program_DoubleWord>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8007b6c:	4909      	ldr	r1, [pc, #36]	; (8007b94 <FLASH_Program_DoubleWord+0x28>)
{
 8007b6e:	b510      	push	{r4, lr}
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8007b70:	690c      	ldr	r4, [r1, #16]
 8007b72:	f424 7440 	bic.w	r4, r4, #768	; 0x300
 8007b76:	610c      	str	r4, [r1, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8007b78:	690c      	ldr	r4, [r1, #16]
 8007b7a:	f444 7440 	orr.w	r4, r4, #768	; 0x300
 8007b7e:	610c      	str	r4, [r1, #16]
  FLASH->CR |= FLASH_CR_PG;
 8007b80:	690c      	ldr	r4, [r1, #16]
 8007b82:	f044 0401 	orr.w	r4, r4, #1
 8007b86:	610c      	str	r4, [r1, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8007b88:	6002      	str	r2, [r0, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8007b8a:	f3bf 8f6f 	isb	sy
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8007b8e:	6043      	str	r3, [r0, #4]
}
 8007b90:	bd10      	pop	{r4, pc}
 8007b92:	bf00      	nop
 8007b94:	40023c00 	.word	0x40023c00

08007b98 <FLASH_Program_Word>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8007b98:	4b07      	ldr	r3, [pc, #28]	; (8007bb8 <FLASH_Program_Word+0x20>)
 8007b9a:	691a      	ldr	r2, [r3, #16]
 8007b9c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8007ba0:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8007ba2:	691a      	ldr	r2, [r3, #16]
 8007ba4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007ba8:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 8007baa:	691a      	ldr	r2, [r3, #16]
 8007bac:	f042 0201 	orr.w	r2, r2, #1
 8007bb0:	611a      	str	r2, [r3, #16]

  *(__IO uint32_t*)Address = Data;
 8007bb2:	6001      	str	r1, [r0, #0]
}
 8007bb4:	4770      	bx	lr
 8007bb6:	bf00      	nop
 8007bb8:	40023c00 	.word	0x40023c00

08007bbc <FLASH_Program_HalfWord>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8007bbc:	4b07      	ldr	r3, [pc, #28]	; (8007bdc <FLASH_Program_HalfWord+0x20>)
 8007bbe:	691a      	ldr	r2, [r3, #16]
 8007bc0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8007bc4:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8007bc6:	691a      	ldr	r2, [r3, #16]
 8007bc8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007bcc:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 8007bce:	691a      	ldr	r2, [r3, #16]
 8007bd0:	f042 0201 	orr.w	r2, r2, #1
 8007bd4:	611a      	str	r2, [r3, #16]

  *(__IO uint16_t*)Address = Data;
 8007bd6:	8001      	strh	r1, [r0, #0]
}
 8007bd8:	4770      	bx	lr
 8007bda:	bf00      	nop
 8007bdc:	40023c00 	.word	0x40023c00

08007be0 <FLASH_SetErrorCode>:
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8007be0:	4b20      	ldr	r3, [pc, #128]	; (8007c64 <FLASH_SetErrorCode+0x84>)
 8007be2:	68da      	ldr	r2, [r3, #12]
 8007be4:	06d0      	lsls	r0, r2, #27
 8007be6:	d506      	bpl.n	8007bf6 <FLASH_SetErrorCode+0x16>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8007be8:	491f      	ldr	r1, [pc, #124]	; (8007c68 <FLASH_SetErrorCode+0x88>)
 8007bea:	69ca      	ldr	r2, [r1, #28]
 8007bec:	f042 0210 	orr.w	r2, r2, #16
 8007bf0:	61ca      	str	r2, [r1, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8007bf2:	2210      	movs	r2, #16
 8007bf4:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8007bf6:	68da      	ldr	r2, [r3, #12]
 8007bf8:	0691      	lsls	r1, r2, #26
 8007bfa:	d506      	bpl.n	8007c0a <FLASH_SetErrorCode+0x2a>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8007bfc:	491a      	ldr	r1, [pc, #104]	; (8007c68 <FLASH_SetErrorCode+0x88>)
 8007bfe:	69ca      	ldr	r2, [r1, #28]
 8007c00:	f042 0208 	orr.w	r2, r2, #8
 8007c04:	61ca      	str	r2, [r1, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8007c06:	2220      	movs	r2, #32
 8007c08:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8007c0a:	4b16      	ldr	r3, [pc, #88]	; (8007c64 <FLASH_SetErrorCode+0x84>)
 8007c0c:	68da      	ldr	r2, [r3, #12]
 8007c0e:	0652      	lsls	r2, r2, #25
 8007c10:	d506      	bpl.n	8007c20 <FLASH_SetErrorCode+0x40>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8007c12:	4915      	ldr	r1, [pc, #84]	; (8007c68 <FLASH_SetErrorCode+0x88>)
 8007c14:	69ca      	ldr	r2, [r1, #28]
 8007c16:	f042 0204 	orr.w	r2, r2, #4
 8007c1a:	61ca      	str	r2, [r1, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8007c1c:	2240      	movs	r2, #64	; 0x40
 8007c1e:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8007c20:	68da      	ldr	r2, [r3, #12]
 8007c22:	0610      	lsls	r0, r2, #24
 8007c24:	d506      	bpl.n	8007c34 <FLASH_SetErrorCode+0x54>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8007c26:	4910      	ldr	r1, [pc, #64]	; (8007c68 <FLASH_SetErrorCode+0x88>)
 8007c28:	69ca      	ldr	r2, [r1, #28]
 8007c2a:	f042 0202 	orr.w	r2, r2, #2
 8007c2e:	61ca      	str	r2, [r1, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8007c30:	2280      	movs	r2, #128	; 0x80
 8007c32:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8007c34:	4b0b      	ldr	r3, [pc, #44]	; (8007c64 <FLASH_SetErrorCode+0x84>)
 8007c36:	68da      	ldr	r2, [r3, #12]
 8007c38:	05d1      	lsls	r1, r2, #23
 8007c3a:	d507      	bpl.n	8007c4c <FLASH_SetErrorCode+0x6c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8007c3c:	490a      	ldr	r1, [pc, #40]	; (8007c68 <FLASH_SetErrorCode+0x88>)
 8007c3e:	69ca      	ldr	r2, [r1, #28]
 8007c40:	f042 0201 	orr.w	r2, r2, #1
 8007c44:	61ca      	str	r2, [r1, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8007c46:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007c4a:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8007c4c:	68da      	ldr	r2, [r3, #12]
 8007c4e:	0792      	lsls	r2, r2, #30
 8007c50:	d506      	bpl.n	8007c60 <FLASH_SetErrorCode+0x80>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8007c52:	4905      	ldr	r1, [pc, #20]	; (8007c68 <FLASH_SetErrorCode+0x88>)
 8007c54:	69ca      	ldr	r2, [r1, #28]
 8007c56:	f042 0220 	orr.w	r2, r2, #32
 8007c5a:	61ca      	str	r2, [r1, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8007c5c:	2202      	movs	r2, #2
 8007c5e:	60da      	str	r2, [r3, #12]
  }
}
 8007c60:	4770      	bx	lr
 8007c62:	bf00      	nop
 8007c64:	40023c00 	.word	0x40023c00
 8007c68:	2000996c 	.word	0x2000996c

08007c6c <HAL_FLASH_Unlock>:
  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8007c6c:	4b06      	ldr	r3, [pc, #24]	; (8007c88 <HAL_FLASH_Unlock+0x1c>)
 8007c6e:	691a      	ldr	r2, [r3, #16]
 8007c70:	2a00      	cmp	r2, #0
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8007c72:	bfbf      	itttt	lt
 8007c74:	4a05      	ldrlt	r2, [pc, #20]	; (8007c8c <HAL_FLASH_Unlock+0x20>)
 8007c76:	605a      	strlt	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8007c78:	f102 3288 	addlt.w	r2, r2, #2290649224	; 0x88888888
 8007c7c:	605a      	strlt	r2, [r3, #4]
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8007c7e:	bfba      	itte	lt
 8007c80:	6918      	ldrlt	r0, [r3, #16]
  HAL_StatusTypeDef status = HAL_OK;
 8007c82:	0fc0      	lsrlt	r0, r0, #31
 8007c84:	2000      	movge	r0, #0
}
 8007c86:	4770      	bx	lr
 8007c88:	40023c00 	.word	0x40023c00
 8007c8c:	45670123 	.word	0x45670123

08007c90 <HAL_FLASH_Lock>:
  FLASH->CR |= FLASH_CR_LOCK;
 8007c90:	4a03      	ldr	r2, [pc, #12]	; (8007ca0 <HAL_FLASH_Lock+0x10>)
 8007c92:	6913      	ldr	r3, [r2, #16]
 8007c94:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007c98:	6113      	str	r3, [r2, #16]
}
 8007c9a:	2000      	movs	r0, #0
 8007c9c:	4770      	bx	lr
 8007c9e:	bf00      	nop
 8007ca0:	40023c00 	.word	0x40023c00

08007ca4 <FLASH_WaitForLastOperation>:
{ 
 8007ca4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8007ca6:	4b12      	ldr	r3, [pc, #72]	; (8007cf0 <FLASH_WaitForLastOperation+0x4c>)
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8007ca8:	4d12      	ldr	r5, [pc, #72]	; (8007cf4 <FLASH_WaitForLastOperation+0x50>)
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8007caa:	2200      	movs	r2, #0
{ 
 8007cac:	4604      	mov	r4, r0
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8007cae:	61da      	str	r2, [r3, #28]
  tickstart = HAL_GetTick();
 8007cb0:	f7ff fc6c 	bl	800758c <HAL_GetTick>
 8007cb4:	462f      	mov	r7, r5
 8007cb6:	4606      	mov	r6, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8007cb8:	68eb      	ldr	r3, [r5, #12]
 8007cba:	03da      	lsls	r2, r3, #15
 8007cbc:	d40c      	bmi.n	8007cd8 <FLASH_WaitForLastOperation+0x34>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8007cbe:	68eb      	ldr	r3, [r5, #12]
 8007cc0:	07db      	lsls	r3, r3, #31
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8007cc2:	bf44      	itt	mi
 8007cc4:	2301      	movmi	r3, #1
 8007cc6:	60eb      	strmi	r3, [r5, #12]
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8007cc8:	68f8      	ldr	r0, [r7, #12]
 8007cca:	f410 70f9 	ands.w	r0, r0, #498	; 0x1f2
 8007cce:	d007      	beq.n	8007ce0 <FLASH_WaitForLastOperation+0x3c>
    FLASH_SetErrorCode();
 8007cd0:	f7ff ff86 	bl	8007be0 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8007cd4:	2001      	movs	r0, #1
 8007cd6:	e003      	b.n	8007ce0 <FLASH_WaitForLastOperation+0x3c>
    if(Timeout != HAL_MAX_DELAY)
 8007cd8:	1c61      	adds	r1, r4, #1
 8007cda:	d0ed      	beq.n	8007cb8 <FLASH_WaitForLastOperation+0x14>
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8007cdc:	b90c      	cbnz	r4, 8007ce2 <FLASH_WaitForLastOperation+0x3e>
        return HAL_TIMEOUT;
 8007cde:	2003      	movs	r0, #3
}  
 8007ce0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8007ce2:	f7ff fc53 	bl	800758c <HAL_GetTick>
 8007ce6:	1b80      	subs	r0, r0, r6
 8007ce8:	42a0      	cmp	r0, r4
 8007cea:	d9e5      	bls.n	8007cb8 <FLASH_WaitForLastOperation+0x14>
 8007cec:	e7f7      	b.n	8007cde <FLASH_WaitForLastOperation+0x3a>
 8007cee:	bf00      	nop
 8007cf0:	2000996c 	.word	0x2000996c
 8007cf4:	40023c00 	.word	0x40023c00

08007cf8 <HAL_FLASH_Program>:
{
 8007cf8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __HAL_LOCK(&pFlash);
 8007cfa:	4e20      	ldr	r6, [pc, #128]	; (8007d7c <HAL_FLASH_Program+0x84>)
{
 8007cfc:	9301      	str	r3, [sp, #4]
 8007cfe:	4614      	mov	r4, r2
  __HAL_LOCK(&pFlash);
 8007d00:	7e32      	ldrb	r2, [r6, #24]
 8007d02:	2a01      	cmp	r2, #1
{
 8007d04:	4607      	mov	r7, r0
 8007d06:	460d      	mov	r5, r1
  __HAL_LOCK(&pFlash);
 8007d08:	d035      	beq.n	8007d76 <HAL_FLASH_Program+0x7e>
 8007d0a:	2201      	movs	r2, #1
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8007d0c:	f24c 3050 	movw	r0, #50000	; 0xc350
  __HAL_LOCK(&pFlash);
 8007d10:	7632      	strb	r2, [r6, #24]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8007d12:	f7ff ffc7 	bl	8007ca4 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 8007d16:	b9b8      	cbnz	r0, 8007d48 <HAL_FLASH_Program+0x50>
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8007d18:	9b01      	ldr	r3, [sp, #4]
 8007d1a:	b9cf      	cbnz	r7, 8007d50 <HAL_FLASH_Program+0x58>
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8007d1c:	4b18      	ldr	r3, [pc, #96]	; (8007d80 <HAL_FLASH_Program+0x88>)
 8007d1e:	6918      	ldr	r0, [r3, #16]
 8007d20:	f420 7040 	bic.w	r0, r0, #768	; 0x300
 8007d24:	6118      	str	r0, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8007d26:	691a      	ldr	r2, [r3, #16]
 8007d28:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 8007d2a:	6918      	ldr	r0, [r3, #16]
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8007d2c:	b2e4      	uxtb	r4, r4
  FLASH->CR |= FLASH_CR_PG;
 8007d2e:	f040 0001 	orr.w	r0, r0, #1
 8007d32:	6118      	str	r0, [r3, #16]
  *(__IO uint8_t*)Address = Data;
 8007d34:	702c      	strb	r4, [r5, #0]
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8007d36:	f24c 3050 	movw	r0, #50000	; 0xc350
 8007d3a:	f7ff ffb3 	bl	8007ca4 <FLASH_WaitForLastOperation>
    FLASH->CR &= (~FLASH_CR_PG);  
 8007d3e:	4a10      	ldr	r2, [pc, #64]	; (8007d80 <HAL_FLASH_Program+0x88>)
 8007d40:	6913      	ldr	r3, [r2, #16]
 8007d42:	f023 0301 	bic.w	r3, r3, #1
 8007d46:	6113      	str	r3, [r2, #16]
  __HAL_UNLOCK(&pFlash);
 8007d48:	2300      	movs	r3, #0
 8007d4a:	7633      	strb	r3, [r6, #24]
}
 8007d4c:	b003      	add	sp, #12
 8007d4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8007d50:	2f01      	cmp	r7, #1
 8007d52:	d104      	bne.n	8007d5e <HAL_FLASH_Program+0x66>
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8007d54:	b2a1      	uxth	r1, r4
 8007d56:	4628      	mov	r0, r5
 8007d58:	f7ff ff30 	bl	8007bbc <FLASH_Program_HalfWord>
 8007d5c:	e7eb      	b.n	8007d36 <HAL_FLASH_Program+0x3e>
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8007d5e:	2f02      	cmp	r7, #2
 8007d60:	d104      	bne.n	8007d6c <HAL_FLASH_Program+0x74>
      FLASH_Program_Word(Address, (uint32_t) Data);
 8007d62:	4621      	mov	r1, r4
 8007d64:	4628      	mov	r0, r5
 8007d66:	f7ff ff17 	bl	8007b98 <FLASH_Program_Word>
 8007d6a:	e7e4      	b.n	8007d36 <HAL_FLASH_Program+0x3e>
      FLASH_Program_DoubleWord(Address, Data);
 8007d6c:	4622      	mov	r2, r4
 8007d6e:	4628      	mov	r0, r5
 8007d70:	f7ff fefc 	bl	8007b6c <FLASH_Program_DoubleWord>
 8007d74:	e7df      	b.n	8007d36 <HAL_FLASH_Program+0x3e>
  __HAL_LOCK(&pFlash);
 8007d76:	2002      	movs	r0, #2
 8007d78:	e7e8      	b.n	8007d4c <HAL_FLASH_Program+0x54>
 8007d7a:	bf00      	nop
 8007d7c:	2000996c 	.word	0x2000996c
 8007d80:	40023c00 	.word	0x40023c00

08007d84 <FLASH_MassErase.isra.0>:
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));
  
  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8007d84:	4b07      	ldr	r3, [pc, #28]	; (8007da4 <FLASH_MassErase.isra.0+0x20>)
 8007d86:	6919      	ldr	r1, [r3, #16]
 8007d88:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 8007d8c:	6119      	str	r1, [r3, #16]
  FLASH->CR |= FLASH_CR_MER;
 8007d8e:	6919      	ldr	r1, [r3, #16]
 8007d90:	f041 0104 	orr.w	r1, r1, #4
 8007d94:	6119      	str	r1, [r3, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8U);
 8007d96:	691a      	ldr	r2, [r3, #16]
 8007d98:	ea42 2000 	orr.w	r0, r2, r0, lsl #8
 8007d9c:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
 8007da0:	6118      	str	r0, [r3, #16]
}
 8007da2:	4770      	bx	lr
 8007da4:	40023c00 	.word	0x40023c00

08007da8 <FLASH_Erase_Sector>:

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8007da8:	b139      	cbz	r1, 8007dba <FLASH_Erase_Sector+0x12>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8007daa:	2901      	cmp	r1, #1
 8007dac:	d01c      	beq.n	8007de8 <FLASH_Erase_Sector+0x40>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8007dae:	2902      	cmp	r1, #2
  {
    tmp_psize = FLASH_PSIZE_WORD;
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8007db0:	bf0c      	ite	eq
 8007db2:	f44f 7100 	moveq.w	r1, #512	; 0x200
 8007db6:	f44f 7140 	movne.w	r1, #768	; 0x300
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8007dba:	4b0d      	ldr	r3, [pc, #52]	; (8007df0 <FLASH_Erase_Sector+0x48>)
 8007dbc:	691a      	ldr	r2, [r3, #16]
 8007dbe:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8007dc2:	611a      	str	r2, [r3, #16]
  FLASH->CR |= tmp_psize;
 8007dc4:	691a      	ldr	r2, [r3, #16]
 8007dc6:	4311      	orrs	r1, r2
 8007dc8:	6119      	str	r1, [r3, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8007dca:	691a      	ldr	r2, [r3, #16]
 8007dcc:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8007dd0:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8007dd2:	691a      	ldr	r2, [r3, #16]
 8007dd4:	ea42 00c0 	orr.w	r0, r2, r0, lsl #3
 8007dd8:	f040 0002 	orr.w	r0, r0, #2
 8007ddc:	6118      	str	r0, [r3, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8007dde:	691a      	ldr	r2, [r3, #16]
 8007de0:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8007de4:	611a      	str	r2, [r3, #16]
}
 8007de6:	4770      	bx	lr
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8007de8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007dec:	e7e5      	b.n	8007dba <FLASH_Erase_Sector+0x12>
 8007dee:	bf00      	nop
 8007df0:	40023c00 	.word	0x40023c00

08007df4 <FLASH_FlushCaches>:
  * @retval None
  */
void FLASH_FlushCaches(void)
{
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 8007df4:	4b14      	ldr	r3, [pc, #80]	; (8007e48 <FLASH_FlushCaches+0x54>)
 8007df6:	681a      	ldr	r2, [r3, #0]
 8007df8:	0591      	lsls	r1, r2, #22
 8007dfa:	d50f      	bpl.n	8007e1c <FLASH_FlushCaches+0x28>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8007dfc:	681a      	ldr	r2, [r3, #0]
 8007dfe:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8007e02:	601a      	str	r2, [r3, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8007e04:	681a      	ldr	r2, [r3, #0]
 8007e06:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007e0a:	601a      	str	r2, [r3, #0]
 8007e0c:	681a      	ldr	r2, [r3, #0]
 8007e0e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007e12:	601a      	str	r2, [r3, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8007e14:	681a      	ldr	r2, [r3, #0]
 8007e16:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007e1a:	601a      	str	r2, [r3, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8007e1c:	4b0a      	ldr	r3, [pc, #40]	; (8007e48 <FLASH_FlushCaches+0x54>)
 8007e1e:	681a      	ldr	r2, [r3, #0]
 8007e20:	0552      	lsls	r2, r2, #21
 8007e22:	d50f      	bpl.n	8007e44 <FLASH_FlushCaches+0x50>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8007e24:	681a      	ldr	r2, [r3, #0]
 8007e26:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007e2a:	601a      	str	r2, [r3, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8007e2c:	681a      	ldr	r2, [r3, #0]
 8007e2e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007e32:	601a      	str	r2, [r3, #0]
 8007e34:	681a      	ldr	r2, [r3, #0]
 8007e36:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007e3a:	601a      	str	r2, [r3, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8007e3c:	681a      	ldr	r2, [r3, #0]
 8007e3e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007e42:	601a      	str	r2, [r3, #0]
  }
}
 8007e44:	4770      	bx	lr
 8007e46:	bf00      	nop
 8007e48:	40023c00 	.word	0x40023c00

08007e4c <HAL_FLASHEx_Erase>:
{
 8007e4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  __HAL_LOCK(&pFlash);
 8007e50:	4e23      	ldr	r6, [pc, #140]	; (8007ee0 <HAL_FLASHEx_Erase+0x94>)
 8007e52:	7e33      	ldrb	r3, [r6, #24]
 8007e54:	2b01      	cmp	r3, #1
{
 8007e56:	4605      	mov	r5, r0
 8007e58:	4688      	mov	r8, r1
  __HAL_LOCK(&pFlash);
 8007e5a:	d03f      	beq.n	8007edc <HAL_FLASHEx_Erase+0x90>
 8007e5c:	2301      	movs	r3, #1
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8007e5e:	f24c 3050 	movw	r0, #50000	; 0xc350
  __HAL_LOCK(&pFlash);
 8007e62:	7633      	strb	r3, [r6, #24]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8007e64:	f7ff ff1e 	bl	8007ca4 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 8007e68:	4604      	mov	r4, r0
 8007e6a:	b9a8      	cbnz	r0, 8007e98 <HAL_FLASHEx_Erase+0x4c>
    *SectorError = 0xFFFFFFFFU;
 8007e6c:	f04f 33ff 	mov.w	r3, #4294967295
 8007e70:	f8c8 3000 	str.w	r3, [r8]
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8007e74:	682b      	ldr	r3, [r5, #0]
 8007e76:	2b01      	cmp	r3, #1
 8007e78:	d113      	bne.n	8007ea2 <HAL_FLASHEx_Erase+0x56>
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8007e7a:	7c28      	ldrb	r0, [r5, #16]
 8007e7c:	f7ff ff82 	bl	8007d84 <FLASH_MassErase.isra.0>
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8007e80:	f24c 3050 	movw	r0, #50000	; 0xc350
 8007e84:	f7ff ff0e 	bl	8007ca4 <FLASH_WaitForLastOperation>
      FLASH->CR &= (~FLASH_MER_BIT);
 8007e88:	4a16      	ldr	r2, [pc, #88]	; (8007ee4 <HAL_FLASHEx_Erase+0x98>)
 8007e8a:	6913      	ldr	r3, [r2, #16]
 8007e8c:	f023 0304 	bic.w	r3, r3, #4
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8007e90:	4604      	mov	r4, r0
      FLASH->CR &= (~FLASH_MER_BIT);
 8007e92:	6113      	str	r3, [r2, #16]
    FLASH_FlushCaches();    
 8007e94:	f7ff ffae 	bl	8007df4 <FLASH_FlushCaches>
  __HAL_UNLOCK(&pFlash);
 8007e98:	2300      	movs	r3, #0
 8007e9a:	7633      	strb	r3, [r6, #24]
}
 8007e9c:	4620      	mov	r0, r4
 8007e9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8007ea2:	68af      	ldr	r7, [r5, #8]
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8007ea4:	f8df 903c 	ldr.w	r9, [pc, #60]	; 8007ee4 <HAL_FLASHEx_Erase+0x98>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8007ea8:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 8007eac:	4413      	add	r3, r2
 8007eae:	42bb      	cmp	r3, r7
 8007eb0:	d9f0      	bls.n	8007e94 <HAL_FLASHEx_Erase+0x48>
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8007eb2:	7c29      	ldrb	r1, [r5, #16]
 8007eb4:	4638      	mov	r0, r7
 8007eb6:	f7ff ff77 	bl	8007da8 <FLASH_Erase_Sector>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8007eba:	f24c 3050 	movw	r0, #50000	; 0xc350
 8007ebe:	f7ff fef1 	bl	8007ca4 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8007ec2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007ec6:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8007eca:	f8c9 3010 	str.w	r3, [r9, #16]
        if(status != HAL_OK) 
 8007ece:	b118      	cbz	r0, 8007ed8 <HAL_FLASHEx_Erase+0x8c>
          *SectorError = index;
 8007ed0:	f8c8 7000 	str.w	r7, [r8]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8007ed4:	4604      	mov	r4, r0
          break;
 8007ed6:	e7dd      	b.n	8007e94 <HAL_FLASHEx_Erase+0x48>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8007ed8:	3701      	adds	r7, #1
 8007eda:	e7e5      	b.n	8007ea8 <HAL_FLASHEx_Erase+0x5c>
  __HAL_LOCK(&pFlash);
 8007edc:	2402      	movs	r4, #2
 8007ede:	e7dd      	b.n	8007e9c <HAL_FLASHEx_Erase+0x50>
 8007ee0:	2000996c 	.word	0x2000996c
 8007ee4:	40023c00 	.word	0x40023c00

08007ee8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007ee8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007eec:	f8df 919c 	ldr.w	r9, [pc, #412]	; 800808c <HAL_GPIO_Init+0x1a4>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007ef0:	4a64      	ldr	r2, [pc, #400]	; (8008084 <HAL_GPIO_Init+0x19c>)
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007ef2:	2300      	movs	r3, #0
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8007ef4:	680d      	ldr	r5, [r1, #0]
    ioposition = 0x01U << position;
 8007ef6:	2401      	movs	r4, #1
 8007ef8:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8007efa:	ea04 0c05 	and.w	ip, r4, r5
    if(iocurrent == ioposition)
 8007efe:	43ac      	bics	r4, r5
 8007f00:	f040 80ac 	bne.w	800805c <HAL_GPIO_Init+0x174>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8007f04:	684d      	ldr	r5, [r1, #4]
 8007f06:	f005 0403 	and.w	r4, r5, #3
 8007f0a:	ea4f 0843 	mov.w	r8, r3, lsl #1
 8007f0e:	2603      	movs	r6, #3
 8007f10:	1e67      	subs	r7, r4, #1
 8007f12:	fa06 f608 	lsl.w	r6, r6, r8
 8007f16:	2f01      	cmp	r7, #1
 8007f18:	ea6f 0606 	mvn.w	r6, r6
 8007f1c:	d834      	bhi.n	8007f88 <HAL_GPIO_Init+0xa0>
        temp = GPIOx->OSPEEDR; 
 8007f1e:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8007f20:	ea07 0e06 	and.w	lr, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007f24:	68cf      	ldr	r7, [r1, #12]
 8007f26:	fa07 f708 	lsl.w	r7, r7, r8
 8007f2a:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OSPEEDR = temp;
 8007f2e:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8007f30:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007f32:	ea27 0e0c 	bic.w	lr, r7, ip
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8007f36:	f3c5 1700 	ubfx	r7, r5, #4, #1
 8007f3a:	409f      	lsls	r7, r3
 8007f3c:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8007f40:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 8007f42:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8007f44:	ea07 0e06 	and.w	lr, r7, r6
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007f48:	688f      	ldr	r7, [r1, #8]
 8007f4a:	fa07 f708 	lsl.w	r7, r7, r8
 8007f4e:	ea47 070e 	orr.w	r7, r7, lr
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007f52:	2c02      	cmp	r4, #2
        GPIOx->PUPDR = temp;
 8007f54:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007f56:	d119      	bne.n	8007f8c <HAL_GPIO_Init+0xa4>
        temp = GPIOx->AFR[position >> 3U];
 8007f58:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8007f5c:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8007f60:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8007f64:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8007f68:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8007f6c:	f04f 0e0f 	mov.w	lr, #15
 8007f70:	fa0e fe0b 	lsl.w	lr, lr, fp
 8007f74:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8007f78:	690f      	ldr	r7, [r1, #16]
 8007f7a:	fa07 f70b 	lsl.w	r7, r7, fp
 8007f7e:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3U] = temp;
 8007f82:	f8ca 7020 	str.w	r7, [sl, #32]
 8007f86:	e001      	b.n	8007f8c <HAL_GPIO_Init+0xa4>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007f88:	2c03      	cmp	r4, #3
 8007f8a:	d1da      	bne.n	8007f42 <HAL_GPIO_Init+0x5a>
      temp = GPIOx->MODER;
 8007f8c:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007f8e:	fa04 f408 	lsl.w	r4, r4, r8
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8007f92:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007f94:	4326      	orrs	r6, r4
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8007f96:	00ec      	lsls	r4, r5, #3
      GPIOx->MODER = temp;
 8007f98:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8007f9a:	d55f      	bpl.n	800805c <HAL_GPIO_Init+0x174>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007f9c:	f04f 0a00 	mov.w	sl, #0
 8007fa0:	f8cd a004 	str.w	sl, [sp, #4]
 8007fa4:	f8d9 6044 	ldr.w	r6, [r9, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8007fa8:	4c37      	ldr	r4, [pc, #220]	; (8008088 <HAL_GPIO_Init+0x1a0>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007faa:	f446 4680 	orr.w	r6, r6, #16384	; 0x4000
 8007fae:	f8c9 6044 	str.w	r6, [r9, #68]	; 0x44
 8007fb2:	f8d9 6044 	ldr.w	r6, [r9, #68]	; 0x44
 8007fb6:	f406 4680 	and.w	r6, r6, #16384	; 0x4000
 8007fba:	9601      	str	r6, [sp, #4]
 8007fbc:	9e01      	ldr	r6, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8007fbe:	f023 0603 	bic.w	r6, r3, #3
 8007fc2:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 8007fc6:	f506 369c 	add.w	r6, r6, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8007fca:	f003 0e03 	and.w	lr, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8007fce:	f8d6 8008 	ldr.w	r8, [r6, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8007fd2:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8007fd6:	270f      	movs	r7, #15
 8007fd8:	fa07 f70e 	lsl.w	r7, r7, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8007fdc:	42a0      	cmp	r0, r4
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8007fde:	ea28 0707 	bic.w	r7, r8, r7
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8007fe2:	d042      	beq.n	800806a <HAL_GPIO_Init+0x182>
 8007fe4:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8007fe8:	42a0      	cmp	r0, r4
 8007fea:	d040      	beq.n	800806e <HAL_GPIO_Init+0x186>
 8007fec:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8007ff0:	42a0      	cmp	r0, r4
 8007ff2:	d03e      	beq.n	8008072 <HAL_GPIO_Init+0x18a>
 8007ff4:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8007ff8:	42a0      	cmp	r0, r4
 8007ffa:	d03c      	beq.n	8008076 <HAL_GPIO_Init+0x18e>
 8007ffc:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8008000:	42a0      	cmp	r0, r4
 8008002:	d03a      	beq.n	800807a <HAL_GPIO_Init+0x192>
 8008004:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8008008:	42a0      	cmp	r0, r4
 800800a:	d038      	beq.n	800807e <HAL_GPIO_Init+0x196>
 800800c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8008010:	42a0      	cmp	r0, r4
 8008012:	bf0c      	ite	eq
 8008014:	2406      	moveq	r4, #6
 8008016:	2407      	movne	r4, #7
 8008018:	fa04 f40e 	lsl.w	r4, r4, lr
 800801c:	433c      	orrs	r4, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 800801e:	60b4      	str	r4, [r6, #8]
        temp = EXTI->IMR;
 8008020:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8008022:	ea6f 060c 	mvn.w	r6, ip
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8008026:	03ef      	lsls	r7, r5, #15
        temp &= ~((uint32_t)iocurrent);
 8008028:	bf54      	ite	pl
 800802a:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 800802c:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->IMR = temp;
 8008030:	6014      	str	r4, [r2, #0]

        temp = EXTI->EMR;
 8008032:	6854      	ldr	r4, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8008034:	03af      	lsls	r7, r5, #14
        temp &= ~((uint32_t)iocurrent);
 8008036:	bf54      	ite	pl
 8008038:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 800803a:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->EMR = temp;
 800803e:	6054      	str	r4, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8008040:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8008042:	02ef      	lsls	r7, r5, #11
        temp &= ~((uint32_t)iocurrent);
 8008044:	bf54      	ite	pl
 8008046:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8008048:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->RTSR = temp;
 800804c:	6094      	str	r4, [r2, #8]

        temp = EXTI->FTSR;
 800804e:	68d4      	ldr	r4, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8008050:	02ad      	lsls	r5, r5, #10
        temp &= ~((uint32_t)iocurrent);
 8008052:	bf54      	ite	pl
 8008054:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8008056:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->FTSR = temp;
 800805a:	60d4      	str	r4, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800805c:	3301      	adds	r3, #1
 800805e:	2b10      	cmp	r3, #16
 8008060:	f47f af48 	bne.w	8007ef4 <HAL_GPIO_Init+0xc>
      }
    }
  }
}
 8008064:	b003      	add	sp, #12
 8008066:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800806a:	4654      	mov	r4, sl
 800806c:	e7d4      	b.n	8008018 <HAL_GPIO_Init+0x130>
 800806e:	2401      	movs	r4, #1
 8008070:	e7d2      	b.n	8008018 <HAL_GPIO_Init+0x130>
 8008072:	2402      	movs	r4, #2
 8008074:	e7d0      	b.n	8008018 <HAL_GPIO_Init+0x130>
 8008076:	2403      	movs	r4, #3
 8008078:	e7ce      	b.n	8008018 <HAL_GPIO_Init+0x130>
 800807a:	2404      	movs	r4, #4
 800807c:	e7cc      	b.n	8008018 <HAL_GPIO_Init+0x130>
 800807e:	2405      	movs	r4, #5
 8008080:	e7ca      	b.n	8008018 <HAL_GPIO_Init+0x130>
 8008082:	bf00      	nop
 8008084:	40013c00 	.word	0x40013c00
 8008088:	40020000 	.word	0x40020000
 800808c:	40023800 	.word	0x40023800

08008090 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8008090:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      tmp = SYSCFG->EXTICR[position >> 2U];
      tmp &= (0x0FU << (4U * (position & 0x03U)));
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8008094:	4c41      	ldr	r4, [pc, #260]	; (800819c <HAL_GPIO_DeInit+0x10c>)
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8008096:	f8df a10c 	ldr.w	sl, [pc, #268]	; 80081a4 <HAL_GPIO_DeInit+0x114>
 800809a:	f8df b10c 	ldr.w	fp, [pc, #268]	; 80081a8 <HAL_GPIO_DeInit+0x118>
  for(position = 0U; position < GPIO_NUMBER; position++)
 800809e:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 80080a0:	f04f 0901 	mov.w	r9, #1
 80080a4:	fa09 fe03 	lsl.w	lr, r9, r3
    if(iocurrent == ioposition)
 80080a8:	ea3e 0201 	bics.w	r2, lr, r1
    iocurrent = (GPIO_Pin) & ioposition;
 80080ac:	ea0e 0701 	and.w	r7, lr, r1
    if(iocurrent == ioposition)
 80080b0:	d163      	bne.n	800817a <HAL_GPIO_DeInit+0xea>
      tmp = SYSCFG->EXTICR[position >> 2U];
 80080b2:	f023 0503 	bic.w	r5, r3, #3
 80080b6:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
 80080ba:	f505 359c 	add.w	r5, r5, #79872	; 0x13800
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80080be:	f003 0c03 	and.w	ip, r3, #3
      tmp = SYSCFG->EXTICR[position >> 2U];
 80080c2:	68aa      	ldr	r2, [r5, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80080c4:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 80080c8:	260f      	movs	r6, #15
 80080ca:	fa06 f60c 	lsl.w	r6, r6, ip
 80080ce:	ea06 0802 	and.w	r8, r6, r2
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80080d2:	4a33      	ldr	r2, [pc, #204]	; (80081a0 <HAL_GPIO_DeInit+0x110>)
 80080d4:	4290      	cmp	r0, r2
 80080d6:	d055      	beq.n	8008184 <HAL_GPIO_DeInit+0xf4>
 80080d8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80080dc:	4290      	cmp	r0, r2
 80080de:	d053      	beq.n	8008188 <HAL_GPIO_DeInit+0xf8>
 80080e0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80080e4:	4290      	cmp	r0, r2
 80080e6:	d051      	beq.n	800818c <HAL_GPIO_DeInit+0xfc>
 80080e8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80080ec:	4290      	cmp	r0, r2
 80080ee:	d04f      	beq.n	8008190 <HAL_GPIO_DeInit+0x100>
 80080f0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80080f4:	4290      	cmp	r0, r2
 80080f6:	d04d      	beq.n	8008194 <HAL_GPIO_DeInit+0x104>
 80080f8:	4550      	cmp	r0, sl
 80080fa:	d04d      	beq.n	8008198 <HAL_GPIO_DeInit+0x108>
 80080fc:	4558      	cmp	r0, fp
 80080fe:	bf0c      	ite	eq
 8008100:	2206      	moveq	r2, #6
 8008102:	2207      	movne	r2, #7
 8008104:	fa02 f20c 	lsl.w	r2, r2, ip
 8008108:	4542      	cmp	r2, r8
 800810a:	d113      	bne.n	8008134 <HAL_GPIO_DeInit+0xa4>
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800810c:	6822      	ldr	r2, [r4, #0]
 800810e:	ea22 0207 	bic.w	r2, r2, r7
 8008112:	6022      	str	r2, [r4, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8008114:	6862      	ldr	r2, [r4, #4]
 8008116:	ea22 0207 	bic.w	r2, r2, r7
 800811a:	6062      	str	r2, [r4, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800811c:	68a2      	ldr	r2, [r4, #8]
 800811e:	ea22 0207 	bic.w	r2, r2, r7
 8008122:	60a2      	str	r2, [r4, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8008124:	68e2      	ldr	r2, [r4, #12]
 8008126:	ea22 0707 	bic.w	r7, r2, r7
 800812a:	60e7      	str	r7, [r4, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800812c:	68aa      	ldr	r2, [r5, #8]
 800812e:	ea22 0606 	bic.w	r6, r2, r6
 8008132:	60ae      	str	r6, [r5, #8]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8008134:	6805      	ldr	r5, [r0, #0]
 8008136:	2603      	movs	r6, #3
 8008138:	005a      	lsls	r2, r3, #1
 800813a:	fa06 f202 	lsl.w	r2, r6, r2
 800813e:	ea25 0502 	bic.w	r5, r5, r2
 8008142:	6005      	str	r5, [r0, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8008144:	fa23 f506 	lsr.w	r5, r3, r6
 8008148:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 800814c:	f003 0c07 	and.w	ip, r3, #7
 8008150:	6a2e      	ldr	r6, [r5, #32]
 8008152:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8008156:	270f      	movs	r7, #15
 8008158:	fa07 f70c 	lsl.w	r7, r7, ip
 800815c:	ea26 0707 	bic.w	r7, r6, r7
 8008160:	622f      	str	r7, [r5, #32]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8008162:	68c5      	ldr	r5, [r0, #12]
 8008164:	ea25 0502 	bic.w	r5, r5, r2
 8008168:	60c5      	str	r5, [r0, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800816a:	6845      	ldr	r5, [r0, #4]
 800816c:	ea25 050e 	bic.w	r5, r5, lr
 8008170:	6045      	str	r5, [r0, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8008172:	6885      	ldr	r5, [r0, #8]
 8008174:	ea25 0202 	bic.w	r2, r5, r2
 8008178:	6082      	str	r2, [r0, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800817a:	3301      	adds	r3, #1
 800817c:	2b10      	cmp	r3, #16
 800817e:	d191      	bne.n	80080a4 <HAL_GPIO_DeInit+0x14>
    }
  }
}
 8008180:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8008184:	2200      	movs	r2, #0
 8008186:	e7bd      	b.n	8008104 <HAL_GPIO_DeInit+0x74>
 8008188:	2201      	movs	r2, #1
 800818a:	e7bb      	b.n	8008104 <HAL_GPIO_DeInit+0x74>
 800818c:	2202      	movs	r2, #2
 800818e:	e7b9      	b.n	8008104 <HAL_GPIO_DeInit+0x74>
 8008190:	2203      	movs	r2, #3
 8008192:	e7b7      	b.n	8008104 <HAL_GPIO_DeInit+0x74>
 8008194:	2204      	movs	r2, #4
 8008196:	e7b5      	b.n	8008104 <HAL_GPIO_DeInit+0x74>
 8008198:	2205      	movs	r2, #5
 800819a:	e7b3      	b.n	8008104 <HAL_GPIO_DeInit+0x74>
 800819c:	40013c00 	.word	0x40013c00
 80081a0:	40020000 	.word	0x40020000
 80081a4:	40021400 	.word	0x40021400
 80081a8:	40021800 	.word	0x40021800

080081ac <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80081ac:	6903      	ldr	r3, [r0, #16]
 80081ae:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 80081b0:	bf14      	ite	ne
 80081b2:	2001      	movne	r0, #1
 80081b4:	2000      	moveq	r0, #0
 80081b6:	4770      	bx	lr

080081b8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80081b8:	b10a      	cbz	r2, 80081be <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80081ba:	6181      	str	r1, [r0, #24]
  }
}
 80081bc:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80081be:	0409      	lsls	r1, r1, #16
 80081c0:	e7fb      	b.n	80081ba <HAL_GPIO_WritePin+0x2>
	...

080081c4 <HAL_GPIO_EXTI_IRQHandler>:
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80081c4:	4a04      	ldr	r2, [pc, #16]	; (80081d8 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 80081c6:	6951      	ldr	r1, [r2, #20]
 80081c8:	4201      	tst	r1, r0
{
 80081ca:	b508      	push	{r3, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80081cc:	d002      	beq.n	80081d4 <HAL_GPIO_EXTI_IRQHandler+0x10>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80081ce:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80081d0:	f00b ff08 	bl	8013fe4 <HAL_GPIO_EXTI_Callback>
  }
}
 80081d4:	bd08      	pop	{r3, pc}
 80081d6:	bf00      	nop
 80081d8:	40013c00 	.word	0x40013c00

080081dc <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80081dc:	6801      	ldr	r1, [r0, #0]
 80081de:	694b      	ldr	r3, [r1, #20]
 80081e0:	f413 6380 	ands.w	r3, r3, #1024	; 0x400
 80081e4:	f04f 0200 	mov.w	r2, #0
 80081e8:	d010      	beq.n	800820c <I2C_IsAcknowledgeFailed+0x30>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80081ea:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 80081ee:	614b      	str	r3, [r1, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
    hi2c->State               = HAL_I2C_STATE_READY;
 80081f0:	2320      	movs	r3, #32
    hi2c->PreviousState       = I2C_STATE_NONE;
 80081f2:	6302      	str	r2, [r0, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80081f4:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80081f8:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80081fc:	6c03      	ldr	r3, [r0, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80081fe:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008202:	f043 0304 	orr.w	r3, r3, #4
 8008206:	6403      	str	r3, [r0, #64]	; 0x40

    return HAL_ERROR;
 8008208:	2001      	movs	r0, #1
 800820a:	4770      	bx	lr
  }
  return HAL_OK;
 800820c:	4618      	mov	r0, r3
}
 800820e:	4770      	bx	lr

08008210 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 8008210:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008214:	4604      	mov	r4, r0
 8008216:	460f      	mov	r7, r1
 8008218:	4616      	mov	r6, r2
 800821a:	4698      	mov	r8, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800821c:	6825      	ldr	r5, [r4, #0]
 800821e:	6968      	ldr	r0, [r5, #20]
 8008220:	ea27 0000 	bic.w	r0, r7, r0
 8008224:	b280      	uxth	r0, r0
 8008226:	b1b8      	cbz	r0, 8008258 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x48>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008228:	696b      	ldr	r3, [r5, #20]
 800822a:	055a      	lsls	r2, r3, #21
 800822c:	d516      	bpl.n	800825c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x4c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800822e:	682b      	ldr	r3, [r5, #0]
 8008230:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008234:	602b      	str	r3, [r5, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008236:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 800823a:	616b      	str	r3, [r5, #20]
      hi2c->State               = HAL_I2C_STATE_READY;
 800823c:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 800823e:	2300      	movs	r3, #0
 8008240:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008242:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008246:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800824a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800824c:	f042 0204 	orr.w	r2, r2, #4
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008250:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8008252:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 8008256:	2001      	movs	r0, #1
}
 8008258:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 800825c:	1c73      	adds	r3, r6, #1
 800825e:	d0de      	beq.n	800821e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xe>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008260:	f7ff f994 	bl	800758c <HAL_GetTick>
 8008264:	eba0 0008 	sub.w	r0, r0, r8
 8008268:	42b0      	cmp	r0, r6
 800826a:	d801      	bhi.n	8008270 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x60>
 800826c:	2e00      	cmp	r6, #0
 800826e:	d1d5      	bne.n	800821c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008270:	2300      	movs	r3, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 8008272:	2220      	movs	r2, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008274:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008276:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800827a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800827e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8008280:	f042 0220 	orr.w	r2, r2, #32
 8008284:	e7e4      	b.n	8008250 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x40>

08008286 <I2C_WaitOnBTFFlagUntilTimeout>:
{
 8008286:	b570      	push	{r4, r5, r6, lr}
 8008288:	4604      	mov	r4, r0
 800828a:	460d      	mov	r5, r1
 800828c:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800828e:	6823      	ldr	r3, [r4, #0]
 8008290:	695b      	ldr	r3, [r3, #20]
 8008292:	075b      	lsls	r3, r3, #29
 8008294:	d501      	bpl.n	800829a <I2C_WaitOnBTFFlagUntilTimeout+0x14>
  return HAL_OK;
 8008296:	2000      	movs	r0, #0
}
 8008298:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800829a:	4620      	mov	r0, r4
 800829c:	f7ff ff9e 	bl	80081dc <I2C_IsAcknowledgeFailed>
 80082a0:	b9a8      	cbnz	r0, 80082ce <I2C_WaitOnBTFFlagUntilTimeout+0x48>
    if (Timeout != HAL_MAX_DELAY)
 80082a2:	1c6a      	adds	r2, r5, #1
 80082a4:	d0f3      	beq.n	800828e <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80082a6:	f7ff f971 	bl	800758c <HAL_GetTick>
 80082aa:	1b80      	subs	r0, r0, r6
 80082ac:	42a8      	cmp	r0, r5
 80082ae:	d801      	bhi.n	80082b4 <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 80082b0:	2d00      	cmp	r5, #0
 80082b2:	d1ec      	bne.n	800828e <I2C_WaitOnBTFFlagUntilTimeout+0x8>
        hi2c->PreviousState     = I2C_STATE_NONE;
 80082b4:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 80082b6:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 80082b8:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80082ba:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80082be:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80082c2:	6c22      	ldr	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80082c4:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80082c8:	f042 0220 	orr.w	r2, r2, #32
 80082cc:	6422      	str	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 80082ce:	2001      	movs	r0, #1
 80082d0:	e7e2      	b.n	8008298 <I2C_WaitOnBTFFlagUntilTimeout+0x12>

080082d2 <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 80082d2:	b570      	push	{r4, r5, r6, lr}
 80082d4:	4604      	mov	r4, r0
 80082d6:	460d      	mov	r5, r1
 80082d8:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80082da:	6821      	ldr	r1, [r4, #0]
 80082dc:	694b      	ldr	r3, [r1, #20]
 80082de:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 80082e2:	d001      	beq.n	80082e8 <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
  return HAL_OK;
 80082e4:	2000      	movs	r0, #0
 80082e6:	e010      	b.n	800830a <I2C_WaitOnRXNEFlagUntilTimeout+0x38>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80082e8:	694a      	ldr	r2, [r1, #20]
 80082ea:	06d2      	lsls	r2, r2, #27
 80082ec:	d50e      	bpl.n	800830c <I2C_WaitOnRXNEFlagUntilTimeout+0x3a>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80082ee:	f06f 0210 	mvn.w	r2, #16
 80082f2:	614a      	str	r2, [r1, #20]
      hi2c->State               = HAL_I2C_STATE_READY;
 80082f4:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 80082f6:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80082f8:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80082fc:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8008300:	6c22      	ldr	r2, [r4, #64]	; 0x40
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8008302:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8008304:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 8008308:	2001      	movs	r0, #1
}
 800830a:	bd70      	pop	{r4, r5, r6, pc}
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800830c:	f7ff f93e 	bl	800758c <HAL_GetTick>
 8008310:	1b80      	subs	r0, r0, r6
 8008312:	42a8      	cmp	r0, r5
 8008314:	d801      	bhi.n	800831a <I2C_WaitOnRXNEFlagUntilTimeout+0x48>
 8008316:	2d00      	cmp	r5, #0
 8008318:	d1df      	bne.n	80082da <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
        hi2c->PreviousState     = I2C_STATE_NONE;
 800831a:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 800831c:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 800831e:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8008320:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8008324:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8008328:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800832a:	f042 0220 	orr.w	r2, r2, #32
 800832e:	e7e8      	b.n	8008302 <I2C_WaitOnRXNEFlagUntilTimeout+0x30>

08008330 <I2C_WaitOnFlagUntilTimeout>:
{
 8008330:	e92d 46f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r9, sl, lr}
 8008334:	4606      	mov	r6, r0
 8008336:	460f      	mov	r7, r1
 8008338:	4691      	mov	r9, r2
 800833a:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800833c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008340:	6833      	ldr	r3, [r6, #0]
 8008342:	f1ba 0f01 	cmp.w	sl, #1
 8008346:	bf0c      	ite	eq
 8008348:	695c      	ldreq	r4, [r3, #20]
 800834a:	699c      	ldrne	r4, [r3, #24]
 800834c:	ea27 0404 	bic.w	r4, r7, r4
 8008350:	b2a4      	uxth	r4, r4
 8008352:	fab4 f484 	clz	r4, r4
 8008356:	0964      	lsrs	r4, r4, #5
 8008358:	45a1      	cmp	r9, r4
 800835a:	d001      	beq.n	8008360 <I2C_WaitOnFlagUntilTimeout+0x30>
  return HAL_OK;
 800835c:	2000      	movs	r0, #0
 800835e:	e017      	b.n	8008390 <I2C_WaitOnFlagUntilTimeout+0x60>
    if (Timeout != HAL_MAX_DELAY)
 8008360:	1c6a      	adds	r2, r5, #1
 8008362:	d0ee      	beq.n	8008342 <I2C_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008364:	f7ff f912 	bl	800758c <HAL_GetTick>
 8008368:	9b08      	ldr	r3, [sp, #32]
 800836a:	1ac0      	subs	r0, r0, r3
 800836c:	42a8      	cmp	r0, r5
 800836e:	d801      	bhi.n	8008374 <I2C_WaitOnFlagUntilTimeout+0x44>
 8008370:	2d00      	cmp	r5, #0
 8008372:	d1e5      	bne.n	8008340 <I2C_WaitOnFlagUntilTimeout+0x10>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8008374:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8008376:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8008378:	6333      	str	r3, [r6, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800837a:	f886 203d 	strb.w	r2, [r6, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800837e:	f886 303e 	strb.w	r3, [r6, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8008382:	6c32      	ldr	r2, [r6, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8008384:	f886 303c 	strb.w	r3, [r6, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8008388:	f042 0220 	orr.w	r2, r2, #32
 800838c:	6432      	str	r2, [r6, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800838e:	2001      	movs	r0, #1
}
 8008390:	e8bd 86f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r9, sl, pc}

08008394 <I2C_WaitOnTXEFlagUntilTimeout>:
{
 8008394:	b570      	push	{r4, r5, r6, lr}
 8008396:	4604      	mov	r4, r0
 8008398:	460d      	mov	r5, r1
 800839a:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800839c:	6823      	ldr	r3, [r4, #0]
 800839e:	695b      	ldr	r3, [r3, #20]
 80083a0:	061b      	lsls	r3, r3, #24
 80083a2:	d501      	bpl.n	80083a8 <I2C_WaitOnTXEFlagUntilTimeout+0x14>
  return HAL_OK;
 80083a4:	2000      	movs	r0, #0
}
 80083a6:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80083a8:	4620      	mov	r0, r4
 80083aa:	f7ff ff17 	bl	80081dc <I2C_IsAcknowledgeFailed>
 80083ae:	b9a8      	cbnz	r0, 80083dc <I2C_WaitOnTXEFlagUntilTimeout+0x48>
    if (Timeout != HAL_MAX_DELAY)
 80083b0:	1c6a      	adds	r2, r5, #1
 80083b2:	d0f3      	beq.n	800839c <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80083b4:	f7ff f8ea 	bl	800758c <HAL_GetTick>
 80083b8:	1b80      	subs	r0, r0, r6
 80083ba:	42a8      	cmp	r0, r5
 80083bc:	d801      	bhi.n	80083c2 <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 80083be:	2d00      	cmp	r5, #0
 80083c0:	d1ec      	bne.n	800839c <I2C_WaitOnTXEFlagUntilTimeout+0x8>
        hi2c->PreviousState     = I2C_STATE_NONE;
 80083c2:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 80083c4:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 80083c6:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80083c8:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80083cc:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80083d0:	6c22      	ldr	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80083d2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80083d6:	f042 0220 	orr.w	r2, r2, #32
 80083da:	6422      	str	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 80083dc:	2001      	movs	r0, #1
 80083de:	e7e2      	b.n	80083a6 <I2C_WaitOnTXEFlagUntilTimeout+0x12>

080083e0 <I2C_RequestMemoryWrite>:
{
 80083e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80083e4:	4615      	mov	r5, r2
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80083e6:	6802      	ldr	r2, [r0, #0]
{
 80083e8:	b085      	sub	sp, #20
 80083ea:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 80083ee:	4699      	mov	r9, r3
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80083f0:	6813      	ldr	r3, [r2, #0]
 80083f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80083f6:	6013      	str	r3, [r2, #0]
{
 80083f8:	460e      	mov	r6, r1
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80083fa:	463b      	mov	r3, r7
 80083fc:	f8cd 8000 	str.w	r8, [sp]
 8008400:	2200      	movs	r2, #0
 8008402:	f04f 1101 	mov.w	r1, #65537	; 0x10001
{
 8008406:	4604      	mov	r4, r0
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008408:	f7ff ff92 	bl	8008330 <I2C_WaitOnFlagUntilTimeout>
 800840c:	6823      	ldr	r3, [r4, #0]
 800840e:	b138      	cbz	r0, 8008420 <I2C_RequestMemoryWrite+0x40>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	05db      	lsls	r3, r3, #23
 8008414:	d502      	bpl.n	800841c <I2C_RequestMemoryWrite+0x3c>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008416:	f44f 7300 	mov.w	r3, #512	; 0x200
 800841a:	6423      	str	r3, [r4, #64]	; 0x40
    return HAL_TIMEOUT;
 800841c:	2003      	movs	r0, #3
 800841e:	e00a      	b.n	8008436 <I2C_RequestMemoryWrite+0x56>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008420:	f006 06fe 	and.w	r6, r6, #254	; 0xfe
 8008424:	611e      	str	r6, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008426:	4919      	ldr	r1, [pc, #100]	; (800848c <I2C_RequestMemoryWrite+0xac>)
 8008428:	4643      	mov	r3, r8
 800842a:	463a      	mov	r2, r7
 800842c:	4620      	mov	r0, r4
 800842e:	f7ff feef 	bl	8008210 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008432:	b118      	cbz	r0, 800843c <I2C_RequestMemoryWrite+0x5c>
      return HAL_ERROR;
 8008434:	2001      	movs	r0, #1
}
 8008436:	b005      	add	sp, #20
 8008438:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800843c:	6823      	ldr	r3, [r4, #0]
 800843e:	9003      	str	r0, [sp, #12]
 8008440:	695a      	ldr	r2, [r3, #20]
 8008442:	9203      	str	r2, [sp, #12]
 8008444:	699b      	ldr	r3, [r3, #24]
 8008446:	9303      	str	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008448:	4642      	mov	r2, r8
 800844a:	4639      	mov	r1, r7
 800844c:	4620      	mov	r0, r4
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800844e:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008450:	f7ff ffa0 	bl	8008394 <I2C_WaitOnTXEFlagUntilTimeout>
 8008454:	b140      	cbz	r0, 8008468 <I2C_RequestMemoryWrite+0x88>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008456:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008458:	2b04      	cmp	r3, #4
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800845a:	bf01      	itttt	eq
 800845c:	6822      	ldreq	r2, [r4, #0]
 800845e:	6813      	ldreq	r3, [r2, #0]
 8008460:	f443 7300 	orreq.w	r3, r3, #512	; 0x200
 8008464:	6013      	streq	r3, [r2, #0]
 8008466:	e7e5      	b.n	8008434 <I2C_RequestMemoryWrite+0x54>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008468:	f1b9 0f01 	cmp.w	r9, #1
 800846c:	6823      	ldr	r3, [r4, #0]
 800846e:	d102      	bne.n	8008476 <I2C_RequestMemoryWrite+0x96>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008470:	b2ed      	uxtb	r5, r5
 8008472:	611d      	str	r5, [r3, #16]
 8008474:	e7df      	b.n	8008436 <I2C_RequestMemoryWrite+0x56>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8008476:	0a2a      	lsrs	r2, r5, #8
 8008478:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800847a:	4639      	mov	r1, r7
 800847c:	4642      	mov	r2, r8
 800847e:	4620      	mov	r0, r4
 8008480:	f7ff ff88 	bl	8008394 <I2C_WaitOnTXEFlagUntilTimeout>
 8008484:	2800      	cmp	r0, #0
 8008486:	d1e6      	bne.n	8008456 <I2C_RequestMemoryWrite+0x76>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008488:	6823      	ldr	r3, [r4, #0]
 800848a:	e7f1      	b.n	8008470 <I2C_RequestMemoryWrite+0x90>
 800848c:	00010002 	.word	0x00010002

08008490 <I2C_RequestMemoryRead>:
{
 8008490:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008494:	469a      	mov	sl, r3
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008496:	6803      	ldr	r3, [r0, #0]
{
 8008498:	4615      	mov	r5, r2
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800849a:	681a      	ldr	r2, [r3, #0]
 800849c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80084a0:	601a      	str	r2, [r3, #0]
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80084a2:	681a      	ldr	r2, [r3, #0]
{
 80084a4:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80084a8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80084ac:	601a      	str	r2, [r3, #0]
{
 80084ae:	460e      	mov	r6, r1
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80084b0:	463b      	mov	r3, r7
 80084b2:	f8cd 8000 	str.w	r8, [sp]
 80084b6:	2200      	movs	r2, #0
 80084b8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
{
 80084bc:	4604      	mov	r4, r0
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80084be:	f7ff ff37 	bl	8008330 <I2C_WaitOnFlagUntilTimeout>
 80084c2:	6823      	ldr	r3, [r4, #0]
 80084c4:	b148      	cbz	r0, 80084da <I2C_RequestMemoryRead+0x4a>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80084c6:	681b      	ldr	r3, [r3, #0]
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80084c8:	05db      	lsls	r3, r3, #23
 80084ca:	d502      	bpl.n	80084d2 <I2C_RequestMemoryRead+0x42>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80084cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80084d0:	6423      	str	r3, [r4, #64]	; 0x40
    return HAL_TIMEOUT;
 80084d2:	2003      	movs	r0, #3
}
 80084d4:	b004      	add	sp, #16
 80084d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80084da:	fa5f f986 	uxtb.w	r9, r6
 80084de:	f006 06fe 	and.w	r6, r6, #254	; 0xfe
 80084e2:	611e      	str	r6, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80084e4:	492a      	ldr	r1, [pc, #168]	; (8008590 <I2C_RequestMemoryRead+0x100>)
 80084e6:	4643      	mov	r3, r8
 80084e8:	463a      	mov	r2, r7
 80084ea:	4620      	mov	r0, r4
 80084ec:	f7ff fe90 	bl	8008210 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80084f0:	b108      	cbz	r0, 80084f6 <I2C_RequestMemoryRead+0x66>
    return HAL_ERROR;
 80084f2:	2001      	movs	r0, #1
 80084f4:	e7ee      	b.n	80084d4 <I2C_RequestMemoryRead+0x44>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80084f6:	6823      	ldr	r3, [r4, #0]
 80084f8:	9003      	str	r0, [sp, #12]
 80084fa:	695a      	ldr	r2, [r3, #20]
 80084fc:	9203      	str	r2, [sp, #12]
 80084fe:	699b      	ldr	r3, [r3, #24]
 8008500:	9303      	str	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008502:	4642      	mov	r2, r8
 8008504:	4639      	mov	r1, r7
 8008506:	4620      	mov	r0, r4
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008508:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800850a:	f7ff ff43 	bl	8008394 <I2C_WaitOnTXEFlagUntilTimeout>
 800850e:	b140      	cbz	r0, 8008522 <I2C_RequestMemoryRead+0x92>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008510:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008512:	2b04      	cmp	r3, #4
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008514:	bf01      	itttt	eq
 8008516:	6822      	ldreq	r2, [r4, #0]
 8008518:	6813      	ldreq	r3, [r2, #0]
 800851a:	f443 7300 	orreq.w	r3, r3, #512	; 0x200
 800851e:	6013      	streq	r3, [r2, #0]
 8008520:	e7e7      	b.n	80084f2 <I2C_RequestMemoryRead+0x62>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008522:	f1ba 0f01 	cmp.w	sl, #1
 8008526:	6823      	ldr	r3, [r4, #0]
 8008528:	d11a      	bne.n	8008560 <I2C_RequestMemoryRead+0xd0>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800852a:	b2ed      	uxtb	r5, r5
 800852c:	611d      	str	r5, [r3, #16]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800852e:	4642      	mov	r2, r8
 8008530:	4639      	mov	r1, r7
 8008532:	4620      	mov	r0, r4
 8008534:	f7ff ff2e 	bl	8008394 <I2C_WaitOnTXEFlagUntilTimeout>
 8008538:	2800      	cmp	r0, #0
 800853a:	d1e9      	bne.n	8008510 <I2C_RequestMemoryRead+0x80>
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800853c:	6822      	ldr	r2, [r4, #0]
 800853e:	6813      	ldr	r3, [r2, #0]
 8008540:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008544:	6013      	str	r3, [r2, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008546:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800854a:	4602      	mov	r2, r0
 800854c:	f8cd 8000 	str.w	r8, [sp]
 8008550:	463b      	mov	r3, r7
 8008552:	4620      	mov	r0, r4
 8008554:	f7ff feec 	bl	8008330 <I2C_WaitOnFlagUntilTimeout>
 8008558:	6822      	ldr	r2, [r4, #0]
 800855a:	b160      	cbz	r0, 8008576 <I2C_RequestMemoryRead+0xe6>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800855c:	6813      	ldr	r3, [r2, #0]
 800855e:	e7b3      	b.n	80084c8 <I2C_RequestMemoryRead+0x38>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8008560:	0a2a      	lsrs	r2, r5, #8
 8008562:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008564:	4639      	mov	r1, r7
 8008566:	4642      	mov	r2, r8
 8008568:	4620      	mov	r0, r4
 800856a:	f7ff ff13 	bl	8008394 <I2C_WaitOnTXEFlagUntilTimeout>
 800856e:	2800      	cmp	r0, #0
 8008570:	d1ce      	bne.n	8008510 <I2C_RequestMemoryRead+0x80>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008572:	6823      	ldr	r3, [r4, #0]
 8008574:	e7d9      	b.n	800852a <I2C_RequestMemoryRead+0x9a>
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8008576:	f049 0301 	orr.w	r3, r9, #1
 800857a:	6113      	str	r3, [r2, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800857c:	4904      	ldr	r1, [pc, #16]	; (8008590 <I2C_RequestMemoryRead+0x100>)
 800857e:	4643      	mov	r3, r8
 8008580:	463a      	mov	r2, r7
 8008582:	4620      	mov	r0, r4
 8008584:	f7ff fe44 	bl	8008210 <I2C_WaitOnMasterAddressFlagUntilTimeout>
    return HAL_TIMEOUT;
 8008588:	3800      	subs	r0, #0
 800858a:	bf18      	it	ne
 800858c:	2001      	movne	r0, #1
 800858e:	e7a1      	b.n	80084d4 <I2C_RequestMemoryRead+0x44>
 8008590:	00010002 	.word	0x00010002

08008594 <HAL_I2C_MspInit>:
}
 8008594:	4770      	bx	lr
	...

08008598 <HAL_I2C_Init>:
{
 8008598:	b570      	push	{r4, r5, r6, lr}
  if (hi2c == NULL)
 800859a:	4604      	mov	r4, r0
 800859c:	b908      	cbnz	r0, 80085a2 <HAL_I2C_Init+0xa>
    return HAL_ERROR;
 800859e:	2001      	movs	r0, #1
}
 80085a0:	bd70      	pop	{r4, r5, r6, pc}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 80085a2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80085a6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80085aa:	b91b      	cbnz	r3, 80085b4 <HAL_I2C_Init+0x1c>
    hi2c->Lock = HAL_UNLOCKED;
 80085ac:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 80085b0:	f7ff fff0 	bl	8008594 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 80085b4:	2324      	movs	r3, #36	; 0x24
 80085b6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 80085ba:	6823      	ldr	r3, [r4, #0]
 80085bc:	681a      	ldr	r2, [r3, #0]
 80085be:	f022 0201 	bic.w	r2, r2, #1
 80085c2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80085c4:	681a      	ldr	r2, [r3, #0]
 80085c6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80085ca:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80085cc:	681a      	ldr	r2, [r3, #0]
 80085ce:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80085d2:	601a      	str	r2, [r3, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80085d4:	f000 fd2e 	bl	8009034 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80085d8:	4a3f      	ldr	r2, [pc, #252]	; (80086d8 <HAL_I2C_Init+0x140>)
 80085da:	6863      	ldr	r3, [r4, #4]
 80085dc:	4293      	cmp	r3, r2
 80085de:	bf94      	ite	ls
 80085e0:	4a3e      	ldrls	r2, [pc, #248]	; (80086dc <HAL_I2C_Init+0x144>)
 80085e2:	4a3f      	ldrhi	r2, [pc, #252]	; (80086e0 <HAL_I2C_Init+0x148>)
 80085e4:	4290      	cmp	r0, r2
 80085e6:	bf8c      	ite	hi
 80085e8:	2200      	movhi	r2, #0
 80085ea:	2201      	movls	r2, #1
 80085ec:	2a00      	cmp	r2, #0
 80085ee:	d1d6      	bne.n	800859e <HAL_I2C_Init+0x6>
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80085f0:	6821      	ldr	r1, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 80085f2:	4e3c      	ldr	r6, [pc, #240]	; (80086e4 <HAL_I2C_Init+0x14c>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80085f4:	684a      	ldr	r2, [r1, #4]
  freqrange = I2C_FREQRANGE(pclk1);
 80085f6:	fbb0 f6f6 	udiv	r6, r0, r6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80085fa:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 80085fe:	4332      	orrs	r2, r6
 8008600:	604a      	str	r2, [r1, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8008602:	4a35      	ldr	r2, [pc, #212]	; (80086d8 <HAL_I2C_Init+0x140>)
 8008604:	6a0d      	ldr	r5, [r1, #32]
 8008606:	4293      	cmp	r3, r2
 8008608:	bf84      	itt	hi
 800860a:	f44f 7296 	movhi.w	r2, #300	; 0x12c
 800860e:	4372      	mulhi	r2, r6
 8008610:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 8008614:	bf91      	iteee	ls
 8008616:	1c72      	addls	r2, r6, #1
 8008618:	f44f 767a 	movhi.w	r6, #1000	; 0x3e8
 800861c:	fbb2 f2f6 	udivhi	r2, r2, r6
 8008620:	3201      	addhi	r2, #1
 8008622:	432a      	orrs	r2, r5
 8008624:	620a      	str	r2, [r1, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8008626:	69cd      	ldr	r5, [r1, #28]
 8008628:	1e42      	subs	r2, r0, #1
 800862a:	482b      	ldr	r0, [pc, #172]	; (80086d8 <HAL_I2C_Init+0x140>)
 800862c:	f425 454f 	bic.w	r5, r5, #52992	; 0xcf00
 8008630:	4283      	cmp	r3, r0
 8008632:	f025 05ff 	bic.w	r5, r5, #255	; 0xff
 8008636:	d832      	bhi.n	800869e <HAL_I2C_Init+0x106>
 8008638:	005b      	lsls	r3, r3, #1
 800863a:	fbb2 f3f3 	udiv	r3, r2, r3
 800863e:	f640 72fc 	movw	r2, #4092	; 0xffc
 8008642:	3301      	adds	r3, #1
 8008644:	4213      	tst	r3, r2
 8008646:	d042      	beq.n	80086ce <HAL_I2C_Init+0x136>
 8008648:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800864c:	432b      	orrs	r3, r5
 800864e:	61cb      	str	r3, [r1, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8008650:	e9d4 3007 	ldrd	r3, r0, [r4, #28]
 8008654:	680a      	ldr	r2, [r1, #0]
 8008656:	4303      	orrs	r3, r0
 8008658:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800865c:	4313      	orrs	r3, r2
 800865e:	600b      	str	r3, [r1, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8008660:	688a      	ldr	r2, [r1, #8]
 8008662:	e9d4 0303 	ldrd	r0, r3, [r4, #12]
 8008666:	f422 4203 	bic.w	r2, r2, #33536	; 0x8300
 800866a:	4303      	orrs	r3, r0
 800866c:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8008670:	4313      	orrs	r3, r2
 8008672:	608b      	str	r3, [r1, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8008674:	e9d4 3005 	ldrd	r3, r0, [r4, #20]
 8008678:	68ca      	ldr	r2, [r1, #12]
 800867a:	4303      	orrs	r3, r0
 800867c:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8008680:	4313      	orrs	r3, r2
 8008682:	60cb      	str	r3, [r1, #12]
  __HAL_I2C_ENABLE(hi2c);
 8008684:	680b      	ldr	r3, [r1, #0]
 8008686:	f043 0301 	orr.w	r3, r3, #1
 800868a:	600b      	str	r3, [r1, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800868c:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 800868e:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008690:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8008692:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8008696:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008698:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
  return HAL_OK;
 800869c:	e780      	b.n	80085a0 <HAL_I2C_Init+0x8>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800869e:	68a0      	ldr	r0, [r4, #8]
 80086a0:	b950      	cbnz	r0, 80086b8 <HAL_I2C_Init+0x120>
 80086a2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80086a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80086aa:	3301      	adds	r3, #1
 80086ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80086b0:	b17b      	cbz	r3, 80086d2 <HAL_I2C_Init+0x13a>
 80086b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80086b6:	e7c9      	b.n	800864c <HAL_I2C_Init+0xb4>
 80086b8:	2019      	movs	r0, #25
 80086ba:	4343      	muls	r3, r0
 80086bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80086c0:	3301      	adds	r3, #1
 80086c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80086c6:	b123      	cbz	r3, 80086d2 <HAL_I2C_Init+0x13a>
 80086c8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80086cc:	e7be      	b.n	800864c <HAL_I2C_Init+0xb4>
 80086ce:	2304      	movs	r3, #4
 80086d0:	e7bc      	b.n	800864c <HAL_I2C_Init+0xb4>
 80086d2:	2301      	movs	r3, #1
 80086d4:	e7ba      	b.n	800864c <HAL_I2C_Init+0xb4>
 80086d6:	bf00      	nop
 80086d8:	000186a0 	.word	0x000186a0
 80086dc:	001e847f 	.word	0x001e847f
 80086e0:	003d08ff 	.word	0x003d08ff
 80086e4:	000f4240 	.word	0x000f4240

080086e8 <HAL_I2C_MspDeInit>:
 80086e8:	4770      	bx	lr

080086ea <HAL_I2C_DeInit>:
{
 80086ea:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 80086ec:	4604      	mov	r4, r0
 80086ee:	b198      	cbz	r0, 8008718 <HAL_I2C_DeInit+0x2e>
  __HAL_I2C_DISABLE(hi2c);
 80086f0:	6802      	ldr	r2, [r0, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 80086f2:	2324      	movs	r3, #36	; 0x24
 80086f4:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 80086f8:	6813      	ldr	r3, [r2, #0]
 80086fa:	f023 0301 	bic.w	r3, r3, #1
 80086fe:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 8008700:	f7ff fff2 	bl	80086e8 <HAL_I2C_MspDeInit>
  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8008704:	2000      	movs	r0, #0
 8008706:	6420      	str	r0, [r4, #64]	; 0x40
  __HAL_UNLOCK(hi2c);
 8008708:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
  hi2c->State         = HAL_I2C_STATE_RESET;
 800870c:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8008710:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8008712:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
}
 8008716:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8008718:	2001      	movs	r0, #1
 800871a:	e7fc      	b.n	8008716 <HAL_I2C_DeInit+0x2c>

0800871c <HAL_I2C_Mem_Write>:
{
 800871c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008720:	4604      	mov	r4, r0
 8008722:	4699      	mov	r9, r3
 8008724:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8008726:	460f      	mov	r7, r1
 8008728:	4690      	mov	r8, r2
  uint32_t tickstart = HAL_GetTick();
 800872a:	f7fe ff2f 	bl	800758c <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 800872e:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8008732:	2b20      	cmp	r3, #32
  uint32_t tickstart = HAL_GetTick();
 8008734:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8008736:	d003      	beq.n	8008740 <HAL_I2C_Mem_Write+0x24>
    return HAL_BUSY;
 8008738:	2002      	movs	r0, #2
}
 800873a:	b003      	add	sp, #12
 800873c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008740:	9000      	str	r0, [sp, #0]
 8008742:	493c      	ldr	r1, [pc, #240]	; (8008834 <HAL_I2C_Mem_Write+0x118>)
 8008744:	2319      	movs	r3, #25
 8008746:	2201      	movs	r2, #1
 8008748:	4620      	mov	r0, r4
 800874a:	f7ff fdf1 	bl	8008330 <I2C_WaitOnFlagUntilTimeout>
 800874e:	2800      	cmp	r0, #0
 8008750:	d1f2      	bne.n	8008738 <HAL_I2C_Mem_Write+0x1c>
    __HAL_LOCK(hi2c);
 8008752:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8008756:	2b01      	cmp	r3, #1
 8008758:	d0ee      	beq.n	8008738 <HAL_I2C_Mem_Write+0x1c>
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800875a:	6820      	ldr	r0, [r4, #0]
    __HAL_LOCK(hi2c);
 800875c:	2301      	movs	r3, #1
 800875e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008762:	6803      	ldr	r3, [r0, #0]
 8008764:	07d9      	lsls	r1, r3, #31
      __HAL_I2C_ENABLE(hi2c);
 8008766:	bf5e      	ittt	pl
 8008768:	6803      	ldrpl	r3, [r0, #0]
 800876a:	f043 0301 	orrpl.w	r3, r3, #1
 800876e:	6003      	strpl	r3, [r0, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008770:	6803      	ldr	r3, [r0, #0]
 8008772:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008776:	6003      	str	r3, [r0, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8008778:	2321      	movs	r3, #33	; 0x21
 800877a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800877e:	2340      	movs	r3, #64	; 0x40
 8008780:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008784:	2300      	movs	r3, #0
 8008786:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 8008788:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800878a:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 800878c:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 8008790:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008792:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8008794:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008796:	4b28      	ldr	r3, [pc, #160]	; (8008838 <HAL_I2C_Mem_Write+0x11c>)
 8008798:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800879a:	e9cd 6500 	strd	r6, r5, [sp]
 800879e:	464b      	mov	r3, r9
 80087a0:	4642      	mov	r2, r8
 80087a2:	4639      	mov	r1, r7
 80087a4:	4620      	mov	r0, r4
 80087a6:	f7ff fe1b 	bl	80083e0 <I2C_RequestMemoryWrite>
 80087aa:	2800      	cmp	r0, #0
 80087ac:	d02a      	beq.n	8008804 <HAL_I2C_Mem_Write+0xe8>
      return HAL_ERROR;
 80087ae:	2001      	movs	r0, #1
 80087b0:	e7c3      	b.n	800873a <HAL_I2C_Mem_Write+0x1e>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80087b2:	f7ff fdef 	bl	8008394 <I2C_WaitOnTXEFlagUntilTimeout>
 80087b6:	b140      	cbz	r0, 80087ca <HAL_I2C_Mem_Write+0xae>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80087b8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80087ba:	2b04      	cmp	r3, #4
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80087bc:	bf01      	itttt	eq
 80087be:	6822      	ldreq	r2, [r4, #0]
 80087c0:	6813      	ldreq	r3, [r2, #0]
 80087c2:	f443 7300 	orreq.w	r3, r3, #512	; 0x200
 80087c6:	6013      	streq	r3, [r2, #0]
 80087c8:	e7f1      	b.n	80087ae <HAL_I2C_Mem_Write+0x92>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80087ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80087cc:	6827      	ldr	r7, [r4, #0]
 80087ce:	461a      	mov	r2, r3
 80087d0:	f812 1b01 	ldrb.w	r1, [r2], #1
 80087d4:	6139      	str	r1, [r7, #16]
      hi2c->pBuffPtr++;
 80087d6:	6262      	str	r2, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80087d8:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80087da:	8d21      	ldrh	r1, [r4, #40]	; 0x28
      hi2c->XferCount--;
 80087dc:	3a01      	subs	r2, #1
 80087de:	b292      	uxth	r2, r2
 80087e0:	8562      	strh	r2, [r4, #42]	; 0x2a
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80087e2:	697a      	ldr	r2, [r7, #20]
      hi2c->XferSize--;
 80087e4:	1e48      	subs	r0, r1, #1
 80087e6:	b280      	uxth	r0, r0
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80087e8:	0752      	lsls	r2, r2, #29
      hi2c->XferSize--;
 80087ea:	8520      	strh	r0, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80087ec:	d50a      	bpl.n	8008804 <HAL_I2C_Mem_Write+0xe8>
 80087ee:	b148      	cbz	r0, 8008804 <HAL_I2C_Mem_Write+0xe8>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80087f0:	785a      	ldrb	r2, [r3, #1]
 80087f2:	613a      	str	r2, [r7, #16]
        hi2c->pBuffPtr++;
 80087f4:	3302      	adds	r3, #2
 80087f6:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferCount--;
 80087f8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80087fa:	3b01      	subs	r3, #1
        hi2c->XferSize--;
 80087fc:	3902      	subs	r1, #2
        hi2c->XferCount--;
 80087fe:	b29b      	uxth	r3, r3
        hi2c->XferSize--;
 8008800:	8521      	strh	r1, [r4, #40]	; 0x28
        hi2c->XferCount--;
 8008802:	8563      	strh	r3, [r4, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8008804:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008806:	462a      	mov	r2, r5
 8008808:	4631      	mov	r1, r6
 800880a:	4620      	mov	r0, r4
    while (hi2c->XferSize > 0U)
 800880c:	2b00      	cmp	r3, #0
 800880e:	d1d0      	bne.n	80087b2 <HAL_I2C_Mem_Write+0x96>
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008810:	f7ff fd39 	bl	8008286 <I2C_WaitOnBTFFlagUntilTimeout>
 8008814:	2800      	cmp	r0, #0
 8008816:	d1cf      	bne.n	80087b8 <HAL_I2C_Mem_Write+0x9c>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008818:	6822      	ldr	r2, [r4, #0]
 800881a:	6813      	ldr	r3, [r2, #0]
 800881c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008820:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8008822:	2320      	movs	r3, #32
 8008824:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 8008828:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800882c:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
    return HAL_OK;
 8008830:	e783      	b.n	800873a <HAL_I2C_Mem_Write+0x1e>
 8008832:	bf00      	nop
 8008834:	00100002 	.word	0x00100002
 8008838:	ffff0000 	.word	0xffff0000

0800883c <HAL_I2C_Mem_Read>:
{
 800883c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008840:	4604      	mov	r4, r0
 8008842:	b087      	sub	sp, #28
 8008844:	4699      	mov	r9, r3
 8008846:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8008848:	460d      	mov	r5, r1
 800884a:	4690      	mov	r8, r2
  uint32_t tickstart = HAL_GetTick();
 800884c:	f7fe fe9e 	bl	800758c <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8008850:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8008854:	2b20      	cmp	r3, #32
  uint32_t tickstart = HAL_GetTick();
 8008856:	4606      	mov	r6, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8008858:	d004      	beq.n	8008864 <HAL_I2C_Mem_Read+0x28>
    return HAL_BUSY;
 800885a:	2502      	movs	r5, #2
}
 800885c:	4628      	mov	r0, r5
 800885e:	b007      	add	sp, #28
 8008860:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008864:	9000      	str	r0, [sp, #0]
 8008866:	4976      	ldr	r1, [pc, #472]	; (8008a40 <HAL_I2C_Mem_Read+0x204>)
 8008868:	2319      	movs	r3, #25
 800886a:	2201      	movs	r2, #1
 800886c:	4620      	mov	r0, r4
 800886e:	f7ff fd5f 	bl	8008330 <I2C_WaitOnFlagUntilTimeout>
 8008872:	2800      	cmp	r0, #0
 8008874:	d1f1      	bne.n	800885a <HAL_I2C_Mem_Read+0x1e>
    __HAL_LOCK(hi2c);
 8008876:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800887a:	2b01      	cmp	r3, #1
 800887c:	d0ed      	beq.n	800885a <HAL_I2C_Mem_Read+0x1e>
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800887e:	6820      	ldr	r0, [r4, #0]
    __HAL_LOCK(hi2c);
 8008880:	2301      	movs	r3, #1
 8008882:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008886:	6803      	ldr	r3, [r0, #0]
 8008888:	07db      	lsls	r3, r3, #31
      __HAL_I2C_ENABLE(hi2c);
 800888a:	bf5e      	ittt	pl
 800888c:	6803      	ldrpl	r3, [r0, #0]
 800888e:	f043 0301 	orrpl.w	r3, r3, #1
 8008892:	6003      	strpl	r3, [r0, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008894:	6803      	ldr	r3, [r0, #0]
 8008896:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800889a:	6003      	str	r3, [r0, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800889c:	2322      	movs	r3, #34	; 0x22
 800889e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80088a2:	2340      	movs	r3, #64	; 0x40
 80088a4:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80088a8:	2300      	movs	r3, #0
 80088aa:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 80088ac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80088ae:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 80088b0:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 80088b4:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80088b6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80088b8:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80088ba:	4b62      	ldr	r3, [pc, #392]	; (8008a44 <HAL_I2C_Mem_Read+0x208>)
 80088bc:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80088be:	4629      	mov	r1, r5
 80088c0:	e9cd 7600 	strd	r7, r6, [sp]
 80088c4:	464b      	mov	r3, r9
 80088c6:	4642      	mov	r2, r8
 80088c8:	4620      	mov	r0, r4
 80088ca:	f7ff fde1 	bl	8008490 <I2C_RequestMemoryRead>
 80088ce:	4605      	mov	r5, r0
 80088d0:	b108      	cbz	r0, 80088d6 <HAL_I2C_Mem_Read+0x9a>
      return HAL_ERROR;
 80088d2:	2501      	movs	r5, #1
 80088d4:	e7c2      	b.n	800885c <HAL_I2C_Mem_Read+0x20>
    if (hi2c->XferSize == 0U)
 80088d6:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 80088d8:	6823      	ldr	r3, [r4, #0]
 80088da:	b9b2      	cbnz	r2, 800890a <HAL_I2C_Mem_Read+0xce>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80088dc:	9002      	str	r0, [sp, #8]
 80088de:	695a      	ldr	r2, [r3, #20]
 80088e0:	9202      	str	r2, [sp, #8]
 80088e2:	699a      	ldr	r2, [r3, #24]
 80088e4:	9202      	str	r2, [sp, #8]
 80088e6:	9a02      	ldr	r2, [sp, #8]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80088e8:	681a      	ldr	r2, [r3, #0]
 80088ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80088ee:	601a      	str	r2, [r3, #0]
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80088f0:	f8df 8154 	ldr.w	r8, [pc, #340]	; 8008a48 <HAL_I2C_Mem_Read+0x20c>
    while (hi2c->XferSize > 0U)
 80088f4:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d12c      	bne.n	8008954 <HAL_I2C_Mem_Read+0x118>
    hi2c->State = HAL_I2C_STATE_READY;
 80088fa:	2220      	movs	r2, #32
 80088fc:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 8008900:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008904:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    return HAL_OK;
 8008908:	e7a8      	b.n	800885c <HAL_I2C_Mem_Read+0x20>
    else if (hi2c->XferSize == 1U)
 800890a:	2a01      	cmp	r2, #1
 800890c:	d10a      	bne.n	8008924 <HAL_I2C_Mem_Read+0xe8>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800890e:	681a      	ldr	r2, [r3, #0]
 8008910:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008914:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008916:	9003      	str	r0, [sp, #12]
 8008918:	695a      	ldr	r2, [r3, #20]
 800891a:	9203      	str	r2, [sp, #12]
 800891c:	699a      	ldr	r2, [r3, #24]
 800891e:	9203      	str	r2, [sp, #12]
 8008920:	9a03      	ldr	r2, [sp, #12]
 8008922:	e7e1      	b.n	80088e8 <HAL_I2C_Mem_Read+0xac>
    else if (hi2c->XferSize == 2U)
 8008924:	2a02      	cmp	r2, #2
 8008926:	d10e      	bne.n	8008946 <HAL_I2C_Mem_Read+0x10a>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008928:	681a      	ldr	r2, [r3, #0]
 800892a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800892e:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008930:	681a      	ldr	r2, [r3, #0]
 8008932:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008936:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008938:	9004      	str	r0, [sp, #16]
 800893a:	695a      	ldr	r2, [r3, #20]
 800893c:	9204      	str	r2, [sp, #16]
 800893e:	699b      	ldr	r3, [r3, #24]
 8008940:	9304      	str	r3, [sp, #16]
 8008942:	9b04      	ldr	r3, [sp, #16]
 8008944:	e7d4      	b.n	80088f0 <HAL_I2C_Mem_Read+0xb4>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008946:	9005      	str	r0, [sp, #20]
 8008948:	695a      	ldr	r2, [r3, #20]
 800894a:	9205      	str	r2, [sp, #20]
 800894c:	699b      	ldr	r3, [r3, #24]
 800894e:	9305      	str	r3, [sp, #20]
 8008950:	9b05      	ldr	r3, [sp, #20]
 8008952:	e7cd      	b.n	80088f0 <HAL_I2C_Mem_Read+0xb4>
      if (hi2c->XferSize <= 3U)
 8008954:	2b03      	cmp	r3, #3
 8008956:	d856      	bhi.n	8008a06 <HAL_I2C_Mem_Read+0x1ca>
        if (hi2c->XferSize == 1U)
 8008958:	2b01      	cmp	r3, #1
 800895a:	d115      	bne.n	8008988 <HAL_I2C_Mem_Read+0x14c>
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800895c:	4632      	mov	r2, r6
 800895e:	4639      	mov	r1, r7
 8008960:	4620      	mov	r0, r4
 8008962:	f7ff fcb6 	bl	80082d2 <I2C_WaitOnRXNEFlagUntilTimeout>
 8008966:	2800      	cmp	r0, #0
 8008968:	d1b3      	bne.n	80088d2 <HAL_I2C_Mem_Read+0x96>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800896a:	6823      	ldr	r3, [r4, #0]
 800896c:	691a      	ldr	r2, [r3, #16]
 800896e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008970:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8008972:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008974:	3301      	adds	r3, #1
 8008976:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8008978:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800897a:	3b01      	subs	r3, #1
 800897c:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 800897e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8008980:	3b01      	subs	r3, #1
 8008982:	b29b      	uxth	r3, r3
 8008984:	8563      	strh	r3, [r4, #42]	; 0x2a
 8008986:	e7b5      	b.n	80088f4 <HAL_I2C_Mem_Read+0xb8>
        else if (hi2c->XferSize == 2U)
 8008988:	2b02      	cmp	r3, #2
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800898a:	9600      	str	r6, [sp, #0]
 800898c:	463b      	mov	r3, r7
 800898e:	f04f 0200 	mov.w	r2, #0
 8008992:	4641      	mov	r1, r8
 8008994:	4620      	mov	r0, r4
        else if (hi2c->XferSize == 2U)
 8008996:	d119      	bne.n	80089cc <HAL_I2C_Mem_Read+0x190>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008998:	f7ff fcca 	bl	8008330 <I2C_WaitOnFlagUntilTimeout>
 800899c:	2800      	cmp	r0, #0
 800899e:	d198      	bne.n	80088d2 <HAL_I2C_Mem_Read+0x96>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80089a0:	6823      	ldr	r3, [r4, #0]
 80089a2:	681a      	ldr	r2, [r3, #0]
 80089a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80089a8:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80089aa:	691a      	ldr	r2, [r3, #16]
 80089ac:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80089ae:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 80089b0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80089b2:	1c53      	adds	r3, r2, #1
 80089b4:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 80089b6:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80089b8:	3b01      	subs	r3, #1
 80089ba:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 80089bc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80089be:	3b01      	subs	r3, #1
 80089c0:	b29b      	uxth	r3, r3
 80089c2:	8563      	strh	r3, [r4, #42]	; 0x2a
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80089c4:	6823      	ldr	r3, [r4, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80089c6:	691b      	ldr	r3, [r3, #16]
 80089c8:	7053      	strb	r3, [r2, #1]
 80089ca:	e7d2      	b.n	8008972 <HAL_I2C_Mem_Read+0x136>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80089cc:	f7ff fcb0 	bl	8008330 <I2C_WaitOnFlagUntilTimeout>
 80089d0:	2800      	cmp	r0, #0
 80089d2:	f47f af7e 	bne.w	80088d2 <HAL_I2C_Mem_Read+0x96>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80089d6:	6823      	ldr	r3, [r4, #0]
 80089d8:	681a      	ldr	r2, [r3, #0]
 80089da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80089de:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80089e0:	691a      	ldr	r2, [r3, #16]
 80089e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80089e4:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 80089e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80089e8:	9600      	str	r6, [sp, #0]
          hi2c->pBuffPtr++;
 80089ea:	3301      	adds	r3, #1
 80089ec:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 80089ee:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80089f0:	3b01      	subs	r3, #1
 80089f2:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 80089f4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80089f6:	3b01      	subs	r3, #1
 80089f8:	b29b      	uxth	r3, r3
 80089fa:	8563      	strh	r3, [r4, #42]	; 0x2a
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80089fc:	4602      	mov	r2, r0
 80089fe:	463b      	mov	r3, r7
 8008a00:	4641      	mov	r1, r8
 8008a02:	4620      	mov	r0, r4
 8008a04:	e7c8      	b.n	8008998 <HAL_I2C_Mem_Read+0x15c>
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008a06:	4632      	mov	r2, r6
 8008a08:	4639      	mov	r1, r7
 8008a0a:	4620      	mov	r0, r4
 8008a0c:	f7ff fc61 	bl	80082d2 <I2C_WaitOnRXNEFlagUntilTimeout>
 8008a10:	2800      	cmp	r0, #0
 8008a12:	f47f af5e 	bne.w	80088d2 <HAL_I2C_Mem_Read+0x96>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008a16:	6823      	ldr	r3, [r4, #0]
 8008a18:	691a      	ldr	r2, [r3, #16]
 8008a1a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008a1c:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8008a1e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8008a20:	1c53      	adds	r3, r2, #1
 8008a22:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferSize--;
 8008a24:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8008a26:	3b01      	subs	r3, #1
 8008a28:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 8008a2a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8008a2c:	3b01      	subs	r3, #1
 8008a2e:	b29b      	uxth	r3, r3
 8008a30:	8563      	strh	r3, [r4, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8008a32:	6823      	ldr	r3, [r4, #0]
 8008a34:	6959      	ldr	r1, [r3, #20]
 8008a36:	0749      	lsls	r1, r1, #29
 8008a38:	f57f af5c 	bpl.w	80088f4 <HAL_I2C_Mem_Read+0xb8>
 8008a3c:	e7c3      	b.n	80089c6 <HAL_I2C_Mem_Read+0x18a>
 8008a3e:	bf00      	nop
 8008a40:	00100002 	.word	0x00100002
 8008a44:	ffff0000 	.word	0xffff0000
 8008a48:	00010004 	.word	0x00010004

08008a4c <HAL_I2C_GetState>:
  return hi2c->State;
 8008a4c:	f890 003d 	ldrb.w	r0, [r0, #61]	; 0x3d
}
 8008a50:	4770      	bx	lr

08008a52 <HAL_I2C_GetError>:
  return hi2c->ErrorCode;
 8008a52:	6c00      	ldr	r0, [r0, #64]	; 0x40
}
 8008a54:	4770      	bx	lr

08008a56 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8008a56:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008a58:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8008a5c:	2b20      	cmp	r3, #32
 8008a5e:	b2dc      	uxtb	r4, r3
 8008a60:	d116      	bne.n	8008a90 <HAL_I2CEx_ConfigAnalogFilter+0x3a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8008a62:	2324      	movs	r3, #36	; 0x24
 8008a64:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008a68:	6803      	ldr	r3, [r0, #0]
 8008a6a:	681a      	ldr	r2, [r3, #0]
 8008a6c:	f022 0201 	bic.w	r2, r2, #1
 8008a70:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8008a72:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008a74:	f022 0210 	bic.w	r2, r2, #16
 8008a78:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8008a7a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008a7c:	4311      	orrs	r1, r2
 8008a7e:	6259      	str	r1, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8008a80:	681a      	ldr	r2, [r3, #0]
 8008a82:	f042 0201 	orr.w	r2, r2, #1
 8008a86:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008a88:	f880 403d 	strb.w	r4, [r0, #61]	; 0x3d

    return HAL_OK;
 8008a8c:	2000      	movs	r0, #0
  }
  else
  {
    return HAL_BUSY;
  }
}
 8008a8e:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 8008a90:	2002      	movs	r0, #2
 8008a92:	e7fc      	b.n	8008a8e <HAL_I2CEx_ConfigAnalogFilter+0x38>

08008a94 <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 8008a94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a98:	4604      	mov	r4, r0
 8008a9a:	460f      	mov	r7, r1
 8008a9c:	4616      	mov	r6, r2
 8008a9e:	461d      	mov	r5, r3
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 8008aa0:	f7fe fd74 	bl	800758c <HAL_GetTick>
 8008aa4:	4680      	mov	r8, r0

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8008aa6:	6822      	ldr	r2, [r4, #0]
 8008aa8:	6893      	ldr	r3, [r2, #8]
 8008aaa:	ea37 0303 	bics.w	r3, r7, r3
 8008aae:	bf0c      	ite	eq
 8008ab0:	2301      	moveq	r3, #1
 8008ab2:	2300      	movne	r3, #0
 8008ab4:	42b3      	cmp	r3, r6
 8008ab6:	d101      	bne.n	8008abc <I2S_WaitFlagStateUntilTimeout+0x28>

        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8008ab8:	2000      	movs	r0, #0
 8008aba:	e00e      	b.n	8008ada <I2S_WaitFlagStateUntilTimeout+0x46>
    if (Timeout != HAL_MAX_DELAY)
 8008abc:	1c6b      	adds	r3, r5, #1
 8008abe:	d0f3      	beq.n	8008aa8 <I2S_WaitFlagStateUntilTimeout+0x14>
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 8008ac0:	f7fe fd64 	bl	800758c <HAL_GetTick>
 8008ac4:	eba0 0008 	sub.w	r0, r0, r8
 8008ac8:	42a8      	cmp	r0, r5
 8008aca:	d3ec      	bcc.n	8008aa6 <I2S_WaitFlagStateUntilTimeout+0x12>
        hi2s->State = HAL_I2S_STATE_READY;
 8008acc:	2301      	movs	r3, #1
 8008ace:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        __HAL_UNLOCK(hi2s);
 8008ad2:	2300      	movs	r3, #0
 8008ad4:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return HAL_TIMEOUT;
 8008ad8:	2003      	movs	r0, #3
}
 8008ada:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08008ade <HAL_I2S_MspInit>:
}
 8008ade:	4770      	bx	lr

08008ae0 <HAL_I2S_Init>:
{
 8008ae0:	b538      	push	{r3, r4, r5, lr}
  if (hi2s == NULL)
 8008ae2:	4604      	mov	r4, r0
 8008ae4:	2800      	cmp	r0, #0
 8008ae6:	d075      	beq.n	8008bd4 <HAL_I2S_Init+0xf4>
  if (hi2s->State == HAL_I2S_STATE_RESET)
 8008ae8:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8008aec:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8008af0:	b92b      	cbnz	r3, 8008afe <HAL_I2S_Init+0x1e>
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8008af2:	4b3a      	ldr	r3, [pc, #232]	; (8008bdc <HAL_I2S_Init+0xfc>)
    hi2s->Lock = HAL_UNLOCKED;
 8008af4:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8008af8:	6343      	str	r3, [r0, #52]	; 0x34
    HAL_I2S_MspInit(hi2s);
 8008afa:	f7ff fff0 	bl	8008ade <HAL_I2S_MspInit>
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8008afe:	6822      	ldr	r2, [r4, #0]
  hi2s->State = HAL_I2S_STATE_BUSY;
 8008b00:	2102      	movs	r1, #2
 8008b02:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8008b06:	69d3      	ldr	r3, [r2, #28]
 8008b08:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8008b0c:	f023 030f 	bic.w	r3, r3, #15
 8008b10:	61d3      	str	r3, [r2, #28]
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8008b12:	6963      	ldr	r3, [r4, #20]
  hi2s->Instance->I2SPR = 0x0002U;
 8008b14:	6211      	str	r1, [r2, #32]
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8008b16:	428b      	cmp	r3, r1
 8008b18:	d05e      	beq.n	8008bd8 <HAL_I2S_Init+0xf8>
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8008b1a:	68e3      	ldr	r3, [r4, #12]
      packetlength = 32U;
 8008b1c:	2b00      	cmp	r3, #0
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8008b1e:	68a3      	ldr	r3, [r4, #8]
      packetlength = 32U;
 8008b20:	bf0c      	ite	eq
 8008b22:	2510      	moveq	r5, #16
 8008b24:	2520      	movne	r5, #32
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8008b26:	2b20      	cmp	r3, #32
    if (IS_I2S_APB1_INSTANCE(hi2s->Instance))
 8008b28:	4b2d      	ldr	r3, [pc, #180]	; (8008be0 <HAL_I2S_Init+0x100>)
      packetlength = packetlength * 2U;
 8008b2a:	bf98      	it	ls
 8008b2c:	006d      	lslls	r5, r5, #1
    if (IS_I2S_APB1_INSTANCE(hi2s->Instance))
 8008b2e:	429a      	cmp	r2, r3
 8008b30:	d003      	beq.n	8008b3a <HAL_I2S_Init+0x5a>
 8008b32:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008b36:	429a      	cmp	r2, r3
 8008b38:	d13f      	bne.n	8008bba <HAL_I2S_Init+0xda>
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB1);
 8008b3a:	2001      	movs	r0, #1
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
 8008b3c:	f000 fd24 	bl	8009588 <HAL_RCCEx_GetPeriphCLKFreq>
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8008b40:	e9d4 3104 	ldrd	r3, r1, [r4, #16]
 8008b44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008b48:	d13b      	bne.n	8008bc2 <HAL_I2S_Init+0xe2>
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8008b4a:	68e3      	ldr	r3, [r4, #12]
 8008b4c:	220a      	movs	r2, #10
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d035      	beq.n	8008bbe <HAL_I2S_Init+0xde>
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8008b52:	00ab      	lsls	r3, r5, #2
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8008b54:	fbb0 f3f3 	udiv	r3, r0, r3
 8008b58:	4353      	muls	r3, r2
    tmp = tmp / 10U;
 8008b5a:	220a      	movs	r2, #10
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8008b5c:	fbb3 f3f1 	udiv	r3, r3, r1
 8008b60:	3305      	adds	r3, #5
    tmp = tmp / 10U;
 8008b62:	fbb3 f3f2 	udiv	r3, r3, r2
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8008b66:	f003 0101 	and.w	r1, r3, #1
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8008b6a:	085b      	lsrs	r3, r3, #1
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8008b6c:	1e9a      	subs	r2, r3, #2
 8008b6e:	2afd      	cmp	r2, #253	; 0xfd
 8008b70:	d82c      	bhi.n	8008bcc <HAL_I2S_Init+0xec>
    i2sodd = (uint32_t)(i2sodd << 8U);
 8008b72:	0209      	lsls	r1, r1, #8
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8008b74:	430b      	orrs	r3, r1
 8008b76:	6921      	ldr	r1, [r4, #16]
 8008b78:	6822      	ldr	r2, [r4, #0]
 8008b7a:	430b      	orrs	r3, r1
 8008b7c:	6213      	str	r3, [r2, #32]
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8008b7e:	69d1      	ldr	r1, [r2, #28]
 8008b80:	e9d4 3001 	ldrd	r3, r0, [r4, #4]
 8008b84:	f421 617b 	bic.w	r1, r1, #4016	; 0xfb0
 8008b88:	4303      	orrs	r3, r0
 8008b8a:	f021 010f 	bic.w	r1, r1, #15
 8008b8e:	430b      	orrs	r3, r1
 8008b90:	68e1      	ldr	r1, [r4, #12]
 8008b92:	430b      	orrs	r3, r1
 8008b94:	69a1      	ldr	r1, [r4, #24]
 8008b96:	430b      	orrs	r3, r1
 8008b98:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 8008b9c:	f020 0080 	bic.w	r0, r0, #128	; 0x80
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8008ba0:	61d3      	str	r3, [r2, #28]
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 8008ba2:	2830      	cmp	r0, #48	; 0x30
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 8008ba4:	bf02      	ittt	eq
 8008ba6:	69d3      	ldreq	r3, [r2, #28]
 8008ba8:	f443 5380 	orreq.w	r3, r3, #4096	; 0x1000
 8008bac:	61d3      	streq	r3, [r2, #28]
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8008bae:	2000      	movs	r0, #0
  hi2s->State     = HAL_I2S_STATE_READY;
 8008bb0:	2301      	movs	r3, #1
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8008bb2:	6460      	str	r0, [r4, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8008bb4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
}
 8008bb8:	bd38      	pop	{r3, r4, r5, pc}
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
 8008bba:	2002      	movs	r0, #2
 8008bbc:	e7be      	b.n	8008b3c <HAL_I2S_Init+0x5c>
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8008bbe:	00eb      	lsls	r3, r5, #3
 8008bc0:	e7c8      	b.n	8008b54 <HAL_I2S_Init+0x74>
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8008bc2:	230a      	movs	r3, #10
 8008bc4:	fbb0 f0f5 	udiv	r0, r0, r5
 8008bc8:	4343      	muls	r3, r0
 8008bca:	e7c6      	b.n	8008b5a <HAL_I2S_Init+0x7a>
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8008bcc:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8008bce:	f043 0310 	orr.w	r3, r3, #16
 8008bd2:	6463      	str	r3, [r4, #68]	; 0x44
    return HAL_ERROR;
 8008bd4:	2001      	movs	r0, #1
 8008bd6:	e7ef      	b.n	8008bb8 <HAL_I2S_Init+0xd8>
    i2sodd = 0U;
 8008bd8:	2100      	movs	r1, #0
 8008bda:	e7cb      	b.n	8008b74 <HAL_I2S_Init+0x94>
 8008bdc:	08008ddb 	.word	0x08008ddb
 8008be0:	40003800 	.word	0x40003800

08008be4 <HAL_I2S_Receive_DMA>:
{
 8008be4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008be6:	4613      	mov	r3, r2
 8008be8:	4604      	mov	r4, r0
  if ((pData == NULL) || (Size == 0U))
 8008bea:	2900      	cmp	r1, #0
 8008bec:	d062      	beq.n	8008cb4 <HAL_I2S_Receive_DMA+0xd0>
 8008bee:	2a00      	cmp	r2, #0
 8008bf0:	d060      	beq.n	8008cb4 <HAL_I2S_Receive_DMA+0xd0>
  __HAL_LOCK(hi2s);
 8008bf2:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
 8008bf6:	2a01      	cmp	r2, #1
 8008bf8:	d00b      	beq.n	8008c12 <HAL_I2S_Receive_DMA+0x2e>
 8008bfa:	2201      	movs	r2, #1
 8008bfc:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
  if (hi2s->State != HAL_I2S_STATE_READY)
 8008c00:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8008c04:	2a01      	cmp	r2, #1
 8008c06:	b2d5      	uxtb	r5, r2
 8008c08:	f04f 0200 	mov.w	r2, #0
 8008c0c:	d003      	beq.n	8008c16 <HAL_I2S_Receive_DMA+0x32>
    __HAL_UNLOCK(hi2s);
 8008c0e:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
  __HAL_LOCK(hi2s);
 8008c12:	2502      	movs	r5, #2
 8008c14:	e036      	b.n	8008c84 <HAL_I2S_Receive_DMA+0xa0>
  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8008c16:	6826      	ldr	r6, [r4, #0]
  hi2s->pRxBuffPtr = pData;
 8008c18:	62e1      	str	r1, [r4, #44]	; 0x2c
  hi2s->State = HAL_I2S_STATE_BUSY_RX;
 8008c1a:	2004      	movs	r0, #4
 8008c1c:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8008c20:	6462      	str	r2, [r4, #68]	; 0x44
  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8008c22:	69f2      	ldr	r2, [r6, #28]
 8008c24:	f002 0207 	and.w	r2, r2, #7
  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8008c28:	2a03      	cmp	r2, #3
 8008c2a:	d001      	beq.n	8008c30 <HAL_I2S_Receive_DMA+0x4c>
 8008c2c:	2a05      	cmp	r2, #5
 8008c2e:	d101      	bne.n	8008c34 <HAL_I2S_Receive_DMA+0x50>
    hi2s->RxXferSize = (Size << 1U);
 8008c30:	005b      	lsls	r3, r3, #1
 8008c32:	b29b      	uxth	r3, r3
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 8008c34:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    hi2s->RxXferSize = Size;
 8008c36:	8623      	strh	r3, [r4, #48]	; 0x30
    hi2s->RxXferCount = Size;
 8008c38:	8663      	strh	r3, [r4, #50]	; 0x32
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 8008c3a:	4b1f      	ldr	r3, [pc, #124]	; (8008cb8 <HAL_I2S_Receive_DMA+0xd4>)
 8008c3c:	6403      	str	r3, [r0, #64]	; 0x40
  hi2s->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 8008c3e:	4b1f      	ldr	r3, [pc, #124]	; (8008cbc <HAL_I2S_Receive_DMA+0xd8>)
 8008c40:	63c3      	str	r3, [r0, #60]	; 0x3c
  hi2s->hdmarx->XferErrorCallback = I2S_DMAError;
 8008c42:	4b1f      	ldr	r3, [pc, #124]	; (8008cc0 <HAL_I2S_Receive_DMA+0xdc>)
 8008c44:	64c3      	str	r3, [r0, #76]	; 0x4c
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 8008c46:	69f3      	ldr	r3, [r6, #28]
 8008c48:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008c4c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008c50:	d106      	bne.n	8008c60 <HAL_I2S_Receive_DMA+0x7c>
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8008c52:	2300      	movs	r3, #0
 8008c54:	9301      	str	r3, [sp, #4]
 8008c56:	68f3      	ldr	r3, [r6, #12]
 8008c58:	9301      	str	r3, [sp, #4]
 8008c5a:	68b3      	ldr	r3, [r6, #8]
 8008c5c:	9301      	str	r3, [sp, #4]
 8008c5e:	9b01      	ldr	r3, [sp, #4]
                                 hi2s->RxXferSize))
 8008c60:	8e23      	ldrh	r3, [r4, #48]	; 0x30
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 8008c62:	460a      	mov	r2, r1
 8008c64:	b29b      	uxth	r3, r3
 8008c66:	f106 010c 	add.w	r1, r6, #12
 8008c6a:	f7fe fe27 	bl	80078bc <HAL_DMA_Start_IT>
 8008c6e:	b160      	cbz	r0, 8008c8a <HAL_I2S_Receive_DMA+0xa6>
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8008c70:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8008c72:	f043 0308 	orr.w	r3, r3, #8
 8008c76:	6463      	str	r3, [r4, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 8008c78:	2301      	movs	r3, #1
 8008c7a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2s);
 8008c7e:	2300      	movs	r3, #0
 8008c80:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 8008c84:	4628      	mov	r0, r5
 8008c86:	b002      	add	sp, #8
 8008c88:	bd70      	pop	{r4, r5, r6, pc}
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8008c8a:	6823      	ldr	r3, [r4, #0]
 8008c8c:	69da      	ldr	r2, [r3, #28]
 8008c8e:	0551      	lsls	r1, r2, #21
    __HAL_I2S_ENABLE(hi2s);
 8008c90:	bf5e      	ittt	pl
 8008c92:	69da      	ldrpl	r2, [r3, #28]
 8008c94:	f442 6280 	orrpl.w	r2, r2, #1024	; 0x400
 8008c98:	61da      	strpl	r2, [r3, #28]
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_RXDMAEN))
 8008c9a:	685a      	ldr	r2, [r3, #4]
 8008c9c:	07d2      	lsls	r2, r2, #31
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8008c9e:	bf58      	it	pl
 8008ca0:	685a      	ldrpl	r2, [r3, #4]
  __HAL_UNLOCK(hi2s);
 8008ca2:	f04f 0500 	mov.w	r5, #0
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8008ca6:	bf5c      	itt	pl
 8008ca8:	f042 0201 	orrpl.w	r2, r2, #1
 8008cac:	605a      	strpl	r2, [r3, #4]
  __HAL_UNLOCK(hi2s);
 8008cae:	f884 5040 	strb.w	r5, [r4, #64]	; 0x40
  return HAL_OK;
 8008cb2:	e7e7      	b.n	8008c84 <HAL_I2S_Receive_DMA+0xa0>
    return  HAL_ERROR;
 8008cb4:	2501      	movs	r5, #1
 8008cb6:	e7e5      	b.n	8008c84 <HAL_I2S_Receive_DMA+0xa0>
 8008cb8:	08008dad 	.word	0x08008dad
 8008cbc:	08008db7 	.word	0x08008db7
 8008cc0:	08008ed5 	.word	0x08008ed5

08008cc4 <HAL_I2S_DMAStop>:
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8008cc4:	6843      	ldr	r3, [r0, #4]
 8008cc6:	f433 7300 	bics.w	r3, r3, #512	; 0x200
{
 8008cca:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008ccc:	4604      	mov	r4, r0
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8008cce:	d13c      	bne.n	8008d4a <HAL_I2S_DMAStop+0x86>
    if (hi2s->hdmatx != NULL)
 8008cd0:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8008cd2:	bb80      	cbnz	r0, 8008d36 <HAL_I2S_DMAStop+0x72>
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008cd4:	2500      	movs	r5, #0
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, I2S_TIMEOUT_FLAG) != HAL_OK)
 8008cd6:	2364      	movs	r3, #100	; 0x64
 8008cd8:	2201      	movs	r2, #1
 8008cda:	2102      	movs	r1, #2
 8008cdc:	4620      	mov	r0, r4
 8008cde:	f7ff fed9 	bl	8008a94 <I2S_WaitFlagStateUntilTimeout>
 8008ce2:	b130      	cbz	r0, 8008cf2 <HAL_I2S_DMAStop+0x2e>
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8008ce4:	6c63      	ldr	r3, [r4, #68]	; 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 8008ce6:	2501      	movs	r5, #1
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8008ce8:	f043 0301 	orr.w	r3, r3, #1
 8008cec:	6463      	str	r3, [r4, #68]	; 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 8008cee:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, RESET, I2S_TIMEOUT_FLAG) != HAL_OK)
 8008cf2:	2364      	movs	r3, #100	; 0x64
 8008cf4:	2200      	movs	r2, #0
 8008cf6:	2180      	movs	r1, #128	; 0x80
 8008cf8:	4620      	mov	r0, r4
 8008cfa:	f7ff fecb 	bl	8008a94 <I2S_WaitFlagStateUntilTimeout>
 8008cfe:	b130      	cbz	r0, 8008d0e <HAL_I2S_DMAStop+0x4a>
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8008d00:	6c63      	ldr	r3, [r4, #68]	; 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 8008d02:	2501      	movs	r5, #1
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8008d04:	f043 0301 	orr.w	r3, r3, #1
 8008d08:	6463      	str	r3, [r4, #68]	; 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 8008d0a:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
    __HAL_I2S_DISABLE(hi2s);
 8008d0e:	6823      	ldr	r3, [r4, #0]
 8008d10:	69da      	ldr	r2, [r3, #28]
 8008d12:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008d16:	61da      	str	r2, [r3, #28]
    __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8008d18:	2200      	movs	r2, #0
 8008d1a:	9200      	str	r2, [sp, #0]
 8008d1c:	689a      	ldr	r2, [r3, #8]
 8008d1e:	9200      	str	r2, [sp, #0]
 8008d20:	9a00      	ldr	r2, [sp, #0]
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8008d22:	685a      	ldr	r2, [r3, #4]
 8008d24:	f022 0202 	bic.w	r2, r2, #2
 8008d28:	605a      	str	r2, [r3, #4]
  hi2s->State = HAL_I2S_STATE_READY;
 8008d2a:	2301      	movs	r3, #1
}
 8008d2c:	4628      	mov	r0, r5
  hi2s->State = HAL_I2S_STATE_READY;
 8008d2e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
}
 8008d32:	b003      	add	sp, #12
 8008d34:	bd30      	pop	{r4, r5, pc}
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 8008d36:	f7fe fdfb 	bl	8007930 <HAL_DMA_Abort>
 8008d3a:	2800      	cmp	r0, #0
 8008d3c:	d0ca      	beq.n	8008cd4 <HAL_I2S_DMAStop+0x10>
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8008d3e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8008d40:	f043 0308 	orr.w	r3, r3, #8
 8008d44:	6463      	str	r3, [r4, #68]	; 0x44
        errorcode = HAL_ERROR;
 8008d46:	2501      	movs	r5, #1
 8008d48:	e7c5      	b.n	8008cd6 <HAL_I2S_DMAStop+0x12>
  else if ((hi2s->Init.Mode == I2S_MODE_MASTER_RX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_RX))
 8008d4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008d4e:	d12a      	bne.n	8008da6 <HAL_I2S_DMAStop+0xe2>
    if (hi2s->hdmarx != NULL)
 8008d50:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 8008d52:	b9f0      	cbnz	r0, 8008d92 <HAL_I2S_DMAStop+0xce>
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008d54:	2500      	movs	r5, #0
    __HAL_I2S_DISABLE(hi2s);
 8008d56:	6823      	ldr	r3, [r4, #0]
 8008d58:	69da      	ldr	r2, [r3, #28]
 8008d5a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008d5e:	61da      	str	r2, [r3, #28]
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8008d60:	2200      	movs	r2, #0
 8008d62:	9201      	str	r2, [sp, #4]
 8008d64:	68da      	ldr	r2, [r3, #12]
 8008d66:	9201      	str	r2, [sp, #4]
 8008d68:	689a      	ldr	r2, [r3, #8]
 8008d6a:	9201      	str	r2, [sp, #4]
 8008d6c:	9a01      	ldr	r2, [sp, #4]
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8008d6e:	685a      	ldr	r2, [r3, #4]
 8008d70:	f022 0201 	bic.w	r2, r2, #1
 8008d74:	605a      	str	r2, [r3, #4]
    if (hi2s->Init.Mode == I2S_MODE_SLAVE_RX)
 8008d76:	6862      	ldr	r2, [r4, #4]
 8008d78:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 8008d7c:	bf09      	itett	eq
 8008d7e:	6c63      	ldreq	r3, [r4, #68]	; 0x44
      READ_REG((hi2s->Instance)->DR);
 8008d80:	68db      	ldrne	r3, [r3, #12]
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 8008d82:	f043 0340 	orreq.w	r3, r3, #64	; 0x40
      hi2s->State = HAL_I2S_STATE_READY;
 8008d86:	2501      	moveq	r5, #1
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 8008d88:	bf04      	itt	eq
 8008d8a:	6463      	streq	r3, [r4, #68]	; 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 8008d8c:	f884 5041 	strbeq.w	r5, [r4, #65]	; 0x41
      READ_REG((hi2s->Instance)->DR);
 8008d90:	e7cb      	b.n	8008d2a <HAL_I2S_DMAStop+0x66>
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 8008d92:	f7fe fdcd 	bl	8007930 <HAL_DMA_Abort>
 8008d96:	2800      	cmp	r0, #0
 8008d98:	d0dc      	beq.n	8008d54 <HAL_I2S_DMAStop+0x90>
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8008d9a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8008d9c:	f043 0308 	orr.w	r3, r3, #8
 8008da0:	6463      	str	r3, [r4, #68]	; 0x44
        errorcode = HAL_ERROR;
 8008da2:	2501      	movs	r5, #1
 8008da4:	e7d7      	b.n	8008d56 <HAL_I2S_DMAStop+0x92>
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008da6:	2500      	movs	r5, #0
 8008da8:	e7bf      	b.n	8008d2a <HAL_I2S_DMAStop+0x66>

08008daa <HAL_I2S_TxCpltCallback>:
 8008daa:	4770      	bx	lr

08008dac <I2S_DMARxHalfCplt>:
{
 8008dac:	b508      	push	{r3, lr}
  HAL_I2S_RxHalfCpltCallback(hi2s);
 8008dae:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8008db0:	f7fe f966 	bl	8007080 <HAL_I2S_RxHalfCpltCallback>
}
 8008db4:	bd08      	pop	{r3, pc}

08008db6 <I2S_DMARxCplt>:
{
 8008db6:	b508      	push	{r3, lr}
 8008db8:	4603      	mov	r3, r0
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8008dba:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (hdma->Init.Mode == DMA_NORMAL)
 8008dbc:	69da      	ldr	r2, [r3, #28]
 8008dbe:	b942      	cbnz	r2, 8008dd2 <I2S_DMARxCplt+0x1c>
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8008dc0:	6801      	ldr	r1, [r0, #0]
 8008dc2:	684b      	ldr	r3, [r1, #4]
 8008dc4:	f023 0301 	bic.w	r3, r3, #1
 8008dc8:	604b      	str	r3, [r1, #4]
    hi2s->State = HAL_I2S_STATE_READY;
 8008dca:	2301      	movs	r3, #1
    hi2s->RxXferCount = 0U;
 8008dcc:	8642      	strh	r2, [r0, #50]	; 0x32
    hi2s->State = HAL_I2S_STATE_READY;
 8008dce:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
  HAL_I2S_RxCpltCallback(hi2s);
 8008dd2:	f7fe f89d 	bl	8006f10 <HAL_I2S_RxCpltCallback>
}
 8008dd6:	bd08      	pop	{r3, pc}

08008dd8 <HAL_I2S_ErrorCallback>:
 8008dd8:	4770      	bx	lr

08008dda <I2S_IRQHandler>:
{
 8008dda:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8008ddc:	6803      	ldr	r3, [r0, #0]
 8008dde:	689a      	ldr	r2, [r3, #8]
 8008de0:	9201      	str	r2, [sp, #4]
  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8008de2:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8008de6:	2a04      	cmp	r2, #4
{
 8008de8:	4604      	mov	r4, r0
  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8008dea:	d136      	bne.n	8008e5a <I2S_IRQHandler+0x80>
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8008dec:	9a01      	ldr	r2, [sp, #4]
 8008dee:	07d1      	lsls	r1, r2, #31
 8008df0:	d517      	bpl.n	8008e22 <I2S_IRQHandler+0x48>
 8008df2:	685a      	ldr	r2, [r3, #4]
 8008df4:	0652      	lsls	r2, r2, #25
 8008df6:	d514      	bpl.n	8008e22 <I2S_IRQHandler+0x48>
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8008df8:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8008dfa:	68d9      	ldr	r1, [r3, #12]
 8008dfc:	f822 1b02 	strh.w	r1, [r2], #2
  hi2s->pRxBuffPtr++;
 8008e00:	62c2      	str	r2, [r0, #44]	; 0x2c
  hi2s->RxXferCount--;
 8008e02:	8e42      	ldrh	r2, [r0, #50]	; 0x32
 8008e04:	3a01      	subs	r2, #1
 8008e06:	b292      	uxth	r2, r2
 8008e08:	8642      	strh	r2, [r0, #50]	; 0x32
  if (hi2s->RxXferCount == 0U)
 8008e0a:	8e42      	ldrh	r2, [r0, #50]	; 0x32
 8008e0c:	b292      	uxth	r2, r2
 8008e0e:	b942      	cbnz	r2, 8008e22 <I2S_IRQHandler+0x48>
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8008e10:	685a      	ldr	r2, [r3, #4]
 8008e12:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8008e16:	605a      	str	r2, [r3, #4]
    hi2s->State = HAL_I2S_STATE_READY;
 8008e18:	2301      	movs	r3, #1
 8008e1a:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    HAL_I2S_RxCpltCallback(hi2s);
 8008e1e:	f7fe f877 	bl	8006f10 <HAL_I2S_RxCpltCallback>
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8008e22:	9b01      	ldr	r3, [sp, #4]
 8008e24:	0659      	lsls	r1, r3, #25
 8008e26:	d518      	bpl.n	8008e5a <I2S_IRQHandler+0x80>
 8008e28:	6823      	ldr	r3, [r4, #0]
 8008e2a:	685a      	ldr	r2, [r3, #4]
 8008e2c:	0692      	lsls	r2, r2, #26
 8008e2e:	d514      	bpl.n	8008e5a <I2S_IRQHandler+0x80>
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8008e30:	685a      	ldr	r2, [r3, #4]
 8008e32:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8008e36:	605a      	str	r2, [r3, #4]
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8008e38:	2200      	movs	r2, #0
 8008e3a:	9202      	str	r2, [sp, #8]
 8008e3c:	68da      	ldr	r2, [r3, #12]
 8008e3e:	9202      	str	r2, [sp, #8]
 8008e40:	689b      	ldr	r3, [r3, #8]
 8008e42:	9302      	str	r3, [sp, #8]
 8008e44:	9b02      	ldr	r3, [sp, #8]
      hi2s->State = HAL_I2S_STATE_READY;
 8008e46:	2301      	movs	r3, #1
 8008e48:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8008e4c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8008e4e:	f043 0302 	orr.w	r3, r3, #2
 8008e52:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 8008e54:	4620      	mov	r0, r4
 8008e56:	f7ff ffbf 	bl	8008dd8 <HAL_I2S_ErrorCallback>
  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8008e5a:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8008e5e:	2b03      	cmp	r3, #3
 8008e60:	d136      	bne.n	8008ed0 <I2S_IRQHandler+0xf6>
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8008e62:	9b01      	ldr	r3, [sp, #4]
 8008e64:	079b      	lsls	r3, r3, #30
 8008e66:	d519      	bpl.n	8008e9c <I2S_IRQHandler+0xc2>
 8008e68:	6822      	ldr	r2, [r4, #0]
 8008e6a:	6853      	ldr	r3, [r2, #4]
 8008e6c:	0618      	lsls	r0, r3, #24
 8008e6e:	d515      	bpl.n	8008e9c <I2S_IRQHandler+0xc2>
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8008e70:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008e72:	f833 1b02 	ldrh.w	r1, [r3], #2
 8008e76:	60d1      	str	r1, [r2, #12]
  hi2s->pTxBuffPtr++;
 8008e78:	6263      	str	r3, [r4, #36]	; 0x24
  hi2s->TxXferCount--;
 8008e7a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8008e7c:	3b01      	subs	r3, #1
 8008e7e:	b29b      	uxth	r3, r3
 8008e80:	8563      	strh	r3, [r4, #42]	; 0x2a
  if (hi2s->TxXferCount == 0U)
 8008e82:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8008e84:	b29b      	uxth	r3, r3
 8008e86:	b94b      	cbnz	r3, 8008e9c <I2S_IRQHandler+0xc2>
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8008e88:	6853      	ldr	r3, [r2, #4]
 8008e8a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008e8e:	6053      	str	r3, [r2, #4]
    hi2s->State = HAL_I2S_STATE_READY;
 8008e90:	2301      	movs	r3, #1
 8008e92:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    HAL_I2S_TxCpltCallback(hi2s);
 8008e96:	4620      	mov	r0, r4
 8008e98:	f7ff ff87 	bl	8008daa <HAL_I2S_TxCpltCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8008e9c:	9b01      	ldr	r3, [sp, #4]
 8008e9e:	0719      	lsls	r1, r3, #28
 8008ea0:	d516      	bpl.n	8008ed0 <I2S_IRQHandler+0xf6>
 8008ea2:	6823      	ldr	r3, [r4, #0]
 8008ea4:	685a      	ldr	r2, [r3, #4]
 8008ea6:	0692      	lsls	r2, r2, #26
 8008ea8:	d512      	bpl.n	8008ed0 <I2S_IRQHandler+0xf6>
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8008eaa:	685a      	ldr	r2, [r3, #4]
 8008eac:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8008eb0:	605a      	str	r2, [r3, #4]
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8008eb2:	2200      	movs	r2, #0
 8008eb4:	9203      	str	r2, [sp, #12]
 8008eb6:	689b      	ldr	r3, [r3, #8]
 8008eb8:	9303      	str	r3, [sp, #12]
 8008eba:	9b03      	ldr	r3, [sp, #12]
      hi2s->State = HAL_I2S_STATE_READY;
 8008ebc:	2301      	movs	r3, #1
 8008ebe:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8008ec2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8008ec4:	f043 0304 	orr.w	r3, r3, #4
 8008ec8:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 8008eca:	4620      	mov	r0, r4
 8008ecc:	f7ff ff84 	bl	8008dd8 <HAL_I2S_ErrorCallback>
}
 8008ed0:	b004      	add	sp, #16
 8008ed2:	bd10      	pop	{r4, pc}

08008ed4 <I2S_DMAError>:
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8008ed4:	6b80      	ldr	r0, [r0, #56]	; 0x38
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8008ed6:	6802      	ldr	r2, [r0, #0]
{
 8008ed8:	b508      	push	{r3, lr}
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8008eda:	6853      	ldr	r3, [r2, #4]
 8008edc:	f023 0303 	bic.w	r3, r3, #3
 8008ee0:	6053      	str	r3, [r2, #4]
  hi2s->TxXferCount = 0U;
 8008ee2:	2300      	movs	r3, #0
 8008ee4:	8543      	strh	r3, [r0, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 8008ee6:	8643      	strh	r3, [r0, #50]	; 0x32
  hi2s->State = HAL_I2S_STATE_READY;
 8008ee8:	2301      	movs	r3, #1
 8008eea:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8008eee:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8008ef0:	f043 0308 	orr.w	r3, r3, #8
 8008ef4:	6443      	str	r3, [r0, #68]	; 0x44
  HAL_I2S_ErrorCallback(hi2s);
 8008ef6:	f7ff ff6f 	bl	8008dd8 <HAL_I2S_ErrorCallback>
}
 8008efa:	bd08      	pop	{r3, pc}

08008efc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008efc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f00:	460d      	mov	r5, r1
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008f02:	4604      	mov	r4, r0
 8008f04:	b910      	cbnz	r0, 8008f0c <HAL_RCC_ClockConfig+0x10>
  {
    return HAL_ERROR;
 8008f06:	2001      	movs	r0, #1

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);

  return HAL_OK;
}
 8008f08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008f0c:	4b44      	ldr	r3, [pc, #272]	; (8009020 <HAL_RCC_ClockConfig+0x124>)
 8008f0e:	681a      	ldr	r2, [r3, #0]
 8008f10:	f002 020f 	and.w	r2, r2, #15
 8008f14:	428a      	cmp	r2, r1
 8008f16:	d328      	bcc.n	8008f6a <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008f18:	6822      	ldr	r2, [r4, #0]
 8008f1a:	0797      	lsls	r7, r2, #30
 8008f1c:	d42d      	bmi.n	8008f7a <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008f1e:	07d0      	lsls	r0, r2, #31
 8008f20:	d441      	bmi.n	8008fa6 <HAL_RCC_ClockConfig+0xaa>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008f22:	4b3f      	ldr	r3, [pc, #252]	; (8009020 <HAL_RCC_ClockConfig+0x124>)
 8008f24:	681a      	ldr	r2, [r3, #0]
 8008f26:	f002 020f 	and.w	r2, r2, #15
 8008f2a:	42aa      	cmp	r2, r5
 8008f2c:	d866      	bhi.n	8008ffc <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008f2e:	6822      	ldr	r2, [r4, #0]
 8008f30:	0751      	lsls	r1, r2, #29
 8008f32:	d46c      	bmi.n	800900e <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008f34:	0713      	lsls	r3, r2, #28
 8008f36:	d507      	bpl.n	8008f48 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008f38:	4a3a      	ldr	r2, [pc, #232]	; (8009024 <HAL_RCC_ClockConfig+0x128>)
 8008f3a:	6921      	ldr	r1, [r4, #16]
 8008f3c:	6893      	ldr	r3, [r2, #8]
 8008f3e:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8008f42:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8008f46:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008f48:	f000 fbf2 	bl	8009730 <HAL_RCC_GetSysClockFreq>
 8008f4c:	4b35      	ldr	r3, [pc, #212]	; (8009024 <HAL_RCC_ClockConfig+0x128>)
 8008f4e:	4a36      	ldr	r2, [pc, #216]	; (8009028 <HAL_RCC_ClockConfig+0x12c>)
 8008f50:	689b      	ldr	r3, [r3, #8]
 8008f52:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8008f56:	5cd3      	ldrb	r3, [r2, r3]
 8008f58:	40d8      	lsrs	r0, r3
 8008f5a:	4b34      	ldr	r3, [pc, #208]	; (800902c <HAL_RCC_ClockConfig+0x130>)
 8008f5c:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 8008f5e:	4b34      	ldr	r3, [pc, #208]	; (8009030 <HAL_RCC_ClockConfig+0x134>)
 8008f60:	6818      	ldr	r0, [r3, #0]
 8008f62:	f7fe facb 	bl	80074fc <HAL_InitTick>
  return HAL_OK;
 8008f66:	2000      	movs	r0, #0
 8008f68:	e7ce      	b.n	8008f08 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008f6a:	b2ca      	uxtb	r2, r1
 8008f6c:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	f003 030f 	and.w	r3, r3, #15
 8008f74:	428b      	cmp	r3, r1
 8008f76:	d1c6      	bne.n	8008f06 <HAL_RCC_ClockConfig+0xa>
 8008f78:	e7ce      	b.n	8008f18 <HAL_RCC_ClockConfig+0x1c>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008f7a:	4b2a      	ldr	r3, [pc, #168]	; (8009024 <HAL_RCC_ClockConfig+0x128>)
 8008f7c:	f012 0f04 	tst.w	r2, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008f80:	bf1e      	ittt	ne
 8008f82:	6899      	ldrne	r1, [r3, #8]
 8008f84:	f441 51e0 	orrne.w	r1, r1, #7168	; 0x1c00
 8008f88:	6099      	strne	r1, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008f8a:	0716      	lsls	r6, r2, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008f8c:	bf42      	ittt	mi
 8008f8e:	6899      	ldrmi	r1, [r3, #8]
 8008f90:	f441 4160 	orrmi.w	r1, r1, #57344	; 0xe000
 8008f94:	6099      	strmi	r1, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008f96:	4923      	ldr	r1, [pc, #140]	; (8009024 <HAL_RCC_ClockConfig+0x128>)
 8008f98:	68a0      	ldr	r0, [r4, #8]
 8008f9a:	688b      	ldr	r3, [r1, #8]
 8008f9c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008fa0:	4303      	orrs	r3, r0
 8008fa2:	608b      	str	r3, [r1, #8]
 8008fa4:	e7bb      	b.n	8008f1e <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008fa6:	6862      	ldr	r2, [r4, #4]
 8008fa8:	4b1e      	ldr	r3, [pc, #120]	; (8009024 <HAL_RCC_ClockConfig+0x128>)
 8008faa:	2a01      	cmp	r2, #1
 8008fac:	d11c      	bne.n	8008fe8 <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008fb4:	d0a7      	beq.n	8008f06 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008fb6:	4e1b      	ldr	r6, [pc, #108]	; (8009024 <HAL_RCC_ClockConfig+0x128>)
 8008fb8:	68b3      	ldr	r3, [r6, #8]
 8008fba:	f023 0303 	bic.w	r3, r3, #3
 8008fbe:	4313      	orrs	r3, r2
 8008fc0:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8008fc2:	f7fe fae3 	bl	800758c <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008fc6:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8008fca:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008fcc:	68b3      	ldr	r3, [r6, #8]
 8008fce:	6862      	ldr	r2, [r4, #4]
 8008fd0:	f003 030c 	and.w	r3, r3, #12
 8008fd4:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8008fd8:	d0a3      	beq.n	8008f22 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008fda:	f7fe fad7 	bl	800758c <HAL_GetTick>
 8008fde:	1bc0      	subs	r0, r0, r7
 8008fe0:	4540      	cmp	r0, r8
 8008fe2:	d9f3      	bls.n	8008fcc <HAL_RCC_ClockConfig+0xd0>
        return HAL_TIMEOUT;
 8008fe4:	2003      	movs	r0, #3
 8008fe6:	e78f      	b.n	8008f08 <HAL_RCC_ClockConfig+0xc>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008fe8:	1e91      	subs	r1, r2, #2
 8008fea:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008fec:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008fee:	d802      	bhi.n	8008ff6 <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008ff0:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8008ff4:	e7de      	b.n	8008fb4 <HAL_RCC_ClockConfig+0xb8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008ff6:	f013 0f02 	tst.w	r3, #2
 8008ffa:	e7db      	b.n	8008fb4 <HAL_RCC_ClockConfig+0xb8>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008ffc:	b2ea      	uxtb	r2, r5
 8008ffe:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	f003 030f 	and.w	r3, r3, #15
 8009006:	42ab      	cmp	r3, r5
 8009008:	f47f af7d 	bne.w	8008f06 <HAL_RCC_ClockConfig+0xa>
 800900c:	e78f      	b.n	8008f2e <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800900e:	4905      	ldr	r1, [pc, #20]	; (8009024 <HAL_RCC_ClockConfig+0x128>)
 8009010:	68e0      	ldr	r0, [r4, #12]
 8009012:	688b      	ldr	r3, [r1, #8]
 8009014:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8009018:	4303      	orrs	r3, r0
 800901a:	608b      	str	r3, [r1, #8]
 800901c:	e78a      	b.n	8008f34 <HAL_RCC_ClockConfig+0x38>
 800901e:	bf00      	nop
 8009020:	40023c00 	.word	0x40023c00
 8009024:	40023800 	.word	0x40023800
 8009028:	0801fc28 	.word	0x0801fc28
 800902c:	200000c4 	.word	0x200000c4
 8009030:	200000cc 	.word	0x200000cc

08009034 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8009034:	4b04      	ldr	r3, [pc, #16]	; (8009048 <HAL_RCC_GetPCLK1Freq+0x14>)
 8009036:	4a05      	ldr	r2, [pc, #20]	; (800904c <HAL_RCC_GetPCLK1Freq+0x18>)
 8009038:	689b      	ldr	r3, [r3, #8]
 800903a:	f3c3 2382 	ubfx	r3, r3, #10, #3
 800903e:	5cd3      	ldrb	r3, [r2, r3]
 8009040:	4a03      	ldr	r2, [pc, #12]	; (8009050 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8009042:	6810      	ldr	r0, [r2, #0]
}
 8009044:	40d8      	lsrs	r0, r3
 8009046:	4770      	bx	lr
 8009048:	40023800 	.word	0x40023800
 800904c:	0801fc38 	.word	0x0801fc38
 8009050:	200000c4 	.word	0x200000c4

08009054 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8009054:	4b04      	ldr	r3, [pc, #16]	; (8009068 <HAL_RCC_GetPCLK2Freq+0x14>)
 8009056:	4a05      	ldr	r2, [pc, #20]	; (800906c <HAL_RCC_GetPCLK2Freq+0x18>)
 8009058:	689b      	ldr	r3, [r3, #8]
 800905a:	f3c3 3342 	ubfx	r3, r3, #13, #3
 800905e:	5cd3      	ldrb	r3, [r2, r3]
 8009060:	4a03      	ldr	r2, [pc, #12]	; (8009070 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8009062:	6810      	ldr	r0, [r2, #0]
}
 8009064:	40d8      	lsrs	r0, r3
 8009066:	4770      	bx	lr
 8009068:	40023800 	.word	0x40023800
 800906c:	0801fc38 	.word	0x0801fc38
 8009070:	200000c4 	.word	0x200000c4

08009074 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8009074:	6803      	ldr	r3, [r0, #0]
{
 8009076:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 800907a:	f013 0601 	ands.w	r6, r3, #1
{
 800907e:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8009080:	d00b      	beq.n	800909a <HAL_RCCEx_PeriphCLKConfig+0x26>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8009082:	49ab      	ldr	r1, [pc, #684]	; (8009330 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8009084:	6b86      	ldr	r6, [r0, #56]	; 0x38
 8009086:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
 800908a:	f022 62c0 	bic.w	r2, r2, #100663296	; 0x6000000
 800908e:	4332      	orrs	r2, r6
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8009090:	fab6 f686 	clz	r6, r6
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8009094:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8009098:	0976      	lsrs	r6, r6, #5
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 800909a:	079d      	lsls	r5, r3, #30
 800909c:	d50b      	bpl.n	80090b6 <HAL_RCCEx_PeriphCLKConfig+0x42>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 800909e:	48a4      	ldr	r0, [pc, #656]	; (8009330 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80090a0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80090a2:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
 80090a6:	f022 52c0 	bic.w	r2, r2, #402653184	; 0x18000000
 80090aa:	430a      	orrs	r2, r1
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
    {
      plli2sused = 1U;
 80090ac:	2900      	cmp	r1, #0
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 80090ae:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
      plli2sused = 1U;
 80090b2:	bf08      	it	eq
 80090b4:	2601      	moveq	r6, #1
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80090b6:	f013 0504 	ands.w	r5, r3, #4
 80090ba:	d012      	beq.n	80090e2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80090bc:	499c      	ldr	r1, [pc, #624]	; (8009330 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80090be:	6b25      	ldr	r5, [r4, #48]	; 0x30
 80090c0:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80090c4:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80090c8:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 80090cc:	ea42 0205 	orr.w	r2, r2, r5
    {
      plli2sused = 1U;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80090d0:	bf18      	it	ne
 80090d2:	fab5 f585 	clzne	r5, r5
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80090d6:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80090da:	bf12      	itee	ne
 80090dc:	096d      	lsrne	r5, r5, #5
  uint32_t pllsaiused = 0U;
 80090de:	2500      	moveq	r5, #0
      plli2sused = 1U;
 80090e0:	2601      	moveq	r6, #1
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80090e2:	0718      	lsls	r0, r3, #28
 80090e4:	d50f      	bpl.n	8009106 <HAL_RCCEx_PeriphCLKConfig+0x92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80090e6:	4892      	ldr	r0, [pc, #584]	; (8009330 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80090e8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80090ea:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
 80090ee:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 80090f2:	430a      	orrs	r2, r1

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80090f4:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80090f8:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80090fc:	f000 810b 	beq.w	8009316 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
      plli2sused = 1U;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
    {
      pllsaiused = 1U;
 8009100:	2900      	cmp	r1, #0
 8009102:	bf08      	it	eq
 8009104:	2501      	moveq	r5, #1
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8009106:	0699      	lsls	r1, r3, #26
 8009108:	d533      	bpl.n	8009172 <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800910a:	2300      	movs	r3, #0
 800910c:	9301      	str	r3, [sp, #4]
 800910e:	4b88      	ldr	r3, [pc, #544]	; (8009330 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8009110:	4f88      	ldr	r7, [pc, #544]	; (8009334 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
    __HAL_RCC_PWR_CLK_ENABLE();
 8009112:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009114:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8009118:	641a      	str	r2, [r3, #64]	; 0x40
 800911a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800911c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009120:	9301      	str	r3, [sp, #4]
 8009122:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 8009124:	683b      	ldr	r3, [r7, #0]
 8009126:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800912a:	603b      	str	r3, [r7, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800912c:	f7fe fa2e 	bl	800758c <HAL_GetTick>
 8009130:	4680      	mov	r8, r0

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8009132:	683b      	ldr	r3, [r7, #0]
 8009134:	05da      	lsls	r2, r3, #23
 8009136:	f140 80f0 	bpl.w	800931a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
      {
        return HAL_TIMEOUT;
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800913a:	4f7d      	ldr	r7, [pc, #500]	; (8009330 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800913c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800913e:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8009142:	f040 80fd 	bne.w	8009340 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009146:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009148:	f403 7240 	and.w	r2, r3, #768	; 0x300
 800914c:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8009150:	4a77      	ldr	r2, [pc, #476]	; (8009330 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8009152:	f040 8118 	bne.w	8009386 <HAL_RCCEx_PeriphCLKConfig+0x312>
 8009156:	6891      	ldr	r1, [r2, #8]
 8009158:	f023 4070 	bic.w	r0, r3, #4026531840	; 0xf0000000
 800915c:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8009160:	f420 7040 	bic.w	r0, r0, #768	; 0x300
 8009164:	4301      	orrs	r1, r0
 8009166:	6091      	str	r1, [r2, #8]
 8009168:	6f11      	ldr	r1, [r2, #112]	; 0x70
 800916a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800916e:	430b      	orrs	r3, r1
 8009170:	6713      	str	r3, [r2, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8009172:	6823      	ldr	r3, [r4, #0]
 8009174:	06d9      	lsls	r1, r3, #27
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8009176:	bf42      	ittt	mi
 8009178:	4b6f      	ldrmi	r3, [pc, #444]	; (8009338 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800917a:	f894 2058 	ldrbmi.w	r2, [r4, #88]	; 0x58
 800917e:	601a      	strmi	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8009180:	6823      	ldr	r3, [r4, #0]
 8009182:	061a      	lsls	r2, r3, #24
 8009184:	d508      	bpl.n	8009198 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8009186:	496a      	ldr	r1, [pc, #424]	; (8009330 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8009188:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 800918a:	f8d1 2094 	ldr.w	r2, [r1, #148]	; 0x94
 800918e:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8009192:	4302      	orrs	r2, r0
 8009194:	f8c1 2094 	str.w	r2, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8009198:	065f      	lsls	r7, r3, #25
 800919a:	d508      	bpl.n	80091ae <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800919c:	4964      	ldr	r1, [pc, #400]	; (8009330 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800919e:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80091a0:	f8d1 2094 	ldr.w	r2, [r1, #148]	; 0x94
 80091a4:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 80091a8:	4302      	orrs	r2, r0
 80091aa:	f8c1 2094 	str.w	r2, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80091ae:	05d8      	lsls	r0, r3, #23
 80091b0:	d50c      	bpl.n	80091cc <HAL_RCCEx_PeriphCLKConfig+0x158>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80091b2:	485f      	ldr	r0, [pc, #380]	; (8009330 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80091b4:	6d61      	ldr	r1, [r4, #84]	; 0x54
 80091b6:	f8d0 2094 	ldr.w	r2, [r0, #148]	; 0x94
 80091ba:	f022 6200 	bic.w	r2, r2, #134217728	; 0x8000000
 80091be:	430a      	orrs	r2, r1

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
    {
      pllsaiused = 1U;
 80091c0:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80091c4:	f8c0 2094 	str.w	r2, [r0, #148]	; 0x94
      pllsaiused = 1U;
 80091c8:	bf08      	it	eq
 80091ca:	2501      	moveq	r5, #1
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 80091cc:	0599      	lsls	r1, r3, #22
 80091ce:	d508      	bpl.n	80091e2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 80091d0:	4957      	ldr	r1, [pc, #348]	; (8009330 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80091d2:	6c60      	ldr	r0, [r4, #68]	; 0x44
 80091d4:	f8d1 2094 	ldr.w	r2, [r1, #148]	; 0x94
 80091d8:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80091dc:	4302      	orrs	r2, r0
 80091de:	f8c1 2094 	str.w	r2, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80091e2:	055a      	lsls	r2, r3, #21
 80091e4:	f100 80d3 	bmi.w	800938e <HAL_RCCEx_PeriphCLKConfig+0x31a>
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80091e8:	2e01      	cmp	r6, #1
 80091ea:	f040 80de 	bne.w	80093aa <HAL_RCCEx_PeriphCLKConfig+0x336>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80091ee:	4e53      	ldr	r6, [pc, #332]	; (800933c <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
    /* Get tick */
    tickstart = HAL_GetTick();
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80091f0:	f8df 913c 	ldr.w	r9, [pc, #316]	; 8009330 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
    __HAL_RCC_PLLI2S_DISABLE();
 80091f4:	2300      	movs	r3, #0
 80091f6:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 80091f8:	f7fe f9c8 	bl	800758c <HAL_GetTick>
 80091fc:	464f      	mov	r7, r9
 80091fe:	4680      	mov	r8, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8009200:	f8d9 3000 	ldr.w	r3, [r9]
 8009204:	011b      	lsls	r3, r3, #4
 8009206:	f100 8126 	bmi.w	8009456 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 800920a:	6822      	ldr	r2, [r4, #0]
 800920c:	07d0      	lsls	r0, r2, #31
 800920e:	d501      	bpl.n	8009214 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
 8009210:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009212:	b11b      	cbz	r3, 800921c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8009214:	0791      	lsls	r1, r2, #30
 8009216:	d514      	bpl.n	8009242 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8009218:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800921a:	b993      	cbnz	r3, 8009242 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800921c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8009220:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8009224:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8009228:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 800922c:	430b      	orrs	r3, r1
 800922e:	6861      	ldr	r1, [r4, #4]
 8009230:	430b      	orrs	r3, r1
 8009232:	68a1      	ldr	r1, [r4, #8]
 8009234:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8009238:	6961      	ldr	r1, [r4, #20]
 800923a:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 800923e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8009242:	0753      	lsls	r3, r2, #29
 8009244:	d503      	bpl.n	800924e <HAL_RCCEx_PeriphCLKConfig+0x1da>
 8009246:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8009248:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800924c:	d005      	beq.n	800925a <HAL_RCCEx_PeriphCLKConfig+0x1e6>
 800924e:	0717      	lsls	r7, r2, #28
 8009250:	d520      	bpl.n	8009294 <HAL_RCCEx_PeriphCLKConfig+0x220>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8009252:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009254:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009258:	d11c      	bne.n	8009294 <HAL_RCCEx_PeriphCLKConfig+0x220>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800925a:	4935      	ldr	r1, [pc, #212]	; (8009330 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800925c:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8009260:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8009264:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8009268:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 800926c:	4303      	orrs	r3, r0
 800926e:	6860      	ldr	r0, [r4, #4]
 8009270:	4303      	orrs	r3, r0
 8009272:	68a0      	ldr	r0, [r4, #8]
 8009274:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8009278:	6920      	ldr	r0, [r4, #16]
 800927a:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 800927e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8009282:	f8d1 008c 	ldr.w	r0, [r1, #140]	; 0x8c
 8009286:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8009288:	f020 001f 	bic.w	r0, r0, #31
 800928c:	3b01      	subs	r3, #1
 800928e:	4303      	orrs	r3, r0
 8009290:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8009294:	0550      	lsls	r0, r2, #21
 8009296:	d51b      	bpl.n	80092d0 <HAL_RCCEx_PeriphCLKConfig+0x25c>
 8009298:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800929a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800929e:	d117      	bne.n	80092d0 <HAL_RCCEx_PeriphCLKConfig+0x25c>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80092a0:	4823      	ldr	r0, [pc, #140]	; (8009330 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 80092a2:	6867      	ldr	r7, [r4, #4]
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80092a4:	f8d0 1084 	ldr.w	r1, [r0, #132]	; 0x84
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80092a8:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 80092ac:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 80092b0:	433b      	orrs	r3, r7
 80092b2:	68a7      	ldr	r7, [r4, #8]
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80092b4:	f3c1 4101 	ubfx	r1, r1, #16, #2
 80092b8:	3101      	adds	r1, #1
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 80092ba:	ea43 1387 	orr.w	r3, r3, r7, lsl #6
 80092be:	ea43 6341 	orr.w	r3, r3, r1, lsl #25
 80092c2:	68e1      	ldr	r1, [r4, #12]
 80092c4:	0849      	lsrs	r1, r1, #1
 80092c6:	3901      	subs	r1, #1
 80092c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80092cc:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80092d0:	0511      	lsls	r1, r2, #20
 80092d2:	d511      	bpl.n	80092f8 <HAL_RCCEx_PeriphCLKConfig+0x284>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80092d4:	6923      	ldr	r3, [r4, #16]
 80092d6:	68a2      	ldr	r2, [r4, #8]
 80092d8:	061b      	lsls	r3, r3, #24
 80092da:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80092de:	6862      	ldr	r2, [r4, #4]
 80092e0:	4313      	orrs	r3, r2
 80092e2:	6962      	ldr	r2, [r4, #20]
 80092e4:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 80092e8:	68e2      	ldr	r2, [r4, #12]
 80092ea:	0852      	lsrs	r2, r2, #1
 80092ec:	3a01      	subs	r2, #1
 80092ee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80092f2:	4a0f      	ldr	r2, [pc, #60]	; (8009330 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80092f4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80092f8:	2301      	movs	r3, #1
 80092fa:	6033      	str	r3, [r6, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80092fc:	f7fe f946 	bl	800758c <HAL_GetTick>
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009300:	4f0b      	ldr	r7, [pc, #44]	; (8009330 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
    tickstart = HAL_GetTick();
 8009302:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009304:	683b      	ldr	r3, [r7, #0]
 8009306:	011a      	lsls	r2, r3, #4
 8009308:	d453      	bmi.n	80093b2 <HAL_RCCEx_PeriphCLKConfig+0x33e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800930a:	f7fe f93f 	bl	800758c <HAL_GetTick>
 800930e:	1b80      	subs	r0, r0, r6
 8009310:	2802      	cmp	r0, #2
 8009312:	d9f7      	bls.n	8009304 <HAL_RCCEx_PeriphCLKConfig+0x290>
 8009314:	e008      	b.n	8009328 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
      plli2sused = 1U;
 8009316:	2601      	movs	r6, #1
 8009318:	e6f5      	b.n	8009106 <HAL_RCCEx_PeriphCLKConfig+0x92>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800931a:	f7fe f937 	bl	800758c <HAL_GetTick>
 800931e:	eba0 0008 	sub.w	r0, r0, r8
 8009322:	2802      	cmp	r0, #2
 8009324:	f67f af05 	bls.w	8009132 <HAL_RCCEx_PeriphCLKConfig+0xbe>
        return HAL_TIMEOUT;
 8009328:	2003      	movs	r0, #3
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
}
 800932a:	b003      	add	sp, #12
 800932c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009330:	40023800 	.word	0x40023800
 8009334:	40007000 	.word	0x40007000
 8009338:	424711e0 	.word	0x424711e0
 800933c:	42470068 	.word	0x42470068
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8009340:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8009342:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8009346:	429a      	cmp	r2, r3
 8009348:	f43f aefd 	beq.w	8009146 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800934c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 800934e:	4a4c      	ldr	r2, [pc, #304]	; (8009480 <HAL_RCCEx_PeriphCLKConfig+0x40c>)
 8009350:	2101      	movs	r1, #1
 8009352:	6011      	str	r1, [r2, #0]
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009354:	f423 7340 	bic.w	r3, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 8009358:	2100      	movs	r1, #0
 800935a:	6011      	str	r1, [r2, #0]
      RCC->BDCR = tmpreg1;
 800935c:	673b      	str	r3, [r7, #112]	; 0x70
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800935e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009360:	07db      	lsls	r3, r3, #31
 8009362:	f57f aef0 	bpl.w	8009146 <HAL_RCCEx_PeriphCLKConfig+0xd2>
        tickstart = HAL_GetTick();
 8009366:	f7fe f911 	bl	800758c <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800936a:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 800936e:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009370:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009372:	0798      	lsls	r0, r3, #30
 8009374:	f53f aee7 	bmi.w	8009146 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009378:	f7fe f908 	bl	800758c <HAL_GetTick>
 800937c:	eba0 0008 	sub.w	r0, r0, r8
 8009380:	4548      	cmp	r0, r9
 8009382:	d9f5      	bls.n	8009370 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8009384:	e7d0      	b.n	8009328 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009386:	6891      	ldr	r1, [r2, #8]
 8009388:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 800938c:	e6eb      	b.n	8009166 <HAL_RCCEx_PeriphCLKConfig+0xf2>
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 800938e:	483d      	ldr	r0, [pc, #244]	; (8009484 <HAL_RCCEx_PeriphCLKConfig+0x410>)
 8009390:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8009392:	f8d0 2094 	ldr.w	r2, [r0, #148]	; 0x94
 8009396:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 800939a:	430a      	orrs	r2, r1
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 800939c:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 80093a0:	f8c0 2094 	str.w	r2, [r0, #148]	; 0x94
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 80093a4:	f47f af20 	bne.w	80091e8 <HAL_RCCEx_PeriphCLKConfig+0x174>
 80093a8:	e721      	b.n	80091ee <HAL_RCCEx_PeriphCLKConfig+0x17a>
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80093aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80093ae:	f43f af1e 	beq.w	80091ee <HAL_RCCEx_PeriphCLKConfig+0x17a>
  if(pllsaiused == 1U)
 80093b2:	2d01      	cmp	r5, #1
 80093b4:	d14d      	bne.n	8009452 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    __HAL_RCC_PLLSAI_DISABLE();
 80093b6:	4d34      	ldr	r5, [pc, #208]	; (8009488 <HAL_RCCEx_PeriphCLKConfig+0x414>)
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80093b8:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 8009484 <HAL_RCCEx_PeriphCLKConfig+0x410>
    __HAL_RCC_PLLSAI_DISABLE();
 80093bc:	2300      	movs	r3, #0
 80093be:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 80093c0:	f7fe f8e4 	bl	800758c <HAL_GetTick>
 80093c4:	4646      	mov	r6, r8
 80093c6:	4607      	mov	r7, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80093c8:	f8d8 3000 	ldr.w	r3, [r8]
 80093cc:	009b      	lsls	r3, r3, #2
 80093ce:	d44a      	bmi.n	8009466 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 80093d0:	6822      	ldr	r2, [r4, #0]
 80093d2:	0750      	lsls	r0, r2, #29
 80093d4:	d501      	bpl.n	80093da <HAL_RCCEx_PeriphCLKConfig+0x366>
 80093d6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80093d8:	b11b      	cbz	r3, 80093e2 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 80093da:	0711      	lsls	r1, r2, #28
 80093dc:	d519      	bpl.n	8009412 <HAL_RCCEx_PeriphCLKConfig+0x39e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80093de:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80093e0:	b9bb      	cbnz	r3, 8009412 <HAL_RCCEx_PeriphCLKConfig+0x39e>
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 80093e2:	f8d6 3088 	ldr.w	r3, [r6, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 80093e6:	69a1      	ldr	r1, [r4, #24]
 80093e8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80093ec:	430b      	orrs	r3, r1
 80093ee:	69e1      	ldr	r1, [r4, #28]
 80093f0:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 80093f4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80093f6:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 80093fa:	f8c6 3088 	str.w	r3, [r6, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80093fe:	f8d6 308c 	ldr.w	r3, [r6, #140]	; 0x8c
 8009402:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8009404:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8009408:	3901      	subs	r1, #1
 800940a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800940e:	f8c6 308c 	str.w	r3, [r6, #140]	; 0x8c
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8009412:	05d2      	lsls	r2, r2, #23
 8009414:	d514      	bpl.n	8009440 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8009416:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8009418:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800941c:	d110      	bne.n	8009440 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800941e:	4919      	ldr	r1, [pc, #100]	; (8009484 <HAL_RCCEx_PeriphCLKConfig+0x410>)
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8009420:	69a2      	ldr	r2, [r4, #24]
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8009422:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8009426:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 800942a:	4313      	orrs	r3, r2
 800942c:	69e2      	ldr	r2, [r4, #28]
 800942e:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8009432:	6a22      	ldr	r2, [r4, #32]
 8009434:	0852      	lsrs	r2, r2, #1
 8009436:	3a01      	subs	r2, #1
 8009438:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800943c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    __HAL_RCC_PLLSAI_ENABLE();
 8009440:	2301      	movs	r3, #1
 8009442:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 8009444:	f7fe f8a2 	bl	800758c <HAL_GetTick>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8009448:	4d0e      	ldr	r5, [pc, #56]	; (8009484 <HAL_RCCEx_PeriphCLKConfig+0x410>)
    tickstart = HAL_GetTick();
 800944a:	4604      	mov	r4, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800944c:	682b      	ldr	r3, [r5, #0]
 800944e:	009b      	lsls	r3, r3, #2
 8009450:	d50f      	bpl.n	8009472 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  return HAL_OK;
 8009452:	2000      	movs	r0, #0
 8009454:	e769      	b.n	800932a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8009456:	f7fe f899 	bl	800758c <HAL_GetTick>
 800945a:	eba0 0008 	sub.w	r0, r0, r8
 800945e:	2802      	cmp	r0, #2
 8009460:	f67f aece 	bls.w	8009200 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8009464:	e760      	b.n	8009328 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8009466:	f7fe f891 	bl	800758c <HAL_GetTick>
 800946a:	1bc0      	subs	r0, r0, r7
 800946c:	2802      	cmp	r0, #2
 800946e:	d9ab      	bls.n	80093c8 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8009470:	e75a      	b.n	8009328 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8009472:	f7fe f88b 	bl	800758c <HAL_GetTick>
 8009476:	1b00      	subs	r0, r0, r4
 8009478:	2802      	cmp	r0, #2
 800947a:	d9e7      	bls.n	800944c <HAL_RCCEx_PeriphCLKConfig+0x3d8>
 800947c:	e754      	b.n	8009328 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800947e:	bf00      	nop
 8009480:	42470e40 	.word	0x42470e40
 8009484:	40023800 	.word	0x40023800
 8009488:	42470070 	.word	0x42470070

0800948c <HAL_RCCEx_GetPeriphCLKConfig>:
void HAL_RCCEx_GetPeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
  uint32_t tempreg;

  /* Set all possible values for the extended clock type parameter------------*/
  PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_I2S_APB1 | RCC_PERIPHCLK_I2S_APB2 |\
 800948c:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8009490:	6003      	str	r3, [r0, #0]
                                        RCC_PERIPHCLK_CEC      | RCC_PERIPHCLK_FMPI2C1  |\
                                        RCC_PERIPHCLK_CLK48     | RCC_PERIPHCLK_SDIO     |\
                                        RCC_PERIPHCLK_SPDIFRX;

  /* Get the PLLI2S Clock configuration --------------------------------------*/
  PeriphClkInit->PLLI2S.PLLI2SM = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM) >> RCC_PLLI2SCFGR_PLLI2SM_Pos);
 8009492:	4b3c      	ldr	r3, [pc, #240]	; (8009584 <HAL_RCCEx_GetPeriphCLKConfig+0xf8>)
 8009494:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8009498:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800949c:	6042      	str	r2, [r0, #4]
  PeriphClkInit->PLLI2S.PLLI2SN = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> RCC_PLLI2SCFGR_PLLI2SN_Pos);
 800949e:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80094a2:	f3c2 1288 	ubfx	r2, r2, #6, #9
 80094a6:	6082      	str	r2, [r0, #8]
  PeriphClkInit->PLLI2S.PLLI2SP = (uint32_t)((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80094a8:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80094ac:	f3c2 4201 	ubfx	r2, r2, #16, #2
 80094b0:	3201      	adds	r2, #1
 80094b2:	0052      	lsls	r2, r2, #1
 80094b4:	60c2      	str	r2, [r0, #12]
  PeriphClkInit->PLLI2S.PLLI2SQ = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80094b6:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80094ba:	f3c2 6203 	ubfx	r2, r2, #24, #4
 80094be:	6102      	str	r2, [r0, #16]
  PeriphClkInit->PLLI2S.PLLI2SR = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80094c0:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80094c4:	f3c2 7202 	ubfx	r2, r2, #28, #3
 80094c8:	6142      	str	r2, [r0, #20]
  /* Get the PLLSAI Clock configuration --------------------------------------*/
  PeriphClkInit->PLLSAI.PLLSAIM = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIM) >> RCC_PLLSAICFGR_PLLSAIM_Pos);
 80094ca:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80094ce:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80094d2:	6182      	str	r2, [r0, #24]
  PeriphClkInit->PLLSAI.PLLSAIN = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> RCC_PLLSAICFGR_PLLSAIN_Pos);
 80094d4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80094d8:	f3c2 1288 	ubfx	r2, r2, #6, #9
 80094dc:	61c2      	str	r2, [r0, #28]
  PeriphClkInit->PLLSAI.PLLSAIP = (uint32_t)((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 80094de:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80094e2:	f3c2 4201 	ubfx	r2, r2, #16, #2
 80094e6:	3201      	adds	r2, #1
 80094e8:	0052      	lsls	r2, r2, #1
 80094ea:	6202      	str	r2, [r0, #32]
  PeriphClkInit->PLLSAI.PLLSAIQ = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80094ec:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80094f0:	f3c2 6203 	ubfx	r2, r2, #24, #4
 80094f4:	6242      	str	r2, [r0, #36]	; 0x24
  /* Get the PLLSAI/PLLI2S division factors ----------------------------------*/
  PeriphClkInit->PLLI2SDivQ = (uint32_t)((RCC->DCKCFGR & RCC_DCKCFGR_PLLI2SDIVQ) >> RCC_DCKCFGR_PLLI2SDIVQ_Pos);
 80094f6:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80094fa:	f002 021f 	and.w	r2, r2, #31
 80094fe:	6282      	str	r2, [r0, #40]	; 0x28
  PeriphClkInit->PLLSAIDivQ = (uint32_t)((RCC->DCKCFGR & RCC_DCKCFGR_PLLSAIDIVQ) >> RCC_DCKCFGR_PLLSAIDIVQ_Pos);
 8009500:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8009504:	f3c2 2204 	ubfx	r2, r2, #8, #5
 8009508:	62c2      	str	r2, [r0, #44]	; 0x2c

  /* Get the SAI1 clock configuration ----------------------------------------*/
  PeriphClkInit->Sai1ClockSelection = __HAL_RCC_GET_SAI1_SOURCE();
 800950a:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800950e:	f402 1240 	and.w	r2, r2, #3145728	; 0x300000
 8009512:	6302      	str	r2, [r0, #48]	; 0x30

  /* Get the SAI2 clock configuration ----------------------------------------*/
  PeriphClkInit->Sai2ClockSelection = __HAL_RCC_GET_SAI2_SOURCE();
 8009514:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8009518:	f402 0240 	and.w	r2, r2, #12582912	; 0xc00000
 800951c:	6342      	str	r2, [r0, #52]	; 0x34

  /* Get the I2S APB1 clock configuration ------------------------------------*/
  PeriphClkInit->I2sApb1ClockSelection = __HAL_RCC_GET_I2S_APB1_SOURCE();
 800951e:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8009522:	f002 62c0 	and.w	r2, r2, #100663296	; 0x6000000
 8009526:	6382      	str	r2, [r0, #56]	; 0x38

  /* Get the I2S APB2 clock configuration ------------------------------------*/
  PeriphClkInit->I2sApb2ClockSelection = __HAL_RCC_GET_I2S_APB2_SOURCE();
 8009528:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800952c:	f002 52c0 	and.w	r2, r2, #402653184	; 0x18000000
 8009530:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Get the RTC Clock configuration -----------------------------------------*/
  tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
 8009532:	6899      	ldr	r1, [r3, #8]
  PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
 8009534:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
 8009536:	f401 11f8 	and.w	r1, r1, #2031616	; 0x1f0000
  PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
 800953a:	f402 7240 	and.w	r2, r2, #768	; 0x300
 800953e:	430a      	orrs	r2, r1
 8009540:	6402      	str	r2, [r0, #64]	; 0x40

  /* Get the CEC clock configuration -----------------------------------------*/
  PeriphClkInit->CecClockSelection = __HAL_RCC_GET_CEC_SOURCE();
 8009542:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8009546:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
 800954a:	6482      	str	r2, [r0, #72]	; 0x48

  /* Get the FMPI2C1 clock configuration -------------------------------------*/
  PeriphClkInit->Fmpi2c1ClockSelection = __HAL_RCC_GET_FMPI2C1_SOURCE();
 800954c:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8009550:	f402 0240 	and.w	r2, r2, #12582912	; 0xc00000
 8009554:	64c2      	str	r2, [r0, #76]	; 0x4c

  /* Get the CLK48 clock configuration ----------------------------------------*/
  PeriphClkInit->Clk48ClockSelection = __HAL_RCC_GET_CLK48_SOURCE();
 8009556:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800955a:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 800955e:	6542      	str	r2, [r0, #84]	; 0x54

  /* Get the SDIO clock configuration ----------------------------------------*/
  PeriphClkInit->SdioClockSelection = __HAL_RCC_GET_SDIO_SOURCE();
 8009560:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8009564:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8009568:	6442      	str	r2, [r0, #68]	; 0x44

  /* Get the SPDIFRX clock configuration -------------------------------------*/
  PeriphClkInit->SpdifClockSelection = __HAL_RCC_GET_SPDIFRX_SOURCE();
 800956a:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800956e:	f002 5200 	and.w	r2, r2, #536870912	; 0x20000000
 8009572:	6502      	str	r2, [r0, #80]	; 0x50

  /* Get the TIM Prescaler configuration -------------------------------------*/
  if ((RCC->DCKCFGR & RCC_DCKCFGR_TIMPRE) == RESET)
 8009574:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009578:	f3c3 6300 	ubfx	r3, r3, #24, #1
 800957c:	f880 3058 	strb.w	r3, [r0, #88]	; 0x58
  }
  else
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
  }
}
 8009580:	4770      	bx	lr
 8009582:	bf00      	nop
 8009584:	40023800 	.word	0x40023800

08009588 <HAL_RCCEx_GetPeriphCLKFreq>:
  /* This variable used to store the SAI clock source */
  uint32_t saiclocksource = 0U;
  uint32_t srcclk = 0U;
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
  switch (PeriphClk)
 8009588:	3801      	subs	r0, #1
 800958a:	2807      	cmp	r0, #7
 800958c:	d817      	bhi.n	80095be <HAL_RCCEx_GetPeriphCLKFreq+0x36>
 800958e:	e8df f000 	tbb	[pc, r0]
 8009592:	957a      	.short	0x957a
 8009594:	16160416 	.word	0x16160416
 8009598:	0416      	.short	0x0416
  {
  case RCC_PERIPHCLK_SAI1:
  case RCC_PERIPHCLK_SAI2:
    {
      saiclocksource = RCC->DCKCFGR;
 800959a:	4a61      	ldr	r2, [pc, #388]	; (8009720 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 800959c:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
      saiclocksource &= (RCC_DCKCFGR_SAI1SRC | RCC_DCKCFGR_SAI2SRC);
 80095a0:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
      switch (saiclocksource)
 80095a4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80095a8:	4611      	mov	r1, r2
 80095aa:	f000 80b6 	beq.w	800971a <HAL_RCCEx_GetPeriphCLKFreq+0x192>
 80095ae:	d808      	bhi.n	80095c2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 80095b0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80095b4:	d00e      	beq.n	80095d4 <HAL_RCCEx_GetPeriphCLKFreq+0x4c>
 80095b6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80095ba:	d047      	beq.n	800964c <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
 80095bc:	b333      	cbz	r3, 800960c <HAL_RCCEx_GetPeriphCLKFreq+0x84>
            frequency = (uint32_t)(HSI_VALUE);
          }
          else
          {
            /* In Case the PLL Source is HSE (External Clock) */
            frequency = (uint32_t)(HSE_VALUE);
 80095be:	2000      	movs	r0, #0
 80095c0:	4770      	bx	lr
 80095c2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80095c6:	d041      	beq.n	800964c <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
 80095c8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80095cc:	d053      	beq.n	8009676 <HAL_RCCEx_GetPeriphCLKFreq+0xee>
 80095ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80095d2:	d1f4      	bne.n	80095be <HAL_RCCEx_GetPeriphCLKFreq+0x36>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80095d4:	684b      	ldr	r3, [r1, #4]
          tmpreg1 = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24U;
 80095d6:	4a52      	ldr	r2, [pc, #328]	; (8009720 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
            vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80095d8:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
          tmpreg1 = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24U;
 80095dc:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80095e0:	025b      	lsls	r3, r3, #9
            vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80095e2:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 80095e6:	bf54      	ite	pl
 80095e8:	4b4e      	ldrpl	r3, [pc, #312]	; (8009724 <HAL_RCCEx_GetPeriphCLKFreq+0x19c>)
            vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM)));
 80095ea:	4b4f      	ldrmi	r3, [pc, #316]	; (8009728 <HAL_RCCEx_GetPeriphCLKFreq+0x1a0>)
 80095ec:	fbb3 f3f0 	udiv	r3, r3, r0
          frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U))/(tmpreg1);
 80095f0:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
 80095f4:	f3c0 1088 	ubfx	r0, r0, #6, #9
 80095f8:	4358      	muls	r0, r3
          tmpreg1 = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24U;
 80095fa:	f3c1 6303 	ubfx	r3, r1, #24, #4
          frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U))/(tmpreg1);
 80095fe:	fbb0 f0f3 	udiv	r0, r0, r3
          tmpreg1 = ((RCC->DCKCFGR & RCC_DCKCFGR_PLLI2SDIVQ) + 1U);
 8009602:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8009606:	f003 031f 	and.w	r3, r3, #31
 800960a:	e01b      	b.n	8009644 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800960c:	6853      	ldr	r3, [r2, #4]
            vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIM));
 800960e:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8009612:	025a      	lsls	r2, r3, #9
          tmpreg1 = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24U;
 8009614:	4a42      	ldr	r2, [pc, #264]	; (8009720 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
            vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIM));
 8009616:	bf58      	it	pl
 8009618:	4b42      	ldrpl	r3, [pc, #264]	; (8009724 <HAL_RCCEx_GetPeriphCLKFreq+0x19c>)
          tmpreg1 = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24U;
 800961a:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
            vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIM)));
 800961e:	bf48      	it	mi
 8009620:	4b41      	ldrmi	r3, [pc, #260]	; (8009728 <HAL_RCCEx_GetPeriphCLKFreq+0x1a0>)
            vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIM));
 8009622:	f000 003f 	and.w	r0, r0, #63	; 0x3f
            vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIM)));
 8009626:	fbb3 f3f0 	udiv	r3, r3, r0
          frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6U))/(tmpreg1);
 800962a:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
 800962e:	f3c0 1088 	ubfx	r0, r0, #6, #9
 8009632:	4358      	muls	r0, r3
          tmpreg1 = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24U;
 8009634:	f3c1 6303 	ubfx	r3, r1, #24, #4
          frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6U))/(tmpreg1);
 8009638:	fbb0 f0f3 	udiv	r0, r0, r3
          tmpreg1 = (((RCC->DCKCFGR & RCC_DCKCFGR_PLLSAIDIVQ) >> 8U) + 1U);
 800963c:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8009640:	f3c3 2304 	ubfx	r3, r3, #8, #5
          tmpreg1 = ((RCC->DCKCFGR & RCC_DCKCFGR_PLLI2SDIVQ) + 1U);
 8009644:	3301      	adds	r3, #1
          frequency = frequency/(tmpreg1);
 8009646:	fbb0 f0f3 	udiv	r0, r0, r3
          break;
 800964a:	4770      	bx	lr
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800964c:	684b      	ldr	r3, [r1, #4]
          tmpreg1 = (RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U;
 800964e:	4a34      	ldr	r2, [pc, #208]	; (8009720 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
            vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8009650:	6848      	ldr	r0, [r1, #4]
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8009652:	0259      	lsls	r1, r3, #9
            vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8009654:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 8009658:	bf54      	ite	pl
 800965a:	4b32      	ldrpl	r3, [pc, #200]	; (8009724 <HAL_RCCEx_GetPeriphCLKFreq+0x19c>)
            vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800965c:	4b32      	ldrmi	r3, [pc, #200]	; (8009728 <HAL_RCCEx_GetPeriphCLKFreq+0x1a0>)
 800965e:	fbb3 f3f0 	udiv	r3, r3, r0
          tmpreg1 = (RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U;
 8009662:	6850      	ldr	r0, [r2, #4]
          frequency = (vcoinput * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U))/(tmpreg1);
 8009664:	6852      	ldr	r2, [r2, #4]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }

          /* PLL_VCO Output = PLL_VCO Input * PLLN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 8009666:	f3c2 1288 	ubfx	r2, r2, #6, #9
 800966a:	4353      	muls	r3, r2
          /* I2S_CLK = PLL_VCO Output/PLLR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 800966c:	f3c0 7002 	ubfx	r0, r0, #28, #3
 8009670:	fbb3 f0f0 	udiv	r0, r3, r0
          break;
 8009674:	4770      	bx	lr
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8009676:	6853      	ldr	r3, [r2, #4]
            frequency = HSI_VALUE;
 8009678:	482b      	ldr	r0, [pc, #172]	; (8009728 <HAL_RCCEx_GetPeriphCLKFreq+0x1a0>)
 800967a:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 800967e:	4b29      	ldr	r3, [pc, #164]	; (8009724 <HAL_RCCEx_GetPeriphCLKFreq+0x19c>)
 8009680:	bf08      	it	eq
 8009682:	4618      	moveq	r0, r3
 8009684:	4770      	bx	lr
      srcclk = __HAL_RCC_GET_I2S_APB1_SOURCE();
 8009686:	4b26      	ldr	r3, [pc, #152]	; (8009720 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8009688:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800968c:	f002 62c0 	and.w	r2, r2, #100663296	; 0x6000000
      switch (srcclk)
 8009690:	f1b2 6f80 	cmp.w	r2, #67108864	; 0x4000000
 8009694:	d033      	beq.n	80096fe <HAL_RCCEx_GetPeriphCLKFreq+0x176>
 8009696:	d806      	bhi.n	80096a6 <HAL_RCCEx_GetPeriphCLKFreq+0x11e>
 8009698:	b302      	cbz	r2, 80096dc <HAL_RCCEx_GetPeriphCLKFreq+0x154>
          frequency = EXTERNAL_CLOCK_VALUE;
 800969a:	f1b2 7f00 	cmp.w	r2, #33554432	; 0x2000000
 800969e:	4823      	ldr	r0, [pc, #140]	; (800972c <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>)
 80096a0:	bf18      	it	ne
 80096a2:	2000      	movne	r0, #0
 80096a4:	4770      	bx	lr
 80096a6:	f1b2 6fc0 	cmp.w	r2, #100663296	; 0x6000000
 80096aa:	d188      	bne.n	80095be <HAL_RCCEx_GetPeriphCLKFreq+0x36>
        }
        /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
      case RCC_I2SAPB2CLKSOURCE_PLLSRC:
        {
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80096ac:	685b      	ldr	r3, [r3, #4]
            frequency = (uint32_t)(HSE_VALUE);
 80096ae:	481d      	ldr	r0, [pc, #116]	; (8009724 <HAL_RCCEx_GetPeriphCLKFreq+0x19c>)
 80096b0:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80096b4:	4b1c      	ldr	r3, [pc, #112]	; (8009728 <HAL_RCCEx_GetPeriphCLKFreq+0x1a0>)
 80096b6:	bf18      	it	ne
 80096b8:	4618      	movne	r0, r3
 80096ba:	4770      	bx	lr
      srcclk = __HAL_RCC_GET_I2S_APB2_SOURCE();
 80096bc:	4b18      	ldr	r3, [pc, #96]	; (8009720 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 80096be:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80096c2:	f002 52c0 	and.w	r2, r2, #402653184	; 0x18000000
      switch (srcclk)
 80096c6:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
 80096ca:	d018      	beq.n	80096fe <HAL_RCCEx_GetPeriphCLKFreq+0x176>
 80096cc:	d803      	bhi.n	80096d6 <HAL_RCCEx_GetPeriphCLKFreq+0x14e>
 80096ce:	b12a      	cbz	r2, 80096dc <HAL_RCCEx_GetPeriphCLKFreq+0x154>
          frequency = EXTERNAL_CLOCK_VALUE;
 80096d0:	f1b2 6f00 	cmp.w	r2, #134217728	; 0x8000000
 80096d4:	e7e3      	b.n	800969e <HAL_RCCEx_GetPeriphCLKFreq+0x116>
 80096d6:	f1b2 5fc0 	cmp.w	r2, #402653184	; 0x18000000
 80096da:	e7e6      	b.n	80096aa <HAL_RCCEx_GetPeriphCLKFreq+0x122>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80096dc:	685a      	ldr	r2, [r3, #4]
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80096de:	4910      	ldr	r1, [pc, #64]	; (8009720 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80096e0:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80096e4:	0252      	lsls	r2, r2, #9
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80096e6:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 80096ea:	bf4c      	ite	mi
 80096ec:	4b0e      	ldrmi	r3, [pc, #56]	; (8009728 <HAL_RCCEx_GetPeriphCLKFreq+0x1a0>)
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80096ee:	4b0d      	ldrpl	r3, [pc, #52]	; (8009724 <HAL_RCCEx_GetPeriphCLKFreq+0x19c>)
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80096f0:	f8d1 2084 	ldr.w	r2, [r1, #132]	; 0x84
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80096f4:	fbb3 f3f0 	udiv	r3, r3, r0
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80096f8:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
 80096fc:	e7b3      	b.n	8009666 <HAL_RCCEx_GetPeriphCLKFreq+0xde>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80096fe:	685a      	ldr	r2, [r3, #4]
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 8009700:	4907      	ldr	r1, [pc, #28]	; (8009720 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8009702:	6858      	ldr	r0, [r3, #4]
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8009704:	0253      	lsls	r3, r2, #9
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8009706:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 800970a:	bf4c      	ite	mi
 800970c:	4b06      	ldrmi	r3, [pc, #24]	; (8009728 <HAL_RCCEx_GetPeriphCLKFreq+0x1a0>)
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800970e:	4b05      	ldrpl	r3, [pc, #20]	; (8009724 <HAL_RCCEx_GetPeriphCLKFreq+0x19c>)
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 8009710:	684a      	ldr	r2, [r1, #4]
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8009712:	fbb3 f3f0 	udiv	r3, r3, r0
          frequency = (uint32_t)(vcooutput /(((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 8009716:	6848      	ldr	r0, [r1, #4]
 8009718:	e7a5      	b.n	8009666 <HAL_RCCEx_GetPeriphCLKFreq+0xde>
          frequency = EXTERNAL_CLOCK_VALUE;
 800971a:	4804      	ldr	r0, [pc, #16]	; (800972c <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>)
      }
      break;
    }
  }
  return frequency;
}
 800971c:	4770      	bx	lr
 800971e:	bf00      	nop
 8009720:	40023800 	.word	0x40023800
 8009724:	00f42400 	.word	0x00f42400
 8009728:	007a1200 	.word	0x007a1200
 800972c:	00bb8000 	.word	0x00bb8000

08009730 <HAL_RCC_GetSysClockFreq>:
  uint32_t pllp = 0U;
  uint32_t pllr = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009730:	4920      	ldr	r1, [pc, #128]	; (80097b4 <HAL_RCC_GetSysClockFreq+0x84>)
{
 8009732:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009734:	688b      	ldr	r3, [r1, #8]
 8009736:	f003 030c 	and.w	r3, r3, #12
 800973a:	2b08      	cmp	r3, #8
 800973c:	d007      	beq.n	800974e <HAL_RCC_GetSysClockFreq+0x1e>
 800973e:	2b0c      	cmp	r3, #12
 8009740:	d020      	beq.n	8009784 <HAL_RCC_GetSysClockFreq+0x54>
 8009742:	481d      	ldr	r0, [pc, #116]	; (80097b8 <HAL_RCC_GetSysClockFreq+0x88>)
 8009744:	4a1d      	ldr	r2, [pc, #116]	; (80097bc <HAL_RCC_GetSysClockFreq+0x8c>)
 8009746:	2b04      	cmp	r3, #4
 8009748:	bf08      	it	eq
 800974a:	4610      	moveq	r0, r2
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 800974c:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800974e:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8009750:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009752:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8009754:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009758:	bf14      	ite	ne
 800975a:	4818      	ldrne	r0, [pc, #96]	; (80097bc <HAL_RCC_GetSysClockFreq+0x8c>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800975c:	4816      	ldreq	r0, [pc, #88]	; (80097b8 <HAL_RCC_GetSysClockFreq+0x88>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800975e:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8009762:	bf18      	it	ne
 8009764:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009766:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800976a:	fba1 0100 	umull	r0, r1, r1, r0
 800976e:	f7fb fb1b 	bl	8004da8 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8009772:	4b10      	ldr	r3, [pc, #64]	; (80097b4 <HAL_RCC_GetSysClockFreq+0x84>)
 8009774:	685b      	ldr	r3, [r3, #4]
 8009776:	f3c3 4301 	ubfx	r3, r3, #16, #2
 800977a:	3301      	adds	r3, #1
 800977c:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllr;
 800977e:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 8009782:	e7e3      	b.n	800974c <HAL_RCC_GetSysClockFreq+0x1c>
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009784:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8009786:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009788:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800978a:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800978e:	bf14      	ite	ne
 8009790:	480a      	ldrne	r0, [pc, #40]	; (80097bc <HAL_RCC_GetSysClockFreq+0x8c>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009792:	4809      	ldreq	r0, [pc, #36]	; (80097b8 <HAL_RCC_GetSysClockFreq+0x88>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009794:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8009798:	bf18      	it	ne
 800979a:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800979c:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80097a0:	fba1 0100 	umull	r0, r1, r1, r0
 80097a4:	f7fb fb00 	bl	8004da8 <__aeabi_uldivmod>
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80097a8:	4b02      	ldr	r3, [pc, #8]	; (80097b4 <HAL_RCC_GetSysClockFreq+0x84>)
 80097aa:	685b      	ldr	r3, [r3, #4]
 80097ac:	f3c3 7302 	ubfx	r3, r3, #28, #3
 80097b0:	e7e5      	b.n	800977e <HAL_RCC_GetSysClockFreq+0x4e>
 80097b2:	bf00      	nop
 80097b4:	40023800 	.word	0x40023800
 80097b8:	00f42400 	.word	0x00f42400
 80097bc:	007a1200 	.word	0x007a1200

080097c0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80097c0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80097c4:	4604      	mov	r4, r0
 80097c6:	2800      	cmp	r0, #0
 80097c8:	d030      	beq.n	800982c <HAL_RCC_OscConfig+0x6c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80097ca:	6803      	ldr	r3, [r0, #0]
 80097cc:	07df      	lsls	r7, r3, #31
 80097ce:	d410      	bmi.n	80097f2 <HAL_RCC_OscConfig+0x32>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80097d0:	6823      	ldr	r3, [r4, #0]
 80097d2:	079e      	lsls	r6, r3, #30
 80097d4:	d467      	bmi.n	80098a6 <HAL_RCC_OscConfig+0xe6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80097d6:	6823      	ldr	r3, [r4, #0]
 80097d8:	071a      	lsls	r2, r3, #28
 80097da:	f100 80b1 	bmi.w	8009940 <HAL_RCC_OscConfig+0x180>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80097de:	6823      	ldr	r3, [r4, #0]
 80097e0:	075b      	lsls	r3, r3, #29
 80097e2:	f100 80cf 	bmi.w	8009984 <HAL_RCC_OscConfig+0x1c4>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80097e6:	69a0      	ldr	r0, [r4, #24]
 80097e8:	2800      	cmp	r0, #0
 80097ea:	f040 8139 	bne.w	8009a60 <HAL_RCC_OscConfig+0x2a0>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 80097ee:	2000      	movs	r0, #0
 80097f0:	e036      	b.n	8009860 <HAL_RCC_OscConfig+0xa0>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80097f2:	4b97      	ldr	r3, [pc, #604]	; (8009a50 <HAL_RCC_OscConfig+0x290>)
 80097f4:	689a      	ldr	r2, [r3, #8]
 80097f6:	f002 020c 	and.w	r2, r2, #12
 80097fa:	2a04      	cmp	r2, #4
 80097fc:	d00f      	beq.n	800981e <HAL_RCC_OscConfig+0x5e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80097fe:	689a      	ldr	r2, [r3, #8]
 8009800:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8009804:	2a08      	cmp	r2, #8
 8009806:	d102      	bne.n	800980e <HAL_RCC_OscConfig+0x4e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8009808:	685a      	ldr	r2, [r3, #4]
 800980a:	0255      	lsls	r5, r2, #9
 800980c:	d407      	bmi.n	800981e <HAL_RCC_OscConfig+0x5e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800980e:	689a      	ldr	r2, [r3, #8]
 8009810:	f002 020c 	and.w	r2, r2, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8009814:	2a0c      	cmp	r2, #12
 8009816:	d10b      	bne.n	8009830 <HAL_RCC_OscConfig+0x70>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009818:	685b      	ldr	r3, [r3, #4]
 800981a:	0258      	lsls	r0, r3, #9
 800981c:	d508      	bpl.n	8009830 <HAL_RCC_OscConfig+0x70>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800981e:	4b8c      	ldr	r3, [pc, #560]	; (8009a50 <HAL_RCC_OscConfig+0x290>)
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	0399      	lsls	r1, r3, #14
 8009824:	d5d4      	bpl.n	80097d0 <HAL_RCC_OscConfig+0x10>
 8009826:	6863      	ldr	r3, [r4, #4]
 8009828:	2b00      	cmp	r3, #0
 800982a:	d1d1      	bne.n	80097d0 <HAL_RCC_OscConfig+0x10>
          return HAL_ERROR;
 800982c:	2001      	movs	r0, #1
 800982e:	e017      	b.n	8009860 <HAL_RCC_OscConfig+0xa0>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009830:	6863      	ldr	r3, [r4, #4]
 8009832:	4d87      	ldr	r5, [pc, #540]	; (8009a50 <HAL_RCC_OscConfig+0x290>)
 8009834:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009838:	d115      	bne.n	8009866 <HAL_RCC_OscConfig+0xa6>
 800983a:	682b      	ldr	r3, [r5, #0]
 800983c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009840:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8009842:	f7fd fea3 	bl	800758c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009846:	4e82      	ldr	r6, [pc, #520]	; (8009a50 <HAL_RCC_OscConfig+0x290>)
        tickstart = HAL_GetTick();
 8009848:	4605      	mov	r5, r0
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800984a:	f241 3788 	movw	r7, #5000	; 0x1388
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800984e:	6833      	ldr	r3, [r6, #0]
 8009850:	039a      	lsls	r2, r3, #14
 8009852:	d4bd      	bmi.n	80097d0 <HAL_RCC_OscConfig+0x10>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009854:	f7fd fe9a 	bl	800758c <HAL_GetTick>
 8009858:	1b40      	subs	r0, r0, r5
 800985a:	42b8      	cmp	r0, r7
 800985c:	d9f7      	bls.n	800984e <HAL_RCC_OscConfig+0x8e>
            return HAL_TIMEOUT;
 800985e:	2003      	movs	r0, #3
}
 8009860:	b002      	add	sp, #8
 8009862:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009866:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800986a:	d104      	bne.n	8009876 <HAL_RCC_OscConfig+0xb6>
 800986c:	682b      	ldr	r3, [r5, #0]
 800986e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009872:	602b      	str	r3, [r5, #0]
 8009874:	e7e1      	b.n	800983a <HAL_RCC_OscConfig+0x7a>
 8009876:	682a      	ldr	r2, [r5, #0]
 8009878:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800987c:	602a      	str	r2, [r5, #0]
 800987e:	682a      	ldr	r2, [r5, #0]
 8009880:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8009884:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8009886:	2b00      	cmp	r3, #0
 8009888:	d1db      	bne.n	8009842 <HAL_RCC_OscConfig+0x82>
        tickstart = HAL_GetTick();
 800988a:	f7fd fe7f 	bl	800758c <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800988e:	f241 3788 	movw	r7, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8009892:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009894:	682b      	ldr	r3, [r5, #0]
 8009896:	039b      	lsls	r3, r3, #14
 8009898:	d59a      	bpl.n	80097d0 <HAL_RCC_OscConfig+0x10>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800989a:	f7fd fe77 	bl	800758c <HAL_GetTick>
 800989e:	1b80      	subs	r0, r0, r6
 80098a0:	42b8      	cmp	r0, r7
 80098a2:	d9f7      	bls.n	8009894 <HAL_RCC_OscConfig+0xd4>
 80098a4:	e7db      	b.n	800985e <HAL_RCC_OscConfig+0x9e>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80098a6:	4b6a      	ldr	r3, [pc, #424]	; (8009a50 <HAL_RCC_OscConfig+0x290>)
 80098a8:	689a      	ldr	r2, [r3, #8]
 80098aa:	f012 0f0c 	tst.w	r2, #12
 80098ae:	d00f      	beq.n	80098d0 <HAL_RCC_OscConfig+0x110>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80098b0:	689a      	ldr	r2, [r3, #8]
 80098b2:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80098b6:	2a08      	cmp	r2, #8
 80098b8:	d102      	bne.n	80098c0 <HAL_RCC_OscConfig+0x100>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80098ba:	685a      	ldr	r2, [r3, #4]
 80098bc:	0257      	lsls	r7, r2, #9
 80098be:	d507      	bpl.n	80098d0 <HAL_RCC_OscConfig+0x110>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80098c0:	689a      	ldr	r2, [r3, #8]
 80098c2:	f002 020c 	and.w	r2, r2, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80098c6:	2a0c      	cmp	r2, #12
 80098c8:	d111      	bne.n	80098ee <HAL_RCC_OscConfig+0x12e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80098ca:	685b      	ldr	r3, [r3, #4]
 80098cc:	025e      	lsls	r6, r3, #9
 80098ce:	d40e      	bmi.n	80098ee <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80098d0:	4b5f      	ldr	r3, [pc, #380]	; (8009a50 <HAL_RCC_OscConfig+0x290>)
 80098d2:	681a      	ldr	r2, [r3, #0]
 80098d4:	0795      	lsls	r5, r2, #30
 80098d6:	d502      	bpl.n	80098de <HAL_RCC_OscConfig+0x11e>
 80098d8:	68e2      	ldr	r2, [r4, #12]
 80098da:	2a01      	cmp	r2, #1
 80098dc:	d1a6      	bne.n	800982c <HAL_RCC_OscConfig+0x6c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80098de:	681a      	ldr	r2, [r3, #0]
 80098e0:	6921      	ldr	r1, [r4, #16]
 80098e2:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 80098e6:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 80098ea:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80098ec:	e773      	b.n	80097d6 <HAL_RCC_OscConfig+0x16>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80098ee:	68e2      	ldr	r2, [r4, #12]
 80098f0:	4b58      	ldr	r3, [pc, #352]	; (8009a54 <HAL_RCC_OscConfig+0x294>)
 80098f2:	b1b2      	cbz	r2, 8009922 <HAL_RCC_OscConfig+0x162>
        __HAL_RCC_HSI_ENABLE();
 80098f4:	2201      	movs	r2, #1
 80098f6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80098f8:	f7fd fe48 	bl	800758c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80098fc:	4d54      	ldr	r5, [pc, #336]	; (8009a50 <HAL_RCC_OscConfig+0x290>)
        tickstart = HAL_GetTick();
 80098fe:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009900:	682b      	ldr	r3, [r5, #0]
 8009902:	0798      	lsls	r0, r3, #30
 8009904:	d507      	bpl.n	8009916 <HAL_RCC_OscConfig+0x156>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009906:	682b      	ldr	r3, [r5, #0]
 8009908:	6922      	ldr	r2, [r4, #16]
 800990a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800990e:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8009912:	602b      	str	r3, [r5, #0]
 8009914:	e75f      	b.n	80097d6 <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009916:	f7fd fe39 	bl	800758c <HAL_GetTick>
 800991a:	1b80      	subs	r0, r0, r6
 800991c:	2802      	cmp	r0, #2
 800991e:	d9ef      	bls.n	8009900 <HAL_RCC_OscConfig+0x140>
 8009920:	e79d      	b.n	800985e <HAL_RCC_OscConfig+0x9e>
        __HAL_RCC_HSI_DISABLE();
 8009922:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8009924:	f7fd fe32 	bl	800758c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009928:	4e49      	ldr	r6, [pc, #292]	; (8009a50 <HAL_RCC_OscConfig+0x290>)
        tickstart = HAL_GetTick();
 800992a:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800992c:	6833      	ldr	r3, [r6, #0]
 800992e:	0799      	lsls	r1, r3, #30
 8009930:	f57f af51 	bpl.w	80097d6 <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009934:	f7fd fe2a 	bl	800758c <HAL_GetTick>
 8009938:	1b40      	subs	r0, r0, r5
 800993a:	2802      	cmp	r0, #2
 800993c:	d9f6      	bls.n	800992c <HAL_RCC_OscConfig+0x16c>
 800993e:	e78e      	b.n	800985e <HAL_RCC_OscConfig+0x9e>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8009940:	6962      	ldr	r2, [r4, #20]
 8009942:	4b45      	ldr	r3, [pc, #276]	; (8009a58 <HAL_RCC_OscConfig+0x298>)
 8009944:	b17a      	cbz	r2, 8009966 <HAL_RCC_OscConfig+0x1a6>
      __HAL_RCC_LSI_ENABLE();
 8009946:	2201      	movs	r2, #1
 8009948:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800994a:	f7fd fe1f 	bl	800758c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800994e:	4e40      	ldr	r6, [pc, #256]	; (8009a50 <HAL_RCC_OscConfig+0x290>)
      tickstart = HAL_GetTick();
 8009950:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009952:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8009954:	079f      	lsls	r7, r3, #30
 8009956:	f53f af42 	bmi.w	80097de <HAL_RCC_OscConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800995a:	f7fd fe17 	bl	800758c <HAL_GetTick>
 800995e:	1b40      	subs	r0, r0, r5
 8009960:	2802      	cmp	r0, #2
 8009962:	d9f6      	bls.n	8009952 <HAL_RCC_OscConfig+0x192>
 8009964:	e77b      	b.n	800985e <HAL_RCC_OscConfig+0x9e>
      __HAL_RCC_LSI_DISABLE();
 8009966:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8009968:	f7fd fe10 	bl	800758c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800996c:	4e38      	ldr	r6, [pc, #224]	; (8009a50 <HAL_RCC_OscConfig+0x290>)
      tickstart = HAL_GetTick();
 800996e:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009970:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8009972:	0798      	lsls	r0, r3, #30
 8009974:	f57f af33 	bpl.w	80097de <HAL_RCC_OscConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009978:	f7fd fe08 	bl	800758c <HAL_GetTick>
 800997c:	1b40      	subs	r0, r0, r5
 800997e:	2802      	cmp	r0, #2
 8009980:	d9f6      	bls.n	8009970 <HAL_RCC_OscConfig+0x1b0>
 8009982:	e76c      	b.n	800985e <HAL_RCC_OscConfig+0x9e>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009984:	4b32      	ldr	r3, [pc, #200]	; (8009a50 <HAL_RCC_OscConfig+0x290>)
 8009986:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009988:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 800998c:	d128      	bne.n	80099e0 <HAL_RCC_OscConfig+0x220>
      __HAL_RCC_PWR_CLK_ENABLE();
 800998e:	9201      	str	r2, [sp, #4]
 8009990:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009992:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8009996:	641a      	str	r2, [r3, #64]	; 0x40
 8009998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800999a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800999e:	9301      	str	r3, [sp, #4]
 80099a0:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80099a2:	2701      	movs	r7, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80099a4:	4d2d      	ldr	r5, [pc, #180]	; (8009a5c <HAL_RCC_OscConfig+0x29c>)
 80099a6:	682b      	ldr	r3, [r5, #0]
 80099a8:	05d9      	lsls	r1, r3, #23
 80099aa:	d51b      	bpl.n	80099e4 <HAL_RCC_OscConfig+0x224>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80099ac:	68a3      	ldr	r3, [r4, #8]
 80099ae:	4d28      	ldr	r5, [pc, #160]	; (8009a50 <HAL_RCC_OscConfig+0x290>)
 80099b0:	2b01      	cmp	r3, #1
 80099b2:	d127      	bne.n	8009a04 <HAL_RCC_OscConfig+0x244>
 80099b4:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80099b6:	f043 0301 	orr.w	r3, r3, #1
 80099ba:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 80099bc:	f7fd fde6 	bl	800758c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80099c0:	4e23      	ldr	r6, [pc, #140]	; (8009a50 <HAL_RCC_OscConfig+0x290>)
      tickstart = HAL_GetTick();
 80099c2:	4605      	mov	r5, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80099c4:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80099c8:	6f33      	ldr	r3, [r6, #112]	; 0x70
 80099ca:	079b      	lsls	r3, r3, #30
 80099cc:	d539      	bpl.n	8009a42 <HAL_RCC_OscConfig+0x282>
    if(pwrclkchanged == SET)
 80099ce:	2f00      	cmp	r7, #0
 80099d0:	f43f af09 	beq.w	80097e6 <HAL_RCC_OscConfig+0x26>
      __HAL_RCC_PWR_CLK_DISABLE();
 80099d4:	4a1e      	ldr	r2, [pc, #120]	; (8009a50 <HAL_RCC_OscConfig+0x290>)
 80099d6:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80099d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80099dc:	6413      	str	r3, [r2, #64]	; 0x40
 80099de:	e702      	b.n	80097e6 <HAL_RCC_OscConfig+0x26>
    FlagStatus       pwrclkchanged = RESET;
 80099e0:	2700      	movs	r7, #0
 80099e2:	e7df      	b.n	80099a4 <HAL_RCC_OscConfig+0x1e4>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80099e4:	682b      	ldr	r3, [r5, #0]
 80099e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80099ea:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80099ec:	f7fd fdce 	bl	800758c <HAL_GetTick>
 80099f0:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80099f2:	682b      	ldr	r3, [r5, #0]
 80099f4:	05da      	lsls	r2, r3, #23
 80099f6:	d4d9      	bmi.n	80099ac <HAL_RCC_OscConfig+0x1ec>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80099f8:	f7fd fdc8 	bl	800758c <HAL_GetTick>
 80099fc:	1b80      	subs	r0, r0, r6
 80099fe:	2802      	cmp	r0, #2
 8009a00:	d9f7      	bls.n	80099f2 <HAL_RCC_OscConfig+0x232>
 8009a02:	e72c      	b.n	800985e <HAL_RCC_OscConfig+0x9e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009a04:	2b05      	cmp	r3, #5
 8009a06:	d104      	bne.n	8009a12 <HAL_RCC_OscConfig+0x252>
 8009a08:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8009a0a:	f043 0304 	orr.w	r3, r3, #4
 8009a0e:	672b      	str	r3, [r5, #112]	; 0x70
 8009a10:	e7d0      	b.n	80099b4 <HAL_RCC_OscConfig+0x1f4>
 8009a12:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8009a14:	f022 0201 	bic.w	r2, r2, #1
 8009a18:	672a      	str	r2, [r5, #112]	; 0x70
 8009a1a:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8009a1c:	f022 0204 	bic.w	r2, r2, #4
 8009a20:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d1ca      	bne.n	80099bc <HAL_RCC_OscConfig+0x1fc>
      tickstart = HAL_GetTick();
 8009a26:	f7fd fdb1 	bl	800758c <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009a2a:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8009a2e:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009a30:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8009a32:	0798      	lsls	r0, r3, #30
 8009a34:	d5cb      	bpl.n	80099ce <HAL_RCC_OscConfig+0x20e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009a36:	f7fd fda9 	bl	800758c <HAL_GetTick>
 8009a3a:	1b80      	subs	r0, r0, r6
 8009a3c:	4540      	cmp	r0, r8
 8009a3e:	d9f7      	bls.n	8009a30 <HAL_RCC_OscConfig+0x270>
 8009a40:	e70d      	b.n	800985e <HAL_RCC_OscConfig+0x9e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009a42:	f7fd fda3 	bl	800758c <HAL_GetTick>
 8009a46:	1b40      	subs	r0, r0, r5
 8009a48:	4540      	cmp	r0, r8
 8009a4a:	d9bd      	bls.n	80099c8 <HAL_RCC_OscConfig+0x208>
 8009a4c:	e707      	b.n	800985e <HAL_RCC_OscConfig+0x9e>
 8009a4e:	bf00      	nop
 8009a50:	40023800 	.word	0x40023800
 8009a54:	42470000 	.word	0x42470000
 8009a58:	42470e80 	.word	0x42470e80
 8009a5c:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8009a60:	4d3a      	ldr	r5, [pc, #232]	; (8009b4c <HAL_RCC_OscConfig+0x38c>)
 8009a62:	68ab      	ldr	r3, [r5, #8]
 8009a64:	f003 030c 	and.w	r3, r3, #12
 8009a68:	2b08      	cmp	r3, #8
 8009a6a:	d03f      	beq.n	8009aec <HAL_RCC_OscConfig+0x32c>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009a6c:	4e38      	ldr	r6, [pc, #224]	; (8009b50 <HAL_RCC_OscConfig+0x390>)
 8009a6e:	2300      	movs	r3, #0
 8009a70:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8009a72:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009a74:	d12d      	bne.n	8009ad2 <HAL_RCC_OscConfig+0x312>
        tickstart = HAL_GetTick();
 8009a76:	f7fd fd89 	bl	800758c <HAL_GetTick>
 8009a7a:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009a7c:	682b      	ldr	r3, [r5, #0]
 8009a7e:	0199      	lsls	r1, r3, #6
 8009a80:	d421      	bmi.n	8009ac6 <HAL_RCC_OscConfig+0x306>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8009a82:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 8009a86:	4313      	orrs	r3, r2
 8009a88:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8009a8a:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8009a8e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8009a90:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8009a94:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8009a96:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8009a9a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8009a9c:	0852      	lsrs	r2, r2, #1
 8009a9e:	3a01      	subs	r2, #1
 8009aa0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009aa4:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8009aa6:	2301      	movs	r3, #1
 8009aa8:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8009aaa:	f7fd fd6f 	bl	800758c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009aae:	4d27      	ldr	r5, [pc, #156]	; (8009b4c <HAL_RCC_OscConfig+0x38c>)
        tickstart = HAL_GetTick();
 8009ab0:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009ab2:	682b      	ldr	r3, [r5, #0]
 8009ab4:	019a      	lsls	r2, r3, #6
 8009ab6:	f53f ae9a 	bmi.w	80097ee <HAL_RCC_OscConfig+0x2e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009aba:	f7fd fd67 	bl	800758c <HAL_GetTick>
 8009abe:	1b00      	subs	r0, r0, r4
 8009ac0:	2802      	cmp	r0, #2
 8009ac2:	d9f6      	bls.n	8009ab2 <HAL_RCC_OscConfig+0x2f2>
 8009ac4:	e6cb      	b.n	800985e <HAL_RCC_OscConfig+0x9e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009ac6:	f7fd fd61 	bl	800758c <HAL_GetTick>
 8009aca:	1bc0      	subs	r0, r0, r7
 8009acc:	2802      	cmp	r0, #2
 8009ace:	d9d5      	bls.n	8009a7c <HAL_RCC_OscConfig+0x2bc>
 8009ad0:	e6c5      	b.n	800985e <HAL_RCC_OscConfig+0x9e>
        tickstart = HAL_GetTick();
 8009ad2:	f7fd fd5b 	bl	800758c <HAL_GetTick>
 8009ad6:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009ad8:	682b      	ldr	r3, [r5, #0]
 8009ada:	019b      	lsls	r3, r3, #6
 8009adc:	f57f ae87 	bpl.w	80097ee <HAL_RCC_OscConfig+0x2e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009ae0:	f7fd fd54 	bl	800758c <HAL_GetTick>
 8009ae4:	1b00      	subs	r0, r0, r4
 8009ae6:	2802      	cmp	r0, #2
 8009ae8:	d9f6      	bls.n	8009ad8 <HAL_RCC_OscConfig+0x318>
 8009aea:	e6b8      	b.n	800985e <HAL_RCC_OscConfig+0x9e>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009aec:	2801      	cmp	r0, #1
 8009aee:	f43f aeb7 	beq.w	8009860 <HAL_RCC_OscConfig+0xa0>
        pll_config = RCC->PLLCFGR;
 8009af2:	686b      	ldr	r3, [r5, #4]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009af4:	69e2      	ldr	r2, [r4, #28]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009af6:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009afa:	4291      	cmp	r1, r2
 8009afc:	f47f ae96 	bne.w	800982c <HAL_RCC_OscConfig+0x6c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009b00:	6a21      	ldr	r1, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009b02:	f003 023f 	and.w	r2, r3, #63	; 0x3f
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009b06:	428a      	cmp	r2, r1
 8009b08:	f47f ae90 	bne.w	800982c <HAL_RCC_OscConfig+0x6c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009b0c:	6a61      	ldr	r1, [r4, #36]	; 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009b0e:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 8009b12:	401a      	ands	r2, r3
 8009b14:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8009b18:	f47f ae88 	bne.w	800982c <HAL_RCC_OscConfig+0x6c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009b1c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8009b1e:	0852      	lsrs	r2, r2, #1
 8009b20:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 8009b24:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009b26:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8009b2a:	f47f ae7f 	bne.w	800982c <HAL_RCC_OscConfig+0x6c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8009b2e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8009b30:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009b34:	ebb2 6f01 	cmp.w	r2, r1, lsl #24
 8009b38:	f47f ae78 	bne.w	800982c <HAL_RCC_OscConfig+0x6c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8009b3c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8009b3e:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8009b42:	ebb3 7f02 	cmp.w	r3, r2, lsl #28
 8009b46:	f43f ae52 	beq.w	80097ee <HAL_RCC_OscConfig+0x2e>
 8009b4a:	e66f      	b.n	800982c <HAL_RCC_OscConfig+0x6c>
 8009b4c:	40023800 	.word	0x40023800
 8009b50:	42470060 	.word	0x42470060

08009b54 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009b54:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8009b58:	461f      	mov	r7, r3
 8009b5a:	4689      	mov	r9, r1
 8009b5c:	4690      	mov	r8, r2
 8009b5e:	4604      	mov	r4, r0
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009b60:	f7fd fd14 	bl	800758c <HAL_GetTick>
 8009b64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009b66:	443b      	add	r3, r7
 8009b68:	1a1d      	subs	r5, r3, r0
  tmp_tickstart = HAL_GetTick();
 8009b6a:	f7fd fd0f 	bl	800758c <HAL_GetTick>

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8009b6e:	4b26      	ldr	r3, [pc, #152]	; (8009c08 <SPI_WaitFlagStateUntilTimeout+0xb4>)
 8009b70:	681e      	ldr	r6, [r3, #0]
 8009b72:	f3c6 36cb 	ubfx	r6, r6, #15, #12
 8009b76:	436e      	muls	r6, r5
  tmp_tickstart = HAL_GetTick();
 8009b78:	4682      	mov	sl, r0
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8009b7a:	9601      	str	r6, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009b7c:	6822      	ldr	r2, [r4, #0]
 8009b7e:	6893      	ldr	r3, [r2, #8]
 8009b80:	ea39 0303 	bics.w	r3, r9, r3
 8009b84:	bf0c      	ite	eq
 8009b86:	2301      	moveq	r3, #1
 8009b88:	2300      	movne	r3, #0
 8009b8a:	4543      	cmp	r3, r8
 8009b8c:	d101      	bne.n	8009b92 <SPI_WaitFlagStateUntilTimeout+0x3e>
      }
      count--;
    }
  }

  return HAL_OK;
 8009b8e:	2000      	movs	r0, #0
 8009b90:	e02e      	b.n	8009bf0 <SPI_WaitFlagStateUntilTimeout+0x9c>
    if (Timeout != HAL_MAX_DELAY)
 8009b92:	1c7b      	adds	r3, r7, #1
 8009b94:	d0f3      	beq.n	8009b7e <SPI_WaitFlagStateUntilTimeout+0x2a>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009b96:	f7fd fcf9 	bl	800758c <HAL_GetTick>
 8009b9a:	eba0 000a 	sub.w	r0, r0, sl
 8009b9e:	42a8      	cmp	r0, r5
 8009ba0:	d329      	bcc.n	8009bf6 <SPI_WaitFlagStateUntilTimeout+0xa2>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009ba2:	6823      	ldr	r3, [r4, #0]
 8009ba4:	685a      	ldr	r2, [r3, #4]
 8009ba6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009baa:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009bac:	6862      	ldr	r2, [r4, #4]
 8009bae:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8009bb2:	d10a      	bne.n	8009bca <SPI_WaitFlagStateUntilTimeout+0x76>
 8009bb4:	68a2      	ldr	r2, [r4, #8]
 8009bb6:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8009bba:	d002      	beq.n	8009bc2 <SPI_WaitFlagStateUntilTimeout+0x6e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009bbc:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8009bc0:	d103      	bne.n	8009bca <SPI_WaitFlagStateUntilTimeout+0x76>
          __HAL_SPI_DISABLE(hspi);
 8009bc2:	681a      	ldr	r2, [r3, #0]
 8009bc4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009bc8:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009bca:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8009bcc:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8009bd0:	d107      	bne.n	8009be2 <SPI_WaitFlagStateUntilTimeout+0x8e>
          SPI_RESET_CRC(hspi);
 8009bd2:	681a      	ldr	r2, [r3, #0]
 8009bd4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009bd8:	601a      	str	r2, [r3, #0]
 8009bda:	681a      	ldr	r2, [r3, #0]
 8009bdc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009be0:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8009be2:	2301      	movs	r3, #1
 8009be4:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 8009be8:	2300      	movs	r3, #0
 8009bea:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
 8009bee:	2003      	movs	r0, #3
}
 8009bf0:	b002      	add	sp, #8
 8009bf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if(count == 0U)
 8009bf6:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 8009bf8:	2b00      	cmp	r3, #0
      count--;
 8009bfa:	9b01      	ldr	r3, [sp, #4]
 8009bfc:	f103 33ff 	add.w	r3, r3, #4294967295
        tmp_timeout = 0U;
 8009c00:	bf08      	it	eq
 8009c02:	2500      	moveq	r5, #0
      count--;
 8009c04:	9301      	str	r3, [sp, #4]
 8009c06:	e7b9      	b.n	8009b7c <SPI_WaitFlagStateUntilTimeout+0x28>
 8009c08:	200000c4 	.word	0x200000c4

08009c0c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009c0c:	b530      	push	{r4, r5, lr}
 8009c0e:	460b      	mov	r3, r1
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8009c10:	4913      	ldr	r1, [pc, #76]	; (8009c60 <SPI_EndRxTxTransaction+0x54>)
 8009c12:	4d14      	ldr	r5, [pc, #80]	; (8009c64 <SPI_EndRxTxTransaction+0x58>)
 8009c14:	6809      	ldr	r1, [r1, #0]
 8009c16:	fbb1 f5f5 	udiv	r5, r1, r5
{
 8009c1a:	b085      	sub	sp, #20
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8009c1c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8009c20:	4369      	muls	r1, r5
 8009c22:	9103      	str	r1, [sp, #12]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009c24:	6841      	ldr	r1, [r0, #4]
 8009c26:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
{
 8009c2a:	4604      	mov	r4, r0
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009c2c:	d10c      	bne.n	8009c48 <SPI_EndRxTxTransaction+0x3c>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009c2e:	9200      	str	r2, [sp, #0]
 8009c30:	2180      	movs	r1, #128	; 0x80
 8009c32:	2200      	movs	r2, #0
 8009c34:	f7ff ff8e 	bl	8009b54 <SPI_WaitFlagStateUntilTimeout>
 8009c38:	b178      	cbz	r0, 8009c5a <SPI_EndRxTxTransaction+0x4e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009c3a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8009c3c:	f043 0320 	orr.w	r3, r3, #32
 8009c40:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 8009c42:	2003      	movs	r0, #3
      count--;
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
  }

  return HAL_OK;
}
 8009c44:	b005      	add	sp, #20
 8009c46:	bd30      	pop	{r4, r5, pc}
      if (count == 0U)
 8009c48:	9b03      	ldr	r3, [sp, #12]
 8009c4a:	b133      	cbz	r3, 8009c5a <SPI_EndRxTxTransaction+0x4e>
      count--;
 8009c4c:	9b03      	ldr	r3, [sp, #12]
 8009c4e:	3b01      	subs	r3, #1
 8009c50:	9303      	str	r3, [sp, #12]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8009c52:	6823      	ldr	r3, [r4, #0]
 8009c54:	689b      	ldr	r3, [r3, #8]
 8009c56:	061b      	lsls	r3, r3, #24
 8009c58:	d4f6      	bmi.n	8009c48 <SPI_EndRxTxTransaction+0x3c>
  return HAL_OK;
 8009c5a:	2000      	movs	r0, #0
 8009c5c:	e7f2      	b.n	8009c44 <SPI_EndRxTxTransaction+0x38>
 8009c5e:	bf00      	nop
 8009c60:	200000c4 	.word	0x200000c4
 8009c64:	016e3600 	.word	0x016e3600

08009c68 <SPI_EndRxTransaction>:
{
 8009c68:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009c6a:	460b      	mov	r3, r1
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009c6c:	6841      	ldr	r1, [r0, #4]
 8009c6e:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
{
 8009c72:	4604      	mov	r4, r0
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009c74:	d122      	bne.n	8009cbc <SPI_EndRxTransaction+0x54>
 8009c76:	6881      	ldr	r1, [r0, #8]
 8009c78:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8009c7c:	d002      	beq.n	8009c84 <SPI_EndRxTransaction+0x1c>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009c7e:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8009c82:	d107      	bne.n	8009c94 <SPI_EndRxTransaction+0x2c>
    __HAL_SPI_DISABLE(hspi);
 8009c84:	6825      	ldr	r5, [r4, #0]
 8009c86:	6828      	ldr	r0, [r5, #0]
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8009c88:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
    __HAL_SPI_DISABLE(hspi);
 8009c8c:	f020 0040 	bic.w	r0, r0, #64	; 0x40
 8009c90:	6028      	str	r0, [r5, #0]
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8009c92:	d009      	beq.n	8009ca8 <SPI_EndRxTransaction+0x40>
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009c94:	9200      	str	r2, [sp, #0]
 8009c96:	2180      	movs	r1, #128	; 0x80
 8009c98:	2200      	movs	r2, #0
 8009c9a:	4620      	mov	r0, r4
 8009c9c:	f7ff ff5a 	bl	8009b54 <SPI_WaitFlagStateUntilTimeout>
 8009ca0:	b930      	cbnz	r0, 8009cb0 <SPI_EndRxTransaction+0x48>
  return HAL_OK;
 8009ca2:	2000      	movs	r0, #0
}
 8009ca4:	b003      	add	sp, #12
 8009ca6:	bd30      	pop	{r4, r5, pc}
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8009ca8:	9200      	str	r2, [sp, #0]
 8009caa:	2101      	movs	r1, #1
 8009cac:	2200      	movs	r2, #0
 8009cae:	e7f4      	b.n	8009c9a <SPI_EndRxTransaction+0x32>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009cb0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8009cb2:	f043 0320 	orr.w	r3, r3, #32
 8009cb6:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 8009cb8:	2003      	movs	r0, #3
 8009cba:	e7f3      	b.n	8009ca4 <SPI_EndRxTransaction+0x3c>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8009cbc:	9200      	str	r2, [sp, #0]
 8009cbe:	2101      	movs	r1, #1
 8009cc0:	2200      	movs	r2, #0
 8009cc2:	e7eb      	b.n	8009c9c <SPI_EndRxTransaction+0x34>

08009cc4 <HAL_SPI_MspInit>:
}
 8009cc4:	4770      	bx	lr

08009cc6 <HAL_SPI_Init>:
{
 8009cc6:	b538      	push	{r3, r4, r5, lr}
  if (hspi == NULL)
 8009cc8:	4604      	mov	r4, r0
 8009cca:	2800      	cmp	r0, #0
 8009ccc:	d05a      	beq.n	8009d84 <HAL_SPI_Init+0xbe>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8009cce:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d153      	bne.n	8009d7c <HAL_SPI_Init+0xb6>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009cd4:	6842      	ldr	r2, [r0, #4]
 8009cd6:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8009cda:	d000      	beq.n	8009cde <HAL_SPI_Init+0x18>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009cdc:	61c3      	str	r3, [r0, #28]
  if (hspi->State == HAL_SPI_STATE_RESET)
 8009cde:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 8009ce2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8009ce6:	b923      	cbnz	r3, 8009cf2 <HAL_SPI_Init+0x2c>
    hspi->Lock = HAL_UNLOCKED;
 8009ce8:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 8009cec:	4620      	mov	r0, r4
 8009cee:	f7ff ffe9 	bl	8009cc4 <HAL_SPI_MspInit>
  __HAL_SPI_DISABLE(hspi);
 8009cf2:	6821      	ldr	r1, [r4, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009cf4:	68a5      	ldr	r5, [r4, #8]
 8009cf6:	69a2      	ldr	r2, [r4, #24]
 8009cf8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  hspi->State = HAL_SPI_STATE_BUSY;
 8009cfa:	2302      	movs	r3, #2
 8009cfc:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 8009d00:	680b      	ldr	r3, [r1, #0]
 8009d02:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009d06:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009d08:	6863      	ldr	r3, [r4, #4]
 8009d0a:	f405 4504 	and.w	r5, r5, #33792	; 0x8400
 8009d0e:	f403 7382 	and.w	r3, r3, #260	; 0x104
 8009d12:	432b      	orrs	r3, r5
 8009d14:	68e5      	ldr	r5, [r4, #12]
 8009d16:	f405 6500 	and.w	r5, r5, #2048	; 0x800
 8009d1a:	432b      	orrs	r3, r5
 8009d1c:	6925      	ldr	r5, [r4, #16]
 8009d1e:	f005 0502 	and.w	r5, r5, #2
 8009d22:	432b      	orrs	r3, r5
 8009d24:	6965      	ldr	r5, [r4, #20]
 8009d26:	f005 0501 	and.w	r5, r5, #1
 8009d2a:	432b      	orrs	r3, r5
 8009d2c:	f402 7500 	and.w	r5, r2, #512	; 0x200
 8009d30:	432b      	orrs	r3, r5
 8009d32:	69e5      	ldr	r5, [r4, #28]
 8009d34:	f005 0538 	and.w	r5, r5, #56	; 0x38
 8009d38:	432b      	orrs	r3, r5
 8009d3a:	6a25      	ldr	r5, [r4, #32]
 8009d3c:	f005 0580 	and.w	r5, r5, #128	; 0x80
 8009d40:	432b      	orrs	r3, r5
 8009d42:	f400 5500 	and.w	r5, r0, #8192	; 0x2000
 8009d46:	432b      	orrs	r3, r5
 8009d48:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8009d4a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009d4c:	0c12      	lsrs	r2, r2, #16
 8009d4e:	f003 0310 	and.w	r3, r3, #16
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009d52:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8009d56:	f002 0204 	and.w	r2, r2, #4
 8009d5a:	ea42 0203 	orr.w	r2, r2, r3
    WRITE_REG(hspi->Instance->CRCPR, (hspi->Init.CRCPolynomial & SPI_CRCPR_CRCPOLY_Msk));
 8009d5e:	bf08      	it	eq
 8009d60:	8da3      	ldrheq	r3, [r4, #44]	; 0x2c
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8009d62:	604a      	str	r2, [r1, #4]
    WRITE_REG(hspi->Instance->CRCPR, (hspi->Init.CRCPolynomial & SPI_CRCPR_CRCPOLY_Msk));
 8009d64:	bf08      	it	eq
 8009d66:	610b      	streq	r3, [r1, #16]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009d68:	69cb      	ldr	r3, [r1, #28]
 8009d6a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009d6e:	61cb      	str	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009d70:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 8009d72:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009d74:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8009d76:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
}
 8009d7a:	bd38      	pop	{r3, r4, r5, pc}
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8009d7c:	2300      	movs	r3, #0
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8009d7e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009d82:	e7ac      	b.n	8009cde <HAL_SPI_Init+0x18>
    return HAL_ERROR;
 8009d84:	2001      	movs	r0, #1
 8009d86:	e7f8      	b.n	8009d7a <HAL_SPI_Init+0xb4>

08009d88 <HAL_SPI_TransmitReceive>:
{
 8009d88:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009d8c:	b085      	sub	sp, #20
 8009d8e:	4698      	mov	r8, r3
  __IO uint32_t tmpreg = 0U;
 8009d90:	2300      	movs	r3, #0
 8009d92:	9302      	str	r3, [sp, #8]
  __HAL_LOCK(hspi);
 8009d94:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
{
 8009d98:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  __HAL_LOCK(hspi);
 8009d9a:	2b01      	cmp	r3, #1
{
 8009d9c:	4604      	mov	r4, r0
 8009d9e:	460d      	mov	r5, r1
 8009da0:	4691      	mov	r9, r2
  __HAL_LOCK(hspi);
 8009da2:	f000 8133 	beq.w	800a00c <HAL_SPI_TransmitReceive+0x284>
 8009da6:	2301      	movs	r3, #1
 8009da8:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 8009dac:	f7fd fbee 	bl	800758c <HAL_GetTick>
  tmp_state           = hspi->State;
 8009db0:	f894 2051 	ldrb.w	r2, [r4, #81]	; 0x51
  tmp_mode            = hspi->Init.Mode;
 8009db4:	6863      	ldr	r3, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8009db6:	2a01      	cmp	r2, #1
  tickstart = HAL_GetTick();
 8009db8:	4607      	mov	r7, r0
  tmp_state           = hspi->State;
 8009dba:	b2d1      	uxtb	r1, r2
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8009dbc:	d00a      	beq.n	8009dd4 <HAL_SPI_TransmitReceive+0x4c>
 8009dbe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009dc2:	f040 8121 	bne.w	800a008 <HAL_SPI_TransmitReceive+0x280>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8009dc6:	68a2      	ldr	r2, [r4, #8]
 8009dc8:	2a00      	cmp	r2, #0
 8009dca:	f040 811d 	bne.w	800a008 <HAL_SPI_TransmitReceive+0x280>
 8009dce:	2904      	cmp	r1, #4
 8009dd0:	f040 811a 	bne.w	800a008 <HAL_SPI_TransmitReceive+0x280>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8009dd4:	2d00      	cmp	r5, #0
 8009dd6:	f000 8109 	beq.w	8009fec <HAL_SPI_TransmitReceive+0x264>
 8009dda:	f1b9 0f00 	cmp.w	r9, #0
 8009dde:	f000 8105 	beq.w	8009fec <HAL_SPI_TransmitReceive+0x264>
 8009de2:	f1b8 0f00 	cmp.w	r8, #0
 8009de6:	f000 8101 	beq.w	8009fec <HAL_SPI_TransmitReceive+0x264>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009dea:	f894 2051 	ldrb.w	r2, [r4, #81]	; 0x51
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009dee:	6aa1      	ldr	r1, [r4, #40]	; 0x28
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8009df0:	f8c4 9038 	str.w	r9, [r4, #56]	; 0x38
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009df4:	2a04      	cmp	r2, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8009df6:	bf1c      	itt	ne
 8009df8:	2205      	movne	r2, #5
 8009dfa:	f884 2051 	strbne.w	r2, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009dfe:	2200      	movs	r2, #0
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009e00:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009e04:	6562      	str	r2, [r4, #84]	; 0x54
  hspi->TxISR       = NULL;
 8009e06:	e9c4 2210 	strd	r2, r2, [r4, #64]	; 0x40
  hspi->RxXferCount = Size;
 8009e0a:	f8a4 803e 	strh.w	r8, [r4, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8009e0e:	6822      	ldr	r2, [r4, #0]
 8009e10:	f8a4 803c 	strh.w	r8, [r4, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8009e14:	6325      	str	r5, [r4, #48]	; 0x30
  hspi->TxXferCount = Size;
 8009e16:	f8a4 8036 	strh.w	r8, [r4, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8009e1a:	f8a4 8034 	strh.w	r8, [r4, #52]	; 0x34
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009e1e:	d107      	bne.n	8009e30 <HAL_SPI_TransmitReceive+0xa8>
    SPI_RESET_CRC(hspi);
 8009e20:	6811      	ldr	r1, [r2, #0]
 8009e22:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
 8009e26:	6011      	str	r1, [r2, #0]
 8009e28:	6811      	ldr	r1, [r2, #0]
 8009e2a:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
 8009e2e:	6011      	str	r1, [r2, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009e30:	6811      	ldr	r1, [r2, #0]
 8009e32:	0649      	lsls	r1, r1, #25
    __HAL_SPI_ENABLE(hspi);
 8009e34:	bf5e      	ittt	pl
 8009e36:	6811      	ldrpl	r1, [r2, #0]
 8009e38:	f041 0140 	orrpl.w	r1, r1, #64	; 0x40
 8009e3c:	6011      	strpl	r1, [r2, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8009e3e:	68e1      	ldr	r1, [r4, #12]
 8009e40:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 8009e44:	d168      	bne.n	8009f18 <HAL_SPI_TransmitReceive+0x190>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009e46:	b113      	cbz	r3, 8009e4e <HAL_SPI_TransmitReceive+0xc6>
 8009e48:	f1b8 0f01 	cmp.w	r8, #1
 8009e4c:	d107      	bne.n	8009e5e <HAL_SPI_TransmitReceive+0xd6>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009e4e:	f835 3b02 	ldrh.w	r3, [r5], #2
 8009e52:	60d3      	str	r3, [r2, #12]
      hspi->TxXferCount--;
 8009e54:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009e56:	6325      	str	r5, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8009e58:	3b01      	subs	r3, #1
 8009e5a:	b29b      	uxth	r3, r3
 8009e5c:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8009e5e:	2501      	movs	r5, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009e60:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8009e62:	b29b      	uxth	r3, r3
 8009e64:	b9b3      	cbnz	r3, 8009e94 <HAL_SPI_TransmitReceive+0x10c>
 8009e66:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8009e68:	b29b      	uxth	r3, r3
 8009e6a:	b99b      	cbnz	r3, 8009e94 <HAL_SPI_TransmitReceive+0x10c>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009e6c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8009e6e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009e72:	f040 80a6 	bne.w	8009fc2 <HAL_SPI_TransmitReceive+0x23a>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8009e76:	2201      	movs	r2, #1
 8009e78:	9700      	str	r7, [sp, #0]
 8009e7a:	4633      	mov	r3, r6
 8009e7c:	4611      	mov	r1, r2
 8009e7e:	4620      	mov	r0, r4
 8009e80:	f7ff fe68 	bl	8009b54 <SPI_WaitFlagStateUntilTimeout>
 8009e84:	2800      	cmp	r0, #0
 8009e86:	f000 8098 	beq.w	8009fba <HAL_SPI_TransmitReceive+0x232>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8009e8a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8009e8c:	f043 0302 	orr.w	r3, r3, #2
 8009e90:	6563      	str	r3, [r4, #84]	; 0x54
 8009e92:	e020      	b.n	8009ed6 <HAL_SPI_TransmitReceive+0x14e>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009e94:	6822      	ldr	r2, [r4, #0]
 8009e96:	6893      	ldr	r3, [r2, #8]
 8009e98:	079b      	lsls	r3, r3, #30
 8009e9a:	d504      	bpl.n	8009ea6 <HAL_SPI_TransmitReceive+0x11e>
 8009e9c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8009e9e:	b29b      	uxth	r3, r3
 8009ea0:	b10b      	cbz	r3, 8009ea6 <HAL_SPI_TransmitReceive+0x11e>
 8009ea2:	bb1d      	cbnz	r5, 8009eec <HAL_SPI_TransmitReceive+0x164>
{
 8009ea4:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009ea6:	6891      	ldr	r1, [r2, #8]
 8009ea8:	f011 0101 	ands.w	r1, r1, #1
 8009eac:	d00c      	beq.n	8009ec8 <HAL_SPI_TransmitReceive+0x140>
 8009eae:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8009eb0:	b29b      	uxth	r3, r3
 8009eb2:	b14b      	cbz	r3, 8009ec8 <HAL_SPI_TransmitReceive+0x140>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009eb4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009eb6:	68d2      	ldr	r2, [r2, #12]
 8009eb8:	f823 2b02 	strh.w	r2, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009ebc:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8009ebe:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8009ec0:	3b01      	subs	r3, #1
 8009ec2:	b29b      	uxth	r3, r3
 8009ec4:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8009ec6:	460d      	mov	r5, r1
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8009ec8:	f7fd fb60 	bl	800758c <HAL_GetTick>
 8009ecc:	1bc0      	subs	r0, r0, r7
 8009ece:	42b0      	cmp	r0, r6
 8009ed0:	d3c6      	bcc.n	8009e60 <HAL_SPI_TransmitReceive+0xd8>
 8009ed2:	1c70      	adds	r0, r6, #1
 8009ed4:	d0c4      	beq.n	8009e60 <HAL_SPI_TransmitReceive+0xd8>
      errorcode = HAL_TIMEOUT;
 8009ed6:	2503      	movs	r5, #3
  hspi->State = HAL_SPI_STATE_READY;
 8009ed8:	2301      	movs	r3, #1
 8009eda:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8009ede:	2300      	movs	r3, #0
 8009ee0:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8009ee4:	4628      	mov	r0, r5
 8009ee6:	b005      	add	sp, #20
 8009ee8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009eec:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8009eee:	f833 1b02 	ldrh.w	r1, [r3], #2
 8009ef2:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009ef4:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8009ef6:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8009ef8:	3b01      	subs	r3, #1
 8009efa:	b29b      	uxth	r3, r3
 8009efc:	86e3      	strh	r3, [r4, #54]	; 0x36
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8009efe:	8ee5      	ldrh	r5, [r4, #54]	; 0x36
 8009f00:	b2ad      	uxth	r5, r5
 8009f02:	2d00      	cmp	r5, #0
 8009f04:	d1ce      	bne.n	8009ea4 <HAL_SPI_TransmitReceive+0x11c>
 8009f06:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8009f08:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009f0c:	d1ca      	bne.n	8009ea4 <HAL_SPI_TransmitReceive+0x11c>
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8009f0e:	6813      	ldr	r3, [r2, #0]
 8009f10:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009f14:	6013      	str	r3, [r2, #0]
 8009f16:	e7c6      	b.n	8009ea6 <HAL_SPI_TransmitReceive+0x11e>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009f18:	b113      	cbz	r3, 8009f20 <HAL_SPI_TransmitReceive+0x198>
 8009f1a:	f1b8 0f01 	cmp.w	r8, #1
 8009f1e:	d108      	bne.n	8009f32 <HAL_SPI_TransmitReceive+0x1aa>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009f20:	782b      	ldrb	r3, [r5, #0]
 8009f22:	7313      	strb	r3, [r2, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8009f24:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8009f26:	3301      	adds	r3, #1
 8009f28:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8009f2a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8009f2c:	3b01      	subs	r3, #1
 8009f2e:	b29b      	uxth	r3, r3
 8009f30:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8009f32:	2501      	movs	r5, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009f34:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8009f36:	b29b      	uxth	r3, r3
 8009f38:	b91b      	cbnz	r3, 8009f42 <HAL_SPI_TransmitReceive+0x1ba>
 8009f3a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8009f3c:	b29b      	uxth	r3, r3
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d094      	beq.n	8009e6c <HAL_SPI_TransmitReceive+0xe4>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009f42:	6822      	ldr	r2, [r4, #0]
 8009f44:	6893      	ldr	r3, [r2, #8]
 8009f46:	0799      	lsls	r1, r3, #30
 8009f48:	d504      	bpl.n	8009f54 <HAL_SPI_TransmitReceive+0x1cc>
 8009f4a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8009f4c:	b29b      	uxth	r3, r3
 8009f4e:	b10b      	cbz	r3, 8009f54 <HAL_SPI_TransmitReceive+0x1cc>
 8009f50:	b9dd      	cbnz	r5, 8009f8a <HAL_SPI_TransmitReceive+0x202>
        txallowed = 1U;
 8009f52:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009f54:	6822      	ldr	r2, [r4, #0]
 8009f56:	6891      	ldr	r1, [r2, #8]
 8009f58:	f011 0101 	ands.w	r1, r1, #1
 8009f5c:	d00d      	beq.n	8009f7a <HAL_SPI_TransmitReceive+0x1f2>
 8009f5e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8009f60:	b29b      	uxth	r3, r3
 8009f62:	b153      	cbz	r3, 8009f7a <HAL_SPI_TransmitReceive+0x1f2>
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8009f64:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009f66:	68d2      	ldr	r2, [r2, #12]
 8009f68:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8009f6a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009f6c:	3301      	adds	r3, #1
 8009f6e:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8009f70:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8009f72:	3b01      	subs	r3, #1
 8009f74:	b29b      	uxth	r3, r3
 8009f76:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8009f78:	460d      	mov	r5, r1
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8009f7a:	f7fd fb07 	bl	800758c <HAL_GetTick>
 8009f7e:	1bc0      	subs	r0, r0, r7
 8009f80:	42b0      	cmp	r0, r6
 8009f82:	d3d7      	bcc.n	8009f34 <HAL_SPI_TransmitReceive+0x1ac>
 8009f84:	1c73      	adds	r3, r6, #1
 8009f86:	d0d5      	beq.n	8009f34 <HAL_SPI_TransmitReceive+0x1ac>
 8009f88:	e7a5      	b.n	8009ed6 <HAL_SPI_TransmitReceive+0x14e>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8009f8a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8009f8c:	781b      	ldrb	r3, [r3, #0]
 8009f8e:	7313      	strb	r3, [r2, #12]
        hspi->pTxBuffPtr++;
 8009f90:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8009f92:	3301      	adds	r3, #1
 8009f94:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8009f96:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8009f98:	3b01      	subs	r3, #1
 8009f9a:	b29b      	uxth	r3, r3
 8009f9c:	86e3      	strh	r3, [r4, #54]	; 0x36
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8009f9e:	8ee5      	ldrh	r5, [r4, #54]	; 0x36
 8009fa0:	b2ad      	uxth	r5, r5
 8009fa2:	2d00      	cmp	r5, #0
 8009fa4:	d1d5      	bne.n	8009f52 <HAL_SPI_TransmitReceive+0x1ca>
 8009fa6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8009fa8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009fac:	d1d1      	bne.n	8009f52 <HAL_SPI_TransmitReceive+0x1ca>
 8009fae:	6822      	ldr	r2, [r4, #0]
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8009fb0:	6813      	ldr	r3, [r2, #0]
 8009fb2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009fb6:	6013      	str	r3, [r2, #0]
 8009fb8:	e7cc      	b.n	8009f54 <HAL_SPI_TransmitReceive+0x1cc>
    tmpreg = READ_REG(hspi->Instance->DR);
 8009fba:	6823      	ldr	r3, [r4, #0]
 8009fbc:	68db      	ldr	r3, [r3, #12]
 8009fbe:	9302      	str	r3, [sp, #8]
    UNUSED(tmpreg);
 8009fc0:	9b02      	ldr	r3, [sp, #8]
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 8009fc2:	6822      	ldr	r2, [r4, #0]
 8009fc4:	6895      	ldr	r5, [r2, #8]
 8009fc6:	f015 0510 	ands.w	r5, r5, #16
 8009fca:	d007      	beq.n	8009fdc <HAL_SPI_TransmitReceive+0x254>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8009fcc:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8009fce:	f043 0302 	orr.w	r3, r3, #2
 8009fd2:	6563      	str	r3, [r4, #84]	; 0x54
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8009fd4:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8009fd8:	6093      	str	r3, [r2, #8]
    errorcode = HAL_ERROR;
 8009fda:	2501      	movs	r5, #1
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009fdc:	463a      	mov	r2, r7
 8009fde:	4631      	mov	r1, r6
 8009fe0:	4620      	mov	r0, r4
 8009fe2:	f7ff fe13 	bl	8009c0c <SPI_EndRxTxTransaction>
 8009fe6:	b118      	cbz	r0, 8009ff0 <HAL_SPI_TransmitReceive+0x268>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009fe8:	2320      	movs	r3, #32
 8009fea:	6563      	str	r3, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 8009fec:	2501      	movs	r5, #1
 8009fee:	e773      	b.n	8009ed8 <HAL_SPI_TransmitReceive+0x150>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009ff0:	68a3      	ldr	r3, [r4, #8]
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	f47f af70 	bne.w	8009ed8 <HAL_SPI_TransmitReceive+0x150>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009ff8:	9303      	str	r3, [sp, #12]
 8009ffa:	6823      	ldr	r3, [r4, #0]
 8009ffc:	68da      	ldr	r2, [r3, #12]
 8009ffe:	9203      	str	r2, [sp, #12]
 800a000:	689b      	ldr	r3, [r3, #8]
 800a002:	9303      	str	r3, [sp, #12]
 800a004:	9b03      	ldr	r3, [sp, #12]
 800a006:	e767      	b.n	8009ed8 <HAL_SPI_TransmitReceive+0x150>
    errorcode = HAL_BUSY;
 800a008:	2502      	movs	r5, #2
 800a00a:	e765      	b.n	8009ed8 <HAL_SPI_TransmitReceive+0x150>
  __HAL_LOCK(hspi);
 800a00c:	2502      	movs	r5, #2
 800a00e:	e769      	b.n	8009ee4 <HAL_SPI_TransmitReceive+0x15c>

0800a010 <HAL_SPI_TransmitReceive_DMA>:
{
 800a010:	b538      	push	{r3, r4, r5, lr}
 800a012:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 800a014:	f890 0050 	ldrb.w	r0, [r0, #80]	; 0x50
 800a018:	2801      	cmp	r0, #1
 800a01a:	d07e      	beq.n	800a11a <HAL_SPI_TransmitReceive_DMA+0x10a>
 800a01c:	2001      	movs	r0, #1
 800a01e:	f884 0050 	strb.w	r0, [r4, #80]	; 0x50
  tmp_state           = hspi->State;
 800a022:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 800a026:	2801      	cmp	r0, #1
  tmp_state           = hspi->State;
 800a028:	b2c5      	uxtb	r5, r0
  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 800a02a:	d008      	beq.n	800a03e <HAL_SPI_TransmitReceive_DMA+0x2e>
 800a02c:	6860      	ldr	r0, [r4, #4]
 800a02e:	f5b0 7f82 	cmp.w	r0, #260	; 0x104
 800a032:	d16e      	bne.n	800a112 <HAL_SPI_TransmitReceive_DMA+0x102>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800a034:	68a0      	ldr	r0, [r4, #8]
 800a036:	2800      	cmp	r0, #0
 800a038:	d16b      	bne.n	800a112 <HAL_SPI_TransmitReceive_DMA+0x102>
 800a03a:	2d04      	cmp	r5, #4
 800a03c:	d169      	bne.n	800a112 <HAL_SPI_TransmitReceive_DMA+0x102>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800a03e:	2900      	cmp	r1, #0
 800a040:	d069      	beq.n	800a116 <HAL_SPI_TransmitReceive_DMA+0x106>
 800a042:	2a00      	cmp	r2, #0
 800a044:	d067      	beq.n	800a116 <HAL_SPI_TransmitReceive_DMA+0x106>
 800a046:	2b00      	cmp	r3, #0
 800a048:	d065      	beq.n	800a116 <HAL_SPI_TransmitReceive_DMA+0x106>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800a04a:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
  hspi->TxXferSize  = Size;
 800a04e:	86a3      	strh	r3, [r4, #52]	; 0x34
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800a050:	2804      	cmp	r0, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800a052:	bf1c      	itt	ne
 800a054:	2005      	movne	r0, #5
 800a056:	f884 0051 	strbne.w	r0, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a05a:	2000      	movs	r0, #0
 800a05c:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->RxXferSize  = Size;
 800a05e:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800a060:	86e3      	strh	r3, [r4, #54]	; 0x36
  hspi->RxXferCount = Size;
 800a062:	87e3      	strh	r3, [r4, #62]	; 0x3e
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a064:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800a066:	6321      	str	r1, [r4, #48]	; 0x30
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a068:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
  hspi->TxISR       = NULL;
 800a06c:	e9c4 0010 	strd	r0, r0, [r4, #64]	; 0x40
 800a070:	6821      	ldr	r1, [r4, #0]
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800a072:	63a2      	str	r2, [r4, #56]	; 0x38
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a074:	d107      	bne.n	800a086 <HAL_SPI_TransmitReceive_DMA+0x76>
    SPI_RESET_CRC(hspi);
 800a076:	680b      	ldr	r3, [r1, #0]
 800a078:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a07c:	600b      	str	r3, [r1, #0]
 800a07e:	680b      	ldr	r3, [r1, #0]
 800a080:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800a084:	600b      	str	r3, [r1, #0]
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800a086:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 800a08a:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 800a08c:	2b04      	cmp	r3, #4
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800a08e:	bf0b      	itete	eq
 800a090:	4b23      	ldreq	r3, [pc, #140]	; (800a120 <HAL_SPI_TransmitReceive_DMA+0x110>)
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 800a092:	4b24      	ldrne	r3, [pc, #144]	; (800a124 <HAL_SPI_TransmitReceive_DMA+0x114>)
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800a094:	6403      	streq	r3, [r0, #64]	; 0x40
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 800a096:	6403      	strne	r3, [r0, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 800a098:	bf0c      	ite	eq
 800a09a:	4b23      	ldreq	r3, [pc, #140]	; (800a128 <HAL_SPI_TransmitReceive_DMA+0x118>)
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 800a09c:	4b23      	ldrne	r3, [pc, #140]	; (800a12c <HAL_SPI_TransmitReceive_DMA+0x11c>)
 800a09e:	63c3      	str	r3, [r0, #60]	; 0x3c
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800a0a0:	4b23      	ldr	r3, [pc, #140]	; (800a130 <HAL_SPI_TransmitReceive_DMA+0x120>)
 800a0a2:	64c3      	str	r3, [r0, #76]	; 0x4c
  hspi->hdmarx->XferAbortCallback = NULL;
 800a0a4:	2300      	movs	r3, #0
 800a0a6:	6503      	str	r3, [r0, #80]	; 0x50
                                 hspi->RxXferCount))
 800a0a8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800a0aa:	310c      	adds	r1, #12
 800a0ac:	b29b      	uxth	r3, r3
 800a0ae:	f7fd fc05 	bl	80078bc <HAL_DMA_Start_IT>
 800a0b2:	b150      	cbz	r0, 800a0ca <HAL_SPI_TransmitReceive_DMA+0xba>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800a0b4:	6d63      	ldr	r3, [r4, #84]	; 0x54
    hspi->State = HAL_SPI_STATE_READY;
 800a0b6:	2001      	movs	r0, #1
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800a0b8:	f043 0310 	orr.w	r3, r3, #16
 800a0bc:	6563      	str	r3, [r4, #84]	; 0x54
    hspi->State = HAL_SPI_STATE_READY;
 800a0be:	f884 0051 	strb.w	r0, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800a0c2:	2300      	movs	r3, #0
 800a0c4:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 800a0c8:	bd38      	pop	{r3, r4, r5, pc}
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800a0ca:	6822      	ldr	r2, [r4, #0]
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 800a0cc:	6ca5      	ldr	r5, [r4, #72]	; 0x48
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800a0ce:	6853      	ldr	r3, [r2, #4]
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800a0d0:	6b21      	ldr	r1, [r4, #48]	; 0x30
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800a0d2:	f043 0301 	orr.w	r3, r3, #1
 800a0d6:	6053      	str	r3, [r2, #4]
                                 hspi->TxXferCount))
 800a0d8:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
  hspi->hdmatx->XferCpltCallback     = NULL;
 800a0da:	e9c5 000f 	strd	r0, r0, [r5, #60]	; 0x3c
  hspi->hdmatx->XferAbortCallback    = NULL;
 800a0de:	e9c5 0013 	strd	r0, r0, [r5, #76]	; 0x4c
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800a0e2:	b29b      	uxth	r3, r3
 800a0e4:	320c      	adds	r2, #12
 800a0e6:	4628      	mov	r0, r5
 800a0e8:	f7fd fbe8 	bl	80078bc <HAL_DMA_Start_IT>
 800a0ec:	2800      	cmp	r0, #0
 800a0ee:	d1e1      	bne.n	800a0b4 <HAL_SPI_TransmitReceive_DMA+0xa4>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a0f0:	6823      	ldr	r3, [r4, #0]
 800a0f2:	681a      	ldr	r2, [r3, #0]
 800a0f4:	0652      	lsls	r2, r2, #25
    __HAL_SPI_ENABLE(hspi);
 800a0f6:	bf5e      	ittt	pl
 800a0f8:	681a      	ldrpl	r2, [r3, #0]
 800a0fa:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
 800a0fe:	601a      	strpl	r2, [r3, #0]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800a100:	685a      	ldr	r2, [r3, #4]
 800a102:	f042 0220 	orr.w	r2, r2, #32
 800a106:	605a      	str	r2, [r3, #4]
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800a108:	685a      	ldr	r2, [r3, #4]
 800a10a:	f042 0202 	orr.w	r2, r2, #2
 800a10e:	605a      	str	r2, [r3, #4]
 800a110:	e7d7      	b.n	800a0c2 <HAL_SPI_TransmitReceive_DMA+0xb2>
    errorcode = HAL_BUSY;
 800a112:	2002      	movs	r0, #2
 800a114:	e7d5      	b.n	800a0c2 <HAL_SPI_TransmitReceive_DMA+0xb2>
    errorcode = HAL_ERROR;
 800a116:	2001      	movs	r0, #1
 800a118:	e7d3      	b.n	800a0c2 <HAL_SPI_TransmitReceive_DMA+0xb2>
  __HAL_LOCK(hspi);
 800a11a:	2002      	movs	r0, #2
 800a11c:	e7d4      	b.n	800a0c8 <HAL_SPI_TransmitReceive_DMA+0xb8>
 800a11e:	bf00      	nop
 800a120:	0800a285 	.word	0x0800a285
 800a124:	0800a291 	.word	0x0800a291
 800a128:	0800a2bf 	.word	0x0800a2bf
 800a12c:	0800a36d 	.word	0x0800a36d
 800a130:	0800a29d 	.word	0x0800a29d

0800a134 <HAL_SPI_Receive_DMA>:
{
 800a134:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800a138:	6885      	ldr	r5, [r0, #8]
{
 800a13a:	4604      	mov	r4, r0
 800a13c:	460e      	mov	r6, r1
  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800a13e:	b965      	cbnz	r5, 800a15a <HAL_SPI_Receive_DMA+0x26>
 800a140:	6843      	ldr	r3, [r0, #4]
 800a142:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a146:	d108      	bne.n	800a15a <HAL_SPI_Receive_DMA+0x26>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800a148:	2304      	movs	r3, #4
 800a14a:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
}
 800a14e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 800a152:	4613      	mov	r3, r2
 800a154:	460a      	mov	r2, r1
 800a156:	f7ff bf5b 	b.w	800a010 <HAL_SPI_TransmitReceive_DMA>
  __HAL_LOCK(hspi);
 800a15a:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 800a15e:	2b01      	cmp	r3, #1
 800a160:	d061      	beq.n	800a226 <HAL_SPI_Receive_DMA+0xf2>
 800a162:	2301      	movs	r3, #1
 800a164:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  if (hspi->State != HAL_SPI_STATE_READY)
 800a168:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 800a16c:	2b01      	cmp	r3, #1
 800a16e:	b2df      	uxtb	r7, r3
 800a170:	d157      	bne.n	800a222 <HAL_SPI_Receive_DMA+0xee>
  if ((pData == NULL) || (Size == 0U))
 800a172:	2e00      	cmp	r6, #0
 800a174:	d03d      	beq.n	800a1f2 <HAL_SPI_Receive_DMA+0xbe>
 800a176:	2a00      	cmp	r2, #0
 800a178:	d03b      	beq.n	800a1f2 <HAL_SPI_Receive_DMA+0xbe>
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800a17a:	2304      	movs	r3, #4
 800a17c:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a180:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a184:	f04f 0300 	mov.w	r3, #0
 800a188:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->TxISR       = NULL;
 800a18a:	e9c4 3310 	strd	r3, r3, [r4, #64]	; 0x40
  hspi->RxXferCount = Size;
 800a18e:	87e2      	strh	r2, [r4, #62]	; 0x3e
 800a190:	6821      	ldr	r1, [r4, #0]
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800a192:	63a6      	str	r6, [r4, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800a194:	87a2      	strh	r2, [r4, #60]	; 0x3c
  hspi->TxXferSize  = 0U;
 800a196:	86a3      	strh	r3, [r4, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800a198:	86e3      	strh	r3, [r4, #54]	; 0x36
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a19a:	d107      	bne.n	800a1ac <HAL_SPI_Receive_DMA+0x78>
    __HAL_SPI_DISABLE(hspi);
 800a19c:	680b      	ldr	r3, [r1, #0]
 800a19e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a1a2:	600b      	str	r3, [r1, #0]
    SPI_1LINE_RX(hspi);
 800a1a4:	680b      	ldr	r3, [r1, #0]
 800a1a6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a1aa:	600b      	str	r3, [r1, #0]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a1ac:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800a1ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a1b2:	d107      	bne.n	800a1c4 <HAL_SPI_Receive_DMA+0x90>
    SPI_RESET_CRC(hspi);
 800a1b4:	680b      	ldr	r3, [r1, #0]
 800a1b6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a1ba:	600b      	str	r3, [r1, #0]
 800a1bc:	680b      	ldr	r3, [r1, #0]
 800a1be:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800a1c2:	600b      	str	r3, [r1, #0]
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800a1c4:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 800a1c6:	4b19      	ldr	r3, [pc, #100]	; (800a22c <HAL_SPI_Receive_DMA+0xf8>)
 800a1c8:	6403      	str	r3, [r0, #64]	; 0x40
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 800a1ca:	4b19      	ldr	r3, [pc, #100]	; (800a230 <HAL_SPI_Receive_DMA+0xfc>)
 800a1cc:	63c3      	str	r3, [r0, #60]	; 0x3c
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800a1ce:	4b19      	ldr	r3, [pc, #100]	; (800a234 <HAL_SPI_Receive_DMA+0x100>)
 800a1d0:	64c3      	str	r3, [r0, #76]	; 0x4c
  hspi->hdmarx->XferAbortCallback = NULL;
 800a1d2:	2300      	movs	r3, #0
 800a1d4:	6503      	str	r3, [r0, #80]	; 0x50
                                 hspi->RxXferCount))
 800a1d6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800a1d8:	4632      	mov	r2, r6
 800a1da:	b29b      	uxth	r3, r3
 800a1dc:	310c      	adds	r1, #12
 800a1de:	f7fd fb6d 	bl	80078bc <HAL_DMA_Start_IT>
 800a1e2:	b160      	cbz	r0, 800a1fe <HAL_SPI_Receive_DMA+0xca>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800a1e4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800a1e6:	f043 0310 	orr.w	r3, r3, #16
 800a1ea:	6563      	str	r3, [r4, #84]	; 0x54
    hspi->State = HAL_SPI_STATE_READY;
 800a1ec:	2301      	movs	r3, #1
 800a1ee:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800a1f2:	2300      	movs	r3, #0
 800a1f4:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 800a1f8:	4638      	mov	r0, r7
 800a1fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a1fe:	6823      	ldr	r3, [r4, #0]
 800a200:	681a      	ldr	r2, [r3, #0]
 800a202:	0652      	lsls	r2, r2, #25
    __HAL_SPI_ENABLE(hspi);
 800a204:	bf5e      	ittt	pl
 800a206:	681a      	ldrpl	r2, [r3, #0]
 800a208:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
 800a20c:	601a      	strpl	r2, [r3, #0]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800a20e:	685a      	ldr	r2, [r3, #4]
 800a210:	f042 0220 	orr.w	r2, r2, #32
 800a214:	605a      	str	r2, [r3, #4]
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800a216:	685a      	ldr	r2, [r3, #4]
 800a218:	f042 0201 	orr.w	r2, r2, #1
 800a21c:	605a      	str	r2, [r3, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800a21e:	2700      	movs	r7, #0
 800a220:	e7e7      	b.n	800a1f2 <HAL_SPI_Receive_DMA+0xbe>
    errorcode = HAL_BUSY;
 800a222:	2702      	movs	r7, #2
 800a224:	e7e5      	b.n	800a1f2 <HAL_SPI_Receive_DMA+0xbe>
  __HAL_LOCK(hspi);
 800a226:	2702      	movs	r7, #2
 800a228:	e7e6      	b.n	800a1f8 <HAL_SPI_Receive_DMA+0xc4>
 800a22a:	bf00      	nop
 800a22c:	0800a285 	.word	0x0800a285
 800a230:	0800a2bf 	.word	0x0800a2bf
 800a234:	0800a29d 	.word	0x0800a29d

0800a238 <HAL_SPI_DMAStop>:
{
 800a238:	b538      	push	{r3, r4, r5, lr}
 800a23a:	4604      	mov	r4, r0
  if (hspi->hdmatx != NULL)
 800a23c:	6c80      	ldr	r0, [r0, #72]	; 0x48
 800a23e:	b9a0      	cbnz	r0, 800a26a <HAL_SPI_DMAStop+0x32>
  HAL_StatusTypeDef errorcode = HAL_OK;
 800a240:	2500      	movs	r5, #0
  if (hspi->hdmarx != NULL)
 800a242:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 800a244:	b138      	cbz	r0, 800a256 <HAL_SPI_DMAStop+0x1e>
    if (HAL_OK != HAL_DMA_Abort(hspi->hdmarx))
 800a246:	f7fd fb73 	bl	8007930 <HAL_DMA_Abort>
 800a24a:	b120      	cbz	r0, 800a256 <HAL_SPI_DMAStop+0x1e>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800a24c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800a24e:	f043 0310 	orr.w	r3, r3, #16
 800a252:	6563      	str	r3, [r4, #84]	; 0x54
      errorcode = HAL_ERROR;
 800a254:	2501      	movs	r5, #1
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800a256:	6822      	ldr	r2, [r4, #0]
 800a258:	6853      	ldr	r3, [r2, #4]
 800a25a:	f023 0303 	bic.w	r3, r3, #3
 800a25e:	6053      	str	r3, [r2, #4]
  hspi->State = HAL_SPI_STATE_READY;
 800a260:	2301      	movs	r3, #1
 800a262:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
}
 800a266:	4628      	mov	r0, r5
 800a268:	bd38      	pop	{r3, r4, r5, pc}
    if (HAL_OK != HAL_DMA_Abort(hspi->hdmatx))
 800a26a:	f7fd fb61 	bl	8007930 <HAL_DMA_Abort>
 800a26e:	2800      	cmp	r0, #0
 800a270:	d0e6      	beq.n	800a240 <HAL_SPI_DMAStop+0x8>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800a272:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800a274:	f043 0310 	orr.w	r3, r3, #16
 800a278:	6563      	str	r3, [r4, #84]	; 0x54
      errorcode = HAL_ERROR;
 800a27a:	2501      	movs	r5, #1
 800a27c:	e7e1      	b.n	800a242 <HAL_SPI_DMAStop+0xa>

0800a27e <HAL_SPI_RxCpltCallback>:
 800a27e:	4770      	bx	lr

0800a280 <HAL_SPI_TxRxCpltCallback>:
 800a280:	4770      	bx	lr

0800a282 <HAL_SPI_RxHalfCpltCallback>:
 800a282:	4770      	bx	lr

0800a284 <SPI_DMAHalfReceiveCplt>:
{
 800a284:	b508      	push	{r3, lr}
  HAL_SPI_RxHalfCpltCallback(hspi);
 800a286:	6b80      	ldr	r0, [r0, #56]	; 0x38
 800a288:	f7ff fffb 	bl	800a282 <HAL_SPI_RxHalfCpltCallback>
}
 800a28c:	bd08      	pop	{r3, pc}

0800a28e <HAL_SPI_TxRxHalfCpltCallback>:
 800a28e:	4770      	bx	lr

0800a290 <SPI_DMAHalfTransmitReceiveCplt>:
{
 800a290:	b508      	push	{r3, lr}
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 800a292:	6b80      	ldr	r0, [r0, #56]	; 0x38
 800a294:	f7ff fffb 	bl	800a28e <HAL_SPI_TxRxHalfCpltCallback>
}
 800a298:	bd08      	pop	{r3, pc}

0800a29a <HAL_SPI_ErrorCallback>:
 800a29a:	4770      	bx	lr

0800a29c <SPI_DMAError>:
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800a29c:	6b80      	ldr	r0, [r0, #56]	; 0x38
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800a29e:	6802      	ldr	r2, [r0, #0]
{
 800a2a0:	b508      	push	{r3, lr}
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800a2a2:	6853      	ldr	r3, [r2, #4]
 800a2a4:	f023 0303 	bic.w	r3, r3, #3
 800a2a8:	6053      	str	r3, [r2, #4]
  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800a2aa:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800a2ac:	f043 0310 	orr.w	r3, r3, #16
 800a2b0:	6543      	str	r3, [r0, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 800a2b2:	2301      	movs	r3, #1
 800a2b4:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
  HAL_SPI_ErrorCallback(hspi);
 800a2b8:	f7ff ffef 	bl	800a29a <HAL_SPI_ErrorCallback>
}
 800a2bc:	bd08      	pop	{r3, pc}

0800a2be <SPI_DMAReceiveCplt>:
{
 800a2be:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800a2c0:	4606      	mov	r6, r0
  __IO uint32_t tmpreg = 0U;
 800a2c2:	2300      	movs	r3, #0
 800a2c4:	9303      	str	r3, [sp, #12]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800a2c6:	6b84      	ldr	r4, [r0, #56]	; 0x38
  tickstart = HAL_GetTick();
 800a2c8:	f7fd f960 	bl	800758c <HAL_GetTick>
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 800a2cc:	6833      	ldr	r3, [r6, #0]
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	05da      	lsls	r2, r3, #23
  tickstart = HAL_GetTick();
 800a2d2:	4605      	mov	r5, r0
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 800a2d4:	d446      	bmi.n	800a364 <SPI_DMAReceiveCplt+0xa6>
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800a2d6:	6822      	ldr	r2, [r4, #0]
 800a2d8:	6853      	ldr	r3, [r2, #4]
 800a2da:	f023 0320 	bic.w	r3, r3, #32
 800a2de:	6053      	str	r3, [r2, #4]
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a2e0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800a2e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a2e6:	d10f      	bne.n	800a308 <SPI_DMAReceiveCplt+0x4a>
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800a2e8:	2201      	movs	r2, #1
 800a2ea:	9000      	str	r0, [sp, #0]
 800a2ec:	2364      	movs	r3, #100	; 0x64
 800a2ee:	4611      	mov	r1, r2
 800a2f0:	4620      	mov	r0, r4
 800a2f2:	f7ff fc2f 	bl	8009b54 <SPI_WaitFlagStateUntilTimeout>
 800a2f6:	b118      	cbz	r0, 800a300 <SPI_DMAReceiveCplt+0x42>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 800a2f8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800a2fa:	f043 0302 	orr.w	r3, r3, #2
 800a2fe:	6563      	str	r3, [r4, #84]	; 0x54
      tmpreg = READ_REG(hspi->Instance->DR);
 800a300:	6823      	ldr	r3, [r4, #0]
 800a302:	68db      	ldr	r3, [r3, #12]
 800a304:	9303      	str	r3, [sp, #12]
      UNUSED(tmpreg);
 800a306:	9b03      	ldr	r3, [sp, #12]
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800a308:	68a2      	ldr	r2, [r4, #8]
 800a30a:	6823      	ldr	r3, [r4, #0]
 800a30c:	bb32      	cbnz	r2, 800a35c <SPI_DMAReceiveCplt+0x9e>
 800a30e:	6862      	ldr	r2, [r4, #4]
 800a310:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 800a314:	d122      	bne.n	800a35c <SPI_DMAReceiveCplt+0x9e>
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800a316:	685a      	ldr	r2, [r3, #4]
 800a318:	f022 0203 	bic.w	r2, r2, #3
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800a31c:	605a      	str	r2, [r3, #4]
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800a31e:	2164      	movs	r1, #100	; 0x64
 800a320:	462a      	mov	r2, r5
 800a322:	4620      	mov	r0, r4
 800a324:	f7ff fca0 	bl	8009c68 <SPI_EndRxTransaction>
 800a328:	b108      	cbz	r0, 800a32e <SPI_DMAReceiveCplt+0x70>
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a32a:	2320      	movs	r3, #32
 800a32c:	6563      	str	r3, [r4, #84]	; 0x54
    hspi->RxXferCount = 0U;
 800a32e:	2300      	movs	r3, #0
 800a330:	87e3      	strh	r3, [r4, #62]	; 0x3e
    if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 800a332:	6822      	ldr	r2, [r4, #0]
    hspi->State = HAL_SPI_STATE_READY;
 800a334:	2301      	movs	r3, #1
 800a336:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
    if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 800a33a:	6893      	ldr	r3, [r2, #8]
 800a33c:	06db      	lsls	r3, r3, #27
 800a33e:	d506      	bpl.n	800a34e <SPI_DMAReceiveCplt+0x90>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 800a340:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800a342:	f043 0302 	orr.w	r3, r3, #2
 800a346:	6563      	str	r3, [r4, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 800a348:	f64f 73ef 	movw	r3, #65519	; 0xffef
 800a34c:	6093      	str	r3, [r2, #8]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a34e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800a350:	b143      	cbz	r3, 800a364 <SPI_DMAReceiveCplt+0xa6>
      HAL_SPI_ErrorCallback(hspi);
 800a352:	4620      	mov	r0, r4
 800a354:	f7ff ffa1 	bl	800a29a <HAL_SPI_ErrorCallback>
}
 800a358:	b004      	add	sp, #16
 800a35a:	bd70      	pop	{r4, r5, r6, pc}
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800a35c:	685a      	ldr	r2, [r3, #4]
 800a35e:	f022 0201 	bic.w	r2, r2, #1
 800a362:	e7db      	b.n	800a31c <SPI_DMAReceiveCplt+0x5e>
  HAL_SPI_RxCpltCallback(hspi);
 800a364:	4620      	mov	r0, r4
 800a366:	f7ff ff8a 	bl	800a27e <HAL_SPI_RxCpltCallback>
 800a36a:	e7f5      	b.n	800a358 <SPI_DMAReceiveCplt+0x9a>

0800a36c <SPI_DMATransmitReceiveCplt>:
{
 800a36c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800a36e:	4606      	mov	r6, r0
  __IO uint32_t tmpreg = 0U;
 800a370:	2300      	movs	r3, #0
 800a372:	9303      	str	r3, [sp, #12]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800a374:	6b84      	ldr	r4, [r0, #56]	; 0x38
  tickstart = HAL_GetTick();
 800a376:	f7fd f909 	bl	800758c <HAL_GetTick>
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 800a37a:	6833      	ldr	r3, [r6, #0]
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	05d9      	lsls	r1, r3, #23
  tickstart = HAL_GetTick();
 800a380:	4605      	mov	r5, r0
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 800a382:	d43e      	bmi.n	800a402 <SPI_DMATransmitReceiveCplt+0x96>
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800a384:	6822      	ldr	r2, [r4, #0]
 800a386:	6853      	ldr	r3, [r2, #4]
 800a388:	f023 0320 	bic.w	r3, r3, #32
 800a38c:	6053      	str	r3, [r2, #4]
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a38e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800a390:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a394:	d10f      	bne.n	800a3b6 <SPI_DMATransmitReceiveCplt+0x4a>
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800a396:	2201      	movs	r2, #1
 800a398:	9000      	str	r0, [sp, #0]
 800a39a:	2364      	movs	r3, #100	; 0x64
 800a39c:	4611      	mov	r1, r2
 800a39e:	4620      	mov	r0, r4
 800a3a0:	f7ff fbd8 	bl	8009b54 <SPI_WaitFlagStateUntilTimeout>
 800a3a4:	b118      	cbz	r0, 800a3ae <SPI_DMATransmitReceiveCplt+0x42>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 800a3a6:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800a3a8:	f043 0302 	orr.w	r3, r3, #2
 800a3ac:	6563      	str	r3, [r4, #84]	; 0x54
      tmpreg = READ_REG(hspi->Instance->DR);
 800a3ae:	6823      	ldr	r3, [r4, #0]
 800a3b0:	68db      	ldr	r3, [r3, #12]
 800a3b2:	9303      	str	r3, [sp, #12]
      UNUSED(tmpreg);
 800a3b4:	9b03      	ldr	r3, [sp, #12]
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800a3b6:	462a      	mov	r2, r5
 800a3b8:	2164      	movs	r1, #100	; 0x64
 800a3ba:	4620      	mov	r0, r4
 800a3bc:	f7ff fc26 	bl	8009c0c <SPI_EndRxTxTransaction>
 800a3c0:	b118      	cbz	r0, 800a3ca <SPI_DMATransmitReceiveCplt+0x5e>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a3c2:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800a3c4:	f043 0320 	orr.w	r3, r3, #32
 800a3c8:	6563      	str	r3, [r4, #84]	; 0x54
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800a3ca:	6823      	ldr	r3, [r4, #0]
 800a3cc:	685a      	ldr	r2, [r3, #4]
 800a3ce:	f022 0203 	bic.w	r2, r2, #3
 800a3d2:	605a      	str	r2, [r3, #4]
    hspi->TxXferCount = 0U;
 800a3d4:	2200      	movs	r2, #0
 800a3d6:	86e2      	strh	r2, [r4, #54]	; 0x36
    hspi->RxXferCount = 0U;
 800a3d8:	87e2      	strh	r2, [r4, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 800a3da:	2201      	movs	r2, #1
 800a3dc:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
    if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 800a3e0:	689a      	ldr	r2, [r3, #8]
 800a3e2:	06d2      	lsls	r2, r2, #27
 800a3e4:	d506      	bpl.n	800a3f4 <SPI_DMATransmitReceiveCplt+0x88>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 800a3e6:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800a3e8:	f042 0202 	orr.w	r2, r2, #2
 800a3ec:	6562      	str	r2, [r4, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 800a3ee:	f64f 72ef 	movw	r2, #65519	; 0xffef
 800a3f2:	609a      	str	r2, [r3, #8]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a3f4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800a3f6:	b123      	cbz	r3, 800a402 <SPI_DMATransmitReceiveCplt+0x96>
      HAL_SPI_ErrorCallback(hspi);
 800a3f8:	4620      	mov	r0, r4
 800a3fa:	f7ff ff4e 	bl	800a29a <HAL_SPI_ErrorCallback>
}
 800a3fe:	b004      	add	sp, #16
 800a400:	bd70      	pop	{r4, r5, r6, pc}
  HAL_SPI_TxRxCpltCallback(hspi);
 800a402:	4620      	mov	r0, r4
 800a404:	f7ff ff3c 	bl	800a280 <HAL_SPI_TxRxCpltCallback>
 800a408:	e7f9      	b.n	800a3fe <SPI_DMATransmitReceiveCplt+0x92>

0800a40a <HAL_SPI_GetState>:
  return hspi->State;
 800a40a:	f890 0051 	ldrb.w	r0, [r0, #81]	; 0x51
}
 800a40e:	4770      	bx	lr

0800a410 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a410:	6a03      	ldr	r3, [r0, #32]
 800a412:	f023 0301 	bic.w	r3, r3, #1
 800a416:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a418:	6a03      	ldr	r3, [r0, #32]
{
 800a41a:	b570      	push	{r4, r5, r6, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a41c:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a41e:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a420:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a422:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 800a426:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a428:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 800a42a:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 800a42e:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a430:	4d0e      	ldr	r5, [pc, #56]	; (800a46c <TIM_OC1_SetConfig+0x5c>)
 800a432:	42a8      	cmp	r0, r5
 800a434:	d002      	beq.n	800a43c <TIM_OC1_SetConfig+0x2c>
 800a436:	4e0e      	ldr	r6, [pc, #56]	; (800a470 <TIM_OC1_SetConfig+0x60>)
 800a438:	42b0      	cmp	r0, r6
 800a43a:	d110      	bne.n	800a45e <TIM_OC1_SetConfig+0x4e>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a43c:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 800a43e:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 800a442:	4333      	orrs	r3, r6
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a444:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 800a446:	f023 0304 	bic.w	r3, r3, #4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a44a:	d002      	beq.n	800a452 <TIM_OC1_SetConfig+0x42>
 800a44c:	4d08      	ldr	r5, [pc, #32]	; (800a470 <TIM_OC1_SetConfig+0x60>)
 800a44e:	42a8      	cmp	r0, r5
 800a450:	d105      	bne.n	800a45e <TIM_OC1_SetConfig+0x4e>
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a452:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a456:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 800a45a:	4335      	orrs	r5, r6
 800a45c:	432c      	orrs	r4, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a45e:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a460:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a462:	684a      	ldr	r2, [r1, #4]
 800a464:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a466:	6203      	str	r3, [r0, #32]
}
 800a468:	bd70      	pop	{r4, r5, r6, pc}
 800a46a:	bf00      	nop
 800a46c:	40010000 	.word	0x40010000
 800a470:	40010400 	.word	0x40010400

0800a474 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a474:	6a03      	ldr	r3, [r0, #32]
 800a476:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a47a:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a47c:	6a03      	ldr	r3, [r0, #32]
{
 800a47e:	b570      	push	{r4, r5, r6, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a480:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a482:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a484:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a486:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 800a48a:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a48c:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 800a48e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a492:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a496:	4d11      	ldr	r5, [pc, #68]	; (800a4dc <TIM_OC3_SetConfig+0x68>)
 800a498:	42a8      	cmp	r0, r5
 800a49a:	d003      	beq.n	800a4a4 <TIM_OC3_SetConfig+0x30>
 800a49c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800a4a0:	42a8      	cmp	r0, r5
 800a4a2:	d114      	bne.n	800a4ce <TIM_OC3_SetConfig+0x5a>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a4a4:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 800a4a6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a4aa:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a4ae:	4d0b      	ldr	r5, [pc, #44]	; (800a4dc <TIM_OC3_SetConfig+0x68>)
 800a4b0:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC3NE;
 800a4b2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a4b6:	d003      	beq.n	800a4c0 <TIM_OC3_SetConfig+0x4c>
 800a4b8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800a4bc:	42a8      	cmp	r0, r5
 800a4be:	d106      	bne.n	800a4ce <TIM_OC3_SetConfig+0x5a>
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a4c0:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a4c4:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a4c8:	4335      	orrs	r5, r6
 800a4ca:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a4ce:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a4d0:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a4d2:	684a      	ldr	r2, [r1, #4]
 800a4d4:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a4d6:	6203      	str	r3, [r0, #32]
}
 800a4d8:	bd70      	pop	{r4, r5, r6, pc}
 800a4da:	bf00      	nop
 800a4dc:	40010000 	.word	0x40010000

0800a4e0 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a4e0:	6a03      	ldr	r3, [r0, #32]
 800a4e2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a4e6:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a4e8:	6a03      	ldr	r3, [r0, #32]
{
 800a4ea:	b530      	push	{r4, r5, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a4ec:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a4ee:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a4f0:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a4f2:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a4f6:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a4fa:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 800a4fc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a500:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a504:	4d08      	ldr	r5, [pc, #32]	; (800a528 <TIM_OC4_SetConfig+0x48>)
 800a506:	42a8      	cmp	r0, r5
 800a508:	d003      	beq.n	800a512 <TIM_OC4_SetConfig+0x32>
 800a50a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800a50e:	42a8      	cmp	r0, r5
 800a510:	d104      	bne.n	800a51c <TIM_OC4_SetConfig+0x3c>

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a512:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a514:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a518:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a51c:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a51e:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a520:	684a      	ldr	r2, [r1, #4]
 800a522:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a524:	6203      	str	r3, [r0, #32]
}
 800a526:	bd30      	pop	{r4, r5, pc}
 800a528:	40010000 	.word	0x40010000

0800a52c <HAL_TIM_PWM_MspInit>:
 800a52c:	4770      	bx	lr

0800a52e <HAL_TIM_ReadCapturedValue>:
  switch (Channel)
 800a52e:	2908      	cmp	r1, #8
 800a530:	d010      	beq.n	800a554 <HAL_TIM_ReadCapturedValue+0x26>
 800a532:	d804      	bhi.n	800a53e <HAL_TIM_ReadCapturedValue+0x10>
 800a534:	b141      	cbz	r1, 800a548 <HAL_TIM_ReadCapturedValue+0x1a>
 800a536:	2904      	cmp	r1, #4
 800a538:	d009      	beq.n	800a54e <HAL_TIM_ReadCapturedValue+0x20>
 800a53a:	2000      	movs	r0, #0
 800a53c:	4770      	bx	lr
 800a53e:	290c      	cmp	r1, #12
 800a540:	d1fb      	bne.n	800a53a <HAL_TIM_ReadCapturedValue+0xc>
      tmpreg =   htim->Instance->CCR4;
 800a542:	6803      	ldr	r3, [r0, #0]
 800a544:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
 800a546:	4770      	bx	lr
      tmpreg =  htim->Instance->CCR1;
 800a548:	6803      	ldr	r3, [r0, #0]
 800a54a:	6b58      	ldr	r0, [r3, #52]	; 0x34
      break;
 800a54c:	4770      	bx	lr
      tmpreg =   htim->Instance->CCR2;
 800a54e:	6803      	ldr	r3, [r0, #0]
 800a550:	6b98      	ldr	r0, [r3, #56]	; 0x38
      break;
 800a552:	4770      	bx	lr
      tmpreg =   htim->Instance->CCR3;
 800a554:	6803      	ldr	r3, [r0, #0]
 800a556:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
      break;
 800a558:	4770      	bx	lr

0800a55a <HAL_TIM_PeriodElapsedCallback>:
 800a55a:	4770      	bx	lr

0800a55c <HAL_TIM_IC_CaptureCallback>:
 800a55c:	4770      	bx	lr

0800a55e <HAL_TIM_PWM_PulseFinishedCallback>:
 800a55e:	4770      	bx	lr

0800a560 <HAL_TIM_TriggerCallback>:
 800a560:	4770      	bx	lr

0800a562 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a562:	6803      	ldr	r3, [r0, #0]
 800a564:	691a      	ldr	r2, [r3, #16]
 800a566:	0791      	lsls	r1, r2, #30
{
 800a568:	b510      	push	{r4, lr}
 800a56a:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a56c:	d50e      	bpl.n	800a58c <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a56e:	68da      	ldr	r2, [r3, #12]
 800a570:	0792      	lsls	r2, r2, #30
 800a572:	d50b      	bpl.n	800a58c <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a574:	f06f 0202 	mvn.w	r2, #2
 800a578:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a57a:	2201      	movs	r2, #1
 800a57c:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a57e:	699b      	ldr	r3, [r3, #24]
 800a580:	079b      	lsls	r3, r3, #30
 800a582:	d077      	beq.n	800a674 <HAL_TIM_IRQHandler+0x112>
          HAL_TIM_IC_CaptureCallback(htim);
 800a584:	f7ff ffea 	bl	800a55c <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a588:	2300      	movs	r3, #0
 800a58a:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a58c:	6823      	ldr	r3, [r4, #0]
 800a58e:	691a      	ldr	r2, [r3, #16]
 800a590:	0750      	lsls	r0, r2, #29
 800a592:	d510      	bpl.n	800a5b6 <HAL_TIM_IRQHandler+0x54>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a594:	68da      	ldr	r2, [r3, #12]
 800a596:	0751      	lsls	r1, r2, #29
 800a598:	d50d      	bpl.n	800a5b6 <HAL_TIM_IRQHandler+0x54>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a59a:	f06f 0204 	mvn.w	r2, #4
 800a59e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a5a0:	2202      	movs	r2, #2
 800a5a2:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a5a4:	699b      	ldr	r3, [r3, #24]
 800a5a6:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 800a5aa:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a5ac:	d068      	beq.n	800a680 <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 800a5ae:	f7ff ffd5 	bl	800a55c <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a5b2:	2300      	movs	r3, #0
 800a5b4:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a5b6:	6823      	ldr	r3, [r4, #0]
 800a5b8:	691a      	ldr	r2, [r3, #16]
 800a5ba:	0712      	lsls	r2, r2, #28
 800a5bc:	d50f      	bpl.n	800a5de <HAL_TIM_IRQHandler+0x7c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a5be:	68da      	ldr	r2, [r3, #12]
 800a5c0:	0710      	lsls	r0, r2, #28
 800a5c2:	d50c      	bpl.n	800a5de <HAL_TIM_IRQHandler+0x7c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a5c4:	f06f 0208 	mvn.w	r2, #8
 800a5c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a5ca:	2204      	movs	r2, #4
 800a5cc:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a5ce:	69db      	ldr	r3, [r3, #28]
 800a5d0:	0799      	lsls	r1, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 800a5d2:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a5d4:	d05a      	beq.n	800a68c <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 800a5d6:	f7ff ffc1 	bl	800a55c <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a5da:	2300      	movs	r3, #0
 800a5dc:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a5de:	6823      	ldr	r3, [r4, #0]
 800a5e0:	691a      	ldr	r2, [r3, #16]
 800a5e2:	06d2      	lsls	r2, r2, #27
 800a5e4:	d510      	bpl.n	800a608 <HAL_TIM_IRQHandler+0xa6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a5e6:	68da      	ldr	r2, [r3, #12]
 800a5e8:	06d0      	lsls	r0, r2, #27
 800a5ea:	d50d      	bpl.n	800a608 <HAL_TIM_IRQHandler+0xa6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a5ec:	f06f 0210 	mvn.w	r2, #16
 800a5f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a5f2:	2208      	movs	r2, #8
 800a5f4:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a5f6:	69db      	ldr	r3, [r3, #28]
 800a5f8:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 800a5fc:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a5fe:	d04b      	beq.n	800a698 <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 800a600:	f7ff ffac 	bl	800a55c <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a604:	2300      	movs	r3, #0
 800a606:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a608:	6823      	ldr	r3, [r4, #0]
 800a60a:	691a      	ldr	r2, [r3, #16]
 800a60c:	07d1      	lsls	r1, r2, #31
 800a60e:	d508      	bpl.n	800a622 <HAL_TIM_IRQHandler+0xc0>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a610:	68da      	ldr	r2, [r3, #12]
 800a612:	07d2      	lsls	r2, r2, #31
 800a614:	d505      	bpl.n	800a622 <HAL_TIM_IRQHandler+0xc0>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a616:	f06f 0201 	mvn.w	r2, #1
 800a61a:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800a61c:	4620      	mov	r0, r4
 800a61e:	f7ff ff9c 	bl	800a55a <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a622:	6823      	ldr	r3, [r4, #0]
 800a624:	691a      	ldr	r2, [r3, #16]
 800a626:	0610      	lsls	r0, r2, #24
 800a628:	d508      	bpl.n	800a63c <HAL_TIM_IRQHandler+0xda>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a62a:	68da      	ldr	r2, [r3, #12]
 800a62c:	0611      	lsls	r1, r2, #24
 800a62e:	d505      	bpl.n	800a63c <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a630:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a634:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800a636:	4620      	mov	r0, r4
 800a638:	f000 fca7 	bl	800af8a <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a63c:	6823      	ldr	r3, [r4, #0]
 800a63e:	691a      	ldr	r2, [r3, #16]
 800a640:	0652      	lsls	r2, r2, #25
 800a642:	d508      	bpl.n	800a656 <HAL_TIM_IRQHandler+0xf4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a644:	68da      	ldr	r2, [r3, #12]
 800a646:	0650      	lsls	r0, r2, #25
 800a648:	d505      	bpl.n	800a656 <HAL_TIM_IRQHandler+0xf4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a64a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a64e:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800a650:	4620      	mov	r0, r4
 800a652:	f7ff ff85 	bl	800a560 <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a656:	6823      	ldr	r3, [r4, #0]
 800a658:	691a      	ldr	r2, [r3, #16]
 800a65a:	0691      	lsls	r1, r2, #26
 800a65c:	d522      	bpl.n	800a6a4 <HAL_TIM_IRQHandler+0x142>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a65e:	68da      	ldr	r2, [r3, #12]
 800a660:	0692      	lsls	r2, r2, #26
 800a662:	d51f      	bpl.n	800a6a4 <HAL_TIM_IRQHandler+0x142>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a664:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 800a668:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a66a:	611a      	str	r2, [r3, #16]
}
 800a66c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 800a670:	f000 bc8a 	b.w	800af88 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a674:	f009 fc7a 	bl	8013f6c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a678:	4620      	mov	r0, r4
 800a67a:	f7ff ff70 	bl	800a55e <HAL_TIM_PWM_PulseFinishedCallback>
 800a67e:	e783      	b.n	800a588 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a680:	f009 fc74 	bl	8013f6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a684:	4620      	mov	r0, r4
 800a686:	f7ff ff6a 	bl	800a55e <HAL_TIM_PWM_PulseFinishedCallback>
 800a68a:	e792      	b.n	800a5b2 <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a68c:	f009 fc6e 	bl	8013f6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a690:	4620      	mov	r0, r4
 800a692:	f7ff ff64 	bl	800a55e <HAL_TIM_PWM_PulseFinishedCallback>
 800a696:	e7a0      	b.n	800a5da <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a698:	f009 fc68 	bl	8013f6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a69c:	4620      	mov	r0, r4
 800a69e:	f7ff ff5e 	bl	800a55e <HAL_TIM_PWM_PulseFinishedCallback>
 800a6a2:	e7af      	b.n	800a604 <HAL_TIM_IRQHandler+0xa2>
}
 800a6a4:	bd10      	pop	{r4, pc}
	...

0800a6a8 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a6a8:	4a30      	ldr	r2, [pc, #192]	; (800a76c <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 800a6aa:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a6ac:	4290      	cmp	r0, r2
 800a6ae:	d012      	beq.n	800a6d6 <TIM_Base_SetConfig+0x2e>
 800a6b0:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800a6b4:	d00f      	beq.n	800a6d6 <TIM_Base_SetConfig+0x2e>
 800a6b6:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800a6ba:	4290      	cmp	r0, r2
 800a6bc:	d00b      	beq.n	800a6d6 <TIM_Base_SetConfig+0x2e>
 800a6be:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a6c2:	4290      	cmp	r0, r2
 800a6c4:	d007      	beq.n	800a6d6 <TIM_Base_SetConfig+0x2e>
 800a6c6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a6ca:	4290      	cmp	r0, r2
 800a6cc:	d003      	beq.n	800a6d6 <TIM_Base_SetConfig+0x2e>
 800a6ce:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800a6d2:	4290      	cmp	r0, r2
 800a6d4:	d119      	bne.n	800a70a <TIM_Base_SetConfig+0x62>
    tmpcr1 |= Structure->CounterMode;
 800a6d6:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a6d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800a6dc:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a6de:	4a23      	ldr	r2, [pc, #140]	; (800a76c <TIM_Base_SetConfig+0xc4>)
 800a6e0:	4290      	cmp	r0, r2
 800a6e2:	d029      	beq.n	800a738 <TIM_Base_SetConfig+0x90>
 800a6e4:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800a6e8:	d026      	beq.n	800a738 <TIM_Base_SetConfig+0x90>
 800a6ea:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800a6ee:	4290      	cmp	r0, r2
 800a6f0:	d022      	beq.n	800a738 <TIM_Base_SetConfig+0x90>
 800a6f2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a6f6:	4290      	cmp	r0, r2
 800a6f8:	d01e      	beq.n	800a738 <TIM_Base_SetConfig+0x90>
 800a6fa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a6fe:	4290      	cmp	r0, r2
 800a700:	d01a      	beq.n	800a738 <TIM_Base_SetConfig+0x90>
 800a702:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800a706:	4290      	cmp	r0, r2
 800a708:	d016      	beq.n	800a738 <TIM_Base_SetConfig+0x90>
 800a70a:	4a19      	ldr	r2, [pc, #100]	; (800a770 <TIM_Base_SetConfig+0xc8>)
 800a70c:	4290      	cmp	r0, r2
 800a70e:	d013      	beq.n	800a738 <TIM_Base_SetConfig+0x90>
 800a710:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a714:	4290      	cmp	r0, r2
 800a716:	d00f      	beq.n	800a738 <TIM_Base_SetConfig+0x90>
 800a718:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a71c:	4290      	cmp	r0, r2
 800a71e:	d00b      	beq.n	800a738 <TIM_Base_SetConfig+0x90>
 800a720:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 800a724:	4290      	cmp	r0, r2
 800a726:	d007      	beq.n	800a738 <TIM_Base_SetConfig+0x90>
 800a728:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a72c:	4290      	cmp	r0, r2
 800a72e:	d003      	beq.n	800a738 <TIM_Base_SetConfig+0x90>
 800a730:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a734:	4290      	cmp	r0, r2
 800a736:	d103      	bne.n	800a740 <TIM_Base_SetConfig+0x98>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a738:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 800a73a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a73e:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a740:	694a      	ldr	r2, [r1, #20]
 800a742:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a746:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 800a748:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a74a:	688b      	ldr	r3, [r1, #8]
 800a74c:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800a74e:	680b      	ldr	r3, [r1, #0]
 800a750:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a752:	4b06      	ldr	r3, [pc, #24]	; (800a76c <TIM_Base_SetConfig+0xc4>)
 800a754:	4298      	cmp	r0, r3
 800a756:	d003      	beq.n	800a760 <TIM_Base_SetConfig+0xb8>
 800a758:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a75c:	4298      	cmp	r0, r3
 800a75e:	d101      	bne.n	800a764 <TIM_Base_SetConfig+0xbc>
    TIMx->RCR = Structure->RepetitionCounter;
 800a760:	690b      	ldr	r3, [r1, #16]
 800a762:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 800a764:	2301      	movs	r3, #1
 800a766:	6143      	str	r3, [r0, #20]
}
 800a768:	4770      	bx	lr
 800a76a:	bf00      	nop
 800a76c:	40010000 	.word	0x40010000
 800a770:	40014000 	.word	0x40014000

0800a774 <HAL_TIM_OC_Init>:
{
 800a774:	b510      	push	{r4, lr}
  if (htim == NULL)
 800a776:	4604      	mov	r4, r0
 800a778:	b330      	cbz	r0, 800a7c8 <HAL_TIM_OC_Init+0x54>
  if (htim->State == HAL_TIM_STATE_RESET)
 800a77a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800a77e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800a782:	b91b      	cbnz	r3, 800a78c <HAL_TIM_OC_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 800a784:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_OC_MspInit(htim);
 800a788:	f00a f8e8 	bl	801495c <HAL_TIM_OC_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 800a78c:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800a78e:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800a790:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800a794:	1d21      	adds	r1, r4, #4
 800a796:	f7ff ff87 	bl	800a6a8 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a79a:	2301      	movs	r3, #1
 800a79c:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  return HAL_OK;
 800a7a0:	2000      	movs	r0, #0
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a7a2:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800a7a6:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800a7aa:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800a7ae:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a7b2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a7b6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a7ba:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800a7be:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 800a7c2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 800a7c6:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800a7c8:	2001      	movs	r0, #1
 800a7ca:	e7fc      	b.n	800a7c6 <HAL_TIM_OC_Init+0x52>

0800a7cc <HAL_TIM_PWM_Init>:
{
 800a7cc:	b510      	push	{r4, lr}
  if (htim == NULL)
 800a7ce:	4604      	mov	r4, r0
 800a7d0:	b330      	cbz	r0, 800a820 <HAL_TIM_PWM_Init+0x54>
  if (htim->State == HAL_TIM_STATE_RESET)
 800a7d2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800a7d6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800a7da:	b91b      	cbnz	r3, 800a7e4 <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 800a7dc:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 800a7e0:	f7ff fea4 	bl	800a52c <HAL_TIM_PWM_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 800a7e4:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a7e6:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800a7e8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a7ec:	1d21      	adds	r1, r4, #4
 800a7ee:	f7ff ff5b 	bl	800a6a8 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a7f2:	2301      	movs	r3, #1
 800a7f4:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  return HAL_OK;
 800a7f8:	2000      	movs	r0, #0
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a7fa:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800a7fe:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800a802:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800a806:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a80a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a80e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a812:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800a816:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 800a81a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 800a81e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800a820:	2001      	movs	r0, #1
 800a822:	e7fc      	b.n	800a81e <HAL_TIM_PWM_Init+0x52>

0800a824 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a824:	6a03      	ldr	r3, [r0, #32]
 800a826:	f023 0310 	bic.w	r3, r3, #16
 800a82a:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 800a82c:	6a03      	ldr	r3, [r0, #32]
{
 800a82e:	b570      	push	{r4, r5, r6, lr}
  tmpcr2 =  TIMx->CR2;
 800a830:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 800a832:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a834:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a836:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a83a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a83e:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 800a840:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a844:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a848:	4d10      	ldr	r5, [pc, #64]	; (800a88c <TIM_OC2_SetConfig+0x68>)
 800a84a:	42a8      	cmp	r0, r5
 800a84c:	d003      	beq.n	800a856 <TIM_OC2_SetConfig+0x32>
 800a84e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800a852:	42a8      	cmp	r0, r5
 800a854:	d114      	bne.n	800a880 <TIM_OC2_SetConfig+0x5c>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a856:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 800a858:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a85c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a860:	4d0a      	ldr	r5, [pc, #40]	; (800a88c <TIM_OC2_SetConfig+0x68>)
 800a862:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC2NE;
 800a864:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a868:	d003      	beq.n	800a872 <TIM_OC2_SetConfig+0x4e>
 800a86a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800a86e:	42a8      	cmp	r0, r5
 800a870:	d106      	bne.n	800a880 <TIM_OC2_SetConfig+0x5c>
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a872:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a876:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a87a:	4335      	orrs	r5, r6
 800a87c:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 800a880:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 800a882:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 800a884:	684a      	ldr	r2, [r1, #4]
 800a886:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 800a888:	6203      	str	r3, [r0, #32]
}
 800a88a:	bd70      	pop	{r4, r5, r6, pc}
 800a88c:	40010000 	.word	0x40010000

0800a890 <HAL_TIM_OC_ConfigChannel>:
{
 800a890:	b510      	push	{r4, lr}
  __HAL_LOCK(htim);
 800a892:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800a896:	2b01      	cmp	r3, #1
{
 800a898:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 800a89a:	d01e      	beq.n	800a8da <HAL_TIM_OC_ConfigChannel+0x4a>
 800a89c:	2301      	movs	r3, #1
  switch (Channel)
 800a89e:	2a08      	cmp	r2, #8
  __HAL_LOCK(htim);
 800a8a0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 800a8a4:	d015      	beq.n	800a8d2 <HAL_TIM_OC_ConfigChannel+0x42>
 800a8a6:	d806      	bhi.n	800a8b6 <HAL_TIM_OC_ConfigChannel+0x26>
 800a8a8:	b15a      	cbz	r2, 800a8c2 <HAL_TIM_OC_ConfigChannel+0x32>
 800a8aa:	2a04      	cmp	r2, #4
 800a8ac:	d00d      	beq.n	800a8ca <HAL_TIM_OC_ConfigChannel+0x3a>
  __HAL_UNLOCK(htim);
 800a8ae:	2000      	movs	r0, #0
 800a8b0:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 800a8b4:	bd10      	pop	{r4, pc}
  switch (Channel)
 800a8b6:	2a0c      	cmp	r2, #12
 800a8b8:	d1f9      	bne.n	800a8ae <HAL_TIM_OC_ConfigChannel+0x1e>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a8ba:	6800      	ldr	r0, [r0, #0]
 800a8bc:	f7ff fe10 	bl	800a4e0 <TIM_OC4_SetConfig>
      break;
 800a8c0:	e7f5      	b.n	800a8ae <HAL_TIM_OC_ConfigChannel+0x1e>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a8c2:	6800      	ldr	r0, [r0, #0]
 800a8c4:	f7ff fda4 	bl	800a410 <TIM_OC1_SetConfig>
      break;
 800a8c8:	e7f1      	b.n	800a8ae <HAL_TIM_OC_ConfigChannel+0x1e>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a8ca:	6800      	ldr	r0, [r0, #0]
 800a8cc:	f7ff ffaa 	bl	800a824 <TIM_OC2_SetConfig>
      break;
 800a8d0:	e7ed      	b.n	800a8ae <HAL_TIM_OC_ConfigChannel+0x1e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a8d2:	6800      	ldr	r0, [r0, #0]
 800a8d4:	f7ff fdce 	bl	800a474 <TIM_OC3_SetConfig>
      break;
 800a8d8:	e7e9      	b.n	800a8ae <HAL_TIM_OC_ConfigChannel+0x1e>
  __HAL_LOCK(htim);
 800a8da:	2002      	movs	r0, #2
 800a8dc:	e7ea      	b.n	800a8b4 <HAL_TIM_OC_ConfigChannel+0x24>

0800a8de <HAL_TIM_PWM_ConfigChannel>:
{
 800a8de:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 800a8e0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800a8e4:	2b01      	cmp	r3, #1
{
 800a8e6:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 800a8e8:	d052      	beq.n	800a990 <HAL_TIM_PWM_ConfigChannel+0xb2>
 800a8ea:	2301      	movs	r3, #1
  switch (Channel)
 800a8ec:	2a08      	cmp	r2, #8
  __HAL_LOCK(htim);
 800a8ee:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 800a8f2:	d03c      	beq.n	800a96e <HAL_TIM_PWM_ConfigChannel+0x90>
 800a8f4:	d806      	bhi.n	800a904 <HAL_TIM_PWM_ConfigChannel+0x26>
 800a8f6:	b1c2      	cbz	r2, 800a92a <HAL_TIM_PWM_ConfigChannel+0x4c>
 800a8f8:	2a04      	cmp	r2, #4
 800a8fa:	d027      	beq.n	800a94c <HAL_TIM_PWM_ConfigChannel+0x6e>
  __HAL_UNLOCK(htim);
 800a8fc:	2000      	movs	r0, #0
 800a8fe:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 800a902:	bd38      	pop	{r3, r4, r5, pc}
  switch (Channel)
 800a904:	2a0c      	cmp	r2, #12
 800a906:	d1f9      	bne.n	800a8fc <HAL_TIM_PWM_ConfigChannel+0x1e>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a908:	6800      	ldr	r0, [r0, #0]
 800a90a:	f7ff fde9 	bl	800a4e0 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a90e:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a910:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a912:	69da      	ldr	r2, [r3, #28]
 800a914:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a918:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a91a:	69da      	ldr	r2, [r3, #28]
 800a91c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a920:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a922:	69da      	ldr	r2, [r3, #28]
 800a924:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800a928:	e030      	b.n	800a98c <HAL_TIM_PWM_ConfigChannel+0xae>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a92a:	6800      	ldr	r0, [r0, #0]
 800a92c:	f7ff fd70 	bl	800a410 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a930:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a932:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a934:	699a      	ldr	r2, [r3, #24]
 800a936:	f042 0208 	orr.w	r2, r2, #8
 800a93a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a93c:	699a      	ldr	r2, [r3, #24]
 800a93e:	f022 0204 	bic.w	r2, r2, #4
 800a942:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a944:	699a      	ldr	r2, [r3, #24]
 800a946:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a948:	619a      	str	r2, [r3, #24]
      break;
 800a94a:	e7d7      	b.n	800a8fc <HAL_TIM_PWM_ConfigChannel+0x1e>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a94c:	6800      	ldr	r0, [r0, #0]
 800a94e:	f7ff ff69 	bl	800a824 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a952:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a954:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a956:	699a      	ldr	r2, [r3, #24]
 800a958:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a95c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a95e:	699a      	ldr	r2, [r3, #24]
 800a960:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a964:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a966:	699a      	ldr	r2, [r3, #24]
 800a968:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800a96c:	e7ec      	b.n	800a948 <HAL_TIM_PWM_ConfigChannel+0x6a>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a96e:	6800      	ldr	r0, [r0, #0]
 800a970:	f7ff fd80 	bl	800a474 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a974:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a976:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a978:	69da      	ldr	r2, [r3, #28]
 800a97a:	f042 0208 	orr.w	r2, r2, #8
 800a97e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a980:	69da      	ldr	r2, [r3, #28]
 800a982:	f022 0204 	bic.w	r2, r2, #4
 800a986:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a988:	69da      	ldr	r2, [r3, #28]
 800a98a:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a98c:	61da      	str	r2, [r3, #28]
      break;
 800a98e:	e7b5      	b.n	800a8fc <HAL_TIM_PWM_ConfigChannel+0x1e>
  __HAL_LOCK(htim);
 800a990:	2002      	movs	r0, #2
 800a992:	e7b6      	b.n	800a902 <HAL_TIM_PWM_ConfigChannel+0x24>

0800a994 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800a994:	b570      	push	{r4, r5, r6, lr}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a996:	6a04      	ldr	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800a998:	4e1a      	ldr	r6, [pc, #104]	; (800aa04 <TIM_TI1_SetConfig+0x70>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a99a:	f024 0401 	bic.w	r4, r4, #1
 800a99e:	6204      	str	r4, [r0, #32]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800a9a0:	42b0      	cmp	r0, r6
  tmpccmr1 = TIMx->CCMR1;
 800a9a2:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 800a9a4:	6a05      	ldr	r5, [r0, #32]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800a9a6:	d029      	beq.n	800a9fc <TIM_TI1_SetConfig+0x68>
 800a9a8:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800a9ac:	d026      	beq.n	800a9fc <TIM_TI1_SetConfig+0x68>
 800a9ae:	f5a6 467c 	sub.w	r6, r6, #64512	; 0xfc00
 800a9b2:	42b0      	cmp	r0, r6
 800a9b4:	d022      	beq.n	800a9fc <TIM_TI1_SetConfig+0x68>
 800a9b6:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800a9ba:	42b0      	cmp	r0, r6
 800a9bc:	d01e      	beq.n	800a9fc <TIM_TI1_SetConfig+0x68>
 800a9be:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800a9c2:	42b0      	cmp	r0, r6
 800a9c4:	d01a      	beq.n	800a9fc <TIM_TI1_SetConfig+0x68>
 800a9c6:	f506 4678 	add.w	r6, r6, #63488	; 0xf800
 800a9ca:	42b0      	cmp	r0, r6
 800a9cc:	d016      	beq.n	800a9fc <TIM_TI1_SetConfig+0x68>
 800a9ce:	f506 5670 	add.w	r6, r6, #15360	; 0x3c00
 800a9d2:	42b0      	cmp	r0, r6
 800a9d4:	d012      	beq.n	800a9fc <TIM_TI1_SetConfig+0x68>
 800a9d6:	f5a6 3694 	sub.w	r6, r6, #75776	; 0x12800
 800a9da:	42b0      	cmp	r0, r6
 800a9dc:	d00e      	beq.n	800a9fc <TIM_TI1_SetConfig+0x68>
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
    tmpccmr1 |= TIM_ICSelection;
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800a9de:	f044 0201 	orr.w	r2, r4, #1
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800a9e2:	011b      	lsls	r3, r3, #4
 800a9e4:	b2db      	uxtb	r3, r3
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a9e6:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800a9ea:	431a      	orrs	r2, r3

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800a9ec:	f001 010a 	and.w	r1, r1, #10
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a9f0:	f025 030a 	bic.w	r3, r5, #10
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800a9f4:	4319      	orrs	r1, r3

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a9f6:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 800a9f8:	6201      	str	r1, [r0, #32]
}
 800a9fa:	bd70      	pop	{r4, r5, r6, pc}
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800a9fc:	f024 0403 	bic.w	r4, r4, #3
    tmpccmr1 |= TIM_ICSelection;
 800aa00:	4322      	orrs	r2, r4
 800aa02:	e7ee      	b.n	800a9e2 <TIM_TI1_SetConfig+0x4e>
 800aa04:	40010000 	.word	0x40010000

0800aa08 <HAL_TIM_IC_ConfigChannel>:
{
 800aa08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 800aa0a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800aa0e:	2b01      	cmp	r3, #1
{
 800aa10:	4604      	mov	r4, r0
 800aa12:	460e      	mov	r6, r1
 800aa14:	4615      	mov	r5, r2
  __HAL_LOCK(htim);
 800aa16:	d07a      	beq.n	800ab0e <HAL_TIM_IC_ConfigChannel+0x106>
 800aa18:	2301      	movs	r3, #1
 800aa1a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if (Channel == TIM_CHANNEL_1)
 800aa1e:	e9d1 1200 	ldrd	r1, r2, [r1]
 800aa22:	6800      	ldr	r0, [r0, #0]
 800aa24:	68f3      	ldr	r3, [r6, #12]
 800aa26:	b975      	cbnz	r5, 800aa46 <HAL_TIM_IC_ConfigChannel+0x3e>
    TIM_TI1_SetConfig(htim->Instance,
 800aa28:	f7ff ffb4 	bl	800a994 <TIM_TI1_SetConfig>
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800aa2c:	6823      	ldr	r3, [r4, #0]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800aa2e:	68b1      	ldr	r1, [r6, #8]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800aa30:	699a      	ldr	r2, [r3, #24]
 800aa32:	f022 020c 	bic.w	r2, r2, #12
 800aa36:	619a      	str	r2, [r3, #24]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800aa38:	699a      	ldr	r2, [r3, #24]
 800aa3a:	430a      	orrs	r2, r1
 800aa3c:	619a      	str	r2, [r3, #24]
  __HAL_UNLOCK(htim);
 800aa3e:	2000      	movs	r0, #0
 800aa40:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 800aa44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if (Channel == TIM_CHANNEL_2)
 800aa46:	2d04      	cmp	r5, #4
 800aa48:	68b6      	ldr	r6, [r6, #8]
 800aa4a:	d122      	bne.n	800aa92 <HAL_TIM_IC_ConfigChannel+0x8a>
{
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800aa4c:	6a05      	ldr	r5, [r0, #32]
 800aa4e:	f025 0510 	bic.w	r5, r5, #16
 800aa52:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800aa54:	6987      	ldr	r7, [r0, #24]
  tmpccer = TIMx->CCER;
 800aa56:	f8d0 e020 	ldr.w	lr, [r0, #32]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800aa5a:	f427 7c40 	bic.w	ip, r7, #768	; 0x300
  tmpccmr1 |= (TIM_ICSelection << 8U);

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800aa5e:	031d      	lsls	r5, r3, #12
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800aa60:	ea4c 2c02 	orr.w	ip, ip, r2, lsl #8

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800aa64:	0109      	lsls	r1, r1, #4
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800aa66:	f42c 4c70 	bic.w	ip, ip, #61440	; 0xf000
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800aa6a:	b2ad      	uxth	r5, r5
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800aa6c:	f02e 0ea0 	bic.w	lr, lr, #160	; 0xa0
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800aa70:	f001 01a0 	and.w	r1, r1, #160	; 0xa0
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800aa74:	ea45 050c 	orr.w	r5, r5, ip
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800aa78:	ea41 010e 	orr.w	r1, r1, lr

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800aa7c:	6185      	str	r5, [r0, #24]
  TIMx->CCER = tmpccer;
 800aa7e:	6201      	str	r1, [r0, #32]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800aa80:	6983      	ldr	r3, [r0, #24]
 800aa82:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800aa86:	6183      	str	r3, [r0, #24]
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800aa88:	6983      	ldr	r3, [r0, #24]
 800aa8a:	ea43 2606 	orr.w	r6, r3, r6, lsl #8
 800aa8e:	6186      	str	r6, [r0, #24]
 800aa90:	e7d5      	b.n	800aa3e <HAL_TIM_IC_ConfigChannel+0x36>
  else if (Channel == TIM_CHANNEL_3)
 800aa92:	2d08      	cmp	r5, #8
{
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800aa94:	6a05      	ldr	r5, [r0, #32]
  else if (Channel == TIM_CHANNEL_3)
 800aa96:	d11c      	bne.n	800aad2 <HAL_TIM_IC_ConfigChannel+0xca>
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800aa98:	f425 7580 	bic.w	r5, r5, #256	; 0x100
 800aa9c:	6205      	str	r5, [r0, #32]
  tmpccmr2 = TIMx->CCMR2;
 800aa9e:	69c7      	ldr	r7, [r0, #28]
  tmpccer = TIMx->CCER;
 800aaa0:	6a05      	ldr	r5, [r0, #32]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800aaa2:	f027 0703 	bic.w	r7, r7, #3
  tmpccmr2 |= TIM_ICSelection;
 800aaa6:	4317      	orrs	r7, r2

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800aaa8:	011b      	lsls	r3, r3, #4

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800aaaa:	0209      	lsls	r1, r1, #8
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800aaac:	b2db      	uxtb	r3, r3
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800aaae:	f027 07f0 	bic.w	r7, r7, #240	; 0xf0
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800aab2:	f425 6520 	bic.w	r5, r5, #2560	; 0xa00
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800aab6:	f401 6120 	and.w	r1, r1, #2560	; 0xa00
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800aaba:	431f      	orrs	r7, r3
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800aabc:	4329      	orrs	r1, r5

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800aabe:	61c7      	str	r7, [r0, #28]
  TIMx->CCER = tmpccer;
 800aac0:	6201      	str	r1, [r0, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800aac2:	69c3      	ldr	r3, [r0, #28]
 800aac4:	f023 030c 	bic.w	r3, r3, #12
 800aac8:	61c3      	str	r3, [r0, #28]
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800aaca:	69c3      	ldr	r3, [r0, #28]
 800aacc:	431e      	orrs	r6, r3
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800aace:	61c6      	str	r6, [r0, #28]
 800aad0:	e7b5      	b.n	800aa3e <HAL_TIM_IC_ConfigChannel+0x36>
{
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800aad2:	f425 5580 	bic.w	r5, r5, #4096	; 0x1000
 800aad6:	6205      	str	r5, [r0, #32]
  tmpccmr2 = TIMx->CCMR2;
 800aad8:	69c5      	ldr	r5, [r0, #28]
  tmpccer = TIMx->CCER;
 800aada:	6a07      	ldr	r7, [r0, #32]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800aadc:	f425 7540 	bic.w	r5, r5, #768	; 0x300
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800aae0:	ea45 2502 	orr.w	r5, r5, r2, lsl #8

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800aae4:	031b      	lsls	r3, r3, #12

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800aae6:	0309      	lsls	r1, r1, #12
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800aae8:	f425 4570 	bic.w	r5, r5, #61440	; 0xf000
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800aaec:	b29b      	uxth	r3, r3
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800aaee:	f427 4720 	bic.w	r7, r7, #40960	; 0xa000
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800aaf2:	f401 4120 	and.w	r1, r1, #40960	; 0xa000
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800aaf6:	432b      	orrs	r3, r5
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800aaf8:	4339      	orrs	r1, r7

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800aafa:	61c3      	str	r3, [r0, #28]
  TIMx->CCER = tmpccer ;
 800aafc:	6201      	str	r1, [r0, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800aafe:	69c3      	ldr	r3, [r0, #28]
 800ab00:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800ab04:	61c3      	str	r3, [r0, #28]
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800ab06:	69c3      	ldr	r3, [r0, #28]
 800ab08:	ea43 2606 	orr.w	r6, r3, r6, lsl #8
 800ab0c:	e7df      	b.n	800aace <HAL_TIM_IC_ConfigChannel+0xc6>
  __HAL_LOCK(htim);
 800ab0e:	2002      	movs	r0, #2
 800ab10:	e798      	b.n	800aa44 <HAL_TIM_IC_ConfigChannel+0x3c>

0800ab12 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800ab12:	b510      	push	{r4, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800ab14:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ab16:	4311      	orrs	r1, r2
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ab18:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ab1c:	ea41 2303 	orr.w	r3, r1, r3, lsl #8
 800ab20:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ab22:	6083      	str	r3, [r0, #8]
}
 800ab24:	bd10      	pop	{r4, pc}

0800ab26 <TIM_SlaveTimer_SetConfig>:
  tmpsmcr = htim->Instance->SMCR;
 800ab26:	6800      	ldr	r0, [r0, #0]
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800ab28:	684a      	ldr	r2, [r1, #4]
{
 800ab2a:	b538      	push	{r3, r4, r5, lr}
  tmpsmcr = htim->Instance->SMCR;
 800ab2c:	6883      	ldr	r3, [r0, #8]
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800ab2e:	680c      	ldr	r4, [r1, #0]
  tmpsmcr &= ~TIM_SMCR_TS;
 800ab30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800ab34:	4313      	orrs	r3, r2
  tmpsmcr &= ~TIM_SMCR_SMS;
 800ab36:	f023 0307 	bic.w	r3, r3, #7
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800ab3a:	4323      	orrs	r3, r4
  switch (sSlaveConfig->InputTrigger)
 800ab3c:	2a60      	cmp	r2, #96	; 0x60
  htim->Instance->SMCR = tmpsmcr;
 800ab3e:	6083      	str	r3, [r0, #8]
  switch (sSlaveConfig->InputTrigger)
 800ab40:	d02e      	beq.n	800aba0 <TIM_SlaveTimer_SetConfig+0x7a>
 800ab42:	d805      	bhi.n	800ab50 <TIM_SlaveTimer_SetConfig+0x2a>
 800ab44:	2a40      	cmp	r2, #64	; 0x40
 800ab46:	d00b      	beq.n	800ab60 <TIM_SlaveTimer_SetConfig+0x3a>
 800ab48:	2a50      	cmp	r2, #80	; 0x50
 800ab4a:	d019      	beq.n	800ab80 <TIM_SlaveTimer_SetConfig+0x5a>
  return HAL_OK;
 800ab4c:	2000      	movs	r0, #0
}
 800ab4e:	bd38      	pop	{r3, r4, r5, pc}
  switch (sSlaveConfig->InputTrigger)
 800ab50:	2a70      	cmp	r2, #112	; 0x70
 800ab52:	d1fb      	bne.n	800ab4c <TIM_SlaveTimer_SetConfig+0x26>
      TIM_ETR_SetConfig(htim->Instance,
 800ab54:	690b      	ldr	r3, [r1, #16]
 800ab56:	e9d1 2102 	ldrd	r2, r1, [r1, #8]
 800ab5a:	f7ff ffda 	bl	800ab12 <TIM_ETR_SetConfig>
      break;
 800ab5e:	e7f5      	b.n	800ab4c <TIM_SlaveTimer_SetConfig+0x26>
      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800ab60:	2c05      	cmp	r4, #5
 800ab62:	d030      	beq.n	800abc6 <TIM_SlaveTimer_SetConfig+0xa0>
      tmpccer = htim->Instance->CCER;
 800ab64:	6a02      	ldr	r2, [r0, #32]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800ab66:	6a03      	ldr	r3, [r0, #32]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800ab68:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800ab6a:	f023 0301 	bic.w	r3, r3, #1
 800ab6e:	6203      	str	r3, [r0, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800ab70:	6983      	ldr	r3, [r0, #24]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ab72:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800ab76:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
      htim->Instance->CCMR1 = tmpccmr1;
 800ab7a:	6183      	str	r3, [r0, #24]
      htim->Instance->CCER = tmpccer;
 800ab7c:	6202      	str	r2, [r0, #32]
 800ab7e:	e7e5      	b.n	800ab4c <TIM_SlaveTimer_SetConfig+0x26>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ab80:	688a      	ldr	r2, [r1, #8]
 800ab82:	690d      	ldr	r5, [r1, #16]
  tmpccer = TIMx->CCER;
 800ab84:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ab86:	6a04      	ldr	r4, [r0, #32]
 800ab88:	f024 0401 	bic.w	r4, r4, #1
 800ab8c:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ab8e:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ab90:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ab94:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800ab98:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccer |= TIM_ICPolarity;
 800ab9c:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 800ab9e:	e7ec      	b.n	800ab7a <TIM_SlaveTimer_SetConfig+0x54>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800aba0:	688c      	ldr	r4, [r1, #8]
 800aba2:	690d      	ldr	r5, [r1, #16]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800aba4:	6a01      	ldr	r1, [r0, #32]
 800aba6:	f021 0110 	bic.w	r1, r1, #16
 800abaa:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800abac:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 800abae:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800abb0:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800abb4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800abb8:	ea42 3205 	orr.w	r2, r2, r5, lsl #12
  tmpccer |= (TIM_ICPolarity << 4U);
 800abbc:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 800abc0:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 800abc2:	6203      	str	r3, [r0, #32]
 800abc4:	e7c2      	b.n	800ab4c <TIM_SlaveTimer_SetConfig+0x26>
        return HAL_ERROR;
 800abc6:	2001      	movs	r0, #1
 800abc8:	e7c1      	b.n	800ab4e <TIM_SlaveTimer_SetConfig+0x28>

0800abca <HAL_TIM_SlaveConfigSynchro>:
{
 800abca:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 800abcc:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800abd0:	2b01      	cmp	r3, #1
{
 800abd2:	4604      	mov	r4, r0
 800abd4:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 800abd8:	d01c      	beq.n	800ac14 <HAL_TIM_SlaveConfigSynchro+0x4a>
 800abda:	2501      	movs	r5, #1
 800abdc:	f880 503c 	strb.w	r5, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 800abe0:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800abe4:	f7ff ff9f 	bl	800ab26 <TIM_SlaveTimer_SetConfig>
 800abe8:	b130      	cbz	r0, 800abf8 <HAL_TIM_SlaveConfigSynchro+0x2e>
    __HAL_UNLOCK(htim);
 800abea:	2300      	movs	r3, #0
    htim->State = HAL_TIM_STATE_READY;
 800abec:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 800abf0:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_ERROR;
 800abf4:	4628      	mov	r0, r5
}
 800abf6:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800abf8:	6823      	ldr	r3, [r4, #0]
 800abfa:	68da      	ldr	r2, [r3, #12]
 800abfc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ac00:	60da      	str	r2, [r3, #12]
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800ac02:	68da      	ldr	r2, [r3, #12]
 800ac04:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800ac08:	60da      	str	r2, [r3, #12]
  htim->State = HAL_TIM_STATE_READY;
 800ac0a:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800ac0e:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
  return HAL_OK;
 800ac12:	e7f0      	b.n	800abf6 <HAL_TIM_SlaveConfigSynchro+0x2c>
  __HAL_LOCK(htim);
 800ac14:	4618      	mov	r0, r3
 800ac16:	e7ee      	b.n	800abf6 <HAL_TIM_SlaveConfigSynchro+0x2c>

0800ac18 <TIM_CCxChannelCmd>:
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800ac18:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800ac1a:	f001 011f 	and.w	r1, r1, #31
{
 800ac1e:	b510      	push	{r4, lr}
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800ac20:	2401      	movs	r4, #1
 800ac22:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 800ac24:	ea23 0304 	bic.w	r3, r3, r4
 800ac28:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800ac2a:	6a03      	ldr	r3, [r0, #32]
 800ac2c:	408a      	lsls	r2, r1
 800ac2e:	431a      	orrs	r2, r3
 800ac30:	6202      	str	r2, [r0, #32]
}
 800ac32:	bd10      	pop	{r4, pc}

0800ac34 <HAL_TIM_OC_Start>:
{
 800ac34:	b510      	push	{r4, lr}
 800ac36:	4604      	mov	r4, r0
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800ac38:	b929      	cbnz	r1, 800ac46 <HAL_TIM_OC_Start+0x12>
 800ac3a:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 800ac3e:	2b01      	cmp	r3, #1
 800ac40:	d01d      	beq.n	800ac7e <HAL_TIM_OC_Start+0x4a>
    return HAL_ERROR;
 800ac42:	2001      	movs	r0, #1
 800ac44:	e032      	b.n	800acac <HAL_TIM_OC_Start+0x78>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800ac46:	2904      	cmp	r1, #4
 800ac48:	d107      	bne.n	800ac5a <HAL_TIM_OC_Start+0x26>
 800ac4a:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
 800ac4e:	2b01      	cmp	r3, #1
 800ac50:	d1f7      	bne.n	800ac42 <HAL_TIM_OC_Start+0xe>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800ac52:	2302      	movs	r3, #2
 800ac54:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
 800ac58:	e014      	b.n	800ac84 <HAL_TIM_OC_Start+0x50>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800ac5a:	2908      	cmp	r1, #8
 800ac5c:	d107      	bne.n	800ac6e <HAL_TIM_OC_Start+0x3a>
 800ac5e:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800ac62:	2b01      	cmp	r3, #1
 800ac64:	d1ed      	bne.n	800ac42 <HAL_TIM_OC_Start+0xe>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800ac66:	2302      	movs	r3, #2
 800ac68:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 800ac6c:	e00a      	b.n	800ac84 <HAL_TIM_OC_Start+0x50>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800ac6e:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800ac72:	2b01      	cmp	r3, #1
 800ac74:	d1e5      	bne.n	800ac42 <HAL_TIM_OC_Start+0xe>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800ac76:	2302      	movs	r3, #2
 800ac78:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
 800ac7c:	e002      	b.n	800ac84 <HAL_TIM_OC_Start+0x50>
 800ac7e:	2302      	movs	r3, #2
 800ac80:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800ac84:	2201      	movs	r2, #1
 800ac86:	6820      	ldr	r0, [r4, #0]
 800ac88:	f7ff ffc6 	bl	800ac18 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800ac8c:	6823      	ldr	r3, [r4, #0]
 800ac8e:	4a19      	ldr	r2, [pc, #100]	; (800acf4 <HAL_TIM_OC_Start+0xc0>)
 800ac90:	4293      	cmp	r3, r2
 800ac92:	d00c      	beq.n	800acae <HAL_TIM_OC_Start+0x7a>
 800ac94:	4918      	ldr	r1, [pc, #96]	; (800acf8 <HAL_TIM_OC_Start+0xc4>)
 800ac96:	428b      	cmp	r3, r1
 800ac98:	d009      	beq.n	800acae <HAL_TIM_OC_Start+0x7a>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ac9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ac9e:	d10d      	bne.n	800acbc <HAL_TIM_OC_Start+0x88>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800aca0:	689a      	ldr	r2, [r3, #8]
 800aca2:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aca6:	2a06      	cmp	r2, #6
 800aca8:	d11f      	bne.n	800acea <HAL_TIM_OC_Start+0xb6>
  return HAL_OK;
 800acaa:	2000      	movs	r0, #0
}
 800acac:	bd10      	pop	{r4, pc}
    __HAL_TIM_MOE_ENABLE(htim);
 800acae:	6c59      	ldr	r1, [r3, #68]	; 0x44
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800acb0:	4293      	cmp	r3, r2
    __HAL_TIM_MOE_ENABLE(htim);
 800acb2:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 800acb6:	6459      	str	r1, [r3, #68]	; 0x44
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800acb8:	d0f2      	beq.n	800aca0 <HAL_TIM_OC_Start+0x6c>
 800acba:	e7ee      	b.n	800ac9a <HAL_TIM_OC_Start+0x66>
 800acbc:	4a0f      	ldr	r2, [pc, #60]	; (800acfc <HAL_TIM_OC_Start+0xc8>)
 800acbe:	4293      	cmp	r3, r2
 800acc0:	d0ee      	beq.n	800aca0 <HAL_TIM_OC_Start+0x6c>
 800acc2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800acc6:	4293      	cmp	r3, r2
 800acc8:	d0ea      	beq.n	800aca0 <HAL_TIM_OC_Start+0x6c>
 800acca:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800acce:	4293      	cmp	r3, r2
 800acd0:	d0e6      	beq.n	800aca0 <HAL_TIM_OC_Start+0x6c>
 800acd2:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800acd6:	4293      	cmp	r3, r2
 800acd8:	d0e2      	beq.n	800aca0 <HAL_TIM_OC_Start+0x6c>
 800acda:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 800acde:	4293      	cmp	r3, r2
 800ace0:	d0de      	beq.n	800aca0 <HAL_TIM_OC_Start+0x6c>
 800ace2:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800ace6:	4293      	cmp	r3, r2
 800ace8:	d0da      	beq.n	800aca0 <HAL_TIM_OC_Start+0x6c>
    __HAL_TIM_ENABLE(htim);
 800acea:	681a      	ldr	r2, [r3, #0]
 800acec:	f042 0201 	orr.w	r2, r2, #1
 800acf0:	601a      	str	r2, [r3, #0]
 800acf2:	e7da      	b.n	800acaa <HAL_TIM_OC_Start+0x76>
 800acf4:	40010000 	.word	0x40010000
 800acf8:	40010400 	.word	0x40010400
 800acfc:	40000400 	.word	0x40000400

0800ad00 <HAL_TIM_OC_Start_IT>:
{
 800ad00:	b510      	push	{r4, lr}
 800ad02:	4604      	mov	r4, r0
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800ad04:	b929      	cbnz	r1, 800ad12 <HAL_TIM_OC_Start_IT+0x12>
 800ad06:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 800ad0a:	2b01      	cmp	r3, #1
 800ad0c:	d02b      	beq.n	800ad66 <HAL_TIM_OC_Start_IT+0x66>
    return HAL_ERROR;
 800ad0e:	2001      	movs	r0, #1
 800ad10:	e045      	b.n	800ad9e <HAL_TIM_OC_Start_IT+0x9e>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800ad12:	2904      	cmp	r1, #4
 800ad14:	d10b      	bne.n	800ad2e <HAL_TIM_OC_Start_IT+0x2e>
 800ad16:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
 800ad1a:	2b01      	cmp	r3, #1
 800ad1c:	d1f7      	bne.n	800ad0e <HAL_TIM_OC_Start_IT+0xe>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800ad1e:	2302      	movs	r3, #2
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800ad20:	6802      	ldr	r2, [r0, #0]
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800ad22:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800ad26:	68d3      	ldr	r3, [r2, #12]
 800ad28:	f043 0304 	orr.w	r3, r3, #4
 800ad2c:	e022      	b.n	800ad74 <HAL_TIM_OC_Start_IT+0x74>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800ad2e:	2908      	cmp	r1, #8
 800ad30:	d10b      	bne.n	800ad4a <HAL_TIM_OC_Start_IT+0x4a>
 800ad32:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800ad36:	2b01      	cmp	r3, #1
 800ad38:	d1e9      	bne.n	800ad0e <HAL_TIM_OC_Start_IT+0xe>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800ad3a:	2302      	movs	r3, #2
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800ad3c:	6802      	ldr	r2, [r0, #0]
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800ad3e:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800ad42:	68d3      	ldr	r3, [r2, #12]
 800ad44:	f043 0308 	orr.w	r3, r3, #8
 800ad48:	e014      	b.n	800ad74 <HAL_TIM_OC_Start_IT+0x74>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800ad4a:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800ad4e:	2b01      	cmp	r3, #1
 800ad50:	d1dd      	bne.n	800ad0e <HAL_TIM_OC_Start_IT+0xe>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800ad52:	2302      	movs	r3, #2
  switch (Channel)
 800ad54:	290c      	cmp	r1, #12
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800ad56:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
  switch (Channel)
 800ad5a:	d10c      	bne.n	800ad76 <HAL_TIM_OC_Start_IT+0x76>
 800ad5c:	6802      	ldr	r2, [r0, #0]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800ad5e:	68d3      	ldr	r3, [r2, #12]
 800ad60:	f043 0310 	orr.w	r3, r3, #16
 800ad64:	e006      	b.n	800ad74 <HAL_TIM_OC_Start_IT+0x74>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800ad66:	2302      	movs	r3, #2
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800ad68:	6802      	ldr	r2, [r0, #0]
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800ad6a:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800ad6e:	68d3      	ldr	r3, [r2, #12]
 800ad70:	f043 0302 	orr.w	r3, r3, #2
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800ad74:	60d3      	str	r3, [r2, #12]
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800ad76:	2201      	movs	r2, #1
 800ad78:	6820      	ldr	r0, [r4, #0]
 800ad7a:	f7ff ff4d 	bl	800ac18 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800ad7e:	6823      	ldr	r3, [r4, #0]
 800ad80:	4a19      	ldr	r2, [pc, #100]	; (800ade8 <HAL_TIM_OC_Start_IT+0xe8>)
 800ad82:	4293      	cmp	r3, r2
 800ad84:	d00c      	beq.n	800ada0 <HAL_TIM_OC_Start_IT+0xa0>
 800ad86:	4919      	ldr	r1, [pc, #100]	; (800adec <HAL_TIM_OC_Start_IT+0xec>)
 800ad88:	428b      	cmp	r3, r1
 800ad8a:	d009      	beq.n	800ada0 <HAL_TIM_OC_Start_IT+0xa0>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ad8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ad90:	d10d      	bne.n	800adae <HAL_TIM_OC_Start_IT+0xae>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ad92:	689a      	ldr	r2, [r3, #8]
 800ad94:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ad98:	2a06      	cmp	r2, #6
 800ad9a:	d11f      	bne.n	800addc <HAL_TIM_OC_Start_IT+0xdc>
  return HAL_OK;
 800ad9c:	2000      	movs	r0, #0
}
 800ad9e:	bd10      	pop	{r4, pc}
    __HAL_TIM_MOE_ENABLE(htim);
 800ada0:	6c59      	ldr	r1, [r3, #68]	; 0x44
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ada2:	4293      	cmp	r3, r2
    __HAL_TIM_MOE_ENABLE(htim);
 800ada4:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 800ada8:	6459      	str	r1, [r3, #68]	; 0x44
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800adaa:	d0f2      	beq.n	800ad92 <HAL_TIM_OC_Start_IT+0x92>
 800adac:	e7ee      	b.n	800ad8c <HAL_TIM_OC_Start_IT+0x8c>
 800adae:	4a10      	ldr	r2, [pc, #64]	; (800adf0 <HAL_TIM_OC_Start_IT+0xf0>)
 800adb0:	4293      	cmp	r3, r2
 800adb2:	d0ee      	beq.n	800ad92 <HAL_TIM_OC_Start_IT+0x92>
 800adb4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800adb8:	4293      	cmp	r3, r2
 800adba:	d0ea      	beq.n	800ad92 <HAL_TIM_OC_Start_IT+0x92>
 800adbc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800adc0:	4293      	cmp	r3, r2
 800adc2:	d0e6      	beq.n	800ad92 <HAL_TIM_OC_Start_IT+0x92>
 800adc4:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800adc8:	4293      	cmp	r3, r2
 800adca:	d0e2      	beq.n	800ad92 <HAL_TIM_OC_Start_IT+0x92>
 800adcc:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 800add0:	4293      	cmp	r3, r2
 800add2:	d0de      	beq.n	800ad92 <HAL_TIM_OC_Start_IT+0x92>
 800add4:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800add8:	4293      	cmp	r3, r2
 800adda:	d0da      	beq.n	800ad92 <HAL_TIM_OC_Start_IT+0x92>
    __HAL_TIM_ENABLE(htim);
 800addc:	681a      	ldr	r2, [r3, #0]
 800adde:	f042 0201 	orr.w	r2, r2, #1
 800ade2:	601a      	str	r2, [r3, #0]
 800ade4:	e7da      	b.n	800ad9c <HAL_TIM_OC_Start_IT+0x9c>
 800ade6:	bf00      	nop
 800ade8:	40010000 	.word	0x40010000
 800adec:	40010400 	.word	0x40010400
 800adf0:	40000400 	.word	0x40000400

0800adf4 <HAL_TIM_OC_Stop_IT>:
  switch (Channel)
 800adf4:	2908      	cmp	r1, #8
{
 800adf6:	b538      	push	{r3, r4, r5, lr}
 800adf8:	4605      	mov	r5, r0
 800adfa:	460c      	mov	r4, r1
 800adfc:	6800      	ldr	r0, [r0, #0]
  switch (Channel)
 800adfe:	d041      	beq.n	800ae84 <HAL_TIM_OC_Stop_IT+0x90>
 800ae00:	d831      	bhi.n	800ae66 <HAL_TIM_OC_Stop_IT+0x72>
 800ae02:	2900      	cmp	r1, #0
 800ae04:	d035      	beq.n	800ae72 <HAL_TIM_OC_Stop_IT+0x7e>
 800ae06:	2904      	cmp	r1, #4
 800ae08:	d038      	beq.n	800ae7c <HAL_TIM_OC_Stop_IT+0x88>
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800ae0a:	2200      	movs	r2, #0
 800ae0c:	4621      	mov	r1, r4
 800ae0e:	f7ff ff03 	bl	800ac18 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800ae12:	682b      	ldr	r3, [r5, #0]
 800ae14:	4a23      	ldr	r2, [pc, #140]	; (800aea4 <HAL_TIM_OC_Stop_IT+0xb0>)
 800ae16:	4293      	cmp	r3, r2
 800ae18:	d003      	beq.n	800ae22 <HAL_TIM_OC_Stop_IT+0x2e>
 800ae1a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800ae1e:	4293      	cmp	r3, r2
 800ae20:	d10d      	bne.n	800ae3e <HAL_TIM_OC_Stop_IT+0x4a>
    __HAL_TIM_MOE_DISABLE(htim);
 800ae22:	6a19      	ldr	r1, [r3, #32]
 800ae24:	f241 1211 	movw	r2, #4369	; 0x1111
 800ae28:	4211      	tst	r1, r2
 800ae2a:	d108      	bne.n	800ae3e <HAL_TIM_OC_Stop_IT+0x4a>
 800ae2c:	6a19      	ldr	r1, [r3, #32]
 800ae2e:	f240 4244 	movw	r2, #1092	; 0x444
 800ae32:	4211      	tst	r1, r2
 800ae34:	bf02      	ittt	eq
 800ae36:	6c5a      	ldreq	r2, [r3, #68]	; 0x44
 800ae38:	f422 4200 	biceq.w	r2, r2, #32768	; 0x8000
 800ae3c:	645a      	streq	r2, [r3, #68]	; 0x44
  __HAL_TIM_DISABLE(htim);
 800ae3e:	6a19      	ldr	r1, [r3, #32]
 800ae40:	f241 1211 	movw	r2, #4369	; 0x1111
 800ae44:	4211      	tst	r1, r2
 800ae46:	d108      	bne.n	800ae5a <HAL_TIM_OC_Stop_IT+0x66>
 800ae48:	6a19      	ldr	r1, [r3, #32]
 800ae4a:	f240 4244 	movw	r2, #1092	; 0x444
 800ae4e:	4211      	tst	r1, r2
 800ae50:	bf02      	ittt	eq
 800ae52:	681a      	ldreq	r2, [r3, #0]
 800ae54:	f022 0201 	biceq.w	r2, r2, #1
 800ae58:	601a      	streq	r2, [r3, #0]
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800ae5a:	2301      	movs	r3, #1
 800ae5c:	b9b4      	cbnz	r4, 800ae8c <HAL_TIM_OC_Stop_IT+0x98>
 800ae5e:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
}
 800ae62:	2000      	movs	r0, #0
 800ae64:	bd38      	pop	{r3, r4, r5, pc}
  switch (Channel)
 800ae66:	290c      	cmp	r1, #12
 800ae68:	d1cf      	bne.n	800ae0a <HAL_TIM_OC_Stop_IT+0x16>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800ae6a:	68c3      	ldr	r3, [r0, #12]
 800ae6c:	f023 0310 	bic.w	r3, r3, #16
 800ae70:	e002      	b.n	800ae78 <HAL_TIM_OC_Stop_IT+0x84>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800ae72:	68c3      	ldr	r3, [r0, #12]
 800ae74:	f023 0302 	bic.w	r3, r3, #2
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800ae78:	60c3      	str	r3, [r0, #12]
      break;
 800ae7a:	e7c6      	b.n	800ae0a <HAL_TIM_OC_Stop_IT+0x16>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800ae7c:	68c3      	ldr	r3, [r0, #12]
 800ae7e:	f023 0304 	bic.w	r3, r3, #4
 800ae82:	e7f9      	b.n	800ae78 <HAL_TIM_OC_Stop_IT+0x84>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800ae84:	68c3      	ldr	r3, [r0, #12]
 800ae86:	f023 0308 	bic.w	r3, r3, #8
 800ae8a:	e7f5      	b.n	800ae78 <HAL_TIM_OC_Stop_IT+0x84>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800ae8c:	2c04      	cmp	r4, #4
 800ae8e:	d102      	bne.n	800ae96 <HAL_TIM_OC_Stop_IT+0xa2>
 800ae90:	f885 303f 	strb.w	r3, [r5, #63]	; 0x3f
 800ae94:	e7e5      	b.n	800ae62 <HAL_TIM_OC_Stop_IT+0x6e>
 800ae96:	2c08      	cmp	r4, #8
 800ae98:	bf0c      	ite	eq
 800ae9a:	f885 3040 	strbeq.w	r3, [r5, #64]	; 0x40
 800ae9e:	f885 3041 	strbne.w	r3, [r5, #65]	; 0x41
 800aea2:	e7de      	b.n	800ae62 <HAL_TIM_OC_Stop_IT+0x6e>
 800aea4:	40010000 	.word	0x40010000

0800aea8 <HAL_TIM_IC_Start>:
{
 800aea8:	b510      	push	{r4, lr}
 800aeaa:	4604      	mov	r4, r0
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800aeac:	2900      	cmp	r1, #0
 800aeae:	d13e      	bne.n	800af2e <HAL_TIM_IC_Start+0x86>
 800aeb0:	f890 003e 	ldrb.w	r0, [r0, #62]	; 0x3e
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800aeb4:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800aeb8:	b2c0      	uxtb	r0, r0
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800aeba:	2801      	cmp	r0, #1
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800aebc:	b2db      	uxtb	r3, r3
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800aebe:	d15e      	bne.n	800af7e <HAL_TIM_IC_Start+0xd6>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800aec0:	2b01      	cmp	r3, #1
 800aec2:	d15d      	bne.n	800af80 <HAL_TIM_IC_Start+0xd8>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800aec4:	2302      	movs	r3, #2
 800aec6:	2900      	cmp	r1, #0
 800aec8:	d147      	bne.n	800af5a <HAL_TIM_IC_Start+0xb2>
 800aeca:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800aece:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800aed2:	2201      	movs	r2, #1
 800aed4:	6820      	ldr	r0, [r4, #0]
 800aed6:	f7ff fe9f 	bl	800ac18 <TIM_CCxChannelCmd>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800aeda:	6823      	ldr	r3, [r4, #0]
 800aedc:	4a29      	ldr	r2, [pc, #164]	; (800af84 <HAL_TIM_IC_Start+0xdc>)
 800aede:	4293      	cmp	r3, r2
 800aee0:	d01a      	beq.n	800af18 <HAL_TIM_IC_Start+0x70>
 800aee2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aee6:	d017      	beq.n	800af18 <HAL_TIM_IC_Start+0x70>
 800aee8:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800aeec:	4293      	cmp	r3, r2
 800aeee:	d013      	beq.n	800af18 <HAL_TIM_IC_Start+0x70>
 800aef0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800aef4:	4293      	cmp	r3, r2
 800aef6:	d00f      	beq.n	800af18 <HAL_TIM_IC_Start+0x70>
 800aef8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800aefc:	4293      	cmp	r3, r2
 800aefe:	d00b      	beq.n	800af18 <HAL_TIM_IC_Start+0x70>
 800af00:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800af04:	4293      	cmp	r3, r2
 800af06:	d007      	beq.n	800af18 <HAL_TIM_IC_Start+0x70>
 800af08:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 800af0c:	4293      	cmp	r3, r2
 800af0e:	d003      	beq.n	800af18 <HAL_TIM_IC_Start+0x70>
 800af10:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800af14:	4293      	cmp	r3, r2
 800af16:	d104      	bne.n	800af22 <HAL_TIM_IC_Start+0x7a>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800af18:	689a      	ldr	r2, [r3, #8]
 800af1a:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800af1e:	2a06      	cmp	r2, #6
 800af20:	d003      	beq.n	800af2a <HAL_TIM_IC_Start+0x82>
    __HAL_TIM_ENABLE(htim);
 800af22:	681a      	ldr	r2, [r3, #0]
 800af24:	f042 0201 	orr.w	r2, r2, #1
 800af28:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800af2a:	2000      	movs	r0, #0
 800af2c:	e028      	b.n	800af80 <HAL_TIM_IC_Start+0xd8>
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800af2e:	2904      	cmp	r1, #4
 800af30:	d105      	bne.n	800af3e <HAL_TIM_IC_Start+0x96>
 800af32:	f890 003f 	ldrb.w	r0, [r0, #63]	; 0x3f
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800af36:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800af3a:	b2c0      	uxtb	r0, r0
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800af3c:	e7bd      	b.n	800aeba <HAL_TIM_IC_Start+0x12>
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800af3e:	2908      	cmp	r1, #8
 800af40:	bf0b      	itete	eq
 800af42:	f890 0040 	ldrbeq.w	r0, [r0, #64]	; 0x40
 800af46:	f894 0041 	ldrbne.w	r0, [r4, #65]	; 0x41
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800af4a:	f894 3044 	ldrbeq.w	r3, [r4, #68]	; 0x44
 800af4e:	f894 3045 	ldrbne.w	r3, [r4, #69]	; 0x45
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800af52:	bf0c      	ite	eq
 800af54:	b2c0      	uxtbeq	r0, r0
 800af56:	b2c0      	uxtbne	r0, r0
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800af58:	e7af      	b.n	800aeba <HAL_TIM_IC_Start+0x12>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800af5a:	2904      	cmp	r1, #4
 800af5c:	d104      	bne.n	800af68 <HAL_TIM_IC_Start+0xc0>
 800af5e:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800af62:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800af66:	e7b4      	b.n	800aed2 <HAL_TIM_IC_Start+0x2a>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800af68:	2908      	cmp	r1, #8
 800af6a:	bf0b      	itete	eq
 800af6c:	f884 3040 	strbeq.w	r3, [r4, #64]	; 0x40
 800af70:	f884 3041 	strbne.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800af74:	f884 3044 	strbeq.w	r3, [r4, #68]	; 0x44
 800af78:	f884 3045 	strbne.w	r3, [r4, #69]	; 0x45
 800af7c:	e7a9      	b.n	800aed2 <HAL_TIM_IC_Start+0x2a>
    return HAL_ERROR;
 800af7e:	2001      	movs	r0, #1
}
 800af80:	bd10      	pop	{r4, pc}
 800af82:	bf00      	nop
 800af84:	40010000 	.word	0x40010000

0800af88 <HAL_TIMEx_CommutCallback>:
 800af88:	4770      	bx	lr

0800af8a <HAL_TIMEx_BreakCallback>:
 800af8a:	4770      	bx	lr

0800af8c <UART_SetConfig>:
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800af8c:	6802      	ldr	r2, [r0, #0]
 800af8e:	68c1      	ldr	r1, [r0, #12]
{
 800af90:	b538      	push	{r3, r4, r5, lr}
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800af92:	6913      	ldr	r3, [r2, #16]
 800af94:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800af98:	430b      	orrs	r3, r1
 800af9a:	6113      	str	r3, [r2, #16]
{
 800af9c:	4605      	mov	r5, r0
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800af9e:	6883      	ldr	r3, [r0, #8]
 800afa0:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 800afa2:	68d1      	ldr	r1, [r2, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800afa4:	4303      	orrs	r3, r0
 800afa6:	6968      	ldr	r0, [r5, #20]
 800afa8:	4303      	orrs	r3, r0
 800afaa:	69e8      	ldr	r0, [r5, #28]
  MODIFY_REG(huart->Instance->CR1,
 800afac:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
 800afb0:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800afb4:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1,
 800afb6:	430b      	orrs	r3, r1
 800afb8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800afba:	6953      	ldr	r3, [r2, #20]
 800afbc:	69a9      	ldr	r1, [r5, #24]
 800afbe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800afc2:	430b      	orrs	r3, r1
 800afc4:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800afc6:	4b1f      	ldr	r3, [pc, #124]	; (800b044 <UART_SetConfig+0xb8>)
 800afc8:	429a      	cmp	r2, r3
 800afca:	d003      	beq.n	800afd4 <UART_SetConfig+0x48>
 800afcc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800afd0:	429a      	cmp	r2, r3
 800afd2:	d124      	bne.n	800b01e <UART_SetConfig+0x92>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800afd4:	f7fe f83e 	bl	8009054 <HAL_RCC_GetPCLK2Freq>
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800afd8:	69ea      	ldr	r2, [r5, #28]
 800afda:	2319      	movs	r3, #25
 800afdc:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800afe0:	fba0 0103 	umull	r0, r1, r0, r3
 800afe4:	e9d5 4300 	ldrd	r4, r3, [r5]
 800afe8:	d11c      	bne.n	800b024 <UART_SetConfig+0x98>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800afea:	461a      	mov	r2, r3
 800afec:	1892      	adds	r2, r2, r2
 800afee:	f04f 0300 	mov.w	r3, #0
 800aff2:	415b      	adcs	r3, r3
 800aff4:	f7f9 fed8 	bl	8004da8 <__aeabi_uldivmod>
 800aff8:	2164      	movs	r1, #100	; 0x64
 800affa:	fbb0 f5f1 	udiv	r5, r0, r1
 800affe:	fb01 0315 	mls	r3, r1, r5, r0
 800b002:	00db      	lsls	r3, r3, #3
 800b004:	3332      	adds	r3, #50	; 0x32
 800b006:	fbb3 f3f1 	udiv	r3, r3, r1
 800b00a:	f003 0207 	and.w	r2, r3, #7
 800b00e:	005b      	lsls	r3, r3, #1
 800b010:	eb02 1205 	add.w	r2, r2, r5, lsl #4
 800b014:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800b018:	4413      	add	r3, r2
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800b01a:	60a3      	str	r3, [r4, #8]
  }
}
 800b01c:	bd38      	pop	{r3, r4, r5, pc}
      pclk = HAL_RCC_GetPCLK1Freq();
 800b01e:	f7fe f809 	bl	8009034 <HAL_RCC_GetPCLK1Freq>
 800b022:	e7d9      	b.n	800afd8 <UART_SetConfig+0x4c>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800b024:	009a      	lsls	r2, r3, #2
 800b026:	0f9b      	lsrs	r3, r3, #30
 800b028:	f7f9 febe 	bl	8004da8 <__aeabi_uldivmod>
 800b02c:	2264      	movs	r2, #100	; 0x64
 800b02e:	fbb0 f1f2 	udiv	r1, r0, r2
 800b032:	fb02 0311 	mls	r3, r2, r1, r0
 800b036:	011b      	lsls	r3, r3, #4
 800b038:	3332      	adds	r3, #50	; 0x32
 800b03a:	fbb3 f3f2 	udiv	r3, r3, r2
 800b03e:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 800b042:	e7ea      	b.n	800b01a <UART_SetConfig+0x8e>
 800b044:	40011000 	.word	0x40011000

0800b048 <UART_WaitOnFlagUntilTimeout.constprop.0>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 800b048:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b04a:	4604      	mov	r4, r0
 800b04c:	460e      	mov	r6, r1
 800b04e:	4617      	mov	r7, r2
 800b050:	461d      	mov	r5, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b052:	6822      	ldr	r2, [r4, #0]
 800b054:	6813      	ldr	r3, [r2, #0]
 800b056:	ea36 0303 	bics.w	r3, r6, r3
 800b05a:	d101      	bne.n	800b060 <UART_WaitOnFlagUntilTimeout.constprop.0+0x18>
  return HAL_OK;
 800b05c:	2000      	movs	r0, #0
 800b05e:	e014      	b.n	800b08a <UART_WaitOnFlagUntilTimeout.constprop.0+0x42>
    if (Timeout != HAL_MAX_DELAY)
 800b060:	1c6b      	adds	r3, r5, #1
 800b062:	d0f7      	beq.n	800b054 <UART_WaitOnFlagUntilTimeout.constprop.0+0xc>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800b064:	b995      	cbnz	r5, 800b08c <UART_WaitOnFlagUntilTimeout.constprop.0+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b066:	6823      	ldr	r3, [r4, #0]
 800b068:	68da      	ldr	r2, [r3, #12]
 800b06a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800b06e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b070:	695a      	ldr	r2, [r3, #20]
 800b072:	f022 0201 	bic.w	r2, r2, #1
 800b076:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 800b078:	2320      	movs	r3, #32
 800b07a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800b07e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        __HAL_UNLOCK(huart);
 800b082:	2300      	movs	r3, #0
 800b084:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 800b088:	2003      	movs	r0, #3
}
 800b08a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800b08c:	f7fc fa7e 	bl	800758c <HAL_GetTick>
 800b090:	1bc0      	subs	r0, r0, r7
 800b092:	4285      	cmp	r5, r0
 800b094:	d2dd      	bcs.n	800b052 <UART_WaitOnFlagUntilTimeout.constprop.0+0xa>
 800b096:	e7e6      	b.n	800b066 <UART_WaitOnFlagUntilTimeout.constprop.0+0x1e>

0800b098 <HAL_UART_MspInit>:
}
 800b098:	4770      	bx	lr

0800b09a <HAL_UART_Init>:
{
 800b09a:	b510      	push	{r4, lr}
  if (huart == NULL)
 800b09c:	4604      	mov	r4, r0
 800b09e:	b340      	cbz	r0, 800b0f2 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 800b0a0:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800b0a4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800b0a8:	b91b      	cbnz	r3, 800b0b2 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 800b0aa:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_UART_MspInit(huart);
 800b0ae:	f7ff fff3 	bl	800b098 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 800b0b2:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800b0b4:	2324      	movs	r3, #36	; 0x24
 800b0b6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UART_DISABLE(huart);
 800b0ba:	68d3      	ldr	r3, [r2, #12]
 800b0bc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b0c0:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 800b0c2:	4620      	mov	r0, r4
 800b0c4:	f7ff ff62 	bl	800af8c <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b0c8:	6823      	ldr	r3, [r4, #0]
 800b0ca:	691a      	ldr	r2, [r3, #16]
 800b0cc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b0d0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b0d2:	695a      	ldr	r2, [r3, #20]
 800b0d4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b0d8:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 800b0da:	68da      	ldr	r2, [r3, #12]
 800b0dc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b0e0:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b0e2:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 800b0e4:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b0e6:	6420      	str	r0, [r4, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800b0e8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800b0ec:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
}
 800b0f0:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800b0f2:	2001      	movs	r0, #1
 800b0f4:	e7fc      	b.n	800b0f0 <HAL_UART_Init+0x56>

0800b0f6 <HAL_UART_Transmit>:
{
 800b0f6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b0f8:	4617      	mov	r7, r2
  if (huart->gState == HAL_UART_STATE_READY)
 800b0fa:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
{
 800b0fe:	9300      	str	r3, [sp, #0]
  if (huart->gState == HAL_UART_STATE_READY)
 800b100:	2a20      	cmp	r2, #32
{
 800b102:	4604      	mov	r4, r0
 800b104:	460e      	mov	r6, r1
  if (huart->gState == HAL_UART_STATE_READY)
 800b106:	d149      	bne.n	800b19c <HAL_UART_Transmit+0xa6>
    if ((pData == NULL) || (Size == 0U))
 800b108:	2900      	cmp	r1, #0
 800b10a:	d045      	beq.n	800b198 <HAL_UART_Transmit+0xa2>
 800b10c:	2f00      	cmp	r7, #0
 800b10e:	d043      	beq.n	800b198 <HAL_UART_Transmit+0xa2>
    __HAL_LOCK(huart);
 800b110:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
 800b114:	2a01      	cmp	r2, #1
 800b116:	d041      	beq.n	800b19c <HAL_UART_Transmit+0xa6>
 800b118:	2201      	movs	r2, #1
 800b11a:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b11e:	2500      	movs	r5, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b120:	2221      	movs	r2, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b122:	6405      	str	r5, [r0, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b124:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
    tickstart = HAL_GetTick();
 800b128:	f7fc fa30 	bl	800758c <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b12c:	68a1      	ldr	r1, [r4, #8]
 800b12e:	9b00      	ldr	r3, [sp, #0]
    huart->TxXferSize = Size;
 800b130:	84a7      	strh	r7, [r4, #36]	; 0x24
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b132:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
    tickstart = HAL_GetTick();
 800b136:	4602      	mov	r2, r0
    huart->TxXferCount = Size;
 800b138:	84e7      	strh	r7, [r4, #38]	; 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b13a:	d103      	bne.n	800b144 <HAL_UART_Transmit+0x4e>
 800b13c:	6921      	ldr	r1, [r4, #16]
 800b13e:	b909      	cbnz	r1, 800b144 <HAL_UART_Transmit+0x4e>
 800b140:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 800b142:	460e      	mov	r6, r1
    __HAL_UNLOCK(huart);
 800b144:	2100      	movs	r1, #0
 800b146:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
    while (huart->TxXferCount > 0U)
 800b14a:	8ce1      	ldrh	r1, [r4, #38]	; 0x26
 800b14c:	b289      	uxth	r1, r1
 800b14e:	b941      	cbnz	r1, 800b162 <HAL_UART_Transmit+0x6c>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b150:	2140      	movs	r1, #64	; 0x40
 800b152:	4620      	mov	r0, r4
 800b154:	f7ff ff78 	bl	800b048 <UART_WaitOnFlagUntilTimeout.constprop.0>
 800b158:	b960      	cbnz	r0, 800b174 <HAL_UART_Transmit+0x7e>
    huart->gState = HAL_UART_STATE_READY;
 800b15a:	2320      	movs	r3, #32
 800b15c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    return HAL_OK;
 800b160:	e009      	b.n	800b176 <HAL_UART_Transmit+0x80>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b162:	2180      	movs	r1, #128	; 0x80
 800b164:	4620      	mov	r0, r4
 800b166:	e9cd 2300 	strd	r2, r3, [sp]
 800b16a:	f7ff ff6d 	bl	800b048 <UART_WaitOnFlagUntilTimeout.constprop.0>
 800b16e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b172:	b110      	cbz	r0, 800b17a <HAL_UART_Transmit+0x84>
        return HAL_TIMEOUT;
 800b174:	2003      	movs	r0, #3
}
 800b176:	b003      	add	sp, #12
 800b178:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (pdata8bits == NULL)
 800b17a:	6820      	ldr	r0, [r4, #0]
 800b17c:	b94e      	cbnz	r6, 800b192 <HAL_UART_Transmit+0x9c>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800b17e:	f835 1b02 	ldrh.w	r1, [r5], #2
 800b182:	f3c1 0108 	ubfx	r1, r1, #0, #9
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800b186:	6041      	str	r1, [r0, #4]
      huart->TxXferCount--;
 800b188:	8ce1      	ldrh	r1, [r4, #38]	; 0x26
 800b18a:	3901      	subs	r1, #1
 800b18c:	b289      	uxth	r1, r1
 800b18e:	84e1      	strh	r1, [r4, #38]	; 0x26
 800b190:	e7db      	b.n	800b14a <HAL_UART_Transmit+0x54>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800b192:	f816 1b01 	ldrb.w	r1, [r6], #1
 800b196:	e7f6      	b.n	800b186 <HAL_UART_Transmit+0x90>
      return  HAL_ERROR;
 800b198:	2001      	movs	r0, #1
 800b19a:	e7ec      	b.n	800b176 <HAL_UART_Transmit+0x80>
    return HAL_BUSY;
 800b19c:	2002      	movs	r0, #2
 800b19e:	e7ea      	b.n	800b176 <HAL_UART_Transmit+0x80>

0800b1a0 <hci_disconnection_complete_event_process>:
 * @param Reason Reason for disconnection. See Error Codes.
 * @retval None
 */

tBleStatus hci_disconnection_complete_event_process(uint8_t *buffer_in)
{
 800b1a0:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  hci_disconnection_complete_event_rp0 *rp0 = (hci_disconnection_complete_event_rp0 *)buffer_in;
  hci_disconnection_complete_event(rp0->Status,
 800b1a2:	f8b0 1001 	ldrh.w	r1, [r0, #1]
 800b1a6:	78c2      	ldrb	r2, [r0, #3]
 800b1a8:	7800      	ldrb	r0, [r0, #0]
 800b1aa:	f003 fea7 	bl	800eefc <hci_disconnection_complete_event>
                                   rp0->Connection_Handle,
                                   rp0->Reason);

  return status;
}
 800b1ae:	2000      	movs	r0, #0
 800b1b0:	bd08      	pop	{r3, pc}

0800b1b2 <hci_encryption_change_event_process>:
 *        - 0x01: Link Level Encryption is ON with AES-CCM
 * @retval None
 */

tBleStatus hci_encryption_change_event_process(uint8_t *buffer_in)
{
 800b1b2:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  hci_encryption_change_event_rp0 *rp0 = (hci_encryption_change_event_rp0 *)buffer_in;
  hci_encryption_change_event(rp0->Status,
 800b1b4:	f8b0 1001 	ldrh.w	r1, [r0, #1]
 800b1b8:	78c2      	ldrb	r2, [r0, #3]
 800b1ba:	7800      	ldrb	r0, [r0, #0]
 800b1bc:	f003 ffe3 	bl	800f186 <hci_encryption_change_event>
                              rp0->Connection_Handle,
                              rp0->Encryption_Enabled);

  return status;
}
 800b1c0:	2000      	movs	r0, #0
 800b1c2:	bd08      	pop	{r3, pc}

0800b1c4 <hci_read_remote_version_information_complete_event_process>:
 * @param Subversion Subversion of the LMP in the remote Controller
 * @retval None
 */

tBleStatus hci_read_remote_version_information_complete_event_process(uint8_t *buffer_in)
{
 800b1c4:	b507      	push	{r0, r1, r2, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  hci_read_remote_version_information_complete_event_rp0 *rp0 = (hci_read_remote_version_information_complete_event_rp0 *)buffer_in;
  hci_read_remote_version_information_complete_event(rp0->Status,
 800b1c6:	88c3      	ldrh	r3, [r0, #6]
 800b1c8:	9300      	str	r3, [sp, #0]
 800b1ca:	8883      	ldrh	r3, [r0, #4]
 800b1cc:	78c2      	ldrb	r2, [r0, #3]
 800b1ce:	f8b0 1001 	ldrh.w	r1, [r0, #1]
 800b1d2:	7800      	ldrb	r0, [r0, #0]
 800b1d4:	f000 fac6 	bl	800b764 <hci_read_remote_version_information_complete_event>
                                                     rp0->Version,
                                                     rp0->Manufacturer_Name,
                                                     rp0->Subversion);

  return status;
}
 800b1d8:	2000      	movs	r0, #0
 800b1da:	b003      	add	sp, #12
 800b1dc:	f85d fb04 	ldr.w	pc, [sp], #4

0800b1e0 <hci_hardware_error_event_process>:
 *        - 0x03: Internal queue overflow error
 * @retval None
 */

tBleStatus hci_hardware_error_event_process(uint8_t *buffer_in)
{
 800b1e0:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  hci_hardware_error_event_rp0 *rp0 = (hci_hardware_error_event_rp0 *)buffer_in;
  hci_hardware_error_event(rp0->Hardware_Code);
 800b1e2:	7800      	ldrb	r0, [r0, #0]
 800b1e4:	f003 ff72 	bl	800f0cc <hci_hardware_error_event>

  return status;
}
 800b1e8:	2000      	movs	r0, #0
 800b1ea:	bd08      	pop	{r3, pc}

0800b1ec <hci_number_of_completed_packets_event_process>:
 * @param Handle_Packets_Pair_Entry See @ref Handle_Packets_Pair_Entry_t
 * @retval None
 */

tBleStatus hci_number_of_completed_packets_event_process(uint8_t *buffer_in)
{
 800b1ec:	b570      	push	{r4, r5, r6, lr}
 800b1ee:	b0a0      	sub	sp, #128	; 0x80
 800b1f0:	466b      	mov	r3, sp
  /* Input params */
  hci_number_of_completed_packets_event_rp0 *rp0 = (hci_number_of_completed_packets_event_rp0 *)buffer_in;
  uint8_t size = 1;
  int i;
  Handle_Packets_Pair_Entry_t Handle_Packets_Pair_Entry[HCI_MAX_PAYLOAD_SIZE/sizeof(Handle_Packets_Pair_Entry_t)];
  for (i = 0; i < rp0->Number_of_Handles; i++) {
 800b1f2:	7804      	ldrb	r4, [r0, #0]
 800b1f4:	2200      	movs	r2, #0
 800b1f6:	4619      	mov	r1, r3
 800b1f8:	4294      	cmp	r4, r2
 800b1fa:	f103 0304 	add.w	r3, r3, #4
 800b1fe:	dc05      	bgt.n	800b20c <hci_number_of_completed_packets_event_process+0x20>
    Handle_Packets_Pair_Entry[i].Connection_Handle = rp0->Handle_Packets_Pair_Entry[i].Connection_Handle;
    size += 2;
    Handle_Packets_Pair_Entry[i].HC_Num_Of_Completed_Packets = rp0->Handle_Packets_Pair_Entry[i].HC_Num_Of_Completed_Packets;
    size += 2;
  }
  hci_number_of_completed_packets_event(rp0->Number_of_Handles,
 800b200:	4620      	mov	r0, r4
 800b202:	f000 fab0 	bl	800b766 <hci_number_of_completed_packets_event>
                                        Handle_Packets_Pair_Entry);

  return status;
}
 800b206:	2000      	movs	r0, #0
 800b208:	b020      	add	sp, #128	; 0x80
 800b20a:	bd70      	pop	{r4, r5, r6, pc}
    Handle_Packets_Pair_Entry[i].Connection_Handle = rp0->Handle_Packets_Pair_Entry[i].Connection_Handle;
 800b20c:	eb00 0582 	add.w	r5, r0, r2, lsl #2
  for (i = 0; i < rp0->Number_of_Handles; i++) {
 800b210:	3201      	adds	r2, #1
    Handle_Packets_Pair_Entry[i].Connection_Handle = rp0->Handle_Packets_Pair_Entry[i].Connection_Handle;
 800b212:	f8b5 6001 	ldrh.w	r6, [r5, #1]
    Handle_Packets_Pair_Entry[i].HC_Num_Of_Completed_Packets = rp0->Handle_Packets_Pair_Entry[i].HC_Num_Of_Completed_Packets;
 800b216:	f8b5 5003 	ldrh.w	r5, [r5, #3]
    Handle_Packets_Pair_Entry[i].Connection_Handle = rp0->Handle_Packets_Pair_Entry[i].Connection_Handle;
 800b21a:	f823 6c04 	strh.w	r6, [r3, #-4]
    Handle_Packets_Pair_Entry[i].HC_Num_Of_Completed_Packets = rp0->Handle_Packets_Pair_Entry[i].HC_Num_Of_Completed_Packets;
 800b21e:	f823 5c02 	strh.w	r5, [r3, #-2]
  for (i = 0; i < rp0->Number_of_Handles; i++) {
 800b222:	e7e9      	b.n	800b1f8 <hci_number_of_completed_packets_event_process+0xc>

0800b224 <hci_data_buffer_overflow_event_process>:
 *        - 0x01: ACL Buffer Overflow
 * @retval None
 */

tBleStatus hci_data_buffer_overflow_event_process(uint8_t *buffer_in)
{
 800b224:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  hci_data_buffer_overflow_event_rp0 *rp0 = (hci_data_buffer_overflow_event_rp0 *)buffer_in;
  hci_data_buffer_overflow_event(rp0->Link_Type);
 800b226:	7800      	ldrb	r0, [r0, #0]
 800b228:	f000 fa9e 	bl	800b768 <hci_data_buffer_overflow_event>

  return status;
}
 800b22c:	2000      	movs	r0, #0
 800b22e:	bd08      	pop	{r3, pc}

0800b230 <hci_encryption_key_refresh_complete_event_process>:
 *        - 0x0000 ... 0x0EFF
 * @retval None
 */

tBleStatus hci_encryption_key_refresh_complete_event_process(uint8_t *buffer_in)
{
 800b230:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  hci_encryption_key_refresh_complete_event_rp0 *rp0 = (hci_encryption_key_refresh_complete_event_rp0 *)buffer_in;
  hci_encryption_key_refresh_complete_event(rp0->Status,
 800b232:	f8b0 1001 	ldrh.w	r1, [r0, #1]
 800b236:	7800      	ldrb	r0, [r0, #0]
 800b238:	f000 fa97 	bl	800b76a <hci_encryption_key_refresh_complete_event>
                                            rp0->Connection_Handle);

  return status;
}
 800b23c:	2000      	movs	r0, #0
 800b23e:	bd08      	pop	{r3, pc}

0800b240 <aci_blue_initialized_event_process>:
 *        - 0x09: System reset due to ECC error
 * @retval None
 */

tBleStatus aci_blue_initialized_event_process(uint8_t *buffer_in)
{
 800b240:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  aci_blue_initialized_event_rp0 *rp0 = (aci_blue_initialized_event_rp0 *)buffer_in;
  aci_blue_initialized_event(rp0->Reason_Code);
 800b242:	7800      	ldrb	r0, [r0, #0]
 800b244:	f000 fab3 	bl	800b7ae <aci_blue_initialized_event>

  return status;
}
 800b248:	2000      	movs	r0, #0
 800b24a:	bd08      	pop	{r3, pc}

0800b24c <aci_blue_events_lost_event_process>:
 *        - 0x0080000000000000: ACI_GAP_KEYPRESS_NOTIFICATION_EVENT
 * @retval None
 */

tBleStatus aci_blue_events_lost_event_process(uint8_t *buffer_in)
{
 800b24c:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  aci_blue_events_lost_event_rp0 *rp0 = (aci_blue_events_lost_event_rp0 *)buffer_in;
  aci_blue_events_lost_event(rp0->Lost_Events);
 800b24e:	f000 faaf 	bl	800b7b0 <aci_blue_events_lost_event>

  return status;
}
 800b252:	2000      	movs	r0, #0
 800b254:	bd08      	pop	{r3, pc}

0800b256 <aci_blue_crash_info_event_process>:
 * @param Debug_Data Debug data
 * @retval None
 */

tBleStatus aci_blue_crash_info_event_process(uint8_t *buffer_in)
{
 800b256:	b500      	push	{lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  aci_blue_crash_info_event_rp0 *rp0 = (aci_blue_crash_info_event_rp0 *)buffer_in;
  aci_blue_crash_info_event(rp0->Crash_Type,
 800b258:	4603      	mov	r3, r0
{
 800b25a:	b089      	sub	sp, #36	; 0x24
 800b25c:	4601      	mov	r1, r0
  aci_blue_crash_info_event(rp0->Crash_Type,
 800b25e:	f813 0b26 	ldrb.w	r0, [r3], #38
 800b262:	9307      	str	r3, [sp, #28]
 800b264:	f891 3025 	ldrb.w	r3, [r1, #37]	; 0x25
 800b268:	9306      	str	r3, [sp, #24]
 800b26a:	f8d1 3021 	ldr.w	r3, [r1, #33]	; 0x21
 800b26e:	9305      	str	r3, [sp, #20]
 800b270:	f8d1 301d 	ldr.w	r3, [r1, #29]
 800b274:	9304      	str	r3, [sp, #16]
 800b276:	f8d1 3019 	ldr.w	r3, [r1, #25]
 800b27a:	9303      	str	r3, [sp, #12]
 800b27c:	f8d1 3015 	ldr.w	r3, [r1, #21]
 800b280:	9302      	str	r3, [sp, #8]
 800b282:	f8d1 3011 	ldr.w	r3, [r1, #17]
 800b286:	9301      	str	r3, [sp, #4]
 800b288:	f8d1 300d 	ldr.w	r3, [r1, #13]
 800b28c:	9300      	str	r3, [sp, #0]
 800b28e:	f8d1 3009 	ldr.w	r3, [r1, #9]
 800b292:	f8d1 2005 	ldr.w	r2, [r1, #5]
 800b296:	f8d1 1001 	ldr.w	r1, [r1, #1]
 800b29a:	f000 fa8a 	bl	800b7b2 <aci_blue_crash_info_event>
                            rp0->xPSR,
                            rp0->Debug_Data_Length,
                            rp0->Debug_Data);

  return status;
}
 800b29e:	2000      	movs	r0, #0
 800b2a0:	b009      	add	sp, #36	; 0x24
 800b2a2:	f85d fb04 	ldr.w	pc, [sp], #4

0800b2a6 <aci_hal_end_of_radio_activity_event_process>:
 *        time units.
 * @retval None
 */

tBleStatus aci_hal_end_of_radio_activity_event_process(uint8_t *buffer_in)
{
 800b2a6:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  aci_hal_end_of_radio_activity_event_rp0 *rp0 = (aci_hal_end_of_radio_activity_event_rp0 *)buffer_in;
  aci_hal_end_of_radio_activity_event(rp0->Last_State,
 800b2a8:	f8d0 2002 	ldr.w	r2, [r0, #2]
 800b2ac:	7841      	ldrb	r1, [r0, #1]
 800b2ae:	7800      	ldrb	r0, [r0, #0]
 800b2b0:	f000 fa80 	bl	800b7b4 <aci_hal_end_of_radio_activity_event>
                                      rp0->Next_State,
                                      rp0->Next_State_SysTime);

  return status;
}
 800b2b4:	2000      	movs	r0, #0
 800b2b6:	bd08      	pop	{r3, pc}

0800b2b8 <aci_hal_scan_req_report_event_process>:
 *        peer device
 * @retval None
 */

tBleStatus aci_hal_scan_req_report_event_process(uint8_t *buffer_in)
{
 800b2b8:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  aci_hal_scan_req_report_event_rp0 *rp0 = (aci_hal_scan_req_report_event_rp0 *)buffer_in;
  aci_hal_scan_req_report_event(rp0->RSSI,
 800b2ba:	1c82      	adds	r2, r0, #2
 800b2bc:	7841      	ldrb	r1, [r0, #1]
 800b2be:	f990 0000 	ldrsb.w	r0, [r0]
 800b2c2:	f000 fa78 	bl	800b7b6 <aci_hal_scan_req_report_event>
                                rp0->Peer_Address_Type,
                                rp0->Peer_Address);

  return status;
}
 800b2c6:	2000      	movs	r0, #0
 800b2c8:	bd08      	pop	{r3, pc}

0800b2ca <aci_hal_fw_error_event_process>:
 *        the connection handle where the abnormal condition has occurred.
 * @retval None
 */

tBleStatus aci_hal_fw_error_event_process(uint8_t *buffer_in)
{
 800b2ca:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  aci_hal_fw_error_event_rp0 *rp0 = (aci_hal_fw_error_event_rp0 *)buffer_in;
  aci_hal_fw_error_event(rp0->FW_Error_Type,
 800b2cc:	1c82      	adds	r2, r0, #2
 800b2ce:	7841      	ldrb	r1, [r0, #1]
 800b2d0:	7800      	ldrb	r0, [r0, #0]
 800b2d2:	f000 fa71 	bl	800b7b8 <aci_hal_fw_error_event>
                         rp0->Data_Length,
                         rp0->Data);

  return status;
}
 800b2d6:	2000      	movs	r0, #0
 800b2d8:	bd08      	pop	{r3, pc}

0800b2da <aci_gap_limited_discoverable_event_process>:
 *        discoverable mode ends due to timeout. The timeout is 180 seconds.
 * @retval None
 */

tBleStatus aci_gap_limited_discoverable_event_process(uint8_t *buffer_in)
{
 800b2da:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  aci_gap_limited_discoverable_event();
 800b2dc:	f000 fa4d 	bl	800b77a <aci_gap_limited_discoverable_event>

  return status;
}
 800b2e0:	2000      	movs	r0, #0
 800b2e2:	bd08      	pop	{r3, pc}

0800b2e4 <aci_gap_pairing_complete_event_process>:
 *        - 0x0C: SMP_SC_NUMCOMPARISON_FAILED
 * @retval None
 */

tBleStatus aci_gap_pairing_complete_event_process(uint8_t *buffer_in)
{
 800b2e4:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  aci_gap_pairing_complete_event_rp0 *rp0 = (aci_gap_pairing_complete_event_rp0 *)buffer_in;
  aci_gap_pairing_complete_event(rp0->Connection_Handle,
 800b2e6:	78c2      	ldrb	r2, [r0, #3]
 800b2e8:	7881      	ldrb	r1, [r0, #2]
 800b2ea:	8800      	ldrh	r0, [r0, #0]
 800b2ec:	f003 ff02 	bl	800f0f4 <aci_gap_pairing_complete_event>
                                 rp0->Status,
                                 rp0->Reason);

  return status;
}
 800b2f0:	2000      	movs	r0, #0
 800b2f2:	bd08      	pop	{r3, pc}

0800b2f4 <aci_gap_pass_key_req_event_process>:
 *        requested.
 * @retval None
 */

tBleStatus aci_gap_pass_key_req_event_process(uint8_t *buffer_in)
{
 800b2f4:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  aci_gap_pass_key_req_event_rp0 *rp0 = (aci_gap_pass_key_req_event_rp0 *)buffer_in;
  aci_gap_pass_key_req_event(rp0->Connection_Handle);
 800b2f6:	8800      	ldrh	r0, [r0, #0]
 800b2f8:	f003 ff2c 	bl	800f154 <aci_gap_pass_key_req_event>

  return status;
}
 800b2fc:	2000      	movs	r0, #0
 800b2fe:	bd08      	pop	{r3, pc}

0800b300 <aci_gap_authorization_req_event_process>:
 *        requested.
 * @retval None
 */

tBleStatus aci_gap_authorization_req_event_process(uint8_t *buffer_in)
{
 800b300:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  aci_gap_authorization_req_event_rp0 *rp0 = (aci_gap_authorization_req_event_rp0 *)buffer_in;
  aci_gap_authorization_req_event(rp0->Connection_Handle);
 800b302:	8800      	ldrh	r0, [r0, #0]
 800b304:	f000 fa3a 	bl	800b77c <aci_gap_authorization_req_event>

  return status;
}
 800b308:	2000      	movs	r0, #0
 800b30a:	bd08      	pop	{r3, pc}

0800b30c <aci_gap_slave_security_initiated_event_process>:
 *        successfully sent to the master.
 * @retval None
 */

tBleStatus aci_gap_slave_security_initiated_event_process(uint8_t *buffer_in)
{
 800b30c:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  aci_gap_slave_security_initiated_event();
 800b30e:	f000 fa36 	bl	800b77e <aci_gap_slave_security_initiated_event>

  return status;
}
 800b312:	2000      	movs	r0, #0
 800b314:	bd08      	pop	{r3, pc}

0800b316 <aci_gap_bond_lost_event_process>:
 *        force_rebond set to 1.
 * @retval None
 */

tBleStatus aci_gap_bond_lost_event_process(uint8_t *buffer_in)
{
 800b316:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  aci_gap_bond_lost_event();
 800b318:	f003 fee4 	bl	800f0e4 <aci_gap_bond_lost_event>

  return status;
}
 800b31c:	2000      	movs	r0, #0
 800b31e:	bd08      	pop	{r3, pc}

0800b320 <aci_gap_proc_complete_event_process>:
 *        of the peer device if the procedure completed successfully.
 * @retval None
 */

tBleStatus aci_gap_proc_complete_event_process(uint8_t *buffer_in)
{
 800b320:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  aci_gap_proc_complete_event_rp0 *rp0 = (aci_gap_proc_complete_event_rp0 *)buffer_in;
  aci_gap_proc_complete_event(rp0->Procedure_Code,
 800b322:	1cc3      	adds	r3, r0, #3
 800b324:	7882      	ldrb	r2, [r0, #2]
 800b326:	7841      	ldrb	r1, [r0, #1]
 800b328:	7800      	ldrb	r0, [r0, #0]
 800b32a:	f000 fa29 	bl	800b780 <aci_gap_proc_complete_event>
                              rp0->Status,
                              rp0->Data_Length,
                              rp0->Data);

  return status;
}
 800b32e:	2000      	movs	r0, #0
 800b330:	bd08      	pop	{r3, pc}

0800b332 <aci_gap_addr_not_resolved_event_process>:
 *        could not be resolved with any of the stored IRK's.
 * @retval None
 */

tBleStatus aci_gap_addr_not_resolved_event_process(uint8_t *buffer_in)
{
 800b332:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  aci_gap_addr_not_resolved_event_rp0 *rp0 = (aci_gap_addr_not_resolved_event_rp0 *)buffer_in;
  aci_gap_addr_not_resolved_event(rp0->Connection_Handle);
 800b334:	8800      	ldrh	r0, [r0, #0]
 800b336:	f000 fa24 	bl	800b782 <aci_gap_addr_not_resolved_event>

  return status;
}
 800b33a:	2000      	movs	r0, #0
 800b33c:	bd08      	pop	{r3, pc}

0800b33e <aci_gap_numeric_comparison_value_event_process>:
 * @param Numeric_Value
 * @retval None
 */

tBleStatus aci_gap_numeric_comparison_value_event_process(uint8_t *buffer_in)
{
 800b33e:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  aci_gap_numeric_comparison_value_event_rp0 *rp0 = (aci_gap_numeric_comparison_value_event_rp0 *)buffer_in;
  aci_gap_numeric_comparison_value_event(rp0->Connection_Handle,
 800b340:	f8d0 1002 	ldr.w	r1, [r0, #2]
 800b344:	8800      	ldrh	r0, [r0, #0]
 800b346:	f003 ff1b 	bl	800f180 <aci_gap_numeric_comparison_value_event>
                                         rp0->Numeric_Value);

  return status;
}
 800b34a:	2000      	movs	r0, #0
 800b34c:	bd08      	pop	{r3, pc}

0800b34e <aci_gap_keypress_notification_event_process>:
 *        - 0x04: PASSKEY_ENTRY_COMPLETED
 * @retval None
 */

tBleStatus aci_gap_keypress_notification_event_process(uint8_t *buffer_in)
{
 800b34e:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  aci_gap_keypress_notification_event_rp0 *rp0 = (aci_gap_keypress_notification_event_rp0 *)buffer_in;
  aci_gap_keypress_notification_event(rp0->Connection_Handle,
 800b350:	7881      	ldrb	r1, [r0, #2]
 800b352:	8800      	ldrh	r0, [r0, #0]
 800b354:	f000 fa16 	bl	800b784 <aci_gap_keypress_notification_event>
                                      rp0->Notification_Type);

  return status;
}
 800b358:	2000      	movs	r0, #0
 800b35a:	bd08      	pop	{r3, pc}

0800b35c <aci_l2cap_connection_update_resp_event_process>:
 * @param Result
 * @retval None
 */

tBleStatus aci_l2cap_connection_update_resp_event_process(uint8_t *buffer_in)
{
 800b35c:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  aci_l2cap_connection_update_resp_event_rp0 *rp0 = (aci_l2cap_connection_update_resp_event_rp0 *)buffer_in;
  aci_l2cap_connection_update_resp_event(rp0->Connection_Handle,
 800b35e:	8841      	ldrh	r1, [r0, #2]
 800b360:	8800      	ldrh	r0, [r0, #0]
 800b362:	f003 fe83 	bl	800f06c <aci_l2cap_connection_update_resp_event>
                                         rp0->Result);

  return status;
}
 800b366:	2000      	movs	r0, #0
 800b368:	bd08      	pop	{r3, pc}

0800b36a <aci_l2cap_proc_timeout_event_process>:
 * @param Data
 * @retval None
 */

tBleStatus aci_l2cap_proc_timeout_event_process(uint8_t *buffer_in)
{
 800b36a:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  aci_l2cap_proc_timeout_event_rp0 *rp0 = (aci_l2cap_proc_timeout_event_rp0 *)buffer_in;
  aci_l2cap_proc_timeout_event(rp0->Connection_Handle,
 800b36c:	1cc2      	adds	r2, r0, #3
 800b36e:	7881      	ldrb	r1, [r0, #2]
 800b370:	8800      	ldrh	r0, [r0, #0]
 800b372:	f000 fa19 	bl	800b7a8 <aci_l2cap_proc_timeout_event>
                               rp0->Data_Length,
                               rp0->Data);

  return status;
}
 800b376:	2000      	movs	r0, #0
 800b378:	bd08      	pop	{r3, pc}

0800b37a <aci_l2cap_connection_update_req_event_process>:
 *        - 10 (100 ms)  ... 3200 (32000 ms) 
 * @retval None
 */

tBleStatus aci_l2cap_connection_update_req_event_process(uint8_t *buffer_in)
{
 800b37a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  aci_l2cap_connection_update_req_event_rp0 *rp0 = (aci_l2cap_connection_update_req_event_rp0 *)buffer_in;
  aci_l2cap_connection_update_req_event(rp0->Connection_Handle,
 800b37c:	f8b0 300b 	ldrh.w	r3, [r0, #11]
 800b380:	9302      	str	r3, [sp, #8]
 800b382:	f8b0 3009 	ldrh.w	r3, [r0, #9]
 800b386:	9301      	str	r3, [sp, #4]
 800b388:	f8b0 3007 	ldrh.w	r3, [r0, #7]
 800b38c:	9300      	str	r3, [sp, #0]
 800b38e:	f8b0 3005 	ldrh.w	r3, [r0, #5]
 800b392:	f8b0 2003 	ldrh.w	r2, [r0, #3]
 800b396:	7881      	ldrb	r1, [r0, #2]
 800b398:	8800      	ldrh	r0, [r0, #0]
 800b39a:	f000 fa06 	bl	800b7aa <aci_l2cap_connection_update_req_event>
                                        rp0->Interval_Max,
                                        rp0->Slave_Latency,
                                        rp0->Timeout_Multiplier);

  return status;
}
 800b39e:	2000      	movs	r0, #0
 800b3a0:	b005      	add	sp, #20
 800b3a2:	f85d fb04 	ldr.w	pc, [sp], #4

0800b3a6 <aci_l2cap_command_reject_event_process>:
 * @param Data Data field associated with Reason
 * @retval None
 */

tBleStatus aci_l2cap_command_reject_event_process(uint8_t *buffer_in)
{
 800b3a6:	b507      	push	{r0, r1, r2, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  aci_l2cap_command_reject_event_rp0 *rp0 = (aci_l2cap_command_reject_event_rp0 *)buffer_in;
  aci_l2cap_command_reject_event(rp0->Connection_Handle,
 800b3a8:	4603      	mov	r3, r0
{
 800b3aa:	4601      	mov	r1, r0
  aci_l2cap_command_reject_event(rp0->Connection_Handle,
 800b3ac:	f833 0b06 	ldrh.w	r0, [r3], #6
 800b3b0:	9300      	str	r3, [sp, #0]
 800b3b2:	794b      	ldrb	r3, [r1, #5]
 800b3b4:	f8b1 2003 	ldrh.w	r2, [r1, #3]
 800b3b8:	7889      	ldrb	r1, [r1, #2]
 800b3ba:	f000 f9f7 	bl	800b7ac <aci_l2cap_command_reject_event>
                                 rp0->Reason,
                                 rp0->Data_Length,
                                 rp0->Data);

  return status;
}
 800b3be:	2000      	movs	r0, #0
 800b3c0:	b003      	add	sp, #12
 800b3c2:	f85d fb04 	ldr.w	pc, [sp], #4

0800b3c6 <aci_gatt_attribute_modified_event_process>:
 * @param Attr_Data The modified value
 * @retval None
 */

tBleStatus aci_gatt_attribute_modified_event_process(uint8_t *buffer_in)
{
 800b3c6:	b507      	push	{r0, r1, r2, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  aci_gatt_attribute_modified_event_rp0 *rp0 = (aci_gatt_attribute_modified_event_rp0 *)buffer_in;
  aci_gatt_attribute_modified_event(rp0->Connection_Handle,
 800b3c8:	4603      	mov	r3, r0
{
 800b3ca:	4601      	mov	r1, r0
  aci_gatt_attribute_modified_event(rp0->Connection_Handle,
 800b3cc:	f833 0b08 	ldrh.w	r0, [r3], #8
 800b3d0:	9300      	str	r3, [sp, #0]
 800b3d2:	88cb      	ldrh	r3, [r1, #6]
 800b3d4:	888a      	ldrh	r2, [r1, #4]
 800b3d6:	8849      	ldrh	r1, [r1, #2]
 800b3d8:	f003 fdcc 	bl	800ef74 <aci_gatt_attribute_modified_event>
                                    rp0->Offset,
                                    rp0->Attr_Data_Length,
                                    rp0->Attr_Data);

  return status;
}
 800b3dc:	2000      	movs	r0, #0
 800b3de:	b003      	add	sp, #12
 800b3e0:	f85d fb04 	ldr.w	pc, [sp], #4

0800b3e4 <aci_gatt_proc_timeout_event_process>:
 *        timed out
 * @retval None
 */

tBleStatus aci_gatt_proc_timeout_event_process(uint8_t *buffer_in)
{
 800b3e4:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  aci_gatt_proc_timeout_event_rp0 *rp0 = (aci_gatt_proc_timeout_event_rp0 *)buffer_in;
  aci_gatt_proc_timeout_event(rp0->Connection_Handle);
 800b3e6:	8800      	ldrh	r0, [r0, #0]
 800b3e8:	f000 f9cd 	bl	800b786 <aci_gatt_proc_timeout_event>

  return status;
}
 800b3ec:	2000      	movs	r0, #0
 800b3ee:	bd08      	pop	{r3, pc}

0800b3f0 <aci_att_exchange_mtu_resp_event_process>:
 * @param Server_RX_MTU ATT_MTU value agreed between server and client
 * @retval None
 */

tBleStatus aci_att_exchange_mtu_resp_event_process(uint8_t *buffer_in)
{
 800b3f0:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  aci_att_exchange_mtu_resp_event_rp0 *rp0 = (aci_att_exchange_mtu_resp_event_rp0 *)buffer_in;
  aci_att_exchange_mtu_resp_event(rp0->Connection_Handle,
 800b3f2:	8841      	ldrh	r1, [r0, #2]
 800b3f4:	8800      	ldrh	r0, [r0, #0]
 800b3f6:	f003 fe3b 	bl	800f070 <aci_att_exchange_mtu_resp_event>
                                  rp0->Server_RX_MTU);

  return status;
}
 800b3fa:	2000      	movs	r0, #0
 800b3fc:	bd08      	pop	{r3, pc}

0800b3fe <aci_att_find_info_resp_event_process>:
 *        pair is:[2 octets for handle, 16 octets for UUIDs]
 * @retval None
 */

tBleStatus aci_att_find_info_resp_event_process(uint8_t *buffer_in)
{
 800b3fe:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  aci_att_find_info_resp_event_rp0 *rp0 = (aci_att_find_info_resp_event_rp0 *)buffer_in;
  aci_att_find_info_resp_event(rp0->Connection_Handle,
 800b400:	1d03      	adds	r3, r0, #4
 800b402:	78c2      	ldrb	r2, [r0, #3]
 800b404:	7881      	ldrb	r1, [r0, #2]
 800b406:	8800      	ldrh	r0, [r0, #0]
 800b408:	f000 f9be 	bl	800b788 <aci_att_find_info_resp_event>
                               rp0->Format,
                               rp0->Event_Data_Length,
                               rp0->Handle_UUID_Pair);

  return status;
}
 800b40c:	2000      	movs	r0, #0
 800b40e:	bd08      	pop	{r3, pc}

0800b410 <aci_att_find_by_type_value_resp_event_process>:
 * @param Attribute_Group_Handle_Pair See @ref Attribute_Group_Handle_Pair_t
 * @retval None
 */

tBleStatus aci_att_find_by_type_value_resp_event_process(uint8_t *buffer_in)
{
 800b410:	b570      	push	{r4, r5, r6, lr}
 800b412:	b0a0      	sub	sp, #128	; 0x80
 800b414:	466b      	mov	r3, sp
  /* Input params */
  aci_att_find_by_type_value_resp_event_rp0 *rp0 = (aci_att_find_by_type_value_resp_event_rp0 *)buffer_in;
  uint8_t size = 3;
  int i;
  Attribute_Group_Handle_Pair_t Attribute_Group_Handle_Pair[HCI_MAX_PAYLOAD_SIZE/sizeof(Attribute_Group_Handle_Pair_t)];
  for (i = 0; i < rp0->Num_of_Handle_Pair; i++) {
 800b416:	7881      	ldrb	r1, [r0, #2]
 800b418:	2400      	movs	r4, #0
 800b41a:	461a      	mov	r2, r3
 800b41c:	42a1      	cmp	r1, r4
 800b41e:	f103 0304 	add.w	r3, r3, #4
 800b422:	dc05      	bgt.n	800b430 <aci_att_find_by_type_value_resp_event_process+0x20>
    Attribute_Group_Handle_Pair[i].Found_Attribute_Handle = rp0->Attribute_Group_Handle_Pair[i].Found_Attribute_Handle;
    size += 2;
    Attribute_Group_Handle_Pair[i].Group_End_Handle = rp0->Attribute_Group_Handle_Pair[i].Group_End_Handle;
    size += 2;
  }
  aci_att_find_by_type_value_resp_event(rp0->Connection_Handle,
 800b424:	8800      	ldrh	r0, [r0, #0]
 800b426:	f000 f9b0 	bl	800b78a <aci_att_find_by_type_value_resp_event>
                                        rp0->Num_of_Handle_Pair,
                                        Attribute_Group_Handle_Pair);

  return status;
}
 800b42a:	2000      	movs	r0, #0
 800b42c:	b020      	add	sp, #128	; 0x80
 800b42e:	bd70      	pop	{r4, r5, r6, pc}
    Attribute_Group_Handle_Pair[i].Found_Attribute_Handle = rp0->Attribute_Group_Handle_Pair[i].Found_Attribute_Handle;
 800b430:	eb00 0584 	add.w	r5, r0, r4, lsl #2
  for (i = 0; i < rp0->Num_of_Handle_Pair; i++) {
 800b434:	3401      	adds	r4, #1
    Attribute_Group_Handle_Pair[i].Found_Attribute_Handle = rp0->Attribute_Group_Handle_Pair[i].Found_Attribute_Handle;
 800b436:	f8b5 6003 	ldrh.w	r6, [r5, #3]
    Attribute_Group_Handle_Pair[i].Group_End_Handle = rp0->Attribute_Group_Handle_Pair[i].Group_End_Handle;
 800b43a:	f8b5 5005 	ldrh.w	r5, [r5, #5]
    Attribute_Group_Handle_Pair[i].Found_Attribute_Handle = rp0->Attribute_Group_Handle_Pair[i].Found_Attribute_Handle;
 800b43e:	f823 6c04 	strh.w	r6, [r3, #-4]
    Attribute_Group_Handle_Pair[i].Group_End_Handle = rp0->Attribute_Group_Handle_Pair[i].Group_End_Handle;
 800b442:	f823 5c02 	strh.w	r5, [r3, #-2]
  for (i = 0; i < rp0->Num_of_Handle_Pair; i++) {
 800b446:	e7e9      	b.n	800b41c <aci_att_find_by_type_value_resp_event_process+0xc>

0800b448 <aci_att_read_by_type_resp_event_process>:
 *        Value]
 * @retval None
 */

tBleStatus aci_att_read_by_type_resp_event_process(uint8_t *buffer_in)
{
 800b448:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  aci_att_read_by_type_resp_event_rp0 *rp0 = (aci_att_read_by_type_resp_event_rp0 *)buffer_in;
  aci_att_read_by_type_resp_event(rp0->Connection_Handle,
 800b44a:	1d03      	adds	r3, r0, #4
 800b44c:	78c2      	ldrb	r2, [r0, #3]
 800b44e:	7881      	ldrb	r1, [r0, #2]
 800b450:	8800      	ldrh	r0, [r0, #0]
 800b452:	f000 f99b 	bl	800b78c <aci_att_read_by_type_resp_event>
                                  rp0->Handle_Value_Pair_Length,
                                  rp0->Data_Length,
                                  rp0->Handle_Value_Pair_Data);

  return status;
}
 800b456:	2000      	movs	r0, #0
 800b458:	bd08      	pop	{r3, pc}

0800b45a <aci_att_read_resp_event_process>:
 * @param Attribute_Value The value of the attribute.
 * @retval None
 */

tBleStatus aci_att_read_resp_event_process(uint8_t *buffer_in)
{
 800b45a:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  aci_att_read_resp_event_rp0 *rp0 = (aci_att_read_resp_event_rp0 *)buffer_in;
  aci_att_read_resp_event(rp0->Connection_Handle,
 800b45c:	1cc2      	adds	r2, r0, #3
 800b45e:	7881      	ldrb	r1, [r0, #2]
 800b460:	8800      	ldrh	r0, [r0, #0]
 800b462:	f000 f994 	bl	800b78e <aci_att_read_resp_event>
                          rp0->Event_Data_Length,
                          rp0->Attribute_Value);

  return status;
}
 800b466:	2000      	movs	r0, #0
 800b468:	bd08      	pop	{r3, pc}

0800b46a <aci_att_read_blob_resp_event_process>:
 * @param Attribute_Value Part of the attribute value.
 * @retval None
 */

tBleStatus aci_att_read_blob_resp_event_process(uint8_t *buffer_in)
{
 800b46a:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  aci_att_read_blob_resp_event_rp0 *rp0 = (aci_att_read_blob_resp_event_rp0 *)buffer_in;
  aci_att_read_blob_resp_event(rp0->Connection_Handle,
 800b46c:	1cc2      	adds	r2, r0, #3
 800b46e:	7881      	ldrb	r1, [r0, #2]
 800b470:	8800      	ldrh	r0, [r0, #0]
 800b472:	f000 f98d 	bl	800b790 <aci_att_read_blob_resp_event>
                               rp0->Event_Data_Length,
                               rp0->Attribute_Value);

  return status;
}
 800b476:	2000      	movs	r0, #0
 800b478:	bd08      	pop	{r3, pc}

0800b47a <aci_att_read_multiple_resp_event_process>:
 *        the order that they were requested.
 * @retval None
 */

tBleStatus aci_att_read_multiple_resp_event_process(uint8_t *buffer_in)
{
 800b47a:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  aci_att_read_multiple_resp_event_rp0 *rp0 = (aci_att_read_multiple_resp_event_rp0 *)buffer_in;
  aci_att_read_multiple_resp_event(rp0->Connection_Handle,
 800b47c:	1cc2      	adds	r2, r0, #3
 800b47e:	7881      	ldrb	r1, [r0, #2]
 800b480:	8800      	ldrh	r0, [r0, #0]
 800b482:	f000 f986 	bl	800b792 <aci_att_read_multiple_resp_event>
                                   rp0->Event_Data_Length,
                                   rp0->Set_Of_Values);

  return status;
}
 800b486:	2000      	movs	r0, #0
 800b488:	bd08      	pop	{r3, pc}

0800b48a <aci_att_read_by_group_type_resp_event_process>:
 *        Handle, (Attribute_Data_Length - 4 octets) for Attribute Value]
 * @retval None
 */

tBleStatus aci_att_read_by_group_type_resp_event_process(uint8_t *buffer_in)
{
 800b48a:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  aci_att_read_by_group_type_resp_event_rp0 *rp0 = (aci_att_read_by_group_type_resp_event_rp0 *)buffer_in;
  aci_att_read_by_group_type_resp_event(rp0->Connection_Handle,
 800b48c:	1d03      	adds	r3, r0, #4
 800b48e:	78c2      	ldrb	r2, [r0, #3]
 800b490:	7881      	ldrb	r1, [r0, #2]
 800b492:	8800      	ldrh	r0, [r0, #0]
 800b494:	f000 f97e 	bl	800b794 <aci_att_read_by_group_type_resp_event>
                                        rp0->Attribute_Data_Length,
                                        rp0->Data_Length,
                                        rp0->Attribute_Data_List);

  return status;
}
 800b498:	2000      	movs	r0, #0
 800b49a:	bd08      	pop	{r3, pc}

0800b49c <aci_att_prepare_write_resp_event_process>:
 * @param Part_Attribute_Value The value of the attribute to be written
 * @retval None
 */

tBleStatus aci_att_prepare_write_resp_event_process(uint8_t *buffer_in)
{
 800b49c:	b507      	push	{r0, r1, r2, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  aci_att_prepare_write_resp_event_rp0 *rp0 = (aci_att_prepare_write_resp_event_rp0 *)buffer_in;
  aci_att_prepare_write_resp_event(rp0->Connection_Handle,
 800b49e:	4603      	mov	r3, r0
{
 800b4a0:	4601      	mov	r1, r0
  aci_att_prepare_write_resp_event(rp0->Connection_Handle,
 800b4a2:	f833 0b07 	ldrh.w	r0, [r3], #7
 800b4a6:	9300      	str	r3, [sp, #0]
 800b4a8:	798b      	ldrb	r3, [r1, #6]
 800b4aa:	888a      	ldrh	r2, [r1, #4]
 800b4ac:	8849      	ldrh	r1, [r1, #2]
 800b4ae:	f000 f972 	bl	800b796 <aci_att_prepare_write_resp_event>
                                   rp0->Offset,
                                   rp0->Part_Attribute_Value_Length,
                                   rp0->Part_Attribute_Value);

  return status;
}
 800b4b2:	2000      	movs	r0, #0
 800b4b4:	b003      	add	sp, #12
 800b4b6:	f85d fb04 	ldr.w	pc, [sp], #4

0800b4ba <aci_att_exec_write_resp_event_process>:
 * @param Connection_Handle Connection handle related to the response
 * @retval None
 */

tBleStatus aci_att_exec_write_resp_event_process(uint8_t *buffer_in)
{
 800b4ba:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  aci_att_exec_write_resp_event_rp0 *rp0 = (aci_att_exec_write_resp_event_rp0 *)buffer_in;
  aci_att_exec_write_resp_event(rp0->Connection_Handle);
 800b4bc:	8800      	ldrh	r0, [r0, #0]
 800b4be:	f000 f96b 	bl	800b798 <aci_att_exec_write_resp_event>

  return status;
}
 800b4c2:	2000      	movs	r0, #0
 800b4c4:	bd08      	pop	{r3, pc}

0800b4c6 <aci_gatt_indication_event_process>:
 * @param Attribute_Value The current value of the attribute
 * @retval None
 */

tBleStatus aci_gatt_indication_event_process(uint8_t *buffer_in)
{
 800b4c6:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  aci_gatt_indication_event_rp0 *rp0 = (aci_gatt_indication_event_rp0 *)buffer_in;
  aci_gatt_indication_event(rp0->Connection_Handle,
 800b4c8:	1d43      	adds	r3, r0, #5
 800b4ca:	7902      	ldrb	r2, [r0, #4]
 800b4cc:	8841      	ldrh	r1, [r0, #2]
 800b4ce:	8800      	ldrh	r0, [r0, #0]
 800b4d0:	f003 fdee 	bl	800f0b0 <aci_gatt_indication_event>
                            rp0->Attribute_Handle,
                            rp0->Attribute_Value_Length,
                            rp0->Attribute_Value);

  return status;
}
 800b4d4:	2000      	movs	r0, #0
 800b4d6:	bd08      	pop	{r3, pc}

0800b4d8 <aci_gatt_notification_event_process>:
 * @param Attribute_Value The current value of the attribute
 * @retval None
 */

tBleStatus aci_gatt_notification_event_process(uint8_t *buffer_in)
{
 800b4d8:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  aci_gatt_notification_event_rp0 *rp0 = (aci_gatt_notification_event_rp0 *)buffer_in;
  aci_gatt_notification_event(rp0->Connection_Handle,
 800b4da:	1d43      	adds	r3, r0, #5
 800b4dc:	7902      	ldrb	r2, [r0, #4]
 800b4de:	8841      	ldrh	r1, [r0, #2]
 800b4e0:	8800      	ldrh	r0, [r0, #0]
 800b4e2:	f000 f95a 	bl	800b79a <aci_gatt_notification_event>
                              rp0->Attribute_Handle,
                              rp0->Attribute_Value_Length,
                              rp0->Attribute_Value);

  return status;
}
 800b4e6:	2000      	movs	r0, #0
 800b4e8:	bd08      	pop	{r3, pc}

0800b4ea <aci_gatt_proc_complete_event_process>:
 *        was successful.
 * @retval None
 */

tBleStatus aci_gatt_proc_complete_event_process(uint8_t *buffer_in)
{
 800b4ea:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  aci_gatt_proc_complete_event_rp0 *rp0 = (aci_gatt_proc_complete_event_rp0 *)buffer_in;
  aci_gatt_proc_complete_event(rp0->Connection_Handle,
 800b4ec:	7881      	ldrb	r1, [r0, #2]
 800b4ee:	8800      	ldrh	r0, [r0, #0]
 800b4f0:	f003 fdca 	bl	800f088 <aci_gatt_proc_complete_event>
                               rp0->Error_Code);

  return status;
}
 800b4f4:	2000      	movs	r0, #0
 800b4f6:	bd08      	pop	{r3, pc}

0800b4f8 <aci_gatt_error_resp_event_process>:
 *        - 0x11: Insufficient resources
 * @retval None
 */

tBleStatus aci_gatt_error_resp_event_process(uint8_t *buffer_in)
{
 800b4f8:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  aci_gatt_error_resp_event_rp0 *rp0 = (aci_gatt_error_resp_event_rp0 *)buffer_in;
  aci_gatt_error_resp_event(rp0->Connection_Handle,
 800b4fa:	7943      	ldrb	r3, [r0, #5]
 800b4fc:	f8b0 2003 	ldrh.w	r2, [r0, #3]
 800b500:	7881      	ldrb	r1, [r0, #2]
 800b502:	8800      	ldrh	r0, [r0, #0]
 800b504:	f000 f94a 	bl	800b79c <aci_gatt_error_resp_event>
                            rp0->Req_Opcode,
                            rp0->Attribute_Handle,
                            rp0->Error_Code);

  return status;
}
 800b508:	2000      	movs	r0, #0
 800b50a:	bd08      	pop	{r3, pc}

0800b50c <aci_gatt_disc_read_char_by_uuid_resp_event_process>:
 *        been performed.
 * @retval None
 */

tBleStatus aci_gatt_disc_read_char_by_uuid_resp_event_process(uint8_t *buffer_in)
{
 800b50c:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  aci_gatt_disc_read_char_by_uuid_resp_event_rp0 *rp0 = (aci_gatt_disc_read_char_by_uuid_resp_event_rp0 *)buffer_in;
  aci_gatt_disc_read_char_by_uuid_resp_event(rp0->Connection_Handle,
 800b50e:	1d43      	adds	r3, r0, #5
 800b510:	7902      	ldrb	r2, [r0, #4]
 800b512:	8841      	ldrh	r1, [r0, #2]
 800b514:	8800      	ldrh	r0, [r0, #0]
 800b516:	f000 f942 	bl	800b79e <aci_gatt_disc_read_char_by_uuid_resp_event>
                                             rp0->Attribute_Handle,
                                             rp0->Attribute_Value_Length,
                                             rp0->Attribute_Value);

  return status;
}
 800b51a:	2000      	movs	r0, #0
 800b51c:	bd08      	pop	{r3, pc}

0800b51e <aci_gatt_write_permit_req_event_process>:
 * @param Data The data that the client has requested to write
 * @retval None
 */

tBleStatus aci_gatt_write_permit_req_event_process(uint8_t *buffer_in)
{
 800b51e:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  aci_gatt_write_permit_req_event_rp0 *rp0 = (aci_gatt_write_permit_req_event_rp0 *)buffer_in;
  aci_gatt_write_permit_req_event(rp0->Connection_Handle,
 800b520:	1d43      	adds	r3, r0, #5
 800b522:	7902      	ldrb	r2, [r0, #4]
 800b524:	8841      	ldrh	r1, [r0, #2]
 800b526:	8800      	ldrh	r0, [r0, #0]
 800b528:	f000 f93a 	bl	800b7a0 <aci_gatt_write_permit_req_event>
                                  rp0->Attribute_Handle,
                                  rp0->Data_Length,
                                  rp0->Data);

  return status;
}
 800b52c:	2000      	movs	r0, #0
 800b52e:	bd08      	pop	{r3, pc}

0800b530 <aci_gatt_read_permit_req_event_process>:
 * @param Offset Contains the offset from which the read has been requested
 * @retval None
 */

tBleStatus aci_gatt_read_permit_req_event_process(uint8_t *buffer_in)
{
 800b530:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  aci_gatt_read_permit_req_event_rp0 *rp0 = (aci_gatt_read_permit_req_event_rp0 *)buffer_in;
  aci_gatt_read_permit_req_event(rp0->Connection_Handle,
 800b532:	8882      	ldrh	r2, [r0, #4]
 800b534:	8841      	ldrh	r1, [r0, #2]
 800b536:	8800      	ldrh	r0, [r0, #0]
 800b538:	f003 fcfa 	bl	800ef30 <aci_gatt_read_permit_req_event>
                                 rp0->Attribute_Handle,
                                 rp0->Offset);

  return status;
}
 800b53c:	2000      	movs	r0, #0
 800b53e:	bd08      	pop	{r3, pc}

0800b540 <aci_gatt_read_multi_permit_req_event_process>:
 * @param Handle_Item See @ref Handle_Item_t
 * @retval None
 */

tBleStatus aci_gatt_read_multi_permit_req_event_process(uint8_t *buffer_in)
{
 800b540:	b510      	push	{r4, lr}
  /* Input params */
  aci_gatt_read_multi_permit_req_event_rp0 *rp0 = (aci_gatt_read_multi_permit_req_event_rp0 *)buffer_in;
  uint8_t size = 3;
  int i;
  Handle_Item_t Handle_Item[HCI_MAX_PAYLOAD_SIZE/sizeof(Handle_Item_t)];
  for (i = 0; i < rp0->Number_of_Handles; i++) {
 800b542:	7881      	ldrb	r1, [r0, #2]
{
 800b544:	b0a0      	sub	sp, #128	; 0x80
  for (i = 0; i < rp0->Number_of_Handles; i++) {
 800b546:	2300      	movs	r3, #0
 800b548:	4299      	cmp	r1, r3
 800b54a:	dc06      	bgt.n	800b55a <aci_gatt_read_multi_permit_req_event_process+0x1a>
    Handle_Item[i].Handle = rp0->Handle_Item[i].Handle;
    size += 2;
  }
  aci_gatt_read_multi_permit_req_event(rp0->Connection_Handle,
 800b54c:	8800      	ldrh	r0, [r0, #0]
 800b54e:	466a      	mov	r2, sp
 800b550:	f000 f927 	bl	800b7a2 <aci_gatt_read_multi_permit_req_event>
                                       rp0->Number_of_Handles,
                                       Handle_Item);

  return status;
}
 800b554:	2000      	movs	r0, #0
 800b556:	b020      	add	sp, #128	; 0x80
 800b558:	bd10      	pop	{r4, pc}
    Handle_Item[i].Handle = rp0->Handle_Item[i].Handle;
 800b55a:	eb00 0443 	add.w	r4, r0, r3, lsl #1
 800b55e:	78e2      	ldrb	r2, [r4, #3]
 800b560:	7924      	ldrb	r4, [r4, #4]
 800b562:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
 800b566:	f82d 2013 	strh.w	r2, [sp, r3, lsl #1]
  for (i = 0; i < rp0->Number_of_Handles; i++) {
 800b56a:	3301      	adds	r3, #1
 800b56c:	e7ec      	b.n	800b548 <aci_gatt_read_multi_permit_req_event_process+0x8>

0800b56e <aci_gatt_tx_pool_available_event_process>:
 * @param Available_Buffers Not used.
 * @retval None
 */

tBleStatus aci_gatt_tx_pool_available_event_process(uint8_t *buffer_in)
{
 800b56e:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  aci_gatt_tx_pool_available_event_rp0 *rp0 = (aci_gatt_tx_pool_available_event_rp0 *)buffer_in;
  aci_gatt_tx_pool_available_event(rp0->Connection_Handle,
 800b570:	8841      	ldrh	r1, [r0, #2]
 800b572:	8800      	ldrh	r0, [r0, #0]
 800b574:	f002 f9ea 	bl	800d94c <aci_gatt_tx_pool_available_event>
                                   rp0->Available_Buffers);

  return status;
}
 800b578:	2000      	movs	r0, #0
 800b57a:	bd08      	pop	{r3, pc}

0800b57c <aci_gatt_server_confirmation_event_process>:
 * @param Connection_Handle Connection handle related to the event
 * @retval None
 */

tBleStatus aci_gatt_server_confirmation_event_process(uint8_t *buffer_in)
{
 800b57c:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  aci_gatt_server_confirmation_event_rp0 *rp0 = (aci_gatt_server_confirmation_event_rp0 *)buffer_in;
  aci_gatt_server_confirmation_event(rp0->Connection_Handle);
 800b57e:	8800      	ldrh	r0, [r0, #0]
 800b580:	f000 f910 	bl	800b7a4 <aci_gatt_server_confirmation_event>

  return status;
}
 800b584:	2000      	movs	r0, #0
 800b586:	bd08      	pop	{r3, pc}

0800b588 <aci_gatt_prepare_write_permit_req_event_process>:
 * @param Data The data that the client has requested to write
 * @retval None
 */

tBleStatus aci_gatt_prepare_write_permit_req_event_process(uint8_t *buffer_in)
{
 800b588:	b507      	push	{r0, r1, r2, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  aci_gatt_prepare_write_permit_req_event_rp0 *rp0 = (aci_gatt_prepare_write_permit_req_event_rp0 *)buffer_in;
  aci_gatt_prepare_write_permit_req_event(rp0->Connection_Handle,
 800b58a:	4603      	mov	r3, r0
{
 800b58c:	4601      	mov	r1, r0
  aci_gatt_prepare_write_permit_req_event(rp0->Connection_Handle,
 800b58e:	f833 0b07 	ldrh.w	r0, [r3], #7
 800b592:	9300      	str	r3, [sp, #0]
 800b594:	798b      	ldrb	r3, [r1, #6]
 800b596:	888a      	ldrh	r2, [r1, #4]
 800b598:	8849      	ldrh	r1, [r1, #2]
 800b59a:	f000 f904 	bl	800b7a6 <aci_gatt_prepare_write_permit_req_event>
                                          rp0->Offset,
                                          rp0->Data_Length,
                                          rp0->Data);

  return status;
}
 800b59e:	2000      	movs	r0, #0
 800b5a0:	b003      	add	sp, #12
 800b5a2:	f85d fb04 	ldr.w	pc, [sp], #4

0800b5a6 <hci_le_connection_complete_event_process>:
 *        - 0x07: 20 ppm
 * @retval None
 */

tBleStatus hci_le_connection_complete_event_process(uint8_t *buffer_in)
{
 800b5a6:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  hci_le_connection_complete_event_rp0 *rp0 = (hci_le_connection_complete_event_rp0 *)buffer_in;
  hci_le_connection_complete_event(rp0->Status,
 800b5a8:	7c43      	ldrb	r3, [r0, #17]
 800b5aa:	9304      	str	r3, [sp, #16]
 800b5ac:	f8b0 300f 	ldrh.w	r3, [r0, #15]
 800b5b0:	9303      	str	r3, [sp, #12]
 800b5b2:	f8b0 300d 	ldrh.w	r3, [r0, #13]
 800b5b6:	9302      	str	r3, [sp, #8]
 800b5b8:	f8b0 300b 	ldrh.w	r3, [r0, #11]
 800b5bc:	9301      	str	r3, [sp, #4]
                                   rp0->Connection_Handle,
                                   rp0->Role,
                                   rp0->Peer_Address_Type,
                                   rp0->Peer_Address,
 800b5be:	1d43      	adds	r3, r0, #5
  hci_le_connection_complete_event(rp0->Status,
 800b5c0:	9300      	str	r3, [sp, #0]
 800b5c2:	7903      	ldrb	r3, [r0, #4]
 800b5c4:	78c2      	ldrb	r2, [r0, #3]
 800b5c6:	f8b0 1001 	ldrh.w	r1, [r0, #1]
 800b5ca:	7800      	ldrb	r0, [r0, #0]
 800b5cc:	f003 fc58 	bl	800ee80 <hci_le_connection_complete_event>
                                   rp0->Conn_Latency,
                                   rp0->Supervision_Timeout,
                                   rp0->Master_Clock_Accuracy);

  return status;
}
 800b5d0:	2000      	movs	r0, #0
 800b5d2:	b007      	add	sp, #28
 800b5d4:	f85d fb04 	ldr.w	pc, [sp], #4

0800b5d8 <hci_le_advertising_report_event_process>:
 * @param Advertising_Report See @ref Advertising_Report_t
 * @retval None
 */

tBleStatus hci_le_advertising_report_event_process(uint8_t *buffer_in)
{
 800b5d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b5da:	b09f      	sub	sp, #124	; 0x7c
 800b5dc:	466e      	mov	r6, sp
 800b5de:	1cc4      	adds	r4, r0, #3
  /* Input params */
  hci_le_advertising_report_event_rp0 *rp0 = (hci_le_advertising_report_event_rp0 *)buffer_in;
  uint8_t size = 1;
  int i;
  Advertising_Report_t Advertising_Report[HCI_MAX_PAYLOAD_SIZE/sizeof(Advertising_Report_t)];
  for (i = 0; i < rp0->Num_Reports; i++) {
 800b5e0:	2700      	movs	r7, #0
  uint8_t size = 1;
 800b5e2:	f04f 0e01 	mov.w	lr, #1
 800b5e6:	4631      	mov	r1, r6
  for (i = 0; i < rp0->Num_Reports; i++) {
 800b5e8:	f890 c000 	ldrb.w	ip, [r0]
 800b5ec:	45bc      	cmp	ip, r7
 800b5ee:	f106 0514 	add.w	r5, r6, #20
 800b5f2:	dc05      	bgt.n	800b600 <hci_le_advertising_report_event_process+0x28>
    Advertising_Report[i].Data = rp0->Advertising_Report[i].Data;
    size += rp0->Advertising_Report[i].Length_Data;
    Advertising_Report[i].RSSI = (uint8_t)buffer_in[size];
    size += 1;
  }
  hci_le_advertising_report_event(rp0->Num_Reports,
 800b5f4:	4660      	mov	r0, ip
 800b5f6:	f000 f8b9 	bl	800b76c <hci_le_advertising_report_event>
                                  Advertising_Report);

  return status;
}
 800b5fa:	2000      	movs	r0, #0
 800b5fc:	b01f      	add	sp, #124	; 0x7c
 800b5fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
    Advertising_Report[i].Event_Type = rp0->Advertising_Report[i].Event_Type;
 800b600:	f814 3c02 	ldrb.w	r3, [r4, #-2]
 800b604:	f805 3c14 	strb.w	r3, [r5, #-20]
    Advertising_Report[i].Address_Type = rp0->Advertising_Report[i].Address_Type;
 800b608:	f814 3c01 	ldrb.w	r3, [r4, #-1]
 800b60c:	f805 3c13 	strb.w	r3, [r5, #-19]
    BLUENRG_memcpy((void *) Advertising_Report[i].Address, (const void *) rp0->Advertising_Report[i].Address, 6);
 800b610:	6823      	ldr	r3, [r4, #0]
 800b612:	f8c6 3002 	str.w	r3, [r6, #2]
    Advertising_Report[i].Length_Data = rp0->Advertising_Report[i].Length_Data;
 800b616:	79a2      	ldrb	r2, [r4, #6]
    BLUENRG_memcpy((void *) Advertising_Report[i].Address, (const void *) rp0->Advertising_Report[i].Address, 6);
 800b618:	88a3      	ldrh	r3, [r4, #4]
 800b61a:	80f3      	strh	r3, [r6, #6]
    Advertising_Report[i].Data = rp0->Advertising_Report[i].Data;
 800b61c:	1de3      	adds	r3, r4, #7
 800b61e:	f845 3c08 	str.w	r3, [r5, #-8]
    size += rp0->Advertising_Report[i].Length_Data;
 800b622:	f102 0309 	add.w	r3, r2, #9
 800b626:	4473      	add	r3, lr
 800b628:	b2db      	uxtb	r3, r3
    Advertising_Report[i].Length_Data = rp0->Advertising_Report[i].Length_Data;
 800b62a:	f805 2c0c 	strb.w	r2, [r5, #-12]
    Advertising_Report[i].RSSI = (uint8_t)buffer_in[size];
 800b62e:	5cc2      	ldrb	r2, [r0, r3]
 800b630:	f805 2c04 	strb.w	r2, [r5, #-4]
    size += 1;
 800b634:	3301      	adds	r3, #1
 800b636:	fa5f fe83 	uxtb.w	lr, r3
  for (i = 0; i < rp0->Num_Reports; i++) {
 800b63a:	3701      	adds	r7, #1
 800b63c:	340b      	adds	r4, #11
 800b63e:	462e      	mov	r6, r5
 800b640:	e7d2      	b.n	800b5e8 <hci_le_advertising_report_event_process+0x10>

0800b642 <hci_le_connection_update_complete_event_process>:
 *        - 0x000A (100 ms)  ... 0x0C80 (32000 ms) 
 * @retval None
 */

tBleStatus hci_le_connection_update_complete_event_process(uint8_t *buffer_in)
{
 800b642:	b507      	push	{r0, r1, r2, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  hci_le_connection_update_complete_event_rp0 *rp0 = (hci_le_connection_update_complete_event_rp0 *)buffer_in;
  hci_le_connection_update_complete_event(rp0->Status,
 800b644:	f8b0 3007 	ldrh.w	r3, [r0, #7]
 800b648:	9300      	str	r3, [sp, #0]
 800b64a:	f8b0 3005 	ldrh.w	r3, [r0, #5]
 800b64e:	f8b0 2003 	ldrh.w	r2, [r0, #3]
 800b652:	f8b0 1001 	ldrh.w	r1, [r0, #1]
 800b656:	7800      	ldrb	r0, [r0, #0]
 800b658:	f003 fd09 	bl	800f06e <hci_le_connection_update_complete_event>
                                          rp0->Conn_Interval,
                                          rp0->Conn_Latency,
                                          rp0->Supervision_Timeout);

  return status;
}
 800b65c:	2000      	movs	r0, #0
 800b65e:	b003      	add	sp, #12
 800b660:	f85d fb04 	ldr.w	pc, [sp], #4

0800b664 <hci_le_read_remote_used_features_complete_event_process>:
 *        Layer specification.
 * @retval None
 */

tBleStatus hci_le_read_remote_used_features_complete_event_process(uint8_t *buffer_in)
{
 800b664:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  hci_le_read_remote_used_features_complete_event_rp0 *rp0 = (hci_le_read_remote_used_features_complete_event_rp0 *)buffer_in;
  hci_le_read_remote_used_features_complete_event(rp0->Status,
 800b666:	f8b0 1001 	ldrh.w	r1, [r0, #1]
 800b66a:	1cc2      	adds	r2, r0, #3
 800b66c:	7800      	ldrb	r0, [r0, #0]
 800b66e:	f000 f87e 	bl	800b76e <hci_le_read_remote_used_features_complete_event>
                                                  rp0->Connection_Handle,
                                                  rp0->LE_Features);

  return status;
}
 800b672:	2000      	movs	r0, #0
 800b674:	bd08      	pop	{r3, pc}

0800b676 <hci_le_long_term_key_request_event_process>:
 * @param Encrypted_Diversifier 16-bit encrypted diversifier
 * @retval None
 */

tBleStatus hci_le_long_term_key_request_event_process(uint8_t *buffer_in)
{
 800b676:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  hci_le_long_term_key_request_event_rp0 *rp0 = (hci_le_long_term_key_request_event_rp0 *)buffer_in;
  hci_le_long_term_key_request_event(rp0->Connection_Handle,
                                     rp0->Random_Number,
 800b678:	4601      	mov	r1, r0
{
 800b67a:	4603      	mov	r3, r0
  hci_le_long_term_key_request_event(rp0->Connection_Handle,
 800b67c:	f831 0b02 	ldrh.w	r0, [r1], #2
 800b680:	895a      	ldrh	r2, [r3, #10]
 800b682:	f000 f875 	bl	800b770 <hci_le_long_term_key_request_event>
                                     rp0->Encrypted_Diversifier);

  return status;
}
 800b686:	2000      	movs	r0, #0
 800b688:	bd08      	pop	{r3, pc}

0800b68a <hci_le_data_length_change_event_process>:
 *        future use)
 * @retval None
 */

tBleStatus hci_le_data_length_change_event_process(uint8_t *buffer_in)
{
 800b68a:	b507      	push	{r0, r1, r2, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  hci_le_data_length_change_event_rp0 *rp0 = (hci_le_data_length_change_event_rp0 *)buffer_in;
  hci_le_data_length_change_event(rp0->Connection_Handle,
 800b68c:	8903      	ldrh	r3, [r0, #8]
 800b68e:	9300      	str	r3, [sp, #0]
 800b690:	88c3      	ldrh	r3, [r0, #6]
 800b692:	8882      	ldrh	r2, [r0, #4]
 800b694:	8841      	ldrh	r1, [r0, #2]
 800b696:	8800      	ldrh	r0, [r0, #0]
 800b698:	f003 fcfe 	bl	800f098 <hci_le_data_length_change_event>
                                  rp0->MaxTxTime,
                                  rp0->MaxRxOctets,
                                  rp0->MaxRxTime);

  return status;
}
 800b69c:	2000      	movs	r0, #0
 800b69e:	b003      	add	sp, #12
 800b6a0:	f85d fb04 	ldr.w	pc, [sp], #4

0800b6a4 <hci_le_read_local_p256_public_key_complete_event_process>:
 * @param Local_P256_Public_Key Local P-256 public key.
 * @retval None
 */

tBleStatus hci_le_read_local_p256_public_key_complete_event_process(uint8_t *buffer_in)
{
 800b6a4:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  hci_le_read_local_p256_public_key_complete_event_rp0 *rp0 = (hci_le_read_local_p256_public_key_complete_event_rp0 *)buffer_in;
  hci_le_read_local_p256_public_key_complete_event(rp0->Status,
                                                   rp0->Local_P256_Public_Key);
 800b6a6:	4601      	mov	r1, r0
  hci_le_read_local_p256_public_key_complete_event(rp0->Status,
 800b6a8:	f811 0b01 	ldrb.w	r0, [r1], #1
 800b6ac:	f000 f861 	bl	800b772 <hci_le_read_local_p256_public_key_complete_event>

  return status;
}
 800b6b0:	2000      	movs	r0, #0
 800b6b2:	bd08      	pop	{r3, pc}

0800b6b4 <hci_le_generate_dhkey_complete_event_process>:
 * @param DHKey Diffie Hellman Key
 * @retval None
 */

tBleStatus hci_le_generate_dhkey_complete_event_process(uint8_t *buffer_in)
{
 800b6b4:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  hci_le_generate_dhkey_complete_event_rp0 *rp0 = (hci_le_generate_dhkey_complete_event_rp0 *)buffer_in;
  hci_le_generate_dhkey_complete_event(rp0->Status,
                                       rp0->DHKey);
 800b6b6:	4601      	mov	r1, r0
  hci_le_generate_dhkey_complete_event(rp0->Status,
 800b6b8:	f811 0b01 	ldrb.w	r0, [r1], #1
 800b6bc:	f000 f85a 	bl	800b774 <hci_le_generate_dhkey_complete_event>

  return status;
}
 800b6c0:	2000      	movs	r0, #0
 800b6c2:	bd08      	pop	{r3, pc}

0800b6c4 <hci_le_enhanced_connection_complete_event_process>:
 *        - 0x07: 20 ppm
 * @retval None
 */

tBleStatus hci_le_enhanced_connection_complete_event_process(uint8_t *buffer_in)
{
 800b6c4:	b500      	push	{lr}
 800b6c6:	b089      	sub	sp, #36	; 0x24
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  hci_le_enhanced_connection_complete_event_rp0 *rp0 = (hci_le_enhanced_connection_complete_event_rp0 *)buffer_in;
  hci_le_enhanced_connection_complete_event(rp0->Status,
 800b6c8:	7f43      	ldrb	r3, [r0, #29]
 800b6ca:	9306      	str	r3, [sp, #24]
 800b6cc:	f8b0 301b 	ldrh.w	r3, [r0, #27]
 800b6d0:	9305      	str	r3, [sp, #20]
 800b6d2:	f8b0 3019 	ldrh.w	r3, [r0, #25]
 800b6d6:	9304      	str	r3, [sp, #16]
 800b6d8:	f8b0 3017 	ldrh.w	r3, [r0, #23]
 800b6dc:	9303      	str	r3, [sp, #12]
                                            rp0->Connection_Handle,
                                            rp0->Role,
                                            rp0->Peer_Address_Type,
                                            rp0->Peer_Address,
                                            rp0->Local_Resolvable_Private_Address,
                                            rp0->Peer_Resolvable_Private_Address,
 800b6de:	f100 0311 	add.w	r3, r0, #17
  hci_le_enhanced_connection_complete_event(rp0->Status,
 800b6e2:	9302      	str	r3, [sp, #8]
                                            rp0->Local_Resolvable_Private_Address,
 800b6e4:	f100 030b 	add.w	r3, r0, #11
  hci_le_enhanced_connection_complete_event(rp0->Status,
 800b6e8:	9301      	str	r3, [sp, #4]
                                            rp0->Peer_Address,
 800b6ea:	1d43      	adds	r3, r0, #5
  hci_le_enhanced_connection_complete_event(rp0->Status,
 800b6ec:	9300      	str	r3, [sp, #0]
 800b6ee:	7903      	ldrb	r3, [r0, #4]
 800b6f0:	78c2      	ldrb	r2, [r0, #3]
 800b6f2:	f8b0 1001 	ldrh.w	r1, [r0, #1]
 800b6f6:	7800      	ldrb	r0, [r0, #0]
 800b6f8:	f000 f83d 	bl	800b776 <hci_le_enhanced_connection_complete_event>
                                            rp0->Conn_Latency,
                                            rp0->Supervision_Timeout,
                                            rp0->Master_Clock_Accuracy);

  return status;
}
 800b6fc:	2000      	movs	r0, #0
 800b6fe:	b009      	add	sp, #36	; 0x24
 800b700:	f85d fb04 	ldr.w	pc, [sp], #4

0800b704 <hci_le_direct_advertising_report_event_process>:
 * @param Direct_Advertising_Report See @ref Direct_Advertising_Report_t
 * @retval None
 */

tBleStatus hci_le_direct_advertising_report_event_process(uint8_t *buffer_in)
{
 800b704:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b706:	b0a1      	sub	sp, #132	; 0x84
 800b708:	466a      	mov	r2, sp
 800b70a:	1cc3      	adds	r3, r0, #3
  /* Input params */
  hci_le_direct_advertising_report_event_rp0 *rp0 = (hci_le_direct_advertising_report_event_rp0 *)buffer_in;
  uint8_t size = 1;
  int i;
  Direct_Advertising_Report_t Direct_Advertising_Report[HCI_MAX_PAYLOAD_SIZE/sizeof(Direct_Advertising_Report_t)];
  for (i = 0; i < rp0->Num_Reports; i++) {
 800b70c:	2500      	movs	r5, #0
 800b70e:	4611      	mov	r1, r2
 800b710:	7806      	ldrb	r6, [r0, #0]
 800b712:	42ae      	cmp	r6, r5
 800b714:	f102 0410 	add.w	r4, r2, #16
 800b718:	dc05      	bgt.n	800b726 <hci_le_direct_advertising_report_event_process+0x22>
    BLUENRG_memcpy((void *) Direct_Advertising_Report[i].Direct_Address, (const void *) rp0->Direct_Advertising_Report[i].Direct_Address, 6);
    size += 6;
    Direct_Advertising_Report[i].RSSI = rp0->Direct_Advertising_Report[i].RSSI;
    size += 1;
  }
  hci_le_direct_advertising_report_event(rp0->Num_Reports,
 800b71a:	4630      	mov	r0, r6
 800b71c:	f000 f82c 	bl	800b778 <hci_le_direct_advertising_report_event>
                                         Direct_Advertising_Report);

  return status;
}
 800b720:	2000      	movs	r0, #0
 800b722:	b021      	add	sp, #132	; 0x84
 800b724:	bdf0      	pop	{r4, r5, r6, r7, pc}
    Direct_Advertising_Report[i].Event_Type = rp0->Direct_Advertising_Report[i].Event_Type;
 800b726:	f813 6c02 	ldrb.w	r6, [r3, #-2]
 800b72a:	f804 6c10 	strb.w	r6, [r4, #-16]
    Direct_Advertising_Report[i].Address_Type = rp0->Direct_Advertising_Report[i].Address_Type;
 800b72e:	f813 6c01 	ldrb.w	r6, [r3, #-1]
 800b732:	f804 6c0f 	strb.w	r6, [r4, #-15]
    BLUENRG_memcpy((void *) Direct_Advertising_Report[i].Address, (const void *) rp0->Direct_Advertising_Report[i].Address, 6);
 800b736:	681e      	ldr	r6, [r3, #0]
 800b738:	f8c2 6002 	str.w	r6, [r2, #2]
 800b73c:	889e      	ldrh	r6, [r3, #4]
 800b73e:	80d6      	strh	r6, [r2, #6]
    Direct_Advertising_Report[i].Direct_Address_Type = rp0->Direct_Advertising_Report[i].Direct_Address_Type;
 800b740:	799e      	ldrb	r6, [r3, #6]
 800b742:	f804 6c08 	strb.w	r6, [r4, #-8]
    BLUENRG_memcpy((void *) Direct_Advertising_Report[i].Direct_Address, (const void *) rp0->Direct_Advertising_Report[i].Direct_Address, 6);
 800b746:	461e      	mov	r6, r3
  for (i = 0; i < rp0->Num_Reports; i++) {
 800b748:	3501      	adds	r5, #1
    BLUENRG_memcpy((void *) Direct_Advertising_Report[i].Direct_Address, (const void *) rp0->Direct_Advertising_Report[i].Direct_Address, 6);
 800b74a:	f856 7f07 	ldr.w	r7, [r6, #7]!
 800b74e:	f8c2 7009 	str.w	r7, [r2, #9]
 800b752:	88b6      	ldrh	r6, [r6, #4]
 800b754:	f8a2 600d 	strh.w	r6, [r2, #13]
    Direct_Advertising_Report[i].RSSI = rp0->Direct_Advertising_Report[i].RSSI;
 800b758:	7b5a      	ldrb	r2, [r3, #13]
 800b75a:	f804 2c01 	strb.w	r2, [r4, #-1]
  for (i = 0; i < rp0->Num_Reports; i++) {
 800b75e:	3310      	adds	r3, #16
 800b760:	4622      	mov	r2, r4
 800b762:	e7d5      	b.n	800b710 <hci_le_direct_advertising_report_event_process+0xc>

0800b764 <hci_read_remote_version_information_complete_event>:
{
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_read_remote_version_information_complete_event\r\n");
}
 800b764:	4770      	bx	lr

0800b766 <hci_number_of_completed_packets_event>:
{
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_number_of_completed_packets_event\r\n");
}
 800b766:	4770      	bx	lr

0800b768 <hci_data_buffer_overflow_event>:
 800b768:	4770      	bx	lr

0800b76a <hci_encryption_key_refresh_complete_event>:
{
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_encryption_key_refresh_complete_event\r\n");
}
 800b76a:	4770      	bx	lr

0800b76c <hci_le_advertising_report_event>:
 800b76c:	4770      	bx	lr

0800b76e <hci_le_read_remote_used_features_complete_event>:
{
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_read_remote_used_features_complete_event\r\n");
}
 800b76e:	4770      	bx	lr

0800b770 <hci_le_long_term_key_request_event>:
{
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_long_term_key_request_event\r\n");
}
 800b770:	4770      	bx	lr

0800b772 <hci_le_read_local_p256_public_key_complete_event>:
 800b772:	4770      	bx	lr

0800b774 <hci_le_generate_dhkey_complete_event>:
 800b774:	4770      	bx	lr

0800b776 <hci_le_enhanced_connection_complete_event>:
{
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_enhanced_connection_complete_event\r\n");
}
 800b776:	4770      	bx	lr

0800b778 <hci_le_direct_advertising_report_event>:
 800b778:	4770      	bx	lr

0800b77a <aci_gap_limited_discoverable_event>:
{
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_limited_discoverable_event\r\n");
}
 800b77a:	4770      	bx	lr

0800b77c <aci_gap_authorization_req_event>:
 800b77c:	4770      	bx	lr

0800b77e <aci_gap_slave_security_initiated_event>:
 800b77e:	4770      	bx	lr

0800b780 <aci_gap_proc_complete_event>:
{
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_proc_complete_event\r\n");
}
 800b780:	4770      	bx	lr

0800b782 <aci_gap_addr_not_resolved_event>:
 800b782:	4770      	bx	lr

0800b784 <aci_gap_keypress_notification_event>:
{
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_keypress_notification_event\r\n");
}
 800b784:	4770      	bx	lr

0800b786 <aci_gatt_proc_timeout_event>:
 800b786:	4770      	bx	lr

0800b788 <aci_att_find_info_resp_event>:
{
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_find_info_resp_event\r\n");
}
 800b788:	4770      	bx	lr

0800b78a <aci_att_find_by_type_value_resp_event>:
{
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_find_by_type_value_resp_event\r\n");
}
 800b78a:	4770      	bx	lr

0800b78c <aci_att_read_by_type_resp_event>:
 800b78c:	4770      	bx	lr

0800b78e <aci_att_read_resp_event>:
 800b78e:	4770      	bx	lr

0800b790 <aci_att_read_blob_resp_event>:
 800b790:	4770      	bx	lr

0800b792 <aci_att_read_multiple_resp_event>:
 800b792:	4770      	bx	lr

0800b794 <aci_att_read_by_group_type_resp_event>:
 800b794:	4770      	bx	lr

0800b796 <aci_att_prepare_write_resp_event>:
{
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_prepare_write_resp_event\r\n");
}
 800b796:	4770      	bx	lr

0800b798 <aci_att_exec_write_resp_event>:
 800b798:	4770      	bx	lr

0800b79a <aci_gatt_notification_event>:
 800b79a:	4770      	bx	lr

0800b79c <aci_gatt_error_resp_event>:
{
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_error_resp_event\r\n");
}
 800b79c:	4770      	bx	lr

0800b79e <aci_gatt_disc_read_char_by_uuid_resp_event>:
 800b79e:	4770      	bx	lr

0800b7a0 <aci_gatt_write_permit_req_event>:
 800b7a0:	4770      	bx	lr

0800b7a2 <aci_gatt_read_multi_permit_req_event>:
 800b7a2:	4770      	bx	lr

0800b7a4 <aci_gatt_server_confirmation_event>:
 800b7a4:	4770      	bx	lr

0800b7a6 <aci_gatt_prepare_write_permit_req_event>:
 800b7a6:	4770      	bx	lr

0800b7a8 <aci_l2cap_proc_timeout_event>:
 800b7a8:	4770      	bx	lr

0800b7aa <aci_l2cap_connection_update_req_event>:
{
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_l2cap_connection_update_req_event\r\n");
}
 800b7aa:	4770      	bx	lr

0800b7ac <aci_l2cap_command_reject_event>:
{
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_l2cap_command_reject_event\r\n");
}
 800b7ac:	4770      	bx	lr

0800b7ae <aci_blue_initialized_event>:
 800b7ae:	4770      	bx	lr

0800b7b0 <aci_blue_events_lost_event>:
{
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_blue_events_lost_event\r\n");
}
 800b7b0:	4770      	bx	lr

0800b7b2 <aci_blue_crash_info_event>:
{
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_blue_crash_info_event\r\n");
}
 800b7b2:	4770      	bx	lr

0800b7b4 <aci_hal_end_of_radio_activity_event>:
{
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_hal_end_of_radio_activity_event\r\n");
}
 800b7b4:	4770      	bx	lr

0800b7b6 <aci_hal_scan_req_report_event>:
{
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_hal_scan_req_report_event\r\n");
}
 800b7b6:	4770      	bx	lr

0800b7b8 <aci_hal_fw_error_event>:
{
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_hal_fw_error_event\r\n");
}
 800b7b8:	4770      	bx	lr
	...

0800b7bc <hci_read_local_version_information>:
tBleStatus hci_read_local_version_information(uint8_t *HCI_Version,
                                              uint16_t *HCI_Revision,
                                              uint8_t *LMP_PAL_Version,
                                              uint16_t *Manufacturer_Name,
                                              uint16_t *LMP_PAL_Subversion)
{
 800b7bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b7be:	b08b      	sub	sp, #44	; 0x2c
 800b7c0:	461c      	mov	r4, r3
  struct hci_request rq;
  hci_read_local_version_information_rp0 resp;
  BLUENRG_memset(&resp, 0, sizeof(resp));
 800b7c2:	ab01      	add	r3, sp, #4
  BLUENRG_memset(&rq, 0, sizeof(rq));
  rq.ogf = 0x04;
  rq.ocf = 0x001;
  rq.rparam = &resp;
 800b7c4:	9308      	str	r3, [sp, #32]
{
 800b7c6:	4607      	mov	r7, r0
  rq.rlen = sizeof(resp);
 800b7c8:	2309      	movs	r3, #9
{
 800b7ca:	460e      	mov	r6, r1
 800b7cc:	4615      	mov	r5, r2
  BLUENRG_memset(&resp, 0, sizeof(resp));
 800b7ce:	2100      	movs	r1, #0
  rq.ogf = 0x04;
 800b7d0:	4a15      	ldr	r2, [pc, #84]	; (800b828 <hci_read_local_version_information+0x6c>)
  BLUENRG_memset(&resp, 0, sizeof(resp));
 800b7d2:	f88d 100c 	strb.w	r1, [sp, #12]
  if (hci_send_req(&rq, FALSE) < 0)
 800b7d6:	a804      	add	r0, sp, #16
  BLUENRG_memset(&resp, 0, sizeof(resp));
 800b7d8:	e9cd 1101 	strd	r1, r1, [sp, #4]
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800b7dc:	e9cd 1105 	strd	r1, r1, [sp, #20]
 800b7e0:	9107      	str	r1, [sp, #28]
  rq.ogf = 0x04;
 800b7e2:	9204      	str	r2, [sp, #16]
  rq.rlen = sizeof(resp);
 800b7e4:	9309      	str	r3, [sp, #36]	; 0x24
  if (hci_send_req(&rq, FALSE) < 0)
 800b7e6:	f000 fd1f 	bl	800c228 <hci_send_req>
 800b7ea:	2800      	cmp	r0, #0
 800b7ec:	db19      	blt.n	800b822 <hci_read_local_version_information+0x66>
    return BLE_STATUS_TIMEOUT;
  if (resp.Status) {
 800b7ee:	f89d 0004 	ldrb.w	r0, [sp, #4]
 800b7f2:	b9a0      	cbnz	r0, 800b81e <hci_read_local_version_information+0x62>
    return resp.Status;
  }
  *HCI_Version = btoh(resp.HCI_Version, 1);
 800b7f4:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800b7f8:	703b      	strb	r3, [r7, #0]
  *HCI_Revision = btoh(resp.HCI_Revision, 2);
 800b7fa:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800b7fe:	8033      	strh	r3, [r6, #0]
  *LMP_PAL_Version = btoh(resp.LMP_PAL_Version, 1);
 800b800:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800b804:	702b      	strb	r3, [r5, #0]
  *Manufacturer_Name = btoh(resp.Manufacturer_Name, 2);
 800b806:	9b02      	ldr	r3, [sp, #8]
  *LMP_PAL_Subversion = btoh(resp.LMP_PAL_Subversion, 2);
 800b808:	f89d 200c 	ldrb.w	r2, [sp, #12]
  *Manufacturer_Name = btoh(resp.Manufacturer_Name, 2);
 800b80c:	f3c3 230f 	ubfx	r3, r3, #8, #16
 800b810:	8023      	strh	r3, [r4, #0]
  *LMP_PAL_Subversion = btoh(resp.LMP_PAL_Subversion, 2);
 800b812:	f89d 300b 	ldrb.w	r3, [sp, #11]
 800b816:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800b81a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800b81c:	8013      	strh	r3, [r2, #0]
  return BLE_STATUS_SUCCESS;
}
 800b81e:	b00b      	add	sp, #44	; 0x2c
 800b820:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return BLE_STATUS_TIMEOUT;
 800b822:	20ff      	movs	r0, #255	; 0xff
 800b824:	e7fb      	b.n	800b81e <hci_read_local_version_information+0x62>
 800b826:	bf00      	nop
 800b828:	00010004 	.word	0x00010004

0800b82c <hci_le_set_scan_response_data>:
  }
  return BLE_STATUS_SUCCESS;
}
tBleStatus hci_le_set_scan_response_data(uint8_t Scan_Response_Data_Length,
                                         uint8_t Scan_Response_Data[31])
{
 800b82c:	b530      	push	{r4, r5, lr}
 800b82e:	b0c9      	sub	sp, #292	; 0x124
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  hci_le_set_scan_response_data_cp0 *cp0 = (hci_le_set_scan_response_data_cp0*)(cmd_buffer);
  tBleStatus status = 0;
 800b830:	f10d 0403 	add.w	r4, sp, #3
 800b834:	2300      	movs	r3, #0
  uint8_t index_input = 0;
  cp0->Scan_Response_Data_Length = htob(Scan_Response_Data_Length, 1);
 800b836:	aa07      	add	r2, sp, #28
  tBleStatus status = 0;
 800b838:	7023      	strb	r3, [r4, #0]
  cp0->Scan_Response_Data_Length = htob(Scan_Response_Data_Length, 1);
 800b83a:	7010      	strb	r0, [r2, #0]
  index_input += 1;
  /* FIX: check on Scan_Response_Data introduced to fix issue in projects for Cortex-M33 */
  if (Scan_Response_Data != NULL) {
 800b83c:	b169      	cbz	r1, 800b85a <hci_le_set_scan_response_data+0x2e>
    BLUENRG_memcpy((void *) &cp0->Scan_Response_Data, (const void *) Scan_Response_Data, 31);
 800b83e:	f10d 031d 	add.w	r3, sp, #29
 800b842:	f101 001c 	add.w	r0, r1, #28
 800b846:	f851 5b04 	ldr.w	r5, [r1], #4
 800b84a:	f843 5b04 	str.w	r5, [r3], #4
 800b84e:	4281      	cmp	r1, r0
 800b850:	d1f9      	bne.n	800b846 <hci_le_set_scan_response_data+0x1a>
 800b852:	8808      	ldrh	r0, [r1, #0]
 800b854:	8018      	strh	r0, [r3, #0]
 800b856:	7889      	ldrb	r1, [r1, #2]
 800b858:	7099      	strb	r1, [r3, #2]
  }
  index_input += 31;
  BLUENRG_memset(&rq, 0, sizeof(rq));
  rq.ogf = 0x08;
 800b85a:	4b09      	ldr	r3, [pc, #36]	; (800b880 <hci_le_set_scan_response_data+0x54>)
  rq.ocf = 0x009;
  rq.cparam = cmd_buffer;
 800b85c:	9203      	str	r2, [sp, #12]
  rq.ogf = 0x08;
 800b85e:	2100      	movs	r1, #0
 800b860:	e9cd 3101 	strd	r3, r1, [sp, #4]
  rq.clen = index_input;
 800b864:	2320      	movs	r3, #32
  rq.rparam = &status;
 800b866:	e9cd 3404 	strd	r3, r4, [sp, #16]
  rq.rlen = 1;
  if (hci_send_req(&rq, FALSE) < 0)
 800b86a:	a801      	add	r0, sp, #4
  rq.rlen = 1;
 800b86c:	2301      	movs	r3, #1
 800b86e:	9306      	str	r3, [sp, #24]
  if (hci_send_req(&rq, FALSE) < 0)
 800b870:	f000 fcda 	bl	800c228 <hci_send_req>
 800b874:	2800      	cmp	r0, #0
    return BLE_STATUS_TIMEOUT;
  if (status) {
 800b876:	bfac      	ite	ge
 800b878:	7820      	ldrbge	r0, [r4, #0]
    return BLE_STATUS_TIMEOUT;
 800b87a:	20ff      	movlt	r0, #255	; 0xff
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
 800b87c:	b049      	add	sp, #292	; 0x124
 800b87e:	bd30      	pop	{r4, r5, pc}
 800b880:	00090008 	.word	0x00090008

0800b884 <hci_le_rand>:
  }
  BLUENRG_memcpy((void *) Encrypted_Data, (const void *) resp.Encrypted_Data, 16);
  return BLE_STATUS_SUCCESS;
}
tBleStatus hci_le_rand(uint8_t Random_Number[8])
{
 800b884:	b510      	push	{r4, lr}
 800b886:	b08a      	sub	sp, #40	; 0x28
  struct hci_request rq;
  hci_le_rand_rp0 resp;
  BLUENRG_memset(&resp, 0, sizeof(resp));
 800b888:	ab01      	add	r3, sp, #4
 800b88a:	2100      	movs	r1, #0
  BLUENRG_memset(&rq, 0, sizeof(rq));
  rq.ogf = 0x08;
 800b88c:	4a0f      	ldr	r2, [pc, #60]	; (800b8cc <hci_le_rand+0x48>)
  rq.ocf = 0x018;
  rq.rparam = &resp;
 800b88e:	9308      	str	r3, [sp, #32]
{
 800b890:	4604      	mov	r4, r0
  rq.rlen = sizeof(resp);
 800b892:	2309      	movs	r3, #9
  if (hci_send_req(&rq, FALSE) < 0)
 800b894:	a804      	add	r0, sp, #16
  BLUENRG_memset(&resp, 0, sizeof(resp));
 800b896:	e9cd 1101 	strd	r1, r1, [sp, #4]
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800b89a:	e9cd 1105 	strd	r1, r1, [sp, #20]
  BLUENRG_memset(&resp, 0, sizeof(resp));
 800b89e:	f88d 100c 	strb.w	r1, [sp, #12]
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800b8a2:	9107      	str	r1, [sp, #28]
  rq.ogf = 0x08;
 800b8a4:	9204      	str	r2, [sp, #16]
  rq.rlen = sizeof(resp);
 800b8a6:	9309      	str	r3, [sp, #36]	; 0x24
  if (hci_send_req(&rq, FALSE) < 0)
 800b8a8:	f000 fcbe 	bl	800c228 <hci_send_req>
 800b8ac:	2800      	cmp	r0, #0
 800b8ae:	db0a      	blt.n	800b8c6 <hci_le_rand+0x42>
    return BLE_STATUS_TIMEOUT;
  if (resp.Status) {
 800b8b0:	f89d 0004 	ldrb.w	r0, [sp, #4]
 800b8b4:	b928      	cbnz	r0, 800b8c2 <hci_le_rand+0x3e>
    return resp.Status;
  }
  BLUENRG_memcpy((void *) Random_Number, (const void *) resp.Random_Number, 8);
 800b8b6:	f8dd 3005 	ldr.w	r3, [sp, #5]
 800b8ba:	6023      	str	r3, [r4, #0]
 800b8bc:	f8dd 3009 	ldr.w	r3, [sp, #9]
 800b8c0:	6063      	str	r3, [r4, #4]
  return BLE_STATUS_SUCCESS;
}
 800b8c2:	b00a      	add	sp, #40	; 0x28
 800b8c4:	bd10      	pop	{r4, pc}
    return BLE_STATUS_TIMEOUT;
 800b8c6:	20ff      	movs	r0, #255	; 0xff
 800b8c8:	e7fb      	b.n	800b8c2 <hci_le_rand+0x3e>
 800b8ca:	bf00      	nop
 800b8cc:	00180008 	.word	0x00180008

0800b8d0 <aci_gap_set_discoverable>:
                                    uint8_t Local_Name[],
                                    uint8_t Service_Uuid_length,
                                    uint8_t Service_Uuid_List[],
                                    uint16_t Slave_Conn_Interval_Min,
                                    uint16_t Slave_Conn_Interval_Max)
{
 800b8d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8d4:	b0cb      	sub	sp, #300	; 0x12c
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 800b8d6:	ac09      	add	r4, sp, #36	; 0x24
{
 800b8d8:	f89d 5154 	ldrb.w	r5, [sp, #340]	; 0x154
 800b8dc:	f89d 615c 	ldrb.w	r6, [sp, #348]	; 0x15c
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
  tBleStatus status = 0;
  uint8_t index_input = 0;
  cp0->Advertising_Type = htob(Advertising_Type, 1);
 800b8e0:	f88d 0024 	strb.w	r0, [sp, #36]	; 0x24
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 800b8e4:	f105 0a08 	add.w	sl, r5, #8
  tBleStatus status = 0;
 800b8e8:	f04f 0900 	mov.w	r9, #0
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 800b8ec:	eb04 070a 	add.w	r7, r4, sl
  index_input += 1;
  cp0->Advertising_Interval_Min = htob(Advertising_Interval_Min, 2);
 800b8f0:	f8ad 1025 	strh.w	r1, [sp, #37]	; 0x25
  index_input += 2;
  cp0->Advertising_Interval_Max = htob(Advertising_Interval_Max, 2);
 800b8f4:	f8ad 2027 	strh.w	r2, [sp, #39]	; 0x27
  index_input += 1;
  cp0->Local_Name_Length = htob(Local_Name_Length, 1);
  index_input += 1;
  /* var_len_data input */
  {
    BLUENRG_memcpy((void *) &cp0->Local_Name, (const void *) Local_Name, Local_Name_Length*sizeof(uint8_t));
 800b8f8:	9956      	ldr	r1, [sp, #344]	; 0x158
  cp0->Own_Address_Type = htob(Own_Address_Type, 1);
 800b8fa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
    BLUENRG_memcpy((void *) &cp0->Local_Name, (const void *) Local_Name, Local_Name_Length*sizeof(uint8_t));
 800b8fe:	462a      	mov	r2, r5
  cp0->Advertising_Filter_Policy = htob(Advertising_Filter_Policy, 1);
 800b900:	f89d 3150 	ldrb.w	r3, [sp, #336]	; 0x150
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 800b904:	9701      	str	r7, [sp, #4]
    BLUENRG_memcpy((void *) &cp0->Local_Name, (const void *) Local_Name, Local_Name_Length*sizeof(uint8_t));
 800b906:	a80b      	add	r0, sp, #44	; 0x2c
  cp0->Advertising_Filter_Policy = htob(Advertising_Filter_Policy, 1);
 800b908:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
  cp0->Local_Name_Length = htob(Local_Name_Length, 1);
 800b90c:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
  tBleStatus status = 0;
 800b910:	f88d 900b 	strb.w	r9, [sp, #11]
    BLUENRG_memcpy((void *) &cp0->Local_Name, (const void *) Local_Name, Local_Name_Length*sizeof(uint8_t));
 800b914:	f00e f884 	bl	8019a20 <memcpy>
    index_input += Local_Name_Length*sizeof(uint8_t);
    {
      cp1->Service_Uuid_length = htob(Service_Uuid_length, 1);
    }
    index_input += 1;
    BLUENRG_memcpy((void *) &cp1->Service_Uuid_List, (const void *) Service_Uuid_List, Service_Uuid_length*sizeof(uint8_t));
 800b918:	9b01      	ldr	r3, [sp, #4]
 800b91a:	9958      	ldr	r1, [sp, #352]	; 0x160
      cp1->Service_Uuid_length = htob(Service_Uuid_length, 1);
 800b91c:	f804 600a 	strb.w	r6, [r4, sl]
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 800b920:	f106 0709 	add.w	r7, r6, #9
 800b924:	442f      	add	r7, r5
    BLUENRG_memcpy((void *) &cp1->Service_Uuid_List, (const void *) Service_Uuid_List, Service_Uuid_length*sizeof(uint8_t));
 800b926:	4632      	mov	r2, r6
 800b928:	1c58      	adds	r0, r3, #1
 800b92a:	f00e f879 	bl	8019a20 <memcpy>
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 800b92e:	eb04 0b07 	add.w	fp, r4, r7
    index_input += Service_Uuid_length*sizeof(uint8_t);
    {
      cp2->Slave_Conn_Interval_Min = htob(Slave_Conn_Interval_Min, 2);
 800b932:	f8bd 3164 	ldrh.w	r3, [sp, #356]	; 0x164
 800b936:	53e3      	strh	r3, [r4, r7]
    }
    index_input += 2;
    {
      cp2->Slave_Conn_Interval_Max = htob(Slave_Conn_Interval_Max, 2);
    }
    index_input += 2;
 800b938:	360d      	adds	r6, #13
      cp2->Slave_Conn_Interval_Max = htob(Slave_Conn_Interval_Max, 2);
 800b93a:	f8bd 3168 	ldrh.w	r3, [sp, #360]	; 0x168
 800b93e:	f8ab 3002 	strh.w	r3, [fp, #2]
    index_input += 2;
 800b942:	4435      	add	r5, r6
  }
  BLUENRG_memset(&rq, 0, sizeof(rq));
  rq.ogf = 0x3f;
 800b944:	4b0b      	ldr	r3, [pc, #44]	; (800b974 <aci_gap_set_discoverable+0xa4>)
 800b946:	9303      	str	r3, [sp, #12]
  tBleStatus status = 0;
 800b948:	f10d 080b 	add.w	r8, sp, #11
  rq.ocf = 0x083;
  rq.cparam = cmd_buffer;
  rq.clen = index_input;
  rq.rparam = &status;
  rq.rlen = 1;
 800b94c:	2301      	movs	r3, #1
  rq.clen = index_input;
 800b94e:	b2ed      	uxtb	r5, r5
  if (hci_send_req(&rq, FALSE) < 0)
 800b950:	4649      	mov	r1, r9
 800b952:	a803      	add	r0, sp, #12
  rq.rparam = &status;
 800b954:	e9cd 5806 	strd	r5, r8, [sp, #24]
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800b958:	f8cd 9010 	str.w	r9, [sp, #16]
  rq.cparam = cmd_buffer;
 800b95c:	9405      	str	r4, [sp, #20]
  rq.rlen = 1;
 800b95e:	9308      	str	r3, [sp, #32]
  if (hci_send_req(&rq, FALSE) < 0)
 800b960:	f000 fc62 	bl	800c228 <hci_send_req>
 800b964:	4548      	cmp	r0, r9
    return BLE_STATUS_TIMEOUT;
  if (status) {
 800b966:	bfac      	ite	ge
 800b968:	f898 0000 	ldrbge.w	r0, [r8]
    return BLE_STATUS_TIMEOUT;
 800b96c:	20ff      	movlt	r0, #255	; 0xff
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
 800b96e:	b04b      	add	sp, #300	; 0x12c
 800b970:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b974:	0083003f 	.word	0x0083003f

0800b978 <aci_gap_set_io_capability>:
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
tBleStatus aci_gap_set_io_capability(uint8_t IO_Capability)
{
 800b978:	b510      	push	{r4, lr}
 800b97a:	b0c8      	sub	sp, #288	; 0x120
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
  tBleStatus status = 0;
  uint8_t index_input = 0;
  cp0->IO_Capability = htob(IO_Capability, 1);
 800b97c:	ab07      	add	r3, sp, #28
  tBleStatus status = 0;
 800b97e:	2100      	movs	r1, #0
  index_input += 1;
  BLUENRG_memset(&rq, 0, sizeof(rq));
  rq.ogf = 0x3f;
 800b980:	4a0b      	ldr	r2, [pc, #44]	; (800b9b0 <aci_gap_set_io_capability+0x38>)
  cp0->IO_Capability = htob(IO_Capability, 1);
 800b982:	f88d 001c 	strb.w	r0, [sp, #28]
  tBleStatus status = 0;
 800b986:	f10d 0403 	add.w	r4, sp, #3
  rq.ocf = 0x085;
  rq.cparam = cmd_buffer;
 800b98a:	9303      	str	r3, [sp, #12]
  rq.clen = index_input;
  rq.rparam = &status;
  rq.rlen = 1;
  if (hci_send_req(&rq, FALSE) < 0)
 800b98c:	a801      	add	r0, sp, #4
  rq.clen = index_input;
 800b98e:	2301      	movs	r3, #1
  rq.rparam = &status;
 800b990:	e9cd 3404 	strd	r3, r4, [sp, #16]
  tBleStatus status = 0;
 800b994:	f88d 1003 	strb.w	r1, [sp, #3]
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800b998:	9102      	str	r1, [sp, #8]
  rq.ogf = 0x3f;
 800b99a:	9201      	str	r2, [sp, #4]
  rq.rlen = 1;
 800b99c:	9306      	str	r3, [sp, #24]
  if (hci_send_req(&rq, FALSE) < 0)
 800b99e:	f000 fc43 	bl	800c228 <hci_send_req>
 800b9a2:	2800      	cmp	r0, #0
    return BLE_STATUS_TIMEOUT;
  if (status) {
 800b9a4:	bfac      	ite	ge
 800b9a6:	7820      	ldrbge	r0, [r4, #0]
    return BLE_STATUS_TIMEOUT;
 800b9a8:	20ff      	movlt	r0, #255	; 0xff
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
 800b9aa:	b048      	add	sp, #288	; 0x120
 800b9ac:	bd10      	pop	{r4, pc}
 800b9ae:	bf00      	nop
 800b9b0:	0085003f 	.word	0x0085003f

0800b9b4 <aci_gap_set_authentication_requirement>:
                                                  uint8_t Min_Encryption_Key_Size,
                                                  uint8_t Max_Encryption_Key_Size,
                                                  uint8_t Use_Fixed_Pin,
                                                  uint32_t Fixed_Pin,
                                                  uint8_t Identity_Address_Type)
{
 800b9b4:	b570      	push	{r4, r5, r6, lr}
 800b9b6:	b0c8      	sub	sp, #288	; 0x120
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
  tBleStatus status = 0;
 800b9b8:	f10d 0503 	add.w	r5, sp, #3
  index_input += 1;
  cp0->MITM_Mode = htob(MITM_Mode, 1);
  index_input += 1;
  cp0->SC_Support = htob(SC_Support, 1);
  index_input += 1;
  cp0->KeyPress_Notification_Support = htob(KeyPress_Notification_Support, 1);
 800b9bc:	f88d 301f 	strb.w	r3, [sp, #31]
  index_input += 1;
  cp0->Min_Encryption_Key_Size = htob(Min_Encryption_Key_Size, 1);
 800b9c0:	f89d 3130 	ldrb.w	r3, [sp, #304]	; 0x130
 800b9c4:	f88d 3020 	strb.w	r3, [sp, #32]
  index_input += 1;
  cp0->Max_Encryption_Key_Size = htob(Max_Encryption_Key_Size, 1);
 800b9c8:	f89d 3134 	ldrb.w	r3, [sp, #308]	; 0x134
 800b9cc:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
  index_input += 1;
  cp0->Use_Fixed_Pin = htob(Use_Fixed_Pin, 1);
 800b9d0:	f89d 3138 	ldrb.w	r3, [sp, #312]	; 0x138
 800b9d4:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
  index_input += 1;
  cp0->Fixed_Pin = htob(Fixed_Pin, 4);
 800b9d8:	9b4f      	ldr	r3, [sp, #316]	; 0x13c
 800b9da:	f8cd 3023 	str.w	r3, [sp, #35]	; 0x23
  index_input += 4;
  cp0->Identity_Address_Type = htob(Identity_Address_Type, 1);
 800b9de:	f89d 3140 	ldrb.w	r3, [sp, #320]	; 0x140
 800b9e2:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
  index_input += 1;
  BLUENRG_memset(&rq, 0, sizeof(rq));
  rq.ogf = 0x3f;
 800b9e6:	4b0e      	ldr	r3, [pc, #56]	; (800ba20 <aci_gap_set_authentication_requirement+0x6c>)
 800b9e8:	9301      	str	r3, [sp, #4]
  rq.ocf = 0x086;
  rq.cparam = cmd_buffer;
  rq.clen = index_input;
 800b9ea:	230c      	movs	r3, #12
  rq.rparam = &status;
 800b9ec:	e9cd 3504 	strd	r3, r5, [sp, #16]
{
 800b9f0:	460e      	mov	r6, r1
  cp0->Bonding_Mode = htob(Bonding_Mode, 1);
 800b9f2:	f88d 001c 	strb.w	r0, [sp, #28]
  tBleStatus status = 0;
 800b9f6:	2100      	movs	r1, #0
  rq.rlen = 1;
 800b9f8:	2301      	movs	r3, #1
  cp0->Bonding_Mode = htob(Bonding_Mode, 1);
 800b9fa:	ac07      	add	r4, sp, #28
  if (hci_send_req(&rq, FALSE) < 0)
 800b9fc:	a801      	add	r0, sp, #4
  tBleStatus status = 0;
 800b9fe:	f88d 1003 	strb.w	r1, [sp, #3]
  cp0->MITM_Mode = htob(MITM_Mode, 1);
 800ba02:	f88d 601d 	strb.w	r6, [sp, #29]
  cp0->SC_Support = htob(SC_Support, 1);
 800ba06:	f88d 201e 	strb.w	r2, [sp, #30]
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800ba0a:	9102      	str	r1, [sp, #8]
  rq.cparam = cmd_buffer;
 800ba0c:	9403      	str	r4, [sp, #12]
  rq.rlen = 1;
 800ba0e:	9306      	str	r3, [sp, #24]
  if (hci_send_req(&rq, FALSE) < 0)
 800ba10:	f000 fc0a 	bl	800c228 <hci_send_req>
 800ba14:	2800      	cmp	r0, #0
    return BLE_STATUS_TIMEOUT;
  if (status) {
 800ba16:	bfac      	ite	ge
 800ba18:	7828      	ldrbge	r0, [r5, #0]
    return BLE_STATUS_TIMEOUT;
 800ba1a:	20ff      	movlt	r0, #255	; 0xff
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
 800ba1c:	b048      	add	sp, #288	; 0x120
 800ba1e:	bd70      	pop	{r4, r5, r6, pc}
 800ba20:	0086003f 	.word	0x0086003f

0800ba24 <aci_gap_pass_key_resp>:
  }
  return BLE_STATUS_SUCCESS;
}
tBleStatus aci_gap_pass_key_resp(uint16_t Connection_Handle,
                                 uint32_t Pass_Key)
{
 800ba24:	b510      	push	{r4, lr}
 800ba26:	b0c8      	sub	sp, #288	; 0x120
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gap_pass_key_resp_cp0 *cp0 = (aci_gap_pass_key_resp_cp0*)(cmd_buffer);
  tBleStatus status = 0;
  uint8_t index_input = 0;
  cp0->Connection_Handle = htob(Connection_Handle, 2);
 800ba28:	aa07      	add	r2, sp, #28
  tBleStatus status = 0;
 800ba2a:	2300      	movs	r3, #0
 800ba2c:	f10d 0403 	add.w	r4, sp, #3
  index_input += 2;
  cp0->Pass_Key = htob(Pass_Key, 4);
 800ba30:	f8cd 101e 	str.w	r1, [sp, #30]
  index_input += 4;
  BLUENRG_memset(&rq, 0, sizeof(rq));
  rq.ogf = 0x3f;
  rq.ocf = 0x088;
  rq.cparam = cmd_buffer;
 800ba34:	9203      	str	r2, [sp, #12]
  rq.ogf = 0x3f;
 800ba36:	490b      	ldr	r1, [pc, #44]	; (800ba64 <aci_gap_pass_key_resp+0x40>)
  cp0->Connection_Handle = htob(Connection_Handle, 2);
 800ba38:	f8ad 001c 	strh.w	r0, [sp, #28]
  rq.clen = index_input;
 800ba3c:	2206      	movs	r2, #6
  rq.rparam = &status;
 800ba3e:	e9cd 2404 	strd	r2, r4, [sp, #16]
  rq.ogf = 0x3f;
 800ba42:	9101      	str	r1, [sp, #4]
  rq.rlen = 1;
 800ba44:	2201      	movs	r2, #1
  if (hci_send_req(&rq, FALSE) < 0)
 800ba46:	4619      	mov	r1, r3
 800ba48:	a801      	add	r0, sp, #4
  tBleStatus status = 0;
 800ba4a:	f88d 3003 	strb.w	r3, [sp, #3]
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800ba4e:	9302      	str	r3, [sp, #8]
  rq.rlen = 1;
 800ba50:	9206      	str	r2, [sp, #24]
  if (hci_send_req(&rq, FALSE) < 0)
 800ba52:	f000 fbe9 	bl	800c228 <hci_send_req>
 800ba56:	2800      	cmp	r0, #0
    return BLE_STATUS_TIMEOUT;
  if (status) {
 800ba58:	bfac      	ite	ge
 800ba5a:	7820      	ldrbge	r0, [r4, #0]
    return BLE_STATUS_TIMEOUT;
 800ba5c:	20ff      	movlt	r0, #255	; 0xff
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
 800ba5e:	b048      	add	sp, #288	; 0x120
 800ba60:	bd10      	pop	{r4, pc}
 800ba62:	bf00      	nop
 800ba64:	0088003f 	.word	0x0088003f

0800ba68 <aci_gap_init>:
                        uint8_t privacy_enabled,
                        uint8_t device_name_char_len,
                        uint16_t *Service_Handle,
                        uint16_t *Dev_Name_Char_Handle,
                        uint16_t *Appearance_Char_Handle)
{
 800ba68:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ba6a:	b0cb      	sub	sp, #300	; 0x12c
 800ba6c:	461e      	mov	r6, r3
  cp0->privacy_enabled = htob(privacy_enabled, 1);
  index_input += 1;
  cp0->device_name_char_len = htob(device_name_char_len, 1);
  index_input += 1;
  BLUENRG_memset(&rq, 0, sizeof(rq));
  rq.ogf = 0x3f;
 800ba6e:	4b18      	ldr	r3, [pc, #96]	; (800bad0 <aci_gap_init+0x68>)
 800ba70:	9303      	str	r3, [sp, #12]
  BLUENRG_memset(&resp, 0, sizeof(resp));
 800ba72:	ac01      	add	r4, sp, #4
  rq.ocf = 0x08a;
  rq.cparam = cmd_buffer;
  rq.clen = index_input;
 800ba74:	2303      	movs	r3, #3
  rq.rparam = &resp;
 800ba76:	e9cd 3406 	strd	r3, r4, [sp, #24]
{
 800ba7a:	460f      	mov	r7, r1
  cp0->Role = htob(Role, 1);
 800ba7c:	f88d 0024 	strb.w	r0, [sp, #36]	; 0x24
  BLUENRG_memset(&resp, 0, sizeof(resp));
 800ba80:	2100      	movs	r1, #0
  rq.rlen = sizeof(resp);
 800ba82:	2307      	movs	r3, #7
  cp0->Role = htob(Role, 1);
 800ba84:	ad09      	add	r5, sp, #36	; 0x24
  if (hci_send_req(&rq, FALSE) < 0)
 800ba86:	a803      	add	r0, sp, #12
  BLUENRG_memset(&resp, 0, sizeof(resp));
 800ba88:	9101      	str	r1, [sp, #4]
  cp0->privacy_enabled = htob(privacy_enabled, 1);
 800ba8a:	f88d 7025 	strb.w	r7, [sp, #37]	; 0x25
  BLUENRG_memset(&resp, 0, sizeof(resp));
 800ba8e:	f8cd 1007 	str.w	r1, [sp, #7]
  cp0->device_name_char_len = htob(device_name_char_len, 1);
 800ba92:	f88d 2026 	strb.w	r2, [sp, #38]	; 0x26
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800ba96:	9104      	str	r1, [sp, #16]
  rq.cparam = cmd_buffer;
 800ba98:	9505      	str	r5, [sp, #20]
  rq.rlen = sizeof(resp);
 800ba9a:	9308      	str	r3, [sp, #32]
  if (hci_send_req(&rq, FALSE) < 0)
 800ba9c:	f000 fbc4 	bl	800c228 <hci_send_req>
 800baa0:	2800      	cmp	r0, #0
 800baa2:	db12      	blt.n	800baca <aci_gap_init+0x62>
    return BLE_STATUS_TIMEOUT;
  if (resp.Status) {
 800baa4:	7820      	ldrb	r0, [r4, #0]
 800baa6:	b970      	cbnz	r0, 800bac6 <aci_gap_init+0x5e>
    return resp.Status;
  }
  *Service_Handle = btoh(resp.Service_Handle, 2);
 800baa8:	6823      	ldr	r3, [r4, #0]
  *Dev_Name_Char_Handle = btoh(resp.Dev_Name_Char_Handle, 2);
 800baaa:	7922      	ldrb	r2, [r4, #4]
  *Service_Handle = btoh(resp.Service_Handle, 2);
 800baac:	f3c3 230f 	ubfx	r3, r3, #8, #16
 800bab0:	8033      	strh	r3, [r6, #0]
  *Dev_Name_Char_Handle = btoh(resp.Dev_Name_Char_Handle, 2);
 800bab2:	78e3      	ldrb	r3, [r4, #3]
 800bab4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800bab8:	9a50      	ldr	r2, [sp, #320]	; 0x140
 800baba:	8013      	strh	r3, [r2, #0]
  *Appearance_Char_Handle = btoh(resp.Appearance_Char_Handle, 2);
 800babc:	6863      	ldr	r3, [r4, #4]
 800babe:	9a51      	ldr	r2, [sp, #324]	; 0x144
 800bac0:	f3c3 230f 	ubfx	r3, r3, #8, #16
 800bac4:	8013      	strh	r3, [r2, #0]
  return BLE_STATUS_SUCCESS;
}
 800bac6:	b04b      	add	sp, #300	; 0x12c
 800bac8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return BLE_STATUS_TIMEOUT;
 800baca:	20ff      	movs	r0, #255	; 0xff
 800bacc:	e7fb      	b.n	800bac6 <aci_gap_init+0x5e>
 800bace:	bf00      	nop
 800bad0:	008a003f 	.word	0x008a003f

0800bad4 <aci_gap_set_undirected_connectable>:
}
tBleStatus aci_gap_set_undirected_connectable(uint16_t Advertising_Interval_Min,
                                              uint16_t Advertising_Interval_Max,
                                              uint8_t Own_Address_Type,
                                              uint8_t Adv_Filter_Policy)
{
 800bad4:	b570      	push	{r4, r5, r6, lr}
 800bad6:	b0c8      	sub	sp, #288	; 0x120
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gap_set_undirected_connectable_cp0 *cp0 = (aci_gap_set_undirected_connectable_cp0*)(cmd_buffer);
  tBleStatus status = 0;
 800bad8:	2600      	movs	r6, #0
  index_input += 2;
  cp0->Advertising_Interval_Max = htob(Advertising_Interval_Max, 2);
  index_input += 2;
  cp0->Own_Address_Type = htob(Own_Address_Type, 1);
  index_input += 1;
  cp0->Adv_Filter_Policy = htob(Adv_Filter_Policy, 1);
 800bada:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
  index_input += 1;
  BLUENRG_memset(&rq, 0, sizeof(rq));
  rq.ogf = 0x3f;
 800bade:	4b0f      	ldr	r3, [pc, #60]	; (800bb1c <aci_gap_set_undirected_connectable+0x48>)
 800bae0:	9301      	str	r3, [sp, #4]
  tBleStatus status = 0;
 800bae2:	f10d 0503 	add.w	r5, sp, #3
  rq.ocf = 0x08c;
  rq.cparam = cmd_buffer;
  rq.clen = index_input;
 800bae6:	2306      	movs	r3, #6
  rq.rparam = &status;
 800bae8:	e9cd 3504 	strd	r3, r5, [sp, #16]
  cp0->Advertising_Interval_Min = htob(Advertising_Interval_Min, 2);
 800baec:	f8ad 001c 	strh.w	r0, [sp, #28]
  cp0->Advertising_Interval_Max = htob(Advertising_Interval_Max, 2);
 800baf0:	f8ad 101e 	strh.w	r1, [sp, #30]
  rq.rlen = 1;
 800baf4:	2301      	movs	r3, #1
  cp0->Advertising_Interval_Min = htob(Advertising_Interval_Min, 2);
 800baf6:	ac07      	add	r4, sp, #28
  if (hci_send_req(&rq, FALSE) < 0)
 800baf8:	4631      	mov	r1, r6
 800bafa:	a801      	add	r0, sp, #4
  tBleStatus status = 0;
 800bafc:	f88d 6003 	strb.w	r6, [sp, #3]
  cp0->Own_Address_Type = htob(Own_Address_Type, 1);
 800bb00:	f88d 2020 	strb.w	r2, [sp, #32]
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800bb04:	9602      	str	r6, [sp, #8]
  rq.cparam = cmd_buffer;
 800bb06:	9403      	str	r4, [sp, #12]
  rq.rlen = 1;
 800bb08:	9306      	str	r3, [sp, #24]
  if (hci_send_req(&rq, FALSE) < 0)
 800bb0a:	f000 fb8d 	bl	800c228 <hci_send_req>
 800bb0e:	42b0      	cmp	r0, r6
    return BLE_STATUS_TIMEOUT;
  if (status) {
 800bb10:	bfac      	ite	ge
 800bb12:	7828      	ldrbge	r0, [r5, #0]
    return BLE_STATUS_TIMEOUT;
 800bb14:	20ff      	movlt	r0, #255	; 0xff
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
 800bb16:	b048      	add	sp, #288	; 0x120
 800bb18:	bd70      	pop	{r4, r5, r6, pc}
 800bb1a:	bf00      	nop
 800bb1c:	008c003f 	.word	0x008c003f

0800bb20 <aci_gap_slave_security_req>:
tBleStatus aci_gap_slave_security_req(uint16_t Connection_Handle)
{
 800bb20:	b510      	push	{r4, lr}
 800bb22:	b0c8      	sub	sp, #288	; 0x120
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gap_slave_security_req_cp0 *cp0 = (aci_gap_slave_security_req_cp0*)(cmd_buffer);
  tBleStatus status = 0;
  uint8_t index_input = 0;
  cp0->Connection_Handle = htob(Connection_Handle, 2);
 800bb24:	ab07      	add	r3, sp, #28
 800bb26:	f8ad 001c 	strh.w	r0, [sp, #28]
  index_input += 2;
  BLUENRG_memset(&rq, 0, sizeof(rq));
  rq.ogf = 0x3f;
  rq.ocf = 0x08d;
  rq.event = 0x0F;
 800bb2a:	480c      	ldr	r0, [pc, #48]	; (800bb5c <aci_gap_slave_security_req+0x3c>)
  rq.cparam = cmd_buffer;
 800bb2c:	9303      	str	r3, [sp, #12]
  tBleStatus status = 0;
 800bb2e:	f10d 0403 	add.w	r4, sp, #3
  rq.event = 0x0F;
 800bb32:	220f      	movs	r2, #15
  rq.clen = index_input;
 800bb34:	2302      	movs	r3, #2
  rq.event = 0x0F;
 800bb36:	e9cd 0201 	strd	r0, r2, [sp, #4]
  rq.rparam = &status;
 800bb3a:	e9cd 3404 	strd	r3, r4, [sp, #16]
  tBleStatus status = 0;
 800bb3e:	2100      	movs	r1, #0
  rq.rlen = 1;
 800bb40:	2301      	movs	r3, #1
  if (hci_send_req(&rq, FALSE) < 0)
 800bb42:	a801      	add	r0, sp, #4
  tBleStatus status = 0;
 800bb44:	f88d 1003 	strb.w	r1, [sp, #3]
  rq.rlen = 1;
 800bb48:	9306      	str	r3, [sp, #24]
  if (hci_send_req(&rq, FALSE) < 0)
 800bb4a:	f000 fb6d 	bl	800c228 <hci_send_req>
 800bb4e:	2800      	cmp	r0, #0
    return BLE_STATUS_TIMEOUT;
  if (status) {
 800bb50:	bfac      	ite	ge
 800bb52:	7820      	ldrbge	r0, [r4, #0]
    return BLE_STATUS_TIMEOUT;
 800bb54:	20ff      	movlt	r0, #255	; 0xff
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
 800bb56:	b048      	add	sp, #288	; 0x120
 800bb58:	bd10      	pop	{r4, pc}
 800bb5a:	bf00      	nop
 800bb5c:	008d003f 	.word	0x008d003f

0800bb60 <aci_gap_update_adv_data>:
tBleStatus aci_gap_update_adv_data(uint8_t AdvDataLen,
                                   uint8_t AdvData[])
{
 800bb60:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bb62:	b0c9      	sub	sp, #292	; 0x124
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
  tBleStatus status = 0;
 800bb64:	2600      	movs	r6, #0
  uint8_t index_input = 0;
  cp0->AdvDataLen = htob(AdvDataLen, 1);
  index_input += 1;
  /* var_len_data input */
  {
    BLUENRG_memcpy((void *) &cp0->AdvData, (const void *) AdvData, AdvDataLen*sizeof(uint8_t));
 800bb66:	4602      	mov	r2, r0
  cp0->AdvDataLen = htob(AdvDataLen, 1);
 800bb68:	f88d 001c 	strb.w	r0, [sp, #28]
{
 800bb6c:	4604      	mov	r4, r0
    BLUENRG_memcpy((void *) &cp0->AdvData, (const void *) AdvData, AdvDataLen*sizeof(uint8_t));
 800bb6e:	f10d 001d 	add.w	r0, sp, #29
  tBleStatus status = 0;
 800bb72:	f88d 6003 	strb.w	r6, [sp, #3]
    index_input += AdvDataLen*sizeof(uint8_t);
 800bb76:	3401      	adds	r4, #1
    BLUENRG_memcpy((void *) &cp0->AdvData, (const void *) AdvData, AdvDataLen*sizeof(uint8_t));
 800bb78:	f00d ff52 	bl	8019a20 <memcpy>
  }
  BLUENRG_memset(&rq, 0, sizeof(rq));
  rq.ogf = 0x3f;
 800bb7c:	4b0a      	ldr	r3, [pc, #40]	; (800bba8 <aci_gap_update_adv_data+0x48>)
 800bb7e:	9301      	str	r3, [sp, #4]
  tBleStatus status = 0;
 800bb80:	f10d 0503 	add.w	r5, sp, #3
  rq.ocf = 0x08e;
  rq.cparam = cmd_buffer;
  rq.clen = index_input;
  rq.rparam = &status;
  rq.rlen = 1;
 800bb84:	2301      	movs	r3, #1
  cp0->AdvDataLen = htob(AdvDataLen, 1);
 800bb86:	af07      	add	r7, sp, #28
  rq.clen = index_input;
 800bb88:	b2e4      	uxtb	r4, r4
  if (hci_send_req(&rq, FALSE) < 0)
 800bb8a:	4631      	mov	r1, r6
 800bb8c:	a801      	add	r0, sp, #4
  rq.rparam = &status;
 800bb8e:	e9cd 4504 	strd	r4, r5, [sp, #16]
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800bb92:	9602      	str	r6, [sp, #8]
  rq.cparam = cmd_buffer;
 800bb94:	9703      	str	r7, [sp, #12]
  rq.rlen = 1;
 800bb96:	9306      	str	r3, [sp, #24]
  if (hci_send_req(&rq, FALSE) < 0)
 800bb98:	f000 fb46 	bl	800c228 <hci_send_req>
 800bb9c:	42b0      	cmp	r0, r6
    return BLE_STATUS_TIMEOUT;
  if (status) {
 800bb9e:	bfac      	ite	ge
 800bba0:	7828      	ldrbge	r0, [r5, #0]
    return BLE_STATUS_TIMEOUT;
 800bba2:	20ff      	movlt	r0, #255	; 0xff
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
 800bba4:	b049      	add	sp, #292	; 0x124
 800bba6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bba8:	008e003f 	.word	0x008e003f

0800bbac <aci_gap_configure_whitelist>:
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
tBleStatus aci_gap_configure_whitelist(void)
{
 800bbac:	b500      	push	{lr}
 800bbae:	b089      	sub	sp, #36	; 0x24
  struct hci_request rq;
  tBleStatus status = 0;
  BLUENRG_memset(&rq, 0, sizeof(rq));
  rq.ogf = 0x3f;
 800bbb0:	4b0b      	ldr	r3, [pc, #44]	; (800bbe0 <aci_gap_configure_whitelist+0x34>)
 800bbb2:	9302      	str	r3, [sp, #8]
  rq.ocf = 0x092;
  rq.rparam = &status;
 800bbb4:	f10d 0307 	add.w	r3, sp, #7
  tBleStatus status = 0;
 800bbb8:	2100      	movs	r1, #0
  rq.rparam = &status;
 800bbba:	9306      	str	r3, [sp, #24]
  rq.rlen = 1;
  if (hci_send_req(&rq, FALSE) < 0)
 800bbbc:	a802      	add	r0, sp, #8
  rq.rlen = 1;
 800bbbe:	2301      	movs	r3, #1
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800bbc0:	e9cd 1103 	strd	r1, r1, [sp, #12]
  tBleStatus status = 0;
 800bbc4:	f88d 1007 	strb.w	r1, [sp, #7]
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800bbc8:	9105      	str	r1, [sp, #20]
  rq.rlen = 1;
 800bbca:	9307      	str	r3, [sp, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 800bbcc:	f000 fb2c 	bl	800c228 <hci_send_req>
 800bbd0:	2800      	cmp	r0, #0
    return BLE_STATUS_TIMEOUT;
  if (status) {
 800bbd2:	bfac      	ite	ge
 800bbd4:	f89d 0007 	ldrbge.w	r0, [sp, #7]
    return BLE_STATUS_TIMEOUT;
 800bbd8:	20ff      	movlt	r0, #255	; 0xff
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
 800bbda:	b009      	add	sp, #36	; 0x24
 800bbdc:	f85d fb04 	ldr.w	pc, [sp], #4
 800bbe0:	0092003f 	.word	0x0092003f

0800bbe4 <aci_gap_allow_rebond>:
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
tBleStatus aci_gap_allow_rebond(uint16_t Connection_Handle)
{
 800bbe4:	b510      	push	{r4, lr}
 800bbe6:	b0c8      	sub	sp, #288	; 0x120
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gap_allow_rebond_cp0 *cp0 = (aci_gap_allow_rebond_cp0*)(cmd_buffer);
  tBleStatus status = 0;
  uint8_t index_input = 0;
  cp0->Connection_Handle = htob(Connection_Handle, 2);
 800bbe8:	ab07      	add	r3, sp, #28
  tBleStatus status = 0;
 800bbea:	f10d 0403 	add.w	r4, sp, #3
  index_input += 2;
  BLUENRG_memset(&rq, 0, sizeof(rq));
  rq.ogf = 0x3f;
  rq.ocf = 0x095;
  rq.cparam = cmd_buffer;
 800bbee:	9303      	str	r3, [sp, #12]
  rq.clen = index_input;
 800bbf0:	2302      	movs	r3, #2
  tBleStatus status = 0;
 800bbf2:	2100      	movs	r1, #0
  rq.rparam = &status;
 800bbf4:	e9cd 3404 	strd	r3, r4, [sp, #16]
  rq.ogf = 0x3f;
 800bbf8:	4a08      	ldr	r2, [pc, #32]	; (800bc1c <aci_gap_allow_rebond+0x38>)
  cp0->Connection_Handle = htob(Connection_Handle, 2);
 800bbfa:	f8ad 001c 	strh.w	r0, [sp, #28]
  rq.rlen = 1;
 800bbfe:	2301      	movs	r3, #1
  if (hci_send_req(&rq, FALSE) < 0)
 800bc00:	a801      	add	r0, sp, #4
  tBleStatus status = 0;
 800bc02:	f88d 1003 	strb.w	r1, [sp, #3]
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800bc06:	9102      	str	r1, [sp, #8]
  rq.ogf = 0x3f;
 800bc08:	9201      	str	r2, [sp, #4]
  rq.rlen = 1;
 800bc0a:	9306      	str	r3, [sp, #24]
  if (hci_send_req(&rq, FALSE) < 0)
 800bc0c:	f000 fb0c 	bl	800c228 <hci_send_req>
 800bc10:	2800      	cmp	r0, #0
    return BLE_STATUS_TIMEOUT;
  if (status) {
 800bc12:	bfac      	ite	ge
 800bc14:	7820      	ldrbge	r0, [r4, #0]
    return BLE_STATUS_TIMEOUT;
 800bc16:	20ff      	movlt	r0, #255	; 0xff
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
 800bc18:	b048      	add	sp, #288	; 0x120
 800bc1a:	bd10      	pop	{r4, pc}
 800bc1c:	0095003f 	.word	0x0095003f

0800bc20 <aci_gap_get_bonded_devices>:
  }
  return BLE_STATUS_SUCCESS;
}
tBleStatus aci_gap_get_bonded_devices(uint8_t *Num_of_Addresses,
                                      Bonded_Device_Entry_t Bonded_Device_Entry[])
{
 800bc20:	b570      	push	{r4, r5, r6, lr}
 800bc22:	b0a6      	sub	sp, #152	; 0x98
  struct hci_request rq;
  aci_gap_get_bonded_devices_rp0 resp;
  BLUENRG_memset(&resp, 0, sizeof(resp));
 800bc24:	ab06      	add	r3, sp, #24
 800bc26:	2480      	movs	r4, #128	; 0x80
 800bc28:	4622      	mov	r2, r4
{
 800bc2a:	4606      	mov	r6, r0
 800bc2c:	460d      	mov	r5, r1
  BLUENRG_memset(&resp, 0, sizeof(resp));
 800bc2e:	4618      	mov	r0, r3
 800bc30:	2100      	movs	r1, #0
 800bc32:	f00d ff1d 	bl	8019a70 <memset>
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800bc36:	2100      	movs	r1, #0
  rq.ogf = 0x3f;
  rq.ocf = 0x0a3;
  rq.rparam = &resp;
  rq.rlen = sizeof(resp);
 800bc38:	e9cd 0404 	strd	r0, r4, [sp, #16]
  rq.ogf = 0x3f;
 800bc3c:	4a0d      	ldr	r2, [pc, #52]	; (800bc74 <aci_gap_get_bonded_devices+0x54>)
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800bc3e:	9103      	str	r1, [sp, #12]
  if (hci_send_req(&rq, FALSE) < 0)
 800bc40:	4668      	mov	r0, sp
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800bc42:	e9cd 1101 	strd	r1, r1, [sp, #4]
  rq.ogf = 0x3f;
 800bc46:	9200      	str	r2, [sp, #0]
  if (hci_send_req(&rq, FALSE) < 0)
 800bc48:	f000 faee 	bl	800c228 <hci_send_req>
 800bc4c:	2800      	cmp	r0, #0
 800bc4e:	db0f      	blt.n	800bc70 <aci_gap_get_bonded_devices+0x50>
    return BLE_STATUS_TIMEOUT;
  if (resp.Status) {
 800bc50:	f89d 4018 	ldrb.w	r4, [sp, #24]
 800bc54:	b94c      	cbnz	r4, 800bc6a <aci_gap_get_bonded_devices+0x4a>
    return resp.Status;
  }
  *Num_of_Addresses = btoh(resp.Num_of_Addresses, 1);
 800bc56:	f89d 2019 	ldrb.w	r2, [sp, #25]
 800bc5a:	7032      	strb	r2, [r6, #0]
  BLUENRG_memcpy((void *) Bonded_Device_Entry, (const void *) resp.Bonded_Device_Entry, *Num_of_Addresses*sizeof(Bonded_Device_Entry_t));
 800bc5c:	f10d 011a 	add.w	r1, sp, #26
 800bc60:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 800bc64:	4628      	mov	r0, r5
 800bc66:	f00d fedb 	bl	8019a20 <memcpy>
  return BLE_STATUS_SUCCESS;
}
 800bc6a:	4620      	mov	r0, r4
 800bc6c:	b026      	add	sp, #152	; 0x98
 800bc6e:	bd70      	pop	{r4, r5, r6, pc}
    return BLE_STATUS_TIMEOUT;
 800bc70:	24ff      	movs	r4, #255	; 0xff
 800bc72:	e7fa      	b.n	800bc6a <aci_gap_get_bonded_devices+0x4a>
 800bc74:	00a3003f 	.word	0x00a3003f

0800bc78 <aci_gap_is_device_bonded>:
tBleStatus aci_gap_is_device_bonded(uint8_t Peer_Address_Type,
                                    uint8_t Peer_Address[6])
{
 800bc78:	b510      	push	{r4, lr}
 800bc7a:	b0c8      	sub	sp, #288	; 0x120
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gap_is_device_bonded_cp0 *cp0 = (aci_gap_is_device_bonded_cp0*)(cmd_buffer);
  tBleStatus status = 0;
  uint8_t index_input = 0;
  cp0->Peer_Address_Type = htob(Peer_Address_Type, 1);
 800bc7c:	aa07      	add	r2, sp, #28
 800bc7e:	f88d 001c 	strb.w	r0, [sp, #28]
  index_input += 1;
  BLUENRG_memcpy((void *) &cp0->Peer_Address, (const void *) Peer_Address, 6);
 800bc82:	6808      	ldr	r0, [r1, #0]
 800bc84:	8889      	ldrh	r1, [r1, #4]
 800bc86:	f8ad 1021 	strh.w	r1, [sp, #33]	; 0x21
  tBleStatus status = 0;
 800bc8a:	2300      	movs	r3, #0
 800bc8c:	f10d 0403 	add.w	r4, sp, #3
  index_input += 6;
  BLUENRG_memset(&rq, 0, sizeof(rq));
  rq.ogf = 0x3f;
  rq.ocf = 0x0a4;
  rq.cparam = cmd_buffer;
 800bc90:	9203      	str	r2, [sp, #12]
  rq.ogf = 0x3f;
 800bc92:	490b      	ldr	r1, [pc, #44]	; (800bcc0 <aci_gap_is_device_bonded+0x48>)
  BLUENRG_memcpy((void *) &cp0->Peer_Address, (const void *) Peer_Address, 6);
 800bc94:	f8cd 001d 	str.w	r0, [sp, #29]
  rq.clen = index_input;
 800bc98:	2207      	movs	r2, #7
  rq.rparam = &status;
 800bc9a:	e9cd 2404 	strd	r2, r4, [sp, #16]
  rq.ogf = 0x3f;
 800bc9e:	9101      	str	r1, [sp, #4]
  rq.rlen = 1;
 800bca0:	2201      	movs	r2, #1
  if (hci_send_req(&rq, FALSE) < 0)
 800bca2:	4619      	mov	r1, r3
 800bca4:	a801      	add	r0, sp, #4
  tBleStatus status = 0;
 800bca6:	f88d 3003 	strb.w	r3, [sp, #3]
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800bcaa:	9302      	str	r3, [sp, #8]
  rq.rlen = 1;
 800bcac:	9206      	str	r2, [sp, #24]
  if (hci_send_req(&rq, FALSE) < 0)
 800bcae:	f000 fabb 	bl	800c228 <hci_send_req>
 800bcb2:	2800      	cmp	r0, #0
    return BLE_STATUS_TIMEOUT;
  if (status) {
 800bcb4:	bfac      	ite	ge
 800bcb6:	7820      	ldrbge	r0, [r4, #0]
    return BLE_STATUS_TIMEOUT;
 800bcb8:	20ff      	movlt	r0, #255	; 0xff
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
 800bcba:	b048      	add	sp, #288	; 0x120
 800bcbc:	bd10      	pop	{r4, pc}
 800bcbe:	bf00      	nop
 800bcc0:	00a4003f 	.word	0x00a4003f

0800bcc4 <aci_gap_numeric_comparison_value_confirm_yesno>:
tBleStatus aci_gap_numeric_comparison_value_confirm_yesno(uint16_t Connection_Handle,
                                                          uint8_t Confirm_Yes_No)
{
 800bcc4:	b510      	push	{r4, lr}
 800bcc6:	b0c8      	sub	sp, #288	; 0x120
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gap_numeric_comparison_value_confirm_yesno_cp0 *cp0 = (aci_gap_numeric_comparison_value_confirm_yesno_cp0*)(cmd_buffer);
  tBleStatus status = 0;
  uint8_t index_input = 0;
  cp0->Connection_Handle = htob(Connection_Handle, 2);
 800bcc8:	aa07      	add	r2, sp, #28
  tBleStatus status = 0;
 800bcca:	2300      	movs	r3, #0
 800bccc:	f10d 0403 	add.w	r4, sp, #3
  index_input += 2;
  cp0->Confirm_Yes_No = htob(Confirm_Yes_No, 1);
 800bcd0:	f88d 101e 	strb.w	r1, [sp, #30]
  index_input += 1;
  BLUENRG_memset(&rq, 0, sizeof(rq));
  rq.ogf = 0x3f;
  rq.ocf = 0x0a5;
  rq.cparam = cmd_buffer;
 800bcd4:	9203      	str	r2, [sp, #12]
  rq.ogf = 0x3f;
 800bcd6:	490b      	ldr	r1, [pc, #44]	; (800bd04 <aci_gap_numeric_comparison_value_confirm_yesno+0x40>)
  cp0->Connection_Handle = htob(Connection_Handle, 2);
 800bcd8:	f8ad 001c 	strh.w	r0, [sp, #28]
  rq.clen = index_input;
 800bcdc:	2203      	movs	r2, #3
  rq.rparam = &status;
 800bcde:	e9cd 2404 	strd	r2, r4, [sp, #16]
  rq.ogf = 0x3f;
 800bce2:	9101      	str	r1, [sp, #4]
  rq.rlen = 1;
 800bce4:	2201      	movs	r2, #1
  if (hci_send_req(&rq, FALSE) < 0)
 800bce6:	4619      	mov	r1, r3
 800bce8:	a801      	add	r0, sp, #4
  tBleStatus status = 0;
 800bcea:	f88d 3003 	strb.w	r3, [sp, #3]
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800bcee:	9302      	str	r3, [sp, #8]
  rq.rlen = 1;
 800bcf0:	9206      	str	r2, [sp, #24]
  if (hci_send_req(&rq, FALSE) < 0)
 800bcf2:	f000 fa99 	bl	800c228 <hci_send_req>
 800bcf6:	2800      	cmp	r0, #0
    return BLE_STATUS_TIMEOUT;
  if (status) {
 800bcf8:	bfac      	ite	ge
 800bcfa:	7820      	ldrbge	r0, [r4, #0]
    return BLE_STATUS_TIMEOUT;
 800bcfc:	20ff      	movlt	r0, #255	; 0xff
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
 800bcfe:	b048      	add	sp, #288	; 0x120
 800bd00:	bd10      	pop	{r4, pc}
 800bd02:	bf00      	nop
 800bd04:	00a5003f 	.word	0x00a5003f

0800bd08 <aci_gatt_init>:
  ******************************************************************************
  */
#include "ble_types.h"
#include "bluenrg1_gatt_aci.h"
tBleStatus aci_gatt_init(void)
{
 800bd08:	b500      	push	{lr}
 800bd0a:	b089      	sub	sp, #36	; 0x24
  struct hci_request rq;
  tBleStatus status = 0;
  BLUENRG_memset(&rq, 0, sizeof(rq));
  rq.ogf = 0x3f;
 800bd0c:	4b0b      	ldr	r3, [pc, #44]	; (800bd3c <aci_gatt_init+0x34>)
 800bd0e:	9302      	str	r3, [sp, #8]
  rq.ocf = 0x101;
  rq.rparam = &status;
 800bd10:	f10d 0307 	add.w	r3, sp, #7
  tBleStatus status = 0;
 800bd14:	2100      	movs	r1, #0
  rq.rparam = &status;
 800bd16:	9306      	str	r3, [sp, #24]
  rq.rlen = 1;
  if (hci_send_req(&rq, FALSE) < 0)
 800bd18:	a802      	add	r0, sp, #8
  rq.rlen = 1;
 800bd1a:	2301      	movs	r3, #1
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800bd1c:	e9cd 1103 	strd	r1, r1, [sp, #12]
  tBleStatus status = 0;
 800bd20:	f88d 1007 	strb.w	r1, [sp, #7]
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800bd24:	9105      	str	r1, [sp, #20]
  rq.rlen = 1;
 800bd26:	9307      	str	r3, [sp, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 800bd28:	f000 fa7e 	bl	800c228 <hci_send_req>
 800bd2c:	2800      	cmp	r0, #0
    return BLE_STATUS_TIMEOUT;
  if (status) {
 800bd2e:	bfac      	ite	ge
 800bd30:	f89d 0007 	ldrbge.w	r0, [sp, #7]
    return BLE_STATUS_TIMEOUT;
 800bd34:	20ff      	movlt	r0, #255	; 0xff
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
 800bd36:	b009      	add	sp, #36	; 0x24
 800bd38:	f85d fb04 	ldr.w	pc, [sp], #4
 800bd3c:	0101003f 	.word	0x0101003f

0800bd40 <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service(uint8_t Service_UUID_Type,
                                Service_UUID_t *Service_UUID,
                                uint8_t Service_Type,
                                uint8_t Max_Attribute_Records,
                                uint16_t *Service_Handle)
{
 800bd40:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 800bd44:	2801      	cmp	r0, #1
{
 800bd46:	b0c9      	sub	sp, #292	; 0x124
 800bd48:	4690      	mov	r8, r2
 800bd4a:	461e      	mov	r6, r3
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 800bd4c:	d035      	beq.n	800bdba <aci_gatt_add_service+0x7a>
 800bd4e:	2802      	cmp	r0, #2
 800bd50:	bf0c      	ite	eq
 800bd52:	2711      	moveq	r7, #17
 800bd54:	2701      	movne	r7, #1
  aci_gatt_add_service_rp0 resp;
  BLUENRG_memset(&resp, 0, sizeof(resp));
 800bd56:	2300      	movs	r3, #0
  cp0->Service_UUID_Type = htob(Service_UUID_Type, 1);
  index_input += 1;
  /* var_len_data input */
  {
    uint8_t size;
    switch (Service_UUID_Type) {
 800bd58:	2801      	cmp	r0, #1
  cp0->Service_UUID_Type = htob(Service_UUID_Type, 1);
 800bd5a:	ad07      	add	r5, sp, #28
  BLUENRG_memset(&resp, 0, sizeof(resp));
 800bd5c:	f8ad 3000 	strh.w	r3, [sp]
 800bd60:	f88d 3002 	strb.w	r3, [sp, #2]
  cp0->Service_UUID_Type = htob(Service_UUID_Type, 1);
 800bd64:	7028      	strb	r0, [r5, #0]
    switch (Service_UUID_Type) {
 800bd66:	d02a      	beq.n	800bdbe <aci_gatt_add_service+0x7e>
 800bd68:	2802      	cmp	r0, #2
 800bd6a:	d12a      	bne.n	800bdc2 <aci_gatt_add_service+0x82>
 800bd6c:	2410      	movs	r4, #16
      case 1: size = 2; break;
      case 2: size = 16; break;
      default: return BLE_STATUS_ERROR;
    }
    BLUENRG_memcpy((void *) &cp0->Service_UUID, (const void *) Service_UUID, size);
 800bd6e:	4622      	mov	r2, r4
 800bd70:	f10d 001d 	add.w	r0, sp, #29
 800bd74:	f00d fe54 	bl	8019a20 <memcpy>
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 800bd78:	eb05 0907 	add.w	r9, r5, r7
      cp1->Max_Attribute_Records = htob(Max_Attribute_Records, 1);
    }
    index_input += 1;
  }
  BLUENRG_memset(&rq, 0, sizeof(rq));
  rq.ogf = 0x3f;
 800bd7c:	4b13      	ldr	r3, [pc, #76]	; (800bdcc <aci_gatt_add_service+0x8c>)
      cp1->Service_Type = htob(Service_Type, 1);
 800bd7e:	f805 8007 	strb.w	r8, [r5, r7]
  rq.ogf = 0x3f;
 800bd82:	2100      	movs	r1, #0
 800bd84:	e9cd 3101 	strd	r3, r1, [sp, #4]
      cp1->Max_Attribute_Records = htob(Max_Attribute_Records, 1);
 800bd88:	f889 6001 	strb.w	r6, [r9, #1]
  rq.ocf = 0x102;
  rq.cparam = cmd_buffer;
  rq.clen = index_input;
  rq.rparam = &resp;
  rq.rlen = sizeof(resp);
 800bd8c:	2303      	movs	r3, #3
  rq.clen = index_input;
 800bd8e:	3403      	adds	r4, #3
  if (hci_send_req(&rq, FALSE) < 0)
 800bd90:	a801      	add	r0, sp, #4
  rq.cparam = cmd_buffer;
 800bd92:	9503      	str	r5, [sp, #12]
  rq.clen = index_input;
 800bd94:	9404      	str	r4, [sp, #16]
  rq.rparam = &resp;
 800bd96:	f8cd d014 	str.w	sp, [sp, #20]
  rq.rlen = sizeof(resp);
 800bd9a:	9306      	str	r3, [sp, #24]
  if (hci_send_req(&rq, FALSE) < 0)
 800bd9c:	f000 fa44 	bl	800c228 <hci_send_req>
 800bda0:	2800      	cmp	r0, #0
 800bda2:	db10      	blt.n	800bdc6 <aci_gatt_add_service+0x86>
    return BLE_STATUS_TIMEOUT;
  if (resp.Status) {
 800bda4:	f89d 0000 	ldrb.w	r0, [sp]
 800bda8:	b920      	cbnz	r0, 800bdb4 <aci_gatt_add_service+0x74>
    return resp.Status;
  }
  *Service_Handle = btoh(resp.Service_Handle, 2);
 800bdaa:	9b00      	ldr	r3, [sp, #0]
 800bdac:	9a50      	ldr	r2, [sp, #320]	; 0x140
 800bdae:	f3c3 230f 	ubfx	r3, r3, #8, #16
 800bdb2:	8013      	strh	r3, [r2, #0]
  return BLE_STATUS_SUCCESS;
}
 800bdb4:	b049      	add	sp, #292	; 0x124
 800bdb6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 800bdba:	2703      	movs	r7, #3
 800bdbc:	e7cb      	b.n	800bd56 <aci_gatt_add_service+0x16>
      case 1: size = 2; break;
 800bdbe:	2402      	movs	r4, #2
 800bdc0:	e7d5      	b.n	800bd6e <aci_gatt_add_service+0x2e>
    switch (Service_UUID_Type) {
 800bdc2:	2047      	movs	r0, #71	; 0x47
 800bdc4:	e7f6      	b.n	800bdb4 <aci_gatt_add_service+0x74>
    return BLE_STATUS_TIMEOUT;
 800bdc6:	20ff      	movs	r0, #255	; 0xff
 800bdc8:	e7f4      	b.n	800bdb4 <aci_gatt_add_service+0x74>
 800bdca:	bf00      	nop
 800bdcc:	0102003f 	.word	0x0102003f

0800bdd0 <aci_gatt_add_char>:
                             uint8_t Security_Permissions,
                             uint8_t GATT_Evt_Mask,
                             uint8_t Enc_Key_Size,
                             uint8_t Is_Variable,
                             uint16_t *Char_Handle)
{
 800bdd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bdd4:	460c      	mov	r4, r1
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 800bdd6:	2c01      	cmp	r4, #1
{
 800bdd8:	b0c8      	sub	sp, #288	; 0x120
 800bdda:	4611      	mov	r1, r2
 800bddc:	4698      	mov	r8, r3
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 800bdde:	d042      	beq.n	800be66 <aci_gatt_add_char+0x96>
 800bde0:	2c02      	cmp	r4, #2
 800bde2:	bf0c      	ite	eq
 800bde4:	2713      	moveq	r7, #19
 800bde6:	2703      	movne	r7, #3
  aci_gatt_add_char_rp0 resp;
  BLUENRG_memset(&resp, 0, sizeof(resp));
 800bde8:	2300      	movs	r3, #0
  cp0->Char_UUID_Type = htob(Char_UUID_Type, 1);
  index_input += 1;
  /* var_len_data input */
  {
    uint8_t size;
    switch (Char_UUID_Type) {
 800bdea:	2c01      	cmp	r4, #1
  cp0->Service_Handle = htob(Service_Handle, 2);
 800bdec:	ad07      	add	r5, sp, #28
  BLUENRG_memset(&resp, 0, sizeof(resp));
 800bdee:	f8ad 3000 	strh.w	r3, [sp]
 800bdf2:	f88d 3002 	strb.w	r3, [sp, #2]
  cp0->Service_Handle = htob(Service_Handle, 2);
 800bdf6:	8028      	strh	r0, [r5, #0]
  cp0->Char_UUID_Type = htob(Char_UUID_Type, 1);
 800bdf8:	70ac      	strb	r4, [r5, #2]
    switch (Char_UUID_Type) {
 800bdfa:	d036      	beq.n	800be6a <aci_gatt_add_char+0x9a>
 800bdfc:	2c02      	cmp	r4, #2
 800bdfe:	d136      	bne.n	800be6e <aci_gatt_add_char+0x9e>
 800be00:	2410      	movs	r4, #16
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 800be02:	19ee      	adds	r6, r5, r7
      case 1: size = 2; break;
      case 2: size = 16; break;
      default: return BLE_STATUS_ERROR;
    }
    BLUENRG_memcpy((void *) &cp0->Char_UUID, (const void *) Char_UUID, size);
 800be04:	4622      	mov	r2, r4
 800be06:	f10d 001f 	add.w	r0, sp, #31
 800be0a:	f00d fe09 	bl	8019a20 <memcpy>
    {
      cp1->Char_Value_Length = htob(Char_Value_Length, 2);
    }
    index_input += 2;
    {
      cp1->Char_Properties = htob(Char_Properties, 1);
 800be0e:	f89d 3138 	ldrb.w	r3, [sp, #312]	; 0x138
      cp1->Char_Value_Length = htob(Char_Value_Length, 2);
 800be12:	f825 8007 	strh.w	r8, [r5, r7]
      cp1->Char_Properties = htob(Char_Properties, 1);
 800be16:	70b3      	strb	r3, [r6, #2]
    }
    index_input += 1;
    {
      cp1->Security_Permissions = htob(Security_Permissions, 1);
 800be18:	f89d 313c 	ldrb.w	r3, [sp, #316]	; 0x13c
 800be1c:	70f3      	strb	r3, [r6, #3]
    }
    index_input += 1;
    {
      cp1->GATT_Evt_Mask = htob(GATT_Evt_Mask, 1);
 800be1e:	f89d 3140 	ldrb.w	r3, [sp, #320]	; 0x140
 800be22:	7133      	strb	r3, [r6, #4]
    }
    index_input += 1;
    {
      cp1->Enc_Key_Size = htob(Enc_Key_Size, 1);
 800be24:	f89d 3144 	ldrb.w	r3, [sp, #324]	; 0x144
 800be28:	7173      	strb	r3, [r6, #5]
    }
    index_input += 1;
    {
      cp1->Is_Variable = htob(Is_Variable, 1);
 800be2a:	f89d 3148 	ldrb.w	r3, [sp, #328]	; 0x148
 800be2e:	71b3      	strb	r3, [r6, #6]
    }
    index_input += 1;
  }
  BLUENRG_memset(&rq, 0, sizeof(rq));
  rq.ogf = 0x3f;
 800be30:	4b11      	ldr	r3, [pc, #68]	; (800be78 <aci_gatt_add_char+0xa8>)
  rq.ocf = 0x104;
  rq.cparam = cmd_buffer;
 800be32:	9503      	str	r5, [sp, #12]
  rq.ogf = 0x3f;
 800be34:	2100      	movs	r1, #0
 800be36:	e9cd 3101 	strd	r3, r1, [sp, #4]
  rq.clen = index_input;
 800be3a:	340a      	adds	r4, #10
  rq.rparam = &resp;
  rq.rlen = sizeof(resp);
 800be3c:	2303      	movs	r3, #3
  if (hci_send_req(&rq, FALSE) < 0)
 800be3e:	a801      	add	r0, sp, #4
  rq.clen = index_input;
 800be40:	9404      	str	r4, [sp, #16]
  rq.rparam = &resp;
 800be42:	f8cd d014 	str.w	sp, [sp, #20]
  rq.rlen = sizeof(resp);
 800be46:	9306      	str	r3, [sp, #24]
  if (hci_send_req(&rq, FALSE) < 0)
 800be48:	f000 f9ee 	bl	800c228 <hci_send_req>
 800be4c:	2800      	cmp	r0, #0
 800be4e:	db10      	blt.n	800be72 <aci_gatt_add_char+0xa2>
    return BLE_STATUS_TIMEOUT;
  if (resp.Status) {
 800be50:	f89d 0000 	ldrb.w	r0, [sp]
 800be54:	b920      	cbnz	r0, 800be60 <aci_gatt_add_char+0x90>
    return resp.Status;
  }
  *Char_Handle = btoh(resp.Char_Handle, 2);
 800be56:	9b00      	ldr	r3, [sp, #0]
 800be58:	9a53      	ldr	r2, [sp, #332]	; 0x14c
 800be5a:	f3c3 230f 	ubfx	r3, r3, #8, #16
 800be5e:	8013      	strh	r3, [r2, #0]
  return BLE_STATUS_SUCCESS;
}
 800be60:	b048      	add	sp, #288	; 0x120
 800be62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 800be66:	2705      	movs	r7, #5
 800be68:	e7be      	b.n	800bde8 <aci_gatt_add_char+0x18>
      case 1: size = 2; break;
 800be6a:	2402      	movs	r4, #2
 800be6c:	e7c9      	b.n	800be02 <aci_gatt_add_char+0x32>
    switch (Char_UUID_Type) {
 800be6e:	2047      	movs	r0, #71	; 0x47
 800be70:	e7f6      	b.n	800be60 <aci_gatt_add_char+0x90>
    return BLE_STATUS_TIMEOUT;
 800be72:	20ff      	movs	r0, #255	; 0xff
 800be74:	e7f4      	b.n	800be60 <aci_gatt_add_char+0x90>
 800be76:	bf00      	nop
 800be78:	0104003f 	.word	0x0104003f

0800be7c <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value(uint16_t Service_Handle,
                                      uint16_t Char_Handle,
                                      uint8_t Val_Offset,
                                      uint8_t Char_Value_Length,
                                      uint8_t Char_Value[])
{
 800be7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800be7e:	b0c9      	sub	sp, #292	; 0x124
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
  tBleStatus status = 0;
 800be80:	2700      	movs	r7, #0
{
 800be82:	461c      	mov	r4, r3
  uint8_t index_input = 0;
  cp0->Service_Handle = htob(Service_Handle, 2);
 800be84:	f8ad 001c 	strh.w	r0, [sp, #28]
  index_input += 2;
  cp0->Char_Handle = htob(Char_Handle, 2);
 800be88:	f8ad 101e 	strh.w	r1, [sp, #30]
  index_input += 2;
  cp0->Val_Offset = htob(Val_Offset, 1);
 800be8c:	f88d 2020 	strb.w	r2, [sp, #32]
  index_input += 1;
  cp0->Char_Value_Length = htob(Char_Value_Length, 1);
  index_input += 1;
  /* var_len_data input */
  {
    BLUENRG_memcpy((void *) &cp0->Char_Value, (const void *) Char_Value, Char_Value_Length*sizeof(uint8_t));
 800be90:	994e      	ldr	r1, [sp, #312]	; 0x138
  cp0->Char_Value_Length = htob(Char_Value_Length, 1);
 800be92:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
    BLUENRG_memcpy((void *) &cp0->Char_Value, (const void *) Char_Value, Char_Value_Length*sizeof(uint8_t));
 800be96:	461a      	mov	r2, r3
 800be98:	f10d 0022 	add.w	r0, sp, #34	; 0x22
  tBleStatus status = 0;
 800be9c:	f88d 7003 	strb.w	r7, [sp, #3]
    index_input += Char_Value_Length*sizeof(uint8_t);
 800bea0:	3406      	adds	r4, #6
    BLUENRG_memcpy((void *) &cp0->Char_Value, (const void *) Char_Value, Char_Value_Length*sizeof(uint8_t));
 800bea2:	f00d fdbd 	bl	8019a20 <memcpy>
  }
  BLUENRG_memset(&rq, 0, sizeof(rq));
  rq.ogf = 0x3f;
 800bea6:	4b0b      	ldr	r3, [pc, #44]	; (800bed4 <aci_gatt_update_char_value+0x58>)
 800bea8:	9301      	str	r3, [sp, #4]
  tBleStatus status = 0;
 800beaa:	f10d 0603 	add.w	r6, sp, #3
  rq.ocf = 0x106;
  rq.cparam = cmd_buffer;
  rq.clen = index_input;
  rq.rparam = &status;
  rq.rlen = 1;
 800beae:	2301      	movs	r3, #1
  cp0->Service_Handle = htob(Service_Handle, 2);
 800beb0:	ad07      	add	r5, sp, #28
  rq.clen = index_input;
 800beb2:	b2e4      	uxtb	r4, r4
  if (hci_send_req(&rq, FALSE) < 0)
 800beb4:	4639      	mov	r1, r7
 800beb6:	a801      	add	r0, sp, #4
  rq.rparam = &status;
 800beb8:	e9cd 4604 	strd	r4, r6, [sp, #16]
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800bebc:	9702      	str	r7, [sp, #8]
  rq.cparam = cmd_buffer;
 800bebe:	9503      	str	r5, [sp, #12]
  rq.rlen = 1;
 800bec0:	9306      	str	r3, [sp, #24]
  if (hci_send_req(&rq, FALSE) < 0)
 800bec2:	f000 f9b1 	bl	800c228 <hci_send_req>
 800bec6:	42b8      	cmp	r0, r7
    return BLE_STATUS_TIMEOUT;
  if (status) {
 800bec8:	bfac      	ite	ge
 800beca:	7830      	ldrbge	r0, [r6, #0]
    return BLE_STATUS_TIMEOUT;
 800becc:	20ff      	movlt	r0, #255	; 0xff
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
 800bece:	b049      	add	sp, #292	; 0x124
 800bed0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bed2:	bf00      	nop
 800bed4:	0106003f 	.word	0x0106003f

0800bed8 <aci_gatt_exchange_config>:
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
tBleStatus aci_gatt_exchange_config(uint16_t Connection_Handle)
{
 800bed8:	b510      	push	{r4, lr}
 800beda:	b0c8      	sub	sp, #288	; 0x120
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gatt_exchange_config_cp0 *cp0 = (aci_gatt_exchange_config_cp0*)(cmd_buffer);
  tBleStatus status = 0;
  uint8_t index_input = 0;
  cp0->Connection_Handle = htob(Connection_Handle, 2);
 800bedc:	ab07      	add	r3, sp, #28
 800bede:	f8ad 001c 	strh.w	r0, [sp, #28]
  index_input += 2;
  BLUENRG_memset(&rq, 0, sizeof(rq));
  rq.ogf = 0x3f;
  rq.ocf = 0x10b;
  rq.event = 0x0F;
 800bee2:	480c      	ldr	r0, [pc, #48]	; (800bf14 <aci_gatt_exchange_config+0x3c>)
  rq.cparam = cmd_buffer;
 800bee4:	9303      	str	r3, [sp, #12]
  tBleStatus status = 0;
 800bee6:	f10d 0403 	add.w	r4, sp, #3
  rq.event = 0x0F;
 800beea:	220f      	movs	r2, #15
  rq.clen = index_input;
 800beec:	2302      	movs	r3, #2
  rq.event = 0x0F;
 800beee:	e9cd 0201 	strd	r0, r2, [sp, #4]
  rq.rparam = &status;
 800bef2:	e9cd 3404 	strd	r3, r4, [sp, #16]
  tBleStatus status = 0;
 800bef6:	2100      	movs	r1, #0
  rq.rlen = 1;
 800bef8:	2301      	movs	r3, #1
  if (hci_send_req(&rq, FALSE) < 0)
 800befa:	a801      	add	r0, sp, #4
  tBleStatus status = 0;
 800befc:	f88d 1003 	strb.w	r1, [sp, #3]
  rq.rlen = 1;
 800bf00:	9306      	str	r3, [sp, #24]
  if (hci_send_req(&rq, FALSE) < 0)
 800bf02:	f000 f991 	bl	800c228 <hci_send_req>
 800bf06:	2800      	cmp	r0, #0
    return BLE_STATUS_TIMEOUT;
  if (status) {
 800bf08:	bfac      	ite	ge
 800bf0a:	7820      	ldrbge	r0, [r4, #0]
    return BLE_STATUS_TIMEOUT;
 800bf0c:	20ff      	movlt	r0, #255	; 0xff
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
 800bf0e:	b048      	add	sp, #288	; 0x120
 800bf10:	bd10      	pop	{r4, pc}
 800bf12:	bf00      	nop
 800bf14:	010b003f 	.word	0x010b003f

0800bf18 <aci_gatt_confirm_indication>:
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
tBleStatus aci_gatt_confirm_indication(uint16_t Connection_Handle)
{
 800bf18:	b510      	push	{r4, lr}
 800bf1a:	b0c8      	sub	sp, #288	; 0x120
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gatt_confirm_indication_cp0 *cp0 = (aci_gatt_confirm_indication_cp0*)(cmd_buffer);
  tBleStatus status = 0;
  uint8_t index_input = 0;
  cp0->Connection_Handle = htob(Connection_Handle, 2);
 800bf1c:	ab07      	add	r3, sp, #28
  tBleStatus status = 0;
 800bf1e:	f10d 0403 	add.w	r4, sp, #3
  index_input += 2;
  BLUENRG_memset(&rq, 0, sizeof(rq));
  rq.ogf = 0x3f;
  rq.ocf = 0x125;
  rq.cparam = cmd_buffer;
 800bf22:	9303      	str	r3, [sp, #12]
  rq.clen = index_input;
 800bf24:	2302      	movs	r3, #2
  tBleStatus status = 0;
 800bf26:	2100      	movs	r1, #0
  rq.rparam = &status;
 800bf28:	e9cd 3404 	strd	r3, r4, [sp, #16]
  rq.ogf = 0x3f;
 800bf2c:	4a08      	ldr	r2, [pc, #32]	; (800bf50 <aci_gatt_confirm_indication+0x38>)
  cp0->Connection_Handle = htob(Connection_Handle, 2);
 800bf2e:	f8ad 001c 	strh.w	r0, [sp, #28]
  rq.rlen = 1;
 800bf32:	2301      	movs	r3, #1
  if (hci_send_req(&rq, FALSE) < 0)
 800bf34:	a801      	add	r0, sp, #4
  tBleStatus status = 0;
 800bf36:	f88d 1003 	strb.w	r1, [sp, #3]
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800bf3a:	9102      	str	r1, [sp, #8]
  rq.ogf = 0x3f;
 800bf3c:	9201      	str	r2, [sp, #4]
  rq.rlen = 1;
 800bf3e:	9306      	str	r3, [sp, #24]
  if (hci_send_req(&rq, FALSE) < 0)
 800bf40:	f000 f972 	bl	800c228 <hci_send_req>
 800bf44:	2800      	cmp	r0, #0
    return BLE_STATUS_TIMEOUT;
  if (status) {
 800bf46:	bfac      	ite	ge
 800bf48:	7820      	ldrbge	r0, [r4, #0]
    return BLE_STATUS_TIMEOUT;
 800bf4a:	20ff      	movlt	r0, #255	; 0xff
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
 800bf4c:	b048      	add	sp, #288	; 0x120
 800bf4e:	bd10      	pop	{r4, pc}
 800bf50:	0125003f 	.word	0x0125003f

0800bf54 <aci_gatt_allow_read>:
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
tBleStatus aci_gatt_allow_read(uint16_t Connection_Handle)
{
 800bf54:	b510      	push	{r4, lr}
 800bf56:	b0c8      	sub	sp, #288	; 0x120
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gatt_allow_read_cp0 *cp0 = (aci_gatt_allow_read_cp0*)(cmd_buffer);
  tBleStatus status = 0;
  uint8_t index_input = 0;
  cp0->Connection_Handle = htob(Connection_Handle, 2);
 800bf58:	ab07      	add	r3, sp, #28
  tBleStatus status = 0;
 800bf5a:	f10d 0403 	add.w	r4, sp, #3
  index_input += 2;
  BLUENRG_memset(&rq, 0, sizeof(rq));
  rq.ogf = 0x3f;
  rq.ocf = 0x127;
  rq.cparam = cmd_buffer;
 800bf5e:	9303      	str	r3, [sp, #12]
  rq.clen = index_input;
 800bf60:	2302      	movs	r3, #2
  tBleStatus status = 0;
 800bf62:	2100      	movs	r1, #0
  rq.rparam = &status;
 800bf64:	e9cd 3404 	strd	r3, r4, [sp, #16]
  rq.ogf = 0x3f;
 800bf68:	4a08      	ldr	r2, [pc, #32]	; (800bf8c <aci_gatt_allow_read+0x38>)
  cp0->Connection_Handle = htob(Connection_Handle, 2);
 800bf6a:	f8ad 001c 	strh.w	r0, [sp, #28]
  rq.rlen = 1;
 800bf6e:	2301      	movs	r3, #1
  if (hci_send_req(&rq, FALSE) < 0)
 800bf70:	a801      	add	r0, sp, #4
  tBleStatus status = 0;
 800bf72:	f88d 1003 	strb.w	r1, [sp, #3]
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800bf76:	9102      	str	r1, [sp, #8]
  rq.ogf = 0x3f;
 800bf78:	9201      	str	r2, [sp, #4]
  rq.rlen = 1;
 800bf7a:	9306      	str	r3, [sp, #24]
  if (hci_send_req(&rq, FALSE) < 0)
 800bf7c:	f000 f954 	bl	800c228 <hci_send_req>
 800bf80:	2800      	cmp	r0, #0
    return BLE_STATUS_TIMEOUT;
  if (status) {
 800bf82:	bfac      	ite	ge
 800bf84:	7820      	ldrbge	r0, [r4, #0]
    return BLE_STATUS_TIMEOUT;
 800bf86:	20ff      	movlt	r0, #255	; 0xff
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
 800bf88:	b048      	add	sp, #288	; 0x120
 800bf8a:	bd10      	pop	{r4, pc}
 800bf8c:	0127003f 	.word	0x0127003f

0800bf90 <aci_hal_get_firmware_details>:
                                        uint8_t *BTLE_Stack_version_minor,
                                        uint8_t *BTLE_Stack_version_patch,
                                        uint8_t *BTLE_Stack_development,
                                        uint16_t *BTLE_Stack_variant,
                                        uint16_t *BTLE_Stack_Build_Number)
{
 800bf90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  struct hci_request rq;
  aci_hal_get_firmware_details_rp0 resp;
  BLUENRG_memset(&resp, 0, sizeof(resp));
 800bf94:	f04f 080f 	mov.w	r8, #15
{
 800bf98:	b08a      	sub	sp, #40	; 0x28
 800bf9a:	4607      	mov	r7, r0
 800bf9c:	460e      	mov	r6, r1
 800bf9e:	4615      	mov	r5, r2
  BLUENRG_memset(&resp, 0, sizeof(resp));
 800bfa0:	2100      	movs	r1, #0
 800bfa2:	4642      	mov	r2, r8
 800bfa4:	4668      	mov	r0, sp
{
 800bfa6:	461c      	mov	r4, r3
  BLUENRG_memset(&resp, 0, sizeof(resp));
 800bfa8:	f00d fd62 	bl	8019a70 <memset>
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800bfac:	2100      	movs	r1, #0
  rq.ogf = 0x3f;
 800bfae:	4b22      	ldr	r3, [pc, #136]	; (800c038 <aci_hal_get_firmware_details+0xa8>)
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800bfb0:	9107      	str	r1, [sp, #28]
  rq.ocf = 0x001;
  rq.rparam = &resp;
  rq.rlen = sizeof(resp);
  if (hci_send_req(&rq, FALSE) < 0)
 800bfb2:	a804      	add	r0, sp, #16
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800bfb4:	e9cd 1105 	strd	r1, r1, [sp, #20]
  rq.ogf = 0x3f;
 800bfb8:	9304      	str	r3, [sp, #16]
  rq.rparam = &resp;
 800bfba:	f8cd d020 	str.w	sp, [sp, #32]
  rq.rlen = sizeof(resp);
 800bfbe:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
  if (hci_send_req(&rq, FALSE) < 0)
 800bfc2:	f000 f931 	bl	800c228 <hci_send_req>
 800bfc6:	2800      	cmp	r0, #0
 800bfc8:	db33      	blt.n	800c032 <aci_hal_get_firmware_details+0xa2>
    return BLE_STATUS_TIMEOUT;
  if (resp.Status) {
 800bfca:	f89d 0000 	ldrb.w	r0, [sp]
 800bfce:	bb68      	cbnz	r0, 800c02c <aci_hal_get_firmware_details+0x9c>
    return resp.Status;
  }
  *DTM_version_major = btoh(resp.DTM_version_major, 1);
 800bfd0:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800bfd4:	703b      	strb	r3, [r7, #0]
  *DTM_version_minor = btoh(resp.DTM_version_minor, 1);
 800bfd6:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800bfda:	7033      	strb	r3, [r6, #0]
  *DTM_version_patch = btoh(resp.DTM_version_patch, 1);
 800bfdc:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800bfe0:	702b      	strb	r3, [r5, #0]
  *DTM_variant = btoh(resp.DTM_variant, 1);
 800bfe2:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800bfe6:	7023      	strb	r3, [r4, #0]
  *DTM_Build_Number = btoh(resp.DTM_Build_Number, 2);
 800bfe8:	9b01      	ldr	r3, [sp, #4]
 800bfea:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800bfec:	f3c3 230f 	ubfx	r3, r3, #8, #16
 800bff0:	8013      	strh	r3, [r2, #0]
  *BTLE_Stack_version_major = btoh(resp.BTLE_Stack_version_major, 1);
 800bff2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bff4:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800bff8:	701a      	strb	r2, [r3, #0]
  *BTLE_Stack_version_minor = btoh(resp.BTLE_Stack_version_minor, 1);
 800bffa:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800bffc:	f89d 2008 	ldrb.w	r2, [sp, #8]
 800c000:	701a      	strb	r2, [r3, #0]
  *BTLE_Stack_version_patch = btoh(resp.BTLE_Stack_version_patch, 1);
 800c002:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c004:	f89d 2009 	ldrb.w	r2, [sp, #9]
 800c008:	701a      	strb	r2, [r3, #0]
  *BTLE_Stack_development = btoh(resp.BTLE_Stack_development, 1);
 800c00a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c00c:	f89d 200a 	ldrb.w	r2, [sp, #10]
 800c010:	701a      	strb	r2, [r3, #0]
  *BTLE_Stack_variant = btoh(resp.BTLE_Stack_variant, 2);
 800c012:	f89d 200c 	ldrb.w	r2, [sp, #12]
 800c016:	f89d 300b 	ldrb.w	r3, [sp, #11]
 800c01a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800c01e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800c020:	8013      	strh	r3, [r2, #0]
  *BTLE_Stack_Build_Number = btoh(resp.BTLE_Stack_Build_Number, 2);
 800c022:	9b03      	ldr	r3, [sp, #12]
 800c024:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800c026:	f3c3 230f 	ubfx	r3, r3, #8, #16
 800c02a:	8013      	strh	r3, [r2, #0]
  return BLE_STATUS_SUCCESS;
}
 800c02c:	b00a      	add	sp, #40	; 0x28
 800c02e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return BLE_STATUS_TIMEOUT;
 800c032:	20ff      	movs	r0, #255	; 0xff
 800c034:	e7fa      	b.n	800c02c <aci_hal_get_firmware_details+0x9c>
 800c036:	bf00      	nop
 800c038:	0001003f 	.word	0x0001003f

0800c03c <aci_hal_write_config_data>:
tBleStatus aci_hal_write_config_data(uint8_t Offset,
                                     uint8_t Length,
                                     uint8_t Value[])
{
 800c03c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c03e:	b0c9      	sub	sp, #292	; 0x124
 800c040:	460c      	mov	r4, r1
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
  tBleStatus status = 0;
 800c042:	2600      	movs	r6, #0
{
 800c044:	4611      	mov	r1, r2
  uint8_t index_input = 0;
  cp0->Offset = htob(Offset, 1);
 800c046:	f88d 001c 	strb.w	r0, [sp, #28]
  index_input += 1;
  cp0->Length = htob(Length, 1);
  index_input += 1;
  /* var_len_data input */
  {
    BLUENRG_memcpy((void *) &cp0->Value, (const void *) Value, Length*sizeof(uint8_t));
 800c04a:	4622      	mov	r2, r4
 800c04c:	f10d 001e 	add.w	r0, sp, #30
  cp0->Length = htob(Length, 1);
 800c050:	f88d 401d 	strb.w	r4, [sp, #29]
  tBleStatus status = 0;
 800c054:	f88d 6003 	strb.w	r6, [sp, #3]
    index_input += Length*sizeof(uint8_t);
 800c058:	3402      	adds	r4, #2
    BLUENRG_memcpy((void *) &cp0->Value, (const void *) Value, Length*sizeof(uint8_t));
 800c05a:	f00d fce1 	bl	8019a20 <memcpy>
  }
  BLUENRG_memset(&rq, 0, sizeof(rq));
  rq.ogf = 0x3f;
 800c05e:	4b0b      	ldr	r3, [pc, #44]	; (800c08c <aci_hal_write_config_data+0x50>)
 800c060:	9301      	str	r3, [sp, #4]
  tBleStatus status = 0;
 800c062:	f10d 0503 	add.w	r5, sp, #3
  rq.ocf = 0x00c;
  rq.cparam = cmd_buffer;
  rq.clen = index_input;
  rq.rparam = &status;
  rq.rlen = 1;
 800c066:	2301      	movs	r3, #1
  cp0->Offset = htob(Offset, 1);
 800c068:	af07      	add	r7, sp, #28
  rq.clen = index_input;
 800c06a:	b2e4      	uxtb	r4, r4
  if (hci_send_req(&rq, FALSE) < 0)
 800c06c:	4631      	mov	r1, r6
 800c06e:	a801      	add	r0, sp, #4
  rq.rparam = &status;
 800c070:	e9cd 4504 	strd	r4, r5, [sp, #16]
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800c074:	9602      	str	r6, [sp, #8]
  rq.cparam = cmd_buffer;
 800c076:	9703      	str	r7, [sp, #12]
  rq.rlen = 1;
 800c078:	9306      	str	r3, [sp, #24]
  if (hci_send_req(&rq, FALSE) < 0)
 800c07a:	f000 f8d5 	bl	800c228 <hci_send_req>
 800c07e:	42b0      	cmp	r0, r6
    return BLE_STATUS_TIMEOUT;
  if (status) {
 800c080:	bfac      	ite	ge
 800c082:	7828      	ldrbge	r0, [r5, #0]
    return BLE_STATUS_TIMEOUT;
 800c084:	20ff      	movlt	r0, #255	; 0xff
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
 800c086:	b049      	add	sp, #292	; 0x124
 800c088:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c08a:	bf00      	nop
 800c08c:	000c003f 	.word	0x000c003f

0800c090 <aci_hal_read_config_data>:
tBleStatus aci_hal_read_config_data(uint8_t Offset,
                                    uint8_t *Data_Length,
                                    uint8_t Data[])
{
 800c090:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c094:	b0e8      	sub	sp, #416	; 0x1a0
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_hal_read_config_data_cp0 *cp0 = (aci_hal_read_config_data_cp0*)(cmd_buffer);
  aci_hal_read_config_data_rp0 resp;
  BLUENRG_memset(&resp, 0, sizeof(resp));
 800c096:	ac07      	add	r4, sp, #28
 800c098:	f04f 0880 	mov.w	r8, #128	; 0x80
{
 800c09c:	4605      	mov	r5, r0
 800c09e:	460f      	mov	r7, r1
 800c0a0:	4616      	mov	r6, r2
  BLUENRG_memset(&resp, 0, sizeof(resp));
 800c0a2:	2100      	movs	r1, #0
 800c0a4:	4642      	mov	r2, r8
 800c0a6:	4620      	mov	r0, r4
 800c0a8:	f00d fce2 	bl	8019a70 <memset>
  uint8_t index_input = 0;
  cp0->Offset = htob(Offset, 1);
  index_input += 1;
  BLUENRG_memset(&rq, 0, sizeof(rq));
  rq.ogf = 0x3f;
 800c0ac:	4a10      	ldr	r2, [pc, #64]	; (800c0f0 <aci_hal_read_config_data+0x60>)
  cp0->Offset = htob(Offset, 1);
 800c0ae:	f88d 509c 	strb.w	r5, [sp, #156]	; 0x9c
 800c0b2:	ab27      	add	r3, sp, #156	; 0x9c
  rq.ogf = 0x3f;
 800c0b4:	2100      	movs	r1, #0
  rq.ocf = 0x00d;
  rq.cparam = cmd_buffer;
 800c0b6:	9303      	str	r3, [sp, #12]
  rq.clen = index_input;
  rq.rparam = &resp;
  rq.rlen = sizeof(resp);
  if (hci_send_req(&rq, FALSE) < 0)
 800c0b8:	a801      	add	r0, sp, #4
  rq.clen = index_input;
 800c0ba:	2301      	movs	r3, #1
  rq.ogf = 0x3f;
 800c0bc:	e9cd 2101 	strd	r2, r1, [sp, #4]
  rq.rparam = &resp;
 800c0c0:	e9cd 3404 	strd	r3, r4, [sp, #16]
  rq.rlen = sizeof(resp);
 800c0c4:	f8cd 8018 	str.w	r8, [sp, #24]
  if (hci_send_req(&rq, FALSE) < 0)
 800c0c8:	f000 f8ae 	bl	800c228 <hci_send_req>
 800c0cc:	2800      	cmp	r0, #0
 800c0ce:	db0c      	blt.n	800c0ea <aci_hal_read_config_data+0x5a>
    return BLE_STATUS_TIMEOUT;
  if (resp.Status) {
 800c0d0:	7825      	ldrb	r5, [r4, #0]
 800c0d2:	b935      	cbnz	r5, 800c0e2 <aci_hal_read_config_data+0x52>
    return resp.Status;
  }
  *Data_Length = btoh(resp.Data_Length, 1);
 800c0d4:	7862      	ldrb	r2, [r4, #1]
 800c0d6:	703a      	strb	r2, [r7, #0]
  BLUENRG_memcpy((void *) Data, (const void *) resp.Data, *Data_Length*sizeof(uint8_t));
 800c0d8:	f10d 011e 	add.w	r1, sp, #30
 800c0dc:	4630      	mov	r0, r6
 800c0de:	f00d fc9f 	bl	8019a20 <memcpy>
  return BLE_STATUS_SUCCESS;
}
 800c0e2:	4628      	mov	r0, r5
 800c0e4:	b068      	add	sp, #416	; 0x1a0
 800c0e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return BLE_STATUS_TIMEOUT;
 800c0ea:	25ff      	movs	r5, #255	; 0xff
 800c0ec:	e7f9      	b.n	800c0e2 <aci_hal_read_config_data+0x52>
 800c0ee:	bf00      	nop
 800c0f0:	000d003f 	.word	0x000d003f

0800c0f4 <aci_hal_set_tx_power_level>:
tBleStatus aci_hal_set_tx_power_level(uint8_t En_High_Power,
                                      uint8_t PA_Level)
{
 800c0f4:	b510      	push	{r4, lr}
 800c0f6:	b0c8      	sub	sp, #288	; 0x120
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
  tBleStatus status = 0;
  uint8_t index_input = 0;
  cp0->En_High_Power = htob(En_High_Power, 1);
 800c0f8:	aa07      	add	r2, sp, #28
  tBleStatus status = 0;
 800c0fa:	2300      	movs	r3, #0
 800c0fc:	f10d 0403 	add.w	r4, sp, #3
  index_input += 1;
  cp0->PA_Level = htob(PA_Level, 1);
 800c100:	f88d 101d 	strb.w	r1, [sp, #29]
  index_input += 1;
  BLUENRG_memset(&rq, 0, sizeof(rq));
  rq.ogf = 0x3f;
  rq.ocf = 0x00f;
  rq.cparam = cmd_buffer;
 800c104:	9203      	str	r2, [sp, #12]
  rq.ogf = 0x3f;
 800c106:	490b      	ldr	r1, [pc, #44]	; (800c134 <aci_hal_set_tx_power_level+0x40>)
  cp0->En_High_Power = htob(En_High_Power, 1);
 800c108:	f88d 001c 	strb.w	r0, [sp, #28]
  rq.clen = index_input;
 800c10c:	2202      	movs	r2, #2
  rq.rparam = &status;
 800c10e:	e9cd 2404 	strd	r2, r4, [sp, #16]
  rq.ogf = 0x3f;
 800c112:	9101      	str	r1, [sp, #4]
  rq.rlen = 1;
 800c114:	2201      	movs	r2, #1
  if (hci_send_req(&rq, FALSE) < 0)
 800c116:	4619      	mov	r1, r3
 800c118:	a801      	add	r0, sp, #4
  tBleStatus status = 0;
 800c11a:	f88d 3003 	strb.w	r3, [sp, #3]
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800c11e:	9302      	str	r3, [sp, #8]
  rq.rlen = 1;
 800c120:	9206      	str	r2, [sp, #24]
  if (hci_send_req(&rq, FALSE) < 0)
 800c122:	f000 f881 	bl	800c228 <hci_send_req>
 800c126:	2800      	cmp	r0, #0
    return BLE_STATUS_TIMEOUT;
  if (status) {
 800c128:	bfac      	ite	ge
 800c12a:	7820      	ldrbge	r0, [r4, #0]
    return BLE_STATUS_TIMEOUT;
 800c12c:	20ff      	movlt	r0, #255	; 0xff
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
 800c12e:	b048      	add	sp, #288	; 0x120
 800c130:	bd10      	pop	{r4, pc}
 800c132:	bf00      	nop
 800c134:	000f003f 	.word	0x000f003f

0800c138 <aci_l2cap_connection_parameter_update_req>:
tBleStatus aci_l2cap_connection_parameter_update_req(uint16_t Connection_Handle,
                                                     uint16_t Conn_Interval_Min,
                                                     uint16_t Conn_Interval_Max,
                                                     uint16_t Slave_latency,
                                                     uint16_t Timeout_Multiplier)
{
 800c138:	b570      	push	{r4, r5, r6, lr}
 800c13a:	b0c8      	sub	sp, #288	; 0x120
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_l2cap_connection_parameter_update_req_cp0 *cp0 = (aci_l2cap_connection_parameter_update_req_cp0*)(cmd_buffer);
  tBleStatus status = 0;
 800c13c:	2600      	movs	r6, #0
  uint8_t index_input = 0;
  cp0->Connection_Handle = htob(Connection_Handle, 2);
  index_input += 2;
  cp0->Conn_Interval_Min = htob(Conn_Interval_Min, 2);
  index_input += 2;
  cp0->Conn_Interval_Max = htob(Conn_Interval_Max, 2);
 800c13e:	f8ad 2020 	strh.w	r2, [sp, #32]
  index_input += 2;
  cp0->Slave_latency = htob(Slave_latency, 2);
 800c142:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
  cp0->Timeout_Multiplier = htob(Timeout_Multiplier, 2);
  index_input += 2;
  BLUENRG_memset(&rq, 0, sizeof(rq));
  rq.ogf = 0x3f;
  rq.ocf = 0x181;
  rq.event = 0x0F;
 800c146:	4a10      	ldr	r2, [pc, #64]	; (800c188 <aci_l2cap_connection_parameter_update_req+0x50>)
  cp0->Timeout_Multiplier = htob(Timeout_Multiplier, 2);
 800c148:	f8bd 3130 	ldrh.w	r3, [sp, #304]	; 0x130
 800c14c:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
  rq.event = 0x0F;
 800c150:	230f      	movs	r3, #15
 800c152:	e9cd 2301 	strd	r2, r3, [sp, #4]
  tBleStatus status = 0;
 800c156:	f10d 0503 	add.w	r5, sp, #3
  rq.cparam = cmd_buffer;
  rq.clen = index_input;
 800c15a:	230a      	movs	r3, #10
  rq.rparam = &status;
 800c15c:	e9cd 3504 	strd	r3, r5, [sp, #16]
  cp0->Connection_Handle = htob(Connection_Handle, 2);
 800c160:	f8ad 001c 	strh.w	r0, [sp, #28]
  cp0->Conn_Interval_Min = htob(Conn_Interval_Min, 2);
 800c164:	f8ad 101e 	strh.w	r1, [sp, #30]
  rq.rlen = 1;
 800c168:	2301      	movs	r3, #1
  cp0->Connection_Handle = htob(Connection_Handle, 2);
 800c16a:	ac07      	add	r4, sp, #28
  if (hci_send_req(&rq, FALSE) < 0)
 800c16c:	4631      	mov	r1, r6
 800c16e:	a801      	add	r0, sp, #4
  tBleStatus status = 0;
 800c170:	f88d 6003 	strb.w	r6, [sp, #3]
  rq.cparam = cmd_buffer;
 800c174:	9403      	str	r4, [sp, #12]
  rq.rlen = 1;
 800c176:	9306      	str	r3, [sp, #24]
  if (hci_send_req(&rq, FALSE) < 0)
 800c178:	f000 f856 	bl	800c228 <hci_send_req>
 800c17c:	42b0      	cmp	r0, r6
    return BLE_STATUS_TIMEOUT;
  if (status) {
 800c17e:	bfac      	ite	ge
 800c180:	7828      	ldrbge	r0, [r5, #0]
    return BLE_STATUS_TIMEOUT;
 800c182:	20ff      	movlt	r0, #255	; 0xff
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
 800c184:	b048      	add	sp, #288	; 0x120
 800c186:	bd70      	pop	{r4, r5, r6, pc}
 800c188:	0181003f 	.word	0x0181003f

0800c18c <move_list.constprop.0>:
  *
  * @param  dest_list
  * @param  src_list
  * @retval None
  */
static void move_list(tListNode * dest_list, tListNode * src_list)
 800c18c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  pListNode tmp_node;
  
  while (!list_is_empty(src_list))
  {
    list_remove_tail(src_list, &tmp_node);
    list_insert_head(dest_list, tmp_node);
 800c18e:	4d08      	ldr	r5, [pc, #32]	; (800c1b0 <move_list.constprop.0+0x24>)
static void move_list(tListNode * dest_list, tListNode * src_list)
 800c190:	4604      	mov	r4, r0
  while (!list_is_empty(src_list))
 800c192:	4620      	mov	r0, r4
 800c194:	f000 f95d 	bl	800c452 <list_is_empty>
 800c198:	b108      	cbz	r0, 800c19e <move_list.constprop.0+0x12>
  }
}
 800c19a:	b003      	add	sp, #12
 800c19c:	bd30      	pop	{r4, r5, pc}
    list_remove_tail(src_list, &tmp_node);
 800c19e:	a901      	add	r1, sp, #4
 800c1a0:	4620      	mov	r0, r4
 800c1a2:	f000 f993 	bl	800c4cc <list_remove_tail>
    list_insert_head(dest_list, tmp_node);
 800c1a6:	9901      	ldr	r1, [sp, #4]
 800c1a8:	4628      	mov	r0, r5
 800c1aa:	f000 f95c 	bl	800c466 <list_insert_head>
 800c1ae:	e7f0      	b.n	800c192 <move_list.constprop.0+0x6>
 800c1b0:	20009994 	.word	0x20009994

0800c1b4 <hci_init>:
}

/********************** HCI Transport layer functions *****************************/

void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800c1b4:	b570      	push	{r4, r5, r6, lr}
  uint8_t index;

  if(UserEvtRx != NULL)
 800c1b6:	b108      	cbz	r0, 800c1bc <hci_init+0x8>
  {
    hciContext.UserEvtRx = UserEvtRx;
 800c1b8:	4b10      	ldr	r3, [pc, #64]	; (800c1fc <hci_init+0x48>)
 800c1ba:	61d8      	str	r0, [r3, #28]
  }
  
  /* Initialize list heads of ready and free hci data packet queues */
  list_init_head(&hciReadPktPool);
 800c1bc:	4810      	ldr	r0, [pc, #64]	; (800c200 <hci_init+0x4c>)
 800c1be:	4d11      	ldr	r5, [pc, #68]	; (800c204 <hci_init+0x50>)
  hci_tl_lowlevel_init();

  /* Initialize the queue of free hci data packets */
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
  {
    list_insert_tail(&hciReadPktPool, (tListNode *)&hciReadPacketBuffer[index]);
 800c1c0:	4e0f      	ldr	r6, [pc, #60]	; (800c200 <hci_init+0x4c>)
  list_init_head(&hciReadPktPool);
 800c1c2:	f000 f943 	bl	800c44c <list_init_head>
  list_init_head(&hciReadPktRxQueue);
 800c1c6:	4810      	ldr	r0, [pc, #64]	; (800c208 <hci_init+0x54>)
 800c1c8:	f000 f940 	bl	800c44c <list_init_head>
  hci_tl_lowlevel_init();
 800c1cc:	f007 fd8c 	bl	8013ce8 <hci_tl_lowlevel_init>
 800c1d0:	2400      	movs	r4, #0
    list_insert_tail(&hciReadPktPool, (tListNode *)&hciReadPacketBuffer[index]);
 800c1d2:	4629      	mov	r1, r5
 800c1d4:	4630      	mov	r0, r6
 800c1d6:	3401      	adds	r4, #1
 800c1d8:	f000 f951 	bl	800c47e <list_insert_tail>
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 800c1dc:	2c0a      	cmp	r4, #10
 800c1de:	f105 058c 	add.w	r5, r5, #140	; 0x8c
 800c1e2:	d1f6      	bne.n	800c1d2 <hci_init+0x1e>
  } 
  
  /* Initialize low level driver */
  if (hciContext.io.Init)  hciContext.io.Init(NULL);
 800c1e4:	4c05      	ldr	r4, [pc, #20]	; (800c1fc <hci_init+0x48>)
 800c1e6:	6822      	ldr	r2, [r4, #0]
 800c1e8:	b10a      	cbz	r2, 800c1ee <hci_init+0x3a>
 800c1ea:	2000      	movs	r0, #0
 800c1ec:	4790      	blx	r2
  if (hciContext.io.Reset) hciContext.io.Reset();
 800c1ee:	68a3      	ldr	r3, [r4, #8]
 800c1f0:	b113      	cbz	r3, 800c1f8 <hci_init+0x44>
}
 800c1f2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  if (hciContext.io.Reset) hciContext.io.Reset();
 800c1f6:	4718      	bx	r3
}
 800c1f8:	bd70      	pop	{r4, r5, r6, pc}
 800c1fa:	bf00      	nop
 800c1fc:	20001c50 	.word	0x20001c50
 800c200:	2000998c 	.word	0x2000998c
 800c204:	20001c70 	.word	0x20001c70
 800c208:	20009994 	.word	0x20009994

0800c20c <hci_register_io_bus>:

void hci_register_io_bus(tHciIO* fops)
{
  /* Register bus function */
  hciContext.io.Init    = fops->Init; 
 800c20c:	4b05      	ldr	r3, [pc, #20]	; (800c224 <hci_register_io_bus+0x18>)
 800c20e:	6802      	ldr	r2, [r0, #0]
 800c210:	601a      	str	r2, [r3, #0]
  hciContext.io.Receive = fops->Receive;  
 800c212:	68c2      	ldr	r2, [r0, #12]
 800c214:	60da      	str	r2, [r3, #12]
  hciContext.io.Send    = fops->Send;
 800c216:	6902      	ldr	r2, [r0, #16]
 800c218:	611a      	str	r2, [r3, #16]
  hciContext.io.GetTick = fops->GetTick;
 800c21a:	6982      	ldr	r2, [r0, #24]
 800c21c:	619a      	str	r2, [r3, #24]
  hciContext.io.Reset   = fops->Reset;
 800c21e:	6882      	ldr	r2, [r0, #8]
 800c220:	609a      	str	r2, [r3, #8]
}
 800c222:	4770      	bx	lr
 800c224:	20001c50 	.word	0x20001c50

0800c228 <hci_send_req>:

int hci_send_req(struct hci_request* r, BOOL async)
{
 800c228:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c22c:	b0a5      	sub	sp, #148	; 0x94
  uint8_t *ptr;
  uint16_t opcode = htobs(cmd_opcode_pack(r->ogf, r->ocf));
 800c22e:	8846      	ldrh	r6, [r0, #2]
 800c230:	f8b0 8000 	ldrh.w	r8, [r0]
  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 800c234:	4d58      	ldr	r5, [pc, #352]	; (800c398 <hci_send_req+0x170>)
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&pckt);    
 800c236:	f8df 9168 	ldr.w	r9, [pc, #360]	; 800c3a0 <hci_send_req+0x178>
  hci_event_pckt *event_pckt;
  hci_spi_pckt *hci_hdr;

  tHciDataPacket * hciReadPacket = NULL;
 800c23a:	2300      	movs	r3, #0
{
 800c23c:	4604      	mov	r4, r0
  tListNode hciTempQueue;
  
  list_init_head(&hciTempQueue);
 800c23e:	a802      	add	r0, sp, #8
{
 800c240:	460f      	mov	r7, r1
  tHciDataPacket * hciReadPacket = NULL;
 800c242:	9301      	str	r3, [sp, #4]
  list_init_head(&hciTempQueue);
 800c244:	f000 f902 	bl	800c44c <list_init_head>
  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 800c248:	4628      	mov	r0, r5
 800c24a:	f000 f950 	bl	800c4ee <list_get_size>
 800c24e:	2804      	cmp	r0, #4
 800c250:	dd53      	ble.n	800c2fa <hci_send_req+0xd2>
  hc.opcode = htobs(cmd_opcode_pack(ogf, ocf));
 800c252:	8863      	ldrh	r3, [r4, #2]
 800c254:	8822      	ldrh	r2, [r4, #0]

  free_event_list();
  
  send_cmd(r->ogf, r->ocf, r->clen, r->cparam);
 800c256:	7b25      	ldrb	r5, [r4, #12]
  BLUENRG_memcpy(payload + HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE, param, plen);
 800c258:	68a1      	ldr	r1, [r4, #8]
  BLUENRG_memcpy(payload + 1, &hc, sizeof(hc));
 800c25a:	f88d 5013 	strb.w	r5, [sp, #19]
  hc.opcode = htobs(cmd_opcode_pack(ogf, ocf));
 800c25e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c262:	ea43 2382 	orr.w	r3, r3, r2, lsl #10
  payload[0] = HCI_COMMAND_PKT;
 800c266:	2201      	movs	r2, #1
 800c268:	f88d 2010 	strb.w	r2, [sp, #16]
  BLUENRG_memcpy(payload + HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE, param, plen);
 800c26c:	a805      	add	r0, sp, #20
 800c26e:	462a      	mov	r2, r5
  BLUENRG_memcpy(payload + 1, &hc, sizeof(hc));
 800c270:	f8ad 3011 	strh.w	r3, [sp, #17]
  BLUENRG_memcpy(payload + HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE, param, plen);
 800c274:	f00d fbd4 	bl	8019a20 <memcpy>
  if (hciContext.io.Send)
 800c278:	4b48      	ldr	r3, [pc, #288]	; (800c39c <hci_send_req+0x174>)
 800c27a:	691b      	ldr	r3, [r3, #16]
 800c27c:	b113      	cbz	r3, 800c284 <hci_send_req+0x5c>
    hciContext.io.Send (payload, HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE + plen);
 800c27e:	1d29      	adds	r1, r5, #4
 800c280:	a804      	add	r0, sp, #16
 800c282:	4798      	blx	r3
  
  if (async)
 800c284:	2f00      	cmp	r7, #0
 800c286:	d177      	bne.n	800c378 <hci_send_req+0x150>
  uint16_t opcode = htobs(cmd_opcode_pack(r->ogf, r->ocf));
 800c288:	f3c6 0509 	ubfx	r5, r6, #0, #10
 800c28c:	ea45 2588 	orr.w	r5, r5, r8, lsl #10
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
      {
        goto failed;
      }
      
      if (!list_is_empty(&hciReadPktRxQueue)) 
 800c290:	4e43      	ldr	r6, [pc, #268]	; (800c3a0 <hci_send_req+0x178>)
    
    /* If there are no more packets to be processed, be sure there is at list one
       packet in the pool to process the expected event.
       If no free packets are available, discard the processed event and insert it
       into the pool. */
    if (list_is_empty(&hciReadPktPool) && list_is_empty(&hciReadPktRxQueue)) {
 800c292:	f8df 8104 	ldr.w	r8, [pc, #260]	; 800c398 <hci_send_req+0x170>
  uint16_t opcode = htobs(cmd_opcode_pack(r->ogf, r->ocf));
 800c296:	b2ad      	uxth	r5, r5
    uint32_t tickstart = HAL_GetTick();
 800c298:	f7fb f978 	bl	800758c <HAL_GetTick>
 800c29c:	4607      	mov	r7, r0
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
 800c29e:	f7fb f975 	bl	800758c <HAL_GetTick>
 800c2a2:	1bc0      	subs	r0, r0, r7
 800c2a4:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800c2a8:	d848      	bhi.n	800c33c <hci_send_req+0x114>
      if (!list_is_empty(&hciReadPktRxQueue)) 
 800c2aa:	4630      	mov	r0, r6
 800c2ac:	f000 f8d1 	bl	800c452 <list_is_empty>
 800c2b0:	2800      	cmp	r0, #0
 800c2b2:	d1f4      	bne.n	800c29e <hci_send_req+0x76>
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&hciReadPacket);    
 800c2b4:	a901      	add	r1, sp, #4
 800c2b6:	4630      	mov	r0, r6
 800c2b8:	f000 f8f7 	bl	800c4aa <list_remove_head>
    hci_hdr = (void *)hciReadPacket->dataBuff;
 800c2bc:	9901      	ldr	r1, [sp, #4]
    if (hci_hdr->type == HCI_EVENT_PKT)
 800c2be:	7a0b      	ldrb	r3, [r1, #8]
 800c2c0:	2b04      	cmp	r3, #4
 800c2c2:	d109      	bne.n	800c2d8 <hci_send_req+0xb0>
      switch (event_pckt->evt) 
 800c2c4:	7a4b      	ldrb	r3, [r1, #9]
      len = hciReadPacket->data_len - (1 + HCI_EVENT_HDR_SIZE);
 800c2c6:	f891 2088 	ldrb.w	r2, [r1, #136]	; 0x88
      switch (event_pckt->evt) 
 800c2ca:	2b10      	cmp	r3, #16
 800c2cc:	d036      	beq.n	800c33c <hci_send_req+0x114>
 800c2ce:	d81d      	bhi.n	800c30c <hci_send_req+0xe4>
 800c2d0:	2b0e      	cmp	r3, #14
 800c2d2:	d053      	beq.n	800c37c <hci_send_req+0x154>
 800c2d4:	2b0f      	cmp	r3, #15
 800c2d6:	d027      	beq.n	800c328 <hci_send_req+0x100>
    if (list_is_empty(&hciReadPktPool) && list_is_empty(&hciReadPktRxQueue)) {
 800c2d8:	4640      	mov	r0, r8
 800c2da:	f000 f8ba 	bl	800c452 <list_is_empty>
 800c2de:	2800      	cmp	r0, #0
 800c2e0:	d057      	beq.n	800c392 <hci_send_req+0x16a>
 800c2e2:	4630      	mov	r0, r6
 800c2e4:	f000 f8b5 	bl	800c452 <list_is_empty>
 800c2e8:	2800      	cmp	r0, #0
 800c2ea:	d052      	beq.n	800c392 <hci_send_req+0x16a>
      list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 800c2ec:	9901      	ldr	r1, [sp, #4]
 800c2ee:	4640      	mov	r0, r8
    else {
      /* Insert the packet in a different queue. These packets will be
      inserted back in the main queue just before exiting from send_req(), so that
      these events can be processed by the application.
    */
    list_insert_tail(&hciTempQueue, (tListNode *)hciReadPacket);
 800c2f0:	f000 f8c5 	bl	800c47e <list_insert_tail>
      hciReadPacket=NULL;
 800c2f4:	2300      	movs	r3, #0
 800c2f6:	9301      	str	r3, [sp, #4]
 800c2f8:	e7ce      	b.n	800c298 <hci_send_req+0x70>
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&pckt);    
 800c2fa:	a904      	add	r1, sp, #16
 800c2fc:	4648      	mov	r0, r9
 800c2fe:	f000 f8d4 	bl	800c4aa <list_remove_head>
    list_insert_tail(&hciReadPktPool, (tListNode *)pckt);
 800c302:	9904      	ldr	r1, [sp, #16]
 800c304:	4628      	mov	r0, r5
 800c306:	f000 f8ba 	bl	800c47e <list_insert_tail>
 800c30a:	e79d      	b.n	800c248 <hci_send_req+0x20>
      switch (event_pckt->evt) 
 800c30c:	2b3e      	cmp	r3, #62	; 0x3e
 800c30e:	d1e3      	bne.n	800c2d8 <hci_send_req+0xb0>
        if (me->subevent != r->event)
 800c310:	7ac8      	ldrb	r0, [r1, #11]
 800c312:	6863      	ldr	r3, [r4, #4]
 800c314:	4298      	cmp	r0, r3
 800c316:	d1df      	bne.n	800c2d8 <hci_send_req+0xb0>
        r->rlen = MIN(len, r->rlen);
 800c318:	6963      	ldr	r3, [r4, #20]
        len -= 1;
 800c31a:	3a04      	subs	r2, #4
        r->rlen = MIN(len, r->rlen);
 800c31c:	429a      	cmp	r2, r3
 800c31e:	bf28      	it	cs
 800c320:	461a      	movcs	r2, r3
 800c322:	6162      	str	r2, [r4, #20]
        BLUENRG_memcpy(r->rparam, me->data, r->rlen);
 800c324:	310c      	adds	r1, #12
 800c326:	e01d      	b.n	800c364 <hci_send_req+0x13c>
        if (cs->opcode != opcode)
 800c328:	f8b1 300d 	ldrh.w	r3, [r1, #13]
 800c32c:	42ab      	cmp	r3, r5
 800c32e:	d105      	bne.n	800c33c <hci_send_req+0x114>
        if (r->event != EVT_CMD_STATUS) {
 800c330:	6863      	ldr	r3, [r4, #4]
 800c332:	2b0f      	cmp	r3, #15
 800c334:	d00f      	beq.n	800c356 <hci_send_req+0x12e>
          if (cs->status) {
 800c336:	7acb      	ldrb	r3, [r1, #11]
 800c338:	2b00      	cmp	r3, #0
 800c33a:	d0cd      	beq.n	800c2d8 <hci_send_req+0xb0>
    }
  }
  
failed: 
  if (hciReadPacket!=NULL) {
 800c33c:	9901      	ldr	r1, [sp, #4]
 800c33e:	b111      	cbz	r1, 800c346 <hci_send_req+0x11e>
    list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 800c340:	4815      	ldr	r0, [pc, #84]	; (800c398 <hci_send_req+0x170>)
 800c342:	f000 f890 	bl	800c466 <list_insert_head>
  }
  move_list(&hciReadPktRxQueue, &hciTempQueue);
 800c346:	a802      	add	r0, sp, #8
 800c348:	f7ff ff20 	bl	800c18c <move_list.constprop.0>

  return -1;
 800c34c:	f04f 30ff 	mov.w	r0, #4294967295
  /* Insert the packet back into the pool.*/
  list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket); 
  move_list(&hciReadPktRxQueue, &hciTempQueue);

  return 0;
}
 800c350:	b025      	add	sp, #148	; 0x94
 800c352:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        r->rlen = MIN(len, r->rlen);
 800c356:	6963      	ldr	r3, [r4, #20]
      len = hciReadPacket->data_len - (1 + HCI_EVENT_HDR_SIZE);
 800c358:	3a03      	subs	r2, #3
        r->rlen = MIN(len, r->rlen);
 800c35a:	429a      	cmp	r2, r3
 800c35c:	bf28      	it	cs
 800c35e:	461a      	movcs	r2, r3
 800c360:	6162      	str	r2, [r4, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 800c362:	310b      	adds	r1, #11
        BLUENRG_memcpy(r->rparam, me->data, r->rlen);
 800c364:	6920      	ldr	r0, [r4, #16]
 800c366:	f00d fb5b 	bl	8019a20 <memcpy>
  list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket); 
 800c36a:	480b      	ldr	r0, [pc, #44]	; (800c398 <hci_send_req+0x170>)
 800c36c:	9901      	ldr	r1, [sp, #4]
 800c36e:	f000 f87a 	bl	800c466 <list_insert_head>
  move_list(&hciReadPktRxQueue, &hciTempQueue);
 800c372:	a802      	add	r0, sp, #8
 800c374:	f7ff ff0a 	bl	800c18c <move_list.constprop.0>
    return 0;
 800c378:	2000      	movs	r0, #0
 800c37a:	e7e9      	b.n	800c350 <hci_send_req+0x128>
        if (cc->opcode != opcode)
 800c37c:	898b      	ldrh	r3, [r1, #12]
 800c37e:	42ab      	cmp	r3, r5
 800c380:	d1dc      	bne.n	800c33c <hci_send_req+0x114>
        r->rlen = MIN(len, r->rlen);
 800c382:	6963      	ldr	r3, [r4, #20]
        len -= EVT_CMD_COMPLETE_SIZE;
 800c384:	3a06      	subs	r2, #6
        r->rlen = MIN(len, r->rlen);
 800c386:	429a      	cmp	r2, r3
 800c388:	bf28      	it	cs
 800c38a:	461a      	movcs	r2, r3
 800c38c:	6162      	str	r2, [r4, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 800c38e:	310e      	adds	r1, #14
 800c390:	e7e8      	b.n	800c364 <hci_send_req+0x13c>
    list_insert_tail(&hciTempQueue, (tListNode *)hciReadPacket);
 800c392:	9901      	ldr	r1, [sp, #4]
 800c394:	a802      	add	r0, sp, #8
 800c396:	e7ab      	b.n	800c2f0 <hci_send_req+0xc8>
 800c398:	2000998c 	.word	0x2000998c
 800c39c:	20001c50 	.word	0x20001c50
 800c3a0:	20009994 	.word	0x20009994

0800c3a4 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 800c3a4:	b573      	push	{r0, r1, r4, r5, r6, lr}
  tHciDataPacket * hciReadPacket = NULL;
 800c3a6:	2300      	movs	r3, #0
     
  /* process any pending events read */
  while (list_is_empty(&hciReadPktRxQueue) == FALSE)
 800c3a8:	4c0b      	ldr	r4, [pc, #44]	; (800c3d8 <hci_user_evt_proc+0x34>)
  {
    list_remove_head (&hciReadPktRxQueue, (tListNode **)&hciReadPacket);

    if (hciContext.UserEvtRx != NULL)
 800c3aa:	4d0c      	ldr	r5, [pc, #48]	; (800c3dc <hci_user_evt_proc+0x38>)
    {
      hciContext.UserEvtRx(hciReadPacket->dataBuff);
    }

    list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 800c3ac:	4e0c      	ldr	r6, [pc, #48]	; (800c3e0 <hci_user_evt_proc+0x3c>)
  tHciDataPacket * hciReadPacket = NULL;
 800c3ae:	9301      	str	r3, [sp, #4]
  while (list_is_empty(&hciReadPktRxQueue) == FALSE)
 800c3b0:	4620      	mov	r0, r4
 800c3b2:	f000 f84e 	bl	800c452 <list_is_empty>
 800c3b6:	b108      	cbz	r0, 800c3bc <hci_user_evt_proc+0x18>
  }
}
 800c3b8:	b002      	add	sp, #8
 800c3ba:	bd70      	pop	{r4, r5, r6, pc}
    list_remove_head (&hciReadPktRxQueue, (tListNode **)&hciReadPacket);
 800c3bc:	a901      	add	r1, sp, #4
 800c3be:	4620      	mov	r0, r4
 800c3c0:	f000 f873 	bl	800c4aa <list_remove_head>
    if (hciContext.UserEvtRx != NULL)
 800c3c4:	69eb      	ldr	r3, [r5, #28]
 800c3c6:	b113      	cbz	r3, 800c3ce <hci_user_evt_proc+0x2a>
      hciContext.UserEvtRx(hciReadPacket->dataBuff);
 800c3c8:	9801      	ldr	r0, [sp, #4]
 800c3ca:	3008      	adds	r0, #8
 800c3cc:	4798      	blx	r3
    list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 800c3ce:	9901      	ldr	r1, [sp, #4]
 800c3d0:	4630      	mov	r0, r6
 800c3d2:	f000 f854 	bl	800c47e <list_insert_tail>
 800c3d6:	e7eb      	b.n	800c3b0 <hci_user_evt_proc+0xc>
 800c3d8:	20009994 	.word	0x20009994
 800c3dc:	20001c50 	.word	0x20001c50
 800c3e0:	2000998c 	.word	0x2000998c

0800c3e4 <hci_notify_asynch_evt>:

int32_t hci_notify_asynch_evt(void* pdata)
{
 800c3e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
  tHciDataPacket * hciReadPacket = NULL;
 800c3e6:	2300      	movs	r3, #0
  uint8_t data_len;
  
  int32_t ret = 0;
  
  if (list_is_empty (&hciReadPktPool) == FALSE)
 800c3e8:	4815      	ldr	r0, [pc, #84]	; (800c440 <hci_notify_asynch_evt+0x5c>)
  tHciDataPacket * hciReadPacket = NULL;
 800c3ea:	9301      	str	r3, [sp, #4]
  if (list_is_empty (&hciReadPktPool) == FALSE)
 800c3ec:	f000 f831 	bl	800c452 <list_is_empty>
 800c3f0:	bb08      	cbnz	r0, 800c436 <hci_notify_asynch_evt+0x52>
  {
    /* Queuing a packet to read */
    list_remove_head (&hciReadPktPool, (tListNode **)&hciReadPacket);
 800c3f2:	4813      	ldr	r0, [pc, #76]	; (800c440 <hci_notify_asynch_evt+0x5c>)
 800c3f4:	a901      	add	r1, sp, #4
 800c3f6:	f000 f858 	bl	800c4aa <list_remove_head>
    
    if (hciContext.io.Receive)
 800c3fa:	4b12      	ldr	r3, [pc, #72]	; (800c444 <hci_notify_asynch_evt+0x60>)
 800c3fc:	68db      	ldr	r3, [r3, #12]
 800c3fe:	b1e3      	cbz	r3, 800c43a <hci_notify_asynch_evt+0x56>
    {
      data_len = hciContext.io.Receive(hciReadPacket->dataBuff, HCI_READ_PACKET_SIZE);
 800c400:	9801      	ldr	r0, [sp, #4]
 800c402:	2180      	movs	r1, #128	; 0x80
 800c404:	3008      	adds	r0, #8
 800c406:	4798      	blx	r3
      if (data_len > 0)
 800c408:	f010 04ff 	ands.w	r4, r0, #255	; 0xff
      {                    
        hciReadPacket->data_len = data_len;
 800c40c:	9901      	ldr	r1, [sp, #4]
      if (data_len > 0)
 800c40e:	d00e      	beq.n	800c42e <hci_notify_asynch_evt+0x4a>
  if (hci_pckt[HCI_PCK_TYPE_OFFSET] != HCI_EVENT_PKT)
 800c410:	7a0b      	ldrb	r3, [r1, #8]
        hciReadPacket->data_len = data_len;
 800c412:	f881 4088 	strb.w	r4, [r1, #136]	; 0x88
  if (hci_pckt[HCI_PCK_TYPE_OFFSET] != HCI_EVENT_PKT)
 800c416:	2b04      	cmp	r3, #4
 800c418:	d109      	bne.n	800c42e <hci_notify_asynch_evt+0x4a>
  if (hci_pckt[EVENT_PARAMETER_TOT_LEN_OFFSET] != hciReadPacket->data_len - (1+HCI_EVENT_HDR_SIZE))
 800c41a:	7a8b      	ldrb	r3, [r1, #10]
 800c41c:	3c03      	subs	r4, #3
 800c41e:	42a3      	cmp	r3, r4
 800c420:	d105      	bne.n	800c42e <hci_notify_asynch_evt+0x4a>
        if (verify_packet(hciReadPacket) == 0)
          list_insert_tail(&hciReadPktRxQueue, (tListNode *)hciReadPacket);
 800c422:	4809      	ldr	r0, [pc, #36]	; (800c448 <hci_notify_asynch_evt+0x64>)
 800c424:	f000 f82b 	bl	800c47e <list_insert_tail>
  int32_t ret = 0;
 800c428:	2000      	movs	r0, #0
  {
    ret = 1;
  }
  return ret;
  
}
 800c42a:	b003      	add	sp, #12
 800c42c:	bd30      	pop	{r4, r5, pc}
          list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);          
 800c42e:	4804      	ldr	r0, [pc, #16]	; (800c440 <hci_notify_asynch_evt+0x5c>)
 800c430:	f000 f819 	bl	800c466 <list_insert_head>
 800c434:	e7f8      	b.n	800c428 <hci_notify_asynch_evt+0x44>
    ret = 1;
 800c436:	2001      	movs	r0, #1
 800c438:	e7f7      	b.n	800c42a <hci_notify_asynch_evt+0x46>
  int32_t ret = 0;
 800c43a:	4618      	mov	r0, r3
  return ret;
 800c43c:	e7f5      	b.n	800c42a <hci_notify_asynch_evt+0x46>
 800c43e:	bf00      	nop
 800c440:	2000998c 	.word	0x2000998c
 800c444:	20001c50 	.word	0x20001c50
 800c448:	20009994 	.word	0x20009994

0800c44c <list_init_head>:
 * Function Definitions 
******************************************************************************/
void list_init_head (tListNode * listHead)
{
  listHead->next = listHead;
  listHead->prev = listHead;	
 800c44c:	e9c0 0000 	strd	r0, r0, [r0]
}
 800c450:	4770      	bx	lr

0800c452 <list_is_empty>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c452:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800c456:	b672      	cpsid	i
  
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
   
  if(listHead->next == listHead)
 800c458:	6803      	ldr	r3, [r0, #0]
  {
    return_value = 1;
 800c45a:	1a1b      	subs	r3, r3, r0
 800c45c:	4258      	negs	r0, r3
 800c45e:	4158      	adcs	r0, r3
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c460:	f382 8810 	msr	PRIMASK, r2
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return return_value;
}
 800c464:	4770      	bx	lr

0800c466 <list_insert_head>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c466:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800c46a:	b672      	cpsid	i
{
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead->next;
 800c46c:	6802      	ldr	r2, [r0, #0]
  node->prev = listHead;
 800c46e:	e9c1 2000 	strd	r2, r0, [r1]
  listHead->next = node;
 800c472:	6001      	str	r1, [r0, #0]
  (node->next)->prev = node;
 800c474:	680a      	ldr	r2, [r1, #0]
 800c476:	6051      	str	r1, [r2, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c478:	f383 8810 	msr	PRIMASK, r3
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800c47c:	4770      	bx	lr

0800c47e <list_insert_tail>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c47e:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800c482:	b672      	cpsid	i
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead;
  node->prev = listHead->prev;
 800c484:	6842      	ldr	r2, [r0, #4]
 800c486:	604a      	str	r2, [r1, #4]
  node->next = listHead;
 800c488:	6008      	str	r0, [r1, #0]
  listHead->prev = node;
 800c48a:	6041      	str	r1, [r0, #4]
  (node->prev)->next = node;
 800c48c:	684a      	ldr	r2, [r1, #4]
 800c48e:	6011      	str	r1, [r2, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c490:	f383 8810 	msr	PRIMASK, r3
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800c494:	4770      	bx	lr

0800c496 <list_remove_node>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c496:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800c49a:	b672      	cpsid	i
{
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  (node->prev)->next = node->next;
 800c49c:	e9d0 3200 	ldrd	r3, r2, [r0]
 800c4a0:	6013      	str	r3, [r2, #0]
  (node->next)->prev = node->prev;
 800c4a2:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c4a4:	f381 8810 	msr	PRIMASK, r1
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800c4a8:	4770      	bx	lr

0800c4aa <list_remove_head>:

void list_remove_head (tListNode * listHead, tListNode ** node )
{
 800c4aa:	b538      	push	{r3, r4, r5, lr}
 800c4ac:	460c      	mov	r4, r1
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c4ae:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800c4b2:	b672      	cpsid	i
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->next;
 800c4b4:	6800      	ldr	r0, [r0, #0]
 800c4b6:	6008      	str	r0, [r1, #0]
  list_remove_node (listHead->next);
 800c4b8:	f7ff ffed 	bl	800c496 <list_remove_node>
  (*node)->next = NULL;
 800c4bc:	6822      	ldr	r2, [r4, #0]
 800c4be:	2300      	movs	r3, #0
 800c4c0:	6013      	str	r3, [r2, #0]
  (*node)->prev = NULL;
 800c4c2:	6822      	ldr	r2, [r4, #0]
 800c4c4:	6053      	str	r3, [r2, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c4c6:	f385 8810 	msr	PRIMASK, r5
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800c4ca:	bd38      	pop	{r3, r4, r5, pc}

0800c4cc <list_remove_tail>:

void list_remove_tail (tListNode * listHead, tListNode ** node )
{
 800c4cc:	b538      	push	{r3, r4, r5, lr}
 800c4ce:	460c      	mov	r4, r1
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c4d0:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800c4d4:	b672      	cpsid	i
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->prev;
 800c4d6:	6840      	ldr	r0, [r0, #4]
 800c4d8:	6008      	str	r0, [r1, #0]
  list_remove_node (listHead->prev);
 800c4da:	f7ff ffdc 	bl	800c496 <list_remove_node>
  (*node)->next = NULL;
 800c4de:	6822      	ldr	r2, [r4, #0]
 800c4e0:	2300      	movs	r3, #0
 800c4e2:	6013      	str	r3, [r2, #0]
  (*node)->prev = NULL;
 800c4e4:	6822      	ldr	r2, [r4, #0]
 800c4e6:	6053      	str	r3, [r2, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c4e8:	f385 8810 	msr	PRIMASK, r5
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800c4ec:	bd38      	pop	{r3, r4, r5, pc}

0800c4ee <list_get_size>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c4ee:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800c4f2:	b672      	cpsid	i

  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  temp = listHead->next;
 800c4f4:	6802      	ldr	r2, [r0, #0]
  int size = 0;
 800c4f6:	2300      	movs	r3, #0
  while (temp != listHead)
 800c4f8:	4282      	cmp	r2, r0
 800c4fa:	d103      	bne.n	800c504 <list_get_size+0x16>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c4fc:	f381 8810 	msr	PRIMASK, r1
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return (size);
}
 800c500:	4618      	mov	r0, r3
 800c502:	4770      	bx	lr
    temp = temp->next;		
 800c504:	6812      	ldr	r2, [r2, #0]
    size++;
 800c506:	3301      	adds	r3, #1
    temp = temp->next;		
 800c508:	e7f6      	b.n	800c4f8 <list_get_size+0xa>
	...

0800c50c <ReseMetaDataManager>:
 */
void ReseMetaDataManager(void) {
  MDM_OsxLicenseType_t osxLic;
  MDM_GenericMetaDataType_t GMD;

  NecessityToSaveMetaDataManager=1;
 800c50c:	4b0f      	ldr	r3, [pc, #60]	; (800c54c <ReseMetaDataManager+0x40>)
  puint8_RW_MetaData = ((uint8_t *) uint64_MetaDataVector)+8;
 800c50e:	4910      	ldr	r1, [pc, #64]	; (800c550 <ReseMetaDataManager+0x44>)
  pMetaDataManagerHeader->IsIntialized = MDM_VALID_META_DATA_MANAGER;
 800c510:	4810      	ldr	r0, [pc, #64]	; (800c554 <ReseMetaDataManager+0x48>)
 800c512:	f841 0c08 	str.w	r0, [r1, #-8]
  NecessityToSaveMetaDataManager=1;
 800c516:	2201      	movs	r2, #1
 800c518:	601a      	str	r2, [r3, #0]
  puint8_RW_MetaData = ((uint8_t *) uint64_MetaDataVector)+8;
 800c51a:	4a0f      	ldr	r2, [pc, #60]	; (800c558 <ReseMetaDataManager+0x4c>)
  pMetaDataManagerHeader->Version = MDM_VERSION;
  /* add the MetaData Teminitation */
  *((uint32_t *) puint8_RW_MetaData)     = MDM_DATA_TYPE_END;
 800c51c:	480f      	ldr	r0, [pc, #60]	; (800c55c <ReseMetaDataManager+0x50>)
  puint8_RW_MetaData = ((uint8_t *) uint64_MetaDataVector)+8;
 800c51e:	f842 1b04 	str.w	r1, [r2], #4
  pMetaDataManagerHeader->IsIntialized = MDM_VALID_META_DATA_MANAGER;
 800c522:	f1a1 0308 	sub.w	r3, r1, #8
  *((uint32_t *) puint8_RW_MetaData)     = MDM_DATA_TYPE_END;
 800c526:	21ff      	movs	r1, #255	; 0xff
 800c528:	e9c3 0101 	strd	r0, r1, [r3, #4]
  *((uint32_t *) (puint8_RW_MetaData+4)) = 0; /* No Payload */
 800c52c:	2100      	movs	r1, #0
 800c52e:	60d9      	str	r1, [r3, #12]
 800c530:	2309      	movs	r3, #9

  /* Reset all the Payload pointers */
  for(osxLic=OSX_MOTION_FX;osxLic<OSX_LICENSE_NUM;osxLic++) {
 800c532:	3b01      	subs	r3, #1
    MDM_LicTable[osxLic].Address =0;
 800c534:	63d1      	str	r1, [r2, #60]	; 0x3c
  for(osxLic=OSX_MOTION_FX;osxLic<OSX_LICENSE_NUM;osxLic++) {
 800c536:	f102 0220 	add.w	r2, r2, #32
 800c53a:	d1fa      	bne.n	800c532 <ReseMetaDataManager+0x26>
 800c53c:	4908      	ldr	r1, [pc, #32]	; (800c560 <ReseMetaDataManager+0x54>)
 800c53e:	220e      	movs	r2, #14
  }
  for(GMD=GMD_WIFI;GMD<GMD_NUM;GMD++){
 800c540:	3a01      	subs	r2, #1
    MDM_GMDTable[GMD].Address =0;
 800c542:	634b      	str	r3, [r1, #52]	; 0x34
  for(GMD=GMD_WIFI;GMD<GMD_NUM;GMD++){
 800c544:	f101 011c 	add.w	r1, r1, #28
 800c548:	d1fa      	bne.n	800c540 <ReseMetaDataManager+0x34>
  }
}
 800c54a:	4770      	bx	lr
 800c54c:	200021e8 	.word	0x200021e8
 800c550:	20002238 	.word	0x20002238
 800c554:	12345678 	.word	0x12345678
 800c558:	200000d0 	.word	0x200000d0
 800c55c:	00010300 	.word	0x00010300
 800c560:	20000214 	.word	0x20000214

0800c564 <EraseMetaDataManager>:
/**
 * @brief Erase the Meta Data Manager in FLASH
 * @param uint32_t Success/NotSuccess [1/0]
 * @retval None
 */
uint32_t EraseMetaDataManager(void) {
 800c564:	b510      	push	{r4, lr}
  uint32_t Success = UserFunctionForErasingFlash();
 800c566:	f007 fa41 	bl	80139ec <UserFunctionForErasingFlash>
  if(Success) {
 800c56a:	4604      	mov	r4, r0
 800c56c:	b110      	cbz	r0, 800c574 <EraseMetaDataManager+0x10>
    MDM_PRINTF("Meta Data Manager erased in FLASH\r\n");
 800c56e:	4802      	ldr	r0, [pc, #8]	; (800c578 <EraseMetaDataManager+0x14>)
 800c570:	f00e f820 	bl	801a5b4 <puts>
  }
  return Success;
}
 800c574:	4620      	mov	r0, r4
 800c576:	bd10      	pop	{r4, pc}
 800c578:	08020b08 	.word	0x08020b08

0800c57c <SaveMetaDataManager>:
 * @brief Save the Meta Data Manager in Flash
 * @param None
 * @retval None
 */
void SaveMetaDataManager(void)
{
 800c57c:	b508      	push	{r3, lr}
  uint32_t Success = UserFunctionForSavingFlash((void *)uint64_MetaDataVector,(void *)(puint8_RW_MetaData +8));
 800c57e:	4b07      	ldr	r3, [pc, #28]	; (800c59c <SaveMetaDataManager+0x20>)
 800c580:	4807      	ldr	r0, [pc, #28]	; (800c5a0 <SaveMetaDataManager+0x24>)
 800c582:	6819      	ldr	r1, [r3, #0]
 800c584:	3108      	adds	r1, #8
 800c586:	f007 fa4b 	bl	8013a20 <UserFunctionForSavingFlash>

  if(Success) {
 800c58a:	b110      	cbz	r0, 800c592 <SaveMetaDataManager+0x16>
    MDM_PRINTF("Meta Data Manager Saved in FLASH\r\n");
 800c58c:	4805      	ldr	r0, [pc, #20]	; (800c5a4 <SaveMetaDataManager+0x28>)
 800c58e:	f00e f811 	bl	801a5b4 <puts>
  }
  NecessityToSaveMetaDataManager=0;
 800c592:	4b05      	ldr	r3, [pc, #20]	; (800c5a8 <SaveMetaDataManager+0x2c>)
 800c594:	2200      	movs	r2, #0
 800c596:	601a      	str	r2, [r3, #0]
}
 800c598:	bd08      	pop	{r3, pc}
 800c59a:	bf00      	nop
 800c59c:	200000d0 	.word	0x200000d0
 800c5a0:	20002230 	.word	0x20002230
 800c5a4:	08020b2b 	.word	0x08020b2b
 800c5a8:	200021e8 	.word	0x200021e8

0800c5ac <InitMetaDataManager>:
void InitMetaDataManager(void *Ptr,...) {
 800c5ac:	b40f      	push	{r0, r1, r2, r3}
 800c5ae:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  __IO uint32_t data32 = *(__IO uint32_t*) Address;
 800c5b2:	49ae      	ldr	r1, [pc, #696]	; (800c86c <InitMetaDataManager+0x2c0>)
  puint8_RW_MetaData = ((uint8_t *) uint64_MetaDataVector)+8;
 800c5b4:	4aae      	ldr	r2, [pc, #696]	; (800c870 <InitMetaDataManager+0x2c4>)
  __IO uint32_t data32 = *(__IO uint32_t*) Address;
 800c5b6:	6809      	ldr	r1, [r1, #0]
  puint8_RW_MetaData = ((uint8_t *) uint64_MetaDataVector)+8;
 800c5b8:	4bae      	ldr	r3, [pc, #696]	; (800c874 <InitMetaDataManager+0x2c8>)
 800c5ba:	6013      	str	r3, [r2, #0]
void InitMetaDataManager(void *Ptr,...) {
 800c5bc:	b087      	sub	sp, #28
 800c5be:	4693      	mov	fp, r2
  __IO uint32_t data32 = *(__IO uint32_t*) Address;
 800c5c0:	9105      	str	r1, [sp, #20]
  if(data32== MDM_VALID_META_DATA_MANAGER){
 800c5c2:	9805      	ldr	r0, [sp, #20]
 800c5c4:	49ac      	ldr	r1, [pc, #688]	; (800c878 <InitMetaDataManager+0x2cc>)
void InitMetaDataManager(void *Ptr,...) {
 800c5c6:	9c10      	ldr	r4, [sp, #64]	; 0x40
  if(data32== MDM_VALID_META_DATA_MANAGER){
 800c5c8:	4288      	cmp	r0, r1
 800c5ca:	f040 8082 	bne.w	800c6d2 <InitMetaDataManager+0x126>
    pMetaDataManagerHeader->IsIntialized = data32;
 800c5ce:	9a05      	ldr	r2, [sp, #20]
 800c5d0:	f843 2c08 	str.w	r2, [r3, #-8]
    data32 = *(__IO uint32_t*) Address;
 800c5d4:	4aa9      	ldr	r2, [pc, #676]	; (800c87c <InitMetaDataManager+0x2d0>)
    if(pMetaDataManagerHeader->Version !=  MDM_VERSION) {
 800c5d6:	49aa      	ldr	r1, [pc, #680]	; (800c880 <InitMetaDataManager+0x2d4>)
    data32 = *(__IO uint32_t*) Address;
 800c5d8:	6812      	ldr	r2, [r2, #0]
 800c5da:	9205      	str	r2, [sp, #20]
    pMetaDataManagerHeader->Version = data32;
 800c5dc:	9a05      	ldr	r2, [sp, #20]
 800c5de:	f843 2c04 	str.w	r2, [r3, #-4]
    if(pMetaDataManagerHeader->Version !=  MDM_VERSION) {
 800c5e2:	428a      	cmp	r2, r1
 800c5e4:	d003      	beq.n	800c5ee <InitMetaDataManager+0x42>
      MDM_PRINTF("Warning: The Meta Data Manager in FLASH is not Compatible\r\n\tIt will be ERASED\r\n");
 800c5e6:	48a7      	ldr	r0, [pc, #668]	; (800c884 <InitMetaDataManager+0x2d8>)
    MDM_PRINTF("Meta Data Manager not present in FLASH\r\n");
 800c5e8:	f00d ffe4 	bl	801a5b4 <puts>
 800c5ec:	e014      	b.n	800c618 <InitMetaDataManager+0x6c>
    data32 = *(__IO uint32_t*) Address;
 800c5ee:	4aa6      	ldr	r2, [pc, #664]	; (800c888 <InitMetaDataManager+0x2dc>)
 800c5f0:	6811      	ldr	r1, [r2, #0]
 800c5f2:	9105      	str	r1, [sp, #20]
    while(data32!=MDM_DATA_TYPE_END) {
 800c5f4:	2100      	movs	r1, #0
 800c5f6:	9805      	ldr	r0, [sp, #20]
 800c5f8:	28ff      	cmp	r0, #255	; 0xff
      RetValue =1;
 800c5fa:	460d      	mov	r5, r1
    while(data32!=MDM_DATA_TYPE_END) {
 800c5fc:	d147      	bne.n	800c68e <InitMetaDataManager+0xe2>
 800c5fe:	b109      	cbz	r1, 800c604 <InitMetaDataManager+0x58>
 800c600:	f8cb 3000 	str.w	r3, [fp]
    *((uint32_t *) puint8_RW_MetaData)     = MDM_DATA_TYPE_END;
 800c604:	f8db 3000 	ldr.w	r3, [fp]
    MDM_PRINTF("Meta Data Manager read from Flash\r\n");
 800c608:	48a0      	ldr	r0, [pc, #640]	; (800c88c <InitMetaDataManager+0x2e0>)
    *((uint32_t *) puint8_RW_MetaData)     = MDM_DATA_TYPE_END;
 800c60a:	22ff      	movs	r2, #255	; 0xff
 800c60c:	601a      	str	r2, [r3, #0]
    *(((uint32_t *) puint8_RW_MetaData)+4) = 0; /* No Payload */
 800c60e:	2200      	movs	r2, #0
 800c610:	611a      	str	r2, [r3, #16]
    MDM_PRINTF("Meta Data Manager read from Flash\r\n");
 800c612:	f00d ffcf 	bl	801a5b4 <puts>
  if(ReCallMetaDataManager()==0) {
 800c616:	b90d      	cbnz	r5, 800c61c <InitMetaDataManager+0x70>
    ReseMetaDataManager();
 800c618:	f7ff ff78 	bl	800c50c <ReseMetaDataManager>
  va_start (ap, Ptr);
 800c61c:	ab11      	add	r3, sp, #68	; 0x44
  while(KnownMetaDataTable!=NULL) {
 800c61e:	f04f 0a00 	mov.w	sl, #0
            MDM_GMDTable[PayLoad->GMDTypeEnum].Address = (uint32_t)PayLoad;
 800c622:	4d93      	ldr	r5, [pc, #588]	; (800c870 <InitMetaDataManager+0x2c4>)
  va_start (ap, Ptr);
 800c624:	9304      	str	r3, [sp, #16]
  while(KnownMetaDataTable!=NULL) {
 800c626:	46d1      	mov	r9, sl
 800c628:	2c00      	cmp	r4, #0
 800c62a:	d154      	bne.n	800c6d6 <InitMetaDataManager+0x12a>
  if(NecessityToSaveMetaDataManager) {
 800c62c:	4c98      	ldr	r4, [pc, #608]	; (800c890 <InitMetaDataManager+0x2e4>)
 800c62e:	6822      	ldr	r2, [r4, #0]
 800c630:	b122      	cbz	r2, 800c63c <InitMetaDataManager+0x90>
    uint32_t Success = EraseMetaDataManager();
 800c632:	f7ff ff97 	bl	800c564 <EraseMetaDataManager>
    if(Success) {
 800c636:	b108      	cbz	r0, 800c63c <InitMetaDataManager+0x90>
      SaveMetaDataManager();
 800c638:	f7ff ffa0 	bl	800c57c <SaveMetaDataManager>
  MDM_PRINTF("Meta Data Manager version=%ld.%ld.%ld\r\n",
 800c63c:	4b95      	ldr	r3, [pc, #596]	; (800c894 <InitMetaDataManager+0x2e8>)
 800c63e:	4896      	ldr	r0, [pc, #600]	; (800c898 <InitMetaDataManager+0x2ec>)
 800c640:	6859      	ldr	r1, [r3, #4]
 800c642:	b2cb      	uxtb	r3, r1
 800c644:	f3c1 2207 	ubfx	r2, r1, #8, #8
 800c648:	0c09      	lsrs	r1, r1, #16
 800c64a:	f00d ff2d 	bl	801a4a8 <iprintf>
  if((NumberOfKnownGMD!=0) | (NumberofFoundedGMD!=0)) {
 800c64e:	6863      	ldr	r3, [r4, #4]
 800c650:	ea5a 0303 	orrs.w	r3, sl, r3
 800c654:	f000 808e 	beq.w	800c774 <InitMetaDataManager+0x1c8>
 * @retval None
 */
static void PrintOut_MDM_GMDStatus(void)
{
  MDM_GenericMetaDataType_t GMD;
  MDM_PRINTF("\tGeneric Meta Data found:\r\n");
 800c658:	4890      	ldr	r0, [pc, #576]	; (800c89c <InitMetaDataManager+0x2f0>)
 800c65a:	4c91      	ldr	r4, [pc, #580]	; (800c8a0 <InitMetaDataManager+0x2f4>)
  for(GMD=GMD_WIFI;GMD<GMD_NUM;GMD++) {
    MDM_PayLoadGMD_t *PayLoad = (MDM_PayLoadGMD_t *) MDM_GMDTable[GMD].Address;
    if(PayLoad) {
      MDM_PRINTF("\t\t %s Size=%ld [bytes]\r\n",MDM_GMDTable[PayLoad->GMDTypeEnum].GMDName,
 800c65c:	f8df 825c 	ldr.w	r8, [pc, #604]	; 800c8bc <InitMetaDataManager+0x310>
  MDM_PRINTF("\tGeneric Meta Data found:\r\n");
 800c660:	f00d ffa8 	bl	801a5b4 <puts>
 800c664:	250e      	movs	r5, #14
 800c666:	4626      	mov	r6, r4
      MDM_PRINTF("\t\t %s Size=%ld [bytes]\r\n",MDM_GMDTable[PayLoad->GMDTypeEnum].GMDName,
 800c668:	271c      	movs	r7, #28
    MDM_PayLoadGMD_t *PayLoad = (MDM_PayLoadGMD_t *) MDM_GMDTable[GMD].Address;
 800c66a:	6b63      	ldr	r3, [r4, #52]	; 0x34
    if(PayLoad) {
 800c66c:	b153      	cbz	r3, 800c684 <InitMetaDataManager+0xd8>
      MDM_PRINTF("\t\t %s Size=%ld [bytes]\r\n",MDM_GMDTable[PayLoad->GMDTypeEnum].GMDName,
 800c66e:	6819      	ldr	r1, [r3, #0]
 800c670:	4379      	muls	r1, r7
 800c672:	eb0b 0301 	add.w	r3, fp, r1
 800c676:	3104      	adds	r1, #4
 800c678:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
 800c67c:	4431      	add	r1, r6
 800c67e:	4640      	mov	r0, r8
 800c680:	f00d ff12 	bl	801a4a8 <iprintf>
  for(GMD=GMD_WIFI;GMD<GMD_NUM;GMD++) {
 800c684:	3d01      	subs	r5, #1
 800c686:	f104 041c 	add.w	r4, r4, #28
 800c68a:	d1ee      	bne.n	800c66a <InitMetaDataManager+0xbe>
 800c68c:	e072      	b.n	800c774 <InitMetaDataManager+0x1c8>
      Type = (MDM_MetaDataType_t) data32;
 800c68e:	9905      	ldr	r1, [sp, #20]
      data32 = *(__IO uint32_t*) Address;
 800c690:	6850      	ldr	r0, [r2, #4]
 800c692:	9005      	str	r0, [sp, #20]
      Lenght = data32;
 800c694:	9805      	ldr	r0, [sp, #20]
      pMetaDataHeader->Type = Type;
 800c696:	b2c9      	uxtb	r1, r1
      pMetaDataHeader->Lenght =  Lenght;      
 800c698:	e9c3 1000 	strd	r1, r0, [r3]
      puint32_MetaData = (uint32_t *) pMetaDataHeader->puint8_PayLoad;
 800c69c:	f103 0608 	add.w	r6, r3, #8
      for(Index=0;Index<(Lenght-8);Index+=4) {
 800c6a0:	2100      	movs	r1, #0
 800c6a2:	f1a0 0508 	sub.w	r5, r0, #8
 800c6a6:	f102 0708 	add.w	r7, r2, #8
 800c6aa:	42a9      	cmp	r1, r5
 800c6ac:	d305      	bcc.n	800c6ba <InitMetaDataManager+0x10e>
      Address +=Lenght-8;
 800c6ae:	4402      	add	r2, r0
      puint8_RW_MetaData +=Lenght-8;
 800c6b0:	4403      	add	r3, r0
      data32 = *(__IO uint32_t*) Address;
 800c6b2:	6811      	ldr	r1, [r2, #0]
 800c6b4:	9105      	str	r1, [sp, #20]
 800c6b6:	2101      	movs	r1, #1
 800c6b8:	e79d      	b.n	800c5f6 <InitMetaDataManager+0x4a>
        data32 = *(__IO uint32_t*) (Address+Index);
 800c6ba:	f857 c001 	ldr.w	ip, [r7, r1]
 800c6be:	f8cd c014 	str.w	ip, [sp, #20]
        puint32_MetaData[Index>>2] = data32;
 800c6c2:	ea4f 0c91 	mov.w	ip, r1, lsr #2
 800c6c6:	f8dd e014 	ldr.w	lr, [sp, #20]
 800c6ca:	f846 e02c 	str.w	lr, [r6, ip, lsl #2]
      for(Index=0;Index<(Lenght-8);Index+=4) {
 800c6ce:	3104      	adds	r1, #4
 800c6d0:	e7eb      	b.n	800c6aa <InitMetaDataManager+0xfe>
    MDM_PRINTF("Meta Data Manager not present in FLASH\r\n");
 800c6d2:	4874      	ldr	r0, [pc, #464]	; (800c8a4 <InitMetaDataManager+0x2f8>)
 800c6d4:	e788      	b.n	800c5e8 <InitMetaDataManager+0x3c>
    MDM_MetaDataType_t  MetaDataType = (MDM_MetaDataType_t) va_arg(ap,int);
 800c6d6:	9b04      	ldr	r3, [sp, #16]
 800c6d8:	9301      	str	r3, [sp, #4]
 800c6da:	3304      	adds	r3, #4
 800c6dc:	9304      	str	r3, [sp, #16]
 800c6de:	9b01      	ldr	r3, [sp, #4]
 800c6e0:	681f      	ldr	r7, [r3, #0]
    switch(MetaDataType) {
 800c6e2:	f017 03ff 	ands.w	r3, r7, #255	; 0xff
 800c6e6:	d02d      	beq.n	800c744 <InitMetaDataManager+0x198>
 800c6e8:	2b01      	cmp	r3, #1
 800c6ea:	d140      	bne.n	800c76e <InitMetaDataManager+0x1c2>
 800c6ec:	4868      	ldr	r0, [pc, #416]	; (800c890 <InitMetaDataManager+0x2e4>)
 800c6ee:	6841      	ldr	r1, [r0, #4]
 800c6f0:	f06f 0307 	mvn.w	r3, #7
 800c6f4:	fb01 3303 	mla	r3, r1, r3, r3
 800c6f8:	4423      	add	r3, r4
 800c6fa:	2200      	movs	r2, #0
        for(Index =0; known_GMD[Index].GMDType!=GMD_END ;Index++) {
 800c6fc:	460e      	mov	r6, r1
 800c6fe:	3101      	adds	r1, #1
 800c700:	f813 c031 	ldrb.w	ip, [r3, r1, lsl #3]
 800c704:	f1bc 0f00 	cmp.w	ip, #0
 800c708:	d12f      	bne.n	800c76a <InitMetaDataManager+0x1be>
 800c70a:	b102      	cbz	r2, 800c70e <InitMetaDataManager+0x162>
 800c70c:	6046      	str	r6, [r0, #4]
    MDM_knownGMD_t *known_GMD=NULL;
 800c70e:	4626      	mov	r6, r4
    MDM_knownOsxLicense_t *known_OsxLic=NULL;
 800c710:	2400      	movs	r4, #0
        for(Index =0; ((Index<NumberOfKnownGMD) & (found==0));Index++) {
 800c712:	4b5f      	ldr	r3, [pc, #380]	; (800c890 <InitMetaDataManager+0x2e4>)
    pMetaDataHeader = (MDM_MetaDataHeader_t *) pMetaDataManagerHeader->puint8_MetaData;
 800c714:	4857      	ldr	r0, [pc, #348]	; (800c874 <InitMetaDataManager+0x2c8>)
        for(Index =0; ((Index<NumberOfKnownGMD) & (found==0));Index++) {
 800c716:	685a      	ldr	r2, [r3, #4]
        for(Index =0; ((Index<NumberOfKnownLic) & (found==0));Index++) {
 800c718:	689b      	ldr	r3, [r3, #8]
        for(Index =0; ((Index<NumberOfKnownGMD) & (found==0));Index++) {
 800c71a:	9203      	str	r2, [sp, #12]
        for(Index =0; ((Index<NumberOfKnownLic) & (found==0));Index++) {
 800c71c:	9302      	str	r3, [sp, #8]
            if(known_GMD[Index].GMDSize!=PayLoad->GMDSize) {
 800c71e:	f106 0804 	add.w	r8, r6, #4
    while(pMetaDataHeader->Type!=MDM_DATA_TYPE_END) {
 800c722:	6803      	ldr	r3, [r0, #0]
 800c724:	2bff      	cmp	r3, #255	; 0xff
 800c726:	d063      	beq.n	800c7f0 <InitMetaDataManager+0x244>
      if(pMetaDataHeader->Type == MDM_DATA_TYPE_LIC) {
 800c728:	2b00      	cmp	r3, #0
 800c72a:	d139      	bne.n	800c7a0 <InitMetaDataManager+0x1f4>
        MDM_PayLoadLic_t *PayLoad = (MDM_PayLoadLic_t *) pMetaDataHeader->puint8_PayLoad;
 800c72c:	f100 0c08 	add.w	ip, r0, #8
        int32_t found=0;
 800c730:	461a      	mov	r2, r3
          if(known_OsxLic[Index].LicEnum==PayLoad->LicEnum) {
 800c732:	f04f 0e2d 	mov.w	lr, #45	; 0x2d
        for(Index =0; ((Index<NumberOfKnownLic) & (found==0));Index++) {
 800c736:	9902      	ldr	r1, [sp, #8]
 800c738:	4299      	cmp	r1, r3
 800c73a:	d900      	bls.n	800c73e <InitMetaDataManager+0x192>
 800c73c:	b1fa      	cbz	r2, 800c77e <InitMetaDataManager+0x1d2>
      pMetaDataHeader = (MDM_MetaDataHeader_t *) (((uint32_t) pMetaDataHeader)+pMetaDataHeader->Lenght);
 800c73e:	6843      	ldr	r3, [r0, #4]
 800c740:	4418      	add	r0, r3
 800c742:	e7ee      	b.n	800c722 <InitMetaDataManager+0x176>
 800c744:	4952      	ldr	r1, [pc, #328]	; (800c890 <InitMetaDataManager+0x2e4>)
 800c746:	f8d1 c008 	ldr.w	ip, [r1, #8]
        for(Index =0; known_OsxLic[Index].LicEnum!=OSX_END ;Index++) {
 800c74a:	461a      	mov	r2, r3
 800c74c:	f04f 0e2d 	mov.w	lr, #45	; 0x2d
 800c750:	fb0e f602 	mul.w	r6, lr, r2
 800c754:	eb02 000c 	add.w	r0, r2, ip
 800c758:	5da6      	ldrb	r6, [r4, r6]
 800c75a:	b91e      	cbnz	r6, 800c764 <InitMetaDataManager+0x1b8>
 800c75c:	b103      	cbz	r3, 800c760 <InitMetaDataManager+0x1b4>
 800c75e:	6088      	str	r0, [r1, #8]
    MDM_knownGMD_t *known_GMD=NULL;
 800c760:	2600      	movs	r6, #0
 800c762:	e7d6      	b.n	800c712 <InitMetaDataManager+0x166>
        for(Index =0; known_OsxLic[Index].LicEnum!=OSX_END ;Index++) {
 800c764:	3201      	adds	r2, #1
 800c766:	2301      	movs	r3, #1
 800c768:	e7f2      	b.n	800c750 <InitMetaDataManager+0x1a4>
 800c76a:	2201      	movs	r2, #1
 800c76c:	e7c6      	b.n	800c6fc <InitMetaDataManager+0x150>
        MDM_PRINTF("Error Unknow Meta Data Type\r\n");
 800c76e:	484e      	ldr	r0, [pc, #312]	; (800c8a8 <InitMetaDataManager+0x2fc>)
 800c770:	f00d ff20 	bl	801a5b4 <puts>
}
 800c774:	b007      	add	sp, #28
 800c776:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c77a:	b004      	add	sp, #16
 800c77c:	4770      	bx	lr
          if(known_OsxLic[Index].LicEnum==PayLoad->LicEnum) {
 800c77e:	fb0e f203 	mul.w	r2, lr, r3
 800c782:	6881      	ldr	r1, [r0, #8]
 800c784:	5ca2      	ldrb	r2, [r4, r2]
 800c786:	428a      	cmp	r2, r1
            MDM_LicTable[PayLoad->LicEnum].Address = (uint32_t)PayLoad;
 800c788:	bf03      	ittte	eq
 800c78a:	eb0b 1242 	addeq.w	r2, fp, r2, lsl #5
            NumberofFoundedLic++;
 800c78e:	f109 0901 	addeq.w	r9, r9, #1
            MDM_LicTable[PayLoad->LicEnum].Address = (uint32_t)PayLoad;
 800c792:	f8c2 c020 	streq.w	ip, [r2, #32]
            NumberofFoundedLic++;
 800c796:	2200      	movne	r2, #0
            found =1;
 800c798:	bf08      	it	eq
 800c79a:	2201      	moveq	r2, #1
        for(Index =0; ((Index<NumberOfKnownLic) & (found==0));Index++) {
 800c79c:	3301      	adds	r3, #1
 800c79e:	e7ca      	b.n	800c736 <InitMetaDataManager+0x18a>
      } else if(pMetaDataHeader->Type == MDM_DATA_TYPE_GMD) {
 800c7a0:	2b01      	cmp	r3, #1
 800c7a2:	d1cc      	bne.n	800c73e <InitMetaDataManager+0x192>
        int32_t found=0;
 800c7a4:	2300      	movs	r3, #0
        MDM_PayLoadGMD_t *PayLoad = (MDM_PayLoadGMD_t *) pMetaDataHeader->puint8_PayLoad;
 800c7a6:	f100 0e08 	add.w	lr, r0, #8
        for(Index =0; ((Index<NumberOfKnownGMD) & (found==0));Index++) {
 800c7aa:	469c      	mov	ip, r3
 800c7ac:	9a03      	ldr	r2, [sp, #12]
 800c7ae:	4562      	cmp	r2, ip
 800c7b0:	d9c5      	bls.n	800c73e <InitMetaDataManager+0x192>
 800c7b2:	2b00      	cmp	r3, #0
 800c7b4:	d1c3      	bne.n	800c73e <InitMetaDataManager+0x192>
          if(known_GMD[Index].GMDType==PayLoad->GMDTypeEnum) {
 800c7b6:	6883      	ldr	r3, [r0, #8]
 800c7b8:	f816 103c 	ldrb.w	r1, [r6, ip, lsl #3]
 800c7bc:	4299      	cmp	r1, r3
 800c7be:	d17f      	bne.n	800c8c0 <InitMetaDataManager+0x314>
            MDM_GMDTable[PayLoad->GMDTypeEnum].Address = (uint32_t)PayLoad;
 800c7c0:	231c      	movs	r3, #28
 800c7c2:	4359      	muls	r1, r3
 800c7c4:	186b      	adds	r3, r5, r1
            MDM_GMDTable[PayLoad->GMDTypeEnum].GMDSize = PayLoad->GMDSize;
 800c7c6:	68c2      	ldr	r2, [r0, #12]
            MDM_GMDTable[PayLoad->GMDTypeEnum].Address = (uint32_t)PayLoad;
 800c7c8:	f8c3 e15c 	str.w	lr, [r3, #348]	; 0x15c
            MDM_GMDTable[PayLoad->GMDTypeEnum].GMDSize = PayLoad->GMDSize;
 800c7cc:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
            if(known_GMD[Index].GMDSize!=PayLoad->GMDSize) {
 800c7d0:	f858 303c 	ldr.w	r3, [r8, ip, lsl #3]
 800c7d4:	429a      	cmp	r2, r3
            NumberofFoundedGMD++;
 800c7d6:	f10a 0a01 	add.w	sl, sl, #1
            if(known_GMD[Index].GMDSize!=PayLoad->GMDSize) {
 800c7da:	d075      	beq.n	800c8c8 <InitMetaDataManager+0x31c>
              MDM_PRINTF("Warning: The Meta Data Manager Contains for %s Generic Meta Data a size=%ld different from what we need =%ld\r\n\tIt will be ERASED\r\n",
 800c7dc:	4833      	ldr	r0, [pc, #204]	; (800c8ac <InitMetaDataManager+0x300>)
 800c7de:	4401      	add	r1, r0
 800c7e0:	4833      	ldr	r0, [pc, #204]	; (800c8b0 <InitMetaDataManager+0x304>)
 800c7e2:	f00d fe61 	bl	801a4a8 <iprintf>
              ReseMetaDataManager();
 800c7e6:	f7ff fe91 	bl	800c50c <ReseMetaDataManager>
              NumberofFoundedGMD=0;
 800c7ea:	f04f 0a00 	mov.w	sl, #0
              NumberofFoundedLic=0;
 800c7ee:	46d1      	mov	r9, sl
    if(MetaDataType==MDM_DATA_TYPE_LIC) {
 800c7f0:	f017 07ff 	ands.w	r7, r7, #255	; 0xff
 800c7f4:	f040 8096 	bne.w	800c924 <InitMetaDataManager+0x378>
      if(NumberofFoundedLic<NumberOfKnownLic) {
 800c7f8:	4a25      	ldr	r2, [pc, #148]	; (800c890 <InitMetaDataManager+0x2e4>)
 800c7fa:	6893      	ldr	r3, [r2, #8]
 800c7fc:	454b      	cmp	r3, r9
 800c7fe:	d92e      	bls.n	800c85e <InitMetaDataManager+0x2b2>
        NecessityToSaveMetaDataManager = 1;
 800c800:	2601      	movs	r6, #1
             ((uint32_t)uint64_MetaDataVector) +
 800c802:	f8df 8090 	ldr.w	r8, [pc, #144]	; 800c894 <InitMetaDataManager+0x2e8>
        NecessityToSaveMetaDataManager = 1;
 800c806:	6016      	str	r6, [r2, #0]
             ((uint32_t)uint64_MetaDataVector) +
 800c808:	f8db 2000 	ldr.w	r2, [fp]
 800c80c:	eba2 0208 	sub.w	r2, r2, r8
 800c810:	3208      	adds	r2, #8
             (NumberOfKnownLic-NumberofFoundedLic)*(sizeof(MDM_PayLoadLic_t) + 8 /* MetaDataHeader */))>(MDM_MAX_DATASIZE_64<<3)) {
 800c812:	eba3 0309 	sub.w	r3, r3, r9
             ((uint32_t)uint64_MetaDataVector) +
 800c816:	21a4      	movs	r1, #164	; 0xa4
 800c818:	fb01 2303 	mla	r3, r1, r3, r2
        if(((((uint32_t) puint8_RW_MetaData)+8/* for the MDM_DATA_TYPE_END */) -
 800c81c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c820:	d910      	bls.n	800c844 <InitMetaDataManager+0x298>
          MDM_PRINTF("Meta Data Manager has not enough free space.. It will be reseted\r\n");
 800c822:	4824      	ldr	r0, [pc, #144]	; (800c8b4 <InitMetaDataManager+0x308>)
 800c824:	f00d fec6 	bl	801a5b4 <puts>
          puint8_RW_MetaData = ((uint8_t *) uint64_MetaDataVector)+8;
 800c828:	f108 0308 	add.w	r3, r8, #8
 800c82c:	4a22      	ldr	r2, [pc, #136]	; (800c8b8 <InitMetaDataManager+0x30c>)
 800c82e:	f8cb 3000 	str.w	r3, [fp]
          for(Index=1;Index<OSX_LICENSE_NUM;Index++) {
 800c832:	4633      	mov	r3, r6
 800c834:	3301      	adds	r3, #1
 800c836:	2b0a      	cmp	r3, #10
            MDM_LicTable[Index].Address =0;
 800c838:	63d7      	str	r7, [r2, #60]	; 0x3c
          for(Index=1;Index<OSX_LICENSE_NUM;Index++) {
 800c83a:	f102 0220 	add.w	r2, r2, #32
 800c83e:	d1f9      	bne.n	800c834 <InitMetaDataManager+0x288>
          NumberofFoundedLic = 0;
 800c840:	f04f 0900 	mov.w	r9, #0
            MDM_PRINTF("Adding=%s%s Version=%s\r\n",MDM_LicTable[known_OsxLic[Index].LicEnum].LicType,MDM_LicTable[known_OsxLic[Index].LicEnum].LicName,PayLoad->osxLibVersion);
 800c844:	f8df 8070 	ldr.w	r8, [pc, #112]	; 800c8b8 <InitMetaDataManager+0x30c>
 800c848:	3409      	adds	r4, #9
        for(Index=0;Index<NumberOfKnownLic; Index++) {
 800c84a:	2700      	movs	r7, #0
 800c84c:	4b10      	ldr	r3, [pc, #64]	; (800c890 <InitMetaDataManager+0x2e4>)
 800c84e:	682e      	ldr	r6, [r5, #0]
 800c850:	689b      	ldr	r3, [r3, #8]
 800c852:	42bb      	cmp	r3, r7
 800c854:	d83a      	bhi.n	800c8cc <InitMetaDataManager+0x320>
        *((uint32_t *) (puint8_RW_MetaData+4)) = 0; /* No Payload */
 800c856:	21ff      	movs	r1, #255	; 0xff
 800c858:	2300      	movs	r3, #0
 800c85a:	e9c6 1300 	strd	r1, r3, [r6]
    KnownMetaDataTable= va_arg(ap,void *);
 800c85e:	9b01      	ldr	r3, [sp, #4]
 800c860:	3308      	adds	r3, #8
 800c862:	9304      	str	r3, [sp, #16]
 800c864:	9b01      	ldr	r3, [sp, #4]
 800c866:	685c      	ldr	r4, [r3, #4]
 800c868:	e6de      	b.n	800c628 <InitMetaDataManager+0x7c>
 800c86a:	bf00      	nop
 800c86c:	0807f000 	.word	0x0807f000
 800c870:	200000d0 	.word	0x200000d0
 800c874:	20002238 	.word	0x20002238
 800c878:	12345678 	.word	0x12345678
 800c87c:	0807f004 	.word	0x0807f004
 800c880:	00010300 	.word	0x00010300
 800c884:	08020b4d 	.word	0x08020b4d
 800c888:	0807f008 	.word	0x0807f008
 800c88c:	08020b9c 	.word	0x08020b9c
 800c890:	200021e8 	.word	0x200021e8
 800c894:	20002230 	.word	0x20002230
 800c898:	08020d00 	.word	0x08020d00
 800c89c:	08020d28 	.word	0x08020d28
 800c8a0:	20000214 	.word	0x20000214
 800c8a4:	08020bbf 	.word	0x08020bbf
 800c8a8:	08020be7 	.word	0x08020be7
 800c8ac:	20000218 	.word	0x20000218
 800c8b0:	08020c04 	.word	0x08020c04
 800c8b4:	08020c87 	.word	0x08020c87
 800c8b8:	200000d4 	.word	0x200000d4
 800c8bc:	08020d43 	.word	0x08020d43
 800c8c0:	2300      	movs	r3, #0
        for(Index =0; ((Index<NumberOfKnownGMD) & (found==0));Index++) {
 800c8c2:	f10c 0c01 	add.w	ip, ip, #1
 800c8c6:	e771      	b.n	800c7ac <InitMetaDataManager+0x200>
            found =1;
 800c8c8:	2301      	movs	r3, #1
 800c8ca:	e7fa      	b.n	800c8c2 <InitMetaDataManager+0x316>
          if(MDM_LicTable[known_OsxLic[Index].LicEnum].Address==0) {
 800c8cc:	f814 2c09 	ldrb.w	r2, [r4, #-9]
 800c8d0:	eb05 1342 	add.w	r3, r5, r2, lsl #5
 800c8d4:	6a1b      	ldr	r3, [r3, #32]
 800c8d6:	bb13      	cbnz	r3, 800c91e <InitMetaDataManager+0x372>
            pMetaDataHeader->Type = MDM_DATA_TYPE_LIC;
 800c8d8:	6033      	str	r3, [r6, #0]
            PayLoad->osxLicenseInitialized = 0;
 800c8da:	60f3      	str	r3, [r6, #12]
            sprintf((char *)PayLoad->osxLibVersion,known_OsxLic[Index].osxLibVersion);
 800c8dc:	f106 0308 	add.w	r3, r6, #8
            pMetaDataHeader->Lenght = sizeof(MDM_PayLoadLic_t) + 8 /* For Meta Data Header */;
 800c8e0:	21a4      	movs	r1, #164	; 0xa4
            sprintf((char *)PayLoad->osxLibVersion,known_OsxLic[Index].osxLibVersion);
 800c8e2:	9302      	str	r3, [sp, #8]
 800c8e4:	f106 0310 	add.w	r3, r6, #16
            PayLoad->LicEnum = known_OsxLic[Index].LicEnum;
 800c8e8:	e9c6 1201 	strd	r1, r2, [r6, #4]
            sprintf((char *)PayLoad->osxLibVersion,known_OsxLic[Index].osxLibVersion);
 800c8ec:	4618      	mov	r0, r3
 800c8ee:	4621      	mov	r1, r4
 800c8f0:	9303      	str	r3, [sp, #12]
 800c8f2:	f00d fe7f 	bl	801a5f4 <siprintf>
            MDM_PRINTF("Adding=%s%s Version=%s\r\n",MDM_LicTable[known_OsxLic[Index].LicEnum].LicType,MDM_LicTable[known_OsxLic[Index].LicEnum].LicName,PayLoad->osxLibVersion);
 800c8f6:	f814 1c09 	ldrb.w	r1, [r4, #-9]
 800c8fa:	9b03      	ldr	r3, [sp, #12]
 800c8fc:	483f      	ldr	r0, [pc, #252]	; (800c9fc <InitMetaDataManager+0x450>)
 800c8fe:	0149      	lsls	r1, r1, #5
 800c900:	1d0a      	adds	r2, r1, #4
 800c902:	3110      	adds	r1, #16
 800c904:	4442      	add	r2, r8
 800c906:	4441      	add	r1, r8
 800c908:	f00d fdce 	bl	801a4a8 <iprintf>
            MDM_LicTable[PayLoad->LicEnum].Address = (uint32_t)PayLoad;
 800c90c:	68b3      	ldr	r3, [r6, #8]
 800c90e:	9a02      	ldr	r2, [sp, #8]
 800c910:	eb05 1343 	add.w	r3, r5, r3, lsl #5
 800c914:	621a      	str	r2, [r3, #32]
            puint8_RW_MetaData +=pMetaDataHeader->Lenght;
 800c916:	682b      	ldr	r3, [r5, #0]
 800c918:	6872      	ldr	r2, [r6, #4]
 800c91a:	4413      	add	r3, r2
 800c91c:	602b      	str	r3, [r5, #0]
        for(Index=0;Index<NumberOfKnownLic; Index++) {
 800c91e:	3701      	adds	r7, #1
 800c920:	342d      	adds	r4, #45	; 0x2d
 800c922:	e793      	b.n	800c84c <InitMetaDataManager+0x2a0>
    } else if(MetaDataType==MDM_DATA_TYPE_GMD){
 800c924:	2f01      	cmp	r7, #1
 800c926:	d19a      	bne.n	800c85e <InitMetaDataManager+0x2b2>
      if(NumberofFoundedGMD<NumberOfKnownGMD) {
 800c928:	4b35      	ldr	r3, [pc, #212]	; (800ca00 <InitMetaDataManager+0x454>)
 800c92a:	685c      	ldr	r4, [r3, #4]
 800c92c:	4554      	cmp	r4, sl
 800c92e:	d996      	bls.n	800c85e <InitMetaDataManager+0x2b2>
        for(Index =0; Index<NumberOfKnownGMD ;Index++) {
 800c930:	2100      	movs	r1, #0
        NecessityToSaveMetaDataManager = 1;
 800c932:	601f      	str	r7, [r3, #0]
        uint32_t HowManyExtraSpaceINeed =0;
 800c934:	460a      	mov	r2, r1
          if(MDM_GMDTable[known_GMD[Index].GMDType].Address==0) {
 800c936:	271c      	movs	r7, #28
            HowManyExtraSpaceINeed += (((known_GMD[Index].GMDSize+7)>>3)<<3) /* Round to Multiple of 8 bytes */ + 
 800c938:	f106 0c04 	add.w	ip, r6, #4
        for(Index =0; Index<NumberOfKnownGMD ;Index++) {
 800c93c:	428c      	cmp	r4, r1
 800c93e:	d126      	bne.n	800c98e <InitMetaDataManager+0x3e2>
             ((uint32_t)uint64_MetaDataVector) +
 800c940:	f8db 3000 	ldr.w	r3, [fp]
 800c944:	4c2f      	ldr	r4, [pc, #188]	; (800ca04 <InitMetaDataManager+0x458>)
 800c946:	1b1b      	subs	r3, r3, r4
 800c948:	3308      	adds	r3, #8
 800c94a:	4413      	add	r3, r2
        if(((((uint32_t) puint8_RW_MetaData)+8/* for the MDM_DATA_TYPE_END */) -
 800c94c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c950:	d910      	bls.n	800c974 <InitMetaDataManager+0x3c8>
          MDM_PRINTF("Meta Data Manager has not enough free space.. It will be reseted\r\n");
 800c952:	482d      	ldr	r0, [pc, #180]	; (800ca08 <InitMetaDataManager+0x45c>)
 800c954:	f00d fe2e 	bl	801a5b4 <puts>
          puint8_RW_MetaData = ((uint8_t *) uint64_MetaDataVector)+8;
 800c958:	3408      	adds	r4, #8
 800c95a:	4a2c      	ldr	r2, [pc, #176]	; (800ca0c <InitMetaDataManager+0x460>)
 800c95c:	f8cb 4000 	str.w	r4, [fp]
          for(Index=1;Index<GMD_NUM;Index++) {
 800c960:	2301      	movs	r3, #1
            MDM_GMDTable[Index].Address =0;
 800c962:	2100      	movs	r1, #0
          for(Index=1;Index<GMD_NUM;Index++) {
 800c964:	3301      	adds	r3, #1
 800c966:	2b0f      	cmp	r3, #15
            MDM_GMDTable[Index].Address =0;
 800c968:	6351      	str	r1, [r2, #52]	; 0x34
          for(Index=1;Index<GMD_NUM;Index++) {
 800c96a:	f102 021c 	add.w	r2, r2, #28
 800c96e:	d1f9      	bne.n	800c964 <InitMetaDataManager+0x3b8>
          NumberofFoundedGMD = 0;
 800c970:	f04f 0a00 	mov.w	sl, #0
        for(Index=0;Index<NumberOfKnownGMD; Index++) {
 800c974:	f8df 8088 	ldr.w	r8, [pc, #136]	; 800ca00 <InitMetaDataManager+0x454>
 800c978:	2700      	movs	r7, #0
 800c97a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c97e:	682c      	ldr	r4, [r5, #0]
 800c980:	42bb      	cmp	r3, r7
 800c982:	d815      	bhi.n	800c9b0 <InitMetaDataManager+0x404>
        *((uint32_t *) (puint8_RW_MetaData+4)) = 0; /* No Payload */
 800c984:	22ff      	movs	r2, #255	; 0xff
 800c986:	2300      	movs	r3, #0
 800c988:	e9c4 2300 	strd	r2, r3, [r4]
 800c98c:	e767      	b.n	800c85e <InitMetaDataManager+0x2b2>
          if(MDM_GMDTable[known_GMD[Index].GMDType].Address==0) {
 800c98e:	f816 3031 	ldrb.w	r3, [r6, r1, lsl #3]
 800c992:	fb07 b303 	mla	r3, r7, r3, fp
 800c996:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 800c99a:	b93b      	cbnz	r3, 800c9ac <InitMetaDataManager+0x400>
            HowManyExtraSpaceINeed += (((known_GMD[Index].GMDSize+7)>>3)<<3) /* Round to Multiple of 8 bytes */ + 
 800c99c:	f85c 0031 	ldr.w	r0, [ip, r1, lsl #3]
 800c9a0:	f102 0310 	add.w	r3, r2, #16
 800c9a4:	1dc2      	adds	r2, r0, #7
 800c9a6:	f022 0207 	bic.w	r2, r2, #7
 800c9aa:	441a      	add	r2, r3
        for(Index =0; Index<NumberOfKnownGMD ;Index++) {
 800c9ac:	3101      	adds	r1, #1
 800c9ae:	e7c5      	b.n	800c93c <InitMetaDataManager+0x390>
          if(MDM_GMDTable[known_GMD[Index].GMDType].Address==0) {
 800c9b0:	f816 2037 	ldrb.w	r2, [r6, r7, lsl #3]
 800c9b4:	211c      	movs	r1, #28
 800c9b6:	4351      	muls	r1, r2
 800c9b8:	eb05 0c01 	add.w	ip, r5, r1
 800c9bc:	f8dc 315c 	ldr.w	r3, [ip, #348]	; 0x15c
 800c9c0:	b9cb      	cbnz	r3, 800c9f6 <InitMetaDataManager+0x44a>
            pMetaDataHeader->Type = MDM_DATA_TYPE_GMD;
 800c9c2:	2301      	movs	r3, #1
 800c9c4:	6023      	str	r3, [r4, #0]
            pMetaDataHeader->Lenght = (((known_GMD[Index].GMDSize+7)>>3)<<3) /* Round to Multiple of 8 bytes */ + 
 800c9c6:	1d33      	adds	r3, r6, #4
            MDM_PRINTF("Adding=%s (Pos=%d) Size=%ld\r\n",MDM_GMDTable[known_GMD[Index].GMDType].GMDName,
 800c9c8:	3104      	adds	r1, #4
            pMetaDataHeader->Lenght = (((known_GMD[Index].GMDSize+7)>>3)<<3) /* Round to Multiple of 8 bytes */ + 
 800c9ca:	f853 3037 	ldr.w	r3, [r3, r7, lsl #3]
            PayLoad->GMDSize     = known_GMD[Index].GMDSize;
 800c9ce:	60e3      	str	r3, [r4, #12]
            pMetaDataHeader->Lenght = (((known_GMD[Index].GMDSize+7)>>3)<<3) /* Round to Multiple of 8 bytes */ + 
 800c9d0:	1dd8      	adds	r0, r3, #7
 800c9d2:	f020 0007 	bic.w	r0, r0, #7
              8 + 8 /* For Meta Data Header */;
 800c9d6:	3010      	adds	r0, #16
            PayLoad->GMDTypeEnum = known_GMD[Index].GMDType;
 800c9d8:	e9c4 0201 	strd	r0, r2, [r4, #4]
            PayLoad = (MDM_PayLoadGMD_t *) pMetaDataHeader->puint8_PayLoad;
 800c9dc:	f104 0008 	add.w	r0, r4, #8
            MDM_GMDTable[known_GMD[Index].GMDType].GMDSize = PayLoad->GMDSize;
 800c9e0:	e9cc 3056 	strd	r3, r0, [ip, #344]	; 0x158
            MDM_PRINTF("Adding=%s (Pos=%d) Size=%ld\r\n",MDM_GMDTable[known_GMD[Index].GMDType].GMDName,
 800c9e4:	4809      	ldr	r0, [pc, #36]	; (800ca0c <InitMetaDataManager+0x460>)
 800c9e6:	4401      	add	r1, r0
 800c9e8:	4809      	ldr	r0, [pc, #36]	; (800ca10 <InitMetaDataManager+0x464>)
 800c9ea:	f00d fd5d 	bl	801a4a8 <iprintf>
            puint8_RW_MetaData +=pMetaDataHeader->Lenght;
 800c9ee:	682b      	ldr	r3, [r5, #0]
 800c9f0:	6862      	ldr	r2, [r4, #4]
 800c9f2:	4413      	add	r3, r2
 800c9f4:	602b      	str	r3, [r5, #0]
        for(Index=0;Index<NumberOfKnownGMD; Index++) {
 800c9f6:	3701      	adds	r7, #1
 800c9f8:	e7bf      	b.n	800c97a <InitMetaDataManager+0x3ce>
 800c9fa:	bf00      	nop
 800c9fc:	08020cc9 	.word	0x08020cc9
 800ca00:	200021e8 	.word	0x200021e8
 800ca04:	20002230 	.word	0x20002230
 800ca08:	08020c87 	.word	0x08020c87
 800ca0c:	20000214 	.word	0x20000214
 800ca10:	08020ce2 	.word	0x08020ce2

0800ca14 <MDM_SaveGMD>:
 * @param MDM_GenericMetaDataType_t GMDType Generic Meta Data type that we want to save
 * @param void *GMD Pointer where find the Generic Meta Data
 * @retval uin32_t Success/NotSuccess (1/0)
 */
uint32_t MDM_SaveGMD(MDM_GenericMetaDataType_t GMDType,void *GMD)
{
 800ca14:	b570      	push	{r4, r5, r6, lr}
  uint32_t RetValue=1;
  if(MDM_GMDTable[GMDType].Address!=0) {
 800ca16:	4d0d      	ldr	r5, [pc, #52]	; (800ca4c <MDM_SaveGMD+0x38>)
 800ca18:	261c      	movs	r6, #28
 800ca1a:	4346      	muls	r6, r0
 800ca1c:	19ab      	adds	r3, r5, r6
 800ca1e:	f8d3 415c 	ldr.w	r4, [r3, #348]	; 0x15c
 800ca22:	b17c      	cbz	r4, 800ca44 <MDM_SaveGMD+0x30>
    MDM_PayLoadGMD_t *MDMPayLoad = (MDM_PayLoadGMD_t *)MDM_GMDTable[GMDType].Address;
    memcpy((void *)MDMPayLoad->puint8_GMD,GMD,MDMPayLoad->GMDSize);
 800ca24:	6862      	ldr	r2, [r4, #4]
 800ca26:	f104 0008 	add.w	r0, r4, #8
 800ca2a:	f00c fff9 	bl	8019a20 <memcpy>
    NecessityToSaveMetaDataManager=1;
 800ca2e:	4b08      	ldr	r3, [pc, #32]	; (800ca50 <MDM_SaveGMD+0x3c>)
    MDM_PRINTF("Updating the Generic Meta Data type=%s\r\n",MDM_GMDTable[GMDType].GMDName);
 800ca30:	4808      	ldr	r0, [pc, #32]	; (800ca54 <MDM_SaveGMD+0x40>)
    NecessityToSaveMetaDataManager=1;
 800ca32:	2401      	movs	r4, #1
    MDM_PRINTF("Updating the Generic Meta Data type=%s\r\n",MDM_GMDTable[GMDType].GMDName);
 800ca34:	19a9      	adds	r1, r5, r6
    NecessityToSaveMetaDataManager=1;
 800ca36:	601c      	str	r4, [r3, #0]
    MDM_PRINTF("Updating the Generic Meta Data type=%s\r\n",MDM_GMDTable[GMDType].GMDName);
 800ca38:	f501 71a4 	add.w	r1, r1, #328	; 0x148
  } else {
    MDM_PRINTF("ERROR before saving one Generic Meta Datait's necessary Initializes the MDM with the same type=%d\r\n",GMDType);
 800ca3c:	f00d fd34 	bl	801a4a8 <iprintf>
    RetValue=0;
  }
  return RetValue;
}
 800ca40:	4620      	mov	r0, r4
 800ca42:	bd70      	pop	{r4, r5, r6, pc}
    MDM_PRINTF("ERROR before saving one Generic Meta Datait's necessary Initializes the MDM with the same type=%d\r\n",GMDType);
 800ca44:	4601      	mov	r1, r0
 800ca46:	4804      	ldr	r0, [pc, #16]	; (800ca58 <MDM_SaveGMD+0x44>)
 800ca48:	e7f8      	b.n	800ca3c <MDM_SaveGMD+0x28>
 800ca4a:	bf00      	nop
 800ca4c:	200000d0 	.word	0x200000d0
 800ca50:	200021e8 	.word	0x200021e8
 800ca54:	08020d7a 	.word	0x08020d7a
 800ca58:	08020da3 	.word	0x08020da3

0800ca5c <MDM_ReCallGMD>:
 * @param MDM_GenericMetaDataType_t GMDType Generic Meta Data type that we want to retrieve
 * @param void *GMD Pointer where to save the Generic Meta Data
 * @retval uin32_t Success/NotSuccess (1/0)
 */
uint32_t MDM_ReCallGMD(MDM_GenericMetaDataType_t GMDType,void *GMD)
{
 800ca5c:	4603      	mov	r3, r0
 800ca5e:	4608      	mov	r0, r1
  uint32_t RetValue=1;
  if(MDM_GMDTable[GMDType].Address!=0) {
 800ca60:	490a      	ldr	r1, [pc, #40]	; (800ca8c <MDM_ReCallGMD+0x30>)
 800ca62:	221c      	movs	r2, #28
 800ca64:	fb02 1203 	mla	r2, r2, r3, r1
{
 800ca68:	b510      	push	{r4, lr}
  if(MDM_GMDTable[GMDType].Address!=0) {
 800ca6a:	f8d2 415c 	ldr.w	r4, [r2, #348]	; 0x15c
 800ca6e:	b13c      	cbz	r4, 800ca80 <MDM_ReCallGMD+0x24>
    MDM_PayLoadGMD_t *MDMPayLoad = (MDM_PayLoadGMD_t *)MDM_GMDTable[GMDType].Address;
    memcpy(GMD,(void *)MDMPayLoad->puint8_GMD,MDMPayLoad->GMDSize);
 800ca70:	6862      	ldr	r2, [r4, #4]
 800ca72:	f104 0108 	add.w	r1, r4, #8
 800ca76:	f00c ffd3 	bl	8019a20 <memcpy>
  uint32_t RetValue=1;
 800ca7a:	2401      	movs	r4, #1
  } else {
    MDM_PRINTF("ERROR there is not a Generic Meta Data type=%d inside the MDM\r\n",GMDType);
    RetValue=0;
  }
  return RetValue;
}
 800ca7c:	4620      	mov	r0, r4
 800ca7e:	bd10      	pop	{r4, pc}
    MDM_PRINTF("ERROR there is not a Generic Meta Data type=%d inside the MDM\r\n",GMDType);
 800ca80:	4619      	mov	r1, r3
 800ca82:	4803      	ldr	r0, [pc, #12]	; (800ca90 <MDM_ReCallGMD+0x34>)
 800ca84:	f00d fd10 	bl	801a4a8 <iprintf>
  return RetValue;
 800ca88:	e7f8      	b.n	800ca7c <MDM_ReCallGMD+0x20>
 800ca8a:	bf00      	nop
 800ca8c:	200000d0 	.word	0x200000d0
 800ca90:	08020e07 	.word	0x08020e07

0800ca94 <AttrMod_Request_AudioLevel>:
 * @param  uint8_t *att_data attribute data
 * @retval None
 */
static void AttrMod_Request_AudioLevel(void *VoidCharPointer,uint16_t attr_handle, uint16_t Offset, uint8_t data_length, uint8_t *att_data)
{
  if (att_data[0] == 01U) {
 800ca94:	9b00      	ldr	r3, [sp, #0]
 800ca96:	781b      	ldrb	r3, [r3, #0]
 800ca98:	2b01      	cmp	r3, #1
 800ca9a:	d102      	bne.n	800caa2 <AttrMod_Request_AudioLevel+0xe>
    BLE_AudioLevel_NotifyEvent= BLE_NOTIFY_SUB;
 800ca9c:	4a03      	ldr	r2, [pc, #12]	; (800caac <AttrMod_Request_AudioLevel+0x18>)
 800ca9e:	7013      	strb	r3, [r2, #0]
 800caa0:	4770      	bx	lr
  } else if (att_data[0] == 0U){
 800caa2:	b913      	cbnz	r3, 800caaa <AttrMod_Request_AudioLevel+0x16>
    BLE_AudioLevel_NotifyEvent= BLE_NOTIFY_UNSUB;
 800caa4:	4b01      	ldr	r3, [pc, #4]	; (800caac <AttrMod_Request_AudioLevel+0x18>)
 800caa6:	2202      	movs	r2, #2
 800caa8:	701a      	strb	r2, [r3, #0]
   Term_Update(BufferToWrite,BytesToWrite);
 } else {
   BLE_MANAGER_PRINTF("--->Audio Level=%s", (BLE_AudioLevel_NotifyEvent == BLE_NOTIFY_SUB) ? " ON\r\n" : " OFF\r\n");
 }
#endif
}
 800caaa:	4770      	bx	lr
 800caac:	20003230 	.word	0x20003230

0800cab0 <BLE_InitAudioLevelService>:
{
 800cab0:	b538      	push	{r3, r4, r5, lr}
  memset(BleCharPointer,0,sizeof(BleCharTypeDef));  
 800cab2:	4c10      	ldr	r4, [pc, #64]	; (800caf4 <BLE_InitAudioLevelService+0x44>)
{
 800cab4:	4605      	mov	r5, r0
  memset(BleCharPointer,0,sizeof(BleCharTypeDef));  
 800cab6:	221c      	movs	r2, #28
 800cab8:	2100      	movs	r1, #0
 800caba:	f104 0014 	add.w	r0, r4, #20
 800cabe:	f00c ffd7 	bl	8019a70 <memset>
  BleCharPointer->AttrMod_Request_CB= AttrMod_Request_AudioLevel;
 800cac2:	4b0d      	ldr	r3, [pc, #52]	; (800caf8 <BLE_InitAudioLevelService+0x48>)
  COPY_AUDIO_LEVEL_CHAR_UUID((BleCharPointer->uuid));
 800cac4:	4a0d      	ldr	r2, [pc, #52]	; (800cafc <BLE_InitAudioLevelService+0x4c>)
  BleCharPointer->AttrMod_Request_CB= AttrMod_Request_AudioLevel;
 800cac6:	6263      	str	r3, [r4, #36]	; 0x24
  COPY_AUDIO_LEVEL_CHAR_UUID((BleCharPointer->uuid));
 800cac8:	4b0d      	ldr	r3, [pc, #52]	; (800cb00 <BLE_InitAudioLevelService+0x50>)
 800caca:	490e      	ldr	r1, [pc, #56]	; (800cb04 <BLE_InitAudioLevelService+0x54>)
  BLE_MANAGER_PRINTF("BLE Audio Level features ok\r\n");
 800cacc:	480e      	ldr	r0, [pc, #56]	; (800cb08 <BLE_InitAudioLevelService+0x58>)
  COPY_AUDIO_LEVEL_CHAR_UUID((BleCharPointer->uuid));
 800cace:	e9c4 2301 	strd	r2, r3, [r4, #4]
 800cad2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800cad6:	e9c4 1303 	strd	r1, r3, [r4, #12]
  BleCharPointer->Char_UUID_Type= UUID_TYPE_128;
 800cada:	2302      	movs	r3, #2
 800cadc:	7523      	strb	r3, [r4, #20]
  uint8_t TempResult= 2U + AudioLevelNumber;
 800cade:	441d      	add	r5, r3
  BleCharPointer->Char_Properties= CHAR_PROP_NOTIFY;
 800cae0:	4b0a      	ldr	r3, [pc, #40]	; (800cb0c <BLE_InitAudioLevelService+0x5c>)
 800cae2:	61a3      	str	r3, [r4, #24]
  BleCharPointer->Char_Value_Length= (uint16_t)TempResult;
 800cae4:	b2ed      	uxtb	r5, r5
  BleCharPointer->Is_Variable= 0;
 800cae6:	2300      	movs	r3, #0
  BleCharPointer->Char_Value_Length= (uint16_t)TempResult;
 800cae8:	82e5      	strh	r5, [r4, #22]
  BleCharPointer->Is_Variable= 0;
 800caea:	7723      	strb	r3, [r4, #28]
  BLE_MANAGER_PRINTF("BLE Audio Level features ok\r\n");
 800caec:	f00d fd62 	bl	801a5b4 <puts>
}
 800caf0:	1d20      	adds	r0, r4, #4
 800caf2:	bd38      	pop	{r3, r4, r5, pc}
 800caf4:	20003230 	.word	0x20003230
 800caf8:	0800ca95 	.word	0x0800ca95
 800cafc:	a5d5c51b 	.word	0xa5d5c51b
 800cb00:	ac360002 	.word	0xac360002
 800cb04:	000111e1 	.word	0x000111e1
 800cb08:	08020e47 	.word	0x08020e47
 800cb0c:	10040010 	.word	0x10040010

0800cb10 <BLE_SetAudioLevelAdvertizeData>:
  manuf_data[AUDIO_LEVEL_ADVERTIZE_DATA_POSITION] |= 0x04U;
 800cb10:	7bc3      	ldrb	r3, [r0, #15]
 800cb12:	f043 0304 	orr.w	r3, r3, #4
 800cb16:	73c3      	strb	r3, [r0, #15]
}
 800cb18:	4770      	bx	lr
	...

0800cb1c <BLE_AudioLevelUpdate>:
{  
 800cb1c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cb1e:	460c      	mov	r4, r1
 800cb20:	4605      	mov	r5, r0
  STORE_LE_16(buff,(HAL_GetTick()>>3));
 800cb22:	f7fa fd33 	bl	800758c <HAL_GetTick>
 800cb26:	08c0      	lsrs	r0, r0, #3
 800cb28:	f88d 0000 	strb.w	r0, [sp]
 800cb2c:	f7fa fd2e 	bl	800758c <HAL_GetTick>
 800cb30:	0ac0      	lsrs	r0, r0, #11
 800cb32:	f88d 0001 	strb.w	r0, [sp, #1]
  for(Counter=0;Counter<AudioLevelNumber;Counter++) {
 800cb36:	f10d 0202 	add.w	r2, sp, #2
 800cb3a:	2300      	movs	r3, #0
 800cb3c:	b2d9      	uxtb	r1, r3
 800cb3e:	428c      	cmp	r4, r1
 800cb40:	d819      	bhi.n	800cb76 <BLE_AudioLevelUpdate+0x5a>
  ret = ACI_GATT_UPDATE_CHAR_VALUE(&BleCharAudioLevel, 0, (2U + AudioLevelNumber), buff);
 800cb42:	1ca2      	adds	r2, r4, #2
 800cb44:	4811      	ldr	r0, [pc, #68]	; (800cb8c <BLE_AudioLevelUpdate+0x70>)
 800cb46:	466b      	mov	r3, sp
 800cb48:	b2d2      	uxtb	r2, r2
 800cb4a:	2100      	movs	r1, #0
 800cb4c:	f000 fede 	bl	800d90c <safe_aci_gatt_update_char_value>
  if (ret != BLE_STATUS_SUCCESS){
 800cb50:	4604      	mov	r4, r0
 800cb52:	b168      	cbz	r0, 800cb70 <BLE_AudioLevelUpdate+0x54>
    if(BLE_StdErr_Service==BLE_SERV_ENABLE){
 800cb54:	4b0e      	ldr	r3, [pc, #56]	; (800cb90 <BLE_AudioLevelUpdate+0x74>)
 800cb56:	781b      	ldrb	r3, [r3, #0]
 800cb58:	2b01      	cmp	r3, #1
 800cb5a:	d112      	bne.n	800cb82 <BLE_AudioLevelUpdate+0x66>
      BytesToWrite = (uint8_t)sprintf((char *)BufferToWrite, "Error Updating Audio Level Data Char\r\n");
 800cb5c:	490d      	ldr	r1, [pc, #52]	; (800cb94 <BLE_AudioLevelUpdate+0x78>)
 800cb5e:	480e      	ldr	r0, [pc, #56]	; (800cb98 <BLE_AudioLevelUpdate+0x7c>)
 800cb60:	f00d fdb8 	bl	801a6d4 <strcpy>
 800cb64:	4b0d      	ldr	r3, [pc, #52]	; (800cb9c <BLE_AudioLevelUpdate+0x80>)
      Stderr_Update(BufferToWrite,BytesToWrite);
 800cb66:	480c      	ldr	r0, [pc, #48]	; (800cb98 <BLE_AudioLevelUpdate+0x7c>)
      BytesToWrite = (uint8_t)sprintf((char *)BufferToWrite, "Error Updating Audio Level Data Char\r\n");
 800cb68:	2126      	movs	r1, #38	; 0x26
 800cb6a:	7019      	strb	r1, [r3, #0]
      Stderr_Update(BufferToWrite,BytesToWrite);
 800cb6c:	f000 fefa 	bl	800d964 <Stderr_Update>
}
 800cb70:	4620      	mov	r0, r4
 800cb72:	b003      	add	sp, #12
 800cb74:	bd30      	pop	{r4, r5, pc}
    buff[2U+Counter]= (uint8_t)(AudioLevelData[Counter]&0xFFU);
 800cb76:	f835 1013 	ldrh.w	r1, [r5, r3, lsl #1]
 800cb7a:	f802 1b01 	strb.w	r1, [r2], #1
  for(Counter=0;Counter<AudioLevelNumber;Counter++) {
 800cb7e:	3301      	adds	r3, #1
 800cb80:	e7dc      	b.n	800cb3c <BLE_AudioLevelUpdate+0x20>
      BLE_MANAGER_PRINTF("Error Updating Audio Level Data Char\r\n");
 800cb82:	4807      	ldr	r0, [pc, #28]	; (800cba0 <BLE_AudioLevelUpdate+0x84>)
 800cb84:	f00d fd16 	bl	801a5b4 <puts>
 800cb88:	e7f2      	b.n	800cb70 <BLE_AudioLevelUpdate+0x54>
 800cb8a:	bf00      	nop
 800cb8c:	20003234 	.word	0x20003234
 800cb90:	200099f8 	.word	0x200099f8
 800cb94:	08020e64 	.word	0x08020e64
 800cb98:	20009a30 	.word	0x20009a30
 800cb9c:	20009b3d 	.word	0x20009b3d
 800cba0:	08020e8b 	.word	0x08020e8b

0800cba4 <AttrMod_Request_Env>:
* @param  uint8_t *att_data attribute data
* @retval None
*/
static void AttrMod_Request_Env(void *VoidCharPointer,uint16_t attr_handle, uint16_t Offset, uint8_t data_length, uint8_t *att_data)
{
  if (att_data[0] == 01U) {
 800cba4:	9b00      	ldr	r3, [sp, #0]
 800cba6:	781b      	ldrb	r3, [r3, #0]
 800cba8:	2b01      	cmp	r3, #1
 800cbaa:	d102      	bne.n	800cbb2 <AttrMod_Request_Env+0xe>
    BLE_Env_NotifyEvent= BLE_NOTIFY_SUB;
 800cbac:	4a03      	ldr	r2, [pc, #12]	; (800cbbc <AttrMod_Request_Env+0x18>)
 800cbae:	7013      	strb	r3, [r2, #0]
 800cbb0:	4770      	bx	lr
  } else if (att_data[0] == 0U){
 800cbb2:	b913      	cbnz	r3, 800cbba <AttrMod_Request_Env+0x16>
    BLE_Env_NotifyEvent= BLE_NOTIFY_UNSUB;
 800cbb4:	4b01      	ldr	r3, [pc, #4]	; (800cbbc <AttrMod_Request_Env+0x18>)
 800cbb6:	2202      	movs	r2, #2
 800cbb8:	701a      	strb	r2, [r3, #0]
    Term_Update(BufferToWrite,BytesToWrite);
  } else {
    BLE_MANAGER_PRINTF("--->Env=%s", (BLE_Env_NotifyEvent == BLE_NOTIFY_SUB) ? " ON\r\n" : " OFF\r\n");
  }
#endif
}
 800cbba:	4770      	bx	lr
 800cbbc:	20003260 	.word	0x20003260

0800cbc0 <Read_Request_Env>:
* @param  uint16_t handle Handle of the attribute
* @retval None
*/
static void Read_Request_Env(void *VoidCharPointer,uint16_t handle)
{
  if(CustomReadRequestEnv != NULL) {
 800cbc0:	4b03      	ldr	r3, [pc, #12]	; (800cbd0 <Read_Request_Env+0x10>)
 800cbc2:	685b      	ldr	r3, [r3, #4]
 800cbc4:	b103      	cbz	r3, 800cbc8 <Read_Request_Env+0x8>
    CustomReadRequestEnv();
 800cbc6:	4718      	bx	r3
  } else {
    BLE_MANAGER_PRINTF("\r\n\nRead request environmental function not defined\r\n\n");
 800cbc8:	4802      	ldr	r0, [pc, #8]	; (800cbd4 <Read_Request_Env+0x14>)
 800cbca:	f00d bcf3 	b.w	801a5b4 <puts>
 800cbce:	bf00      	nop
 800cbd0:	20003260 	.word	0x20003260
 800cbd4:	08020eb1 	.word	0x08020eb1

0800cbd8 <BLE_InitEnvService>:
{
 800cbd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  EnvironmentalCharSize=2;
 800cbda:	4c30      	ldr	r4, [pc, #192]	; (800cc9c <BLE_InitEnvService+0xc4>)
 800cbdc:	2302      	movs	r3, #2
 800cbde:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  EnvFeaturesEnabled.PressureIsEnable= PressEnable;
 800cbe2:	4b2f      	ldr	r3, [pc, #188]	; (800cca0 <BLE_InitEnvService+0xc8>)
  if( (PressEnable == 1U) ||
 800cbe4:	2801      	cmp	r0, #1
{
 800cbe6:	4607      	mov	r7, r0
 800cbe8:	460e      	mov	r6, r1
 800cbea:	4615      	mov	r5, r2
  EnvFeaturesEnabled.PressureIsEnable= PressEnable;
 800cbec:	7018      	strb	r0, [r3, #0]
  EnvFeaturesEnabled.HumidityIsEnable= HumEnable;
 800cbee:	7059      	strb	r1, [r3, #1]
  EnvFeaturesEnabled.NumberTemperaturesEnabled= NumTempEnabled;
 800cbf0:	709a      	strb	r2, [r3, #2]
  if( (PressEnable == 1U) ||
 800cbf2:	d003      	beq.n	800cbfc <BLE_InitEnvService+0x24>
 800cbf4:	2901      	cmp	r1, #1
 800cbf6:	d001      	beq.n	800cbfc <BLE_InitEnvService+0x24>
     (HumEnable == 1U)   ||
 800cbf8:	2a00      	cmp	r2, #0
 800cbfa:	d04a      	beq.n	800cc92 <BLE_InitEnvService+0xba>
    memset(BleCharPointer,0,sizeof(BleCharTypeDef));  
 800cbfc:	221c      	movs	r2, #28
 800cbfe:	2100      	movs	r1, #0
 800cc00:	4828      	ldr	r0, [pc, #160]	; (800cca4 <BLE_InitEnvService+0xcc>)
 800cc02:	f00c ff35 	bl	8019a70 <memset>
    BleCharPointer->AttrMod_Request_CB= AttrMod_Request_Env;
 800cc06:	4b28      	ldr	r3, [pc, #160]	; (800cca8 <BLE_InitEnvService+0xd0>)
 800cc08:	62a3      	str	r3, [r4, #40]	; 0x28
    BleCharPointer->Read_Request_CB= Read_Request_Env;
 800cc0a:	4b28      	ldr	r3, [pc, #160]	; (800ccac <BLE_InitEnvService+0xd4>)
    COPY_ENVIRONMENTAL_CHAR_UUID((BleCharPointer->uuid));
 800cc0c:	4a28      	ldr	r2, [pc, #160]	; (800ccb0 <BLE_InitEnvService+0xd8>)
    BleCharPointer->Read_Request_CB= Read_Request_Env;
 800cc0e:	62e3      	str	r3, [r4, #44]	; 0x2c
    COPY_ENVIRONMENTAL_CHAR_UUID((BleCharPointer->uuid));
 800cc10:	4b28      	ldr	r3, [pc, #160]	; (800ccb4 <BLE_InitEnvService+0xdc>)
 800cc12:	4929      	ldr	r1, [pc, #164]	; (800ccb8 <BLE_InitEnvService+0xe0>)
    if(PressEnable == 1U){
 800cc14:	2f01      	cmp	r7, #1
    COPY_ENVIRONMENTAL_CHAR_UUID((BleCharPointer->uuid));
 800cc16:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800cc1a:	f04f 0300 	mov.w	r3, #0
 800cc1e:	e9c4 1304 	strd	r1, r3, [r4, #16]
      BleCharPointer->uuid[14] |= 0x10U;
 800cc22:	bf01      	itttt	eq
 800cc24:	2310      	moveq	r3, #16
 800cc26:	75a3      	strbeq	r3, [r4, #22]
      EnvironmentalCharSize+= 4U;
 800cc28:	2306      	moveq	r3, #6
 800cc2a:	f884 3034 	strbeq.w	r3, [r4, #52]	; 0x34
    if(HumEnable == 1U){
 800cc2e:	2e01      	cmp	r6, #1
 800cc30:	d108      	bne.n	800cc44 <BLE_InitEnvService+0x6c>
 800cc32:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
      BleCharPointer->uuid[14] |= 0x08U;
 800cc36:	7da2      	ldrb	r2, [r4, #22]
      EnvironmentalCharSize+= 2U;
 800cc38:	3302      	adds	r3, #2
      BleCharPointer->uuid[14] |= 0x08U;
 800cc3a:	f042 0208 	orr.w	r2, r2, #8
 800cc3e:	75a2      	strb	r2, [r4, #22]
      EnvironmentalCharSize+= 2U;
 800cc40:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    if(NumTempEnabled == 1U){
 800cc44:	2d01      	cmp	r5, #1
 800cc46:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 800cc4a:	d11a      	bne.n	800cc82 <BLE_InitEnvService+0xaa>
      BleCharPointer->uuid[14] |= 0x04U;
 800cc4c:	7da2      	ldrb	r2, [r4, #22]
 800cc4e:	f042 0204 	orr.w	r2, r2, #4
 800cc52:	75a2      	strb	r2, [r4, #22]
      EnvironmentalCharSize+= 2U;
 800cc54:	3302      	adds	r3, #2
      EnvironmentalCharSize+= 4U;
 800cc56:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    BleCharPointer->Char_UUID_Type= UUID_TYPE_128;
 800cc5a:	2302      	movs	r3, #2
 800cc5c:	7623      	strb	r3, [r4, #24]
    BleCharPointer->Char_Value_Length= EnvironmentalCharSize;
 800cc5e:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 800cc62:	8363      	strh	r3, [r4, #26]
    BleCharPointer->Char_Properties= ((uint8_t)(CHAR_PROP_NOTIFY))|((uint8_t)(CHAR_PROP_READ));
 800cc64:	4b15      	ldr	r3, [pc, #84]	; (800ccbc <BLE_InitEnvService+0xe4>)
 800cc66:	61e3      	str	r3, [r4, #28]
    BleCharPointer->Is_Variable= 0;
 800cc68:	2300      	movs	r3, #0
 800cc6a:	f884 3020 	strb.w	r3, [r4, #32]
    if(CustomReadRequestEnv == NULL) {
 800cc6e:	6863      	ldr	r3, [r4, #4]
 800cc70:	b913      	cbnz	r3, 800cc78 <BLE_InitEnvService+0xa0>
      BLE_MANAGER_PRINTF("Warning: Read request environmental function not defined\r\n");
 800cc72:	4813      	ldr	r0, [pc, #76]	; (800ccc0 <BLE_InitEnvService+0xe8>)
 800cc74:	f00d fc9e 	bl	801a5b4 <puts>
    BLE_MANAGER_PRINTF("BLE Environmental features ok\r\n");
 800cc78:	4812      	ldr	r0, [pc, #72]	; (800ccc4 <BLE_InitEnvService+0xec>)
 800cc7a:	f00d fc9b 	bl	801a5b4 <puts>
    BleCharPointer = &BleCharEnv;
 800cc7e:	4812      	ldr	r0, [pc, #72]	; (800ccc8 <BLE_InitEnvService+0xf0>)
}
 800cc80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    } else if(NumTempEnabled == 2U){
 800cc82:	2d02      	cmp	r5, #2
 800cc84:	d1e9      	bne.n	800cc5a <BLE_InitEnvService+0x82>
      BleCharPointer->uuid[14] |= 0x05U;
 800cc86:	7da2      	ldrb	r2, [r4, #22]
 800cc88:	f042 0205 	orr.w	r2, r2, #5
 800cc8c:	75a2      	strb	r2, [r4, #22]
      EnvironmentalCharSize+= 4U;
 800cc8e:	3304      	adds	r3, #4
 800cc90:	e7e1      	b.n	800cc56 <BLE_InitEnvService+0x7e>
    BLE_MANAGER_PRINTF(" ERROR: None environmental features is enabled\r\n");
 800cc92:	480e      	ldr	r0, [pc, #56]	; (800cccc <BLE_InitEnvService+0xf4>)
 800cc94:	f00d fc8e 	bl	801a5b4 <puts>
  BleCharTypeDef *BleCharPointer= NULL;
 800cc98:	4628      	mov	r0, r5
  return BleCharPointer;
 800cc9a:	e7f1      	b.n	800cc80 <BLE_InitEnvService+0xa8>
 800cc9c:	20003260 	.word	0x20003260
 800cca0:	2000999c 	.word	0x2000999c
 800cca4:	20003278 	.word	0x20003278
 800cca8:	0800cba5 	.word	0x0800cba5
 800ccac:	0800cbc1 	.word	0x0800cbc1
 800ccb0:	a5d5c51b 	.word	0xa5d5c51b
 800ccb4:	ac360002 	.word	0xac360002
 800ccb8:	000111e1 	.word	0x000111e1
 800ccbc:	10040012 	.word	0x10040012
 800ccc0:	08020ee6 	.word	0x08020ee6
 800ccc4:	08020f20 	.word	0x08020f20
 800ccc8:	20003268 	.word	0x20003268
 800cccc:	08020f3f 	.word	0x08020f3f

0800ccd0 <BLE_SetEnvAdvertizeData>:
  if(EnvFeaturesEnabled.PressureIsEnable == 1U) {
 800ccd0:	4b0e      	ldr	r3, [pc, #56]	; (800cd0c <BLE_SetEnvAdvertizeData+0x3c>)
 800ccd2:	781a      	ldrb	r2, [r3, #0]
 800ccd4:	2a01      	cmp	r2, #1
    manuf_data[ENVIRONMENTAL_ADVERTIZE_DATA_POSITION] |= 0x10U;
 800ccd6:	bf02      	ittt	eq
 800ccd8:	7c02      	ldrbeq	r2, [r0, #16]
 800ccda:	f042 0210 	orreq.w	r2, r2, #16
 800ccde:	7402      	strbeq	r2, [r0, #16]
  if(EnvFeaturesEnabled.HumidityIsEnable == 1U) {
 800cce0:	785a      	ldrb	r2, [r3, #1]
  if(EnvFeaturesEnabled.NumberTemperaturesEnabled == 1U) {
 800cce2:	789b      	ldrb	r3, [r3, #2]
  if(EnvFeaturesEnabled.HumidityIsEnable == 1U) {
 800cce4:	2a01      	cmp	r2, #1
    manuf_data[ENVIRONMENTAL_ADVERTIZE_DATA_POSITION] |= 0x08U;
 800cce6:	bf02      	ittt	eq
 800cce8:	7c02      	ldrbeq	r2, [r0, #16]
 800ccea:	f042 0208 	orreq.w	r2, r2, #8
 800ccee:	7402      	strbeq	r2, [r0, #16]
  if(EnvFeaturesEnabled.NumberTemperaturesEnabled == 1U) {
 800ccf0:	2b01      	cmp	r3, #1
 800ccf2:	d104      	bne.n	800ccfe <BLE_SetEnvAdvertizeData+0x2e>
    manuf_data[ENVIRONMENTAL_ADVERTIZE_DATA_POSITION] |= 0x04U;
 800ccf4:	7c03      	ldrb	r3, [r0, #16]
 800ccf6:	f043 0304 	orr.w	r3, r3, #4
    manuf_data[ENVIRONMENTAL_ADVERTIZE_DATA_POSITION] |= 0x05U;
 800ccfa:	7403      	strb	r3, [r0, #16]
}
 800ccfc:	4770      	bx	lr
  if(EnvFeaturesEnabled.NumberTemperaturesEnabled == 2U) {
 800ccfe:	2b02      	cmp	r3, #2
 800cd00:	d1fc      	bne.n	800ccfc <BLE_SetEnvAdvertizeData+0x2c>
    manuf_data[ENVIRONMENTAL_ADVERTIZE_DATA_POSITION] |= 0x05U;
 800cd02:	7c03      	ldrb	r3, [r0, #16]
 800cd04:	f043 0305 	orr.w	r3, r3, #5
 800cd08:	e7f7      	b.n	800ccfa <BLE_SetEnvAdvertizeData+0x2a>
 800cd0a:	bf00      	nop
 800cd0c:	2000999c 	.word	0x2000999c

0800cd10 <BLE_EnvironmentalUpdate>:
{
 800cd10:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800cd14:	4604      	mov	r4, r0
 800cd16:	461e      	mov	r6, r3
 800cd18:	4688      	mov	r8, r1
 800cd1a:	4617      	mov	r7, r2
  STORE_LE_16(buff  ,(HAL_GetTick()>>3));
 800cd1c:	f7fa fc36 	bl	800758c <HAL_GetTick>
  if(EnvFeaturesEnabled.PressureIsEnable == 1U) {
 800cd20:	4d2e      	ldr	r5, [pc, #184]	; (800cddc <BLE_EnvironmentalUpdate+0xcc>)
  STORE_LE_16(buff  ,(HAL_GetTick()>>3));
 800cd22:	08c0      	lsrs	r0, r0, #3
 800cd24:	f88d 0004 	strb.w	r0, [sp, #4]
 800cd28:	f7fa fc30 	bl	800758c <HAL_GetTick>
  if(EnvFeaturesEnabled.PressureIsEnable == 1U) {
 800cd2c:	782b      	ldrb	r3, [r5, #0]
 800cd2e:	2b01      	cmp	r3, #1
    STORE_LE_32((buff+BuffPos),((uint32_t)Press));
 800cd30:	bf04      	itt	eq
 800cd32:	0c23      	lsreq	r3, r4, #16
 800cd34:	f88d 3008 	strbeq.w	r3, [sp, #8]
  if(EnvFeaturesEnabled.HumidityIsEnable == 1U) {
 800cd38:	786b      	ldrb	r3, [r5, #1]
    STORE_LE_32((buff+BuffPos),((uint32_t)Press));
 800cd3a:	bf08      	it	eq
 800cd3c:	f8ad 4006 	strheq.w	r4, [sp, #6]
  STORE_LE_16(buff  ,(HAL_GetTick()>>3));
 800cd40:	ea4f 20d0 	mov.w	r0, r0, lsr #11
    STORE_LE_32((buff+BuffPos),((uint32_t)Press));
 800cd44:	bf08      	it	eq
 800cd46:	0e24      	lsreq	r4, r4, #24
  STORE_LE_16(buff  ,(HAL_GetTick()>>3));
 800cd48:	f88d 0005 	strb.w	r0, [sp, #5]
    STORE_LE_32((buff+BuffPos),((uint32_t)Press));
 800cd4c:	bf06      	itte	eq
 800cd4e:	f88d 4009 	strbeq.w	r4, [sp, #9]
    BuffPos+= 4U;
 800cd52:	2006      	moveq	r0, #6
  BuffPos= 2;
 800cd54:	2002      	movne	r0, #2
  if(EnvFeaturesEnabled.HumidityIsEnable == 1U) {
 800cd56:	2b01      	cmp	r3, #1
 800cd58:	d109      	bne.n	800cd6e <BLE_EnvironmentalUpdate+0x5e>
    STORE_LE_16((buff+BuffPos),Hum);
 800cd5a:	ab04      	add	r3, sp, #16
 800cd5c:	4403      	add	r3, r0
    BuffPos+= 2U;
 800cd5e:	3002      	adds	r0, #2
    STORE_LE_16((buff+BuffPos),Hum);
 800cd60:	f803 8c0c 	strb.w	r8, [r3, #-12]
 800cd64:	ea4f 2818 	mov.w	r8, r8, lsr #8
 800cd68:	f803 8c0b 	strb.w	r8, [r3, #-11]
    BuffPos+= 2U;
 800cd6c:	b2c0      	uxtb	r0, r0
  if(EnvFeaturesEnabled.NumberTemperaturesEnabled >= 1U) {
 800cd6e:	78ab      	ldrb	r3, [r5, #2]
 800cd70:	b19b      	cbz	r3, 800cd9a <BLE_EnvironmentalUpdate+0x8a>
    STORE_LE_16((buff+BuffPos),((uint16_t)Temp1));
 800cd72:	aa04      	add	r2, sp, #16
 800cd74:	4402      	add	r2, r0
  if(EnvFeaturesEnabled.NumberTemperaturesEnabled == 2U) {
 800cd76:	2b02      	cmp	r3, #2
    STORE_LE_16((buff+BuffPos),((uint16_t)Temp1));
 800cd78:	f802 7c0c 	strb.w	r7, [r2, #-12]
 800cd7c:	f3c7 2707 	ubfx	r7, r7, #8, #8
 800cd80:	f802 7c0b 	strb.w	r7, [r2, #-11]
  if(EnvFeaturesEnabled.NumberTemperaturesEnabled == 2U) {
 800cd84:	d109      	bne.n	800cd9a <BLE_EnvironmentalUpdate+0x8a>
    BuffPos+= 2U;
 800cd86:	3002      	adds	r0, #2
    STORE_LE_16((buff+BuffPos),((uint16_t)Temp2));
 800cd88:	ab04      	add	r3, sp, #16
 800cd8a:	fa53 f080 	uxtab	r0, r3, r0
 800cd8e:	f800 6c0c 	strb.w	r6, [r0, #-12]
 800cd92:	f3c6 2607 	ubfx	r6, r6, #8, #8
 800cd96:	f800 6c0b 	strb.w	r6, [r0, #-11]
  ret = ACI_GATT_UPDATE_CHAR_VALUE(&BleCharEnv, 0, EnvironmentalCharSize,buff);
 800cd9a:	4811      	ldr	r0, [pc, #68]	; (800cde0 <BLE_EnvironmentalUpdate+0xd0>)
 800cd9c:	ab01      	add	r3, sp, #4
 800cd9e:	f890 2034 	ldrb.w	r2, [r0, #52]	; 0x34
 800cda2:	2100      	movs	r1, #0
 800cda4:	3008      	adds	r0, #8
 800cda6:	f000 fdb1 	bl	800d90c <safe_aci_gatt_update_char_value>
  if (ret != BLE_STATUS_SUCCESS){
 800cdaa:	4604      	mov	r4, r0
 800cdac:	b168      	cbz	r0, 800cdca <BLE_EnvironmentalUpdate+0xba>
    if(BLE_StdErr_Service==BLE_SERV_ENABLE){
 800cdae:	4b0d      	ldr	r3, [pc, #52]	; (800cde4 <BLE_EnvironmentalUpdate+0xd4>)
 800cdb0:	781b      	ldrb	r3, [r3, #0]
 800cdb2:	2b01      	cmp	r3, #1
 800cdb4:	d10d      	bne.n	800cdd2 <BLE_EnvironmentalUpdate+0xc2>
      BytesToWrite = (uint8_t)sprintf((char *)BufferToWrite, "Error Updating Environmental Char\n");
 800cdb6:	490c      	ldr	r1, [pc, #48]	; (800cde8 <BLE_EnvironmentalUpdate+0xd8>)
 800cdb8:	480c      	ldr	r0, [pc, #48]	; (800cdec <BLE_EnvironmentalUpdate+0xdc>)
 800cdba:	f00d fc8b 	bl	801a6d4 <strcpy>
 800cdbe:	4b0c      	ldr	r3, [pc, #48]	; (800cdf0 <BLE_EnvironmentalUpdate+0xe0>)
      Stderr_Update(BufferToWrite,BytesToWrite);
 800cdc0:	480a      	ldr	r0, [pc, #40]	; (800cdec <BLE_EnvironmentalUpdate+0xdc>)
      BytesToWrite = (uint8_t)sprintf((char *)BufferToWrite, "Error Updating Environmental Char\n");
 800cdc2:	2122      	movs	r1, #34	; 0x22
 800cdc4:	7019      	strb	r1, [r3, #0]
      Stderr_Update(BufferToWrite,BytesToWrite);
 800cdc6:	f000 fdcd 	bl	800d964 <Stderr_Update>
}
 800cdca:	4620      	mov	r0, r4
 800cdcc:	b004      	add	sp, #16
 800cdce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      BLE_MANAGER_PRINTF("Error: Updating Environmental Char\r\n");
 800cdd2:	4808      	ldr	r0, [pc, #32]	; (800cdf4 <BLE_EnvironmentalUpdate+0xe4>)
 800cdd4:	f00d fbee 	bl	801a5b4 <puts>
 800cdd8:	e7f7      	b.n	800cdca <BLE_EnvironmentalUpdate+0xba>
 800cdda:	bf00      	nop
 800cddc:	2000999c 	.word	0x2000999c
 800cde0:	20003260 	.word	0x20003260
 800cde4:	200099f8 	.word	0x200099f8
 800cde8:	08020f6f 	.word	0x08020f6f
 800cdec:	20009a30 	.word	0x20009a30
 800cdf0:	20009b3d 	.word	0x20009b3d
 800cdf4:	08020f92 	.word	0x08020f92

0800cdf8 <AttrMod_Request_FFTAlarmAccPeakStatus>:
 * @param  uint8_t *att_data attribute data
 * @retval None
 */
static void AttrMod_Request_FFTAlarmAccPeakStatus(void *VoidCharPointer, uint16_t attr_handle, uint16_t Offset, uint8_t data_length, uint8_t *att_data)
{
  if (att_data[0] == 01U) {
 800cdf8:	9b00      	ldr	r3, [sp, #0]
 800cdfa:	781b      	ldrb	r3, [r3, #0]
 800cdfc:	2b01      	cmp	r3, #1
 800cdfe:	d102      	bne.n	800ce06 <AttrMod_Request_FFTAlarmAccPeakStatus+0xe>
    BLE_FFTAlarmAccPeakStatus_NotifyEvent= BLE_NOTIFY_SUB;
 800ce00:	4a03      	ldr	r2, [pc, #12]	; (800ce10 <AttrMod_Request_FFTAlarmAccPeakStatus+0x18>)
 800ce02:	7013      	strb	r3, [r2, #0]
 800ce04:	4770      	bx	lr
  } else if (att_data[0] == 0U){
 800ce06:	b913      	cbnz	r3, 800ce0e <AttrMod_Request_FFTAlarmAccPeakStatus+0x16>
    BLE_FFTAlarmAccPeakStatus_NotifyEvent= BLE_NOTIFY_UNSUB;
 800ce08:	4b01      	ldr	r3, [pc, #4]	; (800ce10 <AttrMod_Request_FFTAlarmAccPeakStatus+0x18>)
 800ce0a:	2202      	movs	r2, #2
 800ce0c:	701a      	strb	r2, [r3, #0]
   Term_Update(BufferToWrite,BytesToWrite);
 } else {
   BLE_MANAGER_PRINTF("--->FFT Alarm Acc Peak=%s", (BLE_FFTAlarmAccPeakStatus_NotifyEvent == BLE_NOTIFY_SUB) ? " ON\r\n" : " OFF\r\n");
 }
#endif
}
 800ce0e:	4770      	bx	lr
 800ce10:	20003298 	.word	0x20003298

0800ce14 <BLE_InitFFTAlarmAccPeakStatusService>:
{
 800ce14:	b510      	push	{r4, lr}
  memset(BleCharPointer,0,sizeof(BleCharTypeDef));  
 800ce16:	4c0f      	ldr	r4, [pc, #60]	; (800ce54 <BLE_InitFFTAlarmAccPeakStatusService+0x40>)
 800ce18:	221c      	movs	r2, #28
 800ce1a:	2100      	movs	r1, #0
 800ce1c:	f104 0014 	add.w	r0, r4, #20
 800ce20:	f00c fe26 	bl	8019a70 <memset>
  BleCharPointer->AttrMod_Request_CB = AttrMod_Request_FFTAlarmAccPeakStatus;
 800ce24:	4b0c      	ldr	r3, [pc, #48]	; (800ce58 <BLE_InitFFTAlarmAccPeakStatusService+0x44>)
  COPY_FFT_ALARM_ACC_PEAK_STATUS_CHAR_UUID((BleCharPointer->uuid));
 800ce26:	4a0d      	ldr	r2, [pc, #52]	; (800ce5c <BLE_InitFFTAlarmAccPeakStatusService+0x48>)
  BleCharPointer->AttrMod_Request_CB = AttrMod_Request_FFTAlarmAccPeakStatus;
 800ce28:	6263      	str	r3, [r4, #36]	; 0x24
  COPY_FFT_ALARM_ACC_PEAK_STATUS_CHAR_UUID((BleCharPointer->uuid));
 800ce2a:	4b0d      	ldr	r3, [pc, #52]	; (800ce60 <BLE_InitFFTAlarmAccPeakStatusService+0x4c>)
 800ce2c:	490d      	ldr	r1, [pc, #52]	; (800ce64 <BLE_InitFFTAlarmAccPeakStatusService+0x50>)
  BLE_MANAGER_PRINTF("BLE FFT Alarm Acc Peak Status features ok\r\n");
 800ce2e:	480e      	ldr	r0, [pc, #56]	; (800ce68 <BLE_InitFFTAlarmAccPeakStatusService+0x54>)
  COPY_FFT_ALARM_ACC_PEAK_STATUS_CHAR_UUID((BleCharPointer->uuid));
 800ce30:	e9c4 2301 	strd	r2, r3, [r4, #4]
 800ce34:	2308      	movs	r3, #8
 800ce36:	e9c4 1303 	strd	r1, r3, [r4, #12]
  BleCharPointer->Char_UUID_Type =UUID_TYPE_128;
 800ce3a:	2302      	movs	r3, #2
 800ce3c:	7523      	strb	r3, [r4, #20]
  BleCharPointer->Char_Value_Length=2+13;
 800ce3e:	230f      	movs	r3, #15
 800ce40:	82e3      	strh	r3, [r4, #22]
  BleCharPointer->Char_Properties=CHAR_PROP_NOTIFY;
 800ce42:	4b0a      	ldr	r3, [pc, #40]	; (800ce6c <BLE_InitFFTAlarmAccPeakStatusService+0x58>)
 800ce44:	61a3      	str	r3, [r4, #24]
  BleCharPointer->Is_Variable=0;
 800ce46:	2300      	movs	r3, #0
 800ce48:	7723      	strb	r3, [r4, #28]
  BLE_MANAGER_PRINTF("BLE FFT Alarm Acc Peak Status features ok\r\n");
 800ce4a:	f00d fbb3 	bl	801a5b4 <puts>
}
 800ce4e:	1d20      	adds	r0, r4, #4
 800ce50:	bd10      	pop	{r4, pc}
 800ce52:	bf00      	nop
 800ce54:	20003298 	.word	0x20003298
 800ce58:	0800cdf9 	.word	0x0800cdf9
 800ce5c:	a5d5c51b 	.word	0xa5d5c51b
 800ce60:	ac360002 	.word	0xac360002
 800ce64:	000211e1 	.word	0x000211e1
 800ce68:	08020fb6 	.word	0x08020fb6
 800ce6c:	10040010 	.word	0x10040010

0800ce70 <BLE_SetFFTAlarmAccPeakStatusAdvertizeData>:
  manuf_data[FFT_ALARM_ADVERTIZE_DATA_POSITION] |= 0x08U; 
 800ce70:	7c43      	ldrb	r3, [r0, #17]
 800ce72:	f043 0308 	orr.w	r3, r3, #8
 800ce76:	7443      	strb	r3, [r0, #17]
}
 800ce78:	4770      	bx	lr
	...

0800ce7c <BLE_FFTAlarmAccPeakStatusUpdate>:
{
 800ce7c:	b570      	push	{r4, r5, r6, lr}
 800ce7e:	b088      	sub	sp, #32
 800ce80:	ed8d 0a00 	vstr	s0, [sp]
 800ce84:	edcd 0a01 	vstr	s1, [sp, #4]
 800ce88:	ed8d 1a02 	vstr	s2, [sp, #8]
  uint8_t Alarm_X= (uint8_t)Alarm.STATUS_AXIS_X;
 800ce8c:	b2c6      	uxtb	r6, r0
  uint8_t Alarm_Y= (uint8_t)Alarm.STATUS_AXIS_Y;
 800ce8e:	f3c0 2407 	ubfx	r4, r0, #8, #8
  uint8_t Alarm_Z= (uint8_t)Alarm.STATUS_AXIS_Z;
 800ce92:	f3c0 4507 	ubfx	r5, r0, #16, #8
  STORE_LE_16(Buff  ,(HAL_GetTick()>>3));
 800ce96:	f7fa fb79 	bl	800758c <HAL_GetTick>
 800ce9a:	08c0      	lsrs	r0, r0, #3
 800ce9c:	f88d 0010 	strb.w	r0, [sp, #16]
 800cea0:	f7fa fb74 	bl	800758c <HAL_GetTick>
  STORE_LE_32(&Buff[BuffPos], *TempBuff);
 800cea4:	9b00      	ldr	r3, [sp, #0]
 800cea6:	f88d 3013 	strb.w	r3, [sp, #19]
 800ceaa:	0a1a      	lsrs	r2, r3, #8
 800ceac:	f88d 2014 	strb.w	r2, [sp, #20]
 800ceb0:	0c1a      	lsrs	r2, r3, #16
 800ceb2:	0e1b      	lsrs	r3, r3, #24
 800ceb4:	f88d 3016 	strb.w	r3, [sp, #22]
  STORE_LE_32(&Buff[BuffPos], *TempBuff);
 800ceb8:	9b01      	ldr	r3, [sp, #4]
  STORE_LE_32(&Buff[BuffPos], *TempBuff);
 800ceba:	f88d 2015 	strb.w	r2, [sp, #21]
  STORE_LE_32(&Buff[BuffPos], *TempBuff);
 800cebe:	0a1a      	lsrs	r2, r3, #8
 800cec0:	f88d 3017 	strb.w	r3, [sp, #23]
 800cec4:	f88d 2018 	strb.w	r2, [sp, #24]
 800cec8:	0c1a      	lsrs	r2, r3, #16
 800ceca:	0e1b      	lsrs	r3, r3, #24
 800cecc:	f88d 301a 	strb.w	r3, [sp, #26]
  STORE_LE_32(&Buff[BuffPos], *TempBuff);
 800ced0:	9b02      	ldr	r3, [sp, #8]
  STORE_LE_32(&Buff[BuffPos], *TempBuff);
 800ced2:	f88d 2019 	strb.w	r2, [sp, #25]
  Buff[2]= (Alarm_X << 4) | (Alarm_Y  << 2) | (Alarm_Z);
 800ced6:	00a4      	lsls	r4, r4, #2
  STORE_LE_32(&Buff[BuffPos], *TempBuff);
 800ced8:	0a1a      	lsrs	r2, r3, #8
  STORE_LE_16(Buff  ,(HAL_GetTick()>>3));
 800ceda:	0ac0      	lsrs	r0, r0, #11
  STORE_LE_32(&Buff[BuffPos], *TempBuff);
 800cedc:	f88d 301b 	strb.w	r3, [sp, #27]
 800cee0:	f88d 201c 	strb.w	r2, [sp, #28]
  Buff[2]= (Alarm_X << 4) | (Alarm_Y  << 2) | (Alarm_Z);
 800cee4:	ea44 1406 	orr.w	r4, r4, r6, lsl #4
  STORE_LE_32(&Buff[BuffPos], *TempBuff);
 800cee8:	0c1a      	lsrs	r2, r3, #16
 800ceea:	0e1b      	lsrs	r3, r3, #24
  STORE_LE_16(Buff  ,(HAL_GetTick()>>3));
 800ceec:	f88d 0011 	strb.w	r0, [sp, #17]
  Buff[2]= (Alarm_X << 4) | (Alarm_Y  << 2) | (Alarm_Z);
 800cef0:	432c      	orrs	r4, r5
  STORE_LE_32(&Buff[BuffPos], *TempBuff);
 800cef2:	f88d 201d 	strb.w	r2, [sp, #29]
 800cef6:	f88d 301e 	strb.w	r3, [sp, #30]
  ret = ACI_GATT_UPDATE_CHAR_VALUE(&BleCharFFTAlarmAccPeakStatus, 0, 2+13, Buff);
 800cefa:	4811      	ldr	r0, [pc, #68]	; (800cf40 <BLE_FFTAlarmAccPeakStatusUpdate+0xc4>)
  Buff[2]= (Alarm_X << 4) | (Alarm_Y  << 2) | (Alarm_Z);
 800cefc:	f88d 4012 	strb.w	r4, [sp, #18]
  ret = ACI_GATT_UPDATE_CHAR_VALUE(&BleCharFFTAlarmAccPeakStatus, 0, 2+13, Buff);
 800cf00:	ab04      	add	r3, sp, #16
 800cf02:	220f      	movs	r2, #15
 800cf04:	2100      	movs	r1, #0
 800cf06:	f000 fd01 	bl	800d90c <safe_aci_gatt_update_char_value>
  if (ret != BLE_STATUS_SUCCESS){
 800cf0a:	4604      	mov	r4, r0
 800cf0c:	b178      	cbz	r0, 800cf2e <BLE_FFTAlarmAccPeakStatusUpdate+0xb2>
    if(ret != BLE_STATUS_INSUFFICIENT_RESOURCES) {
 800cf0e:	2864      	cmp	r0, #100	; 0x64
 800cf10:	d010      	beq.n	800cf34 <BLE_FFTAlarmAccPeakStatusUpdate+0xb8>
      if(BLE_StdErr_Service==BLE_SERV_ENABLE){
 800cf12:	4b0c      	ldr	r3, [pc, #48]	; (800cf44 <BLE_FFTAlarmAccPeakStatusUpdate+0xc8>)
 800cf14:	781b      	ldrb	r3, [r3, #0]
 800cf16:	2b01      	cmp	r3, #1
 800cf18:	d10c      	bne.n	800cf34 <BLE_FFTAlarmAccPeakStatusUpdate+0xb8>
        BytesToWrite = (uint8_t)sprintf((char *)BufferToWrite, "Error Updating FFT Alarm Acc Peak Status Char\n");
 800cf1a:	490b      	ldr	r1, [pc, #44]	; (800cf48 <BLE_FFTAlarmAccPeakStatusUpdate+0xcc>)
 800cf1c:	480b      	ldr	r0, [pc, #44]	; (800cf4c <BLE_FFTAlarmAccPeakStatusUpdate+0xd0>)
 800cf1e:	f00d fbd9 	bl	801a6d4 <strcpy>
 800cf22:	4b0b      	ldr	r3, [pc, #44]	; (800cf50 <BLE_FFTAlarmAccPeakStatusUpdate+0xd4>)
        Stderr_Update(BufferToWrite,BytesToWrite);
 800cf24:	4809      	ldr	r0, [pc, #36]	; (800cf4c <BLE_FFTAlarmAccPeakStatusUpdate+0xd0>)
        BytesToWrite = (uint8_t)sprintf((char *)BufferToWrite, "Error Updating FFT Alarm Acc Peak Status Char\n");
 800cf26:	212e      	movs	r1, #46	; 0x2e
 800cf28:	7019      	strb	r1, [r3, #0]
        Stderr_Update(BufferToWrite,BytesToWrite);
 800cf2a:	f000 fd1b 	bl	800d964 <Stderr_Update>
}
 800cf2e:	4620      	mov	r0, r4
 800cf30:	b008      	add	sp, #32
 800cf32:	bd70      	pop	{r4, r5, r6, pc}
      BLE_MANAGER_PRINTF("Error Updating FFT Alarm Acc Peak Status Char ret=%x\r\n",ret);
 800cf34:	4621      	mov	r1, r4
 800cf36:	4807      	ldr	r0, [pc, #28]	; (800cf54 <BLE_FFTAlarmAccPeakStatusUpdate+0xd8>)
 800cf38:	f00d fab6 	bl	801a4a8 <iprintf>
 800cf3c:	e7f7      	b.n	800cf2e <BLE_FFTAlarmAccPeakStatusUpdate+0xb2>
 800cf3e:	bf00      	nop
 800cf40:	2000329c 	.word	0x2000329c
 800cf44:	200099f8 	.word	0x200099f8
 800cf48:	08020fe1 	.word	0x08020fe1
 800cf4c:	20009a30 	.word	0x20009a30
 800cf50:	20009b3d 	.word	0x20009b3d
 800cf54:	08021010 	.word	0x08021010

0800cf58 <AttrMod_Request_FFTAlarmSpeedStatus>:
 * @param  uint8_t *att_data attribute data
 * @retval None
 */
static void AttrMod_Request_FFTAlarmSpeedStatus(void *VoidCharPointer, uint16_t attr_handle, uint16_t Offset, uint8_t data_length, uint8_t *att_data)
{
  if (att_data[0] == 01U) {
 800cf58:	9b00      	ldr	r3, [sp, #0]
 800cf5a:	781b      	ldrb	r3, [r3, #0]
 800cf5c:	2b01      	cmp	r3, #1
 800cf5e:	d102      	bne.n	800cf66 <AttrMod_Request_FFTAlarmSpeedStatus+0xe>
    BLE_FFTAlarmSpeedStatus_NotifyEvent= BLE_NOTIFY_SUB;
 800cf60:	4a03      	ldr	r2, [pc, #12]	; (800cf70 <AttrMod_Request_FFTAlarmSpeedStatus+0x18>)
 800cf62:	7013      	strb	r3, [r2, #0]
 800cf64:	4770      	bx	lr
  } else if (att_data[0] == 0U){
 800cf66:	b913      	cbnz	r3, 800cf6e <AttrMod_Request_FFTAlarmSpeedStatus+0x16>
    BLE_FFTAlarmSpeedStatus_NotifyEvent= BLE_NOTIFY_UNSUB;
 800cf68:	4b01      	ldr	r3, [pc, #4]	; (800cf70 <AttrMod_Request_FFTAlarmSpeedStatus+0x18>)
 800cf6a:	2202      	movs	r2, #2
 800cf6c:	701a      	strb	r2, [r3, #0]
   Term_Update(BufferToWrite,BytesToWrite);
 } else {
   BLE_MANAGER_PRINTF("--->FFT Alarm Speed Status=%s", (BLE_FFTAlarmSpeedStatus_NotifyEvent == BLE_NOTIFY_SUB) ? " ON\r\n" : " OFF\r\n");
 }
#endif
}
 800cf6e:	4770      	bx	lr
 800cf70:	200032c8 	.word	0x200032c8

0800cf74 <BLE_InitFFTAlarmSpeedStatusService>:
{
 800cf74:	b510      	push	{r4, lr}
  memset(BleCharPointer,0,sizeof(BleCharTypeDef));  
 800cf76:	4c0f      	ldr	r4, [pc, #60]	; (800cfb4 <BLE_InitFFTAlarmSpeedStatusService+0x40>)
 800cf78:	221c      	movs	r2, #28
 800cf7a:	2100      	movs	r1, #0
 800cf7c:	f104 0014 	add.w	r0, r4, #20
 800cf80:	f00c fd76 	bl	8019a70 <memset>
  BleCharPointer->AttrMod_Request_CB = AttrMod_Request_FFTAlarmSpeedStatus;
 800cf84:	4b0c      	ldr	r3, [pc, #48]	; (800cfb8 <BLE_InitFFTAlarmSpeedStatusService+0x44>)
  COPY_FFT_ALARM_SPEED_STATUS_CHAR_UUID((BleCharPointer->uuid));
 800cf86:	4a0d      	ldr	r2, [pc, #52]	; (800cfbc <BLE_InitFFTAlarmSpeedStatusService+0x48>)
  BleCharPointer->AttrMod_Request_CB = AttrMod_Request_FFTAlarmSpeedStatus;
 800cf88:	6263      	str	r3, [r4, #36]	; 0x24
  COPY_FFT_ALARM_SPEED_STATUS_CHAR_UUID((BleCharPointer->uuid));
 800cf8a:	4b0d      	ldr	r3, [pc, #52]	; (800cfc0 <BLE_InitFFTAlarmSpeedStatusService+0x4c>)
 800cf8c:	490d      	ldr	r1, [pc, #52]	; (800cfc4 <BLE_InitFFTAlarmSpeedStatusService+0x50>)
  BLE_MANAGER_PRINTF("BLE FFT Alarm Speed Status features ok\r\n");
 800cf8e:	480e      	ldr	r0, [pc, #56]	; (800cfc8 <BLE_InitFFTAlarmSpeedStatusService+0x54>)
  COPY_FFT_ALARM_SPEED_STATUS_CHAR_UUID((BleCharPointer->uuid));
 800cf90:	e9c4 2301 	strd	r2, r3, [r4, #4]
 800cf94:	2307      	movs	r3, #7
 800cf96:	e9c4 1303 	strd	r1, r3, [r4, #12]
  BleCharPointer->Char_UUID_Type =UUID_TYPE_128;
 800cf9a:	2302      	movs	r3, #2
 800cf9c:	7523      	strb	r3, [r4, #20]
  BleCharPointer->Char_Value_Length=2+13;
 800cf9e:	230f      	movs	r3, #15
 800cfa0:	82e3      	strh	r3, [r4, #22]
  BleCharPointer->Char_Properties=CHAR_PROP_NOTIFY;
 800cfa2:	4b0a      	ldr	r3, [pc, #40]	; (800cfcc <BLE_InitFFTAlarmSpeedStatusService+0x58>)
 800cfa4:	61a3      	str	r3, [r4, #24]
  BleCharPointer->Is_Variable=0;
 800cfa6:	2300      	movs	r3, #0
 800cfa8:	7723      	strb	r3, [r4, #28]
  BLE_MANAGER_PRINTF("BLE FFT Alarm Speed Status features ok\r\n");
 800cfaa:	f00d fb03 	bl	801a5b4 <puts>
}
 800cfae:	1d20      	adds	r0, r4, #4
 800cfb0:	bd10      	pop	{r4, pc}
 800cfb2:	bf00      	nop
 800cfb4:	200032c8 	.word	0x200032c8
 800cfb8:	0800cf59 	.word	0x0800cf59
 800cfbc:	a5d5c51b 	.word	0xa5d5c51b
 800cfc0:	ac360002 	.word	0xac360002
 800cfc4:	000211e1 	.word	0x000211e1
 800cfc8:	08021047 	.word	0x08021047
 800cfcc:	10040010 	.word	0x10040010

0800cfd0 <BLE_SetFFTAlarmSpeedStatusAdvertizeData>:
 manuf_data[FFT_ALARM_SPEED_STATUS_ADVERTIZE_DATA_POSITION] |= 0x07U; 
 800cfd0:	7c83      	ldrb	r3, [r0, #18]
 800cfd2:	f043 0307 	orr.w	r3, r3, #7
 800cfd6:	7483      	strb	r3, [r0, #18]
}
 800cfd8:	4770      	bx	lr
	...

0800cfdc <BLE_FFTAlarmSpeedStatusUpdate>:
{
 800cfdc:	b570      	push	{r4, r5, r6, lr}
 800cfde:	b088      	sub	sp, #32
 800cfe0:	ed8d 0a00 	vstr	s0, [sp]
 800cfe4:	edcd 0a01 	vstr	s1, [sp, #4]
 800cfe8:	ed8d 1a02 	vstr	s2, [sp, #8]
  uint8_t Alarm_X= (uint8_t)Alarm.STATUS_AXIS_X;
 800cfec:	b2c6      	uxtb	r6, r0
  uint8_t Alarm_Y= (uint8_t)Alarm.STATUS_AXIS_Y;
 800cfee:	f3c0 2407 	ubfx	r4, r0, #8, #8
  uint8_t Alarm_Z= (uint8_t)Alarm.STATUS_AXIS_Z;
 800cff2:	f3c0 4507 	ubfx	r5, r0, #16, #8
  STORE_LE_16(Buff  ,(HAL_GetTick()>>3));
 800cff6:	f7fa fac9 	bl	800758c <HAL_GetTick>
 800cffa:	08c0      	lsrs	r0, r0, #3
 800cffc:	f88d 0010 	strb.w	r0, [sp, #16]
 800d000:	f7fa fac4 	bl	800758c <HAL_GetTick>
  STORE_LE_32(&Buff[BuffPos], *TempBuff);
 800d004:	9b00      	ldr	r3, [sp, #0]
 800d006:	f88d 3013 	strb.w	r3, [sp, #19]
 800d00a:	0a1a      	lsrs	r2, r3, #8
 800d00c:	f88d 2014 	strb.w	r2, [sp, #20]
 800d010:	0c1a      	lsrs	r2, r3, #16
 800d012:	0e1b      	lsrs	r3, r3, #24
 800d014:	f88d 3016 	strb.w	r3, [sp, #22]
  STORE_LE_32(&Buff[BuffPos], *TempBuff);
 800d018:	9b01      	ldr	r3, [sp, #4]
  STORE_LE_32(&Buff[BuffPos], *TempBuff);
 800d01a:	f88d 2015 	strb.w	r2, [sp, #21]
  STORE_LE_32(&Buff[BuffPos], *TempBuff);
 800d01e:	0a1a      	lsrs	r2, r3, #8
 800d020:	f88d 3017 	strb.w	r3, [sp, #23]
 800d024:	f88d 2018 	strb.w	r2, [sp, #24]
 800d028:	0c1a      	lsrs	r2, r3, #16
 800d02a:	0e1b      	lsrs	r3, r3, #24
 800d02c:	f88d 301a 	strb.w	r3, [sp, #26]
  STORE_LE_32(&Buff[BuffPos], *TempBuff);
 800d030:	9b02      	ldr	r3, [sp, #8]
  STORE_LE_32(&Buff[BuffPos], *TempBuff);
 800d032:	f88d 2019 	strb.w	r2, [sp, #25]
  Buff[2]= (Alarm_X << 4) | (Alarm_Y  << 2) | (Alarm_Z);
 800d036:	00a4      	lsls	r4, r4, #2
  STORE_LE_32(&Buff[BuffPos], *TempBuff);
 800d038:	0a1a      	lsrs	r2, r3, #8
  STORE_LE_16(Buff  ,(HAL_GetTick()>>3));
 800d03a:	0ac0      	lsrs	r0, r0, #11
  STORE_LE_32(&Buff[BuffPos], *TempBuff);
 800d03c:	f88d 301b 	strb.w	r3, [sp, #27]
 800d040:	f88d 201c 	strb.w	r2, [sp, #28]
  Buff[2]= (Alarm_X << 4) | (Alarm_Y  << 2) | (Alarm_Z);
 800d044:	ea44 1406 	orr.w	r4, r4, r6, lsl #4
  STORE_LE_32(&Buff[BuffPos], *TempBuff);
 800d048:	0c1a      	lsrs	r2, r3, #16
 800d04a:	0e1b      	lsrs	r3, r3, #24
  STORE_LE_16(Buff  ,(HAL_GetTick()>>3));
 800d04c:	f88d 0011 	strb.w	r0, [sp, #17]
  Buff[2]= (Alarm_X << 4) | (Alarm_Y  << 2) | (Alarm_Z);
 800d050:	432c      	orrs	r4, r5
  STORE_LE_32(&Buff[BuffPos], *TempBuff);
 800d052:	f88d 201d 	strb.w	r2, [sp, #29]
 800d056:	f88d 301e 	strb.w	r3, [sp, #30]
  ret = ACI_GATT_UPDATE_CHAR_VALUE(&BleCharFFTAlarmSpeedStatus, 0, 2+13, Buff);
 800d05a:	4811      	ldr	r0, [pc, #68]	; (800d0a0 <BLE_FFTAlarmSpeedStatusUpdate+0xc4>)
  Buff[2]= (Alarm_X << 4) | (Alarm_Y  << 2) | (Alarm_Z);
 800d05c:	f88d 4012 	strb.w	r4, [sp, #18]
  ret = ACI_GATT_UPDATE_CHAR_VALUE(&BleCharFFTAlarmSpeedStatus, 0, 2+13, Buff);
 800d060:	ab04      	add	r3, sp, #16
 800d062:	220f      	movs	r2, #15
 800d064:	2100      	movs	r1, #0
 800d066:	f000 fc51 	bl	800d90c <safe_aci_gatt_update_char_value>
  if (ret != BLE_STATUS_SUCCESS){
 800d06a:	4604      	mov	r4, r0
 800d06c:	b178      	cbz	r0, 800d08e <BLE_FFTAlarmSpeedStatusUpdate+0xb2>
    if(ret != BLE_STATUS_INSUFFICIENT_RESOURCES) {
 800d06e:	2864      	cmp	r0, #100	; 0x64
 800d070:	d010      	beq.n	800d094 <BLE_FFTAlarmSpeedStatusUpdate+0xb8>
      if(BLE_StdErr_Service==BLE_SERV_ENABLE){
 800d072:	4b0c      	ldr	r3, [pc, #48]	; (800d0a4 <BLE_FFTAlarmSpeedStatusUpdate+0xc8>)
 800d074:	781b      	ldrb	r3, [r3, #0]
 800d076:	2b01      	cmp	r3, #1
 800d078:	d10c      	bne.n	800d094 <BLE_FFTAlarmSpeedStatusUpdate+0xb8>
        BytesToWrite = (uint8_t)sprintf((char *)BufferToWrite, "Error Updating FFT Alarm Speed Status Char\n");
 800d07a:	490b      	ldr	r1, [pc, #44]	; (800d0a8 <BLE_FFTAlarmSpeedStatusUpdate+0xcc>)
 800d07c:	480b      	ldr	r0, [pc, #44]	; (800d0ac <BLE_FFTAlarmSpeedStatusUpdate+0xd0>)
 800d07e:	f00d fb29 	bl	801a6d4 <strcpy>
 800d082:	4b0b      	ldr	r3, [pc, #44]	; (800d0b0 <BLE_FFTAlarmSpeedStatusUpdate+0xd4>)
        Stderr_Update(BufferToWrite,BytesToWrite);
 800d084:	4809      	ldr	r0, [pc, #36]	; (800d0ac <BLE_FFTAlarmSpeedStatusUpdate+0xd0>)
        BytesToWrite = (uint8_t)sprintf((char *)BufferToWrite, "Error Updating FFT Alarm Speed Status Char\n");
 800d086:	212b      	movs	r1, #43	; 0x2b
 800d088:	7019      	strb	r1, [r3, #0]
        Stderr_Update(BufferToWrite,BytesToWrite);
 800d08a:	f000 fc6b 	bl	800d964 <Stderr_Update>
}
 800d08e:	4620      	mov	r0, r4
 800d090:	b008      	add	sp, #32
 800d092:	bd70      	pop	{r4, r5, r6, pc}
      BLE_MANAGER_PRINTF("Error Updating FFT Alarm Speed Status Char ret=%x\r\n",ret);
 800d094:	4621      	mov	r1, r4
 800d096:	4807      	ldr	r0, [pc, #28]	; (800d0b4 <BLE_FFTAlarmSpeedStatusUpdate+0xd8>)
 800d098:	f00d fa06 	bl	801a4a8 <iprintf>
 800d09c:	e7f7      	b.n	800d08e <BLE_FFTAlarmSpeedStatusUpdate+0xb2>
 800d09e:	bf00      	nop
 800d0a0:	200032cc 	.word	0x200032cc
 800d0a4:	200099f8 	.word	0x200099f8
 800d0a8:	0802106f 	.word	0x0802106f
 800d0ac:	20009a30 	.word	0x20009a30
 800d0b0:	20009b3d 	.word	0x20009b3d
 800d0b4:	0802109b 	.word	0x0802109b

0800d0b8 <AttrMod_Request_FFTAlarmSubrangeStatus>:
 * @param  uint8_t *att_data attribute data
 * @retval None
 */
static void AttrMod_Request_FFTAlarmSubrangeStatus(void *VoidCharPointer, uint16_t attr_handle, uint16_t Offset, uint8_t data_length, uint8_t *att_data)
{
  if (att_data[0] == 01U) {
 800d0b8:	9b00      	ldr	r3, [sp, #0]
 800d0ba:	781b      	ldrb	r3, [r3, #0]
 800d0bc:	2b01      	cmp	r3, #1
 800d0be:	d102      	bne.n	800d0c6 <AttrMod_Request_FFTAlarmSubrangeStatus+0xe>
    BLE_FFTAlarmSubrangeStatus_NotifyEvent= BLE_NOTIFY_SUB;
 800d0c0:	4a03      	ldr	r2, [pc, #12]	; (800d0d0 <AttrMod_Request_FFTAlarmSubrangeStatus+0x18>)
 800d0c2:	7013      	strb	r3, [r2, #0]
 800d0c4:	4770      	bx	lr
  } else if (att_data[0] == 0U){
 800d0c6:	b913      	cbnz	r3, 800d0ce <AttrMod_Request_FFTAlarmSubrangeStatus+0x16>
    BLE_FFTAlarmSubrangeStatus_NotifyEvent= BLE_NOTIFY_UNSUB;
 800d0c8:	4b01      	ldr	r3, [pc, #4]	; (800d0d0 <AttrMod_Request_FFTAlarmSubrangeStatus+0x18>)
 800d0ca:	2202      	movs	r2, #2
 800d0cc:	701a      	strb	r2, [r3, #0]
   Term_Update(BufferToWrite,BytesToWrite);
 } else {
   BLE_MANAGER_PRINTF("--->FFT Alarm Subrange Status=%s", (BLE_FFTAlarmSubrangeStatus_NotifyEvent == BLE_NOTIFY_SUB) ? " ON\r\n" : " OFF\r\n");
 }
#endif
}
 800d0ce:	4770      	bx	lr
 800d0d0:	200032f8 	.word	0x200032f8

0800d0d4 <BLE_InitFFTAlarmSubrangeStatusService>:
{
 800d0d4:	b510      	push	{r4, lr}
  memset(BleCharPointer,0,sizeof(BleCharTypeDef));  
 800d0d6:	4c0f      	ldr	r4, [pc, #60]	; (800d114 <BLE_InitFFTAlarmSubrangeStatusService+0x40>)
 800d0d8:	221c      	movs	r2, #28
 800d0da:	2100      	movs	r1, #0
 800d0dc:	f104 0014 	add.w	r0, r4, #20
 800d0e0:	f00c fcc6 	bl	8019a70 <memset>
  BleCharPointer->AttrMod_Request_CB = AttrMod_Request_FFTAlarmSubrangeStatus;
 800d0e4:	4b0c      	ldr	r3, [pc, #48]	; (800d118 <BLE_InitFFTAlarmSubrangeStatusService+0x44>)
  COPY_FFT_ALARM_SUBRANGE_STATUS_CHAR_UUID((BleCharPointer->uuid));
 800d0e6:	4a0d      	ldr	r2, [pc, #52]	; (800d11c <BLE_InitFFTAlarmSubrangeStatusService+0x48>)
  BleCharPointer->AttrMod_Request_CB = AttrMod_Request_FFTAlarmSubrangeStatus;
 800d0e8:	6263      	str	r3, [r4, #36]	; 0x24
  COPY_FFT_ALARM_SUBRANGE_STATUS_CHAR_UUID((BleCharPointer->uuid));
 800d0ea:	4b0d      	ldr	r3, [pc, #52]	; (800d120 <BLE_InitFFTAlarmSubrangeStatusService+0x4c>)
 800d0ec:	490d      	ldr	r1, [pc, #52]	; (800d124 <BLE_InitFFTAlarmSubrangeStatusService+0x50>)
  BLE_MANAGER_PRINTF("BLE FFT Alarm Subrange Status features ok\r\n");
 800d0ee:	480e      	ldr	r0, [pc, #56]	; (800d128 <BLE_InitFFTAlarmSubrangeStatusService+0x54>)
  COPY_FFT_ALARM_SUBRANGE_STATUS_CHAR_UUID((BleCharPointer->uuid));
 800d0f0:	e9c4 2301 	strd	r2, r3, [r4, #4]
 800d0f4:	2309      	movs	r3, #9
 800d0f6:	e9c4 1303 	strd	r1, r3, [r4, #12]
  BleCharPointer->Char_UUID_Type =UUID_TYPE_128;
 800d0fa:	2302      	movs	r3, #2
 800d0fc:	7523      	strb	r3, [r4, #20]
  BleCharPointer->Char_Value_Length=2+13;
 800d0fe:	230f      	movs	r3, #15
 800d100:	82e3      	strh	r3, [r4, #22]
  BleCharPointer->Char_Properties=CHAR_PROP_NOTIFY;
 800d102:	4b0a      	ldr	r3, [pc, #40]	; (800d12c <BLE_InitFFTAlarmSubrangeStatusService+0x58>)
 800d104:	61a3      	str	r3, [r4, #24]
  BleCharPointer->Is_Variable=0;
 800d106:	2300      	movs	r3, #0
 800d108:	7723      	strb	r3, [r4, #28]
  BLE_MANAGER_PRINTF("BLE FFT Alarm Subrange Status features ok\r\n");
 800d10a:	f00d fa53 	bl	801a5b4 <puts>
}
 800d10e:	1d20      	adds	r0, r4, #4
 800d110:	bd10      	pop	{r4, pc}
 800d112:	bf00      	nop
 800d114:	200032f8 	.word	0x200032f8
 800d118:	0800d0b9 	.word	0x0800d0b9
 800d11c:	a5d5c51b 	.word	0xa5d5c51b
 800d120:	ac360002 	.word	0xac360002
 800d124:	000211e1 	.word	0x000211e1
 800d128:	080210cf 	.word	0x080210cf
 800d12c:	10040010 	.word	0x10040010

0800d130 <BLE_SetFFTAlarmSubrangeStatusAdvertizeData>:
  manuf_data[FFT_ALARM_SUBRANGE_STATUS_ADVERTIZE_DATA_POSITION] |= 0x09U; 
 800d130:	7c83      	ldrb	r3, [r0, #18]
 800d132:	f043 0309 	orr.w	r3, r3, #9
 800d136:	7483      	strb	r3, [r0, #18]
}
 800d138:	4770      	bx	lr
	...

0800d13c <BLE_FFTAlarmSubrangeStatusUpdate>:
{
 800d13c:	b570      	push	{r4, r5, r6, lr}
 800d13e:	b08c      	sub	sp, #48	; 0x30
 800d140:	ed8d 0a04 	vstr	s0, [sp, #16]
 800d144:	edcd 0a05 	vstr	s1, [sp, #20]
 800d148:	ed8d 1a06 	vstr	s2, [sp, #24]
 800d14c:	edcd 1a01 	vstr	s3, [sp, #4]
 800d150:	ed8d 2a02 	vstr	s4, [sp, #8]
 800d154:	edcd 2a03 	vstr	s5, [sp, #12]
  uint8_t Alarm_X= (uint8_t)AlarmStatus.STATUS_AXIS_X;
 800d158:	b2c6      	uxtb	r6, r0
  uint8_t Alarm_Y= (uint8_t)AlarmStatus.STATUS_AXIS_Y;
 800d15a:	f3c0 2407 	ubfx	r4, r0, #8, #8
  uint8_t Alarm_Z= (uint8_t)AlarmStatus.STATUS_AXIS_Z;
 800d15e:	f3c0 4507 	ubfx	r5, r0, #16, #8
  STORE_LE_16(Buff  ,(HAL_GetTick()>>3));
 800d162:	f7fa fa13 	bl	800758c <HAL_GetTick>
 800d166:	08c0      	lsrs	r0, r0, #3
 800d168:	f88d 0020 	strb.w	r0, [sp, #32]
 800d16c:	f7fa fa0e 	bl	800758c <HAL_GetTick>
  TempResult= SubrangeFreqMaxValue.x * ((float)10);
 800d170:	eddd 7a01 	vldr	s15, [sp, #4]
  TempResult= SubrangeMaxValue.x * ((float)100);
 800d174:	ed9f 6a3f 	vldr	s12, [pc, #252]	; 800d274 <BLE_FFTAlarmSubrangeStatusUpdate+0x138>
 800d178:	eddd 6a04 	vldr	s13, [sp, #16]
  TempResult= SubrangeFreqMaxValue.z * ((float)10);
 800d17c:	ed9d 7a03 	vldr	s14, [sp, #12]
  TempResult= SubrangeFreqMaxValue.x * ((float)10);
 800d180:	eef2 5a04 	vmov.f32	s11, #36	; 0x41200000  10.0
 800d184:	ee67 7aa5 	vmul.f32	s15, s15, s11
  TempResult= SubrangeMaxValue.x * ((float)100);
 800d188:	ee66 6a86 	vmul.f32	s13, s13, s12
  STORE_LE_16(Buff + 3, ((uint16_t)TempResult));
 800d18c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
  STORE_LE_16(Buff + 5, ((uint16_t)TempResult));
 800d190:	eefc 6ae6 	vcvt.u32.f32	s13, s13
  STORE_LE_16(Buff + 3, ((uint16_t)TempResult));
 800d194:	ee17 3a90 	vmov	r3, s15
 800d198:	b29b      	uxth	r3, r3
 800d19a:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
 800d19e:	0a1b      	lsrs	r3, r3, #8
 800d1a0:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  STORE_LE_16(Buff + 5, ((uint16_t)TempResult));
 800d1a4:	ee16 3a90 	vmov	r3, s13
  TempResult= SubrangeFreqMaxValue.y * ((float)10);
 800d1a8:	eddd 6a02 	vldr	s13, [sp, #8]
  TempResult= SubrangeMaxValue.z * ((float)100);
 800d1ac:	eddd 7a06 	vldr	s15, [sp, #24]
  TempResult= SubrangeFreqMaxValue.y * ((float)10);
 800d1b0:	ee66 6aa5 	vmul.f32	s13, s13, s11
  STORE_LE_16(Buff + 5, ((uint16_t)TempResult));
 800d1b4:	b29b      	uxth	r3, r3
  STORE_LE_16(Buff + 7, ((uint16_t)TempResult));
 800d1b6:	eefc 6ae6 	vcvt.u32.f32	s13, s13
  STORE_LE_16(Buff + 5, ((uint16_t)TempResult));
 800d1ba:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
 800d1be:	0a1b      	lsrs	r3, r3, #8
 800d1c0:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
  STORE_LE_16(Buff + 7, ((uint16_t)TempResult));
 800d1c4:	ee16 3a90 	vmov	r3, s13
  TempResult= SubrangeMaxValue.y * ((float)100);
 800d1c8:	eddd 6a05 	vldr	s13, [sp, #20]
 800d1cc:	ee66 6a86 	vmul.f32	s13, s13, s12
  STORE_LE_16(Buff + 7, ((uint16_t)TempResult));
 800d1d0:	b29b      	uxth	r3, r3
  STORE_LE_16(Buff + 9, ((uint16_t)TempResult));
 800d1d2:	eefc 6ae6 	vcvt.u32.f32	s13, s13
  STORE_LE_16(Buff + 7, ((uint16_t)TempResult));
 800d1d6:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
 800d1da:	0a1b      	lsrs	r3, r3, #8
  TempResult= SubrangeFreqMaxValue.z * ((float)10);
 800d1dc:	ee27 7a25 	vmul.f32	s14, s14, s11
  STORE_LE_16(Buff + 7, ((uint16_t)TempResult));
 800d1e0:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
  STORE_LE_16(Buff + 9, ((uint16_t)TempResult));
 800d1e4:	ee16 3a90 	vmov	r3, s13
  STORE_LE_16(Buff + 11, ((uint16_t)TempResult));
 800d1e8:	eebc 7ac7 	vcvt.u32.f32	s14, s14
  STORE_LE_16(Buff + 9, ((uint16_t)TempResult));
 800d1ec:	b29b      	uxth	r3, r3
 800d1ee:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d1f2:	0a1b      	lsrs	r3, r3, #8
  TempResult= SubrangeMaxValue.z * ((float)100);
 800d1f4:	ee67 7a86 	vmul.f32	s15, s15, s12
  STORE_LE_16(Buff + 9, ((uint16_t)TempResult));
 800d1f8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
  STORE_LE_16(Buff + 11, ((uint16_t)TempResult));
 800d1fc:	ee17 3a10 	vmov	r3, s14
  STORE_LE_16(Buff + 13, ((uint16_t)TempResult));
 800d200:	eefc 7ae7 	vcvt.u32.f32	s15, s15
  STORE_LE_16(Buff + 11, ((uint16_t)TempResult));
 800d204:	b29b      	uxth	r3, r3
 800d206:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 800d20a:	0a1b      	lsrs	r3, r3, #8
 800d20c:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
  STORE_LE_16(Buff + 13, ((uint16_t)TempResult));
 800d210:	ee17 3a90 	vmov	r3, s15
  Buff[2] = (Alarm_X << 4) | (Alarm_Y  << 2) | (Alarm_Z);
 800d214:	00a4      	lsls	r4, r4, #2
  STORE_LE_16(Buff + 13, ((uint16_t)TempResult));
 800d216:	b29b      	uxth	r3, r3
  STORE_LE_16(Buff  ,(HAL_GetTick()>>3));
 800d218:	0ac0      	lsrs	r0, r0, #11
  STORE_LE_16(Buff + 13, ((uint16_t)TempResult));
 800d21a:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
  Buff[2] = (Alarm_X << 4) | (Alarm_Y  << 2) | (Alarm_Z);
 800d21e:	ea44 1406 	orr.w	r4, r4, r6, lsl #4
  STORE_LE_16(Buff + 13, ((uint16_t)TempResult));
 800d222:	0a1b      	lsrs	r3, r3, #8
  STORE_LE_16(Buff  ,(HAL_GetTick()>>3));
 800d224:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
  Buff[2] = (Alarm_X << 4) | (Alarm_Y  << 2) | (Alarm_Z);
 800d228:	432c      	orrs	r4, r5
  STORE_LE_16(Buff + 13, ((uint16_t)TempResult));
 800d22a:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
  ret = ACI_GATT_UPDATE_CHAR_VALUE(&BleCharFFTAlarmSubrangeStatus, 0, 2+13, Buff);
 800d22e:	4812      	ldr	r0, [pc, #72]	; (800d278 <BLE_FFTAlarmSubrangeStatusUpdate+0x13c>)
  Buff[2] = (Alarm_X << 4) | (Alarm_Y  << 2) | (Alarm_Z);
 800d230:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
  ret = ACI_GATT_UPDATE_CHAR_VALUE(&BleCharFFTAlarmSubrangeStatus, 0, 2+13, Buff);
 800d234:	ab08      	add	r3, sp, #32
 800d236:	220f      	movs	r2, #15
 800d238:	2100      	movs	r1, #0
 800d23a:	f000 fb67 	bl	800d90c <safe_aci_gatt_update_char_value>
  if (ret != BLE_STATUS_SUCCESS){
 800d23e:	4604      	mov	r4, r0
 800d240:	b178      	cbz	r0, 800d262 <BLE_FFTAlarmSubrangeStatusUpdate+0x126>
    if(ret != BLE_STATUS_INSUFFICIENT_RESOURCES) {
 800d242:	2864      	cmp	r0, #100	; 0x64
 800d244:	d010      	beq.n	800d268 <BLE_FFTAlarmSubrangeStatusUpdate+0x12c>
      if(BLE_StdErr_Service==BLE_SERV_ENABLE){
 800d246:	4b0d      	ldr	r3, [pc, #52]	; (800d27c <BLE_FFTAlarmSubrangeStatusUpdate+0x140>)
 800d248:	781b      	ldrb	r3, [r3, #0]
 800d24a:	2b01      	cmp	r3, #1
 800d24c:	d10c      	bne.n	800d268 <BLE_FFTAlarmSubrangeStatusUpdate+0x12c>
        BytesToWrite =(uint8_t)sprintf((char *)BufferToWrite, "Error Updating FFT Alarm Subrange Status Char\n");
 800d24e:	490c      	ldr	r1, [pc, #48]	; (800d280 <BLE_FFTAlarmSubrangeStatusUpdate+0x144>)
 800d250:	480c      	ldr	r0, [pc, #48]	; (800d284 <BLE_FFTAlarmSubrangeStatusUpdate+0x148>)
 800d252:	f00d fa3f 	bl	801a6d4 <strcpy>
 800d256:	4b0c      	ldr	r3, [pc, #48]	; (800d288 <BLE_FFTAlarmSubrangeStatusUpdate+0x14c>)
        Stderr_Update(BufferToWrite,BytesToWrite);
 800d258:	480a      	ldr	r0, [pc, #40]	; (800d284 <BLE_FFTAlarmSubrangeStatusUpdate+0x148>)
        BytesToWrite =(uint8_t)sprintf((char *)BufferToWrite, "Error Updating FFT Alarm Subrange Status Char\n");
 800d25a:	212e      	movs	r1, #46	; 0x2e
 800d25c:	7019      	strb	r1, [r3, #0]
        Stderr_Update(BufferToWrite,BytesToWrite);
 800d25e:	f000 fb81 	bl	800d964 <Stderr_Update>
}
 800d262:	4620      	mov	r0, r4
 800d264:	b00c      	add	sp, #48	; 0x30
 800d266:	bd70      	pop	{r4, r5, r6, pc}
      BLE_MANAGER_PRINTF("Error Updating FFT Alarm Subrange Status Char ret=%x\r\n",ret);
 800d268:	4621      	mov	r1, r4
 800d26a:	4808      	ldr	r0, [pc, #32]	; (800d28c <BLE_FFTAlarmSubrangeStatusUpdate+0x150>)
 800d26c:	f00d f91c 	bl	801a4a8 <iprintf>
 800d270:	e7f7      	b.n	800d262 <BLE_FFTAlarmSubrangeStatusUpdate+0x126>
 800d272:	bf00      	nop
 800d274:	42c80000 	.word	0x42c80000
 800d278:	200032fc 	.word	0x200032fc
 800d27c:	200099f8 	.word	0x200099f8
 800d280:	080210fa 	.word	0x080210fa
 800d284:	20009a30 	.word	0x20009a30
 800d288:	20009b3d 	.word	0x20009b3d
 800d28c:	08021129 	.word	0x08021129

0800d290 <AttrMod_Request_FFTAmplitude>:
 * @param  uint8_t *att_data attribute data
 * @retval None
 */
static void AttrMod_Request_FFTAmplitude(void *VoidCharPointer, uint16_t attr_handle, uint16_t Offset, uint8_t data_length, uint8_t *att_data)
{
  if (att_data[0] == 01U) {
 800d290:	9b00      	ldr	r3, [sp, #0]
 800d292:	781b      	ldrb	r3, [r3, #0]
 800d294:	2b01      	cmp	r3, #1
 800d296:	d102      	bne.n	800d29e <AttrMod_Request_FFTAmplitude+0xe>
    BLE_FFT_Amplitude_NotifyEvent= BLE_NOTIFY_SUB;
 800d298:	4a03      	ldr	r2, [pc, #12]	; (800d2a8 <AttrMod_Request_FFTAmplitude+0x18>)
 800d29a:	7013      	strb	r3, [r2, #0]
 800d29c:	4770      	bx	lr
  } else if (att_data[0] == 0U){
 800d29e:	b913      	cbnz	r3, 800d2a6 <AttrMod_Request_FFTAmplitude+0x16>
    BLE_FFT_Amplitude_NotifyEvent= BLE_NOTIFY_UNSUB;
 800d2a0:	4b01      	ldr	r3, [pc, #4]	; (800d2a8 <AttrMod_Request_FFTAmplitude+0x18>)
 800d2a2:	2202      	movs	r2, #2
 800d2a4:	701a      	strb	r2, [r3, #0]
   Term_Update(BufferToWrite,BytesToWrite);
 } else {
   BLE_MANAGER_PRINTF("--->FFT Amplitude=%s", (BLE_FFT_Amplitude_NotifyEvent == BLE_NOTIFY_SUB) ? " ON\r\n" : " OFF\r\n");
 }
#endif
}
 800d2a6:	4770      	bx	lr
 800d2a8:	20003328 	.word	0x20003328

0800d2ac <BLE_InitFFTAmplitudeService>:
{
 800d2ac:	b510      	push	{r4, lr}
  memset(BleCharPointer,0,sizeof(BleCharTypeDef));  
 800d2ae:	4c0f      	ldr	r4, [pc, #60]	; (800d2ec <BLE_InitFFTAmplitudeService+0x40>)
 800d2b0:	221c      	movs	r2, #28
 800d2b2:	2100      	movs	r1, #0
 800d2b4:	f104 0014 	add.w	r0, r4, #20
 800d2b8:	f00c fbda 	bl	8019a70 <memset>
  BleCharPointer->AttrMod_Request_CB = AttrMod_Request_FFTAmplitude;
 800d2bc:	4b0c      	ldr	r3, [pc, #48]	; (800d2f0 <BLE_InitFFTAmplitudeService+0x44>)
  COPY_FFT_AMPLITUDE_CHAR_UUID((BleCharPointer->uuid));
 800d2be:	4a0d      	ldr	r2, [pc, #52]	; (800d2f4 <BLE_InitFFTAmplitudeService+0x48>)
  BleCharPointer->AttrMod_Request_CB = AttrMod_Request_FFTAmplitude;
 800d2c0:	6263      	str	r3, [r4, #36]	; 0x24
  COPY_FFT_AMPLITUDE_CHAR_UUID((BleCharPointer->uuid));
 800d2c2:	4b0d      	ldr	r3, [pc, #52]	; (800d2f8 <BLE_InitFFTAmplitudeService+0x4c>)
 800d2c4:	490d      	ldr	r1, [pc, #52]	; (800d2fc <BLE_InitFFTAmplitudeService+0x50>)
  BLE_MANAGER_PRINTF("BLE FFT Amplitude features ok\r\n");
 800d2c6:	480e      	ldr	r0, [pc, #56]	; (800d300 <BLE_InitFFTAmplitudeService+0x54>)
  COPY_FFT_AMPLITUDE_CHAR_UUID((BleCharPointer->uuid));
 800d2c8:	e9c4 2301 	strd	r2, r3, [r4, #4]
 800d2cc:	2305      	movs	r3, #5
 800d2ce:	e9c4 1303 	strd	r1, r3, [r4, #12]
  BleCharPointer->Char_UUID_Type =UUID_TYPE_128;
 800d2d2:	2302      	movs	r3, #2
 800d2d4:	7523      	strb	r3, [r4, #20]
  BleCharPointer->Char_Value_Length=20;
 800d2d6:	2314      	movs	r3, #20
 800d2d8:	82e3      	strh	r3, [r4, #22]
  BleCharPointer->Char_Properties=CHAR_PROP_NOTIFY;
 800d2da:	4b0a      	ldr	r3, [pc, #40]	; (800d304 <BLE_InitFFTAmplitudeService+0x58>)
 800d2dc:	61a3      	str	r3, [r4, #24]
  BleCharPointer->Is_Variable=1;
 800d2de:	2301      	movs	r3, #1
 800d2e0:	7723      	strb	r3, [r4, #28]
  BLE_MANAGER_PRINTF("BLE FFT Amplitude features ok\r\n");
 800d2e2:	f00d f967 	bl	801a5b4 <puts>
}
 800d2e6:	1d20      	adds	r0, r4, #4
 800d2e8:	bd10      	pop	{r4, pc}
 800d2ea:	bf00      	nop
 800d2ec:	20003328 	.word	0x20003328
 800d2f0:	0800d291 	.word	0x0800d291
 800d2f4:	a5d5c51b 	.word	0xa5d5c51b
 800d2f8:	ac360002 	.word	0xac360002
 800d2fc:	000211e1 	.word	0x000211e1
 800d300:	08021160 	.word	0x08021160
 800d304:	10040010 	.word	0x10040010

0800d308 <BLE_SetFFTAmplitudeAdvertizeData>:
 manuf_data[FFT_AMPLITUDE_ADVERTIZE_DATA_POSITION] |= 0x05U;
 800d308:	7c83      	ldrb	r3, [r0, #18]
 800d30a:	f043 0305 	orr.w	r3, r3, #5
 800d30e:	7483      	strb	r3, [r0, #18]
}
 800d310:	4770      	bx	lr
	...

0800d314 <BLE_FFTAmplitudeUpdate>:
{
 800d314:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d316:	461d      	mov	r5, r3
  TotalSize= 2U /* nSample */ + 1U /* nComponents */ + 4U /*  Frequency Steps */ + ((DataToSend[2] * DataNumber) * 4U) /* Samples */;
 800d318:	7883      	ldrb	r3, [r0, #2]
 800d31a:	fb13 f101 	smulbb	r1, r3, r1
 800d31e:	008c      	lsls	r4, r1, #2
  indexStart= 20U * (*CountSendData);
 800d320:	8829      	ldrh	r1, [r5, #0]
 800d322:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800d326:	0089      	lsls	r1, r1, #2
 800d328:	b289      	uxth	r1, r1
  TotalSize= 2U /* nSample */ + 1U /* nComponents */ + 4U /*  Frequency Steps */ + ((DataToSend[2] * DataNumber) * 4U) /* Samples */;
 800d32a:	3407      	adds	r4, #7
  indexStop=  20U * ((*CountSendData) + 1U);
 800d32c:	f101 0714 	add.w	r7, r1, #20
  TotalSize= 2U /* nSample */ + 1U /* nComponents */ + 4U /*  Frequency Steps */ + ((DataToSend[2] * DataNumber) * 4U) /* Samples */;
 800d330:	b2a4      	uxth	r4, r4
  indexStop=  20U * ((*CountSendData) + 1U);
 800d332:	b2bf      	uxth	r7, r7
  if(indexStop > TotalSize)
 800d334:	42bc      	cmp	r4, r7
{
 800d336:	b087      	sub	sp, #28
 800d338:	4616      	mov	r6, r2
 800d33a:	f04f 0214 	mov.w	r2, #20
    NumByteSent= (uint8_t)(TotalSize % NumByteSent);
 800d33e:	f10d 0c04 	add.w	ip, sp, #4
 800d342:	bf3f      	itttt	cc
 800d344:	fbb4 f3f2 	udivcc	r3, r4, r2
 800d348:	fb02 4213 	mlscc	r2, r2, r3, r4
 800d34c:	b2d2      	uxtbcc	r2, r2
 800d34e:	4627      	movcc	r7, r4
  for(index=indexStart; index<indexStop; index++)
 800d350:	4408      	add	r0, r1
 800d352:	4663      	mov	r3, ip
 800d354:	42b9      	cmp	r1, r7
 800d356:	d30e      	bcc.n	800d376 <BLE_FFTAmplitudeUpdate+0x62>
  ret = ACI_GATT_UPDATE_CHAR_VALUE(&BleCharFFTAmplitude, 0, NumByteSent,Buff);
 800d358:	480a      	ldr	r0, [pc, #40]	; (800d384 <BLE_FFTAmplitudeUpdate+0x70>)
 800d35a:	2100      	movs	r1, #0
 800d35c:	f000 fad6 	bl	800d90c <safe_aci_gatt_update_char_value>
  if (ret == BLE_STATUS_SUCCESS)
 800d360:	b938      	cbnz	r0, 800d372 <BLE_FFTAmplitudeUpdate+0x5e>
    (*CountSendData)++;
 800d362:	882b      	ldrh	r3, [r5, #0]
    if(indexStop == TotalSize)
 800d364:	42a7      	cmp	r7, r4
    (*CountSendData)++;
 800d366:	f103 0301 	add.w	r3, r3, #1
 800d36a:	802b      	strh	r3, [r5, #0]
      *SendingFFT= 0;
 800d36c:	bf04      	itt	eq
 800d36e:	7030      	strbeq	r0, [r6, #0]
      *CountSendData= 0;
 800d370:	8028      	strheq	r0, [r5, #0]
}
 800d372:	b007      	add	sp, #28
 800d374:	bdf0      	pop	{r4, r5, r6, r7, pc}
    Buff[index - indexStart]= DataToSend[index];
 800d376:	f810 eb01 	ldrb.w	lr, [r0], #1
 800d37a:	f80c eb01 	strb.w	lr, [ip], #1
  for(index=indexStart; index<indexStop; index++)
 800d37e:	3101      	adds	r1, #1
 800d380:	b289      	uxth	r1, r1
 800d382:	e7e7      	b.n	800d354 <BLE_FFTAmplitudeUpdate+0x40>
 800d384:	2000332c 	.word	0x2000332c

0800d388 <AttrMod_Request_Inertial>:
* @param  uint8_t *att_data attribute data
* @retval None
*/
static void AttrMod_Request_Inertial(void *VoidCharPointer,uint16_t attr_handle, uint16_t Offset, uint8_t data_length, uint8_t *att_data)
{
  if (att_data[0] == 01U) {
 800d388:	9b00      	ldr	r3, [sp, #0]
 800d38a:	781b      	ldrb	r3, [r3, #0]
 800d38c:	2b01      	cmp	r3, #1
 800d38e:	d102      	bne.n	800d396 <AttrMod_Request_Inertial+0xe>
    BLE_Inertial_NotifyEvent= BLE_NOTIFY_SUB;
 800d390:	4a03      	ldr	r2, [pc, #12]	; (800d3a0 <AttrMod_Request_Inertial+0x18>)
 800d392:	7013      	strb	r3, [r2, #0]
 800d394:	4770      	bx	lr
  } else if (att_data[0] == 0U){
 800d396:	b913      	cbnz	r3, 800d39e <AttrMod_Request_Inertial+0x16>
    BLE_Inertial_NotifyEvent= BLE_NOTIFY_UNSUB;
 800d398:	4b01      	ldr	r3, [pc, #4]	; (800d3a0 <AttrMod_Request_Inertial+0x18>)
 800d39a:	2202      	movs	r2, #2
 800d39c:	701a      	strb	r2, [r3, #0]
    Term_Update(BufferToWrite,BytesToWrite);
  } else {
    BLE_MANAGER_PRINTF("--->Acc/Gyro/Mag=%s", (BLE_Inertial_NotifyEvent == BLE_NOTIFY_SUB) ? " ON\r\n" : " OFF\r\n");
  }
#endif
}
 800d39e:	4770      	bx	lr
 800d3a0:	20003358 	.word	0x20003358

0800d3a4 <BLE_InitInertialService>:
{
 800d3a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  InertialCharSize=2;
 800d3a6:	4c28      	ldr	r4, [pc, #160]	; (800d448 <BLE_InitInertialService+0xa4>)
 800d3a8:	2302      	movs	r3, #2
 800d3aa:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
  InertialFeaturesEnabled.AccIsEnable = AccEnable;
 800d3ae:	4b27      	ldr	r3, [pc, #156]	; (800d44c <BLE_InitInertialService+0xa8>)
  if( (AccEnable == 1U) ||
 800d3b0:	2801      	cmp	r0, #1
{
 800d3b2:	4607      	mov	r7, r0
 800d3b4:	460e      	mov	r6, r1
 800d3b6:	4615      	mov	r5, r2
  InertialFeaturesEnabled.AccIsEnable = AccEnable;
 800d3b8:	7018      	strb	r0, [r3, #0]
  InertialFeaturesEnabled.GyroIsEnable= GyroEnable;
 800d3ba:	7059      	strb	r1, [r3, #1]
  InertialFeaturesEnabled.MagIsEnabled= MagEnabled;
 800d3bc:	709a      	strb	r2, [r3, #2]
  if( (AccEnable == 1U) ||
 800d3be:	d003      	beq.n	800d3c8 <BLE_InitInertialService+0x24>
 800d3c0:	2901      	cmp	r1, #1
 800d3c2:	d001      	beq.n	800d3c8 <BLE_InitInertialService+0x24>
     (GyroEnable == 1U)   ||
 800d3c4:	2a01      	cmp	r2, #1
 800d3c6:	d13a      	bne.n	800d43e <BLE_InitInertialService+0x9a>
    memset(BleCharPointer,0,sizeof(BleCharTypeDef));  
 800d3c8:	221c      	movs	r2, #28
 800d3ca:	2100      	movs	r1, #0
 800d3cc:	4820      	ldr	r0, [pc, #128]	; (800d450 <BLE_InitInertialService+0xac>)
 800d3ce:	f00c fb4f 	bl	8019a70 <memset>
    BleCharPointer->AttrMod_Request_CB = AttrMod_Request_Inertial;
 800d3d2:	4b20      	ldr	r3, [pc, #128]	; (800d454 <BLE_InitInertialService+0xb0>)
    COPY_INERTIAL_CHAR_UUID((BleCharPointer->uuid));
 800d3d4:	4a20      	ldr	r2, [pc, #128]	; (800d458 <BLE_InitInertialService+0xb4>)
    BleCharPointer->AttrMod_Request_CB = AttrMod_Request_Inertial;
 800d3d6:	6263      	str	r3, [r4, #36]	; 0x24
    COPY_INERTIAL_CHAR_UUID((BleCharPointer->uuid));
 800d3d8:	4b20      	ldr	r3, [pc, #128]	; (800d45c <BLE_InitInertialService+0xb8>)
 800d3da:	4921      	ldr	r1, [pc, #132]	; (800d460 <BLE_InitInertialService+0xbc>)
    if(AccEnable == 1U){
 800d3dc:	2f01      	cmp	r7, #1
    COPY_INERTIAL_CHAR_UUID((BleCharPointer->uuid));
 800d3de:	e9c4 2301 	strd	r2, r3, [r4, #4]
 800d3e2:	f04f 0300 	mov.w	r3, #0
 800d3e6:	e9c4 1303 	strd	r1, r3, [r4, #12]
      BleCharPointer->uuid[14] |= 0x80U;
 800d3ea:	bf01      	itttt	eq
 800d3ec:	2380      	moveq	r3, #128	; 0x80
 800d3ee:	74a3      	strbeq	r3, [r4, #18]
      InertialCharSize+= 3U * 2U;
 800d3f0:	2308      	moveq	r3, #8
 800d3f2:	f884 3030 	strbeq.w	r3, [r4, #48]	; 0x30
    if(GyroEnable == 1U){
 800d3f6:	2e01      	cmp	r6, #1
 800d3f8:	d108      	bne.n	800d40c <BLE_InitInertialService+0x68>
 800d3fa:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
      BleCharPointer->uuid[14] |= 0x40U;
 800d3fe:	7ca2      	ldrb	r2, [r4, #18]
      InertialCharSize+= 3U * 2U;
 800d400:	3306      	adds	r3, #6
      BleCharPointer->uuid[14] |= 0x40U;
 800d402:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d406:	74a2      	strb	r2, [r4, #18]
      InertialCharSize+= 3U * 2U;
 800d408:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
    if(MagEnabled == 1U){
 800d40c:	2d01      	cmp	r5, #1
 800d40e:	d108      	bne.n	800d422 <BLE_InitInertialService+0x7e>
 800d410:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
      BleCharPointer->uuid[14] |= 0x20U;
 800d414:	7ca2      	ldrb	r2, [r4, #18]
      InertialCharSize+= 3U * 2U;
 800d416:	3306      	adds	r3, #6
      BleCharPointer->uuid[14] |= 0x20U;
 800d418:	f042 0220 	orr.w	r2, r2, #32
 800d41c:	74a2      	strb	r2, [r4, #18]
      InertialCharSize+= 3U * 2U;
 800d41e:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
    BleCharPointer->Char_UUID_Type =UUID_TYPE_128;
 800d422:	2302      	movs	r3, #2
 800d424:	7523      	strb	r3, [r4, #20]
    BleCharPointer->Char_Value_Length= InertialCharSize;
 800d426:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 800d42a:	82e3      	strh	r3, [r4, #22]
    BleCharPointer->Char_Properties=CHAR_PROP_NOTIFY;
 800d42c:	4b0d      	ldr	r3, [pc, #52]	; (800d464 <BLE_InitInertialService+0xc0>)
 800d42e:	61a3      	str	r3, [r4, #24]
    BLE_MANAGER_PRINTF("BLE Inertial features ok\r\n");
 800d430:	480d      	ldr	r0, [pc, #52]	; (800d468 <BLE_InitInertialService+0xc4>)
    BleCharPointer->Is_Variable=0;
 800d432:	2300      	movs	r3, #0
 800d434:	7723      	strb	r3, [r4, #28]
    BLE_MANAGER_PRINTF("BLE Inertial features ok\r\n");
 800d436:	f00d f8bd 	bl	801a5b4 <puts>
    BleCharPointer = &BleCharInertial;
 800d43a:	480c      	ldr	r0, [pc, #48]	; (800d46c <BLE_InitInertialService+0xc8>)
}
 800d43c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    BLE_MANAGER_PRINTF(" ERROR: None inertial features is enabled\r\n");
 800d43e:	480c      	ldr	r0, [pc, #48]	; (800d470 <BLE_InitInertialService+0xcc>)
 800d440:	f00d f8b8 	bl	801a5b4 <puts>
  BleCharTypeDef *BleCharPointer= NULL;
 800d444:	2000      	movs	r0, #0
  return BleCharPointer;
 800d446:	e7f9      	b.n	800d43c <BLE_InitInertialService+0x98>
 800d448:	20003358 	.word	0x20003358
 800d44c:	2000999f 	.word	0x2000999f
 800d450:	2000336c 	.word	0x2000336c
 800d454:	0800d389 	.word	0x0800d389
 800d458:	a5d5c51b 	.word	0xa5d5c51b
 800d45c:	ac360002 	.word	0xac360002
 800d460:	000111e1 	.word	0x000111e1
 800d464:	10040010 	.word	0x10040010
 800d468:	0802117f 	.word	0x0802117f
 800d46c:	2000335c 	.word	0x2000335c
 800d470:	08021199 	.word	0x08021199

0800d474 <BLE_SetInertialAdvertizeData>:
  if(InertialFeaturesEnabled.AccIsEnable == 1U) {
 800d474:	4b0b      	ldr	r3, [pc, #44]	; (800d4a4 <BLE_SetInertialAdvertizeData+0x30>)
 800d476:	781a      	ldrb	r2, [r3, #0]
 800d478:	2a01      	cmp	r2, #1
    manuf_data[INERTIAL_ADVERTIZE_DATA_POSITION] |= 0x80U;
 800d47a:	bf02      	ittt	eq
 800d47c:	7c02      	ldrbeq	r2, [r0, #16]
 800d47e:	f062 027f 	orneq	r2, r2, #127	; 0x7f
 800d482:	7402      	strbeq	r2, [r0, #16]
  if(InertialFeaturesEnabled.GyroIsEnable == 1U) {
 800d484:	785a      	ldrb	r2, [r3, #1]
  if(InertialFeaturesEnabled.MagIsEnabled == 1U) {
 800d486:	789b      	ldrb	r3, [r3, #2]
  if(InertialFeaturesEnabled.GyroIsEnable == 1U) {
 800d488:	2a01      	cmp	r2, #1
    manuf_data[INERTIAL_ADVERTIZE_DATA_POSITION] |= 0x40U;
 800d48a:	bf02      	ittt	eq
 800d48c:	7c02      	ldrbeq	r2, [r0, #16]
 800d48e:	f042 0240 	orreq.w	r2, r2, #64	; 0x40
 800d492:	7402      	strbeq	r2, [r0, #16]
  if(InertialFeaturesEnabled.MagIsEnabled == 1U) {
 800d494:	2b01      	cmp	r3, #1
    manuf_data[INERTIAL_ADVERTIZE_DATA_POSITION] |= 0x20U;
 800d496:	bf02      	ittt	eq
 800d498:	7c03      	ldrbeq	r3, [r0, #16]
 800d49a:	f043 0320 	orreq.w	r3, r3, #32
 800d49e:	7403      	strbeq	r3, [r0, #16]
}
 800d4a0:	4770      	bx	lr
 800d4a2:	bf00      	nop
 800d4a4:	2000999f 	.word	0x2000999f

0800d4a8 <BLE_AccGyroMagUpdate>:
{
 800d4a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d4aa:	b087      	sub	sp, #28
 800d4ac:	4605      	mov	r5, r0
 800d4ae:	460c      	mov	r4, r1
 800d4b0:	4616      	mov	r6, r2
  STORE_LE_16(buff   ,(HAL_GetTick()>>3));
 800d4b2:	f7fa f86b 	bl	800758c <HAL_GetTick>
 800d4b6:	08c0      	lsrs	r0, r0, #3
 800d4b8:	f88d 0004 	strb.w	r0, [sp, #4]
 800d4bc:	f7fa f866 	bl	800758c <HAL_GetTick>
  if(InertialFeaturesEnabled.AccIsEnable == 1U) {
 800d4c0:	4a42      	ldr	r2, [pc, #264]	; (800d5cc <BLE_AccGyroMagUpdate+0x124>)
 800d4c2:	7813      	ldrb	r3, [r2, #0]
  if(InertialFeaturesEnabled.GyroIsEnable == 1U) {
 800d4c4:	7851      	ldrb	r1, [r2, #1]
  if(InertialFeaturesEnabled.AccIsEnable == 1U) {
 800d4c6:	2b01      	cmp	r3, #1
    STORE_LE_16(buff+BuffPos, ((uint16_t)Acc->x));
 800d4c8:	bf01      	itttt	eq
 800d4ca:	882b      	ldrheq	r3, [r5, #0]
 800d4cc:	f8ad 3006 	strheq.w	r3, [sp, #6]
    STORE_LE_16(buff+BuffPos, ((uint16_t)Acc->y));
 800d4d0:	88ab      	ldrheq	r3, [r5, #4]
 800d4d2:	f8ad 3008 	strheq.w	r3, [sp, #8]
    STORE_LE_16(buff+BuffPos, ((uint16_t)Acc->z));
 800d4d6:	bf04      	itt	eq
 800d4d8:	892b      	ldrheq	r3, [r5, #8]
 800d4da:	f8ad 300a 	strheq.w	r3, [sp, #10]
  STORE_LE_16(buff   ,(HAL_GetTick()>>3));
 800d4de:	ea4f 20d0 	mov.w	r0, r0, lsr #11
    BuffPos+= 2U;
 800d4e2:	bf0c      	ite	eq
 800d4e4:	2308      	moveq	r3, #8
  BuffPos= 2;
 800d4e6:	2302      	movne	r3, #2
  if(InertialFeaturesEnabled.GyroIsEnable == 1U) {
 800d4e8:	2901      	cmp	r1, #1
  STORE_LE_16(buff   ,(HAL_GetTick()>>3));
 800d4ea:	f88d 0005 	strb.w	r0, [sp, #5]
  if(InertialFeaturesEnabled.GyroIsEnable == 1U) {
 800d4ee:	d129      	bne.n	800d544 <BLE_AccGyroMagUpdate+0x9c>
    Gyro->x/=100;
 800d4f0:	6825      	ldr	r5, [r4, #0]
    Gyro->y/=100;
 800d4f2:	6860      	ldr	r0, [r4, #4]
    Gyro->z/=100;
 800d4f4:	68a1      	ldr	r1, [r4, #8]
    Gyro->x/=100;
 800d4f6:	2764      	movs	r7, #100	; 0x64
 800d4f8:	fb95 f5f7 	sdiv	r5, r5, r7
    Gyro->y/=100;
 800d4fc:	fb90 f0f7 	sdiv	r0, r0, r7
    Gyro->z/=100;
 800d500:	fb91 f1f7 	sdiv	r1, r1, r7
    Gyro->x/=100;
 800d504:	6025      	str	r5, [r4, #0]
    Gyro->y/=100;
 800d506:	6060      	str	r0, [r4, #4]
    Gyro->z/=100;
 800d508:	60a1      	str	r1, [r4, #8]
    STORE_LE_16(buff+BuffPos, ((uint16_t)Gyro->x));
 800d50a:	ac06      	add	r4, sp, #24
 800d50c:	441c      	add	r4, r3
 800d50e:	f804 5c14 	strb.w	r5, [r4, #-20]
 800d512:	f3c5 2507 	ubfx	r5, r5, #8, #8
 800d516:	f804 5c13 	strb.w	r5, [r4, #-19]
    BuffPos+= 2U;
 800d51a:	1c9c      	adds	r4, r3, #2
    STORE_LE_16(buff+BuffPos, ((uint16_t)Gyro->y));
 800d51c:	ad06      	add	r5, sp, #24
 800d51e:	fa55 f484 	uxtab	r4, r5, r4
 800d522:	f804 0c14 	strb.w	r0, [r4, #-20]
 800d526:	f3c0 2007 	ubfx	r0, r0, #8, #8
 800d52a:	f804 0c13 	strb.w	r0, [r4, #-19]
    BuffPos+= 2U;
 800d52e:	1d18      	adds	r0, r3, #4
    STORE_LE_16(buff+BuffPos, ((uint16_t)Gyro->z));
 800d530:	fa55 f080 	uxtab	r0, r5, r0
    BuffPos+= 2U;
 800d534:	3306      	adds	r3, #6
    STORE_LE_16(buff+BuffPos, ((uint16_t)Gyro->z));
 800d536:	f800 1c14 	strb.w	r1, [r0, #-20]
 800d53a:	f3c1 2107 	ubfx	r1, r1, #8, #8
 800d53e:	f800 1c13 	strb.w	r1, [r0, #-19]
    BuffPos+= 2U;
 800d542:	b2db      	uxtb	r3, r3
  if(InertialFeaturesEnabled.MagIsEnabled == 1U) {
 800d544:	7892      	ldrb	r2, [r2, #2]
 800d546:	2a01      	cmp	r2, #1
 800d548:	d11d      	bne.n	800d586 <BLE_AccGyroMagUpdate+0xde>
    STORE_LE_16(buff+BuffPos, ((uint16_t)Mag->x));
 800d54a:	a906      	add	r1, sp, #24
 800d54c:	4419      	add	r1, r3
 800d54e:	6832      	ldr	r2, [r6, #0]
 800d550:	f801 2c14 	strb.w	r2, [r1, #-20]
 800d554:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800d558:	f801 2c13 	strb.w	r2, [r1, #-19]
    STORE_LE_16(buff+BuffPos, ((uint16_t)Mag->y));
 800d55c:	a806      	add	r0, sp, #24
    BuffPos+= 2U;
 800d55e:	1c9a      	adds	r2, r3, #2
    STORE_LE_16(buff+BuffPos, ((uint16_t)Mag->y));
 800d560:	fa50 f282 	uxtab	r2, r0, r2
 800d564:	6871      	ldr	r1, [r6, #4]
 800d566:	f802 1c14 	strb.w	r1, [r2, #-20]
    BuffPos+= 2U;
 800d56a:	3304      	adds	r3, #4
    STORE_LE_16(buff+BuffPos, ((uint16_t)Mag->y));
 800d56c:	f3c1 2107 	ubfx	r1, r1, #8, #8
 800d570:	f802 1c13 	strb.w	r1, [r2, #-19]
    STORE_LE_16(buff+BuffPos, ((uint16_t)Mag->z));
 800d574:	fa50 f383 	uxtab	r3, r0, r3
 800d578:	68b2      	ldr	r2, [r6, #8]
 800d57a:	f803 2c14 	strb.w	r2, [r3, #-20]
 800d57e:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800d582:	f803 2c13 	strb.w	r2, [r3, #-19]
  ret = ACI_GATT_UPDATE_CHAR_VALUE(&BleCharInertial, 0, InertialCharSize, buff);
 800d586:	4812      	ldr	r0, [pc, #72]	; (800d5d0 <BLE_AccGyroMagUpdate+0x128>)
 800d588:	ab01      	add	r3, sp, #4
 800d58a:	f890 2030 	ldrb.w	r2, [r0, #48]	; 0x30
 800d58e:	2100      	movs	r1, #0
 800d590:	3004      	adds	r0, #4
 800d592:	f000 f9bb 	bl	800d90c <safe_aci_gatt_update_char_value>
  if (ret != BLE_STATUS_SUCCESS){
 800d596:	4604      	mov	r4, r0
 800d598:	b178      	cbz	r0, 800d5ba <BLE_AccGyroMagUpdate+0x112>
    if(ret != BLE_STATUS_INSUFFICIENT_RESOURCES) {
 800d59a:	2864      	cmp	r0, #100	; 0x64
 800d59c:	d010      	beq.n	800d5c0 <BLE_AccGyroMagUpdate+0x118>
      if(BLE_StdErr_Service==BLE_SERV_ENABLE){
 800d59e:	4b0d      	ldr	r3, [pc, #52]	; (800d5d4 <BLE_AccGyroMagUpdate+0x12c>)
 800d5a0:	781b      	ldrb	r3, [r3, #0]
 800d5a2:	2b01      	cmp	r3, #1
 800d5a4:	d10c      	bne.n	800d5c0 <BLE_AccGyroMagUpdate+0x118>
        BytesToWrite = (uint8_t)sprintf((char *)BufferToWrite, "Error Updating Acc/Gyro/Mag Char\n");
 800d5a6:	490c      	ldr	r1, [pc, #48]	; (800d5d8 <BLE_AccGyroMagUpdate+0x130>)
 800d5a8:	480c      	ldr	r0, [pc, #48]	; (800d5dc <BLE_AccGyroMagUpdate+0x134>)
 800d5aa:	f00d f893 	bl	801a6d4 <strcpy>
 800d5ae:	4b0c      	ldr	r3, [pc, #48]	; (800d5e0 <BLE_AccGyroMagUpdate+0x138>)
        Stderr_Update(BufferToWrite,BytesToWrite);
 800d5b0:	480a      	ldr	r0, [pc, #40]	; (800d5dc <BLE_AccGyroMagUpdate+0x134>)
        BytesToWrite = (uint8_t)sprintf((char *)BufferToWrite, "Error Updating Acc/Gyro/Mag Char\n");
 800d5b2:	2121      	movs	r1, #33	; 0x21
 800d5b4:	7019      	strb	r1, [r3, #0]
        Stderr_Update(BufferToWrite,BytesToWrite);
 800d5b6:	f000 f9d5 	bl	800d964 <Stderr_Update>
}
 800d5ba:	4620      	mov	r0, r4
 800d5bc:	b007      	add	sp, #28
 800d5be:	bdf0      	pop	{r4, r5, r6, r7, pc}
      BLE_MANAGER_PRINTF("Error: Updating Acc/Gyro/Mag Char ret=%x\r\n",ret);
 800d5c0:	4621      	mov	r1, r4
 800d5c2:	4808      	ldr	r0, [pc, #32]	; (800d5e4 <BLE_AccGyroMagUpdate+0x13c>)
 800d5c4:	f00c ff70 	bl	801a4a8 <iprintf>
 800d5c8:	e7f7      	b.n	800d5ba <BLE_AccGyroMagUpdate+0x112>
 800d5ca:	bf00      	nop
 800d5cc:	2000999f 	.word	0x2000999f
 800d5d0:	20003358 	.word	0x20003358
 800d5d4:	200099f8 	.word	0x200099f8
 800d5d8:	080211c4 	.word	0x080211c4
 800d5dc:	20009a30 	.word	0x20009a30
 800d5e0:	20009b3d 	.word	0x20009b3d
 800d5e4:	080211e6 	.word	0x080211e6

0800d5e8 <AttrMod_Request_Config>:
* @param  uint8_t *att_data attribute data
* @retval None
*/
static void AttrMod_Request_Config(void *VoidCharPointer,uint16_t attr_handle, uint16_t Offset, uint8_t data_length, uint8_t *att_data)
{
  if (att_data[0] == (uint8_t)01) {
 800d5e8:	9b00      	ldr	r3, [sp, #0]
 800d5ea:	781b      	ldrb	r3, [r3, #0]
 800d5ec:	2b01      	cmp	r3, #1
 800d5ee:	d102      	bne.n	800d5f6 <AttrMod_Request_Config+0xe>
    BLE_Conf_Service= BLE_SERV_ENABLE;
  } else if (att_data[0] == 0U){
    BLE_Conf_Service= BLE_SERV_NOT_ENABLE;
 800d5f0:	4a02      	ldr	r2, [pc, #8]	; (800d5fc <AttrMod_Request_Config+0x14>)
 800d5f2:	7013      	strb	r3, [r2, #0]
    Term_Update(BufferToWrite,BytesToWrite);
  } else {
    BLE_MANAGER_PRINTF("--->Conf=%s\r\n", (BLE_Conf_Service == BLE_SERV_ENABLE) ? "ON" : "OFF");
  }
#endif
}
 800d5f4:	e001      	b.n	800d5fa <AttrMod_Request_Config+0x12>
  } else if (att_data[0] == 0U){
 800d5f6:	2b00      	cmp	r3, #0
 800d5f8:	d0fa      	beq.n	800d5f0 <AttrMod_Request_Config+0x8>
}
 800d5fa:	4770      	bx	lr
 800d5fc:	20009a28 	.word	0x20009a28

0800d600 <Write_Request_Config>:
* @param  uint8_t data_length length of the data
* @param  uint8_t *att_data attribute data
* @retval None
*/
static void Write_Request_Config(void *VoidCharPointer,uint16_t attr_handle, uint16_t Offset, uint8_t data_length, uint8_t *att_data)
{ 
 800d600:	4619      	mov	r1, r3
  /* Received one write command from Client on Configuration characteristc */
  if(CustomWriteRequestConfigCallback!=NULL) {
 800d602:	4b03      	ldr	r3, [pc, #12]	; (800d610 <Write_Request_Config+0x10>)
{ 
 800d604:	9800      	ldr	r0, [sp, #0]
  if(CustomWriteRequestConfigCallback!=NULL) {
 800d606:	681b      	ldr	r3, [r3, #0]
 800d608:	b103      	cbz	r3, 800d60c <Write_Request_Config+0xc>
    CustomWriteRequestConfigCallback(att_data,data_length);
 800d60a:	4718      	bx	r3
  }
}
 800d60c:	4770      	bx	lr
 800d60e:	bf00      	nop
 800d610:	20009a18 	.word	0x20009a18

0800d614 <AttrMod_Request_StdErr>:
* @param  uint8_t *att_data attribute data
* @retval None
*/
static void AttrMod_Request_StdErr(void *VoidCharPointer,uint16_t attr_handle, uint16_t Offset, uint8_t data_length, uint8_t *att_data)
{
  if (att_data[0] == 01U) {
 800d614:	9b00      	ldr	r3, [sp, #0]
 800d616:	781b      	ldrb	r3, [r3, #0]
 800d618:	2b01      	cmp	r3, #1
 800d61a:	d102      	bne.n	800d622 <AttrMod_Request_StdErr+0xe>
    BLE_StdErr_Service= BLE_SERV_ENABLE;
  } else if (att_data[0] == 0U){
    BLE_StdErr_Service= BLE_SERV_NOT_ENABLE;
 800d61c:	4a02      	ldr	r2, [pc, #8]	; (800d628 <AttrMod_Request_StdErr+0x14>)
 800d61e:	7013      	strb	r3, [r2, #0]
  }
}
 800d620:	e001      	b.n	800d626 <AttrMod_Request_StdErr+0x12>
  } else if (att_data[0] == 0U){
 800d622:	2b00      	cmp	r3, #0
 800d624:	d0fa      	beq.n	800d61c <AttrMod_Request_StdErr+0x8>
}
 800d626:	4770      	bx	lr
 800d628:	200099f8 	.word	0x200099f8

0800d62c <AttrMod_Request_Term>:
* @param  uint8_t *att_data attribute data
* @retval None
*/
static void AttrMod_Request_Term(void *VoidCharPointer,uint16_t attr_handle, uint16_t Offset, uint8_t data_length, uint8_t *att_data)
{
  if (att_data[0] == 01U) {
 800d62c:	9b00      	ldr	r3, [sp, #0]
 800d62e:	781b      	ldrb	r3, [r3, #0]
 800d630:	2b01      	cmp	r3, #1
 800d632:	d102      	bne.n	800d63a <AttrMod_Request_Term+0xe>
    BLE_StdTerm_Service= BLE_SERV_ENABLE;
  } else if (att_data[0] == 0U){
    BLE_StdTerm_Service= BLE_SERV_NOT_ENABLE;
 800d634:	4a02      	ldr	r2, [pc, #8]	; (800d640 <AttrMod_Request_Term+0x14>)
 800d636:	7013      	strb	r3, [r2, #0]
  }
}
 800d638:	e001      	b.n	800d63e <AttrMod_Request_Term+0x12>
  } else if (att_data[0] == 0U){
 800d63a:	2b00      	cmp	r3, #0
 800d63c:	d0fa      	beq.n	800d634 <AttrMod_Request_Term+0x8>
}
 800d63e:	4770      	bx	lr
 800d640:	20009b34 	.word	0x20009b34

0800d644 <AttrMod_Request_ExtConfig>:
* @param  uint8_t *att_data attribute data
* @retval None
*/
static void AttrMod_Request_ExtConfig(void *VoidCharPointer,uint16_t attr_handle, uint16_t Offset, uint8_t data_length, uint8_t *att_data)
{
  if (att_data[0] == 01U) {
 800d644:	9b00      	ldr	r3, [sp, #0]
 800d646:	781b      	ldrb	r3, [r3, #0]
 800d648:	2b01      	cmp	r3, #1
 800d64a:	d102      	bne.n	800d652 <AttrMod_Request_ExtConfig+0xe>
    BLE_ExtConf_Service= BLE_SERV_ENABLE;
  } else if (att_data[0] == 0U){
    BLE_ExtConf_Service= BLE_SERV_NOT_ENABLE;
 800d64c:	4a02      	ldr	r2, [pc, #8]	; (800d658 <AttrMod_Request_ExtConfig+0x14>)
 800d64e:	7013      	strb	r3, [r2, #0]
  }
}
 800d650:	e001      	b.n	800d656 <AttrMod_Request_ExtConfig+0x12>
  } else if (att_data[0] == 0U){
 800d652:	2b00      	cmp	r3, #0
 800d654:	d0fa      	beq.n	800d64c <AttrMod_Request_ExtConfig+0x8>
}
 800d656:	4770      	bx	lr
 800d658:	20009b3c 	.word	0x20009b3c

0800d65c <ClearSingleCommand>:
* @brief  Clear One Single Custom Command
* @param  BLE_ExtCustomCommand_t *NextCommand poiter to the next Custom Commands
* @retval None
*/
static void ClearSingleCommand(BLE_ExtCustomCommand_t *Command)
{
 800d65c:	b510      	push	{r4, lr}
 800d65e:	4604      	mov	r4, r0
  if(Command->NextCommand!=NULL) {
 800d660:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800d662:	b108      	cbz	r0, 800d668 <ClearSingleCommand+0xc>
    ClearSingleCommand((BLE_ExtCustomCommand_t *)Command->NextCommand);
 800d664:	f7ff fffa 	bl	800d65c <ClearSingleCommand>
  }
#if (BLE_DEBUG_LEVEL>1)
  BLE_MANAGER_PRINTF("Deleting Custom Command<%s>\r\n",Command->CommandName);
#endif
  BLE_FreeFunction(Command);
 800d668:	4620      	mov	r0, r4
}
 800d66a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  BLE_FreeFunction(Command);
 800d66e:	f00c b9cf 	b.w	8019a10 <free>
	...

0800d674 <APP_UserEvtRx>:
/** @brief HCI Transport layer user function
* @param void *pData pointer to HCI event data
* @retval None
*/
static void APP_UserEvtRx(void *pData)
{
 800d674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t i;
  
  hci_spi_pckt *hci_pckt = (hci_spi_pckt *)pData;
  
  if(hci_pckt->type == (uint8_t)HCI_EVENT_PKT) {
 800d676:	7803      	ldrb	r3, [r0, #0]
 800d678:	2b04      	cmp	r3, #4
{
 800d67a:	4604      	mov	r4, r0
  if(hci_pckt->type == (uint8_t)HCI_EVENT_PKT) {
 800d67c:	d111      	bne.n	800d6a2 <APP_UserEvtRx+0x2e>
    hci_event_pckt *event_pckt = (hci_event_pckt*)hci_pckt->data;
    
    if(event_pckt->evt == (uint8_t)EVT_LE_META_EVENT) {
 800d67e:	7843      	ldrb	r3, [r0, #1]
 800d680:	2b3e      	cmp	r3, #62	; 0x3e
 800d682:	d10f      	bne.n	800d6a4 <APP_UserEvtRx+0x30>
 800d684:	4d19      	ldr	r5, [pc, #100]	; (800d6ec <APP_UserEvtRx+0x78>)
      evt_le_meta_event *evt = (void *)event_pckt->data;
      
      for (i = 0; i < (sizeof(hci_le_meta_events_table)/sizeof(hci_le_meta_events_table_type)); i++) {
 800d686:	2600      	movs	r6, #0
        if (evt->subevent == hci_le_meta_events_table[i].evt_code) {
          hci_le_meta_events_table[i].process((void *)evt->data);
 800d688:	1d07      	adds	r7, r0, #4
        if (evt->subevent == hci_le_meta_events_table[i].evt_code) {
 800d68a:	78e2      	ldrb	r2, [r4, #3]
 800d68c:	882b      	ldrh	r3, [r5, #0]
 800d68e:	429a      	cmp	r2, r3
 800d690:	d102      	bne.n	800d698 <APP_UserEvtRx+0x24>
          hci_le_meta_events_table[i].process((void *)evt->data);
 800d692:	686b      	ldr	r3, [r5, #4]
 800d694:	4638      	mov	r0, r7
 800d696:	4798      	blx	r3
      for (i = 0; i < (sizeof(hci_le_meta_events_table)/sizeof(hci_le_meta_events_table_type)); i++) {
 800d698:	3601      	adds	r6, #1
 800d69a:	2e0a      	cmp	r6, #10
 800d69c:	f105 0508 	add.w	r5, r5, #8
 800d6a0:	d1f3      	bne.n	800d68a <APP_UserEvtRx+0x16>
          hci_events_table[i].process((void *)event_pckt->data);
        }
      }
    }
  }
}
 800d6a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    } else if(event_pckt->evt == (uint8_t)EVT_VENDOR) {
 800d6a4:	2bff      	cmp	r3, #255	; 0xff
 800d6a6:	d110      	bne.n	800d6ca <APP_UserEvtRx+0x56>
 800d6a8:	4d11      	ldr	r5, [pc, #68]	; (800d6f0 <APP_UserEvtRx+0x7c>)
      for (i = 0; i < (sizeof(hci_vendor_specific_events_table)/sizeof(hci_vendor_specific_events_table_type)); i++) {
 800d6aa:	2600      	movs	r6, #0
          hci_vendor_specific_events_table[i].process((void *)blue_evt->data);
 800d6ac:	1d47      	adds	r7, r0, #5
        if (blue_evt->ecode == hci_vendor_specific_events_table[i].evt_code) {
 800d6ae:	f8b4 2003 	ldrh.w	r2, [r4, #3]
 800d6b2:	882b      	ldrh	r3, [r5, #0]
 800d6b4:	429a      	cmp	r2, r3
 800d6b6:	d102      	bne.n	800d6be <APP_UserEvtRx+0x4a>
          hci_vendor_specific_events_table[i].process((void *)blue_evt->data);
 800d6b8:	686b      	ldr	r3, [r5, #4]
 800d6ba:	4638      	mov	r0, r7
 800d6bc:	4798      	blx	r3
      for (i = 0; i < (sizeof(hci_vendor_specific_events_table)/sizeof(hci_vendor_specific_events_table_type)); i++) {
 800d6be:	3601      	adds	r6, #1
 800d6c0:	2e2b      	cmp	r6, #43	; 0x2b
 800d6c2:	f105 0508 	add.w	r5, r5, #8
 800d6c6:	d1f2      	bne.n	800d6ae <APP_UserEvtRx+0x3a>
 800d6c8:	e7eb      	b.n	800d6a2 <APP_UserEvtRx+0x2e>
 800d6ca:	4d0a      	ldr	r5, [pc, #40]	; (800d6f4 <APP_UserEvtRx+0x80>)
      for (i = 0; i < (sizeof(hci_events_table)/sizeof(hci_events_table_type)); i++) {
 800d6cc:	2600      	movs	r6, #0
          hci_events_table[i].process((void *)event_pckt->data);
 800d6ce:	1cc7      	adds	r7, r0, #3
        if (event_pckt->evt == hci_events_table[i].evt_code) {
 800d6d0:	7862      	ldrb	r2, [r4, #1]
 800d6d2:	882b      	ldrh	r3, [r5, #0]
 800d6d4:	429a      	cmp	r2, r3
 800d6d6:	d102      	bne.n	800d6de <APP_UserEvtRx+0x6a>
          hci_events_table[i].process((void *)event_pckt->data);
 800d6d8:	686b      	ldr	r3, [r5, #4]
 800d6da:	4638      	mov	r0, r7
 800d6dc:	4798      	blx	r3
      for (i = 0; i < (sizeof(hci_events_table)/sizeof(hci_events_table_type)); i++) {
 800d6de:	3601      	adds	r6, #1
 800d6e0:	2e07      	cmp	r6, #7
 800d6e2:	f105 0508 	add.w	r5, r5, #8
 800d6e6:	d1f3      	bne.n	800d6d0 <APP_UserEvtRx+0x5c>
 800d6e8:	e7db      	b.n	800d6a2 <APP_UserEvtRx+0x2e>
 800d6ea:	bf00      	nop
 800d6ec:	0801fda0 	.word	0x0801fda0
 800d6f0:	0801fc48 	.word	0x0801fc48
 800d6f4:	0801fdf0 	.word	0x0801fdf0

0800d6f8 <ClearCustomCommandsList>:
void ClearCustomCommandsList(void) {
 800d6f8:	b538      	push	{r3, r4, r5, lr}
  if(CustomCommands!=NULL) {
 800d6fa:	4c07      	ldr	r4, [pc, #28]	; (800d718 <ClearCustomCommandsList+0x20>)
 800d6fc:	6825      	ldr	r5, [r4, #0]
 800d6fe:	b14d      	cbz	r5, 800d714 <ClearCustomCommandsList+0x1c>
    if(CustomCommands->NextCommand!=NULL) {
 800d700:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800d702:	b108      	cbz	r0, 800d708 <ClearCustomCommandsList+0x10>
      ClearSingleCommand((BLE_ExtCustomCommand_t *)CustomCommands->NextCommand);
 800d704:	f7ff ffaa 	bl	800d65c <ClearSingleCommand>
    BLE_FreeFunction(CustomCommands);
 800d708:	4628      	mov	r0, r5
 800d70a:	f00c f981 	bl	8019a10 <free>
    LastCustomCommand = CustomCommands = NULL;
 800d70e:	2300      	movs	r3, #0
 800d710:	e9c4 3300 	strd	r3, r3, [r4]
}
 800d714:	bd38      	pop	{r3, r4, r5, pc}
 800d716:	bf00      	nop
 800d718:	2000338c 	.word	0x2000338c

0800d71c <AddCustomCommand>:
{
 800d71c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d720:	4606      	mov	r6, r0
 800d722:	460d      	mov	r5, r1
 800d724:	4692      	mov	sl, r2
 800d726:	4699      	mov	r9, r3
  if(strlen(CommandName) > BLE_MANAGER_CUSTOM_COMMAND_MAX_LEGHT) {
 800d728:	f7f6 fddc 	bl	80042e4 <strlen>
 800d72c:	2820      	cmp	r0, #32
{
 800d72e:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  if(strlen(CommandName) > BLE_MANAGER_CUSTOM_COMMAND_MAX_LEGHT) {
 800d730:	4680      	mov	r8, r0
 800d732:	d87d      	bhi.n	800d830 <AddCustomCommand+0x114>
      if(strncmp(StandardExtConfigCommands[Index].CommandString,CommandName,strlen(CommandName)) == 0) {
 800d734:	f8df b1cc 	ldr.w	fp, [pc, #460]	; 800d904 <AddCustomCommand+0x1e8>
 800d738:	2400      	movs	r4, #0
 800d73a:	eb0b 03c4 	add.w	r3, fp, r4, lsl #3
 800d73e:	4642      	mov	r2, r8
 800d740:	68d8      	ldr	r0, [r3, #12]
 800d742:	4631      	mov	r1, r6
 800d744:	f00c ffce 	bl	801a6e4 <strncmp>
    for(Index=((uint8_t)EXT_CONFIG_COM_READ_COMMAND); ((Index<((uint8_t)EXT_CONFIG_COMMAND_NUMBER)) && (Valid==1U)); Index++) {
 800d748:	2c12      	cmp	r4, #18
 800d74a:	d004      	beq.n	800d756 <AddCustomCommand+0x3a>
 800d74c:	3401      	adds	r4, #1
 800d74e:	2800      	cmp	r0, #0
 800d750:	d1f3      	bne.n	800d73a <AddCustomCommand+0x1e>
}
 800d752:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if(Valid) {
 800d756:	2800      	cmp	r0, #0
 800d758:	d0fb      	beq.n	800d752 <AddCustomCommand+0x36>
    tempJSON1 = json_value_init_object();
 800d75a:	f003 f8ad 	bl	80108b8 <json_value_init_object>
 800d75e:	4683      	mov	fp, r0
    tempJSON1_Obj = json_value_get_object(tempJSON1);
 800d760:	f002 fe31 	bl	80103c6 <json_value_get_object>
    json_object_dotset_string(tempJSON1_Obj, "Name", CommandName);
 800d764:	4957      	ldr	r1, [pc, #348]	; (800d8c4 <AddCustomCommand+0x1a8>)
 800d766:	4632      	mov	r2, r6
    tempJSON1_Obj = json_value_get_object(tempJSON1);
 800d768:	4604      	mov	r4, r0
    json_object_dotset_string(tempJSON1_Obj, "Name", CommandName);
 800d76a:	f003 fc8d 	bl	8011088 <json_object_dotset_string>
    switch(CommandType) {
 800d76e:	2d05      	cmp	r5, #5
 800d770:	d809      	bhi.n	800d786 <AddCustomCommand+0x6a>
 800d772:	e8df f005 	tbb	[pc, r5]
 800d776:	5f03      	.short	0x5f03
 800d778:	67656361 	.word	0x67656361
      json_object_dotset_string(tempJSON1_Obj, "Type", "Void");
 800d77c:	4a52      	ldr	r2, [pc, #328]	; (800d8c8 <AddCustomCommand+0x1ac>)
      json_object_dotset_string(tempJSON1_Obj, "Type", "EnumString");
 800d77e:	4953      	ldr	r1, [pc, #332]	; (800d8cc <AddCustomCommand+0x1b0>)
 800d780:	4620      	mov	r0, r4
 800d782:	f003 fc81 	bl	8011088 <json_object_dotset_string>
    if(ShortDesc!=NULL) {
 800d786:	b127      	cbz	r7, 800d792 <AddCustomCommand+0x76>
      json_object_dotset_string(tempJSON1_Obj, "Desc", ShortDesc);
 800d788:	4951      	ldr	r1, [pc, #324]	; (800d8d0 <AddCustomCommand+0x1b4>)
 800d78a:	463a      	mov	r2, r7
 800d78c:	4620      	mov	r0, r4
 800d78e:	f003 fc7b 	bl	8011088 <json_object_dotset_string>
    if(Min!= (int32_t)BLE_MANAGER_CUSTOM_COMMAND_VALUE_NAN) {
 800d792:	4f50      	ldr	r7, [pc, #320]	; (800d8d4 <AddCustomCommand+0x1b8>)
 800d794:	45ba      	cmp	sl, r7
 800d796:	d008      	beq.n	800d7aa <AddCustomCommand+0x8e>
      json_object_dotset_number(tempJSON1_Obj, "Min", (double)Min);
 800d798:	4650      	mov	r0, sl
 800d79a:	f7f6 ff53 	bl	8004644 <__aeabi_i2d>
 800d79e:	ec41 0b10 	vmov	d0, r0, r1
 800d7a2:	494d      	ldr	r1, [pc, #308]	; (800d8d8 <AddCustomCommand+0x1bc>)
 800d7a4:	4620      	mov	r0, r4
 800d7a6:	f003 fc8a 	bl	80110be <json_object_dotset_number>
    if(Max!= (int32_t)BLE_MANAGER_CUSTOM_COMMAND_VALUE_NAN) {
 800d7aa:	45b9      	cmp	r9, r7
 800d7ac:	d008      	beq.n	800d7c0 <AddCustomCommand+0xa4>
      json_object_dotset_number(tempJSON1_Obj, "Max", (double)Max);
 800d7ae:	4648      	mov	r0, r9
 800d7b0:	f7f6 ff48 	bl	8004644 <__aeabi_i2d>
 800d7b4:	ec41 0b10 	vmov	d0, r0, r1
 800d7b8:	4948      	ldr	r1, [pc, #288]	; (800d8dc <AddCustomCommand+0x1c0>)
 800d7ba:	4620      	mov	r0, r4
 800d7bc:	f003 fc7f 	bl	80110be <json_object_dotset_number>
    if((ValidValuesInt!=NULL) && (CommandType==BLE_CUSTOM_COMMAND_ENUM_INTEGER)) {
 800d7c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d7c2:	2b00      	cmp	r3, #0
 800d7c4:	d048      	beq.n	800d858 <AddCustomCommand+0x13c>
 800d7c6:	2d04      	cmp	r5, #4
 800d7c8:	d146      	bne.n	800d858 <AddCustomCommand+0x13c>
      JSON_Value *tempJSONarray = json_value_init_object();
 800d7ca:	f003 f875 	bl	80108b8 <json_value_init_object>
 800d7ce:	4681      	mov	r9, r0
      JSON_Array *JSON_SensorArray2 = json_value_get_array(tempJSONarray);
 800d7d0:	f002 fe28 	bl	8010424 <json_value_get_array>
      json_object_dotset_value(tempJSON1_Obj, "IntegerValues", json_value_init_array());
 800d7d4:	f003 f890 	bl	80108f8 <json_value_init_array>
 800d7d8:	4941      	ldr	r1, [pc, #260]	; (800d8e0 <AddCustomCommand+0x1c4>)
 800d7da:	4602      	mov	r2, r0
 800d7dc:	4620      	mov	r0, r4
 800d7de:	f003 fc06 	bl	8010fee <json_object_dotset_value>
      JSON_SensorArray2 = json_object_dotget_array(tempJSON1_Obj, "IntegerValues");
 800d7e2:	4620      	mov	r0, r4
 800d7e4:	493e      	ldr	r1, [pc, #248]	; (800d8e0 <AddCustomCommand+0x1c4>)
 800d7e6:	f002 fe25 	bl	8010434 <json_object_dotget_array>
 800d7ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d7ec:	4604      	mov	r4, r0
      while(ValidValuesInt[counter]!=(int32_t)BLE_MANAGER_CUSTOM_COMMAND_VALUE_NAN) {
 800d7ee:	f1a3 0804 	sub.w	r8, r3, #4
 800d7f2:	f858 0f04 	ldr.w	r0, [r8, #4]!
 800d7f6:	42b8      	cmp	r0, r7
 800d7f8:	d126      	bne.n	800d848 <AddCustomCommand+0x12c>
      json_value_free(tempJSONarray);
 800d7fa:	4648      	mov	r0, r9
      json_value_free(tempJSONarray);
 800d7fc:	f002 ffb8 	bl	8010770 <json_value_free>
    if(CustomCommands==NULL) {
 800d800:	f8df 8104 	ldr.w	r8, [pc, #260]	; 800d908 <AddCustomCommand+0x1ec>
    json_array_append_value(JSON_SensorArray,tempJSON1);
 800d804:	980d      	ldr	r0, [sp, #52]	; 0x34
 800d806:	4659      	mov	r1, fp
 800d808:	f003 fb8a 	bl	8010f20 <json_array_append_value>
    if(CustomCommands==NULL) {
 800d80c:	f8d8 3000 	ldr.w	r3, [r8]
 800d810:	4647      	mov	r7, r8
 800d812:	2b00      	cmp	r3, #0
 800d814:	d14d      	bne.n	800d8b2 <AddCustomCommand+0x196>
      CustomCommands=(BLE_ExtCustomCommand_t*)BLE_MallocFunction(sizeof(BLE_ExtCustomCommand_t));
 800d816:	2028      	movs	r0, #40	; 0x28
 800d818:	f00c f8f2 	bl	8019a00 <malloc>
 800d81c:	f8c8 0000 	str.w	r0, [r8]
      if(CustomCommands==NULL) {
 800d820:	2800      	cmp	r0, #0
 800d822:	d13a      	bne.n	800d89a <AddCustomCommand+0x17e>
        BLE_MANAGER_PRINTF("Errror: Mem calloc error: %d@%s\r\n",__LINE__,__FILE__);
 800d824:	4a2f      	ldr	r2, [pc, #188]	; (800d8e4 <AddCustomCommand+0x1c8>)
 800d826:	4830      	ldr	r0, [pc, #192]	; (800d8e8 <AddCustomCommand+0x1cc>)
 800d828:	f240 5181 	movw	r1, #1409	; 0x581
 800d82c:	f00c fe3c 	bl	801a4a8 <iprintf>
    Valid=0U;
 800d830:	2000      	movs	r0, #0
 800d832:	e78e      	b.n	800d752 <AddCustomCommand+0x36>
      json_object_dotset_string(tempJSON1_Obj, "Type", "Integer");
 800d834:	4a2d      	ldr	r2, [pc, #180]	; (800d8ec <AddCustomCommand+0x1d0>)
 800d836:	e7a2      	b.n	800d77e <AddCustomCommand+0x62>
      json_object_dotset_string(tempJSON1_Obj, "Type", "Boolean");
 800d838:	4a2d      	ldr	r2, [pc, #180]	; (800d8f0 <AddCustomCommand+0x1d4>)
 800d83a:	e7a0      	b.n	800d77e <AddCustomCommand+0x62>
      json_object_dotset_string(tempJSON1_Obj, "Type", "String");
 800d83c:	4a2d      	ldr	r2, [pc, #180]	; (800d8f4 <AddCustomCommand+0x1d8>)
 800d83e:	e79e      	b.n	800d77e <AddCustomCommand+0x62>
      json_object_dotset_string(tempJSON1_Obj, "Type", "EnumInteger");
 800d840:	4a2d      	ldr	r2, [pc, #180]	; (800d8f8 <AddCustomCommand+0x1dc>)
 800d842:	e79c      	b.n	800d77e <AddCustomCommand+0x62>
      json_object_dotset_string(tempJSON1_Obj, "Type", "EnumString");
 800d844:	4a2d      	ldr	r2, [pc, #180]	; (800d8fc <AddCustomCommand+0x1e0>)
 800d846:	e79a      	b.n	800d77e <AddCustomCommand+0x62>
        json_array_append_number(JSON_SensorArray2, (double)(ValidValuesInt[counter]));
 800d848:	f7f6 fefc 	bl	8004644 <__aeabi_i2d>
 800d84c:	ec41 0b10 	vmov	d0, r0, r1
 800d850:	4620      	mov	r0, r4
 800d852:	f003 fb86 	bl	8010f62 <json_array_append_number>
        counter++;
 800d856:	e7cc      	b.n	800d7f2 <AddCustomCommand+0xd6>
    if((ValidValuesString!=NULL) && (CommandType==BLE_CUSTOM_COMMAND_ENUM_STRING)) {
 800d858:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d85a:	2b00      	cmp	r3, #0
 800d85c:	d0d0      	beq.n	800d800 <AddCustomCommand+0xe4>
 800d85e:	2d05      	cmp	r5, #5
 800d860:	d1ce      	bne.n	800d800 <AddCustomCommand+0xe4>
      JSON_Value *tempJSONarray = json_value_init_object();
 800d862:	f003 f829 	bl	80108b8 <json_value_init_object>
 800d866:	4607      	mov	r7, r0
      JSON_Array *JSON_SensorArray2 = json_value_get_array(tempJSONarray);
 800d868:	f002 fddc 	bl	8010424 <json_value_get_array>
      json_object_dotset_value(tempJSON1_Obj, "StringValues", json_value_init_array());
 800d86c:	f003 f844 	bl	80108f8 <json_value_init_array>
 800d870:	4923      	ldr	r1, [pc, #140]	; (800d900 <AddCustomCommand+0x1e4>)
 800d872:	4602      	mov	r2, r0
 800d874:	4620      	mov	r0, r4
 800d876:	f003 fbba 	bl	8010fee <json_object_dotset_value>
      JSON_SensorArray2 = json_object_dotget_array(tempJSON1_Obj, "StringValues");
 800d87a:	4620      	mov	r0, r4
 800d87c:	4920      	ldr	r1, [pc, #128]	; (800d900 <AddCustomCommand+0x1e4>)
 800d87e:	f002 fdd9 	bl	8010434 <json_object_dotget_array>
 800d882:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d884:	4680      	mov	r8, r0
      while(ValidValuesString[counter]!=NULL) {
 800d886:	1f1c      	subs	r4, r3, #4
 800d888:	f854 1f04 	ldr.w	r1, [r4, #4]!
 800d88c:	b909      	cbnz	r1, 800d892 <AddCustomCommand+0x176>
      json_value_free(tempJSONarray);
 800d88e:	4638      	mov	r0, r7
 800d890:	e7b4      	b.n	800d7fc <AddCustomCommand+0xe0>
        json_array_append_string(JSON_SensorArray2, (char const*)ValidValuesString[counter]);
 800d892:	4640      	mov	r0, r8
 800d894:	f003 fb4d 	bl	8010f32 <json_array_append_string>
        counter++;
 800d898:	e7f6      	b.n	800d888 <AddCustomCommand+0x16c>
      LastCustomCommand = CustomCommands;
 800d89a:	6078      	str	r0, [r7, #4]
    LastCustomCommand->CommandType = CommandType;
 800d89c:	687b      	ldr	r3, [r7, #4]
    sprintf(LastCustomCommand->CommandName,"%s",CommandName);
 800d89e:	4631      	mov	r1, r6
    LastCustomCommand->CommandType = CommandType;
 800d8a0:	f883 5020 	strb.w	r5, [r3, #32]
    sprintf(LastCustomCommand->CommandName,"%s",CommandName);
 800d8a4:	4618      	mov	r0, r3
 800d8a6:	f00c ff15 	bl	801a6d4 <strcpy>
    LastCustomCommand->NextCommand = NULL;
 800d8aa:	2200      	movs	r2, #0
 800d8ac:	6242      	str	r2, [r0, #36]	; 0x24
 800d8ae:	2001      	movs	r0, #1
 800d8b0:	e74f      	b.n	800d752 <AddCustomCommand+0x36>
      LastCustomCommand->NextCommand = (void *) BLE_MallocFunction( sizeof(BLE_ExtCustomCommand_t));
 800d8b2:	2028      	movs	r0, #40	; 0x28
 800d8b4:	f8d8 4004 	ldr.w	r4, [r8, #4]
 800d8b8:	f00c f8a2 	bl	8019a00 <malloc>
 800d8bc:	6260      	str	r0, [r4, #36]	; 0x24
      LastCustomCommand = (BLE_ExtCustomCommand_t*) LastCustomCommand->NextCommand;
 800d8be:	f8c8 0004 	str.w	r0, [r8, #4]
 800d8c2:	e7eb      	b.n	800d89c <AddCustomCommand+0x180>
 800d8c4:	08021937 	.word	0x08021937
 800d8c8:	080212b6 	.word	0x080212b6
 800d8cc:	0802146c 	.word	0x0802146c
 800d8d0:	080212da 	.word	0x080212da
 800d8d4:	deadbeef 	.word	0xdeadbeef
 800d8d8:	080212df 	.word	0x080212df
 800d8dc:	080212e3 	.word	0x080212e3
 800d8e0:	080212e7 	.word	0x080212e7
 800d8e4:	08021302 	.word	0x08021302
 800d8e8:	0802137b 	.word	0x0802137b
 800d8ec:	080223c0 	.word	0x080223c0
 800d8f0:	080212bb 	.word	0x080212bb
 800d8f4:	080223ed 	.word	0x080223ed
 800d8f8:	080212c3 	.word	0x080212c3
 800d8fc:	080212cf 	.word	0x080212cf
 800d900:	080212f5 	.word	0x080212f5
 800d904:	0801fe28 	.word	0x0801fe28
 800d908:	2000338c 	.word	0x2000338c

0800d90c <safe_aci_gatt_update_char_value>:
{
 800d90c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if (breath==0){
 800d90e:	4c09      	ldr	r4, [pc, #36]	; (800d934 <safe_aci_gatt_update_char_value+0x28>)
 800d910:	68a5      	ldr	r5, [r4, #8]
 800d912:	b96d      	cbnz	r5, 800d930 <safe_aci_gatt_update_char_value+0x24>
    ret = aci_gatt_update_char_value(BleCharPointer->Service_Handle,BleCharPointer->attr_handle,charValOffset,charValueLen,charValue);
 800d914:	9300      	str	r3, [sp, #0]
 800d916:	4613      	mov	r3, r2
 800d918:	460a      	mov	r2, r1
 800d91a:	8b41      	ldrh	r1, [r0, #26]
 800d91c:	8b80      	ldrh	r0, [r0, #28]
 800d91e:	f7fe faad 	bl	800be7c <aci_gatt_update_char_value>
    if (ret != BLE_STATUS_SUCCESS){
 800d922:	b118      	cbz	r0, 800d92c <safe_aci_gatt_update_char_value+0x20>
      if(ret==BLE_STATUS_INSUFFICIENT_RESOURCES){
 800d924:	2864      	cmp	r0, #100	; 0x64
 800d926:	d101      	bne.n	800d92c <safe_aci_gatt_update_char_value+0x20>
        breath = 1;
 800d928:	2301      	movs	r3, #1
 800d92a:	60a3      	str	r3, [r4, #8]
}
 800d92c:	b003      	add	sp, #12
 800d92e:	bd30      	pop	{r4, r5, pc}
  tBleStatus ret = BLE_STATUS_INSUFFICIENT_RESOURCES;
 800d930:	2064      	movs	r0, #100	; 0x64
 800d932:	e7fb      	b.n	800d92c <safe_aci_gatt_update_char_value+0x20>
 800d934:	2000338c 	.word	0x2000338c

0800d938 <Read_Request_StdErr>:
  ret = ACI_GATT_UPDATE_CHAR_VALUE(BleCharPointer, 0, LastStderrLen , LastStderrBuffer);
 800d938:	4a03      	ldr	r2, [pc, #12]	; (800d948 <Read_Request_StdErr+0x10>)
 800d93a:	2100      	movs	r1, #0
 800d93c:	f102 030c 	add.w	r3, r2, #12
 800d940:	f892 20a7 	ldrb.w	r2, [r2, #167]	; 0xa7
 800d944:	f7ff bfe2 	b.w	800d90c <safe_aci_gatt_update_char_value>
 800d948:	2000338c 	.word	0x2000338c

0800d94c <aci_gatt_tx_pool_available_event>:
  breath=0;
 800d94c:	4b03      	ldr	r3, [pc, #12]	; (800d95c <aci_gatt_tx_pool_available_event+0x10>)
 800d94e:	2200      	movs	r2, #0
 800d950:	609a      	str	r2, [r3, #8]
  if(CustomAciGattTxPoolAvailableEvent != NULL) {
 800d952:	4b03      	ldr	r3, [pc, #12]	; (800d960 <aci_gatt_tx_pool_available_event+0x14>)
 800d954:	681b      	ldr	r3, [r3, #0]
 800d956:	b103      	cbz	r3, 800d95a <aci_gatt_tx_pool_available_event+0xe>
    CustomAciGattTxPoolAvailableEvent();
 800d958:	4718      	bx	r3
}
 800d95a:	4770      	bx	lr
 800d95c:	2000338c 	.word	0x2000338c
 800d960:	200099d8 	.word	0x200099d8

0800d964 <Stderr_Update>:
{
 800d964:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  DataToSend = (length>MaxBLECharLen) ?  MaxBLECharLen : length;
 800d968:	4c24      	ldr	r4, [pc, #144]	; (800d9fc <Stderr_Update+0x98>)
 800d96a:	f894 50a8 	ldrb.w	r5, [r4, #168]	; 0xa8
 800d96e:	428d      	cmp	r5, r1
 800d970:	bf28      	it	cs
 800d972:	460d      	movcs	r5, r1
{
 800d974:	4681      	mov	r9, r0
  memcpy(LastStderrBuffer,data,DataToSend);
 800d976:	462a      	mov	r2, r5
{
 800d978:	4688      	mov	r8, r1
  memcpy(LastStderrBuffer,data,DataToSend);
 800d97a:	4601      	mov	r1, r0
 800d97c:	f104 000c 	add.w	r0, r4, #12
 800d980:	f00c f84e 	bl	8019a20 <memcpy>
  if (ACI_GATT_UPDATE_CHAR_VALUE(&BleCharStdErr, 0, length , data) != BLE_STATUS_SUCCESS) {
 800d984:	464b      	mov	r3, r9
 800d986:	462a      	mov	r2, r5
 800d988:	2100      	movs	r1, #0
 800d98a:	f104 00ac 	add.w	r0, r4, #172	; 0xac
  LastStderrLen = DataToSend;
 800d98e:	f884 50a7 	strb.w	r5, [r4, #167]	; 0xa7
  if (ACI_GATT_UPDATE_CHAR_VALUE(&BleCharStdErr, 0, length , data) != BLE_STATUS_SUCCESS) {
 800d992:	f7ff ffbb 	bl	800d90c <safe_aci_gatt_update_char_value>
 800d996:	4607      	mov	r7, r0
 800d998:	bb40      	cbnz	r0, 800d9ec <Stderr_Update+0x88>
  Offset = MaxBLECharLen;
 800d99a:	f894 50a8 	ldrb.w	r5, [r4, #168]	; 0xa8
    memcpy(LastStderrBuffer,data+Offset,DataToSend);
 800d99e:	f104 0a0c 	add.w	sl, r4, #12
  if (ACI_GATT_UPDATE_CHAR_VALUE(&BleCharStdErr, 0, length , data) != BLE_STATUS_SUCCESS) {
 800d9a2:	f104 0bac 	add.w	fp, r4, #172	; 0xac
  for(; Offset<length; Offset +=MaxBLECharLen){
 800d9a6:	4545      	cmp	r5, r8
 800d9a8:	d224      	bcs.n	800d9f4 <Stderr_Update+0x90>
    BLE_MANAGER_DELAY(20);
 800d9aa:	2014      	movs	r0, #20
 800d9ac:	f006 fb28 	bl	8014000 <HAL_Delay>
    DataToSend = (DataToSend>MaxBLECharLen) ?  MaxBLECharLen : DataToSend;
 800d9b0:	f894 60a8 	ldrb.w	r6, [r4, #168]	; 0xa8
    DataToSend = (length-Offset);
 800d9b4:	eba8 0205 	sub.w	r2, r8, r5
 800d9b8:	b2d2      	uxtb	r2, r2
    DataToSend = (DataToSend>MaxBLECharLen) ?  MaxBLECharLen : DataToSend;
 800d9ba:	4296      	cmp	r6, r2
 800d9bc:	bf28      	it	cs
 800d9be:	4616      	movcs	r6, r2
    memcpy(LastStderrBuffer,data+Offset,DataToSend);
 800d9c0:	eb09 0305 	add.w	r3, r9, r5
 800d9c4:	4619      	mov	r1, r3
 800d9c6:	4632      	mov	r2, r6
 800d9c8:	4650      	mov	r0, sl
 800d9ca:	9301      	str	r3, [sp, #4]
 800d9cc:	f00c f828 	bl	8019a20 <memcpy>
  if (ACI_GATT_UPDATE_CHAR_VALUE(&BleCharStdErr, 0, length , data) != BLE_STATUS_SUCCESS) {
 800d9d0:	9b01      	ldr	r3, [sp, #4]
    LastStderrLen = DataToSend;
 800d9d2:	f884 60a7 	strb.w	r6, [r4, #167]	; 0xa7
  if (ACI_GATT_UPDATE_CHAR_VALUE(&BleCharStdErr, 0, length , data) != BLE_STATUS_SUCCESS) {
 800d9d6:	4632      	mov	r2, r6
 800d9d8:	2100      	movs	r1, #0
 800d9da:	4658      	mov	r0, fp
 800d9dc:	f7ff ff96 	bl	800d90c <safe_aci_gatt_update_char_value>
 800d9e0:	b920      	cbnz	r0, 800d9ec <Stderr_Update+0x88>
  for(; Offset<length; Offset +=MaxBLECharLen){
 800d9e2:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
 800d9e6:	441d      	add	r5, r3
 800d9e8:	b2ed      	uxtb	r5, r5
 800d9ea:	e7dc      	b.n	800d9a6 <Stderr_Update+0x42>
    BLE_MANAGER_PRINTF("Error: Updating Stdout Char\r\n");
 800d9ec:	4804      	ldr	r0, [pc, #16]	; (800da00 <Stderr_Update+0x9c>)
 800d9ee:	f00c fde1 	bl	801a5b4 <puts>
    return BLE_STATUS_ERROR;
 800d9f2:	2747      	movs	r7, #71	; 0x47
}
 800d9f4:	4638      	mov	r0, r7
 800d9f6:	b003      	add	sp, #12
 800d9f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d9fc:	2000338c 	.word	0x2000338c
 800da00:	0802147e 	.word	0x0802147e

0800da04 <Read_Request_Term>:
{
 800da04:	b508      	push	{r3, lr}
  ret = ACI_GATT_UPDATE_CHAR_VALUE(BleCharPointer, 0, LastTermLen , LastTermBuffer);
 800da06:	4a0f      	ldr	r2, [pc, #60]	; (800da44 <Read_Request_Term+0x40>)
 800da08:	2100      	movs	r1, #0
 800da0a:	f102 03d8 	add.w	r3, r2, #216	; 0xd8
 800da0e:	f892 2173 	ldrb.w	r2, [r2, #371]	; 0x173
 800da12:	f7ff ff7b 	bl	800d90c <safe_aci_gatt_update_char_value>
  if (ret != BLE_STATUS_SUCCESS) {
 800da16:	b1a0      	cbz	r0, 800da42 <Read_Request_Term+0x3e>
    if(BLE_StdErr_Service==BLE_SERV_ENABLE){
 800da18:	4b0b      	ldr	r3, [pc, #44]	; (800da48 <Read_Request_Term+0x44>)
 800da1a:	781b      	ldrb	r3, [r3, #0]
 800da1c:	2b01      	cmp	r3, #1
 800da1e:	d10b      	bne.n	800da38 <Read_Request_Term+0x34>
      BytesToWrite = (uint8_t)sprintf((char *)BufferToWrite, "Error Updating Stdout Char\n");
 800da20:	490a      	ldr	r1, [pc, #40]	; (800da4c <Read_Request_Term+0x48>)
 800da22:	480b      	ldr	r0, [pc, #44]	; (800da50 <Read_Request_Term+0x4c>)
 800da24:	f00c fe56 	bl	801a6d4 <strcpy>
 800da28:	4b0a      	ldr	r3, [pc, #40]	; (800da54 <Read_Request_Term+0x50>)
      Stderr_Update(BufferToWrite,BytesToWrite);
 800da2a:	4809      	ldr	r0, [pc, #36]	; (800da50 <Read_Request_Term+0x4c>)
      BytesToWrite = (uint8_t)sprintf((char *)BufferToWrite, "Error Updating Stdout Char\n");
 800da2c:	211b      	movs	r1, #27
 800da2e:	7019      	strb	r1, [r3, #0]
}
 800da30:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      Stderr_Update(BufferToWrite,BytesToWrite);
 800da34:	f7ff bf96 	b.w	800d964 <Stderr_Update>
}
 800da38:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      BLE_MANAGER_PRINTF("Error: Updating Stdout Char\r\n");
 800da3c:	4806      	ldr	r0, [pc, #24]	; (800da58 <Read_Request_Term+0x54>)
 800da3e:	f00c bdb9 	b.w	801a5b4 <puts>
}
 800da42:	bd08      	pop	{r3, pc}
 800da44:	2000338c 	.word	0x2000338c
 800da48:	200099f8 	.word	0x200099f8
 800da4c:	0802149b 	.word	0x0802149b
 800da50:	20009a30 	.word	0x20009a30
 800da54:	20009b3d 	.word	0x20009b3d
 800da58:	0802147e 	.word	0x0802147e

0800da5c <Term_Update>:
{
 800da5c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  DataToSend = (length>MaxBLECharLen) ?  MaxBLECharLen : length;
 800da60:	4c24      	ldr	r4, [pc, #144]	; (800daf4 <Term_Update+0x98>)
 800da62:	f894 50a8 	ldrb.w	r5, [r4, #168]	; 0xa8
 800da66:	428d      	cmp	r5, r1
 800da68:	bf28      	it	cs
 800da6a:	460d      	movcs	r5, r1
{
 800da6c:	4681      	mov	r9, r0
  memcpy(LastTermBuffer,data,DataToSend);
 800da6e:	462a      	mov	r2, r5
{
 800da70:	4688      	mov	r8, r1
  memcpy(LastTermBuffer,data,DataToSend);
 800da72:	4601      	mov	r1, r0
 800da74:	f104 00d8 	add.w	r0, r4, #216	; 0xd8
 800da78:	f00b ffd2 	bl	8019a20 <memcpy>
  if (ACI_GATT_UPDATE_CHAR_VALUE(&BleCharStdOut, 0, length , data) != BLE_STATUS_SUCCESS) {
 800da7c:	464b      	mov	r3, r9
 800da7e:	462a      	mov	r2, r5
 800da80:	2100      	movs	r1, #0
 800da82:	f504 70ba 	add.w	r0, r4, #372	; 0x174
  LastTermLen = DataToSend;
 800da86:	f884 5173 	strb.w	r5, [r4, #371]	; 0x173
  if (ACI_GATT_UPDATE_CHAR_VALUE(&BleCharStdOut, 0, length , data) != BLE_STATUS_SUCCESS) {
 800da8a:	f7ff ff3f 	bl	800d90c <safe_aci_gatt_update_char_value>
 800da8e:	4607      	mov	r7, r0
 800da90:	bb40      	cbnz	r0, 800dae4 <Term_Update+0x88>
  Offset = MaxBLECharLen;
 800da92:	f894 50a8 	ldrb.w	r5, [r4, #168]	; 0xa8
    memcpy(LastTermBuffer,data+Offset,DataToSend);
 800da96:	f104 0ad8 	add.w	sl, r4, #216	; 0xd8
  if (ACI_GATT_UPDATE_CHAR_VALUE(&BleCharStdOut, 0, length , data) != BLE_STATUS_SUCCESS) {
 800da9a:	f504 7bba 	add.w	fp, r4, #372	; 0x174
  for(; Offset<length; Offset +=MaxBLECharLen){
 800da9e:	4545      	cmp	r5, r8
 800daa0:	d224      	bcs.n	800daec <Term_Update+0x90>
    BLE_MANAGER_DELAY(20);
 800daa2:	2014      	movs	r0, #20
 800daa4:	f006 faac 	bl	8014000 <HAL_Delay>
    DataToSend = (DataToSend>MaxBLECharLen) ?  MaxBLECharLen : DataToSend;
 800daa8:	f894 60a8 	ldrb.w	r6, [r4, #168]	; 0xa8
    DataToSend = (length-Offset);
 800daac:	eba8 0205 	sub.w	r2, r8, r5
 800dab0:	b2d2      	uxtb	r2, r2
    DataToSend = (DataToSend>MaxBLECharLen) ?  MaxBLECharLen : DataToSend;
 800dab2:	4296      	cmp	r6, r2
 800dab4:	bf28      	it	cs
 800dab6:	4616      	movcs	r6, r2
    memcpy(LastTermBuffer,data+Offset,DataToSend);
 800dab8:	eb09 0305 	add.w	r3, r9, r5
 800dabc:	4619      	mov	r1, r3
 800dabe:	4632      	mov	r2, r6
 800dac0:	4650      	mov	r0, sl
 800dac2:	9301      	str	r3, [sp, #4]
 800dac4:	f00b ffac 	bl	8019a20 <memcpy>
  if (ACI_GATT_UPDATE_CHAR_VALUE(&BleCharStdOut, 0, length , data) != BLE_STATUS_SUCCESS) {
 800dac8:	9b01      	ldr	r3, [sp, #4]
    LastTermLen = DataToSend;
 800daca:	f884 6173 	strb.w	r6, [r4, #371]	; 0x173
  if (ACI_GATT_UPDATE_CHAR_VALUE(&BleCharStdOut, 0, length , data) != BLE_STATUS_SUCCESS) {
 800dace:	4632      	mov	r2, r6
 800dad0:	2100      	movs	r1, #0
 800dad2:	4658      	mov	r0, fp
 800dad4:	f7ff ff1a 	bl	800d90c <safe_aci_gatt_update_char_value>
 800dad8:	b920      	cbnz	r0, 800dae4 <Term_Update+0x88>
  for(; Offset<length; Offset +=MaxBLECharLen){
 800dada:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
 800dade:	441d      	add	r5, r3
 800dae0:	b2ed      	uxtb	r5, r5
 800dae2:	e7dc      	b.n	800da9e <Term_Update+0x42>
    BLE_MANAGER_PRINTF("Error: Updating Stdout Char\r\n");
 800dae4:	4804      	ldr	r0, [pc, #16]	; (800daf8 <Term_Update+0x9c>)
 800dae6:	f00c fd65 	bl	801a5b4 <puts>
    return BLE_STATUS_ERROR;
 800daea:	2747      	movs	r7, #71	; 0x47
}
 800daec:	4638      	mov	r0, r7
 800daee:	b003      	add	sp, #12
 800daf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800daf4:	2000338c 	.word	0x2000338c
 800daf8:	0802147e 	.word	0x0802147e

0800dafc <Write_Request_Term>:
{
 800dafc:	b513      	push	{r0, r1, r4, lr}
 800dafe:	4619      	mov	r1, r3
  if(CustomDebugConsoleParsingCallback!=NULL) {
 800db00:	4b08      	ldr	r3, [pc, #32]	; (800db24 <Write_Request_Term+0x28>)
{
 800db02:	9c04      	ldr	r4, [sp, #16]
  if(CustomDebugConsoleParsingCallback!=NULL) {
 800db04:	681b      	ldr	r3, [r3, #0]
 800db06:	b92b      	cbnz	r3, 800db14 <Write_Request_Term+0x18>
    Term_Update(att_data,data_length);
 800db08:	4620      	mov	r0, r4
}
 800db0a:	b002      	add	sp, #8
 800db0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Term_Update(att_data,data_length);
 800db10:	f7ff bfa4 	b.w	800da5c <Term_Update>
    SendBackData = CustomDebugConsoleParsingCallback(att_data,data_length);
 800db14:	4620      	mov	r0, r4
 800db16:	9101      	str	r1, [sp, #4]
 800db18:	4798      	blx	r3
  if(SendBackData) {
 800db1a:	9901      	ldr	r1, [sp, #4]
 800db1c:	2800      	cmp	r0, #0
 800db1e:	d1f3      	bne.n	800db08 <Write_Request_Term+0xc>
}
 800db20:	b002      	add	sp, #8
 800db22:	bd10      	pop	{r4, pc}
 800db24:	200099f4 	.word	0x200099f4

0800db28 <setConnectable>:
{
 800db28:	b5f0      	push	{r4, r5, r6, r7, lr}
  BlueNRG_StackValue.BoardName[0],
 800db2a:	4c3b      	ldr	r4, [pc, #236]	; (800dc18 <setConnectable+0xf0>)
{
 800db2c:	b093      	sub	sp, #76	; 0x4c
  uint8_t local_name[8] = {AD_TYPE_COMPLETE_LOCAL_NAME,
 800db2e:	2309      	movs	r3, #9
 800db30:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  BlueNRG_StackValue.BoardName[0],
 800db34:	7b63      	ldrb	r3, [r4, #13]
  uint8_t local_name[8] = {AD_TYPE_COMPLETE_LOCAL_NAME,
 800db36:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
  uint8_t manuf_data[ADVERTIZE_DATA_LENGHT] = {
 800db3a:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
 800db3e:	230f      	movs	r3, #15
 800db40:	f88d 3035 	strb.w	r3, [sp, #53]	; 0x35
 800db44:	f243 03ff 	movw	r3, #12543	; 0x30ff
 800db48:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 800db4c:	4b33      	ldr	r3, [pc, #204]	; (800dc1c <setConnectable+0xf4>)
 800db4e:	930e      	str	r3, [sp, #56]	; 0x38
 800db50:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 800db54:	f88d 303f 	strb.w	r3, [sp, #63]	; 0x3f
 800db58:	6a23      	ldr	r3, [r4, #32]
  uint8_t local_name[8] = {AD_TYPE_COMPLETE_LOCAL_NAME,
 800db5a:	89e7      	ldrh	r7, [r4, #14]
  BlueNRG_StackValue.BoardName[3],
 800db5c:	7c25      	ldrb	r5, [r4, #16]
  BlueNRG_StackValue.BoardName[4],
 800db5e:	7c60      	ldrb	r0, [r4, #17]
  uint8_t local_name[8] = {AD_TYPE_COMPLETE_LOCAL_NAME,
 800db60:	f8ad 7026 	strh.w	r7, [sp, #38]	; 0x26
 800db64:	ba1b      	rev	r3, r3
 800db66:	6927      	ldr	r7, [r4, #16]
  BlueNRG_StackValue.BoardName[1],
 800db68:	f894 c00e 	ldrb.w	ip, [r4, #14]
  BlueNRG_StackValue.BoardName[5],
 800db6c:	7ca1      	ldrb	r1, [r4, #18]
  BlueNRG_StackValue.BoardName[6]};
 800db6e:	7ce2      	ldrb	r2, [r4, #19]
  BlueNRG_StackValue.BoardName[2],
 800db70:	7be6      	ldrb	r6, [r4, #15]
  uint8_t local_name[8] = {AD_TYPE_COMPLETE_LOCAL_NAME,
 800db72:	970a      	str	r7, [sp, #40]	; 0x28
  uint8_t manuf_data[ADVERTIZE_DATA_LENGHT] = {
 800db74:	f88d 5031 	strb.w	r5, [sp, #49]	; 0x31
 800db78:	f88d 0032 	strb.w	r0, [sp, #50]	; 0x32
 800db7c:	2500      	movs	r5, #0
 800db7e:	9310      	str	r3, [sp, #64]	; 0x40
  BLE_SetCustomAdvertizeData(manuf_data);
 800db80:	a80b      	add	r0, sp, #44	; 0x2c
  uint8_t manuf_data[ADVERTIZE_DATA_LENGHT] = {
 800db82:	7fe3      	ldrb	r3, [r4, #31]
 800db84:	f88d c02f 	strb.w	ip, [sp, #47]	; 0x2f
 800db88:	f640 1708 	movw	r7, #2312	; 0x908
 800db8c:	f88d 1033 	strb.w	r1, [sp, #51]	; 0x33
 800db90:	f88d 2034 	strb.w	r2, [sp, #52]	; 0x34
 800db94:	f8ad 702c 	strh.w	r7, [sp, #44]	; 0x2c
 800db98:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
 800db9c:	f8ad 503c 	strh.w	r5, [sp, #60]	; 0x3c
 800dba0:	f88d 503e 	strb.w	r5, [sp, #62]	; 0x3e
 800dba4:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
  BLE_SetCustomAdvertizeData(manuf_data);
 800dba8:	f004 fbf8 	bl	801239c <BLE_SetCustomAdvertizeData>
  RetStatus = hci_le_set_scan_response_data(0,NULL);
 800dbac:	4629      	mov	r1, r5
 800dbae:	4628      	mov	r0, r5
 800dbb0:	f7fd fe3c 	bl	800b82c <hci_le_set_scan_response_data>
  if(RetStatus !=BLE_STATUS_SUCCESS) {
 800dbb4:	4601      	mov	r1, r0
 800dbb6:	b118      	cbz	r0, 800dbc0 <setConnectable+0x98>
    BLE_MANAGER_PRINTF("Error: hci_le_set_scan_response_data [%x]\r\n",RetStatus);
 800dbb8:	4819      	ldr	r0, [pc, #100]	; (800dc20 <setConnectable+0xf8>)
    BLE_MANAGER_PRINTF("Error: aci_gap_update_adv_data [%x]\r\n",RetStatus);
 800dbba:	f00c fc75 	bl	801a4a8 <iprintf>
 800dbbe:	e014      	b.n	800dbea <setConnectable+0xc2>
  if(BlueNRG_StackValue.AdvertisingFilter == ((uint8_t)NO_WHITE_LIST_USE)) {
 800dbc0:	7f62      	ldrb	r2, [r4, #29]
 800dbc2:	b9a2      	cbnz	r2, 800dbee <setConnectable+0xc6>
    RetStatus = aci_gap_set_discoverable(ADV_IND, 0,0,
 800dbc4:	ab09      	add	r3, sp, #36	; 0x24
 800dbc6:	9302      	str	r3, [sp, #8]
 800dbc8:	2308      	movs	r3, #8
 800dbca:	e9cd 2300 	strd	r2, r3, [sp]
 800dbce:	4611      	mov	r1, r2
 800dbd0:	e9cd 2205 	strd	r2, r2, [sp, #20]
 800dbd4:	e9cd 2203 	strd	r2, r2, [sp, #12]
 800dbd8:	2301      	movs	r3, #1
 800dbda:	f7fd fe79 	bl	800b8d0 <aci_gap_set_discoverable>
    if(RetStatus !=BLE_STATUS_SUCCESS) {
 800dbde:	4601      	mov	r1, r0
 800dbe0:	b170      	cbz	r0, 800dc00 <setConnectable+0xd8>
      BLE_MANAGER_PRINTF("Error: aci_gap_set_discoverable [%x] Filter=%x\r\n",RetStatus,BlueNRG_StackValue.AdvertisingFilter);
 800dbe2:	7f62      	ldrb	r2, [r4, #29]
 800dbe4:	480f      	ldr	r0, [pc, #60]	; (800dc24 <setConnectable+0xfc>)
      BLE_MANAGER_PRINTF("Error: aci_gap_set_undirected_connectable [%x] Filter=%x\r\n",RetStatus,BlueNRG_StackValue.AdvertisingFilter);
 800dbe6:	f00c fc5f 	bl	801a4a8 <iprintf>
}
 800dbea:	b013      	add	sp, #76	; 0x4c
 800dbec:	bdf0      	pop	{r4, r5, r6, r7, pc}
    RetStatus = aci_gap_set_undirected_connectable(0,0,RANDOM_ADDR, BlueNRG_StackValue.AdvertisingFilter);
 800dbee:	4613      	mov	r3, r2
 800dbf0:	2201      	movs	r2, #1
 800dbf2:	f7fd ff6f 	bl	800bad4 <aci_gap_set_undirected_connectable>
    if(RetStatus !=BLE_STATUS_SUCCESS) {
 800dbf6:	4601      	mov	r1, r0
 800dbf8:	b110      	cbz	r0, 800dc00 <setConnectable+0xd8>
      BLE_MANAGER_PRINTF("Error: aci_gap_set_undirected_connectable [%x] Filter=%x\r\n",RetStatus,BlueNRG_StackValue.AdvertisingFilter);
 800dbfa:	7f62      	ldrb	r2, [r4, #29]
 800dbfc:	480a      	ldr	r0, [pc, #40]	; (800dc28 <setConnectable+0x100>)
 800dbfe:	e7f2      	b.n	800dbe6 <setConnectable+0xbe>
  RetStatus = aci_gap_update_adv_data(ADVERTIZE_DATA_LENGHT, manuf_data);
 800dc00:	a90b      	add	r1, sp, #44	; 0x2c
 800dc02:	2019      	movs	r0, #25
 800dc04:	f7fd ffac 	bl	800bb60 <aci_gap_update_adv_data>
  if(RetStatus !=BLE_STATUS_SUCCESS) {
 800dc08:	4601      	mov	r1, r0
 800dc0a:	b108      	cbz	r0, 800dc10 <setConnectable+0xe8>
    BLE_MANAGER_PRINTF("Error: aci_gap_update_adv_data [%x]\r\n",RetStatus);
 800dc0c:	4807      	ldr	r0, [pc, #28]	; (800dc2c <setConnectable+0x104>)
 800dc0e:	e7d4      	b.n	800dbba <setConnectable+0x92>
    BLE_MANAGER_PRINTF("aci_gap_update_adv_data OK\r\n");
 800dc10:	4807      	ldr	r0, [pc, #28]	; (800dc30 <setConnectable+0x108>)
 800dc12:	f00c fccf 	bl	801a5b4 <puts>
  return;
 800dc16:	e7e8      	b.n	800dbea <setConnectable+0xc2>
 800dc18:	200099a4 	.word	0x200099a4
 800dc1c:	00800100 	.word	0x00800100
 800dc20:	080214db 	.word	0x080214db
 800dc24:	08021507 	.word	0x08021507
 800dc28:	08021538 	.word	0x08021538
 800dc2c:	08021573 	.word	0x08021573
 800dc30:	08021599 	.word	0x08021599

0800dc34 <BleManagerAddChar>:
  if(BleChar != NULL) {
 800dc34:	b170      	cbz	r0, 800dc54 <BleManagerAddChar+0x20>
    if(UsedBleChars<BLE_MANAGER_MAX_ALLOCABLE_CHARS) {
 800dc36:	4a08      	ldr	r2, [pc, #32]	; (800dc58 <BleManagerAddChar+0x24>)
 800dc38:	f892 31cc 	ldrb.w	r3, [r2, #460]	; 0x1cc
 800dc3c:	2b1f      	cmp	r3, #31
 800dc3e:	d808      	bhi.n	800dc52 <BleManagerAddChar+0x1e>
      BleCharsArray[UsedBleChars] = BleChar;
 800dc40:	eb02 0183 	add.w	r1, r2, r3, lsl #2
      UsedBleChars++;
 800dc44:	3301      	adds	r3, #1
      BleCharsArray[UsedBleChars] = BleChar;
 800dc46:	f8c1 01d0 	str.w	r0, [r1, #464]	; 0x1d0
      UsedBleChars++;
 800dc4a:	f882 31cc 	strb.w	r3, [r2, #460]	; 0x1cc
      retValue=1;
 800dc4e:	2001      	movs	r0, #1
 800dc50:	4770      	bx	lr
  int32_t retValue=0;
 800dc52:	2000      	movs	r0, #0
}
 800dc54:	4770      	bx	lr
 800dc56:	bf00      	nop
 800dc58:	2000338c 	.word	0x2000338c

0800dc5c <InitBleManager>:
  BLE_Conf_Service = BLE_SERV_NOT_ENABLE;
 800dc5c:	4bc1      	ldr	r3, [pc, #772]	; (800df64 <InitBleManager+0x308>)
  tBleStatus ret;
  uint8_t data_len_out;
  uint8_t random_number[8];
  
  /* Initialize the BlueNRG HCI */
  hci_init(APP_UserEvtRx, NULL);
 800dc5e:	48c2      	ldr	r0, [pc, #776]	; (800df68 <InitBleManager+0x30c>)
  BLE_Conf_Service = BLE_SERV_NOT_ENABLE;
 800dc60:	2100      	movs	r1, #0
{
 800dc62:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  BLE_Conf_Service = BLE_SERV_NOT_ENABLE;
 800dc66:	7019      	strb	r1, [r3, #0]
  BLE_StdTerm_Service = BLE_SERV_NOT_ENABLE;
 800dc68:	4bc0      	ldr	r3, [pc, #768]	; (800df6c <InitBleManager+0x310>)
  UsedBleChars =0;
 800dc6a:	4cc1      	ldr	r4, [pc, #772]	; (800df70 <InitBleManager+0x314>)
  BLE_StdTerm_Service = BLE_SERV_NOT_ENABLE;
 800dc6c:	7019      	strb	r1, [r3, #0]
  BLE_StdErr_Service = BLE_SERV_NOT_ENABLE;
 800dc6e:	4bc1      	ldr	r3, [pc, #772]	; (800df74 <InitBleManager+0x318>)
  set_connectable = FALSE;
 800dc70:	4dc1      	ldr	r5, [pc, #772]	; (800df78 <InitBleManager+0x31c>)
  BLE_StdErr_Service = BLE_SERV_NOT_ENABLE;
 800dc72:	7019      	strb	r1, [r3, #0]
  BLE_ExtConf_Service = BLE_SERV_NOT_ENABLE;
 800dc74:	4bc1      	ldr	r3, [pc, #772]	; (800df7c <InitBleManager+0x320>)
  UsedBleChars =0;
 800dc76:	f884 11cc 	strb.w	r1, [r4, #460]	; 0x1cc
{
 800dc7a:	b093      	sub	sp, #76	; 0x4c
  BLE_ExtConf_Service = BLE_SERV_NOT_ENABLE;
 800dc7c:	7019      	strb	r1, [r3, #0]
  MaxBLECharLen = DEFAULT_MAX_CHAR_LEN;
 800dc7e:	239b      	movs	r3, #155	; 0x9b
  UsedStandardBleChars = 0;
 800dc80:	f884 1250 	strb.w	r1, [r4, #592]	; 0x250
  connection_handle = 0;
 800dc84:	f8a4 1252 	strh.w	r1, [r4, #594]	; 0x252
  set_connectable = FALSE;
 800dc88:	7029      	strb	r1, [r5, #0]
  MaxBLECharLen = DEFAULT_MAX_CHAR_LEN;
 800dc8a:	f884 30a8 	strb.w	r3, [r4, #168]	; 0xa8
  hci_init(APP_UserEvtRx, NULL);
 800dc8e:	f7fe fa91 	bl	800c1b4 <hci_init>
  
  /* we will let the BLE chip to use its Random MAC address */
#define CONFIG_DATA_RANDOM_ADDRESS          (0x80) /**< Stored static random address. Read-only. */
  ret = aci_hal_read_config_data(CONFIG_DATA_RANDOM_ADDRESS, &data_len_out, BlueNRG_StackValue.BleMacAddress);
 800dc92:	4abb      	ldr	r2, [pc, #748]	; (800df80 <InitBleManager+0x324>)
 800dc94:	4eba      	ldr	r6, [pc, #744]	; (800df80 <InitBleManager+0x324>)
 800dc96:	f10d 0123 	add.w	r1, sp, #35	; 0x23
 800dc9a:	2080      	movs	r0, #128	; 0x80
 800dc9c:	f7fe f9f8 	bl	800c090 <aci_hal_read_config_data>
  
  if(ret != BLE_STATUS_SUCCESS){
 800dca0:	9507      	str	r5, [sp, #28]
 800dca2:	4607      	mov	r7, r0
 800dca4:	2800      	cmp	r0, #0
 800dca6:	f000 8224 	beq.w	800e0f2 <InitBleManager+0x496>
    BLE_MANAGER_PRINTF("\r\nReading  Random BD_ADDR failed\r\n");
 800dcaa:	48b6      	ldr	r0, [pc, #728]	; (800df84 <InitBleManager+0x328>)
  
  ret = aci_hal_write_config_data(BlueNRG_StackValue.ConfigValueOffsets,
                                  BlueNRG_StackValue.ConfigValuelength,
                                  BlueNRG_StackValue.BleMacAddress);
  if(ret != BLE_STATUS_SUCCESS){
    BLE_MANAGER_PRINTF("\r\nSetting Public BD_ADDR failed\r\n");
 800dcac:	f00c fc82 	bl	801a5b4 <puts>
  CustomConnectionCompleted=NULL;
 800dcb0:	4ab5      	ldr	r2, [pc, #724]	; (800df88 <InitBleManager+0x32c>)
 800dcb2:	2300      	movs	r3, #0
 800dcb4:	6013      	str	r3, [r2, #0]
  CustomDisconnectionCompleted=NULL;
 800dcb6:	4ab5      	ldr	r2, [pc, #724]	; (800df8c <InitBleManager+0x330>)
 800dcb8:	6013      	str	r3, [r2, #0]
  CustomAciGattTxPoolAvailableEvent=NULL;
 800dcba:	4ab5      	ldr	r2, [pc, #724]	; (800df90 <InitBleManager+0x334>)
 800dcbc:	6013      	str	r3, [r2, #0]
  CustomDebugConsoleParsingCallback=NULL;
 800dcbe:	4ab5      	ldr	r2, [pc, #724]	; (800df94 <InitBleManager+0x338>)
 800dcc0:	6013      	str	r3, [r2, #0]
  CustomWriteRequestConfigCallback=NULL;
 800dcc2:	4ab5      	ldr	r2, [pc, #724]	; (800df98 <InitBleManager+0x33c>)
 800dcc4:	6013      	str	r3, [r2, #0]
  CustomExtConfigRebootOnDFUModeCommandCallback=NULL;
 800dcc6:	4ab5      	ldr	r2, [pc, #724]	; (800df9c <InitBleManager+0x340>)
 800dcc8:	6013      	str	r3, [r2, #0]
  CustomExtConfigPowerOffCommandCallback=NULL;
 800dcca:	4ab5      	ldr	r2, [pc, #724]	; (800dfa0 <InitBleManager+0x344>)
 800dccc:	6013      	str	r3, [r2, #0]
  CustomExtConfigSetNameCommandCallback=NULL;
 800dcce:	4ab5      	ldr	r2, [pc, #724]	; (800dfa4 <InitBleManager+0x348>)
 800dcd0:	6013      	str	r3, [r2, #0]
  CustomExtConfigSetTimeCommandCallback=NULL;
 800dcd2:	4ab5      	ldr	r2, [pc, #724]	; (800dfa8 <InitBleManager+0x34c>)
 800dcd4:	6013      	str	r3, [r2, #0]
  CustomExtConfigSetDateCommandCallback=NULL;
 800dcd6:	4ab5      	ldr	r2, [pc, #724]	; (800dfac <InitBleManager+0x350>)
 800dcd8:	6013      	str	r3, [r2, #0]
  CustomExtConfigSetWiFiCommandCallback=NULL;
 800dcda:	4ab5      	ldr	r2, [pc, #724]	; (800dfb0 <InitBleManager+0x354>)
 800dcdc:	6013      	str	r3, [r2, #0]
  CustomExtConfigChangePinCommandCallback=NULL;
 800dcde:	4ab5      	ldr	r2, [pc, #724]	; (800dfb4 <InitBleManager+0x358>)
 800dce0:	6013      	str	r3, [r2, #0]
  CustomExtConfigClearDBCommandCallback=NULL;
 800dce2:	4ab5      	ldr	r2, [pc, #724]	; (800dfb8 <InitBleManager+0x35c>)
 800dce4:	6013      	str	r3, [r2, #0]
  CustomExtConfigUidCommandCallback=NULL;
 800dce6:	4ab5      	ldr	r2, [pc, #724]	; (800dfbc <InitBleManager+0x360>)
 800dce8:	6013      	str	r3, [r2, #0]
  CustomExtConfigInfoCommandCallback=NULL;
 800dcea:	4ab5      	ldr	r2, [pc, #724]	; (800dfc0 <InitBleManager+0x364>)
 800dcec:	6013      	str	r3, [r2, #0]
  CustomExtConfigHelpCommandCallback=NULL;
 800dcee:	4ab5      	ldr	r2, [pc, #724]	; (800dfc4 <InitBleManager+0x368>)
 800dcf0:	6013      	str	r3, [r2, #0]
  CustomExtConfigPowerStatusCommandCallback=NULL;
 800dcf2:	4ab5      	ldr	r2, [pc, #724]	; (800dfc8 <InitBleManager+0x36c>)
 800dcf4:	6013      	str	r3, [r2, #0]
  CustomExtConfigVersionFwCommandCallback=NULL;
 800dcf6:	4ab5      	ldr	r2, [pc, #724]	; (800dfcc <InitBleManager+0x370>)
 800dcf8:	6013      	str	r3, [r2, #0]
  CustomExtConfigReadCustomCommandsCallback=NULL;
 800dcfa:	4ab5      	ldr	r2, [pc, #724]	; (800dfd0 <InitBleManager+0x374>)
 800dcfc:	6013      	str	r3, [r2, #0]
  CustomExtConfigCustomCommandCallback=NULL;
 800dcfe:	4ab5      	ldr	r2, [pc, #724]	; (800dfd4 <InitBleManager+0x378>)
 800dd00:	6013      	str	r3, [r2, #0]
  CustomExtConfigReadCertCommandCallback=NULL;
 800dd02:	4ab5      	ldr	r2, [pc, #724]	; (800dfd8 <InitBleManager+0x37c>)
 800dd04:	6013      	str	r3, [r2, #0]
  CustomExtConfigSetCertCommandCallback=NULL;
 800dd06:	4ab5      	ldr	r2, [pc, #724]	; (800dfdc <InitBleManager+0x380>)
 800dd08:	6013      	str	r3, [r2, #0]
  CustomExtConfigReadSensorsConfigCommandsCallback=NULL;
 800dd0a:	4ab5      	ldr	r2, [pc, #724]	; (800dfe0 <InitBleManager+0x384>)
 800dd0c:	6013      	str	r3, [r2, #0]
  CustomExtConfigSetSensorsConfigCommandsCallback=NULL;
 800dd0e:	4ab5      	ldr	r2, [pc, #724]	; (800dfe4 <InitBleManager+0x388>)
 800dd10:	6013      	str	r3, [r2, #0]
  ClearCustomCommandsList();
 800dd12:	f7ff fcf1 	bl	800d6f8 <ClearCustomCommandsList>
  if(ret==BLE_STATUS_SUCCESS) {
 800dd16:	2f00      	cmp	r7, #0
 800dd18:	f040 81e4 	bne.w	800e0e4 <InitBleManager+0x488>
{
  tBleStatus Status = BLE_ERROR_UNSPECIFIED;
  BleCharTypeDef *BleCharPointer;
  
  //Set the Malloc/Free Functions  used inside the Json Parser
  json_set_allocation_functions(BLE_MallocFunction, BLE_FreeFunction);
 800dd1c:	49b2      	ldr	r1, [pc, #712]	; (800dfe8 <InitBleManager+0x38c>)
 800dd1e:	48b3      	ldr	r0, [pc, #716]	; (800dfec <InitBleManager+0x390>)
 800dd20:	f003 f9e8 	bl	80110f4 <json_set_allocation_functions>
  
#ifdef BLE_MANAGER_SDKV2
   BLE_MANAGER_PRINTF("BlueST-SDK V2\r\n");
#else /* BLE_MANAGER_SDKV2 */
   BLE_MANAGER_PRINTF("BlueST-SDK V1\r\n");
 800dd24:	48b2      	ldr	r0, [pc, #712]	; (800dff0 <InitBleManager+0x394>)
 800dd26:	f00c fc45 	bl	801a5b4 <puts>
#endif /* BLE_MANAGER_SDKV2 */
  
  if(BlueNRG_StackValue.EnableConfig) {
 800dd2a:	4bb2      	ldr	r3, [pc, #712]	; (800dff4 <InitBleManager+0x398>)
 800dd2c:	7a9a      	ldrb	r2, [r3, #10]
 800dd2e:	4698      	mov	r8, r3
 800dd30:	2a00      	cmp	r2, #0
 800dd32:	f000 828c 	beq.w	800e24e <InitBleManager+0x5f2>
    BleCharPointer = &BleCharConfig;
    memset(BleCharPointer,0,sizeof(BleCharTypeDef));
 800dd36:	4db0      	ldr	r5, [pc, #704]	; (800dff8 <InitBleManager+0x39c>)
    BleCharPointer->AttrMod_Request_CB = AttrMod_Request_Config;
    BleCharPointer->Write_Request_CB = Write_Request_Config;
    COPY_CONFIG_CHAR_UUID((BleCharPointer->uuid));
 800dd38:	f8df b2fc 	ldr.w	fp, [pc, #764]	; 800e038 <InitBleManager+0x3dc>
 800dd3c:	f8df a2fc 	ldr.w	sl, [pc, #764]	; 800e03c <InitBleManager+0x3e0>
    memset(BleCharPointer,0,sizeof(BleCharTypeDef));
 800dd40:	4639      	mov	r1, r7
 800dd42:	2218      	movs	r2, #24
 800dd44:	f105 0010 	add.w	r0, r5, #16
 800dd48:	f00b fe92 	bl	8019a70 <memset>
    BleCharPointer->AttrMod_Request_CB = AttrMod_Request_Config;
 800dd4c:	4bab      	ldr	r3, [pc, #684]	; (800dffc <InitBleManager+0x3a0>)
 800dd4e:	f8c4 31c0 	str.w	r3, [r4, #448]	; 0x1c0
    BleCharPointer->Write_Request_CB = Write_Request_Config;
 800dd52:	4bab      	ldr	r3, [pc, #684]	; (800e000 <InitBleManager+0x3a4>)
 800dd54:	f8c4 31c8 	str.w	r3, [r4, #456]	; 0x1c8
    COPY_CONFIG_CHAR_UUID((BleCharPointer->uuid));
 800dd58:	4baa      	ldr	r3, [pc, #680]	; (800e004 <InitBleManager+0x3a8>)
 800dd5a:	e9c4 b368 	strd	fp, r3, [r4, #416]	; 0x1a0
    BleCharPointer->Char_UUID_Type =UUID_TYPE_128;
    BleCharPointer->Char_Value_Length=DEFAULT_MAX_CHAR_LEN;
 800dd5e:	239b      	movs	r3, #155	; 0x9b
    COPY_CONFIG_CHAR_UUID((BleCharPointer->uuid));
 800dd60:	2602      	movs	r6, #2
    BleCharPointer->Char_Value_Length=DEFAULT_MAX_CHAR_LEN;
 800dd62:	f8a4 31b2 	strh.w	r3, [r4, #434]	; 0x1b2
    BleCharPointer->Char_Properties=((uint8_t)CHAR_PROP_NOTIFY) | ((uint8_t)CHAR_PROP_WRITE_WITHOUT_RESP);
    BleCharPointer->Security_Permissions=ATTR_PERMISSION_NONE;
    BleCharPointer->GATT_Evt_Mask= ((uint8_t)GATT_NOTIFY_ATTRIBUTE_WRITE) | ((uint8_t)GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP);
    BleCharPointer->Enc_Key_Size=16;
    BleCharPointer->Is_Variable=1;
 800dd66:	f04f 0901 	mov.w	r9, #1
    BleCharPointer->Char_Properties=((uint8_t)CHAR_PROP_NOTIFY) | ((uint8_t)CHAR_PROP_WRITE_WITHOUT_RESP);
 800dd6a:	4ba7      	ldr	r3, [pc, #668]	; (800e008 <InitBleManager+0x3ac>)
 800dd6c:	f8c4 31b4 	str.w	r3, [r4, #436]	; 0x1b4
    BleManagerAddChar(BleCharPointer);
 800dd70:	4628      	mov	r0, r5
    COPY_CONFIG_CHAR_UUID((BleCharPointer->uuid));
 800dd72:	e9c4 a66a 	strd	sl, r6, [r4, #424]	; 0x1a8
    BleCharPointer->Char_UUID_Type =UUID_TYPE_128;
 800dd76:	f884 61b0 	strb.w	r6, [r4, #432]	; 0x1b0
    BleCharPointer->Is_Variable=1;
 800dd7a:	f884 91b8 	strb.w	r9, [r4, #440]	; 0x1b8
    BleManagerAddChar(BleCharPointer);
 800dd7e:	f7ff ff59 	bl	800dc34 <BleManagerAddChar>
  BLUENRG_memcpy(&service_uuid.Service_UUID_128, uuid, 16);
 800dd82:	4ba2      	ldr	r3, [pc, #648]	; (800e00c <InitBleManager+0x3b0>)
 800dd84:	970d      	str	r7, [sp, #52]	; 0x34
 800dd86:	e9cd 3a0b 	strd	r3, sl, [sp, #44]	; 0x2c
  ret = aci_gatt_add_service(UUID_TYPE_128,  &service_uuid, PRIMARY_SERVICE, 1+3,&(BleCharConfig.Service_Handle));
 800dd8a:	f105 031c 	add.w	r3, r5, #28
 800dd8e:	9300      	str	r3, [sp, #0]
 800dd90:	464a      	mov	r2, r9
 800dd92:	2304      	movs	r3, #4
 800dd94:	a90a      	add	r1, sp, #40	; 0x28
 800dd96:	4630      	mov	r0, r6
  BLUENRG_memcpy(&service_uuid.Service_UUID_128, uuid, 16);
 800dd98:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
  ret = aci_gatt_add_service(UUID_TYPE_128,  &service_uuid, PRIMARY_SERVICE, 1+3,&(BleCharConfig.Service_Handle));
 800dd9c:	f7fd ffd0 	bl	800bd40 <aci_gatt_add_service>
  if (ret != BLE_STATUS_SUCCESS) {
 800dda0:	4607      	mov	r7, r0
 800dda2:	2800      	cmp	r0, #0
 800dda4:	f040 8251 	bne.w	800e24a <InitBleManager+0x5ee>
  BLUENRG_memcpy(&char_uuid.Char_UUID_128, BleCharConfig.uuid, 16);
 800dda8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800ddac:	ae0e      	add	r6, sp, #56	; 0x38
 800ddae:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
  ret =  aci_gatt_add_char(BleCharConfig.Service_Handle,
 800ddb2:	f894 31b8 	ldrb.w	r3, [r4, #440]	; 0x1b8
 800ddb6:	9304      	str	r3, [sp, #16]
 800ddb8:	f894 31b7 	ldrb.w	r3, [r4, #439]	; 0x1b7
 800ddbc:	9303      	str	r3, [sp, #12]
 800ddbe:	f894 31b6 	ldrb.w	r3, [r4, #438]	; 0x1b6
 800ddc2:	9302      	str	r3, [sp, #8]
 800ddc4:	f894 31b5 	ldrb.w	r3, [r4, #437]	; 0x1b5
 800ddc8:	9301      	str	r3, [sp, #4]
 800ddca:	351a      	adds	r5, #26
 800ddcc:	f894 31b4 	ldrb.w	r3, [r4, #436]	; 0x1b4
 800ddd0:	9300      	str	r3, [sp, #0]
 800ddd2:	f894 11b0 	ldrb.w	r1, [r4, #432]	; 0x1b0
 800ddd6:	f8b4 31b2 	ldrh.w	r3, [r4, #434]	; 0x1b2
 800ddda:	f8b4 01bc 	ldrh.w	r0, [r4, #444]	; 0x1bc
 800ddde:	9505      	str	r5, [sp, #20]
 800dde0:	4632      	mov	r2, r6
 800dde2:	f7fd fff5 	bl	800bdd0 <aci_gatt_add_char>
    
    Status = BLE_Manager_AddConfigService();
    if(Status == BLE_STATUS_SUCCESS) {
 800dde6:	4607      	mov	r7, r0
 800dde8:	2800      	cmp	r0, #0
 800ddea:	f040 822e 	bne.w	800e24a <InitBleManager+0x5ee>
      BLE_MANAGER_PRINTF("Config  Service added successfully\r\n");
 800ddee:	4888      	ldr	r0, [pc, #544]	; (800e010 <InitBleManager+0x3b4>)
    } else {
      BLE_MANAGER_PRINTF("Error: while adding Config Service\r\n");
 800ddf0:	f00c fbe0 	bl	801a5b4 <puts>
    }
  }
  
  if(BlueNRG_StackValue.EnableConsole) {
 800ddf4:	f898 300b 	ldrb.w	r3, [r8, #11]
 800ddf8:	2b00      	cmp	r3, #0
 800ddfa:	f000 80ab 	beq.w	800df54 <InitBleManager+0x2f8>
    BleCharPointer = &BleCharStdOut;
    memset(BleCharPointer,0,sizeof(BleCharTypeDef));    
 800ddfe:	4d85      	ldr	r5, [pc, #532]	; (800e014 <InitBleManager+0x3b8>)
    BleCharPointer->AttrMod_Request_CB = AttrMod_Request_Term;
    BleCharPointer->Write_Request_CB = Write_Request_Term;
    BleCharPointer->Read_Request_CB = Read_Request_Term;
    COPY_TERM_CHAR_UUID((BleCharPointer->uuid));
 800de00:	f8df a234 	ldr.w	sl, [pc, #564]	; 800e038 <InitBleManager+0x3dc>
 800de04:	f8df 9238 	ldr.w	r9, [pc, #568]	; 800e040 <InitBleManager+0x3e4>
    memset(BleCharPointer,0,sizeof(BleCharTypeDef));    
 800de08:	2210      	movs	r2, #16
 800de0a:	2100      	movs	r1, #0
 800de0c:	18a8      	adds	r0, r5, r2
 800de0e:	f00b fe2f 	bl	8019a70 <memset>
    BleCharPointer->AttrMod_Request_CB = AttrMod_Request_Term;
 800de12:	4b81      	ldr	r3, [pc, #516]	; (800e018 <InitBleManager+0x3bc>)
 800de14:	f8c4 3194 	str.w	r3, [r4, #404]	; 0x194
    BleCharPointer->Write_Request_CB = Write_Request_Term;
 800de18:	4b80      	ldr	r3, [pc, #512]	; (800e01c <InitBleManager+0x3c0>)
 800de1a:	f8c4 319c 	str.w	r3, [r4, #412]	; 0x19c
    BleCharPointer->Read_Request_CB = Read_Request_Term;
 800de1e:	4b80      	ldr	r3, [pc, #512]	; (800e020 <InitBleManager+0x3c4>)
 800de20:	f8c4 3198 	str.w	r3, [r4, #408]	; 0x198
    COPY_TERM_CHAR_UUID((BleCharPointer->uuid));
 800de24:	4b77      	ldr	r3, [pc, #476]	; (800e004 <InitBleManager+0x3a8>)
    BleCharPointer->Char_UUID_Type =UUID_TYPE_128;
    BleCharPointer->Char_Value_Length=DEFAULT_MAX_CHAR_LEN;
    BleCharPointer->Char_Properties= ((uint8_t)CHAR_PROP_NOTIFY)| ((uint8_t)CHAR_PROP_WRITE_WITHOUT_RESP) | ((uint8_t)CHAR_PROP_WRITE) | ((uint8_t)CHAR_PROP_READ);
 800de26:	4a7f      	ldr	r2, [pc, #508]	; (800e024 <InitBleManager+0x3c8>)
 800de28:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
    BleCharPointer->Char_UUID_Type =UUID_TYPE_128;
 800de2c:	2702      	movs	r7, #2
    COPY_TERM_CHAR_UUID((BleCharPointer->uuid));
 800de2e:	f04f 0801 	mov.w	r8, #1
    BleCharPointer->Char_Value_Length=DEFAULT_MAX_CHAR_LEN;
 800de32:	f04f 0b9b 	mov.w	fp, #155	; 0x9b
    BleCharPointer->Security_Permissions=ATTR_PERMISSION_NONE;
    BleCharPointer->GATT_Evt_Mask= ((uint8_t)GATT_NOTIFY_ATTRIBUTE_WRITE) | ((uint8_t)GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP);
    BleCharPointer->Enc_Key_Size=16;
    BleCharPointer->Is_Variable=1;
    BleManagerAddChar(BleCharPointer);
 800de36:	4628      	mov	r0, r5
    COPY_TERM_CHAR_UUID((BleCharPointer->uuid));
 800de38:	e9c4 a35d 	strd	sl, r3, [r4, #372]	; 0x174
    BleCharPointer->Char_UUID_Type =UUID_TYPE_128;
 800de3c:	f884 7184 	strb.w	r7, [r4, #388]	; 0x184
    COPY_TERM_CHAR_UUID((BleCharPointer->uuid));
 800de40:	e9c4 985f 	strd	r9, r8, [r4, #380]	; 0x17c
    BleCharPointer->Char_Value_Length=DEFAULT_MAX_CHAR_LEN;
 800de44:	f8a4 b186 	strh.w	fp, [r4, #390]	; 0x186
    BleCharPointer->Is_Variable=1;
 800de48:	f884 818c 	strb.w	r8, [r4, #396]	; 0x18c
    BleManagerAddChar(BleCharPointer);
 800de4c:	f7ff fef2 	bl	800dc34 <BleManagerAddChar>
    
    BleCharPointer = &BleCharStdErr;
    memset(BleCharPointer,0,sizeof(BleCharTypeDef));
 800de50:	2100      	movs	r1, #0
 800de52:	221c      	movs	r2, #28
 800de54:	f1a5 00b8 	sub.w	r0, r5, #184	; 0xb8
 800de58:	f00b fe0a 	bl	8019a70 <memset>
    BleCharPointer->AttrMod_Request_CB = AttrMod_Request_StdErr;
    BleCharPointer->Read_Request_CB = Read_Request_StdErr;
    COPY_STDERR_CHAR_UUID((BleCharPointer->uuid));
 800de5c:	4b69      	ldr	r3, [pc, #420]	; (800e004 <InitBleManager+0x3a8>)
    BleCharPointer->AttrMod_Request_CB = AttrMod_Request_StdErr;
 800de5e:	4a72      	ldr	r2, [pc, #456]	; (800e028 <InitBleManager+0x3cc>)
 800de60:	f8c4 20cc 	str.w	r2, [r4, #204]	; 0xcc
    memset(BleCharPointer,0,sizeof(BleCharTypeDef));
 800de64:	f1a5 06c8 	sub.w	r6, r5, #200	; 0xc8
    BleCharPointer->Read_Request_CB = Read_Request_StdErr;
 800de68:	4a70      	ldr	r2, [pc, #448]	; (800e02c <InitBleManager+0x3d0>)
 800de6a:	f8c4 20d0 	str.w	r2, [r4, #208]	; 0xd0
    COPY_STDERR_CHAR_UUID((BleCharPointer->uuid));
 800de6e:	e9c4 392c 	strd	r3, r9, [r4, #176]	; 0xb0
    BleCharPointer->Char_Properties= ((uint8_t)CHAR_PROP_NOTIFY) | ((uint8_t)CHAR_PROP_READ);
    BleCharPointer->Security_Permissions=ATTR_PERMISSION_NONE;
    BleCharPointer->GATT_Evt_Mask=GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP;
    BleCharPointer->Enc_Key_Size=16;
    BleCharPointer->Is_Variable=1;
    BleManagerAddChar(BleCharPointer);
 800de72:	4630      	mov	r0, r6
    BleCharPointer->Char_Properties= ((uint8_t)CHAR_PROP_NOTIFY) | ((uint8_t)CHAR_PROP_READ);
 800de74:	4b6e      	ldr	r3, [pc, #440]	; (800e030 <InitBleManager+0x3d4>)
    COPY_STDERR_CHAR_UUID((BleCharPointer->uuid));
 800de76:	f8c4 70b8 	str.w	r7, [r4, #184]	; 0xb8
    BleCharPointer->Char_UUID_Type =UUID_TYPE_128;
 800de7a:	f884 70bc 	strb.w	r7, [r4, #188]	; 0xbc
    BleCharPointer->Char_Properties= ((uint8_t)CHAR_PROP_NOTIFY) | ((uint8_t)CHAR_PROP_READ);
 800de7e:	f8c4 30c0 	str.w	r3, [r4, #192]	; 0xc0
    COPY_STDERR_CHAR_UUID((BleCharPointer->uuid));
 800de82:	f8c4 a0ac 	str.w	sl, [r4, #172]	; 0xac
    BleCharPointer->Char_Value_Length=DEFAULT_MAX_CHAR_LEN;
 800de86:	f8a4 b0be 	strh.w	fp, [r4, #190]	; 0xbe
    BleCharPointer->Is_Variable=1;
 800de8a:	f884 80c4 	strb.w	r8, [r4, #196]	; 0xc4
    BleManagerAddChar(BleCharPointer);
 800de8e:	f7ff fed1 	bl	800dc34 <BleManagerAddChar>
  BLUENRG_memcpy(&service_uuid.Service_UUID_128, uuid, 16);
 800de92:	4b5e      	ldr	r3, [pc, #376]	; (800e00c <InitBleManager+0x3b0>)
 800de94:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 800de98:	e9cd 390b 	strd	r3, r9, [sp, #44]	; 0x2c
 800de9c:	2300      	movs	r3, #0
 800de9e:	930d      	str	r3, [sp, #52]	; 0x34
  ret = aci_gatt_add_service(UUID_TYPE_128,  &service_uuid, PRIMARY_SERVICE, 1+(3*2),&(BleCharStdOut.Service_Handle));
 800dea0:	f105 031c 	add.w	r3, r5, #28
 800dea4:	9300      	str	r3, [sp, #0]
 800dea6:	4638      	mov	r0, r7
 800dea8:	2307      	movs	r3, #7
 800deaa:	4642      	mov	r2, r8
 800deac:	a90a      	add	r1, sp, #40	; 0x28
 800deae:	f7fd ff47 	bl	800bd40 <aci_gatt_add_service>
  if (ret != BLE_STATUS_SUCCESS) {
 800deb2:	4607      	mov	r7, r0
 800deb4:	2800      	cmp	r0, #0
 800deb6:	f040 81cc 	bne.w	800e252 <InitBleManager+0x5f6>
  BLUENRG_memcpy(&char_uuid.Char_UUID_128, BleCharStdOut.uuid, 16);
 800deba:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800debe:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 800dec2:	e888 000f 	stmia.w	r8, {r0, r1, r2, r3}
  ret =  aci_gatt_add_char(BleCharStdOut.Service_Handle,
 800dec6:	f105 031a 	add.w	r3, r5, #26
 800deca:	9305      	str	r3, [sp, #20]
 800decc:	f894 318c 	ldrb.w	r3, [r4, #396]	; 0x18c
 800ded0:	9304      	str	r3, [sp, #16]
 800ded2:	f894 318b 	ldrb.w	r3, [r4, #395]	; 0x18b
 800ded6:	9303      	str	r3, [sp, #12]
 800ded8:	f894 318a 	ldrb.w	r3, [r4, #394]	; 0x18a
 800dedc:	9302      	str	r3, [sp, #8]
 800dede:	f894 3189 	ldrb.w	r3, [r4, #393]	; 0x189
 800dee2:	9301      	str	r3, [sp, #4]
 800dee4:	f894 3188 	ldrb.w	r3, [r4, #392]	; 0x188
 800dee8:	9300      	str	r3, [sp, #0]
 800deea:	f894 1184 	ldrb.w	r1, [r4, #388]	; 0x184
 800deee:	f8b4 3186 	ldrh.w	r3, [r4, #390]	; 0x186
 800def2:	f8b4 0190 	ldrh.w	r0, [r4, #400]	; 0x190
 800def6:	4642      	mov	r2, r8
 800def8:	f7fd ff6a 	bl	800bdd0 <aci_gatt_add_char>
  if (ret != BLE_STATUS_SUCCESS) {
 800defc:	4607      	mov	r7, r0
 800defe:	2800      	cmp	r0, #0
 800df00:	f040 81a7 	bne.w	800e252 <InitBleManager+0x5f6>
  BLUENRG_memcpy(&char_uuid.Char_UUID_128, BleCharStdErr.uuid, 16);
 800df04:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800df08:	e888 000f 	stmia.w	r8, {r0, r1, r2, r3}
  ret =  aci_gatt_add_char(BleCharStdErr.Service_Handle,
 800df0c:	f894 30c4 	ldrb.w	r3, [r4, #196]	; 0xc4
 800df10:	9304      	str	r3, [sp, #16]
 800df12:	f894 30c3 	ldrb.w	r3, [r4, #195]	; 0xc3
 800df16:	9303      	str	r3, [sp, #12]
 800df18:	f894 30c2 	ldrb.w	r3, [r4, #194]	; 0xc2
  BleCharStdErr.Service_Handle = BleCharStdOut.Service_Handle;
 800df1c:	f8b4 7190 	ldrh.w	r7, [r4, #400]	; 0x190
  ret =  aci_gatt_add_char(BleCharStdErr.Service_Handle,
 800df20:	9302      	str	r3, [sp, #8]
 800df22:	f894 30c1 	ldrb.w	r3, [r4, #193]	; 0xc1
 800df26:	9301      	str	r3, [sp, #4]
 800df28:	3dae      	subs	r5, #174	; 0xae
 800df2a:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
 800df2e:	9300      	str	r3, [sp, #0]
 800df30:	4638      	mov	r0, r7
 800df32:	f8b4 30be 	ldrh.w	r3, [r4, #190]	; 0xbe
 800df36:	f894 10bc 	ldrb.w	r1, [r4, #188]	; 0xbc
 800df3a:	9505      	str	r5, [sp, #20]
 800df3c:	4642      	mov	r2, r8
  BleCharStdErr.Service_Handle = BleCharStdOut.Service_Handle;
 800df3e:	f8a4 70c8 	strh.w	r7, [r4, #200]	; 0xc8
  ret =  aci_gatt_add_char(BleCharStdErr.Service_Handle,
 800df42:	f7fd ff45 	bl	800bdd0 <aci_gatt_add_char>
    
    Status = BLE_Manager_AddConsoleService();
    if(Status == BLE_STATUS_SUCCESS) {
 800df46:	4607      	mov	r7, r0
 800df48:	2800      	cmp	r0, #0
 800df4a:	f040 8182 	bne.w	800e252 <InitBleManager+0x5f6>
      BLE_MANAGER_PRINTF("Console Service added successfully\r\n");
 800df4e:	4839      	ldr	r0, [pc, #228]	; (800e034 <InitBleManager+0x3d8>)
    } else {
      BLE_MANAGER_PRINTF("Error: while adding Console Service\r\n");
 800df50:	f00c fb30 	bl	801a5b4 <puts>
    }
  }
  
  UsedStandardBleChars = UsedBleChars;
 800df54:	f894 31cc 	ldrb.w	r3, [r4, #460]	; 0x1cc
 800df58:	f884 3250 	strb.w	r3, [r4, #592]	; 0x250
  
  /* Extended Configuration characteristic value */
  if(BlueNRG_StackValue.EnableExtConfig)
 800df5c:	4b25      	ldr	r3, [pc, #148]	; (800dff4 <InitBleManager+0x398>)
 800df5e:	7b1b      	ldrb	r3, [r3, #12]
 800df60:	e070      	b.n	800e044 <InitBleManager+0x3e8>
 800df62:	bf00      	nop
 800df64:	20009a28 	.word	0x20009a28
 800df68:	0800d675 	.word	0x0800d675
 800df6c:	20009b34 	.word	0x20009b34
 800df70:	2000338c 	.word	0x2000338c
 800df74:	200099f8 	.word	0x200099f8
 800df78:	200099f0 	.word	0x200099f0
 800df7c:	20009b3c 	.word	0x20009b3c
 800df80:	200099c3 	.word	0x200099c3
 800df84:	080215cb 	.word	0x080215cb
 800df88:	20009a04 	.word	0x20009a04
 800df8c:	200099ec 	.word	0x200099ec
 800df90:	200099d8 	.word	0x200099d8
 800df94:	200099f4 	.word	0x200099f4
 800df98:	20009a18 	.word	0x20009a18
 800df9c:	20009a1c 	.word	0x20009a1c
 800dfa0:	200099e8 	.word	0x200099e8
 800dfa4:	200099cc 	.word	0x200099cc
 800dfa8:	20009a08 	.word	0x20009a08
 800dfac:	20009a0c 	.word	0x20009a0c
 800dfb0:	20009b38 	.word	0x20009b38
 800dfb4:	20009a10 	.word	0x20009a10
 800dfb8:	20009a24 	.word	0x20009a24
 800dfbc:	20009a14 	.word	0x20009a14
 800dfc0:	200099d4 	.word	0x200099d4
 800dfc4:	20009a00 	.word	0x20009a00
 800dfc8:	200099dc 	.word	0x200099dc
 800dfcc:	20009a2c 	.word	0x20009a2c
 800dfd0:	20009b30 	.word	0x20009b30
 800dfd4:	200099fc 	.word	0x200099fc
 800dfd8:	200099e0 	.word	0x200099e0
 800dfdc:	200099d0 	.word	0x200099d0
 800dfe0:	200099e4 	.word	0x200099e4
 800dfe4:	20009a20 	.word	0x20009a20
 800dfe8:	08019a11 	.word	0x08019a11
 800dfec:	08019a01 	.word	0x08019a01
 800dff0:	08021772 	.word	0x08021772
 800dff4:	200099a4 	.word	0x200099a4
 800dff8:	2000352c 	.word	0x2000352c
 800dffc:	0800d5e9 	.word	0x0800d5e9
 800e000:	0800d601 	.word	0x0800d601
 800e004:	ac360002 	.word	0xac360002
 800e008:	10050014 	.word	0x10050014
 800e00c:	9ab40002 	.word	0x9ab40002
 800e010:	08021781 	.word	0x08021781
 800e014:	20003500 	.word	0x20003500
 800e018:	0800d62d 	.word	0x0800d62d
 800e01c:	0800dafd 	.word	0x0800dafd
 800e020:	0800da05 	.word	0x0800da05
 800e024:	1005001e 	.word	0x1005001e
 800e028:	0800d615 	.word	0x0800d615
 800e02c:	0800d939 	.word	0x0800d939
 800e030:	10040012 	.word	0x10040012
 800e034:	080217c9 	.word	0x080217c9
 800e038:	a5d5c51b 	.word	0xa5d5c51b
 800e03c:	000f11e1 	.word	0x000f11e1
 800e040:	000e11e1 	.word	0x000e11e1
 800e044:	b313      	cbz	r3, 800e08c <InitBleManager+0x430>
  {
    BleCharPointer = &BleCharExtConfig;
    memset(BleCharPointer,0,sizeof(BleCharTypeDef));
 800e046:	489c      	ldr	r0, [pc, #624]	; (800e2b8 <InitBleManager+0x65c>)
    BleCharPointer->AttrMod_Request_CB = AttrMod_Request_ExtConfig;
    BleCharPointer->Write_Request_CB = Write_Request_ExtConfig;
    COPY_EXT_CONFIG_CHAR_UUID((BleCharPointer->uuid));
 800e048:	4e9c      	ldr	r6, [pc, #624]	; (800e2bc <InitBleManager+0x660>)
    memset(BleCharPointer,0,sizeof(BleCharTypeDef));
 800e04a:	2218      	movs	r2, #24
 800e04c:	2100      	movs	r1, #0
 800e04e:	f00b fd0f 	bl	8019a70 <memset>
    BleCharPointer->AttrMod_Request_CB = AttrMod_Request_ExtConfig;
 800e052:	4b9b      	ldr	r3, [pc, #620]	; (800e2c0 <InitBleManager+0x664>)
 800e054:	f8c4 3274 	str.w	r3, [r4, #628]	; 0x274
    BleCharPointer->Write_Request_CB = Write_Request_ExtConfig;
 800e058:	4b9a      	ldr	r3, [pc, #616]	; (800e2c4 <InitBleManager+0x668>)
 800e05a:	f8c4 327c 	str.w	r3, [r4, #636]	; 0x27c
    COPY_EXT_CONFIG_CHAR_UUID((BleCharPointer->uuid));
 800e05e:	4b9a      	ldr	r3, [pc, #616]	; (800e2c8 <InitBleManager+0x66c>)
 800e060:	f8df c2c8 	ldr.w	ip, [pc, #712]	; 800e32c <InitBleManager+0x6d0>
    BleCharPointer->Char_Properties= ((uint8_t)CHAR_PROP_NOTIFY) | ((uint8_t)CHAR_PROP_WRITE_WITHOUT_RESP);
    BleCharPointer->Security_Permissions=ATTR_PERMISSION_NONE;
    BleCharPointer->GATT_Evt_Mask= ((uint8_t)GATT_NOTIFY_ATTRIBUTE_WRITE) | ((uint8_t)GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP);
    BleCharPointer->Enc_Key_Size=16;
    BleCharPointer->Is_Variable=1;
    BleManagerAddChar(BleCharPointer);
 800e064:	4899      	ldr	r0, [pc, #612]	; (800e2cc <InitBleManager+0x670>)
    COPY_EXT_CONFIG_CHAR_UUID((BleCharPointer->uuid));
 800e066:	e9c4 6395 	strd	r6, r3, [r4, #596]	; 0x254
 800e06a:	2314      	movs	r3, #20
 800e06c:	e9c4 c397 	strd	ip, r3, [r4, #604]	; 0x25c
    BleCharPointer->Char_UUID_Type =UUID_TYPE_128;
 800e070:	2302      	movs	r3, #2
 800e072:	f884 3264 	strb.w	r3, [r4, #612]	; 0x264
    BleCharPointer->Char_Value_Length=DEFAULT_MAX_CHAR_LEN;
 800e076:	239b      	movs	r3, #155	; 0x9b
 800e078:	f8a4 3266 	strh.w	r3, [r4, #614]	; 0x266
    BleCharPointer->Char_Properties= ((uint8_t)CHAR_PROP_NOTIFY) | ((uint8_t)CHAR_PROP_WRITE_WITHOUT_RESP);
 800e07c:	4b94      	ldr	r3, [pc, #592]	; (800e2d0 <InitBleManager+0x674>)
 800e07e:	f8c4 3268 	str.w	r3, [r4, #616]	; 0x268
    BleCharPointer->Is_Variable=1;
 800e082:	2301      	movs	r3, #1
 800e084:	f884 326c 	strb.w	r3, [r4, #620]	; 0x26c
    BleManagerAddChar(BleCharPointer);
 800e088:	f7ff fdd4 	bl	800dc34 <BleManagerAddChar>
  }
  
  /* Set Custom Configuration and Services */
  BLE_InitCustomService();
 800e08c:	f004 f916 	bl	80122bc <BLE_InitCustomService>
  
  if((UsedBleChars-UsedStandardBleChars) > 0U)
 800e090:	f894 31cc 	ldrb.w	r3, [r4, #460]	; 0x1cc
 800e094:	f894 2250 	ldrb.w	r2, [r4, #592]	; 0x250
 800e098:	4293      	cmp	r3, r2
 800e09a:	d023      	beq.n	800e0e4 <InitBleManager+0x488>
  BLUENRG_memcpy(&service_uuid.Service_UUID_128, uuid, 16);
 800e09c:	4887      	ldr	r0, [pc, #540]	; (800e2bc <InitBleManager+0x660>)
 800e09e:	498d      	ldr	r1, [pc, #564]	; (800e2d4 <InitBleManager+0x678>)
 800e0a0:	4d8d      	ldr	r5, [pc, #564]	; (800e2d8 <InitBleManager+0x67c>)
  uint8_t NumberCustomBLEChars = UsedBleChars-UsedStandardBleChars;
 800e0a2:	1a9b      	subs	r3, r3, r2
  ret = aci_gatt_add_service(UUID_TYPE_128,  &service_uuid, PRIMARY_SERVICE, (1U+(3U*NumberCustomBLEChars)),&Service_Handle);
 800e0a4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  BLUENRG_memcpy(&service_uuid.Service_UUID_128, uuid, 16);
 800e0a8:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
  ret = aci_gatt_add_service(UUID_TYPE_128,  &service_uuid, PRIMARY_SERVICE, (1U+(3U*NumberCustomBLEChars)),&Service_Handle);
 800e0ac:	f10d 0226 	add.w	r2, sp, #38	; 0x26
  BLUENRG_memcpy(&service_uuid.Service_UUID_128, uuid, 16);
 800e0b0:	2100      	movs	r1, #0
  ret = aci_gatt_add_service(UUID_TYPE_128,  &service_uuid, PRIMARY_SERVICE, (1U+(3U*NumberCustomBLEChars)),&Service_Handle);
 800e0b2:	3301      	adds	r3, #1
  BLUENRG_memcpy(&service_uuid.Service_UUID_128, uuid, 16);
 800e0b4:	e9cd 510c 	strd	r5, r1, [sp, #48]	; 0x30
  ret = aci_gatt_add_service(UUID_TYPE_128,  &service_uuid, PRIMARY_SERVICE, (1U+(3U*NumberCustomBLEChars)),&Service_Handle);
 800e0b8:	9200      	str	r2, [sp, #0]
 800e0ba:	b2db      	uxtb	r3, r3
 800e0bc:	2201      	movs	r2, #1
 800e0be:	a90a      	add	r1, sp, #40	; 0x28
 800e0c0:	2002      	movs	r0, #2
 800e0c2:	f7fd fe3d 	bl	800bd40 <aci_gatt_add_service>
  if (ret != BLE_STATUS_SUCCESS) {
 800e0c6:	4607      	mov	r7, r0
 800e0c8:	2800      	cmp	r0, #0
 800e0ca:	f040 80f2 	bne.w	800e2b2 <InitBleManager+0x656>
  for(BleChar=UsedStandardBleChars;BleChar<UsedBleChars;BleChar++) {
 800e0ce:	f894 6250 	ldrb.w	r6, [r4, #592]	; 0x250
 800e0d2:	f894 31cc 	ldrb.w	r3, [r4, #460]	; 0x1cc
 800e0d6:	42b3      	cmp	r3, r6
 800e0d8:	f200 80bd 	bhi.w	800e256 <InitBleManager+0x5fa>
  {
    Status = BLE_Manager_AddFeaturesService();
    if(Status == BLE_STATUS_SUCCESS) {
      BLE_MANAGER_PRINTF("Features Service added successfully (Status= 0x%x)\r\n", Status);
 800e0dc:	487f      	ldr	r0, [pc, #508]	; (800e2dc <InitBleManager+0x680>)
 800e0de:	2100      	movs	r1, #0
    } else {
      BLE_MANAGER_PRINTF("Error: while adding Features Service (Status= 0x%x)\r\n", Status);
 800e0e0:	f00c f9e2 	bl	801a4a8 <iprintf>
  set_connectable=TRUE;
 800e0e4:	9a07      	ldr	r2, [sp, #28]
 800e0e6:	2301      	movs	r3, #1
}
 800e0e8:	4638      	mov	r0, r7
  set_connectable=TRUE;
 800e0ea:	7013      	strb	r3, [r2, #0]
}
 800e0ec:	b013      	add	sp, #76	; 0x4c
 800e0ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if(BlueNRG_StackValue.EnableRandomSecurePIN) {
 800e0f2:	f816 3c03 	ldrb.w	r3, [r6, #-3]
 800e0f6:	f1a6 051f 	sub.w	r5, r6, #31
 800e0fa:	b1e3      	cbz	r3, 800e136 <InitBleManager+0x4da>
    BlueNRG_StackValue.SecurePIN = 99999;
 800e0fc:	4b78      	ldr	r3, [pc, #480]	; (800e2e0 <InitBleManager+0x684>)
 800e0fe:	61ab      	str	r3, [r5, #24]
    if(hci_le_rand(random_number) != BLE_STATUS_SUCCESS) {
 800e100:	a80e      	add	r0, sp, #56	; 0x38
 800e102:	f7fd fbbf 	bl	800b884 <hci_le_rand>
 800e106:	b110      	cbz	r0, 800e10e <InitBleManager+0x4b2>
      BLE_MANAGER_PRINTF("hci_le_rand() call failed\r\n");
 800e108:	4876      	ldr	r0, [pc, #472]	; (800e2e4 <InitBleManager+0x688>)
 800e10a:	f00c fa53 	bl	801a5b4 <puts>
 800e10e:	69ab      	ldr	r3, [r5, #24]
 800e110:	a90e      	add	r1, sp, #56	; 0x38
{
 800e112:	2208      	movs	r2, #8
      BlueNRG_StackValue.SecurePIN += (435U*((uint32_t)random_number[i]));
 800e114:	f240 17b3 	movw	r7, #435	; 0x1b3
 800e118:	f811 0b01 	ldrb.w	r0, [r1], #1
 800e11c:	3a01      	subs	r2, #1
    for (uint8_t i=0; i<8U; i++) {
 800e11e:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
      BlueNRG_StackValue.SecurePIN += (435U*((uint32_t)random_number[i]));
 800e122:	fb07 3300 	mla	r3, r7, r0, r3
    for (uint8_t i=0; i<8U; i++) {
 800e126:	d1f7      	bne.n	800e118 <InitBleManager+0x4bc>
    if (BlueNRG_StackValue.SecurePIN <99999U) {
 800e128:	4a6f      	ldr	r2, [pc, #444]	; (800e2e8 <InitBleManager+0x68c>)
 800e12a:	4293      	cmp	r3, r2
      BlueNRG_StackValue.SecurePIN += 100000U;
 800e12c:	bf9c      	itt	ls
 800e12e:	f503 33c3 	addls.w	r3, r3, #99840	; 0x18600
 800e132:	33a0      	addls	r3, #160	; 0xa0
 800e134:	61ab      	str	r3, [r5, #24]
  ret = aci_hal_write_config_data(BlueNRG_StackValue.ConfigValueOffsets,
 800e136:	4a6d      	ldr	r2, [pc, #436]	; (800e2ec <InitBleManager+0x690>)
 800e138:	7869      	ldrb	r1, [r5, #1]
 800e13a:	f816 0c1f 	ldrb.w	r0, [r6, #-31]
 800e13e:	f7fd ff7d 	bl	800c03c <aci_hal_write_config_data>
  if(ret != BLE_STATUS_SUCCESS){
 800e142:	4607      	mov	r7, r0
 800e144:	b108      	cbz	r0, 800e14a <InitBleManager+0x4ee>
    BLE_MANAGER_PRINTF("\r\nSetting Public BD_ADDR failed\r\n");
 800e146:	486a      	ldr	r0, [pc, #424]	; (800e2f0 <InitBleManager+0x694>)
 800e148:	e5b0      	b.n	800dcac <InitBleManager+0x50>
  ret = aci_gatt_init();
 800e14a:	f7fd fddd 	bl	800bd08 <aci_gatt_init>
  if(ret != BLE_STATUS_SUCCESS){
 800e14e:	4607      	mov	r7, r0
 800e150:	b108      	cbz	r0, 800e156 <InitBleManager+0x4fa>
    BLE_MANAGER_PRINTF("\r\nGATT_Init failed\r\n");
 800e152:	4868      	ldr	r0, [pc, #416]	; (800e2f4 <InitBleManager+0x698>)
 800e154:	e5aa      	b.n	800dcac <InitBleManager+0x50>
  ret = aci_gap_init(BlueNRG_StackValue.GAP_Roles, 0, (uint8_t) strlen(BlueNRG_StackValue.BoardName), &service_handle, &dev_name_char_handle, &appearance_char_handle);
 800e156:	4e68      	ldr	r6, [pc, #416]	; (800e2f8 <InitBleManager+0x69c>)
 800e158:	4630      	mov	r0, r6
 800e15a:	f7f6 f8c3 	bl	80042e4 <strlen>
 800e15e:	ab0a      	add	r3, sp, #40	; 0x28
 800e160:	9301      	str	r3, [sp, #4]
 800e162:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 800e166:	9300      	str	r3, [sp, #0]
 800e168:	b2c2      	uxtb	r2, r0
 800e16a:	4639      	mov	r1, r7
 800e16c:	78a8      	ldrb	r0, [r5, #2]
 800e16e:	ab09      	add	r3, sp, #36	; 0x24
 800e170:	f7fd fc7a 	bl	800ba68 <aci_gap_init>
  if(ret != BLE_STATUS_SUCCESS){
 800e174:	4607      	mov	r7, r0
 800e176:	b108      	cbz	r0, 800e17c <InitBleManager+0x520>
    BLE_MANAGER_PRINTF("\r\nGAP_Init failed\r\n");
 800e178:	4860      	ldr	r0, [pc, #384]	; (800e2fc <InitBleManager+0x6a0>)
 800e17a:	e597      	b.n	800dcac <InitBleManager+0x50>
                                   (uint8_t) strlen(BlueNRG_StackValue.BoardName), (uint8_t *)BlueNRG_StackValue.BoardName);
 800e17c:	4630      	mov	r0, r6
 800e17e:	f7f6 f8b1 	bl	80042e4 <strlen>
  ret = aci_gatt_update_char_value(service_handle, dev_name_char_handle, 0,
 800e182:	463a      	mov	r2, r7
 800e184:	b2c3      	uxtb	r3, r0
 800e186:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
 800e18a:	f8bd 0024 	ldrh.w	r0, [sp, #36]	; 0x24
 800e18e:	9600      	str	r6, [sp, #0]
 800e190:	f7fd fe74 	bl	800be7c <aci_gatt_update_char_value>
  if(ret != BLE_STATUS_SUCCESS){
 800e194:	4607      	mov	r7, r0
 800e196:	b108      	cbz	r0, 800e19c <InitBleManager+0x540>
    BLE_MANAGER_PRINTF("\r\naci_gatt_update_char_value failed\r\n");
 800e198:	4859      	ldr	r0, [pc, #356]	; (800e300 <InitBleManager+0x6a4>)
 800e19a:	e587      	b.n	800dcac <InitBleManager+0x50>
  if(BlueNRG_StackValue.EnableSecureConnection) {
 800e19c:	7d6b      	ldrb	r3, [r5, #21]
 800e19e:	b30b      	cbz	r3, 800e1e4 <InitBleManager+0x588>
    if(aci_gap_set_io_capability(BlueNRG_StackValue.IO_capabilities)==BLE_STATUS_SUCCESS) {
 800e1a0:	78e8      	ldrb	r0, [r5, #3]
 800e1a2:	f7fd fbe9 	bl	800b978 <aci_gap_set_io_capability>
 800e1a6:	b9c8      	cbnz	r0, 800e1dc <InitBleManager+0x580>
      BLE_MANAGER_PRINTF("I/O Capability Configurated\r\n");
 800e1a8:	4856      	ldr	r0, [pc, #344]	; (800e304 <InitBleManager+0x6a8>)
      BLE_MANAGER_PRINTF("Error Setting I/O Capability\r\n");
 800e1aa:	f00c fa03 	bl	801a5b4 <puts>
    if(BlueNRG_StackValue.EnableRandomSecurePIN) {
 800e1ae:	f8d5 c018 	ldr.w	ip, [r5, #24]
 800e1b2:	7f2f      	ldrb	r7, [r5, #28]
 800e1b4:	7928      	ldrb	r0, [r5, #4]
 800e1b6:	7969      	ldrb	r1, [r5, #5]
 800e1b8:	79aa      	ldrb	r2, [r5, #6]
 800e1ba:	79eb      	ldrb	r3, [r5, #7]
 800e1bc:	2601      	movs	r6, #1
      ret = aci_gap_set_authentication_requirement(BlueNRG_StackValue.AuthenticationRequirements,
 800e1be:	e9cd c603 	strd	ip, r6, [sp, #12]
    if(BlueNRG_StackValue.EnableRandomSecurePIN) {
 800e1c2:	b16f      	cbz	r7, 800e1e0 <InitBleManager+0x584>
      ret = aci_gap_set_authentication_requirement(BlueNRG_StackValue.AuthenticationRequirements,
 800e1c4:	9602      	str	r6, [sp, #8]
      ret = aci_gap_set_authentication_requirement(BlueNRG_StackValue.AuthenticationRequirements,
 800e1c6:	2607      	movs	r6, #7
 800e1c8:	f04f 0810 	mov.w	r8, #16
 800e1cc:	e9cd 6800 	strd	r6, r8, [sp]
    ret = aci_gap_set_authentication_requirement(BlueNRG_StackValue.AuthenticationRequirements,
 800e1d0:	f7fd fbf0 	bl	800b9b4 <aci_gap_set_authentication_requirement>
 800e1d4:	4607      	mov	r7, r0
  if (ret != BLE_STATUS_SUCCESS) {
 800e1d6:	b198      	cbz	r0, 800e200 <InitBleManager+0x5a4>
    BLE_MANAGER_PRINTF("\r\nGAP setting Authentication failed\r\n");
 800e1d8:	484b      	ldr	r0, [pc, #300]	; (800e308 <InitBleManager+0x6ac>)
 800e1da:	e567      	b.n	800dcac <InitBleManager+0x50>
      BLE_MANAGER_PRINTF("Error Setting I/O Capability\r\n");
 800e1dc:	484b      	ldr	r0, [pc, #300]	; (800e30c <InitBleManager+0x6b0>)
 800e1de:	e7e4      	b.n	800e1aa <InitBleManager+0x54e>
      ret = aci_gap_set_authentication_requirement(BlueNRG_StackValue.AuthenticationRequirements,
 800e1e0:	9702      	str	r7, [sp, #8]
 800e1e2:	e7f0      	b.n	800e1c6 <InitBleManager+0x56a>
    ret = aci_gap_set_authentication_requirement(BlueNRG_StackValue.AuthenticationRequirements,
 800e1e4:	9004      	str	r0, [sp, #16]
 800e1e6:	69ab      	ldr	r3, [r5, #24]
 800e1e8:	f04f 0e10 	mov.w	lr, #16
 800e1ec:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800e1f0:	2307      	movs	r3, #7
 800e1f2:	e9cd 3e00 	strd	r3, lr, [sp]
 800e1f6:	79eb      	ldrb	r3, [r5, #7]
 800e1f8:	79aa      	ldrb	r2, [r5, #6]
 800e1fa:	7969      	ldrb	r1, [r5, #5]
 800e1fc:	7928      	ldrb	r0, [r5, #4]
 800e1fe:	e7e7      	b.n	800e1d0 <InitBleManager+0x574>
  BLE_MANAGER_PRINTF("\r\nSERVER: BLE Stack Initialized \r\n"
 800e200:	7feb      	ldrb	r3, [r5, #31]
 800e202:	9303      	str	r3, [sp, #12]
 800e204:	f895 3020 	ldrb.w	r3, [r5, #32]
 800e208:	9302      	str	r3, [sp, #8]
 800e20a:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
 800e20e:	9301      	str	r3, [sp, #4]
 800e210:	f895 3022 	ldrb.w	r3, [r5, #34]	; 0x22
 800e214:	9300      	str	r3, [sp, #0]
 800e216:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
 800e21a:	f895 2024 	ldrb.w	r2, [r5, #36]	; 0x24
 800e21e:	4936      	ldr	r1, [pc, #216]	; (800e2f8 <InitBleManager+0x69c>)
 800e220:	483b      	ldr	r0, [pc, #236]	; (800e310 <InitBleManager+0x6b4>)
 800e222:	f00c f941 	bl	801a4a8 <iprintf>
  if(BlueNRG_StackValue.EnableSecureConnection) {
 800e226:	7d6b      	ldrb	r3, [r5, #21]
 800e228:	b143      	cbz	r3, 800e23c <InitBleManager+0x5e0>
    BLE_MANAGER_PRINTF("\t-->ONLY SECURE CONNECTION<--\r\n");
 800e22a:	483a      	ldr	r0, [pc, #232]	; (800e314 <InitBleManager+0x6b8>)
 800e22c:	f00c f9c2 	bl	801a5b4 <puts>
    if(BlueNRG_StackValue.EnableRandomSecurePIN) {
 800e230:	7f2b      	ldrb	r3, [r5, #28]
      BLE_MANAGER_PRINTF("\t\tRandom Key = %ld\r\n",BlueNRG_StackValue.SecurePIN);
 800e232:	69a9      	ldr	r1, [r5, #24]
    if(BlueNRG_StackValue.EnableRandomSecurePIN) {
 800e234:	b13b      	cbz	r3, 800e246 <InitBleManager+0x5ea>
      BLE_MANAGER_PRINTF("\t\tRandom Key = %ld\r\n",BlueNRG_StackValue.SecurePIN);
 800e236:	4838      	ldr	r0, [pc, #224]	; (800e318 <InitBleManager+0x6bc>)
      BLE_MANAGER_PRINTF("\t\tFixed  Key = %ld\r\n",BlueNRG_StackValue.SecurePIN);
 800e238:	f00c f936 	bl	801a4a8 <iprintf>
  aci_hal_set_tx_power_level(BlueNRG_StackValue.EnableHighPowerMode,
 800e23c:	7a69      	ldrb	r1, [r5, #9]
 800e23e:	7a28      	ldrb	r0, [r5, #8]
 800e240:	f7fd ff58 	bl	800c0f4 <aci_hal_set_tx_power_level>
 800e244:	e534      	b.n	800dcb0 <InitBleManager+0x54>
      BLE_MANAGER_PRINTF("\t\tFixed  Key = %ld\r\n",BlueNRG_StackValue.SecurePIN);
 800e246:	4835      	ldr	r0, [pc, #212]	; (800e31c <InitBleManager+0x6c0>)
 800e248:	e7f6      	b.n	800e238 <InitBleManager+0x5dc>
      BLE_MANAGER_PRINTF("Error: while adding Config Service\r\n");
 800e24a:	4835      	ldr	r0, [pc, #212]	; (800e320 <InitBleManager+0x6c4>)
 800e24c:	e5d0      	b.n	800ddf0 <InitBleManager+0x194>
  tBleStatus Status = BLE_ERROR_UNSPECIFIED;
 800e24e:	271f      	movs	r7, #31
 800e250:	e5d0      	b.n	800ddf4 <InitBleManager+0x198>
      BLE_MANAGER_PRINTF("Error: while adding Console Service\r\n");
 800e252:	4834      	ldr	r0, [pc, #208]	; (800e324 <InitBleManager+0x6c8>)
 800e254:	e67c      	b.n	800df50 <InitBleManager+0x2f4>
    BleCharsArray[BleChar]->Service_Handle = Service_Handle;
 800e256:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800e25a:	f8bd 8026 	ldrh.w	r8, [sp, #38]	; 0x26
 800e25e:	f8d3 51d0 	ldr.w	r5, [r3, #464]	; 0x1d0
    BLUENRG_memcpy(&char_uuid.Char_UUID_128, BleCharsArray[BleChar]->uuid, 16);
 800e262:	f10d 0c38 	add.w	ip, sp, #56	; 0x38
    BleCharsArray[BleChar]->Service_Handle = Service_Handle;
 800e266:	f8a5 801c 	strh.w	r8, [r5, #28]
    BLUENRG_memcpy(&char_uuid.Char_UUID_128, BleCharsArray[BleChar]->uuid, 16);
 800e26a:	462b      	mov	r3, r5
 800e26c:	f105 0910 	add.w	r9, r5, #16
 800e270:	4662      	mov	r2, ip
 800e272:	6818      	ldr	r0, [r3, #0]
 800e274:	6859      	ldr	r1, [r3, #4]
 800e276:	46e6      	mov	lr, ip
 800e278:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 800e27c:	3308      	adds	r3, #8
 800e27e:	454b      	cmp	r3, r9
 800e280:	46f4      	mov	ip, lr
 800e282:	d1f6      	bne.n	800e272 <InitBleManager+0x616>
    ret =  aci_gatt_add_char(BleCharsArray[BleChar]->Service_Handle,
 800e284:	f105 001a 	add.w	r0, r5, #26
 800e288:	8a6b      	ldrh	r3, [r5, #18]
 800e28a:	7c29      	ldrb	r1, [r5, #16]
 800e28c:	9005      	str	r0, [sp, #20]
 800e28e:	7e28      	ldrb	r0, [r5, #24]
 800e290:	9004      	str	r0, [sp, #16]
 800e292:	7de8      	ldrb	r0, [r5, #23]
 800e294:	9003      	str	r0, [sp, #12]
 800e296:	7da8      	ldrb	r0, [r5, #22]
 800e298:	9002      	str	r0, [sp, #8]
 800e29a:	7d68      	ldrb	r0, [r5, #21]
 800e29c:	9001      	str	r0, [sp, #4]
 800e29e:	7d28      	ldrb	r0, [r5, #20]
 800e2a0:	9000      	str	r0, [sp, #0]
 800e2a2:	4640      	mov	r0, r8
 800e2a4:	f7fd fd94 	bl	800bdd0 <aci_gatt_add_char>
    if (ret != BLE_STATUS_SUCCESS) {
 800e2a8:	b910      	cbnz	r0, 800e2b0 <InitBleManager+0x654>
  for(BleChar=UsedStandardBleChars;BleChar<UsedBleChars;BleChar++) {
 800e2aa:	3601      	adds	r6, #1
 800e2ac:	b2f6      	uxtb	r6, r6
 800e2ae:	e710      	b.n	800e0d2 <InitBleManager+0x476>
    ret =  aci_gatt_add_char(BleCharsArray[BleChar]->Service_Handle,
 800e2b0:	4607      	mov	r7, r0
      BLE_MANAGER_PRINTF("Error: while adding Features Service (Status= 0x%x)\r\n", Status);
 800e2b2:	481d      	ldr	r0, [pc, #116]	; (800e328 <InitBleManager+0x6cc>)
 800e2b4:	4639      	mov	r1, r7
 800e2b6:	e713      	b.n	800e0e0 <InitBleManager+0x484>
 800e2b8:	200035f0 	.word	0x200035f0
 800e2bc:	a5d5c51b 	.word	0xa5d5c51b
 800e2c0:	0800d645 	.word	0x0800d645
 800e2c4:	0800ee65 	.word	0x0800ee65
 800e2c8:	ac360002 	.word	0xac360002
 800e2cc:	200035e0 	.word	0x200035e0
 800e2d0:	10050014 	.word	0x10050014
 800e2d4:	9ab40002 	.word	0x9ab40002
 800e2d8:	000111e1 	.word	0x000111e1
 800e2dc:	08021812 	.word	0x08021812
 800e2e0:	0001869f 	.word	0x0001869f
 800e2e4:	080215ed 	.word	0x080215ed
 800e2e8:	0001869e 	.word	0x0001869e
 800e2ec:	200099c3 	.word	0x200099c3
 800e2f0:	08021608 	.word	0x08021608
 800e2f4:	08021629 	.word	0x08021629
 800e2f8:	200099b1 	.word	0x200099b1
 800e2fc:	0802163d 	.word	0x0802163d
 800e300:	08021650 	.word	0x08021650
 800e304:	08021675 	.word	0x08021675
 800e308:	080216b0 	.word	0x080216b0
 800e30c:	08021692 	.word	0x08021692
 800e310:	080216d5 	.word	0x080216d5
 800e314:	08021729 	.word	0x08021729
 800e318:	08021748 	.word	0x08021748
 800e31c:	0802175d 	.word	0x0802175d
 800e320:	080217a5 	.word	0x080217a5
 800e324:	080217ed 	.word	0x080217ed
 800e328:	08021847 	.word	0x08021847
 800e32c:	000211e1 	.word	0x000211e1

0800e330 <BLE_Command_TP_Parse>:
* @param  buffer_in: pointer to the input data.
* @param  len: buffer in length
* @retval Buffer out length.
*/
uint32_t BLE_Command_TP_Parse(uint8_t** buffer_out, uint8_t* buffer_in, uint32_t len) 
{
 800e330:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  static BLE_COMM_TP_Status_Typedef status = BLE_COMM_TP_WAIT_START;
  BLE_COMM_TP_Packet_Typedef packet_type;
  
  packet_type = (BLE_COMM_TP_Packet_Typedef) buffer_in[0];
  
  switch (status)
 800e334:	4e40      	ldr	r6, [pc, #256]	; (800e438 <BLE_Command_TP_Parse+0x108>)
{
 800e336:	4681      	mov	r9, r0
  switch (status)
 800e338:	f896 0280 	ldrb.w	r0, [r6, #640]	; 0x280
{
 800e33c:	4615      	mov	r5, r2
 800e33e:	460f      	mov	r7, r1
  packet_type = (BLE_COMM_TP_Packet_Typedef) buffer_in[0];
 800e340:	780a      	ldrb	r2, [r1, #0]
  switch (status)
 800e342:	46b0      	mov	r8, r6
 800e344:	b128      	cbz	r0, 800e352 <BLE_Command_TP_Parse+0x22>
 800e346:	2801      	cmp	r0, #1
 800e348:	d04c      	beq.n	800e3e4 <BLE_Command_TP_Parse+0xb4>
      memcpy(*buffer_out + tot_len, (uint8_t*) &buffer_in[3], (len - 3U));
      
      
      tot_len += len - 3U;
      status = BLE_COMM_TP_WAIT_END;
      buff_out_len = 0; 
 800e34a:	2000      	movs	r0, #0
      buff_out_len = 0; /* error */
    }
    break;
  }
  return buff_out_len;
}
 800e34c:	b003      	add	sp, #12
 800e34e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (packet_type == BLE_COMM_TP_START_PACKET) 
 800e352:	bb12      	cbnz	r2, 800e39a <BLE_Command_TP_Parse+0x6a>
      message_length |= buffer_in[2];
 800e354:	f8b1 1001 	ldrh.w	r1, [r1, #1]
 800e358:	ba49      	rev16	r1, r1
 800e35a:	b289      	uxth	r1, r1
      *buffer_out = (uint8_t*)BLE_MallocFunction((message_length) * sizeof(uint8_t));
 800e35c:	4608      	mov	r0, r1
 800e35e:	9101      	str	r1, [sp, #4]
 800e360:	f00b fb4e 	bl	8019a00 <malloc>
      if(*buffer_out == NULL) {
 800e364:	9901      	ldr	r1, [sp, #4]
      *buffer_out = (uint8_t*)BLE_MallocFunction((message_length) * sizeof(uint8_t));
 800e366:	f8c9 0000 	str.w	r0, [r9]
      if(*buffer_out == NULL) {
 800e36a:	b928      	cbnz	r0, 800e378 <BLE_Command_TP_Parse+0x48>
        BLE_MANAGER_PRINTF("Error: Mem alloc error [%d]: %d@%s\r\n", message_length, __LINE__, __FILE__);
 800e36c:	4b33      	ldr	r3, [pc, #204]	; (800e43c <BLE_Command_TP_Parse+0x10c>)
 800e36e:	4834      	ldr	r0, [pc, #208]	; (800e440 <BLE_Command_TP_Parse+0x110>)
 800e370:	f640 1261 	movw	r2, #2401	; 0x961
 800e374:	f00c f898 	bl	801a4a8 <iprintf>
      memcpy(*buffer_out + tot_len, (uint8_t*) &buffer_in[3], (len - 3U));
 800e378:	f8d8 4284 	ldr.w	r4, [r8, #644]	; 0x284
 800e37c:	f8d9 0000 	ldr.w	r0, [r9]
 800e380:	1eea      	subs	r2, r5, #3
 800e382:	1cf9      	adds	r1, r7, #3
 800e384:	4420      	add	r0, r4
 800e386:	f00b fb4b 	bl	8019a20 <memcpy>
      tot_len += len - 3U;
 800e38a:	1ee0      	subs	r0, r4, #3
 800e38c:	4428      	add	r0, r5
      status = BLE_COMM_TP_WAIT_END;
 800e38e:	2301      	movs	r3, #1
      tot_len += len - 3U;
 800e390:	f8c8 0284 	str.w	r0, [r8, #644]	; 0x284
      status = BLE_COMM_TP_WAIT_END;
 800e394:	f888 3280 	strb.w	r3, [r8, #640]	; 0x280
 800e398:	e7d7      	b.n	800e34a <BLE_Command_TP_Parse+0x1a>
    else if (packet_type == BLE_COMM_TP_START_END_PACKET) 
 800e39a:	2a20      	cmp	r2, #32
 800e39c:	d1d6      	bne.n	800e34c <BLE_Command_TP_Parse+0x1c>
      message_length |= buffer_in[2];
 800e39e:	f8b1 1001 	ldrh.w	r1, [r1, #1]
 800e3a2:	ba49      	rev16	r1, r1
 800e3a4:	b289      	uxth	r1, r1
      *buffer_out = (uint8_t*)BLE_MallocFunction((message_length) * sizeof(uint8_t));        
 800e3a6:	4608      	mov	r0, r1
 800e3a8:	9101      	str	r1, [sp, #4]
 800e3aa:	f00b fb29 	bl	8019a00 <malloc>
      if(*buffer_out == NULL) {
 800e3ae:	9901      	ldr	r1, [sp, #4]
      *buffer_out = (uint8_t*)BLE_MallocFunction((message_length) * sizeof(uint8_t));        
 800e3b0:	f8c9 0000 	str.w	r0, [r9]
      if(*buffer_out == NULL) {
 800e3b4:	b928      	cbnz	r0, 800e3c2 <BLE_Command_TP_Parse+0x92>
        BLE_MANAGER_PRINTF("Error: Mem alloc error [%d]: %d@%s\r\n", message_length, __LINE__, __FILE__);
 800e3b6:	4b21      	ldr	r3, [pc, #132]	; (800e43c <BLE_Command_TP_Parse+0x10c>)
 800e3b8:	4821      	ldr	r0, [pc, #132]	; (800e440 <BLE_Command_TP_Parse+0x110>)
 800e3ba:	f640 1275 	movw	r2, #2421	; 0x975
 800e3be:	f00c f873 	bl	801a4a8 <iprintf>
      memcpy(*buffer_out + tot_len, (uint8_t*) &buffer_in[3], (len - 3U));
 800e3c2:	f8d8 4284 	ldr.w	r4, [r8, #644]	; 0x284
 800e3c6:	f8d9 0000 	ldr.w	r0, [r9]
 800e3ca:	1eea      	subs	r2, r5, #3
 800e3cc:	4420      	add	r0, r4
 800e3ce:	1cf9      	adds	r1, r7, #3
 800e3d0:	f00b fb26 	bl	8019a20 <memcpy>
      tot_len += len - 3U;
 800e3d4:	3c03      	subs	r4, #3
      tot_len = 0;
 800e3d6:	2300      	movs	r3, #0
      tot_len += len - 3U;
 800e3d8:	1960      	adds	r0, r4, r5
      tot_len = 0;
 800e3da:	f8c8 3284 	str.w	r3, [r8, #644]	; 0x284
      status = BLE_COMM_TP_WAIT_START;
 800e3de:	f888 3280 	strb.w	r3, [r8, #640]	; 0x280
 800e3e2:	e7b3      	b.n	800e34c <BLE_Command_TP_Parse+0x1c>
    if (packet_type == BLE_COMM_TP_MIDDLE_PACKET) 
 800e3e4:	2a40      	cmp	r2, #64	; 0x40
 800e3e6:	d10d      	bne.n	800e404 <BLE_Command_TP_Parse+0xd4>
      memcpy(*buffer_out + tot_len, (uint8_t*) &buffer_in[1], (len - 1U));
 800e3e8:	f8d6 4284 	ldr.w	r4, [r6, #644]	; 0x284
 800e3ec:	f8d9 0000 	ldr.w	r0, [r9]
 800e3f0:	1e6a      	subs	r2, r5, #1
 800e3f2:	3101      	adds	r1, #1
 800e3f4:	4420      	add	r0, r4
 800e3f6:	f00b fb13 	bl	8019a20 <memcpy>
      tot_len += len - 1U;
 800e3fa:	1e60      	subs	r0, r4, #1
 800e3fc:	4428      	add	r0, r5
 800e3fe:	f8c6 0284 	str.w	r0, [r6, #644]	; 0x284
      buff_out_len = 0; 
 800e402:	e7a2      	b.n	800e34a <BLE_Command_TP_Parse+0x1a>
    else if (packet_type == BLE_COMM_TP_END_PACKET) 
 800e404:	2a80      	cmp	r2, #128	; 0x80
 800e406:	d110      	bne.n	800e42a <BLE_Command_TP_Parse+0xfa>
      memcpy(*buffer_out + tot_len, (uint8_t*) &buffer_in[1], (len - 1U));
 800e408:	f8d6 4284 	ldr.w	r4, [r6, #644]	; 0x284
 800e40c:	f8d9 0000 	ldr.w	r0, [r9]
 800e410:	1e6a      	subs	r2, r5, #1
 800e412:	4420      	add	r0, r4
 800e414:	3101      	adds	r1, #1
 800e416:	f00b fb03 	bl	8019a20 <memcpy>
      tot_len += len - 1U;
 800e41a:	3c01      	subs	r4, #1
      tot_len = 0;
 800e41c:	2300      	movs	r3, #0
      tot_len += len - 1U;
 800e41e:	1960      	adds	r0, r4, r5
      tot_len = 0;
 800e420:	f8c6 3284 	str.w	r3, [r6, #644]	; 0x284
      status = BLE_COMM_TP_WAIT_START; 
 800e424:	f886 3280 	strb.w	r3, [r6, #640]	; 0x280
 800e428:	e790      	b.n	800e34c <BLE_Command_TP_Parse+0x1c>
      status = BLE_COMM_TP_WAIT_START;
 800e42a:	2000      	movs	r0, #0
 800e42c:	f886 0280 	strb.w	r0, [r6, #640]	; 0x280
      tot_len = 0;
 800e430:	f8c6 0284 	str.w	r0, [r6, #644]	; 0x284
      buff_out_len = 0; /* error */
 800e434:	e78a      	b.n	800e34c <BLE_Command_TP_Parse+0x1c>
 800e436:	bf00      	nop
 800e438:	2000338c 	.word	0x2000338c
 800e43c:	08021302 	.word	0x08021302
 800e440:	0802187d 	.word	0x0802187d

0800e444 <BLE_Command_TP_Encapsulate>:
* @param  buffer_in: pointer to the input data.
* @param  len: buffer in length
* @retval Buffer out length.
*/
uint32_t BLE_Command_TP_Encapsulate(uint8_t* buffer_out, uint8_t* buffer_in, uint32_t len) 
{
 800e444:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t size = 0, tot_size = 0;
  uint32_t counter = 0;
  BLE_COMM_TP_Packet_Typedef packet_type = BLE_COMM_TP_START_PACKET;
 800e448:	2500      	movs	r5, #0
{
 800e44a:	4680      	mov	r8, r0
 800e44c:	4689      	mov	r9, r1
 800e44e:	4617      	mov	r7, r2
  uint32_t counter = 0;
 800e450:	462e      	mov	r6, r5
  uint32_t size = 0, tot_size = 0;
 800e452:	462c      	mov	r4, r5
      buffer_out[tot_size] = ((uint8_t) (BLE_COMM_TP_MIDDLE_PACKET));
      tot_size++;
      break;
    case BLE_COMM_TP_END_PACKET: 
      /*Last part of an BLE Command packet*/
      buffer_out[tot_size] = ((uint8_t) (BLE_COMM_TP_END_PACKET));
 800e454:	f04f 0a80 	mov.w	sl, #128	; 0x80
  while (counter < len) 
 800e458:	42be      	cmp	r6, r7
 800e45a:	d302      	bcc.n	800e462 <BLE_Command_TP_Encapsulate+0x1e>
    /*length variables update*/
    counter += size;
    tot_size += size;
  }
  return tot_size;
}
 800e45c:	4620      	mov	r0, r4
 800e45e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    size = MIN(19U, (len - counter));
 800e462:	1bba      	subs	r2, r7, r6
 800e464:	2a13      	cmp	r2, #19
 800e466:	4693      	mov	fp, r2
 800e468:	bf28      	it	cs
 800e46a:	f04f 0b13 	movcs.w	fp, #19
    if ((len - counter) <= 19U) 
 800e46e:	2a13      	cmp	r2, #19
 800e470:	eb08 0304 	add.w	r3, r8, r4
 800e474:	d804      	bhi.n	800e480 <BLE_Command_TP_Encapsulate+0x3c>
      if (counter == 0U) 
 800e476:	3401      	adds	r4, #1
 800e478:	b186      	cbz	r6, 800e49c <BLE_Command_TP_Encapsulate+0x58>
      buffer_out[tot_size] = ((uint8_t) (BLE_COMM_TP_END_PACKET));
 800e47a:	f883 a000 	strb.w	sl, [r3]
 800e47e:	e00f      	b.n	800e4a0 <BLE_Command_TP_Encapsulate+0x5c>
      buffer_out[tot_size] = ((uint8_t) (BLE_COMM_TP_START_PACKET));
 800e480:	701d      	strb	r5, [r3, #0]
      tot_size++;
 800e482:	3401      	adds	r4, #1
    switch (packet_type) 
 800e484:	b905      	cbnz	r5, 800e488 <BLE_Command_TP_Encapsulate+0x44>
      packet_type = BLE_COMM_TP_MIDDLE_PACKET;
 800e486:	2540      	movs	r5, #64	; 0x40
    memcpy((uint8_t*) &buffer_out[tot_size], (uint8_t *) &buffer_in[counter], size);
 800e488:	eb09 0106 	add.w	r1, r9, r6
 800e48c:	eb08 0004 	add.w	r0, r8, r4
 800e490:	465a      	mov	r2, fp
 800e492:	f00b fac5 	bl	8019a20 <memcpy>
    counter += size;
 800e496:	445e      	add	r6, fp
    tot_size += size;
 800e498:	445c      	add	r4, fp
 800e49a:	e7dd      	b.n	800e458 <BLE_Command_TP_Encapsulate+0x14>
      buffer_out[tot_size] = ((uint8_t) (BLE_COMM_TP_START_END_PACKET));
 800e49c:	2220      	movs	r2, #32
 800e49e:	701a      	strb	r2, [r3, #0]
      packet_type = BLE_COMM_TP_START_PACKET;
 800e4a0:	2500      	movs	r5, #0
      break;
 800e4a2:	e7f1      	b.n	800e488 <BLE_Command_TP_Encapsulate+0x44>

0800e4a4 <BLE_ExtConfiguration_Update>:
  if ((length % 19U) == 0U) {
 800e4a4:	2213      	movs	r2, #19
 800e4a6:	fbb1 f3f2 	udiv	r3, r1, r2
 800e4aa:	fb02 1213 	mls	r2, r2, r3, r1
{
 800e4ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e4b2:	4606      	mov	r6, r0
 800e4b4:	460c      	mov	r4, r1
  if ((length % 19U) == 0U) {
 800e4b6:	b972      	cbnz	r2, 800e4d6 <BLE_ExtConfiguration_Update+0x32>
    length_wTP = (length/19U)+length;
 800e4b8:	1858      	adds	r0, r3, r1
  JSON_string_command_wTP = BLE_MallocFunction(sizeof(uint8_t) * length_wTP);
 800e4ba:	f00b faa1 	bl	8019a00 <malloc>
  if(JSON_string_command_wTP==NULL) {
 800e4be:	4605      	mov	r5, r0
 800e4c0:	b960      	cbnz	r0, 800e4dc <BLE_ExtConfiguration_Update+0x38>
    BLE_MANAGER_PRINTF("Error: Mem calloc error [%ld]: %d@%s\r\n",length,__LINE__,__FILE__);
 800e4c2:	4b1f      	ldr	r3, [pc, #124]	; (800e540 <BLE_ExtConfiguration_Update+0x9c>)
 800e4c4:	481f      	ldr	r0, [pc, #124]	; (800e544 <BLE_ExtConfiguration_Update+0xa0>)
 800e4c6:	f44f 62cd 	mov.w	r2, #1640	; 0x668
 800e4ca:	4621      	mov	r1, r4
 800e4cc:	f00b ffec 	bl	801a4a8 <iprintf>
        return BLE_STATUS_ERROR;
 800e4d0:	2047      	movs	r0, #71	; 0x47
}
 800e4d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    length_wTP = (length/19U)+1U+length;
 800e4d6:	1c48      	adds	r0, r1, #1
 800e4d8:	4418      	add	r0, r3
 800e4da:	e7ee      	b.n	800e4ba <BLE_ExtConfiguration_Update+0x16>
    tot_len = BLE_Command_TP_Encapsulate(JSON_string_command_wTP, data, length);
 800e4dc:	4622      	mov	r2, r4
 800e4de:	4631      	mov	r1, r6
 800e4e0:	f7ff ffb0 	bl	800e444 <BLE_Command_TP_Encapsulate>
  ret = ACI_GATT_UPDATE_CHAR_VALUE(&BleCharExtConfig, 0, length,data);
 800e4e4:	f8df 8074 	ldr.w	r8, [pc, #116]	; 800e55c <BLE_ExtConfiguration_Update+0xb8>
    tot_len = BLE_Command_TP_Encapsulate(JSON_string_command_wTP, data, length);
 800e4e8:	4607      	mov	r7, r0
    j = 0;
 800e4ea:	2400      	movs	r4, #0
    while (j < tot_len) {
 800e4ec:	42bc      	cmp	r4, r7
 800e4ee:	d304      	bcc.n	800e4fa <BLE_ExtConfiguration_Update+0x56>
    BLE_FreeFunction(JSON_string_command_wTP);
 800e4f0:	4628      	mov	r0, r5
 800e4f2:	f00b fa8d 	bl	8019a10 <free>
    return BLE_STATUS_SUCCESS;
 800e4f6:	2000      	movs	r0, #0
 800e4f8:	e7eb      	b.n	800e4d2 <BLE_ExtConfiguration_Update+0x2e>
      len = MIN(20U, (tot_len - j));
 800e4fa:	1b3e      	subs	r6, r7, r4
 800e4fc:	2e14      	cmp	r6, #20
 800e4fe:	bf28      	it	cs
 800e500:	2614      	movcs	r6, #20
  ret = ACI_GATT_UPDATE_CHAR_VALUE(&BleCharExtConfig, 0, length,data);
 800e502:	192b      	adds	r3, r5, r4
 800e504:	b2f2      	uxtb	r2, r6
 800e506:	2100      	movs	r1, #0
 800e508:	4640      	mov	r0, r8
 800e50a:	f7ff f9ff 	bl	800d90c <safe_aci_gatt_update_char_value>
  if (ret != BLE_STATUS_SUCCESS){
 800e50e:	b190      	cbz	r0, 800e536 <BLE_ExtConfiguration_Update+0x92>
    if(BLE_StdErr_Service==BLE_SERV_ENABLE){
 800e510:	4b0d      	ldr	r3, [pc, #52]	; (800e548 <BLE_ExtConfiguration_Update+0xa4>)
 800e512:	781b      	ldrb	r3, [r3, #0]
 800e514:	2b01      	cmp	r3, #1
 800e516:	d10a      	bne.n	800e52e <BLE_ExtConfiguration_Update+0x8a>
      BytesToWrite = (uint8_t)sprintf((char *)BufferToWrite, "Error Updating Bat Char\n");
 800e518:	490c      	ldr	r1, [pc, #48]	; (800e54c <BLE_ExtConfiguration_Update+0xa8>)
 800e51a:	480d      	ldr	r0, [pc, #52]	; (800e550 <BLE_ExtConfiguration_Update+0xac>)
 800e51c:	f00c f8da 	bl	801a6d4 <strcpy>
 800e520:	4b0c      	ldr	r3, [pc, #48]	; (800e554 <BLE_ExtConfiguration_Update+0xb0>)
      Stderr_Update(BufferToWrite,BytesToWrite);
 800e522:	480b      	ldr	r0, [pc, #44]	; (800e550 <BLE_ExtConfiguration_Update+0xac>)
      BytesToWrite = (uint8_t)sprintf((char *)BufferToWrite, "Error Updating Bat Char\n");
 800e524:	2118      	movs	r1, #24
 800e526:	7019      	strb	r1, [r3, #0]
      Stderr_Update(BufferToWrite,BytesToWrite);
 800e528:	f7ff fa1c 	bl	800d964 <Stderr_Update>
 800e52c:	e7d0      	b.n	800e4d0 <BLE_ExtConfiguration_Update+0x2c>
      BLE_MANAGER_PRINTF("Error: Updating Bat Char\r\n");
 800e52e:	480a      	ldr	r0, [pc, #40]	; (800e558 <BLE_ExtConfiguration_Update+0xb4>)
 800e530:	f00c f840 	bl	801a5b4 <puts>
 800e534:	e7cc      	b.n	800e4d0 <BLE_ExtConfiguration_Update+0x2c>
      BLE_MANAGER_DELAY(20);
 800e536:	2014      	movs	r0, #20
 800e538:	f005 fd62 	bl	8014000 <HAL_Delay>
      j += len;
 800e53c:	4434      	add	r4, r6
 800e53e:	e7d5      	b.n	800e4ec <BLE_ExtConfiguration_Update+0x48>
 800e540:	08021302 	.word	0x08021302
 800e544:	080218a2 	.word	0x080218a2
 800e548:	200099f8 	.word	0x200099f8
 800e54c:	080218c9 	.word	0x080218c9
 800e550:	20009a30 	.word	0x20009a30
 800e554:	20009b3d 	.word	0x20009b3d
 800e558:	080218e2 	.word	0x080218e2
 800e55c:	200035e0 	.word	0x200035e0

0800e560 <Write_Request_ExtConfig.part.0>:
static void Write_Request_ExtConfig(void *VoidCharPointer,uint16_t attr_handle, uint16_t Offset, uint8_t data_length, uint8_t *att_data)
 800e560:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    CommandType = BLE_ExtConfig_ExtractCommandType(hs_command_buffer);
 800e564:	4d8d      	ldr	r5, [pc, #564]	; (800e79c <Write_Request_ExtConfig.part.0+0x23c>)
static void Write_Request_ExtConfig(void *VoidCharPointer,uint16_t attr_handle, uint16_t Offset, uint8_t data_length, uint8_t *att_data)
 800e566:	f5ad 6d03 	sub.w	sp, sp, #2096	; 0x830
  JSON_Value *tempJSON = json_parse_string( (char *) hs_command_buffer);
 800e56a:	f8d5 0288 	ldr.w	r0, [r5, #648]	; 0x288
 800e56e:	f002 fc79 	bl	8010e64 <json_parse_string>
 800e572:	4607      	mov	r7, r0
  JSON_Object *JSON_ParseHandler = json_value_get_object(tempJSON);
 800e574:	f001 ff27 	bl	80103c6 <json_value_get_object>
  if (json_object_dothas_value(JSON_ParseHandler,"command")) {
 800e578:	4989      	ldr	r1, [pc, #548]	; (800e7a0 <Write_Request_ExtConfig.part.0+0x240>)
  JSON_Object *JSON_ParseHandler = json_value_get_object(tempJSON);
 800e57a:	4681      	mov	r9, r0
  if (json_object_dothas_value(JSON_ParseHandler,"command")) {
 800e57c:	f001 ff44 	bl	8010408 <json_object_dothas_value>
 800e580:	b9e0      	cbnz	r0, 800e5bc <Write_Request_ExtConfig.part.0+0x5c>
  BLE_ExtConfigCommandType ReturnCode = EXT_CONFIG_COM_NOT_VALID;
 800e582:	2400      	movs	r4, #0
  json_value_free(tempJSON);
 800e584:	4638      	mov	r0, r7
 800e586:	3c01      	subs	r4, #1
 800e588:	f002 f8f2 	bl	8010770 <json_value_free>
    switch(CommandType)
 800e58c:	2c12      	cmp	r4, #18
 800e58e:	f200 839a 	bhi.w	800ecc6 <Write_Request_ExtConfig.part.0+0x766>
 800e592:	e8df f014 	tbh	[pc, r4, lsl #1]
 800e596:	002b      	.short	0x002b
 800e598:	0224020d 	.word	0x0224020d
 800e59c:	01ac0153 	.word	0x01ac0153
 800e5a0:	01e501d1 	.word	0x01e501d1
 800e5a4:	024601f9 	.word	0x024601f9
 800e5a8:	02580251 	.word	0x02580251
 800e5ac:	03010181 	.word	0x03010181
 800e5b0:	0284025f 	.word	0x0284025f
 800e5b4:	034b0299 	.word	0x034b0299
 800e5b8:	038b0376 	.word	0x038b0376
 800e5bc:	4e79      	ldr	r6, [pc, #484]	; (800e7a4 <Write_Request_ExtConfig.part.0+0x244>)
      if (strcmp(json_object_dotget_string(JSON_ParseHandler,"command"),StandardExtConfigCommands[SearchCommand].CommandString) == 0) {
 800e5be:	f8df a1e0 	ldr.w	sl, [pc, #480]	; 800e7a0 <Write_Request_ExtConfig.part.0+0x240>
  if (json_object_dothas_value(JSON_ParseHandler,"command")) {
 800e5c2:	f04f 0801 	mov.w	r8, #1
      if (strcmp(json_object_dotget_string(JSON_ParseHandler,"command"),StandardExtConfigCommands[SearchCommand].CommandString) == 0) {
 800e5c6:	4651      	mov	r1, sl
 800e5c8:	4648      	mov	r0, r9
 800e5ca:	f001 ff40 	bl	801044e <json_object_dotget_string>
 800e5ce:	68f1      	ldr	r1, [r6, #12]
 800e5d0:	f7f5 fe7e 	bl	80042d0 <strcmp>
 800e5d4:	b910      	cbnz	r0, 800e5dc <Write_Request_ExtConfig.part.0+0x7c>
        ReturnCode = StandardExtConfigCommands[SearchCommand].CommandType;
 800e5d6:	7a34      	ldrb	r4, [r6, #8]
    while((ReturnCode == EXT_CONFIG_COM_NOT_VALID) && (SearchCommand<((uint8_t)EXT_CONFIG_COMMAND_NUMBER))) {
 800e5d8:	2c00      	cmp	r4, #0
 800e5da:	d1d3      	bne.n	800e584 <Write_Request_ExtConfig.part.0+0x24>
 800e5dc:	f108 0801 	add.w	r8, r8, #1
 800e5e0:	f1b8 0f14 	cmp.w	r8, #20
 800e5e4:	f106 0608 	add.w	r6, r6, #8
 800e5e8:	d1ed      	bne.n	800e5c6 <Write_Request_ExtConfig.part.0+0x66>
 800e5ea:	e7ca      	b.n	800e582 <Write_Request_ExtConfig.part.0+0x22>
        JSON_Value *tempJSON = json_value_init_object();
 800e5ec:	f002 f964 	bl	80108b8 <json_value_init_object>
 800e5f0:	4606      	mov	r6, r0
        JSON_Object *tempJSON_Obj = json_value_get_object(tempJSON);
 800e5f2:	f001 fee8 	bl	80103c6 <json_value_get_object>
        if(CustomExtConfigReadCustomCommandsCallback!=NULL) {
 800e5f6:	4b6c      	ldr	r3, [pc, #432]	; (800e7a8 <Write_Request_ExtConfig.part.0+0x248>)
 800e5f8:	681c      	ldr	r4, [r3, #0]
        JSON_Object *tempJSON_Obj = json_value_get_object(tempJSON);
 800e5fa:	4607      	mov	r7, r0
        if(CustomExtConfigReadCustomCommandsCallback!=NULL) {
 800e5fc:	b12c      	cbz	r4, 800e60a <Write_Request_ExtConfig.part.0+0xaa>
          WritingPointer+=sprintf((char *)LocalBufferToWrite+WritingPointer,"%s,",StandardExtConfigCommands[EXT_CONFIG_COM_READ_CUSTOM_COMMAND].CommandString);
 800e5fe:	4a6b      	ldr	r2, [pc, #428]	; (800e7ac <Write_Request_ExtConfig.part.0+0x24c>)
 800e600:	496b      	ldr	r1, [pc, #428]	; (800e7b0 <Write_Request_ExtConfig.part.0+0x250>)
 800e602:	a80c      	add	r0, sp, #48	; 0x30
 800e604:	f00b fff6 	bl	801a5f4 <siprintf>
 800e608:	2412      	movs	r4, #18
        if(CustomExtConfigReadSensorsConfigCommandsCallback!=NULL) {
 800e60a:	4b6a      	ldr	r3, [pc, #424]	; (800e7b4 <Write_Request_ExtConfig.part.0+0x254>)
 800e60c:	681b      	ldr	r3, [r3, #0]
 800e60e:	b133      	cbz	r3, 800e61e <Write_Request_ExtConfig.part.0+0xbe>
           WritingPointer+=sprintf((char *)LocalBufferToWrite+WritingPointer,"%s,",StandardExtConfigCommands[EXT_CONFIG_COM_READ_SENSOR_CONFIG].CommandString);
 800e610:	ab0c      	add	r3, sp, #48	; 0x30
 800e612:	1918      	adds	r0, r3, r4
 800e614:	4a68      	ldr	r2, [pc, #416]	; (800e7b8 <Write_Request_ExtConfig.part.0+0x258>)
 800e616:	4966      	ldr	r1, [pc, #408]	; (800e7b0 <Write_Request_ExtConfig.part.0+0x250>)
 800e618:	f00b ffec 	bl	801a5f4 <siprintf>
 800e61c:	3412      	adds	r4, #18
        if(CustomExtConfigRebootOnDFUModeCommandCallback!=NULL) {
 800e61e:	4b67      	ldr	r3, [pc, #412]	; (800e7bc <Write_Request_ExtConfig.part.0+0x25c>)
 800e620:	681b      	ldr	r3, [r3, #0]
 800e622:	b133      	cbz	r3, 800e632 <Write_Request_ExtConfig.part.0+0xd2>
          WritingPointer+=sprintf((char *)LocalBufferToWrite+WritingPointer,"%s,",StandardExtConfigCommands[EXT_CONFIG_COM_SET_DFU].CommandString);
 800e624:	ab0c      	add	r3, sp, #48	; 0x30
 800e626:	1918      	adds	r0, r3, r4
 800e628:	4a65      	ldr	r2, [pc, #404]	; (800e7c0 <Write_Request_ExtConfig.part.0+0x260>)
 800e62a:	4961      	ldr	r1, [pc, #388]	; (800e7b0 <Write_Request_ExtConfig.part.0+0x250>)
 800e62c:	f00b ffe2 	bl	801a5f4 <siprintf>
 800e630:	3404      	adds	r4, #4
        if(CustomExtConfigPowerOffCommandCallback!=NULL) {
 800e632:	4b64      	ldr	r3, [pc, #400]	; (800e7c4 <Write_Request_ExtConfig.part.0+0x264>)
 800e634:	681b      	ldr	r3, [r3, #0]
 800e636:	b133      	cbz	r3, 800e646 <Write_Request_ExtConfig.part.0+0xe6>
          WritingPointer+=sprintf((char *)LocalBufferToWrite+WritingPointer,"%s,",StandardExtConfigCommands[EXT_CONFIG_COM_SET_OFF].CommandString);
 800e638:	ab0c      	add	r3, sp, #48	; 0x30
 800e63a:	1918      	adds	r0, r3, r4
 800e63c:	4a62      	ldr	r2, [pc, #392]	; (800e7c8 <Write_Request_ExtConfig.part.0+0x268>)
 800e63e:	495c      	ldr	r1, [pc, #368]	; (800e7b0 <Write_Request_ExtConfig.part.0+0x250>)
 800e640:	f00b ffd8 	bl	801a5f4 <siprintf>
 800e644:	3404      	adds	r4, #4
        if(CustomExtConfigSetNameCommandCallback!=NULL) {
 800e646:	4b61      	ldr	r3, [pc, #388]	; (800e7cc <Write_Request_ExtConfig.part.0+0x26c>)
 800e648:	681b      	ldr	r3, [r3, #0]
 800e64a:	b133      	cbz	r3, 800e65a <Write_Request_ExtConfig.part.0+0xfa>
          WritingPointer+=sprintf((char *)LocalBufferToWrite+WritingPointer,"%s,",StandardExtConfigCommands[EXT_CONFIG_COM_SET_NAME].CommandString);
 800e64c:	ab0c      	add	r3, sp, #48	; 0x30
 800e64e:	1918      	adds	r0, r3, r4
 800e650:	4a5f      	ldr	r2, [pc, #380]	; (800e7d0 <Write_Request_ExtConfig.part.0+0x270>)
 800e652:	4957      	ldr	r1, [pc, #348]	; (800e7b0 <Write_Request_ExtConfig.part.0+0x250>)
 800e654:	f00b ffce 	bl	801a5f4 <siprintf>
 800e658:	3408      	adds	r4, #8
        if(CustomExtConfigSetTimeCommandCallback!=NULL) {
 800e65a:	4b5e      	ldr	r3, [pc, #376]	; (800e7d4 <Write_Request_ExtConfig.part.0+0x274>)
 800e65c:	681b      	ldr	r3, [r3, #0]
 800e65e:	b133      	cbz	r3, 800e66e <Write_Request_ExtConfig.part.0+0x10e>
          WritingPointer+=sprintf((char *)LocalBufferToWrite+WritingPointer,"%s,",StandardExtConfigCommands[EXT_CONFIG_COM_SET_TIME].CommandString);
 800e660:	ab0c      	add	r3, sp, #48	; 0x30
 800e662:	1918      	adds	r0, r3, r4
 800e664:	4a5c      	ldr	r2, [pc, #368]	; (800e7d8 <Write_Request_ExtConfig.part.0+0x278>)
 800e666:	4952      	ldr	r1, [pc, #328]	; (800e7b0 <Write_Request_ExtConfig.part.0+0x250>)
 800e668:	f00b ffc4 	bl	801a5f4 <siprintf>
 800e66c:	3408      	adds	r4, #8
        if(CustomExtConfigSetDateCommandCallback!=NULL) {
 800e66e:	4b5b      	ldr	r3, [pc, #364]	; (800e7dc <Write_Request_ExtConfig.part.0+0x27c>)
 800e670:	681b      	ldr	r3, [r3, #0]
 800e672:	b133      	cbz	r3, 800e682 <Write_Request_ExtConfig.part.0+0x122>
          WritingPointer+=sprintf((char *)LocalBufferToWrite+WritingPointer,"%s,",StandardExtConfigCommands[EXT_CONFIG_COM_SET_DATE].CommandString);
 800e674:	ab0c      	add	r3, sp, #48	; 0x30
 800e676:	1918      	adds	r0, r3, r4
 800e678:	4a59      	ldr	r2, [pc, #356]	; (800e7e0 <Write_Request_ExtConfig.part.0+0x280>)
 800e67a:	494d      	ldr	r1, [pc, #308]	; (800e7b0 <Write_Request_ExtConfig.part.0+0x250>)
 800e67c:	f00b ffba 	bl	801a5f4 <siprintf>
 800e680:	3408      	adds	r4, #8
        if(CustomExtConfigSetWiFiCommandCallback!=NULL) {
 800e682:	4b58      	ldr	r3, [pc, #352]	; (800e7e4 <Write_Request_ExtConfig.part.0+0x284>)
 800e684:	681b      	ldr	r3, [r3, #0]
 800e686:	b133      	cbz	r3, 800e696 <Write_Request_ExtConfig.part.0+0x136>
          WritingPointer+=sprintf((char *)LocalBufferToWrite+WritingPointer,"%s,",StandardExtConfigCommands[EXT_CONFIG_COM_SET_WIFI].CommandString);
 800e688:	ab0c      	add	r3, sp, #48	; 0x30
 800e68a:	1918      	adds	r0, r3, r4
 800e68c:	4a56      	ldr	r2, [pc, #344]	; (800e7e8 <Write_Request_ExtConfig.part.0+0x288>)
 800e68e:	4948      	ldr	r1, [pc, #288]	; (800e7b0 <Write_Request_ExtConfig.part.0+0x250>)
 800e690:	f00b ffb0 	bl	801a5f4 <siprintf>
 800e694:	3408      	adds	r4, #8
        if(CustomExtConfigChangePinCommandCallback!=NULL) {
 800e696:	4b55      	ldr	r3, [pc, #340]	; (800e7ec <Write_Request_ExtConfig.part.0+0x28c>)
 800e698:	681b      	ldr	r3, [r3, #0]
 800e69a:	b133      	cbz	r3, 800e6aa <Write_Request_ExtConfig.part.0+0x14a>
          WritingPointer+=sprintf((char *)LocalBufferToWrite+WritingPointer,"%s,",StandardExtConfigCommands[EXT_CONFIG_COM_CHANGE_PIN].CommandString);
 800e69c:	ab0c      	add	r3, sp, #48	; 0x30
 800e69e:	1918      	adds	r0, r3, r4
 800e6a0:	4a53      	ldr	r2, [pc, #332]	; (800e7f0 <Write_Request_ExtConfig.part.0+0x290>)
 800e6a2:	4943      	ldr	r1, [pc, #268]	; (800e7b0 <Write_Request_ExtConfig.part.0+0x250>)
 800e6a4:	f00b ffa6 	bl	801a5f4 <siprintf>
 800e6a8:	340a      	adds	r4, #10
        if(CustomExtConfigClearDBCommandCallback!=NULL) {
 800e6aa:	4b52      	ldr	r3, [pc, #328]	; (800e7f4 <Write_Request_ExtConfig.part.0+0x294>)
 800e6ac:	681b      	ldr	r3, [r3, #0]
 800e6ae:	b133      	cbz	r3, 800e6be <Write_Request_ExtConfig.part.0+0x15e>
          WritingPointer+=sprintf((char *)LocalBufferToWrite+WritingPointer,"%s,",StandardExtConfigCommands[EXT_CONFIG_COM_CLEAR_DB].CommandString);
 800e6b0:	ab0c      	add	r3, sp, #48	; 0x30
 800e6b2:	1918      	adds	r0, r3, r4
 800e6b4:	4a50      	ldr	r2, [pc, #320]	; (800e7f8 <Write_Request_ExtConfig.part.0+0x298>)
 800e6b6:	493e      	ldr	r1, [pc, #248]	; (800e7b0 <Write_Request_ExtConfig.part.0+0x250>)
 800e6b8:	f00b ff9c 	bl	801a5f4 <siprintf>
 800e6bc:	3408      	adds	r4, #8
        if(CustomExtConfigReadCertCommandCallback!=NULL) {
 800e6be:	4b4f      	ldr	r3, [pc, #316]	; (800e7fc <Write_Request_ExtConfig.part.0+0x29c>)
 800e6c0:	681b      	ldr	r3, [r3, #0]
 800e6c2:	b133      	cbz	r3, 800e6d2 <Write_Request_ExtConfig.part.0+0x172>
          WritingPointer+=sprintf((char *)LocalBufferToWrite+WritingPointer,"%s,",StandardExtConfigCommands[EXT_CONFIG_COM_READ_CERT].CommandString);
 800e6c4:	ab0c      	add	r3, sp, #48	; 0x30
 800e6c6:	1918      	adds	r0, r3, r4
 800e6c8:	4a4d      	ldr	r2, [pc, #308]	; (800e800 <Write_Request_ExtConfig.part.0+0x2a0>)
 800e6ca:	4939      	ldr	r1, [pc, #228]	; (800e7b0 <Write_Request_ExtConfig.part.0+0x250>)
 800e6cc:	f00b ff92 	bl	801a5f4 <siprintf>
 800e6d0:	3409      	adds	r4, #9
        if(CustomExtConfigSetCertCommandCallback!=NULL) {
 800e6d2:	4b4c      	ldr	r3, [pc, #304]	; (800e804 <Write_Request_ExtConfig.part.0+0x2a4>)
 800e6d4:	681b      	ldr	r3, [r3, #0]
 800e6d6:	b133      	cbz	r3, 800e6e6 <Write_Request_ExtConfig.part.0+0x186>
          WritingPointer+=sprintf((char *)LocalBufferToWrite+WritingPointer,"%s,",StandardExtConfigCommands[EXT_CONFIG_COM_SET_CERT].CommandString);
 800e6d8:	ab0c      	add	r3, sp, #48	; 0x30
 800e6da:	1918      	adds	r0, r3, r4
 800e6dc:	4a4a      	ldr	r2, [pc, #296]	; (800e808 <Write_Request_ExtConfig.part.0+0x2a8>)
 800e6de:	4934      	ldr	r1, [pc, #208]	; (800e7b0 <Write_Request_ExtConfig.part.0+0x250>)
 800e6e0:	f00b ff88 	bl	801a5f4 <siprintf>
 800e6e4:	3408      	adds	r4, #8
        if(CustomExtConfigUidCommandCallback!=NULL) {
 800e6e6:	4b49      	ldr	r3, [pc, #292]	; (800e80c <Write_Request_ExtConfig.part.0+0x2ac>)
 800e6e8:	681b      	ldr	r3, [r3, #0]
 800e6ea:	b133      	cbz	r3, 800e6fa <Write_Request_ExtConfig.part.0+0x19a>
          WritingPointer+=sprintf((char *)LocalBufferToWrite+WritingPointer,"%s,",StandardExtConfigCommands[EXT_CONFIG_COM_READ_UID].CommandString);
 800e6ec:	ab0c      	add	r3, sp, #48	; 0x30
 800e6ee:	1918      	adds	r0, r3, r4
 800e6f0:	4a47      	ldr	r2, [pc, #284]	; (800e810 <Write_Request_ExtConfig.part.0+0x2b0>)
 800e6f2:	492f      	ldr	r1, [pc, #188]	; (800e7b0 <Write_Request_ExtConfig.part.0+0x250>)
 800e6f4:	f00b ff7e 	bl	801a5f4 <siprintf>
 800e6f8:	3404      	adds	r4, #4
        if(CustomExtConfigInfoCommandCallback!=NULL) {
 800e6fa:	4b46      	ldr	r3, [pc, #280]	; (800e814 <Write_Request_ExtConfig.part.0+0x2b4>)
 800e6fc:	681b      	ldr	r3, [r3, #0]
 800e6fe:	b133      	cbz	r3, 800e70e <Write_Request_ExtConfig.part.0+0x1ae>
          WritingPointer+=sprintf((char *)LocalBufferToWrite+WritingPointer,"%s,",StandardExtConfigCommands[EXT_CONFIG_COM_READ_INFO].CommandString);
 800e700:	ab0c      	add	r3, sp, #48	; 0x30
 800e702:	1918      	adds	r0, r3, r4
 800e704:	4a44      	ldr	r2, [pc, #272]	; (800e818 <Write_Request_ExtConfig.part.0+0x2b8>)
 800e706:	492a      	ldr	r1, [pc, #168]	; (800e7b0 <Write_Request_ExtConfig.part.0+0x250>)
 800e708:	f00b ff74 	bl	801a5f4 <siprintf>
 800e70c:	3405      	adds	r4, #5
        if(CustomExtConfigHelpCommandCallback!=NULL) {
 800e70e:	4b43      	ldr	r3, [pc, #268]	; (800e81c <Write_Request_ExtConfig.part.0+0x2bc>)
 800e710:	681b      	ldr	r3, [r3, #0]
 800e712:	b133      	cbz	r3, 800e722 <Write_Request_ExtConfig.part.0+0x1c2>
          WritingPointer+=sprintf((char *)LocalBufferToWrite+WritingPointer,"%s,",StandardExtConfigCommands[EXT_CONFIG_COM_READ_HELP].CommandString);
 800e714:	ab0c      	add	r3, sp, #48	; 0x30
 800e716:	1918      	adds	r0, r3, r4
 800e718:	4a41      	ldr	r2, [pc, #260]	; (800e820 <Write_Request_ExtConfig.part.0+0x2c0>)
 800e71a:	4925      	ldr	r1, [pc, #148]	; (800e7b0 <Write_Request_ExtConfig.part.0+0x250>)
 800e71c:	f00b ff6a 	bl	801a5f4 <siprintf>
 800e720:	3405      	adds	r4, #5
        if(CustomExtConfigPowerStatusCommandCallback!=NULL) {
 800e722:	4b40      	ldr	r3, [pc, #256]	; (800e824 <Write_Request_ExtConfig.part.0+0x2c4>)
 800e724:	681b      	ldr	r3, [r3, #0]
 800e726:	b133      	cbz	r3, 800e736 <Write_Request_ExtConfig.part.0+0x1d6>
          WritingPointer+=sprintf((char *)LocalBufferToWrite+WritingPointer,"%s,",StandardExtConfigCommands[EXT_CONFIG_COM_READ_POWER].CommandString);
 800e728:	ab0c      	add	r3, sp, #48	; 0x30
 800e72a:	1918      	adds	r0, r3, r4
 800e72c:	4a3e      	ldr	r2, [pc, #248]	; (800e828 <Write_Request_ExtConfig.part.0+0x2c8>)
 800e72e:	4920      	ldr	r1, [pc, #128]	; (800e7b0 <Write_Request_ExtConfig.part.0+0x250>)
 800e730:	f00b ff60 	bl	801a5f4 <siprintf>
 800e734:	340c      	adds	r4, #12
        if(CustomExtConfigVersionFwCommandCallback!=NULL) {
 800e736:	4b3d      	ldr	r3, [pc, #244]	; (800e82c <Write_Request_ExtConfig.part.0+0x2cc>)
 800e738:	681b      	ldr	r3, [r3, #0]
 800e73a:	b163      	cbz	r3, 800e756 <Write_Request_ExtConfig.part.0+0x1f6>
          WritingPointer+=sprintf((char *)LocalBufferToWrite+WritingPointer,"%s,",StandardExtConfigCommands[EXT_CONFIG_COM_READ_VER_FW].CommandString);
 800e73c:	ab0c      	add	r3, sp, #48	; 0x30
 800e73e:	1918      	adds	r0, r3, r4
 800e740:	4a3b      	ldr	r2, [pc, #236]	; (800e830 <Write_Request_ExtConfig.part.0+0x2d0>)
 800e742:	491b      	ldr	r1, [pc, #108]	; (800e7b0 <Write_Request_ExtConfig.part.0+0x250>)
 800e744:	f00b ff56 	bl	801a5f4 <siprintf>
 800e748:	340a      	adds	r4, #10
          LocalBufferToWrite[WritingPointer-1]=0U;
 800e74a:	ab0c      	add	r3, sp, #48	; 0x30
 800e74c:	441c      	add	r4, r3
 800e74e:	2300      	movs	r3, #0
 800e750:	f804 3c01 	strb.w	r3, [r4, #-1]
 800e754:	e001      	b.n	800e75a <Write_Request_ExtConfig.part.0+0x1fa>
        if(WritingPointer!=0) {
 800e756:	2c00      	cmp	r4, #0
 800e758:	d1f7      	bne.n	800e74a <Write_Request_ExtConfig.part.0+0x1ea>
        BLE_MANAGER_PRINTF("Command ReadCommand\r\n");
 800e75a:	4836      	ldr	r0, [pc, #216]	; (800e834 <Write_Request_ExtConfig.part.0+0x2d4>)
 800e75c:	f00b ff2a 	bl	801a5b4 <puts>
        json_object_dotset_string(tempJSON_Obj, "Commands", (char *)LocalBufferToWrite);
 800e760:	4935      	ldr	r1, [pc, #212]	; (800e838 <Write_Request_ExtConfig.part.0+0x2d8>)
 800e762:	aa0c      	add	r2, sp, #48	; 0x30
        json_object_dotset_string(tempJSON_Obj, "UID", (char *)LocalBufferToWrite);
 800e764:	4638      	mov	r0, r7
 800e766:	f002 fc8f 	bl	8011088 <json_object_dotset_string>
        JSON_string_command = json_serialize_to_string(tempJSON);
 800e76a:	4630      	mov	r0, r6
 800e76c:	f002 fbbc 	bl	8010ee8 <json_serialize_to_string>
 800e770:	4604      	mov	r4, r0
        JSON_size = json_serialization_size(tempJSON);
 800e772:	4630      	mov	r0, r6
 800e774:	f002 fb8b 	bl	8010e8e <json_serialization_size>
 800e778:	4601      	mov	r1, r0
        BLE_ExtConfiguration_Update((uint8_t*) JSON_string_command,JSON_size);
 800e77a:	4620      	mov	r0, r4
 800e77c:	f7ff fe92 	bl	800e4a4 <BLE_ExtConfiguration_Update>
        BLE_FreeFunction(JSON_string_command);
 800e780:	4620      	mov	r0, r4
 800e782:	f00b f945 	bl	8019a10 <free>
        json_value_free(tempJSON);
 800e786:	4630      	mov	r0, r6
 800e788:	f001 fff2 	bl	8010770 <json_value_free>
    BLE_FreeFunction(hs_command_buffer);
 800e78c:	f8d5 0288 	ldr.w	r0, [r5, #648]	; 0x288
 800e790:	f00b f93e 	bl	8019a10 <free>
}
 800e794:	f50d 6d03 	add.w	sp, sp, #2096	; 0x830
 800e798:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e79c:	2000338c 	.word	0x2000338c
 800e7a0:	080218fc 	.word	0x080218fc
 800e7a4:	0801fe28 	.word	0x0801fe28
 800e7a8:	20009b30 	.word	0x20009b30
 800e7ac:	08021904 	.word	0x08021904
 800e7b0:	08021916 	.word	0x08021916
 800e7b4:	200099e4 	.word	0x200099e4
 800e7b8:	0802191a 	.word	0x0802191a
 800e7bc:	20009a1c 	.word	0x20009a1c
 800e7c0:	0802192c 	.word	0x0802192c
 800e7c4:	200099e8 	.word	0x200099e8
 800e7c8:	08021930 	.word	0x08021930
 800e7cc:	200099cc 	.word	0x200099cc
 800e7d0:	08021934 	.word	0x08021934
 800e7d4:	20009a08 	.word	0x20009a08
 800e7d8:	0802193c 	.word	0x0802193c
 800e7dc:	20009a0c 	.word	0x20009a0c
 800e7e0:	08021944 	.word	0x08021944
 800e7e4:	20009b38 	.word	0x20009b38
 800e7e8:	0802194c 	.word	0x0802194c
 800e7ec:	20009a10 	.word	0x20009a10
 800e7f0:	08021954 	.word	0x08021954
 800e7f4:	20009a24 	.word	0x20009a24
 800e7f8:	0802195e 	.word	0x0802195e
 800e7fc:	200099e0 	.word	0x200099e0
 800e800:	08021966 	.word	0x08021966
 800e804:	200099d0 	.word	0x200099d0
 800e808:	0802196f 	.word	0x0802196f
 800e80c:	20009a14 	.word	0x20009a14
 800e810:	08021977 	.word	0x08021977
 800e814:	200099d4 	.word	0x200099d4
 800e818:	0802197b 	.word	0x0802197b
 800e81c:	20009a00 	.word	0x20009a00
 800e820:	08021980 	.word	0x08021980
 800e824:	200099dc 	.word	0x200099dc
 800e828:	08021985 	.word	0x08021985
 800e82c:	20009a2c 	.word	0x20009a2c
 800e830:	08021991 	.word	0x08021991
 800e834:	0802199b 	.word	0x0802199b
 800e838:	08021a7c 	.word	0x08021a7c
      if(CustomExtConfigUidCommandCallback!=NULL) {
 800e83c:	4cad      	ldr	r4, [pc, #692]	; (800eaf4 <Write_Request_ExtConfig.part.0+0x594>)
 800e83e:	6823      	ldr	r3, [r4, #0]
 800e840:	2b00      	cmp	r3, #0
 800e842:	d0a3      	beq.n	800e78c <Write_Request_ExtConfig.part.0+0x22c>
        JSON_Value *tempJSON = json_value_init_object();
 800e844:	f002 f838 	bl	80108b8 <json_value_init_object>
 800e848:	4606      	mov	r6, r0
        JSON_Object *tempJSON_Obj = json_value_get_object(tempJSON);
 800e84a:	f001 fdbc 	bl	80103c6 <json_value_get_object>
 800e84e:	4607      	mov	r7, r0
        BLE_MANAGER_PRINTF("Command UID\r\n");
 800e850:	48a9      	ldr	r0, [pc, #676]	; (800eaf8 <Write_Request_ExtConfig.part.0+0x598>)
 800e852:	f00b feaf 	bl	801a5b4 <puts>
        CustomExtConfigUidCommandCallback(&uid);
 800e856:	6823      	ldr	r3, [r4, #0]
 800e858:	a80b      	add	r0, sp, #44	; 0x2c
 800e85a:	4798      	blx	r3
                uid[ 3],uid[ 2],uid[ 1],uid[ 0],
 800e85c:	990b      	ldr	r1, [sp, #44]	; 0x2c
        sprintf((char *)LocalBufferToWrite,"%.2X%.2X%.2X%.2X%.2X%.2X%.2X%.2X%.2X%.2X%.2X%.2X",
 800e85e:	7a08      	ldrb	r0, [r1, #8]
 800e860:	78ca      	ldrb	r2, [r1, #3]
 800e862:	788b      	ldrb	r3, [r1, #2]
 800e864:	9009      	str	r0, [sp, #36]	; 0x24
 800e866:	7a48      	ldrb	r0, [r1, #9]
 800e868:	9008      	str	r0, [sp, #32]
 800e86a:	7a88      	ldrb	r0, [r1, #10]
 800e86c:	9007      	str	r0, [sp, #28]
 800e86e:	7ac8      	ldrb	r0, [r1, #11]
 800e870:	9006      	str	r0, [sp, #24]
 800e872:	7908      	ldrb	r0, [r1, #4]
 800e874:	9005      	str	r0, [sp, #20]
 800e876:	7948      	ldrb	r0, [r1, #5]
 800e878:	9004      	str	r0, [sp, #16]
 800e87a:	7988      	ldrb	r0, [r1, #6]
 800e87c:	9003      	str	r0, [sp, #12]
 800e87e:	79c8      	ldrb	r0, [r1, #7]
 800e880:	9002      	str	r0, [sp, #8]
 800e882:	7808      	ldrb	r0, [r1, #0]
 800e884:	9001      	str	r0, [sp, #4]
 800e886:	7849      	ldrb	r1, [r1, #1]
 800e888:	9100      	str	r1, [sp, #0]
 800e88a:	a80c      	add	r0, sp, #48	; 0x30
 800e88c:	499b      	ldr	r1, [pc, #620]	; (800eafc <Write_Request_ExtConfig.part.0+0x59c>)
 800e88e:	f00b feb1 	bl	801a5f4 <siprintf>
        json_object_dotset_string(tempJSON_Obj, "UID", (char *)LocalBufferToWrite);
 800e892:	499b      	ldr	r1, [pc, #620]	; (800eb00 <Write_Request_ExtConfig.part.0+0x5a0>)
 800e894:	aa0c      	add	r2, sp, #48	; 0x30
 800e896:	e765      	b.n	800e764 <Write_Request_ExtConfig.part.0+0x204>
      if(CustomExtConfigReadSensorsConfigCommandsCallback!=NULL) {
 800e898:	4e9a      	ldr	r6, [pc, #616]	; (800eb04 <Write_Request_ExtConfig.part.0+0x5a4>)
 800e89a:	6833      	ldr	r3, [r6, #0]
 800e89c:	2b00      	cmp	r3, #0
 800e89e:	f43f af75 	beq.w	800e78c <Write_Request_ExtConfig.part.0+0x22c>
        JSON_Value *tempJSON = json_value_init_object();
 800e8a2:	f002 f809 	bl	80108b8 <json_value_init_object>
 800e8a6:	4607      	mov	r7, r0
        JSON_Object *tempJSON_Obj = json_value_get_object(tempJSON);
 800e8a8:	f001 fd8d 	bl	80103c6 <json_value_get_object>
 800e8ac:	4604      	mov	r4, r0
        BLE_MANAGER_PRINTF("Command ReadSensorsConfigCommand\r\n");
 800e8ae:	4896      	ldr	r0, [pc, #600]	; (800eb08 <Write_Request_ExtConfig.part.0+0x5a8>)
 800e8b0:	f00b fe80 	bl	801a5b4 <puts>
        json_object_dotset_value(tempJSON_Obj, "sensor", json_value_init_array());
 800e8b4:	f002 f820 	bl	80108f8 <json_value_init_array>
 800e8b8:	4994      	ldr	r1, [pc, #592]	; (800eb0c <Write_Request_ExtConfig.part.0+0x5ac>)
 800e8ba:	4602      	mov	r2, r0
 800e8bc:	4620      	mov	r0, r4
 800e8be:	f002 fb96 	bl	8010fee <json_object_dotset_value>
        JSON_SensorArray = json_object_dotget_array(tempJSON_Obj, "sensor");
 800e8c2:	4992      	ldr	r1, [pc, #584]	; (800eb0c <Write_Request_ExtConfig.part.0+0x5ac>)
        JSON_SensorArray = json_object_dotget_array(tempJSON_Obj, "CustomCommands");
 800e8c4:	4620      	mov	r0, r4
 800e8c6:	f001 fdb5 	bl	8010434 <json_object_dotget_array>
        CustomExtConfigReadCustomCommandsCallback(JSON_SensorArray);
 800e8ca:	6833      	ldr	r3, [r6, #0]
 800e8cc:	4798      	blx	r3
        JSON_string_command = json_serialize_to_string(tempJSON);
 800e8ce:	4638      	mov	r0, r7
 800e8d0:	f002 fb0a 	bl	8010ee8 <json_serialize_to_string>
 800e8d4:	4604      	mov	r4, r0
        JSON_size = json_serialization_size(tempJSON);
 800e8d6:	4638      	mov	r0, r7
 800e8d8:	f002 fad9 	bl	8010e8e <json_serialization_size>
 800e8dc:	4601      	mov	r1, r0
        BLE_ExtConfiguration_Update((uint8_t*) JSON_string_command,JSON_size);
 800e8de:	4620      	mov	r0, r4
 800e8e0:	f7ff fde0 	bl	800e4a4 <BLE_ExtConfiguration_Update>
        BLE_FreeFunction(JSON_string_command);
 800e8e4:	4620      	mov	r0, r4
 800e8e6:	f00b f893 	bl	8019a10 <free>
        json_value_free(tempJSON);
 800e8ea:	4638      	mov	r0, r7
 800e8ec:	e74c      	b.n	800e788 <Write_Request_ExtConfig.part.0+0x228>
      if(CustomExtConfigVersionFwCommandCallback!=NULL) {
 800e8ee:	4f88      	ldr	r7, [pc, #544]	; (800eb10 <Write_Request_ExtConfig.part.0+0x5b0>)
 800e8f0:	683b      	ldr	r3, [r7, #0]
 800e8f2:	2b00      	cmp	r3, #0
 800e8f4:	f43f af4a 	beq.w	800e78c <Write_Request_ExtConfig.part.0+0x22c>
        JSON_Value *tempJSON = json_value_init_object();
 800e8f8:	f001 ffde 	bl	80108b8 <json_value_init_object>
 800e8fc:	4606      	mov	r6, r0
        JSON_Object *tempJSON_Obj = json_value_get_object(tempJSON);
 800e8fe:	f001 fd62 	bl	80103c6 <json_value_get_object>
 800e902:	4604      	mov	r4, r0
        BLE_MANAGER_PRINTF("Command VersionFw\r\n");
 800e904:	4883      	ldr	r0, [pc, #524]	; (800eb14 <Write_Request_ExtConfig.part.0+0x5b4>)
 800e906:	f00b fe55 	bl	801a5b4 <puts>
        CustomExtConfigVersionFwCommandCallback(LocalBufferToWrite);
 800e90a:	683b      	ldr	r3, [r7, #0]
 800e90c:	a80c      	add	r0, sp, #48	; 0x30
 800e90e:	4798      	blx	r3
        json_object_dotset_string(tempJSON_Obj, "VersionFw", (char *)LocalBufferToWrite);
 800e910:	4981      	ldr	r1, [pc, #516]	; (800eb18 <Write_Request_ExtConfig.part.0+0x5b8>)
 800e912:	aa0c      	add	r2, sp, #48	; 0x30
        json_object_dotset_string(tempJSON_Obj, "Info", (char *)LocalBufferToWrite);
 800e914:	4620      	mov	r0, r4
 800e916:	f002 fbb7 	bl	8011088 <json_object_dotset_string>
        JSON_string_command = json_serialize_to_string(tempJSON);
 800e91a:	4630      	mov	r0, r6
 800e91c:	f002 fae4 	bl	8010ee8 <json_serialize_to_string>
 800e920:	4604      	mov	r4, r0
        JSON_size = json_serialization_size(tempJSON);
 800e922:	4630      	mov	r0, r6
 800e924:	f002 fab3 	bl	8010e8e <json_serialization_size>
 800e928:	4601      	mov	r1, r0
        BLE_ExtConfiguration_Update((uint8_t*) JSON_string_command,JSON_size);
 800e92a:	4620      	mov	r0, r4
 800e92c:	f7ff fdba 	bl	800e4a4 <BLE_ExtConfiguration_Update>
        BLE_FreeFunction(JSON_string_command);
 800e930:	4620      	mov	r0, r4
 800e932:	f00b f86d 	bl	8019a10 <free>
 800e936:	e729      	b.n	800e78c <Write_Request_ExtConfig.part.0+0x22c>
      if(CustomExtConfigInfoCommandCallback!=NULL) {
 800e938:	4f78      	ldr	r7, [pc, #480]	; (800eb1c <Write_Request_ExtConfig.part.0+0x5bc>)
 800e93a:	683b      	ldr	r3, [r7, #0]
 800e93c:	2b00      	cmp	r3, #0
 800e93e:	f43f af25 	beq.w	800e78c <Write_Request_ExtConfig.part.0+0x22c>
        JSON_Value *tempJSON = json_value_init_object();
 800e942:	f001 ffb9 	bl	80108b8 <json_value_init_object>
 800e946:	4606      	mov	r6, r0
        JSON_Object *tempJSON_Obj = json_value_get_object(tempJSON);
 800e948:	f001 fd3d 	bl	80103c6 <json_value_get_object>
 800e94c:	4604      	mov	r4, r0
        BLE_MANAGER_PRINTF("Command Info\r\n");
 800e94e:	4874      	ldr	r0, [pc, #464]	; (800eb20 <Write_Request_ExtConfig.part.0+0x5c0>)
 800e950:	f00b fe30 	bl	801a5b4 <puts>
        CustomExtConfigInfoCommandCallback(LocalBufferToWrite);
 800e954:	683b      	ldr	r3, [r7, #0]
 800e956:	a80c      	add	r0, sp, #48	; 0x30
 800e958:	4798      	blx	r3
        json_object_dotset_string(tempJSON_Obj, "Info", (char *)LocalBufferToWrite);
 800e95a:	4972      	ldr	r1, [pc, #456]	; (800eb24 <Write_Request_ExtConfig.part.0+0x5c4>)
 800e95c:	aa0c      	add	r2, sp, #48	; 0x30
 800e95e:	e7d9      	b.n	800e914 <Write_Request_ExtConfig.part.0+0x3b4>
      if(CustomExtConfigHelpCommandCallback!=NULL) {
 800e960:	4f71      	ldr	r7, [pc, #452]	; (800eb28 <Write_Request_ExtConfig.part.0+0x5c8>)
 800e962:	683b      	ldr	r3, [r7, #0]
 800e964:	2b00      	cmp	r3, #0
 800e966:	f43f af11 	beq.w	800e78c <Write_Request_ExtConfig.part.0+0x22c>
        JSON_Value *tempJSON = json_value_init_object();
 800e96a:	f001 ffa5 	bl	80108b8 <json_value_init_object>
 800e96e:	4606      	mov	r6, r0
        JSON_Object *tempJSON_Obj = json_value_get_object(tempJSON);
 800e970:	f001 fd29 	bl	80103c6 <json_value_get_object>
 800e974:	4604      	mov	r4, r0
        BLE_MANAGER_PRINTF("Command Help\r\n");
 800e976:	486d      	ldr	r0, [pc, #436]	; (800eb2c <Write_Request_ExtConfig.part.0+0x5cc>)
 800e978:	f00b fe1c 	bl	801a5b4 <puts>
        CustomExtConfigHelpCommandCallback(LocalBufferToWrite);
 800e97c:	683b      	ldr	r3, [r7, #0]
 800e97e:	a80c      	add	r0, sp, #48	; 0x30
 800e980:	4798      	blx	r3
        json_object_dotset_string(tempJSON_Obj, "Help", (char *)LocalBufferToWrite);
 800e982:	496b      	ldr	r1, [pc, #428]	; (800eb30 <Write_Request_ExtConfig.part.0+0x5d0>)
 800e984:	aa0c      	add	r2, sp, #48	; 0x30
 800e986:	e7c5      	b.n	800e914 <Write_Request_ExtConfig.part.0+0x3b4>
       if(CustomExtConfigPowerStatusCommandCallback!=NULL) {
 800e988:	4f6a      	ldr	r7, [pc, #424]	; (800eb34 <Write_Request_ExtConfig.part.0+0x5d4>)
 800e98a:	683b      	ldr	r3, [r7, #0]
 800e98c:	2b00      	cmp	r3, #0
 800e98e:	f43f aefd 	beq.w	800e78c <Write_Request_ExtConfig.part.0+0x22c>
        JSON_Value *tempJSON = json_value_init_object();
 800e992:	f001 ff91 	bl	80108b8 <json_value_init_object>
 800e996:	4606      	mov	r6, r0
        JSON_Object *tempJSON_Obj = json_value_get_object(tempJSON);
 800e998:	f001 fd15 	bl	80103c6 <json_value_get_object>
 800e99c:	4604      	mov	r4, r0
        BLE_MANAGER_PRINTF("Command PowerStatus\r\n");
 800e99e:	4866      	ldr	r0, [pc, #408]	; (800eb38 <Write_Request_ExtConfig.part.0+0x5d8>)
 800e9a0:	f00b fe08 	bl	801a5b4 <puts>
        CustomExtConfigPowerStatusCommandCallback(LocalBufferToWrite);
 800e9a4:	683b      	ldr	r3, [r7, #0]
 800e9a6:	a80c      	add	r0, sp, #48	; 0x30
 800e9a8:	4798      	blx	r3
        json_object_dotset_string(tempJSON_Obj, "PowerStatus", (char *)LocalBufferToWrite);
 800e9aa:	4964      	ldr	r1, [pc, #400]	; (800eb3c <Write_Request_ExtConfig.part.0+0x5dc>)
 800e9ac:	aa0c      	add	r2, sp, #48	; 0x30
 800e9ae:	e7b1      	b.n	800e914 <Write_Request_ExtConfig.part.0+0x3b4>
      if(CustomExtConfigReadCustomCommandsCallback!=NULL) {
 800e9b0:	4e63      	ldr	r6, [pc, #396]	; (800eb40 <Write_Request_ExtConfig.part.0+0x5e0>)
 800e9b2:	6833      	ldr	r3, [r6, #0]
 800e9b4:	2b00      	cmp	r3, #0
 800e9b6:	f43f aee9 	beq.w	800e78c <Write_Request_ExtConfig.part.0+0x22c>
        JSON_Value *tempJSON = json_value_init_object();
 800e9ba:	f001 ff7d 	bl	80108b8 <json_value_init_object>
 800e9be:	4607      	mov	r7, r0
        JSON_Object *tempJSON_Obj = json_value_get_object(tempJSON);
 800e9c0:	f001 fd01 	bl	80103c6 <json_value_get_object>
 800e9c4:	4604      	mov	r4, r0
        BLE_MANAGER_PRINTF("Command ReadCustomCommand\r\n");
 800e9c6:	485f      	ldr	r0, [pc, #380]	; (800eb44 <Write_Request_ExtConfig.part.0+0x5e4>)
 800e9c8:	f00b fdf4 	bl	801a5b4 <puts>
        json_object_dotset_value(tempJSON_Obj, "CustomCommands", json_value_init_array());
 800e9cc:	f001 ff94 	bl	80108f8 <json_value_init_array>
 800e9d0:	495d      	ldr	r1, [pc, #372]	; (800eb48 <Write_Request_ExtConfig.part.0+0x5e8>)
 800e9d2:	4602      	mov	r2, r0
 800e9d4:	4620      	mov	r0, r4
 800e9d6:	f002 fb0a 	bl	8010fee <json_object_dotset_value>
        JSON_SensorArray = json_object_dotget_array(tempJSON_Obj, "CustomCommands");
 800e9da:	495b      	ldr	r1, [pc, #364]	; (800eb48 <Write_Request_ExtConfig.part.0+0x5e8>)
 800e9dc:	e772      	b.n	800e8c4 <Write_Request_ExtConfig.part.0+0x364>
      if(CustomExtConfigReadCertCommandCallback!=NULL) {
 800e9de:	4f5b      	ldr	r7, [pc, #364]	; (800eb4c <Write_Request_ExtConfig.part.0+0x5ec>)
 800e9e0:	683b      	ldr	r3, [r7, #0]
 800e9e2:	2b00      	cmp	r3, #0
 800e9e4:	f43f aed2 	beq.w	800e78c <Write_Request_ExtConfig.part.0+0x22c>
        JSON_Value *tempJSON = json_value_init_object();
 800e9e8:	f001 ff66 	bl	80108b8 <json_value_init_object>
 800e9ec:	4604      	mov	r4, r0
        JSON_Object *tempJSON_Obj = json_value_get_object(tempJSON);
 800e9ee:	f001 fcea 	bl	80103c6 <json_value_get_object>
 800e9f2:	4606      	mov	r6, r0
        BLE_MANAGER_PRINTF("Command PowerStatus\r\n");
 800e9f4:	4850      	ldr	r0, [pc, #320]	; (800eb38 <Write_Request_ExtConfig.part.0+0x5d8>)
 800e9f6:	f00b fddd 	bl	801a5b4 <puts>
        CustomExtConfigReadCertCommandCallback(LocalBufferToWrite);
 800e9fa:	683b      	ldr	r3, [r7, #0]
 800e9fc:	a80c      	add	r0, sp, #48	; 0x30
 800e9fe:	4798      	blx	r3
        json_object_dotset_string(tempJSON_Obj, "Certificate", (char *)LocalBufferToWrite);
 800ea00:	4953      	ldr	r1, [pc, #332]	; (800eb50 <Write_Request_ExtConfig.part.0+0x5f0>)
 800ea02:	aa0c      	add	r2, sp, #48	; 0x30
 800ea04:	4630      	mov	r0, r6
 800ea06:	f002 fb3f 	bl	8011088 <json_object_dotset_string>
        JSON_string_command = json_serialize_to_string(tempJSON);
 800ea0a:	4620      	mov	r0, r4
 800ea0c:	f002 fa6c 	bl	8010ee8 <json_serialize_to_string>
 800ea10:	4606      	mov	r6, r0
        JSON_size = json_serialization_size(tempJSON);
 800ea12:	4620      	mov	r0, r4
 800ea14:	f002 fa3b 	bl	8010e8e <json_serialization_size>
 800ea18:	4601      	mov	r1, r0
        BLE_ExtConfiguration_Update((uint8_t*) JSON_string_command,JSON_size);
 800ea1a:	4630      	mov	r0, r6
 800ea1c:	f7ff fd42 	bl	800e4a4 <BLE_ExtConfiguration_Update>
 800ea20:	e6b4      	b.n	800e78c <Write_Request_ExtConfig.part.0+0x22c>
      if(CustomExtConfigRebootOnDFUModeCommandCallback!=NULL) {
 800ea22:	4c4c      	ldr	r4, [pc, #304]	; (800eb54 <Write_Request_ExtConfig.part.0+0x5f4>)
 800ea24:	6823      	ldr	r3, [r4, #0]
 800ea26:	2b00      	cmp	r3, #0
 800ea28:	f43f aeb0 	beq.w	800e78c <Write_Request_ExtConfig.part.0+0x22c>
        BLE_MANAGER_PRINTF("Command DFU\r\n");
 800ea2c:	484a      	ldr	r0, [pc, #296]	; (800eb58 <Write_Request_ExtConfig.part.0+0x5f8>)
        BLE_MANAGER_PRINTF("Command ClearDB\r\n");
 800ea2e:	f00b fdc1 	bl	801a5b4 <puts>
        CustomExtConfigClearDBCommandCallback();
 800ea32:	6823      	ldr	r3, [r4, #0]
 800ea34:	4798      	blx	r3
 800ea36:	e6a9      	b.n	800e78c <Write_Request_ExtConfig.part.0+0x22c>
      if(CustomExtConfigPowerOffCommandCallback!=NULL) {
 800ea38:	4c48      	ldr	r4, [pc, #288]	; (800eb5c <Write_Request_ExtConfig.part.0+0x5fc>)
 800ea3a:	6823      	ldr	r3, [r4, #0]
 800ea3c:	2b00      	cmp	r3, #0
 800ea3e:	f43f aea5 	beq.w	800e78c <Write_Request_ExtConfig.part.0+0x22c>
        BLE_MANAGER_PRINTF("Command Off\r\n");
 800ea42:	4847      	ldr	r0, [pc, #284]	; (800eb60 <Write_Request_ExtConfig.part.0+0x600>)
 800ea44:	e7f3      	b.n	800ea2e <Write_Request_ExtConfig.part.0+0x4ce>
      if(CustomExtConfigClearDBCommandCallback!=NULL) {
 800ea46:	4c47      	ldr	r4, [pc, #284]	; (800eb64 <Write_Request_ExtConfig.part.0+0x604>)
 800ea48:	6823      	ldr	r3, [r4, #0]
 800ea4a:	2b00      	cmp	r3, #0
 800ea4c:	f43f ae9e 	beq.w	800e78c <Write_Request_ExtConfig.part.0+0x22c>
        BLE_MANAGER_PRINTF("Command ClearDB\r\n");
 800ea50:	4845      	ldr	r0, [pc, #276]	; (800eb68 <Write_Request_ExtConfig.part.0+0x608>)
 800ea52:	e7ec      	b.n	800ea2e <Write_Request_ExtConfig.part.0+0x4ce>
      if(CustomExtConfigSetDateCommandCallback!=NULL) {
 800ea54:	4f45      	ldr	r7, [pc, #276]	; (800eb6c <Write_Request_ExtConfig.part.0+0x60c>)
 800ea56:	683b      	ldr	r3, [r7, #0]
 800ea58:	2b00      	cmp	r3, #0
 800ea5a:	f43f ae97 	beq.w	800e78c <Write_Request_ExtConfig.part.0+0x22c>
        BLE_MANAGER_PRINTF("Command SetDate\r\n");
 800ea5e:	4844      	ldr	r0, [pc, #272]	; (800eb70 <Write_Request_ExtConfig.part.0+0x610>)
 800ea60:	f00b fda8 	bl	801a5b4 <puts>
        JSON_Value *tempJSON = json_parse_string( (char *) hs_command_buffer);
 800ea64:	f8d5 0288 	ldr.w	r0, [r5, #648]	; 0x288
 800ea68:	f002 f9fc 	bl	8010e64 <json_parse_string>
 800ea6c:	4606      	mov	r6, r0
        JSON_Object *JSON_ParseHandler = json_value_get_object(tempJSON);
 800ea6e:	f001 fcaa 	bl	80103c6 <json_value_get_object>
        if (strcmp(json_object_dotget_string(JSON_ParseHandler,"command"),"SetDate") == 0) {
 800ea72:	4940      	ldr	r1, [pc, #256]	; (800eb74 <Write_Request_ExtConfig.part.0+0x614>)
        JSON_Object *JSON_ParseHandler = json_value_get_object(tempJSON);
 800ea74:	4604      	mov	r4, r0
        if (strcmp(json_object_dotget_string(JSON_ParseHandler,"command"),"SetDate") == 0) {
 800ea76:	f001 fcea 	bl	801044e <json_object_dotget_string>
 800ea7a:	493f      	ldr	r1, [pc, #252]	; (800eb78 <Write_Request_ExtConfig.part.0+0x618>)
        if (strcmp(json_object_dotget_string(JSON_ParseHandler,"command"),"SetCert") == 0) {
 800ea7c:	f7f5 fc28 	bl	80042d0 <strcmp>
 800ea80:	2800      	cmp	r0, #0
 800ea82:	f47f ae80 	bne.w	800e786 <Write_Request_ExtConfig.part.0+0x226>
          if(json_object_dothas_value(JSON_ParseHandler,"argString")) {
 800ea86:	493d      	ldr	r1, [pc, #244]	; (800eb7c <Write_Request_ExtConfig.part.0+0x61c>)
 800ea88:	4620      	mov	r0, r4
 800ea8a:	f001 fcbd 	bl	8010408 <json_object_dothas_value>
 800ea8e:	2800      	cmp	r0, #0
 800ea90:	f43f ae79 	beq.w	800e786 <Write_Request_ExtConfig.part.0+0x226>
            uint8_t *NewCertificate = (uint8_t *)json_object_dotget_string(JSON_ParseHandler,"argString");
 800ea94:	4939      	ldr	r1, [pc, #228]	; (800eb7c <Write_Request_ExtConfig.part.0+0x61c>)
 800ea96:	4620      	mov	r0, r4
 800ea98:	f001 fcd9 	bl	801044e <json_object_dotget_string>
 800ea9c:	e0ee      	b.n	800ec7c <Write_Request_ExtConfig.part.0+0x71c>
       if(CustomExtConfigSetTimeCommandCallback!=NULL) {
 800ea9e:	4f38      	ldr	r7, [pc, #224]	; (800eb80 <Write_Request_ExtConfig.part.0+0x620>)
 800eaa0:	683b      	ldr	r3, [r7, #0]
 800eaa2:	2b00      	cmp	r3, #0
 800eaa4:	f43f ae72 	beq.w	800e78c <Write_Request_ExtConfig.part.0+0x22c>
        BLE_MANAGER_PRINTF("Command SetTime\r\n");
 800eaa8:	4836      	ldr	r0, [pc, #216]	; (800eb84 <Write_Request_ExtConfig.part.0+0x624>)
 800eaaa:	f00b fd83 	bl	801a5b4 <puts>
        JSON_Value *tempJSON = json_parse_string( (char *) hs_command_buffer);
 800eaae:	f8d5 0288 	ldr.w	r0, [r5, #648]	; 0x288
 800eab2:	f002 f9d7 	bl	8010e64 <json_parse_string>
 800eab6:	4606      	mov	r6, r0
        JSON_Object *JSON_ParseHandler = json_value_get_object(tempJSON);
 800eab8:	f001 fc85 	bl	80103c6 <json_value_get_object>
        if (strcmp(json_object_dotget_string(JSON_ParseHandler,"command"),"SetTime") == 0) {
 800eabc:	492d      	ldr	r1, [pc, #180]	; (800eb74 <Write_Request_ExtConfig.part.0+0x614>)
        JSON_Object *JSON_ParseHandler = json_value_get_object(tempJSON);
 800eabe:	4604      	mov	r4, r0
        if (strcmp(json_object_dotget_string(JSON_ParseHandler,"command"),"SetTime") == 0) {
 800eac0:	f001 fcc5 	bl	801044e <json_object_dotget_string>
 800eac4:	4930      	ldr	r1, [pc, #192]	; (800eb88 <Write_Request_ExtConfig.part.0+0x628>)
 800eac6:	e7d9      	b.n	800ea7c <Write_Request_ExtConfig.part.0+0x51c>
       if(CustomExtConfigSetNameCommandCallback!=NULL) {
 800eac8:	4f30      	ldr	r7, [pc, #192]	; (800eb8c <Write_Request_ExtConfig.part.0+0x62c>)
 800eaca:	683b      	ldr	r3, [r7, #0]
 800eacc:	2b00      	cmp	r3, #0
 800eace:	f43f ae5d 	beq.w	800e78c <Write_Request_ExtConfig.part.0+0x22c>
        BLE_MANAGER_PRINTF("Command SetName\r\n");
 800ead2:	482f      	ldr	r0, [pc, #188]	; (800eb90 <Write_Request_ExtConfig.part.0+0x630>)
 800ead4:	f00b fd6e 	bl	801a5b4 <puts>
        JSON_Value *tempJSON = json_parse_string( (char *) hs_command_buffer);
 800ead8:	f8d5 0288 	ldr.w	r0, [r5, #648]	; 0x288
 800eadc:	f002 f9c2 	bl	8010e64 <json_parse_string>
 800eae0:	4606      	mov	r6, r0
        JSON_Object *JSON_ParseHandler = json_value_get_object(tempJSON);
 800eae2:	f001 fc70 	bl	80103c6 <json_value_get_object>
        if (strcmp(json_object_dotget_string(JSON_ParseHandler,"command"),"SetName") == 0) {
 800eae6:	4923      	ldr	r1, [pc, #140]	; (800eb74 <Write_Request_ExtConfig.part.0+0x614>)
        JSON_Object *JSON_ParseHandler = json_value_get_object(tempJSON);
 800eae8:	4604      	mov	r4, r0
        if (strcmp(json_object_dotget_string(JSON_ParseHandler,"command"),"SetName") == 0) {
 800eaea:	f001 fcb0 	bl	801044e <json_object_dotget_string>
 800eaee:	4929      	ldr	r1, [pc, #164]	; (800eb94 <Write_Request_ExtConfig.part.0+0x634>)
 800eaf0:	e7c4      	b.n	800ea7c <Write_Request_ExtConfig.part.0+0x51c>
 800eaf2:	bf00      	nop
 800eaf4:	20009a14 	.word	0x20009a14
 800eaf8:	080219b0 	.word	0x080219b0
 800eafc:	080219bd 	.word	0x080219bd
 800eb00:	08021977 	.word	0x08021977
 800eb04:	200099e4 	.word	0x200099e4
 800eb08:	080219ee 	.word	0x080219ee
 800eb0c:	08021a10 	.word	0x08021a10
 800eb10:	20009a2c 	.word	0x20009a2c
 800eb14:	08021a17 	.word	0x08021a17
 800eb18:	08021991 	.word	0x08021991
 800eb1c:	200099d4 	.word	0x200099d4
 800eb20:	08021a2a 	.word	0x08021a2a
 800eb24:	0802197b 	.word	0x0802197b
 800eb28:	20009a00 	.word	0x20009a00
 800eb2c:	08021a38 	.word	0x08021a38
 800eb30:	08021980 	.word	0x08021980
 800eb34:	200099dc 	.word	0x200099dc
 800eb38:	08021a46 	.word	0x08021a46
 800eb3c:	08021985 	.word	0x08021985
 800eb40:	20009b30 	.word	0x20009b30
 800eb44:	08021a5b 	.word	0x08021a5b
 800eb48:	08021a76 	.word	0x08021a76
 800eb4c:	200099e0 	.word	0x200099e0
 800eb50:	08021a85 	.word	0x08021a85
 800eb54:	20009a1c 	.word	0x20009a1c
 800eb58:	08021a91 	.word	0x08021a91
 800eb5c:	200099e8 	.word	0x200099e8
 800eb60:	08021a9e 	.word	0x08021a9e
 800eb64:	20009a24 	.word	0x20009a24
 800eb68:	08021aab 	.word	0x08021aab
 800eb6c:	20009a0c 	.word	0x20009a0c
 800eb70:	08021abc 	.word	0x08021abc
 800eb74:	080218fc 	.word	0x080218fc
 800eb78:	08021944 	.word	0x08021944
 800eb7c:	08021acd 	.word	0x08021acd
 800eb80:	20009a08 	.word	0x20009a08
 800eb84:	08021ad7 	.word	0x08021ad7
 800eb88:	0802193c 	.word	0x0802193c
 800eb8c:	200099cc 	.word	0x200099cc
 800eb90:	08021ae8 	.word	0x08021ae8
 800eb94:	08021934 	.word	0x08021934
      if(CustomExtConfigSetWiFiCommandCallback!=NULL) {
 800eb98:	f8df 82c4 	ldr.w	r8, [pc, #708]	; 800ee60 <Write_Request_ExtConfig.part.0+0x900>
 800eb9c:	f8d8 3000 	ldr.w	r3, [r8]
 800eba0:	2b00      	cmp	r3, #0
 800eba2:	f43f adf3 	beq.w	800e78c <Write_Request_ExtConfig.part.0+0x22c>
        BLE_MANAGER_PRINTF("Command SetWiFi\r\n");
 800eba6:	4892      	ldr	r0, [pc, #584]	; (800edf0 <Write_Request_ExtConfig.part.0+0x890>)
 800eba8:	f00b fd04 	bl	801a5b4 <puts>
        JSON_Value *tempJSON = json_parse_string( (char *) hs_command_buffer);
 800ebac:	f8d5 0288 	ldr.w	r0, [r5, #648]	; 0x288
 800ebb0:	f002 f958 	bl	8010e64 <json_parse_string>
 800ebb4:	4607      	mov	r7, r0
        JSON_Object *JSON_ParseHandler = json_value_get_object(tempJSON);
 800ebb6:	f001 fc06 	bl	80103c6 <json_value_get_object>
        if (strcmp(json_object_dotget_string(JSON_ParseHandler,"command"),"SetWiFi") == 0) {
 800ebba:	498e      	ldr	r1, [pc, #568]	; (800edf4 <Write_Request_ExtConfig.part.0+0x894>)
        JSON_Object *JSON_ParseHandler = json_value_get_object(tempJSON);
 800ebbc:	4604      	mov	r4, r0
        if (strcmp(json_object_dotget_string(JSON_ParseHandler,"command"),"SetWiFi") == 0) {
 800ebbe:	f001 fc46 	bl	801044e <json_object_dotget_string>
 800ebc2:	498d      	ldr	r1, [pc, #564]	; (800edf8 <Write_Request_ExtConfig.part.0+0x898>)
 800ebc4:	f7f5 fb84 	bl	80042d0 <strcmp>
 800ebc8:	2800      	cmp	r0, #0
 800ebca:	f47f ae8e 	bne.w	800e8ea <Write_Request_ExtConfig.part.0+0x38a>
          JSON_Object *JSON_Wifi = json_object_dotget_object(JSON_ParseHandler,"argJsonElement");
 800ebce:	498b      	ldr	r1, [pc, #556]	; (800edfc <Write_Request_ExtConfig.part.0+0x89c>)
 800ebd0:	4620      	mov	r0, r4
 800ebd2:	f001 fc20 	bl	8010416 <json_object_dotget_object>
          if(json_object_dothas_value(JSON_Wifi,"ssid")) {
 800ebd6:	498a      	ldr	r1, [pc, #552]	; (800ee00 <Write_Request_ExtConfig.part.0+0x8a0>)
          JSON_Object *JSON_Wifi = json_object_dotget_object(JSON_ParseHandler,"argJsonElement");
 800ebd8:	4604      	mov	r4, r0
          if(json_object_dothas_value(JSON_Wifi,"ssid")) {
 800ebda:	f001 fc15 	bl	8010408 <json_object_dothas_value>
 800ebde:	2800      	cmp	r0, #0
 800ebe0:	f43f ae83 	beq.w	800e8ea <Write_Request_ExtConfig.part.0+0x38a>
            NewWiFiCred.SSID = (uint8_t *)json_object_dotget_string(JSON_Wifi,"ssid");
 800ebe4:	4986      	ldr	r1, [pc, #536]	; (800ee00 <Write_Request_ExtConfig.part.0+0x8a0>)
 800ebe6:	4620      	mov	r0, r4
 800ebe8:	f001 fc31 	bl	801044e <json_object_dotget_string>
            if(json_object_dothas_value(JSON_Wifi,"password")) {
 800ebec:	4985      	ldr	r1, [pc, #532]	; (800ee04 <Write_Request_ExtConfig.part.0+0x8a4>)
            NewWiFiCred.SSID = (uint8_t *)json_object_dotget_string(JSON_Wifi,"ssid");
 800ebee:	900c      	str	r0, [sp, #48]	; 0x30
            if(json_object_dothas_value(JSON_Wifi,"password")) {
 800ebf0:	4620      	mov	r0, r4
            NewWiFiCred.SSID = (uint8_t *)json_object_dotget_string(JSON_Wifi,"ssid");
 800ebf2:	ae0c      	add	r6, sp, #48	; 0x30
            if(json_object_dothas_value(JSON_Wifi,"password")) {
 800ebf4:	f001 fc08 	bl	8010408 <json_object_dothas_value>
 800ebf8:	2800      	cmp	r0, #0
 800ebfa:	f43f ae76 	beq.w	800e8ea <Write_Request_ExtConfig.part.0+0x38a>
              NewWiFiCred.PassWd = (uint8_t *)json_object_dotget_string(JSON_Wifi,"password");
 800ebfe:	4981      	ldr	r1, [pc, #516]	; (800ee04 <Write_Request_ExtConfig.part.0+0x8a4>)
 800ec00:	4620      	mov	r0, r4
 800ec02:	f001 fc24 	bl	801044e <json_object_dotget_string>
              if(json_object_dothas_value(JSON_Wifi,"securityType")) {
 800ec06:	4980      	ldr	r1, [pc, #512]	; (800ee08 <Write_Request_ExtConfig.part.0+0x8a8>)
              NewWiFiCred.PassWd = (uint8_t *)json_object_dotget_string(JSON_Wifi,"password");
 800ec08:	6070      	str	r0, [r6, #4]
              if(json_object_dothas_value(JSON_Wifi,"securityType")) {
 800ec0a:	4620      	mov	r0, r4
 800ec0c:	f001 fbfc 	bl	8010408 <json_object_dothas_value>
 800ec10:	2800      	cmp	r0, #0
 800ec12:	f43f ae6a 	beq.w	800e8ea <Write_Request_ExtConfig.part.0+0x38a>
                NewWiFiCred.Security = (uint8_t *)json_object_dotget_string(JSON_Wifi,"securityType");
 800ec16:	497c      	ldr	r1, [pc, #496]	; (800ee08 <Write_Request_ExtConfig.part.0+0x8a8>)
 800ec18:	4620      	mov	r0, r4
 800ec1a:	f001 fc18 	bl	801044e <json_object_dotget_string>
 800ec1e:	60b0      	str	r0, [r6, #8]
                CustomExtConfigSetWiFiCommandCallback(NewWiFiCred);
 800ec20:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 800ec24:	f8d8 3000 	ldr.w	r3, [r8]
 800ec28:	4798      	blx	r3
        json_value_free(tempJSON);
 800ec2a:	e65e      	b.n	800e8ea <Write_Request_ExtConfig.part.0+0x38a>
       if(CustomExtConfigChangePinCommandCallback!=NULL) {
 800ec2c:	4f77      	ldr	r7, [pc, #476]	; (800ee0c <Write_Request_ExtConfig.part.0+0x8ac>)
 800ec2e:	683b      	ldr	r3, [r7, #0]
 800ec30:	2b00      	cmp	r3, #0
 800ec32:	f43f adab 	beq.w	800e78c <Write_Request_ExtConfig.part.0+0x22c>
        BLE_MANAGER_PRINTF("Command ChangePIN\r\n");
 800ec36:	4876      	ldr	r0, [pc, #472]	; (800ee10 <Write_Request_ExtConfig.part.0+0x8b0>)
 800ec38:	f00b fcbc 	bl	801a5b4 <puts>
        JSON_Value *tempJSON = json_parse_string( (char *) hs_command_buffer);
 800ec3c:	f8d5 0288 	ldr.w	r0, [r5, #648]	; 0x288
 800ec40:	f002 f910 	bl	8010e64 <json_parse_string>
 800ec44:	4606      	mov	r6, r0
        JSON_Object *JSON_ParseHandler = json_value_get_object(tempJSON);
 800ec46:	f001 fbbe 	bl	80103c6 <json_value_get_object>
        if (strcmp(json_object_dotget_string(JSON_ParseHandler,"command"),"ChangePIN") == 0) {
 800ec4a:	496a      	ldr	r1, [pc, #424]	; (800edf4 <Write_Request_ExtConfig.part.0+0x894>)
        JSON_Object *JSON_ParseHandler = json_value_get_object(tempJSON);
 800ec4c:	4604      	mov	r4, r0
        if (strcmp(json_object_dotget_string(JSON_ParseHandler,"command"),"ChangePIN") == 0) {
 800ec4e:	f001 fbfe 	bl	801044e <json_object_dotget_string>
 800ec52:	4970      	ldr	r1, [pc, #448]	; (800ee14 <Write_Request_ExtConfig.part.0+0x8b4>)
 800ec54:	f7f5 fb3c 	bl	80042d0 <strcmp>
 800ec58:	2800      	cmp	r0, #0
 800ec5a:	f47f ad94 	bne.w	800e786 <Write_Request_ExtConfig.part.0+0x226>
          if(json_object_dothas_value(JSON_ParseHandler,"argNumber")) {
 800ec5e:	496e      	ldr	r1, [pc, #440]	; (800ee18 <Write_Request_ExtConfig.part.0+0x8b8>)
 800ec60:	4620      	mov	r0, r4
 800ec62:	f001 fbd1 	bl	8010408 <json_object_dothas_value>
 800ec66:	2800      	cmp	r0, #0
 800ec68:	f43f ad8d 	beq.w	800e786 <Write_Request_ExtConfig.part.0+0x226>
            uint32_t NewBoardPin = (uint32_t)json_object_dotget_number(JSON_ParseHandler,"argNumber");
 800ec6c:	496a      	ldr	r1, [pc, #424]	; (800ee18 <Write_Request_ExtConfig.part.0+0x8b8>)
 800ec6e:	4620      	mov	r0, r4
 800ec70:	f001 fc0a 	bl	8010488 <json_object_dotget_number>
 800ec74:	ec51 0b10 	vmov	r0, r1, d0
 800ec78:	f7f6 f826 	bl	8004cc8 <__aeabi_d2uiz>
            CustomExtConfigSetCertCommandCallback(NewCertificate);
 800ec7c:	683b      	ldr	r3, [r7, #0]
 800ec7e:	4798      	blx	r3
        json_value_free(tempJSON);
 800ec80:	e581      	b.n	800e786 <Write_Request_ExtConfig.part.0+0x226>
      if(CustomExtConfigSetCertCommandCallback!=NULL) {
 800ec82:	4f66      	ldr	r7, [pc, #408]	; (800ee1c <Write_Request_ExtConfig.part.0+0x8bc>)
 800ec84:	683b      	ldr	r3, [r7, #0]
 800ec86:	2b00      	cmp	r3, #0
 800ec88:	f43f ad80 	beq.w	800e78c <Write_Request_ExtConfig.part.0+0x22c>
        BLE_MANAGER_PRINTF("Command SetCert\r\n");
 800ec8c:	4864      	ldr	r0, [pc, #400]	; (800ee20 <Write_Request_ExtConfig.part.0+0x8c0>)
 800ec8e:	f00b fc91 	bl	801a5b4 <puts>
        JSON_Value *tempJSON = json_parse_string( (char *) hs_command_buffer);
 800ec92:	f8d5 0288 	ldr.w	r0, [r5, #648]	; 0x288
 800ec96:	f002 f8e5 	bl	8010e64 <json_parse_string>
 800ec9a:	4606      	mov	r6, r0
        JSON_Object *JSON_ParseHandler = json_value_get_object(tempJSON);
 800ec9c:	f001 fb93 	bl	80103c6 <json_value_get_object>
        if (strcmp(json_object_dotget_string(JSON_ParseHandler,"command"),"SetCert") == 0) {
 800eca0:	4954      	ldr	r1, [pc, #336]	; (800edf4 <Write_Request_ExtConfig.part.0+0x894>)
        JSON_Object *JSON_ParseHandler = json_value_get_object(tempJSON);
 800eca2:	4604      	mov	r4, r0
        if (strcmp(json_object_dotget_string(JSON_ParseHandler,"command"),"SetCert") == 0) {
 800eca4:	f001 fbd3 	bl	801044e <json_object_dotget_string>
 800eca8:	495e      	ldr	r1, [pc, #376]	; (800ee24 <Write_Request_ExtConfig.part.0+0x8c4>)
 800ecaa:	e6e7      	b.n	800ea7c <Write_Request_ExtConfig.part.0+0x51c>
      if(CustomExtConfigSetSensorsConfigCommandsCallback!=NULL) {
 800ecac:	4c5e      	ldr	r4, [pc, #376]	; (800ee28 <Write_Request_ExtConfig.part.0+0x8c8>)
 800ecae:	6823      	ldr	r3, [r4, #0]
 800ecb0:	2b00      	cmp	r3, #0
 800ecb2:	f43f ad6b 	beq.w	800e78c <Write_Request_ExtConfig.part.0+0x22c>
        BLE_MANAGER_PRINTF("Command SetSensorsConfigCommand\r\n");
 800ecb6:	485d      	ldr	r0, [pc, #372]	; (800ee2c <Write_Request_ExtConfig.part.0+0x8cc>)
 800ecb8:	f00b fc7c 	bl	801a5b4 <puts>
        CustomExtConfigSetSensorsConfigCommandsCallback(hs_command_buffer);
 800ecbc:	6823      	ldr	r3, [r4, #0]
 800ecbe:	f8d5 0288 	ldr.w	r0, [r5, #648]	; 0x288
 800ecc2:	4798      	blx	r3
 800ecc4:	e562      	b.n	800e78c <Write_Request_ExtConfig.part.0+0x22c>
      if(CustomExtConfigCustomCommandCallback!=NULL) {
 800ecc6:	4e5a      	ldr	r6, [pc, #360]	; (800ee30 <Write_Request_ExtConfig.part.0+0x8d0>)
 800ecc8:	6833      	ldr	r3, [r6, #0]
 800ecca:	b91b      	cbnz	r3, 800ecd4 <Write_Request_ExtConfig.part.0+0x774>
        BLE_MANAGER_PRINTF("Error: Command Not Valid\r\n");
 800eccc:	4859      	ldr	r0, [pc, #356]	; (800ee34 <Write_Request_ExtConfig.part.0+0x8d4>)
 800ecce:	f00b fc71 	bl	801a5b4 <puts>
 800ecd2:	e55b      	b.n	800e78c <Write_Request_ExtConfig.part.0+0x22c>
        if(CustomCommands!=NULL) {
 800ecd4:	682b      	ldr	r3, [r5, #0]
 800ecd6:	2b00      	cmp	r3, #0
 800ecd8:	d0f8      	beq.n	800eccc <Write_Request_ExtConfig.part.0+0x76c>
          JSON_Value *tempJSON = json_parse_string( (char *) hs_command_buffer);
 800ecda:	f8d5 0288 	ldr.w	r0, [r5, #648]	; 0x288
            if (strcmp(json_object_dotget_string(JSON_ParseHandler,"command"),LastCustomCommand->CommandName) == 0) {
 800ecde:	f8df 9114 	ldr.w	r9, [pc, #276]	; 800edf4 <Write_Request_ExtConfig.part.0+0x894>
          JSON_Value *tempJSON = json_parse_string( (char *) hs_command_buffer);
 800ece2:	f002 f8bf 	bl	8010e64 <json_parse_string>
 800ece6:	4607      	mov	r7, r0
          JSON_Object *JSON_ParseHandler = json_value_get_object(tempJSON);
 800ece8:	f001 fb6d 	bl	80103c6 <json_value_get_object>
          LastCustomCommand = CustomCommands;
 800ecec:	682b      	ldr	r3, [r5, #0]
 800ecee:	606b      	str	r3, [r5, #4]
          JSON_Object *JSON_ParseHandler = json_value_get_object(tempJSON);
 800ecf0:	4680      	mov	r8, r0
          while((ValidCustomCommand==0U) && (LastCustomCommand!=NULL)){
 800ecf2:	686c      	ldr	r4, [r5, #4]
 800ecf4:	b92c      	cbnz	r4, 800ed02 <Write_Request_ExtConfig.part.0+0x7a2>
          json_value_free(tempJSON);
 800ecf6:	4638      	mov	r0, r7
 800ecf8:	f001 fd3a 	bl	8010770 <json_value_free>
      if(ValidCustomCommand==0U) {
 800ecfc:	2c00      	cmp	r4, #0
 800ecfe:	d0e5      	beq.n	800eccc <Write_Request_ExtConfig.part.0+0x76c>
 800ed00:	e544      	b.n	800e78c <Write_Request_ExtConfig.part.0+0x22c>
            if (strcmp(json_object_dotget_string(JSON_ParseHandler,"command"),LastCustomCommand->CommandName) == 0) {
 800ed02:	4649      	mov	r1, r9
 800ed04:	4640      	mov	r0, r8
 800ed06:	f001 fba2 	bl	801044e <json_object_dotget_string>
 800ed0a:	686c      	ldr	r4, [r5, #4]
 800ed0c:	4621      	mov	r1, r4
 800ed0e:	f7f5 fadf 	bl	80042d0 <strcmp>
 800ed12:	b958      	cbnz	r0, 800ed2c <Write_Request_ExtConfig.part.0+0x7cc>
            CommandResult.CommandName= (uint8_t *)LastCustomCommand->CommandName;
 800ed14:	940c      	str	r4, [sp, #48]	; 0x30
            CommandResult.CommandType= LastCustomCommand->CommandType;
 800ed16:	f894 3020 	ldrb.w	r3, [r4, #32]
 800ed1a:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
            switch(LastCustomCommand->CommandType) { 
 800ed1e:	2b05      	cmp	r3, #5
 800ed20:	d80e      	bhi.n	800ed40 <Write_Request_ExtConfig.part.0+0x7e0>
 800ed22:	e8df f003 	tbb	[pc, r3]
 800ed26:	1206      	.short	0x1206
 800ed28:	4f124f2d 	.word	0x4f124f2d
              LastCustomCommand = (BLE_ExtCustomCommand_t *) LastCustomCommand->NextCommand;
 800ed2c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ed2e:	606b      	str	r3, [r5, #4]
 800ed30:	e7df      	b.n	800ecf2 <Write_Request_ExtConfig.part.0+0x792>
              BLE_MANAGER_PRINTF("Called Custom Void Command <%s>\r\n",LastCustomCommand->CommandName);
 800ed32:	4841      	ldr	r0, [pc, #260]	; (800ee38 <Write_Request_ExtConfig.part.0+0x8d8>)
 800ed34:	4621      	mov	r1, r4
 800ed36:	f00b fbb7 	bl	801a4a8 <iprintf>
              CommandResult.IntValue= 0;
 800ed3a:	2300      	movs	r3, #0
              CommandResult.StringValue= NULL;
 800ed3c:	e9cd 330e 	strd	r3, r3, [sp, #56]	; 0x38
            CustomExtConfigCustomCommandCallback(&CommandResult);
 800ed40:	6833      	ldr	r3, [r6, #0]
 800ed42:	a80c      	add	r0, sp, #48	; 0x30
 800ed44:	4798      	blx	r3
              ValidCustomCommand=1;
 800ed46:	2401      	movs	r4, #1
 800ed48:	e7d5      	b.n	800ecf6 <Write_Request_ExtConfig.part.0+0x796>
              if(json_object_dothas_value(JSON_ParseHandler,"argNumber")) {
 800ed4a:	4933      	ldr	r1, [pc, #204]	; (800ee18 <Write_Request_ExtConfig.part.0+0x8b8>)
 800ed4c:	4640      	mov	r0, r8
 800ed4e:	f001 fb5b 	bl	8010408 <json_object_dothas_value>
 800ed52:	2800      	cmp	r0, #0
 800ed54:	d0f4      	beq.n	800ed40 <Write_Request_ExtConfig.part.0+0x7e0>
                int32_t NewValue = (int32_t)json_object_dotget_number(JSON_ParseHandler,"argNumber");
 800ed56:	4930      	ldr	r1, [pc, #192]	; (800ee18 <Write_Request_ExtConfig.part.0+0x8b8>)
 800ed58:	4640      	mov	r0, r8
 800ed5a:	f001 fb95 	bl	8010488 <json_object_dotget_number>
 800ed5e:	ec51 0b10 	vmov	r0, r1, d0
 800ed62:	f7f5 ff89 	bl	8004c78 <__aeabi_d2iz>
                BLE_MANAGER_PRINTF("Called Custom Integer Command <%s>\r\n",LastCustomCommand->CommandName);
 800ed66:	6869      	ldr	r1, [r5, #4]
                CommandResult.IntValue= NewValue;
 800ed68:	900e      	str	r0, [sp, #56]	; 0x38
                int32_t NewValue = (int32_t)json_object_dotget_number(JSON_ParseHandler,"argNumber");
 800ed6a:	4604      	mov	r4, r0
                CommandResult.StringValue= NULL;
 800ed6c:	2300      	movs	r3, #0
                BLE_MANAGER_PRINTF("Called Custom Integer Command <%s>\r\n",LastCustomCommand->CommandName);
 800ed6e:	4833      	ldr	r0, [pc, #204]	; (800ee3c <Write_Request_ExtConfig.part.0+0x8dc>)
                CommandResult.StringValue= NULL;
 800ed70:	930f      	str	r3, [sp, #60]	; 0x3c
                BLE_MANAGER_PRINTF("Called Custom Integer Command <%s>\r\n",LastCustomCommand->CommandName);
 800ed72:	f00b fb99 	bl	801a4a8 <iprintf>
                BLE_MANAGER_PRINTF("\tNumber=%ld\r\n",NewValue);
 800ed76:	4832      	ldr	r0, [pc, #200]	; (800ee40 <Write_Request_ExtConfig.part.0+0x8e0>)
 800ed78:	4621      	mov	r1, r4
                BLE_MANAGER_PRINTF("\tString=<%s>\r\n",NewString);
 800ed7a:	f00b fb95 	bl	801a4a8 <iprintf>
 800ed7e:	e7df      	b.n	800ed40 <Write_Request_ExtConfig.part.0+0x7e0>
              if(json_object_dothas_value(JSON_ParseHandler,"argString")) {
 800ed80:	4930      	ldr	r1, [pc, #192]	; (800ee44 <Write_Request_ExtConfig.part.0+0x8e4>)
 800ed82:	4640      	mov	r0, r8
 800ed84:	f001 fb40 	bl	8010408 <json_object_dothas_value>
 800ed88:	2800      	cmp	r0, #0
 800ed8a:	d0d9      	beq.n	800ed40 <Write_Request_ExtConfig.part.0+0x7e0>
                uint8_t *NewString = (uint8_t *)json_object_dotget_string(JSON_ParseHandler,"argString");
 800ed8c:	492d      	ldr	r1, [pc, #180]	; (800ee44 <Write_Request_ExtConfig.part.0+0x8e4>)
 800ed8e:	4640      	mov	r0, r8
 800ed90:	f001 fb5d 	bl	801044e <json_object_dotget_string>
                if(strncmp((char*)NewString,"true",4)==0)
 800ed94:	492c      	ldr	r1, [pc, #176]	; (800ee48 <Write_Request_ExtConfig.part.0+0x8e8>)
 800ed96:	2204      	movs	r2, #4
                uint8_t *NewString = (uint8_t *)json_object_dotget_string(JSON_ParseHandler,"argString");
 800ed98:	4604      	mov	r4, r0
                if(strncmp((char*)NewString,"true",4)==0)
 800ed9a:	f00b fca3 	bl	801a6e4 <strncmp>
 800ed9e:	b908      	cbnz	r0, 800eda4 <Write_Request_ExtConfig.part.0+0x844>
                  CommandResult.IntValue= 1;
 800eda0:	2301      	movs	r3, #1
 800eda2:	930e      	str	r3, [sp, #56]	; 0x38
                if(strncmp((char*)NewString,"false",5)==0)
 800eda4:	4929      	ldr	r1, [pc, #164]	; (800ee4c <Write_Request_ExtConfig.part.0+0x8ec>)
 800eda6:	2205      	movs	r2, #5
 800eda8:	4620      	mov	r0, r4
 800edaa:	f00b fc9b 	bl	801a6e4 <strncmp>
 800edae:	b900      	cbnz	r0, 800edb2 <Write_Request_ExtConfig.part.0+0x852>
                  CommandResult.IntValue= 0;
 800edb0:	900e      	str	r0, [sp, #56]	; 0x38
                BLE_MANAGER_PRINTF("Called Custom Boolean Command <%s>\r\n",LastCustomCommand->CommandName);
 800edb2:	6869      	ldr	r1, [r5, #4]
 800edb4:	4826      	ldr	r0, [pc, #152]	; (800ee50 <Write_Request_ExtConfig.part.0+0x8f0>)
                CommandResult.StringValue= NULL;
 800edb6:	2300      	movs	r3, #0
 800edb8:	930f      	str	r3, [sp, #60]	; 0x3c
                BLE_MANAGER_PRINTF("Called Custom Boolean Command <%s>\r\n",LastCustomCommand->CommandName);
 800edba:	f00b fb75 	bl	801a4a8 <iprintf>
                BLE_MANAGER_PRINTF("\tBoolean=<%s>\r\n",NewString);
 800edbe:	4825      	ldr	r0, [pc, #148]	; (800ee54 <Write_Request_ExtConfig.part.0+0x8f4>)
 800edc0:	4621      	mov	r1, r4
 800edc2:	e7da      	b.n	800ed7a <Write_Request_ExtConfig.part.0+0x81a>
              if(json_object_dothas_value(JSON_ParseHandler,"argString")) {
 800edc4:	491f      	ldr	r1, [pc, #124]	; (800ee44 <Write_Request_ExtConfig.part.0+0x8e4>)
 800edc6:	4640      	mov	r0, r8
 800edc8:	f001 fb1e 	bl	8010408 <json_object_dothas_value>
 800edcc:	2800      	cmp	r0, #0
 800edce:	d0b7      	beq.n	800ed40 <Write_Request_ExtConfig.part.0+0x7e0>
                uint8_t *NewString = (uint8_t *)json_object_dotget_string(JSON_ParseHandler,"argString");
 800edd0:	491c      	ldr	r1, [pc, #112]	; (800ee44 <Write_Request_ExtConfig.part.0+0x8e4>)
 800edd2:	4640      	mov	r0, r8
 800edd4:	f001 fb3b 	bl	801044e <json_object_dotget_string>
                CommandResult.IntValue= 0;
 800edd8:	2300      	movs	r3, #0
                CommandResult.StringValue= NewString;
 800edda:	e9cd 300e 	strd	r3, r0, [sp, #56]	; 0x38
                BLE_MANAGER_PRINTF("Called Custom String Command <%s>\r\n",LastCustomCommand->CommandName);
 800edde:	6869      	ldr	r1, [r5, #4]
                uint8_t *NewString = (uint8_t *)json_object_dotget_string(JSON_ParseHandler,"argString");
 800ede0:	4604      	mov	r4, r0
                BLE_MANAGER_PRINTF("Called Custom String Command <%s>\r\n",LastCustomCommand->CommandName);
 800ede2:	481d      	ldr	r0, [pc, #116]	; (800ee58 <Write_Request_ExtConfig.part.0+0x8f8>)
 800ede4:	f00b fb60 	bl	801a4a8 <iprintf>
                BLE_MANAGER_PRINTF("\tString=<%s>\r\n",NewString);
 800ede8:	481c      	ldr	r0, [pc, #112]	; (800ee5c <Write_Request_ExtConfig.part.0+0x8fc>)
 800edea:	4621      	mov	r1, r4
 800edec:	e7c5      	b.n	800ed7a <Write_Request_ExtConfig.part.0+0x81a>
 800edee:	bf00      	nop
 800edf0:	08021af9 	.word	0x08021af9
 800edf4:	080218fc 	.word	0x080218fc
 800edf8:	0802194c 	.word	0x0802194c
 800edfc:	08021b0a 	.word	0x08021b0a
 800ee00:	08021b19 	.word	0x08021b19
 800ee04:	08021b1e 	.word	0x08021b1e
 800ee08:	08021b27 	.word	0x08021b27
 800ee0c:	20009a10 	.word	0x20009a10
 800ee10:	08021b34 	.word	0x08021b34
 800ee14:	08021954 	.word	0x08021954
 800ee18:	08021b47 	.word	0x08021b47
 800ee1c:	200099d0 	.word	0x200099d0
 800ee20:	08021b51 	.word	0x08021b51
 800ee24:	0802196f 	.word	0x0802196f
 800ee28:	20009a20 	.word	0x20009a20
 800ee2c:	08021b62 	.word	0x08021b62
 800ee30:	200099fc 	.word	0x200099fc
 800ee34:	08021b83 	.word	0x08021b83
 800ee38:	08021b9d 	.word	0x08021b9d
 800ee3c:	08021bbf 	.word	0x08021bbf
 800ee40:	08021be4 	.word	0x08021be4
 800ee44:	08021acd 	.word	0x08021acd
 800ee48:	08021bf2 	.word	0x08021bf2
 800ee4c:	08021bf7 	.word	0x08021bf7
 800ee50:	08021bfd 	.word	0x08021bfd
 800ee54:	08021c22 	.word	0x08021c22
 800ee58:	08021c32 	.word	0x08021c32
 800ee5c:	08021c56 	.word	0x08021c56
 800ee60:	20009b38 	.word	0x20009b38

0800ee64 <Write_Request_ExtConfig>:
{
 800ee64:	b508      	push	{r3, lr}
  CommandBufLen = BLE_Command_TP_Parse(&hs_command_buffer, att_data, data_length);
 800ee66:	9902      	ldr	r1, [sp, #8]
 800ee68:	4804      	ldr	r0, [pc, #16]	; (800ee7c <Write_Request_ExtConfig+0x18>)
 800ee6a:	461a      	mov	r2, r3
 800ee6c:	f7ff fa60 	bl	800e330 <BLE_Command_TP_Parse>
  if(CommandBufLen) {
 800ee70:	b118      	cbz	r0, 800ee7a <Write_Request_ExtConfig+0x16>
}
 800ee72:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800ee76:	f7ff bb73 	b.w	800e560 <Write_Request_ExtConfig.part.0>
 800ee7a:	bd08      	pop	{r3, pc}
 800ee7c:	20003614 	.word	0x20003614

0800ee80 <hci_le_connection_complete_event>:
                                      uint8_t Peer_Address[6],
                                      uint16_t Conn_Interval,
                                      uint16_t Conn_Latency,
                                      uint16_t Supervision_Timeout,
                                      uint8_t Master_Clock_Accuracy)
{
 800ee80:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ee82:	b085      	sub	sp, #20
 800ee84:	461f      	mov	r7, r3
 800ee86:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  connection_handle = Connection_Handle;
 800ee88:	4d17      	ldr	r5, [pc, #92]	; (800eee8 <hci_le_connection_complete_event+0x68>)
  
  BLE_MANAGER_PRINTF(">>>>>>CONNECTED %x:%x:%x:%x:%x:%x\r\n",Peer_Address[5],Peer_Address[4],Peer_Address[3],Peer_Address[2],Peer_Address[1],Peer_Address[0]);
 800ee8a:	7823      	ldrb	r3, [r4, #0]
 800ee8c:	9302      	str	r3, [sp, #8]
 800ee8e:	7863      	ldrb	r3, [r4, #1]
 800ee90:	9301      	str	r3, [sp, #4]
 800ee92:	78a3      	ldrb	r3, [r4, #2]
 800ee94:	9300      	str	r3, [sp, #0]
 800ee96:	78e3      	ldrb	r3, [r4, #3]
  connection_handle = Connection_Handle;
 800ee98:	f8a5 1252 	strh.w	r1, [r5, #594]	; 0x252
  BLE_MANAGER_PRINTF(">>>>>>CONNECTED %x:%x:%x:%x:%x:%x\r\n",Peer_Address[5],Peer_Address[4],Peer_Address[3],Peer_Address[2],Peer_Address[1],Peer_Address[0]);
 800ee9c:	7922      	ldrb	r2, [r4, #4]
 800ee9e:	4813      	ldr	r0, [pc, #76]	; (800eeec <hci_le_connection_complete_event+0x6c>)
{
 800eea0:	460e      	mov	r6, r1
  BLE_MANAGER_PRINTF(">>>>>>CONNECTED %x:%x:%x:%x:%x:%x\r\n",Peer_Address[5],Peer_Address[4],Peer_Address[3],Peer_Address[2],Peer_Address[1],Peer_Address[0]);
 800eea2:	7961      	ldrb	r1, [r4, #5]
 800eea4:	f00b fb00 	bl	801a4a8 <iprintf>
  
  if(BlueNRG_StackValue.EnableSecureConnection) {
 800eea8:	4b11      	ldr	r3, [pc, #68]	; (800eef0 <hci_le_connection_complete_event+0x70>)
 800eeaa:	7d5b      	ldrb	r3, [r3, #21]
 800eeac:	b163      	cbz	r3, 800eec8 <hci_le_connection_complete_event+0x48>
    tBleStatus RetStatus;
    /* Check if the device is already bonded */
    RetStatus = aci_gap_is_device_bonded(Peer_Address_Type,Peer_Address);
 800eeae:	4621      	mov	r1, r4
 800eeb0:	4638      	mov	r0, r7
 800eeb2:	f7fc fee1 	bl	800bc78 <aci_gap_is_device_bonded>
    if( RetStatus !=BLE_STATUS_SUCCESS) {
 800eeb6:	b138      	cbz	r0, 800eec8 <hci_le_connection_complete_event+0x48>
      /* Send a slave security request to the master */
      RetStatus = aci_gap_slave_security_req(Connection_Handle);
 800eeb8:	4630      	mov	r0, r6
 800eeba:	f7fc fe31 	bl	800bb20 <aci_gap_slave_security_req>
      if (RetStatus != BLE_STATUS_SUCCESS) {
 800eebe:	4601      	mov	r1, r0
 800eec0:	b110      	cbz	r0, 800eec8 <hci_le_connection_complete_event+0x48>
        BLE_MANAGER_PRINTF("Error: GAP Slave secury request failed %d\r\n",RetStatus);
 800eec2:	480c      	ldr	r0, [pc, #48]	; (800eef4 <hci_le_connection_complete_event+0x74>)
 800eec4:	f00b faf0 	bl	801a4a8 <iprintf>
#endif
    }
  }
  
  /* Start one Exchange configuration for understaning the maxium ATT_MTU */
  aci_gatt_exchange_config(connection_handle);  
 800eec8:	f8b5 0252 	ldrh.w	r0, [r5, #594]	; 0x252
 800eecc:	f7fd f804 	bl	800bed8 <aci_gatt_exchange_config>
  
  if(CustomConnectionCompleted!=NULL){
 800eed0:	4b09      	ldr	r3, [pc, #36]	; (800eef8 <hci_le_connection_complete_event+0x78>)
 800eed2:	681b      	ldr	r3, [r3, #0]
 800eed4:	b12b      	cbz	r3, 800eee2 <hci_le_connection_complete_event+0x62>
    CustomConnectionCompleted(connection_handle);
 800eed6:	f8b5 0252 	ldrh.w	r0, [r5, #594]	; 0x252
  }
  
}/* end hci_le_connection_complete_event() */
 800eeda:	b005      	add	sp, #20
 800eedc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    CustomConnectionCompleted(connection_handle);
 800eee0:	4718      	bx	r3
}/* end hci_le_connection_complete_event() */
 800eee2:	b005      	add	sp, #20
 800eee4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800eee6:	bf00      	nop
 800eee8:	2000338c 	.word	0x2000338c
 800eeec:	08021c65 	.word	0x08021c65
 800eef0:	200099a4 	.word	0x200099a4
 800eef4:	08021c89 	.word	0x08021c89
 800eef8:	20009a04 	.word	0x20009a04

0800eefc <hci_disconnection_complete_event>:
void hci_disconnection_complete_event(uint8_t Status,
                                      uint16_t Connection_Handle,
                                      uint8_t Reason)
{  
  /* No Device Connected */
  connection_handle =0;
 800eefc:	4b08      	ldr	r3, [pc, #32]	; (800ef20 <hci_disconnection_complete_event+0x24>)
  
  BLE_MANAGER_PRINTF("<<<<<<DISCONNECTED\r\n");
 800eefe:	4809      	ldr	r0, [pc, #36]	; (800ef24 <hci_disconnection_complete_event+0x28>)
  connection_handle =0;
 800ef00:	2200      	movs	r2, #0
{  
 800ef02:	b510      	push	{r4, lr}
  connection_handle =0;
 800ef04:	f8a3 2252 	strh.w	r2, [r3, #594]	; 0x252
  BLE_MANAGER_PRINTF("<<<<<<DISCONNECTED\r\n");
 800ef08:	f00b fb54 	bl	801a5b4 <puts>
  
  /* Make the device connectable again. */
  set_connectable = TRUE;
 800ef0c:	4b06      	ldr	r3, [pc, #24]	; (800ef28 <hci_disconnection_complete_event+0x2c>)
 800ef0e:	2201      	movs	r2, #1
 800ef10:	701a      	strb	r2, [r3, #0]
  
  if(CustomDisconnectionCompleted!=NULL){
 800ef12:	4b06      	ldr	r3, [pc, #24]	; (800ef2c <hci_disconnection_complete_event+0x30>)
 800ef14:	681b      	ldr	r3, [r3, #0]
 800ef16:	b113      	cbz	r3, 800ef1e <hci_disconnection_complete_event+0x22>
  
  //  if(BlueNRG_StackValue.EnableSecureConnection) {
  //    BlueNRG_StackValue.AdvertisingFilter = WHITE_LIST_FOR_ALL;
  //  }
  
}/* end hci_disconnection_complete_event() */
 800ef18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    CustomDisconnectionCompleted();
 800ef1c:	4718      	bx	r3
}/* end hci_disconnection_complete_event() */
 800ef1e:	bd10      	pop	{r4, pc}
 800ef20:	2000338c 	.word	0x2000338c
 800ef24:	08021cb5 	.word	0x08021cb5
 800ef28:	200099f0 	.word	0x200099f0
 800ef2c:	200099ec 	.word	0x200099ec

0800ef30 <aci_gatt_read_permit_req_event>:
* Return         : See file bluenrg1_events.h
*******************************************************************************/
void aci_gatt_read_permit_req_event(uint16_t Connection_Handle,
                                    uint16_t Attribute_Handle,
                                    uint16_t Offset)
{
 800ef30:	b570      	push	{r4, r5, r6, lr}
  uint32_t FoundHandle=0;
  uint8_t RegisteredHandle;
  
  //Search inside all the registed handles
  for(RegisteredHandle=0;((RegisteredHandle<UsedBleChars) && (FoundHandle==0U));RegisteredHandle++) {
 800ef32:	4d0f      	ldr	r5, [pc, #60]	; (800ef70 <aci_gatt_read_permit_req_event+0x40>)
{
 800ef34:	460c      	mov	r4, r1
  for(RegisteredHandle=0;((RegisteredHandle<UsedBleChars) && (FoundHandle==0U));RegisteredHandle++) {
 800ef36:	2600      	movs	r6, #0
 800ef38:	f895 21cc 	ldrb.w	r2, [r5, #460]	; 0x1cc
 800ef3c:	b2f3      	uxtb	r3, r6
 800ef3e:	429a      	cmp	r2, r3
 800ef40:	d806      	bhi.n	800ef50 <aci_gatt_read_permit_req_event+0x20>
        BleCharsArray[RegisteredHandle]->Read_Request_CB(BleCharsArray[RegisteredHandle],Attribute_Handle);
      }
    }
  }
  
  if(connection_handle != 0U)
 800ef42:	f8b5 0252 	ldrh.w	r0, [r5, #594]	; 0x252
 800ef46:	b188      	cbz	r0, 800ef6c <aci_gatt_read_permit_req_event+0x3c>
    aci_gatt_allow_read(connection_handle);
}
 800ef48:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    aci_gatt_allow_read(connection_handle);
 800ef4c:	f7fd b802 	b.w	800bf54 <aci_gatt_allow_read>
    if(BleCharsArray[RegisteredHandle]->Read_Request_CB!=NULL) {
 800ef50:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800ef54:	f8d3 01d0 	ldr.w	r0, [r3, #464]	; 0x1d0
 800ef58:	6a42      	ldr	r2, [r0, #36]	; 0x24
 800ef5a:	b12a      	cbz	r2, 800ef68 <aci_gatt_read_permit_req_event+0x38>
      if(Attribute_Handle==(BleCharsArray[RegisteredHandle]->attr_handle+1U)) {
 800ef5c:	8b43      	ldrh	r3, [r0, #26]
 800ef5e:	3301      	adds	r3, #1
 800ef60:	429c      	cmp	r4, r3
 800ef62:	d101      	bne.n	800ef68 <aci_gatt_read_permit_req_event+0x38>
        BleCharsArray[RegisteredHandle]->Read_Request_CB(BleCharsArray[RegisteredHandle],Attribute_Handle);
 800ef64:	4621      	mov	r1, r4
 800ef66:	4790      	blx	r2
  for(RegisteredHandle=0;((RegisteredHandle<UsedBleChars) && (FoundHandle==0U));RegisteredHandle++) {
 800ef68:	3601      	adds	r6, #1
 800ef6a:	e7e5      	b.n	800ef38 <aci_gatt_read_permit_req_event+0x8>
}
 800ef6c:	bd70      	pop	{r4, r5, r6, pc}
 800ef6e:	bf00      	nop
 800ef70:	2000338c 	.word	0x2000338c

0800ef74 <aci_gatt_attribute_modified_event>:
void aci_gatt_attribute_modified_event(uint16_t Connection_Handle,
                                       uint16_t Attr_Handle,
                                       uint16_t Offset,
                                       uint16_t Attr_Data_Length,
                                       uint8_t Attr_Data[])
{
 800ef74:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
  uint32_t FoundHandle=0;
  uint8_t RegisteredHandle;
  
  if (Attr_Handle==((uint16_t)(0x0002+2))) {
 800ef78:	2904      	cmp	r1, #4
{
 800ef7a:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 800ef7e:	460c      	mov	r4, r1
 800ef80:	4616      	mov	r6, r2
 800ef82:	461d      	mov	r5, r3
  if (Attr_Handle==((uint16_t)(0x0002+2))) {
 800ef84:	d117      	bne.n	800efb6 <aci_gatt_attribute_modified_event+0x42>
    BLE_MANAGER_PRINTF("Notification on Service Change Characteristic\r\n");
 800ef86:	482e      	ldr	r0, [pc, #184]	; (800f040 <aci_gatt_attribute_modified_event+0xcc>)
 800ef88:	f00b fb14 	bl	801a5b4 <puts>
    FoundHandle=1;
    if(BlueNRG_StackValue.ForceRescan) {
 800ef8c:	4b2d      	ldr	r3, [pc, #180]	; (800f044 <aci_gatt_attribute_modified_event+0xd0>)
 800ef8e:	7f9b      	ldrb	r3, [r3, #30]
 800ef90:	b16b      	cbz	r3, 800efae <aci_gatt_attribute_modified_event+0x3a>
      /* Force one UUID rescan */
      tBleStatus ret = BLE_STATUS_INSUFFICIENT_RESOURCES;
      uint8_t buff[4];
      
      /* Delete all the Handles from 0x0001 to 0xFFFF */
      STORE_LE_16(buff  ,0x0001U);
 800ef92:	4b2d      	ldr	r3, [pc, #180]	; (800f048 <aci_gatt_attribute_modified_event+0xd4>)
 800ef94:	9303      	str	r3, [sp, #12]
      STORE_LE_16(buff+2,0xFFFFU);
      
      ret = aci_gatt_update_char_value(0x0001,0x0002,0,4,buff);
 800ef96:	ab03      	add	r3, sp, #12
 800ef98:	9300      	str	r3, [sp, #0]
 800ef9a:	2200      	movs	r2, #0
 800ef9c:	4623      	mov	r3, r4
 800ef9e:	2102      	movs	r1, #2
 800efa0:	2001      	movs	r0, #1
 800efa2:	f7fc ff6b 	bl	800be7c <aci_gatt_update_char_value>
      
      if (ret == BLE_STATUS_SUCCESS){
 800efa6:	b920      	cbnz	r0, 800efb2 <aci_gatt_attribute_modified_event+0x3e>
        BLE_MANAGER_PRINTF("UUID Rescan Forced\r\n");
 800efa8:	4828      	ldr	r0, [pc, #160]	; (800f04c <aci_gatt_attribute_modified_event+0xd8>)
      } else {
        BLE_MANAGER_PRINTF("Error: Problem forcing UUID Rescan\r\n");
 800efaa:	f00b fb03 	bl	801a5b4 <puts>
    FoundHandle=1;
 800efae:	2101      	movs	r1, #1
 800efb0:	e002      	b.n	800efb8 <aci_gatt_attribute_modified_event+0x44>
        BLE_MANAGER_PRINTF("Error: Problem forcing UUID Rescan\r\n");
 800efb2:	4827      	ldr	r0, [pc, #156]	; (800f050 <aci_gatt_attribute_modified_event+0xdc>)
 800efb4:	e7f9      	b.n	800efaa <aci_gatt_attribute_modified_event+0x36>
  uint32_t FoundHandle=0;
 800efb6:	2100      	movs	r1, #0
      }
    }
  }
  
  //Search inside all the registed handles  
  for(RegisteredHandle=0;((RegisteredHandle<UsedBleChars) && (FoundHandle==0U));RegisteredHandle++) {
 800efb8:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 800f068 <aci_gatt_attribute_modified_event+0xf4>
    
    /* Write */
    if(FoundHandle==0U) {
      if(BleCharsArray[RegisteredHandle]->Write_Request_CB!=NULL) {
        if(Attr_Handle==(BleCharsArray[RegisteredHandle]->attr_handle+1U)) {
          FoundHandle = 1U;
 800efbc:	2700      	movs	r7, #0
          BleCharsArray[RegisteredHandle]->Write_Request_CB(BleCharsArray[RegisteredHandle],Attr_Handle, Offset, Attr_Data_Length, Attr_Data);
 800efbe:	b2ed      	uxtb	r5, r5
  for(RegisteredHandle=0;((RegisteredHandle<UsedBleChars) && (FoundHandle==0U));RegisteredHandle++) {
 800efc0:	f899 21cc 	ldrb.w	r2, [r9, #460]	; 0x1cc
 800efc4:	b2fb      	uxtb	r3, r7
 800efc6:	429a      	cmp	r2, r3
 800efc8:	d923      	bls.n	800f012 <aci_gatt_attribute_modified_event+0x9e>
 800efca:	b111      	cbz	r1, 800efd2 <aci_gatt_attribute_modified_event+0x5e>
      Stderr_Update(BufferToWrite,BytesToWrite);
    } else {
      BLE_MANAGER_PRINTF("Notification UNKNOWN handle =%d\r\n",Attr_Handle);
    }
  }
}
 800efcc:	b004      	add	sp, #16
 800efce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if(BleCharsArray[RegisteredHandle]->AttrMod_Request_CB!=NULL) {
 800efd2:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 800efd6:	f8d3 01d0 	ldr.w	r0, [r3, #464]	; 0x1d0
 800efda:	f8d0 a020 	ldr.w	sl, [r0, #32]
 800efde:	f1ba 0f00 	cmp.w	sl, #0
 800efe2:	d00b      	beq.n	800effc <aci_gatt_attribute_modified_event+0x88>
      if(Attr_Handle==(BleCharsArray[RegisteredHandle]->attr_handle+2U)) {
 800efe4:	8b43      	ldrh	r3, [r0, #26]
 800efe6:	3302      	adds	r3, #2
 800efe8:	429c      	cmp	r4, r3
 800efea:	d107      	bne.n	800effc <aci_gatt_attribute_modified_event+0x88>
          BleCharsArray[RegisteredHandle]->Write_Request_CB(BleCharsArray[RegisteredHandle],Attr_Handle, Offset, Attr_Data_Length, Attr_Data);
 800efec:	4621      	mov	r1, r4
 800efee:	f8cd 8000 	str.w	r8, [sp]
 800eff2:	462b      	mov	r3, r5
 800eff4:	4632      	mov	r2, r6
 800eff6:	47d0      	blx	sl
          FoundHandle = 1U;
 800eff8:	2101      	movs	r1, #1
 800effa:	e008      	b.n	800f00e <aci_gatt_attribute_modified_event+0x9a>
      if(BleCharsArray[RegisteredHandle]->Write_Request_CB!=NULL) {
 800effc:	f8d0 a028 	ldr.w	sl, [r0, #40]	; 0x28
 800f000:	f1ba 0f00 	cmp.w	sl, #0
 800f004:	d003      	beq.n	800f00e <aci_gatt_attribute_modified_event+0x9a>
        if(Attr_Handle==(BleCharsArray[RegisteredHandle]->attr_handle+1U)) {
 800f006:	8b43      	ldrh	r3, [r0, #26]
 800f008:	3301      	adds	r3, #1
 800f00a:	429c      	cmp	r4, r3
 800f00c:	d0ee      	beq.n	800efec <aci_gatt_attribute_modified_event+0x78>
  for(RegisteredHandle=0;((RegisteredHandle<UsedBleChars) && (FoundHandle==0U));RegisteredHandle++) {
 800f00e:	3701      	adds	r7, #1
 800f010:	e7d6      	b.n	800efc0 <aci_gatt_attribute_modified_event+0x4c>
  if(FoundHandle==0U) {
 800f012:	2900      	cmp	r1, #0
 800f014:	d1da      	bne.n	800efcc <aci_gatt_attribute_modified_event+0x58>
    if(BLE_StdErr_Service==BLE_SERV_ENABLE){
 800f016:	4b0f      	ldr	r3, [pc, #60]	; (800f054 <aci_gatt_attribute_modified_event+0xe0>)
 800f018:	781b      	ldrb	r3, [r3, #0]
 800f01a:	2b01      	cmp	r3, #1
 800f01c:	d10a      	bne.n	800f034 <aci_gatt_attribute_modified_event+0xc0>
      BytesToWrite =(uint8_t)sprintf((char *)BufferToWrite, "Notification UNKNOWN handle\n");
 800f01e:	490e      	ldr	r1, [pc, #56]	; (800f058 <aci_gatt_attribute_modified_event+0xe4>)
 800f020:	480e      	ldr	r0, [pc, #56]	; (800f05c <aci_gatt_attribute_modified_event+0xe8>)
 800f022:	f00b fb57 	bl	801a6d4 <strcpy>
 800f026:	4b0e      	ldr	r3, [pc, #56]	; (800f060 <aci_gatt_attribute_modified_event+0xec>)
      Stderr_Update(BufferToWrite,BytesToWrite);
 800f028:	480c      	ldr	r0, [pc, #48]	; (800f05c <aci_gatt_attribute_modified_event+0xe8>)
      BytesToWrite =(uint8_t)sprintf((char *)BufferToWrite, "Notification UNKNOWN handle\n");
 800f02a:	211c      	movs	r1, #28
 800f02c:	7019      	strb	r1, [r3, #0]
      Stderr_Update(BufferToWrite,BytesToWrite);
 800f02e:	f7fe fc99 	bl	800d964 <Stderr_Update>
 800f032:	e7cb      	b.n	800efcc <aci_gatt_attribute_modified_event+0x58>
      BLE_MANAGER_PRINTF("Notification UNKNOWN handle =%d\r\n",Attr_Handle);
 800f034:	4621      	mov	r1, r4
 800f036:	480b      	ldr	r0, [pc, #44]	; (800f064 <aci_gatt_attribute_modified_event+0xf0>)
 800f038:	f00b fa36 	bl	801a4a8 <iprintf>
}
 800f03c:	e7c6      	b.n	800efcc <aci_gatt_attribute_modified_event+0x58>
 800f03e:	bf00      	nop
 800f040:	08021cc9 	.word	0x08021cc9
 800f044:	200099a4 	.word	0x200099a4
 800f048:	ffff0001 	.word	0xffff0001
 800f04c:	08021cf8 	.word	0x08021cf8
 800f050:	08021d0c 	.word	0x08021d0c
 800f054:	200099f8 	.word	0x200099f8
 800f058:	08021d30 	.word	0x08021d30
 800f05c:	20009a30 	.word	0x20009a30
 800f060:	20009b3d 	.word	0x20009b3d
 800f064:	08021d4d 	.word	0x08021d4d
 800f068:	2000338c 	.word	0x2000338c

0800f06c <aci_l2cap_connection_update_resp_event>:
                                            uint16_t Result)
{
#if (BLE_DEBUG_LEVEL>2)
  BLE_MANAGER_PRINTF("aci_l2cap_connection_update_resp_event Result=%d\r\n",Result);
#endif
}
 800f06c:	4770      	bx	lr

0800f06e <hci_le_connection_update_complete_event>:
  BLE_MANAGER_PRINTF("\tStatus=%d\r\n",Status);
  BLE_MANAGER_PRINTF("\tConn_Interval=%d\r\n",Conn_Interval);
  BLE_MANAGER_PRINTF("\tConn_Latency=%d\r\n",Conn_Latency);
  BLE_MANAGER_PRINTF("\tSupervision_Timeout=%d\r\n",Supervision_Timeout);
#endif
}
 800f06e:	4770      	bx	lr

0800f070 <aci_att_exchange_mtu_resp_event>:
* Return         : See file bluenrg1_events.h
*******************************************************************************/
void aci_att_exchange_mtu_resp_event(uint16_t Connection_Handle,
                                     uint16_t Server_RX_MTU)
{
  if((Server_RX_MTU-3U)<MaxBLECharLen) {
 800f070:	4b04      	ldr	r3, [pc, #16]	; (800f084 <aci_att_exchange_mtu_resp_event+0x14>)
 800f072:	f893 20a8 	ldrb.w	r2, [r3, #168]	; 0xa8
 800f076:	3903      	subs	r1, #3
 800f078:	4291      	cmp	r1, r2
    MaxBLECharLen = (uint8_t)(Server_RX_MTU-3U);
 800f07a:	bf38      	it	cc
 800f07c:	f883 10a8 	strbcc.w	r1, [r3, #168]	; 0xa8
  }
#if (BLE_DEBUG_LEVEL>2)
  BLE_MANAGER_PRINTF("aci_att_exchange_mtu_resp_event Server_RX_MTU=%d\r\n",Server_RX_MTU);
#endif
}
 800f080:	4770      	bx	lr
 800f082:	bf00      	nop
 800f084:	2000338c 	.word	0x2000338c

0800f088 <aci_gatt_proc_complete_event>:
* Return         : See file bluenrg1_events.h
*******************************************************************************/
void aci_gatt_proc_complete_event(uint16_t Connection_Handle,
                                  uint8_t Error_Code)
{
  if(Error_Code!=0U) {
 800f088:	b111      	cbz	r1, 800f090 <aci_gatt_proc_complete_event+0x8>
    BLE_MANAGER_PRINTF("Error: aci_gatt_proc_complete_event Error Code=%d\r\n",Error_Code);
 800f08a:	4802      	ldr	r0, [pc, #8]	; (800f094 <aci_gatt_proc_complete_event+0xc>)
 800f08c:	f00b ba0c 	b.w	801a4a8 <iprintf>
#if (BLE_DEBUG_LEVEL>2)
  } else {
    BLE_MANAGER_PRINTF("aci_gatt_proc_complete_event Success\r\n");
#endif
  }
}
 800f090:	4770      	bx	lr
 800f092:	bf00      	nop
 800f094:	08021d6f 	.word	0x08021d6f

0800f098 <hci_le_data_length_change_event>:
void hci_le_data_length_change_event(uint16_t Connection_Handle,
                                     uint16_t MaxTxOctets,
                                     uint16_t MaxTxTime,
                                     uint16_t MaxRxOctets,
                                     uint16_t MaxRxTime)
{
 800f098:	b508      	push	{r3, lr}
  tBleStatus RetStatus;
#if (BLE_DEBUG_LEVEL>2)
  BLE_MANAGER_PRINTF("hci_le_data_length_change_event\r\n");
#endif
  RetStatus = aci_gatt_exchange_config(Connection_Handle);
 800f09a:	f7fc ff1d 	bl	800bed8 <aci_gatt_exchange_config>
  if( RetStatus !=BLE_STATUS_SUCCESS) {
 800f09e:	b120      	cbz	r0, 800f0aa <hci_le_data_length_change_event+0x12>
#if (BLE_DEBUG_LEVEL>2)
  } else {
    BLE_MANAGER_PRINTF("ACI GATT Exchange Config Done\r\n");
#endif
  }
}
 800f0a0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    BLE_MANAGER_PRINTF("Error: ACI GATT Exchange Config Failed\r\n");
 800f0a4:	4801      	ldr	r0, [pc, #4]	; (800f0ac <hci_le_data_length_change_event+0x14>)
 800f0a6:	f00b ba85 	b.w	801a5b4 <puts>
}
 800f0aa:	bd08      	pop	{r3, pc}
 800f0ac:	08021da3 	.word	0x08021da3

0800f0b0 <aci_gatt_indication_event>:
*/
void aci_gatt_indication_event(uint16_t Connection_Handle,
                               uint16_t Attribute_Handle,
                               uint8_t Attribute_Value_Length,
                               uint8_t Attribute_Value[])
{
 800f0b0:	b508      	push	{r3, lr}
    }
    
    BLE_MANAGER_PRINTF("Nothing to do except send confirmation\r\n");
  #endif
#endif /* BLE_MANAGER_DEBUG */
  RetStatus = aci_gatt_confirm_indication(Connection_Handle);
 800f0b2:	f7fc ff31 	bl	800bf18 <aci_gatt_confirm_indication>
  if (RetStatus != BLE_STATUS_SUCCESS) {
 800f0b6:	4601      	mov	r1, r0
 800f0b8:	b120      	cbz	r0, 800f0c4 <aci_gatt_indication_event+0x14>
#if (BLE_DEBUG_LEVEL>2)
  } else {
    BLE_MANAGER_PRINTF("aci_gatt_confirm_indication Done\r\n");
#endif
  }
}
 800f0ba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    BLE_MANAGER_PRINTF("Error: aci_gatt_confirm_indicationt failed %d\r\n",RetStatus);
 800f0be:	4802      	ldr	r0, [pc, #8]	; (800f0c8 <aci_gatt_indication_event+0x18>)
 800f0c0:	f00b b9f2 	b.w	801a4a8 <iprintf>
}
 800f0c4:	bd08      	pop	{r3, pc}
 800f0c6:	bf00      	nop
 800f0c8:	08021dcb 	.word	0x08021dcb

0800f0cc <hci_hardware_error_event>:
- 0x02: Timer overrun error
- 0x03: Internal queue overflow error
* @retval None
*/
void hci_hardware_error_event(uint8_t Hardware_Code)
{
 800f0cc:	b508      	push	{r3, lr}
 800f0ce:	4601      	mov	r1, r0
  BLE_MANAGER_PRINTF("Error: hci_hardware_error_event Hardware_Code=%x\r\n",Hardware_Code);
 800f0d0:	4803      	ldr	r0, [pc, #12]	; (800f0e0 <hci_hardware_error_event+0x14>)
 800f0d2:	f00b f9e9 	bl	801a4a8 <iprintf>
  //BLE_MANAGER_DELAY(1000);
  HAL_NVIC_SystemReset();
}
 800f0d6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_NVIC_SystemReset();
 800f0da:	f7f8 bac7 	b.w	800766c <HAL_NVIC_SystemReset>
 800f0de:	bf00      	nop
 800f0e0:	08021dfb 	.word	0x08021dfb

0800f0e4 <aci_gap_bond_lost_event>:
* Input          : See file bluenrg1_events.h
* Output         : See file bluenrg1_events.h
* Return         : See file bluenrg1_events.h
*******************************************************************************/
void aci_gap_bond_lost_event(void) {
  aci_gap_allow_rebond(connection_handle);
 800f0e4:	4b02      	ldr	r3, [pc, #8]	; (800f0f0 <aci_gap_bond_lost_event+0xc>)
 800f0e6:	f8b3 0252 	ldrh.w	r0, [r3, #594]	; 0x252
 800f0ea:	f7fc bd7b 	b.w	800bbe4 <aci_gap_allow_rebond>
 800f0ee:	bf00      	nop
 800f0f0:	2000338c 	.word	0x2000338c

0800f0f4 <aci_gap_pairing_complete_event>:
* Return         : See file bluenrg1_events.h
*******************************************************************************/
void aci_gap_pairing_complete_event(uint16_t Connection_Handle,
                                    uint8_t Status,
                                    uint8_t Reason)
{
 800f0f4:	b500      	push	{lr}
 800f0f6:	b089      	sub	sp, #36	; 0x24
  
  if(Status==0x00U) {
 800f0f8:	b9c1      	cbnz	r1, 800f12c <aci_gap_pairing_complete_event+0x38>
    BLE_MANAGER_PRINTF("Pairing Completed\r\n");
 800f0fa:	4811      	ldr	r0, [pc, #68]	; (800f140 <aci_gap_pairing_complete_event+0x4c>)
 800f0fc:	f00b fa5a 	bl	801a5b4 <puts>
{
  tBleStatus RetStatus;
  uint8_t NumOfAddresses;
  Bonded_Device_Entry_t BondedDeviceEntry[BLE_MANAGER_MAX_BONDED_DEVICES];
  
  RetStatus =  aci_gap_get_bonded_devices(&NumOfAddresses, BondedDeviceEntry);
 800f100:	a902      	add	r1, sp, #8
 800f102:	f10d 0007 	add.w	r0, sp, #7
 800f106:	f7fc fd8b 	bl	800bc20 <aci_gap_get_bonded_devices>
  
  if (RetStatus == BLE_STATUS_SUCCESS) {
 800f10a:	b948      	cbnz	r0, 800f120 <aci_gap_pairing_complete_event+0x2c>
    if (NumOfAddresses > 0U) {
 800f10c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800f110:	b133      	cbz	r3, 800f120 <aci_gap_pairing_complete_event+0x2c>
#if (BLE_DEBUG_LEVEL>2)
      BLE_MANAGER_PRINTF("Bonded with %d Device(s): \r\n", NumOfAddresses);
#endif
      RetStatus = aci_gap_configure_whitelist();
 800f112:	f7fc fd4b 	bl	800bbac <aci_gap_configure_whitelist>
      if (RetStatus != BLE_STATUS_SUCCESS) {
 800f116:	4601      	mov	r1, r0
 800f118:	b110      	cbz	r0, 800f120 <aci_gap_pairing_complete_event+0x2c>
        BLE_MANAGER_PRINTF("Error: aci_gap_configure_whitelist() failed:0x%02x\r\n", RetStatus);
 800f11a:	480a      	ldr	r0, [pc, #40]	; (800f144 <aci_gap_pairing_complete_event+0x50>)
 800f11c:	f00b f9c4 	bl	801a4a8 <iprintf>
  BLE_MANAGER_DELAY(100);
 800f120:	2064      	movs	r0, #100	; 0x64
 800f122:	f004 ff6d 	bl	8014000 <HAL_Delay>
}
 800f126:	b009      	add	sp, #36	; 0x24
 800f128:	f85d fb04 	ldr.w	pc, [sp], #4
    BLE_MANAGER_PRINTF("Pairing Not Completed for [%s] with reason=%x\r\n",
 800f12c:	4806      	ldr	r0, [pc, #24]	; (800f148 <aci_gap_pairing_complete_event+0x54>)
 800f12e:	4b07      	ldr	r3, [pc, #28]	; (800f14c <aci_gap_pairing_complete_event+0x58>)
 800f130:	2901      	cmp	r1, #1
 800f132:	bf0c      	ite	eq
 800f134:	4601      	moveq	r1, r0
 800f136:	4619      	movne	r1, r3
 800f138:	4805      	ldr	r0, [pc, #20]	; (800f150 <aci_gap_pairing_complete_event+0x5c>)
 800f13a:	f00b f9b5 	bl	801a4a8 <iprintf>
 800f13e:	e7df      	b.n	800f100 <aci_gap_pairing_complete_event+0xc>
 800f140:	08021e3d 	.word	0x08021e3d
 800f144:	08021e80 	.word	0x08021e80
 800f148:	08021e2e 	.word	0x08021e2e
 800f14c:	08021e36 	.word	0x08021e36
 800f150:	08021e50 	.word	0x08021e50

0800f154 <aci_gap_pass_key_req_event>:
{
 800f154:	b508      	push	{r3, lr}
  status = aci_gap_pass_key_resp(connection_handle, BlueNRG_StackValue.SecurePIN);
 800f156:	4b07      	ldr	r3, [pc, #28]	; (800f174 <aci_gap_pass_key_req_event+0x20>)
 800f158:	6999      	ldr	r1, [r3, #24]
 800f15a:	4b07      	ldr	r3, [pc, #28]	; (800f178 <aci_gap_pass_key_req_event+0x24>)
 800f15c:	f8b3 0252 	ldrh.w	r0, [r3, #594]	; 0x252
 800f160:	f7fc fc60 	bl	800ba24 <aci_gap_pass_key_resp>
  if (status != BLE_STATUS_SUCCESS) {
 800f164:	4601      	mov	r1, r0
 800f166:	b120      	cbz	r0, 800f172 <aci_gap_pass_key_req_event+0x1e>
}
 800f168:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    BLE_MANAGER_PRINTF("Error: aci_gap_pass_key_resp failed:0x%02x\r\n", status);
 800f16c:	4803      	ldr	r0, [pc, #12]	; (800f17c <aci_gap_pass_key_req_event+0x28>)
 800f16e:	f00b b99b 	b.w	801a4a8 <iprintf>
}
 800f172:	bd08      	pop	{r3, pc}
 800f174:	200099a4 	.word	0x200099a4
 800f178:	2000338c 	.word	0x2000338c
 800f17c:	08021eb5 	.word	0x08021eb5

0800f180 <aci_gap_numeric_comparison_value_event>:
#if (BLE_DEBUG_LEVEL>2)
  BLE_MANAGER_PRINTF("aci_gap_numeric_comparison_value_event Numeric_Value=%ld\r\n",Numeric_Value);
#endif
  
  /* Confirm Yes... without control of Numeric Value received from Master */
  aci_gap_numeric_comparison_value_confirm_yesno(Connection_Handle,0x01);
 800f180:	2101      	movs	r1, #1
 800f182:	f7fc bd9f 	b.w	800bcc4 <aci_gap_numeric_comparison_value_confirm_yesno>

0800f186 <hci_encryption_change_event>:
void hci_encryption_change_event(uint8_t Status,uint16_t Connection_Handle,uint8_t Encryption_Enabled)
{
#if (BLE_DEBUG_LEVEL>2)
  BLE_MANAGER_PRINTF("hci_encryption_change_event\r\n");  
#endif
}
 800f186:	4770      	bx	lr

0800f188 <AttrMod_Request_TimeDomain>:
 * @param  uint8_t *att_data attribute data
 * @retval None
 */
static void AttrMod_Request_TimeDomain(void *VoidCharPointer, uint16_t attr_handle, uint16_t Offset, uint8_t data_length, uint8_t *att_data)
{
  if (att_data[0] == 01U) {
 800f188:	9b00      	ldr	r3, [sp, #0]
 800f18a:	781b      	ldrb	r3, [r3, #0]
 800f18c:	2b01      	cmp	r3, #1
 800f18e:	d102      	bne.n	800f196 <AttrMod_Request_TimeDomain+0xe>
    BLE_TimeDomain_NotifyEvent= BLE_NOTIFY_SUB;
 800f190:	4a03      	ldr	r2, [pc, #12]	; (800f1a0 <AttrMod_Request_TimeDomain+0x18>)
 800f192:	7013      	strb	r3, [r2, #0]
 800f194:	4770      	bx	lr
  } else if (att_data[0] == 0U){
 800f196:	b913      	cbnz	r3, 800f19e <AttrMod_Request_TimeDomain+0x16>
    BLE_TimeDomain_NotifyEvent= BLE_NOTIFY_UNSUB;
 800f198:	4b01      	ldr	r3, [pc, #4]	; (800f1a0 <AttrMod_Request_TimeDomain+0x18>)
 800f19a:	2202      	movs	r2, #2
 800f19c:	701a      	strb	r2, [r3, #0]
   Term_Update(BufferToWrite,BytesToWrite);
 } else {
   BLE_MANAGER_PRINTF("--->Time Domain=%s", (BLE_TimeDomain_NotifyEvent == BLE_NOTIFY_SUB) ? " ON\r\n" : " OFF\r\n");
 }
#endif
}
 800f19e:	4770      	bx	lr
 800f1a0:	20003618 	.word	0x20003618

0800f1a4 <BLE_InitTimeDomainService>:
{
 800f1a4:	b510      	push	{r4, lr}
  memset(BleCharPointer,0,sizeof(BleCharTypeDef));  
 800f1a6:	4c0f      	ldr	r4, [pc, #60]	; (800f1e4 <BLE_InitTimeDomainService+0x40>)
 800f1a8:	221c      	movs	r2, #28
 800f1aa:	2100      	movs	r1, #0
 800f1ac:	f104 0014 	add.w	r0, r4, #20
 800f1b0:	f00a fc5e 	bl	8019a70 <memset>
  BleCharPointer->AttrMod_Request_CB = AttrMod_Request_TimeDomain;
 800f1b4:	4b0c      	ldr	r3, [pc, #48]	; (800f1e8 <BLE_InitTimeDomainService+0x44>)
  COPY_TIME_DOMAIN_CHAR_UUID((BleCharPointer->uuid));
 800f1b6:	4a0d      	ldr	r2, [pc, #52]	; (800f1ec <BLE_InitTimeDomainService+0x48>)
  BleCharPointer->AttrMod_Request_CB = AttrMod_Request_TimeDomain;
 800f1b8:	6263      	str	r3, [r4, #36]	; 0x24
  COPY_TIME_DOMAIN_CHAR_UUID((BleCharPointer->uuid));
 800f1ba:	4b0d      	ldr	r3, [pc, #52]	; (800f1f0 <BLE_InitTimeDomainService+0x4c>)
 800f1bc:	490d      	ldr	r1, [pc, #52]	; (800f1f4 <BLE_InitTimeDomainService+0x50>)
  BLE_MANAGER_PRINTF("BLE Time Domain features ok\r\n");
 800f1be:	480e      	ldr	r0, [pc, #56]	; (800f1f8 <BLE_InitTimeDomainService+0x54>)
  COPY_TIME_DOMAIN_CHAR_UUID((BleCharPointer->uuid));
 800f1c0:	e9c4 2301 	strd	r2, r3, [r4, #4]
 800f1c4:	2306      	movs	r3, #6
 800f1c6:	e9c4 1303 	strd	r1, r3, [r4, #12]
  BleCharPointer->Char_UUID_Type =UUID_TYPE_128;
 800f1ca:	2302      	movs	r3, #2
 800f1cc:	7523      	strb	r3, [r4, #20]
  BleCharPointer->Char_Value_Length=2+18;
 800f1ce:	2314      	movs	r3, #20
 800f1d0:	82e3      	strh	r3, [r4, #22]
  BleCharPointer->Char_Properties=CHAR_PROP_NOTIFY;
 800f1d2:	4b0a      	ldr	r3, [pc, #40]	; (800f1fc <BLE_InitTimeDomainService+0x58>)
 800f1d4:	61a3      	str	r3, [r4, #24]
  BleCharPointer->Is_Variable=0;
 800f1d6:	2300      	movs	r3, #0
 800f1d8:	7723      	strb	r3, [r4, #28]
  BLE_MANAGER_PRINTF("BLE Time Domain features ok\r\n");
 800f1da:	f00b f9eb 	bl	801a5b4 <puts>
}
 800f1de:	1d20      	adds	r0, r4, #4
 800f1e0:	bd10      	pop	{r4, pc}
 800f1e2:	bf00      	nop
 800f1e4:	20003618 	.word	0x20003618
 800f1e8:	0800f189 	.word	0x0800f189
 800f1ec:	a5d5c51b 	.word	0xa5d5c51b
 800f1f0:	ac360002 	.word	0xac360002
 800f1f4:	000211e1 	.word	0x000211e1
 800f1f8:	08021f04 	.word	0x08021f04
 800f1fc:	10040010 	.word	0x10040010

0800f200 <BLE_SetTimeDomainAdvertizeData>:
  manuf_data[TIME_DOMAIN_ADVERTIZE_DATA_POSITION] |= 0x06U;
 800f200:	7c83      	ldrb	r3, [r0, #18]
 800f202:	f043 0306 	orr.w	r3, r3, #6
 800f206:	7483      	strb	r3, [r0, #18]
}
 800f208:	4770      	bx	lr
	...

0800f20c <BLE_TimeDomainUpdate>:
{
 800f20c:	b510      	push	{r4, lr}
 800f20e:	b08c      	sub	sp, #48	; 0x30
 800f210:	ed8d 0a03 	vstr	s0, [sp, #12]
 800f214:	edcd 0a04 	vstr	s1, [sp, #16]
 800f218:	ed8d 1a05 	vstr	s2, [sp, #20]
 800f21c:	edcd 1a00 	vstr	s3, [sp]
 800f220:	ed8d 2a01 	vstr	s4, [sp, #4]
 800f224:	edcd 2a02 	vstr	s5, [sp, #8]
  STORE_LE_16(Buff  ,(HAL_GetTick()>>3));
 800f228:	f7f8 f9b0 	bl	800758c <HAL_GetTick>
 800f22c:	08c0      	lsrs	r0, r0, #3
 800f22e:	f88d 001c 	strb.w	r0, [sp, #28]
 800f232:	f7f8 f9ab 	bl	800758c <HAL_GetTick>
  TempResult= PeakValue.x * ((float)100);
 800f236:	eddf 6a40 	vldr	s13, [pc, #256]	; 800f338 <BLE_TimeDomainUpdate+0x12c>
 800f23a:	ed9d 7a03 	vldr	s14, [sp, #12]
  TempResult= PeakValue.z * ((float)100);
 800f23e:	eddd 7a05 	vldr	s15, [sp, #20]
  TempResult= PeakValue.x * ((float)100);
 800f242:	ee27 7a26 	vmul.f32	s14, s14, s13
  TempResult= PeakValue.z * ((float)100);
 800f246:	ee67 7aa6 	vmul.f32	s15, s15, s13
  Temp= (uint16_t)TempResult;
 800f24a:	eebc 7ac7 	vcvt.u32.f32	s14, s14
  Temp= (uint16_t)TempResult;
 800f24e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
  Temp= (uint16_t)TempResult;
 800f252:	ee17 3a10 	vmov	r3, s14
  TempResult= PeakValue.y * ((float)100);
 800f256:	ed9d 7a04 	vldr	s14, [sp, #16]
  Temp= (uint16_t)TempResult;
 800f25a:	f8ad 301e 	strh.w	r3, [sp, #30]
  TempResult= PeakValue.y * ((float)100);
 800f25e:	ee27 7a26 	vmul.f32	s14, s14, s13
  STORE_LE_16(Buff  ,(HAL_GetTick()>>3));
 800f262:	0ac0      	lsrs	r0, r0, #11
  Temp= (uint16_t)TempResult;
 800f264:	eebc 7ac7 	vcvt.u32.f32	s14, s14
  STORE_LE_16(Buff  ,(HAL_GetTick()>>3));
 800f268:	f88d 001d 	strb.w	r0, [sp, #29]
  Temp= (uint16_t)TempResult;
 800f26c:	ee17 3a10 	vmov	r3, s14
  TempFloat = SpeedRmsValue.x * ((float)1000);
 800f270:	ed9f 7a32 	vldr	s14, [pc, #200]	; 800f33c <BLE_TimeDomainUpdate+0x130>
  Temp= (uint16_t)TempResult;
 800f274:	f8ad 3020 	strh.w	r3, [sp, #32]
  Temp= (uint16_t)TempResult;
 800f278:	ee17 3a90 	vmov	r3, s15
  Buff[BuffPos]= TempBuff[0];
 800f27c:	eddd 7a00 	vldr	s15, [sp]
  Temp= (uint16_t)TempResult;
 800f280:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
  Buff[BuffPos]= TempBuff[0];
 800f284:	ee67 7a87 	vmul.f32	s15, s15, s14
  ret = ACI_GATT_UPDATE_CHAR_VALUE(&BleCharTimeDomain, 0, 20,Buff);
 800f288:	482d      	ldr	r0, [pc, #180]	; (800f340 <BLE_TimeDomainUpdate+0x134>)
  Buff[BuffPos]= TempBuff[0];
 800f28a:	ee17 3a90 	vmov	r3, s15
  Buff[BuffPos]= TempBuff[0];
 800f28e:	eddd 7a01 	vldr	s15, [sp, #4]
  Buff[BuffPos]= TempBuff[0];
 800f292:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  Buff[BuffPos]= TempBuff[0];
 800f296:	ee67 7a87 	vmul.f32	s15, s15, s14
  Buff[BuffPos]= TempBuff[1];
 800f29a:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800f29e:	f88d 2025 	strb.w	r2, [sp, #37]	; 0x25
  Buff[BuffPos]= TempBuff[2];
 800f2a2:	f3c3 4207 	ubfx	r2, r3, #16, #8
  Buff[BuffPos]= TempBuff[3];
 800f2a6:	f3c3 6307 	ubfx	r3, r3, #24, #8
 800f2aa:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
  Buff[BuffPos]= TempBuff[0];
 800f2ae:	ee17 3a90 	vmov	r3, s15
  Buff[BuffPos]= TempBuff[0];
 800f2b2:	eddd 7a02 	vldr	s15, [sp, #8]
  Buff[BuffPos]= TempBuff[2];
 800f2b6:	f88d 2026 	strb.w	r2, [sp, #38]	; 0x26
  Buff[BuffPos]= TempBuff[0];
 800f2ba:	ee67 7a87 	vmul.f32	s15, s15, s14
  Buff[BuffPos]= TempBuff[1];
 800f2be:	f3c3 2207 	ubfx	r2, r3, #8, #8
  Buff[BuffPos]= TempBuff[0];
 800f2c2:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
  Buff[BuffPos]= TempBuff[1];
 800f2c6:	f88d 2029 	strb.w	r2, [sp, #41]	; 0x29
  Buff[BuffPos]= TempBuff[2];
 800f2ca:	f3c3 4207 	ubfx	r2, r3, #16, #8
  Buff[BuffPos]= TempBuff[3];
 800f2ce:	f3c3 6307 	ubfx	r3, r3, #24, #8
 800f2d2:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
  Buff[BuffPos]= TempBuff[0];
 800f2d6:	ee17 3a90 	vmov	r3, s15
  Buff[BuffPos]= TempBuff[2];
 800f2da:	f88d 202a 	strb.w	r2, [sp, #42]	; 0x2a
  Buff[BuffPos]= TempBuff[1];
 800f2de:	f3c3 2207 	ubfx	r2, r3, #8, #8
  Buff[BuffPos]= TempBuff[0];
 800f2e2:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
  Buff[BuffPos]= TempBuff[1];
 800f2e6:	f88d 202d 	strb.w	r2, [sp, #45]	; 0x2d
  Buff[BuffPos]= TempBuff[2];
 800f2ea:	f3c3 4207 	ubfx	r2, r3, #16, #8
  Buff[BuffPos]= TempBuff[3];
 800f2ee:	f3c3 6307 	ubfx	r3, r3, #24, #8
  Buff[BuffPos]= TempBuff[2];
 800f2f2:	f88d 202e 	strb.w	r2, [sp, #46]	; 0x2e
  Buff[BuffPos]= TempBuff[3];
 800f2f6:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  ret = ACI_GATT_UPDATE_CHAR_VALUE(&BleCharTimeDomain, 0, 20,Buff);
 800f2fa:	2214      	movs	r2, #20
 800f2fc:	ab07      	add	r3, sp, #28
 800f2fe:	2100      	movs	r1, #0
 800f300:	f7fe fb04 	bl	800d90c <safe_aci_gatt_update_char_value>
  if (ret != BLE_STATUS_SUCCESS){
 800f304:	4604      	mov	r4, r0
 800f306:	b178      	cbz	r0, 800f328 <BLE_TimeDomainUpdate+0x11c>
    if(ret != BLE_STATUS_INSUFFICIENT_RESOURCES) {
 800f308:	2864      	cmp	r0, #100	; 0x64
 800f30a:	d010      	beq.n	800f32e <BLE_TimeDomainUpdate+0x122>
      if(BLE_StdErr_Service==BLE_SERV_ENABLE){
 800f30c:	4b0d      	ldr	r3, [pc, #52]	; (800f344 <BLE_TimeDomainUpdate+0x138>)
 800f30e:	781b      	ldrb	r3, [r3, #0]
 800f310:	2b01      	cmp	r3, #1
 800f312:	d10c      	bne.n	800f32e <BLE_TimeDomainUpdate+0x122>
        BytesToWrite =(uint8_t)sprintf((char *)BufferToWrite, "Error Updating Time Domain Char\n");
 800f314:	490c      	ldr	r1, [pc, #48]	; (800f348 <BLE_TimeDomainUpdate+0x13c>)
 800f316:	480d      	ldr	r0, [pc, #52]	; (800f34c <BLE_TimeDomainUpdate+0x140>)
 800f318:	f00b f9dc 	bl	801a6d4 <strcpy>
 800f31c:	4b0c      	ldr	r3, [pc, #48]	; (800f350 <BLE_TimeDomainUpdate+0x144>)
        Stderr_Update(BufferToWrite,BytesToWrite);
 800f31e:	480b      	ldr	r0, [pc, #44]	; (800f34c <BLE_TimeDomainUpdate+0x140>)
        BytesToWrite =(uint8_t)sprintf((char *)BufferToWrite, "Error Updating Time Domain Char\n");
 800f320:	2120      	movs	r1, #32
 800f322:	7019      	strb	r1, [r3, #0]
        Stderr_Update(BufferToWrite,BytesToWrite);
 800f324:	f7fe fb1e 	bl	800d964 <Stderr_Update>
}
 800f328:	4620      	mov	r0, r4
 800f32a:	b00c      	add	sp, #48	; 0x30
 800f32c:	bd10      	pop	{r4, pc}
      BLE_MANAGER_PRINTF("Error Updating Time Domain Char ret=%x\r\n",ret);
 800f32e:	4621      	mov	r1, r4
 800f330:	4808      	ldr	r0, [pc, #32]	; (800f354 <BLE_TimeDomainUpdate+0x148>)
 800f332:	f00b f8b9 	bl	801a4a8 <iprintf>
 800f336:	e7f7      	b.n	800f328 <BLE_TimeDomainUpdate+0x11c>
 800f338:	42c80000 	.word	0x42c80000
 800f33c:	447a0000 	.word	0x447a0000
 800f340:	2000361c 	.word	0x2000361c
 800f344:	200099f8 	.word	0x200099f8
 800f348:	08021f21 	.word	0x08021f21
 800f34c:	20009a30 	.word	0x20009a30
 800f350:	20009b3d 	.word	0x20009b3d
 800f354:	08021f42 	.word	0x08021f42

0800f358 <MotionSP_SwSpeedRmsFilter.part.0>:
  * @return none
  *
  * @details More details
  * Reference by MATLAB DSP Toolbox modified with Y(n-1)^2
  */
static void MotionSP_SwSpeedRmsFilter(SensorVal_f_t *pDstArr, SensorVal_f_t *pSrcArr, float Lambda, uint8_t start)
 800f358:	b570      	push	{r4, r5, r6, lr}
    WN = 1;
  }
  else
  {
    SquareData.AXIS_X = pSrcArr->AXIS_X * pSrcArr->AXIS_X;
    SquareData.AXIS_Y = pSrcArr->AXIS_Y * pSrcArr->AXIS_Y;
 800f35a:	edd1 7a01 	vldr	s15, [r1, #4]

    PrevSquareData.AXIS_X = pDstArr->AXIS_X * pDstArr->AXIS_X;
    PrevSquareData.AXIS_Y = pDstArr->AXIS_Y * pDstArr->AXIS_Y;
    PrevSquareData.AXIS_Z = pDstArr->AXIS_Z * pDstArr->AXIS_Z;

    arm_sqrt_f32(((1 - 1 / WN) * PrevSquareData.AXIS_X + (1 / WN) * SquareData.AXIS_X), &pDstArr->AXIS_X);
 800f35e:	4d31      	ldr	r5, [pc, #196]	; (800f424 <MotionSP_SwSpeedRmsFilter.part.0+0xcc>)
    SquareData.AXIS_X = pSrcArr->AXIS_X * pSrcArr->AXIS_X;
 800f360:	ed91 7a00 	vldr	s14, [r1]
    PrevSquareData.AXIS_X = pDstArr->AXIS_X * pDstArr->AXIS_X;
 800f364:	edd0 6a00 	vldr	s13, [r0]
static void MotionSP_SwSpeedRmsFilter(SensorVal_f_t *pDstArr, SensorVal_f_t *pSrcArr, float Lambda, uint8_t start)
 800f368:	ed2d 8b0a 	vpush	{d8-d12}
    SquareData.AXIS_Y = pSrcArr->AXIS_Y * pSrcArr->AXIS_Y;
 800f36c:	ee27 8aa7 	vmul.f32	s16, s15, s15
    PrevSquareData.AXIS_Y = pDstArr->AXIS_Y * pDstArr->AXIS_Y;
 800f370:	edd0 7a01 	vldr	s15, [r0, #4]
    arm_sqrt_f32(((1 - 1 / WN) * PrevSquareData.AXIS_X + (1 / WN) * SquareData.AXIS_X), &pDstArr->AXIS_X);
 800f374:	edd5 aa00 	vldr	s21, [r5]
    SquareData.AXIS_Z = pSrcArr->AXIS_Z * pSrcArr->AXIS_Z;
 800f378:	edd1 8a02 	vldr	s17, [r1, #8]
    PrevSquareData.AXIS_Z = pDstArr->AXIS_Z * pDstArr->AXIS_Z;
 800f37c:	ed90 ba02 	vldr	s22, [r0, #8]
    PrevSquareData.AXIS_Y = pDstArr->AXIS_Y * pDstArr->AXIS_Y;
 800f380:	ee67 9aa7 	vmul.f32	s19, s15, s15
    arm_sqrt_f32(((1 - 1 / WN) * PrevSquareData.AXIS_X + (1 / WN) * SquareData.AXIS_X), &pDstArr->AXIS_X);
 800f384:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800f388:	ee87 9aaa 	vdiv.f32	s18, s15, s21
static void MotionSP_SwSpeedRmsFilter(SensorVal_f_t *pDstArr, SensorVal_f_t *pSrcArr, float Lambda, uint8_t start)
 800f38c:	4604      	mov	r4, r0
 800f38e:	2600      	movs	r6, #0
    SquareData.AXIS_X = pSrcArr->AXIS_X * pSrcArr->AXIS_X;
 800f390:	ee27 7a07 	vmul.f32	s14, s14, s14
    arm_sqrt_f32(((1 - 1 / WN) * PrevSquareData.AXIS_X + (1 / WN) * SquareData.AXIS_X), &pDstArr->AXIS_X);
 800f394:	ee77 bac9 	vsub.f32	s23, s15, s18
    PrevSquareData.AXIS_X = pDstArr->AXIS_X * pDstArr->AXIS_X;
 800f398:	ee66 6aa6 	vmul.f32	s13, s13, s13
    arm_sqrt_f32(((1 - 1 / WN) * PrevSquareData.AXIS_X + (1 / WN) * SquareData.AXIS_X), &pDstArr->AXIS_X);
 800f39c:	ee27 7a09 	vmul.f32	s14, s14, s18
static void MotionSP_SwSpeedRmsFilter(SensorVal_f_t *pDstArr, SensorVal_f_t *pSrcArr, float Lambda, uint8_t start)
 800f3a0:	eeb0 aa40 	vmov.f32	s20, s0
    arm_sqrt_f32(((1 - 1 / WN) * PrevSquareData.AXIS_X + (1 / WN) * SquareData.AXIS_X), &pDstArr->AXIS_X);
 800f3a4:	eea6 7aab 	vfma.f32	s14, s13, s23
    SquareData.AXIS_Z = pSrcArr->AXIS_Z * pSrcArr->AXIS_Z;
 800f3a8:	ee68 8aa8 	vmul.f32	s17, s17, s17
   */
  CMSIS_INLINE __STATIC_INLINE arm_status arm_sqrt_f32(
  float32_t in,
  float32_t * pOut)
  {
    if (in >= 0.0f)
 800f3ac:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 800f3b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    PrevSquareData.AXIS_Z = pDstArr->AXIS_Z * pDstArr->AXIS_Z;
 800f3b4:	ee2b ba0b 	vmul.f32	s22, s22, s22
    arm_sqrt_f32(((1 - 1 / WN) * PrevSquareData.AXIS_X + (1 / WN) * SquareData.AXIS_X), &pDstArr->AXIS_X);
 800f3b8:	eeb0 0a47 	vmov.f32	s0, s14
 800f3bc:	eeb0 ca67 	vmov.f32	s24, s15
 800f3c0:	db2a      	blt.n	800f418 <MotionSP_SwSpeedRmsFilter.part.0+0xc0>
#if   (__FPU_USED == 1) && defined ( __CC_ARM   )
      *pOut = __sqrtf(in);
#elif (__FPU_USED == 1) && (defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050))
      *pOut = __builtin_sqrtf(in);
#elif (__FPU_USED == 1) && defined(__GNUC__)
      *pOut = __builtin_sqrtf(in);
 800f3c2:	f00e fdcf 	bl	801df64 <sqrtf>
 800f3c6:	ed84 0a00 	vstr	s0, [r4]
    arm_sqrt_f32(((1 - 1 / WN) * PrevSquareData.AXIS_Y + (1 / WN) * SquareData.AXIS_Y), &pDstArr->AXIS_Y);
 800f3ca:	ee68 7a09 	vmul.f32	s15, s16, s18
 800f3ce:	eee9 7aab 	vfma.f32	s15, s19, s23
    if (in >= 0.0f)
 800f3d2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800f3d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f3da:	eeb0 0a67 	vmov.f32	s0, s15
 800f3de:	db1d      	blt.n	800f41c <MotionSP_SwSpeedRmsFilter.part.0+0xc4>
      *pOut = __builtin_sqrtf(in);
 800f3e0:	f00e fdc0 	bl	801df64 <sqrtf>
 800f3e4:	ed84 0a01 	vstr	s0, [r4, #4]
    arm_sqrt_f32(((1 - 1 / WN) * PrevSquareData.AXIS_Z + (1 / WN) * SquareData.AXIS_Z), &pDstArr->AXIS_Z);
 800f3e8:	ee68 8a89 	vmul.f32	s17, s17, s18
 800f3ec:	eeb0 0a68 	vmov.f32	s0, s17
 800f3f0:	eeab 0a2b 	vfma.f32	s0, s22, s23
    if (in >= 0.0f)
 800f3f4:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800f3f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f3fc:	db10      	blt.n	800f420 <MotionSP_SwSpeedRmsFilter.part.0+0xc8>
      *pOut = __builtin_sqrtf(in);
 800f3fe:	f00e fdb1 	bl	801df64 <sqrtf>
 800f402:	ed84 0a02 	vstr	s0, [r4, #8]

    WN_1 =  WN;
    WN =  Lambda * WN_1 + 1;
 800f406:	eef0 7a4c 	vmov.f32	s15, s24
 800f40a:	eeea 7a8a 	vfma.f32	s15, s21, s20
  }
}
 800f40e:	ecbd 8b0a 	vpop	{d8-d12}
    WN =  Lambda * WN_1 + 1;
 800f412:	edc5 7a00 	vstr	s15, [r5]
}
 800f416:	bd70      	pop	{r4, r5, r6, pc}

      return (ARM_MATH_SUCCESS);
    }
    else
    {
      *pOut = 0.0f;
 800f418:	6006      	str	r6, [r0, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 800f41a:	e7d6      	b.n	800f3ca <MotionSP_SwSpeedRmsFilter.part.0+0x72>
      *pOut = 0.0f;
 800f41c:	6066      	str	r6, [r4, #4]
      return (ARM_MATH_ARGUMENT_ERROR);
 800f41e:	e7e3      	b.n	800f3e8 <MotionSP_SwSpeedRmsFilter.part.0+0x90>
      *pOut = 0.0f;
 800f420:	60a6      	str	r6, [r4, #8]
      return (ARM_MATH_ARGUMENT_ERROR);
 800f422:	e7f0      	b.n	800f406 <MotionSP_SwSpeedRmsFilter.part.0+0xae>
 800f424:	20003648 	.word	0x20003648

0800f428 <MotionSP_TD_SpeedEvalFromCircBuff.isra.0>:
  * @param  SrcId Actual Circular Buffer index
  * @param AccOdr Accelerometer ODR info
  * @param Rst Restart flag
  * @return none
  */
static void MotionSP_TD_SpeedEvalFromCircBuff(sTimeDomainData_t *pDst, sCircBuff_t *pSrc, uint16_t SrcId, sAcceleroODR_t  AccOdr, uint8_t Rst)
 800f428:	b530      	push	{r4, r5, lr}
{
  uint16_t previd = 0;
  
  if (Rst)
 800f42a:	b123      	cbz	r3, 800f436 <MotionSP_TD_SpeedEvalFromCircBuff.isra.0+0xe>
  {
    pDst->Speed.AXIS_X = 0.0;
 800f42c:	2300      	movs	r3, #0
 800f42e:	6243      	str	r3, [r0, #36]	; 0x24
    pDst->Speed.AXIS_Y = 0.0;
 800f430:	6283      	str	r3, [r0, #40]	; 0x28
    pDst->Speed.AXIS_Z = 0.0;
 800f432:	62c3      	str	r3, [r0, #44]	; 0x2c
        (GAMMA*AccOdr.Period*(pSrc->Array.Y[SrcId]));
    pDst->Speed.AXIS_Z = pDst->Speed.AXIS_Z +\
      (((1-GAMMA)*AccOdr.Period)*(pSrc->Array.Z[previd]))+\
        (GAMMA*AccOdr.Period*(pSrc->Array.Z[SrcId]));
  }
}
 800f434:	bd30      	pop	{r4, r5, pc}
    if (SrcId == 0)
 800f436:	bbd2      	cbnz	r2, 800f4ae <MotionSP_TD_SpeedEvalFromCircBuff.isra.0+0x86>
      previd = (pSrc->Size)-1;
 800f438:	880b      	ldrh	r3, [r1, #0]
 800f43a:	3b01      	subs	r3, #1
      (((1-GAMMA)*AccOdr.Period)*(pSrc->Array.X[previd]))+\
 800f43c:	688c      	ldr	r4, [r1, #8]
      previd = SrcId-1;
 800f43e:	b29b      	uxth	r3, r3
      (((1-GAMMA)*AccOdr.Period)*(pSrc->Array.X[previd]))+\
 800f440:	eb04 0583 	add.w	r5, r4, r3, lsl #2
 800f444:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800f448:	ee20 0a27 	vmul.f32	s0, s0, s15
    pDst->Speed.AXIS_X = pDst->Speed.AXIS_X +\
 800f44c:	ed95 7a00 	vldr	s14, [r5]
 800f450:	edd0 7a09 	vldr	s15, [r0, #36]	; 0x24
 800f454:	eee0 7a07 	vfma.f32	s15, s0, s14
        (GAMMA*AccOdr.Period*(pSrc->Array.X[SrcId]));
 800f458:	eb04 0482 	add.w	r4, r4, r2, lsl #2
      (((1-GAMMA)*AccOdr.Period)*(pSrc->Array.X[previd]))+\
 800f45c:	ed94 7a00 	vldr	s14, [r4]
      (((1-GAMMA)*AccOdr.Period)*(pSrc->Array.Y[previd]))+\
 800f460:	68cc      	ldr	r4, [r1, #12]
      (((1-GAMMA)*AccOdr.Period)*(pSrc->Array.Z[previd]))+\
 800f462:	6909      	ldr	r1, [r1, #16]
      (((1-GAMMA)*AccOdr.Period)*(pSrc->Array.X[previd]))+\
 800f464:	eee0 7a07 	vfma.f32	s15, s0, s14
      (((1-GAMMA)*AccOdr.Period)*(pSrc->Array.Y[previd]))+\
 800f468:	eb04 0583 	add.w	r5, r4, r3, lsl #2
        (GAMMA*AccOdr.Period*(pSrc->Array.Y[SrcId]));
 800f46c:	eb04 0482 	add.w	r4, r4, r2, lsl #2
      (((1-GAMMA)*AccOdr.Period)*(pSrc->Array.Z[previd]))+\
 800f470:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    pDst->Speed.AXIS_X = pDst->Speed.AXIS_X +\
 800f474:	edc0 7a09 	vstr	s15, [r0, #36]	; 0x24
    pDst->Speed.AXIS_Y = pDst->Speed.AXIS_Y +\
 800f478:	ed95 7a00 	vldr	s14, [r5]
 800f47c:	edd0 7a0a 	vldr	s15, [r0, #40]	; 0x28
 800f480:	eee0 7a07 	vfma.f32	s15, s0, s14
        (GAMMA*AccOdr.Period*(pSrc->Array.Z[SrcId]));
 800f484:	eb01 0282 	add.w	r2, r1, r2, lsl #2
      (((1-GAMMA)*AccOdr.Period)*(pSrc->Array.Y[previd]))+\
 800f488:	ed94 7a00 	vldr	s14, [r4]
 800f48c:	eee0 7a07 	vfma.f32	s15, s0, s14
    pDst->Speed.AXIS_Y = pDst->Speed.AXIS_Y +\
 800f490:	edc0 7a0a 	vstr	s15, [r0, #40]	; 0x28
    pDst->Speed.AXIS_Z = pDst->Speed.AXIS_Z +\
 800f494:	ed93 7a00 	vldr	s14, [r3]
 800f498:	edd0 7a0b 	vldr	s15, [r0, #44]	; 0x2c
 800f49c:	eee0 7a07 	vfma.f32	s15, s0, s14
      (((1-GAMMA)*AccOdr.Period)*(pSrc->Array.Z[previd]))+\
 800f4a0:	ed92 7a00 	vldr	s14, [r2]
 800f4a4:	eee0 7a07 	vfma.f32	s15, s0, s14
    pDst->Speed.AXIS_Z = pDst->Speed.AXIS_Z +\
 800f4a8:	edc0 7a0b 	vstr	s15, [r0, #44]	; 0x2c
}
 800f4ac:	e7c2      	b.n	800f434 <MotionSP_TD_SpeedEvalFromCircBuff.isra.0+0xc>
      previd = SrcId-1;
 800f4ae:	1e53      	subs	r3, r2, #1
 800f4b0:	e7c4      	b.n	800f43c <MotionSP_TD_SpeedEvalFromCircBuff.isra.0+0x14>
	...

0800f4b4 <MotionSP_TD_AccRmsEvalFromCircBuff.isra.0.part.0>:
    
    WN = 1;
  }
  else
  {
    SquareData.AXIS_X = pSrc->Array.X[SrcId] * pSrc->Array.X[SrcId];
 800f4b4:	688b      	ldr	r3, [r1, #8]
    SquareData.AXIS_Y = pSrc->Array.Y[SrcId] * pSrc->Array.Y[SrcId];
    SquareData.AXIS_Z = pSrc->Array.Z[SrcId] * pSrc->Array.Z[SrcId];;
    
    PrevSquareData.AXIS_X = pDst->AccRms.AXIS_X * pDst->AccRms.AXIS_X;
 800f4b6:	edd0 6a03 	vldr	s13, [r0, #12]
    SquareData.AXIS_X = pSrc->Array.X[SrcId] * pSrc->Array.X[SrcId];
 800f4ba:	eb03 0382 	add.w	r3, r3, r2, lsl #2
static void MotionSP_TD_AccRmsEvalFromCircBuff(sTimeDomainData_t *pDst, sCircBuff_t *pSrc, uint16_t SrcId, sAcceleroODR_t  AccOdr, uint8_t Rst)
 800f4be:	b570      	push	{r4, r5, r6, lr}
    SquareData.AXIS_X = pSrc->Array.X[SrcId] * pSrc->Array.X[SrcId];
 800f4c0:	ed93 7a00 	vldr	s14, [r3]
    SquareData.AXIS_Y = pSrc->Array.Y[SrcId] * pSrc->Array.Y[SrcId];
 800f4c4:	68cb      	ldr	r3, [r1, #12]
    PrevSquareData.AXIS_Y = pDst->AccRms.AXIS_Y * pDst->AccRms.AXIS_Y;
    PrevSquareData.AXIS_Z = pDst->AccRms.AXIS_Z * pDst->AccRms.AXIS_Z;
    
    arm_sqrt_f32(((1 - 1 / WN) * PrevSquareData.AXIS_X + (1 / WN) * SquareData.AXIS_X), &pDst->AccRms.AXIS_X);
 800f4c6:	4d33      	ldr	r5, [pc, #204]	; (800f594 <MotionSP_TD_AccRmsEvalFromCircBuff.isra.0.part.0+0xe0>)
    SquareData.AXIS_Y = pSrc->Array.Y[SrcId] * pSrc->Array.Y[SrcId];
 800f4c8:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800f4cc:	edd3 7a00 	vldr	s15, [r3]
    SquareData.AXIS_Z = pSrc->Array.Z[SrcId] * pSrc->Array.Z[SrcId];;
 800f4d0:	690b      	ldr	r3, [r1, #16]
static void MotionSP_TD_AccRmsEvalFromCircBuff(sTimeDomainData_t *pDst, sCircBuff_t *pSrc, uint16_t SrcId, sAcceleroODR_t  AccOdr, uint8_t Rst)
 800f4d2:	ed2d 8b0a 	vpush	{d8-d12}
    SquareData.AXIS_Y = pSrc->Array.Y[SrcId] * pSrc->Array.Y[SrcId];
 800f4d6:	ee27 8aa7 	vmul.f32	s16, s15, s15
    PrevSquareData.AXIS_Y = pDst->AccRms.AXIS_Y * pDst->AccRms.AXIS_Y;
 800f4da:	edd0 7a04 	vldr	s15, [r0, #16]
    arm_sqrt_f32(((1 - 1 / WN) * PrevSquareData.AXIS_X + (1 / WN) * SquareData.AXIS_X), &pDst->AccRms.AXIS_X);
 800f4de:	edd5 aa01 	vldr	s21, [r5, #4]
    PrevSquareData.AXIS_Z = pDst->AccRms.AXIS_Z * pDst->AccRms.AXIS_Z;
 800f4e2:	ed90 ba05 	vldr	s22, [r0, #20]
    PrevSquareData.AXIS_Y = pDst->AccRms.AXIS_Y * pDst->AccRms.AXIS_Y;
 800f4e6:	ee67 9aa7 	vmul.f32	s19, s15, s15
    arm_sqrt_f32(((1 - 1 / WN) * PrevSquareData.AXIS_X + (1 / WN) * SquareData.AXIS_X), &pDst->AccRms.AXIS_X);
 800f4ea:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800f4ee:	ee87 9aaa 	vdiv.f32	s18, s15, s21
    SquareData.AXIS_Z = pSrc->Array.Z[SrcId] * pSrc->Array.Z[SrcId];;
 800f4f2:	eb03 0382 	add.w	r3, r3, r2, lsl #2
static void MotionSP_TD_AccRmsEvalFromCircBuff(sTimeDomainData_t *pDst, sCircBuff_t *pSrc, uint16_t SrcId, sAcceleroODR_t  AccOdr, uint8_t Rst)
 800f4f6:	4604      	mov	r4, r0
 800f4f8:	2600      	movs	r6, #0
    SquareData.AXIS_X = pSrc->Array.X[SrcId] * pSrc->Array.X[SrcId];
 800f4fa:	ee27 7a07 	vmul.f32	s14, s14, s14
    arm_sqrt_f32(((1 - 1 / WN) * PrevSquareData.AXIS_X + (1 / WN) * SquareData.AXIS_X), &pDst->AccRms.AXIS_X);
 800f4fe:	ee77 bac9 	vsub.f32	s23, s15, s18
    PrevSquareData.AXIS_X = pDst->AccRms.AXIS_X * pDst->AccRms.AXIS_X;
 800f502:	ee66 6aa6 	vmul.f32	s13, s13, s13
    arm_sqrt_f32(((1 - 1 / WN) * PrevSquareData.AXIS_X + (1 / WN) * SquareData.AXIS_X), &pDst->AccRms.AXIS_X);
 800f506:	ee27 7a09 	vmul.f32	s14, s14, s18
    SquareData.AXIS_Z = pSrc->Array.Z[SrcId] * pSrc->Array.Z[SrcId];;
 800f50a:	edd3 8a00 	vldr	s17, [r3]
    arm_sqrt_f32(((1 - 1 / WN) * PrevSquareData.AXIS_X + (1 / WN) * SquareData.AXIS_X), &pDst->AccRms.AXIS_X);
 800f50e:	eea6 7aab 	vfma.f32	s14, s13, s23
static void MotionSP_TD_AccRmsEvalFromCircBuff(sTimeDomainData_t *pDst, sCircBuff_t *pSrc, uint16_t SrcId, sAcceleroODR_t  AccOdr, uint8_t Rst)
 800f512:	eeb0 aa40 	vmov.f32	s20, s0
    if (in >= 0.0f)
 800f516:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 800f51a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    SquareData.AXIS_Z = pSrc->Array.Z[SrcId] * pSrc->Array.Z[SrcId];;
 800f51e:	ee68 8aa8 	vmul.f32	s17, s17, s17
    PrevSquareData.AXIS_Z = pDst->AccRms.AXIS_Z * pDst->AccRms.AXIS_Z;
 800f522:	ee2b ba0b 	vmul.f32	s22, s22, s22
    arm_sqrt_f32(((1 - 1 / WN) * PrevSquareData.AXIS_X + (1 / WN) * SquareData.AXIS_X), &pDst->AccRms.AXIS_X);
 800f526:	eeb0 0a47 	vmov.f32	s0, s14
 800f52a:	eeb0 ca67 	vmov.f32	s24, s15
 800f52e:	db2a      	blt.n	800f586 <MotionSP_TD_AccRmsEvalFromCircBuff.isra.0.part.0+0xd2>
      *pOut = __builtin_sqrtf(in);
 800f530:	f00e fd18 	bl	801df64 <sqrtf>
 800f534:	ed84 0a03 	vstr	s0, [r4, #12]
    arm_sqrt_f32(((1 - 1 / WN) * PrevSquareData.AXIS_Y + (1 / WN) * SquareData.AXIS_Y), &pDst->AccRms.AXIS_Y);
 800f538:	ee68 7a09 	vmul.f32	s15, s16, s18
 800f53c:	eee9 7aab 	vfma.f32	s15, s19, s23
    if (in >= 0.0f)
 800f540:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800f544:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f548:	eeb0 0a67 	vmov.f32	s0, s15
 800f54c:	db1d      	blt.n	800f58a <MotionSP_TD_AccRmsEvalFromCircBuff.isra.0.part.0+0xd6>
      *pOut = __builtin_sqrtf(in);
 800f54e:	f00e fd09 	bl	801df64 <sqrtf>
 800f552:	ed84 0a04 	vstr	s0, [r4, #16]
    arm_sqrt_f32(((1 - 1 / WN) * PrevSquareData.AXIS_Z + (1 / WN) * SquareData.AXIS_Z), &pDst->AccRms.AXIS_Z);
 800f556:	ee68 8a89 	vmul.f32	s17, s17, s18
 800f55a:	eeb0 0a68 	vmov.f32	s0, s17
 800f55e:	eeab 0a2b 	vfma.f32	s0, s22, s23
    if (in >= 0.0f)
 800f562:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800f566:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f56a:	db10      	blt.n	800f58e <MotionSP_TD_AccRmsEvalFromCircBuff.isra.0.part.0+0xda>
      *pOut = __builtin_sqrtf(in);
 800f56c:	f00e fcfa 	bl	801df64 <sqrtf>
 800f570:	ed84 0a05 	vstr	s0, [r4, #20]
    
    WN_1 =  WN;
    WN =  AccOdr.Tau * WN_1 + 1;
 800f574:	eef0 7a4c 	vmov.f32	s15, s24
 800f578:	eeea 7a8a 	vfma.f32	s15, s21, s20
  }
}
 800f57c:	ecbd 8b0a 	vpop	{d8-d12}
    WN =  AccOdr.Tau * WN_1 + 1;
 800f580:	edc5 7a01 	vstr	s15, [r5, #4]
}
 800f584:	bd70      	pop	{r4, r5, r6, pc}
      *pOut = 0.0f;
 800f586:	60c6      	str	r6, [r0, #12]
      return (ARM_MATH_ARGUMENT_ERROR);
 800f588:	e7d6      	b.n	800f538 <MotionSP_TD_AccRmsEvalFromCircBuff.isra.0.part.0+0x84>
      *pOut = 0.0f;
 800f58a:	6126      	str	r6, [r4, #16]
      return (ARM_MATH_ARGUMENT_ERROR);
 800f58c:	e7e3      	b.n	800f556 <MotionSP_TD_AccRmsEvalFromCircBuff.isra.0.part.0+0xa2>
      *pOut = 0.0f;
 800f58e:	6166      	str	r6, [r4, #20]
      return (ARM_MATH_ARGUMENT_ERROR);
 800f590:	e7f0      	b.n	800f574 <MotionSP_TD_AccRmsEvalFromCircBuff.isra.0.part.0+0xc0>
 800f592:	bf00      	nop
 800f594:	20003648 	.word	0x20003648

0800f598 <MotionSP_speedDelOffset.part.0.constprop.0>:
    pDstArr->AXIS_X = (Smooth * DstArrPre.AXIS_X) + Smooth * (pSrcArr->AXIS_X - SrcArrPre.AXIS_X);
 800f598:	4b1c      	ldr	r3, [pc, #112]	; (800f60c <MotionSP_speedDelOffset.part.0.constprop.0+0x74>)
 800f59a:	edd1 6a00 	vldr	s13, [r1]
 800f59e:	edd3 7a05 	vldr	s15, [r3, #20]
 800f5a2:	ed9f 6a1b 	vldr	s12, [pc, #108]	; 800f610 <MotionSP_speedDelOffset.part.0.constprop.0+0x78>
    pDstArr->AXIS_Y = (Smooth * DstArrPre.AXIS_Y) + Smooth * (pSrcArr->AXIS_Y - SrcArrPre.AXIS_Y);
 800f5a6:	ed91 7a01 	vldr	s14, [r1, #4]
    pDstArr->AXIS_Z = (Smooth * DstArrPre.AXIS_Z) + Smooth * (pSrcArr->AXIS_Z - SrcArrPre.AXIS_Z);
 800f5aa:	edd3 5a07 	vldr	s11, [r3, #28]
    pDstArr->AXIS_X = (Smooth * DstArrPre.AXIS_X) + Smooth * (pSrcArr->AXIS_X - SrcArrPre.AXIS_X);
 800f5ae:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800f5b2:	edd3 7a02 	vldr	s15, [r3, #8]
 800f5b6:	ee66 6a86 	vmul.f32	s13, s13, s12
 800f5ba:	eee7 6a86 	vfma.f32	s13, s15, s12
    pDstArr->AXIS_Y = (Smooth * DstArrPre.AXIS_Y) + Smooth * (pSrcArr->AXIS_Y - SrcArrPre.AXIS_Y);
 800f5be:	edd3 7a06 	vldr	s15, [r3, #24]
    pDstArr->AXIS_X = (Smooth * DstArrPre.AXIS_X) + Smooth * (pSrcArr->AXIS_X - SrcArrPre.AXIS_X);
 800f5c2:	edc0 6a00 	vstr	s13, [r0]
    pDstArr->AXIS_Y = (Smooth * DstArrPre.AXIS_Y) + Smooth * (pSrcArr->AXIS_Y - SrcArrPre.AXIS_Y);
 800f5c6:	ee37 7a67 	vsub.f32	s14, s14, s15
 800f5ca:	edd3 7a03 	vldr	s15, [r3, #12]
    SrcArrPre.AXIS_X = pSrcArr->AXIS_X;
 800f5ce:	680a      	ldr	r2, [r1, #0]
 800f5d0:	615a      	str	r2, [r3, #20]
    pDstArr->AXIS_Y = (Smooth * DstArrPre.AXIS_Y) + Smooth * (pSrcArr->AXIS_Y - SrcArrPre.AXIS_Y);
 800f5d2:	ee27 7a06 	vmul.f32	s14, s14, s12
    DstArrPre.AXIS_X = pDstArr->AXIS_X;
 800f5d6:	edc3 6a02 	vstr	s13, [r3, #8]
    pDstArr->AXIS_Y = (Smooth * DstArrPre.AXIS_Y) + Smooth * (pSrcArr->AXIS_Y - SrcArrPre.AXIS_Y);
 800f5da:	eea7 7a86 	vfma.f32	s14, s15, s12
    pDstArr->AXIS_Z = (Smooth * DstArrPre.AXIS_Z) + Smooth * (pSrcArr->AXIS_Z - SrcArrPre.AXIS_Z);
 800f5de:	edd1 7a02 	vldr	s15, [r1, #8]
    pDstArr->AXIS_Y = (Smooth * DstArrPre.AXIS_Y) + Smooth * (pSrcArr->AXIS_Y - SrcArrPre.AXIS_Y);
 800f5e2:	ed80 7a01 	vstr	s14, [r0, #4]
    pDstArr->AXIS_Z = (Smooth * DstArrPre.AXIS_Z) + Smooth * (pSrcArr->AXIS_Z - SrcArrPre.AXIS_Z);
 800f5e6:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800f5ea:	edd3 5a04 	vldr	s11, [r3, #16]
    SrcArrPre.AXIS_Y = pSrcArr->AXIS_Y;
 800f5ee:	684a      	ldr	r2, [r1, #4]
 800f5f0:	619a      	str	r2, [r3, #24]
    pDstArr->AXIS_Z = (Smooth * DstArrPre.AXIS_Z) + Smooth * (pSrcArr->AXIS_Z - SrcArrPre.AXIS_Z);
 800f5f2:	ee67 7a86 	vmul.f32	s15, s15, s12
    DstArrPre.AXIS_Y = pDstArr->AXIS_Y;
 800f5f6:	ed83 7a03 	vstr	s14, [r3, #12]
    pDstArr->AXIS_Z = (Smooth * DstArrPre.AXIS_Z) + Smooth * (pSrcArr->AXIS_Z - SrcArrPre.AXIS_Z);
 800f5fa:	eee5 7a86 	vfma.f32	s15, s11, s12
 800f5fe:	edc0 7a02 	vstr	s15, [r0, #8]
    SrcArrPre.AXIS_Z = pSrcArr->AXIS_Z;
 800f602:	688a      	ldr	r2, [r1, #8]
    DstArrPre.AXIS_Z = pDstArr->AXIS_Z;
 800f604:	edc3 7a04 	vstr	s15, [r3, #16]
    SrcArrPre.AXIS_Z = pSrcArr->AXIS_Z;
 800f608:	61da      	str	r2, [r3, #28]
}
 800f60a:	4770      	bx	lr
 800f60c:	20003648 	.word	0x20003648
 800f610:	3f79999a 	.word	0x3f79999a

0800f614 <MotionSP_TimeDomainEvalFromCircBuff>:
  * @param AccOdr Accelerometer ODR info
  * @param Rst Restart flag
  * @return none
  */
void MotionSP_TimeDomainEvalFromCircBuff(sTimeDomainData_t *pTimeDomainData, sCircBuff_t *pAccCircBuff, uint16_t NewDataSamples, Td_Type_t td_type, sAcceleroODR_t  AccOdr, uint8_t Rst)
{
 800f614:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f618:	ed2d 8b04 	vpush	{d8-d9}
 800f61c:	460e      	mov	r6, r1
 800f61e:	b085      	sub	sp, #20
  int16_t id = 0;
  uint16_t s = 0;
  
  /* Evaluate the initial IdPos for theese new data samples */
  id = (pAccCircBuff->IdPos) - (NewDataSamples - 1);
 800f620:	f1c2 0101 	rsb	r1, r2, #1
{
 800f624:	9200      	str	r2, [sp, #0]
  id = (pAccCircBuff->IdPos) - (NewDataSamples - 1);
 800f626:	8872      	ldrh	r2, [r6, #2]
{
 800f628:	f89d 9048 	ldrb.w	r9, [sp, #72]	; 0x48
    WN = 1;
 800f62c:	4d75      	ldr	r5, [pc, #468]	; (800f804 <MotionSP_TimeDomainEvalFromCircBuff+0x1f0>)
    pDstArr->AXIS_X = 0.0;
 800f62e:	ed9f 8a76 	vldr	s16, [pc, #472]	; 800f808 <MotionSP_TimeDomainEvalFromCircBuff+0x1f4>
{
 800f632:	ed8d 0a01 	vstr	s0, [sp, #4]
  id = (pAccCircBuff->IdPos) - (NewDataSamples - 1);
 800f636:	4411      	add	r1, r2
 800f638:	b28a      	uxth	r2, r1
 800f63a:	b209      	sxth	r1, r1
  if (id < 0)
 800f63c:	2900      	cmp	r1, #0
    id += (pAccCircBuff->Size);
 800f63e:	bfb8      	it	lt
 800f640:	8831      	ldrhlt	r1, [r6, #0]
{
 800f642:	edcd 0a02 	vstr	s1, [sp, #8]
    id += (pAccCircBuff->Size);
 800f646:	bfb8      	it	lt
 800f648:	1889      	addlt	r1, r1, r2
{
 800f64a:	4604      	mov	r4, r0
 800f64c:	461f      	mov	r7, r3
 800f64e:	eeb0 9a60 	vmov.f32	s18, s1
 800f652:	eef0 8a41 	vmov.f32	s17, s2
 800f656:	ed8d 1a03 	vstr	s2, [sp, #12]
    id += (pAccCircBuff->Size);
 800f65a:	bfb8      	it	lt
 800f65c:	b209      	sxthlt	r1, r1
{
 800f65e:	f04f 0a00 	mov.w	sl, #0
    WN = 1;
 800f662:	eef7 9a00 	vmov.f32	s19, #112	; 0x3f800000  1.0
  
  for (s=0; s<NewDataSamples; s++)
 800f666:	9b00      	ldr	r3, [sp, #0]
 800f668:	4553      	cmp	r3, sl
 800f66a:	d104      	bne.n	800f676 <MotionSP_TimeDomainEvalFromCircBuff+0x62>
    id %= (pAccCircBuff->Size);
    
    if (Rst)
      Rst = 0;
  }
}
 800f66c:	b005      	add	sp, #20
 800f66e:	ecbd 8b04 	vpop	{d8-d9}
 800f672:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (pDst->AccPeak.AXIS_X < fabsf(pSrc->Array.X[SrcId]))
 800f676:	68b3      	ldr	r3, [r6, #8]
 800f678:	ed94 7a00 	vldr	s14, [r4]
    MotionSP_TD_PeakEvalFromCircBuff(pTimeDomainData, pAccCircBuff, id);
 800f67c:	fa1f f881 	uxth.w	r8, r1
  if (pDst->AccPeak.AXIS_X < fabsf(pSrc->Array.X[SrcId]))
 800f680:	eb03 0188 	add.w	r1, r3, r8, lsl #2
 800f684:	edd1 7a00 	vldr	s15, [r1]
  if (pDst->AccPeak.AXIS_Y < fabsf(pSrc->Array.Y[SrcId]))
 800f688:	68f3      	ldr	r3, [r6, #12]
  if (pDst->AccPeak.AXIS_X < fabsf(pSrc->Array.X[SrcId]))
 800f68a:	eef0 7ae7 	vabs.f32	s15, s15
 800f68e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800f692:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f696:	ea4f 0b88 	mov.w	fp, r8, lsl #2
    pDst->AccPeak.AXIS_X = fabsf(pSrc->Array.X[SrcId]);
 800f69a:	bf48      	it	mi
 800f69c:	edc4 7a00 	vstrmi	s15, [r4]
  if (pDst->AccPeak.AXIS_Y < fabsf(pSrc->Array.Y[SrcId]))
 800f6a0:	eb03 000b 	add.w	r0, r3, fp
 800f6a4:	edd0 7a00 	vldr	s15, [r0]
 800f6a8:	ed94 7a01 	vldr	s14, [r4, #4]
  if (pDst->AccPeak.AXIS_Z < fabsf(pSrc->Array.Z[SrcId]))
 800f6ac:	6933      	ldr	r3, [r6, #16]
  if (pDst->AccPeak.AXIS_Y < fabsf(pSrc->Array.Y[SrcId]))
 800f6ae:	eef0 7ae7 	vabs.f32	s15, s15
 800f6b2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800f6b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    pDst->AccPeak.AXIS_Y = fabsf(pSrc->Array.Y[SrcId]);
 800f6ba:	bf48      	it	mi
 800f6bc:	edc4 7a01 	vstrmi	s15, [r4, #4]
  if (pDst->AccPeak.AXIS_Z < fabsf(pSrc->Array.Z[SrcId]))
 800f6c0:	445b      	add	r3, fp
 800f6c2:	edd3 7a00 	vldr	s15, [r3]
 800f6c6:	ed94 7a02 	vldr	s14, [r4, #8]
 800f6ca:	eef0 7ae7 	vabs.f32	s15, s15
 800f6ce:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800f6d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    pDst->AccPeak.AXIS_Z = fabsf(pSrc->Array.Z[SrcId]);      
 800f6d6:	bf48      	it	mi
 800f6d8:	edc4 7a02 	vstrmi	s15, [r4, #8]
    switch (td_type)
 800f6dc:	2f01      	cmp	r7, #1
 800f6de:	d040      	beq.n	800f762 <MotionSP_TimeDomainEvalFromCircBuff+0x14e>
 800f6e0:	2f02      	cmp	r7, #2
 800f6e2:	d04a      	beq.n	800f77a <MotionSP_TimeDomainEvalFromCircBuff+0x166>
 800f6e4:	bb1f      	cbnz	r7, 800f72e <MotionSP_TimeDomainEvalFromCircBuff+0x11a>
      MotionSP_TD_SpeedEvalFromCircBuff(pTimeDomainData, pAccCircBuff, id, AccOdr, Rst);
 800f6e6:	4620      	mov	r0, r4
 800f6e8:	464b      	mov	r3, r9
 800f6ea:	eeb0 0a49 	vmov.f32	s0, s18
 800f6ee:	4642      	mov	r2, r8
 800f6f0:	4631      	mov	r1, r6
 800f6f2:	f7ff fe99 	bl	800f428 <MotionSP_TD_SpeedEvalFromCircBuff.isra.0>
  if (Restart == 1)
 800f6f6:	f1b9 0f01 	cmp.w	r9, #1
      MotionSP_speedDelOffset(&pTimeDomainData->Speed_noDC, &pTimeDomainData->Speed, DC_SMOOTH, Rst);
 800f6fa:	f104 0030 	add.w	r0, r4, #48	; 0x30
  if (Restart == 1)
 800f6fe:	d124      	bne.n	800f74a <MotionSP_TimeDomainEvalFromCircBuff+0x136>
    DstArrPre.AXIS_X = pSrcArr->AXIS_X;
 800f700:	6a60      	ldr	r0, [r4, #36]	; 0x24
    DstArrPre.AXIS_Y = pSrcArr->AXIS_Y;
 800f702:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    DstArrPre.AXIS_Z = pSrcArr->AXIS_Z;
 800f704:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    pDstArr->AXIS_X = 0.0;
 800f706:	ed84 8a0c 	vstr	s16, [r4, #48]	; 0x30
    pDstArr->AXIS_Y = 0.0;
 800f70a:	ed84 8a0d 	vstr	s16, [r4, #52]	; 0x34
    pDstArr->AXIS_Z = 0.0;
 800f70e:	ed84 8a0e 	vstr	s16, [r4, #56]	; 0x38
    DstArrPre.AXIS_X = pSrcArr->AXIS_X;
 800f712:	60a8      	str	r0, [r5, #8]
    DstArrPre.AXIS_Y = pSrcArr->AXIS_Y;
 800f714:	60e9      	str	r1, [r5, #12]
    DstArrPre.AXIS_Z = pSrcArr->AXIS_Z;
 800f716:	612b      	str	r3, [r5, #16]
    SrcArrPre.AXIS_X = pSrcArr->AXIS_X;
 800f718:	6168      	str	r0, [r5, #20]
    SrcArrPre.AXIS_Y = pSrcArr->AXIS_Y;
 800f71a:	61a9      	str	r1, [r5, #24]
    SrcArrPre.AXIS_Z = pSrcArr->AXIS_Z;
 800f71c:	61eb      	str	r3, [r5, #28]
    pDstArr->AXIS_X = pSrcArr->AXIS_X;
 800f71e:	ed84 8a06 	vstr	s16, [r4, #24]
    pDstArr->AXIS_Y = pSrcArr->AXIS_Y;
 800f722:	ed84 8a07 	vstr	s16, [r4, #28]
    pDstArr->AXIS_Z = pSrcArr->AXIS_Z;
 800f726:	ed84 8a08 	vstr	s16, [r4, #32]
    WN = 1;
 800f72a:	edc5 9a00 	vstr	s19, [r5]
    id %= (pAccCircBuff->Size);
 800f72e:	8833      	ldrh	r3, [r6, #0]
    id++;
 800f730:	f108 0101 	add.w	r1, r8, #1
    id %= (pAccCircBuff->Size);
 800f734:	b20a      	sxth	r2, r1
 800f736:	fb92 f1f3 	sdiv	r1, r2, r3
 800f73a:	fb03 2111 	mls	r1, r3, r1, r2
 800f73e:	b209      	sxth	r1, r1
  for (s=0; s<NewDataSamples; s++)
 800f740:	f10a 0a01 	add.w	sl, sl, #1
    id %= (pAccCircBuff->Size);
 800f744:	f04f 0900 	mov.w	r9, #0
 800f748:	e78d      	b.n	800f666 <MotionSP_TimeDomainEvalFromCircBuff+0x52>
 800f74a:	f104 0124 	add.w	r1, r4, #36	; 0x24
 800f74e:	f7ff ff23 	bl	800f598 <MotionSP_speedDelOffset.part.0.constprop.0>
  if (start == 1)
 800f752:	eeb0 0a68 	vmov.f32	s0, s17
 800f756:	4601      	mov	r1, r0
 800f758:	f104 0018 	add.w	r0, r4, #24
 800f75c:	f7ff fdfc 	bl	800f358 <MotionSP_SwSpeedRmsFilter.part.0>
 800f760:	e7e5      	b.n	800f72e <MotionSP_TimeDomainEvalFromCircBuff+0x11a>
  if (Rst)
 800f762:	f1b9 0f00 	cmp.w	r9, #0
 800f766:	d045      	beq.n	800f7f4 <MotionSP_TimeDomainEvalFromCircBuff+0x1e0>
    pDst->AccRms.AXIS_X = pSrc->Array.X[SrcId];
 800f768:	6809      	ldr	r1, [r1, #0]
 800f76a:	60e1      	str	r1, [r4, #12]
    pDst->AccRms.AXIS_Y = pSrc->Array.Y[SrcId];
 800f76c:	6801      	ldr	r1, [r0, #0]
 800f76e:	6121      	str	r1, [r4, #16]
    pDst->AccRms.AXIS_Z = pSrc->Array.Z[SrcId];
 800f770:	681b      	ldr	r3, [r3, #0]
 800f772:	6163      	str	r3, [r4, #20]
    WN = 1;
 800f774:	edc5 9a01 	vstr	s19, [r5, #4]
 800f778:	e7d9      	b.n	800f72e <MotionSP_TimeDomainEvalFromCircBuff+0x11a>
      MotionSP_TD_SpeedEvalFromCircBuff(pTimeDomainData, pAccCircBuff, id, AccOdr, Rst);
 800f77a:	4620      	mov	r0, r4
 800f77c:	464b      	mov	r3, r9
 800f77e:	eeb0 0a49 	vmov.f32	s0, s18
 800f782:	4642      	mov	r2, r8
 800f784:	4631      	mov	r1, r6
 800f786:	f7ff fe4f 	bl	800f428 <MotionSP_TD_SpeedEvalFromCircBuff.isra.0>
  if (Restart == 1)
 800f78a:	f1b9 0f01 	cmp.w	r9, #1
      MotionSP_speedDelOffset(&pTimeDomainData->Speed_noDC, &pTimeDomainData->Speed, DC_SMOOTH, Rst);
 800f78e:	f104 0030 	add.w	r0, r4, #48	; 0x30
  if (Restart == 1)
 800f792:	d121      	bne.n	800f7d8 <MotionSP_TimeDomainEvalFromCircBuff+0x1c4>
    DstArrPre.AXIS_X = pSrcArr->AXIS_X;
 800f794:	6a60      	ldr	r0, [r4, #36]	; 0x24
    DstArrPre.AXIS_Y = pSrcArr->AXIS_Y;
 800f796:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    DstArrPre.AXIS_Z = pSrcArr->AXIS_Z;
 800f798:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    pDstArr->AXIS_X = 0.0;
 800f79a:	ed84 8a0c 	vstr	s16, [r4, #48]	; 0x30
    pDstArr->AXIS_Y = 0.0;
 800f79e:	ed84 8a0d 	vstr	s16, [r4, #52]	; 0x34
    pDstArr->AXIS_Z = 0.0;
 800f7a2:	ed84 8a0e 	vstr	s16, [r4, #56]	; 0x38
    DstArrPre.AXIS_X = pSrcArr->AXIS_X;
 800f7a6:	60a8      	str	r0, [r5, #8]
    DstArrPre.AXIS_Y = pSrcArr->AXIS_Y;
 800f7a8:	60e9      	str	r1, [r5, #12]
    DstArrPre.AXIS_Z = pSrcArr->AXIS_Z;
 800f7aa:	612b      	str	r3, [r5, #16]
    SrcArrPre.AXIS_X = pSrcArr->AXIS_X;
 800f7ac:	6168      	str	r0, [r5, #20]
    SrcArrPre.AXIS_Y = pSrcArr->AXIS_Y;
 800f7ae:	61a9      	str	r1, [r5, #24]
    SrcArrPre.AXIS_Z = pSrcArr->AXIS_Z;
 800f7b0:	61eb      	str	r3, [r5, #28]
    pDstArr->AXIS_X = pSrcArr->AXIS_X;
 800f7b2:	ed84 8a06 	vstr	s16, [r4, #24]
    pDstArr->AXIS_Y = pSrcArr->AXIS_Y;
 800f7b6:	ed84 8a07 	vstr	s16, [r4, #28]
    pDstArr->AXIS_Z = pSrcArr->AXIS_Z;
 800f7ba:	ed84 8a08 	vstr	s16, [r4, #32]
    WN = 1;
 800f7be:	edc5 9a00 	vstr	s19, [r5]
    pDst->AccRms.AXIS_X = pSrc->Array.X[SrcId];
 800f7c2:	68b3      	ldr	r3, [r6, #8]
 800f7c4:	445b      	add	r3, fp
 800f7c6:	681b      	ldr	r3, [r3, #0]
 800f7c8:	60e3      	str	r3, [r4, #12]
    pDst->AccRms.AXIS_Y = pSrc->Array.Y[SrcId];
 800f7ca:	68f3      	ldr	r3, [r6, #12]
 800f7cc:	445b      	add	r3, fp
 800f7ce:	681b      	ldr	r3, [r3, #0]
 800f7d0:	6123      	str	r3, [r4, #16]
    pDst->AccRms.AXIS_Z = pSrc->Array.Z[SrcId];
 800f7d2:	6933      	ldr	r3, [r6, #16]
 800f7d4:	445b      	add	r3, fp
 800f7d6:	e7cb      	b.n	800f770 <MotionSP_TimeDomainEvalFromCircBuff+0x15c>
 800f7d8:	f104 0124 	add.w	r1, r4, #36	; 0x24
 800f7dc:	f7ff fedc 	bl	800f598 <MotionSP_speedDelOffset.part.0.constprop.0>
  if (start == 1)
 800f7e0:	eeb0 0a68 	vmov.f32	s0, s17
 800f7e4:	4601      	mov	r1, r0
 800f7e6:	f104 0018 	add.w	r0, r4, #24
 800f7ea:	f7ff fdb5 	bl	800f358 <MotionSP_SwSpeedRmsFilter.part.0>
  if (Rst)
 800f7ee:	f1b9 0f00 	cmp.w	r9, #0
 800f7f2:	d1e6      	bne.n	800f7c2 <MotionSP_TimeDomainEvalFromCircBuff+0x1ae>
 800f7f4:	eeb0 0a68 	vmov.f32	s0, s17
 800f7f8:	4642      	mov	r2, r8
 800f7fa:	4631      	mov	r1, r6
 800f7fc:	4620      	mov	r0, r4
 800f7fe:	f7ff fe59 	bl	800f4b4 <MotionSP_TD_AccRmsEvalFromCircBuff.isra.0.part.0>
 800f802:	e794      	b.n	800f72e <MotionSP_TimeDomainEvalFromCircBuff+0x11a>
 800f804:	20003648 	.word	0x20003648
 800f808:	00000000 	.word	0x00000000

0800f80c <MotionSP_fftCalc>:
  * @param  pfftIn pointer to the FFT-In array
  * @param  pfftOut pointer to the FFT-Out array
  * @return none
  */
void MotionSP_fftCalc(arm_rfft_fast_instance_f32 *pfftS, float *pfftIn, float *pfftOut)
{
 800f80c:	b570      	push	{r4, r5, r6, lr}
  static float fftTmp[FFT_SIZE_MAX];

  // Compute the Fourier transform of the signal.
  arm_rfft_fast_f32(pfftS, pfftIn, fftTmp, 0);
 800f80e:	4e07      	ldr	r6, [pc, #28]	; (800f82c <MotionSP_fftCalc+0x20>)
{
 800f810:	4605      	mov	r5, r0
 800f812:	4614      	mov	r4, r2
  arm_rfft_fast_f32(pfftS, pfftIn, fftTmp, 0);
 800f814:	2300      	movs	r3, #0
 800f816:	4632      	mov	r2, r6
 800f818:	f008 fbaa 	bl	8017f70 <arm_rfft_fast_f32>

  // Compute the two-sided spectrum
  arm_cmplx_mag_f32(fftTmp, pfftOut, pfftS->fftLenRFFT / 2);
 800f81c:	8a2a      	ldrh	r2, [r5, #16]
 800f81e:	4621      	mov	r1, r4
 800f820:	4630      	mov	r0, r6
 800f822:	0852      	lsrs	r2, r2, #1
}
 800f824:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  arm_cmplx_mag_f32(fftTmp, pfftOut, pfftS->fftLenRFFT / 2);
 800f828:	f009 ba3c 	b.w	8018ca4 <arm_cmplx_mag_f32>
 800f82c:	20008688 	.word	0x20008688

0800f830 <MotionSP_fftAdapting>:
  * @param  pAccMagResults The structure for FFT Results
  * @param  WSF Scale factor to correct amplitude
  * @return none
  */
void MotionSP_fftAdapting(sAccMagResults_t *pAccMagResults, float WSF)
{
 800f830:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint16_t cnt = pAccMagResults->MagSizeTBU;
 800f832:	8846      	ldrh	r6, [r0, #2]
  uint16_t size = pAccMagResults->MagSize;
 800f834:	8807      	ldrh	r7, [r0, #0]
  
  for (int i = 0; i < cnt; i++)
 800f836:	2300      	movs	r3, #0
  {
    if (i == 0) /* Adjust DC component */
    {
      pAccMagResults->Array.X[i] = 0.0;
 800f838:	2500      	movs	r5, #0
  for (int i = 0; i < cnt; i++)
 800f83a:	429e      	cmp	r6, r3
 800f83c:	dc00      	bgt.n	800f840 <MotionSP_fftAdapting+0x10>
      pAccMagResults->Array.X[i] = (pAccMagResults->Array.X[i] * WSF) / size;
      pAccMagResults->Array.Y[i] = (pAccMagResults->Array.Y[i] * WSF) / size;
      pAccMagResults->Array.Z[i] = (pAccMagResults->Array.Z[i] * WSF) / size;
    }
  }
}
 800f83e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (i == 0) /* Adjust DC component */
 800f840:	e9d0 4102 	ldrd	r4, r1, [r0, #8]
 800f844:	6902      	ldr	r2, [r0, #16]
 800f846:	b923      	cbnz	r3, 800f852 <MotionSP_fftAdapting+0x22>
      pAccMagResults->Array.X[i] = 0.0;
 800f848:	6025      	str	r5, [r4, #0]
      pAccMagResults->Array.Y[i] = 0.0;
 800f84a:	600d      	str	r5, [r1, #0]
      pAccMagResults->Array.Z[i] = 0.0;
 800f84c:	6015      	str	r5, [r2, #0]
  for (int i = 0; i < cnt; i++)
 800f84e:	3301      	adds	r3, #1
 800f850:	e7f3      	b.n	800f83a <MotionSP_fftAdapting+0xa>
      pAccMagResults->Array.X[i] = (pAccMagResults->Array.X[i] * WSF) / size;
 800f852:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 800f856:	ed94 7a00 	vldr	s14, [r4]
 800f85a:	ee07 7a90 	vmov	s15, r7
 800f85e:	ee20 7a07 	vmul.f32	s14, s0, s14
 800f862:	eef8 7ae7 	vcvt.f32.s32	s15, s15
      pAccMagResults->Array.Y[i] = (pAccMagResults->Array.Y[i] * WSF) / size;
 800f866:	eb01 0183 	add.w	r1, r1, r3, lsl #2
      pAccMagResults->Array.X[i] = (pAccMagResults->Array.X[i] * WSF) / size;
 800f86a:	eec7 6a27 	vdiv.f32	s13, s14, s15
      pAccMagResults->Array.Z[i] = (pAccMagResults->Array.Z[i] * WSF) / size;
 800f86e:	eb02 0283 	add.w	r2, r2, r3, lsl #2
      pAccMagResults->Array.X[i] = (pAccMagResults->Array.X[i] * WSF) / size;
 800f872:	edc4 6a00 	vstr	s13, [r4]
      pAccMagResults->Array.Y[i] = (pAccMagResults->Array.Y[i] * WSF) / size;
 800f876:	ed91 7a00 	vldr	s14, [r1]
 800f87a:	ee20 7a07 	vmul.f32	s14, s0, s14
 800f87e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800f882:	edc1 6a00 	vstr	s13, [r1]
      pAccMagResults->Array.Z[i] = (pAccMagResults->Array.Z[i] * WSF) / size;
 800f886:	ed92 7a00 	vldr	s14, [r2]
 800f88a:	ee20 7a07 	vmul.f32	s14, s0, s14
 800f88e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800f892:	edc2 6a00 	vstr	s13, [r2]
 800f896:	e7da      	b.n	800f84e <MotionSP_fftAdapting+0x1e>

0800f898 <MotionSP_fftPeakFinding>:
  * @brief  Find the biggest peak in the spectrum
  * @param  pAccMagResults The structure for FFT Results
  * @return none
  */
void MotionSP_fftPeakFinding(sAccMagResults_t *pAccMagResults)
{
 800f898:	b513      	push	{r0, r1, r4, lr}
 800f89a:	4604      	mov	r4, r0
  uint16_t size = pAccMagResults->MagSizeTBU;
   
  arm_max_f32(pAccMagResults->Array.X, size, &pAccMagResults->Max.X.value, &pAccMagResults->Max.X.loc);
 800f89c:	8841      	ldrh	r1, [r0, #2]
 800f89e:	9101      	str	r1, [sp, #4]
 800f8a0:	f100 0318 	add.w	r3, r0, #24
 800f8a4:	f100 0214 	add.w	r2, r0, #20
 800f8a8:	6880      	ldr	r0, [r0, #8]
 800f8aa:	f008 fa77 	bl	8017d9c <arm_max_f32>
  arm_max_f32(pAccMagResults->Array.Y, size, &pAccMagResults->Max.Y.value, &pAccMagResults->Max.Y.loc);
 800f8ae:	9901      	ldr	r1, [sp, #4]
 800f8b0:	68e0      	ldr	r0, [r4, #12]
 800f8b2:	f104 0320 	add.w	r3, r4, #32
 800f8b6:	f104 021c 	add.w	r2, r4, #28
 800f8ba:	f008 fa6f 	bl	8017d9c <arm_max_f32>
  arm_max_f32(pAccMagResults->Array.Z, size, &pAccMagResults->Max.Z.value, &pAccMagResults->Max.Z.loc);
 800f8be:	9901      	ldr	r1, [sp, #4]
 800f8c0:	6920      	ldr	r0, [r4, #16]
 800f8c2:	f104 0328 	add.w	r3, r4, #40	; 0x28
 800f8c6:	f104 0224 	add.w	r2, r4, #36	; 0x24
}
 800f8ca:	b002      	add	sp, #8
 800f8cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  arm_max_f32(pAccMagResults->Array.Z, size, &pAccMagResults->Max.Z.value, &pAccMagResults->Max.Z.loc);
 800f8d0:	f008 ba64 	b.w	8017d9c <arm_max_f32>

0800f8d4 <MotionSP_SetWindFiltArray>:
  * @param  size filtering parameters array size
  * @param  Ftype filtering method
  * @return none
  */
void MotionSP_SetWindFiltArray(float *Filter_Params, uint16_t size, Filt_Type_t Ftype)
{
 800f8d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f8d6:	ed2d 8b06 	vpush	{d8-d10}
      Filter_Params[i] = 1.0f;
    }

    if (Ftype == HANNING)
    {
      Filter_Params[i] = (0.5f * (1 - arm_cos_f32((2 * PI * i) / (size - 1))));
 800f8da:	eddf 9a4e 	vldr	s19, [pc, #312]	; 800fa14 <MotionSP_SetWindFiltArray+0x140>
    }

    if (Ftype == HAMMING)
    {
      Filter_Params[i] = 0.54f - (0.46f * (arm_cos_f32((2 * PI * i) / (size - 1))));
 800f8de:	ed9f aa4e 	vldr	s20, [pc, #312]	; 800fa18 <MotionSP_SetWindFiltArray+0x144>
 800f8e2:	eddf aa4e 	vldr	s21, [pc, #312]	; 800fa1c <MotionSP_SetWindFiltArray+0x148>
{
 800f8e6:	460f      	mov	r7, r1
 800f8e8:	4614      	mov	r4, r2
 800f8ea:	4605      	mov	r5, r0
  for (int i = 0; i < size; i++)
 800f8ec:	2600      	movs	r6, #0
 800f8ee:	42b7      	cmp	r7, r6
 800f8f0:	dc06      	bgt.n	800f900 <MotionSP_SetWindFiltArray+0x2c>
                         0.277263158f * (arm_cos_f32((4 * PI * i) / (size - 1))) - \
                         0.083578947f * (arm_cos_f32((6 * PI * i) / (size - 1))) + \
                         0.006947368f * (arm_cos_f32((8 * PI * i) / (size - 1)));
  }

  switch (Ftype)
 800f8f2:	2c03      	cmp	r4, #3
 800f8f4:	f200 8081 	bhi.w	800f9fa <MotionSP_SetWindFiltArray+0x126>
 800f8f8:	e8df f004 	tbb	[pc, r4]
 800f8fc:	8986827b 	.word	0x8986827b
    if (Ftype == RECTANGULAR)
 800f900:	b92c      	cbnz	r4, 800f90e <MotionSP_SetWindFiltArray+0x3a>
      Filter_Params[i] = 1.0f;
 800f902:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800f906:	602b      	str	r3, [r5, #0]
  for (int i = 0; i < size; i++)
 800f908:	3601      	adds	r6, #1
 800f90a:	3504      	adds	r5, #4
 800f90c:	e7ef      	b.n	800f8ee <MotionSP_SetWindFiltArray+0x1a>
    if (Ftype == HANNING)
 800f90e:	2c01      	cmp	r4, #1
 800f910:	d03f      	beq.n	800f992 <MotionSP_SetWindFiltArray+0xbe>
    if (Ftype == HAMMING)
 800f912:	2c02      	cmp	r4, #2
 800f914:	d057      	beq.n	800f9c6 <MotionSP_SetWindFiltArray+0xf2>
    if (Ftype == FLAT_TOP)
 800f916:	2c03      	cmp	r4, #3
 800f918:	d1f6      	bne.n	800f908 <MotionSP_SetWindFiltArray+0x34>
                         (0.41663158f * arm_cos_f32((2 * PI * i) / (size - 1))) + \
 800f91a:	ee07 6a90 	vmov	s15, r6
 800f91e:	1e7b      	subs	r3, r7, #1
 800f920:	eeb8 9ae7 	vcvt.f32.s32	s18, s15
 800f924:	ee08 3a90 	vmov	s17, r3
 800f928:	ee29 0a29 	vmul.f32	s0, s18, s19
 800f92c:	eef8 8ae8 	vcvt.f32.s32	s17, s17
      Filter_Params[i] = 0.21557895f - \
 800f930:	ed9f 8a3b 	vldr	s16, [pc, #236]	; 800fa20 <MotionSP_SetWindFiltArray+0x14c>
                         (0.41663158f * arm_cos_f32((2 * PI * i) / (size - 1))) + \
 800f934:	ee80 0a28 	vdiv.f32	s0, s0, s17
 800f938:	f009 fa9c 	bl	8018e74 <arm_cos_f32>
      Filter_Params[i] = 0.21557895f - \
 800f93c:	eddf 7a39 	vldr	s15, [pc, #228]	; 800fa24 <MotionSP_SetWindFiltArray+0x150>
 800f940:	eea0 8a67 	vfms.f32	s16, s0, s15
                         0.277263158f * (arm_cos_f32((4 * PI * i) / (size - 1))) - \
 800f944:	ed9f 0a38 	vldr	s0, [pc, #224]	; 800fa28 <MotionSP_SetWindFiltArray+0x154>
 800f948:	ee29 0a00 	vmul.f32	s0, s18, s0
 800f94c:	ee80 0a28 	vdiv.f32	s0, s0, s17
 800f950:	f009 fa90 	bl	8018e74 <arm_cos_f32>
                         (0.41663158f * arm_cos_f32((2 * PI * i) / (size - 1))) + \
 800f954:	eddf 7a35 	vldr	s15, [pc, #212]	; 800fa2c <MotionSP_SetWindFiltArray+0x158>
 800f958:	eea0 8a27 	vfma.f32	s16, s0, s15
                         0.083578947f * (arm_cos_f32((6 * PI * i) / (size - 1))) + \
 800f95c:	ed9f 0a34 	vldr	s0, [pc, #208]	; 800fa30 <MotionSP_SetWindFiltArray+0x15c>
 800f960:	ee29 0a00 	vmul.f32	s0, s18, s0
 800f964:	ee80 0a28 	vdiv.f32	s0, s0, s17
 800f968:	f009 fa84 	bl	8018e74 <arm_cos_f32>
                         0.277263158f * (arm_cos_f32((4 * PI * i) / (size - 1))) - \
 800f96c:	eddf 7a31 	vldr	s15, [pc, #196]	; 800fa34 <MotionSP_SetWindFiltArray+0x160>
 800f970:	eea0 8a67 	vfms.f32	s16, s0, s15
                         0.006947368f * (arm_cos_f32((8 * PI * i) / (size - 1)));
 800f974:	ed9f 0a30 	vldr	s0, [pc, #192]	; 800fa38 <MotionSP_SetWindFiltArray+0x164>
 800f978:	ee29 0a00 	vmul.f32	s0, s18, s0
 800f97c:	ee80 0a28 	vdiv.f32	s0, s0, s17
 800f980:	f009 fa78 	bl	8018e74 <arm_cos_f32>
                         0.083578947f * (arm_cos_f32((6 * PI * i) / (size - 1))) + \
 800f984:	eddf 7a2d 	vldr	s15, [pc, #180]	; 800fa3c <MotionSP_SetWindFiltArray+0x168>
 800f988:	eea0 8a27 	vfma.f32	s16, s0, s15
      Filter_Params[i] = 0.21557895f - \
 800f98c:	ed85 8a00 	vstr	s16, [r5]
 800f990:	e7ba      	b.n	800f908 <MotionSP_SetWindFiltArray+0x34>
      Filter_Params[i] = (0.5f * (1 - arm_cos_f32((2 * PI * i) / (size - 1))));
 800f992:	ee07 6a90 	vmov	s15, r6
 800f996:	1e7b      	subs	r3, r7, #1
 800f998:	ee00 3a10 	vmov	s0, r3
 800f99c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f9a0:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 800f9a4:	ee67 7aa9 	vmul.f32	s15, s15, s19
 800f9a8:	ee87 0a80 	vdiv.f32	s0, s15, s0
 800f9ac:	f009 fa62 	bl	8018e74 <arm_cos_f32>
 800f9b0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800f9b4:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800f9b8:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800f9bc:	ee20 0a27 	vmul.f32	s0, s0, s15
 800f9c0:	ed85 0a00 	vstr	s0, [r5]
    if (Ftype == FLAT_TOP)
 800f9c4:	e7a0      	b.n	800f908 <MotionSP_SetWindFiltArray+0x34>
      Filter_Params[i] = 0.54f - (0.46f * (arm_cos_f32((2 * PI * i) / (size - 1))));
 800f9c6:	ee07 6a90 	vmov	s15, r6
 800f9ca:	1e7b      	subs	r3, r7, #1
 800f9cc:	ee00 3a10 	vmov	s0, r3
 800f9d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f9d4:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 800f9d8:	ee67 7aa9 	vmul.f32	s15, s15, s19
 800f9dc:	ee87 0a80 	vdiv.f32	s0, s15, s0
 800f9e0:	f009 fa48 	bl	8018e74 <arm_cos_f32>
 800f9e4:	eef0 7a6a 	vmov.f32	s15, s21
 800f9e8:	eee0 7a4a 	vfms.f32	s15, s0, s20
 800f9ec:	edc5 7a00 	vstr	s15, [r5]
    if (Ftype == FLAT_TOP)
 800f9f0:	e78a      	b.n	800f908 <MotionSP_SetWindFiltArray+0x34>
  {
    case RECTANGULAR:
      Window_Scale_Factor = 1.0f;
 800f9f2:	4b13      	ldr	r3, [pc, #76]	; (800fa40 <MotionSP_SetWindFiltArray+0x16c>)
 800f9f4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    case HAMMING:
      Window_Scale_Factor = 1.85f;
      break;

    case FLAT_TOP:
      Window_Scale_Factor = 4.55f;
 800f9f8:	601a      	str	r2, [r3, #0]
      break;
  }
}
 800f9fa:	ecbd 8b06 	vpop	{d8-d10}
 800f9fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      Window_Scale_Factor = 2.0f;
 800fa00:	4b0f      	ldr	r3, [pc, #60]	; (800fa40 <MotionSP_SetWindFiltArray+0x16c>)
 800fa02:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800fa06:	e7f7      	b.n	800f9f8 <MotionSP_SetWindFiltArray+0x124>
      Window_Scale_Factor = 1.85f;
 800fa08:	4b0d      	ldr	r3, [pc, #52]	; (800fa40 <MotionSP_SetWindFiltArray+0x16c>)
 800fa0a:	4a0e      	ldr	r2, [pc, #56]	; (800fa44 <MotionSP_SetWindFiltArray+0x170>)
 800fa0c:	e7f4      	b.n	800f9f8 <MotionSP_SetWindFiltArray+0x124>
      Window_Scale_Factor = 4.55f;
 800fa0e:	4b0c      	ldr	r3, [pc, #48]	; (800fa40 <MotionSP_SetWindFiltArray+0x16c>)
 800fa10:	4a0d      	ldr	r2, [pc, #52]	; (800fa48 <MotionSP_SetWindFiltArray+0x174>)
 800fa12:	e7f1      	b.n	800f9f8 <MotionSP_SetWindFiltArray+0x124>
 800fa14:	40c90fdb 	.word	0x40c90fdb
 800fa18:	3eeb851f 	.word	0x3eeb851f
 800fa1c:	3f0a3d71 	.word	0x3f0a3d71
 800fa20:	3e5cc0ba 	.word	0x3e5cc0ba
 800fa24:	3ed550bc 	.word	0x3ed550bc
 800fa28:	41490fdb 	.word	0x41490fdb
 800fa2c:	3e8df570 	.word	0x3e8df570
 800fa30:	4196cbe4 	.word	0x4196cbe4
 800fa34:	3dab2b70 	.word	0x3dab2b70
 800fa38:	41c90fdb 	.word	0x41c90fdb
 800fa3c:	3be3a6bf 	.word	0x3be3a6bf
 800fa40:	2000ae88 	.word	0x2000ae88
 800fa44:	3feccccd 	.word	0x3feccccd
 800fa48:	4091999a 	.word	0x4091999a

0800fa4c <MotionSP_fftInBuild>:
  * @param  SrcLastPos last index of data to be taken
  * @retval 0 in case of success
  * @retval 1 in case of failure
  */
uint8_t MotionSP_fftInBuild(float *pDst, uint16_t DstSize, float *pSrc, uint16_t SrcSize, uint16_t SrcLastPos)
{
 800fa4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fa50:	f8bd 4018 	ldrh.w	r4, [sp, #24]
  int16_t initPos;
  uint16_t pos2end;

  if (SrcLastPos < SrcSize)
 800fa54:	429c      	cmp	r4, r3
{
 800fa56:	4606      	mov	r6, r0
 800fa58:	460d      	mov	r5, r1
 800fa5a:	4617      	mov	r7, r2
  if (SrcLastPos < SrcSize)
 800fa5c:	d220      	bcs.n	800faa0 <MotionSP_fftInBuild+0x54>
  {
    // Replace the last index of data to be taken with the first one
    initPos = SrcLastPos - (DstSize - 1);
 800fa5e:	f1c1 0201 	rsb	r2, r1, #1
 800fa62:	4414      	add	r4, r2
 800fa64:	b2a2      	uxth	r2, r4
 800fa66:	b224      	sxth	r4, r4
    if (initPos < 0)
 800fa68:	2c00      	cmp	r4, #0
    {
      initPos += SrcSize;
 800fa6a:	bfbc      	itt	lt
 800fa6c:	189c      	addlt	r4, r3, r2
 800fa6e:	b224      	sxthlt	r4, r4
    }

    if (initPos <= (SrcSize - DstSize))
 800fa70:	1b5a      	subs	r2, r3, r5
 800fa72:	4294      	cmp	r4, r2
 800fa74:	eb07 0184 	add.w	r1, r7, r4, lsl #2
 800fa78:	dc05      	bgt.n	800fa86 <MotionSP_fftInBuild+0x3a>
    {
      memcpy((void *)pDst, (void *)(pSrc + initPos), DstSize * sizeof(float));
 800fa7a:	00aa      	lsls	r2, r5, #2
    }
    else
    {
      pos2end = SrcSize - initPos;
      memcpy((void *)pDst, (void *)(pSrc + initPos), pos2end * sizeof(float));
      memcpy((void *)(pDst + pos2end), (void *)pSrc, (DstSize - pos2end)*sizeof(float));
 800fa7c:	f009 ffd0 	bl	8019a20 <memcpy>
 800fa80:	2000      	movs	r0, #0
  {
    return 1;
  }

  return 0;
}
 800fa82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      pos2end = SrcSize - initPos;
 800fa86:	1b1b      	subs	r3, r3, r4
 800fa88:	b29c      	uxth	r4, r3
      memcpy((void *)pDst, (void *)(pSrc + initPos), pos2end * sizeof(float));
 800fa8a:	ea4f 0884 	mov.w	r8, r4, lsl #2
 800fa8e:	4642      	mov	r2, r8
 800fa90:	f009 ffc6 	bl	8019a20 <memcpy>
      memcpy((void *)(pDst + pos2end), (void *)pSrc, (DstSize - pos2end)*sizeof(float));
 800fa94:	1b2a      	subs	r2, r5, r4
 800fa96:	0092      	lsls	r2, r2, #2
 800fa98:	4639      	mov	r1, r7
 800fa9a:	eb06 0008 	add.w	r0, r6, r8
 800fa9e:	e7ed      	b.n	800fa7c <MotionSP_fftInBuild+0x30>
    return 1;
 800faa0:	2001      	movs	r0, #1
 800faa2:	e7ee      	b.n	800fa82 <MotionSP_fftInBuild+0x36>

0800faa4 <MotionSP_fftAverageCalcTime>:
  *  @param  FinishAvg Description for FinishAvg
  *  @retval 1 in case of success
  *  @retval 0 in case of failure
  */
uint8_t MotionSP_fftAverageCalcTime(float *pDstArr, float *pSrcArr, uint16_t LenArr, uint16_t *pSumCnt, uint8_t FinishAvg)
{
 800faa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800faa8:	4688      	mov	r8, r1
  if ((*pSumCnt == 0))
 800faaa:	8819      	ldrh	r1, [r3, #0]
{
 800faac:	f89d 7018 	ldrb.w	r7, [sp, #24]
 800fab0:	4604      	mov	r4, r0
 800fab2:	461e      	mov	r6, r3
 800fab4:	0095      	lsls	r5, r2, #2
  if ((*pSumCnt == 0))
 800fab6:	b911      	cbnz	r1, 800fabe <MotionSP_fftAverageCalcTime+0x1a>
  {
    // reset the destination array
    memset((void *)pDstArr, 0, LenArr * sizeof(float));
 800fab8:	462a      	mov	r2, r5
 800faba:	f009 ffd9 	bl	8019a70 <memset>
 800fabe:	4620      	mov	r0, r4
 800fac0:	4641      	mov	r1, r8
 800fac2:	4425      	add	r5, r4
{
 800fac4:	4623      	mov	r3, r4
  }

  // add new source values to destination
  for (uint16_t j = 0; j < LenArr; j++)
 800fac6:	42ab      	cmp	r3, r5
 800fac8:	d10a      	bne.n	800fae0 <MotionSP_fftAverageCalcTime+0x3c>
  {
    *(pDstArr + j) += *(pSrcArr + j);
  }

  // increase the number of times
  *pSumCnt += 1;
 800faca:	8832      	ldrh	r2, [r6, #0]
 800facc:	3201      	adds	r2, #1
 800face:	b292      	uxth	r2, r2
 800fad0:	8032      	strh	r2, [r6, #0]

  if (FinishAvg)
 800fad2:	b117      	cbz	r7, 800fada <MotionSP_fftAverageCalcTime+0x36>
  {
    // Process the average
    for (uint16_t j = 0; j < LenArr; j++)
 800fad4:	4298      	cmp	r0, r3
 800fad6:	d10c      	bne.n	800faf2 <MotionSP_fftAverageCalcTime+0x4e>
    {
      *(pDstArr + j) = *(pDstArr + j) / (*pSumCnt);
    }

    return 1;
 800fad8:	2701      	movs	r7, #1
  }
  
  return 0;
}
 800fada:	4638      	mov	r0, r7
 800fadc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    *(pDstArr + j) += *(pSrcArr + j);
 800fae0:	edd3 7a00 	vldr	s15, [r3]
 800fae4:	ecb1 7a01 	vldmia	r1!, {s14}
 800fae8:	ee77 7a87 	vadd.f32	s15, s15, s14
 800faec:	ece3 7a01 	vstmia	r3!, {s15}
  for (uint16_t j = 0; j < LenArr; j++)
 800faf0:	e7e9      	b.n	800fac6 <MotionSP_fftAverageCalcTime+0x22>
      *(pDstArr + j) = *(pDstArr + j) / (*pSumCnt);
 800faf2:	ee07 2a90 	vmov	s15, r2
 800faf6:	edd0 6a00 	vldr	s13, [r0]
 800fafa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800fafe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800fb02:	ece0 7a01 	vstmia	r0!, {s15}
    for (uint16_t j = 0; j < LenArr; j++)
 800fb06:	e7e5      	b.n	800fad4 <MotionSP_fftAverageCalcTime+0x30>

0800fb08 <MotionSP_fftExecution>:
  * @brief  Frequency Domain Analysis
  * @param  avg Performing average
  * @return None
  */
void MotionSP_fftExecution(uint8_t avg)
{
 800fb08:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  static sAccAxesArray_t AccAxesArray_fftIn;  //!< Array for acc axes input values for FFT
  static float fftIn[FFT_SIZE_MAX];           //!< Array for input values for FFT
  static float fftOut[FFT_SIZE_MAX];          //!< Array for output values for the complex magnitude function

  /* ------------------ Freeze the Accelerometer data to analyze--------------*/
  MotionSP_fftInBuild(AccAxesArray_fftIn.AXIS_X, MotionSP_Parameters.FftSize, MotionSP_Data.AccCircBuff.Array.X, MotionSP_Data.AccCircBuff.Size, accCircBuffIndexForFft);
 800fb0a:	4d47      	ldr	r5, [pc, #284]	; (800fc28 <MotionSP_fftExecution+0x120>)
 800fb0c:	4c47      	ldr	r4, [pc, #284]	; (800fc2c <MotionSP_fftExecution+0x124>)
 800fb0e:	4e48      	ldr	r6, [pc, #288]	; (800fc30 <MotionSP_fftExecution+0x128>)
 800fb10:	882b      	ldrh	r3, [r5, #0]
 800fb12:	9300      	str	r3, [sp, #0]
 800fb14:	8923      	ldrh	r3, [r4, #8]
 800fb16:	6922      	ldr	r2, [r4, #16]
 800fb18:	8831      	ldrh	r1, [r6, #0]
{
 800fb1a:	4607      	mov	r7, r0
  MotionSP_fftInBuild(AccAxesArray_fftIn.AXIS_X, MotionSP_Parameters.FftSize, MotionSP_Data.AccCircBuff.Array.X, MotionSP_Data.AccCircBuff.Size, accCircBuffIndexForFft);
 800fb1c:	4845      	ldr	r0, [pc, #276]	; (800fc34 <MotionSP_fftExecution+0x12c>)
 800fb1e:	f7ff ff95 	bl	800fa4c <MotionSP_fftInBuild>
  MotionSP_fftInBuild(AccAxesArray_fftIn.AXIS_Y, MotionSP_Parameters.FftSize, MotionSP_Data.AccCircBuff.Array.Y, MotionSP_Data.AccCircBuff.Size, accCircBuffIndexForFft);
 800fb22:	882b      	ldrh	r3, [r5, #0]
 800fb24:	9300      	str	r3, [sp, #0]
 800fb26:	8923      	ldrh	r3, [r4, #8]
 800fb28:	6962      	ldr	r2, [r4, #20]
 800fb2a:	8831      	ldrh	r1, [r6, #0]
 800fb2c:	4842      	ldr	r0, [pc, #264]	; (800fc38 <MotionSP_fftExecution+0x130>)
 800fb2e:	f7ff ff8d 	bl	800fa4c <MotionSP_fftInBuild>
  MotionSP_fftInBuild(AccAxesArray_fftIn.AXIS_Z, MotionSP_Parameters.FftSize, MotionSP_Data.AccCircBuff.Array.Z, MotionSP_Data.AccCircBuff.Size, accCircBuffIndexForFft);
 800fb32:	882b      	ldrh	r3, [r5, #0]
 800fb34:	9300      	str	r3, [sp, #0]
 800fb36:	8923      	ldrh	r3, [r4, #8]
 800fb38:	69a2      	ldr	r2, [r4, #24]
 800fb3a:	8831      	ldrh	r1, [r6, #0]
 800fb3c:	483f      	ldr	r0, [pc, #252]	; (800fc3c <MotionSP_fftExecution+0x134>)
  
  /* ------------------ First Axis: Analysis on X-Acceleration--------------*/
  /* Apply the Windowing before to perform FFT */
  motionSP_fftUseWindow(fftIn, AccAxesArray_fftIn.AXIS_X, MotionSP_Parameters.FftSize, Filter_Params);
  MotionSP_fftCalc(&fftS, fftIn, fftOut);
  if (MotionSP_fftAverageCalcTime(AccMagResults.Array.X, fftOut, AccMagResults.MagSizeTBU, &(FftCnt.X), avg))
 800fb3e:	4d40      	ldr	r5, [pc, #256]	; (800fc40 <MotionSP_fftExecution+0x138>)
 800fb40:	4c40      	ldr	r4, [pc, #256]	; (800fc44 <MotionSP_fftExecution+0x13c>)
  MotionSP_fftInBuild(AccAxesArray_fftIn.AXIS_Z, MotionSP_Parameters.FftSize, MotionSP_Data.AccCircBuff.Array.Z, MotionSP_Data.AccCircBuff.Size, accCircBuffIndexForFft);
 800fb42:	f7ff ff83 	bl	800fa4c <MotionSP_fftInBuild>
  arm_mult_f32(pSrcArr, Window_Params, pDstArr, SizeArr);
 800fb46:	8833      	ldrh	r3, [r6, #0]
 800fb48:	4a3f      	ldr	r2, [pc, #252]	; (800fc48 <MotionSP_fftExecution+0x140>)
 800fb4a:	4940      	ldr	r1, [pc, #256]	; (800fc4c <MotionSP_fftExecution+0x144>)
 800fb4c:	4839      	ldr	r0, [pc, #228]	; (800fc34 <MotionSP_fftExecution+0x12c>)
 800fb4e:	f009 f9d1 	bl	8018ef4 <arm_mult_f32>
  MotionSP_fftCalc(&fftS, fftIn, fftOut);
 800fb52:	4a3f      	ldr	r2, [pc, #252]	; (800fc50 <MotionSP_fftExecution+0x148>)
 800fb54:	493c      	ldr	r1, [pc, #240]	; (800fc48 <MotionSP_fftExecution+0x140>)
 800fb56:	483f      	ldr	r0, [pc, #252]	; (800fc54 <MotionSP_fftExecution+0x14c>)
 800fb58:	f7ff fe58 	bl	800f80c <MotionSP_fftCalc>
  if (MotionSP_fftAverageCalcTime(AccMagResults.Array.X, fftOut, AccMagResults.MagSizeTBU, &(FftCnt.X), avg))
 800fb5c:	9700      	str	r7, [sp, #0]
 800fb5e:	886a      	ldrh	r2, [r5, #2]
 800fb60:	493b      	ldr	r1, [pc, #236]	; (800fc50 <MotionSP_fftExecution+0x148>)
 800fb62:	68a8      	ldr	r0, [r5, #8]
 800fb64:	f104 0338 	add.w	r3, r4, #56	; 0x38
 800fb68:	f7ff ff9c 	bl	800faa4 <MotionSP_fftAverageCalcTime>
 800fb6c:	b138      	cbz	r0, 800fb7e <MotionSP_fftExecution+0x76>
  {
    // Save the max evaluated FFT Number
    AccMagResults.FFT_Items.X = FftCnt.X;
 800fb6e:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 800fb70:	85ab      	strh	r3, [r5, #44]	; 0x2c
    // Set flag about available average
    IsFftAvgRdy.X = 1;
 800fb72:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 800fb76:	f043 0301 	orr.w	r3, r3, #1
 800fb7a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  arm_mult_f32(pSrcArr, Window_Params, pDstArr, SizeArr);
 800fb7e:	8833      	ldrh	r3, [r6, #0]
 800fb80:	4a31      	ldr	r2, [pc, #196]	; (800fc48 <MotionSP_fftExecution+0x140>)
 800fb82:	4932      	ldr	r1, [pc, #200]	; (800fc4c <MotionSP_fftExecution+0x144>)
 800fb84:	482c      	ldr	r0, [pc, #176]	; (800fc38 <MotionSP_fftExecution+0x130>)
 800fb86:	f009 f9b5 	bl	8018ef4 <arm_mult_f32>
  }

  /* ------------------ Second Axis: Analysis on Y-Acceleration ----------*/
  /* Apply the Windowing before to perform FFT */
  motionSP_fftUseWindow(fftIn, AccAxesArray_fftIn.AXIS_Y, MotionSP_Parameters.FftSize, Filter_Params);
  MotionSP_fftCalc(&fftS, fftIn, fftOut);
 800fb8a:	4a31      	ldr	r2, [pc, #196]	; (800fc50 <MotionSP_fftExecution+0x148>)
 800fb8c:	492e      	ldr	r1, [pc, #184]	; (800fc48 <MotionSP_fftExecution+0x140>)
 800fb8e:	4831      	ldr	r0, [pc, #196]	; (800fc54 <MotionSP_fftExecution+0x14c>)
 800fb90:	f7ff fe3c 	bl	800f80c <MotionSP_fftCalc>
  if (MotionSP_fftAverageCalcTime(AccMagResults.Array.Y, fftOut, AccMagResults.MagSizeTBU, &(FftCnt.Y), avg))
 800fb94:	9700      	str	r7, [sp, #0]
 800fb96:	4b30      	ldr	r3, [pc, #192]	; (800fc58 <MotionSP_fftExecution+0x150>)
 800fb98:	886a      	ldrh	r2, [r5, #2]
 800fb9a:	492d      	ldr	r1, [pc, #180]	; (800fc50 <MotionSP_fftExecution+0x148>)
 800fb9c:	68e8      	ldr	r0, [r5, #12]
 800fb9e:	f7ff ff81 	bl	800faa4 <MotionSP_fftAverageCalcTime>
 800fba2:	b138      	cbz	r0, 800fbb4 <MotionSP_fftExecution+0xac>
  {
    // Save the max evaluated FFT Number
    AccMagResults.FFT_Items.Y = FftCnt.Y;
 800fba4:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
 800fba6:	85eb      	strh	r3, [r5, #46]	; 0x2e
    // Set flag about available average
    IsFftAvgRdy.Y = 1;
 800fba8:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 800fbac:	f043 0302 	orr.w	r3, r3, #2
 800fbb0:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  arm_mult_f32(pSrcArr, Window_Params, pDstArr, SizeArr);
 800fbb4:	8833      	ldrh	r3, [r6, #0]
 800fbb6:	4a24      	ldr	r2, [pc, #144]	; (800fc48 <MotionSP_fftExecution+0x140>)
 800fbb8:	4924      	ldr	r1, [pc, #144]	; (800fc4c <MotionSP_fftExecution+0x144>)
 800fbba:	4820      	ldr	r0, [pc, #128]	; (800fc3c <MotionSP_fftExecution+0x134>)
 800fbbc:	f009 f99a 	bl	8018ef4 <arm_mult_f32>
  }

  /* ------------------ Third Axis: Analysis on Z-Acceleration-------------*/
  /* Apply the Windowing before to perform FFT */
  motionSP_fftUseWindow(fftIn, AccAxesArray_fftIn.AXIS_Z, MotionSP_Parameters.FftSize, Filter_Params);
  MotionSP_fftCalc(&fftS, fftIn, fftOut);
 800fbc0:	4a23      	ldr	r2, [pc, #140]	; (800fc50 <MotionSP_fftExecution+0x148>)
 800fbc2:	4921      	ldr	r1, [pc, #132]	; (800fc48 <MotionSP_fftExecution+0x140>)
 800fbc4:	4823      	ldr	r0, [pc, #140]	; (800fc54 <MotionSP_fftExecution+0x14c>)
 800fbc6:	f7ff fe21 	bl	800f80c <MotionSP_fftCalc>
  if (MotionSP_fftAverageCalcTime(AccMagResults.Array.Z, fftOut, AccMagResults.MagSizeTBU, &(FftCnt.Z), avg))
 800fbca:	9700      	str	r7, [sp, #0]
 800fbcc:	4b23      	ldr	r3, [pc, #140]	; (800fc5c <MotionSP_fftExecution+0x154>)
 800fbce:	886a      	ldrh	r2, [r5, #2]
 800fbd0:	491f      	ldr	r1, [pc, #124]	; (800fc50 <MotionSP_fftExecution+0x148>)
 800fbd2:	6928      	ldr	r0, [r5, #16]
 800fbd4:	f7ff ff66 	bl	800faa4 <MotionSP_fftAverageCalcTime>
 800fbd8:	b138      	cbz	r0, 800fbea <MotionSP_fftExecution+0xe2>
  {
    // Save the max evaluated FFT Number
    AccMagResults.FFT_Items.Z = FftCnt.Z;
 800fbda:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
 800fbdc:	862b      	strh	r3, [r5, #48]	; 0x30
    // Set flag about available average
    IsFftAvgRdy.Z = 1;
 800fbde:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 800fbe2:	f043 0304 	orr.w	r3, r3, #4
 800fbe6:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  }

  /* ---------------------------- Finish ----------------------------------*/
  if (IsFftAvgRdy.X & IsFftAvgRdy.Y & IsFftAvgRdy.Z) 
 800fbea:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
 800fbee:	f3c2 0300 	ubfx	r3, r2, #0, #1
 800fbf2:	f3c2 0140 	ubfx	r1, r2, #1, #1
 800fbf6:	400b      	ands	r3, r1
 800fbf8:	ea13 0392 	ands.w	r3, r3, r2, lsr #2
 800fbfc:	d012      	beq.n	800fc24 <MotionSP_fftExecution+0x11c>
  {
    MotionSP_fftAdapting(&AccMagResults, Window_Scale_Factor);
 800fbfe:	4b18      	ldr	r3, [pc, #96]	; (800fc60 <MotionSP_fftExecution+0x158>)
 800fc00:	480f      	ldr	r0, [pc, #60]	; (800fc40 <MotionSP_fftExecution+0x138>)
 800fc02:	ed93 0a00 	vldr	s0, [r3]
 800fc06:	f7ff fe13 	bl	800f830 <MotionSP_fftAdapting>
    MotionSP_fftPeakFinding(&AccMagResults);
 800fc0a:	480d      	ldr	r0, [pc, #52]	; (800fc40 <MotionSP_fftExecution+0x138>)
 800fc0c:	f7ff fe44 	bl	800f898 <MotionSP_fftPeakFinding>
    MotionSP_evalMaxAmplitudeRange (AccMagResults.Array.Y, MotionSP_Parameters.subrange_num, SRAmplitude.AXIS_Y, SRBinVal.AXIS_Y);
    MotionSP_evalMaxAmplitudeRange (AccMagResults.Array.Z, MotionSP_Parameters.subrange_num, SRAmplitude.AXIS_Z, SRBinVal.AXIS_Z);
#endif
    
    // Reset FFT sum counter
    FftCnt.X = 0;
 800fc10:	2300      	movs	r3, #0
 800fc12:	8723      	strh	r3, [r4, #56]	; 0x38
    FftCnt.Y = 0;
 800fc14:	8763      	strh	r3, [r4, #58]	; 0x3a
    FftCnt.Z = 0;
 800fc16:	87a3      	strh	r3, [r4, #60]	; 0x3c

    // Reset FFT average status
    IsFftAvgRdy.X = 0;
 800fc18:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 800fc1c:	f023 0307 	bic.w	r3, r3, #7
 800fc20:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    IsFftAvgRdy.Y = 0;
    IsFftAvgRdy.Z = 0;
  }
}
 800fc24:	b003      	add	sp, #12
 800fc26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fc28:	20009b40 	.word	0x20009b40
 800fc2c:	2000ab44 	.word	0x2000ab44
 800fc30:	2000ae78 	.word	0x2000ae78
 800fc34:	20005688 	.word	0x20005688
 800fc38:	20006688 	.word	0x20006688
 800fc3c:	20007688 	.word	0x20007688
 800fc40:	2000ae8c 	.word	0x2000ae8c
 800fc44:	20003648 	.word	0x20003648
 800fc48:	20004688 	.word	0x20004688
 800fc4c:	20009b44 	.word	0x20009b44
 800fc50:	20003688 	.word	0x20003688
 800fc54:	2000ae60 	.word	0x2000ae60
 800fc58:	20003682 	.word	0x20003682
 800fc5c:	20003684 	.word	0x20003684
 800fc60:	2000ae88 	.word	0x2000ae88

0800fc64 <json_value_init_string_no_copy>:
    parson_free(array->items);
    parson_free(array);
}

/* JSON Value */
static JSON_Value * json_value_init_string_no_copy(char *string, size_t length) {
 800fc64:	b538      	push	{r3, r4, r5, lr}
    JSON_Value *new_value = (JSON_Value*)parson_malloc(sizeof(JSON_Value));
 800fc66:	4b07      	ldr	r3, [pc, #28]	; (800fc84 <json_value_init_string_no_copy+0x20>)
static JSON_Value * json_value_init_string_no_copy(char *string, size_t length) {
 800fc68:	4605      	mov	r5, r0
    JSON_Value *new_value = (JSON_Value*)parson_malloc(sizeof(JSON_Value));
 800fc6a:	681b      	ldr	r3, [r3, #0]
 800fc6c:	2010      	movs	r0, #16
static JSON_Value * json_value_init_string_no_copy(char *string, size_t length) {
 800fc6e:	460c      	mov	r4, r1
    JSON_Value *new_value = (JSON_Value*)parson_malloc(sizeof(JSON_Value));
 800fc70:	4798      	blx	r3
    if (!new_value) {
 800fc72:	b128      	cbz	r0, 800fc80 <json_value_init_string_no_copy+0x1c>
        return NULL;
    }
    new_value->parent = NULL;
    new_value->type = JSONString;
 800fc74:	2200      	movs	r2, #0
 800fc76:	2302      	movs	r3, #2
 800fc78:	e9c0 2300 	strd	r2, r3, [r0]
    new_value->value.string.chars = string;
    new_value->value.string.length = length;
 800fc7c:	e9c0 5402 	strd	r5, r4, [r0, #8]
    return new_value;
}
 800fc80:	bd38      	pop	{r3, r4, r5, pc}
 800fc82:	bf00      	nop
 800fc84:	200003e8 	.word	0x200003e8

0800fc88 <json_value_get_string_desc>:
    return array->wrapping_value;
}

/* JSON Value API */
JSON_Value_Type json_value_get_type(const JSON_Value *value) {
    return value ? value->type : JSONError;
 800fc88:	b128      	cbz	r0, 800fc96 <json_value_get_string_desc+0xe>
JSON_Array * json_value_get_array(const JSON_Value *value) {
    return json_value_get_type(value) == JSONArray ? value->value.array : NULL;
}

static const JSON_String * json_value_get_string_desc(const JSON_Value *value) {
    return json_value_get_type(value) == JSONString ? &value->value.string : NULL;
 800fc8a:	6843      	ldr	r3, [r0, #4]
 800fc8c:	2b02      	cmp	r3, #2
 800fc8e:	d101      	bne.n	800fc94 <json_value_get_string_desc+0xc>
 800fc90:	3008      	adds	r0, #8
 800fc92:	4770      	bx	lr
 800fc94:	2000      	movs	r0, #0
}
 800fc96:	4770      	bx	lr

0800fc98 <parson_strndup>:
    char *output_string = (char*)parson_malloc(n + 1);
 800fc98:	4b08      	ldr	r3, [pc, #32]	; (800fcbc <parson_strndup+0x24>)
static char * parson_strndup(const char *string, size_t n) {
 800fc9a:	b570      	push	{r4, r5, r6, lr}
    char *output_string = (char*)parson_malloc(n + 1);
 800fc9c:	681b      	ldr	r3, [r3, #0]
static char * parson_strndup(const char *string, size_t n) {
 800fc9e:	4606      	mov	r6, r0
    char *output_string = (char*)parson_malloc(n + 1);
 800fca0:	1c48      	adds	r0, r1, #1
static char * parson_strndup(const char *string, size_t n) {
 800fca2:	460d      	mov	r5, r1
    char *output_string = (char*)parson_malloc(n + 1);
 800fca4:	4798      	blx	r3
    if (!output_string) {
 800fca6:	4604      	mov	r4, r0
 800fca8:	b128      	cbz	r0, 800fcb6 <parson_strndup+0x1e>
    output_string[n] = '\0';
 800fcaa:	2300      	movs	r3, #0
 800fcac:	5543      	strb	r3, [r0, r5]
    memcpy(output_string, string, n);
 800fcae:	462a      	mov	r2, r5
 800fcb0:	4631      	mov	r1, r6
 800fcb2:	f009 feb5 	bl	8019a20 <memcpy>
}
 800fcb6:	4620      	mov	r0, r4
 800fcb8:	bd70      	pop	{r4, r5, r6, pc}
 800fcba:	bf00      	nop
 800fcbc:	200003e8 	.word	0x200003e8

0800fcc0 <json_object_resize>:
static JSON_Status json_object_resize(JSON_Object *object, size_t new_capacity) {
 800fcc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    if ((object->names == NULL && object->values != NULL) ||
 800fcc4:	e9d0 2301 	ldrd	r2, r3, [r0, #4]
static JSON_Status json_object_resize(JSON_Object *object, size_t new_capacity) {
 800fcc8:	4604      	mov	r4, r0
 800fcca:	460e      	mov	r6, r1
    if ((object->names == NULL && object->values != NULL) ||
 800fccc:	b922      	cbnz	r2, 800fcd8 <json_object_resize+0x18>
 800fcce:	b12b      	cbz	r3, 800fcdc <json_object_resize+0x1c>
        return JSONFailure;
 800fcd0:	f04f 30ff 	mov.w	r0, #4294967295
}
 800fcd4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        (object->names != NULL && object->values == NULL) ||
 800fcd8:	2b00      	cmp	r3, #0
 800fcda:	d0f9      	beq.n	800fcd0 <json_object_resize+0x10>
 800fcdc:	2e00      	cmp	r6, #0
 800fcde:	d0f7      	beq.n	800fcd0 <json_object_resize+0x10>
    temp_names = (char**)parson_malloc(new_capacity * sizeof(char*));
 800fce0:	f8df 8064 	ldr.w	r8, [pc, #100]	; 800fd48 <json_object_resize+0x88>
 800fce4:	00b7      	lsls	r7, r6, #2
 800fce6:	f8d8 3000 	ldr.w	r3, [r8]
 800fcea:	4638      	mov	r0, r7
 800fcec:	4798      	blx	r3
    if (temp_names == NULL) {
 800fcee:	46c1      	mov	r9, r8
 800fcf0:	4605      	mov	r5, r0
 800fcf2:	2800      	cmp	r0, #0
 800fcf4:	d0ec      	beq.n	800fcd0 <json_object_resize+0x10>
    temp_values = (JSON_Value**)parson_malloc(new_capacity * sizeof(JSON_Value*));
 800fcf6:	4638      	mov	r0, r7
 800fcf8:	f8d8 3000 	ldr.w	r3, [r8]
 800fcfc:	4798      	blx	r3
    if (temp_values == NULL) {
 800fcfe:	4607      	mov	r7, r0
 800fd00:	b920      	cbnz	r0, 800fd0c <json_object_resize+0x4c>
        parson_free(temp_names);
 800fd02:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800fd06:	4628      	mov	r0, r5
 800fd08:	4798      	blx	r3
 800fd0a:	e7e1      	b.n	800fcd0 <json_object_resize+0x10>
    if (object->names != NULL && object->values != NULL && object->count > 0) {
 800fd0c:	6861      	ldr	r1, [r4, #4]
 800fd0e:	b169      	cbz	r1, 800fd2c <json_object_resize+0x6c>
 800fd10:	68a3      	ldr	r3, [r4, #8]
 800fd12:	b15b      	cbz	r3, 800fd2c <json_object_resize+0x6c>
 800fd14:	68e2      	ldr	r2, [r4, #12]
 800fd16:	b14a      	cbz	r2, 800fd2c <json_object_resize+0x6c>
        memcpy(temp_names, object->names, object->count * sizeof(char*));
 800fd18:	0092      	lsls	r2, r2, #2
 800fd1a:	4628      	mov	r0, r5
 800fd1c:	f009 fe80 	bl	8019a20 <memcpy>
        memcpy(temp_values, object->values, object->count * sizeof(JSON_Value*));
 800fd20:	68e2      	ldr	r2, [r4, #12]
 800fd22:	68a1      	ldr	r1, [r4, #8]
 800fd24:	0092      	lsls	r2, r2, #2
 800fd26:	4638      	mov	r0, r7
 800fd28:	f009 fe7a 	bl	8019a20 <memcpy>
    parson_free(object->names);
 800fd2c:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800fd30:	6860      	ldr	r0, [r4, #4]
 800fd32:	4798      	blx	r3
    parson_free(object->values);
 800fd34:	68a0      	ldr	r0, [r4, #8]
 800fd36:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800fd3a:	4798      	blx	r3
    object->values = temp_values;
 800fd3c:	e9c4 5701 	strd	r5, r7, [r4, #4]
    object->capacity = new_capacity;
 800fd40:	6126      	str	r6, [r4, #16]
    return JSONSuccess;
 800fd42:	2000      	movs	r0, #0
 800fd44:	e7c6      	b.n	800fcd4 <json_object_resize+0x14>
 800fd46:	bf00      	nop
 800fd48:	200003e8 	.word	0x200003e8

0800fd4c <json_array_resize>:
static JSON_Status json_array_resize(JSON_Array *array, size_t new_capacity) {
 800fd4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fd4e:	4604      	mov	r4, r0
    if (new_capacity == 0) {
 800fd50:	460d      	mov	r5, r1
 800fd52:	b911      	cbnz	r1, 800fd5a <json_array_resize+0xe>
        return JSONFailure;
 800fd54:	f04f 30ff 	mov.w	r0, #4294967295
}
 800fd58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    new_items = (JSON_Value**)parson_malloc(new_capacity * sizeof(JSON_Value*));
 800fd5a:	4f0a      	ldr	r7, [pc, #40]	; (800fd84 <json_array_resize+0x38>)
 800fd5c:	0088      	lsls	r0, r1, #2
 800fd5e:	683b      	ldr	r3, [r7, #0]
 800fd60:	4798      	blx	r3
    if (new_items == NULL) {
 800fd62:	4606      	mov	r6, r0
 800fd64:	2800      	cmp	r0, #0
 800fd66:	d0f5      	beq.n	800fd54 <json_array_resize+0x8>
    if (array->items != NULL && array->count > 0) {
 800fd68:	6861      	ldr	r1, [r4, #4]
 800fd6a:	b121      	cbz	r1, 800fd76 <json_array_resize+0x2a>
 800fd6c:	68a2      	ldr	r2, [r4, #8]
 800fd6e:	b112      	cbz	r2, 800fd76 <json_array_resize+0x2a>
        memcpy(new_items, array->items, array->count * sizeof(JSON_Value*));
 800fd70:	0092      	lsls	r2, r2, #2
 800fd72:	f009 fe55 	bl	8019a20 <memcpy>
    parson_free(array->items);
 800fd76:	6860      	ldr	r0, [r4, #4]
 800fd78:	687b      	ldr	r3, [r7, #4]
 800fd7a:	4798      	blx	r3
    array->items = new_items;
 800fd7c:	6066      	str	r6, [r4, #4]
    array->capacity = new_capacity;
 800fd7e:	60e5      	str	r5, [r4, #12]
    return JSONSuccess;
 800fd80:	2000      	movs	r0, #0
 800fd82:	e7e9      	b.n	800fd58 <json_array_resize+0xc>
 800fd84:	200003e8 	.word	0x200003e8

0800fd88 <json_array_add>:
static JSON_Status json_array_add(JSON_Array *array, JSON_Value *value) {
 800fd88:	b538      	push	{r3, r4, r5, lr}
 800fd8a:	460d      	mov	r5, r1
    if (array->count >= array->capacity) {
 800fd8c:	e9d0 2102 	ldrd	r2, r1, [r0, #8]
 800fd90:	428a      	cmp	r2, r1
static JSON_Status json_array_add(JSON_Array *array, JSON_Value *value) {
 800fd92:	4604      	mov	r4, r0
    if (array->count >= array->capacity) {
 800fd94:	d209      	bcs.n	800fdaa <json_array_add+0x22>
    value->parent = json_array_get_wrapping_value(array);
 800fd96:	6823      	ldr	r3, [r4, #0]
 800fd98:	602b      	str	r3, [r5, #0]
    array->items[array->count] = value;
 800fd9a:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 800fd9e:	f842 5023 	str.w	r5, [r2, r3, lsl #2]
    array->count++;
 800fda2:	3301      	adds	r3, #1
 800fda4:	60a3      	str	r3, [r4, #8]
    return JSONSuccess;
 800fda6:	2000      	movs	r0, #0
}
 800fda8:	bd38      	pop	{r3, r4, r5, pc}
        size_t new_capacity = MAX(array->capacity * 2, STARTING_CAPACITY);
 800fdaa:	0049      	lsls	r1, r1, #1
        if (json_array_resize(array, new_capacity) == JSONFailure) {
 800fdac:	2910      	cmp	r1, #16
 800fdae:	bf38      	it	cc
 800fdb0:	2110      	movcc	r1, #16
 800fdb2:	f7ff ffcb 	bl	800fd4c <json_array_resize>
 800fdb6:	1c43      	adds	r3, r0, #1
 800fdb8:	d1ed      	bne.n	800fd96 <json_array_add+0xe>
 800fdba:	e7f5      	b.n	800fda8 <json_array_add+0x20>

0800fdbc <json_object_getn_value>:
static JSON_Value * json_object_getn_value(const JSON_Object *object, const char *name, size_t name_len) {
 800fdbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fdc0:	4604      	mov	r4, r0
 800fdc2:	460f      	mov	r7, r1
 800fdc4:	4616      	mov	r6, r2
    for (i = 0; i < json_object_get_count(object); i++) {
 800fdc6:	2500      	movs	r5, #0
    return object ? object->count : 0;
 800fdc8:	b1bc      	cbz	r4, 800fdfa <json_object_getn_value+0x3e>
    for (i = 0; i < json_object_get_count(object); i++) {
 800fdca:	68e3      	ldr	r3, [r4, #12]
 800fdcc:	429d      	cmp	r5, r3
 800fdce:	d301      	bcc.n	800fdd4 <json_object_getn_value+0x18>
    return NULL;
 800fdd0:	2400      	movs	r4, #0
 800fdd2:	e012      	b.n	800fdfa <json_object_getn_value+0x3e>
        name_length = strlen(object->names[i]);
 800fdd4:	6863      	ldr	r3, [r4, #4]
 800fdd6:	f853 8025 	ldr.w	r8, [r3, r5, lsl #2]
 800fdda:	4640      	mov	r0, r8
 800fddc:	f7f4 fa82 	bl	80042e4 <strlen>
        if (name_length != name_len) {
 800fde0:	42b0      	cmp	r0, r6
 800fde2:	ea4f 0985 	mov.w	r9, r5, lsl #2
 800fde6:	d10b      	bne.n	800fe00 <json_object_getn_value+0x44>
        if (strncmp(object->names[i], name, name_len) == 0) {
 800fde8:	4632      	mov	r2, r6
 800fdea:	4639      	mov	r1, r7
 800fdec:	4640      	mov	r0, r8
 800fdee:	f00a fc79 	bl	801a6e4 <strncmp>
 800fdf2:	b928      	cbnz	r0, 800fe00 <json_object_getn_value+0x44>
            return object->values[i];
 800fdf4:	68a3      	ldr	r3, [r4, #8]
 800fdf6:	f853 4009 	ldr.w	r4, [r3, r9]
}
 800fdfa:	4620      	mov	r0, r4
 800fdfc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    for (i = 0; i < json_object_get_count(object); i++) {
 800fe00:	3501      	adds	r5, #1
 800fe02:	e7e1      	b.n	800fdc8 <json_object_getn_value+0xc>

0800fe04 <json_object_addn>:
static JSON_Status json_object_addn(JSON_Object *object, const char *name, size_t name_len, JSON_Value *value) {
 800fe04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fe08:	460e      	mov	r6, r1
 800fe0a:	4690      	mov	r8, r2
 800fe0c:	461d      	mov	r5, r3
    if (object == NULL || name == NULL || value == NULL) {
 800fe0e:	4604      	mov	r4, r0
 800fe10:	b918      	cbnz	r0, 800fe1a <json_object_addn+0x16>
        return JSONFailure;
 800fe12:	f04f 30ff 	mov.w	r0, #4294967295
}
 800fe16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (object == NULL || name == NULL || value == NULL) {
 800fe1a:	2900      	cmp	r1, #0
 800fe1c:	d0f9      	beq.n	800fe12 <json_object_addn+0xe>
 800fe1e:	2b00      	cmp	r3, #0
 800fe20:	d0f7      	beq.n	800fe12 <json_object_addn+0xe>
    if (json_object_getn_value(object, name, name_len) != NULL) {
 800fe22:	f7ff ffcb 	bl	800fdbc <json_object_getn_value>
 800fe26:	2800      	cmp	r0, #0
 800fe28:	d1f3      	bne.n	800fe12 <json_object_addn+0xe>
    if (object->count >= object->capacity) {
 800fe2a:	e9d4 2103 	ldrd	r2, r1, [r4, #12]
 800fe2e:	428a      	cmp	r2, r1
 800fe30:	d217      	bcs.n	800fe62 <json_object_addn+0x5e>
    object->names[index] = parson_strndup(name, name_len);
 800fe32:	4641      	mov	r1, r8
 800fe34:	4630      	mov	r0, r6
 800fe36:	68e7      	ldr	r7, [r4, #12]
 800fe38:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800fe3c:	f7ff ff2c 	bl	800fc98 <parson_strndup>
    if (object->names[index] == NULL) {
 800fe40:	6863      	ldr	r3, [r4, #4]
    object->names[index] = parson_strndup(name, name_len);
 800fe42:	f849 0027 	str.w	r0, [r9, r7, lsl #2]
    if (object->names[index] == NULL) {
 800fe46:	f853 3027 	ldr.w	r3, [r3, r7, lsl #2]
 800fe4a:	2b00      	cmp	r3, #0
 800fe4c:	d0e1      	beq.n	800fe12 <json_object_addn+0xe>
    value->parent = json_object_get_wrapping_value(object);
 800fe4e:	6823      	ldr	r3, [r4, #0]
 800fe50:	602b      	str	r3, [r5, #0]
    object->values[index] = value;
 800fe52:	68a3      	ldr	r3, [r4, #8]
 800fe54:	f843 5027 	str.w	r5, [r3, r7, lsl #2]
    object->count++;
 800fe58:	68e3      	ldr	r3, [r4, #12]
 800fe5a:	3301      	adds	r3, #1
 800fe5c:	60e3      	str	r3, [r4, #12]
    return JSONSuccess;
 800fe5e:	2000      	movs	r0, #0
 800fe60:	e7d9      	b.n	800fe16 <json_object_addn+0x12>
        size_t new_capacity = MAX(object->capacity * 2, STARTING_CAPACITY);
 800fe62:	0049      	lsls	r1, r1, #1
        if (json_object_resize(object, new_capacity) == JSONFailure) {
 800fe64:	2910      	cmp	r1, #16
 800fe66:	bf38      	it	cc
 800fe68:	2110      	movcc	r1, #16
 800fe6a:	4620      	mov	r0, r4
 800fe6c:	f7ff ff28 	bl	800fcc0 <json_object_resize>
 800fe70:	3001      	adds	r0, #1
 800fe72:	d1de      	bne.n	800fe32 <json_object_addn+0x2e>
 800fe74:	e7cd      	b.n	800fe12 <json_object_addn+0xe>

0800fe76 <json_object_add>:
static JSON_Status json_object_add(JSON_Object *object, const char *name, JSON_Value *value) {
 800fe76:	b513      	push	{r0, r1, r4, lr}
 800fe78:	4604      	mov	r4, r0
 800fe7a:	9201      	str	r2, [sp, #4]
    if (name == NULL) {
 800fe7c:	b161      	cbz	r1, 800fe98 <json_object_add+0x22>
    return json_object_addn(object, name, strlen(name), value);
 800fe7e:	4608      	mov	r0, r1
 800fe80:	9100      	str	r1, [sp, #0]
 800fe82:	f7f4 fa2f 	bl	80042e4 <strlen>
 800fe86:	e9dd 1300 	ldrd	r1, r3, [sp]
 800fe8a:	4602      	mov	r2, r0
 800fe8c:	4620      	mov	r0, r4
}
 800fe8e:	b002      	add	sp, #8
 800fe90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return json_object_addn(object, name, strlen(name), value);
 800fe94:	f7ff bfb6 	b.w	800fe04 <json_object_addn>
}
 800fe98:	f04f 30ff 	mov.w	r0, #4294967295
 800fe9c:	b002      	add	sp, #8
 800fe9e:	bd10      	pop	{r4, pc}

0800fea0 <hex_char_to_int>:
    if (c >= '0' && c <= '9') {
 800fea0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800fea4:	b2da      	uxtb	r2, r3
 800fea6:	2a09      	cmp	r2, #9
 800fea8:	d801      	bhi.n	800feae <hex_char_to_int+0xe>
        return c - '0';
 800feaa:	4618      	mov	r0, r3
 800feac:	4770      	bx	lr
    } else if (c >= 'a' && c <= 'f') {
 800feae:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800feb2:	2b05      	cmp	r3, #5
 800feb4:	d801      	bhi.n	800feba <hex_char_to_int+0x1a>
        return c - 'a' + 10;
 800feb6:	3857      	subs	r0, #87	; 0x57
 800feb8:	4770      	bx	lr
    } else if (c >= 'A' && c <= 'F') {
 800feba:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800febe:	2b05      	cmp	r3, #5
        return c - 'A' + 10;
 800fec0:	bf94      	ite	ls
 800fec2:	3837      	subls	r0, #55	; 0x37
    return -1;
 800fec4:	f04f 30ff 	movhi.w	r0, #4294967295
}
 800fec8:	4770      	bx	lr

0800feca <parse_utf16_hex>:
static int parse_utf16_hex(const char *s, unsigned int *result) {
 800feca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fecc:	4603      	mov	r3, r0
    if (s[0] == '\0' || s[1] == '\0' || s[2] == '\0' || s[3] == '\0') {
 800fece:	7800      	ldrb	r0, [r0, #0]
 800fed0:	b320      	cbz	r0, 800ff1c <parse_utf16_hex+0x52>
 800fed2:	785d      	ldrb	r5, [r3, #1]
 800fed4:	b31d      	cbz	r5, 800ff1e <parse_utf16_hex+0x54>
 800fed6:	789e      	ldrb	r6, [r3, #2]
 800fed8:	b30e      	cbz	r6, 800ff1e <parse_utf16_hex+0x54>
 800feda:	78dc      	ldrb	r4, [r3, #3]
 800fedc:	b1fc      	cbz	r4, 800ff1e <parse_utf16_hex+0x54>
    x1 = hex_char_to_int(s[0]);
 800fede:	f7ff ffdf 	bl	800fea0 <hex_char_to_int>
 800fee2:	4607      	mov	r7, r0
    x2 = hex_char_to_int(s[1]);
 800fee4:	4628      	mov	r0, r5
 800fee6:	f7ff ffdb 	bl	800fea0 <hex_char_to_int>
    if (x1 == -1 || x2 == -1 || x3 == -1 || x4 == -1) {
 800feea:	1c7b      	adds	r3, r7, #1
    x2 = hex_char_to_int(s[1]);
 800feec:	4605      	mov	r5, r0
    if (x1 == -1 || x2 == -1 || x3 == -1 || x4 == -1) {
 800feee:	d016      	beq.n	800ff1e <parse_utf16_hex+0x54>
 800fef0:	1c68      	adds	r0, r5, #1
 800fef2:	d014      	beq.n	800ff1e <parse_utf16_hex+0x54>
    x3 = hex_char_to_int(s[2]);
 800fef4:	4630      	mov	r0, r6
 800fef6:	f7ff ffd3 	bl	800fea0 <hex_char_to_int>
    if (x1 == -1 || x2 == -1 || x3 == -1 || x4 == -1) {
 800fefa:	1c42      	adds	r2, r0, #1
    x3 = hex_char_to_int(s[2]);
 800fefc:	4606      	mov	r6, r0
    if (x1 == -1 || x2 == -1 || x3 == -1 || x4 == -1) {
 800fefe:	d00e      	beq.n	800ff1e <parse_utf16_hex+0x54>
    x4 = hex_char_to_int(s[3]);
 800ff00:	4620      	mov	r0, r4
 800ff02:	f7ff ffcd 	bl	800fea0 <hex_char_to_int>
    if (x1 == -1 || x2 == -1 || x3 == -1 || x4 == -1) {
 800ff06:	1c43      	adds	r3, r0, #1
    x4 = hex_char_to_int(s[3]);
 800ff08:	4604      	mov	r4, r0
    if (x1 == -1 || x2 == -1 || x3 == -1 || x4 == -1) {
 800ff0a:	d008      	beq.n	800ff1e <parse_utf16_hex+0x54>
    *result = (unsigned int)((x1 << 12) | (x2 << 8) | (x3 << 4) | x4);
 800ff0c:	022a      	lsls	r2, r5, #8
 800ff0e:	ea42 3307 	orr.w	r3, r2, r7, lsl #12
 800ff12:	ea43 1506 	orr.w	r5, r3, r6, lsl #4
 800ff16:	432c      	orrs	r4, r5
 800ff18:	600c      	str	r4, [r1, #0]
    return 1;
 800ff1a:	2001      	movs	r0, #1
}
 800ff1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return 0;
 800ff1e:	2000      	movs	r0, #0
 800ff20:	e7fc      	b.n	800ff1c <parse_utf16_hex+0x52>
	...

0800ff24 <append_string>:
static int append_string(char *buf, const char *string) {
 800ff24:	460a      	mov	r2, r1
    if (buf == NULL) {
 800ff26:	b910      	cbnz	r0, 800ff2e <append_string+0xa>
        return (int)strlen(string);
 800ff28:	4608      	mov	r0, r1
 800ff2a:	f7f4 b9db 	b.w	80042e4 <strlen>
    return sprintf(buf, "%s", string);
 800ff2e:	4901      	ldr	r1, [pc, #4]	; (800ff34 <append_string+0x10>)
 800ff30:	f00a bb60 	b.w	801a5f4 <siprintf>
 800ff34:	08021f6b 	.word	0x08021f6b

0800ff38 <append_indent>:
static int append_indent(char *buf, int level) {
 800ff38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    int written = -1, written_total = 0;
 800ff3c:	2500      	movs	r5, #0
        APPEND_STRING("    ");
 800ff3e:	f8df 8030 	ldr.w	r8, [pc, #48]	; 800ff70 <append_indent+0x38>
static int append_indent(char *buf, int level) {
 800ff42:	4604      	mov	r4, r0
 800ff44:	460e      	mov	r6, r1
    for (i = 0; i < level; i++) {
 800ff46:	462f      	mov	r7, r5
 800ff48:	42b7      	cmp	r7, r6
 800ff4a:	db02      	blt.n	800ff52 <append_indent+0x1a>
}
 800ff4c:	4628      	mov	r0, r5
 800ff4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        APPEND_STRING("    ");
 800ff52:	4641      	mov	r1, r8
 800ff54:	4620      	mov	r0, r4
 800ff56:	f7ff ffe5 	bl	800ff24 <append_string>
 800ff5a:	2800      	cmp	r0, #0
 800ff5c:	db04      	blt.n	800ff68 <append_indent+0x30>
 800ff5e:	b104      	cbz	r4, 800ff62 <append_indent+0x2a>
 800ff60:	4404      	add	r4, r0
 800ff62:	4405      	add	r5, r0
    for (i = 0; i < level; i++) {
 800ff64:	3701      	adds	r7, #1
 800ff66:	e7ef      	b.n	800ff48 <append_indent+0x10>
        APPEND_STRING("    ");
 800ff68:	f04f 35ff 	mov.w	r5, #4294967295
 800ff6c:	e7ee      	b.n	800ff4c <append_indent+0x14>
 800ff6e:	bf00      	nop
 800ff70:	08021f6e 	.word	0x08021f6e

0800ff74 <json_serialize_string>:
static int json_serialize_string(const char *string, size_t len, char *buf) {
 800ff74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ff78:	4606      	mov	r6, r0
 800ff7a:	460f      	mov	r7, r1
    APPEND_STRING("\"");
 800ff7c:	4610      	mov	r0, r2
 800ff7e:	4955      	ldr	r1, [pc, #340]	; (80100d4 <json_serialize_string+0x160>)
static int json_serialize_string(const char *string, size_t len, char *buf) {
 800ff80:	4614      	mov	r4, r2
    APPEND_STRING("\"");
 800ff82:	f7ff ffcf 	bl	800ff24 <append_string>
 800ff86:	1e05      	subs	r5, r0, #0
 800ff88:	da03      	bge.n	800ff92 <json_serialize_string+0x1e>
 800ff8a:	f04f 30ff 	mov.w	r0, #4294967295
}
 800ff8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    APPEND_STRING("\"");
 800ff92:	b104      	cbz	r4, 800ff96 <json_serialize_string+0x22>
 800ff94:	442c      	add	r4, r5
                if (parson_escape_slashes) {
 800ff96:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 8010160 <json_serialize_string+0x1ec>
                    APPEND_STRING("/");
 800ff9a:	f8df 91c8 	ldr.w	r9, [pc, #456]	; 8010164 <json_serialize_string+0x1f0>
                    APPEND_STRING("\\/");  /* to make json embeddable in xml\/html */
 800ff9e:	f8df a1c8 	ldr.w	sl, [pc, #456]	; 8010168 <json_serialize_string+0x1f4>
 800ffa2:	4437      	add	r7, r6
    for (i = 0; i < len; i++) {
 800ffa4:	42be      	cmp	r6, r7
 800ffa6:	d107      	bne.n	800ffb8 <json_serialize_string+0x44>
    APPEND_STRING("\"");
 800ffa8:	494a      	ldr	r1, [pc, #296]	; (80100d4 <json_serialize_string+0x160>)
 800ffaa:	4620      	mov	r0, r4
 800ffac:	f7ff ffba 	bl	800ff24 <append_string>
 800ffb0:	2800      	cmp	r0, #0
 800ffb2:	dbea      	blt.n	800ff8a <json_serialize_string+0x16>
 800ffb4:	4428      	add	r0, r5
    return written_total;
 800ffb6:	e7ea      	b.n	800ff8e <json_serialize_string+0x1a>
        c = string[i];
 800ffb8:	f816 3b01 	ldrb.w	r3, [r6], #1
        switch (c) {
 800ffbc:	2b5c      	cmp	r3, #92	; 0x5c
 800ffbe:	f200 8084 	bhi.w	80100ca <json_serialize_string+0x156>
 800ffc2:	e8df f003 	tbb	[pc, r3]
 800ffc6:	4745      	.short	0x4745
 800ffc8:	4f4d4b49 	.word	0x4f4d4b49
 800ffcc:	433b5351 	.word	0x433b5351
 800ffd0:	413d553f 	.word	0x413d553f
 800ffd4:	5d5b5957 	.word	0x5d5b5957
 800ffd8:	6563615f 	.word	0x6563615f
 800ffdc:	6d6b6967 	.word	0x6d6b6967
 800ffe0:	7573716f 	.word	0x7573716f
 800ffe4:	82827977 	.word	0x82827977
 800ffe8:	8282822f 	.word	0x8282822f
 800ffec:	82828282 	.word	0x82828282
 800fff0:	82828282 	.word	0x82828282
 800fff4:	82827b82 	.word	0x82827b82
 800fff8:	82828282 	.word	0x82828282
 800fffc:	82828282 	.word	0x82828282
 8010000:	82828282 	.word	0x82828282
 8010004:	82828282 	.word	0x82828282
 8010008:	82828282 	.word	0x82828282
 801000c:	82828282 	.word	0x82828282
 8010010:	82828282 	.word	0x82828282
 8010014:	82828282 	.word	0x82828282
 8010018:	82828282 	.word	0x82828282
 801001c:	82828282 	.word	0x82828282
 8010020:	8282      	.short	0x8282
 8010022:	39          	.byte	0x39
 8010023:	00          	.byte	0x00
            case '\"': APPEND_STRING("\\\""); break;
 8010024:	492c      	ldr	r1, [pc, #176]	; (80100d8 <json_serialize_string+0x164>)
                    APPEND_STRING("/");
 8010026:	4620      	mov	r0, r4
 8010028:	f7ff ff7c 	bl	800ff24 <append_string>
 801002c:	2800      	cmp	r0, #0
 801002e:	dbac      	blt.n	800ff8a <json_serialize_string+0x16>
 8010030:	b104      	cbz	r4, 8010034 <json_serialize_string+0xc0>
 8010032:	4404      	add	r4, r0
 8010034:	4405      	add	r5, r0
 8010036:	e7b5      	b.n	800ffa4 <json_serialize_string+0x30>
            case '\\': APPEND_STRING("\\\\"); break;
 8010038:	4928      	ldr	r1, [pc, #160]	; (80100dc <json_serialize_string+0x168>)
 801003a:	e7f4      	b.n	8010026 <json_serialize_string+0xb2>
            case '\b': APPEND_STRING("\\b"); break;
 801003c:	4928      	ldr	r1, [pc, #160]	; (80100e0 <json_serialize_string+0x16c>)
 801003e:	e7f2      	b.n	8010026 <json_serialize_string+0xb2>
            case '\f': APPEND_STRING("\\f"); break;
 8010040:	4928      	ldr	r1, [pc, #160]	; (80100e4 <json_serialize_string+0x170>)
 8010042:	e7f0      	b.n	8010026 <json_serialize_string+0xb2>
            case '\n': APPEND_STRING("\\n"); break;
 8010044:	4928      	ldr	r1, [pc, #160]	; (80100e8 <json_serialize_string+0x174>)
 8010046:	e7ee      	b.n	8010026 <json_serialize_string+0xb2>
            case '\r': APPEND_STRING("\\r"); break;
 8010048:	4928      	ldr	r1, [pc, #160]	; (80100ec <json_serialize_string+0x178>)
 801004a:	e7ec      	b.n	8010026 <json_serialize_string+0xb2>
            case '\t': APPEND_STRING("\\t"); break;
 801004c:	4928      	ldr	r1, [pc, #160]	; (80100f0 <json_serialize_string+0x17c>)
 801004e:	e7ea      	b.n	8010026 <json_serialize_string+0xb2>
            case '\x00': APPEND_STRING("\\u0000"); break;
 8010050:	4928      	ldr	r1, [pc, #160]	; (80100f4 <json_serialize_string+0x180>)
 8010052:	e7e8      	b.n	8010026 <json_serialize_string+0xb2>
            case '\x01': APPEND_STRING("\\u0001"); break;
 8010054:	4928      	ldr	r1, [pc, #160]	; (80100f8 <json_serialize_string+0x184>)
 8010056:	e7e6      	b.n	8010026 <json_serialize_string+0xb2>
            case '\x02': APPEND_STRING("\\u0002"); break;
 8010058:	4928      	ldr	r1, [pc, #160]	; (80100fc <json_serialize_string+0x188>)
 801005a:	e7e4      	b.n	8010026 <json_serialize_string+0xb2>
            case '\x03': APPEND_STRING("\\u0003"); break;
 801005c:	4928      	ldr	r1, [pc, #160]	; (8010100 <json_serialize_string+0x18c>)
 801005e:	e7e2      	b.n	8010026 <json_serialize_string+0xb2>
            case '\x04': APPEND_STRING("\\u0004"); break;
 8010060:	4928      	ldr	r1, [pc, #160]	; (8010104 <json_serialize_string+0x190>)
 8010062:	e7e0      	b.n	8010026 <json_serialize_string+0xb2>
            case '\x05': APPEND_STRING("\\u0005"); break;
 8010064:	4928      	ldr	r1, [pc, #160]	; (8010108 <json_serialize_string+0x194>)
 8010066:	e7de      	b.n	8010026 <json_serialize_string+0xb2>
            case '\x06': APPEND_STRING("\\u0006"); break;
 8010068:	4928      	ldr	r1, [pc, #160]	; (801010c <json_serialize_string+0x198>)
 801006a:	e7dc      	b.n	8010026 <json_serialize_string+0xb2>
            case '\x07': APPEND_STRING("\\u0007"); break;
 801006c:	4928      	ldr	r1, [pc, #160]	; (8010110 <json_serialize_string+0x19c>)
 801006e:	e7da      	b.n	8010026 <json_serialize_string+0xb2>
            case '\x0b': APPEND_STRING("\\u000b"); break;
 8010070:	4928      	ldr	r1, [pc, #160]	; (8010114 <json_serialize_string+0x1a0>)
 8010072:	e7d8      	b.n	8010026 <json_serialize_string+0xb2>
            case '\x0e': APPEND_STRING("\\u000e"); break;
 8010074:	4928      	ldr	r1, [pc, #160]	; (8010118 <json_serialize_string+0x1a4>)
 8010076:	e7d6      	b.n	8010026 <json_serialize_string+0xb2>
            case '\x0f': APPEND_STRING("\\u000f"); break;
 8010078:	4928      	ldr	r1, [pc, #160]	; (801011c <json_serialize_string+0x1a8>)
 801007a:	e7d4      	b.n	8010026 <json_serialize_string+0xb2>
            case '\x10': APPEND_STRING("\\u0010"); break;
 801007c:	4928      	ldr	r1, [pc, #160]	; (8010120 <json_serialize_string+0x1ac>)
 801007e:	e7d2      	b.n	8010026 <json_serialize_string+0xb2>
            case '\x11': APPEND_STRING("\\u0011"); break;
 8010080:	4928      	ldr	r1, [pc, #160]	; (8010124 <json_serialize_string+0x1b0>)
 8010082:	e7d0      	b.n	8010026 <json_serialize_string+0xb2>
            case '\x12': APPEND_STRING("\\u0012"); break;
 8010084:	4928      	ldr	r1, [pc, #160]	; (8010128 <json_serialize_string+0x1b4>)
 8010086:	e7ce      	b.n	8010026 <json_serialize_string+0xb2>
            case '\x13': APPEND_STRING("\\u0013"); break;
 8010088:	4928      	ldr	r1, [pc, #160]	; (801012c <json_serialize_string+0x1b8>)
 801008a:	e7cc      	b.n	8010026 <json_serialize_string+0xb2>
            case '\x14': APPEND_STRING("\\u0014"); break;
 801008c:	4928      	ldr	r1, [pc, #160]	; (8010130 <json_serialize_string+0x1bc>)
 801008e:	e7ca      	b.n	8010026 <json_serialize_string+0xb2>
            case '\x15': APPEND_STRING("\\u0015"); break;
 8010090:	4928      	ldr	r1, [pc, #160]	; (8010134 <json_serialize_string+0x1c0>)
 8010092:	e7c8      	b.n	8010026 <json_serialize_string+0xb2>
            case '\x16': APPEND_STRING("\\u0016"); break;
 8010094:	4928      	ldr	r1, [pc, #160]	; (8010138 <json_serialize_string+0x1c4>)
 8010096:	e7c6      	b.n	8010026 <json_serialize_string+0xb2>
            case '\x17': APPEND_STRING("\\u0017"); break;
 8010098:	4928      	ldr	r1, [pc, #160]	; (801013c <json_serialize_string+0x1c8>)
 801009a:	e7c4      	b.n	8010026 <json_serialize_string+0xb2>
            case '\x18': APPEND_STRING("\\u0018"); break;
 801009c:	4928      	ldr	r1, [pc, #160]	; (8010140 <json_serialize_string+0x1cc>)
 801009e:	e7c2      	b.n	8010026 <json_serialize_string+0xb2>
            case '\x19': APPEND_STRING("\\u0019"); break;
 80100a0:	4928      	ldr	r1, [pc, #160]	; (8010144 <json_serialize_string+0x1d0>)
 80100a2:	e7c0      	b.n	8010026 <json_serialize_string+0xb2>
            case '\x1a': APPEND_STRING("\\u001a"); break;
 80100a4:	4928      	ldr	r1, [pc, #160]	; (8010148 <json_serialize_string+0x1d4>)
 80100a6:	e7be      	b.n	8010026 <json_serialize_string+0xb2>
            case '\x1b': APPEND_STRING("\\u001b"); break;
 80100a8:	4928      	ldr	r1, [pc, #160]	; (801014c <json_serialize_string+0x1d8>)
 80100aa:	e7bc      	b.n	8010026 <json_serialize_string+0xb2>
            case '\x1c': APPEND_STRING("\\u001c"); break;
 80100ac:	4928      	ldr	r1, [pc, #160]	; (8010150 <json_serialize_string+0x1dc>)
 80100ae:	e7ba      	b.n	8010026 <json_serialize_string+0xb2>
            case '\x1d': APPEND_STRING("\\u001d"); break;
 80100b0:	4928      	ldr	r1, [pc, #160]	; (8010154 <json_serialize_string+0x1e0>)
 80100b2:	e7b8      	b.n	8010026 <json_serialize_string+0xb2>
            case '\x1e': APPEND_STRING("\\u001e"); break;
 80100b4:	4928      	ldr	r1, [pc, #160]	; (8010158 <json_serialize_string+0x1e4>)
 80100b6:	e7b6      	b.n	8010026 <json_serialize_string+0xb2>
            case '\x1f': APPEND_STRING("\\u001f"); break;
 80100b8:	4928      	ldr	r1, [pc, #160]	; (801015c <json_serialize_string+0x1e8>)
 80100ba:	e7b4      	b.n	8010026 <json_serialize_string+0xb2>
                if (parson_escape_slashes) {
 80100bc:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80100c0:	b10b      	cbz	r3, 80100c6 <json_serialize_string+0x152>
                    APPEND_STRING("\\/");  /* to make json embeddable in xml\/html */
 80100c2:	4651      	mov	r1, sl
 80100c4:	e7af      	b.n	8010026 <json_serialize_string+0xb2>
                    APPEND_STRING("/");
 80100c6:	4649      	mov	r1, r9
 80100c8:	e7ad      	b.n	8010026 <json_serialize_string+0xb2>
                if (buf != NULL) {
 80100ca:	b10c      	cbz	r4, 80100d0 <json_serialize_string+0x15c>
                    buf[0] = c;
 80100cc:	f804 3b01 	strb.w	r3, [r4], #1
                written_total += 1;
 80100d0:	3501      	adds	r5, #1
                break;
 80100d2:	e767      	b.n	800ffa4 <json_serialize_string+0x30>
 80100d4:	08021f74 	.word	0x08021f74
 80100d8:	08021f73 	.word	0x08021f73
 80100dc:	08021f76 	.word	0x08021f76
 80100e0:	08021f79 	.word	0x08021f79
 80100e4:	08021f7c 	.word	0x08021f7c
 80100e8:	08021f7f 	.word	0x08021f7f
 80100ec:	08021f82 	.word	0x08021f82
 80100f0:	08021f85 	.word	0x08021f85
 80100f4:	08021f88 	.word	0x08021f88
 80100f8:	08021f8f 	.word	0x08021f8f
 80100fc:	08021f96 	.word	0x08021f96
 8010100:	08021f9d 	.word	0x08021f9d
 8010104:	08021fa4 	.word	0x08021fa4
 8010108:	08021fab 	.word	0x08021fab
 801010c:	08021fb2 	.word	0x08021fb2
 8010110:	08021fb9 	.word	0x08021fb9
 8010114:	08021fc0 	.word	0x08021fc0
 8010118:	08021fc7 	.word	0x08021fc7
 801011c:	08021fce 	.word	0x08021fce
 8010120:	08021fd5 	.word	0x08021fd5
 8010124:	08021fdc 	.word	0x08021fdc
 8010128:	08021fe3 	.word	0x08021fe3
 801012c:	08021fea 	.word	0x08021fea
 8010130:	08021ff1 	.word	0x08021ff1
 8010134:	08021ff8 	.word	0x08021ff8
 8010138:	08021fff 	.word	0x08021fff
 801013c:	08022006 	.word	0x08022006
 8010140:	0802200d 	.word	0x0802200d
 8010144:	08022014 	.word	0x08022014
 8010148:	0802201b 	.word	0x0802201b
 801014c:	08022022 	.word	0x08022022
 8010150:	08022029 	.word	0x08022029
 8010154:	08022030 	.word	0x08022030
 8010158:	08022037 	.word	0x08022037
 801015c:	0802203e 	.word	0x0802203e
 8010160:	200003e8 	.word	0x200003e8
 8010164:	08022063 	.word	0x08022063
 8010168:	08022045 	.word	0x08022045

0801016c <get_quoted_string.constprop.0>:
static char * get_quoted_string(const char **string, size_t *output_string_len) {
 801016c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    const char *string_start = *string;
 8010170:	6802      	ldr	r2, [r0, #0]
    if (**string != '\"') {
 8010172:	7813      	ldrb	r3, [r2, #0]
static char * get_quoted_string(const char **string, size_t *output_string_len) {
 8010174:	b085      	sub	sp, #20
    if (**string != '\"') {
 8010176:	2b22      	cmp	r3, #34	; 0x22
static char * get_quoted_string(const char **string, size_t *output_string_len) {
 8010178:	9101      	str	r1, [sp, #4]
    if (**string != '\"') {
 801017a:	d001      	beq.n	8010180 <get_quoted_string.constprop.0+0x14>
    return NULL;
 801017c:	2500      	movs	r5, #0
 801017e:	e032      	b.n	80101e6 <get_quoted_string.constprop.0+0x7a>
    SKIP_CHAR(string);
 8010180:	f102 0801 	add.w	r8, r2, #1
 8010184:	f8c0 8000 	str.w	r8, [r0]
    while (**string != '\"') {
 8010188:	6803      	ldr	r3, [r0, #0]
 801018a:	7819      	ldrb	r1, [r3, #0]
 801018c:	2922      	cmp	r1, #34	; 0x22
 801018e:	d12e      	bne.n	80101ee <get_quoted_string.constprop.0+0x82>
    SKIP_CHAR(string);
 8010190:	3301      	adds	r3, #1
 8010192:	6003      	str	r3, [r0, #0]
    output = (char*)parson_malloc(initial_size);
 8010194:	4f76      	ldr	r7, [pc, #472]	; (8010370 <get_quoted_string.constprop.0+0x204>)
    input_string_len = *string - string_start - 2; /* length without quotes */
 8010196:	1a98      	subs	r0, r3, r2
 8010198:	1e83      	subs	r3, r0, #2
 801019a:	9300      	str	r3, [sp, #0]
    output = (char*)parson_malloc(initial_size);
 801019c:	3801      	subs	r0, #1
 801019e:	683b      	ldr	r3, [r7, #0]
 80101a0:	4798      	blx	r3
    if (output == NULL) {
 80101a2:	4683      	mov	fp, r0
 80101a4:	2800      	cmp	r0, #0
 80101a6:	d040      	beq.n	801022a <get_quoted_string.constprop.0+0xbe>
 80101a8:	4604      	mov	r4, r0
    const char *input_ptr = input;
 80101aa:	4646      	mov	r6, r8
                case 'f':  *output_ptr = '\f'; break;
 80101ac:	f04f 0a0c 	mov.w	sl, #12
    while ((*input_ptr != '\0') && (size_t)(input_ptr - input) < input_len) {
 80101b0:	7832      	ldrb	r2, [r6, #0]
 80101b2:	b122      	cbz	r2, 80101be <get_quoted_string.constprop.0+0x52>
 80101b4:	9b00      	ldr	r3, [sp, #0]
 80101b6:	eba6 0108 	sub.w	r1, r6, r8
 80101ba:	428b      	cmp	r3, r1
 80101bc:	d825      	bhi.n	801020a <get_quoted_string.constprop.0+0x9e>
    *output_ptr = '\0';
 80101be:	2200      	movs	r2, #0
 80101c0:	7022      	strb	r2, [r4, #0]
    final_size = (size_t)(output_ptr-output) + 1;
 80101c2:	eba4 040b 	sub.w	r4, r4, fp
 80101c6:	1c62      	adds	r2, r4, #1
    resized_output = (char*)parson_malloc(final_size);
 80101c8:	6839      	ldr	r1, [r7, #0]
 80101ca:	9200      	str	r2, [sp, #0]
 80101cc:	4610      	mov	r0, r2
 80101ce:	4788      	blx	r1
    if (resized_output == NULL) {
 80101d0:	4605      	mov	r5, r0
 80101d2:	b350      	cbz	r0, 801022a <get_quoted_string.constprop.0+0xbe>
    memcpy(resized_output, output, final_size);
 80101d4:	9a00      	ldr	r2, [sp, #0]
 80101d6:	4659      	mov	r1, fp
 80101d8:	f009 fc22 	bl	8019a20 <memcpy>
    *output_len = final_size - 1;
 80101dc:	9b01      	ldr	r3, [sp, #4]
    parson_free(output);
 80101de:	687a      	ldr	r2, [r7, #4]
    *output_len = final_size - 1;
 80101e0:	601c      	str	r4, [r3, #0]
    parson_free(output);
 80101e2:	4658      	mov	r0, fp
 80101e4:	4790      	blx	r2
}
 80101e6:	4628      	mov	r0, r5
 80101e8:	b005      	add	sp, #20
 80101ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (**string == '\0') {
 80101ee:	2900      	cmp	r1, #0
 80101f0:	d0c4      	beq.n	801017c <get_quoted_string.constprop.0+0x10>
        } else if (**string == '\\') {
 80101f2:	295c      	cmp	r1, #92	; 0x5c
 80101f4:	d003      	beq.n	80101fe <get_quoted_string.constprop.0+0x92>
        SKIP_CHAR(string);
 80101f6:	6803      	ldr	r3, [r0, #0]
 80101f8:	3301      	adds	r3, #1
 80101fa:	6003      	str	r3, [r0, #0]
 80101fc:	e7c4      	b.n	8010188 <get_quoted_string.constprop.0+0x1c>
            SKIP_CHAR(string);
 80101fe:	1c59      	adds	r1, r3, #1
 8010200:	6001      	str	r1, [r0, #0]
            if (**string == '\0') {
 8010202:	785b      	ldrb	r3, [r3, #1]
 8010204:	2b00      	cmp	r3, #0
 8010206:	d1f6      	bne.n	80101f6 <get_quoted_string.constprop.0+0x8a>
 8010208:	e7b8      	b.n	801017c <get_quoted_string.constprop.0+0x10>
        if (*input_ptr == '\\') {
 801020a:	2a5c      	cmp	r2, #92	; 0x5c
 801020c:	f040 80a9 	bne.w	8010362 <get_quoted_string.constprop.0+0x1f6>
            switch (*input_ptr) {
 8010210:	7871      	ldrb	r1, [r6, #1]
 8010212:	2966      	cmp	r1, #102	; 0x66
            input_ptr++;
 8010214:	f106 0201 	add.w	r2, r6, #1
            switch (*input_ptr) {
 8010218:	d02a      	beq.n	8010270 <get_quoted_string.constprop.0+0x104>
 801021a:	d80f      	bhi.n	801023c <get_quoted_string.constprop.0+0xd0>
 801021c:	295c      	cmp	r1, #92	; 0x5c
 801021e:	d00b      	beq.n	8010238 <get_quoted_string.constprop.0+0xcc>
 8010220:	d807      	bhi.n	8010232 <get_quoted_string.constprop.0+0xc6>
 8010222:	2922      	cmp	r1, #34	; 0x22
 8010224:	d008      	beq.n	8010238 <get_quoted_string.constprop.0+0xcc>
 8010226:	292f      	cmp	r1, #47	; 0x2f
 8010228:	d006      	beq.n	8010238 <get_quoted_string.constprop.0+0xcc>
    parson_free(output);
 801022a:	687a      	ldr	r2, [r7, #4]
 801022c:	4658      	mov	r0, fp
 801022e:	4790      	blx	r2
 8010230:	e7a4      	b.n	801017c <get_quoted_string.constprop.0+0x10>
            switch (*input_ptr) {
 8010232:	2962      	cmp	r1, #98	; 0x62
 8010234:	d1f9      	bne.n	801022a <get_quoted_string.constprop.0+0xbe>
                case 'b':  *output_ptr = '\b'; break;
 8010236:	2108      	movs	r1, #8
                case 't':  *output_ptr = '\t'; break;
 8010238:	7021      	strb	r1, [r4, #0]
 801023a:	e01b      	b.n	8010274 <get_quoted_string.constprop.0+0x108>
            switch (*input_ptr) {
 801023c:	396e      	subs	r1, #110	; 0x6e
 801023e:	b2c8      	uxtb	r0, r1
 8010240:	2807      	cmp	r0, #7
 8010242:	d8f2      	bhi.n	801022a <get_quoted_string.constprop.0+0xbe>
 8010244:	2907      	cmp	r1, #7
 8010246:	d8f0      	bhi.n	801022a <get_quoted_string.constprop.0+0xbe>
 8010248:	a301      	add	r3, pc, #4	; (adr r3, 8010250 <get_quoted_string.constprop.0+0xe4>)
 801024a:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 801024e:	bf00      	nop
 8010250:	0801027b 	.word	0x0801027b
 8010254:	0801022b 	.word	0x0801022b
 8010258:	0801022b 	.word	0x0801022b
 801025c:	0801022b 	.word	0x0801022b
 8010260:	0801027f 	.word	0x0801027f
 8010264:	0801022b 	.word	0x0801022b
 8010268:	08010283 	.word	0x08010283
 801026c:	08010287 	.word	0x08010287
                case 'f':  *output_ptr = '\f'; break;
 8010270:	f884 a000 	strb.w	sl, [r4]
        output_ptr++;
 8010274:	3401      	adds	r4, #1
        input_ptr++;
 8010276:	1c56      	adds	r6, r2, #1
 8010278:	e79a      	b.n	80101b0 <get_quoted_string.constprop.0+0x44>
                case 'n':  *output_ptr = '\n'; break;
 801027a:	210a      	movs	r1, #10
 801027c:	e7dc      	b.n	8010238 <get_quoted_string.constprop.0+0xcc>
                case 'r':  *output_ptr = '\r'; break;
 801027e:	210d      	movs	r1, #13
 8010280:	e7da      	b.n	8010238 <get_quoted_string.constprop.0+0xcc>
                case 't':  *output_ptr = '\t'; break;
 8010282:	2109      	movs	r1, #9
 8010284:	e7d8      	b.n	8010238 <get_quoted_string.constprop.0+0xcc>
    unprocessed_ptr++; /* skips u */
 8010286:	f106 0902 	add.w	r9, r6, #2
    parse_succeeded = parse_utf16_hex(unprocessed_ptr, &cp);
 801028a:	a902      	add	r1, sp, #8
 801028c:	4648      	mov	r0, r9
 801028e:	f7ff fe1c 	bl	800feca <parse_utf16_hex>
    if (!parse_succeeded) {
 8010292:	2800      	cmp	r0, #0
 8010294:	d0c9      	beq.n	801022a <get_quoted_string.constprop.0+0xbe>
    if (cp < 0x80) {
 8010296:	9d02      	ldr	r5, [sp, #8]
 8010298:	2d7f      	cmp	r5, #127	; 0x7f
 801029a:	d803      	bhi.n	80102a4 <get_quoted_string.constprop.0+0x138>
        processed_ptr[0] = (char)cp; /* 0xxxxxxx */
 801029c:	7025      	strb	r5, [r4, #0]
    unprocessed_ptr += 3;
 801029e:	f109 0203 	add.w	r2, r9, #3
    return JSONSuccess;
 80102a2:	e7e7      	b.n	8010274 <get_quoted_string.constprop.0+0x108>
    } else if (cp < 0x800) {
 80102a4:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 80102a8:	d20b      	bcs.n	80102c2 <get_quoted_string.constprop.0+0x156>
        processed_ptr[0] = ((cp >> 6) & 0x1F) | 0xC0; /* 110xxxxx */
 80102aa:	09ad      	lsrs	r5, r5, #6
 80102ac:	f065 053f 	orn	r5, r5, #63	; 0x3f
 80102b0:	7025      	strb	r5, [r4, #0]
        processed_ptr[1] = ((cp)      & 0x3F) | 0x80; /* 10xxxxxx */
 80102b2:	9902      	ldr	r1, [sp, #8]
 80102b4:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80102b8:	f061 017f 	orn	r1, r1, #127	; 0x7f
 80102bc:	f804 1f01 	strb.w	r1, [r4, #1]!
        processed_ptr += 1;
 80102c0:	e7ed      	b.n	801029e <get_quoted_string.constprop.0+0x132>
    } else if (cp < 0xD800 || cp > 0xDFFF) {
 80102c2:	f5a5 4158 	sub.w	r1, r5, #55296	; 0xd800
 80102c6:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 80102ca:	d312      	bcc.n	80102f2 <get_quoted_string.constprop.0+0x186>
        processed_ptr[0] = ((cp >> 12) & 0x0F) | 0xE0; /* 1110xxxx */
 80102cc:	f3c5 3503 	ubfx	r5, r5, #12, #4
 80102d0:	f065 051f 	orn	r5, r5, #31
 80102d4:	7025      	strb	r5, [r4, #0]
        processed_ptr[1] = ((cp >> 6)  & 0x3F) | 0x80; /* 10xxxxxx */
 80102d6:	9902      	ldr	r1, [sp, #8]
 80102d8:	f3c1 1185 	ubfx	r1, r1, #6, #6
 80102dc:	f061 017f 	orn	r1, r1, #127	; 0x7f
 80102e0:	7061      	strb	r1, [r4, #1]
        processed_ptr[2] = ((cp)       & 0x3F) | 0x80; /* 10xxxxxx */
 80102e2:	9902      	ldr	r1, [sp, #8]
 80102e4:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80102e8:	f061 017f 	orn	r1, r1, #127	; 0x7f
 80102ec:	f804 1f02 	strb.w	r1, [r4, #2]!
        processed_ptr += 2;
 80102f0:	e7d5      	b.n	801029e <get_quoted_string.constprop.0+0x132>
    } else if (cp >= 0xD800 && cp <= 0xDBFF) { /* lead surrogate (0xD800..0xDBFF) */
 80102f2:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80102f6:	d298      	bcs.n	801022a <get_quoted_string.constprop.0+0xbe>
        if (*unprocessed_ptr++ != '\\' || *unprocessed_ptr++ != 'u') {
 80102f8:	79b2      	ldrb	r2, [r6, #6]
 80102fa:	2a5c      	cmp	r2, #92	; 0x5c
 80102fc:	d195      	bne.n	801022a <get_quoted_string.constprop.0+0xbe>
 80102fe:	79f1      	ldrb	r1, [r6, #7]
 8010300:	2975      	cmp	r1, #117	; 0x75
 8010302:	f106 0908 	add.w	r9, r6, #8
 8010306:	d190      	bne.n	801022a <get_quoted_string.constprop.0+0xbe>
        parse_succeeded = parse_utf16_hex(unprocessed_ptr, &trail);
 8010308:	a903      	add	r1, sp, #12
 801030a:	4648      	mov	r0, r9
 801030c:	f7ff fddd 	bl	800feca <parse_utf16_hex>
        if (!parse_succeeded || trail < 0xDC00 || trail > 0xDFFF) { /* valid trail surrogate? (0xDC00..0xDFFF) */
 8010310:	2800      	cmp	r0, #0
 8010312:	d08a      	beq.n	801022a <get_quoted_string.constprop.0+0xbe>
 8010314:	9903      	ldr	r1, [sp, #12]
 8010316:	f5a1 405c 	sub.w	r0, r1, #56320	; 0xdc00
 801031a:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 801031e:	d284      	bcs.n	801022a <get_quoted_string.constprop.0+0xbe>
        cp = ((((lead - 0xD800) & 0x3FF) << 10) | ((trail - 0xDC00) & 0x3FF)) + 0x010000;
 8010320:	4b14      	ldr	r3, [pc, #80]	; (8010374 <get_quoted_string.constprop.0+0x208>)
 8010322:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8010326:	ea03 2585 	and.w	r5, r3, r5, lsl #10
 801032a:	430d      	orrs	r5, r1
 801032c:	f505 3580 	add.w	r5, r5, #65536	; 0x10000
 8010330:	9502      	str	r5, [sp, #8]
        processed_ptr[0] = (((cp >> 18) & 0x07) | 0xF0); /* 11110xxx */
 8010332:	0cad      	lsrs	r5, r5, #18
 8010334:	f065 050f 	orn	r5, r5, #15
 8010338:	7025      	strb	r5, [r4, #0]
        processed_ptr[1] = (((cp >> 12) & 0x3F) | 0x80); /* 10xxxxxx */
 801033a:	9902      	ldr	r1, [sp, #8]
 801033c:	f3c1 3105 	ubfx	r1, r1, #12, #6
 8010340:	f061 017f 	orn	r1, r1, #127	; 0x7f
 8010344:	7061      	strb	r1, [r4, #1]
        processed_ptr[2] = (((cp >> 6)  & 0x3F) | 0x80); /* 10xxxxxx */
 8010346:	9902      	ldr	r1, [sp, #8]
 8010348:	f3c1 1185 	ubfx	r1, r1, #6, #6
 801034c:	f061 017f 	orn	r1, r1, #127	; 0x7f
 8010350:	70a1      	strb	r1, [r4, #2]
        processed_ptr[3] = (((cp)       & 0x3F) | 0x80); /* 10xxxxxx */
 8010352:	9902      	ldr	r1, [sp, #8]
 8010354:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8010358:	f061 017f 	orn	r1, r1, #127	; 0x7f
 801035c:	f804 1f03 	strb.w	r1, [r4, #3]!
        processed_ptr += 3;
 8010360:	e79d      	b.n	801029e <get_quoted_string.constprop.0+0x132>
        } else if ((unsigned char)*input_ptr < 0x20) {
 8010362:	2a1f      	cmp	r2, #31
 8010364:	f67f af61 	bls.w	801022a <get_quoted_string.constprop.0+0xbe>
            *output_ptr = *input_ptr;
 8010368:	7022      	strb	r2, [r4, #0]
 801036a:	4632      	mov	r2, r6
 801036c:	e782      	b.n	8010274 <get_quoted_string.constprop.0+0x108>
 801036e:	bf00      	nop
 8010370:	200003e8 	.word	0x200003e8
 8010374:	000ffc00 	.word	0x000ffc00

08010378 <json_object_get_value>:
JSON_Value * json_object_get_value(const JSON_Object *object, const char *name) {
 8010378:	b513      	push	{r0, r1, r4, lr}
    if (object == NULL || name == NULL) {
 801037a:	4604      	mov	r4, r0
 801037c:	b160      	cbz	r0, 8010398 <json_object_get_value+0x20>
 801037e:	b159      	cbz	r1, 8010398 <json_object_get_value+0x20>
    return json_object_getn_value(object, name, strlen(name));
 8010380:	4608      	mov	r0, r1
 8010382:	9101      	str	r1, [sp, #4]
 8010384:	f7f3 ffae 	bl	80042e4 <strlen>
 8010388:	9901      	ldr	r1, [sp, #4]
 801038a:	4602      	mov	r2, r0
 801038c:	4620      	mov	r0, r4
}
 801038e:	b002      	add	sp, #8
 8010390:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return json_object_getn_value(object, name, strlen(name));
 8010394:	f7ff bd12 	b.w	800fdbc <json_object_getn_value>
}
 8010398:	2000      	movs	r0, #0
 801039a:	b002      	add	sp, #8
 801039c:	bd10      	pop	{r4, pc}

0801039e <json_object_get_name>:
    if (object == NULL || index >= json_object_get_count(object)) {
 801039e:	b138      	cbz	r0, 80103b0 <json_object_get_name+0x12>
 80103a0:	68c3      	ldr	r3, [r0, #12]
 80103a2:	428b      	cmp	r3, r1
 80103a4:	d903      	bls.n	80103ae <json_object_get_name+0x10>
    return object->names[index];
 80103a6:	6843      	ldr	r3, [r0, #4]
 80103a8:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 80103ac:	4770      	bx	lr
        return NULL;
 80103ae:	2000      	movs	r0, #0
}
 80103b0:	4770      	bx	lr

080103b2 <json_array_get_value>:
    if (array == NULL || index >= json_array_get_count(array)) {
 80103b2:	b138      	cbz	r0, 80103c4 <json_array_get_value+0x12>
 80103b4:	6883      	ldr	r3, [r0, #8]
 80103b6:	428b      	cmp	r3, r1
 80103b8:	d903      	bls.n	80103c2 <json_array_get_value+0x10>
    return array->items[index];
 80103ba:	6843      	ldr	r3, [r0, #4]
 80103bc:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 80103c0:	4770      	bx	lr
        return NULL;
 80103c2:	2000      	movs	r0, #0
}
 80103c4:	4770      	bx	lr

080103c6 <json_value_get_object>:
    return value ? value->type : JSONError;
 80103c6:	b128      	cbz	r0, 80103d4 <json_value_get_object+0xe>
    return json_value_get_type(value) == JSONObject ? value->value.object : NULL;
 80103c8:	6843      	ldr	r3, [r0, #4]
 80103ca:	2b04      	cmp	r3, #4
 80103cc:	d101      	bne.n	80103d2 <json_value_get_object+0xc>
 80103ce:	6880      	ldr	r0, [r0, #8]
 80103d0:	4770      	bx	lr
 80103d2:	2000      	movs	r0, #0
}
 80103d4:	4770      	bx	lr

080103d6 <json_object_dotget_value>:
JSON_Value * json_object_dotget_value(const JSON_Object *object, const char *name) {
 80103d6:	b570      	push	{r4, r5, r6, lr}
 80103d8:	4605      	mov	r5, r0
 80103da:	460c      	mov	r4, r1
    const char *dot_position = strchr(name, '.');
 80103dc:	212e      	movs	r1, #46	; 0x2e
 80103de:	4620      	mov	r0, r4
 80103e0:	f00a f96b 	bl	801a6ba <strchr>
    if (!dot_position) {
 80103e4:	4606      	mov	r6, r0
 80103e6:	b928      	cbnz	r0, 80103f4 <json_object_dotget_value+0x1e>
        return json_object_get_value(object, name);
 80103e8:	4621      	mov	r1, r4
 80103ea:	4628      	mov	r0, r5
}
 80103ec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        return json_object_get_value(object, name);
 80103f0:	f7ff bfc2 	b.w	8010378 <json_object_get_value>
    object = json_value_get_object(json_object_getn_value(object, name, dot_position - name));
 80103f4:	1b02      	subs	r2, r0, r4
 80103f6:	4621      	mov	r1, r4
 80103f8:	4628      	mov	r0, r5
 80103fa:	f7ff fcdf 	bl	800fdbc <json_object_getn_value>
 80103fe:	f7ff ffe2 	bl	80103c6 <json_value_get_object>
    return json_object_dotget_value(object, dot_position + 1);
 8010402:	1c74      	adds	r4, r6, #1
    object = json_value_get_object(json_object_getn_value(object, name, dot_position - name));
 8010404:	4605      	mov	r5, r0
    return json_object_dotget_value(object, dot_position + 1);
 8010406:	e7e9      	b.n	80103dc <json_object_dotget_value+0x6>

08010408 <json_object_dothas_value>:
int json_object_dothas_value (const JSON_Object *object, const char *name) {
 8010408:	b508      	push	{r3, lr}
    return json_object_dotget_value(object, name) != NULL;
 801040a:	f7ff ffe4 	bl	80103d6 <json_object_dotget_value>
}
 801040e:	3800      	subs	r0, #0
 8010410:	bf18      	it	ne
 8010412:	2001      	movne	r0, #1
 8010414:	bd08      	pop	{r3, pc}

08010416 <json_object_dotget_object>:
JSON_Object * json_object_dotget_object(const JSON_Object *object, const char *name) {
 8010416:	b508      	push	{r3, lr}
    return json_value_get_object(json_object_dotget_value(object, name));
 8010418:	f7ff ffdd 	bl	80103d6 <json_object_dotget_value>
}
 801041c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return json_value_get_object(json_object_dotget_value(object, name));
 8010420:	f7ff bfd1 	b.w	80103c6 <json_value_get_object>

08010424 <json_value_get_array>:
    return value ? value->type : JSONError;
 8010424:	b128      	cbz	r0, 8010432 <json_value_get_array+0xe>
    return json_value_get_type(value) == JSONArray ? value->value.array : NULL;
 8010426:	6843      	ldr	r3, [r0, #4]
 8010428:	2b05      	cmp	r3, #5
 801042a:	d101      	bne.n	8010430 <json_value_get_array+0xc>
 801042c:	6880      	ldr	r0, [r0, #8]
 801042e:	4770      	bx	lr
 8010430:	2000      	movs	r0, #0
}
 8010432:	4770      	bx	lr

08010434 <json_object_dotget_array>:
JSON_Array * json_object_dotget_array(const JSON_Object *object, const char *name) {
 8010434:	b508      	push	{r3, lr}
    return json_value_get_array(json_object_dotget_value(object, name));
 8010436:	f7ff ffce 	bl	80103d6 <json_object_dotget_value>
}
 801043a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return json_value_get_array(json_object_dotget_value(object, name));
 801043e:	f7ff bff1 	b.w	8010424 <json_value_get_array>

08010442 <json_value_get_string>:

const char * json_value_get_string(const JSON_Value *value) {
 8010442:	b508      	push	{r3, lr}
    const JSON_String *str = json_value_get_string_desc(value);
 8010444:	f7ff fc20 	bl	800fc88 <json_value_get_string_desc>
    return str ? str->chars : NULL;
 8010448:	b100      	cbz	r0, 801044c <json_value_get_string+0xa>
 801044a:	6800      	ldr	r0, [r0, #0]
}
 801044c:	bd08      	pop	{r3, pc}

0801044e <json_object_dotget_string>:
const char * json_object_dotget_string(const JSON_Object *object, const char *name) {
 801044e:	b508      	push	{r3, lr}
    return json_value_get_string(json_object_dotget_value(object, name));
 8010450:	f7ff ffc1 	bl	80103d6 <json_object_dotget_value>
}
 8010454:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return json_value_get_string(json_object_dotget_value(object, name));
 8010458:	f7ff bff3 	b.w	8010442 <json_value_get_string>

0801045c <json_value_get_string_len>:

size_t json_value_get_string_len(const JSON_Value *value) {
 801045c:	b508      	push	{r3, lr}
    const JSON_String *str = json_value_get_string_desc(value);
 801045e:	f7ff fc13 	bl	800fc88 <json_value_get_string_desc>
    return str ? str->length : 0;
 8010462:	b100      	cbz	r0, 8010466 <json_value_get_string_len+0xa>
 8010464:	6840      	ldr	r0, [r0, #4]
}
 8010466:	bd08      	pop	{r3, pc}

08010468 <json_value_get_number>:
    return value ? value->type : JSONError;
 8010468:	b128      	cbz	r0, 8010476 <json_value_get_number+0xe>

double json_value_get_number(const JSON_Value *value) {
    return json_value_get_type(value) == JSONNumber ? value->value.number : 0;
 801046a:	6843      	ldr	r3, [r0, #4]
 801046c:	2b03      	cmp	r3, #3
 801046e:	d102      	bne.n	8010476 <json_value_get_number+0xe>
 8010470:	ed90 0b02 	vldr	d0, [r0, #8]
 8010474:	4770      	bx	lr
 8010476:	ed9f 0b02 	vldr	d0, [pc, #8]	; 8010480 <json_value_get_number+0x18>
}
 801047a:	4770      	bx	lr
 801047c:	f3af 8000 	nop.w
	...

08010488 <json_object_dotget_number>:
double json_object_dotget_number(const JSON_Object *object, const char *name) {
 8010488:	b508      	push	{r3, lr}
    return json_value_get_number(json_object_dotget_value(object, name));
 801048a:	f7ff ffa4 	bl	80103d6 <json_object_dotget_value>
}
 801048e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return json_value_get_number(json_object_dotget_value(object, name));
 8010492:	f7ff bfe9 	b.w	8010468 <json_value_get_number>

08010496 <json_value_get_boolean>:
    return value ? value->type : JSONError;
 8010496:	b120      	cbz	r0, 80104a2 <json_value_get_boolean+0xc>

int json_value_get_boolean(const JSON_Value *value) {
    return json_value_get_type(value) == JSONBoolean ? value->value.boolean : -1;
 8010498:	6843      	ldr	r3, [r0, #4]
 801049a:	2b06      	cmp	r3, #6
 801049c:	d101      	bne.n	80104a2 <json_value_get_boolean+0xc>
 801049e:	6880      	ldr	r0, [r0, #8]
 80104a0:	4770      	bx	lr
 80104a2:	f04f 30ff 	mov.w	r0, #4294967295
}
 80104a6:	4770      	bx	lr

080104a8 <json_serialize_to_buffer_r>:
{
 80104a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80104ac:	b085      	sub	sp, #20
 80104ae:	461e      	mov	r6, r3
 80104b0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80104b2:	9303      	str	r3, [sp, #12]
 80104b4:	4693      	mov	fp, r2
 80104b6:	460c      	mov	r4, r1
    return value ? value->type : JSONError;
 80104b8:	4602      	mov	r2, r0
 80104ba:	b910      	cbnz	r0, 80104c2 <json_serialize_to_buffer_r+0x1a>
 80104bc:	f04f 30ff 	mov.w	r0, #4294967295
 80104c0:	e071      	b.n	80105a6 <json_serialize_to_buffer_r+0xfe>
 80104c2:	6843      	ldr	r3, [r0, #4]
 80104c4:	3b01      	subs	r3, #1
 80104c6:	2b05      	cmp	r3, #5
 80104c8:	d8f8      	bhi.n	80104bc <json_serialize_to_buffer_r+0x14>
 80104ca:	e8df f013 	tbh	[pc, r3, lsl #1]
 80104ce:	0137      	.short	0x0137
 80104d0:	0129010e 	.word	0x0129010e
 80104d4:	00060071 	.word	0x00060071
 80104d8:	011f      	.short	0x011f
            array = json_value_get_array(value);
 80104da:	f7ff ffa3 	bl	8010424 <json_value_get_array>
    return array ? array->count : 0;
 80104de:	4607      	mov	r7, r0
 80104e0:	2800      	cmp	r0, #0
 80104e2:	d063      	beq.n	80105ac <json_serialize_to_buffer_r+0x104>
 80104e4:	f8d0 9008 	ldr.w	r9, [r0, #8]
            APPEND_STRING("[");
 80104e8:	4995      	ldr	r1, [pc, #596]	; (8010740 <json_serialize_to_buffer_r+0x298>)
 80104ea:	4620      	mov	r0, r4
 80104ec:	f7ff fd1a 	bl	800ff24 <append_string>
 80104f0:	1e05      	subs	r5, r0, #0
 80104f2:	dbe3      	blt.n	80104bc <json_serialize_to_buffer_r+0x14>
 80104f4:	b104      	cbz	r4, 80104f8 <json_serialize_to_buffer_r+0x50>
 80104f6:	442c      	add	r4, r5
            if (count > 0 && is_pretty) {
 80104f8:	f1b9 0f00 	cmp.w	r9, #0
 80104fc:	d04c      	beq.n	8010598 <json_serialize_to_buffer_r+0xf0>
 80104fe:	b146      	cbz	r6, 8010512 <json_serialize_to_buffer_r+0x6a>
                APPEND_STRING("\n");
 8010500:	4990      	ldr	r1, [pc, #576]	; (8010744 <json_serialize_to_buffer_r+0x29c>)
 8010502:	4620      	mov	r0, r4
 8010504:	f7ff fd0e 	bl	800ff24 <append_string>
 8010508:	2800      	cmp	r0, #0
 801050a:	dbd7      	blt.n	80104bc <json_serialize_to_buffer_r+0x14>
 801050c:	b104      	cbz	r4, 8010510 <json_serialize_to_buffer_r+0x68>
 801050e:	4404      	add	r4, r0
 8010510:	4405      	add	r5, r0
    return array ? array->count : 0;
 8010512:	f04f 0800 	mov.w	r8, #0
 8010516:	f10b 0a01 	add.w	sl, fp, #1
                if (is_pretty) {
 801051a:	b146      	cbz	r6, 801052e <json_serialize_to_buffer_r+0x86>
                    APPEND_INDENT(level+1);
 801051c:	4651      	mov	r1, sl
 801051e:	4620      	mov	r0, r4
 8010520:	f7ff fd0a 	bl	800ff38 <append_indent>
 8010524:	2800      	cmp	r0, #0
 8010526:	dbc9      	blt.n	80104bc <json_serialize_to_buffer_r+0x14>
 8010528:	b104      	cbz	r4, 801052c <json_serialize_to_buffer_r+0x84>
 801052a:	4404      	add	r4, r0
 801052c:	4405      	add	r5, r0
                temp_value = json_array_get_value(array, i);
 801052e:	4641      	mov	r1, r8
 8010530:	4638      	mov	r0, r7
 8010532:	f7ff ff3e 	bl	80103b2 <json_array_get_value>
                written = json_serialize_to_buffer_r(temp_value, buf, level+1, is_pretty, num_buf);
 8010536:	9b03      	ldr	r3, [sp, #12]
 8010538:	9300      	str	r3, [sp, #0]
 801053a:	4652      	mov	r2, sl
 801053c:	4633      	mov	r3, r6
 801053e:	4621      	mov	r1, r4
 8010540:	f7ff ffb2 	bl	80104a8 <json_serialize_to_buffer_r>
                if (written < 0) {
 8010544:	2800      	cmp	r0, #0
 8010546:	dbb9      	blt.n	80104bc <json_serialize_to_buffer_r+0x14>
                if (buf != NULL) {
 8010548:	b104      	cbz	r4, 801054c <json_serialize_to_buffer_r+0xa4>
                    buf += written;
 801054a:	4404      	add	r4, r0
                if (i < (count - 1)) {
 801054c:	f109 33ff 	add.w	r3, r9, #4294967295
 8010550:	4543      	cmp	r3, r8
                written_total += written;
 8010552:	4405      	add	r5, r0
                if (i < (count - 1)) {
 8010554:	d908      	bls.n	8010568 <json_serialize_to_buffer_r+0xc0>
                    APPEND_STRING(",");
 8010556:	497c      	ldr	r1, [pc, #496]	; (8010748 <json_serialize_to_buffer_r+0x2a0>)
 8010558:	4620      	mov	r0, r4
 801055a:	f7ff fce3 	bl	800ff24 <append_string>
 801055e:	2800      	cmp	r0, #0
 8010560:	dbac      	blt.n	80104bc <json_serialize_to_buffer_r+0x14>
 8010562:	b104      	cbz	r4, 8010566 <json_serialize_to_buffer_r+0xbe>
 8010564:	4404      	add	r4, r0
 8010566:	4405      	add	r5, r0
                if (is_pretty) {
 8010568:	b146      	cbz	r6, 801057c <json_serialize_to_buffer_r+0xd4>
                    APPEND_STRING("\n");
 801056a:	4976      	ldr	r1, [pc, #472]	; (8010744 <json_serialize_to_buffer_r+0x29c>)
 801056c:	4620      	mov	r0, r4
 801056e:	f7ff fcd9 	bl	800ff24 <append_string>
 8010572:	2800      	cmp	r0, #0
 8010574:	dba2      	blt.n	80104bc <json_serialize_to_buffer_r+0x14>
 8010576:	b104      	cbz	r4, 801057a <json_serialize_to_buffer_r+0xd2>
 8010578:	4404      	add	r4, r0
 801057a:	4405      	add	r5, r0
            for (i = 0; i < count; i++) {
 801057c:	f108 0801 	add.w	r8, r8, #1
 8010580:	45c8      	cmp	r8, r9
 8010582:	d1ca      	bne.n	801051a <json_serialize_to_buffer_r+0x72>
            if (count > 0 && is_pretty) {
 8010584:	b146      	cbz	r6, 8010598 <json_serialize_to_buffer_r+0xf0>
                APPEND_INDENT(level);
 8010586:	4659      	mov	r1, fp
 8010588:	4620      	mov	r0, r4
 801058a:	f7ff fcd5 	bl	800ff38 <append_indent>
 801058e:	2800      	cmp	r0, #0
 8010590:	db94      	blt.n	80104bc <json_serialize_to_buffer_r+0x14>
 8010592:	b104      	cbz	r4, 8010596 <json_serialize_to_buffer_r+0xee>
 8010594:	4404      	add	r4, r0
 8010596:	4405      	add	r5, r0
            APPEND_STRING("]");
 8010598:	496c      	ldr	r1, [pc, #432]	; (801074c <json_serialize_to_buffer_r+0x2a4>)
 801059a:	4620      	mov	r0, r4
 801059c:	f7ff fcc2 	bl	800ff24 <append_string>
 80105a0:	2800      	cmp	r0, #0
 80105a2:	db8b      	blt.n	80104bc <json_serialize_to_buffer_r+0x14>
 80105a4:	4428      	add	r0, r5
}
 80105a6:	b005      	add	sp, #20
 80105a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return array ? array->count : 0;
 80105ac:	4681      	mov	r9, r0
 80105ae:	e79b      	b.n	80104e8 <json_serialize_to_buffer_r+0x40>
            object = json_value_get_object(value);
 80105b0:	f7ff ff09 	bl	80103c6 <json_value_get_object>
    return object ? object->count : 0;
 80105b4:	4605      	mov	r5, r0
 80105b6:	2800      	cmp	r0, #0
 80105b8:	f000 8095 	beq.w	80106e6 <json_serialize_to_buffer_r+0x23e>
 80105bc:	f8d0 a00c 	ldr.w	sl, [r0, #12]
            APPEND_STRING("{");
 80105c0:	4963      	ldr	r1, [pc, #396]	; (8010750 <json_serialize_to_buffer_r+0x2a8>)
 80105c2:	4620      	mov	r0, r4
 80105c4:	f7ff fcae 	bl	800ff24 <append_string>
 80105c8:	1e07      	subs	r7, r0, #0
 80105ca:	f6ff af77 	blt.w	80104bc <json_serialize_to_buffer_r+0x14>
 80105ce:	b104      	cbz	r4, 80105d2 <json_serialize_to_buffer_r+0x12a>
 80105d0:	443c      	add	r4, r7
            if (count > 0 && is_pretty) {
 80105d2:	f1ba 0f00 	cmp.w	sl, #0
 80105d6:	d07d      	beq.n	80106d4 <json_serialize_to_buffer_r+0x22c>
 80105d8:	b14e      	cbz	r6, 80105ee <json_serialize_to_buffer_r+0x146>
                APPEND_STRING("\n");
 80105da:	495a      	ldr	r1, [pc, #360]	; (8010744 <json_serialize_to_buffer_r+0x29c>)
 80105dc:	4620      	mov	r0, r4
 80105de:	f7ff fca1 	bl	800ff24 <append_string>
 80105e2:	2800      	cmp	r0, #0
 80105e4:	f6ff af6a 	blt.w	80104bc <json_serialize_to_buffer_r+0x14>
 80105e8:	b104      	cbz	r4, 80105ec <json_serialize_to_buffer_r+0x144>
 80105ea:	4404      	add	r4, r0
 80105ec:	4407      	add	r7, r0
    return object ? object->count : 0;
 80105ee:	f04f 0900 	mov.w	r9, #0
                key = json_object_get_name(object, i);
 80105f2:	4649      	mov	r1, r9
 80105f4:	4628      	mov	r0, r5
 80105f6:	f7ff fed2 	bl	801039e <json_object_get_name>
                if (key == NULL) {
 80105fa:	4680      	mov	r8, r0
 80105fc:	2800      	cmp	r0, #0
 80105fe:	f43f af5d 	beq.w	80104bc <json_serialize_to_buffer_r+0x14>
                if (is_pretty) {
 8010602:	b156      	cbz	r6, 801061a <json_serialize_to_buffer_r+0x172>
                    APPEND_INDENT(level+1);
 8010604:	f10b 0101 	add.w	r1, fp, #1
 8010608:	4620      	mov	r0, r4
 801060a:	f7ff fc95 	bl	800ff38 <append_indent>
 801060e:	2800      	cmp	r0, #0
 8010610:	f6ff af54 	blt.w	80104bc <json_serialize_to_buffer_r+0x14>
 8010614:	b104      	cbz	r4, 8010618 <json_serialize_to_buffer_r+0x170>
 8010616:	4404      	add	r4, r0
 8010618:	4407      	add	r7, r0
                written = json_serialize_string(key, strlen(key), buf);
 801061a:	4640      	mov	r0, r8
 801061c:	f7f3 fe62 	bl	80042e4 <strlen>
 8010620:	4622      	mov	r2, r4
 8010622:	4601      	mov	r1, r0
 8010624:	4640      	mov	r0, r8
 8010626:	f7ff fca5 	bl	800ff74 <json_serialize_string>
                if (written < 0) {
 801062a:	2800      	cmp	r0, #0
 801062c:	f6ff af46 	blt.w	80104bc <json_serialize_to_buffer_r+0x14>
                if (buf != NULL) {
 8010630:	b104      	cbz	r4, 8010634 <json_serialize_to_buffer_r+0x18c>
                    buf += written;
 8010632:	4404      	add	r4, r0
                APPEND_STRING(":");
 8010634:	4947      	ldr	r1, [pc, #284]	; (8010754 <json_serialize_to_buffer_r+0x2ac>)
                written_total += written;
 8010636:	4407      	add	r7, r0
                APPEND_STRING(":");
 8010638:	4620      	mov	r0, r4
 801063a:	f7ff fc73 	bl	800ff24 <append_string>
 801063e:	2800      	cmp	r0, #0
 8010640:	f6ff af3c 	blt.w	80104bc <json_serialize_to_buffer_r+0x14>
 8010644:	b104      	cbz	r4, 8010648 <json_serialize_to_buffer_r+0x1a0>
 8010646:	4404      	add	r4, r0
 8010648:	4407      	add	r7, r0
                if (is_pretty) {
 801064a:	b14e      	cbz	r6, 8010660 <json_serialize_to_buffer_r+0x1b8>
                    APPEND_STRING(" ");
 801064c:	4942      	ldr	r1, [pc, #264]	; (8010758 <json_serialize_to_buffer_r+0x2b0>)
 801064e:	4620      	mov	r0, r4
 8010650:	f7ff fc68 	bl	800ff24 <append_string>
 8010654:	2800      	cmp	r0, #0
 8010656:	f6ff af31 	blt.w	80104bc <json_serialize_to_buffer_r+0x14>
 801065a:	b104      	cbz	r4, 801065e <json_serialize_to_buffer_r+0x1b6>
 801065c:	4404      	add	r4, r0
 801065e:	4407      	add	r7, r0
                temp_value = json_object_get_value(object, key);
 8010660:	4641      	mov	r1, r8
 8010662:	4628      	mov	r0, r5
 8010664:	f7ff fe88 	bl	8010378 <json_object_get_value>
                written = json_serialize_to_buffer_r(temp_value, buf, level+1, is_pretty, num_buf);
 8010668:	9b03      	ldr	r3, [sp, #12]
 801066a:	9300      	str	r3, [sp, #0]
 801066c:	f10b 0201 	add.w	r2, fp, #1
 8010670:	4633      	mov	r3, r6
 8010672:	4621      	mov	r1, r4
 8010674:	f7ff ff18 	bl	80104a8 <json_serialize_to_buffer_r>
                if (written < 0) {
 8010678:	2800      	cmp	r0, #0
 801067a:	f6ff af1f 	blt.w	80104bc <json_serialize_to_buffer_r+0x14>
                if (buf != NULL) {
 801067e:	b104      	cbz	r4, 8010682 <json_serialize_to_buffer_r+0x1da>
                    buf += written;
 8010680:	4404      	add	r4, r0
                if (i < (count - 1)) {
 8010682:	f10a 33ff 	add.w	r3, sl, #4294967295
 8010686:	454b      	cmp	r3, r9
                written_total += written;
 8010688:	4407      	add	r7, r0
                if (i < (count - 1)) {
 801068a:	d909      	bls.n	80106a0 <json_serialize_to_buffer_r+0x1f8>
                    APPEND_STRING(",");
 801068c:	492e      	ldr	r1, [pc, #184]	; (8010748 <json_serialize_to_buffer_r+0x2a0>)
 801068e:	4620      	mov	r0, r4
 8010690:	f7ff fc48 	bl	800ff24 <append_string>
 8010694:	2800      	cmp	r0, #0
 8010696:	f6ff af11 	blt.w	80104bc <json_serialize_to_buffer_r+0x14>
 801069a:	b104      	cbz	r4, 801069e <json_serialize_to_buffer_r+0x1f6>
 801069c:	4404      	add	r4, r0
 801069e:	4407      	add	r7, r0
                if (is_pretty) {
 80106a0:	b14e      	cbz	r6, 80106b6 <json_serialize_to_buffer_r+0x20e>
                    APPEND_STRING("\n");
 80106a2:	4928      	ldr	r1, [pc, #160]	; (8010744 <json_serialize_to_buffer_r+0x29c>)
 80106a4:	4620      	mov	r0, r4
 80106a6:	f7ff fc3d 	bl	800ff24 <append_string>
 80106aa:	2800      	cmp	r0, #0
 80106ac:	f6ff af06 	blt.w	80104bc <json_serialize_to_buffer_r+0x14>
 80106b0:	b104      	cbz	r4, 80106b4 <json_serialize_to_buffer_r+0x20c>
 80106b2:	4404      	add	r4, r0
 80106b4:	4407      	add	r7, r0
            for (i = 0; i < count; i++) {
 80106b6:	f109 0901 	add.w	r9, r9, #1
 80106ba:	45ca      	cmp	sl, r9
 80106bc:	d199      	bne.n	80105f2 <json_serialize_to_buffer_r+0x14a>
            if (count > 0 && is_pretty) {
 80106be:	b14e      	cbz	r6, 80106d4 <json_serialize_to_buffer_r+0x22c>
                APPEND_INDENT(level);
 80106c0:	4659      	mov	r1, fp
 80106c2:	4620      	mov	r0, r4
 80106c4:	f7ff fc38 	bl	800ff38 <append_indent>
 80106c8:	2800      	cmp	r0, #0
 80106ca:	f6ff aef7 	blt.w	80104bc <json_serialize_to_buffer_r+0x14>
 80106ce:	b104      	cbz	r4, 80106d2 <json_serialize_to_buffer_r+0x22a>
 80106d0:	4404      	add	r4, r0
 80106d2:	4407      	add	r7, r0
            APPEND_STRING("}");
 80106d4:	4921      	ldr	r1, [pc, #132]	; (801075c <json_serialize_to_buffer_r+0x2b4>)
 80106d6:	4620      	mov	r0, r4
 80106d8:	f7ff fc24 	bl	800ff24 <append_string>
 80106dc:	2800      	cmp	r0, #0
 80106de:	f6ff aeed 	blt.w	80104bc <json_serialize_to_buffer_r+0x14>
 80106e2:	4438      	add	r0, r7
            return written_total;
 80106e4:	e75f      	b.n	80105a6 <json_serialize_to_buffer_r+0xfe>
    return object ? object->count : 0;
 80106e6:	4682      	mov	sl, r0
 80106e8:	e76a      	b.n	80105c0 <json_serialize_to_buffer_r+0x118>
            string = json_value_get_string(value);
 80106ea:	f7ff feaa 	bl	8010442 <json_value_get_string>
            if (string == NULL) {
 80106ee:	4605      	mov	r5, r0
 80106f0:	2800      	cmp	r0, #0
 80106f2:	f43f aee3 	beq.w	80104bc <json_serialize_to_buffer_r+0x14>
            len = json_value_get_string_len(value);
 80106f6:	4610      	mov	r0, r2
 80106f8:	f7ff feb0 	bl	801045c <json_value_get_string_len>
            written = json_serialize_string(string, len, buf);
 80106fc:	4622      	mov	r2, r4
            len = json_value_get_string_len(value);
 80106fe:	4601      	mov	r1, r0
            written = json_serialize_string(string, len, buf);
 8010700:	4628      	mov	r0, r5
 8010702:	f7ff fc37 	bl	800ff74 <json_serialize_string>
            APPEND_STRING("null");
 8010706:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 801070a:	e74c      	b.n	80105a6 <json_serialize_to_buffer_r+0xfe>
            if (json_value_get_boolean(value)) {
 801070c:	f7ff fec3 	bl	8010496 <json_value_get_boolean>
 8010710:	b120      	cbz	r0, 801071c <json_serialize_to_buffer_r+0x274>
                APPEND_STRING("true");
 8010712:	4913      	ldr	r1, [pc, #76]	; (8010760 <json_serialize_to_buffer_r+0x2b8>)
            APPEND_STRING("null");
 8010714:	4620      	mov	r0, r4
 8010716:	f7ff fc05 	bl	800ff24 <append_string>
 801071a:	e7f4      	b.n	8010706 <json_serialize_to_buffer_r+0x25e>
                APPEND_STRING("false");
 801071c:	4911      	ldr	r1, [pc, #68]	; (8010764 <json_serialize_to_buffer_r+0x2bc>)
 801071e:	e7f9      	b.n	8010714 <json_serialize_to_buffer_r+0x26c>
            num = json_value_get_number(value);
 8010720:	f7ff fea2 	bl	8010468 <json_value_get_number>
            written = sprintf(num_buf, FLOAT_FORMAT, num);
 8010724:	9803      	ldr	r0, [sp, #12]
 8010726:	4910      	ldr	r1, [pc, #64]	; (8010768 <json_serialize_to_buffer_r+0x2c0>)
            num = json_value_get_number(value);
 8010728:	ec53 2b10 	vmov	r2, r3, d0
            written = sprintf(num_buf, FLOAT_FORMAT, num);
 801072c:	2c00      	cmp	r4, #0
 801072e:	bf18      	it	ne
 8010730:	4620      	movne	r0, r4
}
 8010732:	b005      	add	sp, #20
 8010734:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
            written = sprintf(num_buf, FLOAT_FORMAT, num);
 8010738:	f009 bf5c 	b.w	801a5f4 <siprintf>
            APPEND_STRING("null");
 801073c:	490b      	ldr	r1, [pc, #44]	; (801076c <json_serialize_to_buffer_r+0x2c4>)
 801073e:	e7e9      	b.n	8010714 <json_serialize_to_buffer_r+0x26c>
 8010740:	08022048 	.word	0x08022048
 8010744:	0802394c 	.word	0x0802394c
 8010748:	08021918 	.word	0x08021918
 801074c:	080225e1 	.word	0x080225e1
 8010750:	0802204a 	.word	0x0802204a
 8010754:	0802204c 	.word	0x0802204c
 8010758:	08021f71 	.word	0x08021f71
 801075c:	0802204e 	.word	0x0802204e
 8010760:	08021bf2 	.word	0x08021bf2
 8010764:	08021bf7 	.word	0x08021bf7
 8010768:	08022050 	.word	0x08022050
 801076c:	08022057 	.word	0x08022057

08010770 <json_value_free>:

JSON_Value * json_value_get_parent (const JSON_Value *value) {
    return value ? value->parent : NULL;
}

void json_value_free(JSON_Value *value) {
 8010770:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    return value ? value->type : JSONError;
 8010774:	4604      	mov	r4, r0
 8010776:	b1c8      	cbz	r0, 80107ac <json_value_free+0x3c>
 8010778:	6843      	ldr	r3, [r0, #4]
    switch (json_value_get_type(value)) {
 801077a:	2b04      	cmp	r3, #4
 801077c:	d007      	beq.n	801078e <json_value_free+0x1e>
 801077e:	2b05      	cmp	r3, #5
 8010780:	d024      	beq.n	80107cc <json_value_free+0x5c>
 8010782:	2b02      	cmp	r3, #2
 8010784:	d112      	bne.n	80107ac <json_value_free+0x3c>
        case JSONObject:
            json_object_free(value->value.object);
            break;
        case JSONString:
            parson_free(value->value.string.chars);
 8010786:	4b1a      	ldr	r3, [pc, #104]	; (80107f0 <json_value_free+0x80>)
 8010788:	6880      	ldr	r0, [r0, #8]
 801078a:	685b      	ldr	r3, [r3, #4]
 801078c:	e00d      	b.n	80107aa <json_value_free+0x3a>
            json_object_free(value->value.object);
 801078e:	6885      	ldr	r5, [r0, #8]
    for (i = 0; i < object->count; i++) {
 8010790:	4f17      	ldr	r7, [pc, #92]	; (80107f0 <json_value_free+0x80>)
 8010792:	2600      	movs	r6, #0
 8010794:	68ea      	ldr	r2, [r5, #12]
 8010796:	687b      	ldr	r3, [r7, #4]
 8010798:	6868      	ldr	r0, [r5, #4]
 801079a:	4296      	cmp	r6, r2
 801079c:	d30c      	bcc.n	80107b8 <json_value_free+0x48>
    parson_free(object->names);
 801079e:	4798      	blx	r3
    parson_free(object->values);
 80107a0:	687b      	ldr	r3, [r7, #4]
 80107a2:	68a8      	ldr	r0, [r5, #8]
 80107a4:	4798      	blx	r3
    parson_free(object);
 80107a6:	687b      	ldr	r3, [r7, #4]
 80107a8:	4628      	mov	r0, r5
    parson_free(array);
 80107aa:	4798      	blx	r3
            json_array_free(value->value.array);
            break;
        default:
            break;
    }
    parson_free(value);
 80107ac:	4b10      	ldr	r3, [pc, #64]	; (80107f0 <json_value_free+0x80>)
 80107ae:	4620      	mov	r0, r4
 80107b0:	685b      	ldr	r3, [r3, #4]
}
 80107b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    parson_free(value);
 80107b6:	4718      	bx	r3
        parson_free(object->names[i]);
 80107b8:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
 80107bc:	4798      	blx	r3
        json_value_free(object->values[i]);
 80107be:	68ab      	ldr	r3, [r5, #8]
 80107c0:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80107c4:	f7ff ffd4 	bl	8010770 <json_value_free>
    for (i = 0; i < object->count; i++) {
 80107c8:	3601      	adds	r6, #1
 80107ca:	e7e3      	b.n	8010794 <json_value_free+0x24>
            json_array_free(value->value.array);
 80107cc:	6886      	ldr	r6, [r0, #8]
    for (i = 0; i < array->count; i++) {
 80107ce:	2500      	movs	r5, #0
 80107d0:	e9d6 0301 	ldrd	r0, r3, [r6, #4]
 80107d4:	429d      	cmp	r5, r3
 80107d6:	d305      	bcc.n	80107e4 <json_value_free+0x74>
    parson_free(array->items);
 80107d8:	4d05      	ldr	r5, [pc, #20]	; (80107f0 <json_value_free+0x80>)
 80107da:	686b      	ldr	r3, [r5, #4]
 80107dc:	4798      	blx	r3
    parson_free(array);
 80107de:	686b      	ldr	r3, [r5, #4]
 80107e0:	4630      	mov	r0, r6
 80107e2:	e7e2      	b.n	80107aa <json_value_free+0x3a>
        json_value_free(array->items[i]);
 80107e4:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 80107e8:	f7ff ffc2 	bl	8010770 <json_value_free>
    for (i = 0; i < array->count; i++) {
 80107ec:	3501      	adds	r5, #1
 80107ee:	e7ef      	b.n	80107d0 <json_value_free+0x60>
 80107f0:	200003e8 	.word	0x200003e8

080107f4 <json_object_remove_internal>:
static JSON_Status json_object_remove_internal(JSON_Object *object, const char *name, int free_value) {
 80107f4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80107f8:	460f      	mov	r7, r1
 80107fa:	4690      	mov	r8, r2
    if (object == NULL || json_object_get_value(object, name) == NULL) {
 80107fc:	4604      	mov	r4, r0
 80107fe:	b138      	cbz	r0, 8010810 <json_object_remove_internal+0x1c>
 8010800:	f7ff fdba 	bl	8010378 <json_object_get_value>
 8010804:	b120      	cbz	r0, 8010810 <json_object_remove_internal+0x1c>
    return object ? object->count : 0;
 8010806:	f8d4 900c 	ldr.w	r9, [r4, #12]
    for (i = 0; i < json_object_get_count(object); i++) {
 801080a:	2600      	movs	r6, #0
 801080c:	454e      	cmp	r6, r9
 801080e:	d102      	bne.n	8010816 <json_object_remove_internal+0x22>
        return JSONFailure;
 8010810:	f04f 35ff 	mov.w	r5, #4294967295
 8010814:	e027      	b.n	8010866 <json_object_remove_internal+0x72>
        if (strcmp(object->names[i], name) == 0) {
 8010816:	6863      	ldr	r3, [r4, #4]
 8010818:	f853 b026 	ldr.w	fp, [r3, r6, lsl #2]
 801081c:	4639      	mov	r1, r7
 801081e:	4658      	mov	r0, fp
 8010820:	f7f3 fd56 	bl	80042d0 <strcmp>
 8010824:	ea4f 0a86 	mov.w	sl, r6, lsl #2
 8010828:	4605      	mov	r5, r0
 801082a:	b9f8      	cbnz	r0, 801086c <json_object_remove_internal+0x78>
            parson_free(object->names[i]);
 801082c:	4b10      	ldr	r3, [pc, #64]	; (8010870 <json_object_remove_internal+0x7c>)
 801082e:	4658      	mov	r0, fp
 8010830:	685b      	ldr	r3, [r3, #4]
 8010832:	4798      	blx	r3
            if (free_value) {
 8010834:	f1b8 0f00 	cmp.w	r8, #0
 8010838:	d004      	beq.n	8010844 <json_object_remove_internal+0x50>
                json_value_free(object->values[i]);
 801083a:	68a3      	ldr	r3, [r4, #8]
 801083c:	f853 000a 	ldr.w	r0, [r3, sl]
 8010840:	f7ff ff96 	bl	8010770 <json_value_free>
    last_item_index = json_object_get_count(object) - 1;
 8010844:	f109 33ff 	add.w	r3, r9, #4294967295
            if (i != last_item_index) { /* Replace key value pair with one from the end */
 8010848:	429e      	cmp	r6, r3
 801084a:	d009      	beq.n	8010860 <json_object_remove_internal+0x6c>
                object->names[i] = object->names[last_item_index];
 801084c:	6862      	ldr	r2, [r4, #4]
 801084e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8010852:	f842 100a 	str.w	r1, [r2, sl]
                object->values[i] = object->values[last_item_index];
 8010856:	68a2      	ldr	r2, [r4, #8]
 8010858:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801085c:	f842 300a 	str.w	r3, [r2, sl]
            object->count -= 1;
 8010860:	68e3      	ldr	r3, [r4, #12]
 8010862:	3b01      	subs	r3, #1
 8010864:	60e3      	str	r3, [r4, #12]
}
 8010866:	4628      	mov	r0, r5
 8010868:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    for (i = 0; i < json_object_get_count(object); i++) {
 801086c:	3601      	adds	r6, #1
 801086e:	e7cd      	b.n	801080c <json_object_remove_internal+0x18>
 8010870:	200003e8 	.word	0x200003e8

08010874 <json_object_dotremove_internal>:
static JSON_Status json_object_dotremove_internal(JSON_Object *object, const char *name, int free_value) {
 8010874:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010876:	4605      	mov	r5, r0
 8010878:	460c      	mov	r4, r1
 801087a:	4617      	mov	r7, r2
    const char *dot_pos = strchr(name, '.');
 801087c:	212e      	movs	r1, #46	; 0x2e
 801087e:	4620      	mov	r0, r4
 8010880:	f009 ff1b 	bl	801a6ba <strchr>
    if (dot_pos == NULL) {
 8010884:	4606      	mov	r6, r0
 8010886:	b930      	cbnz	r0, 8010896 <json_object_dotremove_internal+0x22>
        return json_object_remove_internal(object, name, free_value);
 8010888:	463a      	mov	r2, r7
 801088a:	4621      	mov	r1, r4
 801088c:	4628      	mov	r0, r5
}
 801088e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
        return json_object_remove_internal(object, name, free_value);
 8010892:	f7ff bfaf 	b.w	80107f4 <json_object_remove_internal>
    temp_value = json_object_getn_value(object, name, dot_pos - name);
 8010896:	1b02      	subs	r2, r0, r4
 8010898:	4621      	mov	r1, r4
 801089a:	4628      	mov	r0, r5
 801089c:	f7ff fa8e 	bl	800fdbc <json_object_getn_value>
    return value ? value->type : JSONError;
 80108a0:	b138      	cbz	r0, 80108b2 <json_object_dotremove_internal+0x3e>
    if (json_value_get_type(temp_value) != JSONObject) {
 80108a2:	6843      	ldr	r3, [r0, #4]
 80108a4:	2b04      	cmp	r3, #4
 80108a6:	d104      	bne.n	80108b2 <json_object_dotremove_internal+0x3e>
    temp_object = json_value_get_object(temp_value);
 80108a8:	f7ff fd8d 	bl	80103c6 <json_value_get_object>
    return json_object_dotremove_internal(temp_object, dot_pos + 1, free_value);
 80108ac:	1c74      	adds	r4, r6, #1
    temp_object = json_value_get_object(temp_value);
 80108ae:	4605      	mov	r5, r0
    return json_object_dotremove_internal(temp_object, dot_pos + 1, free_value);
 80108b0:	e7e4      	b.n	801087c <json_object_dotremove_internal+0x8>
}
 80108b2:	f04f 30ff 	mov.w	r0, #4294967295
 80108b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080108b8 <json_value_init_object>:

JSON_Value * json_value_init_object(void) {
 80108b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    JSON_Value *new_value = (JSON_Value*)parson_malloc(sizeof(JSON_Value));
 80108ba:	4f0e      	ldr	r7, [pc, #56]	; (80108f4 <json_value_init_object+0x3c>)
 80108bc:	2010      	movs	r0, #16
 80108be:	683b      	ldr	r3, [r7, #0]
 80108c0:	4798      	blx	r3
    if (!new_value) {
 80108c2:	4604      	mov	r4, r0
 80108c4:	b168      	cbz	r0, 80108e2 <json_value_init_object+0x2a>
        return NULL;
    }
    new_value->parent = NULL;
    new_value->type = JSONObject;
 80108c6:	2304      	movs	r3, #4
 80108c8:	2600      	movs	r6, #0
 80108ca:	e9c0 6300 	strd	r6, r3, [r0]
    JSON_Object *new_obj = (JSON_Object*)parson_malloc(sizeof(JSON_Object));
 80108ce:	683b      	ldr	r3, [r7, #0]
 80108d0:	2014      	movs	r0, #20
 80108d2:	4798      	blx	r3
    if (new_obj == NULL) {
 80108d4:	4605      	mov	r5, r0
 80108d6:	b930      	cbnz	r0, 80108e6 <json_value_init_object+0x2e>
    new_value->value.object = json_object_init(new_value);
 80108d8:	60a0      	str	r0, [r4, #8]
    if (!new_value->value.object) {
        parson_free(new_value);
 80108da:	687b      	ldr	r3, [r7, #4]
 80108dc:	4620      	mov	r0, r4
 80108de:	4798      	blx	r3
        return NULL;
 80108e0:	462c      	mov	r4, r5
    }
    return new_value;
}
 80108e2:	4620      	mov	r0, r4
 80108e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    new_obj->names = (char**)NULL;
 80108e6:	e9c0 4600 	strd	r4, r6, [r0]
    new_obj->count = 0;
 80108ea:	e9c0 6603 	strd	r6, r6, [r0, #12]
    new_obj->values = (JSON_Value**)NULL;
 80108ee:	6086      	str	r6, [r0, #8]
    new_value->value.object = json_object_init(new_value);
 80108f0:	60a0      	str	r0, [r4, #8]
    if (!new_value->value.object) {
 80108f2:	e7f6      	b.n	80108e2 <json_value_init_object+0x2a>
 80108f4:	200003e8 	.word	0x200003e8

080108f8 <json_value_init_array>:

JSON_Value * json_value_init_array(void) {
 80108f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    JSON_Value *new_value = (JSON_Value*)parson_malloc(sizeof(JSON_Value));
 80108fa:	4f0e      	ldr	r7, [pc, #56]	; (8010934 <json_value_init_array+0x3c>)
 80108fc:	2010      	movs	r0, #16
 80108fe:	683b      	ldr	r3, [r7, #0]
 8010900:	4798      	blx	r3
    if (!new_value) {
 8010902:	4604      	mov	r4, r0
 8010904:	b168      	cbz	r0, 8010922 <json_value_init_array+0x2a>
        return NULL;
    }
    new_value->parent = NULL;
    new_value->type = JSONArray;
 8010906:	2305      	movs	r3, #5
 8010908:	2600      	movs	r6, #0
 801090a:	e9c0 6300 	strd	r6, r3, [r0]
    JSON_Array *new_array = (JSON_Array*)parson_malloc(sizeof(JSON_Array));
 801090e:	683b      	ldr	r3, [r7, #0]
 8010910:	2010      	movs	r0, #16
 8010912:	4798      	blx	r3
    if (new_array == NULL) {
 8010914:	4605      	mov	r5, r0
 8010916:	b930      	cbnz	r0, 8010926 <json_value_init_array+0x2e>
    new_value->value.array = json_array_init(new_value);
 8010918:	60a0      	str	r0, [r4, #8]
    if (!new_value->value.array) {
        parson_free(new_value);
 801091a:	687b      	ldr	r3, [r7, #4]
 801091c:	4620      	mov	r0, r4
 801091e:	4798      	blx	r3
        return NULL;
 8010920:	462c      	mov	r4, r5
    }
    return new_value;
}
 8010922:	4620      	mov	r0, r4
 8010924:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    new_array->items = (JSON_Value**)NULL;
 8010926:	e9c0 4600 	strd	r4, r6, [r0]
    new_array->count = 0;
 801092a:	e9c0 6602 	strd	r6, r6, [r0, #8]
    new_value->value.array = json_array_init(new_value);
 801092e:	60a0      	str	r0, [r4, #8]
    if (!new_value->value.array) {
 8010930:	e7f7      	b.n	8010922 <json_value_init_array+0x2a>
 8010932:	bf00      	nop
 8010934:	200003e8 	.word	0x200003e8

08010938 <json_value_init_string_with_len>:
        return NULL;
    }
    return json_value_init_string_with_len(string, strlen(string));
}

JSON_Value * json_value_init_string_with_len(const char *string, size_t length) {
 8010938:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    char *copy = NULL;
    JSON_Value *value;
    if (string == NULL) {
 801093a:	b918      	cbnz	r0, 8010944 <json_value_init_string_with_len+0xc>
        return NULL;
 801093c:	2400      	movs	r4, #0
    value = json_value_init_string_no_copy(copy, length);
    if (value == NULL) {
        parson_free(copy);
    }
    return value;
}
 801093e:	4620      	mov	r0, r4
 8010940:	b003      	add	sp, #12
 8010942:	bdf0      	pop	{r4, r5, r6, r7, pc}
    const char *string_end =  string + string_len;
 8010944:	1845      	adds	r5, r0, r1
    while (string < string_end) {
 8010946:	4604      	mov	r4, r0
 8010948:	42a5      	cmp	r5, r4
 801094a:	d810      	bhi.n	801096e <json_value_init_string_with_len+0x36>
    copy = parson_strndup(string, length);
 801094c:	9101      	str	r1, [sp, #4]
 801094e:	f7ff f9a3 	bl	800fc98 <parson_strndup>
    if (copy == NULL) {
 8010952:	9901      	ldr	r1, [sp, #4]
 8010954:	4605      	mov	r5, r0
 8010956:	2800      	cmp	r0, #0
 8010958:	d0f0      	beq.n	801093c <json_value_init_string_with_len+0x4>
    value = json_value_init_string_no_copy(copy, length);
 801095a:	f7ff f983 	bl	800fc64 <json_value_init_string_no_copy>
    if (value == NULL) {
 801095e:	4604      	mov	r4, r0
 8010960:	2800      	cmp	r0, #0
 8010962:	d1ec      	bne.n	801093e <json_value_init_string_with_len+0x6>
        parson_free(copy);
 8010964:	4b3e      	ldr	r3, [pc, #248]	; (8010a60 <json_value_init_string_with_len+0x128>)
 8010966:	4628      	mov	r0, r5
 8010968:	685b      	ldr	r3, [r3, #4]
 801096a:	4798      	blx	r3
 801096c:	e7e7      	b.n	801093e <json_value_init_string_with_len+0x6>
    *len = num_bytes_in_utf8_sequence(string[0]);
 801096e:	7823      	ldrb	r3, [r4, #0]
    if (c == 0xC0 || c == 0xC1 || c > 0xF4 || IS_CONT(c)) {
 8010970:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8010974:	b2d2      	uxtb	r2, r2
 8010976:	2a01      	cmp	r2, #1
 8010978:	d9e0      	bls.n	801093c <json_value_init_string_with_len+0x4>
 801097a:	2bf4      	cmp	r3, #244	; 0xf4
 801097c:	d8de      	bhi.n	801093c <json_value_init_string_with_len+0x4>
 801097e:	f003 02c0 	and.w	r2, r3, #192	; 0xc0
 8010982:	2a80      	cmp	r2, #128	; 0x80
 8010984:	d0da      	beq.n	801093c <json_value_init_string_with_len+0x4>
    } else if ((c & 0x80) == 0) {    /* 0xxxxxxx */
 8010986:	061a      	lsls	r2, r3, #24
 8010988:	d530      	bpl.n	80109ec <json_value_init_string_with_len+0xb4>
    } else if ((c & 0xE0) == 0xC0) { /* 110xxxxx */
 801098a:	f003 02e0 	and.w	r2, r3, #224	; 0xe0
 801098e:	2ac0      	cmp	r2, #192	; 0xc0
 8010990:	d02e      	beq.n	80109f0 <json_value_init_string_with_len+0xb8>
    } else if ((c & 0xF0) == 0xE0) { /* 1110xxxx */
 8010992:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8010996:	2ae0      	cmp	r2, #224	; 0xe0
 8010998:	d03e      	beq.n	8010a18 <json_value_init_string_with_len+0xe0>
    } else if ((c & 0xF8) == 0xF0) { /* 11110xxx */
 801099a:	f003 02f8 	and.w	r2, r3, #248	; 0xf8
 801099e:	2af0      	cmp	r2, #240	; 0xf0
 80109a0:	d1cc      	bne.n	801093c <json_value_init_string_with_len+0x4>
    } else if (*len == 4 && IS_CONT(string[1]) && IS_CONT(string[2]) && IS_CONT(string[3])) {
 80109a2:	7867      	ldrb	r7, [r4, #1]
 80109a4:	f007 02c0 	and.w	r2, r7, #192	; 0xc0
 80109a8:	2a80      	cmp	r2, #128	; 0x80
 80109aa:	d1c7      	bne.n	801093c <json_value_init_string_with_len+0x4>
 80109ac:	78a6      	ldrb	r6, [r4, #2]
 80109ae:	f006 02c0 	and.w	r2, r6, #192	; 0xc0
 80109b2:	2a80      	cmp	r2, #128	; 0x80
 80109b4:	d1c2      	bne.n	801093c <json_value_init_string_with_len+0x4>
 80109b6:	78e2      	ldrb	r2, [r4, #3]
 80109b8:	f002 0cc0 	and.w	ip, r2, #192	; 0xc0
 80109bc:	f1bc 0f80 	cmp.w	ip, #128	; 0x80
 80109c0:	d1bc      	bne.n	801093c <json_value_init_string_with_len+0x4>
        cp = string[0] & 0x7;
 80109c2:	f003 0307 	and.w	r3, r3, #7
        cp = (cp << 6) | (string[1] & 0x3F);
 80109c6:	f007 073f 	and.w	r7, r7, #63	; 0x3f
 80109ca:	ea47 1383 	orr.w	r3, r7, r3, lsl #6
        cp = (cp << 6) | (string[2] & 0x3F);
 80109ce:	f006 063f 	and.w	r6, r6, #63	; 0x3f
 80109d2:	ea46 1683 	orr.w	r6, r6, r3, lsl #6
        cp = (cp << 6) | (string[3] & 0x3F);
 80109d6:	f002 033f 	and.w	r3, r2, #63	; 0x3f
 80109da:	ea43 1386 	orr.w	r3, r3, r6, lsl #6
 80109de:	2204      	movs	r2, #4
 80109e0:	e02f      	b.n	8010a42 <json_value_init_string_with_len+0x10a>
    if (cp > 0x10FFFF) {
 80109e2:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 80109e6:	d2a9      	bcs.n	801093c <json_value_init_string_with_len+0x4>
        string += len;
 80109e8:	4414      	add	r4, r2
 80109ea:	e7ad      	b.n	8010948 <json_value_init_string_with_len+0x10>
        return 1;
 80109ec:	2201      	movs	r2, #1
 80109ee:	e7fb      	b.n	80109e8 <json_value_init_string_with_len+0xb0>
    } else if (*len == 2 && IS_CONT(string[1])) {
 80109f0:	7862      	ldrb	r2, [r4, #1]
 80109f2:	f002 06c0 	and.w	r6, r2, #192	; 0xc0
 80109f6:	2e80      	cmp	r6, #128	; 0x80
 80109f8:	d1a0      	bne.n	801093c <json_value_init_string_with_len+0x4>
        cp = string[0] & 0x1F;
 80109fa:	f003 061f 	and.w	r6, r3, #31
        cp = (cp << 6) | (string[1] & 0x3F);
 80109fe:	f002 033f 	and.w	r3, r2, #63	; 0x3f
 8010a02:	ea43 1386 	orr.w	r3, r3, r6, lsl #6
    if ((cp < 0x80    && *len > 1) ||
 8010a06:	2b7f      	cmp	r3, #127	; 0x7f
 8010a08:	d998      	bls.n	801093c <json_value_init_string_with_len+0x4>
 8010a0a:	2202      	movs	r2, #2
    if (cp >= 0xD800 && cp <= 0xDFFF) {
 8010a0c:	f5a3 4358 	sub.w	r3, r3, #55296	; 0xd800
 8010a10:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8010a14:	d392      	bcc.n	801093c <json_value_init_string_with_len+0x4>
 8010a16:	e7e7      	b.n	80109e8 <json_value_init_string_with_len+0xb0>
    } else if (*len == 3 && IS_CONT(string[1]) && IS_CONT(string[2])) {
 8010a18:	7866      	ldrb	r6, [r4, #1]
 8010a1a:	f006 02c0 	and.w	r2, r6, #192	; 0xc0
 8010a1e:	2a80      	cmp	r2, #128	; 0x80
 8010a20:	d18c      	bne.n	801093c <json_value_init_string_with_len+0x4>
 8010a22:	78a2      	ldrb	r2, [r4, #2]
 8010a24:	f002 07c0 	and.w	r7, r2, #192	; 0xc0
 8010a28:	2f80      	cmp	r7, #128	; 0x80
 8010a2a:	d187      	bne.n	801093c <json_value_init_string_with_len+0x4>
        cp = ((unsigned char)string[0]) & 0xF;
 8010a2c:	f003 030f 	and.w	r3, r3, #15
        cp = (cp << 6) | (string[1] & 0x3F);
 8010a30:	f006 063f 	and.w	r6, r6, #63	; 0x3f
 8010a34:	ea46 1683 	orr.w	r6, r6, r3, lsl #6
        cp = (cp << 6) | (string[2] & 0x3F);
 8010a38:	f002 033f 	and.w	r3, r2, #63	; 0x3f
 8010a3c:	ea43 1386 	orr.w	r3, r3, r6, lsl #6
 8010a40:	2203      	movs	r2, #3
    if ((cp < 0x80    && *len > 1) ||
 8010a42:	2b7f      	cmp	r3, #127	; 0x7f
 8010a44:	f67f af7a 	bls.w	801093c <json_value_init_string_with_len+0x4>
 8010a48:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8010a4c:	f4ff af76 	bcc.w	801093c <json_value_init_string_with_len+0x4>
        (cp < 0x800   && *len > 2) ||
 8010a50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010a54:	d2c5      	bcs.n	80109e2 <json_value_init_string_with_len+0xaa>
        (cp < 0x10000 && *len > 3)) {
 8010a56:	2a04      	cmp	r2, #4
 8010a58:	f43f af70 	beq.w	801093c <json_value_init_string_with_len+0x4>
 8010a5c:	2203      	movs	r2, #3
 8010a5e:	e7d5      	b.n	8010a0c <json_value_init_string_with_len+0xd4>
 8010a60:	200003e8 	.word	0x200003e8

08010a64 <json_value_init_string>:
JSON_Value * json_value_init_string(const char *string) {
 8010a64:	b510      	push	{r4, lr}
    if (string == NULL) {
 8010a66:	4604      	mov	r4, r0
 8010a68:	b138      	cbz	r0, 8010a7a <json_value_init_string+0x16>
    return json_value_init_string_with_len(string, strlen(string));
 8010a6a:	f7f3 fc3b 	bl	80042e4 <strlen>
 8010a6e:	4601      	mov	r1, r0
 8010a70:	4620      	mov	r0, r4
}
 8010a72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return json_value_init_string_with_len(string, strlen(string));
 8010a76:	f7ff bf5f 	b.w	8010938 <json_value_init_string_with_len>
}
 8010a7a:	bd10      	pop	{r4, pc}

08010a7c <json_value_init_number>:

JSON_Value * json_value_init_number(double number) {
 8010a7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010a7e:	ec55 4b10 	vmov	r4, r5, d0
    JSON_Value *new_value = NULL;
    if (IS_NUMBER_INVALID(number)) {
 8010a82:	ee10 2a10 	vmov	r2, s0
 8010a86:	ee10 0a10 	vmov	r0, s0
 8010a8a:	462b      	mov	r3, r5
 8010a8c:	4629      	mov	r1, r5
 8010a8e:	f7f4 f8dd 	bl	8004c4c <__aeabi_dcmpun>
 8010a92:	b9e8      	cbnz	r0, 8010ad0 <json_value_init_number+0x54>
 8010a94:	f025 4700 	bic.w	r7, r5, #2147483648	; 0x80000000
 8010a98:	4b0e      	ldr	r3, [pc, #56]	; (8010ad4 <json_value_init_number+0x58>)
 8010a9a:	f04f 32ff 	mov.w	r2, #4294967295
 8010a9e:	4620      	mov	r0, r4
 8010aa0:	4639      	mov	r1, r7
 8010aa2:	f7f4 f8d3 	bl	8004c4c <__aeabi_dcmpun>
 8010aa6:	b938      	cbnz	r0, 8010ab8 <json_value_init_number+0x3c>
 8010aa8:	4b0a      	ldr	r3, [pc, #40]	; (8010ad4 <json_value_init_number+0x58>)
 8010aaa:	f04f 32ff 	mov.w	r2, #4294967295
 8010aae:	4620      	mov	r0, r4
 8010ab0:	4639      	mov	r1, r7
 8010ab2:	f7f4 f8ad 	bl	8004c10 <__aeabi_dcmple>
 8010ab6:	b150      	cbz	r0, 8010ace <json_value_init_number+0x52>
        return NULL;
    }
    new_value = (JSON_Value*)parson_malloc(sizeof(JSON_Value));
 8010ab8:	4b07      	ldr	r3, [pc, #28]	; (8010ad8 <json_value_init_number+0x5c>)
 8010aba:	2010      	movs	r0, #16
 8010abc:	681b      	ldr	r3, [r3, #0]
 8010abe:	4798      	blx	r3
    if (new_value == NULL) {
 8010ac0:	b128      	cbz	r0, 8010ace <json_value_init_number+0x52>
        return NULL;
    }
    new_value->parent = NULL;
    new_value->type = JSONNumber;
 8010ac2:	2200      	movs	r2, #0
 8010ac4:	2303      	movs	r3, #3
 8010ac6:	e9c0 2300 	strd	r2, r3, [r0]
    new_value->value.number = number;
 8010aca:	e9c0 4502 	strd	r4, r5, [r0, #8]
    return new_value;
}
 8010ace:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return NULL;
 8010ad0:	2000      	movs	r0, #0
 8010ad2:	e7fc      	b.n	8010ace <json_value_init_number+0x52>
 8010ad4:	7fefffff 	.word	0x7fefffff
 8010ad8:	200003e8 	.word	0x200003e8

08010adc <json_value_init_boolean>:

JSON_Value * json_value_init_boolean(int boolean) {
    JSON_Value *new_value = (JSON_Value*)parson_malloc(sizeof(JSON_Value));
 8010adc:	4b07      	ldr	r3, [pc, #28]	; (8010afc <json_value_init_boolean+0x20>)
JSON_Value * json_value_init_boolean(int boolean) {
 8010ade:	b510      	push	{r4, lr}
    JSON_Value *new_value = (JSON_Value*)parson_malloc(sizeof(JSON_Value));
 8010ae0:	681b      	ldr	r3, [r3, #0]
JSON_Value * json_value_init_boolean(int boolean) {
 8010ae2:	4604      	mov	r4, r0
    JSON_Value *new_value = (JSON_Value*)parson_malloc(sizeof(JSON_Value));
 8010ae4:	2010      	movs	r0, #16
 8010ae6:	4798      	blx	r3
    if (!new_value) {
 8010ae8:	b138      	cbz	r0, 8010afa <json_value_init_boolean+0x1e>
        return NULL;
    }
    new_value->parent = NULL;
    new_value->type = JSONBoolean;
 8010aea:	2200      	movs	r2, #0
 8010aec:	2306      	movs	r3, #6
    new_value->value.boolean = boolean ? 1 : 0;
 8010aee:	3c00      	subs	r4, #0
    new_value->type = JSONBoolean;
 8010af0:	e9c0 2300 	strd	r2, r3, [r0]
    new_value->value.boolean = boolean ? 1 : 0;
 8010af4:	bf18      	it	ne
 8010af6:	2401      	movne	r4, #1
 8010af8:	6084      	str	r4, [r0, #8]
    return new_value;
}
 8010afa:	bd10      	pop	{r4, pc}
 8010afc:	200003e8 	.word	0x200003e8

08010b00 <json_value_init_null>:

JSON_Value * json_value_init_null(void) {
 8010b00:	b508      	push	{r3, lr}
    JSON_Value *new_value = (JSON_Value*)parson_malloc(sizeof(JSON_Value));
 8010b02:	4b05      	ldr	r3, [pc, #20]	; (8010b18 <json_value_init_null+0x18>)
 8010b04:	2010      	movs	r0, #16
 8010b06:	681b      	ldr	r3, [r3, #0]
 8010b08:	4798      	blx	r3
    if (!new_value) {
 8010b0a:	b118      	cbz	r0, 8010b14 <json_value_init_null+0x14>
        return NULL;
    }
    new_value->parent = NULL;
    new_value->type = JSONNull;
 8010b0c:	2200      	movs	r2, #0
 8010b0e:	2301      	movs	r3, #1
 8010b10:	e9c0 2300 	strd	r2, r3, [r0]
    return new_value;
}
 8010b14:	bd08      	pop	{r3, pc}
 8010b16:	bf00      	nop
 8010b18:	200003e8 	.word	0x200003e8

08010b1c <parse_value.part.0>:
static JSON_Value * parse_value(const char **string, size_t nesting) {
 8010b1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010b20:	ed2d 8b02 	vpush	{d8}
    SKIP_WHITESPACES(string);
 8010b24:	4aa9      	ldr	r2, [pc, #676]	; (8010dcc <parse_value.part.0+0x2b0>)
static JSON_Value * parse_value(const char **string, size_t nesting) {
 8010b26:	b085      	sub	sp, #20
 8010b28:	4605      	mov	r5, r0
 8010b2a:	460e      	mov	r6, r1
 8010b2c:	4690      	mov	r8, r2
    SKIP_WHITESPACES(string);
 8010b2e:	682c      	ldr	r4, [r5, #0]
 8010b30:	7823      	ldrb	r3, [r4, #0]
 8010b32:	5c9f      	ldrb	r7, [r3, r2]
 8010b34:	f017 0708 	ands.w	r7, r7, #8
 8010b38:	d110      	bne.n	8010b5c <parse_value.part.0+0x40>
    switch (**string) {
 8010b3a:	2b66      	cmp	r3, #102	; 0x66
 8010b3c:	f000 812d 	beq.w	8010d9a <parse_value.part.0+0x27e>
 8010b40:	d841      	bhi.n	8010bc6 <parse_value.part.0+0xaa>
 8010b42:	2b39      	cmp	r3, #57	; 0x39
 8010b44:	d80d      	bhi.n	8010b62 <parse_value.part.0+0x46>
 8010b46:	2b2f      	cmp	r3, #47	; 0x2f
 8010b48:	f200 814a 	bhi.w	8010de0 <parse_value.part.0+0x2c4>
 8010b4c:	2b22      	cmp	r3, #34	; 0x22
 8010b4e:	f000 810f 	beq.w	8010d70 <parse_value.part.0+0x254>
 8010b52:	2b2d      	cmp	r3, #45	; 0x2d
 8010b54:	f000 8144 	beq.w	8010de0 <parse_value.part.0+0x2c4>
        return NULL;
 8010b58:	2400      	movs	r4, #0
            return parse_number_value(string);
 8010b5a:	e07e      	b.n	8010c5a <parse_value.part.0+0x13e>
    SKIP_WHITESPACES(string);
 8010b5c:	3401      	adds	r4, #1
 8010b5e:	602c      	str	r4, [r5, #0]
 8010b60:	e7e5      	b.n	8010b2e <parse_value.part.0+0x12>
    switch (**string) {
 8010b62:	2b5b      	cmp	r3, #91	; 0x5b
 8010b64:	d1f8      	bne.n	8010b58 <parse_value.part.0+0x3c>
    output_value = json_value_init_array();
 8010b66:	f7ff fec7 	bl	80108f8 <json_value_init_array>
    if (output_value == NULL) {
 8010b6a:	4604      	mov	r4, r0
 8010b6c:	2800      	cmp	r0, #0
 8010b6e:	d0f3      	beq.n	8010b58 <parse_value.part.0+0x3c>
    if (**string != '[') {
 8010b70:	682a      	ldr	r2, [r5, #0]
 8010b72:	7813      	ldrb	r3, [r2, #0]
 8010b74:	2b5b      	cmp	r3, #91	; 0x5b
 8010b76:	d142      	bne.n	8010bfe <parse_value.part.0+0xe2>
    output_array = json_value_get_array(output_value);
 8010b78:	f7ff fc54 	bl	8010424 <json_value_get_array>
    SKIP_CHAR(string);
 8010b7c:	3201      	adds	r2, #1
    output_array = json_value_get_array(output_value);
 8010b7e:	4607      	mov	r7, r0
    SKIP_CHAR(string);
 8010b80:	602a      	str	r2, [r5, #0]
    SKIP_WHITESPACES(string);
 8010b82:	682b      	ldr	r3, [r5, #0]
 8010b84:	781a      	ldrb	r2, [r3, #0]
 8010b86:	f818 1002 	ldrb.w	r1, [r8, r2]
 8010b8a:	0708      	lsls	r0, r1, #28
 8010b8c:	f100 80c2 	bmi.w	8010d14 <parse_value.part.0+0x1f8>
    if (**string == ']') { /* empty array */
 8010b90:	2a5d      	cmp	r2, #93	; 0x5d
 8010b92:	d060      	beq.n	8010c56 <parse_value.part.0+0x13a>
            return parse_array_value(string, nesting + 1);
 8010b94:	3601      	adds	r6, #1
    if (nesting > MAX_NESTING) {
 8010b96:	f640 0901 	movw	r9, #2049	; 0x801
    while (**string != '\0') {
 8010b9a:	682b      	ldr	r3, [r5, #0]
 8010b9c:	781b      	ldrb	r3, [r3, #0]
 8010b9e:	2b00      	cmp	r3, #0
 8010ba0:	f040 80bb 	bne.w	8010d1a <parse_value.part.0+0x1fe>
    SKIP_WHITESPACES(string);
 8010ba4:	682b      	ldr	r3, [r5, #0]
 8010ba6:	781a      	ldrb	r2, [r3, #0]
 8010ba8:	f818 1002 	ldrb.w	r1, [r8, r2]
 8010bac:	0709      	lsls	r1, r1, #28
 8010bae:	f100 80da 	bmi.w	8010d66 <parse_value.part.0+0x24a>
    if (**string != ']' || /* Trim array after parsing is over */
 8010bb2:	2a5d      	cmp	r2, #93	; 0x5d
 8010bb4:	d167      	bne.n	8010c86 <parse_value.part.0+0x16a>
    return array ? array->count : 0;
 8010bb6:	2f00      	cmp	r7, #0
 8010bb8:	f000 80d8 	beq.w	8010d6c <parse_value.part.0+0x250>
 8010bbc:	68b9      	ldr	r1, [r7, #8]
        json_array_resize(output_array, json_array_get_count(output_array)) == JSONFailure) {
 8010bbe:	4638      	mov	r0, r7
 8010bc0:	f7ff f8c4 	bl	800fd4c <json_array_resize>
 8010bc4:	e044      	b.n	8010c50 <parse_value.part.0+0x134>
    switch (**string) {
 8010bc6:	2b74      	cmp	r3, #116	; 0x74
 8010bc8:	f000 80e7 	beq.w	8010d9a <parse_value.part.0+0x27e>
 8010bcc:	2b7b      	cmp	r3, #123	; 0x7b
 8010bce:	d00d      	beq.n	8010bec <parse_value.part.0+0xd0>
 8010bd0:	2b6e      	cmp	r3, #110	; 0x6e
 8010bd2:	d1c1      	bne.n	8010b58 <parse_value.part.0+0x3c>
    if (strncmp("null", *string, token_size) == 0) {
 8010bd4:	487e      	ldr	r0, [pc, #504]	; (8010dd0 <parse_value.part.0+0x2b4>)
 8010bd6:	2204      	movs	r2, #4
 8010bd8:	4621      	mov	r1, r4
 8010bda:	f009 fd83 	bl	801a6e4 <strncmp>
 8010bde:	2800      	cmp	r0, #0
 8010be0:	d1ba      	bne.n	8010b58 <parse_value.part.0+0x3c>
        *string += token_size;
 8010be2:	3404      	adds	r4, #4
 8010be4:	602c      	str	r4, [r5, #0]
        return json_value_init_null();
 8010be6:	f7ff ff8b 	bl	8010b00 <json_value_init_null>
 8010bea:	e0e1      	b.n	8010db0 <parse_value.part.0+0x294>
    output_value = json_value_init_object();
 8010bec:	f7ff fe64 	bl	80108b8 <json_value_init_object>
    if (output_value == NULL) {
 8010bf0:	4604      	mov	r4, r0
 8010bf2:	2800      	cmp	r0, #0
 8010bf4:	d0b0      	beq.n	8010b58 <parse_value.part.0+0x3c>
    if (**string != '{') {
 8010bf6:	682a      	ldr	r2, [r5, #0]
 8010bf8:	7813      	ldrb	r3, [r2, #0]
 8010bfa:	2b7b      	cmp	r3, #123	; 0x7b
 8010bfc:	d002      	beq.n	8010c04 <parse_value.part.0+0xe8>
            json_value_free(output_value);
 8010bfe:	f7ff fdb7 	bl	8010770 <json_value_free>
            return NULL;
 8010c02:	e7a9      	b.n	8010b58 <parse_value.part.0+0x3c>
    output_object = json_value_get_object(output_value);
 8010c04:	f7ff fbdf 	bl	80103c6 <json_value_get_object>
    SKIP_CHAR(string);
 8010c08:	3201      	adds	r2, #1
    output_object = json_value_get_object(output_value);
 8010c0a:	4681      	mov	r9, r0
    SKIP_CHAR(string);
 8010c0c:	602a      	str	r2, [r5, #0]
    SKIP_WHITESPACES(string);
 8010c0e:	682b      	ldr	r3, [r5, #0]
 8010c10:	7819      	ldrb	r1, [r3, #0]
 8010c12:	f818 2001 	ldrb.w	r2, [r8, r1]
 8010c16:	f012 0208 	ands.w	r2, r2, #8
 8010c1a:	d124      	bne.n	8010c66 <parse_value.part.0+0x14a>
    if (**string == '}') { /* empty object */
 8010c1c:	297d      	cmp	r1, #125	; 0x7d
 8010c1e:	d01a      	beq.n	8010c56 <parse_value.part.0+0x13a>
 8010c20:	f8df a1b0 	ldr.w	sl, [pc, #432]	; 8010dd4 <parse_value.part.0+0x2b8>
        size_t key_len = 0;
 8010c24:	9201      	str	r2, [sp, #4]
            return parse_object_value(string, nesting + 1);
 8010c26:	f106 0b01 	add.w	fp, r6, #1
    while (**string != '\0') {
 8010c2a:	682b      	ldr	r3, [r5, #0]
 8010c2c:	781b      	ldrb	r3, [r3, #0]
 8010c2e:	b9eb      	cbnz	r3, 8010c6c <parse_value.part.0+0x150>
    SKIP_WHITESPACES(string);
 8010c30:	682b      	ldr	r3, [r5, #0]
 8010c32:	781a      	ldrb	r2, [r3, #0]
 8010c34:	f818 1002 	ldrb.w	r1, [r8, r2]
 8010c38:	070e      	lsls	r6, r1, #28
 8010c3a:	d466      	bmi.n	8010d0a <parse_value.part.0+0x1ee>
    if (**string != '}' || /* Trim object after parsing is over */
 8010c3c:	2a7d      	cmp	r2, #125	; 0x7d
 8010c3e:	d122      	bne.n	8010c86 <parse_value.part.0+0x16a>
    return object ? object->count : 0;
 8010c40:	f1b9 0f00 	cmp.w	r9, #0
 8010c44:	d064      	beq.n	8010d10 <parse_value.part.0+0x1f4>
 8010c46:	f8d9 100c 	ldr.w	r1, [r9, #12]
        json_object_resize(output_object, json_object_get_count(output_object)) == JSONFailure) {
 8010c4a:	4648      	mov	r0, r9
 8010c4c:	f7ff f838 	bl	800fcc0 <json_object_resize>
    if (**string != ']' || /* Trim array after parsing is over */
 8010c50:	3001      	adds	r0, #1
 8010c52:	d018      	beq.n	8010c86 <parse_value.part.0+0x16a>
    SKIP_CHAR(string);
 8010c54:	682b      	ldr	r3, [r5, #0]
 8010c56:	3301      	adds	r3, #1
 8010c58:	602b      	str	r3, [r5, #0]
}
 8010c5a:	4620      	mov	r0, r4
 8010c5c:	b005      	add	sp, #20
 8010c5e:	ecbd 8b02 	vpop	{d8}
 8010c62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    SKIP_WHITESPACES(string);
 8010c66:	3301      	adds	r3, #1
 8010c68:	602b      	str	r3, [r5, #0]
 8010c6a:	e7d0      	b.n	8010c0e <parse_value.part.0+0xf2>
        size_t key_len = 0;
 8010c6c:	9b01      	ldr	r3, [sp, #4]
 8010c6e:	9303      	str	r3, [sp, #12]
        new_key = get_quoted_string(string, &key_len);
 8010c70:	a903      	add	r1, sp, #12
 8010c72:	4628      	mov	r0, r5
 8010c74:	f7ff fa7a 	bl	801016c <get_quoted_string.constprop.0>
        if (new_key == NULL || key_len != strlen(new_key)) {
 8010c78:	4607      	mov	r7, r0
 8010c7a:	b120      	cbz	r0, 8010c86 <parse_value.part.0+0x16a>
 8010c7c:	f7f3 fb32 	bl	80042e4 <strlen>
 8010c80:	9b03      	ldr	r3, [sp, #12]
 8010c82:	4298      	cmp	r0, r3
 8010c84:	d003      	beq.n	8010c8e <parse_value.part.0+0x172>
            json_value_free(output_value);
 8010c86:	4620      	mov	r0, r4
 8010c88:	e7b9      	b.n	8010bfe <parse_value.part.0+0xe2>
        SKIP_WHITESPACES(string);
 8010c8a:	3301      	adds	r3, #1
 8010c8c:	602b      	str	r3, [r5, #0]
 8010c8e:	682b      	ldr	r3, [r5, #0]
 8010c90:	781a      	ldrb	r2, [r3, #0]
 8010c92:	f818 1002 	ldrb.w	r1, [r8, r2]
 8010c96:	0708      	lsls	r0, r1, #28
 8010c98:	d4f7      	bmi.n	8010c8a <parse_value.part.0+0x16e>
        if (**string != ':') {
 8010c9a:	2a3a      	cmp	r2, #58	; 0x3a
 8010c9c:	d004      	beq.n	8010ca8 <parse_value.part.0+0x18c>
            parson_free(new_key);
 8010c9e:	f8da 3004 	ldr.w	r3, [sl, #4]
 8010ca2:	4638      	mov	r0, r7
 8010ca4:	4798      	blx	r3
            json_value_free(output_value);
 8010ca6:	e7ee      	b.n	8010c86 <parse_value.part.0+0x16a>
        SKIP_CHAR(string);
 8010ca8:	3301      	adds	r3, #1
 8010caa:	602b      	str	r3, [r5, #0]
    if (nesting > MAX_NESTING) {
 8010cac:	f640 0301 	movw	r3, #2049	; 0x801
 8010cb0:	459b      	cmp	fp, r3
 8010cb2:	d0f4      	beq.n	8010c9e <parse_value.part.0+0x182>
 8010cb4:	4659      	mov	r1, fp
 8010cb6:	4628      	mov	r0, r5
 8010cb8:	f7ff ff30 	bl	8010b1c <parse_value.part.0>
        if (new_value == NULL) {
 8010cbc:	4606      	mov	r6, r0
 8010cbe:	2800      	cmp	r0, #0
 8010cc0:	d0ed      	beq.n	8010c9e <parse_value.part.0+0x182>
        if (json_object_add(output_object, new_key, new_value) == JSONFailure) {
 8010cc2:	4602      	mov	r2, r0
 8010cc4:	4639      	mov	r1, r7
 8010cc6:	4648      	mov	r0, r9
 8010cc8:	f7ff f8d5 	bl	800fe76 <json_object_add>
 8010ccc:	3001      	adds	r0, #1
            parson_free(new_key);
 8010cce:	f8da 3004 	ldr.w	r3, [sl, #4]
 8010cd2:	4638      	mov	r0, r7
        if (json_object_add(output_object, new_key, new_value) == JSONFailure) {
 8010cd4:	d104      	bne.n	8010ce0 <parse_value.part.0+0x1c4>
            parson_free(new_key);
 8010cd6:	4798      	blx	r3
            json_value_free(new_value);
 8010cd8:	4630      	mov	r0, r6
            json_value_free(new_array_value);
 8010cda:	f7ff fd49 	bl	8010770 <json_value_free>
            json_value_free(output_value);
 8010cde:	e7d2      	b.n	8010c86 <parse_value.part.0+0x16a>
        parson_free(new_key);
 8010ce0:	4798      	blx	r3
        SKIP_WHITESPACES(string);
 8010ce2:	682b      	ldr	r3, [r5, #0]
 8010ce4:	781a      	ldrb	r2, [r3, #0]
 8010ce6:	f818 1002 	ldrb.w	r1, [r8, r2]
 8010cea:	0709      	lsls	r1, r1, #28
 8010cec:	d40a      	bmi.n	8010d04 <parse_value.part.0+0x1e8>
        if (**string != ',') {
 8010cee:	2a2c      	cmp	r2, #44	; 0x2c
 8010cf0:	d19e      	bne.n	8010c30 <parse_value.part.0+0x114>
        SKIP_WHITESPACES(string);
 8010cf2:	3301      	adds	r3, #1
 8010cf4:	602b      	str	r3, [r5, #0]
 8010cf6:	682b      	ldr	r3, [r5, #0]
 8010cf8:	781a      	ldrb	r2, [r3, #0]
 8010cfa:	f818 2002 	ldrb.w	r2, [r8, r2]
 8010cfe:	0717      	lsls	r7, r2, #28
 8010d00:	d4f7      	bmi.n	8010cf2 <parse_value.part.0+0x1d6>
 8010d02:	e792      	b.n	8010c2a <parse_value.part.0+0x10e>
        SKIP_WHITESPACES(string);
 8010d04:	3301      	adds	r3, #1
 8010d06:	602b      	str	r3, [r5, #0]
 8010d08:	e7eb      	b.n	8010ce2 <parse_value.part.0+0x1c6>
    SKIP_WHITESPACES(string);
 8010d0a:	3301      	adds	r3, #1
 8010d0c:	602b      	str	r3, [r5, #0]
 8010d0e:	e78f      	b.n	8010c30 <parse_value.part.0+0x114>
    return object ? object->count : 0;
 8010d10:	4649      	mov	r1, r9
 8010d12:	e79a      	b.n	8010c4a <parse_value.part.0+0x12e>
    SKIP_WHITESPACES(string);
 8010d14:	3301      	adds	r3, #1
 8010d16:	602b      	str	r3, [r5, #0]
 8010d18:	e733      	b.n	8010b82 <parse_value.part.0+0x66>
    if (nesting > MAX_NESTING) {
 8010d1a:	454e      	cmp	r6, r9
 8010d1c:	d0b3      	beq.n	8010c86 <parse_value.part.0+0x16a>
 8010d1e:	4631      	mov	r1, r6
 8010d20:	4628      	mov	r0, r5
 8010d22:	f7ff fefb 	bl	8010b1c <parse_value.part.0>
        if (new_array_value == NULL) {
 8010d26:	4601      	mov	r1, r0
 8010d28:	2800      	cmp	r0, #0
 8010d2a:	d0ac      	beq.n	8010c86 <parse_value.part.0+0x16a>
        if (json_array_add(output_array, new_array_value) == JSONFailure) {
 8010d2c:	9001      	str	r0, [sp, #4]
 8010d2e:	4638      	mov	r0, r7
 8010d30:	f7ff f82a 	bl	800fd88 <json_array_add>
 8010d34:	3001      	adds	r0, #1
 8010d36:	9901      	ldr	r1, [sp, #4]
 8010d38:	d103      	bne.n	8010d42 <parse_value.part.0+0x226>
            json_value_free(new_array_value);
 8010d3a:	4608      	mov	r0, r1
 8010d3c:	e7cd      	b.n	8010cda <parse_value.part.0+0x1be>
        SKIP_WHITESPACES(string);
 8010d3e:	3301      	adds	r3, #1
 8010d40:	602b      	str	r3, [r5, #0]
 8010d42:	682b      	ldr	r3, [r5, #0]
 8010d44:	781a      	ldrb	r2, [r3, #0]
 8010d46:	f818 1002 	ldrb.w	r1, [r8, r2]
 8010d4a:	0709      	lsls	r1, r1, #28
 8010d4c:	d4f7      	bmi.n	8010d3e <parse_value.part.0+0x222>
        if (**string != ',') {
 8010d4e:	2a2c      	cmp	r2, #44	; 0x2c
 8010d50:	f47f af28 	bne.w	8010ba4 <parse_value.part.0+0x88>
        SKIP_WHITESPACES(string);
 8010d54:	3301      	adds	r3, #1
 8010d56:	602b      	str	r3, [r5, #0]
 8010d58:	682b      	ldr	r3, [r5, #0]
 8010d5a:	781a      	ldrb	r2, [r3, #0]
 8010d5c:	f818 2002 	ldrb.w	r2, [r8, r2]
 8010d60:	0710      	lsls	r0, r2, #28
 8010d62:	d4f7      	bmi.n	8010d54 <parse_value.part.0+0x238>
 8010d64:	e719      	b.n	8010b9a <parse_value.part.0+0x7e>
    SKIP_WHITESPACES(string);
 8010d66:	3301      	adds	r3, #1
 8010d68:	602b      	str	r3, [r5, #0]
 8010d6a:	e71b      	b.n	8010ba4 <parse_value.part.0+0x88>
    return array ? array->count : 0;
 8010d6c:	4639      	mov	r1, r7
 8010d6e:	e726      	b.n	8010bbe <parse_value.part.0+0xa2>
    char *new_string = get_quoted_string(string, &new_string_len);
 8010d70:	4628      	mov	r0, r5
 8010d72:	a903      	add	r1, sp, #12
    size_t new_string_len = 0;
 8010d74:	9703      	str	r7, [sp, #12]
    char *new_string = get_quoted_string(string, &new_string_len);
 8010d76:	f7ff f9f9 	bl	801016c <get_quoted_string.constprop.0>
    if (new_string == NULL) {
 8010d7a:	4605      	mov	r5, r0
 8010d7c:	2800      	cmp	r0, #0
 8010d7e:	f43f aeeb 	beq.w	8010b58 <parse_value.part.0+0x3c>
    value = json_value_init_string_no_copy(new_string, new_string_len);
 8010d82:	9903      	ldr	r1, [sp, #12]
 8010d84:	f7fe ff6e 	bl	800fc64 <json_value_init_string_no_copy>
    if (value == NULL) {
 8010d88:	4604      	mov	r4, r0
 8010d8a:	2800      	cmp	r0, #0
 8010d8c:	f47f af65 	bne.w	8010c5a <parse_value.part.0+0x13e>
        parson_free(new_string);
 8010d90:	4b10      	ldr	r3, [pc, #64]	; (8010dd4 <parse_value.part.0+0x2b8>)
 8010d92:	4628      	mov	r0, r5
 8010d94:	685b      	ldr	r3, [r3, #4]
 8010d96:	4798      	blx	r3
        return NULL;
 8010d98:	e75f      	b.n	8010c5a <parse_value.part.0+0x13e>
    if (strncmp("true", *string, true_token_size) == 0) {
 8010d9a:	480f      	ldr	r0, [pc, #60]	; (8010dd8 <parse_value.part.0+0x2bc>)
 8010d9c:	2204      	movs	r2, #4
 8010d9e:	4621      	mov	r1, r4
 8010da0:	f009 fca0 	bl	801a6e4 <strncmp>
 8010da4:	b930      	cbnz	r0, 8010db4 <parse_value.part.0+0x298>
        *string += true_token_size;
 8010da6:	3404      	adds	r4, #4
 8010da8:	602c      	str	r4, [r5, #0]
        return json_value_init_boolean(1);
 8010daa:	2001      	movs	r0, #1
        return json_value_init_boolean(0);
 8010dac:	f7ff fe96 	bl	8010adc <json_value_init_boolean>
    return json_value_init_number(number);
 8010db0:	4604      	mov	r4, r0
 8010db2:	e752      	b.n	8010c5a <parse_value.part.0+0x13e>
    } else if (strncmp("false", *string, false_token_size) == 0) {
 8010db4:	4809      	ldr	r0, [pc, #36]	; (8010ddc <parse_value.part.0+0x2c0>)
 8010db6:	2205      	movs	r2, #5
 8010db8:	4621      	mov	r1, r4
 8010dba:	f009 fc93 	bl	801a6e4 <strncmp>
 8010dbe:	2800      	cmp	r0, #0
 8010dc0:	f47f aeca 	bne.w	8010b58 <parse_value.part.0+0x3c>
        *string += false_token_size;
 8010dc4:	3405      	adds	r4, #5
 8010dc6:	602c      	str	r4, [r5, #0]
 8010dc8:	e7f0      	b.n	8010dac <parse_value.part.0+0x290>
 8010dca:	bf00      	nop
 8010dcc:	08037689 	.word	0x08037689
 8010dd0:	08022057 	.word	0x08022057
 8010dd4:	200003e8 	.word	0x200003e8
 8010dd8:	08021bf2 	.word	0x08021bf2
 8010ddc:	08021bf7 	.word	0x08021bf7
    errno = 0;
 8010de0:	f008 fbc4 	bl	801956c <__errno>
 8010de4:	2400      	movs	r4, #0
 8010de6:	6004      	str	r4, [r0, #0]
    number = strtod(*string, &end);
 8010de8:	a903      	add	r1, sp, #12
 8010dea:	6828      	ldr	r0, [r5, #0]
 8010dec:	f00a fab2 	bl	801b354 <strtod>
 8010df0:	eeb0 8a40 	vmov.f32	s16, s0
 8010df4:	eef0 8a60 	vmov.f32	s17, s1
    if (errno || !is_decimal(*string, end - *string)) {
 8010df8:	f008 fbb8 	bl	801956c <__errno>
 8010dfc:	6800      	ldr	r0, [r0, #0]
 8010dfe:	2800      	cmp	r0, #0
 8010e00:	f47f af2b 	bne.w	8010c5a <parse_value.part.0+0x13e>
 8010e04:	682e      	ldr	r6, [r5, #0]
 8010e06:	9f03      	ldr	r7, [sp, #12]
 8010e08:	1bbb      	subs	r3, r7, r6
    if (length > 1 && string[0] == '0' && string[1] != '.') {
 8010e0a:	2b01      	cmp	r3, #1
 8010e0c:	d910      	bls.n	8010e30 <parse_value.part.0+0x314>
 8010e0e:	7832      	ldrb	r2, [r6, #0]
 8010e10:	2a30      	cmp	r2, #48	; 0x30
 8010e12:	d102      	bne.n	8010e1a <parse_value.part.0+0x2fe>
 8010e14:	7872      	ldrb	r2, [r6, #1]
 8010e16:	2a2e      	cmp	r2, #46	; 0x2e
 8010e18:	d1ca      	bne.n	8010db0 <parse_value.part.0+0x294>
    if (length > 2 && !strncmp(string, "-0", 2) && string[2] != '.') {
 8010e1a:	2b02      	cmp	r3, #2
 8010e1c:	d008      	beq.n	8010e30 <parse_value.part.0+0x314>
 8010e1e:	490f      	ldr	r1, [pc, #60]	; (8010e5c <parse_value.part.0+0x340>)
 8010e20:	2202      	movs	r2, #2
 8010e22:	4630      	mov	r0, r6
 8010e24:	f009 fc5e 	bl	801a6e4 <strncmp>
 8010e28:	b910      	cbnz	r0, 8010e30 <parse_value.part.0+0x314>
 8010e2a:	78b3      	ldrb	r3, [r6, #2]
 8010e2c:	2b2e      	cmp	r3, #46	; 0x2e
 8010e2e:	d1bf      	bne.n	8010db0 <parse_value.part.0+0x294>
        if (strchr("xX", string[length])) {
 8010e30:	f8df 802c 	ldr.w	r8, [pc, #44]	; 8010e60 <parse_value.part.0+0x344>
 8010e34:	463c      	mov	r4, r7
 8010e36:	e007      	b.n	8010e48 <parse_value.part.0+0x32c>
 8010e38:	f814 1d01 	ldrb.w	r1, [r4, #-1]!
 8010e3c:	4640      	mov	r0, r8
 8010e3e:	f009 fc3c 	bl	801a6ba <strchr>
 8010e42:	2800      	cmp	r0, #0
 8010e44:	f47f ae88 	bne.w	8010b58 <parse_value.part.0+0x3c>
    while (length--) {
 8010e48:	42b4      	cmp	r4, r6
 8010e4a:	d1f5      	bne.n	8010e38 <parse_value.part.0+0x31c>
    *string = end;
 8010e4c:	602f      	str	r7, [r5, #0]
    return json_value_init_number(number);
 8010e4e:	eeb0 0a48 	vmov.f32	s0, s16
 8010e52:	eef0 0a68 	vmov.f32	s1, s17
 8010e56:	f7ff fe11 	bl	8010a7c <json_value_init_number>
 8010e5a:	e7a9      	b.n	8010db0 <parse_value.part.0+0x294>
 8010e5c:	0802205c 	.word	0x0802205c
 8010e60:	0802205f 	.word	0x0802205f

08010e64 <json_parse_string>:
JSON_Value * json_parse_string(const char *string) {
 8010e64:	b507      	push	{r0, r1, r2, lr}
 8010e66:	9001      	str	r0, [sp, #4]
    if (string == NULL) {
 8010e68:	b170      	cbz	r0, 8010e88 <json_parse_string+0x24>
    if (string[0] == '\xEF' && string[1] == '\xBB' && string[2] == '\xBF') {
 8010e6a:	7803      	ldrb	r3, [r0, #0]
 8010e6c:	2bef      	cmp	r3, #239	; 0xef
 8010e6e:	d107      	bne.n	8010e80 <json_parse_string+0x1c>
 8010e70:	7843      	ldrb	r3, [r0, #1]
 8010e72:	2bbb      	cmp	r3, #187	; 0xbb
 8010e74:	d104      	bne.n	8010e80 <json_parse_string+0x1c>
 8010e76:	7883      	ldrb	r3, [r0, #2]
 8010e78:	2bbf      	cmp	r3, #191	; 0xbf
        string = string + 3; /* Support for UTF-8 BOM */
 8010e7a:	bf04      	itt	eq
 8010e7c:	3003      	addeq	r0, #3
 8010e7e:	9001      	streq	r0, [sp, #4]
    if (nesting > MAX_NESTING) {
 8010e80:	2100      	movs	r1, #0
 8010e82:	a801      	add	r0, sp, #4
 8010e84:	f7ff fe4a 	bl	8010b1c <parse_value.part.0>
}
 8010e88:	b003      	add	sp, #12
 8010e8a:	f85d fb04 	ldr.w	pc, [sp], #4

08010e8e <json_serialization_size>:
        default:
            return NULL;
    }
}

size_t json_serialization_size(const JSON_Value *value) {
 8010e8e:	b500      	push	{lr}
 8010e90:	b093      	sub	sp, #76	; 0x4c
    char num_buf[NUM_BUF_SIZE]; /* recursively allocating buffer on stack is a bad idea, so let's do it only once */
    int res = json_serialize_to_buffer_r(value, NULL, 0, 0, num_buf);
 8010e92:	ab02      	add	r3, sp, #8
 8010e94:	9300      	str	r3, [sp, #0]
 8010e96:	2300      	movs	r3, #0
 8010e98:	461a      	mov	r2, r3
 8010e9a:	4619      	mov	r1, r3
 8010e9c:	f7ff fb04 	bl	80104a8 <json_serialize_to_buffer_r>
    return res < 0 ? 0 : (size_t)(res) + 1;
 8010ea0:	2800      	cmp	r0, #0
 8010ea2:	bfac      	ite	ge
 8010ea4:	3001      	addge	r0, #1
 8010ea6:	2000      	movlt	r0, #0
}
 8010ea8:	b013      	add	sp, #76	; 0x4c
 8010eaa:	f85d fb04 	ldr.w	pc, [sp], #4

08010eae <json_serialize_to_buffer>:

JSON_Status json_serialize_to_buffer(const JSON_Value *value, char *buf, size_t buf_size_in_bytes) {
 8010eae:	b530      	push	{r4, r5, lr}
 8010eb0:	b085      	sub	sp, #20
 8010eb2:	4604      	mov	r4, r0
 8010eb4:	9103      	str	r1, [sp, #12]
 8010eb6:	4615      	mov	r5, r2
    int written = -1;
    size_t needed_size_in_bytes = json_serialization_size(value);
 8010eb8:	f7ff ffe9 	bl	8010e8e <json_serialization_size>
    if (needed_size_in_bytes == 0 || buf_size_in_bytes < needed_size_in_bytes) {
 8010ebc:	b158      	cbz	r0, 8010ed6 <json_serialize_to_buffer+0x28>
 8010ebe:	42a8      	cmp	r0, r5
 8010ec0:	d809      	bhi.n	8010ed6 <json_serialize_to_buffer+0x28>
        return JSONFailure;
    }
    written = json_serialize_to_buffer_r(value, buf, 0, 0, NULL);
 8010ec2:	2300      	movs	r3, #0
 8010ec4:	9903      	ldr	r1, [sp, #12]
 8010ec6:	9300      	str	r3, [sp, #0]
 8010ec8:	461a      	mov	r2, r3
 8010eca:	4620      	mov	r0, r4
 8010ecc:	f7ff faec 	bl	80104a8 <json_serialize_to_buffer_r>
    if (written < 0) {
 8010ed0:	17c0      	asrs	r0, r0, #31
        return JSONFailure;
    }
    return JSONSuccess;
}
 8010ed2:	b005      	add	sp, #20
 8010ed4:	bd30      	pop	{r4, r5, pc}
        return JSONFailure;
 8010ed6:	f04f 30ff 	mov.w	r0, #4294967295
 8010eda:	e7fa      	b.n	8010ed2 <json_serialize_to_buffer+0x24>

08010edc <json_free_serialized_string>:
    }
    return buf;
}

void json_free_serialized_string(char *string) {
    parson_free(string);
 8010edc:	4b01      	ldr	r3, [pc, #4]	; (8010ee4 <json_free_serialized_string+0x8>)
 8010ede:	685b      	ldr	r3, [r3, #4]
 8010ee0:	4718      	bx	r3
 8010ee2:	bf00      	nop
 8010ee4:	200003e8 	.word	0x200003e8

08010ee8 <json_serialize_to_string>:
char * json_serialize_to_string(const JSON_Value *value) {
 8010ee8:	b570      	push	{r4, r5, r6, lr}
 8010eea:	4606      	mov	r6, r0
    size_t buf_size_bytes = json_serialization_size(value);
 8010eec:	f7ff ffcf 	bl	8010e8e <json_serialization_size>
    if (buf_size_bytes == 0) {
 8010ef0:	4605      	mov	r5, r0
 8010ef2:	b910      	cbnz	r0, 8010efa <json_serialize_to_string+0x12>
        return NULL;
 8010ef4:	2400      	movs	r4, #0
}
 8010ef6:	4620      	mov	r0, r4
 8010ef8:	bd70      	pop	{r4, r5, r6, pc}
    buf = (char*)parson_malloc(buf_size_bytes);
 8010efa:	4b08      	ldr	r3, [pc, #32]	; (8010f1c <json_serialize_to_string+0x34>)
 8010efc:	681b      	ldr	r3, [r3, #0]
 8010efe:	4798      	blx	r3
    if (buf == NULL) {
 8010f00:	4604      	mov	r4, r0
 8010f02:	2800      	cmp	r0, #0
 8010f04:	d0f6      	beq.n	8010ef4 <json_serialize_to_string+0xc>
    serialization_result = json_serialize_to_buffer(value, buf, buf_size_bytes);
 8010f06:	4601      	mov	r1, r0
 8010f08:	462a      	mov	r2, r5
 8010f0a:	4630      	mov	r0, r6
 8010f0c:	f7ff ffcf 	bl	8010eae <json_serialize_to_buffer>
    if (serialization_result == JSONFailure) {
 8010f10:	3001      	adds	r0, #1
 8010f12:	d1f0      	bne.n	8010ef6 <json_serialize_to_string+0xe>
        json_free_serialized_string(buf);
 8010f14:	4620      	mov	r0, r4
 8010f16:	f7ff ffe1 	bl	8010edc <json_free_serialized_string>
 8010f1a:	e7eb      	b.n	8010ef4 <json_serialize_to_string+0xc>
 8010f1c:	200003e8 	.word	0x200003e8

08010f20 <json_array_append_value>:
    array->count = 0;
    return JSONSuccess;
}

JSON_Status json_array_append_value(JSON_Array *array, JSON_Value *value) {
    if (array == NULL || value == NULL || value->parent != NULL) {
 8010f20:	b120      	cbz	r0, 8010f2c <json_array_append_value+0xc>
 8010f22:	b119      	cbz	r1, 8010f2c <json_array_append_value+0xc>
 8010f24:	680b      	ldr	r3, [r1, #0]
 8010f26:	b90b      	cbnz	r3, 8010f2c <json_array_append_value+0xc>
        return JSONFailure;
    }
    return json_array_add(array, value);
 8010f28:	f7fe bf2e 	b.w	800fd88 <json_array_add>
}
 8010f2c:	f04f 30ff 	mov.w	r0, #4294967295
 8010f30:	4770      	bx	lr

08010f32 <json_array_append_string>:

JSON_Status json_array_append_string(JSON_Array *array, const char *string) {
 8010f32:	b538      	push	{r3, r4, r5, lr}
 8010f34:	4604      	mov	r4, r0
    JSON_Value *value = json_value_init_string(string);
 8010f36:	4608      	mov	r0, r1
 8010f38:	f7ff fd94 	bl	8010a64 <json_value_init_string>
    if (value == NULL) {
 8010f3c:	4605      	mov	r5, r0
 8010f3e:	b158      	cbz	r0, 8010f58 <json_array_append_string+0x26>
        return JSONFailure;
    }
    if (json_array_append_value(array, value) == JSONFailure) {
 8010f40:	4601      	mov	r1, r0
 8010f42:	4620      	mov	r0, r4
 8010f44:	f7ff ffec 	bl	8010f20 <json_array_append_value>
 8010f48:	1c43      	adds	r3, r0, #1
 8010f4a:	4604      	mov	r4, r0
 8010f4c:	d107      	bne.n	8010f5e <json_array_append_string+0x2c>
        json_value_free(value);
 8010f4e:	4628      	mov	r0, r5
 8010f50:	f7ff fc0e 	bl	8010770 <json_value_free>
        return JSONFailure;
    }
    return JSONSuccess;
}
 8010f54:	4620      	mov	r0, r4
 8010f56:	bd38      	pop	{r3, r4, r5, pc}
        return JSONFailure;
 8010f58:	f04f 34ff 	mov.w	r4, #4294967295
 8010f5c:	e7fa      	b.n	8010f54 <json_array_append_string+0x22>
    return JSONSuccess;
 8010f5e:	2400      	movs	r4, #0
 8010f60:	e7f8      	b.n	8010f54 <json_array_append_string+0x22>

08010f62 <json_array_append_number>:
        return JSONFailure;
    }
    return JSONSuccess;
}

JSON_Status json_array_append_number(JSON_Array *array, double number) {
 8010f62:	b538      	push	{r3, r4, r5, lr}
 8010f64:	4604      	mov	r4, r0
    JSON_Value *value = json_value_init_number(number);
 8010f66:	f7ff fd89 	bl	8010a7c <json_value_init_number>
    if (value == NULL) {
 8010f6a:	4605      	mov	r5, r0
 8010f6c:	b158      	cbz	r0, 8010f86 <json_array_append_number+0x24>
        return JSONFailure;
    }
    if (json_array_append_value(array, value) == JSONFailure) {
 8010f6e:	4601      	mov	r1, r0
 8010f70:	4620      	mov	r0, r4
 8010f72:	f7ff ffd5 	bl	8010f20 <json_array_append_value>
 8010f76:	1c43      	adds	r3, r0, #1
 8010f78:	4604      	mov	r4, r0
 8010f7a:	d107      	bne.n	8010f8c <json_array_append_number+0x2a>
        json_value_free(value);
 8010f7c:	4628      	mov	r0, r5
 8010f7e:	f7ff fbf7 	bl	8010770 <json_value_free>
        return JSONFailure;
    }
    return JSONSuccess;
}
 8010f82:	4620      	mov	r0, r4
 8010f84:	bd38      	pop	{r3, r4, r5, pc}
        return JSONFailure;
 8010f86:	f04f 34ff 	mov.w	r4, #4294967295
 8010f8a:	e7fa      	b.n	8010f82 <json_array_append_number+0x20>
    return JSONSuccess;
 8010f8c:	2400      	movs	r4, #0
 8010f8e:	e7f8      	b.n	8010f82 <json_array_append_number+0x20>

08010f90 <json_object_set_value>:
        return JSONFailure;
    }
    return JSONSuccess;
}

JSON_Status json_object_set_value(JSON_Object *object, const char *name, JSON_Value *value) {
 8010f90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010f94:	460f      	mov	r7, r1
 8010f96:	4616      	mov	r6, r2
    size_t i = 0;
    JSON_Value *old_value;
    if (object == NULL || name == NULL || value == NULL || value->parent != NULL) {
 8010f98:	4604      	mov	r4, r0
 8010f9a:	b328      	cbz	r0, 8010fe8 <json_object_set_value+0x58>
 8010f9c:	b321      	cbz	r1, 8010fe8 <json_object_set_value+0x58>
 8010f9e:	b31a      	cbz	r2, 8010fe8 <json_object_set_value+0x58>
 8010fa0:	6815      	ldr	r5, [r2, #0]
 8010fa2:	bb0d      	cbnz	r5, 8010fe8 <json_object_set_value+0x58>
        return JSONFailure;
    }
    old_value = json_object_get_value(object, name);
 8010fa4:	f7ff f9e8 	bl	8010378 <json_object_get_value>
    if (old_value != NULL) { /* free and overwrite old value */
 8010fa8:	b930      	cbnz	r0, 8010fb8 <json_object_set_value+0x28>
                return JSONSuccess;
            }
        }
    }
    /* add new key value pair */
    return json_object_add(object, name, value);
 8010faa:	4632      	mov	r2, r6
 8010fac:	4639      	mov	r1, r7
 8010fae:	4620      	mov	r0, r4
}
 8010fb0:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    return json_object_add(object, name, value);
 8010fb4:	f7fe bf5f 	b.w	800fe76 <json_object_add>
        json_value_free(old_value);
 8010fb8:	f7ff fbda 	bl	8010770 <json_value_free>
    return object ? object->count : 0;
 8010fbc:	f8d4 800c 	ldr.w	r8, [r4, #12]
        for (i = 0; i < json_object_get_count(object); i++) {
 8010fc0:	4545      	cmp	r5, r8
 8010fc2:	d0f2      	beq.n	8010faa <json_object_set_value+0x1a>
            if (strcmp(object->names[i], name) == 0) {
 8010fc4:	6863      	ldr	r3, [r4, #4]
 8010fc6:	4639      	mov	r1, r7
 8010fc8:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8010fcc:	ea4f 0985 	mov.w	r9, r5, lsl #2
 8010fd0:	f7f3 f97e 	bl	80042d0 <strcmp>
 8010fd4:	b930      	cbnz	r0, 8010fe4 <json_object_set_value+0x54>
                value->parent = json_object_get_wrapping_value(object);
 8010fd6:	6823      	ldr	r3, [r4, #0]
 8010fd8:	6033      	str	r3, [r6, #0]
                object->values[i] = value;
 8010fda:	68a3      	ldr	r3, [r4, #8]
 8010fdc:	f843 6009 	str.w	r6, [r3, r9]
}
 8010fe0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        for (i = 0; i < json_object_get_count(object); i++) {
 8010fe4:	3501      	adds	r5, #1
 8010fe6:	e7eb      	b.n	8010fc0 <json_object_set_value+0x30>
        return JSONFailure;
 8010fe8:	f04f 30ff 	mov.w	r0, #4294967295
 8010fec:	e7f8      	b.n	8010fe0 <json_object_set_value+0x50>

08010fee <json_object_dotset_value>:
        json_value_free(value);
    }
    return status;
}

JSON_Status json_object_dotset_value(JSON_Object *object, const char *name, JSON_Value *value) {
 8010fee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010ff2:	4604      	mov	r4, r0
 8010ff4:	460d      	mov	r5, r1
 8010ff6:	4691      	mov	r9, r2
    const char *dot_pos = NULL;
    JSON_Value *temp_value = NULL, *new_value = NULL;
    JSON_Object *temp_object = NULL, *new_object = NULL;
    JSON_Status status = JSONFailure;
    size_t name_len = 0;
    if (object == NULL || name == NULL || value == NULL) {
 8010ff8:	b91c      	cbnz	r4, 8011002 <json_object_dotset_value+0x14>
    }
    status = json_object_addn(object, name, name_len, new_value);
    if (status != JSONSuccess) {
        json_object_dotremove_internal(new_object, dot_pos + 1, 0);
        json_value_free(new_value);
        return JSONFailure;
 8010ffa:	f04f 30ff 	mov.w	r0, #4294967295
    }
    return JSONSuccess;
}
 8010ffe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (object == NULL || name == NULL || value == NULL) {
 8011002:	2d00      	cmp	r5, #0
 8011004:	d0f9      	beq.n	8010ffa <json_object_dotset_value+0xc>
 8011006:	f1b9 0f00 	cmp.w	r9, #0
 801100a:	d0f6      	beq.n	8010ffa <json_object_dotset_value+0xc>
    dot_pos = strchr(name, '.');
 801100c:	212e      	movs	r1, #46	; 0x2e
 801100e:	4628      	mov	r0, r5
 8011010:	f009 fb53 	bl	801a6ba <strchr>
    if (dot_pos == NULL) {
 8011014:	4606      	mov	r6, r0
 8011016:	b930      	cbnz	r0, 8011026 <json_object_dotset_value+0x38>
        return json_object_set_value(object, name, value);
 8011018:	464a      	mov	r2, r9
 801101a:	4629      	mov	r1, r5
 801101c:	4620      	mov	r0, r4
}
 801101e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        return json_object_set_value(object, name, value);
 8011022:	f7ff bfb5 	b.w	8010f90 <json_object_set_value>
    name_len = dot_pos - name;
 8011026:	eba0 0a05 	sub.w	sl, r0, r5
    temp_value = json_object_getn_value(object, name, name_len);
 801102a:	4652      	mov	r2, sl
 801102c:	4629      	mov	r1, r5
 801102e:	4620      	mov	r0, r4
 8011030:	f7fe fec4 	bl	800fdbc <json_object_getn_value>
    if (temp_value) {
 8011034:	b138      	cbz	r0, 8011046 <json_object_dotset_value+0x58>
        if (json_value_get_type(temp_value) != JSONObject) {
 8011036:	6843      	ldr	r3, [r0, #4]
 8011038:	2b04      	cmp	r3, #4
 801103a:	d1de      	bne.n	8010ffa <json_object_dotset_value+0xc>
        temp_object = json_value_get_object(temp_value);
 801103c:	f7ff f9c3 	bl	80103c6 <json_value_get_object>
        return json_object_dotset_value(temp_object, dot_pos + 1, value);
 8011040:	1c75      	adds	r5, r6, #1
        temp_object = json_value_get_object(temp_value);
 8011042:	4604      	mov	r4, r0
        return json_object_dotset_value(temp_object, dot_pos + 1, value);
 8011044:	e7d8      	b.n	8010ff8 <json_object_dotset_value+0xa>
    new_value = json_value_init_object();
 8011046:	f7ff fc37 	bl	80108b8 <json_value_init_object>
    if (new_value == NULL) {
 801104a:	4607      	mov	r7, r0
 801104c:	2800      	cmp	r0, #0
 801104e:	d0d4      	beq.n	8010ffa <json_object_dotset_value+0xc>
    new_object = json_value_get_object(new_value);
 8011050:	f7ff f9b9 	bl	80103c6 <json_value_get_object>
    status = json_object_dotset_value(new_object, dot_pos + 1, value);
 8011054:	3601      	adds	r6, #1
 8011056:	464a      	mov	r2, r9
 8011058:	4631      	mov	r1, r6
    new_object = json_value_get_object(new_value);
 801105a:	4680      	mov	r8, r0
    status = json_object_dotset_value(new_object, dot_pos + 1, value);
 801105c:	f7ff ffc7 	bl	8010fee <json_object_dotset_value>
    if (status != JSONSuccess) {
 8011060:	4681      	mov	r9, r0
 8011062:	b118      	cbz	r0, 801106c <json_object_dotset_value+0x7e>
        json_value_free(new_value);
 8011064:	4638      	mov	r0, r7
 8011066:	f7ff fb83 	bl	8010770 <json_value_free>
 801106a:	e7c6      	b.n	8010ffa <json_object_dotset_value+0xc>
    status = json_object_addn(object, name, name_len, new_value);
 801106c:	463b      	mov	r3, r7
 801106e:	4652      	mov	r2, sl
 8011070:	4629      	mov	r1, r5
 8011072:	4620      	mov	r0, r4
 8011074:	f7fe fec6 	bl	800fe04 <json_object_addn>
    if (status != JSONSuccess) {
 8011078:	2800      	cmp	r0, #0
 801107a:	d0c0      	beq.n	8010ffe <json_object_dotset_value+0x10>
        json_object_dotremove_internal(new_object, dot_pos + 1, 0);
 801107c:	464a      	mov	r2, r9
 801107e:	4631      	mov	r1, r6
 8011080:	4640      	mov	r0, r8
 8011082:	f7ff fbf7 	bl	8010874 <json_object_dotremove_internal>
 8011086:	e7ed      	b.n	8011064 <json_object_dotset_value+0x76>

08011088 <json_object_dotset_string>:

JSON_Status json_object_dotset_string(JSON_Object *object, const char *name, const char *string) {
 8011088:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801108a:	4604      	mov	r4, r0
    JSON_Value *value = json_value_init_string(string);
 801108c:	4610      	mov	r0, r2
JSON_Status json_object_dotset_string(JSON_Object *object, const char *name, const char *string) {
 801108e:	9101      	str	r1, [sp, #4]
    JSON_Value *value = json_value_init_string(string);
 8011090:	f7ff fce8 	bl	8010a64 <json_value_init_string>
    if (value == NULL) {
 8011094:	4605      	mov	r5, r0
 8011096:	b168      	cbz	r0, 80110b4 <json_object_dotset_string+0x2c>
        return JSONFailure;
    }
    if (json_object_dotset_value(object, name, value) == JSONFailure) {
 8011098:	4602      	mov	r2, r0
 801109a:	9901      	ldr	r1, [sp, #4]
 801109c:	4620      	mov	r0, r4
 801109e:	f7ff ffa6 	bl	8010fee <json_object_dotset_value>
 80110a2:	1c43      	adds	r3, r0, #1
 80110a4:	4604      	mov	r4, r0
 80110a6:	d108      	bne.n	80110ba <json_object_dotset_string+0x32>
        json_value_free(value);
 80110a8:	4628      	mov	r0, r5
 80110aa:	f7ff fb61 	bl	8010770 <json_value_free>
        return JSONFailure;
    }
    return JSONSuccess;
}
 80110ae:	4620      	mov	r0, r4
 80110b0:	b003      	add	sp, #12
 80110b2:	bd30      	pop	{r4, r5, pc}
        return JSONFailure;
 80110b4:	f04f 34ff 	mov.w	r4, #4294967295
 80110b8:	e7f9      	b.n	80110ae <json_object_dotset_string+0x26>
    return JSONSuccess;
 80110ba:	2400      	movs	r4, #0
 80110bc:	e7f7      	b.n	80110ae <json_object_dotset_string+0x26>

080110be <json_object_dotset_number>:
        return JSONFailure;
    }
    return JSONSuccess;
}

JSON_Status json_object_dotset_number(JSON_Object *object, const char *name, double number) {
 80110be:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80110c0:	4604      	mov	r4, r0
 80110c2:	9101      	str	r1, [sp, #4]
    JSON_Value *value = json_value_init_number(number);
 80110c4:	f7ff fcda 	bl	8010a7c <json_value_init_number>
    if (value == NULL) {
 80110c8:	4605      	mov	r5, r0
 80110ca:	b168      	cbz	r0, 80110e8 <json_object_dotset_number+0x2a>
        return JSONFailure;
    }
    if (json_object_dotset_value(object, name, value) == JSONFailure) {
 80110cc:	4602      	mov	r2, r0
 80110ce:	9901      	ldr	r1, [sp, #4]
 80110d0:	4620      	mov	r0, r4
 80110d2:	f7ff ff8c 	bl	8010fee <json_object_dotset_value>
 80110d6:	1c43      	adds	r3, r0, #1
 80110d8:	4604      	mov	r4, r0
 80110da:	d108      	bne.n	80110ee <json_object_dotset_number+0x30>
        json_value_free(value);
 80110dc:	4628      	mov	r0, r5
 80110de:	f7ff fb47 	bl	8010770 <json_value_free>
        return JSONFailure;
    }
    return JSONSuccess;
}
 80110e2:	4620      	mov	r0, r4
 80110e4:	b003      	add	sp, #12
 80110e6:	bd30      	pop	{r4, r5, pc}
        return JSONFailure;
 80110e8:	f04f 34ff 	mov.w	r4, #4294967295
 80110ec:	e7f9      	b.n	80110e2 <json_object_dotset_number+0x24>
    return JSONSuccess;
 80110ee:	2400      	movs	r4, #0
 80110f0:	e7f7      	b.n	80110e2 <json_object_dotset_number+0x24>
	...

080110f4 <json_set_allocation_functions>:
int json_boolean(const JSON_Value *value) {
    return json_value_get_boolean(value);
}

void json_set_allocation_functions(JSON_Malloc_Function malloc_fun, JSON_Free_Function free_fun) {
    parson_malloc = malloc_fun;
 80110f4:	4b01      	ldr	r3, [pc, #4]	; (80110fc <json_set_allocation_functions+0x8>)
    parson_free = free_fun;
 80110f6:	e9c3 0100 	strd	r0, r1, [r3]
}
 80110fa:	4770      	bx	lr
 80110fc:	200003e8 	.word	0x200003e8

08011100 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8011100:	f8df d034 	ldr.w	sp, [pc, #52]	; 8011138 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8011104:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8011106:	e003      	b.n	8011110 <LoopCopyDataInit>

08011108 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8011108:	4b0c      	ldr	r3, [pc, #48]	; (801113c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 801110a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 801110c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 801110e:	3104      	adds	r1, #4

08011110 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8011110:	480b      	ldr	r0, [pc, #44]	; (8011140 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8011112:	4b0c      	ldr	r3, [pc, #48]	; (8011144 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8011114:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8011116:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8011118:	d3f6      	bcc.n	8011108 <CopyDataInit>
  ldr  r2, =_sbss
 801111a:	4a0b      	ldr	r2, [pc, #44]	; (8011148 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 801111c:	e002      	b.n	8011124 <LoopFillZerobss>

0801111e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 801111e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8011120:	f842 3b04 	str.w	r3, [r2], #4

08011124 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8011124:	4b09      	ldr	r3, [pc, #36]	; (801114c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8011126:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8011128:	d3f9      	bcc.n	801111e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 801112a:	f7f6 f9c1 	bl	80074b0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 801112e:	f008 fbdb 	bl	80198e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8011132:	f002 ffa7 	bl	8014084 <main>
  bx  lr    
 8011136:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8011138:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 801113c:	08037be0 	.word	0x08037be0
  ldr  r0, =_sdata
 8011140:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8011144:	20000a5c 	.word	0x20000a5c
  ldr  r2, =_sbss
 8011148:	20000a60 	.word	0x20000a60
  ldr  r3, = _ebss
 801114c:	2000c02c 	.word	0x2000c02c

08011150 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8011150:	e7fe      	b.n	8011150 <ADC_IRQHandler>
	...

08011154 <_sbrk>:




caddr_t _sbrk(int incr)
{
 8011154:	b508      	push	{r3, lr}
	extern char end /*asm("end")*/;
	static char *heap_end;
	char *prev_heap_end,*min_stack_ptr;

	if (heap_end == 0)
 8011156:	4b0c      	ldr	r3, [pc, #48]	; (8011188 <_sbrk+0x34>)
 8011158:	6819      	ldr	r1, [r3, #0]
{
 801115a:	4602      	mov	r2, r0
	if (heap_end == 0)
 801115c:	b909      	cbnz	r1, 8011162 <_sbrk+0xe>
		heap_end = &end;
 801115e:	490b      	ldr	r1, [pc, #44]	; (801118c <_sbrk+0x38>)
 8011160:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;

#ifdef FreeRTOS
	/* Use the NVIC offset register to locate the main stack pointer. */
	min_stack_ptr = (char*)(*(unsigned int *)*(unsigned int *)0xE000ED08);
 8011162:	490b      	ldr	r1, [pc, #44]	; (8011190 <_sbrk+0x3c>)
	prev_heap_end = heap_end;
 8011164:	6818      	ldr	r0, [r3, #0]
	min_stack_ptr = (char*)(*(unsigned int *)*(unsigned int *)0xE000ED08);
 8011166:	6809      	ldr	r1, [r1, #0]
 8011168:	6809      	ldr	r1, [r1, #0]
	/* Locate the STACK bottom address */
	min_stack_ptr -= MAX_STACK_SIZE;

	if (heap_end + incr > min_stack_ptr)
 801116a:	4402      	add	r2, r0
	min_stack_ptr -= MAX_STACK_SIZE;
 801116c:	f5a1 7100 	sub.w	r1, r1, #512	; 0x200
	if (heap_end + incr > min_stack_ptr)
 8011170:	428a      	cmp	r2, r1
 8011172:	d906      	bls.n	8011182 <_sbrk+0x2e>
	if (heap_end + incr > stack_ptr)
#endif
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8011174:	f008 f9fa 	bl	801956c <__errno>
 8011178:	230c      	movs	r3, #12
 801117a:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 801117c:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap_end += incr;

	return (caddr_t) prev_heap_end;
}
 8011180:	bd08      	pop	{r3, pc}
	heap_end += incr;
 8011182:	601a      	str	r2, [r3, #0]
	return (caddr_t) prev_heap_end;
 8011184:	e7fc      	b.n	8011180 <_sbrk+0x2c>
 8011186:	bf00      	nop
 8011188:	20009688 	.word	0x20009688
 801118c:	2000c02c 	.word	0x2000c02c
 8011190:	e000ed08 	.word	0xe000ed08

08011194 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8011194:	2001      	movs	r0, #1
 8011196:	4770      	bx	lr

08011198 <_kill>:

int _kill(int pid, int sig)
{
 8011198:	b508      	push	{r3, lr}
	errno = EINVAL;
 801119a:	f008 f9e7 	bl	801956c <__errno>
 801119e:	2316      	movs	r3, #22
 80111a0:	6003      	str	r3, [r0, #0]
	return -1;
}
 80111a2:	f04f 30ff 	mov.w	r0, #4294967295
 80111a6:	bd08      	pop	{r3, pc}

080111a8 <_exit>:

void _exit (int status)
{
 80111a8:	b508      	push	{r3, lr}
	errno = EINVAL;
 80111aa:	f008 f9df 	bl	801956c <__errno>
 80111ae:	2316      	movs	r3, #22
 80111b0:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}
 80111b2:	e7fe      	b.n	80111b2 <_exit+0xa>

080111b4 <_write>:
}

int _write(int file, char *ptr, int len)
{
 80111b4:	b570      	push	{r4, r5, r6, lr}
 80111b6:	460e      	mov	r6, r1
 80111b8:	4614      	mov	r4, r2
	int DataIdx;

		for (DataIdx = 0; DataIdx < len; DataIdx++)
 80111ba:	2500      	movs	r5, #0
 80111bc:	42a5      	cmp	r5, r4
 80111be:	db01      	blt.n	80111c4 <_write+0x10>
		{
		   __io_putchar( *ptr++ );
		}
	return len;
}
 80111c0:	4620      	mov	r0, r4
 80111c2:	bd70      	pop	{r4, r5, r6, pc}
		   __io_putchar( *ptr++ );
 80111c4:	5d70      	ldrb	r0, [r6, r5]
 80111c6:	f003 fcf5 	bl	8014bb4 <__io_putchar>
		for (DataIdx = 0; DataIdx < len; DataIdx++)
 80111ca:	3501      	adds	r5, #1
 80111cc:	e7f6      	b.n	80111bc <_write+0x8>

080111ce <_close>:

int _close(int file)
{
	return -1;
}
 80111ce:	f04f 30ff 	mov.w	r0, #4294967295
 80111d2:	4770      	bx	lr

080111d4 <_fstat>:

int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 80111d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80111d8:	604b      	str	r3, [r1, #4]
	return 0;
}
 80111da:	2000      	movs	r0, #0
 80111dc:	4770      	bx	lr

080111de <_isatty>:

int _isatty(int file)
{
	return 1;
}
 80111de:	2001      	movs	r0, #1
 80111e0:	4770      	bx	lr

080111e2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 80111e2:	2000      	movs	r0, #0
 80111e4:	4770      	bx	lr

080111e6 <_read>:

int _read(int file, char *ptr, int len)
{
 80111e6:	b510      	push	{r4, lr}
 80111e8:	460c      	mov	r4, r1
	/* scanf calls _read() with len=1024, so eat one character at time */
	*ptr = __io_getchar();
 80111ea:	f3af 8000 	nop.w
 80111ee:	7020      	strb	r0, [r4, #0]
	return 1;
}
 80111f0:	2001      	movs	r0, #1
 80111f2:	bd10      	pop	{r4, pc}

080111f4 <ExtExtConfigUidCommandCallback>:
 * @param  uint8_t **UID STM32 UID Return value
 * @retval None
 */
static void ExtExtConfigUidCommandCallback(uint8_t **UID)
{
  *UID = (uint8_t *)STM32_UUID;
 80111f4:	4b01      	ldr	r3, [pc, #4]	; (80111fc <ExtExtConfigUidCommandCallback+0x8>)
 80111f6:	6003      	str	r3, [r0, #0]
}
 80111f8:	4770      	bx	lr
 80111fa:	bf00      	nop
 80111fc:	1fff7a10 	.word	0x1fff7a10

08011200 <ExtConfigCustomCommandCallback>:
{
 8011200:	b538      	push	{r3, r4, r5, lr}
 8011202:	4604      	mov	r4, r0
  BLE_MANAGER_PRINTF("Received Custom Command:\r\n");
 8011204:	484c      	ldr	r0, [pc, #304]	; (8011338 <ExtConfigCustomCommandCallback+0x138>)
 8011206:	f009 f9d5 	bl	801a5b4 <puts>
  BLE_MANAGER_PRINTF("\tCommand Name: <%s>\r\n", CustomCommand->CommandName);
 801120a:	6821      	ldr	r1, [r4, #0]
 801120c:	484b      	ldr	r0, [pc, #300]	; (801133c <ExtConfigCustomCommandCallback+0x13c>)
 801120e:	f009 f94b 	bl	801a4a8 <iprintf>
  BLE_MANAGER_PRINTF("\tCommand Type: <%d>\r\n", CustomCommand->CommandType);
 8011212:	7921      	ldrb	r1, [r4, #4]
 8011214:	484a      	ldr	r0, [pc, #296]	; (8011340 <ExtConfigCustomCommandCallback+0x140>)
 8011216:	f009 f947 	bl	801a4a8 <iprintf>
  switch(CustomCommand->CommandType) { 
 801121a:	7923      	ldrb	r3, [r4, #4]
 801121c:	3b01      	subs	r3, #1
 801121e:	2b04      	cmp	r3, #4
 8011220:	f200 8088 	bhi.w	8011334 <ExtConfigCustomCommandCallback+0x134>
 8011224:	e8df f003 	tbb	[pc, r3]
 8011228:	20544e03 	.word	0x20544e03
 801122c:	57          	.byte	0x57
 801122d:	00          	.byte	0x00
      BLE_MANAGER_PRINTF("\tInt    Value: <%ld>\r\n", CustomCommand->IntValue);
 801122e:	68a1      	ldr	r1, [r4, #8]
 8011230:	4844      	ldr	r0, [pc, #272]	; (8011344 <ExtConfigCustomCommandCallback+0x144>)
 8011232:	f009 f939 	bl	801a4a8 <iprintf>
      if(!strncmp((char *)CustomCommand->CommandName,"FFT_Overlapping",15))
 8011236:	6825      	ldr	r5, [r4, #0]
 8011238:	4943      	ldr	r1, [pc, #268]	; (8011348 <ExtConfigCustomCommandCallback+0x148>)
 801123a:	220f      	movs	r2, #15
 801123c:	4628      	mov	r0, r5
 801123e:	f009 fa51 	bl	801a6e4 <strncmp>
 8011242:	b930      	cbnz	r0, 8011252 <ExtConfigCustomCommandCallback+0x52>
        MotionSP_Parameters.FftOvl= CustomCommand->IntValue;
 8011244:	4b41      	ldr	r3, [pc, #260]	; (801134c <ExtConfigCustomCommandCallback+0x14c>)
 8011246:	68a2      	ldr	r2, [r4, #8]
 8011248:	729a      	strb	r2, [r3, #10]
}
 801124a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        SaveVibrationParamToMemory();
 801124e:	f002 bee7 	b.w	8014020 <SaveVibrationParamToMemory>
      } else if(!strncmp((char *)CustomCommand->CommandName,"AquisitionTime",14)) {
 8011252:	493f      	ldr	r1, [pc, #252]	; (8011350 <ExtConfigCustomCommandCallback+0x150>)
 8011254:	220e      	movs	r2, #14
 8011256:	4628      	mov	r0, r5
 8011258:	f009 fa44 	bl	801a6e4 <strncmp>
 801125c:	2800      	cmp	r0, #0
 801125e:	d169      	bne.n	8011334 <ExtConfigCustomCommandCallback+0x134>
        MotionSP_Parameters.tacq= CustomCommand->IntValue;
 8011260:	68a2      	ldr	r2, [r4, #8]
 8011262:	4b3a      	ldr	r3, [pc, #232]	; (801134c <ExtConfigCustomCommandCallback+0x14c>)
        AcceleroParams.fs= CustomCommand->IntValue;
 8011264:	811a      	strh	r2, [r3, #8]
        SaveVibrationParamToMemory();
 8011266:	e7f0      	b.n	801124a <ExtConfigCustomCommandCallback+0x4a>
      BLE_MANAGER_PRINTF("\tInt     Enum: <%ld>\r\n", CustomCommand->IntValue);
 8011268:	68a1      	ldr	r1, [r4, #8]
 801126a:	483a      	ldr	r0, [pc, #232]	; (8011354 <ExtConfigCustomCommandCallback+0x154>)
 801126c:	f009 f91c 	bl	801a4a8 <iprintf>
      if(!strncmp((char *)CustomCommand->CommandName,"SensorFullScale",15))
 8011270:	6825      	ldr	r5, [r4, #0]
 8011272:	4939      	ldr	r1, [pc, #228]	; (8011358 <ExtConfigCustomCommandCallback+0x158>)
 8011274:	220f      	movs	r2, #15
 8011276:	4628      	mov	r0, r5
 8011278:	f009 fa34 	bl	801a6e4 <strncmp>
 801127c:	b910      	cbnz	r0, 8011284 <ExtConfigCustomCommandCallback+0x84>
        AcceleroParams.fs= CustomCommand->IntValue;
 801127e:	68a2      	ldr	r2, [r4, #8]
 8011280:	4b36      	ldr	r3, [pc, #216]	; (801135c <ExtConfigCustomCommandCallback+0x15c>)
 8011282:	e7ef      	b.n	8011264 <ExtConfigCustomCommandCallback+0x64>
      } else if(!strncmp((char *)CustomCommand->CommandName,"SensorOutputDataRate",20)) {
 8011284:	4936      	ldr	r1, [pc, #216]	; (8011360 <ExtConfigCustomCommandCallback+0x160>)
 8011286:	2214      	movs	r2, #20
 8011288:	4628      	mov	r0, r5
 801128a:	f009 fa2b 	bl	801a6e4 <strncmp>
 801128e:	b920      	cbnz	r0, 801129a <ExtConfigCustomCommandCallback+0x9a>
        AcceleroParams.AccOdr= CustomCommand->IntValue;
 8011290:	4b32      	ldr	r3, [pc, #200]	; (801135c <ExtConfigCustomCommandCallback+0x15c>)
 8011292:	8922      	ldrh	r2, [r4, #8]
 8011294:	801a      	strh	r2, [r3, #0]
          MotionSP_Parameters.window= FLAT_TOP;
 8011296:	809a      	strh	r2, [r3, #4]
 8011298:	e7d7      	b.n	801124a <ExtConfigCustomCommandCallback+0x4a>
      } else if(!strncmp((char *)CustomCommand->CommandName,"FFT_Size",8)) {
 801129a:	4932      	ldr	r1, [pc, #200]	; (8011364 <ExtConfigCustomCommandCallback+0x164>)
 801129c:	2208      	movs	r2, #8
 801129e:	4628      	mov	r0, r5
 80112a0:	f009 fa20 	bl	801a6e4 <strncmp>
 80112a4:	b918      	cbnz	r0, 80112ae <ExtConfigCustomCommandCallback+0xae>
        MotionSP_Parameters.FftSize= CustomCommand->IntValue;
 80112a6:	4b29      	ldr	r3, [pc, #164]	; (801134c <ExtConfigCustomCommandCallback+0x14c>)
 80112a8:	68a2      	ldr	r2, [r4, #8]
 80112aa:	801a      	strh	r2, [r3, #0]
        SaveVibrationParamToMemory();
 80112ac:	e7cd      	b.n	801124a <ExtConfigCustomCommandCallback+0x4a>
      } else if(!strncmp((char *)CustomCommand->CommandName,"NumberOfBubrange",16)) {
 80112ae:	492e      	ldr	r1, [pc, #184]	; (8011368 <ExtConfigCustomCommandCallback+0x168>)
 80112b0:	2210      	movs	r2, #16
 80112b2:	4628      	mov	r0, r5
 80112b4:	f009 fa16 	bl	801a6e4 <strncmp>
 80112b8:	2800      	cmp	r0, #0
 80112ba:	d13b      	bne.n	8011334 <ExtConfigCustomCommandCallback+0x134>
        MotionSP_Parameters.subrange_num= CustomCommand->IntValue;
 80112bc:	4b23      	ldr	r3, [pc, #140]	; (801134c <ExtConfigCustomCommandCallback+0x14c>)
 80112be:	68a2      	ldr	r2, [r4, #8]
 80112c0:	819a      	strh	r2, [r3, #12]
        SaveVibrationParamToMemory();
 80112c2:	e7c2      	b.n	801124a <ExtConfigCustomCommandCallback+0x4a>
      BLE_MANAGER_PRINTF("\tInt    Value: <%ld>\r\n", CustomCommand->IntValue);
 80112c4:	68a1      	ldr	r1, [r4, #8]
 80112c6:	481f      	ldr	r0, [pc, #124]	; (8011344 <ExtConfigCustomCommandCallback+0x144>)
}
 80112c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      BLE_MANAGER_PRINTF("\tString Value: <%s>\r\n", CustomCommand->StringValue);
 80112cc:	f009 b8ec 	b.w	801a4a8 <iprintf>
 80112d0:	68e1      	ldr	r1, [r4, #12]
 80112d2:	4826      	ldr	r0, [pc, #152]	; (801136c <ExtConfigCustomCommandCallback+0x16c>)
 80112d4:	e7f8      	b.n	80112c8 <ExtConfigCustomCommandCallback+0xc8>
      BLE_MANAGER_PRINTF("\tString  Enum: <%s>\r\n", CustomCommand->StringValue);
 80112d6:	68e1      	ldr	r1, [r4, #12]
 80112d8:	4825      	ldr	r0, [pc, #148]	; (8011370 <ExtConfigCustomCommandCallback+0x170>)
 80112da:	f009 f8e5 	bl	801a4a8 <iprintf>
      if(!strncmp((char *)CustomCommand->CommandName,"FFT_WindowType",15))
 80112de:	4925      	ldr	r1, [pc, #148]	; (8011374 <ExtConfigCustomCommandCallback+0x174>)
 80112e0:	6820      	ldr	r0, [r4, #0]
 80112e2:	f7f2 fff5 	bl	80042d0 <strcmp>
 80112e6:	bb28      	cbnz	r0, 8011334 <ExtConfigCustomCommandCallback+0x134>
        if(!strncmp((char *)CustomCommand->StringValue,"Rectangular",11)) {
 80112e8:	68e4      	ldr	r4, [r4, #12]
 80112ea:	4923      	ldr	r1, [pc, #140]	; (8011378 <ExtConfigCustomCommandCallback+0x178>)
 80112ec:	220b      	movs	r2, #11
 80112ee:	4620      	mov	r0, r4
 80112f0:	f009 f9f8 	bl	801a6e4 <strncmp>
 80112f4:	b910      	cbnz	r0, 80112fc <ExtConfigCustomCommandCallback+0xfc>
          MotionSP_Parameters.window= RECTANGULAR;
 80112f6:	4b15      	ldr	r3, [pc, #84]	; (801134c <ExtConfigCustomCommandCallback+0x14c>)
 80112f8:	8098      	strh	r0, [r3, #4]
 80112fa:	e7a6      	b.n	801124a <ExtConfigCustomCommandCallback+0x4a>
        } else if(!strncmp((char *)CustomCommand->StringValue,"Hanning",7)) {
 80112fc:	491f      	ldr	r1, [pc, #124]	; (801137c <ExtConfigCustomCommandCallback+0x17c>)
 80112fe:	2207      	movs	r2, #7
 8011300:	4620      	mov	r0, r4
 8011302:	f009 f9ef 	bl	801a6e4 <strncmp>
 8011306:	b910      	cbnz	r0, 801130e <ExtConfigCustomCommandCallback+0x10e>
          MotionSP_Parameters.window= HANNING;
 8011308:	4b10      	ldr	r3, [pc, #64]	; (801134c <ExtConfigCustomCommandCallback+0x14c>)
 801130a:	2201      	movs	r2, #1
 801130c:	e7c3      	b.n	8011296 <ExtConfigCustomCommandCallback+0x96>
        } else if(!strncmp((char *)CustomCommand->StringValue,"Hamming",7)) {
 801130e:	491c      	ldr	r1, [pc, #112]	; (8011380 <ExtConfigCustomCommandCallback+0x180>)
 8011310:	2207      	movs	r2, #7
 8011312:	4620      	mov	r0, r4
 8011314:	f009 f9e6 	bl	801a6e4 <strncmp>
 8011318:	b910      	cbnz	r0, 8011320 <ExtConfigCustomCommandCallback+0x120>
          MotionSP_Parameters.window= HAMMING;
 801131a:	4b0c      	ldr	r3, [pc, #48]	; (801134c <ExtConfigCustomCommandCallback+0x14c>)
 801131c:	2202      	movs	r2, #2
 801131e:	e7ba      	b.n	8011296 <ExtConfigCustomCommandCallback+0x96>
        } else if(!strncmp((char *)CustomCommand->StringValue,"FlatTop",7)) {
 8011320:	4918      	ldr	r1, [pc, #96]	; (8011384 <ExtConfigCustomCommandCallback+0x184>)
 8011322:	2207      	movs	r2, #7
 8011324:	4620      	mov	r0, r4
 8011326:	f009 f9dd 	bl	801a6e4 <strncmp>
 801132a:	2800      	cmp	r0, #0
 801132c:	d18d      	bne.n	801124a <ExtConfigCustomCommandCallback+0x4a>
          MotionSP_Parameters.window= FLAT_TOP;
 801132e:	4b07      	ldr	r3, [pc, #28]	; (801134c <ExtConfigCustomCommandCallback+0x14c>)
 8011330:	2203      	movs	r2, #3
 8011332:	e7b0      	b.n	8011296 <ExtConfigCustomCommandCallback+0x96>
}
 8011334:	bd38      	pop	{r3, r4, r5, pc}
 8011336:	bf00      	nop
 8011338:	0802208f 	.word	0x0802208f
 801133c:	080220a9 	.word	0x080220a9
 8011340:	080220bf 	.word	0x080220bf
 8011344:	080220d5 	.word	0x080220d5
 8011348:	080220ec 	.word	0x080220ec
 801134c:	2000ae78 	.word	0x2000ae78
 8011350:	080220fc 	.word	0x080220fc
 8011354:	0802210b 	.word	0x0802210b
 8011358:	08022122 	.word	0x08022122
 801135c:	2000b664 	.word	0x2000b664
 8011360:	08022132 	.word	0x08022132
 8011364:	08022147 	.word	0x08022147
 8011368:	08022150 	.word	0x08022150
 801136c:	08022161 	.word	0x08022161
 8011370:	08022177 	.word	0x08022177
 8011374:	0802218d 	.word	0x0802218d
 8011378:	0802206b 	.word	0x0802206b
 801137c:	08022077 	.word	0x08022077
 8011380:	0802207f 	.word	0x0802207f
 8011384:	08022087 	.word	0x08022087

08011388 <ExtConfigVersionFwCommandCallback>:
 * @brief  Callback Function for answering to VersionFw command
 * @param  uint8_t *Answer Return String
 * @retval None
 */
static void ExtConfigVersionFwCommandCallback(uint8_t *Answer)
{
 8011388:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  sprintf((char *)Answer,"%s_%s_%c.%c.%c",
 801138a:	2334      	movs	r3, #52	; 0x34
 801138c:	2230      	movs	r2, #48	; 0x30
 801138e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8011392:	2332      	movs	r3, #50	; 0x32
 8011394:	9300      	str	r3, [sp, #0]
 8011396:	4a04      	ldr	r2, [pc, #16]	; (80113a8 <ExtConfigVersionFwCommandCallback+0x20>)
 8011398:	4b04      	ldr	r3, [pc, #16]	; (80113ac <ExtConfigVersionFwCommandCallback+0x24>)
 801139a:	4905      	ldr	r1, [pc, #20]	; (80113b0 <ExtConfigVersionFwCommandCallback+0x28>)
 801139c:	f009 f92a 	bl	801a5f4 <siprintf>
      BLE_STM32_MICRO,
      BLE_FW_PACKAGENAME,
      BLE_VERSION_FW_MAJOR,
      BLE_VERSION_FW_MINOR,
      BLE_VERSION_FW_PATCH);
}
 80113a0:	b005      	add	sp, #20
 80113a2:	f85d fb04 	ldr.w	pc, [sp], #4
 80113a6:	bf00      	nop
 80113a8:	080221ac 	.word	0x080221ac
 80113ac:	0802219c 	.word	0x0802219c
 80113b0:	080221b1 	.word	0x080221b1

080113b4 <ExtConfigHelpCommandCallback>:
  sprintf((char *)Answer,"List of available command:\n"
 80113b4:	4901      	ldr	r1, [pc, #4]	; (80113bc <ExtConfigHelpCommandCallback+0x8>)
 80113b6:	f009 b98d 	b.w	801a6d4 <strcpy>
 80113ba:	bf00      	nop
 80113bc:	080221c0 	.word	0x080221c0

080113c0 <ExtConfigSetNameCommandCallback>:
 * @brief  Callback Function for managing the SetName command
 * @param  uint8_t *NewName
 * @retval None
 */
static void ExtConfigSetNameCommandCallback(uint8_t *NewName)
{ 
 80113c0:	b507      	push	{r0, r1, r2, lr}
 80113c2:	4601      	mov	r1, r0
  BLE_MANAGER_PRINTF("New Board Name = <%s>\r\n", NewName);
 80113c4:	9001      	str	r0, [sp, #4]
 80113c6:	4810      	ldr	r0, [pc, #64]	; (8011408 <ExtConfigSetNameCommandCallback+0x48>)
 80113c8:	f009 f86e 	bl	801a4a8 <iprintf>
  /* Change the Board Name */
  sprintf(BlueNRG_StackValue.BoardName,"%s",NewName);
 80113cc:	9901      	ldr	r1, [sp, #4]
 80113ce:	480f      	ldr	r0, [pc, #60]	; (801140c <ExtConfigSetNameCommandCallback+0x4c>)
 80113d0:	f009 f980 	bl	801a6d4 <strcpy>
  
  for(int i=0; i<7; i++)
 80113d4:	4a0d      	ldr	r2, [pc, #52]	; (801140c <ExtConfigSetNameCommandCallback+0x4c>)
    NodeName[i+1]= BlueNRG_StackValue.BoardName[i];
 80113d6:	490e      	ldr	r1, [pc, #56]	; (8011410 <ExtConfigSetNameCommandCallback+0x50>)
  for(int i=0; i<7; i++)
 80113d8:	2300      	movs	r3, #0
    NodeName[i+1]= BlueNRG_StackValue.BoardName[i];
 80113da:	3301      	adds	r3, #1
 80113dc:	f812 0b01 	ldrb.w	r0, [r2], #1
 80113e0:	5458      	strb	r0, [r3, r1]
  for(int i=0; i<7; i++)
 80113e2:	2b07      	cmp	r3, #7
 80113e4:	d1f9      	bne.n	80113da <ExtConfigSetNameCommandCallback+0x1a>
  
  MDM_SaveGMD(GMD_NODE_NAME,(void *)&NodeName);
 80113e6:	490a      	ldr	r1, [pc, #40]	; (8011410 <ExtConfigSetNameCommandCallback+0x50>)
 80113e8:	2008      	movs	r0, #8
 80113ea:	f7fb fb13 	bl	800ca14 <MDM_SaveGMD>
  NecessityToSaveMetaDataManager=1;
 80113ee:	4b09      	ldr	r3, [pc, #36]	; (8011414 <ExtConfigSetNameCommandCallback+0x54>)
  
  BLE_MANAGER_PRINTF("\nThe node nome has been updated\r\n");
 80113f0:	4809      	ldr	r0, [pc, #36]	; (8011418 <ExtConfigSetNameCommandCallback+0x58>)
  NecessityToSaveMetaDataManager=1;
 80113f2:	2201      	movs	r2, #1
 80113f4:	601a      	str	r2, [r3, #0]
  BLE_MANAGER_PRINTF("\nThe node nome has been updated\r\n");
 80113f6:	f009 f8dd 	bl	801a5b4 <puts>
  BLE_MANAGER_PRINTF("Disconnecting and riconnecting to see the new node name\r\n");
 80113fa:	4808      	ldr	r0, [pc, #32]	; (801141c <ExtConfigSetNameCommandCallback+0x5c>)
}
 80113fc:	b003      	add	sp, #12
 80113fe:	f85d eb04 	ldr.w	lr, [sp], #4
  BLE_MANAGER_PRINTF("Disconnecting and riconnecting to see the new node name\r\n");
 8011402:	f009 b8d7 	b.w	801a5b4 <puts>
 8011406:	bf00      	nop
 8011408:	08022237 	.word	0x08022237
 801140c:	200099b1 	.word	0x200099b1
 8011410:	2000bec4 	.word	0x2000bec4
 8011414:	200021e8 	.word	0x200021e8
 8011418:	0802224f 	.word	0x0802224f
 801141c:	08022270 	.word	0x08022270

08011420 <ExtConfigInfoCommandCallback>:
{
 8011420:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011424:	b091      	sub	sp, #68	; 0x44
  getBlueNRG2_Version(&hwVersion, &fwVersion);
 8011426:	f10d 013e 	add.w	r1, sp, #62	; 0x3e
{
 801142a:	4680      	mov	r8, r0
  getBlueNRG2_Version(&hwVersion, &fwVersion);
 801142c:	f10d 003d 	add.w	r0, sp, #61	; 0x3d
 8011430:	f002 fd50 	bl	8013ed4 <getBlueNRG2_Version>
  sprintf((char *)Answer,"STMicroelectronics %s:\n"
 8011434:	f8bd 403e 	ldrh.w	r4, [sp, #62]	; 0x3e
 8011438:	f89d 903d 	ldrb.w	r9, [sp, #61]	; 0x3d
    HAL_GetHalVersion() >>24,
 801143c:	f7f6 f8ac 	bl	8007598 <HAL_GetHalVersion>
 8011440:	4605      	mov	r5, r0
    (HAL_GetHalVersion() >>16)&0xFF,
 8011442:	f7f6 f8a9 	bl	8007598 <HAL_GetHalVersion>
 8011446:	4606      	mov	r6, r0
    (HAL_GetHalVersion() >> 8)&0xFF,
 8011448:	f7f6 f8a6 	bl	8007598 <HAL_GetHalVersion>
 801144c:	4607      	mov	r7, r0
    HAL_GetHalVersion()      &0xFF,
 801144e:	f7f6 f8a3 	bl	8007598 <HAL_GetHalVersion>
  sprintf((char *)Answer,"STMicroelectronics %s:\n"
 8011452:	4b16      	ldr	r3, [pc, #88]	; (80114ac <ExtConfigInfoCommandCallback+0x8c>)
 8011454:	930d      	str	r3, [sp, #52]	; 0x34
 8011456:	4b16      	ldr	r3, [pc, #88]	; (80114b0 <ExtConfigInfoCommandCallback+0x90>)
 8011458:	930c      	str	r3, [sp, #48]	; 0x30
    ('a' + (fwVersion&0xF)),
 801145a:	f004 030f 	and.w	r3, r4, #15
  sprintf((char *)Answer,"STMicroelectronics %s:\n"
 801145e:	3361      	adds	r3, #97	; 0x61
 8011460:	9307      	str	r3, [sp, #28]
 8011462:	f3c4 1303 	ubfx	r3, r4, #4, #4
 8011466:	9306      	str	r3, [sp, #24]
 8011468:	f009 030f 	and.w	r3, r9, #15
 801146c:	9304      	str	r3, [sp, #16]
 801146e:	ea4f 1319 	mov.w	r3, r9, lsr #4
 8011472:	9303      	str	r3, [sp, #12]
 8011474:	4b0f      	ldr	r3, [pc, #60]	; (80114b4 <ExtConfigInfoCommandCallback+0x94>)
 8011476:	9302      	str	r3, [sp, #8]
 8011478:	b2c0      	uxtb	r0, r0
 801147a:	f3c7 2707 	ubfx	r7, r7, #8, #8
 801147e:	f3c6 4607 	ubfx	r6, r6, #16, #8
 8011482:	0e2d      	lsrs	r5, r5, #24
 8011484:	f3c4 2403 	ubfx	r4, r4, #8, #4
 8011488:	2334      	movs	r3, #52	; 0x34
 801148a:	2230      	movs	r2, #48	; 0x30
 801148c:	e9cd 3200 	strd	r3, r2, [sp]
 8011490:	900b      	str	r0, [sp, #44]	; 0x2c
 8011492:	4a09      	ldr	r2, [pc, #36]	; (80114b8 <ExtConfigInfoCommandCallback+0x98>)
 8011494:	4909      	ldr	r1, [pc, #36]	; (80114bc <ExtConfigInfoCommandCallback+0x9c>)
 8011496:	970a      	str	r7, [sp, #40]	; 0x28
 8011498:	9609      	str	r6, [sp, #36]	; 0x24
 801149a:	9508      	str	r5, [sp, #32]
 801149c:	9405      	str	r4, [sp, #20]
 801149e:	2332      	movs	r3, #50	; 0x32
 80114a0:	4640      	mov	r0, r8
 80114a2:	f009 f8a7 	bl	801a5f4 <siprintf>
}
 80114a6:	b011      	add	sp, #68	; 0x44
 80114a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80114ac:	0802233b 	.word	0x0802233b
 80114b0:	08022344 	.word	0x08022344
 80114b4:	08022350 	.word	0x08022350
 80114b8:	0802219c 	.word	0x0802219c
 80114bc:	080222a9 	.word	0x080222a9

080114c0 <DisconnectionCompletedFunction>:
{
 80114c0:	b570      	push	{r4, r5, r6, lr}
  if(EnvironmentalTimerEnabled) {
 80114c2:	4d20      	ldr	r5, [pc, #128]	; (8011544 <DisconnectionCompletedFunction+0x84>)
  connected = FALSE;
 80114c4:	4c20      	ldr	r4, [pc, #128]	; (8011548 <DisconnectionCompletedFunction+0x88>)
  if(EnvironmentalTimerEnabled) {
 80114c6:	782a      	ldrb	r2, [r5, #0]
  connected = FALSE;
 80114c8:	2100      	movs	r1, #0
 80114ca:	7021      	strb	r1, [r4, #0]
  if(EnvironmentalTimerEnabled) {
 80114cc:	b13a      	cbz	r2, 80114de <DisconnectionCompletedFunction+0x1e>
    if(HAL_TIM_OC_Stop_IT(&TimCCHandle, TIM_CHANNEL_1) != HAL_OK){
 80114ce:	481f      	ldr	r0, [pc, #124]	; (801154c <DisconnectionCompletedFunction+0x8c>)
 80114d0:	f7f9 fc90 	bl	800adf4 <HAL_TIM_OC_Stop_IT>
 80114d4:	b108      	cbz	r0, 80114da <DisconnectionCompletedFunction+0x1a>
      Error_Handler();
 80114d6:	f002 fda2 	bl	801401e <Error_Handler>
    EnvironmentalTimerEnabled= 0;
 80114da:	2300      	movs	r3, #0
 80114dc:	702b      	strb	r3, [r5, #0]
  if(AudioLevelTimerEnabled) {
 80114de:	4d1c      	ldr	r5, [pc, #112]	; (8011550 <DisconnectionCompletedFunction+0x90>)
 80114e0:	782a      	ldrb	r2, [r5, #0]
 80114e2:	b152      	cbz	r2, 80114fa <DisconnectionCompletedFunction+0x3a>
    AudioLevelEnable= 0;
 80114e4:	4b1b      	ldr	r3, [pc, #108]	; (8011554 <DisconnectionCompletedFunction+0x94>)
    if(HAL_TIM_OC_Stop_IT(&TimCCHandle, TIM_CHANNEL_2) != HAL_OK){
 80114e6:	4819      	ldr	r0, [pc, #100]	; (801154c <DisconnectionCompletedFunction+0x8c>)
    AudioLevelEnable= 0;
 80114e8:	2600      	movs	r6, #0
    if(HAL_TIM_OC_Stop_IT(&TimCCHandle, TIM_CHANNEL_2) != HAL_OK){
 80114ea:	2104      	movs	r1, #4
    AudioLevelEnable= 0;
 80114ec:	701e      	strb	r6, [r3, #0]
    if(HAL_TIM_OC_Stop_IT(&TimCCHandle, TIM_CHANNEL_2) != HAL_OK){
 80114ee:	f7f9 fc81 	bl	800adf4 <HAL_TIM_OC_Stop_IT>
 80114f2:	b108      	cbz	r0, 80114f8 <DisconnectionCompletedFunction+0x38>
      Error_Handler();
 80114f4:	f002 fd93 	bl	801401e <Error_Handler>
    AudioLevelTimerEnabled= 0;
 80114f8:	702e      	strb	r6, [r5, #0]
  if(InertialTimerEnabled){
 80114fa:	4d17      	ldr	r5, [pc, #92]	; (8011558 <DisconnectionCompletedFunction+0x98>)
 80114fc:	782a      	ldrb	r2, [r5, #0]
 80114fe:	b142      	cbz	r2, 8011512 <DisconnectionCompletedFunction+0x52>
    if(HAL_TIM_OC_Stop_IT(&TimCCHandle, TIM_CHANNEL_3) != HAL_OK){
 8011500:	4812      	ldr	r0, [pc, #72]	; (801154c <DisconnectionCompletedFunction+0x8c>)
 8011502:	2108      	movs	r1, #8
 8011504:	f7f9 fc76 	bl	800adf4 <HAL_TIM_OC_Stop_IT>
 8011508:	b108      	cbz	r0, 801150e <DisconnectionCompletedFunction+0x4e>
      Error_Handler();
 801150a:	f002 fd88 	bl	801401e <Error_Handler>
    InertialTimerEnabled= 0;
 801150e:	2300      	movs	r3, #0
 8011510:	702b      	strb	r3, [r5, #0]
  if(PredictiveMaintenance)
 8011512:	4d12      	ldr	r5, [pc, #72]	; (801155c <DisconnectionCompletedFunction+0x9c>)
 8011514:	682b      	ldr	r3, [r5, #0]
 8011516:	b153      	cbz	r3, 801152e <DisconnectionCompletedFunction+0x6e>
    disable_FIFO();
 8011518:	f001 fc50 	bl	8012dbc <disable_FIFO>
    EnableDisable_ACC_HP_Filter(HPF_NONE);
 801151c:	2004      	movs	r0, #4
 801151e:	f001 f875 	bl	801260c <EnableDisable_ACC_HP_Filter>
    FFT_Alarm= 0;
 8011522:	4a0f      	ldr	r2, [pc, #60]	; (8011560 <DisconnectionCompletedFunction+0xa0>)
    PredictiveMaintenance= 0;
 8011524:	2300      	movs	r3, #0
 8011526:	602b      	str	r3, [r5, #0]
    FFT_Alarm= 0;
 8011528:	6013      	str	r3, [r2, #0]
    MotionSP_Running = 0;
 801152a:	4a0e      	ldr	r2, [pc, #56]	; (8011564 <DisconnectionCompletedFunction+0xa4>)
 801152c:	7013      	strb	r3, [r2, #0]
  SizeOfUpdateBlueFW = 0;
 801152e:	2300      	movs	r3, #0
  BLE_MANAGER_PRINTF("Call to DisconnectionCompletedFunction\r\n");
 8011530:	480d      	ldr	r0, [pc, #52]	; (8011568 <DisconnectionCompletedFunction+0xa8>)
  SizeOfUpdateBlueFW = 0;
 8011532:	6063      	str	r3, [r4, #4]
  BLE_MANAGER_PRINTF("Call to DisconnectionCompletedFunction\r\n");
 8011534:	f009 f83e 	bl	801a5b4 <puts>
}
 8011538:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  BLE_MANAGER_DELAY(100);
 801153c:	2064      	movs	r0, #100	; 0x64
 801153e:	f002 bd5f 	b.w	8014000 <HAL_Delay>
 8011542:	bf00      	nop
 8011544:	20009869 	.word	0x20009869
 8011548:	2000968c 	.word	0x2000968c
 801154c:	2000becc 	.word	0x2000becc
 8011550:	2000986a 	.word	0x2000986a
 8011554:	20009858 	.word	0x20009858
 8011558:	2000986b 	.word	0x2000986b
 801155c:	2000986c 	.word	0x2000986c
 8011560:	200096f4 	.word	0x200096f4
 8011564:	20009704 	.word	0x20009704
 8011568:	08022363 	.word	0x08022363

0801156c <ConnectionCompletedFunction>:
{
 801156c:	b508      	push	{r3, lr}
  BLE_ConnectionHandle = ConnectionHandle;
 801156e:	4b06      	ldr	r3, [pc, #24]	; (8011588 <ConnectionCompletedFunction+0x1c>)
  connected = TRUE;
 8011570:	2201      	movs	r2, #1
  BLE_ConnectionHandle = ConnectionHandle;
 8011572:	8118      	strh	r0, [r3, #8]
  BLE_MANAGER_PRINTF("Call to ConnectionCompletedFunction\r\n");
 8011574:	4805      	ldr	r0, [pc, #20]	; (801158c <ConnectionCompletedFunction+0x20>)
  connected = TRUE;
 8011576:	701a      	strb	r2, [r3, #0]
  BLE_MANAGER_PRINTF("Call to ConnectionCompletedFunction\r\n");
 8011578:	f009 f81c 	bl	801a5b4 <puts>
}
 801157c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  BLE_MANAGER_DELAY(100);
 8011580:	2064      	movs	r0, #100	; 0x64
 8011582:	f002 bd3d 	b.w	8014000 <HAL_Delay>
 8011586:	bf00      	nop
 8011588:	2000968c 	.word	0x2000968c
 801158c:	0802238b 	.word	0x0802238b

08011590 <ExtConfigReadCustomCommandsCallback>:
{
 8011590:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    int32_t ValidIntValues[]={2,4,8,16,BLE_MANAGER_CUSTOM_COMMAND_VALUE_NAN};
 8011594:	4c55      	ldr	r4, [pc, #340]	; (80116ec <ExtConfigReadCustomCommandsCallback+0x15c>)
    if(AddCustomCommand("SensorFullScale", //Name
 8011596:	f8df 9184 	ldr.w	r9, [pc, #388]	; 801171c <ExtConfigReadCustomCommandsCallback+0x18c>
{
 801159a:	b095      	sub	sp, #84	; 0x54
 801159c:	4680      	mov	r8, r0
  ClearCustomCommandsList();
 801159e:	f7fc f8ab 	bl	800d6f8 <ClearCustomCommandsList>
    int32_t ValidIntValues[]={2,4,8,16,BLE_MANAGER_CUSTOM_COMMAND_VALUE_NAN};
 80115a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80115a4:	ad04      	add	r5, sp, #16
 80115a6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80115a8:	6823      	ldr	r3, [r4, #0]
 80115aa:	602b      	str	r3, [r5, #0]
    if(AddCustomCommand("SensorFullScale", //Name
 80115ac:	ab04      	add	r3, sp, #16
 80115ae:	9300      	str	r3, [sp, #0]
 80115b0:	4b4f      	ldr	r3, [pc, #316]	; (80116f0 <ExtConfigReadCustomCommandsCallback+0x160>)
 80115b2:	4850      	ldr	r0, [pc, #320]	; (80116f4 <ExtConfigReadCustomCommandsCallback+0x164>)
 80115b4:	f8cd 800c 	str.w	r8, [sp, #12]
 80115b8:	2700      	movs	r7, #0
 80115ba:	2104      	movs	r1, #4
 80115bc:	f8cd 9008 	str.w	r9, [sp, #8]
 80115c0:	9701      	str	r7, [sp, #4]
 80115c2:	461a      	mov	r2, r3
 80115c4:	f7fc f8aa 	bl	800d71c <AddCustomCommand>
      BLE_MANAGER_PRINTF("Added Command <%s>\r\n","SensorFullScale");
 80115c8:	494a      	ldr	r1, [pc, #296]	; (80116f4 <ExtConfigReadCustomCommandsCallback+0x164>)
    if(AddCustomCommand("SensorFullScale", //Name
 80115ca:	2800      	cmp	r0, #0
 80115cc:	d033      	beq.n	8011636 <ExtConfigReadCustomCommandsCallback+0xa6>
      BLE_MANAGER_PRINTF("Added Command <%s>\r\n","SensorFullScale");
 80115ce:	484a      	ldr	r0, [pc, #296]	; (80116f8 <ExtConfigReadCustomCommandsCallback+0x168>)
    int32_t ValidIntValues[]={13,26,52,104,208,416,833,1660,3330,6660,BLE_MANAGER_CUSTOM_COMMAND_VALUE_NAN};
 80115d0:	1d26      	adds	r6, r4, #4
      BLE_MANAGER_PRINTF("Added Command <%s>\r\n","SensorFullScale");
 80115d2:	f008 ff69 	bl	801a4a8 <iprintf>
    int32_t ValidIntValues[]={13,26,52,104,208,416,833,1660,3330,6660,BLE_MANAGER_CUSTOM_COMMAND_VALUE_NAN};
 80115d6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80115d8:	ad09      	add	r5, sp, #36	; 0x24
 80115da:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80115dc:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80115de:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80115e0:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
    if(AddCustomCommand("SensorOutputDataRate", //Name
 80115e4:	4b42      	ldr	r3, [pc, #264]	; (80116f0 <ExtConfigReadCustomCommandsCallback+0x160>)
    int32_t ValidIntValues[]={13,26,52,104,208,416,833,1660,3330,6660,BLE_MANAGER_CUSTOM_COMMAND_VALUE_NAN};
 80115e6:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    if(AddCustomCommand("SensorOutputDataRate", //Name
 80115ea:	ad09      	add	r5, sp, #36	; 0x24
 80115ec:	2104      	movs	r1, #4
 80115ee:	e9cd 9802 	strd	r9, r8, [sp, #8]
 80115f2:	4842      	ldr	r0, [pc, #264]	; (80116fc <ExtConfigReadCustomCommandsCallback+0x16c>)
 80115f4:	9701      	str	r7, [sp, #4]
 80115f6:	9500      	str	r5, [sp, #0]
 80115f8:	461a      	mov	r2, r3
 80115fa:	f7fc f88f 	bl	800d71c <AddCustomCommand>
      BLE_MANAGER_PRINTF("Added Command <%s>\r\n","SensorOutputDataRate");
 80115fe:	493f      	ldr	r1, [pc, #252]	; (80116fc <ExtConfigReadCustomCommandsCallback+0x16c>)
    if(AddCustomCommand("SensorOutputDataRate", //Name
 8011600:	b1c8      	cbz	r0, 8011636 <ExtConfigReadCustomCommandsCallback+0xa6>
      BLE_MANAGER_PRINTF("Added Command <%s>\r\n","SensorOutputDataRate");
 8011602:	483d      	ldr	r0, [pc, #244]	; (80116f8 <ExtConfigReadCustomCommandsCallback+0x168>)
 8011604:	f008 ff50 	bl	801a4a8 <iprintf>
    char *ValidStringValues[]={"Rectangular", "Hanning","Hamming","FlatTop",NULL};
 8011608:	f104 0c30 	add.w	ip, r4, #48	; 0x30
 801160c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8011610:	462e      	mov	r6, r5
 8011612:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8011614:	f8dc 3000 	ldr.w	r3, [ip]
 8011618:	6033      	str	r3, [r6, #0]
    if(AddCustomCommand("FFT_WindowType", //Name
 801161a:	4b39      	ldr	r3, [pc, #228]	; (8011700 <ExtConfigReadCustomCommandsCallback+0x170>)
 801161c:	4839      	ldr	r0, [pc, #228]	; (8011704 <ExtConfigReadCustomCommandsCallback+0x174>)
 801161e:	f8cd 800c 	str.w	r8, [sp, #12]
 8011622:	e9cd 7301 	strd	r7, r3, [sp, #4]
 8011626:	4b32      	ldr	r3, [pc, #200]	; (80116f0 <ExtConfigReadCustomCommandsCallback+0x160>)
 8011628:	9500      	str	r5, [sp, #0]
 801162a:	461a      	mov	r2, r3
 801162c:	2105      	movs	r1, #5
 801162e:	f7fc f875 	bl	800d71c <AddCustomCommand>
 8011632:	b910      	cbnz	r0, 801163a <ExtConfigReadCustomCommandsCallback+0xaa>
      BLE_MANAGER_PRINTF("Error Adding Command <%s>\r\n","FFT_WindowType");
 8011634:	4933      	ldr	r1, [pc, #204]	; (8011704 <ExtConfigReadCustomCommandsCallback+0x174>)
      BLE_MANAGER_PRINTF("Error Adding Command <%s>\r\n","SensorFullScale");
 8011636:	4834      	ldr	r0, [pc, #208]	; (8011708 <ExtConfigReadCustomCommandsCallback+0x178>)
 8011638:	e052      	b.n	80116e0 <ExtConfigReadCustomCommandsCallback+0x150>
      BLE_MANAGER_PRINTF("Added Command <%s>\r\n","FFT_WindowType");
 801163a:	4932      	ldr	r1, [pc, #200]	; (8011704 <ExtConfigReadCustomCommandsCallback+0x174>)
 801163c:	482e      	ldr	r0, [pc, #184]	; (80116f8 <ExtConfigReadCustomCommandsCallback+0x168>)
 801163e:	f008 ff33 	bl	801a4a8 <iprintf>
    int32_t ValidIntValues[]={256,512,1024,BLE_MANAGER_CUSTOM_COMMAND_VALUE_NAN};
 8011642:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011646:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8011648:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
    if(AddCustomCommand("FFT_Size", //Name
 801164c:	4b28      	ldr	r3, [pc, #160]	; (80116f0 <ExtConfigReadCustomCommandsCallback+0x160>)
 801164e:	482f      	ldr	r0, [pc, #188]	; (801170c <ExtConfigReadCustomCommandsCallback+0x17c>)
 8011650:	e9cd 9802 	strd	r9, r8, [sp, #8]
 8011654:	e9cd 5700 	strd	r5, r7, [sp]
 8011658:	461a      	mov	r2, r3
 801165a:	2104      	movs	r1, #4
 801165c:	f7fc f85e 	bl	800d71c <AddCustomCommand>
 8011660:	b908      	cbnz	r0, 8011666 <ExtConfigReadCustomCommandsCallback+0xd6>
      BLE_MANAGER_PRINTF("Error Adding Command <%s>\r\n","FFT_Size");
 8011662:	492a      	ldr	r1, [pc, #168]	; (801170c <ExtConfigReadCustomCommandsCallback+0x17c>)
 8011664:	e7e7      	b.n	8011636 <ExtConfigReadCustomCommandsCallback+0xa6>
      BLE_MANAGER_PRINTF("Added Command <%s>\r\n","FFT_Size");
 8011666:	4929      	ldr	r1, [pc, #164]	; (801170c <ExtConfigReadCustomCommandsCallback+0x17c>)
 8011668:	4823      	ldr	r0, [pc, #140]	; (80116f8 <ExtConfigReadCustomCommandsCallback+0x168>)
    int32_t ValidIntValues[]={8,16,32,64,BLE_MANAGER_CUSTOM_COMMAND_VALUE_NAN};
 801166a:	3454      	adds	r4, #84	; 0x54
      BLE_MANAGER_PRINTF("Added Command <%s>\r\n","FFT_Size");
 801166c:	f008 ff1c 	bl	801a4a8 <iprintf>
    int32_t ValidIntValues[]={8,16,32,64,BLE_MANAGER_CUSTOM_COMMAND_VALUE_NAN};
 8011670:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011672:	462e      	mov	r6, r5
 8011674:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8011676:	6823      	ldr	r3, [r4, #0]
 8011678:	6033      	str	r3, [r6, #0]
    if(AddCustomCommand("NumberOfSubrange", //Name
 801167a:	4b1d      	ldr	r3, [pc, #116]	; (80116f0 <ExtConfigReadCustomCommandsCallback+0x160>)
 801167c:	4824      	ldr	r0, [pc, #144]	; (8011710 <ExtConfigReadCustomCommandsCallback+0x180>)
 801167e:	e9cd 9802 	strd	r9, r8, [sp, #8]
 8011682:	e9cd 5700 	strd	r5, r7, [sp]
 8011686:	461a      	mov	r2, r3
 8011688:	2104      	movs	r1, #4
 801168a:	f7fc f847 	bl	800d71c <AddCustomCommand>
 801168e:	b908      	cbnz	r0, 8011694 <ExtConfigReadCustomCommandsCallback+0x104>
      BLE_MANAGER_PRINTF("Error Adding Command <%s>\r\n","NumberOfSubrange");
 8011690:	491f      	ldr	r1, [pc, #124]	; (8011710 <ExtConfigReadCustomCommandsCallback+0x180>)
 8011692:	e7d0      	b.n	8011636 <ExtConfigReadCustomCommandsCallback+0xa6>
      BLE_MANAGER_PRINTF("Added Command <%s>\r\n","NumberOfSubrange");
 8011694:	491e      	ldr	r1, [pc, #120]	; (8011710 <ExtConfigReadCustomCommandsCallback+0x180>)
 8011696:	4818      	ldr	r0, [pc, #96]	; (80116f8 <ExtConfigReadCustomCommandsCallback+0x168>)
 8011698:	f008 ff06 	bl	801a4a8 <iprintf>
  if(AddCustomCommand("FFT_Overlapping", //Name
 801169c:	e9cd 7802 	strd	r7, r8, [sp, #8]
 80116a0:	e9cd 7700 	strd	r7, r7, [sp]
 80116a4:	481b      	ldr	r0, [pc, #108]	; (8011714 <ExtConfigReadCustomCommandsCallback+0x184>)
 80116a6:	235f      	movs	r3, #95	; 0x5f
 80116a8:	2205      	movs	r2, #5
 80116aa:	2101      	movs	r1, #1
 80116ac:	f7fc f836 	bl	800d71c <AddCustomCommand>
 80116b0:	b908      	cbnz	r0, 80116b6 <ExtConfigReadCustomCommandsCallback+0x126>
     BLE_MANAGER_PRINTF("Error Adding Command <%s>\r\n","FFT_Overlapping");
 80116b2:	4918      	ldr	r1, [pc, #96]	; (8011714 <ExtConfigReadCustomCommandsCallback+0x184>)
 80116b4:	e7bf      	b.n	8011636 <ExtConfigReadCustomCommandsCallback+0xa6>
    BLE_MANAGER_PRINTF("Added Command <%s>\r\n","FFT_Overlapping");
 80116b6:	4917      	ldr	r1, [pc, #92]	; (8011714 <ExtConfigReadCustomCommandsCallback+0x184>)
 80116b8:	480f      	ldr	r0, [pc, #60]	; (80116f8 <ExtConfigReadCustomCommandsCallback+0x168>)
 80116ba:	f008 fef5 	bl	801a4a8 <iprintf>
  if(AddCustomCommand("AquisitionTime", //Name
 80116be:	e9cd 7802 	strd	r7, r8, [sp, #8]
 80116c2:	e9cd 7700 	strd	r7, r7, [sp]
 80116c6:	4814      	ldr	r0, [pc, #80]	; (8011718 <ExtConfigReadCustomCommandsCallback+0x188>)
 80116c8:	f242 7310 	movw	r3, #10000	; 0x2710
 80116cc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80116d0:	2101      	movs	r1, #1
 80116d2:	f7fc f823 	bl	800d71c <AddCustomCommand>
 80116d6:	b908      	cbnz	r0, 80116dc <ExtConfigReadCustomCommandsCallback+0x14c>
     BLE_MANAGER_PRINTF("Error Adding Command <%s>\r\n","AquisitionTime");
 80116d8:	490f      	ldr	r1, [pc, #60]	; (8011718 <ExtConfigReadCustomCommandsCallback+0x188>)
 80116da:	e7ac      	b.n	8011636 <ExtConfigReadCustomCommandsCallback+0xa6>
    BLE_MANAGER_PRINTF("Added Command <%s>\r\n","AquisitionTime");
 80116dc:	490e      	ldr	r1, [pc, #56]	; (8011718 <ExtConfigReadCustomCommandsCallback+0x188>)
 80116de:	4806      	ldr	r0, [pc, #24]	; (80116f8 <ExtConfigReadCustomCommandsCallback+0x168>)
      BLE_MANAGER_PRINTF("Error Adding Command <%s>\r\n","SensorFullScale");
 80116e0:	f008 fee2 	bl	801a4a8 <iprintf>
}
 80116e4:	b015      	add	sp, #84	; 0x54
 80116e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80116ea:	bf00      	nop
 80116ec:	0801fec8 	.word	0x0801fec8
 80116f0:	deadbeef 	.word	0xdeadbeef
 80116f4:	08022122 	.word	0x08022122
 80116f8:	080223c8 	.word	0x080223c8
 80116fc:	08022132 	.word	0x08022132
 8011700:	080223dd 	.word	0x080223dd
 8011704:	0802218d 	.word	0x0802218d
 8011708:	080223f4 	.word	0x080223f4
 801170c:	08022147 	.word	0x08022147
 8011710:	08022410 	.word	0x08022410
 8011714:	080220ec 	.word	0x080220ec
 8011718:	080220fc 	.word	0x080220fc
 801171c:	080223b0 	.word	0x080223b0

08011720 <ConfigCommandParsing.isra.0>:
static uint32_t ConfigCommandParsing(uint8_t * att_data, uint8_t data_length)
 8011720:	b513      	push	{r0, r1, r4, lr}
 8011722:	6803      	ldr	r3, [r0, #0]
  FeatureMask = (att_data[3]) | (att_data[2]<<8) | (att_data[1]<<16) | (att_data[0]<<24);
 8011724:	4c28      	ldr	r4, [pc, #160]	; (80117c8 <ConfigCommandParsing.isra.0+0xa8>)
  uint8_t Command = att_data[4];
 8011726:	7901      	ldrb	r1, [r0, #4]
 8011728:	ba1b      	rev	r3, r3
  FeatureMask = (att_data[3]) | (att_data[2]<<8) | (att_data[1]<<16) | (att_data[0]<<24);
 801172a:	6023      	str	r3, [r4, #0]
  switch (FeatureMask) {
 801172c:	6822      	ldr	r2, [r4, #0]
  uint8_t Data    = att_data[5];
 801172e:	7943      	ldrb	r3, [r0, #5]
  switch (FeatureMask) {
 8011730:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
 8011734:	d012      	beq.n	801175c <ConfigCommandParsing.isra.0+0x3c>
 8011736:	d818      	bhi.n	801176a <ConfigCommandParsing.isra.0+0x4a>
 8011738:	f5b2 2f00 	cmp.w	r2, #524288	; 0x80000
 801173c:	d01f      	beq.n	801177e <ConfigCommandParsing.isra.0+0x5e>
 801173e:	d807      	bhi.n	8011750 <ConfigCommandParsing.isra.0+0x30>
 8011740:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8011744:	d01b      	beq.n	801177e <ConfigCommandParsing.isra.0+0x5e>
 8011746:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
 801174a:	d018      	beq.n	801177e <ConfigCommandParsing.isra.0+0x5e>
  uint32_t SendItBack = 1;
 801174c:	2001      	movs	r0, #1
  return SendItBack;
 801174e:	e033      	b.n	80117b8 <ConfigCommandParsing.isra.0+0x98>
  switch (FeatureMask) {
 8011750:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 8011754:	d013      	beq.n	801177e <ConfigCommandParsing.isra.0+0x5e>
 8011756:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 801175a:	d1f7      	bne.n	801174c <ConfigCommandParsing.isra.0+0x2c>
      switch(Command) {
 801175c:	29ff      	cmp	r1, #255	; 0xff
 801175e:	d1f5      	bne.n	801174c <ConfigCommandParsing.isra.0+0x2c>
          if(Data!=0) {
 8011760:	491a      	ldr	r1, [pc, #104]	; (80117cc <ConfigCommandParsing.isra.0+0xac>)
          if(Data!=0) {
 8011762:	b983      	cbnz	r3, 8011786 <ConfigCommandParsing.isra.0+0x66>
            uhCCR2_Val  = DEFAULT_uhCCR2_Val;
 8011764:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8011768:	e013      	b.n	8011792 <ConfigCommandParsing.isra.0+0x72>
  switch (FeatureMask) {
 801176a:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 801176e:	d0f5      	beq.n	801175c <ConfigCommandParsing.isra.0+0x3c>
 8011770:	f1b2 6f80 	cmp.w	r2, #67108864	; 0x4000000
 8011774:	d1ea      	bne.n	801174c <ConfigCommandParsing.isra.0+0x2c>
      switch(Command) {
 8011776:	29ff      	cmp	r1, #255	; 0xff
 8011778:	d1e8      	bne.n	801174c <ConfigCommandParsing.isra.0+0x2c>
          if(Data!=0) {
 801177a:	4915      	ldr	r1, [pc, #84]	; (80117d0 <ConfigCommandParsing.isra.0+0xb0>)
 801177c:	e7f1      	b.n	8011762 <ConfigCommandParsing.isra.0+0x42>
      switch(Command) {
 801177e:	29ff      	cmp	r1, #255	; 0xff
 8011780:	d1e4      	bne.n	801174c <ConfigCommandParsing.isra.0+0x2c>
          if(Data!=0) {
 8011782:	4914      	ldr	r1, [pc, #80]	; (80117d4 <ConfigCommandParsing.isra.0+0xb4>)
 8011784:	b11b      	cbz	r3, 801178e <ConfigCommandParsing.isra.0+0x6e>
            uhCCR2_Val  = 1000*Data;
 8011786:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801178a:	435a      	muls	r2, r3
 801178c:	e001      	b.n	8011792 <ConfigCommandParsing.isra.0+0x72>
            uhCCR1_Val  = DEFAULT_uhCCR1_Val;
 801178e:	f241 3288 	movw	r2, #5000	; 0x1388
            uhCCR2_Val  = DEFAULT_uhCCR2_Val;
 8011792:	600a      	str	r2, [r1, #0]
    if(BLE_StdTerm_Service==BLE_SERV_ENABLE) {
 8011794:	4a10      	ldr	r2, [pc, #64]	; (80117d8 <ConfigCommandParsing.isra.0+0xb8>)
 8011796:	7812      	ldrb	r2, [r2, #0]
 8011798:	2a01      	cmp	r2, #1
 801179a:	d10f      	bne.n	80117bc <ConfigCommandParsing.isra.0+0x9c>
      BytesToWrite = sprintf((char *)BufferToWrite,"Conf Sig F=%lx C=%2x Data=%2x\n\r",FeatureMask,Command,Data);
 801179c:	490f      	ldr	r1, [pc, #60]	; (80117dc <ConfigCommandParsing.isra.0+0xbc>)
 801179e:	9300      	str	r3, [sp, #0]
 80117a0:	6822      	ldr	r2, [r4, #0]
 80117a2:	480f      	ldr	r0, [pc, #60]	; (80117e0 <ConfigCommandParsing.isra.0+0xc0>)
 80117a4:	23ff      	movs	r3, #255	; 0xff
 80117a6:	f008 ff25 	bl	801a5f4 <siprintf>
 80117aa:	4b0e      	ldr	r3, [pc, #56]	; (80117e4 <ConfigCommandParsing.isra.0+0xc4>)
 80117ac:	b2c1      	uxtb	r1, r0
      Term_Update(BufferToWrite,BytesToWrite);
 80117ae:	480c      	ldr	r0, [pc, #48]	; (80117e0 <ConfigCommandParsing.isra.0+0xc0>)
      BytesToWrite = sprintf((char *)BufferToWrite,"Conf Sig F=%lx C=%2x Data=%2x\n\r",FeatureMask,Command,Data);
 80117b0:	7019      	strb	r1, [r3, #0]
      Term_Update(BufferToWrite,BytesToWrite);
 80117b2:	f7fc f953 	bl	800da5c <Term_Update>
      PREDMNT1_PRINTF("Conf Sig F=%lx C=%2x Data=%2x\n\r",FeatureMask,Command,Data);
 80117b6:	2000      	movs	r0, #0
}
 80117b8:	b002      	add	sp, #8
 80117ba:	bd10      	pop	{r4, pc}
      PREDMNT1_PRINTF("Conf Sig F=%lx C=%2x Data=%2x\n\r",FeatureMask,Command,Data);
 80117bc:	6821      	ldr	r1, [r4, #0]
 80117be:	4807      	ldr	r0, [pc, #28]	; (80117dc <ConfigCommandParsing.isra.0+0xbc>)
 80117c0:	22ff      	movs	r2, #255	; 0xff
 80117c2:	f008 fe71 	bl	801a4a8 <iprintf>
 80117c6:	e7f6      	b.n	80117b6 <ConfigCommandParsing.isra.0+0x96>
 80117c8:	2000b208 	.word	0x2000b208
 80117cc:	20000404 	.word	0x20000404
 80117d0:	20000400 	.word	0x20000400
 80117d4:	200003fc 	.word	0x200003fc
 80117d8:	20009b34 	.word	0x20009b34
 80117dc:	08022421 	.word	0x08022421
 80117e0:	20009a30 	.word	0x20009a30
 80117e4:	20009b3d 	.word	0x20009b3d

080117e8 <DebugConsoleParsing>:
{
 80117e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80117ec:	4606      	mov	r6, r0
  if(SizeOfUpdateBlueFW!=0) {
 80117ee:	48b2      	ldr	r0, [pc, #712]	; (8011ab8 <DebugConsoleParsing+0x2d0>)
{
 80117f0:	ed2d 8b02 	vpush	{d8}
  if(SizeOfUpdateBlueFW!=0) {
 80117f4:	6843      	ldr	r3, [r0, #4]
{
 80117f6:	b099      	sub	sp, #100	; 0x64
 80117f8:	4688      	mov	r8, r1
 80117fa:	4604      	mov	r4, r0
  if(SizeOfUpdateBlueFW!=0) {
 80117fc:	b30b      	cbz	r3, 8011842 <DebugConsoleParsing+0x5a>
    int8_t RetValue = UpdateFWBlueMS(&SizeOfUpdateBlueFW,att_data, data_length,1);
 80117fe:	460a      	mov	r2, r1
 8011800:	2301      	movs	r3, #1
 8011802:	4631      	mov	r1, r6
 8011804:	3004      	adds	r0, #4
 8011806:	f001 feaf 	bl	8013568 <UpdateFWBlueMS>
 801180a:	f88d 0044 	strb.w	r0, [sp, #68]	; 0x44
    if(RetValue!=0) {
 801180e:	b188      	cbz	r0, 8011834 <DebugConsoleParsing+0x4c>
      Term_Update((uint8_t *)&RetValue,1);
 8011810:	2101      	movs	r1, #1
 8011812:	a811      	add	r0, sp, #68	; 0x44
 8011814:	f7fc f922 	bl	800da5c <Term_Update>
      if(RetValue==1) {
 8011818:	f99d 3044 	ldrsb.w	r3, [sp, #68]	; 0x44
 801181c:	2b01      	cmp	r3, #1
 801181e:	d109      	bne.n	8011834 <DebugConsoleParsing+0x4c>
        PREDMNT1_PRINTF("%s will restart in 5 seconds\r\n",PREDMNT1_PACKAGENAME);
 8011820:	49a6      	ldr	r1, [pc, #664]	; (8011abc <DebugConsoleParsing+0x2d4>)
 8011822:	48a7      	ldr	r0, [pc, #668]	; (8011ac0 <DebugConsoleParsing+0x2d8>)
 8011824:	f008 fe40 	bl	801a4a8 <iprintf>
        HAL_Delay(5000);
 8011828:	f241 3088 	movw	r0, #5000	; 0x1388
 801182c:	f002 fbe8 	bl	8014000 <HAL_Delay>
        HAL_NVIC_SystemReset();
 8011830:	f7f5 ff1c 	bl	800766c <HAL_NVIC_SystemReset>
      SendBackData= 0;
 8011834:	2500      	movs	r5, #0
}
 8011836:	4628      	mov	r0, r5
 8011838:	b019      	add	sp, #100	; 0x64
 801183a:	ecbd 8b02 	vpop	{d8}
 801183e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if(!strncmp("help",(char *)(att_data),4)) {
 8011842:	48a0      	ldr	r0, [pc, #640]	; (8011ac4 <DebugConsoleParsing+0x2dc>)
 8011844:	2204      	movs	r2, #4
 8011846:	4631      	mov	r1, r6
 8011848:	f008 ff4c 	bl	801a6e4 <strncmp>
 801184c:	4605      	mov	r5, r0
 801184e:	2800      	cmp	r0, #0
 8011850:	f040 80d4 	bne.w	80119fc <DebugConsoleParsing+0x214>
      BytesToWrite =sprintf((char *)BufferToWrite,"Command:\r\n");
 8011854:	4f9c      	ldr	r7, [pc, #624]	; (8011ac8 <DebugConsoleParsing+0x2e0>)
 8011856:	499d      	ldr	r1, [pc, #628]	; (8011acc <DebugConsoleParsing+0x2e4>)
 8011858:	489d      	ldr	r0, [pc, #628]	; (8011ad0 <DebugConsoleParsing+0x2e8>)
 801185a:	f008 ff3b 	bl	801a6d4 <strcpy>
 801185e:	210a      	movs	r1, #10
      Term_Update(BufferToWrite,BytesToWrite);
 8011860:	489b      	ldr	r0, [pc, #620]	; (8011ad0 <DebugConsoleParsing+0x2e8>)
      BytesToWrite =sprintf((char *)BufferToWrite,"Command:\r\n");
 8011862:	7039      	strb	r1, [r7, #0]
      Term_Update(BufferToWrite,BytesToWrite);
 8011864:	f7fc f8fa 	bl	800da5c <Term_Update>
      HAL_Delay(20);
 8011868:	2014      	movs	r0, #20
 801186a:	f002 fbc9 	bl	8014000 <HAL_Delay>
      BytesToWrite =sprintf((char *)BufferToWrite,"info -> System Info\r\n");
 801186e:	f04f 0b15 	mov.w	fp, #21
 8011872:	4998      	ldr	r1, [pc, #608]	; (8011ad4 <DebugConsoleParsing+0x2ec>)
 8011874:	4896      	ldr	r0, [pc, #600]	; (8011ad0 <DebugConsoleParsing+0x2e8>)
 8011876:	f008 ff2d 	bl	801a6d4 <strcpy>
      Term_Update(BufferToWrite,BytesToWrite);
 801187a:	4659      	mov	r1, fp
 801187c:	4894      	ldr	r0, [pc, #592]	; (8011ad0 <DebugConsoleParsing+0x2e8>)
      BytesToWrite =sprintf((char *)BufferToWrite,"info -> System Info\r\n");
 801187e:	f887 b000 	strb.w	fp, [r7]
      Term_Update(BufferToWrite,BytesToWrite);
 8011882:	f7fc f8eb 	bl	800da5c <Term_Update>
      HAL_Delay(20);
 8011886:	2014      	movs	r0, #20
 8011888:	f002 fbba 	bl	8014000 <HAL_Delay>
      BytesToWrite =sprintf((char *)BufferToWrite,"versionFw  -> FW Version\r\n");
 801188c:	4992      	ldr	r1, [pc, #584]	; (8011ad8 <DebugConsoleParsing+0x2f0>)
 801188e:	4890      	ldr	r0, [pc, #576]	; (8011ad0 <DebugConsoleParsing+0x2e8>)
 8011890:	f008 ff20 	bl	801a6d4 <strcpy>
 8011894:	211a      	movs	r1, #26
      Term_Update(BufferToWrite,BytesToWrite);
 8011896:	488e      	ldr	r0, [pc, #568]	; (8011ad0 <DebugConsoleParsing+0x2e8>)
      BytesToWrite =sprintf((char *)BufferToWrite,"versionFw  -> FW Version\r\n");
 8011898:	7039      	strb	r1, [r7, #0]
      Term_Update(BufferToWrite,BytesToWrite);
 801189a:	f7fc f8df 	bl	800da5c <Term_Update>
      HAL_Delay(20);
 801189e:	2014      	movs	r0, #20
 80118a0:	f002 fbae 	bl	8014000 <HAL_Delay>
      BytesToWrite =sprintf((char *)BufferToWrite,"getVibrParam  -> Read Vibration Parameters\r\n");
 80118a4:	498d      	ldr	r1, [pc, #564]	; (8011adc <DebugConsoleParsing+0x2f4>)
 80118a6:	488a      	ldr	r0, [pc, #552]	; (8011ad0 <DebugConsoleParsing+0x2e8>)
 80118a8:	f008 ff14 	bl	801a6d4 <strcpy>
 80118ac:	212c      	movs	r1, #44	; 0x2c
      Term_Update(BufferToWrite,BytesToWrite);
 80118ae:	4888      	ldr	r0, [pc, #544]	; (8011ad0 <DebugConsoleParsing+0x2e8>)
      BytesToWrite =sprintf((char *)BufferToWrite,"getVibrParam  -> Read Vibration Parameters\r\n");
 80118b0:	7039      	strb	r1, [r7, #0]
      Term_Update(BufferToWrite,BytesToWrite);
 80118b2:	f7fc f8d3 	bl	800da5c <Term_Update>
      HAL_Delay(20);
 80118b6:	2014      	movs	r0, #20
 80118b8:	f002 fba2 	bl	8014000 <HAL_Delay>
      BytesToWrite =sprintf((char *)BufferToWrite,"setVibrParam [-odr -fs -size -wind - tacq -subrng -ovl] -> Set Vibration Parameters");
 80118bc:	4988      	ldr	r1, [pc, #544]	; (8011ae0 <DebugConsoleParsing+0x2f8>)
 80118be:	4884      	ldr	r0, [pc, #528]	; (8011ad0 <DebugConsoleParsing+0x2e8>)
 80118c0:	f008 ff08 	bl	801a6d4 <strcpy>
 80118c4:	2153      	movs	r1, #83	; 0x53
      Term_Update(BufferToWrite,BytesToWrite);
 80118c6:	4882      	ldr	r0, [pc, #520]	; (8011ad0 <DebugConsoleParsing+0x2e8>)
      BytesToWrite =sprintf((char *)BufferToWrite,"setVibrParam [-odr -fs -size -wind - tacq -subrng -ovl] -> Set Vibration Parameters");
 80118c8:	7039      	strb	r1, [r7, #0]
      Term_Update(BufferToWrite,BytesToWrite);
 80118ca:	f7fc f8c7 	bl	800da5c <Term_Update>
      HAL_Delay(20);
 80118ce:	2014      	movs	r0, #20
 80118d0:	f002 fb96 	bl	8014000 <HAL_Delay>
      BytesToWrite =sprintf((char *)BufferToWrite,"\r\nodr= [13, 26, 52, 104, 208, 416, 833, 1660, 3330, 6660]");
 80118d4:	f04f 0939 	mov.w	r9, #57	; 0x39
 80118d8:	4982      	ldr	r1, [pc, #520]	; (8011ae4 <DebugConsoleParsing+0x2fc>)
 80118da:	487d      	ldr	r0, [pc, #500]	; (8011ad0 <DebugConsoleParsing+0x2e8>)
 80118dc:	f008 fefa 	bl	801a6d4 <strcpy>
      Term_Update(BufferToWrite,BytesToWrite);
 80118e0:	4649      	mov	r1, r9
 80118e2:	487b      	ldr	r0, [pc, #492]	; (8011ad0 <DebugConsoleParsing+0x2e8>)
      BytesToWrite =sprintf((char *)BufferToWrite,"\r\nodr= [13, 26, 52, 104, 208, 416, 833, 1660, 3330, 6660]");
 80118e4:	f887 9000 	strb.w	r9, [r7]
      Term_Update(BufferToWrite,BytesToWrite);
 80118e8:	f7fc f8b8 	bl	800da5c <Term_Update>
      HAL_Delay(20);
 80118ec:	2014      	movs	r0, #20
 80118ee:	f002 fb87 	bl	8014000 <HAL_Delay>
      BytesToWrite =sprintf((char *)BufferToWrite,"\r\nfs= [2, 4, 8, 16]");
 80118f2:	f04f 0a13 	mov.w	sl, #19
 80118f6:	497c      	ldr	r1, [pc, #496]	; (8011ae8 <DebugConsoleParsing+0x300>)
 80118f8:	4875      	ldr	r0, [pc, #468]	; (8011ad0 <DebugConsoleParsing+0x2e8>)
 80118fa:	f008 feeb 	bl	801a6d4 <strcpy>
      Term_Update(BufferToWrite,BytesToWrite);
 80118fe:	4651      	mov	r1, sl
 8011900:	4873      	ldr	r0, [pc, #460]	; (8011ad0 <DebugConsoleParsing+0x2e8>)
      BytesToWrite =sprintf((char *)BufferToWrite,"\r\nfs= [2, 4, 8, 16]");
 8011902:	f887 a000 	strb.w	sl, [r7]
      Term_Update(BufferToWrite,BytesToWrite);
 8011906:	f7fc f8a9 	bl	800da5c <Term_Update>
      HAL_Delay(20);
 801190a:	2014      	movs	r0, #20
 801190c:	f002 fb78 	bl	8014000 <HAL_Delay>
      BytesToWrite =sprintf((char *)BufferToWrite,"\r\nsize= [256, 512, 1024, 2048]");
 8011910:	4976      	ldr	r1, [pc, #472]	; (8011aec <DebugConsoleParsing+0x304>)
 8011912:	486f      	ldr	r0, [pc, #444]	; (8011ad0 <DebugConsoleParsing+0x2e8>)
 8011914:	f008 fede 	bl	801a6d4 <strcpy>
 8011918:	211e      	movs	r1, #30
      Term_Update(BufferToWrite,BytesToWrite);
 801191a:	486d      	ldr	r0, [pc, #436]	; (8011ad0 <DebugConsoleParsing+0x2e8>)
      BytesToWrite =sprintf((char *)BufferToWrite,"\r\nsize= [256, 512, 1024, 2048]");
 801191c:	7039      	strb	r1, [r7, #0]
      Term_Update(BufferToWrite,BytesToWrite);
 801191e:	f7fc f89d 	bl	800da5c <Term_Update>
      HAL_Delay(20);
 8011922:	2014      	movs	r0, #20
 8011924:	f002 fb6c 	bl	8014000 <HAL_Delay>
      BytesToWrite =sprintf((char *)BufferToWrite,"\r\nwind= [RECTANGULAR= 0, HANNING= 1, HAMMING= 2, FLAT_TOP= 3]");
 8011928:	4971      	ldr	r1, [pc, #452]	; (8011af0 <DebugConsoleParsing+0x308>)
 801192a:	4869      	ldr	r0, [pc, #420]	; (8011ad0 <DebugConsoleParsing+0x2e8>)
 801192c:	f008 fed2 	bl	801a6d4 <strcpy>
 8011930:	213d      	movs	r1, #61	; 0x3d
      Term_Update(BufferToWrite,BytesToWrite);
 8011932:	4867      	ldr	r0, [pc, #412]	; (8011ad0 <DebugConsoleParsing+0x2e8>)
      BytesToWrite =sprintf((char *)BufferToWrite,"\r\nwind= [RECTANGULAR= 0, HANNING= 1, HAMMING= 2, FLAT_TOP= 3]");
 8011934:	7039      	strb	r1, [r7, #0]
      Term_Update(BufferToWrite,BytesToWrite);
 8011936:	f7fc f891 	bl	800da5c <Term_Update>
      HAL_Delay(20);
 801193a:	2014      	movs	r0, #20
 801193c:	f002 fb60 	bl	8014000 <HAL_Delay>
      BytesToWrite =sprintf((char *)BufferToWrite,"\r\ntacq= [500 - 60000]");
 8011940:	496c      	ldr	r1, [pc, #432]	; (8011af4 <DebugConsoleParsing+0x30c>)
 8011942:	4863      	ldr	r0, [pc, #396]	; (8011ad0 <DebugConsoleParsing+0x2e8>)
 8011944:	f008 fec6 	bl	801a6d4 <strcpy>
      Term_Update(BufferToWrite,BytesToWrite);
 8011948:	4659      	mov	r1, fp
 801194a:	4861      	ldr	r0, [pc, #388]	; (8011ad0 <DebugConsoleParsing+0x2e8>)
      BytesToWrite =sprintf((char *)BufferToWrite,"\r\ntacq= [500 - 60000]");
 801194c:	f887 b000 	strb.w	fp, [r7]
      Term_Update(BufferToWrite,BytesToWrite);
 8011950:	f7fc f884 	bl	800da5c <Term_Update>
      HAL_Delay(20);
 8011954:	2014      	movs	r0, #20
 8011956:	f002 fb53 	bl	8014000 <HAL_Delay>
      BytesToWrite =sprintf((char *)BufferToWrite,"\r\nsubrng= [8, 16, 32, 64]");
 801195a:	4967      	ldr	r1, [pc, #412]	; (8011af8 <DebugConsoleParsing+0x310>)
 801195c:	485c      	ldr	r0, [pc, #368]	; (8011ad0 <DebugConsoleParsing+0x2e8>)
 801195e:	f008 feb9 	bl	801a6d4 <strcpy>
 8011962:	2119      	movs	r1, #25
      Term_Update(BufferToWrite,BytesToWrite);
 8011964:	485a      	ldr	r0, [pc, #360]	; (8011ad0 <DebugConsoleParsing+0x2e8>)
      BytesToWrite =sprintf((char *)BufferToWrite,"\r\nsubrng= [8, 16, 32, 64]");
 8011966:	7039      	strb	r1, [r7, #0]
      Term_Update(BufferToWrite,BytesToWrite);
 8011968:	f7fc f878 	bl	800da5c <Term_Update>
      HAL_Delay(20);
 801196c:	2014      	movs	r0, #20
 801196e:	f002 fb47 	bl	8014000 <HAL_Delay>
      BytesToWrite =sprintf((char *)BufferToWrite,"\r\novl= [5 - 95]\r\n\r\n");
 8011972:	4962      	ldr	r1, [pc, #392]	; (8011afc <DebugConsoleParsing+0x314>)
 8011974:	4856      	ldr	r0, [pc, #344]	; (8011ad0 <DebugConsoleParsing+0x2e8>)
 8011976:	f008 fead 	bl	801a6d4 <strcpy>
      Term_Update(BufferToWrite,BytesToWrite);
 801197a:	4651      	mov	r1, sl
 801197c:	4854      	ldr	r0, [pc, #336]	; (8011ad0 <DebugConsoleParsing+0x2e8>)
      BytesToWrite =sprintf((char *)BufferToWrite,"\r\novl= [5 - 95]\r\n\r\n");
 801197e:	f887 a000 	strb.w	sl, [r7]
      Term_Update(BufferToWrite,BytesToWrite);
 8011982:	f7fc f86b 	bl	800da5c <Term_Update>
      HAL_Delay(20);
 8011986:	2014      	movs	r0, #20
 8011988:	f002 fb3a 	bl	8014000 <HAL_Delay>
      BytesToWrite =sprintf((char *)BufferToWrite,"setName xxxxxxx -> Set the node name (Max 7 characters)\r\n");
 801198c:	495c      	ldr	r1, [pc, #368]	; (8011b00 <DebugConsoleParsing+0x318>)
 801198e:	4850      	ldr	r0, [pc, #320]	; (8011ad0 <DebugConsoleParsing+0x2e8>)
 8011990:	f008 fea0 	bl	801a6d4 <strcpy>
 8011994:	f887 9000 	strb.w	r9, [r7]
      Term_Update(BufferToWrite,BytesToWrite);
 8011998:	4649      	mov	r1, r9
    Term_Update(BufferToWrite,BytesToWrite);
 801199a:	484d      	ldr	r0, [pc, #308]	; (8011ad0 <DebugConsoleParsing+0x2e8>)
 801199c:	f7fc f85e 	bl	800da5c <Term_Update>
    }  if(!strncmp("upgradeFw",(char *)(att_data),9)) {
 80119a0:	4858      	ldr	r0, [pc, #352]	; (8011b04 <DebugConsoleParsing+0x31c>)
 80119a2:	2209      	movs	r2, #9
 80119a4:	4631      	mov	r1, r6
 80119a6:	f008 fe9d 	bl	801a6e4 <strncmp>
 80119aa:	4607      	mov	r7, r0
 80119ac:	2800      	cmp	r0, #0
 80119ae:	f040 8141 	bne.w	8011c34 <DebugConsoleParsing+0x44c>
      SizeOfUpdateBlueFW=atoi((char *)(att_data+9));
 80119b2:	f106 0009 	add.w	r0, r6, #9
 80119b6:	f007 fdd5 	bl	8019564 <atoi>
      PointerByte[0]=att_data[ 9];
 80119ba:	7a73      	ldrb	r3, [r6, #9]
 80119bc:	7123      	strb	r3, [r4, #4]
      PointerByte[1]=att_data[10];
 80119be:	7ab3      	ldrb	r3, [r6, #10]
 80119c0:	7163      	strb	r3, [r4, #5]
      PointerByte[2]=att_data[11];
 80119c2:	7af3      	ldrb	r3, [r6, #11]
 80119c4:	71a3      	strb	r3, [r4, #6]
      PointerByte[3]=att_data[12];
 80119c6:	7b33      	ldrb	r3, [r6, #12]
 80119c8:	71e3      	strb	r3, [r4, #7]
      if(SizeOfUpdateBlueFW>OTA_MAX_PROG_SIZE) {
 80119ca:	6862      	ldr	r2, [r4, #4]
 80119cc:	4b4e      	ldr	r3, [pc, #312]	; (8011b08 <DebugConsoleParsing+0x320>)
 80119ce:	429a      	cmp	r2, r3
 80119d0:	f240 80b0 	bls.w	8011b34 <DebugConsoleParsing+0x34c>
        PREDMNT1_PRINTF("OTA %s SIZE=%ld > %d Max Allowed\r\n",PREDMNT1_PACKAGENAME,SizeOfUpdateBlueFW, OTA_MAX_PROG_SIZE);
 80119d4:	4939      	ldr	r1, [pc, #228]	; (8011abc <DebugConsoleParsing+0x2d4>)
 80119d6:	484d      	ldr	r0, [pc, #308]	; (8011b0c <DebugConsoleParsing+0x324>)
 80119d8:	f008 fd66 	bl	801a4a8 <iprintf>
        PointerByte[0]= att_data[13];
 80119dc:	7b73      	ldrb	r3, [r6, #13]
 80119de:	7123      	strb	r3, [r4, #4]
        PointerByte[1]=(att_data[14]!=0) ? 0 : 1;/* In order to be sure to have a wrong CRC */
 80119e0:	7bb3      	ldrb	r3, [r6, #14]
 80119e2:	fab3 f383 	clz	r3, r3
 80119e6:	095b      	lsrs	r3, r3, #5
 80119e8:	7163      	strb	r3, [r4, #5]
        PointerByte[2]= att_data[15];
 80119ea:	7bf3      	ldrb	r3, [r6, #15]
 80119ec:	71a3      	strb	r3, [r4, #6]
        PointerByte[3]= att_data[16];
 80119ee:	7c33      	ldrb	r3, [r6, #16]
 80119f0:	71e3      	strb	r3, [r4, #7]
        BytesToWrite = 4;
 80119f2:	2104      	movs	r1, #4
      BytesToWrite =sprintf((char *)BufferToWrite,"%s_v%d.%d.%c\r\n",
 80119f4:	4b34      	ldr	r3, [pc, #208]	; (8011ac8 <DebugConsoleParsing+0x2e0>)
 80119f6:	7019      	strb	r1, [r3, #0]
      Term_Update(BufferToWrite,BytesToWrite);
 80119f8:	4835      	ldr	r0, [pc, #212]	; (8011ad0 <DebugConsoleParsing+0x2e8>)
 80119fa:	e0cf      	b.n	8011b9c <DebugConsoleParsing+0x3b4>
    } else if(!strncmp("versionFw",(char *)(att_data),9)) {
 80119fc:	4844      	ldr	r0, [pc, #272]	; (8011b10 <DebugConsoleParsing+0x328>)
 80119fe:	2209      	movs	r2, #9
 8011a00:	4631      	mov	r1, r6
 8011a02:	f008 fe6f 	bl	801a6e4 <strncmp>
 8011a06:	4605      	mov	r5, r0
 8011a08:	b978      	cbnz	r0, 8011a2a <DebugConsoleParsing+0x242>
      BytesToWrite =sprintf((char *)BufferToWrite,"%s_%s_%c.%c.%c\r\n",
 8011a0a:	2334      	movs	r3, #52	; 0x34
 8011a0c:	2730      	movs	r7, #48	; 0x30
 8011a0e:	e9cd 3701 	strd	r3, r7, [sp, #4]
 8011a12:	2332      	movs	r3, #50	; 0x32
 8011a14:	493f      	ldr	r1, [pc, #252]	; (8011b14 <DebugConsoleParsing+0x32c>)
 8011a16:	9300      	str	r3, [sp, #0]
 8011a18:	4a3f      	ldr	r2, [pc, #252]	; (8011b18 <DebugConsoleParsing+0x330>)
 8011a1a:	4b28      	ldr	r3, [pc, #160]	; (8011abc <DebugConsoleParsing+0x2d4>)
 8011a1c:	482c      	ldr	r0, [pc, #176]	; (8011ad0 <DebugConsoleParsing+0x2e8>)
 8011a1e:	f008 fde9 	bl	801a5f4 <siprintf>
 8011a22:	4b29      	ldr	r3, [pc, #164]	; (8011ac8 <DebugConsoleParsing+0x2e0>)
 8011a24:	211c      	movs	r1, #28
 8011a26:	7019      	strb	r1, [r3, #0]
        Term_Update(BufferToWrite,BytesToWrite);
 8011a28:	e7b7      	b.n	801199a <DebugConsoleParsing+0x1b2>
    } else if(!strncmp("info",(char *)(att_data),4)) {
 8011a2a:	483c      	ldr	r0, [pc, #240]	; (8011b1c <DebugConsoleParsing+0x334>)
 8011a2c:	2204      	movs	r2, #4
 8011a2e:	4631      	mov	r1, r6
 8011a30:	f008 fe58 	bl	801a6e4 <strncmp>
 8011a34:	4605      	mov	r5, r0
 8011a36:	2800      	cmp	r0, #0
 8011a38:	d13b      	bne.n	8011ab2 <DebugConsoleParsing+0x2ca>
      BytesToWrite =sprintf((char *)BufferToWrite,"\r\nSTMicroelectronics %s:\r\n"
 8011a3a:	2334      	movs	r3, #52	; 0x34
 8011a3c:	2030      	movs	r0, #48	; 0x30
 8011a3e:	4a1f      	ldr	r2, [pc, #124]	; (8011abc <DebugConsoleParsing+0x2d4>)
 8011a40:	f8df 9084 	ldr.w	r9, [pc, #132]	; 8011ac8 <DebugConsoleParsing+0x2e0>
 8011a44:	4936      	ldr	r1, [pc, #216]	; (8011b20 <DebugConsoleParsing+0x338>)
 8011a46:	e9cd 3000 	strd	r3, r0, [sp]
 8011a4a:	2332      	movs	r3, #50	; 0x32
 8011a4c:	4820      	ldr	r0, [pc, #128]	; (8011ad0 <DebugConsoleParsing+0x2e8>)
 8011a4e:	f008 fdd1 	bl	801a5f4 <siprintf>
 8011a52:	2152      	movs	r1, #82	; 0x52
      Term_Update(BufferToWrite,BytesToWrite);
 8011a54:	481e      	ldr	r0, [pc, #120]	; (8011ad0 <DebugConsoleParsing+0x2e8>)
      BytesToWrite =sprintf((char *)BufferToWrite,"\r\nSTMicroelectronics %s:\r\n"
 8011a56:	f889 1000 	strb.w	r1, [r9]
      Term_Update(BufferToWrite,BytesToWrite);
 8011a5a:	f7fb ffff 	bl	800da5c <Term_Update>
          HAL_GetHalVersion() >>24,
 8011a5e:	f7f5 fd9b 	bl	8007598 <HAL_GetHalVersion>
 8011a62:	4682      	mov	sl, r0
          (HAL_GetHalVersion() >>16)&0xFF,
 8011a64:	f7f5 fd98 	bl	8007598 <HAL_GetHalVersion>
 8011a68:	4683      	mov	fp, r0
          (HAL_GetHalVersion() >> 8)&0xFF,
 8011a6a:	f7f5 fd95 	bl	8007598 <HAL_GetHalVersion>
 8011a6e:	4607      	mov	r7, r0
           HAL_GetHalVersion()      &0xFF,
 8011a70:	f7f5 fd92 	bl	8007598 <HAL_GetHalVersion>
      BytesToWrite =sprintf((char *)BufferToWrite,"\t(HAL %ld.%ld.%ld_%ld)\r\n"
 8011a74:	4b2b      	ldr	r3, [pc, #172]	; (8011b24 <DebugConsoleParsing+0x33c>)
 8011a76:	9303      	str	r3, [sp, #12]
 8011a78:	b2c0      	uxtb	r0, r0
 8011a7a:	4b2b      	ldr	r3, [pc, #172]	; (8011b28 <DebugConsoleParsing+0x340>)
 8011a7c:	492b      	ldr	r1, [pc, #172]	; (8011b2c <DebugConsoleParsing+0x344>)
 8011a7e:	9302      	str	r3, [sp, #8]
 8011a80:	f3c7 2707 	ubfx	r7, r7, #8, #8
 8011a84:	f3cb 4307 	ubfx	r3, fp, #16, #8
 8011a88:	ea4f 621a 	mov.w	r2, sl, lsr #24
 8011a8c:	9001      	str	r0, [sp, #4]
 8011a8e:	9700      	str	r7, [sp, #0]
 8011a90:	480f      	ldr	r0, [pc, #60]	; (8011ad0 <DebugConsoleParsing+0x2e8>)
 8011a92:	f008 fdaf 	bl	801a5f4 <siprintf>
 8011a96:	b2c1      	uxtb	r1, r0
      Term_Update(BufferToWrite,BytesToWrite);
 8011a98:	480d      	ldr	r0, [pc, #52]	; (8011ad0 <DebugConsoleParsing+0x2e8>)
      BytesToWrite =sprintf((char *)BufferToWrite,"\t(HAL %ld.%ld.%ld_%ld)\r\n"
 8011a9a:	f889 1000 	strb.w	r1, [r9]
      Term_Update(BufferToWrite,BytesToWrite);
 8011a9e:	f7fb ffdd 	bl	800da5c <Term_Update>
    BytesToWrite =sprintf((char *)BufferToWrite,"Code compiled for STWIN board\r\n");
 8011aa2:	4923      	ldr	r1, [pc, #140]	; (8011b30 <DebugConsoleParsing+0x348>)
 8011aa4:	480a      	ldr	r0, [pc, #40]	; (8011ad0 <DebugConsoleParsing+0x2e8>)
 8011aa6:	f008 fe15 	bl	801a6d4 <strcpy>
 8011aaa:	211f      	movs	r1, #31
 8011aac:	f889 1000 	strb.w	r1, [r9]
 8011ab0:	e773      	b.n	801199a <DebugConsoleParsing+0x1b2>
  uint32_t SendBackData = 1;
 8011ab2:	2501      	movs	r5, #1
 8011ab4:	e774      	b.n	80119a0 <DebugConsoleParsing+0x1b8>
 8011ab6:	bf00      	nop
 8011ab8:	2000968c 	.word	0x2000968c
 8011abc:	0802219c 	.word	0x0802219c
 8011ac0:	08022441 	.word	0x08022441
 8011ac4:	08022460 	.word	0x08022460
 8011ac8:	20009b3d 	.word	0x20009b3d
 8011acc:	08022465 	.word	0x08022465
 8011ad0:	20009a30 	.word	0x20009a30
 8011ad4:	08022470 	.word	0x08022470
 8011ad8:	08022486 	.word	0x08022486
 8011adc:	080224a1 	.word	0x080224a1
 8011ae0:	080224ce 	.word	0x080224ce
 8011ae4:	08022522 	.word	0x08022522
 8011ae8:	0802255c 	.word	0x0802255c
 8011aec:	08022570 	.word	0x08022570
 8011af0:	0802258f 	.word	0x0802258f
 8011af4:	080225cd 	.word	0x080225cd
 8011af8:	080225e3 	.word	0x080225e3
 8011afc:	080225fd 	.word	0x080225fd
 8011b00:	08022611 	.word	0x08022611
 8011b04:	0802270d 	.word	0x0802270d
 8011b08:	0003bff8 	.word	0x0003bff8
 8011b0c:	08022717 	.word	0x08022717
 8011b10:	0802264b 	.word	0x0802264b
 8011b14:	08022655 	.word	0x08022655
 8011b18:	080221ac 	.word	0x080221ac
 8011b1c:	08022666 	.word	0x08022666
 8011b20:	0802266b 	.word	0x0802266b
 8011b24:	0802233b 	.word	0x0802233b
 8011b28:	08022344 	.word	0x08022344
 8011b2c:	080226b4 	.word	0x080226b4
 8011b30:	080226ed 	.word	0x080226ed
        PointerByte[0]=att_data[13];
 8011b34:	f896 a00d 	ldrb.w	sl, [r6, #13]
        PointerByte[1]=att_data[14];
 8011b38:	f896 900e 	ldrb.w	r9, [r6, #14]
        PointerByte[2]=att_data[15];
 8011b3c:	f896 800f 	ldrb.w	r8, [r6, #15]
        PointerByte[3]=att_data[16];
 8011b40:	7c35      	ldrb	r5, [r6, #16]
        PointerByte[0]=att_data[13];
 8011b42:	f88d a044 	strb.w	sl, [sp, #68]	; 0x44
        PointerByte[1]=att_data[14];
 8011b46:	f88d 9045 	strb.w	r9, [sp, #69]	; 0x45
        PointerByte[2]=att_data[15];
 8011b4a:	f88d 8046 	strb.w	r8, [sp, #70]	; 0x46
        PointerByte[3]=att_data[16];
 8011b4e:	f88d 5047 	strb.w	r5, [sp, #71]	; 0x47
        PREDMNT1_PRINTF("OTA %s SIZE=%ld uwCRCValue=%lx\r\n",PREDMNT1_PACKAGENAME,SizeOfUpdateBlueFW,uwCRCValue);
 8011b52:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8011b54:	49a6      	ldr	r1, [pc, #664]	; (8011df0 <DebugConsoleParsing+0x608>)
 8011b56:	48a7      	ldr	r0, [pc, #668]	; (8011df4 <DebugConsoleParsing+0x60c>)
 8011b58:	930c      	str	r3, [sp, #48]	; 0x30
 8011b5a:	f008 fca5 	bl	801a4a8 <iprintf>
        StartUpdateFWBlueMS(SizeOfUpdateBlueFW,uwCRCValue);
 8011b5e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011b60:	6860      	ldr	r0, [r4, #4]
 8011b62:	4619      	mov	r1, r3
 8011b64:	f001 fd8c 	bl	8013680 <StartUpdateFWBlueMS>
          int ret = aci_l2cap_connection_parameter_update_req(BLE_ConnectionHandle,
 8011b68:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8011b6c:	9300      	str	r3, [sp, #0]
 8011b6e:	220a      	movs	r2, #10
 8011b70:	8920      	ldrh	r0, [r4, #8]
 8011b72:	463b      	mov	r3, r7
 8011b74:	4611      	mov	r1, r2
 8011b76:	f7fa fadf 	bl	800c138 <aci_l2cap_connection_parameter_update_req>
          if (ret != BLE_STATUS_SUCCESS) {
 8011b7a:	b120      	cbz	r0, 8011b86 <DebugConsoleParsing+0x39e>
              PREDMNT1_PRINTF("Problem Changing the connection interval\r\n");
 8011b7c:	4c9e      	ldr	r4, [pc, #632]	; (8011df8 <DebugConsoleParsing+0x610>)
 8011b7e:	4620      	mov	r0, r4
 8011b80:	f008 fd18 	bl	801a5b4 <puts>
            while (1) {
 8011b84:	e7fb      	b.n	8011b7e <DebugConsoleParsing+0x396>
        BufferToWrite[0] = PointerByte[0];
 8011b86:	489d      	ldr	r0, [pc, #628]	; (8011dfc <DebugConsoleParsing+0x614>)
        BytesToWrite = 4;
 8011b88:	4b9d      	ldr	r3, [pc, #628]	; (8011e00 <DebugConsoleParsing+0x618>)
        BufferToWrite[0] = PointerByte[0];
 8011b8a:	f880 a000 	strb.w	sl, [r0]
        BytesToWrite = 4;
 8011b8e:	2104      	movs	r1, #4
        BufferToWrite[1] = PointerByte[1];
 8011b90:	f880 9001 	strb.w	r9, [r0, #1]
        BufferToWrite[2] = PointerByte[2];
 8011b94:	f880 8002 	strb.w	r8, [r0, #2]
        BufferToWrite[3] = PointerByte[3];
 8011b98:	70c5      	strb	r5, [r0, #3]
        BytesToWrite = 4;
 8011b9a:	7019      	strb	r1, [r3, #0]
        Term_Update(BufferToWrite,BytesToWrite);
 8011b9c:	f7fb ff5e 	bl	800da5c <Term_Update>
      SendBackData=0;      
 8011ba0:	2500      	movs	r5, #0
    if(SetVibrParam)
 8011ba2:	7aa3      	ldrb	r3, [r4, #10]
 8011ba4:	2b00      	cmp	r3, #0
 8011ba6:	f000 8329 	beq.w	80121fc <DebugConsoleParsing+0xa14>
        VibrParam[20*NumByte + Index]= att_data[Index];
 8011baa:	7ae7      	ldrb	r7, [r4, #11]
 8011bac:	f894 c00c 	ldrb.w	ip, [r4, #12]
 8011bb0:	eb07 0287 	add.w	r2, r7, r7, lsl #2
 8011bb4:	2500      	movs	r5, #0
      uint8_t Index=0;
 8011bb6:	462b      	mov	r3, r5
        VibrParam[20*NumByte + Index]= att_data[Index];
 8011bb8:	eb04 0282 	add.w	r2, r4, r2, lsl #2
      while( (att_data[Index] != '\n') && (att_data[Index] != '\0') )
 8011bbc:	5cf1      	ldrb	r1, [r6, r3]
 8011bbe:	eb03 000c 	add.w	r0, r3, ip
 8011bc2:	290a      	cmp	r1, #10
 8011bc4:	b2c0      	uxtb	r0, r0
 8011bc6:	f040 8176 	bne.w	8011eb6 <DebugConsoleParsing+0x6ce>
 8011bca:	b105      	cbz	r5, 8011bce <DebugConsoleParsing+0x3e6>
 8011bcc:	7320      	strb	r0, [r4, #12]
      NumByte++;
 8011bce:	1c7b      	adds	r3, r7, #1
      if(att_data[Index] == '\n')
 8011bd0:	290a      	cmp	r1, #10
      NumByte++;
 8011bd2:	72e3      	strb	r3, [r4, #11]
      if(att_data[Index] == '\n')
 8011bd4:	f47f ae2e 	bne.w	8011834 <DebugConsoleParsing+0x4c>
        if(VibrationParametersCommandParsing(CommandLenght))
 8011bd8:	7b23      	ldrb	r3, [r4, #12]
 8011bda:	930c      	str	r3, [sp, #48]	; 0x30
  if(Index >= CommandLenght)
 8011bdc:	2b0d      	cmp	r3, #13
 8011bde:	d809      	bhi.n	8011bf4 <DebugConsoleParsing+0x40c>
    BytesToWrite =sprintf((char *)BufferToWrite,"\r\nParameters not found\r\n");
 8011be0:	4988      	ldr	r1, [pc, #544]	; (8011e04 <DebugConsoleParsing+0x61c>)
 8011be2:	4886      	ldr	r0, [pc, #536]	; (8011dfc <DebugConsoleParsing+0x614>)
 8011be4:	f008 fd76 	bl	801a6d4 <strcpy>
 8011be8:	4b85      	ldr	r3, [pc, #532]	; (8011e00 <DebugConsoleParsing+0x618>)
    Term_Update(BufferToWrite,BytesToWrite);
 8011bea:	4884      	ldr	r0, [pc, #528]	; (8011dfc <DebugConsoleParsing+0x614>)
    BytesToWrite =sprintf((char *)BufferToWrite,"\r\nParameters not found\r\n");
 8011bec:	2118      	movs	r1, #24
 8011bee:	7019      	strb	r1, [r3, #0]
    Term_Update(BufferToWrite,BytesToWrite);
 8011bf0:	f7fb ff34 	bl	800da5c <Term_Update>
          Param[i]= Param[i] + ( (VibrParam[Index + DigitNumber - t - 1] & 0x0F) * ((uint32_t)pow(10.0,t)) );
 8011bf4:	ed9f 8b7c 	vldr	d8, [pc, #496]	; 8011de8 <DebugConsoleParsing+0x600>
          UpdatedParameters= 1;
 8011bf8:	2700      	movs	r7, #0
 8011bfa:	230d      	movs	r3, #13
 8011bfc:	2507      	movs	r5, #7
 8011bfe:	463e      	mov	r6, r7
  while(Index < CommandLenght)
 8011c00:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011c02:	429a      	cmp	r2, r3
 8011c04:	f300 8160 	bgt.w	8011ec8 <DebugConsoleParsing+0x6e0>
  BytesToWrite =sprintf((char *)BufferToWrite,"\r\nOK\r\n");
 8011c08:	497f      	ldr	r1, [pc, #508]	; (8011e08 <DebugConsoleParsing+0x620>)
 8011c0a:	487c      	ldr	r0, [pc, #496]	; (8011dfc <DebugConsoleParsing+0x614>)
 8011c0c:	f008 fd62 	bl	801a6d4 <strcpy>
 8011c10:	4b7b      	ldr	r3, [pc, #492]	; (8011e00 <DebugConsoleParsing+0x618>)
  Term_Update(BufferToWrite,BytesToWrite);  
 8011c12:	487a      	ldr	r0, [pc, #488]	; (8011dfc <DebugConsoleParsing+0x614>)
  BytesToWrite =sprintf((char *)BufferToWrite,"\r\nOK\r\n");
 8011c14:	2106      	movs	r1, #6
 8011c16:	7019      	strb	r1, [r3, #0]
  Term_Update(BufferToWrite,BytesToWrite);  
 8011c18:	f7fb ff20 	bl	800da5c <Term_Update>
  if(UpdatedAccParameters)
 8011c1c:	b10f      	cbz	r7, 8011c22 <DebugConsoleParsing+0x43a>
    MotionSP_AcceleroConfig();
 8011c1e:	f000 fc19 	bl	8012454 <MotionSP_AcceleroConfig>
        if(VibrationParametersCommandParsing(CommandLenght))
 8011c22:	b10e      	cbz	r6, 8011c28 <DebugConsoleParsing+0x440>
          SaveVibrationParamToMemory();
 8011c24:	f002 f9fc 	bl	8014020 <SaveVibrationParamToMemory>
        NumByte= 0;
 8011c28:	2000      	movs	r0, #0
 8011c2a:	72e0      	strb	r0, [r4, #11]
        SetVibrParam=0;
 8011c2c:	72a0      	strb	r0, [r4, #10]
        CommandLenght=0;
 8011c2e:	7320      	strb	r0, [r4, #12]
        SendBackData = ConfigCommandParsing(loc_att_data,loc_data_length);
 8011c30:	4605      	mov	r5, r0
  return SendBackData;
 8011c32:	e600      	b.n	8011836 <DebugConsoleParsing+0x4e>
    } else if(!strncmp("versionBle",(char *)(att_data),10)) {
 8011c34:	4875      	ldr	r0, [pc, #468]	; (8011e0c <DebugConsoleParsing+0x624>)
 8011c36:	220a      	movs	r2, #10
 8011c38:	4631      	mov	r1, r6
 8011c3a:	f008 fd53 	bl	801a6e4 <strncmp>
 8011c3e:	b9b0      	cbnz	r0, 8011c6e <DebugConsoleParsing+0x486>
      getBlueNRG2_Version(&hwVersion, &fwVersion);
 8011c40:	a911      	add	r1, sp, #68	; 0x44
 8011c42:	f10d 0043 	add.w	r0, sp, #67	; 0x43
 8011c46:	f002 f945 	bl	8013ed4 <getBlueNRG2_Version>
      BytesToWrite =sprintf((char *)BufferToWrite,"%s_v%d.%d.%c\r\n",
 8011c4a:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8011c4e:	4970      	ldr	r1, [pc, #448]	; (8011e10 <DebugConsoleParsing+0x628>)
 8011c50:	486a      	ldr	r0, [pc, #424]	; (8011dfc <DebugConsoleParsing+0x614>)
                            ('a' + (fwVersion&0xF)));
 8011c52:	f003 020f 	and.w	r2, r3, #15
      BytesToWrite =sprintf((char *)BufferToWrite,"%s_v%d.%d.%c\r\n",
 8011c56:	3261      	adds	r2, #97	; 0x61
 8011c58:	9201      	str	r2, [sp, #4]
 8011c5a:	f3c3 1203 	ubfx	r2, r3, #4, #4
 8011c5e:	9200      	str	r2, [sp, #0]
 8011c60:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8011c64:	4a6b      	ldr	r2, [pc, #428]	; (8011e14 <DebugConsoleParsing+0x62c>)
 8011c66:	f008 fcc5 	bl	801a5f4 <siprintf>
 8011c6a:	b2c1      	uxtb	r1, r0
 8011c6c:	e6c2      	b.n	80119f4 <DebugConsoleParsing+0x20c>
    } else if(!strncmp("getVibrParam",(char *)(att_data),12)) {
 8011c6e:	486a      	ldr	r0, [pc, #424]	; (8011e18 <DebugConsoleParsing+0x630>)
 8011c70:	220c      	movs	r2, #12
 8011c72:	4631      	mov	r1, r6
 8011c74:	f008 fd36 	bl	801a6e4 <strncmp>
 8011c78:	2800      	cmp	r0, #0
 8011c7a:	d12e      	bne.n	8011cda <DebugConsoleParsing+0x4f2>
      BytesToWrite =sprintf((char *)BufferToWrite,"\r\nAccelerometer parameters:\r\n");
 8011c7c:	4d60      	ldr	r5, [pc, #384]	; (8011e00 <DebugConsoleParsing+0x618>)
 8011c7e:	4967      	ldr	r1, [pc, #412]	; (8011e1c <DebugConsoleParsing+0x634>)
 8011c80:	485e      	ldr	r0, [pc, #376]	; (8011dfc <DebugConsoleParsing+0x614>)
 8011c82:	f008 fd27 	bl	801a6d4 <strcpy>
 8011c86:	211d      	movs	r1, #29
      Term_Update(BufferToWrite,BytesToWrite);
 8011c88:	485c      	ldr	r0, [pc, #368]	; (8011dfc <DebugConsoleParsing+0x614>)
      BytesToWrite =sprintf((char *)BufferToWrite,"\r\nAccelerometer parameters:\r\n");
 8011c8a:	7029      	strb	r1, [r5, #0]
      Term_Update(BufferToWrite,BytesToWrite);
 8011c8c:	f7fb fee6 	bl	800da5c <Term_Update>
                            AcceleroParams.fs);
 8011c90:	4a63      	ldr	r2, [pc, #396]	; (8011e20 <DebugConsoleParsing+0x638>)
      BytesToWrite =sprintf((char *)BufferToWrite,"AccFifoBdr= %d fs= %d\r\n",
 8011c92:	4964      	ldr	r1, [pc, #400]	; (8011e24 <DebugConsoleParsing+0x63c>)
 8011c94:	8913      	ldrh	r3, [r2, #8]
 8011c96:	4859      	ldr	r0, [pc, #356]	; (8011dfc <DebugConsoleParsing+0x614>)
 8011c98:	8892      	ldrh	r2, [r2, #4]
 8011c9a:	f008 fcab 	bl	801a5f4 <siprintf>
 8011c9e:	b2c1      	uxtb	r1, r0
      Term_Update(BufferToWrite,BytesToWrite);
 8011ca0:	4856      	ldr	r0, [pc, #344]	; (8011dfc <DebugConsoleParsing+0x614>)
      BytesToWrite =sprintf((char *)BufferToWrite,"AccFifoBdr= %d fs= %d\r\n",
 8011ca2:	7029      	strb	r1, [r5, #0]
      Term_Update(BufferToWrite,BytesToWrite);
 8011ca4:	f7fb feda 	bl	800da5c <Term_Update>
      BytesToWrite =sprintf((char *)BufferToWrite,"MotionSP parameters:\r\n");
 8011ca8:	495f      	ldr	r1, [pc, #380]	; (8011e28 <DebugConsoleParsing+0x640>)
 8011caa:	4854      	ldr	r0, [pc, #336]	; (8011dfc <DebugConsoleParsing+0x614>)
 8011cac:	f008 fd12 	bl	801a6d4 <strcpy>
 8011cb0:	2116      	movs	r1, #22
      Term_Update(BufferToWrite,BytesToWrite);
 8011cb2:	4852      	ldr	r0, [pc, #328]	; (8011dfc <DebugConsoleParsing+0x614>)
      BytesToWrite =sprintf((char *)BufferToWrite,"MotionSP parameters:\r\n");
 8011cb4:	7029      	strb	r1, [r5, #0]
      Term_Update(BufferToWrite,BytesToWrite);
 8011cb6:	f7fb fed1 	bl	800da5c <Term_Update>
                            MotionSP_Parameters.window,
 8011cba:	4a5c      	ldr	r2, [pc, #368]	; (8011e2c <DebugConsoleParsing+0x644>)
      BytesToWrite =sprintf((char *)BufferToWrite,"size= %d wind= %d tacq= %d subrng= %d ovl= %d\r\n",
 8011cbc:	495c      	ldr	r1, [pc, #368]	; (8011e30 <DebugConsoleParsing+0x648>)
 8011cbe:	7a93      	ldrb	r3, [r2, #10]
 8011cc0:	9302      	str	r3, [sp, #8]
 8011cc2:	8993      	ldrh	r3, [r2, #12]
 8011cc4:	9301      	str	r3, [sp, #4]
 8011cc6:	8913      	ldrh	r3, [r2, #8]
 8011cc8:	9300      	str	r3, [sp, #0]
 8011cca:	8893      	ldrh	r3, [r2, #4]
 8011ccc:	484b      	ldr	r0, [pc, #300]	; (8011dfc <DebugConsoleParsing+0x614>)
 8011cce:	8812      	ldrh	r2, [r2, #0]
 8011cd0:	f008 fc90 	bl	801a5f4 <siprintf>
 8011cd4:	b2c1      	uxtb	r1, r0
        BytesToWrite =sprintf((char *)BufferToWrite,"Disconnecting and riconnecting to see the new node name\r\n");
 8011cd6:	7029      	strb	r1, [r5, #0]
        Term_Update(BufferToWrite,BytesToWrite);
 8011cd8:	e68e      	b.n	80119f8 <DebugConsoleParsing+0x210>
    } else if(!strncmp("setVibrParam",(char *)(att_data),12)) {
 8011cda:	4856      	ldr	r0, [pc, #344]	; (8011e34 <DebugConsoleParsing+0x64c>)
 8011cdc:	220c      	movs	r2, #12
 8011cde:	4631      	mov	r1, r6
 8011ce0:	f008 fd00 	bl	801a6e4 <strncmp>
 8011ce4:	b910      	cbnz	r0, 8011cec <DebugConsoleParsing+0x504>
      SetVibrParam= 1;
 8011ce6:	2301      	movs	r3, #1
 8011ce8:	72a3      	strb	r3, [r4, #10]
      SendBackData=0;
 8011cea:	e759      	b.n	8011ba0 <DebugConsoleParsing+0x3b8>
    } else if((att_data[0]=='u') & (att_data[1]=='i') & (att_data[2]=='d')) {
 8011cec:	7832      	ldrb	r2, [r6, #0]
 8011cee:	7873      	ldrb	r3, [r6, #1]
 8011cf0:	2a75      	cmp	r2, #117	; 0x75
 8011cf2:	bf08      	it	eq
 8011cf4:	2b69      	cmpeq	r3, #105	; 0x69
 8011cf6:	d12f      	bne.n	8011d58 <DebugConsoleParsing+0x570>
 8011cf8:	78b3      	ldrb	r3, [r6, #2]
 8011cfa:	2b64      	cmp	r3, #100	; 0x64
 8011cfc:	d12c      	bne.n	8011d58 <DebugConsoleParsing+0x570>
      uint32_t MCU_ID = STM32_MCU_ID[0]&0xFFF;
 8011cfe:	494e      	ldr	r1, [pc, #312]	; (8011e38 <DebugConsoleParsing+0x650>)
                            uid[ 3],uid[ 2],uid[ 1],uid[ 0],
 8011d00:	4b4e      	ldr	r3, [pc, #312]	; (8011e3c <DebugConsoleParsing+0x654>)
      uint32_t MCU_ID = STM32_MCU_ID[0]&0xFFF;
 8011d02:	6809      	ldr	r1, [r1, #0]
                            uid[ 3],uid[ 2],uid[ 1],uid[ 0],
 8011d04:	4a4e      	ldr	r2, [pc, #312]	; (8011e40 <DebugConsoleParsing+0x658>)
      BytesToWrite =sprintf((char *)BufferToWrite,"%.2X%.2X%.2X%.2X%.2X%.2X%.2X%.2X%.2X%.2X%.2X%.2X_%.3lX\r\n",
 8011d06:	781b      	ldrb	r3, [r3, #0]
 8011d08:	7812      	ldrb	r2, [r2, #0]
 8011d0a:	483c      	ldr	r0, [pc, #240]	; (8011dfc <DebugConsoleParsing+0x614>)
      uint32_t MCU_ID = STM32_MCU_ID[0]&0xFFF;
 8011d0c:	f3c1 010b 	ubfx	r1, r1, #0, #12
      BytesToWrite =sprintf((char *)BufferToWrite,"%.2X%.2X%.2X%.2X%.2X%.2X%.2X%.2X%.2X%.2X%.2X%.2X_%.3lX\r\n",
 8011d10:	910a      	str	r1, [sp, #40]	; 0x28
                            uid[11],uid[ 10],uid[9],uid[8],
 8011d12:	494c      	ldr	r1, [pc, #304]	; (8011e44 <DebugConsoleParsing+0x65c>)
      BytesToWrite =sprintf((char *)BufferToWrite,"%.2X%.2X%.2X%.2X%.2X%.2X%.2X%.2X%.2X%.2X%.2X%.2X_%.3lX\r\n",
 8011d14:	7809      	ldrb	r1, [r1, #0]
 8011d16:	9109      	str	r1, [sp, #36]	; 0x24
                            uid[11],uid[ 10],uid[9],uid[8],
 8011d18:	494b      	ldr	r1, [pc, #300]	; (8011e48 <DebugConsoleParsing+0x660>)
      BytesToWrite =sprintf((char *)BufferToWrite,"%.2X%.2X%.2X%.2X%.2X%.2X%.2X%.2X%.2X%.2X%.2X%.2X_%.3lX\r\n",
 8011d1a:	7809      	ldrb	r1, [r1, #0]
 8011d1c:	9108      	str	r1, [sp, #32]
                            uid[11],uid[ 10],uid[9],uid[8],
 8011d1e:	494b      	ldr	r1, [pc, #300]	; (8011e4c <DebugConsoleParsing+0x664>)
      BytesToWrite =sprintf((char *)BufferToWrite,"%.2X%.2X%.2X%.2X%.2X%.2X%.2X%.2X%.2X%.2X%.2X%.2X_%.3lX\r\n",
 8011d20:	7809      	ldrb	r1, [r1, #0]
 8011d22:	9107      	str	r1, [sp, #28]
                            uid[11],uid[ 10],uid[9],uid[8],
 8011d24:	494a      	ldr	r1, [pc, #296]	; (8011e50 <DebugConsoleParsing+0x668>)
      BytesToWrite =sprintf((char *)BufferToWrite,"%.2X%.2X%.2X%.2X%.2X%.2X%.2X%.2X%.2X%.2X%.2X%.2X_%.3lX\r\n",
 8011d26:	7809      	ldrb	r1, [r1, #0]
 8011d28:	9106      	str	r1, [sp, #24]
                            uid[ 7],uid[ 6],uid[ 5],uid[ 4],
 8011d2a:	494a      	ldr	r1, [pc, #296]	; (8011e54 <DebugConsoleParsing+0x66c>)
      BytesToWrite =sprintf((char *)BufferToWrite,"%.2X%.2X%.2X%.2X%.2X%.2X%.2X%.2X%.2X%.2X%.2X%.2X_%.3lX\r\n",
 8011d2c:	7809      	ldrb	r1, [r1, #0]
 8011d2e:	9105      	str	r1, [sp, #20]
                            uid[ 7],uid[ 6],uid[ 5],uid[ 4],
 8011d30:	4949      	ldr	r1, [pc, #292]	; (8011e58 <DebugConsoleParsing+0x670>)
      BytesToWrite =sprintf((char *)BufferToWrite,"%.2X%.2X%.2X%.2X%.2X%.2X%.2X%.2X%.2X%.2X%.2X%.2X_%.3lX\r\n",
 8011d32:	7809      	ldrb	r1, [r1, #0]
 8011d34:	9104      	str	r1, [sp, #16]
                            uid[ 7],uid[ 6],uid[ 5],uid[ 4],
 8011d36:	4949      	ldr	r1, [pc, #292]	; (8011e5c <DebugConsoleParsing+0x674>)
      BytesToWrite =sprintf((char *)BufferToWrite,"%.2X%.2X%.2X%.2X%.2X%.2X%.2X%.2X%.2X%.2X%.2X%.2X_%.3lX\r\n",
 8011d38:	7809      	ldrb	r1, [r1, #0]
 8011d3a:	9103      	str	r1, [sp, #12]
                            uid[ 7],uid[ 6],uid[ 5],uid[ 4],
 8011d3c:	4948      	ldr	r1, [pc, #288]	; (8011e60 <DebugConsoleParsing+0x678>)
      BytesToWrite =sprintf((char *)BufferToWrite,"%.2X%.2X%.2X%.2X%.2X%.2X%.2X%.2X%.2X%.2X%.2X%.2X_%.3lX\r\n",
 8011d3e:	7809      	ldrb	r1, [r1, #0]
 8011d40:	9102      	str	r1, [sp, #8]
                            uid[ 3],uid[ 2],uid[ 1],uid[ 0],
 8011d42:	4948      	ldr	r1, [pc, #288]	; (8011e64 <DebugConsoleParsing+0x67c>)
      BytesToWrite =sprintf((char *)BufferToWrite,"%.2X%.2X%.2X%.2X%.2X%.2X%.2X%.2X%.2X%.2X%.2X%.2X_%.3lX\r\n",
 8011d44:	7809      	ldrb	r1, [r1, #0]
 8011d46:	9101      	str	r1, [sp, #4]
                            uid[ 3],uid[ 2],uid[ 1],uid[ 0],
 8011d48:	4947      	ldr	r1, [pc, #284]	; (8011e68 <DebugConsoleParsing+0x680>)
      BytesToWrite =sprintf((char *)BufferToWrite,"%.2X%.2X%.2X%.2X%.2X%.2X%.2X%.2X%.2X%.2X%.2X%.2X_%.3lX\r\n",
 8011d4a:	7809      	ldrb	r1, [r1, #0]
 8011d4c:	9100      	str	r1, [sp, #0]
 8011d4e:	4947      	ldr	r1, [pc, #284]	; (8011e6c <DebugConsoleParsing+0x684>)
 8011d50:	f008 fc50 	bl	801a5f4 <siprintf>
 8011d54:	211e      	movs	r1, #30
 8011d56:	e64d      	b.n	80119f4 <DebugConsoleParsing+0x20c>
    } else if(!strncmp("setName ",(char *)(att_data),8)) {
 8011d58:	4845      	ldr	r0, [pc, #276]	; (8011e70 <DebugConsoleParsing+0x688>)
 8011d5a:	2208      	movs	r2, #8
 8011d5c:	4631      	mov	r1, r6
 8011d5e:	f008 fcc1 	bl	801a6e4 <strncmp>
 8011d62:	4607      	mov	r7, r0
 8011d64:	2800      	cmp	r0, #0
 8011d66:	f47f af1c 	bne.w	8011ba2 <DebugConsoleParsing+0x3ba>
      int NameLength= data_length -1;
 8011d6a:	f108 39ff 	add.w	r9, r8, #4294967295
      if(NameLength > 8)
 8011d6e:	f1b9 0f08 	cmp.w	r9, #8
 8011d72:	f340 808b 	ble.w	8011e8c <DebugConsoleParsing+0x6a4>
          NodeName[i]= atoi(" ");
 8011d76:	f8df a100 	ldr.w	sl, [pc, #256]	; 8011e78 <DebugConsoleParsing+0x690>
 8011d7a:	f8df b10c 	ldr.w	fp, [pc, #268]	; 8011e88 <DebugConsoleParsing+0x6a0>
        for(int i=1;i<8;i++)
 8011d7e:	2501      	movs	r5, #1
 8011d80:	4657      	mov	r7, sl
          NodeName[i]= atoi(" ");
 8011d82:	4658      	mov	r0, fp
 8011d84:	f007 fbee 	bl	8019564 <atoi>
 8011d88:	f80a 0005 	strb.w	r0, [sl, r5]
        for(int i=1;i<8;i++)
 8011d8c:	3501      	adds	r5, #1
 8011d8e:	2d08      	cmp	r5, #8
 8011d90:	d1f7      	bne.n	8011d82 <DebugConsoleParsing+0x59a>
        if((NameLength - 8) > 7)
 8011d92:	f1b9 0f0f 	cmp.w	r9, #15
        else NameLength= NameLength - 8;
 8011d96:	4a37      	ldr	r2, [pc, #220]	; (8011e74 <DebugConsoleParsing+0x68c>)
 8011d98:	bfd4      	ite	le
 8011d9a:	f1a8 0109 	suble.w	r1, r8, #9
          NameLength= 7;
 8011d9e:	2107      	movgt	r1, #7
        for(int i=1;i<NameLength+1;i++)
 8011da0:	1df0      	adds	r0, r6, #7
 8011da2:	2301      	movs	r3, #1
 8011da4:	428b      	cmp	r3, r1
 8011da6:	dd16      	ble.n	8011dd6 <DebugConsoleParsing+0x5ee>
        MDM_SaveGMD(GMD_NODE_NAME,(void *)&NodeName);
 8011da8:	4933      	ldr	r1, [pc, #204]	; (8011e78 <DebugConsoleParsing+0x690>)
        BytesToWrite =sprintf((char *)BufferToWrite,"\nThe node nome has been updated\r\n");
 8011daa:	4d15      	ldr	r5, [pc, #84]	; (8011e00 <DebugConsoleParsing+0x618>)
        MDM_SaveGMD(GMD_NODE_NAME,(void *)&NodeName);
 8011dac:	2008      	movs	r0, #8
 8011dae:	f7fa fe31 	bl	800ca14 <MDM_SaveGMD>
        NecessityToSaveMetaDataManager=1;
 8011db2:	4b32      	ldr	r3, [pc, #200]	; (8011e7c <DebugConsoleParsing+0x694>)
        BytesToWrite =sprintf((char *)BufferToWrite,"\nThe node nome has been updated\r\n");
 8011db4:	4932      	ldr	r1, [pc, #200]	; (8011e80 <DebugConsoleParsing+0x698>)
 8011db6:	4811      	ldr	r0, [pc, #68]	; (8011dfc <DebugConsoleParsing+0x614>)
        NecessityToSaveMetaDataManager=1;
 8011db8:	2201      	movs	r2, #1
 8011dba:	601a      	str	r2, [r3, #0]
        BytesToWrite =sprintf((char *)BufferToWrite,"\nThe node nome has been updated\r\n");
 8011dbc:	f008 fc8a 	bl	801a6d4 <strcpy>
 8011dc0:	2121      	movs	r1, #33	; 0x21
        Term_Update(BufferToWrite,BytesToWrite);
 8011dc2:	480e      	ldr	r0, [pc, #56]	; (8011dfc <DebugConsoleParsing+0x614>)
        BytesToWrite =sprintf((char *)BufferToWrite,"\nThe node nome has been updated\r\n");
 8011dc4:	7029      	strb	r1, [r5, #0]
        Term_Update(BufferToWrite,BytesToWrite);
 8011dc6:	f7fb fe49 	bl	800da5c <Term_Update>
        BytesToWrite =sprintf((char *)BufferToWrite,"Disconnecting and riconnecting to see the new node name\r\n");
 8011dca:	492e      	ldr	r1, [pc, #184]	; (8011e84 <DebugConsoleParsing+0x69c>)
 8011dcc:	480b      	ldr	r0, [pc, #44]	; (8011dfc <DebugConsoleParsing+0x614>)
 8011dce:	f008 fc81 	bl	801a6d4 <strcpy>
 8011dd2:	2139      	movs	r1, #57	; 0x39
 8011dd4:	e77f      	b.n	8011cd6 <DebugConsoleParsing+0x4ee>
          NodeName[i]= att_data[i+7];
 8011dd6:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8011dda:	54fd      	strb	r5, [r7, r3]
          BlueNRG_StackValue.BoardName[i-1]= att_data[i+7];
 8011ddc:	f802 5b01 	strb.w	r5, [r2], #1
        for(int i=1;i<NameLength+1;i++)
 8011de0:	3301      	adds	r3, #1
 8011de2:	e7df      	b.n	8011da4 <DebugConsoleParsing+0x5bc>
 8011de4:	f3af 8000 	nop.w
 8011de8:	00000000 	.word	0x00000000
 8011dec:	40240000 	.word	0x40240000
 8011df0:	0802219c 	.word	0x0802219c
 8011df4:	0802273a 	.word	0x0802273a
 8011df8:	0802275b 	.word	0x0802275b
 8011dfc:	20009a30 	.word	0x20009a30
 8011e00:	20009b3d 	.word	0x20009b3d
 8011e04:	08022916 	.word	0x08022916
 8011e08:	08022a22 	.word	0x08022a22
 8011e0c:	08022785 	.word	0x08022785
 8011e10:	08022799 	.word	0x08022799
 8011e14:	08022790 	.word	0x08022790
 8011e18:	080227a8 	.word	0x080227a8
 8011e1c:	080227b5 	.word	0x080227b5
 8011e20:	2000b664 	.word	0x2000b664
 8011e24:	080227d3 	.word	0x080227d3
 8011e28:	080227eb 	.word	0x080227eb
 8011e2c:	2000ae78 	.word	0x2000ae78
 8011e30:	08022802 	.word	0x08022802
 8011e34:	08022832 	.word	0x08022832
 8011e38:	e0042000 	.word	0xe0042000
 8011e3c:	1fff7a12 	.word	0x1fff7a12
 8011e40:	1fff7a13 	.word	0x1fff7a13
 8011e44:	1fff7a18 	.word	0x1fff7a18
 8011e48:	1fff7a19 	.word	0x1fff7a19
 8011e4c:	1fff7a1a 	.word	0x1fff7a1a
 8011e50:	1fff7a1b 	.word	0x1fff7a1b
 8011e54:	1fff7a14 	.word	0x1fff7a14
 8011e58:	1fff7a15 	.word	0x1fff7a15
 8011e5c:	1fff7a16 	.word	0x1fff7a16
 8011e60:	1fff7a17 	.word	0x1fff7a17
 8011e64:	1fff7a10 	.word	0x1fff7a10
 8011e68:	1fff7a11 	.word	0x1fff7a11
 8011e6c:	0802283f 	.word	0x0802283f
 8011e70:	08022878 	.word	0x08022878
 8011e74:	200099b1 	.word	0x200099b1
 8011e78:	2000bec4 	.word	0x2000bec4
 8011e7c:	200021e8 	.word	0x200021e8
 8011e80:	08022881 	.word	0x08022881
 8011e84:	080228a3 	.word	0x080228a3
 8011e88:	08021f71 	.word	0x08021f71
        BytesToWrite =sprintf((char *)BufferToWrite,"\nInsert the node name\r\n");
 8011e8c:	4da9      	ldr	r5, [pc, #676]	; (8012134 <DebugConsoleParsing+0x94c>)
 8011e8e:	49aa      	ldr	r1, [pc, #680]	; (8012138 <DebugConsoleParsing+0x950>)
 8011e90:	48aa      	ldr	r0, [pc, #680]	; (801213c <DebugConsoleParsing+0x954>)
 8011e92:	f008 fc1f 	bl	801a6d4 <strcpy>
 8011e96:	2117      	movs	r1, #23
        Term_Update(BufferToWrite,BytesToWrite);
 8011e98:	48a8      	ldr	r0, [pc, #672]	; (801213c <DebugConsoleParsing+0x954>)
        BytesToWrite =sprintf((char *)BufferToWrite,"\nInsert the node name\r\n");
 8011e9a:	7029      	strb	r1, [r5, #0]
        Term_Update(BufferToWrite,BytesToWrite);
 8011e9c:	f7fb fdde 	bl	800da5c <Term_Update>
        BytesToWrite =sprintf((char *)BufferToWrite,"Use command: setName 'xxxxxxx'\r\n");
 8011ea0:	49a7      	ldr	r1, [pc, #668]	; (8012140 <DebugConsoleParsing+0x958>)
 8011ea2:	48a6      	ldr	r0, [pc, #664]	; (801213c <DebugConsoleParsing+0x954>)
 8011ea4:	f008 fc16 	bl	801a6d4 <strcpy>
 8011ea8:	2120      	movs	r1, #32
        Term_Update(BufferToWrite,BytesToWrite);
 8011eaa:	48a4      	ldr	r0, [pc, #656]	; (801213c <DebugConsoleParsing+0x954>)
        BytesToWrite =sprintf((char *)BufferToWrite,"Use command: setName 'xxxxxxx'\r\n");
 8011eac:	7029      	strb	r1, [r5, #0]
        Term_Update(BufferToWrite,BytesToWrite);
 8011eae:	f7fb fdd5 	bl	800da5c <Term_Update>
      SendBackData=0;
 8011eb2:	463d      	mov	r5, r7
 8011eb4:	e675      	b.n	8011ba2 <DebugConsoleParsing+0x3ba>
      while( (att_data[Index] != '\n') && (att_data[Index] != '\0') )
 8011eb6:	2900      	cmp	r1, #0
 8011eb8:	f43f ae87 	beq.w	8011bca <DebugConsoleParsing+0x3e2>
        VibrParam[20*NumByte + Index]= att_data[Index];
 8011ebc:	18d0      	adds	r0, r2, r3
        Index++;
 8011ebe:	3301      	adds	r3, #1
        VibrParam[20*NumByte + Index]= att_data[Index];
 8011ec0:	7341      	strb	r1, [r0, #13]
        Index++;
 8011ec2:	b2db      	uxtb	r3, r3
 8011ec4:	2501      	movs	r5, #1
 8011ec6:	e679      	b.n	8011bbc <DebugConsoleParsing+0x3d4>
    Index++;
 8011ec8:	f103 0801 	add.w	r8, r3, #1
    if((VibrParam[Index]=='o') & (VibrParam[Index+1]=='d') & (VibrParam[Index+2]=='r'))
 8011ecc:	18e2      	adds	r2, r4, r3
 8011ece:	eb04 0108 	add.w	r1, r4, r8
 8011ed2:	7bd0      	ldrb	r0, [r2, #15]
 8011ed4:	7b49      	ldrb	r1, [r1, #13]
 8011ed6:	2864      	cmp	r0, #100	; 0x64
 8011ed8:	bf08      	it	eq
 8011eda:	296f      	cmpeq	r1, #111	; 0x6f
 8011edc:	f040 80bc 	bne.w	8012058 <DebugConsoleParsing+0x870>
 8011ee0:	7c12      	ldrb	r2, [r2, #16]
 8011ee2:	2a72      	cmp	r2, #114	; 0x72
 8011ee4:	f040 80b8 	bne.w	8012058 <DebugConsoleParsing+0x870>
      Index+= 4;
 8011ee8:	f103 0805 	add.w	r8, r3, #5
      ParamFound= 1;
 8011eec:	2201      	movs	r2, #1
      i=0;
 8011eee:	2500      	movs	r5, #0
    if((VibrParam[Index]=='f') & (VibrParam[Index+1]=='s'))
 8011ef0:	eb04 0308 	add.w	r3, r4, r8
 8011ef4:	7b99      	ldrb	r1, [r3, #14]
 8011ef6:	2973      	cmp	r1, #115	; 0x73
 8011ef8:	d106      	bne.n	8011f08 <DebugConsoleParsing+0x720>
 8011efa:	7b5b      	ldrb	r3, [r3, #13]
 8011efc:	2b66      	cmp	r3, #102	; 0x66
      ParamFound= 1;
 8011efe:	bf02      	ittt	eq
 8011f00:	2201      	moveq	r2, #1
 8011f02:	f108 0803 	addeq.w	r8, r8, #3
      i=1;
 8011f06:	4615      	moveq	r5, r2
    if((VibrParam[Index]=='s') & (VibrParam[Index+1]=='i') & (VibrParam[Index+2]=='z') & (VibrParam[Index+3]=='e'))
 8011f08:	eb04 0108 	add.w	r1, r4, r8
 8011f0c:	7b8b      	ldrb	r3, [r1, #14]
 8011f0e:	7bc8      	ldrb	r0, [r1, #15]
 8011f10:	2b69      	cmp	r3, #105	; 0x69
 8011f12:	bf08      	it	eq
 8011f14:	287a      	cmpeq	r0, #122	; 0x7a
 8011f16:	7b48      	ldrb	r0, [r1, #13]
 8011f18:	bf0c      	ite	eq
 8011f1a:	2301      	moveq	r3, #1
 8011f1c:	2300      	movne	r3, #0
 8011f1e:	2873      	cmp	r0, #115	; 0x73
 8011f20:	bf14      	ite	ne
 8011f22:	2300      	movne	r3, #0
 8011f24:	f003 0301 	andeq.w	r3, r3, #1
 8011f28:	b133      	cbz	r3, 8011f38 <DebugConsoleParsing+0x750>
 8011f2a:	7c0b      	ldrb	r3, [r1, #16]
 8011f2c:	2b65      	cmp	r3, #101	; 0x65
      Index+= 5;
 8011f2e:	bf02      	ittt	eq
 8011f30:	f108 0805 	addeq.w	r8, r8, #5
      ParamFound= 1;
 8011f34:	2201      	moveq	r2, #1
      i=2;
 8011f36:	2502      	moveq	r5, #2
    if((VibrParam[Index]=='w') & (VibrParam[Index+1]=='i') & (VibrParam[Index+2]=='n') & (VibrParam[Index+3]=='d'))
 8011f38:	eb04 0108 	add.w	r1, r4, r8
 8011f3c:	7b8b      	ldrb	r3, [r1, #14]
 8011f3e:	7bc8      	ldrb	r0, [r1, #15]
 8011f40:	2b69      	cmp	r3, #105	; 0x69
 8011f42:	bf08      	it	eq
 8011f44:	286e      	cmpeq	r0, #110	; 0x6e
 8011f46:	7b48      	ldrb	r0, [r1, #13]
 8011f48:	bf0c      	ite	eq
 8011f4a:	2301      	moveq	r3, #1
 8011f4c:	2300      	movne	r3, #0
 8011f4e:	2877      	cmp	r0, #119	; 0x77
 8011f50:	bf14      	ite	ne
 8011f52:	2300      	movne	r3, #0
 8011f54:	f003 0301 	andeq.w	r3, r3, #1
 8011f58:	b133      	cbz	r3, 8011f68 <DebugConsoleParsing+0x780>
 8011f5a:	7c0b      	ldrb	r3, [r1, #16]
 8011f5c:	2b64      	cmp	r3, #100	; 0x64
      Index+= 5;
 8011f5e:	bf02      	ittt	eq
 8011f60:	f108 0805 	addeq.w	r8, r8, #5
      ParamFound= 1;
 8011f64:	2201      	moveq	r2, #1
      i=3;
 8011f66:	2503      	moveq	r5, #3
    if((VibrParam[Index]=='t') & (VibrParam[Index+1]=='a') & (VibrParam[Index+2]=='c') & (VibrParam[Index+3]=='q'))
 8011f68:	eb04 0108 	add.w	r1, r4, r8
 8011f6c:	7b8b      	ldrb	r3, [r1, #14]
 8011f6e:	7bc8      	ldrb	r0, [r1, #15]
 8011f70:	2b61      	cmp	r3, #97	; 0x61
 8011f72:	bf08      	it	eq
 8011f74:	2863      	cmpeq	r0, #99	; 0x63
 8011f76:	7b48      	ldrb	r0, [r1, #13]
 8011f78:	bf0c      	ite	eq
 8011f7a:	2301      	moveq	r3, #1
 8011f7c:	2300      	movne	r3, #0
 8011f7e:	2874      	cmp	r0, #116	; 0x74
 8011f80:	bf14      	ite	ne
 8011f82:	2300      	movne	r3, #0
 8011f84:	f003 0301 	andeq.w	r3, r3, #1
 8011f88:	b133      	cbz	r3, 8011f98 <DebugConsoleParsing+0x7b0>
 8011f8a:	7c0b      	ldrb	r3, [r1, #16]
 8011f8c:	2b71      	cmp	r3, #113	; 0x71
      Index+= 5;
 8011f8e:	bf02      	ittt	eq
 8011f90:	f108 0805 	addeq.w	r8, r8, #5
      ParamFound= 1;
 8011f94:	2201      	moveq	r2, #1
      i=4;
 8011f96:	2504      	moveq	r5, #4
    if((VibrParam[Index]=='o') & (VibrParam[Index+1]=='v') & (VibrParam[Index+2]=='l') )
 8011f98:	eb04 0308 	add.w	r3, r4, r8
 8011f9c:	7b98      	ldrb	r0, [r3, #14]
 8011f9e:	7bd9      	ldrb	r1, [r3, #15]
 8011fa0:	2876      	cmp	r0, #118	; 0x76
 8011fa2:	bf08      	it	eq
 8011fa4:	296c      	cmpeq	r1, #108	; 0x6c
 8011fa6:	d106      	bne.n	8011fb6 <DebugConsoleParsing+0x7ce>
 8011fa8:	7b5b      	ldrb	r3, [r3, #13]
 8011faa:	2b6f      	cmp	r3, #111	; 0x6f
 8011fac:	bf02      	ittt	eq
 8011fae:	f108 0804 	addeq.w	r8, r8, #4
      ParamFound= 1;
 8011fb2:	2201      	moveq	r2, #1
      i=5;
 8011fb4:	2505      	moveq	r5, #5
    if((VibrParam[Index]=='s') & (VibrParam[Index+1]=='u') & (VibrParam[Index+2]=='b') & (VibrParam[Index+3]=='r') & (VibrParam[Index+4]=='n') & (VibrParam[Index+5]=='g'))
 8011fb6:	eb04 0108 	add.w	r1, r4, r8
 8011fba:	7b8b      	ldrb	r3, [r1, #14]
 8011fbc:	f891 c00f 	ldrb.w	ip, [r1, #15]
 8011fc0:	7b48      	ldrb	r0, [r1, #13]
 8011fc2:	2b75      	cmp	r3, #117	; 0x75
 8011fc4:	bf08      	it	eq
 8011fc6:	f1bc 0f62 	cmpeq.w	ip, #98	; 0x62
 8011fca:	bf0c      	ite	eq
 8011fcc:	2301      	moveq	r3, #1
 8011fce:	2300      	movne	r3, #0
 8011fd0:	f891 c010 	ldrb.w	ip, [r1, #16]
 8011fd4:	2873      	cmp	r0, #115	; 0x73
 8011fd6:	bf14      	ite	ne
 8011fd8:	2300      	movne	r3, #0
 8011fda:	f003 0301 	andeq.w	r3, r3, #1
 8011fde:	f1bc 0f72 	cmp.w	ip, #114	; 0x72
 8011fe2:	bf14      	ite	ne
 8011fe4:	2300      	movne	r3, #0
 8011fe6:	f003 0301 	andeq.w	r3, r3, #1
 8011fea:	f891 c011 	ldrb.w	ip, [r1, #17]
 8011fee:	f1bc 0f6e 	cmp.w	ip, #110	; 0x6e
 8011ff2:	bf14      	ite	ne
 8011ff4:	2300      	movne	r3, #0
 8011ff6:	f003 0301 	andeq.w	r3, r3, #1
 8011ffa:	b37b      	cbz	r3, 801205c <DebugConsoleParsing+0x874>
 8011ffc:	7c8b      	ldrb	r3, [r1, #18]
 8011ffe:	2b67      	cmp	r3, #103	; 0x67
 8012000:	d12c      	bne.n	801205c <DebugConsoleParsing+0x874>
      Index+= 7;
 8012002:	f108 0807 	add.w	r8, r8, #7
      i=6;
 8012006:	2506      	movs	r5, #6
 8012008:	2300      	movs	r3, #0
      while( (VibrParam[Index + DigitNumber] != ' ') &&
 801200a:	fa58 fa83 	uxtab	sl, r8, r3
 801200e:	eb04 010a 	add.w	r1, r4, sl
 8012012:	b2da      	uxtb	r2, r3
 8012014:	7b49      	ldrb	r1, [r1, #13]
 8012016:	290d      	cmp	r1, #13
 8012018:	d004      	beq.n	8012024 <DebugConsoleParsing+0x83c>
             (VibrParam[Index + DigitNumber] != '\r') &&
 801201a:	f011 0fdf 	tst.w	r1, #223	; 0xdf
 801201e:	f103 0301 	add.w	r3, r3, #1
 8012022:	d1f2      	bne.n	801200a <DebugConsoleParsing+0x822>
      Param[i]= VibrParam[Index + DigitNumber - 1] & 0x0F;
 8012024:	ab18      	add	r3, sp, #96	; 0x60
 8012026:	eb03 0885 	add.w	r8, r3, r5, lsl #2
 801202a:	eb04 030a 	add.w	r3, r4, sl
      if(DigitNumber > 1)
 801202e:	2a01      	cmp	r2, #1
      Param[i]= VibrParam[Index + DigitNumber - 1] & 0x0F;
 8012030:	7b1b      	ldrb	r3, [r3, #12]
 8012032:	f003 030f 	and.w	r3, r3, #15
 8012036:	f848 3c1c 	str.w	r3, [r8, #-28]
      if(DigitNumber > 1)
 801203a:	d905      	bls.n	8012048 <DebugConsoleParsing+0x860>
 801203c:	4b41      	ldr	r3, [pc, #260]	; (8012144 <DebugConsoleParsing+0x95c>)
        for(int t=1; t<DigitNumber; t++)
 801203e:	f04f 0b01 	mov.w	fp, #1
 8012042:	4453      	add	r3, sl
 8012044:	455a      	cmp	r2, fp
 8012046:	dc18      	bgt.n	801207a <DebugConsoleParsing+0x892>
      switch(i)
 8012048:	2d06      	cmp	r5, #6
 801204a:	d86e      	bhi.n	801212a <DebugConsoleParsing+0x942>
 801204c:	e8df f005 	tbb	[pc, r5]
 8012050:	a58f6237 	.word	0xa58f6237
 8012054:	b9ad      	.short	0xb9ad
 8012056:	c2          	.byte	0xc2
 8012057:	00          	.byte	0x00
    ParamFound= 0;
 8012058:	2200      	movs	r2, #0
 801205a:	e749      	b.n	8011ef0 <DebugConsoleParsing+0x708>
    if(ParamFound == 1)
 801205c:	2a00      	cmp	r2, #0
 801205e:	d1d3      	bne.n	8012008 <DebugConsoleParsing+0x820>
      if(VibrParam[Index] != '-')
 8012060:	282d      	cmp	r0, #45	; 0x2d
 8012062:	d064      	beq.n	801212e <DebugConsoleParsing+0x946>
        BytesToWrite =sprintf((char *)BufferToWrite,"\r\nParam not found\r\n");
 8012064:	4938      	ldr	r1, [pc, #224]	; (8012148 <DebugConsoleParsing+0x960>)
 8012066:	4835      	ldr	r0, [pc, #212]	; (801213c <DebugConsoleParsing+0x954>)
 8012068:	f008 fb34 	bl	801a6d4 <strcpy>
 801206c:	4b31      	ldr	r3, [pc, #196]	; (8012134 <DebugConsoleParsing+0x94c>)
        Term_Update(BufferToWrite,BytesToWrite);
 801206e:	4833      	ldr	r0, [pc, #204]	; (801213c <DebugConsoleParsing+0x954>)
        BytesToWrite =sprintf((char *)BufferToWrite,"\r\nParam not found\r\n");
 8012070:	2113      	movs	r1, #19
 8012072:	7019      	strb	r1, [r3, #0]
        Term_Update(BufferToWrite,BytesToWrite);
 8012074:	f7fb fcf2 	bl	800da5c <Term_Update>
 8012078:	e059      	b.n	801212e <DebugConsoleParsing+0x946>
          Param[i]= Param[i] + ( (VibrParam[Index + DigitNumber - t - 1] & 0x0F) * ((uint32_t)pow(10.0,t)) );
 801207a:	f813 9901 	ldrb.w	r9, [r3], #-1
 801207e:	920f      	str	r2, [sp, #60]	; 0x3c
 8012080:	4658      	mov	r0, fp
 8012082:	f858 2c1c 	ldr.w	r2, [r8, #-28]
 8012086:	920d      	str	r2, [sp, #52]	; 0x34
 8012088:	930e      	str	r3, [sp, #56]	; 0x38
 801208a:	f7f2 fadb 	bl	8004644 <__aeabi_i2d>
 801208e:	eeb0 0a48 	vmov.f32	s0, s16
 8012092:	eef0 0a68 	vmov.f32	s1, s17
 8012096:	ec41 0b11 	vmov	d1, r0, r1
 801209a:	f00b fde7 	bl	801dc6c <pow>
 801209e:	ec51 0b10 	vmov	r0, r1, d0
 80120a2:	f7f2 fe11 	bl	8004cc8 <__aeabi_d2uiz>
 80120a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80120a8:	f009 090f 	and.w	r9, r9, #15
 80120ac:	fb00 3009 	mla	r0, r0, r9, r3
 80120b0:	f848 0c1c 	str.w	r0, [r8, #-28]
        for(int t=1; t<DigitNumber; t++)
 80120b4:	e9dd 320e 	ldrd	r3, r2, [sp, #56]	; 0x38
 80120b8:	f10b 0b01 	add.w	fp, fp, #1
 80120bc:	e7c2      	b.n	8012044 <DebugConsoleParsing+0x85c>
        if( (Param[i] == 13)   || (Param[i] == 26)   || (Param[i] == 52)   ||
 80120be:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80120c0:	2b0d      	cmp	r3, #13
 80120c2:	d01a      	beq.n	80120fa <DebugConsoleParsing+0x912>
 80120c4:	2b1a      	cmp	r3, #26
 80120c6:	d018      	beq.n	80120fa <DebugConsoleParsing+0x912>
 80120c8:	2b34      	cmp	r3, #52	; 0x34
 80120ca:	d016      	beq.n	80120fa <DebugConsoleParsing+0x912>
 80120cc:	2b68      	cmp	r3, #104	; 0x68
 80120ce:	d014      	beq.n	80120fa <DebugConsoleParsing+0x912>
            (Param[i] == 104)  || (Param[i] == 208)  || (Param[i] == 416)  ||
 80120d0:	2bd0      	cmp	r3, #208	; 0xd0
 80120d2:	d012      	beq.n	80120fa <DebugConsoleParsing+0x912>
 80120d4:	f5b3 7fd0 	cmp.w	r3, #416	; 0x1a0
 80120d8:	d00f      	beq.n	80120fa <DebugConsoleParsing+0x912>
 80120da:	f240 3241 	movw	r2, #833	; 0x341
 80120de:	4293      	cmp	r3, r2
 80120e0:	d00b      	beq.n	80120fa <DebugConsoleParsing+0x912>
            (Param[i] == 833)  || (Param[i] == 1660) || (Param[i] == 3330) || (Param[i] == 6660)
 80120e2:	f240 627c 	movw	r2, #1660	; 0x67c
 80120e6:	4293      	cmp	r3, r2
 80120e8:	d007      	beq.n	80120fa <DebugConsoleParsing+0x912>
 80120ea:	f640 5202 	movw	r2, #3330	; 0xd02
 80120ee:	4293      	cmp	r3, r2
 80120f0:	d003      	beq.n	80120fa <DebugConsoleParsing+0x912>
 80120f2:	f641 2204 	movw	r2, #6660	; 0x1a04
 80120f6:	4293      	cmp	r3, r2
 80120f8:	d106      	bne.n	8012108 <DebugConsoleParsing+0x920>
          AcceleroParams.AccFifoBdr= Param[i];
 80120fa:	4a14      	ldr	r2, [pc, #80]	; (801214c <DebugConsoleParsing+0x964>)
 80120fc:	b29b      	uxth	r3, r3
 80120fe:	8093      	strh	r3, [r2, #4]
          AcceleroParams.AccOdr=  Param[i];
 8012100:	8013      	strh	r3, [r2, #0]
          UpdatedAccParameters= 1;
 8012102:	2701      	movs	r7, #1
          UpdatedParameters= 1;
 8012104:	2601      	movs	r6, #1
 8012106:	e010      	b.n	801212a <DebugConsoleParsing+0x942>
          BytesToWrite =sprintf((char *)BufferToWrite,"\r\nValue out of range for odr\r\n");
 8012108:	4911      	ldr	r1, [pc, #68]	; (8012150 <DebugConsoleParsing+0x968>)
          BytesToWrite =sprintf((char *)BufferToWrite,"\r\nValue out of range for ovl\r\n");
 801210a:	480c      	ldr	r0, [pc, #48]	; (801213c <DebugConsoleParsing+0x954>)
 801210c:	f008 fae2 	bl	801a6d4 <strcpy>
 8012110:	211e      	movs	r1, #30
 8012112:	e026      	b.n	8012162 <DebugConsoleParsing+0x97a>
        if( (Param[i] == 2) || (Param[i] == 4) || (Param[i] == 8) || (Param[i] == 16) )
 8012114:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8012116:	2b10      	cmp	r3, #16
 8012118:	d81e      	bhi.n	8012158 <DebugConsoleParsing+0x970>
 801211a:	4a0e      	ldr	r2, [pc, #56]	; (8012154 <DebugConsoleParsing+0x96c>)
 801211c:	40da      	lsrs	r2, r3
 801211e:	07d1      	lsls	r1, r2, #31
 8012120:	d51a      	bpl.n	8012158 <DebugConsoleParsing+0x970>
          AcceleroParams.fs= Param[i];
 8012122:	4a0a      	ldr	r2, [pc, #40]	; (801214c <DebugConsoleParsing+0x964>)
          UpdatedAccParameters= 1;
 8012124:	462f      	mov	r7, r5
          AcceleroParams.fs= Param[i];
 8012126:	8113      	strh	r3, [r2, #8]
          UpdatedParameters= 1;
 8012128:	462e      	mov	r6, r5
      Index= Index + DigitNumber + 1;
 801212a:	f10a 0801 	add.w	r8, sl, #1
          UpdatedParameters= 1;
 801212e:	4643      	mov	r3, r8
 8012130:	e566      	b.n	8011c00 <DebugConsoleParsing+0x418>
 8012132:	bf00      	nop
 8012134:	20009b3d 	.word	0x20009b3d
 8012138:	080228dd 	.word	0x080228dd
 801213c:	20009a30 	.word	0x20009a30
 8012140:	080228f5 	.word	0x080228f5
 8012144:	20009697 	.word	0x20009697
 8012148:	08022a0e 	.word	0x08022a0e
 801214c:	2000b664 	.word	0x2000b664
 8012150:	0802292f 	.word	0x0802292f
 8012154:	00010114 	.word	0x00010114
          BytesToWrite =sprintf((char *)BufferToWrite,"\r\nValue out of range for fs\r\n");
 8012158:	4941      	ldr	r1, [pc, #260]	; (8012260 <DebugConsoleParsing+0xa78>)
 801215a:	4842      	ldr	r0, [pc, #264]	; (8012264 <DebugConsoleParsing+0xa7c>)
 801215c:	f008 faba 	bl	801a6d4 <strcpy>
 8012160:	211d      	movs	r1, #29
          BytesToWrite =sprintf((char *)BufferToWrite,"\r\nValue out of range for nsubrng\r\n");
 8012162:	4b41      	ldr	r3, [pc, #260]	; (8012268 <DebugConsoleParsing+0xa80>)
          Term_Update(BufferToWrite,BytesToWrite);
 8012164:	483f      	ldr	r0, [pc, #252]	; (8012264 <DebugConsoleParsing+0xa7c>)
          BytesToWrite =sprintf((char *)BufferToWrite,"\r\nValue out of range for nsubrng\r\n");
 8012166:	7019      	strb	r1, [r3, #0]
          Term_Update(BufferToWrite,BytesToWrite);
 8012168:	f7fb fc78 	bl	800da5c <Term_Update>
 801216c:	e7dd      	b.n	801212a <DebugConsoleParsing+0x942>
        if( (Param[i] == 256) || (Param[i] == 512) || (Param[i] == 1024) || (Param[i] == 2048))
 801216e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8012170:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012174:	d008      	beq.n	8012188 <DebugConsoleParsing+0x9a0>
 8012176:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801217a:	d005      	beq.n	8012188 <DebugConsoleParsing+0x9a0>
 801217c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8012180:	d002      	beq.n	8012188 <DebugConsoleParsing+0x9a0>
 8012182:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8012186:	d102      	bne.n	801218e <DebugConsoleParsing+0x9a6>
          MotionSP_Parameters.FftSize= Param[i];
 8012188:	4a38      	ldr	r2, [pc, #224]	; (801226c <DebugConsoleParsing+0xa84>)
 801218a:	8013      	strh	r3, [r2, #0]
 801218c:	e7ba      	b.n	8012104 <DebugConsoleParsing+0x91c>
          BytesToWrite =sprintf((char *)BufferToWrite,"\r\nValue out of range for size\r\n");
 801218e:	4938      	ldr	r1, [pc, #224]	; (8012270 <DebugConsoleParsing+0xa88>)
          BytesToWrite =sprintf((char *)BufferToWrite,"\r\nValue out of range for tacq\r\n");
 8012190:	4834      	ldr	r0, [pc, #208]	; (8012264 <DebugConsoleParsing+0xa7c>)
 8012192:	f008 fa9f 	bl	801a6d4 <strcpy>
 8012196:	211f      	movs	r1, #31
 8012198:	e7e3      	b.n	8012162 <DebugConsoleParsing+0x97a>
        if(Param[i] < 4)
 801219a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801219c:	2b03      	cmp	r3, #3
 801219e:	d802      	bhi.n	80121a6 <DebugConsoleParsing+0x9be>
          MotionSP_Parameters.window= Param[i];
 80121a0:	4a32      	ldr	r2, [pc, #200]	; (801226c <DebugConsoleParsing+0xa84>)
 80121a2:	8093      	strh	r3, [r2, #4]
          UpdatedParameters= 1;
 80121a4:	e7ae      	b.n	8012104 <DebugConsoleParsing+0x91c>
          BytesToWrite =sprintf((char *)BufferToWrite,"\r\nValue out of range for wind\r\n");
 80121a6:	4933      	ldr	r1, [pc, #204]	; (8012274 <DebugConsoleParsing+0xa8c>)
 80121a8:	e7f2      	b.n	8012190 <DebugConsoleParsing+0x9a8>
        if( (Param[i] >= 500) && (Param[i] <= 60000) )
 80121aa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80121ac:	f64e 026c 	movw	r2, #59500	; 0xe86c
 80121b0:	f5a3 71fa 	sub.w	r1, r3, #500	; 0x1f4
 80121b4:	4291      	cmp	r1, r2
 80121b6:	d802      	bhi.n	80121be <DebugConsoleParsing+0x9d6>
          MotionSP_Parameters.tacq= Param[i];
 80121b8:	4a2c      	ldr	r2, [pc, #176]	; (801226c <DebugConsoleParsing+0xa84>)
 80121ba:	8113      	strh	r3, [r2, #8]
          UpdatedParameters= 1;
 80121bc:	e7a2      	b.n	8012104 <DebugConsoleParsing+0x91c>
          BytesToWrite =sprintf((char *)BufferToWrite,"\r\nValue out of range for tacq\r\n");
 80121be:	492e      	ldr	r1, [pc, #184]	; (8012278 <DebugConsoleParsing+0xa90>)
 80121c0:	e7e6      	b.n	8012190 <DebugConsoleParsing+0x9a8>
        if( (Param[i] >= 5) && (Param[i] <= 95) )
 80121c2:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80121c4:	1f5a      	subs	r2, r3, #5
 80121c6:	2a5a      	cmp	r2, #90	; 0x5a
 80121c8:	d802      	bhi.n	80121d0 <DebugConsoleParsing+0x9e8>
          MotionSP_Parameters.FftOvl= Param[i];
 80121ca:	4a28      	ldr	r2, [pc, #160]	; (801226c <DebugConsoleParsing+0xa84>)
 80121cc:	7293      	strb	r3, [r2, #10]
          UpdatedParameters= 1;
 80121ce:	e799      	b.n	8012104 <DebugConsoleParsing+0x91c>
          BytesToWrite =sprintf((char *)BufferToWrite,"\r\nValue out of range for ovl\r\n");
 80121d0:	492a      	ldr	r1, [pc, #168]	; (801227c <DebugConsoleParsing+0xa94>)
 80121d2:	e79a      	b.n	801210a <DebugConsoleParsing+0x922>
        if( (Param[i] == 8) || (Param[i] == 16) || (Param[i] == 32) || (Param[i] == 64) )
 80121d4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80121d6:	f1a3 0108 	sub.w	r1, r3, #8
 80121da:	2918      	cmp	r1, #24
 80121dc:	d907      	bls.n	80121ee <DebugConsoleParsing+0xa06>
 80121de:	2b40      	cmp	r3, #64	; 0x40
 80121e0:	d009      	beq.n	80121f6 <DebugConsoleParsing+0xa0e>
          BytesToWrite =sprintf((char *)BufferToWrite,"\r\nValue out of range for nsubrng\r\n");
 80121e2:	4927      	ldr	r1, [pc, #156]	; (8012280 <DebugConsoleParsing+0xa98>)
 80121e4:	481f      	ldr	r0, [pc, #124]	; (8012264 <DebugConsoleParsing+0xa7c>)
 80121e6:	f008 fa75 	bl	801a6d4 <strcpy>
 80121ea:	2122      	movs	r1, #34	; 0x22
 80121ec:	e7b9      	b.n	8012162 <DebugConsoleParsing+0x97a>
        if( (Param[i] == 8) || (Param[i] == 16) || (Param[i] == 32) || (Param[i] == 64) )
 80121ee:	4a25      	ldr	r2, [pc, #148]	; (8012284 <DebugConsoleParsing+0xa9c>)
 80121f0:	40ca      	lsrs	r2, r1
 80121f2:	07d2      	lsls	r2, r2, #31
 80121f4:	d5f5      	bpl.n	80121e2 <DebugConsoleParsing+0x9fa>
          MotionSP_Parameters.subrange_num= Param[i];
 80121f6:	4a1d      	ldr	r2, [pc, #116]	; (801226c <DebugConsoleParsing+0xa84>)
 80121f8:	8193      	strh	r3, [r2, #12]
          UpdatedParameters= 1;
 80121fa:	e783      	b.n	8012104 <DebugConsoleParsing+0x91c>
   if(SendBackData) {
 80121fc:	2d00      	cmp	r5, #0
 80121fe:	f43f ab19 	beq.w	8011834 <DebugConsoleParsing+0x4c>
    if(att_data[0]=='@') {
 8012202:	7833      	ldrb	r3, [r6, #0]
 8012204:	2b40      	cmp	r3, #64	; 0x40
 8012206:	f47f ab16 	bne.w	8011836 <DebugConsoleParsing+0x4e>
      if(att_data[1]=='T') {
 801220a:	7873      	ldrb	r3, [r6, #1]
 801220c:	2b54      	cmp	r3, #84	; 0x54
 801220e:	d110      	bne.n	8012232 <DebugConsoleParsing+0xa4a>
        loc_att_data[0] = (FEATURE_MASK_TEMP1>>24)&0xFF;
 8012210:	f44f 6380 	mov.w	r3, #1024	; 0x400
        loc_att_data[0] = (FEATURE_MASK_MIC>>24)&0xFF;
 8012214:	9311      	str	r3, [sp, #68]	; 0x44
        loc_att_data[4] = 255;
 8012216:	23ff      	movs	r3, #255	; 0xff
 8012218:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
        switch(att_data[2]) {
 801221c:	78b3      	ldrb	r3, [r6, #2]
 801221e:	3b44      	subs	r3, #68	; 0x44
 8012220:	2b09      	cmp	r3, #9
 8012222:	d813      	bhi.n	801224c <DebugConsoleParsing+0xa64>
 8012224:	e8df f003 	tbb	[pc, r3]
 8012228:	1212121a 	.word	0x1212121a
 801222c:	12121218 	.word	0x12121218
 8012230:	160f      	.short	0x160f
      } else if(att_data[1]=='A') {
 8012232:	2b41      	cmp	r3, #65	; 0x41
 8012234:	d102      	bne.n	801223c <DebugConsoleParsing+0xa54>
        loc_att_data[0] = (FEATURE_MASK_ACC>>24)&0xFF;
 8012236:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801223a:	e7eb      	b.n	8012214 <DebugConsoleParsing+0xa2c>
      } else if(att_data[1]=='M') {
 801223c:	2b4d      	cmp	r3, #77	; 0x4d
 801223e:	f47f aafa 	bne.w	8011836 <DebugConsoleParsing+0x4e>
        loc_att_data[0] = (FEATURE_MASK_MIC>>24)&0xFF;
 8012242:	2304      	movs	r3, #4
 8012244:	e7e6      	b.n	8012214 <DebugConsoleParsing+0xa2c>
            loc_att_data[5] = 50; /* @5S */
 8012246:	2332      	movs	r3, #50	; 0x32
            loc_att_data[5] = 0; /* Default */
 8012248:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
        SendBackData = ConfigCommandParsing(loc_att_data,loc_data_length);
 801224c:	a811      	add	r0, sp, #68	; 0x44
 801224e:	f7ff fa67 	bl	8011720 <ConfigCommandParsing.isra.0>
 8012252:	e4ed      	b.n	8011c30 <DebugConsoleParsing+0x448>
            loc_att_data[5] = 10; /* @1S */
 8012254:	230a      	movs	r3, #10
 8012256:	e7f7      	b.n	8012248 <DebugConsoleParsing+0xa60>
            loc_att_data[5] = 1; /* @100mS */
 8012258:	2301      	movs	r3, #1
 801225a:	e7f5      	b.n	8012248 <DebugConsoleParsing+0xa60>
            loc_att_data[5] = 0; /* Default */
 801225c:	2300      	movs	r3, #0
 801225e:	e7f3      	b.n	8012248 <DebugConsoleParsing+0xa60>
 8012260:	0802294e 	.word	0x0802294e
 8012264:	20009a30 	.word	0x20009a30
 8012268:	20009b3d 	.word	0x20009b3d
 801226c:	2000ae78 	.word	0x2000ae78
 8012270:	0802296c 	.word	0x0802296c
 8012274:	0802298c 	.word	0x0802298c
 8012278:	080229ac 	.word	0x080229ac
 801227c:	080229cc 	.word	0x080229cc
 8012280:	080229eb 	.word	0x080229eb
 8012284:	01000101 	.word	0x01000101

08012288 <BluetoothInit>:
  BlueNRG_StackValue.ConfigValueOffsets                   = CONFIG_DATA_PUBADDR_OFFSET;
 8012288:	4b0a      	ldr	r3, [pc, #40]	; (80122b4 <BluetoothInit+0x2c>)
 801228a:	f44f 3283 	mov.w	r2, #67072	; 0x10600
 801228e:	601a      	str	r2, [r3, #0]
  BlueNRG_StackValue.AuthenticationRequirements           = BONDING;
 8012290:	f2a2 42ff 	subw	r2, r2, #1279	; 0x4ff
 8012294:	605a      	str	r2, [r3, #4]
  BlueNRG_StackValue.EnableHighPowerMode= 1; /*  High Power */
 8012296:	f102 7280 	add.w	r2, r2, #16777216	; 0x1000000
 801229a:	f502 7240 	add.w	r2, r2, #768	; 0x300
  BlueNRG_StackValue.EnableSecureConnection=0;
 801229e:	2100      	movs	r1, #0
  BlueNRG_StackValue.EnableHighPowerMode= 1; /*  High Power */
 80122a0:	609a      	str	r2, [r3, #8]
  BlueNRG_StackValue.EnableExtConfig = 1;
 80122a2:	2201      	movs	r2, #1
  BlueNRG_StackValue.EnableSecureConnection=0;
 80122a4:	7559      	strb	r1, [r3, #21]
  BlueNRG_StackValue.EnableRandomSecurePIN = 1;
 80122a6:	839a      	strh	r2, [r3, #28]
  BlueNRG_StackValue.SecurePIN=123456;
 80122a8:	4903      	ldr	r1, [pc, #12]	; (80122b8 <BluetoothInit+0x30>)
  BlueNRG_StackValue.EnableExtConfig = 1;
 80122aa:	731a      	strb	r2, [r3, #12]
  BlueNRG_StackValue.SecurePIN=123456;
 80122ac:	6199      	str	r1, [r3, #24]
    BlueNRG_StackValue.ForceRescan =1;
 80122ae:	779a      	strb	r2, [r3, #30]
  InitBleManager();
 80122b0:	f7fb bcd4 	b.w	800dc5c <InitBleManager>
 80122b4:	200099a4 	.word	0x200099a4
 80122b8:	0001e240 	.word	0x0001e240

080122bc <BLE_InitCustomService>:
void BLE_InitCustomService(void) {
 80122bc:	b508      	push	{r3, lr}
  CustomDebugConsoleParsingCallback = &DebugConsoleParsing;
 80122be:	4b23      	ldr	r3, [pc, #140]	; (801234c <BLE_InitCustomService+0x90>)
 80122c0:	4a23      	ldr	r2, [pc, #140]	; (8012350 <BLE_InitCustomService+0x94>)
 80122c2:	601a      	str	r2, [r3, #0]
  CustomConnectionCompleted = &ConnectionCompletedFunction;
 80122c4:	4b23      	ldr	r3, [pc, #140]	; (8012354 <BLE_InitCustomService+0x98>)
 80122c6:	4a24      	ldr	r2, [pc, #144]	; (8012358 <BLE_InitCustomService+0x9c>)
 80122c8:	601a      	str	r2, [r3, #0]
  CustomDisconnectionCompleted = &DisconnectionCompletedFunction;
 80122ca:	4b24      	ldr	r3, [pc, #144]	; (801235c <BLE_InitCustomService+0xa0>)
 80122cc:	4a24      	ldr	r2, [pc, #144]	; (8012360 <BLE_InitCustomService+0xa4>)
 80122ce:	601a      	str	r2, [r3, #0]
  CustomExtConfigUidCommandCallback  = &ExtExtConfigUidCommandCallback;
 80122d0:	4b24      	ldr	r3, [pc, #144]	; (8012364 <BLE_InitCustomService+0xa8>)
 80122d2:	4a25      	ldr	r2, [pc, #148]	; (8012368 <BLE_InitCustomService+0xac>)
 80122d4:	601a      	str	r2, [r3, #0]
  CustomExtConfigInfoCommandCallback = &ExtConfigInfoCommandCallback;
 80122d6:	4b25      	ldr	r3, [pc, #148]	; (801236c <BLE_InitCustomService+0xb0>)
 80122d8:	4a25      	ldr	r2, [pc, #148]	; (8012370 <BLE_InitCustomService+0xb4>)
 80122da:	601a      	str	r2, [r3, #0]
  CustomExtConfigHelpCommandCallback = &ExtConfigHelpCommandCallback;
 80122dc:	4b25      	ldr	r3, [pc, #148]	; (8012374 <BLE_InitCustomService+0xb8>)
 80122de:	4a26      	ldr	r2, [pc, #152]	; (8012378 <BLE_InitCustomService+0xbc>)
 80122e0:	601a      	str	r2, [r3, #0]
  CustomExtConfigVersionFwCommandCallback = &ExtConfigVersionFwCommandCallback;
 80122e2:	4b26      	ldr	r3, [pc, #152]	; (801237c <BLE_InitCustomService+0xc0>)
 80122e4:	4a26      	ldr	r2, [pc, #152]	; (8012380 <BLE_InitCustomService+0xc4>)
 80122e6:	601a      	str	r2, [r3, #0]
  CustomExtConfigSetNameCommandCallback = &ExtConfigSetNameCommandCallback;
 80122e8:	4b26      	ldr	r3, [pc, #152]	; (8012384 <BLE_InitCustomService+0xc8>)
 80122ea:	4a27      	ldr	r2, [pc, #156]	; (8012388 <BLE_InitCustomService+0xcc>)
 80122ec:	601a      	str	r2, [r3, #0]
  CustomExtConfigReadCustomCommandsCallback = &ExtConfigReadCustomCommandsCallback;
 80122ee:	4b27      	ldr	r3, [pc, #156]	; (801238c <BLE_InitCustomService+0xd0>)
 80122f0:	4a27      	ldr	r2, [pc, #156]	; (8012390 <BLE_InitCustomService+0xd4>)
 80122f2:	601a      	str	r2, [r3, #0]
  CustomExtConfigCustomCommandCallback = &ExtConfigCustomCommandCallback;
 80122f4:	4b27      	ldr	r3, [pc, #156]	; (8012394 <BLE_InitCustomService+0xd8>)
 80122f6:	4a28      	ldr	r2, [pc, #160]	; (8012398 <BLE_InitCustomService+0xdc>)
 80122f8:	601a      	str	r2, [r3, #0]
  BleManagerAddChar(BLE_InitEnvService(1, 1, 2));
 80122fa:	2101      	movs	r1, #1
 80122fc:	2202      	movs	r2, #2
 80122fe:	4608      	mov	r0, r1
 8012300:	f7fa fc6a 	bl	800cbd8 <BLE_InitEnvService>
 8012304:	f7fb fc96 	bl	800dc34 <BleManagerAddChar>
  BleManagerAddChar(BLE_InitInertialService(1,1,1));
 8012308:	2201      	movs	r2, #1
 801230a:	4611      	mov	r1, r2
 801230c:	4610      	mov	r0, r2
 801230e:	f7fb f849 	bl	800d3a4 <BLE_InitInertialService>
 8012312:	f7fb fc8f 	bl	800dc34 <BleManagerAddChar>
  BleManagerAddChar(BLE_InitAudioLevelService(AUDIO_IN_CHANNELS));
 8012316:	2002      	movs	r0, #2
 8012318:	f7fa fbca 	bl	800cab0 <BLE_InitAudioLevelService>
 801231c:	f7fb fc8a 	bl	800dc34 <BleManagerAddChar>
  BleManagerAddChar(BLE_InitFFTAmplitudeService());
 8012320:	f7fa ffc4 	bl	800d2ac <BLE_InitFFTAmplitudeService>
 8012324:	f7fb fc86 	bl	800dc34 <BleManagerAddChar>
  BleManagerAddChar(BLE_InitTimeDomainService());
 8012328:	f7fc ff3c 	bl	800f1a4 <BLE_InitTimeDomainService>
 801232c:	f7fb fc82 	bl	800dc34 <BleManagerAddChar>
  BleManagerAddChar(BLE_InitFFTAlarmSpeedStatusService());
 8012330:	f7fa fe20 	bl	800cf74 <BLE_InitFFTAlarmSpeedStatusService>
 8012334:	f7fb fc7e 	bl	800dc34 <BleManagerAddChar>
  BleManagerAddChar(BLE_InitFFTAlarmAccPeakStatusService());
 8012338:	f7fa fd6c 	bl	800ce14 <BLE_InitFFTAlarmAccPeakStatusService>
 801233c:	f7fb fc7a 	bl	800dc34 <BleManagerAddChar>
  BleManagerAddChar(BLE_InitFFTAlarmSubrangeStatusService());
 8012340:	f7fa fec8 	bl	800d0d4 <BLE_InitFFTAlarmSubrangeStatusService>
}
 8012344:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  BleManagerAddChar(BLE_InitFFTAlarmSubrangeStatusService());
 8012348:	f7fb bc74 	b.w	800dc34 <BleManagerAddChar>
 801234c:	200099f4 	.word	0x200099f4
 8012350:	080117e9 	.word	0x080117e9
 8012354:	20009a04 	.word	0x20009a04
 8012358:	0801156d 	.word	0x0801156d
 801235c:	200099ec 	.word	0x200099ec
 8012360:	080114c1 	.word	0x080114c1
 8012364:	20009a14 	.word	0x20009a14
 8012368:	080111f5 	.word	0x080111f5
 801236c:	200099d4 	.word	0x200099d4
 8012370:	08011421 	.word	0x08011421
 8012374:	20009a00 	.word	0x20009a00
 8012378:	080113b5 	.word	0x080113b5
 801237c:	20009a2c 	.word	0x20009a2c
 8012380:	08011389 	.word	0x08011389
 8012384:	200099cc 	.word	0x200099cc
 8012388:	080113c1 	.word	0x080113c1
 801238c:	20009b30 	.word	0x20009b30
 8012390:	08011591 	.word	0x08011591
 8012394:	200099fc 	.word	0x200099fc
 8012398:	08011201 	.word	0x08011201

0801239c <BLE_SetCustomAdvertizeData>:
  manuf_data[15] = BLE_MANAGER_USED_PLATFORM;
 801239c:	2380      	movs	r3, #128	; 0x80
{
 801239e:	b510      	push	{r4, lr}
 80123a0:	4604      	mov	r4, r0
  manuf_data[15] = BLE_MANAGER_USED_PLATFORM;
 80123a2:	73c3      	strb	r3, [r0, #15]
  BLE_SetEnvAdvertizeData(manuf_data);
 80123a4:	f7fa fc94 	bl	800ccd0 <BLE_SetEnvAdvertizeData>
  BLE_SetInertialAdvertizeData(manuf_data);
 80123a8:	4620      	mov	r0, r4
 80123aa:	f7fb f863 	bl	800d474 <BLE_SetInertialAdvertizeData>
  BLE_SetAudioLevelAdvertizeData(manuf_data);
 80123ae:	4620      	mov	r0, r4
 80123b0:	f7fa fbae 	bl	800cb10 <BLE_SetAudioLevelAdvertizeData>
  BLE_SetFFTAmplitudeAdvertizeData(manuf_data);
 80123b4:	4620      	mov	r0, r4
 80123b6:	f7fa ffa7 	bl	800d308 <BLE_SetFFTAmplitudeAdvertizeData>
  BLE_SetTimeDomainAdvertizeData(manuf_data);
 80123ba:	4620      	mov	r0, r4
 80123bc:	f7fc ff20 	bl	800f200 <BLE_SetTimeDomainAdvertizeData>
  BLE_SetFFTAlarmSpeedStatusAdvertizeData(manuf_data);
 80123c0:	4620      	mov	r0, r4
 80123c2:	f7fa fe05 	bl	800cfd0 <BLE_SetFFTAlarmSpeedStatusAdvertizeData>
  BLE_SetFFTAlarmAccPeakStatusAdvertizeData(manuf_data);
 80123c6:	4620      	mov	r0, r4
 80123c8:	f7fa fd52 	bl	800ce70 <BLE_SetFFTAlarmAccPeakStatusAdvertizeData>
  BLE_SetFFTAlarmSubrangeStatusAdvertizeData(manuf_data);
 80123cc:	4620      	mov	r0, r4
 80123ce:	f7fa feaf 	bl	800d130 <BLE_SetFFTAlarmSubrangeStatusAdvertizeData>
  manuf_data[20] = BlueNRG_StackValue.BleMacAddress[5];
 80123d2:	4b09      	ldr	r3, [pc, #36]	; (80123f8 <BLE_SetCustomAdvertizeData+0x5c>)
 80123d4:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 80123d8:	7522      	strb	r2, [r4, #20]
  manuf_data[21] = BlueNRG_StackValue.BleMacAddress[4];
 80123da:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 80123de:	7562      	strb	r2, [r4, #21]
  manuf_data[22] = BlueNRG_StackValue.BleMacAddress[3];
 80123e0:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 80123e4:	75a2      	strb	r2, [r4, #22]
  manuf_data[23] = BlueNRG_StackValue.BleMacAddress[2];
 80123e6:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 80123ea:	75e2      	strb	r2, [r4, #23]
  manuf_data[24] = BlueNRG_StackValue.BleMacAddress[1];
 80123ec:	f893 2020 	ldrb.w	r2, [r3, #32]
 80123f0:	7622      	strb	r2, [r4, #24]
  manuf_data[25] = BlueNRG_StackValue.BleMacAddress[0];
 80123f2:	7fdb      	ldrb	r3, [r3, #31]
 80123f4:	7663      	strb	r3, [r4, #25]
}
 80123f6:	bd10      	pop	{r4, pc}
 80123f8:	200099a4 	.word	0x200099a4

080123fc <MotionSP_SetDefaultVibrationParam>:
/**
  * @brief  Init the Accelerometer Settings and MotionSP Vibration parameters
  * @return None
  */   
void MotionSP_SetDefaultVibrationParam(void)
{
 80123fc:	b508      	push	{r3, lr}
  memset((void *)&AcceleroParams, 0, sizeof(sAccPmtr_t));
 80123fe:	4b12      	ldr	r3, [pc, #72]	; (8012448 <MotionSP_SetDefaultVibrationParam+0x4c>)
 8012400:	2214      	movs	r2, #20
 8012402:	4618      	mov	r0, r3
 8012404:	2100      	movs	r1, #0
 8012406:	f007 fb33 	bl	8019a70 <memset>
  
  /* Set default parameters for accelerometer */
  AcceleroParams.AccOdr         = ACCELERO_ODR_DEFAULT;
 801240a:	f240 627c 	movw	r2, #1660	; 0x67c
 801240e:	8002      	strh	r2, [r0, #0]
  AcceleroParams.AccFifoBdr     = ACCELERO_FIFO_BDR_DEFAULT;
 8012410:	8082      	strh	r2, [r0, #4]
  AcceleroParams.fs             = ACCELERO_FS_DEFAULT;
 8012412:	2204      	movs	r2, #4
  AcceleroParams.HwFilter       = ACCELERO_HW_FILTER_DEFAULT;
  
  /* Set default parameters for MotionSP library */
  MotionSP_Parameters.FftSize       = FFT_SIZE_DEFAULT;
 8012414:	4b0d      	ldr	r3, [pc, #52]	; (801244c <MotionSP_SetDefaultVibrationParam+0x50>)
  AcceleroParams.fs             = ACCELERO_FS_DEFAULT;
 8012416:	8102      	strh	r2, [r0, #8]
  AcceleroParams.HwFilter       = ACCELERO_HW_FILTER_DEFAULT;
 8012418:	2203      	movs	r2, #3
 801241a:	7282      	strb	r2, [r0, #10]
  MotionSP_Parameters.FftSize       = FFT_SIZE_DEFAULT;
 801241c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8012420:	801a      	strh	r2, [r3, #0]
  MotionSP_Parameters.tau           = TAU_DEFAULT;
 8012422:	2232      	movs	r2, #50	; 0x32
 8012424:	805a      	strh	r2, [r3, #2]
  MotionSP_Parameters.window        = WINDOW_DEFAULT;
 8012426:	2201      	movs	r2, #1
 8012428:	809a      	strh	r2, [r3, #4]
  MotionSP_Parameters.td_type       = TD_DEFAULT;
 801242a:	2200      	movs	r2, #0
 801242c:	80da      	strh	r2, [r3, #6]
  MotionSP_Parameters.tacq          = TACQ_DEFAULT;
 801242e:	f241 3288 	movw	r2, #5000	; 0x1388
 8012432:	811a      	strh	r2, [r3, #8]
  MotionSP_Parameters.FftOvl        = FFT_OVL_DEFAULT;
 8012434:	224b      	movs	r2, #75	; 0x4b
 8012436:	729a      	strb	r2, [r3, #10]
  MotionSP_Parameters.subrange_num  = SUBRANGE_DEFAULT;
 8012438:	2208      	movs	r2, #8
 801243a:	819a      	strh	r2, [r3, #12]
  
  PREDMNT1_PRINTF("\r\nVibration parameters have been set as default values\r\n");
 801243c:	4804      	ldr	r0, [pc, #16]	; (8012450 <MotionSP_SetDefaultVibrationParam+0x54>)
}
 801243e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  PREDMNT1_PRINTF("\r\nVibration parameters have been set as default values\r\n");
 8012442:	f008 b8b7 	b.w	801a5b4 <puts>
 8012446:	bf00      	nop
 8012448:	2000b664 	.word	0x2000b664
 801244c:	2000ae78 	.word	0x2000ae78
 8012450:	08022a29 	.word	0x08022a29

08012454 <MotionSP_AcceleroConfig>:
/**
  * @brief  Set accelerometer parameters for MotionSP Vibration
  * @retval BSP status
  */   
int32_t MotionSP_AcceleroConfig(void)
{
 8012454:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
//#endif
  
  PREDMNT1_PRINTF("Accelero Config:\r\n");

  /* Set FS value */
  if ((BSP_Error =  MOTION_SENSOR_SetFullScale(ACCELERO_INSTANCE, MOTION_ACCELERO, AcceleroParams.fs)) != BSP_ERROR_NONE)
 8012458:	4d5e      	ldr	r5, [pc, #376]	; (80125d4 <MotionSP_AcceleroConfig+0x180>)
  PREDMNT1_PRINTF("Accelero Config:\r\n");
 801245a:	485f      	ldr	r0, [pc, #380]	; (80125d8 <MotionSP_AcceleroConfig+0x184>)
 801245c:	f008 f8aa 	bl	801a5b4 <puts>
  if ((BSP_Error =  MOTION_SENSOR_SetFullScale(ACCELERO_INSTANCE, MOTION_ACCELERO, AcceleroParams.fs)) != BSP_ERROR_NONE)
 8012460:	892a      	ldrh	r2, [r5, #8]
 8012462:	2102      	movs	r1, #2
 8012464:	2001      	movs	r0, #1
 8012466:	f002 fec1 	bl	80151ec <IKS01A3_MOTION_SENSOR_SetFullScale>
 801246a:	46a8      	mov	r8, r5
 801246c:	4604      	mov	r4, r0
 801246e:	b130      	cbz	r0, 801247e <MotionSP_AcceleroConfig+0x2a>
  {
    PREDMNT1_PRINTF("\tError on FullScale Setting(BSP_ERROR = %ld)\r\n", BSP_Error);
 8012470:	4601      	mov	r1, r0
 8012472:	485a      	ldr	r0, [pc, #360]	; (80125dc <MotionSP_AcceleroConfig+0x188>)
  MOTION_SENSOR_GetSensitivity(ACCELERO_INSTANCE, MOTION_ACCELERO, &AcceleroParams.AccSens );
  
  /* Set ODR value */
  if ((BSP_Error = MOTION_SENSOR_SetOutputDataRate(ACCELERO_INSTANCE, MOTION_ACCELERO, AcceleroParams.AccOdr)) != BSP_ERROR_NONE)
  {
    PREDMNT1_PRINTF("\tError Set Output Data Rate (BSP_ERROR = %ld)\r\n", BSP_Error);
 8012474:	f008 f818 	bl	801a4a8 <iprintf>
//  /* Set the mag size to be used */
//  AccMagResults.MagSizeTBU = MagSizeForLpf;
//#endif /* LIMIT_FFT_RESULT */
  
  return BSP_Error;
}
 8012478:	4620      	mov	r0, r4
 801247a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    PREDMNT1_PRINTF("\tOk FullScale Setting\r\n");
 801247e:	4858      	ldr	r0, [pc, #352]	; (80125e0 <MotionSP_AcceleroConfig+0x18c>)
 8012480:	f008 f898 	bl	801a5b4 <puts>
  MOTION_SENSOR_GetSensitivity(ACCELERO_INSTANCE, MOTION_ACCELERO, &AcceleroParams.AccSens );
 8012484:	f105 020c 	add.w	r2, r5, #12
 8012488:	2102      	movs	r1, #2
 801248a:	2001      	movs	r0, #1
 801248c:	f002 fe5c 	bl	8015148 <IKS01A3_MOTION_SENSOR_GetSensitivity>
  if ((BSP_Error = MOTION_SENSOR_SetOutputDataRate(ACCELERO_INSTANCE, MOTION_ACCELERO, AcceleroParams.AccOdr)) != BSP_ERROR_NONE)
 8012490:	882b      	ldrh	r3, [r5, #0]
 8012492:	ee00 3a10 	vmov	s0, r3
 8012496:	2102      	movs	r1, #2
 8012498:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 801249c:	2001      	movs	r0, #1
 801249e:	f002 fe7d 	bl	801519c <IKS01A3_MOTION_SENSOR_SetOutputDataRate>
 80124a2:	4604      	mov	r4, r0
 80124a4:	b110      	cbz	r0, 80124ac <MotionSP_AcceleroConfig+0x58>
    PREDMNT1_PRINTF("\tError Set Output Data Rate (BSP_ERROR = %ld)\r\n", BSP_Error);
 80124a6:	4601      	mov	r1, r0
 80124a8:	484e      	ldr	r0, [pc, #312]	; (80125e4 <MotionSP_AcceleroConfig+0x190>)
 80124aa:	e7e3      	b.n	8012474 <MotionSP_AcceleroConfig+0x20>
  memset((void *)&AcceleroODR, 0x00, sizeof(sAcceleroODR_t));
 80124ac:	4d4e      	ldr	r5, [pc, #312]	; (80125e8 <MotionSP_AcceleroConfig+0x194>)
    PREDMNT1_PRINTF("\tOk Set Output Data Rate\r\n");
 80124ae:	484f      	ldr	r0, [pc, #316]	; (80125ec <MotionSP_AcceleroConfig+0x198>)
  AccDrdyNr = 0;
 80124b0:	4f4f      	ldr	r7, [pc, #316]	; (80125f0 <MotionSP_AcceleroConfig+0x19c>)
    PREDMNT1_PRINTF("\tOk Set Output Data Rate\r\n");
 80124b2:	f008 f87f 	bl	801a5b4 <puts>
  HAL_Delay(100);
 80124b6:	2064      	movs	r0, #100	; 0x64
 80124b8:	f001 fda2 	bl	8014000 <HAL_Delay>
  memset((void *)&AcceleroODR, 0x00, sizeof(sAcceleroODR_t));
 80124bc:	e9c5 4400 	strd	r4, r4, [r5]
 80124c0:	60ac      	str	r4, [r5, #8]
 80124c2:	2601      	movs	r6, #1
  if ((BSP_Error = MOTION_SENSOR_DRDY_Set_Mode(ACCELERO_INSTANCE, ACCELERO_DRDY_PULSED)) != BSP_ERROR_NONE)
 80124c4:	2101      	movs	r1, #1
 80124c6:	4608      	mov	r0, r1
    (AcceleroParams.AccOdr * (100-TOLERANCE))/100,
 80124c8:	f8b8 9000 	ldrh.w	r9, [r8]
  if ((BSP_Error = MOTION_SENSOR_DRDY_Set_Mode(ACCELERO_INSTANCE, ACCELERO_DRDY_PULSED)) != BSP_ERROR_NONE)
 80124cc:	f002 ff5c 	bl	8015388 <IKS01A3_MOTION_SENSOR_DRDY_Set_Mode>
 80124d0:	4604      	mov	r4, r0
 80124d2:	2800      	cmp	r0, #0
 80124d4:	d175      	bne.n	80125c2 <MotionSP_AcceleroConfig+0x16e>
  if ((BSP_Error = MOTION_SENSOR_Set_INT2_DRDY(ACCELERO_INSTANCE, ENABLE)) != BSP_ERROR_NONE)
 80124d6:	2101      	movs	r1, #1
 80124d8:	4608      	mov	r0, r1
 80124da:	f002 ff95 	bl	8015408 <IKS01A3_MOTION_SENSOR_Set_INT2_DRDY>
 80124de:	4604      	mov	r4, r0
 80124e0:	2800      	cmp	r0, #0
 80124e2:	d16e      	bne.n	80125c2 <MotionSP_AcceleroConfig+0x16e>
  AccDrdyNr = 0;
 80124e4:	8038      	strh	r0, [r7, #0]
  tkStart = BSP_GetTick();
 80124e6:	f002 fbe7 	bl	8014cb8 <BSP_GetTick>
 80124ea:	4604      	mov	r4, r0
  while ( (BSP_GetTick() - tkStart) < ODRMEASURINGTIME);
 80124ec:	f002 fbe4 	bl	8014cb8 <BSP_GetTick>
 80124f0:	1b03      	subs	r3, r0, r4
 80124f2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80124f6:	d3f9      	bcc.n	80124ec <MotionSP_AcceleroConfig+0x98>
  if ((BSP_Error = MOTION_SENSOR_Set_INT2_DRDY(ACCELERO_INSTANCE, DISABLE)) != BSP_ERROR_NONE)
 80124f8:	2100      	movs	r1, #0
 80124fa:	2001      	movs	r0, #1
 80124fc:	f002 ff84 	bl	8015408 <IKS01A3_MOTION_SENSOR_Set_INT2_DRDY>
 8012500:	4604      	mov	r4, r0
 8012502:	2800      	cmp	r0, #0
 8012504:	d15d      	bne.n	80125c2 <MotionSP_AcceleroConfig+0x16e>
  pAcceleroODR->Frequency = (AccDrdyNr * 1000) / ODRMEASURINGTIME;
 8012506:	883b      	ldrh	r3, [r7, #0]
    (AcceleroParams.AccOdr * (100-TOLERANCE))/100,
 8012508:	225f      	movs	r2, #95	; 0x5f
  pAcceleroODR->Frequency = (AccDrdyNr * 1000) / ODRMEASURINGTIME;
 801250a:	ee07 3a10 	vmov	s14, r3
    (AcceleroParams.AccOdr * (100-TOLERANCE))/100,
 801250e:	fb02 f209 	mul.w	r2, r2, r9
 8012512:	2164      	movs	r1, #100	; 0x64
 8012514:	fbb2 f2f1 	udiv	r2, r2, r1
  if ( (pAcceleroODR->Frequency > OdrRange[0]) && (pAcceleroODR->Frequency < OdrRange[1]) )
 8012518:	ee07 2a90 	vmov	s15, r2
  pAcceleroODR->Frequency = (AccDrdyNr * 1000) / ODRMEASURINGTIME;
 801251c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  if ( (pAcceleroODR->Frequency > OdrRange[0]) && (pAcceleroODR->Frequency < OdrRange[1]) )
 8012520:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  pAcceleroODR->Frequency = (AccDrdyNr * 1000) / ODRMEASURINGTIME;
 8012524:	ed85 7a00 	vstr	s14, [r5]
  if ( (pAcceleroODR->Frequency > OdrRange[0]) && (pAcceleroODR->Frequency < OdrRange[1]) )
 8012528:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801252c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012530:	dd45      	ble.n	80125be <MotionSP_AcceleroConfig+0x16a>
    (AcceleroParams.AccOdr * (100+TOLERANCE))/100
 8012532:	2369      	movs	r3, #105	; 0x69
 8012534:	fb03 f309 	mul.w	r3, r3, r9
 8012538:	fbb3 f3f1 	udiv	r3, r3, r1
  if ( (pAcceleroODR->Frequency > OdrRange[0]) && (pAcceleroODR->Frequency < OdrRange[1]) )
 801253c:	ee07 3a90 	vmov	s15, r3
 8012540:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012544:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8012548:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801254c:	d537      	bpl.n	80125be <MotionSP_AcceleroConfig+0x16a>
    pAcceleroODR->Period = 1.0f/(float)pAcceleroODR->Frequency;
 801254e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8012552:	eec6 7a87 	vdiv.f32	s15, s13, s14
    pAcceleroODR->Tau= exp(-(float)(1000.0f*pAcceleroODR->Period)/(float)MotionSP_Parameters.tau);
 8012556:	4b27      	ldr	r3, [pc, #156]	; (80125f4 <MotionSP_AcceleroConfig+0x1a0>)
 8012558:	885b      	ldrh	r3, [r3, #2]
 801255a:	ed9f 7a27 	vldr	s14, [pc, #156]	; 80125f8 <MotionSP_AcceleroConfig+0x1a4>
    pAcceleroODR->Period = 1.0f/(float)pAcceleroODR->Frequency;
 801255e:	edc5 7a01 	vstr	s15, [r5, #4]
    pAcceleroODR->Tau= exp(-(float)(1000.0f*pAcceleroODR->Period)/(float)MotionSP_Parameters.tau);
 8012562:	ee27 7a67 	vnmul.f32	s14, s14, s15
 8012566:	ee07 3a90 	vmov	s15, r3
 801256a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801256e:	eec7 7a27 	vdiv.f32	s15, s14, s15
 8012572:	ee17 0a90 	vmov	r0, s15
 8012576:	f7f2 f877 	bl	8004668 <__aeabi_f2d>
 801257a:	ec41 0b10 	vmov	d0, r0, r1
 801257e:	f00b fb27 	bl	801dbd0 <exp>
 8012582:	ec51 0b10 	vmov	r0, r1, d0
 8012586:	f7f2 fbbf 	bl	8004d08 <__aeabi_d2f>
 801258a:	60a8      	str	r0, [r5, #8]
    PREDMNT1_PRINTF("\tOk measure and calculate ODR (");
 801258c:	481b      	ldr	r0, [pc, #108]	; (80125fc <MotionSP_AcceleroConfig+0x1a8>)
 801258e:	f007 ff8b 	bl	801a4a8 <iprintf>
  MCR_BLUEMS_F2I_2D(AcceleroODR.Frequency, IntPart, DecPart);
 8012592:	edd5 7a00 	vldr	s15, [r5]
  PREDMNT1_PRINTF(" %ld.%.2ld Hz )\r\n", IntPart, DecPart);
 8012596:	481a      	ldr	r0, [pc, #104]	; (8012600 <MotionSP_AcceleroConfig+0x1ac>)
  MCR_BLUEMS_F2I_2D(AcceleroODR.Frequency, IntPart, DecPart);
 8012598:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 801259c:	eef8 6a47 	vcvt.f32.u32	s13, s14
  PREDMNT1_PRINTF(" %ld.%.2ld Hz )\r\n", IntPart, DecPart);
 80125a0:	ee17 1a10 	vmov	r1, s14
  MCR_BLUEMS_F2I_2D(AcceleroODR.Frequency, IntPart, DecPart);
 80125a4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80125a8:	eddf 6a16 	vldr	s13, [pc, #88]	; 8012604 <MotionSP_AcceleroConfig+0x1b0>
 80125ac:	ee67 7aa6 	vmul.f32	s15, s15, s13
  PREDMNT1_PRINTF(" %ld.%.2ld Hz )\r\n", IntPart, DecPart);
 80125b0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80125b4:	ee17 2a90 	vmov	r2, s15
 80125b8:	f007 ff76 	bl	801a4a8 <iprintf>
  return BSP_Error;
 80125bc:	e75c      	b.n	8012478 <MotionSP_AcceleroConfig+0x24>
    BSP_Error = BSP_ERROR_COMPONENT_FAILURE;
 80125be:	f06f 0404 	mvn.w	r4, #4
 80125c2:	3601      	adds	r6, #1
 80125c4:	b2f6      	uxtb	r6, r6
  } while( (BSP_Error != BSP_ERROR_NONE) && (iteration < 3) );
 80125c6:	2e04      	cmp	r6, #4
 80125c8:	f47f af7c 	bne.w	80124c4 <MotionSP_AcceleroConfig+0x70>
    PREDMNT1_PRINTF("\tError measure and calculate ODR - Used parameter value (");
 80125cc:	480e      	ldr	r0, [pc, #56]	; (8012608 <MotionSP_AcceleroConfig+0x1b4>)
 80125ce:	f007 ff6b 	bl	801a4a8 <iprintf>
    return BSP_Error;
 80125d2:	e751      	b.n	8012478 <MotionSP_AcceleroConfig+0x24>
 80125d4:	2000b664 	.word	0x2000b664
 80125d8:	08022a61 	.word	0x08022a61
 80125dc:	08022a73 	.word	0x08022a73
 80125e0:	08022aa2 	.word	0x08022aa2
 80125e4:	08022ab9 	.word	0x08022ab9
 80125e8:	2000b1fc 	.word	0x2000b1fc
 80125ec:	08022ae9 	.word	0x08022ae9
 80125f0:	200096f0 	.word	0x200096f0
 80125f4:	2000ae78 	.word	0x2000ae78
 80125f8:	447a0000 	.word	0x447a0000
 80125fc:	08022b03 	.word	0x08022b03
 8012600:	08022b23 	.word	0x08022b23
 8012604:	42c80000 	.word	0x42c80000
 8012608:	08022b35 	.word	0x08022b35

0801260c <EnableDisable_ACC_HP_Filter>:
  */
uint8_t EnableDisable_ACC_HP_Filter(uint8_t CutOff)
{
  int32_t BSP_Error = BSP_ERROR_NONE;
  
  if(CutOff == HPF_NONE)
 801260c:	2804      	cmp	r0, #4
{
 801260e:	b510      	push	{r4, lr}
 8012610:	4601      	mov	r1, r0
  if(CutOff == HPF_NONE)
 8012612:	d111      	bne.n	8012638 <EnableDisable_ACC_HP_Filter+0x2c>
  {
    if( (BSP_Error = MOTION_SENSOR_Write_Register(ACCELERO_INSTANCE, ISM330DLC_CTRL8_XL, 0x00)) != BSP_ERROR_NONE)
 8012614:	2200      	movs	r2, #0
 8012616:	2117      	movs	r1, #23
 8012618:	2001      	movs	r0, #1
 801261a:	f002 fe11 	bl	8015240 <IKS01A3_MOTION_SENSOR_Write_Register>
 801261e:	4604      	mov	r4, r0
 8012620:	b130      	cbz	r0, 8012630 <EnableDisable_ACC_HP_Filter+0x24>
    {
      PREDMNT1_PRINTF("\r\nError Disable HP Filter (BSP_ERROR = %ld)\r\n", BSP_Error);
 8012622:	4601      	mov	r1, r0
 8012624:	4809      	ldr	r0, [pc, #36]	; (801264c <EnableDisable_ACC_HP_Filter+0x40>)
  }
  else
  {
    if ((BSP_Error = MOTION_SENSOR_Enable_HP_Filter(ACCELERO_INSTANCE, CutOff)) != BSP_ERROR_NONE)
    {
      PREDMNT1_PRINTF("\r\nError Enable/Disable HP Filter (BSP_ERROR = %ld)\r\n", BSP_Error);
 8012626:	f007 ff3f 	bl	801a4a8 <iprintf>
      return BSP_Error;
 801262a:	b2e4      	uxtb	r4, r4
      PREDMNT1_PRINTF("\r\nEnable HP Filter\r\n\t--> OK\r\n");
    }
  }
  
  return BSP_Error;
}
 801262c:	4620      	mov	r0, r4
 801262e:	bd10      	pop	{r4, pc}
      PREDMNT1_PRINTF("\r\nDisable HP Filter\r\n\t--> OK\r\n");
 8012630:	4807      	ldr	r0, [pc, #28]	; (8012650 <EnableDisable_ACC_HP_Filter+0x44>)
      PREDMNT1_PRINTF("\r\nEnable HP Filter\r\n\t--> OK\r\n");
 8012632:	f007 ffbf 	bl	801a5b4 <puts>
 8012636:	e7f9      	b.n	801262c <EnableDisable_ACC_HP_Filter+0x20>
    if ((BSP_Error = MOTION_SENSOR_Enable_HP_Filter(ACCELERO_INSTANCE, CutOff)) != BSP_ERROR_NONE)
 8012638:	2001      	movs	r0, #1
 801263a:	f002 fecf 	bl	80153dc <IKS01A3_MOTION_SENSOR_Enable_HP_Filter>
 801263e:	4604      	mov	r4, r0
 8012640:	b110      	cbz	r0, 8012648 <EnableDisable_ACC_HP_Filter+0x3c>
      PREDMNT1_PRINTF("\r\nError Enable/Disable HP Filter (BSP_ERROR = %ld)\r\n", BSP_Error);
 8012642:	4601      	mov	r1, r0
 8012644:	4803      	ldr	r0, [pc, #12]	; (8012654 <EnableDisable_ACC_HP_Filter+0x48>)
 8012646:	e7ee      	b.n	8012626 <EnableDisable_ACC_HP_Filter+0x1a>
      PREDMNT1_PRINTF("\r\nEnable HP Filter\r\n\t--> OK\r\n");
 8012648:	4803      	ldr	r0, [pc, #12]	; (8012658 <EnableDisable_ACC_HP_Filter+0x4c>)
 801264a:	e7f2      	b.n	8012632 <EnableDisable_ACC_HP_Filter+0x26>
 801264c:	08022b6f 	.word	0x08022b6f
 8012650:	08022b9d 	.word	0x08022b9d
 8012654:	08022bbb 	.word	0x08022bbb
 8012658:	08022bf0 	.word	0x08022bf0

0801265c <MotionSP_TD_Threshold_Updating>:
  * @brief  MotionSP TD Threshold Updating
  * @param  dflt Force updating with default values
  * @retval Error codes
  */
void MotionSP_TD_Threshold_Updating(uint8_t dflt)
{
 801265c:	b530      	push	{r4, r5, lr}
  if (dflt)
 801265e:	b180      	cbz	r0, 8012682 <MotionSP_TD_Threshold_Updating+0x26>
  {
    memcpy((void *)TDRmsThresh, (void *)&TDSpeedRMSThresh, sizeof(sTimeDomainThresh_t));
 8012660:	4c09      	ldr	r4, [pc, #36]	; (8012688 <MotionSP_TD_Threshold_Updating+0x2c>)
 8012662:	4d0a      	ldr	r5, [pc, #40]	; (801268c <MotionSP_TD_Threshold_Updating+0x30>)
 8012664:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012666:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8012668:	e894 0003 	ldmia.w	r4, {r0, r1}
    memcpy((void *)TDPkThresh, (void *)&TDAccPeakThresh, sizeof(sTimeDomainThresh_t));
 801266c:	3408      	adds	r4, #8
    memcpy((void *)TDRmsThresh, (void *)&TDSpeedRMSThresh, sizeof(sTimeDomainThresh_t));
 801266e:	e885 0003 	stmia.w	r5, {r0, r1}
    memcpy((void *)TDPkThresh, (void *)&TDAccPeakThresh, sizeof(sTimeDomainThresh_t));
 8012672:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012674:	4d06      	ldr	r5, [pc, #24]	; (8012690 <MotionSP_TD_Threshold_Updating+0x34>)
 8012676:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8012678:	e894 0003 	ldmia.w	r4, {r0, r1}
 801267c:	e885 0003 	stmia.w	r5, {r0, r1}
  }
  else
  {
    __NOP();
  }
}
 8012680:	bd30      	pop	{r4, r5, pc}
    __NOP();
 8012682:	bf00      	nop
}
 8012684:	e7fc      	b.n	8012680 <MotionSP_TD_Threshold_Updating+0x24>
 8012686:	bf00      	nop
 8012688:	0801ff40 	.word	0x0801ff40
 801268c:	2000b64c 	.word	0x2000b64c
 8012690:	2000b634 	.word	0x2000b634

08012694 <MotionSP_FD_Threshold_Updating>:
  * @param  subrange_num Subrange number to be used
  * @param  dflt Force updating with default values
  * @retval Error codes
  */
void MotionSP_FD_Threshold_Updating(uint8_t subrange_num, uint8_t dflt)
{
 8012694:	b513      	push	{r0, r1, r4, lr}
  
  uint16_t thr_array_size = 0;
  
  thr_array_size = 3 * subrange_num * sizeof(float);
  
  if (dflt)
 8012696:	b349      	cbz	r1, 80126ec <MotionSP_FD_Threshold_Updating+0x58>
  {
    switch (subrange_num)
 8012698:	2820      	cmp	r0, #32
 801269a:	d01b      	beq.n	80126d4 <MotionSP_FD_Threshold_Updating+0x40>
 801269c:	d814      	bhi.n	80126c8 <MotionSP_FD_Threshold_Updating+0x34>
 801269e:	2808      	cmp	r0, #8
 80126a0:	d01c      	beq.n	80126dc <MotionSP_FD_Threshold_Updating+0x48>
 80126a2:	2810      	cmp	r0, #16
 80126a4:	d01e      	beq.n	80126e4 <MotionSP_FD_Threshold_Updating+0x50>
  float *pFDAlarmThresh_Sub= NULL;
 80126a6:	2400      	movs	r4, #0
  float *pFDWarnThresh_Sub = NULL;
 80126a8:	4621      	mov	r1, r4
  thr_array_size = 3 * subrange_num * sizeof(float);
 80126aa:	eb00 0040 	add.w	r0, r0, r0, lsl #1
      pFDWarnThresh_Sub = (float *)FDWarnThresh_Sub64;
      pFDAlarmThresh_Sub = (float *)FDAlarmThresh_Sub64;
      break;
    }
    
    memcpy((void *)FDWarnThresh_Sub, (void *)pFDWarnThresh_Sub, thr_array_size);
 80126ae:	0082      	lsls	r2, r0, #2
 80126b0:	4810      	ldr	r0, [pc, #64]	; (80126f4 <MotionSP_FD_Threshold_Updating+0x60>)
 80126b2:	9201      	str	r2, [sp, #4]
 80126b4:	f007 f9b4 	bl	8019a20 <memcpy>
    memcpy((void *)FDAlarmThresh_Sub, (void *)pFDAlarmThresh_Sub, thr_array_size);
 80126b8:	9a01      	ldr	r2, [sp, #4]
 80126ba:	480f      	ldr	r0, [pc, #60]	; (80126f8 <MotionSP_FD_Threshold_Updating+0x64>)
 80126bc:	4621      	mov	r1, r4
  }
  else
  {
    __NOP();
  }
}
 80126be:	b002      	add	sp, #8
 80126c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    memcpy((void *)FDAlarmThresh_Sub, (void *)pFDAlarmThresh_Sub, thr_array_size);
 80126c4:	f007 b9ac 	b.w	8019a20 <memcpy>
    switch (subrange_num)
 80126c8:	2840      	cmp	r0, #64	; 0x40
 80126ca:	d1ec      	bne.n	80126a6 <MotionSP_FD_Threshold_Updating+0x12>
      pFDAlarmThresh_Sub = (float *)FDAlarmThresh_Sub64;
 80126cc:	4c0b      	ldr	r4, [pc, #44]	; (80126fc <MotionSP_FD_Threshold_Updating+0x68>)
      pFDWarnThresh_Sub = (float *)FDWarnThresh_Sub64;
 80126ce:	f504 7140 	add.w	r1, r4, #768	; 0x300
 80126d2:	e7ea      	b.n	80126aa <MotionSP_FD_Threshold_Updating+0x16>
      pFDAlarmThresh_Sub = (float *)FDAlarmThresh_Sub32;
 80126d4:	4c0a      	ldr	r4, [pc, #40]	; (8012700 <MotionSP_FD_Threshold_Updating+0x6c>)
      pFDWarnThresh_Sub = (float *)FDWarnThresh_Sub32;
 80126d6:	f504 71c0 	add.w	r1, r4, #384	; 0x180
 80126da:	e7e6      	b.n	80126aa <MotionSP_FD_Threshold_Updating+0x16>
    switch (subrange_num)
 80126dc:	4c09      	ldr	r4, [pc, #36]	; (8012704 <MotionSP_FD_Threshold_Updating+0x70>)
 80126de:	f104 0160 	add.w	r1, r4, #96	; 0x60
 80126e2:	e7e2      	b.n	80126aa <MotionSP_FD_Threshold_Updating+0x16>
      pFDAlarmThresh_Sub = (float *)FDAlarmThresh_Sub16;
 80126e4:	4c08      	ldr	r4, [pc, #32]	; (8012708 <MotionSP_FD_Threshold_Updating+0x74>)
      pFDWarnThresh_Sub = (float *)FDWarnThresh_Sub16;
 80126e6:	f104 01c0 	add.w	r1, r4, #192	; 0xc0
 80126ea:	e7de      	b.n	80126aa <MotionSP_FD_Threshold_Updating+0x16>
    __NOP();
 80126ec:	bf00      	nop
}
 80126ee:	b002      	add	sp, #8
 80126f0:	bd10      	pop	{r4, pc}
 80126f2:	bf00      	nop
 80126f4:	2000b260 	.word	0x2000b260
 80126f8:	2000b678 	.word	0x2000b678
 80126fc:	080200f0 	.word	0x080200f0
 8012700:	080206f0 	.word	0x080206f0
 8012704:	080209f0 	.word	0x080209f0
 8012708:	0801ff70 	.word	0x0801ff70

0801270c <MotionSP_DataReady_IRQ_Rtn>:
  * @brief 	Routine to be executed on IRQ about accelerometer data ready
  * @return None
  */    
void MotionSP_DataReady_IRQ_Rtn(void)
{
  AccDrdyNr++;
 801270c:	4a02      	ldr	r2, [pc, #8]	; (8012718 <MotionSP_DataReady_IRQ_Rtn+0xc>)
 801270e:	8813      	ldrh	r3, [r2, #0]
 8012710:	3301      	adds	r3, #1
 8012712:	8013      	strh	r3, [r2, #0]
}
 8012714:	4770      	bx	lr
 8012716:	bf00      	nop
 8012718:	200096f0 	.word	0x200096f0

0801271c <MotionSP_FifoFull_IRQ_Rtn>:
/**
  * @brief 	Routine to be executed on IRQ about accelerometer fifo full
  * @return None
  */    
void MotionSP_FifoFull_IRQ_Rtn(void)
{
 801271c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  // Read all FIFO data
  MOTION_SENSOR_FIFO_Read(ACCELERO_INSTANCE, MotionSP_Data.FifoBfr, AcceleroParams.FifoWtm);
 8012720:	4c2a      	ldr	r4, [pc, #168]	; (80127cc <MotionSP_FifoFull_IRQ_Rtn+0xb0>)
 8012722:	4d2b      	ldr	r5, [pc, #172]	; (80127d0 <MotionSP_FifoFull_IRQ_Rtn+0xb4>)
 8012724:	6821      	ldr	r1, [r4, #0]
 8012726:	8a2a      	ldrh	r2, [r5, #16]
 8012728:	2001      	movs	r0, #1
 801272a:	f002 fe43 	bl	80153b4 <IKS01A3_MOTION_SENSOR_FIFO_Read>
    pAccCircBuff->Array.Y[pAccCircBuff->IdPos] = mgAcc.AXIS_Y * G_CONV;
 801272e:	e9d4 6704 	ldrd	r6, r7, [r4, #16]
  
  // Create circular buffer from accelerometer FIFO
  FillAccCircBuffFromFifo(&MotionSP_Data.AccCircBuff, MotionSP_Data.FifoBfr, AcceleroParams.FifoWtm, AcceleroParams.AccSens, RestartFlag);
 8012732:	8a28      	ldrh	r0, [r5, #16]
 8012734:	ed95 6a03 	vldr	s12, [r5, #12]
    pAccCircBuff->Array.Z[pAccCircBuff->IdPos] = mgAcc.AXIS_Z * G_CONV;
 8012738:	f8d4 c018 	ldr.w	ip, [r4, #24]
    if (pAccCircBuff->IdPos == pAccCircBuff->Size)
 801273c:	8925      	ldrh	r5, [r4, #8]
 801273e:	6822      	ldr	r2, [r4, #0]
    pAccCircBuff->Array.X[pAccCircBuff->IdPos] = mgAcc.AXIS_X * G_CONV;
 8012740:	eddf 5a24 	vldr	s11, [pc, #144]	; 80127d4 <MotionSP_FifoFull_IRQ_Rtn+0xb8>
    pAccCircBuff->Array.Z[pAccCircBuff->IdPos] = mgAcc.AXIS_Z * G_CONV;
 8012744:	2100      	movs	r1, #0
      pAccCircBuff->IdPos = 0;
 8012746:	468e      	mov	lr, r1
      pAccCircBuff->Ovf = 1;
 8012748:	f04f 0801 	mov.w	r8, #1
  for(i=0; i<FifoWtm; i++)
 801274c:	b28b      	uxth	r3, r1
 801274e:	4298      	cmp	r0, r3
 8012750:	d803      	bhi.n	801275a <MotionSP_FifoFull_IRQ_Rtn+0x3e>

  // Fifo has been read
  MotionSP_Data.FifoEmpty = 1;
 8012752:	2301      	movs	r3, #1
 8012754:	7123      	strb	r3, [r4, #4]
}
 8012756:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    mgAcc.AXIS_X = (*(int16_t *)(pFifoData)) * AccSens;
 801275a:	f9b2 3000 	ldrsh.w	r3, [r2]
 801275e:	ee06 3a90 	vmov	s13, r3
    mgAcc.AXIS_Y = (*(int16_t *)(pFifoData+2)) * AccSens;
 8012762:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
 8012766:	ee07 3a10 	vmov	s14, r3
    mgAcc.AXIS_Z = (*(int16_t *)(pFifoData+4)) * AccSens;
 801276a:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
 801276e:	ee07 3a90 	vmov	s15, r3
    pAccCircBuff->IdPos += 1;
 8012772:	8963      	ldrh	r3, [r4, #10]
 8012774:	3301      	adds	r3, #1
 8012776:	b29b      	uxth	r3, r3
    mgAcc.AXIS_X = (*(int16_t *)(pFifoData)) * AccSens;
 8012778:	eef8 6ae6 	vcvt.f32.s32	s13, s13
    if (pAccCircBuff->IdPos == pAccCircBuff->Size)
 801277c:	42ab      	cmp	r3, r5
    mgAcc.AXIS_Y = (*(int16_t *)(pFifoData+2)) * AccSens;
 801277e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    mgAcc.AXIS_Z = (*(int16_t *)(pFifoData+4)) * AccSens;
 8012782:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    pAccCircBuff->IdPos += 1;
 8012786:	bf14      	ite	ne
 8012788:	8163      	strhne	r3, [r4, #10]
      pAccCircBuff->IdPos = 0;
 801278a:	f8a4 e00a 	strheq.w	lr, [r4, #10]
    mgAcc.AXIS_X = (*(int16_t *)(pFifoData)) * AccSens;
 801278e:	ee66 6a86 	vmul.f32	s13, s13, s12
    pAccCircBuff->Array.X[pAccCircBuff->IdPos] = mgAcc.AXIS_X * G_CONV;
 8012792:	8963      	ldrh	r3, [r4, #10]
      pAccCircBuff->Ovf = 1;
 8012794:	bf08      	it	eq
 8012796:	f884 800c 	strbeq.w	r8, [r4, #12]
    mgAcc.AXIS_Y = (*(int16_t *)(pFifoData+2)) * AccSens;
 801279a:	ee27 7a06 	vmul.f32	s14, s14, s12
    mgAcc.AXIS_Z = (*(int16_t *)(pFifoData+4)) * AccSens;
 801279e:	ee67 7a86 	vmul.f32	s15, s15, s12
    pAccCircBuff->Array.X[pAccCircBuff->IdPos] = mgAcc.AXIS_X * G_CONV;
 80127a2:	ee66 6aa5 	vmul.f32	s13, s13, s11
 80127a6:	eb06 0983 	add.w	r9, r6, r3, lsl #2
    pAccCircBuff->Array.Y[pAccCircBuff->IdPos] = mgAcc.AXIS_Y * G_CONV;
 80127aa:	ee27 7a25 	vmul.f32	s14, s14, s11
    pAccCircBuff->Array.Z[pAccCircBuff->IdPos] = mgAcc.AXIS_Z * G_CONV;
 80127ae:	ee67 7aa5 	vmul.f32	s15, s15, s11
    pAccCircBuff->Array.X[pAccCircBuff->IdPos] = mgAcc.AXIS_X * G_CONV;
 80127b2:	edc9 6a00 	vstr	s13, [r9]
    pAccCircBuff->Array.Y[pAccCircBuff->IdPos] = mgAcc.AXIS_Y * G_CONV;
 80127b6:	eb07 0983 	add.w	r9, r7, r3, lsl #2
    pAccCircBuff->Array.Z[pAccCircBuff->IdPos] = mgAcc.AXIS_Z * G_CONV;
 80127ba:	eb0c 0383 	add.w	r3, ip, r3, lsl #2
    pAccCircBuff->Array.Y[pAccCircBuff->IdPos] = mgAcc.AXIS_Y * G_CONV;
 80127be:	ed89 7a00 	vstr	s14, [r9]
    pAccCircBuff->Array.Z[pAccCircBuff->IdPos] = mgAcc.AXIS_Z * G_CONV;
 80127c2:	3101      	adds	r1, #1
 80127c4:	edc3 7a00 	vstr	s15, [r3]
  for(i=0; i<FifoWtm; i++)
 80127c8:	3206      	adds	r2, #6
 80127ca:	e7bf      	b.n	801274c <MotionSP_FifoFull_IRQ_Rtn+0x30>
 80127cc:	2000ab44 	.word	0x2000ab44
 80127d0:	2000b664 	.word	0x2000b664
 80127d4:	3c20ac12 	.word	0x3c20ac12

080127d8 <MotionSP_TimeDomainAlarmInit>:
  */
void MotionSP_TimeDomainAlarmInit (sTimeDomainAlarm_t *pTdAlarm,
                                   sTimeDomainData_t *pTimeDomainVal,
                                   sTimeDomainThresh_t *pTdRmsThreshold,
                                   sTimeDomainThresh_t *pTdPkThreshold) 
{
 80127d8:	b570      	push	{r4, r5, r6, lr}
 80127da:	4606      	mov	r6, r0
 80127dc:	461d      	mov	r5, r3
  /* Reset status value for TimeDomain Alarms Result */
  memset(pTdAlarm, NONE, sizeof(sTimeDomainAlarm_t));
 80127de:	f04f 3303 	mov.w	r3, #50529027	; 0x3030303
 80127e2:	6033      	str	r3, [r6, #0]
 80127e4:	80b3      	strh	r3, [r6, #4]
  
  /* Reset status value for TimeDomain Value Result */
  memset(pTimeDomainVal, 0, sizeof(sTimeDomainData_t));
  
  memcpy((void *)pTdRmsThreshold, (void *)TDRmsThresh, sizeof(sTimeDomainThresh_t));
 80127e6:	4e10      	ldr	r6, [pc, #64]	; (8012828 <MotionSP_TimeDomainAlarmInit+0x50>)
{
 80127e8:	4614      	mov	r4, r2
 80127ea:	4608      	mov	r0, r1
  memset(pTimeDomainVal, 0, sizeof(sTimeDomainData_t));
 80127ec:	223c      	movs	r2, #60	; 0x3c
 80127ee:	2100      	movs	r1, #0
 80127f0:	f007 f93e 	bl	8019a70 <memset>
  memcpy((void *)pTdRmsThreshold, (void *)TDRmsThresh, sizeof(sTimeDomainThresh_t));
 80127f4:	4622      	mov	r2, r4
 80127f6:	f106 0418 	add.w	r4, r6, #24
 80127fa:	4633      	mov	r3, r6
 80127fc:	cb03      	ldmia	r3!, {r0, r1}
 80127fe:	42a3      	cmp	r3, r4
 8012800:	6010      	str	r0, [r2, #0]
 8012802:	6051      	str	r1, [r2, #4]
 8012804:	461e      	mov	r6, r3
 8012806:	f102 0208 	add.w	r2, r2, #8
 801280a:	d1f6      	bne.n	80127fa <MotionSP_TimeDomainAlarmInit+0x22>
  memcpy((void *)pTdPkThreshold, (void *)TDPkThresh, sizeof(sTimeDomainThresh_t));
 801280c:	4c07      	ldr	r4, [pc, #28]	; (801282c <MotionSP_TimeDomainAlarmInit+0x54>)
 801280e:	462b      	mov	r3, r5
 8012810:	f104 0518 	add.w	r5, r4, #24
 8012814:	4622      	mov	r2, r4
 8012816:	ca03      	ldmia	r2!, {r0, r1}
 8012818:	42aa      	cmp	r2, r5
 801281a:	6018      	str	r0, [r3, #0]
 801281c:	6059      	str	r1, [r3, #4]
 801281e:	4614      	mov	r4, r2
 8012820:	f103 0308 	add.w	r3, r3, #8
 8012824:	d1f6      	bne.n	8012814 <MotionSP_TimeDomainAlarmInit+0x3c>
}
 8012826:	bd70      	pop	{r4, r5, r6, pc}
 8012828:	2000b64c 	.word	0x2000b64c
 801282c:	2000b634 	.word	0x2000b634

08012830 <MotionSP_TimeDomainAlarm>:
void MotionSP_TimeDomainAlarm (sTimeDomainAlarm_t *pTdAlarm,
                               sTimeDomainData_t *pTimeDomainVal,
                               sTimeDomainThresh_t *pTdRmsThreshold,
                               sTimeDomainThresh_t *pTdPkThreshold,
                               sTimeDomainData_t *pTimeDomain) 
{
 8012830:	b530      	push	{r4, r5, lr}
 8012832:	9c03      	ldr	r4, [sp, #12]
  /* Reset status value for Time Domain alarms */
  memset(pTdAlarm, GOOD, 3*2);
  
  pTimeDomainVal->SpeedRms.AXIS_X = pTimeDomain->SpeedRms.AXIS_X*1000;
 8012834:	eddf 7a65 	vldr	s15, [pc, #404]	; 80129cc <MotionSP_TimeDomainAlarm+0x19c>
  memset(pTdAlarm, GOOD, 3*2);
 8012838:	2500      	movs	r5, #0
 801283a:	6005      	str	r5, [r0, #0]
 801283c:	8085      	strh	r5, [r0, #4]
  pTimeDomainVal->SpeedRms.AXIS_X = pTimeDomain->SpeedRms.AXIS_X*1000;
 801283e:	ed94 7a06 	vldr	s14, [r4, #24]
  pTimeDomainVal->SpeedRms.AXIS_Y = pTimeDomain->SpeedRms.AXIS_Y*1000;
  pTimeDomainVal->SpeedRms.AXIS_Z = pTimeDomain->SpeedRms.AXIS_Z*1000;
  
  /* Speed RMS comparison with thresholds */      
  if ((pTimeDomain->SpeedRms.AXIS_X*1000) > pTdRmsThreshold->THR_WARN_AXIS_X)
 8012842:	edd2 6a00 	vldr	s13, [r2]
  pTimeDomainVal->SpeedRms.AXIS_X = pTimeDomain->SpeedRms.AXIS_X*1000;
 8012846:	ee27 7a27 	vmul.f32	s14, s14, s15
 801284a:	ed81 7a06 	vstr	s14, [r1, #24]
  pTimeDomainVal->SpeedRms.AXIS_Y = pTimeDomain->SpeedRms.AXIS_Y*1000;
 801284e:	ed94 7a07 	vldr	s14, [r4, #28]
 8012852:	ee27 7a27 	vmul.f32	s14, s14, s15
 8012856:	ed81 7a07 	vstr	s14, [r1, #28]
  pTimeDomainVal->SpeedRms.AXIS_Z = pTimeDomain->SpeedRms.AXIS_Z*1000;
 801285a:	ed94 7a08 	vldr	s14, [r4, #32]
 801285e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8012862:	ed81 7a08 	vstr	s14, [r1, #32]
  if ((pTimeDomain->SpeedRms.AXIS_X*1000) > pTdRmsThreshold->THR_WARN_AXIS_X)
 8012866:	ed94 7a06 	vldr	s14, [r4, #24]
 801286a:	ee27 7a27 	vmul.f32	s14, s14, s15
 801286e:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8012872:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  {
    pTdAlarm->RMS_STATUS_AXIS_X = WARNING;
 8012876:	bfc2      	ittt	gt
 8012878:	2501      	movgt	r5, #1
 801287a:	7005      	strbgt	r5, [r0, #0]
    pTimeDomainVal->SpeedRms.AXIS_X = pTimeDomain->SpeedRms.AXIS_X*1000;
 801287c:	ed81 7a06 	vstrgt	s14, [r1, #24]
  }
  if ((pTimeDomain->SpeedRms.AXIS_Y*1000) > pTdRmsThreshold->THR_WARN_AXIS_Y)
 8012880:	ed94 7a07 	vldr	s14, [r4, #28]
 8012884:	edd2 6a01 	vldr	s13, [r2, #4]
 8012888:	ee27 7a27 	vmul.f32	s14, s14, s15
 801288c:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8012890:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  {
    pTdAlarm->RMS_STATUS_AXIS_Y = WARNING;
 8012894:	bfc2      	ittt	gt
 8012896:	2501      	movgt	r5, #1
 8012898:	7045      	strbgt	r5, [r0, #1]
    pTimeDomainVal->SpeedRms.AXIS_Y = pTimeDomain->SpeedRms.AXIS_Y*1000;
 801289a:	ed81 7a07 	vstrgt	s14, [r1, #28]
  }
  if ((pTimeDomain->SpeedRms.AXIS_Z*1000) > pTdRmsThreshold->THR_WARN_AXIS_Z)
 801289e:	ed94 7a08 	vldr	s14, [r4, #32]
 80128a2:	edd2 6a02 	vldr	s13, [r2, #8]
 80128a6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80128aa:	eeb4 7ae6 	vcmpe.f32	s14, s13
 80128ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  {
    pTdAlarm->RMS_STATUS_AXIS_Z = WARNING;
 80128b2:	bfc2      	ittt	gt
 80128b4:	2501      	movgt	r5, #1
 80128b6:	7085      	strbgt	r5, [r0, #2]
    pTimeDomainVal->SpeedRms.AXIS_Z = pTimeDomain->SpeedRms.AXIS_Z*1000;
 80128b8:	ed81 7a08 	vstrgt	s14, [r1, #32]
  }
  if ((pTimeDomain->SpeedRms.AXIS_X*1000) > pTdRmsThreshold->THR_ALARM_AXIS_X)
 80128bc:	ed94 7a06 	vldr	s14, [r4, #24]
 80128c0:	edd2 6a03 	vldr	s13, [r2, #12]
 80128c4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80128c8:	eeb4 7ae6 	vcmpe.f32	s14, s13
 80128cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  {
    pTdAlarm->RMS_STATUS_AXIS_X = ALARM;
 80128d0:	bfc2      	ittt	gt
 80128d2:	2502      	movgt	r5, #2
 80128d4:	7005      	strbgt	r5, [r0, #0]
    pTimeDomainVal->SpeedRms.AXIS_X = pTimeDomain->SpeedRms.AXIS_X*1000;
 80128d6:	ed81 7a06 	vstrgt	s14, [r1, #24]
  }
  if ((pTimeDomain->SpeedRms.AXIS_Y*1000) > pTdRmsThreshold->THR_ALARM_AXIS_Y)
 80128da:	ed94 7a07 	vldr	s14, [r4, #28]
 80128de:	edd2 6a04 	vldr	s13, [r2, #16]
 80128e2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80128e6:	eeb4 7ae6 	vcmpe.f32	s14, s13
 80128ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  {
    pTdAlarm->RMS_STATUS_AXIS_Y = ALARM;
 80128ee:	bfc2      	ittt	gt
 80128f0:	2502      	movgt	r5, #2
 80128f2:	7045      	strbgt	r5, [r0, #1]
    pTimeDomainVal->SpeedRms.AXIS_Y = pTimeDomain->SpeedRms.AXIS_Y*1000;
 80128f4:	ed81 7a07 	vstrgt	s14, [r1, #28]
  }
  if ((pTimeDomain->SpeedRms.AXIS_Z*1000) > pTdRmsThreshold->THR_ALARM_AXIS_Z)
 80128f8:	ed94 7a08 	vldr	s14, [r4, #32]
 80128fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012900:	ed92 7a05 	vldr	s14, [r2, #20]
 8012904:	eef4 7ac7 	vcmpe.f32	s15, s14
 8012908:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  {
    pTdAlarm->RMS_STATUS_AXIS_Z = ALARM;
 801290c:	bfc4      	itt	gt
 801290e:	2202      	movgt	r2, #2
 8012910:	7082      	strbgt	r2, [r0, #2]
    pTimeDomainVal->SpeedRms.AXIS_Z = pTimeDomain->SpeedRms.AXIS_Z*1000;
  }
  
  pTimeDomainVal->AccPeak.AXIS_X = pTimeDomain->AccPeak.AXIS_X;
 8012912:	6822      	ldr	r2, [r4, #0]
 8012914:	600a      	str	r2, [r1, #0]
  pTimeDomainVal->AccPeak.AXIS_Y = pTimeDomain->AccPeak.AXIS_Y;
  pTimeDomainVal->AccPeak.AXIS_Z = pTimeDomain->AccPeak.AXIS_Z;
  
  /* Accelerometer Peak comparison with thresholds */      
  if ((pTimeDomain->AccPeak.AXIS_X) > pTdPkThreshold->THR_WARN_AXIS_X)
 8012916:	ed93 7a00 	vldr	s14, [r3]
    pTimeDomainVal->SpeedRms.AXIS_Z = pTimeDomain->SpeedRms.AXIS_Z*1000;
 801291a:	bfc8      	it	gt
 801291c:	edc1 7a08 	vstrgt	s15, [r1, #32]
  if ((pTimeDomain->AccPeak.AXIS_X) > pTdPkThreshold->THR_WARN_AXIS_X)
 8012920:	edd4 7a00 	vldr	s15, [r4]
  pTimeDomainVal->AccPeak.AXIS_Y = pTimeDomain->AccPeak.AXIS_Y;
 8012924:	6862      	ldr	r2, [r4, #4]
 8012926:	604a      	str	r2, [r1, #4]
  if ((pTimeDomain->AccPeak.AXIS_X) > pTdPkThreshold->THR_WARN_AXIS_X)
 8012928:	eef4 7ac7 	vcmpe.f32	s15, s14
  pTimeDomainVal->AccPeak.AXIS_Z = pTimeDomain->AccPeak.AXIS_Z;
 801292c:	68a2      	ldr	r2, [r4, #8]
 801292e:	608a      	str	r2, [r1, #8]
  if ((pTimeDomain->AccPeak.AXIS_X) > pTdPkThreshold->THR_WARN_AXIS_X)
 8012930:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  {
    pTdAlarm->PK_STATUS_AXIS_X = WARNING;
 8012934:	bfc4      	itt	gt
 8012936:	2201      	movgt	r2, #1
 8012938:	70c2      	strbgt	r2, [r0, #3]
    pTimeDomainVal->AccPeak.AXIS_X = pTimeDomain->AccPeak.AXIS_X;
  }
  if ((pTimeDomain->AccPeak.AXIS_Y) > pTdPkThreshold->THR_WARN_AXIS_Y)
 801293a:	ed93 7a01 	vldr	s14, [r3, #4]
    pTimeDomainVal->AccPeak.AXIS_X = pTimeDomain->AccPeak.AXIS_X;
 801293e:	bfc8      	it	gt
 8012940:	edc1 7a00 	vstrgt	s15, [r1]
  if ((pTimeDomain->AccPeak.AXIS_Y) > pTdPkThreshold->THR_WARN_AXIS_Y)
 8012944:	edd4 7a01 	vldr	s15, [r4, #4]
 8012948:	eef4 7ac7 	vcmpe.f32	s15, s14
 801294c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  {
    pTdAlarm->PK_STATUS_AXIS_Y = WARNING;
 8012950:	bfc4      	itt	gt
 8012952:	2201      	movgt	r2, #1
 8012954:	7102      	strbgt	r2, [r0, #4]
    pTimeDomainVal->AccPeak.AXIS_Y = pTimeDomain->AccPeak.AXIS_Y;
  }
  if ((pTimeDomain->AccPeak.AXIS_Z) > pTdPkThreshold->THR_WARN_AXIS_Z)
 8012956:	ed93 7a02 	vldr	s14, [r3, #8]
    pTimeDomainVal->AccPeak.AXIS_Y = pTimeDomain->AccPeak.AXIS_Y;
 801295a:	bfc8      	it	gt
 801295c:	edc1 7a01 	vstrgt	s15, [r1, #4]
  if ((pTimeDomain->AccPeak.AXIS_Z) > pTdPkThreshold->THR_WARN_AXIS_Z)
 8012960:	edd4 7a02 	vldr	s15, [r4, #8]
 8012964:	eef4 7ac7 	vcmpe.f32	s15, s14
 8012968:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  {
    pTdAlarm->PK_STATUS_AXIS_Z = WARNING;
 801296c:	bfc4      	itt	gt
 801296e:	2201      	movgt	r2, #1
 8012970:	7142      	strbgt	r2, [r0, #5]
    pTimeDomainVal->AccPeak.AXIS_Z = pTimeDomain->AccPeak.AXIS_Z;
  }
  if ((pTimeDomain->AccPeak.AXIS_X) > pTdPkThreshold->THR_ALARM_AXIS_X)
 8012972:	ed93 7a03 	vldr	s14, [r3, #12]
    pTimeDomainVal->AccPeak.AXIS_Z = pTimeDomain->AccPeak.AXIS_Z;
 8012976:	bfc8      	it	gt
 8012978:	edc1 7a02 	vstrgt	s15, [r1, #8]
  if ((pTimeDomain->AccPeak.AXIS_X) > pTdPkThreshold->THR_ALARM_AXIS_X)
 801297c:	edd4 7a00 	vldr	s15, [r4]
 8012980:	eef4 7ac7 	vcmpe.f32	s15, s14
 8012984:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  {
    pTdAlarm->PK_STATUS_AXIS_X = ALARM;
 8012988:	bfc4      	itt	gt
 801298a:	2202      	movgt	r2, #2
 801298c:	70c2      	strbgt	r2, [r0, #3]
    pTimeDomainVal->AccPeak.AXIS_X = pTimeDomain->AccPeak.AXIS_X;
  }
  if ((pTimeDomain->AccPeak.AXIS_Y) > pTdPkThreshold->THR_ALARM_AXIS_Y)
 801298e:	ed93 7a04 	vldr	s14, [r3, #16]
    pTimeDomainVal->AccPeak.AXIS_X = pTimeDomain->AccPeak.AXIS_X;
 8012992:	bfc8      	it	gt
 8012994:	edc1 7a00 	vstrgt	s15, [r1]
  if ((pTimeDomain->AccPeak.AXIS_Y) > pTdPkThreshold->THR_ALARM_AXIS_Y)
 8012998:	edd4 7a01 	vldr	s15, [r4, #4]
 801299c:	eef4 7ac7 	vcmpe.f32	s15, s14
 80129a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  {
    pTdAlarm->PK_STATUS_AXIS_Y = ALARM;
 80129a4:	bfc4      	itt	gt
 80129a6:	2202      	movgt	r2, #2
 80129a8:	7102      	strbgt	r2, [r0, #4]
    pTimeDomainVal->AccPeak.AXIS_Y = pTimeDomain->AccPeak.AXIS_Y;
  }
  if ((pTimeDomain->AccPeak.AXIS_Z) > pTdPkThreshold->THR_ALARM_AXIS_Z)
 80129aa:	ed93 7a05 	vldr	s14, [r3, #20]
    pTimeDomainVal->AccPeak.AXIS_Y = pTimeDomain->AccPeak.AXIS_Y;
 80129ae:	bfc8      	it	gt
 80129b0:	edc1 7a01 	vstrgt	s15, [r1, #4]
  if ((pTimeDomain->AccPeak.AXIS_Z) > pTdPkThreshold->THR_ALARM_AXIS_Z)
 80129b4:	edd4 7a02 	vldr	s15, [r4, #8]
 80129b8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80129bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  {
    pTdAlarm->PK_STATUS_AXIS_Z = ALARM;
 80129c0:	bfc2      	ittt	gt
 80129c2:	2302      	movgt	r3, #2
 80129c4:	7143      	strbgt	r3, [r0, #5]
    pTimeDomainVal->AccPeak.AXIS_Z = pTimeDomain->AccPeak.AXIS_Z;
 80129c6:	edc1 7a02 	vstrgt	s15, [r1, #8]
  }
}
 80129ca:	bd30      	pop	{r4, r5, pc}
 80129cc:	447a0000 	.word	0x447a0000

080129d0 <MotionSP_FreqDomainAlarmInit>:
  */
int32_t MotionSP_FreqDomainAlarmInit (float **pWarnThresh,
                                   float **pAlarmThresh,
                                   sFreqDomainAlarm_t *pTHR_Fft_Alarms,
                                   uint8_t subrange_num) 
{
 80129d0:	b570      	push	{r4, r5, r6, lr}
 80129d2:	4606      	mov	r6, r0
 80129d4:	460d      	mov	r5, r1
 80129d6:	4610      	mov	r0, r2
  uint16_t thr_array_size = 0;
  
  thr_array_size = 3 * subrange_num * sizeof(float);
  
  /* Reset status value for FFT alarms */
  memset(pTHR_Fft_Alarms, NONE, sizeof(sFreqDomainAlarm_t));
 80129d8:	2103      	movs	r1, #3
 80129da:	22c0      	movs	r2, #192	; 0xc0
{
 80129dc:	461c      	mov	r4, r3
  memset(pTHR_Fft_Alarms, NONE, sizeof(sFreqDomainAlarm_t));
 80129de:	f007 f847 	bl	8019a70 <memset>
  
  // Memory allocation for Warning Threshold array 
  if (*pWarnThresh == NULL)
 80129e2:	6830      	ldr	r0, [r6, #0]
  thr_array_size = 3 * subrange_num * sizeof(float);
 80129e4:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80129e8:	00a4      	lsls	r4, r4, #2
  if (*pWarnThresh == NULL)
 80129ea:	b940      	cbnz	r0, 80129fe <MotionSP_FreqDomainAlarmInit+0x2e>
    *pWarnThresh = (float *)malloc(thr_array_size);
 80129ec:	4620      	mov	r0, r4
 80129ee:	f007 f807 	bl	8019a00 <malloc>
  else
   *pWarnThresh = realloc(*pWarnThresh, thr_array_size);
 80129f2:	6030      	str	r0, [r6, #0]
  if (*pWarnThresh == NULL)
 80129f4:	6833      	ldr	r3, [r6, #0]
 80129f6:	b933      	cbnz	r3, 8012a06 <MotionSP_FreqDomainAlarmInit+0x36>
    return BSP_ERROR_MALLOC_FAILURE;
 80129f8:	f06f 000b 	mvn.w	r0, #11

  memcpy((void *)*pWarnThresh, (void *)FDWarnThresh_Sub, thr_array_size);
  memcpy((void *)*pAlarmThresh, (void *)FDAlarmThresh_Sub, thr_array_size);
  
  return BSP_ERROR_NONE;
}
 80129fc:	bd70      	pop	{r4, r5, r6, pc}
   *pWarnThresh = realloc(*pWarnThresh, thr_array_size);
 80129fe:	4621      	mov	r1, r4
 8012a00:	f007 fde0 	bl	801a5c4 <realloc>
 8012a04:	e7f5      	b.n	80129f2 <MotionSP_FreqDomainAlarmInit+0x22>
  if (*pAlarmThresh == NULL)
 8012a06:	6828      	ldr	r0, [r5, #0]
 8012a08:	b990      	cbnz	r0, 8012a30 <MotionSP_FreqDomainAlarmInit+0x60>
    *pAlarmThresh = (float *)malloc(thr_array_size);
 8012a0a:	4620      	mov	r0, r4
 8012a0c:	f006 fff8 	bl	8019a00 <malloc>
   *pAlarmThresh = realloc(*pAlarmThresh, thr_array_size);
 8012a10:	6028      	str	r0, [r5, #0]
  if (*pAlarmThresh == NULL)
 8012a12:	682b      	ldr	r3, [r5, #0]
 8012a14:	2b00      	cmp	r3, #0
 8012a16:	d0ef      	beq.n	80129f8 <MotionSP_FreqDomainAlarmInit+0x28>
  memcpy((void *)*pWarnThresh, (void *)FDWarnThresh_Sub, thr_array_size);
 8012a18:	4907      	ldr	r1, [pc, #28]	; (8012a38 <MotionSP_FreqDomainAlarmInit+0x68>)
 8012a1a:	6830      	ldr	r0, [r6, #0]
 8012a1c:	4622      	mov	r2, r4
 8012a1e:	f006 ffff 	bl	8019a20 <memcpy>
  memcpy((void *)*pAlarmThresh, (void *)FDAlarmThresh_Sub, thr_array_size);
 8012a22:	4906      	ldr	r1, [pc, #24]	; (8012a3c <MotionSP_FreqDomainAlarmInit+0x6c>)
 8012a24:	6828      	ldr	r0, [r5, #0]
 8012a26:	4622      	mov	r2, r4
 8012a28:	f006 fffa 	bl	8019a20 <memcpy>
  return BSP_ERROR_NONE;
 8012a2c:	2000      	movs	r0, #0
 8012a2e:	e7e5      	b.n	80129fc <MotionSP_FreqDomainAlarmInit+0x2c>
   *pAlarmThresh = realloc(*pAlarmThresh, thr_array_size);
 8012a30:	4621      	mov	r1, r4
 8012a32:	f007 fdc7 	bl	801a5c4 <realloc>
 8012a36:	e7eb      	b.n	8012a10 <MotionSP_FreqDomainAlarmInit+0x40>
 8012a38:	2000b260 	.word	0x2000b260
 8012a3c:	2000b678 	.word	0x2000b678

08012a40 <MotionSP_AlarmThreshold_Init>:
{
 8012a40:	b508      	push	{r3, lr}
  MotionSP_TimeDomainAlarmInit(&sTdAlarm,
 8012a42:	4a09      	ldr	r2, [pc, #36]	; (8012a68 <MotionSP_AlarmThreshold_Init+0x28>)
 8012a44:	4b09      	ldr	r3, [pc, #36]	; (8012a6c <MotionSP_AlarmThreshold_Init+0x2c>)
 8012a46:	490a      	ldr	r1, [pc, #40]	; (8012a70 <MotionSP_AlarmThreshold_Init+0x30>)
 8012a48:	480a      	ldr	r0, [pc, #40]	; (8012a74 <MotionSP_AlarmThreshold_Init+0x34>)
 8012a4a:	f7ff fec5 	bl	80127d8 <MotionSP_TimeDomainAlarmInit>
  if (MotionSP_FreqDomainAlarmInit(&pFDWarnThresh,
 8012a4e:	4b0a      	ldr	r3, [pc, #40]	; (8012a78 <MotionSP_AlarmThreshold_Init+0x38>)
 8012a50:	4a0a      	ldr	r2, [pc, #40]	; (8012a7c <MotionSP_AlarmThreshold_Init+0x3c>)
 8012a52:	7b1b      	ldrb	r3, [r3, #12]
 8012a54:	490a      	ldr	r1, [pc, #40]	; (8012a80 <MotionSP_AlarmThreshold_Init+0x40>)
 8012a56:	480b      	ldr	r0, [pc, #44]	; (8012a84 <MotionSP_AlarmThreshold_Init+0x44>)
 8012a58:	f7ff ffba 	bl	80129d0 <MotionSP_FreqDomainAlarmInit>
 8012a5c:	b118      	cbz	r0, 8012a66 <MotionSP_AlarmThreshold_Init+0x26>
}
 8012a5e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8012a62:	f001 badc 	b.w	801401e <Error_Handler>
}
 8012a66:	bd08      	pop	{r3, pc}
 8012a68:	2000bc78 	.word	0x2000bc78
 8012a6c:	2000b248 	.word	0x2000b248
 8012a70:	2000b20c 	.word	0x2000b20c
 8012a74:	2000b568 	.word	0x2000b568
 8012a78:	2000ae78 	.word	0x2000ae78
 8012a7c:	2000b56e 	.word	0x2000b56e
 8012a80:	2000b564 	.word	0x2000b564
 8012a84:	2000b560 	.word	0x2000b560

08012a88 <MotionSP_VibrationAnalysisVariableInit>:
{
 8012a88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  switch (MotionSP_Parameters.FftSize)
 8012a8a:	4d5a      	ldr	r5, [pc, #360]	; (8012bf4 <MotionSP_VibrationAnalysisVariableInit+0x16c>)
  PREDMNT1_PRINTF("\r\nMotionSP Vibration Variable Initialization");
 8012a8c:	485a      	ldr	r0, [pc, #360]	; (8012bf8 <MotionSP_VibrationAnalysisVariableInit+0x170>)
 8012a8e:	f007 fd0b 	bl	801a4a8 <iprintf>
  switch (MotionSP_Parameters.FftSize)
 8012a92:	882b      	ldrh	r3, [r5, #0]
 8012a94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8012a98:	d00f      	beq.n	8012aba <MotionSP_VibrationAnalysisVariableInit+0x32>
 8012a9a:	d80b      	bhi.n	8012ab4 <MotionSP_VibrationAnalysisVariableInit+0x2c>
 8012a9c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012aa0:	d00b      	beq.n	8012aba <MotionSP_VibrationAnalysisVariableInit+0x32>
 8012aa2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012aa6:	d008      	beq.n	8012aba <MotionSP_VibrationAnalysisVariableInit+0x32>
    PREDMNT1_PRINTF("\r\n\t--> FFT size is out of range.\r\n");
 8012aa8:	4854      	ldr	r0, [pc, #336]	; (8012bfc <MotionSP_VibrationAnalysisVariableInit+0x174>)
    PREDMNT1_PRINTF("\r\n\t--> Overlapping size is out of range.\r\n");
 8012aaa:	f007 fd83 	bl	801a5b4 <puts>
    return BSP_ERROR_WRONG_PARAM;
 8012aae:	f06f 0001 	mvn.w	r0, #1
 8012ab2:	e041      	b.n	8012b38 <MotionSP_VibrationAnalysisVariableInit+0xb0>
  switch (MotionSP_Parameters.FftSize)
 8012ab4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8012ab8:	e7f5      	b.n	8012aa6 <MotionSP_VibrationAnalysisVariableInit+0x1e>
  if ( ((MotionSP_Parameters.FftOvl) >= FFT_OVL_MIN) && ((MotionSP_Parameters.FftOvl) <= FFT_OVL_MAX) )
 8012aba:	7aab      	ldrb	r3, [r5, #10]
 8012abc:	3b05      	subs	r3, #5
 8012abe:	2b46      	cmp	r3, #70	; 0x46
 8012ac0:	f200 8096 	bhi.w	8012bf0 <MotionSP_VibrationAnalysisVariableInit+0x168>
    MotionSP_TD_Threshold_Updating(TD_Th_DFLT);
 8012ac4:	4f4e      	ldr	r7, [pc, #312]	; (8012c00 <MotionSP_VibrationAnalysisVariableInit+0x178>)
    if(FFT_Alarm)
 8012ac6:	4e4f      	ldr	r6, [pc, #316]	; (8012c04 <MotionSP_VibrationAnalysisVariableInit+0x17c>)
    MotionSP_TD_Threshold_Updating(TD_Th_DFLT);
 8012ac8:	7838      	ldrb	r0, [r7, #0]
 8012aca:	f7ff fdc7 	bl	801265c <MotionSP_TD_Threshold_Updating>
    TD_Th_DFLT = 0;
 8012ace:	2400      	movs	r4, #0
    MotionSP_FD_Threshold_Updating(MotionSP_Parameters.subrange_num, FD_Th_DFLT);
 8012ad0:	7879      	ldrb	r1, [r7, #1]
 8012ad2:	7b28      	ldrb	r0, [r5, #12]
    TD_Th_DFLT = 0;
 8012ad4:	703c      	strb	r4, [r7, #0]
    MotionSP_FD_Threshold_Updating(MotionSP_Parameters.subrange_num, FD_Th_DFLT);
 8012ad6:	f7ff fddd 	bl	8012694 <MotionSP_FD_Threshold_Updating>
    if(FFT_Alarm)
 8012ada:	6873      	ldr	r3, [r6, #4]
    FD_Th_DFLT = 0;
 8012adc:	707c      	strb	r4, [r7, #1]
    if(FFT_Alarm)
 8012ade:	b10b      	cbz	r3, 8012ae4 <MotionSP_VibrationAnalysisVariableInit+0x5c>
      MotionSP_AlarmThreshold_Init();
 8012ae0:	f7ff ffae 	bl	8012a40 <MotionSP_AlarmThreshold_Init>
    memset((void *)&AccMagResults.Max, 0, 3 * sizeof(sMaxOnArray_t));
 8012ae4:	4b48      	ldr	r3, [pc, #288]	; (8012c08 <MotionSP_VibrationAnalysisVariableInit+0x180>)
 8012ae6:	2218      	movs	r2, #24
 8012ae8:	2100      	movs	r1, #0
 8012aea:	4618      	mov	r0, r3
 8012aec:	f006 ffc0 	bl	8019a70 <memset>
    AccMagResults.BinFreqStep = (AcceleroODR.Frequency / 2) / AccMagResults.MagSize;
 8012af0:	4b46      	ldr	r3, [pc, #280]	; (8012c0c <MotionSP_VibrationAnalysisVariableInit+0x184>)
    AccMagResults.MagSize = MotionSP_Parameters.FftSize/2;
 8012af2:	8829      	ldrh	r1, [r5, #0]
    AccMagResults.BinFreqStep = (AcceleroODR.Frequency / 2) / AccMagResults.MagSize;
 8012af4:	edd3 7a00 	vldr	s15, [r3]
    AccMagResults.MagSize = MotionSP_Parameters.FftSize/2;
 8012af8:	0849      	lsrs	r1, r1, #1
    AccMagResults.BinFreqStep = (AcceleroODR.Frequency / 2) / AccMagResults.MagSize;
 8012afa:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8012afe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8012b02:	ee07 1a10 	vmov	s14, r1
 8012b06:	eef8 6ac7 	vcvt.f32.s32	s13, s14
    AccMagResults.MagSize = MotionSP_Parameters.FftSize/2;
 8012b0a:	f1a0 0414 	sub.w	r4, r0, #20
    AccMagResults.BinFreqStep = (AcceleroODR.Frequency / 2) / AccMagResults.MagSize;
 8012b0e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
    memset((void *)&AccMagResults.FFT_Items, 0, 3 * sizeof(uint16_t));
 8012b12:	2200      	movs	r2, #0
    AccMagResults.MagSize = MotionSP_Parameters.FftSize/2;
 8012b14:	f820 1c14 	strh.w	r1, [r0, #-20]
    memset((void *)&AccMagResults.FFT_Items, 0, 3 * sizeof(uint16_t));
 8012b18:	6182      	str	r2, [r0, #24]
 8012b1a:	8382      	strh	r2, [r0, #28]
    if (AccMagResults.Array.X == NULL)
 8012b1c:	68a0      	ldr	r0, [r4, #8]
    AccMagResults.MagSizeTBU = AccMagResults.MagSize;
 8012b1e:	8061      	strh	r1, [r4, #2]
 8012b20:	0089      	lsls	r1, r1, #2
    AccMagResults.BinFreqStep = (AcceleroODR.Frequency / 2) / AccMagResults.MagSize;
 8012b22:	ed84 7a01 	vstr	s14, [r4, #4]
    if (AccMagResults.Array.X == NULL)
 8012b26:	b940      	cbnz	r0, 8012b3a <MotionSP_VibrationAnalysisVariableInit+0xb2>
      AccMagResults.Array.X = (float *) malloc(sizeof(float) * AccMagResults.MagSize);
 8012b28:	4608      	mov	r0, r1
 8012b2a:	f006 ff69 	bl	8019a00 <malloc>
      AccMagResults.Array.X = realloc(AccMagResults.Array.X, sizeof(float) * AccMagResults.MagSize);
 8012b2e:	60a0      	str	r0, [r4, #8]
    if (AccMagResults.Array.X == NULL)
 8012b30:	68a3      	ldr	r3, [r4, #8]
 8012b32:	b92b      	cbnz	r3, 8012b40 <MotionSP_VibrationAnalysisVariableInit+0xb8>
      return BSP_ERROR_MALLOC_FAILURE;
 8012b34:	f06f 000b 	mvn.w	r0, #11
}
 8012b38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      AccMagResults.Array.X = realloc(AccMagResults.Array.X, sizeof(float) * AccMagResults.MagSize);
 8012b3a:	f007 fd43 	bl	801a5c4 <realloc>
 8012b3e:	e7f6      	b.n	8012b2e <MotionSP_VibrationAnalysisVariableInit+0xa6>
    if (AccMagResults.Array.Y == NULL)
 8012b40:	8821      	ldrh	r1, [r4, #0]
 8012b42:	68e0      	ldr	r0, [r4, #12]
 8012b44:	0089      	lsls	r1, r1, #2
 8012b46:	2800      	cmp	r0, #0
 8012b48:	d14c      	bne.n	8012be4 <MotionSP_VibrationAnalysisVariableInit+0x15c>
      AccMagResults.Array.Y = (float *) malloc(sizeof(float) * AccMagResults.MagSize);
 8012b4a:	4608      	mov	r0, r1
 8012b4c:	f006 ff58 	bl	8019a00 <malloc>
      AccMagResults.Array.Y = realloc(AccMagResults.Array.Y, sizeof(float) * AccMagResults.MagSize);
 8012b50:	60e0      	str	r0, [r4, #12]
    if (AccMagResults.Array.Y == NULL)
 8012b52:	68e3      	ldr	r3, [r4, #12]
 8012b54:	2b00      	cmp	r3, #0
 8012b56:	d0ed      	beq.n	8012b34 <MotionSP_VibrationAnalysisVariableInit+0xac>
    if (AccMagResults.Array.Z == NULL)
 8012b58:	8821      	ldrh	r1, [r4, #0]
 8012b5a:	6920      	ldr	r0, [r4, #16]
 8012b5c:	0089      	lsls	r1, r1, #2
 8012b5e:	2800      	cmp	r0, #0
 8012b60:	d143      	bne.n	8012bea <MotionSP_VibrationAnalysisVariableInit+0x162>
      AccMagResults.Array.Z = (float *) malloc(sizeof(float) * AccMagResults.MagSize);
 8012b62:	4608      	mov	r0, r1
 8012b64:	f006 ff4c 	bl	8019a00 <malloc>
      AccMagResults.Array.Z = realloc(AccMagResults.Array.Z, sizeof(float) * AccMagResults.MagSize);
 8012b68:	6120      	str	r0, [r4, #16]
    if (AccMagResults.Array.Z == NULL)
 8012b6a:	6923      	ldr	r3, [r4, #16]
 8012b6c:	2b00      	cmp	r3, #0
 8012b6e:	d0e1      	beq.n	8012b34 <MotionSP_VibrationAnalysisVariableInit+0xac>
    memset((void *)&TimeDomainData, 0x00, sizeof(sTimeDomainData_t));
 8012b70:	223c      	movs	r2, #60	; 0x3c
 8012b72:	2100      	movs	r1, #0
 8012b74:	4826      	ldr	r0, [pc, #152]	; (8012c10 <MotionSP_VibrationAnalysisVariableInit+0x188>)
 8012b76:	f006 ff7b 	bl	8019a70 <memset>
    MotionSP_SetWindFiltArray(Filter_Params, MotionSP_Parameters.FftSize, (Filt_Type_t)MotionSP_Parameters.window);
 8012b7a:	792a      	ldrb	r2, [r5, #4]
 8012b7c:	8829      	ldrh	r1, [r5, #0]
 8012b7e:	4825      	ldr	r0, [pc, #148]	; (8012c14 <MotionSP_VibrationAnalysisVariableInit+0x18c>)
 8012b80:	f7fc fea8 	bl	800f8d4 <MotionSP_SetWindFiltArray>
    arm_rfft_fast_init_f32(&fftS, MotionSP_Parameters.FftSize);
 8012b84:	8829      	ldrh	r1, [r5, #0]
 8012b86:	4824      	ldr	r0, [pc, #144]	; (8012c18 <MotionSP_VibrationAnalysisVariableInit+0x190>)
 8012b88:	f005 f970 	bl	8017e6c <arm_rfft_fast_init_f32>
    accCircBuffIndexForFft = MotionSP_Parameters.FftSize - 1;
 8012b8c:	882b      	ldrh	r3, [r5, #0]
 8012b8e:	4a23      	ldr	r2, [pc, #140]	; (8012c1c <MotionSP_VibrationAnalysisVariableInit+0x194>)
    accCircBuffIndexForFftDelta = (uint16_t)((float)(MotionSP_Parameters.FftSize)*((100.0f-(float)MotionSP_Parameters.FftOvl)/100.0f));
 8012b90:	eddf 7a23 	vldr	s15, [pc, #140]	; 8012c20 <MotionSP_VibrationAnalysisVariableInit+0x198>
    accCircBuffIndexForFft = MotionSP_Parameters.FftSize - 1;
 8012b94:	1e59      	subs	r1, r3, #1
 8012b96:	8011      	strh	r1, [r2, #0]
    accCircBuffIndexForFftDelta = (uint16_t)((float)(MotionSP_Parameters.FftSize)*((100.0f-(float)MotionSP_Parameters.FftOvl)/100.0f));
 8012b98:	7aaa      	ldrb	r2, [r5, #10]
 8012b9a:	ee06 2a90 	vmov	s13, r2
 8012b9e:	eef8 6a66 	vcvt.f32.u32	s13, s13
    accCircBuffIndexForFftOvf = 0;
 8012ba2:	2400      	movs	r4, #0
    accCircBuffIndexForFftDelta = (uint16_t)((float)(MotionSP_Parameters.FftSize)*((100.0f-(float)MotionSP_Parameters.FftOvl)/100.0f));
 8012ba4:	ee77 6ae6 	vsub.f32	s13, s15, s13
    accCircBuffIndexForFftOvf = 0;
 8012ba8:	72b4      	strb	r4, [r6, #10]
    accCircBuffIndexForFftDelta = (uint16_t)((float)(MotionSP_Parameters.FftSize)*((100.0f-(float)MotionSP_Parameters.FftOvl)/100.0f));
 8012baa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8012bae:	ee07 3a90 	vmov	s15, r3
 8012bb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012bb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012bba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8012bbe:	ee17 3a90 	vmov	r3, s15
 8012bc2:	8133      	strh	r3, [r6, #8]
    if(MemoryIsAlloc)
 8012bc4:	7af3      	ldrb	r3, [r6, #11]
 8012bc6:	b123      	cbz	r3, 8012bd2 <MotionSP_VibrationAnalysisVariableInit+0x14a>
      free(TotalBuffToSending);
 8012bc8:	4b16      	ldr	r3, [pc, #88]	; (8012c24 <MotionSP_VibrationAnalysisVariableInit+0x19c>)
 8012bca:	6818      	ldr	r0, [r3, #0]
 8012bcc:	f006 ff20 	bl	8019a10 <free>
      MemoryIsAlloc= 0;
 8012bd0:	72f4      	strb	r4, [r6, #11]
    RestartFlag = 1;
 8012bd2:	2301      	movs	r3, #1
    SendingFFT= 0;
 8012bd4:	2400      	movs	r4, #0
    PREDMNT1_PRINTF("\r\n\t--> OK\r\n");
 8012bd6:	4814      	ldr	r0, [pc, #80]	; (8012c28 <MotionSP_VibrationAnalysisVariableInit+0x1a0>)
    RestartFlag = 1;
 8012bd8:	70bb      	strb	r3, [r7, #2]
    SendingFFT= 0;
 8012bda:	7334      	strb	r4, [r6, #12]
    PREDMNT1_PRINTF("\r\n\t--> OK\r\n");
 8012bdc:	f007 fcea 	bl	801a5b4 <puts>
  return BSP_ERROR_NONE;
 8012be0:	4620      	mov	r0, r4
 8012be2:	e7a9      	b.n	8012b38 <MotionSP_VibrationAnalysisVariableInit+0xb0>
      AccMagResults.Array.Y = realloc(AccMagResults.Array.Y, sizeof(float) * AccMagResults.MagSize);
 8012be4:	f007 fcee 	bl	801a5c4 <realloc>
 8012be8:	e7b2      	b.n	8012b50 <MotionSP_VibrationAnalysisVariableInit+0xc8>
      AccMagResults.Array.Z = realloc(AccMagResults.Array.Z, sizeof(float) * AccMagResults.MagSize);
 8012bea:	f007 fceb 	bl	801a5c4 <realloc>
 8012bee:	e7bb      	b.n	8012b68 <MotionSP_VibrationAnalysisVariableInit+0xe0>
    PREDMNT1_PRINTF("\r\n\t--> Overlapping size is out of range.\r\n");
 8012bf0:	480e      	ldr	r0, [pc, #56]	; (8012c2c <MotionSP_VibrationAnalysisVariableInit+0x1a4>)
 8012bf2:	e75a      	b.n	8012aaa <MotionSP_VibrationAnalysisVariableInit+0x22>
 8012bf4:	2000ae78 	.word	0x2000ae78
 8012bf8:	08022c0d 	.word	0x08022c0d
 8012bfc:	08022c3a 	.word	0x08022c3a
 8012c00:	200003f4 	.word	0x200003f4
 8012c04:	200096f0 	.word	0x200096f0
 8012c08:	2000aea0 	.word	0x2000aea0
 8012c0c:	2000b1fc 	.word	0x2000b1fc
 8012c10:	2000aec0 	.word	0x2000aec0
 8012c14:	20009b44 	.word	0x20009b44
 8012c18:	2000ae60 	.word	0x2000ae60
 8012c1c:	20009b40 	.word	0x20009b40
 8012c20:	42c80000 	.word	0x42c80000
 8012c24:	2000b630 	.word	0x2000b630
 8012c28:	08022c02 	.word	0x08022c02
 8012c2c:	08022c5c 	.word	0x08022c5c

08012c30 <MotionSP_FreqDomainAlarm>:
                               float *pFDWarnThresh,
                               float *pFDAlarmThresh,
                               uint8_t subrange_num, 
                               sSubrange_t *pTHR_Check, 
                               sFreqDomainAlarm_t *pTHR_Fft_Alarms)
{
 8012c30:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012c34:	4604      	mov	r4, r0
 8012c36:	4688      	mov	r8, r1
  float warn_thresholds;
  float alarm_thresholds;
  memset((void *)pTHR_Check, 0x00, 3*SUBRANGE_MAX * sizeof(float) );
 8012c38:	980c      	ldr	r0, [sp, #48]	; 0x30
{
 8012c3a:	9301      	str	r3, [sp, #4]
 8012c3c:	4691      	mov	r9, r2
  memset((void *)pTHR_Check, 0x00, 3*SUBRANGE_MAX * sizeof(float) );
 8012c3e:	2100      	movs	r1, #0
 8012c40:	f44f 7240 	mov.w	r2, #768	; 0x300
 8012c44:	f006 ff14 	bl	8019a70 <memset>

  for(int i=0; i<subrange_num; i++)
 8012c48:	4620      	mov	r0, r4
 8012c4a:	2200      	movs	r2, #0
 8012c4c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012c4e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8012c50:	f04f 0b0c 	mov.w	fp, #12
        pTHR_Fft_Alarms->STATUS_AXIS_X[i] = ALARM;
      break;
      
    case 0x01:  /* Axis Y */
      pTHR_Check->AXIS_Y[i] = pSRAmplitude->AXIS_Y[i];
      pTHR_Fft_Alarms->STATUS_AXIS_Y[i] = GOOD;
 8012c54:	4615      	mov	r5, r2
      if(pSRAmplitude->AXIS_Y[i] > warn_thresholds)
        pTHR_Fft_Alarms->STATUS_AXIS_Y[i] = WARNING;
      if(pSRAmplitude->AXIS_Y[i] > alarm_thresholds)
        pTHR_Fft_Alarms->STATUS_AXIS_Y[i] = ALARM;
 8012c56:	f04f 0c02 	mov.w	ip, #2
      
    case 0x02:  /* Axis Z */
      pTHR_Check->AXIS_Z[i] = pSRAmplitude->AXIS_Z[i];
      pTHR_Fft_Alarms->STATUS_AXIS_Z[i] = GOOD;
      if(pSRAmplitude->AXIS_Z[i] > warn_thresholds)
        pTHR_Fft_Alarms->STATUS_AXIS_Z[i] = WARNING;
 8012c5a:	f04f 0e01 	mov.w	lr, #1
  for(int i=0; i<subrange_num; i++)
 8012c5e:	9901      	ldr	r1, [sp, #4]
 8012c60:	4291      	cmp	r1, r2
 8012c62:	dc02      	bgt.n	8012c6a <MotionSP_FreqDomainAlarm+0x3a>
      __NOP();
      break;    
    }
   } 
  }
}
 8012c64:	b003      	add	sp, #12
 8012c66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012c6a:	fb0b f102 	mul.w	r1, fp, r2
 8012c6e:	eb08 0a01 	add.w	sl, r8, r1
   for(int j=0; j<3; j++) 
 8012c72:	2600      	movs	r6, #0
 8012c74:	4449      	add	r1, r9
    switch (j)
 8012c76:	2e01      	cmp	r6, #1
    warn_thresholds = *(pFDWarnThresh+(i*3)+j);
 8012c78:	ecfa 7a01 	vldmia	sl!, {s15}
    alarm_thresholds = *(pFDAlarmThresh+(i*3)+j);
 8012c7c:	ecb1 7a01 	vldmia	r1!, {s14}
    switch (j)
 8012c80:	d01f      	beq.n	8012cc2 <MotionSP_FreqDomainAlarm+0x92>
 8012c82:	2e02      	cmp	r6, #2
 8012c84:	d035      	beq.n	8012cf2 <MotionSP_FreqDomainAlarm+0xc2>
      pTHR_Check->AXIS_X[i] = pSRAmplitude->AXIS_X[i];
 8012c86:	edd0 6a00 	vldr	s13, [r0]
 8012c8a:	edc4 6a00 	vstr	s13, [r4]
      pTHR_Fft_Alarms->STATUS_AXIS_X[i] = GOOD;       
 8012c8e:	701d      	strb	r5, [r3, #0]
      if(pSRAmplitude->AXIS_X[i] > warn_thresholds)
 8012c90:	ed90 6a00 	vldr	s12, [r0]
        pTHR_Fft_Alarms->STATUS_AXIS_X[i] = WARNING;
 8012c94:	eeb4 6a67 	vcmp.f32	s12, s15
 8012c98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
      if(pSRAmplitude->AXIS_X[i] > alarm_thresholds)
 8012c9c:	eef4 6ac7 	vcmpe.f32	s13, s14
        pTHR_Fft_Alarms->STATUS_AXIS_X[i] = WARNING;
 8012ca0:	bfd4      	ite	le
 8012ca2:	462f      	movle	r7, r5
 8012ca4:	4677      	movgt	r7, lr
      if(pSRAmplitude->AXIS_X[i] > alarm_thresholds)
 8012ca6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        pTHR_Fft_Alarms->STATUS_AXIS_X[i] = WARNING;
 8012caa:	701f      	strb	r7, [r3, #0]
      if(pSRAmplitude->AXIS_X[i] > alarm_thresholds)
 8012cac:	dd01      	ble.n	8012cb2 <MotionSP_FreqDomainAlarm+0x82>
        pTHR_Fft_Alarms->STATUS_AXIS_X[i] = ALARM;
 8012cae:	f883 c000 	strb.w	ip, [r3]
   for(int j=0; j<3; j++) 
 8012cb2:	3601      	adds	r6, #1
 8012cb4:	2e03      	cmp	r6, #3
 8012cb6:	d1de      	bne.n	8012c76 <MotionSP_FreqDomainAlarm+0x46>
  for(int i=0; i<subrange_num; i++)
 8012cb8:	3201      	adds	r2, #1
 8012cba:	3301      	adds	r3, #1
 8012cbc:	3004      	adds	r0, #4
 8012cbe:	3404      	adds	r4, #4
 8012cc0:	e7cd      	b.n	8012c5e <MotionSP_FreqDomainAlarm+0x2e>
      pTHR_Check->AXIS_Y[i] = pSRAmplitude->AXIS_Y[i];
 8012cc2:	edd0 6a40 	vldr	s13, [r0, #256]	; 0x100
 8012cc6:	edc4 6a40 	vstr	s13, [r4, #256]	; 0x100
      pTHR_Fft_Alarms->STATUS_AXIS_Y[i] = GOOD;
 8012cca:	f883 5040 	strb.w	r5, [r3, #64]	; 0x40
      if(pSRAmplitude->AXIS_Y[i] > warn_thresholds)
 8012cce:	ed90 6a40 	vldr	s12, [r0, #256]	; 0x100
        pTHR_Fft_Alarms->STATUS_AXIS_Y[i] = WARNING;
 8012cd2:	eeb4 6a67 	vcmp.f32	s12, s15
 8012cd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        pTHR_Fft_Alarms->STATUS_AXIS_Y[i] = ALARM;
 8012cda:	eef4 6a47 	vcmp.f32	s13, s14
        pTHR_Fft_Alarms->STATUS_AXIS_Y[i] = WARNING;
 8012cde:	bfcc      	ite	gt
 8012ce0:	4637      	movgt	r7, r6
 8012ce2:	462f      	movle	r7, r5
        pTHR_Fft_Alarms->STATUS_AXIS_Y[i] = ALARM;
 8012ce4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012ce8:	bfc8      	it	gt
 8012cea:	4667      	movgt	r7, ip
 8012cec:	f883 7040 	strb.w	r7, [r3, #64]	; 0x40
 8012cf0:	e7df      	b.n	8012cb2 <MotionSP_FreqDomainAlarm+0x82>
      pTHR_Check->AXIS_Z[i] = pSRAmplitude->AXIS_Z[i];
 8012cf2:	edd0 6a80 	vldr	s13, [r0, #512]	; 0x200
 8012cf6:	edc4 6a80 	vstr	s13, [r4, #512]	; 0x200
      pTHR_Fft_Alarms->STATUS_AXIS_Z[i] = GOOD;
 8012cfa:	f883 5080 	strb.w	r5, [r3, #128]	; 0x80
      if(pSRAmplitude->AXIS_Z[i] > warn_thresholds)
 8012cfe:	ed90 6a80 	vldr	s12, [r0, #512]	; 0x200
        pTHR_Fft_Alarms->STATUS_AXIS_Z[i] = WARNING;
 8012d02:	eeb4 6a67 	vcmp.f32	s12, s15
 8012d06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
      if(pSRAmplitude->AXIS_Z[i] > alarm_thresholds)
 8012d0a:	eef4 6ac7 	vcmpe.f32	s13, s14
        pTHR_Fft_Alarms->STATUS_AXIS_Z[i] = WARNING;
 8012d0e:	bfd4      	ite	le
 8012d10:	462f      	movle	r7, r5
 8012d12:	4677      	movgt	r7, lr
      if(pSRAmplitude->AXIS_Z[i] > alarm_thresholds)
 8012d14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        pTHR_Fft_Alarms->STATUS_AXIS_Z[i] = WARNING;
 8012d18:	f883 7080 	strb.w	r7, [r3, #128]	; 0x80
        pTHR_Fft_Alarms->STATUS_AXIS_Z[i] = ALARM;
 8012d1c:	bfc8      	it	gt
 8012d1e:	f883 c080 	strbgt.w	ip, [r3, #128]	; 0x80
 8012d22:	e7c6      	b.n	8012cb2 <MotionSP_FreqDomainAlarm+0x82>

08012d24 <enable_FIFO>:
  * @brief  Enable FIFO measuring
  * @param  None
  * @retval BSP status
  */
int32_t enable_FIFO(void)
{
 8012d24:	b510      	push	{r4, lr}
  int32_t BSP_Error= BSP_ERROR_NONE;
  
  PREDMNT1_PRINTF("\r\nEnable FIFO\r\n");
 8012d26:	481b      	ldr	r0, [pc, #108]	; (8012d94 <enable_FIFO+0x70>)
 8012d28:	f007 fc44 	bl	801a5b4 <puts>
  
  /* Set FIFO to STREAM Mode (Continuous) */
  if ((BSP_Error = MOTION_SENSOR_FIFO_Set_Mode(ACCELERO_INSTANCE, ACCELERO_FIFO_STREAM_MODE)) != BSP_ERROR_NONE)
 8012d2c:	2106      	movs	r1, #6
 8012d2e:	2001      	movs	r0, #1
 8012d30:	f002 fb14 	bl	801535c <IKS01A3_MOTION_SENSOR_FIFO_Set_Mode>
 8012d34:	4604      	mov	r4, r0
 8012d36:	b128      	cbz	r0, 8012d44 <enable_FIFO+0x20>
  {
    PREDMNT1_PRINTF("\tError Set FIFO in Continuous Mode (BSP_ERROR = %ld)\r\n", BSP_Error);
 8012d38:	4601      	mov	r1, r0
 8012d3a:	4817      	ldr	r0, [pc, #92]	; (8012d98 <enable_FIFO+0x74>)
  StartTick = BSP_GetTick();
  
  /* Switch on the FIFO filling */
  if ((BSP_Error = MOTION_SENSOR_FIFO_Set_ODR_Value(ACCELERO_INSTANCE, AcceleroParams.AccFifoBdr)) != BSP_ERROR_NONE)
  {
    PREDMNT1_PRINTF("\tError Set FIFO ODR Value (BSP_ERROR = %ld)\r\n", BSP_Error);
 8012d3c:	f007 fbb4 	bl	801a4a8 <iprintf>
  } 

  FifoEnabled = 1;
  
  return BSP_Error;
}
 8012d40:	4620      	mov	r0, r4
 8012d42:	bd10      	pop	{r4, pc}
    PREDMNT1_PRINTF("\tOk Set FIFO in Continuous Mode\r\n");
 8012d44:	4815      	ldr	r0, [pc, #84]	; (8012d9c <enable_FIFO+0x78>)
 8012d46:	f007 fc35 	bl	801a5b4 <puts>
  if ((BSP_Error = MOTION_SENSOR_FIFO_Set_INT2_FIFO_Full(ACCELERO_INSTANCE, ENABLE)) != BSP_ERROR_NONE)
 8012d4a:	2101      	movs	r1, #1
 8012d4c:	4608      	mov	r0, r1
 8012d4e:	f002 fac3 	bl	80152d8 <IKS01A3_MOTION_SENSOR_FIFO_Set_INT2_FIFO_Full>
 8012d52:	4604      	mov	r4, r0
 8012d54:	b110      	cbz	r0, 8012d5c <enable_FIFO+0x38>
    PREDMNT1_PRINTF("\tError enable FIFO FULL INTP on INT2 path (BSP_ERROR = %ld)\r\n", BSP_Error);
 8012d56:	4601      	mov	r1, r0
 8012d58:	4811      	ldr	r0, [pc, #68]	; (8012da0 <enable_FIFO+0x7c>)
 8012d5a:	e7ef      	b.n	8012d3c <enable_FIFO+0x18>
    PREDMNT1_PRINTF("\tOk enable FIFO FULL INTP on INT2 path\r\n");
 8012d5c:	4811      	ldr	r0, [pc, #68]	; (8012da4 <enable_FIFO+0x80>)
 8012d5e:	f007 fc29 	bl	801a5b4 <puts>
  StartTick = BSP_GetTick();
 8012d62:	f001 ffa9 	bl	8014cb8 <BSP_GetTick>
 8012d66:	4b10      	ldr	r3, [pc, #64]	; (8012da8 <enable_FIFO+0x84>)
 8012d68:	6118      	str	r0, [r3, #16]
  if ((BSP_Error = MOTION_SENSOR_FIFO_Set_ODR_Value(ACCELERO_INSTANCE, AcceleroParams.AccFifoBdr)) != BSP_ERROR_NONE)
 8012d6a:	4b10      	ldr	r3, [pc, #64]	; (8012dac <enable_FIFO+0x88>)
 8012d6c:	889b      	ldrh	r3, [r3, #4]
 8012d6e:	ee00 3a10 	vmov	s0, r3
 8012d72:	2001      	movs	r0, #1
 8012d74:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 8012d78:	f002 fa98 	bl	80152ac <IKS01A3_MOTION_SENSOR_FIFO_Set_ODR_Value>
 8012d7c:	4604      	mov	r4, r0
 8012d7e:	b110      	cbz	r0, 8012d86 <enable_FIFO+0x62>
    PREDMNT1_PRINTF("\tError Set FIFO ODR Value (BSP_ERROR = %ld)\r\n", BSP_Error);
 8012d80:	4601      	mov	r1, r0
 8012d82:	480b      	ldr	r0, [pc, #44]	; (8012db0 <enable_FIFO+0x8c>)
 8012d84:	e7da      	b.n	8012d3c <enable_FIFO+0x18>
    PREDMNT1_PRINTF("\tOk Set FIFO ODR Value\r\n");
 8012d86:	480b      	ldr	r0, [pc, #44]	; (8012db4 <enable_FIFO+0x90>)
 8012d88:	f007 fc14 	bl	801a5b4 <puts>
  FifoEnabled = 1;
 8012d8c:	4b0a      	ldr	r3, [pc, #40]	; (8012db8 <enable_FIFO+0x94>)
 8012d8e:	2201      	movs	r2, #1
 8012d90:	701a      	strb	r2, [r3, #0]
  return BSP_Error;
 8012d92:	e7d5      	b.n	8012d40 <enable_FIFO+0x1c>
 8012d94:	08022c86 	.word	0x08022c86
 8012d98:	08022c95 	.word	0x08022c95
 8012d9c:	08022ccc 	.word	0x08022ccc
 8012da0:	08022ced 	.word	0x08022ced
 8012da4:	08022d2b 	.word	0x08022d2b
 8012da8:	200096f0 	.word	0x200096f0
 8012dac:	2000b664 	.word	0x2000b664
 8012db0:	08022d53 	.word	0x08022d53
 8012db4:	08022d81 	.word	0x08022d81
 8012db8:	20009868 	.word	0x20009868

08012dbc <disable_FIFO>:
  * @brief  Disable FIFO measuring
  * @param  None
  * @retval BSP status
  */
int32_t disable_FIFO(void)
{
 8012dbc:	b510      	push	{r4, lr}
  int32_t BSP_Error= BSP_ERROR_NONE;
  
  PREDMNT1_PRINTF("\r\nDisable FIFO\r\n");
 8012dbe:	4817      	ldr	r0, [pc, #92]	; (8012e1c <disable_FIFO+0x60>)
 8012dc0:	f007 fbf8 	bl	801a5b4 <puts>
  
  /* Switch from FIFO to BYPASS MODE */
  if ((BSP_Error = MOTION_SENSOR_FIFO_Set_Mode(ACCELERO_INSTANCE, ACCELERO_FIFO_BYPASS_MODE)) != BSP_ERROR_NONE)
 8012dc4:	2100      	movs	r1, #0
 8012dc6:	2001      	movs	r0, #1
 8012dc8:	f002 fac8 	bl	801535c <IKS01A3_MOTION_SENSOR_FIFO_Set_Mode>
 8012dcc:	4604      	mov	r4, r0
 8012dce:	b128      	cbz	r0, 8012ddc <disable_FIFO+0x20>
  {
    PREDMNT1_PRINTF("\tError set FIFO in By-Pass Mode (BSP_ERROR = %ld)\r\n", BSP_Error);
 8012dd0:	4601      	mov	r1, r0
 8012dd2:	4813      	ldr	r0, [pc, #76]	; (8012e20 <disable_FIFO+0x64>)
  }
  
  /* Switch off the FIFO filling */
  if ((BSP_Error = MOTION_SENSOR_FIFO_Set_ODR_Value(ACCELERO_INSTANCE, 0.0)) != BSP_ERROR_NONE)
  {
    PREDMNT1_PRINTF("\tError Set FIFO ODR Value (BSP_ERROR = %ld)\r\n", BSP_Error);
 8012dd4:	f007 fb68 	bl	801a4a8 <iprintf>
  } 

  FifoEnabled = 0;
  
  return BSP_Error;
}
 8012dd8:	4620      	mov	r0, r4
 8012dda:	bd10      	pop	{r4, pc}
    PREDMNT1_PRINTF("\tOk set FIFO in By-Pass Mode\r\n");
 8012ddc:	4811      	ldr	r0, [pc, #68]	; (8012e24 <disable_FIFO+0x68>)
 8012dde:	f007 fbe9 	bl	801a5b4 <puts>
  if ((BSP_Error = MOTION_SENSOR_FIFO_Set_INT2_FIFO_Full(ACCELERO_INSTANCE, DISABLE)) != BSP_ERROR_NONE)
 8012de2:	4621      	mov	r1, r4
 8012de4:	2001      	movs	r0, #1
 8012de6:	f002 fa77 	bl	80152d8 <IKS01A3_MOTION_SENSOR_FIFO_Set_INT2_FIFO_Full>
 8012dea:	4604      	mov	r4, r0
 8012dec:	b110      	cbz	r0, 8012df4 <disable_FIFO+0x38>
    PREDMNT1_PRINTF("\tError disable FIFO FULL INTP on INT2 path (BSP_ERROR = %ld)\r\n", BSP_Error);
 8012dee:	4601      	mov	r1, r0
 8012df0:	480d      	ldr	r0, [pc, #52]	; (8012e28 <disable_FIFO+0x6c>)
 8012df2:	e7ef      	b.n	8012dd4 <disable_FIFO+0x18>
    PREDMNT1_PRINTF("\tOk disable FIFO FULL INTP on INT2 path\r\n");
 8012df4:	480d      	ldr	r0, [pc, #52]	; (8012e2c <disable_FIFO+0x70>)
 8012df6:	f007 fbdd 	bl	801a5b4 <puts>
  if ((BSP_Error = MOTION_SENSOR_FIFO_Set_ODR_Value(ACCELERO_INSTANCE, 0.0)) != BSP_ERROR_NONE)
 8012dfa:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 8012e30 <disable_FIFO+0x74>
 8012dfe:	2001      	movs	r0, #1
 8012e00:	f002 fa54 	bl	80152ac <IKS01A3_MOTION_SENSOR_FIFO_Set_ODR_Value>
 8012e04:	4604      	mov	r4, r0
 8012e06:	b110      	cbz	r0, 8012e0e <disable_FIFO+0x52>
    PREDMNT1_PRINTF("\tError Set FIFO ODR Value (BSP_ERROR = %ld)\r\n", BSP_Error);
 8012e08:	4601      	mov	r1, r0
 8012e0a:	480a      	ldr	r0, [pc, #40]	; (8012e34 <disable_FIFO+0x78>)
 8012e0c:	e7e2      	b.n	8012dd4 <disable_FIFO+0x18>
    PREDMNT1_PRINTF("\tOk Set FIFO ODR Value\r\n");
 8012e0e:	480a      	ldr	r0, [pc, #40]	; (8012e38 <disable_FIFO+0x7c>)
 8012e10:	f007 fbd0 	bl	801a5b4 <puts>
  FifoEnabled = 0;
 8012e14:	4b09      	ldr	r3, [pc, #36]	; (8012e3c <disable_FIFO+0x80>)
 8012e16:	701c      	strb	r4, [r3, #0]
  return BSP_Error;
 8012e18:	e7de      	b.n	8012dd8 <disable_FIFO+0x1c>
 8012e1a:	bf00      	nop
 8012e1c:	08022d99 	.word	0x08022d99
 8012e20:	08022da9 	.word	0x08022da9
 8012e24:	08022ddd 	.word	0x08022ddd
 8012e28:	08022dfb 	.word	0x08022dfb
 8012e2c:	08022e3a 	.word	0x08022e3a
 8012e30:	00000000 	.word	0x00000000
 8012e34:	08022d53 	.word	0x08022d53
 8012e38:	08022d81 	.word	0x08022d81
 8012e3c:	20009868 	.word	0x20009868

08012e40 <MotionSP_MainManager>:
{
 8012e40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if (!MotionSP_Running)
 8012e44:	4c78      	ldr	r4, [pc, #480]	; (8013028 <MotionSP_MainManager+0x1e8>)
 8012e46:	7d23      	ldrb	r3, [r4, #20]
{
 8012e48:	b092      	sub	sp, #72	; 0x48
  if (!MotionSP_Running)
 8012e4a:	2b00      	cmp	r3, #0
 8012e4c:	f040 8112 	bne.w	8013074 <MotionSP_MainManager+0x234>
    if ((BSP_Error = MotionSP_VibrationAnalysisVariableInit()) != BSP_ERROR_NONE)
 8012e50:	f7ff fe1a 	bl	8012a88 <MotionSP_VibrationAnalysisVariableInit>
 8012e54:	4605      	mov	r5, r0
 8012e56:	b938      	cbnz	r0, 8012e68 <MotionSP_MainManager+0x28>
    if((EnableDisable_ACC_HP_Filter(AcceleroParams.HwFilter)) != BSP_ERROR_NONE)
 8012e58:	4e74      	ldr	r6, [pc, #464]	; (801302c <MotionSP_MainManager+0x1ec>)
 8012e5a:	7ab0      	ldrb	r0, [r6, #10]
 8012e5c:	f7ff fbd6 	bl	801260c <EnableDisable_ACC_HP_Filter>
 8012e60:	46b0      	mov	r8, r6
 8012e62:	4605      	mov	r5, r0
 8012e64:	b120      	cbz	r0, 8012e70 <MotionSP_MainManager+0x30>
      return BSP_Error;
 8012e66:	2500      	movs	r5, #0
}
 8012e68:	4628      	mov	r0, r5
 8012e6a:	b012      	add	sp, #72	; 0x48
 8012e6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  MotionSP_Data.FifoEmpty = 0;
 8012e70:	4e6f      	ldr	r6, [pc, #444]	; (8013030 <MotionSP_MainManager+0x1f0>)
  if (MotionSP_Parameters.FftSize == 1024)
 8012e72:	4f70      	ldr	r7, [pc, #448]	; (8013034 <MotionSP_MainManager+0x1f4>)
  PREDMNT1_PRINTF("\r\nAccelero FIFO config:\r\n");
 8012e74:	4870      	ldr	r0, [pc, #448]	; (8013038 <MotionSP_MainManager+0x1f8>)
 8012e76:	f007 fb9d 	bl	801a5b4 <puts>
  MotionSP_Data.AccCircBuff.Size = 0;
 8012e7a:	4b70      	ldr	r3, [pc, #448]	; (801303c <MotionSP_MainManager+0x1fc>)
 8012e7c:	60b3      	str	r3, [r6, #8]
  if (MotionSP_Parameters.FftSize == 1024)
 8012e7e:	883b      	ldrh	r3, [r7, #0]
 8012e80:	7aba      	ldrb	r2, [r7, #10]
  MotionSP_Data.FifoEmpty = 0;
 8012e82:	7135      	strb	r5, [r6, #4]
  if (MotionSP_Parameters.FftSize == 1024)
 8012e84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
  MotionSP_Data.AccCircBuff.Ovf = 0;
 8012e88:	7335      	strb	r5, [r6, #12]
  if (MotionSP_Parameters.FftSize == 1024)
 8012e8a:	d134      	bne.n	8012ef6 <MotionSP_MainManager+0xb6>
      k = 0.66f;   
 8012e8c:	eddf 6a6c 	vldr	s13, [pc, #432]	; 8013040 <MotionSP_MainManager+0x200>
 8012e90:	eddf 7a6c 	vldr	s15, [pc, #432]	; 8013044 <MotionSP_MainManager+0x204>
 8012e94:	2a13      	cmp	r2, #19
      k = 0.50f;
 8012e96:	bf98      	it	ls
 8012e98:	eef0 6a67 	vmovls.f32	s13, s15
  AcceleroParams.FifoWtm = (uint16_t)(((float)MotionSP_Parameters.FftSize*(1.0f-((float)MotionSP_Parameters.FftOvl/100.0f)))*k);
 8012e9c:	7aba      	ldrb	r2, [r7, #10]
 8012e9e:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 8013048 <MotionSP_MainManager+0x208>
 8012ea2:	ee06 2a10 	vmov	s12, r2
 8012ea6:	eeb8 6a46 	vcvt.f32.u32	s12, s12
  if ( (uint16_t)((AcceleroParams.FifoWtm * FIFO_FRAME_SIZE) > MAX_FIFO_SIZE ) )
 8012eaa:	f04f 0906 	mov.w	r9, #6
  AcceleroParams.FifoWtm = (uint16_t)(((float)MotionSP_Parameters.FftSize*(1.0f-((float)MotionSP_Parameters.FftOvl/100.0f)))*k);
 8012eae:	eec6 7a07 	vdiv.f32	s15, s12, s14
 8012eb2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8012eb6:	ee37 7a67 	vsub.f32	s14, s14, s15
 8012eba:	ee07 3a90 	vmov	s15, r3
 8012ebe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012ec2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012ec6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8012eca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8012ece:	ee17 3a90 	vmov	r3, s15
 8012ed2:	b29b      	uxth	r3, r3
  if ( (uint16_t)((AcceleroParams.FifoWtm * FIFO_FRAME_SIZE) > MAX_FIFO_SIZE ) )
 8012ed4:	fb09 f103 	mul.w	r1, r9, r3
 8012ed8:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
  AcceleroParams.FifoWtm = (uint16_t)(((float)MotionSP_Parameters.FftSize*(1.0f-((float)MotionSP_Parameters.FftOvl/100.0f)))*k);
 8012edc:	f8a8 3010 	strh.w	r3, [r8, #16]
  if ( (uint16_t)((AcceleroParams.FifoWtm * FIFO_FRAME_SIZE) > MAX_FIFO_SIZE ) )
 8012ee0:	dd19      	ble.n	8012f16 <MotionSP_MainManager+0xd6>
  { PREDMNT1_PRINTF("\n FIFO size will be %i byte than exceed its maximum value, 4 kbyte.\n",
 8012ee2:	b289      	uxth	r1, r1
 8012ee4:	4859      	ldr	r0, [pc, #356]	; (801304c <MotionSP_MainManager+0x20c>)
 8012ee6:	f007 fadf 	bl	801a4a8 <iprintf>
    PREDMNT1_PRINTF(" Please, reduce the FFT_SIZE_DEFAULT or the FFT_OVL_DEFAULT. \n");
 8012eea:	4859      	ldr	r0, [pc, #356]	; (8013050 <MotionSP_MainManager+0x210>)
 8012eec:	f007 fb62 	bl	801a5b4 <puts>
    return BSP_ERROR_WRONG_PARAM;
 8012ef0:	f06f 0501 	mvn.w	r5, #1
 8012ef4:	e7b8      	b.n	8012e68 <MotionSP_MainManager+0x28>
    if (MotionSP_Parameters.FftOvl < 20)
 8012ef6:	2a13      	cmp	r2, #19
 8012ef8:	d907      	bls.n	8012f0a <MotionSP_MainManager+0xca>
    else if (MotionSP_Parameters.FftOvl < 40)
 8012efa:	2a27      	cmp	r2, #39	; 0x27
 8012efc:	d908      	bls.n	8012f10 <MotionSP_MainManager+0xd0>
      k = 0.50f;
 8012efe:	eddf 6a50 	vldr	s13, [pc, #320]	; 8013040 <MotionSP_MainManager+0x200>
 8012f02:	2a3b      	cmp	r2, #59	; 0x3b
 8012f04:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8012f08:	e7c5      	b.n	8012e96 <MotionSP_MainManager+0x56>
      k = 0.33f;
 8012f0a:	eddf 6a52 	vldr	s13, [pc, #328]	; 8013054 <MotionSP_MainManager+0x214>
 8012f0e:	e7c5      	b.n	8012e9c <MotionSP_MainManager+0x5c>
      k = 0.40f;
 8012f10:	eddf 6a51 	vldr	s13, [pc, #324]	; 8013058 <MotionSP_MainManager+0x218>
 8012f14:	e7c2      	b.n	8012e9c <MotionSP_MainManager+0x5c>
  if ((BSP_Error = MOTION_SENSOR_FIFO_Set_Watermark_Level(ACCELERO_INSTANCE, AcceleroParams.FifoWtm*3)) != BSP_ERROR_NONE)
 8012f16:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8012f1a:	b299      	uxth	r1, r3
 8012f1c:	2001      	movs	r0, #1
 8012f1e:	f002 f9f1 	bl	8015304 <IKS01A3_MOTION_SENSOR_FIFO_Set_Watermark_Level>
 8012f22:	4605      	mov	r5, r0
 8012f24:	b120      	cbz	r0, 8012f30 <MotionSP_MainManager+0xf0>
    PREDMNT1_PRINTF("\tError Set FIFO Watermark Level (BSP_ERROR = %ld)\r\n", BSP_Error);
 8012f26:	4601      	mov	r1, r0
 8012f28:	484c      	ldr	r0, [pc, #304]	; (801305c <MotionSP_MainManager+0x21c>)
    PREDMNT1_PRINTF("\tError Set FIFO Stop On Fth (BSP_ERROR = %ld)\r\n", BSP_Error);
 8012f2a:	f007 fabd 	bl	801a4a8 <iprintf>
    return BSP_Error;
 8012f2e:	e79b      	b.n	8012e68 <MotionSP_MainManager+0x28>
    PREDMNT1_PRINTF("\tOk Set FIFO Watermark Level\r\n");
 8012f30:	484b      	ldr	r0, [pc, #300]	; (8013060 <MotionSP_MainManager+0x220>)
 8012f32:	f007 fb3f 	bl	801a5b4 <puts>
  if (MotionSP_Data.FifoBfr == NULL)
 8012f36:	6830      	ldr	r0, [r6, #0]
 8012f38:	f8b8 1010 	ldrh.w	r1, [r8, #16]
 8012f3c:	b948      	cbnz	r0, 8012f52 <MotionSP_MainManager+0x112>
    MotionSP_Data.FifoBfr = (uint8_t *) malloc(sizeof(uint8_t) * (AcceleroParams.FifoWtm * FIFO_FRAME_SIZE));
 8012f3e:	fb09 f001 	mul.w	r0, r9, r1
 8012f42:	f006 fd5d 	bl	8019a00 <malloc>
    MotionSP_Data.FifoBfr = realloc(MotionSP_Data.FifoBfr, sizeof(uint8_t) * (AcceleroParams.FifoWtm * FIFO_FRAME_SIZE));
 8012f46:	6030      	str	r0, [r6, #0]
  if (MotionSP_Data.FifoBfr == NULL)
 8012f48:	6830      	ldr	r0, [r6, #0]
 8012f4a:	b938      	cbnz	r0, 8012f5c <MotionSP_MainManager+0x11c>
    return BSP_ERROR_MALLOC_FAILURE;
 8012f4c:	f06f 050b 	mvn.w	r5, #11
 8012f50:	e78a      	b.n	8012e68 <MotionSP_MainManager+0x28>
    MotionSP_Data.FifoBfr = realloc(MotionSP_Data.FifoBfr, sizeof(uint8_t) * (AcceleroParams.FifoWtm * FIFO_FRAME_SIZE));
 8012f52:	fb09 f101 	mul.w	r1, r9, r1
 8012f56:	f007 fb35 	bl	801a5c4 <realloc>
 8012f5a:	e7f4      	b.n	8012f46 <MotionSP_MainManager+0x106>
  memset((void *)MotionSP_Data.FifoBfr, 0, sizeof(uint8_t) * (AcceleroParams.FifoWtm * FIFO_FRAME_SIZE));
 8012f5c:	f8b8 3010 	ldrh.w	r3, [r8, #16]
 8012f60:	2206      	movs	r2, #6
 8012f62:	2100      	movs	r1, #0
 8012f64:	435a      	muls	r2, r3
 8012f66:	f006 fd83 	bl	8019a70 <memset>
  MotionSP_Data.AccCircBuff.Size = (uint16_t)((MotionSP_Parameters.FftSize * CIRC_BUFFER_RATIO_NUM)/CIRC_BUFFER_RATIO_DEN);
 8012f6a:	8838      	ldrh	r0, [r7, #0]
 8012f6c:	210c      	movs	r1, #12
 8012f6e:	4341      	muls	r1, r0
 8012f70:	200a      	movs	r0, #10
 8012f72:	fbb1 f1f0 	udiv	r1, r1, r0
  if (MotionSP_Data.AccCircBuff.Array.X == NULL)
 8012f76:	6930      	ldr	r0, [r6, #16]
  MotionSP_Data.AccCircBuff.Size = (uint16_t)((MotionSP_Parameters.FftSize * CIRC_BUFFER_RATIO_NUM)/CIRC_BUFFER_RATIO_DEN);
 8012f78:	8131      	strh	r1, [r6, #8]
  if (MotionSP_Data.AccCircBuff.Array.X == NULL)
 8012f7a:	b289      	uxth	r1, r1
 8012f7c:	0089      	lsls	r1, r1, #2
 8012f7e:	2800      	cmp	r0, #0
 8012f80:	d132      	bne.n	8012fe8 <MotionSP_MainManager+0x1a8>
    MotionSP_Data.AccCircBuff.Array.X = (float *) malloc(sizeof(float) * MotionSP_Data.AccCircBuff.Size);
 8012f82:	4608      	mov	r0, r1
 8012f84:	f006 fd3c 	bl	8019a00 <malloc>
   MotionSP_Data.AccCircBuff.Array.X = realloc(MotionSP_Data.AccCircBuff.Array.X, sizeof(float) * MotionSP_Data.AccCircBuff.Size);
 8012f88:	6130      	str	r0, [r6, #16]
  if(MotionSP_Data.AccCircBuff.Array.X == NULL)
 8012f8a:	6930      	ldr	r0, [r6, #16]
 8012f8c:	2800      	cmp	r0, #0
 8012f8e:	d0dd      	beq.n	8012f4c <MotionSP_MainManager+0x10c>
  memset((void *)MotionSP_Data.AccCircBuff.Array.X, 0, sizeof(float) * MotionSP_Data.AccCircBuff.Size);
 8012f90:	8932      	ldrh	r2, [r6, #8]
 8012f92:	2100      	movs	r1, #0
 8012f94:	0092      	lsls	r2, r2, #2
 8012f96:	f006 fd6b 	bl	8019a70 <memset>
  if (MotionSP_Data.AccCircBuff.Array.Y == NULL)
 8012f9a:	6970      	ldr	r0, [r6, #20]
 8012f9c:	8931      	ldrh	r1, [r6, #8]
 8012f9e:	bb30      	cbnz	r0, 8012fee <MotionSP_MainManager+0x1ae>
    MotionSP_Data.AccCircBuff.Array.Y = (float *) malloc(sizeof(float) * MotionSP_Data.AccCircBuff.Size);
 8012fa0:	0088      	lsls	r0, r1, #2
 8012fa2:	f006 fd2d 	bl	8019a00 <malloc>
   MotionSP_Data.AccCircBuff.Array.Y = realloc(MotionSP_Data.AccCircBuff.Array.Y, sizeof(float) * MotionSP_Data.AccCircBuff.Size);
 8012fa6:	6170      	str	r0, [r6, #20]
  if(MotionSP_Data.AccCircBuff.Array.Y == NULL)
 8012fa8:	6970      	ldr	r0, [r6, #20]
 8012faa:	2800      	cmp	r0, #0
 8012fac:	d0ce      	beq.n	8012f4c <MotionSP_MainManager+0x10c>
  memset((void *)MotionSP_Data.AccCircBuff.Array.Y, 0, sizeof(float) * MotionSP_Data.AccCircBuff.Size);
 8012fae:	8932      	ldrh	r2, [r6, #8]
 8012fb0:	2100      	movs	r1, #0
 8012fb2:	0092      	lsls	r2, r2, #2
 8012fb4:	f006 fd5c 	bl	8019a70 <memset>
  if (MotionSP_Data.AccCircBuff.Array.Z == NULL)
 8012fb8:	69b0      	ldr	r0, [r6, #24]
 8012fba:	8931      	ldrh	r1, [r6, #8]
 8012fbc:	b9d8      	cbnz	r0, 8012ff6 <MotionSP_MainManager+0x1b6>
    MotionSP_Data.AccCircBuff.Array.Z = (float *) malloc(sizeof(float) * MotionSP_Data.AccCircBuff.Size);
 8012fbe:	0088      	lsls	r0, r1, #2
 8012fc0:	f006 fd1e 	bl	8019a00 <malloc>
   MotionSP_Data.AccCircBuff.Array.Z = realloc(MotionSP_Data.AccCircBuff.Array.Z, sizeof(float) * MotionSP_Data.AccCircBuff.Size);
 8012fc4:	61b0      	str	r0, [r6, #24]
  if(MotionSP_Data.AccCircBuff.Array.Z == NULL)
 8012fc6:	69b0      	ldr	r0, [r6, #24]
 8012fc8:	2800      	cmp	r0, #0
 8012fca:	d0bf      	beq.n	8012f4c <MotionSP_MainManager+0x10c>
  memset((void *)MotionSP_Data.AccCircBuff.Array.Z, 0, sizeof(float) * MotionSP_Data.AccCircBuff.Size);
 8012fcc:	8932      	ldrh	r2, [r6, #8]
 8012fce:	2100      	movs	r1, #0
 8012fd0:	0092      	lsls	r2, r2, #2
 8012fd2:	f006 fd4d 	bl	8019a70 <memset>
  if ((BSP_Error = MOTION_SENSOR_FIFO_Set_Stop_On_Fth(ACCELERO_INSTANCE, ENABLE)) != BSP_ERROR_NONE)
 8012fd6:	2101      	movs	r1, #1
 8012fd8:	4608      	mov	r0, r1
 8012fda:	f002 f9a9 	bl	8015330 <IKS01A3_MOTION_SENSOR_FIFO_Set_Stop_On_Fth>
 8012fde:	4605      	mov	r5, r0
 8012fe0:	b168      	cbz	r0, 8012ffe <MotionSP_MainManager+0x1be>
    PREDMNT1_PRINTF("\tError Set FIFO Stop On Fth (BSP_ERROR = %ld)\r\n", BSP_Error);
 8012fe2:	4601      	mov	r1, r0
 8012fe4:	481f      	ldr	r0, [pc, #124]	; (8013064 <MotionSP_MainManager+0x224>)
 8012fe6:	e7a0      	b.n	8012f2a <MotionSP_MainManager+0xea>
   MotionSP_Data.AccCircBuff.Array.X = realloc(MotionSP_Data.AccCircBuff.Array.X, sizeof(float) * MotionSP_Data.AccCircBuff.Size);
 8012fe8:	f007 faec 	bl	801a5c4 <realloc>
 8012fec:	e7cc      	b.n	8012f88 <MotionSP_MainManager+0x148>
   MotionSP_Data.AccCircBuff.Array.Y = realloc(MotionSP_Data.AccCircBuff.Array.Y, sizeof(float) * MotionSP_Data.AccCircBuff.Size);
 8012fee:	0089      	lsls	r1, r1, #2
 8012ff0:	f007 fae8 	bl	801a5c4 <realloc>
 8012ff4:	e7d7      	b.n	8012fa6 <MotionSP_MainManager+0x166>
   MotionSP_Data.AccCircBuff.Array.Z = realloc(MotionSP_Data.AccCircBuff.Array.Z, sizeof(float) * MotionSP_Data.AccCircBuff.Size);
 8012ff6:	0089      	lsls	r1, r1, #2
 8012ff8:	f007 fae4 	bl	801a5c4 <realloc>
 8012ffc:	e7e2      	b.n	8012fc4 <MotionSP_MainManager+0x184>
    PREDMNT1_PRINTF("\tOk Set FIFO Stop On Fth\r\n");
 8012ffe:	481a      	ldr	r0, [pc, #104]	; (8013068 <MotionSP_MainManager+0x228>)
 8013000:	f007 fad8 	bl	801a5b4 <puts>
  if ((BSP_Error = MOTION_SENSOR_FIFO_Set_Decimation(ACCELERO_INSTANCE,
 8013004:	2201      	movs	r2, #1
 8013006:	2102      	movs	r1, #2
 8013008:	4610      	mov	r0, r2
 801300a:	f002 f931 	bl	8015270 <IKS01A3_MOTION_SENSOR_FIFO_Set_Decimation>
 801300e:	4605      	mov	r5, r0
 8013010:	b110      	cbz	r0, 8013018 <MotionSP_MainManager+0x1d8>
    PREDMNT1_PRINTF("\tError Set FIFO Decimation (BSP_ERROR = %ld)\r\n", BSP_Error);
 8013012:	4601      	mov	r1, r0
 8013014:	4815      	ldr	r0, [pc, #84]	; (801306c <MotionSP_MainManager+0x22c>)
 8013016:	e788      	b.n	8012f2a <MotionSP_MainManager+0xea>
    PREDMNT1_PRINTF("\tOk Set FIFO Decimation\r\n");
 8013018:	4815      	ldr	r0, [pc, #84]	; (8013070 <MotionSP_MainManager+0x230>)
 801301a:	f007 facb 	bl	801a5b4 <puts>
    enable_FIFO();
 801301e:	f7ff fe81 	bl	8012d24 <enable_FIFO>
    MotionSP_Running = 1;
 8013022:	2301      	movs	r3, #1
 8013024:	7523      	strb	r3, [r4, #20]
 8013026:	e71f      	b.n	8012e68 <MotionSP_MainManager+0x28>
 8013028:	200096f0 	.word	0x200096f0
 801302c:	2000b664 	.word	0x2000b664
 8013030:	2000ab44 	.word	0x2000ab44
 8013034:	2000ae78 	.word	0x2000ae78
 8013038:	08022e63 	.word	0x08022e63
 801303c:	ffff0000 	.word	0xffff0000
 8013040:	3f4ccccd 	.word	0x3f4ccccd
 8013044:	3f28f5c3 	.word	0x3f28f5c3
 8013048:	42c80000 	.word	0x42c80000
 801304c:	08022e7c 	.word	0x08022e7c
 8013050:	08022ec1 	.word	0x08022ec1
 8013054:	3ea8f5c3 	.word	0x3ea8f5c3
 8013058:	3ecccccd 	.word	0x3ecccccd
 801305c:	08022eff 	.word	0x08022eff
 8013060:	08022f33 	.word	0x08022f33
 8013064:	08022f51 	.word	0x08022f51
 8013068:	08022f81 	.word	0x08022f81
 801306c:	08022f9b 	.word	0x08022f9b
 8013070:	08022fca 	.word	0x08022fca
    if(!SendingFFT)
 8013074:	f894 900c 	ldrb.w	r9, [r4, #12]
 8013078:	f1b9 0f00 	cmp.w	r9, #0
 801307c:	f040 8204 	bne.w	8013488 <MotionSP_MainManager+0x648>
  if(MotionSP_Data.FifoEmpty)
 8013080:	4db5      	ldr	r5, [pc, #724]	; (8013358 <MotionSP_MainManager+0x518>)
 8013082:	792f      	ldrb	r7, [r5, #4]
 8013084:	2f00      	cmp	r7, #0
 8013086:	d055      	beq.n	8013134 <MotionSP_MainManager+0x2f4>
    MotionSP_TimeDomainEvalFromCircBuff(&TimeDomainData,
 8013088:	f8df 8324 	ldr.w	r8, [pc, #804]	; 80133b0 <MotionSP_MainManager+0x570>
 801308c:	4bb3      	ldr	r3, [pc, #716]	; (801335c <MotionSP_MainManager+0x51c>)
 801308e:	f898 2002 	ldrb.w	r2, [r8, #2]
 8013092:	4eb3      	ldr	r6, [pc, #716]	; (8013360 <MotionSP_MainManager+0x520>)
    MotionSP_Data.FifoEmpty = 0;
 8013094:	f885 9004 	strb.w	r9, [r5, #4]
                                        (Td_Type_t)MotionSP_Parameters.td_type,
 8013098:	4fb2      	ldr	r7, [pc, #712]	; (8013364 <MotionSP_MainManager+0x524>)
    MotionSP_TimeDomainEvalFromCircBuff(&TimeDomainData,
 801309a:	9200      	str	r2, [sp, #0]
 801309c:	4ab2      	ldr	r2, [pc, #712]	; (8013368 <MotionSP_MainManager+0x528>)
 801309e:	ed93 0a00 	vldr	s0, [r3]
 80130a2:	edd3 0a01 	vldr	s1, [r3, #4]
 80130a6:	ed93 1a02 	vldr	s2, [r3, #8]
 80130aa:	8a12      	ldrh	r2, [r2, #16]
 80130ac:	79bb      	ldrb	r3, [r7, #6]
 80130ae:	4630      	mov	r0, r6
 80130b0:	f105 0108 	add.w	r1, r5, #8
 80130b4:	f7fc faae 	bl	800f614 <MotionSP_TimeDomainEvalFromCircBuff>
    MotionSP_TimeDomainAlarm(&sTdAlarm,
 80130b8:	4bac      	ldr	r3, [pc, #688]	; (801336c <MotionSP_MainManager+0x52c>)
 80130ba:	4aad      	ldr	r2, [pc, #692]	; (8013370 <MotionSP_MainManager+0x530>)
 80130bc:	49ad      	ldr	r1, [pc, #692]	; (8013374 <MotionSP_MainManager+0x534>)
 80130be:	9600      	str	r6, [sp, #0]
 80130c0:	48ad      	ldr	r0, [pc, #692]	; (8013378 <MotionSP_MainManager+0x538>)
  accCircBuffIndexForFftTmp = accCircBuffIndexForFft + (accCircBuffIndexForFftOvf * MotionSP_Data.AccCircBuff.Size);
 80130c2:	4eae      	ldr	r6, [pc, #696]	; (801337c <MotionSP_MainManager+0x53c>)
    MotionSP_TimeDomainAlarm(&sTdAlarm,
 80130c4:	f7ff fbb4 	bl	8012830 <MotionSP_TimeDomainAlarm>
  accCircBuffIndexTmp = MotionSP_Data.AccCircBuff.IdPos + (MotionSP_Data.AccCircBuff.Ovf * MotionSP_Data.AccCircBuff.Size);
 80130c8:	8929      	ldrh	r1, [r5, #8]
 80130ca:	7b2a      	ldrb	r2, [r5, #12]
 80130cc:	896b      	ldrh	r3, [r5, #10]
 80130ce:	fb12 f201 	smulbb	r2, r2, r1
 80130d2:	441a      	add	r2, r3
  accCircBuffIndexForFftTmp = accCircBuffIndexForFft + (accCircBuffIndexForFftOvf * MotionSP_Data.AccCircBuff.Size);
 80130d4:	7aa3      	ldrb	r3, [r4, #10]
 80130d6:	fb13 f301 	smulbb	r3, r3, r1
 80130da:	8831      	ldrh	r1, [r6, #0]
 80130dc:	440b      	add	r3, r1
  if (accCircBuffIndexTmp >= accCircBuffIndexForFftTmp)
 80130de:	b292      	uxth	r2, r2
 80130e0:	b29b      	uxth	r3, r3
 80130e2:	429a      	cmp	r2, r3
 80130e4:	f0c0 8135 	bcc.w	8013352 <MotionSP_MainManager+0x512>
    if ((BSP_GetTick() - StartTick) > MotionSP_Parameters.tacq)
 80130e8:	f001 fde6 	bl	8014cb8 <BSP_GetTick>
 80130ec:	6923      	ldr	r3, [r4, #16]
 80130ee:	1ac0      	subs	r0, r0, r3
 80130f0:	893b      	ldrh	r3, [r7, #8]
 80130f2:	4298      	cmp	r0, r3
 80130f4:	f240 812b 	bls.w	801334e <MotionSP_MainManager+0x50e>
      disable_FIFO();
 80130f8:	f7ff fe60 	bl	8012dbc <disable_FIFO>
      FFT_avg = 1;
 80130fc:	2701      	movs	r7, #1
    MotionSP_fftExecution(FFT_avg);
 80130fe:	4638      	mov	r0, r7
 8013100:	f7fc fd02 	bl	800fb08 <MotionSP_fftExecution>
    accCircBuffIndexForFftOvf = 0;
 8013104:	2300      	movs	r3, #0
    accCircBuffIndexForFft += accCircBuffIndexForFftDelta;
 8013106:	8922      	ldrh	r2, [r4, #8]
    accCircBuffIndexForFftOvf = 0;
 8013108:	72a3      	strb	r3, [r4, #10]
    accCircBuffIndexForFft += accCircBuffIndexForFftDelta;
 801310a:	8833      	ldrh	r3, [r6, #0]
 801310c:	4413      	add	r3, r2
    if (accCircBuffIndexForFft >= MotionSP_Data.AccCircBuff.Size)
 801310e:	892a      	ldrh	r2, [r5, #8]
    accCircBuffIndexForFft += accCircBuffIndexForFftDelta;
 8013110:	b29b      	uxth	r3, r3
    if (accCircBuffIndexForFft >= MotionSP_Data.AccCircBuff.Size)
 8013112:	4293      	cmp	r3, r2
    accCircBuffIndexForFft += accCircBuffIndexForFftDelta;
 8013114:	8033      	strh	r3, [r6, #0]
    if (accCircBuffIndexForFft >= MotionSP_Data.AccCircBuff.Size)
 8013116:	d305      	bcc.n	8013124 <MotionSP_MainManager+0x2e4>
      accCircBuffIndexForFft -= MotionSP_Data.AccCircBuff.Size;
 8013118:	1a9b      	subs	r3, r3, r2
 801311a:	8033      	strh	r3, [r6, #0]
      if (!MotionSP_Data.AccCircBuff.Ovf)
 801311c:	7b2b      	ldrb	r3, [r5, #12]
 801311e:	b90b      	cbnz	r3, 8013124 <MotionSP_MainManager+0x2e4>
        accCircBuffIndexForFftOvf = 1;
 8013120:	2301      	movs	r3, #1
 8013122:	72a3      	strb	r3, [r4, #10]
    MotionSP_Data.AccCircBuff.Ovf = 0;
 8013124:	2300      	movs	r3, #0
 8013126:	732b      	strb	r3, [r5, #12]
    if (RestartFlag)
 8013128:	f898 3002 	ldrb.w	r3, [r8, #2]
 801312c:	b113      	cbz	r3, 8013134 <MotionSP_MainManager+0x2f4>
      RestartFlag = 0;
 801312e:	2300      	movs	r3, #0
 8013130:	f888 3002 	strb.w	r3, [r8, #2]
      if( (FFT_Amplitude) &&
 8013134:	69a3      	ldr	r3, [r4, #24]
 8013136:	2b00      	cmp	r3, #0
 8013138:	d061      	beq.n	80131fe <MotionSP_MainManager+0x3be>
 801313a:	2f00      	cmp	r7, #0
 801313c:	d05f      	beq.n	80131fe <MotionSP_MainManager+0x3be>
        PrepareTotalBuffToSending(&AccMagResults, AccMagResults.MagSize);
 801313e:	4d90      	ldr	r5, [pc, #576]	; (8013380 <MotionSP_MainManager+0x540>)
  TotalBuffToSending=(uint8_t *)malloc(sizeof(uint8_t) * TotalSize);
 8013140:	4e90      	ldr	r6, [pc, #576]	; (8013384 <MotionSP_MainManager+0x544>)
        PrepareTotalBuffToSending(&AccMagResults, AccMagResults.MagSize);
 8013142:	f8b5 8000 	ldrh.w	r8, [r5]
  TotalSize= 2 /* nSample */ + 1 /* nComponents */ + 4 /*  Frequency Steps */ + ((3 * ActualMagSize) * 4) /* Samples */;
 8013146:	eb08 0048 	add.w	r0, r8, r8, lsl #1
 801314a:	0080      	lsls	r0, r0, #2
 801314c:	3007      	adds	r0, #7
  TotalBuffToSending=(uint8_t *)malloc(sizeof(uint8_t) * TotalSize);
 801314e:	b280      	uxth	r0, r0
 8013150:	f006 fc56 	bl	8019a00 <malloc>
 8013154:	6030      	str	r0, [r6, #0]
  if(TotalBuffToSending == NULL)
 8013156:	b908      	cbnz	r0, 801315c <MotionSP_MainManager+0x31c>
    Error_Handler();
 8013158:	f000 ff61 	bl	801401e <Error_Handler>
  MemoryIsAlloc= 1;
 801315c:	2301      	movs	r3, #1
 801315e:	72e3      	strb	r3, [r4, #11]
  STORE_LE_16(TotalBuffToSending  ,ActualMagSize);
 8013160:	6833      	ldr	r3, [r6, #0]
 8013162:	f883 8000 	strb.w	r8, [r3]
 8013166:	6833      	ldr	r3, [r6, #0]
 8013168:	ea4f 2218 	mov.w	r2, r8, lsr #8
 801316c:	705a      	strb	r2, [r3, #1]
  TotalBuffToSending[2]= 3;
 801316e:	6833      	ldr	r3, [r6, #0]
 8013170:	2203      	movs	r2, #3
 8013172:	709a      	strb	r2, [r3, #2]
  STORE_LE_32(&TotalBuffToSending[BuffPos], *TempBuff);
 8013174:	6832      	ldr	r2, [r6, #0]
 8013176:	686b      	ldr	r3, [r5, #4]
 8013178:	70d3      	strb	r3, [r2, #3]
 801317a:	6832      	ldr	r2, [r6, #0]
 801317c:	0a19      	lsrs	r1, r3, #8
 801317e:	7111      	strb	r1, [r2, #4]
 8013180:	ea4f 0a88 	mov.w	sl, r8, lsl #2
 8013184:	0c19      	lsrs	r1, r3, #16
 8013186:	0e1b      	lsrs	r3, r3, #24
 8013188:	7193      	strb	r3, [r2, #6]
 801318a:	7151      	strb	r1, [r2, #5]
 801318c:	f10a 0c07 	add.w	ip, sl, #7
  BuffPos += 4;
 8013190:	2307      	movs	r3, #7
  for(uint16_t i=0; i<ActualMagSize; i++)
 8013192:	4563      	cmp	r3, ip
 8013194:	f040 810e 	bne.w	80133b4 <MotionSP_MainManager+0x574>
    STORE_LE_32(&TotalBuffToSending[BuffPos], *(uint32_t *)&(AccMagResults.Array.Y[i]));
 8013198:	f8df c1e8 	ldr.w	ip, [pc, #488]	; 8013384 <MotionSP_MainManager+0x544>
 801319c:	469e      	mov	lr, r3
 801319e:	2200      	movs	r2, #0
  for(uint16_t i=0; i<ActualMagSize; i++)
 80131a0:	b291      	uxth	r1, r2
 80131a2:	4588      	cmp	r8, r1
 80131a4:	f200 811f 	bhi.w	80133e6 <MotionSP_MainManager+0x5a6>
 80131a8:	4453      	add	r3, sl
 80131aa:	2000      	movs	r0, #0
  for(uint16_t i=0; i<ActualMagSize; i++)
 80131ac:	b282      	uxth	r2, r0
 80131ae:	4590      	cmp	r8, r2
 80131b0:	f200 813c 	bhi.w	801342c <MotionSP_MainManager+0x5ec>
        PREDMNT1_PRINTF("\r\nSending Time Domain to ST BLE Sensor app\r\n");
 80131b4:	4874      	ldr	r0, [pc, #464]	; (8013388 <MotionSP_MainManager+0x548>)
 80131b6:	f007 f9fd 	bl	801a5b4 <puts>
        AccPeak.x= TimeDomainData.AccPeak.AXIS_X;
 80131ba:	4b69      	ldr	r3, [pc, #420]	; (8013360 <MotionSP_MainManager+0x520>)
 80131bc:	ed93 0a00 	vldr	s0, [r3]
        AccPeak.y= TimeDomainData.AccPeak.AXIS_Y;
 80131c0:	edd3 0a01 	vldr	s1, [r3, #4]
        AccPeak.z= TimeDomainData.AccPeak.AXIS_Z;
 80131c4:	ed93 1a02 	vldr	s2, [r3, #8]
        SpeedRms.x= TimeDomainData.SpeedRms.AXIS_X;
 80131c8:	edd3 1a06 	vldr	s3, [r3, #24]
        SpeedRms.y= TimeDomainData.SpeedRms.AXIS_Y;
 80131cc:	ed93 2a07 	vldr	s4, [r3, #28]
        SpeedRms.z= TimeDomainData.SpeedRms.AXIS_Z;
 80131d0:	edd3 2a08 	vldr	s5, [r3, #32]
        AccPeak.x= TimeDomainData.AccPeak.AXIS_X;
 80131d4:	ed8d 0a0c 	vstr	s0, [sp, #48]	; 0x30
        AccPeak.y= TimeDomainData.AccPeak.AXIS_Y;
 80131d8:	edcd 0a0d 	vstr	s1, [sp, #52]	; 0x34
        AccPeak.z= TimeDomainData.AccPeak.AXIS_Z;
 80131dc:	ed8d 1a0e 	vstr	s2, [sp, #56]	; 0x38
        SpeedRms.x= TimeDomainData.SpeedRms.AXIS_X;
 80131e0:	edcd 1a0f 	vstr	s3, [sp, #60]	; 0x3c
        SpeedRms.y= TimeDomainData.SpeedRms.AXIS_Y;
 80131e4:	ed8d 2a10 	vstr	s4, [sp, #64]	; 0x40
        SpeedRms.z= TimeDomainData.SpeedRms.AXIS_Z;
 80131e8:	edcd 2a11 	vstr	s5, [sp, #68]	; 0x44
        BLE_TimeDomainUpdate(AccPeak, SpeedRms);
 80131ec:	f7fc f80e 	bl	800f20c <BLE_TimeDomainUpdate>
        PREDMNT1_PRINTF("Sending FFT Amplitude to ST BLE Sensor app\r\n");
 80131f0:	4866      	ldr	r0, [pc, #408]	; (801338c <MotionSP_MainManager+0x54c>)
 80131f2:	f007 f9df 	bl	801a5b4 <puts>
        SendingFFT= 1;
 80131f6:	2301      	movs	r3, #1
 80131f8:	7323      	strb	r3, [r4, #12]
        CountSendData= 0;
 80131fa:	2300      	movs	r3, #0
 80131fc:	83a3      	strh	r3, [r4, #28]
      if( (FFT_Alarm) &&
 80131fe:	6863      	ldr	r3, [r4, #4]
 8013200:	2b00      	cmp	r3, #0
 8013202:	f000 814f 	beq.w	80134a4 <MotionSP_MainManager+0x664>
 8013206:	2f00      	cmp	r7, #0
 8013208:	f000 814c 	beq.w	80134a4 <MotionSP_MainManager+0x664>
                                  MotionSP_Parameters.subrange_num,
 801320c:	f8df 8154 	ldr.w	r8, [pc, #340]	; 8013364 <MotionSP_MainManager+0x524>
        MotionSP_FreqDomainAlarm (&SRAmplitude,
 8013210:	4d5f      	ldr	r5, [pc, #380]	; (8013390 <MotionSP_MainManager+0x550>)
 8013212:	4b60      	ldr	r3, [pc, #384]	; (8013394 <MotionSP_MainManager+0x554>)
 8013214:	4a60      	ldr	r2, [pc, #384]	; (8013398 <MotionSP_MainManager+0x558>)
 8013216:	4961      	ldr	r1, [pc, #388]	; (801339c <MotionSP_MainManager+0x55c>)
  AlarmSpeedStatus.STATUS_AXIS_X= (BLE_Manager_FFTAlarmSpeedStatusAlarmType_t)sTdAlarm.RMS_STATUS_AXIS_X;
 8013218:	4f57      	ldr	r7, [pc, #348]	; (8013378 <MotionSP_MainManager+0x538>)
        MotionSP_FreqDomainAlarm (&SRAmplitude,
 801321a:	9501      	str	r5, [sp, #4]
 801321c:	9300      	str	r3, [sp, #0]
 801321e:	6812      	ldr	r2, [r2, #0]
 8013220:	6809      	ldr	r1, [r1, #0]
 8013222:	f898 300c 	ldrb.w	r3, [r8, #12]
 8013226:	485e      	ldr	r0, [pc, #376]	; (80133a0 <MotionSP_MainManager+0x560>)
  SpeedRmsValue.x= sTimeDomainVal.SpeedRms.AXIS_X;
 8013228:	4e52      	ldr	r6, [pc, #328]	; (8013374 <MotionSP_MainManager+0x534>)
        MotionSP_FreqDomainAlarm (&SRAmplitude,
 801322a:	f7ff fd01 	bl	8012c30 <MotionSP_FreqDomainAlarm>
  AlarmSpeedStatus.STATUS_AXIS_X= (BLE_Manager_FFTAlarmSpeedStatusAlarmType_t)sTdAlarm.RMS_STATUS_AXIS_X;
 801322e:	783b      	ldrb	r3, [r7, #0]
 8013230:	f88d 300c 	strb.w	r3, [sp, #12]
  AlarmSpeedStatus.STATUS_AXIS_Y= (BLE_Manager_FFTAlarmSpeedStatusAlarmType_t)sTdAlarm.RMS_STATUS_AXIS_Y;
 8013234:	787b      	ldrb	r3, [r7, #1]
 8013236:	f88d 300d 	strb.w	r3, [sp, #13]
  AlarmSpeedStatus.STATUS_AXIS_Z= (BLE_Manager_FFTAlarmSpeedStatusAlarmType_t)sTdAlarm.RMS_STATUS_AXIS_Z;
 801323a:	78bb      	ldrb	r3, [r7, #2]
 801323c:	f88d 300e 	strb.w	r3, [sp, #14]
  SpeedRmsValue.x= sTimeDomainVal.SpeedRms.AXIS_X;
 8013240:	69b3      	ldr	r3, [r6, #24]
 8013242:	9306      	str	r3, [sp, #24]
  SpeedRmsValue.y= sTimeDomainVal.SpeedRms.AXIS_Y;
 8013244:	69f3      	ldr	r3, [r6, #28]
 8013246:	9307      	str	r3, [sp, #28]
  PREDMNT1_PRINTF("Sending Speed RMS value and status to ST BLE Sensor app\r\n");
 8013248:	4856      	ldr	r0, [pc, #344]	; (80133a4 <MotionSP_MainManager+0x564>)
  SpeedRmsValue.z= sTimeDomainVal.SpeedRms.AXIS_Z;
 801324a:	6a33      	ldr	r3, [r6, #32]
 801324c:	9308      	str	r3, [sp, #32]
  PREDMNT1_PRINTF("Sending Speed RMS value and status to ST BLE Sensor app\r\n");
 801324e:	f007 f9b1 	bl	801a5b4 <puts>
  BLE_FFTAlarmSpeedStatusUpdate(AlarmSpeedStatus, SpeedRmsValue);
 8013252:	ed9d 0a06 	vldr	s0, [sp, #24]
 8013256:	eddd 0a07 	vldr	s1, [sp, #28]
 801325a:	ed9d 1a08 	vldr	s2, [sp, #32]
 801325e:	9803      	ldr	r0, [sp, #12]
 8013260:	f7f9 febc 	bl	800cfdc <BLE_FFTAlarmSpeedStatusUpdate>
  AlarmAccPeakStatus.STATUS_AXIS_X= (BLE_Manager_FFTAlarmAccPeakStatusAlarmType_t)sTdAlarm.PK_STATUS_AXIS_X;
 8013264:	78fb      	ldrb	r3, [r7, #3]
 8013266:	f88d 3010 	strb.w	r3, [sp, #16]
  AlarmAccPeakStatus.STATUS_AXIS_Y= (BLE_Manager_FFTAlarmAccPeakStatusAlarmType_t)sTdAlarm.PK_STATUS_AXIS_Y;
 801326a:	793b      	ldrb	r3, [r7, #4]
 801326c:	f88d 3011 	strb.w	r3, [sp, #17]
  AlarmAccPeakStatus.STATUS_AXIS_Z= (BLE_Manager_FFTAlarmAccPeakStatusAlarmType_t)sTdAlarm.PK_STATUS_AXIS_Z;
 8013270:	797b      	ldrb	r3, [r7, #5]
 8013272:	f88d 3012 	strb.w	r3, [sp, #18]
  AccPeak.x= sTimeDomainVal.AccPeak.AXIS_X;
 8013276:	6833      	ldr	r3, [r6, #0]
 8013278:	9309      	str	r3, [sp, #36]	; 0x24
  AccPeak.y= sTimeDomainVal.AccPeak.AXIS_Y;
 801327a:	6873      	ldr	r3, [r6, #4]
 801327c:	930a      	str	r3, [sp, #40]	; 0x28
  PREDMNT1_PRINTF("Sending Acc Peak value and status to ST BLE Sensor app\r\n");
 801327e:	484a      	ldr	r0, [pc, #296]	; (80133a8 <MotionSP_MainManager+0x568>)
  AccPeak.z= sTimeDomainVal.AccPeak.AXIS_Z;
 8013280:	68b3      	ldr	r3, [r6, #8]
 8013282:	930b      	str	r3, [sp, #44]	; 0x2c
  PREDMNT1_PRINTF("Sending Acc Peak value and status to ST BLE Sensor app\r\n");
 8013284:	f007 f996 	bl	801a5b4 <puts>
  BLE_FFTAlarmAccPeakStatusUpdate(AlarmAccPeakStatus, AccPeak);
 8013288:	ed9d 0a09 	vldr	s0, [sp, #36]	; 0x24
 801328c:	eddd 0a0a 	vldr	s1, [sp, #40]	; 0x28
 8013290:	ed9d 1a0b 	vldr	s2, [sp, #44]	; 0x2c
 8013294:	9804      	ldr	r0, [sp, #16]
 8013296:	f7f9 fdf1 	bl	800ce7c <BLE_FFTAlarmAccPeakStatusUpdate>
  Alarm_Type_t TempAlarm_Z= GOOD;
 801329a:	2200      	movs	r2, #0
  for(int i=0; i<MotionSP_Parameters.subrange_num; i++)
 801329c:	f8b8 600c 	ldrh.w	r6, [r8, #12]
 80132a0:	462b      	mov	r3, r5
  Alarm_Type_t TempAlarm_Y= GOOD;
 80132a2:	4611      	mov	r1, r2
  for(int i=0; i<MotionSP_Parameters.subrange_num; i++)
 80132a4:	4610      	mov	r0, r2
 80132a6:	42b0      	cmp	r0, r6
 80132a8:	f2c0 80dd 	blt.w	8013466 <MotionSP_MainManager+0x626>
  SendMaxValue.x= AccMagResults.Max.X.value;
 80132ac:	4b34      	ldr	r3, [pc, #208]	; (8013380 <MotionSP_MainManager+0x540>)
  AlarmSugrangeStatus.STATUS_AXIS_Z = (BLE_Manager_FFTAlarmSubrangeStatusAlarmType_t)TempAlarm_Z;
 80132ae:	f88d 2016 	strb.w	r2, [sp, #22]
  SendMaxValue.x= AccMagResults.Max.X.value;
 80132b2:	695a      	ldr	r2, [r3, #20]
 80132b4:	920c      	str	r2, [sp, #48]	; 0x30
  SendMaxValue.y= AccMagResults.Max.Y.value;
 80132b6:	69da      	ldr	r2, [r3, #28]
 80132b8:	920d      	str	r2, [sp, #52]	; 0x34
  SendMaxValue.z= AccMagResults.Max.Z.value;
 80132ba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80132bc:	920e      	str	r2, [sp, #56]	; 0x38
  BinFreqStep = (AcceleroODR.Frequency /2 ) / AccMagResults.MagSize;
 80132be:	4a27      	ldr	r2, [pc, #156]	; (801335c <MotionSP_MainManager+0x51c>)
  PREDMNT1_PRINTF("Sending the frequency domain threshold status for max Subrange value to ST BLE Sensor app\r\n");
 80132c0:	483a      	ldr	r0, [pc, #232]	; (80133ac <MotionSP_MainManager+0x56c>)
  BinFreqStep = (AcceleroODR.Frequency /2 ) / AccMagResults.MagSize;
 80132c2:	ed92 7a00 	vldr	s14, [r2]
 80132c6:	881a      	ldrh	r2, [r3, #0]
  AlarmSugrangeStatus.STATUS_AXIS_X = (BLE_Manager_FFTAlarmSubrangeStatusAlarmType_t)TempAlarm_X;
 80132c8:	f88d 9014 	strb.w	r9, [sp, #20]
  BinFreqStep = (AcceleroODR.Frequency /2 ) / AccMagResults.MagSize;
 80132cc:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80132d0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80132d4:	ee07 2a90 	vmov	s15, r2
 80132d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  AlarmSugrangeStatus.STATUS_AXIS_Y = (BLE_Manager_FFTAlarmSubrangeStatusAlarmType_t)TempAlarm_Y;
 80132dc:	f88d 1015 	strb.w	r1, [sp, #21]
  BinFreqStep = (AcceleroODR.Frequency /2 ) / AccMagResults.MagSize;
 80132e0:	eec7 6a27 	vdiv.f32	s13, s14, s15
  SendFreqMaxValue.x= AccMagResults.Max.X.loc * BinFreqStep;
 80132e4:	edd3 7a06 	vldr	s15, [r3, #24]
 80132e8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
  SendFreqMaxValue.y= AccMagResults.Max.Y.loc * BinFreqStep;
 80132ec:	edd3 7a08 	vldr	s15, [r3, #32]
  SendFreqMaxValue.x= AccMagResults.Max.X.loc * BinFreqStep;
 80132f0:	ee27 7a26 	vmul.f32	s14, s14, s13
 80132f4:	ed8d 7a0f 	vstr	s14, [sp, #60]	; 0x3c
  SendFreqMaxValue.y= AccMagResults.Max.Y.loc * BinFreqStep;
 80132f8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
  SendFreqMaxValue.z= AccMagResults.Max.Z.loc * BinFreqStep;
 80132fc:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8013300:	eef8 7a67 	vcvt.f32.u32	s15, s15
  SendFreqMaxValue.y= AccMagResults.Max.Y.loc * BinFreqStep;
 8013304:	ee27 7a26 	vmul.f32	s14, s14, s13
  SendFreqMaxValue.z= AccMagResults.Max.Z.loc * BinFreqStep;
 8013308:	ee67 7aa6 	vmul.f32	s15, s15, s13
  SendFreqMaxValue.y= AccMagResults.Max.Y.loc * BinFreqStep;
 801330c:	ed8d 7a10 	vstr	s14, [sp, #64]	; 0x40
  SendFreqMaxValue.z= AccMagResults.Max.Z.loc * BinFreqStep;
 8013310:	edcd 7a11 	vstr	s15, [sp, #68]	; 0x44
  PREDMNT1_PRINTF("Sending the frequency domain threshold status for max Subrange value to ST BLE Sensor app\r\n");
 8013314:	f007 f94e 	bl	801a5b4 <puts>
  BLE_FFTAlarmSubrangeStatusUpdate(AlarmSugrangeStatus, SendMaxValue, SendFreqMaxValue);
 8013318:	eddd 1a0f 	vldr	s3, [sp, #60]	; 0x3c
 801331c:	ed9d 2a10 	vldr	s4, [sp, #64]	; 0x40
 8013320:	eddd 2a11 	vldr	s5, [sp, #68]	; 0x44
 8013324:	ed9d 0a0c 	vldr	s0, [sp, #48]	; 0x30
 8013328:	eddd 0a0d 	vldr	s1, [sp, #52]	; 0x34
 801332c:	ed9d 1a0e 	vldr	s2, [sp, #56]	; 0x38
 8013330:	9805      	ldr	r0, [sp, #20]
 8013332:	f7f9 ff03 	bl	800d13c <BLE_FFTAlarmSubrangeStatusUpdate>
        Reset= 1;
 8013336:	2301      	movs	r3, #1
 8013338:	77a3      	strb	r3, [r4, #30]
      if ((BSP_Error = MotionSP_VibrationAnalysisVariableInit()) != BSP_ERROR_NONE)
 801333a:	f7ff fba5 	bl	8012a88 <MotionSP_VibrationAnalysisVariableInit>
 801333e:	4605      	mov	r5, r0
 8013340:	2800      	cmp	r0, #0
 8013342:	f47f ad91 	bne.w	8012e68 <MotionSP_MainManager+0x28>
      enable_FIFO();
 8013346:	f7ff fced 	bl	8012d24 <enable_FIFO>
      Reset= 0;
 801334a:	77a5      	strb	r5, [r4, #30]
 801334c:	e58c      	b.n	8012e68 <MotionSP_MainManager+0x28>
  uint8_t FFT_avg = 0;
 801334e:	464f      	mov	r7, r9
 8013350:	e6d5      	b.n	80130fe <MotionSP_MainManager+0x2be>
 8013352:	464f      	mov	r7, r9
 8013354:	e6e8      	b.n	8013128 <MotionSP_MainManager+0x2e8>
 8013356:	bf00      	nop
 8013358:	2000ab44 	.word	0x2000ab44
 801335c:	2000b1fc 	.word	0x2000b1fc
 8013360:	2000aec0 	.word	0x2000aec0
 8013364:	2000ae78 	.word	0x2000ae78
 8013368:	2000b664 	.word	0x2000b664
 801336c:	2000b248 	.word	0x2000b248
 8013370:	2000bc78 	.word	0x2000bc78
 8013374:	2000b20c 	.word	0x2000b20c
 8013378:	2000b568 	.word	0x2000b568
 801337c:	20009b40 	.word	0x20009b40
 8013380:	2000ae8c 	.word	0x2000ae8c
 8013384:	2000b630 	.word	0x2000b630
 8013388:	08022fe3 	.word	0x08022fe3
 801338c:	0802300f 	.word	0x0802300f
 8013390:	2000b56e 	.word	0x2000b56e
 8013394:	2000b978 	.word	0x2000b978
 8013398:	2000b564 	.word	0x2000b564
 801339c:	2000b560 	.word	0x2000b560
 80133a0:	2000ab60 	.word	0x2000ab60
 80133a4:	0802303b 	.word	0x0802303b
 80133a8:	08023074 	.word	0x08023074
 80133ac:	080230ac 	.word	0x080230ac
 80133b0:	200003f4 	.word	0x200003f4
    STORE_LE_32(&TotalBuffToSending[BuffPos], *(uint32_t *)&(AccMagResults.Array.X[i]));
 80133b4:	68a9      	ldr	r1, [r5, #8]
 80133b6:	6832      	ldr	r2, [r6, #0]
 80133b8:	1fd8      	subs	r0, r3, #7
 80133ba:	5809      	ldr	r1, [r1, r0]
 80133bc:	54d1      	strb	r1, [r2, r3]
 80133be:	68a9      	ldr	r1, [r5, #8]
 80133c0:	6832      	ldr	r2, [r6, #0]
 80133c2:	5809      	ldr	r1, [r1, r0]
 80133c4:	441a      	add	r2, r3
 80133c6:	0a09      	lsrs	r1, r1, #8
 80133c8:	7051      	strb	r1, [r2, #1]
 80133ca:	68a9      	ldr	r1, [r5, #8]
 80133cc:	6832      	ldr	r2, [r6, #0]
 80133ce:	5809      	ldr	r1, [r1, r0]
 80133d0:	441a      	add	r2, r3
 80133d2:	0c09      	lsrs	r1, r1, #16
 80133d4:	7091      	strb	r1, [r2, #2]
 80133d6:	68a9      	ldr	r1, [r5, #8]
 80133d8:	6832      	ldr	r2, [r6, #0]
 80133da:	5809      	ldr	r1, [r1, r0]
 80133dc:	441a      	add	r2, r3
 80133de:	0e09      	lsrs	r1, r1, #24
 80133e0:	70d1      	strb	r1, [r2, #3]
    BuffPos += 4;
 80133e2:	3304      	adds	r3, #4
  for(uint16_t i=0; i<ActualMagSize; i++)
 80133e4:	e6d5      	b.n	8013192 <MotionSP_MainManager+0x352>
    STORE_LE_32(&TotalBuffToSending[BuffPos], *(uint32_t *)&(AccMagResults.Array.Y[i]));
 80133e6:	68e8      	ldr	r0, [r5, #12]
 80133e8:	f8dc 1000 	ldr.w	r1, [ip]
 80133ec:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 80133f0:	f801 000e 	strb.w	r0, [r1, lr]
 80133f4:	68e8      	ldr	r0, [r5, #12]
 80133f6:	f8dc 1000 	ldr.w	r1, [ip]
 80133fa:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 80133fe:	4471      	add	r1, lr
 8013400:	0a00      	lsrs	r0, r0, #8
 8013402:	7048      	strb	r0, [r1, #1]
 8013404:	68e8      	ldr	r0, [r5, #12]
 8013406:	f8dc 1000 	ldr.w	r1, [ip]
 801340a:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 801340e:	4471      	add	r1, lr
 8013410:	0c00      	lsrs	r0, r0, #16
 8013412:	7088      	strb	r0, [r1, #2]
 8013414:	68e8      	ldr	r0, [r5, #12]
 8013416:	f8dc 1000 	ldr.w	r1, [ip]
 801341a:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 801341e:	4471      	add	r1, lr
 8013420:	0e00      	lsrs	r0, r0, #24
 8013422:	70c8      	strb	r0, [r1, #3]
    BuffPos += 4;
 8013424:	f10e 0e04 	add.w	lr, lr, #4
  for(uint16_t i=0; i<ActualMagSize; i++)
 8013428:	3201      	adds	r2, #1
 801342a:	e6b9      	b.n	80131a0 <MotionSP_MainManager+0x360>
    STORE_LE_32(&TotalBuffToSending[BuffPos], *(uint32_t *)&(AccMagResults.Array.Z[i]));
 801342c:	6929      	ldr	r1, [r5, #16]
 801342e:	6832      	ldr	r2, [r6, #0]
 8013430:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8013434:	54d1      	strb	r1, [r2, r3]
 8013436:	6929      	ldr	r1, [r5, #16]
 8013438:	6832      	ldr	r2, [r6, #0]
 801343a:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 801343e:	441a      	add	r2, r3
 8013440:	0a09      	lsrs	r1, r1, #8
 8013442:	7051      	strb	r1, [r2, #1]
 8013444:	6929      	ldr	r1, [r5, #16]
 8013446:	6832      	ldr	r2, [r6, #0]
 8013448:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 801344c:	441a      	add	r2, r3
 801344e:	0c09      	lsrs	r1, r1, #16
 8013450:	7091      	strb	r1, [r2, #2]
 8013452:	6929      	ldr	r1, [r5, #16]
 8013454:	6832      	ldr	r2, [r6, #0]
 8013456:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 801345a:	441a      	add	r2, r3
 801345c:	0e09      	lsrs	r1, r1, #24
 801345e:	70d1      	strb	r1, [r2, #3]
    BuffPos += 4;
 8013460:	3304      	adds	r3, #4
  for(uint16_t i=0; i<ActualMagSize; i++)
 8013462:	3001      	adds	r0, #1
 8013464:	e6a2      	b.n	80131ac <MotionSP_MainManager+0x36c>
    TempAlarm_X= ALARM_MAX(TempAlarm_X, THR_Fft_Alarms.STATUS_AXIS_X[i]);
 8013466:	f813 5b01 	ldrb.w	r5, [r3], #1
 801346a:	45a9      	cmp	r9, r5
 801346c:	bf38      	it	cc
 801346e:	46a9      	movcc	r9, r5
    TempAlarm_Y= ALARM_MAX(TempAlarm_Y, THR_Fft_Alarms.STATUS_AXIS_Y[i]);
 8013470:	f893 503f 	ldrb.w	r5, [r3, #63]	; 0x3f
 8013474:	42a9      	cmp	r1, r5
 8013476:	bf38      	it	cc
 8013478:	4629      	movcc	r1, r5
    TempAlarm_Z= ALARM_MAX(TempAlarm_Z, THR_Fft_Alarms.STATUS_AXIS_Z[i]);
 801347a:	f893 507f 	ldrb.w	r5, [r3, #127]	; 0x7f
 801347e:	42aa      	cmp	r2, r5
 8013480:	bf38      	it	cc
 8013482:	462a      	movcc	r2, r5
  for(int i=0; i<MotionSP_Parameters.subrange_num; i++)
 8013484:	3001      	adds	r0, #1
 8013486:	e70e      	b.n	80132a6 <MotionSP_MainManager+0x466>
      BLE_FFTAmplitudeUpdate(TotalBuffToSending, AccMagResults.MagSize, &SendingFFT, &CountSendData);
 8013488:	4909      	ldr	r1, [pc, #36]	; (80134b0 <MotionSP_MainManager+0x670>)
 801348a:	480a      	ldr	r0, [pc, #40]	; (80134b4 <MotionSP_MainManager+0x674>)
 801348c:	8809      	ldrh	r1, [r1, #0]
 801348e:	6800      	ldr	r0, [r0, #0]
 8013490:	f104 031c 	add.w	r3, r4, #28
 8013494:	f104 020c 	add.w	r2, r4, #12
 8013498:	f7f9 ff3c 	bl	800d314 <BLE_FFTAmplitudeUpdate>
      if(!SendingFFT)
 801349c:	7b23      	ldrb	r3, [r4, #12]
 801349e:	2b00      	cmp	r3, #0
 80134a0:	f43f af49 	beq.w	8013336 <MotionSP_MainManager+0x4f6>
    if(Reset)
 80134a4:	7fa3      	ldrb	r3, [r4, #30]
 80134a6:	2b00      	cmp	r3, #0
 80134a8:	f43f acdd 	beq.w	8012e66 <MotionSP_MainManager+0x26>
 80134ac:	e745      	b.n	801333a <MotionSP_MainManager+0x4fa>
 80134ae:	bf00      	nop
 80134b0:	2000ae8c 	.word	0x2000ae8c
 80134b4:	2000b630 	.word	0x2000b630

080134b8 <CheckBootLoaderCompliance>:
 * @brief Function for Testing the BootLoader Compliance
 * @param None
 * @retval int8_t Return value for checking purpouse (0/-1 == Ok/Error)
 */
int8_t CheckBootLoaderCompliance(void)
{ 
 80134b8:	b538      	push	{r3, r4, r5, lr}
  OTA_PRINTF("Testing BootLoaderCompliance:\r\n");
  OTA_PRINTF("\tVersion  %ld.%ld.%ld\r\n",
 80134ba:	4d1e      	ldr	r5, [pc, #120]	; (8013534 <CheckBootLoaderCompliance+0x7c>)
  OTA_PRINTF("Testing BootLoaderCompliance:\r\n");
 80134bc:	481e      	ldr	r0, [pc, #120]	; (8013538 <CheckBootLoaderCompliance+0x80>)
 80134be:	f007 f879 	bl	801a5b4 <puts>
  OTA_PRINTF("\tVersion  %ld.%ld.%ld\r\n",
 80134c2:	6829      	ldr	r1, [r5, #0]
 80134c4:	481d      	ldr	r0, [pc, #116]	; (801353c <CheckBootLoaderCompliance+0x84>)
 80134c6:	b2cb      	uxtb	r3, r1
 80134c8:	f3c1 2207 	ubfx	r2, r1, #8, #8
 80134cc:	0c09      	lsrs	r1, r1, #16
 80134ce:	f006 ffeb 	bl	801a4a8 <iprintf>
              BootLoaderFeatures->Version>>16     ,
             (BootLoaderFeatures->Version>>8)&0xFF,
              BootLoaderFeatures->Version    &0xFF);
  
  if((( BootLoaderFeatures->Version>>16      )!=BL_VERSION_MAJOR) |
 80134d2:	6828      	ldr	r0, [r5, #0]
 80134d4:	0c02      	lsrs	r2, r0, #16
     (((BootLoaderFeatures->Version>>8 )&0xFF)!=BL_VERSION_MINOR) |
      ((BootLoaderFeatures->Version     &0xFF)!=BL_VERSION_PATCH)) {
 80134d6:	b2c3      	uxtb	r3, r0
  if((( BootLoaderFeatures->Version>>16      )!=BL_VERSION_MAJOR) |
 80134d8:	2b00      	cmp	r3, #0
 80134da:	bf08      	it	eq
 80134dc:	2a01      	cmpeq	r2, #1
 80134de:	d105      	bne.n	80134ec <CheckBootLoaderCompliance+0x34>
     (((BootLoaderFeatures->Version>>8 )&0xFF)!=BL_VERSION_MINOR) |
 80134e0:	f3c0 2007 	ubfx	r0, r0, #8, #8
  if((( BootLoaderFeatures->Version>>16      )!=BL_VERSION_MAJOR) |
 80134e4:	1ec4      	subs	r4, r0, #3
 80134e6:	bf18      	it	ne
 80134e8:	2401      	movne	r4, #1
 80134ea:	b124      	cbz	r4, 80134f6 <CheckBootLoaderCompliance+0x3e>
    OTA_PRINTF("\tBL Version  Ko\r\n");
 80134ec:	4814      	ldr	r0, [pc, #80]	; (8013540 <CheckBootLoaderCompliance+0x88>)
 80134ee:	f007 f861 	bl	801a5b4 <puts>
    return 0;
 80134f2:	2000      	movs	r0, #0
    OTA_PRINTF("\tOTAStartAdd KO\r\n");
    return 0;
  }
  
  return 1;
}
 80134f4:	bd38      	pop	{r3, r4, r5, pc}
    OTA_PRINTF("\tBL Version  Ok\r\n");
 80134f6:	4813      	ldr	r0, [pc, #76]	; (8013544 <CheckBootLoaderCompliance+0x8c>)
 80134f8:	f007 f85c 	bl	801a5b4 <puts>
  if(BootLoaderFeatures->MagicNum==OTA_MAGIC_NUM) {
 80134fc:	686a      	ldr	r2, [r5, #4]
 80134fe:	4b12      	ldr	r3, [pc, #72]	; (8013548 <CheckBootLoaderCompliance+0x90>)
 8013500:	429a      	cmp	r2, r3
 8013502:	d10c      	bne.n	801351e <CheckBootLoaderCompliance+0x66>
    OTA_PRINTF("\tMagicNum    OK\r\n");
 8013504:	4811      	ldr	r0, [pc, #68]	; (801354c <CheckBootLoaderCompliance+0x94>)
 8013506:	f007 f855 	bl	801a5b4 <puts>
  OTA_PRINTF("\tMaxSize =%lx\r\n",BootLoaderFeatures->OTAMaxSize);
 801350a:	68e9      	ldr	r1, [r5, #12]
 801350c:	4810      	ldr	r0, [pc, #64]	; (8013550 <CheckBootLoaderCompliance+0x98>)
 801350e:	f006 ffcb 	bl	801a4a8 <iprintf>
  if(BootLoaderFeatures->OTAStartAdd==(OTA_ADDRESS_START-8)) {
 8013512:	68aa      	ldr	r2, [r5, #8]
 8013514:	4b0f      	ldr	r3, [pc, #60]	; (8013554 <CheckBootLoaderCompliance+0x9c>)
 8013516:	429a      	cmp	r2, r3
 8013518:	d006      	beq.n	8013528 <CheckBootLoaderCompliance+0x70>
    OTA_PRINTF("\tOTAStartAdd KO\r\n");
 801351a:	480f      	ldr	r0, [pc, #60]	; (8013558 <CheckBootLoaderCompliance+0xa0>)
 801351c:	e000      	b.n	8013520 <CheckBootLoaderCompliance+0x68>
    OTA_PRINTF("\tMagicNum    KO\r\n");
 801351e:	480f      	ldr	r0, [pc, #60]	; (801355c <CheckBootLoaderCompliance+0xa4>)
    OTA_PRINTF("\tOTAStartAdd KO\r\n");
 8013520:	f007 f848 	bl	801a5b4 <puts>
    return 0;
 8013524:	4620      	mov	r0, r4
 8013526:	e7e5      	b.n	80134f4 <CheckBootLoaderCompliance+0x3c>
    OTA_PRINTF("\tOTAStartAdd OK\r\n");
 8013528:	480d      	ldr	r0, [pc, #52]	; (8013560 <CheckBootLoaderCompliance+0xa8>)
 801352a:	f007 f843 	bl	801a5b4 <puts>
  return 1;
 801352e:	2001      	movs	r0, #1
 8013530:	e7e0      	b.n	80134f4 <CheckBootLoaderCompliance+0x3c>
 8013532:	bf00      	nop
 8013534:	08003f00 	.word	0x08003f00
 8013538:	08023107 	.word	0x08023107
 801353c:	08023126 	.word	0x08023126
 8013540:	0802313e 	.word	0x0802313e
 8013544:	0802314f 	.word	0x0802314f
 8013548:	deadbeef 	.word	0xdeadbeef
 801354c:	08023160 	.word	0x08023160
 8013550:	08023171 	.word	0x08023171
 8013554:	08040000 	.word	0x08040000
 8013558:	080231a3 	.word	0x080231a3
 801355c:	08023181 	.word	0x08023181
 8013560:	08023192 	.word	0x08023192
 8013564:	00000000 	.word	0x00000000

08013568 <UpdateFWBlueMS>:
 * @param int32_t data_length length of the data
 * @param uint8_t WriteMagicNum 1/0 for writing or not the magic number
 * @retval int8_t Return value for checking purpouse (1/-1 == Ok/Error)
 */
int8_t UpdateFWBlueMS(uint32_t *SizeOfUpdate,uint8_t * att_data, int32_t data_length,uint8_t WriteMagicNum)
{
 8013568:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801356c:	4616      	mov	r6, r2
  int8_t ReturnValue=0;
  /* Save the Packed received */

  if(data_length>(*SizeOfUpdate)){
 801356e:	6802      	ldr	r2, [r0, #0]
 8013570:	42b2      	cmp	r2, r6
{
 8013572:	4605      	mov	r5, r0
 8013574:	4688      	mov	r8, r1
 8013576:	461c      	mov	r4, r3
  if(data_length>(*SizeOfUpdate)){
 8013578:	d20b      	bcs.n	8013592 <UpdateFWBlueMS+0x2a>
    /* Too many bytes...Something wrong... necessity to send it again... */
    OTA_PRINTF("OTA something wrong data_length=%ld RemSizeOfUpdate=%ld....\r\nPlease Try again\r\n",data_length,(*SizeOfUpdate));
 801357a:	4837      	ldr	r0, [pc, #220]	; (8013658 <UpdateFWBlueMS+0xf0>)
 801357c:	4631      	mov	r1, r6
 801357e:	f006 ff93 	bl	801a4a8 <iprintf>
    ReturnValue = -1;
    /* Reset for Restarting again */
    *SizeOfUpdate=0;
 8013582:	2300      	movs	r3, #0
 8013584:	602b      	str	r3, [r5, #0]
    ReturnValue = -1;
 8013586:	f04f 34ff 	mov.w	r4, #4294967295
    /* Lock the Flash to disable the flash control register access (recommended
     to protect the FLASH memory against possible unwanted operation) *********/
    HAL_FLASH_Lock();
  }
  return ReturnValue;
}
 801358a:	4620      	mov	r0, r4
 801358c:	b003      	add	sp, #12
 801358e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    HAL_FLASH_Unlock();
 8013592:	f7f4 fb6b 	bl	8007c6c <HAL_FLASH_Unlock>
      if(HAL_FLASH_Program(TYPEPROGRAM_BYTE, Address,att_data[Counter])==HAL_OK) {
 8013596:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 8013670 <UpdateFWBlueMS+0x108>
    for(Counter=0;Counter<data_length;Counter++) {
 801359a:	2700      	movs	r7, #0
 801359c:	42b7      	cmp	r7, r6
 801359e:	db17      	blt.n	80135d0 <UpdateFWBlueMS+0x68>
    *SizeOfUpdate -= data_length;
 80135a0:	682a      	ldr	r2, [r5, #0]
 80135a2:	1b96      	subs	r6, r2, r6
 80135a4:	602e      	str	r6, [r5, #0]
    if(*SizeOfUpdate==0) {
 80135a6:	2e00      	cmp	r6, #0
 80135a8:	d14d      	bne.n	8013646 <UpdateFWBlueMS+0xde>
      if(WriteMagicNum) {
 80135aa:	2c00      	cmp	r4, #0
 80135ac:	d044      	beq.n	8013638 <UpdateFWBlueMS+0xd0>
        if(AspecteduwCRCValue) {
 80135ae:	4c2b      	ldr	r4, [pc, #172]	; (801365c <UpdateFWBlueMS+0xf4>)
 80135b0:	6823      	ldr	r3, [r4, #0]
 80135b2:	b393      	cbz	r3, 801361a <UpdateFWBlueMS+0xb2>
          CrcHandle.Instance = CRC;
 80135b4:	4b2a      	ldr	r3, [pc, #168]	; (8013660 <UpdateFWBlueMS+0xf8>)
 80135b6:	9300      	str	r3, [sp, #0]
          if(HAL_CRC_GetState(&CrcHandle) != HAL_CRC_STATE_RESET) {
 80135b8:	4668      	mov	r0, sp
 80135ba:	f7f4 f8bd 	bl	8007738 <HAL_CRC_GetState>
 80135be:	b110      	cbz	r0, 80135c6 <UpdateFWBlueMS+0x5e>
            HAL_CRC_DeInit(&CrcHandle);
 80135c0:	4668      	mov	r0, sp
 80135c2:	f7f4 f88b 	bl	80076dc <HAL_CRC_DeInit>
          if (HAL_CRC_Init(&CrcHandle) != HAL_OK) {
 80135c6:	4668      	mov	r0, sp
 80135c8:	f7f4 f878 	bl	80076bc <HAL_CRC_Init>
 80135cc:	b188      	cbz	r0, 80135f2 <UpdateFWBlueMS+0x8a>
            OTA_ERROR_FUNCTION();
 80135ce:	e7fe      	b.n	80135ce <UpdateFWBlueMS+0x66>
      if(HAL_FLASH_Program(TYPEPROGRAM_BYTE, Address,att_data[Counter])==HAL_OK) {
 80135d0:	f818 2007 	ldrb.w	r2, [r8, r7]
 80135d4:	f8d9 1000 	ldr.w	r1, [r9]
 80135d8:	2300      	movs	r3, #0
 80135da:	2000      	movs	r0, #0
 80135dc:	f7f4 fb8c 	bl	8007cf8 <HAL_FLASH_Program>
 80135e0:	b930      	cbnz	r0, 80135f0 <UpdateFWBlueMS+0x88>
       Address++;
 80135e2:	f8d9 3000 	ldr.w	r3, [r9]
 80135e6:	3301      	adds	r3, #1
 80135e8:	f8c9 3000 	str.w	r3, [r9]
    for(Counter=0;Counter<data_length;Counter++) {
 80135ec:	3701      	adds	r7, #1
 80135ee:	e7d5      	b.n	801359c <UpdateFWBlueMS+0x34>
        OTA_ERROR_FUNCTION();
 80135f0:	e7fe      	b.n	80135f0 <UpdateFWBlueMS+0x88>
            OTA_PRINTF("CRC  Initialized\n\r");
 80135f2:	481c      	ldr	r0, [pc, #112]	; (8013664 <UpdateFWBlueMS+0xfc>)
 80135f4:	f006 ff58 	bl	801a4a8 <iprintf>
          uwCRCValue = HAL_CRC_Calculate(&CrcHandle, (uint32_t *)OTA_ADDRESS_START, SizeOfUpdateBlueFW>>2);
 80135f8:	6862      	ldr	r2, [r4, #4]
 80135fa:	491b      	ldr	r1, [pc, #108]	; (8013668 <UpdateFWBlueMS+0x100>)
 80135fc:	0892      	lsrs	r2, r2, #2
 80135fe:	4668      	mov	r0, sp
 8013600:	f7f4 f885 	bl	800770e <HAL_CRC_Calculate>
          if(uwCRCValue==AspecteduwCRCValue) {
 8013604:	6822      	ldr	r2, [r4, #0]
 8013606:	4282      	cmp	r2, r0
          uwCRCValue = HAL_CRC_Calculate(&CrcHandle, (uint32_t *)OTA_ADDRESS_START, SizeOfUpdateBlueFW>>2);
 8013608:	4601      	mov	r1, r0
          if(uwCRCValue==AspecteduwCRCValue) {
 801360a:	d003      	beq.n	8013614 <UpdateFWBlueMS+0xac>
          if(AspecteduwCRCValue) {
 801360c:	b9ba      	cbnz	r2, 801363e <UpdateFWBlueMS+0xd6>
          ReturnValue=-1;
 801360e:	f04f 34ff 	mov.w	r4, #4294967295
 8013612:	e011      	b.n	8013638 <UpdateFWBlueMS+0xd0>
            OTA_PRINTF("OTA CRC-checked\r\n");
 8013614:	4815      	ldr	r0, [pc, #84]	; (801366c <UpdateFWBlueMS+0x104>)
 8013616:	f006 ffcd 	bl	801a5b4 <puts>
          Address = OTA_MAGIC_NUM_POS;
 801361a:	4b15      	ldr	r3, [pc, #84]	; (8013670 <UpdateFWBlueMS+0x108>)
 801361c:	4915      	ldr	r1, [pc, #84]	; (8013674 <UpdateFWBlueMS+0x10c>)
 801361e:	6019      	str	r1, [r3, #0]
          if(HAL_FLASH_Program(TYPEPROGRAM_WORD, Address,OTA_MAGIC_NUM)!=HAL_OK) {
 8013620:	2002      	movs	r0, #2
 8013622:	a30b      	add	r3, pc, #44	; (adr r3, 8013650 <UpdateFWBlueMS+0xe8>)
 8013624:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013628:	f7f4 fb66 	bl	8007cf8 <HAL_FLASH_Program>
 801362c:	b100      	cbz	r0, 8013630 <UpdateFWBlueMS+0xc8>
          OTA_ERROR_FUNCTION();
 801362e:	e7fe      	b.n	801362e <UpdateFWBlueMS+0xc6>
            OTA_PRINTF("OTA will be installed at next board reset\r\n");
 8013630:	4811      	ldr	r0, [pc, #68]	; (8013678 <UpdateFWBlueMS+0x110>)
 8013632:	f006 ffbf 	bl	801a5b4 <puts>
 8013636:	2401      	movs	r4, #1
    HAL_FLASH_Lock();
 8013638:	f7f4 fb2a 	bl	8007c90 <HAL_FLASH_Lock>
 801363c:	e7a5      	b.n	801358a <UpdateFWBlueMS+0x22>
            OTA_PRINTF("Wrong CRC! Computed=%lx  aspected=%lx ... Try again\r\n",uwCRCValue,AspecteduwCRCValue);
 801363e:	480f      	ldr	r0, [pc, #60]	; (801367c <UpdateFWBlueMS+0x114>)
 8013640:	f006 ff32 	bl	801a4a8 <iprintf>
 8013644:	e7e3      	b.n	801360e <UpdateFWBlueMS+0xa6>
  int8_t ReturnValue=0;
 8013646:	2400      	movs	r4, #0
 8013648:	e7f6      	b.n	8013638 <UpdateFWBlueMS+0xd0>
 801364a:	bf00      	nop
 801364c:	f3af 8000 	nop.w
 8013650:	deadbeef 	.word	0xdeadbeef
 8013654:	00000000 	.word	0x00000000
 8013658:	080231b4 	.word	0x080231b4
 801365c:	20009710 	.word	0x20009710
 8013660:	40023000 	.word	0x40023000
 8013664:	08023204 	.word	0x08023204
 8013668:	08040008 	.word	0x08040008
 801366c:	08023217 	.word	0x08023217
 8013670:	200003f8 	.word	0x200003f8
 8013674:	08040000 	.word	0x08040000
 8013678:	08023228 	.word	0x08023228
 801367c:	08023253 	.word	0x08023253

08013680 <StartUpdateFWBlueMS>:
 * @param uint32_t SizeOfUpdate  size of the firmware image [bytes]
 * @param uint32_t uwCRCValue aspected CRV value
 * @retval None
 */
void StartUpdateFWBlueMS(uint32_t SizeOfUpdate, uint32_t uwCRCValue)
{
 8013680:	b570      	push	{r4, r5, r6, lr}
 8013682:	b086      	sub	sp, #24
 8013684:	4604      	mov	r4, r0
  FLASH_EraseInitTypeDef EraseInitStruct;
  uint32_t SectorError = 0;
 8013686:	2600      	movs	r6, #0
  OTA_PRINTF("Start FLASH Erase\r\n");
 8013688:	4811      	ldr	r0, [pc, #68]	; (80136d0 <StartUpdateFWBlueMS+0x50>)
  uint32_t SectorError = 0;
 801368a:	9600      	str	r6, [sp, #0]
{
 801368c:	460d      	mov	r5, r1
  OTA_PRINTF("Start FLASH Erase\r\n");
 801368e:	f006 ff91 	bl	801a5b4 <puts>

  SizeOfUpdateBlueFW = SizeOfUpdate;
 8013692:	4b10      	ldr	r3, [pc, #64]	; (80136d4 <StartUpdateFWBlueMS+0x54>)
  if(SizeOfUpdate>(0x20000-8)) {
    /* We need 2 sectors of 128KB */
    EraseInitStruct.NbSectors = 2;
  } else {
    /* One sector of 128KB is enough */
    EraseInitStruct.NbSectors = 1;
 8013694:	4810      	ldr	r0, [pc, #64]	; (80136d8 <StartUpdateFWBlueMS+0x58>)
  EraseInitStruct.TypeErase = TYPEERASE_SECTORS;
 8013696:	9601      	str	r6, [sp, #4]
  AspecteduwCRCValue = uwCRCValue;
 8013698:	e9c3 5400 	strd	r5, r4, [r3]
  EraseInitStruct.VoltageRange = VOLTAGE_RANGE_3;
 801369c:	2302      	movs	r3, #2
 801369e:	9305      	str	r3, [sp, #20]
    EraseInitStruct.NbSectors = 1;
 80136a0:	4284      	cmp	r4, r0
 80136a2:	bf8c      	ite	hi
 80136a4:	2402      	movhi	r4, #2
 80136a6:	2401      	movls	r4, #1
  EraseInitStruct.Sector = FLASH_SECTOR_6;
 80136a8:	2306      	movs	r3, #6
 80136aa:	9303      	str	r3, [sp, #12]
  if(SizeOfUpdate>(0x20000-8)) {
 80136ac:	9404      	str	r4, [sp, #16]
  }

  /* Unlock the Flash to enable the flash control register access *************/
  HAL_FLASH_Unlock();
 80136ae:	f7f4 fadd 	bl	8007c6c <HAL_FLASH_Unlock>

  if(HAL_FLASHEx_Erase(&EraseInitStruct, &SectorError) != HAL_OK){
 80136b2:	4669      	mov	r1, sp
 80136b4:	a801      	add	r0, sp, #4
 80136b6:	f7f4 fbc9 	bl	8007e4c <HAL_FLASHEx_Erase>
 80136ba:	b100      	cbz	r0, 80136be <StartUpdateFWBlueMS+0x3e>
    /* Error occurred while sector erase. 
      User can add here some code to deal with this error. 
      SectorError will contain the faulty sector and then to know the code error on this sector,
      user can call function 'HAL_FLASH_GetError()'
      FLASH_ErrorTypeDef errorcode = HAL_FLASH_GetError(); */
    OTA_ERROR_FUNCTION();
 80136bc:	e7fe      	b.n	80136bc <StartUpdateFWBlueMS+0x3c>
  } else {    
    OTA_PRINTF("End FLASH Erase %ld Sectors of 128KB\r\n",EraseInitStruct.NbSectors);
 80136be:	9904      	ldr	r1, [sp, #16]
 80136c0:	4806      	ldr	r0, [pc, #24]	; (80136dc <StartUpdateFWBlueMS+0x5c>)
 80136c2:	f006 fef1 	bl	801a4a8 <iprintf>
  }

  /* Lock the Flash to disable the flash control register access (recommended
  to protect the FLASH memory against possible unwanted operation) *********/
  HAL_FLASH_Lock();
 80136c6:	f7f4 fae3 	bl	8007c90 <HAL_FLASH_Lock>
}
 80136ca:	b006      	add	sp, #24
 80136cc:	bd70      	pop	{r4, r5, r6, pc}
 80136ce:	bf00      	nop
 80136d0:	08023289 	.word	0x08023289
 80136d4:	20009710 	.word	0x20009710
 80136d8:	0001fff8 	.word	0x0001fff8
 80136dc:	0802329c 	.word	0x0802329c

080136e0 <Init_MEMS_Mics>:
/** @brief Initialize all the MEMS's Microphones
 * @param None
 * @retval None
 */
static void Init_MEMS_Mics(uint32_t AudioFreq, uint32_t AudioVolume)
{
 80136e0:	b570      	push	{r4, r5, r6, lr}
  CCA02M2_AUDIO_Init_t MicParams;
  
  /* Initialize microphone acquisition */  
  MicParams.BitsPerSample = 16;
  MicParams.ChannelsNbr = AUDIO_IN_CHANNELS;
 80136e2:	2210      	movs	r2, #16
{
 80136e4:	b086      	sub	sp, #24
  MicParams.ChannelsNbr = AUDIO_IN_CHANNELS;
 80136e6:	2302      	movs	r3, #2
 80136e8:	e9cd 2303 	strd	r2, r3, [sp, #12]
  MicParams.Device = AUDIO_IN_DIGITAL_MIC;
 80136ec:	23f0      	movs	r3, #240	; 0xf0
  MicParams.SampleRate = AudioFreq;
 80136ee:	e9cd 3001 	strd	r3, r0, [sp, #4]
  MicParams.Volume = AudioVolume;
 80136f2:	9105      	str	r1, [sp, #20]
{
 80136f4:	4606      	mov	r6, r0
 80136f6:	460c      	mov	r4, r1
  
  if( CCA02M2_AUDIO_IN_Init(CCA02M2_AUDIO_INSTANCE, &MicParams) != BSP_ERROR_NONE )
 80136f8:	2000      	movs	r0, #0
 80136fa:	a901      	add	r1, sp, #4
 80136fc:	f7f3 f952 	bl	80069a4 <CCA02M2_AUDIO_IN_Init>
 8013700:	4605      	mov	r5, r0
 8013702:	b118      	cbz	r0, 801370c <Init_MEMS_Mics+0x2c>
  {
    PREDMNT1_PRINTF("\nError Audio Init\r\n");
 8013704:	480b      	ldr	r0, [pc, #44]	; (8013734 <Init_MEMS_Mics+0x54>)
 8013706:	f006 ff55 	bl	801a5b4 <puts>
    
    while(1) {
 801370a:	e7fe      	b.n	801370a <Init_MEMS_Mics+0x2a>
      ;
    }
  }
  else
  {
    PREDMNT1_PRINTF("\nOK Audio Init\t(Audio Freq.= %ld)\r\n", AudioFreq);
 801370c:	4631      	mov	r1, r6
 801370e:	480a      	ldr	r0, [pc, #40]	; (8013738 <Init_MEMS_Mics+0x58>)
 8013710:	f006 feca 	bl	801a4a8 <iprintf>
  }
  
  /* Set the volume level */
  if( CCA02M2_AUDIO_IN_SetVolume(CCA02M2_AUDIO_INSTANCE, AudioVolume) != BSP_ERROR_NONE )
 8013714:	4621      	mov	r1, r4
 8013716:	4628      	mov	r0, r5
 8013718:	f7f3 fbc8 	bl	8006eac <CCA02M2_AUDIO_IN_SetVolume>
 801371c:	b118      	cbz	r0, 8013726 <Init_MEMS_Mics+0x46>
  {
    PREDMNT1_PRINTF("Error Audio Volume\r\n\n");
 801371e:	4807      	ldr	r0, [pc, #28]	; (801373c <Init_MEMS_Mics+0x5c>)
 8013720:	f006 ff48 	bl	801a5b4 <puts>
    
    while(1) {
 8013724:	e7fe      	b.n	8013724 <Init_MEMS_Mics+0x44>
      ;
    }
  }
  else
  {
    PREDMNT1_PRINTF("OK Audio Volume\t(Volume= %ld)\r\n", AudioVolume);
 8013726:	4621      	mov	r1, r4
 8013728:	4805      	ldr	r0, [pc, #20]	; (8013740 <Init_MEMS_Mics+0x60>)
 801372a:	f006 febd 	bl	801a4a8 <iprintf>
  }
}
 801372e:	b006      	add	sp, #24
 8013730:	bd70      	pop	{r4, r5, r6, pc}
 8013732:	bf00      	nop
 8013734:	080232c3 	.word	0x080232c3
 8013738:	080232d6 	.word	0x080232d6
 801373c:	080232fa 	.word	0x080232fa
 8013740:	0802330f 	.word	0x0802330f

08013744 <InitTargetPlatform>:
  * @brief  Initialize all the Target platform's Features
  * @param  None
  * @retval None
  */
void InitTargetPlatform(void)
{
 8013744:	b530      	push	{r4, r5, lr}
  #ifdef PREDMNT1_ENABLE_PRINTF
  /* UART Initialization */
  if(BSP_COM_Init(COM1) != BSP_ERROR_NONE) {
 8013746:	2000      	movs	r0, #0
{
 8013748:	b089      	sub	sp, #36	; 0x24
  if(BSP_COM_Init(COM1) != BSP_ERROR_NONE) {
 801374a:	f001 f9ed 	bl	8014b28 <BSP_COM_Init>
 801374e:	2800      	cmp	r0, #0
 8013750:	f000 80c5 	beq.w	80138de <InitTargetPlatform+0x19a>
    Error_Handler();
 8013754:	f000 fc63 	bl	801401e <Error_Handler>
    PREDMNT1_PRINTF("UART Initialized\r\n");
  }
  #endif /* PREDMNT1_ENABLE_PRINTF */
  
  /* Initialize button */
  BSP_PB_Init(BUTTON_KEY, BUTTON_MODE_EXTI);
 8013758:	2101      	movs	r1, #1
 801375a:	2000      	movs	r0, #0
 801375c:	f001 f97a 	bl	8014a54 <BSP_PB_Init>
  
  /* Initialize LED */
  BSP_LED_Init(LED2);
 8013760:	2000      	movs	r0, #0
 8013762:	f001 f93d 	bl	80149e0 <BSP_LED_Init>
          PREDMNT1_PACKAGENAME,
          CONFIG_NAME,
          PREDMNT1_VERSION_MAJOR,PREDMNT1_VERSION_MINOR,PREDMNT1_VERSION_PATCH);

  /* Reset all the Target's Features */
  memset(&TargetBoardFeatures, 0, sizeof(TargetFeatures_t));
 8013766:	4c65      	ldr	r4, [pc, #404]	; (80138fc <InitTargetPlatform+0x1b8>)
  PREDMNT1_PRINTF("\r\nSTMicroelectronics %s:\r\n"
 8013768:	4965      	ldr	r1, [pc, #404]	; (8013900 <InitTargetPlatform+0x1bc>)
 801376a:	4866      	ldr	r0, [pc, #408]	; (8013904 <InitTargetPlatform+0x1c0>)
 801376c:	2334      	movs	r3, #52	; 0x34
 801376e:	2230      	movs	r2, #48	; 0x30
 8013770:	e9cd 3200 	strd	r3, r2, [sp]
 8013774:	2332      	movs	r3, #50	; 0x32
 8013776:	4a64      	ldr	r2, [pc, #400]	; (8013908 <InitTargetPlatform+0x1c4>)
 8013778:	f006 fe96 	bl	801a4a8 <iprintf>
  memset(&TargetBoardFeatures, 0, sizeof(TargetFeatures_t));
 801377c:	2210      	movs	r2, #16
 801377e:	2100      	movs	r1, #0
 8013780:	4620      	mov	r0, r4
 8013782:	f006 f975 	bl	8019a70 <memset>
  M_INT2_O_GPIO_CLK_ENABLE();
 8013786:	2500      	movs	r5, #0
 8013788:	4b60      	ldr	r3, [pc, #384]	; (801390c <InitTargetPlatform+0x1c8>)
 801378a:	9502      	str	r5, [sp, #8]
 801378c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  HAL_GPIO_Init(M_INT2_O_GPIO_PORT, &GPIO_InitStruct);
 801378e:	4860      	ldr	r0, [pc, #384]	; (8013910 <InitTargetPlatform+0x1cc>)
  M_INT2_O_GPIO_CLK_ENABLE();
 8013790:	f042 0201 	orr.w	r2, r2, #1
 8013794:	631a      	str	r2, [r3, #48]	; 0x30
 8013796:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013798:	f003 0301 	and.w	r3, r3, #1
 801379c:	9302      	str	r3, [sp, #8]
 801379e:	9b02      	ldr	r3, [sp, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80137a0:	4b5c      	ldr	r3, [pc, #368]	; (8013914 <InitTargetPlatform+0x1d0>)
 80137a2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80137a6:	e9cd 1303 	strd	r1, r3, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80137aa:	2302      	movs	r3, #2
  HAL_GPIO_Init(M_INT2_O_GPIO_PORT, &GPIO_InitStruct);
 80137ac:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80137ae:	e9cd 5305 	strd	r5, r3, [sp, #20]
  HAL_GPIO_Init(M_INT2_O_GPIO_PORT, &GPIO_InitStruct);
 80137b2:	f7f4 fb99 	bl	8007ee8 <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(M_INT2_O_EXTI_IRQn, 0x03, 0x00);
 80137b6:	2103      	movs	r1, #3
 80137b8:	462a      	mov	r2, r5
 80137ba:	2028      	movs	r0, #40	; 0x28
 80137bc:	f7f3 ff02 	bl	80075c4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(M_INT2_O_EXTI_IRQn);
 80137c0:	2028      	movs	r0, #40	; 0x28
 80137c2:	f7f3 ff31 	bl	8007628 <HAL_NVIC_EnableIRQ>
  PREDMNT1_PRINTF("\nCode compiled for X-NUCLEO-IKS01A3 board\n\r");
 80137c6:	4854      	ldr	r0, [pc, #336]	; (8013918 <InitTargetPlatform+0x1d4>)
 80137c8:	f006 fe6e 	bl	801a4a8 <iprintf>
    PREDMNT1_PRINTF("\tISM330DLC DIL24 Present (I2C connection)\n\r");
 80137cc:	4853      	ldr	r0, [pc, #332]	; (801391c <InitTargetPlatform+0x1d8>)
 80137ce:	f006 fe6b 	bl	801a4a8 <iprintf>
  if(MOTION_SENSOR_Init(ACCELERO_INSTANCE, MOTION_ACCELERO | MOTION_GYRO)==BSP_ERROR_NONE)
 80137d2:	2103      	movs	r1, #3
 80137d4:	2001      	movs	r0, #1
 80137d6:	f001 fb5b 	bl	8014e90 <IKS01A3_MOTION_SENSOR_Init>
 80137da:	2800      	cmp	r0, #0
 80137dc:	f040 8086 	bne.w	80138ec <InitTargetPlatform+0x1a8>
    TargetBoardFeatures.AccSensorIsInit= 1;
 80137e0:	f240 1301 	movw	r3, #257	; 0x101
    PREDMNT1_PRINTF("\t\tOK Accelero Sensor\n\r\t\tOK Gyroscope Sensor\n\r");
 80137e4:	484e      	ldr	r0, [pc, #312]	; (8013920 <InitTargetPlatform+0x1dc>)
    TargetBoardFeatures.AccSensorIsInit= 1;
 80137e6:	80a3      	strh	r3, [r4, #4]
    PREDMNT1_PRINTF("\t\tError Accelero Sensor\n\r\t\tError Gyroscope Sensor\n\r");
 80137e8:	f006 fe5e 	bl	801a4a8 <iprintf>
  if(MOTION_SENSOR_Init(MAGNETO_INSTANCE, MOTION_MAGNETO)==BSP_ERROR_NONE)
 80137ec:	2104      	movs	r1, #4
 80137ee:	2000      	movs	r0, #0
 80137f0:	f001 fb4e 	bl	8014e90 <IKS01A3_MOTION_SENSOR_Init>
 80137f4:	2800      	cmp	r0, #0
 80137f6:	d17b      	bne.n	80138f0 <InitTargetPlatform+0x1ac>
    TargetBoardFeatures.MagSensorIsInit= 1;
 80137f8:	2301      	movs	r3, #1
    PREDMNT1_PRINTF("\tOK Magneto Sensor\n\r");
 80137fa:	484a      	ldr	r0, [pc, #296]	; (8013924 <InitTargetPlatform+0x1e0>)
    TargetBoardFeatures.MagSensorIsInit= 1;
 80137fc:	71a3      	strb	r3, [r4, #6]
    PREDMNT1_PRINTF("\tError Magneto Sensor\n\r");
 80137fe:	f006 fe53 	bl	801a4a8 <iprintf>
  if(ENV_SENSOR_Init(HUMIDITY_INSTANCE,ENV_TEMPERATURE| ENV_HUMIDITY)==BSP_ERROR_NONE)
 8013802:	2105      	movs	r1, #5
 8013804:	2000      	movs	r0, #0
 8013806:	f7f3 fceb 	bl	80071e0 <IKS01A3_ENV_SENSOR_Init>
 801380a:	2800      	cmp	r0, #0
 801380c:	d172      	bne.n	80138f4 <InitTargetPlatform+0x1b0>
    TargetBoardFeatures.TempSensorsIsInit[0]= 1;
 801380e:	2301      	movs	r3, #1
 8013810:	7023      	strb	r3, [r4, #0]
    TargetBoardFeatures.HumSensorIsInit= 1;
 8013812:	70e3      	strb	r3, [r4, #3]
    TargetBoardFeatures.NumTempSensors++;
 8013814:	68a3      	ldr	r3, [r4, #8]
    PREDMNT1_PRINTF("\tOK Temperature and Humidity (Sensor1)\n\r");
 8013816:	4844      	ldr	r0, [pc, #272]	; (8013928 <InitTargetPlatform+0x1e4>)
    TargetBoardFeatures.NumTempSensors++;
 8013818:	3301      	adds	r3, #1
 801381a:	60a3      	str	r3, [r4, #8]
    PREDMNT1_PRINTF("\tError Temperature and Humidity (Sensor1)\n\r");
 801381c:	f006 fe44 	bl	801a4a8 <iprintf>
  if(ENV_SENSOR_Init(PRESSURE_INSTANCE,ENV_TEMPERATURE| ENV_PRESSURE)==BSP_ERROR_NONE)
 8013820:	2103      	movs	r1, #3
 8013822:	2001      	movs	r0, #1
 8013824:	f7f3 fcdc 	bl	80071e0 <IKS01A3_ENV_SENSOR_Init>
 8013828:	2800      	cmp	r0, #0
 801382a:	d165      	bne.n	80138f8 <InitTargetPlatform+0x1b4>
    TargetBoardFeatures.TempSensorsIsInit[1]= 1;
 801382c:	2301      	movs	r3, #1
 801382e:	7063      	strb	r3, [r4, #1]
    TargetBoardFeatures.PressSensorIsInit= 1;
 8013830:	70a3      	strb	r3, [r4, #2]
    TargetBoardFeatures.NumTempSensors++;
 8013832:	68a3      	ldr	r3, [r4, #8]
    PREDMNT1_PRINTF("\tOK Temperature and Pressure (Sensor2)\n\r");
 8013834:	483d      	ldr	r0, [pc, #244]	; (801392c <InitTargetPlatform+0x1e8>)
    TargetBoardFeatures.NumTempSensors++;
 8013836:	3301      	adds	r3, #1
 8013838:	60a3      	str	r3, [r4, #8]
    PREDMNT1_PRINTF("\tError Temperature and Pressure (Sensor2)\n\r");
 801383a:	f006 fe35 	bl	801a4a8 <iprintf>
  if(TargetBoardFeatures.AccSensorIsInit)
 801383e:	7923      	ldrb	r3, [r4, #4]
 8013840:	b13b      	cbz	r3, 8013852 <InitTargetPlatform+0x10e>
    if(MOTION_SENSOR_Enable(ACCELERO_INSTANCE, MOTION_ACCELERO)==BSP_ERROR_NONE)
 8013842:	2102      	movs	r1, #2
 8013844:	2001      	movs	r0, #1
 8013846:	f001 fc2d 	bl	80150a4 <IKS01A3_MOTION_SENSOR_Enable>
 801384a:	b910      	cbnz	r0, 8013852 <InitTargetPlatform+0x10e>
      PREDMNT1_PRINTF("\tEnabled Accelero Sensor\n\r");
 801384c:	4838      	ldr	r0, [pc, #224]	; (8013930 <InitTargetPlatform+0x1ec>)
 801384e:	f006 fe2b 	bl	801a4a8 <iprintf>
  if(TargetBoardFeatures.GyroSensorIsInit)
 8013852:	7963      	ldrb	r3, [r4, #5]
 8013854:	b13b      	cbz	r3, 8013866 <InitTargetPlatform+0x122>
    if(MOTION_SENSOR_Enable(GYRO_INSTANCE, MOTION_GYRO)==BSP_ERROR_NONE)
 8013856:	2101      	movs	r1, #1
 8013858:	4608      	mov	r0, r1
 801385a:	f001 fc23 	bl	80150a4 <IKS01A3_MOTION_SENSOR_Enable>
 801385e:	b910      	cbnz	r0, 8013866 <InitTargetPlatform+0x122>
      PREDMNT1_PRINTF("\tEnabled Gyroscope Sensor\n\r");
 8013860:	4834      	ldr	r0, [pc, #208]	; (8013934 <InitTargetPlatform+0x1f0>)
 8013862:	f006 fe21 	bl	801a4a8 <iprintf>
  if(TargetBoardFeatures.MagSensorIsInit)
 8013866:	79a3      	ldrb	r3, [r4, #6]
 8013868:	b13b      	cbz	r3, 801387a <InitTargetPlatform+0x136>
    if(MOTION_SENSOR_Enable(MAGNETO_INSTANCE, MOTION_MAGNETO)==BSP_ERROR_NONE)
 801386a:	2104      	movs	r1, #4
 801386c:	2000      	movs	r0, #0
 801386e:	f001 fc19 	bl	80150a4 <IKS01A3_MOTION_SENSOR_Enable>
 8013872:	b910      	cbnz	r0, 801387a <InitTargetPlatform+0x136>
      PREDMNT1_PRINTF("\tEnabled Magneto Sensor\n\r");
 8013874:	4830      	ldr	r0, [pc, #192]	; (8013938 <InitTargetPlatform+0x1f4>)
 8013876:	f006 fe17 	bl	801a4a8 <iprintf>
  if(TargetBoardFeatures.TempSensorsIsInit[0])
 801387a:	7823      	ldrb	r3, [r4, #0]
 801387c:	b13b      	cbz	r3, 801388e <InitTargetPlatform+0x14a>
    if(ENV_SENSOR_Enable(TEMPERATURE_INSTANCE_1, ENV_TEMPERATURE)==BSP_ERROR_NONE)
 801387e:	2101      	movs	r1, #1
 8013880:	2000      	movs	r0, #0
 8013882:	f7f3 fdc3 	bl	800740c <IKS01A3_ENV_SENSOR_Enable>
 8013886:	b910      	cbnz	r0, 801388e <InitTargetPlatform+0x14a>
      PREDMNT1_PRINTF("\tEnabled Temperature\t(Sensor1)\n\r");
 8013888:	482c      	ldr	r0, [pc, #176]	; (801393c <InitTargetPlatform+0x1f8>)
 801388a:	f006 fe0d 	bl	801a4a8 <iprintf>
  if(TargetBoardFeatures.HumSensorIsInit)
 801388e:	78e3      	ldrb	r3, [r4, #3]
 8013890:	b13b      	cbz	r3, 80138a2 <InitTargetPlatform+0x15e>
    if(ENV_SENSOR_Enable(HUMIDITY_INSTANCE, ENV_HUMIDITY)==BSP_ERROR_NONE)
 8013892:	2104      	movs	r1, #4
 8013894:	2000      	movs	r0, #0
 8013896:	f7f3 fdb9 	bl	800740c <IKS01A3_ENV_SENSOR_Enable>
 801389a:	b910      	cbnz	r0, 80138a2 <InitTargetPlatform+0x15e>
      PREDMNT1_PRINTF("\tEnabled Humidity\t(Sensor1)\n\r");
 801389c:	4828      	ldr	r0, [pc, #160]	; (8013940 <InitTargetPlatform+0x1fc>)
 801389e:	f006 fe03 	bl	801a4a8 <iprintf>
  if(TargetBoardFeatures.TempSensorsIsInit[1])
 80138a2:	7863      	ldrb	r3, [r4, #1]
 80138a4:	b13b      	cbz	r3, 80138b6 <InitTargetPlatform+0x172>
    if(ENV_SENSOR_Enable(TEMPERATURE_INSTANCE_2, ENV_TEMPERATURE)==BSP_ERROR_NONE)
 80138a6:	2101      	movs	r1, #1
 80138a8:	4608      	mov	r0, r1
 80138aa:	f7f3 fdaf 	bl	800740c <IKS01A3_ENV_SENSOR_Enable>
 80138ae:	b910      	cbnz	r0, 80138b6 <InitTargetPlatform+0x172>
      PREDMNT1_PRINTF("\tEnabled Temperature\t(Sensor2)\n\r");
 80138b0:	4824      	ldr	r0, [pc, #144]	; (8013944 <InitTargetPlatform+0x200>)
 80138b2:	f006 fdf9 	bl	801a4a8 <iprintf>
  if(TargetBoardFeatures.PressSensorIsInit)
 80138b6:	78a3      	ldrb	r3, [r4, #2]
 80138b8:	b13b      	cbz	r3, 80138ca <InitTargetPlatform+0x186>
    if(ENV_SENSOR_Enable(PRESSURE_INSTANCE, ENV_PRESSURE)==BSP_ERROR_NONE)
 80138ba:	2102      	movs	r1, #2
 80138bc:	2001      	movs	r0, #1
 80138be:	f7f3 fda5 	bl	800740c <IKS01A3_ENV_SENSOR_Enable>
 80138c2:	b910      	cbnz	r0, 80138ca <InitTargetPlatform+0x186>
      PREDMNT1_PRINTF("\tEnabled Pressure\t(Sensor2)\n\r");
 80138c4:	4820      	ldr	r0, [pc, #128]	; (8013948 <InitTargetPlatform+0x204>)
 80138c6:	f006 fdef 	bl	801a4a8 <iprintf>
#endif /* (defined(IKS01A2_ISM330DLC_0) || defined(IKS01A3_ISM330DLC_0)) */
  
  Init_MEMS_Sensors();
  
  /* Initialize Mic */
  Init_MEMS_Mics(AUDIO_IN_SAMPLING_FREQUENCY, AUDIO_VOLUME_INPUT);
 80138ca:	2140      	movs	r1, #64	; 0x40
 80138cc:	f44f 507a 	mov.w	r0, #16000	; 0x3e80
 80138d0:	f7ff ff06 	bl	80136e0 <Init_MEMS_Mics>
  
  PREDMNT1_PRINTF("\n\r");
 80138d4:	481d      	ldr	r0, [pc, #116]	; (801394c <InitTargetPlatform+0x208>)
 80138d6:	f006 fde7 	bl	801a4a8 <iprintf>
}
 80138da:	b009      	add	sp, #36	; 0x24
 80138dc:	bd30      	pop	{r4, r5, pc}
    PREDMNT1_PRINTF("\033[2J\033[1;1f");
 80138de:	481c      	ldr	r0, [pc, #112]	; (8013950 <InitTargetPlatform+0x20c>)
 80138e0:	f006 fde2 	bl	801a4a8 <iprintf>
    PREDMNT1_PRINTF("UART Initialized\r\n");
 80138e4:	481b      	ldr	r0, [pc, #108]	; (8013954 <InitTargetPlatform+0x210>)
 80138e6:	f006 fe65 	bl	801a5b4 <puts>
 80138ea:	e735      	b.n	8013758 <InitTargetPlatform+0x14>
    PREDMNT1_PRINTF("\t\tError Accelero Sensor\n\r\t\tError Gyroscope Sensor\n\r");
 80138ec:	481a      	ldr	r0, [pc, #104]	; (8013958 <InitTargetPlatform+0x214>)
 80138ee:	e77b      	b.n	80137e8 <InitTargetPlatform+0xa4>
    PREDMNT1_PRINTF("\tError Magneto Sensor\n\r");
 80138f0:	481a      	ldr	r0, [pc, #104]	; (801395c <InitTargetPlatform+0x218>)
 80138f2:	e784      	b.n	80137fe <InitTargetPlatform+0xba>
    PREDMNT1_PRINTF("\tError Temperature and Humidity (Sensor1)\n\r");
 80138f4:	481a      	ldr	r0, [pc, #104]	; (8013960 <InitTargetPlatform+0x21c>)
 80138f6:	e791      	b.n	801381c <InitTargetPlatform+0xd8>
    PREDMNT1_PRINTF("\tError Temperature and Pressure (Sensor2)\n\r");
 80138f8:	481a      	ldr	r0, [pc, #104]	; (8013964 <InitTargetPlatform+0x220>)
 80138fa:	e79e      	b.n	801383a <InitTargetPlatform+0xf6>
 80138fc:	2000bc90 	.word	0x2000bc90
 8013900:	0802219c 	.word	0x0802219c
 8013904:	08023371 	.word	0x08023371
 8013908:	0802334c 	.word	0x0802334c
 801390c:	40023800 	.word	0x40023800
 8013910:	40020000 	.word	0x40020000
 8013914:	10110000 	.word	0x10110000
 8013918:	080233c0 	.word	0x080233c0
 801391c:	080233ec 	.word	0x080233ec
 8013920:	08023418 	.word	0x08023418
 8013924:	0802347a 	.word	0x0802347a
 8013928:	080234a7 	.word	0x080234a7
 801392c:	080234fc 	.word	0x080234fc
 8013930:	08023551 	.word	0x08023551
 8013934:	0802356c 	.word	0x0802356c
 8013938:	08023588 	.word	0x08023588
 801393c:	080235a2 	.word	0x080235a2
 8013940:	080235c3 	.word	0x080235c3
 8013944:	080235e1 	.word	0x080235e1
 8013948:	08023602 	.word	0x08023602
 801394c:	08023997 	.word	0x08023997
 8013950:	0802332f 	.word	0x0802332f
 8013954:	0802333a 	.word	0x0802333a
 8013958:	08023446 	.word	0x08023446
 801395c:	0802348f 	.word	0x0802348f
 8013960:	080234d0 	.word	0x080234d0
 8013964:	08023525 	.word	0x08023525

08013968 <InitMics>:
/** @brief Initialize all the MEMS's Microphones
 * @param None
 * @retval None
 */
void InitMics(uint32_t AudioFreq, uint32_t AudioVolume)
{
 8013968:	b508      	push	{r3, lr}
  Init_MEMS_Mics(AudioFreq, AudioVolume);
 801396a:	f7ff feb9 	bl	80136e0 <Init_MEMS_Mics>
   
  CCA02M2_AUDIO_IN_Record(CCA02M2_AUDIO_INSTANCE, (uint8_t *) PDM_Buffer, 0);
 801396e:	2200      	movs	r2, #0
}
 8013970:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  CCA02M2_AUDIO_IN_Record(CCA02M2_AUDIO_INSTANCE, (uint8_t *) PDM_Buffer, 0);
 8013974:	4901      	ldr	r1, [pc, #4]	; (801397c <InitMics+0x14>)
 8013976:	4610      	mov	r0, r2
 8013978:	f7f3 ba3a 	b.w	8006df0 <CCA02M2_AUDIO_IN_Record>
 801397c:	2000bca0 	.word	0x2000bca0

08013980 <DeInitMics>:
/** @brief DeInitialize all the MEMS's Microphones
 * @param None
 * @retval None
 */
void DeInitMics(void)
{
 8013980:	b510      	push	{r4, lr}
  if( CCA02M2_AUDIO_IN_Stop(CCA02M2_AUDIO_INSTANCE) != BSP_ERROR_NONE )
 8013982:	2000      	movs	r0, #0
 8013984:	f7f3 fa74 	bl	8006e70 <CCA02M2_AUDIO_IN_Stop>
 8013988:	4604      	mov	r4, r0
 801398a:	b118      	cbz	r0, 8013994 <DeInitMics+0x14>
  {
    PREDMNT1_PRINTF("Error Audio Stop\r\n");
 801398c:	4809      	ldr	r0, [pc, #36]	; (80139b4 <DeInitMics+0x34>)
 801398e:	f006 fe11 	bl	801a5b4 <puts>
    
    while(1) {
 8013992:	e7fe      	b.n	8013992 <DeInitMics+0x12>
      ;
    }
  }
  else
    PREDMNT1_PRINTF("OK Audio Stop\r\n");
 8013994:	4808      	ldr	r0, [pc, #32]	; (80139b8 <DeInitMics+0x38>)
 8013996:	f006 fe0d 	bl	801a5b4 <puts>
  
  
  if( CCA02M2_AUDIO_IN_DeInit(CCA02M2_AUDIO_INSTANCE) != BSP_ERROR_NONE )
 801399a:	4620      	mov	r0, r4
 801399c:	f7f2 fe90 	bl	80066c0 <CCA02M2_AUDIO_IN_DeInit>
 80139a0:	b118      	cbz	r0, 80139aa <DeInitMics+0x2a>
  {
    PREDMNT1_PRINTF("Error Audio DeInit\r\n");
 80139a2:	4806      	ldr	r0, [pc, #24]	; (80139bc <DeInitMics+0x3c>)
 80139a4:	f006 fe06 	bl	801a5b4 <puts>
    
    while(1) {
 80139a8:	e7fe      	b.n	80139a8 <DeInitMics+0x28>
      ;
    }
  }
  else
    PREDMNT1_PRINTF("OK Audio DeInit\r\n");
}
 80139aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    PREDMNT1_PRINTF("OK Audio DeInit\r\n");
 80139ae:	4804      	ldr	r0, [pc, #16]	; (80139c0 <DeInitMics+0x40>)
 80139b0:	f006 be00 	b.w	801a5b4 <puts>
 80139b4:	08023620 	.word	0x08023620
 80139b8:	08023632 	.word	0x08023632
 80139bc:	08023641 	.word	0x08023641
 80139c0:	08023655 	.word	0x08023655

080139c4 <LedOnTargetPlatform>:
  * @brief  This function switches on the LED
  * @param  None
  * @retval None
  */
void LedOnTargetPlatform(void)
{
 80139c4:	b508      	push	{r3, lr}
  BSP_LED_On(LED2);
 80139c6:	2000      	movs	r0, #0
 80139c8:	f001 f830 	bl	8014a2c <BSP_LED_On>
  TargetBoardFeatures.LedStatus=1;
 80139cc:	4b01      	ldr	r3, [pc, #4]	; (80139d4 <LedOnTargetPlatform+0x10>)
 80139ce:	2201      	movs	r2, #1
 80139d0:	731a      	strb	r2, [r3, #12]
}
 80139d2:	bd08      	pop	{r3, pc}
 80139d4:	2000bc90 	.word	0x2000bc90

080139d8 <LedOffTargetPlatform>:
  * @brief  This function switches off the LED
  * @param  None
  * @retval None
  */
void LedOffTargetPlatform(void)
{
 80139d8:	b508      	push	{r3, lr}
  BSP_LED_Off(LED2);
 80139da:	2000      	movs	r0, #0
 80139dc:	f001 f830 	bl	8014a40 <BSP_LED_Off>
  TargetBoardFeatures.LedStatus=0;
 80139e0:	4b01      	ldr	r3, [pc, #4]	; (80139e8 <LedOffTargetPlatform+0x10>)
 80139e2:	2200      	movs	r2, #0
 80139e4:	731a      	strb	r2, [r3, #12]
}
 80139e6:	bd08      	pop	{r3, pc}
 80139e8:	2000bc90 	.word	0x2000bc90

080139ec <UserFunctionForErasingFlash>:
/**
 * @brief User function for Erasing the Flash data for MDM
 * @param None
 * @retval uint32_t Success/NotSuccess [1/0]
 */
uint32_t UserFunctionForErasingFlash(void) {
 80139ec:	b530      	push	{r4, r5, lr}
 80139ee:	b087      	sub	sp, #28
  FLASH_EraseInitTypeDef EraseInitStruct;
  uint32_t SectorError = 0;
  uint32_t Success=1;

  EraseInitStruct.TypeErase = TYPEERASE_SECTORS;
  EraseInitStruct.VoltageRange = VOLTAGE_RANGE_3;
 80139f0:	2302      	movs	r3, #2
 80139f2:	9305      	str	r3, [sp, #20]
  uint32_t SectorError = 0;
 80139f4:	2500      	movs	r5, #0
  EraseInitStruct.Sector = FLASH_SECTOR_7;
  EraseInitStruct.NbSectors = 1;
 80139f6:	2307      	movs	r3, #7
 80139f8:	2401      	movs	r4, #1
  EraseInitStruct.TypeErase = TYPEERASE_SECTORS;
 80139fa:	e9cd 5500 	strd	r5, r5, [sp]
  EraseInitStruct.NbSectors = 1;
 80139fe:	e9cd 3403 	strd	r3, r4, [sp, #12]

  /* Unlock the Flash to enable the flash control register access *************/
  HAL_FLASH_Unlock();
 8013a02:	f7f4 f933 	bl	8007c6c <HAL_FLASH_Unlock>

  if(HAL_FLASHEx_Erase(&EraseInitStruct, &SectorError) != HAL_OK){
 8013a06:	4669      	mov	r1, sp
 8013a08:	a801      	add	r0, sp, #4
 8013a0a:	f7f4 fa1f 	bl	8007e4c <HAL_FLASHEx_Erase>
 8013a0e:	b110      	cbz	r0, 8013a16 <UserFunctionForErasingFlash+0x2a>
      User can add here some code to deal with this error. 
      SectorError will contain the faulty sector and then to know the code error on this sector,
      user can call function 'HAL_FLASH_GetError()'
      FLASH_ErrorTypeDef errorcode = HAL_FLASH_GetError(); */
    Success=0;
    Error_Handler();
 8013a10:	f000 fb05 	bl	801401e <Error_Handler>
    Success=0;
 8013a14:	462c      	mov	r4, r5
  }

  /* Lock the Flash to disable the flash control register access (recommended
  to protect the FLASH memory against possible unwanted operation) *********/
  HAL_FLASH_Lock();
 8013a16:	f7f4 f93b 	bl	8007c90 <HAL_FLASH_Lock>

  return Success;
}
 8013a1a:	4620      	mov	r0, r4
 8013a1c:	b007      	add	sp, #28
 8013a1e:	bd30      	pop	{r4, r5, pc}

08013a20 <UserFunctionForSavingFlash>:
 * @param void *InitMetaDataVector Pointer to the MDM beginning
 * @param void *EndMetaDataVector Pointer to the MDM end
 * @retval uint32_t Success/NotSuccess [1/0]
 */
uint32_t UserFunctionForSavingFlash(void *InitMetaDataVector,void *EndMetaDataVector)
{
 8013a20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013a22:	4604      	mov	r4, r0
 8013a24:	460d      	mov	r5, r1
  /* Store in Flash Memory */
  uint32_t Address = MDM_FLASH_ADD;
  uint32_t *WriteIndex;

  /* Unlock the Flash to enable the flash control register access *************/
  HAL_FLASH_Unlock();
 8013a26:	f7f4 f921 	bl	8007c6c <HAL_FLASH_Unlock>
  uint32_t Address = MDM_FLASH_ADD;
 8013a2a:	4e0b      	ldr	r6, [pc, #44]	; (8013a58 <UserFunctionForSavingFlash+0x38>)
  uint32_t Success=1;
 8013a2c:	2701      	movs	r7, #1

  for(WriteIndex =((uint32_t *) InitMetaDataVector); WriteIndex<((uint32_t *) EndMetaDataVector); WriteIndex++) {
 8013a2e:	42a5      	cmp	r5, r4
 8013a30:	4623      	mov	r3, r4
 8013a32:	d803      	bhi.n	8013a3c <UserFunctionForSavingFlash+0x1c>
    }
  }

  /* Lock the Flash to disable the flash control register access (recommended
   to protect the FLASH memory against possible unwanted operation) *********/
  HAL_FLASH_Lock();
 8013a34:	f7f4 f92c 	bl	8007c90 <HAL_FLASH_Lock>
 
  return Success;
}
 8013a38:	4638      	mov	r0, r7
 8013a3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (HAL_FLASH_Program(TYPEPROGRAM_WORD, Address,*WriteIndex) == HAL_OK){
 8013a3c:	681a      	ldr	r2, [r3, #0]
 8013a3e:	4631      	mov	r1, r6
 8013a40:	2300      	movs	r3, #0
 8013a42:	2002      	movs	r0, #2
 8013a44:	3404      	adds	r4, #4
 8013a46:	f7f4 f957 	bl	8007cf8 <HAL_FLASH_Program>
 8013a4a:	b908      	cbnz	r0, 8013a50 <UserFunctionForSavingFlash+0x30>
      Address = Address + 4;
 8013a4c:	3604      	adds	r6, #4
 8013a4e:	e7ee      	b.n	8013a2e <UserFunctionForSavingFlash+0xe>
      Error_Handler();
 8013a50:	f000 fae5 	bl	801401e <Error_Handler>
      Success=0;
 8013a54:	2700      	movs	r7, #0
  for(WriteIndex =((uint32_t *) InitMetaDataVector); WriteIndex<((uint32_t *) EndMetaDataVector); WriteIndex++) {
 8013a56:	e7ea      	b.n	8013a2e <UserFunctionForSavingFlash+0xe>
 8013a58:	0807f000 	.word	0x0807f000

08013a5c <HCI_TL_SPI_Init>:
 *
 * @param  void* Pointer to configuration struct 
 * @retval int32_t Status
 */
int32_t HCI_TL_SPI_Init(void* pConf)
{
 8013a5c:	b530      	push	{r4, r5, lr}
 8013a5e:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct;
  
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8013a60:	2400      	movs	r4, #0
 8013a62:	4b18      	ldr	r3, [pc, #96]	; (8013ac4 <HCI_TL_SPI_Init+0x68>)
 8013a64:	9400      	str	r4, [sp, #0]
 8013a66:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  
  /*Configure EXTI Line */
  GPIO_InitStruct.Pin = HCI_TL_SPI_EXTI_PIN;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(HCI_TL_SPI_EXTI_PORT, &GPIO_InitStruct);
 8013a68:	4817      	ldr	r0, [pc, #92]	; (8013ac8 <HCI_TL_SPI_Init+0x6c>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8013a6a:	f042 0201 	orr.w	r2, r2, #1
 8013a6e:	631a      	str	r2, [r3, #48]	; 0x30
 8013a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013a72:	9403      	str	r4, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8013a74:	f003 0301 	and.w	r3, r3, #1
 8013a78:	9300      	str	r3, [sp, #0]
 8013a7a:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8013a7c:	4b13      	ldr	r3, [pc, #76]	; (8013acc <HCI_TL_SPI_Init+0x70>)
 8013a7e:	2501      	movs	r5, #1
  HAL_GPIO_Init(HCI_TL_SPI_EXTI_PORT, &GPIO_InitStruct);
 8013a80:	a901      	add	r1, sp, #4
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8013a82:	e9cd 5301 	strd	r5, r3, [sp, #4]
  HAL_GPIO_Init(HCI_TL_SPI_EXTI_PORT, &GPIO_InitStruct);
 8013a86:	f7f4 fa2f 	bl	8007ee8 <HAL_GPIO_Init>
   
  /*Configure CS & RESET Line */
  GPIO_InitStruct.Pin =  HCI_TL_RST_PIN ;
 8013a8a:	f44f 7380 	mov.w	r3, #256	; 0x100
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(HCI_TL_RST_PORT, &GPIO_InitStruct);
 8013a8e:	a901      	add	r1, sp, #4
 8013a90:	480d      	ldr	r0, [pc, #52]	; (8013ac8 <HCI_TL_SPI_Init+0x6c>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8013a92:	e9cd 3501 	strd	r3, r5, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8013a96:	e9cd 4403 	strd	r4, r4, [sp, #12]
  HAL_GPIO_Init(HCI_TL_RST_PORT, &GPIO_InitStruct);
 8013a9a:	f7f4 fa25 	bl	8007ee8 <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8013a9e:	462a      	mov	r2, r5
 8013aa0:	4809      	ldr	r0, [pc, #36]	; (8013ac8 <HCI_TL_SPI_Init+0x6c>)
 8013aa2:	2102      	movs	r1, #2
 8013aa4:	f7f4 fb88 	bl	80081b8 <HAL_GPIO_WritePin>
  
  GPIO_InitStruct.Pin = HCI_TL_SPI_CS_PIN ;
 8013aa8:	2302      	movs	r3, #2
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(HCI_TL_SPI_CS_PORT, &GPIO_InitStruct); 
 8013aaa:	a901      	add	r1, sp, #4
 8013aac:	4806      	ldr	r0, [pc, #24]	; (8013ac8 <HCI_TL_SPI_Init+0x6c>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8013aae:	e9cd 3501 	strd	r3, r5, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8013ab2:	e9cd 4403 	strd	r4, r4, [sp, #12]
  HAL_GPIO_Init(HCI_TL_SPI_CS_PORT, &GPIO_InitStruct); 
 8013ab6:	f7f4 fa17 	bl	8007ee8 <HAL_GPIO_Init>
    
  return BSP_SPI1_Init();
 8013aba:	f001 f91f 	bl	8014cfc <BSP_SPI1_Init>
}
 8013abe:	b007      	add	sp, #28
 8013ac0:	bd30      	pop	{r4, r5, pc}
 8013ac2:	bf00      	nop
 8013ac4:	40023800 	.word	0x40023800
 8013ac8:	40020000 	.word	0x40020000
 8013acc:	10110000 	.word	0x10110000

08013ad0 <HCI_TL_SPI_DeInit>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_DeInit(void)
{
 8013ad0:	b508      	push	{r3, lr}
  HAL_GPIO_DeInit(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN); 
 8013ad2:	4807      	ldr	r0, [pc, #28]	; (8013af0 <HCI_TL_SPI_DeInit+0x20>)
 8013ad4:	2101      	movs	r1, #1
 8013ad6:	f7f4 fadb 	bl	8008090 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN); 
 8013ada:	4805      	ldr	r0, [pc, #20]	; (8013af0 <HCI_TL_SPI_DeInit+0x20>)
 8013adc:	2102      	movs	r1, #2
 8013ade:	f7f4 fad7 	bl	8008090 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_RST_PORT, HCI_TL_RST_PIN);   
 8013ae2:	4803      	ldr	r0, [pc, #12]	; (8013af0 <HCI_TL_SPI_DeInit+0x20>)
 8013ae4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8013ae8:	f7f4 fad2 	bl	8008090 <HAL_GPIO_DeInit>
  return 0;
}
 8013aec:	2000      	movs	r0, #0
 8013aee:	bd08      	pop	{r3, pc}
 8013af0:	40020000 	.word	0x40020000

08013af4 <HCI_TL_SPI_Reset>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_Reset(void)
{
 8013af4:	b510      	push	{r4, lr}
  /* Deselect CS PIN for BlueNRG to avoid spurious commands */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8013af6:	4c0d      	ldr	r4, [pc, #52]	; (8013b2c <HCI_TL_SPI_Reset+0x38>)
 8013af8:	2201      	movs	r2, #1
 8013afa:	4620      	mov	r0, r4
 8013afc:	2102      	movs	r1, #2
 8013afe:	f7f4 fb5b 	bl	80081b8 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_RESET);
 8013b02:	2200      	movs	r2, #0
 8013b04:	f44f 7180 	mov.w	r1, #256	; 0x100
 8013b08:	4620      	mov	r0, r4
 8013b0a:	f7f4 fb55 	bl	80081b8 <HAL_GPIO_WritePin>
  HAL_Delay(5);
 8013b0e:	2005      	movs	r0, #5
 8013b10:	f000 fa76 	bl	8014000 <HAL_Delay>
  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_SET);
 8013b14:	2201      	movs	r2, #1
 8013b16:	f44f 7180 	mov.w	r1, #256	; 0x100
 8013b1a:	4620      	mov	r0, r4
 8013b1c:	f7f4 fb4c 	bl	80081b8 <HAL_GPIO_WritePin>
  HAL_Delay(5);    
 8013b20:	2005      	movs	r0, #5
 8013b22:	f000 fa6d 	bl	8014000 <HAL_Delay>
  return 0;
}  
 8013b26:	2000      	movs	r0, #0
 8013b28:	bd10      	pop	{r4, pc}
 8013b2a:	bf00      	nop
 8013b2c:	40020000 	.word	0x40020000

08013b30 <hci_tl_lowlevel_isr>:
  *
  * @param  None
  * @retval None
  */
void hci_tl_lowlevel_isr(void)
{
 8013b30:	b510      	push	{r4, lr}
  return (HAL_GPIO_ReadPin(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN) == GPIO_PIN_SET);
 8013b32:	4c08      	ldr	r4, [pc, #32]	; (8013b54 <hci_tl_lowlevel_isr+0x24>)
 8013b34:	2101      	movs	r1, #1
 8013b36:	4620      	mov	r0, r4
 8013b38:	f7f4 fb38 	bl	80081ac <HAL_GPIO_ReadPin>
  /* Call hci_notify_asynch_evt() */
  while(IsDataAvailable())
 8013b3c:	2801      	cmp	r0, #1
 8013b3e:	d003      	beq.n	8013b48 <hci_tl_lowlevel_isr+0x18>
      return;
    }
  }

  /* USER CODE BEGIN hci_tl_lowlevel_isr */
  HCI_ProcessEvent=1;
 8013b40:	4b05      	ldr	r3, [pc, #20]	; (8013b58 <hci_tl_lowlevel_isr+0x28>)
 8013b42:	2201      	movs	r2, #1
 8013b44:	601a      	str	r2, [r3, #0]
 8013b46:	e004      	b.n	8013b52 <hci_tl_lowlevel_isr+0x22>
    if(hci_notify_asynch_evt(NULL)) {
 8013b48:	2000      	movs	r0, #0
 8013b4a:	f7f8 fc4b 	bl	800c3e4 <hci_notify_asynch_evt>
 8013b4e:	2800      	cmp	r0, #0
 8013b50:	d0f0      	beq.n	8013b34 <hci_tl_lowlevel_isr+0x4>
  /* USER CODE END hci_tl_lowlevel_isr */ 
}
 8013b52:	bd10      	pop	{r4, pc}
 8013b54:	40020000 	.word	0x40020000
 8013b58:	20009874 	.word	0x20009874

08013b5c <HCI_TL_SPI_Send>:
{  
 8013b5c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  uint8_t header_master[HEADER_SIZE] = {0x0a, 0x00, 0x00, 0x00, 0x00};
 8013b60:	4b31      	ldr	r3, [pc, #196]	; (8013c28 <HCI_TL_SPI_Send+0xcc>)
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 8013b62:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 8013c2c <HCI_TL_SPI_Send+0xd0>
      BSP_SPI1_SendRecv(buffer, read_char_buf, size);
 8013b66:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 8013c30 <HCI_TL_SPI_Send+0xd4>
{  
 8013b6a:	b085      	sub	sp, #20
 8013b6c:	4607      	mov	r7, r0
  uint8_t header_master[HEADER_SIZE] = {0x0a, 0x00, 0x00, 0x00, 0x00};
 8013b6e:	6818      	ldr	r0, [r3, #0]
 8013b70:	791b      	ldrb	r3, [r3, #4]
 8013b72:	f88d 3004 	strb.w	r3, [sp, #4]
{  
 8013b76:	460d      	mov	r5, r1
  uint8_t header_master[HEADER_SIZE] = {0x0a, 0x00, 0x00, 0x00, 0x00};
 8013b78:	9000      	str	r0, [sp, #0]
  uint32_t tickstart = HAL_GetTick();
 8013b7a:	f7f3 fd07 	bl	800758c <HAL_GetTick>
 8013b7e:	4606      	mov	r6, r0
  HAL_NVIC_DisableIRQ(HCI_TL_SPI_EXTI_IRQn);
 8013b80:	2006      	movs	r0, #6
 8013b82:	f7f3 fd5f 	bl	8007644 <HAL_NVIC_DisableIRQ>
    uint32_t tickstart_data_available = HAL_GetTick();
 8013b86:	f7f3 fd01 	bl	800758c <HAL_GetTick>
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 8013b8a:	2200      	movs	r2, #0
    uint32_t tickstart_data_available = HAL_GetTick();
 8013b8c:	4604      	mov	r4, r0
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 8013b8e:	2102      	movs	r1, #2
 8013b90:	4640      	mov	r0, r8
 8013b92:	f7f4 fb11 	bl	80081b8 <HAL_GPIO_WritePin>
  return (HAL_GPIO_ReadPin(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN) == GPIO_PIN_SET);
 8013b96:	2101      	movs	r1, #1
 8013b98:	4640      	mov	r0, r8
 8013b9a:	f7f4 fb07 	bl	80081ac <HAL_GPIO_ReadPin>
    while(!IsDataAvailable())
 8013b9e:	2801      	cmp	r0, #1
 8013ba0:	d10f      	bne.n	8013bc2 <HCI_TL_SPI_Send+0x66>
    BSP_SPI1_SendRecv(header_master, header_slave, HEADER_SIZE);
 8013ba2:	2205      	movs	r2, #5
 8013ba4:	a902      	add	r1, sp, #8
 8013ba6:	4668      	mov	r0, sp
 8013ba8:	f001 f81a 	bl	8014be0 <BSP_SPI1_SendRecv>
    rx_bytes = (((uint16_t)header_slave[2])<<8) | ((uint16_t)header_slave[1]);
 8013bac:	f89d 200a 	ldrb.w	r2, [sp, #10]
 8013bb0:	f89d 3009 	ldrb.w	r3, [sp, #9]
    if(rx_bytes >= size)
 8013bb4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8013bb8:	42ab      	cmp	r3, r5
 8013bba:	d20a      	bcs.n	8013bd2 <HCI_TL_SPI_Send+0x76>
      result = -2;
 8013bbc:	f06f 0401 	mvn.w	r4, #1
 8013bc0:	e00d      	b.n	8013bde <HCI_TL_SPI_Send+0x82>
      if((HAL_GetTick() - tickstart_data_available) > TIMEOUT_DURATION)
 8013bc2:	f7f3 fce3 	bl	800758c <HAL_GetTick>
 8013bc6:	1b00      	subs	r0, r0, r4
 8013bc8:	280f      	cmp	r0, #15
 8013bca:	d9e4      	bls.n	8013b96 <HCI_TL_SPI_Send+0x3a>
      result = -2;
 8013bcc:	f06f 0402 	mvn.w	r4, #2
 8013bd0:	e011      	b.n	8013bf6 <HCI_TL_SPI_Send+0x9a>
      BSP_SPI1_SendRecv(buffer, read_char_buf, size);
 8013bd2:	462a      	mov	r2, r5
 8013bd4:	4649      	mov	r1, r9
 8013bd6:	4638      	mov	r0, r7
 8013bd8:	f001 f802 	bl	8014be0 <BSP_SPI1_SendRecv>
    result = 0;
 8013bdc:	2400      	movs	r4, #0
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8013bde:	2201      	movs	r2, #1
 8013be0:	2102      	movs	r1, #2
 8013be2:	4640      	mov	r0, r8
 8013be4:	f7f4 fae8 	bl	80081b8 <HAL_GPIO_WritePin>
    if((HAL_GetTick() - tickstart) > TIMEOUT_DURATION)
 8013be8:	f7f3 fcd0 	bl	800758c <HAL_GetTick>
 8013bec:	1b80      	subs	r0, r0, r6
 8013bee:	280f      	cmp	r0, #15
 8013bf0:	d8ec      	bhi.n	8013bcc <HCI_TL_SPI_Send+0x70>
  } while(result < 0);
 8013bf2:	2c00      	cmp	r4, #0
 8013bf4:	d1c7      	bne.n	8013b86 <HCI_TL_SPI_Send+0x2a>
  tickstart = HAL_GetTick();
 8013bf6:	f7f3 fcc9 	bl	800758c <HAL_GetTick>
  while(((HCI_TL_SPI_EXTI_PORT->IDR & HCI_TL_SPI_EXTI_PIN) != 0x00u) && result != -4)
 8013bfa:	4e0c      	ldr	r6, [pc, #48]	; (8013c2c <HCI_TL_SPI_Send+0xd0>)
  tickstart = HAL_GetTick();
 8013bfc:	4605      	mov	r5, r0
  while(((HCI_TL_SPI_EXTI_PORT->IDR & HCI_TL_SPI_EXTI_PIN) != 0x00u) && result != -4)
 8013bfe:	6933      	ldr	r3, [r6, #16]
 8013c00:	07da      	lsls	r2, r3, #31
 8013c02:	d501      	bpl.n	8013c08 <HCI_TL_SPI_Send+0xac>
 8013c04:	1d23      	adds	r3, r4, #4
 8013c06:	d106      	bne.n	8013c16 <HCI_TL_SPI_Send+0xba>
  HAL_NVIC_EnableIRQ(HCI_TL_SPI_EXTI_IRQn);  
 8013c08:	2006      	movs	r0, #6
 8013c0a:	f7f3 fd0d 	bl	8007628 <HAL_NVIC_EnableIRQ>
}
 8013c0e:	4620      	mov	r0, r4
 8013c10:	b005      	add	sp, #20
 8013c12:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if((HAL_GetTick() - tickstart) > TIMEOUT_IRQ_HIGH)
 8013c16:	f7f3 fcb9 	bl	800758c <HAL_GetTick>
 8013c1a:	1b40      	subs	r0, r0, r5
      result = -4;
 8013c1c:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8013c20:	bf88      	it	hi
 8013c22:	f06f 0403 	mvnhi.w	r4, #3
 8013c26:	e7ea      	b.n	8013bfe <HCI_TL_SPI_Send+0xa2>
 8013c28:	08020ab0 	.word	0x08020ab0
 8013c2c:	40020000 	.word	0x40020000
 8013c30:	20009718 	.word	0x20009718

08013c34 <HCI_TL_SPI_Receive>:
{
 8013c34:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint8_t header_master[HEADER_SIZE] = {0x0b, 0x00, 0x00, 0x00, 0x00};
 8013c36:	4b2a      	ldr	r3, [pc, #168]	; (8013ce0 <HCI_TL_SPI_Receive+0xac>)
{
 8013c38:	b087      	sub	sp, #28
 8013c3a:	4606      	mov	r6, r0
  uint8_t header_master[HEADER_SIZE] = {0x0b, 0x00, 0x00, 0x00, 0x00};
 8013c3c:	6818      	ldr	r0, [r3, #0]
 8013c3e:	9002      	str	r0, [sp, #8]
 8013c40:	791b      	ldrb	r3, [r3, #4]
 8013c42:	f88d 300c 	strb.w	r3, [sp, #12]
  uint8_t char_00 = 0x00;
 8013c46:	2400      	movs	r4, #0
  HAL_NVIC_DisableIRQ(HCI_TL_SPI_EXTI_IRQn);
 8013c48:	2006      	movs	r0, #6
{
 8013c4a:	460d      	mov	r5, r1
  uint8_t char_00 = 0x00;
 8013c4c:	f88d 4006 	strb.w	r4, [sp, #6]
  HAL_NVIC_DisableIRQ(HCI_TL_SPI_EXTI_IRQn);
 8013c50:	f7f3 fcf8 	bl	8007644 <HAL_NVIC_DisableIRQ>
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 8013c54:	4823      	ldr	r0, [pc, #140]	; (8013ce4 <HCI_TL_SPI_Receive+0xb0>)
 8013c56:	4622      	mov	r2, r4
 8013c58:	2102      	movs	r1, #2
 8013c5a:	f7f4 faad 	bl	80081b8 <HAL_GPIO_WritePin>
  BSP_SPI1_SendRecv(header_master, header_slave, HEADER_SIZE);
 8013c5e:	2205      	movs	r2, #5
 8013c60:	a904      	add	r1, sp, #16
 8013c62:	a802      	add	r0, sp, #8
 8013c64:	f000 ffbc 	bl	8014be0 <BSP_SPI1_SendRecv>
  byte_count = (header_slave[4] << 8)| header_slave[3];
 8013c68:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8013c6c:	f89d 2013 	ldrb.w	r2, [sp, #19]
  if(byte_count > 0)
 8013c70:	ea52 2303 	orrs.w	r3, r2, r3, lsl #8
 8013c74:	d028      	beq.n	8013cc8 <HCI_TL_SPI_Receive+0x94>
    if (byte_count > size)
 8013c76:	429d      	cmp	r5, r3
 8013c78:	bf28      	it	cs
 8013c7a:	461d      	movcs	r5, r3
    for(len = 0; len < byte_count; len++)
 8013c7c:	4622      	mov	r2, r4
 8013c7e:	b2d4      	uxtb	r4, r2
 8013c80:	42a5      	cmp	r5, r4
 8013c82:	f102 0701 	add.w	r7, r2, #1
 8013c86:	d813      	bhi.n	8013cb0 <HCI_TL_SPI_Receive+0x7c>
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8013c88:	4816      	ldr	r0, [pc, #88]	; (8013ce4 <HCI_TL_SPI_Receive+0xb0>)
  while(((HCI_TL_SPI_EXTI_PORT->IDR & HCI_TL_SPI_EXTI_PIN) != 0x00u) && timeout != 1)
 8013c8a:	4e16      	ldr	r6, [pc, #88]	; (8013ce4 <HCI_TL_SPI_Receive+0xb0>)
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8013c8c:	2201      	movs	r2, #1
 8013c8e:	2102      	movs	r1, #2
 8013c90:	f7f4 fa92 	bl	80081b8 <HAL_GPIO_WritePin>
  uint32_t tickstart = HAL_GetTick();
 8013c94:	f7f3 fc7a 	bl	800758c <HAL_GetTick>
  int32_t timeout = 0;
 8013c98:	2300      	movs	r3, #0
  uint32_t tickstart = HAL_GetTick();
 8013c9a:	4605      	mov	r5, r0
  while(((HCI_TL_SPI_EXTI_PORT->IDR & HCI_TL_SPI_EXTI_PIN) != 0x00u) && timeout != 1)
 8013c9c:	6932      	ldr	r2, [r6, #16]
 8013c9e:	07d2      	lsls	r2, r2, #31
 8013ca0:	d500      	bpl.n	8013ca4 <HCI_TL_SPI_Receive+0x70>
 8013ca2:	b19b      	cbz	r3, 8013ccc <HCI_TL_SPI_Receive+0x98>
  HAL_NVIC_EnableIRQ(HCI_TL_SPI_EXTI_IRQn);  
 8013ca4:	2006      	movs	r0, #6
 8013ca6:	f7f3 fcbf 	bl	8007628 <HAL_NVIC_EnableIRQ>
}
 8013caa:	4620      	mov	r0, r4
 8013cac:	b007      	add	sp, #28
 8013cae:	bdf0      	pop	{r4, r5, r6, r7, pc}
      BSP_SPI1_SendRecv(&char_00, (uint8_t*)&read_char, 1);
 8013cb0:	2201      	movs	r2, #1
 8013cb2:	f10d 0107 	add.w	r1, sp, #7
 8013cb6:	f10d 0006 	add.w	r0, sp, #6
 8013cba:	f000 ff91 	bl	8014be0 <BSP_SPI1_SendRecv>
      buffer[len] = read_char;
 8013cbe:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8013cc2:	5533      	strb	r3, [r6, r4]
 8013cc4:	463a      	mov	r2, r7
 8013cc6:	e7da      	b.n	8013c7e <HCI_TL_SPI_Receive+0x4a>
  uint8_t len = 0;
 8013cc8:	461c      	mov	r4, r3
 8013cca:	e7dd      	b.n	8013c88 <HCI_TL_SPI_Receive+0x54>
    if((HAL_GetTick() - tickstart) > TIMEOUT_IRQ_HIGH)
 8013ccc:	f7f3 fc5e 	bl	800758c <HAL_GetTick>
 8013cd0:	1b43      	subs	r3, r0, r5
 8013cd2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8013cd6:	bf94      	ite	ls
 8013cd8:	2300      	movls	r3, #0
 8013cda:	2301      	movhi	r3, #1
 8013cdc:	e7de      	b.n	8013c9c <HCI_TL_SPI_Receive+0x68>
 8013cde:	bf00      	nop
 8013ce0:	08020ab5 	.word	0x08020ab5
 8013ce4:	40020000 	.word	0x40020000

08013ce8 <hci_tl_lowlevel_init>:
{
 8013ce8:	b510      	push	{r4, lr}
 8013cea:	b088      	sub	sp, #32
  fops.Init    = HCI_TL_SPI_Init;
 8013cec:	4b11      	ldr	r3, [pc, #68]	; (8013d34 <hci_tl_lowlevel_init+0x4c>)
 8013cee:	9301      	str	r3, [sp, #4]
  fops.DeInit  = HCI_TL_SPI_DeInit;
 8013cf0:	4b11      	ldr	r3, [pc, #68]	; (8013d38 <hci_tl_lowlevel_init+0x50>)
 8013cf2:	9302      	str	r3, [sp, #8]
  fops.Send    = HCI_TL_SPI_Send;
 8013cf4:	4b11      	ldr	r3, [pc, #68]	; (8013d3c <hci_tl_lowlevel_init+0x54>)
 8013cf6:	9305      	str	r3, [sp, #20]
  fops.Receive = HCI_TL_SPI_Receive;
 8013cf8:	4b11      	ldr	r3, [pc, #68]	; (8013d40 <hci_tl_lowlevel_init+0x58>)
  HAL_EXTI_GetHandle(&hexti0, EXTI_LINE_0);
 8013cfa:	4c12      	ldr	r4, [pc, #72]	; (8013d44 <hci_tl_lowlevel_init+0x5c>)
  fops.Receive = HCI_TL_SPI_Receive;
 8013cfc:	9304      	str	r3, [sp, #16]
  fops.Reset   = HCI_TL_SPI_Reset;
 8013cfe:	4b12      	ldr	r3, [pc, #72]	; (8013d48 <hci_tl_lowlevel_init+0x60>)
 8013d00:	9303      	str	r3, [sp, #12]
  hci_register_io_bus (&fops);
 8013d02:	a801      	add	r0, sp, #4
  fops.GetTick = BSP_GetTick;
 8013d04:	4b11      	ldr	r3, [pc, #68]	; (8013d4c <hci_tl_lowlevel_init+0x64>)
 8013d06:	9307      	str	r3, [sp, #28]
  hci_register_io_bus (&fops);
 8013d08:	f7f8 fa80 	bl	800c20c <hci_register_io_bus>
  HAL_EXTI_GetHandle(&hexti0, EXTI_LINE_0);
 8013d0c:	f04f 61c0 	mov.w	r1, #100663296	; 0x6000000
 8013d10:	4620      	mov	r0, r4
 8013d12:	f7f3 ff15 	bl	8007b40 <HAL_EXTI_GetHandle>
  HAL_EXTI_RegisterCallback(&hexti0, HAL_EXTI_COMMON_CB_ID, hci_tl_lowlevel_isr);
 8013d16:	4a0e      	ldr	r2, [pc, #56]	; (8013d50 <hci_tl_lowlevel_init+0x68>)
 8013d18:	2100      	movs	r1, #0
 8013d1a:	4620      	mov	r0, r4
 8013d1c:	f7f3 ff0a 	bl	8007b34 <HAL_EXTI_RegisterCallback>
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0x03, 0x00);
 8013d20:	2200      	movs	r2, #0
 8013d22:	2103      	movs	r1, #3
 8013d24:	2006      	movs	r0, #6
 8013d26:	f7f3 fc4d 	bl	80075c4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8013d2a:	2006      	movs	r0, #6
 8013d2c:	f7f3 fc7c 	bl	8007628 <HAL_NVIC_EnableIRQ>
}
 8013d30:	b008      	add	sp, #32
 8013d32:	bd10      	pop	{r4, pc}
 8013d34:	08013a5d 	.word	0x08013a5d
 8013d38:	08013ad1 	.word	0x08013ad1
 8013d3c:	08013b5d 	.word	0x08013b5d
 8013d40:	08013c35 	.word	0x08013c35
 8013d44:	2000bea0 	.word	0x2000bea0
 8013d48:	08013af5 	.word	0x08013af5
 8013d4c:	08014cb9 	.word	0x08014cb9
 8013d50:	08013b31 	.word	0x08013b31

08013d54 <AudioProcess>:
* @brief  User function that is called when 1 ms of PDM data is available.
* @param  none
* @retval None
*/
static void AudioProcess(void)
{
 8013d54:	b510      	push	{r4, lr}
  int32_t i;
  int32_t NumberMic;
  
  CCA02M2_AUDIO_IN_PDMToPCM(CCA02M2_AUDIO_INSTANCE,(uint16_t * )PDM_Buffer,PCM_Buffer);
 8013d56:	4c16      	ldr	r4, [pc, #88]	; (8013db0 <AudioProcess+0x5c>)
 8013d58:	4916      	ldr	r1, [pc, #88]	; (8013db4 <AudioProcess+0x60>)
 8013d5a:	4622      	mov	r2, r4
 8013d5c:	2000      	movs	r0, #0
 8013d5e:	f7f2 fff3 	bl	8006d48 <CCA02M2_AUDIO_IN_PDMToPCM>

  if(AudioLevelEnable)
 8013d62:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8013d66:	b30b      	cbz	r3, 8013dac <AudioProcess+0x58>
 8013d68:	4b13      	ldr	r3, [pc, #76]	; (8013db8 <AudioProcess+0x64>)
 8013d6a:	edd3 6a00 	vldr	s13, [r3]
 8013d6e:	ed93 7a01 	vldr	s14, [r3, #4]
 8013d72:	4622      	mov	r2, r4
  {
    for(i = 0; i < (NumSample/AUDIO_IN_CHANNELS); i++){
 8013d74:	2000      	movs	r0, #0
      for(NumberMic=0;NumberMic<AUDIO_IN_CHANNELS;NumberMic++) {
        RMS_Ch[NumberMic] += (float)((int16_t)PCM_Buffer[i*AUDIO_IN_CHANNELS+NumberMic] * ((int16_t)PCM_Buffer[i*AUDIO_IN_CHANNELS+NumberMic]));
 8013d76:	f9b2 1000 	ldrsh.w	r1, [r2]
 8013d7a:	4349      	muls	r1, r1
 8013d7c:	ee07 1a90 	vmov	s15, r1
 8013d80:	f9b2 1002 	ldrsh.w	r1, [r2, #2]
 8013d84:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013d88:	4349      	muls	r1, r1
 8013d8a:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8013d8e:	ee07 1a90 	vmov	s15, r1
    for(i = 0; i < (NumSample/AUDIO_IN_CHANNELS); i++){
 8013d92:	3001      	adds	r0, #1
        RMS_Ch[NumberMic] += (float)((int16_t)PCM_Buffer[i*AUDIO_IN_CHANNELS+NumberMic] * ((int16_t)PCM_Buffer[i*AUDIO_IN_CHANNELS+NumberMic]));
 8013d94:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    for(i = 0; i < (NumSample/AUDIO_IN_CHANNELS); i++){
 8013d98:	2810      	cmp	r0, #16
        RMS_Ch[NumberMic] += (float)((int16_t)PCM_Buffer[i*AUDIO_IN_CHANNELS+NumberMic] * ((int16_t)PCM_Buffer[i*AUDIO_IN_CHANNELS+NumberMic]));
 8013d9a:	ee37 7a27 	vadd.f32	s14, s14, s15
    for(i = 0; i < (NumSample/AUDIO_IN_CHANNELS); i++){
 8013d9e:	f102 0204 	add.w	r2, r2, #4
 8013da2:	d1e8      	bne.n	8013d76 <AudioProcess+0x22>
 8013da4:	edc3 6a00 	vstr	s13, [r3]
 8013da8:	ed83 7a01 	vstr	s14, [r3, #4]
      }
    }
  }
}
 8013dac:	bd10      	pop	{r4, pc}
 8013dae:	bf00      	nop
 8013db0:	20009818 	.word	0x20009818
 8013db4:	2000bca0 	.word	0x2000bca0
 8013db8:	2000bf1c 	.word	0x2000bf1c

08013dbc <ReadEnvironmentalData>:
  * @param  int16_t *Temp1ToSend
  * @param  int16_t *Temp2ToSend
  * @retval None
  */
void ReadEnvironmentalData(int32_t *PressToSend,uint16_t *HumToSend,int16_t *Temp1ToSend,int16_t *Temp2ToSend)
{
 8013dbc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8013dc0:	4607      	mov	r7, r0
  *PressToSend=0;
  *HumToSend=0;
  *Temp2ToSend=0,*Temp1ToSend=0;

  /* Read Humidity */
  if(TargetBoardFeatures.HumSensorIsInit) {
 8013dc2:	4e42      	ldr	r6, [pc, #264]	; (8013ecc <ReadEnvironmentalData+0x110>)
  *PressToSend=0;
 8013dc4:	2000      	movs	r0, #0
 8013dc6:	6038      	str	r0, [r7, #0]
  *HumToSend=0;
 8013dc8:	8008      	strh	r0, [r1, #0]
  *Temp2ToSend=0,*Temp1ToSend=0;
 8013dca:	8018      	strh	r0, [r3, #0]
 8013dcc:	8010      	strh	r0, [r2, #0]
{
 8013dce:	461d      	mov	r5, r3
  if(TargetBoardFeatures.HumSensorIsInit) {
 8013dd0:	78f3      	ldrb	r3, [r6, #3]
{
 8013dd2:	4689      	mov	r9, r1
 8013dd4:	4690      	mov	r8, r2
  if(TargetBoardFeatures.HumSensorIsInit) {
 8013dd6:	b1db      	cbz	r3, 8013e10 <ReadEnvironmentalData+0x54>
    ENV_SENSOR_GetValue(HUMIDITY_INSTANCE,ENV_HUMIDITY,&SensorValue);
 8013dd8:	aa01      	add	r2, sp, #4
 8013dda:	2104      	movs	r1, #4
 8013ddc:	f7f3 fb3e 	bl	800745c <IKS01A3_ENV_SENSOR_GetValue>
    MCR_BLUEMS_F2I_1D(SensorValue, intPart, decPart);
 8013de0:	eddd 7a01 	vldr	s15, [sp, #4]
 8013de4:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8013de8:	ee17 4a10 	vmov	r4, s14
 8013dec:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    *HumToSend = intPart*10+decPart;
 8013df0:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    MCR_BLUEMS_F2I_1D(SensorValue, intPart, decPart);
 8013df4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013df8:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8013dfc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8013e00:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    *HumToSend = intPart*10+decPart;
 8013e04:	ee17 3a90 	vmov	r3, s15
 8013e08:	eb03 0444 	add.w	r4, r3, r4, lsl #1
 8013e0c:	f8a9 4000 	strh.w	r4, [r9]
  }

  /* Read Temperature for sensor 1 */
  if(TargetBoardFeatures.TempSensorsIsInit[0]){
 8013e10:	7833      	ldrb	r3, [r6, #0]
 8013e12:	b1e3      	cbz	r3, 8013e4e <ReadEnvironmentalData+0x92>
    ENV_SENSOR_GetValue(TEMPERATURE_INSTANCE_1,ENV_TEMPERATURE,&SensorValue);
 8013e14:	2101      	movs	r1, #1
 8013e16:	aa01      	add	r2, sp, #4
 8013e18:	2000      	movs	r0, #0
 8013e1a:	f7f3 fb1f 	bl	800745c <IKS01A3_ENV_SENSOR_GetValue>
    MCR_BLUEMS_F2I_1D(SensorValue, intPart, decPart);
 8013e1e:	eddd 7a01 	vldr	s15, [sp, #4]
 8013e22:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8013e26:	ee17 1a10 	vmov	r1, s14
 8013e2a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    *Temp1ToSend = intPart*10+decPart;
 8013e2e:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    MCR_BLUEMS_F2I_1D(SensorValue, intPart, decPart);
 8013e32:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013e36:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8013e3a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8013e3e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    *Temp1ToSend = intPart*10+decPart;
 8013e42:	ee17 3a90 	vmov	r3, s15
 8013e46:	eb03 0141 	add.w	r1, r3, r1, lsl #1
 8013e4a:	f8a8 1000 	strh.w	r1, [r8]
  }
  
  /* Read Pressure */
  if(TargetBoardFeatures.PressSensorIsInit){
 8013e4e:	78b3      	ldrb	r3, [r6, #2]
 8013e50:	b1d3      	cbz	r3, 8013e88 <ReadEnvironmentalData+0xcc>
    ENV_SENSOR_GetValue(PRESSURE_INSTANCE,ENV_PRESSURE,&SensorValue);
 8013e52:	aa01      	add	r2, sp, #4
 8013e54:	2102      	movs	r1, #2
 8013e56:	2001      	movs	r0, #1
 8013e58:	f7f3 fb00 	bl	800745c <IKS01A3_ENV_SENSOR_GetValue>
    MCR_BLUEMS_F2I_2D(SensorValue, intPart, decPart);
 8013e5c:	eddd 7a01 	vldr	s15, [sp, #4]
 8013e60:	eebd 7ae7 	vcvt.s32.f32	s14, s15
    *PressToSend=intPart*100+decPart;
 8013e64:	2364      	movs	r3, #100	; 0x64
    MCR_BLUEMS_F2I_2D(SensorValue, intPart, decPart);
 8013e66:	eef8 6ac7 	vcvt.f32.s32	s13, s14
    *PressToSend=intPart*100+decPart;
 8013e6a:	ee17 2a10 	vmov	r2, s14
    MCR_BLUEMS_F2I_2D(SensorValue, intPart, decPart);
 8013e6e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8013e72:	eddf 6a17 	vldr	s13, [pc, #92]	; 8013ed0 <ReadEnvironmentalData+0x114>
 8013e76:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8013e7a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    *PressToSend=intPart*100+decPart;
 8013e7e:	ee17 1a90 	vmov	r1, s15
 8013e82:	fb03 1302 	mla	r3, r3, r2, r1
 8013e86:	603b      	str	r3, [r7, #0]
  }

  /* Read Temperature for sensor 2 */
  if(TargetBoardFeatures.TempSensorsIsInit[1]) {
 8013e88:	7873      	ldrb	r3, [r6, #1]
 8013e8a:	b1db      	cbz	r3, 8013ec4 <ReadEnvironmentalData+0x108>
    ENV_SENSOR_GetValue(TEMPERATURE_INSTANCE_2,ENV_TEMPERATURE,&SensorValue);
 8013e8c:	2101      	movs	r1, #1
 8013e8e:	aa01      	add	r2, sp, #4
 8013e90:	4608      	mov	r0, r1
 8013e92:	f7f3 fae3 	bl	800745c <IKS01A3_ENV_SENSOR_GetValue>
    MCR_BLUEMS_F2I_1D(SensorValue, intPart, decPart);
 8013e96:	eddd 7a01 	vldr	s15, [sp, #4]
 8013e9a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8013e9e:	ee17 2a10 	vmov	r2, s14
 8013ea2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    *Temp2ToSend = intPart*10+decPart;
 8013ea6:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    MCR_BLUEMS_F2I_1D(SensorValue, intPart, decPart);
 8013eaa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013eae:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8013eb2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8013eb6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    *Temp2ToSend = intPart*10+decPart;
 8013eba:	ee17 3a90 	vmov	r3, s15
 8013ebe:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8013ec2:	802a      	strh	r2, [r5, #0]
  }
}
 8013ec4:	b003      	add	sp, #12
 8013ec6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013eca:	bf00      	nop
 8013ecc:	2000bc90 	.word	0x2000bc90
 8013ed0:	42c80000 	.word	0x42c80000

08013ed4 <getBlueNRG2_Version>:
 * @param  Hardware version
 * @param  Firmware version
 * @retval Status
 */
uint8_t getBlueNRG2_Version(uint8_t *hwVersion, uint16_t *fwVersion)
{
 8013ed4:	b530      	push	{r4, r5, lr}
 8013ed6:	b08f      	sub	sp, #60	; 0x3c
  uint16_t hci_revision, manufacturer_name, lmp_pal_subversion;
  uint8_t DTM_version_major, DTM_version_minor, DTM_version_patch, DTM_variant, BTLE_Stack_version_major, BTLE_Stack_version_minor, BTLE_Stack_version_patch, BTLE_Stack_development;
  uint16_t DTM_Build_Number, BTLE_Stack_variant, BTLE_Stack_Build_Number;


  status = hci_read_local_version_information(&hci_version, &hci_revision, &lmp_pal_version, 
 8013ed8:	ab0c      	add	r3, sp, #48	; 0x30
 8013eda:	9300      	str	r3, [sp, #0]
{
 8013edc:	4604      	mov	r4, r0
 8013ede:	460d      	mov	r5, r1
  status = hci_read_local_version_information(&hci_version, &hci_revision, &lmp_pal_version, 
 8013ee0:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
 8013ee4:	a90b      	add	r1, sp, #44	; 0x2c
 8013ee6:	f10d 0223 	add.w	r2, sp, #35	; 0x23
 8013eea:	f10d 0022 	add.w	r0, sp, #34	; 0x22
 8013eee:	f7f7 fc65 	bl	800b7bc <hci_read_local_version_information>
				                              &manufacturer_name, &lmp_pal_subversion);

  if (status == BLE_STATUS_SUCCESS) {
 8013ef2:	4601      	mov	r1, r0
 8013ef4:	bb78      	cbnz	r0, 8013f56 <getBlueNRG2_Version+0x82>
    *hwVersion = hci_revision >> 8;
 8013ef6:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 8013efa:	0a1b      	lsrs	r3, r3, #8
 8013efc:	7023      	strb	r3, [r4, #0]
  else {
    PREDMNT1_PRINTF("Error= %x \r\n", status);
  }
  
  
  status = aci_hal_get_firmware_details(&DTM_version_major,
 8013efe:	f10d 0336 	add.w	r3, sp, #54	; 0x36
 8013f02:	9306      	str	r3, [sp, #24]
 8013f04:	ab0d      	add	r3, sp, #52	; 0x34
 8013f06:	9305      	str	r3, [sp, #20]
 8013f08:	f10d 032b 	add.w	r3, sp, #43	; 0x2b
 8013f0c:	9304      	str	r3, [sp, #16]
 8013f0e:	f10d 032a 	add.w	r3, sp, #42	; 0x2a
 8013f12:	9303      	str	r3, [sp, #12]
 8013f14:	f10d 0329 	add.w	r3, sp, #41	; 0x29
 8013f18:	9302      	str	r3, [sp, #8]
 8013f1a:	ab0a      	add	r3, sp, #40	; 0x28
 8013f1c:	9301      	str	r3, [sp, #4]
 8013f1e:	f10d 0332 	add.w	r3, sp, #50	; 0x32
 8013f22:	9300      	str	r3, [sp, #0]
 8013f24:	f10d 0226 	add.w	r2, sp, #38	; 0x26
 8013f28:	f10d 0327 	add.w	r3, sp, #39	; 0x27
 8013f2c:	f10d 0125 	add.w	r1, sp, #37	; 0x25
 8013f30:	a809      	add	r0, sp, #36	; 0x24
 8013f32:	f7f8 f82d 	bl	800bf90 <aci_hal_get_firmware_details>
                                        &BTLE_Stack_version_patch,
                                        &BTLE_Stack_development,
                                        &BTLE_Stack_variant,
                                        &BTLE_Stack_Build_Number);
  
  if (status == BLE_STATUS_SUCCESS) {
 8013f36:	4604      	mov	r4, r0
 8013f38:	b988      	cbnz	r0, 8013f5e <getBlueNRG2_Version+0x8a>
    *fwVersion = BTLE_Stack_version_major  << 8;  // Major Version Number
    *fwVersion |= BTLE_Stack_version_minor << 4;  // Minor Version Number
 8013f3a:	f89d 3029 	ldrb.w	r3, [sp, #41]	; 0x29
    *fwVersion = BTLE_Stack_version_major  << 8;  // Major Version Number
 8013f3e:	f89d 2028 	ldrb.w	r2, [sp, #40]	; 0x28
    *fwVersion |= BTLE_Stack_version_minor << 4;  // Minor Version Number
 8013f42:	011b      	lsls	r3, r3, #4
 8013f44:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    *fwVersion |= BTLE_Stack_version_patch;       // Patch Version Number
 8013f48:	f89d 202a 	ldrb.w	r2, [sp, #42]	; 0x2a
 8013f4c:	4313      	orrs	r3, r2
 8013f4e:	802b      	strh	r3, [r5, #0]
    PREDMNT1_PRINTF("Error= %x \r\n", status);
  }
  
    
  return status;
}
 8013f50:	4620      	mov	r0, r4
 8013f52:	b00f      	add	sp, #60	; 0x3c
 8013f54:	bd30      	pop	{r4, r5, pc}
    PREDMNT1_PRINTF("Error= %x \r\n", status);
 8013f56:	4804      	ldr	r0, [pc, #16]	; (8013f68 <getBlueNRG2_Version+0x94>)
 8013f58:	f006 faa6 	bl	801a4a8 <iprintf>
 8013f5c:	e7cf      	b.n	8013efe <getBlueNRG2_Version+0x2a>
    PREDMNT1_PRINTF("Error= %x \r\n", status);
 8013f5e:	4601      	mov	r1, r0
 8013f60:	4801      	ldr	r0, [pc, #4]	; (8013f68 <getBlueNRG2_Version+0x94>)
 8013f62:	f006 faa1 	bl	801a4a8 <iprintf>
 8013f66:	e7f3      	b.n	8013f50 <getBlueNRG2_Version+0x7c>
 8013f68:	08023666 	.word	0x08023666

08013f6c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non blocking mode 
  * @param  htim : TIM OC handle
  * @retval None
  */
void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8013f6c:	b538      	push	{r3, r4, r5, lr}
  uint32_t uhCapture=0;
  
  /* TIM1_CH1 toggling with frequency = 2 Hz */
  if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8013f6e:	7f05      	ldrb	r5, [r0, #28]
 8013f70:	2d01      	cmp	r5, #1
{
 8013f72:	4604      	mov	r4, r0
  if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8013f74:	d10a      	bne.n	8013f8c <HAL_TIM_OC_DelayElapsedCallback+0x20>
  {
     uhCapture = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8013f76:	2100      	movs	r1, #0
 8013f78:	f7f6 fad9 	bl	800a52e <HAL_TIM_ReadCapturedValue>
    /* Set the Capture Compare Register value (for environmental sensor) */
    __HAL_TIM_SET_COMPARE(&TimCCHandle, TIM_CHANNEL_1, (uhCapture + uhCCR1_Val));
 8013f7c:	4a14      	ldr	r2, [pc, #80]	; (8013fd0 <HAL_TIM_OC_DelayElapsedCallback+0x64>)
 8013f7e:	4b15      	ldr	r3, [pc, #84]	; (8013fd4 <HAL_TIM_OC_DelayElapsedCallback+0x68>)
 8013f80:	6812      	ldr	r2, [r2, #0]
 8013f82:	681b      	ldr	r3, [r3, #0]
 8013f84:	4410      	add	r0, r2
 8013f86:	6358      	str	r0, [r3, #52]	; 0x34
    SendEnv=1;
 8013f88:	4b13      	ldr	r3, [pc, #76]	; (8013fd8 <HAL_TIM_OC_DelayElapsedCallback+0x6c>)
 8013f8a:	645d      	str	r5, [r3, #68]	; 0x44
  }
 
  /* TIM1_CH2 toggling with frequency = 20 Hz */
  if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)
 8013f8c:	7f23      	ldrb	r3, [r4, #28]
 8013f8e:	2b02      	cmp	r3, #2
 8013f90:	d10c      	bne.n	8013fac <HAL_TIM_OC_DelayElapsedCallback+0x40>
  {
     uhCapture = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 8013f92:	2104      	movs	r1, #4
 8013f94:	4620      	mov	r0, r4
 8013f96:	f7f6 faca 	bl	800a52e <HAL_TIM_ReadCapturedValue>
    /* Set the Capture Compare Register value (for mic audio level) */
    __HAL_TIM_SET_COMPARE(&TimCCHandle, TIM_CHANNEL_2, (uhCapture + uhCCR2_Val));
 8013f9a:	4a0d      	ldr	r2, [pc, #52]	; (8013fd0 <HAL_TIM_OC_DelayElapsedCallback+0x64>)
 8013f9c:	4b0d      	ldr	r3, [pc, #52]	; (8013fd4 <HAL_TIM_OC_DelayElapsedCallback+0x68>)
 8013f9e:	6852      	ldr	r2, [r2, #4]
 8013fa0:	681b      	ldr	r3, [r3, #0]
 8013fa2:	4410      	add	r0, r2
 8013fa4:	6398      	str	r0, [r3, #56]	; 0x38
    SendAudioLevel=1;
 8013fa6:	4b0c      	ldr	r3, [pc, #48]	; (8013fd8 <HAL_TIM_OC_DelayElapsedCallback+0x6c>)
 8013fa8:	2201      	movs	r2, #1
 8013faa:	649a      	str	r2, [r3, #72]	; 0x48
  }

  /* TIM1_CH3 toggling with frequency = 20 Hz */
  if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3)
 8013fac:	7f23      	ldrb	r3, [r4, #28]
 8013fae:	2b04      	cmp	r3, #4
 8013fb0:	d10c      	bne.n	8013fcc <HAL_TIM_OC_DelayElapsedCallback+0x60>
  {
     uhCapture = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_3);
 8013fb2:	2108      	movs	r1, #8
 8013fb4:	4620      	mov	r0, r4
 8013fb6:	f7f6 faba 	bl	800a52e <HAL_TIM_ReadCapturedValue>
    /* Set the Capture Compare Register value (for Acc/Gyro/Mag sensor) */
    __HAL_TIM_SET_COMPARE(&TimCCHandle, TIM_CHANNEL_3, (uhCapture + uhCCR3_Val));
 8013fba:	4a05      	ldr	r2, [pc, #20]	; (8013fd0 <HAL_TIM_OC_DelayElapsedCallback+0x64>)
 8013fbc:	4b05      	ldr	r3, [pc, #20]	; (8013fd4 <HAL_TIM_OC_DelayElapsedCallback+0x68>)
 8013fbe:	6892      	ldr	r2, [r2, #8]
 8013fc0:	681b      	ldr	r3, [r3, #0]
 8013fc2:	4410      	add	r0, r2
 8013fc4:	63d8      	str	r0, [r3, #60]	; 0x3c
    SendAccGyroMag=1;
 8013fc6:	4b04      	ldr	r3, [pc, #16]	; (8013fd8 <HAL_TIM_OC_DelayElapsedCallback+0x6c>)
 8013fc8:	2201      	movs	r2, #1
 8013fca:	64da      	str	r2, [r3, #76]	; 0x4c
  }
}
 8013fcc:	bd38      	pop	{r3, r4, r5, pc}
 8013fce:	bf00      	nop
 8013fd0:	200003fc 	.word	0x200003fc
 8013fd4:	2000becc 	.word	0x2000becc
 8013fd8:	20009818 	.word	0x20009818

08013fdc <CCA02M2_AUDIO_IN_HalfTransfer_CallBack>:
 8013fdc:	f7ff beba 	b.w	8013d54 <AudioProcess>

08013fe0 <CCA02M2_AUDIO_IN_TransferComplete_CallBack>:
* @param  None
* @retval None
*/
void CCA02M2_AUDIO_IN_TransferComplete_CallBack(uint32_t Instance)
{
  AudioProcess();
 8013fe0:	f7ff beb8 	b.w	8013d54 <AudioProcess>

08013fe4 <HAL_GPIO_EXTI_Callback>:
 * @param  uint16_t GPIO_Pin Specifies the pins connected EXTI line
 * @retval None
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{  
  switch(GPIO_Pin){
 8013fe4:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8013fe8:	d107      	bne.n	8013ffa <HAL_GPIO_EXTI_Callback+0x16>
  case GPIO_PIN_5:
#endif /* IKS01A2_LSM6DSL_0 */
#if (defined(IKS01A2_ISM330DLC_0) || defined(IKS01A3_ISM330DLC_0))
  case M_INT2_O_PIN:
#endif /* (defined(IKS01A2_ISM330DLC_0) || defined(IKS01A3_ISM330DLC_0)) */
    if(FifoEnabled)
 8013fea:	4b04      	ldr	r3, [pc, #16]	; (8013ffc <HAL_GPIO_EXTI_Callback+0x18>)
 8013fec:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8013ff0:	b10b      	cbz	r3, 8013ff6 <HAL_GPIO_EXTI_Callback+0x12>
      MotionSP_FifoFull_IRQ_Rtn();
 8013ff2:	f7fe bb93 	b.w	801271c <MotionSP_FifoFull_IRQ_Rtn>
    else
      MotionSP_DataReady_IRQ_Rtn();
 8013ff6:	f7fe bb89 	b.w	801270c <MotionSP_DataReady_IRQ_Rtn>
    break;
  }
}
 8013ffa:	4770      	bx	lr
 8013ffc:	20009818 	.word	0x20009818

08014000 <HAL_Delay>:
  * @note This is a user implementation using WFI state
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
void HAL_Delay(__IO uint32_t Delay)
{
 8014000:	b513      	push	{r0, r1, r4, lr}
 8014002:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = 0;
  tickstart = HAL_GetTick();
 8014004:	f7f3 fac2 	bl	800758c <HAL_GetTick>
 8014008:	4604      	mov	r4, r0
  while((HAL_GetTick() - tickstart) < Delay){
 801400a:	f7f3 fabf 	bl	800758c <HAL_GetTick>
 801400e:	9a01      	ldr	r2, [sp, #4]
 8014010:	1b03      	subs	r3, r0, r4
 8014012:	4293      	cmp	r3, r2
 8014014:	d301      	bcc.n	801401a <HAL_Delay+0x1a>
    __WFI();
  }
}
 8014016:	b002      	add	sp, #8
 8014018:	bd10      	pop	{r4, pc}
    __WFI();
 801401a:	bf30      	wfi
 801401c:	e7f5      	b.n	801400a <HAL_Delay+0xa>

0801401e <Error_Handler>:
  * @retval None
  */
void Error_Handler(void)
{
  /* User may add here some code to deal with this error */
  while(1){
 801401e:	e7fe      	b.n	801401e <Error_Handler>

08014020 <SaveVibrationParamToMemory>:
 * @param pAccelerometer_Parameters Pointer to Accelerometer parameter structure
 * @param pMotionSP_Parameters Pointer to Board parameter structure
 * @retval unsigned char Success/Not Success
 */
unsigned char SaveVibrationParamToMemory(void)
{
 8014020:	b510      	push	{r4, lr}
  /* ReLoad the Vibration Parameters Values from RAM */
  unsigned char Success=0;

  VibrationParam[0]= CHECK_VIBRATION_PARAM;
 8014022:	4c13      	ldr	r4, [pc, #76]	; (8014070 <SaveVibrationParamToMemory+0x50>)
  VibrationParam[7]=  (uint16_t)MotionSP_Parameters.td_type;
  VibrationParam[8]=  (uint16_t)MotionSP_Parameters.tacq;
  VibrationParam[9]=  (uint16_t)MotionSP_Parameters.FftOvl;
  VibrationParam[10]= (uint16_t)MotionSP_Parameters.subrange_num;
  
  PREDMNT1_PRINTF("Vibration parameters values will be saved in FLASH\r\n");
 8014024:	4813      	ldr	r0, [pc, #76]	; (8014074 <SaveVibrationParamToMemory+0x54>)
  VibrationParam[0]= CHECK_VIBRATION_PARAM;
 8014026:	f241 2334 	movw	r3, #4660	; 0x1234
 801402a:	8023      	strh	r3, [r4, #0]
  VibrationParam[1]=  (uint16_t)AcceleroParams.AccOdr;
 801402c:	4b12      	ldr	r3, [pc, #72]	; (8014078 <SaveVibrationParamToMemory+0x58>)
 801402e:	881a      	ldrh	r2, [r3, #0]
 8014030:	8062      	strh	r2, [r4, #2]
  VibrationParam[2]=  (uint16_t)AcceleroParams.AccFifoBdr;
 8014032:	889a      	ldrh	r2, [r3, #4]
  VibrationParam[3]=  (uint16_t)AcceleroParams.fs;
 8014034:	891b      	ldrh	r3, [r3, #8]
 8014036:	80e3      	strh	r3, [r4, #6]
  VibrationParam[4]=  (uint16_t)MotionSP_Parameters.FftSize;
 8014038:	4b10      	ldr	r3, [pc, #64]	; (801407c <SaveVibrationParamToMemory+0x5c>)
  VibrationParam[2]=  (uint16_t)AcceleroParams.AccFifoBdr;
 801403a:	80a2      	strh	r2, [r4, #4]
  VibrationParam[4]=  (uint16_t)MotionSP_Parameters.FftSize;
 801403c:	881a      	ldrh	r2, [r3, #0]
 801403e:	8122      	strh	r2, [r4, #8]
  VibrationParam[5]=  (uint16_t)MotionSP_Parameters.tau;
 8014040:	885a      	ldrh	r2, [r3, #2]
 8014042:	8162      	strh	r2, [r4, #10]
  VibrationParam[6]=  (uint16_t)MotionSP_Parameters.window;
 8014044:	889a      	ldrh	r2, [r3, #4]
 8014046:	81a2      	strh	r2, [r4, #12]
  VibrationParam[7]=  (uint16_t)MotionSP_Parameters.td_type;
 8014048:	88da      	ldrh	r2, [r3, #6]
 801404a:	81e2      	strh	r2, [r4, #14]
  VibrationParam[8]=  (uint16_t)MotionSP_Parameters.tacq;
 801404c:	891a      	ldrh	r2, [r3, #8]
 801404e:	8222      	strh	r2, [r4, #16]
  VibrationParam[9]=  (uint16_t)MotionSP_Parameters.FftOvl;
 8014050:	7a9a      	ldrb	r2, [r3, #10]
  VibrationParam[10]= (uint16_t)MotionSP_Parameters.subrange_num;
 8014052:	899b      	ldrh	r3, [r3, #12]
  VibrationParam[9]=  (uint16_t)MotionSP_Parameters.FftOvl;
 8014054:	8262      	strh	r2, [r4, #18]
  VibrationParam[10]= (uint16_t)MotionSP_Parameters.subrange_num;
 8014056:	82a3      	strh	r3, [r4, #20]
  PREDMNT1_PRINTF("Vibration parameters values will be saved in FLASH\r\n");
 8014058:	f006 faac 	bl	801a5b4 <puts>
  MDM_SaveGMD(GMD_VIBRATION_PARAM,(void *)VibrationParam);
 801405c:	4621      	mov	r1, r4
 801405e:	200c      	movs	r0, #12
 8014060:	f7f8 fcd8 	bl	800ca14 <MDM_SaveGMD>
  NecessityToSaveMetaDataManager=1;
 8014064:	4b06      	ldr	r3, [pc, #24]	; (8014080 <SaveVibrationParamToMemory+0x60>)
 8014066:	2201      	movs	r2, #1
 8014068:	601a      	str	r2, [r3, #0]

  return Success;
}
 801406a:	2000      	movs	r0, #0
 801406c:	bd10      	pop	{r4, pc}
 801406e:	bf00      	nop
 8014070:	2000bea8 	.word	0x2000bea8
 8014074:	08023673 	.word	0x08023673
 8014078:	2000b664 	.word	0x2000b664
 801407c:	2000ae78 	.word	0x2000ae78
 8014080:	200021e8 	.word	0x200021e8

08014084 <main>:
{
 8014084:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014088:	ed2d 8b04 	vpush	{d8-d9}
 801408c:	b0c1      	sub	sp, #260	; 0x104
  HAL_Init();
 801408e:	f7f3 fa57 	bl	8007540 <HAL_Init>
  __HAL_RCC_PWR_CLK_ENABLE();
 8014092:	2400      	movs	r4, #0
 8014094:	4bb3      	ldr	r3, [pc, #716]	; (8014364 <main+0x2e0>)
 8014096:	940c      	str	r4, [sp, #48]	; 0x30
 8014098:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801409a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 801409e:	641a      	str	r2, [r3, #64]	; 0x40
 80140a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80140a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80140a6:	930c      	str	r3, [sp, #48]	; 0x30
 80140a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80140aa:	4baf      	ldr	r3, [pc, #700]	; (8014368 <main+0x2e4>)
 80140ac:	940d      	str	r4, [sp, #52]	; 0x34
 80140ae:	681a      	ldr	r2, [r3, #0]
 80140b0:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80140b4:	601a      	str	r2, [r3, #0]
 80140b6:	681b      	ldr	r3, [r3, #0]
 80140b8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80140bc:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80140be:	2601      	movs	r6, #1
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80140c0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80140c2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80140c6:	2502      	movs	r5, #2
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80140c8:	e9cd 631c 	strd	r6, r3, [sp, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80140cc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80140d0:	e9cd 5322 	strd	r5, r3, [sp, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLN = 256; //336; //192;
 80140d4:	f44f 7780 	mov.w	r7, #256	; 0x100
  RCC_OscInitStruct.PLL.PLLQ = 7;//4;
 80140d8:	2307      	movs	r3, #7
  RCC_OscInitStruct.PLL.PLLN = 256; //336; //192;
 80140da:	f04f 0908 	mov.w	r9, #8
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 80140de:	a81c      	add	r0, sp, #112	; 0x70
  RCC_OscInitStruct.PLL.PLLR = 2;
 80140e0:	e9cd 3527 	strd	r3, r5, [sp, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLN = 256; //336; //192;
 80140e4:	e9cd 9724 	strd	r9, r7, [sp, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80140e8:	9526      	str	r5, [sp, #152]	; 0x98
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 80140ea:	f7f5 fb69 	bl	80097c0 <HAL_RCC_OscConfig>
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 80140ee:	a829      	add	r0, sp, #164	; 0xa4
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CK48;
 80140f0:	9729      	str	r7, [sp, #164]	; 0xa4
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CK48CLKSOURCE_PLLQ;
 80140f2:	943e      	str	r4, [sp, #248]	; 0xf8
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 80140f4:	f7f4 ffbe 	bl	8009074 <HAL_RCCEx_PeriphCLKConfig>
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 80140f8:	230f      	movs	r3, #15
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5);
 80140fa:	2105      	movs	r1, #5
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80140fc:	e9cd 3517 	strd	r3, r5, [sp, #92]	; 0x5c
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;  
 8014100:	f44f 57a0 	mov.w	r7, #5120	; 0x1400
 8014104:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5);
 8014108:	a817      	add	r0, sp, #92	; 0x5c
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;  
 801410a:	e9cd 731a 	strd	r7, r3, [sp, #104]	; 0x68
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 801410e:	9419      	str	r4, [sp, #100]	; 0x64
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5);
 8014110:	f7f4 fef4 	bl	8008efc <HAL_RCC_ClockConfig>
  HAL_InitTick(0x00);
 8014114:	4620      	mov	r0, r4
 8014116:	f7f3 f9f1 	bl	80074fc <HAL_InitTick>
  InitTargetPlatform();
 801411a:	f7ff fb13 	bl	8013744 <InitTargetPlatform>
 InitMetaDataManager((void *)&known_MetaData,MDM_DATA_TYPE_GMD,NULL); 
 801411e:	4631      	mov	r1, r6
 8014120:	4622      	mov	r2, r4
 8014122:	4892      	ldr	r0, [pc, #584]	; (801436c <main+0x2e8>)
 8014124:	f7f8 fa42 	bl	800c5ac <InitMetaDataManager>
  PREDMNT1_PRINTF("\n\t(HAL %ld.%ld.%ld_%ld)\r\n"
 8014128:	f7f3 fa36 	bl	8007598 <HAL_GetHalVersion>
 801412c:	4606      	mov	r6, r0
 801412e:	f7f3 fa33 	bl	8007598 <HAL_GetHalVersion>
 8014132:	4607      	mov	r7, r0
 8014134:	f7f3 fa30 	bl	8007598 <HAL_GetHalVersion>
 8014138:	4680      	mov	r8, r0
 801413a:	f7f3 fa2d 	bl	8007598 <HAL_GetHalVersion>
 801413e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8014142:	9303      	str	r3, [sp, #12]
 8014144:	4b8a      	ldr	r3, [pc, #552]	; (8014370 <main+0x2ec>)
 8014146:	9302      	str	r3, [sp, #8]
 8014148:	2532      	movs	r5, #50	; 0x32
 801414a:	4b8a      	ldr	r3, [pc, #552]	; (8014374 <main+0x2f0>)
 801414c:	9301      	str	r3, [sp, #4]
 801414e:	b2c0      	uxtb	r0, r0
 8014150:	f3c8 2307 	ubfx	r3, r8, #8, #8
 8014154:	f3c7 4207 	ubfx	r2, r7, #16, #8
 8014158:	0e31      	lsrs	r1, r6, #24
 801415a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801415e:	9000      	str	r0, [sp, #0]
 8014160:	4885      	ldr	r0, [pc, #532]	; (8014378 <main+0x2f4>)
 8014162:	f006 f9a1 	bl	801a4a8 <iprintf>
  PREDMNT1_PRINTF("Debug Connection         Enabled\r\n");
 8014166:	4885      	ldr	r0, [pc, #532]	; (801437c <main+0x2f8>)
 8014168:	f006 fa24 	bl	801a5b4 <puts>
  PREDMNT1_PRINTF("Debug Notify Trasmission Enabled\r\n\n");
 801416c:	4884      	ldr	r0, [pc, #528]	; (8014380 <main+0x2fc>)
 801416e:	f006 fa21 	bl	801a5b4 <puts>
  sprintf(BlueNRG_StackValue.BoardName,"%s%c%c%c","PM1V",
 8014172:	f04f 0c30 	mov.w	ip, #48	; 0x30
 8014176:	2334      	movs	r3, #52	; 0x34
 8014178:	e9cd 3c00 	strd	r3, ip, [sp]
 801417c:	462b      	mov	r3, r5
  MDM_ReCallGMD(GMD_NODE_NAME,(void *)&NodeName);
 801417e:	4d81      	ldr	r5, [pc, #516]	; (8014384 <main+0x300>)
  sprintf(BlueNRG_StackValue.BoardName,"%s%c%c%c","PM1V",
 8014180:	4a81      	ldr	r2, [pc, #516]	; (8014388 <main+0x304>)
 8014182:	4982      	ldr	r1, [pc, #520]	; (801438c <main+0x308>)
 8014184:	4882      	ldr	r0, [pc, #520]	; (8014390 <main+0x30c>)
 8014186:	f006 fa35 	bl	801a5f4 <siprintf>
  MDM_ReCallGMD(GMD_NODE_NAME,(void *)&NodeName);
 801418a:	4629      	mov	r1, r5
 801418c:	4648      	mov	r0, r9
 801418e:	f7f8 fc65 	bl	800ca5c <MDM_ReCallGMD>
  if(NodeName[0] != 0x12)
 8014192:	782b      	ldrb	r3, [r5, #0]
 8014194:	2b12      	cmp	r3, #18
 8014196:	f000 8083 	beq.w	80142a0 <main+0x21c>
    NodeName[0]= 0x12;
 801419a:	2312      	movs	r3, #18
 801419c:	702b      	strb	r3, [r5, #0]
    for(int i=0; i<7; i++)
 801419e:	4b7c      	ldr	r3, [pc, #496]	; (8014390 <main+0x30c>)
      NodeName[i+1]= BlueNRG_StackValue.BoardName[i];
 80141a0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80141a4:	3401      	adds	r4, #1
    for(int i=0; i<7; i++)
 80141a6:	2c07      	cmp	r4, #7
      NodeName[i+1]= BlueNRG_StackValue.BoardName[i];
 80141a8:	552a      	strb	r2, [r5, r4]
    for(int i=0; i<7; i++)
 80141aa:	d1f9      	bne.n	80141a0 <main+0x11c>
    MDM_SaveGMD(GMD_NODE_NAME,(void *)&NodeName);
 80141ac:	4975      	ldr	r1, [pc, #468]	; (8014384 <main+0x300>)
 80141ae:	2008      	movs	r0, #8
 80141b0:	f7f8 fc30 	bl	800ca14 <MDM_SaveGMD>
    NecessityToSaveMetaDataManager=1;
 80141b4:	4b77      	ldr	r3, [pc, #476]	; (8014394 <main+0x310>)
 80141b6:	2201      	movs	r2, #1
 80141b8:	601a      	str	r2, [r3, #0]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80141ba:	4b6a      	ldr	r3, [pc, #424]	; (8014364 <main+0x2e0>)
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 80141bc:	4876      	ldr	r0, [pc, #472]	; (8014398 <main+0x314>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80141be:	2400      	movs	r4, #0
 80141c0:	9408      	str	r4, [sp, #32]
 80141c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80141c4:	f042 0204 	orr.w	r2, r2, #4
 80141c8:	631a      	str	r2, [r3, #48]	; 0x30
 80141ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80141cc:	f002 0204 	and.w	r2, r2, #4
 80141d0:	9208      	str	r2, [sp, #32]
 80141d2:	9a08      	ldr	r2, [sp, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80141d4:	9409      	str	r4, [sp, #36]	; 0x24
 80141d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80141d8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80141dc:	631a      	str	r2, [r3, #48]	; 0x30
 80141de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80141e0:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80141e4:	9209      	str	r2, [sp, #36]	; 0x24
 80141e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80141e8:	940a      	str	r4, [sp, #40]	; 0x28
 80141ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80141ec:	f042 0201 	orr.w	r2, r2, #1
 80141f0:	631a      	str	r2, [r3, #48]	; 0x30
 80141f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80141f4:	f002 0201 	and.w	r2, r2, #1
 80141f8:	920a      	str	r2, [sp, #40]	; 0x28
 80141fa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80141fc:	940b      	str	r4, [sp, #44]	; 0x2c
 80141fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8014200:	f042 0202 	orr.w	r2, r2, #2
 8014204:	631a      	str	r2, [r3, #48]	; 0x30
 8014206:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014208:	f003 0302 	and.w	r3, r3, #2
 801420c:	930b      	str	r3, [sp, #44]	; 0x2c
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 801420e:	2201      	movs	r2, #1
 8014210:	2102      	movs	r1, #2
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8014212:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 8014214:	f7f3 ffd0 	bl	80081b8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8014218:	4622      	mov	r2, r4
 801421a:	485f      	ldr	r0, [pc, #380]	; (8014398 <main+0x314>)
 801421c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8014220:	f7f3 ffca 	bl	80081b8 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8014224:	4b5d      	ldr	r3, [pc, #372]	; (801439c <main+0x318>)
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8014226:	485c      	ldr	r0, [pc, #368]	; (8014398 <main+0x314>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014228:	942b      	str	r4, [sp, #172]	; 0xac
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 801422a:	2501      	movs	r5, #1
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801422c:	a929      	add	r1, sp, #164	; 0xa4
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 801422e:	e9cd 5329 	strd	r5, r3, [sp, #164]	; 0xa4
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8014232:	f7f3 fe59 	bl	8007ee8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_8;
 8014236:	f44f 7381 	mov.w	r3, #258	; 0x102
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801423a:	4857      	ldr	r0, [pc, #348]	; (8014398 <main+0x314>)
 801423c:	a929      	add	r1, sp, #164	; 0xa4
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801423e:	e9cd 3529 	strd	r3, r5, [sp, #164]	; 0xa4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8014242:	e9cd 442b 	strd	r4, r4, [sp, #172]	; 0xac
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8014246:	f7f3 fe4f 	bl	8007ee8 <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0x03, 0x00);
 801424a:	4622      	mov	r2, r4
 801424c:	2103      	movs	r1, #3
 801424e:	2006      	movs	r0, #6
 8014250:	f7f3 f9b8 	bl	80075c4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8014254:	2006      	movs	r0, #6
 8014256:	f7f3 f9e7 	bl	8007628 <HAL_NVIC_EnableIRQ>
  BluetoothInit();
 801425a:	f7fe f815 	bl	8012288 <BluetoothInit>
  PREDMNT1_PRINTF("\r\n");
 801425e:	4850      	ldr	r0, [pc, #320]	; (80143a0 <main+0x31c>)
 8014260:	f006 f9a8 	bl	801a5b4 <puts>
  if(CheckBootLoaderCompliance()) {
 8014264:	f7ff f928 	bl	80134b8 <CheckBootLoaderCompliance>
 8014268:	b310      	cbz	r0, 80142b0 <main+0x22c>
    PREDMNT1_PRINTF("BootLoader Compliant with FOTA procedure\r\n\n");
 801426a:	484e      	ldr	r0, [pc, #312]	; (80143a4 <main+0x320>)
  TimCCHandle.Instance = TIM1;  
 801426c:	4c4e      	ldr	r4, [pc, #312]	; (80143a8 <main+0x324>)
    PREDMNT1_PRINTF("ERROR: BootLoader NOT Compliant with FOTA procedure\r\n\n");
 801426e:	f006 f9a1 	bl	801a5b4 <puts>
  uwPrescalerValue = (uint32_t) ((SystemCoreClock / 10000) - 1); 
 8014272:	4b4e      	ldr	r3, [pc, #312]	; (80143ac <main+0x328>)
 8014274:	f242 7210 	movw	r2, #10000	; 0x2710
 8014278:	681b      	ldr	r3, [r3, #0]
 801427a:	fbb3 f3f2 	udiv	r3, r3, r2
  TimCCHandle.Instance = TIM1;  
 801427e:	4a4c      	ldr	r2, [pc, #304]	; (80143b0 <main+0x32c>)
 8014280:	6022      	str	r2, [r4, #0]
  uwPrescalerValue = (uint32_t) ((SystemCoreClock / 10000) - 1); 
 8014282:	3b01      	subs	r3, #1
  TimCCHandle.Init.Period        = 65535;
 8014284:	f64f 72ff 	movw	r2, #65535	; 0xffff
  TimCCHandle.Init.Prescaler     = uwPrescalerValue;
 8014288:	6063      	str	r3, [r4, #4]
  if(HAL_TIM_OC_Init(&TimCCHandle) != HAL_OK)
 801428a:	4620      	mov	r0, r4
  TimCCHandle.Init.ClockDivision = 0;
 801428c:	2300      	movs	r3, #0
  TimCCHandle.Init.Period        = 65535;
 801428e:	60e2      	str	r2, [r4, #12]
  TimCCHandle.Init.ClockDivision = 0;
 8014290:	6123      	str	r3, [r4, #16]
  TimCCHandle.Init.CounterMode   = TIM_COUNTERMODE_UP;
 8014292:	60a3      	str	r3, [r4, #8]
  if(HAL_TIM_OC_Init(&TimCCHandle) != HAL_OK)
 8014294:	f7f6 fa6e 	bl	800a774 <HAL_TIM_OC_Init>
 8014298:	4627      	mov	r7, r4
 801429a:	4602      	mov	r2, r0
 801429c:	b150      	cbz	r0, 80142b4 <main+0x230>
  while(1){
 801429e:	e7fe      	b.n	801429e <main+0x21a>
 80142a0:	4b3b      	ldr	r3, [pc, #236]	; (8014390 <main+0x30c>)
      BlueNRG_StackValue.BoardName[i]= NodeName[i+1];
 80142a2:	3401      	adds	r4, #1
    for(int i=0; i<7; i++)
 80142a4:	2c07      	cmp	r4, #7
      BlueNRG_StackValue.BoardName[i]= NodeName[i+1];
 80142a6:	5d2a      	ldrb	r2, [r5, r4]
 80142a8:	f803 2b01 	strb.w	r2, [r3], #1
    for(int i=0; i<7; i++)
 80142ac:	d1f9      	bne.n	80142a2 <main+0x21e>
 80142ae:	e784      	b.n	80141ba <main+0x136>
    PREDMNT1_PRINTF("ERROR: BootLoader NOT Compliant with FOTA procedure\r\n\n");
 80142b0:	4840      	ldr	r0, [pc, #256]	; (80143b4 <main+0x330>)
 80142b2:	e7db      	b.n	801426c <main+0x1e8>
  sConfig.OCMode     = TIM_OCMODE_TOGGLE;
 80142b4:	2330      	movs	r3, #48	; 0x30
  sConfig.Pulse = DEFAULT_uhCCR1_Val;
 80142b6:	2002      	movs	r0, #2
  sConfig.OCMode     = TIM_OCMODE_TOGGLE;
 80142b8:	9329      	str	r3, [sp, #164]	; 0xa4
  sConfig.Pulse = DEFAULT_uhCCR1_Val;
 80142ba:	f241 3388 	movw	r3, #5000	; 0x1388
 80142be:	e9cd 302a 	strd	r3, r0, [sp, #168]	; 0xa8
  if(HAL_TIM_OC_ConfigChannel(&TimCCHandle, &sConfig, TIM_CHANNEL_1) != HAL_OK)
 80142c2:	a929      	add	r1, sp, #164	; 0xa4
 80142c4:	4620      	mov	r0, r4
 80142c6:	f7f6 fae3 	bl	800a890 <HAL_TIM_OC_ConfigChannel>
 80142ca:	b100      	cbz	r0, 80142ce <main+0x24a>
  while(1){
 80142cc:	e7fe      	b.n	80142cc <main+0x248>
  sConfig.Pulse = DEFAULT_uhCCR2_Val;
 80142ce:	f44f 75fa 	mov.w	r5, #500	; 0x1f4
  if(HAL_TIM_OC_ConfigChannel(&TimCCHandle, &sConfig, TIM_CHANNEL_2) != HAL_OK)
 80142d2:	2204      	movs	r2, #4
 80142d4:	a929      	add	r1, sp, #164	; 0xa4
 80142d6:	4620      	mov	r0, r4
  sConfig.Pulse = DEFAULT_uhCCR2_Val;
 80142d8:	952a      	str	r5, [sp, #168]	; 0xa8
  if(HAL_TIM_OC_ConfigChannel(&TimCCHandle, &sConfig, TIM_CHANNEL_2) != HAL_OK)
 80142da:	f7f6 fad9 	bl	800a890 <HAL_TIM_OC_ConfigChannel>
 80142de:	b100      	cbz	r0, 80142e2 <main+0x25e>
  while(1){
 80142e0:	e7fe      	b.n	80142e0 <main+0x25c>
  if(HAL_TIM_OC_ConfigChannel(&TimCCHandle, &sConfig, TIM_CHANNEL_3) != HAL_OK)
 80142e2:	2208      	movs	r2, #8
 80142e4:	a929      	add	r1, sp, #164	; 0xa4
 80142e6:	4620      	mov	r0, r4
  sConfig.Pulse = DEFAULT_uhCCR3_Val;
 80142e8:	952a      	str	r5, [sp, #168]	; 0xa8
  if(HAL_TIM_OC_ConfigChannel(&TimCCHandle, &sConfig, TIM_CHANNEL_3) != HAL_OK)
 80142ea:	f7f6 fad1 	bl	800a890 <HAL_TIM_OC_ConfigChannel>
 80142ee:	4680      	mov	r8, r0
 80142f0:	b100      	cbz	r0, 80142f4 <main+0x270>
  while(1){
 80142f2:	e7fe      	b.n	80142f2 <main+0x26e>
  MDM_ReCallGMD(GMD_VIBRATION_PARAM,(void *)VibrationParam);
 80142f4:	4d30      	ldr	r5, [pc, #192]	; (80143b8 <main+0x334>)
 80142f6:	4e31      	ldr	r6, [pc, #196]	; (80143bc <main+0x338>)
 80142f8:	4c31      	ldr	r4, [pc, #196]	; (80143c0 <main+0x33c>)
  MotionSP_SetDefaultVibrationParam();
 80142fa:	f7fe f87f 	bl	80123fc <MotionSP_SetDefaultVibrationParam>
  PREDMNT1_PRINTF("Recall the vibration parameter values from FLASH\r\n");
 80142fe:	4831      	ldr	r0, [pc, #196]	; (80143c4 <main+0x340>)
 8014300:	f006 f958 	bl	801a5b4 <puts>
  MDM_ReCallGMD(GMD_VIBRATION_PARAM,(void *)VibrationParam);
 8014304:	4629      	mov	r1, r5
 8014306:	200c      	movs	r0, #12
 8014308:	f7f8 fba8 	bl	800ca5c <MDM_ReCallGMD>
  if(VibrationParam[0] == CHECK_VIBRATION_PARAM)
 801430c:	882a      	ldrh	r2, [r5, #0]
 801430e:	f241 2334 	movw	r3, #4660	; 0x1234
 8014312:	429a      	cmp	r2, r3
 8014314:	f040 80b0 	bne.w	8014478 <main+0x3f4>
    AcceleroParams.AccOdr=              VibrationParam[1];
 8014318:	886b      	ldrh	r3, [r5, #2]
 801431a:	8033      	strh	r3, [r6, #0]
    AcceleroParams.AccFifoBdr=          VibrationParam[2];
 801431c:	88ab      	ldrh	r3, [r5, #4]
 801431e:	80b3      	strh	r3, [r6, #4]
    AcceleroParams.fs=                  VibrationParam[3];
 8014320:	88eb      	ldrh	r3, [r5, #6]
 8014322:	8133      	strh	r3, [r6, #8]
    MotionSP_Parameters.FftSize=        VibrationParam[4];
 8014324:	892b      	ldrh	r3, [r5, #8]
 8014326:	8023      	strh	r3, [r4, #0]
    MotionSP_Parameters.tau=            VibrationParam[5];
 8014328:	896b      	ldrh	r3, [r5, #10]
 801432a:	8063      	strh	r3, [r4, #2]
    MotionSP_Parameters.window=         VibrationParam[6];
 801432c:	89ab      	ldrh	r3, [r5, #12]
 801432e:	80a3      	strh	r3, [r4, #4]
    MotionSP_Parameters.td_type=        VibrationParam[7];
 8014330:	89eb      	ldrh	r3, [r5, #14]
 8014332:	80e3      	strh	r3, [r4, #6]
    MotionSP_Parameters.tacq=           VibrationParam[8];
 8014334:	8a2b      	ldrh	r3, [r5, #16]
 8014336:	8123      	strh	r3, [r4, #8]
    MotionSP_Parameters.FftOvl=         VibrationParam[9];
 8014338:	8a6b      	ldrh	r3, [r5, #18]
 801433a:	72a3      	strb	r3, [r4, #10]
    PREDMNT1_PRINTF("Vibration parameter values read from FLASH\r\n");
 801433c:	4822      	ldr	r0, [pc, #136]	; (80143c8 <main+0x344>)
    MotionSP_Parameters.subrange_num=   VibrationParam[10];
 801433e:	8aab      	ldrh	r3, [r5, #20]
 8014340:	81a3      	strh	r3, [r4, #12]
    PREDMNT1_PRINTF("Vibration parameter values read from FLASH\r\n");
 8014342:	f006 f937 	bl	801a5b4 <puts>
    if(AcceleroParams.AccFifoBdr > 1660)
 8014346:	88b3      	ldrh	r3, [r6, #4]
 8014348:	f240 657c 	movw	r5, #1660	; 0x67c
 801434c:	42ab      	cmp	r3, r5
 801434e:	d93f      	bls.n	80143d0 <main+0x34c>
      PREDMNT1_PRINTF("AccFifoBdr value out of limit\r\n");
 8014350:	481e      	ldr	r0, [pc, #120]	; (80143cc <main+0x348>)
 8014352:	f006 f92f 	bl	801a5b4 <puts>
      AcceleroParams.AccFifoBdr= 1660;
 8014356:	80b5      	strh	r5, [r6, #4]
      AcceleroParams.AccOdr=  1660;
 8014358:	8035      	strh	r5, [r6, #0]
      MotionSP_AcceleroConfig();
 801435a:	f7fe f87b 	bl	8012454 <MotionSP_AcceleroConfig>
    SaveVibrationParamToMemory();
 801435e:	f7ff fe5f 	bl	8014020 <SaveVibrationParamToMemory>
 8014362:	e038      	b.n	80143d6 <main+0x352>
 8014364:	40023800 	.word	0x40023800
 8014368:	40007000 	.word	0x40007000
 801436c:	20000408 	.word	0x20000408
 8014370:	08023753 	.word	0x08023753
 8014374:	08022344 	.word	0x08022344
 8014378:	080236a7 	.word	0x080236a7
 801437c:	0802375c 	.word	0x0802375c
 8014380:	0802377e 	.word	0x0802377e
 8014384:	2000bec4 	.word	0x2000bec4
 8014388:	080237a1 	.word	0x080237a1
 801438c:	080237a6 	.word	0x080237a6
 8014390:	200099b1 	.word	0x200099b1
 8014394:	200021e8 	.word	0x200021e8
 8014398:	40020000 	.word	0x40020000
 801439c:	10110000 	.word	0x10110000
 80143a0:	08023998 	.word	0x08023998
 80143a4:	080237af 	.word	0x080237af
 80143a8:	2000becc 	.word	0x2000becc
 80143ac:	200000c4 	.word	0x200000c4
 80143b0:	40010000 	.word	0x40010000
 80143b4:	080237da 	.word	0x080237da
 80143b8:	2000bea8 	.word	0x2000bea8
 80143bc:	2000b664 	.word	0x2000b664
 80143c0:	2000ae78 	.word	0x2000ae78
 80143c4:	08023810 	.word	0x08023810
 80143c8:	08023842 	.word	0x08023842
 80143cc:	0802386e 	.word	0x0802386e
      NecessityToSaveMetaDataManager=0;
 80143d0:	4b9f      	ldr	r3, [pc, #636]	; (8014650 <main+0x5cc>)
 80143d2:	f8c3 8000 	str.w	r8, [r3]
  PREDMNT1_PRINTF("\r\nAccelerometer parameters:\r\n");
 80143d6:	489f      	ldr	r0, [pc, #636]	; (8014654 <main+0x5d0>)
 80143d8:	f006 f8ec 	bl	801a5b4 <puts>
  PREDMNT1_PRINTF("AccOdr= %d\tAccFifoBdr= %d\tfs= %d\r\n", AcceleroParams.AccOdr,
 80143dc:	8933      	ldrh	r3, [r6, #8]
 80143de:	88b2      	ldrh	r2, [r6, #4]
 80143e0:	8831      	ldrh	r1, [r6, #0]
 80143e2:	489d      	ldr	r0, [pc, #628]	; (8014658 <main+0x5d4>)
 80143e4:	f006 f860 	bl	801a4a8 <iprintf>
  PREDMNT1_PRINTF("\r\nMotionSP parameters:\r\n");
 80143e8:	489c      	ldr	r0, [pc, #624]	; (801465c <main+0x5d8>)
 80143ea:	f006 f8e3 	bl	801a5b4 <puts>
  PREDMNT1_PRINTF("size= %d\twind= %d\ttacq= %d\tovl= %d\tsubrange_num= %d\r\n\n", MotionSP_Parameters.FftSize,
 80143ee:	89a3      	ldrh	r3, [r4, #12]
 80143f0:	9301      	str	r3, [sp, #4]
 80143f2:	7aa3      	ldrb	r3, [r4, #10]
 80143f4:	9300      	str	r3, [sp, #0]
 80143f6:	8923      	ldrh	r3, [r4, #8]
 80143f8:	88a2      	ldrh	r2, [r4, #4]
 80143fa:	8821      	ldrh	r1, [r4, #0]
 80143fc:	4898      	ldr	r0, [pc, #608]	; (8014660 <main+0x5dc>)
 80143fe:	f006 f853 	bl	801a4a8 <iprintf>
  PREDMNT1_PRINTF("************************************************************************\r\n\r\n");
 8014402:	4898      	ldr	r0, [pc, #608]	; (8014664 <main+0x5e0>)
 8014404:	f006 f8d6 	bl	801a5b4 <puts>
  if(MotionSP_AcceleroConfig()) {
 8014408:	f7fe f824 	bl	8012454 <MotionSP_AcceleroConfig>
 801440c:	2800      	cmp	r0, #0
 801440e:	d037      	beq.n	8014480 <main+0x3fc>
    PREDMNT1_PRINTF("\tFailed Set Accelerometer Parameters\r\n\n");
 8014410:	4895      	ldr	r0, [pc, #596]	; (8014668 <main+0x5e4>)
    if(set_connectable){     
 8014412:	4d96      	ldr	r5, [pc, #600]	; (801466c <main+0x5e8>)
    if(!connected)
 8014414:	4e96      	ldr	r6, [pc, #600]	; (8014670 <main+0x5ec>)
    PREDMNT1_PRINTF("\tOK Set Accelerometer Parameters\r\n\n");
 8014416:	f006 f8cd 	bl	801a5b4 <puts>
 801441a:	46a8      	mov	r8, r5
    if(!connected)
 801441c:	7833      	ldrb	r3, [r6, #0]
 801441e:	b94b      	cbnz	r3, 8014434 <main+0x3b0>
      if(!TargetBoardFeatures.LedStatus) {
 8014420:	4b94      	ldr	r3, [pc, #592]	; (8014674 <main+0x5f0>)
 8014422:	7b1b      	ldrb	r3, [r3, #12]
 8014424:	bb73      	cbnz	r3, 8014484 <main+0x400>
        if(!(HAL_GetTick()&0x3FF)) {
 8014426:	f7f3 f8b1 	bl	800758c <HAL_GetTick>
 801442a:	f3c0 0009 	ubfx	r0, r0, #0, #10
 801442e:	b908      	cbnz	r0, 8014434 <main+0x3b0>
          LedOnTargetPlatform();
 8014430:	f7ff fac8 	bl	80139c4 <LedOnTargetPlatform>
    if(set_connectable){     
 8014434:	782b      	ldrb	r3, [r5, #0]
 8014436:	b163      	cbz	r3, 8014452 <main+0x3ce>
      if(NecessityToSaveMetaDataManager) {
 8014438:	4b85      	ldr	r3, [pc, #532]	; (8014650 <main+0x5cc>)
 801443a:	681b      	ldr	r3, [r3, #0]
 801443c:	b123      	cbz	r3, 8014448 <main+0x3c4>
        uint32_t Success = EraseMetaDataManager();
 801443e:	f7f8 f891 	bl	800c564 <EraseMetaDataManager>
        if(Success) {
 8014442:	b108      	cbz	r0, 8014448 <main+0x3c4>
          SaveMetaDataManager();
 8014444:	f7f8 f89a 	bl	800c57c <SaveMetaDataManager>
      setConnectable();
 8014448:	f7f9 fb6e 	bl	800db28 <setConnectable>
      set_connectable = FALSE;
 801444c:	2300      	movs	r3, #0
 801444e:	f888 3000 	strb.w	r3, [r8]
    if(BLE_Env_NotifyEvent != BLE_NOTIFY_NOTHING)
 8014452:	f8df 9250 	ldr.w	r9, [pc, #592]	; 80146a4 <main+0x620>
 8014456:	4c88      	ldr	r4, [pc, #544]	; (8014678 <main+0x5f4>)
 8014458:	f899 a000 	ldrb.w	sl, [r9]
 801445c:	f1ba 0f00 	cmp.w	sl, #0
 8014460:	d031      	beq.n	80144c6 <main+0x442>
  if( (BLE_Env_NotifyEvent == BLE_NOTIFY_SUB) &&
 8014462:	f1ba 0f01 	cmp.w	sl, #1
 8014466:	d11c      	bne.n	80144a2 <main+0x41e>
 8014468:	f894 1051 	ldrb.w	r1, [r4, #81]	; 0x51
 801446c:	bb41      	cbnz	r1, 80144c0 <main+0x43c>
    if(HAL_TIM_OC_Start_IT(&TimCCHandle, TIM_CHANNEL_1) != HAL_OK){
 801446e:	4883      	ldr	r0, [pc, #524]	; (801467c <main+0x5f8>)
 8014470:	f7f6 fc46 	bl	800ad00 <HAL_TIM_OC_Start_IT>
 8014474:	b168      	cbz	r0, 8014492 <main+0x40e>
  while(1){
 8014476:	e7fe      	b.n	8014476 <main+0x3f2>
    PREDMNT1_PRINTF("Vibration parameters values not present in FLASH\r\n");
 8014478:	4881      	ldr	r0, [pc, #516]	; (8014680 <main+0x5fc>)
 801447a:	f006 f89b 	bl	801a5b4 <puts>
 801447e:	e76e      	b.n	801435e <main+0x2da>
    PREDMNT1_PRINTF("\tOK Set Accelerometer Parameters\r\n\n");
 8014480:	4880      	ldr	r0, [pc, #512]	; (8014684 <main+0x600>)
 8014482:	e7c6      	b.n	8014412 <main+0x38e>
        if(!(HAL_GetTick()&0x3F)) {
 8014484:	f7f3 f882 	bl	800758c <HAL_GetTick>
 8014488:	0683      	lsls	r3, r0, #26
 801448a:	d1d3      	bne.n	8014434 <main+0x3b0>
          LedOffTargetPlatform();
 801448c:	f7ff faa4 	bl	80139d8 <LedOffTargetPlatform>
 8014490:	e7d0      	b.n	8014434 <main+0x3b0>
      uint32_t uhCapture = __HAL_TIM_GET_COUNTER(&TimCCHandle);
 8014492:	683a      	ldr	r2, [r7, #0]
      __HAL_TIM_SET_COMPARE(&TimCCHandle, TIM_CHANNEL_1, (uhCapture + uhCCR1_Val));
 8014494:	497c      	ldr	r1, [pc, #496]	; (8014688 <main+0x604>)
      uint32_t uhCapture = __HAL_TIM_GET_COUNTER(&TimCCHandle);
 8014496:	6a53      	ldr	r3, [r2, #36]	; 0x24
      __HAL_TIM_SET_COMPARE(&TimCCHandle, TIM_CHANNEL_1, (uhCapture + uhCCR1_Val));
 8014498:	6809      	ldr	r1, [r1, #0]
    EnvironmentalTimerEnabled= 1;
 801449a:	f884 a051 	strb.w	sl, [r4, #81]	; 0x51
      __HAL_TIM_SET_COMPARE(&TimCCHandle, TIM_CHANNEL_1, (uhCapture + uhCCR1_Val));
 801449e:	440b      	add	r3, r1
 80144a0:	6353      	str	r3, [r2, #52]	; 0x34
  if( (BLE_Env_NotifyEvent == BLE_NOTIFY_UNSUB) &&
 80144a2:	f899 3000 	ldrb.w	r3, [r9]
 80144a6:	2b02      	cmp	r3, #2
 80144a8:	d10a      	bne.n	80144c0 <main+0x43c>
 80144aa:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 80144ae:	b13b      	cbz	r3, 80144c0 <main+0x43c>
    if(HAL_TIM_OC_Stop_IT(&TimCCHandle, TIM_CHANNEL_1) != HAL_OK){
 80144b0:	4872      	ldr	r0, [pc, #456]	; (801467c <main+0x5f8>)
 80144b2:	2100      	movs	r1, #0
 80144b4:	f7f6 fc9e 	bl	800adf4 <HAL_TIM_OC_Stop_IT>
 80144b8:	b100      	cbz	r0, 80144bc <main+0x438>
  while(1){
 80144ba:	e7fe      	b.n	80144ba <main+0x436>
    EnvironmentalTimerEnabled= 0;
 80144bc:	f884 0051 	strb.w	r0, [r4, #81]	; 0x51
      BLE_Env_NotifyEvent = BLE_NOTIFY_NOTHING;
 80144c0:	2300      	movs	r3, #0
 80144c2:	f889 3000 	strb.w	r3, [r9]
    if(BLE_AudioLevel_NotifyEvent != BLE_NOTIFY_NOTHING)
 80144c6:	f8df a1e0 	ldr.w	sl, [pc, #480]	; 80146a8 <main+0x624>
 80144ca:	f89a 9000 	ldrb.w	r9, [sl]
 80144ce:	f1b9 0f00 	cmp.w	r9, #0
 80144d2:	d038      	beq.n	8014546 <main+0x4c2>
  if( (BLE_AudioLevel_NotifyEvent == BLE_NOTIFY_SUB) &&
 80144d4:	f1b9 0f01 	cmp.w	r9, #1
 80144d8:	d11e      	bne.n	8014518 <main+0x494>
 80144da:	f894 3052 	ldrb.w	r3, [r4, #82]	; 0x52
 80144de:	bb7b      	cbnz	r3, 8014540 <main+0x4bc>
    InitMics(AUDIO_IN_SAMPLING_FREQUENCY, AUDIO_VOLUME_INPUT);
 80144e0:	2140      	movs	r1, #64	; 0x40
 80144e2:	f44f 507a 	mov.w	r0, #16000	; 0x3e80
 80144e6:	f7ff fa3f 	bl	8013968 <InitMics>
      RMS_Ch[Count]=0;
 80144ea:	4968      	ldr	r1, [pc, #416]	; (801468c <main+0x608>)
      DBNOISE_Value_Old_Ch[Count] =0;
 80144ec:	4a68      	ldr	r2, [pc, #416]	; (8014690 <main+0x60c>)
    if(HAL_TIM_OC_Start_IT(&TimCCHandle, TIM_CHANNEL_2) != HAL_OK){
 80144ee:	4863      	ldr	r0, [pc, #396]	; (801467c <main+0x5f8>)
    AudioLevelEnable= 1;
 80144f0:	f884 9040 	strb.w	r9, [r4, #64]	; 0x40
      RMS_Ch[Count]=0;
 80144f4:	2300      	movs	r3, #0
 80144f6:	600b      	str	r3, [r1, #0]
 80144f8:	604b      	str	r3, [r1, #4]
    if(HAL_TIM_OC_Start_IT(&TimCCHandle, TIM_CHANNEL_2) != HAL_OK){
 80144fa:	2104      	movs	r1, #4
      DBNOISE_Value_Old_Ch[Count] =0;
 80144fc:	6013      	str	r3, [r2, #0]
 80144fe:	6053      	str	r3, [r2, #4]
    if(HAL_TIM_OC_Start_IT(&TimCCHandle, TIM_CHANNEL_2) != HAL_OK){
 8014500:	f7f6 fbfe 	bl	800ad00 <HAL_TIM_OC_Start_IT>
 8014504:	b100      	cbz	r0, 8014508 <main+0x484>
  while(1){
 8014506:	e7fe      	b.n	8014506 <main+0x482>
      uint32_t uhCapture = __HAL_TIM_GET_COUNTER(&TimCCHandle);
 8014508:	683a      	ldr	r2, [r7, #0]
      __HAL_TIM_SET_COMPARE(&TimCCHandle, TIM_CHANNEL_2, (uhCapture + uhCCR2_Val));
 801450a:	495f      	ldr	r1, [pc, #380]	; (8014688 <main+0x604>)
      uint32_t uhCapture = __HAL_TIM_GET_COUNTER(&TimCCHandle);
 801450c:	6a53      	ldr	r3, [r2, #36]	; 0x24
      __HAL_TIM_SET_COMPARE(&TimCCHandle, TIM_CHANNEL_2, (uhCapture + uhCCR2_Val));
 801450e:	6849      	ldr	r1, [r1, #4]
    AudioLevelTimerEnabled= 1;
 8014510:	f884 9052 	strb.w	r9, [r4, #82]	; 0x52
      __HAL_TIM_SET_COMPARE(&TimCCHandle, TIM_CHANNEL_2, (uhCapture + uhCCR2_Val));
 8014514:	440b      	add	r3, r1
 8014516:	6393      	str	r3, [r2, #56]	; 0x38
  if( (BLE_AudioLevel_NotifyEvent == BLE_NOTIFY_UNSUB) &&
 8014518:	f89a 3000 	ldrb.w	r3, [sl]
 801451c:	2b02      	cmp	r3, #2
 801451e:	d10f      	bne.n	8014540 <main+0x4bc>
 8014520:	f894 3052 	ldrb.w	r3, [r4, #82]	; 0x52
 8014524:	b163      	cbz	r3, 8014540 <main+0x4bc>
    DeInitMics();
 8014526:	f7ff fa2b 	bl	8013980 <DeInitMics>
    AudioLevelEnable= 0;
 801452a:	2300      	movs	r3, #0
    if(HAL_TIM_OC_Stop_IT(&TimCCHandle, TIM_CHANNEL_2) != HAL_OK){
 801452c:	4853      	ldr	r0, [pc, #332]	; (801467c <main+0x5f8>)
    AudioLevelEnable= 0;
 801452e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    if(HAL_TIM_OC_Stop_IT(&TimCCHandle, TIM_CHANNEL_2) != HAL_OK){
 8014532:	2104      	movs	r1, #4
 8014534:	f7f6 fc5e 	bl	800adf4 <HAL_TIM_OC_Stop_IT>
 8014538:	b100      	cbz	r0, 801453c <main+0x4b8>
  while(1){
 801453a:	e7fe      	b.n	801453a <main+0x4b6>
    AudioLevelTimerEnabled= 0;
 801453c:	f884 0052 	strb.w	r0, [r4, #82]	; 0x52
      BLE_AudioLevel_NotifyEvent = BLE_NOTIFY_NOTHING;
 8014540:	2300      	movs	r3, #0
 8014542:	f88a 3000 	strb.w	r3, [sl]
    if(BLE_Inertial_NotifyEvent != BLE_NOTIFY_NOTHING)
 8014546:	f8df 9164 	ldr.w	r9, [pc, #356]	; 80146ac <main+0x628>
 801454a:	f899 a000 	ldrb.w	sl, [r9]
 801454e:	f1ba 0f00 	cmp.w	sl, #0
 8014552:	d025      	beq.n	80145a0 <main+0x51c>
  if( (BLE_Inertial_NotifyEvent == BLE_NOTIFY_SUB) &&
 8014554:	f1ba 0f01 	cmp.w	sl, #1
 8014558:	d110      	bne.n	801457c <main+0x4f8>
 801455a:	f894 3053 	ldrb.w	r3, [r4, #83]	; 0x53
 801455e:	b9e3      	cbnz	r3, 801459a <main+0x516>
    if(HAL_TIM_OC_Start_IT(&TimCCHandle, TIM_CHANNEL_3) != HAL_OK){
 8014560:	4846      	ldr	r0, [pc, #280]	; (801467c <main+0x5f8>)
 8014562:	2108      	movs	r1, #8
 8014564:	f7f6 fbcc 	bl	800ad00 <HAL_TIM_OC_Start_IT>
 8014568:	b100      	cbz	r0, 801456c <main+0x4e8>
  while(1){
 801456a:	e7fe      	b.n	801456a <main+0x4e6>
      uint32_t uhCapture = __HAL_TIM_GET_COUNTER(&TimCCHandle);
 801456c:	683a      	ldr	r2, [r7, #0]
      __HAL_TIM_SET_COMPARE(&TimCCHandle, TIM_CHANNEL_3, (uhCapture + uhCCR3_Val));
 801456e:	4946      	ldr	r1, [pc, #280]	; (8014688 <main+0x604>)
      uint32_t uhCapture = __HAL_TIM_GET_COUNTER(&TimCCHandle);
 8014570:	6a53      	ldr	r3, [r2, #36]	; 0x24
      __HAL_TIM_SET_COMPARE(&TimCCHandle, TIM_CHANNEL_3, (uhCapture + uhCCR3_Val));
 8014572:	6889      	ldr	r1, [r1, #8]
    InertialTimerEnabled= 1;
 8014574:	f884 a053 	strb.w	sl, [r4, #83]	; 0x53
      __HAL_TIM_SET_COMPARE(&TimCCHandle, TIM_CHANNEL_3, (uhCapture + uhCCR3_Val));
 8014578:	440b      	add	r3, r1
 801457a:	63d3      	str	r3, [r2, #60]	; 0x3c
  if( (BLE_Inertial_NotifyEvent == BLE_NOTIFY_UNSUB) &&
 801457c:	f899 3000 	ldrb.w	r3, [r9]
 8014580:	2b02      	cmp	r3, #2
 8014582:	d10a      	bne.n	801459a <main+0x516>
 8014584:	f894 3053 	ldrb.w	r3, [r4, #83]	; 0x53
 8014588:	b13b      	cbz	r3, 801459a <main+0x516>
    if(HAL_TIM_OC_Stop_IT(&TimCCHandle, TIM_CHANNEL_3) != HAL_OK){
 801458a:	483c      	ldr	r0, [pc, #240]	; (801467c <main+0x5f8>)
 801458c:	2108      	movs	r1, #8
 801458e:	f7f6 fc31 	bl	800adf4 <HAL_TIM_OC_Stop_IT>
 8014592:	b100      	cbz	r0, 8014596 <main+0x512>
  while(1){
 8014594:	e7fe      	b.n	8014594 <main+0x510>
    InertialTimerEnabled= 0;
 8014596:	f884 0053 	strb.w	r0, [r4, #83]	; 0x53
      BLE_Inertial_NotifyEvent = BLE_NOTIFY_NOTHING;
 801459a:	2300      	movs	r3, #0
 801459c:	f889 3000 	strb.w	r3, [r9]
    if(BLE_FFT_Amplitude_NotifyEvent != BLE_NOTIFY_NOTHING)
 80145a0:	f8df 910c 	ldr.w	r9, [pc, #268]	; 80146b0 <main+0x62c>
 80145a4:	f899 3000 	ldrb.w	r3, [r9]
 80145a8:	b13b      	cbz	r3, 80145ba <main+0x536>
  if(BLE_FFT_Amplitude_NotifyEvent == BLE_NOTIFY_SUB) {
 80145aa:	2b01      	cmp	r3, #1
 80145ac:	d141      	bne.n	8014632 <main+0x5ae>
    FFT_Amplitude= 1;
 80145ae:	4a39      	ldr	r2, [pc, #228]	; (8014694 <main+0x610>)
    PredictiveMaintenance= 1;
 80145b0:	6563      	str	r3, [r4, #84]	; 0x54
    FFT_Amplitude= 1;
 80145b2:	6013      	str	r3, [r2, #0]
      BLE_FFT_Amplitude_NotifyEvent = BLE_NOTIFY_NOTHING;
 80145b4:	2300      	movs	r3, #0
 80145b6:	f889 3000 	strb.w	r3, [r9]
    if(BLE_FFTAlarmSpeedStatus_NotifyEvent != BLE_NOTIFY_NOTHING)
 80145ba:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 80146b4 <main+0x630>
 80145be:	f899 3000 	ldrb.w	r3, [r9]
 80145c2:	b14b      	cbz	r3, 80145d8 <main+0x554>
  if(BLE_FFTAlarmSpeedStatus_NotifyEvent == BLE_NOTIFY_SUB) {
 80145c4:	2b01      	cmp	r3, #1
 80145c6:	d17b      	bne.n	80146c0 <main+0x63c>
    if(!PredictiveMaintenance)
 80145c8:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80145ca:	b912      	cbnz	r2, 80145d2 <main+0x54e>
      FFT_Alarm= 1;
 80145cc:	4a32      	ldr	r2, [pc, #200]	; (8014698 <main+0x614>)
      PredictiveMaintenance= 1;
 80145ce:	6563      	str	r3, [r4, #84]	; 0x54
      FFT_Alarm= 1;
 80145d0:	6013      	str	r3, [r2, #0]
      BLE_FFTAlarmSpeedStatus_NotifyEvent= BLE_NOTIFY_NOTHING;
 80145d2:	2300      	movs	r3, #0
 80145d4:	f889 3000 	strb.w	r3, [r9]
    if(BLE_FFTAlarmAccPeakStatus_NotifyEvent != BLE_NOTIFY_NOTHING)
 80145d8:	f8df 90dc 	ldr.w	r9, [pc, #220]	; 80146b8 <main+0x634>
 80145dc:	f899 3000 	ldrb.w	r3, [r9]
 80145e0:	b14b      	cbz	r3, 80145f6 <main+0x572>
  if(BLE_FFTAlarmAccPeakStatus_NotifyEvent == BLE_NOTIFY_SUB) {
 80145e2:	2b01      	cmp	r3, #1
 80145e4:	d17d      	bne.n	80146e2 <main+0x65e>
    if(!PredictiveMaintenance)
 80145e6:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80145e8:	b912      	cbnz	r2, 80145f0 <main+0x56c>
      FFT_Alarm= 1;
 80145ea:	4a2b      	ldr	r2, [pc, #172]	; (8014698 <main+0x614>)
      PredictiveMaintenance= 1;
 80145ec:	6563      	str	r3, [r4, #84]	; 0x54
      FFT_Alarm= 1;
 80145ee:	6013      	str	r3, [r2, #0]
      BLE_FFTAlarmAccPeakStatus_NotifyEvent= BLE_NOTIFY_NOTHING;
 80145f0:	2300      	movs	r3, #0
 80145f2:	f889 3000 	strb.w	r3, [r9]
    if(BLE_FFTAlarmSubrangeStatus_NotifyEvent != BLE_NOTIFY_NOTHING)
 80145f6:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 80146bc <main+0x638>
 80145fa:	f899 3000 	ldrb.w	r3, [r9]
 80145fe:	b14b      	cbz	r3, 8014614 <main+0x590>
  if(BLE_FFTAlarmSubrangeStatus_NotifyEvent == BLE_NOTIFY_SUB) {
 8014600:	2b01      	cmp	r3, #1
 8014602:	d17f      	bne.n	8014704 <main+0x680>
    if(!PredictiveMaintenance)
 8014604:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8014606:	b912      	cbnz	r2, 801460e <main+0x58a>
      FFT_Alarm= 1;
 8014608:	4a23      	ldr	r2, [pc, #140]	; (8014698 <main+0x614>)
      PredictiveMaintenance= 1;
 801460a:	6563      	str	r3, [r4, #84]	; 0x54
      FFT_Alarm= 1;
 801460c:	6013      	str	r3, [r2, #0]
      BLE_FFTAlarmSubrangeStatus_NotifyEvent= BLE_NOTIFY_NOTHING;     
 801460e:	2300      	movs	r3, #0
 8014610:	f889 3000 	strb.w	r3, [r9]
    if(ButtonPressed) {
 8014614:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8014616:	b123      	cbz	r3, 8014622 <main+0x59e>
  PREDMNT1_PRINTF("\r\nUser Button Pressed\r\n\r\n");
 8014618:	4820      	ldr	r0, [pc, #128]	; (801469c <main+0x618>)
 801461a:	f005 ffcb 	bl	801a5b4 <puts>
      ButtonPressed=0;       
 801461e:	2300      	movs	r3, #0
 8014620:	65a3      	str	r3, [r4, #88]	; 0x58
    if(PredictiveMaintenance){
 8014622:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8014624:	2b00      	cmp	r3, #0
 8014626:	d07f      	beq.n	8014728 <main+0x6a4>
      if (MotionSP_MainManager() != BSP_ERROR_NONE)
 8014628:	f7fe fc0a 	bl	8012e40 <MotionSP_MainManager>
 801462c:	2800      	cmp	r0, #0
 801462e:	d07b      	beq.n	8014728 <main+0x6a4>
  while(1){
 8014630:	e7fe      	b.n	8014630 <main+0x5ac>
  if(BLE_FFT_Amplitude_NotifyEvent == BLE_NOTIFY_UNSUB) {
 8014632:	2b02      	cmp	r3, #2
 8014634:	d1be      	bne.n	80145b4 <main+0x530>
    disable_FIFO();
 8014636:	f7fe fbc1 	bl	8012dbc <disable_FIFO>
    EnableDisable_ACC_HP_Filter(HPF_NONE);
 801463a:	2004      	movs	r0, #4
 801463c:	f7fd ffe6 	bl	801260c <EnableDisable_ACC_HP_Filter>
    FFT_Amplitude= 0;
 8014640:	4a14      	ldr	r2, [pc, #80]	; (8014694 <main+0x610>)
    PredictiveMaintenance= 0;
 8014642:	2300      	movs	r3, #0
 8014644:	6563      	str	r3, [r4, #84]	; 0x54
    FFT_Amplitude= 0;
 8014646:	6013      	str	r3, [r2, #0]
    MotionSP_Running = 0;
 8014648:	4a15      	ldr	r2, [pc, #84]	; (80146a0 <main+0x61c>)
 801464a:	7013      	strb	r3, [r2, #0]
 801464c:	e7b2      	b.n	80145b4 <main+0x530>
 801464e:	bf00      	nop
 8014650:	200021e8 	.word	0x200021e8
 8014654:	080238bf 	.word	0x080238bf
 8014658:	080238dc 	.word	0x080238dc
 801465c:	080238ff 	.word	0x080238ff
 8014660:	08023917 	.word	0x08023917
 8014664:	0802394e 	.word	0x0802394e
 8014668:	0802399a 	.word	0x0802399a
 801466c:	200099f0 	.word	0x200099f0
 8014670:	2000968c 	.word	0x2000968c
 8014674:	2000bc90 	.word	0x2000bc90
 8014678:	20009818 	.word	0x20009818
 801467c:	2000becc 	.word	0x2000becc
 8014680:	0802388d 	.word	0x0802388d
 8014684:	080239c1 	.word	0x080239c1
 8014688:	200003fc 	.word	0x200003fc
 801468c:	2000bf1c 	.word	0x2000bf1c
 8014690:	2000bf14 	.word	0x2000bf14
 8014694:	20009708 	.word	0x20009708
 8014698:	200096f4 	.word	0x200096f4
 801469c:	080239e4 	.word	0x080239e4
 80146a0:	20009704 	.word	0x20009704
 80146a4:	20003260 	.word	0x20003260
 80146a8:	20003230 	.word	0x20003230
 80146ac:	20003358 	.word	0x20003358
 80146b0:	20003328 	.word	0x20003328
 80146b4:	200032c8 	.word	0x200032c8
 80146b8:	20003298 	.word	0x20003298
 80146bc:	200032f8 	.word	0x200032f8
  if(BLE_FFTAlarmSpeedStatus_NotifyEvent == BLE_NOTIFY_UNSUB) {
 80146c0:	2b02      	cmp	r3, #2
 80146c2:	d186      	bne.n	80145d2 <main+0x54e>
    if(PredictiveMaintenance)
 80146c4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80146c6:	2b00      	cmp	r3, #0
 80146c8:	d083      	beq.n	80145d2 <main+0x54e>
      disable_FIFO();
 80146ca:	f7fe fb77 	bl	8012dbc <disable_FIFO>
      EnableDisable_ACC_HP_Filter(HPF_NONE);
 80146ce:	2004      	movs	r0, #4
 80146d0:	f7fd ff9c 	bl	801260c <EnableDisable_ACC_HP_Filter>
      FFT_Alarm= 0;
 80146d4:	4a72      	ldr	r2, [pc, #456]	; (80148a0 <main+0x81c>)
      PredictiveMaintenance= 0;
 80146d6:	2300      	movs	r3, #0
 80146d8:	6563      	str	r3, [r4, #84]	; 0x54
      FFT_Alarm= 0;
 80146da:	6013      	str	r3, [r2, #0]
      MotionSP_Running = 0;
 80146dc:	4a71      	ldr	r2, [pc, #452]	; (80148a4 <main+0x820>)
 80146de:	7013      	strb	r3, [r2, #0]
 80146e0:	e777      	b.n	80145d2 <main+0x54e>
  if(BLE_FFTAlarmAccPeakStatus_NotifyEvent == BLE_NOTIFY_UNSUB ){
 80146e2:	2b02      	cmp	r3, #2
 80146e4:	d184      	bne.n	80145f0 <main+0x56c>
    if(PredictiveMaintenance)
 80146e6:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80146e8:	2b00      	cmp	r3, #0
 80146ea:	d081      	beq.n	80145f0 <main+0x56c>
      disable_FIFO();
 80146ec:	f7fe fb66 	bl	8012dbc <disable_FIFO>
      EnableDisable_ACC_HP_Filter(HPF_NONE);
 80146f0:	2004      	movs	r0, #4
 80146f2:	f7fd ff8b 	bl	801260c <EnableDisable_ACC_HP_Filter>
      FFT_Alarm= 0;
 80146f6:	4a6a      	ldr	r2, [pc, #424]	; (80148a0 <main+0x81c>)
      PredictiveMaintenance= 0;
 80146f8:	2300      	movs	r3, #0
 80146fa:	6563      	str	r3, [r4, #84]	; 0x54
      FFT_Alarm= 0;
 80146fc:	6013      	str	r3, [r2, #0]
      MotionSP_Running = 0;
 80146fe:	4a69      	ldr	r2, [pc, #420]	; (80148a4 <main+0x820>)
 8014700:	7013      	strb	r3, [r2, #0]
 8014702:	e775      	b.n	80145f0 <main+0x56c>
  if(BLE_FFTAlarmSubrangeStatus_NotifyEvent == BLE_NOTIFY_UNSUB) {
 8014704:	2b02      	cmp	r3, #2
 8014706:	d182      	bne.n	801460e <main+0x58a>
    if(PredictiveMaintenance)
 8014708:	6d63      	ldr	r3, [r4, #84]	; 0x54
 801470a:	2b00      	cmp	r3, #0
 801470c:	f43f af7f 	beq.w	801460e <main+0x58a>
      disable_FIFO();
 8014710:	f7fe fb54 	bl	8012dbc <disable_FIFO>
      EnableDisable_ACC_HP_Filter(HPF_NONE);
 8014714:	2004      	movs	r0, #4
 8014716:	f7fd ff79 	bl	801260c <EnableDisable_ACC_HP_Filter>
      FFT_Alarm= 0;
 801471a:	4a61      	ldr	r2, [pc, #388]	; (80148a0 <main+0x81c>)
      PredictiveMaintenance= 0;
 801471c:	2300      	movs	r3, #0
 801471e:	6563      	str	r3, [r4, #84]	; 0x54
      FFT_Alarm= 0;
 8014720:	6013      	str	r3, [r2, #0]
      MotionSP_Running = 0;
 8014722:	4a60      	ldr	r2, [pc, #384]	; (80148a4 <main+0x820>)
 8014724:	7013      	strb	r3, [r2, #0]
 8014726:	e772      	b.n	801460e <main+0x58a>
    if(HCI_ProcessEvent) {
 8014728:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 801472a:	b11b      	cbz	r3, 8014734 <main+0x6b0>
      HCI_ProcessEvent=0;
 801472c:	2300      	movs	r3, #0
 801472e:	65e3      	str	r3, [r4, #92]	; 0x5c
      hci_user_evt_proc();
 8014730:	f7f7 fe38 	bl	800c3a4 <hci_user_evt_proc>
    if(SendEnv) {
 8014734:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8014736:	b34b      	cbz	r3, 801478c <main+0x708>
      SendEnv=0;
 8014738:	2300      	movs	r3, #0
 801473a:	6463      	str	r3, [r4, #68]	; 0x44
    ReadEnvironmentalData(&PressToSend,&HumToSend, &Temp1ToSend,&Temp2ToSend);
 801473c:	aa1c      	add	r2, sp, #112	; 0x70
 801473e:	ab17      	add	r3, sp, #92	; 0x5c
 8014740:	a914      	add	r1, sp, #80	; 0x50
 8014742:	a829      	add	r0, sp, #164	; 0xa4
 8014744:	f7ff fb3a 	bl	8013dbc <ReadEnvironmentalData>
    if(BLE_StdTerm_Service==BLE_SERV_ENABLE) {
 8014748:	4b57      	ldr	r3, [pc, #348]	; (80148a8 <main+0x824>)
 801474a:	f8bd 2050 	ldrh.w	r2, [sp, #80]	; 0x50
 801474e:	781b      	ldrb	r3, [r3, #0]
 8014750:	f9bd 105c 	ldrsh.w	r1, [sp, #92]	; 0x5c
 8014754:	2b01      	cmp	r3, #1
 8014756:	f9bd 3070 	ldrsh.w	r3, [sp, #112]	; 0x70
 801475a:	f040 8098 	bne.w	801488e <main+0x80a>
      BytesToWrite = sprintf((char *)BufferToWrite,"Sending: Press=%ld Hum=%d Temp1=%d Temp2=%d \r\n", PressToSend, HumToSend, Temp1ToSend, Temp2ToSend);
 801475e:	e9cd 3100 	strd	r3, r1, [sp]
 8014762:	4852      	ldr	r0, [pc, #328]	; (80148ac <main+0x828>)
 8014764:	4952      	ldr	r1, [pc, #328]	; (80148b0 <main+0x82c>)
 8014766:	4613      	mov	r3, r2
 8014768:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801476a:	f005 ff43 	bl	801a5f4 <siprintf>
 801476e:	4b51      	ldr	r3, [pc, #324]	; (80148b4 <main+0x830>)
 8014770:	b2c1      	uxtb	r1, r0
      Term_Update(BufferToWrite,BytesToWrite);
 8014772:	484e      	ldr	r0, [pc, #312]	; (80148ac <main+0x828>)
      BytesToWrite = sprintf((char *)BufferToWrite,"Sending: Press=%ld Hum=%d Temp1=%d Temp2=%d \r\n", PressToSend, HumToSend, Temp1ToSend, Temp2ToSend);
 8014774:	7019      	strb	r1, [r3, #0]
      Term_Update(BufferToWrite,BytesToWrite);
 8014776:	f7f9 f971 	bl	800da5c <Term_Update>
    BLE_EnvironmentalUpdate(PressToSend,HumToSend,Temp2ToSend,Temp1ToSend);
 801477a:	f9bd 3070 	ldrsh.w	r3, [sp, #112]	; 0x70
 801477e:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	; 0x5c
 8014782:	f8bd 1050 	ldrh.w	r1, [sp, #80]	; 0x50
 8014786:	9829      	ldr	r0, [sp, #164]	; 0xa4
 8014788:	f7f8 fac2 	bl	800cd10 <BLE_EnvironmentalUpdate>
    if (SendAudioLevel) {
 801478c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 801478e:	2b00      	cmp	r3, #0
 8014790:	d040      	beq.n	8014814 <main+0x790>
      SendAudioLevel = 0;
 8014792:	2300      	movs	r3, #0
 8014794:	f8df 9134 	ldr.w	r9, [pc, #308]	; 80148cc <main+0x848>
 8014798:	f8df a134 	ldr.w	sl, [pc, #308]	; 80148d0 <main+0x84c>
    RMS_Ch[NumberMic] /= ((float)(NumSample/AUDIO_IN_CHANNELS)*ALGO_PERIOD_AUDIO_LEVEL);
 801479c:	ed9f 9a46 	vldr	s18, [pc, #280]	; 80148b8 <main+0x834>
    DBNOISE_Value_Ch[NumberMic] = (uint16_t)((120.0f - 20 * log10f(32768 * (1 + 0.25f * (AUDIO_VOLUME_INPUT /*AudioInVolume*/ - 4))) + 10.0f * log10f(RMS_Ch[NumberMic])) * 0.3f + DBNOISE_Value_Old_Ch[NumberMic] * 0.7f);
 80147a0:	eddf 8a46 	vldr	s17, [pc, #280]	; 80148bc <main+0x838>
 80147a4:	ed9f 8a46 	vldr	s16, [pc, #280]	; 80148c0 <main+0x83c>
      SendAudioLevel = 0;
 80147a8:	64a3      	str	r3, [r4, #72]	; 0x48
  for(NumberMic=0;NumberMic<(AUDIO_IN_CHANNELS);NumberMic++) {
 80147aa:	f10d 0ba4 	add.w	fp, sp, #164	; 0xa4
      SendAudioLevel = 0;
 80147ae:	2202      	movs	r2, #2
    RMS_Ch[NumberMic] /= ((float)(NumSample/AUDIO_IN_CHANNELS)*ALGO_PERIOD_AUDIO_LEVEL);
 80147b0:	edd9 7a00 	vldr	s15, [r9]
 80147b4:	9207      	str	r2, [sp, #28]
 80147b6:	ee87 0a89 	vdiv.f32	s0, s15, s18
    DBNOISE_Value_Ch[NumberMic] = 0;
 80147ba:	2300      	movs	r3, #0
 80147bc:	f8ab 3000 	strh.w	r3, [fp]
    RMS_Ch[NumberMic] /= ((float)(NumSample/AUDIO_IN_CHANNELS)*ALGO_PERIOD_AUDIO_LEVEL);
 80147c0:	eca9 0a01 	vstmia	r9!, {s0}
    DBNOISE_Value_Ch[NumberMic] = (uint16_t)((120.0f - 20 * log10f(32768 * (1 + 0.25f * (AUDIO_VOLUME_INPUT /*AudioInVolume*/ - 4))) + 10.0f * log10f(RMS_Ch[NumberMic])) * 0.3f + DBNOISE_Value_Old_Ch[NumberMic] * 0.7f);
 80147c4:	f009 fb00 	bl	801ddc8 <log10f>
 80147c8:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 80147cc:	eef0 6a68 	vmov.f32	s13, s17
 80147d0:	eee0 6a27 	vfma.f32	s13, s0, s15
  for(NumberMic=0;NumberMic<(AUDIO_IN_CHANNELS);NumberMic++) {
 80147d4:	9a07      	ldr	r2, [sp, #28]
    DBNOISE_Value_Ch[NumberMic] = (uint16_t)((120.0f - 20 * log10f(32768 * (1 + 0.25f * (AUDIO_VOLUME_INPUT /*AudioInVolume*/ - 4))) + 10.0f * log10f(RMS_Ch[NumberMic])) * 0.3f + DBNOISE_Value_Old_Ch[NumberMic] * 0.7f);
 80147d6:	edda 7a00 	vldr	s15, [sl]
 80147da:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 80148c4 <main+0x840>
 80147de:	ee67 7a88 	vmul.f32	s15, s15, s16
  for(NumberMic=0;NumberMic<(AUDIO_IN_CHANNELS);NumberMic++) {
 80147e2:	2a01      	cmp	r2, #1
    DBNOISE_Value_Ch[NumberMic] = (uint16_t)((120.0f - 20 * log10f(32768 * (1 + 0.25f * (AUDIO_VOLUME_INPUT /*AudioInVolume*/ - 4))) + 10.0f * log10f(RMS_Ch[NumberMic])) * 0.3f + DBNOISE_Value_Old_Ch[NumberMic] * 0.7f);
 80147e4:	eee6 7a87 	vfma.f32	s15, s13, s14
 80147e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80147ec:	ee17 3a90 	vmov	r3, s15
 80147f0:	b29b      	uxth	r3, r3
    DBNOISE_Value_Old_Ch[NumberMic] = DBNOISE_Value_Ch[NumberMic];
 80147f2:	ee07 3a90 	vmov	s15, r3
 80147f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
    DBNOISE_Value_Ch[NumberMic] = (uint16_t)((120.0f - 20 * log10f(32768 * (1 + 0.25f * (AUDIO_VOLUME_INPUT /*AudioInVolume*/ - 4))) + 10.0f * log10f(RMS_Ch[NumberMic])) * 0.3f + DBNOISE_Value_Old_Ch[NumberMic] * 0.7f);
 80147fa:	f82b 3b02 	strh.w	r3, [fp], #2
    RMS_Ch[NumberMic] = 0.0f;
 80147fe:	f04f 0300 	mov.w	r3, #0
    DBNOISE_Value_Old_Ch[NumberMic] = DBNOISE_Value_Ch[NumberMic];
 8014802:	ecea 7a01 	vstmia	sl!, {s15}
    RMS_Ch[NumberMic] = 0.0f;
 8014806:	f849 3c04 	str.w	r3, [r9, #-4]
  for(NumberMic=0;NumberMic<(AUDIO_IN_CHANNELS);NumberMic++) {
 801480a:	d146      	bne.n	801489a <main+0x816>
  BLE_AudioLevelUpdate(DBNOISE_Value_Ch, AUDIO_IN_CHANNELS);
 801480c:	2102      	movs	r1, #2
 801480e:	a829      	add	r0, sp, #164	; 0xa4
 8014810:	f7f8 f984 	bl	800cb1c <BLE_AudioLevelUpdate>
    if(SendAccGyroMag) {
 8014814:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8014816:	2b00      	cmp	r3, #0
 8014818:	d037      	beq.n	801488a <main+0x806>
      SendAccGyroMag=0;
 801481a:	2300      	movs	r3, #0
 801481c:	64e3      	str	r3, [r4, #76]	; 0x4c
  if(TargetBoardFeatures.AccSensorIsInit)
 801481e:	4c2a      	ldr	r4, [pc, #168]	; (80148c8 <main+0x844>)
  ACC_Value.x = ACC_Value.y = ACC_Value.z =0;
 8014820:	930e      	str	r3, [sp, #56]	; 0x38
 8014822:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
  GYR_Value.x = GYR_Value.y = GYR_Value.z =0;
 8014826:	e9cd 3312 	strd	r3, r3, [sp, #72]	; 0x48
  MAG_Value.x = MAG_Value.y = MAG_Value.z =0;
 801482a:	e9cd 3315 	strd	r3, r3, [sp, #84]	; 0x54
  GYR_Value.x = GYR_Value.y = GYR_Value.z =0;
 801482e:	9311      	str	r3, [sp, #68]	; 0x44
  MAG_Value.x = MAG_Value.y = MAG_Value.z =0;
 8014830:	9314      	str	r3, [sp, #80]	; 0x50
  if(TargetBoardFeatures.AccSensorIsInit)
 8014832:	7923      	ldrb	r3, [r4, #4]
 8014834:	b123      	cbz	r3, 8014840 <main+0x7bc>
    MOTION_SENSOR_GetAxes(ACCELERO_INSTANCE, MOTION_ACCELERO, &ACC_Value);
 8014836:	aa0e      	add	r2, sp, #56	; 0x38
 8014838:	2102      	movs	r1, #2
 801483a:	2001      	movs	r0, #1
 801483c:	f000 fc5a 	bl	80150f4 <IKS01A3_MOTION_SENSOR_GetAxes>
  if(TargetBoardFeatures.GyroSensorIsInit)
 8014840:	7963      	ldrb	r3, [r4, #5]
 8014842:	b123      	cbz	r3, 801484e <main+0x7ca>
    MOTION_SENSOR_GetAxes(GYRO_INSTANCE,MOTION_GYRO, &GYR_Value);
 8014844:	2101      	movs	r1, #1
 8014846:	aa11      	add	r2, sp, #68	; 0x44
 8014848:	4608      	mov	r0, r1
 801484a:	f000 fc53 	bl	80150f4 <IKS01A3_MOTION_SENSOR_GetAxes>
  if(TargetBoardFeatures.MagSensorIsInit)
 801484e:	79a3      	ldrb	r3, [r4, #6]
 8014850:	b123      	cbz	r3, 801485c <main+0x7d8>
    MOTION_SENSOR_GetAxes(MAGNETO_INSTANCE, MOTION_MAGNETO, &MAG_Value);
 8014852:	aa14      	add	r2, sp, #80	; 0x50
 8014854:	2104      	movs	r1, #4
 8014856:	2000      	movs	r0, #0
 8014858:	f000 fc4c 	bl	80150f4 <IKS01A3_MOTION_SENSOR_GetAxes>
  ACC_SensorValue.x= ACC_Value.x;
 801485c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801485e:	9317      	str	r3, [sp, #92]	; 0x5c
  ACC_SensorValue.y= ACC_Value.y;
 8014860:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014862:	9318      	str	r3, [sp, #96]	; 0x60
  ACC_SensorValue.z= ACC_Value.z;
 8014864:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014866:	9319      	str	r3, [sp, #100]	; 0x64
  GYR_SensorValue.x= GYR_Value.x;
 8014868:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801486a:	931c      	str	r3, [sp, #112]	; 0x70
  GYR_SensorValue.y= GYR_Value.y;
 801486c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801486e:	931d      	str	r3, [sp, #116]	; 0x74
  GYR_SensorValue.z= GYR_Value.z;
 8014870:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8014872:	931e      	str	r3, [sp, #120]	; 0x78
  MAG_SensorValue.x= MAG_Value.x;
 8014874:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8014876:	9329      	str	r3, [sp, #164]	; 0xa4
  MAG_SensorValue.y= MAG_Value.y;
 8014878:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801487a:	932a      	str	r3, [sp, #168]	; 0xa8
  BLE_AccGyroMagUpdate(&ACC_SensorValue,&GYR_SensorValue,&MAG_SensorValue);
 801487c:	aa29      	add	r2, sp, #164	; 0xa4
  MAG_SensorValue.z= MAG_Value.z;
 801487e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8014880:	932b      	str	r3, [sp, #172]	; 0xac
  BLE_AccGyroMagUpdate(&ACC_SensorValue,&GYR_SensorValue,&MAG_SensorValue);
 8014882:	a91c      	add	r1, sp, #112	; 0x70
 8014884:	a817      	add	r0, sp, #92	; 0x5c
 8014886:	f7f8 fe0f 	bl	800d4a8 <BLE_AccGyroMagUpdate>
    __WFI();
 801488a:	bf30      	wfi
    if(!connected)
 801488c:	e5c6      	b.n	801441c <main+0x398>
      PREDMNT1_PRINTF("Sending: Press=%ld Hum=%d Temp1=%d Temp2=%d \r\n", PressToSend, HumToSend, Temp1ToSend, Temp2ToSend);
 801488e:	9100      	str	r1, [sp, #0]
 8014890:	4807      	ldr	r0, [pc, #28]	; (80148b0 <main+0x82c>)
 8014892:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8014894:	f005 fe08 	bl	801a4a8 <iprintf>
 8014898:	e76f      	b.n	801477a <main+0x6f6>
 801489a:	2201      	movs	r2, #1
 801489c:	e788      	b.n	80147b0 <main+0x72c>
 801489e:	bf00      	nop
 80148a0:	200096f4 	.word	0x200096f4
 80148a4:	20009704 	.word	0x20009704
 80148a8:	20009b34 	.word	0x20009b34
 80148ac:	20009a30 	.word	0x20009a30
 80148b0:	080239fd 	.word	0x080239fd
 80148b4:	20009b3d 	.word	0x20009b3d
 80148b8:	44480000 	.word	0x44480000
 80148bc:	40b379b0 	.word	0x40b379b0
 80148c0:	3f333333 	.word	0x3f333333
 80148c4:	3e99999a 	.word	0x3e99999a
 80148c8:	2000bc90 	.word	0x2000bc90
 80148cc:	2000bf1c 	.word	0x2000bf1c
 80148d0:	2000bf14 	.word	0x2000bf14

080148d4 <HAL_MspInit>:
  
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80148d4:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80148d6:	4b0d      	ldr	r3, [pc, #52]	; (801490c <HAL_MspInit+0x38>)
 80148d8:	2100      	movs	r1, #0
 80148da:	9100      	str	r1, [sp, #0]
 80148dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80148de:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80148e2:	645a      	str	r2, [r3, #68]	; 0x44
 80148e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80148e6:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80148ea:	9200      	str	r2, [sp, #0]
 80148ec:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80148ee:	9101      	str	r1, [sp, #4]
 80148f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80148f2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80148f6:	641a      	str	r2, [r3, #64]	; 0x40
 80148f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80148fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80148fe:	9301      	str	r3, [sp, #4]
 8014900:	9b01      	ldr	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8014902:	2003      	movs	r0, #3
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8014904:	b002      	add	sp, #8
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8014906:	f7f2 be4b 	b.w	80075a0 <HAL_NVIC_SetPriorityGrouping>
 801490a:	bf00      	nop
 801490c:	40023800 	.word	0x40023800

08014910 <HAL_CRC_MspInit>:
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
  if(hcrc->Instance==CRC)
 8014910:	6802      	ldr	r2, [r0, #0]
 8014912:	4b09      	ldr	r3, [pc, #36]	; (8014938 <HAL_CRC_MspInit+0x28>)
 8014914:	429a      	cmp	r2, r3
{
 8014916:	b082      	sub	sp, #8
  if(hcrc->Instance==CRC)
 8014918:	d10b      	bne.n	8014932 <HAL_CRC_MspInit+0x22>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 801491a:	2300      	movs	r3, #0
 801491c:	9301      	str	r3, [sp, #4]
 801491e:	4b07      	ldr	r3, [pc, #28]	; (801493c <HAL_CRC_MspInit+0x2c>)
 8014920:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8014922:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8014926:	631a      	str	r2, [r3, #48]	; 0x30
 8014928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801492a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801492e:	9301      	str	r3, [sp, #4]
 8014930:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8014932:	b002      	add	sp, #8
 8014934:	4770      	bx	lr
 8014936:	bf00      	nop
 8014938:	40023000 	.word	0x40023000
 801493c:	40023800 	.word	0x40023800

08014940 <HAL_CRC_MspDeInit>:
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspDeInit(CRC_HandleTypeDef* hcrc)
{
  if(hcrc->Instance==CRC)
 8014940:	6802      	ldr	r2, [r0, #0]
 8014942:	4b04      	ldr	r3, [pc, #16]	; (8014954 <HAL_CRC_MspDeInit+0x14>)
 8014944:	429a      	cmp	r2, r3
  {
  /* USER CODE BEGIN CRC_MspDeInit 0 */

  /* USER CODE END CRC_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_CRC_CLK_DISABLE();
 8014946:	bf01      	itttt	eq
 8014948:	4a03      	ldreq	r2, [pc, #12]	; (8014958 <HAL_CRC_MspDeInit+0x18>)
 801494a:	6b13      	ldreq	r3, [r2, #48]	; 0x30
 801494c:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8014950:	6313      	streq	r3, [r2, #48]	; 0x30
  /* USER CODE BEGIN CRC_MspDeInit 1 */

  /* USER CODE END CRC_MspDeInit 1 */
  }

}
 8014952:	4770      	bx	lr
 8014954:	40023000 	.word	0x40023000
 8014958:	40023800 	.word	0x40023800

0801495c <HAL_TIM_OC_MspInit>:
  *  - Peripheral's Interrupt Configuration
  * @param htim: TIM handle pointer
  * @retval None
  */
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{ 
 801495c:	b507      	push	{r0, r1, r2, lr}
  /* TIM1 Peripheral clock enable */
  __HAL_RCC_TIM1_CLK_ENABLE();
 801495e:	4b0b      	ldr	r3, [pc, #44]	; (801498c <HAL_TIM_OC_MspInit+0x30>)
 8014960:	2200      	movs	r2, #0
 8014962:	9201      	str	r2, [sp, #4]
 8014964:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8014966:	f041 0101 	orr.w	r1, r1, #1
 801496a:	6459      	str	r1, [r3, #68]	; 0x44
 801496c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801496e:	f003 0301 	and.w	r3, r3, #1
 8014972:	9301      	str	r3, [sp, #4]

  /*  Enable the TIM1 global Interrupt & set priority */
  HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0x09, 0x00);
 8014974:	2109      	movs	r1, #9
 8014976:	201b      	movs	r0, #27
  __HAL_RCC_TIM1_CLK_ENABLE();
 8014978:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0x09, 0x00);
 801497a:	f7f2 fe23 	bl	80075c4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 801497e:	201b      	movs	r0, #27
}
 8014980:	b003      	add	sp, #12
 8014982:	f85d eb04 	ldr.w	lr, [sp], #4
  HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8014986:	f7f2 be4f 	b.w	8007628 <HAL_NVIC_EnableIRQ>
 801498a:	bf00      	nop
 801498c:	40023800 	.word	0x40023800

08014990 <NMI_Handler>:
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
}
 8014990:	4770      	bx	lr

08014992 <HardFault_Handler>:
  * @retval None
  */
void HardFault_Handler(void)
{
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8014992:	e7fe      	b.n	8014992 <HardFault_Handler>

08014994 <MemManage_Handler>:
  * @retval None
  */
void MemManage_Handler(void)
{
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8014994:	e7fe      	b.n	8014994 <MemManage_Handler>

08014996 <BusFault_Handler>:
  * @retval None
  */
void BusFault_Handler(void)
{
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8014996:	e7fe      	b.n	8014996 <BusFault_Handler>

08014998 <UsageFault_Handler>:
  * @retval None
  */
void UsageFault_Handler(void)
{
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8014998:	e7fe      	b.n	8014998 <UsageFault_Handler>

0801499a <SVC_Handler>:
 801499a:	4770      	bx	lr

0801499c <DebugMon_Handler>:
 801499c:	4770      	bx	lr

0801499e <PendSV_Handler>:
 801499e:	4770      	bx	lr

080149a0 <SysTick_Handler>:
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
  HAL_IncTick();
 80149a0:	f7f2 bde8 	b.w	8007574 <HAL_IncTick>

080149a4 <TIM1_CC_IRQHandler>:
  * @param  None
  * @retval None
  */
void TIM1_CC_IRQHandler(void)
{
  HAL_TIM_IRQHandler(&TimCCHandle);
 80149a4:	4801      	ldr	r0, [pc, #4]	; (80149ac <TIM1_CC_IRQHandler+0x8>)
 80149a6:	f7f5 bddc 	b.w	800a562 <HAL_TIM_IRQHandler>
 80149aa:	bf00      	nop
 80149ac:	2000becc 	.word	0x2000becc

080149b0 <DMA1_Stream3_IRQHandler>:
  * @param  None
  * @retval None
  */
void AUDIO_IN_I2S_IRQHandler(void)
{
  HAL_DMA_IRQHandler(hAudioInI2s.hdmarx);
 80149b0:	4b01      	ldr	r3, [pc, #4]	; (80149b8 <DMA1_Stream3_IRQHandler+0x8>)
 80149b2:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80149b4:	f7f3 b800 	b.w	80079b8 <HAL_DMA_IRQHandler>
 80149b8:	20009918 	.word	0x20009918

080149bc <EXTI0_IRQHandler>:
  * @param  None
  * @retval None
  */
void EXTI0_IRQHandler(void)
{
  HAL_EXTI_IRQHandler(&H_EXTI_0);
 80149bc:	4801      	ldr	r0, [pc, #4]	; (80149c4 <EXTI0_IRQHandler+0x8>)
 80149be:	f7f3 b8c5 	b.w	8007b4c <HAL_EXTI_IRQHandler>
 80149c2:	bf00      	nop
 80149c4:	2000bea0 	.word	0x2000bea0

080149c8 <EXTI15_10_IRQHandler>:
  *         interrupt request for ism330dlc.
  * @param  None
  * @retval None
  */
void EXTI15_10_IRQHandler(void)
{
 80149c8:	b508      	push	{r3, lr}
  #ifdef IKS01A3_ISM330DLC_0
    HAL_GPIO_EXTI_IRQHandler(M_INT2_O_PIN);
 80149ca:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80149ce:	f7f3 fbf9 	bl	80081c4 <HAL_GPIO_EXTI_IRQHandler>
  #endif /* IKS01A3_ISM330DLC_0 */
    
    HAL_EXTI_IRQHandler(&H_EXTI_13);
}
 80149d2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    HAL_EXTI_IRQHandler(&H_EXTI_13);
 80149d6:	4801      	ldr	r0, [pc, #4]	; (80149dc <EXTI15_10_IRQHandler+0x14>)
 80149d8:	f7f3 b8b8 	b.w	8007b4c <HAL_EXTI_IRQHandler>
 80149dc:	20000420 	.word	0x20000420

080149e0 <BSP_LED_Init>:
 *              @arg  LED3
 *              @arg  LED4
 * @retval HAL status
 */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 80149e0:	b530      	push	{r4, r5, lr}
 80149e2:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct;
  
  /* LED2 is on the same GPIO Port */
  LED2_GPIO_CLK_ENABLE();    
 80149e4:	2400      	movs	r4, #0
 80149e6:	4b0f      	ldr	r3, [pc, #60]	; (8014a24 <BSP_LED_Init+0x44>)
 80149e8:	9400      	str	r4, [sp, #0]
 80149ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  GPIO_InitStruct.Pin   = LED_PIN [Led];
  GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull  = GPIO_PULLUP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH; 
  
  HAL_GPIO_Init(LED_PORT [Led], &GPIO_InitStruct); 
 80149ec:	480e      	ldr	r0, [pc, #56]	; (8014a28 <BSP_LED_Init+0x48>)
  LED2_GPIO_CLK_ENABLE();    
 80149ee:	f042 0201 	orr.w	r2, r2, #1
 80149f2:	631a      	str	r2, [r3, #48]	; 0x30
 80149f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80149f6:	f003 0301 	and.w	r3, r3, #1
 80149fa:	9300      	str	r3, [sp, #0]
 80149fc:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
 80149fe:	2520      	movs	r5, #32
 8014a00:	2301      	movs	r3, #1
 8014a02:	e9cd 5301 	strd	r5, r3, [sp, #4]
  GPIO_InitStruct.Pull  = GPIO_PULLUP;
 8014a06:	9303      	str	r3, [sp, #12]
  HAL_GPIO_Init(LED_PORT [Led], &GPIO_InitStruct); 
 8014a08:	a901      	add	r1, sp, #4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH; 
 8014a0a:	2302      	movs	r3, #2
 8014a0c:	9304      	str	r3, [sp, #16]
  HAL_GPIO_Init(LED_PORT [Led], &GPIO_InitStruct); 
 8014a0e:	f7f3 fa6b 	bl	8007ee8 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LED_PORT [Led], LED_PIN [Led], GPIO_PIN_RESET);
 8014a12:	4805      	ldr	r0, [pc, #20]	; (8014a28 <BSP_LED_Init+0x48>)
 8014a14:	4622      	mov	r2, r4
 8014a16:	4629      	mov	r1, r5
 8014a18:	f7f3 fbce 	bl	80081b8 <HAL_GPIO_WritePin>
  
  return BSP_ERROR_NONE;
}
 8014a1c:	4620      	mov	r0, r4
 8014a1e:	b007      	add	sp, #28
 8014a20:	bd30      	pop	{r4, r5, pc}
 8014a22:	bf00      	nop
 8014a24:	40023800 	.word	0x40023800
 8014a28:	40020000 	.word	0x40020000

08014a2c <BSP_LED_On>:
 *              @arg  LED3
 *              @arg  LED4
 * @retval HAL status
 */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 8014a2c:	b508      	push	{r3, lr}
  HAL_GPIO_WritePin(LED_PORT [Led], LED_PIN [Led], GPIO_PIN_SET);
 8014a2e:	4803      	ldr	r0, [pc, #12]	; (8014a3c <BSP_LED_On+0x10>)
 8014a30:	2201      	movs	r2, #1
 8014a32:	2120      	movs	r1, #32
 8014a34:	f7f3 fbc0 	bl	80081b8 <HAL_GPIO_WritePin>
  
  return BSP_ERROR_NONE;
}
 8014a38:	2000      	movs	r0, #0
 8014a3a:	bd08      	pop	{r3, pc}
 8014a3c:	40020000 	.word	0x40020000

08014a40 <BSP_LED_Off>:
 *              @arg  LED3
 *              @arg  LED4
 * @retval HAL status
 */
int32_t BSP_LED_Off(Led_TypeDef Led)
{
 8014a40:	b508      	push	{r3, lr}
  HAL_GPIO_WritePin(LED_PORT [Led], LED_PIN [Led], GPIO_PIN_RESET);
 8014a42:	4803      	ldr	r0, [pc, #12]	; (8014a50 <BSP_LED_Off+0x10>)
 8014a44:	2200      	movs	r2, #0
 8014a46:	2120      	movs	r1, #32
 8014a48:	f7f3 fbb6 	bl	80081b8 <HAL_GPIO_WritePin>
  
  return BSP_ERROR_NONE;
}
 8014a4c:	2000      	movs	r0, #0
 8014a4e:	bd08      	pop	{r3, pc}
 8014a50:	40020000 	.word	0x40020000

08014a54 <BSP_PB_Init>:
  *                    @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line 
  *                                            with interrupt generation capability
  * @retval BSP status
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8014a54:	b530      	push	{r4, r5, lr}
 8014a56:	b087      	sub	sp, #28
  static const BSP_EXTI_LineCallback ButtonCallback[BUTTONn] ={BUTTON_USER_EXTI_Callback};                                                
  static const uint32_t  BSP_BUTTON_PRIO [BUTTONn] ={BSP_BUTTON_USER_IT_PRIORITY};  											     
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] ={USER_BUTTON_EXTI_LINE};
  
  /* Enable the BUTTON clock*/ 
  USER_BUTTON_GPIO_CLK_ENABLE();
 8014a58:	2300      	movs	r3, #0
 8014a5a:	9300      	str	r3, [sp, #0]
 8014a5c:	4b1e      	ldr	r3, [pc, #120]	; (8014ad8 <BSP_PB_Init+0x84>)
 8014a5e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8014a60:	f042 0204 	orr.w	r2, r2, #4
 8014a64:	631a      	str	r2, [r3, #48]	; 0x30
 8014a66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014a68:	f003 0304 	and.w	r3, r3, #4
 8014a6c:	9300      	str	r3, [sp, #0]
 8014a6e:	9b00      	ldr	r3, [sp, #0]
  gpio_init_structure.Pin = BUTTON_PIN [Button];
 8014a70:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8014a74:	9301      	str	r3, [sp, #4]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 8014a76:	2302      	movs	r3, #2
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8014a78:	e9cd 3303 	strd	r3, r3, [sp, #12]
{
 8014a7c:	4605      	mov	r5, r0
  
  if(ButtonMode == BUTTON_MODE_GPIO)
 8014a7e:	460c      	mov	r4, r1
 8014a80:	b931      	cbnz	r1, 8014a90 <BSP_PB_Init+0x3c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8014a82:	9102      	str	r1, [sp, #8]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 8014a84:	4815      	ldr	r0, [pc, #84]	; (8014adc <BSP_PB_Init+0x88>)
 8014a86:	a901      	add	r1, sp, #4
 8014a88:	f7f3 fa2e 	bl	8007ee8 <HAL_GPIO_Init>
  int32_t ret = BSP_ERROR_NONE;
 8014a8c:	4620      	mov	r0, r4
      HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
      HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
	}
  }
  
  return ret;
 8014a8e:	e010      	b.n	8014ab2 <BSP_PB_Init+0x5e>
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8014a90:	4b13      	ldr	r3, [pc, #76]	; (8014ae0 <BSP_PB_Init+0x8c>)
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8014a92:	4812      	ldr	r0, [pc, #72]	; (8014adc <BSP_PB_Init+0x88>)
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8014a94:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8014a96:	a901      	add	r1, sp, #4
 8014a98:	f7f3 fa26 	bl	8007ee8 <HAL_GPIO_Init>
    if(HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]) != HAL_OK)
 8014a9c:	4b11      	ldr	r3, [pc, #68]	; (8014ae4 <BSP_PB_Init+0x90>)
 8014a9e:	4912      	ldr	r1, [pc, #72]	; (8014ae8 <BSP_PB_Init+0x94>)
 8014aa0:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8014aa4:	4628      	mov	r0, r5
 8014aa6:	f7f3 f84b 	bl	8007b40 <HAL_EXTI_GetHandle>
 8014aaa:	4601      	mov	r1, r0
 8014aac:	b118      	cbz	r0, 8014ab6 <BSP_PB_Init+0x62>
      ret = BSP_ERROR_PERIPH_FAILURE;
 8014aae:	f06f 0003 	mvn.w	r0, #3
}
 8014ab2:	b007      	add	sp, #28
 8014ab4:	bd30      	pop	{r4, r5, pc}
    else if (HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]) != HAL_OK)
 8014ab6:	4a0d      	ldr	r2, [pc, #52]	; (8014aec <BSP_PB_Init+0x98>)
 8014ab8:	4628      	mov	r0, r5
 8014aba:	f7f3 f83b 	bl	8007b34 <HAL_EXTI_RegisterCallback>
 8014abe:	4604      	mov	r4, r0
 8014ac0:	2800      	cmp	r0, #0
 8014ac2:	d1f4      	bne.n	8014aae <BSP_PB_Init+0x5a>
      HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8014ac4:	4602      	mov	r2, r0
 8014ac6:	210f      	movs	r1, #15
 8014ac8:	2028      	movs	r0, #40	; 0x28
 8014aca:	f7f2 fd7b 	bl	80075c4 <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8014ace:	2028      	movs	r0, #40	; 0x28
 8014ad0:	f7f2 fdaa 	bl	8007628 <HAL_NVIC_EnableIRQ>
 8014ad4:	e7da      	b.n	8014a8c <BSP_PB_Init+0x38>
 8014ad6:	bf00      	nop
 8014ad8:	40023800 	.word	0x40023800
 8014adc:	40020800 	.word	0x40020800
 8014ae0:	10110000 	.word	0x10110000
 8014ae4:	20000420 	.word	0x20000420
 8014ae8:	0600000d 	.word	0x0600000d
 8014aec:	08014af3 	.word	0x08014af3

08014af0 <BSP_PB_Callback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);
  
  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */   
}
 8014af0:	4770      	bx	lr

08014af2 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  User EXTI line detection callbacks.
  * @retval None
  */
static void BUTTON_USER_EXTI_Callback(void)
{   
 8014af2:	b508      	push	{r3, lr}
  BSP_PB_Callback(BUTTON_USER);
 8014af4:	2000      	movs	r0, #0
 8014af6:	f7ff fffb 	bl	8014af0 <BSP_PB_Callback>
}
 8014afa:	bd08      	pop	{r3, pc}

08014afc <MX_USART2_UART_Init>:

__weak HAL_StatusTypeDef MX_USART2_UART_Init(UART_HandleTypeDef* huart)
{
  HAL_StatusTypeDef ret = HAL_OK;
  huart->Instance = USART2;
  huart->Init.BaudRate = 115200;
 8014afc:	4909      	ldr	r1, [pc, #36]	; (8014b24 <MX_USART2_UART_Init+0x28>)
 8014afe:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
{
 8014b02:	b508      	push	{r3, lr}
  huart->Init.BaudRate = 115200;
 8014b04:	e9c0 1200 	strd	r1, r2, [r0]
  huart->Init.WordLength = UART_WORDLENGTH_8B;
 8014b08:	2200      	movs	r2, #0
  huart->Init.StopBits = UART_STOPBITS_1;
  huart->Init.Parity = UART_PARITY_NONE;
  huart->Init.Mode = UART_MODE_TX_RX;
 8014b0a:	210c      	movs	r1, #12
  huart->Init.StopBits = UART_STOPBITS_1;
 8014b0c:	e9c0 2202 	strd	r2, r2, [r0, #8]
  huart->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8014b10:	e9c0 1205 	strd	r1, r2, [r0, #20]
  huart->Init.Parity = UART_PARITY_NONE;
 8014b14:	6102      	str	r2, [r0, #16]
  huart->Init.OverSampling = UART_OVERSAMPLING_16;
 8014b16:	61c2      	str	r2, [r0, #28]
  if (HAL_UART_Init(huart) != HAL_OK)
 8014b18:	f7f6 fabf 	bl	800b09a <HAL_UART_Init>
  {
    ret = HAL_ERROR;
  }

  return ret;
}
 8014b1c:	3800      	subs	r0, #0
 8014b1e:	bf18      	it	ne
 8014b20:	2001      	movne	r0, #1
 8014b22:	bd08      	pop	{r3, pc}
 8014b24:	40004400 	.word	0x40004400

08014b28 <BSP_COM_Init>:
{
 8014b28:	b510      	push	{r4, lr}
  if(COM > COMn)
 8014b2a:	2801      	cmp	r0, #1
{
 8014b2c:	b088      	sub	sp, #32
  if(COM > COMn)
 8014b2e:	d835      	bhi.n	8014b9c <BSP_COM_Init+0x74>
     hcom_uart[COM].Instance = COM_USART[COM];
 8014b30:	4a1c      	ldr	r2, [pc, #112]	; (8014ba4 <BSP_COM_Init+0x7c>)
 8014b32:	491d      	ldr	r1, [pc, #116]	; (8014ba8 <BSP_COM_Init+0x80>)
 8014b34:	2344      	movs	r3, #68	; 0x44
 8014b36:	4343      	muls	r3, r0
 8014b38:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 8014b3c:	18cc      	adds	r4, r1, r3
 8014b3e:	6882      	ldr	r2, [r0, #8]
 8014b40:	50ca      	str	r2, [r1, r3]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_USART2_CLK_ENABLE();
 8014b42:	4b1a      	ldr	r3, [pc, #104]	; (8014bac <BSP_COM_Init+0x84>)
 8014b44:	2200      	movs	r2, #0
 8014b46:	9201      	str	r2, [sp, #4]
 8014b48:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8014b4a:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 8014b4e:	6419      	str	r1, [r3, #64]	; 0x40
 8014b50:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8014b52:	f401 3100 	and.w	r1, r1, #131072	; 0x20000
 8014b56:	9101      	str	r1, [sp, #4]
 8014b58:	9901      	ldr	r1, [sp, #4]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8014b5a:	9202      	str	r2, [sp, #8]
 8014b5c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8014b5e:	f041 0101 	orr.w	r1, r1, #1
 8014b62:	6319      	str	r1, [r3, #48]	; 0x30
 8014b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014b66:	9205      	str	r2, [sp, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8014b68:	f003 0301 	and.w	r3, r3, #1
 8014b6c:	9302      	str	r3, [sp, #8]
 8014b6e:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014b70:	210c      	movs	r1, #12
 8014b72:	2302      	movs	r3, #2
 8014b74:	e9cd 1303 	strd	r1, r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8014b78:	2003      	movs	r0, #3
 8014b7a:	2307      	movs	r3, #7
 8014b7c:	e9cd 0306 	strd	r0, r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8014b80:	a903      	add	r1, sp, #12
 8014b82:	480b      	ldr	r0, [pc, #44]	; (8014bb0 <BSP_COM_Init+0x88>)
 8014b84:	f7f3 f9b0 	bl	8007ee8 <HAL_GPIO_Init>
    if (MX_USART2_UART_Init(&hcom_uart[COM]))
 8014b88:	4620      	mov	r0, r4
 8014b8a:	f7ff ffb7 	bl	8014afc <MX_USART2_UART_Init>
 8014b8e:	2800      	cmp	r0, #0
      ret = BSP_ERROR_PERIPH_FAILURE;
 8014b90:	bf0c      	ite	eq
 8014b92:	2000      	moveq	r0, #0
 8014b94:	f06f 0003 	mvnne.w	r0, #3
}
 8014b98:	b008      	add	sp, #32
 8014b9a:	bd10      	pop	{r4, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 8014b9c:	f06f 0001 	mvn.w	r0, #1
 8014ba0:	e7fa      	b.n	8014b98 <BSP_COM_Init+0x70>
 8014ba2:	bf00      	nop
 8014ba4:	20000420 	.word	0x20000420
 8014ba8:	2000bf24 	.word	0x2000bf24
 8014bac:	40023800 	.word	0x40023800
 8014bb0:	40020000 	.word	0x40020000

08014bb4 <__io_putchar>:
{ 
 8014bb4:	b537      	push	{r0, r1, r2, r4, r5, lr}
  (void)HAL_UART_Transmit(&hcom_uart[COM_ActiveLogPort], (uint8_t *)&ch, 1, COM_POLL_TIMEOUT); 
 8014bb6:	4b08      	ldr	r3, [pc, #32]	; (8014bd8 <__io_putchar+0x24>)
{ 
 8014bb8:	9001      	str	r0, [sp, #4]
  (void)HAL_UART_Transmit(&hcom_uart[COM_ActiveLogPort], (uint8_t *)&ch, 1, COM_POLL_TIMEOUT); 
 8014bba:	4c08      	ldr	r4, [pc, #32]	; (8014bdc <__io_putchar+0x28>)
 8014bbc:	7818      	ldrb	r0, [r3, #0]
 8014bbe:	2544      	movs	r5, #68	; 0x44
 8014bc0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8014bc4:	2201      	movs	r2, #1
 8014bc6:	a901      	add	r1, sp, #4
 8014bc8:	fb05 4000 	mla	r0, r5, r0, r4
 8014bcc:	f7f6 fa93 	bl	800b0f6 <HAL_UART_Transmit>
}
 8014bd0:	9801      	ldr	r0, [sp, #4]
 8014bd2:	b003      	add	sp, #12
 8014bd4:	bd30      	pop	{r4, r5, pc}
 8014bd6:	bf00      	nop
 8014bd8:	2000987c 	.word	0x2000987c
 8014bdc:	2000bf24 	.word	0x2000bf24

08014be0 <BSP_SPI1_SendRecv>:
  * @param  pData: Pointer to data buffer to send/receive
  * @param  Length: Length of data in byte
  * @retval BSP status
  */
int32_t BSP_SPI1_SendRecv(uint8_t *pTxData, uint8_t *pRxData, uint16_t Length)
{
 8014be0:	b507      	push	{r0, r1, r2, lr}
 8014be2:	4613      	mov	r3, r2
  int32_t ret = BSP_ERROR_NONE;
  
  if(HAL_SPI_TransmitReceive(&hspi1, pTxData, pRxData, Length, 0x1000u /*BUS_SPI1_POLL_TIMEOUT*/) != HAL_OK)
 8014be4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8014be8:	9200      	str	r2, [sp, #0]
 8014bea:	460a      	mov	r2, r1
 8014bec:	4601      	mov	r1, r0
 8014bee:	4805      	ldr	r0, [pc, #20]	; (8014c04 <BSP_SPI1_SendRecv+0x24>)
 8014bf0:	f7f5 f8ca 	bl	8009d88 <HAL_SPI_TransmitReceive>
 8014bf4:	2800      	cmp	r0, #0
  {
      ret = BSP_ERROR_UNKNOWN_FAILURE;
  }
  return ret;
}
 8014bf6:	bf14      	ite	ne
 8014bf8:	f06f 0005 	mvnne.w	r0, #5
 8014bfc:	2000      	moveq	r0, #0
 8014bfe:	b003      	add	sp, #12
 8014c00:	f85d fb04 	ldr.w	pc, [sp], #4
 8014c04:	2000bfbc 	.word	0x2000bfbc

08014c08 <BSP_I2C1_DeInit>:
  */
int32_t BSP_I2C1_DeInit(void) 
{
  int32_t ret = BSP_ERROR_NONE;
  
  if (I2C1InitCounter > 0)
 8014c08:	4a0d      	ldr	r2, [pc, #52]	; (8014c40 <BSP_I2C1_DeInit+0x38>)
{
 8014c0a:	b508      	push	{r3, lr}
  if (I2C1InitCounter > 0)
 8014c0c:	6853      	ldr	r3, [r2, #4]
 8014c0e:	b90b      	cbnz	r3, 8014c14 <BSP_I2C1_DeInit+0xc>
  int32_t ret = BSP_ERROR_NONE;
 8014c10:	2000      	movs	r0, #0
    		ret = BSP_ERROR_BUS_FAILURE;
  		}
    }
  }
  return ret;
}
 8014c12:	bd08      	pop	{r3, pc}
    if (--I2C1InitCounter == 0)
 8014c14:	3b01      	subs	r3, #1
 8014c16:	6053      	str	r3, [r2, #4]
 8014c18:	2b00      	cmp	r3, #0
 8014c1a:	d1f9      	bne.n	8014c10 <BSP_I2C1_DeInit+0x8>
{
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8014c1c:	4a09      	ldr	r2, [pc, #36]	; (8014c44 <BSP_I2C1_DeInit+0x3c>)
  
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8|GPIO_PIN_9);
 8014c1e:	480a      	ldr	r0, [pc, #40]	; (8014c48 <BSP_I2C1_DeInit+0x40>)
    __HAL_RCC_I2C1_CLK_DISABLE();
 8014c20:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8014c22:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8014c26:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8|GPIO_PIN_9);
 8014c28:	f44f 7140 	mov.w	r1, #768	; 0x300
 8014c2c:	f7f3 fa30 	bl	8008090 <HAL_GPIO_DeInit>
  		if (HAL_I2C_DeInit(&hi2c1) != HAL_OK) 
 8014c30:	4806      	ldr	r0, [pc, #24]	; (8014c4c <BSP_I2C1_DeInit+0x44>)
 8014c32:	f7f3 fd5a 	bl	80086ea <HAL_I2C_DeInit>
 8014c36:	2800      	cmp	r0, #0
 8014c38:	d0ea      	beq.n	8014c10 <BSP_I2C1_DeInit+0x8>
    		ret = BSP_ERROR_BUS_FAILURE;
 8014c3a:	f06f 0007 	mvn.w	r0, #7
  return ret;
 8014c3e:	e7e8      	b.n	8014c12 <BSP_I2C1_DeInit+0xa>
 8014c40:	20009880 	.word	0x20009880
 8014c44:	40023800 	.word	0x40023800
 8014c48:	40020400 	.word	0x40020400
 8014c4c:	2000bf68 	.word	0x2000bf68

08014c50 <BSP_I2C1_WriteReg>:
{
 8014c50:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  if (HAL_I2C_Mem_Write(&hi2c1, DevAddr,Reg, I2C_MEMADD_SIZE_8BIT,pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8014c52:	f44f 5480 	mov.w	r4, #4096	; 0x1000
 8014c56:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8014c5a:	9200      	str	r2, [sp, #0]
 8014c5c:	2301      	movs	r3, #1
 8014c5e:	460a      	mov	r2, r1
 8014c60:	4601      	mov	r1, r0
 8014c62:	4807      	ldr	r0, [pc, #28]	; (8014c80 <BSP_I2C1_WriteReg+0x30>)
 8014c64:	f7f3 fd5a 	bl	800871c <HAL_I2C_Mem_Write>
 8014c68:	b140      	cbz	r0, 8014c7c <BSP_I2C1_WriteReg+0x2c>
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 8014c6a:	4805      	ldr	r0, [pc, #20]	; (8014c80 <BSP_I2C1_WriteReg+0x30>)
 8014c6c:	f7f3 fef1 	bl	8008a52 <HAL_I2C_GetError>
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8014c70:	2804      	cmp	r0, #4
 8014c72:	bf0c      	ite	eq
 8014c74:	f06f 0065 	mvneq.w	r0, #101	; 0x65
 8014c78:	f06f 0003 	mvnne.w	r0, #3
}
 8014c7c:	b004      	add	sp, #16
 8014c7e:	bd10      	pop	{r4, pc}
 8014c80:	2000bf68 	.word	0x2000bf68

08014c84 <BSP_I2C1_ReadReg>:
{
 8014c84:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  if (HAL_I2C_Mem_Read(&hi2c1, DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8014c86:	f44f 5480 	mov.w	r4, #4096	; 0x1000
 8014c8a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8014c8e:	9200      	str	r2, [sp, #0]
 8014c90:	2301      	movs	r3, #1
 8014c92:	460a      	mov	r2, r1
 8014c94:	4601      	mov	r1, r0
 8014c96:	4807      	ldr	r0, [pc, #28]	; (8014cb4 <BSP_I2C1_ReadReg+0x30>)
 8014c98:	f7f3 fdd0 	bl	800883c <HAL_I2C_Mem_Read>
 8014c9c:	b140      	cbz	r0, 8014cb0 <BSP_I2C1_ReadReg+0x2c>
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 8014c9e:	4805      	ldr	r0, [pc, #20]	; (8014cb4 <BSP_I2C1_ReadReg+0x30>)
 8014ca0:	f7f3 fed7 	bl	8008a52 <HAL_I2C_GetError>
      ret = BSP_ERROR_PERIPH_FAILURE;
 8014ca4:	2804      	cmp	r0, #4
 8014ca6:	bf0c      	ite	eq
 8014ca8:	f06f 0065 	mvneq.w	r0, #101	; 0x65
 8014cac:	f06f 0003 	mvnne.w	r0, #3
}
 8014cb0:	b004      	add	sp, #16
 8014cb2:	bd10      	pop	{r4, pc}
 8014cb4:	2000bf68 	.word	0x2000bf68

08014cb8 <BSP_GetTick>:
  return HAL_GetTick();
 8014cb8:	f7f2 bc68 	b.w	800758c <HAL_GetTick>

08014cbc <MX_SPI1_Init>:
  hspi->Init.Mode = SPI_MODE_MASTER;
 8014cbc:	490e      	ldr	r1, [pc, #56]	; (8014cf8 <MX_SPI1_Init+0x3c>)
 8014cbe:	f44f 7282 	mov.w	r2, #260	; 0x104
{
 8014cc2:	b508      	push	{r3, lr}
  hspi->Init.NSS = SPI_NSS_SOFT;
 8014cc4:	f04f 0c01 	mov.w	ip, #1
  hspi->Init.Mode = SPI_MODE_MASTER;
 8014cc8:	e9c0 1200 	strd	r1, r2, [r0]
  hspi->Init.NSS = SPI_NSS_SOFT;
 8014ccc:	f44f 7100 	mov.w	r1, #512	; 0x200
  hspi->Init.Direction = SPI_DIRECTION_2LINES;
 8014cd0:	2200      	movs	r2, #0
  hspi->Init.NSS = SPI_NSS_SOFT;
 8014cd2:	e9c0 c105 	strd	ip, r1, [r0, #20]
  hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8014cd6:	2128      	movs	r1, #40	; 0x28
  hspi->Init.FirstBit = SPI_FIRSTBIT_MSB;
 8014cd8:	e9c0 1207 	strd	r1, r2, [r0, #28]
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
 8014cdc:	e9c0 2202 	strd	r2, r2, [r0, #8]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8014ce0:	e9c0 2209 	strd	r2, r2, [r0, #36]	; 0x24
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8014ce4:	6102      	str	r2, [r0, #16]
  hspi->Init.CRCPolynomial = 10;
 8014ce6:	220a      	movs	r2, #10
 8014ce8:	62c2      	str	r2, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(hspi) != HAL_OK)
 8014cea:	f7f4 ffec 	bl	8009cc6 <HAL_SPI_Init>
}
 8014cee:	3800      	subs	r0, #0
 8014cf0:	bf18      	it	ne
 8014cf2:	2001      	movne	r0, #1
 8014cf4:	bd08      	pop	{r3, pc}
 8014cf6:	bf00      	nop
 8014cf8:	40013000 	.word	0x40013000

08014cfc <BSP_SPI1_Init>:
{
 8014cfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(SPI1InitCounter++ == 0)
 8014d00:	4a28      	ldr	r2, [pc, #160]	; (8014da4 <BSP_SPI1_Init+0xa8>)
  hspi1.Instance  = SPI1;
 8014d02:	4d29      	ldr	r5, [pc, #164]	; (8014da8 <BSP_SPI1_Init+0xac>)
 8014d04:	4b29      	ldr	r3, [pc, #164]	; (8014dac <BSP_SPI1_Init+0xb0>)
 8014d06:	602b      	str	r3, [r5, #0]
  if(SPI1InitCounter++ == 0)
 8014d08:	6813      	ldr	r3, [r2, #0]
 8014d0a:	1c59      	adds	r1, r3, #1
{
 8014d0c:	b088      	sub	sp, #32
  if(SPI1InitCounter++ == 0)
 8014d0e:	6011      	str	r1, [r2, #0]
 8014d10:	b11b      	cbz	r3, 8014d1a <BSP_SPI1_Init+0x1e>
  int32_t ret = BSP_ERROR_NONE;
 8014d12:	2000      	movs	r0, #0
}
 8014d14:	b008      	add	sp, #32
 8014d16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (HAL_SPI_GetState(&hspi1) == HAL_SPI_STATE_RESET) 
 8014d1a:	4628      	mov	r0, r5
 8014d1c:	f7f5 fb75 	bl	800a40a <HAL_SPI_GetState>
 8014d20:	4604      	mov	r4, r0
 8014d22:	2800      	cmp	r0, #0
 8014d24:	d1f5      	bne.n	8014d12 <BSP_SPI1_Init+0x16>
  __HAL_RCC_SPI1_CLK_ENABLE();
 8014d26:	4b22      	ldr	r3, [pc, #136]	; (8014db0 <BSP_SPI1_Init+0xb4>)
 8014d28:	9000      	str	r0, [sp, #0]
 8014d2a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8014d2c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8014d30:	645a      	str	r2, [r3, #68]	; 0x44
 8014d32:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8014d34:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8014d38:	9200      	str	r2, [sp, #0]
 8014d3a:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8014d3c:	9001      	str	r0, [sp, #4]
 8014d3e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8014d40:	f042 0201 	orr.w	r2, r2, #1
 8014d44:	631a      	str	r2, [r3, #48]	; 0x30
 8014d46:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8014d48:	f002 0201 	and.w	r2, r2, #1
 8014d4c:	9201      	str	r2, [sp, #4]
 8014d4e:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8014d50:	9002      	str	r0, [sp, #8]
 8014d52:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8014d54:	f042 0202 	orr.w	r2, r2, #2
 8014d58:	631a      	str	r2, [r3, #48]	; 0x30
 8014d5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014d5c:	9005      	str	r0, [sp, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8014d5e:	f003 0302 	and.w	r3, r3, #2
 8014d62:	9302      	str	r3, [sp, #8]
 8014d64:	9b02      	ldr	r3, [sp, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8014d66:	4813      	ldr	r0, [pc, #76]	; (8014db4 <BSP_SPI1_Init+0xb8>)
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014d68:	23c0      	movs	r3, #192	; 0xc0
 8014d6a:	f04f 0802 	mov.w	r8, #2
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8014d6e:	2703      	movs	r7, #3
 8014d70:	2605      	movs	r6, #5
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8014d72:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014d74:	e9cd 3803 	strd	r3, r8, [sp, #12]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8014d78:	e9cd 7606 	strd	r7, r6, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8014d7c:	f7f3 f8b4 	bl	8007ee8 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8014d80:	480d      	ldr	r0, [pc, #52]	; (8014db8 <BSP_SPI1_Init+0xbc>)
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8014d82:	9607      	str	r6, [sp, #28]
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8014d84:	2308      	movs	r3, #8
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8014d86:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014d88:	e9cd 3803 	strd	r3, r8, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8014d8c:	e9cd 4705 	strd	r4, r7, [sp, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8014d90:	f7f3 f8aa 	bl	8007ee8 <HAL_GPIO_Init>
			if (MX_SPI1_Init(&hspi1) != HAL_OK)
 8014d94:	4628      	mov	r0, r5
 8014d96:	f7ff ff91 	bl	8014cbc <MX_SPI1_Init>
 8014d9a:	2800      	cmp	r0, #0
 8014d9c:	d0b9      	beq.n	8014d12 <BSP_SPI1_Init+0x16>
				ret = BSP_ERROR_BUS_FAILURE;
 8014d9e:	f06f 0007 	mvn.w	r0, #7
  return ret;
 8014da2:	e7b7      	b.n	8014d14 <BSP_SPI1_Init+0x18>
 8014da4:	20009880 	.word	0x20009880
 8014da8:	2000bfbc 	.word	0x2000bfbc
 8014dac:	40013000 	.word	0x40013000
 8014db0:	40023800 	.word	0x40023800
 8014db4:	40020000 	.word	0x40020000
 8014db8:	40020400 	.word	0x40020400

08014dbc <MX_I2C1_Init>:
  hi2c->Init.ClockSpeed = 400000;
 8014dbc:	490a      	ldr	r1, [pc, #40]	; (8014de8 <MX_I2C1_Init+0x2c>)
 8014dbe:	4a0b      	ldr	r2, [pc, #44]	; (8014dec <MX_I2C1_Init+0x30>)
{
 8014dc0:	b508      	push	{r3, lr}
  hi2c->Init.ClockSpeed = 400000;
 8014dc2:	e9c0 1200 	strd	r1, r2, [r0]
  hi2c->Init.DutyCycle = I2C_DUTYCYCLE_2;
 8014dc6:	2200      	movs	r2, #0
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8014dc8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
  hi2c->Init.OwnAddress1 = 0;
 8014dcc:	e9c0 2202 	strd	r2, r2, [r0, #8]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8014dd0:	e9c0 1204 	strd	r1, r2, [r0, #16]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8014dd4:	e9c0 2206 	strd	r2, r2, [r0, #24]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8014dd8:	6202      	str	r2, [r0, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 8014dda:	f7f3 fbdd 	bl	8008598 <HAL_I2C_Init>
}
 8014dde:	3800      	subs	r0, #0
 8014de0:	bf18      	it	ne
 8014de2:	2001      	movne	r0, #1
 8014de4:	bd08      	pop	{r3, pc}
 8014de6:	bf00      	nop
 8014de8:	40005400 	.word	0x40005400
 8014dec:	00061a80 	.word	0x00061a80

08014df0 <BSP_I2C1_Init>:
{
 8014df0:	b570      	push	{r4, r5, r6, lr}
  if(I2C1InitCounter++ == 0)
 8014df2:	4a22      	ldr	r2, [pc, #136]	; (8014e7c <BSP_I2C1_Init+0x8c>)
  hi2c1.Instance  = I2C1;
 8014df4:	4e22      	ldr	r6, [pc, #136]	; (8014e80 <BSP_I2C1_Init+0x90>)
 8014df6:	4b23      	ldr	r3, [pc, #140]	; (8014e84 <BSP_I2C1_Init+0x94>)
 8014df8:	6033      	str	r3, [r6, #0]
  if(I2C1InitCounter++ == 0)
 8014dfa:	6853      	ldr	r3, [r2, #4]
 8014dfc:	1c59      	adds	r1, r3, #1
{
 8014dfe:	b088      	sub	sp, #32
  if(I2C1InitCounter++ == 0)
 8014e00:	6051      	str	r1, [r2, #4]
 8014e02:	2b00      	cmp	r3, #0
 8014e04:	d137      	bne.n	8014e76 <BSP_I2C1_Init+0x86>
    if (HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_RESET)
 8014e06:	4630      	mov	r0, r6
 8014e08:	f7f3 fe20 	bl	8008a4c <HAL_I2C_GetState>
 8014e0c:	4605      	mov	r5, r0
 8014e0e:	2800      	cmp	r0, #0
 8014e10:	d131      	bne.n	8014e76 <BSP_I2C1_Init+0x86>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8014e12:	4c1d      	ldr	r4, [pc, #116]	; (8014e88 <BSP_I2C1_Init+0x98>)
 8014e14:	9001      	str	r0, [sp, #4]
 8014e16:	6b23      	ldr	r3, [r4, #48]	; 0x30
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8014e18:	481c      	ldr	r0, [pc, #112]	; (8014e8c <BSP_I2C1_Init+0x9c>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8014e1a:	f043 0302 	orr.w	r3, r3, #2
 8014e1e:	6323      	str	r3, [r4, #48]	; 0x30
 8014e20:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8014e22:	f003 0302 	and.w	r3, r3, #2
 8014e26:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8014e28:	f44f 7240 	mov.w	r2, #768	; 0x300
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8014e2c:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8014e2e:	2312      	movs	r3, #18
 8014e30:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8014e34:	2101      	movs	r1, #1
 8014e36:	2303      	movs	r3, #3
 8014e38:	e9cd 1305 	strd	r1, r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8014e3c:	2304      	movs	r3, #4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8014e3e:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8014e40:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8014e42:	f7f3 f851 	bl	8007ee8 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 8014e46:	9502      	str	r5, [sp, #8]
 8014e48:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8014e4a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8014e4e:	6423      	str	r3, [r4, #64]	; 0x40
 8014e50:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8014e52:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8014e56:	9302      	str	r3, [sp, #8]
    	if(MX_I2C1_Init(&hi2c1) != HAL_OK)
 8014e58:	4630      	mov	r0, r6
    __HAL_RCC_I2C1_CLK_ENABLE();
 8014e5a:	9b02      	ldr	r3, [sp, #8]
    	if(MX_I2C1_Init(&hi2c1) != HAL_OK)
 8014e5c:	f7ff ffae 	bl	8014dbc <MX_I2C1_Init>
 8014e60:	4601      	mov	r1, r0
 8014e62:	b118      	cbz	r0, 8014e6c <BSP_I2C1_Init+0x7c>
      		ret = BSP_ERROR_BUS_FAILURE;
 8014e64:	f06f 0007 	mvn.w	r0, #7
}
 8014e68:	b008      	add	sp, #32
 8014e6a:	bd70      	pop	{r4, r5, r6, pc}
    	else if(HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK) 
 8014e6c:	4630      	mov	r0, r6
 8014e6e:	f7f3 fdf2 	bl	8008a56 <HAL_I2CEx_ConfigAnalogFilter>
 8014e72:	2800      	cmp	r0, #0
 8014e74:	d1f6      	bne.n	8014e64 <BSP_I2C1_Init+0x74>
      		ret = BSP_ERROR_NONE;
 8014e76:	2000      	movs	r0, #0
  return ret;
 8014e78:	e7f6      	b.n	8014e68 <BSP_I2C1_Init+0x78>
 8014e7a:	bf00      	nop
 8014e7c:	20009880 	.word	0x20009880
 8014e80:	2000bf68 	.word	0x2000bf68
 8014e84:	40005400 	.word	0x40005400
 8014e88:	40023800 	.word	0x40023800
 8014e8c:	40020400 	.word	0x40020400

08014e90 <IKS01A3_MOTION_SENSOR_Init>:
 *         - MOTION_ACCELERO for instance 1
 *         - MOTION_MAGNETO for instance 2
 * @retval BSP status
 */
int32_t IKS01A3_MOTION_SENSOR_Init(uint32_t Instance, uint32_t Functions)
{
 8014e90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014e94:	460e      	mov	r6, r1
 8014e96:	b091      	sub	sp, #68	; 0x44
  uint32_t function = MOTION_GYRO;
  uint32_t i;
  uint32_t component_functions = 0;
  IKS01A3_MOTION_SENSOR_Capabilities_t cap;

  switch (Instance)
 8014e98:	4607      	mov	r7, r0
 8014e9a:	b130      	cbz	r0, 8014eaa <IKS01A3_MOTION_SENSOR_Init+0x1a>
 8014e9c:	2801      	cmp	r0, #1
 8014e9e:	d052      	beq.n	8014f46 <IKS01A3_MOTION_SENSOR_Init+0xb6>
 8014ea0:	f06f 0001 	mvn.w	r0, #1
    }
    function = function << 1;
  }

  return ret;
}
 8014ea4:	b011      	add	sp, #68	; 0x44
 8014ea6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LIS2MDL_Capabilities_t  cap;
  int32_t                 ret = BSP_ERROR_NONE;

  /* Configure the accelero driver */
  io_ctx.BusType     = LIS2MDL_I2C_BUS; /* I2C */
  io_ctx.Address     = LIS2MDL_I2C_ADD;
 8014eaa:	233d      	movs	r3, #61	; 0x3d
 8014eac:	f88d 3014 	strb.w	r3, [sp, #20]
  io_ctx.Init        = IKS01A3_I2C_Init;
 8014eb0:	4b6f      	ldr	r3, [pc, #444]	; (8015070 <IKS01A3_MOTION_SENSOR_Init+0x1e0>)
 8014eb2:	9302      	str	r3, [sp, #8]
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 8014eb4:	4b6f      	ldr	r3, [pc, #444]	; (8015074 <IKS01A3_MOTION_SENSOR_Init+0x1e4>)
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
  io_ctx.GetTick     = IKS01A3_GetTick;

  if (LIS2MDL_RegisterBusIO(&lis2mdl_obj_0, &io_ctx) != LIS2MDL_OK)
 8014eb6:	4d70      	ldr	r5, [pc, #448]	; (8015078 <IKS01A3_MOTION_SENSOR_Init+0x1e8>)
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 8014eb8:	9303      	str	r3, [sp, #12]
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 8014eba:	4b70      	ldr	r3, [pc, #448]	; (801507c <IKS01A3_MOTION_SENSOR_Init+0x1ec>)
 8014ebc:	9307      	str	r3, [sp, #28]
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 8014ebe:	4b70      	ldr	r3, [pc, #448]	; (8015080 <IKS01A3_MOTION_SENSOR_Init+0x1f0>)
  io_ctx.BusType     = LIS2MDL_I2C_BUS; /* I2C */
 8014ec0:	9004      	str	r0, [sp, #16]
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 8014ec2:	9306      	str	r3, [sp, #24]
  if (LIS2MDL_RegisterBusIO(&lis2mdl_obj_0, &io_ctx) != LIS2MDL_OK)
 8014ec4:	a902      	add	r1, sp, #8
  io_ctx.GetTick     = IKS01A3_GetTick;
 8014ec6:	4b6f      	ldr	r3, [pc, #444]	; (8015084 <IKS01A3_MOTION_SENSOR_Init+0x1f4>)
 8014ec8:	9308      	str	r3, [sp, #32]
  if (LIS2MDL_RegisterBusIO(&lis2mdl_obj_0, &io_ctx) != LIS2MDL_OK)
 8014eca:	4628      	mov	r0, r5
 8014ecc:	f7f0 fd70 	bl	80059b0 <LIS2MDL_RegisterBusIO>
 8014ed0:	bb40      	cbnz	r0, 8014f24 <IKS01A3_MOTION_SENSOR_Init+0x94>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
  }
  else if (LIS2MDL_ReadID(&lis2mdl_obj_0, &id) != LIS2MDL_OK)
 8014ed2:	f10d 0107 	add.w	r1, sp, #7
 8014ed6:	4628      	mov	r0, r5
 8014ed8:	f7f0 fc96 	bl	8005808 <LIS2MDL_ReadID>
 8014edc:	bb10      	cbnz	r0, 8014f24 <IKS01A3_MOTION_SENSOR_Init+0x94>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
  }
  else if (id != LIS2MDL_ID)
 8014ede:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8014ee2:	2b40      	cmp	r3, #64	; 0x40
 8014ee4:	d11e      	bne.n	8014f24 <IKS01A3_MOTION_SENSOR_Init+0x94>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
  }
  else
  {
    (void)LIS2MDL_GetCapabilities(&lis2mdl_obj_0, &cap);
 8014ee6:	a909      	add	r1, sp, #36	; 0x24
 8014ee8:	4628      	mov	r0, r5
 8014eea:	f7f0 fc29 	bl	8005740 <LIS2MDL_GetCapabilities>
    MotionCtx[IKS01A3_LIS2MDL_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 8014eee:	f89d 2026 	ldrb.w	r2, [sp, #38]	; 0x26
 8014ef2:	f89d 1024 	ldrb.w	r1, [sp, #36]	; 0x24
 8014ef6:	0093      	lsls	r3, r2, #2
 8014ef8:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 8014efc:	f89d 1025 	ldrb.w	r1, [sp, #37]	; 0x25
 8014f00:	430b      	orrs	r3, r1

    MotionCompObj[IKS01A3_LIS2MDL_0] = &lis2mdl_obj_0;
 8014f02:	4961      	ldr	r1, [pc, #388]	; (8015088 <IKS01A3_MOTION_SENSOR_Init+0x1f8>)
    MotionCtx[IKS01A3_LIS2MDL_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 8014f04:	62eb      	str	r3, [r5, #44]	; 0x2c
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A3_LIS2MDL_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LIS2MDL_COMMON_Driver;

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO) && (cap.Magneto == 1U))
 8014f06:	f016 0f04 	tst.w	r6, #4
    MotionDrv[IKS01A3_LIS2MDL_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LIS2MDL_COMMON_Driver;
 8014f0a:	4b60      	ldr	r3, [pc, #384]	; (801508c <IKS01A3_MOTION_SENSOR_Init+0x1fc>)
    MotionCompObj[IKS01A3_LIS2MDL_0] = &lis2mdl_obj_0;
 8014f0c:	600d      	str	r5, [r1, #0]
    MotionDrv[IKS01A3_LIS2MDL_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LIS2MDL_COMMON_Driver;
 8014f0e:	636b      	str	r3, [r5, #52]	; 0x34
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO) && (cap.Magneto == 1U))
 8014f10:	4688      	mov	r8, r1
 8014f12:	d00a      	beq.n	8014f2a <IKS01A3_MOTION_SENSOR_Init+0x9a>
 8014f14:	2a01      	cmp	r2, #1
 8014f16:	d108      	bne.n	8014f2a <IKS01A3_MOTION_SENSOR_Init+0x9a>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A3_LIS2MDL_0][FunctionIndex[MOTION_MAGNETO]] = (MOTION_SENSOR_FuncDrv_t *)(
 8014f18:	4a5d      	ldr	r2, [pc, #372]	; (8015090 <IKS01A3_MOTION_SENSOR_Init+0x200>)
            void *)&LIS2MDL_MAG_Driver;

      if (MotionDrv[IKS01A3_LIS2MDL_0]->Init(MotionCompObj[IKS01A3_LIS2MDL_0]) != LIS2MDL_OK)
 8014f1a:	681b      	ldr	r3, [r3, #0]
      MotionFuncDrv[IKS01A3_LIS2MDL_0][FunctionIndex[MOTION_MAGNETO]] = (MOTION_SENSOR_FuncDrv_t *)(
 8014f1c:	646a      	str	r2, [r5, #68]	; 0x44
      if (MotionDrv[IKS01A3_LIS2MDL_0]->Init(MotionCompObj[IKS01A3_LIS2MDL_0]) != LIS2MDL_OK)
 8014f1e:	4628      	mov	r0, r5
 8014f20:	4798      	blx	r3
 8014f22:	b110      	cbz	r0, 8014f2a <IKS01A3_MOTION_SENSOR_Init+0x9a>
        return BSP_ERROR_NO_INIT;
 8014f24:	f04f 30ff 	mov.w	r0, #4294967295
 8014f28:	e7bc      	b.n	8014ea4 <IKS01A3_MOTION_SENSOR_Init+0x14>
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO))
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO))
 8014f2a:	f016 0403 	ands.w	r4, r6, #3
 8014f2e:	d1f9      	bne.n	8014f24 <IKS01A3_MOTION_SENSOR_Init+0x94>
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8014f30:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8014f32:	f8d8 0000 	ldr.w	r0, [r8]
 8014f36:	68db      	ldr	r3, [r3, #12]
 8014f38:	a909      	add	r1, sp, #36	; 0x24
 8014f3a:	4798      	blx	r3
 8014f3c:	2800      	cmp	r0, #0
 8014f3e:	d05f      	beq.n	8015000 <IKS01A3_MOTION_SENSOR_Init+0x170>
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8014f40:	f06f 0006 	mvn.w	r0, #6
 8014f44:	e7ae      	b.n	8014ea4 <IKS01A3_MOTION_SENSOR_Init+0x14>
  static ISM330DLC_Object_t ism330dlc_obj_0;
  ISM330DLC_Capabilities_t  cap;
  int32_t ret = BSP_ERROR_NONE;

  /* Configure the accelero driver */
  io_ctx.BusType     = ISM330DLC_I2C_BUS; /* I2C */
 8014f46:	2300      	movs	r3, #0
 8014f48:	9304      	str	r3, [sp, #16]
  io_ctx.Address     = ISM330DLC_I2C_ADD_L;
 8014f4a:	23d5      	movs	r3, #213	; 0xd5
 8014f4c:	f88d 3014 	strb.w	r3, [sp, #20]
  io_ctx.Init        = IKS01A3_I2C_Init;
 8014f50:	4b47      	ldr	r3, [pc, #284]	; (8015070 <IKS01A3_MOTION_SENSOR_Init+0x1e0>)
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
  io_ctx.GetTick     = IKS01A3_GetTick;

  if (ISM330DLC_RegisterBusIO(&ism330dlc_obj_0, &io_ctx) != ISM330DLC_OK)
 8014f52:	4d49      	ldr	r5, [pc, #292]	; (8015078 <IKS01A3_MOTION_SENSOR_Init+0x1e8>)
  io_ctx.Init        = IKS01A3_I2C_Init;
 8014f54:	9302      	str	r3, [sp, #8]
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 8014f56:	4b47      	ldr	r3, [pc, #284]	; (8015074 <IKS01A3_MOTION_SENSOR_Init+0x1e4>)
 8014f58:	9303      	str	r3, [sp, #12]
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 8014f5a:	4b48      	ldr	r3, [pc, #288]	; (801507c <IKS01A3_MOTION_SENSOR_Init+0x1ec>)
 8014f5c:	9307      	str	r3, [sp, #28]
  if (ISM330DLC_RegisterBusIO(&ism330dlc_obj_0, &io_ctx) != ISM330DLC_OK)
 8014f5e:	f105 0454 	add.w	r4, r5, #84	; 0x54
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 8014f62:	4b47      	ldr	r3, [pc, #284]	; (8015080 <IKS01A3_MOTION_SENSOR_Init+0x1f0>)
 8014f64:	9306      	str	r3, [sp, #24]
  if (ISM330DLC_RegisterBusIO(&ism330dlc_obj_0, &io_ctx) != ISM330DLC_OK)
 8014f66:	a902      	add	r1, sp, #8
  io_ctx.GetTick     = IKS01A3_GetTick;
 8014f68:	4b46      	ldr	r3, [pc, #280]	; (8015084 <IKS01A3_MOTION_SENSOR_Init+0x1f4>)
 8014f6a:	9308      	str	r3, [sp, #32]
  if (ISM330DLC_RegisterBusIO(&ism330dlc_obj_0, &io_ctx) != ISM330DLC_OK)
 8014f6c:	4620      	mov	r0, r4
 8014f6e:	f000 feb1 	bl	8015cd4 <ISM330DLC_RegisterBusIO>
 8014f72:	2800      	cmp	r0, #0
 8014f74:	d1d6      	bne.n	8014f24 <IKS01A3_MOTION_SENSOR_Init+0x94>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
  }
  else if (ISM330DLC_ReadID(&ism330dlc_obj_0, &id) != ISM330DLC_OK)
 8014f76:	f10d 0107 	add.w	r1, sp, #7
 8014f7a:	4620      	mov	r0, r4
 8014f7c:	f000 fae9 	bl	8015552 <ISM330DLC_ReadID>
 8014f80:	2800      	cmp	r0, #0
 8014f82:	d1cf      	bne.n	8014f24 <IKS01A3_MOTION_SENSOR_Init+0x94>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
  }
  else if (id != ISM330DLC_ID)
 8014f84:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8014f88:	2b6a      	cmp	r3, #106	; 0x6a
 8014f8a:	d1cb      	bne.n	8014f24 <IKS01A3_MOTION_SENSOR_Init+0x94>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
  }
  else
  {
    (void)ISM330DLC_GetCapabilities(&ism330dlc_obj_0, &cap);
 8014f8c:	a909      	add	r1, sp, #36	; 0x24
 8014f8e:	4620      	mov	r0, r4
 8014f90:	f000 fa50 	bl	8015434 <ISM330DLC_GetCapabilities>
    MotionCtx[IKS01A3_ISM330DLC_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 8014f94:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
 8014f98:	f89d 1024 	ldrb.w	r1, [sp, #36]	; 0x24
 8014f9c:	f89d 2025 	ldrb.w	r2, [sp, #37]	; 0x25
 8014fa0:	009b      	lsls	r3, r3, #2
 8014fa2:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 8014fa6:	4313      	orrs	r3, r2

    MotionCompObj[IKS01A3_ISM330DLC_0] = &ism330dlc_obj_0;
 8014fa8:	4937      	ldr	r1, [pc, #220]	; (8015088 <IKS01A3_MOTION_SENSOR_Init+0x1f8>)
    MotionCtx[IKS01A3_ISM330DLC_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 8014faa:	632b      	str	r3, [r5, #48]	; 0x30
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A3_ISM330DLC_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&ISM330DLC_COMMON_Driver;

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro == 1U))
 8014fac:	f016 0f01 	tst.w	r6, #1
    MotionDrv[IKS01A3_ISM330DLC_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&ISM330DLC_COMMON_Driver;
 8014fb0:	4b38      	ldr	r3, [pc, #224]	; (8015094 <IKS01A3_MOTION_SENSOR_Init+0x204>)
    MotionCompObj[IKS01A3_ISM330DLC_0] = &ism330dlc_obj_0;
 8014fb2:	604c      	str	r4, [r1, #4]
    MotionDrv[IKS01A3_ISM330DLC_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&ISM330DLC_COMMON_Driver;
 8014fb4:	63ab      	str	r3, [r5, #56]	; 0x38
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro == 1U))
 8014fb6:	4688      	mov	r8, r1
 8014fb8:	d10a      	bne.n	8014fd0 <IKS01A3_MOTION_SENSOR_Init+0x140>
      else
      {
        ret = BSP_ERROR_NONE;
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 8014fba:	07b3      	lsls	r3, r6, #30
 8014fbc:	d412      	bmi.n	8014fe4 <IKS01A3_MOTION_SENSOR_Init+0x154>
      else
      {
        ret = BSP_ERROR_NONE;
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 8014fbe:	f016 0404 	ands.w	r4, r6, #4
 8014fc2:	d1af      	bne.n	8014f24 <IKS01A3_MOTION_SENSOR_Init+0x94>
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8014fc4:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8014fc6:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8014fca:	68db      	ldr	r3, [r3, #12]
 8014fcc:	a909      	add	r1, sp, #36	; 0x24
 8014fce:	e7b4      	b.n	8014f3a <IKS01A3_MOTION_SENSOR_Init+0xaa>
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro == 1U))
 8014fd0:	2a01      	cmp	r2, #1
 8014fd2:	d1f2      	bne.n	8014fba <IKS01A3_MOTION_SENSOR_Init+0x12a>
      MotionFuncDrv[IKS01A3_ISM330DLC_0][FunctionIndex[MOTION_GYRO]] = (MOTION_SENSOR_FuncDrv_t *)(void *)&ISM330DLC_GYRO_Driver;
 8014fd4:	4a30      	ldr	r2, [pc, #192]	; (8015098 <IKS01A3_MOTION_SENSOR_Init+0x208>)
      if (MotionDrv[IKS01A3_ISM330DLC_0]->Init(MotionCompObj[IKS01A3_ISM330DLC_0]) != ISM330DLC_OK)
 8014fd6:	681b      	ldr	r3, [r3, #0]
      MotionFuncDrv[IKS01A3_ISM330DLC_0][FunctionIndex[MOTION_GYRO]] = (MOTION_SENSOR_FuncDrv_t *)(void *)&ISM330DLC_GYRO_Driver;
 8014fd8:	64aa      	str	r2, [r5, #72]	; 0x48
      if (MotionDrv[IKS01A3_ISM330DLC_0]->Init(MotionCompObj[IKS01A3_ISM330DLC_0]) != ISM330DLC_OK)
 8014fda:	4620      	mov	r0, r4
 8014fdc:	4798      	blx	r3
 8014fde:	2800      	cmp	r0, #0
 8014fe0:	d1a0      	bne.n	8014f24 <IKS01A3_MOTION_SENSOR_Init+0x94>
 8014fe2:	e7ea      	b.n	8014fba <IKS01A3_MOTION_SENSOR_Init+0x12a>
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 8014fe4:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 8014fe8:	2b01      	cmp	r3, #1
 8014fea:	d1e8      	bne.n	8014fbe <IKS01A3_MOTION_SENSOR_Init+0x12e>
      MotionFuncDrv[IKS01A3_ISM330DLC_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 8014fec:	4b2b      	ldr	r3, [pc, #172]	; (801509c <IKS01A3_MOTION_SENSOR_Init+0x20c>)
 8014fee:	64eb      	str	r3, [r5, #76]	; 0x4c
      if (MotionDrv[IKS01A3_ISM330DLC_0]->Init(MotionCompObj[IKS01A3_ISM330DLC_0]) != ISM330DLC_OK)
 8014ff0:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8014ff2:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8014ff6:	681b      	ldr	r3, [r3, #0]
 8014ff8:	4798      	blx	r3
 8014ffa:	2800      	cmp	r0, #0
 8014ffc:	d0df      	beq.n	8014fbe <IKS01A3_MOTION_SENSOR_Init+0x12e>
 8014ffe:	e791      	b.n	8014f24 <IKS01A3_MOTION_SENSOR_Init+0x94>
      if (cap.Acc == 1U)
 8015000:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
        component_functions |= MOTION_ACCELERO;
 8015004:	2b01      	cmp	r3, #1
      if (cap.Gyro == 1U)
 8015006:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
        component_functions |= MOTION_ACCELERO;
 801500a:	bf08      	it	eq
 801500c:	2402      	moveq	r4, #2
      if (cap.Gyro == 1U)
 801500e:	2b01      	cmp	r3, #1
      if (cap.Magneto == 1U)
 8015010:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
        component_functions |= MOTION_GYRO;
 8015014:	bf08      	it	eq
 8015016:	f044 0401 	orreq.w	r4, r4, #1
      if (cap.Magneto == 1U)
 801501a:	2b01      	cmp	r3, #1
 801501c:	d101      	bne.n	8015022 <IKS01A3_MOTION_SENSOR_Init+0x192>
        component_functions |= MOTION_MAGNETO;
 801501e:	f044 0404 	orr.w	r4, r4, #4
      if (MotionFuncDrv[Instance][FunctionIndex[function]]->Enable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 8015022:	f8df b064 	ldr.w	fp, [pc, #100]	; 8015088 <IKS01A3_MOTION_SENSOR_Init+0x1f8>
 8015026:	f8df a050 	ldr.w	sl, [pc, #80]	; 8015078 <IKS01A3_MOTION_SENSOR_Init+0x1e8>
 801502a:	f8df 9074 	ldr.w	r9, [pc, #116]	; 80150a0 <IKS01A3_MOTION_SENSOR_Init+0x210>
        component_functions |= MOTION_ACCELERO;
 801502e:	2503      	movs	r5, #3
 8015030:	f04f 0801 	mov.w	r8, #1
    if (((Functions & function) == function) && ((component_functions & function) == function))
 8015034:	ea38 0306 	bics.w	r3, r8, r6
 8015038:	d005      	beq.n	8015046 <IKS01A3_MOTION_SENSOR_Init+0x1b6>
  for (i = 0; i < IKS01A3_MOTION_FUNCTIONS_NBR; i++)
 801503a:	3d01      	subs	r5, #1
    function = function << 1;
 801503c:	ea4f 0848 	mov.w	r8, r8, lsl #1
  for (i = 0; i < IKS01A3_MOTION_FUNCTIONS_NBR; i++)
 8015040:	d1f8      	bne.n	8015034 <IKS01A3_MOTION_SENSOR_Init+0x1a4>
 8015042:	4628      	mov	r0, r5
 8015044:	e72e      	b.n	8014ea4 <IKS01A3_MOTION_SENSOR_Init+0x14>
    if (((Functions & function) == function) && ((component_functions & function) == function))
 8015046:	ea38 0304 	bics.w	r3, r8, r4
 801504a:	d1f6      	bne.n	801503a <IKS01A3_MOTION_SENSOR_Init+0x1aa>
      if (MotionFuncDrv[Instance][FunctionIndex[function]]->Enable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 801504c:	f859 2028 	ldr.w	r2, [r9, r8, lsl #2]
 8015050:	f85b 0027 	ldr.w	r0, [fp, r7, lsl #2]
 8015054:	eb07 0347 	add.w	r3, r7, r7, lsl #1
 8015058:	4413      	add	r3, r2
 801505a:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
 801505e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015060:	681b      	ldr	r3, [r3, #0]
 8015062:	4798      	blx	r3
 8015064:	2800      	cmp	r0, #0
 8015066:	d0e8      	beq.n	801503a <IKS01A3_MOTION_SENSOR_Init+0x1aa>
        return BSP_ERROR_COMPONENT_FAILURE;
 8015068:	f06f 0004 	mvn.w	r0, #4
 801506c:	e71a      	b.n	8014ea4 <IKS01A3_MOTION_SENSOR_Init+0x14>
 801506e:	bf00      	nop
 8015070:	08014df1 	.word	0x08014df1
 8015074:	08014c09 	.word	0x08014c09
 8015078:	20009888 	.word	0x20009888
 801507c:	08014c85 	.word	0x08014c85
 8015080:	08014c51 	.word	0x08014c51
 8015084:	08014cb9 	.word	0x08014cb9
 8015088:	2000c014 	.word	0x2000c014
 801508c:	2000005c 	.word	0x2000005c
 8015090:	20000038 	.word	0x20000038
 8015094:	20000474 	.word	0x20000474
 8015098:	2000042c 	.word	0x2000042c
 801509c:	20000450 	.word	0x20000450
 80150a0:	08020abc 	.word	0x08020abc

080150a4 <IKS01A3_MOTION_SENSOR_Enable>:
  if (Instance >= IKS01A3_MOTION_INSTANCES_NBR)
 80150a4:	2801      	cmp	r0, #1
{
 80150a6:	b510      	push	{r4, lr}
  if (Instance >= IKS01A3_MOTION_INSTANCES_NBR)
 80150a8:	d81b      	bhi.n	80150e2 <IKS01A3_MOTION_SENSOR_Enable+0x3e>
    if ((MotionCtx[Instance].Functions & Function) == Function)
 80150aa:	4b0f      	ldr	r3, [pc, #60]	; (80150e8 <IKS01A3_MOTION_SENSOR_Enable+0x44>)
 80150ac:	eb03 0280 	add.w	r2, r3, r0, lsl #2
 80150b0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80150b2:	ea01 0402 	and.w	r4, r1, r2
 80150b6:	ea31 0202 	bics.w	r2, r1, r2
 80150ba:	d112      	bne.n	80150e2 <IKS01A3_MOTION_SENSOR_Enable+0x3e>
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->Enable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 80150bc:	490b      	ldr	r1, [pc, #44]	; (80150ec <IKS01A3_MOTION_SENSOR_Enable+0x48>)
 80150be:	f851 1024 	ldr.w	r1, [r1, r4, lsl #2]
 80150c2:	eb00 0240 	add.w	r2, r0, r0, lsl #1
 80150c6:	440a      	add	r2, r1
 80150c8:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80150cc:	4a08      	ldr	r2, [pc, #32]	; (80150f0 <IKS01A3_MOTION_SENSOR_Enable+0x4c>)
 80150ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80150d0:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 80150d4:	681b      	ldr	r3, [r3, #0]
 80150d6:	4798      	blx	r3
 80150d8:	2800      	cmp	r0, #0
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80150da:	bf18      	it	ne
 80150dc:	f06f 0004 	mvnne.w	r0, #4
}
 80150e0:	bd10      	pop	{r4, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 80150e2:	f06f 0001 	mvn.w	r0, #1
 80150e6:	e7fb      	b.n	80150e0 <IKS01A3_MOTION_SENSOR_Enable+0x3c>
 80150e8:	20009888 	.word	0x20009888
 80150ec:	08020abc 	.word	0x08020abc
 80150f0:	2000c014 	.word	0x2000c014

080150f4 <IKS01A3_MOTION_SENSOR_GetAxes>:
  if (Instance >= IKS01A3_MOTION_INSTANCES_NBR)
 80150f4:	2801      	cmp	r0, #1
{
 80150f6:	b538      	push	{r3, r4, r5, lr}
 80150f8:	460c      	mov	r4, r1
 80150fa:	4611      	mov	r1, r2
  if (Instance >= IKS01A3_MOTION_INSTANCES_NBR)
 80150fc:	d81b      	bhi.n	8015136 <IKS01A3_MOTION_SENSOR_GetAxes+0x42>
    if ((MotionCtx[Instance].Functions & Function) == Function)
 80150fe:	4b0f      	ldr	r3, [pc, #60]	; (801513c <IKS01A3_MOTION_SENSOR_GetAxes+0x48>)
 8015100:	eb03 0280 	add.w	r2, r3, r0, lsl #2
 8015104:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8015106:	ea04 0502 	and.w	r5, r4, r2
 801510a:	ea34 0202 	bics.w	r2, r4, r2
 801510e:	d112      	bne.n	8015136 <IKS01A3_MOTION_SENSOR_GetAxes+0x42>
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->GetAxes(MotionCompObj[Instance], Axes) != BSP_ERROR_NONE)
 8015110:	4c0b      	ldr	r4, [pc, #44]	; (8015140 <IKS01A3_MOTION_SENSOR_GetAxes+0x4c>)
 8015112:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
 8015116:	eb00 0240 	add.w	r2, r0, r0, lsl #1
 801511a:	4422      	add	r2, r4
 801511c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8015120:	4a08      	ldr	r2, [pc, #32]	; (8015144 <IKS01A3_MOTION_SENSOR_GetAxes+0x50>)
 8015122:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015124:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 8015128:	69db      	ldr	r3, [r3, #28]
 801512a:	4798      	blx	r3
 801512c:	2800      	cmp	r0, #0
        ret = BSP_ERROR_COMPONENT_FAILURE;
 801512e:	bf18      	it	ne
 8015130:	f06f 0004 	mvnne.w	r0, #4
}
 8015134:	bd38      	pop	{r3, r4, r5, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 8015136:	f06f 0001 	mvn.w	r0, #1
 801513a:	e7fb      	b.n	8015134 <IKS01A3_MOTION_SENSOR_GetAxes+0x40>
 801513c:	20009888 	.word	0x20009888
 8015140:	08020abc 	.word	0x08020abc
 8015144:	2000c014 	.word	0x2000c014

08015148 <IKS01A3_MOTION_SENSOR_GetSensitivity>:
  if (Instance >= IKS01A3_MOTION_INSTANCES_NBR)
 8015148:	2801      	cmp	r0, #1
{
 801514a:	b538      	push	{r3, r4, r5, lr}
 801514c:	460c      	mov	r4, r1
 801514e:	4611      	mov	r1, r2
  if (Instance >= IKS01A3_MOTION_INSTANCES_NBR)
 8015150:	d81b      	bhi.n	801518a <IKS01A3_MOTION_SENSOR_GetSensitivity+0x42>
    if ((MotionCtx[Instance].Functions & Function) == Function)
 8015152:	4b0f      	ldr	r3, [pc, #60]	; (8015190 <IKS01A3_MOTION_SENSOR_GetSensitivity+0x48>)
 8015154:	eb03 0280 	add.w	r2, r3, r0, lsl #2
 8015158:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 801515a:	ea04 0502 	and.w	r5, r4, r2
 801515e:	ea34 0202 	bics.w	r2, r4, r2
 8015162:	d112      	bne.n	801518a <IKS01A3_MOTION_SENSOR_GetSensitivity+0x42>
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->GetSensitivity(MotionCompObj[Instance],
 8015164:	4c0b      	ldr	r4, [pc, #44]	; (8015194 <IKS01A3_MOTION_SENSOR_GetSensitivity+0x4c>)
 8015166:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
 801516a:	eb00 0240 	add.w	r2, r0, r0, lsl #1
 801516e:	4422      	add	r2, r4
 8015170:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8015174:	4a08      	ldr	r2, [pc, #32]	; (8015198 <IKS01A3_MOTION_SENSOR_GetSensitivity+0x50>)
 8015176:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015178:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 801517c:	689b      	ldr	r3, [r3, #8]
 801517e:	4798      	blx	r3
 8015180:	2800      	cmp	r0, #0
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8015182:	bf18      	it	ne
 8015184:	f06f 0004 	mvnne.w	r0, #4
}
 8015188:	bd38      	pop	{r3, r4, r5, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 801518a:	f06f 0001 	mvn.w	r0, #1
 801518e:	e7fb      	b.n	8015188 <IKS01A3_MOTION_SENSOR_GetSensitivity+0x40>
 8015190:	20009888 	.word	0x20009888
 8015194:	08020abc 	.word	0x08020abc
 8015198:	2000c014 	.word	0x2000c014

0801519c <IKS01A3_MOTION_SENSOR_SetOutputDataRate>:
  if (Instance >= IKS01A3_MOTION_INSTANCES_NBR)
 801519c:	2801      	cmp	r0, #1
{
 801519e:	b510      	push	{r4, lr}
  if (Instance >= IKS01A3_MOTION_INSTANCES_NBR)
 80151a0:	d81b      	bhi.n	80151da <IKS01A3_MOTION_SENSOR_SetOutputDataRate+0x3e>
    if ((MotionCtx[Instance].Functions & Function) == Function)
 80151a2:	4b0f      	ldr	r3, [pc, #60]	; (80151e0 <IKS01A3_MOTION_SENSOR_SetOutputDataRate+0x44>)
 80151a4:	eb03 0280 	add.w	r2, r3, r0, lsl #2
 80151a8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80151aa:	ea01 0402 	and.w	r4, r1, r2
 80151ae:	ea31 0202 	bics.w	r2, r1, r2
 80151b2:	d112      	bne.n	80151da <IKS01A3_MOTION_SENSOR_SetOutputDataRate+0x3e>
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->SetOutputDataRate(MotionCompObj[Instance], Odr) != BSP_ERROR_NONE)
 80151b4:	490b      	ldr	r1, [pc, #44]	; (80151e4 <IKS01A3_MOTION_SENSOR_SetOutputDataRate+0x48>)
 80151b6:	f851 1024 	ldr.w	r1, [r1, r4, lsl #2]
 80151ba:	eb00 0240 	add.w	r2, r0, r0, lsl #1
 80151be:	440a      	add	r2, r1
 80151c0:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80151c4:	4a08      	ldr	r2, [pc, #32]	; (80151e8 <IKS01A3_MOTION_SENSOR_SetOutputDataRate+0x4c>)
 80151c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80151c8:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 80151cc:	691b      	ldr	r3, [r3, #16]
 80151ce:	4798      	blx	r3
 80151d0:	2800      	cmp	r0, #0
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80151d2:	bf18      	it	ne
 80151d4:	f06f 0004 	mvnne.w	r0, #4
}
 80151d8:	bd10      	pop	{r4, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 80151da:	f06f 0001 	mvn.w	r0, #1
 80151de:	e7fb      	b.n	80151d8 <IKS01A3_MOTION_SENSOR_SetOutputDataRate+0x3c>
 80151e0:	20009888 	.word	0x20009888
 80151e4:	08020abc 	.word	0x08020abc
 80151e8:	2000c014 	.word	0x2000c014

080151ec <IKS01A3_MOTION_SENSOR_SetFullScale>:
  if (Instance >= IKS01A3_MOTION_INSTANCES_NBR)
 80151ec:	2801      	cmp	r0, #1
{
 80151ee:	b538      	push	{r3, r4, r5, lr}
 80151f0:	460c      	mov	r4, r1
 80151f2:	4611      	mov	r1, r2
  if (Instance >= IKS01A3_MOTION_INSTANCES_NBR)
 80151f4:	d81b      	bhi.n	801522e <IKS01A3_MOTION_SENSOR_SetFullScale+0x42>
    if ((MotionCtx[Instance].Functions & Function) == Function)
 80151f6:	4b0f      	ldr	r3, [pc, #60]	; (8015234 <IKS01A3_MOTION_SENSOR_SetFullScale+0x48>)
 80151f8:	eb03 0280 	add.w	r2, r3, r0, lsl #2
 80151fc:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80151fe:	ea04 0502 	and.w	r5, r4, r2
 8015202:	ea34 0202 	bics.w	r2, r4, r2
 8015206:	d112      	bne.n	801522e <IKS01A3_MOTION_SENSOR_SetFullScale+0x42>
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->SetFullScale(MotionCompObj[Instance],
 8015208:	4c0b      	ldr	r4, [pc, #44]	; (8015238 <IKS01A3_MOTION_SENSOR_SetFullScale+0x4c>)
 801520a:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
 801520e:	eb00 0240 	add.w	r2, r0, r0, lsl #1
 8015212:	4422      	add	r2, r4
 8015214:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8015218:	4a08      	ldr	r2, [pc, #32]	; (801523c <IKS01A3_MOTION_SENSOR_SetFullScale+0x50>)
 801521a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801521c:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 8015220:	699b      	ldr	r3, [r3, #24]
 8015222:	4798      	blx	r3
 8015224:	2800      	cmp	r0, #0
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8015226:	bf18      	it	ne
 8015228:	f06f 0004 	mvnne.w	r0, #4
}
 801522c:	bd38      	pop	{r3, r4, r5, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 801522e:	f06f 0001 	mvn.w	r0, #1
 8015232:	e7fb      	b.n	801522c <IKS01A3_MOTION_SENSOR_SetFullScale+0x40>
 8015234:	20009888 	.word	0x20009888
 8015238:	08020abc 	.word	0x08020abc
 801523c:	2000c014 	.word	0x2000c014

08015240 <IKS01A3_MOTION_SENSOR_Write_Register>:
 * @param  Reg address to be read
 * @param  Data value to be written
 * @retval BSP status
 */
int32_t IKS01A3_MOTION_SENSOR_Write_Register(uint32_t Instance, uint8_t Reg, uint8_t Data)
{
 8015240:	b508      	push	{r3, lr}
  int32_t ret;

  switch (Instance)
 8015242:	b120      	cbz	r0, 801524e <IKS01A3_MOTION_SENSOR_Write_Register+0xe>
 8015244:	2801      	cmp	r0, #1
 8015246:	d00c      	beq.n	8015262 <IKS01A3_MOTION_SENSOR_Write_Register+0x22>
 8015248:	f06f 0001 	mvn.w	r0, #1
      ret = BSP_ERROR_WRONG_PARAM;
      break;
  }

  return ret;
}
 801524c:	bd08      	pop	{r3, pc}
      if (LIS2MDL_Write_Reg(MotionCompObj[Instance], Reg, Data) != BSP_ERROR_NONE)
 801524e:	4b07      	ldr	r3, [pc, #28]	; (801526c <IKS01A3_MOTION_SENSOR_Write_Register+0x2c>)
 8015250:	6818      	ldr	r0, [r3, #0]
 8015252:	f7f0 fb9c 	bl	800598e <LIS2MDL_Write_Reg>
 8015256:	b110      	cbz	r0, 801525e <IKS01A3_MOTION_SENSOR_Write_Register+0x1e>
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8015258:	f06f 0004 	mvn.w	r0, #4
 801525c:	e7f6      	b.n	801524c <IKS01A3_MOTION_SENSOR_Write_Register+0xc>
        ret = BSP_ERROR_NONE;
 801525e:	2000      	movs	r0, #0
 8015260:	e7f4      	b.n	801524c <IKS01A3_MOTION_SENSOR_Write_Register+0xc>
      if (ISM330DLC_Write_Reg(MotionCompObj[Instance], Reg, Data) != BSP_ERROR_NONE)
 8015262:	4b02      	ldr	r3, [pc, #8]	; (801526c <IKS01A3_MOTION_SENSOR_Write_Register+0x2c>)
 8015264:	6858      	ldr	r0, [r3, #4]
 8015266:	f000 fd25 	bl	8015cb4 <ISM330DLC_Write_Reg>
 801526a:	e7f4      	b.n	8015256 <IKS01A3_MOTION_SENSOR_Write_Register+0x16>
 801526c:	2000c014 	.word	0x2000c014

08015270 <IKS01A3_MOTION_SENSOR_FIFO_Set_Decimation>:
 *         - MOTION_GYRO or MOTION_ACCELERO for instance IKS01A3_ISM330DLC_0
 * @param  Decimation FIFO decimation
 * @retval BSP status
 */
int32_t IKS01A3_MOTION_SENSOR_FIFO_Set_Decimation(uint32_t Instance, uint32_t Function, uint8_t Decimation)
{
 8015270:	b508      	push	{r3, lr}
 8015272:	460b      	mov	r3, r1
 8015274:	4611      	mov	r1, r2
  int32_t ret;

  switch (Instance)
 8015276:	b140      	cbz	r0, 801528a <IKS01A3_MOTION_SENSOR_FIFO_Set_Decimation+0x1a>
 8015278:	2801      	cmp	r0, #1
 801527a:	d112      	bne.n	80152a2 <IKS01A3_MOTION_SENSOR_FIFO_Set_Decimation+0x32>
      break;
#endif

#if (USE_IKS01A3_MOTION_SENSOR_ISM330DLC_0 == 1)
    case IKS01A3_ISM330DLC_0:
      if ((Function & MOTION_ACCELERO) == MOTION_ACCELERO)
 801527c:	079a      	lsls	r2, r3, #30
 801527e:	d509      	bpl.n	8015294 <IKS01A3_MOTION_SENSOR_FIFO_Set_Decimation+0x24>
      {
        if (ISM330DLC_FIFO_ACC_Set_Decimation(MotionCompObj[Instance], Decimation) != BSP_ERROR_NONE)
 8015280:	4b09      	ldr	r3, [pc, #36]	; (80152a8 <IKS01A3_MOTION_SENSOR_FIFO_Set_Decimation+0x38>)
 8015282:	6858      	ldr	r0, [r3, #4]
 8015284:	f000 fe28 	bl	8015ed8 <ISM330DLC_FIFO_ACC_Set_Decimation>
 8015288:	b110      	cbz	r0, 8015290 <IKS01A3_MOTION_SENSOR_FIFO_Set_Decimation+0x20>
      ret = BSP_ERROR_COMPONENT_FAILURE;
 801528a:	f06f 0004 	mvn.w	r0, #4
 801528e:	e000      	b.n	8015292 <IKS01A3_MOTION_SENSOR_FIFO_Set_Decimation+0x22>
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
        }
        else
        {
          ret = BSP_ERROR_NONE;
 8015290:	2000      	movs	r0, #0
      ret = BSP_ERROR_WRONG_PARAM;
      break;
  }

  return ret;
}
 8015292:	bd08      	pop	{r3, pc}
      else if ((Function & MOTION_GYRO) == MOTION_GYRO)
 8015294:	07db      	lsls	r3, r3, #31
 8015296:	d504      	bpl.n	80152a2 <IKS01A3_MOTION_SENSOR_FIFO_Set_Decimation+0x32>
        if (ISM330DLC_FIFO_GYRO_Set_Decimation(MotionCompObj[Instance], Decimation) != BSP_ERROR_NONE)
 8015298:	4b03      	ldr	r3, [pc, #12]	; (80152a8 <IKS01A3_MOTION_SENSOR_FIFO_Set_Decimation+0x38>)
 801529a:	6858      	ldr	r0, [r3, #4]
 801529c:	f000 fe2a 	bl	8015ef4 <ISM330DLC_FIFO_GYRO_Set_Decimation>
 80152a0:	e7f2      	b.n	8015288 <IKS01A3_MOTION_SENSOR_FIFO_Set_Decimation+0x18>
        ret = BSP_ERROR_WRONG_PARAM;
 80152a2:	f06f 0001 	mvn.w	r0, #1
  return ret;
 80152a6:	e7f4      	b.n	8015292 <IKS01A3_MOTION_SENSOR_FIFO_Set_Decimation+0x22>
 80152a8:	2000c014 	.word	0x2000c014

080152ac <IKS01A3_MOTION_SENSOR_FIFO_Set_ODR_Value>:
 * @param  Instance the device instance
 * @param  Odr FIFO ODR value
 * @retval BSP status
 */
int32_t IKS01A3_MOTION_SENSOR_FIFO_Set_ODR_Value(uint32_t Instance, float Odr)
{
 80152ac:	b508      	push	{r3, lr}
  int32_t ret;

  switch (Instance)
 80152ae:	b150      	cbz	r0, 80152c6 <IKS01A3_MOTION_SENSOR_FIFO_Set_ODR_Value+0x1a>
 80152b0:	2801      	cmp	r0, #1
 80152b2:	d10b      	bne.n	80152cc <IKS01A3_MOTION_SENSOR_FIFO_Set_ODR_Value+0x20>
      break;
#endif

#if (USE_IKS01A3_MOTION_SENSOR_ISM330DLC_0 == 1)
    case IKS01A3_ISM330DLC_0:
      if (ISM330DLC_FIFO_Set_ODR_Value(MotionCompObj[Instance], Odr) != BSP_ERROR_NONE)
 80152b4:	4b07      	ldr	r3, [pc, #28]	; (80152d4 <IKS01A3_MOTION_SENSOR_FIFO_Set_ODR_Value+0x28>)
 80152b6:	6858      	ldr	r0, [r3, #4]
 80152b8:	f000 fd52 	bl	8015d60 <ISM330DLC_FIFO_Set_ODR_Value>
 80152bc:	2800      	cmp	r0, #0
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80152be:	bf18      	it	ne
 80152c0:	f06f 0004 	mvnne.w	r0, #4
      ret = BSP_ERROR_WRONG_PARAM;
      break;
  }

  return ret;
}
 80152c4:	bd08      	pop	{r3, pc}
      ret = BSP_ERROR_COMPONENT_FAILURE;
 80152c6:	f06f 0004 	mvn.w	r0, #4
 80152ca:	e7fb      	b.n	80152c4 <IKS01A3_MOTION_SENSOR_FIFO_Set_ODR_Value+0x18>
  switch (Instance)
 80152cc:	f06f 0001 	mvn.w	r0, #1
 80152d0:	e7f8      	b.n	80152c4 <IKS01A3_MOTION_SENSOR_FIFO_Set_ODR_Value+0x18>
 80152d2:	bf00      	nop
 80152d4:	2000c014 	.word	0x2000c014

080152d8 <IKS01A3_MOTION_SENSOR_FIFO_Set_INT2_FIFO_Full>:
 * @param  Instance the device instance
 * @param  Status FIFO full interrupt on INT1 pin
 * @retval BSP status
 */
int32_t IKS01A3_MOTION_SENSOR_FIFO_Set_INT2_FIFO_Full(uint32_t Instance, uint8_t Status)
{
 80152d8:	b508      	push	{r3, lr}
  int32_t ret;

  switch (Instance)
 80152da:	b150      	cbz	r0, 80152f2 <IKS01A3_MOTION_SENSOR_FIFO_Set_INT2_FIFO_Full+0x1a>
 80152dc:	2801      	cmp	r0, #1
 80152de:	d10b      	bne.n	80152f8 <IKS01A3_MOTION_SENSOR_FIFO_Set_INT2_FIFO_Full+0x20>
      break;
#endif

#if (USE_IKS01A3_MOTION_SENSOR_ISM330DLC_0 == 1)
    case IKS01A3_ISM330DLC_0:
      if (ISM330DLC_FIFO_Set_INT2_FIFO_Full(MotionCompObj[Instance], Status) != BSP_ERROR_NONE)
 80152e0:	4b07      	ldr	r3, [pc, #28]	; (8015300 <IKS01A3_MOTION_SENSOR_FIFO_Set_INT2_FIFO_Full+0x28>)
 80152e2:	6858      	ldr	r0, [r3, #4]
 80152e4:	f000 fda4 	bl	8015e30 <ISM330DLC_FIFO_Set_INT2_FIFO_Full>
 80152e8:	2800      	cmp	r0, #0
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80152ea:	bf18      	it	ne
 80152ec:	f06f 0004 	mvnne.w	r0, #4
      ret = BSP_ERROR_WRONG_PARAM;
      break;
  }

  return ret;
}
 80152f0:	bd08      	pop	{r3, pc}
      ret = BSP_ERROR_COMPONENT_FAILURE;
 80152f2:	f06f 0004 	mvn.w	r0, #4
 80152f6:	e7fb      	b.n	80152f0 <IKS01A3_MOTION_SENSOR_FIFO_Set_INT2_FIFO_Full+0x18>
  switch (Instance)
 80152f8:	f06f 0001 	mvn.w	r0, #1
 80152fc:	e7f8      	b.n	80152f0 <IKS01A3_MOTION_SENSOR_FIFO_Set_INT2_FIFO_Full+0x18>
 80152fe:	bf00      	nop
 8015300:	2000c014 	.word	0x2000c014

08015304 <IKS01A3_MOTION_SENSOR_FIFO_Set_Watermark_Level>:
 * @param  Instance the device instance
 * @param  Watermark FIFO watermark level
 * @retval BSP status
 */
int32_t IKS01A3_MOTION_SENSOR_FIFO_Set_Watermark_Level(uint32_t Instance, uint16_t Watermark)
{
 8015304:	b508      	push	{r3, lr}
  int32_t ret;

  switch (Instance)
 8015306:	b150      	cbz	r0, 801531e <IKS01A3_MOTION_SENSOR_FIFO_Set_Watermark_Level+0x1a>
 8015308:	2801      	cmp	r0, #1
 801530a:	d10b      	bne.n	8015324 <IKS01A3_MOTION_SENSOR_FIFO_Set_Watermark_Level+0x20>
      break;
#endif

#if (USE_IKS01A3_MOTION_SENSOR_ISM330DLC_0 == 1)
    case IKS01A3_ISM330DLC_0:
      if (ISM330DLC_FIFO_Set_Watermark_Level(MotionCompObj[Instance], Watermark) != BSP_ERROR_NONE)
 801530c:	4b07      	ldr	r3, [pc, #28]	; (801532c <IKS01A3_MOTION_SENSOR_FIFO_Set_Watermark_Level+0x28>)
 801530e:	6858      	ldr	r0, [r3, #4]
 8015310:	f000 fdae 	bl	8015e70 <ISM330DLC_FIFO_Set_Watermark_Level>
 8015314:	2800      	cmp	r0, #0
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8015316:	bf18      	it	ne
 8015318:	f06f 0004 	mvnne.w	r0, #4
      ret = BSP_ERROR_WRONG_PARAM;
      break;
  }

  return ret;
}
 801531c:	bd08      	pop	{r3, pc}
      ret = BSP_ERROR_COMPONENT_FAILURE;
 801531e:	f06f 0004 	mvn.w	r0, #4
 8015322:	e7fb      	b.n	801531c <IKS01A3_MOTION_SENSOR_FIFO_Set_Watermark_Level+0x18>
  switch (Instance)
 8015324:	f06f 0001 	mvn.w	r0, #1
 8015328:	e7f8      	b.n	801531c <IKS01A3_MOTION_SENSOR_FIFO_Set_Watermark_Level+0x18>
 801532a:	bf00      	nop
 801532c:	2000c014 	.word	0x2000c014

08015330 <IKS01A3_MOTION_SENSOR_FIFO_Set_Stop_On_Fth>:
 * @param  Instance the device instance
 * @param  Status FIFO stop on watermark status
 * @retval BSP status
 */
int32_t IKS01A3_MOTION_SENSOR_FIFO_Set_Stop_On_Fth(uint32_t Instance, uint8_t Status)
{
 8015330:	b508      	push	{r3, lr}
  int32_t ret;

  switch (Instance)
 8015332:	b150      	cbz	r0, 801534a <IKS01A3_MOTION_SENSOR_FIFO_Set_Stop_On_Fth+0x1a>
 8015334:	2801      	cmp	r0, #1
 8015336:	d10b      	bne.n	8015350 <IKS01A3_MOTION_SENSOR_FIFO_Set_Stop_On_Fth+0x20>
      break;
#endif

#if (USE_IKS01A3_MOTION_SENSOR_ISM330DLC_0 == 1)
    case IKS01A3_ISM330DLC_0:
      if (ISM330DLC_FIFO_Set_Stop_On_Fth(MotionCompObj[Instance], Status) != BSP_ERROR_NONE)
 8015338:	4b07      	ldr	r3, [pc, #28]	; (8015358 <IKS01A3_MOTION_SENSOR_FIFO_Set_Stop_On_Fth+0x28>)
 801533a:	6858      	ldr	r0, [r3, #4]
 801533c:	f000 fda1 	bl	8015e82 <ISM330DLC_FIFO_Set_Stop_On_Fth>
 8015340:	2800      	cmp	r0, #0
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8015342:	bf18      	it	ne
 8015344:	f06f 0004 	mvnne.w	r0, #4
      ret = BSP_ERROR_WRONG_PARAM;
      break;
  }

  return ret;
}
 8015348:	bd08      	pop	{r3, pc}
      ret = BSP_ERROR_COMPONENT_FAILURE;
 801534a:	f06f 0004 	mvn.w	r0, #4
 801534e:	e7fb      	b.n	8015348 <IKS01A3_MOTION_SENSOR_FIFO_Set_Stop_On_Fth+0x18>
  switch (Instance)
 8015350:	f06f 0001 	mvn.w	r0, #1
 8015354:	e7f8      	b.n	8015348 <IKS01A3_MOTION_SENSOR_FIFO_Set_Stop_On_Fth+0x18>
 8015356:	bf00      	nop
 8015358:	2000c014 	.word	0x2000c014

0801535c <IKS01A3_MOTION_SENSOR_FIFO_Set_Mode>:
 * @param  Instance the device instance
 * @param  Mode FIFO mode
 * @retval BSP status
 */
int32_t IKS01A3_MOTION_SENSOR_FIFO_Set_Mode(uint32_t Instance, uint8_t Mode)
{
 801535c:	b508      	push	{r3, lr}
  int32_t ret;

  switch (Instance)
 801535e:	b150      	cbz	r0, 8015376 <IKS01A3_MOTION_SENSOR_FIFO_Set_Mode+0x1a>
 8015360:	2801      	cmp	r0, #1
 8015362:	d10b      	bne.n	801537c <IKS01A3_MOTION_SENSOR_FIFO_Set_Mode+0x20>
#endif


#if (USE_IKS01A3_MOTION_SENSOR_ISM330DLC_0 == 1)
    case IKS01A3_ISM330DLC_0:
      if (ISM330DLC_FIFO_Set_Mode(MotionCompObj[Instance], Mode) != BSP_ERROR_NONE)
 8015364:	4b07      	ldr	r3, [pc, #28]	; (8015384 <IKS01A3_MOTION_SENSOR_FIFO_Set_Mode+0x28>)
 8015366:	6858      	ldr	r0, [r3, #4]
 8015368:	f000 fd94 	bl	8015e94 <ISM330DLC_FIFO_Set_Mode>
 801536c:	2800      	cmp	r0, #0
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 801536e:	bf18      	it	ne
 8015370:	f06f 0004 	mvnne.w	r0, #4
      ret = BSP_ERROR_WRONG_PARAM;
      break;
  }

  return ret;
}
 8015374:	bd08      	pop	{r3, pc}
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8015376:	f06f 0004 	mvn.w	r0, #4
 801537a:	e7fb      	b.n	8015374 <IKS01A3_MOTION_SENSOR_FIFO_Set_Mode+0x18>
  switch (Instance)
 801537c:	f06f 0001 	mvn.w	r0, #1
 8015380:	e7f8      	b.n	8015374 <IKS01A3_MOTION_SENSOR_FIFO_Set_Mode+0x18>
 8015382:	bf00      	nop
 8015384:	2000c014 	.word	0x2000c014

08015388 <IKS01A3_MOTION_SENSOR_DRDY_Set_Mode>:
 * @param  Instance the device instance
 * @param  Status FIFO full interrupt on INT1 pin
 * @retval BSP status   
 */
int32_t IKS01A3_MOTION_SENSOR_DRDY_Set_Mode(uint32_t Instance,uint8_t Status)
{
 8015388:	b508      	push	{r3, lr}
  int32_t ret;
 
  switch (Instance)
 801538a:	b150      	cbz	r0, 80153a2 <IKS01A3_MOTION_SENSOR_DRDY_Set_Mode+0x1a>
 801538c:	2801      	cmp	r0, #1
 801538e:	d10b      	bne.n	80153a8 <IKS01A3_MOTION_SENSOR_DRDY_Set_Mode+0x20>
      break;
#endif

#if (USE_IKS01A3_MOTION_SENSOR_ISM330DLC_0 == 1)
    case IKS01A3_ISM330DLC_0:
      if (ISM330DLC_Set_Drdy_Mode(MotionCompObj[Instance],Status) != BSP_ERROR_NONE)
 8015390:	4b07      	ldr	r3, [pc, #28]	; (80153b0 <IKS01A3_MOTION_SENSOR_DRDY_Set_Mode+0x28>)
 8015392:	6858      	ldr	r0, [r3, #4]
 8015394:	f000 fcd2 	bl	8015d3c <ISM330DLC_Set_Drdy_Mode>
 8015398:	2800      	cmp	r0, #0
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 801539a:	bf18      	it	ne
 801539c:	f06f 0004 	mvnne.w	r0, #4
      ret = BSP_ERROR_WRONG_PARAM;
      break;
  }

  return ret;
}
 80153a0:	bd08      	pop	{r3, pc}
      ret = BSP_ERROR_COMPONENT_FAILURE;
 80153a2:	f06f 0004 	mvn.w	r0, #4
 80153a6:	e7fb      	b.n	80153a0 <IKS01A3_MOTION_SENSOR_DRDY_Set_Mode+0x18>
  switch (Instance)
 80153a8:	f06f 0001 	mvn.w	r0, #1
 80153ac:	e7f8      	b.n	80153a0 <IKS01A3_MOTION_SENSOR_DRDY_Set_Mode+0x18>
 80153ae:	bf00      	nop
 80153b0:	2000c014 	.word	0x2000c014

080153b4 <IKS01A3_MOTION_SENSOR_FIFO_Read>:
 */
int32_t IKS01A3_MOTION_SENSOR_FIFO_Read(uint32_t Instance, uint8_t *pBuff, uint16_t Watermark)
{
  int32_t ret;
  
  switch (Instance)
 80153b4:	2801      	cmp	r0, #1
{
 80153b6:	b508      	push	{r3, lr}
  switch (Instance)
 80153b8:	d10a      	bne.n	80153d0 <IKS01A3_MOTION_SENSOR_FIFO_Read+0x1c>
  {
#if (USE_IKS01A3_MOTION_SENSOR_ISM330DLC_0 == 1)
  case IKS01A3_ISM330DLC_0:
    if (ISM330DLC_FIFO_Read(MotionCompObj[Instance], pBuff, Watermark*2) != BSP_ERROR_NONE)
 80153ba:	4b07      	ldr	r3, [pc, #28]	; (80153d8 <IKS01A3_MOTION_SENSOR_FIFO_Read+0x24>)
 80153bc:	0052      	lsls	r2, r2, #1
 80153be:	6858      	ldr	r0, [r3, #4]
 80153c0:	b292      	uxth	r2, r2
 80153c2:	f000 fd7b 	bl	8015ebc <ISM330DLC_FIFO_Read>
 80153c6:	2800      	cmp	r0, #0
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 80153c8:	bf18      	it	ne
 80153ca:	f06f 0004 	mvnne.w	r0, #4
    ret = BSP_ERROR_WRONG_PARAM;
    break;
  }
  
  return ret;
}
 80153ce:	bd08      	pop	{r3, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 80153d0:	f06f 0001 	mvn.w	r0, #1
 80153d4:	e7fb      	b.n	80153ce <IKS01A3_MOTION_SENSOR_FIFO_Read+0x1a>
 80153d6:	bf00      	nop
 80153d8:	2000c014 	.word	0x2000c014

080153dc <IKS01A3_MOTION_SENSOR_Enable_HP_Filter>:
 * @param  Instance the device instance
 * @param  Cutoff frequency
 * @retval BSP status
 */
int32_t IKS01A3_MOTION_SENSOR_Enable_HP_Filter(uint32_t Instance, uint8_t CutOff)
{
 80153dc:	b508      	push	{r3, lr}
  int32_t ret;

  switch (Instance)
 80153de:	b150      	cbz	r0, 80153f6 <IKS01A3_MOTION_SENSOR_Enable_HP_Filter+0x1a>
 80153e0:	2801      	cmp	r0, #1
 80153e2:	d10b      	bne.n	80153fc <IKS01A3_MOTION_SENSOR_Enable_HP_Filter+0x20>
  {
#if (USE_IKS01A3_MOTION_SENSOR_ISM330DLC_0 == 1)
    case IKS01A3_ISM330DLC_0:
      if (ISM330DLC_ACC_Enable_HP_Filter(MotionCompObj[Instance],(ism330dlc_hpcf_xl_t)CutOff) != BSP_ERROR_NONE)
 80153e4:	4b07      	ldr	r3, [pc, #28]	; (8015404 <IKS01A3_MOTION_SENSOR_Enable_HP_Filter+0x28>)
 80153e6:	6858      	ldr	r0, [r3, #4]
 80153e8:	f000 fcb1 	bl	8015d4e <ISM330DLC_ACC_Enable_HP_Filter>
 80153ec:	2800      	cmp	r0, #0
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80153ee:	bf18      	it	ne
 80153f0:	f06f 0004 	mvnne.w	r0, #4
      ret = BSP_ERROR_WRONG_PARAM;
      break;
  }

  return ret;
}
 80153f4:	bd08      	pop	{r3, pc}
      ret = BSP_ERROR_COMPONENT_FAILURE;
 80153f6:	f06f 0004 	mvn.w	r0, #4
 80153fa:	e7fb      	b.n	80153f4 <IKS01A3_MOTION_SENSOR_Enable_HP_Filter+0x18>
  switch (Instance)
 80153fc:	f06f 0001 	mvn.w	r0, #1
 8015400:	e7f8      	b.n	80153f4 <IKS01A3_MOTION_SENSOR_Enable_HP_Filter+0x18>
 8015402:	bf00      	nop
 8015404:	2000c014 	.word	0x2000c014

08015408 <IKS01A3_MOTION_SENSOR_Set_INT2_DRDY>:
 * @param  Instance the device instance
 * @param  Status FIFO full interrupt on INT1 pin
 * @retval BSP status   
 */
int32_t IKS01A3_MOTION_SENSOR_Set_INT2_DRDY(uint32_t Instance,uint8_t Status)
{
 8015408:	b508      	push	{r3, lr}
  int32_t ret;
 
  switch (Instance)
 801540a:	b150      	cbz	r0, 8015422 <IKS01A3_MOTION_SENSOR_Set_INT2_DRDY+0x1a>
 801540c:	2801      	cmp	r0, #1
 801540e:	d10b      	bne.n	8015428 <IKS01A3_MOTION_SENSOR_Set_INT2_DRDY+0x20>
      break;
#endif

#if (USE_IKS01A3_MOTION_SENSOR_ISM330DLC_0 == 1)
    case IKS01A3_ISM330DLC_0:
      if (ISM330DLC_Set_INT2_Drdy(MotionCompObj[Instance],Status) != BSP_ERROR_NONE)
 8015410:	4b07      	ldr	r3, [pc, #28]	; (8015430 <IKS01A3_MOTION_SENSOR_Set_INT2_DRDY+0x28>)
 8015412:	6858      	ldr	r0, [r3, #4]
 8015414:	f000 fd7c 	bl	8015f10 <ISM330DLC_Set_INT2_Drdy>
 8015418:	2800      	cmp	r0, #0
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 801541a:	bf18      	it	ne
 801541c:	f06f 0004 	mvnne.w	r0, #4
      ret = BSP_ERROR_WRONG_PARAM;
      break;
  }

  return ret;
}
 8015420:	bd08      	pop	{r3, pc}
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8015422:	f06f 0004 	mvn.w	r0, #4
 8015426:	e7fb      	b.n	8015420 <IKS01A3_MOTION_SENSOR_Set_INT2_DRDY+0x18>
  switch (Instance)
 8015428:	f06f 0001 	mvn.w	r0, #1
 801542c:	e7f8      	b.n	8015420 <IKS01A3_MOTION_SENSOR_Set_INT2_DRDY+0x18>
 801542e:	bf00      	nop
 8015430:	2000c014 	.word	0x2000c014

08015434 <ISM330DLC_GetCapabilities>:

  Capabilities->Acc          = 1;
  Capabilities->Gyro         = 1;
  Capabilities->Magneto      = 0;
  Capabilities->LowPower     = 0;
  Capabilities->GyroMaxFS    = 2000;
 8015434:	f240 1201 	movw	r2, #257	; 0x101
 8015438:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 801543c:	e9c1 2300 	strd	r2, r3, [r1]
  Capabilities->AccMaxFS     = 16;
  Capabilities->MagMaxFS     = 0;
 8015440:	2000      	movs	r0, #0
 8015442:	2310      	movs	r3, #16
 8015444:	e9c1 3002 	strd	r3, r0, [r1, #8]
  Capabilities->GyroMaxOdr   = 6660.0f;
 8015448:	4b02      	ldr	r3, [pc, #8]	; (8015454 <ISM330DLC_GetCapabilities+0x20>)
 801544a:	610b      	str	r3, [r1, #16]
  Capabilities->AccMaxOdr    = 6660.0f;
 801544c:	614b      	str	r3, [r1, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 801544e:	2300      	movs	r3, #0
 8015450:	618b      	str	r3, [r1, #24]
  return ISM330DLC_OK;
}
 8015452:	4770      	bx	lr
 8015454:	45d02000 	.word	0x45d02000

08015458 <ReadRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8015458:	b410      	push	{r4}
  ISM330DLC_Object_t *pObj = (ISM330DLC_Object_t *)Handle;

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 801545a:	6944      	ldr	r4, [r0, #20]
 801545c:	7b00      	ldrb	r0, [r0, #12]
 801545e:	46a4      	mov	ip, r4
}
 8015460:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8015464:	4760      	bx	ip

08015466 <WriteRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8015466:	b410      	push	{r4}
  ISM330DLC_Object_t *pObj = (ISM330DLC_Object_t *)Handle;

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8015468:	6904      	ldr	r4, [r0, #16]
 801546a:	7b00      	ldrb	r0, [r0, #12]
 801546c:	46a4      	mov	ip, r4
}
 801546e:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8015472:	4760      	bx	ip

08015474 <ISM330DLC_ACC_SetFullScale>:
           : (FullScale <= 4) ? ISM330DLC_4g
 8015474:	2902      	cmp	r1, #2
{
 8015476:	b508      	push	{r3, lr}
           : (FullScale <= 4) ? ISM330DLC_4g
 8015478:	dd0d      	ble.n	8015496 <ISM330DLC_ACC_SetFullScale+0x22>
 801547a:	2904      	cmp	r1, #4
 801547c:	dd0d      	ble.n	801549a <ISM330DLC_ACC_SetFullScale+0x26>
 801547e:	2909      	cmp	r1, #9
 8015480:	bfb4      	ite	lt
 8015482:	2103      	movlt	r1, #3
 8015484:	2101      	movge	r1, #1
  if (ism330dlc_xl_full_scale_set(&(pObj->Ctx), new_fs) != ISM330DLC_OK)
 8015486:	301c      	adds	r0, #28
 8015488:	f7f0 fee0 	bl	800624c <ism330dlc_xl_full_scale_set>
 801548c:	3800      	subs	r0, #0
 801548e:	bf18      	it	ne
 8015490:	2001      	movne	r0, #1
}
 8015492:	4240      	negs	r0, r0
 8015494:	bd08      	pop	{r3, pc}
           : (FullScale <= 4) ? ISM330DLC_4g
 8015496:	2100      	movs	r1, #0
 8015498:	e7f5      	b.n	8015486 <ISM330DLC_ACC_SetFullScale+0x12>
 801549a:	2102      	movs	r1, #2
 801549c:	e7f3      	b.n	8015486 <ISM330DLC_ACC_SetFullScale+0x12>

0801549e <ISM330DLC_Init>:
{
 801549e:	b570      	push	{r4, r5, r6, lr}
  if (ism330dlc_reset_set(&(pObj->Ctx),PROPERTY_ENABLE) != ISM330DLC_OK)
 80154a0:	f100 041c 	add.w	r4, r0, #28
{
 80154a4:	4605      	mov	r5, r0
  if (ism330dlc_reset_set(&(pObj->Ctx),PROPERTY_ENABLE) != ISM330DLC_OK)
 80154a6:	2101      	movs	r1, #1
 80154a8:	4620      	mov	r0, r4
 80154aa:	f7f1 f82a 	bl	8006502 <ism330dlc_reset_set>
 80154ae:	b110      	cbz	r0, 80154b6 <ISM330DLC_Init+0x18>
    return ISM330DLC_ERROR;
 80154b0:	f04f 30ff 	mov.w	r0, #4294967295
}
 80154b4:	bd70      	pop	{r4, r5, r6, pc}
  if (ism330dlc_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != ISM330DLC_OK)
 80154b6:	2101      	movs	r1, #1
 80154b8:	4620      	mov	r0, r4
 80154ba:	f7f1 f839 	bl	8006530 <ism330dlc_auto_increment_set>
 80154be:	2800      	cmp	r0, #0
 80154c0:	d1f6      	bne.n	80154b0 <ISM330DLC_Init+0x12>
  if (ism330dlc_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != ISM330DLC_OK)
 80154c2:	2101      	movs	r1, #1
 80154c4:	4620      	mov	r0, r4
 80154c6:	f7f0 ffad 	bl	8006424 <ism330dlc_block_data_update_set>
 80154ca:	4601      	mov	r1, r0
 80154cc:	2800      	cmp	r0, #0
 80154ce:	d1ef      	bne.n	80154b0 <ISM330DLC_Init+0x12>
  if (ism330dlc_fifo_mode_set(&(pObj->Ctx), ISM330DLC_BYPASS_MODE) != ISM330DLC_OK)
 80154d0:	4620      	mov	r0, r4
 80154d2:	f7f1 f8c7 	bl	8006664 <ism330dlc_fifo_mode_set>
 80154d6:	4601      	mov	r1, r0
 80154d8:	2800      	cmp	r0, #0
 80154da:	d1e9      	bne.n	80154b0 <ISM330DLC_Init+0x12>
  pObj->acc_odr = ISM330DLC_XL_ODR_104Hz;
 80154dc:	2604      	movs	r6, #4
 80154de:	f885 602b 	strb.w	r6, [r5, #43]	; 0x2b
  if (ism330dlc_xl_data_rate_set(&(pObj->Ctx), ISM330DLC_XL_ODR_OFF) != ISM330DLC_OK)
 80154e2:	4620      	mov	r0, r4
 80154e4:	f7f0 fee0 	bl	80062a8 <ism330dlc_xl_data_rate_set>
 80154e8:	4601      	mov	r1, r0
 80154ea:	2800      	cmp	r0, #0
 80154ec:	d1e0      	bne.n	80154b0 <ISM330DLC_Init+0x12>
  if (ism330dlc_xl_full_scale_set(&(pObj->Ctx), ISM330DLC_2g) != ISM330DLC_OK)
 80154ee:	4620      	mov	r0, r4
 80154f0:	f7f0 feac 	bl	800624c <ism330dlc_xl_full_scale_set>
 80154f4:	4601      	mov	r1, r0
 80154f6:	2800      	cmp	r0, #0
 80154f8:	d1da      	bne.n	80154b0 <ISM330DLC_Init+0x12>
  pObj->gyro_odr = ISM330DLC_GY_ODR_104Hz;
 80154fa:	f885 602c 	strb.w	r6, [r5, #44]	; 0x2c
  if (ism330dlc_gy_data_rate_set(&(pObj->Ctx), ISM330DLC_GY_ODR_OFF) != ISM330DLC_OK)
 80154fe:	4620      	mov	r0, r4
 8015500:	f7f0 ff4d 	bl	800639e <ism330dlc_gy_data_rate_set>
 8015504:	2800      	cmp	r0, #0
 8015506:	d1d3      	bne.n	80154b0 <ISM330DLC_Init+0x12>
  if (ism330dlc_gy_full_scale_set(&(pObj->Ctx), ISM330DLC_2000dps) != ISM330DLC_OK)
 8015508:	2106      	movs	r1, #6
 801550a:	4620      	mov	r0, r4
 801550c:	f7f0 ff11 	bl	8006332 <ism330dlc_gy_full_scale_set>
 8015510:	2800      	cmp	r0, #0
 8015512:	d1cd      	bne.n	80154b0 <ISM330DLC_Init+0x12>
  pObj->is_initialized = 1;
 8015514:	2301      	movs	r3, #1
 8015516:	f885 3028 	strb.w	r3, [r5, #40]	; 0x28
  return ISM330DLC_OK;
 801551a:	e7cb      	b.n	80154b4 <ISM330DLC_Init+0x16>

0801551c <ISM330DLC_GYRO_SetFullScale>:
           : (FullScale <= 250)  ? ISM330DLC_250dps
 801551c:	297d      	cmp	r1, #125	; 0x7d
{
 801551e:	b508      	push	{r3, lr}
           : (FullScale <= 250)  ? ISM330DLC_250dps
 8015520:	dd11      	ble.n	8015546 <ISM330DLC_GYRO_SetFullScale+0x2a>
 8015522:	29fa      	cmp	r1, #250	; 0xfa
 8015524:	dd11      	ble.n	801554a <ISM330DLC_GYRO_SetFullScale+0x2e>
 8015526:	f5b1 7ffa 	cmp.w	r1, #500	; 0x1f4
 801552a:	dd10      	ble.n	801554e <ISM330DLC_GYRO_SetFullScale+0x32>
 801552c:	f5b1 7f7a 	cmp.w	r1, #1000	; 0x3e8
 8015530:	bfd4      	ite	le
 8015532:	2104      	movle	r1, #4
 8015534:	2106      	movgt	r1, #6
  if (ism330dlc_gy_full_scale_set(&(pObj->Ctx), new_fs) != ISM330DLC_OK)
 8015536:	301c      	adds	r0, #28
 8015538:	f7f0 fefb 	bl	8006332 <ism330dlc_gy_full_scale_set>
 801553c:	3800      	subs	r0, #0
 801553e:	bf18      	it	ne
 8015540:	2001      	movne	r0, #1
}
 8015542:	4240      	negs	r0, r0
 8015544:	bd08      	pop	{r3, pc}
           : (FullScale <= 250)  ? ISM330DLC_250dps
 8015546:	2101      	movs	r1, #1
 8015548:	e7f5      	b.n	8015536 <ISM330DLC_GYRO_SetFullScale+0x1a>
 801554a:	2100      	movs	r1, #0
 801554c:	e7f3      	b.n	8015536 <ISM330DLC_GYRO_SetFullScale+0x1a>
 801554e:	2102      	movs	r1, #2
 8015550:	e7f1      	b.n	8015536 <ISM330DLC_GYRO_SetFullScale+0x1a>

08015552 <ISM330DLC_ReadID>:
{
 8015552:	b508      	push	{r3, lr}
  if (ism330dlc_device_id_get(&(pObj->Ctx), Id) != ISM330DLC_OK)
 8015554:	301c      	adds	r0, #28
 8015556:	f7f0 ffcf 	bl	80064f8 <ism330dlc_device_id_get>
 801555a:	3800      	subs	r0, #0
 801555c:	bf18      	it	ne
 801555e:	2001      	movne	r0, #1
}
 8015560:	4240      	negs	r0, r0
 8015562:	bd08      	pop	{r3, pc}

08015564 <ISM330DLC_ACC_GetOutputDataRate>:
{
 8015564:	b513      	push	{r0, r1, r4, lr}
 8015566:	460c      	mov	r4, r1
  if (ism330dlc_xl_data_rate_get(&(pObj->Ctx), &odr_low_level) != ISM330DLC_OK)
 8015568:	301c      	adds	r0, #28
 801556a:	f10d 0107 	add.w	r1, sp, #7
 801556e:	f7f0 feb2 	bl	80062d6 <ism330dlc_xl_data_rate_get>
 8015572:	bb28      	cbnz	r0, 80155c0 <ISM330DLC_ACC_GetOutputDataRate+0x5c>
  switch (odr_low_level)
 8015574:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8015578:	2b0b      	cmp	r3, #11
 801557a:	d821      	bhi.n	80155c0 <ISM330DLC_ACC_GetOutputDataRate+0x5c>
 801557c:	e8df f003 	tbb	[pc, r3]
 8015580:	100e0c06 	.word	0x100e0c06
 8015584:	18161412 	.word	0x18161412
 8015588:	0a1e1c1a 	.word	0x0a1e1c1a
      *Odr = 0.0f;
 801558c:	2300      	movs	r3, #0
      *Odr = 6660.0f;
 801558e:	6023      	str	r3, [r4, #0]
}
 8015590:	b002      	add	sp, #8
 8015592:	bd10      	pop	{r4, pc}
      *Odr = 1.6f;
 8015594:	4b0c      	ldr	r3, [pc, #48]	; (80155c8 <ISM330DLC_ACC_GetOutputDataRate+0x64>)
 8015596:	e7fa      	b.n	801558e <ISM330DLC_ACC_GetOutputDataRate+0x2a>
      *Odr = 12.5f;
 8015598:	4b0c      	ldr	r3, [pc, #48]	; (80155cc <ISM330DLC_ACC_GetOutputDataRate+0x68>)
 801559a:	e7f8      	b.n	801558e <ISM330DLC_ACC_GetOutputDataRate+0x2a>
      *Odr = 26.0f;
 801559c:	4b0c      	ldr	r3, [pc, #48]	; (80155d0 <ISM330DLC_ACC_GetOutputDataRate+0x6c>)
 801559e:	e7f6      	b.n	801558e <ISM330DLC_ACC_GetOutputDataRate+0x2a>
      *Odr = 52.0f;
 80155a0:	4b0c      	ldr	r3, [pc, #48]	; (80155d4 <ISM330DLC_ACC_GetOutputDataRate+0x70>)
 80155a2:	e7f4      	b.n	801558e <ISM330DLC_ACC_GetOutputDataRate+0x2a>
      *Odr = 104.0f;
 80155a4:	4b0c      	ldr	r3, [pc, #48]	; (80155d8 <ISM330DLC_ACC_GetOutputDataRate+0x74>)
 80155a6:	e7f2      	b.n	801558e <ISM330DLC_ACC_GetOutputDataRate+0x2a>
      *Odr = 208.0f;
 80155a8:	4b0c      	ldr	r3, [pc, #48]	; (80155dc <ISM330DLC_ACC_GetOutputDataRate+0x78>)
 80155aa:	e7f0      	b.n	801558e <ISM330DLC_ACC_GetOutputDataRate+0x2a>
      *Odr = 416.0f;
 80155ac:	4b0c      	ldr	r3, [pc, #48]	; (80155e0 <ISM330DLC_ACC_GetOutputDataRate+0x7c>)
 80155ae:	e7ee      	b.n	801558e <ISM330DLC_ACC_GetOutputDataRate+0x2a>
      *Odr = 833.0f;
 80155b0:	4b0c      	ldr	r3, [pc, #48]	; (80155e4 <ISM330DLC_ACC_GetOutputDataRate+0x80>)
 80155b2:	e7ec      	b.n	801558e <ISM330DLC_ACC_GetOutputDataRate+0x2a>
      *Odr = 1660.0f;
 80155b4:	4b0c      	ldr	r3, [pc, #48]	; (80155e8 <ISM330DLC_ACC_GetOutputDataRate+0x84>)
 80155b6:	e7ea      	b.n	801558e <ISM330DLC_ACC_GetOutputDataRate+0x2a>
      *Odr = 3330.0f;
 80155b8:	4b0c      	ldr	r3, [pc, #48]	; (80155ec <ISM330DLC_ACC_GetOutputDataRate+0x88>)
 80155ba:	e7e8      	b.n	801558e <ISM330DLC_ACC_GetOutputDataRate+0x2a>
      *Odr = 6660.0f;
 80155bc:	4b0c      	ldr	r3, [pc, #48]	; (80155f0 <ISM330DLC_ACC_GetOutputDataRate+0x8c>)
 80155be:	e7e6      	b.n	801558e <ISM330DLC_ACC_GetOutputDataRate+0x2a>
  switch (odr_low_level)
 80155c0:	f04f 30ff 	mov.w	r0, #4294967295
 80155c4:	e7e4      	b.n	8015590 <ISM330DLC_ACC_GetOutputDataRate+0x2c>
 80155c6:	bf00      	nop
 80155c8:	3fcccccd 	.word	0x3fcccccd
 80155cc:	41480000 	.word	0x41480000
 80155d0:	41d00000 	.word	0x41d00000
 80155d4:	42500000 	.word	0x42500000
 80155d8:	42d00000 	.word	0x42d00000
 80155dc:	43500000 	.word	0x43500000
 80155e0:	43d00000 	.word	0x43d00000
 80155e4:	44504000 	.word	0x44504000
 80155e8:	44cf8000 	.word	0x44cf8000
 80155ec:	45502000 	.word	0x45502000
 80155f0:	45d02000 	.word	0x45d02000

080155f4 <ISM330DLC_ACC_GetSensitivity>:
{
 80155f4:	b513      	push	{r0, r1, r4, lr}
 80155f6:	460c      	mov	r4, r1
  if (ism330dlc_xl_full_scale_get(&(pObj->Ctx), &full_scale) != ISM330DLC_OK)
 80155f8:	301c      	adds	r0, #28
 80155fa:	f10d 0107 	add.w	r1, sp, #7
 80155fe:	f7f0 fe3c 	bl	800627a <ism330dlc_xl_full_scale_get>
 8015602:	b988      	cbnz	r0, 8015628 <ISM330DLC_ACC_GetSensitivity+0x34>
  switch (full_scale)
 8015604:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8015608:	2b03      	cmp	r3, #3
 801560a:	d80d      	bhi.n	8015628 <ISM330DLC_ACC_GetSensitivity+0x34>
 801560c:	e8df f003 	tbb	[pc, r3]
 8015610:	08060a02 	.word	0x08060a02
      *Sensitivity = ISM330DLC_ACC_SENSITIVITY_FS_2G;
 8015614:	4b06      	ldr	r3, [pc, #24]	; (8015630 <ISM330DLC_ACC_GetSensitivity+0x3c>)
      *Sensitivity = ISM330DLC_ACC_SENSITIVITY_FS_16G;
 8015616:	6023      	str	r3, [r4, #0]
}
 8015618:	b002      	add	sp, #8
 801561a:	bd10      	pop	{r4, pc}
      *Sensitivity = ISM330DLC_ACC_SENSITIVITY_FS_4G;
 801561c:	4b05      	ldr	r3, [pc, #20]	; (8015634 <ISM330DLC_ACC_GetSensitivity+0x40>)
 801561e:	e7fa      	b.n	8015616 <ISM330DLC_ACC_GetSensitivity+0x22>
      *Sensitivity = ISM330DLC_ACC_SENSITIVITY_FS_8G;
 8015620:	4b05      	ldr	r3, [pc, #20]	; (8015638 <ISM330DLC_ACC_GetSensitivity+0x44>)
 8015622:	e7f8      	b.n	8015616 <ISM330DLC_ACC_GetSensitivity+0x22>
      *Sensitivity = ISM330DLC_ACC_SENSITIVITY_FS_16G;
 8015624:	4b05      	ldr	r3, [pc, #20]	; (801563c <ISM330DLC_ACC_GetSensitivity+0x48>)
 8015626:	e7f6      	b.n	8015616 <ISM330DLC_ACC_GetSensitivity+0x22>
  switch (full_scale)
 8015628:	f04f 30ff 	mov.w	r0, #4294967295
 801562c:	e7f4      	b.n	8015618 <ISM330DLC_ACC_GetSensitivity+0x24>
 801562e:	bf00      	nop
 8015630:	3d79db23 	.word	0x3d79db23
 8015634:	3df9db23 	.word	0x3df9db23
 8015638:	3e79db23 	.word	0x3e79db23
 801563c:	3ef9db23 	.word	0x3ef9db23

08015640 <ISM330DLC_ACC_GetFullScale>:
{
 8015640:	b513      	push	{r0, r1, r4, lr}
 8015642:	460c      	mov	r4, r1
  if (ism330dlc_xl_full_scale_get(&(pObj->Ctx), &fs_low_level) != ISM330DLC_OK)
 8015644:	301c      	adds	r0, #28
 8015646:	f10d 0107 	add.w	r1, sp, #7
 801564a:	f7f0 fe16 	bl	800627a <ism330dlc_xl_full_scale_get>
 801564e:	b988      	cbnz	r0, 8015674 <ISM330DLC_ACC_GetFullScale+0x34>
  switch (fs_low_level)
 8015650:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8015654:	2b03      	cmp	r3, #3
 8015656:	d80d      	bhi.n	8015674 <ISM330DLC_ACC_GetFullScale+0x34>
 8015658:	e8df f003 	tbb	[pc, r3]
 801565c:	08060a02 	.word	0x08060a02
      *FullScale =  2;
 8015660:	2302      	movs	r3, #2
      *FullScale = 16;
 8015662:	6023      	str	r3, [r4, #0]
}
 8015664:	b002      	add	sp, #8
 8015666:	bd10      	pop	{r4, pc}
      *FullScale =  4;
 8015668:	2304      	movs	r3, #4
 801566a:	e7fa      	b.n	8015662 <ISM330DLC_ACC_GetFullScale+0x22>
      *FullScale =  8;
 801566c:	2308      	movs	r3, #8
 801566e:	e7f8      	b.n	8015662 <ISM330DLC_ACC_GetFullScale+0x22>
      *FullScale = 16;
 8015670:	2310      	movs	r3, #16
 8015672:	e7f6      	b.n	8015662 <ISM330DLC_ACC_GetFullScale+0x22>
  switch (fs_low_level)
 8015674:	f04f 30ff 	mov.w	r0, #4294967295
 8015678:	e7f4      	b.n	8015664 <ISM330DLC_ACC_GetFullScale+0x24>

0801567a <ISM330DLC_ACC_GetAxesRaw>:
{
 801567a:	b513      	push	{r0, r1, r4, lr}
 801567c:	460c      	mov	r4, r1
  if (ism330dlc_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != ISM330DLC_OK)
 801567e:	301c      	adds	r0, #28
 8015680:	4669      	mov	r1, sp
 8015682:	f7f0 ff04 	bl	800648e <ism330dlc_acceleration_raw_get>
 8015686:	b950      	cbnz	r0, 801569e <ISM330DLC_ACC_GetAxesRaw+0x24>
  Value->x = data_raw.i16bit[0];
 8015688:	f8bd 3000 	ldrh.w	r3, [sp]
 801568c:	8023      	strh	r3, [r4, #0]
  Value->y = data_raw.i16bit[1];
 801568e:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8015692:	8063      	strh	r3, [r4, #2]
  Value->z = data_raw.i16bit[2];
 8015694:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8015698:	80a3      	strh	r3, [r4, #4]
}
 801569a:	b002      	add	sp, #8
 801569c:	bd10      	pop	{r4, pc}
    return ISM330DLC_ERROR;
 801569e:	f04f 30ff 	mov.w	r0, #4294967295
 80156a2:	e7fa      	b.n	801569a <ISM330DLC_ACC_GetAxesRaw+0x20>

080156a4 <ISM330DLC_ACC_GetAxes>:
{
 80156a4:	b530      	push	{r4, r5, lr}
 80156a6:	b085      	sub	sp, #20
 80156a8:	4605      	mov	r5, r0
 80156aa:	460c      	mov	r4, r1
  float sensitivity = 0.0f;
 80156ac:	2300      	movs	r3, #0
  if (ism330dlc_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != ISM330DLC_OK)
 80156ae:	a902      	add	r1, sp, #8
 80156b0:	301c      	adds	r0, #28
  float sensitivity = 0.0f;
 80156b2:	9301      	str	r3, [sp, #4]
  if (ism330dlc_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != ISM330DLC_OK)
 80156b4:	f7f0 feeb 	bl	800648e <ism330dlc_acceleration_raw_get>
 80156b8:	b118      	cbz	r0, 80156c2 <ISM330DLC_ACC_GetAxes+0x1e>
    return ISM330DLC_ERROR;
 80156ba:	f04f 30ff 	mov.w	r0, #4294967295
}
 80156be:	b005      	add	sp, #20
 80156c0:	bd30      	pop	{r4, r5, pc}
  if (ISM330DLC_ACC_GetSensitivity(pObj, &sensitivity) != ISM330DLC_OK)
 80156c2:	a901      	add	r1, sp, #4
 80156c4:	4628      	mov	r0, r5
 80156c6:	f7ff ff95 	bl	80155f4 <ISM330DLC_ACC_GetSensitivity>
 80156ca:	2800      	cmp	r0, #0
 80156cc:	d1f5      	bne.n	80156ba <ISM330DLC_ACC_GetAxes+0x16>
  Acceleration->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 80156ce:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 80156d2:	eddd 6a01 	vldr	s13, [sp, #4]
 80156d6:	ee07 3a10 	vmov	s14, r3
 80156da:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  Acceleration->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 80156de:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
  Acceleration->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 80156e2:	ee27 7a26 	vmul.f32	s14, s14, s13
 80156e6:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 80156ea:	ed84 7a00 	vstr	s14, [r4]
  Acceleration->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 80156ee:	ee07 3a10 	vmov	s14, r3
  Acceleration->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 80156f2:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 80156f6:	ee07 3a90 	vmov	s15, r3
  Acceleration->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 80156fa:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  Acceleration->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 80156fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  Acceleration->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8015702:	ee27 7a26 	vmul.f32	s14, s14, s13
  Acceleration->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8015706:	ee67 7aa6 	vmul.f32	s15, s15, s13
  Acceleration->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 801570a:	eebd 7ac7 	vcvt.s32.f32	s14, s14
  Acceleration->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 801570e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
  Acceleration->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8015712:	ed84 7a01 	vstr	s14, [r4, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8015716:	edc4 7a02 	vstr	s15, [r4, #8]
  return ISM330DLC_OK;
 801571a:	e7d0      	b.n	80156be <ISM330DLC_ACC_GetAxes+0x1a>

0801571c <ISM330DLC_GYRO_GetOutputDataRate>:
{
 801571c:	b513      	push	{r0, r1, r4, lr}
 801571e:	460c      	mov	r4, r1
  if (ism330dlc_gy_data_rate_get(&(pObj->Ctx), &odr_low_level) != ISM330DLC_OK)
 8015720:	301c      	adds	r0, #28
 8015722:	f10d 0107 	add.w	r1, sp, #7
 8015726:	f7f0 fe51 	bl	80063cc <ism330dlc_gy_data_rate_get>
 801572a:	bb18      	cbnz	r0, 8015774 <ISM330DLC_GYRO_GetOutputDataRate+0x58>
  switch (odr_low_level)
 801572c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8015730:	2b0a      	cmp	r3, #10
 8015732:	d81f      	bhi.n	8015774 <ISM330DLC_GYRO_GetOutputDataRate+0x58>
 8015734:	e8df f003 	tbb	[pc, r3]
 8015738:	0e0c0a06 	.word	0x0e0c0a06
 801573c:	16141210 	.word	0x16141210
 8015740:	1a18      	.short	0x1a18
 8015742:	1c          	.byte	0x1c
 8015743:	00          	.byte	0x00
      *Odr = 0.0f;
 8015744:	2300      	movs	r3, #0
      *Odr =  6660.0f;
 8015746:	6023      	str	r3, [r4, #0]
}
 8015748:	b002      	add	sp, #8
 801574a:	bd10      	pop	{r4, pc}
      *Odr = 12.5f;
 801574c:	4b0b      	ldr	r3, [pc, #44]	; (801577c <ISM330DLC_GYRO_GetOutputDataRate+0x60>)
 801574e:	e7fa      	b.n	8015746 <ISM330DLC_GYRO_GetOutputDataRate+0x2a>
      *Odr = 26.0f;
 8015750:	4b0b      	ldr	r3, [pc, #44]	; (8015780 <ISM330DLC_GYRO_GetOutputDataRate+0x64>)
 8015752:	e7f8      	b.n	8015746 <ISM330DLC_GYRO_GetOutputDataRate+0x2a>
      *Odr = 52.0f;
 8015754:	4b0b      	ldr	r3, [pc, #44]	; (8015784 <ISM330DLC_GYRO_GetOutputDataRate+0x68>)
 8015756:	e7f6      	b.n	8015746 <ISM330DLC_GYRO_GetOutputDataRate+0x2a>
      *Odr = 104.0f;
 8015758:	4b0b      	ldr	r3, [pc, #44]	; (8015788 <ISM330DLC_GYRO_GetOutputDataRate+0x6c>)
 801575a:	e7f4      	b.n	8015746 <ISM330DLC_GYRO_GetOutputDataRate+0x2a>
      *Odr = 208.0f;
 801575c:	4b0b      	ldr	r3, [pc, #44]	; (801578c <ISM330DLC_GYRO_GetOutputDataRate+0x70>)
 801575e:	e7f2      	b.n	8015746 <ISM330DLC_GYRO_GetOutputDataRate+0x2a>
      *Odr = 416.0f;
 8015760:	4b0b      	ldr	r3, [pc, #44]	; (8015790 <ISM330DLC_GYRO_GetOutputDataRate+0x74>)
 8015762:	e7f0      	b.n	8015746 <ISM330DLC_GYRO_GetOutputDataRate+0x2a>
      *Odr = 833.0f;
 8015764:	4b0b      	ldr	r3, [pc, #44]	; (8015794 <ISM330DLC_GYRO_GetOutputDataRate+0x78>)
 8015766:	e7ee      	b.n	8015746 <ISM330DLC_GYRO_GetOutputDataRate+0x2a>
      *Odr =  1660.0f;
 8015768:	4b0b      	ldr	r3, [pc, #44]	; (8015798 <ISM330DLC_GYRO_GetOutputDataRate+0x7c>)
 801576a:	e7ec      	b.n	8015746 <ISM330DLC_GYRO_GetOutputDataRate+0x2a>
      *Odr =  3330.0f;
 801576c:	4b0b      	ldr	r3, [pc, #44]	; (801579c <ISM330DLC_GYRO_GetOutputDataRate+0x80>)
 801576e:	e7ea      	b.n	8015746 <ISM330DLC_GYRO_GetOutputDataRate+0x2a>
      *Odr =  6660.0f;
 8015770:	4b0b      	ldr	r3, [pc, #44]	; (80157a0 <ISM330DLC_GYRO_GetOutputDataRate+0x84>)
 8015772:	e7e8      	b.n	8015746 <ISM330DLC_GYRO_GetOutputDataRate+0x2a>
  switch (odr_low_level)
 8015774:	f04f 30ff 	mov.w	r0, #4294967295
 8015778:	e7e6      	b.n	8015748 <ISM330DLC_GYRO_GetOutputDataRate+0x2c>
 801577a:	bf00      	nop
 801577c:	41480000 	.word	0x41480000
 8015780:	41d00000 	.word	0x41d00000
 8015784:	42500000 	.word	0x42500000
 8015788:	42d00000 	.word	0x42d00000
 801578c:	43500000 	.word	0x43500000
 8015790:	43d00000 	.word	0x43d00000
 8015794:	44504000 	.word	0x44504000
 8015798:	44cf8000 	.word	0x44cf8000
 801579c:	45502000 	.word	0x45502000
 80157a0:	45d02000 	.word	0x45d02000

080157a4 <ISM330DLC_GYRO_GetSensitivity>:
{
 80157a4:	b513      	push	{r0, r1, r4, lr}
 80157a6:	460c      	mov	r4, r1
  if (ism330dlc_gy_full_scale_get(&(pObj->Ctx), &full_scale) != ISM330DLC_OK)
 80157a8:	301c      	adds	r0, #28
 80157aa:	f10d 0107 	add.w	r1, sp, #7
 80157ae:	f7f0 fdd7 	bl	8006360 <ism330dlc_gy_full_scale_get>
 80157b2:	b9a8      	cbnz	r0, 80157e0 <ISM330DLC_GYRO_GetSensitivity+0x3c>
  switch (full_scale)
 80157b4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80157b8:	2b06      	cmp	r3, #6
 80157ba:	d811      	bhi.n	80157e0 <ISM330DLC_GYRO_GetSensitivity+0x3c>
 80157bc:	e8df f003 	tbb	[pc, r3]
 80157c0:	100a0408 	.word	0x100a0408
 80157c4:	100c      	.short	0x100c
 80157c6:	0e          	.byte	0x0e
 80157c7:	00          	.byte	0x00
      *Sensitivity = ISM330DLC_GYRO_SENSITIVITY_FS_125DPS;
 80157c8:	4b07      	ldr	r3, [pc, #28]	; (80157e8 <ISM330DLC_GYRO_GetSensitivity+0x44>)
      *Sensitivity = ISM330DLC_GYRO_SENSITIVITY_FS_2000DPS;
 80157ca:	6023      	str	r3, [r4, #0]
}
 80157cc:	b002      	add	sp, #8
 80157ce:	bd10      	pop	{r4, pc}
      *Sensitivity = ISM330DLC_GYRO_SENSITIVITY_FS_250DPS;
 80157d0:	4b06      	ldr	r3, [pc, #24]	; (80157ec <ISM330DLC_GYRO_GetSensitivity+0x48>)
 80157d2:	e7fa      	b.n	80157ca <ISM330DLC_GYRO_GetSensitivity+0x26>
      *Sensitivity = ISM330DLC_GYRO_SENSITIVITY_FS_500DPS;
 80157d4:	4b06      	ldr	r3, [pc, #24]	; (80157f0 <ISM330DLC_GYRO_GetSensitivity+0x4c>)
 80157d6:	e7f8      	b.n	80157ca <ISM330DLC_GYRO_GetSensitivity+0x26>
      *Sensitivity = ISM330DLC_GYRO_SENSITIVITY_FS_1000DPS;
 80157d8:	4b06      	ldr	r3, [pc, #24]	; (80157f4 <ISM330DLC_GYRO_GetSensitivity+0x50>)
 80157da:	e7f6      	b.n	80157ca <ISM330DLC_GYRO_GetSensitivity+0x26>
      *Sensitivity = ISM330DLC_GYRO_SENSITIVITY_FS_2000DPS;
 80157dc:	4b06      	ldr	r3, [pc, #24]	; (80157f8 <ISM330DLC_GYRO_GetSensitivity+0x54>)
 80157de:	e7f4      	b.n	80157ca <ISM330DLC_GYRO_GetSensitivity+0x26>
  switch (full_scale)
 80157e0:	f04f 30ff 	mov.w	r0, #4294967295
 80157e4:	e7f2      	b.n	80157cc <ISM330DLC_GYRO_GetSensitivity+0x28>
 80157e6:	bf00      	nop
 80157e8:	408c0000 	.word	0x408c0000
 80157ec:	410c0000 	.word	0x410c0000
 80157f0:	418c0000 	.word	0x418c0000
 80157f4:	420c0000 	.word	0x420c0000
 80157f8:	428c0000 	.word	0x428c0000

080157fc <ISM330DLC_GYRO_GetFullScale>:
{
 80157fc:	b513      	push	{r0, r1, r4, lr}
 80157fe:	460c      	mov	r4, r1
  if (ism330dlc_gy_full_scale_get(&(pObj->Ctx), &fs_low_level) != ISM330DLC_OK)
 8015800:	301c      	adds	r0, #28
 8015802:	f10d 0107 	add.w	r1, sp, #7
 8015806:	f7f0 fdab 	bl	8006360 <ism330dlc_gy_full_scale_get>
 801580a:	b9c0      	cbnz	r0, 801583e <ISM330DLC_GYRO_GetFullScale+0x42>
  switch (fs_low_level)
 801580c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8015810:	2b06      	cmp	r3, #6
 8015812:	d814      	bhi.n	801583e <ISM330DLC_GYRO_GetFullScale+0x42>
 8015814:	e8df f003 	tbb	[pc, r3]
 8015818:	130a0408 	.word	0x130a0408
 801581c:	130d      	.short	0x130d
 801581e:	10          	.byte	0x10
 801581f:	00          	.byte	0x00
      *FullScale =  125;
 8015820:	237d      	movs	r3, #125	; 0x7d
      *FullScale = 2000;
 8015822:	6023      	str	r3, [r4, #0]
}
 8015824:	b002      	add	sp, #8
 8015826:	bd10      	pop	{r4, pc}
      *FullScale =  250;
 8015828:	23fa      	movs	r3, #250	; 0xfa
 801582a:	e7fa      	b.n	8015822 <ISM330DLC_GYRO_GetFullScale+0x26>
      *FullScale =  500;
 801582c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8015830:	e7f7      	b.n	8015822 <ISM330DLC_GYRO_GetFullScale+0x26>
      *FullScale = 1000;
 8015832:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8015836:	e7f4      	b.n	8015822 <ISM330DLC_GYRO_GetFullScale+0x26>
      *FullScale = 2000;
 8015838:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 801583c:	e7f1      	b.n	8015822 <ISM330DLC_GYRO_GetFullScale+0x26>
  switch (fs_low_level)
 801583e:	f04f 30ff 	mov.w	r0, #4294967295
 8015842:	e7ef      	b.n	8015824 <ISM330DLC_GYRO_GetFullScale+0x28>

08015844 <ISM330DLC_GYRO_GetAxesRaw>:
{
 8015844:	b513      	push	{r0, r1, r4, lr}
 8015846:	460c      	mov	r4, r1
  if (ism330dlc_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != ISM330DLC_OK)
 8015848:	301c      	adds	r0, #28
 801584a:	4669      	mov	r1, sp
 801584c:	f7f0 fe01 	bl	8006452 <ism330dlc_angular_rate_raw_get>
 8015850:	b950      	cbnz	r0, 8015868 <ISM330DLC_GYRO_GetAxesRaw+0x24>
  Value->x = data_raw.i16bit[0];
 8015852:	f8bd 3000 	ldrh.w	r3, [sp]
 8015856:	8023      	strh	r3, [r4, #0]
  Value->y = data_raw.i16bit[1];
 8015858:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801585c:	8063      	strh	r3, [r4, #2]
  Value->z = data_raw.i16bit[2];
 801585e:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8015862:	80a3      	strh	r3, [r4, #4]
}
 8015864:	b002      	add	sp, #8
 8015866:	bd10      	pop	{r4, pc}
    return ISM330DLC_ERROR;
 8015868:	f04f 30ff 	mov.w	r0, #4294967295
 801586c:	e7fa      	b.n	8015864 <ISM330DLC_GYRO_GetAxesRaw+0x20>

0801586e <ISM330DLC_GYRO_GetAxes>:
{
 801586e:	b530      	push	{r4, r5, lr}
 8015870:	b085      	sub	sp, #20
 8015872:	4605      	mov	r5, r0
 8015874:	460c      	mov	r4, r1
  if (ism330dlc_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != ISM330DLC_OK)
 8015876:	301c      	adds	r0, #28
 8015878:	a902      	add	r1, sp, #8
 801587a:	f7f0 fdea 	bl	8006452 <ism330dlc_angular_rate_raw_get>
 801587e:	b118      	cbz	r0, 8015888 <ISM330DLC_GYRO_GetAxes+0x1a>
    return ISM330DLC_ERROR;
 8015880:	f04f 30ff 	mov.w	r0, #4294967295
}
 8015884:	b005      	add	sp, #20
 8015886:	bd30      	pop	{r4, r5, pc}
  if (ISM330DLC_GYRO_GetSensitivity(pObj, &sensitivity) != ISM330DLC_OK)
 8015888:	a901      	add	r1, sp, #4
 801588a:	4628      	mov	r0, r5
 801588c:	f7ff ff8a 	bl	80157a4 <ISM330DLC_GYRO_GetSensitivity>
 8015890:	2800      	cmp	r0, #0
 8015892:	d1f5      	bne.n	8015880 <ISM330DLC_GYRO_GetAxes+0x12>
  AngularRate->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8015894:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 8015898:	eddd 6a01 	vldr	s13, [sp, #4]
 801589c:	ee07 3a10 	vmov	s14, r3
 80158a0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  AngularRate->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 80158a4:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
  AngularRate->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 80158a8:	ee27 7a26 	vmul.f32	s14, s14, s13
 80158ac:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 80158b0:	ed84 7a00 	vstr	s14, [r4]
  AngularRate->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 80158b4:	ee07 3a10 	vmov	s14, r3
  AngularRate->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 80158b8:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 80158bc:	ee07 3a90 	vmov	s15, r3
  AngularRate->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 80158c0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  AngularRate->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 80158c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  AngularRate->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 80158c8:	ee27 7a26 	vmul.f32	s14, s14, s13
  AngularRate->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 80158cc:	ee67 7aa6 	vmul.f32	s15, s15, s13
  AngularRate->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 80158d0:	eebd 7ac7 	vcvt.s32.f32	s14, s14
  AngularRate->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 80158d4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
  AngularRate->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 80158d8:	ed84 7a01 	vstr	s14, [r4, #4]
  AngularRate->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 80158dc:	edc4 7a02 	vstr	s15, [r4, #8]
  return ISM330DLC_OK;
 80158e0:	e7d0      	b.n	8015884 <ISM330DLC_GYRO_GetAxes+0x16>
	...

080158e4 <ISM330DLC_ACC_SetOutputDataRate>:
{
 80158e4:	b508      	push	{r3, lr}
  if (pObj->acc_is_enabled == 1U)
 80158e6:	f890 1029 	ldrb.w	r1, [r0, #41]	; 0x29
 80158ea:	eef2 7a09 	vmov.f32	s15, #41	; 0x41480000  12.5
 80158ee:	2901      	cmp	r1, #1
          : (Odr <=   26.0f) ? ISM330DLC_XL_ODR_26Hz
 80158f0:	eeb4 0ae7 	vcmpe.f32	s0, s15
  if (pObj->acc_is_enabled == 1U)
 80158f4:	d152      	bne.n	801599c <ISM330DLC_ACC_SetOutputDataRate+0xb8>
          : (Odr <=   26.0f) ? ISM330DLC_XL_ODR_26Hz
 80158f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80158fa:	d939      	bls.n	8015970 <ISM330DLC_ACC_SetOutputDataRate+0x8c>
 80158fc:	eef3 7a0a 	vmov.f32	s15, #58	; 0x41d00000  26.0
 8015900:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8015904:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015908:	d93a      	bls.n	8015980 <ISM330DLC_ACC_SetOutputDataRate+0x9c>
 801590a:	eddf 7a4d 	vldr	s15, [pc, #308]	; 8015a40 <ISM330DLC_ACC_SetOutputDataRate+0x15c>
 801590e:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8015912:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015916:	d935      	bls.n	8015984 <ISM330DLC_ACC_SetOutputDataRate+0xa0>
 8015918:	eddf 7a4a 	vldr	s15, [pc, #296]	; 8015a44 <ISM330DLC_ACC_SetOutputDataRate+0x160>
 801591c:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8015920:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015924:	d930      	bls.n	8015988 <ISM330DLC_ACC_SetOutputDataRate+0xa4>
 8015926:	eddf 7a48 	vldr	s15, [pc, #288]	; 8015a48 <ISM330DLC_ACC_SetOutputDataRate+0x164>
 801592a:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801592e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015932:	d92b      	bls.n	801598c <ISM330DLC_ACC_SetOutputDataRate+0xa8>
 8015934:	eddf 7a45 	vldr	s15, [pc, #276]	; 8015a4c <ISM330DLC_ACC_SetOutputDataRate+0x168>
 8015938:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801593c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015940:	d926      	bls.n	8015990 <ISM330DLC_ACC_SetOutputDataRate+0xac>
 8015942:	eddf 7a43 	vldr	s15, [pc, #268]	; 8015a50 <ISM330DLC_ACC_SetOutputDataRate+0x16c>
 8015946:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801594a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801594e:	d921      	bls.n	8015994 <ISM330DLC_ACC_SetOutputDataRate+0xb0>
 8015950:	eddf 7a40 	vldr	s15, [pc, #256]	; 8015a54 <ISM330DLC_ACC_SetOutputDataRate+0x170>
 8015954:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8015958:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801595c:	d91c      	bls.n	8015998 <ISM330DLC_ACC_SetOutputDataRate+0xb4>
 801595e:	eddf 7a3e 	vldr	s15, [pc, #248]	; 8015a58 <ISM330DLC_ACC_SetOutputDataRate+0x174>
 8015962:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8015966:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801596a:	bf94      	ite	ls
 801596c:	2109      	movls	r1, #9
 801596e:	210a      	movhi	r1, #10
  if (ism330dlc_xl_data_rate_set(&(pObj->Ctx), new_odr) != ISM330DLC_OK)
 8015970:	301c      	adds	r0, #28
 8015972:	f7f0 fc99 	bl	80062a8 <ism330dlc_xl_data_rate_set>
 8015976:	3800      	subs	r0, #0
 8015978:	bf18      	it	ne
 801597a:	2001      	movne	r0, #1
 801597c:	4240      	negs	r0, r0
}
 801597e:	bd08      	pop	{r3, pc}
          : (Odr <=   26.0f) ? ISM330DLC_XL_ODR_26Hz
 8015980:	2102      	movs	r1, #2
 8015982:	e7f5      	b.n	8015970 <ISM330DLC_ACC_SetOutputDataRate+0x8c>
 8015984:	2103      	movs	r1, #3
 8015986:	e7f3      	b.n	8015970 <ISM330DLC_ACC_SetOutputDataRate+0x8c>
 8015988:	2104      	movs	r1, #4
 801598a:	e7f1      	b.n	8015970 <ISM330DLC_ACC_SetOutputDataRate+0x8c>
 801598c:	2105      	movs	r1, #5
 801598e:	e7ef      	b.n	8015970 <ISM330DLC_ACC_SetOutputDataRate+0x8c>
 8015990:	2106      	movs	r1, #6
 8015992:	e7ed      	b.n	8015970 <ISM330DLC_ACC_SetOutputDataRate+0x8c>
 8015994:	2107      	movs	r1, #7
 8015996:	e7eb      	b.n	8015970 <ISM330DLC_ACC_SetOutputDataRate+0x8c>
 8015998:	2108      	movs	r1, #8
 801599a:	e7e9      	b.n	8015970 <ISM330DLC_ACC_SetOutputDataRate+0x8c>
                : (Odr <=   26.0f) ? ISM330DLC_XL_ODR_26Hz
 801599c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80159a0:	d93d      	bls.n	8015a1e <ISM330DLC_ACC_SetOutputDataRate+0x13a>
 80159a2:	eef3 7a0a 	vmov.f32	s15, #58	; 0x41d00000  26.0
 80159a6:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80159aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80159ae:	d938      	bls.n	8015a22 <ISM330DLC_ACC_SetOutputDataRate+0x13e>
 80159b0:	eddf 7a23 	vldr	s15, [pc, #140]	; 8015a40 <ISM330DLC_ACC_SetOutputDataRate+0x15c>
 80159b4:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80159b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80159bc:	d933      	bls.n	8015a26 <ISM330DLC_ACC_SetOutputDataRate+0x142>
 80159be:	eddf 7a21 	vldr	s15, [pc, #132]	; 8015a44 <ISM330DLC_ACC_SetOutputDataRate+0x160>
 80159c2:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80159c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80159ca:	d92e      	bls.n	8015a2a <ISM330DLC_ACC_SetOutputDataRate+0x146>
 80159cc:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8015a48 <ISM330DLC_ACC_SetOutputDataRate+0x164>
 80159d0:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80159d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80159d8:	d929      	bls.n	8015a2e <ISM330DLC_ACC_SetOutputDataRate+0x14a>
 80159da:	eddf 7a1c 	vldr	s15, [pc, #112]	; 8015a4c <ISM330DLC_ACC_SetOutputDataRate+0x168>
 80159de:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80159e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80159e6:	d924      	bls.n	8015a32 <ISM330DLC_ACC_SetOutputDataRate+0x14e>
 80159e8:	eddf 7a19 	vldr	s15, [pc, #100]	; 8015a50 <ISM330DLC_ACC_SetOutputDataRate+0x16c>
 80159ec:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80159f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80159f4:	d91f      	bls.n	8015a36 <ISM330DLC_ACC_SetOutputDataRate+0x152>
 80159f6:	eddf 7a17 	vldr	s15, [pc, #92]	; 8015a54 <ISM330DLC_ACC_SetOutputDataRate+0x170>
 80159fa:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80159fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015a02:	d91a      	bls.n	8015a3a <ISM330DLC_ACC_SetOutputDataRate+0x156>
 8015a04:	eddf 7a14 	vldr	s15, [pc, #80]	; 8015a58 <ISM330DLC_ACC_SetOutputDataRate+0x174>
 8015a08:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8015a0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015a10:	bf94      	ite	ls
 8015a12:	2309      	movls	r3, #9
 8015a14:	230a      	movhi	r3, #10
  pObj->acc_odr = (Odr <=   12.5f) ? ISM330DLC_XL_ODR_12Hz5
 8015a16:	f880 302b 	strb.w	r3, [r0, #43]	; 0x2b
    return ISM330DLC_ACC_SetOutputDataRate_When_Disabled(pObj, Odr);
 8015a1a:	2000      	movs	r0, #0
 8015a1c:	e7af      	b.n	801597e <ISM330DLC_ACC_SetOutputDataRate+0x9a>
                : (Odr <=   26.0f) ? ISM330DLC_XL_ODR_26Hz
 8015a1e:	2301      	movs	r3, #1
 8015a20:	e7f9      	b.n	8015a16 <ISM330DLC_ACC_SetOutputDataRate+0x132>
 8015a22:	2302      	movs	r3, #2
 8015a24:	e7f7      	b.n	8015a16 <ISM330DLC_ACC_SetOutputDataRate+0x132>
 8015a26:	2303      	movs	r3, #3
 8015a28:	e7f5      	b.n	8015a16 <ISM330DLC_ACC_SetOutputDataRate+0x132>
 8015a2a:	2304      	movs	r3, #4
 8015a2c:	e7f3      	b.n	8015a16 <ISM330DLC_ACC_SetOutputDataRate+0x132>
 8015a2e:	2305      	movs	r3, #5
 8015a30:	e7f1      	b.n	8015a16 <ISM330DLC_ACC_SetOutputDataRate+0x132>
 8015a32:	2306      	movs	r3, #6
 8015a34:	e7ef      	b.n	8015a16 <ISM330DLC_ACC_SetOutputDataRate+0x132>
 8015a36:	2307      	movs	r3, #7
 8015a38:	e7ed      	b.n	8015a16 <ISM330DLC_ACC_SetOutputDataRate+0x132>
 8015a3a:	2308      	movs	r3, #8
 8015a3c:	e7eb      	b.n	8015a16 <ISM330DLC_ACC_SetOutputDataRate+0x132>
 8015a3e:	bf00      	nop
 8015a40:	42500000 	.word	0x42500000
 8015a44:	42d00000 	.word	0x42d00000
 8015a48:	43500000 	.word	0x43500000
 8015a4c:	43d00000 	.word	0x43d00000
 8015a50:	44504000 	.word	0x44504000
 8015a54:	44cf8000 	.word	0x44cf8000
 8015a58:	45502000 	.word	0x45502000

08015a5c <ISM330DLC_GYRO_SetOutputDataRate>:
{
 8015a5c:	b508      	push	{r3, lr}
  if (pObj->gyro_is_enabled == 1U)
 8015a5e:	f890 102a 	ldrb.w	r1, [r0, #42]	; 0x2a
 8015a62:	eef2 7a09 	vmov.f32	s15, #41	; 0x41480000  12.5
 8015a66:	2901      	cmp	r1, #1
          : (Odr <=   26.0f) ? ISM330DLC_GY_ODR_26Hz
 8015a68:	eeb4 0ae7 	vcmpe.f32	s0, s15
  if (pObj->gyro_is_enabled == 1U)
 8015a6c:	d152      	bne.n	8015b14 <ISM330DLC_GYRO_SetOutputDataRate+0xb8>
          : (Odr <=   26.0f) ? ISM330DLC_GY_ODR_26Hz
 8015a6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015a72:	d939      	bls.n	8015ae8 <ISM330DLC_GYRO_SetOutputDataRate+0x8c>
 8015a74:	eef3 7a0a 	vmov.f32	s15, #58	; 0x41d00000  26.0
 8015a78:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8015a7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015a80:	d93a      	bls.n	8015af8 <ISM330DLC_GYRO_SetOutputDataRate+0x9c>
 8015a82:	eddf 7a4d 	vldr	s15, [pc, #308]	; 8015bb8 <ISM330DLC_GYRO_SetOutputDataRate+0x15c>
 8015a86:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8015a8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015a8e:	d935      	bls.n	8015afc <ISM330DLC_GYRO_SetOutputDataRate+0xa0>
 8015a90:	eddf 7a4a 	vldr	s15, [pc, #296]	; 8015bbc <ISM330DLC_GYRO_SetOutputDataRate+0x160>
 8015a94:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8015a98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015a9c:	d930      	bls.n	8015b00 <ISM330DLC_GYRO_SetOutputDataRate+0xa4>
 8015a9e:	eddf 7a48 	vldr	s15, [pc, #288]	; 8015bc0 <ISM330DLC_GYRO_SetOutputDataRate+0x164>
 8015aa2:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8015aa6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015aaa:	d92b      	bls.n	8015b04 <ISM330DLC_GYRO_SetOutputDataRate+0xa8>
 8015aac:	eddf 7a45 	vldr	s15, [pc, #276]	; 8015bc4 <ISM330DLC_GYRO_SetOutputDataRate+0x168>
 8015ab0:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8015ab4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015ab8:	d926      	bls.n	8015b08 <ISM330DLC_GYRO_SetOutputDataRate+0xac>
 8015aba:	eddf 7a43 	vldr	s15, [pc, #268]	; 8015bc8 <ISM330DLC_GYRO_SetOutputDataRate+0x16c>
 8015abe:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8015ac2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015ac6:	d921      	bls.n	8015b0c <ISM330DLC_GYRO_SetOutputDataRate+0xb0>
 8015ac8:	eddf 7a40 	vldr	s15, [pc, #256]	; 8015bcc <ISM330DLC_GYRO_SetOutputDataRate+0x170>
 8015acc:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8015ad0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015ad4:	d91c      	bls.n	8015b10 <ISM330DLC_GYRO_SetOutputDataRate+0xb4>
 8015ad6:	eddf 7a3e 	vldr	s15, [pc, #248]	; 8015bd0 <ISM330DLC_GYRO_SetOutputDataRate+0x174>
 8015ada:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8015ade:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015ae2:	bf94      	ite	ls
 8015ae4:	2109      	movls	r1, #9
 8015ae6:	210a      	movhi	r1, #10
  if (ism330dlc_gy_data_rate_set(&(pObj->Ctx), new_odr) != ISM330DLC_OK)
 8015ae8:	301c      	adds	r0, #28
 8015aea:	f7f0 fc58 	bl	800639e <ism330dlc_gy_data_rate_set>
 8015aee:	3800      	subs	r0, #0
 8015af0:	bf18      	it	ne
 8015af2:	2001      	movne	r0, #1
 8015af4:	4240      	negs	r0, r0
}
 8015af6:	bd08      	pop	{r3, pc}
          : (Odr <=   26.0f) ? ISM330DLC_GY_ODR_26Hz
 8015af8:	2102      	movs	r1, #2
 8015afa:	e7f5      	b.n	8015ae8 <ISM330DLC_GYRO_SetOutputDataRate+0x8c>
 8015afc:	2103      	movs	r1, #3
 8015afe:	e7f3      	b.n	8015ae8 <ISM330DLC_GYRO_SetOutputDataRate+0x8c>
 8015b00:	2104      	movs	r1, #4
 8015b02:	e7f1      	b.n	8015ae8 <ISM330DLC_GYRO_SetOutputDataRate+0x8c>
 8015b04:	2105      	movs	r1, #5
 8015b06:	e7ef      	b.n	8015ae8 <ISM330DLC_GYRO_SetOutputDataRate+0x8c>
 8015b08:	2106      	movs	r1, #6
 8015b0a:	e7ed      	b.n	8015ae8 <ISM330DLC_GYRO_SetOutputDataRate+0x8c>
 8015b0c:	2107      	movs	r1, #7
 8015b0e:	e7eb      	b.n	8015ae8 <ISM330DLC_GYRO_SetOutputDataRate+0x8c>
 8015b10:	2108      	movs	r1, #8
 8015b12:	e7e9      	b.n	8015ae8 <ISM330DLC_GYRO_SetOutputDataRate+0x8c>
                 : (Odr <=   26.0f) ? ISM330DLC_GY_ODR_26Hz
 8015b14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015b18:	d93d      	bls.n	8015b96 <ISM330DLC_GYRO_SetOutputDataRate+0x13a>
 8015b1a:	eef3 7a0a 	vmov.f32	s15, #58	; 0x41d00000  26.0
 8015b1e:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8015b22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015b26:	d938      	bls.n	8015b9a <ISM330DLC_GYRO_SetOutputDataRate+0x13e>
 8015b28:	eddf 7a23 	vldr	s15, [pc, #140]	; 8015bb8 <ISM330DLC_GYRO_SetOutputDataRate+0x15c>
 8015b2c:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8015b30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015b34:	d933      	bls.n	8015b9e <ISM330DLC_GYRO_SetOutputDataRate+0x142>
 8015b36:	eddf 7a21 	vldr	s15, [pc, #132]	; 8015bbc <ISM330DLC_GYRO_SetOutputDataRate+0x160>
 8015b3a:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8015b3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015b42:	d92e      	bls.n	8015ba2 <ISM330DLC_GYRO_SetOutputDataRate+0x146>
 8015b44:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8015bc0 <ISM330DLC_GYRO_SetOutputDataRate+0x164>
 8015b48:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8015b4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015b50:	d929      	bls.n	8015ba6 <ISM330DLC_GYRO_SetOutputDataRate+0x14a>
 8015b52:	eddf 7a1c 	vldr	s15, [pc, #112]	; 8015bc4 <ISM330DLC_GYRO_SetOutputDataRate+0x168>
 8015b56:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8015b5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015b5e:	d924      	bls.n	8015baa <ISM330DLC_GYRO_SetOutputDataRate+0x14e>
 8015b60:	eddf 7a19 	vldr	s15, [pc, #100]	; 8015bc8 <ISM330DLC_GYRO_SetOutputDataRate+0x16c>
 8015b64:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8015b68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015b6c:	d91f      	bls.n	8015bae <ISM330DLC_GYRO_SetOutputDataRate+0x152>
 8015b6e:	eddf 7a17 	vldr	s15, [pc, #92]	; 8015bcc <ISM330DLC_GYRO_SetOutputDataRate+0x170>
 8015b72:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8015b76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015b7a:	d91a      	bls.n	8015bb2 <ISM330DLC_GYRO_SetOutputDataRate+0x156>
 8015b7c:	eddf 7a14 	vldr	s15, [pc, #80]	; 8015bd0 <ISM330DLC_GYRO_SetOutputDataRate+0x174>
 8015b80:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8015b84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015b88:	bf94      	ite	ls
 8015b8a:	2309      	movls	r3, #9
 8015b8c:	230a      	movhi	r3, #10
  pObj->gyro_odr = (Odr <=   12.5f) ? ISM330DLC_GY_ODR_12Hz5
 8015b8e:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
    return ISM330DLC_GYRO_SetOutputDataRate_When_Disabled(pObj, Odr);
 8015b92:	2000      	movs	r0, #0
 8015b94:	e7af      	b.n	8015af6 <ISM330DLC_GYRO_SetOutputDataRate+0x9a>
                 : (Odr <=   26.0f) ? ISM330DLC_GY_ODR_26Hz
 8015b96:	2301      	movs	r3, #1
 8015b98:	e7f9      	b.n	8015b8e <ISM330DLC_GYRO_SetOutputDataRate+0x132>
 8015b9a:	2302      	movs	r3, #2
 8015b9c:	e7f7      	b.n	8015b8e <ISM330DLC_GYRO_SetOutputDataRate+0x132>
 8015b9e:	2303      	movs	r3, #3
 8015ba0:	e7f5      	b.n	8015b8e <ISM330DLC_GYRO_SetOutputDataRate+0x132>
 8015ba2:	2304      	movs	r3, #4
 8015ba4:	e7f3      	b.n	8015b8e <ISM330DLC_GYRO_SetOutputDataRate+0x132>
 8015ba6:	2305      	movs	r3, #5
 8015ba8:	e7f1      	b.n	8015b8e <ISM330DLC_GYRO_SetOutputDataRate+0x132>
 8015baa:	2306      	movs	r3, #6
 8015bac:	e7ef      	b.n	8015b8e <ISM330DLC_GYRO_SetOutputDataRate+0x132>
 8015bae:	2307      	movs	r3, #7
 8015bb0:	e7ed      	b.n	8015b8e <ISM330DLC_GYRO_SetOutputDataRate+0x132>
 8015bb2:	2308      	movs	r3, #8
 8015bb4:	e7eb      	b.n	8015b8e <ISM330DLC_GYRO_SetOutputDataRate+0x132>
 8015bb6:	bf00      	nop
 8015bb8:	42500000 	.word	0x42500000
 8015bbc:	42d00000 	.word	0x42d00000
 8015bc0:	43500000 	.word	0x43500000
 8015bc4:	43d00000 	.word	0x43d00000
 8015bc8:	44504000 	.word	0x44504000
 8015bcc:	44cf8000 	.word	0x44cf8000
 8015bd0:	45502000 	.word	0x45502000

08015bd4 <ISM330DLC_ACC_Enable>:
{
 8015bd4:	b510      	push	{r4, lr}
  if (pObj->acc_is_enabled == 1U)
 8015bd6:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
 8015bda:	2b01      	cmp	r3, #1
{
 8015bdc:	4604      	mov	r4, r0
  if (pObj->acc_is_enabled == 1U)
 8015bde:	d009      	beq.n	8015bf4 <ISM330DLC_ACC_Enable+0x20>
  if (ism330dlc_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != ISM330DLC_OK)
 8015be0:	f890 102b 	ldrb.w	r1, [r0, #43]	; 0x2b
 8015be4:	301c      	adds	r0, #28
 8015be6:	f7f0 fb5f 	bl	80062a8 <ism330dlc_xl_data_rate_set>
 8015bea:	b928      	cbnz	r0, 8015bf8 <ISM330DLC_ACC_Enable+0x24>
  pObj->acc_is_enabled = 1;
 8015bec:	2301      	movs	r3, #1
 8015bee:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
}
 8015bf2:	bd10      	pop	{r4, pc}
    return ISM330DLC_OK;
 8015bf4:	2000      	movs	r0, #0
 8015bf6:	e7fc      	b.n	8015bf2 <ISM330DLC_ACC_Enable+0x1e>
    return ISM330DLC_ERROR;
 8015bf8:	f04f 30ff 	mov.w	r0, #4294967295
 8015bfc:	e7f9      	b.n	8015bf2 <ISM330DLC_ACC_Enable+0x1e>

08015bfe <ISM330DLC_GYRO_Enable>:
{
 8015bfe:	b510      	push	{r4, lr}
  if (pObj->gyro_is_enabled == 1U)
 8015c00:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
 8015c04:	2b01      	cmp	r3, #1
{
 8015c06:	4604      	mov	r4, r0
  if (pObj->gyro_is_enabled == 1U)
 8015c08:	d009      	beq.n	8015c1e <ISM330DLC_GYRO_Enable+0x20>
  if (ism330dlc_gy_data_rate_set(&(pObj->Ctx), pObj->gyro_odr) != ISM330DLC_OK)
 8015c0a:	f890 102c 	ldrb.w	r1, [r0, #44]	; 0x2c
 8015c0e:	301c      	adds	r0, #28
 8015c10:	f7f0 fbc5 	bl	800639e <ism330dlc_gy_data_rate_set>
 8015c14:	b928      	cbnz	r0, 8015c22 <ISM330DLC_GYRO_Enable+0x24>
  pObj->gyro_is_enabled = 1;
 8015c16:	2301      	movs	r3, #1
 8015c18:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
}
 8015c1c:	bd10      	pop	{r4, pc}
    return ISM330DLC_OK;
 8015c1e:	2000      	movs	r0, #0
 8015c20:	e7fc      	b.n	8015c1c <ISM330DLC_GYRO_Enable+0x1e>
    return ISM330DLC_ERROR;
 8015c22:	f04f 30ff 	mov.w	r0, #4294967295
 8015c26:	e7f9      	b.n	8015c1c <ISM330DLC_GYRO_Enable+0x1e>

08015c28 <ISM330DLC_ACC_Disable>:
{
 8015c28:	b538      	push	{r3, r4, r5, lr}
 8015c2a:	4604      	mov	r4, r0
  if (pObj->acc_is_enabled == 0U)
 8015c2c:	f890 0029 	ldrb.w	r0, [r0, #41]	; 0x29
 8015c30:	b150      	cbz	r0, 8015c48 <ISM330DLC_ACC_Disable+0x20>
  if (ism330dlc_xl_data_rate_get(&(pObj->Ctx), &pObj->acc_odr) != ISM330DLC_OK)
 8015c32:	f104 051c 	add.w	r5, r4, #28
 8015c36:	f104 012b 	add.w	r1, r4, #43	; 0x2b
 8015c3a:	4628      	mov	r0, r5
 8015c3c:	f7f0 fb4b 	bl	80062d6 <ism330dlc_xl_data_rate_get>
 8015c40:	4601      	mov	r1, r0
 8015c42:	b110      	cbz	r0, 8015c4a <ISM330DLC_ACC_Disable+0x22>
    return ISM330DLC_ERROR;
 8015c44:	f04f 30ff 	mov.w	r0, #4294967295
}
 8015c48:	bd38      	pop	{r3, r4, r5, pc}
  if (ism330dlc_xl_data_rate_set(&(pObj->Ctx), ISM330DLC_XL_ODR_OFF) != ISM330DLC_OK)
 8015c4a:	4628      	mov	r0, r5
 8015c4c:	f7f0 fb2c 	bl	80062a8 <ism330dlc_xl_data_rate_set>
 8015c50:	2800      	cmp	r0, #0
 8015c52:	d1f7      	bne.n	8015c44 <ISM330DLC_ACC_Disable+0x1c>
  pObj->acc_is_enabled = 0;
 8015c54:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
  return ISM330DLC_OK;
 8015c58:	e7f6      	b.n	8015c48 <ISM330DLC_ACC_Disable+0x20>

08015c5a <ISM330DLC_GYRO_Disable>:
{
 8015c5a:	b538      	push	{r3, r4, r5, lr}
 8015c5c:	4604      	mov	r4, r0
  if (pObj->gyro_is_enabled == 0U)
 8015c5e:	f890 002a 	ldrb.w	r0, [r0, #42]	; 0x2a
 8015c62:	b150      	cbz	r0, 8015c7a <ISM330DLC_GYRO_Disable+0x20>
  if (ism330dlc_gy_data_rate_get(&(pObj->Ctx), &pObj->gyro_odr) != ISM330DLC_OK)
 8015c64:	f104 051c 	add.w	r5, r4, #28
 8015c68:	f104 012c 	add.w	r1, r4, #44	; 0x2c
 8015c6c:	4628      	mov	r0, r5
 8015c6e:	f7f0 fbad 	bl	80063cc <ism330dlc_gy_data_rate_get>
 8015c72:	4601      	mov	r1, r0
 8015c74:	b110      	cbz	r0, 8015c7c <ISM330DLC_GYRO_Disable+0x22>
    return ISM330DLC_ERROR;
 8015c76:	f04f 30ff 	mov.w	r0, #4294967295
}
 8015c7a:	bd38      	pop	{r3, r4, r5, pc}
  if (ism330dlc_gy_data_rate_set(&(pObj->Ctx), ISM330DLC_GY_ODR_OFF) != ISM330DLC_OK)
 8015c7c:	4628      	mov	r0, r5
 8015c7e:	f7f0 fb8e 	bl	800639e <ism330dlc_gy_data_rate_set>
 8015c82:	2800      	cmp	r0, #0
 8015c84:	d1f7      	bne.n	8015c76 <ISM330DLC_GYRO_Disable+0x1c>
  pObj->gyro_is_enabled = 0;
 8015c86:	f884 002a 	strb.w	r0, [r4, #42]	; 0x2a
  return ISM330DLC_OK;
 8015c8a:	e7f6      	b.n	8015c7a <ISM330DLC_GYRO_Disable+0x20>

08015c8c <ISM330DLC_DeInit>:
{
 8015c8c:	b510      	push	{r4, lr}
 8015c8e:	4604      	mov	r4, r0
  if (ISM330DLC_ACC_Disable(pObj) != ISM330DLC_OK)
 8015c90:	f7ff ffca 	bl	8015c28 <ISM330DLC_ACC_Disable>
 8015c94:	b110      	cbz	r0, 8015c9c <ISM330DLC_DeInit+0x10>
    return ISM330DLC_ERROR;
 8015c96:	f04f 30ff 	mov.w	r0, #4294967295
}
 8015c9a:	bd10      	pop	{r4, pc}
  if (ISM330DLC_GYRO_Disable(pObj) != ISM330DLC_OK)
 8015c9c:	4620      	mov	r0, r4
 8015c9e:	f7ff ffdc 	bl	8015c5a <ISM330DLC_GYRO_Disable>
 8015ca2:	2800      	cmp	r0, #0
 8015ca4:	d1f7      	bne.n	8015c96 <ISM330DLC_DeInit+0xa>
  pObj->acc_odr = ISM330DLC_XL_ODR_OFF;
 8015ca6:	f884 002b 	strb.w	r0, [r4, #43]	; 0x2b
  pObj->gyro_odr = ISM330DLC_GY_ODR_OFF;
 8015caa:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
  pObj->is_initialized = 0;
 8015cae:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
  return ISM330DLC_OK;
 8015cb2:	e7f2      	b.n	8015c9a <ISM330DLC_DeInit+0xe>

08015cb4 <ISM330DLC_Write_Reg>:
{
 8015cb4:	b507      	push	{r0, r1, r2, lr}
  if (ism330dlc_write_reg(&(pObj->Ctx), Reg, &Data, 1) != ISM330DLC_OK)
 8015cb6:	2301      	movs	r3, #1
{
 8015cb8:	f88d 2007 	strb.w	r2, [sp, #7]
  if (ism330dlc_write_reg(&(pObj->Ctx), Reg, &Data, 1) != ISM330DLC_OK)
 8015cbc:	301c      	adds	r0, #28
 8015cbe:	f10d 0207 	add.w	r2, sp, #7
 8015cc2:	f7f0 fabc 	bl	800623e <ism330dlc_write_reg>
 8015cc6:	3800      	subs	r0, #0
 8015cc8:	bf18      	it	ne
 8015cca:	2001      	movne	r0, #1
}
 8015ccc:	4240      	negs	r0, r0
 8015cce:	b003      	add	sp, #12
 8015cd0:	f85d fb04 	ldr.w	pc, [sp], #4

08015cd4 <ISM330DLC_RegisterBusIO>:
{
 8015cd4:	b510      	push	{r4, lr}
  if (pObj == NULL)
 8015cd6:	4604      	mov	r4, r0
 8015cd8:	b910      	cbnz	r0, 8015ce0 <ISM330DLC_RegisterBusIO+0xc>
    ret = ISM330DLC_ERROR;
 8015cda:	f04f 30ff 	mov.w	r0, #4294967295
}
 8015cde:	bd10      	pop	{r4, pc}
    pObj->IO.DeInit    = pIO->DeInit;
 8015ce0:	684a      	ldr	r2, [r1, #4]
    pObj->IO.Init      = pIO->Init;
 8015ce2:	680b      	ldr	r3, [r1, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8015ce4:	6042      	str	r2, [r0, #4]
    pObj->IO.BusType   = pIO->BusType;
 8015ce6:	688a      	ldr	r2, [r1, #8]
    pObj->IO.Init      = pIO->Init;
 8015ce8:	6003      	str	r3, [r0, #0]
    pObj->IO.BusType   = pIO->BusType;
 8015cea:	6082      	str	r2, [r0, #8]
    pObj->IO.Address   = pIO->Address;
 8015cec:	7b0a      	ldrb	r2, [r1, #12]
 8015cee:	7302      	strb	r2, [r0, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8015cf0:	690a      	ldr	r2, [r1, #16]
 8015cf2:	6102      	str	r2, [r0, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8015cf4:	694a      	ldr	r2, [r1, #20]
 8015cf6:	6142      	str	r2, [r0, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8015cf8:	698a      	ldr	r2, [r1, #24]
 8015cfa:	6182      	str	r2, [r0, #24]
    pObj->Ctx.read_reg  = ReadRegWrap;
 8015cfc:	4a0d      	ldr	r2, [pc, #52]	; (8015d34 <ISM330DLC_RegisterBusIO+0x60>)
 8015cfe:	6202      	str	r2, [r0, #32]
    pObj->Ctx.write_reg = WriteRegWrap;
 8015d00:	4a0d      	ldr	r2, [pc, #52]	; (8015d38 <ISM330DLC_RegisterBusIO+0x64>)
 8015d02:	61c2      	str	r2, [r0, #28]
    pObj->Ctx.handle   = pObj;
 8015d04:	6240      	str	r0, [r0, #36]	; 0x24
    if (pObj->IO.Init == NULL)
 8015d06:	2b00      	cmp	r3, #0
 8015d08:	d0e7      	beq.n	8015cda <ISM330DLC_RegisterBusIO+0x6>
    else if (pObj->IO.Init() != ISM330DLC_OK)
 8015d0a:	4798      	blx	r3
 8015d0c:	2800      	cmp	r0, #0
 8015d0e:	d1e4      	bne.n	8015cda <ISM330DLC_RegisterBusIO+0x6>
      if (pObj->IO.BusType == ISM330DLC_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8015d10:	68a3      	ldr	r3, [r4, #8]
 8015d12:	2b02      	cmp	r3, #2
 8015d14:	d1e3      	bne.n	8015cde <ISM330DLC_RegisterBusIO+0xa>
        if (pObj->is_initialized == 0U)
 8015d16:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8015d1a:	2b00      	cmp	r3, #0
 8015d1c:	d1df      	bne.n	8015cde <ISM330DLC_RegisterBusIO+0xa>
          if (ISM330DLC_Write_Reg(pObj, ISM330DLC_CTRL3_C, data) != ISM330DLC_OK)
 8015d1e:	220c      	movs	r2, #12
 8015d20:	2112      	movs	r1, #18
 8015d22:	4620      	mov	r0, r4
 8015d24:	f7ff ffc6 	bl	8015cb4 <ISM330DLC_Write_Reg>
 8015d28:	3800      	subs	r0, #0
 8015d2a:	bf18      	it	ne
 8015d2c:	2001      	movne	r0, #1
 8015d2e:	4240      	negs	r0, r0
  return ret;
 8015d30:	e7d5      	b.n	8015cde <ISM330DLC_RegisterBusIO+0xa>
 8015d32:	bf00      	nop
 8015d34:	08015459 	.word	0x08015459
 8015d38:	08015467 	.word	0x08015467

08015d3c <ISM330DLC_Set_Drdy_Mode>:
{
 8015d3c:	b508      	push	{r3, lr}
  if (ism330dlc_data_ready_mode_set(&(pObj->Ctx),(ism330dlc_drdy_pulsed_t)Status) != ISM330DLC_OK)
 8015d3e:	301c      	adds	r0, #28
 8015d40:	f7f0 fbc3 	bl	80064ca <ism330dlc_data_ready_mode_set>
 8015d44:	3800      	subs	r0, #0
 8015d46:	bf18      	it	ne
 8015d48:	2001      	movne	r0, #1
}
 8015d4a:	4240      	negs	r0, r0
 8015d4c:	bd08      	pop	{r3, pc}

08015d4e <ISM330DLC_ACC_Enable_HP_Filter>:
{
 8015d4e:	b508      	push	{r3, lr}
  if (ism330dlc_xl_hp_bandwidth_set(&(pObj->Ctx), CutOff) != ISM330DLC_OK)
 8015d50:	301c      	adds	r0, #28
 8015d52:	f7f0 fc04 	bl	800655e <ism330dlc_xl_hp_bandwidth_set>
 8015d56:	3800      	subs	r0, #0
 8015d58:	bf18      	it	ne
 8015d5a:	2001      	movne	r0, #1
}
 8015d5c:	4240      	negs	r0, r0
 8015d5e:	bd08      	pop	{r3, pc}

08015d60 <ISM330DLC_FIFO_Set_ODR_Value>:
            : (Odr <=   26.0f) ? ISM330DLC_FIFO_26Hz
 8015d60:	eef2 7a09 	vmov.f32	s15, #41	; 0x41480000  12.5
 8015d64:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8015d68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
{
 8015d6c:	b508      	push	{r3, lr}
            : (Odr <=   26.0f) ? ISM330DLC_FIFO_26Hz
 8015d6e:	d941      	bls.n	8015df4 <ISM330DLC_FIFO_Set_ODR_Value+0x94>
 8015d70:	eef3 7a0a 	vmov.f32	s15, #58	; 0x41d00000  26.0
 8015d74:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8015d78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015d7c:	d93c      	bls.n	8015df8 <ISM330DLC_FIFO_Set_ODR_Value+0x98>
 8015d7e:	eddf 7a25 	vldr	s15, [pc, #148]	; 8015e14 <ISM330DLC_FIFO_Set_ODR_Value+0xb4>
 8015d82:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8015d86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015d8a:	d937      	bls.n	8015dfc <ISM330DLC_FIFO_Set_ODR_Value+0x9c>
 8015d8c:	eddf 7a22 	vldr	s15, [pc, #136]	; 8015e18 <ISM330DLC_FIFO_Set_ODR_Value+0xb8>
 8015d90:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8015d94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015d98:	d932      	bls.n	8015e00 <ISM330DLC_FIFO_Set_ODR_Value+0xa0>
 8015d9a:	eddf 7a20 	vldr	s15, [pc, #128]	; 8015e1c <ISM330DLC_FIFO_Set_ODR_Value+0xbc>
 8015d9e:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8015da2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015da6:	d92d      	bls.n	8015e04 <ISM330DLC_FIFO_Set_ODR_Value+0xa4>
 8015da8:	eddf 7a1d 	vldr	s15, [pc, #116]	; 8015e20 <ISM330DLC_FIFO_Set_ODR_Value+0xc0>
 8015dac:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8015db0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015db4:	d928      	bls.n	8015e08 <ISM330DLC_FIFO_Set_ODR_Value+0xa8>
 8015db6:	eddf 7a1b 	vldr	s15, [pc, #108]	; 8015e24 <ISM330DLC_FIFO_Set_ODR_Value+0xc4>
 8015dba:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8015dbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015dc2:	d923      	bls.n	8015e0c <ISM330DLC_FIFO_Set_ODR_Value+0xac>
 8015dc4:	eddf 7a18 	vldr	s15, [pc, #96]	; 8015e28 <ISM330DLC_FIFO_Set_ODR_Value+0xc8>
 8015dc8:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8015dcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015dd0:	d91e      	bls.n	8015e10 <ISM330DLC_FIFO_Set_ODR_Value+0xb0>
 8015dd2:	eddf 7a16 	vldr	s15, [pc, #88]	; 8015e2c <ISM330DLC_FIFO_Set_ODR_Value+0xcc>
 8015dd6:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8015dda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015dde:	bf94      	ite	ls
 8015de0:	2109      	movls	r1, #9
 8015de2:	210a      	movhi	r1, #10
  if (ism330dlc_fifo_data_rate_set(&(pObj->Ctx), new_odr) != ISM330DLC_OK)
 8015de4:	301c      	adds	r0, #28
 8015de6:	f7f0 fc54 	bl	8006692 <ism330dlc_fifo_data_rate_set>
 8015dea:	3800      	subs	r0, #0
 8015dec:	bf18      	it	ne
 8015dee:	2001      	movne	r0, #1
}
 8015df0:	4240      	negs	r0, r0
 8015df2:	bd08      	pop	{r3, pc}
            : (Odr <=   26.0f) ? ISM330DLC_FIFO_26Hz
 8015df4:	2101      	movs	r1, #1
 8015df6:	e7f5      	b.n	8015de4 <ISM330DLC_FIFO_Set_ODR_Value+0x84>
 8015df8:	2102      	movs	r1, #2
 8015dfa:	e7f3      	b.n	8015de4 <ISM330DLC_FIFO_Set_ODR_Value+0x84>
 8015dfc:	2103      	movs	r1, #3
 8015dfe:	e7f1      	b.n	8015de4 <ISM330DLC_FIFO_Set_ODR_Value+0x84>
 8015e00:	2104      	movs	r1, #4
 8015e02:	e7ef      	b.n	8015de4 <ISM330DLC_FIFO_Set_ODR_Value+0x84>
 8015e04:	2105      	movs	r1, #5
 8015e06:	e7ed      	b.n	8015de4 <ISM330DLC_FIFO_Set_ODR_Value+0x84>
 8015e08:	2106      	movs	r1, #6
 8015e0a:	e7eb      	b.n	8015de4 <ISM330DLC_FIFO_Set_ODR_Value+0x84>
 8015e0c:	2107      	movs	r1, #7
 8015e0e:	e7e9      	b.n	8015de4 <ISM330DLC_FIFO_Set_ODR_Value+0x84>
 8015e10:	2108      	movs	r1, #8
 8015e12:	e7e7      	b.n	8015de4 <ISM330DLC_FIFO_Set_ODR_Value+0x84>
 8015e14:	42500000 	.word	0x42500000
 8015e18:	42d00000 	.word	0x42d00000
 8015e1c:	43500000 	.word	0x43500000
 8015e20:	43d00000 	.word	0x43d00000
 8015e24:	44504000 	.word	0x44504000
 8015e28:	44cf8000 	.word	0x44cf8000
 8015e2c:	45502000 	.word	0x45502000

08015e30 <ISM330DLC_FIFO_Set_INT2_FIFO_Full>:
{
 8015e30:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if (ism330dlc_read_reg(&(pObj->Ctx), ISM330DLC_INT2_CTRL, &reg.byte, 1) != ISM330DLC_OK)
 8015e32:	f100 041c 	add.w	r4, r0, #28
{
 8015e36:	460d      	mov	r5, r1
  if (ism330dlc_read_reg(&(pObj->Ctx), ISM330DLC_INT2_CTRL, &reg.byte, 1) != ISM330DLC_OK)
 8015e38:	2301      	movs	r3, #1
 8015e3a:	aa01      	add	r2, sp, #4
 8015e3c:	210e      	movs	r1, #14
 8015e3e:	4620      	mov	r0, r4
 8015e40:	f7f0 f9f6 	bl	8006230 <ism330dlc_read_reg>
 8015e44:	b988      	cbnz	r0, 8015e6a <ISM330DLC_FIFO_Set_INT2_FIFO_Full+0x3a>
  reg.int1_ctrl.int1_full_flag = Status;
 8015e46:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8015e4a:	f365 1345 	bfi	r3, r5, #5, #1
 8015e4e:	f88d 3004 	strb.w	r3, [sp, #4]
  if (ism330dlc_write_reg(&(pObj->Ctx), ISM330DLC_INT2_CTRL, &reg.byte, 1) != ISM330DLC_OK)
 8015e52:	aa01      	add	r2, sp, #4
 8015e54:	2301      	movs	r3, #1
 8015e56:	210e      	movs	r1, #14
 8015e58:	4620      	mov	r0, r4
 8015e5a:	f7f0 f9f0 	bl	800623e <ism330dlc_write_reg>
 8015e5e:	3800      	subs	r0, #0
 8015e60:	bf18      	it	ne
 8015e62:	2001      	movne	r0, #1
 8015e64:	4240      	negs	r0, r0
}
 8015e66:	b003      	add	sp, #12
 8015e68:	bd30      	pop	{r4, r5, pc}
    return ISM330DLC_ERROR;
 8015e6a:	f04f 30ff 	mov.w	r0, #4294967295
 8015e6e:	e7fa      	b.n	8015e66 <ISM330DLC_FIFO_Set_INT2_FIFO_Full+0x36>

08015e70 <ISM330DLC_FIFO_Set_Watermark_Level>:
{
 8015e70:	b508      	push	{r3, lr}
  if (ism330dlc_fifo_watermark_set(&(pObj->Ctx), Watermark) != ISM330DLC_OK)
 8015e72:	301c      	adds	r0, #28
 8015e74:	f7f0 fb90 	bl	8006598 <ism330dlc_fifo_watermark_set>
 8015e78:	3800      	subs	r0, #0
 8015e7a:	bf18      	it	ne
 8015e7c:	2001      	movne	r0, #1
}
 8015e7e:	4240      	negs	r0, r0
 8015e80:	bd08      	pop	{r3, pc}

08015e82 <ISM330DLC_FIFO_Set_Stop_On_Fth>:
{
 8015e82:	b508      	push	{r3, lr}
  if (ism330dlc_fifo_stop_on_wtm_set(&(pObj->Ctx), Status) != ISM330DLC_OK)
 8015e84:	301c      	adds	r0, #28
 8015e86:	f7f0 fbd6 	bl	8006636 <ism330dlc_fifo_stop_on_wtm_set>
 8015e8a:	3800      	subs	r0, #0
 8015e8c:	bf18      	it	ne
 8015e8e:	2001      	movne	r0, #1
}
 8015e90:	4240      	negs	r0, r0
 8015e92:	bd08      	pop	{r3, pc}

08015e94 <ISM330DLC_FIFO_Set_Mode>:
  switch ((ism330dlc_fifo_mode_t)Mode)
 8015e94:	2906      	cmp	r1, #6
{
 8015e96:	b508      	push	{r3, lr}
 8015e98:	d80d      	bhi.n	8015eb6 <ISM330DLC_FIFO_Set_Mode+0x22>
 8015e9a:	2201      	movs	r2, #1
 8015e9c:	fa02 f301 	lsl.w	r3, r2, r1
 8015ea0:	f013 0f5b 	tst.w	r3, #91	; 0x5b
 8015ea4:	d007      	beq.n	8015eb6 <ISM330DLC_FIFO_Set_Mode+0x22>
  if (ism330dlc_fifo_mode_set(&(pObj->Ctx), (ism330dlc_fifo_mode_t)Mode) != ISM330DLC_OK)
 8015ea6:	301c      	adds	r0, #28
 8015ea8:	f7f0 fbdc 	bl	8006664 <ism330dlc_fifo_mode_set>
 8015eac:	3800      	subs	r0, #0
 8015eae:	bf18      	it	ne
 8015eb0:	2001      	movne	r0, #1
 8015eb2:	4240      	negs	r0, r0
}
 8015eb4:	bd08      	pop	{r3, pc}
{
 8015eb6:	f04f 30ff 	mov.w	r0, #4294967295
 8015eba:	e7fb      	b.n	8015eb4 <ISM330DLC_FIFO_Set_Mode+0x20>

08015ebc <ISM330DLC_FIFO_Read>:
  if (ism330dlc_read_reg(&(pObj->Ctx), ISM330DLC_FIFO_DATA_OUT_L, pBuff, (Watermark * 3)) != ISM330DLC_OK)
 8015ebc:	eb02 0242 	add.w	r2, r2, r2, lsl #1
{
 8015ec0:	b508      	push	{r3, lr}
  if (ism330dlc_read_reg(&(pObj->Ctx), ISM330DLC_FIFO_DATA_OUT_L, pBuff, (Watermark * 3)) != ISM330DLC_OK)
 8015ec2:	301c      	adds	r0, #28
 8015ec4:	b293      	uxth	r3, r2
 8015ec6:	460a      	mov	r2, r1
 8015ec8:	213e      	movs	r1, #62	; 0x3e
 8015eca:	f7f0 f9b1 	bl	8006230 <ism330dlc_read_reg>
 8015ece:	3800      	subs	r0, #0
 8015ed0:	bf18      	it	ne
 8015ed2:	2001      	movne	r0, #1
}
 8015ed4:	4240      	negs	r0, r0
 8015ed6:	bd08      	pop	{r3, pc}

08015ed8 <ISM330DLC_FIFO_ACC_Set_Decimation>:
  switch ((ism330dlc_dec_fifo_xl_t)Decimation)
 8015ed8:	2907      	cmp	r1, #7
{
 8015eda:	b508      	push	{r3, lr}
  switch ((ism330dlc_dec_fifo_xl_t)Decimation)
 8015edc:	d807      	bhi.n	8015eee <ISM330DLC_FIFO_ACC_Set_Decimation+0x16>
  if (ism330dlc_fifo_xl_batch_set(&(pObj->Ctx), (ism330dlc_dec_fifo_xl_t)Decimation) != ISM330DLC_OK)
 8015ede:	301c      	adds	r0, #28
 8015ee0:	f7f0 fb7b 	bl	80065da <ism330dlc_fifo_xl_batch_set>
 8015ee4:	3800      	subs	r0, #0
 8015ee6:	bf18      	it	ne
 8015ee8:	2001      	movne	r0, #1
 8015eea:	4240      	negs	r0, r0
}
 8015eec:	bd08      	pop	{r3, pc}
      ret = ISM330DLC_ERROR;
 8015eee:	f04f 30ff 	mov.w	r0, #4294967295
 8015ef2:	e7fb      	b.n	8015eec <ISM330DLC_FIFO_ACC_Set_Decimation+0x14>

08015ef4 <ISM330DLC_FIFO_GYRO_Set_Decimation>:
  switch ((ism330dlc_dec_fifo_gyro_t)Decimation)
 8015ef4:	2907      	cmp	r1, #7
{
 8015ef6:	b508      	push	{r3, lr}
  switch ((ism330dlc_dec_fifo_gyro_t)Decimation)
 8015ef8:	d807      	bhi.n	8015f0a <ISM330DLC_FIFO_GYRO_Set_Decimation+0x16>
  if (ism330dlc_fifo_gy_batch_set(&(pObj->Ctx), (ism330dlc_dec_fifo_gyro_t)Decimation) != ISM330DLC_OK)
 8015efa:	301c      	adds	r0, #28
 8015efc:	f7f0 fb84 	bl	8006608 <ism330dlc_fifo_gy_batch_set>
 8015f00:	3800      	subs	r0, #0
 8015f02:	bf18      	it	ne
 8015f04:	2001      	movne	r0, #1
 8015f06:	4240      	negs	r0, r0
}
 8015f08:	bd08      	pop	{r3, pc}
      ret = ISM330DLC_ERROR;
 8015f0a:	f04f 30ff 	mov.w	r0, #4294967295
 8015f0e:	e7fb      	b.n	8015f08 <ISM330DLC_FIFO_GYRO_Set_Decimation+0x14>

08015f10 <ISM330DLC_Set_INT2_Drdy>:
{
 8015f10:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if (ism330dlc_read_reg(&(pObj->Ctx), ISM330DLC_INT2_CTRL, &reg.byte, 1) != ISM330DLC_OK)
 8015f12:	f100 041c 	add.w	r4, r0, #28
{
 8015f16:	460d      	mov	r5, r1
  if (ism330dlc_read_reg(&(pObj->Ctx), ISM330DLC_INT2_CTRL, &reg.byte, 1) != ISM330DLC_OK)
 8015f18:	2301      	movs	r3, #1
 8015f1a:	aa01      	add	r2, sp, #4
 8015f1c:	210e      	movs	r1, #14
 8015f1e:	4620      	mov	r0, r4
 8015f20:	f7f0 f986 	bl	8006230 <ism330dlc_read_reg>
 8015f24:	b988      	cbnz	r0, 8015f4a <ISM330DLC_Set_INT2_Drdy+0x3a>
  reg.int1_ctrl.int1_drdy_xl = Status;
 8015f26:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8015f2a:	f365 0300 	bfi	r3, r5, #0, #1
 8015f2e:	f88d 3004 	strb.w	r3, [sp, #4]
  if (ism330dlc_write_reg(&(pObj->Ctx), ISM330DLC_INT2_CTRL, &reg.byte, 1) != ISM330DLC_OK)
 8015f32:	aa01      	add	r2, sp, #4
 8015f34:	2301      	movs	r3, #1
 8015f36:	210e      	movs	r1, #14
 8015f38:	4620      	mov	r0, r4
 8015f3a:	f7f0 f980 	bl	800623e <ism330dlc_write_reg>
 8015f3e:	3800      	subs	r0, #0
 8015f40:	bf18      	it	ne
 8015f42:	2001      	movne	r0, #1
 8015f44:	4240      	negs	r0, r0
}
 8015f46:	b003      	add	sp, #12
 8015f48:	bd30      	pop	{r4, r5, pc}
    return ISM330DLC_ERROR;
 8015f4a:	f04f 30ff 	mov.w	r0, #4294967295
 8015f4e:	e7fa      	b.n	8015f46 <ISM330DLC_Set_INT2_Drdy+0x36>

08015f50 <D16_GENERIC>:
 8015f50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015f54:	b089      	sub	sp, #36	; 0x24
 8015f56:	68d4      	ldr	r4, [r2, #12]
 8015f58:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 8015f5a:	6993      	ldr	r3, [r2, #24]
 8015f5c:	9407      	str	r4, [sp, #28]
 8015f5e:	6b14      	ldr	r4, [r2, #48]	; 0x30
 8015f60:	9306      	str	r3, [sp, #24]
 8015f62:	9402      	str	r4, [sp, #8]
 8015f64:	f8d2 a010 	ldr.w	sl, [r2, #16]
 8015f68:	f8d2 b014 	ldr.w	fp, [r2, #20]
 8015f6c:	69d3      	ldr	r3, [r2, #28]
 8015f6e:	6896      	ldr	r6, [r2, #8]
 8015f70:	6b54      	ldr	r4, [r2, #52]	; 0x34
 8015f72:	9103      	str	r1, [sp, #12]
 8015f74:	2d00      	cmp	r5, #0
 8015f76:	d066      	beq.n	8016046 <D16_GENERIC+0xf6>
 8015f78:	f004 0510 	and.w	r5, r4, #16
 8015f7c:	f004 0420 	and.w	r4, r4, #32
 8015f80:	9504      	str	r5, [sp, #16]
 8015f82:	4938      	ldr	r1, [pc, #224]	; (8016064 <D16_GENERIC+0x114>)
 8015f84:	9405      	str	r4, [sp, #20]
 8015f86:	f04f 0e00 	mov.w	lr, #0
 8015f8a:	4635      	mov	r5, r6
 8015f8c:	e04f      	b.n	801602e <D16_GENERIC+0xde>
 8015f8e:	5d87      	ldrb	r7, [r0, r6]
 8015f90:	7804      	ldrb	r4, [r0, #0]
 8015f92:	eb00 0046 	add.w	r0, r0, r6, lsl #1
 8015f96:	eb04 2407 	add.w	r4, r4, r7, lsl #8
 8015f9a:	b2e6      	uxtb	r6, r4
 8015f9c:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8015fa0:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 8015fa4:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
 8015fa8:	4433      	add	r3, r6
 8015faa:	eb04 2493 	add.w	r4, r4, r3, lsr #10
 8015fae:	f3c4 0609 	ubfx	r6, r4, #0, #10
 8015fb2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8015fb6:	ea46 4603 	orr.w	r6, r6, r3, lsl #16
 8015fba:	0aa3      	lsrs	r3, r4, #10
 8015fbc:	4c2a      	ldr	r4, [pc, #168]	; (8016068 <D16_GENERIC+0x118>)
 8015fbe:	fb26 5404 	smlad	r4, r6, r4, r5
 8015fc2:	4d2a      	ldr	r5, [pc, #168]	; (801606c <D16_GENERIC+0x11c>)
 8015fc4:	fb26 f505 	smuad	r5, r6, r5
 8015fc8:	f5a4 6400 	sub.w	r4, r4, #2048	; 0x800
 8015fcc:	eb04 080a 	add.w	r8, r4, sl
 8015fd0:	eba8 080b 	sub.w	r8, r8, fp
 8015fd4:	4646      	mov	r6, r8
 8015fd6:	17f7      	asrs	r7, r6, #31
 8015fd8:	e9cd 6700 	strd	r6, r7, [sp]
 8015fdc:	9e04      	ldr	r6, [sp, #16]
 8015fde:	f10e 0c01 	add.w	ip, lr, #1
 8015fe2:	b16e      	cbz	r6, 8016000 <D16_GENERIC+0xb0>
 8015fe4:	6a16      	ldr	r6, [r2, #32]
 8015fe6:	9f01      	ldr	r7, [sp, #4]
 8015fe8:	fba8 8906 	umull	r8, r9, r8, r6
 8015fec:	fb06 9907 	mla	r9, r6, r7, r9
 8015ff0:	f118 4800 	adds.w	r8, r8, #2147483648	; 0x80000000
 8015ff4:	f149 0900 	adc.w	r9, r9, #0
 8015ff8:	ea4f 0a49 	mov.w	sl, r9, lsl #1
 8015ffc:	46a3      	mov	fp, r4
 8015ffe:	4654      	mov	r4, sl
 8016000:	8d16      	ldrh	r6, [r2, #40]	; 0x28
 8016002:	9f02      	ldr	r7, [sp, #8]
 8016004:	0424      	lsls	r4, r4, #16
 8016006:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 801600a:	f04f 0900 	mov.w	r9, #0
 801600e:	fb0e fe06 	mul.w	lr, lr, r6
 8016012:	fbc7 8904 	smlal	r8, r9, r7, r4
 8016016:	9e03      	ldr	r6, [sp, #12]
 8016018:	464f      	mov	r7, r9
 801601a:	10bc      	asrs	r4, r7, #2
 801601c:	f304 040f 	ssat	r4, #16, r4
 8016020:	f826 401e 	strh.w	r4, [r6, lr, lsl #1]
 8016024:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 8016026:	fa1f fe8c 	uxth.w	lr, ip
 801602a:	4574      	cmp	r4, lr
 801602c:	d90a      	bls.n	8016044 <D16_GENERIC+0xf4>
 801602e:	8d54      	ldrh	r4, [r2, #42]	; 0x2a
 8016030:	2c01      	cmp	r4, #1
 8016032:	b2e6      	uxtb	r6, r4
 8016034:	d1ab      	bne.n	8015f8e <D16_GENERIC+0x3e>
 8016036:	9e05      	ldr	r6, [sp, #20]
 8016038:	f850 4b02 	ldr.w	r4, [r0], #2
 801603c:	2e00      	cmp	r6, #0
 801603e:	d0ac      	beq.n	8015f9a <D16_GENERIC+0x4a>
 8016040:	ba64      	rev16	r4, r4
 8016042:	e7aa      	b.n	8015f9a <D16_GENERIC+0x4a>
 8016044:	462e      	mov	r6, r5
 8016046:	9907      	ldr	r1, [sp, #28]
 8016048:	61d3      	str	r3, [r2, #28]
 801604a:	9b06      	ldr	r3, [sp, #24]
 801604c:	6096      	str	r6, [r2, #8]
 801604e:	2000      	movs	r0, #0
 8016050:	60d1      	str	r1, [r2, #12]
 8016052:	f8c2 a010 	str.w	sl, [r2, #16]
 8016056:	f8c2 b014 	str.w	fp, [r2, #20]
 801605a:	6193      	str	r3, [r2, #24]
 801605c:	b009      	add	sp, #36	; 0x24
 801605e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016062:	bf00      	nop
 8016064:	20000484 	.word	0x20000484
 8016068:	00030001 	.word	0x00030001
 801606c:	00010003 	.word	0x00010003

08016070 <D24_GENERIC>:
 8016070:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016074:	8cd6      	ldrh	r6, [r2, #38]	; 0x26
 8016076:	6993      	ldr	r3, [r2, #24]
 8016078:	6b15      	ldr	r5, [r2, #48]	; 0x30
 801607a:	f8d2 a010 	ldr.w	sl, [r2, #16]
 801607e:	f8d2 9014 	ldr.w	r9, [r2, #20]
 8016082:	6894      	ldr	r4, [r2, #8]
 8016084:	f8d2 b00c 	ldr.w	fp, [r2, #12]
 8016088:	b089      	sub	sp, #36	; 0x24
 801608a:	9307      	str	r3, [sp, #28]
 801608c:	9503      	str	r5, [sp, #12]
 801608e:	69d3      	ldr	r3, [r2, #28]
 8016090:	6b55      	ldr	r5, [r2, #52]	; 0x34
 8016092:	9104      	str	r1, [sp, #16]
 8016094:	2e00      	cmp	r6, #0
 8016096:	f000 8096 	beq.w	80161c6 <D24_GENERIC+0x156>
 801609a:	f005 0610 	and.w	r6, r5, #16
 801609e:	f005 0520 	and.w	r5, r5, #32
 80160a2:	4954      	ldr	r1, [pc, #336]	; (80161f4 <D24_GENERIC+0x184>)
 80160a4:	9605      	str	r6, [sp, #20]
 80160a6:	9506      	str	r5, [sp, #24]
 80160a8:	f04f 0e00 	mov.w	lr, #0
 80160ac:	f8cd 9008 	str.w	r9, [sp, #8]
 80160b0:	e06a      	b.n	8016188 <D24_GENERIC+0x118>
 80160b2:	f810 5016 	ldrb.w	r5, [r0, r6, lsl #1]
 80160b6:	f810 8007 	ldrb.w	r8, [r0, r7]
 80160ba:	f890 c000 	ldrb.w	ip, [r0]
 80160be:	042d      	lsls	r5, r5, #16
 80160c0:	eb00 0046 	add.w	r0, r0, r6, lsl #1
 80160c4:	eb05 2508 	add.w	r5, r5, r8, lsl #8
 80160c8:	44ac      	add	ip, r5
 80160ca:	4438      	add	r0, r7
 80160cc:	fa5f f68c 	uxtb.w	r6, ip
 80160d0:	f3cc 2507 	ubfx	r5, ip, #8, #8
 80160d4:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 80160d8:	f851 7025 	ldr.w	r7, [r1, r5, lsl #2]
 80160dc:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80160e0:	eb06 2693 	add.w	r6, r6, r3, lsr #10
 80160e4:	eb07 2796 	add.w	r7, r7, r6, lsr #10
 80160e8:	f851 302c 	ldr.w	r3, [r1, ip, lsl #2]
 80160ec:	f3c7 0509 	ubfx	r5, r7, #0, #10
 80160f0:	f3c6 0609 	ubfx	r6, r6, #0, #10
 80160f4:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
 80160f8:	eb03 2397 	add.w	r3, r3, r7, lsr #10
 80160fc:	4d3e      	ldr	r5, [pc, #248]	; (80161f8 <D24_GENERIC+0x188>)
 80160fe:	fb26 b705 	smlad	r7, r6, r5, fp
 8016102:	4d3e      	ldr	r5, [pc, #248]	; (80161fc <D24_GENERIC+0x18c>)
 8016104:	fb26 4b05 	smlad	fp, r6, r5, r4
 8016108:	f3c3 0409 	ubfx	r4, r3, #0, #10
 801610c:	eb04 0844 	add.w	r8, r4, r4, lsl #1
 8016110:	eb0b 0b48 	add.w	fp, fp, r8, lsl #1
 8016114:	2401      	movs	r4, #1
 8016116:	fb26 f604 	smuad	r6, r6, r4
 801611a:	f5a7 55d8 	sub.w	r5, r7, #6912	; 0x1b00
 801611e:	9f02      	ldr	r7, [sp, #8]
 8016120:	eb0e 0c04 	add.w	ip, lr, r4
 8016124:	eb08 0406 	add.w	r4, r8, r6
 8016128:	eb05 060a 	add.w	r6, r5, sl
 801612c:	1bf6      	subs	r6, r6, r7
 801612e:	4637      	mov	r7, r6
 8016130:	ea4f 78e6 	mov.w	r8, r6, asr #31
 8016134:	e9cd 7800 	strd	r7, r8, [sp]
 8016138:	9f05      	ldr	r7, [sp, #20]
 801613a:	b177      	cbz	r7, 801615a <D24_GENERIC+0xea>
 801613c:	f8d2 8020 	ldr.w	r8, [r2, #32]
 8016140:	9502      	str	r5, [sp, #8]
 8016142:	fba6 9a08 	umull	r9, sl, r6, r8
 8016146:	9e01      	ldr	r6, [sp, #4]
 8016148:	fb08 aa06 	mla	sl, r8, r6, sl
 801614c:	f119 4600 	adds.w	r6, r9, #2147483648	; 0x80000000
 8016150:	f14a 0700 	adc.w	r7, sl, #0
 8016154:	ea4f 0a47 	mov.w	sl, r7, lsl #1
 8016158:	4655      	mov	r5, sl
 801615a:	8d16      	ldrh	r6, [r2, #40]	; 0x28
 801615c:	9f03      	ldr	r7, [sp, #12]
 801615e:	03ad      	lsls	r5, r5, #14
 8016160:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 8016164:	f04f 0900 	mov.w	r9, #0
 8016168:	fb0e fe06 	mul.w	lr, lr, r6
 801616c:	fbc7 8905 	smlal	r8, r9, r7, r5
 8016170:	9e04      	ldr	r6, [sp, #16]
 8016172:	464f      	mov	r7, r9
 8016174:	10bd      	asrs	r5, r7, #2
 8016176:	f305 050f 	ssat	r5, #16, r5
 801617a:	f826 501e 	strh.w	r5, [r6, lr, lsl #1]
 801617e:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 8016180:	fa1f fe8c 	uxth.w	lr, ip
 8016184:	4575      	cmp	r5, lr
 8016186:	d91c      	bls.n	80161c2 <D24_GENERIC+0x152>
 8016188:	8d55      	ldrh	r5, [r2, #42]	; 0x2a
 801618a:	b2ef      	uxtb	r7, r5
 801618c:	2d01      	cmp	r5, #1
 801618e:	b23e      	sxth	r6, r7
 8016190:	d18f      	bne.n	80160b2 <D24_GENERIC+0x42>
 8016192:	9d06      	ldr	r5, [sp, #24]
 8016194:	b15d      	cbz	r5, 80161ae <D24_GENERIC+0x13e>
 8016196:	f01e 0f01 	tst.w	lr, #1
 801619a:	d122      	bne.n	80161e2 <D24_GENERIC+0x172>
 801619c:	7805      	ldrb	r5, [r0, #0]
 801619e:	78c7      	ldrb	r7, [r0, #3]
 80161a0:	7846      	ldrb	r6, [r0, #1]
 80161a2:	022d      	lsls	r5, r5, #8
 80161a4:	eb05 4c07 	add.w	ip, r5, r7, lsl #16
 80161a8:	44b4      	add	ip, r6
 80161aa:	3002      	adds	r0, #2
 80161ac:	e78e      	b.n	80160cc <D24_GENERIC+0x5c>
 80161ae:	7846      	ldrb	r6, [r0, #1]
 80161b0:	f890 c002 	ldrb.w	ip, [r0, #2]
 80161b4:	f810 5b03 	ldrb.w	r5, [r0], #3
 80161b8:	0236      	lsls	r6, r6, #8
 80161ba:	eb06 4c0c 	add.w	ip, r6, ip, lsl #16
 80161be:	44ac      	add	ip, r5
 80161c0:	e784      	b.n	80160cc <D24_GENERIC+0x5c>
 80161c2:	f8dd 9008 	ldr.w	r9, [sp, #8]
 80161c6:	61d3      	str	r3, [r2, #28]
 80161c8:	9b07      	ldr	r3, [sp, #28]
 80161ca:	6094      	str	r4, [r2, #8]
 80161cc:	2000      	movs	r0, #0
 80161ce:	f8c2 b00c 	str.w	fp, [r2, #12]
 80161d2:	f8c2 a010 	str.w	sl, [r2, #16]
 80161d6:	f8c2 9014 	str.w	r9, [r2, #20]
 80161da:	6193      	str	r3, [r2, #24]
 80161dc:	b009      	add	sp, #36	; 0x24
 80161de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80161e2:	78c5      	ldrb	r5, [r0, #3]
 80161e4:	7887      	ldrb	r7, [r0, #2]
 80161e6:	f810 6b04 	ldrb.w	r6, [r0], #4
 80161ea:	022d      	lsls	r5, r5, #8
 80161ec:	eb05 4c07 	add.w	ip, r5, r7, lsl #16
 80161f0:	44b4      	add	ip, r6
 80161f2:	e76b      	b.n	80160cc <D24_GENERIC+0x5c>
 80161f4:	20000484 	.word	0x20000484
 80161f8:	00030001 	.word	0x00030001
 80161fc:	00060007 	.word	0x00060007

08016200 <D32_GENERIC>:
 8016200:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016204:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 8016206:	6993      	ldr	r3, [r2, #24]
 8016208:	6b14      	ldr	r4, [r2, #48]	; 0x30
 801620a:	f8d2 a010 	ldr.w	sl, [r2, #16]
 801620e:	f8d2 9014 	ldr.w	r9, [r2, #20]
 8016212:	69d6      	ldr	r6, [r2, #28]
 8016214:	f8d2 b00c 	ldr.w	fp, [r2, #12]
 8016218:	b089      	sub	sp, #36	; 0x24
 801621a:	9307      	str	r3, [sp, #28]
 801621c:	9403      	str	r4, [sp, #12]
 801621e:	6893      	ldr	r3, [r2, #8]
 8016220:	6b54      	ldr	r4, [r2, #52]	; 0x34
 8016222:	9104      	str	r1, [sp, #16]
 8016224:	2d00      	cmp	r5, #0
 8016226:	f000 809f 	beq.w	8016368 <D32_GENERIC+0x168>
 801622a:	f004 0510 	and.w	r5, r4, #16
 801622e:	f004 0420 	and.w	r4, r4, #32
 8016232:	9505      	str	r5, [sp, #20]
 8016234:	4953      	ldr	r1, [pc, #332]	; (8016384 <D32_GENERIC+0x184>)
 8016236:	9406      	str	r4, [sp, #24]
 8016238:	f04f 0c00 	mov.w	ip, #0
 801623c:	f8cd 9008 	str.w	r9, [sp, #8]
 8016240:	461d      	mov	r5, r3
 8016242:	4617      	mov	r7, r2
 8016244:	e077      	b.n	8016336 <D32_GENERIC+0x136>
 8016246:	f818 3003 	ldrb.w	r3, [r8, r3]
 801624a:	f810 800e 	ldrb.w	r8, [r0, lr]
 801624e:	f810 e002 	ldrb.w	lr, [r0, r2]
 8016252:	7800      	ldrb	r0, [r0, #0]
 8016254:	041b      	lsls	r3, r3, #16
 8016256:	eb03 6308 	add.w	r3, r3, r8, lsl #24
 801625a:	eb03 230e 	add.w	r3, r3, lr, lsl #8
 801625e:	4403      	add	r3, r0
 8016260:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 8016264:	b2dc      	uxtb	r4, r3
 8016266:	f3c3 2207 	ubfx	r2, r3, #8, #8
 801626a:	f3c3 4807 	ubfx	r8, r3, #16, #8
 801626e:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
 8016272:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8016276:	0e1b      	lsrs	r3, r3, #24
 8016278:	eb04 2496 	add.w	r4, r4, r6, lsr #10
 801627c:	f851 6028 	ldr.w	r6, [r1, r8, lsl #2]
 8016280:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8016284:	eb02 2294 	add.w	r2, r2, r4, lsr #10
 8016288:	eb06 2e92 	add.w	lr, r6, r2, lsr #10
 801628c:	eb03 269e 	add.w	r6, r3, lr, lsr #10
 8016290:	f3c6 0309 	ubfx	r3, r6, #0, #10
 8016294:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8016298:	f3c2 0209 	ubfx	r2, r2, #0, #10
 801629c:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 80162a0:	ea43 4e0e 	orr.w	lr, r3, lr, lsl #16
 80162a4:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80162a8:	4b37      	ldr	r3, [pc, #220]	; (8016388 <D32_GENERIC+0x188>)
 80162aa:	fb22 b403 	smlad	r4, r2, r3, fp
 80162ae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80162b2:	fb2e 4803 	smlad	r8, lr, r3, r4
 80162b6:	4b35      	ldr	r3, [pc, #212]	; (801638c <D32_GENERIC+0x18c>)
 80162b8:	fb22 5503 	smlad	r5, r2, r3, r5
 80162bc:	4b34      	ldr	r3, [pc, #208]	; (8016390 <D32_GENERIC+0x190>)
 80162be:	fb2e 5b03 	smlad	fp, lr, r3, r5
 80162c2:	2301      	movs	r3, #1
 80162c4:	fb22 f203 	smuad	r2, r2, r3
 80162c8:	4b32      	ldr	r3, [pc, #200]	; (8016394 <D32_GENERIC+0x194>)
 80162ca:	fb2e 2503 	smlad	r5, lr, r3, r2
 80162ce:	9b02      	ldr	r3, [sp, #8]
 80162d0:	f5a8 4480 	sub.w	r4, r8, #16384	; 0x4000
 80162d4:	eb04 080a 	add.w	r8, r4, sl
 80162d8:	eba8 0803 	sub.w	r8, r8, r3
 80162dc:	4642      	mov	r2, r8
 80162de:	17d3      	asrs	r3, r2, #31
 80162e0:	e9cd 2300 	strd	r2, r3, [sp]
 80162e4:	9b05      	ldr	r3, [sp, #20]
 80162e6:	f10c 0e01 	add.w	lr, ip, #1
 80162ea:	b16b      	cbz	r3, 8016308 <D32_GENERIC+0x108>
 80162ec:	6a3a      	ldr	r2, [r7, #32]
 80162ee:	9b01      	ldr	r3, [sp, #4]
 80162f0:	9402      	str	r4, [sp, #8]
 80162f2:	fba8 8902 	umull	r8, r9, r8, r2
 80162f6:	fb02 9903 	mla	r9, r2, r3, r9
 80162fa:	f118 4800 	adds.w	r8, r8, #2147483648	; 0x80000000
 80162fe:	f149 0900 	adc.w	r9, r9, #0
 8016302:	ea4f 0a49 	mov.w	sl, r9, lsl #1
 8016306:	4654      	mov	r4, sl
 8016308:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801630a:	9a04      	ldr	r2, [sp, #16]
 801630c:	fb0c fc03 	mul.w	ip, ip, r3
 8016310:	9b03      	ldr	r3, [sp, #12]
 8016312:	0364      	lsls	r4, r4, #13
 8016314:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 8016318:	f04f 0900 	mov.w	r9, #0
 801631c:	fbc3 8904 	smlal	r8, r9, r3, r4
 8016320:	464b      	mov	r3, r9
 8016322:	109b      	asrs	r3, r3, #2
 8016324:	f303 030f 	ssat	r3, #16, r3
 8016328:	f822 301c 	strh.w	r3, [r2, ip, lsl #1]
 801632c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801632e:	fa1f fc8e 	uxth.w	ip, lr
 8016332:	4563      	cmp	r3, ip
 8016334:	d914      	bls.n	8016360 <D32_GENERIC+0x160>
 8016336:	8d7c      	ldrh	r4, [r7, #42]	; 0x2a
 8016338:	b2e2      	uxtb	r2, r4
 801633a:	eb02 0e42 	add.w	lr, r2, r2, lsl #1
 801633e:	eb00 080e 	add.w	r8, r0, lr
 8016342:	4253      	negs	r3, r2
 8016344:	2c01      	cmp	r4, #1
 8016346:	eb08 0403 	add.w	r4, r8, r3
 801634a:	f47f af7c 	bne.w	8016246 <D32_GENERIC+0x46>
 801634e:	1d02      	adds	r2, r0, #4
 8016350:	6803      	ldr	r3, [r0, #0]
 8016352:	9806      	ldr	r0, [sp, #24]
 8016354:	b110      	cbz	r0, 801635c <D32_GENERIC+0x15c>
 8016356:	ba5b      	rev16	r3, r3
 8016358:	4610      	mov	r0, r2
 801635a:	e783      	b.n	8016264 <D32_GENERIC+0x64>
 801635c:	4610      	mov	r0, r2
 801635e:	e781      	b.n	8016264 <D32_GENERIC+0x64>
 8016360:	f8dd 9008 	ldr.w	r9, [sp, #8]
 8016364:	462b      	mov	r3, r5
 8016366:	463a      	mov	r2, r7
 8016368:	6093      	str	r3, [r2, #8]
 801636a:	9b07      	ldr	r3, [sp, #28]
 801636c:	f8c2 b00c 	str.w	fp, [r2, #12]
 8016370:	2000      	movs	r0, #0
 8016372:	61d6      	str	r6, [r2, #28]
 8016374:	f8c2 a010 	str.w	sl, [r2, #16]
 8016378:	f8c2 9014 	str.w	r9, [r2, #20]
 801637c:	6193      	str	r3, [r2, #24]
 801637e:	b009      	add	sp, #36	; 0x24
 8016380:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016384:	20000484 	.word	0x20000484
 8016388:	00060003 	.word	0x00060003
 801638c:	000a000c 	.word	0x000a000c
 8016390:	000c000a 	.word	0x000c000a
 8016394:	00030006 	.word	0x00030006

08016398 <D48_GENERIC>:
 8016398:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801639c:	b089      	sub	sp, #36	; 0x24
 801639e:	6953      	ldr	r3, [r2, #20]
 80163a0:	68d4      	ldr	r4, [r2, #12]
 80163a2:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 80163a4:	9302      	str	r3, [sp, #8]
 80163a6:	9400      	str	r4, [sp, #0]
 80163a8:	6993      	ldr	r3, [r2, #24]
 80163aa:	6b14      	ldr	r4, [r2, #48]	; 0x30
 80163ac:	9307      	str	r3, [sp, #28]
 80163ae:	9403      	str	r4, [sp, #12]
 80163b0:	f8d2 a010 	ldr.w	sl, [r2, #16]
 80163b4:	69d6      	ldr	r6, [r2, #28]
 80163b6:	6893      	ldr	r3, [r2, #8]
 80163b8:	6b54      	ldr	r4, [r2, #52]	; 0x34
 80163ba:	9104      	str	r1, [sp, #16]
 80163bc:	2d00      	cmp	r5, #0
 80163be:	f000 80c5 	beq.w	801654c <D48_GENERIC+0x1b4>
 80163c2:	f004 0510 	and.w	r5, r4, #16
 80163c6:	f004 0420 	and.w	r4, r4, #32
 80163ca:	4967      	ldr	r1, [pc, #412]	; (8016568 <D48_GENERIC+0x1d0>)
 80163cc:	9505      	str	r5, [sp, #20]
 80163ce:	9406      	str	r4, [sp, #24]
 80163d0:	f04f 0c00 	mov.w	ip, #0
 80163d4:	4657      	mov	r7, sl
 80163d6:	9301      	str	r3, [sp, #4]
 80163d8:	e09c      	b.n	8016514 <D48_GENERIC+0x17c>
 80163da:	f81b 4005 	ldrb.w	r4, [fp, r5]
 80163de:	f810 b009 	ldrb.w	fp, [r0, r9]
 80163e2:	f81a 9009 	ldrb.w	r9, [sl, r9]
 80163e6:	f810 a00e 	ldrb.w	sl, [r0, lr]
 80163ea:	7800      	ldrb	r0, [r0, #0]
 80163ec:	0424      	lsls	r4, r4, #16
 80163ee:	eb04 6b0b 	add.w	fp, r4, fp, lsl #24
 80163f2:	f818 4005 	ldrb.w	r4, [r8, r5]
 80163f6:	eb0b 2b0a 	add.w	fp, fp, sl, lsl #8
 80163fa:	44a8      	add	r8, r5
 80163fc:	eb04 2409 	add.w	r4, r4, r9, lsl #8
 8016400:	eb0b 0500 	add.w	r5, fp, r0
 8016404:	eb08 004e 	add.w	r0, r8, lr, lsl #1
 8016408:	fa5f f885 	uxtb.w	r8, r5
 801640c:	f3c5 2e07 	ubfx	lr, r5, #8, #8
 8016410:	f851 a028 	ldr.w	sl, [r1, r8, lsl #2]
 8016414:	f851 902e 	ldr.w	r9, [r1, lr, lsl #2]
 8016418:	f3c5 4e07 	ubfx	lr, r5, #16, #8
 801641c:	0e2d      	lsrs	r5, r5, #24
 801641e:	eb0a 2a96 	add.w	sl, sl, r6, lsr #10
 8016422:	f851 802e 	ldr.w	r8, [r1, lr, lsl #2]
 8016426:	f851 e025 	ldr.w	lr, [r1, r5, lsl #2]
 801642a:	b2e6      	uxtb	r6, r4
 801642c:	eb09 259a 	add.w	r5, r9, sl, lsr #10
 8016430:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8016434:	eb08 2895 	add.w	r8, r8, r5, lsr #10
 8016438:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 801643c:	f851 9024 	ldr.w	r9, [r1, r4, lsl #2]
 8016440:	eb0e 2498 	add.w	r4, lr, r8, lsr #10
 8016444:	eb06 2e94 	add.w	lr, r6, r4, lsr #10
 8016448:	eb09 269e 	add.w	r6, r9, lr, lsr #10
 801644c:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8016450:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8016454:	f3c6 0909 	ubfx	r9, r6, #0, #10
 8016458:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 801645c:	f3c8 0809 	ubfx	r8, r8, #0, #10
 8016460:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8016464:	ea45 4a0a 	orr.w	sl, r5, sl, lsl #16
 8016468:	ea44 4808 	orr.w	r8, r4, r8, lsl #16
 801646c:	ea49 4e0e 	orr.w	lr, r9, lr, lsl #16
 8016470:	4c3e      	ldr	r4, [pc, #248]	; (801656c <D48_GENERIC+0x1d4>)
 8016472:	9d00      	ldr	r5, [sp, #0]
 8016474:	fb2a 5404 	smlad	r4, sl, r4, r5
 8016478:	4d3d      	ldr	r5, [pc, #244]	; (8016570 <D48_GENERIC+0x1d8>)
 801647a:	fb28 4405 	smlad	r4, r8, r5, r4
 801647e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8016482:	fb2e 4b03 	smlad	fp, lr, r3, r4
 8016486:	4c3b      	ldr	r4, [pc, #236]	; (8016574 <D48_GENERIC+0x1dc>)
 8016488:	9b01      	ldr	r3, [sp, #4]
 801648a:	fb2a 3304 	smlad	r3, sl, r4, r3
 801648e:	f04f 141b 	mov.w	r4, #1769499	; 0x1b001b
 8016492:	fb28 3304 	smlad	r3, r8, r4, r3
 8016496:	4c38      	ldr	r4, [pc, #224]	; (8016578 <D48_GENERIC+0x1e0>)
 8016498:	fb2e 3304 	smlad	r3, lr, r4, r3
 801649c:	2501      	movs	r5, #1
 801649e:	9300      	str	r3, [sp, #0]
 80164a0:	fb2a fa05 	smuad	sl, sl, r5
 80164a4:	4b35      	ldr	r3, [pc, #212]	; (801657c <D48_GENERIC+0x1e4>)
 80164a6:	fb28 a803 	smlad	r8, r8, r3, sl
 80164aa:	4b35      	ldr	r3, [pc, #212]	; (8016580 <D48_GENERIC+0x1e8>)
 80164ac:	fb2e 8303 	smlad	r3, lr, r3, r8
 80164b0:	f5ab 4458 	sub.w	r4, fp, #55296	; 0xd800
 80164b4:	9301      	str	r3, [sp, #4]
 80164b6:	9b02      	ldr	r3, [sp, #8]
 80164b8:	eb04 0807 	add.w	r8, r4, r7
 80164bc:	eba8 0803 	sub.w	r8, r8, r3
 80164c0:	9b05      	ldr	r3, [sp, #20]
 80164c2:	4465      	add	r5, ip
 80164c4:	ea4f 7be8 	mov.w	fp, r8, asr #31
 80164c8:	b163      	cbz	r3, 80164e4 <D48_GENERIC+0x14c>
 80164ca:	6a17      	ldr	r7, [r2, #32]
 80164cc:	9402      	str	r4, [sp, #8]
 80164ce:	fba8 8907 	umull	r8, r9, r8, r7
 80164d2:	fb07 990b 	mla	r9, r7, fp, r9
 80164d6:	f118 4800 	adds.w	r8, r8, #2147483648	; 0x80000000
 80164da:	f149 0900 	adc.w	r9, r9, #0
 80164de:	ea4f 0749 	mov.w	r7, r9, lsl #1
 80164e2:	463c      	mov	r4, r7
 80164e4:	f8b2 e028 	ldrh.w	lr, [r2, #40]	; 0x28
 80164e8:	9b03      	ldr	r3, [sp, #12]
 80164ea:	02e4      	lsls	r4, r4, #11
 80164ec:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 80164f0:	f04f 0900 	mov.w	r9, #0
 80164f4:	fb0c fc0e 	mul.w	ip, ip, lr
 80164f8:	fbc3 8904 	smlal	r8, r9, r3, r4
 80164fc:	9b04      	ldr	r3, [sp, #16]
 80164fe:	ea4f 04a9 	mov.w	r4, r9, asr #2
 8016502:	f304 040f 	ssat	r4, #16, r4
 8016506:	f823 401c 	strh.w	r4, [r3, ip, lsl #1]
 801650a:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 801650c:	fa1f fc85 	uxth.w	ip, r5
 8016510:	4564      	cmp	r4, ip
 8016512:	d919      	bls.n	8016548 <D48_GENERIC+0x1b0>
 8016514:	8d54      	ldrh	r4, [r2, #42]	; 0x2a
 8016516:	fa5f fe84 	uxtb.w	lr, r4
 801651a:	eb0e 094e 	add.w	r9, lr, lr, lsl #1
 801651e:	f1ce 0500 	rsb	r5, lr, #0
 8016522:	eb00 0b09 	add.w	fp, r0, r9
 8016526:	eb0b 0a05 	add.w	sl, fp, r5
 801652a:	2c01      	cmp	r4, #1
 801652c:	eb0a 0809 	add.w	r8, sl, r9
 8016530:	f47f af53 	bne.w	80163da <D48_GENERIC+0x42>
 8016534:	9b06      	ldr	r3, [sp, #24]
 8016536:	6805      	ldr	r5, [r0, #0]
 8016538:	6844      	ldr	r4, [r0, #4]
 801653a:	3006      	adds	r0, #6
 801653c:	2b00      	cmp	r3, #0
 801653e:	f43f af63 	beq.w	8016408 <D48_GENERIC+0x70>
 8016542:	ba6d      	rev16	r5, r5
 8016544:	ba64      	rev16	r4, r4
 8016546:	e75f      	b.n	8016408 <D48_GENERIC+0x70>
 8016548:	9b01      	ldr	r3, [sp, #4]
 801654a:	46ba      	mov	sl, r7
 801654c:	6093      	str	r3, [r2, #8]
 801654e:	9b00      	ldr	r3, [sp, #0]
 8016550:	60d3      	str	r3, [r2, #12]
 8016552:	9b02      	ldr	r3, [sp, #8]
 8016554:	6153      	str	r3, [r2, #20]
 8016556:	9b07      	ldr	r3, [sp, #28]
 8016558:	61d6      	str	r6, [r2, #28]
 801655a:	2000      	movs	r0, #0
 801655c:	f8c2 a010 	str.w	sl, [r2, #16]
 8016560:	6193      	str	r3, [r2, #24]
 8016562:	b009      	add	sp, #36	; 0x24
 8016564:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016568:	20000484 	.word	0x20000484
 801656c:	000f000a 	.word	0x000f000a
 8016570:	00060003 	.word	0x00060003
 8016574:	00150019 	.word	0x00150019
 8016578:	00190015 	.word	0x00190015
 801657c:	00030006 	.word	0x00030006
 8016580:	000a000f 	.word	0x000a000f

08016584 <D64_GENERIC>:
 8016584:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016588:	b089      	sub	sp, #36	; 0x24
 801658a:	6913      	ldr	r3, [r2, #16]
 801658c:	6895      	ldr	r5, [r2, #8]
 801658e:	9303      	str	r3, [sp, #12]
 8016590:	9501      	str	r5, [sp, #4]
 8016592:	6953      	ldr	r3, [r2, #20]
 8016594:	68d5      	ldr	r5, [r2, #12]
 8016596:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 8016598:	9304      	str	r3, [sp, #16]
 801659a:	9500      	str	r5, [sp, #0]
 801659c:	6993      	ldr	r3, [r2, #24]
 801659e:	6b15      	ldr	r5, [r2, #48]	; 0x30
 80165a0:	9307      	str	r3, [sp, #28]
 80165a2:	9505      	str	r5, [sp, #20]
 80165a4:	69d3      	ldr	r3, [r2, #28]
 80165a6:	9106      	str	r1, [sp, #24]
 80165a8:	2c00      	cmp	r4, #0
 80165aa:	f000 80d9 	beq.w	8016760 <D64_GENERIC+0x1dc>
 80165ae:	6a11      	ldr	r1, [r2, #32]
 80165b0:	9102      	str	r1, [sp, #8]
 80165b2:	f8df e1ec 	ldr.w	lr, [pc, #492]	; 80167a0 <D64_GENERIC+0x21c>
 80165b6:	f04f 0c00 	mov.w	ip, #0
 80165ba:	4681      	mov	r9, r0
 80165bc:	e0c1      	b.n	8016742 <D64_GENERIC+0x1be>
 80165be:	eb06 0846 	add.w	r8, r6, r6, lsl #1
 80165c2:	4274      	negs	r4, r6
 80165c4:	eb09 0708 	add.w	r7, r9, r8
 80165c8:	eb07 0a44 	add.w	sl, r7, r4, lsl #1
 80165cc:	eb0a 0548 	add.w	r5, sl, r8, lsl #1
 80165d0:	5d38      	ldrb	r0, [r7, r4]
 80165d2:	5d29      	ldrb	r1, [r5, r4]
 80165d4:	f81a b018 	ldrb.w	fp, [sl, r8, lsl #1]
 80165d8:	f819 a008 	ldrb.w	sl, [r9, r8]
 80165dc:	f817 8014 	ldrb.w	r8, [r7, r4, lsl #1]
 80165e0:	f899 7000 	ldrb.w	r7, [r9]
 80165e4:	f815 9014 	ldrb.w	r9, [r5, r4, lsl #1]
 80165e8:	4425      	add	r5, r4
 80165ea:	0409      	lsls	r1, r1, #16
 80165ec:	0400      	lsls	r0, r0, #16
 80165ee:	eb01 610b 	add.w	r1, r1, fp, lsl #24
 80165f2:	eb00 600a 	add.w	r0, r0, sl, lsl #24
 80165f6:	f815 b014 	ldrb.w	fp, [r5, r4, lsl #1]
 80165fa:	eb01 2109 	add.w	r1, r1, r9, lsl #8
 80165fe:	eb05 0444 	add.w	r4, r5, r4, lsl #1
 8016602:	eb00 2008 	add.w	r0, r0, r8, lsl #8
 8016606:	4459      	add	r1, fp
 8016608:	eb04 0986 	add.w	r9, r4, r6, lsl #2
 801660c:	4438      	add	r0, r7
 801660e:	b2c5      	uxtb	r5, r0
 8016610:	f3c0 2407 	ubfx	r4, r0, #8, #8
 8016614:	f85e 6025 	ldr.w	r6, [lr, r5, lsl #2]
 8016618:	f85e 5024 	ldr.w	r5, [lr, r4, lsl #2]
 801661c:	f3c0 4407 	ubfx	r4, r0, #16, #8
 8016620:	0e00      	lsrs	r0, r0, #24
 8016622:	eb03 0806 	add.w	r8, r3, r6
 8016626:	f85e 7024 	ldr.w	r7, [lr, r4, lsl #2]
 801662a:	f85e 4020 	ldr.w	r4, [lr, r0, lsl #2]
 801662e:	f3c1 2307 	ubfx	r3, r1, #8, #8
 8016632:	b2c8      	uxtb	r0, r1
 8016634:	eb05 2598 	add.w	r5, r5, r8, lsr #10
 8016638:	eb07 2795 	add.w	r7, r7, r5, lsr #10
 801663c:	f85e 6020 	ldr.w	r6, [lr, r0, lsl #2]
 8016640:	f85e 0023 	ldr.w	r0, [lr, r3, lsl #2]
 8016644:	f3c1 4307 	ubfx	r3, r1, #16, #8
 8016648:	eb04 2497 	add.w	r4, r4, r7, lsr #10
 801664c:	0e09      	lsrs	r1, r1, #24
 801664e:	eb06 2694 	add.w	r6, r6, r4, lsr #10
 8016652:	f85e 3023 	ldr.w	r3, [lr, r3, lsl #2]
 8016656:	f85e 1021 	ldr.w	r1, [lr, r1, lsl #2]
 801665a:	eb00 2096 	add.w	r0, r0, r6, lsr #10
 801665e:	eb03 2a90 	add.w	sl, r3, r0, lsr #10
 8016662:	eb01 219a 	add.w	r1, r1, sl, lsr #10
 8016666:	f3ca 0309 	ubfx	r3, sl, #0, #10
 801666a:	f3c5 0509 	ubfx	r5, r5, #0, #10
 801666e:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8016672:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8016676:	f3c1 0a09 	ubfx	sl, r1, #0, #10
 801667a:	f3c8 0809 	ubfx	r8, r8, #0, #10
 801667e:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8016682:	f3c0 0009 	ubfx	r0, r0, #0, #10
 8016686:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
 801668a:	ea4a 4a03 	orr.w	sl, sl, r3, lsl #16
 801668e:	ea45 4808 	orr.w	r8, r5, r8, lsl #16
 8016692:	0a8b      	lsrs	r3, r1, #10
 8016694:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8016698:	4939      	ldr	r1, [pc, #228]	; (8016780 <D64_GENERIC+0x1fc>)
 801669a:	9c00      	ldr	r4, [sp, #0]
 801669c:	fb28 4101 	smlad	r1, r8, r1, r4
 80166a0:	4c38      	ldr	r4, [pc, #224]	; (8016784 <D64_GENERIC+0x200>)
 80166a2:	fb27 1104 	smlad	r1, r7, r4, r1
 80166a6:	4c38      	ldr	r4, [pc, #224]	; (8016788 <D64_GENERIC+0x204>)
 80166a8:	fb20 1104 	smlad	r1, r0, r4, r1
 80166ac:	f44f 3680 	mov.w	r6, #65536	; 0x10000
 80166b0:	fb2a 1106 	smlad	r1, sl, r6, r1
 80166b4:	4c35      	ldr	r4, [pc, #212]	; (801678c <D64_GENERIC+0x208>)
 80166b6:	9d01      	ldr	r5, [sp, #4]
 80166b8:	fb28 5404 	smlad	r4, r8, r4, r5
 80166bc:	4d33      	ldr	r5, [pc, #204]	; (801678c <D64_GENERIC+0x208>)
 80166be:	fb2a 4415 	smladx	r4, sl, r5, r4
 80166c2:	4d33      	ldr	r5, [pc, #204]	; (8016790 <D64_GENERIC+0x20c>)
 80166c4:	fb27 4405 	smlad	r4, r7, r5, r4
 80166c8:	fb20 4415 	smladx	r4, r0, r5, r4
 80166cc:	2501      	movs	r5, #1
 80166ce:	9400      	str	r4, [sp, #0]
 80166d0:	fb28 f805 	smuad	r8, r8, r5
 80166d4:	4c2f      	ldr	r4, [pc, #188]	; (8016794 <D64_GENERIC+0x210>)
 80166d6:	fb27 8704 	smlad	r7, r7, r4, r8
 80166da:	4c2f      	ldr	r4, [pc, #188]	; (8016798 <D64_GENERIC+0x214>)
 80166dc:	fb20 7004 	smlad	r0, r0, r4, r7
 80166e0:	4c2e      	ldr	r4, [pc, #184]	; (801679c <D64_GENERIC+0x218>)
 80166e2:	fb2a 0004 	smlad	r0, sl, r4, r0
 80166e6:	f5a1 3600 	sub.w	r6, r1, #131072	; 0x20000
 80166ea:	9902      	ldr	r1, [sp, #8]
 80166ec:	9001      	str	r0, [sp, #4]
 80166ee:	b189      	cbz	r1, 8016714 <D64_GENERIC+0x190>
 80166f0:	9803      	ldr	r0, [sp, #12]
 80166f2:	9c04      	ldr	r4, [sp, #16]
 80166f4:	9604      	str	r6, [sp, #16]
 80166f6:	4430      	add	r0, r6
 80166f8:	1b00      	subs	r0, r0, r4
 80166fa:	17c5      	asrs	r5, r0, #31
 80166fc:	460f      	mov	r7, r1
 80166fe:	fba0 0101 	umull	r0, r1, r0, r1
 8016702:	fb07 1105 	mla	r1, r7, r5, r1
 8016706:	f110 4000 	adds.w	r0, r0, #2147483648	; 0x80000000
 801670a:	f141 0100 	adc.w	r1, r1, #0
 801670e:	0049      	lsls	r1, r1, #1
 8016710:	9103      	str	r1, [sp, #12]
 8016712:	460e      	mov	r6, r1
 8016714:	8d14      	ldrh	r4, [r2, #40]	; 0x28
 8016716:	9905      	ldr	r1, [sp, #20]
 8016718:	9806      	ldr	r0, [sp, #24]
 801671a:	02b6      	lsls	r6, r6, #10
 801671c:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 8016720:	f04f 0800 	mov.w	r8, #0
 8016724:	fb0c f404 	mul.w	r4, ip, r4
 8016728:	fbc1 7806 	smlal	r7, r8, r1, r6
 801672c:	4641      	mov	r1, r8
 801672e:	1089      	asrs	r1, r1, #2
 8016730:	f301 010f 	ssat	r1, #16, r1
 8016734:	f820 1014 	strh.w	r1, [r0, r4, lsl #1]
 8016738:	8cd1      	ldrh	r1, [r2, #38]	; 0x26
 801673a:	f10c 0c01 	add.w	ip, ip, #1
 801673e:	4561      	cmp	r1, ip
 8016740:	dd0e      	ble.n	8016760 <D64_GENERIC+0x1dc>
 8016742:	8d56      	ldrh	r6, [r2, #42]	; 0x2a
 8016744:	2e01      	cmp	r6, #1
 8016746:	f47f af3a 	bne.w	80165be <D64_GENERIC+0x3a>
 801674a:	6b56      	ldr	r6, [r2, #52]	; 0x34
 801674c:	06b4      	lsls	r4, r6, #26
 801674e:	e899 0003 	ldmia.w	r9, {r0, r1}
 8016752:	f109 0908 	add.w	r9, r9, #8
 8016756:	f57f af5a 	bpl.w	801660e <D64_GENERIC+0x8a>
 801675a:	ba40      	rev16	r0, r0
 801675c:	ba49      	rev16	r1, r1
 801675e:	e756      	b.n	801660e <D64_GENERIC+0x8a>
 8016760:	61d3      	str	r3, [r2, #28]
 8016762:	9b03      	ldr	r3, [sp, #12]
 8016764:	9901      	ldr	r1, [sp, #4]
 8016766:	6113      	str	r3, [r2, #16]
 8016768:	9b04      	ldr	r3, [sp, #16]
 801676a:	6091      	str	r1, [r2, #8]
 801676c:	6153      	str	r3, [r2, #20]
 801676e:	9900      	ldr	r1, [sp, #0]
 8016770:	9b07      	ldr	r3, [sp, #28]
 8016772:	60d1      	str	r1, [r2, #12]
 8016774:	2000      	movs	r0, #0
 8016776:	6193      	str	r3, [r2, #24]
 8016778:	b009      	add	sp, #36	; 0x24
 801677a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801677e:	bf00      	nop
 8016780:	001c0015 	.word	0x001c0015
 8016784:	000f000a 	.word	0x000f000a
 8016788:	00060003 	.word	0x00060003
 801678c:	0024002a 	.word	0x0024002a
 8016790:	002e0030 	.word	0x002e0030
 8016794:	00030006 	.word	0x00030006
 8016798:	000a000f 	.word	0x000a000f
 801679c:	0015001c 	.word	0x0015001c
 80167a0:	20000484 	.word	0x20000484

080167a4 <D80_GENERIC>:
 80167a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80167a8:	b08b      	sub	sp, #44	; 0x2c
 80167aa:	6914      	ldr	r4, [r2, #16]
 80167ac:	9404      	str	r4, [sp, #16]
 80167ae:	6954      	ldr	r4, [r2, #20]
 80167b0:	9405      	str	r4, [sp, #20]
 80167b2:	6994      	ldr	r4, [r2, #24]
 80167b4:	9409      	str	r4, [sp, #36]	; 0x24
 80167b6:	6894      	ldr	r4, [r2, #8]
 80167b8:	9402      	str	r4, [sp, #8]
 80167ba:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 80167bc:	68d4      	ldr	r4, [r2, #12]
 80167be:	9401      	str	r4, [sp, #4]
 80167c0:	6b14      	ldr	r4, [r2, #48]	; 0x30
 80167c2:	f8d2 b01c 	ldr.w	fp, [r2, #28]
 80167c6:	9406      	str	r4, [sp, #24]
 80167c8:	9107      	str	r1, [sp, #28]
 80167ca:	2b00      	cmp	r3, #0
 80167cc:	f000 810f 	beq.w	80169ee <D80_GENERIC+0x24a>
 80167d0:	6a13      	ldr	r3, [r2, #32]
 80167d2:	9308      	str	r3, [sp, #32]
 80167d4:	2300      	movs	r3, #0
 80167d6:	9200      	str	r2, [sp, #0]
 80167d8:	f8df 9264 	ldr.w	r9, [pc, #612]	; 8016a40 <D80_GENERIC+0x29c>
 80167dc:	f8cd b00c 	str.w	fp, [sp, #12]
 80167e0:	461a      	mov	r2, r3
 80167e2:	e0ed      	b.n	80169c0 <D80_GENERIC+0x21c>
 80167e4:	fa5f fc8c 	uxtb.w	ip, ip
 80167e8:	fa0f f48c 	sxth.w	r4, ip
 80167ec:	0066      	lsls	r6, r4, #1
 80167ee:	eb06 0804 	add.w	r8, r6, r4
 80167f2:	f1cc 0500 	rsb	r5, ip, #0
 80167f6:	eb00 0108 	add.w	r1, r0, r8
 80167fa:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 80167fe:	194b      	adds	r3, r1, r5
 8016800:	5d49      	ldrb	r1, [r1, r5]
 8016802:	f810 a008 	ldrb.w	sl, [r0, r8]
 8016806:	f813 b004 	ldrb.w	fp, [r3, r4]
 801680a:	f810 c00c 	ldrb.w	ip, [r0, ip]
 801680e:	f890 8000 	ldrb.w	r8, [r0]
 8016812:	eb03 0e04 	add.w	lr, r3, r4
 8016816:	eb0e 0705 	add.w	r7, lr, r5
 801681a:	0409      	lsls	r1, r1, #16
 801681c:	f81e 3005 	ldrb.w	r3, [lr, r5]
 8016820:	f81e e015 	ldrb.w	lr, [lr, r5, lsl #1]
 8016824:	eb01 610a 	add.w	r1, r1, sl, lsl #24
 8016828:	eb07 0a45 	add.w	sl, r7, r5, lsl #1
 801682c:	eb0a 0004 	add.w	r0, sl, r4
 8016830:	041b      	lsls	r3, r3, #16
 8016832:	f81a a004 	ldrb.w	sl, [sl, r4]
 8016836:	f817 7015 	ldrb.w	r7, [r7, r5, lsl #1]
 801683a:	5d44      	ldrb	r4, [r0, r5]
 801683c:	eb03 630b 	add.w	r3, r3, fp, lsl #24
 8016840:	eb01 210c 	add.w	r1, r1, ip, lsl #8
 8016844:	4428      	add	r0, r5
 8016846:	eb03 230e 	add.w	r3, r3, lr, lsl #8
 801684a:	4441      	add	r1, r8
 801684c:	4430      	add	r0, r6
 801684e:	eb04 240a 	add.w	r4, r4, sl, lsl #8
 8016852:	441f      	add	r7, r3
 8016854:	b2cd      	uxtb	r5, r1
 8016856:	f3c1 2307 	ubfx	r3, r1, #8, #8
 801685a:	f859 6025 	ldr.w	r6, [r9, r5, lsl #2]
 801685e:	f859 e023 	ldr.w	lr, [r9, r3, lsl #2]
 8016862:	9b03      	ldr	r3, [sp, #12]
 8016864:	f3c1 4507 	ubfx	r5, r1, #16, #8
 8016868:	0e09      	lsrs	r1, r1, #24
 801686a:	4433      	add	r3, r6
 801686c:	f859 8025 	ldr.w	r8, [r9, r5, lsl #2]
 8016870:	f859 6021 	ldr.w	r6, [r9, r1, lsl #2]
 8016874:	b2fd      	uxtb	r5, r7
 8016876:	eb0e 2193 	add.w	r1, lr, r3, lsr #10
 801687a:	469b      	mov	fp, r3
 801687c:	f3c7 2307 	ubfx	r3, r7, #8, #8
 8016880:	eb08 2891 	add.w	r8, r8, r1, lsr #10
 8016884:	f859 c025 	ldr.w	ip, [r9, r5, lsl #2]
 8016888:	f859 5023 	ldr.w	r5, [r9, r3, lsl #2]
 801688c:	f3c7 4e07 	ubfx	lr, r7, #16, #8
 8016890:	eb06 2698 	add.w	r6, r6, r8, lsr #10
 8016894:	0e3b      	lsrs	r3, r7, #24
 8016896:	eb0c 2c96 	add.w	ip, ip, r6, lsr #10
 801689a:	f859 702e 	ldr.w	r7, [r9, lr, lsl #2]
 801689e:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80168a2:	fa5f fe84 	uxtb.w	lr, r4
 80168a6:	eb05 259c 	add.w	r5, r5, ip, lsr #10
 80168aa:	f3c4 2407 	ubfx	r4, r4, #8, #8
 80168ae:	eb07 2795 	add.w	r7, r7, r5, lsr #10
 80168b2:	f859 e02e 	ldr.w	lr, [r9, lr, lsl #2]
 80168b6:	f859 4024 	ldr.w	r4, [r9, r4, lsl #2]
 80168ba:	eb03 2397 	add.w	r3, r3, r7, lsr #10
 80168be:	eb0e 2e93 	add.w	lr, lr, r3, lsr #10
 80168c2:	eb04 249e 	add.w	r4, r4, lr, lsr #10
 80168c6:	f3c1 0109 	ubfx	r1, r1, #0, #10
 80168ca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80168ce:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 80168d2:	f3c7 0709 	ubfx	r7, r7, #0, #10
 80168d6:	f3c6 0609 	ubfx	r6, r6, #0, #10
 80168da:	f3c5 0509 	ubfx	r5, r5, #0, #10
 80168de:	ea41 4b0b 	orr.w	fp, r1, fp, lsl #16
 80168e2:	ea43 4707 	orr.w	r7, r3, r7, lsl #16
 80168e6:	f3c4 0109 	ubfx	r1, r4, #0, #10
 80168ea:	0aa3      	lsrs	r3, r4, #10
 80168ec:	f3c8 0809 	ubfx	r8, r8, #0, #10
 80168f0:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 80168f4:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 80168f8:	ea41 4e0e 	orr.w	lr, r1, lr, lsl #16
 80168fc:	9303      	str	r3, [sp, #12]
 80168fe:	ea46 4808 	orr.w	r8, r6, r8, lsl #16
 8016902:	ea45 4c0c 	orr.w	ip, r5, ip, lsl #16
 8016906:	4b42      	ldr	r3, [pc, #264]	; (8016a10 <D80_GENERIC+0x26c>)
 8016908:	9901      	ldr	r1, [sp, #4]
 801690a:	fb2b 1303 	smlad	r3, fp, r3, r1
 801690e:	4941      	ldr	r1, [pc, #260]	; (8016a14 <D80_GENERIC+0x270>)
 8016910:	fb28 3301 	smlad	r3, r8, r1, r3
 8016914:	4940      	ldr	r1, [pc, #256]	; (8016a18 <D80_GENERIC+0x274>)
 8016916:	fb2c 3301 	smlad	r3, ip, r1, r3
 801691a:	4940      	ldr	r1, [pc, #256]	; (8016a1c <D80_GENERIC+0x278>)
 801691c:	fb27 3301 	smlad	r3, r7, r1, r3
 8016920:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8016924:	fb2e 3301 	smlad	r3, lr, r1, r3
 8016928:	493d      	ldr	r1, [pc, #244]	; (8016a20 <D80_GENERIC+0x27c>)
 801692a:	9c02      	ldr	r4, [sp, #8]
 801692c:	fb2b 4401 	smlad	r4, fp, r1, r4
 8016930:	493c      	ldr	r1, [pc, #240]	; (8016a24 <D80_GENERIC+0x280>)
 8016932:	fb28 4401 	smlad	r4, r8, r1, r4
 8016936:	f04f 114b 	mov.w	r1, #4915275	; 0x4b004b
 801693a:	fb2c 4101 	smlad	r1, ip, r1, r4
 801693e:	4c3a      	ldr	r4, [pc, #232]	; (8016a28 <D80_GENERIC+0x284>)
 8016940:	fb27 1104 	smlad	r1, r7, r4, r1
 8016944:	4c39      	ldr	r4, [pc, #228]	; (8016a2c <D80_GENERIC+0x288>)
 8016946:	fb2e 1104 	smlad	r1, lr, r4, r1
 801694a:	9101      	str	r1, [sp, #4]
 801694c:	2101      	movs	r1, #1
 801694e:	fb2b fb01 	smuad	fp, fp, r1
 8016952:	4937      	ldr	r1, [pc, #220]	; (8016a30 <D80_GENERIC+0x28c>)
 8016954:	fb28 b801 	smlad	r8, r8, r1, fp
 8016958:	4d36      	ldr	r5, [pc, #216]	; (8016a34 <D80_GENERIC+0x290>)
 801695a:	fb2c 8c05 	smlad	ip, ip, r5, r8
 801695e:	4d36      	ldr	r5, [pc, #216]	; (8016a38 <D80_GENERIC+0x294>)
 8016960:	fb27 c705 	smlad	r7, r7, r5, ip
 8016964:	4d35      	ldr	r5, [pc, #212]	; (8016a3c <D80_GENERIC+0x298>)
 8016966:	fb2e 7105 	smlad	r1, lr, r5, r7
 801696a:	9102      	str	r1, [sp, #8]
 801696c:	9908      	ldr	r1, [sp, #32]
 801696e:	f5a3 337a 	sub.w	r3, r3, #256000	; 0x3e800
 8016972:	b181      	cbz	r1, 8016996 <D80_GENERIC+0x1f2>
 8016974:	9c04      	ldr	r4, [sp, #16]
 8016976:	9d05      	ldr	r5, [sp, #20]
 8016978:	9305      	str	r3, [sp, #20]
 801697a:	441c      	add	r4, r3
 801697c:	1b64      	subs	r4, r4, r5
 801697e:	17e7      	asrs	r7, r4, #31
 8016980:	fba4 4501 	umull	r4, r5, r4, r1
 8016984:	fb01 5507 	mla	r5, r1, r7, r5
 8016988:	f114 4400 	adds.w	r4, r4, #2147483648	; 0x80000000
 801698c:	f145 0500 	adc.w	r5, r5, #0
 8016990:	0069      	lsls	r1, r5, #1
 8016992:	9104      	str	r1, [sp, #16]
 8016994:	460b      	mov	r3, r1
 8016996:	9e00      	ldr	r6, [sp, #0]
 8016998:	9f06      	ldr	r7, [sp, #24]
 801699a:	8d31      	ldrh	r1, [r6, #40]	; 0x28
 801699c:	025b      	lsls	r3, r3, #9
 801699e:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 80169a2:	2500      	movs	r5, #0
 80169a4:	fb02 f101 	mul.w	r1, r2, r1
 80169a8:	fbc7 4503 	smlal	r4, r5, r7, r3
 80169ac:	9c07      	ldr	r4, [sp, #28]
 80169ae:	10ab      	asrs	r3, r5, #2
 80169b0:	f303 030f 	ssat	r3, #16, r3
 80169b4:	f824 3011 	strh.w	r3, [r4, r1, lsl #1]
 80169b8:	8cf3      	ldrh	r3, [r6, #38]	; 0x26
 80169ba:	3201      	adds	r2, #1
 80169bc:	4293      	cmp	r3, r2
 80169be:	dd13      	ble.n	80169e8 <D80_GENERIC+0x244>
 80169c0:	9b00      	ldr	r3, [sp, #0]
 80169c2:	f8b3 c02a 	ldrh.w	ip, [r3, #42]	; 0x2a
 80169c6:	f1bc 0f01 	cmp.w	ip, #1
 80169ca:	f47f af0b 	bne.w	80167e4 <D80_GENERIC+0x40>
 80169ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80169d0:	6884      	ldr	r4, [r0, #8]
 80169d2:	069b      	lsls	r3, r3, #26
 80169d4:	e890 0082 	ldmia.w	r0, {r1, r7}
 80169d8:	f100 000a 	add.w	r0, r0, #10
 80169dc:	f57f af3a 	bpl.w	8016854 <D80_GENERIC+0xb0>
 80169e0:	ba49      	rev16	r1, r1
 80169e2:	ba7f      	rev16	r7, r7
 80169e4:	ba64      	rev16	r4, r4
 80169e6:	e735      	b.n	8016854 <D80_GENERIC+0xb0>
 80169e8:	f8dd b00c 	ldr.w	fp, [sp, #12]
 80169ec:	4632      	mov	r2, r6
 80169ee:	9b02      	ldr	r3, [sp, #8]
 80169f0:	6093      	str	r3, [r2, #8]
 80169f2:	9b01      	ldr	r3, [sp, #4]
 80169f4:	60d3      	str	r3, [r2, #12]
 80169f6:	9b04      	ldr	r3, [sp, #16]
 80169f8:	6113      	str	r3, [r2, #16]
 80169fa:	9b05      	ldr	r3, [sp, #20]
 80169fc:	6153      	str	r3, [r2, #20]
 80169fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016a00:	f8c2 b01c 	str.w	fp, [r2, #28]
 8016a04:	2000      	movs	r0, #0
 8016a06:	6193      	str	r3, [r2, #24]
 8016a08:	b00b      	add	sp, #44	; 0x2c
 8016a0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016a0e:	bf00      	nop
 8016a10:	002d0024 	.word	0x002d0024
 8016a14:	001c0015 	.word	0x001c0015
 8016a18:	000f000a 	.word	0x000f000a
 8016a1c:	00060003 	.word	0x00060003
 8016a20:	0037003f 	.word	0x0037003f
 8016a24:	00450049 	.word	0x00450049
 8016a28:	00490045 	.word	0x00490045
 8016a2c:	003f0037 	.word	0x003f0037
 8016a30:	00030006 	.word	0x00030006
 8016a34:	000a000f 	.word	0x000a000f
 8016a38:	0015001c 	.word	0x0015001c
 8016a3c:	0024002d 	.word	0x0024002d
 8016a40:	20000484 	.word	0x20000484

08016a44 <D128_GENERIC>:
 8016a44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016a48:	b093      	sub	sp, #76	; 0x4c
 8016a4a:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 8016a4c:	9005      	str	r0, [sp, #20]
 8016a4e:	4610      	mov	r0, r2
 8016a50:	9201      	str	r2, [sp, #4]
 8016a52:	6912      	ldr	r2, [r2, #16]
 8016a54:	920c      	str	r2, [sp, #48]	; 0x30
 8016a56:	4602      	mov	r2, r0
 8016a58:	6940      	ldr	r0, [r0, #20]
 8016a5a:	900d      	str	r0, [sp, #52]	; 0x34
 8016a5c:	4610      	mov	r0, r2
 8016a5e:	4614      	mov	r4, r2
 8016a60:	6992      	ldr	r2, [r2, #24]
 8016a62:	9211      	str	r2, [sp, #68]	; 0x44
 8016a64:	69c2      	ldr	r2, [r0, #28]
 8016a66:	9202      	str	r2, [sp, #8]
 8016a68:	68e2      	ldr	r2, [r4, #12]
 8016a6a:	6880      	ldr	r0, [r0, #8]
 8016a6c:	9203      	str	r2, [sp, #12]
 8016a6e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8016a70:	9004      	str	r0, [sp, #16]
 8016a72:	920e      	str	r2, [sp, #56]	; 0x38
 8016a74:	910f      	str	r1, [sp, #60]	; 0x3c
 8016a76:	2b00      	cmp	r3, #0
 8016a78:	f000 819b 	beq.w	8016db2 <D128_GENERIC+0x36e>
 8016a7c:	6a23      	ldr	r3, [r4, #32]
 8016a7e:	9310      	str	r3, [sp, #64]	; 0x40
 8016a80:	2300      	movs	r3, #0
 8016a82:	f8df 93a8 	ldr.w	r9, [pc, #936]	; 8016e2c <D128_GENERIC+0x3e8>
 8016a86:	9306      	str	r3, [sp, #24]
 8016a88:	e17a      	b.n	8016d80 <D128_GENERIC+0x33c>
 8016a8a:	b2d2      	uxtb	r2, r2
 8016a8c:	9d05      	ldr	r5, [sp, #20]
 8016a8e:	b214      	sxth	r4, r2
 8016a90:	eb04 0a44 	add.w	sl, r4, r4, lsl #1
 8016a94:	4250      	negs	r0, r2
 8016a96:	eb05 010a 	add.w	r1, r5, sl
 8016a9a:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8016a9e:	eb01 0800 	add.w	r8, r1, r0
 8016aa2:	eb0b 0c04 	add.w	ip, fp, r4
 8016aa6:	eb08 070c 	add.w	r7, r8, ip
 8016aaa:	183b      	adds	r3, r7, r0
 8016aac:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
 8016ab0:	eb03 0e40 	add.w	lr, r3, r0, lsl #1
 8016ab4:	eb0e 0604 	add.w	r6, lr, r4
 8016ab8:	9307      	str	r3, [sp, #28]
 8016aba:	1833      	adds	r3, r6, r0
 8016abc:	9305      	str	r3, [sp, #20]
 8016abe:	462b      	mov	r3, r5
 8016ac0:	f815 a00a 	ldrb.w	sl, [r5, sl]
 8016ac4:	f8cd a020 	str.w	sl, [sp, #32]
 8016ac8:	f818 a00c 	ldrb.w	sl, [r8, ip]
 8016acc:	f813 c002 	ldrb.w	ip, [r3, r2]
 8016ad0:	f81e 8004 	ldrb.w	r8, [lr, r4]
 8016ad4:	5c3a      	ldrb	r2, [r7, r0]
 8016ad6:	f817 e010 	ldrb.w	lr, [r7, r0, lsl #1]
 8016ada:	781f      	ldrb	r7, [r3, #0]
 8016adc:	9b07      	ldr	r3, [sp, #28]
 8016ade:	9d05      	ldr	r5, [sp, #20]
 8016ae0:	f813 3010 	ldrb.w	r3, [r3, r0, lsl #1]
 8016ae4:	5c09      	ldrb	r1, [r1, r0]
 8016ae6:	9709      	str	r7, [sp, #36]	; 0x24
 8016ae8:	9307      	str	r3, [sp, #28]
 8016aea:	f816 7010 	ldrb.w	r7, [r6, r0, lsl #1]
 8016aee:	5c33      	ldrb	r3, [r6, r0]
 8016af0:	0412      	lsls	r2, r2, #16
 8016af2:	eb05 0640 	add.w	r6, r5, r0, lsl #1
 8016af6:	eb02 620a 	add.w	r2, r2, sl, lsl #24
 8016afa:	9d08      	ldr	r5, [sp, #32]
 8016afc:	eb06 0a04 	add.w	sl, r6, r4
 8016b00:	0409      	lsls	r1, r1, #16
 8016b02:	eb01 6105 	add.w	r1, r1, r5, lsl #24
 8016b06:	f81a 5000 	ldrb.w	r5, [sl, r0]
 8016b0a:	5d36      	ldrb	r6, [r6, r4]
 8016b0c:	9c05      	ldr	r4, [sp, #20]
 8016b0e:	042d      	lsls	r5, r5, #16
 8016b10:	eb05 6606 	add.w	r6, r5, r6, lsl #24
 8016b14:	eb01 210c 	add.w	r1, r1, ip, lsl #8
 8016b18:	f81a 5010 	ldrb.w	r5, [sl, r0, lsl #1]
 8016b1c:	f814 4010 	ldrb.w	r4, [r4, r0, lsl #1]
 8016b20:	eb0a 0c00 	add.w	ip, sl, r0
 8016b24:	041b      	lsls	r3, r3, #16
 8016b26:	eb03 6308 	add.w	r3, r3, r8, lsl #24
 8016b2a:	eb06 2605 	add.w	r6, r6, r5, lsl #8
 8016b2e:	f81c a010 	ldrb.w	sl, [ip, r0, lsl #1]
 8016b32:	9d07      	ldr	r5, [sp, #28]
 8016b34:	eb03 2307 	add.w	r3, r3, r7, lsl #8
 8016b38:	eb0c 0040 	add.w	r0, ip, r0, lsl #1
 8016b3c:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8016b3e:	4458      	add	r0, fp
 8016b40:	eb02 220e 	add.w	r2, r2, lr, lsl #8
 8016b44:	9005      	str	r0, [sp, #20]
 8016b46:	4439      	add	r1, r7
 8016b48:	442a      	add	r2, r5
 8016b4a:	44b2      	add	sl, r6
 8016b4c:	1918      	adds	r0, r3, r4
 8016b4e:	b2cb      	uxtb	r3, r1
 8016b50:	f3c1 2407 	ubfx	r4, r1, #8, #8
 8016b54:	9e02      	ldr	r6, [sp, #8]
 8016b56:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8016b5a:	f859 5024 	ldr.w	r5, [r9, r4, lsl #2]
 8016b5e:	f3c1 4407 	ubfx	r4, r1, #16, #8
 8016b62:	441e      	add	r6, r3
 8016b64:	0e09      	lsrs	r1, r1, #24
 8016b66:	4633      	mov	r3, r6
 8016b68:	f859 6024 	ldr.w	r6, [r9, r4, lsl #2]
 8016b6c:	f859 7021 	ldr.w	r7, [r9, r1, lsl #2]
 8016b70:	b2d4      	uxtb	r4, r2
 8016b72:	eb05 2593 	add.w	r5, r5, r3, lsr #10
 8016b76:	f3c2 2107 	ubfx	r1, r2, #8, #8
 8016b7a:	eb06 2b95 	add.w	fp, r6, r5, lsr #10
 8016b7e:	f859 6024 	ldr.w	r6, [r9, r4, lsl #2]
 8016b82:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8016b86:	f3c2 4407 	ubfx	r4, r2, #16, #8
 8016b8a:	0e12      	lsrs	r2, r2, #24
 8016b8c:	eb07 279b 	add.w	r7, r7, fp, lsr #10
 8016b90:	eb06 2897 	add.w	r8, r6, r7, lsr #10
 8016b94:	f859 6024 	ldr.w	r6, [r9, r4, lsl #2]
 8016b98:	f859 4022 	ldr.w	r4, [r9, r2, lsl #2]
 8016b9c:	9702      	str	r7, [sp, #8]
 8016b9e:	b2c2      	uxtb	r2, r0
 8016ba0:	eb01 2198 	add.w	r1, r1, r8, lsr #10
 8016ba4:	eb06 2c91 	add.w	ip, r6, r1, lsr #10
 8016ba8:	f859 6022 	ldr.w	r6, [r9, r2, lsl #2]
 8016bac:	eb04 249c 	add.w	r4, r4, ip, lsr #10
 8016bb0:	f3c0 2207 	ubfx	r2, r0, #8, #8
 8016bb4:	eb06 2e94 	add.w	lr, r6, r4, lsr #10
 8016bb8:	f3c0 4607 	ubfx	r6, r0, #16, #8
 8016bbc:	f859 2022 	ldr.w	r2, [r9, r2, lsl #2]
 8016bc0:	f859 7026 	ldr.w	r7, [r9, r6, lsl #2]
 8016bc4:	0e00      	lsrs	r0, r0, #24
 8016bc6:	fa5f f68a 	uxtb.w	r6, sl
 8016bca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8016bce:	9309      	str	r3, [sp, #36]	; 0x24
 8016bd0:	f859 0020 	ldr.w	r0, [r9, r0, lsl #2]
 8016bd4:	f859 6026 	ldr.w	r6, [r9, r6, lsl #2]
 8016bd8:	eb02 229e 	add.w	r2, r2, lr, lsr #10
 8016bdc:	f3ca 2307 	ubfx	r3, sl, #8, #8
 8016be0:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8016be4:	950a      	str	r5, [sp, #40]	; 0x28
 8016be6:	eb07 2792 	add.w	r7, r7, r2, lsr #10
 8016bea:	f3ca 4507 	ubfx	r5, sl, #16, #8
 8016bee:	eb00 2097 	add.w	r0, r0, r7, lsr #10
 8016bf2:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8016bf6:	f859 5025 	ldr.w	r5, [r9, r5, lsl #2]
 8016bfa:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8016bfe:	920b      	str	r2, [sp, #44]	; 0x2c
 8016c00:	eb06 2690 	add.w	r6, r6, r0, lsr #10
 8016c04:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016c06:	eb03 2396 	add.w	r3, r3, r6, lsr #10
 8016c0a:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8016c0e:	9307      	str	r3, [sp, #28]
 8016c10:	eb05 2593 	add.w	r5, r5, r3, lsr #10
 8016c14:	ea4f 6a1a 	mov.w	sl, sl, lsr #24
 8016c18:	9b02      	ldr	r3, [sp, #8]
 8016c1a:	f8cd c008 	str.w	ip, [sp, #8]
 8016c1e:	4694      	mov	ip, r2
 8016c20:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016c22:	f859 a02a 	ldr.w	sl, [r9, sl, lsl #2]
 8016c26:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8016c2a:	9a02      	ldr	r2, [sp, #8]
 8016c2c:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8016c30:	eb0a 2a95 	add.w	sl, sl, r5, lsr #10
 8016c34:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8016c38:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8016c3a:	f8cd a020 	str.w	sl, [sp, #32]
 8016c3e:	f3c8 0809 	ubfx	r8, r8, #0, #10
 8016c42:	f3c3 0a09 	ubfx	sl, r3, #0, #10
 8016c46:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8016c4a:	9b07      	ldr	r3, [sp, #28]
 8016c4c:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8016c50:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 8016c54:	ea42 480e 	orr.w	r8, r2, lr, lsl #16
 8016c58:	9a08      	ldr	r2, [sp, #32]
 8016c5a:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8016c5e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8016c62:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 8016c66:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8016c6a:	f3c2 0e09 	ubfx	lr, r2, #0, #10
 8016c6e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8016c72:	f3c0 0009 	ubfx	r0, r0, #0, #10
 8016c76:	0a96      	lsrs	r6, r2, #10
 8016c78:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8016c7c:	9602      	str	r6, [sp, #8]
 8016c7e:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8016c82:	ea4a 4a0b 	orr.w	sl, sl, fp, lsl #16
 8016c86:	ea4e 4505 	orr.w	r5, lr, r5, lsl #16
 8016c8a:	4e53      	ldr	r6, [pc, #332]	; (8016dd8 <D128_GENERIC+0x394>)
 8016c8c:	9f03      	ldr	r7, [sp, #12]
 8016c8e:	fb2c 7606 	smlad	r6, ip, r6, r7
 8016c92:	4f52      	ldr	r7, [pc, #328]	; (8016ddc <D128_GENERIC+0x398>)
 8016c94:	fb2a 6607 	smlad	r6, sl, r7, r6
 8016c98:	4f51      	ldr	r7, [pc, #324]	; (8016de0 <D128_GENERIC+0x39c>)
 8016c9a:	fb21 6607 	smlad	r6, r1, r7, r6
 8016c9e:	4f51      	ldr	r7, [pc, #324]	; (8016de4 <D128_GENERIC+0x3a0>)
 8016ca0:	fb24 6607 	smlad	r6, r4, r7, r6
 8016ca4:	4f50      	ldr	r7, [pc, #320]	; (8016de8 <D128_GENERIC+0x3a4>)
 8016ca6:	fb28 6607 	smlad	r6, r8, r7, r6
 8016caa:	4f50      	ldr	r7, [pc, #320]	; (8016dec <D128_GENERIC+0x3a8>)
 8016cac:	fb20 6607 	smlad	r6, r0, r7, r6
 8016cb0:	4f4f      	ldr	r7, [pc, #316]	; (8016df0 <D128_GENERIC+0x3ac>)
 8016cb2:	fb23 6607 	smlad	r6, r3, r7, r6
 8016cb6:	f44f 3780 	mov.w	r7, #65536	; 0x10000
 8016cba:	fb25 6607 	smlad	r6, r5, r7, r6
 8016cbe:	4f4d      	ldr	r7, [pc, #308]	; (8016df4 <D128_GENERIC+0x3b0>)
 8016cc0:	9a04      	ldr	r2, [sp, #16]
 8016cc2:	fb2c 2e07 	smlad	lr, ip, r7, r2
 8016cc6:	4a4c      	ldr	r2, [pc, #304]	; (8016df8 <D128_GENERIC+0x3b4>)
 8016cc8:	fb2a ee02 	smlad	lr, sl, r2, lr
 8016ccc:	4f4b      	ldr	r7, [pc, #300]	; (8016dfc <D128_GENERIC+0x3b8>)
 8016cce:	fb21 ee07 	smlad	lr, r1, r7, lr
 8016cd2:	4f4b      	ldr	r7, [pc, #300]	; (8016e00 <D128_GENERIC+0x3bc>)
 8016cd4:	fb24 ee07 	smlad	lr, r4, r7, lr
 8016cd8:	4f4a      	ldr	r7, [pc, #296]	; (8016e04 <D128_GENERIC+0x3c0>)
 8016cda:	fb28 ee07 	smlad	lr, r8, r7, lr
 8016cde:	4f4a      	ldr	r7, [pc, #296]	; (8016e08 <D128_GENERIC+0x3c4>)
 8016ce0:	fb20 ee07 	smlad	lr, r0, r7, lr
 8016ce4:	4f49      	ldr	r7, [pc, #292]	; (8016e0c <D128_GENERIC+0x3c8>)
 8016ce6:	fb23 e707 	smlad	r7, r3, r7, lr
 8016cea:	f8df e144 	ldr.w	lr, [pc, #324]	; 8016e30 <D128_GENERIC+0x3ec>
 8016cee:	fb25 720e 	smlad	r2, r5, lr, r7
 8016cf2:	f04f 0b01 	mov.w	fp, #1
 8016cf6:	9203      	str	r2, [sp, #12]
 8016cf8:	fb2c fb0b 	smuad	fp, ip, fp
 8016cfc:	4f44      	ldr	r7, [pc, #272]	; (8016e10 <D128_GENERIC+0x3cc>)
 8016cfe:	fb2a ba07 	smlad	sl, sl, r7, fp
 8016d02:	4f44      	ldr	r7, [pc, #272]	; (8016e14 <D128_GENERIC+0x3d0>)
 8016d04:	fb21 aa07 	smlad	sl, r1, r7, sl
 8016d08:	4f43      	ldr	r7, [pc, #268]	; (8016e18 <D128_GENERIC+0x3d4>)
 8016d0a:	fb24 aa07 	smlad	sl, r4, r7, sl
 8016d0e:	4f43      	ldr	r7, [pc, #268]	; (8016e1c <D128_GENERIC+0x3d8>)
 8016d10:	fb28 a707 	smlad	r7, r8, r7, sl
 8016d14:	4a42      	ldr	r2, [pc, #264]	; (8016e20 <D128_GENERIC+0x3dc>)
 8016d16:	fb20 7702 	smlad	r7, r0, r2, r7
 8016d1a:	4a42      	ldr	r2, [pc, #264]	; (8016e24 <D128_GENERIC+0x3e0>)
 8016d1c:	fb23 7702 	smlad	r7, r3, r2, r7
 8016d20:	4b41      	ldr	r3, [pc, #260]	; (8016e28 <D128_GENERIC+0x3e4>)
 8016d22:	fb25 7303 	smlad	r3, r5, r3, r7
 8016d26:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8016d28:	9304      	str	r3, [sp, #16]
 8016d2a:	f5a6 1680 	sub.w	r6, r6, #1048576	; 0x100000
 8016d2e:	b185      	cbz	r5, 8016d52 <D128_GENERIC+0x30e>
 8016d30:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8016d32:	990d      	ldr	r1, [sp, #52]	; 0x34
 8016d34:	960d      	str	r6, [sp, #52]	; 0x34
 8016d36:	4432      	add	r2, r6
 8016d38:	1a52      	subs	r2, r2, r1
 8016d3a:	17d1      	asrs	r1, r2, #31
 8016d3c:	fba2 2305 	umull	r2, r3, r2, r5
 8016d40:	fb05 3301 	mla	r3, r5, r1, r3
 8016d44:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 8016d48:	f143 0300 	adc.w	r3, r3, #0
 8016d4c:	005b      	lsls	r3, r3, #1
 8016d4e:	930c      	str	r3, [sp, #48]	; 0x30
 8016d50:	461e      	mov	r6, r3
 8016d52:	9801      	ldr	r0, [sp, #4]
 8016d54:	9c06      	ldr	r4, [sp, #24]
 8016d56:	8d01      	ldrh	r1, [r0, #40]	; 0x28
 8016d58:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8016d5a:	01f6      	lsls	r6, r6, #7
 8016d5c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8016d60:	2300      	movs	r3, #0
 8016d62:	fbc5 2306 	smlal	r2, r3, r5, r6
 8016d66:	fb04 f101 	mul.w	r1, r4, r1
 8016d6a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8016d6c:	109b      	asrs	r3, r3, #2
 8016d6e:	f303 030f 	ssat	r3, #16, r3
 8016d72:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
 8016d76:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
 8016d78:	1c62      	adds	r2, r4, #1
 8016d7a:	4293      	cmp	r3, r2
 8016d7c:	9206      	str	r2, [sp, #24]
 8016d7e:	dd18      	ble.n	8016db2 <D128_GENERIC+0x36e>
 8016d80:	9b01      	ldr	r3, [sp, #4]
 8016d82:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8016d84:	2a01      	cmp	r2, #1
 8016d86:	f47f ae80 	bne.w	8016a8a <D128_GENERIC+0x46>
 8016d8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016d8c:	9d05      	ldr	r5, [sp, #20]
 8016d8e:	069b      	lsls	r3, r3, #26
 8016d90:	6829      	ldr	r1, [r5, #0]
 8016d92:	686a      	ldr	r2, [r5, #4]
 8016d94:	68a8      	ldr	r0, [r5, #8]
 8016d96:	f8d5 a00c 	ldr.w	sl, [r5, #12]
 8016d9a:	f105 0410 	add.w	r4, r5, #16
 8016d9e:	d506      	bpl.n	8016dae <D128_GENERIC+0x36a>
 8016da0:	ba49      	rev16	r1, r1
 8016da2:	ba52      	rev16	r2, r2
 8016da4:	ba40      	rev16	r0, r0
 8016da6:	fa9a fa9a 	rev16.w	sl, sl
 8016daa:	9405      	str	r4, [sp, #20]
 8016dac:	e6cf      	b.n	8016b4e <D128_GENERIC+0x10a>
 8016dae:	9405      	str	r4, [sp, #20]
 8016db0:	e6cd      	b.n	8016b4e <D128_GENERIC+0x10a>
 8016db2:	9a01      	ldr	r2, [sp, #4]
 8016db4:	9904      	ldr	r1, [sp, #16]
 8016db6:	6091      	str	r1, [r2, #8]
 8016db8:	9903      	ldr	r1, [sp, #12]
 8016dba:	60d1      	str	r1, [r2, #12]
 8016dbc:	9b02      	ldr	r3, [sp, #8]
 8016dbe:	61d3      	str	r3, [r2, #28]
 8016dc0:	4611      	mov	r1, r2
 8016dc2:	4613      	mov	r3, r2
 8016dc4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8016dc6:	610a      	str	r2, [r1, #16]
 8016dc8:	990d      	ldr	r1, [sp, #52]	; 0x34
 8016dca:	6159      	str	r1, [r3, #20]
 8016dcc:	9911      	ldr	r1, [sp, #68]	; 0x44
 8016dce:	6199      	str	r1, [r3, #24]
 8016dd0:	2000      	movs	r0, #0
 8016dd2:	b013      	add	sp, #76	; 0x4c
 8016dd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016dd8:	00780069 	.word	0x00780069
 8016ddc:	005b004e 	.word	0x005b004e
 8016de0:	00420037 	.word	0x00420037
 8016de4:	002d0024 	.word	0x002d0024
 8016de8:	001c0015 	.word	0x001c0015
 8016dec:	000f000a 	.word	0x000f000a
 8016df0:	00060003 	.word	0x00060003
 8016df4:	00880096 	.word	0x00880096
 8016df8:	00a200ac 	.word	0x00a200ac
 8016dfc:	00b400ba 	.word	0x00b400ba
 8016e00:	00be00c0 	.word	0x00be00c0
 8016e04:	00c000be 	.word	0x00c000be
 8016e08:	00ba00b4 	.word	0x00ba00b4
 8016e0c:	00ac00a2 	.word	0x00ac00a2
 8016e10:	00030006 	.word	0x00030006
 8016e14:	000a000f 	.word	0x000a000f
 8016e18:	0015001c 	.word	0x0015001c
 8016e1c:	0024002d 	.word	0x0024002d
 8016e20:	00370042 	.word	0x00370042
 8016e24:	004e005b 	.word	0x004e005b
 8016e28:	00690078 	.word	0x00690078
 8016e2c:	20000484 	.word	0x20000484
 8016e30:	00960088 	.word	0x00960088

08016e34 <D16_1CH_HTONS_VOL_HP>:
 8016e34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016e38:	4691      	mov	r9, r2
 8016e3a:	b083      	sub	sp, #12
 8016e3c:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 8016e3e:	f8d9 3018 	ldr.w	r3, [r9, #24]
 8016e42:	f8d9 400c 	ldr.w	r4, [r9, #12]
 8016e46:	9300      	str	r3, [sp, #0]
 8016e48:	4680      	mov	r8, r0
 8016e4a:	f8d9 7014 	ldr.w	r7, [r9, #20]
 8016e4e:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8016e52:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8016e56:	f8d9 5008 	ldr.w	r5, [r9, #8]
 8016e5a:	9401      	str	r4, [sp, #4]
 8016e5c:	f8d9 a030 	ldr.w	sl, [r9, #48]	; 0x30
 8016e60:	f8d9 e020 	ldr.w	lr, [r9, #32]
 8016e64:	2a00      	cmp	r2, #0
 8016e66:	d04e      	beq.n	8016f06 <D16_1CH_HTONS_VOL_HP+0xd2>
 8016e68:	f8df c0a8 	ldr.w	ip, [pc, #168]	; 8016f14 <D16_1CH_HTONS_VOL_HP+0xe0>
 8016e6c:	1e8c      	subs	r4, r1, #2
 8016e6e:	eb08 0b42 	add.w	fp, r8, r2, lsl #1
 8016e72:	f858 2b02 	ldr.w	r2, [r8], #2
 8016e76:	ba52      	rev16	r2, r2
 8016e78:	b2d6      	uxtb	r6, r2
 8016e7a:	f3c2 2107 	ubfx	r1, r2, #8, #8
 8016e7e:	f85c 2026 	ldr.w	r2, [ip, r6, lsl #2]
 8016e82:	f85c 1021 	ldr.w	r1, [ip, r1, lsl #2]
 8016e86:	4413      	add	r3, r2
 8016e88:	eb01 2293 	add.w	r2, r1, r3, lsr #10
 8016e8c:	f3c2 0109 	ubfx	r1, r2, #0, #10
 8016e90:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8016e94:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8016e98:	0a93      	lsrs	r3, r2, #10
 8016e9a:	4a1c      	ldr	r2, [pc, #112]	; (8016f0c <D16_1CH_HTONS_VOL_HP+0xd8>)
 8016e9c:	fb21 5202 	smlad	r2, r1, r2, r5
 8016ea0:	4d1b      	ldr	r5, [pc, #108]	; (8016f10 <D16_1CH_HTONS_VOL_HP+0xdc>)
 8016ea2:	fb21 f505 	smuad	r5, r1, r5
 8016ea6:	f5a2 6200 	sub.w	r2, r2, #2048	; 0x800
 8016eaa:	4410      	add	r0, r2
 8016eac:	1bc0      	subs	r0, r0, r7
 8016eae:	17c7      	asrs	r7, r0, #31
 8016eb0:	fba0 010e 	umull	r0, r1, r0, lr
 8016eb4:	f110 4000 	adds.w	r0, r0, #2147483648	; 0x80000000
 8016eb8:	fb0e 1107 	mla	r1, lr, r7, r1
 8016ebc:	f141 0100 	adc.w	r1, r1, #0
 8016ec0:	0448      	lsls	r0, r1, #17
 8016ec2:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8016ec6:	2700      	movs	r7, #0
 8016ec8:	fbc0 670a 	smlal	r6, r7, r0, sl
 8016ecc:	45d8      	cmp	r8, fp
 8016ece:	ea4f 0041 	mov.w	r0, r1, lsl #1
 8016ed2:	ea4f 01a7 	mov.w	r1, r7, asr #2
 8016ed6:	4617      	mov	r7, r2
 8016ed8:	f301 010f 	ssat	r1, #16, r1
 8016edc:	f824 1f02 	strh.w	r1, [r4, #2]!
 8016ee0:	d1c7      	bne.n	8016e72 <D16_1CH_HTONS_VOL_HP+0x3e>
 8016ee2:	9901      	ldr	r1, [sp, #4]
 8016ee4:	f8c9 301c 	str.w	r3, [r9, #28]
 8016ee8:	9b00      	ldr	r3, [sp, #0]
 8016eea:	f8c9 0010 	str.w	r0, [r9, #16]
 8016eee:	2000      	movs	r0, #0
 8016ef0:	f8c9 5008 	str.w	r5, [r9, #8]
 8016ef4:	f8c9 100c 	str.w	r1, [r9, #12]
 8016ef8:	f8c9 2014 	str.w	r2, [r9, #20]
 8016efc:	f8c9 3018 	str.w	r3, [r9, #24]
 8016f00:	b003      	add	sp, #12
 8016f02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016f06:	463a      	mov	r2, r7
 8016f08:	4621      	mov	r1, r4
 8016f0a:	e7eb      	b.n	8016ee4 <D16_1CH_HTONS_VOL_HP+0xb0>
 8016f0c:	00030001 	.word	0x00030001
 8016f10:	00010003 	.word	0x00010003
 8016f14:	20000484 	.word	0x20000484

08016f18 <D24_1CH_HTONS_VOL_HP>:
 8016f18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016f1c:	b089      	sub	sp, #36	; 0x24
 8016f1e:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 8016f20:	6996      	ldr	r6, [r2, #24]
 8016f22:	9304      	str	r3, [sp, #16]
 8016f24:	6b17      	ldr	r7, [r2, #48]	; 0x30
 8016f26:	9207      	str	r2, [sp, #28]
 8016f28:	6915      	ldr	r5, [r2, #16]
 8016f2a:	6954      	ldr	r4, [r2, #20]
 8016f2c:	9606      	str	r6, [sp, #24]
 8016f2e:	6893      	ldr	r3, [r2, #8]
 8016f30:	69d6      	ldr	r6, [r2, #28]
 8016f32:	f8d2 c00c 	ldr.w	ip, [r2, #12]
 8016f36:	f8d2 a020 	ldr.w	sl, [r2, #32]
 8016f3a:	9a04      	ldr	r2, [sp, #16]
 8016f3c:	9705      	str	r7, [sp, #20]
 8016f3e:	2a00      	cmp	r2, #0
 8016f40:	d07e      	beq.n	8017040 <D24_1CH_HTONS_VOL_HP+0x128>
 8016f42:	f1a1 0b02 	sub.w	fp, r1, #2
 8016f46:	2700      	movs	r7, #0
 8016f48:	46a8      	mov	r8, r5
 8016f4a:	f8cd b004 	str.w	fp, [sp, #4]
 8016f4e:	4655      	mov	r5, sl
 8016f50:	46e3      	mov	fp, ip
 8016f52:	f8df e0f8 	ldr.w	lr, [pc, #248]	; 801704c <D24_1CH_HTONS_VOL_HP+0x134>
 8016f56:	46ba      	mov	sl, r7
 8016f58:	469c      	mov	ip, r3
 8016f5a:	e055      	b.n	8017008 <D24_1CH_HTONS_VOL_HP+0xf0>
 8016f5c:	7802      	ldrb	r2, [r0, #0]
 8016f5e:	78c3      	ldrb	r3, [r0, #3]
 8016f60:	7841      	ldrb	r1, [r0, #1]
 8016f62:	0212      	lsls	r2, r2, #8
 8016f64:	eb02 4303 	add.w	r3, r2, r3, lsl #16
 8016f68:	440b      	add	r3, r1
 8016f6a:	3002      	adds	r0, #2
 8016f6c:	b2d9      	uxtb	r1, r3
 8016f6e:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8016f72:	f85e 7021 	ldr.w	r7, [lr, r1, lsl #2]
 8016f76:	f85e 2022 	ldr.w	r2, [lr, r2, lsl #2]
 8016f7a:	0c1b      	lsrs	r3, r3, #16
 8016f7c:	eb07 2796 	add.w	r7, r7, r6, lsr #10
 8016f80:	eb02 2297 	add.w	r2, r2, r7, lsr #10
 8016f84:	f85e 6023 	ldr.w	r6, [lr, r3, lsl #2]
 8016f88:	f3c7 0309 	ubfx	r3, r7, #0, #10
 8016f8c:	f3c2 0709 	ubfx	r7, r2, #0, #10
 8016f90:	eb06 2692 	add.w	r6, r6, r2, lsr #10
 8016f94:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
 8016f98:	4a2a      	ldr	r2, [pc, #168]	; (8017044 <D24_1CH_HTONS_VOL_HP+0x12c>)
 8016f9a:	fb23 b102 	smlad	r1, r3, r2, fp
 8016f9e:	4a2a      	ldr	r2, [pc, #168]	; (8017048 <D24_1CH_HTONS_VOL_HP+0x130>)
 8016fa0:	fb23 cb02 	smlad	fp, r3, r2, ip
 8016fa4:	f3c6 0c09 	ubfx	ip, r6, #0, #10
 8016fa8:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8016fac:	eb0b 0b4c 	add.w	fp, fp, ip, lsl #1
 8016fb0:	2201      	movs	r2, #1
 8016fb2:	fb23 f702 	smuad	r7, r3, r2
 8016fb6:	f5a1 51d8 	sub.w	r1, r1, #6912	; 0x1b00
 8016fba:	eb01 0208 	add.w	r2, r1, r8
 8016fbe:	1b12      	subs	r2, r2, r4
 8016fc0:	17d4      	asrs	r4, r2, #31
 8016fc2:	fba2 2305 	umull	r2, r3, r2, r5
 8016fc6:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 8016fca:	fb05 3304 	mla	r3, r5, r4, r3
 8016fce:	f143 0300 	adc.w	r3, r3, #0
 8016fd2:	9c05      	ldr	r4, [sp, #20]
 8016fd4:	03da      	lsls	r2, r3, #15
 8016fd6:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 8016fda:	f04f 0900 	mov.w	r9, #0
 8016fde:	fbc4 8902 	smlal	r8, r9, r4, r2
 8016fe2:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8016fe6:	9a01      	ldr	r2, [sp, #4]
 8016fe8:	ea4f 0843 	mov.w	r8, r3, lsl #1
 8016fec:	9b03      	ldr	r3, [sp, #12]
 8016fee:	109b      	asrs	r3, r3, #2
 8016ff0:	f303 030f 	ssat	r3, #16, r3
 8016ff4:	f822 3f02 	strh.w	r3, [r2, #2]!
 8016ff8:	9b04      	ldr	r3, [sp, #16]
 8016ffa:	9201      	str	r2, [sp, #4]
 8016ffc:	f10a 0a01 	add.w	sl, sl, #1
 8017000:	459a      	cmp	sl, r3
 8017002:	44bc      	add	ip, r7
 8017004:	460c      	mov	r4, r1
 8017006:	d00b      	beq.n	8017020 <D24_1CH_HTONS_VOL_HP+0x108>
 8017008:	f01a 0f01 	tst.w	sl, #1
 801700c:	d0a6      	beq.n	8016f5c <D24_1CH_HTONS_VOL_HP+0x44>
 801700e:	78c2      	ldrb	r2, [r0, #3]
 8017010:	7883      	ldrb	r3, [r0, #2]
 8017012:	f810 1b04 	ldrb.w	r1, [r0], #4
 8017016:	0212      	lsls	r2, r2, #8
 8017018:	eb02 4303 	add.w	r3, r2, r3, lsl #16
 801701c:	440b      	add	r3, r1
 801701e:	e7a5      	b.n	8016f6c <D24_1CH_HTONS_VOL_HP+0x54>
 8017020:	4663      	mov	r3, ip
 8017022:	4645      	mov	r5, r8
 8017024:	46dc      	mov	ip, fp
 8017026:	9807      	ldr	r0, [sp, #28]
 8017028:	6141      	str	r1, [r0, #20]
 801702a:	9906      	ldr	r1, [sp, #24]
 801702c:	6083      	str	r3, [r0, #8]
 801702e:	f8c0 c00c 	str.w	ip, [r0, #12]
 8017032:	61c6      	str	r6, [r0, #28]
 8017034:	6105      	str	r5, [r0, #16]
 8017036:	6181      	str	r1, [r0, #24]
 8017038:	2000      	movs	r0, #0
 801703a:	b009      	add	sp, #36	; 0x24
 801703c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017040:	4621      	mov	r1, r4
 8017042:	e7f0      	b.n	8017026 <D24_1CH_HTONS_VOL_HP+0x10e>
 8017044:	00030001 	.word	0x00030001
 8017048:	00060007 	.word	0x00060007
 801704c:	20000484 	.word	0x20000484

08017050 <D32_1CH_HTONS_VOL_HP>:
 8017050:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017054:	4692      	mov	sl, r2
 8017056:	b087      	sub	sp, #28
 8017058:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 801705a:	f8da 3018 	ldr.w	r3, [sl, #24]
 801705e:	f8da 5030 	ldr.w	r5, [sl, #48]	; 0x30
 8017062:	9304      	str	r3, [sp, #16]
 8017064:	f8da 4010 	ldr.w	r4, [sl, #16]
 8017068:	f8da 8014 	ldr.w	r8, [sl, #20]
 801706c:	f8da 601c 	ldr.w	r6, [sl, #28]
 8017070:	f8da 3008 	ldr.w	r3, [sl, #8]
 8017074:	f8da e00c 	ldr.w	lr, [sl, #12]
 8017078:	9501      	str	r5, [sp, #4]
 801707a:	f8da c020 	ldr.w	ip, [sl, #32]
 801707e:	2a00      	cmp	r2, #0
 8017080:	d07b      	beq.n	801717a <D32_1CH_HTONS_VOL_HP+0x12a>
 8017082:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 8017086:	4f3e      	ldr	r7, [pc, #248]	; (8017180 <D32_1CH_HTONS_VOL_HP+0x130>)
 8017088:	f8cd c00c 	str.w	ip, [sp, #12]
 801708c:	9202      	str	r2, [sp, #8]
 801708e:	460d      	mov	r5, r1
 8017090:	46a1      	mov	r9, r4
 8017092:	4684      	mov	ip, r0
 8017094:	f8cd a014 	str.w	sl, [sp, #20]
 8017098:	f85c 1b04 	ldr.w	r1, [ip], #4
 801709c:	ba49      	rev16	r1, r1
 801709e:	b2c8      	uxtb	r0, r1
 80170a0:	f3c1 2207 	ubfx	r2, r1, #8, #8
 80170a4:	f3c1 4a07 	ubfx	sl, r1, #16, #8
 80170a8:	f857 0020 	ldr.w	r0, [r7, r0, lsl #2]
 80170ac:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 80170b0:	0e09      	lsrs	r1, r1, #24
 80170b2:	eb00 2096 	add.w	r0, r0, r6, lsr #10
 80170b6:	f857 602a 	ldr.w	r6, [r7, sl, lsl #2]
 80170ba:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
 80170be:	eb02 2290 	add.w	r2, r2, r0, lsr #10
 80170c2:	eb06 2a92 	add.w	sl, r6, r2, lsr #10
 80170c6:	eb01 269a 	add.w	r6, r1, sl, lsr #10
 80170ca:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80170ce:	f3c6 0109 	ubfx	r1, r6, #0, #10
 80170d2:	f3c0 0009 	ubfx	r0, r0, #0, #10
 80170d6:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 80170da:	ea42 4000 	orr.w	r0, r2, r0, lsl #16
 80170de:	ea41 4a0a 	orr.w	sl, r1, sl, lsl #16
 80170e2:	4a28      	ldr	r2, [pc, #160]	; (8017184 <D32_1CH_HTONS_VOL_HP+0x134>)
 80170e4:	fb20 e202 	smlad	r2, r0, r2, lr
 80170e8:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 80170ec:	fb2a 2101 	smlad	r1, sl, r1, r2
 80170f0:	4a25      	ldr	r2, [pc, #148]	; (8017188 <D32_1CH_HTONS_VOL_HP+0x138>)
 80170f2:	fb20 3302 	smlad	r3, r0, r2, r3
 80170f6:	4a25      	ldr	r2, [pc, #148]	; (801718c <D32_1CH_HTONS_VOL_HP+0x13c>)
 80170f8:	fb2a 3e02 	smlad	lr, sl, r2, r3
 80170fc:	2301      	movs	r3, #1
 80170fe:	fb20 f003 	smuad	r0, r0, r3
 8017102:	4b23      	ldr	r3, [pc, #140]	; (8017190 <D32_1CH_HTONS_VOL_HP+0x140>)
 8017104:	fb2a 0303 	smlad	r3, sl, r3, r0
 8017108:	f5a1 4280 	sub.w	r2, r1, #16384	; 0x4000
 801710c:	9c03      	ldr	r4, [sp, #12]
 801710e:	eb02 0009 	add.w	r0, r2, r9
 8017112:	eba0 0008 	sub.w	r0, r0, r8
 8017116:	ea4f 7be0 	mov.w	fp, r0, asr #31
 801711a:	fba0 0104 	umull	r0, r1, r0, r4
 801711e:	f110 4000 	adds.w	r0, r0, #2147483648	; 0x80000000
 8017122:	fb04 110b 	mla	r1, r4, fp, r1
 8017126:	f141 0100 	adc.w	r1, r1, #0
 801712a:	9c01      	ldr	r4, [sp, #4]
 801712c:	0388      	lsls	r0, r1, #14
 801712e:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 8017132:	f04f 0900 	mov.w	r9, #0
 8017136:	fbc0 8904 	smlal	r8, r9, r0, r4
 801713a:	ea4f 00a9 	mov.w	r0, r9, asr #2
 801713e:	ea4f 0941 	mov.w	r9, r1, lsl #1
 8017142:	f300 000f 	ssat	r0, #16, r0
 8017146:	9902      	ldr	r1, [sp, #8]
 8017148:	f825 0b02 	strh.w	r0, [r5], #2
 801714c:	428d      	cmp	r5, r1
 801714e:	4690      	mov	r8, r2
 8017150:	d1a2      	bne.n	8017098 <D32_1CH_HTONS_VOL_HP+0x48>
 8017152:	f8dd a014 	ldr.w	sl, [sp, #20]
 8017156:	464c      	mov	r4, r9
 8017158:	f8ca 3008 	str.w	r3, [sl, #8]
 801715c:	9b04      	ldr	r3, [sp, #16]
 801715e:	f8ca e00c 	str.w	lr, [sl, #12]
 8017162:	2000      	movs	r0, #0
 8017164:	f8ca 601c 	str.w	r6, [sl, #28]
 8017168:	f8ca 4010 	str.w	r4, [sl, #16]
 801716c:	f8ca 2014 	str.w	r2, [sl, #20]
 8017170:	f8ca 3018 	str.w	r3, [sl, #24]
 8017174:	b007      	add	sp, #28
 8017176:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801717a:	4642      	mov	r2, r8
 801717c:	e7ec      	b.n	8017158 <D32_1CH_HTONS_VOL_HP+0x108>
 801717e:	bf00      	nop
 8017180:	20000484 	.word	0x20000484
 8017184:	00060003 	.word	0x00060003
 8017188:	000a000c 	.word	0x000a000c
 801718c:	000c000a 	.word	0x000c000a
 8017190:	00030006 	.word	0x00030006

08017194 <D48_1CH_HTONS_VOL_HP>:
 8017194:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017198:	4613      	mov	r3, r2
 801719a:	461c      	mov	r4, r3
 801719c:	b087      	sub	sp, #28
 801719e:	4625      	mov	r5, r4
 80171a0:	4626      	mov	r6, r4
 80171a2:	6b2d      	ldr	r5, [r5, #48]	; 0x30
 80171a4:	9205      	str	r2, [sp, #20]
 80171a6:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 80171a8:	f8d3 9014 	ldr.w	r9, [r3, #20]
 80171ac:	9501      	str	r5, [sp, #4]
 80171ae:	4680      	mov	r8, r0
 80171b0:	6a35      	ldr	r5, [r6, #32]
 80171b2:	6918      	ldr	r0, [r3, #16]
 80171b4:	699b      	ldr	r3, [r3, #24]
 80171b6:	9304      	str	r3, [sp, #16]
 80171b8:	f8d4 e01c 	ldr.w	lr, [r4, #28]
 80171bc:	68a3      	ldr	r3, [r4, #8]
 80171be:	9502      	str	r5, [sp, #8]
 80171c0:	68e4      	ldr	r4, [r4, #12]
 80171c2:	2a00      	cmp	r2, #0
 80171c4:	f000 808c 	beq.w	80172e0 <D48_1CH_HTONS_VOL_HP+0x14c>
 80171c8:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 80171cc:	4d45      	ldr	r5, [pc, #276]	; (80172e4 <D48_1CH_HTONS_VOL_HP+0x150>)
 80171ce:	9203      	str	r2, [sp, #12]
 80171d0:	468c      	mov	ip, r1
 80171d2:	e898 0044 	ldmia.w	r8, {r2, r6}
 80171d6:	f108 0806 	add.w	r8, r8, #6
 80171da:	ba52      	rev16	r2, r2
 80171dc:	ba76      	rev16	r6, r6
 80171de:	b2d7      	uxtb	r7, r2
 80171e0:	f3c2 2107 	ubfx	r1, r2, #8, #8
 80171e4:	f855 a027 	ldr.w	sl, [r5, r7, lsl #2]
 80171e8:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 80171ec:	f3c2 4707 	ubfx	r7, r2, #16, #8
 80171f0:	0e12      	lsrs	r2, r2, #24
 80171f2:	eb0a 2a9e 	add.w	sl, sl, lr, lsr #10
 80171f6:	f855 7027 	ldr.w	r7, [r5, r7, lsl #2]
 80171fa:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 80171fe:	fa5f fb86 	uxtb.w	fp, r6
 8017202:	eb01 219a 	add.w	r1, r1, sl, lsr #10
 8017206:	f3c6 2e07 	ubfx	lr, r6, #8, #8
 801720a:	eb07 2791 	add.w	r7, r7, r1, lsr #10
 801720e:	f855 602b 	ldr.w	r6, [r5, fp, lsl #2]
 8017212:	f855 e02e 	ldr.w	lr, [r5, lr, lsl #2]
 8017216:	eb02 2297 	add.w	r2, r2, r7, lsr #10
 801721a:	eb06 2692 	add.w	r6, r6, r2, lsr #10
 801721e:	eb0e 2e96 	add.w	lr, lr, r6, lsr #10
 8017222:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8017226:	f3c2 0209 	ubfx	r2, r2, #0, #10
 801722a:	f3ce 0b09 	ubfx	fp, lr, #0, #10
 801722e:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 8017232:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8017236:	f3c6 0609 	ubfx	r6, r6, #0, #10
 801723a:	ea42 4707 	orr.w	r7, r2, r7, lsl #16
 801723e:	ea41 4a0a 	orr.w	sl, r1, sl, lsl #16
 8017242:	ea4b 4606 	orr.w	r6, fp, r6, lsl #16
 8017246:	4a28      	ldr	r2, [pc, #160]	; (80172e8 <D48_1CH_HTONS_VOL_HP+0x154>)
 8017248:	fb2a 4202 	smlad	r2, sl, r2, r4
 801724c:	4927      	ldr	r1, [pc, #156]	; (80172ec <D48_1CH_HTONS_VOL_HP+0x158>)
 801724e:	fb27 2201 	smlad	r2, r7, r1, r2
 8017252:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8017256:	fb26 2201 	smlad	r2, r6, r1, r2
 801725a:	4925      	ldr	r1, [pc, #148]	; (80172f0 <D48_1CH_HTONS_VOL_HP+0x15c>)
 801725c:	fb2a 3401 	smlad	r4, sl, r1, r3
 8017260:	f04f 131b 	mov.w	r3, #1769499	; 0x1b001b
 8017264:	fb27 4403 	smlad	r4, r7, r3, r4
 8017268:	4b22      	ldr	r3, [pc, #136]	; (80172f4 <D48_1CH_HTONS_VOL_HP+0x160>)
 801726a:	fb26 4403 	smlad	r4, r6, r3, r4
 801726e:	2101      	movs	r1, #1
 8017270:	fb2a fa01 	smuad	sl, sl, r1
 8017274:	4b20      	ldr	r3, [pc, #128]	; (80172f8 <D48_1CH_HTONS_VOL_HP+0x164>)
 8017276:	fb27 a703 	smlad	r7, r7, r3, sl
 801727a:	4b20      	ldr	r3, [pc, #128]	; (80172fc <D48_1CH_HTONS_VOL_HP+0x168>)
 801727c:	fb26 7303 	smlad	r3, r6, r3, r7
 8017280:	f5a2 4258 	sub.w	r2, r2, #55296	; 0xd800
 8017284:	9e02      	ldr	r6, [sp, #8]
 8017286:	9f01      	ldr	r7, [sp, #4]
 8017288:	4410      	add	r0, r2
 801728a:	eba0 0009 	sub.w	r0, r0, r9
 801728e:	ea4f 7ae0 	mov.w	sl, r0, asr #31
 8017292:	fba0 0106 	umull	r0, r1, r0, r6
 8017296:	f110 4000 	adds.w	r0, r0, #2147483648	; 0x80000000
 801729a:	fb06 110a 	mla	r1, r6, sl, r1
 801729e:	f141 0100 	adc.w	r1, r1, #0
 80172a2:	0308      	lsls	r0, r1, #12
 80172a4:	f04f 4900 	mov.w	r9, #2147483648	; 0x80000000
 80172a8:	f04f 0a00 	mov.w	sl, #0
 80172ac:	fbc0 9a07 	smlal	r9, sl, r0, r7
 80172b0:	4657      	mov	r7, sl
 80172b2:	10b8      	asrs	r0, r7, #2
 80172b4:	f300 000f 	ssat	r0, #16, r0
 80172b8:	f82c 0b02 	strh.w	r0, [ip], #2
 80172bc:	0048      	lsls	r0, r1, #1
 80172be:	9903      	ldr	r1, [sp, #12]
 80172c0:	458c      	cmp	ip, r1
 80172c2:	4691      	mov	r9, r2
 80172c4:	d185      	bne.n	80171d2 <D48_1CH_HTONS_VOL_HP+0x3e>
 80172c6:	9d05      	ldr	r5, [sp, #20]
 80172c8:	616a      	str	r2, [r5, #20]
 80172ca:	9a04      	ldr	r2, [sp, #16]
 80172cc:	6128      	str	r0, [r5, #16]
 80172ce:	2000      	movs	r0, #0
 80172d0:	60ab      	str	r3, [r5, #8]
 80172d2:	60ec      	str	r4, [r5, #12]
 80172d4:	f8c5 e01c 	str.w	lr, [r5, #28]
 80172d8:	61aa      	str	r2, [r5, #24]
 80172da:	b007      	add	sp, #28
 80172dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80172e0:	464a      	mov	r2, r9
 80172e2:	e7f0      	b.n	80172c6 <D48_1CH_HTONS_VOL_HP+0x132>
 80172e4:	20000484 	.word	0x20000484
 80172e8:	000f000a 	.word	0x000f000a
 80172ec:	00060003 	.word	0x00060003
 80172f0:	00150019 	.word	0x00150019
 80172f4:	00190015 	.word	0x00190015
 80172f8:	00030006 	.word	0x00030006
 80172fc:	000a000f 	.word	0x000a000f

08017300 <D64_1CH_HTONS_VOL_HP>:
 8017300:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017304:	b089      	sub	sp, #36	; 0x24
 8017306:	4614      	mov	r4, r2
 8017308:	9207      	str	r2, [sp, #28]
 801730a:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 801730c:	f8d2 c010 	ldr.w	ip, [r2, #16]
 8017310:	f8d2 8014 	ldr.w	r8, [r2, #20]
 8017314:	6992      	ldr	r2, [r2, #24]
 8017316:	9206      	str	r2, [sp, #24]
 8017318:	68e2      	ldr	r2, [r4, #12]
 801731a:	9201      	str	r2, [sp, #4]
 801731c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 801731e:	9203      	str	r2, [sp, #12]
 8017320:	6a22      	ldr	r2, [r4, #32]
 8017322:	69e5      	ldr	r5, [r4, #28]
 8017324:	68a6      	ldr	r6, [r4, #8]
 8017326:	9204      	str	r2, [sp, #16]
 8017328:	2b00      	cmp	r3, #0
 801732a:	f000 80b0 	beq.w	801748e <D64_1CH_HTONS_VOL_HP+0x18e>
 801732e:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 8017332:	4f58      	ldr	r7, [pc, #352]	; (8017494 <D64_1CH_HTONS_VOL_HP+0x194>)
 8017334:	9305      	str	r3, [sp, #20]
 8017336:	9102      	str	r1, [sp, #8]
 8017338:	f850 2b08 	ldr.w	r2, [r0], #8
 801733c:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8017340:	ba52      	rev16	r2, r2
 8017342:	fa93 f993 	rev16.w	r9, r3
 8017346:	b2d4      	uxtb	r4, r2
 8017348:	f3c2 2307 	ubfx	r3, r2, #8, #8
 801734c:	f857 b024 	ldr.w	fp, [r7, r4, lsl #2]
 8017350:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 8017354:	9901      	ldr	r1, [sp, #4]
 8017356:	f3c2 4407 	ubfx	r4, r2, #16, #8
 801735a:	0e12      	lsrs	r2, r2, #24
 801735c:	44ab      	add	fp, r5
 801735e:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8017362:	f857 4022 	ldr.w	r4, [r7, r2, lsl #2]
 8017366:	fa5f f289 	uxtb.w	r2, r9
 801736a:	eb03 2e9b 	add.w	lr, r3, fp, lsr #10
 801736e:	f3c9 2307 	ubfx	r3, r9, #8, #8
 8017372:	eb05 2a9e 	add.w	sl, r5, lr, lsr #10
 8017376:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 801737a:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 801737e:	f3c9 4507 	ubfx	r5, r9, #16, #8
 8017382:	eb04 249a 	add.w	r4, r4, sl, lsr #10
 8017386:	ea4f 6919 	mov.w	r9, r9, lsr #24
 801738a:	eb02 2294 	add.w	r2, r2, r4, lsr #10
 801738e:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 8017392:	f857 9029 	ldr.w	r9, [r7, r9, lsl #2]
 8017396:	eb03 2392 	add.w	r3, r3, r2, lsr #10
 801739a:	eb05 2593 	add.w	r5, r5, r3, lsr #10
 801739e:	eb09 2995 	add.w	r9, r9, r5, lsr #10
 80173a2:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 80173a6:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 80173aa:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 80173ae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80173b2:	f3c5 0509 	ubfx	r5, r5, #0, #10
 80173b6:	ea4e 4b0b 	orr.w	fp, lr, fp, lsl #16
 80173ba:	f3c4 0409 	ubfx	r4, r4, #0, #10
 80173be:	f3c9 0e09 	ubfx	lr, r9, #0, #10
 80173c2:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80173c6:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 80173ca:	ea4e 4e05 	orr.w	lr, lr, r5, lsl #16
 80173ce:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80173d2:	ea4f 2599 	mov.w	r5, r9, lsr #10
 80173d6:	4b30      	ldr	r3, [pc, #192]	; (8017498 <D64_1CH_HTONS_VOL_HP+0x198>)
 80173d8:	fb2b 1303 	smlad	r3, fp, r3, r1
 80173dc:	492f      	ldr	r1, [pc, #188]	; (801749c <D64_1CH_HTONS_VOL_HP+0x19c>)
 80173de:	fb24 3301 	smlad	r3, r4, r1, r3
 80173e2:	492f      	ldr	r1, [pc, #188]	; (80174a0 <D64_1CH_HTONS_VOL_HP+0x1a0>)
 80173e4:	fb22 3301 	smlad	r3, r2, r1, r3
 80173e8:	f44f 3a80 	mov.w	sl, #65536	; 0x10000
 80173ec:	fb2e 390a 	smlad	r9, lr, sl, r3
 80173f0:	4b2c      	ldr	r3, [pc, #176]	; (80174a4 <D64_1CH_HTONS_VOL_HP+0x1a4>)
 80173f2:	fb2b 6603 	smlad	r6, fp, r3, r6
 80173f6:	fb2e 6613 	smladx	r6, lr, r3, r6
 80173fa:	4b2b      	ldr	r3, [pc, #172]	; (80174a8 <D64_1CH_HTONS_VOL_HP+0x1a8>)
 80173fc:	fb24 6603 	smlad	r6, r4, r3, r6
 8017400:	fb22 6313 	smladx	r3, r2, r3, r6
 8017404:	f04f 0a01 	mov.w	sl, #1
 8017408:	9301      	str	r3, [sp, #4]
 801740a:	fb2b fb0a 	smuad	fp, fp, sl
 801740e:	4b27      	ldr	r3, [pc, #156]	; (80174ac <D64_1CH_HTONS_VOL_HP+0x1ac>)
 8017410:	fb24 ba03 	smlad	sl, r4, r3, fp
 8017414:	4b26      	ldr	r3, [pc, #152]	; (80174b0 <D64_1CH_HTONS_VOL_HP+0x1b0>)
 8017416:	fb22 a203 	smlad	r2, r2, r3, sl
 801741a:	4b26      	ldr	r3, [pc, #152]	; (80174b4 <D64_1CH_HTONS_VOL_HP+0x1b4>)
 801741c:	fb2e 2603 	smlad	r6, lr, r3, r2
 8017420:	f5a9 3a00 	sub.w	sl, r9, #131072	; 0x20000
 8017424:	eb0a 020c 	add.w	r2, sl, ip
 8017428:	9c04      	ldr	r4, [sp, #16]
 801742a:	9903      	ldr	r1, [sp, #12]
 801742c:	eba2 0208 	sub.w	r2, r2, r8
 8017430:	ea4f 79e2 	mov.w	r9, r2, asr #31
 8017434:	fba2 2304 	umull	r2, r3, r2, r4
 8017438:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 801743c:	fb04 3309 	mla	r3, r4, r9, r3
 8017440:	f143 0300 	adc.w	r3, r3, #0
 8017444:	02da      	lsls	r2, r3, #11
 8017446:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 801744a:	f04f 0900 	mov.w	r9, #0
 801744e:	fbc1 8902 	smlal	r8, r9, r1, r2
 8017452:	9902      	ldr	r1, [sp, #8]
 8017454:	ea4f 02a9 	mov.w	r2, r9, asr #2
 8017458:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 801745c:	f302 020f 	ssat	r2, #16, r2
 8017460:	9b05      	ldr	r3, [sp, #20]
 8017462:	f821 2b02 	strh.w	r2, [r1], #2
 8017466:	4299      	cmp	r1, r3
 8017468:	9102      	str	r1, [sp, #8]
 801746a:	46d0      	mov	r8, sl
 801746c:	f47f af64 	bne.w	8017338 <D64_1CH_HTONS_VOL_HP+0x38>
 8017470:	9a07      	ldr	r2, [sp, #28]
 8017472:	9901      	ldr	r1, [sp, #4]
 8017474:	60d1      	str	r1, [r2, #12]
 8017476:	9906      	ldr	r1, [sp, #24]
 8017478:	6096      	str	r6, [r2, #8]
 801747a:	2000      	movs	r0, #0
 801747c:	61d5      	str	r5, [r2, #28]
 801747e:	f8c2 c010 	str.w	ip, [r2, #16]
 8017482:	f8c2 a014 	str.w	sl, [r2, #20]
 8017486:	6191      	str	r1, [r2, #24]
 8017488:	b009      	add	sp, #36	; 0x24
 801748a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801748e:	46c2      	mov	sl, r8
 8017490:	4622      	mov	r2, r4
 8017492:	e7ee      	b.n	8017472 <D64_1CH_HTONS_VOL_HP+0x172>
 8017494:	20000484 	.word	0x20000484
 8017498:	001c0015 	.word	0x001c0015
 801749c:	000f000a 	.word	0x000f000a
 80174a0:	00060003 	.word	0x00060003
 80174a4:	0024002a 	.word	0x0024002a
 80174a8:	002e0030 	.word	0x002e0030
 80174ac:	00030006 	.word	0x00030006
 80174b0:	000a000f 	.word	0x000a000f
 80174b4:	0015001c 	.word	0x0015001c

080174b8 <D80_1CH_HTONS_VOL_HP>:
 80174b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80174bc:	4613      	mov	r3, r2
 80174be:	b089      	sub	sp, #36	; 0x24
 80174c0:	4686      	mov	lr, r0
 80174c2:	6918      	ldr	r0, [r3, #16]
 80174c4:	9000      	str	r0, [sp, #0]
 80174c6:	4618      	mov	r0, r3
 80174c8:	461c      	mov	r4, r3
 80174ca:	695b      	ldr	r3, [r3, #20]
 80174cc:	9302      	str	r3, [sp, #8]
 80174ce:	6983      	ldr	r3, [r0, #24]
 80174d0:	9306      	str	r3, [sp, #24]
 80174d2:	f8d0 c008 	ldr.w	ip, [r0, #8]
 80174d6:	69c3      	ldr	r3, [r0, #28]
 80174d8:	68c0      	ldr	r0, [r0, #12]
 80174da:	9207      	str	r2, [sp, #28]
 80174dc:	9001      	str	r0, [sp, #4]
 80174de:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 80174e0:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80174e2:	9003      	str	r0, [sp, #12]
 80174e4:	6a20      	ldr	r0, [r4, #32]
 80174e6:	9004      	str	r0, [sp, #16]
 80174e8:	2a00      	cmp	r2, #0
 80174ea:	f000 80d2 	beq.w	8017692 <D80_1CH_HTONS_VOL_HP+0x1da>
 80174ee:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 80174f2:	4869      	ldr	r0, [pc, #420]	; (8017698 <D80_1CH_HTONS_VOL_HP+0x1e0>)
 80174f4:	9205      	str	r2, [sp, #20]
 80174f6:	461c      	mov	r4, r3
 80174f8:	f8de 5000 	ldr.w	r5, [lr]
 80174fc:	f8de 2004 	ldr.w	r2, [lr, #4]
 8017500:	f8de 3008 	ldr.w	r3, [lr, #8]
 8017504:	f10e 0e0a 	add.w	lr, lr, #10
 8017508:	ba6d      	rev16	r5, r5
 801750a:	ba52      	rev16	r2, r2
 801750c:	fa93 fb93 	rev16.w	fp, r3
 8017510:	b2ee      	uxtb	r6, r5
 8017512:	f3c5 2307 	ubfx	r3, r5, #8, #8
 8017516:	f850 7026 	ldr.w	r7, [r0, r6, lsl #2]
 801751a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 801751e:	f3c5 4607 	ubfx	r6, r5, #16, #8
 8017522:	eb04 0a07 	add.w	sl, r4, r7
 8017526:	0e2d      	lsrs	r5, r5, #24
 8017528:	f850 4026 	ldr.w	r4, [r0, r6, lsl #2]
 801752c:	f850 6025 	ldr.w	r6, [r0, r5, lsl #2]
 8017530:	eb03 239a 	add.w	r3, r3, sl, lsr #10
 8017534:	eb04 2993 	add.w	r9, r4, r3, lsr #10
 8017538:	b2d5      	uxtb	r5, r2
 801753a:	f3c2 2407 	ubfx	r4, r2, #8, #8
 801753e:	f850 7025 	ldr.w	r7, [r0, r5, lsl #2]
 8017542:	f850 5024 	ldr.w	r5, [r0, r4, lsl #2]
 8017546:	f3c2 4407 	ubfx	r4, r2, #16, #8
 801754a:	eb06 2699 	add.w	r6, r6, r9, lsr #10
 801754e:	0e12      	lsrs	r2, r2, #24
 8017550:	eb07 2896 	add.w	r8, r7, r6, lsr #10
 8017554:	f850 7024 	ldr.w	r7, [r0, r4, lsl #2]
 8017558:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 801755c:	fa5f f48b 	uxtb.w	r4, fp
 8017560:	eb05 2598 	add.w	r5, r5, r8, lsr #10
 8017564:	f3cb 2b07 	ubfx	fp, fp, #8, #8
 8017568:	eb07 2795 	add.w	r7, r7, r5, lsr #10
 801756c:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
 8017570:	f850 b02b 	ldr.w	fp, [r0, fp, lsl #2]
 8017574:	eb02 2297 	add.w	r2, r2, r7, lsr #10
 8017578:	eb04 2492 	add.w	r4, r4, r2, lsr #10
 801757c:	eb0b 2b94 	add.w	fp, fp, r4, lsr #10
 8017580:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8017584:	f3c9 0909 	ubfx	r9, r9, #0, #10
 8017588:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 801758c:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8017590:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8017594:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8017598:	ea46 4909 	orr.w	r9, r6, r9, lsl #16
 801759c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80175a0:	f3cb 0609 	ubfx	r6, fp, #0, #10
 80175a4:	f3c8 0809 	ubfx	r8, r8, #0, #10
 80175a8:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80175ac:	ea45 4808 	orr.w	r8, r5, r8, lsl #16
 80175b0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80175b4:	ea46 4604 	orr.w	r6, r6, r4, lsl #16
 80175b8:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
 80175bc:	ea4f 249b 	mov.w	r4, fp, lsr #10
 80175c0:	4d36      	ldr	r5, [pc, #216]	; (801769c <D80_1CH_HTONS_VOL_HP+0x1e4>)
 80175c2:	9f01      	ldr	r7, [sp, #4]
 80175c4:	fb23 7505 	smlad	r5, r3, r5, r7
 80175c8:	4f35      	ldr	r7, [pc, #212]	; (80176a0 <D80_1CH_HTONS_VOL_HP+0x1e8>)
 80175ca:	fb29 5507 	smlad	r5, r9, r7, r5
 80175ce:	4f35      	ldr	r7, [pc, #212]	; (80176a4 <D80_1CH_HTONS_VOL_HP+0x1ec>)
 80175d0:	fb28 5507 	smlad	r5, r8, r7, r5
 80175d4:	4f34      	ldr	r7, [pc, #208]	; (80176a8 <D80_1CH_HTONS_VOL_HP+0x1f0>)
 80175d6:	fb22 5507 	smlad	r5, r2, r7, r5
 80175da:	f44f 3a80 	mov.w	sl, #65536	; 0x10000
 80175de:	fb26 5b0a 	smlad	fp, r6, sl, r5
 80175e2:	4d32      	ldr	r5, [pc, #200]	; (80176ac <D80_1CH_HTONS_VOL_HP+0x1f4>)
 80175e4:	fb23 cc05 	smlad	ip, r3, r5, ip
 80175e8:	4d31      	ldr	r5, [pc, #196]	; (80176b0 <D80_1CH_HTONS_VOL_HP+0x1f8>)
 80175ea:	fb29 cc05 	smlad	ip, r9, r5, ip
 80175ee:	f04f 154b 	mov.w	r5, #4915275	; 0x4b004b
 80175f2:	fb28 c505 	smlad	r5, r8, r5, ip
 80175f6:	4f2f      	ldr	r7, [pc, #188]	; (80176b4 <D80_1CH_HTONS_VOL_HP+0x1fc>)
 80175f8:	fb22 5507 	smlad	r5, r2, r7, r5
 80175fc:	4f2e      	ldr	r7, [pc, #184]	; (80176b8 <D80_1CH_HTONS_VOL_HP+0x200>)
 80175fe:	fb26 5507 	smlad	r5, r6, r7, r5
 8017602:	f04f 0a01 	mov.w	sl, #1
 8017606:	9501      	str	r5, [sp, #4]
 8017608:	fb23 fa0a 	smuad	sl, r3, sl
 801760c:	4b2b      	ldr	r3, [pc, #172]	; (80176bc <D80_1CH_HTONS_VOL_HP+0x204>)
 801760e:	fb29 a903 	smlad	r9, r9, r3, sl
 8017612:	4d2b      	ldr	r5, [pc, #172]	; (80176c0 <D80_1CH_HTONS_VOL_HP+0x208>)
 8017614:	fb28 9805 	smlad	r8, r8, r5, r9
 8017618:	4d2a      	ldr	r5, [pc, #168]	; (80176c4 <D80_1CH_HTONS_VOL_HP+0x20c>)
 801761a:	fb22 8205 	smlad	r2, r2, r5, r8
 801761e:	4b2a      	ldr	r3, [pc, #168]	; (80176c8 <D80_1CH_HTONS_VOL_HP+0x210>)
 8017620:	fb26 2c03 	smlad	ip, r6, r3, r2
 8017624:	9b00      	ldr	r3, [sp, #0]
 8017626:	9d04      	ldr	r5, [sp, #16]
 8017628:	f5ab 3a7a 	sub.w	sl, fp, #256000	; 0x3e800
 801762c:	4453      	add	r3, sl
 801762e:	461a      	mov	r2, r3
 8017630:	9b02      	ldr	r3, [sp, #8]
 8017632:	f8cd a008 	str.w	sl, [sp, #8]
 8017636:	1ad2      	subs	r2, r2, r3
 8017638:	17d7      	asrs	r7, r2, #31
 801763a:	fba2 2305 	umull	r2, r3, r2, r5
 801763e:	fb05 3307 	mla	r3, r5, r7, r3
 8017642:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 8017646:	f143 0300 	adc.w	r3, r3, #0
 801764a:	9d03      	ldr	r5, [sp, #12]
 801764c:	029a      	lsls	r2, r3, #10
 801764e:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8017652:	2700      	movs	r7, #0
 8017654:	005b      	lsls	r3, r3, #1
 8017656:	fbc5 6702 	smlal	r6, r7, r5, r2
 801765a:	10ba      	asrs	r2, r7, #2
 801765c:	9300      	str	r3, [sp, #0]
 801765e:	f302 020f 	ssat	r2, #16, r2
 8017662:	9b05      	ldr	r3, [sp, #20]
 8017664:	f821 2b02 	strh.w	r2, [r1], #2
 8017668:	4299      	cmp	r1, r3
 801766a:	f47f af45 	bne.w	80174f8 <D80_1CH_HTONS_VOL_HP+0x40>
 801766e:	4623      	mov	r3, r4
 8017670:	9907      	ldr	r1, [sp, #28]
 8017672:	9801      	ldr	r0, [sp, #4]
 8017674:	60c8      	str	r0, [r1, #12]
 8017676:	9a00      	ldr	r2, [sp, #0]
 8017678:	f8c1 c008 	str.w	ip, [r1, #8]
 801767c:	4608      	mov	r0, r1
 801767e:	61cb      	str	r3, [r1, #28]
 8017680:	610a      	str	r2, [r1, #16]
 8017682:	f8c1 a014 	str.w	sl, [r1, #20]
 8017686:	9906      	ldr	r1, [sp, #24]
 8017688:	6181      	str	r1, [r0, #24]
 801768a:	2000      	movs	r0, #0
 801768c:	b009      	add	sp, #36	; 0x24
 801768e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017692:	f8dd a008 	ldr.w	sl, [sp, #8]
 8017696:	e7eb      	b.n	8017670 <D80_1CH_HTONS_VOL_HP+0x1b8>
 8017698:	20000484 	.word	0x20000484
 801769c:	002d0024 	.word	0x002d0024
 80176a0:	001c0015 	.word	0x001c0015
 80176a4:	000f000a 	.word	0x000f000a
 80176a8:	00060003 	.word	0x00060003
 80176ac:	0037003f 	.word	0x0037003f
 80176b0:	00450049 	.word	0x00450049
 80176b4:	00490045 	.word	0x00490045
 80176b8:	003f0037 	.word	0x003f0037
 80176bc:	00030006 	.word	0x00030006
 80176c0:	000a000f 	.word	0x000a000f
 80176c4:	0015001c 	.word	0x0015001c
 80176c8:	0024002d 	.word	0x0024002d

080176cc <D128_1CH_HTONS_VOL_HP>:
 80176cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80176d0:	b093      	sub	sp, #76	; 0x4c
 80176d2:	4614      	mov	r4, r2
 80176d4:	9211      	str	r2, [sp, #68]	; 0x44
 80176d6:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 80176d8:	6912      	ldr	r2, [r2, #16]
 80176da:	9203      	str	r2, [sp, #12]
 80176dc:	4622      	mov	r2, r4
 80176de:	4615      	mov	r5, r2
 80176e0:	6964      	ldr	r4, [r4, #20]
 80176e2:	9406      	str	r4, [sp, #24]
 80176e4:	4614      	mov	r4, r2
 80176e6:	6992      	ldr	r2, [r2, #24]
 80176e8:	9210      	str	r2, [sp, #64]	; 0x40
 80176ea:	68ea      	ldr	r2, [r5, #12]
 80176ec:	9204      	str	r2, [sp, #16]
 80176ee:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 80176f0:	69e6      	ldr	r6, [r4, #28]
 80176f2:	920d      	str	r2, [sp, #52]	; 0x34
 80176f4:	68a4      	ldr	r4, [r4, #8]
 80176f6:	6a2a      	ldr	r2, [r5, #32]
 80176f8:	9405      	str	r4, [sp, #20]
 80176fa:	920e      	str	r2, [sp, #56]	; 0x38
 80176fc:	2b00      	cmp	r3, #0
 80176fe:	f000 8145 	beq.w	801798c <D128_1CH_HTONS_VOL_HP+0x2c0>
 8017702:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 8017706:	930f      	str	r3, [sp, #60]	; 0x3c
 8017708:	f8df 82dc 	ldr.w	r8, [pc, #732]	; 80179e8 <D128_1CH_HTONS_VOL_HP+0x31c>
 801770c:	9107      	str	r1, [sp, #28]
 801770e:	f100 0310 	add.w	r3, r0, #16
 8017712:	4699      	mov	r9, r3
 8017714:	f1a9 0110 	sub.w	r1, r9, #16
 8017718:	c90e      	ldmia	r1, {r1, r2, r3}
 801771a:	f859 0c04 	ldr.w	r0, [r9, #-4]
 801771e:	ba49      	rev16	r1, r1
 8017720:	ba52      	rev16	r2, r2
 8017722:	ba5b      	rev16	r3, r3
 8017724:	fa90 fa90 	rev16.w	sl, r0
 8017728:	f3c1 2007 	ubfx	r0, r1, #8, #8
 801772c:	b2cc      	uxtb	r4, r1
 801772e:	f858 5020 	ldr.w	r5, [r8, r0, lsl #2]
 8017732:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
 8017736:	f3c1 4007 	ubfx	r0, r1, #16, #8
 801773a:	0e09      	lsrs	r1, r1, #24
 801773c:	4426      	add	r6, r4
 801773e:	f858 4020 	ldr.w	r4, [r8, r0, lsl #2]
 8017742:	f858 7021 	ldr.w	r7, [r8, r1, lsl #2]
 8017746:	b2d0      	uxtb	r0, r2
 8017748:	eb05 2596 	add.w	r5, r5, r6, lsr #10
 801774c:	eb04 2b95 	add.w	fp, r4, r5, lsr #10
 8017750:	f3c2 2107 	ubfx	r1, r2, #8, #8
 8017754:	f858 4020 	ldr.w	r4, [r8, r0, lsl #2]
 8017758:	f858 1021 	ldr.w	r1, [r8, r1, lsl #2]
 801775c:	eb07 279b 	add.w	r7, r7, fp, lsr #10
 8017760:	f3c2 4007 	ubfx	r0, r2, #16, #8
 8017764:	0e12      	lsrs	r2, r2, #24
 8017766:	eb04 2497 	add.w	r4, r4, r7, lsr #10
 801776a:	9701      	str	r7, [sp, #4]
 801776c:	f858 0020 	ldr.w	r0, [r8, r0, lsl #2]
 8017770:	4627      	mov	r7, r4
 8017772:	f858 4022 	ldr.w	r4, [r8, r2, lsl #2]
 8017776:	9702      	str	r7, [sp, #8]
 8017778:	b2da      	uxtb	r2, r3
 801777a:	eb01 2197 	add.w	r1, r1, r7, lsr #10
 801777e:	eb00 2c91 	add.w	ip, r0, r1, lsr #10
 8017782:	f858 0022 	ldr.w	r0, [r8, r2, lsl #2]
 8017786:	eb04 249c 	add.w	r4, r4, ip, lsr #10
 801778a:	eb00 2e94 	add.w	lr, r0, r4, lsr #10
 801778e:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8017792:	f3c3 4007 	ubfx	r0, r3, #16, #8
 8017796:	0e1b      	lsrs	r3, r3, #24
 8017798:	f858 7020 	ldr.w	r7, [r8, r0, lsl #2]
 801779c:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
 80177a0:	f858 0023 	ldr.w	r0, [r8, r3, lsl #2]
 80177a4:	fa5f f38a 	uxtb.w	r3, sl
 80177a8:	f3c6 0609 	ubfx	r6, r6, #0, #10
 80177ac:	960a      	str	r6, [sp, #40]	; 0x28
 80177ae:	eb02 229e 	add.w	r2, r2, lr, lsr #10
 80177b2:	f858 6023 	ldr.w	r6, [r8, r3, lsl #2]
 80177b6:	f3c5 0509 	ubfx	r5, r5, #0, #10
 80177ba:	f3ca 2307 	ubfx	r3, sl, #8, #8
 80177be:	950b      	str	r5, [sp, #44]	; 0x2c
 80177c0:	eb07 2792 	add.w	r7, r7, r2, lsr #10
 80177c4:	f3ca 4507 	ubfx	r5, sl, #16, #8
 80177c8:	eb00 2097 	add.w	r0, r0, r7, lsr #10
 80177cc:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 80177d0:	f858 5025 	ldr.w	r5, [r8, r5, lsl #2]
 80177d4:	ea4f 6a1a 	mov.w	sl, sl, lsr #24
 80177d8:	eb06 2690 	add.w	r6, r6, r0, lsr #10
 80177dc:	eb03 2396 	add.w	r3, r3, r6, lsr #10
 80177e0:	f858 a02a 	ldr.w	sl, [r8, sl, lsl #2]
 80177e4:	9308      	str	r3, [sp, #32]
 80177e6:	eb05 2593 	add.w	r5, r5, r3, lsr #10
 80177ea:	9b01      	ldr	r3, [sp, #4]
 80177ec:	eb0a 2a95 	add.w	sl, sl, r5, lsr #10
 80177f0:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 80177f4:	f3c3 0a09 	ubfx	sl, r3, #0, #10
 80177f8:	9b02      	ldr	r3, [sp, #8]
 80177fa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80177fe:	9302      	str	r3, [sp, #8]
 8017800:	9b08      	ldr	r3, [sp, #32]
 8017802:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8017806:	9308      	str	r3, [sp, #32]
 8017808:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801780a:	f3c5 0509 	ubfx	r5, r5, #0, #10
 801780e:	950c      	str	r5, [sp, #48]	; 0x30
 8017810:	461d      	mov	r5, r3
 8017812:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017814:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8017818:	f3c2 0209 	ubfx	r2, r2, #0, #10
 801781c:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
 8017820:	ea42 420e 	orr.w	r2, r2, lr, lsl #16
 8017824:	9301      	str	r3, [sp, #4]
 8017826:	9b02      	ldr	r3, [sp, #8]
 8017828:	9202      	str	r2, [sp, #8]
 801782a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801782c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801782e:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8017832:	f3c0 0009 	ubfx	r0, r0, #0, #10
 8017836:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 801783a:	f3c1 0109 	ubfx	r1, r1, #0, #10
 801783e:	f3c2 0709 	ubfx	r7, r2, #0, #10
 8017842:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8017846:	ea47 4505 	orr.w	r5, r7, r5, lsl #16
 801784a:	9b08      	ldr	r3, [sp, #32]
 801784c:	9f01      	ldr	r7, [sp, #4]
 801784e:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 8017852:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8017856:	f3c6 0609 	ubfx	r6, r6, #0, #10
 801785a:	f3c4 0409 	ubfx	r4, r4, #0, #10
 801785e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8017862:	46be      	mov	lr, r7
 8017864:	0a96      	lsrs	r6, r2, #10
 8017866:	ea4a 4a0b 	orr.w	sl, sl, fp, lsl #16
 801786a:	ea44 440c 	orr.w	r4, r4, ip, lsl #16
 801786e:	4f49      	ldr	r7, [pc, #292]	; (8017994 <D128_1CH_HTONS_VOL_HP+0x2c8>)
 8017870:	9a04      	ldr	r2, [sp, #16]
 8017872:	fb2e 2e07 	smlad	lr, lr, r7, r2
 8017876:	4a48      	ldr	r2, [pc, #288]	; (8017998 <D128_1CH_HTONS_VOL_HP+0x2cc>)
 8017878:	fb2a ee02 	smlad	lr, sl, r2, lr
 801787c:	4a47      	ldr	r2, [pc, #284]	; (801799c <D128_1CH_HTONS_VOL_HP+0x2d0>)
 801787e:	fb21 ee02 	smlad	lr, r1, r2, lr
 8017882:	4a47      	ldr	r2, [pc, #284]	; (80179a0 <D128_1CH_HTONS_VOL_HP+0x2d4>)
 8017884:	fb24 ee02 	smlad	lr, r4, r2, lr
 8017888:	4a46      	ldr	r2, [pc, #280]	; (80179a4 <D128_1CH_HTONS_VOL_HP+0x2d8>)
 801788a:	9f02      	ldr	r7, [sp, #8]
 801788c:	fb27 ee02 	smlad	lr, r7, r2, lr
 8017890:	4a45      	ldr	r2, [pc, #276]	; (80179a8 <D128_1CH_HTONS_VOL_HP+0x2dc>)
 8017892:	fb20 ee02 	smlad	lr, r0, r2, lr
 8017896:	4a45      	ldr	r2, [pc, #276]	; (80179ac <D128_1CH_HTONS_VOL_HP+0x2e0>)
 8017898:	fb23 e702 	smlad	r7, r3, r2, lr
 801789c:	f44f 3e80 	mov.w	lr, #65536	; 0x10000
 80178a0:	fb25 7e0e 	smlad	lr, r5, lr, r7
 80178a4:	9f01      	ldr	r7, [sp, #4]
 80178a6:	4a42      	ldr	r2, [pc, #264]	; (80179b0 <D128_1CH_HTONS_VOL_HP+0x2e4>)
 80178a8:	46bc      	mov	ip, r7
 80178aa:	9f05      	ldr	r7, [sp, #20]
 80178ac:	fb2c 7c02 	smlad	ip, ip, r2, r7
 80178b0:	4a40      	ldr	r2, [pc, #256]	; (80179b4 <D128_1CH_HTONS_VOL_HP+0x2e8>)
 80178b2:	fb2a cc02 	smlad	ip, sl, r2, ip
 80178b6:	4f40      	ldr	r7, [pc, #256]	; (80179b8 <D128_1CH_HTONS_VOL_HP+0x2ec>)
 80178b8:	fb21 cc07 	smlad	ip, r1, r7, ip
 80178bc:	4f3f      	ldr	r7, [pc, #252]	; (80179bc <D128_1CH_HTONS_VOL_HP+0x2f0>)
 80178be:	fb24 cc07 	smlad	ip, r4, r7, ip
 80178c2:	4f3f      	ldr	r7, [pc, #252]	; (80179c0 <D128_1CH_HTONS_VOL_HP+0x2f4>)
 80178c4:	9a02      	ldr	r2, [sp, #8]
 80178c6:	fb22 cc07 	smlad	ip, r2, r7, ip
 80178ca:	4f3e      	ldr	r7, [pc, #248]	; (80179c4 <D128_1CH_HTONS_VOL_HP+0x2f8>)
 80178cc:	fb20 cc07 	smlad	ip, r0, r7, ip
 80178d0:	4f3d      	ldr	r7, [pc, #244]	; (80179c8 <D128_1CH_HTONS_VOL_HP+0x2fc>)
 80178d2:	fb23 c707 	smlad	r7, r3, r7, ip
 80178d6:	f8df c114 	ldr.w	ip, [pc, #276]	; 80179ec <D128_1CH_HTONS_VOL_HP+0x320>
 80178da:	fb25 720c 	smlad	r2, r5, ip, r7
 80178de:	f04f 0b01 	mov.w	fp, #1
 80178e2:	9204      	str	r2, [sp, #16]
 80178e4:	9f01      	ldr	r7, [sp, #4]
 80178e6:	fb27 fb0b 	smuad	fp, r7, fp
 80178ea:	4f38      	ldr	r7, [pc, #224]	; (80179cc <D128_1CH_HTONS_VOL_HP+0x300>)
 80178ec:	fb2a ba07 	smlad	sl, sl, r7, fp
 80178f0:	4f37      	ldr	r7, [pc, #220]	; (80179d0 <D128_1CH_HTONS_VOL_HP+0x304>)
 80178f2:	fb21 aa07 	smlad	sl, r1, r7, sl
 80178f6:	4f37      	ldr	r7, [pc, #220]	; (80179d4 <D128_1CH_HTONS_VOL_HP+0x308>)
 80178f8:	fb24 aa07 	smlad	sl, r4, r7, sl
 80178fc:	4f36      	ldr	r7, [pc, #216]	; (80179d8 <D128_1CH_HTONS_VOL_HP+0x30c>)
 80178fe:	9a02      	ldr	r2, [sp, #8]
 8017900:	fb22 a707 	smlad	r7, r2, r7, sl
 8017904:	4a35      	ldr	r2, [pc, #212]	; (80179dc <D128_1CH_HTONS_VOL_HP+0x310>)
 8017906:	fb20 7702 	smlad	r7, r0, r2, r7
 801790a:	4a35      	ldr	r2, [pc, #212]	; (80179e0 <D128_1CH_HTONS_VOL_HP+0x314>)
 801790c:	fb23 7702 	smlad	r7, r3, r2, r7
 8017910:	4b34      	ldr	r3, [pc, #208]	; (80179e4 <D128_1CH_HTONS_VOL_HP+0x318>)
 8017912:	fb25 7303 	smlad	r3, r5, r3, r7
 8017916:	9305      	str	r3, [sp, #20]
 8017918:	9b03      	ldr	r3, [sp, #12]
 801791a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801791c:	f5ae 1e80 	sub.w	lr, lr, #1048576	; 0x100000
 8017920:	4473      	add	r3, lr
 8017922:	461a      	mov	r2, r3
 8017924:	9b06      	ldr	r3, [sp, #24]
 8017926:	f8cd e018 	str.w	lr, [sp, #24]
 801792a:	1ad2      	subs	r2, r2, r3
 801792c:	17d1      	asrs	r1, r2, #31
 801792e:	fba2 2304 	umull	r2, r3, r2, r4
 8017932:	fb04 3301 	mla	r3, r4, r1, r3
 8017936:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 801793a:	f143 0300 	adc.w	r3, r3, #0
 801793e:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8017940:	021a      	lsls	r2, r3, #8
 8017942:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8017946:	2100      	movs	r1, #0
 8017948:	fbc4 0102 	smlal	r0, r1, r4, r2
 801794c:	108a      	asrs	r2, r1, #2
 801794e:	9907      	ldr	r1, [sp, #28]
 8017950:	f302 020f 	ssat	r2, #16, r2
 8017954:	005b      	lsls	r3, r3, #1
 8017956:	f821 2b02 	strh.w	r2, [r1], #2
 801795a:	9303      	str	r3, [sp, #12]
 801795c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801795e:	9107      	str	r1, [sp, #28]
 8017960:	4299      	cmp	r1, r3
 8017962:	f109 0910 	add.w	r9, r9, #16
 8017966:	f47f aed5 	bne.w	8017714 <D128_1CH_HTONS_VOL_HP+0x48>
 801796a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801796c:	9905      	ldr	r1, [sp, #20]
 801796e:	6091      	str	r1, [r2, #8]
 8017970:	9904      	ldr	r1, [sp, #16]
 8017972:	60d1      	str	r1, [r2, #12]
 8017974:	4613      	mov	r3, r2
 8017976:	61d6      	str	r6, [r2, #28]
 8017978:	9910      	ldr	r1, [sp, #64]	; 0x40
 801797a:	9a03      	ldr	r2, [sp, #12]
 801797c:	611a      	str	r2, [r3, #16]
 801797e:	2000      	movs	r0, #0
 8017980:	f8c3 e014 	str.w	lr, [r3, #20]
 8017984:	6199      	str	r1, [r3, #24]
 8017986:	b013      	add	sp, #76	; 0x4c
 8017988:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801798c:	f8dd e018 	ldr.w	lr, [sp, #24]
 8017990:	e7eb      	b.n	801796a <D128_1CH_HTONS_VOL_HP+0x29e>
 8017992:	bf00      	nop
 8017994:	00780069 	.word	0x00780069
 8017998:	005b004e 	.word	0x005b004e
 801799c:	00420037 	.word	0x00420037
 80179a0:	002d0024 	.word	0x002d0024
 80179a4:	001c0015 	.word	0x001c0015
 80179a8:	000f000a 	.word	0x000f000a
 80179ac:	00060003 	.word	0x00060003
 80179b0:	00880096 	.word	0x00880096
 80179b4:	00a200ac 	.word	0x00a200ac
 80179b8:	00b400ba 	.word	0x00b400ba
 80179bc:	00be00c0 	.word	0x00be00c0
 80179c0:	00c000be 	.word	0x00c000be
 80179c4:	00ba00b4 	.word	0x00ba00b4
 80179c8:	00ac00a2 	.word	0x00ac00a2
 80179cc:	00030006 	.word	0x00030006
 80179d0:	000a000f 	.word	0x000a000f
 80179d4:	0015001c 	.word	0x0015001c
 80179d8:	0024002d 	.word	0x0024002d
 80179dc:	00370042 	.word	0x00370042
 80179e0:	004e005b 	.word	0x004e005b
 80179e4:	00690078 	.word	0x00690078
 80179e8:	20000484 	.word	0x20000484
 80179ec:	00960088 	.word	0x00960088

080179f0 <PDM_Filter_Init>:
 80179f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80179f2:	2240      	movs	r2, #64	; 0x40
 80179f4:	4604      	mov	r4, r0
 80179f6:	2100      	movs	r1, #0
 80179f8:	300c      	adds	r0, #12
 80179fa:	f002 f839 	bl	8019a70 <memset>
 80179fe:	493b      	ldr	r1, [pc, #236]	; (8017aec <PDM_Filter_Init+0xfc>)
 8017a00:	483b      	ldr	r0, [pc, #236]	; (8017af0 <PDM_Filter_Init+0x100>)
 8017a02:	f000 f98d 	bl	8017d20 <CRC_Lock>
 8017a06:	8822      	ldrh	r2, [r4, #0]
 8017a08:	8963      	ldrh	r3, [r4, #10]
 8017a0a:	4938      	ldr	r1, [pc, #224]	; (8017aec <PDM_Filter_Init+0xfc>)
 8017a0c:	8925      	ldrh	r5, [r4, #8]
 8017a0e:	86a3      	strh	r3, [r4, #52]	; 0x34
 8017a10:	2801      	cmp	r0, #1
 8017a12:	f04f 0300 	mov.w	r3, #0
 8017a16:	bf18      	it	ne
 8017a18:	2100      	movne	r1, #0
 8017a1a:	2a01      	cmp	r2, #1
 8017a1c:	6461      	str	r1, [r4, #68]	; 0x44
 8017a1e:	86e5      	strh	r5, [r4, #54]	; 0x36
 8017a20:	61a3      	str	r3, [r4, #24]
 8017a22:	6123      	str	r3, [r4, #16]
 8017a24:	6163      	str	r3, [r4, #20]
 8017a26:	60e3      	str	r3, [r4, #12]
 8017a28:	6263      	str	r3, [r4, #36]	; 0x24
 8017a2a:	61e3      	str	r3, [r4, #28]
 8017a2c:	6223      	str	r3, [r4, #32]
 8017a2e:	6423      	str	r3, [r4, #64]	; 0x40
 8017a30:	d918      	bls.n	8017a64 <PDM_Filter_Init+0x74>
 8017a32:	2003      	movs	r0, #3
 8017a34:	2302      	movs	r3, #2
 8017a36:	8862      	ldrh	r2, [r4, #2]
 8017a38:	2a01      	cmp	r2, #1
 8017a3a:	d91d      	bls.n	8017a78 <PDM_Filter_Init+0x88>
 8017a3c:	2140      	movs	r1, #64	; 0x40
 8017a3e:	2300      	movs	r3, #0
 8017a40:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8017a42:	f1b2 1f01 	cmp.w	r2, #65537	; 0x10001
 8017a46:	6862      	ldr	r2, [r4, #4]
 8017a48:	bf04      	itt	eq
 8017a4a:	6421      	streq	r1, [r4, #64]	; 0x40
 8017a4c:	460b      	moveq	r3, r1
 8017a4e:	b11a      	cbz	r2, 8017a58 <PDM_Filter_Init+0x68>
 8017a50:	f043 0310 	orr.w	r3, r3, #16
 8017a54:	6423      	str	r3, [r4, #64]	; 0x40
 8017a56:	62e2      	str	r2, [r4, #44]	; 0x2c
 8017a58:	2200      	movs	r2, #0
 8017a5a:	8722      	strh	r2, [r4, #56]	; 0x38
 8017a5c:	b908      	cbnz	r0, 8017a62 <PDM_Filter_Init+0x72>
 8017a5e:	3380      	adds	r3, #128	; 0x80
 8017a60:	6423      	str	r3, [r4, #64]	; 0x40
 8017a62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017a64:	4d23      	ldr	r5, [pc, #140]	; (8017af4 <PDM_Filter_Init+0x104>)
 8017a66:	d010      	beq.n	8017a8a <PDM_Filter_Init+0x9a>
 8017a68:	782a      	ldrb	r2, [r5, #0]
 8017a6a:	2a01      	cmp	r2, #1
 8017a6c:	d027      	beq.n	8017abe <PDM_Filter_Init+0xce>
 8017a6e:	8862      	ldrh	r2, [r4, #2]
 8017a70:	2a01      	cmp	r2, #1
 8017a72:	f04f 0001 	mov.w	r0, #1
 8017a76:	d8e1      	bhi.n	8017a3c <PDM_Filter_Init+0x4c>
 8017a78:	d001      	beq.n	8017a7e <PDM_Filter_Init+0x8e>
 8017a7a:	4618      	mov	r0, r3
 8017a7c:	e7de      	b.n	8017a3c <PDM_Filter_Init+0x4c>
 8017a7e:	2220      	movs	r2, #32
 8017a80:	4618      	mov	r0, r3
 8017a82:	6422      	str	r2, [r4, #64]	; 0x40
 8017a84:	4613      	mov	r3, r2
 8017a86:	2160      	movs	r1, #96	; 0x60
 8017a88:	e7da      	b.n	8017a40 <PDM_Filter_Init+0x50>
 8017a8a:	7829      	ldrb	r1, [r5, #0]
 8017a8c:	2900      	cmp	r1, #0
 8017a8e:	d1ee      	bne.n	8017a6e <PDM_Filter_Init+0x7e>
 8017a90:	4919      	ldr	r1, [pc, #100]	; (8017af8 <PDM_Filter_Init+0x108>)
 8017a92:	f8df e06c 	ldr.w	lr, [pc, #108]	; 8017b00 <PDM_Filter_Init+0x110>
 8017a96:	4f19      	ldr	r7, [pc, #100]	; (8017afc <PDM_Filter_Init+0x10c>)
 8017a98:	f501 6680 	add.w	r6, r1, #1024	; 0x400
 8017a9c:	684a      	ldr	r2, [r1, #4]
 8017a9e:	ea0e 5302 	and.w	r3, lr, r2, lsl #20
 8017aa2:	ea02 0007 	and.w	r0, r2, r7
 8017aa6:	4303      	orrs	r3, r0
 8017aa8:	f3c2 5209 	ubfx	r2, r2, #20, #10
 8017aac:	4413      	add	r3, r2
 8017aae:	f841 3f04 	str.w	r3, [r1, #4]!
 8017ab2:	428e      	cmp	r6, r1
 8017ab4:	d1f2      	bne.n	8017a9c <PDM_Filter_Init+0xac>
 8017ab6:	2001      	movs	r0, #1
 8017ab8:	7028      	strb	r0, [r5, #0]
 8017aba:	2300      	movs	r3, #0
 8017abc:	e7bb      	b.n	8017a36 <PDM_Filter_Init+0x46>
 8017abe:	490e      	ldr	r1, [pc, #56]	; (8017af8 <PDM_Filter_Init+0x108>)
 8017ac0:	f8df e03c 	ldr.w	lr, [pc, #60]	; 8017b00 <PDM_Filter_Init+0x110>
 8017ac4:	4f0d      	ldr	r7, [pc, #52]	; (8017afc <PDM_Filter_Init+0x10c>)
 8017ac6:	f501 6680 	add.w	r6, r1, #1024	; 0x400
 8017aca:	684a      	ldr	r2, [r1, #4]
 8017acc:	ea0e 5302 	and.w	r3, lr, r2, lsl #20
 8017ad0:	ea02 0007 	and.w	r0, r2, r7
 8017ad4:	4303      	orrs	r3, r0
 8017ad6:	f3c2 5209 	ubfx	r2, r2, #20, #10
 8017ada:	4413      	add	r3, r2
 8017adc:	f841 3f04 	str.w	r3, [r1, #4]!
 8017ae0:	428e      	cmp	r6, r1
 8017ae2:	d1f2      	bne.n	8017aca <PDM_Filter_Init+0xda>
 8017ae4:	2300      	movs	r3, #0
 8017ae6:	702b      	strb	r3, [r5, #0]
 8017ae8:	e7c1      	b.n	8017a6e <PDM_Filter_Init+0x7e>
 8017aea:	bf00      	nop
 8017aec:	b5e8b5cd 	.word	0xb5e8b5cd
 8017af0:	f407a5c2 	.word	0xf407a5c2
 8017af4:	2000990c 	.word	0x2000990c
 8017af8:	20000480 	.word	0x20000480
 8017afc:	000ffc00 	.word	0x000ffc00
 8017b00:	3ff00000 	.word	0x3ff00000

08017b04 <PDM_Filter_setConfig>:
 8017b04:	4b66      	ldr	r3, [pc, #408]	; (8017ca0 <PDM_Filter_setConfig+0x19c>)
 8017b06:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8017b08:	429a      	cmp	r2, r3
 8017b0a:	d001      	beq.n	8017b10 <PDM_Filter_setConfig+0xc>
 8017b0c:	2004      	movs	r0, #4
 8017b0e:	4770      	bx	lr
 8017b10:	b530      	push	{r4, r5, lr}
 8017b12:	880a      	ldrh	r2, [r1, #0]
 8017b14:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8017b16:	ed2d 8b04 	vpush	{d8-d9}
 8017b1a:	4604      	mov	r4, r0
 8017b1c:	460d      	mov	r5, r1
 8017b1e:	1e51      	subs	r1, r2, #1
 8017b20:	f423 7080 	bic.w	r0, r3, #256	; 0x100
 8017b24:	2906      	cmp	r1, #6
 8017b26:	b083      	sub	sp, #12
 8017b28:	6420      	str	r0, [r4, #64]	; 0x40
 8017b2a:	d91a      	bls.n	8017b62 <PDM_Filter_setConfig+0x5e>
 8017b2c:	2008      	movs	r0, #8
 8017b2e:	f9b4 1038 	ldrsh.w	r1, [r4, #56]	; 0x38
 8017b32:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 8017b36:	4299      	cmp	r1, r3
 8017b38:	d07e      	beq.n	8017c38 <PDM_Filter_setConfig+0x134>
 8017b3a:	f113 0f0c 	cmn.w	r3, #12
 8017b3e:	da2a      	bge.n	8017b96 <PDM_Filter_setConfig+0x92>
 8017b40:	f64f 73f4 	movw	r3, #65524	; 0xfff4
 8017b44:	3040      	adds	r0, #64	; 0x40
 8017b46:	80ab      	strh	r3, [r5, #4]
 8017b48:	8622      	strh	r2, [r4, #48]	; 0x30
 8017b4a:	886b      	ldrh	r3, [r5, #2]
 8017b4c:	8663      	strh	r3, [r4, #50]	; 0x32
 8017b4e:	b920      	cbnz	r0, 8017b5a <PDM_Filter_setConfig+0x56>
 8017b50:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8017b52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8017b56:	6423      	str	r3, [r4, #64]	; 0x40
 8017b58:	2000      	movs	r0, #0
 8017b5a:	b003      	add	sp, #12
 8017b5c:	ecbd 8b04 	vpop	{d8-d9}
 8017b60:	bd30      	pop	{r4, r5, pc}
 8017b62:	8e21      	ldrh	r1, [r4, #48]	; 0x30
 8017b64:	4291      	cmp	r1, r2
 8017b66:	d06c      	beq.n	8017c42 <PDM_Filter_setConfig+0x13e>
 8017b68:	f423 7387 	bic.w	r3, r3, #270	; 0x10e
 8017b6c:	f023 0301 	bic.w	r3, r3, #1
 8017b70:	4313      	orrs	r3, r2
 8017b72:	f003 0170 	and.w	r1, r3, #112	; 0x70
 8017b76:	6423      	str	r3, [r4, #64]	; 0x40
 8017b78:	2970      	cmp	r1, #112	; 0x70
 8017b7a:	f003 030f 	and.w	r3, r3, #15
 8017b7e:	f103 33ff 	add.w	r3, r3, #4294967295
 8017b82:	d066      	beq.n	8017c52 <PDM_Filter_setConfig+0x14e>
 8017b84:	2b06      	cmp	r3, #6
 8017b86:	f200 8089 	bhi.w	8017c9c <PDM_Filter_setConfig+0x198>
 8017b8a:	e8df f003 	tbb	[pc, r3]
 8017b8e:	4f52      	.short	0x4f52
 8017b90:	3d43494c 	.word	0x3d43494c
 8017b94:	46          	.byte	0x46
 8017b95:	00          	.byte	0x00
 8017b96:	2b33      	cmp	r3, #51	; 0x33
 8017b98:	dc32      	bgt.n	8017c00 <PDM_Filter_setConfig+0xfc>
 8017b9a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8017b9c:	f002 020f 	and.w	r2, r2, #15
 8017ba0:	3a01      	subs	r2, #1
 8017ba2:	2a06      	cmp	r2, #6
 8017ba4:	d872      	bhi.n	8017c8c <PDM_Filter_setConfig+0x188>
 8017ba6:	493f      	ldr	r1, [pc, #252]	; (8017ca4 <PDM_Filter_setConfig+0x1a0>)
 8017ba8:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8017bac:	ed92 9a00 	vldr	s18, [r2]
 8017bb0:	ed92 8a07 	vldr	s16, [r2, #28]
 8017bb4:	9001      	str	r0, [sp, #4]
 8017bb6:	ee07 3a90 	vmov	s15, r3
 8017bba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017bbe:	eef3 0a04 	vmov.f32	s1, #52	; 0x41a00000  20.0
 8017bc2:	eec7 0aa0 	vdiv.f32	s1, s15, s1
 8017bc6:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 8017bca:	f006 f933 	bl	801de34 <powf>
 8017bce:	eddf 0a36 	vldr	s1, [pc, #216]	; 8017ca8 <PDM_Filter_setConfig+0x1a4>
 8017bd2:	eef0 8a40 	vmov.f32	s17, s0
 8017bd6:	ee70 0ac9 	vsub.f32	s1, s1, s18
 8017bda:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8017bde:	f006 f929 	bl	801de34 <powf>
 8017be2:	ee28 8a28 	vmul.f32	s16, s16, s17
 8017be6:	ee28 0a00 	vmul.f32	s0, s16, s0
 8017bea:	f005 ffc9 	bl	801db80 <roundf>
 8017bee:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 8017bf2:	88ab      	ldrh	r3, [r5, #4]
 8017bf4:	882a      	ldrh	r2, [r5, #0]
 8017bf6:	9801      	ldr	r0, [sp, #4]
 8017bf8:	ed84 0a0f 	vstr	s0, [r4, #60]	; 0x3c
 8017bfc:	8723      	strh	r3, [r4, #56]	; 0x38
 8017bfe:	e7a3      	b.n	8017b48 <PDM_Filter_setConfig+0x44>
 8017c00:	2333      	movs	r3, #51	; 0x33
 8017c02:	3040      	adds	r0, #64	; 0x40
 8017c04:	80ab      	strh	r3, [r5, #4]
 8017c06:	e79f      	b.n	8017b48 <PDM_Filter_setConfig+0x44>
 8017c08:	4b28      	ldr	r3, [pc, #160]	; (8017cac <PDM_Filter_setConfig+0x1a8>)
 8017c0a:	64a3      	str	r3, [r4, #72]	; 0x48
 8017c0c:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 8017c10:	2000      	movs	r0, #0
 8017c12:	e792      	b.n	8017b3a <PDM_Filter_setConfig+0x36>
 8017c14:	4b26      	ldr	r3, [pc, #152]	; (8017cb0 <PDM_Filter_setConfig+0x1ac>)
 8017c16:	64a3      	str	r3, [r4, #72]	; 0x48
 8017c18:	e7f8      	b.n	8017c0c <PDM_Filter_setConfig+0x108>
 8017c1a:	4b26      	ldr	r3, [pc, #152]	; (8017cb4 <PDM_Filter_setConfig+0x1b0>)
 8017c1c:	64a3      	str	r3, [r4, #72]	; 0x48
 8017c1e:	e7f5      	b.n	8017c0c <PDM_Filter_setConfig+0x108>
 8017c20:	4b25      	ldr	r3, [pc, #148]	; (8017cb8 <PDM_Filter_setConfig+0x1b4>)
 8017c22:	64a3      	str	r3, [r4, #72]	; 0x48
 8017c24:	e7f2      	b.n	8017c0c <PDM_Filter_setConfig+0x108>
 8017c26:	4b25      	ldr	r3, [pc, #148]	; (8017cbc <PDM_Filter_setConfig+0x1b8>)
 8017c28:	64a3      	str	r3, [r4, #72]	; 0x48
 8017c2a:	e7ef      	b.n	8017c0c <PDM_Filter_setConfig+0x108>
 8017c2c:	4b24      	ldr	r3, [pc, #144]	; (8017cc0 <PDM_Filter_setConfig+0x1bc>)
 8017c2e:	64a3      	str	r3, [r4, #72]	; 0x48
 8017c30:	e7ec      	b.n	8017c0c <PDM_Filter_setConfig+0x108>
 8017c32:	4b24      	ldr	r3, [pc, #144]	; (8017cc4 <PDM_Filter_setConfig+0x1c0>)
 8017c34:	64a3      	str	r3, [r4, #72]	; 0x48
 8017c36:	e7e9      	b.n	8017c0c <PDM_Filter_setConfig+0x108>
 8017c38:	8e21      	ldrh	r1, [r4, #48]	; 0x30
 8017c3a:	4291      	cmp	r1, r2
 8017c3c:	f47f af7d 	bne.w	8017b3a <PDM_Filter_setConfig+0x36>
 8017c40:	e783      	b.n	8017b4a <PDM_Filter_setConfig+0x46>
 8017c42:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 8017c46:	f9b4 1038 	ldrsh.w	r1, [r4, #56]	; 0x38
 8017c4a:	4299      	cmp	r1, r3
 8017c4c:	d023      	beq.n	8017c96 <PDM_Filter_setConfig+0x192>
 8017c4e:	2000      	movs	r0, #0
 8017c50:	e773      	b.n	8017b3a <PDM_Filter_setConfig+0x36>
 8017c52:	2b06      	cmp	r3, #6
 8017c54:	d822      	bhi.n	8017c9c <PDM_Filter_setConfig+0x198>
 8017c56:	e8df f003 	tbb	[pc, r3]
 8017c5a:	1316      	.short	0x1316
 8017c5c:	070a0d10 	.word	0x070a0d10
 8017c60:	04          	.byte	0x04
 8017c61:	00          	.byte	0x00
 8017c62:	4b19      	ldr	r3, [pc, #100]	; (8017cc8 <PDM_Filter_setConfig+0x1c4>)
 8017c64:	64a3      	str	r3, [r4, #72]	; 0x48
 8017c66:	e7d1      	b.n	8017c0c <PDM_Filter_setConfig+0x108>
 8017c68:	4b18      	ldr	r3, [pc, #96]	; (8017ccc <PDM_Filter_setConfig+0x1c8>)
 8017c6a:	64a3      	str	r3, [r4, #72]	; 0x48
 8017c6c:	e7ce      	b.n	8017c0c <PDM_Filter_setConfig+0x108>
 8017c6e:	4b18      	ldr	r3, [pc, #96]	; (8017cd0 <PDM_Filter_setConfig+0x1cc>)
 8017c70:	64a3      	str	r3, [r4, #72]	; 0x48
 8017c72:	e7cb      	b.n	8017c0c <PDM_Filter_setConfig+0x108>
 8017c74:	4b17      	ldr	r3, [pc, #92]	; (8017cd4 <PDM_Filter_setConfig+0x1d0>)
 8017c76:	64a3      	str	r3, [r4, #72]	; 0x48
 8017c78:	e7c8      	b.n	8017c0c <PDM_Filter_setConfig+0x108>
 8017c7a:	4b17      	ldr	r3, [pc, #92]	; (8017cd8 <PDM_Filter_setConfig+0x1d4>)
 8017c7c:	64a3      	str	r3, [r4, #72]	; 0x48
 8017c7e:	e7c5      	b.n	8017c0c <PDM_Filter_setConfig+0x108>
 8017c80:	4b16      	ldr	r3, [pc, #88]	; (8017cdc <PDM_Filter_setConfig+0x1d8>)
 8017c82:	64a3      	str	r3, [r4, #72]	; 0x48
 8017c84:	e7c2      	b.n	8017c0c <PDM_Filter_setConfig+0x108>
 8017c86:	4b16      	ldr	r3, [pc, #88]	; (8017ce0 <PDM_Filter_setConfig+0x1dc>)
 8017c88:	64a3      	str	r3, [r4, #72]	; 0x48
 8017c8a:	e7bf      	b.n	8017c0c <PDM_Filter_setConfig+0x108>
 8017c8c:	ed9f 8a15 	vldr	s16, [pc, #84]	; 8017ce4 <PDM_Filter_setConfig+0x1e0>
 8017c90:	eeb0 9a48 	vmov.f32	s18, s16
 8017c94:	e78e      	b.n	8017bb4 <PDM_Filter_setConfig+0xb0>
 8017c96:	886b      	ldrh	r3, [r5, #2]
 8017c98:	8663      	strh	r3, [r4, #50]	; 0x32
 8017c9a:	e759      	b.n	8017b50 <PDM_Filter_setConfig+0x4c>
 8017c9c:	2000      	movs	r0, #0
 8017c9e:	e746      	b.n	8017b2e <PDM_Filter_setConfig+0x2a>
 8017ca0:	b5e8b5cd 	.word	0xb5e8b5cd
 8017ca4:	08020ad0 	.word	0x08020ad0
 8017ca8:	42000000 	.word	0x42000000
 8017cac:	08016071 	.word	0x08016071
 8017cb0:	08015f51 	.word	0x08015f51
 8017cb4:	08016201 	.word	0x08016201
 8017cb8:	08016a45 	.word	0x08016a45
 8017cbc:	080167a5 	.word	0x080167a5
 8017cc0:	08016585 	.word	0x08016585
 8017cc4:	08016399 	.word	0x08016399
 8017cc8:	08017051 	.word	0x08017051
 8017ccc:	08016f19 	.word	0x08016f19
 8017cd0:	08016e35 	.word	0x08016e35
 8017cd4:	080176cd 	.word	0x080176cd
 8017cd8:	080174b9 	.word	0x080174b9
 8017cdc:	08017301 	.word	0x08017301
 8017ce0:	08017195 	.word	0x08017195
 8017ce4:	00000000 	.word	0x00000000

08017ce8 <PDM_Filter>:
 8017ce8:	b410      	push	{r4}
 8017cea:	4b0c      	ldr	r3, [pc, #48]	; (8017d1c <PDM_Filter+0x34>)
 8017cec:	6c54      	ldr	r4, [r2, #68]	; 0x44
 8017cee:	429c      	cmp	r4, r3
 8017cf0:	d003      	beq.n	8017cfa <PDM_Filter+0x12>
 8017cf2:	2004      	movs	r0, #4
 8017cf4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017cf8:	4770      	bx	lr
 8017cfa:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8017cfc:	05dc      	lsls	r4, r3, #23
 8017cfe:	d407      	bmi.n	8017d10 <PDM_Filter+0x28>
 8017d00:	f013 0f80 	tst.w	r3, #128	; 0x80
 8017d04:	bf14      	ite	ne
 8017d06:	2020      	movne	r0, #32
 8017d08:	2030      	moveq	r0, #48	; 0x30
 8017d0a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017d0e:	4770      	bx	lr
 8017d10:	6c93      	ldr	r3, [r2, #72]	; 0x48
 8017d12:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017d16:	320c      	adds	r2, #12
 8017d18:	4718      	bx	r3
 8017d1a:	bf00      	nop
 8017d1c:	b5e8b5cd 	.word	0xb5e8b5cd

08017d20 <CRC_Lock>:
 8017d20:	4a17      	ldr	r2, [pc, #92]	; (8017d80 <CRC_Lock+0x60>)
 8017d22:	6813      	ldr	r3, [r2, #0]
 8017d24:	b410      	push	{r4}
 8017d26:	f023 0301 	bic.w	r3, r3, #1
 8017d2a:	4c16      	ldr	r4, [pc, #88]	; (8017d84 <CRC_Lock+0x64>)
 8017d2c:	6013      	str	r3, [r2, #0]
 8017d2e:	6823      	ldr	r3, [r4, #0]
 8017d30:	b933      	cbnz	r3, 8017d40 <CRC_Lock+0x20>
 8017d32:	4b15      	ldr	r3, [pc, #84]	; (8017d88 <CRC_Lock+0x68>)
 8017d34:	681b      	ldr	r3, [r3, #0]
 8017d36:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8017d3a:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8017d3e:	d00f      	beq.n	8017d60 <CRC_Lock+0x40>
 8017d40:	4a12      	ldr	r2, [pc, #72]	; (8017d8c <CRC_Lock+0x6c>)
 8017d42:	2301      	movs	r3, #1
 8017d44:	6013      	str	r3, [r2, #0]
 8017d46:	6813      	ldr	r3, [r2, #0]
 8017d48:	2b00      	cmp	r3, #0
 8017d4a:	d1fc      	bne.n	8017d46 <CRC_Lock+0x26>
 8017d4c:	4b10      	ldr	r3, [pc, #64]	; (8017d90 <CRC_Lock+0x70>)
 8017d4e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017d52:	6018      	str	r0, [r3, #0]
 8017d54:	6818      	ldr	r0, [r3, #0]
 8017d56:	1a08      	subs	r0, r1, r0
 8017d58:	fab0 f080 	clz	r0, r0
 8017d5c:	0940      	lsrs	r0, r0, #5
 8017d5e:	4770      	bx	lr
 8017d60:	4a0c      	ldr	r2, [pc, #48]	; (8017d94 <CRC_Lock+0x74>)
 8017d62:	2301      	movs	r3, #1
 8017d64:	6013      	str	r3, [r2, #0]
 8017d66:	6813      	ldr	r3, [r2, #0]
 8017d68:	2b00      	cmp	r3, #0
 8017d6a:	d1fc      	bne.n	8017d66 <CRC_Lock+0x46>
 8017d6c:	4b0a      	ldr	r3, [pc, #40]	; (8017d98 <CRC_Lock+0x78>)
 8017d6e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017d72:	6018      	str	r0, [r3, #0]
 8017d74:	6818      	ldr	r0, [r3, #0]
 8017d76:	1a40      	subs	r0, r0, r1
 8017d78:	fab0 f080 	clz	r0, r0
 8017d7c:	0940      	lsrs	r0, r0, #5
 8017d7e:	4770      	bx	lr
 8017d80:	e0002000 	.word	0xe0002000
 8017d84:	e0042000 	.word	0xe0042000
 8017d88:	5c001000 	.word	0x5c001000
 8017d8c:	40023008 	.word	0x40023008
 8017d90:	40023000 	.word	0x40023000
 8017d94:	58024c08 	.word	0x58024c08
 8017d98:	58024c00 	.word	0x58024c00

08017d9c <arm_max_f32>:
 8017d9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017da0:	1e4f      	subs	r7, r1, #1
 8017da2:	ea5f 0897 	movs.w	r8, r7, lsr #2
 8017da6:	f100 0e04 	add.w	lr, r0, #4
 8017daa:	edd0 7a00 	vldr	s15, [r0]
 8017dae:	d058      	beq.n	8017e62 <arm_max_f32+0xc6>
 8017db0:	3014      	adds	r0, #20
 8017db2:	46c4      	mov	ip, r8
 8017db4:	2604      	movs	r6, #4
 8017db6:	2400      	movs	r4, #0
 8017db8:	ed10 6a04 	vldr	s12, [r0, #-16]
 8017dbc:	ed50 6a03 	vldr	s13, [r0, #-12]
 8017dc0:	ed10 7a02 	vldr	s14, [r0, #-8]
 8017dc4:	ed50 5a01 	vldr	s11, [r0, #-4]
 8017dc8:	eeb4 6ae7 	vcmpe.f32	s12, s15
 8017dcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017dd0:	bfc8      	it	gt
 8017dd2:	eef0 7a46 	vmovgt.f32	s15, s12
 8017dd6:	f1a6 0503 	sub.w	r5, r6, #3
 8017dda:	eef4 7ae6 	vcmpe.f32	s15, s13
 8017dde:	bfc8      	it	gt
 8017de0:	462c      	movgt	r4, r5
 8017de2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017de6:	bf48      	it	mi
 8017de8:	eef0 7a66 	vmovmi.f32	s15, s13
 8017dec:	f1a6 0502 	sub.w	r5, r6, #2
 8017df0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8017df4:	bf48      	it	mi
 8017df6:	462c      	movmi	r4, r5
 8017df8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017dfc:	bf48      	it	mi
 8017dfe:	eef0 7a47 	vmovmi.f32	s15, s14
 8017e02:	f106 35ff 	add.w	r5, r6, #4294967295
 8017e06:	eef4 7ae5 	vcmpe.f32	s15, s11
 8017e0a:	bf48      	it	mi
 8017e0c:	462c      	movmi	r4, r5
 8017e0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017e12:	bf48      	it	mi
 8017e14:	4634      	movmi	r4, r6
 8017e16:	bf48      	it	mi
 8017e18:	eef0 7a65 	vmovmi.f32	s15, s11
 8017e1c:	f1bc 0c01 	subs.w	ip, ip, #1
 8017e20:	f100 0010 	add.w	r0, r0, #16
 8017e24:	f106 0604 	add.w	r6, r6, #4
 8017e28:	d1c6      	bne.n	8017db8 <arm_max_f32+0x1c>
 8017e2a:	eb0e 1e08 	add.w	lr, lr, r8, lsl #4
 8017e2e:	f017 0003 	ands.w	r0, r7, #3
 8017e32:	d018      	beq.n	8017e66 <arm_max_f32+0xca>
 8017e34:	1a08      	subs	r0, r1, r0
 8017e36:	ecbe 7a01 	vldmia	lr!, {s14}
 8017e3a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8017e3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017e42:	bfc8      	it	gt
 8017e44:	4604      	movgt	r4, r0
 8017e46:	f100 0001 	add.w	r0, r0, #1
 8017e4a:	bfd8      	it	le
 8017e4c:	eeb0 7a67 	vmovle.f32	s14, s15
 8017e50:	4281      	cmp	r1, r0
 8017e52:	eef0 7a47 	vmov.f32	s15, s14
 8017e56:	d1ee      	bne.n	8017e36 <arm_max_f32+0x9a>
 8017e58:	ed82 7a00 	vstr	s14, [r2]
 8017e5c:	601c      	str	r4, [r3, #0]
 8017e5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017e62:	4644      	mov	r4, r8
 8017e64:	e7e3      	b.n	8017e2e <arm_max_f32+0x92>
 8017e66:	eeb0 7a67 	vmov.f32	s14, s15
 8017e6a:	e7f5      	b.n	8017e58 <arm_max_f32+0xbc>

08017e6c <arm_rfft_fast_init_f32>:
 8017e6c:	084b      	lsrs	r3, r1, #1
 8017e6e:	2b80      	cmp	r3, #128	; 0x80
 8017e70:	b410      	push	{r4}
 8017e72:	8201      	strh	r1, [r0, #16]
 8017e74:	8003      	strh	r3, [r0, #0]
 8017e76:	d046      	beq.n	8017f06 <arm_rfft_fast_init_f32+0x9a>
 8017e78:	d916      	bls.n	8017ea8 <arm_rfft_fast_init_f32+0x3c>
 8017e7a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8017e7e:	d03c      	beq.n	8017efa <arm_rfft_fast_init_f32+0x8e>
 8017e80:	d928      	bls.n	8017ed4 <arm_rfft_fast_init_f32+0x68>
 8017e82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8017e86:	d01f      	beq.n	8017ec8 <arm_rfft_fast_init_f32+0x5c>
 8017e88:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8017e8c:	d112      	bne.n	8017eb4 <arm_rfft_fast_init_f32+0x48>
 8017e8e:	4920      	ldr	r1, [pc, #128]	; (8017f10 <arm_rfft_fast_init_f32+0xa4>)
 8017e90:	4a20      	ldr	r2, [pc, #128]	; (8017f14 <arm_rfft_fast_init_f32+0xa8>)
 8017e92:	4b21      	ldr	r3, [pc, #132]	; (8017f18 <arm_rfft_fast_init_f32+0xac>)
 8017e94:	f44f 646e 	mov.w	r4, #3808	; 0xee0
 8017e98:	8184      	strh	r4, [r0, #12]
 8017e9a:	6081      	str	r1, [r0, #8]
 8017e9c:	6042      	str	r2, [r0, #4]
 8017e9e:	6143      	str	r3, [r0, #20]
 8017ea0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017ea4:	2000      	movs	r0, #0
 8017ea6:	4770      	bx	lr
 8017ea8:	2b20      	cmp	r3, #32
 8017eaa:	d01c      	beq.n	8017ee6 <arm_rfft_fast_init_f32+0x7a>
 8017eac:	2b40      	cmp	r3, #64	; 0x40
 8017eae:	d006      	beq.n	8017ebe <arm_rfft_fast_init_f32+0x52>
 8017eb0:	2b10      	cmp	r3, #16
 8017eb2:	d01d      	beq.n	8017ef0 <arm_rfft_fast_init_f32+0x84>
 8017eb4:	f04f 30ff 	mov.w	r0, #4294967295
 8017eb8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017ebc:	4770      	bx	lr
 8017ebe:	2438      	movs	r4, #56	; 0x38
 8017ec0:	4916      	ldr	r1, [pc, #88]	; (8017f1c <arm_rfft_fast_init_f32+0xb0>)
 8017ec2:	4a17      	ldr	r2, [pc, #92]	; (8017f20 <arm_rfft_fast_init_f32+0xb4>)
 8017ec4:	4b17      	ldr	r3, [pc, #92]	; (8017f24 <arm_rfft_fast_init_f32+0xb8>)
 8017ec6:	e7e7      	b.n	8017e98 <arm_rfft_fast_init_f32+0x2c>
 8017ec8:	f44f 64e1 	mov.w	r4, #1800	; 0x708
 8017ecc:	4916      	ldr	r1, [pc, #88]	; (8017f28 <arm_rfft_fast_init_f32+0xbc>)
 8017ece:	4a17      	ldr	r2, [pc, #92]	; (8017f2c <arm_rfft_fast_init_f32+0xc0>)
 8017ed0:	4b17      	ldr	r3, [pc, #92]	; (8017f30 <arm_rfft_fast_init_f32+0xc4>)
 8017ed2:	e7e1      	b.n	8017e98 <arm_rfft_fast_init_f32+0x2c>
 8017ed4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8017ed8:	d1ec      	bne.n	8017eb4 <arm_rfft_fast_init_f32+0x48>
 8017eda:	f44f 74dc 	mov.w	r4, #440	; 0x1b8
 8017ede:	4915      	ldr	r1, [pc, #84]	; (8017f34 <arm_rfft_fast_init_f32+0xc8>)
 8017ee0:	4a15      	ldr	r2, [pc, #84]	; (8017f38 <arm_rfft_fast_init_f32+0xcc>)
 8017ee2:	4b16      	ldr	r3, [pc, #88]	; (8017f3c <arm_rfft_fast_init_f32+0xd0>)
 8017ee4:	e7d8      	b.n	8017e98 <arm_rfft_fast_init_f32+0x2c>
 8017ee6:	2430      	movs	r4, #48	; 0x30
 8017ee8:	4915      	ldr	r1, [pc, #84]	; (8017f40 <arm_rfft_fast_init_f32+0xd4>)
 8017eea:	4a16      	ldr	r2, [pc, #88]	; (8017f44 <arm_rfft_fast_init_f32+0xd8>)
 8017eec:	4b16      	ldr	r3, [pc, #88]	; (8017f48 <arm_rfft_fast_init_f32+0xdc>)
 8017eee:	e7d3      	b.n	8017e98 <arm_rfft_fast_init_f32+0x2c>
 8017ef0:	2414      	movs	r4, #20
 8017ef2:	4916      	ldr	r1, [pc, #88]	; (8017f4c <arm_rfft_fast_init_f32+0xe0>)
 8017ef4:	4a16      	ldr	r2, [pc, #88]	; (8017f50 <arm_rfft_fast_init_f32+0xe4>)
 8017ef6:	4b17      	ldr	r3, [pc, #92]	; (8017f54 <arm_rfft_fast_init_f32+0xe8>)
 8017ef8:	e7ce      	b.n	8017e98 <arm_rfft_fast_init_f32+0x2c>
 8017efa:	f44f 74e0 	mov.w	r4, #448	; 0x1c0
 8017efe:	4916      	ldr	r1, [pc, #88]	; (8017f58 <arm_rfft_fast_init_f32+0xec>)
 8017f00:	4a16      	ldr	r2, [pc, #88]	; (8017f5c <arm_rfft_fast_init_f32+0xf0>)
 8017f02:	4b17      	ldr	r3, [pc, #92]	; (8017f60 <arm_rfft_fast_init_f32+0xf4>)
 8017f04:	e7c8      	b.n	8017e98 <arm_rfft_fast_init_f32+0x2c>
 8017f06:	24d0      	movs	r4, #208	; 0xd0
 8017f08:	4916      	ldr	r1, [pc, #88]	; (8017f64 <arm_rfft_fast_init_f32+0xf8>)
 8017f0a:	4a17      	ldr	r2, [pc, #92]	; (8017f68 <arm_rfft_fast_init_f32+0xfc>)
 8017f0c:	4b17      	ldr	r3, [pc, #92]	; (8017f6c <arm_rfft_fast_init_f32+0x100>)
 8017f0e:	e7c3      	b.n	8017e98 <arm_rfft_fast_init_f32+0x2c>
 8017f10:	08033038 	.word	0x08033038
 8017f14:	08023a2c 	.word	0x08023a2c
 8017f18:	08029b9c 	.word	0x08029b9c
 8017f1c:	08027b2c 	.word	0x08027b2c
 8017f20:	08034df8 	.word	0x08034df8
 8017f24:	080372e8 	.word	0x080372e8
 8017f28:	0803051c 	.word	0x0803051c
 8017f2c:	0802e41c 	.word	0x0802e41c
 8017f30:	08027b9c 	.word	0x08027b9c
 8017f34:	08036f78 	.word	0x08036f78
 8017f38:	0802db9c 	.word	0x0802db9c
 8017f3c:	08034ff8 	.word	0x08034ff8
 8017f40:	080313d4 	.word	0x080313d4
 8017f44:	0803041c 	.word	0x0803041c
 8017f48:	08027a2c 	.word	0x08027a2c
 8017f4c:	0803132c 	.word	0x0803132c
 8017f50:	0802e39c 	.word	0x0802e39c
 8017f54:	08031354 	.word	0x08031354
 8017f58:	080357f8 	.word	0x080357f8
 8017f5c:	08032038 	.word	0x08032038
 8017f60:	08035b78 	.word	0x08035b78
 8017f64:	080374e8 	.word	0x080374e8
 8017f68:	08031c38 	.word	0x08031c38
 8017f6c:	08036b78 	.word	0x08036b78

08017f70 <arm_rfft_fast_f32>:
 8017f70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017f74:	8a06      	ldrh	r6, [r0, #16]
 8017f76:	0876      	lsrs	r6, r6, #1
 8017f78:	4607      	mov	r7, r0
 8017f7a:	4615      	mov	r5, r2
 8017f7c:	8006      	strh	r6, [r0, #0]
 8017f7e:	460c      	mov	r4, r1
 8017f80:	2b00      	cmp	r3, #0
 8017f82:	d15c      	bne.n	801803e <arm_rfft_fast_f32+0xce>
 8017f84:	461a      	mov	r2, r3
 8017f86:	2301      	movs	r3, #1
 8017f88:	f000 fbe4 	bl	8018754 <arm_cfft_f32>
 8017f8c:	edd4 7a00 	vldr	s15, [r4]
 8017f90:	ed94 7a01 	vldr	s14, [r4, #4]
 8017f94:	883e      	ldrh	r6, [r7, #0]
 8017f96:	6978      	ldr	r0, [r7, #20]
 8017f98:	ee37 7a07 	vadd.f32	s14, s14, s14
 8017f9c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8017fa0:	eeb6 3a00 	vmov.f32	s6, #96	; 0x3f000000  0.5
 8017fa4:	ee77 6a87 	vadd.f32	s13, s15, s14
 8017fa8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8017fac:	3e01      	subs	r6, #1
 8017fae:	ee26 7a83 	vmul.f32	s14, s13, s6
 8017fb2:	ee67 7a83 	vmul.f32	s15, s15, s6
 8017fb6:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 8017fba:	ed85 7a00 	vstr	s14, [r5]
 8017fbe:	edc5 7a01 	vstr	s15, [r5, #4]
 8017fc2:	3010      	adds	r0, #16
 8017fc4:	f105 0210 	add.w	r2, r5, #16
 8017fc8:	3b08      	subs	r3, #8
 8017fca:	f104 0110 	add.w	r1, r4, #16
 8017fce:	ed93 7a02 	vldr	s14, [r3, #8]
 8017fd2:	ed51 6a02 	vldr	s13, [r1, #-8]
 8017fd6:	ed10 6a02 	vldr	s12, [r0, #-8]
 8017fda:	edd3 3a03 	vldr	s7, [r3, #12]
 8017fde:	ed11 5a01 	vldr	s10, [r1, #-4]
 8017fe2:	ed50 5a01 	vldr	s11, [r0, #-4]
 8017fe6:	ee77 7a66 	vsub.f32	s15, s14, s13
 8017fea:	ee77 4a26 	vadd.f32	s9, s14, s13
 8017fee:	ee33 4a85 	vadd.f32	s8, s7, s10
 8017ff2:	ee66 6a27 	vmul.f32	s13, s12, s15
 8017ff6:	ee25 7aa7 	vmul.f32	s14, s11, s15
 8017ffa:	ee35 5a63 	vsub.f32	s10, s10, s7
 8017ffe:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8018002:	ee77 7a05 	vadd.f32	s15, s14, s10
 8018006:	ee26 6a04 	vmul.f32	s12, s12, s8
 801800a:	ee65 5a84 	vmul.f32	s11, s11, s8
 801800e:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8018012:	ee36 7aa5 	vadd.f32	s14, s13, s11
 8018016:	ee67 7a83 	vmul.f32	s15, s15, s6
 801801a:	ee27 7a03 	vmul.f32	s14, s14, s6
 801801e:	3e01      	subs	r6, #1
 8018020:	ed02 7a02 	vstr	s14, [r2, #-8]
 8018024:	ed42 7a01 	vstr	s15, [r2, #-4]
 8018028:	f1a3 0308 	sub.w	r3, r3, #8
 801802c:	f101 0108 	add.w	r1, r1, #8
 8018030:	f100 0008 	add.w	r0, r0, #8
 8018034:	f102 0208 	add.w	r2, r2, #8
 8018038:	d1c9      	bne.n	8017fce <arm_rfft_fast_f32+0x5e>
 801803a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801803e:	edd1 7a00 	vldr	s15, [r1]
 8018042:	edd1 6a01 	vldr	s13, [r1, #4]
 8018046:	6941      	ldr	r1, [r0, #20]
 8018048:	ee37 7aa6 	vadd.f32	s14, s15, s13
 801804c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8018050:	eef6 3a00 	vmov.f32	s7, #96	; 0x3f000000  0.5
 8018054:	ee27 7a23 	vmul.f32	s14, s14, s7
 8018058:	ee67 7aa3 	vmul.f32	s15, s15, s7
 801805c:	3e01      	subs	r6, #1
 801805e:	ed82 7a00 	vstr	s14, [r2]
 8018062:	edc2 7a01 	vstr	s15, [r2, #4]
 8018066:	00f0      	lsls	r0, r6, #3
 8018068:	b3ee      	cbz	r6, 80180e6 <arm_rfft_fast_f32+0x176>
 801806a:	3808      	subs	r0, #8
 801806c:	f101 0e10 	add.w	lr, r1, #16
 8018070:	4420      	add	r0, r4
 8018072:	f104 0110 	add.w	r1, r4, #16
 8018076:	f102 0c10 	add.w	ip, r2, #16
 801807a:	ed90 7a02 	vldr	s14, [r0, #8]
 801807e:	ed51 6a02 	vldr	s13, [r1, #-8]
 8018082:	ed1e 6a02 	vldr	s12, [lr, #-8]
 8018086:	ed90 4a03 	vldr	s8, [r0, #12]
 801808a:	ed11 5a01 	vldr	s10, [r1, #-4]
 801808e:	ed5e 5a01 	vldr	s11, [lr, #-4]
 8018092:	ee76 7ac7 	vsub.f32	s15, s13, s14
 8018096:	ee74 4a05 	vadd.f32	s9, s8, s10
 801809a:	ee26 3a27 	vmul.f32	s6, s12, s15
 801809e:	ee77 6a26 	vadd.f32	s13, s14, s13
 80180a2:	ee35 5a44 	vsub.f32	s10, s10, s8
 80180a6:	ee25 7aa7 	vmul.f32	s14, s11, s15
 80180aa:	ee76 6ac3 	vsub.f32	s13, s13, s6
 80180ae:	ee77 7a05 	vadd.f32	s15, s14, s10
 80180b2:	ee26 6a24 	vmul.f32	s12, s12, s9
 80180b6:	ee65 5aa4 	vmul.f32	s11, s11, s9
 80180ba:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80180be:	ee36 7ae5 	vsub.f32	s14, s13, s11
 80180c2:	ee67 7aa3 	vmul.f32	s15, s15, s7
 80180c6:	ee27 7a23 	vmul.f32	s14, s14, s7
 80180ca:	3e01      	subs	r6, #1
 80180cc:	ed0c 7a02 	vstr	s14, [ip, #-8]
 80180d0:	ed4c 7a01 	vstr	s15, [ip, #-4]
 80180d4:	f1a0 0008 	sub.w	r0, r0, #8
 80180d8:	f101 0108 	add.w	r1, r1, #8
 80180dc:	f10e 0e08 	add.w	lr, lr, #8
 80180e0:	f10c 0c08 	add.w	ip, ip, #8
 80180e4:	d1c9      	bne.n	801807a <arm_rfft_fast_f32+0x10a>
 80180e6:	461a      	mov	r2, r3
 80180e8:	4629      	mov	r1, r5
 80180ea:	4638      	mov	r0, r7
 80180ec:	2301      	movs	r3, #1
 80180ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80180f2:	f000 bb2f 	b.w	8018754 <arm_cfft_f32>
 80180f6:	bf00      	nop

080180f8 <arm_cfft_radix8by2_f32>:
 80180f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80180fc:	ed2d 8b08 	vpush	{d8-d11}
 8018100:	4607      	mov	r7, r0
 8018102:	4608      	mov	r0, r1
 8018104:	f8b7 e000 	ldrh.w	lr, [r7]
 8018108:	687a      	ldr	r2, [r7, #4]
 801810a:	ea4f 015e 	mov.w	r1, lr, lsr #1
 801810e:	eb00 088e 	add.w	r8, r0, lr, lsl #2
 8018112:	ea5f 0ede 	movs.w	lr, lr, lsr #3
 8018116:	f000 80b0 	beq.w	801827a <arm_cfft_radix8by2_f32+0x182>
 801811a:	008b      	lsls	r3, r1, #2
 801811c:	3310      	adds	r3, #16
 801811e:	18c6      	adds	r6, r0, r3
 8018120:	3210      	adds	r2, #16
 8018122:	4443      	add	r3, r8
 8018124:	f100 0510 	add.w	r5, r0, #16
 8018128:	f108 0410 	add.w	r4, r8, #16
 801812c:	ed54 1a04 	vldr	s3, [r4, #-16]
 8018130:	ed54 6a03 	vldr	s13, [r4, #-12]
 8018134:	ed13 4a04 	vldr	s8, [r3, #-16]
 8018138:	ed53 3a03 	vldr	s7, [r3, #-12]
 801813c:	ed53 5a02 	vldr	s11, [r3, #-8]
 8018140:	ed13 5a01 	vldr	s10, [r3, #-4]
 8018144:	ed14 0a02 	vldr	s0, [r4, #-8]
 8018148:	ed54 7a01 	vldr	s15, [r4, #-4]
 801814c:	ed16 2a04 	vldr	s4, [r6, #-16]
 8018150:	ed56 2a03 	vldr	s5, [r6, #-12]
 8018154:	ed15 6a03 	vldr	s12, [r5, #-12]
 8018158:	ed15 7a01 	vldr	s14, [r5, #-4]
 801815c:	ed15 3a04 	vldr	s6, [r5, #-16]
 8018160:	ed56 0a02 	vldr	s1, [r6, #-8]
 8018164:	ed16 1a01 	vldr	s2, [r6, #-4]
 8018168:	ed55 4a02 	vldr	s9, [r5, #-8]
 801816c:	ee73 ba21 	vadd.f32	s23, s6, s3
 8018170:	ee36 ba26 	vadd.f32	s22, s12, s13
 8018174:	ee37 aa27 	vadd.f32	s20, s14, s15
 8018178:	ee72 9a04 	vadd.f32	s19, s4, s8
 801817c:	ee32 9aa3 	vadd.f32	s18, s5, s7
 8018180:	ee31 8a05 	vadd.f32	s16, s2, s10
 8018184:	ee74 aa80 	vadd.f32	s21, s9, s0
 8018188:	ee70 8aa5 	vadd.f32	s17, s1, s11
 801818c:	ed45 ba04 	vstr	s23, [r5, #-16]
 8018190:	ed05 ba03 	vstr	s22, [r5, #-12]
 8018194:	ed45 aa02 	vstr	s21, [r5, #-8]
 8018198:	ed05 aa01 	vstr	s20, [r5, #-4]
 801819c:	ed06 8a01 	vstr	s16, [r6, #-4]
 80181a0:	ed46 9a04 	vstr	s19, [r6, #-16]
 80181a4:	ed06 9a03 	vstr	s18, [r6, #-12]
 80181a8:	ed46 8a02 	vstr	s17, [r6, #-8]
 80181ac:	ee76 6a66 	vsub.f32	s13, s12, s13
 80181b0:	ee73 3ae2 	vsub.f32	s7, s7, s5
 80181b4:	ed12 6a03 	vldr	s12, [r2, #-12]
 80181b8:	ed52 2a04 	vldr	s5, [r2, #-16]
 80181bc:	ee33 3a61 	vsub.f32	s6, s6, s3
 80181c0:	ee34 4a42 	vsub.f32	s8, s8, s4
 80181c4:	ee26 8a86 	vmul.f32	s16, s13, s12
 80181c8:	ee24 2a06 	vmul.f32	s4, s8, s12
 80181cc:	ee63 1a22 	vmul.f32	s3, s6, s5
 80181d0:	ee24 4a22 	vmul.f32	s8, s8, s5
 80181d4:	ee23 3a06 	vmul.f32	s6, s6, s12
 80181d8:	ee66 6aa2 	vmul.f32	s13, s13, s5
 80181dc:	ee23 6a86 	vmul.f32	s12, s7, s12
 80181e0:	ee63 3aa2 	vmul.f32	s7, s7, s5
 80181e4:	ee36 6a04 	vadd.f32	s12, s12, s8
 80181e8:	ee76 6ac3 	vsub.f32	s13, s13, s6
 80181ec:	ee72 3a63 	vsub.f32	s7, s4, s7
 80181f0:	ee71 2a88 	vadd.f32	s5, s3, s16
 80181f4:	ed44 6a03 	vstr	s13, [r4, #-12]
 80181f8:	ed44 2a04 	vstr	s5, [r4, #-16]
 80181fc:	ed43 3a04 	vstr	s7, [r3, #-16]
 8018200:	ed03 6a03 	vstr	s12, [r3, #-12]
 8018204:	ee77 7a67 	vsub.f32	s15, s14, s15
 8018208:	ee75 6ae0 	vsub.f32	s13, s11, s1
 801820c:	ed12 7a01 	vldr	s14, [r2, #-4]
 8018210:	ed52 5a02 	vldr	s11, [r2, #-8]
 8018214:	ee35 6a41 	vsub.f32	s12, s10, s2
 8018218:	ee74 4ac0 	vsub.f32	s9, s9, s0
 801821c:	ee67 3a87 	vmul.f32	s7, s15, s14
 8018220:	ee26 5a87 	vmul.f32	s10, s13, s14
 8018224:	ee24 4aa5 	vmul.f32	s8, s9, s11
 8018228:	ee67 7aa5 	vmul.f32	s15, s15, s11
 801822c:	ee64 4a87 	vmul.f32	s9, s9, s14
 8018230:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8018234:	ee26 7a07 	vmul.f32	s14, s12, s14
 8018238:	ee26 6a25 	vmul.f32	s12, s12, s11
 801823c:	ee77 7ae4 	vsub.f32	s15, s15, s9
 8018240:	ee74 5a23 	vadd.f32	s11, s8, s7
 8018244:	ee35 6a46 	vsub.f32	s12, s10, s12
 8018248:	ee37 7a26 	vadd.f32	s14, s14, s13
 801824c:	f1be 0e01 	subs.w	lr, lr, #1
 8018250:	ed44 5a02 	vstr	s11, [r4, #-8]
 8018254:	f105 0510 	add.w	r5, r5, #16
 8018258:	ed44 7a01 	vstr	s15, [r4, #-4]
 801825c:	f106 0610 	add.w	r6, r6, #16
 8018260:	ed03 6a02 	vstr	s12, [r3, #-8]
 8018264:	ed03 7a01 	vstr	s14, [r3, #-4]
 8018268:	f102 0210 	add.w	r2, r2, #16
 801826c:	f104 0410 	add.w	r4, r4, #16
 8018270:	f103 0310 	add.w	r3, r3, #16
 8018274:	f47f af5a 	bne.w	801812c <arm_cfft_radix8by2_f32+0x34>
 8018278:	687a      	ldr	r2, [r7, #4]
 801827a:	b28c      	uxth	r4, r1
 801827c:	4621      	mov	r1, r4
 801827e:	2302      	movs	r3, #2
 8018280:	f000 fe7e 	bl	8018f80 <arm_radix8_butterfly_f32>
 8018284:	ecbd 8b08 	vpop	{d8-d11}
 8018288:	4621      	mov	r1, r4
 801828a:	687a      	ldr	r2, [r7, #4]
 801828c:	4640      	mov	r0, r8
 801828e:	2302      	movs	r3, #2
 8018290:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018294:	f000 be74 	b.w	8018f80 <arm_radix8_butterfly_f32>

08018298 <arm_cfft_radix8by4_f32>:
 8018298:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801829c:	ed2d 8b0a 	vpush	{d8-d12}
 80182a0:	8802      	ldrh	r2, [r0, #0]
 80182a2:	ed91 6a00 	vldr	s12, [r1]
 80182a6:	b08f      	sub	sp, #60	; 0x3c
 80182a8:	460f      	mov	r7, r1
 80182aa:	0852      	lsrs	r2, r2, #1
 80182ac:	6841      	ldr	r1, [r0, #4]
 80182ae:	900c      	str	r0, [sp, #48]	; 0x30
 80182b0:	0093      	lsls	r3, r2, #2
 80182b2:	4638      	mov	r0, r7
 80182b4:	4418      	add	r0, r3
 80182b6:	4606      	mov	r6, r0
 80182b8:	9009      	str	r0, [sp, #36]	; 0x24
 80182ba:	4418      	add	r0, r3
 80182bc:	edd0 6a00 	vldr	s13, [r0]
 80182c0:	ed96 4a00 	vldr	s8, [r6]
 80182c4:	edd6 2a01 	vldr	s5, [r6, #4]
 80182c8:	edd0 7a01 	vldr	s15, [r0, #4]
 80182cc:	900a      	str	r0, [sp, #40]	; 0x28
 80182ce:	ee76 5a26 	vadd.f32	s11, s12, s13
 80182d2:	4604      	mov	r4, r0
 80182d4:	4625      	mov	r5, r4
 80182d6:	441c      	add	r4, r3
 80182d8:	edd4 4a00 	vldr	s9, [r4]
 80182dc:	ed97 7a01 	vldr	s14, [r7, #4]
 80182e0:	ed94 3a01 	vldr	s6, [r4, #4]
 80182e4:	9401      	str	r4, [sp, #4]
 80182e6:	ee35 5a84 	vadd.f32	s10, s11, s8
 80182ea:	4630      	mov	r0, r6
 80182ec:	ee35 5a24 	vadd.f32	s10, s10, s9
 80182f0:	463e      	mov	r6, r7
 80182f2:	ee15 ea10 	vmov	lr, s10
 80182f6:	ee76 6a66 	vsub.f32	s13, s12, s13
 80182fa:	f846 eb08 	str.w	lr, [r6], #8
 80182fe:	ee37 6a27 	vadd.f32	s12, s14, s15
 8018302:	ed90 5a01 	vldr	s10, [r0, #4]
 8018306:	9605      	str	r6, [sp, #20]
 8018308:	ee77 7a67 	vsub.f32	s15, s14, s15
 801830c:	9e01      	ldr	r6, [sp, #4]
 801830e:	9707      	str	r7, [sp, #28]
 8018310:	ee76 3aa2 	vadd.f32	s7, s13, s5
 8018314:	ed96 2a01 	vldr	s4, [r6, #4]
 8018318:	ee36 7a05 	vadd.f32	s14, s12, s10
 801831c:	ee75 5ac4 	vsub.f32	s11, s11, s8
 8018320:	ee37 5ac4 	vsub.f32	s10, s15, s8
 8018324:	ee77 7a84 	vadd.f32	s15, s15, s8
 8018328:	ee33 4ac3 	vsub.f32	s8, s7, s6
 801832c:	4604      	mov	r4, r0
 801832e:	46a3      	mov	fp, r4
 8018330:	ee37 7a02 	vadd.f32	s14, s14, s4
 8018334:	ee35 5a24 	vadd.f32	s10, s10, s9
 8018338:	ee14 8a10 	vmov	r8, s8
 801833c:	46a4      	mov	ip, r4
 801833e:	ee75 5ae4 	vsub.f32	s11, s11, s9
 8018342:	ed87 7a01 	vstr	s14, [r7, #4]
 8018346:	f84b 8b08 	str.w	r8, [fp], #8
 801834a:	f1ac 0704 	sub.w	r7, ip, #4
 801834e:	ed8c 5a01 	vstr	s10, [ip, #4]
 8018352:	f101 0c08 	add.w	ip, r1, #8
 8018356:	462c      	mov	r4, r5
 8018358:	f8cd c010 	str.w	ip, [sp, #16]
 801835c:	ee15 ca90 	vmov	ip, s11
 8018360:	ee36 6a62 	vsub.f32	s12, s12, s5
 8018364:	f844 cb08 	str.w	ip, [r4], #8
 8018368:	ee76 6ae2 	vsub.f32	s13, s13, s5
 801836c:	ee36 6a43 	vsub.f32	s12, s12, s6
 8018370:	9406      	str	r4, [sp, #24]
 8018372:	ee76 6a83 	vadd.f32	s13, s13, s6
 8018376:	f101 0410 	add.w	r4, r1, #16
 801837a:	0852      	lsrs	r2, r2, #1
 801837c:	9402      	str	r4, [sp, #8]
 801837e:	ed85 6a01 	vstr	s12, [r5, #4]
 8018382:	462c      	mov	r4, r5
 8018384:	f101 0518 	add.w	r5, r1, #24
 8018388:	920b      	str	r2, [sp, #44]	; 0x2c
 801838a:	46b2      	mov	sl, r6
 801838c:	9503      	str	r5, [sp, #12]
 801838e:	ee77 7ae4 	vsub.f32	s15, s15, s9
 8018392:	3a02      	subs	r2, #2
 8018394:	ee16 5a90 	vmov	r5, s13
 8018398:	46b6      	mov	lr, r6
 801839a:	4630      	mov	r0, r6
 801839c:	0852      	lsrs	r2, r2, #1
 801839e:	f84a 5b08 	str.w	r5, [sl], #8
 80183a2:	f1a0 0604 	sub.w	r6, r0, #4
 80183a6:	edce 7a01 	vstr	s15, [lr, #4]
 80183aa:	9208      	str	r2, [sp, #32]
 80183ac:	f000 8130 	beq.w	8018610 <arm_cfft_radix8by4_f32+0x378>
 80183b0:	4691      	mov	r9, r2
 80183b2:	9a07      	ldr	r2, [sp, #28]
 80183b4:	f8dd 8008 	ldr.w	r8, [sp, #8]
 80183b8:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 80183bc:	3b08      	subs	r3, #8
 80183be:	f102 0510 	add.w	r5, r2, #16
 80183c2:	f101 0c20 	add.w	ip, r1, #32
 80183c6:	f1a4 020c 	sub.w	r2, r4, #12
 80183ca:	f101 0e30 	add.w	lr, r1, #48	; 0x30
 80183ce:	4433      	add	r3, r6
 80183d0:	3410      	adds	r4, #16
 80183d2:	4650      	mov	r0, sl
 80183d4:	4659      	mov	r1, fp
 80183d6:	ed55 3a02 	vldr	s7, [r5, #-8]
 80183da:	ed14 5a02 	vldr	s10, [r4, #-8]
 80183de:	ed91 7a00 	vldr	s14, [r1]
 80183e2:	edd0 7a00 	vldr	s15, [r0]
 80183e6:	ed54 5a01 	vldr	s11, [r4, #-4]
 80183ea:	ed15 4a01 	vldr	s8, [r5, #-4]
 80183ee:	edd0 6a01 	vldr	s13, [r0, #4]
 80183f2:	ed91 6a01 	vldr	s12, [r1, #4]
 80183f6:	ee33 8a85 	vadd.f32	s16, s7, s10
 80183fa:	ee34 0a25 	vadd.f32	s0, s8, s11
 80183fe:	ee78 4a07 	vadd.f32	s9, s16, s14
 8018402:	ee74 5a65 	vsub.f32	s11, s8, s11
 8018406:	ee74 4aa7 	vadd.f32	s9, s9, s15
 801840a:	ee33 5ac5 	vsub.f32	s10, s7, s10
 801840e:	ed45 4a02 	vstr	s9, [r5, #-8]
 8018412:	edd1 4a01 	vldr	s9, [r1, #4]
 8018416:	ed90 4a01 	vldr	s8, [r0, #4]
 801841a:	ee70 4a24 	vadd.f32	s9, s0, s9
 801841e:	ee75 aa06 	vadd.f32	s21, s10, s12
 8018422:	ee74 4a84 	vadd.f32	s9, s9, s8
 8018426:	ee35 aac7 	vsub.f32	s20, s11, s14
 801842a:	ed45 4a01 	vstr	s9, [r5, #-4]
 801842e:	edd6 1a00 	vldr	s3, [r6]
 8018432:	edd7 0a00 	vldr	s1, [r7]
 8018436:	ed92 4a02 	vldr	s8, [r2, #8]
 801843a:	edd3 3a02 	vldr	s7, [r3, #8]
 801843e:	ed93 2a01 	vldr	s4, [r3, #4]
 8018442:	ed16 1a01 	vldr	s2, [r6, #-4]
 8018446:	edd2 2a01 	vldr	s5, [r2, #4]
 801844a:	ed57 9a01 	vldr	s19, [r7, #-4]
 801844e:	ee70 4aa1 	vadd.f32	s9, s1, s3
 8018452:	ee39 3a81 	vadd.f32	s6, s19, s2
 8018456:	ee74 8a84 	vadd.f32	s17, s9, s8
 801845a:	ee70 1ae1 	vsub.f32	s3, s1, s3
 801845e:	ee78 8aa3 	vadd.f32	s17, s17, s7
 8018462:	ee7a aae6 	vsub.f32	s21, s21, s13
 8018466:	ee18 aa90 	vmov	sl, s17
 801846a:	f847 a908 	str.w	sl, [r7], #-8
 801846e:	edd2 8a01 	vldr	s17, [r2, #4]
 8018472:	ed93 9a01 	vldr	s18, [r3, #4]
 8018476:	ee73 8a28 	vadd.f32	s17, s6, s17
 801847a:	ee3a aa27 	vadd.f32	s20, s20, s15
 801847e:	ee78 8a89 	vadd.f32	s17, s17, s18
 8018482:	ee74 0a63 	vsub.f32	s1, s8, s7
 8018486:	edc7 8a01 	vstr	s17, [r7, #4]
 801848a:	ed18 ba02 	vldr	s22, [r8, #-8]
 801848e:	ed58 8a01 	vldr	s17, [r8, #-4]
 8018492:	ee39 1ac1 	vsub.f32	s2, s19, s2
 8018496:	ee6a ba28 	vmul.f32	s23, s20, s17
 801849a:	ee2a ca8b 	vmul.f32	s24, s21, s22
 801849e:	ee71 9ae2 	vsub.f32	s19, s3, s5
 80184a2:	ee31 9a20 	vadd.f32	s18, s2, s1
 80184a6:	ee79 9a82 	vadd.f32	s19, s19, s4
 80184aa:	ee3c ca2b 	vadd.f32	s24, s24, s23
 80184ae:	ee6a aaa8 	vmul.f32	s21, s21, s17
 80184b2:	ee69 baa8 	vmul.f32	s23, s19, s17
 80184b6:	ee2a aa0b 	vmul.f32	s20, s20, s22
 80184ba:	ee69 9a8b 	vmul.f32	s19, s19, s22
 80184be:	ee69 8a28 	vmul.f32	s17, s18, s17
 80184c2:	ee29 ba0b 	vmul.f32	s22, s18, s22
 80184c6:	ee1c aa10 	vmov	sl, s24
 80184ca:	ee78 8aa9 	vadd.f32	s17, s17, s19
 80184ce:	f841 ab08 	str.w	sl, [r1], #8
 80184d2:	ee3a aa6a 	vsub.f32	s20, s20, s21
 80184d6:	ee3b bacb 	vsub.f32	s22, s23, s22
 80184da:	ee34 4ac4 	vsub.f32	s8, s9, s8
 80184de:	ee33 3a62 	vsub.f32	s6, s6, s5
 80184e2:	ed01 aa01 	vstr	s20, [r1, #-4]
 80184e6:	edc2 8a01 	vstr	s17, [r2, #4]
 80184ea:	ed82 ba02 	vstr	s22, [r2, #8]
 80184ee:	ed5c 4a04 	vldr	s9, [ip, #-16]
 80184f2:	ee74 3a63 	vsub.f32	s7, s8, s7
 80184f6:	ee38 8a47 	vsub.f32	s16, s16, s14
 80184fa:	ed1c 4a03 	vldr	s8, [ip, #-12]
 80184fe:	ee30 0a46 	vsub.f32	s0, s0, s12
 8018502:	ee33 3a42 	vsub.f32	s6, s6, s4
 8018506:	ee38 8a67 	vsub.f32	s16, s16, s15
 801850a:	ee30 0a66 	vsub.f32	s0, s0, s13
 801850e:	ee23 9ae4 	vnmul.f32	s18, s7, s9
 8018512:	ee63 8a04 	vmul.f32	s17, s6, s8
 8018516:	ee28 aa24 	vmul.f32	s20, s16, s9
 801851a:	ee60 9a04 	vmul.f32	s19, s0, s8
 801851e:	ee28 8a04 	vmul.f32	s16, s16, s8
 8018522:	ee20 0a24 	vmul.f32	s0, s0, s9
 8018526:	ee63 3a84 	vmul.f32	s7, s7, s8
 801852a:	ee39 4a68 	vsub.f32	s8, s18, s17
 801852e:	ee7a 9a29 	vadd.f32	s19, s20, s19
 8018532:	ee14 aa10 	vmov	sl, s8
 8018536:	ee30 0a48 	vsub.f32	s0, s0, s16
 801853a:	ee63 4a24 	vmul.f32	s9, s6, s9
 801853e:	ed44 9a02 	vstr	s19, [r4, #-8]
 8018542:	ee73 3ae4 	vsub.f32	s7, s7, s9
 8018546:	ed04 0a01 	vstr	s0, [r4, #-4]
 801854a:	f846 a908 	str.w	sl, [r6], #-8
 801854e:	ee35 6a46 	vsub.f32	s12, s10, s12
 8018552:	ee35 7a87 	vadd.f32	s14, s11, s14
 8018556:	edc6 3a01 	vstr	s7, [r6, #4]
 801855a:	ee76 6a26 	vadd.f32	s13, s12, s13
 801855e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8018562:	ed1e 6a05 	vldr	s12, [lr, #-20]	; 0xffffffec
 8018566:	ed1e 7a06 	vldr	s14, [lr, #-24]	; 0xffffffe8
 801856a:	ee67 5a86 	vmul.f32	s11, s15, s12
 801856e:	ee26 5a87 	vmul.f32	s10, s13, s14
 8018572:	ee72 2a62 	vsub.f32	s5, s4, s5
 8018576:	ee30 1ac1 	vsub.f32	s2, s1, s2
 801857a:	ee72 2ae1 	vsub.f32	s5, s5, s3
 801857e:	ee75 5a25 	vadd.f32	s11, s10, s11
 8018582:	ee62 0a86 	vmul.f32	s1, s5, s12
 8018586:	ee66 6a86 	vmul.f32	s13, s13, s12
 801858a:	ee67 7a87 	vmul.f32	s15, s15, s14
 801858e:	ee21 6a06 	vmul.f32	s12, s2, s12
 8018592:	ee62 2a87 	vmul.f32	s5, s5, s14
 8018596:	ee21 1a07 	vmul.f32	s2, s2, s14
 801859a:	ee15 aa90 	vmov	sl, s11
 801859e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80185a2:	f840 ab08 	str.w	sl, [r0], #8
 80185a6:	ee30 1ac1 	vsub.f32	s2, s1, s2
 80185aa:	ee76 2a22 	vadd.f32	s5, s12, s5
 80185ae:	f1b9 0901 	subs.w	r9, r9, #1
 80185b2:	ed40 7a01 	vstr	s15, [r0, #-4]
 80185b6:	f105 0508 	add.w	r5, r5, #8
 80185ba:	ed83 1a02 	vstr	s2, [r3, #8]
 80185be:	edc3 2a01 	vstr	s5, [r3, #4]
 80185c2:	f108 0808 	add.w	r8, r8, #8
 80185c6:	f1a2 0208 	sub.w	r2, r2, #8
 80185ca:	f10c 0c10 	add.w	ip, ip, #16
 80185ce:	f104 0408 	add.w	r4, r4, #8
 80185d2:	f10e 0e18 	add.w	lr, lr, #24
 80185d6:	f1a3 0308 	sub.w	r3, r3, #8
 80185da:	f47f aefc 	bne.w	80183d6 <arm_cfft_radix8by4_f32+0x13e>
 80185de:	9908      	ldr	r1, [sp, #32]
 80185e0:	9802      	ldr	r0, [sp, #8]
 80185e2:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
 80185e6:	00cb      	lsls	r3, r1, #3
 80185e8:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 80185ec:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 80185f0:	9102      	str	r1, [sp, #8]
 80185f2:	9905      	ldr	r1, [sp, #20]
 80185f4:	4419      	add	r1, r3
 80185f6:	9105      	str	r1, [sp, #20]
 80185f8:	9904      	ldr	r1, [sp, #16]
 80185fa:	4419      	add	r1, r3
 80185fc:	9104      	str	r1, [sp, #16]
 80185fe:	9906      	ldr	r1, [sp, #24]
 8018600:	449b      	add	fp, r3
 8018602:	4419      	add	r1, r3
 8018604:	449a      	add	sl, r3
 8018606:	9b03      	ldr	r3, [sp, #12]
 8018608:	9106      	str	r1, [sp, #24]
 801860a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801860e:	9303      	str	r3, [sp, #12]
 8018610:	9a05      	ldr	r2, [sp, #20]
 8018612:	9806      	ldr	r0, [sp, #24]
 8018614:	ed92 4a00 	vldr	s8, [r2]
 8018618:	ed90 7a00 	vldr	s14, [r0]
 801861c:	ed9b 3a00 	vldr	s6, [fp]
 8018620:	edda 3a00 	vldr	s7, [sl]
 8018624:	edd2 4a01 	vldr	s9, [r2, #4]
 8018628:	edd0 6a01 	vldr	s13, [r0, #4]
 801862c:	ed9a 2a01 	vldr	s4, [sl, #4]
 8018630:	eddb 7a01 	vldr	s15, [fp, #4]
 8018634:	f8bd 402c 	ldrh.w	r4, [sp, #44]	; 0x2c
 8018638:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801863a:	ee34 6a07 	vadd.f32	s12, s8, s14
 801863e:	ee74 5aa6 	vadd.f32	s11, s9, s13
 8018642:	ee36 5a03 	vadd.f32	s10, s12, s6
 8018646:	ee74 6ae6 	vsub.f32	s13, s9, s13
 801864a:	ee35 5a23 	vadd.f32	s10, s10, s7
 801864e:	ee34 7a47 	vsub.f32	s14, s8, s14
 8018652:	ed82 5a00 	vstr	s10, [r2]
 8018656:	ed9b 5a01 	vldr	s10, [fp, #4]
 801865a:	edda 4a01 	vldr	s9, [sl, #4]
 801865e:	ee35 5a85 	vadd.f32	s10, s11, s10
 8018662:	ee37 4a27 	vadd.f32	s8, s14, s15
 8018666:	ee35 5a24 	vadd.f32	s10, s10, s9
 801866a:	ee76 4ac3 	vsub.f32	s9, s13, s6
 801866e:	ed82 5a01 	vstr	s10, [r2, #4]
 8018672:	9a04      	ldr	r2, [sp, #16]
 8018674:	ee34 5aa3 	vadd.f32	s10, s9, s7
 8018678:	edd2 1a00 	vldr	s3, [r2]
 801867c:	edd2 2a01 	vldr	s5, [r2, #4]
 8018680:	9a02      	ldr	r2, [sp, #8]
 8018682:	ee34 4a42 	vsub.f32	s8, s8, s4
 8018686:	ee36 6a43 	vsub.f32	s12, s12, s6
 801868a:	ee64 4a21 	vmul.f32	s9, s8, s3
 801868e:	ee24 4a22 	vmul.f32	s8, s8, s5
 8018692:	ee65 2a22 	vmul.f32	s5, s10, s5
 8018696:	ee25 5a21 	vmul.f32	s10, s10, s3
 801869a:	ee74 2aa2 	vadd.f32	s5, s9, s5
 801869e:	ee35 5a44 	vsub.f32	s10, s10, s8
 80186a2:	ee75 5ae7 	vsub.f32	s11, s11, s15
 80186a6:	edcb 2a00 	vstr	s5, [fp]
 80186aa:	ed8b 5a01 	vstr	s10, [fp, #4]
 80186ae:	ed92 4a01 	vldr	s8, [r2, #4]
 80186b2:	ed92 5a00 	vldr	s10, [r2]
 80186b6:	9a03      	ldr	r2, [sp, #12]
 80186b8:	ee36 6a63 	vsub.f32	s12, s12, s7
 80186bc:	ee75 5ac2 	vsub.f32	s11, s11, s4
 80186c0:	ee66 4a05 	vmul.f32	s9, s12, s10
 80186c4:	ee25 5a85 	vmul.f32	s10, s11, s10
 80186c8:	ee26 6a04 	vmul.f32	s12, s12, s8
 80186cc:	ee65 5a84 	vmul.f32	s11, s11, s8
 80186d0:	ee35 6a46 	vsub.f32	s12, s10, s12
 80186d4:	ee74 5aa5 	vadd.f32	s11, s9, s11
 80186d8:	ee76 6a83 	vadd.f32	s13, s13, s6
 80186dc:	ee37 7a67 	vsub.f32	s14, s14, s15
 80186e0:	ed80 6a01 	vstr	s12, [r0, #4]
 80186e4:	edc0 5a00 	vstr	s11, [r0]
 80186e8:	edd2 5a01 	vldr	s11, [r2, #4]
 80186ec:	9807      	ldr	r0, [sp, #28]
 80186ee:	ee77 7a02 	vadd.f32	s15, s14, s4
 80186f2:	ee36 7ae3 	vsub.f32	s14, s13, s7
 80186f6:	edd2 6a00 	vldr	s13, [r2]
 80186fa:	ee27 6aa6 	vmul.f32	s12, s15, s13
 80186fe:	ee67 6a26 	vmul.f32	s13, s14, s13
 8018702:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8018706:	ee27 7a25 	vmul.f32	s14, s14, s11
 801870a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 801870e:	ee36 7a07 	vadd.f32	s14, s12, s14
 8018712:	edca 7a01 	vstr	s15, [sl, #4]
 8018716:	ed8a 7a00 	vstr	s14, [sl]
 801871a:	6872      	ldr	r2, [r6, #4]
 801871c:	4621      	mov	r1, r4
 801871e:	2304      	movs	r3, #4
 8018720:	f000 fc2e 	bl	8018f80 <arm_radix8_butterfly_f32>
 8018724:	9809      	ldr	r0, [sp, #36]	; 0x24
 8018726:	6872      	ldr	r2, [r6, #4]
 8018728:	4621      	mov	r1, r4
 801872a:	2304      	movs	r3, #4
 801872c:	f000 fc28 	bl	8018f80 <arm_radix8_butterfly_f32>
 8018730:	980a      	ldr	r0, [sp, #40]	; 0x28
 8018732:	6872      	ldr	r2, [r6, #4]
 8018734:	4621      	mov	r1, r4
 8018736:	2304      	movs	r3, #4
 8018738:	f000 fc22 	bl	8018f80 <arm_radix8_butterfly_f32>
 801873c:	6872      	ldr	r2, [r6, #4]
 801873e:	9801      	ldr	r0, [sp, #4]
 8018740:	4621      	mov	r1, r4
 8018742:	2304      	movs	r3, #4
 8018744:	b00f      	add	sp, #60	; 0x3c
 8018746:	ecbd 8b0a 	vpop	{d8-d12}
 801874a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801874e:	f000 bc17 	b.w	8018f80 <arm_radix8_butterfly_f32>
 8018752:	bf00      	nop

08018754 <arm_cfft_f32>:
 8018754:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018758:	2a01      	cmp	r2, #1
 801875a:	4606      	mov	r6, r0
 801875c:	4617      	mov	r7, r2
 801875e:	460c      	mov	r4, r1
 8018760:	4698      	mov	r8, r3
 8018762:	8805      	ldrh	r5, [r0, #0]
 8018764:	d054      	beq.n	8018810 <arm_cfft_f32+0xbc>
 8018766:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 801876a:	d04c      	beq.n	8018806 <arm_cfft_f32+0xb2>
 801876c:	d916      	bls.n	801879c <arm_cfft_f32+0x48>
 801876e:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 8018772:	d01a      	beq.n	80187aa <arm_cfft_f32+0x56>
 8018774:	d95c      	bls.n	8018830 <arm_cfft_f32+0xdc>
 8018776:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 801877a:	d044      	beq.n	8018806 <arm_cfft_f32+0xb2>
 801877c:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
 8018780:	d105      	bne.n	801878e <arm_cfft_f32+0x3a>
 8018782:	2301      	movs	r3, #1
 8018784:	6872      	ldr	r2, [r6, #4]
 8018786:	4629      	mov	r1, r5
 8018788:	4620      	mov	r0, r4
 801878a:	f000 fbf9 	bl	8018f80 <arm_radix8_butterfly_f32>
 801878e:	f1b8 0f00 	cmp.w	r8, #0
 8018792:	d111      	bne.n	80187b8 <arm_cfft_f32+0x64>
 8018794:	2f01      	cmp	r7, #1
 8018796:	d016      	beq.n	80187c6 <arm_cfft_f32+0x72>
 8018798:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801879c:	2d20      	cmp	r5, #32
 801879e:	d032      	beq.n	8018806 <arm_cfft_f32+0xb2>
 80187a0:	d94a      	bls.n	8018838 <arm_cfft_f32+0xe4>
 80187a2:	2d40      	cmp	r5, #64	; 0x40
 80187a4:	d0ed      	beq.n	8018782 <arm_cfft_f32+0x2e>
 80187a6:	2d80      	cmp	r5, #128	; 0x80
 80187a8:	d1f1      	bne.n	801878e <arm_cfft_f32+0x3a>
 80187aa:	4621      	mov	r1, r4
 80187ac:	4630      	mov	r0, r6
 80187ae:	f7ff fca3 	bl	80180f8 <arm_cfft_radix8by2_f32>
 80187b2:	f1b8 0f00 	cmp.w	r8, #0
 80187b6:	d0ed      	beq.n	8018794 <arm_cfft_f32+0x40>
 80187b8:	68b2      	ldr	r2, [r6, #8]
 80187ba:	89b1      	ldrh	r1, [r6, #12]
 80187bc:	4620      	mov	r0, r4
 80187be:	f7eb fd27 	bl	8004210 <arm_bitreversal_32>
 80187c2:	2f01      	cmp	r7, #1
 80187c4:	d1e8      	bne.n	8018798 <arm_cfft_f32+0x44>
 80187c6:	ee07 5a90 	vmov	s15, r5
 80187ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80187ce:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80187d2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80187d6:	2d00      	cmp	r5, #0
 80187d8:	d0de      	beq.n	8018798 <arm_cfft_f32+0x44>
 80187da:	f104 0108 	add.w	r1, r4, #8
 80187de:	2300      	movs	r3, #0
 80187e0:	3301      	adds	r3, #1
 80187e2:	429d      	cmp	r5, r3
 80187e4:	f101 0108 	add.w	r1, r1, #8
 80187e8:	ed11 7a04 	vldr	s14, [r1, #-16]
 80187ec:	ed51 7a03 	vldr	s15, [r1, #-12]
 80187f0:	ee27 7a26 	vmul.f32	s14, s14, s13
 80187f4:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 80187f8:	ed01 7a04 	vstr	s14, [r1, #-16]
 80187fc:	ed41 7a03 	vstr	s15, [r1, #-12]
 8018800:	d1ee      	bne.n	80187e0 <arm_cfft_f32+0x8c>
 8018802:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018806:	4621      	mov	r1, r4
 8018808:	4630      	mov	r0, r6
 801880a:	f7ff fd45 	bl	8018298 <arm_cfft_radix8by4_f32>
 801880e:	e7be      	b.n	801878e <arm_cfft_f32+0x3a>
 8018810:	b1ad      	cbz	r5, 801883e <arm_cfft_f32+0xea>
 8018812:	f101 030c 	add.w	r3, r1, #12
 8018816:	2200      	movs	r2, #0
 8018818:	ed53 7a02 	vldr	s15, [r3, #-8]
 801881c:	3201      	adds	r2, #1
 801881e:	eef1 7a67 	vneg.f32	s15, s15
 8018822:	4295      	cmp	r5, r2
 8018824:	ed43 7a02 	vstr	s15, [r3, #-8]
 8018828:	f103 0308 	add.w	r3, r3, #8
 801882c:	d1f4      	bne.n	8018818 <arm_cfft_f32+0xc4>
 801882e:	e79a      	b.n	8018766 <arm_cfft_f32+0x12>
 8018830:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 8018834:	d0a5      	beq.n	8018782 <arm_cfft_f32+0x2e>
 8018836:	e7aa      	b.n	801878e <arm_cfft_f32+0x3a>
 8018838:	2d10      	cmp	r5, #16
 801883a:	d0b6      	beq.n	80187aa <arm_cfft_f32+0x56>
 801883c:	e7a7      	b.n	801878e <arm_cfft_f32+0x3a>
 801883e:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 8018842:	d894      	bhi.n	801876e <arm_cfft_f32+0x1a>
 8018844:	e7aa      	b.n	801879c <arm_cfft_f32+0x48>
 8018846:	bf00      	nop

08018848 <arm_fir_decimate_q15>:
 8018848:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801884c:	b097      	sub	sp, #92	; 0x5c
 801884e:	4606      	mov	r6, r0
 8018850:	9107      	str	r1, [sp, #28]
 8018852:	8841      	ldrh	r1, [r0, #2]
 8018854:	9005      	str	r0, [sp, #20]
 8018856:	9113      	str	r1, [sp, #76]	; 0x4c
 8018858:	4608      	mov	r0, r1
 801885a:	68b1      	ldr	r1, [r6, #8]
 801885c:	9212      	str	r2, [sp, #72]	; 0x48
 801885e:	460f      	mov	r7, r1
 8018860:	4604      	mov	r4, r0
 8018862:	7831      	ldrb	r1, [r6, #0]
 8018864:	fbb3 f3f1 	udiv	r3, r3, r1
 8018868:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 801886c:	085d      	lsrs	r5, r3, #1
 801886e:	eba3 0345 	sub.w	r3, r3, r5, lsl #1
 8018872:	3801      	subs	r0, #1
 8018874:	eb07 0040 	add.w	r0, r7, r0, lsl #1
 8018878:	9315      	str	r3, [sp, #84]	; 0x54
 801887a:	6873      	ldr	r3, [r6, #4]
 801887c:	9514      	str	r5, [sp, #80]	; 0x50
 801887e:	9700      	str	r7, [sp, #0]
 8018880:	9006      	str	r0, [sp, #24]
 8018882:	9309      	str	r3, [sp, #36]	; 0x24
 8018884:	2d00      	cmp	r5, #0
 8018886:	f000 80e4 	beq.w	8018a52 <arm_fir_decimate_q15+0x20a>
 801888a:	4620      	mov	r0, r4
 801888c:	08a4      	lsrs	r4, r4, #2
 801888e:	940e      	str	r4, [sp, #56]	; 0x38
 8018890:	00e4      	lsls	r4, r4, #3
 8018892:	4423      	add	r3, r4
 8018894:	4696      	mov	lr, r2
 8018896:	9310      	str	r3, [sp, #64]	; 0x40
 8018898:	f000 0303 	and.w	r3, r0, #3
 801889c:	930f      	str	r3, [sp, #60]	; 0x3c
 801889e:	4673      	mov	r3, lr
 80188a0:	3304      	adds	r3, #4
 80188a2:	f8dd 8000 	ldr.w	r8, [sp]
 80188a6:	9411      	str	r4, [sp, #68]	; 0x44
 80188a8:	460a      	mov	r2, r1
 80188aa:	930b      	str	r3, [sp, #44]	; 0x2c
 80188ac:	950a      	str	r5, [sp, #40]	; 0x28
 80188ae:	9c06      	ldr	r4, [sp, #24]
 80188b0:	9e07      	ldr	r6, [sp, #28]
 80188b2:	4623      	mov	r3, r4
 80188b4:	4631      	mov	r1, r6
 80188b6:	3304      	adds	r3, #4
 80188b8:	3104      	adds	r1, #4
 80188ba:	428c      	cmp	r4, r1
 80188bc:	bf38      	it	cc
 80188be:	429e      	cmpcc	r6, r3
 80188c0:	f04f 0102 	mov.w	r1, #2
 80188c4:	bf2c      	ite	cs
 80188c6:	2301      	movcs	r3, #1
 80188c8:	2300      	movcc	r3, #0
 80188ca:	fb12 f501 	smulbb	r5, r2, r1
 80188ce:	2d0c      	cmp	r5, #12
 80188d0:	bf94      	ite	ls
 80188d2:	2300      	movls	r3, #0
 80188d4:	f003 0301 	andhi.w	r3, r3, #1
 80188d8:	2b00      	cmp	r3, #0
 80188da:	f000 80a8 	beq.w	8018a2e <arm_fir_decimate_q15+0x1e6>
 80188de:	ea46 0304 	orr.w	r3, r6, r4
 80188e2:	0798      	lsls	r0, r3, #30
 80188e4:	4621      	mov	r1, r4
 80188e6:	f040 80a2 	bne.w	8018a2e <arm_fir_decimate_q15+0x1e6>
 80188ea:	2302      	movs	r3, #2
 80188ec:	f06f 0401 	mvn.w	r4, #1
 80188f0:	fb13 4202 	smlabb	r2, r3, r2, r4
 80188f4:	0852      	lsrs	r2, r2, #1
 80188f6:	3201      	adds	r2, #1
 80188f8:	1f30      	subs	r0, r6, #4
 80188fa:	2300      	movs	r3, #0
 80188fc:	3301      	adds	r3, #1
 80188fe:	f850 4f04 	ldr.w	r4, [r0, #4]!
 8018902:	f841 4b04 	str.w	r4, [r1], #4
 8018906:	429a      	cmp	r2, r3
 8018908:	d8f8      	bhi.n	80188fc <arm_fir_decimate_q15+0xb4>
 801890a:	9a06      	ldr	r2, [sp, #24]
 801890c:	9b05      	ldr	r3, [sp, #20]
 801890e:	006d      	lsls	r5, r5, #1
 8018910:	442a      	add	r2, r5
 8018912:	9206      	str	r2, [sp, #24]
 8018914:	9a07      	ldr	r2, [sp, #28]
 8018916:	781b      	ldrb	r3, [r3, #0]
 8018918:	442a      	add	r2, r5
 801891a:	005b      	lsls	r3, r3, #1
 801891c:	9207      	str	r2, [sp, #28]
 801891e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8018920:	930c      	str	r3, [sp, #48]	; 0x30
 8018922:	4443      	add	r3, r8
 8018924:	9308      	str	r3, [sp, #32]
 8018926:	2a00      	cmp	r2, #0
 8018928:	f000 817a 	beq.w	8018c20 <arm_fir_decimate_q15+0x3d8>
 801892c:	2000      	movs	r0, #0
 801892e:	2100      	movs	r1, #0
 8018930:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8018932:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
 8018936:	e9cd 0100 	strd	r0, r1, [sp]
 801893a:	f104 0a08 	add.w	sl, r4, #8
 801893e:	f108 0908 	add.w	r9, r8, #8
 8018942:	3308      	adds	r3, #8
 8018944:	4693      	mov	fp, r2
 8018946:	f93a 4c08 	ldrsh.w	r4, [sl, #-8]
 801894a:	f939 7c08 	ldrsh.w	r7, [r9, #-8]
 801894e:	f933 5c08 	ldrsh.w	r5, [r3, #-8]
 8018952:	f93a ec06 	ldrsh.w	lr, [sl, #-6]
 8018956:	f939 2c06 	ldrsh.w	r2, [r9, #-6]
 801895a:	f933 8c06 	ldrsh.w	r8, [r3, #-6]
 801895e:	f93a 6c04 	ldrsh.w	r6, [sl, #-4]
 8018962:	f939 cc04 	ldrsh.w	ip, [r9, #-4]
 8018966:	fbc7 0184 	smlalbb	r0, r1, r7, r4
 801896a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801896e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8018972:	fbc4 0185 	smlalbb	r0, r1, r4, r5
 8018976:	4604      	mov	r4, r0
 8018978:	460d      	mov	r5, r1
 801897a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801897e:	f933 7c04 	ldrsh.w	r7, [r3, #-4]
 8018982:	fbc2 018e 	smlalbb	r0, r1, r2, lr
 8018986:	fbce 4588 	smlalbb	r4, r5, lr, r8
 801898a:	f93a 2c02 	ldrsh.w	r2, [sl, #-2]
 801898e:	f933 ec02 	ldrsh.w	lr, [r3, #-2]
 8018992:	f939 8c02 	ldrsh.w	r8, [r9, #-2]
 8018996:	fbc6 4587 	smlalbb	r4, r5, r6, r7
 801899a:	fbcc 0186 	smlalbb	r0, r1, ip, r6
 801899e:	fbc2 458e 	smlalbb	r4, r5, r2, lr
 80189a2:	f1bb 0b01 	subs.w	fp, fp, #1
 80189a6:	f10a 0a08 	add.w	sl, sl, #8
 80189aa:	fbc8 0182 	smlalbb	r0, r1, r8, r2
 80189ae:	f109 0908 	add.w	r9, r9, #8
 80189b2:	e9cd 4500 	strd	r4, r5, [sp]
 80189b6:	f103 0308 	add.w	r3, r3, #8
 80189ba:	d1c4      	bne.n	8018946 <arm_fir_decimate_q15+0xfe>
 80189bc:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80189be:	9c08      	ldr	r4, [sp, #32]
 80189c0:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
 80189c4:	18a5      	adds	r5, r4, r2
 80189c6:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80189c8:	4490      	add	r8, r2
 80189ca:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80189cc:	b17b      	cbz	r3, 80189ee <arm_fir_decimate_q15+0x1a6>
 80189ce:	e9dd 6700 	ldrd	r6, r7, [sp]
 80189d2:	f934 2b02 	ldrsh.w	r2, [r4], #2
 80189d6:	f938 cb02 	ldrsh.w	ip, [r8], #2
 80189da:	f935 eb02 	ldrsh.w	lr, [r5], #2
 80189de:	3b01      	subs	r3, #1
 80189e0:	fbcc 0182 	smlalbb	r0, r1, ip, r2
 80189e4:	fbc2 678e 	smlalbb	r6, r7, r2, lr
 80189e8:	d1f3      	bne.n	80189d2 <arm_fir_decimate_q15+0x18a>
 80189ea:	e9cd 6700 	strd	r6, r7, [sp]
 80189ee:	0bc3      	lsrs	r3, r0, #15
 80189f0:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80189f2:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80189f4:	9a08      	ldr	r2, [sp, #32]
 80189f6:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
 80189fa:	f303 030f 	ssat	r3, #16, r3
 80189fe:	f820 3c04 	strh.w	r3, [r0, #-4]
 8018a02:	4603      	mov	r3, r0
 8018a04:	4422      	add	r2, r4
 8018a06:	3304      	adds	r3, #4
 8018a08:	e9dd 4500 	ldrd	r4, r5, [sp]
 8018a0c:	930b      	str	r3, [sp, #44]	; 0x2c
 8018a0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018a10:	4690      	mov	r8, r2
 8018a12:	3b01      	subs	r3, #1
 8018a14:	ea4f 32d4 	mov.w	r2, r4, lsr #15
 8018a18:	ea42 4245 	orr.w	r2, r2, r5, lsl #17
 8018a1c:	930a      	str	r3, [sp, #40]	; 0x28
 8018a1e:	f302 020f 	ssat	r2, #16, r2
 8018a22:	f820 2c02 	strh.w	r2, [r0, #-2]
 8018a26:	d00d      	beq.n	8018a44 <arm_fir_decimate_q15+0x1fc>
 8018a28:	9b05      	ldr	r3, [sp, #20]
 8018a2a:	781a      	ldrb	r2, [r3, #0]
 8018a2c:	e73f      	b.n	80188ae <arm_fir_decimate_q15+0x66>
 8018a2e:	9b06      	ldr	r3, [sp, #24]
 8018a30:	9a07      	ldr	r2, [sp, #28]
 8018a32:	1e99      	subs	r1, r3, #2
 8018a34:	462b      	mov	r3, r5
 8018a36:	f932 0b02 	ldrsh.w	r0, [r2], #2
 8018a3a:	f821 0f02 	strh.w	r0, [r1, #2]!
 8018a3e:	3b01      	subs	r3, #1
 8018a40:	d1f9      	bne.n	8018a36 <arm_fir_decimate_q15+0x1ee>
 8018a42:	e762      	b.n	801890a <arm_fir_decimate_q15+0xc2>
 8018a44:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8018a46:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8018a48:	f8cd 8000 	str.w	r8, [sp]
 8018a4c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8018a50:	9312      	str	r3, [sp, #72]	; 0x48
 8018a52:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018a54:	2b00      	cmp	r3, #0
 8018a56:	f000 8090 	beq.w	8018b7a <arm_fir_decimate_q15+0x332>
 8018a5a:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8018a5c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8018a5e:	9e07      	ldr	r6, [sp, #28]
 8018a60:	f8dd b048 	ldr.w	fp, [sp, #72]	; 0x48
 8018a64:	9d06      	ldr	r5, [sp, #24]
 8018a66:	9f00      	ldr	r7, [sp, #0]
 8018a68:	ea4f 0c91 	mov.w	ip, r1, lsr #2
 8018a6c:	ea4f 09cc 	mov.w	r9, ip, lsl #3
 8018a70:	eb02 0a09 	add.w	sl, r2, r9
 8018a74:	f001 0803 	and.w	r8, r1, #3
 8018a78:	f8cd a018 	str.w	sl, [sp, #24]
 8018a7c:	f8cd 9020 	str.w	r9, [sp, #32]
 8018a80:	469a      	mov	sl, r3
 8018a82:	f8cd c000 	str.w	ip, [sp]
 8018a86:	f8cd 8008 	str.w	r8, [sp, #8]
 8018a8a:	9a05      	ldr	r2, [sp, #20]
 8018a8c:	1d29      	adds	r1, r5, #4
 8018a8e:	1d33      	adds	r3, r6, #4
 8018a90:	428e      	cmp	r6, r1
 8018a92:	bf38      	it	cc
 8018a94:	429d      	cmpcc	r5, r3
 8018a96:	7812      	ldrb	r2, [r2, #0]
 8018a98:	bf2c      	ite	cs
 8018a9a:	2101      	movcs	r1, #1
 8018a9c:	2100      	movcc	r1, #0
 8018a9e:	2a0c      	cmp	r2, #12
 8018aa0:	bf94      	ite	ls
 8018aa2:	2100      	movls	r1, #0
 8018aa4:	f001 0101 	andhi.w	r1, r1, #1
 8018aa8:	4613      	mov	r3, r2
 8018aaa:	2900      	cmp	r1, #0
 8018aac:	f000 80a4 	beq.w	8018bf8 <arm_fir_decimate_q15+0x3b0>
 8018ab0:	ea45 0106 	orr.w	r1, r5, r6
 8018ab4:	0789      	lsls	r1, r1, #30
 8018ab6:	f040 809f 	bne.w	8018bf8 <arm_fir_decimate_q15+0x3b0>
 8018aba:	1e91      	subs	r1, r2, #2
 8018abc:	0849      	lsrs	r1, r1, #1
 8018abe:	3101      	adds	r1, #1
 8018ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8018ac4:	1f34      	subs	r4, r6, #4
 8018ac6:	4628      	mov	r0, r5
 8018ac8:	2300      	movs	r3, #0
 8018aca:	468e      	mov	lr, r1
 8018acc:	3301      	adds	r3, #1
 8018ace:	f854 1f04 	ldr.w	r1, [r4, #4]!
 8018ad2:	f840 1b04 	str.w	r1, [r0], #4
 8018ad6:	4573      	cmp	r3, lr
 8018ad8:	d3f8      	bcc.n	8018acc <arm_fir_decimate_q15+0x284>
 8018ada:	4562      	cmp	r2, ip
 8018adc:	d003      	beq.n	8018ae6 <arm_fir_decimate_q15+0x29e>
 8018ade:	f936 301c 	ldrsh.w	r3, [r6, ip, lsl #1]
 8018ae2:	f825 301c 	strh.w	r3, [r5, ip, lsl #1]
 8018ae6:	9c00      	ldr	r4, [sp, #0]
 8018ae8:	0052      	lsls	r2, r2, #1
 8018aea:	4415      	add	r5, r2
 8018aec:	4416      	add	r6, r2
 8018aee:	2c00      	cmp	r4, #0
 8018af0:	f000 8091 	beq.w	8018c16 <arm_fir_decimate_q15+0x3ce>
 8018af4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018af6:	2000      	movs	r0, #0
 8018af8:	f103 0208 	add.w	r2, r3, #8
 8018afc:	2100      	movs	r1, #0
 8018afe:	f107 0308 	add.w	r3, r7, #8
 8018b02:	46a9      	mov	r9, r5
 8018b04:	f932 cc08 	ldrsh.w	ip, [r2, #-8]
 8018b08:	f933 8c08 	ldrsh.w	r8, [r3, #-8]
 8018b0c:	f932 5c06 	ldrsh.w	r5, [r2, #-6]
 8018b10:	f933 ec06 	ldrsh.w	lr, [r3, #-6]
 8018b14:	fbc8 018c 	smlalbb	r0, r1, r8, ip
 8018b18:	f932 cc04 	ldrsh.w	ip, [r2, #-4]
 8018b1c:	f933 8c04 	ldrsh.w	r8, [r3, #-4]
 8018b20:	fbce 0185 	smlalbb	r0, r1, lr, r5
 8018b24:	f932 5c02 	ldrsh.w	r5, [r2, #-2]
 8018b28:	f933 ec02 	ldrsh.w	lr, [r3, #-2]
 8018b2c:	fbc8 018c 	smlalbb	r0, r1, r8, ip
 8018b30:	3c01      	subs	r4, #1
 8018b32:	f102 0208 	add.w	r2, r2, #8
 8018b36:	fbce 0185 	smlalbb	r0, r1, lr, r5
 8018b3a:	f103 0308 	add.w	r3, r3, #8
 8018b3e:	d1e1      	bne.n	8018b04 <arm_fir_decimate_q15+0x2bc>
 8018b40:	9b08      	ldr	r3, [sp, #32]
 8018b42:	9a06      	ldr	r2, [sp, #24]
 8018b44:	464d      	mov	r5, r9
 8018b46:	18fc      	adds	r4, r7, r3
 8018b48:	9b02      	ldr	r3, [sp, #8]
 8018b4a:	b13b      	cbz	r3, 8018b5c <arm_fir_decimate_q15+0x314>
 8018b4c:	f932 eb02 	ldrsh.w	lr, [r2], #2
 8018b50:	f934 cb02 	ldrsh.w	ip, [r4], #2
 8018b54:	3b01      	subs	r3, #1
 8018b56:	fbcc 018e 	smlalbb	r0, r1, ip, lr
 8018b5a:	d1f7      	bne.n	8018b4c <arm_fir_decimate_q15+0x304>
 8018b5c:	9b05      	ldr	r3, [sp, #20]
 8018b5e:	781b      	ldrb	r3, [r3, #0]
 8018b60:	0bc2      	lsrs	r2, r0, #15
 8018b62:	f1ba 0a01 	subs.w	sl, sl, #1
 8018b66:	ea42 4241 	orr.w	r2, r2, r1, lsl #17
 8018b6a:	eb07 0743 	add.w	r7, r7, r3, lsl #1
 8018b6e:	f302 020f 	ssat	r2, #16, r2
 8018b72:	f82b 2b02 	strh.w	r2, [fp], #2
 8018b76:	d188      	bne.n	8018a8a <arm_fir_decimate_q15+0x242>
 8018b78:	9700      	str	r7, [sp, #0]
 8018b7a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8018b7c:	1e5f      	subs	r7, r3, #1
 8018b7e:	9b05      	ldr	r3, [sp, #20]
 8018b80:	08bd      	lsrs	r5, r7, #2
 8018b82:	689e      	ldr	r6, [r3, #8]
 8018b84:	d02a      	beq.n	8018bdc <arm_fir_decimate_q15+0x394>
 8018b86:	9800      	ldr	r0, [sp, #0]
 8018b88:	4602      	mov	r2, r0
 8018b8a:	f106 0310 	add.w	r3, r6, #16
 8018b8e:	3210      	adds	r2, #16
 8018b90:	4296      	cmp	r6, r2
 8018b92:	bf38      	it	cc
 8018b94:	4298      	cmpcc	r0, r3
 8018b96:	bf2c      	ite	cs
 8018b98:	2301      	movcs	r3, #1
 8018b9a:	2300      	movcc	r3, #0
 8018b9c:	2d02      	cmp	r5, #2
 8018b9e:	bf94      	ite	ls
 8018ba0:	2300      	movls	r3, #0
 8018ba2:	f003 0301 	andhi.w	r3, r3, #1
 8018ba6:	2b00      	cmp	r3, #0
 8018ba8:	d043      	beq.n	8018c32 <arm_fir_decimate_q15+0x3ea>
 8018baa:	ea46 0300 	orr.w	r3, r6, r0
 8018bae:	079b      	lsls	r3, r3, #30
 8018bb0:	d13f      	bne.n	8018c32 <arm_fir_decimate_q15+0x3ea>
 8018bb2:	4603      	mov	r3, r0
 8018bb4:	f106 0208 	add.w	r2, r6, #8
 8018bb8:	3308      	adds	r3, #8
 8018bba:	2100      	movs	r1, #0
 8018bbc:	e913 0011 	ldmdb	r3, {r0, r4}
 8018bc0:	3101      	adds	r1, #1
 8018bc2:	428d      	cmp	r5, r1
 8018bc4:	e902 0011 	stmdb	r2, {r0, r4}
 8018bc8:	f103 0308 	add.w	r3, r3, #8
 8018bcc:	f102 0208 	add.w	r2, r2, #8
 8018bd0:	d1f4      	bne.n	8018bbc <arm_fir_decimate_q15+0x374>
 8018bd2:	9b00      	ldr	r3, [sp, #0]
 8018bd4:	00ed      	lsls	r5, r5, #3
 8018bd6:	442b      	add	r3, r5
 8018bd8:	442e      	add	r6, r5
 8018bda:	9300      	str	r3, [sp, #0]
 8018bdc:	f017 0303 	ands.w	r3, r7, #3
 8018be0:	d007      	beq.n	8018bf2 <arm_fir_decimate_q15+0x3aa>
 8018be2:	9a00      	ldr	r2, [sp, #0]
 8018be4:	3e02      	subs	r6, #2
 8018be6:	f932 1b02 	ldrsh.w	r1, [r2], #2
 8018bea:	f826 1f02 	strh.w	r1, [r6, #2]!
 8018bee:	3b01      	subs	r3, #1
 8018bf0:	d1f9      	bne.n	8018be6 <arm_fir_decimate_q15+0x39e>
 8018bf2:	b017      	add	sp, #92	; 0x5c
 8018bf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018bf8:	1ea8      	subs	r0, r5, #2
 8018bfa:	4631      	mov	r1, r6
 8018bfc:	f931 4b02 	ldrsh.w	r4, [r1], #2
 8018c00:	f820 4f02 	strh.w	r4, [r0, #2]!
 8018c04:	3b01      	subs	r3, #1
 8018c06:	d1f9      	bne.n	8018bfc <arm_fir_decimate_q15+0x3b4>
 8018c08:	9c00      	ldr	r4, [sp, #0]
 8018c0a:	0052      	lsls	r2, r2, #1
 8018c0c:	4415      	add	r5, r2
 8018c0e:	4416      	add	r6, r2
 8018c10:	2c00      	cmp	r4, #0
 8018c12:	f47f af6f 	bne.w	8018af4 <arm_fir_decimate_q15+0x2ac>
 8018c16:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8018c18:	463c      	mov	r4, r7
 8018c1a:	2000      	movs	r0, #0
 8018c1c:	2100      	movs	r1, #0
 8018c1e:	e793      	b.n	8018b48 <arm_fir_decimate_q15+0x300>
 8018c20:	2400      	movs	r4, #0
 8018c22:	461d      	mov	r5, r3
 8018c24:	2300      	movs	r3, #0
 8018c26:	e9cd 3400 	strd	r3, r4, [sp]
 8018c2a:	4621      	mov	r1, r4
 8018c2c:	4618      	mov	r0, r3
 8018c2e:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8018c30:	e6cb      	b.n	80189ca <arm_fir_decimate_q15+0x182>
 8018c32:	9b00      	ldr	r3, [sp, #0]
 8018c34:	4629      	mov	r1, r5
 8018c36:	f103 0208 	add.w	r2, r3, #8
 8018c3a:	f106 0308 	add.w	r3, r6, #8
 8018c3e:	f932 0c08 	ldrsh.w	r0, [r2, #-8]
 8018c42:	f823 0c08 	strh.w	r0, [r3, #-8]
 8018c46:	f932 0c06 	ldrsh.w	r0, [r2, #-6]
 8018c4a:	f823 0c06 	strh.w	r0, [r3, #-6]
 8018c4e:	f932 0c04 	ldrsh.w	r0, [r2, #-4]
 8018c52:	f823 0c04 	strh.w	r0, [r3, #-4]
 8018c56:	f932 0c02 	ldrsh.w	r0, [r2, #-2]
 8018c5a:	f823 0c02 	strh.w	r0, [r3, #-2]
 8018c5e:	3901      	subs	r1, #1
 8018c60:	f102 0208 	add.w	r2, r2, #8
 8018c64:	f103 0308 	add.w	r3, r3, #8
 8018c68:	d1e9      	bne.n	8018c3e <arm_fir_decimate_q15+0x3f6>
 8018c6a:	e7b2      	b.n	8018bd2 <arm_fir_decimate_q15+0x38a>

08018c6c <arm_fir_decimate_init_q15>:
 8018c6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018c6e:	9f07      	ldr	r7, [sp, #28]
 8018c70:	fbb7 f4f2 	udiv	r4, r7, r2
 8018c74:	fb02 7414 	mls	r4, r2, r4, r7
 8018c78:	b98c      	cbnz	r4, 8018c9e <arm_fir_decimate_init_q15+0x32>
 8018c7a:	4616      	mov	r6, r2
 8018c7c:	f101 4200 	add.w	r2, r1, #2147483648	; 0x80000000
 8018c80:	3a01      	subs	r2, #1
 8018c82:	443a      	add	r2, r7
 8018c84:	4605      	mov	r5, r0
 8018c86:	8041      	strh	r1, [r0, #2]
 8018c88:	6043      	str	r3, [r0, #4]
 8018c8a:	0052      	lsls	r2, r2, #1
 8018c8c:	4621      	mov	r1, r4
 8018c8e:	9806      	ldr	r0, [sp, #24]
 8018c90:	f000 feee 	bl	8019a70 <memset>
 8018c94:	9b06      	ldr	r3, [sp, #24]
 8018c96:	60ab      	str	r3, [r5, #8]
 8018c98:	702e      	strb	r6, [r5, #0]
 8018c9a:	4620      	mov	r0, r4
 8018c9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018c9e:	f06f 0001 	mvn.w	r0, #1
 8018ca2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08018ca4 <arm_cmplx_mag_f32>:
 8018ca4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018ca8:	ea5f 0892 	movs.w	r8, r2, lsr #2
 8018cac:	b084      	sub	sp, #16
 8018cae:	d07f      	beq.n	8018db0 <arm_cmplx_mag_f32+0x10c>
 8018cb0:	2700      	movs	r7, #0
 8018cb2:	f100 0420 	add.w	r4, r0, #32
 8018cb6:	f101 0510 	add.w	r5, r1, #16
 8018cba:	4646      	mov	r6, r8
 8018cbc:	e05a      	b.n	8018d74 <arm_cmplx_mag_f32+0xd0>
 8018cbe:	eeb1 0ae7 	vsqrt.f32	s0, s15
 8018cc2:	eeb4 0a40 	vcmp.f32	s0, s0
 8018cc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018cca:	f040 80a4 	bne.w	8018e16 <arm_cmplx_mag_f32+0x172>
 8018cce:	ed05 0a04 	vstr	s0, [r5, #-16]
 8018cd2:	ed54 7a06 	vldr	s15, [r4, #-24]	; 0xffffffe8
 8018cd6:	ed14 0a05 	vldr	s0, [r4, #-20]	; 0xffffffec
 8018cda:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8018cde:	ee20 0a00 	vmul.f32	s0, s0, s0
 8018ce2:	ee77 7a80 	vadd.f32	s15, s15, s0
 8018ce6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8018cea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018cee:	f2c0 808f 	blt.w	8018e10 <arm_cmplx_mag_f32+0x16c>
 8018cf2:	eeb1 0ae7 	vsqrt.f32	s0, s15
 8018cf6:	eeb4 0a40 	vcmp.f32	s0, s0
 8018cfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018cfe:	f040 80af 	bne.w	8018e60 <arm_cmplx_mag_f32+0x1bc>
 8018d02:	ed05 0a03 	vstr	s0, [r5, #-12]
 8018d06:	ed54 7a04 	vldr	s15, [r4, #-16]
 8018d0a:	ed14 0a03 	vldr	s0, [r4, #-12]
 8018d0e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8018d12:	ee20 0a00 	vmul.f32	s0, s0, s0
 8018d16:	ee77 7a80 	vadd.f32	s15, s15, s0
 8018d1a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8018d1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018d22:	db72      	blt.n	8018e0a <arm_cmplx_mag_f32+0x166>
 8018d24:	eeb1 0ae7 	vsqrt.f32	s0, s15
 8018d28:	eeb4 0a40 	vcmp.f32	s0, s0
 8018d2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018d30:	f040 808c 	bne.w	8018e4c <arm_cmplx_mag_f32+0x1a8>
 8018d34:	ed05 0a02 	vstr	s0, [r5, #-8]
 8018d38:	ed54 7a02 	vldr	s15, [r4, #-8]
 8018d3c:	ed14 0a01 	vldr	s0, [r4, #-4]
 8018d40:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8018d44:	ee20 0a00 	vmul.f32	s0, s0, s0
 8018d48:	ee77 7a80 	vadd.f32	s15, s15, s0
 8018d4c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8018d50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018d54:	db20      	blt.n	8018d98 <arm_cmplx_mag_f32+0xf4>
 8018d56:	eeb1 0ae7 	vsqrt.f32	s0, s15
 8018d5a:	eeb4 0a40 	vcmp.f32	s0, s0
 8018d5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018d62:	d169      	bne.n	8018e38 <arm_cmplx_mag_f32+0x194>
 8018d64:	3e01      	subs	r6, #1
 8018d66:	ed05 0a01 	vstr	s0, [r5, #-4]
 8018d6a:	f104 0420 	add.w	r4, r4, #32
 8018d6e:	f105 0510 	add.w	r5, r5, #16
 8018d72:	d019      	beq.n	8018da8 <arm_cmplx_mag_f32+0x104>
 8018d74:	ed54 7a08 	vldr	s15, [r4, #-32]	; 0xffffffe0
 8018d78:	ed14 0a07 	vldr	s0, [r4, #-28]	; 0xffffffe4
 8018d7c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8018d80:	ee20 0a00 	vmul.f32	s0, s0, s0
 8018d84:	ee77 7a80 	vadd.f32	s15, s15, s0
 8018d88:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8018d8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018d90:	da95      	bge.n	8018cbe <arm_cmplx_mag_f32+0x1a>
 8018d92:	f845 7c10 	str.w	r7, [r5, #-16]
 8018d96:	e79c      	b.n	8018cd2 <arm_cmplx_mag_f32+0x2e>
 8018d98:	3e01      	subs	r6, #1
 8018d9a:	f845 7c04 	str.w	r7, [r5, #-4]
 8018d9e:	f104 0420 	add.w	r4, r4, #32
 8018da2:	f105 0510 	add.w	r5, r5, #16
 8018da6:	d1e5      	bne.n	8018d74 <arm_cmplx_mag_f32+0xd0>
 8018da8:	eb00 1048 	add.w	r0, r0, r8, lsl #5
 8018dac:	eb01 1108 	add.w	r1, r1, r8, lsl #4
 8018db0:	f012 0503 	ands.w	r5, r2, #3
 8018db4:	d026      	beq.n	8018e04 <arm_cmplx_mag_f32+0x160>
 8018db6:	2600      	movs	r6, #0
 8018db8:	f100 0408 	add.w	r4, r0, #8
 8018dbc:	e00c      	b.n	8018dd8 <arm_cmplx_mag_f32+0x134>
 8018dbe:	eeb1 0ae7 	vsqrt.f32	s0, s15
 8018dc2:	eeb4 0a40 	vcmp.f32	s0, s0
 8018dc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018dca:	d12e      	bne.n	8018e2a <arm_cmplx_mag_f32+0x186>
 8018dcc:	3d01      	subs	r5, #1
 8018dce:	ed01 0a01 	vstr	s0, [r1, #-4]
 8018dd2:	f104 0408 	add.w	r4, r4, #8
 8018dd6:	d015      	beq.n	8018e04 <arm_cmplx_mag_f32+0x160>
 8018dd8:	ed54 7a02 	vldr	s15, [r4, #-8]
 8018ddc:	ed14 0a01 	vldr	s0, [r4, #-4]
 8018de0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8018de4:	ee20 0a00 	vmul.f32	s0, s0, s0
 8018de8:	3104      	adds	r1, #4
 8018dea:	ee77 7a80 	vadd.f32	s15, s15, s0
 8018dee:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8018df2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018df6:	dae2      	bge.n	8018dbe <arm_cmplx_mag_f32+0x11a>
 8018df8:	3d01      	subs	r5, #1
 8018dfa:	f841 6c04 	str.w	r6, [r1, #-4]
 8018dfe:	f104 0408 	add.w	r4, r4, #8
 8018e02:	d1e9      	bne.n	8018dd8 <arm_cmplx_mag_f32+0x134>
 8018e04:	b004      	add	sp, #16
 8018e06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018e0a:	f845 7c08 	str.w	r7, [r5, #-8]
 8018e0e:	e793      	b.n	8018d38 <arm_cmplx_mag_f32+0x94>
 8018e10:	f845 7c0c 	str.w	r7, [r5, #-12]
 8018e14:	e777      	b.n	8018d06 <arm_cmplx_mag_f32+0x62>
 8018e16:	eeb0 0a67 	vmov.f32	s0, s15
 8018e1a:	9203      	str	r2, [sp, #12]
 8018e1c:	9102      	str	r1, [sp, #8]
 8018e1e:	9001      	str	r0, [sp, #4]
 8018e20:	f005 f8a0 	bl	801df64 <sqrtf>
 8018e24:	a801      	add	r0, sp, #4
 8018e26:	c807      	ldmia	r0, {r0, r1, r2}
 8018e28:	e751      	b.n	8018cce <arm_cmplx_mag_f32+0x2a>
 8018e2a:	eeb0 0a67 	vmov.f32	s0, s15
 8018e2e:	9101      	str	r1, [sp, #4]
 8018e30:	f005 f898 	bl	801df64 <sqrtf>
 8018e34:	9901      	ldr	r1, [sp, #4]
 8018e36:	e7c9      	b.n	8018dcc <arm_cmplx_mag_f32+0x128>
 8018e38:	eeb0 0a67 	vmov.f32	s0, s15
 8018e3c:	9203      	str	r2, [sp, #12]
 8018e3e:	9102      	str	r1, [sp, #8]
 8018e40:	9001      	str	r0, [sp, #4]
 8018e42:	f005 f88f 	bl	801df64 <sqrtf>
 8018e46:	a801      	add	r0, sp, #4
 8018e48:	c807      	ldmia	r0, {r0, r1, r2}
 8018e4a:	e78b      	b.n	8018d64 <arm_cmplx_mag_f32+0xc0>
 8018e4c:	eeb0 0a67 	vmov.f32	s0, s15
 8018e50:	9203      	str	r2, [sp, #12]
 8018e52:	9102      	str	r1, [sp, #8]
 8018e54:	9001      	str	r0, [sp, #4]
 8018e56:	f005 f885 	bl	801df64 <sqrtf>
 8018e5a:	a801      	add	r0, sp, #4
 8018e5c:	c807      	ldmia	r0, {r0, r1, r2}
 8018e5e:	e769      	b.n	8018d34 <arm_cmplx_mag_f32+0x90>
 8018e60:	eeb0 0a67 	vmov.f32	s0, s15
 8018e64:	9203      	str	r2, [sp, #12]
 8018e66:	9102      	str	r1, [sp, #8]
 8018e68:	9001      	str	r0, [sp, #4]
 8018e6a:	f005 f87b 	bl	801df64 <sqrtf>
 8018e6e:	a801      	add	r0, sp, #4
 8018e70:	c807      	ldmia	r0, {r0, r1, r2}
 8018e72:	e746      	b.n	8018d02 <arm_cmplx_mag_f32+0x5e>

08018e74 <arm_cos_f32>:
 8018e74:	eddf 7a1c 	vldr	s15, [pc, #112]	; 8018ee8 <arm_cos_f32+0x74>
 8018e78:	ee20 0a27 	vmul.f32	s0, s0, s15
 8018e7c:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 8018e80:	ee30 0a27 	vadd.f32	s0, s0, s15
 8018e84:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8018e88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018e8c:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8018e90:	d504      	bpl.n	8018e9c <arm_cos_f32+0x28>
 8018e92:	ee17 3a90 	vmov	r3, s15
 8018e96:	3b01      	subs	r3, #1
 8018e98:	ee07 3a90 	vmov	s15, r3
 8018e9c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018ea0:	eddf 6a12 	vldr	s13, [pc, #72]	; 8018eec <arm_cos_f32+0x78>
 8018ea4:	4a12      	ldr	r2, [pc, #72]	; (8018ef0 <arm_cos_f32+0x7c>)
 8018ea6:	ee30 0a67 	vsub.f32	s0, s0, s15
 8018eaa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8018eae:	ee20 0a26 	vmul.f32	s0, s0, s13
 8018eb2:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8018eb6:	ee17 3a90 	vmov	r3, s15
 8018eba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8018ebe:	ee07 3a90 	vmov	s15, r3
 8018ec2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8018ec6:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 8018eca:	ee70 7a67 	vsub.f32	s15, s0, s15
 8018ece:	edd1 6a01 	vldr	s13, [r1, #4]
 8018ed2:	ed91 0a00 	vldr	s0, [r1]
 8018ed6:	ee37 7a67 	vsub.f32	s14, s14, s15
 8018eda:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8018ede:	ee27 0a00 	vmul.f32	s0, s14, s0
 8018ee2:	ee30 0a27 	vadd.f32	s0, s0, s15
 8018ee6:	4770      	bx	lr
 8018ee8:	3e22f983 	.word	0x3e22f983
 8018eec:	44000000 	.word	0x44000000
 8018ef0:	08031434 	.word	0x08031434

08018ef4 <arm_mult_f32>:
 8018ef4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018ef6:	ea5f 0e93 	movs.w	lr, r3, lsr #2
 8018efa:	d033      	beq.n	8018f64 <arm_mult_f32+0x70>
 8018efc:	f100 0610 	add.w	r6, r0, #16
 8018f00:	f101 0510 	add.w	r5, r1, #16
 8018f04:	f102 0410 	add.w	r4, r2, #16
 8018f08:	4677      	mov	r7, lr
 8018f0a:	ed16 6a04 	vldr	s12, [r6, #-16]
 8018f0e:	ed55 4a04 	vldr	s9, [r5, #-16]
 8018f12:	ed56 6a02 	vldr	s13, [r6, #-8]
 8018f16:	ed15 5a02 	vldr	s10, [r5, #-8]
 8018f1a:	ed16 7a03 	vldr	s14, [r6, #-12]
 8018f1e:	ed55 5a03 	vldr	s11, [r5, #-12]
 8018f22:	ed56 7a01 	vldr	s15, [r6, #-4]
 8018f26:	ee26 6a24 	vmul.f32	s12, s12, s9
 8018f2a:	ee66 6a85 	vmul.f32	s13, s13, s10
 8018f2e:	ed04 6a04 	vstr	s12, [r4, #-16]
 8018f32:	ed15 6a01 	vldr	s12, [r5, #-4]
 8018f36:	ed44 6a02 	vstr	s13, [r4, #-8]
 8018f3a:	ee27 7a25 	vmul.f32	s14, s14, s11
 8018f3e:	ee67 7a86 	vmul.f32	s15, s15, s12
 8018f42:	3f01      	subs	r7, #1
 8018f44:	ed04 7a03 	vstr	s14, [r4, #-12]
 8018f48:	ed44 7a01 	vstr	s15, [r4, #-4]
 8018f4c:	f106 0610 	add.w	r6, r6, #16
 8018f50:	f105 0510 	add.w	r5, r5, #16
 8018f54:	f104 0410 	add.w	r4, r4, #16
 8018f58:	d1d7      	bne.n	8018f0a <arm_mult_f32+0x16>
 8018f5a:	ea4f 140e 	mov.w	r4, lr, lsl #4
 8018f5e:	4420      	add	r0, r4
 8018f60:	4421      	add	r1, r4
 8018f62:	4422      	add	r2, r4
 8018f64:	f013 0303 	ands.w	r3, r3, #3
 8018f68:	d009      	beq.n	8018f7e <arm_mult_f32+0x8a>
 8018f6a:	ecf0 7a01 	vldmia	r0!, {s15}
 8018f6e:	ecb1 7a01 	vldmia	r1!, {s14}
 8018f72:	ee67 7a87 	vmul.f32	s15, s15, s14
 8018f76:	3b01      	subs	r3, #1
 8018f78:	ece2 7a01 	vstmia	r2!, {s15}
 8018f7c:	d1f5      	bne.n	8018f6a <arm_mult_f32+0x76>
 8018f7e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08018f80 <arm_radix8_butterfly_f32>:
 8018f80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018f84:	ed2d 8b10 	vpush	{d8-d15}
 8018f88:	461c      	mov	r4, r3
 8018f8a:	b09d      	sub	sp, #116	; 0x74
 8018f8c:	4603      	mov	r3, r0
 8018f8e:	3304      	adds	r3, #4
 8018f90:	ed9f bac4 	vldr	s22, [pc, #784]	; 80192a4 <arm_radix8_butterfly_f32+0x324>
 8018f94:	9019      	str	r0, [sp, #100]	; 0x64
 8018f96:	921a      	str	r2, [sp, #104]	; 0x68
 8018f98:	468b      	mov	fp, r1
 8018f9a:	931b      	str	r3, [sp, #108]	; 0x6c
 8018f9c:	468a      	mov	sl, r1
 8018f9e:	46a1      	mov	r9, r4
 8018fa0:	4607      	mov	r7, r0
 8018fa2:	ea4f 03db 	mov.w	r3, fp, lsr #3
 8018fa6:	ea4f 0843 	mov.w	r8, r3, lsl #1
 8018faa:	eb03 0508 	add.w	r5, r3, r8
 8018fae:	195c      	adds	r4, r3, r5
 8018fb0:	00de      	lsls	r6, r3, #3
 8018fb2:	191a      	adds	r2, r3, r4
 8018fb4:	9600      	str	r6, [sp, #0]
 8018fb6:	1898      	adds	r0, r3, r2
 8018fb8:	4619      	mov	r1, r3
 8018fba:	9e00      	ldr	r6, [sp, #0]
 8018fbc:	9311      	str	r3, [sp, #68]	; 0x44
 8018fbe:	4401      	add	r1, r0
 8018fc0:	eb07 02c2 	add.w	r2, r7, r2, lsl #3
 8018fc4:	eb07 01c1 	add.w	r1, r7, r1, lsl #3
 8018fc8:	19be      	adds	r6, r7, r6
 8018fca:	eb07 05c5 	add.w	r5, r7, r5, lsl #3
 8018fce:	eb07 04c4 	add.w	r4, r7, r4, lsl #3
 8018fd2:	eb07 00c0 	add.w	r0, r7, r0, lsl #3
 8018fd6:	9f00      	ldr	r7, [sp, #0]
 8018fd8:	011b      	lsls	r3, r3, #4
 8018fda:	eb06 0e07 	add.w	lr, r6, r7
 8018fde:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 8018fe0:	9302      	str	r3, [sp, #8]
 8018fe2:	3204      	adds	r2, #4
 8018fe4:	3104      	adds	r1, #4
 8018fe6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8018fea:	f04f 0c00 	mov.w	ip, #0
 8018fee:	edde 7a00 	vldr	s15, [lr]
 8018ff2:	edd6 6a00 	vldr	s13, [r6]
 8018ff6:	ed95 2a00 	vldr	s4, [r5]
 8018ffa:	ed17 aa01 	vldr	s20, [r7, #-4]
 8018ffe:	edd4 4a00 	vldr	s9, [r4]
 8019002:	ed90 5a00 	vldr	s10, [r0]
 8019006:	ed12 7a01 	vldr	s14, [r2, #-4]
 801900a:	ed51 0a01 	vldr	s1, [r1, #-4]
 801900e:	ee77 8a85 	vadd.f32	s17, s15, s10
 8019012:	ee76 3a87 	vadd.f32	s7, s13, s14
 8019016:	ee32 4a20 	vadd.f32	s8, s4, s1
 801901a:	ee3a 3a24 	vadd.f32	s6, s20, s9
 801901e:	ee33 6a84 	vadd.f32	s12, s7, s8
 8019022:	ee73 5a28 	vadd.f32	s11, s6, s17
 8019026:	ee36 7ac7 	vsub.f32	s14, s13, s14
 801902a:	ee75 6a86 	vadd.f32	s13, s11, s12
 801902e:	ee75 5ac6 	vsub.f32	s11, s11, s12
 8019032:	ed47 6a01 	vstr	s13, [r7, #-4]
 8019036:	edc4 5a00 	vstr	s11, [r4]
 801903a:	ed92 9a00 	vldr	s18, [r2]
 801903e:	ed95 1a01 	vldr	s2, [r5, #4]
 8019042:	edd6 5a01 	vldr	s11, [r6, #4]
 8019046:	ed91 6a00 	vldr	s12, [r1]
 801904a:	edd7 2a00 	vldr	s5, [r7]
 801904e:	edd4 1a01 	vldr	s3, [r4, #4]
 8019052:	edde 6a01 	vldr	s13, [lr, #4]
 8019056:	edd0 9a01 	vldr	s19, [r0, #4]
 801905a:	ee72 0a60 	vsub.f32	s1, s4, s1
 801905e:	ee71 aa46 	vsub.f32	s21, s2, s12
 8019062:	ee35 2ac9 	vsub.f32	s4, s11, s18
 8019066:	ee37 0a60 	vsub.f32	s0, s14, s1
 801906a:	ee32 8a2a 	vadd.f32	s16, s4, s21
 801906e:	ee37 7a20 	vadd.f32	s14, s14, s1
 8019072:	ee32 2a6a 	vsub.f32	s4, s4, s21
 8019076:	ee37 5ac5 	vsub.f32	s10, s15, s10
 801907a:	ee75 5a89 	vadd.f32	s11, s11, s18
 801907e:	ee60 0a0b 	vmul.f32	s1, s0, s22
 8019082:	ee7a 4a64 	vsub.f32	s9, s20, s9
 8019086:	ee31 6a06 	vadd.f32	s12, s2, s12
 801908a:	ee36 9aa9 	vadd.f32	s18, s13, s19
 801908e:	ee32 1aa1 	vadd.f32	s2, s5, s3
 8019092:	ee76 6ae9 	vsub.f32	s13, s13, s19
 8019096:	ee72 1ae1 	vsub.f32	s3, s5, s3
 801909a:	ee28 8a0b 	vmul.f32	s16, s16, s22
 801909e:	ee62 2a0b 	vmul.f32	s5, s4, s22
 80190a2:	ee67 7a0b 	vmul.f32	s15, s14, s22
 80190a6:	ee33 3a68 	vsub.f32	s6, s6, s17
 80190aa:	ee36 0a88 	vadd.f32	s0, s13, s16
 80190ae:	ee75 8a86 	vadd.f32	s17, s11, s12
 80190b2:	ee36 7ac8 	vsub.f32	s14, s13, s16
 80190b6:	ee33 4ac4 	vsub.f32	s8, s7, s8
 80190ba:	ee74 6ae0 	vsub.f32	s13, s9, s1
 80190be:	ee74 3aa0 	vadd.f32	s7, s9, s1
 80190c2:	ee35 6ac6 	vsub.f32	s12, s11, s12
 80190c6:	ee75 4a27 	vadd.f32	s9, s10, s15
 80190ca:	ee71 5a49 	vsub.f32	s11, s2, s18
 80190ce:	ee31 2a09 	vadd.f32	s4, s2, s18
 80190d2:	ee75 7a67 	vsub.f32	s15, s10, s15
 80190d6:	ee31 1aa2 	vadd.f32	s2, s3, s5
 80190da:	ee71 2ae2 	vsub.f32	s5, s3, s5
 80190de:	ee73 0a06 	vadd.f32	s1, s6, s12
 80190e2:	ee75 1ac4 	vsub.f32	s3, s11, s8
 80190e6:	ee36 5a87 	vadd.f32	s10, s13, s14
 80190ea:	ee32 8a28 	vadd.f32	s16, s4, s17
 80190ee:	ee33 6a46 	vsub.f32	s12, s6, s12
 80190f2:	ee34 4a25 	vadd.f32	s8, s8, s11
 80190f6:	ee33 3a80 	vadd.f32	s6, s7, s0
 80190fa:	ee36 7ac7 	vsub.f32	s14, s13, s14
 80190fe:	ee71 5a64 	vsub.f32	s11, s2, s9
 8019102:	ee72 6ae7 	vsub.f32	s13, s5, s15
 8019106:	ee32 2a68 	vsub.f32	s4, s4, s17
 801910a:	ee73 3ac0 	vsub.f32	s7, s7, s0
 801910e:	ee74 4a81 	vadd.f32	s9, s9, s2
 8019112:	ee77 7aa2 	vadd.f32	s15, s15, s5
 8019116:	44dc      	add	ip, fp
 8019118:	45e2      	cmp	sl, ip
 801911a:	ed87 8a00 	vstr	s16, [r7]
 801911e:	ed84 2a01 	vstr	s4, [r4, #4]
 8019122:	441f      	add	r7, r3
 8019124:	edce 0a00 	vstr	s1, [lr]
 8019128:	441c      	add	r4, r3
 801912a:	ed80 6a00 	vstr	s12, [r0]
 801912e:	edce 1a01 	vstr	s3, [lr, #4]
 8019132:	ed80 4a01 	vstr	s8, [r0, #4]
 8019136:	449e      	add	lr, r3
 8019138:	ed86 3a00 	vstr	s6, [r6]
 801913c:	4418      	add	r0, r3
 801913e:	ed41 3a01 	vstr	s7, [r1, #-4]
 8019142:	ed02 5a01 	vstr	s10, [r2, #-4]
 8019146:	ed85 7a00 	vstr	s14, [r5]
 801914a:	edc6 5a01 	vstr	s11, [r6, #4]
 801914e:	edc1 4a00 	vstr	s9, [r1]
 8019152:	441e      	add	r6, r3
 8019154:	edc2 6a00 	vstr	s13, [r2]
 8019158:	4419      	add	r1, r3
 801915a:	edc5 7a01 	vstr	s15, [r5, #4]
 801915e:	441a      	add	r2, r3
 8019160:	441d      	add	r5, r3
 8019162:	f63f af44 	bhi.w	8018fee <arm_radix8_butterfly_f32+0x6e>
 8019166:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8019168:	2a07      	cmp	r2, #7
 801916a:	f240 81f5 	bls.w	8019558 <arm_radix8_butterfly_f32+0x5d8>
 801916e:	f108 0101 	add.w	r1, r8, #1
 8019172:	188f      	adds	r7, r1, r2
 8019174:	eb09 0849 	add.w	r8, r9, r9, lsl #1
 8019178:	19d6      	adds	r6, r2, r7
 801917a:	eb08 0c09 	add.w	ip, r8, r9
 801917e:	1994      	adds	r4, r2, r6
 8019180:	eb0c 0e09 	add.w	lr, ip, r9
 8019184:	4610      	mov	r0, r2
 8019186:	9701      	str	r7, [sp, #4]
 8019188:	4420      	add	r0, r4
 801918a:	eb0e 0709 	add.w	r7, lr, r9
 801918e:	1815      	adds	r5, r2, r0
 8019190:	eb07 0209 	add.w	r2, r7, r9
 8019194:	9203      	str	r2, [sp, #12]
 8019196:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8019198:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 801919c:	9117      	str	r1, [sp, #92]	; 0x5c
 801919e:	440a      	add	r2, r1
 80191a0:	9900      	ldr	r1, [sp, #0]
 80191a2:	3108      	adds	r1, #8
 80191a4:	9100      	str	r1, [sp, #0]
 80191a6:	9902      	ldr	r1, [sp, #8]
 80191a8:	3108      	adds	r1, #8
 80191aa:	9102      	str	r1, [sp, #8]
 80191ac:	9919      	ldr	r1, [sp, #100]	; 0x64
 80191ae:	00ff      	lsls	r7, r7, #3
 80191b0:	9715      	str	r7, [sp, #84]	; 0x54
 80191b2:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 80191b6:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 80191ba:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
 80191be:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 80191c0:	9903      	ldr	r1, [sp, #12]
 80191c2:	19d7      	adds	r7, r2, r7
 80191c4:	00c9      	lsls	r1, r1, #3
 80191c6:	9114      	str	r1, [sp, #80]	; 0x50
 80191c8:	9710      	str	r7, [sp, #64]	; 0x40
 80191ca:	9919      	ldr	r1, [sp, #100]	; 0x64
 80191cc:	9f00      	ldr	r7, [sp, #0]
 80191ce:	19cf      	adds	r7, r1, r7
 80191d0:	970d      	str	r7, [sp, #52]	; 0x34
 80191d2:	9f02      	ldr	r7, [sp, #8]
 80191d4:	19cf      	adds	r7, r1, r7
 80191d6:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 80191da:	970c      	str	r7, [sp, #48]	; 0x30
 80191dc:	9f01      	ldr	r7, [sp, #4]
 80191de:	f8cd e058 	str.w	lr, [sp, #88]	; 0x58
 80191e2:	3504      	adds	r5, #4
 80191e4:	3004      	adds	r0, #4
 80191e6:	eb01 0ec7 	add.w	lr, r1, r7, lsl #3
 80191ea:	9508      	str	r5, [sp, #32]
 80191ec:	9009      	str	r0, [sp, #36]	; 0x24
 80191ee:	9d16      	ldr	r5, [sp, #88]	; 0x58
 80191f0:	981a      	ldr	r0, [sp, #104]	; 0x68
 80191f2:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
 80191f6:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 80191fa:	eb01 0ec6 	add.w	lr, r1, r6, lsl #3
 80191fe:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8019200:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
 8019204:	1945      	adds	r5, r0, r5
 8019206:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801920a:	460f      	mov	r7, r1
 801920c:	3404      	adds	r4, #4
 801920e:	4641      	mov	r1, r8
 8019210:	1841      	adds	r1, r0, r1
 8019212:	f8cd c048 	str.w	ip, [sp, #72]	; 0x48
 8019216:	940a      	str	r4, [sp, #40]	; 0x28
 8019218:	eb00 0c06 	add.w	ip, r0, r6
 801921c:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8019220:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8019222:	9506      	str	r5, [sp, #24]
 8019224:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8019226:	9105      	str	r1, [sp, #20]
 8019228:	4639      	mov	r1, r7
 801922a:	1905      	adds	r5, r0, r4
 801922c:	3108      	adds	r1, #8
 801922e:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8019230:	9507      	str	r5, [sp, #28]
 8019232:	910f      	str	r1, [sp, #60]	; 0x3c
 8019234:	ea4f 1509 	mov.w	r5, r9, lsl #4
 8019238:	2101      	movs	r1, #1
 801923a:	eb00 0e06 	add.w	lr, r0, r6
 801923e:	9518      	str	r5, [sp, #96]	; 0x60
 8019240:	9404      	str	r4, [sp, #16]
 8019242:	9103      	str	r1, [sp, #12]
 8019244:	4620      	mov	r0, r4
 8019246:	4689      	mov	r9, r1
 8019248:	9e06      	ldr	r6, [sp, #24]
 801924a:	ed90 fa00 	vldr	s30, [r0]
 801924e:	edd6 7a01 	vldr	s15, [r6, #4]
 8019252:	edd0 ba01 	vldr	s23, [r0, #4]
 8019256:	edcd 7a00 	vstr	s15, [sp]
 801925a:	a80d      	add	r0, sp, #52	; 0x34
 801925c:	edde 7a01 	vldr	s15, [lr, #4]
 8019260:	9c05      	ldr	r4, [sp, #20]
 8019262:	9d07      	ldr	r5, [sp, #28]
 8019264:	edd2 fa00 	vldr	s31, [r2]
 8019268:	ed92 ca01 	vldr	s24, [r2, #4]
 801926c:	edcd 7a01 	vstr	s15, [sp, #4]
 8019270:	c807      	ldmia	r0, {r0, r1, r2}
 8019272:	eddc 7a01 	vldr	s15, [ip, #4]
 8019276:	edd4 ea00 	vldr	s29, [r4]
 801927a:	ed95 ea00 	vldr	s28, [r5]
 801927e:	edd6 da00 	vldr	s27, [r6]
 8019282:	edd4 aa01 	vldr	s21, [r4, #4]
 8019286:	ed95 aa01 	vldr	s20, [r5, #4]
 801928a:	ed9e da00 	vldr	s26, [lr]
 801928e:	eddc ca00 	vldr	s25, [ip]
 8019292:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8019296:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8019298:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 801929a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 801929c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801929e:	edcd 7a02 	vstr	s15, [sp, #8]
 80192a2:	e001      	b.n	80192a8 <arm_radix8_butterfly_f32+0x328>
 80192a4:	3f3504f3 	.word	0x3f3504f3
 80192a8:	ed16 6a01 	vldr	s12, [r6, #-4]
 80192ac:	ed91 5a00 	vldr	s10, [r1]
 80192b0:	ed57 9a01 	vldr	s19, [r7, #-4]
 80192b4:	edd5 7a00 	vldr	s15, [r5]
 80192b8:	ed18 7a01 	vldr	s14, [r8, #-4]
 80192bc:	edd2 3a00 	vldr	s7, [r2]
 80192c0:	ed94 3a00 	vldr	s6, [r4]
 80192c4:	ed90 2a00 	vldr	s4, [r0]
 80192c8:	ed92 0a01 	vldr	s0, [r2, #4]
 80192cc:	ee33 8a85 	vadd.f32	s16, s7, s10
 80192d0:	ee32 1a06 	vadd.f32	s2, s4, s12
 80192d4:	ee33 4a29 	vadd.f32	s8, s6, s19
 80192d8:	ee77 4a87 	vadd.f32	s9, s15, s14
 80192dc:	ee78 1a04 	vadd.f32	s3, s16, s8
 80192e0:	ee71 6a24 	vadd.f32	s13, s2, s9
 80192e4:	ee32 2a46 	vsub.f32	s4, s4, s12
 80192e8:	ee31 6aa6 	vadd.f32	s12, s3, s13
 80192ec:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80192f0:	ed82 6a00 	vstr	s12, [r2]
 80192f4:	edd5 8a01 	vldr	s17, [r5, #4]
 80192f8:	ed90 9a01 	vldr	s18, [r0, #4]
 80192fc:	edd6 2a00 	vldr	s5, [r6]
 8019300:	ed98 7a00 	vldr	s14, [r8]
 8019304:	edd4 0a01 	vldr	s1, [r4, #4]
 8019308:	ed91 6a01 	vldr	s12, [r1, #4]
 801930c:	edd7 5a00 	vldr	s11, [r7]
 8019310:	ee73 3ac5 	vsub.f32	s7, s7, s10
 8019314:	ee33 3a69 	vsub.f32	s6, s6, s19
 8019318:	ee39 5a62 	vsub.f32	s10, s18, s5
 801931c:	ee78 9ac7 	vsub.f32	s19, s17, s14
 8019320:	ee38 4a44 	vsub.f32	s8, s16, s8
 8019324:	ee38 7a87 	vadd.f32	s14, s17, s14
 8019328:	ee30 8aa5 	vadd.f32	s16, s1, s11
 801932c:	ee79 2a22 	vadd.f32	s5, s18, s5
 8019330:	ee75 8a69 	vsub.f32	s17, s10, s19
 8019334:	ee32 9a27 	vadd.f32	s18, s4, s15
 8019338:	ee35 5a29 	vadd.f32	s10, s10, s19
 801933c:	ee72 7a67 	vsub.f32	s15, s4, s15
 8019340:	ee30 2a06 	vadd.f32	s4, s0, s12
 8019344:	ee69 9a0b 	vmul.f32	s19, s18, s22
 8019348:	ee70 5ae5 	vsub.f32	s11, s1, s11
 801934c:	ee32 9a08 	vadd.f32	s18, s4, s16
 8019350:	ee68 8a8b 	vmul.f32	s17, s17, s22
 8019354:	ee32 2a48 	vsub.f32	s4, s4, s16
 8019358:	ee71 4a64 	vsub.f32	s9, s2, s9
 801935c:	ee25 5a0b 	vmul.f32	s10, s10, s22
 8019360:	ee32 1a87 	vadd.f32	s2, s5, s14
 8019364:	ee67 7a8b 	vmul.f32	s15, s15, s22
 8019368:	ee72 2ac7 	vsub.f32	s5, s5, s14
 801936c:	ee30 6a46 	vsub.f32	s12, s0, s12
 8019370:	ee73 0a29 	vadd.f32	s1, s6, s19
 8019374:	ee36 0a28 	vadd.f32	s0, s12, s17
 8019378:	ee33 3a69 	vsub.f32	s6, s6, s19
 801937c:	ee32 7a64 	vsub.f32	s14, s4, s9
 8019380:	ee73 9aa7 	vadd.f32	s19, s7, s15
 8019384:	ee36 6a68 	vsub.f32	s12, s12, s17
 8019388:	ee73 7ae7 	vsub.f32	s15, s7, s15
 801938c:	ee75 8a85 	vadd.f32	s17, s11, s10
 8019390:	ee74 3a22 	vadd.f32	s7, s8, s5
 8019394:	ee35 5ac5 	vsub.f32	s10, s11, s10
 8019398:	ee71 6ae6 	vsub.f32	s13, s3, s13
 801939c:	ee79 1a41 	vsub.f32	s3, s18, s2
 80193a0:	ee39 8aa8 	vadd.f32	s16, s19, s17
 80193a4:	ee76 5a43 	vsub.f32	s11, s12, s6
 80193a8:	ee74 2a62 	vsub.f32	s5, s8, s5
 80193ac:	ee74 4a82 	vadd.f32	s9, s9, s4
 80193b0:	ee30 4a60 	vsub.f32	s8, s0, s1
 80193b4:	ee79 8ae8 	vsub.f32	s17, s19, s17
 80193b8:	ee30 0a80 	vadd.f32	s0, s1, s0
 80193bc:	ee77 9a85 	vadd.f32	s19, s15, s10
 80193c0:	ee33 6a06 	vadd.f32	s12, s6, s12
 80193c4:	ee77 7ac5 	vsub.f32	s15, s15, s10
 80193c8:	ee2e 2a21 	vmul.f32	s4, s28, s3
 80193cc:	ee2e 5a26 	vmul.f32	s10, s28, s13
 80193d0:	ee6f 0a23 	vmul.f32	s1, s30, s7
 80193d4:	ee2a 3a21 	vmul.f32	s6, s20, s3
 80193d8:	ee39 1a01 	vadd.f32	s2, s18, s2
 80193dc:	ee6a 6a26 	vmul.f32	s13, s20, s13
 80193e0:	ee2b 9a87 	vmul.f32	s18, s23, s14
 80193e4:	ee6b 3aa3 	vmul.f32	s7, s23, s7
 80193e8:	ee2f 7a07 	vmul.f32	s14, s30, s14
 80193ec:	ee6f 1a84 	vmul.f32	s3, s31, s8
 80193f0:	ee35 3a03 	vadd.f32	s6, s10, s6
 80193f4:	ee72 6a66 	vsub.f32	s13, s4, s13
 80193f8:	ee2c 5a04 	vmul.f32	s10, s24, s8
 80193fc:	ee2f 2a88 	vmul.f32	s4, s31, s16
 8019400:	ed9d 4a02 	vldr	s8, [sp, #8]
 8019404:	ed82 1a01 	vstr	s2, [r2, #4]
 8019408:	ee77 3a63 	vsub.f32	s7, s14, s7
 801940c:	ee2c 8a08 	vmul.f32	s16, s24, s16
 8019410:	ed9d 7a01 	vldr	s14, [sp, #4]
 8019414:	ed81 3a00 	vstr	s6, [r1]
 8019418:	ee30 9a89 	vadd.f32	s18, s1, s18
 801941c:	ee32 2a05 	vadd.f32	s4, s4, s10
 8019420:	ee6d 0a22 	vmul.f32	s1, s26, s5
 8019424:	ee31 8ac8 	vsub.f32	s16, s3, s16
 8019428:	ee67 2a22 	vmul.f32	s5, s14, s5
 801942c:	ee64 1a00 	vmul.f32	s3, s8, s0
 8019430:	ee27 7a24 	vmul.f32	s14, s14, s9
 8019434:	ee2c 5aa8 	vmul.f32	s10, s25, s17
 8019438:	ee6d 4a24 	vmul.f32	s9, s26, s9
 801943c:	ee64 8a28 	vmul.f32	s17, s8, s17
 8019440:	ed9d 4a00 	vldr	s8, [sp]
 8019444:	edc1 6a01 	vstr	s13, [r1, #4]
 8019448:	ee74 2ae2 	vsub.f32	s5, s9, s5
 801944c:	ee6d 4aa9 	vmul.f32	s9, s27, s19
 8019450:	ee64 9a29 	vmul.f32	s19, s8, s19
 8019454:	ee24 4a25 	vmul.f32	s8, s8, s11
 8019458:	ee30 7a87 	vadd.f32	s14, s1, s14
 801945c:	ee74 4a84 	vadd.f32	s9, s9, s8
 8019460:	ee6e 0aa7 	vmul.f32	s1, s29, s15
 8019464:	ee2a 4a86 	vmul.f32	s8, s21, s12
 8019468:	ee2c 0a80 	vmul.f32	s0, s25, s0
 801946c:	ee6d 5aa5 	vmul.f32	s11, s27, s11
 8019470:	ee6a 7aa7 	vmul.f32	s15, s21, s15
 8019474:	ee2e 6a86 	vmul.f32	s12, s29, s12
 8019478:	ee75 1a21 	vadd.f32	s3, s10, s3
 801947c:	ee30 0a68 	vsub.f32	s0, s0, s17
 8019480:	ee75 9ae9 	vsub.f32	s19, s11, s19
 8019484:	ee70 0a84 	vadd.f32	s1, s1, s8
 8019488:	ee36 6a67 	vsub.f32	s12, s12, s15
 801948c:	44d9      	add	r9, fp
 801948e:	45ca      	cmp	sl, r9
 8019490:	ed84 9a00 	vstr	s18, [r4]
 8019494:	edc4 3a01 	vstr	s7, [r4, #4]
 8019498:	441a      	add	r2, r3
 801949a:	ed07 7a01 	vstr	s14, [r7, #-4]
 801949e:	edc7 2a00 	vstr	s5, [r7]
 80194a2:	4419      	add	r1, r3
 80194a4:	ed80 2a00 	vstr	s4, [r0]
 80194a8:	ed80 8a01 	vstr	s16, [r0, #4]
 80194ac:	441c      	add	r4, r3
 80194ae:	ed48 1a01 	vstr	s3, [r8, #-4]
 80194b2:	ed88 0a00 	vstr	s0, [r8]
 80194b6:	441f      	add	r7, r3
 80194b8:	ed46 4a01 	vstr	s9, [r6, #-4]
 80194bc:	4418      	add	r0, r3
 80194be:	edc6 9a00 	vstr	s19, [r6]
 80194c2:	4498      	add	r8, r3
 80194c4:	edc5 0a00 	vstr	s1, [r5]
 80194c8:	ed85 6a01 	vstr	s12, [r5, #4]
 80194cc:	441e      	add	r6, r3
 80194ce:	441d      	add	r5, r3
 80194d0:	f63f aeea 	bhi.w	80192a8 <arm_radix8_butterfly_f32+0x328>
 80194d4:	9a03      	ldr	r2, [sp, #12]
 80194d6:	9818      	ldr	r0, [sp, #96]	; 0x60
 80194d8:	3201      	adds	r2, #1
 80194da:	4611      	mov	r1, r2
 80194dc:	9203      	str	r2, [sp, #12]
 80194de:	9a04      	ldr	r2, [sp, #16]
 80194e0:	4402      	add	r2, r0
 80194e2:	9204      	str	r2, [sp, #16]
 80194e4:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80194e6:	9a05      	ldr	r2, [sp, #20]
 80194e8:	4402      	add	r2, r0
 80194ea:	9205      	str	r2, [sp, #20]
 80194ec:	9812      	ldr	r0, [sp, #72]	; 0x48
 80194ee:	9a07      	ldr	r2, [sp, #28]
 80194f0:	4402      	add	r2, r0
 80194f2:	9207      	str	r2, [sp, #28]
 80194f4:	9816      	ldr	r0, [sp, #88]	; 0x58
 80194f6:	9a06      	ldr	r2, [sp, #24]
 80194f8:	4402      	add	r2, r0
 80194fa:	9206      	str	r2, [sp, #24]
 80194fc:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80194fe:	4496      	add	lr, r2
 8019500:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8019502:	4494      	add	ip, r2
 8019504:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8019506:	3208      	adds	r2, #8
 8019508:	920f      	str	r2, [sp, #60]	; 0x3c
 801950a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801950c:	3208      	adds	r2, #8
 801950e:	920e      	str	r2, [sp, #56]	; 0x38
 8019510:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8019512:	3208      	adds	r2, #8
 8019514:	920d      	str	r2, [sp, #52]	; 0x34
 8019516:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8019518:	3208      	adds	r2, #8
 801951a:	920c      	str	r2, [sp, #48]	; 0x30
 801951c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801951e:	3208      	adds	r2, #8
 8019520:	920b      	str	r2, [sp, #44]	; 0x2c
 8019522:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8019524:	3208      	adds	r2, #8
 8019526:	920a      	str	r2, [sp, #40]	; 0x28
 8019528:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801952a:	3208      	adds	r2, #8
 801952c:	9209      	str	r2, [sp, #36]	; 0x24
 801952e:	9a08      	ldr	r2, [sp, #32]
 8019530:	3208      	adds	r2, #8
 8019532:	9208      	str	r2, [sp, #32]
 8019534:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8019536:	9811      	ldr	r0, [sp, #68]	; 0x44
 8019538:	4288      	cmp	r0, r1
 801953a:	4622      	mov	r2, r4
 801953c:	d007      	beq.n	801954e <arm_radix8_butterfly_f32+0x5ce>
 801953e:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8019540:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8019544:	4621      	mov	r1, r4
 8019546:	4401      	add	r1, r0
 8019548:	9110      	str	r1, [sp, #64]	; 0x40
 801954a:	9804      	ldr	r0, [sp, #16]
 801954c:	e67c      	b.n	8019248 <arm_radix8_butterfly_f32+0x2c8>
 801954e:	4683      	mov	fp, r0
 8019550:	f8bd 905c 	ldrh.w	r9, [sp, #92]	; 0x5c
 8019554:	9f19      	ldr	r7, [sp, #100]	; 0x64
 8019556:	e524      	b.n	8018fa2 <arm_radix8_butterfly_f32+0x22>
 8019558:	b01d      	add	sp, #116	; 0x74
 801955a:	ecbd 8b10 	vpop	{d8-d15}
 801955e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019562:	bf00      	nop

08019564 <atoi>:
 8019564:	220a      	movs	r2, #10
 8019566:	2100      	movs	r1, #0
 8019568:	f001 bf84 	b.w	801b474 <strtol>

0801956c <__errno>:
 801956c:	4b01      	ldr	r3, [pc, #4]	; (8019574 <__errno+0x8>)
 801956e:	6818      	ldr	r0, [r3, #0]
 8019570:	4770      	bx	lr
 8019572:	bf00      	nop
 8019574:	20000884 	.word	0x20000884

08019578 <__sflush_r>:
 8019578:	898a      	ldrh	r2, [r1, #12]
 801957a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801957e:	4605      	mov	r5, r0
 8019580:	0710      	lsls	r0, r2, #28
 8019582:	460c      	mov	r4, r1
 8019584:	d458      	bmi.n	8019638 <__sflush_r+0xc0>
 8019586:	684b      	ldr	r3, [r1, #4]
 8019588:	2b00      	cmp	r3, #0
 801958a:	dc05      	bgt.n	8019598 <__sflush_r+0x20>
 801958c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801958e:	2b00      	cmp	r3, #0
 8019590:	dc02      	bgt.n	8019598 <__sflush_r+0x20>
 8019592:	2000      	movs	r0, #0
 8019594:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019598:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801959a:	2e00      	cmp	r6, #0
 801959c:	d0f9      	beq.n	8019592 <__sflush_r+0x1a>
 801959e:	2300      	movs	r3, #0
 80195a0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80195a4:	682f      	ldr	r7, [r5, #0]
 80195a6:	602b      	str	r3, [r5, #0]
 80195a8:	d032      	beq.n	8019610 <__sflush_r+0x98>
 80195aa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80195ac:	89a3      	ldrh	r3, [r4, #12]
 80195ae:	075a      	lsls	r2, r3, #29
 80195b0:	d505      	bpl.n	80195be <__sflush_r+0x46>
 80195b2:	6863      	ldr	r3, [r4, #4]
 80195b4:	1ac0      	subs	r0, r0, r3
 80195b6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80195b8:	b10b      	cbz	r3, 80195be <__sflush_r+0x46>
 80195ba:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80195bc:	1ac0      	subs	r0, r0, r3
 80195be:	2300      	movs	r3, #0
 80195c0:	4602      	mov	r2, r0
 80195c2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80195c4:	6a21      	ldr	r1, [r4, #32]
 80195c6:	4628      	mov	r0, r5
 80195c8:	47b0      	blx	r6
 80195ca:	1c43      	adds	r3, r0, #1
 80195cc:	89a3      	ldrh	r3, [r4, #12]
 80195ce:	d106      	bne.n	80195de <__sflush_r+0x66>
 80195d0:	6829      	ldr	r1, [r5, #0]
 80195d2:	291d      	cmp	r1, #29
 80195d4:	d82c      	bhi.n	8019630 <__sflush_r+0xb8>
 80195d6:	4a2a      	ldr	r2, [pc, #168]	; (8019680 <__sflush_r+0x108>)
 80195d8:	40ca      	lsrs	r2, r1
 80195da:	07d6      	lsls	r6, r2, #31
 80195dc:	d528      	bpl.n	8019630 <__sflush_r+0xb8>
 80195de:	2200      	movs	r2, #0
 80195e0:	6062      	str	r2, [r4, #4]
 80195e2:	04d9      	lsls	r1, r3, #19
 80195e4:	6922      	ldr	r2, [r4, #16]
 80195e6:	6022      	str	r2, [r4, #0]
 80195e8:	d504      	bpl.n	80195f4 <__sflush_r+0x7c>
 80195ea:	1c42      	adds	r2, r0, #1
 80195ec:	d101      	bne.n	80195f2 <__sflush_r+0x7a>
 80195ee:	682b      	ldr	r3, [r5, #0]
 80195f0:	b903      	cbnz	r3, 80195f4 <__sflush_r+0x7c>
 80195f2:	6560      	str	r0, [r4, #84]	; 0x54
 80195f4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80195f6:	602f      	str	r7, [r5, #0]
 80195f8:	2900      	cmp	r1, #0
 80195fa:	d0ca      	beq.n	8019592 <__sflush_r+0x1a>
 80195fc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8019600:	4299      	cmp	r1, r3
 8019602:	d002      	beq.n	801960a <__sflush_r+0x92>
 8019604:	4628      	mov	r0, r5
 8019606:	f000 fa3b 	bl	8019a80 <_free_r>
 801960a:	2000      	movs	r0, #0
 801960c:	6360      	str	r0, [r4, #52]	; 0x34
 801960e:	e7c1      	b.n	8019594 <__sflush_r+0x1c>
 8019610:	6a21      	ldr	r1, [r4, #32]
 8019612:	2301      	movs	r3, #1
 8019614:	4628      	mov	r0, r5
 8019616:	47b0      	blx	r6
 8019618:	1c41      	adds	r1, r0, #1
 801961a:	d1c7      	bne.n	80195ac <__sflush_r+0x34>
 801961c:	682b      	ldr	r3, [r5, #0]
 801961e:	2b00      	cmp	r3, #0
 8019620:	d0c4      	beq.n	80195ac <__sflush_r+0x34>
 8019622:	2b1d      	cmp	r3, #29
 8019624:	d001      	beq.n	801962a <__sflush_r+0xb2>
 8019626:	2b16      	cmp	r3, #22
 8019628:	d101      	bne.n	801962e <__sflush_r+0xb6>
 801962a:	602f      	str	r7, [r5, #0]
 801962c:	e7b1      	b.n	8019592 <__sflush_r+0x1a>
 801962e:	89a3      	ldrh	r3, [r4, #12]
 8019630:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019634:	81a3      	strh	r3, [r4, #12]
 8019636:	e7ad      	b.n	8019594 <__sflush_r+0x1c>
 8019638:	690f      	ldr	r7, [r1, #16]
 801963a:	2f00      	cmp	r7, #0
 801963c:	d0a9      	beq.n	8019592 <__sflush_r+0x1a>
 801963e:	0793      	lsls	r3, r2, #30
 8019640:	680e      	ldr	r6, [r1, #0]
 8019642:	bf08      	it	eq
 8019644:	694b      	ldreq	r3, [r1, #20]
 8019646:	600f      	str	r7, [r1, #0]
 8019648:	bf18      	it	ne
 801964a:	2300      	movne	r3, #0
 801964c:	eba6 0807 	sub.w	r8, r6, r7
 8019650:	608b      	str	r3, [r1, #8]
 8019652:	f1b8 0f00 	cmp.w	r8, #0
 8019656:	dd9c      	ble.n	8019592 <__sflush_r+0x1a>
 8019658:	6a21      	ldr	r1, [r4, #32]
 801965a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801965c:	4643      	mov	r3, r8
 801965e:	463a      	mov	r2, r7
 8019660:	4628      	mov	r0, r5
 8019662:	47b0      	blx	r6
 8019664:	2800      	cmp	r0, #0
 8019666:	dc06      	bgt.n	8019676 <__sflush_r+0xfe>
 8019668:	89a3      	ldrh	r3, [r4, #12]
 801966a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801966e:	81a3      	strh	r3, [r4, #12]
 8019670:	f04f 30ff 	mov.w	r0, #4294967295
 8019674:	e78e      	b.n	8019594 <__sflush_r+0x1c>
 8019676:	4407      	add	r7, r0
 8019678:	eba8 0800 	sub.w	r8, r8, r0
 801967c:	e7e9      	b.n	8019652 <__sflush_r+0xda>
 801967e:	bf00      	nop
 8019680:	20400001 	.word	0x20400001

08019684 <_fflush_r>:
 8019684:	b538      	push	{r3, r4, r5, lr}
 8019686:	690b      	ldr	r3, [r1, #16]
 8019688:	4605      	mov	r5, r0
 801968a:	460c      	mov	r4, r1
 801968c:	b913      	cbnz	r3, 8019694 <_fflush_r+0x10>
 801968e:	2500      	movs	r5, #0
 8019690:	4628      	mov	r0, r5
 8019692:	bd38      	pop	{r3, r4, r5, pc}
 8019694:	b118      	cbz	r0, 801969e <_fflush_r+0x1a>
 8019696:	6983      	ldr	r3, [r0, #24]
 8019698:	b90b      	cbnz	r3, 801969e <_fflush_r+0x1a>
 801969a:	f000 f887 	bl	80197ac <__sinit>
 801969e:	4b14      	ldr	r3, [pc, #80]	; (80196f0 <_fflush_r+0x6c>)
 80196a0:	429c      	cmp	r4, r3
 80196a2:	d11b      	bne.n	80196dc <_fflush_r+0x58>
 80196a4:	686c      	ldr	r4, [r5, #4]
 80196a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80196aa:	2b00      	cmp	r3, #0
 80196ac:	d0ef      	beq.n	801968e <_fflush_r+0xa>
 80196ae:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80196b0:	07d0      	lsls	r0, r2, #31
 80196b2:	d404      	bmi.n	80196be <_fflush_r+0x3a>
 80196b4:	0599      	lsls	r1, r3, #22
 80196b6:	d402      	bmi.n	80196be <_fflush_r+0x3a>
 80196b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80196ba:	f000 f93a 	bl	8019932 <__retarget_lock_acquire_recursive>
 80196be:	4628      	mov	r0, r5
 80196c0:	4621      	mov	r1, r4
 80196c2:	f7ff ff59 	bl	8019578 <__sflush_r>
 80196c6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80196c8:	07da      	lsls	r2, r3, #31
 80196ca:	4605      	mov	r5, r0
 80196cc:	d4e0      	bmi.n	8019690 <_fflush_r+0xc>
 80196ce:	89a3      	ldrh	r3, [r4, #12]
 80196d0:	059b      	lsls	r3, r3, #22
 80196d2:	d4dd      	bmi.n	8019690 <_fflush_r+0xc>
 80196d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80196d6:	f000 f92d 	bl	8019934 <__retarget_lock_release_recursive>
 80196da:	e7d9      	b.n	8019690 <_fflush_r+0xc>
 80196dc:	4b05      	ldr	r3, [pc, #20]	; (80196f4 <_fflush_r+0x70>)
 80196de:	429c      	cmp	r4, r3
 80196e0:	d101      	bne.n	80196e6 <_fflush_r+0x62>
 80196e2:	68ac      	ldr	r4, [r5, #8]
 80196e4:	e7df      	b.n	80196a6 <_fflush_r+0x22>
 80196e6:	4b04      	ldr	r3, [pc, #16]	; (80196f8 <_fflush_r+0x74>)
 80196e8:	429c      	cmp	r4, r3
 80196ea:	bf08      	it	eq
 80196ec:	68ec      	ldreq	r4, [r5, #12]
 80196ee:	e7da      	b.n	80196a6 <_fflush_r+0x22>
 80196f0:	080377ac 	.word	0x080377ac
 80196f4:	080377cc 	.word	0x080377cc
 80196f8:	0803778c 	.word	0x0803778c

080196fc <std>:
 80196fc:	2300      	movs	r3, #0
 80196fe:	b510      	push	{r4, lr}
 8019700:	4604      	mov	r4, r0
 8019702:	e9c0 3300 	strd	r3, r3, [r0]
 8019706:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801970a:	6083      	str	r3, [r0, #8]
 801970c:	8181      	strh	r1, [r0, #12]
 801970e:	6643      	str	r3, [r0, #100]	; 0x64
 8019710:	81c2      	strh	r2, [r0, #14]
 8019712:	6183      	str	r3, [r0, #24]
 8019714:	4619      	mov	r1, r3
 8019716:	2208      	movs	r2, #8
 8019718:	305c      	adds	r0, #92	; 0x5c
 801971a:	f000 f9a9 	bl	8019a70 <memset>
 801971e:	4b05      	ldr	r3, [pc, #20]	; (8019734 <std+0x38>)
 8019720:	6263      	str	r3, [r4, #36]	; 0x24
 8019722:	4b05      	ldr	r3, [pc, #20]	; (8019738 <std+0x3c>)
 8019724:	62a3      	str	r3, [r4, #40]	; 0x28
 8019726:	4b05      	ldr	r3, [pc, #20]	; (801973c <std+0x40>)
 8019728:	62e3      	str	r3, [r4, #44]	; 0x2c
 801972a:	4b05      	ldr	r3, [pc, #20]	; (8019740 <std+0x44>)
 801972c:	6224      	str	r4, [r4, #32]
 801972e:	6323      	str	r3, [r4, #48]	; 0x30
 8019730:	bd10      	pop	{r4, pc}
 8019732:	bf00      	nop
 8019734:	0801a635 	.word	0x0801a635
 8019738:	0801a657 	.word	0x0801a657
 801973c:	0801a68f 	.word	0x0801a68f
 8019740:	0801a6b3 	.word	0x0801a6b3

08019744 <_cleanup_r>:
 8019744:	4901      	ldr	r1, [pc, #4]	; (801974c <_cleanup_r+0x8>)
 8019746:	f000 b8af 	b.w	80198a8 <_fwalk_reent>
 801974a:	bf00      	nop
 801974c:	08019685 	.word	0x08019685

08019750 <__sfmoreglue>:
 8019750:	b570      	push	{r4, r5, r6, lr}
 8019752:	1e4a      	subs	r2, r1, #1
 8019754:	2568      	movs	r5, #104	; 0x68
 8019756:	4355      	muls	r5, r2
 8019758:	460e      	mov	r6, r1
 801975a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801975e:	f000 f9df 	bl	8019b20 <_malloc_r>
 8019762:	4604      	mov	r4, r0
 8019764:	b140      	cbz	r0, 8019778 <__sfmoreglue+0x28>
 8019766:	2100      	movs	r1, #0
 8019768:	e9c0 1600 	strd	r1, r6, [r0]
 801976c:	300c      	adds	r0, #12
 801976e:	60a0      	str	r0, [r4, #8]
 8019770:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8019774:	f000 f97c 	bl	8019a70 <memset>
 8019778:	4620      	mov	r0, r4
 801977a:	bd70      	pop	{r4, r5, r6, pc}

0801977c <__sfp_lock_acquire>:
 801977c:	4801      	ldr	r0, [pc, #4]	; (8019784 <__sfp_lock_acquire+0x8>)
 801977e:	f000 b8d8 	b.w	8019932 <__retarget_lock_acquire_recursive>
 8019782:	bf00      	nop
 8019784:	2000c024 	.word	0x2000c024

08019788 <__sfp_lock_release>:
 8019788:	4801      	ldr	r0, [pc, #4]	; (8019790 <__sfp_lock_release+0x8>)
 801978a:	f000 b8d3 	b.w	8019934 <__retarget_lock_release_recursive>
 801978e:	bf00      	nop
 8019790:	2000c024 	.word	0x2000c024

08019794 <__sinit_lock_acquire>:
 8019794:	4801      	ldr	r0, [pc, #4]	; (801979c <__sinit_lock_acquire+0x8>)
 8019796:	f000 b8cc 	b.w	8019932 <__retarget_lock_acquire_recursive>
 801979a:	bf00      	nop
 801979c:	2000c01f 	.word	0x2000c01f

080197a0 <__sinit_lock_release>:
 80197a0:	4801      	ldr	r0, [pc, #4]	; (80197a8 <__sinit_lock_release+0x8>)
 80197a2:	f000 b8c7 	b.w	8019934 <__retarget_lock_release_recursive>
 80197a6:	bf00      	nop
 80197a8:	2000c01f 	.word	0x2000c01f

080197ac <__sinit>:
 80197ac:	b510      	push	{r4, lr}
 80197ae:	4604      	mov	r4, r0
 80197b0:	f7ff fff0 	bl	8019794 <__sinit_lock_acquire>
 80197b4:	69a3      	ldr	r3, [r4, #24]
 80197b6:	b11b      	cbz	r3, 80197c0 <__sinit+0x14>
 80197b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80197bc:	f7ff bff0 	b.w	80197a0 <__sinit_lock_release>
 80197c0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80197c4:	6523      	str	r3, [r4, #80]	; 0x50
 80197c6:	4b13      	ldr	r3, [pc, #76]	; (8019814 <__sinit+0x68>)
 80197c8:	4a13      	ldr	r2, [pc, #76]	; (8019818 <__sinit+0x6c>)
 80197ca:	681b      	ldr	r3, [r3, #0]
 80197cc:	62a2      	str	r2, [r4, #40]	; 0x28
 80197ce:	42a3      	cmp	r3, r4
 80197d0:	bf04      	itt	eq
 80197d2:	2301      	moveq	r3, #1
 80197d4:	61a3      	streq	r3, [r4, #24]
 80197d6:	4620      	mov	r0, r4
 80197d8:	f000 f820 	bl	801981c <__sfp>
 80197dc:	6060      	str	r0, [r4, #4]
 80197de:	4620      	mov	r0, r4
 80197e0:	f000 f81c 	bl	801981c <__sfp>
 80197e4:	60a0      	str	r0, [r4, #8]
 80197e6:	4620      	mov	r0, r4
 80197e8:	f000 f818 	bl	801981c <__sfp>
 80197ec:	2200      	movs	r2, #0
 80197ee:	60e0      	str	r0, [r4, #12]
 80197f0:	2104      	movs	r1, #4
 80197f2:	6860      	ldr	r0, [r4, #4]
 80197f4:	f7ff ff82 	bl	80196fc <std>
 80197f8:	68a0      	ldr	r0, [r4, #8]
 80197fa:	2201      	movs	r2, #1
 80197fc:	2109      	movs	r1, #9
 80197fe:	f7ff ff7d 	bl	80196fc <std>
 8019802:	68e0      	ldr	r0, [r4, #12]
 8019804:	2202      	movs	r2, #2
 8019806:	2112      	movs	r1, #18
 8019808:	f7ff ff78 	bl	80196fc <std>
 801980c:	2301      	movs	r3, #1
 801980e:	61a3      	str	r3, [r4, #24]
 8019810:	e7d2      	b.n	80197b8 <__sinit+0xc>
 8019812:	bf00      	nop
 8019814:	080377ec 	.word	0x080377ec
 8019818:	08019745 	.word	0x08019745

0801981c <__sfp>:
 801981c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801981e:	4607      	mov	r7, r0
 8019820:	f7ff ffac 	bl	801977c <__sfp_lock_acquire>
 8019824:	4b1e      	ldr	r3, [pc, #120]	; (80198a0 <__sfp+0x84>)
 8019826:	681e      	ldr	r6, [r3, #0]
 8019828:	69b3      	ldr	r3, [r6, #24]
 801982a:	b913      	cbnz	r3, 8019832 <__sfp+0x16>
 801982c:	4630      	mov	r0, r6
 801982e:	f7ff ffbd 	bl	80197ac <__sinit>
 8019832:	3648      	adds	r6, #72	; 0x48
 8019834:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8019838:	3b01      	subs	r3, #1
 801983a:	d503      	bpl.n	8019844 <__sfp+0x28>
 801983c:	6833      	ldr	r3, [r6, #0]
 801983e:	b30b      	cbz	r3, 8019884 <__sfp+0x68>
 8019840:	6836      	ldr	r6, [r6, #0]
 8019842:	e7f7      	b.n	8019834 <__sfp+0x18>
 8019844:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8019848:	b9d5      	cbnz	r5, 8019880 <__sfp+0x64>
 801984a:	4b16      	ldr	r3, [pc, #88]	; (80198a4 <__sfp+0x88>)
 801984c:	60e3      	str	r3, [r4, #12]
 801984e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8019852:	6665      	str	r5, [r4, #100]	; 0x64
 8019854:	f000 f86c 	bl	8019930 <__retarget_lock_init_recursive>
 8019858:	f7ff ff96 	bl	8019788 <__sfp_lock_release>
 801985c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8019860:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8019864:	6025      	str	r5, [r4, #0]
 8019866:	61a5      	str	r5, [r4, #24]
 8019868:	2208      	movs	r2, #8
 801986a:	4629      	mov	r1, r5
 801986c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8019870:	f000 f8fe 	bl	8019a70 <memset>
 8019874:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8019878:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801987c:	4620      	mov	r0, r4
 801987e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019880:	3468      	adds	r4, #104	; 0x68
 8019882:	e7d9      	b.n	8019838 <__sfp+0x1c>
 8019884:	2104      	movs	r1, #4
 8019886:	4638      	mov	r0, r7
 8019888:	f7ff ff62 	bl	8019750 <__sfmoreglue>
 801988c:	4604      	mov	r4, r0
 801988e:	6030      	str	r0, [r6, #0]
 8019890:	2800      	cmp	r0, #0
 8019892:	d1d5      	bne.n	8019840 <__sfp+0x24>
 8019894:	f7ff ff78 	bl	8019788 <__sfp_lock_release>
 8019898:	230c      	movs	r3, #12
 801989a:	603b      	str	r3, [r7, #0]
 801989c:	e7ee      	b.n	801987c <__sfp+0x60>
 801989e:	bf00      	nop
 80198a0:	080377ec 	.word	0x080377ec
 80198a4:	ffff0001 	.word	0xffff0001

080198a8 <_fwalk_reent>:
 80198a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80198ac:	4606      	mov	r6, r0
 80198ae:	4688      	mov	r8, r1
 80198b0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80198b4:	2700      	movs	r7, #0
 80198b6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80198ba:	f1b9 0901 	subs.w	r9, r9, #1
 80198be:	d505      	bpl.n	80198cc <_fwalk_reent+0x24>
 80198c0:	6824      	ldr	r4, [r4, #0]
 80198c2:	2c00      	cmp	r4, #0
 80198c4:	d1f7      	bne.n	80198b6 <_fwalk_reent+0xe>
 80198c6:	4638      	mov	r0, r7
 80198c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80198cc:	89ab      	ldrh	r3, [r5, #12]
 80198ce:	2b01      	cmp	r3, #1
 80198d0:	d907      	bls.n	80198e2 <_fwalk_reent+0x3a>
 80198d2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80198d6:	3301      	adds	r3, #1
 80198d8:	d003      	beq.n	80198e2 <_fwalk_reent+0x3a>
 80198da:	4629      	mov	r1, r5
 80198dc:	4630      	mov	r0, r6
 80198de:	47c0      	blx	r8
 80198e0:	4307      	orrs	r7, r0
 80198e2:	3568      	adds	r5, #104	; 0x68
 80198e4:	e7e9      	b.n	80198ba <_fwalk_reent+0x12>
	...

080198e8 <__libc_init_array>:
 80198e8:	b570      	push	{r4, r5, r6, lr}
 80198ea:	4d0d      	ldr	r5, [pc, #52]	; (8019920 <__libc_init_array+0x38>)
 80198ec:	4c0d      	ldr	r4, [pc, #52]	; (8019924 <__libc_init_array+0x3c>)
 80198ee:	1b64      	subs	r4, r4, r5
 80198f0:	10a4      	asrs	r4, r4, #2
 80198f2:	2600      	movs	r6, #0
 80198f4:	42a6      	cmp	r6, r4
 80198f6:	d109      	bne.n	801990c <__libc_init_array+0x24>
 80198f8:	4d0b      	ldr	r5, [pc, #44]	; (8019928 <__libc_init_array+0x40>)
 80198fa:	4c0c      	ldr	r4, [pc, #48]	; (801992c <__libc_init_array+0x44>)
 80198fc:	f006 f8bc 	bl	801fa78 <_init>
 8019900:	1b64      	subs	r4, r4, r5
 8019902:	10a4      	asrs	r4, r4, #2
 8019904:	2600      	movs	r6, #0
 8019906:	42a6      	cmp	r6, r4
 8019908:	d105      	bne.n	8019916 <__libc_init_array+0x2e>
 801990a:	bd70      	pop	{r4, r5, r6, pc}
 801990c:	f855 3b04 	ldr.w	r3, [r5], #4
 8019910:	4798      	blx	r3
 8019912:	3601      	adds	r6, #1
 8019914:	e7ee      	b.n	80198f4 <__libc_init_array+0xc>
 8019916:	f855 3b04 	ldr.w	r3, [r5], #4
 801991a:	4798      	blx	r3
 801991c:	3601      	adds	r6, #1
 801991e:	e7f2      	b.n	8019906 <__libc_init_array+0x1e>
 8019920:	08037bd8 	.word	0x08037bd8
 8019924:	08037bd8 	.word	0x08037bd8
 8019928:	08037bd8 	.word	0x08037bd8
 801992c:	08037bdc 	.word	0x08037bdc

08019930 <__retarget_lock_init_recursive>:
 8019930:	4770      	bx	lr

08019932 <__retarget_lock_acquire_recursive>:
 8019932:	4770      	bx	lr

08019934 <__retarget_lock_release_recursive>:
 8019934:	4770      	bx	lr

08019936 <__swhatbuf_r>:
 8019936:	b570      	push	{r4, r5, r6, lr}
 8019938:	460e      	mov	r6, r1
 801993a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801993e:	2900      	cmp	r1, #0
 8019940:	b096      	sub	sp, #88	; 0x58
 8019942:	4614      	mov	r4, r2
 8019944:	461d      	mov	r5, r3
 8019946:	da07      	bge.n	8019958 <__swhatbuf_r+0x22>
 8019948:	2300      	movs	r3, #0
 801994a:	602b      	str	r3, [r5, #0]
 801994c:	89b3      	ldrh	r3, [r6, #12]
 801994e:	061a      	lsls	r2, r3, #24
 8019950:	d410      	bmi.n	8019974 <__swhatbuf_r+0x3e>
 8019952:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8019956:	e00e      	b.n	8019976 <__swhatbuf_r+0x40>
 8019958:	466a      	mov	r2, sp
 801995a:	f002 fcf1 	bl	801c340 <_fstat_r>
 801995e:	2800      	cmp	r0, #0
 8019960:	dbf2      	blt.n	8019948 <__swhatbuf_r+0x12>
 8019962:	9a01      	ldr	r2, [sp, #4]
 8019964:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8019968:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801996c:	425a      	negs	r2, r3
 801996e:	415a      	adcs	r2, r3
 8019970:	602a      	str	r2, [r5, #0]
 8019972:	e7ee      	b.n	8019952 <__swhatbuf_r+0x1c>
 8019974:	2340      	movs	r3, #64	; 0x40
 8019976:	2000      	movs	r0, #0
 8019978:	6023      	str	r3, [r4, #0]
 801997a:	b016      	add	sp, #88	; 0x58
 801997c:	bd70      	pop	{r4, r5, r6, pc}
	...

08019980 <__smakebuf_r>:
 8019980:	898b      	ldrh	r3, [r1, #12]
 8019982:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8019984:	079d      	lsls	r5, r3, #30
 8019986:	4606      	mov	r6, r0
 8019988:	460c      	mov	r4, r1
 801998a:	d507      	bpl.n	801999c <__smakebuf_r+0x1c>
 801998c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8019990:	6023      	str	r3, [r4, #0]
 8019992:	6123      	str	r3, [r4, #16]
 8019994:	2301      	movs	r3, #1
 8019996:	6163      	str	r3, [r4, #20]
 8019998:	b002      	add	sp, #8
 801999a:	bd70      	pop	{r4, r5, r6, pc}
 801999c:	ab01      	add	r3, sp, #4
 801999e:	466a      	mov	r2, sp
 80199a0:	f7ff ffc9 	bl	8019936 <__swhatbuf_r>
 80199a4:	9900      	ldr	r1, [sp, #0]
 80199a6:	4605      	mov	r5, r0
 80199a8:	4630      	mov	r0, r6
 80199aa:	f000 f8b9 	bl	8019b20 <_malloc_r>
 80199ae:	b948      	cbnz	r0, 80199c4 <__smakebuf_r+0x44>
 80199b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80199b4:	059a      	lsls	r2, r3, #22
 80199b6:	d4ef      	bmi.n	8019998 <__smakebuf_r+0x18>
 80199b8:	f023 0303 	bic.w	r3, r3, #3
 80199bc:	f043 0302 	orr.w	r3, r3, #2
 80199c0:	81a3      	strh	r3, [r4, #12]
 80199c2:	e7e3      	b.n	801998c <__smakebuf_r+0xc>
 80199c4:	4b0d      	ldr	r3, [pc, #52]	; (80199fc <__smakebuf_r+0x7c>)
 80199c6:	62b3      	str	r3, [r6, #40]	; 0x28
 80199c8:	89a3      	ldrh	r3, [r4, #12]
 80199ca:	6020      	str	r0, [r4, #0]
 80199cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80199d0:	81a3      	strh	r3, [r4, #12]
 80199d2:	9b00      	ldr	r3, [sp, #0]
 80199d4:	6163      	str	r3, [r4, #20]
 80199d6:	9b01      	ldr	r3, [sp, #4]
 80199d8:	6120      	str	r0, [r4, #16]
 80199da:	b15b      	cbz	r3, 80199f4 <__smakebuf_r+0x74>
 80199dc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80199e0:	4630      	mov	r0, r6
 80199e2:	f003 f82f 	bl	801ca44 <_isatty_r>
 80199e6:	b128      	cbz	r0, 80199f4 <__smakebuf_r+0x74>
 80199e8:	89a3      	ldrh	r3, [r4, #12]
 80199ea:	f023 0303 	bic.w	r3, r3, #3
 80199ee:	f043 0301 	orr.w	r3, r3, #1
 80199f2:	81a3      	strh	r3, [r4, #12]
 80199f4:	89a0      	ldrh	r0, [r4, #12]
 80199f6:	4305      	orrs	r5, r0
 80199f8:	81a5      	strh	r5, [r4, #12]
 80199fa:	e7cd      	b.n	8019998 <__smakebuf_r+0x18>
 80199fc:	08019745 	.word	0x08019745

08019a00 <malloc>:
 8019a00:	4b02      	ldr	r3, [pc, #8]	; (8019a0c <malloc+0xc>)
 8019a02:	4601      	mov	r1, r0
 8019a04:	6818      	ldr	r0, [r3, #0]
 8019a06:	f000 b88b 	b.w	8019b20 <_malloc_r>
 8019a0a:	bf00      	nop
 8019a0c:	20000884 	.word	0x20000884

08019a10 <free>:
 8019a10:	4b02      	ldr	r3, [pc, #8]	; (8019a1c <free+0xc>)
 8019a12:	4601      	mov	r1, r0
 8019a14:	6818      	ldr	r0, [r3, #0]
 8019a16:	f000 b833 	b.w	8019a80 <_free_r>
 8019a1a:	bf00      	nop
 8019a1c:	20000884 	.word	0x20000884

08019a20 <memcpy>:
 8019a20:	440a      	add	r2, r1
 8019a22:	4291      	cmp	r1, r2
 8019a24:	f100 33ff 	add.w	r3, r0, #4294967295
 8019a28:	d100      	bne.n	8019a2c <memcpy+0xc>
 8019a2a:	4770      	bx	lr
 8019a2c:	b510      	push	{r4, lr}
 8019a2e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8019a32:	f803 4f01 	strb.w	r4, [r3, #1]!
 8019a36:	4291      	cmp	r1, r2
 8019a38:	d1f9      	bne.n	8019a2e <memcpy+0xe>
 8019a3a:	bd10      	pop	{r4, pc}

08019a3c <memmove>:
 8019a3c:	4288      	cmp	r0, r1
 8019a3e:	b510      	push	{r4, lr}
 8019a40:	eb01 0402 	add.w	r4, r1, r2
 8019a44:	d902      	bls.n	8019a4c <memmove+0x10>
 8019a46:	4284      	cmp	r4, r0
 8019a48:	4623      	mov	r3, r4
 8019a4a:	d807      	bhi.n	8019a5c <memmove+0x20>
 8019a4c:	1e43      	subs	r3, r0, #1
 8019a4e:	42a1      	cmp	r1, r4
 8019a50:	d008      	beq.n	8019a64 <memmove+0x28>
 8019a52:	f811 2b01 	ldrb.w	r2, [r1], #1
 8019a56:	f803 2f01 	strb.w	r2, [r3, #1]!
 8019a5a:	e7f8      	b.n	8019a4e <memmove+0x12>
 8019a5c:	4402      	add	r2, r0
 8019a5e:	4601      	mov	r1, r0
 8019a60:	428a      	cmp	r2, r1
 8019a62:	d100      	bne.n	8019a66 <memmove+0x2a>
 8019a64:	bd10      	pop	{r4, pc}
 8019a66:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8019a6a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8019a6e:	e7f7      	b.n	8019a60 <memmove+0x24>

08019a70 <memset>:
 8019a70:	4402      	add	r2, r0
 8019a72:	4603      	mov	r3, r0
 8019a74:	4293      	cmp	r3, r2
 8019a76:	d100      	bne.n	8019a7a <memset+0xa>
 8019a78:	4770      	bx	lr
 8019a7a:	f803 1b01 	strb.w	r1, [r3], #1
 8019a7e:	e7f9      	b.n	8019a74 <memset+0x4>

08019a80 <_free_r>:
 8019a80:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8019a82:	2900      	cmp	r1, #0
 8019a84:	d048      	beq.n	8019b18 <_free_r+0x98>
 8019a86:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8019a8a:	9001      	str	r0, [sp, #4]
 8019a8c:	2b00      	cmp	r3, #0
 8019a8e:	f1a1 0404 	sub.w	r4, r1, #4
 8019a92:	bfb8      	it	lt
 8019a94:	18e4      	addlt	r4, r4, r3
 8019a96:	f003 f80d 	bl	801cab4 <__malloc_lock>
 8019a9a:	4a20      	ldr	r2, [pc, #128]	; (8019b1c <_free_r+0x9c>)
 8019a9c:	9801      	ldr	r0, [sp, #4]
 8019a9e:	6813      	ldr	r3, [r2, #0]
 8019aa0:	4615      	mov	r5, r2
 8019aa2:	b933      	cbnz	r3, 8019ab2 <_free_r+0x32>
 8019aa4:	6063      	str	r3, [r4, #4]
 8019aa6:	6014      	str	r4, [r2, #0]
 8019aa8:	b003      	add	sp, #12
 8019aaa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8019aae:	f003 b807 	b.w	801cac0 <__malloc_unlock>
 8019ab2:	42a3      	cmp	r3, r4
 8019ab4:	d90b      	bls.n	8019ace <_free_r+0x4e>
 8019ab6:	6821      	ldr	r1, [r4, #0]
 8019ab8:	1862      	adds	r2, r4, r1
 8019aba:	4293      	cmp	r3, r2
 8019abc:	bf04      	itt	eq
 8019abe:	681a      	ldreq	r2, [r3, #0]
 8019ac0:	685b      	ldreq	r3, [r3, #4]
 8019ac2:	6063      	str	r3, [r4, #4]
 8019ac4:	bf04      	itt	eq
 8019ac6:	1852      	addeq	r2, r2, r1
 8019ac8:	6022      	streq	r2, [r4, #0]
 8019aca:	602c      	str	r4, [r5, #0]
 8019acc:	e7ec      	b.n	8019aa8 <_free_r+0x28>
 8019ace:	461a      	mov	r2, r3
 8019ad0:	685b      	ldr	r3, [r3, #4]
 8019ad2:	b10b      	cbz	r3, 8019ad8 <_free_r+0x58>
 8019ad4:	42a3      	cmp	r3, r4
 8019ad6:	d9fa      	bls.n	8019ace <_free_r+0x4e>
 8019ad8:	6811      	ldr	r1, [r2, #0]
 8019ada:	1855      	adds	r5, r2, r1
 8019adc:	42a5      	cmp	r5, r4
 8019ade:	d10b      	bne.n	8019af8 <_free_r+0x78>
 8019ae0:	6824      	ldr	r4, [r4, #0]
 8019ae2:	4421      	add	r1, r4
 8019ae4:	1854      	adds	r4, r2, r1
 8019ae6:	42a3      	cmp	r3, r4
 8019ae8:	6011      	str	r1, [r2, #0]
 8019aea:	d1dd      	bne.n	8019aa8 <_free_r+0x28>
 8019aec:	681c      	ldr	r4, [r3, #0]
 8019aee:	685b      	ldr	r3, [r3, #4]
 8019af0:	6053      	str	r3, [r2, #4]
 8019af2:	4421      	add	r1, r4
 8019af4:	6011      	str	r1, [r2, #0]
 8019af6:	e7d7      	b.n	8019aa8 <_free_r+0x28>
 8019af8:	d902      	bls.n	8019b00 <_free_r+0x80>
 8019afa:	230c      	movs	r3, #12
 8019afc:	6003      	str	r3, [r0, #0]
 8019afe:	e7d3      	b.n	8019aa8 <_free_r+0x28>
 8019b00:	6825      	ldr	r5, [r4, #0]
 8019b02:	1961      	adds	r1, r4, r5
 8019b04:	428b      	cmp	r3, r1
 8019b06:	bf04      	itt	eq
 8019b08:	6819      	ldreq	r1, [r3, #0]
 8019b0a:	685b      	ldreq	r3, [r3, #4]
 8019b0c:	6063      	str	r3, [r4, #4]
 8019b0e:	bf04      	itt	eq
 8019b10:	1949      	addeq	r1, r1, r5
 8019b12:	6021      	streq	r1, [r4, #0]
 8019b14:	6054      	str	r4, [r2, #4]
 8019b16:	e7c7      	b.n	8019aa8 <_free_r+0x28>
 8019b18:	b003      	add	sp, #12
 8019b1a:	bd30      	pop	{r4, r5, pc}
 8019b1c:	20009910 	.word	0x20009910

08019b20 <_malloc_r>:
 8019b20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019b22:	1ccd      	adds	r5, r1, #3
 8019b24:	f025 0503 	bic.w	r5, r5, #3
 8019b28:	3508      	adds	r5, #8
 8019b2a:	2d0c      	cmp	r5, #12
 8019b2c:	bf38      	it	cc
 8019b2e:	250c      	movcc	r5, #12
 8019b30:	2d00      	cmp	r5, #0
 8019b32:	4606      	mov	r6, r0
 8019b34:	db01      	blt.n	8019b3a <_malloc_r+0x1a>
 8019b36:	42a9      	cmp	r1, r5
 8019b38:	d903      	bls.n	8019b42 <_malloc_r+0x22>
 8019b3a:	230c      	movs	r3, #12
 8019b3c:	6033      	str	r3, [r6, #0]
 8019b3e:	2000      	movs	r0, #0
 8019b40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019b42:	f002 ffb7 	bl	801cab4 <__malloc_lock>
 8019b46:	4921      	ldr	r1, [pc, #132]	; (8019bcc <_malloc_r+0xac>)
 8019b48:	680a      	ldr	r2, [r1, #0]
 8019b4a:	4614      	mov	r4, r2
 8019b4c:	b99c      	cbnz	r4, 8019b76 <_malloc_r+0x56>
 8019b4e:	4f20      	ldr	r7, [pc, #128]	; (8019bd0 <_malloc_r+0xb0>)
 8019b50:	683b      	ldr	r3, [r7, #0]
 8019b52:	b923      	cbnz	r3, 8019b5e <_malloc_r+0x3e>
 8019b54:	4621      	mov	r1, r4
 8019b56:	4630      	mov	r0, r6
 8019b58:	f000 fd3c 	bl	801a5d4 <_sbrk_r>
 8019b5c:	6038      	str	r0, [r7, #0]
 8019b5e:	4629      	mov	r1, r5
 8019b60:	4630      	mov	r0, r6
 8019b62:	f000 fd37 	bl	801a5d4 <_sbrk_r>
 8019b66:	1c43      	adds	r3, r0, #1
 8019b68:	d123      	bne.n	8019bb2 <_malloc_r+0x92>
 8019b6a:	230c      	movs	r3, #12
 8019b6c:	6033      	str	r3, [r6, #0]
 8019b6e:	4630      	mov	r0, r6
 8019b70:	f002 ffa6 	bl	801cac0 <__malloc_unlock>
 8019b74:	e7e3      	b.n	8019b3e <_malloc_r+0x1e>
 8019b76:	6823      	ldr	r3, [r4, #0]
 8019b78:	1b5b      	subs	r3, r3, r5
 8019b7a:	d417      	bmi.n	8019bac <_malloc_r+0x8c>
 8019b7c:	2b0b      	cmp	r3, #11
 8019b7e:	d903      	bls.n	8019b88 <_malloc_r+0x68>
 8019b80:	6023      	str	r3, [r4, #0]
 8019b82:	441c      	add	r4, r3
 8019b84:	6025      	str	r5, [r4, #0]
 8019b86:	e004      	b.n	8019b92 <_malloc_r+0x72>
 8019b88:	6863      	ldr	r3, [r4, #4]
 8019b8a:	42a2      	cmp	r2, r4
 8019b8c:	bf0c      	ite	eq
 8019b8e:	600b      	streq	r3, [r1, #0]
 8019b90:	6053      	strne	r3, [r2, #4]
 8019b92:	4630      	mov	r0, r6
 8019b94:	f002 ff94 	bl	801cac0 <__malloc_unlock>
 8019b98:	f104 000b 	add.w	r0, r4, #11
 8019b9c:	1d23      	adds	r3, r4, #4
 8019b9e:	f020 0007 	bic.w	r0, r0, #7
 8019ba2:	1ac2      	subs	r2, r0, r3
 8019ba4:	d0cc      	beq.n	8019b40 <_malloc_r+0x20>
 8019ba6:	1a1b      	subs	r3, r3, r0
 8019ba8:	50a3      	str	r3, [r4, r2]
 8019baa:	e7c9      	b.n	8019b40 <_malloc_r+0x20>
 8019bac:	4622      	mov	r2, r4
 8019bae:	6864      	ldr	r4, [r4, #4]
 8019bb0:	e7cc      	b.n	8019b4c <_malloc_r+0x2c>
 8019bb2:	1cc4      	adds	r4, r0, #3
 8019bb4:	f024 0403 	bic.w	r4, r4, #3
 8019bb8:	42a0      	cmp	r0, r4
 8019bba:	d0e3      	beq.n	8019b84 <_malloc_r+0x64>
 8019bbc:	1a21      	subs	r1, r4, r0
 8019bbe:	4630      	mov	r0, r6
 8019bc0:	f000 fd08 	bl	801a5d4 <_sbrk_r>
 8019bc4:	3001      	adds	r0, #1
 8019bc6:	d1dd      	bne.n	8019b84 <_malloc_r+0x64>
 8019bc8:	e7cf      	b.n	8019b6a <_malloc_r+0x4a>
 8019bca:	bf00      	nop
 8019bcc:	20009910 	.word	0x20009910
 8019bd0:	20009914 	.word	0x20009914

08019bd4 <__cvt>:
 8019bd4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8019bd8:	ec55 4b10 	vmov	r4, r5, d0
 8019bdc:	2d00      	cmp	r5, #0
 8019bde:	460e      	mov	r6, r1
 8019be0:	4619      	mov	r1, r3
 8019be2:	462b      	mov	r3, r5
 8019be4:	bfbb      	ittet	lt
 8019be6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8019bea:	461d      	movlt	r5, r3
 8019bec:	2300      	movge	r3, #0
 8019bee:	232d      	movlt	r3, #45	; 0x2d
 8019bf0:	700b      	strb	r3, [r1, #0]
 8019bf2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8019bf4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8019bf8:	4691      	mov	r9, r2
 8019bfa:	f023 0820 	bic.w	r8, r3, #32
 8019bfe:	bfbc      	itt	lt
 8019c00:	4622      	movlt	r2, r4
 8019c02:	4614      	movlt	r4, r2
 8019c04:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8019c08:	d005      	beq.n	8019c16 <__cvt+0x42>
 8019c0a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8019c0e:	d100      	bne.n	8019c12 <__cvt+0x3e>
 8019c10:	3601      	adds	r6, #1
 8019c12:	2102      	movs	r1, #2
 8019c14:	e000      	b.n	8019c18 <__cvt+0x44>
 8019c16:	2103      	movs	r1, #3
 8019c18:	ab03      	add	r3, sp, #12
 8019c1a:	9301      	str	r3, [sp, #4]
 8019c1c:	ab02      	add	r3, sp, #8
 8019c1e:	9300      	str	r3, [sp, #0]
 8019c20:	ec45 4b10 	vmov	d0, r4, r5
 8019c24:	4653      	mov	r3, sl
 8019c26:	4632      	mov	r2, r6
 8019c28:	f001 fd9e 	bl	801b768 <_dtoa_r>
 8019c2c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8019c30:	4607      	mov	r7, r0
 8019c32:	d102      	bne.n	8019c3a <__cvt+0x66>
 8019c34:	f019 0f01 	tst.w	r9, #1
 8019c38:	d022      	beq.n	8019c80 <__cvt+0xac>
 8019c3a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8019c3e:	eb07 0906 	add.w	r9, r7, r6
 8019c42:	d110      	bne.n	8019c66 <__cvt+0x92>
 8019c44:	783b      	ldrb	r3, [r7, #0]
 8019c46:	2b30      	cmp	r3, #48	; 0x30
 8019c48:	d10a      	bne.n	8019c60 <__cvt+0x8c>
 8019c4a:	2200      	movs	r2, #0
 8019c4c:	2300      	movs	r3, #0
 8019c4e:	4620      	mov	r0, r4
 8019c50:	4629      	mov	r1, r5
 8019c52:	f7ea ffc9 	bl	8004be8 <__aeabi_dcmpeq>
 8019c56:	b918      	cbnz	r0, 8019c60 <__cvt+0x8c>
 8019c58:	f1c6 0601 	rsb	r6, r6, #1
 8019c5c:	f8ca 6000 	str.w	r6, [sl]
 8019c60:	f8da 3000 	ldr.w	r3, [sl]
 8019c64:	4499      	add	r9, r3
 8019c66:	2200      	movs	r2, #0
 8019c68:	2300      	movs	r3, #0
 8019c6a:	4620      	mov	r0, r4
 8019c6c:	4629      	mov	r1, r5
 8019c6e:	f7ea ffbb 	bl	8004be8 <__aeabi_dcmpeq>
 8019c72:	b108      	cbz	r0, 8019c78 <__cvt+0xa4>
 8019c74:	f8cd 900c 	str.w	r9, [sp, #12]
 8019c78:	2230      	movs	r2, #48	; 0x30
 8019c7a:	9b03      	ldr	r3, [sp, #12]
 8019c7c:	454b      	cmp	r3, r9
 8019c7e:	d307      	bcc.n	8019c90 <__cvt+0xbc>
 8019c80:	9b03      	ldr	r3, [sp, #12]
 8019c82:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8019c84:	1bdb      	subs	r3, r3, r7
 8019c86:	4638      	mov	r0, r7
 8019c88:	6013      	str	r3, [r2, #0]
 8019c8a:	b004      	add	sp, #16
 8019c8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019c90:	1c59      	adds	r1, r3, #1
 8019c92:	9103      	str	r1, [sp, #12]
 8019c94:	701a      	strb	r2, [r3, #0]
 8019c96:	e7f0      	b.n	8019c7a <__cvt+0xa6>

08019c98 <__exponent>:
 8019c98:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8019c9a:	4603      	mov	r3, r0
 8019c9c:	2900      	cmp	r1, #0
 8019c9e:	bfb8      	it	lt
 8019ca0:	4249      	neglt	r1, r1
 8019ca2:	f803 2b02 	strb.w	r2, [r3], #2
 8019ca6:	bfb4      	ite	lt
 8019ca8:	222d      	movlt	r2, #45	; 0x2d
 8019caa:	222b      	movge	r2, #43	; 0x2b
 8019cac:	2909      	cmp	r1, #9
 8019cae:	7042      	strb	r2, [r0, #1]
 8019cb0:	dd2a      	ble.n	8019d08 <__exponent+0x70>
 8019cb2:	f10d 0407 	add.w	r4, sp, #7
 8019cb6:	46a4      	mov	ip, r4
 8019cb8:	270a      	movs	r7, #10
 8019cba:	46a6      	mov	lr, r4
 8019cbc:	460a      	mov	r2, r1
 8019cbe:	fb91 f6f7 	sdiv	r6, r1, r7
 8019cc2:	fb07 1516 	mls	r5, r7, r6, r1
 8019cc6:	3530      	adds	r5, #48	; 0x30
 8019cc8:	2a63      	cmp	r2, #99	; 0x63
 8019cca:	f104 34ff 	add.w	r4, r4, #4294967295
 8019cce:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8019cd2:	4631      	mov	r1, r6
 8019cd4:	dcf1      	bgt.n	8019cba <__exponent+0x22>
 8019cd6:	3130      	adds	r1, #48	; 0x30
 8019cd8:	f1ae 0502 	sub.w	r5, lr, #2
 8019cdc:	f804 1c01 	strb.w	r1, [r4, #-1]
 8019ce0:	1c44      	adds	r4, r0, #1
 8019ce2:	4629      	mov	r1, r5
 8019ce4:	4561      	cmp	r1, ip
 8019ce6:	d30a      	bcc.n	8019cfe <__exponent+0x66>
 8019ce8:	f10d 0209 	add.w	r2, sp, #9
 8019cec:	eba2 020e 	sub.w	r2, r2, lr
 8019cf0:	4565      	cmp	r5, ip
 8019cf2:	bf88      	it	hi
 8019cf4:	2200      	movhi	r2, #0
 8019cf6:	4413      	add	r3, r2
 8019cf8:	1a18      	subs	r0, r3, r0
 8019cfa:	b003      	add	sp, #12
 8019cfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019cfe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8019d02:	f804 2f01 	strb.w	r2, [r4, #1]!
 8019d06:	e7ed      	b.n	8019ce4 <__exponent+0x4c>
 8019d08:	2330      	movs	r3, #48	; 0x30
 8019d0a:	3130      	adds	r1, #48	; 0x30
 8019d0c:	7083      	strb	r3, [r0, #2]
 8019d0e:	70c1      	strb	r1, [r0, #3]
 8019d10:	1d03      	adds	r3, r0, #4
 8019d12:	e7f1      	b.n	8019cf8 <__exponent+0x60>

08019d14 <_printf_float>:
 8019d14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019d18:	ed2d 8b02 	vpush	{d8}
 8019d1c:	b08d      	sub	sp, #52	; 0x34
 8019d1e:	460c      	mov	r4, r1
 8019d20:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8019d24:	4616      	mov	r6, r2
 8019d26:	461f      	mov	r7, r3
 8019d28:	4605      	mov	r5, r0
 8019d2a:	f002 fe9b 	bl	801ca64 <_localeconv_r>
 8019d2e:	f8d0 a000 	ldr.w	sl, [r0]
 8019d32:	4650      	mov	r0, sl
 8019d34:	f7ea fad6 	bl	80042e4 <strlen>
 8019d38:	2300      	movs	r3, #0
 8019d3a:	930a      	str	r3, [sp, #40]	; 0x28
 8019d3c:	6823      	ldr	r3, [r4, #0]
 8019d3e:	9305      	str	r3, [sp, #20]
 8019d40:	f8d8 3000 	ldr.w	r3, [r8]
 8019d44:	f894 b018 	ldrb.w	fp, [r4, #24]
 8019d48:	3307      	adds	r3, #7
 8019d4a:	f023 0307 	bic.w	r3, r3, #7
 8019d4e:	f103 0208 	add.w	r2, r3, #8
 8019d52:	f8c8 2000 	str.w	r2, [r8]
 8019d56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019d5a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8019d5e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8019d62:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8019d66:	9307      	str	r3, [sp, #28]
 8019d68:	f8cd 8018 	str.w	r8, [sp, #24]
 8019d6c:	ee08 0a10 	vmov	s16, r0
 8019d70:	4b9f      	ldr	r3, [pc, #636]	; (8019ff0 <_printf_float+0x2dc>)
 8019d72:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8019d76:	f04f 32ff 	mov.w	r2, #4294967295
 8019d7a:	f7ea ff67 	bl	8004c4c <__aeabi_dcmpun>
 8019d7e:	bb88      	cbnz	r0, 8019de4 <_printf_float+0xd0>
 8019d80:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8019d84:	4b9a      	ldr	r3, [pc, #616]	; (8019ff0 <_printf_float+0x2dc>)
 8019d86:	f04f 32ff 	mov.w	r2, #4294967295
 8019d8a:	f7ea ff41 	bl	8004c10 <__aeabi_dcmple>
 8019d8e:	bb48      	cbnz	r0, 8019de4 <_printf_float+0xd0>
 8019d90:	2200      	movs	r2, #0
 8019d92:	2300      	movs	r3, #0
 8019d94:	4640      	mov	r0, r8
 8019d96:	4649      	mov	r1, r9
 8019d98:	f7ea ff30 	bl	8004bfc <__aeabi_dcmplt>
 8019d9c:	b110      	cbz	r0, 8019da4 <_printf_float+0x90>
 8019d9e:	232d      	movs	r3, #45	; 0x2d
 8019da0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8019da4:	4b93      	ldr	r3, [pc, #588]	; (8019ff4 <_printf_float+0x2e0>)
 8019da6:	4894      	ldr	r0, [pc, #592]	; (8019ff8 <_printf_float+0x2e4>)
 8019da8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8019dac:	bf94      	ite	ls
 8019dae:	4698      	movls	r8, r3
 8019db0:	4680      	movhi	r8, r0
 8019db2:	2303      	movs	r3, #3
 8019db4:	6123      	str	r3, [r4, #16]
 8019db6:	9b05      	ldr	r3, [sp, #20]
 8019db8:	f023 0204 	bic.w	r2, r3, #4
 8019dbc:	6022      	str	r2, [r4, #0]
 8019dbe:	f04f 0900 	mov.w	r9, #0
 8019dc2:	9700      	str	r7, [sp, #0]
 8019dc4:	4633      	mov	r3, r6
 8019dc6:	aa0b      	add	r2, sp, #44	; 0x2c
 8019dc8:	4621      	mov	r1, r4
 8019dca:	4628      	mov	r0, r5
 8019dcc:	f000 f9d8 	bl	801a180 <_printf_common>
 8019dd0:	3001      	adds	r0, #1
 8019dd2:	f040 8090 	bne.w	8019ef6 <_printf_float+0x1e2>
 8019dd6:	f04f 30ff 	mov.w	r0, #4294967295
 8019dda:	b00d      	add	sp, #52	; 0x34
 8019ddc:	ecbd 8b02 	vpop	{d8}
 8019de0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019de4:	4642      	mov	r2, r8
 8019de6:	464b      	mov	r3, r9
 8019de8:	4640      	mov	r0, r8
 8019dea:	4649      	mov	r1, r9
 8019dec:	f7ea ff2e 	bl	8004c4c <__aeabi_dcmpun>
 8019df0:	b140      	cbz	r0, 8019e04 <_printf_float+0xf0>
 8019df2:	464b      	mov	r3, r9
 8019df4:	2b00      	cmp	r3, #0
 8019df6:	bfbc      	itt	lt
 8019df8:	232d      	movlt	r3, #45	; 0x2d
 8019dfa:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8019dfe:	487f      	ldr	r0, [pc, #508]	; (8019ffc <_printf_float+0x2e8>)
 8019e00:	4b7f      	ldr	r3, [pc, #508]	; (801a000 <_printf_float+0x2ec>)
 8019e02:	e7d1      	b.n	8019da8 <_printf_float+0x94>
 8019e04:	6863      	ldr	r3, [r4, #4]
 8019e06:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8019e0a:	9206      	str	r2, [sp, #24]
 8019e0c:	1c5a      	adds	r2, r3, #1
 8019e0e:	d13f      	bne.n	8019e90 <_printf_float+0x17c>
 8019e10:	2306      	movs	r3, #6
 8019e12:	6063      	str	r3, [r4, #4]
 8019e14:	9b05      	ldr	r3, [sp, #20]
 8019e16:	6861      	ldr	r1, [r4, #4]
 8019e18:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8019e1c:	2300      	movs	r3, #0
 8019e1e:	9303      	str	r3, [sp, #12]
 8019e20:	ab0a      	add	r3, sp, #40	; 0x28
 8019e22:	e9cd b301 	strd	fp, r3, [sp, #4]
 8019e26:	ab09      	add	r3, sp, #36	; 0x24
 8019e28:	ec49 8b10 	vmov	d0, r8, r9
 8019e2c:	9300      	str	r3, [sp, #0]
 8019e2e:	6022      	str	r2, [r4, #0]
 8019e30:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8019e34:	4628      	mov	r0, r5
 8019e36:	f7ff fecd 	bl	8019bd4 <__cvt>
 8019e3a:	9b06      	ldr	r3, [sp, #24]
 8019e3c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8019e3e:	2b47      	cmp	r3, #71	; 0x47
 8019e40:	4680      	mov	r8, r0
 8019e42:	d108      	bne.n	8019e56 <_printf_float+0x142>
 8019e44:	1cc8      	adds	r0, r1, #3
 8019e46:	db02      	blt.n	8019e4e <_printf_float+0x13a>
 8019e48:	6863      	ldr	r3, [r4, #4]
 8019e4a:	4299      	cmp	r1, r3
 8019e4c:	dd41      	ble.n	8019ed2 <_printf_float+0x1be>
 8019e4e:	f1ab 0b02 	sub.w	fp, fp, #2
 8019e52:	fa5f fb8b 	uxtb.w	fp, fp
 8019e56:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8019e5a:	d820      	bhi.n	8019e9e <_printf_float+0x18a>
 8019e5c:	3901      	subs	r1, #1
 8019e5e:	465a      	mov	r2, fp
 8019e60:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8019e64:	9109      	str	r1, [sp, #36]	; 0x24
 8019e66:	f7ff ff17 	bl	8019c98 <__exponent>
 8019e6a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8019e6c:	1813      	adds	r3, r2, r0
 8019e6e:	2a01      	cmp	r2, #1
 8019e70:	4681      	mov	r9, r0
 8019e72:	6123      	str	r3, [r4, #16]
 8019e74:	dc02      	bgt.n	8019e7c <_printf_float+0x168>
 8019e76:	6822      	ldr	r2, [r4, #0]
 8019e78:	07d2      	lsls	r2, r2, #31
 8019e7a:	d501      	bpl.n	8019e80 <_printf_float+0x16c>
 8019e7c:	3301      	adds	r3, #1
 8019e7e:	6123      	str	r3, [r4, #16]
 8019e80:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8019e84:	2b00      	cmp	r3, #0
 8019e86:	d09c      	beq.n	8019dc2 <_printf_float+0xae>
 8019e88:	232d      	movs	r3, #45	; 0x2d
 8019e8a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8019e8e:	e798      	b.n	8019dc2 <_printf_float+0xae>
 8019e90:	9a06      	ldr	r2, [sp, #24]
 8019e92:	2a47      	cmp	r2, #71	; 0x47
 8019e94:	d1be      	bne.n	8019e14 <_printf_float+0x100>
 8019e96:	2b00      	cmp	r3, #0
 8019e98:	d1bc      	bne.n	8019e14 <_printf_float+0x100>
 8019e9a:	2301      	movs	r3, #1
 8019e9c:	e7b9      	b.n	8019e12 <_printf_float+0xfe>
 8019e9e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8019ea2:	d118      	bne.n	8019ed6 <_printf_float+0x1c2>
 8019ea4:	2900      	cmp	r1, #0
 8019ea6:	6863      	ldr	r3, [r4, #4]
 8019ea8:	dd0b      	ble.n	8019ec2 <_printf_float+0x1ae>
 8019eaa:	6121      	str	r1, [r4, #16]
 8019eac:	b913      	cbnz	r3, 8019eb4 <_printf_float+0x1a0>
 8019eae:	6822      	ldr	r2, [r4, #0]
 8019eb0:	07d0      	lsls	r0, r2, #31
 8019eb2:	d502      	bpl.n	8019eba <_printf_float+0x1a6>
 8019eb4:	3301      	adds	r3, #1
 8019eb6:	440b      	add	r3, r1
 8019eb8:	6123      	str	r3, [r4, #16]
 8019eba:	65a1      	str	r1, [r4, #88]	; 0x58
 8019ebc:	f04f 0900 	mov.w	r9, #0
 8019ec0:	e7de      	b.n	8019e80 <_printf_float+0x16c>
 8019ec2:	b913      	cbnz	r3, 8019eca <_printf_float+0x1b6>
 8019ec4:	6822      	ldr	r2, [r4, #0]
 8019ec6:	07d2      	lsls	r2, r2, #31
 8019ec8:	d501      	bpl.n	8019ece <_printf_float+0x1ba>
 8019eca:	3302      	adds	r3, #2
 8019ecc:	e7f4      	b.n	8019eb8 <_printf_float+0x1a4>
 8019ece:	2301      	movs	r3, #1
 8019ed0:	e7f2      	b.n	8019eb8 <_printf_float+0x1a4>
 8019ed2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8019ed6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019ed8:	4299      	cmp	r1, r3
 8019eda:	db05      	blt.n	8019ee8 <_printf_float+0x1d4>
 8019edc:	6823      	ldr	r3, [r4, #0]
 8019ede:	6121      	str	r1, [r4, #16]
 8019ee0:	07d8      	lsls	r0, r3, #31
 8019ee2:	d5ea      	bpl.n	8019eba <_printf_float+0x1a6>
 8019ee4:	1c4b      	adds	r3, r1, #1
 8019ee6:	e7e7      	b.n	8019eb8 <_printf_float+0x1a4>
 8019ee8:	2900      	cmp	r1, #0
 8019eea:	bfd4      	ite	le
 8019eec:	f1c1 0202 	rsble	r2, r1, #2
 8019ef0:	2201      	movgt	r2, #1
 8019ef2:	4413      	add	r3, r2
 8019ef4:	e7e0      	b.n	8019eb8 <_printf_float+0x1a4>
 8019ef6:	6823      	ldr	r3, [r4, #0]
 8019ef8:	055a      	lsls	r2, r3, #21
 8019efa:	d407      	bmi.n	8019f0c <_printf_float+0x1f8>
 8019efc:	6923      	ldr	r3, [r4, #16]
 8019efe:	4642      	mov	r2, r8
 8019f00:	4631      	mov	r1, r6
 8019f02:	4628      	mov	r0, r5
 8019f04:	47b8      	blx	r7
 8019f06:	3001      	adds	r0, #1
 8019f08:	d12c      	bne.n	8019f64 <_printf_float+0x250>
 8019f0a:	e764      	b.n	8019dd6 <_printf_float+0xc2>
 8019f0c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8019f10:	f240 80e0 	bls.w	801a0d4 <_printf_float+0x3c0>
 8019f14:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8019f18:	2200      	movs	r2, #0
 8019f1a:	2300      	movs	r3, #0
 8019f1c:	f7ea fe64 	bl	8004be8 <__aeabi_dcmpeq>
 8019f20:	2800      	cmp	r0, #0
 8019f22:	d034      	beq.n	8019f8e <_printf_float+0x27a>
 8019f24:	4a37      	ldr	r2, [pc, #220]	; (801a004 <_printf_float+0x2f0>)
 8019f26:	2301      	movs	r3, #1
 8019f28:	4631      	mov	r1, r6
 8019f2a:	4628      	mov	r0, r5
 8019f2c:	47b8      	blx	r7
 8019f2e:	3001      	adds	r0, #1
 8019f30:	f43f af51 	beq.w	8019dd6 <_printf_float+0xc2>
 8019f34:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8019f38:	429a      	cmp	r2, r3
 8019f3a:	db02      	blt.n	8019f42 <_printf_float+0x22e>
 8019f3c:	6823      	ldr	r3, [r4, #0]
 8019f3e:	07d8      	lsls	r0, r3, #31
 8019f40:	d510      	bpl.n	8019f64 <_printf_float+0x250>
 8019f42:	ee18 3a10 	vmov	r3, s16
 8019f46:	4652      	mov	r2, sl
 8019f48:	4631      	mov	r1, r6
 8019f4a:	4628      	mov	r0, r5
 8019f4c:	47b8      	blx	r7
 8019f4e:	3001      	adds	r0, #1
 8019f50:	f43f af41 	beq.w	8019dd6 <_printf_float+0xc2>
 8019f54:	f04f 0800 	mov.w	r8, #0
 8019f58:	f104 091a 	add.w	r9, r4, #26
 8019f5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019f5e:	3b01      	subs	r3, #1
 8019f60:	4543      	cmp	r3, r8
 8019f62:	dc09      	bgt.n	8019f78 <_printf_float+0x264>
 8019f64:	6823      	ldr	r3, [r4, #0]
 8019f66:	079b      	lsls	r3, r3, #30
 8019f68:	f100 8105 	bmi.w	801a176 <_printf_float+0x462>
 8019f6c:	68e0      	ldr	r0, [r4, #12]
 8019f6e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8019f70:	4298      	cmp	r0, r3
 8019f72:	bfb8      	it	lt
 8019f74:	4618      	movlt	r0, r3
 8019f76:	e730      	b.n	8019dda <_printf_float+0xc6>
 8019f78:	2301      	movs	r3, #1
 8019f7a:	464a      	mov	r2, r9
 8019f7c:	4631      	mov	r1, r6
 8019f7e:	4628      	mov	r0, r5
 8019f80:	47b8      	blx	r7
 8019f82:	3001      	adds	r0, #1
 8019f84:	f43f af27 	beq.w	8019dd6 <_printf_float+0xc2>
 8019f88:	f108 0801 	add.w	r8, r8, #1
 8019f8c:	e7e6      	b.n	8019f5c <_printf_float+0x248>
 8019f8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019f90:	2b00      	cmp	r3, #0
 8019f92:	dc39      	bgt.n	801a008 <_printf_float+0x2f4>
 8019f94:	4a1b      	ldr	r2, [pc, #108]	; (801a004 <_printf_float+0x2f0>)
 8019f96:	2301      	movs	r3, #1
 8019f98:	4631      	mov	r1, r6
 8019f9a:	4628      	mov	r0, r5
 8019f9c:	47b8      	blx	r7
 8019f9e:	3001      	adds	r0, #1
 8019fa0:	f43f af19 	beq.w	8019dd6 <_printf_float+0xc2>
 8019fa4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8019fa8:	4313      	orrs	r3, r2
 8019faa:	d102      	bne.n	8019fb2 <_printf_float+0x29e>
 8019fac:	6823      	ldr	r3, [r4, #0]
 8019fae:	07d9      	lsls	r1, r3, #31
 8019fb0:	d5d8      	bpl.n	8019f64 <_printf_float+0x250>
 8019fb2:	ee18 3a10 	vmov	r3, s16
 8019fb6:	4652      	mov	r2, sl
 8019fb8:	4631      	mov	r1, r6
 8019fba:	4628      	mov	r0, r5
 8019fbc:	47b8      	blx	r7
 8019fbe:	3001      	adds	r0, #1
 8019fc0:	f43f af09 	beq.w	8019dd6 <_printf_float+0xc2>
 8019fc4:	f04f 0900 	mov.w	r9, #0
 8019fc8:	f104 0a1a 	add.w	sl, r4, #26
 8019fcc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019fce:	425b      	negs	r3, r3
 8019fd0:	454b      	cmp	r3, r9
 8019fd2:	dc01      	bgt.n	8019fd8 <_printf_float+0x2c4>
 8019fd4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019fd6:	e792      	b.n	8019efe <_printf_float+0x1ea>
 8019fd8:	2301      	movs	r3, #1
 8019fda:	4652      	mov	r2, sl
 8019fdc:	4631      	mov	r1, r6
 8019fde:	4628      	mov	r0, r5
 8019fe0:	47b8      	blx	r7
 8019fe2:	3001      	adds	r0, #1
 8019fe4:	f43f aef7 	beq.w	8019dd6 <_printf_float+0xc2>
 8019fe8:	f109 0901 	add.w	r9, r9, #1
 8019fec:	e7ee      	b.n	8019fcc <_printf_float+0x2b8>
 8019fee:	bf00      	nop
 8019ff0:	7fefffff 	.word	0x7fefffff
 8019ff4:	080377f0 	.word	0x080377f0
 8019ff8:	080377f4 	.word	0x080377f4
 8019ffc:	080377fc 	.word	0x080377fc
 801a000:	080377f8 	.word	0x080377f8
 801a004:	0802205d 	.word	0x0802205d
 801a008:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801a00a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801a00c:	429a      	cmp	r2, r3
 801a00e:	bfa8      	it	ge
 801a010:	461a      	movge	r2, r3
 801a012:	2a00      	cmp	r2, #0
 801a014:	4691      	mov	r9, r2
 801a016:	dc37      	bgt.n	801a088 <_printf_float+0x374>
 801a018:	f04f 0b00 	mov.w	fp, #0
 801a01c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801a020:	f104 021a 	add.w	r2, r4, #26
 801a024:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801a026:	9305      	str	r3, [sp, #20]
 801a028:	eba3 0309 	sub.w	r3, r3, r9
 801a02c:	455b      	cmp	r3, fp
 801a02e:	dc33      	bgt.n	801a098 <_printf_float+0x384>
 801a030:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801a034:	429a      	cmp	r2, r3
 801a036:	db3b      	blt.n	801a0b0 <_printf_float+0x39c>
 801a038:	6823      	ldr	r3, [r4, #0]
 801a03a:	07da      	lsls	r2, r3, #31
 801a03c:	d438      	bmi.n	801a0b0 <_printf_float+0x39c>
 801a03e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801a040:	9b05      	ldr	r3, [sp, #20]
 801a042:	9909      	ldr	r1, [sp, #36]	; 0x24
 801a044:	1ad3      	subs	r3, r2, r3
 801a046:	eba2 0901 	sub.w	r9, r2, r1
 801a04a:	4599      	cmp	r9, r3
 801a04c:	bfa8      	it	ge
 801a04e:	4699      	movge	r9, r3
 801a050:	f1b9 0f00 	cmp.w	r9, #0
 801a054:	dc35      	bgt.n	801a0c2 <_printf_float+0x3ae>
 801a056:	f04f 0800 	mov.w	r8, #0
 801a05a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801a05e:	f104 0a1a 	add.w	sl, r4, #26
 801a062:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801a066:	1a9b      	subs	r3, r3, r2
 801a068:	eba3 0309 	sub.w	r3, r3, r9
 801a06c:	4543      	cmp	r3, r8
 801a06e:	f77f af79 	ble.w	8019f64 <_printf_float+0x250>
 801a072:	2301      	movs	r3, #1
 801a074:	4652      	mov	r2, sl
 801a076:	4631      	mov	r1, r6
 801a078:	4628      	mov	r0, r5
 801a07a:	47b8      	blx	r7
 801a07c:	3001      	adds	r0, #1
 801a07e:	f43f aeaa 	beq.w	8019dd6 <_printf_float+0xc2>
 801a082:	f108 0801 	add.w	r8, r8, #1
 801a086:	e7ec      	b.n	801a062 <_printf_float+0x34e>
 801a088:	4613      	mov	r3, r2
 801a08a:	4631      	mov	r1, r6
 801a08c:	4642      	mov	r2, r8
 801a08e:	4628      	mov	r0, r5
 801a090:	47b8      	blx	r7
 801a092:	3001      	adds	r0, #1
 801a094:	d1c0      	bne.n	801a018 <_printf_float+0x304>
 801a096:	e69e      	b.n	8019dd6 <_printf_float+0xc2>
 801a098:	2301      	movs	r3, #1
 801a09a:	4631      	mov	r1, r6
 801a09c:	4628      	mov	r0, r5
 801a09e:	9205      	str	r2, [sp, #20]
 801a0a0:	47b8      	blx	r7
 801a0a2:	3001      	adds	r0, #1
 801a0a4:	f43f ae97 	beq.w	8019dd6 <_printf_float+0xc2>
 801a0a8:	9a05      	ldr	r2, [sp, #20]
 801a0aa:	f10b 0b01 	add.w	fp, fp, #1
 801a0ae:	e7b9      	b.n	801a024 <_printf_float+0x310>
 801a0b0:	ee18 3a10 	vmov	r3, s16
 801a0b4:	4652      	mov	r2, sl
 801a0b6:	4631      	mov	r1, r6
 801a0b8:	4628      	mov	r0, r5
 801a0ba:	47b8      	blx	r7
 801a0bc:	3001      	adds	r0, #1
 801a0be:	d1be      	bne.n	801a03e <_printf_float+0x32a>
 801a0c0:	e689      	b.n	8019dd6 <_printf_float+0xc2>
 801a0c2:	9a05      	ldr	r2, [sp, #20]
 801a0c4:	464b      	mov	r3, r9
 801a0c6:	4442      	add	r2, r8
 801a0c8:	4631      	mov	r1, r6
 801a0ca:	4628      	mov	r0, r5
 801a0cc:	47b8      	blx	r7
 801a0ce:	3001      	adds	r0, #1
 801a0d0:	d1c1      	bne.n	801a056 <_printf_float+0x342>
 801a0d2:	e680      	b.n	8019dd6 <_printf_float+0xc2>
 801a0d4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801a0d6:	2a01      	cmp	r2, #1
 801a0d8:	dc01      	bgt.n	801a0de <_printf_float+0x3ca>
 801a0da:	07db      	lsls	r3, r3, #31
 801a0dc:	d538      	bpl.n	801a150 <_printf_float+0x43c>
 801a0de:	2301      	movs	r3, #1
 801a0e0:	4642      	mov	r2, r8
 801a0e2:	4631      	mov	r1, r6
 801a0e4:	4628      	mov	r0, r5
 801a0e6:	47b8      	blx	r7
 801a0e8:	3001      	adds	r0, #1
 801a0ea:	f43f ae74 	beq.w	8019dd6 <_printf_float+0xc2>
 801a0ee:	ee18 3a10 	vmov	r3, s16
 801a0f2:	4652      	mov	r2, sl
 801a0f4:	4631      	mov	r1, r6
 801a0f6:	4628      	mov	r0, r5
 801a0f8:	47b8      	blx	r7
 801a0fa:	3001      	adds	r0, #1
 801a0fc:	f43f ae6b 	beq.w	8019dd6 <_printf_float+0xc2>
 801a100:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801a104:	2200      	movs	r2, #0
 801a106:	2300      	movs	r3, #0
 801a108:	f7ea fd6e 	bl	8004be8 <__aeabi_dcmpeq>
 801a10c:	b9d8      	cbnz	r0, 801a146 <_printf_float+0x432>
 801a10e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a110:	f108 0201 	add.w	r2, r8, #1
 801a114:	3b01      	subs	r3, #1
 801a116:	4631      	mov	r1, r6
 801a118:	4628      	mov	r0, r5
 801a11a:	47b8      	blx	r7
 801a11c:	3001      	adds	r0, #1
 801a11e:	d10e      	bne.n	801a13e <_printf_float+0x42a>
 801a120:	e659      	b.n	8019dd6 <_printf_float+0xc2>
 801a122:	2301      	movs	r3, #1
 801a124:	4652      	mov	r2, sl
 801a126:	4631      	mov	r1, r6
 801a128:	4628      	mov	r0, r5
 801a12a:	47b8      	blx	r7
 801a12c:	3001      	adds	r0, #1
 801a12e:	f43f ae52 	beq.w	8019dd6 <_printf_float+0xc2>
 801a132:	f108 0801 	add.w	r8, r8, #1
 801a136:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a138:	3b01      	subs	r3, #1
 801a13a:	4543      	cmp	r3, r8
 801a13c:	dcf1      	bgt.n	801a122 <_printf_float+0x40e>
 801a13e:	464b      	mov	r3, r9
 801a140:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801a144:	e6dc      	b.n	8019f00 <_printf_float+0x1ec>
 801a146:	f04f 0800 	mov.w	r8, #0
 801a14a:	f104 0a1a 	add.w	sl, r4, #26
 801a14e:	e7f2      	b.n	801a136 <_printf_float+0x422>
 801a150:	2301      	movs	r3, #1
 801a152:	4642      	mov	r2, r8
 801a154:	e7df      	b.n	801a116 <_printf_float+0x402>
 801a156:	2301      	movs	r3, #1
 801a158:	464a      	mov	r2, r9
 801a15a:	4631      	mov	r1, r6
 801a15c:	4628      	mov	r0, r5
 801a15e:	47b8      	blx	r7
 801a160:	3001      	adds	r0, #1
 801a162:	f43f ae38 	beq.w	8019dd6 <_printf_float+0xc2>
 801a166:	f108 0801 	add.w	r8, r8, #1
 801a16a:	68e3      	ldr	r3, [r4, #12]
 801a16c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801a16e:	1a5b      	subs	r3, r3, r1
 801a170:	4543      	cmp	r3, r8
 801a172:	dcf0      	bgt.n	801a156 <_printf_float+0x442>
 801a174:	e6fa      	b.n	8019f6c <_printf_float+0x258>
 801a176:	f04f 0800 	mov.w	r8, #0
 801a17a:	f104 0919 	add.w	r9, r4, #25
 801a17e:	e7f4      	b.n	801a16a <_printf_float+0x456>

0801a180 <_printf_common>:
 801a180:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a184:	4616      	mov	r6, r2
 801a186:	4699      	mov	r9, r3
 801a188:	688a      	ldr	r2, [r1, #8]
 801a18a:	690b      	ldr	r3, [r1, #16]
 801a18c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801a190:	4293      	cmp	r3, r2
 801a192:	bfb8      	it	lt
 801a194:	4613      	movlt	r3, r2
 801a196:	6033      	str	r3, [r6, #0]
 801a198:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801a19c:	4607      	mov	r7, r0
 801a19e:	460c      	mov	r4, r1
 801a1a0:	b10a      	cbz	r2, 801a1a6 <_printf_common+0x26>
 801a1a2:	3301      	adds	r3, #1
 801a1a4:	6033      	str	r3, [r6, #0]
 801a1a6:	6823      	ldr	r3, [r4, #0]
 801a1a8:	0699      	lsls	r1, r3, #26
 801a1aa:	bf42      	ittt	mi
 801a1ac:	6833      	ldrmi	r3, [r6, #0]
 801a1ae:	3302      	addmi	r3, #2
 801a1b0:	6033      	strmi	r3, [r6, #0]
 801a1b2:	6825      	ldr	r5, [r4, #0]
 801a1b4:	f015 0506 	ands.w	r5, r5, #6
 801a1b8:	d106      	bne.n	801a1c8 <_printf_common+0x48>
 801a1ba:	f104 0a19 	add.w	sl, r4, #25
 801a1be:	68e3      	ldr	r3, [r4, #12]
 801a1c0:	6832      	ldr	r2, [r6, #0]
 801a1c2:	1a9b      	subs	r3, r3, r2
 801a1c4:	42ab      	cmp	r3, r5
 801a1c6:	dc26      	bgt.n	801a216 <_printf_common+0x96>
 801a1c8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801a1cc:	1e13      	subs	r3, r2, #0
 801a1ce:	6822      	ldr	r2, [r4, #0]
 801a1d0:	bf18      	it	ne
 801a1d2:	2301      	movne	r3, #1
 801a1d4:	0692      	lsls	r2, r2, #26
 801a1d6:	d42b      	bmi.n	801a230 <_printf_common+0xb0>
 801a1d8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801a1dc:	4649      	mov	r1, r9
 801a1de:	4638      	mov	r0, r7
 801a1e0:	47c0      	blx	r8
 801a1e2:	3001      	adds	r0, #1
 801a1e4:	d01e      	beq.n	801a224 <_printf_common+0xa4>
 801a1e6:	6823      	ldr	r3, [r4, #0]
 801a1e8:	68e5      	ldr	r5, [r4, #12]
 801a1ea:	6832      	ldr	r2, [r6, #0]
 801a1ec:	f003 0306 	and.w	r3, r3, #6
 801a1f0:	2b04      	cmp	r3, #4
 801a1f2:	bf08      	it	eq
 801a1f4:	1aad      	subeq	r5, r5, r2
 801a1f6:	68a3      	ldr	r3, [r4, #8]
 801a1f8:	6922      	ldr	r2, [r4, #16]
 801a1fa:	bf0c      	ite	eq
 801a1fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801a200:	2500      	movne	r5, #0
 801a202:	4293      	cmp	r3, r2
 801a204:	bfc4      	itt	gt
 801a206:	1a9b      	subgt	r3, r3, r2
 801a208:	18ed      	addgt	r5, r5, r3
 801a20a:	2600      	movs	r6, #0
 801a20c:	341a      	adds	r4, #26
 801a20e:	42b5      	cmp	r5, r6
 801a210:	d11a      	bne.n	801a248 <_printf_common+0xc8>
 801a212:	2000      	movs	r0, #0
 801a214:	e008      	b.n	801a228 <_printf_common+0xa8>
 801a216:	2301      	movs	r3, #1
 801a218:	4652      	mov	r2, sl
 801a21a:	4649      	mov	r1, r9
 801a21c:	4638      	mov	r0, r7
 801a21e:	47c0      	blx	r8
 801a220:	3001      	adds	r0, #1
 801a222:	d103      	bne.n	801a22c <_printf_common+0xac>
 801a224:	f04f 30ff 	mov.w	r0, #4294967295
 801a228:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a22c:	3501      	adds	r5, #1
 801a22e:	e7c6      	b.n	801a1be <_printf_common+0x3e>
 801a230:	18e1      	adds	r1, r4, r3
 801a232:	1c5a      	adds	r2, r3, #1
 801a234:	2030      	movs	r0, #48	; 0x30
 801a236:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801a23a:	4422      	add	r2, r4
 801a23c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801a240:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801a244:	3302      	adds	r3, #2
 801a246:	e7c7      	b.n	801a1d8 <_printf_common+0x58>
 801a248:	2301      	movs	r3, #1
 801a24a:	4622      	mov	r2, r4
 801a24c:	4649      	mov	r1, r9
 801a24e:	4638      	mov	r0, r7
 801a250:	47c0      	blx	r8
 801a252:	3001      	adds	r0, #1
 801a254:	d0e6      	beq.n	801a224 <_printf_common+0xa4>
 801a256:	3601      	adds	r6, #1
 801a258:	e7d9      	b.n	801a20e <_printf_common+0x8e>
	...

0801a25c <_printf_i>:
 801a25c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801a260:	460c      	mov	r4, r1
 801a262:	4691      	mov	r9, r2
 801a264:	7e27      	ldrb	r7, [r4, #24]
 801a266:	990c      	ldr	r1, [sp, #48]	; 0x30
 801a268:	2f78      	cmp	r7, #120	; 0x78
 801a26a:	4680      	mov	r8, r0
 801a26c:	469a      	mov	sl, r3
 801a26e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801a272:	d807      	bhi.n	801a284 <_printf_i+0x28>
 801a274:	2f62      	cmp	r7, #98	; 0x62
 801a276:	d80a      	bhi.n	801a28e <_printf_i+0x32>
 801a278:	2f00      	cmp	r7, #0
 801a27a:	f000 80d8 	beq.w	801a42e <_printf_i+0x1d2>
 801a27e:	2f58      	cmp	r7, #88	; 0x58
 801a280:	f000 80a3 	beq.w	801a3ca <_printf_i+0x16e>
 801a284:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801a288:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801a28c:	e03a      	b.n	801a304 <_printf_i+0xa8>
 801a28e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801a292:	2b15      	cmp	r3, #21
 801a294:	d8f6      	bhi.n	801a284 <_printf_i+0x28>
 801a296:	a001      	add	r0, pc, #4	; (adr r0, 801a29c <_printf_i+0x40>)
 801a298:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 801a29c:	0801a2f5 	.word	0x0801a2f5
 801a2a0:	0801a309 	.word	0x0801a309
 801a2a4:	0801a285 	.word	0x0801a285
 801a2a8:	0801a285 	.word	0x0801a285
 801a2ac:	0801a285 	.word	0x0801a285
 801a2b0:	0801a285 	.word	0x0801a285
 801a2b4:	0801a309 	.word	0x0801a309
 801a2b8:	0801a285 	.word	0x0801a285
 801a2bc:	0801a285 	.word	0x0801a285
 801a2c0:	0801a285 	.word	0x0801a285
 801a2c4:	0801a285 	.word	0x0801a285
 801a2c8:	0801a415 	.word	0x0801a415
 801a2cc:	0801a339 	.word	0x0801a339
 801a2d0:	0801a3f7 	.word	0x0801a3f7
 801a2d4:	0801a285 	.word	0x0801a285
 801a2d8:	0801a285 	.word	0x0801a285
 801a2dc:	0801a437 	.word	0x0801a437
 801a2e0:	0801a285 	.word	0x0801a285
 801a2e4:	0801a339 	.word	0x0801a339
 801a2e8:	0801a285 	.word	0x0801a285
 801a2ec:	0801a285 	.word	0x0801a285
 801a2f0:	0801a3ff 	.word	0x0801a3ff
 801a2f4:	680b      	ldr	r3, [r1, #0]
 801a2f6:	1d1a      	adds	r2, r3, #4
 801a2f8:	681b      	ldr	r3, [r3, #0]
 801a2fa:	600a      	str	r2, [r1, #0]
 801a2fc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801a300:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801a304:	2301      	movs	r3, #1
 801a306:	e0a3      	b.n	801a450 <_printf_i+0x1f4>
 801a308:	6825      	ldr	r5, [r4, #0]
 801a30a:	6808      	ldr	r0, [r1, #0]
 801a30c:	062e      	lsls	r6, r5, #24
 801a30e:	f100 0304 	add.w	r3, r0, #4
 801a312:	d50a      	bpl.n	801a32a <_printf_i+0xce>
 801a314:	6805      	ldr	r5, [r0, #0]
 801a316:	600b      	str	r3, [r1, #0]
 801a318:	2d00      	cmp	r5, #0
 801a31a:	da03      	bge.n	801a324 <_printf_i+0xc8>
 801a31c:	232d      	movs	r3, #45	; 0x2d
 801a31e:	426d      	negs	r5, r5
 801a320:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801a324:	485e      	ldr	r0, [pc, #376]	; (801a4a0 <_printf_i+0x244>)
 801a326:	230a      	movs	r3, #10
 801a328:	e019      	b.n	801a35e <_printf_i+0x102>
 801a32a:	f015 0f40 	tst.w	r5, #64	; 0x40
 801a32e:	6805      	ldr	r5, [r0, #0]
 801a330:	600b      	str	r3, [r1, #0]
 801a332:	bf18      	it	ne
 801a334:	b22d      	sxthne	r5, r5
 801a336:	e7ef      	b.n	801a318 <_printf_i+0xbc>
 801a338:	680b      	ldr	r3, [r1, #0]
 801a33a:	6825      	ldr	r5, [r4, #0]
 801a33c:	1d18      	adds	r0, r3, #4
 801a33e:	6008      	str	r0, [r1, #0]
 801a340:	0628      	lsls	r0, r5, #24
 801a342:	d501      	bpl.n	801a348 <_printf_i+0xec>
 801a344:	681d      	ldr	r5, [r3, #0]
 801a346:	e002      	b.n	801a34e <_printf_i+0xf2>
 801a348:	0669      	lsls	r1, r5, #25
 801a34a:	d5fb      	bpl.n	801a344 <_printf_i+0xe8>
 801a34c:	881d      	ldrh	r5, [r3, #0]
 801a34e:	4854      	ldr	r0, [pc, #336]	; (801a4a0 <_printf_i+0x244>)
 801a350:	2f6f      	cmp	r7, #111	; 0x6f
 801a352:	bf0c      	ite	eq
 801a354:	2308      	moveq	r3, #8
 801a356:	230a      	movne	r3, #10
 801a358:	2100      	movs	r1, #0
 801a35a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801a35e:	6866      	ldr	r6, [r4, #4]
 801a360:	60a6      	str	r6, [r4, #8]
 801a362:	2e00      	cmp	r6, #0
 801a364:	bfa2      	ittt	ge
 801a366:	6821      	ldrge	r1, [r4, #0]
 801a368:	f021 0104 	bicge.w	r1, r1, #4
 801a36c:	6021      	strge	r1, [r4, #0]
 801a36e:	b90d      	cbnz	r5, 801a374 <_printf_i+0x118>
 801a370:	2e00      	cmp	r6, #0
 801a372:	d04d      	beq.n	801a410 <_printf_i+0x1b4>
 801a374:	4616      	mov	r6, r2
 801a376:	fbb5 f1f3 	udiv	r1, r5, r3
 801a37a:	fb03 5711 	mls	r7, r3, r1, r5
 801a37e:	5dc7      	ldrb	r7, [r0, r7]
 801a380:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801a384:	462f      	mov	r7, r5
 801a386:	42bb      	cmp	r3, r7
 801a388:	460d      	mov	r5, r1
 801a38a:	d9f4      	bls.n	801a376 <_printf_i+0x11a>
 801a38c:	2b08      	cmp	r3, #8
 801a38e:	d10b      	bne.n	801a3a8 <_printf_i+0x14c>
 801a390:	6823      	ldr	r3, [r4, #0]
 801a392:	07df      	lsls	r7, r3, #31
 801a394:	d508      	bpl.n	801a3a8 <_printf_i+0x14c>
 801a396:	6923      	ldr	r3, [r4, #16]
 801a398:	6861      	ldr	r1, [r4, #4]
 801a39a:	4299      	cmp	r1, r3
 801a39c:	bfde      	ittt	le
 801a39e:	2330      	movle	r3, #48	; 0x30
 801a3a0:	f806 3c01 	strble.w	r3, [r6, #-1]
 801a3a4:	f106 36ff 	addle.w	r6, r6, #4294967295
 801a3a8:	1b92      	subs	r2, r2, r6
 801a3aa:	6122      	str	r2, [r4, #16]
 801a3ac:	f8cd a000 	str.w	sl, [sp]
 801a3b0:	464b      	mov	r3, r9
 801a3b2:	aa03      	add	r2, sp, #12
 801a3b4:	4621      	mov	r1, r4
 801a3b6:	4640      	mov	r0, r8
 801a3b8:	f7ff fee2 	bl	801a180 <_printf_common>
 801a3bc:	3001      	adds	r0, #1
 801a3be:	d14c      	bne.n	801a45a <_printf_i+0x1fe>
 801a3c0:	f04f 30ff 	mov.w	r0, #4294967295
 801a3c4:	b004      	add	sp, #16
 801a3c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a3ca:	4835      	ldr	r0, [pc, #212]	; (801a4a0 <_printf_i+0x244>)
 801a3cc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801a3d0:	6823      	ldr	r3, [r4, #0]
 801a3d2:	680e      	ldr	r6, [r1, #0]
 801a3d4:	061f      	lsls	r7, r3, #24
 801a3d6:	f856 5b04 	ldr.w	r5, [r6], #4
 801a3da:	600e      	str	r6, [r1, #0]
 801a3dc:	d514      	bpl.n	801a408 <_printf_i+0x1ac>
 801a3de:	07d9      	lsls	r1, r3, #31
 801a3e0:	bf44      	itt	mi
 801a3e2:	f043 0320 	orrmi.w	r3, r3, #32
 801a3e6:	6023      	strmi	r3, [r4, #0]
 801a3e8:	b91d      	cbnz	r5, 801a3f2 <_printf_i+0x196>
 801a3ea:	6823      	ldr	r3, [r4, #0]
 801a3ec:	f023 0320 	bic.w	r3, r3, #32
 801a3f0:	6023      	str	r3, [r4, #0]
 801a3f2:	2310      	movs	r3, #16
 801a3f4:	e7b0      	b.n	801a358 <_printf_i+0xfc>
 801a3f6:	6823      	ldr	r3, [r4, #0]
 801a3f8:	f043 0320 	orr.w	r3, r3, #32
 801a3fc:	6023      	str	r3, [r4, #0]
 801a3fe:	2378      	movs	r3, #120	; 0x78
 801a400:	4828      	ldr	r0, [pc, #160]	; (801a4a4 <_printf_i+0x248>)
 801a402:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801a406:	e7e3      	b.n	801a3d0 <_printf_i+0x174>
 801a408:	065e      	lsls	r6, r3, #25
 801a40a:	bf48      	it	mi
 801a40c:	b2ad      	uxthmi	r5, r5
 801a40e:	e7e6      	b.n	801a3de <_printf_i+0x182>
 801a410:	4616      	mov	r6, r2
 801a412:	e7bb      	b.n	801a38c <_printf_i+0x130>
 801a414:	680b      	ldr	r3, [r1, #0]
 801a416:	6826      	ldr	r6, [r4, #0]
 801a418:	6960      	ldr	r0, [r4, #20]
 801a41a:	1d1d      	adds	r5, r3, #4
 801a41c:	600d      	str	r5, [r1, #0]
 801a41e:	0635      	lsls	r5, r6, #24
 801a420:	681b      	ldr	r3, [r3, #0]
 801a422:	d501      	bpl.n	801a428 <_printf_i+0x1cc>
 801a424:	6018      	str	r0, [r3, #0]
 801a426:	e002      	b.n	801a42e <_printf_i+0x1d2>
 801a428:	0671      	lsls	r1, r6, #25
 801a42a:	d5fb      	bpl.n	801a424 <_printf_i+0x1c8>
 801a42c:	8018      	strh	r0, [r3, #0]
 801a42e:	2300      	movs	r3, #0
 801a430:	6123      	str	r3, [r4, #16]
 801a432:	4616      	mov	r6, r2
 801a434:	e7ba      	b.n	801a3ac <_printf_i+0x150>
 801a436:	680b      	ldr	r3, [r1, #0]
 801a438:	1d1a      	adds	r2, r3, #4
 801a43a:	600a      	str	r2, [r1, #0]
 801a43c:	681e      	ldr	r6, [r3, #0]
 801a43e:	6862      	ldr	r2, [r4, #4]
 801a440:	2100      	movs	r1, #0
 801a442:	4630      	mov	r0, r6
 801a444:	f7e9 ff5c 	bl	8004300 <memchr>
 801a448:	b108      	cbz	r0, 801a44e <_printf_i+0x1f2>
 801a44a:	1b80      	subs	r0, r0, r6
 801a44c:	6060      	str	r0, [r4, #4]
 801a44e:	6863      	ldr	r3, [r4, #4]
 801a450:	6123      	str	r3, [r4, #16]
 801a452:	2300      	movs	r3, #0
 801a454:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801a458:	e7a8      	b.n	801a3ac <_printf_i+0x150>
 801a45a:	6923      	ldr	r3, [r4, #16]
 801a45c:	4632      	mov	r2, r6
 801a45e:	4649      	mov	r1, r9
 801a460:	4640      	mov	r0, r8
 801a462:	47d0      	blx	sl
 801a464:	3001      	adds	r0, #1
 801a466:	d0ab      	beq.n	801a3c0 <_printf_i+0x164>
 801a468:	6823      	ldr	r3, [r4, #0]
 801a46a:	079b      	lsls	r3, r3, #30
 801a46c:	d413      	bmi.n	801a496 <_printf_i+0x23a>
 801a46e:	68e0      	ldr	r0, [r4, #12]
 801a470:	9b03      	ldr	r3, [sp, #12]
 801a472:	4298      	cmp	r0, r3
 801a474:	bfb8      	it	lt
 801a476:	4618      	movlt	r0, r3
 801a478:	e7a4      	b.n	801a3c4 <_printf_i+0x168>
 801a47a:	2301      	movs	r3, #1
 801a47c:	4632      	mov	r2, r6
 801a47e:	4649      	mov	r1, r9
 801a480:	4640      	mov	r0, r8
 801a482:	47d0      	blx	sl
 801a484:	3001      	adds	r0, #1
 801a486:	d09b      	beq.n	801a3c0 <_printf_i+0x164>
 801a488:	3501      	adds	r5, #1
 801a48a:	68e3      	ldr	r3, [r4, #12]
 801a48c:	9903      	ldr	r1, [sp, #12]
 801a48e:	1a5b      	subs	r3, r3, r1
 801a490:	42ab      	cmp	r3, r5
 801a492:	dcf2      	bgt.n	801a47a <_printf_i+0x21e>
 801a494:	e7eb      	b.n	801a46e <_printf_i+0x212>
 801a496:	2500      	movs	r5, #0
 801a498:	f104 0619 	add.w	r6, r4, #25
 801a49c:	e7f5      	b.n	801a48a <_printf_i+0x22e>
 801a49e:	bf00      	nop
 801a4a0:	08037800 	.word	0x08037800
 801a4a4:	08037811 	.word	0x08037811

0801a4a8 <iprintf>:
 801a4a8:	b40f      	push	{r0, r1, r2, r3}
 801a4aa:	4b0a      	ldr	r3, [pc, #40]	; (801a4d4 <iprintf+0x2c>)
 801a4ac:	b513      	push	{r0, r1, r4, lr}
 801a4ae:	681c      	ldr	r4, [r3, #0]
 801a4b0:	b124      	cbz	r4, 801a4bc <iprintf+0x14>
 801a4b2:	69a3      	ldr	r3, [r4, #24]
 801a4b4:	b913      	cbnz	r3, 801a4bc <iprintf+0x14>
 801a4b6:	4620      	mov	r0, r4
 801a4b8:	f7ff f978 	bl	80197ac <__sinit>
 801a4bc:	ab05      	add	r3, sp, #20
 801a4be:	9a04      	ldr	r2, [sp, #16]
 801a4c0:	68a1      	ldr	r1, [r4, #8]
 801a4c2:	9301      	str	r3, [sp, #4]
 801a4c4:	4620      	mov	r0, r4
 801a4c6:	f003 f977 	bl	801d7b8 <_vfiprintf_r>
 801a4ca:	b002      	add	sp, #8
 801a4cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a4d0:	b004      	add	sp, #16
 801a4d2:	4770      	bx	lr
 801a4d4:	20000884 	.word	0x20000884

0801a4d8 <_puts_r>:
 801a4d8:	b570      	push	{r4, r5, r6, lr}
 801a4da:	460e      	mov	r6, r1
 801a4dc:	4605      	mov	r5, r0
 801a4de:	b118      	cbz	r0, 801a4e8 <_puts_r+0x10>
 801a4e0:	6983      	ldr	r3, [r0, #24]
 801a4e2:	b90b      	cbnz	r3, 801a4e8 <_puts_r+0x10>
 801a4e4:	f7ff f962 	bl	80197ac <__sinit>
 801a4e8:	69ab      	ldr	r3, [r5, #24]
 801a4ea:	68ac      	ldr	r4, [r5, #8]
 801a4ec:	b913      	cbnz	r3, 801a4f4 <_puts_r+0x1c>
 801a4ee:	4628      	mov	r0, r5
 801a4f0:	f7ff f95c 	bl	80197ac <__sinit>
 801a4f4:	4b2c      	ldr	r3, [pc, #176]	; (801a5a8 <_puts_r+0xd0>)
 801a4f6:	429c      	cmp	r4, r3
 801a4f8:	d120      	bne.n	801a53c <_puts_r+0x64>
 801a4fa:	686c      	ldr	r4, [r5, #4]
 801a4fc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801a4fe:	07db      	lsls	r3, r3, #31
 801a500:	d405      	bmi.n	801a50e <_puts_r+0x36>
 801a502:	89a3      	ldrh	r3, [r4, #12]
 801a504:	0598      	lsls	r0, r3, #22
 801a506:	d402      	bmi.n	801a50e <_puts_r+0x36>
 801a508:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a50a:	f7ff fa12 	bl	8019932 <__retarget_lock_acquire_recursive>
 801a50e:	89a3      	ldrh	r3, [r4, #12]
 801a510:	0719      	lsls	r1, r3, #28
 801a512:	d51d      	bpl.n	801a550 <_puts_r+0x78>
 801a514:	6923      	ldr	r3, [r4, #16]
 801a516:	b1db      	cbz	r3, 801a550 <_puts_r+0x78>
 801a518:	3e01      	subs	r6, #1
 801a51a:	68a3      	ldr	r3, [r4, #8]
 801a51c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801a520:	3b01      	subs	r3, #1
 801a522:	60a3      	str	r3, [r4, #8]
 801a524:	bb39      	cbnz	r1, 801a576 <_puts_r+0x9e>
 801a526:	2b00      	cmp	r3, #0
 801a528:	da38      	bge.n	801a59c <_puts_r+0xc4>
 801a52a:	4622      	mov	r2, r4
 801a52c:	210a      	movs	r1, #10
 801a52e:	4628      	mov	r0, r5
 801a530:	f000 ffaa 	bl	801b488 <__swbuf_r>
 801a534:	3001      	adds	r0, #1
 801a536:	d011      	beq.n	801a55c <_puts_r+0x84>
 801a538:	250a      	movs	r5, #10
 801a53a:	e011      	b.n	801a560 <_puts_r+0x88>
 801a53c:	4b1b      	ldr	r3, [pc, #108]	; (801a5ac <_puts_r+0xd4>)
 801a53e:	429c      	cmp	r4, r3
 801a540:	d101      	bne.n	801a546 <_puts_r+0x6e>
 801a542:	68ac      	ldr	r4, [r5, #8]
 801a544:	e7da      	b.n	801a4fc <_puts_r+0x24>
 801a546:	4b1a      	ldr	r3, [pc, #104]	; (801a5b0 <_puts_r+0xd8>)
 801a548:	429c      	cmp	r4, r3
 801a54a:	bf08      	it	eq
 801a54c:	68ec      	ldreq	r4, [r5, #12]
 801a54e:	e7d5      	b.n	801a4fc <_puts_r+0x24>
 801a550:	4621      	mov	r1, r4
 801a552:	4628      	mov	r0, r5
 801a554:	f000 fffc 	bl	801b550 <__swsetup_r>
 801a558:	2800      	cmp	r0, #0
 801a55a:	d0dd      	beq.n	801a518 <_puts_r+0x40>
 801a55c:	f04f 35ff 	mov.w	r5, #4294967295
 801a560:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801a562:	07da      	lsls	r2, r3, #31
 801a564:	d405      	bmi.n	801a572 <_puts_r+0x9a>
 801a566:	89a3      	ldrh	r3, [r4, #12]
 801a568:	059b      	lsls	r3, r3, #22
 801a56a:	d402      	bmi.n	801a572 <_puts_r+0x9a>
 801a56c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a56e:	f7ff f9e1 	bl	8019934 <__retarget_lock_release_recursive>
 801a572:	4628      	mov	r0, r5
 801a574:	bd70      	pop	{r4, r5, r6, pc}
 801a576:	2b00      	cmp	r3, #0
 801a578:	da04      	bge.n	801a584 <_puts_r+0xac>
 801a57a:	69a2      	ldr	r2, [r4, #24]
 801a57c:	429a      	cmp	r2, r3
 801a57e:	dc06      	bgt.n	801a58e <_puts_r+0xb6>
 801a580:	290a      	cmp	r1, #10
 801a582:	d004      	beq.n	801a58e <_puts_r+0xb6>
 801a584:	6823      	ldr	r3, [r4, #0]
 801a586:	1c5a      	adds	r2, r3, #1
 801a588:	6022      	str	r2, [r4, #0]
 801a58a:	7019      	strb	r1, [r3, #0]
 801a58c:	e7c5      	b.n	801a51a <_puts_r+0x42>
 801a58e:	4622      	mov	r2, r4
 801a590:	4628      	mov	r0, r5
 801a592:	f000 ff79 	bl	801b488 <__swbuf_r>
 801a596:	3001      	adds	r0, #1
 801a598:	d1bf      	bne.n	801a51a <_puts_r+0x42>
 801a59a:	e7df      	b.n	801a55c <_puts_r+0x84>
 801a59c:	6823      	ldr	r3, [r4, #0]
 801a59e:	250a      	movs	r5, #10
 801a5a0:	1c5a      	adds	r2, r3, #1
 801a5a2:	6022      	str	r2, [r4, #0]
 801a5a4:	701d      	strb	r5, [r3, #0]
 801a5a6:	e7db      	b.n	801a560 <_puts_r+0x88>
 801a5a8:	080377ac 	.word	0x080377ac
 801a5ac:	080377cc 	.word	0x080377cc
 801a5b0:	0803778c 	.word	0x0803778c

0801a5b4 <puts>:
 801a5b4:	4b02      	ldr	r3, [pc, #8]	; (801a5c0 <puts+0xc>)
 801a5b6:	4601      	mov	r1, r0
 801a5b8:	6818      	ldr	r0, [r3, #0]
 801a5ba:	f7ff bf8d 	b.w	801a4d8 <_puts_r>
 801a5be:	bf00      	nop
 801a5c0:	20000884 	.word	0x20000884

0801a5c4 <realloc>:
 801a5c4:	4b02      	ldr	r3, [pc, #8]	; (801a5d0 <realloc+0xc>)
 801a5c6:	460a      	mov	r2, r1
 801a5c8:	4601      	mov	r1, r0
 801a5ca:	6818      	ldr	r0, [r3, #0]
 801a5cc:	f002 bf48 	b.w	801d460 <_realloc_r>
 801a5d0:	20000884 	.word	0x20000884

0801a5d4 <_sbrk_r>:
 801a5d4:	b538      	push	{r3, r4, r5, lr}
 801a5d6:	4d06      	ldr	r5, [pc, #24]	; (801a5f0 <_sbrk_r+0x1c>)
 801a5d8:	2300      	movs	r3, #0
 801a5da:	4604      	mov	r4, r0
 801a5dc:	4608      	mov	r0, r1
 801a5de:	602b      	str	r3, [r5, #0]
 801a5e0:	f7f6 fdb8 	bl	8011154 <_sbrk>
 801a5e4:	1c43      	adds	r3, r0, #1
 801a5e6:	d102      	bne.n	801a5ee <_sbrk_r+0x1a>
 801a5e8:	682b      	ldr	r3, [r5, #0]
 801a5ea:	b103      	cbz	r3, 801a5ee <_sbrk_r+0x1a>
 801a5ec:	6023      	str	r3, [r4, #0]
 801a5ee:	bd38      	pop	{r3, r4, r5, pc}
 801a5f0:	2000c028 	.word	0x2000c028

0801a5f4 <siprintf>:
 801a5f4:	b40e      	push	{r1, r2, r3}
 801a5f6:	b500      	push	{lr}
 801a5f8:	b09c      	sub	sp, #112	; 0x70
 801a5fa:	ab1d      	add	r3, sp, #116	; 0x74
 801a5fc:	9002      	str	r0, [sp, #8]
 801a5fe:	9006      	str	r0, [sp, #24]
 801a600:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801a604:	4809      	ldr	r0, [pc, #36]	; (801a62c <siprintf+0x38>)
 801a606:	9107      	str	r1, [sp, #28]
 801a608:	9104      	str	r1, [sp, #16]
 801a60a:	4909      	ldr	r1, [pc, #36]	; (801a630 <siprintf+0x3c>)
 801a60c:	f853 2b04 	ldr.w	r2, [r3], #4
 801a610:	9105      	str	r1, [sp, #20]
 801a612:	6800      	ldr	r0, [r0, #0]
 801a614:	9301      	str	r3, [sp, #4]
 801a616:	a902      	add	r1, sp, #8
 801a618:	f002 ffa4 	bl	801d564 <_svfiprintf_r>
 801a61c:	9b02      	ldr	r3, [sp, #8]
 801a61e:	2200      	movs	r2, #0
 801a620:	701a      	strb	r2, [r3, #0]
 801a622:	b01c      	add	sp, #112	; 0x70
 801a624:	f85d eb04 	ldr.w	lr, [sp], #4
 801a628:	b003      	add	sp, #12
 801a62a:	4770      	bx	lr
 801a62c:	20000884 	.word	0x20000884
 801a630:	ffff0208 	.word	0xffff0208

0801a634 <__sread>:
 801a634:	b510      	push	{r4, lr}
 801a636:	460c      	mov	r4, r1
 801a638:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a63c:	f003 f9ec 	bl	801da18 <_read_r>
 801a640:	2800      	cmp	r0, #0
 801a642:	bfab      	itete	ge
 801a644:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801a646:	89a3      	ldrhlt	r3, [r4, #12]
 801a648:	181b      	addge	r3, r3, r0
 801a64a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801a64e:	bfac      	ite	ge
 801a650:	6563      	strge	r3, [r4, #84]	; 0x54
 801a652:	81a3      	strhlt	r3, [r4, #12]
 801a654:	bd10      	pop	{r4, pc}

0801a656 <__swrite>:
 801a656:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a65a:	461f      	mov	r7, r3
 801a65c:	898b      	ldrh	r3, [r1, #12]
 801a65e:	05db      	lsls	r3, r3, #23
 801a660:	4605      	mov	r5, r0
 801a662:	460c      	mov	r4, r1
 801a664:	4616      	mov	r6, r2
 801a666:	d505      	bpl.n	801a674 <__swrite+0x1e>
 801a668:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a66c:	2302      	movs	r3, #2
 801a66e:	2200      	movs	r2, #0
 801a670:	f002 f9fc 	bl	801ca6c <_lseek_r>
 801a674:	89a3      	ldrh	r3, [r4, #12]
 801a676:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801a67a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801a67e:	81a3      	strh	r3, [r4, #12]
 801a680:	4632      	mov	r2, r6
 801a682:	463b      	mov	r3, r7
 801a684:	4628      	mov	r0, r5
 801a686:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a68a:	f000 bf4f 	b.w	801b52c <_write_r>

0801a68e <__sseek>:
 801a68e:	b510      	push	{r4, lr}
 801a690:	460c      	mov	r4, r1
 801a692:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a696:	f002 f9e9 	bl	801ca6c <_lseek_r>
 801a69a:	1c43      	adds	r3, r0, #1
 801a69c:	89a3      	ldrh	r3, [r4, #12]
 801a69e:	bf15      	itete	ne
 801a6a0:	6560      	strne	r0, [r4, #84]	; 0x54
 801a6a2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801a6a6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801a6aa:	81a3      	strheq	r3, [r4, #12]
 801a6ac:	bf18      	it	ne
 801a6ae:	81a3      	strhne	r3, [r4, #12]
 801a6b0:	bd10      	pop	{r4, pc}

0801a6b2 <__sclose>:
 801a6b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a6b6:	f000 bfb9 	b.w	801b62c <_close_r>

0801a6ba <strchr>:
 801a6ba:	b2c9      	uxtb	r1, r1
 801a6bc:	4603      	mov	r3, r0
 801a6be:	f810 2b01 	ldrb.w	r2, [r0], #1
 801a6c2:	b11a      	cbz	r2, 801a6cc <strchr+0x12>
 801a6c4:	428a      	cmp	r2, r1
 801a6c6:	d1f9      	bne.n	801a6bc <strchr+0x2>
 801a6c8:	4618      	mov	r0, r3
 801a6ca:	4770      	bx	lr
 801a6cc:	2900      	cmp	r1, #0
 801a6ce:	bf18      	it	ne
 801a6d0:	2300      	movne	r3, #0
 801a6d2:	e7f9      	b.n	801a6c8 <strchr+0xe>

0801a6d4 <strcpy>:
 801a6d4:	4603      	mov	r3, r0
 801a6d6:	f811 2b01 	ldrb.w	r2, [r1], #1
 801a6da:	f803 2b01 	strb.w	r2, [r3], #1
 801a6de:	2a00      	cmp	r2, #0
 801a6e0:	d1f9      	bne.n	801a6d6 <strcpy+0x2>
 801a6e2:	4770      	bx	lr

0801a6e4 <strncmp>:
 801a6e4:	b510      	push	{r4, lr}
 801a6e6:	b16a      	cbz	r2, 801a704 <strncmp+0x20>
 801a6e8:	3901      	subs	r1, #1
 801a6ea:	1884      	adds	r4, r0, r2
 801a6ec:	f810 3b01 	ldrb.w	r3, [r0], #1
 801a6f0:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801a6f4:	4293      	cmp	r3, r2
 801a6f6:	d103      	bne.n	801a700 <strncmp+0x1c>
 801a6f8:	42a0      	cmp	r0, r4
 801a6fa:	d001      	beq.n	801a700 <strncmp+0x1c>
 801a6fc:	2b00      	cmp	r3, #0
 801a6fe:	d1f5      	bne.n	801a6ec <strncmp+0x8>
 801a700:	1a98      	subs	r0, r3, r2
 801a702:	bd10      	pop	{r4, pc}
 801a704:	4610      	mov	r0, r2
 801a706:	e7fc      	b.n	801a702 <strncmp+0x1e>

0801a708 <sulp>:
 801a708:	b570      	push	{r4, r5, r6, lr}
 801a70a:	4604      	mov	r4, r0
 801a70c:	460d      	mov	r5, r1
 801a70e:	ec45 4b10 	vmov	d0, r4, r5
 801a712:	4616      	mov	r6, r2
 801a714:	f002 fd46 	bl	801d1a4 <__ulp>
 801a718:	ec51 0b10 	vmov	r0, r1, d0
 801a71c:	b17e      	cbz	r6, 801a73e <sulp+0x36>
 801a71e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 801a722:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801a726:	2b00      	cmp	r3, #0
 801a728:	dd09      	ble.n	801a73e <sulp+0x36>
 801a72a:	051b      	lsls	r3, r3, #20
 801a72c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 801a730:	2400      	movs	r4, #0
 801a732:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 801a736:	4622      	mov	r2, r4
 801a738:	462b      	mov	r3, r5
 801a73a:	f7e9 ffed 	bl	8004718 <__aeabi_dmul>
 801a73e:	bd70      	pop	{r4, r5, r6, pc}

0801a740 <_strtod_l>:
 801a740:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a744:	b0a3      	sub	sp, #140	; 0x8c
 801a746:	461f      	mov	r7, r3
 801a748:	2300      	movs	r3, #0
 801a74a:	931e      	str	r3, [sp, #120]	; 0x78
 801a74c:	4ba4      	ldr	r3, [pc, #656]	; (801a9e0 <_strtod_l+0x2a0>)
 801a74e:	9219      	str	r2, [sp, #100]	; 0x64
 801a750:	681b      	ldr	r3, [r3, #0]
 801a752:	9307      	str	r3, [sp, #28]
 801a754:	4604      	mov	r4, r0
 801a756:	4618      	mov	r0, r3
 801a758:	4688      	mov	r8, r1
 801a75a:	f7e9 fdc3 	bl	80042e4 <strlen>
 801a75e:	f04f 0a00 	mov.w	sl, #0
 801a762:	4605      	mov	r5, r0
 801a764:	f04f 0b00 	mov.w	fp, #0
 801a768:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 801a76c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801a76e:	781a      	ldrb	r2, [r3, #0]
 801a770:	2a2b      	cmp	r2, #43	; 0x2b
 801a772:	d04c      	beq.n	801a80e <_strtod_l+0xce>
 801a774:	d839      	bhi.n	801a7ea <_strtod_l+0xaa>
 801a776:	2a0d      	cmp	r2, #13
 801a778:	d832      	bhi.n	801a7e0 <_strtod_l+0xa0>
 801a77a:	2a08      	cmp	r2, #8
 801a77c:	d832      	bhi.n	801a7e4 <_strtod_l+0xa4>
 801a77e:	2a00      	cmp	r2, #0
 801a780:	d03c      	beq.n	801a7fc <_strtod_l+0xbc>
 801a782:	2300      	movs	r3, #0
 801a784:	930e      	str	r3, [sp, #56]	; 0x38
 801a786:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 801a788:	7833      	ldrb	r3, [r6, #0]
 801a78a:	2b30      	cmp	r3, #48	; 0x30
 801a78c:	f040 80b4 	bne.w	801a8f8 <_strtod_l+0x1b8>
 801a790:	7873      	ldrb	r3, [r6, #1]
 801a792:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801a796:	2b58      	cmp	r3, #88	; 0x58
 801a798:	d16c      	bne.n	801a874 <_strtod_l+0x134>
 801a79a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801a79c:	9301      	str	r3, [sp, #4]
 801a79e:	ab1e      	add	r3, sp, #120	; 0x78
 801a7a0:	9702      	str	r7, [sp, #8]
 801a7a2:	9300      	str	r3, [sp, #0]
 801a7a4:	4a8f      	ldr	r2, [pc, #572]	; (801a9e4 <_strtod_l+0x2a4>)
 801a7a6:	ab1f      	add	r3, sp, #124	; 0x7c
 801a7a8:	a91d      	add	r1, sp, #116	; 0x74
 801a7aa:	4620      	mov	r0, r4
 801a7ac:	f001 fe42 	bl	801c434 <__gethex>
 801a7b0:	f010 0707 	ands.w	r7, r0, #7
 801a7b4:	4605      	mov	r5, r0
 801a7b6:	d005      	beq.n	801a7c4 <_strtod_l+0x84>
 801a7b8:	2f06      	cmp	r7, #6
 801a7ba:	d12a      	bne.n	801a812 <_strtod_l+0xd2>
 801a7bc:	3601      	adds	r6, #1
 801a7be:	2300      	movs	r3, #0
 801a7c0:	961d      	str	r6, [sp, #116]	; 0x74
 801a7c2:	930e      	str	r3, [sp, #56]	; 0x38
 801a7c4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801a7c6:	2b00      	cmp	r3, #0
 801a7c8:	f040 8596 	bne.w	801b2f8 <_strtod_l+0xbb8>
 801a7cc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801a7ce:	b1db      	cbz	r3, 801a808 <_strtod_l+0xc8>
 801a7d0:	4652      	mov	r2, sl
 801a7d2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 801a7d6:	ec43 2b10 	vmov	d0, r2, r3
 801a7da:	b023      	add	sp, #140	; 0x8c
 801a7dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a7e0:	2a20      	cmp	r2, #32
 801a7e2:	d1ce      	bne.n	801a782 <_strtod_l+0x42>
 801a7e4:	3301      	adds	r3, #1
 801a7e6:	931d      	str	r3, [sp, #116]	; 0x74
 801a7e8:	e7c0      	b.n	801a76c <_strtod_l+0x2c>
 801a7ea:	2a2d      	cmp	r2, #45	; 0x2d
 801a7ec:	d1c9      	bne.n	801a782 <_strtod_l+0x42>
 801a7ee:	2201      	movs	r2, #1
 801a7f0:	920e      	str	r2, [sp, #56]	; 0x38
 801a7f2:	1c5a      	adds	r2, r3, #1
 801a7f4:	921d      	str	r2, [sp, #116]	; 0x74
 801a7f6:	785b      	ldrb	r3, [r3, #1]
 801a7f8:	2b00      	cmp	r3, #0
 801a7fa:	d1c4      	bne.n	801a786 <_strtod_l+0x46>
 801a7fc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801a7fe:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 801a802:	2b00      	cmp	r3, #0
 801a804:	f040 8576 	bne.w	801b2f4 <_strtod_l+0xbb4>
 801a808:	4652      	mov	r2, sl
 801a80a:	465b      	mov	r3, fp
 801a80c:	e7e3      	b.n	801a7d6 <_strtod_l+0x96>
 801a80e:	2200      	movs	r2, #0
 801a810:	e7ee      	b.n	801a7f0 <_strtod_l+0xb0>
 801a812:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801a814:	b13a      	cbz	r2, 801a826 <_strtod_l+0xe6>
 801a816:	2135      	movs	r1, #53	; 0x35
 801a818:	a820      	add	r0, sp, #128	; 0x80
 801a81a:	f002 fdce 	bl	801d3ba <__copybits>
 801a81e:	991e      	ldr	r1, [sp, #120]	; 0x78
 801a820:	4620      	mov	r0, r4
 801a822:	f002 f993 	bl	801cb4c <_Bfree>
 801a826:	3f01      	subs	r7, #1
 801a828:	2f05      	cmp	r7, #5
 801a82a:	d807      	bhi.n	801a83c <_strtod_l+0xfc>
 801a82c:	e8df f007 	tbb	[pc, r7]
 801a830:	1d180b0e 	.word	0x1d180b0e
 801a834:	030e      	.short	0x030e
 801a836:	f04f 0b00 	mov.w	fp, #0
 801a83a:	46da      	mov	sl, fp
 801a83c:	0728      	lsls	r0, r5, #28
 801a83e:	d5c1      	bpl.n	801a7c4 <_strtod_l+0x84>
 801a840:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 801a844:	e7be      	b.n	801a7c4 <_strtod_l+0x84>
 801a846:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 801a84a:	e7f7      	b.n	801a83c <_strtod_l+0xfc>
 801a84c:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 801a850:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 801a852:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 801a856:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801a85a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 801a85e:	e7ed      	b.n	801a83c <_strtod_l+0xfc>
 801a860:	f8df b184 	ldr.w	fp, [pc, #388]	; 801a9e8 <_strtod_l+0x2a8>
 801a864:	f04f 0a00 	mov.w	sl, #0
 801a868:	e7e8      	b.n	801a83c <_strtod_l+0xfc>
 801a86a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 801a86e:	f04f 3aff 	mov.w	sl, #4294967295
 801a872:	e7e3      	b.n	801a83c <_strtod_l+0xfc>
 801a874:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801a876:	1c5a      	adds	r2, r3, #1
 801a878:	921d      	str	r2, [sp, #116]	; 0x74
 801a87a:	785b      	ldrb	r3, [r3, #1]
 801a87c:	2b30      	cmp	r3, #48	; 0x30
 801a87e:	d0f9      	beq.n	801a874 <_strtod_l+0x134>
 801a880:	2b00      	cmp	r3, #0
 801a882:	d09f      	beq.n	801a7c4 <_strtod_l+0x84>
 801a884:	2301      	movs	r3, #1
 801a886:	f04f 0900 	mov.w	r9, #0
 801a88a:	9304      	str	r3, [sp, #16]
 801a88c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801a88e:	930a      	str	r3, [sp, #40]	; 0x28
 801a890:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 801a894:	464f      	mov	r7, r9
 801a896:	220a      	movs	r2, #10
 801a898:	981d      	ldr	r0, [sp, #116]	; 0x74
 801a89a:	7806      	ldrb	r6, [r0, #0]
 801a89c:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 801a8a0:	b2d9      	uxtb	r1, r3
 801a8a2:	2909      	cmp	r1, #9
 801a8a4:	d92a      	bls.n	801a8fc <_strtod_l+0x1bc>
 801a8a6:	9907      	ldr	r1, [sp, #28]
 801a8a8:	462a      	mov	r2, r5
 801a8aa:	f7ff ff1b 	bl	801a6e4 <strncmp>
 801a8ae:	b398      	cbz	r0, 801a918 <_strtod_l+0x1d8>
 801a8b0:	2000      	movs	r0, #0
 801a8b2:	4633      	mov	r3, r6
 801a8b4:	463d      	mov	r5, r7
 801a8b6:	9007      	str	r0, [sp, #28]
 801a8b8:	4602      	mov	r2, r0
 801a8ba:	2b65      	cmp	r3, #101	; 0x65
 801a8bc:	d001      	beq.n	801a8c2 <_strtod_l+0x182>
 801a8be:	2b45      	cmp	r3, #69	; 0x45
 801a8c0:	d118      	bne.n	801a8f4 <_strtod_l+0x1b4>
 801a8c2:	b91d      	cbnz	r5, 801a8cc <_strtod_l+0x18c>
 801a8c4:	9b04      	ldr	r3, [sp, #16]
 801a8c6:	4303      	orrs	r3, r0
 801a8c8:	d098      	beq.n	801a7fc <_strtod_l+0xbc>
 801a8ca:	2500      	movs	r5, #0
 801a8cc:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 801a8d0:	f108 0301 	add.w	r3, r8, #1
 801a8d4:	931d      	str	r3, [sp, #116]	; 0x74
 801a8d6:	f898 3001 	ldrb.w	r3, [r8, #1]
 801a8da:	2b2b      	cmp	r3, #43	; 0x2b
 801a8dc:	d075      	beq.n	801a9ca <_strtod_l+0x28a>
 801a8de:	2b2d      	cmp	r3, #45	; 0x2d
 801a8e0:	d07b      	beq.n	801a9da <_strtod_l+0x29a>
 801a8e2:	f04f 0c00 	mov.w	ip, #0
 801a8e6:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 801a8ea:	2909      	cmp	r1, #9
 801a8ec:	f240 8082 	bls.w	801a9f4 <_strtod_l+0x2b4>
 801a8f0:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 801a8f4:	2600      	movs	r6, #0
 801a8f6:	e09d      	b.n	801aa34 <_strtod_l+0x2f4>
 801a8f8:	2300      	movs	r3, #0
 801a8fa:	e7c4      	b.n	801a886 <_strtod_l+0x146>
 801a8fc:	2f08      	cmp	r7, #8
 801a8fe:	bfd8      	it	le
 801a900:	9909      	ldrle	r1, [sp, #36]	; 0x24
 801a902:	f100 0001 	add.w	r0, r0, #1
 801a906:	bfda      	itte	le
 801a908:	fb02 3301 	mlale	r3, r2, r1, r3
 801a90c:	9309      	strle	r3, [sp, #36]	; 0x24
 801a90e:	fb02 3909 	mlagt	r9, r2, r9, r3
 801a912:	3701      	adds	r7, #1
 801a914:	901d      	str	r0, [sp, #116]	; 0x74
 801a916:	e7bf      	b.n	801a898 <_strtod_l+0x158>
 801a918:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801a91a:	195a      	adds	r2, r3, r5
 801a91c:	921d      	str	r2, [sp, #116]	; 0x74
 801a91e:	5d5b      	ldrb	r3, [r3, r5]
 801a920:	2f00      	cmp	r7, #0
 801a922:	d037      	beq.n	801a994 <_strtod_l+0x254>
 801a924:	9007      	str	r0, [sp, #28]
 801a926:	463d      	mov	r5, r7
 801a928:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 801a92c:	2a09      	cmp	r2, #9
 801a92e:	d912      	bls.n	801a956 <_strtod_l+0x216>
 801a930:	2201      	movs	r2, #1
 801a932:	e7c2      	b.n	801a8ba <_strtod_l+0x17a>
 801a934:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801a936:	1c5a      	adds	r2, r3, #1
 801a938:	921d      	str	r2, [sp, #116]	; 0x74
 801a93a:	785b      	ldrb	r3, [r3, #1]
 801a93c:	3001      	adds	r0, #1
 801a93e:	2b30      	cmp	r3, #48	; 0x30
 801a940:	d0f8      	beq.n	801a934 <_strtod_l+0x1f4>
 801a942:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 801a946:	2a08      	cmp	r2, #8
 801a948:	f200 84db 	bhi.w	801b302 <_strtod_l+0xbc2>
 801a94c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801a94e:	9007      	str	r0, [sp, #28]
 801a950:	2000      	movs	r0, #0
 801a952:	920a      	str	r2, [sp, #40]	; 0x28
 801a954:	4605      	mov	r5, r0
 801a956:	3b30      	subs	r3, #48	; 0x30
 801a958:	f100 0201 	add.w	r2, r0, #1
 801a95c:	d014      	beq.n	801a988 <_strtod_l+0x248>
 801a95e:	9907      	ldr	r1, [sp, #28]
 801a960:	4411      	add	r1, r2
 801a962:	9107      	str	r1, [sp, #28]
 801a964:	462a      	mov	r2, r5
 801a966:	eb00 0e05 	add.w	lr, r0, r5
 801a96a:	210a      	movs	r1, #10
 801a96c:	4572      	cmp	r2, lr
 801a96e:	d113      	bne.n	801a998 <_strtod_l+0x258>
 801a970:	182a      	adds	r2, r5, r0
 801a972:	2a08      	cmp	r2, #8
 801a974:	f105 0501 	add.w	r5, r5, #1
 801a978:	4405      	add	r5, r0
 801a97a:	dc1c      	bgt.n	801a9b6 <_strtod_l+0x276>
 801a97c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801a97e:	220a      	movs	r2, #10
 801a980:	fb02 3301 	mla	r3, r2, r1, r3
 801a984:	9309      	str	r3, [sp, #36]	; 0x24
 801a986:	2200      	movs	r2, #0
 801a988:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801a98a:	1c59      	adds	r1, r3, #1
 801a98c:	911d      	str	r1, [sp, #116]	; 0x74
 801a98e:	785b      	ldrb	r3, [r3, #1]
 801a990:	4610      	mov	r0, r2
 801a992:	e7c9      	b.n	801a928 <_strtod_l+0x1e8>
 801a994:	4638      	mov	r0, r7
 801a996:	e7d2      	b.n	801a93e <_strtod_l+0x1fe>
 801a998:	2a08      	cmp	r2, #8
 801a99a:	dc04      	bgt.n	801a9a6 <_strtod_l+0x266>
 801a99c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 801a99e:	434e      	muls	r6, r1
 801a9a0:	9609      	str	r6, [sp, #36]	; 0x24
 801a9a2:	3201      	adds	r2, #1
 801a9a4:	e7e2      	b.n	801a96c <_strtod_l+0x22c>
 801a9a6:	f102 0c01 	add.w	ip, r2, #1
 801a9aa:	f1bc 0f10 	cmp.w	ip, #16
 801a9ae:	bfd8      	it	le
 801a9b0:	fb01 f909 	mulle.w	r9, r1, r9
 801a9b4:	e7f5      	b.n	801a9a2 <_strtod_l+0x262>
 801a9b6:	2d10      	cmp	r5, #16
 801a9b8:	bfdc      	itt	le
 801a9ba:	220a      	movle	r2, #10
 801a9bc:	fb02 3909 	mlale	r9, r2, r9, r3
 801a9c0:	e7e1      	b.n	801a986 <_strtod_l+0x246>
 801a9c2:	2300      	movs	r3, #0
 801a9c4:	9307      	str	r3, [sp, #28]
 801a9c6:	2201      	movs	r2, #1
 801a9c8:	e77c      	b.n	801a8c4 <_strtod_l+0x184>
 801a9ca:	f04f 0c00 	mov.w	ip, #0
 801a9ce:	f108 0302 	add.w	r3, r8, #2
 801a9d2:	931d      	str	r3, [sp, #116]	; 0x74
 801a9d4:	f898 3002 	ldrb.w	r3, [r8, #2]
 801a9d8:	e785      	b.n	801a8e6 <_strtod_l+0x1a6>
 801a9da:	f04f 0c01 	mov.w	ip, #1
 801a9de:	e7f6      	b.n	801a9ce <_strtod_l+0x28e>
 801a9e0:	08037978 	.word	0x08037978
 801a9e4:	08037824 	.word	0x08037824
 801a9e8:	7ff00000 	.word	0x7ff00000
 801a9ec:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801a9ee:	1c59      	adds	r1, r3, #1
 801a9f0:	911d      	str	r1, [sp, #116]	; 0x74
 801a9f2:	785b      	ldrb	r3, [r3, #1]
 801a9f4:	2b30      	cmp	r3, #48	; 0x30
 801a9f6:	d0f9      	beq.n	801a9ec <_strtod_l+0x2ac>
 801a9f8:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 801a9fc:	2908      	cmp	r1, #8
 801a9fe:	f63f af79 	bhi.w	801a8f4 <_strtod_l+0x1b4>
 801aa02:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 801aa06:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801aa08:	9308      	str	r3, [sp, #32]
 801aa0a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801aa0c:	1c59      	adds	r1, r3, #1
 801aa0e:	911d      	str	r1, [sp, #116]	; 0x74
 801aa10:	785b      	ldrb	r3, [r3, #1]
 801aa12:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 801aa16:	2e09      	cmp	r6, #9
 801aa18:	d937      	bls.n	801aa8a <_strtod_l+0x34a>
 801aa1a:	9e08      	ldr	r6, [sp, #32]
 801aa1c:	1b89      	subs	r1, r1, r6
 801aa1e:	2908      	cmp	r1, #8
 801aa20:	f644 661f 	movw	r6, #19999	; 0x4e1f
 801aa24:	dc02      	bgt.n	801aa2c <_strtod_l+0x2ec>
 801aa26:	4576      	cmp	r6, lr
 801aa28:	bfa8      	it	ge
 801aa2a:	4676      	movge	r6, lr
 801aa2c:	f1bc 0f00 	cmp.w	ip, #0
 801aa30:	d000      	beq.n	801aa34 <_strtod_l+0x2f4>
 801aa32:	4276      	negs	r6, r6
 801aa34:	2d00      	cmp	r5, #0
 801aa36:	d14f      	bne.n	801aad8 <_strtod_l+0x398>
 801aa38:	9904      	ldr	r1, [sp, #16]
 801aa3a:	4301      	orrs	r1, r0
 801aa3c:	f47f aec2 	bne.w	801a7c4 <_strtod_l+0x84>
 801aa40:	2a00      	cmp	r2, #0
 801aa42:	f47f aedb 	bne.w	801a7fc <_strtod_l+0xbc>
 801aa46:	2b69      	cmp	r3, #105	; 0x69
 801aa48:	d027      	beq.n	801aa9a <_strtod_l+0x35a>
 801aa4a:	dc24      	bgt.n	801aa96 <_strtod_l+0x356>
 801aa4c:	2b49      	cmp	r3, #73	; 0x49
 801aa4e:	d024      	beq.n	801aa9a <_strtod_l+0x35a>
 801aa50:	2b4e      	cmp	r3, #78	; 0x4e
 801aa52:	f47f aed3 	bne.w	801a7fc <_strtod_l+0xbc>
 801aa56:	499e      	ldr	r1, [pc, #632]	; (801acd0 <_strtod_l+0x590>)
 801aa58:	a81d      	add	r0, sp, #116	; 0x74
 801aa5a:	f001 ff43 	bl	801c8e4 <__match>
 801aa5e:	2800      	cmp	r0, #0
 801aa60:	f43f aecc 	beq.w	801a7fc <_strtod_l+0xbc>
 801aa64:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801aa66:	781b      	ldrb	r3, [r3, #0]
 801aa68:	2b28      	cmp	r3, #40	; 0x28
 801aa6a:	d12d      	bne.n	801aac8 <_strtod_l+0x388>
 801aa6c:	4999      	ldr	r1, [pc, #612]	; (801acd4 <_strtod_l+0x594>)
 801aa6e:	aa20      	add	r2, sp, #128	; 0x80
 801aa70:	a81d      	add	r0, sp, #116	; 0x74
 801aa72:	f001 ff4b 	bl	801c90c <__hexnan>
 801aa76:	2805      	cmp	r0, #5
 801aa78:	d126      	bne.n	801aac8 <_strtod_l+0x388>
 801aa7a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801aa7c:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 801aa80:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 801aa84:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 801aa88:	e69c      	b.n	801a7c4 <_strtod_l+0x84>
 801aa8a:	210a      	movs	r1, #10
 801aa8c:	fb01 3e0e 	mla	lr, r1, lr, r3
 801aa90:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 801aa94:	e7b9      	b.n	801aa0a <_strtod_l+0x2ca>
 801aa96:	2b6e      	cmp	r3, #110	; 0x6e
 801aa98:	e7db      	b.n	801aa52 <_strtod_l+0x312>
 801aa9a:	498f      	ldr	r1, [pc, #572]	; (801acd8 <_strtod_l+0x598>)
 801aa9c:	a81d      	add	r0, sp, #116	; 0x74
 801aa9e:	f001 ff21 	bl	801c8e4 <__match>
 801aaa2:	2800      	cmp	r0, #0
 801aaa4:	f43f aeaa 	beq.w	801a7fc <_strtod_l+0xbc>
 801aaa8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801aaaa:	498c      	ldr	r1, [pc, #560]	; (801acdc <_strtod_l+0x59c>)
 801aaac:	3b01      	subs	r3, #1
 801aaae:	a81d      	add	r0, sp, #116	; 0x74
 801aab0:	931d      	str	r3, [sp, #116]	; 0x74
 801aab2:	f001 ff17 	bl	801c8e4 <__match>
 801aab6:	b910      	cbnz	r0, 801aabe <_strtod_l+0x37e>
 801aab8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801aaba:	3301      	adds	r3, #1
 801aabc:	931d      	str	r3, [sp, #116]	; 0x74
 801aabe:	f8df b22c 	ldr.w	fp, [pc, #556]	; 801acec <_strtod_l+0x5ac>
 801aac2:	f04f 0a00 	mov.w	sl, #0
 801aac6:	e67d      	b.n	801a7c4 <_strtod_l+0x84>
 801aac8:	4885      	ldr	r0, [pc, #532]	; (801ace0 <_strtod_l+0x5a0>)
 801aaca:	f002 ffb9 	bl	801da40 <nan>
 801aace:	ed8d 0b04 	vstr	d0, [sp, #16]
 801aad2:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 801aad6:	e675      	b.n	801a7c4 <_strtod_l+0x84>
 801aad8:	9b07      	ldr	r3, [sp, #28]
 801aada:	9809      	ldr	r0, [sp, #36]	; 0x24
 801aadc:	1af3      	subs	r3, r6, r3
 801aade:	2f00      	cmp	r7, #0
 801aae0:	bf08      	it	eq
 801aae2:	462f      	moveq	r7, r5
 801aae4:	2d10      	cmp	r5, #16
 801aae6:	9308      	str	r3, [sp, #32]
 801aae8:	46a8      	mov	r8, r5
 801aaea:	bfa8      	it	ge
 801aaec:	f04f 0810 	movge.w	r8, #16
 801aaf0:	f7e9 fd98 	bl	8004624 <__aeabi_ui2d>
 801aaf4:	2d09      	cmp	r5, #9
 801aaf6:	4682      	mov	sl, r0
 801aaf8:	468b      	mov	fp, r1
 801aafa:	dd13      	ble.n	801ab24 <_strtod_l+0x3e4>
 801aafc:	4b79      	ldr	r3, [pc, #484]	; (801ace4 <_strtod_l+0x5a4>)
 801aafe:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801ab02:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 801ab06:	f7e9 fe07 	bl	8004718 <__aeabi_dmul>
 801ab0a:	4682      	mov	sl, r0
 801ab0c:	4648      	mov	r0, r9
 801ab0e:	468b      	mov	fp, r1
 801ab10:	f7e9 fd88 	bl	8004624 <__aeabi_ui2d>
 801ab14:	4602      	mov	r2, r0
 801ab16:	460b      	mov	r3, r1
 801ab18:	4650      	mov	r0, sl
 801ab1a:	4659      	mov	r1, fp
 801ab1c:	f7e9 fc46 	bl	80043ac <__adddf3>
 801ab20:	4682      	mov	sl, r0
 801ab22:	468b      	mov	fp, r1
 801ab24:	2d0f      	cmp	r5, #15
 801ab26:	dc38      	bgt.n	801ab9a <_strtod_l+0x45a>
 801ab28:	9b08      	ldr	r3, [sp, #32]
 801ab2a:	2b00      	cmp	r3, #0
 801ab2c:	f43f ae4a 	beq.w	801a7c4 <_strtod_l+0x84>
 801ab30:	dd24      	ble.n	801ab7c <_strtod_l+0x43c>
 801ab32:	2b16      	cmp	r3, #22
 801ab34:	dc0b      	bgt.n	801ab4e <_strtod_l+0x40e>
 801ab36:	4d6b      	ldr	r5, [pc, #428]	; (801ace4 <_strtod_l+0x5a4>)
 801ab38:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 801ab3c:	e9d5 0100 	ldrd	r0, r1, [r5]
 801ab40:	4652      	mov	r2, sl
 801ab42:	465b      	mov	r3, fp
 801ab44:	f7e9 fde8 	bl	8004718 <__aeabi_dmul>
 801ab48:	4682      	mov	sl, r0
 801ab4a:	468b      	mov	fp, r1
 801ab4c:	e63a      	b.n	801a7c4 <_strtod_l+0x84>
 801ab4e:	9a08      	ldr	r2, [sp, #32]
 801ab50:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 801ab54:	4293      	cmp	r3, r2
 801ab56:	db20      	blt.n	801ab9a <_strtod_l+0x45a>
 801ab58:	4c62      	ldr	r4, [pc, #392]	; (801ace4 <_strtod_l+0x5a4>)
 801ab5a:	f1c5 050f 	rsb	r5, r5, #15
 801ab5e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 801ab62:	4652      	mov	r2, sl
 801ab64:	465b      	mov	r3, fp
 801ab66:	e9d1 0100 	ldrd	r0, r1, [r1]
 801ab6a:	f7e9 fdd5 	bl	8004718 <__aeabi_dmul>
 801ab6e:	9b08      	ldr	r3, [sp, #32]
 801ab70:	1b5d      	subs	r5, r3, r5
 801ab72:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 801ab76:	e9d4 2300 	ldrd	r2, r3, [r4]
 801ab7a:	e7e3      	b.n	801ab44 <_strtod_l+0x404>
 801ab7c:	9b08      	ldr	r3, [sp, #32]
 801ab7e:	3316      	adds	r3, #22
 801ab80:	db0b      	blt.n	801ab9a <_strtod_l+0x45a>
 801ab82:	9b07      	ldr	r3, [sp, #28]
 801ab84:	4a57      	ldr	r2, [pc, #348]	; (801ace4 <_strtod_l+0x5a4>)
 801ab86:	1b9e      	subs	r6, r3, r6
 801ab88:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 801ab8c:	e9d6 2300 	ldrd	r2, r3, [r6]
 801ab90:	4650      	mov	r0, sl
 801ab92:	4659      	mov	r1, fp
 801ab94:	f7e9 feea 	bl	800496c <__aeabi_ddiv>
 801ab98:	e7d6      	b.n	801ab48 <_strtod_l+0x408>
 801ab9a:	9b08      	ldr	r3, [sp, #32]
 801ab9c:	eba5 0808 	sub.w	r8, r5, r8
 801aba0:	4498      	add	r8, r3
 801aba2:	f1b8 0f00 	cmp.w	r8, #0
 801aba6:	dd71      	ble.n	801ac8c <_strtod_l+0x54c>
 801aba8:	f018 030f 	ands.w	r3, r8, #15
 801abac:	d00a      	beq.n	801abc4 <_strtod_l+0x484>
 801abae:	494d      	ldr	r1, [pc, #308]	; (801ace4 <_strtod_l+0x5a4>)
 801abb0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801abb4:	4652      	mov	r2, sl
 801abb6:	465b      	mov	r3, fp
 801abb8:	e9d1 0100 	ldrd	r0, r1, [r1]
 801abbc:	f7e9 fdac 	bl	8004718 <__aeabi_dmul>
 801abc0:	4682      	mov	sl, r0
 801abc2:	468b      	mov	fp, r1
 801abc4:	f038 080f 	bics.w	r8, r8, #15
 801abc8:	d04d      	beq.n	801ac66 <_strtod_l+0x526>
 801abca:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 801abce:	dd22      	ble.n	801ac16 <_strtod_l+0x4d6>
 801abd0:	2500      	movs	r5, #0
 801abd2:	462e      	mov	r6, r5
 801abd4:	9509      	str	r5, [sp, #36]	; 0x24
 801abd6:	9507      	str	r5, [sp, #28]
 801abd8:	2322      	movs	r3, #34	; 0x22
 801abda:	f8df b110 	ldr.w	fp, [pc, #272]	; 801acec <_strtod_l+0x5ac>
 801abde:	6023      	str	r3, [r4, #0]
 801abe0:	f04f 0a00 	mov.w	sl, #0
 801abe4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801abe6:	2b00      	cmp	r3, #0
 801abe8:	f43f adec 	beq.w	801a7c4 <_strtod_l+0x84>
 801abec:	991e      	ldr	r1, [sp, #120]	; 0x78
 801abee:	4620      	mov	r0, r4
 801abf0:	f001 ffac 	bl	801cb4c <_Bfree>
 801abf4:	9907      	ldr	r1, [sp, #28]
 801abf6:	4620      	mov	r0, r4
 801abf8:	f001 ffa8 	bl	801cb4c <_Bfree>
 801abfc:	4631      	mov	r1, r6
 801abfe:	4620      	mov	r0, r4
 801ac00:	f001 ffa4 	bl	801cb4c <_Bfree>
 801ac04:	9909      	ldr	r1, [sp, #36]	; 0x24
 801ac06:	4620      	mov	r0, r4
 801ac08:	f001 ffa0 	bl	801cb4c <_Bfree>
 801ac0c:	4629      	mov	r1, r5
 801ac0e:	4620      	mov	r0, r4
 801ac10:	f001 ff9c 	bl	801cb4c <_Bfree>
 801ac14:	e5d6      	b.n	801a7c4 <_strtod_l+0x84>
 801ac16:	2300      	movs	r3, #0
 801ac18:	ea4f 1828 	mov.w	r8, r8, asr #4
 801ac1c:	4650      	mov	r0, sl
 801ac1e:	4659      	mov	r1, fp
 801ac20:	4699      	mov	r9, r3
 801ac22:	f1b8 0f01 	cmp.w	r8, #1
 801ac26:	dc21      	bgt.n	801ac6c <_strtod_l+0x52c>
 801ac28:	b10b      	cbz	r3, 801ac2e <_strtod_l+0x4ee>
 801ac2a:	4682      	mov	sl, r0
 801ac2c:	468b      	mov	fp, r1
 801ac2e:	4b2e      	ldr	r3, [pc, #184]	; (801ace8 <_strtod_l+0x5a8>)
 801ac30:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 801ac34:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 801ac38:	4652      	mov	r2, sl
 801ac3a:	465b      	mov	r3, fp
 801ac3c:	e9d9 0100 	ldrd	r0, r1, [r9]
 801ac40:	f7e9 fd6a 	bl	8004718 <__aeabi_dmul>
 801ac44:	4b29      	ldr	r3, [pc, #164]	; (801acec <_strtod_l+0x5ac>)
 801ac46:	460a      	mov	r2, r1
 801ac48:	400b      	ands	r3, r1
 801ac4a:	4929      	ldr	r1, [pc, #164]	; (801acf0 <_strtod_l+0x5b0>)
 801ac4c:	428b      	cmp	r3, r1
 801ac4e:	4682      	mov	sl, r0
 801ac50:	d8be      	bhi.n	801abd0 <_strtod_l+0x490>
 801ac52:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 801ac56:	428b      	cmp	r3, r1
 801ac58:	bf86      	itte	hi
 801ac5a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 801acf4 <_strtod_l+0x5b4>
 801ac5e:	f04f 3aff 	movhi.w	sl, #4294967295
 801ac62:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 801ac66:	2300      	movs	r3, #0
 801ac68:	9304      	str	r3, [sp, #16]
 801ac6a:	e081      	b.n	801ad70 <_strtod_l+0x630>
 801ac6c:	f018 0f01 	tst.w	r8, #1
 801ac70:	d007      	beq.n	801ac82 <_strtod_l+0x542>
 801ac72:	4b1d      	ldr	r3, [pc, #116]	; (801ace8 <_strtod_l+0x5a8>)
 801ac74:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 801ac78:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ac7c:	f7e9 fd4c 	bl	8004718 <__aeabi_dmul>
 801ac80:	2301      	movs	r3, #1
 801ac82:	f109 0901 	add.w	r9, r9, #1
 801ac86:	ea4f 0868 	mov.w	r8, r8, asr #1
 801ac8a:	e7ca      	b.n	801ac22 <_strtod_l+0x4e2>
 801ac8c:	d0eb      	beq.n	801ac66 <_strtod_l+0x526>
 801ac8e:	f1c8 0800 	rsb	r8, r8, #0
 801ac92:	f018 020f 	ands.w	r2, r8, #15
 801ac96:	d00a      	beq.n	801acae <_strtod_l+0x56e>
 801ac98:	4b12      	ldr	r3, [pc, #72]	; (801ace4 <_strtod_l+0x5a4>)
 801ac9a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801ac9e:	4650      	mov	r0, sl
 801aca0:	4659      	mov	r1, fp
 801aca2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aca6:	f7e9 fe61 	bl	800496c <__aeabi_ddiv>
 801acaa:	4682      	mov	sl, r0
 801acac:	468b      	mov	fp, r1
 801acae:	ea5f 1828 	movs.w	r8, r8, asr #4
 801acb2:	d0d8      	beq.n	801ac66 <_strtod_l+0x526>
 801acb4:	f1b8 0f1f 	cmp.w	r8, #31
 801acb8:	dd1e      	ble.n	801acf8 <_strtod_l+0x5b8>
 801acba:	2500      	movs	r5, #0
 801acbc:	462e      	mov	r6, r5
 801acbe:	9509      	str	r5, [sp, #36]	; 0x24
 801acc0:	9507      	str	r5, [sp, #28]
 801acc2:	2322      	movs	r3, #34	; 0x22
 801acc4:	f04f 0a00 	mov.w	sl, #0
 801acc8:	f04f 0b00 	mov.w	fp, #0
 801accc:	6023      	str	r3, [r4, #0]
 801acce:	e789      	b.n	801abe4 <_strtod_l+0x4a4>
 801acd0:	080212c0 	.word	0x080212c0
 801acd4:	08037838 	.word	0x08037838
 801acd8:	080377f5 	.word	0x080377f5
 801acdc:	0803787b 	.word	0x0803787b
 801ace0:	0802394d 	.word	0x0802394d
 801ace4:	08037a18 	.word	0x08037a18
 801ace8:	080379f0 	.word	0x080379f0
 801acec:	7ff00000 	.word	0x7ff00000
 801acf0:	7ca00000 	.word	0x7ca00000
 801acf4:	7fefffff 	.word	0x7fefffff
 801acf8:	f018 0310 	ands.w	r3, r8, #16
 801acfc:	bf18      	it	ne
 801acfe:	236a      	movne	r3, #106	; 0x6a
 801ad00:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 801b0b8 <_strtod_l+0x978>
 801ad04:	9304      	str	r3, [sp, #16]
 801ad06:	4650      	mov	r0, sl
 801ad08:	4659      	mov	r1, fp
 801ad0a:	2300      	movs	r3, #0
 801ad0c:	f018 0f01 	tst.w	r8, #1
 801ad10:	d004      	beq.n	801ad1c <_strtod_l+0x5dc>
 801ad12:	e9d9 2300 	ldrd	r2, r3, [r9]
 801ad16:	f7e9 fcff 	bl	8004718 <__aeabi_dmul>
 801ad1a:	2301      	movs	r3, #1
 801ad1c:	ea5f 0868 	movs.w	r8, r8, asr #1
 801ad20:	f109 0908 	add.w	r9, r9, #8
 801ad24:	d1f2      	bne.n	801ad0c <_strtod_l+0x5cc>
 801ad26:	b10b      	cbz	r3, 801ad2c <_strtod_l+0x5ec>
 801ad28:	4682      	mov	sl, r0
 801ad2a:	468b      	mov	fp, r1
 801ad2c:	9b04      	ldr	r3, [sp, #16]
 801ad2e:	b1bb      	cbz	r3, 801ad60 <_strtod_l+0x620>
 801ad30:	f3cb 530a 	ubfx	r3, fp, #20, #11
 801ad34:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801ad38:	2b00      	cmp	r3, #0
 801ad3a:	4659      	mov	r1, fp
 801ad3c:	dd10      	ble.n	801ad60 <_strtod_l+0x620>
 801ad3e:	2b1f      	cmp	r3, #31
 801ad40:	f340 8128 	ble.w	801af94 <_strtod_l+0x854>
 801ad44:	2b34      	cmp	r3, #52	; 0x34
 801ad46:	bfde      	ittt	le
 801ad48:	3b20      	suble	r3, #32
 801ad4a:	f04f 32ff 	movle.w	r2, #4294967295
 801ad4e:	fa02 f303 	lslle.w	r3, r2, r3
 801ad52:	f04f 0a00 	mov.w	sl, #0
 801ad56:	bfcc      	ite	gt
 801ad58:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 801ad5c:	ea03 0b01 	andle.w	fp, r3, r1
 801ad60:	2200      	movs	r2, #0
 801ad62:	2300      	movs	r3, #0
 801ad64:	4650      	mov	r0, sl
 801ad66:	4659      	mov	r1, fp
 801ad68:	f7e9 ff3e 	bl	8004be8 <__aeabi_dcmpeq>
 801ad6c:	2800      	cmp	r0, #0
 801ad6e:	d1a4      	bne.n	801acba <_strtod_l+0x57a>
 801ad70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ad72:	9300      	str	r3, [sp, #0]
 801ad74:	990a      	ldr	r1, [sp, #40]	; 0x28
 801ad76:	462b      	mov	r3, r5
 801ad78:	463a      	mov	r2, r7
 801ad7a:	4620      	mov	r0, r4
 801ad7c:	f001 ff52 	bl	801cc24 <__s2b>
 801ad80:	9009      	str	r0, [sp, #36]	; 0x24
 801ad82:	2800      	cmp	r0, #0
 801ad84:	f43f af24 	beq.w	801abd0 <_strtod_l+0x490>
 801ad88:	9b07      	ldr	r3, [sp, #28]
 801ad8a:	1b9e      	subs	r6, r3, r6
 801ad8c:	9b08      	ldr	r3, [sp, #32]
 801ad8e:	2b00      	cmp	r3, #0
 801ad90:	bfb4      	ite	lt
 801ad92:	4633      	movlt	r3, r6
 801ad94:	2300      	movge	r3, #0
 801ad96:	9310      	str	r3, [sp, #64]	; 0x40
 801ad98:	9b08      	ldr	r3, [sp, #32]
 801ad9a:	2500      	movs	r5, #0
 801ad9c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801ada0:	9318      	str	r3, [sp, #96]	; 0x60
 801ada2:	462e      	mov	r6, r5
 801ada4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ada6:	4620      	mov	r0, r4
 801ada8:	6859      	ldr	r1, [r3, #4]
 801adaa:	f001 fe8f 	bl	801cacc <_Balloc>
 801adae:	9007      	str	r0, [sp, #28]
 801adb0:	2800      	cmp	r0, #0
 801adb2:	f43f af11 	beq.w	801abd8 <_strtod_l+0x498>
 801adb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801adb8:	691a      	ldr	r2, [r3, #16]
 801adba:	3202      	adds	r2, #2
 801adbc:	f103 010c 	add.w	r1, r3, #12
 801adc0:	0092      	lsls	r2, r2, #2
 801adc2:	300c      	adds	r0, #12
 801adc4:	f7fe fe2c 	bl	8019a20 <memcpy>
 801adc8:	ec4b ab10 	vmov	d0, sl, fp
 801adcc:	aa20      	add	r2, sp, #128	; 0x80
 801adce:	a91f      	add	r1, sp, #124	; 0x7c
 801add0:	4620      	mov	r0, r4
 801add2:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 801add6:	f002 fa61 	bl	801d29c <__d2b>
 801adda:	901e      	str	r0, [sp, #120]	; 0x78
 801addc:	2800      	cmp	r0, #0
 801adde:	f43f aefb 	beq.w	801abd8 <_strtod_l+0x498>
 801ade2:	2101      	movs	r1, #1
 801ade4:	4620      	mov	r0, r4
 801ade6:	f001 ffb7 	bl	801cd58 <__i2b>
 801adea:	4606      	mov	r6, r0
 801adec:	2800      	cmp	r0, #0
 801adee:	f43f aef3 	beq.w	801abd8 <_strtod_l+0x498>
 801adf2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801adf4:	9904      	ldr	r1, [sp, #16]
 801adf6:	2b00      	cmp	r3, #0
 801adf8:	bfab      	itete	ge
 801adfa:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 801adfc:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 801adfe:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 801ae00:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 801ae04:	bfac      	ite	ge
 801ae06:	eb03 0902 	addge.w	r9, r3, r2
 801ae0a:	1ad7      	sublt	r7, r2, r3
 801ae0c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801ae0e:	eba3 0801 	sub.w	r8, r3, r1
 801ae12:	4490      	add	r8, r2
 801ae14:	4ba3      	ldr	r3, [pc, #652]	; (801b0a4 <_strtod_l+0x964>)
 801ae16:	f108 38ff 	add.w	r8, r8, #4294967295
 801ae1a:	4598      	cmp	r8, r3
 801ae1c:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801ae20:	f280 80cc 	bge.w	801afbc <_strtod_l+0x87c>
 801ae24:	eba3 0308 	sub.w	r3, r3, r8
 801ae28:	2b1f      	cmp	r3, #31
 801ae2a:	eba2 0203 	sub.w	r2, r2, r3
 801ae2e:	f04f 0101 	mov.w	r1, #1
 801ae32:	f300 80b6 	bgt.w	801afa2 <_strtod_l+0x862>
 801ae36:	fa01 f303 	lsl.w	r3, r1, r3
 801ae3a:	9311      	str	r3, [sp, #68]	; 0x44
 801ae3c:	2300      	movs	r3, #0
 801ae3e:	930c      	str	r3, [sp, #48]	; 0x30
 801ae40:	eb09 0802 	add.w	r8, r9, r2
 801ae44:	9b04      	ldr	r3, [sp, #16]
 801ae46:	45c1      	cmp	r9, r8
 801ae48:	4417      	add	r7, r2
 801ae4a:	441f      	add	r7, r3
 801ae4c:	464b      	mov	r3, r9
 801ae4e:	bfa8      	it	ge
 801ae50:	4643      	movge	r3, r8
 801ae52:	42bb      	cmp	r3, r7
 801ae54:	bfa8      	it	ge
 801ae56:	463b      	movge	r3, r7
 801ae58:	2b00      	cmp	r3, #0
 801ae5a:	bfc2      	ittt	gt
 801ae5c:	eba8 0803 	subgt.w	r8, r8, r3
 801ae60:	1aff      	subgt	r7, r7, r3
 801ae62:	eba9 0903 	subgt.w	r9, r9, r3
 801ae66:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801ae68:	2b00      	cmp	r3, #0
 801ae6a:	dd17      	ble.n	801ae9c <_strtod_l+0x75c>
 801ae6c:	4631      	mov	r1, r6
 801ae6e:	461a      	mov	r2, r3
 801ae70:	4620      	mov	r0, r4
 801ae72:	f002 f82d 	bl	801ced0 <__pow5mult>
 801ae76:	4606      	mov	r6, r0
 801ae78:	2800      	cmp	r0, #0
 801ae7a:	f43f aead 	beq.w	801abd8 <_strtod_l+0x498>
 801ae7e:	4601      	mov	r1, r0
 801ae80:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801ae82:	4620      	mov	r0, r4
 801ae84:	f001 ff7e 	bl	801cd84 <__multiply>
 801ae88:	900f      	str	r0, [sp, #60]	; 0x3c
 801ae8a:	2800      	cmp	r0, #0
 801ae8c:	f43f aea4 	beq.w	801abd8 <_strtod_l+0x498>
 801ae90:	991e      	ldr	r1, [sp, #120]	; 0x78
 801ae92:	4620      	mov	r0, r4
 801ae94:	f001 fe5a 	bl	801cb4c <_Bfree>
 801ae98:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801ae9a:	931e      	str	r3, [sp, #120]	; 0x78
 801ae9c:	f1b8 0f00 	cmp.w	r8, #0
 801aea0:	f300 8091 	bgt.w	801afc6 <_strtod_l+0x886>
 801aea4:	9b08      	ldr	r3, [sp, #32]
 801aea6:	2b00      	cmp	r3, #0
 801aea8:	dd08      	ble.n	801aebc <_strtod_l+0x77c>
 801aeaa:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801aeac:	9907      	ldr	r1, [sp, #28]
 801aeae:	4620      	mov	r0, r4
 801aeb0:	f002 f80e 	bl	801ced0 <__pow5mult>
 801aeb4:	9007      	str	r0, [sp, #28]
 801aeb6:	2800      	cmp	r0, #0
 801aeb8:	f43f ae8e 	beq.w	801abd8 <_strtod_l+0x498>
 801aebc:	2f00      	cmp	r7, #0
 801aebe:	dd08      	ble.n	801aed2 <_strtod_l+0x792>
 801aec0:	9907      	ldr	r1, [sp, #28]
 801aec2:	463a      	mov	r2, r7
 801aec4:	4620      	mov	r0, r4
 801aec6:	f002 f85d 	bl	801cf84 <__lshift>
 801aeca:	9007      	str	r0, [sp, #28]
 801aecc:	2800      	cmp	r0, #0
 801aece:	f43f ae83 	beq.w	801abd8 <_strtod_l+0x498>
 801aed2:	f1b9 0f00 	cmp.w	r9, #0
 801aed6:	dd08      	ble.n	801aeea <_strtod_l+0x7aa>
 801aed8:	4631      	mov	r1, r6
 801aeda:	464a      	mov	r2, r9
 801aedc:	4620      	mov	r0, r4
 801aede:	f002 f851 	bl	801cf84 <__lshift>
 801aee2:	4606      	mov	r6, r0
 801aee4:	2800      	cmp	r0, #0
 801aee6:	f43f ae77 	beq.w	801abd8 <_strtod_l+0x498>
 801aeea:	9a07      	ldr	r2, [sp, #28]
 801aeec:	991e      	ldr	r1, [sp, #120]	; 0x78
 801aeee:	4620      	mov	r0, r4
 801aef0:	f002 f8d0 	bl	801d094 <__mdiff>
 801aef4:	4605      	mov	r5, r0
 801aef6:	2800      	cmp	r0, #0
 801aef8:	f43f ae6e 	beq.w	801abd8 <_strtod_l+0x498>
 801aefc:	68c3      	ldr	r3, [r0, #12]
 801aefe:	930f      	str	r3, [sp, #60]	; 0x3c
 801af00:	2300      	movs	r3, #0
 801af02:	60c3      	str	r3, [r0, #12]
 801af04:	4631      	mov	r1, r6
 801af06:	f002 f8a9 	bl	801d05c <__mcmp>
 801af0a:	2800      	cmp	r0, #0
 801af0c:	da65      	bge.n	801afda <_strtod_l+0x89a>
 801af0e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801af10:	ea53 030a 	orrs.w	r3, r3, sl
 801af14:	f040 8087 	bne.w	801b026 <_strtod_l+0x8e6>
 801af18:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801af1c:	2b00      	cmp	r3, #0
 801af1e:	f040 8082 	bne.w	801b026 <_strtod_l+0x8e6>
 801af22:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801af26:	0d1b      	lsrs	r3, r3, #20
 801af28:	051b      	lsls	r3, r3, #20
 801af2a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 801af2e:	d97a      	bls.n	801b026 <_strtod_l+0x8e6>
 801af30:	696b      	ldr	r3, [r5, #20]
 801af32:	b913      	cbnz	r3, 801af3a <_strtod_l+0x7fa>
 801af34:	692b      	ldr	r3, [r5, #16]
 801af36:	2b01      	cmp	r3, #1
 801af38:	dd75      	ble.n	801b026 <_strtod_l+0x8e6>
 801af3a:	4629      	mov	r1, r5
 801af3c:	2201      	movs	r2, #1
 801af3e:	4620      	mov	r0, r4
 801af40:	f002 f820 	bl	801cf84 <__lshift>
 801af44:	4631      	mov	r1, r6
 801af46:	4605      	mov	r5, r0
 801af48:	f002 f888 	bl	801d05c <__mcmp>
 801af4c:	2800      	cmp	r0, #0
 801af4e:	dd6a      	ble.n	801b026 <_strtod_l+0x8e6>
 801af50:	9904      	ldr	r1, [sp, #16]
 801af52:	4a55      	ldr	r2, [pc, #340]	; (801b0a8 <_strtod_l+0x968>)
 801af54:	465b      	mov	r3, fp
 801af56:	2900      	cmp	r1, #0
 801af58:	f000 8085 	beq.w	801b066 <_strtod_l+0x926>
 801af5c:	ea02 010b 	and.w	r1, r2, fp
 801af60:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 801af64:	dc7f      	bgt.n	801b066 <_strtod_l+0x926>
 801af66:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 801af6a:	f77f aeaa 	ble.w	801acc2 <_strtod_l+0x582>
 801af6e:	4a4f      	ldr	r2, [pc, #316]	; (801b0ac <_strtod_l+0x96c>)
 801af70:	2300      	movs	r3, #0
 801af72:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 801af76:	4650      	mov	r0, sl
 801af78:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 801af7c:	4659      	mov	r1, fp
 801af7e:	f7e9 fbcb 	bl	8004718 <__aeabi_dmul>
 801af82:	460b      	mov	r3, r1
 801af84:	4303      	orrs	r3, r0
 801af86:	bf08      	it	eq
 801af88:	2322      	moveq	r3, #34	; 0x22
 801af8a:	4682      	mov	sl, r0
 801af8c:	468b      	mov	fp, r1
 801af8e:	bf08      	it	eq
 801af90:	6023      	streq	r3, [r4, #0]
 801af92:	e62b      	b.n	801abec <_strtod_l+0x4ac>
 801af94:	f04f 32ff 	mov.w	r2, #4294967295
 801af98:	fa02 f303 	lsl.w	r3, r2, r3
 801af9c:	ea03 0a0a 	and.w	sl, r3, sl
 801afa0:	e6de      	b.n	801ad60 <_strtod_l+0x620>
 801afa2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 801afa6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 801afaa:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 801afae:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 801afb2:	fa01 f308 	lsl.w	r3, r1, r8
 801afb6:	930c      	str	r3, [sp, #48]	; 0x30
 801afb8:	9111      	str	r1, [sp, #68]	; 0x44
 801afba:	e741      	b.n	801ae40 <_strtod_l+0x700>
 801afbc:	2300      	movs	r3, #0
 801afbe:	930c      	str	r3, [sp, #48]	; 0x30
 801afc0:	2301      	movs	r3, #1
 801afc2:	9311      	str	r3, [sp, #68]	; 0x44
 801afc4:	e73c      	b.n	801ae40 <_strtod_l+0x700>
 801afc6:	991e      	ldr	r1, [sp, #120]	; 0x78
 801afc8:	4642      	mov	r2, r8
 801afca:	4620      	mov	r0, r4
 801afcc:	f001 ffda 	bl	801cf84 <__lshift>
 801afd0:	901e      	str	r0, [sp, #120]	; 0x78
 801afd2:	2800      	cmp	r0, #0
 801afd4:	f47f af66 	bne.w	801aea4 <_strtod_l+0x764>
 801afd8:	e5fe      	b.n	801abd8 <_strtod_l+0x498>
 801afda:	465f      	mov	r7, fp
 801afdc:	d16e      	bne.n	801b0bc <_strtod_l+0x97c>
 801afde:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801afe0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801afe4:	b342      	cbz	r2, 801b038 <_strtod_l+0x8f8>
 801afe6:	4a32      	ldr	r2, [pc, #200]	; (801b0b0 <_strtod_l+0x970>)
 801afe8:	4293      	cmp	r3, r2
 801afea:	d128      	bne.n	801b03e <_strtod_l+0x8fe>
 801afec:	9b04      	ldr	r3, [sp, #16]
 801afee:	4650      	mov	r0, sl
 801aff0:	b1eb      	cbz	r3, 801b02e <_strtod_l+0x8ee>
 801aff2:	4a2d      	ldr	r2, [pc, #180]	; (801b0a8 <_strtod_l+0x968>)
 801aff4:	403a      	ands	r2, r7
 801aff6:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 801affa:	f04f 31ff 	mov.w	r1, #4294967295
 801affe:	d819      	bhi.n	801b034 <_strtod_l+0x8f4>
 801b000:	0d12      	lsrs	r2, r2, #20
 801b002:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 801b006:	fa01 f303 	lsl.w	r3, r1, r3
 801b00a:	4298      	cmp	r0, r3
 801b00c:	d117      	bne.n	801b03e <_strtod_l+0x8fe>
 801b00e:	4b29      	ldr	r3, [pc, #164]	; (801b0b4 <_strtod_l+0x974>)
 801b010:	429f      	cmp	r7, r3
 801b012:	d102      	bne.n	801b01a <_strtod_l+0x8da>
 801b014:	3001      	adds	r0, #1
 801b016:	f43f addf 	beq.w	801abd8 <_strtod_l+0x498>
 801b01a:	4b23      	ldr	r3, [pc, #140]	; (801b0a8 <_strtod_l+0x968>)
 801b01c:	403b      	ands	r3, r7
 801b01e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 801b022:	f04f 0a00 	mov.w	sl, #0
 801b026:	9b04      	ldr	r3, [sp, #16]
 801b028:	2b00      	cmp	r3, #0
 801b02a:	d1a0      	bne.n	801af6e <_strtod_l+0x82e>
 801b02c:	e5de      	b.n	801abec <_strtod_l+0x4ac>
 801b02e:	f04f 33ff 	mov.w	r3, #4294967295
 801b032:	e7ea      	b.n	801b00a <_strtod_l+0x8ca>
 801b034:	460b      	mov	r3, r1
 801b036:	e7e8      	b.n	801b00a <_strtod_l+0x8ca>
 801b038:	ea53 030a 	orrs.w	r3, r3, sl
 801b03c:	d088      	beq.n	801af50 <_strtod_l+0x810>
 801b03e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801b040:	b1db      	cbz	r3, 801b07a <_strtod_l+0x93a>
 801b042:	423b      	tst	r3, r7
 801b044:	d0ef      	beq.n	801b026 <_strtod_l+0x8e6>
 801b046:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801b048:	9a04      	ldr	r2, [sp, #16]
 801b04a:	4650      	mov	r0, sl
 801b04c:	4659      	mov	r1, fp
 801b04e:	b1c3      	cbz	r3, 801b082 <_strtod_l+0x942>
 801b050:	f7ff fb5a 	bl	801a708 <sulp>
 801b054:	4602      	mov	r2, r0
 801b056:	460b      	mov	r3, r1
 801b058:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801b05c:	f7e9 f9a6 	bl	80043ac <__adddf3>
 801b060:	4682      	mov	sl, r0
 801b062:	468b      	mov	fp, r1
 801b064:	e7df      	b.n	801b026 <_strtod_l+0x8e6>
 801b066:	4013      	ands	r3, r2
 801b068:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801b06c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 801b070:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801b074:	f04f 3aff 	mov.w	sl, #4294967295
 801b078:	e7d5      	b.n	801b026 <_strtod_l+0x8e6>
 801b07a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801b07c:	ea13 0f0a 	tst.w	r3, sl
 801b080:	e7e0      	b.n	801b044 <_strtod_l+0x904>
 801b082:	f7ff fb41 	bl	801a708 <sulp>
 801b086:	4602      	mov	r2, r0
 801b088:	460b      	mov	r3, r1
 801b08a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801b08e:	f7e9 f98b 	bl	80043a8 <__aeabi_dsub>
 801b092:	2200      	movs	r2, #0
 801b094:	2300      	movs	r3, #0
 801b096:	4682      	mov	sl, r0
 801b098:	468b      	mov	fp, r1
 801b09a:	f7e9 fda5 	bl	8004be8 <__aeabi_dcmpeq>
 801b09e:	2800      	cmp	r0, #0
 801b0a0:	d0c1      	beq.n	801b026 <_strtod_l+0x8e6>
 801b0a2:	e60e      	b.n	801acc2 <_strtod_l+0x582>
 801b0a4:	fffffc02 	.word	0xfffffc02
 801b0a8:	7ff00000 	.word	0x7ff00000
 801b0ac:	39500000 	.word	0x39500000
 801b0b0:	000fffff 	.word	0x000fffff
 801b0b4:	7fefffff 	.word	0x7fefffff
 801b0b8:	08037850 	.word	0x08037850
 801b0bc:	4631      	mov	r1, r6
 801b0be:	4628      	mov	r0, r5
 801b0c0:	f002 f948 	bl	801d354 <__ratio>
 801b0c4:	ec59 8b10 	vmov	r8, r9, d0
 801b0c8:	ee10 0a10 	vmov	r0, s0
 801b0cc:	2200      	movs	r2, #0
 801b0ce:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801b0d2:	4649      	mov	r1, r9
 801b0d4:	f7e9 fd9c 	bl	8004c10 <__aeabi_dcmple>
 801b0d8:	2800      	cmp	r0, #0
 801b0da:	d07c      	beq.n	801b1d6 <_strtod_l+0xa96>
 801b0dc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801b0de:	2b00      	cmp	r3, #0
 801b0e0:	d04c      	beq.n	801b17c <_strtod_l+0xa3c>
 801b0e2:	4b95      	ldr	r3, [pc, #596]	; (801b338 <_strtod_l+0xbf8>)
 801b0e4:	2200      	movs	r2, #0
 801b0e6:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 801b0ea:	f8df 924c 	ldr.w	r9, [pc, #588]	; 801b338 <_strtod_l+0xbf8>
 801b0ee:	f04f 0800 	mov.w	r8, #0
 801b0f2:	4b92      	ldr	r3, [pc, #584]	; (801b33c <_strtod_l+0xbfc>)
 801b0f4:	403b      	ands	r3, r7
 801b0f6:	9311      	str	r3, [sp, #68]	; 0x44
 801b0f8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801b0fa:	4b91      	ldr	r3, [pc, #580]	; (801b340 <_strtod_l+0xc00>)
 801b0fc:	429a      	cmp	r2, r3
 801b0fe:	f040 80b2 	bne.w	801b266 <_strtod_l+0xb26>
 801b102:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801b106:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801b10a:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 801b10e:	ec4b ab10 	vmov	d0, sl, fp
 801b112:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 801b116:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801b11a:	f002 f843 	bl	801d1a4 <__ulp>
 801b11e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801b122:	ec53 2b10 	vmov	r2, r3, d0
 801b126:	f7e9 faf7 	bl	8004718 <__aeabi_dmul>
 801b12a:	4652      	mov	r2, sl
 801b12c:	465b      	mov	r3, fp
 801b12e:	f7e9 f93d 	bl	80043ac <__adddf3>
 801b132:	460b      	mov	r3, r1
 801b134:	4981      	ldr	r1, [pc, #516]	; (801b33c <_strtod_l+0xbfc>)
 801b136:	4a83      	ldr	r2, [pc, #524]	; (801b344 <_strtod_l+0xc04>)
 801b138:	4019      	ands	r1, r3
 801b13a:	4291      	cmp	r1, r2
 801b13c:	4682      	mov	sl, r0
 801b13e:	d95e      	bls.n	801b1fe <_strtod_l+0xabe>
 801b140:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b142:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 801b146:	4293      	cmp	r3, r2
 801b148:	d103      	bne.n	801b152 <_strtod_l+0xa12>
 801b14a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b14c:	3301      	adds	r3, #1
 801b14e:	f43f ad43 	beq.w	801abd8 <_strtod_l+0x498>
 801b152:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 801b350 <_strtod_l+0xc10>
 801b156:	f04f 3aff 	mov.w	sl, #4294967295
 801b15a:	991e      	ldr	r1, [sp, #120]	; 0x78
 801b15c:	4620      	mov	r0, r4
 801b15e:	f001 fcf5 	bl	801cb4c <_Bfree>
 801b162:	9907      	ldr	r1, [sp, #28]
 801b164:	4620      	mov	r0, r4
 801b166:	f001 fcf1 	bl	801cb4c <_Bfree>
 801b16a:	4631      	mov	r1, r6
 801b16c:	4620      	mov	r0, r4
 801b16e:	f001 fced 	bl	801cb4c <_Bfree>
 801b172:	4629      	mov	r1, r5
 801b174:	4620      	mov	r0, r4
 801b176:	f001 fce9 	bl	801cb4c <_Bfree>
 801b17a:	e613      	b.n	801ada4 <_strtod_l+0x664>
 801b17c:	f1ba 0f00 	cmp.w	sl, #0
 801b180:	d11b      	bne.n	801b1ba <_strtod_l+0xa7a>
 801b182:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801b186:	b9f3      	cbnz	r3, 801b1c6 <_strtod_l+0xa86>
 801b188:	4b6b      	ldr	r3, [pc, #428]	; (801b338 <_strtod_l+0xbf8>)
 801b18a:	2200      	movs	r2, #0
 801b18c:	4640      	mov	r0, r8
 801b18e:	4649      	mov	r1, r9
 801b190:	f7e9 fd34 	bl	8004bfc <__aeabi_dcmplt>
 801b194:	b9d0      	cbnz	r0, 801b1cc <_strtod_l+0xa8c>
 801b196:	4640      	mov	r0, r8
 801b198:	4649      	mov	r1, r9
 801b19a:	4b6b      	ldr	r3, [pc, #428]	; (801b348 <_strtod_l+0xc08>)
 801b19c:	2200      	movs	r2, #0
 801b19e:	f7e9 fabb 	bl	8004718 <__aeabi_dmul>
 801b1a2:	4680      	mov	r8, r0
 801b1a4:	4689      	mov	r9, r1
 801b1a6:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 801b1aa:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 801b1ae:	931b      	str	r3, [sp, #108]	; 0x6c
 801b1b0:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 801b1b4:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 801b1b8:	e79b      	b.n	801b0f2 <_strtod_l+0x9b2>
 801b1ba:	f1ba 0f01 	cmp.w	sl, #1
 801b1be:	d102      	bne.n	801b1c6 <_strtod_l+0xa86>
 801b1c0:	2f00      	cmp	r7, #0
 801b1c2:	f43f ad7e 	beq.w	801acc2 <_strtod_l+0x582>
 801b1c6:	4b61      	ldr	r3, [pc, #388]	; (801b34c <_strtod_l+0xc0c>)
 801b1c8:	2200      	movs	r2, #0
 801b1ca:	e78c      	b.n	801b0e6 <_strtod_l+0x9a6>
 801b1cc:	f8df 9178 	ldr.w	r9, [pc, #376]	; 801b348 <_strtod_l+0xc08>
 801b1d0:	f04f 0800 	mov.w	r8, #0
 801b1d4:	e7e7      	b.n	801b1a6 <_strtod_l+0xa66>
 801b1d6:	4b5c      	ldr	r3, [pc, #368]	; (801b348 <_strtod_l+0xc08>)
 801b1d8:	4640      	mov	r0, r8
 801b1da:	4649      	mov	r1, r9
 801b1dc:	2200      	movs	r2, #0
 801b1de:	f7e9 fa9b 	bl	8004718 <__aeabi_dmul>
 801b1e2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801b1e4:	4680      	mov	r8, r0
 801b1e6:	4689      	mov	r9, r1
 801b1e8:	b933      	cbnz	r3, 801b1f8 <_strtod_l+0xab8>
 801b1ea:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801b1ee:	9012      	str	r0, [sp, #72]	; 0x48
 801b1f0:	9313      	str	r3, [sp, #76]	; 0x4c
 801b1f2:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 801b1f6:	e7dd      	b.n	801b1b4 <_strtod_l+0xa74>
 801b1f8:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 801b1fc:	e7f9      	b.n	801b1f2 <_strtod_l+0xab2>
 801b1fe:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 801b202:	9b04      	ldr	r3, [sp, #16]
 801b204:	2b00      	cmp	r3, #0
 801b206:	d1a8      	bne.n	801b15a <_strtod_l+0xa1a>
 801b208:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801b20c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801b20e:	0d1b      	lsrs	r3, r3, #20
 801b210:	051b      	lsls	r3, r3, #20
 801b212:	429a      	cmp	r2, r3
 801b214:	d1a1      	bne.n	801b15a <_strtod_l+0xa1a>
 801b216:	4640      	mov	r0, r8
 801b218:	4649      	mov	r1, r9
 801b21a:	f7e9 fddd 	bl	8004dd8 <__aeabi_d2lz>
 801b21e:	f7e9 fa4d 	bl	80046bc <__aeabi_l2d>
 801b222:	4602      	mov	r2, r0
 801b224:	460b      	mov	r3, r1
 801b226:	4640      	mov	r0, r8
 801b228:	4649      	mov	r1, r9
 801b22a:	f7e9 f8bd 	bl	80043a8 <__aeabi_dsub>
 801b22e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801b230:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801b234:	ea43 030a 	orr.w	r3, r3, sl
 801b238:	4313      	orrs	r3, r2
 801b23a:	4680      	mov	r8, r0
 801b23c:	4689      	mov	r9, r1
 801b23e:	d053      	beq.n	801b2e8 <_strtod_l+0xba8>
 801b240:	a335      	add	r3, pc, #212	; (adr r3, 801b318 <_strtod_l+0xbd8>)
 801b242:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b246:	f7e9 fcd9 	bl	8004bfc <__aeabi_dcmplt>
 801b24a:	2800      	cmp	r0, #0
 801b24c:	f47f acce 	bne.w	801abec <_strtod_l+0x4ac>
 801b250:	a333      	add	r3, pc, #204	; (adr r3, 801b320 <_strtod_l+0xbe0>)
 801b252:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b256:	4640      	mov	r0, r8
 801b258:	4649      	mov	r1, r9
 801b25a:	f7e9 fced 	bl	8004c38 <__aeabi_dcmpgt>
 801b25e:	2800      	cmp	r0, #0
 801b260:	f43f af7b 	beq.w	801b15a <_strtod_l+0xa1a>
 801b264:	e4c2      	b.n	801abec <_strtod_l+0x4ac>
 801b266:	9b04      	ldr	r3, [sp, #16]
 801b268:	b333      	cbz	r3, 801b2b8 <_strtod_l+0xb78>
 801b26a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801b26c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801b270:	d822      	bhi.n	801b2b8 <_strtod_l+0xb78>
 801b272:	a32d      	add	r3, pc, #180	; (adr r3, 801b328 <_strtod_l+0xbe8>)
 801b274:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b278:	4640      	mov	r0, r8
 801b27a:	4649      	mov	r1, r9
 801b27c:	f7e9 fcc8 	bl	8004c10 <__aeabi_dcmple>
 801b280:	b1a0      	cbz	r0, 801b2ac <_strtod_l+0xb6c>
 801b282:	4649      	mov	r1, r9
 801b284:	4640      	mov	r0, r8
 801b286:	f7e9 fd1f 	bl	8004cc8 <__aeabi_d2uiz>
 801b28a:	2801      	cmp	r0, #1
 801b28c:	bf38      	it	cc
 801b28e:	2001      	movcc	r0, #1
 801b290:	f7e9 f9c8 	bl	8004624 <__aeabi_ui2d>
 801b294:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801b296:	4680      	mov	r8, r0
 801b298:	4689      	mov	r9, r1
 801b29a:	bb13      	cbnz	r3, 801b2e2 <_strtod_l+0xba2>
 801b29c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801b2a0:	9014      	str	r0, [sp, #80]	; 0x50
 801b2a2:	9315      	str	r3, [sp, #84]	; 0x54
 801b2a4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 801b2a8:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 801b2ac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801b2ae:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801b2b0:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 801b2b4:	1a9b      	subs	r3, r3, r2
 801b2b6:	930d      	str	r3, [sp, #52]	; 0x34
 801b2b8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801b2bc:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 801b2c0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801b2c4:	f001 ff6e 	bl	801d1a4 <__ulp>
 801b2c8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801b2cc:	ec53 2b10 	vmov	r2, r3, d0
 801b2d0:	f7e9 fa22 	bl	8004718 <__aeabi_dmul>
 801b2d4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801b2d8:	f7e9 f868 	bl	80043ac <__adddf3>
 801b2dc:	4682      	mov	sl, r0
 801b2de:	468b      	mov	fp, r1
 801b2e0:	e78f      	b.n	801b202 <_strtod_l+0xac2>
 801b2e2:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 801b2e6:	e7dd      	b.n	801b2a4 <_strtod_l+0xb64>
 801b2e8:	a311      	add	r3, pc, #68	; (adr r3, 801b330 <_strtod_l+0xbf0>)
 801b2ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b2ee:	f7e9 fc85 	bl	8004bfc <__aeabi_dcmplt>
 801b2f2:	e7b4      	b.n	801b25e <_strtod_l+0xb1e>
 801b2f4:	2300      	movs	r3, #0
 801b2f6:	930e      	str	r3, [sp, #56]	; 0x38
 801b2f8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 801b2fa:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801b2fc:	6013      	str	r3, [r2, #0]
 801b2fe:	f7ff ba65 	b.w	801a7cc <_strtod_l+0x8c>
 801b302:	2b65      	cmp	r3, #101	; 0x65
 801b304:	f43f ab5d 	beq.w	801a9c2 <_strtod_l+0x282>
 801b308:	2b45      	cmp	r3, #69	; 0x45
 801b30a:	f43f ab5a 	beq.w	801a9c2 <_strtod_l+0x282>
 801b30e:	2201      	movs	r2, #1
 801b310:	f7ff bb92 	b.w	801aa38 <_strtod_l+0x2f8>
 801b314:	f3af 8000 	nop.w
 801b318:	94a03595 	.word	0x94a03595
 801b31c:	3fdfffff 	.word	0x3fdfffff
 801b320:	35afe535 	.word	0x35afe535
 801b324:	3fe00000 	.word	0x3fe00000
 801b328:	ffc00000 	.word	0xffc00000
 801b32c:	41dfffff 	.word	0x41dfffff
 801b330:	94a03595 	.word	0x94a03595
 801b334:	3fcfffff 	.word	0x3fcfffff
 801b338:	3ff00000 	.word	0x3ff00000
 801b33c:	7ff00000 	.word	0x7ff00000
 801b340:	7fe00000 	.word	0x7fe00000
 801b344:	7c9fffff 	.word	0x7c9fffff
 801b348:	3fe00000 	.word	0x3fe00000
 801b34c:	bff00000 	.word	0xbff00000
 801b350:	7fefffff 	.word	0x7fefffff

0801b354 <strtod>:
 801b354:	460a      	mov	r2, r1
 801b356:	4601      	mov	r1, r0
 801b358:	4802      	ldr	r0, [pc, #8]	; (801b364 <strtod+0x10>)
 801b35a:	4b03      	ldr	r3, [pc, #12]	; (801b368 <strtod+0x14>)
 801b35c:	6800      	ldr	r0, [r0, #0]
 801b35e:	f7ff b9ef 	b.w	801a740 <_strtod_l>
 801b362:	bf00      	nop
 801b364:	20000884 	.word	0x20000884
 801b368:	200008ec 	.word	0x200008ec

0801b36c <_strtol_l.isra.0>:
 801b36c:	2b01      	cmp	r3, #1
 801b36e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b372:	d001      	beq.n	801b378 <_strtol_l.isra.0+0xc>
 801b374:	2b24      	cmp	r3, #36	; 0x24
 801b376:	d906      	bls.n	801b386 <_strtol_l.isra.0+0x1a>
 801b378:	f7fe f8f8 	bl	801956c <__errno>
 801b37c:	2316      	movs	r3, #22
 801b37e:	6003      	str	r3, [r0, #0]
 801b380:	2000      	movs	r0, #0
 801b382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b386:	4f3a      	ldr	r7, [pc, #232]	; (801b470 <_strtol_l.isra.0+0x104>)
 801b388:	468e      	mov	lr, r1
 801b38a:	4676      	mov	r6, lr
 801b38c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 801b390:	5de5      	ldrb	r5, [r4, r7]
 801b392:	f015 0508 	ands.w	r5, r5, #8
 801b396:	d1f8      	bne.n	801b38a <_strtol_l.isra.0+0x1e>
 801b398:	2c2d      	cmp	r4, #45	; 0x2d
 801b39a:	d134      	bne.n	801b406 <_strtol_l.isra.0+0x9a>
 801b39c:	f89e 4000 	ldrb.w	r4, [lr]
 801b3a0:	f04f 0801 	mov.w	r8, #1
 801b3a4:	f106 0e02 	add.w	lr, r6, #2
 801b3a8:	2b00      	cmp	r3, #0
 801b3aa:	d05c      	beq.n	801b466 <_strtol_l.isra.0+0xfa>
 801b3ac:	2b10      	cmp	r3, #16
 801b3ae:	d10c      	bne.n	801b3ca <_strtol_l.isra.0+0x5e>
 801b3b0:	2c30      	cmp	r4, #48	; 0x30
 801b3b2:	d10a      	bne.n	801b3ca <_strtol_l.isra.0+0x5e>
 801b3b4:	f89e 4000 	ldrb.w	r4, [lr]
 801b3b8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 801b3bc:	2c58      	cmp	r4, #88	; 0x58
 801b3be:	d14d      	bne.n	801b45c <_strtol_l.isra.0+0xf0>
 801b3c0:	f89e 4001 	ldrb.w	r4, [lr, #1]
 801b3c4:	2310      	movs	r3, #16
 801b3c6:	f10e 0e02 	add.w	lr, lr, #2
 801b3ca:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 801b3ce:	f10c 3cff 	add.w	ip, ip, #4294967295
 801b3d2:	2600      	movs	r6, #0
 801b3d4:	fbbc f9f3 	udiv	r9, ip, r3
 801b3d8:	4635      	mov	r5, r6
 801b3da:	fb03 ca19 	mls	sl, r3, r9, ip
 801b3de:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 801b3e2:	2f09      	cmp	r7, #9
 801b3e4:	d818      	bhi.n	801b418 <_strtol_l.isra.0+0xac>
 801b3e6:	463c      	mov	r4, r7
 801b3e8:	42a3      	cmp	r3, r4
 801b3ea:	dd24      	ble.n	801b436 <_strtol_l.isra.0+0xca>
 801b3ec:	2e00      	cmp	r6, #0
 801b3ee:	db1f      	blt.n	801b430 <_strtol_l.isra.0+0xc4>
 801b3f0:	45a9      	cmp	r9, r5
 801b3f2:	d31d      	bcc.n	801b430 <_strtol_l.isra.0+0xc4>
 801b3f4:	d101      	bne.n	801b3fa <_strtol_l.isra.0+0x8e>
 801b3f6:	45a2      	cmp	sl, r4
 801b3f8:	db1a      	blt.n	801b430 <_strtol_l.isra.0+0xc4>
 801b3fa:	fb05 4503 	mla	r5, r5, r3, r4
 801b3fe:	2601      	movs	r6, #1
 801b400:	f81e 4b01 	ldrb.w	r4, [lr], #1
 801b404:	e7eb      	b.n	801b3de <_strtol_l.isra.0+0x72>
 801b406:	2c2b      	cmp	r4, #43	; 0x2b
 801b408:	bf08      	it	eq
 801b40a:	f89e 4000 	ldrbeq.w	r4, [lr]
 801b40e:	46a8      	mov	r8, r5
 801b410:	bf08      	it	eq
 801b412:	f106 0e02 	addeq.w	lr, r6, #2
 801b416:	e7c7      	b.n	801b3a8 <_strtol_l.isra.0+0x3c>
 801b418:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 801b41c:	2f19      	cmp	r7, #25
 801b41e:	d801      	bhi.n	801b424 <_strtol_l.isra.0+0xb8>
 801b420:	3c37      	subs	r4, #55	; 0x37
 801b422:	e7e1      	b.n	801b3e8 <_strtol_l.isra.0+0x7c>
 801b424:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 801b428:	2f19      	cmp	r7, #25
 801b42a:	d804      	bhi.n	801b436 <_strtol_l.isra.0+0xca>
 801b42c:	3c57      	subs	r4, #87	; 0x57
 801b42e:	e7db      	b.n	801b3e8 <_strtol_l.isra.0+0x7c>
 801b430:	f04f 36ff 	mov.w	r6, #4294967295
 801b434:	e7e4      	b.n	801b400 <_strtol_l.isra.0+0x94>
 801b436:	2e00      	cmp	r6, #0
 801b438:	da05      	bge.n	801b446 <_strtol_l.isra.0+0xda>
 801b43a:	2322      	movs	r3, #34	; 0x22
 801b43c:	6003      	str	r3, [r0, #0]
 801b43e:	4665      	mov	r5, ip
 801b440:	b942      	cbnz	r2, 801b454 <_strtol_l.isra.0+0xe8>
 801b442:	4628      	mov	r0, r5
 801b444:	e79d      	b.n	801b382 <_strtol_l.isra.0+0x16>
 801b446:	f1b8 0f00 	cmp.w	r8, #0
 801b44a:	d000      	beq.n	801b44e <_strtol_l.isra.0+0xe2>
 801b44c:	426d      	negs	r5, r5
 801b44e:	2a00      	cmp	r2, #0
 801b450:	d0f7      	beq.n	801b442 <_strtol_l.isra.0+0xd6>
 801b452:	b10e      	cbz	r6, 801b458 <_strtol_l.isra.0+0xec>
 801b454:	f10e 31ff 	add.w	r1, lr, #4294967295
 801b458:	6011      	str	r1, [r2, #0]
 801b45a:	e7f2      	b.n	801b442 <_strtol_l.isra.0+0xd6>
 801b45c:	2430      	movs	r4, #48	; 0x30
 801b45e:	2b00      	cmp	r3, #0
 801b460:	d1b3      	bne.n	801b3ca <_strtol_l.isra.0+0x5e>
 801b462:	2308      	movs	r3, #8
 801b464:	e7b1      	b.n	801b3ca <_strtol_l.isra.0+0x5e>
 801b466:	2c30      	cmp	r4, #48	; 0x30
 801b468:	d0a4      	beq.n	801b3b4 <_strtol_l.isra.0+0x48>
 801b46a:	230a      	movs	r3, #10
 801b46c:	e7ad      	b.n	801b3ca <_strtol_l.isra.0+0x5e>
 801b46e:	bf00      	nop
 801b470:	08037689 	.word	0x08037689

0801b474 <strtol>:
 801b474:	4613      	mov	r3, r2
 801b476:	460a      	mov	r2, r1
 801b478:	4601      	mov	r1, r0
 801b47a:	4802      	ldr	r0, [pc, #8]	; (801b484 <strtol+0x10>)
 801b47c:	6800      	ldr	r0, [r0, #0]
 801b47e:	f7ff bf75 	b.w	801b36c <_strtol_l.isra.0>
 801b482:	bf00      	nop
 801b484:	20000884 	.word	0x20000884

0801b488 <__swbuf_r>:
 801b488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b48a:	460e      	mov	r6, r1
 801b48c:	4614      	mov	r4, r2
 801b48e:	4605      	mov	r5, r0
 801b490:	b118      	cbz	r0, 801b49a <__swbuf_r+0x12>
 801b492:	6983      	ldr	r3, [r0, #24]
 801b494:	b90b      	cbnz	r3, 801b49a <__swbuf_r+0x12>
 801b496:	f7fe f989 	bl	80197ac <__sinit>
 801b49a:	4b21      	ldr	r3, [pc, #132]	; (801b520 <__swbuf_r+0x98>)
 801b49c:	429c      	cmp	r4, r3
 801b49e:	d12b      	bne.n	801b4f8 <__swbuf_r+0x70>
 801b4a0:	686c      	ldr	r4, [r5, #4]
 801b4a2:	69a3      	ldr	r3, [r4, #24]
 801b4a4:	60a3      	str	r3, [r4, #8]
 801b4a6:	89a3      	ldrh	r3, [r4, #12]
 801b4a8:	071a      	lsls	r2, r3, #28
 801b4aa:	d52f      	bpl.n	801b50c <__swbuf_r+0x84>
 801b4ac:	6923      	ldr	r3, [r4, #16]
 801b4ae:	b36b      	cbz	r3, 801b50c <__swbuf_r+0x84>
 801b4b0:	6923      	ldr	r3, [r4, #16]
 801b4b2:	6820      	ldr	r0, [r4, #0]
 801b4b4:	1ac0      	subs	r0, r0, r3
 801b4b6:	6963      	ldr	r3, [r4, #20]
 801b4b8:	b2f6      	uxtb	r6, r6
 801b4ba:	4283      	cmp	r3, r0
 801b4bc:	4637      	mov	r7, r6
 801b4be:	dc04      	bgt.n	801b4ca <__swbuf_r+0x42>
 801b4c0:	4621      	mov	r1, r4
 801b4c2:	4628      	mov	r0, r5
 801b4c4:	f7fe f8de 	bl	8019684 <_fflush_r>
 801b4c8:	bb30      	cbnz	r0, 801b518 <__swbuf_r+0x90>
 801b4ca:	68a3      	ldr	r3, [r4, #8]
 801b4cc:	3b01      	subs	r3, #1
 801b4ce:	60a3      	str	r3, [r4, #8]
 801b4d0:	6823      	ldr	r3, [r4, #0]
 801b4d2:	1c5a      	adds	r2, r3, #1
 801b4d4:	6022      	str	r2, [r4, #0]
 801b4d6:	701e      	strb	r6, [r3, #0]
 801b4d8:	6963      	ldr	r3, [r4, #20]
 801b4da:	3001      	adds	r0, #1
 801b4dc:	4283      	cmp	r3, r0
 801b4de:	d004      	beq.n	801b4ea <__swbuf_r+0x62>
 801b4e0:	89a3      	ldrh	r3, [r4, #12]
 801b4e2:	07db      	lsls	r3, r3, #31
 801b4e4:	d506      	bpl.n	801b4f4 <__swbuf_r+0x6c>
 801b4e6:	2e0a      	cmp	r6, #10
 801b4e8:	d104      	bne.n	801b4f4 <__swbuf_r+0x6c>
 801b4ea:	4621      	mov	r1, r4
 801b4ec:	4628      	mov	r0, r5
 801b4ee:	f7fe f8c9 	bl	8019684 <_fflush_r>
 801b4f2:	b988      	cbnz	r0, 801b518 <__swbuf_r+0x90>
 801b4f4:	4638      	mov	r0, r7
 801b4f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b4f8:	4b0a      	ldr	r3, [pc, #40]	; (801b524 <__swbuf_r+0x9c>)
 801b4fa:	429c      	cmp	r4, r3
 801b4fc:	d101      	bne.n	801b502 <__swbuf_r+0x7a>
 801b4fe:	68ac      	ldr	r4, [r5, #8]
 801b500:	e7cf      	b.n	801b4a2 <__swbuf_r+0x1a>
 801b502:	4b09      	ldr	r3, [pc, #36]	; (801b528 <__swbuf_r+0xa0>)
 801b504:	429c      	cmp	r4, r3
 801b506:	bf08      	it	eq
 801b508:	68ec      	ldreq	r4, [r5, #12]
 801b50a:	e7ca      	b.n	801b4a2 <__swbuf_r+0x1a>
 801b50c:	4621      	mov	r1, r4
 801b50e:	4628      	mov	r0, r5
 801b510:	f000 f81e 	bl	801b550 <__swsetup_r>
 801b514:	2800      	cmp	r0, #0
 801b516:	d0cb      	beq.n	801b4b0 <__swbuf_r+0x28>
 801b518:	f04f 37ff 	mov.w	r7, #4294967295
 801b51c:	e7ea      	b.n	801b4f4 <__swbuf_r+0x6c>
 801b51e:	bf00      	nop
 801b520:	080377ac 	.word	0x080377ac
 801b524:	080377cc 	.word	0x080377cc
 801b528:	0803778c 	.word	0x0803778c

0801b52c <_write_r>:
 801b52c:	b538      	push	{r3, r4, r5, lr}
 801b52e:	4d07      	ldr	r5, [pc, #28]	; (801b54c <_write_r+0x20>)
 801b530:	4604      	mov	r4, r0
 801b532:	4608      	mov	r0, r1
 801b534:	4611      	mov	r1, r2
 801b536:	2200      	movs	r2, #0
 801b538:	602a      	str	r2, [r5, #0]
 801b53a:	461a      	mov	r2, r3
 801b53c:	f7f5 fe3a 	bl	80111b4 <_write>
 801b540:	1c43      	adds	r3, r0, #1
 801b542:	d102      	bne.n	801b54a <_write_r+0x1e>
 801b544:	682b      	ldr	r3, [r5, #0]
 801b546:	b103      	cbz	r3, 801b54a <_write_r+0x1e>
 801b548:	6023      	str	r3, [r4, #0]
 801b54a:	bd38      	pop	{r3, r4, r5, pc}
 801b54c:	2000c028 	.word	0x2000c028

0801b550 <__swsetup_r>:
 801b550:	4b32      	ldr	r3, [pc, #200]	; (801b61c <__swsetup_r+0xcc>)
 801b552:	b570      	push	{r4, r5, r6, lr}
 801b554:	681d      	ldr	r5, [r3, #0]
 801b556:	4606      	mov	r6, r0
 801b558:	460c      	mov	r4, r1
 801b55a:	b125      	cbz	r5, 801b566 <__swsetup_r+0x16>
 801b55c:	69ab      	ldr	r3, [r5, #24]
 801b55e:	b913      	cbnz	r3, 801b566 <__swsetup_r+0x16>
 801b560:	4628      	mov	r0, r5
 801b562:	f7fe f923 	bl	80197ac <__sinit>
 801b566:	4b2e      	ldr	r3, [pc, #184]	; (801b620 <__swsetup_r+0xd0>)
 801b568:	429c      	cmp	r4, r3
 801b56a:	d10f      	bne.n	801b58c <__swsetup_r+0x3c>
 801b56c:	686c      	ldr	r4, [r5, #4]
 801b56e:	89a3      	ldrh	r3, [r4, #12]
 801b570:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801b574:	0719      	lsls	r1, r3, #28
 801b576:	d42c      	bmi.n	801b5d2 <__swsetup_r+0x82>
 801b578:	06dd      	lsls	r5, r3, #27
 801b57a:	d411      	bmi.n	801b5a0 <__swsetup_r+0x50>
 801b57c:	2309      	movs	r3, #9
 801b57e:	6033      	str	r3, [r6, #0]
 801b580:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801b584:	81a3      	strh	r3, [r4, #12]
 801b586:	f04f 30ff 	mov.w	r0, #4294967295
 801b58a:	e03e      	b.n	801b60a <__swsetup_r+0xba>
 801b58c:	4b25      	ldr	r3, [pc, #148]	; (801b624 <__swsetup_r+0xd4>)
 801b58e:	429c      	cmp	r4, r3
 801b590:	d101      	bne.n	801b596 <__swsetup_r+0x46>
 801b592:	68ac      	ldr	r4, [r5, #8]
 801b594:	e7eb      	b.n	801b56e <__swsetup_r+0x1e>
 801b596:	4b24      	ldr	r3, [pc, #144]	; (801b628 <__swsetup_r+0xd8>)
 801b598:	429c      	cmp	r4, r3
 801b59a:	bf08      	it	eq
 801b59c:	68ec      	ldreq	r4, [r5, #12]
 801b59e:	e7e6      	b.n	801b56e <__swsetup_r+0x1e>
 801b5a0:	0758      	lsls	r0, r3, #29
 801b5a2:	d512      	bpl.n	801b5ca <__swsetup_r+0x7a>
 801b5a4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801b5a6:	b141      	cbz	r1, 801b5ba <__swsetup_r+0x6a>
 801b5a8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801b5ac:	4299      	cmp	r1, r3
 801b5ae:	d002      	beq.n	801b5b6 <__swsetup_r+0x66>
 801b5b0:	4630      	mov	r0, r6
 801b5b2:	f7fe fa65 	bl	8019a80 <_free_r>
 801b5b6:	2300      	movs	r3, #0
 801b5b8:	6363      	str	r3, [r4, #52]	; 0x34
 801b5ba:	89a3      	ldrh	r3, [r4, #12]
 801b5bc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801b5c0:	81a3      	strh	r3, [r4, #12]
 801b5c2:	2300      	movs	r3, #0
 801b5c4:	6063      	str	r3, [r4, #4]
 801b5c6:	6923      	ldr	r3, [r4, #16]
 801b5c8:	6023      	str	r3, [r4, #0]
 801b5ca:	89a3      	ldrh	r3, [r4, #12]
 801b5cc:	f043 0308 	orr.w	r3, r3, #8
 801b5d0:	81a3      	strh	r3, [r4, #12]
 801b5d2:	6923      	ldr	r3, [r4, #16]
 801b5d4:	b94b      	cbnz	r3, 801b5ea <__swsetup_r+0x9a>
 801b5d6:	89a3      	ldrh	r3, [r4, #12]
 801b5d8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801b5dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801b5e0:	d003      	beq.n	801b5ea <__swsetup_r+0x9a>
 801b5e2:	4621      	mov	r1, r4
 801b5e4:	4630      	mov	r0, r6
 801b5e6:	f7fe f9cb 	bl	8019980 <__smakebuf_r>
 801b5ea:	89a0      	ldrh	r0, [r4, #12]
 801b5ec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801b5f0:	f010 0301 	ands.w	r3, r0, #1
 801b5f4:	d00a      	beq.n	801b60c <__swsetup_r+0xbc>
 801b5f6:	2300      	movs	r3, #0
 801b5f8:	60a3      	str	r3, [r4, #8]
 801b5fa:	6963      	ldr	r3, [r4, #20]
 801b5fc:	425b      	negs	r3, r3
 801b5fe:	61a3      	str	r3, [r4, #24]
 801b600:	6923      	ldr	r3, [r4, #16]
 801b602:	b943      	cbnz	r3, 801b616 <__swsetup_r+0xc6>
 801b604:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801b608:	d1ba      	bne.n	801b580 <__swsetup_r+0x30>
 801b60a:	bd70      	pop	{r4, r5, r6, pc}
 801b60c:	0781      	lsls	r1, r0, #30
 801b60e:	bf58      	it	pl
 801b610:	6963      	ldrpl	r3, [r4, #20]
 801b612:	60a3      	str	r3, [r4, #8]
 801b614:	e7f4      	b.n	801b600 <__swsetup_r+0xb0>
 801b616:	2000      	movs	r0, #0
 801b618:	e7f7      	b.n	801b60a <__swsetup_r+0xba>
 801b61a:	bf00      	nop
 801b61c:	20000884 	.word	0x20000884
 801b620:	080377ac 	.word	0x080377ac
 801b624:	080377cc 	.word	0x080377cc
 801b628:	0803778c 	.word	0x0803778c

0801b62c <_close_r>:
 801b62c:	b538      	push	{r3, r4, r5, lr}
 801b62e:	4d06      	ldr	r5, [pc, #24]	; (801b648 <_close_r+0x1c>)
 801b630:	2300      	movs	r3, #0
 801b632:	4604      	mov	r4, r0
 801b634:	4608      	mov	r0, r1
 801b636:	602b      	str	r3, [r5, #0]
 801b638:	f7f5 fdc9 	bl	80111ce <_close>
 801b63c:	1c43      	adds	r3, r0, #1
 801b63e:	d102      	bne.n	801b646 <_close_r+0x1a>
 801b640:	682b      	ldr	r3, [r5, #0]
 801b642:	b103      	cbz	r3, 801b646 <_close_r+0x1a>
 801b644:	6023      	str	r3, [r4, #0]
 801b646:	bd38      	pop	{r3, r4, r5, pc}
 801b648:	2000c028 	.word	0x2000c028

0801b64c <quorem>:
 801b64c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b650:	6903      	ldr	r3, [r0, #16]
 801b652:	690c      	ldr	r4, [r1, #16]
 801b654:	42a3      	cmp	r3, r4
 801b656:	4607      	mov	r7, r0
 801b658:	f2c0 8081 	blt.w	801b75e <quorem+0x112>
 801b65c:	3c01      	subs	r4, #1
 801b65e:	f101 0814 	add.w	r8, r1, #20
 801b662:	f100 0514 	add.w	r5, r0, #20
 801b666:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801b66a:	9301      	str	r3, [sp, #4]
 801b66c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801b670:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801b674:	3301      	adds	r3, #1
 801b676:	429a      	cmp	r2, r3
 801b678:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801b67c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801b680:	fbb2 f6f3 	udiv	r6, r2, r3
 801b684:	d331      	bcc.n	801b6ea <quorem+0x9e>
 801b686:	f04f 0e00 	mov.w	lr, #0
 801b68a:	4640      	mov	r0, r8
 801b68c:	46ac      	mov	ip, r5
 801b68e:	46f2      	mov	sl, lr
 801b690:	f850 2b04 	ldr.w	r2, [r0], #4
 801b694:	b293      	uxth	r3, r2
 801b696:	fb06 e303 	mla	r3, r6, r3, lr
 801b69a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 801b69e:	b29b      	uxth	r3, r3
 801b6a0:	ebaa 0303 	sub.w	r3, sl, r3
 801b6a4:	0c12      	lsrs	r2, r2, #16
 801b6a6:	f8dc a000 	ldr.w	sl, [ip]
 801b6aa:	fb06 e202 	mla	r2, r6, r2, lr
 801b6ae:	fa13 f38a 	uxtah	r3, r3, sl
 801b6b2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801b6b6:	fa1f fa82 	uxth.w	sl, r2
 801b6ba:	f8dc 2000 	ldr.w	r2, [ip]
 801b6be:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 801b6c2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801b6c6:	b29b      	uxth	r3, r3
 801b6c8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801b6cc:	4581      	cmp	r9, r0
 801b6ce:	f84c 3b04 	str.w	r3, [ip], #4
 801b6d2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801b6d6:	d2db      	bcs.n	801b690 <quorem+0x44>
 801b6d8:	f855 300b 	ldr.w	r3, [r5, fp]
 801b6dc:	b92b      	cbnz	r3, 801b6ea <quorem+0x9e>
 801b6de:	9b01      	ldr	r3, [sp, #4]
 801b6e0:	3b04      	subs	r3, #4
 801b6e2:	429d      	cmp	r5, r3
 801b6e4:	461a      	mov	r2, r3
 801b6e6:	d32e      	bcc.n	801b746 <quorem+0xfa>
 801b6e8:	613c      	str	r4, [r7, #16]
 801b6ea:	4638      	mov	r0, r7
 801b6ec:	f001 fcb6 	bl	801d05c <__mcmp>
 801b6f0:	2800      	cmp	r0, #0
 801b6f2:	db24      	blt.n	801b73e <quorem+0xf2>
 801b6f4:	3601      	adds	r6, #1
 801b6f6:	4628      	mov	r0, r5
 801b6f8:	f04f 0c00 	mov.w	ip, #0
 801b6fc:	f858 2b04 	ldr.w	r2, [r8], #4
 801b700:	f8d0 e000 	ldr.w	lr, [r0]
 801b704:	b293      	uxth	r3, r2
 801b706:	ebac 0303 	sub.w	r3, ip, r3
 801b70a:	0c12      	lsrs	r2, r2, #16
 801b70c:	fa13 f38e 	uxtah	r3, r3, lr
 801b710:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801b714:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801b718:	b29b      	uxth	r3, r3
 801b71a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801b71e:	45c1      	cmp	r9, r8
 801b720:	f840 3b04 	str.w	r3, [r0], #4
 801b724:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801b728:	d2e8      	bcs.n	801b6fc <quorem+0xb0>
 801b72a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801b72e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801b732:	b922      	cbnz	r2, 801b73e <quorem+0xf2>
 801b734:	3b04      	subs	r3, #4
 801b736:	429d      	cmp	r5, r3
 801b738:	461a      	mov	r2, r3
 801b73a:	d30a      	bcc.n	801b752 <quorem+0x106>
 801b73c:	613c      	str	r4, [r7, #16]
 801b73e:	4630      	mov	r0, r6
 801b740:	b003      	add	sp, #12
 801b742:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b746:	6812      	ldr	r2, [r2, #0]
 801b748:	3b04      	subs	r3, #4
 801b74a:	2a00      	cmp	r2, #0
 801b74c:	d1cc      	bne.n	801b6e8 <quorem+0x9c>
 801b74e:	3c01      	subs	r4, #1
 801b750:	e7c7      	b.n	801b6e2 <quorem+0x96>
 801b752:	6812      	ldr	r2, [r2, #0]
 801b754:	3b04      	subs	r3, #4
 801b756:	2a00      	cmp	r2, #0
 801b758:	d1f0      	bne.n	801b73c <quorem+0xf0>
 801b75a:	3c01      	subs	r4, #1
 801b75c:	e7eb      	b.n	801b736 <quorem+0xea>
 801b75e:	2000      	movs	r0, #0
 801b760:	e7ee      	b.n	801b740 <quorem+0xf4>
 801b762:	0000      	movs	r0, r0
 801b764:	0000      	movs	r0, r0
	...

0801b768 <_dtoa_r>:
 801b768:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b76c:	ed2d 8b02 	vpush	{d8}
 801b770:	ec57 6b10 	vmov	r6, r7, d0
 801b774:	b095      	sub	sp, #84	; 0x54
 801b776:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801b778:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 801b77c:	9105      	str	r1, [sp, #20]
 801b77e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 801b782:	4604      	mov	r4, r0
 801b784:	9209      	str	r2, [sp, #36]	; 0x24
 801b786:	930f      	str	r3, [sp, #60]	; 0x3c
 801b788:	b975      	cbnz	r5, 801b7a8 <_dtoa_r+0x40>
 801b78a:	2010      	movs	r0, #16
 801b78c:	f7fe f938 	bl	8019a00 <malloc>
 801b790:	4602      	mov	r2, r0
 801b792:	6260      	str	r0, [r4, #36]	; 0x24
 801b794:	b920      	cbnz	r0, 801b7a0 <_dtoa_r+0x38>
 801b796:	4bb2      	ldr	r3, [pc, #712]	; (801ba60 <_dtoa_r+0x2f8>)
 801b798:	21ea      	movs	r1, #234	; 0xea
 801b79a:	48b2      	ldr	r0, [pc, #712]	; (801ba64 <_dtoa_r+0x2fc>)
 801b79c:	f002 f96c 	bl	801da78 <__assert_func>
 801b7a0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801b7a4:	6005      	str	r5, [r0, #0]
 801b7a6:	60c5      	str	r5, [r0, #12]
 801b7a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801b7aa:	6819      	ldr	r1, [r3, #0]
 801b7ac:	b151      	cbz	r1, 801b7c4 <_dtoa_r+0x5c>
 801b7ae:	685a      	ldr	r2, [r3, #4]
 801b7b0:	604a      	str	r2, [r1, #4]
 801b7b2:	2301      	movs	r3, #1
 801b7b4:	4093      	lsls	r3, r2
 801b7b6:	608b      	str	r3, [r1, #8]
 801b7b8:	4620      	mov	r0, r4
 801b7ba:	f001 f9c7 	bl	801cb4c <_Bfree>
 801b7be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801b7c0:	2200      	movs	r2, #0
 801b7c2:	601a      	str	r2, [r3, #0]
 801b7c4:	1e3b      	subs	r3, r7, #0
 801b7c6:	bfb9      	ittee	lt
 801b7c8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801b7cc:	9303      	strlt	r3, [sp, #12]
 801b7ce:	2300      	movge	r3, #0
 801b7d0:	f8c8 3000 	strge.w	r3, [r8]
 801b7d4:	f8dd 900c 	ldr.w	r9, [sp, #12]
 801b7d8:	4ba3      	ldr	r3, [pc, #652]	; (801ba68 <_dtoa_r+0x300>)
 801b7da:	bfbc      	itt	lt
 801b7dc:	2201      	movlt	r2, #1
 801b7de:	f8c8 2000 	strlt.w	r2, [r8]
 801b7e2:	ea33 0309 	bics.w	r3, r3, r9
 801b7e6:	d11b      	bne.n	801b820 <_dtoa_r+0xb8>
 801b7e8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801b7ea:	f242 730f 	movw	r3, #9999	; 0x270f
 801b7ee:	6013      	str	r3, [r2, #0]
 801b7f0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801b7f4:	4333      	orrs	r3, r6
 801b7f6:	f000 857a 	beq.w	801c2ee <_dtoa_r+0xb86>
 801b7fa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801b7fc:	b963      	cbnz	r3, 801b818 <_dtoa_r+0xb0>
 801b7fe:	4b9b      	ldr	r3, [pc, #620]	; (801ba6c <_dtoa_r+0x304>)
 801b800:	e024      	b.n	801b84c <_dtoa_r+0xe4>
 801b802:	4b9b      	ldr	r3, [pc, #620]	; (801ba70 <_dtoa_r+0x308>)
 801b804:	9300      	str	r3, [sp, #0]
 801b806:	3308      	adds	r3, #8
 801b808:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801b80a:	6013      	str	r3, [r2, #0]
 801b80c:	9800      	ldr	r0, [sp, #0]
 801b80e:	b015      	add	sp, #84	; 0x54
 801b810:	ecbd 8b02 	vpop	{d8}
 801b814:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b818:	4b94      	ldr	r3, [pc, #592]	; (801ba6c <_dtoa_r+0x304>)
 801b81a:	9300      	str	r3, [sp, #0]
 801b81c:	3303      	adds	r3, #3
 801b81e:	e7f3      	b.n	801b808 <_dtoa_r+0xa0>
 801b820:	ed9d 7b02 	vldr	d7, [sp, #8]
 801b824:	2200      	movs	r2, #0
 801b826:	ec51 0b17 	vmov	r0, r1, d7
 801b82a:	2300      	movs	r3, #0
 801b82c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 801b830:	f7e9 f9da 	bl	8004be8 <__aeabi_dcmpeq>
 801b834:	4680      	mov	r8, r0
 801b836:	b158      	cbz	r0, 801b850 <_dtoa_r+0xe8>
 801b838:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801b83a:	2301      	movs	r3, #1
 801b83c:	6013      	str	r3, [r2, #0]
 801b83e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801b840:	2b00      	cmp	r3, #0
 801b842:	f000 8551 	beq.w	801c2e8 <_dtoa_r+0xb80>
 801b846:	488b      	ldr	r0, [pc, #556]	; (801ba74 <_dtoa_r+0x30c>)
 801b848:	6018      	str	r0, [r3, #0]
 801b84a:	1e43      	subs	r3, r0, #1
 801b84c:	9300      	str	r3, [sp, #0]
 801b84e:	e7dd      	b.n	801b80c <_dtoa_r+0xa4>
 801b850:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 801b854:	aa12      	add	r2, sp, #72	; 0x48
 801b856:	a913      	add	r1, sp, #76	; 0x4c
 801b858:	4620      	mov	r0, r4
 801b85a:	f001 fd1f 	bl	801d29c <__d2b>
 801b85e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801b862:	4683      	mov	fp, r0
 801b864:	2d00      	cmp	r5, #0
 801b866:	d07c      	beq.n	801b962 <_dtoa_r+0x1fa>
 801b868:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b86a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 801b86e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801b872:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 801b876:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 801b87a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 801b87e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801b882:	4b7d      	ldr	r3, [pc, #500]	; (801ba78 <_dtoa_r+0x310>)
 801b884:	2200      	movs	r2, #0
 801b886:	4630      	mov	r0, r6
 801b888:	4639      	mov	r1, r7
 801b88a:	f7e8 fd8d 	bl	80043a8 <__aeabi_dsub>
 801b88e:	a36e      	add	r3, pc, #440	; (adr r3, 801ba48 <_dtoa_r+0x2e0>)
 801b890:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b894:	f7e8 ff40 	bl	8004718 <__aeabi_dmul>
 801b898:	a36d      	add	r3, pc, #436	; (adr r3, 801ba50 <_dtoa_r+0x2e8>)
 801b89a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b89e:	f7e8 fd85 	bl	80043ac <__adddf3>
 801b8a2:	4606      	mov	r6, r0
 801b8a4:	4628      	mov	r0, r5
 801b8a6:	460f      	mov	r7, r1
 801b8a8:	f7e8 fecc 	bl	8004644 <__aeabi_i2d>
 801b8ac:	a36a      	add	r3, pc, #424	; (adr r3, 801ba58 <_dtoa_r+0x2f0>)
 801b8ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b8b2:	f7e8 ff31 	bl	8004718 <__aeabi_dmul>
 801b8b6:	4602      	mov	r2, r0
 801b8b8:	460b      	mov	r3, r1
 801b8ba:	4630      	mov	r0, r6
 801b8bc:	4639      	mov	r1, r7
 801b8be:	f7e8 fd75 	bl	80043ac <__adddf3>
 801b8c2:	4606      	mov	r6, r0
 801b8c4:	460f      	mov	r7, r1
 801b8c6:	f7e9 f9d7 	bl	8004c78 <__aeabi_d2iz>
 801b8ca:	2200      	movs	r2, #0
 801b8cc:	4682      	mov	sl, r0
 801b8ce:	2300      	movs	r3, #0
 801b8d0:	4630      	mov	r0, r6
 801b8d2:	4639      	mov	r1, r7
 801b8d4:	f7e9 f992 	bl	8004bfc <__aeabi_dcmplt>
 801b8d8:	b148      	cbz	r0, 801b8ee <_dtoa_r+0x186>
 801b8da:	4650      	mov	r0, sl
 801b8dc:	f7e8 feb2 	bl	8004644 <__aeabi_i2d>
 801b8e0:	4632      	mov	r2, r6
 801b8e2:	463b      	mov	r3, r7
 801b8e4:	f7e9 f980 	bl	8004be8 <__aeabi_dcmpeq>
 801b8e8:	b908      	cbnz	r0, 801b8ee <_dtoa_r+0x186>
 801b8ea:	f10a 3aff 	add.w	sl, sl, #4294967295
 801b8ee:	f1ba 0f16 	cmp.w	sl, #22
 801b8f2:	d854      	bhi.n	801b99e <_dtoa_r+0x236>
 801b8f4:	4b61      	ldr	r3, [pc, #388]	; (801ba7c <_dtoa_r+0x314>)
 801b8f6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801b8fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b8fe:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801b902:	f7e9 f97b 	bl	8004bfc <__aeabi_dcmplt>
 801b906:	2800      	cmp	r0, #0
 801b908:	d04b      	beq.n	801b9a2 <_dtoa_r+0x23a>
 801b90a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801b90e:	2300      	movs	r3, #0
 801b910:	930e      	str	r3, [sp, #56]	; 0x38
 801b912:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801b914:	1b5d      	subs	r5, r3, r5
 801b916:	1e6b      	subs	r3, r5, #1
 801b918:	9304      	str	r3, [sp, #16]
 801b91a:	bf43      	ittte	mi
 801b91c:	2300      	movmi	r3, #0
 801b91e:	f1c5 0801 	rsbmi	r8, r5, #1
 801b922:	9304      	strmi	r3, [sp, #16]
 801b924:	f04f 0800 	movpl.w	r8, #0
 801b928:	f1ba 0f00 	cmp.w	sl, #0
 801b92c:	db3b      	blt.n	801b9a6 <_dtoa_r+0x23e>
 801b92e:	9b04      	ldr	r3, [sp, #16]
 801b930:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 801b934:	4453      	add	r3, sl
 801b936:	9304      	str	r3, [sp, #16]
 801b938:	2300      	movs	r3, #0
 801b93a:	9306      	str	r3, [sp, #24]
 801b93c:	9b05      	ldr	r3, [sp, #20]
 801b93e:	2b09      	cmp	r3, #9
 801b940:	d869      	bhi.n	801ba16 <_dtoa_r+0x2ae>
 801b942:	2b05      	cmp	r3, #5
 801b944:	bfc4      	itt	gt
 801b946:	3b04      	subgt	r3, #4
 801b948:	9305      	strgt	r3, [sp, #20]
 801b94a:	9b05      	ldr	r3, [sp, #20]
 801b94c:	f1a3 0302 	sub.w	r3, r3, #2
 801b950:	bfcc      	ite	gt
 801b952:	2500      	movgt	r5, #0
 801b954:	2501      	movle	r5, #1
 801b956:	2b03      	cmp	r3, #3
 801b958:	d869      	bhi.n	801ba2e <_dtoa_r+0x2c6>
 801b95a:	e8df f003 	tbb	[pc, r3]
 801b95e:	4e2c      	.short	0x4e2c
 801b960:	5a4c      	.short	0x5a4c
 801b962:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 801b966:	441d      	add	r5, r3
 801b968:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801b96c:	2b20      	cmp	r3, #32
 801b96e:	bfc1      	itttt	gt
 801b970:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801b974:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 801b978:	fa09 f303 	lslgt.w	r3, r9, r3
 801b97c:	fa26 f000 	lsrgt.w	r0, r6, r0
 801b980:	bfda      	itte	le
 801b982:	f1c3 0320 	rsble	r3, r3, #32
 801b986:	fa06 f003 	lslle.w	r0, r6, r3
 801b98a:	4318      	orrgt	r0, r3
 801b98c:	f7e8 fe4a 	bl	8004624 <__aeabi_ui2d>
 801b990:	2301      	movs	r3, #1
 801b992:	4606      	mov	r6, r0
 801b994:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 801b998:	3d01      	subs	r5, #1
 801b99a:	9310      	str	r3, [sp, #64]	; 0x40
 801b99c:	e771      	b.n	801b882 <_dtoa_r+0x11a>
 801b99e:	2301      	movs	r3, #1
 801b9a0:	e7b6      	b.n	801b910 <_dtoa_r+0x1a8>
 801b9a2:	900e      	str	r0, [sp, #56]	; 0x38
 801b9a4:	e7b5      	b.n	801b912 <_dtoa_r+0x1aa>
 801b9a6:	f1ca 0300 	rsb	r3, sl, #0
 801b9aa:	9306      	str	r3, [sp, #24]
 801b9ac:	2300      	movs	r3, #0
 801b9ae:	eba8 080a 	sub.w	r8, r8, sl
 801b9b2:	930d      	str	r3, [sp, #52]	; 0x34
 801b9b4:	e7c2      	b.n	801b93c <_dtoa_r+0x1d4>
 801b9b6:	2300      	movs	r3, #0
 801b9b8:	9308      	str	r3, [sp, #32]
 801b9ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b9bc:	2b00      	cmp	r3, #0
 801b9be:	dc39      	bgt.n	801ba34 <_dtoa_r+0x2cc>
 801b9c0:	f04f 0901 	mov.w	r9, #1
 801b9c4:	f8cd 9004 	str.w	r9, [sp, #4]
 801b9c8:	464b      	mov	r3, r9
 801b9ca:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 801b9ce:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801b9d0:	2200      	movs	r2, #0
 801b9d2:	6042      	str	r2, [r0, #4]
 801b9d4:	2204      	movs	r2, #4
 801b9d6:	f102 0614 	add.w	r6, r2, #20
 801b9da:	429e      	cmp	r6, r3
 801b9dc:	6841      	ldr	r1, [r0, #4]
 801b9de:	d92f      	bls.n	801ba40 <_dtoa_r+0x2d8>
 801b9e0:	4620      	mov	r0, r4
 801b9e2:	f001 f873 	bl	801cacc <_Balloc>
 801b9e6:	9000      	str	r0, [sp, #0]
 801b9e8:	2800      	cmp	r0, #0
 801b9ea:	d14b      	bne.n	801ba84 <_dtoa_r+0x31c>
 801b9ec:	4b24      	ldr	r3, [pc, #144]	; (801ba80 <_dtoa_r+0x318>)
 801b9ee:	4602      	mov	r2, r0
 801b9f0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 801b9f4:	e6d1      	b.n	801b79a <_dtoa_r+0x32>
 801b9f6:	2301      	movs	r3, #1
 801b9f8:	e7de      	b.n	801b9b8 <_dtoa_r+0x250>
 801b9fa:	2300      	movs	r3, #0
 801b9fc:	9308      	str	r3, [sp, #32]
 801b9fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ba00:	eb0a 0903 	add.w	r9, sl, r3
 801ba04:	f109 0301 	add.w	r3, r9, #1
 801ba08:	2b01      	cmp	r3, #1
 801ba0a:	9301      	str	r3, [sp, #4]
 801ba0c:	bfb8      	it	lt
 801ba0e:	2301      	movlt	r3, #1
 801ba10:	e7dd      	b.n	801b9ce <_dtoa_r+0x266>
 801ba12:	2301      	movs	r3, #1
 801ba14:	e7f2      	b.n	801b9fc <_dtoa_r+0x294>
 801ba16:	2501      	movs	r5, #1
 801ba18:	2300      	movs	r3, #0
 801ba1a:	9305      	str	r3, [sp, #20]
 801ba1c:	9508      	str	r5, [sp, #32]
 801ba1e:	f04f 39ff 	mov.w	r9, #4294967295
 801ba22:	2200      	movs	r2, #0
 801ba24:	f8cd 9004 	str.w	r9, [sp, #4]
 801ba28:	2312      	movs	r3, #18
 801ba2a:	9209      	str	r2, [sp, #36]	; 0x24
 801ba2c:	e7cf      	b.n	801b9ce <_dtoa_r+0x266>
 801ba2e:	2301      	movs	r3, #1
 801ba30:	9308      	str	r3, [sp, #32]
 801ba32:	e7f4      	b.n	801ba1e <_dtoa_r+0x2b6>
 801ba34:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 801ba38:	f8cd 9004 	str.w	r9, [sp, #4]
 801ba3c:	464b      	mov	r3, r9
 801ba3e:	e7c6      	b.n	801b9ce <_dtoa_r+0x266>
 801ba40:	3101      	adds	r1, #1
 801ba42:	6041      	str	r1, [r0, #4]
 801ba44:	0052      	lsls	r2, r2, #1
 801ba46:	e7c6      	b.n	801b9d6 <_dtoa_r+0x26e>
 801ba48:	636f4361 	.word	0x636f4361
 801ba4c:	3fd287a7 	.word	0x3fd287a7
 801ba50:	8b60c8b3 	.word	0x8b60c8b3
 801ba54:	3fc68a28 	.word	0x3fc68a28
 801ba58:	509f79fb 	.word	0x509f79fb
 801ba5c:	3fd34413 	.word	0x3fd34413
 801ba60:	08037885 	.word	0x08037885
 801ba64:	0803789c 	.word	0x0803789c
 801ba68:	7ff00000 	.word	0x7ff00000
 801ba6c:	08037881 	.word	0x08037881
 801ba70:	08037878 	.word	0x08037878
 801ba74:	0802205e 	.word	0x0802205e
 801ba78:	3ff80000 	.word	0x3ff80000
 801ba7c:	08037a18 	.word	0x08037a18
 801ba80:	080378fb 	.word	0x080378fb
 801ba84:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801ba86:	9a00      	ldr	r2, [sp, #0]
 801ba88:	601a      	str	r2, [r3, #0]
 801ba8a:	9b01      	ldr	r3, [sp, #4]
 801ba8c:	2b0e      	cmp	r3, #14
 801ba8e:	f200 80ad 	bhi.w	801bbec <_dtoa_r+0x484>
 801ba92:	2d00      	cmp	r5, #0
 801ba94:	f000 80aa 	beq.w	801bbec <_dtoa_r+0x484>
 801ba98:	f1ba 0f00 	cmp.w	sl, #0
 801ba9c:	dd36      	ble.n	801bb0c <_dtoa_r+0x3a4>
 801ba9e:	4ac3      	ldr	r2, [pc, #780]	; (801bdac <_dtoa_r+0x644>)
 801baa0:	f00a 030f 	and.w	r3, sl, #15
 801baa4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801baa8:	ed93 7b00 	vldr	d7, [r3]
 801baac:	f41a 7f80 	tst.w	sl, #256	; 0x100
 801bab0:	ea4f 172a 	mov.w	r7, sl, asr #4
 801bab4:	eeb0 8a47 	vmov.f32	s16, s14
 801bab8:	eef0 8a67 	vmov.f32	s17, s15
 801babc:	d016      	beq.n	801baec <_dtoa_r+0x384>
 801babe:	4bbc      	ldr	r3, [pc, #752]	; (801bdb0 <_dtoa_r+0x648>)
 801bac0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801bac4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801bac8:	f7e8 ff50 	bl	800496c <__aeabi_ddiv>
 801bacc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801bad0:	f007 070f 	and.w	r7, r7, #15
 801bad4:	2503      	movs	r5, #3
 801bad6:	4eb6      	ldr	r6, [pc, #728]	; (801bdb0 <_dtoa_r+0x648>)
 801bad8:	b957      	cbnz	r7, 801baf0 <_dtoa_r+0x388>
 801bada:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801bade:	ec53 2b18 	vmov	r2, r3, d8
 801bae2:	f7e8 ff43 	bl	800496c <__aeabi_ddiv>
 801bae6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801baea:	e029      	b.n	801bb40 <_dtoa_r+0x3d8>
 801baec:	2502      	movs	r5, #2
 801baee:	e7f2      	b.n	801bad6 <_dtoa_r+0x36e>
 801baf0:	07f9      	lsls	r1, r7, #31
 801baf2:	d508      	bpl.n	801bb06 <_dtoa_r+0x39e>
 801baf4:	ec51 0b18 	vmov	r0, r1, d8
 801baf8:	e9d6 2300 	ldrd	r2, r3, [r6]
 801bafc:	f7e8 fe0c 	bl	8004718 <__aeabi_dmul>
 801bb00:	ec41 0b18 	vmov	d8, r0, r1
 801bb04:	3501      	adds	r5, #1
 801bb06:	107f      	asrs	r7, r7, #1
 801bb08:	3608      	adds	r6, #8
 801bb0a:	e7e5      	b.n	801bad8 <_dtoa_r+0x370>
 801bb0c:	f000 80a6 	beq.w	801bc5c <_dtoa_r+0x4f4>
 801bb10:	f1ca 0600 	rsb	r6, sl, #0
 801bb14:	4ba5      	ldr	r3, [pc, #660]	; (801bdac <_dtoa_r+0x644>)
 801bb16:	4fa6      	ldr	r7, [pc, #664]	; (801bdb0 <_dtoa_r+0x648>)
 801bb18:	f006 020f 	and.w	r2, r6, #15
 801bb1c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801bb20:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bb24:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801bb28:	f7e8 fdf6 	bl	8004718 <__aeabi_dmul>
 801bb2c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801bb30:	1136      	asrs	r6, r6, #4
 801bb32:	2300      	movs	r3, #0
 801bb34:	2502      	movs	r5, #2
 801bb36:	2e00      	cmp	r6, #0
 801bb38:	f040 8085 	bne.w	801bc46 <_dtoa_r+0x4de>
 801bb3c:	2b00      	cmp	r3, #0
 801bb3e:	d1d2      	bne.n	801bae6 <_dtoa_r+0x37e>
 801bb40:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801bb42:	2b00      	cmp	r3, #0
 801bb44:	f000 808c 	beq.w	801bc60 <_dtoa_r+0x4f8>
 801bb48:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801bb4c:	4b99      	ldr	r3, [pc, #612]	; (801bdb4 <_dtoa_r+0x64c>)
 801bb4e:	2200      	movs	r2, #0
 801bb50:	4630      	mov	r0, r6
 801bb52:	4639      	mov	r1, r7
 801bb54:	f7e9 f852 	bl	8004bfc <__aeabi_dcmplt>
 801bb58:	2800      	cmp	r0, #0
 801bb5a:	f000 8081 	beq.w	801bc60 <_dtoa_r+0x4f8>
 801bb5e:	9b01      	ldr	r3, [sp, #4]
 801bb60:	2b00      	cmp	r3, #0
 801bb62:	d07d      	beq.n	801bc60 <_dtoa_r+0x4f8>
 801bb64:	f1b9 0f00 	cmp.w	r9, #0
 801bb68:	dd3c      	ble.n	801bbe4 <_dtoa_r+0x47c>
 801bb6a:	f10a 33ff 	add.w	r3, sl, #4294967295
 801bb6e:	9307      	str	r3, [sp, #28]
 801bb70:	2200      	movs	r2, #0
 801bb72:	4b91      	ldr	r3, [pc, #580]	; (801bdb8 <_dtoa_r+0x650>)
 801bb74:	4630      	mov	r0, r6
 801bb76:	4639      	mov	r1, r7
 801bb78:	f7e8 fdce 	bl	8004718 <__aeabi_dmul>
 801bb7c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801bb80:	3501      	adds	r5, #1
 801bb82:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 801bb86:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801bb8a:	4628      	mov	r0, r5
 801bb8c:	f7e8 fd5a 	bl	8004644 <__aeabi_i2d>
 801bb90:	4632      	mov	r2, r6
 801bb92:	463b      	mov	r3, r7
 801bb94:	f7e8 fdc0 	bl	8004718 <__aeabi_dmul>
 801bb98:	4b88      	ldr	r3, [pc, #544]	; (801bdbc <_dtoa_r+0x654>)
 801bb9a:	2200      	movs	r2, #0
 801bb9c:	f7e8 fc06 	bl	80043ac <__adddf3>
 801bba0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 801bba4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801bba8:	9303      	str	r3, [sp, #12]
 801bbaa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801bbac:	2b00      	cmp	r3, #0
 801bbae:	d15c      	bne.n	801bc6a <_dtoa_r+0x502>
 801bbb0:	4b83      	ldr	r3, [pc, #524]	; (801bdc0 <_dtoa_r+0x658>)
 801bbb2:	2200      	movs	r2, #0
 801bbb4:	4630      	mov	r0, r6
 801bbb6:	4639      	mov	r1, r7
 801bbb8:	f7e8 fbf6 	bl	80043a8 <__aeabi_dsub>
 801bbbc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801bbc0:	4606      	mov	r6, r0
 801bbc2:	460f      	mov	r7, r1
 801bbc4:	f7e9 f838 	bl	8004c38 <__aeabi_dcmpgt>
 801bbc8:	2800      	cmp	r0, #0
 801bbca:	f040 8296 	bne.w	801c0fa <_dtoa_r+0x992>
 801bbce:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 801bbd2:	4630      	mov	r0, r6
 801bbd4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801bbd8:	4639      	mov	r1, r7
 801bbda:	f7e9 f80f 	bl	8004bfc <__aeabi_dcmplt>
 801bbde:	2800      	cmp	r0, #0
 801bbe0:	f040 8288 	bne.w	801c0f4 <_dtoa_r+0x98c>
 801bbe4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801bbe8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801bbec:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801bbee:	2b00      	cmp	r3, #0
 801bbf0:	f2c0 8158 	blt.w	801bea4 <_dtoa_r+0x73c>
 801bbf4:	f1ba 0f0e 	cmp.w	sl, #14
 801bbf8:	f300 8154 	bgt.w	801bea4 <_dtoa_r+0x73c>
 801bbfc:	4b6b      	ldr	r3, [pc, #428]	; (801bdac <_dtoa_r+0x644>)
 801bbfe:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801bc02:	e9d3 8900 	ldrd	r8, r9, [r3]
 801bc06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bc08:	2b00      	cmp	r3, #0
 801bc0a:	f280 80e3 	bge.w	801bdd4 <_dtoa_r+0x66c>
 801bc0e:	9b01      	ldr	r3, [sp, #4]
 801bc10:	2b00      	cmp	r3, #0
 801bc12:	f300 80df 	bgt.w	801bdd4 <_dtoa_r+0x66c>
 801bc16:	f040 826d 	bne.w	801c0f4 <_dtoa_r+0x98c>
 801bc1a:	4b69      	ldr	r3, [pc, #420]	; (801bdc0 <_dtoa_r+0x658>)
 801bc1c:	2200      	movs	r2, #0
 801bc1e:	4640      	mov	r0, r8
 801bc20:	4649      	mov	r1, r9
 801bc22:	f7e8 fd79 	bl	8004718 <__aeabi_dmul>
 801bc26:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801bc2a:	f7e8 fffb 	bl	8004c24 <__aeabi_dcmpge>
 801bc2e:	9e01      	ldr	r6, [sp, #4]
 801bc30:	4637      	mov	r7, r6
 801bc32:	2800      	cmp	r0, #0
 801bc34:	f040 8243 	bne.w	801c0be <_dtoa_r+0x956>
 801bc38:	9d00      	ldr	r5, [sp, #0]
 801bc3a:	2331      	movs	r3, #49	; 0x31
 801bc3c:	f805 3b01 	strb.w	r3, [r5], #1
 801bc40:	f10a 0a01 	add.w	sl, sl, #1
 801bc44:	e23f      	b.n	801c0c6 <_dtoa_r+0x95e>
 801bc46:	07f2      	lsls	r2, r6, #31
 801bc48:	d505      	bpl.n	801bc56 <_dtoa_r+0x4ee>
 801bc4a:	e9d7 2300 	ldrd	r2, r3, [r7]
 801bc4e:	f7e8 fd63 	bl	8004718 <__aeabi_dmul>
 801bc52:	3501      	adds	r5, #1
 801bc54:	2301      	movs	r3, #1
 801bc56:	1076      	asrs	r6, r6, #1
 801bc58:	3708      	adds	r7, #8
 801bc5a:	e76c      	b.n	801bb36 <_dtoa_r+0x3ce>
 801bc5c:	2502      	movs	r5, #2
 801bc5e:	e76f      	b.n	801bb40 <_dtoa_r+0x3d8>
 801bc60:	9b01      	ldr	r3, [sp, #4]
 801bc62:	f8cd a01c 	str.w	sl, [sp, #28]
 801bc66:	930c      	str	r3, [sp, #48]	; 0x30
 801bc68:	e78d      	b.n	801bb86 <_dtoa_r+0x41e>
 801bc6a:	9900      	ldr	r1, [sp, #0]
 801bc6c:	980c      	ldr	r0, [sp, #48]	; 0x30
 801bc6e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801bc70:	4b4e      	ldr	r3, [pc, #312]	; (801bdac <_dtoa_r+0x644>)
 801bc72:	ed9d 7b02 	vldr	d7, [sp, #8]
 801bc76:	4401      	add	r1, r0
 801bc78:	9102      	str	r1, [sp, #8]
 801bc7a:	9908      	ldr	r1, [sp, #32]
 801bc7c:	eeb0 8a47 	vmov.f32	s16, s14
 801bc80:	eef0 8a67 	vmov.f32	s17, s15
 801bc84:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801bc88:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801bc8c:	2900      	cmp	r1, #0
 801bc8e:	d045      	beq.n	801bd1c <_dtoa_r+0x5b4>
 801bc90:	494c      	ldr	r1, [pc, #304]	; (801bdc4 <_dtoa_r+0x65c>)
 801bc92:	2000      	movs	r0, #0
 801bc94:	f7e8 fe6a 	bl	800496c <__aeabi_ddiv>
 801bc98:	ec53 2b18 	vmov	r2, r3, d8
 801bc9c:	f7e8 fb84 	bl	80043a8 <__aeabi_dsub>
 801bca0:	9d00      	ldr	r5, [sp, #0]
 801bca2:	ec41 0b18 	vmov	d8, r0, r1
 801bca6:	4639      	mov	r1, r7
 801bca8:	4630      	mov	r0, r6
 801bcaa:	f7e8 ffe5 	bl	8004c78 <__aeabi_d2iz>
 801bcae:	900c      	str	r0, [sp, #48]	; 0x30
 801bcb0:	f7e8 fcc8 	bl	8004644 <__aeabi_i2d>
 801bcb4:	4602      	mov	r2, r0
 801bcb6:	460b      	mov	r3, r1
 801bcb8:	4630      	mov	r0, r6
 801bcba:	4639      	mov	r1, r7
 801bcbc:	f7e8 fb74 	bl	80043a8 <__aeabi_dsub>
 801bcc0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801bcc2:	3330      	adds	r3, #48	; 0x30
 801bcc4:	f805 3b01 	strb.w	r3, [r5], #1
 801bcc8:	ec53 2b18 	vmov	r2, r3, d8
 801bccc:	4606      	mov	r6, r0
 801bcce:	460f      	mov	r7, r1
 801bcd0:	f7e8 ff94 	bl	8004bfc <__aeabi_dcmplt>
 801bcd4:	2800      	cmp	r0, #0
 801bcd6:	d165      	bne.n	801bda4 <_dtoa_r+0x63c>
 801bcd8:	4632      	mov	r2, r6
 801bcda:	463b      	mov	r3, r7
 801bcdc:	4935      	ldr	r1, [pc, #212]	; (801bdb4 <_dtoa_r+0x64c>)
 801bcde:	2000      	movs	r0, #0
 801bce0:	f7e8 fb62 	bl	80043a8 <__aeabi_dsub>
 801bce4:	ec53 2b18 	vmov	r2, r3, d8
 801bce8:	f7e8 ff88 	bl	8004bfc <__aeabi_dcmplt>
 801bcec:	2800      	cmp	r0, #0
 801bcee:	f040 80b9 	bne.w	801be64 <_dtoa_r+0x6fc>
 801bcf2:	9b02      	ldr	r3, [sp, #8]
 801bcf4:	429d      	cmp	r5, r3
 801bcf6:	f43f af75 	beq.w	801bbe4 <_dtoa_r+0x47c>
 801bcfa:	4b2f      	ldr	r3, [pc, #188]	; (801bdb8 <_dtoa_r+0x650>)
 801bcfc:	ec51 0b18 	vmov	r0, r1, d8
 801bd00:	2200      	movs	r2, #0
 801bd02:	f7e8 fd09 	bl	8004718 <__aeabi_dmul>
 801bd06:	4b2c      	ldr	r3, [pc, #176]	; (801bdb8 <_dtoa_r+0x650>)
 801bd08:	ec41 0b18 	vmov	d8, r0, r1
 801bd0c:	2200      	movs	r2, #0
 801bd0e:	4630      	mov	r0, r6
 801bd10:	4639      	mov	r1, r7
 801bd12:	f7e8 fd01 	bl	8004718 <__aeabi_dmul>
 801bd16:	4606      	mov	r6, r0
 801bd18:	460f      	mov	r7, r1
 801bd1a:	e7c4      	b.n	801bca6 <_dtoa_r+0x53e>
 801bd1c:	ec51 0b17 	vmov	r0, r1, d7
 801bd20:	f7e8 fcfa 	bl	8004718 <__aeabi_dmul>
 801bd24:	9b02      	ldr	r3, [sp, #8]
 801bd26:	9d00      	ldr	r5, [sp, #0]
 801bd28:	930c      	str	r3, [sp, #48]	; 0x30
 801bd2a:	ec41 0b18 	vmov	d8, r0, r1
 801bd2e:	4639      	mov	r1, r7
 801bd30:	4630      	mov	r0, r6
 801bd32:	f7e8 ffa1 	bl	8004c78 <__aeabi_d2iz>
 801bd36:	9011      	str	r0, [sp, #68]	; 0x44
 801bd38:	f7e8 fc84 	bl	8004644 <__aeabi_i2d>
 801bd3c:	4602      	mov	r2, r0
 801bd3e:	460b      	mov	r3, r1
 801bd40:	4630      	mov	r0, r6
 801bd42:	4639      	mov	r1, r7
 801bd44:	f7e8 fb30 	bl	80043a8 <__aeabi_dsub>
 801bd48:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801bd4a:	3330      	adds	r3, #48	; 0x30
 801bd4c:	f805 3b01 	strb.w	r3, [r5], #1
 801bd50:	9b02      	ldr	r3, [sp, #8]
 801bd52:	429d      	cmp	r5, r3
 801bd54:	4606      	mov	r6, r0
 801bd56:	460f      	mov	r7, r1
 801bd58:	f04f 0200 	mov.w	r2, #0
 801bd5c:	d134      	bne.n	801bdc8 <_dtoa_r+0x660>
 801bd5e:	4b19      	ldr	r3, [pc, #100]	; (801bdc4 <_dtoa_r+0x65c>)
 801bd60:	ec51 0b18 	vmov	r0, r1, d8
 801bd64:	f7e8 fb22 	bl	80043ac <__adddf3>
 801bd68:	4602      	mov	r2, r0
 801bd6a:	460b      	mov	r3, r1
 801bd6c:	4630      	mov	r0, r6
 801bd6e:	4639      	mov	r1, r7
 801bd70:	f7e8 ff62 	bl	8004c38 <__aeabi_dcmpgt>
 801bd74:	2800      	cmp	r0, #0
 801bd76:	d175      	bne.n	801be64 <_dtoa_r+0x6fc>
 801bd78:	ec53 2b18 	vmov	r2, r3, d8
 801bd7c:	4911      	ldr	r1, [pc, #68]	; (801bdc4 <_dtoa_r+0x65c>)
 801bd7e:	2000      	movs	r0, #0
 801bd80:	f7e8 fb12 	bl	80043a8 <__aeabi_dsub>
 801bd84:	4602      	mov	r2, r0
 801bd86:	460b      	mov	r3, r1
 801bd88:	4630      	mov	r0, r6
 801bd8a:	4639      	mov	r1, r7
 801bd8c:	f7e8 ff36 	bl	8004bfc <__aeabi_dcmplt>
 801bd90:	2800      	cmp	r0, #0
 801bd92:	f43f af27 	beq.w	801bbe4 <_dtoa_r+0x47c>
 801bd96:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801bd98:	1e6b      	subs	r3, r5, #1
 801bd9a:	930c      	str	r3, [sp, #48]	; 0x30
 801bd9c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801bda0:	2b30      	cmp	r3, #48	; 0x30
 801bda2:	d0f8      	beq.n	801bd96 <_dtoa_r+0x62e>
 801bda4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 801bda8:	e04a      	b.n	801be40 <_dtoa_r+0x6d8>
 801bdaa:	bf00      	nop
 801bdac:	08037a18 	.word	0x08037a18
 801bdb0:	080379f0 	.word	0x080379f0
 801bdb4:	3ff00000 	.word	0x3ff00000
 801bdb8:	40240000 	.word	0x40240000
 801bdbc:	401c0000 	.word	0x401c0000
 801bdc0:	40140000 	.word	0x40140000
 801bdc4:	3fe00000 	.word	0x3fe00000
 801bdc8:	4baf      	ldr	r3, [pc, #700]	; (801c088 <_dtoa_r+0x920>)
 801bdca:	f7e8 fca5 	bl	8004718 <__aeabi_dmul>
 801bdce:	4606      	mov	r6, r0
 801bdd0:	460f      	mov	r7, r1
 801bdd2:	e7ac      	b.n	801bd2e <_dtoa_r+0x5c6>
 801bdd4:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801bdd8:	9d00      	ldr	r5, [sp, #0]
 801bdda:	4642      	mov	r2, r8
 801bddc:	464b      	mov	r3, r9
 801bdde:	4630      	mov	r0, r6
 801bde0:	4639      	mov	r1, r7
 801bde2:	f7e8 fdc3 	bl	800496c <__aeabi_ddiv>
 801bde6:	f7e8 ff47 	bl	8004c78 <__aeabi_d2iz>
 801bdea:	9002      	str	r0, [sp, #8]
 801bdec:	f7e8 fc2a 	bl	8004644 <__aeabi_i2d>
 801bdf0:	4642      	mov	r2, r8
 801bdf2:	464b      	mov	r3, r9
 801bdf4:	f7e8 fc90 	bl	8004718 <__aeabi_dmul>
 801bdf8:	4602      	mov	r2, r0
 801bdfa:	460b      	mov	r3, r1
 801bdfc:	4630      	mov	r0, r6
 801bdfe:	4639      	mov	r1, r7
 801be00:	f7e8 fad2 	bl	80043a8 <__aeabi_dsub>
 801be04:	9e02      	ldr	r6, [sp, #8]
 801be06:	9f01      	ldr	r7, [sp, #4]
 801be08:	3630      	adds	r6, #48	; 0x30
 801be0a:	f805 6b01 	strb.w	r6, [r5], #1
 801be0e:	9e00      	ldr	r6, [sp, #0]
 801be10:	1bae      	subs	r6, r5, r6
 801be12:	42b7      	cmp	r7, r6
 801be14:	4602      	mov	r2, r0
 801be16:	460b      	mov	r3, r1
 801be18:	d137      	bne.n	801be8a <_dtoa_r+0x722>
 801be1a:	f7e8 fac7 	bl	80043ac <__adddf3>
 801be1e:	4642      	mov	r2, r8
 801be20:	464b      	mov	r3, r9
 801be22:	4606      	mov	r6, r0
 801be24:	460f      	mov	r7, r1
 801be26:	f7e8 ff07 	bl	8004c38 <__aeabi_dcmpgt>
 801be2a:	b9c8      	cbnz	r0, 801be60 <_dtoa_r+0x6f8>
 801be2c:	4642      	mov	r2, r8
 801be2e:	464b      	mov	r3, r9
 801be30:	4630      	mov	r0, r6
 801be32:	4639      	mov	r1, r7
 801be34:	f7e8 fed8 	bl	8004be8 <__aeabi_dcmpeq>
 801be38:	b110      	cbz	r0, 801be40 <_dtoa_r+0x6d8>
 801be3a:	9b02      	ldr	r3, [sp, #8]
 801be3c:	07d9      	lsls	r1, r3, #31
 801be3e:	d40f      	bmi.n	801be60 <_dtoa_r+0x6f8>
 801be40:	4620      	mov	r0, r4
 801be42:	4659      	mov	r1, fp
 801be44:	f000 fe82 	bl	801cb4c <_Bfree>
 801be48:	2300      	movs	r3, #0
 801be4a:	702b      	strb	r3, [r5, #0]
 801be4c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801be4e:	f10a 0001 	add.w	r0, sl, #1
 801be52:	6018      	str	r0, [r3, #0]
 801be54:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801be56:	2b00      	cmp	r3, #0
 801be58:	f43f acd8 	beq.w	801b80c <_dtoa_r+0xa4>
 801be5c:	601d      	str	r5, [r3, #0]
 801be5e:	e4d5      	b.n	801b80c <_dtoa_r+0xa4>
 801be60:	f8cd a01c 	str.w	sl, [sp, #28]
 801be64:	462b      	mov	r3, r5
 801be66:	461d      	mov	r5, r3
 801be68:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801be6c:	2a39      	cmp	r2, #57	; 0x39
 801be6e:	d108      	bne.n	801be82 <_dtoa_r+0x71a>
 801be70:	9a00      	ldr	r2, [sp, #0]
 801be72:	429a      	cmp	r2, r3
 801be74:	d1f7      	bne.n	801be66 <_dtoa_r+0x6fe>
 801be76:	9a07      	ldr	r2, [sp, #28]
 801be78:	9900      	ldr	r1, [sp, #0]
 801be7a:	3201      	adds	r2, #1
 801be7c:	9207      	str	r2, [sp, #28]
 801be7e:	2230      	movs	r2, #48	; 0x30
 801be80:	700a      	strb	r2, [r1, #0]
 801be82:	781a      	ldrb	r2, [r3, #0]
 801be84:	3201      	adds	r2, #1
 801be86:	701a      	strb	r2, [r3, #0]
 801be88:	e78c      	b.n	801bda4 <_dtoa_r+0x63c>
 801be8a:	4b7f      	ldr	r3, [pc, #508]	; (801c088 <_dtoa_r+0x920>)
 801be8c:	2200      	movs	r2, #0
 801be8e:	f7e8 fc43 	bl	8004718 <__aeabi_dmul>
 801be92:	2200      	movs	r2, #0
 801be94:	2300      	movs	r3, #0
 801be96:	4606      	mov	r6, r0
 801be98:	460f      	mov	r7, r1
 801be9a:	f7e8 fea5 	bl	8004be8 <__aeabi_dcmpeq>
 801be9e:	2800      	cmp	r0, #0
 801bea0:	d09b      	beq.n	801bdda <_dtoa_r+0x672>
 801bea2:	e7cd      	b.n	801be40 <_dtoa_r+0x6d8>
 801bea4:	9a08      	ldr	r2, [sp, #32]
 801bea6:	2a00      	cmp	r2, #0
 801bea8:	f000 80c4 	beq.w	801c034 <_dtoa_r+0x8cc>
 801beac:	9a05      	ldr	r2, [sp, #20]
 801beae:	2a01      	cmp	r2, #1
 801beb0:	f300 80a8 	bgt.w	801c004 <_dtoa_r+0x89c>
 801beb4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801beb6:	2a00      	cmp	r2, #0
 801beb8:	f000 80a0 	beq.w	801bffc <_dtoa_r+0x894>
 801bebc:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801bec0:	9e06      	ldr	r6, [sp, #24]
 801bec2:	4645      	mov	r5, r8
 801bec4:	9a04      	ldr	r2, [sp, #16]
 801bec6:	2101      	movs	r1, #1
 801bec8:	441a      	add	r2, r3
 801beca:	4620      	mov	r0, r4
 801becc:	4498      	add	r8, r3
 801bece:	9204      	str	r2, [sp, #16]
 801bed0:	f000 ff42 	bl	801cd58 <__i2b>
 801bed4:	4607      	mov	r7, r0
 801bed6:	2d00      	cmp	r5, #0
 801bed8:	dd0b      	ble.n	801bef2 <_dtoa_r+0x78a>
 801beda:	9b04      	ldr	r3, [sp, #16]
 801bedc:	2b00      	cmp	r3, #0
 801bede:	dd08      	ble.n	801bef2 <_dtoa_r+0x78a>
 801bee0:	42ab      	cmp	r3, r5
 801bee2:	9a04      	ldr	r2, [sp, #16]
 801bee4:	bfa8      	it	ge
 801bee6:	462b      	movge	r3, r5
 801bee8:	eba8 0803 	sub.w	r8, r8, r3
 801beec:	1aed      	subs	r5, r5, r3
 801beee:	1ad3      	subs	r3, r2, r3
 801bef0:	9304      	str	r3, [sp, #16]
 801bef2:	9b06      	ldr	r3, [sp, #24]
 801bef4:	b1fb      	cbz	r3, 801bf36 <_dtoa_r+0x7ce>
 801bef6:	9b08      	ldr	r3, [sp, #32]
 801bef8:	2b00      	cmp	r3, #0
 801befa:	f000 809f 	beq.w	801c03c <_dtoa_r+0x8d4>
 801befe:	2e00      	cmp	r6, #0
 801bf00:	dd11      	ble.n	801bf26 <_dtoa_r+0x7be>
 801bf02:	4639      	mov	r1, r7
 801bf04:	4632      	mov	r2, r6
 801bf06:	4620      	mov	r0, r4
 801bf08:	f000 ffe2 	bl	801ced0 <__pow5mult>
 801bf0c:	465a      	mov	r2, fp
 801bf0e:	4601      	mov	r1, r0
 801bf10:	4607      	mov	r7, r0
 801bf12:	4620      	mov	r0, r4
 801bf14:	f000 ff36 	bl	801cd84 <__multiply>
 801bf18:	4659      	mov	r1, fp
 801bf1a:	9007      	str	r0, [sp, #28]
 801bf1c:	4620      	mov	r0, r4
 801bf1e:	f000 fe15 	bl	801cb4c <_Bfree>
 801bf22:	9b07      	ldr	r3, [sp, #28]
 801bf24:	469b      	mov	fp, r3
 801bf26:	9b06      	ldr	r3, [sp, #24]
 801bf28:	1b9a      	subs	r2, r3, r6
 801bf2a:	d004      	beq.n	801bf36 <_dtoa_r+0x7ce>
 801bf2c:	4659      	mov	r1, fp
 801bf2e:	4620      	mov	r0, r4
 801bf30:	f000 ffce 	bl	801ced0 <__pow5mult>
 801bf34:	4683      	mov	fp, r0
 801bf36:	2101      	movs	r1, #1
 801bf38:	4620      	mov	r0, r4
 801bf3a:	f000 ff0d 	bl	801cd58 <__i2b>
 801bf3e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801bf40:	2b00      	cmp	r3, #0
 801bf42:	4606      	mov	r6, r0
 801bf44:	dd7c      	ble.n	801c040 <_dtoa_r+0x8d8>
 801bf46:	461a      	mov	r2, r3
 801bf48:	4601      	mov	r1, r0
 801bf4a:	4620      	mov	r0, r4
 801bf4c:	f000 ffc0 	bl	801ced0 <__pow5mult>
 801bf50:	9b05      	ldr	r3, [sp, #20]
 801bf52:	2b01      	cmp	r3, #1
 801bf54:	4606      	mov	r6, r0
 801bf56:	dd76      	ble.n	801c046 <_dtoa_r+0x8de>
 801bf58:	2300      	movs	r3, #0
 801bf5a:	9306      	str	r3, [sp, #24]
 801bf5c:	6933      	ldr	r3, [r6, #16]
 801bf5e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 801bf62:	6918      	ldr	r0, [r3, #16]
 801bf64:	f000 fea8 	bl	801ccb8 <__hi0bits>
 801bf68:	f1c0 0020 	rsb	r0, r0, #32
 801bf6c:	9b04      	ldr	r3, [sp, #16]
 801bf6e:	4418      	add	r0, r3
 801bf70:	f010 001f 	ands.w	r0, r0, #31
 801bf74:	f000 8086 	beq.w	801c084 <_dtoa_r+0x91c>
 801bf78:	f1c0 0320 	rsb	r3, r0, #32
 801bf7c:	2b04      	cmp	r3, #4
 801bf7e:	dd7f      	ble.n	801c080 <_dtoa_r+0x918>
 801bf80:	f1c0 001c 	rsb	r0, r0, #28
 801bf84:	9b04      	ldr	r3, [sp, #16]
 801bf86:	4403      	add	r3, r0
 801bf88:	4480      	add	r8, r0
 801bf8a:	4405      	add	r5, r0
 801bf8c:	9304      	str	r3, [sp, #16]
 801bf8e:	f1b8 0f00 	cmp.w	r8, #0
 801bf92:	dd05      	ble.n	801bfa0 <_dtoa_r+0x838>
 801bf94:	4659      	mov	r1, fp
 801bf96:	4642      	mov	r2, r8
 801bf98:	4620      	mov	r0, r4
 801bf9a:	f000 fff3 	bl	801cf84 <__lshift>
 801bf9e:	4683      	mov	fp, r0
 801bfa0:	9b04      	ldr	r3, [sp, #16]
 801bfa2:	2b00      	cmp	r3, #0
 801bfa4:	dd05      	ble.n	801bfb2 <_dtoa_r+0x84a>
 801bfa6:	4631      	mov	r1, r6
 801bfa8:	461a      	mov	r2, r3
 801bfaa:	4620      	mov	r0, r4
 801bfac:	f000 ffea 	bl	801cf84 <__lshift>
 801bfb0:	4606      	mov	r6, r0
 801bfb2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801bfb4:	2b00      	cmp	r3, #0
 801bfb6:	d069      	beq.n	801c08c <_dtoa_r+0x924>
 801bfb8:	4631      	mov	r1, r6
 801bfba:	4658      	mov	r0, fp
 801bfbc:	f001 f84e 	bl	801d05c <__mcmp>
 801bfc0:	2800      	cmp	r0, #0
 801bfc2:	da63      	bge.n	801c08c <_dtoa_r+0x924>
 801bfc4:	2300      	movs	r3, #0
 801bfc6:	4659      	mov	r1, fp
 801bfc8:	220a      	movs	r2, #10
 801bfca:	4620      	mov	r0, r4
 801bfcc:	f000 fde0 	bl	801cb90 <__multadd>
 801bfd0:	9b08      	ldr	r3, [sp, #32]
 801bfd2:	f10a 3aff 	add.w	sl, sl, #4294967295
 801bfd6:	4683      	mov	fp, r0
 801bfd8:	2b00      	cmp	r3, #0
 801bfda:	f000 818f 	beq.w	801c2fc <_dtoa_r+0xb94>
 801bfde:	4639      	mov	r1, r7
 801bfe0:	2300      	movs	r3, #0
 801bfe2:	220a      	movs	r2, #10
 801bfe4:	4620      	mov	r0, r4
 801bfe6:	f000 fdd3 	bl	801cb90 <__multadd>
 801bfea:	f1b9 0f00 	cmp.w	r9, #0
 801bfee:	4607      	mov	r7, r0
 801bff0:	f300 808e 	bgt.w	801c110 <_dtoa_r+0x9a8>
 801bff4:	9b05      	ldr	r3, [sp, #20]
 801bff6:	2b02      	cmp	r3, #2
 801bff8:	dc50      	bgt.n	801c09c <_dtoa_r+0x934>
 801bffa:	e089      	b.n	801c110 <_dtoa_r+0x9a8>
 801bffc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801bffe:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801c002:	e75d      	b.n	801bec0 <_dtoa_r+0x758>
 801c004:	9b01      	ldr	r3, [sp, #4]
 801c006:	1e5e      	subs	r6, r3, #1
 801c008:	9b06      	ldr	r3, [sp, #24]
 801c00a:	42b3      	cmp	r3, r6
 801c00c:	bfbf      	itttt	lt
 801c00e:	9b06      	ldrlt	r3, [sp, #24]
 801c010:	9606      	strlt	r6, [sp, #24]
 801c012:	1af2      	sublt	r2, r6, r3
 801c014:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 801c016:	bfb6      	itet	lt
 801c018:	189b      	addlt	r3, r3, r2
 801c01a:	1b9e      	subge	r6, r3, r6
 801c01c:	930d      	strlt	r3, [sp, #52]	; 0x34
 801c01e:	9b01      	ldr	r3, [sp, #4]
 801c020:	bfb8      	it	lt
 801c022:	2600      	movlt	r6, #0
 801c024:	2b00      	cmp	r3, #0
 801c026:	bfb5      	itete	lt
 801c028:	eba8 0503 	sublt.w	r5, r8, r3
 801c02c:	9b01      	ldrge	r3, [sp, #4]
 801c02e:	2300      	movlt	r3, #0
 801c030:	4645      	movge	r5, r8
 801c032:	e747      	b.n	801bec4 <_dtoa_r+0x75c>
 801c034:	9e06      	ldr	r6, [sp, #24]
 801c036:	9f08      	ldr	r7, [sp, #32]
 801c038:	4645      	mov	r5, r8
 801c03a:	e74c      	b.n	801bed6 <_dtoa_r+0x76e>
 801c03c:	9a06      	ldr	r2, [sp, #24]
 801c03e:	e775      	b.n	801bf2c <_dtoa_r+0x7c4>
 801c040:	9b05      	ldr	r3, [sp, #20]
 801c042:	2b01      	cmp	r3, #1
 801c044:	dc18      	bgt.n	801c078 <_dtoa_r+0x910>
 801c046:	9b02      	ldr	r3, [sp, #8]
 801c048:	b9b3      	cbnz	r3, 801c078 <_dtoa_r+0x910>
 801c04a:	9b03      	ldr	r3, [sp, #12]
 801c04c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801c050:	b9a3      	cbnz	r3, 801c07c <_dtoa_r+0x914>
 801c052:	9b03      	ldr	r3, [sp, #12]
 801c054:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801c058:	0d1b      	lsrs	r3, r3, #20
 801c05a:	051b      	lsls	r3, r3, #20
 801c05c:	b12b      	cbz	r3, 801c06a <_dtoa_r+0x902>
 801c05e:	9b04      	ldr	r3, [sp, #16]
 801c060:	3301      	adds	r3, #1
 801c062:	9304      	str	r3, [sp, #16]
 801c064:	f108 0801 	add.w	r8, r8, #1
 801c068:	2301      	movs	r3, #1
 801c06a:	9306      	str	r3, [sp, #24]
 801c06c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801c06e:	2b00      	cmp	r3, #0
 801c070:	f47f af74 	bne.w	801bf5c <_dtoa_r+0x7f4>
 801c074:	2001      	movs	r0, #1
 801c076:	e779      	b.n	801bf6c <_dtoa_r+0x804>
 801c078:	2300      	movs	r3, #0
 801c07a:	e7f6      	b.n	801c06a <_dtoa_r+0x902>
 801c07c:	9b02      	ldr	r3, [sp, #8]
 801c07e:	e7f4      	b.n	801c06a <_dtoa_r+0x902>
 801c080:	d085      	beq.n	801bf8e <_dtoa_r+0x826>
 801c082:	4618      	mov	r0, r3
 801c084:	301c      	adds	r0, #28
 801c086:	e77d      	b.n	801bf84 <_dtoa_r+0x81c>
 801c088:	40240000 	.word	0x40240000
 801c08c:	9b01      	ldr	r3, [sp, #4]
 801c08e:	2b00      	cmp	r3, #0
 801c090:	dc38      	bgt.n	801c104 <_dtoa_r+0x99c>
 801c092:	9b05      	ldr	r3, [sp, #20]
 801c094:	2b02      	cmp	r3, #2
 801c096:	dd35      	ble.n	801c104 <_dtoa_r+0x99c>
 801c098:	f8dd 9004 	ldr.w	r9, [sp, #4]
 801c09c:	f1b9 0f00 	cmp.w	r9, #0
 801c0a0:	d10d      	bne.n	801c0be <_dtoa_r+0x956>
 801c0a2:	4631      	mov	r1, r6
 801c0a4:	464b      	mov	r3, r9
 801c0a6:	2205      	movs	r2, #5
 801c0a8:	4620      	mov	r0, r4
 801c0aa:	f000 fd71 	bl	801cb90 <__multadd>
 801c0ae:	4601      	mov	r1, r0
 801c0b0:	4606      	mov	r6, r0
 801c0b2:	4658      	mov	r0, fp
 801c0b4:	f000 ffd2 	bl	801d05c <__mcmp>
 801c0b8:	2800      	cmp	r0, #0
 801c0ba:	f73f adbd 	bgt.w	801bc38 <_dtoa_r+0x4d0>
 801c0be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c0c0:	9d00      	ldr	r5, [sp, #0]
 801c0c2:	ea6f 0a03 	mvn.w	sl, r3
 801c0c6:	f04f 0800 	mov.w	r8, #0
 801c0ca:	4631      	mov	r1, r6
 801c0cc:	4620      	mov	r0, r4
 801c0ce:	f000 fd3d 	bl	801cb4c <_Bfree>
 801c0d2:	2f00      	cmp	r7, #0
 801c0d4:	f43f aeb4 	beq.w	801be40 <_dtoa_r+0x6d8>
 801c0d8:	f1b8 0f00 	cmp.w	r8, #0
 801c0dc:	d005      	beq.n	801c0ea <_dtoa_r+0x982>
 801c0de:	45b8      	cmp	r8, r7
 801c0e0:	d003      	beq.n	801c0ea <_dtoa_r+0x982>
 801c0e2:	4641      	mov	r1, r8
 801c0e4:	4620      	mov	r0, r4
 801c0e6:	f000 fd31 	bl	801cb4c <_Bfree>
 801c0ea:	4639      	mov	r1, r7
 801c0ec:	4620      	mov	r0, r4
 801c0ee:	f000 fd2d 	bl	801cb4c <_Bfree>
 801c0f2:	e6a5      	b.n	801be40 <_dtoa_r+0x6d8>
 801c0f4:	2600      	movs	r6, #0
 801c0f6:	4637      	mov	r7, r6
 801c0f8:	e7e1      	b.n	801c0be <_dtoa_r+0x956>
 801c0fa:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801c0fc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 801c100:	4637      	mov	r7, r6
 801c102:	e599      	b.n	801bc38 <_dtoa_r+0x4d0>
 801c104:	9b08      	ldr	r3, [sp, #32]
 801c106:	f8dd 9004 	ldr.w	r9, [sp, #4]
 801c10a:	2b00      	cmp	r3, #0
 801c10c:	f000 80fd 	beq.w	801c30a <_dtoa_r+0xba2>
 801c110:	2d00      	cmp	r5, #0
 801c112:	dd05      	ble.n	801c120 <_dtoa_r+0x9b8>
 801c114:	4639      	mov	r1, r7
 801c116:	462a      	mov	r2, r5
 801c118:	4620      	mov	r0, r4
 801c11a:	f000 ff33 	bl	801cf84 <__lshift>
 801c11e:	4607      	mov	r7, r0
 801c120:	9b06      	ldr	r3, [sp, #24]
 801c122:	2b00      	cmp	r3, #0
 801c124:	d05c      	beq.n	801c1e0 <_dtoa_r+0xa78>
 801c126:	6879      	ldr	r1, [r7, #4]
 801c128:	4620      	mov	r0, r4
 801c12a:	f000 fccf 	bl	801cacc <_Balloc>
 801c12e:	4605      	mov	r5, r0
 801c130:	b928      	cbnz	r0, 801c13e <_dtoa_r+0x9d6>
 801c132:	4b80      	ldr	r3, [pc, #512]	; (801c334 <_dtoa_r+0xbcc>)
 801c134:	4602      	mov	r2, r0
 801c136:	f240 21ea 	movw	r1, #746	; 0x2ea
 801c13a:	f7ff bb2e 	b.w	801b79a <_dtoa_r+0x32>
 801c13e:	693a      	ldr	r2, [r7, #16]
 801c140:	3202      	adds	r2, #2
 801c142:	0092      	lsls	r2, r2, #2
 801c144:	f107 010c 	add.w	r1, r7, #12
 801c148:	300c      	adds	r0, #12
 801c14a:	f7fd fc69 	bl	8019a20 <memcpy>
 801c14e:	2201      	movs	r2, #1
 801c150:	4629      	mov	r1, r5
 801c152:	4620      	mov	r0, r4
 801c154:	f000 ff16 	bl	801cf84 <__lshift>
 801c158:	9b00      	ldr	r3, [sp, #0]
 801c15a:	3301      	adds	r3, #1
 801c15c:	9301      	str	r3, [sp, #4]
 801c15e:	9b00      	ldr	r3, [sp, #0]
 801c160:	444b      	add	r3, r9
 801c162:	9307      	str	r3, [sp, #28]
 801c164:	9b02      	ldr	r3, [sp, #8]
 801c166:	f003 0301 	and.w	r3, r3, #1
 801c16a:	46b8      	mov	r8, r7
 801c16c:	9306      	str	r3, [sp, #24]
 801c16e:	4607      	mov	r7, r0
 801c170:	9b01      	ldr	r3, [sp, #4]
 801c172:	4631      	mov	r1, r6
 801c174:	3b01      	subs	r3, #1
 801c176:	4658      	mov	r0, fp
 801c178:	9302      	str	r3, [sp, #8]
 801c17a:	f7ff fa67 	bl	801b64c <quorem>
 801c17e:	4603      	mov	r3, r0
 801c180:	3330      	adds	r3, #48	; 0x30
 801c182:	9004      	str	r0, [sp, #16]
 801c184:	4641      	mov	r1, r8
 801c186:	4658      	mov	r0, fp
 801c188:	9308      	str	r3, [sp, #32]
 801c18a:	f000 ff67 	bl	801d05c <__mcmp>
 801c18e:	463a      	mov	r2, r7
 801c190:	4681      	mov	r9, r0
 801c192:	4631      	mov	r1, r6
 801c194:	4620      	mov	r0, r4
 801c196:	f000 ff7d 	bl	801d094 <__mdiff>
 801c19a:	68c2      	ldr	r2, [r0, #12]
 801c19c:	9b08      	ldr	r3, [sp, #32]
 801c19e:	4605      	mov	r5, r0
 801c1a0:	bb02      	cbnz	r2, 801c1e4 <_dtoa_r+0xa7c>
 801c1a2:	4601      	mov	r1, r0
 801c1a4:	4658      	mov	r0, fp
 801c1a6:	f000 ff59 	bl	801d05c <__mcmp>
 801c1aa:	9b08      	ldr	r3, [sp, #32]
 801c1ac:	4602      	mov	r2, r0
 801c1ae:	4629      	mov	r1, r5
 801c1b0:	4620      	mov	r0, r4
 801c1b2:	e9cd 3208 	strd	r3, r2, [sp, #32]
 801c1b6:	f000 fcc9 	bl	801cb4c <_Bfree>
 801c1ba:	9b05      	ldr	r3, [sp, #20]
 801c1bc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801c1be:	9d01      	ldr	r5, [sp, #4]
 801c1c0:	ea43 0102 	orr.w	r1, r3, r2
 801c1c4:	9b06      	ldr	r3, [sp, #24]
 801c1c6:	430b      	orrs	r3, r1
 801c1c8:	9b08      	ldr	r3, [sp, #32]
 801c1ca:	d10d      	bne.n	801c1e8 <_dtoa_r+0xa80>
 801c1cc:	2b39      	cmp	r3, #57	; 0x39
 801c1ce:	d029      	beq.n	801c224 <_dtoa_r+0xabc>
 801c1d0:	f1b9 0f00 	cmp.w	r9, #0
 801c1d4:	dd01      	ble.n	801c1da <_dtoa_r+0xa72>
 801c1d6:	9b04      	ldr	r3, [sp, #16]
 801c1d8:	3331      	adds	r3, #49	; 0x31
 801c1da:	9a02      	ldr	r2, [sp, #8]
 801c1dc:	7013      	strb	r3, [r2, #0]
 801c1de:	e774      	b.n	801c0ca <_dtoa_r+0x962>
 801c1e0:	4638      	mov	r0, r7
 801c1e2:	e7b9      	b.n	801c158 <_dtoa_r+0x9f0>
 801c1e4:	2201      	movs	r2, #1
 801c1e6:	e7e2      	b.n	801c1ae <_dtoa_r+0xa46>
 801c1e8:	f1b9 0f00 	cmp.w	r9, #0
 801c1ec:	db06      	blt.n	801c1fc <_dtoa_r+0xa94>
 801c1ee:	9905      	ldr	r1, [sp, #20]
 801c1f0:	ea41 0909 	orr.w	r9, r1, r9
 801c1f4:	9906      	ldr	r1, [sp, #24]
 801c1f6:	ea59 0101 	orrs.w	r1, r9, r1
 801c1fa:	d120      	bne.n	801c23e <_dtoa_r+0xad6>
 801c1fc:	2a00      	cmp	r2, #0
 801c1fe:	ddec      	ble.n	801c1da <_dtoa_r+0xa72>
 801c200:	4659      	mov	r1, fp
 801c202:	2201      	movs	r2, #1
 801c204:	4620      	mov	r0, r4
 801c206:	9301      	str	r3, [sp, #4]
 801c208:	f000 febc 	bl	801cf84 <__lshift>
 801c20c:	4631      	mov	r1, r6
 801c20e:	4683      	mov	fp, r0
 801c210:	f000 ff24 	bl	801d05c <__mcmp>
 801c214:	2800      	cmp	r0, #0
 801c216:	9b01      	ldr	r3, [sp, #4]
 801c218:	dc02      	bgt.n	801c220 <_dtoa_r+0xab8>
 801c21a:	d1de      	bne.n	801c1da <_dtoa_r+0xa72>
 801c21c:	07da      	lsls	r2, r3, #31
 801c21e:	d5dc      	bpl.n	801c1da <_dtoa_r+0xa72>
 801c220:	2b39      	cmp	r3, #57	; 0x39
 801c222:	d1d8      	bne.n	801c1d6 <_dtoa_r+0xa6e>
 801c224:	9a02      	ldr	r2, [sp, #8]
 801c226:	2339      	movs	r3, #57	; 0x39
 801c228:	7013      	strb	r3, [r2, #0]
 801c22a:	462b      	mov	r3, r5
 801c22c:	461d      	mov	r5, r3
 801c22e:	3b01      	subs	r3, #1
 801c230:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801c234:	2a39      	cmp	r2, #57	; 0x39
 801c236:	d050      	beq.n	801c2da <_dtoa_r+0xb72>
 801c238:	3201      	adds	r2, #1
 801c23a:	701a      	strb	r2, [r3, #0]
 801c23c:	e745      	b.n	801c0ca <_dtoa_r+0x962>
 801c23e:	2a00      	cmp	r2, #0
 801c240:	dd03      	ble.n	801c24a <_dtoa_r+0xae2>
 801c242:	2b39      	cmp	r3, #57	; 0x39
 801c244:	d0ee      	beq.n	801c224 <_dtoa_r+0xabc>
 801c246:	3301      	adds	r3, #1
 801c248:	e7c7      	b.n	801c1da <_dtoa_r+0xa72>
 801c24a:	9a01      	ldr	r2, [sp, #4]
 801c24c:	9907      	ldr	r1, [sp, #28]
 801c24e:	f802 3c01 	strb.w	r3, [r2, #-1]
 801c252:	428a      	cmp	r2, r1
 801c254:	d02a      	beq.n	801c2ac <_dtoa_r+0xb44>
 801c256:	4659      	mov	r1, fp
 801c258:	2300      	movs	r3, #0
 801c25a:	220a      	movs	r2, #10
 801c25c:	4620      	mov	r0, r4
 801c25e:	f000 fc97 	bl	801cb90 <__multadd>
 801c262:	45b8      	cmp	r8, r7
 801c264:	4683      	mov	fp, r0
 801c266:	f04f 0300 	mov.w	r3, #0
 801c26a:	f04f 020a 	mov.w	r2, #10
 801c26e:	4641      	mov	r1, r8
 801c270:	4620      	mov	r0, r4
 801c272:	d107      	bne.n	801c284 <_dtoa_r+0xb1c>
 801c274:	f000 fc8c 	bl	801cb90 <__multadd>
 801c278:	4680      	mov	r8, r0
 801c27a:	4607      	mov	r7, r0
 801c27c:	9b01      	ldr	r3, [sp, #4]
 801c27e:	3301      	adds	r3, #1
 801c280:	9301      	str	r3, [sp, #4]
 801c282:	e775      	b.n	801c170 <_dtoa_r+0xa08>
 801c284:	f000 fc84 	bl	801cb90 <__multadd>
 801c288:	4639      	mov	r1, r7
 801c28a:	4680      	mov	r8, r0
 801c28c:	2300      	movs	r3, #0
 801c28e:	220a      	movs	r2, #10
 801c290:	4620      	mov	r0, r4
 801c292:	f000 fc7d 	bl	801cb90 <__multadd>
 801c296:	4607      	mov	r7, r0
 801c298:	e7f0      	b.n	801c27c <_dtoa_r+0xb14>
 801c29a:	f1b9 0f00 	cmp.w	r9, #0
 801c29e:	9a00      	ldr	r2, [sp, #0]
 801c2a0:	bfcc      	ite	gt
 801c2a2:	464d      	movgt	r5, r9
 801c2a4:	2501      	movle	r5, #1
 801c2a6:	4415      	add	r5, r2
 801c2a8:	f04f 0800 	mov.w	r8, #0
 801c2ac:	4659      	mov	r1, fp
 801c2ae:	2201      	movs	r2, #1
 801c2b0:	4620      	mov	r0, r4
 801c2b2:	9301      	str	r3, [sp, #4]
 801c2b4:	f000 fe66 	bl	801cf84 <__lshift>
 801c2b8:	4631      	mov	r1, r6
 801c2ba:	4683      	mov	fp, r0
 801c2bc:	f000 fece 	bl	801d05c <__mcmp>
 801c2c0:	2800      	cmp	r0, #0
 801c2c2:	dcb2      	bgt.n	801c22a <_dtoa_r+0xac2>
 801c2c4:	d102      	bne.n	801c2cc <_dtoa_r+0xb64>
 801c2c6:	9b01      	ldr	r3, [sp, #4]
 801c2c8:	07db      	lsls	r3, r3, #31
 801c2ca:	d4ae      	bmi.n	801c22a <_dtoa_r+0xac2>
 801c2cc:	462b      	mov	r3, r5
 801c2ce:	461d      	mov	r5, r3
 801c2d0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801c2d4:	2a30      	cmp	r2, #48	; 0x30
 801c2d6:	d0fa      	beq.n	801c2ce <_dtoa_r+0xb66>
 801c2d8:	e6f7      	b.n	801c0ca <_dtoa_r+0x962>
 801c2da:	9a00      	ldr	r2, [sp, #0]
 801c2dc:	429a      	cmp	r2, r3
 801c2de:	d1a5      	bne.n	801c22c <_dtoa_r+0xac4>
 801c2e0:	f10a 0a01 	add.w	sl, sl, #1
 801c2e4:	2331      	movs	r3, #49	; 0x31
 801c2e6:	e779      	b.n	801c1dc <_dtoa_r+0xa74>
 801c2e8:	4b13      	ldr	r3, [pc, #76]	; (801c338 <_dtoa_r+0xbd0>)
 801c2ea:	f7ff baaf 	b.w	801b84c <_dtoa_r+0xe4>
 801c2ee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801c2f0:	2b00      	cmp	r3, #0
 801c2f2:	f47f aa86 	bne.w	801b802 <_dtoa_r+0x9a>
 801c2f6:	4b11      	ldr	r3, [pc, #68]	; (801c33c <_dtoa_r+0xbd4>)
 801c2f8:	f7ff baa8 	b.w	801b84c <_dtoa_r+0xe4>
 801c2fc:	f1b9 0f00 	cmp.w	r9, #0
 801c300:	dc03      	bgt.n	801c30a <_dtoa_r+0xba2>
 801c302:	9b05      	ldr	r3, [sp, #20]
 801c304:	2b02      	cmp	r3, #2
 801c306:	f73f aec9 	bgt.w	801c09c <_dtoa_r+0x934>
 801c30a:	9d00      	ldr	r5, [sp, #0]
 801c30c:	4631      	mov	r1, r6
 801c30e:	4658      	mov	r0, fp
 801c310:	f7ff f99c 	bl	801b64c <quorem>
 801c314:	f100 0330 	add.w	r3, r0, #48	; 0x30
 801c318:	f805 3b01 	strb.w	r3, [r5], #1
 801c31c:	9a00      	ldr	r2, [sp, #0]
 801c31e:	1aaa      	subs	r2, r5, r2
 801c320:	4591      	cmp	r9, r2
 801c322:	ddba      	ble.n	801c29a <_dtoa_r+0xb32>
 801c324:	4659      	mov	r1, fp
 801c326:	2300      	movs	r3, #0
 801c328:	220a      	movs	r2, #10
 801c32a:	4620      	mov	r0, r4
 801c32c:	f000 fc30 	bl	801cb90 <__multadd>
 801c330:	4683      	mov	fp, r0
 801c332:	e7eb      	b.n	801c30c <_dtoa_r+0xba4>
 801c334:	080378fb 	.word	0x080378fb
 801c338:	0802205d 	.word	0x0802205d
 801c33c:	08037878 	.word	0x08037878

0801c340 <_fstat_r>:
 801c340:	b538      	push	{r3, r4, r5, lr}
 801c342:	4d07      	ldr	r5, [pc, #28]	; (801c360 <_fstat_r+0x20>)
 801c344:	2300      	movs	r3, #0
 801c346:	4604      	mov	r4, r0
 801c348:	4608      	mov	r0, r1
 801c34a:	4611      	mov	r1, r2
 801c34c:	602b      	str	r3, [r5, #0]
 801c34e:	f7f4 ff41 	bl	80111d4 <_fstat>
 801c352:	1c43      	adds	r3, r0, #1
 801c354:	d102      	bne.n	801c35c <_fstat_r+0x1c>
 801c356:	682b      	ldr	r3, [r5, #0]
 801c358:	b103      	cbz	r3, 801c35c <_fstat_r+0x1c>
 801c35a:	6023      	str	r3, [r4, #0]
 801c35c:	bd38      	pop	{r3, r4, r5, pc}
 801c35e:	bf00      	nop
 801c360:	2000c028 	.word	0x2000c028

0801c364 <rshift>:
 801c364:	6903      	ldr	r3, [r0, #16]
 801c366:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801c36a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801c36e:	ea4f 1261 	mov.w	r2, r1, asr #5
 801c372:	f100 0414 	add.w	r4, r0, #20
 801c376:	dd45      	ble.n	801c404 <rshift+0xa0>
 801c378:	f011 011f 	ands.w	r1, r1, #31
 801c37c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 801c380:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801c384:	d10c      	bne.n	801c3a0 <rshift+0x3c>
 801c386:	f100 0710 	add.w	r7, r0, #16
 801c38a:	4629      	mov	r1, r5
 801c38c:	42b1      	cmp	r1, r6
 801c38e:	d334      	bcc.n	801c3fa <rshift+0x96>
 801c390:	1a9b      	subs	r3, r3, r2
 801c392:	009b      	lsls	r3, r3, #2
 801c394:	1eea      	subs	r2, r5, #3
 801c396:	4296      	cmp	r6, r2
 801c398:	bf38      	it	cc
 801c39a:	2300      	movcc	r3, #0
 801c39c:	4423      	add	r3, r4
 801c39e:	e015      	b.n	801c3cc <rshift+0x68>
 801c3a0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801c3a4:	f1c1 0820 	rsb	r8, r1, #32
 801c3a8:	40cf      	lsrs	r7, r1
 801c3aa:	f105 0e04 	add.w	lr, r5, #4
 801c3ae:	46a1      	mov	r9, r4
 801c3b0:	4576      	cmp	r6, lr
 801c3b2:	46f4      	mov	ip, lr
 801c3b4:	d815      	bhi.n	801c3e2 <rshift+0x7e>
 801c3b6:	1a9b      	subs	r3, r3, r2
 801c3b8:	009a      	lsls	r2, r3, #2
 801c3ba:	3a04      	subs	r2, #4
 801c3bc:	3501      	adds	r5, #1
 801c3be:	42ae      	cmp	r6, r5
 801c3c0:	bf38      	it	cc
 801c3c2:	2200      	movcc	r2, #0
 801c3c4:	18a3      	adds	r3, r4, r2
 801c3c6:	50a7      	str	r7, [r4, r2]
 801c3c8:	b107      	cbz	r7, 801c3cc <rshift+0x68>
 801c3ca:	3304      	adds	r3, #4
 801c3cc:	1b1a      	subs	r2, r3, r4
 801c3ce:	42a3      	cmp	r3, r4
 801c3d0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801c3d4:	bf08      	it	eq
 801c3d6:	2300      	moveq	r3, #0
 801c3d8:	6102      	str	r2, [r0, #16]
 801c3da:	bf08      	it	eq
 801c3dc:	6143      	streq	r3, [r0, #20]
 801c3de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801c3e2:	f8dc c000 	ldr.w	ip, [ip]
 801c3e6:	fa0c fc08 	lsl.w	ip, ip, r8
 801c3ea:	ea4c 0707 	orr.w	r7, ip, r7
 801c3ee:	f849 7b04 	str.w	r7, [r9], #4
 801c3f2:	f85e 7b04 	ldr.w	r7, [lr], #4
 801c3f6:	40cf      	lsrs	r7, r1
 801c3f8:	e7da      	b.n	801c3b0 <rshift+0x4c>
 801c3fa:	f851 cb04 	ldr.w	ip, [r1], #4
 801c3fe:	f847 cf04 	str.w	ip, [r7, #4]!
 801c402:	e7c3      	b.n	801c38c <rshift+0x28>
 801c404:	4623      	mov	r3, r4
 801c406:	e7e1      	b.n	801c3cc <rshift+0x68>

0801c408 <__hexdig_fun>:
 801c408:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 801c40c:	2b09      	cmp	r3, #9
 801c40e:	d802      	bhi.n	801c416 <__hexdig_fun+0xe>
 801c410:	3820      	subs	r0, #32
 801c412:	b2c0      	uxtb	r0, r0
 801c414:	4770      	bx	lr
 801c416:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801c41a:	2b05      	cmp	r3, #5
 801c41c:	d801      	bhi.n	801c422 <__hexdig_fun+0x1a>
 801c41e:	3847      	subs	r0, #71	; 0x47
 801c420:	e7f7      	b.n	801c412 <__hexdig_fun+0xa>
 801c422:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801c426:	2b05      	cmp	r3, #5
 801c428:	d801      	bhi.n	801c42e <__hexdig_fun+0x26>
 801c42a:	3827      	subs	r0, #39	; 0x27
 801c42c:	e7f1      	b.n	801c412 <__hexdig_fun+0xa>
 801c42e:	2000      	movs	r0, #0
 801c430:	4770      	bx	lr
	...

0801c434 <__gethex>:
 801c434:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c438:	ed2d 8b02 	vpush	{d8}
 801c43c:	b089      	sub	sp, #36	; 0x24
 801c43e:	ee08 0a10 	vmov	s16, r0
 801c442:	9304      	str	r3, [sp, #16]
 801c444:	4bbc      	ldr	r3, [pc, #752]	; (801c738 <__gethex+0x304>)
 801c446:	681b      	ldr	r3, [r3, #0]
 801c448:	9301      	str	r3, [sp, #4]
 801c44a:	4618      	mov	r0, r3
 801c44c:	468b      	mov	fp, r1
 801c44e:	4690      	mov	r8, r2
 801c450:	f7e7 ff48 	bl	80042e4 <strlen>
 801c454:	9b01      	ldr	r3, [sp, #4]
 801c456:	f8db 2000 	ldr.w	r2, [fp]
 801c45a:	4403      	add	r3, r0
 801c45c:	4682      	mov	sl, r0
 801c45e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 801c462:	9305      	str	r3, [sp, #20]
 801c464:	1c93      	adds	r3, r2, #2
 801c466:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 801c46a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 801c46e:	32fe      	adds	r2, #254	; 0xfe
 801c470:	18d1      	adds	r1, r2, r3
 801c472:	461f      	mov	r7, r3
 801c474:	f813 0b01 	ldrb.w	r0, [r3], #1
 801c478:	9100      	str	r1, [sp, #0]
 801c47a:	2830      	cmp	r0, #48	; 0x30
 801c47c:	d0f8      	beq.n	801c470 <__gethex+0x3c>
 801c47e:	f7ff ffc3 	bl	801c408 <__hexdig_fun>
 801c482:	4604      	mov	r4, r0
 801c484:	2800      	cmp	r0, #0
 801c486:	d13a      	bne.n	801c4fe <__gethex+0xca>
 801c488:	9901      	ldr	r1, [sp, #4]
 801c48a:	4652      	mov	r2, sl
 801c48c:	4638      	mov	r0, r7
 801c48e:	f7fe f929 	bl	801a6e4 <strncmp>
 801c492:	4605      	mov	r5, r0
 801c494:	2800      	cmp	r0, #0
 801c496:	d168      	bne.n	801c56a <__gethex+0x136>
 801c498:	f817 000a 	ldrb.w	r0, [r7, sl]
 801c49c:	eb07 060a 	add.w	r6, r7, sl
 801c4a0:	f7ff ffb2 	bl	801c408 <__hexdig_fun>
 801c4a4:	2800      	cmp	r0, #0
 801c4a6:	d062      	beq.n	801c56e <__gethex+0x13a>
 801c4a8:	4633      	mov	r3, r6
 801c4aa:	7818      	ldrb	r0, [r3, #0]
 801c4ac:	2830      	cmp	r0, #48	; 0x30
 801c4ae:	461f      	mov	r7, r3
 801c4b0:	f103 0301 	add.w	r3, r3, #1
 801c4b4:	d0f9      	beq.n	801c4aa <__gethex+0x76>
 801c4b6:	f7ff ffa7 	bl	801c408 <__hexdig_fun>
 801c4ba:	2301      	movs	r3, #1
 801c4bc:	fab0 f480 	clz	r4, r0
 801c4c0:	0964      	lsrs	r4, r4, #5
 801c4c2:	4635      	mov	r5, r6
 801c4c4:	9300      	str	r3, [sp, #0]
 801c4c6:	463a      	mov	r2, r7
 801c4c8:	4616      	mov	r6, r2
 801c4ca:	3201      	adds	r2, #1
 801c4cc:	7830      	ldrb	r0, [r6, #0]
 801c4ce:	f7ff ff9b 	bl	801c408 <__hexdig_fun>
 801c4d2:	2800      	cmp	r0, #0
 801c4d4:	d1f8      	bne.n	801c4c8 <__gethex+0x94>
 801c4d6:	9901      	ldr	r1, [sp, #4]
 801c4d8:	4652      	mov	r2, sl
 801c4da:	4630      	mov	r0, r6
 801c4dc:	f7fe f902 	bl	801a6e4 <strncmp>
 801c4e0:	b980      	cbnz	r0, 801c504 <__gethex+0xd0>
 801c4e2:	b94d      	cbnz	r5, 801c4f8 <__gethex+0xc4>
 801c4e4:	eb06 050a 	add.w	r5, r6, sl
 801c4e8:	462a      	mov	r2, r5
 801c4ea:	4616      	mov	r6, r2
 801c4ec:	3201      	adds	r2, #1
 801c4ee:	7830      	ldrb	r0, [r6, #0]
 801c4f0:	f7ff ff8a 	bl	801c408 <__hexdig_fun>
 801c4f4:	2800      	cmp	r0, #0
 801c4f6:	d1f8      	bne.n	801c4ea <__gethex+0xb6>
 801c4f8:	1bad      	subs	r5, r5, r6
 801c4fa:	00ad      	lsls	r5, r5, #2
 801c4fc:	e004      	b.n	801c508 <__gethex+0xd4>
 801c4fe:	2400      	movs	r4, #0
 801c500:	4625      	mov	r5, r4
 801c502:	e7e0      	b.n	801c4c6 <__gethex+0x92>
 801c504:	2d00      	cmp	r5, #0
 801c506:	d1f7      	bne.n	801c4f8 <__gethex+0xc4>
 801c508:	7833      	ldrb	r3, [r6, #0]
 801c50a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801c50e:	2b50      	cmp	r3, #80	; 0x50
 801c510:	d13b      	bne.n	801c58a <__gethex+0x156>
 801c512:	7873      	ldrb	r3, [r6, #1]
 801c514:	2b2b      	cmp	r3, #43	; 0x2b
 801c516:	d02c      	beq.n	801c572 <__gethex+0x13e>
 801c518:	2b2d      	cmp	r3, #45	; 0x2d
 801c51a:	d02e      	beq.n	801c57a <__gethex+0x146>
 801c51c:	1c71      	adds	r1, r6, #1
 801c51e:	f04f 0900 	mov.w	r9, #0
 801c522:	7808      	ldrb	r0, [r1, #0]
 801c524:	f7ff ff70 	bl	801c408 <__hexdig_fun>
 801c528:	1e43      	subs	r3, r0, #1
 801c52a:	b2db      	uxtb	r3, r3
 801c52c:	2b18      	cmp	r3, #24
 801c52e:	d82c      	bhi.n	801c58a <__gethex+0x156>
 801c530:	f1a0 0210 	sub.w	r2, r0, #16
 801c534:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801c538:	f7ff ff66 	bl	801c408 <__hexdig_fun>
 801c53c:	1e43      	subs	r3, r0, #1
 801c53e:	b2db      	uxtb	r3, r3
 801c540:	2b18      	cmp	r3, #24
 801c542:	d91d      	bls.n	801c580 <__gethex+0x14c>
 801c544:	f1b9 0f00 	cmp.w	r9, #0
 801c548:	d000      	beq.n	801c54c <__gethex+0x118>
 801c54a:	4252      	negs	r2, r2
 801c54c:	4415      	add	r5, r2
 801c54e:	f8cb 1000 	str.w	r1, [fp]
 801c552:	b1e4      	cbz	r4, 801c58e <__gethex+0x15a>
 801c554:	9b00      	ldr	r3, [sp, #0]
 801c556:	2b00      	cmp	r3, #0
 801c558:	bf14      	ite	ne
 801c55a:	2700      	movne	r7, #0
 801c55c:	2706      	moveq	r7, #6
 801c55e:	4638      	mov	r0, r7
 801c560:	b009      	add	sp, #36	; 0x24
 801c562:	ecbd 8b02 	vpop	{d8}
 801c566:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c56a:	463e      	mov	r6, r7
 801c56c:	4625      	mov	r5, r4
 801c56e:	2401      	movs	r4, #1
 801c570:	e7ca      	b.n	801c508 <__gethex+0xd4>
 801c572:	f04f 0900 	mov.w	r9, #0
 801c576:	1cb1      	adds	r1, r6, #2
 801c578:	e7d3      	b.n	801c522 <__gethex+0xee>
 801c57a:	f04f 0901 	mov.w	r9, #1
 801c57e:	e7fa      	b.n	801c576 <__gethex+0x142>
 801c580:	230a      	movs	r3, #10
 801c582:	fb03 0202 	mla	r2, r3, r2, r0
 801c586:	3a10      	subs	r2, #16
 801c588:	e7d4      	b.n	801c534 <__gethex+0x100>
 801c58a:	4631      	mov	r1, r6
 801c58c:	e7df      	b.n	801c54e <__gethex+0x11a>
 801c58e:	1bf3      	subs	r3, r6, r7
 801c590:	3b01      	subs	r3, #1
 801c592:	4621      	mov	r1, r4
 801c594:	2b07      	cmp	r3, #7
 801c596:	dc0b      	bgt.n	801c5b0 <__gethex+0x17c>
 801c598:	ee18 0a10 	vmov	r0, s16
 801c59c:	f000 fa96 	bl	801cacc <_Balloc>
 801c5a0:	4604      	mov	r4, r0
 801c5a2:	b940      	cbnz	r0, 801c5b6 <__gethex+0x182>
 801c5a4:	4b65      	ldr	r3, [pc, #404]	; (801c73c <__gethex+0x308>)
 801c5a6:	4602      	mov	r2, r0
 801c5a8:	21de      	movs	r1, #222	; 0xde
 801c5aa:	4865      	ldr	r0, [pc, #404]	; (801c740 <__gethex+0x30c>)
 801c5ac:	f001 fa64 	bl	801da78 <__assert_func>
 801c5b0:	3101      	adds	r1, #1
 801c5b2:	105b      	asrs	r3, r3, #1
 801c5b4:	e7ee      	b.n	801c594 <__gethex+0x160>
 801c5b6:	f100 0914 	add.w	r9, r0, #20
 801c5ba:	f04f 0b00 	mov.w	fp, #0
 801c5be:	f1ca 0301 	rsb	r3, sl, #1
 801c5c2:	f8cd 9008 	str.w	r9, [sp, #8]
 801c5c6:	f8cd b000 	str.w	fp, [sp]
 801c5ca:	9306      	str	r3, [sp, #24]
 801c5cc:	42b7      	cmp	r7, r6
 801c5ce:	d340      	bcc.n	801c652 <__gethex+0x21e>
 801c5d0:	9802      	ldr	r0, [sp, #8]
 801c5d2:	9b00      	ldr	r3, [sp, #0]
 801c5d4:	f840 3b04 	str.w	r3, [r0], #4
 801c5d8:	eba0 0009 	sub.w	r0, r0, r9
 801c5dc:	1080      	asrs	r0, r0, #2
 801c5de:	0146      	lsls	r6, r0, #5
 801c5e0:	6120      	str	r0, [r4, #16]
 801c5e2:	4618      	mov	r0, r3
 801c5e4:	f000 fb68 	bl	801ccb8 <__hi0bits>
 801c5e8:	1a30      	subs	r0, r6, r0
 801c5ea:	f8d8 6000 	ldr.w	r6, [r8]
 801c5ee:	42b0      	cmp	r0, r6
 801c5f0:	dd63      	ble.n	801c6ba <__gethex+0x286>
 801c5f2:	1b87      	subs	r7, r0, r6
 801c5f4:	4639      	mov	r1, r7
 801c5f6:	4620      	mov	r0, r4
 801c5f8:	f000 ff02 	bl	801d400 <__any_on>
 801c5fc:	4682      	mov	sl, r0
 801c5fe:	b1a8      	cbz	r0, 801c62c <__gethex+0x1f8>
 801c600:	1e7b      	subs	r3, r7, #1
 801c602:	1159      	asrs	r1, r3, #5
 801c604:	f003 021f 	and.w	r2, r3, #31
 801c608:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 801c60c:	f04f 0a01 	mov.w	sl, #1
 801c610:	fa0a f202 	lsl.w	r2, sl, r2
 801c614:	420a      	tst	r2, r1
 801c616:	d009      	beq.n	801c62c <__gethex+0x1f8>
 801c618:	4553      	cmp	r3, sl
 801c61a:	dd05      	ble.n	801c628 <__gethex+0x1f4>
 801c61c:	1eb9      	subs	r1, r7, #2
 801c61e:	4620      	mov	r0, r4
 801c620:	f000 feee 	bl	801d400 <__any_on>
 801c624:	2800      	cmp	r0, #0
 801c626:	d145      	bne.n	801c6b4 <__gethex+0x280>
 801c628:	f04f 0a02 	mov.w	sl, #2
 801c62c:	4639      	mov	r1, r7
 801c62e:	4620      	mov	r0, r4
 801c630:	f7ff fe98 	bl	801c364 <rshift>
 801c634:	443d      	add	r5, r7
 801c636:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801c63a:	42ab      	cmp	r3, r5
 801c63c:	da4c      	bge.n	801c6d8 <__gethex+0x2a4>
 801c63e:	ee18 0a10 	vmov	r0, s16
 801c642:	4621      	mov	r1, r4
 801c644:	f000 fa82 	bl	801cb4c <_Bfree>
 801c648:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801c64a:	2300      	movs	r3, #0
 801c64c:	6013      	str	r3, [r2, #0]
 801c64e:	27a3      	movs	r7, #163	; 0xa3
 801c650:	e785      	b.n	801c55e <__gethex+0x12a>
 801c652:	1e73      	subs	r3, r6, #1
 801c654:	9a05      	ldr	r2, [sp, #20]
 801c656:	9303      	str	r3, [sp, #12]
 801c658:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801c65c:	4293      	cmp	r3, r2
 801c65e:	d019      	beq.n	801c694 <__gethex+0x260>
 801c660:	f1bb 0f20 	cmp.w	fp, #32
 801c664:	d107      	bne.n	801c676 <__gethex+0x242>
 801c666:	9b02      	ldr	r3, [sp, #8]
 801c668:	9a00      	ldr	r2, [sp, #0]
 801c66a:	f843 2b04 	str.w	r2, [r3], #4
 801c66e:	9302      	str	r3, [sp, #8]
 801c670:	2300      	movs	r3, #0
 801c672:	9300      	str	r3, [sp, #0]
 801c674:	469b      	mov	fp, r3
 801c676:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 801c67a:	f7ff fec5 	bl	801c408 <__hexdig_fun>
 801c67e:	9b00      	ldr	r3, [sp, #0]
 801c680:	f000 000f 	and.w	r0, r0, #15
 801c684:	fa00 f00b 	lsl.w	r0, r0, fp
 801c688:	4303      	orrs	r3, r0
 801c68a:	9300      	str	r3, [sp, #0]
 801c68c:	f10b 0b04 	add.w	fp, fp, #4
 801c690:	9b03      	ldr	r3, [sp, #12]
 801c692:	e00d      	b.n	801c6b0 <__gethex+0x27c>
 801c694:	9b03      	ldr	r3, [sp, #12]
 801c696:	9a06      	ldr	r2, [sp, #24]
 801c698:	4413      	add	r3, r2
 801c69a:	42bb      	cmp	r3, r7
 801c69c:	d3e0      	bcc.n	801c660 <__gethex+0x22c>
 801c69e:	4618      	mov	r0, r3
 801c6a0:	9901      	ldr	r1, [sp, #4]
 801c6a2:	9307      	str	r3, [sp, #28]
 801c6a4:	4652      	mov	r2, sl
 801c6a6:	f7fe f81d 	bl	801a6e4 <strncmp>
 801c6aa:	9b07      	ldr	r3, [sp, #28]
 801c6ac:	2800      	cmp	r0, #0
 801c6ae:	d1d7      	bne.n	801c660 <__gethex+0x22c>
 801c6b0:	461e      	mov	r6, r3
 801c6b2:	e78b      	b.n	801c5cc <__gethex+0x198>
 801c6b4:	f04f 0a03 	mov.w	sl, #3
 801c6b8:	e7b8      	b.n	801c62c <__gethex+0x1f8>
 801c6ba:	da0a      	bge.n	801c6d2 <__gethex+0x29e>
 801c6bc:	1a37      	subs	r7, r6, r0
 801c6be:	4621      	mov	r1, r4
 801c6c0:	ee18 0a10 	vmov	r0, s16
 801c6c4:	463a      	mov	r2, r7
 801c6c6:	f000 fc5d 	bl	801cf84 <__lshift>
 801c6ca:	1bed      	subs	r5, r5, r7
 801c6cc:	4604      	mov	r4, r0
 801c6ce:	f100 0914 	add.w	r9, r0, #20
 801c6d2:	f04f 0a00 	mov.w	sl, #0
 801c6d6:	e7ae      	b.n	801c636 <__gethex+0x202>
 801c6d8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801c6dc:	42a8      	cmp	r0, r5
 801c6de:	dd72      	ble.n	801c7c6 <__gethex+0x392>
 801c6e0:	1b45      	subs	r5, r0, r5
 801c6e2:	42ae      	cmp	r6, r5
 801c6e4:	dc36      	bgt.n	801c754 <__gethex+0x320>
 801c6e6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801c6ea:	2b02      	cmp	r3, #2
 801c6ec:	d02a      	beq.n	801c744 <__gethex+0x310>
 801c6ee:	2b03      	cmp	r3, #3
 801c6f0:	d02c      	beq.n	801c74c <__gethex+0x318>
 801c6f2:	2b01      	cmp	r3, #1
 801c6f4:	d115      	bne.n	801c722 <__gethex+0x2ee>
 801c6f6:	42ae      	cmp	r6, r5
 801c6f8:	d113      	bne.n	801c722 <__gethex+0x2ee>
 801c6fa:	2e01      	cmp	r6, #1
 801c6fc:	d10b      	bne.n	801c716 <__gethex+0x2e2>
 801c6fe:	9a04      	ldr	r2, [sp, #16]
 801c700:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801c704:	6013      	str	r3, [r2, #0]
 801c706:	2301      	movs	r3, #1
 801c708:	6123      	str	r3, [r4, #16]
 801c70a:	f8c9 3000 	str.w	r3, [r9]
 801c70e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801c710:	2762      	movs	r7, #98	; 0x62
 801c712:	601c      	str	r4, [r3, #0]
 801c714:	e723      	b.n	801c55e <__gethex+0x12a>
 801c716:	1e71      	subs	r1, r6, #1
 801c718:	4620      	mov	r0, r4
 801c71a:	f000 fe71 	bl	801d400 <__any_on>
 801c71e:	2800      	cmp	r0, #0
 801c720:	d1ed      	bne.n	801c6fe <__gethex+0x2ca>
 801c722:	ee18 0a10 	vmov	r0, s16
 801c726:	4621      	mov	r1, r4
 801c728:	f000 fa10 	bl	801cb4c <_Bfree>
 801c72c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801c72e:	2300      	movs	r3, #0
 801c730:	6013      	str	r3, [r2, #0]
 801c732:	2750      	movs	r7, #80	; 0x50
 801c734:	e713      	b.n	801c55e <__gethex+0x12a>
 801c736:	bf00      	nop
 801c738:	08037978 	.word	0x08037978
 801c73c:	080378fb 	.word	0x080378fb
 801c740:	0803790c 	.word	0x0803790c
 801c744:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801c746:	2b00      	cmp	r3, #0
 801c748:	d1eb      	bne.n	801c722 <__gethex+0x2ee>
 801c74a:	e7d8      	b.n	801c6fe <__gethex+0x2ca>
 801c74c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801c74e:	2b00      	cmp	r3, #0
 801c750:	d1d5      	bne.n	801c6fe <__gethex+0x2ca>
 801c752:	e7e6      	b.n	801c722 <__gethex+0x2ee>
 801c754:	1e6f      	subs	r7, r5, #1
 801c756:	f1ba 0f00 	cmp.w	sl, #0
 801c75a:	d131      	bne.n	801c7c0 <__gethex+0x38c>
 801c75c:	b127      	cbz	r7, 801c768 <__gethex+0x334>
 801c75e:	4639      	mov	r1, r7
 801c760:	4620      	mov	r0, r4
 801c762:	f000 fe4d 	bl	801d400 <__any_on>
 801c766:	4682      	mov	sl, r0
 801c768:	117b      	asrs	r3, r7, #5
 801c76a:	2101      	movs	r1, #1
 801c76c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 801c770:	f007 071f 	and.w	r7, r7, #31
 801c774:	fa01 f707 	lsl.w	r7, r1, r7
 801c778:	421f      	tst	r7, r3
 801c77a:	4629      	mov	r1, r5
 801c77c:	4620      	mov	r0, r4
 801c77e:	bf18      	it	ne
 801c780:	f04a 0a02 	orrne.w	sl, sl, #2
 801c784:	1b76      	subs	r6, r6, r5
 801c786:	f7ff fded 	bl	801c364 <rshift>
 801c78a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801c78e:	2702      	movs	r7, #2
 801c790:	f1ba 0f00 	cmp.w	sl, #0
 801c794:	d048      	beq.n	801c828 <__gethex+0x3f4>
 801c796:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801c79a:	2b02      	cmp	r3, #2
 801c79c:	d015      	beq.n	801c7ca <__gethex+0x396>
 801c79e:	2b03      	cmp	r3, #3
 801c7a0:	d017      	beq.n	801c7d2 <__gethex+0x39e>
 801c7a2:	2b01      	cmp	r3, #1
 801c7a4:	d109      	bne.n	801c7ba <__gethex+0x386>
 801c7a6:	f01a 0f02 	tst.w	sl, #2
 801c7aa:	d006      	beq.n	801c7ba <__gethex+0x386>
 801c7ac:	f8d9 0000 	ldr.w	r0, [r9]
 801c7b0:	ea4a 0a00 	orr.w	sl, sl, r0
 801c7b4:	f01a 0f01 	tst.w	sl, #1
 801c7b8:	d10e      	bne.n	801c7d8 <__gethex+0x3a4>
 801c7ba:	f047 0710 	orr.w	r7, r7, #16
 801c7be:	e033      	b.n	801c828 <__gethex+0x3f4>
 801c7c0:	f04f 0a01 	mov.w	sl, #1
 801c7c4:	e7d0      	b.n	801c768 <__gethex+0x334>
 801c7c6:	2701      	movs	r7, #1
 801c7c8:	e7e2      	b.n	801c790 <__gethex+0x35c>
 801c7ca:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801c7cc:	f1c3 0301 	rsb	r3, r3, #1
 801c7d0:	9315      	str	r3, [sp, #84]	; 0x54
 801c7d2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801c7d4:	2b00      	cmp	r3, #0
 801c7d6:	d0f0      	beq.n	801c7ba <__gethex+0x386>
 801c7d8:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801c7dc:	f104 0314 	add.w	r3, r4, #20
 801c7e0:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801c7e4:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 801c7e8:	f04f 0c00 	mov.w	ip, #0
 801c7ec:	4618      	mov	r0, r3
 801c7ee:	f853 2b04 	ldr.w	r2, [r3], #4
 801c7f2:	f1b2 3fff 	cmp.w	r2, #4294967295
 801c7f6:	d01c      	beq.n	801c832 <__gethex+0x3fe>
 801c7f8:	3201      	adds	r2, #1
 801c7fa:	6002      	str	r2, [r0, #0]
 801c7fc:	2f02      	cmp	r7, #2
 801c7fe:	f104 0314 	add.w	r3, r4, #20
 801c802:	d13f      	bne.n	801c884 <__gethex+0x450>
 801c804:	f8d8 2000 	ldr.w	r2, [r8]
 801c808:	3a01      	subs	r2, #1
 801c80a:	42b2      	cmp	r2, r6
 801c80c:	d10a      	bne.n	801c824 <__gethex+0x3f0>
 801c80e:	1171      	asrs	r1, r6, #5
 801c810:	2201      	movs	r2, #1
 801c812:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801c816:	f006 061f 	and.w	r6, r6, #31
 801c81a:	fa02 f606 	lsl.w	r6, r2, r6
 801c81e:	421e      	tst	r6, r3
 801c820:	bf18      	it	ne
 801c822:	4617      	movne	r7, r2
 801c824:	f047 0720 	orr.w	r7, r7, #32
 801c828:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801c82a:	601c      	str	r4, [r3, #0]
 801c82c:	9b04      	ldr	r3, [sp, #16]
 801c82e:	601d      	str	r5, [r3, #0]
 801c830:	e695      	b.n	801c55e <__gethex+0x12a>
 801c832:	4299      	cmp	r1, r3
 801c834:	f843 cc04 	str.w	ip, [r3, #-4]
 801c838:	d8d8      	bhi.n	801c7ec <__gethex+0x3b8>
 801c83a:	68a3      	ldr	r3, [r4, #8]
 801c83c:	459b      	cmp	fp, r3
 801c83e:	db19      	blt.n	801c874 <__gethex+0x440>
 801c840:	6861      	ldr	r1, [r4, #4]
 801c842:	ee18 0a10 	vmov	r0, s16
 801c846:	3101      	adds	r1, #1
 801c848:	f000 f940 	bl	801cacc <_Balloc>
 801c84c:	4681      	mov	r9, r0
 801c84e:	b918      	cbnz	r0, 801c858 <__gethex+0x424>
 801c850:	4b1a      	ldr	r3, [pc, #104]	; (801c8bc <__gethex+0x488>)
 801c852:	4602      	mov	r2, r0
 801c854:	2184      	movs	r1, #132	; 0x84
 801c856:	e6a8      	b.n	801c5aa <__gethex+0x176>
 801c858:	6922      	ldr	r2, [r4, #16]
 801c85a:	3202      	adds	r2, #2
 801c85c:	f104 010c 	add.w	r1, r4, #12
 801c860:	0092      	lsls	r2, r2, #2
 801c862:	300c      	adds	r0, #12
 801c864:	f7fd f8dc 	bl	8019a20 <memcpy>
 801c868:	4621      	mov	r1, r4
 801c86a:	ee18 0a10 	vmov	r0, s16
 801c86e:	f000 f96d 	bl	801cb4c <_Bfree>
 801c872:	464c      	mov	r4, r9
 801c874:	6923      	ldr	r3, [r4, #16]
 801c876:	1c5a      	adds	r2, r3, #1
 801c878:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801c87c:	6122      	str	r2, [r4, #16]
 801c87e:	2201      	movs	r2, #1
 801c880:	615a      	str	r2, [r3, #20]
 801c882:	e7bb      	b.n	801c7fc <__gethex+0x3c8>
 801c884:	6922      	ldr	r2, [r4, #16]
 801c886:	455a      	cmp	r2, fp
 801c888:	dd0b      	ble.n	801c8a2 <__gethex+0x46e>
 801c88a:	2101      	movs	r1, #1
 801c88c:	4620      	mov	r0, r4
 801c88e:	f7ff fd69 	bl	801c364 <rshift>
 801c892:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801c896:	3501      	adds	r5, #1
 801c898:	42ab      	cmp	r3, r5
 801c89a:	f6ff aed0 	blt.w	801c63e <__gethex+0x20a>
 801c89e:	2701      	movs	r7, #1
 801c8a0:	e7c0      	b.n	801c824 <__gethex+0x3f0>
 801c8a2:	f016 061f 	ands.w	r6, r6, #31
 801c8a6:	d0fa      	beq.n	801c89e <__gethex+0x46a>
 801c8a8:	449a      	add	sl, r3
 801c8aa:	f1c6 0620 	rsb	r6, r6, #32
 801c8ae:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 801c8b2:	f000 fa01 	bl	801ccb8 <__hi0bits>
 801c8b6:	42b0      	cmp	r0, r6
 801c8b8:	dbe7      	blt.n	801c88a <__gethex+0x456>
 801c8ba:	e7f0      	b.n	801c89e <__gethex+0x46a>
 801c8bc:	080378fb 	.word	0x080378fb

0801c8c0 <L_shift>:
 801c8c0:	f1c2 0208 	rsb	r2, r2, #8
 801c8c4:	0092      	lsls	r2, r2, #2
 801c8c6:	b570      	push	{r4, r5, r6, lr}
 801c8c8:	f1c2 0620 	rsb	r6, r2, #32
 801c8cc:	6843      	ldr	r3, [r0, #4]
 801c8ce:	6804      	ldr	r4, [r0, #0]
 801c8d0:	fa03 f506 	lsl.w	r5, r3, r6
 801c8d4:	432c      	orrs	r4, r5
 801c8d6:	40d3      	lsrs	r3, r2
 801c8d8:	6004      	str	r4, [r0, #0]
 801c8da:	f840 3f04 	str.w	r3, [r0, #4]!
 801c8de:	4288      	cmp	r0, r1
 801c8e0:	d3f4      	bcc.n	801c8cc <L_shift+0xc>
 801c8e2:	bd70      	pop	{r4, r5, r6, pc}

0801c8e4 <__match>:
 801c8e4:	b530      	push	{r4, r5, lr}
 801c8e6:	6803      	ldr	r3, [r0, #0]
 801c8e8:	3301      	adds	r3, #1
 801c8ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 801c8ee:	b914      	cbnz	r4, 801c8f6 <__match+0x12>
 801c8f0:	6003      	str	r3, [r0, #0]
 801c8f2:	2001      	movs	r0, #1
 801c8f4:	bd30      	pop	{r4, r5, pc}
 801c8f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 801c8fa:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801c8fe:	2d19      	cmp	r5, #25
 801c900:	bf98      	it	ls
 801c902:	3220      	addls	r2, #32
 801c904:	42a2      	cmp	r2, r4
 801c906:	d0f0      	beq.n	801c8ea <__match+0x6>
 801c908:	2000      	movs	r0, #0
 801c90a:	e7f3      	b.n	801c8f4 <__match+0x10>

0801c90c <__hexnan>:
 801c90c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c910:	680b      	ldr	r3, [r1, #0]
 801c912:	6801      	ldr	r1, [r0, #0]
 801c914:	115e      	asrs	r6, r3, #5
 801c916:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801c91a:	f013 031f 	ands.w	r3, r3, #31
 801c91e:	b087      	sub	sp, #28
 801c920:	bf18      	it	ne
 801c922:	3604      	addne	r6, #4
 801c924:	2500      	movs	r5, #0
 801c926:	1f37      	subs	r7, r6, #4
 801c928:	4682      	mov	sl, r0
 801c92a:	4690      	mov	r8, r2
 801c92c:	9301      	str	r3, [sp, #4]
 801c92e:	f846 5c04 	str.w	r5, [r6, #-4]
 801c932:	46b9      	mov	r9, r7
 801c934:	463c      	mov	r4, r7
 801c936:	9502      	str	r5, [sp, #8]
 801c938:	46ab      	mov	fp, r5
 801c93a:	784a      	ldrb	r2, [r1, #1]
 801c93c:	1c4b      	adds	r3, r1, #1
 801c93e:	9303      	str	r3, [sp, #12]
 801c940:	b342      	cbz	r2, 801c994 <__hexnan+0x88>
 801c942:	4610      	mov	r0, r2
 801c944:	9105      	str	r1, [sp, #20]
 801c946:	9204      	str	r2, [sp, #16]
 801c948:	f7ff fd5e 	bl	801c408 <__hexdig_fun>
 801c94c:	2800      	cmp	r0, #0
 801c94e:	d14f      	bne.n	801c9f0 <__hexnan+0xe4>
 801c950:	9a04      	ldr	r2, [sp, #16]
 801c952:	9905      	ldr	r1, [sp, #20]
 801c954:	2a20      	cmp	r2, #32
 801c956:	d818      	bhi.n	801c98a <__hexnan+0x7e>
 801c958:	9b02      	ldr	r3, [sp, #8]
 801c95a:	459b      	cmp	fp, r3
 801c95c:	dd13      	ble.n	801c986 <__hexnan+0x7a>
 801c95e:	454c      	cmp	r4, r9
 801c960:	d206      	bcs.n	801c970 <__hexnan+0x64>
 801c962:	2d07      	cmp	r5, #7
 801c964:	dc04      	bgt.n	801c970 <__hexnan+0x64>
 801c966:	462a      	mov	r2, r5
 801c968:	4649      	mov	r1, r9
 801c96a:	4620      	mov	r0, r4
 801c96c:	f7ff ffa8 	bl	801c8c0 <L_shift>
 801c970:	4544      	cmp	r4, r8
 801c972:	d950      	bls.n	801ca16 <__hexnan+0x10a>
 801c974:	2300      	movs	r3, #0
 801c976:	f1a4 0904 	sub.w	r9, r4, #4
 801c97a:	f844 3c04 	str.w	r3, [r4, #-4]
 801c97e:	f8cd b008 	str.w	fp, [sp, #8]
 801c982:	464c      	mov	r4, r9
 801c984:	461d      	mov	r5, r3
 801c986:	9903      	ldr	r1, [sp, #12]
 801c988:	e7d7      	b.n	801c93a <__hexnan+0x2e>
 801c98a:	2a29      	cmp	r2, #41	; 0x29
 801c98c:	d156      	bne.n	801ca3c <__hexnan+0x130>
 801c98e:	3102      	adds	r1, #2
 801c990:	f8ca 1000 	str.w	r1, [sl]
 801c994:	f1bb 0f00 	cmp.w	fp, #0
 801c998:	d050      	beq.n	801ca3c <__hexnan+0x130>
 801c99a:	454c      	cmp	r4, r9
 801c99c:	d206      	bcs.n	801c9ac <__hexnan+0xa0>
 801c99e:	2d07      	cmp	r5, #7
 801c9a0:	dc04      	bgt.n	801c9ac <__hexnan+0xa0>
 801c9a2:	462a      	mov	r2, r5
 801c9a4:	4649      	mov	r1, r9
 801c9a6:	4620      	mov	r0, r4
 801c9a8:	f7ff ff8a 	bl	801c8c0 <L_shift>
 801c9ac:	4544      	cmp	r4, r8
 801c9ae:	d934      	bls.n	801ca1a <__hexnan+0x10e>
 801c9b0:	f1a8 0204 	sub.w	r2, r8, #4
 801c9b4:	4623      	mov	r3, r4
 801c9b6:	f853 1b04 	ldr.w	r1, [r3], #4
 801c9ba:	f842 1f04 	str.w	r1, [r2, #4]!
 801c9be:	429f      	cmp	r7, r3
 801c9c0:	d2f9      	bcs.n	801c9b6 <__hexnan+0xaa>
 801c9c2:	1b3b      	subs	r3, r7, r4
 801c9c4:	f023 0303 	bic.w	r3, r3, #3
 801c9c8:	3304      	adds	r3, #4
 801c9ca:	3401      	adds	r4, #1
 801c9cc:	3e03      	subs	r6, #3
 801c9ce:	42b4      	cmp	r4, r6
 801c9d0:	bf88      	it	hi
 801c9d2:	2304      	movhi	r3, #4
 801c9d4:	4443      	add	r3, r8
 801c9d6:	2200      	movs	r2, #0
 801c9d8:	f843 2b04 	str.w	r2, [r3], #4
 801c9dc:	429f      	cmp	r7, r3
 801c9de:	d2fb      	bcs.n	801c9d8 <__hexnan+0xcc>
 801c9e0:	683b      	ldr	r3, [r7, #0]
 801c9e2:	b91b      	cbnz	r3, 801c9ec <__hexnan+0xe0>
 801c9e4:	4547      	cmp	r7, r8
 801c9e6:	d127      	bne.n	801ca38 <__hexnan+0x12c>
 801c9e8:	2301      	movs	r3, #1
 801c9ea:	603b      	str	r3, [r7, #0]
 801c9ec:	2005      	movs	r0, #5
 801c9ee:	e026      	b.n	801ca3e <__hexnan+0x132>
 801c9f0:	3501      	adds	r5, #1
 801c9f2:	2d08      	cmp	r5, #8
 801c9f4:	f10b 0b01 	add.w	fp, fp, #1
 801c9f8:	dd06      	ble.n	801ca08 <__hexnan+0xfc>
 801c9fa:	4544      	cmp	r4, r8
 801c9fc:	d9c3      	bls.n	801c986 <__hexnan+0x7a>
 801c9fe:	2300      	movs	r3, #0
 801ca00:	f844 3c04 	str.w	r3, [r4, #-4]
 801ca04:	2501      	movs	r5, #1
 801ca06:	3c04      	subs	r4, #4
 801ca08:	6822      	ldr	r2, [r4, #0]
 801ca0a:	f000 000f 	and.w	r0, r0, #15
 801ca0e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 801ca12:	6022      	str	r2, [r4, #0]
 801ca14:	e7b7      	b.n	801c986 <__hexnan+0x7a>
 801ca16:	2508      	movs	r5, #8
 801ca18:	e7b5      	b.n	801c986 <__hexnan+0x7a>
 801ca1a:	9b01      	ldr	r3, [sp, #4]
 801ca1c:	2b00      	cmp	r3, #0
 801ca1e:	d0df      	beq.n	801c9e0 <__hexnan+0xd4>
 801ca20:	f04f 32ff 	mov.w	r2, #4294967295
 801ca24:	f1c3 0320 	rsb	r3, r3, #32
 801ca28:	fa22 f303 	lsr.w	r3, r2, r3
 801ca2c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 801ca30:	401a      	ands	r2, r3
 801ca32:	f846 2c04 	str.w	r2, [r6, #-4]
 801ca36:	e7d3      	b.n	801c9e0 <__hexnan+0xd4>
 801ca38:	3f04      	subs	r7, #4
 801ca3a:	e7d1      	b.n	801c9e0 <__hexnan+0xd4>
 801ca3c:	2004      	movs	r0, #4
 801ca3e:	b007      	add	sp, #28
 801ca40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801ca44 <_isatty_r>:
 801ca44:	b538      	push	{r3, r4, r5, lr}
 801ca46:	4d06      	ldr	r5, [pc, #24]	; (801ca60 <_isatty_r+0x1c>)
 801ca48:	2300      	movs	r3, #0
 801ca4a:	4604      	mov	r4, r0
 801ca4c:	4608      	mov	r0, r1
 801ca4e:	602b      	str	r3, [r5, #0]
 801ca50:	f7f4 fbc5 	bl	80111de <_isatty>
 801ca54:	1c43      	adds	r3, r0, #1
 801ca56:	d102      	bne.n	801ca5e <_isatty_r+0x1a>
 801ca58:	682b      	ldr	r3, [r5, #0]
 801ca5a:	b103      	cbz	r3, 801ca5e <_isatty_r+0x1a>
 801ca5c:	6023      	str	r3, [r4, #0]
 801ca5e:	bd38      	pop	{r3, r4, r5, pc}
 801ca60:	2000c028 	.word	0x2000c028

0801ca64 <_localeconv_r>:
 801ca64:	4800      	ldr	r0, [pc, #0]	; (801ca68 <_localeconv_r+0x4>)
 801ca66:	4770      	bx	lr
 801ca68:	200009dc 	.word	0x200009dc

0801ca6c <_lseek_r>:
 801ca6c:	b538      	push	{r3, r4, r5, lr}
 801ca6e:	4d07      	ldr	r5, [pc, #28]	; (801ca8c <_lseek_r+0x20>)
 801ca70:	4604      	mov	r4, r0
 801ca72:	4608      	mov	r0, r1
 801ca74:	4611      	mov	r1, r2
 801ca76:	2200      	movs	r2, #0
 801ca78:	602a      	str	r2, [r5, #0]
 801ca7a:	461a      	mov	r2, r3
 801ca7c:	f7f4 fbb1 	bl	80111e2 <_lseek>
 801ca80:	1c43      	adds	r3, r0, #1
 801ca82:	d102      	bne.n	801ca8a <_lseek_r+0x1e>
 801ca84:	682b      	ldr	r3, [r5, #0]
 801ca86:	b103      	cbz	r3, 801ca8a <_lseek_r+0x1e>
 801ca88:	6023      	str	r3, [r4, #0]
 801ca8a:	bd38      	pop	{r3, r4, r5, pc}
 801ca8c:	2000c028 	.word	0x2000c028

0801ca90 <__ascii_mbtowc>:
 801ca90:	b082      	sub	sp, #8
 801ca92:	b901      	cbnz	r1, 801ca96 <__ascii_mbtowc+0x6>
 801ca94:	a901      	add	r1, sp, #4
 801ca96:	b142      	cbz	r2, 801caaa <__ascii_mbtowc+0x1a>
 801ca98:	b14b      	cbz	r3, 801caae <__ascii_mbtowc+0x1e>
 801ca9a:	7813      	ldrb	r3, [r2, #0]
 801ca9c:	600b      	str	r3, [r1, #0]
 801ca9e:	7812      	ldrb	r2, [r2, #0]
 801caa0:	1e10      	subs	r0, r2, #0
 801caa2:	bf18      	it	ne
 801caa4:	2001      	movne	r0, #1
 801caa6:	b002      	add	sp, #8
 801caa8:	4770      	bx	lr
 801caaa:	4610      	mov	r0, r2
 801caac:	e7fb      	b.n	801caa6 <__ascii_mbtowc+0x16>
 801caae:	f06f 0001 	mvn.w	r0, #1
 801cab2:	e7f8      	b.n	801caa6 <__ascii_mbtowc+0x16>

0801cab4 <__malloc_lock>:
 801cab4:	4801      	ldr	r0, [pc, #4]	; (801cabc <__malloc_lock+0x8>)
 801cab6:	f7fc bf3c 	b.w	8019932 <__retarget_lock_acquire_recursive>
 801caba:	bf00      	nop
 801cabc:	2000c020 	.word	0x2000c020

0801cac0 <__malloc_unlock>:
 801cac0:	4801      	ldr	r0, [pc, #4]	; (801cac8 <__malloc_unlock+0x8>)
 801cac2:	f7fc bf37 	b.w	8019934 <__retarget_lock_release_recursive>
 801cac6:	bf00      	nop
 801cac8:	2000c020 	.word	0x2000c020

0801cacc <_Balloc>:
 801cacc:	b570      	push	{r4, r5, r6, lr}
 801cace:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801cad0:	4604      	mov	r4, r0
 801cad2:	460d      	mov	r5, r1
 801cad4:	b976      	cbnz	r6, 801caf4 <_Balloc+0x28>
 801cad6:	2010      	movs	r0, #16
 801cad8:	f7fc ff92 	bl	8019a00 <malloc>
 801cadc:	4602      	mov	r2, r0
 801cade:	6260      	str	r0, [r4, #36]	; 0x24
 801cae0:	b920      	cbnz	r0, 801caec <_Balloc+0x20>
 801cae2:	4b18      	ldr	r3, [pc, #96]	; (801cb44 <_Balloc+0x78>)
 801cae4:	4818      	ldr	r0, [pc, #96]	; (801cb48 <_Balloc+0x7c>)
 801cae6:	2166      	movs	r1, #102	; 0x66
 801cae8:	f000 ffc6 	bl	801da78 <__assert_func>
 801caec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801caf0:	6006      	str	r6, [r0, #0]
 801caf2:	60c6      	str	r6, [r0, #12]
 801caf4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801caf6:	68f3      	ldr	r3, [r6, #12]
 801caf8:	b183      	cbz	r3, 801cb1c <_Balloc+0x50>
 801cafa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801cafc:	68db      	ldr	r3, [r3, #12]
 801cafe:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801cb02:	b9b8      	cbnz	r0, 801cb34 <_Balloc+0x68>
 801cb04:	2101      	movs	r1, #1
 801cb06:	fa01 f605 	lsl.w	r6, r1, r5
 801cb0a:	1d72      	adds	r2, r6, #5
 801cb0c:	0092      	lsls	r2, r2, #2
 801cb0e:	4620      	mov	r0, r4
 801cb10:	f000 fc97 	bl	801d442 <_calloc_r>
 801cb14:	b160      	cbz	r0, 801cb30 <_Balloc+0x64>
 801cb16:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801cb1a:	e00e      	b.n	801cb3a <_Balloc+0x6e>
 801cb1c:	2221      	movs	r2, #33	; 0x21
 801cb1e:	2104      	movs	r1, #4
 801cb20:	4620      	mov	r0, r4
 801cb22:	f000 fc8e 	bl	801d442 <_calloc_r>
 801cb26:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801cb28:	60f0      	str	r0, [r6, #12]
 801cb2a:	68db      	ldr	r3, [r3, #12]
 801cb2c:	2b00      	cmp	r3, #0
 801cb2e:	d1e4      	bne.n	801cafa <_Balloc+0x2e>
 801cb30:	2000      	movs	r0, #0
 801cb32:	bd70      	pop	{r4, r5, r6, pc}
 801cb34:	6802      	ldr	r2, [r0, #0]
 801cb36:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801cb3a:	2300      	movs	r3, #0
 801cb3c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801cb40:	e7f7      	b.n	801cb32 <_Balloc+0x66>
 801cb42:	bf00      	nop
 801cb44:	08037885 	.word	0x08037885
 801cb48:	0803798a 	.word	0x0803798a

0801cb4c <_Bfree>:
 801cb4c:	b570      	push	{r4, r5, r6, lr}
 801cb4e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801cb50:	4605      	mov	r5, r0
 801cb52:	460c      	mov	r4, r1
 801cb54:	b976      	cbnz	r6, 801cb74 <_Bfree+0x28>
 801cb56:	2010      	movs	r0, #16
 801cb58:	f7fc ff52 	bl	8019a00 <malloc>
 801cb5c:	4602      	mov	r2, r0
 801cb5e:	6268      	str	r0, [r5, #36]	; 0x24
 801cb60:	b920      	cbnz	r0, 801cb6c <_Bfree+0x20>
 801cb62:	4b09      	ldr	r3, [pc, #36]	; (801cb88 <_Bfree+0x3c>)
 801cb64:	4809      	ldr	r0, [pc, #36]	; (801cb8c <_Bfree+0x40>)
 801cb66:	218a      	movs	r1, #138	; 0x8a
 801cb68:	f000 ff86 	bl	801da78 <__assert_func>
 801cb6c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801cb70:	6006      	str	r6, [r0, #0]
 801cb72:	60c6      	str	r6, [r0, #12]
 801cb74:	b13c      	cbz	r4, 801cb86 <_Bfree+0x3a>
 801cb76:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801cb78:	6862      	ldr	r2, [r4, #4]
 801cb7a:	68db      	ldr	r3, [r3, #12]
 801cb7c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801cb80:	6021      	str	r1, [r4, #0]
 801cb82:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801cb86:	bd70      	pop	{r4, r5, r6, pc}
 801cb88:	08037885 	.word	0x08037885
 801cb8c:	0803798a 	.word	0x0803798a

0801cb90 <__multadd>:
 801cb90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801cb94:	690e      	ldr	r6, [r1, #16]
 801cb96:	4607      	mov	r7, r0
 801cb98:	4698      	mov	r8, r3
 801cb9a:	460c      	mov	r4, r1
 801cb9c:	f101 0014 	add.w	r0, r1, #20
 801cba0:	2300      	movs	r3, #0
 801cba2:	6805      	ldr	r5, [r0, #0]
 801cba4:	b2a9      	uxth	r1, r5
 801cba6:	fb02 8101 	mla	r1, r2, r1, r8
 801cbaa:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 801cbae:	0c2d      	lsrs	r5, r5, #16
 801cbb0:	fb02 c505 	mla	r5, r2, r5, ip
 801cbb4:	b289      	uxth	r1, r1
 801cbb6:	3301      	adds	r3, #1
 801cbb8:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 801cbbc:	429e      	cmp	r6, r3
 801cbbe:	f840 1b04 	str.w	r1, [r0], #4
 801cbc2:	ea4f 4815 	mov.w	r8, r5, lsr #16
 801cbc6:	dcec      	bgt.n	801cba2 <__multadd+0x12>
 801cbc8:	f1b8 0f00 	cmp.w	r8, #0
 801cbcc:	d022      	beq.n	801cc14 <__multadd+0x84>
 801cbce:	68a3      	ldr	r3, [r4, #8]
 801cbd0:	42b3      	cmp	r3, r6
 801cbd2:	dc19      	bgt.n	801cc08 <__multadd+0x78>
 801cbd4:	6861      	ldr	r1, [r4, #4]
 801cbd6:	4638      	mov	r0, r7
 801cbd8:	3101      	adds	r1, #1
 801cbda:	f7ff ff77 	bl	801cacc <_Balloc>
 801cbde:	4605      	mov	r5, r0
 801cbe0:	b928      	cbnz	r0, 801cbee <__multadd+0x5e>
 801cbe2:	4602      	mov	r2, r0
 801cbe4:	4b0d      	ldr	r3, [pc, #52]	; (801cc1c <__multadd+0x8c>)
 801cbe6:	480e      	ldr	r0, [pc, #56]	; (801cc20 <__multadd+0x90>)
 801cbe8:	21b5      	movs	r1, #181	; 0xb5
 801cbea:	f000 ff45 	bl	801da78 <__assert_func>
 801cbee:	6922      	ldr	r2, [r4, #16]
 801cbf0:	3202      	adds	r2, #2
 801cbf2:	f104 010c 	add.w	r1, r4, #12
 801cbf6:	0092      	lsls	r2, r2, #2
 801cbf8:	300c      	adds	r0, #12
 801cbfa:	f7fc ff11 	bl	8019a20 <memcpy>
 801cbfe:	4621      	mov	r1, r4
 801cc00:	4638      	mov	r0, r7
 801cc02:	f7ff ffa3 	bl	801cb4c <_Bfree>
 801cc06:	462c      	mov	r4, r5
 801cc08:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 801cc0c:	3601      	adds	r6, #1
 801cc0e:	f8c3 8014 	str.w	r8, [r3, #20]
 801cc12:	6126      	str	r6, [r4, #16]
 801cc14:	4620      	mov	r0, r4
 801cc16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801cc1a:	bf00      	nop
 801cc1c:	080378fb 	.word	0x080378fb
 801cc20:	0803798a 	.word	0x0803798a

0801cc24 <__s2b>:
 801cc24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801cc28:	460c      	mov	r4, r1
 801cc2a:	4615      	mov	r5, r2
 801cc2c:	461f      	mov	r7, r3
 801cc2e:	2209      	movs	r2, #9
 801cc30:	3308      	adds	r3, #8
 801cc32:	4606      	mov	r6, r0
 801cc34:	fb93 f3f2 	sdiv	r3, r3, r2
 801cc38:	2100      	movs	r1, #0
 801cc3a:	2201      	movs	r2, #1
 801cc3c:	429a      	cmp	r2, r3
 801cc3e:	db09      	blt.n	801cc54 <__s2b+0x30>
 801cc40:	4630      	mov	r0, r6
 801cc42:	f7ff ff43 	bl	801cacc <_Balloc>
 801cc46:	b940      	cbnz	r0, 801cc5a <__s2b+0x36>
 801cc48:	4602      	mov	r2, r0
 801cc4a:	4b19      	ldr	r3, [pc, #100]	; (801ccb0 <__s2b+0x8c>)
 801cc4c:	4819      	ldr	r0, [pc, #100]	; (801ccb4 <__s2b+0x90>)
 801cc4e:	21ce      	movs	r1, #206	; 0xce
 801cc50:	f000 ff12 	bl	801da78 <__assert_func>
 801cc54:	0052      	lsls	r2, r2, #1
 801cc56:	3101      	adds	r1, #1
 801cc58:	e7f0      	b.n	801cc3c <__s2b+0x18>
 801cc5a:	9b08      	ldr	r3, [sp, #32]
 801cc5c:	6143      	str	r3, [r0, #20]
 801cc5e:	2d09      	cmp	r5, #9
 801cc60:	f04f 0301 	mov.w	r3, #1
 801cc64:	6103      	str	r3, [r0, #16]
 801cc66:	dd16      	ble.n	801cc96 <__s2b+0x72>
 801cc68:	f104 0909 	add.w	r9, r4, #9
 801cc6c:	46c8      	mov	r8, r9
 801cc6e:	442c      	add	r4, r5
 801cc70:	f818 3b01 	ldrb.w	r3, [r8], #1
 801cc74:	4601      	mov	r1, r0
 801cc76:	3b30      	subs	r3, #48	; 0x30
 801cc78:	220a      	movs	r2, #10
 801cc7a:	4630      	mov	r0, r6
 801cc7c:	f7ff ff88 	bl	801cb90 <__multadd>
 801cc80:	45a0      	cmp	r8, r4
 801cc82:	d1f5      	bne.n	801cc70 <__s2b+0x4c>
 801cc84:	f1a5 0408 	sub.w	r4, r5, #8
 801cc88:	444c      	add	r4, r9
 801cc8a:	1b2d      	subs	r5, r5, r4
 801cc8c:	1963      	adds	r3, r4, r5
 801cc8e:	42bb      	cmp	r3, r7
 801cc90:	db04      	blt.n	801cc9c <__s2b+0x78>
 801cc92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801cc96:	340a      	adds	r4, #10
 801cc98:	2509      	movs	r5, #9
 801cc9a:	e7f6      	b.n	801cc8a <__s2b+0x66>
 801cc9c:	f814 3b01 	ldrb.w	r3, [r4], #1
 801cca0:	4601      	mov	r1, r0
 801cca2:	3b30      	subs	r3, #48	; 0x30
 801cca4:	220a      	movs	r2, #10
 801cca6:	4630      	mov	r0, r6
 801cca8:	f7ff ff72 	bl	801cb90 <__multadd>
 801ccac:	e7ee      	b.n	801cc8c <__s2b+0x68>
 801ccae:	bf00      	nop
 801ccb0:	080378fb 	.word	0x080378fb
 801ccb4:	0803798a 	.word	0x0803798a

0801ccb8 <__hi0bits>:
 801ccb8:	0c03      	lsrs	r3, r0, #16
 801ccba:	041b      	lsls	r3, r3, #16
 801ccbc:	b9d3      	cbnz	r3, 801ccf4 <__hi0bits+0x3c>
 801ccbe:	0400      	lsls	r0, r0, #16
 801ccc0:	2310      	movs	r3, #16
 801ccc2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801ccc6:	bf04      	itt	eq
 801ccc8:	0200      	lsleq	r0, r0, #8
 801ccca:	3308      	addeq	r3, #8
 801cccc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801ccd0:	bf04      	itt	eq
 801ccd2:	0100      	lsleq	r0, r0, #4
 801ccd4:	3304      	addeq	r3, #4
 801ccd6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801ccda:	bf04      	itt	eq
 801ccdc:	0080      	lsleq	r0, r0, #2
 801ccde:	3302      	addeq	r3, #2
 801cce0:	2800      	cmp	r0, #0
 801cce2:	db05      	blt.n	801ccf0 <__hi0bits+0x38>
 801cce4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801cce8:	f103 0301 	add.w	r3, r3, #1
 801ccec:	bf08      	it	eq
 801ccee:	2320      	moveq	r3, #32
 801ccf0:	4618      	mov	r0, r3
 801ccf2:	4770      	bx	lr
 801ccf4:	2300      	movs	r3, #0
 801ccf6:	e7e4      	b.n	801ccc2 <__hi0bits+0xa>

0801ccf8 <__lo0bits>:
 801ccf8:	6803      	ldr	r3, [r0, #0]
 801ccfa:	f013 0207 	ands.w	r2, r3, #7
 801ccfe:	4601      	mov	r1, r0
 801cd00:	d00b      	beq.n	801cd1a <__lo0bits+0x22>
 801cd02:	07da      	lsls	r2, r3, #31
 801cd04:	d424      	bmi.n	801cd50 <__lo0bits+0x58>
 801cd06:	0798      	lsls	r0, r3, #30
 801cd08:	bf49      	itett	mi
 801cd0a:	085b      	lsrmi	r3, r3, #1
 801cd0c:	089b      	lsrpl	r3, r3, #2
 801cd0e:	2001      	movmi	r0, #1
 801cd10:	600b      	strmi	r3, [r1, #0]
 801cd12:	bf5c      	itt	pl
 801cd14:	600b      	strpl	r3, [r1, #0]
 801cd16:	2002      	movpl	r0, #2
 801cd18:	4770      	bx	lr
 801cd1a:	b298      	uxth	r0, r3
 801cd1c:	b9b0      	cbnz	r0, 801cd4c <__lo0bits+0x54>
 801cd1e:	0c1b      	lsrs	r3, r3, #16
 801cd20:	2010      	movs	r0, #16
 801cd22:	f013 0fff 	tst.w	r3, #255	; 0xff
 801cd26:	bf04      	itt	eq
 801cd28:	0a1b      	lsreq	r3, r3, #8
 801cd2a:	3008      	addeq	r0, #8
 801cd2c:	071a      	lsls	r2, r3, #28
 801cd2e:	bf04      	itt	eq
 801cd30:	091b      	lsreq	r3, r3, #4
 801cd32:	3004      	addeq	r0, #4
 801cd34:	079a      	lsls	r2, r3, #30
 801cd36:	bf04      	itt	eq
 801cd38:	089b      	lsreq	r3, r3, #2
 801cd3a:	3002      	addeq	r0, #2
 801cd3c:	07da      	lsls	r2, r3, #31
 801cd3e:	d403      	bmi.n	801cd48 <__lo0bits+0x50>
 801cd40:	085b      	lsrs	r3, r3, #1
 801cd42:	f100 0001 	add.w	r0, r0, #1
 801cd46:	d005      	beq.n	801cd54 <__lo0bits+0x5c>
 801cd48:	600b      	str	r3, [r1, #0]
 801cd4a:	4770      	bx	lr
 801cd4c:	4610      	mov	r0, r2
 801cd4e:	e7e8      	b.n	801cd22 <__lo0bits+0x2a>
 801cd50:	2000      	movs	r0, #0
 801cd52:	4770      	bx	lr
 801cd54:	2020      	movs	r0, #32
 801cd56:	4770      	bx	lr

0801cd58 <__i2b>:
 801cd58:	b510      	push	{r4, lr}
 801cd5a:	460c      	mov	r4, r1
 801cd5c:	2101      	movs	r1, #1
 801cd5e:	f7ff feb5 	bl	801cacc <_Balloc>
 801cd62:	4602      	mov	r2, r0
 801cd64:	b928      	cbnz	r0, 801cd72 <__i2b+0x1a>
 801cd66:	4b05      	ldr	r3, [pc, #20]	; (801cd7c <__i2b+0x24>)
 801cd68:	4805      	ldr	r0, [pc, #20]	; (801cd80 <__i2b+0x28>)
 801cd6a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801cd6e:	f000 fe83 	bl	801da78 <__assert_func>
 801cd72:	2301      	movs	r3, #1
 801cd74:	6144      	str	r4, [r0, #20]
 801cd76:	6103      	str	r3, [r0, #16]
 801cd78:	bd10      	pop	{r4, pc}
 801cd7a:	bf00      	nop
 801cd7c:	080378fb 	.word	0x080378fb
 801cd80:	0803798a 	.word	0x0803798a

0801cd84 <__multiply>:
 801cd84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cd88:	4614      	mov	r4, r2
 801cd8a:	690a      	ldr	r2, [r1, #16]
 801cd8c:	6923      	ldr	r3, [r4, #16]
 801cd8e:	429a      	cmp	r2, r3
 801cd90:	bfb8      	it	lt
 801cd92:	460b      	movlt	r3, r1
 801cd94:	460d      	mov	r5, r1
 801cd96:	bfbc      	itt	lt
 801cd98:	4625      	movlt	r5, r4
 801cd9a:	461c      	movlt	r4, r3
 801cd9c:	f8d5 a010 	ldr.w	sl, [r5, #16]
 801cda0:	f8d4 9010 	ldr.w	r9, [r4, #16]
 801cda4:	68ab      	ldr	r3, [r5, #8]
 801cda6:	6869      	ldr	r1, [r5, #4]
 801cda8:	eb0a 0709 	add.w	r7, sl, r9
 801cdac:	42bb      	cmp	r3, r7
 801cdae:	b085      	sub	sp, #20
 801cdb0:	bfb8      	it	lt
 801cdb2:	3101      	addlt	r1, #1
 801cdb4:	f7ff fe8a 	bl	801cacc <_Balloc>
 801cdb8:	b930      	cbnz	r0, 801cdc8 <__multiply+0x44>
 801cdba:	4602      	mov	r2, r0
 801cdbc:	4b42      	ldr	r3, [pc, #264]	; (801cec8 <__multiply+0x144>)
 801cdbe:	4843      	ldr	r0, [pc, #268]	; (801cecc <__multiply+0x148>)
 801cdc0:	f240 115d 	movw	r1, #349	; 0x15d
 801cdc4:	f000 fe58 	bl	801da78 <__assert_func>
 801cdc8:	f100 0614 	add.w	r6, r0, #20
 801cdcc:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 801cdd0:	4633      	mov	r3, r6
 801cdd2:	2200      	movs	r2, #0
 801cdd4:	4543      	cmp	r3, r8
 801cdd6:	d31e      	bcc.n	801ce16 <__multiply+0x92>
 801cdd8:	f105 0c14 	add.w	ip, r5, #20
 801cddc:	f104 0314 	add.w	r3, r4, #20
 801cde0:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 801cde4:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 801cde8:	9202      	str	r2, [sp, #8]
 801cdea:	ebac 0205 	sub.w	r2, ip, r5
 801cdee:	3a15      	subs	r2, #21
 801cdf0:	f022 0203 	bic.w	r2, r2, #3
 801cdf4:	3204      	adds	r2, #4
 801cdf6:	f105 0115 	add.w	r1, r5, #21
 801cdfa:	458c      	cmp	ip, r1
 801cdfc:	bf38      	it	cc
 801cdfe:	2204      	movcc	r2, #4
 801ce00:	9201      	str	r2, [sp, #4]
 801ce02:	9a02      	ldr	r2, [sp, #8]
 801ce04:	9303      	str	r3, [sp, #12]
 801ce06:	429a      	cmp	r2, r3
 801ce08:	d808      	bhi.n	801ce1c <__multiply+0x98>
 801ce0a:	2f00      	cmp	r7, #0
 801ce0c:	dc55      	bgt.n	801ceba <__multiply+0x136>
 801ce0e:	6107      	str	r7, [r0, #16]
 801ce10:	b005      	add	sp, #20
 801ce12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ce16:	f843 2b04 	str.w	r2, [r3], #4
 801ce1a:	e7db      	b.n	801cdd4 <__multiply+0x50>
 801ce1c:	f8b3 a000 	ldrh.w	sl, [r3]
 801ce20:	f1ba 0f00 	cmp.w	sl, #0
 801ce24:	d020      	beq.n	801ce68 <__multiply+0xe4>
 801ce26:	f105 0e14 	add.w	lr, r5, #20
 801ce2a:	46b1      	mov	r9, r6
 801ce2c:	2200      	movs	r2, #0
 801ce2e:	f85e 4b04 	ldr.w	r4, [lr], #4
 801ce32:	f8d9 b000 	ldr.w	fp, [r9]
 801ce36:	b2a1      	uxth	r1, r4
 801ce38:	fa1f fb8b 	uxth.w	fp, fp
 801ce3c:	fb0a b101 	mla	r1, sl, r1, fp
 801ce40:	4411      	add	r1, r2
 801ce42:	f8d9 2000 	ldr.w	r2, [r9]
 801ce46:	0c24      	lsrs	r4, r4, #16
 801ce48:	0c12      	lsrs	r2, r2, #16
 801ce4a:	fb0a 2404 	mla	r4, sl, r4, r2
 801ce4e:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 801ce52:	b289      	uxth	r1, r1
 801ce54:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 801ce58:	45f4      	cmp	ip, lr
 801ce5a:	f849 1b04 	str.w	r1, [r9], #4
 801ce5e:	ea4f 4214 	mov.w	r2, r4, lsr #16
 801ce62:	d8e4      	bhi.n	801ce2e <__multiply+0xaa>
 801ce64:	9901      	ldr	r1, [sp, #4]
 801ce66:	5072      	str	r2, [r6, r1]
 801ce68:	9a03      	ldr	r2, [sp, #12]
 801ce6a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801ce6e:	3304      	adds	r3, #4
 801ce70:	f1b9 0f00 	cmp.w	r9, #0
 801ce74:	d01f      	beq.n	801ceb6 <__multiply+0x132>
 801ce76:	6834      	ldr	r4, [r6, #0]
 801ce78:	f105 0114 	add.w	r1, r5, #20
 801ce7c:	46b6      	mov	lr, r6
 801ce7e:	f04f 0a00 	mov.w	sl, #0
 801ce82:	880a      	ldrh	r2, [r1, #0]
 801ce84:	f8be b002 	ldrh.w	fp, [lr, #2]
 801ce88:	fb09 b202 	mla	r2, r9, r2, fp
 801ce8c:	4492      	add	sl, r2
 801ce8e:	b2a4      	uxth	r4, r4
 801ce90:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 801ce94:	f84e 4b04 	str.w	r4, [lr], #4
 801ce98:	f851 4b04 	ldr.w	r4, [r1], #4
 801ce9c:	f8be 2000 	ldrh.w	r2, [lr]
 801cea0:	0c24      	lsrs	r4, r4, #16
 801cea2:	fb09 2404 	mla	r4, r9, r4, r2
 801cea6:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 801ceaa:	458c      	cmp	ip, r1
 801ceac:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 801ceb0:	d8e7      	bhi.n	801ce82 <__multiply+0xfe>
 801ceb2:	9a01      	ldr	r2, [sp, #4]
 801ceb4:	50b4      	str	r4, [r6, r2]
 801ceb6:	3604      	adds	r6, #4
 801ceb8:	e7a3      	b.n	801ce02 <__multiply+0x7e>
 801ceba:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801cebe:	2b00      	cmp	r3, #0
 801cec0:	d1a5      	bne.n	801ce0e <__multiply+0x8a>
 801cec2:	3f01      	subs	r7, #1
 801cec4:	e7a1      	b.n	801ce0a <__multiply+0x86>
 801cec6:	bf00      	nop
 801cec8:	080378fb 	.word	0x080378fb
 801cecc:	0803798a 	.word	0x0803798a

0801ced0 <__pow5mult>:
 801ced0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801ced4:	4615      	mov	r5, r2
 801ced6:	f012 0203 	ands.w	r2, r2, #3
 801ceda:	4606      	mov	r6, r0
 801cedc:	460f      	mov	r7, r1
 801cede:	d007      	beq.n	801cef0 <__pow5mult+0x20>
 801cee0:	4c25      	ldr	r4, [pc, #148]	; (801cf78 <__pow5mult+0xa8>)
 801cee2:	3a01      	subs	r2, #1
 801cee4:	2300      	movs	r3, #0
 801cee6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801ceea:	f7ff fe51 	bl	801cb90 <__multadd>
 801ceee:	4607      	mov	r7, r0
 801cef0:	10ad      	asrs	r5, r5, #2
 801cef2:	d03d      	beq.n	801cf70 <__pow5mult+0xa0>
 801cef4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801cef6:	b97c      	cbnz	r4, 801cf18 <__pow5mult+0x48>
 801cef8:	2010      	movs	r0, #16
 801cefa:	f7fc fd81 	bl	8019a00 <malloc>
 801cefe:	4602      	mov	r2, r0
 801cf00:	6270      	str	r0, [r6, #36]	; 0x24
 801cf02:	b928      	cbnz	r0, 801cf10 <__pow5mult+0x40>
 801cf04:	4b1d      	ldr	r3, [pc, #116]	; (801cf7c <__pow5mult+0xac>)
 801cf06:	481e      	ldr	r0, [pc, #120]	; (801cf80 <__pow5mult+0xb0>)
 801cf08:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 801cf0c:	f000 fdb4 	bl	801da78 <__assert_func>
 801cf10:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801cf14:	6004      	str	r4, [r0, #0]
 801cf16:	60c4      	str	r4, [r0, #12]
 801cf18:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801cf1c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801cf20:	b94c      	cbnz	r4, 801cf36 <__pow5mult+0x66>
 801cf22:	f240 2171 	movw	r1, #625	; 0x271
 801cf26:	4630      	mov	r0, r6
 801cf28:	f7ff ff16 	bl	801cd58 <__i2b>
 801cf2c:	2300      	movs	r3, #0
 801cf2e:	f8c8 0008 	str.w	r0, [r8, #8]
 801cf32:	4604      	mov	r4, r0
 801cf34:	6003      	str	r3, [r0, #0]
 801cf36:	f04f 0900 	mov.w	r9, #0
 801cf3a:	07eb      	lsls	r3, r5, #31
 801cf3c:	d50a      	bpl.n	801cf54 <__pow5mult+0x84>
 801cf3e:	4639      	mov	r1, r7
 801cf40:	4622      	mov	r2, r4
 801cf42:	4630      	mov	r0, r6
 801cf44:	f7ff ff1e 	bl	801cd84 <__multiply>
 801cf48:	4639      	mov	r1, r7
 801cf4a:	4680      	mov	r8, r0
 801cf4c:	4630      	mov	r0, r6
 801cf4e:	f7ff fdfd 	bl	801cb4c <_Bfree>
 801cf52:	4647      	mov	r7, r8
 801cf54:	106d      	asrs	r5, r5, #1
 801cf56:	d00b      	beq.n	801cf70 <__pow5mult+0xa0>
 801cf58:	6820      	ldr	r0, [r4, #0]
 801cf5a:	b938      	cbnz	r0, 801cf6c <__pow5mult+0x9c>
 801cf5c:	4622      	mov	r2, r4
 801cf5e:	4621      	mov	r1, r4
 801cf60:	4630      	mov	r0, r6
 801cf62:	f7ff ff0f 	bl	801cd84 <__multiply>
 801cf66:	6020      	str	r0, [r4, #0]
 801cf68:	f8c0 9000 	str.w	r9, [r0]
 801cf6c:	4604      	mov	r4, r0
 801cf6e:	e7e4      	b.n	801cf3a <__pow5mult+0x6a>
 801cf70:	4638      	mov	r0, r7
 801cf72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801cf76:	bf00      	nop
 801cf78:	08037ae0 	.word	0x08037ae0
 801cf7c:	08037885 	.word	0x08037885
 801cf80:	0803798a 	.word	0x0803798a

0801cf84 <__lshift>:
 801cf84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801cf88:	460c      	mov	r4, r1
 801cf8a:	6849      	ldr	r1, [r1, #4]
 801cf8c:	6923      	ldr	r3, [r4, #16]
 801cf8e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801cf92:	68a3      	ldr	r3, [r4, #8]
 801cf94:	4607      	mov	r7, r0
 801cf96:	4691      	mov	r9, r2
 801cf98:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801cf9c:	f108 0601 	add.w	r6, r8, #1
 801cfa0:	42b3      	cmp	r3, r6
 801cfa2:	db0b      	blt.n	801cfbc <__lshift+0x38>
 801cfa4:	4638      	mov	r0, r7
 801cfa6:	f7ff fd91 	bl	801cacc <_Balloc>
 801cfaa:	4605      	mov	r5, r0
 801cfac:	b948      	cbnz	r0, 801cfc2 <__lshift+0x3e>
 801cfae:	4602      	mov	r2, r0
 801cfb0:	4b28      	ldr	r3, [pc, #160]	; (801d054 <__lshift+0xd0>)
 801cfb2:	4829      	ldr	r0, [pc, #164]	; (801d058 <__lshift+0xd4>)
 801cfb4:	f240 11d9 	movw	r1, #473	; 0x1d9
 801cfb8:	f000 fd5e 	bl	801da78 <__assert_func>
 801cfbc:	3101      	adds	r1, #1
 801cfbe:	005b      	lsls	r3, r3, #1
 801cfc0:	e7ee      	b.n	801cfa0 <__lshift+0x1c>
 801cfc2:	2300      	movs	r3, #0
 801cfc4:	f100 0114 	add.w	r1, r0, #20
 801cfc8:	f100 0210 	add.w	r2, r0, #16
 801cfcc:	4618      	mov	r0, r3
 801cfce:	4553      	cmp	r3, sl
 801cfd0:	db33      	blt.n	801d03a <__lshift+0xb6>
 801cfd2:	6920      	ldr	r0, [r4, #16]
 801cfd4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801cfd8:	f104 0314 	add.w	r3, r4, #20
 801cfdc:	f019 091f 	ands.w	r9, r9, #31
 801cfe0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801cfe4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801cfe8:	d02b      	beq.n	801d042 <__lshift+0xbe>
 801cfea:	f1c9 0e20 	rsb	lr, r9, #32
 801cfee:	468a      	mov	sl, r1
 801cff0:	2200      	movs	r2, #0
 801cff2:	6818      	ldr	r0, [r3, #0]
 801cff4:	fa00 f009 	lsl.w	r0, r0, r9
 801cff8:	4302      	orrs	r2, r0
 801cffa:	f84a 2b04 	str.w	r2, [sl], #4
 801cffe:	f853 2b04 	ldr.w	r2, [r3], #4
 801d002:	459c      	cmp	ip, r3
 801d004:	fa22 f20e 	lsr.w	r2, r2, lr
 801d008:	d8f3      	bhi.n	801cff2 <__lshift+0x6e>
 801d00a:	ebac 0304 	sub.w	r3, ip, r4
 801d00e:	3b15      	subs	r3, #21
 801d010:	f023 0303 	bic.w	r3, r3, #3
 801d014:	3304      	adds	r3, #4
 801d016:	f104 0015 	add.w	r0, r4, #21
 801d01a:	4584      	cmp	ip, r0
 801d01c:	bf38      	it	cc
 801d01e:	2304      	movcc	r3, #4
 801d020:	50ca      	str	r2, [r1, r3]
 801d022:	b10a      	cbz	r2, 801d028 <__lshift+0xa4>
 801d024:	f108 0602 	add.w	r6, r8, #2
 801d028:	3e01      	subs	r6, #1
 801d02a:	4638      	mov	r0, r7
 801d02c:	612e      	str	r6, [r5, #16]
 801d02e:	4621      	mov	r1, r4
 801d030:	f7ff fd8c 	bl	801cb4c <_Bfree>
 801d034:	4628      	mov	r0, r5
 801d036:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d03a:	f842 0f04 	str.w	r0, [r2, #4]!
 801d03e:	3301      	adds	r3, #1
 801d040:	e7c5      	b.n	801cfce <__lshift+0x4a>
 801d042:	3904      	subs	r1, #4
 801d044:	f853 2b04 	ldr.w	r2, [r3], #4
 801d048:	f841 2f04 	str.w	r2, [r1, #4]!
 801d04c:	459c      	cmp	ip, r3
 801d04e:	d8f9      	bhi.n	801d044 <__lshift+0xc0>
 801d050:	e7ea      	b.n	801d028 <__lshift+0xa4>
 801d052:	bf00      	nop
 801d054:	080378fb 	.word	0x080378fb
 801d058:	0803798a 	.word	0x0803798a

0801d05c <__mcmp>:
 801d05c:	b530      	push	{r4, r5, lr}
 801d05e:	6902      	ldr	r2, [r0, #16]
 801d060:	690c      	ldr	r4, [r1, #16]
 801d062:	1b12      	subs	r2, r2, r4
 801d064:	d10e      	bne.n	801d084 <__mcmp+0x28>
 801d066:	f100 0314 	add.w	r3, r0, #20
 801d06a:	3114      	adds	r1, #20
 801d06c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801d070:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801d074:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801d078:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801d07c:	42a5      	cmp	r5, r4
 801d07e:	d003      	beq.n	801d088 <__mcmp+0x2c>
 801d080:	d305      	bcc.n	801d08e <__mcmp+0x32>
 801d082:	2201      	movs	r2, #1
 801d084:	4610      	mov	r0, r2
 801d086:	bd30      	pop	{r4, r5, pc}
 801d088:	4283      	cmp	r3, r0
 801d08a:	d3f3      	bcc.n	801d074 <__mcmp+0x18>
 801d08c:	e7fa      	b.n	801d084 <__mcmp+0x28>
 801d08e:	f04f 32ff 	mov.w	r2, #4294967295
 801d092:	e7f7      	b.n	801d084 <__mcmp+0x28>

0801d094 <__mdiff>:
 801d094:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d098:	460c      	mov	r4, r1
 801d09a:	4606      	mov	r6, r0
 801d09c:	4611      	mov	r1, r2
 801d09e:	4620      	mov	r0, r4
 801d0a0:	4617      	mov	r7, r2
 801d0a2:	f7ff ffdb 	bl	801d05c <__mcmp>
 801d0a6:	1e05      	subs	r5, r0, #0
 801d0a8:	d110      	bne.n	801d0cc <__mdiff+0x38>
 801d0aa:	4629      	mov	r1, r5
 801d0ac:	4630      	mov	r0, r6
 801d0ae:	f7ff fd0d 	bl	801cacc <_Balloc>
 801d0b2:	b930      	cbnz	r0, 801d0c2 <__mdiff+0x2e>
 801d0b4:	4b39      	ldr	r3, [pc, #228]	; (801d19c <__mdiff+0x108>)
 801d0b6:	4602      	mov	r2, r0
 801d0b8:	f240 2132 	movw	r1, #562	; 0x232
 801d0bc:	4838      	ldr	r0, [pc, #224]	; (801d1a0 <__mdiff+0x10c>)
 801d0be:	f000 fcdb 	bl	801da78 <__assert_func>
 801d0c2:	2301      	movs	r3, #1
 801d0c4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801d0c8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d0cc:	bfa4      	itt	ge
 801d0ce:	463b      	movge	r3, r7
 801d0d0:	4627      	movge	r7, r4
 801d0d2:	4630      	mov	r0, r6
 801d0d4:	6879      	ldr	r1, [r7, #4]
 801d0d6:	bfa6      	itte	ge
 801d0d8:	461c      	movge	r4, r3
 801d0da:	2500      	movge	r5, #0
 801d0dc:	2501      	movlt	r5, #1
 801d0de:	f7ff fcf5 	bl	801cacc <_Balloc>
 801d0e2:	b920      	cbnz	r0, 801d0ee <__mdiff+0x5a>
 801d0e4:	4b2d      	ldr	r3, [pc, #180]	; (801d19c <__mdiff+0x108>)
 801d0e6:	4602      	mov	r2, r0
 801d0e8:	f44f 7110 	mov.w	r1, #576	; 0x240
 801d0ec:	e7e6      	b.n	801d0bc <__mdiff+0x28>
 801d0ee:	693e      	ldr	r6, [r7, #16]
 801d0f0:	60c5      	str	r5, [r0, #12]
 801d0f2:	6925      	ldr	r5, [r4, #16]
 801d0f4:	f107 0114 	add.w	r1, r7, #20
 801d0f8:	f104 0914 	add.w	r9, r4, #20
 801d0fc:	f100 0e14 	add.w	lr, r0, #20
 801d100:	f107 0210 	add.w	r2, r7, #16
 801d104:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 801d108:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 801d10c:	46f2      	mov	sl, lr
 801d10e:	2700      	movs	r7, #0
 801d110:	f859 3b04 	ldr.w	r3, [r9], #4
 801d114:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801d118:	fa1f f883 	uxth.w	r8, r3
 801d11c:	fa17 f78b 	uxtah	r7, r7, fp
 801d120:	0c1b      	lsrs	r3, r3, #16
 801d122:	eba7 0808 	sub.w	r8, r7, r8
 801d126:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801d12a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801d12e:	fa1f f888 	uxth.w	r8, r8
 801d132:	141f      	asrs	r7, r3, #16
 801d134:	454d      	cmp	r5, r9
 801d136:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801d13a:	f84a 3b04 	str.w	r3, [sl], #4
 801d13e:	d8e7      	bhi.n	801d110 <__mdiff+0x7c>
 801d140:	1b2b      	subs	r3, r5, r4
 801d142:	3b15      	subs	r3, #21
 801d144:	f023 0303 	bic.w	r3, r3, #3
 801d148:	3304      	adds	r3, #4
 801d14a:	3415      	adds	r4, #21
 801d14c:	42a5      	cmp	r5, r4
 801d14e:	bf38      	it	cc
 801d150:	2304      	movcc	r3, #4
 801d152:	4419      	add	r1, r3
 801d154:	4473      	add	r3, lr
 801d156:	469e      	mov	lr, r3
 801d158:	460d      	mov	r5, r1
 801d15a:	4565      	cmp	r5, ip
 801d15c:	d30e      	bcc.n	801d17c <__mdiff+0xe8>
 801d15e:	f10c 0203 	add.w	r2, ip, #3
 801d162:	1a52      	subs	r2, r2, r1
 801d164:	f022 0203 	bic.w	r2, r2, #3
 801d168:	3903      	subs	r1, #3
 801d16a:	458c      	cmp	ip, r1
 801d16c:	bf38      	it	cc
 801d16e:	2200      	movcc	r2, #0
 801d170:	441a      	add	r2, r3
 801d172:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 801d176:	b17b      	cbz	r3, 801d198 <__mdiff+0x104>
 801d178:	6106      	str	r6, [r0, #16]
 801d17a:	e7a5      	b.n	801d0c8 <__mdiff+0x34>
 801d17c:	f855 8b04 	ldr.w	r8, [r5], #4
 801d180:	fa17 f488 	uxtah	r4, r7, r8
 801d184:	1422      	asrs	r2, r4, #16
 801d186:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 801d18a:	b2a4      	uxth	r4, r4
 801d18c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 801d190:	f84e 4b04 	str.w	r4, [lr], #4
 801d194:	1417      	asrs	r7, r2, #16
 801d196:	e7e0      	b.n	801d15a <__mdiff+0xc6>
 801d198:	3e01      	subs	r6, #1
 801d19a:	e7ea      	b.n	801d172 <__mdiff+0xde>
 801d19c:	080378fb 	.word	0x080378fb
 801d1a0:	0803798a 	.word	0x0803798a

0801d1a4 <__ulp>:
 801d1a4:	b082      	sub	sp, #8
 801d1a6:	ed8d 0b00 	vstr	d0, [sp]
 801d1aa:	9b01      	ldr	r3, [sp, #4]
 801d1ac:	4912      	ldr	r1, [pc, #72]	; (801d1f8 <__ulp+0x54>)
 801d1ae:	4019      	ands	r1, r3
 801d1b0:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 801d1b4:	2900      	cmp	r1, #0
 801d1b6:	dd05      	ble.n	801d1c4 <__ulp+0x20>
 801d1b8:	2200      	movs	r2, #0
 801d1ba:	460b      	mov	r3, r1
 801d1bc:	ec43 2b10 	vmov	d0, r2, r3
 801d1c0:	b002      	add	sp, #8
 801d1c2:	4770      	bx	lr
 801d1c4:	4249      	negs	r1, r1
 801d1c6:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 801d1ca:	ea4f 5021 	mov.w	r0, r1, asr #20
 801d1ce:	f04f 0200 	mov.w	r2, #0
 801d1d2:	f04f 0300 	mov.w	r3, #0
 801d1d6:	da04      	bge.n	801d1e2 <__ulp+0x3e>
 801d1d8:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 801d1dc:	fa41 f300 	asr.w	r3, r1, r0
 801d1e0:	e7ec      	b.n	801d1bc <__ulp+0x18>
 801d1e2:	f1a0 0114 	sub.w	r1, r0, #20
 801d1e6:	291e      	cmp	r1, #30
 801d1e8:	bfda      	itte	le
 801d1ea:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 801d1ee:	fa20 f101 	lsrle.w	r1, r0, r1
 801d1f2:	2101      	movgt	r1, #1
 801d1f4:	460a      	mov	r2, r1
 801d1f6:	e7e1      	b.n	801d1bc <__ulp+0x18>
 801d1f8:	7ff00000 	.word	0x7ff00000

0801d1fc <__b2d>:
 801d1fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d1fe:	6905      	ldr	r5, [r0, #16]
 801d200:	f100 0714 	add.w	r7, r0, #20
 801d204:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 801d208:	1f2e      	subs	r6, r5, #4
 801d20a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 801d20e:	4620      	mov	r0, r4
 801d210:	f7ff fd52 	bl	801ccb8 <__hi0bits>
 801d214:	f1c0 0320 	rsb	r3, r0, #32
 801d218:	280a      	cmp	r0, #10
 801d21a:	f8df c07c 	ldr.w	ip, [pc, #124]	; 801d298 <__b2d+0x9c>
 801d21e:	600b      	str	r3, [r1, #0]
 801d220:	dc14      	bgt.n	801d24c <__b2d+0x50>
 801d222:	f1c0 0e0b 	rsb	lr, r0, #11
 801d226:	fa24 f10e 	lsr.w	r1, r4, lr
 801d22a:	42b7      	cmp	r7, r6
 801d22c:	ea41 030c 	orr.w	r3, r1, ip
 801d230:	bf34      	ite	cc
 801d232:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801d236:	2100      	movcs	r1, #0
 801d238:	3015      	adds	r0, #21
 801d23a:	fa04 f000 	lsl.w	r0, r4, r0
 801d23e:	fa21 f10e 	lsr.w	r1, r1, lr
 801d242:	ea40 0201 	orr.w	r2, r0, r1
 801d246:	ec43 2b10 	vmov	d0, r2, r3
 801d24a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d24c:	42b7      	cmp	r7, r6
 801d24e:	bf3a      	itte	cc
 801d250:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801d254:	f1a5 0608 	subcc.w	r6, r5, #8
 801d258:	2100      	movcs	r1, #0
 801d25a:	380b      	subs	r0, #11
 801d25c:	d017      	beq.n	801d28e <__b2d+0x92>
 801d25e:	f1c0 0c20 	rsb	ip, r0, #32
 801d262:	fa04 f500 	lsl.w	r5, r4, r0
 801d266:	42be      	cmp	r6, r7
 801d268:	fa21 f40c 	lsr.w	r4, r1, ip
 801d26c:	ea45 0504 	orr.w	r5, r5, r4
 801d270:	bf8c      	ite	hi
 801d272:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 801d276:	2400      	movls	r4, #0
 801d278:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 801d27c:	fa01 f000 	lsl.w	r0, r1, r0
 801d280:	fa24 f40c 	lsr.w	r4, r4, ip
 801d284:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801d288:	ea40 0204 	orr.w	r2, r0, r4
 801d28c:	e7db      	b.n	801d246 <__b2d+0x4a>
 801d28e:	ea44 030c 	orr.w	r3, r4, ip
 801d292:	460a      	mov	r2, r1
 801d294:	e7d7      	b.n	801d246 <__b2d+0x4a>
 801d296:	bf00      	nop
 801d298:	3ff00000 	.word	0x3ff00000

0801d29c <__d2b>:
 801d29c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801d2a0:	4689      	mov	r9, r1
 801d2a2:	2101      	movs	r1, #1
 801d2a4:	ec57 6b10 	vmov	r6, r7, d0
 801d2a8:	4690      	mov	r8, r2
 801d2aa:	f7ff fc0f 	bl	801cacc <_Balloc>
 801d2ae:	4604      	mov	r4, r0
 801d2b0:	b930      	cbnz	r0, 801d2c0 <__d2b+0x24>
 801d2b2:	4602      	mov	r2, r0
 801d2b4:	4b25      	ldr	r3, [pc, #148]	; (801d34c <__d2b+0xb0>)
 801d2b6:	4826      	ldr	r0, [pc, #152]	; (801d350 <__d2b+0xb4>)
 801d2b8:	f240 310a 	movw	r1, #778	; 0x30a
 801d2bc:	f000 fbdc 	bl	801da78 <__assert_func>
 801d2c0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 801d2c4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801d2c8:	bb35      	cbnz	r5, 801d318 <__d2b+0x7c>
 801d2ca:	2e00      	cmp	r6, #0
 801d2cc:	9301      	str	r3, [sp, #4]
 801d2ce:	d028      	beq.n	801d322 <__d2b+0x86>
 801d2d0:	4668      	mov	r0, sp
 801d2d2:	9600      	str	r6, [sp, #0]
 801d2d4:	f7ff fd10 	bl	801ccf8 <__lo0bits>
 801d2d8:	9900      	ldr	r1, [sp, #0]
 801d2da:	b300      	cbz	r0, 801d31e <__d2b+0x82>
 801d2dc:	9a01      	ldr	r2, [sp, #4]
 801d2de:	f1c0 0320 	rsb	r3, r0, #32
 801d2e2:	fa02 f303 	lsl.w	r3, r2, r3
 801d2e6:	430b      	orrs	r3, r1
 801d2e8:	40c2      	lsrs	r2, r0
 801d2ea:	6163      	str	r3, [r4, #20]
 801d2ec:	9201      	str	r2, [sp, #4]
 801d2ee:	9b01      	ldr	r3, [sp, #4]
 801d2f0:	61a3      	str	r3, [r4, #24]
 801d2f2:	2b00      	cmp	r3, #0
 801d2f4:	bf14      	ite	ne
 801d2f6:	2202      	movne	r2, #2
 801d2f8:	2201      	moveq	r2, #1
 801d2fa:	6122      	str	r2, [r4, #16]
 801d2fc:	b1d5      	cbz	r5, 801d334 <__d2b+0x98>
 801d2fe:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801d302:	4405      	add	r5, r0
 801d304:	f8c9 5000 	str.w	r5, [r9]
 801d308:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801d30c:	f8c8 0000 	str.w	r0, [r8]
 801d310:	4620      	mov	r0, r4
 801d312:	b003      	add	sp, #12
 801d314:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801d318:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801d31c:	e7d5      	b.n	801d2ca <__d2b+0x2e>
 801d31e:	6161      	str	r1, [r4, #20]
 801d320:	e7e5      	b.n	801d2ee <__d2b+0x52>
 801d322:	a801      	add	r0, sp, #4
 801d324:	f7ff fce8 	bl	801ccf8 <__lo0bits>
 801d328:	9b01      	ldr	r3, [sp, #4]
 801d32a:	6163      	str	r3, [r4, #20]
 801d32c:	2201      	movs	r2, #1
 801d32e:	6122      	str	r2, [r4, #16]
 801d330:	3020      	adds	r0, #32
 801d332:	e7e3      	b.n	801d2fc <__d2b+0x60>
 801d334:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801d338:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801d33c:	f8c9 0000 	str.w	r0, [r9]
 801d340:	6918      	ldr	r0, [r3, #16]
 801d342:	f7ff fcb9 	bl	801ccb8 <__hi0bits>
 801d346:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801d34a:	e7df      	b.n	801d30c <__d2b+0x70>
 801d34c:	080378fb 	.word	0x080378fb
 801d350:	0803798a 	.word	0x0803798a

0801d354 <__ratio>:
 801d354:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d358:	4688      	mov	r8, r1
 801d35a:	4669      	mov	r1, sp
 801d35c:	4681      	mov	r9, r0
 801d35e:	f7ff ff4d 	bl	801d1fc <__b2d>
 801d362:	a901      	add	r1, sp, #4
 801d364:	4640      	mov	r0, r8
 801d366:	ec55 4b10 	vmov	r4, r5, d0
 801d36a:	f7ff ff47 	bl	801d1fc <__b2d>
 801d36e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801d372:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801d376:	eba3 0c02 	sub.w	ip, r3, r2
 801d37a:	e9dd 3200 	ldrd	r3, r2, [sp]
 801d37e:	1a9b      	subs	r3, r3, r2
 801d380:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 801d384:	ec51 0b10 	vmov	r0, r1, d0
 801d388:	2b00      	cmp	r3, #0
 801d38a:	bfd6      	itet	le
 801d38c:	460a      	movle	r2, r1
 801d38e:	462a      	movgt	r2, r5
 801d390:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801d394:	468b      	mov	fp, r1
 801d396:	462f      	mov	r7, r5
 801d398:	bfd4      	ite	le
 801d39a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 801d39e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801d3a2:	4620      	mov	r0, r4
 801d3a4:	ee10 2a10 	vmov	r2, s0
 801d3a8:	465b      	mov	r3, fp
 801d3aa:	4639      	mov	r1, r7
 801d3ac:	f7e7 fade 	bl	800496c <__aeabi_ddiv>
 801d3b0:	ec41 0b10 	vmov	d0, r0, r1
 801d3b4:	b003      	add	sp, #12
 801d3b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801d3ba <__copybits>:
 801d3ba:	3901      	subs	r1, #1
 801d3bc:	b570      	push	{r4, r5, r6, lr}
 801d3be:	1149      	asrs	r1, r1, #5
 801d3c0:	6914      	ldr	r4, [r2, #16]
 801d3c2:	3101      	adds	r1, #1
 801d3c4:	f102 0314 	add.w	r3, r2, #20
 801d3c8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801d3cc:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801d3d0:	1f05      	subs	r5, r0, #4
 801d3d2:	42a3      	cmp	r3, r4
 801d3d4:	d30c      	bcc.n	801d3f0 <__copybits+0x36>
 801d3d6:	1aa3      	subs	r3, r4, r2
 801d3d8:	3b11      	subs	r3, #17
 801d3da:	f023 0303 	bic.w	r3, r3, #3
 801d3de:	3211      	adds	r2, #17
 801d3e0:	42a2      	cmp	r2, r4
 801d3e2:	bf88      	it	hi
 801d3e4:	2300      	movhi	r3, #0
 801d3e6:	4418      	add	r0, r3
 801d3e8:	2300      	movs	r3, #0
 801d3ea:	4288      	cmp	r0, r1
 801d3ec:	d305      	bcc.n	801d3fa <__copybits+0x40>
 801d3ee:	bd70      	pop	{r4, r5, r6, pc}
 801d3f0:	f853 6b04 	ldr.w	r6, [r3], #4
 801d3f4:	f845 6f04 	str.w	r6, [r5, #4]!
 801d3f8:	e7eb      	b.n	801d3d2 <__copybits+0x18>
 801d3fa:	f840 3b04 	str.w	r3, [r0], #4
 801d3fe:	e7f4      	b.n	801d3ea <__copybits+0x30>

0801d400 <__any_on>:
 801d400:	f100 0214 	add.w	r2, r0, #20
 801d404:	6900      	ldr	r0, [r0, #16]
 801d406:	114b      	asrs	r3, r1, #5
 801d408:	4298      	cmp	r0, r3
 801d40a:	b510      	push	{r4, lr}
 801d40c:	db11      	blt.n	801d432 <__any_on+0x32>
 801d40e:	dd0a      	ble.n	801d426 <__any_on+0x26>
 801d410:	f011 011f 	ands.w	r1, r1, #31
 801d414:	d007      	beq.n	801d426 <__any_on+0x26>
 801d416:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801d41a:	fa24 f001 	lsr.w	r0, r4, r1
 801d41e:	fa00 f101 	lsl.w	r1, r0, r1
 801d422:	428c      	cmp	r4, r1
 801d424:	d10b      	bne.n	801d43e <__any_on+0x3e>
 801d426:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801d42a:	4293      	cmp	r3, r2
 801d42c:	d803      	bhi.n	801d436 <__any_on+0x36>
 801d42e:	2000      	movs	r0, #0
 801d430:	bd10      	pop	{r4, pc}
 801d432:	4603      	mov	r3, r0
 801d434:	e7f7      	b.n	801d426 <__any_on+0x26>
 801d436:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801d43a:	2900      	cmp	r1, #0
 801d43c:	d0f5      	beq.n	801d42a <__any_on+0x2a>
 801d43e:	2001      	movs	r0, #1
 801d440:	e7f6      	b.n	801d430 <__any_on+0x30>

0801d442 <_calloc_r>:
 801d442:	b513      	push	{r0, r1, r4, lr}
 801d444:	434a      	muls	r2, r1
 801d446:	4611      	mov	r1, r2
 801d448:	9201      	str	r2, [sp, #4]
 801d44a:	f7fc fb69 	bl	8019b20 <_malloc_r>
 801d44e:	4604      	mov	r4, r0
 801d450:	b118      	cbz	r0, 801d45a <_calloc_r+0x18>
 801d452:	9a01      	ldr	r2, [sp, #4]
 801d454:	2100      	movs	r1, #0
 801d456:	f7fc fb0b 	bl	8019a70 <memset>
 801d45a:	4620      	mov	r0, r4
 801d45c:	b002      	add	sp, #8
 801d45e:	bd10      	pop	{r4, pc}

0801d460 <_realloc_r>:
 801d460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d462:	4607      	mov	r7, r0
 801d464:	4614      	mov	r4, r2
 801d466:	460e      	mov	r6, r1
 801d468:	b921      	cbnz	r1, 801d474 <_realloc_r+0x14>
 801d46a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801d46e:	4611      	mov	r1, r2
 801d470:	f7fc bb56 	b.w	8019b20 <_malloc_r>
 801d474:	b922      	cbnz	r2, 801d480 <_realloc_r+0x20>
 801d476:	f7fc fb03 	bl	8019a80 <_free_r>
 801d47a:	4625      	mov	r5, r4
 801d47c:	4628      	mov	r0, r5
 801d47e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d480:	f000 fb2a 	bl	801dad8 <_malloc_usable_size_r>
 801d484:	42a0      	cmp	r0, r4
 801d486:	d20f      	bcs.n	801d4a8 <_realloc_r+0x48>
 801d488:	4621      	mov	r1, r4
 801d48a:	4638      	mov	r0, r7
 801d48c:	f7fc fb48 	bl	8019b20 <_malloc_r>
 801d490:	4605      	mov	r5, r0
 801d492:	2800      	cmp	r0, #0
 801d494:	d0f2      	beq.n	801d47c <_realloc_r+0x1c>
 801d496:	4631      	mov	r1, r6
 801d498:	4622      	mov	r2, r4
 801d49a:	f7fc fac1 	bl	8019a20 <memcpy>
 801d49e:	4631      	mov	r1, r6
 801d4a0:	4638      	mov	r0, r7
 801d4a2:	f7fc faed 	bl	8019a80 <_free_r>
 801d4a6:	e7e9      	b.n	801d47c <_realloc_r+0x1c>
 801d4a8:	4635      	mov	r5, r6
 801d4aa:	e7e7      	b.n	801d47c <_realloc_r+0x1c>

0801d4ac <__ssputs_r>:
 801d4ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d4b0:	688e      	ldr	r6, [r1, #8]
 801d4b2:	429e      	cmp	r6, r3
 801d4b4:	4682      	mov	sl, r0
 801d4b6:	460c      	mov	r4, r1
 801d4b8:	4690      	mov	r8, r2
 801d4ba:	461f      	mov	r7, r3
 801d4bc:	d838      	bhi.n	801d530 <__ssputs_r+0x84>
 801d4be:	898a      	ldrh	r2, [r1, #12]
 801d4c0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801d4c4:	d032      	beq.n	801d52c <__ssputs_r+0x80>
 801d4c6:	6825      	ldr	r5, [r4, #0]
 801d4c8:	6909      	ldr	r1, [r1, #16]
 801d4ca:	eba5 0901 	sub.w	r9, r5, r1
 801d4ce:	6965      	ldr	r5, [r4, #20]
 801d4d0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801d4d4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801d4d8:	3301      	adds	r3, #1
 801d4da:	444b      	add	r3, r9
 801d4dc:	106d      	asrs	r5, r5, #1
 801d4de:	429d      	cmp	r5, r3
 801d4e0:	bf38      	it	cc
 801d4e2:	461d      	movcc	r5, r3
 801d4e4:	0553      	lsls	r3, r2, #21
 801d4e6:	d531      	bpl.n	801d54c <__ssputs_r+0xa0>
 801d4e8:	4629      	mov	r1, r5
 801d4ea:	f7fc fb19 	bl	8019b20 <_malloc_r>
 801d4ee:	4606      	mov	r6, r0
 801d4f0:	b950      	cbnz	r0, 801d508 <__ssputs_r+0x5c>
 801d4f2:	230c      	movs	r3, #12
 801d4f4:	f8ca 3000 	str.w	r3, [sl]
 801d4f8:	89a3      	ldrh	r3, [r4, #12]
 801d4fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801d4fe:	81a3      	strh	r3, [r4, #12]
 801d500:	f04f 30ff 	mov.w	r0, #4294967295
 801d504:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d508:	6921      	ldr	r1, [r4, #16]
 801d50a:	464a      	mov	r2, r9
 801d50c:	f7fc fa88 	bl	8019a20 <memcpy>
 801d510:	89a3      	ldrh	r3, [r4, #12]
 801d512:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801d516:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801d51a:	81a3      	strh	r3, [r4, #12]
 801d51c:	6126      	str	r6, [r4, #16]
 801d51e:	6165      	str	r5, [r4, #20]
 801d520:	444e      	add	r6, r9
 801d522:	eba5 0509 	sub.w	r5, r5, r9
 801d526:	6026      	str	r6, [r4, #0]
 801d528:	60a5      	str	r5, [r4, #8]
 801d52a:	463e      	mov	r6, r7
 801d52c:	42be      	cmp	r6, r7
 801d52e:	d900      	bls.n	801d532 <__ssputs_r+0x86>
 801d530:	463e      	mov	r6, r7
 801d532:	4632      	mov	r2, r6
 801d534:	6820      	ldr	r0, [r4, #0]
 801d536:	4641      	mov	r1, r8
 801d538:	f7fc fa80 	bl	8019a3c <memmove>
 801d53c:	68a3      	ldr	r3, [r4, #8]
 801d53e:	6822      	ldr	r2, [r4, #0]
 801d540:	1b9b      	subs	r3, r3, r6
 801d542:	4432      	add	r2, r6
 801d544:	60a3      	str	r3, [r4, #8]
 801d546:	6022      	str	r2, [r4, #0]
 801d548:	2000      	movs	r0, #0
 801d54a:	e7db      	b.n	801d504 <__ssputs_r+0x58>
 801d54c:	462a      	mov	r2, r5
 801d54e:	f7ff ff87 	bl	801d460 <_realloc_r>
 801d552:	4606      	mov	r6, r0
 801d554:	2800      	cmp	r0, #0
 801d556:	d1e1      	bne.n	801d51c <__ssputs_r+0x70>
 801d558:	6921      	ldr	r1, [r4, #16]
 801d55a:	4650      	mov	r0, sl
 801d55c:	f7fc fa90 	bl	8019a80 <_free_r>
 801d560:	e7c7      	b.n	801d4f2 <__ssputs_r+0x46>
	...

0801d564 <_svfiprintf_r>:
 801d564:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d568:	4698      	mov	r8, r3
 801d56a:	898b      	ldrh	r3, [r1, #12]
 801d56c:	061b      	lsls	r3, r3, #24
 801d56e:	b09d      	sub	sp, #116	; 0x74
 801d570:	4607      	mov	r7, r0
 801d572:	460d      	mov	r5, r1
 801d574:	4614      	mov	r4, r2
 801d576:	d50e      	bpl.n	801d596 <_svfiprintf_r+0x32>
 801d578:	690b      	ldr	r3, [r1, #16]
 801d57a:	b963      	cbnz	r3, 801d596 <_svfiprintf_r+0x32>
 801d57c:	2140      	movs	r1, #64	; 0x40
 801d57e:	f7fc facf 	bl	8019b20 <_malloc_r>
 801d582:	6028      	str	r0, [r5, #0]
 801d584:	6128      	str	r0, [r5, #16]
 801d586:	b920      	cbnz	r0, 801d592 <_svfiprintf_r+0x2e>
 801d588:	230c      	movs	r3, #12
 801d58a:	603b      	str	r3, [r7, #0]
 801d58c:	f04f 30ff 	mov.w	r0, #4294967295
 801d590:	e0d1      	b.n	801d736 <_svfiprintf_r+0x1d2>
 801d592:	2340      	movs	r3, #64	; 0x40
 801d594:	616b      	str	r3, [r5, #20]
 801d596:	2300      	movs	r3, #0
 801d598:	9309      	str	r3, [sp, #36]	; 0x24
 801d59a:	2320      	movs	r3, #32
 801d59c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801d5a0:	f8cd 800c 	str.w	r8, [sp, #12]
 801d5a4:	2330      	movs	r3, #48	; 0x30
 801d5a6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801d750 <_svfiprintf_r+0x1ec>
 801d5aa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801d5ae:	f04f 0901 	mov.w	r9, #1
 801d5b2:	4623      	mov	r3, r4
 801d5b4:	469a      	mov	sl, r3
 801d5b6:	f813 2b01 	ldrb.w	r2, [r3], #1
 801d5ba:	b10a      	cbz	r2, 801d5c0 <_svfiprintf_r+0x5c>
 801d5bc:	2a25      	cmp	r2, #37	; 0x25
 801d5be:	d1f9      	bne.n	801d5b4 <_svfiprintf_r+0x50>
 801d5c0:	ebba 0b04 	subs.w	fp, sl, r4
 801d5c4:	d00b      	beq.n	801d5de <_svfiprintf_r+0x7a>
 801d5c6:	465b      	mov	r3, fp
 801d5c8:	4622      	mov	r2, r4
 801d5ca:	4629      	mov	r1, r5
 801d5cc:	4638      	mov	r0, r7
 801d5ce:	f7ff ff6d 	bl	801d4ac <__ssputs_r>
 801d5d2:	3001      	adds	r0, #1
 801d5d4:	f000 80aa 	beq.w	801d72c <_svfiprintf_r+0x1c8>
 801d5d8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801d5da:	445a      	add	r2, fp
 801d5dc:	9209      	str	r2, [sp, #36]	; 0x24
 801d5de:	f89a 3000 	ldrb.w	r3, [sl]
 801d5e2:	2b00      	cmp	r3, #0
 801d5e4:	f000 80a2 	beq.w	801d72c <_svfiprintf_r+0x1c8>
 801d5e8:	2300      	movs	r3, #0
 801d5ea:	f04f 32ff 	mov.w	r2, #4294967295
 801d5ee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801d5f2:	f10a 0a01 	add.w	sl, sl, #1
 801d5f6:	9304      	str	r3, [sp, #16]
 801d5f8:	9307      	str	r3, [sp, #28]
 801d5fa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801d5fe:	931a      	str	r3, [sp, #104]	; 0x68
 801d600:	4654      	mov	r4, sl
 801d602:	2205      	movs	r2, #5
 801d604:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d608:	4851      	ldr	r0, [pc, #324]	; (801d750 <_svfiprintf_r+0x1ec>)
 801d60a:	f7e6 fe79 	bl	8004300 <memchr>
 801d60e:	9a04      	ldr	r2, [sp, #16]
 801d610:	b9d8      	cbnz	r0, 801d64a <_svfiprintf_r+0xe6>
 801d612:	06d0      	lsls	r0, r2, #27
 801d614:	bf44      	itt	mi
 801d616:	2320      	movmi	r3, #32
 801d618:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801d61c:	0711      	lsls	r1, r2, #28
 801d61e:	bf44      	itt	mi
 801d620:	232b      	movmi	r3, #43	; 0x2b
 801d622:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801d626:	f89a 3000 	ldrb.w	r3, [sl]
 801d62a:	2b2a      	cmp	r3, #42	; 0x2a
 801d62c:	d015      	beq.n	801d65a <_svfiprintf_r+0xf6>
 801d62e:	9a07      	ldr	r2, [sp, #28]
 801d630:	4654      	mov	r4, sl
 801d632:	2000      	movs	r0, #0
 801d634:	f04f 0c0a 	mov.w	ip, #10
 801d638:	4621      	mov	r1, r4
 801d63a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801d63e:	3b30      	subs	r3, #48	; 0x30
 801d640:	2b09      	cmp	r3, #9
 801d642:	d94e      	bls.n	801d6e2 <_svfiprintf_r+0x17e>
 801d644:	b1b0      	cbz	r0, 801d674 <_svfiprintf_r+0x110>
 801d646:	9207      	str	r2, [sp, #28]
 801d648:	e014      	b.n	801d674 <_svfiprintf_r+0x110>
 801d64a:	eba0 0308 	sub.w	r3, r0, r8
 801d64e:	fa09 f303 	lsl.w	r3, r9, r3
 801d652:	4313      	orrs	r3, r2
 801d654:	9304      	str	r3, [sp, #16]
 801d656:	46a2      	mov	sl, r4
 801d658:	e7d2      	b.n	801d600 <_svfiprintf_r+0x9c>
 801d65a:	9b03      	ldr	r3, [sp, #12]
 801d65c:	1d19      	adds	r1, r3, #4
 801d65e:	681b      	ldr	r3, [r3, #0]
 801d660:	9103      	str	r1, [sp, #12]
 801d662:	2b00      	cmp	r3, #0
 801d664:	bfbb      	ittet	lt
 801d666:	425b      	neglt	r3, r3
 801d668:	f042 0202 	orrlt.w	r2, r2, #2
 801d66c:	9307      	strge	r3, [sp, #28]
 801d66e:	9307      	strlt	r3, [sp, #28]
 801d670:	bfb8      	it	lt
 801d672:	9204      	strlt	r2, [sp, #16]
 801d674:	7823      	ldrb	r3, [r4, #0]
 801d676:	2b2e      	cmp	r3, #46	; 0x2e
 801d678:	d10c      	bne.n	801d694 <_svfiprintf_r+0x130>
 801d67a:	7863      	ldrb	r3, [r4, #1]
 801d67c:	2b2a      	cmp	r3, #42	; 0x2a
 801d67e:	d135      	bne.n	801d6ec <_svfiprintf_r+0x188>
 801d680:	9b03      	ldr	r3, [sp, #12]
 801d682:	1d1a      	adds	r2, r3, #4
 801d684:	681b      	ldr	r3, [r3, #0]
 801d686:	9203      	str	r2, [sp, #12]
 801d688:	2b00      	cmp	r3, #0
 801d68a:	bfb8      	it	lt
 801d68c:	f04f 33ff 	movlt.w	r3, #4294967295
 801d690:	3402      	adds	r4, #2
 801d692:	9305      	str	r3, [sp, #20]
 801d694:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801d760 <_svfiprintf_r+0x1fc>
 801d698:	7821      	ldrb	r1, [r4, #0]
 801d69a:	2203      	movs	r2, #3
 801d69c:	4650      	mov	r0, sl
 801d69e:	f7e6 fe2f 	bl	8004300 <memchr>
 801d6a2:	b140      	cbz	r0, 801d6b6 <_svfiprintf_r+0x152>
 801d6a4:	2340      	movs	r3, #64	; 0x40
 801d6a6:	eba0 000a 	sub.w	r0, r0, sl
 801d6aa:	fa03 f000 	lsl.w	r0, r3, r0
 801d6ae:	9b04      	ldr	r3, [sp, #16]
 801d6b0:	4303      	orrs	r3, r0
 801d6b2:	3401      	adds	r4, #1
 801d6b4:	9304      	str	r3, [sp, #16]
 801d6b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d6ba:	4826      	ldr	r0, [pc, #152]	; (801d754 <_svfiprintf_r+0x1f0>)
 801d6bc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801d6c0:	2206      	movs	r2, #6
 801d6c2:	f7e6 fe1d 	bl	8004300 <memchr>
 801d6c6:	2800      	cmp	r0, #0
 801d6c8:	d038      	beq.n	801d73c <_svfiprintf_r+0x1d8>
 801d6ca:	4b23      	ldr	r3, [pc, #140]	; (801d758 <_svfiprintf_r+0x1f4>)
 801d6cc:	bb1b      	cbnz	r3, 801d716 <_svfiprintf_r+0x1b2>
 801d6ce:	9b03      	ldr	r3, [sp, #12]
 801d6d0:	3307      	adds	r3, #7
 801d6d2:	f023 0307 	bic.w	r3, r3, #7
 801d6d6:	3308      	adds	r3, #8
 801d6d8:	9303      	str	r3, [sp, #12]
 801d6da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d6dc:	4433      	add	r3, r6
 801d6de:	9309      	str	r3, [sp, #36]	; 0x24
 801d6e0:	e767      	b.n	801d5b2 <_svfiprintf_r+0x4e>
 801d6e2:	fb0c 3202 	mla	r2, ip, r2, r3
 801d6e6:	460c      	mov	r4, r1
 801d6e8:	2001      	movs	r0, #1
 801d6ea:	e7a5      	b.n	801d638 <_svfiprintf_r+0xd4>
 801d6ec:	2300      	movs	r3, #0
 801d6ee:	3401      	adds	r4, #1
 801d6f0:	9305      	str	r3, [sp, #20]
 801d6f2:	4619      	mov	r1, r3
 801d6f4:	f04f 0c0a 	mov.w	ip, #10
 801d6f8:	4620      	mov	r0, r4
 801d6fa:	f810 2b01 	ldrb.w	r2, [r0], #1
 801d6fe:	3a30      	subs	r2, #48	; 0x30
 801d700:	2a09      	cmp	r2, #9
 801d702:	d903      	bls.n	801d70c <_svfiprintf_r+0x1a8>
 801d704:	2b00      	cmp	r3, #0
 801d706:	d0c5      	beq.n	801d694 <_svfiprintf_r+0x130>
 801d708:	9105      	str	r1, [sp, #20]
 801d70a:	e7c3      	b.n	801d694 <_svfiprintf_r+0x130>
 801d70c:	fb0c 2101 	mla	r1, ip, r1, r2
 801d710:	4604      	mov	r4, r0
 801d712:	2301      	movs	r3, #1
 801d714:	e7f0      	b.n	801d6f8 <_svfiprintf_r+0x194>
 801d716:	ab03      	add	r3, sp, #12
 801d718:	9300      	str	r3, [sp, #0]
 801d71a:	462a      	mov	r2, r5
 801d71c:	4b0f      	ldr	r3, [pc, #60]	; (801d75c <_svfiprintf_r+0x1f8>)
 801d71e:	a904      	add	r1, sp, #16
 801d720:	4638      	mov	r0, r7
 801d722:	f7fc faf7 	bl	8019d14 <_printf_float>
 801d726:	1c42      	adds	r2, r0, #1
 801d728:	4606      	mov	r6, r0
 801d72a:	d1d6      	bne.n	801d6da <_svfiprintf_r+0x176>
 801d72c:	89ab      	ldrh	r3, [r5, #12]
 801d72e:	065b      	lsls	r3, r3, #25
 801d730:	f53f af2c 	bmi.w	801d58c <_svfiprintf_r+0x28>
 801d734:	9809      	ldr	r0, [sp, #36]	; 0x24
 801d736:	b01d      	add	sp, #116	; 0x74
 801d738:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d73c:	ab03      	add	r3, sp, #12
 801d73e:	9300      	str	r3, [sp, #0]
 801d740:	462a      	mov	r2, r5
 801d742:	4b06      	ldr	r3, [pc, #24]	; (801d75c <_svfiprintf_r+0x1f8>)
 801d744:	a904      	add	r1, sp, #16
 801d746:	4638      	mov	r0, r7
 801d748:	f7fc fd88 	bl	801a25c <_printf_i>
 801d74c:	e7eb      	b.n	801d726 <_svfiprintf_r+0x1c2>
 801d74e:	bf00      	nop
 801d750:	08037aec 	.word	0x08037aec
 801d754:	08037af6 	.word	0x08037af6
 801d758:	08019d15 	.word	0x08019d15
 801d75c:	0801d4ad 	.word	0x0801d4ad
 801d760:	08037af2 	.word	0x08037af2

0801d764 <__sfputc_r>:
 801d764:	6893      	ldr	r3, [r2, #8]
 801d766:	3b01      	subs	r3, #1
 801d768:	2b00      	cmp	r3, #0
 801d76a:	b410      	push	{r4}
 801d76c:	6093      	str	r3, [r2, #8]
 801d76e:	da08      	bge.n	801d782 <__sfputc_r+0x1e>
 801d770:	6994      	ldr	r4, [r2, #24]
 801d772:	42a3      	cmp	r3, r4
 801d774:	db01      	blt.n	801d77a <__sfputc_r+0x16>
 801d776:	290a      	cmp	r1, #10
 801d778:	d103      	bne.n	801d782 <__sfputc_r+0x1e>
 801d77a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d77e:	f7fd be83 	b.w	801b488 <__swbuf_r>
 801d782:	6813      	ldr	r3, [r2, #0]
 801d784:	1c58      	adds	r0, r3, #1
 801d786:	6010      	str	r0, [r2, #0]
 801d788:	7019      	strb	r1, [r3, #0]
 801d78a:	4608      	mov	r0, r1
 801d78c:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d790:	4770      	bx	lr

0801d792 <__sfputs_r>:
 801d792:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d794:	4606      	mov	r6, r0
 801d796:	460f      	mov	r7, r1
 801d798:	4614      	mov	r4, r2
 801d79a:	18d5      	adds	r5, r2, r3
 801d79c:	42ac      	cmp	r4, r5
 801d79e:	d101      	bne.n	801d7a4 <__sfputs_r+0x12>
 801d7a0:	2000      	movs	r0, #0
 801d7a2:	e007      	b.n	801d7b4 <__sfputs_r+0x22>
 801d7a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d7a8:	463a      	mov	r2, r7
 801d7aa:	4630      	mov	r0, r6
 801d7ac:	f7ff ffda 	bl	801d764 <__sfputc_r>
 801d7b0:	1c43      	adds	r3, r0, #1
 801d7b2:	d1f3      	bne.n	801d79c <__sfputs_r+0xa>
 801d7b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801d7b8 <_vfiprintf_r>:
 801d7b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d7bc:	460d      	mov	r5, r1
 801d7be:	b09d      	sub	sp, #116	; 0x74
 801d7c0:	4614      	mov	r4, r2
 801d7c2:	4698      	mov	r8, r3
 801d7c4:	4606      	mov	r6, r0
 801d7c6:	b118      	cbz	r0, 801d7d0 <_vfiprintf_r+0x18>
 801d7c8:	6983      	ldr	r3, [r0, #24]
 801d7ca:	b90b      	cbnz	r3, 801d7d0 <_vfiprintf_r+0x18>
 801d7cc:	f7fb ffee 	bl	80197ac <__sinit>
 801d7d0:	4b89      	ldr	r3, [pc, #548]	; (801d9f8 <_vfiprintf_r+0x240>)
 801d7d2:	429d      	cmp	r5, r3
 801d7d4:	d11b      	bne.n	801d80e <_vfiprintf_r+0x56>
 801d7d6:	6875      	ldr	r5, [r6, #4]
 801d7d8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801d7da:	07d9      	lsls	r1, r3, #31
 801d7dc:	d405      	bmi.n	801d7ea <_vfiprintf_r+0x32>
 801d7de:	89ab      	ldrh	r3, [r5, #12]
 801d7e0:	059a      	lsls	r2, r3, #22
 801d7e2:	d402      	bmi.n	801d7ea <_vfiprintf_r+0x32>
 801d7e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801d7e6:	f7fc f8a4 	bl	8019932 <__retarget_lock_acquire_recursive>
 801d7ea:	89ab      	ldrh	r3, [r5, #12]
 801d7ec:	071b      	lsls	r3, r3, #28
 801d7ee:	d501      	bpl.n	801d7f4 <_vfiprintf_r+0x3c>
 801d7f0:	692b      	ldr	r3, [r5, #16]
 801d7f2:	b9eb      	cbnz	r3, 801d830 <_vfiprintf_r+0x78>
 801d7f4:	4629      	mov	r1, r5
 801d7f6:	4630      	mov	r0, r6
 801d7f8:	f7fd feaa 	bl	801b550 <__swsetup_r>
 801d7fc:	b1c0      	cbz	r0, 801d830 <_vfiprintf_r+0x78>
 801d7fe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801d800:	07dc      	lsls	r4, r3, #31
 801d802:	d50e      	bpl.n	801d822 <_vfiprintf_r+0x6a>
 801d804:	f04f 30ff 	mov.w	r0, #4294967295
 801d808:	b01d      	add	sp, #116	; 0x74
 801d80a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d80e:	4b7b      	ldr	r3, [pc, #492]	; (801d9fc <_vfiprintf_r+0x244>)
 801d810:	429d      	cmp	r5, r3
 801d812:	d101      	bne.n	801d818 <_vfiprintf_r+0x60>
 801d814:	68b5      	ldr	r5, [r6, #8]
 801d816:	e7df      	b.n	801d7d8 <_vfiprintf_r+0x20>
 801d818:	4b79      	ldr	r3, [pc, #484]	; (801da00 <_vfiprintf_r+0x248>)
 801d81a:	429d      	cmp	r5, r3
 801d81c:	bf08      	it	eq
 801d81e:	68f5      	ldreq	r5, [r6, #12]
 801d820:	e7da      	b.n	801d7d8 <_vfiprintf_r+0x20>
 801d822:	89ab      	ldrh	r3, [r5, #12]
 801d824:	0598      	lsls	r0, r3, #22
 801d826:	d4ed      	bmi.n	801d804 <_vfiprintf_r+0x4c>
 801d828:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801d82a:	f7fc f883 	bl	8019934 <__retarget_lock_release_recursive>
 801d82e:	e7e9      	b.n	801d804 <_vfiprintf_r+0x4c>
 801d830:	2300      	movs	r3, #0
 801d832:	9309      	str	r3, [sp, #36]	; 0x24
 801d834:	2320      	movs	r3, #32
 801d836:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801d83a:	f8cd 800c 	str.w	r8, [sp, #12]
 801d83e:	2330      	movs	r3, #48	; 0x30
 801d840:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801da04 <_vfiprintf_r+0x24c>
 801d844:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801d848:	f04f 0901 	mov.w	r9, #1
 801d84c:	4623      	mov	r3, r4
 801d84e:	469a      	mov	sl, r3
 801d850:	f813 2b01 	ldrb.w	r2, [r3], #1
 801d854:	b10a      	cbz	r2, 801d85a <_vfiprintf_r+0xa2>
 801d856:	2a25      	cmp	r2, #37	; 0x25
 801d858:	d1f9      	bne.n	801d84e <_vfiprintf_r+0x96>
 801d85a:	ebba 0b04 	subs.w	fp, sl, r4
 801d85e:	d00b      	beq.n	801d878 <_vfiprintf_r+0xc0>
 801d860:	465b      	mov	r3, fp
 801d862:	4622      	mov	r2, r4
 801d864:	4629      	mov	r1, r5
 801d866:	4630      	mov	r0, r6
 801d868:	f7ff ff93 	bl	801d792 <__sfputs_r>
 801d86c:	3001      	adds	r0, #1
 801d86e:	f000 80aa 	beq.w	801d9c6 <_vfiprintf_r+0x20e>
 801d872:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801d874:	445a      	add	r2, fp
 801d876:	9209      	str	r2, [sp, #36]	; 0x24
 801d878:	f89a 3000 	ldrb.w	r3, [sl]
 801d87c:	2b00      	cmp	r3, #0
 801d87e:	f000 80a2 	beq.w	801d9c6 <_vfiprintf_r+0x20e>
 801d882:	2300      	movs	r3, #0
 801d884:	f04f 32ff 	mov.w	r2, #4294967295
 801d888:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801d88c:	f10a 0a01 	add.w	sl, sl, #1
 801d890:	9304      	str	r3, [sp, #16]
 801d892:	9307      	str	r3, [sp, #28]
 801d894:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801d898:	931a      	str	r3, [sp, #104]	; 0x68
 801d89a:	4654      	mov	r4, sl
 801d89c:	2205      	movs	r2, #5
 801d89e:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d8a2:	4858      	ldr	r0, [pc, #352]	; (801da04 <_vfiprintf_r+0x24c>)
 801d8a4:	f7e6 fd2c 	bl	8004300 <memchr>
 801d8a8:	9a04      	ldr	r2, [sp, #16]
 801d8aa:	b9d8      	cbnz	r0, 801d8e4 <_vfiprintf_r+0x12c>
 801d8ac:	06d1      	lsls	r1, r2, #27
 801d8ae:	bf44      	itt	mi
 801d8b0:	2320      	movmi	r3, #32
 801d8b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801d8b6:	0713      	lsls	r3, r2, #28
 801d8b8:	bf44      	itt	mi
 801d8ba:	232b      	movmi	r3, #43	; 0x2b
 801d8bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801d8c0:	f89a 3000 	ldrb.w	r3, [sl]
 801d8c4:	2b2a      	cmp	r3, #42	; 0x2a
 801d8c6:	d015      	beq.n	801d8f4 <_vfiprintf_r+0x13c>
 801d8c8:	9a07      	ldr	r2, [sp, #28]
 801d8ca:	4654      	mov	r4, sl
 801d8cc:	2000      	movs	r0, #0
 801d8ce:	f04f 0c0a 	mov.w	ip, #10
 801d8d2:	4621      	mov	r1, r4
 801d8d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 801d8d8:	3b30      	subs	r3, #48	; 0x30
 801d8da:	2b09      	cmp	r3, #9
 801d8dc:	d94e      	bls.n	801d97c <_vfiprintf_r+0x1c4>
 801d8de:	b1b0      	cbz	r0, 801d90e <_vfiprintf_r+0x156>
 801d8e0:	9207      	str	r2, [sp, #28]
 801d8e2:	e014      	b.n	801d90e <_vfiprintf_r+0x156>
 801d8e4:	eba0 0308 	sub.w	r3, r0, r8
 801d8e8:	fa09 f303 	lsl.w	r3, r9, r3
 801d8ec:	4313      	orrs	r3, r2
 801d8ee:	9304      	str	r3, [sp, #16]
 801d8f0:	46a2      	mov	sl, r4
 801d8f2:	e7d2      	b.n	801d89a <_vfiprintf_r+0xe2>
 801d8f4:	9b03      	ldr	r3, [sp, #12]
 801d8f6:	1d19      	adds	r1, r3, #4
 801d8f8:	681b      	ldr	r3, [r3, #0]
 801d8fa:	9103      	str	r1, [sp, #12]
 801d8fc:	2b00      	cmp	r3, #0
 801d8fe:	bfbb      	ittet	lt
 801d900:	425b      	neglt	r3, r3
 801d902:	f042 0202 	orrlt.w	r2, r2, #2
 801d906:	9307      	strge	r3, [sp, #28]
 801d908:	9307      	strlt	r3, [sp, #28]
 801d90a:	bfb8      	it	lt
 801d90c:	9204      	strlt	r2, [sp, #16]
 801d90e:	7823      	ldrb	r3, [r4, #0]
 801d910:	2b2e      	cmp	r3, #46	; 0x2e
 801d912:	d10c      	bne.n	801d92e <_vfiprintf_r+0x176>
 801d914:	7863      	ldrb	r3, [r4, #1]
 801d916:	2b2a      	cmp	r3, #42	; 0x2a
 801d918:	d135      	bne.n	801d986 <_vfiprintf_r+0x1ce>
 801d91a:	9b03      	ldr	r3, [sp, #12]
 801d91c:	1d1a      	adds	r2, r3, #4
 801d91e:	681b      	ldr	r3, [r3, #0]
 801d920:	9203      	str	r2, [sp, #12]
 801d922:	2b00      	cmp	r3, #0
 801d924:	bfb8      	it	lt
 801d926:	f04f 33ff 	movlt.w	r3, #4294967295
 801d92a:	3402      	adds	r4, #2
 801d92c:	9305      	str	r3, [sp, #20]
 801d92e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801da14 <_vfiprintf_r+0x25c>
 801d932:	7821      	ldrb	r1, [r4, #0]
 801d934:	2203      	movs	r2, #3
 801d936:	4650      	mov	r0, sl
 801d938:	f7e6 fce2 	bl	8004300 <memchr>
 801d93c:	b140      	cbz	r0, 801d950 <_vfiprintf_r+0x198>
 801d93e:	2340      	movs	r3, #64	; 0x40
 801d940:	eba0 000a 	sub.w	r0, r0, sl
 801d944:	fa03 f000 	lsl.w	r0, r3, r0
 801d948:	9b04      	ldr	r3, [sp, #16]
 801d94a:	4303      	orrs	r3, r0
 801d94c:	3401      	adds	r4, #1
 801d94e:	9304      	str	r3, [sp, #16]
 801d950:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d954:	482c      	ldr	r0, [pc, #176]	; (801da08 <_vfiprintf_r+0x250>)
 801d956:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801d95a:	2206      	movs	r2, #6
 801d95c:	f7e6 fcd0 	bl	8004300 <memchr>
 801d960:	2800      	cmp	r0, #0
 801d962:	d03f      	beq.n	801d9e4 <_vfiprintf_r+0x22c>
 801d964:	4b29      	ldr	r3, [pc, #164]	; (801da0c <_vfiprintf_r+0x254>)
 801d966:	bb1b      	cbnz	r3, 801d9b0 <_vfiprintf_r+0x1f8>
 801d968:	9b03      	ldr	r3, [sp, #12]
 801d96a:	3307      	adds	r3, #7
 801d96c:	f023 0307 	bic.w	r3, r3, #7
 801d970:	3308      	adds	r3, #8
 801d972:	9303      	str	r3, [sp, #12]
 801d974:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d976:	443b      	add	r3, r7
 801d978:	9309      	str	r3, [sp, #36]	; 0x24
 801d97a:	e767      	b.n	801d84c <_vfiprintf_r+0x94>
 801d97c:	fb0c 3202 	mla	r2, ip, r2, r3
 801d980:	460c      	mov	r4, r1
 801d982:	2001      	movs	r0, #1
 801d984:	e7a5      	b.n	801d8d2 <_vfiprintf_r+0x11a>
 801d986:	2300      	movs	r3, #0
 801d988:	3401      	adds	r4, #1
 801d98a:	9305      	str	r3, [sp, #20]
 801d98c:	4619      	mov	r1, r3
 801d98e:	f04f 0c0a 	mov.w	ip, #10
 801d992:	4620      	mov	r0, r4
 801d994:	f810 2b01 	ldrb.w	r2, [r0], #1
 801d998:	3a30      	subs	r2, #48	; 0x30
 801d99a:	2a09      	cmp	r2, #9
 801d99c:	d903      	bls.n	801d9a6 <_vfiprintf_r+0x1ee>
 801d99e:	2b00      	cmp	r3, #0
 801d9a0:	d0c5      	beq.n	801d92e <_vfiprintf_r+0x176>
 801d9a2:	9105      	str	r1, [sp, #20]
 801d9a4:	e7c3      	b.n	801d92e <_vfiprintf_r+0x176>
 801d9a6:	fb0c 2101 	mla	r1, ip, r1, r2
 801d9aa:	4604      	mov	r4, r0
 801d9ac:	2301      	movs	r3, #1
 801d9ae:	e7f0      	b.n	801d992 <_vfiprintf_r+0x1da>
 801d9b0:	ab03      	add	r3, sp, #12
 801d9b2:	9300      	str	r3, [sp, #0]
 801d9b4:	462a      	mov	r2, r5
 801d9b6:	4b16      	ldr	r3, [pc, #88]	; (801da10 <_vfiprintf_r+0x258>)
 801d9b8:	a904      	add	r1, sp, #16
 801d9ba:	4630      	mov	r0, r6
 801d9bc:	f7fc f9aa 	bl	8019d14 <_printf_float>
 801d9c0:	4607      	mov	r7, r0
 801d9c2:	1c78      	adds	r0, r7, #1
 801d9c4:	d1d6      	bne.n	801d974 <_vfiprintf_r+0x1bc>
 801d9c6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801d9c8:	07d9      	lsls	r1, r3, #31
 801d9ca:	d405      	bmi.n	801d9d8 <_vfiprintf_r+0x220>
 801d9cc:	89ab      	ldrh	r3, [r5, #12]
 801d9ce:	059a      	lsls	r2, r3, #22
 801d9d0:	d402      	bmi.n	801d9d8 <_vfiprintf_r+0x220>
 801d9d2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801d9d4:	f7fb ffae 	bl	8019934 <__retarget_lock_release_recursive>
 801d9d8:	89ab      	ldrh	r3, [r5, #12]
 801d9da:	065b      	lsls	r3, r3, #25
 801d9dc:	f53f af12 	bmi.w	801d804 <_vfiprintf_r+0x4c>
 801d9e0:	9809      	ldr	r0, [sp, #36]	; 0x24
 801d9e2:	e711      	b.n	801d808 <_vfiprintf_r+0x50>
 801d9e4:	ab03      	add	r3, sp, #12
 801d9e6:	9300      	str	r3, [sp, #0]
 801d9e8:	462a      	mov	r2, r5
 801d9ea:	4b09      	ldr	r3, [pc, #36]	; (801da10 <_vfiprintf_r+0x258>)
 801d9ec:	a904      	add	r1, sp, #16
 801d9ee:	4630      	mov	r0, r6
 801d9f0:	f7fc fc34 	bl	801a25c <_printf_i>
 801d9f4:	e7e4      	b.n	801d9c0 <_vfiprintf_r+0x208>
 801d9f6:	bf00      	nop
 801d9f8:	080377ac 	.word	0x080377ac
 801d9fc:	080377cc 	.word	0x080377cc
 801da00:	0803778c 	.word	0x0803778c
 801da04:	08037aec 	.word	0x08037aec
 801da08:	08037af6 	.word	0x08037af6
 801da0c:	08019d15 	.word	0x08019d15
 801da10:	0801d793 	.word	0x0801d793
 801da14:	08037af2 	.word	0x08037af2

0801da18 <_read_r>:
 801da18:	b538      	push	{r3, r4, r5, lr}
 801da1a:	4d07      	ldr	r5, [pc, #28]	; (801da38 <_read_r+0x20>)
 801da1c:	4604      	mov	r4, r0
 801da1e:	4608      	mov	r0, r1
 801da20:	4611      	mov	r1, r2
 801da22:	2200      	movs	r2, #0
 801da24:	602a      	str	r2, [r5, #0]
 801da26:	461a      	mov	r2, r3
 801da28:	f7f3 fbdd 	bl	80111e6 <_read>
 801da2c:	1c43      	adds	r3, r0, #1
 801da2e:	d102      	bne.n	801da36 <_read_r+0x1e>
 801da30:	682b      	ldr	r3, [r5, #0]
 801da32:	b103      	cbz	r3, 801da36 <_read_r+0x1e>
 801da34:	6023      	str	r3, [r4, #0]
 801da36:	bd38      	pop	{r3, r4, r5, pc}
 801da38:	2000c028 	.word	0x2000c028
 801da3c:	00000000 	.word	0x00000000

0801da40 <nan>:
 801da40:	ed9f 0b01 	vldr	d0, [pc, #4]	; 801da48 <nan+0x8>
 801da44:	4770      	bx	lr
 801da46:	bf00      	nop
 801da48:	00000000 	.word	0x00000000
 801da4c:	7ff80000 	.word	0x7ff80000

0801da50 <nanf>:
 801da50:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801da58 <nanf+0x8>
 801da54:	4770      	bx	lr
 801da56:	bf00      	nop
 801da58:	7fc00000 	.word	0x7fc00000

0801da5c <__ascii_wctomb>:
 801da5c:	b149      	cbz	r1, 801da72 <__ascii_wctomb+0x16>
 801da5e:	2aff      	cmp	r2, #255	; 0xff
 801da60:	bf85      	ittet	hi
 801da62:	238a      	movhi	r3, #138	; 0x8a
 801da64:	6003      	strhi	r3, [r0, #0]
 801da66:	700a      	strbls	r2, [r1, #0]
 801da68:	f04f 30ff 	movhi.w	r0, #4294967295
 801da6c:	bf98      	it	ls
 801da6e:	2001      	movls	r0, #1
 801da70:	4770      	bx	lr
 801da72:	4608      	mov	r0, r1
 801da74:	4770      	bx	lr
	...

0801da78 <__assert_func>:
 801da78:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801da7a:	4614      	mov	r4, r2
 801da7c:	461a      	mov	r2, r3
 801da7e:	4b09      	ldr	r3, [pc, #36]	; (801daa4 <__assert_func+0x2c>)
 801da80:	681b      	ldr	r3, [r3, #0]
 801da82:	4605      	mov	r5, r0
 801da84:	68d8      	ldr	r0, [r3, #12]
 801da86:	b14c      	cbz	r4, 801da9c <__assert_func+0x24>
 801da88:	4b07      	ldr	r3, [pc, #28]	; (801daa8 <__assert_func+0x30>)
 801da8a:	9100      	str	r1, [sp, #0]
 801da8c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801da90:	4906      	ldr	r1, [pc, #24]	; (801daac <__assert_func+0x34>)
 801da92:	462b      	mov	r3, r5
 801da94:	f000 f80e 	bl	801dab4 <fiprintf>
 801da98:	f000 f826 	bl	801dae8 <abort>
 801da9c:	4b04      	ldr	r3, [pc, #16]	; (801dab0 <__assert_func+0x38>)
 801da9e:	461c      	mov	r4, r3
 801daa0:	e7f3      	b.n	801da8a <__assert_func+0x12>
 801daa2:	bf00      	nop
 801daa4:	20000884 	.word	0x20000884
 801daa8:	08037afd 	.word	0x08037afd
 801daac:	08037b0a 	.word	0x08037b0a
 801dab0:	0802394d 	.word	0x0802394d

0801dab4 <fiprintf>:
 801dab4:	b40e      	push	{r1, r2, r3}
 801dab6:	b503      	push	{r0, r1, lr}
 801dab8:	4601      	mov	r1, r0
 801daba:	ab03      	add	r3, sp, #12
 801dabc:	4805      	ldr	r0, [pc, #20]	; (801dad4 <fiprintf+0x20>)
 801dabe:	f853 2b04 	ldr.w	r2, [r3], #4
 801dac2:	6800      	ldr	r0, [r0, #0]
 801dac4:	9301      	str	r3, [sp, #4]
 801dac6:	f7ff fe77 	bl	801d7b8 <_vfiprintf_r>
 801daca:	b002      	add	sp, #8
 801dacc:	f85d eb04 	ldr.w	lr, [sp], #4
 801dad0:	b003      	add	sp, #12
 801dad2:	4770      	bx	lr
 801dad4:	20000884 	.word	0x20000884

0801dad8 <_malloc_usable_size_r>:
 801dad8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801dadc:	1f18      	subs	r0, r3, #4
 801dade:	2b00      	cmp	r3, #0
 801dae0:	bfbc      	itt	lt
 801dae2:	580b      	ldrlt	r3, [r1, r0]
 801dae4:	18c0      	addlt	r0, r0, r3
 801dae6:	4770      	bx	lr

0801dae8 <abort>:
 801dae8:	b508      	push	{r3, lr}
 801daea:	2006      	movs	r0, #6
 801daec:	f000 f82c 	bl	801db48 <raise>
 801daf0:	2001      	movs	r0, #1
 801daf2:	f7f3 fb59 	bl	80111a8 <_exit>

0801daf6 <_raise_r>:
 801daf6:	291f      	cmp	r1, #31
 801daf8:	b538      	push	{r3, r4, r5, lr}
 801dafa:	4604      	mov	r4, r0
 801dafc:	460d      	mov	r5, r1
 801dafe:	d904      	bls.n	801db0a <_raise_r+0x14>
 801db00:	2316      	movs	r3, #22
 801db02:	6003      	str	r3, [r0, #0]
 801db04:	f04f 30ff 	mov.w	r0, #4294967295
 801db08:	bd38      	pop	{r3, r4, r5, pc}
 801db0a:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801db0c:	b112      	cbz	r2, 801db14 <_raise_r+0x1e>
 801db0e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801db12:	b94b      	cbnz	r3, 801db28 <_raise_r+0x32>
 801db14:	4620      	mov	r0, r4
 801db16:	f000 f831 	bl	801db7c <_getpid_r>
 801db1a:	462a      	mov	r2, r5
 801db1c:	4601      	mov	r1, r0
 801db1e:	4620      	mov	r0, r4
 801db20:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801db24:	f000 b818 	b.w	801db58 <_kill_r>
 801db28:	2b01      	cmp	r3, #1
 801db2a:	d00a      	beq.n	801db42 <_raise_r+0x4c>
 801db2c:	1c59      	adds	r1, r3, #1
 801db2e:	d103      	bne.n	801db38 <_raise_r+0x42>
 801db30:	2316      	movs	r3, #22
 801db32:	6003      	str	r3, [r0, #0]
 801db34:	2001      	movs	r0, #1
 801db36:	e7e7      	b.n	801db08 <_raise_r+0x12>
 801db38:	2400      	movs	r4, #0
 801db3a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801db3e:	4628      	mov	r0, r5
 801db40:	4798      	blx	r3
 801db42:	2000      	movs	r0, #0
 801db44:	e7e0      	b.n	801db08 <_raise_r+0x12>
	...

0801db48 <raise>:
 801db48:	4b02      	ldr	r3, [pc, #8]	; (801db54 <raise+0xc>)
 801db4a:	4601      	mov	r1, r0
 801db4c:	6818      	ldr	r0, [r3, #0]
 801db4e:	f7ff bfd2 	b.w	801daf6 <_raise_r>
 801db52:	bf00      	nop
 801db54:	20000884 	.word	0x20000884

0801db58 <_kill_r>:
 801db58:	b538      	push	{r3, r4, r5, lr}
 801db5a:	4d07      	ldr	r5, [pc, #28]	; (801db78 <_kill_r+0x20>)
 801db5c:	2300      	movs	r3, #0
 801db5e:	4604      	mov	r4, r0
 801db60:	4608      	mov	r0, r1
 801db62:	4611      	mov	r1, r2
 801db64:	602b      	str	r3, [r5, #0]
 801db66:	f7f3 fb17 	bl	8011198 <_kill>
 801db6a:	1c43      	adds	r3, r0, #1
 801db6c:	d102      	bne.n	801db74 <_kill_r+0x1c>
 801db6e:	682b      	ldr	r3, [r5, #0]
 801db70:	b103      	cbz	r3, 801db74 <_kill_r+0x1c>
 801db72:	6023      	str	r3, [r4, #0]
 801db74:	bd38      	pop	{r3, r4, r5, pc}
 801db76:	bf00      	nop
 801db78:	2000c028 	.word	0x2000c028

0801db7c <_getpid_r>:
 801db7c:	f7f3 bb0a 	b.w	8011194 <_getpid>

0801db80 <roundf>:
 801db80:	ee10 0a10 	vmov	r0, s0
 801db84:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 801db88:	f1a3 027f 	sub.w	r2, r3, #127	; 0x7f
 801db8c:	2a16      	cmp	r2, #22
 801db8e:	dc15      	bgt.n	801dbbc <roundf+0x3c>
 801db90:	2a00      	cmp	r2, #0
 801db92:	da08      	bge.n	801dba6 <roundf+0x26>
 801db94:	3201      	adds	r2, #1
 801db96:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 801db9a:	d101      	bne.n	801dba0 <roundf+0x20>
 801db9c:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 801dba0:	ee00 3a10 	vmov	s0, r3
 801dba4:	4770      	bx	lr
 801dba6:	4908      	ldr	r1, [pc, #32]	; (801dbc8 <roundf+0x48>)
 801dba8:	4111      	asrs	r1, r2
 801dbaa:	4208      	tst	r0, r1
 801dbac:	d0fa      	beq.n	801dba4 <roundf+0x24>
 801dbae:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 801dbb2:	4113      	asrs	r3, r2
 801dbb4:	4403      	add	r3, r0
 801dbb6:	ea23 0301 	bic.w	r3, r3, r1
 801dbba:	e7f1      	b.n	801dba0 <roundf+0x20>
 801dbbc:	2a80      	cmp	r2, #128	; 0x80
 801dbbe:	d1f1      	bne.n	801dba4 <roundf+0x24>
 801dbc0:	ee30 0a00 	vadd.f32	s0, s0, s0
 801dbc4:	4770      	bx	lr
 801dbc6:	bf00      	nop
 801dbc8:	007fffff 	.word	0x007fffff
 801dbcc:	00000000 	.word	0x00000000

0801dbd0 <exp>:
 801dbd0:	b538      	push	{r3, r4, r5, lr}
 801dbd2:	ed2d 8b02 	vpush	{d8}
 801dbd6:	ec55 4b10 	vmov	r4, r5, d0
 801dbda:	f000 f9e9 	bl	801dfb0 <__ieee754_exp>
 801dbde:	4b22      	ldr	r3, [pc, #136]	; (801dc68 <exp+0x98>)
 801dbe0:	eeb0 8a40 	vmov.f32	s16, s0
 801dbe4:	eef0 8a60 	vmov.f32	s17, s1
 801dbe8:	f993 3000 	ldrsb.w	r3, [r3]
 801dbec:	3301      	adds	r3, #1
 801dbee:	d012      	beq.n	801dc16 <exp+0x46>
 801dbf0:	ec45 4b10 	vmov	d0, r4, r5
 801dbf4:	f001 fc52 	bl	801f49c <finite>
 801dbf8:	b168      	cbz	r0, 801dc16 <exp+0x46>
 801dbfa:	a313      	add	r3, pc, #76	; (adr r3, 801dc48 <exp+0x78>)
 801dbfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dc00:	4620      	mov	r0, r4
 801dc02:	4629      	mov	r1, r5
 801dc04:	f7e7 f818 	bl	8004c38 <__aeabi_dcmpgt>
 801dc08:	b160      	cbz	r0, 801dc24 <exp+0x54>
 801dc0a:	f7fb fcaf 	bl	801956c <__errno>
 801dc0e:	ed9f 8b10 	vldr	d8, [pc, #64]	; 801dc50 <exp+0x80>
 801dc12:	2322      	movs	r3, #34	; 0x22
 801dc14:	6003      	str	r3, [r0, #0]
 801dc16:	eeb0 0a48 	vmov.f32	s0, s16
 801dc1a:	eef0 0a68 	vmov.f32	s1, s17
 801dc1e:	ecbd 8b02 	vpop	{d8}
 801dc22:	bd38      	pop	{r3, r4, r5, pc}
 801dc24:	a30c      	add	r3, pc, #48	; (adr r3, 801dc58 <exp+0x88>)
 801dc26:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dc2a:	4620      	mov	r0, r4
 801dc2c:	4629      	mov	r1, r5
 801dc2e:	f7e6 ffe5 	bl	8004bfc <__aeabi_dcmplt>
 801dc32:	2800      	cmp	r0, #0
 801dc34:	d0ef      	beq.n	801dc16 <exp+0x46>
 801dc36:	f7fb fc99 	bl	801956c <__errno>
 801dc3a:	2322      	movs	r3, #34	; 0x22
 801dc3c:	ed9f 8b08 	vldr	d8, [pc, #32]	; 801dc60 <exp+0x90>
 801dc40:	6003      	str	r3, [r0, #0]
 801dc42:	e7e8      	b.n	801dc16 <exp+0x46>
 801dc44:	f3af 8000 	nop.w
 801dc48:	fefa39ef 	.word	0xfefa39ef
 801dc4c:	40862e42 	.word	0x40862e42
 801dc50:	00000000 	.word	0x00000000
 801dc54:	7ff00000 	.word	0x7ff00000
 801dc58:	d52d3051 	.word	0xd52d3051
 801dc5c:	c0874910 	.word	0xc0874910
	...
 801dc68:	20000a58 	.word	0x20000a58

0801dc6c <pow>:
 801dc6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801dc70:	ec59 8b10 	vmov	r8, r9, d0
 801dc74:	ec57 6b11 	vmov	r6, r7, d1
 801dc78:	f000 fb16 	bl	801e2a8 <__ieee754_pow>
 801dc7c:	4b4e      	ldr	r3, [pc, #312]	; (801ddb8 <pow+0x14c>)
 801dc7e:	f993 3000 	ldrsb.w	r3, [r3]
 801dc82:	3301      	adds	r3, #1
 801dc84:	ec55 4b10 	vmov	r4, r5, d0
 801dc88:	d015      	beq.n	801dcb6 <pow+0x4a>
 801dc8a:	4632      	mov	r2, r6
 801dc8c:	463b      	mov	r3, r7
 801dc8e:	4630      	mov	r0, r6
 801dc90:	4639      	mov	r1, r7
 801dc92:	f7e6 ffdb 	bl	8004c4c <__aeabi_dcmpun>
 801dc96:	b970      	cbnz	r0, 801dcb6 <pow+0x4a>
 801dc98:	4642      	mov	r2, r8
 801dc9a:	464b      	mov	r3, r9
 801dc9c:	4640      	mov	r0, r8
 801dc9e:	4649      	mov	r1, r9
 801dca0:	f7e6 ffd4 	bl	8004c4c <__aeabi_dcmpun>
 801dca4:	2200      	movs	r2, #0
 801dca6:	2300      	movs	r3, #0
 801dca8:	b148      	cbz	r0, 801dcbe <pow+0x52>
 801dcaa:	4630      	mov	r0, r6
 801dcac:	4639      	mov	r1, r7
 801dcae:	f7e6 ff9b 	bl	8004be8 <__aeabi_dcmpeq>
 801dcb2:	2800      	cmp	r0, #0
 801dcb4:	d17d      	bne.n	801ddb2 <pow+0x146>
 801dcb6:	ec45 4b10 	vmov	d0, r4, r5
 801dcba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801dcbe:	4640      	mov	r0, r8
 801dcc0:	4649      	mov	r1, r9
 801dcc2:	f7e6 ff91 	bl	8004be8 <__aeabi_dcmpeq>
 801dcc6:	b1e0      	cbz	r0, 801dd02 <pow+0x96>
 801dcc8:	2200      	movs	r2, #0
 801dcca:	2300      	movs	r3, #0
 801dccc:	4630      	mov	r0, r6
 801dcce:	4639      	mov	r1, r7
 801dcd0:	f7e6 ff8a 	bl	8004be8 <__aeabi_dcmpeq>
 801dcd4:	2800      	cmp	r0, #0
 801dcd6:	d16c      	bne.n	801ddb2 <pow+0x146>
 801dcd8:	ec47 6b10 	vmov	d0, r6, r7
 801dcdc:	f001 fbde 	bl	801f49c <finite>
 801dce0:	2800      	cmp	r0, #0
 801dce2:	d0e8      	beq.n	801dcb6 <pow+0x4a>
 801dce4:	2200      	movs	r2, #0
 801dce6:	2300      	movs	r3, #0
 801dce8:	4630      	mov	r0, r6
 801dcea:	4639      	mov	r1, r7
 801dcec:	f7e6 ff86 	bl	8004bfc <__aeabi_dcmplt>
 801dcf0:	2800      	cmp	r0, #0
 801dcf2:	d0e0      	beq.n	801dcb6 <pow+0x4a>
 801dcf4:	f7fb fc3a 	bl	801956c <__errno>
 801dcf8:	2321      	movs	r3, #33	; 0x21
 801dcfa:	6003      	str	r3, [r0, #0]
 801dcfc:	2400      	movs	r4, #0
 801dcfe:	4d2f      	ldr	r5, [pc, #188]	; (801ddbc <pow+0x150>)
 801dd00:	e7d9      	b.n	801dcb6 <pow+0x4a>
 801dd02:	ec45 4b10 	vmov	d0, r4, r5
 801dd06:	f001 fbc9 	bl	801f49c <finite>
 801dd0a:	bbb8      	cbnz	r0, 801dd7c <pow+0x110>
 801dd0c:	ec49 8b10 	vmov	d0, r8, r9
 801dd10:	f001 fbc4 	bl	801f49c <finite>
 801dd14:	b390      	cbz	r0, 801dd7c <pow+0x110>
 801dd16:	ec47 6b10 	vmov	d0, r6, r7
 801dd1a:	f001 fbbf 	bl	801f49c <finite>
 801dd1e:	b368      	cbz	r0, 801dd7c <pow+0x110>
 801dd20:	4622      	mov	r2, r4
 801dd22:	462b      	mov	r3, r5
 801dd24:	4620      	mov	r0, r4
 801dd26:	4629      	mov	r1, r5
 801dd28:	f7e6 ff90 	bl	8004c4c <__aeabi_dcmpun>
 801dd2c:	b160      	cbz	r0, 801dd48 <pow+0xdc>
 801dd2e:	f7fb fc1d 	bl	801956c <__errno>
 801dd32:	2321      	movs	r3, #33	; 0x21
 801dd34:	6003      	str	r3, [r0, #0]
 801dd36:	2200      	movs	r2, #0
 801dd38:	2300      	movs	r3, #0
 801dd3a:	4610      	mov	r0, r2
 801dd3c:	4619      	mov	r1, r3
 801dd3e:	f7e6 fe15 	bl	800496c <__aeabi_ddiv>
 801dd42:	4604      	mov	r4, r0
 801dd44:	460d      	mov	r5, r1
 801dd46:	e7b6      	b.n	801dcb6 <pow+0x4a>
 801dd48:	f7fb fc10 	bl	801956c <__errno>
 801dd4c:	2322      	movs	r3, #34	; 0x22
 801dd4e:	6003      	str	r3, [r0, #0]
 801dd50:	2200      	movs	r2, #0
 801dd52:	2300      	movs	r3, #0
 801dd54:	4640      	mov	r0, r8
 801dd56:	4649      	mov	r1, r9
 801dd58:	f7e6 ff50 	bl	8004bfc <__aeabi_dcmplt>
 801dd5c:	2400      	movs	r4, #0
 801dd5e:	b158      	cbz	r0, 801dd78 <pow+0x10c>
 801dd60:	ec47 6b10 	vmov	d0, r6, r7
 801dd64:	f001 fba6 	bl	801f4b4 <rint>
 801dd68:	4632      	mov	r2, r6
 801dd6a:	ec51 0b10 	vmov	r0, r1, d0
 801dd6e:	463b      	mov	r3, r7
 801dd70:	f7e6 ff3a 	bl	8004be8 <__aeabi_dcmpeq>
 801dd74:	2800      	cmp	r0, #0
 801dd76:	d0c2      	beq.n	801dcfe <pow+0x92>
 801dd78:	4d11      	ldr	r5, [pc, #68]	; (801ddc0 <pow+0x154>)
 801dd7a:	e79c      	b.n	801dcb6 <pow+0x4a>
 801dd7c:	2200      	movs	r2, #0
 801dd7e:	2300      	movs	r3, #0
 801dd80:	4620      	mov	r0, r4
 801dd82:	4629      	mov	r1, r5
 801dd84:	f7e6 ff30 	bl	8004be8 <__aeabi_dcmpeq>
 801dd88:	2800      	cmp	r0, #0
 801dd8a:	d094      	beq.n	801dcb6 <pow+0x4a>
 801dd8c:	ec49 8b10 	vmov	d0, r8, r9
 801dd90:	f001 fb84 	bl	801f49c <finite>
 801dd94:	2800      	cmp	r0, #0
 801dd96:	d08e      	beq.n	801dcb6 <pow+0x4a>
 801dd98:	ec47 6b10 	vmov	d0, r6, r7
 801dd9c:	f001 fb7e 	bl	801f49c <finite>
 801dda0:	2800      	cmp	r0, #0
 801dda2:	d088      	beq.n	801dcb6 <pow+0x4a>
 801dda4:	f7fb fbe2 	bl	801956c <__errno>
 801dda8:	2322      	movs	r3, #34	; 0x22
 801ddaa:	6003      	str	r3, [r0, #0]
 801ddac:	2400      	movs	r4, #0
 801ddae:	2500      	movs	r5, #0
 801ddb0:	e781      	b.n	801dcb6 <pow+0x4a>
 801ddb2:	4d04      	ldr	r5, [pc, #16]	; (801ddc4 <pow+0x158>)
 801ddb4:	2400      	movs	r4, #0
 801ddb6:	e77e      	b.n	801dcb6 <pow+0x4a>
 801ddb8:	20000a58 	.word	0x20000a58
 801ddbc:	fff00000 	.word	0xfff00000
 801ddc0:	7ff00000 	.word	0x7ff00000
 801ddc4:	3ff00000 	.word	0x3ff00000

0801ddc8 <log10f>:
 801ddc8:	b508      	push	{r3, lr}
 801ddca:	ed2d 8b02 	vpush	{d8}
 801ddce:	eeb0 8a40 	vmov.f32	s16, s0
 801ddd2:	f001 f83f 	bl	801ee54 <__ieee754_log10f>
 801ddd6:	4b14      	ldr	r3, [pc, #80]	; (801de28 <log10f+0x60>)
 801ddd8:	f993 3000 	ldrsb.w	r3, [r3]
 801dddc:	3301      	adds	r3, #1
 801ddde:	d014      	beq.n	801de0a <log10f+0x42>
 801dde0:	eeb4 8a48 	vcmp.f32	s16, s16
 801dde4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801dde8:	d60f      	bvs.n	801de0a <log10f+0x42>
 801ddea:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 801ddee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ddf2:	d80a      	bhi.n	801de0a <log10f+0x42>
 801ddf4:	eeb5 8a40 	vcmp.f32	s16, #0.0
 801ddf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ddfc:	d108      	bne.n	801de10 <log10f+0x48>
 801ddfe:	f7fb fbb5 	bl	801956c <__errno>
 801de02:	2322      	movs	r3, #34	; 0x22
 801de04:	ed9f 0a09 	vldr	s0, [pc, #36]	; 801de2c <log10f+0x64>
 801de08:	6003      	str	r3, [r0, #0]
 801de0a:	ecbd 8b02 	vpop	{d8}
 801de0e:	bd08      	pop	{r3, pc}
 801de10:	f7fb fbac 	bl	801956c <__errno>
 801de14:	ecbd 8b02 	vpop	{d8}
 801de18:	2321      	movs	r3, #33	; 0x21
 801de1a:	6003      	str	r3, [r0, #0]
 801de1c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801de20:	4803      	ldr	r0, [pc, #12]	; (801de30 <log10f+0x68>)
 801de22:	f7ff be15 	b.w	801da50 <nanf>
 801de26:	bf00      	nop
 801de28:	20000a58 	.word	0x20000a58
 801de2c:	ff800000 	.word	0xff800000
 801de30:	0802394d 	.word	0x0802394d

0801de34 <powf>:
 801de34:	b508      	push	{r3, lr}
 801de36:	ed2d 8b04 	vpush	{d8-d9}
 801de3a:	eeb0 9a40 	vmov.f32	s18, s0
 801de3e:	eef0 8a60 	vmov.f32	s17, s1
 801de42:	f001 f85f 	bl	801ef04 <__ieee754_powf>
 801de46:	4b43      	ldr	r3, [pc, #268]	; (801df54 <powf+0x120>)
 801de48:	f993 3000 	ldrsb.w	r3, [r3]
 801de4c:	3301      	adds	r3, #1
 801de4e:	eeb0 8a40 	vmov.f32	s16, s0
 801de52:	d012      	beq.n	801de7a <powf+0x46>
 801de54:	eef4 8a68 	vcmp.f32	s17, s17
 801de58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801de5c:	d60d      	bvs.n	801de7a <powf+0x46>
 801de5e:	eeb4 9a49 	vcmp.f32	s18, s18
 801de62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801de66:	d70d      	bvc.n	801de84 <powf+0x50>
 801de68:	eef5 8a40 	vcmp.f32	s17, #0.0
 801de6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801de70:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801de74:	bf08      	it	eq
 801de76:	eeb0 8a67 	vmoveq.f32	s16, s15
 801de7a:	eeb0 0a48 	vmov.f32	s0, s16
 801de7e:	ecbd 8b04 	vpop	{d8-d9}
 801de82:	bd08      	pop	{r3, pc}
 801de84:	eddf 9a34 	vldr	s19, [pc, #208]	; 801df58 <powf+0x124>
 801de88:	eeb4 9a69 	vcmp.f32	s18, s19
 801de8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801de90:	d116      	bne.n	801dec0 <powf+0x8c>
 801de92:	eef4 8a69 	vcmp.f32	s17, s19
 801de96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801de9a:	d057      	beq.n	801df4c <powf+0x118>
 801de9c:	eeb0 0a68 	vmov.f32	s0, s17
 801dea0:	f001 fc1f 	bl	801f6e2 <finitef>
 801dea4:	2800      	cmp	r0, #0
 801dea6:	d0e8      	beq.n	801de7a <powf+0x46>
 801dea8:	eef4 8ae9 	vcmpe.f32	s17, s19
 801deac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801deb0:	d5e3      	bpl.n	801de7a <powf+0x46>
 801deb2:	f7fb fb5b 	bl	801956c <__errno>
 801deb6:	2321      	movs	r3, #33	; 0x21
 801deb8:	6003      	str	r3, [r0, #0]
 801deba:	ed9f 8a28 	vldr	s16, [pc, #160]	; 801df5c <powf+0x128>
 801debe:	e7dc      	b.n	801de7a <powf+0x46>
 801dec0:	f001 fc0f 	bl	801f6e2 <finitef>
 801dec4:	bb50      	cbnz	r0, 801df1c <powf+0xe8>
 801dec6:	eeb0 0a49 	vmov.f32	s0, s18
 801deca:	f001 fc0a 	bl	801f6e2 <finitef>
 801dece:	b328      	cbz	r0, 801df1c <powf+0xe8>
 801ded0:	eeb0 0a68 	vmov.f32	s0, s17
 801ded4:	f001 fc05 	bl	801f6e2 <finitef>
 801ded8:	b300      	cbz	r0, 801df1c <powf+0xe8>
 801deda:	eeb4 8a48 	vcmp.f32	s16, s16
 801dede:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801dee2:	d706      	bvc.n	801def2 <powf+0xbe>
 801dee4:	f7fb fb42 	bl	801956c <__errno>
 801dee8:	2321      	movs	r3, #33	; 0x21
 801deea:	ee89 8aa9 	vdiv.f32	s16, s19, s19
 801deee:	6003      	str	r3, [r0, #0]
 801def0:	e7c3      	b.n	801de7a <powf+0x46>
 801def2:	f7fb fb3b 	bl	801956c <__errno>
 801def6:	eeb5 9ac0 	vcmpe.f32	s18, #0.0
 801defa:	2322      	movs	r3, #34	; 0x22
 801defc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801df00:	6003      	str	r3, [r0, #0]
 801df02:	d508      	bpl.n	801df16 <powf+0xe2>
 801df04:	eeb0 0a68 	vmov.f32	s0, s17
 801df08:	f001 fbf8 	bl	801f6fc <rintf>
 801df0c:	eeb4 0a68 	vcmp.f32	s0, s17
 801df10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801df14:	d1d1      	bne.n	801deba <powf+0x86>
 801df16:	ed9f 8a12 	vldr	s16, [pc, #72]	; 801df60 <powf+0x12c>
 801df1a:	e7ae      	b.n	801de7a <powf+0x46>
 801df1c:	eeb5 8a40 	vcmp.f32	s16, #0.0
 801df20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801df24:	d1a9      	bne.n	801de7a <powf+0x46>
 801df26:	eeb0 0a49 	vmov.f32	s0, s18
 801df2a:	f001 fbda 	bl	801f6e2 <finitef>
 801df2e:	2800      	cmp	r0, #0
 801df30:	d0a3      	beq.n	801de7a <powf+0x46>
 801df32:	eeb0 0a68 	vmov.f32	s0, s17
 801df36:	f001 fbd4 	bl	801f6e2 <finitef>
 801df3a:	2800      	cmp	r0, #0
 801df3c:	d09d      	beq.n	801de7a <powf+0x46>
 801df3e:	f7fb fb15 	bl	801956c <__errno>
 801df42:	2322      	movs	r3, #34	; 0x22
 801df44:	ed9f 8a04 	vldr	s16, [pc, #16]	; 801df58 <powf+0x124>
 801df48:	6003      	str	r3, [r0, #0]
 801df4a:	e796      	b.n	801de7a <powf+0x46>
 801df4c:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 801df50:	e793      	b.n	801de7a <powf+0x46>
 801df52:	bf00      	nop
 801df54:	20000a58 	.word	0x20000a58
 801df58:	00000000 	.word	0x00000000
 801df5c:	ff800000 	.word	0xff800000
 801df60:	7f800000 	.word	0x7f800000

0801df64 <sqrtf>:
 801df64:	b508      	push	{r3, lr}
 801df66:	ed2d 8b02 	vpush	{d8}
 801df6a:	eeb0 8a40 	vmov.f32	s16, s0
 801df6e:	f001 fa89 	bl	801f484 <__ieee754_sqrtf>
 801df72:	4b0d      	ldr	r3, [pc, #52]	; (801dfa8 <sqrtf+0x44>)
 801df74:	f993 3000 	ldrsb.w	r3, [r3]
 801df78:	3301      	adds	r3, #1
 801df7a:	d011      	beq.n	801dfa0 <sqrtf+0x3c>
 801df7c:	eeb4 8a48 	vcmp.f32	s16, s16
 801df80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801df84:	d60c      	bvs.n	801dfa0 <sqrtf+0x3c>
 801df86:	eddf 8a09 	vldr	s17, [pc, #36]	; 801dfac <sqrtf+0x48>
 801df8a:	eeb4 8ae8 	vcmpe.f32	s16, s17
 801df8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801df92:	d505      	bpl.n	801dfa0 <sqrtf+0x3c>
 801df94:	f7fb faea 	bl	801956c <__errno>
 801df98:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 801df9c:	2321      	movs	r3, #33	; 0x21
 801df9e:	6003      	str	r3, [r0, #0]
 801dfa0:	ecbd 8b02 	vpop	{d8}
 801dfa4:	bd08      	pop	{r3, pc}
 801dfa6:	bf00      	nop
 801dfa8:	20000a58 	.word	0x20000a58
 801dfac:	00000000 	.word	0x00000000

0801dfb0 <__ieee754_exp>:
 801dfb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801dfb4:	ec55 4b10 	vmov	r4, r5, d0
 801dfb8:	49b1      	ldr	r1, [pc, #708]	; (801e280 <__ieee754_exp+0x2d0>)
 801dfba:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801dfbe:	428b      	cmp	r3, r1
 801dfc0:	ed2d 8b04 	vpush	{d8-d9}
 801dfc4:	ea4f 76d5 	mov.w	r6, r5, lsr #31
 801dfc8:	d937      	bls.n	801e03a <__ieee754_exp+0x8a>
 801dfca:	49ae      	ldr	r1, [pc, #696]	; (801e284 <__ieee754_exp+0x2d4>)
 801dfcc:	428b      	cmp	r3, r1
 801dfce:	d916      	bls.n	801dffe <__ieee754_exp+0x4e>
 801dfd0:	ee10 3a10 	vmov	r3, s0
 801dfd4:	f3c5 0213 	ubfx	r2, r5, #0, #20
 801dfd8:	4313      	orrs	r3, r2
 801dfda:	d009      	beq.n	801dff0 <__ieee754_exp+0x40>
 801dfdc:	ee10 2a10 	vmov	r2, s0
 801dfe0:	462b      	mov	r3, r5
 801dfe2:	4620      	mov	r0, r4
 801dfe4:	4629      	mov	r1, r5
 801dfe6:	f7e6 f9e1 	bl	80043ac <__adddf3>
 801dfea:	4604      	mov	r4, r0
 801dfec:	460d      	mov	r5, r1
 801dfee:	e000      	b.n	801dff2 <__ieee754_exp+0x42>
 801dff0:	bb06      	cbnz	r6, 801e034 <__ieee754_exp+0x84>
 801dff2:	ecbd 8b04 	vpop	{d8-d9}
 801dff6:	ec45 4b10 	vmov	d0, r4, r5
 801dffa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801dffe:	a38a      	add	r3, pc, #552	; (adr r3, 801e228 <__ieee754_exp+0x278>)
 801e000:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e004:	ee10 0a10 	vmov	r0, s0
 801e008:	4629      	mov	r1, r5
 801e00a:	f7e6 fe15 	bl	8004c38 <__aeabi_dcmpgt>
 801e00e:	b138      	cbz	r0, 801e020 <__ieee754_exp+0x70>
 801e010:	a387      	add	r3, pc, #540	; (adr r3, 801e230 <__ieee754_exp+0x280>)
 801e012:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e016:	4610      	mov	r0, r2
 801e018:	4619      	mov	r1, r3
 801e01a:	f7e6 fb7d 	bl	8004718 <__aeabi_dmul>
 801e01e:	e7e4      	b.n	801dfea <__ieee754_exp+0x3a>
 801e020:	a385      	add	r3, pc, #532	; (adr r3, 801e238 <__ieee754_exp+0x288>)
 801e022:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e026:	4620      	mov	r0, r4
 801e028:	4629      	mov	r1, r5
 801e02a:	f7e6 fde7 	bl	8004bfc <__aeabi_dcmplt>
 801e02e:	2800      	cmp	r0, #0
 801e030:	f000 8087 	beq.w	801e142 <__ieee754_exp+0x192>
 801e034:	2400      	movs	r4, #0
 801e036:	2500      	movs	r5, #0
 801e038:	e7db      	b.n	801dff2 <__ieee754_exp+0x42>
 801e03a:	4a93      	ldr	r2, [pc, #588]	; (801e288 <__ieee754_exp+0x2d8>)
 801e03c:	4293      	cmp	r3, r2
 801e03e:	f240 80ac 	bls.w	801e19a <__ieee754_exp+0x1ea>
 801e042:	4a92      	ldr	r2, [pc, #584]	; (801e28c <__ieee754_exp+0x2dc>)
 801e044:	4293      	cmp	r3, r2
 801e046:	d87c      	bhi.n	801e142 <__ieee754_exp+0x192>
 801e048:	4b91      	ldr	r3, [pc, #580]	; (801e290 <__ieee754_exp+0x2e0>)
 801e04a:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 801e04e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e052:	ee10 0a10 	vmov	r0, s0
 801e056:	4629      	mov	r1, r5
 801e058:	f7e6 f9a6 	bl	80043a8 <__aeabi_dsub>
 801e05c:	4b8d      	ldr	r3, [pc, #564]	; (801e294 <__ieee754_exp+0x2e4>)
 801e05e:	00f7      	lsls	r7, r6, #3
 801e060:	443b      	add	r3, r7
 801e062:	ed93 7b00 	vldr	d7, [r3]
 801e066:	f1c6 0a01 	rsb	sl, r6, #1
 801e06a:	4680      	mov	r8, r0
 801e06c:	4689      	mov	r9, r1
 801e06e:	ebaa 0a06 	sub.w	sl, sl, r6
 801e072:	eeb0 8a47 	vmov.f32	s16, s14
 801e076:	eef0 8a67 	vmov.f32	s17, s15
 801e07a:	ec53 2b18 	vmov	r2, r3, d8
 801e07e:	4640      	mov	r0, r8
 801e080:	4649      	mov	r1, r9
 801e082:	f7e6 f991 	bl	80043a8 <__aeabi_dsub>
 801e086:	4604      	mov	r4, r0
 801e088:	460d      	mov	r5, r1
 801e08a:	4622      	mov	r2, r4
 801e08c:	462b      	mov	r3, r5
 801e08e:	4620      	mov	r0, r4
 801e090:	4629      	mov	r1, r5
 801e092:	f7e6 fb41 	bl	8004718 <__aeabi_dmul>
 801e096:	a36a      	add	r3, pc, #424	; (adr r3, 801e240 <__ieee754_exp+0x290>)
 801e098:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e09c:	4606      	mov	r6, r0
 801e09e:	460f      	mov	r7, r1
 801e0a0:	f7e6 fb3a 	bl	8004718 <__aeabi_dmul>
 801e0a4:	a368      	add	r3, pc, #416	; (adr r3, 801e248 <__ieee754_exp+0x298>)
 801e0a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e0aa:	f7e6 f97d 	bl	80043a8 <__aeabi_dsub>
 801e0ae:	4632      	mov	r2, r6
 801e0b0:	463b      	mov	r3, r7
 801e0b2:	f7e6 fb31 	bl	8004718 <__aeabi_dmul>
 801e0b6:	a366      	add	r3, pc, #408	; (adr r3, 801e250 <__ieee754_exp+0x2a0>)
 801e0b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e0bc:	f7e6 f976 	bl	80043ac <__adddf3>
 801e0c0:	4632      	mov	r2, r6
 801e0c2:	463b      	mov	r3, r7
 801e0c4:	f7e6 fb28 	bl	8004718 <__aeabi_dmul>
 801e0c8:	a363      	add	r3, pc, #396	; (adr r3, 801e258 <__ieee754_exp+0x2a8>)
 801e0ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e0ce:	f7e6 f96b 	bl	80043a8 <__aeabi_dsub>
 801e0d2:	4632      	mov	r2, r6
 801e0d4:	463b      	mov	r3, r7
 801e0d6:	f7e6 fb1f 	bl	8004718 <__aeabi_dmul>
 801e0da:	a361      	add	r3, pc, #388	; (adr r3, 801e260 <__ieee754_exp+0x2b0>)
 801e0dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e0e0:	f7e6 f964 	bl	80043ac <__adddf3>
 801e0e4:	4632      	mov	r2, r6
 801e0e6:	463b      	mov	r3, r7
 801e0e8:	f7e6 fb16 	bl	8004718 <__aeabi_dmul>
 801e0ec:	4602      	mov	r2, r0
 801e0ee:	460b      	mov	r3, r1
 801e0f0:	4620      	mov	r0, r4
 801e0f2:	4629      	mov	r1, r5
 801e0f4:	f7e6 f958 	bl	80043a8 <__aeabi_dsub>
 801e0f8:	4602      	mov	r2, r0
 801e0fa:	460b      	mov	r3, r1
 801e0fc:	4606      	mov	r6, r0
 801e0fe:	460f      	mov	r7, r1
 801e100:	4620      	mov	r0, r4
 801e102:	4629      	mov	r1, r5
 801e104:	f7e6 fb08 	bl	8004718 <__aeabi_dmul>
 801e108:	ec41 0b19 	vmov	d9, r0, r1
 801e10c:	f1ba 0f00 	cmp.w	sl, #0
 801e110:	d15d      	bne.n	801e1ce <__ieee754_exp+0x21e>
 801e112:	2200      	movs	r2, #0
 801e114:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801e118:	4630      	mov	r0, r6
 801e11a:	4639      	mov	r1, r7
 801e11c:	f7e6 f944 	bl	80043a8 <__aeabi_dsub>
 801e120:	4602      	mov	r2, r0
 801e122:	460b      	mov	r3, r1
 801e124:	ec51 0b19 	vmov	r0, r1, d9
 801e128:	f7e6 fc20 	bl	800496c <__aeabi_ddiv>
 801e12c:	4622      	mov	r2, r4
 801e12e:	462b      	mov	r3, r5
 801e130:	f7e6 f93a 	bl	80043a8 <__aeabi_dsub>
 801e134:	4602      	mov	r2, r0
 801e136:	460b      	mov	r3, r1
 801e138:	2000      	movs	r0, #0
 801e13a:	4957      	ldr	r1, [pc, #348]	; (801e298 <__ieee754_exp+0x2e8>)
 801e13c:	f7e6 f934 	bl	80043a8 <__aeabi_dsub>
 801e140:	e753      	b.n	801dfea <__ieee754_exp+0x3a>
 801e142:	4856      	ldr	r0, [pc, #344]	; (801e29c <__ieee754_exp+0x2ec>)
 801e144:	a348      	add	r3, pc, #288	; (adr r3, 801e268 <__ieee754_exp+0x2b8>)
 801e146:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e14a:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
 801e14e:	4629      	mov	r1, r5
 801e150:	4620      	mov	r0, r4
 801e152:	f7e6 fae1 	bl	8004718 <__aeabi_dmul>
 801e156:	e9d6 2300 	ldrd	r2, r3, [r6]
 801e15a:	f7e6 f927 	bl	80043ac <__adddf3>
 801e15e:	f7e6 fd8b 	bl	8004c78 <__aeabi_d2iz>
 801e162:	4682      	mov	sl, r0
 801e164:	f7e6 fa6e 	bl	8004644 <__aeabi_i2d>
 801e168:	a341      	add	r3, pc, #260	; (adr r3, 801e270 <__ieee754_exp+0x2c0>)
 801e16a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e16e:	4606      	mov	r6, r0
 801e170:	460f      	mov	r7, r1
 801e172:	f7e6 fad1 	bl	8004718 <__aeabi_dmul>
 801e176:	4602      	mov	r2, r0
 801e178:	460b      	mov	r3, r1
 801e17a:	4620      	mov	r0, r4
 801e17c:	4629      	mov	r1, r5
 801e17e:	f7e6 f913 	bl	80043a8 <__aeabi_dsub>
 801e182:	a33d      	add	r3, pc, #244	; (adr r3, 801e278 <__ieee754_exp+0x2c8>)
 801e184:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e188:	4680      	mov	r8, r0
 801e18a:	4689      	mov	r9, r1
 801e18c:	4630      	mov	r0, r6
 801e18e:	4639      	mov	r1, r7
 801e190:	f7e6 fac2 	bl	8004718 <__aeabi_dmul>
 801e194:	ec41 0b18 	vmov	d8, r0, r1
 801e198:	e76f      	b.n	801e07a <__ieee754_exp+0xca>
 801e19a:	4a41      	ldr	r2, [pc, #260]	; (801e2a0 <__ieee754_exp+0x2f0>)
 801e19c:	4293      	cmp	r3, r2
 801e19e:	d811      	bhi.n	801e1c4 <__ieee754_exp+0x214>
 801e1a0:	a323      	add	r3, pc, #140	; (adr r3, 801e230 <__ieee754_exp+0x280>)
 801e1a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e1a6:	ee10 0a10 	vmov	r0, s0
 801e1aa:	4629      	mov	r1, r5
 801e1ac:	f7e6 f8fe 	bl	80043ac <__adddf3>
 801e1b0:	4b39      	ldr	r3, [pc, #228]	; (801e298 <__ieee754_exp+0x2e8>)
 801e1b2:	2200      	movs	r2, #0
 801e1b4:	f7e6 fd40 	bl	8004c38 <__aeabi_dcmpgt>
 801e1b8:	b138      	cbz	r0, 801e1ca <__ieee754_exp+0x21a>
 801e1ba:	4b37      	ldr	r3, [pc, #220]	; (801e298 <__ieee754_exp+0x2e8>)
 801e1bc:	2200      	movs	r2, #0
 801e1be:	4620      	mov	r0, r4
 801e1c0:	4629      	mov	r1, r5
 801e1c2:	e710      	b.n	801dfe6 <__ieee754_exp+0x36>
 801e1c4:	f04f 0a00 	mov.w	sl, #0
 801e1c8:	e75f      	b.n	801e08a <__ieee754_exp+0xda>
 801e1ca:	4682      	mov	sl, r0
 801e1cc:	e75d      	b.n	801e08a <__ieee754_exp+0xda>
 801e1ce:	4632      	mov	r2, r6
 801e1d0:	463b      	mov	r3, r7
 801e1d2:	2000      	movs	r0, #0
 801e1d4:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 801e1d8:	f7e6 f8e6 	bl	80043a8 <__aeabi_dsub>
 801e1dc:	4602      	mov	r2, r0
 801e1de:	460b      	mov	r3, r1
 801e1e0:	ec51 0b19 	vmov	r0, r1, d9
 801e1e4:	f7e6 fbc2 	bl	800496c <__aeabi_ddiv>
 801e1e8:	4602      	mov	r2, r0
 801e1ea:	460b      	mov	r3, r1
 801e1ec:	ec51 0b18 	vmov	r0, r1, d8
 801e1f0:	f7e6 f8da 	bl	80043a8 <__aeabi_dsub>
 801e1f4:	4642      	mov	r2, r8
 801e1f6:	464b      	mov	r3, r9
 801e1f8:	f7e6 f8d6 	bl	80043a8 <__aeabi_dsub>
 801e1fc:	4602      	mov	r2, r0
 801e1fe:	460b      	mov	r3, r1
 801e200:	2000      	movs	r0, #0
 801e202:	4925      	ldr	r1, [pc, #148]	; (801e298 <__ieee754_exp+0x2e8>)
 801e204:	f7e6 f8d0 	bl	80043a8 <__aeabi_dsub>
 801e208:	f46f 727f 	mvn.w	r2, #1020	; 0x3fc
 801e20c:	4592      	cmp	sl, r2
 801e20e:	db02      	blt.n	801e216 <__ieee754_exp+0x266>
 801e210:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 801e214:	e6e9      	b.n	801dfea <__ieee754_exp+0x3a>
 801e216:	f50a 7a7a 	add.w	sl, sl, #1000	; 0x3e8
 801e21a:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 801e21e:	2200      	movs	r2, #0
 801e220:	f04f 73b8 	mov.w	r3, #24117248	; 0x1700000
 801e224:	e6f9      	b.n	801e01a <__ieee754_exp+0x6a>
 801e226:	bf00      	nop
 801e228:	fefa39ef 	.word	0xfefa39ef
 801e22c:	40862e42 	.word	0x40862e42
 801e230:	8800759c 	.word	0x8800759c
 801e234:	7e37e43c 	.word	0x7e37e43c
 801e238:	d52d3051 	.word	0xd52d3051
 801e23c:	c0874910 	.word	0xc0874910
 801e240:	72bea4d0 	.word	0x72bea4d0
 801e244:	3e663769 	.word	0x3e663769
 801e248:	c5d26bf1 	.word	0xc5d26bf1
 801e24c:	3ebbbd41 	.word	0x3ebbbd41
 801e250:	af25de2c 	.word	0xaf25de2c
 801e254:	3f11566a 	.word	0x3f11566a
 801e258:	16bebd93 	.word	0x16bebd93
 801e25c:	3f66c16c 	.word	0x3f66c16c
 801e260:	5555553e 	.word	0x5555553e
 801e264:	3fc55555 	.word	0x3fc55555
 801e268:	652b82fe 	.word	0x652b82fe
 801e26c:	3ff71547 	.word	0x3ff71547
 801e270:	fee00000 	.word	0xfee00000
 801e274:	3fe62e42 	.word	0x3fe62e42
 801e278:	35793c76 	.word	0x35793c76
 801e27c:	3dea39ef 	.word	0x3dea39ef
 801e280:	40862e41 	.word	0x40862e41
 801e284:	7fefffff 	.word	0x7fefffff
 801e288:	3fd62e42 	.word	0x3fd62e42
 801e28c:	3ff0a2b1 	.word	0x3ff0a2b1
 801e290:	08037b50 	.word	0x08037b50
 801e294:	08037b60 	.word	0x08037b60
 801e298:	3ff00000 	.word	0x3ff00000
 801e29c:	08037b40 	.word	0x08037b40
 801e2a0:	3e2fffff 	.word	0x3e2fffff
 801e2a4:	00000000 	.word	0x00000000

0801e2a8 <__ieee754_pow>:
 801e2a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e2ac:	ed2d 8b06 	vpush	{d8-d10}
 801e2b0:	b08d      	sub	sp, #52	; 0x34
 801e2b2:	ed8d 1b02 	vstr	d1, [sp, #8]
 801e2b6:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 801e2ba:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 801e2be:	ea56 0100 	orrs.w	r1, r6, r0
 801e2c2:	ec53 2b10 	vmov	r2, r3, d0
 801e2c6:	f000 84d1 	beq.w	801ec6c <__ieee754_pow+0x9c4>
 801e2ca:	497f      	ldr	r1, [pc, #508]	; (801e4c8 <__ieee754_pow+0x220>)
 801e2cc:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 801e2d0:	428c      	cmp	r4, r1
 801e2d2:	ee10 8a10 	vmov	r8, s0
 801e2d6:	4699      	mov	r9, r3
 801e2d8:	dc09      	bgt.n	801e2ee <__ieee754_pow+0x46>
 801e2da:	d103      	bne.n	801e2e4 <__ieee754_pow+0x3c>
 801e2dc:	b97a      	cbnz	r2, 801e2fe <__ieee754_pow+0x56>
 801e2de:	42a6      	cmp	r6, r4
 801e2e0:	dd02      	ble.n	801e2e8 <__ieee754_pow+0x40>
 801e2e2:	e00c      	b.n	801e2fe <__ieee754_pow+0x56>
 801e2e4:	428e      	cmp	r6, r1
 801e2e6:	dc02      	bgt.n	801e2ee <__ieee754_pow+0x46>
 801e2e8:	428e      	cmp	r6, r1
 801e2ea:	d110      	bne.n	801e30e <__ieee754_pow+0x66>
 801e2ec:	b178      	cbz	r0, 801e30e <__ieee754_pow+0x66>
 801e2ee:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 801e2f2:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 801e2f6:	ea54 0308 	orrs.w	r3, r4, r8
 801e2fa:	f000 84b7 	beq.w	801ec6c <__ieee754_pow+0x9c4>
 801e2fe:	4873      	ldr	r0, [pc, #460]	; (801e4cc <__ieee754_pow+0x224>)
 801e300:	b00d      	add	sp, #52	; 0x34
 801e302:	ecbd 8b06 	vpop	{d8-d10}
 801e306:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e30a:	f7ff bb99 	b.w	801da40 <nan>
 801e30e:	f1b9 0f00 	cmp.w	r9, #0
 801e312:	da36      	bge.n	801e382 <__ieee754_pow+0xda>
 801e314:	496e      	ldr	r1, [pc, #440]	; (801e4d0 <__ieee754_pow+0x228>)
 801e316:	428e      	cmp	r6, r1
 801e318:	dc51      	bgt.n	801e3be <__ieee754_pow+0x116>
 801e31a:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 801e31e:	428e      	cmp	r6, r1
 801e320:	f340 84af 	ble.w	801ec82 <__ieee754_pow+0x9da>
 801e324:	1531      	asrs	r1, r6, #20
 801e326:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 801e32a:	2914      	cmp	r1, #20
 801e32c:	dd0f      	ble.n	801e34e <__ieee754_pow+0xa6>
 801e32e:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 801e332:	fa20 fc01 	lsr.w	ip, r0, r1
 801e336:	fa0c f101 	lsl.w	r1, ip, r1
 801e33a:	4281      	cmp	r1, r0
 801e33c:	f040 84a1 	bne.w	801ec82 <__ieee754_pow+0x9da>
 801e340:	f00c 0c01 	and.w	ip, ip, #1
 801e344:	f1cc 0102 	rsb	r1, ip, #2
 801e348:	9100      	str	r1, [sp, #0]
 801e34a:	b180      	cbz	r0, 801e36e <__ieee754_pow+0xc6>
 801e34c:	e059      	b.n	801e402 <__ieee754_pow+0x15a>
 801e34e:	2800      	cmp	r0, #0
 801e350:	d155      	bne.n	801e3fe <__ieee754_pow+0x156>
 801e352:	f1c1 0114 	rsb	r1, r1, #20
 801e356:	fa46 fc01 	asr.w	ip, r6, r1
 801e35a:	fa0c f101 	lsl.w	r1, ip, r1
 801e35e:	42b1      	cmp	r1, r6
 801e360:	f040 848c 	bne.w	801ec7c <__ieee754_pow+0x9d4>
 801e364:	f00c 0c01 	and.w	ip, ip, #1
 801e368:	f1cc 0102 	rsb	r1, ip, #2
 801e36c:	9100      	str	r1, [sp, #0]
 801e36e:	4959      	ldr	r1, [pc, #356]	; (801e4d4 <__ieee754_pow+0x22c>)
 801e370:	428e      	cmp	r6, r1
 801e372:	d12d      	bne.n	801e3d0 <__ieee754_pow+0x128>
 801e374:	2f00      	cmp	r7, #0
 801e376:	da79      	bge.n	801e46c <__ieee754_pow+0x1c4>
 801e378:	4956      	ldr	r1, [pc, #344]	; (801e4d4 <__ieee754_pow+0x22c>)
 801e37a:	2000      	movs	r0, #0
 801e37c:	f7e6 faf6 	bl	800496c <__aeabi_ddiv>
 801e380:	e016      	b.n	801e3b0 <__ieee754_pow+0x108>
 801e382:	2100      	movs	r1, #0
 801e384:	9100      	str	r1, [sp, #0]
 801e386:	2800      	cmp	r0, #0
 801e388:	d13b      	bne.n	801e402 <__ieee754_pow+0x15a>
 801e38a:	494f      	ldr	r1, [pc, #316]	; (801e4c8 <__ieee754_pow+0x220>)
 801e38c:	428e      	cmp	r6, r1
 801e38e:	d1ee      	bne.n	801e36e <__ieee754_pow+0xc6>
 801e390:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 801e394:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 801e398:	ea53 0308 	orrs.w	r3, r3, r8
 801e39c:	f000 8466 	beq.w	801ec6c <__ieee754_pow+0x9c4>
 801e3a0:	4b4d      	ldr	r3, [pc, #308]	; (801e4d8 <__ieee754_pow+0x230>)
 801e3a2:	429c      	cmp	r4, r3
 801e3a4:	dd0d      	ble.n	801e3c2 <__ieee754_pow+0x11a>
 801e3a6:	2f00      	cmp	r7, #0
 801e3a8:	f280 8464 	bge.w	801ec74 <__ieee754_pow+0x9cc>
 801e3ac:	2000      	movs	r0, #0
 801e3ae:	2100      	movs	r1, #0
 801e3b0:	ec41 0b10 	vmov	d0, r0, r1
 801e3b4:	b00d      	add	sp, #52	; 0x34
 801e3b6:	ecbd 8b06 	vpop	{d8-d10}
 801e3ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e3be:	2102      	movs	r1, #2
 801e3c0:	e7e0      	b.n	801e384 <__ieee754_pow+0xdc>
 801e3c2:	2f00      	cmp	r7, #0
 801e3c4:	daf2      	bge.n	801e3ac <__ieee754_pow+0x104>
 801e3c6:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 801e3ca:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801e3ce:	e7ef      	b.n	801e3b0 <__ieee754_pow+0x108>
 801e3d0:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 801e3d4:	d104      	bne.n	801e3e0 <__ieee754_pow+0x138>
 801e3d6:	4610      	mov	r0, r2
 801e3d8:	4619      	mov	r1, r3
 801e3da:	f7e6 f99d 	bl	8004718 <__aeabi_dmul>
 801e3de:	e7e7      	b.n	801e3b0 <__ieee754_pow+0x108>
 801e3e0:	493e      	ldr	r1, [pc, #248]	; (801e4dc <__ieee754_pow+0x234>)
 801e3e2:	428f      	cmp	r7, r1
 801e3e4:	d10d      	bne.n	801e402 <__ieee754_pow+0x15a>
 801e3e6:	f1b9 0f00 	cmp.w	r9, #0
 801e3ea:	db0a      	blt.n	801e402 <__ieee754_pow+0x15a>
 801e3ec:	ec43 2b10 	vmov	d0, r2, r3
 801e3f0:	b00d      	add	sp, #52	; 0x34
 801e3f2:	ecbd 8b06 	vpop	{d8-d10}
 801e3f6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e3fa:	f000 bc77 	b.w	801ecec <__ieee754_sqrt>
 801e3fe:	2100      	movs	r1, #0
 801e400:	9100      	str	r1, [sp, #0]
 801e402:	ec43 2b10 	vmov	d0, r2, r3
 801e406:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801e40a:	f001 f83e 	bl	801f48a <fabs>
 801e40e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801e412:	ec51 0b10 	vmov	r0, r1, d0
 801e416:	f1b8 0f00 	cmp.w	r8, #0
 801e41a:	d12a      	bne.n	801e472 <__ieee754_pow+0x1ca>
 801e41c:	b12c      	cbz	r4, 801e42a <__ieee754_pow+0x182>
 801e41e:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 801e4d4 <__ieee754_pow+0x22c>
 801e422:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 801e426:	45e6      	cmp	lr, ip
 801e428:	d123      	bne.n	801e472 <__ieee754_pow+0x1ca>
 801e42a:	2f00      	cmp	r7, #0
 801e42c:	da05      	bge.n	801e43a <__ieee754_pow+0x192>
 801e42e:	4602      	mov	r2, r0
 801e430:	460b      	mov	r3, r1
 801e432:	2000      	movs	r0, #0
 801e434:	4927      	ldr	r1, [pc, #156]	; (801e4d4 <__ieee754_pow+0x22c>)
 801e436:	f7e6 fa99 	bl	800496c <__aeabi_ddiv>
 801e43a:	f1b9 0f00 	cmp.w	r9, #0
 801e43e:	dab7      	bge.n	801e3b0 <__ieee754_pow+0x108>
 801e440:	9b00      	ldr	r3, [sp, #0]
 801e442:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 801e446:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 801e44a:	4323      	orrs	r3, r4
 801e44c:	d108      	bne.n	801e460 <__ieee754_pow+0x1b8>
 801e44e:	4602      	mov	r2, r0
 801e450:	460b      	mov	r3, r1
 801e452:	4610      	mov	r0, r2
 801e454:	4619      	mov	r1, r3
 801e456:	f7e5 ffa7 	bl	80043a8 <__aeabi_dsub>
 801e45a:	4602      	mov	r2, r0
 801e45c:	460b      	mov	r3, r1
 801e45e:	e78d      	b.n	801e37c <__ieee754_pow+0xd4>
 801e460:	9b00      	ldr	r3, [sp, #0]
 801e462:	2b01      	cmp	r3, #1
 801e464:	d1a4      	bne.n	801e3b0 <__ieee754_pow+0x108>
 801e466:	4602      	mov	r2, r0
 801e468:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801e46c:	4610      	mov	r0, r2
 801e46e:	4619      	mov	r1, r3
 801e470:	e79e      	b.n	801e3b0 <__ieee754_pow+0x108>
 801e472:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 801e476:	f10c 35ff 	add.w	r5, ip, #4294967295
 801e47a:	950a      	str	r5, [sp, #40]	; 0x28
 801e47c:	9d00      	ldr	r5, [sp, #0]
 801e47e:	46ac      	mov	ip, r5
 801e480:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801e482:	ea5c 0505 	orrs.w	r5, ip, r5
 801e486:	d0e4      	beq.n	801e452 <__ieee754_pow+0x1aa>
 801e488:	4b15      	ldr	r3, [pc, #84]	; (801e4e0 <__ieee754_pow+0x238>)
 801e48a:	429e      	cmp	r6, r3
 801e48c:	f340 80fc 	ble.w	801e688 <__ieee754_pow+0x3e0>
 801e490:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 801e494:	429e      	cmp	r6, r3
 801e496:	4b10      	ldr	r3, [pc, #64]	; (801e4d8 <__ieee754_pow+0x230>)
 801e498:	dd07      	ble.n	801e4aa <__ieee754_pow+0x202>
 801e49a:	429c      	cmp	r4, r3
 801e49c:	dc0a      	bgt.n	801e4b4 <__ieee754_pow+0x20c>
 801e49e:	2f00      	cmp	r7, #0
 801e4a0:	da84      	bge.n	801e3ac <__ieee754_pow+0x104>
 801e4a2:	a307      	add	r3, pc, #28	; (adr r3, 801e4c0 <__ieee754_pow+0x218>)
 801e4a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e4a8:	e795      	b.n	801e3d6 <__ieee754_pow+0x12e>
 801e4aa:	429c      	cmp	r4, r3
 801e4ac:	dbf7      	blt.n	801e49e <__ieee754_pow+0x1f6>
 801e4ae:	4b09      	ldr	r3, [pc, #36]	; (801e4d4 <__ieee754_pow+0x22c>)
 801e4b0:	429c      	cmp	r4, r3
 801e4b2:	dd17      	ble.n	801e4e4 <__ieee754_pow+0x23c>
 801e4b4:	2f00      	cmp	r7, #0
 801e4b6:	dcf4      	bgt.n	801e4a2 <__ieee754_pow+0x1fa>
 801e4b8:	e778      	b.n	801e3ac <__ieee754_pow+0x104>
 801e4ba:	bf00      	nop
 801e4bc:	f3af 8000 	nop.w
 801e4c0:	8800759c 	.word	0x8800759c
 801e4c4:	7e37e43c 	.word	0x7e37e43c
 801e4c8:	7ff00000 	.word	0x7ff00000
 801e4cc:	0802394d 	.word	0x0802394d
 801e4d0:	433fffff 	.word	0x433fffff
 801e4d4:	3ff00000 	.word	0x3ff00000
 801e4d8:	3fefffff 	.word	0x3fefffff
 801e4dc:	3fe00000 	.word	0x3fe00000
 801e4e0:	41e00000 	.word	0x41e00000
 801e4e4:	4b64      	ldr	r3, [pc, #400]	; (801e678 <__ieee754_pow+0x3d0>)
 801e4e6:	2200      	movs	r2, #0
 801e4e8:	f7e5 ff5e 	bl	80043a8 <__aeabi_dsub>
 801e4ec:	a356      	add	r3, pc, #344	; (adr r3, 801e648 <__ieee754_pow+0x3a0>)
 801e4ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e4f2:	4604      	mov	r4, r0
 801e4f4:	460d      	mov	r5, r1
 801e4f6:	f7e6 f90f 	bl	8004718 <__aeabi_dmul>
 801e4fa:	a355      	add	r3, pc, #340	; (adr r3, 801e650 <__ieee754_pow+0x3a8>)
 801e4fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e500:	4606      	mov	r6, r0
 801e502:	460f      	mov	r7, r1
 801e504:	4620      	mov	r0, r4
 801e506:	4629      	mov	r1, r5
 801e508:	f7e6 f906 	bl	8004718 <__aeabi_dmul>
 801e50c:	4b5b      	ldr	r3, [pc, #364]	; (801e67c <__ieee754_pow+0x3d4>)
 801e50e:	4682      	mov	sl, r0
 801e510:	468b      	mov	fp, r1
 801e512:	2200      	movs	r2, #0
 801e514:	4620      	mov	r0, r4
 801e516:	4629      	mov	r1, r5
 801e518:	f7e6 f8fe 	bl	8004718 <__aeabi_dmul>
 801e51c:	4602      	mov	r2, r0
 801e51e:	460b      	mov	r3, r1
 801e520:	a14d      	add	r1, pc, #308	; (adr r1, 801e658 <__ieee754_pow+0x3b0>)
 801e522:	e9d1 0100 	ldrd	r0, r1, [r1]
 801e526:	f7e5 ff3f 	bl	80043a8 <__aeabi_dsub>
 801e52a:	4622      	mov	r2, r4
 801e52c:	462b      	mov	r3, r5
 801e52e:	f7e6 f8f3 	bl	8004718 <__aeabi_dmul>
 801e532:	4602      	mov	r2, r0
 801e534:	460b      	mov	r3, r1
 801e536:	2000      	movs	r0, #0
 801e538:	4951      	ldr	r1, [pc, #324]	; (801e680 <__ieee754_pow+0x3d8>)
 801e53a:	f7e5 ff35 	bl	80043a8 <__aeabi_dsub>
 801e53e:	4622      	mov	r2, r4
 801e540:	4680      	mov	r8, r0
 801e542:	4689      	mov	r9, r1
 801e544:	462b      	mov	r3, r5
 801e546:	4620      	mov	r0, r4
 801e548:	4629      	mov	r1, r5
 801e54a:	f7e6 f8e5 	bl	8004718 <__aeabi_dmul>
 801e54e:	4602      	mov	r2, r0
 801e550:	460b      	mov	r3, r1
 801e552:	4640      	mov	r0, r8
 801e554:	4649      	mov	r1, r9
 801e556:	f7e6 f8df 	bl	8004718 <__aeabi_dmul>
 801e55a:	a341      	add	r3, pc, #260	; (adr r3, 801e660 <__ieee754_pow+0x3b8>)
 801e55c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e560:	f7e6 f8da 	bl	8004718 <__aeabi_dmul>
 801e564:	4602      	mov	r2, r0
 801e566:	460b      	mov	r3, r1
 801e568:	4650      	mov	r0, sl
 801e56a:	4659      	mov	r1, fp
 801e56c:	f7e5 ff1c 	bl	80043a8 <__aeabi_dsub>
 801e570:	4602      	mov	r2, r0
 801e572:	460b      	mov	r3, r1
 801e574:	4680      	mov	r8, r0
 801e576:	4689      	mov	r9, r1
 801e578:	4630      	mov	r0, r6
 801e57a:	4639      	mov	r1, r7
 801e57c:	f7e5 ff16 	bl	80043ac <__adddf3>
 801e580:	2400      	movs	r4, #0
 801e582:	4632      	mov	r2, r6
 801e584:	463b      	mov	r3, r7
 801e586:	4620      	mov	r0, r4
 801e588:	460d      	mov	r5, r1
 801e58a:	f7e5 ff0d 	bl	80043a8 <__aeabi_dsub>
 801e58e:	4602      	mov	r2, r0
 801e590:	460b      	mov	r3, r1
 801e592:	4640      	mov	r0, r8
 801e594:	4649      	mov	r1, r9
 801e596:	f7e5 ff07 	bl	80043a8 <__aeabi_dsub>
 801e59a:	9b00      	ldr	r3, [sp, #0]
 801e59c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801e59e:	3b01      	subs	r3, #1
 801e5a0:	4313      	orrs	r3, r2
 801e5a2:	4682      	mov	sl, r0
 801e5a4:	468b      	mov	fp, r1
 801e5a6:	f040 81f1 	bne.w	801e98c <__ieee754_pow+0x6e4>
 801e5aa:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 801e668 <__ieee754_pow+0x3c0>
 801e5ae:	eeb0 8a47 	vmov.f32	s16, s14
 801e5b2:	eef0 8a67 	vmov.f32	s17, s15
 801e5b6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801e5ba:	2600      	movs	r6, #0
 801e5bc:	4632      	mov	r2, r6
 801e5be:	463b      	mov	r3, r7
 801e5c0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801e5c4:	f7e5 fef0 	bl	80043a8 <__aeabi_dsub>
 801e5c8:	4622      	mov	r2, r4
 801e5ca:	462b      	mov	r3, r5
 801e5cc:	f7e6 f8a4 	bl	8004718 <__aeabi_dmul>
 801e5d0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801e5d4:	4680      	mov	r8, r0
 801e5d6:	4689      	mov	r9, r1
 801e5d8:	4650      	mov	r0, sl
 801e5da:	4659      	mov	r1, fp
 801e5dc:	f7e6 f89c 	bl	8004718 <__aeabi_dmul>
 801e5e0:	4602      	mov	r2, r0
 801e5e2:	460b      	mov	r3, r1
 801e5e4:	4640      	mov	r0, r8
 801e5e6:	4649      	mov	r1, r9
 801e5e8:	f7e5 fee0 	bl	80043ac <__adddf3>
 801e5ec:	4632      	mov	r2, r6
 801e5ee:	463b      	mov	r3, r7
 801e5f0:	4680      	mov	r8, r0
 801e5f2:	4689      	mov	r9, r1
 801e5f4:	4620      	mov	r0, r4
 801e5f6:	4629      	mov	r1, r5
 801e5f8:	f7e6 f88e 	bl	8004718 <__aeabi_dmul>
 801e5fc:	460b      	mov	r3, r1
 801e5fe:	4604      	mov	r4, r0
 801e600:	460d      	mov	r5, r1
 801e602:	4602      	mov	r2, r0
 801e604:	4649      	mov	r1, r9
 801e606:	4640      	mov	r0, r8
 801e608:	f7e5 fed0 	bl	80043ac <__adddf3>
 801e60c:	4b1d      	ldr	r3, [pc, #116]	; (801e684 <__ieee754_pow+0x3dc>)
 801e60e:	4299      	cmp	r1, r3
 801e610:	ec45 4b19 	vmov	d9, r4, r5
 801e614:	4606      	mov	r6, r0
 801e616:	460f      	mov	r7, r1
 801e618:	468b      	mov	fp, r1
 801e61a:	f340 82fe 	ble.w	801ec1a <__ieee754_pow+0x972>
 801e61e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 801e622:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 801e626:	4303      	orrs	r3, r0
 801e628:	f000 81f0 	beq.w	801ea0c <__ieee754_pow+0x764>
 801e62c:	a310      	add	r3, pc, #64	; (adr r3, 801e670 <__ieee754_pow+0x3c8>)
 801e62e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e632:	ec51 0b18 	vmov	r0, r1, d8
 801e636:	f7e6 f86f 	bl	8004718 <__aeabi_dmul>
 801e63a:	a30d      	add	r3, pc, #52	; (adr r3, 801e670 <__ieee754_pow+0x3c8>)
 801e63c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e640:	e6cb      	b.n	801e3da <__ieee754_pow+0x132>
 801e642:	bf00      	nop
 801e644:	f3af 8000 	nop.w
 801e648:	60000000 	.word	0x60000000
 801e64c:	3ff71547 	.word	0x3ff71547
 801e650:	f85ddf44 	.word	0xf85ddf44
 801e654:	3e54ae0b 	.word	0x3e54ae0b
 801e658:	55555555 	.word	0x55555555
 801e65c:	3fd55555 	.word	0x3fd55555
 801e660:	652b82fe 	.word	0x652b82fe
 801e664:	3ff71547 	.word	0x3ff71547
 801e668:	00000000 	.word	0x00000000
 801e66c:	bff00000 	.word	0xbff00000
 801e670:	8800759c 	.word	0x8800759c
 801e674:	7e37e43c 	.word	0x7e37e43c
 801e678:	3ff00000 	.word	0x3ff00000
 801e67c:	3fd00000 	.word	0x3fd00000
 801e680:	3fe00000 	.word	0x3fe00000
 801e684:	408fffff 	.word	0x408fffff
 801e688:	4bd7      	ldr	r3, [pc, #860]	; (801e9e8 <__ieee754_pow+0x740>)
 801e68a:	ea03 0309 	and.w	r3, r3, r9
 801e68e:	2200      	movs	r2, #0
 801e690:	b92b      	cbnz	r3, 801e69e <__ieee754_pow+0x3f6>
 801e692:	4bd6      	ldr	r3, [pc, #856]	; (801e9ec <__ieee754_pow+0x744>)
 801e694:	f7e6 f840 	bl	8004718 <__aeabi_dmul>
 801e698:	f06f 0234 	mvn.w	r2, #52	; 0x34
 801e69c:	460c      	mov	r4, r1
 801e69e:	1523      	asrs	r3, r4, #20
 801e6a0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801e6a4:	4413      	add	r3, r2
 801e6a6:	9309      	str	r3, [sp, #36]	; 0x24
 801e6a8:	4bd1      	ldr	r3, [pc, #836]	; (801e9f0 <__ieee754_pow+0x748>)
 801e6aa:	f3c4 0413 	ubfx	r4, r4, #0, #20
 801e6ae:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 801e6b2:	429c      	cmp	r4, r3
 801e6b4:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 801e6b8:	dd08      	ble.n	801e6cc <__ieee754_pow+0x424>
 801e6ba:	4bce      	ldr	r3, [pc, #824]	; (801e9f4 <__ieee754_pow+0x74c>)
 801e6bc:	429c      	cmp	r4, r3
 801e6be:	f340 8163 	ble.w	801e988 <__ieee754_pow+0x6e0>
 801e6c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e6c4:	3301      	adds	r3, #1
 801e6c6:	9309      	str	r3, [sp, #36]	; 0x24
 801e6c8:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 801e6cc:	2400      	movs	r4, #0
 801e6ce:	00e3      	lsls	r3, r4, #3
 801e6d0:	930b      	str	r3, [sp, #44]	; 0x2c
 801e6d2:	4bc9      	ldr	r3, [pc, #804]	; (801e9f8 <__ieee754_pow+0x750>)
 801e6d4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801e6d8:	ed93 7b00 	vldr	d7, [r3]
 801e6dc:	4629      	mov	r1, r5
 801e6de:	ec53 2b17 	vmov	r2, r3, d7
 801e6e2:	eeb0 8a47 	vmov.f32	s16, s14
 801e6e6:	eef0 8a67 	vmov.f32	s17, s15
 801e6ea:	4682      	mov	sl, r0
 801e6ec:	f7e5 fe5c 	bl	80043a8 <__aeabi_dsub>
 801e6f0:	4652      	mov	r2, sl
 801e6f2:	4606      	mov	r6, r0
 801e6f4:	460f      	mov	r7, r1
 801e6f6:	462b      	mov	r3, r5
 801e6f8:	ec51 0b18 	vmov	r0, r1, d8
 801e6fc:	f7e5 fe56 	bl	80043ac <__adddf3>
 801e700:	4602      	mov	r2, r0
 801e702:	460b      	mov	r3, r1
 801e704:	2000      	movs	r0, #0
 801e706:	49bd      	ldr	r1, [pc, #756]	; (801e9fc <__ieee754_pow+0x754>)
 801e708:	f7e6 f930 	bl	800496c <__aeabi_ddiv>
 801e70c:	ec41 0b19 	vmov	d9, r0, r1
 801e710:	4602      	mov	r2, r0
 801e712:	460b      	mov	r3, r1
 801e714:	4630      	mov	r0, r6
 801e716:	4639      	mov	r1, r7
 801e718:	f7e5 fffe 	bl	8004718 <__aeabi_dmul>
 801e71c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801e720:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801e724:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801e728:	2300      	movs	r3, #0
 801e72a:	9304      	str	r3, [sp, #16]
 801e72c:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 801e730:	46ab      	mov	fp, r5
 801e732:	106d      	asrs	r5, r5, #1
 801e734:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 801e738:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 801e73c:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 801e740:	2200      	movs	r2, #0
 801e742:	4640      	mov	r0, r8
 801e744:	4649      	mov	r1, r9
 801e746:	4614      	mov	r4, r2
 801e748:	461d      	mov	r5, r3
 801e74a:	f7e5 ffe5 	bl	8004718 <__aeabi_dmul>
 801e74e:	4602      	mov	r2, r0
 801e750:	460b      	mov	r3, r1
 801e752:	4630      	mov	r0, r6
 801e754:	4639      	mov	r1, r7
 801e756:	f7e5 fe27 	bl	80043a8 <__aeabi_dsub>
 801e75a:	ec53 2b18 	vmov	r2, r3, d8
 801e75e:	4606      	mov	r6, r0
 801e760:	460f      	mov	r7, r1
 801e762:	4620      	mov	r0, r4
 801e764:	4629      	mov	r1, r5
 801e766:	f7e5 fe1f 	bl	80043a8 <__aeabi_dsub>
 801e76a:	4602      	mov	r2, r0
 801e76c:	460b      	mov	r3, r1
 801e76e:	4650      	mov	r0, sl
 801e770:	4659      	mov	r1, fp
 801e772:	f7e5 fe19 	bl	80043a8 <__aeabi_dsub>
 801e776:	4642      	mov	r2, r8
 801e778:	464b      	mov	r3, r9
 801e77a:	f7e5 ffcd 	bl	8004718 <__aeabi_dmul>
 801e77e:	4602      	mov	r2, r0
 801e780:	460b      	mov	r3, r1
 801e782:	4630      	mov	r0, r6
 801e784:	4639      	mov	r1, r7
 801e786:	f7e5 fe0f 	bl	80043a8 <__aeabi_dsub>
 801e78a:	ec53 2b19 	vmov	r2, r3, d9
 801e78e:	f7e5 ffc3 	bl	8004718 <__aeabi_dmul>
 801e792:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801e796:	ec41 0b18 	vmov	d8, r0, r1
 801e79a:	4610      	mov	r0, r2
 801e79c:	4619      	mov	r1, r3
 801e79e:	f7e5 ffbb 	bl	8004718 <__aeabi_dmul>
 801e7a2:	a37d      	add	r3, pc, #500	; (adr r3, 801e998 <__ieee754_pow+0x6f0>)
 801e7a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e7a8:	4604      	mov	r4, r0
 801e7aa:	460d      	mov	r5, r1
 801e7ac:	f7e5 ffb4 	bl	8004718 <__aeabi_dmul>
 801e7b0:	a37b      	add	r3, pc, #492	; (adr r3, 801e9a0 <__ieee754_pow+0x6f8>)
 801e7b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e7b6:	f7e5 fdf9 	bl	80043ac <__adddf3>
 801e7ba:	4622      	mov	r2, r4
 801e7bc:	462b      	mov	r3, r5
 801e7be:	f7e5 ffab 	bl	8004718 <__aeabi_dmul>
 801e7c2:	a379      	add	r3, pc, #484	; (adr r3, 801e9a8 <__ieee754_pow+0x700>)
 801e7c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e7c8:	f7e5 fdf0 	bl	80043ac <__adddf3>
 801e7cc:	4622      	mov	r2, r4
 801e7ce:	462b      	mov	r3, r5
 801e7d0:	f7e5 ffa2 	bl	8004718 <__aeabi_dmul>
 801e7d4:	a376      	add	r3, pc, #472	; (adr r3, 801e9b0 <__ieee754_pow+0x708>)
 801e7d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e7da:	f7e5 fde7 	bl	80043ac <__adddf3>
 801e7de:	4622      	mov	r2, r4
 801e7e0:	462b      	mov	r3, r5
 801e7e2:	f7e5 ff99 	bl	8004718 <__aeabi_dmul>
 801e7e6:	a374      	add	r3, pc, #464	; (adr r3, 801e9b8 <__ieee754_pow+0x710>)
 801e7e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e7ec:	f7e5 fdde 	bl	80043ac <__adddf3>
 801e7f0:	4622      	mov	r2, r4
 801e7f2:	462b      	mov	r3, r5
 801e7f4:	f7e5 ff90 	bl	8004718 <__aeabi_dmul>
 801e7f8:	a371      	add	r3, pc, #452	; (adr r3, 801e9c0 <__ieee754_pow+0x718>)
 801e7fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e7fe:	f7e5 fdd5 	bl	80043ac <__adddf3>
 801e802:	4622      	mov	r2, r4
 801e804:	4606      	mov	r6, r0
 801e806:	460f      	mov	r7, r1
 801e808:	462b      	mov	r3, r5
 801e80a:	4620      	mov	r0, r4
 801e80c:	4629      	mov	r1, r5
 801e80e:	f7e5 ff83 	bl	8004718 <__aeabi_dmul>
 801e812:	4602      	mov	r2, r0
 801e814:	460b      	mov	r3, r1
 801e816:	4630      	mov	r0, r6
 801e818:	4639      	mov	r1, r7
 801e81a:	f7e5 ff7d 	bl	8004718 <__aeabi_dmul>
 801e81e:	4642      	mov	r2, r8
 801e820:	4604      	mov	r4, r0
 801e822:	460d      	mov	r5, r1
 801e824:	464b      	mov	r3, r9
 801e826:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801e82a:	f7e5 fdbf 	bl	80043ac <__adddf3>
 801e82e:	ec53 2b18 	vmov	r2, r3, d8
 801e832:	f7e5 ff71 	bl	8004718 <__aeabi_dmul>
 801e836:	4622      	mov	r2, r4
 801e838:	462b      	mov	r3, r5
 801e83a:	f7e5 fdb7 	bl	80043ac <__adddf3>
 801e83e:	4642      	mov	r2, r8
 801e840:	4682      	mov	sl, r0
 801e842:	468b      	mov	fp, r1
 801e844:	464b      	mov	r3, r9
 801e846:	4640      	mov	r0, r8
 801e848:	4649      	mov	r1, r9
 801e84a:	f7e5 ff65 	bl	8004718 <__aeabi_dmul>
 801e84e:	4b6c      	ldr	r3, [pc, #432]	; (801ea00 <__ieee754_pow+0x758>)
 801e850:	2200      	movs	r2, #0
 801e852:	4606      	mov	r6, r0
 801e854:	460f      	mov	r7, r1
 801e856:	f7e5 fda9 	bl	80043ac <__adddf3>
 801e85a:	4652      	mov	r2, sl
 801e85c:	465b      	mov	r3, fp
 801e85e:	f7e5 fda5 	bl	80043ac <__adddf3>
 801e862:	9c04      	ldr	r4, [sp, #16]
 801e864:	460d      	mov	r5, r1
 801e866:	4622      	mov	r2, r4
 801e868:	460b      	mov	r3, r1
 801e86a:	4640      	mov	r0, r8
 801e86c:	4649      	mov	r1, r9
 801e86e:	f7e5 ff53 	bl	8004718 <__aeabi_dmul>
 801e872:	4b63      	ldr	r3, [pc, #396]	; (801ea00 <__ieee754_pow+0x758>)
 801e874:	4680      	mov	r8, r0
 801e876:	4689      	mov	r9, r1
 801e878:	2200      	movs	r2, #0
 801e87a:	4620      	mov	r0, r4
 801e87c:	4629      	mov	r1, r5
 801e87e:	f7e5 fd93 	bl	80043a8 <__aeabi_dsub>
 801e882:	4632      	mov	r2, r6
 801e884:	463b      	mov	r3, r7
 801e886:	f7e5 fd8f 	bl	80043a8 <__aeabi_dsub>
 801e88a:	4602      	mov	r2, r0
 801e88c:	460b      	mov	r3, r1
 801e88e:	4650      	mov	r0, sl
 801e890:	4659      	mov	r1, fp
 801e892:	f7e5 fd89 	bl	80043a8 <__aeabi_dsub>
 801e896:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801e89a:	f7e5 ff3d 	bl	8004718 <__aeabi_dmul>
 801e89e:	4622      	mov	r2, r4
 801e8a0:	4606      	mov	r6, r0
 801e8a2:	460f      	mov	r7, r1
 801e8a4:	462b      	mov	r3, r5
 801e8a6:	ec51 0b18 	vmov	r0, r1, d8
 801e8aa:	f7e5 ff35 	bl	8004718 <__aeabi_dmul>
 801e8ae:	4602      	mov	r2, r0
 801e8b0:	460b      	mov	r3, r1
 801e8b2:	4630      	mov	r0, r6
 801e8b4:	4639      	mov	r1, r7
 801e8b6:	f7e5 fd79 	bl	80043ac <__adddf3>
 801e8ba:	4606      	mov	r6, r0
 801e8bc:	460f      	mov	r7, r1
 801e8be:	4602      	mov	r2, r0
 801e8c0:	460b      	mov	r3, r1
 801e8c2:	4640      	mov	r0, r8
 801e8c4:	4649      	mov	r1, r9
 801e8c6:	f7e5 fd71 	bl	80043ac <__adddf3>
 801e8ca:	9c04      	ldr	r4, [sp, #16]
 801e8cc:	a33e      	add	r3, pc, #248	; (adr r3, 801e9c8 <__ieee754_pow+0x720>)
 801e8ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e8d2:	4620      	mov	r0, r4
 801e8d4:	460d      	mov	r5, r1
 801e8d6:	f7e5 ff1f 	bl	8004718 <__aeabi_dmul>
 801e8da:	4642      	mov	r2, r8
 801e8dc:	ec41 0b18 	vmov	d8, r0, r1
 801e8e0:	464b      	mov	r3, r9
 801e8e2:	4620      	mov	r0, r4
 801e8e4:	4629      	mov	r1, r5
 801e8e6:	f7e5 fd5f 	bl	80043a8 <__aeabi_dsub>
 801e8ea:	4602      	mov	r2, r0
 801e8ec:	460b      	mov	r3, r1
 801e8ee:	4630      	mov	r0, r6
 801e8f0:	4639      	mov	r1, r7
 801e8f2:	f7e5 fd59 	bl	80043a8 <__aeabi_dsub>
 801e8f6:	a336      	add	r3, pc, #216	; (adr r3, 801e9d0 <__ieee754_pow+0x728>)
 801e8f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e8fc:	f7e5 ff0c 	bl	8004718 <__aeabi_dmul>
 801e900:	a335      	add	r3, pc, #212	; (adr r3, 801e9d8 <__ieee754_pow+0x730>)
 801e902:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e906:	4606      	mov	r6, r0
 801e908:	460f      	mov	r7, r1
 801e90a:	4620      	mov	r0, r4
 801e90c:	4629      	mov	r1, r5
 801e90e:	f7e5 ff03 	bl	8004718 <__aeabi_dmul>
 801e912:	4602      	mov	r2, r0
 801e914:	460b      	mov	r3, r1
 801e916:	4630      	mov	r0, r6
 801e918:	4639      	mov	r1, r7
 801e91a:	f7e5 fd47 	bl	80043ac <__adddf3>
 801e91e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801e920:	4b38      	ldr	r3, [pc, #224]	; (801ea04 <__ieee754_pow+0x75c>)
 801e922:	4413      	add	r3, r2
 801e924:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e928:	f7e5 fd40 	bl	80043ac <__adddf3>
 801e92c:	4682      	mov	sl, r0
 801e92e:	9809      	ldr	r0, [sp, #36]	; 0x24
 801e930:	468b      	mov	fp, r1
 801e932:	f7e5 fe87 	bl	8004644 <__aeabi_i2d>
 801e936:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801e938:	4b33      	ldr	r3, [pc, #204]	; (801ea08 <__ieee754_pow+0x760>)
 801e93a:	4413      	add	r3, r2
 801e93c:	e9d3 8900 	ldrd	r8, r9, [r3]
 801e940:	4606      	mov	r6, r0
 801e942:	460f      	mov	r7, r1
 801e944:	4652      	mov	r2, sl
 801e946:	465b      	mov	r3, fp
 801e948:	ec51 0b18 	vmov	r0, r1, d8
 801e94c:	f7e5 fd2e 	bl	80043ac <__adddf3>
 801e950:	4642      	mov	r2, r8
 801e952:	464b      	mov	r3, r9
 801e954:	f7e5 fd2a 	bl	80043ac <__adddf3>
 801e958:	4632      	mov	r2, r6
 801e95a:	463b      	mov	r3, r7
 801e95c:	f7e5 fd26 	bl	80043ac <__adddf3>
 801e960:	9c04      	ldr	r4, [sp, #16]
 801e962:	4632      	mov	r2, r6
 801e964:	463b      	mov	r3, r7
 801e966:	4620      	mov	r0, r4
 801e968:	460d      	mov	r5, r1
 801e96a:	f7e5 fd1d 	bl	80043a8 <__aeabi_dsub>
 801e96e:	4642      	mov	r2, r8
 801e970:	464b      	mov	r3, r9
 801e972:	f7e5 fd19 	bl	80043a8 <__aeabi_dsub>
 801e976:	ec53 2b18 	vmov	r2, r3, d8
 801e97a:	f7e5 fd15 	bl	80043a8 <__aeabi_dsub>
 801e97e:	4602      	mov	r2, r0
 801e980:	460b      	mov	r3, r1
 801e982:	4650      	mov	r0, sl
 801e984:	4659      	mov	r1, fp
 801e986:	e606      	b.n	801e596 <__ieee754_pow+0x2ee>
 801e988:	2401      	movs	r4, #1
 801e98a:	e6a0      	b.n	801e6ce <__ieee754_pow+0x426>
 801e98c:	ed9f 7b14 	vldr	d7, [pc, #80]	; 801e9e0 <__ieee754_pow+0x738>
 801e990:	e60d      	b.n	801e5ae <__ieee754_pow+0x306>
 801e992:	bf00      	nop
 801e994:	f3af 8000 	nop.w
 801e998:	4a454eef 	.word	0x4a454eef
 801e99c:	3fca7e28 	.word	0x3fca7e28
 801e9a0:	93c9db65 	.word	0x93c9db65
 801e9a4:	3fcd864a 	.word	0x3fcd864a
 801e9a8:	a91d4101 	.word	0xa91d4101
 801e9ac:	3fd17460 	.word	0x3fd17460
 801e9b0:	518f264d 	.word	0x518f264d
 801e9b4:	3fd55555 	.word	0x3fd55555
 801e9b8:	db6fabff 	.word	0xdb6fabff
 801e9bc:	3fdb6db6 	.word	0x3fdb6db6
 801e9c0:	33333303 	.word	0x33333303
 801e9c4:	3fe33333 	.word	0x3fe33333
 801e9c8:	e0000000 	.word	0xe0000000
 801e9cc:	3feec709 	.word	0x3feec709
 801e9d0:	dc3a03fd 	.word	0xdc3a03fd
 801e9d4:	3feec709 	.word	0x3feec709
 801e9d8:	145b01f5 	.word	0x145b01f5
 801e9dc:	be3e2fe0 	.word	0xbe3e2fe0
 801e9e0:	00000000 	.word	0x00000000
 801e9e4:	3ff00000 	.word	0x3ff00000
 801e9e8:	7ff00000 	.word	0x7ff00000
 801e9ec:	43400000 	.word	0x43400000
 801e9f0:	0003988e 	.word	0x0003988e
 801e9f4:	000bb679 	.word	0x000bb679
 801e9f8:	08037b70 	.word	0x08037b70
 801e9fc:	3ff00000 	.word	0x3ff00000
 801ea00:	40080000 	.word	0x40080000
 801ea04:	08037b90 	.word	0x08037b90
 801ea08:	08037b80 	.word	0x08037b80
 801ea0c:	a3b5      	add	r3, pc, #724	; (adr r3, 801ece4 <__ieee754_pow+0xa3c>)
 801ea0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ea12:	4640      	mov	r0, r8
 801ea14:	4649      	mov	r1, r9
 801ea16:	f7e5 fcc9 	bl	80043ac <__adddf3>
 801ea1a:	4622      	mov	r2, r4
 801ea1c:	ec41 0b1a 	vmov	d10, r0, r1
 801ea20:	462b      	mov	r3, r5
 801ea22:	4630      	mov	r0, r6
 801ea24:	4639      	mov	r1, r7
 801ea26:	f7e5 fcbf 	bl	80043a8 <__aeabi_dsub>
 801ea2a:	4602      	mov	r2, r0
 801ea2c:	460b      	mov	r3, r1
 801ea2e:	ec51 0b1a 	vmov	r0, r1, d10
 801ea32:	f7e6 f901 	bl	8004c38 <__aeabi_dcmpgt>
 801ea36:	2800      	cmp	r0, #0
 801ea38:	f47f adf8 	bne.w	801e62c <__ieee754_pow+0x384>
 801ea3c:	4aa4      	ldr	r2, [pc, #656]	; (801ecd0 <__ieee754_pow+0xa28>)
 801ea3e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801ea42:	4293      	cmp	r3, r2
 801ea44:	f340 810b 	ble.w	801ec5e <__ieee754_pow+0x9b6>
 801ea48:	151b      	asrs	r3, r3, #20
 801ea4a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 801ea4e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 801ea52:	fa4a f303 	asr.w	r3, sl, r3
 801ea56:	445b      	add	r3, fp
 801ea58:	f3c3 520a 	ubfx	r2, r3, #20, #11
 801ea5c:	4e9d      	ldr	r6, [pc, #628]	; (801ecd4 <__ieee754_pow+0xa2c>)
 801ea5e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 801ea62:	4116      	asrs	r6, r2
 801ea64:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 801ea68:	2000      	movs	r0, #0
 801ea6a:	ea23 0106 	bic.w	r1, r3, r6
 801ea6e:	f1c2 0214 	rsb	r2, r2, #20
 801ea72:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 801ea76:	fa4a fa02 	asr.w	sl, sl, r2
 801ea7a:	f1bb 0f00 	cmp.w	fp, #0
 801ea7e:	4602      	mov	r2, r0
 801ea80:	460b      	mov	r3, r1
 801ea82:	4620      	mov	r0, r4
 801ea84:	4629      	mov	r1, r5
 801ea86:	bfb8      	it	lt
 801ea88:	f1ca 0a00 	rsblt	sl, sl, #0
 801ea8c:	f7e5 fc8c 	bl	80043a8 <__aeabi_dsub>
 801ea90:	ec41 0b19 	vmov	d9, r0, r1
 801ea94:	4642      	mov	r2, r8
 801ea96:	464b      	mov	r3, r9
 801ea98:	ec51 0b19 	vmov	r0, r1, d9
 801ea9c:	f7e5 fc86 	bl	80043ac <__adddf3>
 801eaa0:	2400      	movs	r4, #0
 801eaa2:	a379      	add	r3, pc, #484	; (adr r3, 801ec88 <__ieee754_pow+0x9e0>)
 801eaa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801eaa8:	4620      	mov	r0, r4
 801eaaa:	460d      	mov	r5, r1
 801eaac:	f7e5 fe34 	bl	8004718 <__aeabi_dmul>
 801eab0:	ec53 2b19 	vmov	r2, r3, d9
 801eab4:	4606      	mov	r6, r0
 801eab6:	460f      	mov	r7, r1
 801eab8:	4620      	mov	r0, r4
 801eaba:	4629      	mov	r1, r5
 801eabc:	f7e5 fc74 	bl	80043a8 <__aeabi_dsub>
 801eac0:	4602      	mov	r2, r0
 801eac2:	460b      	mov	r3, r1
 801eac4:	4640      	mov	r0, r8
 801eac6:	4649      	mov	r1, r9
 801eac8:	f7e5 fc6e 	bl	80043a8 <__aeabi_dsub>
 801eacc:	a370      	add	r3, pc, #448	; (adr r3, 801ec90 <__ieee754_pow+0x9e8>)
 801eace:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ead2:	f7e5 fe21 	bl	8004718 <__aeabi_dmul>
 801ead6:	a370      	add	r3, pc, #448	; (adr r3, 801ec98 <__ieee754_pow+0x9f0>)
 801ead8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801eadc:	4680      	mov	r8, r0
 801eade:	4689      	mov	r9, r1
 801eae0:	4620      	mov	r0, r4
 801eae2:	4629      	mov	r1, r5
 801eae4:	f7e5 fe18 	bl	8004718 <__aeabi_dmul>
 801eae8:	4602      	mov	r2, r0
 801eaea:	460b      	mov	r3, r1
 801eaec:	4640      	mov	r0, r8
 801eaee:	4649      	mov	r1, r9
 801eaf0:	f7e5 fc5c 	bl	80043ac <__adddf3>
 801eaf4:	4604      	mov	r4, r0
 801eaf6:	460d      	mov	r5, r1
 801eaf8:	4602      	mov	r2, r0
 801eafa:	460b      	mov	r3, r1
 801eafc:	4630      	mov	r0, r6
 801eafe:	4639      	mov	r1, r7
 801eb00:	f7e5 fc54 	bl	80043ac <__adddf3>
 801eb04:	4632      	mov	r2, r6
 801eb06:	463b      	mov	r3, r7
 801eb08:	4680      	mov	r8, r0
 801eb0a:	4689      	mov	r9, r1
 801eb0c:	f7e5 fc4c 	bl	80043a8 <__aeabi_dsub>
 801eb10:	4602      	mov	r2, r0
 801eb12:	460b      	mov	r3, r1
 801eb14:	4620      	mov	r0, r4
 801eb16:	4629      	mov	r1, r5
 801eb18:	f7e5 fc46 	bl	80043a8 <__aeabi_dsub>
 801eb1c:	4642      	mov	r2, r8
 801eb1e:	4606      	mov	r6, r0
 801eb20:	460f      	mov	r7, r1
 801eb22:	464b      	mov	r3, r9
 801eb24:	4640      	mov	r0, r8
 801eb26:	4649      	mov	r1, r9
 801eb28:	f7e5 fdf6 	bl	8004718 <__aeabi_dmul>
 801eb2c:	a35c      	add	r3, pc, #368	; (adr r3, 801eca0 <__ieee754_pow+0x9f8>)
 801eb2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801eb32:	4604      	mov	r4, r0
 801eb34:	460d      	mov	r5, r1
 801eb36:	f7e5 fdef 	bl	8004718 <__aeabi_dmul>
 801eb3a:	a35b      	add	r3, pc, #364	; (adr r3, 801eca8 <__ieee754_pow+0xa00>)
 801eb3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801eb40:	f7e5 fc32 	bl	80043a8 <__aeabi_dsub>
 801eb44:	4622      	mov	r2, r4
 801eb46:	462b      	mov	r3, r5
 801eb48:	f7e5 fde6 	bl	8004718 <__aeabi_dmul>
 801eb4c:	a358      	add	r3, pc, #352	; (adr r3, 801ecb0 <__ieee754_pow+0xa08>)
 801eb4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801eb52:	f7e5 fc2b 	bl	80043ac <__adddf3>
 801eb56:	4622      	mov	r2, r4
 801eb58:	462b      	mov	r3, r5
 801eb5a:	f7e5 fddd 	bl	8004718 <__aeabi_dmul>
 801eb5e:	a356      	add	r3, pc, #344	; (adr r3, 801ecb8 <__ieee754_pow+0xa10>)
 801eb60:	e9d3 2300 	ldrd	r2, r3, [r3]
 801eb64:	f7e5 fc20 	bl	80043a8 <__aeabi_dsub>
 801eb68:	4622      	mov	r2, r4
 801eb6a:	462b      	mov	r3, r5
 801eb6c:	f7e5 fdd4 	bl	8004718 <__aeabi_dmul>
 801eb70:	a353      	add	r3, pc, #332	; (adr r3, 801ecc0 <__ieee754_pow+0xa18>)
 801eb72:	e9d3 2300 	ldrd	r2, r3, [r3]
 801eb76:	f7e5 fc19 	bl	80043ac <__adddf3>
 801eb7a:	4622      	mov	r2, r4
 801eb7c:	462b      	mov	r3, r5
 801eb7e:	f7e5 fdcb 	bl	8004718 <__aeabi_dmul>
 801eb82:	4602      	mov	r2, r0
 801eb84:	460b      	mov	r3, r1
 801eb86:	4640      	mov	r0, r8
 801eb88:	4649      	mov	r1, r9
 801eb8a:	f7e5 fc0d 	bl	80043a8 <__aeabi_dsub>
 801eb8e:	4604      	mov	r4, r0
 801eb90:	460d      	mov	r5, r1
 801eb92:	4602      	mov	r2, r0
 801eb94:	460b      	mov	r3, r1
 801eb96:	4640      	mov	r0, r8
 801eb98:	4649      	mov	r1, r9
 801eb9a:	f7e5 fdbd 	bl	8004718 <__aeabi_dmul>
 801eb9e:	2200      	movs	r2, #0
 801eba0:	ec41 0b19 	vmov	d9, r0, r1
 801eba4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801eba8:	4620      	mov	r0, r4
 801ebaa:	4629      	mov	r1, r5
 801ebac:	f7e5 fbfc 	bl	80043a8 <__aeabi_dsub>
 801ebb0:	4602      	mov	r2, r0
 801ebb2:	460b      	mov	r3, r1
 801ebb4:	ec51 0b19 	vmov	r0, r1, d9
 801ebb8:	f7e5 fed8 	bl	800496c <__aeabi_ddiv>
 801ebbc:	4632      	mov	r2, r6
 801ebbe:	4604      	mov	r4, r0
 801ebc0:	460d      	mov	r5, r1
 801ebc2:	463b      	mov	r3, r7
 801ebc4:	4640      	mov	r0, r8
 801ebc6:	4649      	mov	r1, r9
 801ebc8:	f7e5 fda6 	bl	8004718 <__aeabi_dmul>
 801ebcc:	4632      	mov	r2, r6
 801ebce:	463b      	mov	r3, r7
 801ebd0:	f7e5 fbec 	bl	80043ac <__adddf3>
 801ebd4:	4602      	mov	r2, r0
 801ebd6:	460b      	mov	r3, r1
 801ebd8:	4620      	mov	r0, r4
 801ebda:	4629      	mov	r1, r5
 801ebdc:	f7e5 fbe4 	bl	80043a8 <__aeabi_dsub>
 801ebe0:	4642      	mov	r2, r8
 801ebe2:	464b      	mov	r3, r9
 801ebe4:	f7e5 fbe0 	bl	80043a8 <__aeabi_dsub>
 801ebe8:	460b      	mov	r3, r1
 801ebea:	4602      	mov	r2, r0
 801ebec:	493a      	ldr	r1, [pc, #232]	; (801ecd8 <__ieee754_pow+0xa30>)
 801ebee:	2000      	movs	r0, #0
 801ebf0:	f7e5 fbda 	bl	80043a8 <__aeabi_dsub>
 801ebf4:	e9cd 0100 	strd	r0, r1, [sp]
 801ebf8:	9b01      	ldr	r3, [sp, #4]
 801ebfa:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 801ebfe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801ec02:	da2f      	bge.n	801ec64 <__ieee754_pow+0x9bc>
 801ec04:	4650      	mov	r0, sl
 801ec06:	ed9d 0b00 	vldr	d0, [sp]
 801ec0a:	f000 fcdd 	bl	801f5c8 <scalbn>
 801ec0e:	ec51 0b10 	vmov	r0, r1, d0
 801ec12:	ec53 2b18 	vmov	r2, r3, d8
 801ec16:	f7ff bbe0 	b.w	801e3da <__ieee754_pow+0x132>
 801ec1a:	4b30      	ldr	r3, [pc, #192]	; (801ecdc <__ieee754_pow+0xa34>)
 801ec1c:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 801ec20:	429e      	cmp	r6, r3
 801ec22:	f77f af0b 	ble.w	801ea3c <__ieee754_pow+0x794>
 801ec26:	4b2e      	ldr	r3, [pc, #184]	; (801ece0 <__ieee754_pow+0xa38>)
 801ec28:	440b      	add	r3, r1
 801ec2a:	4303      	orrs	r3, r0
 801ec2c:	d00b      	beq.n	801ec46 <__ieee754_pow+0x99e>
 801ec2e:	a326      	add	r3, pc, #152	; (adr r3, 801ecc8 <__ieee754_pow+0xa20>)
 801ec30:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ec34:	ec51 0b18 	vmov	r0, r1, d8
 801ec38:	f7e5 fd6e 	bl	8004718 <__aeabi_dmul>
 801ec3c:	a322      	add	r3, pc, #136	; (adr r3, 801ecc8 <__ieee754_pow+0xa20>)
 801ec3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ec42:	f7ff bbca 	b.w	801e3da <__ieee754_pow+0x132>
 801ec46:	4622      	mov	r2, r4
 801ec48:	462b      	mov	r3, r5
 801ec4a:	f7e5 fbad 	bl	80043a8 <__aeabi_dsub>
 801ec4e:	4642      	mov	r2, r8
 801ec50:	464b      	mov	r3, r9
 801ec52:	f7e5 ffe7 	bl	8004c24 <__aeabi_dcmpge>
 801ec56:	2800      	cmp	r0, #0
 801ec58:	f43f aef0 	beq.w	801ea3c <__ieee754_pow+0x794>
 801ec5c:	e7e7      	b.n	801ec2e <__ieee754_pow+0x986>
 801ec5e:	f04f 0a00 	mov.w	sl, #0
 801ec62:	e717      	b.n	801ea94 <__ieee754_pow+0x7ec>
 801ec64:	e9dd 0100 	ldrd	r0, r1, [sp]
 801ec68:	4619      	mov	r1, r3
 801ec6a:	e7d2      	b.n	801ec12 <__ieee754_pow+0x96a>
 801ec6c:	491a      	ldr	r1, [pc, #104]	; (801ecd8 <__ieee754_pow+0xa30>)
 801ec6e:	2000      	movs	r0, #0
 801ec70:	f7ff bb9e 	b.w	801e3b0 <__ieee754_pow+0x108>
 801ec74:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801ec78:	f7ff bb9a 	b.w	801e3b0 <__ieee754_pow+0x108>
 801ec7c:	9000      	str	r0, [sp, #0]
 801ec7e:	f7ff bb76 	b.w	801e36e <__ieee754_pow+0xc6>
 801ec82:	2100      	movs	r1, #0
 801ec84:	f7ff bb60 	b.w	801e348 <__ieee754_pow+0xa0>
 801ec88:	00000000 	.word	0x00000000
 801ec8c:	3fe62e43 	.word	0x3fe62e43
 801ec90:	fefa39ef 	.word	0xfefa39ef
 801ec94:	3fe62e42 	.word	0x3fe62e42
 801ec98:	0ca86c39 	.word	0x0ca86c39
 801ec9c:	be205c61 	.word	0xbe205c61
 801eca0:	72bea4d0 	.word	0x72bea4d0
 801eca4:	3e663769 	.word	0x3e663769
 801eca8:	c5d26bf1 	.word	0xc5d26bf1
 801ecac:	3ebbbd41 	.word	0x3ebbbd41
 801ecb0:	af25de2c 	.word	0xaf25de2c
 801ecb4:	3f11566a 	.word	0x3f11566a
 801ecb8:	16bebd93 	.word	0x16bebd93
 801ecbc:	3f66c16c 	.word	0x3f66c16c
 801ecc0:	5555553e 	.word	0x5555553e
 801ecc4:	3fc55555 	.word	0x3fc55555
 801ecc8:	c2f8f359 	.word	0xc2f8f359
 801eccc:	01a56e1f 	.word	0x01a56e1f
 801ecd0:	3fe00000 	.word	0x3fe00000
 801ecd4:	000fffff 	.word	0x000fffff
 801ecd8:	3ff00000 	.word	0x3ff00000
 801ecdc:	4090cbff 	.word	0x4090cbff
 801ece0:	3f6f3400 	.word	0x3f6f3400
 801ece4:	652b82fe 	.word	0x652b82fe
 801ece8:	3c971547 	.word	0x3c971547

0801ecec <__ieee754_sqrt>:
 801ecec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ecf0:	ec55 4b10 	vmov	r4, r5, d0
 801ecf4:	4e56      	ldr	r6, [pc, #344]	; (801ee50 <__ieee754_sqrt+0x164>)
 801ecf6:	43ae      	bics	r6, r5
 801ecf8:	ee10 0a10 	vmov	r0, s0
 801ecfc:	ee10 3a10 	vmov	r3, s0
 801ed00:	4629      	mov	r1, r5
 801ed02:	462a      	mov	r2, r5
 801ed04:	d110      	bne.n	801ed28 <__ieee754_sqrt+0x3c>
 801ed06:	ee10 2a10 	vmov	r2, s0
 801ed0a:	462b      	mov	r3, r5
 801ed0c:	f7e5 fd04 	bl	8004718 <__aeabi_dmul>
 801ed10:	4602      	mov	r2, r0
 801ed12:	460b      	mov	r3, r1
 801ed14:	4620      	mov	r0, r4
 801ed16:	4629      	mov	r1, r5
 801ed18:	f7e5 fb48 	bl	80043ac <__adddf3>
 801ed1c:	4604      	mov	r4, r0
 801ed1e:	460d      	mov	r5, r1
 801ed20:	ec45 4b10 	vmov	d0, r4, r5
 801ed24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ed28:	2d00      	cmp	r5, #0
 801ed2a:	dc10      	bgt.n	801ed4e <__ieee754_sqrt+0x62>
 801ed2c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801ed30:	4330      	orrs	r0, r6
 801ed32:	d0f5      	beq.n	801ed20 <__ieee754_sqrt+0x34>
 801ed34:	b15d      	cbz	r5, 801ed4e <__ieee754_sqrt+0x62>
 801ed36:	ee10 2a10 	vmov	r2, s0
 801ed3a:	462b      	mov	r3, r5
 801ed3c:	ee10 0a10 	vmov	r0, s0
 801ed40:	f7e5 fb32 	bl	80043a8 <__aeabi_dsub>
 801ed44:	4602      	mov	r2, r0
 801ed46:	460b      	mov	r3, r1
 801ed48:	f7e5 fe10 	bl	800496c <__aeabi_ddiv>
 801ed4c:	e7e6      	b.n	801ed1c <__ieee754_sqrt+0x30>
 801ed4e:	1509      	asrs	r1, r1, #20
 801ed50:	d076      	beq.n	801ee40 <__ieee754_sqrt+0x154>
 801ed52:	f3c2 0213 	ubfx	r2, r2, #0, #20
 801ed56:	07ce      	lsls	r6, r1, #31
 801ed58:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 801ed5c:	bf5e      	ittt	pl
 801ed5e:	0fda      	lsrpl	r2, r3, #31
 801ed60:	005b      	lslpl	r3, r3, #1
 801ed62:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 801ed66:	0fda      	lsrs	r2, r3, #31
 801ed68:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 801ed6c:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 801ed70:	2000      	movs	r0, #0
 801ed72:	106d      	asrs	r5, r5, #1
 801ed74:	005b      	lsls	r3, r3, #1
 801ed76:	f04f 0e16 	mov.w	lr, #22
 801ed7a:	4684      	mov	ip, r0
 801ed7c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 801ed80:	eb0c 0401 	add.w	r4, ip, r1
 801ed84:	4294      	cmp	r4, r2
 801ed86:	bfde      	ittt	le
 801ed88:	1b12      	suble	r2, r2, r4
 801ed8a:	eb04 0c01 	addle.w	ip, r4, r1
 801ed8e:	1840      	addle	r0, r0, r1
 801ed90:	0052      	lsls	r2, r2, #1
 801ed92:	f1be 0e01 	subs.w	lr, lr, #1
 801ed96:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 801ed9a:	ea4f 0151 	mov.w	r1, r1, lsr #1
 801ed9e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801eda2:	d1ed      	bne.n	801ed80 <__ieee754_sqrt+0x94>
 801eda4:	4671      	mov	r1, lr
 801eda6:	2720      	movs	r7, #32
 801eda8:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 801edac:	4562      	cmp	r2, ip
 801edae:	eb04 060e 	add.w	r6, r4, lr
 801edb2:	dc02      	bgt.n	801edba <__ieee754_sqrt+0xce>
 801edb4:	d113      	bne.n	801edde <__ieee754_sqrt+0xf2>
 801edb6:	429e      	cmp	r6, r3
 801edb8:	d811      	bhi.n	801edde <__ieee754_sqrt+0xf2>
 801edba:	2e00      	cmp	r6, #0
 801edbc:	eb06 0e04 	add.w	lr, r6, r4
 801edc0:	da43      	bge.n	801ee4a <__ieee754_sqrt+0x15e>
 801edc2:	f1be 0f00 	cmp.w	lr, #0
 801edc6:	db40      	blt.n	801ee4a <__ieee754_sqrt+0x15e>
 801edc8:	f10c 0801 	add.w	r8, ip, #1
 801edcc:	eba2 020c 	sub.w	r2, r2, ip
 801edd0:	429e      	cmp	r6, r3
 801edd2:	bf88      	it	hi
 801edd4:	f102 32ff 	addhi.w	r2, r2, #4294967295
 801edd8:	1b9b      	subs	r3, r3, r6
 801edda:	4421      	add	r1, r4
 801eddc:	46c4      	mov	ip, r8
 801edde:	0052      	lsls	r2, r2, #1
 801ede0:	3f01      	subs	r7, #1
 801ede2:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 801ede6:	ea4f 0454 	mov.w	r4, r4, lsr #1
 801edea:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801edee:	d1dd      	bne.n	801edac <__ieee754_sqrt+0xc0>
 801edf0:	4313      	orrs	r3, r2
 801edf2:	d006      	beq.n	801ee02 <__ieee754_sqrt+0x116>
 801edf4:	1c4c      	adds	r4, r1, #1
 801edf6:	bf13      	iteet	ne
 801edf8:	3101      	addne	r1, #1
 801edfa:	3001      	addeq	r0, #1
 801edfc:	4639      	moveq	r1, r7
 801edfe:	f021 0101 	bicne.w	r1, r1, #1
 801ee02:	1043      	asrs	r3, r0, #1
 801ee04:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 801ee08:	0849      	lsrs	r1, r1, #1
 801ee0a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 801ee0e:	07c2      	lsls	r2, r0, #31
 801ee10:	bf48      	it	mi
 801ee12:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 801ee16:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 801ee1a:	460c      	mov	r4, r1
 801ee1c:	463d      	mov	r5, r7
 801ee1e:	e77f      	b.n	801ed20 <__ieee754_sqrt+0x34>
 801ee20:	0ada      	lsrs	r2, r3, #11
 801ee22:	3815      	subs	r0, #21
 801ee24:	055b      	lsls	r3, r3, #21
 801ee26:	2a00      	cmp	r2, #0
 801ee28:	d0fa      	beq.n	801ee20 <__ieee754_sqrt+0x134>
 801ee2a:	02d7      	lsls	r7, r2, #11
 801ee2c:	d50a      	bpl.n	801ee44 <__ieee754_sqrt+0x158>
 801ee2e:	f1c1 0420 	rsb	r4, r1, #32
 801ee32:	fa23 f404 	lsr.w	r4, r3, r4
 801ee36:	1e4d      	subs	r5, r1, #1
 801ee38:	408b      	lsls	r3, r1
 801ee3a:	4322      	orrs	r2, r4
 801ee3c:	1b41      	subs	r1, r0, r5
 801ee3e:	e788      	b.n	801ed52 <__ieee754_sqrt+0x66>
 801ee40:	4608      	mov	r0, r1
 801ee42:	e7f0      	b.n	801ee26 <__ieee754_sqrt+0x13a>
 801ee44:	0052      	lsls	r2, r2, #1
 801ee46:	3101      	adds	r1, #1
 801ee48:	e7ef      	b.n	801ee2a <__ieee754_sqrt+0x13e>
 801ee4a:	46e0      	mov	r8, ip
 801ee4c:	e7be      	b.n	801edcc <__ieee754_sqrt+0xe0>
 801ee4e:	bf00      	nop
 801ee50:	7ff00000 	.word	0x7ff00000

0801ee54 <__ieee754_log10f>:
 801ee54:	b508      	push	{r3, lr}
 801ee56:	ee10 2a10 	vmov	r2, s0
 801ee5a:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 801ee5e:	ed2d 8b02 	vpush	{d8}
 801ee62:	d108      	bne.n	801ee76 <__ieee754_log10f+0x22>
 801ee64:	ed9f 7a21 	vldr	s14, [pc, #132]	; 801eeec <__ieee754_log10f+0x98>
 801ee68:	eddf 7a21 	vldr	s15, [pc, #132]	; 801eef0 <__ieee754_log10f+0x9c>
 801ee6c:	ee87 0a27 	vdiv.f32	s0, s14, s15
 801ee70:	ecbd 8b02 	vpop	{d8}
 801ee74:	bd08      	pop	{r3, pc}
 801ee76:	2a00      	cmp	r2, #0
 801ee78:	da02      	bge.n	801ee80 <__ieee754_log10f+0x2c>
 801ee7a:	ee30 7a40 	vsub.f32	s14, s0, s0
 801ee7e:	e7f3      	b.n	801ee68 <__ieee754_log10f+0x14>
 801ee80:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 801ee84:	db02      	blt.n	801ee8c <__ieee754_log10f+0x38>
 801ee86:	ee30 0a00 	vadd.f32	s0, s0, s0
 801ee8a:	e7f1      	b.n	801ee70 <__ieee754_log10f+0x1c>
 801ee8c:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 801ee90:	bfbf      	itttt	lt
 801ee92:	eddf 7a18 	vldrlt	s15, [pc, #96]	; 801eef4 <__ieee754_log10f+0xa0>
 801ee96:	ee60 7a27 	vmullt.f32	s15, s0, s15
 801ee9a:	f06f 0118 	mvnlt.w	r1, #24
 801ee9e:	ee17 2a90 	vmovlt	r2, s15
 801eea2:	ea4f 53e2 	mov.w	r3, r2, asr #23
 801eea6:	bfa8      	it	ge
 801eea8:	2100      	movge	r1, #0
 801eeaa:	3b7f      	subs	r3, #127	; 0x7f
 801eeac:	440b      	add	r3, r1
 801eeae:	0fd9      	lsrs	r1, r3, #31
 801eeb0:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 801eeb4:	ee07 3a90 	vmov	s15, r3
 801eeb8:	f3c2 0216 	ubfx	r2, r2, #0, #23
 801eebc:	f1c1 037f 	rsb	r3, r1, #127	; 0x7f
 801eec0:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 801eec4:	ee00 3a10 	vmov	s0, r3
 801eec8:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 801eecc:	f000 fce4 	bl	801f898 <__ieee754_logf>
 801eed0:	eddf 7a09 	vldr	s15, [pc, #36]	; 801eef8 <__ieee754_log10f+0xa4>
 801eed4:	ee20 0a27 	vmul.f32	s0, s0, s15
 801eed8:	eddf 7a08 	vldr	s15, [pc, #32]	; 801eefc <__ieee754_log10f+0xa8>
 801eedc:	eea8 0a27 	vfma.f32	s0, s16, s15
 801eee0:	eddf 7a07 	vldr	s15, [pc, #28]	; 801ef00 <__ieee754_log10f+0xac>
 801eee4:	eea8 0a27 	vfma.f32	s0, s16, s15
 801eee8:	e7c2      	b.n	801ee70 <__ieee754_log10f+0x1c>
 801eeea:	bf00      	nop
 801eeec:	cc000000 	.word	0xcc000000
 801eef0:	00000000 	.word	0x00000000
 801eef4:	4c000000 	.word	0x4c000000
 801eef8:	3ede5bd9 	.word	0x3ede5bd9
 801eefc:	355427db 	.word	0x355427db
 801ef00:	3e9a2080 	.word	0x3e9a2080

0801ef04 <__ieee754_powf>:
 801ef04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ef08:	ee10 5a90 	vmov	r5, s1
 801ef0c:	f035 4700 	bics.w	r7, r5, #2147483648	; 0x80000000
 801ef10:	ed2d 8b02 	vpush	{d8}
 801ef14:	eeb0 8a40 	vmov.f32	s16, s0
 801ef18:	eef0 8a60 	vmov.f32	s17, s1
 801ef1c:	f000 8291 	beq.w	801f442 <__ieee754_powf+0x53e>
 801ef20:	ee10 8a10 	vmov	r8, s0
 801ef24:	f028 4400 	bic.w	r4, r8, #2147483648	; 0x80000000
 801ef28:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 801ef2c:	dc06      	bgt.n	801ef3c <__ieee754_powf+0x38>
 801ef2e:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 801ef32:	dd0a      	ble.n	801ef4a <__ieee754_powf+0x46>
 801ef34:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 801ef38:	f000 8283 	beq.w	801f442 <__ieee754_powf+0x53e>
 801ef3c:	ecbd 8b02 	vpop	{d8}
 801ef40:	48d8      	ldr	r0, [pc, #864]	; (801f2a4 <__ieee754_powf+0x3a0>)
 801ef42:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801ef46:	f7fe bd83 	b.w	801da50 <nanf>
 801ef4a:	f1b8 0f00 	cmp.w	r8, #0
 801ef4e:	da1f      	bge.n	801ef90 <__ieee754_powf+0x8c>
 801ef50:	f1b7 4f97 	cmp.w	r7, #1266679808	; 0x4b800000
 801ef54:	da2e      	bge.n	801efb4 <__ieee754_powf+0xb0>
 801ef56:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 801ef5a:	f2c0 827b 	blt.w	801f454 <__ieee754_powf+0x550>
 801ef5e:	15fb      	asrs	r3, r7, #23
 801ef60:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 801ef64:	fa47 f603 	asr.w	r6, r7, r3
 801ef68:	fa06 f303 	lsl.w	r3, r6, r3
 801ef6c:	42bb      	cmp	r3, r7
 801ef6e:	f040 8271 	bne.w	801f454 <__ieee754_powf+0x550>
 801ef72:	f006 0601 	and.w	r6, r6, #1
 801ef76:	f1c6 0602 	rsb	r6, r6, #2
 801ef7a:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 801ef7e:	d120      	bne.n	801efc2 <__ieee754_powf+0xbe>
 801ef80:	2d00      	cmp	r5, #0
 801ef82:	f280 8264 	bge.w	801f44e <__ieee754_powf+0x54a>
 801ef86:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801ef8a:	ee87 0a88 	vdiv.f32	s0, s15, s16
 801ef8e:	e00d      	b.n	801efac <__ieee754_powf+0xa8>
 801ef90:	2600      	movs	r6, #0
 801ef92:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 801ef96:	d1f0      	bne.n	801ef7a <__ieee754_powf+0x76>
 801ef98:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 801ef9c:	f000 8251 	beq.w	801f442 <__ieee754_powf+0x53e>
 801efa0:	dd0a      	ble.n	801efb8 <__ieee754_powf+0xb4>
 801efa2:	2d00      	cmp	r5, #0
 801efa4:	f280 8250 	bge.w	801f448 <__ieee754_powf+0x544>
 801efa8:	ed9f 0abf 	vldr	s0, [pc, #764]	; 801f2a8 <__ieee754_powf+0x3a4>
 801efac:	ecbd 8b02 	vpop	{d8}
 801efb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801efb4:	2602      	movs	r6, #2
 801efb6:	e7ec      	b.n	801ef92 <__ieee754_powf+0x8e>
 801efb8:	2d00      	cmp	r5, #0
 801efba:	daf5      	bge.n	801efa8 <__ieee754_powf+0xa4>
 801efbc:	eeb1 0a68 	vneg.f32	s0, s17
 801efc0:	e7f4      	b.n	801efac <__ieee754_powf+0xa8>
 801efc2:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
 801efc6:	d102      	bne.n	801efce <__ieee754_powf+0xca>
 801efc8:	ee28 0a08 	vmul.f32	s0, s16, s16
 801efcc:	e7ee      	b.n	801efac <__ieee754_powf+0xa8>
 801efce:	f1b5 5f7c 	cmp.w	r5, #1056964608	; 0x3f000000
 801efd2:	eeb0 0a48 	vmov.f32	s0, s16
 801efd6:	d108      	bne.n	801efea <__ieee754_powf+0xe6>
 801efd8:	f1b8 0f00 	cmp.w	r8, #0
 801efdc:	db05      	blt.n	801efea <__ieee754_powf+0xe6>
 801efde:	ecbd 8b02 	vpop	{d8}
 801efe2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801efe6:	f000 ba4d 	b.w	801f484 <__ieee754_sqrtf>
 801efea:	f000 fb73 	bl	801f6d4 <fabsf>
 801efee:	b124      	cbz	r4, 801effa <__ieee754_powf+0xf6>
 801eff0:	f028 4340 	bic.w	r3, r8, #3221225472	; 0xc0000000
 801eff4:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 801eff8:	d117      	bne.n	801f02a <__ieee754_powf+0x126>
 801effa:	2d00      	cmp	r5, #0
 801effc:	bfbc      	itt	lt
 801effe:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 801f002:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 801f006:	f1b8 0f00 	cmp.w	r8, #0
 801f00a:	dacf      	bge.n	801efac <__ieee754_powf+0xa8>
 801f00c:	f1a4 547e 	sub.w	r4, r4, #1065353216	; 0x3f800000
 801f010:	ea54 0306 	orrs.w	r3, r4, r6
 801f014:	d104      	bne.n	801f020 <__ieee754_powf+0x11c>
 801f016:	ee70 7a40 	vsub.f32	s15, s0, s0
 801f01a:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 801f01e:	e7c5      	b.n	801efac <__ieee754_powf+0xa8>
 801f020:	2e01      	cmp	r6, #1
 801f022:	d1c3      	bne.n	801efac <__ieee754_powf+0xa8>
 801f024:	eeb1 0a40 	vneg.f32	s0, s0
 801f028:	e7c0      	b.n	801efac <__ieee754_powf+0xa8>
 801f02a:	ea4f 70d8 	mov.w	r0, r8, lsr #31
 801f02e:	3801      	subs	r0, #1
 801f030:	ea56 0300 	orrs.w	r3, r6, r0
 801f034:	d104      	bne.n	801f040 <__ieee754_powf+0x13c>
 801f036:	ee38 8a48 	vsub.f32	s16, s16, s16
 801f03a:	ee88 0a08 	vdiv.f32	s0, s16, s16
 801f03e:	e7b5      	b.n	801efac <__ieee754_powf+0xa8>
 801f040:	f1b7 4f9a 	cmp.w	r7, #1291845632	; 0x4d000000
 801f044:	dd6b      	ble.n	801f11e <__ieee754_powf+0x21a>
 801f046:	4b99      	ldr	r3, [pc, #612]	; (801f2ac <__ieee754_powf+0x3a8>)
 801f048:	429c      	cmp	r4, r3
 801f04a:	dc06      	bgt.n	801f05a <__ieee754_powf+0x156>
 801f04c:	2d00      	cmp	r5, #0
 801f04e:	daab      	bge.n	801efa8 <__ieee754_powf+0xa4>
 801f050:	ed9f 0a97 	vldr	s0, [pc, #604]	; 801f2b0 <__ieee754_powf+0x3ac>
 801f054:	ee20 0a00 	vmul.f32	s0, s0, s0
 801f058:	e7a8      	b.n	801efac <__ieee754_powf+0xa8>
 801f05a:	4b96      	ldr	r3, [pc, #600]	; (801f2b4 <__ieee754_powf+0x3b0>)
 801f05c:	429c      	cmp	r4, r3
 801f05e:	dd02      	ble.n	801f066 <__ieee754_powf+0x162>
 801f060:	2d00      	cmp	r5, #0
 801f062:	dcf5      	bgt.n	801f050 <__ieee754_powf+0x14c>
 801f064:	e7a0      	b.n	801efa8 <__ieee754_powf+0xa4>
 801f066:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801f06a:	ee30 0a67 	vsub.f32	s0, s0, s15
 801f06e:	eddf 6a92 	vldr	s13, [pc, #584]	; 801f2b8 <__ieee754_powf+0x3b4>
 801f072:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 801f076:	eee0 6a67 	vfms.f32	s13, s0, s15
 801f07a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801f07e:	eee6 7ac0 	vfms.f32	s15, s13, s0
 801f082:	ee20 7a00 	vmul.f32	s14, s0, s0
 801f086:	ee67 7a27 	vmul.f32	s15, s14, s15
 801f08a:	ed9f 7a8c 	vldr	s14, [pc, #560]	; 801f2bc <__ieee754_powf+0x3b8>
 801f08e:	ee67 7a67 	vnmul.f32	s15, s14, s15
 801f092:	ed9f 7a8b 	vldr	s14, [pc, #556]	; 801f2c0 <__ieee754_powf+0x3bc>
 801f096:	eee0 7a07 	vfma.f32	s15, s0, s14
 801f09a:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 801f2c4 <__ieee754_powf+0x3c0>
 801f09e:	eef0 6a67 	vmov.f32	s13, s15
 801f0a2:	eee0 6a07 	vfma.f32	s13, s0, s14
 801f0a6:	ee16 3a90 	vmov	r3, s13
 801f0aa:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 801f0ae:	f023 030f 	bic.w	r3, r3, #15
 801f0b2:	ee00 3a90 	vmov	s1, r3
 801f0b6:	eee0 0a47 	vfms.f32	s1, s0, s14
 801f0ba:	ee77 7ae0 	vsub.f32	s15, s15, s1
 801f0be:	f425 657f 	bic.w	r5, r5, #4080	; 0xff0
 801f0c2:	f025 050f 	bic.w	r5, r5, #15
 801f0c6:	ee07 5a10 	vmov	s14, r5
 801f0ca:	ee67 0aa8 	vmul.f32	s1, s15, s17
 801f0ce:	ee38 7ac7 	vsub.f32	s14, s17, s14
 801f0d2:	ee07 3a90 	vmov	s15, r3
 801f0d6:	eee7 0a27 	vfma.f32	s1, s14, s15
 801f0da:	3e01      	subs	r6, #1
 801f0dc:	ea56 0200 	orrs.w	r2, r6, r0
 801f0e0:	ee07 5a10 	vmov	s14, r5
 801f0e4:	ee67 7a87 	vmul.f32	s15, s15, s14
 801f0e8:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 801f0ec:	ee30 7aa7 	vadd.f32	s14, s1, s15
 801f0f0:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 801f0f4:	ee17 4a10 	vmov	r4, s14
 801f0f8:	bf08      	it	eq
 801f0fa:	eeb0 8a40 	vmoveq.f32	s16, s0
 801f0fe:	2c00      	cmp	r4, #0
 801f100:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 801f104:	f340 8184 	ble.w	801f410 <__ieee754_powf+0x50c>
 801f108:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 801f10c:	f340 80fc 	ble.w	801f308 <__ieee754_powf+0x404>
 801f110:	eddf 7a67 	vldr	s15, [pc, #412]	; 801f2b0 <__ieee754_powf+0x3ac>
 801f114:	ee28 0a27 	vmul.f32	s0, s16, s15
 801f118:	ee20 0a27 	vmul.f32	s0, s0, s15
 801f11c:	e746      	b.n	801efac <__ieee754_powf+0xa8>
 801f11e:	f018 4fff 	tst.w	r8, #2139095040	; 0x7f800000
 801f122:	bf01      	itttt	eq
 801f124:	eddf 7a68 	vldreq	s15, [pc, #416]	; 801f2c8 <__ieee754_powf+0x3c4>
 801f128:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 801f12c:	f06f 0217 	mvneq.w	r2, #23
 801f130:	ee17 4a90 	vmoveq	r4, s15
 801f134:	ea4f 53e4 	mov.w	r3, r4, asr #23
 801f138:	bf18      	it	ne
 801f13a:	2200      	movne	r2, #0
 801f13c:	3b7f      	subs	r3, #127	; 0x7f
 801f13e:	4413      	add	r3, r2
 801f140:	4a62      	ldr	r2, [pc, #392]	; (801f2cc <__ieee754_powf+0x3c8>)
 801f142:	f3c4 0416 	ubfx	r4, r4, #0, #23
 801f146:	4294      	cmp	r4, r2
 801f148:	f044 517e 	orr.w	r1, r4, #1065353216	; 0x3f800000
 801f14c:	dd06      	ble.n	801f15c <__ieee754_powf+0x258>
 801f14e:	4a60      	ldr	r2, [pc, #384]	; (801f2d0 <__ieee754_powf+0x3cc>)
 801f150:	4294      	cmp	r4, r2
 801f152:	f340 80a4 	ble.w	801f29e <__ieee754_powf+0x39a>
 801f156:	3301      	adds	r3, #1
 801f158:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 801f15c:	2400      	movs	r4, #0
 801f15e:	4a5d      	ldr	r2, [pc, #372]	; (801f2d4 <__ieee754_powf+0x3d0>)
 801f160:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 801f164:	ee07 1a90 	vmov	s15, r1
 801f168:	ed92 7a00 	vldr	s14, [r2]
 801f16c:	4a5a      	ldr	r2, [pc, #360]	; (801f2d8 <__ieee754_powf+0x3d4>)
 801f16e:	ee37 6a27 	vadd.f32	s12, s14, s15
 801f172:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 801f176:	eec5 6a86 	vdiv.f32	s13, s11, s12
 801f17a:	1049      	asrs	r1, r1, #1
 801f17c:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 801f180:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 801f184:	eb01 5144 	add.w	r1, r1, r4, lsl #21
 801f188:	ee37 5ac7 	vsub.f32	s10, s15, s14
 801f18c:	ee06 1a10 	vmov	s12, r1
 801f190:	ee65 4a26 	vmul.f32	s9, s10, s13
 801f194:	ee36 7a47 	vsub.f32	s14, s12, s14
 801f198:	ee14 7a90 	vmov	r7, s9
 801f19c:	4017      	ands	r7, r2
 801f19e:	ee05 7a90 	vmov	s11, r7
 801f1a2:	eea5 5ac6 	vfms.f32	s10, s11, s12
 801f1a6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801f1aa:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 801f2dc <__ieee754_powf+0x3d8>
 801f1ae:	eea5 5ae7 	vfms.f32	s10, s11, s15
 801f1b2:	ee64 7aa4 	vmul.f32	s15, s9, s9
 801f1b6:	ee25 6a26 	vmul.f32	s12, s10, s13
 801f1ba:	eddf 6a49 	vldr	s13, [pc, #292]	; 801f2e0 <__ieee754_powf+0x3dc>
 801f1be:	eea7 7aa6 	vfma.f32	s14, s15, s13
 801f1c2:	eddf 6a48 	vldr	s13, [pc, #288]	; 801f2e4 <__ieee754_powf+0x3e0>
 801f1c6:	eee7 6a27 	vfma.f32	s13, s14, s15
 801f1ca:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 801f2b8 <__ieee754_powf+0x3b4>
 801f1ce:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801f1d2:	eddf 6a45 	vldr	s13, [pc, #276]	; 801f2e8 <__ieee754_powf+0x3e4>
 801f1d6:	eee7 6a27 	vfma.f32	s13, s14, s15
 801f1da:	ed9f 7a44 	vldr	s14, [pc, #272]	; 801f2ec <__ieee754_powf+0x3e8>
 801f1de:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801f1e2:	ee74 6aa5 	vadd.f32	s13, s9, s11
 801f1e6:	ee27 5aa7 	vmul.f32	s10, s15, s15
 801f1ea:	ee66 6a86 	vmul.f32	s13, s13, s12
 801f1ee:	eee5 6a07 	vfma.f32	s13, s10, s14
 801f1f2:	eeb0 5a08 	vmov.f32	s10, #8	; 0x40400000  3.0
 801f1f6:	eef0 7a45 	vmov.f32	s15, s10
 801f1fa:	eee5 7aa5 	vfma.f32	s15, s11, s11
 801f1fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801f202:	ee17 1a90 	vmov	r1, s15
 801f206:	4011      	ands	r1, r2
 801f208:	ee07 1a90 	vmov	s15, r1
 801f20c:	ee37 7ac5 	vsub.f32	s14, s15, s10
 801f210:	eea5 7ae5 	vfms.f32	s14, s11, s11
 801f214:	ee36 7ac7 	vsub.f32	s14, s13, s14
 801f218:	ee27 7a24 	vmul.f32	s14, s14, s9
 801f21c:	eea6 7a27 	vfma.f32	s14, s12, s15
 801f220:	eeb0 6a47 	vmov.f32	s12, s14
 801f224:	eea5 6aa7 	vfma.f32	s12, s11, s15
 801f228:	ee16 1a10 	vmov	r1, s12
 801f22c:	4011      	ands	r1, r2
 801f22e:	ee06 1a90 	vmov	s13, r1
 801f232:	eee5 6ae7 	vfms.f32	s13, s11, s15
 801f236:	eddf 7a2e 	vldr	s15, [pc, #184]	; 801f2f0 <__ieee754_powf+0x3ec>
 801f23a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 801f2f4 <__ieee754_powf+0x3f0>
 801f23e:	ee37 7a66 	vsub.f32	s14, s14, s13
 801f242:	ee06 1a10 	vmov	s12, r1
 801f246:	ee27 7a27 	vmul.f32	s14, s14, s15
 801f24a:	eddf 7a2b 	vldr	s15, [pc, #172]	; 801f2f8 <__ieee754_powf+0x3f4>
 801f24e:	492b      	ldr	r1, [pc, #172]	; (801f2fc <__ieee754_powf+0x3f8>)
 801f250:	eea6 7a27 	vfma.f32	s14, s12, s15
 801f254:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801f258:	edd1 7a00 	vldr	s15, [r1]
 801f25c:	ee37 7a27 	vadd.f32	s14, s14, s15
 801f260:	ee07 3a90 	vmov	s15, r3
 801f264:	4b26      	ldr	r3, [pc, #152]	; (801f300 <__ieee754_powf+0x3fc>)
 801f266:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 801f26a:	eef0 7a47 	vmov.f32	s15, s14
 801f26e:	eee6 7a25 	vfma.f32	s15, s12, s11
 801f272:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801f276:	edd4 0a00 	vldr	s1, [r4]
 801f27a:	ee77 7aa0 	vadd.f32	s15, s15, s1
 801f27e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801f282:	ee17 3a90 	vmov	r3, s15
 801f286:	4013      	ands	r3, r2
 801f288:	ee07 3a90 	vmov	s15, r3
 801f28c:	ee77 6ae6 	vsub.f32	s13, s15, s13
 801f290:	ee76 6ae0 	vsub.f32	s13, s13, s1
 801f294:	eee6 6a65 	vfms.f32	s13, s12, s11
 801f298:	ee77 7a66 	vsub.f32	s15, s14, s13
 801f29c:	e70f      	b.n	801f0be <__ieee754_powf+0x1ba>
 801f29e:	2401      	movs	r4, #1
 801f2a0:	e75d      	b.n	801f15e <__ieee754_powf+0x25a>
 801f2a2:	bf00      	nop
 801f2a4:	0802394d 	.word	0x0802394d
 801f2a8:	00000000 	.word	0x00000000
 801f2ac:	3f7ffff7 	.word	0x3f7ffff7
 801f2b0:	7149f2ca 	.word	0x7149f2ca
 801f2b4:	3f800007 	.word	0x3f800007
 801f2b8:	3eaaaaab 	.word	0x3eaaaaab
 801f2bc:	3fb8aa3b 	.word	0x3fb8aa3b
 801f2c0:	36eca570 	.word	0x36eca570
 801f2c4:	3fb8aa00 	.word	0x3fb8aa00
 801f2c8:	4b800000 	.word	0x4b800000
 801f2cc:	001cc471 	.word	0x001cc471
 801f2d0:	005db3d6 	.word	0x005db3d6
 801f2d4:	08037ba0 	.word	0x08037ba0
 801f2d8:	fffff000 	.word	0xfffff000
 801f2dc:	3e6c3255 	.word	0x3e6c3255
 801f2e0:	3e53f142 	.word	0x3e53f142
 801f2e4:	3e8ba305 	.word	0x3e8ba305
 801f2e8:	3edb6db7 	.word	0x3edb6db7
 801f2ec:	3f19999a 	.word	0x3f19999a
 801f2f0:	3f76384f 	.word	0x3f76384f
 801f2f4:	3f763800 	.word	0x3f763800
 801f2f8:	369dc3a0 	.word	0x369dc3a0
 801f2fc:	08037bb0 	.word	0x08037bb0
 801f300:	08037ba8 	.word	0x08037ba8
 801f304:	3338aa3c 	.word	0x3338aa3c
 801f308:	f040 8092 	bne.w	801f430 <__ieee754_powf+0x52c>
 801f30c:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 801f304 <__ieee754_powf+0x400>
 801f310:	ee37 7a67 	vsub.f32	s14, s14, s15
 801f314:	ee70 6aa6 	vadd.f32	s13, s1, s13
 801f318:	eef4 6ac7 	vcmpe.f32	s13, s14
 801f31c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f320:	f73f aef6 	bgt.w	801f110 <__ieee754_powf+0x20c>
 801f324:	15db      	asrs	r3, r3, #23
 801f326:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 801f32a:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 801f32e:	4103      	asrs	r3, r0
 801f330:	4423      	add	r3, r4
 801f332:	4949      	ldr	r1, [pc, #292]	; (801f458 <__ieee754_powf+0x554>)
 801f334:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801f338:	3a7f      	subs	r2, #127	; 0x7f
 801f33a:	4111      	asrs	r1, r2
 801f33c:	ea23 0101 	bic.w	r1, r3, r1
 801f340:	ee07 1a10 	vmov	s14, r1
 801f344:	f3c3 0016 	ubfx	r0, r3, #0, #23
 801f348:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 801f34c:	f1c2 0217 	rsb	r2, r2, #23
 801f350:	4110      	asrs	r0, r2
 801f352:	2c00      	cmp	r4, #0
 801f354:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801f358:	bfb8      	it	lt
 801f35a:	4240      	neglt	r0, r0
 801f35c:	ee37 7aa0 	vadd.f32	s14, s15, s1
 801f360:	eddf 6a3e 	vldr	s13, [pc, #248]	; 801f45c <__ieee754_powf+0x558>
 801f364:	ee17 3a10 	vmov	r3, s14
 801f368:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 801f36c:	f023 030f 	bic.w	r3, r3, #15
 801f370:	ee07 3a10 	vmov	s14, r3
 801f374:	ee77 7a67 	vsub.f32	s15, s14, s15
 801f378:	ee70 0ae7 	vsub.f32	s1, s1, s15
 801f37c:	eddf 7a38 	vldr	s15, [pc, #224]	; 801f460 <__ieee754_powf+0x55c>
 801f380:	ee67 7a27 	vmul.f32	s15, s14, s15
 801f384:	eee0 7aa6 	vfma.f32	s15, s1, s13
 801f388:	eddf 6a36 	vldr	s13, [pc, #216]	; 801f464 <__ieee754_powf+0x560>
 801f38c:	eeb0 0a67 	vmov.f32	s0, s15
 801f390:	eea7 0a26 	vfma.f32	s0, s14, s13
 801f394:	eeb0 6a40 	vmov.f32	s12, s0
 801f398:	eea7 6a66 	vfms.f32	s12, s14, s13
 801f39c:	ee20 7a00 	vmul.f32	s14, s0, s0
 801f3a0:	ee77 7ac6 	vsub.f32	s15, s15, s12
 801f3a4:	eddf 6a30 	vldr	s13, [pc, #192]	; 801f468 <__ieee754_powf+0x564>
 801f3a8:	ed9f 6a30 	vldr	s12, [pc, #192]	; 801f46c <__ieee754_powf+0x568>
 801f3ac:	eea7 6a26 	vfma.f32	s12, s14, s13
 801f3b0:	eddf 6a2f 	vldr	s13, [pc, #188]	; 801f470 <__ieee754_powf+0x56c>
 801f3b4:	eee6 6a07 	vfma.f32	s13, s12, s14
 801f3b8:	ed9f 6a2e 	vldr	s12, [pc, #184]	; 801f474 <__ieee754_powf+0x570>
 801f3bc:	eea6 6a87 	vfma.f32	s12, s13, s14
 801f3c0:	eddf 6a2d 	vldr	s13, [pc, #180]	; 801f478 <__ieee754_powf+0x574>
 801f3c4:	eee6 6a07 	vfma.f32	s13, s12, s14
 801f3c8:	eeb0 6a40 	vmov.f32	s12, s0
 801f3cc:	eea6 6ac7 	vfms.f32	s12, s13, s14
 801f3d0:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 801f3d4:	eeb0 7a46 	vmov.f32	s14, s12
 801f3d8:	ee77 6a66 	vsub.f32	s13, s14, s13
 801f3dc:	ee20 6a06 	vmul.f32	s12, s0, s12
 801f3e0:	eee0 7a27 	vfma.f32	s15, s0, s15
 801f3e4:	ee86 7a26 	vdiv.f32	s14, s12, s13
 801f3e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 801f3ec:	ee37 0ac0 	vsub.f32	s0, s15, s0
 801f3f0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801f3f4:	ee37 0ac0 	vsub.f32	s0, s15, s0
 801f3f8:	ee10 3a10 	vmov	r3, s0
 801f3fc:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 801f400:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 801f404:	da1a      	bge.n	801f43c <__ieee754_powf+0x538>
 801f406:	f000 f9d5 	bl	801f7b4 <scalbnf>
 801f40a:	ee20 0a08 	vmul.f32	s0, s0, s16
 801f40e:	e5cd      	b.n	801efac <__ieee754_powf+0xa8>
 801f410:	4a1a      	ldr	r2, [pc, #104]	; (801f47c <__ieee754_powf+0x578>)
 801f412:	4293      	cmp	r3, r2
 801f414:	dd02      	ble.n	801f41c <__ieee754_powf+0x518>
 801f416:	eddf 7a1a 	vldr	s15, [pc, #104]	; 801f480 <__ieee754_powf+0x57c>
 801f41a:	e67b      	b.n	801f114 <__ieee754_powf+0x210>
 801f41c:	d108      	bne.n	801f430 <__ieee754_powf+0x52c>
 801f41e:	ee37 7a67 	vsub.f32	s14, s14, s15
 801f422:	eeb4 7ae0 	vcmpe.f32	s14, s1
 801f426:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f42a:	f6ff af7b 	blt.w	801f324 <__ieee754_powf+0x420>
 801f42e:	e7f2      	b.n	801f416 <__ieee754_powf+0x512>
 801f430:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 801f434:	f73f af76 	bgt.w	801f324 <__ieee754_powf+0x420>
 801f438:	2000      	movs	r0, #0
 801f43a:	e78f      	b.n	801f35c <__ieee754_powf+0x458>
 801f43c:	ee00 3a10 	vmov	s0, r3
 801f440:	e7e3      	b.n	801f40a <__ieee754_powf+0x506>
 801f442:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801f446:	e5b1      	b.n	801efac <__ieee754_powf+0xa8>
 801f448:	eeb0 0a68 	vmov.f32	s0, s17
 801f44c:	e5ae      	b.n	801efac <__ieee754_powf+0xa8>
 801f44e:	eeb0 0a48 	vmov.f32	s0, s16
 801f452:	e5ab      	b.n	801efac <__ieee754_powf+0xa8>
 801f454:	2600      	movs	r6, #0
 801f456:	e590      	b.n	801ef7a <__ieee754_powf+0x76>
 801f458:	007fffff 	.word	0x007fffff
 801f45c:	3f317218 	.word	0x3f317218
 801f460:	35bfbe8c 	.word	0x35bfbe8c
 801f464:	3f317200 	.word	0x3f317200
 801f468:	3331bb4c 	.word	0x3331bb4c
 801f46c:	b5ddea0e 	.word	0xb5ddea0e
 801f470:	388ab355 	.word	0x388ab355
 801f474:	bb360b61 	.word	0xbb360b61
 801f478:	3e2aaaab 	.word	0x3e2aaaab
 801f47c:	43160000 	.word	0x43160000
 801f480:	0da24260 	.word	0x0da24260

0801f484 <__ieee754_sqrtf>:
 801f484:	eeb1 0ac0 	vsqrt.f32	s0, s0
 801f488:	4770      	bx	lr

0801f48a <fabs>:
 801f48a:	ec51 0b10 	vmov	r0, r1, d0
 801f48e:	ee10 2a10 	vmov	r2, s0
 801f492:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801f496:	ec43 2b10 	vmov	d0, r2, r3
 801f49a:	4770      	bx	lr

0801f49c <finite>:
 801f49c:	b082      	sub	sp, #8
 801f49e:	ed8d 0b00 	vstr	d0, [sp]
 801f4a2:	9801      	ldr	r0, [sp, #4]
 801f4a4:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 801f4a8:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 801f4ac:	0fc0      	lsrs	r0, r0, #31
 801f4ae:	b002      	add	sp, #8
 801f4b0:	4770      	bx	lr
	...

0801f4b4 <rint>:
 801f4b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801f4b6:	ec51 0b10 	vmov	r0, r1, d0
 801f4ba:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801f4be:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 801f4c2:	2e13      	cmp	r6, #19
 801f4c4:	ee10 4a10 	vmov	r4, s0
 801f4c8:	460b      	mov	r3, r1
 801f4ca:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 801f4ce:	dc58      	bgt.n	801f582 <rint+0xce>
 801f4d0:	2e00      	cmp	r6, #0
 801f4d2:	da2b      	bge.n	801f52c <rint+0x78>
 801f4d4:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 801f4d8:	4302      	orrs	r2, r0
 801f4da:	d023      	beq.n	801f524 <rint+0x70>
 801f4dc:	f3c1 0213 	ubfx	r2, r1, #0, #20
 801f4e0:	4302      	orrs	r2, r0
 801f4e2:	4254      	negs	r4, r2
 801f4e4:	4314      	orrs	r4, r2
 801f4e6:	0c4b      	lsrs	r3, r1, #17
 801f4e8:	0b24      	lsrs	r4, r4, #12
 801f4ea:	045b      	lsls	r3, r3, #17
 801f4ec:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 801f4f0:	ea44 0103 	orr.w	r1, r4, r3
 801f4f4:	4b32      	ldr	r3, [pc, #200]	; (801f5c0 <rint+0x10c>)
 801f4f6:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801f4fa:	e9d3 6700 	ldrd	r6, r7, [r3]
 801f4fe:	4602      	mov	r2, r0
 801f500:	460b      	mov	r3, r1
 801f502:	4630      	mov	r0, r6
 801f504:	4639      	mov	r1, r7
 801f506:	f7e4 ff51 	bl	80043ac <__adddf3>
 801f50a:	e9cd 0100 	strd	r0, r1, [sp]
 801f50e:	463b      	mov	r3, r7
 801f510:	e9dd 0100 	ldrd	r0, r1, [sp]
 801f514:	4632      	mov	r2, r6
 801f516:	f7e4 ff47 	bl	80043a8 <__aeabi_dsub>
 801f51a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801f51e:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 801f522:	4639      	mov	r1, r7
 801f524:	ec41 0b10 	vmov	d0, r0, r1
 801f528:	b003      	add	sp, #12
 801f52a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f52c:	4a25      	ldr	r2, [pc, #148]	; (801f5c4 <rint+0x110>)
 801f52e:	4132      	asrs	r2, r6
 801f530:	ea01 0702 	and.w	r7, r1, r2
 801f534:	4307      	orrs	r7, r0
 801f536:	d0f5      	beq.n	801f524 <rint+0x70>
 801f538:	0851      	lsrs	r1, r2, #1
 801f53a:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 801f53e:	4314      	orrs	r4, r2
 801f540:	d00c      	beq.n	801f55c <rint+0xa8>
 801f542:	ea23 0201 	bic.w	r2, r3, r1
 801f546:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 801f54a:	2e13      	cmp	r6, #19
 801f54c:	fa43 f606 	asr.w	r6, r3, r6
 801f550:	bf0c      	ite	eq
 801f552:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 801f556:	2400      	movne	r4, #0
 801f558:	ea42 0306 	orr.w	r3, r2, r6
 801f55c:	4918      	ldr	r1, [pc, #96]	; (801f5c0 <rint+0x10c>)
 801f55e:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 801f562:	4622      	mov	r2, r4
 801f564:	e9d5 4500 	ldrd	r4, r5, [r5]
 801f568:	4620      	mov	r0, r4
 801f56a:	4629      	mov	r1, r5
 801f56c:	f7e4 ff1e 	bl	80043ac <__adddf3>
 801f570:	e9cd 0100 	strd	r0, r1, [sp]
 801f574:	e9dd 0100 	ldrd	r0, r1, [sp]
 801f578:	4622      	mov	r2, r4
 801f57a:	462b      	mov	r3, r5
 801f57c:	f7e4 ff14 	bl	80043a8 <__aeabi_dsub>
 801f580:	e7d0      	b.n	801f524 <rint+0x70>
 801f582:	2e33      	cmp	r6, #51	; 0x33
 801f584:	dd07      	ble.n	801f596 <rint+0xe2>
 801f586:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801f58a:	d1cb      	bne.n	801f524 <rint+0x70>
 801f58c:	ee10 2a10 	vmov	r2, s0
 801f590:	f7e4 ff0c 	bl	80043ac <__adddf3>
 801f594:	e7c6      	b.n	801f524 <rint+0x70>
 801f596:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 801f59a:	f04f 36ff 	mov.w	r6, #4294967295
 801f59e:	40d6      	lsrs	r6, r2
 801f5a0:	4230      	tst	r0, r6
 801f5a2:	d0bf      	beq.n	801f524 <rint+0x70>
 801f5a4:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 801f5a8:	ea4f 0156 	mov.w	r1, r6, lsr #1
 801f5ac:	bf1f      	itttt	ne
 801f5ae:	ea24 0101 	bicne.w	r1, r4, r1
 801f5b2:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 801f5b6:	fa44 f202 	asrne.w	r2, r4, r2
 801f5ba:	ea41 0402 	orrne.w	r4, r1, r2
 801f5be:	e7cd      	b.n	801f55c <rint+0xa8>
 801f5c0:	08037bb8 	.word	0x08037bb8
 801f5c4:	000fffff 	.word	0x000fffff

0801f5c8 <scalbn>:
 801f5c8:	b570      	push	{r4, r5, r6, lr}
 801f5ca:	ec55 4b10 	vmov	r4, r5, d0
 801f5ce:	f3c5 520a 	ubfx	r2, r5, #20, #11
 801f5d2:	4606      	mov	r6, r0
 801f5d4:	462b      	mov	r3, r5
 801f5d6:	b99a      	cbnz	r2, 801f600 <scalbn+0x38>
 801f5d8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801f5dc:	4323      	orrs	r3, r4
 801f5de:	d036      	beq.n	801f64e <scalbn+0x86>
 801f5e0:	4b39      	ldr	r3, [pc, #228]	; (801f6c8 <scalbn+0x100>)
 801f5e2:	4629      	mov	r1, r5
 801f5e4:	ee10 0a10 	vmov	r0, s0
 801f5e8:	2200      	movs	r2, #0
 801f5ea:	f7e5 f895 	bl	8004718 <__aeabi_dmul>
 801f5ee:	4b37      	ldr	r3, [pc, #220]	; (801f6cc <scalbn+0x104>)
 801f5f0:	429e      	cmp	r6, r3
 801f5f2:	4604      	mov	r4, r0
 801f5f4:	460d      	mov	r5, r1
 801f5f6:	da10      	bge.n	801f61a <scalbn+0x52>
 801f5f8:	a32b      	add	r3, pc, #172	; (adr r3, 801f6a8 <scalbn+0xe0>)
 801f5fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f5fe:	e03a      	b.n	801f676 <scalbn+0xae>
 801f600:	f240 71ff 	movw	r1, #2047	; 0x7ff
 801f604:	428a      	cmp	r2, r1
 801f606:	d10c      	bne.n	801f622 <scalbn+0x5a>
 801f608:	ee10 2a10 	vmov	r2, s0
 801f60c:	4620      	mov	r0, r4
 801f60e:	4629      	mov	r1, r5
 801f610:	f7e4 fecc 	bl	80043ac <__adddf3>
 801f614:	4604      	mov	r4, r0
 801f616:	460d      	mov	r5, r1
 801f618:	e019      	b.n	801f64e <scalbn+0x86>
 801f61a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801f61e:	460b      	mov	r3, r1
 801f620:	3a36      	subs	r2, #54	; 0x36
 801f622:	4432      	add	r2, r6
 801f624:	f240 71fe 	movw	r1, #2046	; 0x7fe
 801f628:	428a      	cmp	r2, r1
 801f62a:	dd08      	ble.n	801f63e <scalbn+0x76>
 801f62c:	2d00      	cmp	r5, #0
 801f62e:	a120      	add	r1, pc, #128	; (adr r1, 801f6b0 <scalbn+0xe8>)
 801f630:	e9d1 0100 	ldrd	r0, r1, [r1]
 801f634:	da1c      	bge.n	801f670 <scalbn+0xa8>
 801f636:	a120      	add	r1, pc, #128	; (adr r1, 801f6b8 <scalbn+0xf0>)
 801f638:	e9d1 0100 	ldrd	r0, r1, [r1]
 801f63c:	e018      	b.n	801f670 <scalbn+0xa8>
 801f63e:	2a00      	cmp	r2, #0
 801f640:	dd08      	ble.n	801f654 <scalbn+0x8c>
 801f642:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801f646:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801f64a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801f64e:	ec45 4b10 	vmov	d0, r4, r5
 801f652:	bd70      	pop	{r4, r5, r6, pc}
 801f654:	f112 0f35 	cmn.w	r2, #53	; 0x35
 801f658:	da19      	bge.n	801f68e <scalbn+0xc6>
 801f65a:	f24c 3350 	movw	r3, #50000	; 0xc350
 801f65e:	429e      	cmp	r6, r3
 801f660:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 801f664:	dd0a      	ble.n	801f67c <scalbn+0xb4>
 801f666:	a112      	add	r1, pc, #72	; (adr r1, 801f6b0 <scalbn+0xe8>)
 801f668:	e9d1 0100 	ldrd	r0, r1, [r1]
 801f66c:	2b00      	cmp	r3, #0
 801f66e:	d1e2      	bne.n	801f636 <scalbn+0x6e>
 801f670:	a30f      	add	r3, pc, #60	; (adr r3, 801f6b0 <scalbn+0xe8>)
 801f672:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f676:	f7e5 f84f 	bl	8004718 <__aeabi_dmul>
 801f67a:	e7cb      	b.n	801f614 <scalbn+0x4c>
 801f67c:	a10a      	add	r1, pc, #40	; (adr r1, 801f6a8 <scalbn+0xe0>)
 801f67e:	e9d1 0100 	ldrd	r0, r1, [r1]
 801f682:	2b00      	cmp	r3, #0
 801f684:	d0b8      	beq.n	801f5f8 <scalbn+0x30>
 801f686:	a10e      	add	r1, pc, #56	; (adr r1, 801f6c0 <scalbn+0xf8>)
 801f688:	e9d1 0100 	ldrd	r0, r1, [r1]
 801f68c:	e7b4      	b.n	801f5f8 <scalbn+0x30>
 801f68e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801f692:	3236      	adds	r2, #54	; 0x36
 801f694:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801f698:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 801f69c:	4620      	mov	r0, r4
 801f69e:	4b0c      	ldr	r3, [pc, #48]	; (801f6d0 <scalbn+0x108>)
 801f6a0:	2200      	movs	r2, #0
 801f6a2:	e7e8      	b.n	801f676 <scalbn+0xae>
 801f6a4:	f3af 8000 	nop.w
 801f6a8:	c2f8f359 	.word	0xc2f8f359
 801f6ac:	01a56e1f 	.word	0x01a56e1f
 801f6b0:	8800759c 	.word	0x8800759c
 801f6b4:	7e37e43c 	.word	0x7e37e43c
 801f6b8:	8800759c 	.word	0x8800759c
 801f6bc:	fe37e43c 	.word	0xfe37e43c
 801f6c0:	c2f8f359 	.word	0xc2f8f359
 801f6c4:	81a56e1f 	.word	0x81a56e1f
 801f6c8:	43500000 	.word	0x43500000
 801f6cc:	ffff3cb0 	.word	0xffff3cb0
 801f6d0:	3c900000 	.word	0x3c900000

0801f6d4 <fabsf>:
 801f6d4:	ee10 3a10 	vmov	r3, s0
 801f6d8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801f6dc:	ee00 3a10 	vmov	s0, r3
 801f6e0:	4770      	bx	lr

0801f6e2 <finitef>:
 801f6e2:	b082      	sub	sp, #8
 801f6e4:	ed8d 0a01 	vstr	s0, [sp, #4]
 801f6e8:	9801      	ldr	r0, [sp, #4]
 801f6ea:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801f6ee:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 801f6f2:	bfac      	ite	ge
 801f6f4:	2000      	movge	r0, #0
 801f6f6:	2001      	movlt	r0, #1
 801f6f8:	b002      	add	sp, #8
 801f6fa:	4770      	bx	lr

0801f6fc <rintf>:
 801f6fc:	ee10 2a10 	vmov	r2, s0
 801f700:	b513      	push	{r0, r1, r4, lr}
 801f702:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 801f706:	397f      	subs	r1, #127	; 0x7f
 801f708:	2916      	cmp	r1, #22
 801f70a:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 801f70e:	dc47      	bgt.n	801f7a0 <rintf+0xa4>
 801f710:	b32b      	cbz	r3, 801f75e <rintf+0x62>
 801f712:	2900      	cmp	r1, #0
 801f714:	ee10 3a10 	vmov	r3, s0
 801f718:	ea4f 70d2 	mov.w	r0, r2, lsr #31
 801f71c:	da21      	bge.n	801f762 <rintf+0x66>
 801f71e:	f3c2 0316 	ubfx	r3, r2, #0, #23
 801f722:	425b      	negs	r3, r3
 801f724:	4921      	ldr	r1, [pc, #132]	; (801f7ac <rintf+0xb0>)
 801f726:	0a5b      	lsrs	r3, r3, #9
 801f728:	0d12      	lsrs	r2, r2, #20
 801f72a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801f72e:	0512      	lsls	r2, r2, #20
 801f730:	4313      	orrs	r3, r2
 801f732:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 801f736:	ee07 3a90 	vmov	s15, r3
 801f73a:	edd1 6a00 	vldr	s13, [r1]
 801f73e:	ee36 7aa7 	vadd.f32	s14, s13, s15
 801f742:	ed8d 7a01 	vstr	s14, [sp, #4]
 801f746:	eddd 7a01 	vldr	s15, [sp, #4]
 801f74a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801f74e:	ee17 3a90 	vmov	r3, s15
 801f752:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801f756:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
 801f75a:	ee00 3a10 	vmov	s0, r3
 801f75e:	b002      	add	sp, #8
 801f760:	bd10      	pop	{r4, pc}
 801f762:	4a13      	ldr	r2, [pc, #76]	; (801f7b0 <rintf+0xb4>)
 801f764:	410a      	asrs	r2, r1
 801f766:	4213      	tst	r3, r2
 801f768:	d0f9      	beq.n	801f75e <rintf+0x62>
 801f76a:	0854      	lsrs	r4, r2, #1
 801f76c:	ea13 0252 	ands.w	r2, r3, r2, lsr #1
 801f770:	d006      	beq.n	801f780 <rintf+0x84>
 801f772:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 801f776:	ea23 0304 	bic.w	r3, r3, r4
 801f77a:	fa42 f101 	asr.w	r1, r2, r1
 801f77e:	430b      	orrs	r3, r1
 801f780:	4a0a      	ldr	r2, [pc, #40]	; (801f7ac <rintf+0xb0>)
 801f782:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 801f786:	ed90 7a00 	vldr	s14, [r0]
 801f78a:	ee07 3a90 	vmov	s15, r3
 801f78e:	ee77 7a27 	vadd.f32	s15, s14, s15
 801f792:	edcd 7a01 	vstr	s15, [sp, #4]
 801f796:	ed9d 0a01 	vldr	s0, [sp, #4]
 801f79a:	ee30 0a47 	vsub.f32	s0, s0, s14
 801f79e:	e7de      	b.n	801f75e <rintf+0x62>
 801f7a0:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801f7a4:	d3db      	bcc.n	801f75e <rintf+0x62>
 801f7a6:	ee30 0a00 	vadd.f32	s0, s0, s0
 801f7aa:	e7d8      	b.n	801f75e <rintf+0x62>
 801f7ac:	08037bc8 	.word	0x08037bc8
 801f7b0:	007fffff 	.word	0x007fffff

0801f7b4 <scalbnf>:
 801f7b4:	ee10 3a10 	vmov	r3, s0
 801f7b8:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 801f7bc:	d025      	beq.n	801f80a <scalbnf+0x56>
 801f7be:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 801f7c2:	d302      	bcc.n	801f7ca <scalbnf+0x16>
 801f7c4:	ee30 0a00 	vadd.f32	s0, s0, s0
 801f7c8:	4770      	bx	lr
 801f7ca:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 801f7ce:	d122      	bne.n	801f816 <scalbnf+0x62>
 801f7d0:	4b2a      	ldr	r3, [pc, #168]	; (801f87c <scalbnf+0xc8>)
 801f7d2:	eddf 7a2b 	vldr	s15, [pc, #172]	; 801f880 <scalbnf+0xcc>
 801f7d6:	4298      	cmp	r0, r3
 801f7d8:	ee20 0a27 	vmul.f32	s0, s0, s15
 801f7dc:	db16      	blt.n	801f80c <scalbnf+0x58>
 801f7de:	ee10 3a10 	vmov	r3, s0
 801f7e2:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801f7e6:	3a19      	subs	r2, #25
 801f7e8:	4402      	add	r2, r0
 801f7ea:	2afe      	cmp	r2, #254	; 0xfe
 801f7ec:	dd15      	ble.n	801f81a <scalbnf+0x66>
 801f7ee:	ee10 3a10 	vmov	r3, s0
 801f7f2:	eddf 7a24 	vldr	s15, [pc, #144]	; 801f884 <scalbnf+0xd0>
 801f7f6:	eddf 6a24 	vldr	s13, [pc, #144]	; 801f888 <scalbnf+0xd4>
 801f7fa:	2b00      	cmp	r3, #0
 801f7fc:	eeb0 7a67 	vmov.f32	s14, s15
 801f800:	bfb8      	it	lt
 801f802:	eef0 7a66 	vmovlt.f32	s15, s13
 801f806:	ee27 0a27 	vmul.f32	s0, s14, s15
 801f80a:	4770      	bx	lr
 801f80c:	eddf 7a1f 	vldr	s15, [pc, #124]	; 801f88c <scalbnf+0xd8>
 801f810:	ee20 0a27 	vmul.f32	s0, s0, s15
 801f814:	4770      	bx	lr
 801f816:	0dd2      	lsrs	r2, r2, #23
 801f818:	e7e6      	b.n	801f7e8 <scalbnf+0x34>
 801f81a:	2a00      	cmp	r2, #0
 801f81c:	dd06      	ble.n	801f82c <scalbnf+0x78>
 801f81e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801f822:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 801f826:	ee00 3a10 	vmov	s0, r3
 801f82a:	4770      	bx	lr
 801f82c:	f112 0f16 	cmn.w	r2, #22
 801f830:	da1a      	bge.n	801f868 <scalbnf+0xb4>
 801f832:	f24c 3350 	movw	r3, #50000	; 0xc350
 801f836:	4298      	cmp	r0, r3
 801f838:	ee10 3a10 	vmov	r3, s0
 801f83c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801f840:	dd0a      	ble.n	801f858 <scalbnf+0xa4>
 801f842:	ed9f 0a10 	vldr	s0, [pc, #64]	; 801f884 <scalbnf+0xd0>
 801f846:	ed9f 7a10 	vldr	s14, [pc, #64]	; 801f888 <scalbnf+0xd4>
 801f84a:	eef0 7a40 	vmov.f32	s15, s0
 801f84e:	2b00      	cmp	r3, #0
 801f850:	bf18      	it	ne
 801f852:	eeb0 0a47 	vmovne.f32	s0, s14
 801f856:	e7db      	b.n	801f810 <scalbnf+0x5c>
 801f858:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 801f88c <scalbnf+0xd8>
 801f85c:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 801f890 <scalbnf+0xdc>
 801f860:	eef0 7a40 	vmov.f32	s15, s0
 801f864:	2b00      	cmp	r3, #0
 801f866:	e7f3      	b.n	801f850 <scalbnf+0x9c>
 801f868:	3219      	adds	r2, #25
 801f86a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801f86e:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 801f872:	eddf 7a08 	vldr	s15, [pc, #32]	; 801f894 <scalbnf+0xe0>
 801f876:	ee07 3a10 	vmov	s14, r3
 801f87a:	e7c4      	b.n	801f806 <scalbnf+0x52>
 801f87c:	ffff3cb0 	.word	0xffff3cb0
 801f880:	4c000000 	.word	0x4c000000
 801f884:	7149f2ca 	.word	0x7149f2ca
 801f888:	f149f2ca 	.word	0xf149f2ca
 801f88c:	0da24260 	.word	0x0da24260
 801f890:	8da24260 	.word	0x8da24260
 801f894:	33000000 	.word	0x33000000

0801f898 <__ieee754_logf>:
 801f898:	ee10 3a10 	vmov	r3, s0
 801f89c:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 801f8a0:	d106      	bne.n	801f8b0 <__ieee754_logf+0x18>
 801f8a2:	ed9f 7a65 	vldr	s14, [pc, #404]	; 801fa38 <__ieee754_logf+0x1a0>
 801f8a6:	eddf 7a65 	vldr	s15, [pc, #404]	; 801fa3c <__ieee754_logf+0x1a4>
 801f8aa:	ee87 0a27 	vdiv.f32	s0, s14, s15
 801f8ae:	4770      	bx	lr
 801f8b0:	2b00      	cmp	r3, #0
 801f8b2:	da02      	bge.n	801f8ba <__ieee754_logf+0x22>
 801f8b4:	ee30 7a40 	vsub.f32	s14, s0, s0
 801f8b8:	e7f5      	b.n	801f8a6 <__ieee754_logf+0xe>
 801f8ba:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801f8be:	db02      	blt.n	801f8c6 <__ieee754_logf+0x2e>
 801f8c0:	ee30 0a00 	vadd.f32	s0, s0, s0
 801f8c4:	4770      	bx	lr
 801f8c6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 801f8ca:	bfb8      	it	lt
 801f8cc:	eddf 7a5c 	vldrlt	s15, [pc, #368]	; 801fa40 <__ieee754_logf+0x1a8>
 801f8d0:	485c      	ldr	r0, [pc, #368]	; (801fa44 <__ieee754_logf+0x1ac>)
 801f8d2:	bfbe      	ittt	lt
 801f8d4:	ee60 7a27 	vmullt.f32	s15, s0, s15
 801f8d8:	f06f 0118 	mvnlt.w	r1, #24
 801f8dc:	ee17 3a90 	vmovlt	r3, s15
 801f8e0:	ea4f 52e3 	mov.w	r2, r3, asr #23
 801f8e4:	f3c3 0316 	ubfx	r3, r3, #0, #23
 801f8e8:	4418      	add	r0, r3
 801f8ea:	bfa8      	it	ge
 801f8ec:	2100      	movge	r1, #0
 801f8ee:	3a7f      	subs	r2, #127	; 0x7f
 801f8f0:	440a      	add	r2, r1
 801f8f2:	f400 0100 	and.w	r1, r0, #8388608	; 0x800000
 801f8f6:	f081 517e 	eor.w	r1, r1, #1065353216	; 0x3f800000
 801f8fa:	4319      	orrs	r1, r3
 801f8fc:	ee00 1a10 	vmov	s0, r1
 801f900:	4951      	ldr	r1, [pc, #324]	; (801fa48 <__ieee754_logf+0x1b0>)
 801f902:	eb02 52d0 	add.w	r2, r2, r0, lsr #23
 801f906:	f103 000f 	add.w	r0, r3, #15
 801f90a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801f90e:	4001      	ands	r1, r0
 801f910:	ee30 0a67 	vsub.f32	s0, s0, s15
 801f914:	bb89      	cbnz	r1, 801f97a <__ieee754_logf+0xe2>
 801f916:	eeb5 0a40 	vcmp.f32	s0, #0.0
 801f91a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f91e:	d10f      	bne.n	801f940 <__ieee754_logf+0xa8>
 801f920:	2a00      	cmp	r2, #0
 801f922:	f000 8085 	beq.w	801fa30 <__ieee754_logf+0x198>
 801f926:	ee07 2a90 	vmov	s15, r2
 801f92a:	ed9f 0a48 	vldr	s0, [pc, #288]	; 801fa4c <__ieee754_logf+0x1b4>
 801f92e:	ed9f 7a48 	vldr	s14, [pc, #288]	; 801fa50 <__ieee754_logf+0x1b8>
 801f932:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801f936:	ee27 0a80 	vmul.f32	s0, s15, s0
 801f93a:	eea7 0a87 	vfma.f32	s0, s15, s14
 801f93e:	4770      	bx	lr
 801f940:	eddf 6a44 	vldr	s13, [pc, #272]	; 801fa54 <__ieee754_logf+0x1bc>
 801f944:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801f948:	eee0 7a66 	vfms.f32	s15, s0, s13
 801f94c:	ee20 7a00 	vmul.f32	s14, s0, s0
 801f950:	ee27 7a27 	vmul.f32	s14, s14, s15
 801f954:	b912      	cbnz	r2, 801f95c <__ieee754_logf+0xc4>
 801f956:	ee30 0a47 	vsub.f32	s0, s0, s14
 801f95a:	4770      	bx	lr
 801f95c:	ee07 2a90 	vmov	s15, r2
 801f960:	eddf 6a3a 	vldr	s13, [pc, #232]	; 801fa4c <__ieee754_logf+0x1b4>
 801f964:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801f968:	eea7 7ae6 	vfms.f32	s14, s15, s13
 801f96c:	ee37 0a40 	vsub.f32	s0, s14, s0
 801f970:	ed9f 7a37 	vldr	s14, [pc, #220]	; 801fa50 <__ieee754_logf+0x1b8>
 801f974:	ee97 0a87 	vfnms.f32	s0, s15, s14
 801f978:	4770      	bx	lr
 801f97a:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 801f97e:	ee70 7a27 	vadd.f32	s15, s0, s15
 801f982:	eddf 5a35 	vldr	s11, [pc, #212]	; 801fa58 <__ieee754_logf+0x1c0>
 801f986:	eddf 4a35 	vldr	s9, [pc, #212]	; 801fa5c <__ieee754_logf+0x1c4>
 801f98a:	4935      	ldr	r1, [pc, #212]	; (801fa60 <__ieee754_logf+0x1c8>)
 801f98c:	ee80 6a27 	vdiv.f32	s12, s0, s15
 801f990:	4419      	add	r1, r3
 801f992:	f5c3 1357 	rsb	r3, r3, #3522560	; 0x35c000
 801f996:	f503 7322 	add.w	r3, r3, #648	; 0x288
 801f99a:	430b      	orrs	r3, r1
 801f99c:	2b00      	cmp	r3, #0
 801f99e:	ee07 2a90 	vmov	s15, r2
 801f9a2:	ee26 5a06 	vmul.f32	s10, s12, s12
 801f9a6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 801f9aa:	ee25 7a05 	vmul.f32	s14, s10, s10
 801f9ae:	eddf 7a2d 	vldr	s15, [pc, #180]	; 801fa64 <__ieee754_logf+0x1cc>
 801f9b2:	eee7 7a25 	vfma.f32	s15, s14, s11
 801f9b6:	eddf 5a2c 	vldr	s11, [pc, #176]	; 801fa68 <__ieee754_logf+0x1d0>
 801f9ba:	eee7 5a87 	vfma.f32	s11, s15, s14
 801f9be:	eddf 7a2b 	vldr	s15, [pc, #172]	; 801fa6c <__ieee754_logf+0x1d4>
 801f9c2:	eee7 7a24 	vfma.f32	s15, s14, s9
 801f9c6:	eddf 4a2a 	vldr	s9, [pc, #168]	; 801fa70 <__ieee754_logf+0x1d8>
 801f9ca:	eee7 4a87 	vfma.f32	s9, s15, s14
 801f9ce:	eddf 7a29 	vldr	s15, [pc, #164]	; 801fa74 <__ieee754_logf+0x1dc>
 801f9d2:	eee4 7a87 	vfma.f32	s15, s9, s14
 801f9d6:	ee67 7a85 	vmul.f32	s15, s15, s10
 801f9da:	eee5 7a87 	vfma.f32	s15, s11, s14
 801f9de:	dd1c      	ble.n	801fa1a <__ieee754_logf+0x182>
 801f9e0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 801f9e4:	ee20 7a07 	vmul.f32	s14, s0, s14
 801f9e8:	ee27 7a00 	vmul.f32	s14, s14, s0
 801f9ec:	ee77 7a87 	vadd.f32	s15, s15, s14
 801f9f0:	ee67 7a86 	vmul.f32	s15, s15, s12
 801f9f4:	b922      	cbnz	r2, 801fa00 <__ieee754_logf+0x168>
 801f9f6:	ee77 7a67 	vsub.f32	s15, s14, s15
 801f9fa:	ee30 0a67 	vsub.f32	s0, s0, s15
 801f9fe:	4770      	bx	lr
 801fa00:	ed9f 6a12 	vldr	s12, [pc, #72]	; 801fa4c <__ieee754_logf+0x1b4>
 801fa04:	eee6 7a86 	vfma.f32	s15, s13, s12
 801fa08:	ee77 7a67 	vsub.f32	s15, s14, s15
 801fa0c:	ee37 0ac0 	vsub.f32	s0, s15, s0
 801fa10:	eddf 7a0f 	vldr	s15, [pc, #60]	; 801fa50 <__ieee754_logf+0x1b8>
 801fa14:	ee96 0aa7 	vfnms.f32	s0, s13, s15
 801fa18:	4770      	bx	lr
 801fa1a:	ee70 7a67 	vsub.f32	s15, s0, s15
 801fa1e:	ee67 7a86 	vmul.f32	s15, s15, s12
 801fa22:	2a00      	cmp	r2, #0
 801fa24:	d0e9      	beq.n	801f9fa <__ieee754_logf+0x162>
 801fa26:	ed9f 7a09 	vldr	s14, [pc, #36]	; 801fa4c <__ieee754_logf+0x1b4>
 801fa2a:	eee6 7ac7 	vfms.f32	s15, s13, s14
 801fa2e:	e7ed      	b.n	801fa0c <__ieee754_logf+0x174>
 801fa30:	ed9f 0a02 	vldr	s0, [pc, #8]	; 801fa3c <__ieee754_logf+0x1a4>
 801fa34:	4770      	bx	lr
 801fa36:	bf00      	nop
 801fa38:	cc000000 	.word	0xcc000000
 801fa3c:	00000000 	.word	0x00000000
 801fa40:	4c000000 	.word	0x4c000000
 801fa44:	004afb20 	.word	0x004afb20
 801fa48:	007ffff0 	.word	0x007ffff0
 801fa4c:	3717f7d1 	.word	0x3717f7d1
 801fa50:	3f317180 	.word	0x3f317180
 801fa54:	3eaaaaab 	.word	0x3eaaaaab
 801fa58:	3e1cd04f 	.word	0x3e1cd04f
 801fa5c:	3e178897 	.word	0x3e178897
 801fa60:	ffcf5c30 	.word	0xffcf5c30
 801fa64:	3e638e29 	.word	0x3e638e29
 801fa68:	3ecccccd 	.word	0x3ecccccd
 801fa6c:	3e3a3325 	.word	0x3e3a3325
 801fa70:	3e924925 	.word	0x3e924925
 801fa74:	3f2aaaab 	.word	0x3f2aaaab

0801fa78 <_init>:
 801fa78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801fa7a:	bf00      	nop
 801fa7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801fa7e:	bc08      	pop	{r3}
 801fa80:	469e      	mov	lr, r3
 801fa82:	4770      	bx	lr

0801fa84 <_fini>:
 801fa84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801fa86:	bf00      	nop
 801fa88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801fa8a:	bc08      	pop	{r3}
 801fa8c:	469e      	mov	lr, r3
 801fa8e:	4770      	bx	lr
