
ADXL345_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a230  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001b04  0800a3c0  0800a3c0  0001a3c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bec4  0800bec4  000201f0  2**0
                  CONTENTS
  4 .ARM          00000008  0800bec4  0800bec4  0001bec4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800becc  0800becc  000201f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800becc  0800becc  0001becc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bed0  0800bed0  0001bed0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  0800bed4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002f0  200001f0  0800c0c4  000201f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004e0  0800c0c4  000204e0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010a38  00000000  00000000  00020220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000261d  00000000  00000000  00030c58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d48  00000000  00000000  00033278  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c48  00000000  00000000  00033fc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027ca0  00000000  00000000  00034c08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e780  00000000  00000000  0005c8a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ede40  00000000  00000000  0006b028  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00158e68  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004af8  00000000  00000000  00158ebc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001f0 	.word	0x200001f0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a3a8 	.word	0x0800a3a8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001f4 	.word	0x200001f4
 80001cc:	0800a3a8 	.word	0x0800a3a8

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a4 	b.w	8000fe8 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468c      	mov	ip, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	f040 8083 	bne.w	8000e3a <__udivmoddi4+0x116>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4617      	mov	r7, r2
 8000d38:	d947      	bls.n	8000dca <__udivmoddi4+0xa6>
 8000d3a:	fab2 f282 	clz	r2, r2
 8000d3e:	b142      	cbz	r2, 8000d52 <__udivmoddi4+0x2e>
 8000d40:	f1c2 0020 	rsb	r0, r2, #32
 8000d44:	fa24 f000 	lsr.w	r0, r4, r0
 8000d48:	4091      	lsls	r1, r2
 8000d4a:	4097      	lsls	r7, r2
 8000d4c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d50:	4094      	lsls	r4, r2
 8000d52:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d56:	0c23      	lsrs	r3, r4, #16
 8000d58:	fbbc f6f8 	udiv	r6, ip, r8
 8000d5c:	fa1f fe87 	uxth.w	lr, r7
 8000d60:	fb08 c116 	mls	r1, r8, r6, ip
 8000d64:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d68:	fb06 f10e 	mul.w	r1, r6, lr
 8000d6c:	4299      	cmp	r1, r3
 8000d6e:	d909      	bls.n	8000d84 <__udivmoddi4+0x60>
 8000d70:	18fb      	adds	r3, r7, r3
 8000d72:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d76:	f080 8119 	bcs.w	8000fac <__udivmoddi4+0x288>
 8000d7a:	4299      	cmp	r1, r3
 8000d7c:	f240 8116 	bls.w	8000fac <__udivmoddi4+0x288>
 8000d80:	3e02      	subs	r6, #2
 8000d82:	443b      	add	r3, r7
 8000d84:	1a5b      	subs	r3, r3, r1
 8000d86:	b2a4      	uxth	r4, r4
 8000d88:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d8c:	fb08 3310 	mls	r3, r8, r0, r3
 8000d90:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d94:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d98:	45a6      	cmp	lr, r4
 8000d9a:	d909      	bls.n	8000db0 <__udivmoddi4+0x8c>
 8000d9c:	193c      	adds	r4, r7, r4
 8000d9e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da2:	f080 8105 	bcs.w	8000fb0 <__udivmoddi4+0x28c>
 8000da6:	45a6      	cmp	lr, r4
 8000da8:	f240 8102 	bls.w	8000fb0 <__udivmoddi4+0x28c>
 8000dac:	3802      	subs	r0, #2
 8000dae:	443c      	add	r4, r7
 8000db0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000db4:	eba4 040e 	sub.w	r4, r4, lr
 8000db8:	2600      	movs	r6, #0
 8000dba:	b11d      	cbz	r5, 8000dc4 <__udivmoddi4+0xa0>
 8000dbc:	40d4      	lsrs	r4, r2
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc4:	4631      	mov	r1, r6
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	b902      	cbnz	r2, 8000dce <__udivmoddi4+0xaa>
 8000dcc:	deff      	udf	#255	; 0xff
 8000dce:	fab2 f282 	clz	r2, r2
 8000dd2:	2a00      	cmp	r2, #0
 8000dd4:	d150      	bne.n	8000e78 <__udivmoddi4+0x154>
 8000dd6:	1bcb      	subs	r3, r1, r7
 8000dd8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ddc:	fa1f f887 	uxth.w	r8, r7
 8000de0:	2601      	movs	r6, #1
 8000de2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000de6:	0c21      	lsrs	r1, r4, #16
 8000de8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000dec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000df0:	fb08 f30c 	mul.w	r3, r8, ip
 8000df4:	428b      	cmp	r3, r1
 8000df6:	d907      	bls.n	8000e08 <__udivmoddi4+0xe4>
 8000df8:	1879      	adds	r1, r7, r1
 8000dfa:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000dfe:	d202      	bcs.n	8000e06 <__udivmoddi4+0xe2>
 8000e00:	428b      	cmp	r3, r1
 8000e02:	f200 80e9 	bhi.w	8000fd8 <__udivmoddi4+0x2b4>
 8000e06:	4684      	mov	ip, r0
 8000e08:	1ac9      	subs	r1, r1, r3
 8000e0a:	b2a3      	uxth	r3, r4
 8000e0c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e10:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e14:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e18:	fb08 f800 	mul.w	r8, r8, r0
 8000e1c:	45a0      	cmp	r8, r4
 8000e1e:	d907      	bls.n	8000e30 <__udivmoddi4+0x10c>
 8000e20:	193c      	adds	r4, r7, r4
 8000e22:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e26:	d202      	bcs.n	8000e2e <__udivmoddi4+0x10a>
 8000e28:	45a0      	cmp	r8, r4
 8000e2a:	f200 80d9 	bhi.w	8000fe0 <__udivmoddi4+0x2bc>
 8000e2e:	4618      	mov	r0, r3
 8000e30:	eba4 0408 	sub.w	r4, r4, r8
 8000e34:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e38:	e7bf      	b.n	8000dba <__udivmoddi4+0x96>
 8000e3a:	428b      	cmp	r3, r1
 8000e3c:	d909      	bls.n	8000e52 <__udivmoddi4+0x12e>
 8000e3e:	2d00      	cmp	r5, #0
 8000e40:	f000 80b1 	beq.w	8000fa6 <__udivmoddi4+0x282>
 8000e44:	2600      	movs	r6, #0
 8000e46:	e9c5 0100 	strd	r0, r1, [r5]
 8000e4a:	4630      	mov	r0, r6
 8000e4c:	4631      	mov	r1, r6
 8000e4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e52:	fab3 f683 	clz	r6, r3
 8000e56:	2e00      	cmp	r6, #0
 8000e58:	d14a      	bne.n	8000ef0 <__udivmoddi4+0x1cc>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d302      	bcc.n	8000e64 <__udivmoddi4+0x140>
 8000e5e:	4282      	cmp	r2, r0
 8000e60:	f200 80b8 	bhi.w	8000fd4 <__udivmoddi4+0x2b0>
 8000e64:	1a84      	subs	r4, r0, r2
 8000e66:	eb61 0103 	sbc.w	r1, r1, r3
 8000e6a:	2001      	movs	r0, #1
 8000e6c:	468c      	mov	ip, r1
 8000e6e:	2d00      	cmp	r5, #0
 8000e70:	d0a8      	beq.n	8000dc4 <__udivmoddi4+0xa0>
 8000e72:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e76:	e7a5      	b.n	8000dc4 <__udivmoddi4+0xa0>
 8000e78:	f1c2 0320 	rsb	r3, r2, #32
 8000e7c:	fa20 f603 	lsr.w	r6, r0, r3
 8000e80:	4097      	lsls	r7, r2
 8000e82:	fa01 f002 	lsl.w	r0, r1, r2
 8000e86:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e8a:	40d9      	lsrs	r1, r3
 8000e8c:	4330      	orrs	r0, r6
 8000e8e:	0c03      	lsrs	r3, r0, #16
 8000e90:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e94:	fa1f f887 	uxth.w	r8, r7
 8000e98:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e9c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ea0:	fb06 f108 	mul.w	r1, r6, r8
 8000ea4:	4299      	cmp	r1, r3
 8000ea6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eaa:	d909      	bls.n	8000ec0 <__udivmoddi4+0x19c>
 8000eac:	18fb      	adds	r3, r7, r3
 8000eae:	f106 3cff 	add.w	ip, r6, #4294967295
 8000eb2:	f080 808d 	bcs.w	8000fd0 <__udivmoddi4+0x2ac>
 8000eb6:	4299      	cmp	r1, r3
 8000eb8:	f240 808a 	bls.w	8000fd0 <__udivmoddi4+0x2ac>
 8000ebc:	3e02      	subs	r6, #2
 8000ebe:	443b      	add	r3, r7
 8000ec0:	1a5b      	subs	r3, r3, r1
 8000ec2:	b281      	uxth	r1, r0
 8000ec4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ec8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ecc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ed0:	fb00 f308 	mul.w	r3, r0, r8
 8000ed4:	428b      	cmp	r3, r1
 8000ed6:	d907      	bls.n	8000ee8 <__udivmoddi4+0x1c4>
 8000ed8:	1879      	adds	r1, r7, r1
 8000eda:	f100 3cff 	add.w	ip, r0, #4294967295
 8000ede:	d273      	bcs.n	8000fc8 <__udivmoddi4+0x2a4>
 8000ee0:	428b      	cmp	r3, r1
 8000ee2:	d971      	bls.n	8000fc8 <__udivmoddi4+0x2a4>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	4439      	add	r1, r7
 8000ee8:	1acb      	subs	r3, r1, r3
 8000eea:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000eee:	e778      	b.n	8000de2 <__udivmoddi4+0xbe>
 8000ef0:	f1c6 0c20 	rsb	ip, r6, #32
 8000ef4:	fa03 f406 	lsl.w	r4, r3, r6
 8000ef8:	fa22 f30c 	lsr.w	r3, r2, ip
 8000efc:	431c      	orrs	r4, r3
 8000efe:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f02:	fa01 f306 	lsl.w	r3, r1, r6
 8000f06:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f0a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f0e:	431f      	orrs	r7, r3
 8000f10:	0c3b      	lsrs	r3, r7, #16
 8000f12:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f16:	fa1f f884 	uxth.w	r8, r4
 8000f1a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f1e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f22:	fb09 fa08 	mul.w	sl, r9, r8
 8000f26:	458a      	cmp	sl, r1
 8000f28:	fa02 f206 	lsl.w	r2, r2, r6
 8000f2c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f30:	d908      	bls.n	8000f44 <__udivmoddi4+0x220>
 8000f32:	1861      	adds	r1, r4, r1
 8000f34:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f38:	d248      	bcs.n	8000fcc <__udivmoddi4+0x2a8>
 8000f3a:	458a      	cmp	sl, r1
 8000f3c:	d946      	bls.n	8000fcc <__udivmoddi4+0x2a8>
 8000f3e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f42:	4421      	add	r1, r4
 8000f44:	eba1 010a 	sub.w	r1, r1, sl
 8000f48:	b2bf      	uxth	r7, r7
 8000f4a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f4e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f52:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f56:	fb00 f808 	mul.w	r8, r0, r8
 8000f5a:	45b8      	cmp	r8, r7
 8000f5c:	d907      	bls.n	8000f6e <__udivmoddi4+0x24a>
 8000f5e:	19e7      	adds	r7, r4, r7
 8000f60:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f64:	d22e      	bcs.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f66:	45b8      	cmp	r8, r7
 8000f68:	d92c      	bls.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f6a:	3802      	subs	r0, #2
 8000f6c:	4427      	add	r7, r4
 8000f6e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f72:	eba7 0708 	sub.w	r7, r7, r8
 8000f76:	fba0 8902 	umull	r8, r9, r0, r2
 8000f7a:	454f      	cmp	r7, r9
 8000f7c:	46c6      	mov	lr, r8
 8000f7e:	4649      	mov	r1, r9
 8000f80:	d31a      	bcc.n	8000fb8 <__udivmoddi4+0x294>
 8000f82:	d017      	beq.n	8000fb4 <__udivmoddi4+0x290>
 8000f84:	b15d      	cbz	r5, 8000f9e <__udivmoddi4+0x27a>
 8000f86:	ebb3 020e 	subs.w	r2, r3, lr
 8000f8a:	eb67 0701 	sbc.w	r7, r7, r1
 8000f8e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f92:	40f2      	lsrs	r2, r6
 8000f94:	ea4c 0202 	orr.w	r2, ip, r2
 8000f98:	40f7      	lsrs	r7, r6
 8000f9a:	e9c5 2700 	strd	r2, r7, [r5]
 8000f9e:	2600      	movs	r6, #0
 8000fa0:	4631      	mov	r1, r6
 8000fa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fa6:	462e      	mov	r6, r5
 8000fa8:	4628      	mov	r0, r5
 8000faa:	e70b      	b.n	8000dc4 <__udivmoddi4+0xa0>
 8000fac:	4606      	mov	r6, r0
 8000fae:	e6e9      	b.n	8000d84 <__udivmoddi4+0x60>
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	e6fd      	b.n	8000db0 <__udivmoddi4+0x8c>
 8000fb4:	4543      	cmp	r3, r8
 8000fb6:	d2e5      	bcs.n	8000f84 <__udivmoddi4+0x260>
 8000fb8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fbc:	eb69 0104 	sbc.w	r1, r9, r4
 8000fc0:	3801      	subs	r0, #1
 8000fc2:	e7df      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fc4:	4608      	mov	r0, r1
 8000fc6:	e7d2      	b.n	8000f6e <__udivmoddi4+0x24a>
 8000fc8:	4660      	mov	r0, ip
 8000fca:	e78d      	b.n	8000ee8 <__udivmoddi4+0x1c4>
 8000fcc:	4681      	mov	r9, r0
 8000fce:	e7b9      	b.n	8000f44 <__udivmoddi4+0x220>
 8000fd0:	4666      	mov	r6, ip
 8000fd2:	e775      	b.n	8000ec0 <__udivmoddi4+0x19c>
 8000fd4:	4630      	mov	r0, r6
 8000fd6:	e74a      	b.n	8000e6e <__udivmoddi4+0x14a>
 8000fd8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fdc:	4439      	add	r1, r7
 8000fde:	e713      	b.n	8000e08 <__udivmoddi4+0xe4>
 8000fe0:	3802      	subs	r0, #2
 8000fe2:	443c      	add	r4, r7
 8000fe4:	e724      	b.n	8000e30 <__udivmoddi4+0x10c>
 8000fe6:	bf00      	nop

08000fe8 <__aeabi_idiv0>:
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop

08000fec <writeRegister>:
* @address: 8-bit address of register
* @value  : 8-bit value of corresponding register
* Since the register values to be written are 8-bit, there is no need to multiple writing
*/
static void writeRegister(uint8_t address,uint8_t value)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b082      	sub	sp, #8
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	460a      	mov	r2, r1
 8000ff6:	71fb      	strb	r3, [r7, #7]
 8000ff8:	4613      	mov	r3, r2
 8000ffa:	71bb      	strb	r3, [r7, #6]
		if (address > 63)
 8000ffc:	79fb      	ldrb	r3, [r7, #7]
 8000ffe:	2b3f      	cmp	r3, #63	; 0x3f
 8001000:	d901      	bls.n	8001006 <writeRegister+0x1a>
		address = 63;
 8001002:	233f      	movs	r3, #63	; 0x3f
 8001004:	71fb      	strb	r3, [r7, #7]
	
	// Setting R/W = 0, i.e.: Write Mode
    address &= ~(0x80);
 8001006:	79fb      	ldrb	r3, [r7, #7]
 8001008:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800100c:	b2db      	uxtb	r3, r3
 800100e:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(ADXLCS_GPIO_Port,ADXLCS_Pin,GPIO_PIN_RESET);
 8001010:	2200      	movs	r2, #0
 8001012:	2104      	movs	r1, #4
 8001014:	480b      	ldr	r0, [pc, #44]	; (8001044 <writeRegister+0x58>)
 8001016:	f001 fd4b 	bl	8002ab0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&SPIhandler,&address,1,10);
 800101a:	1df9      	adds	r1, r7, #7
 800101c:	230a      	movs	r3, #10
 800101e:	2201      	movs	r2, #1
 8001020:	4809      	ldr	r0, [pc, #36]	; (8001048 <writeRegister+0x5c>)
 8001022:	f003 f90c 	bl	800423e <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&SPIhandler,&value,1,10);
 8001026:	1db9      	adds	r1, r7, #6
 8001028:	230a      	movs	r3, #10
 800102a:	2201      	movs	r2, #1
 800102c:	4806      	ldr	r0, [pc, #24]	; (8001048 <writeRegister+0x5c>)
 800102e:	f003 f906 	bl	800423e <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(ADXLCS_GPIO_Port,ADXLCS_Pin,GPIO_PIN_SET);
 8001032:	2201      	movs	r2, #1
 8001034:	2104      	movs	r1, #4
 8001036:	4803      	ldr	r0, [pc, #12]	; (8001044 <writeRegister+0x58>)
 8001038:	f001 fd3a 	bl	8002ab0 <HAL_GPIO_WritePin>
	

}
 800103c:	bf00      	nop
 800103e:	3708      	adds	r7, #8
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}
 8001044:	48000c00 	.word	0x48000c00
 8001048:	200002fc 	.word	0x200002fc

0800104c <readRegister>:
* @retval value  : array of 8-bit values of corresponding register
* @num		: number of bytes to be written
*/

static void readRegister(uint8_t address,uint8_t * value, uint8_t num)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b082      	sub	sp, #8
 8001050:	af00      	add	r7, sp, #0
 8001052:	4603      	mov	r3, r0
 8001054:	6039      	str	r1, [r7, #0]
 8001056:	71fb      	strb	r3, [r7, #7]
 8001058:	4613      	mov	r3, r2
 800105a:	71bb      	strb	r3, [r7, #6]
		if (address > 63)
 800105c:	79fb      	ldrb	r3, [r7, #7]
 800105e:	2b3f      	cmp	r3, #63	; 0x3f
 8001060:	d901      	bls.n	8001066 <readRegister+0x1a>
		address = 63;
 8001062:	233f      	movs	r3, #63	; 0x3f
 8001064:	71fb      	strb	r3, [r7, #7]
		
		// Multiple Byte Read Settings
		if (num > 1)
 8001066:	79bb      	ldrb	r3, [r7, #6]
 8001068:	2b01      	cmp	r3, #1
 800106a:	d905      	bls.n	8001078 <readRegister+0x2c>
		address |= 0x40;
 800106c:	79fb      	ldrb	r3, [r7, #7]
 800106e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001072:	b2db      	uxtb	r3, r3
 8001074:	71fb      	strb	r3, [r7, #7]
 8001076:	e004      	b.n	8001082 <readRegister+0x36>
		else	
		address &= ~(0x40);
 8001078:	79fb      	ldrb	r3, [r7, #7]
 800107a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800107e:	b2db      	uxtb	r3, r3
 8001080:	71fb      	strb	r3, [r7, #7]
		
		// Setting R/W = 1, i.e.: Read Mode
    address |= (0x80);		
 8001082:	79fb      	ldrb	r3, [r7, #7]
 8001084:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001088:	b2db      	uxtb	r3, r3
 800108a:	71fb      	strb	r3, [r7, #7]
		
	HAL_GPIO_WritePin(ADXLCS_GPIO_Port,ADXLCS_Pin,GPIO_PIN_RESET);
 800108c:	2200      	movs	r2, #0
 800108e:	2104      	movs	r1, #4
 8001090:	480c      	ldr	r0, [pc, #48]	; (80010c4 <readRegister+0x78>)
 8001092:	f001 fd0d 	bl	8002ab0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&SPIhandler,&address,1,10);
 8001096:	1df9      	adds	r1, r7, #7
 8001098:	230a      	movs	r3, #10
 800109a:	2201      	movs	r2, #1
 800109c:	480a      	ldr	r0, [pc, #40]	; (80010c8 <readRegister+0x7c>)
 800109e:	f003 f8ce 	bl	800423e <HAL_SPI_Transmit>
	HAL_SPI_Receive(&SPIhandler,value,num,10);
 80010a2:	79bb      	ldrb	r3, [r7, #6]
 80010a4:	b29a      	uxth	r2, r3
 80010a6:	230a      	movs	r3, #10
 80010a8:	6839      	ldr	r1, [r7, #0]
 80010aa:	4807      	ldr	r0, [pc, #28]	; (80010c8 <readRegister+0x7c>)
 80010ac:	f003 fa35 	bl	800451a <HAL_SPI_Receive>
	HAL_GPIO_WritePin(ADXLCS_GPIO_Port,ADXLCS_Pin,GPIO_PIN_SET);
 80010b0:	2201      	movs	r2, #1
 80010b2:	2104      	movs	r1, #4
 80010b4:	4803      	ldr	r0, [pc, #12]	; (80010c4 <readRegister+0x78>)
 80010b6:	f001 fcfb 	bl	8002ab0 <HAL_GPIO_WritePin>
	
	
}
 80010ba:	bf00      	nop
 80010bc:	3708      	adds	r7, #8
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	48000c00 	.word	0x48000c00
 80010c8:	200002fc 	.word	0x200002fc

080010cc <adxlBW>:
						10 		|  				100
						11 		|  				200
						12 		|  				400
			*/
static void adxlBW(ADXL_InitTypeDef * adxl)
		{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b084      	sub	sp, #16
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
		uint8_t bwreg=0;
 80010d4:	2300      	movs	r3, #0
 80010d6:	73fb      	strb	r3, [r7, #15]
		writeRegister(BW_RATE,bwreg);
 80010d8:	7bfb      	ldrb	r3, [r7, #15]
 80010da:	4619      	mov	r1, r3
 80010dc:	202c      	movs	r0, #44	; 0x2c
 80010de:	f7ff ff85 	bl	8000fec <writeRegister>
		if (adxl->LPMode == LPMODE_LOWPOWER) 
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	789b      	ldrb	r3, [r3, #2]
 80010e6:	2b01      	cmp	r3, #1
 80010e8:	d11a      	bne.n	8001120 <adxlBW+0x54>
						{
						// Low power mode
						bwreg |= (1 << 4);
 80010ea:	7bfb      	ldrb	r3, [r7, #15]
 80010ec:	f043 0310 	orr.w	r3, r3, #16
 80010f0:	73fb      	strb	r3, [r7, #15]
						if ( ((adxl->Rate) <7) && ((adxl->Rate)>12) ) bwreg += 7;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	78db      	ldrb	r3, [r3, #3]
 80010f6:	2b06      	cmp	r3, #6
 80010f8:	d807      	bhi.n	800110a <adxlBW+0x3e>
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	78db      	ldrb	r3, [r3, #3]
 80010fe:	2b0c      	cmp	r3, #12
 8001100:	d903      	bls.n	800110a <adxlBW+0x3e>
 8001102:	7bfb      	ldrb	r3, [r7, #15]
 8001104:	3307      	adds	r3, #7
 8001106:	73fb      	strb	r3, [r7, #15]
 8001108:	e004      	b.n	8001114 <adxlBW+0x48>
								else bwreg +=(adxl->Rate);
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	78da      	ldrb	r2, [r3, #3]
 800110e:	7bfb      	ldrb	r3, [r7, #15]
 8001110:	4413      	add	r3, r2
 8001112:	73fb      	strb	r3, [r7, #15]
						writeRegister(BW_RATE,bwreg);	
 8001114:	7bfb      	ldrb	r3, [r7, #15]
 8001116:	4619      	mov	r1, r3
 8001118:	202c      	movs	r0, #44	; 0x2c
 800111a:	f7ff ff67 	bl	8000fec <writeRegister>
	
				if ( ((adxl->Rate) <6) && ((adxl->Rate)>15) ) bwreg += 6;
						else bwreg +=(adxl->Rate);
				writeRegister(BW_RATE,bwreg);	
				}
		}
 800111e:	e015      	b.n	800114c <adxlBW+0x80>
				if ( ((adxl->Rate) <6) && ((adxl->Rate)>15) ) bwreg += 6;
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	78db      	ldrb	r3, [r3, #3]
 8001124:	2b05      	cmp	r3, #5
 8001126:	d807      	bhi.n	8001138 <adxlBW+0x6c>
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	78db      	ldrb	r3, [r3, #3]
 800112c:	2b0f      	cmp	r3, #15
 800112e:	d903      	bls.n	8001138 <adxlBW+0x6c>
 8001130:	7bfb      	ldrb	r3, [r7, #15]
 8001132:	3306      	adds	r3, #6
 8001134:	73fb      	strb	r3, [r7, #15]
 8001136:	e004      	b.n	8001142 <adxlBW+0x76>
						else bwreg +=(adxl->Rate);
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	78da      	ldrb	r2, [r3, #3]
 800113c:	7bfb      	ldrb	r3, [r7, #15]
 800113e:	4413      	add	r3, r2
 8001140:	73fb      	strb	r3, [r7, #15]
				writeRegister(BW_RATE,bwreg);	
 8001142:	7bfb      	ldrb	r3, [r7, #15]
 8001144:	4619      	mov	r1, r3
 8001146:	202c      	movs	r0, #44	; 0x2c
 8001148:	f7ff ff50 	bl	8000fec <writeRegister>
		}
 800114c:	bf00      	nop
 800114e:	3710      	adds	r7, #16
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}

08001154 <adxlFormat>:
						3 		|  				+-16g
	 									
		*/

static void adxlFormat(ADXL_InitTypeDef * adxl)
			{
 8001154:	b580      	push	{r7, lr}
 8001156:	b084      	sub	sp, #16
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
			uint8_t formatreg=0;
 800115c:	2300      	movs	r3, #0
 800115e:	73fb      	strb	r3, [r7, #15]
			writeRegister(DATA_FORMAT,formatreg);
 8001160:	7bfb      	ldrb	r3, [r7, #15]
 8001162:	4619      	mov	r1, r3
 8001164:	2031      	movs	r0, #49	; 0x31
 8001166:	f7ff ff41 	bl	8000fec <writeRegister>
			formatreg = (adxl->SPIMode << 6) | (adxl->IntMode << 5) | (adxl->Justify << 2) | (adxl->Resolution << 3);
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	781b      	ldrb	r3, [r3, #0]
 800116e:	019b      	lsls	r3, r3, #6
 8001170:	b25a      	sxtb	r2, r3
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	785b      	ldrb	r3, [r3, #1]
 8001176:	015b      	lsls	r3, r3, #5
 8001178:	b25b      	sxtb	r3, r3
 800117a:	4313      	orrs	r3, r2
 800117c:	b25a      	sxtb	r2, r3
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	799b      	ldrb	r3, [r3, #6]
 8001182:	009b      	lsls	r3, r3, #2
 8001184:	b25b      	sxtb	r3, r3
 8001186:	4313      	orrs	r3, r2
 8001188:	b25a      	sxtb	r2, r3
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	795b      	ldrb	r3, [r3, #5]
 800118e:	00db      	lsls	r3, r3, #3
 8001190:	b25b      	sxtb	r3, r3
 8001192:	4313      	orrs	r3, r2
 8001194:	b25b      	sxtb	r3, r3
 8001196:	73fb      	strb	r3, [r7, #15]
			formatreg += (adxl -> Range);
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	791a      	ldrb	r2, [r3, #4]
 800119c:	7bfb      	ldrb	r3, [r7, #15]
 800119e:	4413      	add	r3, r2
 80011a0:	73fb      	strb	r3, [r7, #15]
			writeRegister(DATA_FORMAT,formatreg);
 80011a2:	7bfb      	ldrb	r3, [r7, #15]
 80011a4:	4619      	mov	r1, r3
 80011a6:	2031      	movs	r0, #49	; 0x31
 80011a8:	f7ff ff20 	bl	8000fec <writeRegister>
			}
 80011ac:	bf00      	nop
 80011ae:	3710      	adds	r7, #16
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}

080011b4 <ADXL_Init>:

// Public Functions

// Initializes the ADXL unit
adxlStatus ADXL_Init(ADXL_InitTypeDef * adxl)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b084      	sub	sp, #16
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
	// CS is active low. Here we deselect the chip. In each function the CS signal is asserted individually
	HAL_GPIO_WritePin(ADXLCS_GPIO_Port,ADXLCS_Pin,GPIO_PIN_SET);
 80011bc:	2201      	movs	r2, #1
 80011be:	2104      	movs	r1, #4
 80011c0:	484b      	ldr	r0, [pc, #300]	; (80012f0 <ADXL_Init+0x13c>)
 80011c2:	f001 fc75 	bl	8002ab0 <HAL_GPIO_WritePin>
	// Unknown delay should apply
	HAL_Delay(5);
 80011c6:	2005      	movs	r0, #5
 80011c8:	f001 f952 	bl	8002470 <HAL_Delay>
	uint8_t testval = 0;
 80011cc:	2300      	movs	r3, #0
 80011ce:	73fb      	strb	r3, [r7, #15]
	// The Device Address register is constant, i.e. = 0xE5
	readRegister(DEVID,&testval,1);
 80011d0:	f107 030f 	add.w	r3, r7, #15
 80011d4:	2201      	movs	r2, #1
 80011d6:	4619      	mov	r1, r3
 80011d8:	2000      	movs	r0, #0
 80011da:	f7ff ff37 	bl	800104c <readRegister>
	if (testval != 0xE5) return ADXL_ERR;
 80011de:	7bfb      	ldrb	r3, [r7, #15]
 80011e0:	2be5      	cmp	r3, #229	; 0xe5
 80011e2:	d001      	beq.n	80011e8 <ADXL_Init+0x34>
 80011e4:	2301      	movs	r3, #1
 80011e6:	e07f      	b.n	80012e8 <ADXL_Init+0x134>
	// Init. of BW_RATE and DATAFORMAT registers
	adxlBW(adxl);
 80011e8:	6878      	ldr	r0, [r7, #4]
 80011ea:	f7ff ff6f 	bl	80010cc <adxlBW>
	adxlFormat(adxl);
 80011ee:	6878      	ldr	r0, [r7, #4]
 80011f0:	f7ff ffb0 	bl	8001154 <adxlFormat>
	
	// Settings gains 
	if (adxl->Resolution == RESOLUTION_10BIT)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	795b      	ldrb	r3, [r3, #5]
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d13f      	bne.n	800127c <ADXL_Init+0xc8>
			{
			switch (adxl->Range) {
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	791b      	ldrb	r3, [r3, #4]
 8001200:	2b03      	cmp	r3, #3
 8001202:	d846      	bhi.n	8001292 <ADXL_Init+0xde>
 8001204:	a201      	add	r2, pc, #4	; (adr r2, 800120c <ADXL_Init+0x58>)
 8001206:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800120a:	bf00      	nop
 800120c:	0800121d 	.word	0x0800121d
 8001210:	08001235 	.word	0x08001235
 8001214:	0800124d 	.word	0x0800124d
 8001218:	08001265 	.word	0x08001265
							case RANGE_2G:
								GAINX = GAINY = GAINZ = 1/255.0f;
 800121c:	4b35      	ldr	r3, [pc, #212]	; (80012f4 <ADXL_Init+0x140>)
 800121e:	4a36      	ldr	r2, [pc, #216]	; (80012f8 <ADXL_Init+0x144>)
 8001220:	601a      	str	r2, [r3, #0]
 8001222:	4b34      	ldr	r3, [pc, #208]	; (80012f4 <ADXL_Init+0x140>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	4a35      	ldr	r2, [pc, #212]	; (80012fc <ADXL_Init+0x148>)
 8001228:	6013      	str	r3, [r2, #0]
 800122a:	4b34      	ldr	r3, [pc, #208]	; (80012fc <ADXL_Init+0x148>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	4a34      	ldr	r2, [pc, #208]	; (8001300 <ADXL_Init+0x14c>)
 8001230:	6013      	str	r3, [r2, #0]
								break;
 8001232:	e02e      	b.n	8001292 <ADXL_Init+0xde>
							case RANGE_4G:
								GAINX = GAINY = GAINZ = 1/127.0f;
 8001234:	4b2f      	ldr	r3, [pc, #188]	; (80012f4 <ADXL_Init+0x140>)
 8001236:	4a33      	ldr	r2, [pc, #204]	; (8001304 <ADXL_Init+0x150>)
 8001238:	601a      	str	r2, [r3, #0]
 800123a:	4b2e      	ldr	r3, [pc, #184]	; (80012f4 <ADXL_Init+0x140>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	4a2f      	ldr	r2, [pc, #188]	; (80012fc <ADXL_Init+0x148>)
 8001240:	6013      	str	r3, [r2, #0]
 8001242:	4b2e      	ldr	r3, [pc, #184]	; (80012fc <ADXL_Init+0x148>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	4a2e      	ldr	r2, [pc, #184]	; (8001300 <ADXL_Init+0x14c>)
 8001248:	6013      	str	r3, [r2, #0]
								break;
 800124a:	e022      	b.n	8001292 <ADXL_Init+0xde>
							case RANGE_8G:
								GAINX = GAINY = GAINZ = 1/63.0f;
 800124c:	4b29      	ldr	r3, [pc, #164]	; (80012f4 <ADXL_Init+0x140>)
 800124e:	4a2e      	ldr	r2, [pc, #184]	; (8001308 <ADXL_Init+0x154>)
 8001250:	601a      	str	r2, [r3, #0]
 8001252:	4b28      	ldr	r3, [pc, #160]	; (80012f4 <ADXL_Init+0x140>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	4a29      	ldr	r2, [pc, #164]	; (80012fc <ADXL_Init+0x148>)
 8001258:	6013      	str	r3, [r2, #0]
 800125a:	4b28      	ldr	r3, [pc, #160]	; (80012fc <ADXL_Init+0x148>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	4a28      	ldr	r2, [pc, #160]	; (8001300 <ADXL_Init+0x14c>)
 8001260:	6013      	str	r3, [r2, #0]
								break;
 8001262:	e016      	b.n	8001292 <ADXL_Init+0xde>
							case RANGE_16G:
								GAINX = GAINY = GAINZ = 1/31.0f;
 8001264:	4b23      	ldr	r3, [pc, #140]	; (80012f4 <ADXL_Init+0x140>)
 8001266:	4a29      	ldr	r2, [pc, #164]	; (800130c <ADXL_Init+0x158>)
 8001268:	601a      	str	r2, [r3, #0]
 800126a:	4b22      	ldr	r3, [pc, #136]	; (80012f4 <ADXL_Init+0x140>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	4a23      	ldr	r2, [pc, #140]	; (80012fc <ADXL_Init+0x148>)
 8001270:	6013      	str	r3, [r2, #0]
 8001272:	4b22      	ldr	r3, [pc, #136]	; (80012fc <ADXL_Init+0x148>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	4a22      	ldr	r2, [pc, #136]	; (8001300 <ADXL_Init+0x14c>)
 8001278:	6013      	str	r3, [r2, #0]
								break;
 800127a:	e00a      	b.n	8001292 <ADXL_Init+0xde>
								}
			} else 
			{
			GAINX = GAINY = GAINZ = 1/255.0f;
 800127c:	4b1d      	ldr	r3, [pc, #116]	; (80012f4 <ADXL_Init+0x140>)
 800127e:	4a1e      	ldr	r2, [pc, #120]	; (80012f8 <ADXL_Init+0x144>)
 8001280:	601a      	str	r2, [r3, #0]
 8001282:	4b1c      	ldr	r3, [pc, #112]	; (80012f4 <ADXL_Init+0x140>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	4a1d      	ldr	r2, [pc, #116]	; (80012fc <ADXL_Init+0x148>)
 8001288:	6013      	str	r3, [r2, #0]
 800128a:	4b1c      	ldr	r3, [pc, #112]	; (80012fc <ADXL_Init+0x148>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	4a1c      	ldr	r2, [pc, #112]	; (8001300 <ADXL_Init+0x14c>)
 8001290:	6013      	str	r3, [r2, #0]
			}
	// Setting AutoSleep and Link bits
			uint8_t reg;
			readRegister(POWER_CTL,&reg,1);
 8001292:	f107 030e 	add.w	r3, r7, #14
 8001296:	2201      	movs	r2, #1
 8001298:	4619      	mov	r1, r3
 800129a:	202d      	movs	r0, #45	; 0x2d
 800129c:	f7ff fed6 	bl	800104c <readRegister>
			if ( (adxl->AutoSleep) == AUTOSLEEPON) reg |= (1 << 4); else reg &= ~(1 << 4);
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	79db      	ldrb	r3, [r3, #7]
 80012a4:	2b01      	cmp	r3, #1
 80012a6:	d105      	bne.n	80012b4 <ADXL_Init+0x100>
 80012a8:	7bbb      	ldrb	r3, [r7, #14]
 80012aa:	f043 0310 	orr.w	r3, r3, #16
 80012ae:	b2db      	uxtb	r3, r3
 80012b0:	73bb      	strb	r3, [r7, #14]
 80012b2:	e004      	b.n	80012be <ADXL_Init+0x10a>
 80012b4:	7bbb      	ldrb	r3, [r7, #14]
 80012b6:	f023 0310 	bic.w	r3, r3, #16
 80012ba:	b2db      	uxtb	r3, r3
 80012bc:	73bb      	strb	r3, [r7, #14]
			if ( (adxl->LinkMode) == LINKMODEON) reg |= (1 << 5); else reg &= ~(1 << 5);
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	7a1b      	ldrb	r3, [r3, #8]
 80012c2:	2b01      	cmp	r3, #1
 80012c4:	d105      	bne.n	80012d2 <ADXL_Init+0x11e>
 80012c6:	7bbb      	ldrb	r3, [r7, #14]
 80012c8:	f043 0320 	orr.w	r3, r3, #32
 80012cc:	b2db      	uxtb	r3, r3
 80012ce:	73bb      	strb	r3, [r7, #14]
 80012d0:	e004      	b.n	80012dc <ADXL_Init+0x128>
 80012d2:	7bbb      	ldrb	r3, [r7, #14]
 80012d4:	f023 0320 	bic.w	r3, r3, #32
 80012d8:	b2db      	uxtb	r3, r3
 80012da:	73bb      	strb	r3, [r7, #14]
			writeRegister(POWER_CTL,reg);
 80012dc:	7bbb      	ldrb	r3, [r7, #14]
 80012de:	4619      	mov	r1, r3
 80012e0:	202d      	movs	r0, #45	; 0x2d
 80012e2:	f7ff fe83 	bl	8000fec <writeRegister>
			
	return ADXL_OK;
 80012e6:	2300      	movs	r3, #0
	
}
 80012e8:	4618      	mov	r0, r3
 80012ea:	3710      	adds	r7, #16
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	48000c00 	.word	0x48000c00
 80012f4:	20000214 	.word	0x20000214
 80012f8:	3b808081 	.word	0x3b808081
 80012fc:	20000210 	.word	0x20000210
 8001300:	2000020c 	.word	0x2000020c
 8001304:	3c010204 	.word	0x3c010204
 8001308:	3c820821 	.word	0x3c820821
 800130c:	3d042108 	.word	0x3d042108

08001310 <ADXL_getAccel>:
						uint16_t acc[3];
						ADXL_getAccel(acc,OUTPUT_SIGNED);
						and so on...
*/
void ADXL_getAccel(void *Data , uint8_t outputType)
	{
 8001310:	b580      	push	{r7, lr}
 8001312:	b086      	sub	sp, #24
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
 8001318:	460b      	mov	r3, r1
 800131a:	70fb      	strb	r3, [r7, #3]
	uint8_t data[6]={0,0,0,0,0,0};	
 800131c:	4a40      	ldr	r2, [pc, #256]	; (8001420 <ADXL_getAccel+0x110>)
 800131e:	f107 0308 	add.w	r3, r7, #8
 8001322:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001326:	6018      	str	r0, [r3, #0]
 8001328:	3304      	adds	r3, #4
 800132a:	8019      	strh	r1, [r3, #0]
	readRegister(DATA0,data,6);
 800132c:	f107 0308 	add.w	r3, r7, #8
 8001330:	2206      	movs	r2, #6
 8001332:	4619      	mov	r1, r3
 8001334:	2032      	movs	r0, #50	; 0x32
 8001336:	f7ff fe89 	bl	800104c <readRegister>
	
	
	if (outputType == OUTPUT_SIGNED)
 800133a:	78fb      	ldrb	r3, [r7, #3]
 800133c:	2b01      	cmp	r3, #1
 800133e:	d125      	bne.n	800138c <ADXL_getAccel+0x7c>
		{
		int16_t * acc = Data;	
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	613b      	str	r3, [r7, #16]
	  // Two's Complement
	  acc[0] = (int16_t) ((data[1]*256+data[0]));
 8001344:	7a7b      	ldrb	r3, [r7, #9]
 8001346:	b29b      	uxth	r3, r3
 8001348:	021b      	lsls	r3, r3, #8
 800134a:	b29a      	uxth	r2, r3
 800134c:	7a3b      	ldrb	r3, [r7, #8]
 800134e:	b29b      	uxth	r3, r3
 8001350:	4413      	add	r3, r2
 8001352:	b29b      	uxth	r3, r3
 8001354:	b21a      	sxth	r2, r3
 8001356:	693b      	ldr	r3, [r7, #16]
 8001358:	801a      	strh	r2, [r3, #0]
	  acc[1] = (int16_t) ((data[3]*256+data[2]));
 800135a:	7afb      	ldrb	r3, [r7, #11]
 800135c:	b29b      	uxth	r3, r3
 800135e:	021b      	lsls	r3, r3, #8
 8001360:	b29a      	uxth	r2, r3
 8001362:	7abb      	ldrb	r3, [r7, #10]
 8001364:	b29b      	uxth	r3, r3
 8001366:	4413      	add	r3, r2
 8001368:	b29a      	uxth	r2, r3
 800136a:	693b      	ldr	r3, [r7, #16]
 800136c:	3302      	adds	r3, #2
 800136e:	b212      	sxth	r2, r2
 8001370:	801a      	strh	r2, [r3, #0]
	  acc[2] = (int16_t) ((data[5]*256+data[4]));
 8001372:	7b7b      	ldrb	r3, [r7, #13]
 8001374:	b29b      	uxth	r3, r3
 8001376:	021b      	lsls	r3, r3, #8
 8001378:	b29a      	uxth	r2, r3
 800137a:	7b3b      	ldrb	r3, [r7, #12]
 800137c:	b29b      	uxth	r3, r3
 800137e:	4413      	add	r3, r2
 8001380:	b29a      	uxth	r2, r3
 8001382:	693b      	ldr	r3, [r7, #16]
 8001384:	3304      	adds	r3, #4
 8001386:	b212      	sxth	r2, r2
 8001388:	801a      	strh	r2, [r3, #0]
						fdata[0] = ( (int16_t) ((data[1]*256+data[0])))*GAINX;
						fdata[1] = ( (int16_t) ((data[3]*256+data[2])))*GAINY;
						fdata[2] = ( (int16_t) ((data[5]*256+data[4])))*GAINZ;
						
						}
	}
 800138a:	e045      	b.n	8001418 <ADXL_getAccel+0x108>
	else if (outputType == OUTPUT_FLOAT)
 800138c:	78fb      	ldrb	r3, [r7, #3]
 800138e:	2b00      	cmp	r3, #0
 8001390:	d142      	bne.n	8001418 <ADXL_getAccel+0x108>
						float * fdata = Data;
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	617b      	str	r3, [r7, #20]
						fdata[0] = ( (int16_t) ((data[1]*256+data[0])))*GAINX;
 8001396:	7a7b      	ldrb	r3, [r7, #9]
 8001398:	b29b      	uxth	r3, r3
 800139a:	021b      	lsls	r3, r3, #8
 800139c:	b29a      	uxth	r2, r3
 800139e:	7a3b      	ldrb	r3, [r7, #8]
 80013a0:	b29b      	uxth	r3, r3
 80013a2:	4413      	add	r3, r2
 80013a4:	b29b      	uxth	r3, r3
 80013a6:	b21b      	sxth	r3, r3
 80013a8:	ee07 3a90 	vmov	s15, r3
 80013ac:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80013b0:	4b1c      	ldr	r3, [pc, #112]	; (8001424 <ADXL_getAccel+0x114>)
 80013b2:	edd3 7a00 	vldr	s15, [r3]
 80013b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013ba:	697b      	ldr	r3, [r7, #20]
 80013bc:	edc3 7a00 	vstr	s15, [r3]
						fdata[1] = ( (int16_t) ((data[3]*256+data[2])))*GAINY;
 80013c0:	7afb      	ldrb	r3, [r7, #11]
 80013c2:	b29b      	uxth	r3, r3
 80013c4:	021b      	lsls	r3, r3, #8
 80013c6:	b29a      	uxth	r2, r3
 80013c8:	7abb      	ldrb	r3, [r7, #10]
 80013ca:	b29b      	uxth	r3, r3
 80013cc:	4413      	add	r3, r2
 80013ce:	b29b      	uxth	r3, r3
 80013d0:	b21b      	sxth	r3, r3
 80013d2:	ee07 3a90 	vmov	s15, r3
 80013d6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80013da:	4b13      	ldr	r3, [pc, #76]	; (8001428 <ADXL_getAccel+0x118>)
 80013dc:	edd3 7a00 	vldr	s15, [r3]
 80013e0:	697b      	ldr	r3, [r7, #20]
 80013e2:	3304      	adds	r3, #4
 80013e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013e8:	edc3 7a00 	vstr	s15, [r3]
						fdata[2] = ( (int16_t) ((data[5]*256+data[4])))*GAINZ;
 80013ec:	7b7b      	ldrb	r3, [r7, #13]
 80013ee:	b29b      	uxth	r3, r3
 80013f0:	021b      	lsls	r3, r3, #8
 80013f2:	b29a      	uxth	r2, r3
 80013f4:	7b3b      	ldrb	r3, [r7, #12]
 80013f6:	b29b      	uxth	r3, r3
 80013f8:	4413      	add	r3, r2
 80013fa:	b29b      	uxth	r3, r3
 80013fc:	b21b      	sxth	r3, r3
 80013fe:	ee07 3a90 	vmov	s15, r3
 8001402:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001406:	4b09      	ldr	r3, [pc, #36]	; (800142c <ADXL_getAccel+0x11c>)
 8001408:	edd3 7a00 	vldr	s15, [r3]
 800140c:	697b      	ldr	r3, [r7, #20]
 800140e:	3308      	adds	r3, #8
 8001410:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001414:	edc3 7a00 	vstr	s15, [r3]
	}
 8001418:	bf00      	nop
 800141a:	3718      	adds	r7, #24
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}
 8001420:	0800a3c0 	.word	0x0800a3c0
 8001424:	2000020c 	.word	0x2000020c
 8001428:	20000210 	.word	0x20000210
 800142c:	20000214 	.word	0x20000214

08001430 <ADXL_Measure>:
/** Starts Measure Mode
* @param: s = ON or OFF				

*/
void ADXL_Measure(Switch s)
		{
 8001430:	b580      	push	{r7, lr}
 8001432:	b084      	sub	sp, #16
 8001434:	af00      	add	r7, sp, #0
 8001436:	4603      	mov	r3, r0
 8001438:	71fb      	strb	r3, [r7, #7]
			uint8_t reg;
			readRegister(POWER_CTL,&reg,1);
 800143a:	f107 030f 	add.w	r3, r7, #15
 800143e:	2201      	movs	r2, #1
 8001440:	4619      	mov	r1, r3
 8001442:	202d      	movs	r0, #45	; 0x2d
 8001444:	f7ff fe02 	bl	800104c <readRegister>
			switch (s) {
 8001448:	79fb      	ldrb	r3, [r7, #7]
 800144a:	2b00      	cmp	r3, #0
 800144c:	d002      	beq.n	8001454 <ADXL_Measure+0x24>
 800144e:	2b01      	cmp	r3, #1
 8001450:	d010      	beq.n	8001474 <ADXL_Measure+0x44>
				case OFF:
				reg &= ~(1<<3);
				writeRegister(POWER_CTL,reg);
				break;				
				}
		}
 8001452:	e01a      	b.n	800148a <ADXL_Measure+0x5a>
				reg &= ~(1<<2);
 8001454:	7bfb      	ldrb	r3, [r7, #15]
 8001456:	f023 0304 	bic.w	r3, r3, #4
 800145a:	b2db      	uxtb	r3, r3
 800145c:	73fb      	strb	r3, [r7, #15]
				reg |= (1<<3);
 800145e:	7bfb      	ldrb	r3, [r7, #15]
 8001460:	f043 0308 	orr.w	r3, r3, #8
 8001464:	b2db      	uxtb	r3, r3
 8001466:	73fb      	strb	r3, [r7, #15]
				writeRegister(POWER_CTL,reg);
 8001468:	7bfb      	ldrb	r3, [r7, #15]
 800146a:	4619      	mov	r1, r3
 800146c:	202d      	movs	r0, #45	; 0x2d
 800146e:	f7ff fdbd 	bl	8000fec <writeRegister>
				break;
 8001472:	e00a      	b.n	800148a <ADXL_Measure+0x5a>
				reg &= ~(1<<3);
 8001474:	7bfb      	ldrb	r3, [r7, #15]
 8001476:	f023 0308 	bic.w	r3, r3, #8
 800147a:	b2db      	uxtb	r3, r3
 800147c:	73fb      	strb	r3, [r7, #15]
				writeRegister(POWER_CTL,reg);
 800147e:	7bfb      	ldrb	r3, [r7, #15]
 8001480:	4619      	mov	r1, r3
 8001482:	202d      	movs	r0, #45	; 0x2d
 8001484:	f7ff fdb2 	bl	8000fec <writeRegister>
				break;				
 8001488:	bf00      	nop
		}
 800148a:	bf00      	nop
 800148c:	3710      	adds	r7, #16
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}
	...

08001494 <ST7735init>:
	adxl_write (0x2D, 0x00);  // reset all bits
	adxl_write (0x2D, 0x08);  // power_cntl measure and wake up 8hz
}
*/

void ST7735init() {
 8001494:	b580      	push	{r7, lr}
 8001496:	b084      	sub	sp, #16
 8001498:	af00      	add	r7, sp, #0
    ST7735_Init();
 800149a:	f000 fbb7 	bl	8001c0c <ST7735_Init>

    const char ready[] = "Ready!\r\n";
 800149e:	4a08      	ldr	r2, [pc, #32]	; (80014c0 <ST7735init+0x2c>)
 80014a0:	1d3b      	adds	r3, r7, #4
 80014a2:	ca07      	ldmia	r2, {r0, r1, r2}
 80014a4:	c303      	stmia	r3!, {r0, r1}
 80014a6:	701a      	strb	r2, [r3, #0]
    HAL_UART_Transmit(&huart2, (uint8_t*)ready, sizeof(ready)-1, HAL_MAX_DELAY);
 80014a8:	1d39      	adds	r1, r7, #4
 80014aa:	f04f 33ff 	mov.w	r3, #4294967295
 80014ae:	2208      	movs	r2, #8
 80014b0:	4804      	ldr	r0, [pc, #16]	; (80014c4 <ST7735init+0x30>)
 80014b2:	f003 fe9b 	bl	80051ec <HAL_UART_Transmit>
}
 80014b6:	bf00      	nop
 80014b8:	3710      	adds	r7, #16
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	0800a3c8 	.word	0x0800a3c8
 80014c4:	20000400 	.word	0x20000400

080014c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b088      	sub	sp, #32
 80014cc:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014ce:	f000 ff53 	bl	8002378 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014d2:	f000 f921 	bl	8001718 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014d6:	f000 fa1d 	bl	8001914 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80014da:	f000 f9eb 	bl	80018b4 <MX_USART2_UART_Init>
  MX_SPI2_Init();
 80014de:	f000 f96d 	bl	80017bc <MX_SPI2_Init>
  MX_SPI3_Init();
 80014e2:	f000 f9a9 	bl	8001838 <MX_SPI3_Init>
  /* USER CODE BEGIN 2 */

  //  adxl_init();

  ST7735init();
 80014e6:	f7ff ffd5 	bl	8001494 <ST7735init>

  ADXL_InitTypeDef ADXL_InitStruct;
  ADXL_InitStruct.SPIMode = SPIMODE_4WIRE;
 80014ea:	2300      	movs	r3, #0
 80014ec:	713b      	strb	r3, [r7, #4]
//  ADXL_InitStruct.IntMode = ;
  ADXL_InitStruct.LPMode = LPMODE_NORMAL;
 80014ee:	2300      	movs	r3, #0
 80014f0:	71bb      	strb	r3, [r7, #6]
//  ADXL_InitStruct.Rate = ;
  ADXL_InitStruct.Range = RANGE_2G;
 80014f2:	2300      	movs	r3, #0
 80014f4:	723b      	strb	r3, [r7, #8]
  ADXL_InitStruct.Resolution = RESOLUTION_10BIT;
 80014f6:	2300      	movs	r3, #0
 80014f8:	727b      	strb	r3, [r7, #9]
  ADXL_InitStruct.Justify = JUSTIFY_MSB;
 80014fa:	2301      	movs	r3, #1
 80014fc:	72bb      	strb	r3, [r7, #10]
  ADXL_InitStruct.AutoSleep = AUTOSLEEPOFF;
 80014fe:	2300      	movs	r3, #0
 8001500:	72fb      	strb	r3, [r7, #11]
  ADXL_InitStruct.LinkMode = LINKMODEOFF;
 8001502:	2300      	movs	r3, #0
 8001504:	733b      	strb	r3, [r7, #12]

  ADXL_Init(&ADXL_InitStruct);
 8001506:	1d3b      	adds	r3, r7, #4
 8001508:	4618      	mov	r0, r3
 800150a:	f7ff fe53 	bl	80011b4 <ADXL_Init>
	  // loop();

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  ADXL_Measure(ON);
 800150e:	2000      	movs	r0, #0
 8001510:	f7ff ff8e 	bl	8001430 <ADXL_Measure>

	  // READ DATA
//	  ADXL_getAccel(data_rec, OUTPUT_FLOAT);
	  ADXL_getAccel(acc, OUTPUT_SIGNED);
 8001514:	2101      	movs	r1, #1
 8001516:	486c      	ldr	r0, [pc, #432]	; (80016c8 <main+0x200>)
 8001518:	f7ff fefa 	bl	8001310 <ADXL_getAccel>

// adxl_read(0x32);
	  xg = acc[0]; //((data_rec[1]<<8)|data_rec[0]);
 800151c:	4b6a      	ldr	r3, [pc, #424]	; (80016c8 <main+0x200>)
 800151e:	881b      	ldrh	r3, [r3, #0]
 8001520:	ee07 3a90 	vmov	s15, r3
 8001524:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001528:	4b68      	ldr	r3, [pc, #416]	; (80016cc <main+0x204>)
 800152a:	edc3 7a00 	vstr	s15, [r3]
	  yg = acc[1]; //((data_rec[3]<<8)|data_rec[2]);
 800152e:	4b66      	ldr	r3, [pc, #408]	; (80016c8 <main+0x200>)
 8001530:	885b      	ldrh	r3, [r3, #2]
 8001532:	ee07 3a90 	vmov	s15, r3
 8001536:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800153a:	4b65      	ldr	r3, [pc, #404]	; (80016d0 <main+0x208>)
 800153c:	edc3 7a00 	vstr	s15, [r3]
	  zg = acc[2]; //((data_rec[5]<<8)|data_rec[4]);
 8001540:	4b61      	ldr	r3, [pc, #388]	; (80016c8 <main+0x200>)
 8001542:	889b      	ldrh	r3, [r3, #4]
 8001544:	ee07 3a90 	vmov	s15, r3
 8001548:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800154c:	4b61      	ldr	r3, [pc, #388]	; (80016d4 <main+0x20c>)
 800154e:	edc3 7a00 	vstr	s15, [r3]
	  yg = y * 0.0078;
	  zg = z * 0.0078;
*/

	  // CONVERT TO STRING
	  sprintf(x_str,"%d", x);
 8001552:	4b61      	ldr	r3, [pc, #388]	; (80016d8 <main+0x210>)
 8001554:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001558:	461a      	mov	r2, r3
 800155a:	4960      	ldr	r1, [pc, #384]	; (80016dc <main+0x214>)
 800155c:	4860      	ldr	r0, [pc, #384]	; (80016e0 <main+0x218>)
 800155e:	f005 f97d 	bl	800685c <siprintf>
	  sprintf(y_str,"%d", y);
 8001562:	4b60      	ldr	r3, [pc, #384]	; (80016e4 <main+0x21c>)
 8001564:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001568:	461a      	mov	r2, r3
 800156a:	495c      	ldr	r1, [pc, #368]	; (80016dc <main+0x214>)
 800156c:	485e      	ldr	r0, [pc, #376]	; (80016e8 <main+0x220>)
 800156e:	f005 f975 	bl	800685c <siprintf>
	  sprintf(z_str,"%d", z);
 8001572:	4b5e      	ldr	r3, [pc, #376]	; (80016ec <main+0x224>)
 8001574:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001578:	461a      	mov	r2, r3
 800157a:	4958      	ldr	r1, [pc, #352]	; (80016dc <main+0x214>)
 800157c:	485c      	ldr	r0, [pc, #368]	; (80016f0 <main+0x228>)
 800157e:	f005 f96d 	bl	800685c <siprintf>

	  sprintf(xg_str,"%f", xg);
 8001582:	4b52      	ldr	r3, [pc, #328]	; (80016cc <main+0x204>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	4618      	mov	r0, r3
 8001588:	f7fe ffde 	bl	8000548 <__aeabi_f2d>
 800158c:	4602      	mov	r2, r0
 800158e:	460b      	mov	r3, r1
 8001590:	4958      	ldr	r1, [pc, #352]	; (80016f4 <main+0x22c>)
 8001592:	4859      	ldr	r0, [pc, #356]	; (80016f8 <main+0x230>)
 8001594:	f005 f962 	bl	800685c <siprintf>
	  sprintf(yg_str,"%f", yg);
 8001598:	4b4d      	ldr	r3, [pc, #308]	; (80016d0 <main+0x208>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4618      	mov	r0, r3
 800159e:	f7fe ffd3 	bl	8000548 <__aeabi_f2d>
 80015a2:	4602      	mov	r2, r0
 80015a4:	460b      	mov	r3, r1
 80015a6:	4953      	ldr	r1, [pc, #332]	; (80016f4 <main+0x22c>)
 80015a8:	4854      	ldr	r0, [pc, #336]	; (80016fc <main+0x234>)
 80015aa:	f005 f957 	bl	800685c <siprintf>
	  sprintf(zg_str,"%f", zg);
 80015ae:	4b49      	ldr	r3, [pc, #292]	; (80016d4 <main+0x20c>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	4618      	mov	r0, r3
 80015b4:	f7fe ffc8 	bl	8000548 <__aeabi_f2d>
 80015b8:	4602      	mov	r2, r0
 80015ba:	460b      	mov	r3, r1
 80015bc:	494d      	ldr	r1, [pc, #308]	; (80016f4 <main+0x22c>)
 80015be:	4850      	ldr	r0, [pc, #320]	; (8001700 <main+0x238>)
 80015c0:	f005 f94c 	bl	800685c <siprintf>

	  // DISPLAY RESULT

	  ST7735_FillScreen(ST7735_BLACK);
 80015c4:	2000      	movs	r0, #0
 80015c6:	f000 fc6f 	bl	8001ea8 <ST7735_FillScreen>
	  ST7735_WriteString(2, 0, "x :", Font_7x10, ST7735_RED, ST7735_BLACK);
 80015ca:	4b4e      	ldr	r3, [pc, #312]	; (8001704 <main+0x23c>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	9202      	str	r2, [sp, #8]
 80015d0:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80015d4:	9201      	str	r2, [sp, #4]
 80015d6:	685a      	ldr	r2, [r3, #4]
 80015d8:	9200      	str	r2, [sp, #0]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4a4a      	ldr	r2, [pc, #296]	; (8001708 <main+0x240>)
 80015de:	2100      	movs	r1, #0
 80015e0:	2002      	movs	r0, #2
 80015e2:	f000 fba4 	bl	8001d2e <ST7735_WriteString>
	  ST7735_WriteString(12, 10, x_str, Font_11x18, ST7735_GREEN, ST7735_BLACK);
 80015e6:	4b49      	ldr	r3, [pc, #292]	; (800170c <main+0x244>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	9202      	str	r2, [sp, #8]
 80015ec:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80015f0:	9201      	str	r2, [sp, #4]
 80015f2:	685a      	ldr	r2, [r3, #4]
 80015f4:	9200      	str	r2, [sp, #0]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	4a39      	ldr	r2, [pc, #228]	; (80016e0 <main+0x218>)
 80015fa:	210a      	movs	r1, #10
 80015fc:	200c      	movs	r0, #12
 80015fe:	f000 fb96 	bl	8001d2e <ST7735_WriteString>
	  ST7735_WriteString(12, 20, xg_str, Font_11x18, ST7735_GREEN, ST7735_BLACK);
 8001602:	4b42      	ldr	r3, [pc, #264]	; (800170c <main+0x244>)
 8001604:	2200      	movs	r2, #0
 8001606:	9202      	str	r2, [sp, #8]
 8001608:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 800160c:	9201      	str	r2, [sp, #4]
 800160e:	685a      	ldr	r2, [r3, #4]
 8001610:	9200      	str	r2, [sp, #0]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4a38      	ldr	r2, [pc, #224]	; (80016f8 <main+0x230>)
 8001616:	2114      	movs	r1, #20
 8001618:	200c      	movs	r0, #12
 800161a:	f000 fb88 	bl	8001d2e <ST7735_WriteString>

	  ST7735_WriteString(2, 40, "y :", Font_7x10, ST7735_RED, ST7735_BLACK);
 800161e:	4b39      	ldr	r3, [pc, #228]	; (8001704 <main+0x23c>)
 8001620:	2200      	movs	r2, #0
 8001622:	9202      	str	r2, [sp, #8]
 8001624:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8001628:	9201      	str	r2, [sp, #4]
 800162a:	685a      	ldr	r2, [r3, #4]
 800162c:	9200      	str	r2, [sp, #0]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4a37      	ldr	r2, [pc, #220]	; (8001710 <main+0x248>)
 8001632:	2128      	movs	r1, #40	; 0x28
 8001634:	2002      	movs	r0, #2
 8001636:	f000 fb7a 	bl	8001d2e <ST7735_WriteString>
	  ST7735_WriteString(12, 50, y_str, Font_11x18, ST7735_GREEN, ST7735_BLACK);
 800163a:	4b34      	ldr	r3, [pc, #208]	; (800170c <main+0x244>)
 800163c:	2200      	movs	r2, #0
 800163e:	9202      	str	r2, [sp, #8]
 8001640:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8001644:	9201      	str	r2, [sp, #4]
 8001646:	685a      	ldr	r2, [r3, #4]
 8001648:	9200      	str	r2, [sp, #0]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4a26      	ldr	r2, [pc, #152]	; (80016e8 <main+0x220>)
 800164e:	2132      	movs	r1, #50	; 0x32
 8001650:	200c      	movs	r0, #12
 8001652:	f000 fb6c 	bl	8001d2e <ST7735_WriteString>
	  ST7735_WriteString(12, 60, yg_str, Font_11x18, ST7735_GREEN, ST7735_BLACK);
 8001656:	4b2d      	ldr	r3, [pc, #180]	; (800170c <main+0x244>)
 8001658:	2200      	movs	r2, #0
 800165a:	9202      	str	r2, [sp, #8]
 800165c:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8001660:	9201      	str	r2, [sp, #4]
 8001662:	685a      	ldr	r2, [r3, #4]
 8001664:	9200      	str	r2, [sp, #0]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	4a24      	ldr	r2, [pc, #144]	; (80016fc <main+0x234>)
 800166a:	213c      	movs	r1, #60	; 0x3c
 800166c:	200c      	movs	r0, #12
 800166e:	f000 fb5e 	bl	8001d2e <ST7735_WriteString>

	  ST7735_WriteString(2, 80, "z :", Font_7x10, ST7735_RED, ST7735_BLACK);
 8001672:	4b24      	ldr	r3, [pc, #144]	; (8001704 <main+0x23c>)
 8001674:	2200      	movs	r2, #0
 8001676:	9202      	str	r2, [sp, #8]
 8001678:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 800167c:	9201      	str	r2, [sp, #4]
 800167e:	685a      	ldr	r2, [r3, #4]
 8001680:	9200      	str	r2, [sp, #0]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4a23      	ldr	r2, [pc, #140]	; (8001714 <main+0x24c>)
 8001686:	2150      	movs	r1, #80	; 0x50
 8001688:	2002      	movs	r0, #2
 800168a:	f000 fb50 	bl	8001d2e <ST7735_WriteString>
	  ST7735_WriteString(12, 90, z_str, Font_11x18, ST7735_GREEN, ST7735_BLACK);
 800168e:	4b1f      	ldr	r3, [pc, #124]	; (800170c <main+0x244>)
 8001690:	2200      	movs	r2, #0
 8001692:	9202      	str	r2, [sp, #8]
 8001694:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8001698:	9201      	str	r2, [sp, #4]
 800169a:	685a      	ldr	r2, [r3, #4]
 800169c:	9200      	str	r2, [sp, #0]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4a13      	ldr	r2, [pc, #76]	; (80016f0 <main+0x228>)
 80016a2:	215a      	movs	r1, #90	; 0x5a
 80016a4:	200c      	movs	r0, #12
 80016a6:	f000 fb42 	bl	8001d2e <ST7735_WriteString>
	  ST7735_WriteString(12, 100, zg_str, Font_11x18, ST7735_GREEN, ST7735_BLACK);
 80016aa:	4b18      	ldr	r3, [pc, #96]	; (800170c <main+0x244>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	9202      	str	r2, [sp, #8]
 80016b0:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80016b4:	9201      	str	r2, [sp, #4]
 80016b6:	685a      	ldr	r2, [r3, #4]
 80016b8:	9200      	str	r2, [sp, #0]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4a10      	ldr	r2, [pc, #64]	; (8001700 <main+0x238>)
 80016be:	2164      	movs	r1, #100	; 0x64
 80016c0:	200c      	movs	r0, #12
 80016c2:	f000 fb34 	bl	8001d2e <ST7735_WriteString>
	  ADXL_Measure(ON);
 80016c6:	e722      	b.n	800150e <main+0x46>
 80016c8:	20000224 	.word	0x20000224
 80016cc:	200004c8 	.word	0x200004c8
 80016d0:	20000484 	.word	0x20000484
 80016d4:	200002f8 	.word	0x200002f8
 80016d8:	2000025e 	.word	0x2000025e
 80016dc:	0800a470 	.word	0x0800a470
 80016e0:	20000364 	.word	0x20000364
 80016e4:	20000362 	.word	0x20000362
 80016e8:	2000022c 	.word	0x2000022c
 80016ec:	20000360 	.word	0x20000360
 80016f0:	20000488 	.word	0x20000488
 80016f4:	0800a474 	.word	0x0800a474
 80016f8:	200003cc 	.word	0x200003cc
 80016fc:	20000398 	.word	0x20000398
 8001700:	200002c4 	.word	0x200002c4
 8001704:	20000000 	.word	0x20000000
 8001708:	0800a478 	.word	0x0800a478
 800170c:	20000008 	.word	0x20000008
 8001710:	0800a47c 	.word	0x0800a47c
 8001714:	0800a480 	.word	0x0800a480

08001718 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b096      	sub	sp, #88	; 0x58
 800171c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800171e:	f107 0314 	add.w	r3, r7, #20
 8001722:	2244      	movs	r2, #68	; 0x44
 8001724:	2100      	movs	r1, #0
 8001726:	4618      	mov	r0, r3
 8001728:	f004 fa10 	bl	8005b4c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800172c:	463b      	mov	r3, r7
 800172e:	2200      	movs	r2, #0
 8001730:	601a      	str	r2, [r3, #0]
 8001732:	605a      	str	r2, [r3, #4]
 8001734:	609a      	str	r2, [r3, #8]
 8001736:	60da      	str	r2, [r3, #12]
 8001738:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800173a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800173e:	f001 f9dd 	bl	8002afc <HAL_PWREx_ControlVoltageScaling>
 8001742:	4603      	mov	r3, r0
 8001744:	2b00      	cmp	r3, #0
 8001746:	d001      	beq.n	800174c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001748:	f000 f974 	bl	8001a34 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800174c:	2302      	movs	r3, #2
 800174e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001750:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001754:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001756:	2310      	movs	r3, #16
 8001758:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800175a:	2302      	movs	r3, #2
 800175c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800175e:	2302      	movs	r3, #2
 8001760:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001762:	2301      	movs	r3, #1
 8001764:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001766:	230a      	movs	r3, #10
 8001768:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800176a:	2307      	movs	r3, #7
 800176c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800176e:	2302      	movs	r3, #2
 8001770:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001772:	2302      	movs	r3, #2
 8001774:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001776:	f107 0314 	add.w	r3, r7, #20
 800177a:	4618      	mov	r0, r3
 800177c:	f001 fa14 	bl	8002ba8 <HAL_RCC_OscConfig>
 8001780:	4603      	mov	r3, r0
 8001782:	2b00      	cmp	r3, #0
 8001784:	d001      	beq.n	800178a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8001786:	f000 f955 	bl	8001a34 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800178a:	230f      	movs	r3, #15
 800178c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800178e:	2303      	movs	r3, #3
 8001790:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001792:	2300      	movs	r3, #0
 8001794:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001796:	2300      	movs	r3, #0
 8001798:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800179a:	2300      	movs	r3, #0
 800179c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800179e:	463b      	mov	r3, r7
 80017a0:	2104      	movs	r1, #4
 80017a2:	4618      	mov	r0, r3
 80017a4:	f001 fde6 	bl	8003374 <HAL_RCC_ClockConfig>
 80017a8:	4603      	mov	r3, r0
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d001      	beq.n	80017b2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80017ae:	f000 f941 	bl	8001a34 <Error_Handler>
  }
}
 80017b2:	bf00      	nop
 80017b4:	3758      	adds	r7, #88	; 0x58
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}
	...

080017bc <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80017c0:	4b1b      	ldr	r3, [pc, #108]	; (8001830 <MX_SPI2_Init+0x74>)
 80017c2:	4a1c      	ldr	r2, [pc, #112]	; (8001834 <MX_SPI2_Init+0x78>)
 80017c4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80017c6:	4b1a      	ldr	r3, [pc, #104]	; (8001830 <MX_SPI2_Init+0x74>)
 80017c8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80017cc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_1LINE;
 80017ce:	4b18      	ldr	r3, [pc, #96]	; (8001830 <MX_SPI2_Init+0x74>)
 80017d0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80017d4:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80017d6:	4b16      	ldr	r3, [pc, #88]	; (8001830 <MX_SPI2_Init+0x74>)
 80017d8:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80017dc:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80017de:	4b14      	ldr	r3, [pc, #80]	; (8001830 <MX_SPI2_Init+0x74>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80017e4:	4b12      	ldr	r3, [pc, #72]	; (8001830 <MX_SPI2_Init+0x74>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80017ea:	4b11      	ldr	r3, [pc, #68]	; (8001830 <MX_SPI2_Init+0x74>)
 80017ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017f0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80017f2:	4b0f      	ldr	r3, [pc, #60]	; (8001830 <MX_SPI2_Init+0x74>)
 80017f4:	2218      	movs	r2, #24
 80017f6:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80017f8:	4b0d      	ldr	r3, [pc, #52]	; (8001830 <MX_SPI2_Init+0x74>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80017fe:	4b0c      	ldr	r3, [pc, #48]	; (8001830 <MX_SPI2_Init+0x74>)
 8001800:	2200      	movs	r2, #0
 8001802:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001804:	4b0a      	ldr	r3, [pc, #40]	; (8001830 <MX_SPI2_Init+0x74>)
 8001806:	2200      	movs	r2, #0
 8001808:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 800180a:	4b09      	ldr	r3, [pc, #36]	; (8001830 <MX_SPI2_Init+0x74>)
 800180c:	2207      	movs	r2, #7
 800180e:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001810:	4b07      	ldr	r3, [pc, #28]	; (8001830 <MX_SPI2_Init+0x74>)
 8001812:	2200      	movs	r2, #0
 8001814:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001816:	4b06      	ldr	r3, [pc, #24]	; (8001830 <MX_SPI2_Init+0x74>)
 8001818:	2208      	movs	r2, #8
 800181a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800181c:	4804      	ldr	r0, [pc, #16]	; (8001830 <MX_SPI2_Init+0x74>)
 800181e:	f002 fc6b 	bl	80040f8 <HAL_SPI_Init>
 8001822:	4603      	mov	r3, r0
 8001824:	2b00      	cmp	r3, #0
 8001826:	d001      	beq.n	800182c <MX_SPI2_Init+0x70>
  {
    Error_Handler();
 8001828:	f000 f904 	bl	8001a34 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800182c:	bf00      	nop
 800182e:	bd80      	pop	{r7, pc}
 8001830:	20000260 	.word	0x20000260
 8001834:	40003800 	.word	0x40003800

08001838 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 800183c:	4b1b      	ldr	r3, [pc, #108]	; (80018ac <MX_SPI3_Init+0x74>)
 800183e:	4a1c      	ldr	r2, [pc, #112]	; (80018b0 <MX_SPI3_Init+0x78>)
 8001840:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001842:	4b1a      	ldr	r3, [pc, #104]	; (80018ac <MX_SPI3_Init+0x74>)
 8001844:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001848:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800184a:	4b18      	ldr	r3, [pc, #96]	; (80018ac <MX_SPI3_Init+0x74>)
 800184c:	2200      	movs	r2, #0
 800184e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001850:	4b16      	ldr	r3, [pc, #88]	; (80018ac <MX_SPI3_Init+0x74>)
 8001852:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001856:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001858:	4b14      	ldr	r3, [pc, #80]	; (80018ac <MX_SPI3_Init+0x74>)
 800185a:	2202      	movs	r2, #2
 800185c:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 800185e:	4b13      	ldr	r3, [pc, #76]	; (80018ac <MX_SPI3_Init+0x74>)
 8001860:	2201      	movs	r2, #1
 8001862:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001864:	4b11      	ldr	r3, [pc, #68]	; (80018ac <MX_SPI3_Init+0x74>)
 8001866:	f44f 7200 	mov.w	r2, #512	; 0x200
 800186a:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800186c:	4b0f      	ldr	r3, [pc, #60]	; (80018ac <MX_SPI3_Init+0x74>)
 800186e:	2218      	movs	r2, #24
 8001870:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001872:	4b0e      	ldr	r3, [pc, #56]	; (80018ac <MX_SPI3_Init+0x74>)
 8001874:	2200      	movs	r2, #0
 8001876:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001878:	4b0c      	ldr	r3, [pc, #48]	; (80018ac <MX_SPI3_Init+0x74>)
 800187a:	2200      	movs	r2, #0
 800187c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800187e:	4b0b      	ldr	r3, [pc, #44]	; (80018ac <MX_SPI3_Init+0x74>)
 8001880:	2200      	movs	r2, #0
 8001882:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8001884:	4b09      	ldr	r3, [pc, #36]	; (80018ac <MX_SPI3_Init+0x74>)
 8001886:	2207      	movs	r2, #7
 8001888:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800188a:	4b08      	ldr	r3, [pc, #32]	; (80018ac <MX_SPI3_Init+0x74>)
 800188c:	2200      	movs	r2, #0
 800188e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001890:	4b06      	ldr	r3, [pc, #24]	; (80018ac <MX_SPI3_Init+0x74>)
 8001892:	2200      	movs	r2, #0
 8001894:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001896:	4805      	ldr	r0, [pc, #20]	; (80018ac <MX_SPI3_Init+0x74>)
 8001898:	f002 fc2e 	bl	80040f8 <HAL_SPI_Init>
 800189c:	4603      	mov	r3, r0
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d001      	beq.n	80018a6 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 80018a2:	f000 f8c7 	bl	8001a34 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80018a6:	bf00      	nop
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	bf00      	nop
 80018ac:	200002fc 	.word	0x200002fc
 80018b0:	40003c00 	.word	0x40003c00

080018b4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80018b8:	4b14      	ldr	r3, [pc, #80]	; (800190c <MX_USART2_UART_Init+0x58>)
 80018ba:	4a15      	ldr	r2, [pc, #84]	; (8001910 <MX_USART2_UART_Init+0x5c>)
 80018bc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80018be:	4b13      	ldr	r3, [pc, #76]	; (800190c <MX_USART2_UART_Init+0x58>)
 80018c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80018c4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80018c6:	4b11      	ldr	r3, [pc, #68]	; (800190c <MX_USART2_UART_Init+0x58>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80018cc:	4b0f      	ldr	r3, [pc, #60]	; (800190c <MX_USART2_UART_Init+0x58>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80018d2:	4b0e      	ldr	r3, [pc, #56]	; (800190c <MX_USART2_UART_Init+0x58>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80018d8:	4b0c      	ldr	r3, [pc, #48]	; (800190c <MX_USART2_UART_Init+0x58>)
 80018da:	220c      	movs	r2, #12
 80018dc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018de:	4b0b      	ldr	r3, [pc, #44]	; (800190c <MX_USART2_UART_Init+0x58>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80018e4:	4b09      	ldr	r3, [pc, #36]	; (800190c <MX_USART2_UART_Init+0x58>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80018ea:	4b08      	ldr	r3, [pc, #32]	; (800190c <MX_USART2_UART_Init+0x58>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80018f0:	4b06      	ldr	r3, [pc, #24]	; (800190c <MX_USART2_UART_Init+0x58>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80018f6:	4805      	ldr	r0, [pc, #20]	; (800190c <MX_USART2_UART_Init+0x58>)
 80018f8:	f003 fc2a 	bl	8005150 <HAL_UART_Init>
 80018fc:	4603      	mov	r3, r0
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d001      	beq.n	8001906 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001902:	f000 f897 	bl	8001a34 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001906:	bf00      	nop
 8001908:	bd80      	pop	{r7, pc}
 800190a:	bf00      	nop
 800190c:	20000400 	.word	0x20000400
 8001910:	40004400 	.word	0x40004400

08001914 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b08a      	sub	sp, #40	; 0x28
 8001918:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800191a:	f107 0314 	add.w	r3, r7, #20
 800191e:	2200      	movs	r2, #0
 8001920:	601a      	str	r2, [r3, #0]
 8001922:	605a      	str	r2, [r3, #4]
 8001924:	609a      	str	r2, [r3, #8]
 8001926:	60da      	str	r2, [r3, #12]
 8001928:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800192a:	4b3e      	ldr	r3, [pc, #248]	; (8001a24 <MX_GPIO_Init+0x110>)
 800192c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800192e:	4a3d      	ldr	r2, [pc, #244]	; (8001a24 <MX_GPIO_Init+0x110>)
 8001930:	f043 0304 	orr.w	r3, r3, #4
 8001934:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001936:	4b3b      	ldr	r3, [pc, #236]	; (8001a24 <MX_GPIO_Init+0x110>)
 8001938:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800193a:	f003 0304 	and.w	r3, r3, #4
 800193e:	613b      	str	r3, [r7, #16]
 8001940:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001942:	4b38      	ldr	r3, [pc, #224]	; (8001a24 <MX_GPIO_Init+0x110>)
 8001944:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001946:	4a37      	ldr	r2, [pc, #220]	; (8001a24 <MX_GPIO_Init+0x110>)
 8001948:	f043 0301 	orr.w	r3, r3, #1
 800194c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800194e:	4b35      	ldr	r3, [pc, #212]	; (8001a24 <MX_GPIO_Init+0x110>)
 8001950:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001952:	f003 0301 	and.w	r3, r3, #1
 8001956:	60fb      	str	r3, [r7, #12]
 8001958:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800195a:	4b32      	ldr	r3, [pc, #200]	; (8001a24 <MX_GPIO_Init+0x110>)
 800195c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800195e:	4a31      	ldr	r2, [pc, #196]	; (8001a24 <MX_GPIO_Init+0x110>)
 8001960:	f043 0302 	orr.w	r3, r3, #2
 8001964:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001966:	4b2f      	ldr	r3, [pc, #188]	; (8001a24 <MX_GPIO_Init+0x110>)
 8001968:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800196a:	f003 0302 	and.w	r3, r3, #2
 800196e:	60bb      	str	r3, [r7, #8]
 8001970:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001972:	4b2c      	ldr	r3, [pc, #176]	; (8001a24 <MX_GPIO_Init+0x110>)
 8001974:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001976:	4a2b      	ldr	r2, [pc, #172]	; (8001a24 <MX_GPIO_Init+0x110>)
 8001978:	f043 0308 	orr.w	r3, r3, #8
 800197c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800197e:	4b29      	ldr	r3, [pc, #164]	; (8001a24 <MX_GPIO_Init+0x110>)
 8001980:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001982:	f003 0308 	and.w	r3, r3, #8
 8001986:	607b      	str	r3, [r7, #4]
 8001988:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_RS_DC_Pin|GPIO_CS_Pin|GPIO_Rst_Pin, GPIO_PIN_RESET);
 800198a:	2200      	movs	r2, #0
 800198c:	210d      	movs	r1, #13
 800198e:	4826      	ldr	r0, [pc, #152]	; (8001a28 <MX_GPIO_Init+0x114>)
 8001990:	f001 f88e 	bl	8002ab0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001994:	2200      	movs	r2, #0
 8001996:	2120      	movs	r1, #32
 8001998:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800199c:	f001 f888 	bl	8002ab0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ADXL_CS_GPIO_Port, ADXL_CS_Pin, GPIO_PIN_RESET);
 80019a0:	2200      	movs	r2, #0
 80019a2:	2104      	movs	r1, #4
 80019a4:	4821      	ldr	r0, [pc, #132]	; (8001a2c <MX_GPIO_Init+0x118>)
 80019a6:	f001 f883 	bl	8002ab0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80019aa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80019b0:	4b1f      	ldr	r3, [pc, #124]	; (8001a30 <MX_GPIO_Init+0x11c>)
 80019b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b4:	2300      	movs	r3, #0
 80019b6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80019b8:	f107 0314 	add.w	r3, r7, #20
 80019bc:	4619      	mov	r1, r3
 80019be:	481a      	ldr	r0, [pc, #104]	; (8001a28 <MX_GPIO_Init+0x114>)
 80019c0:	f000 fecc 	bl	800275c <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO_RS_DC_Pin GPIO_CS_Pin GPIO_Rst_Pin */
  GPIO_InitStruct.Pin = GPIO_RS_DC_Pin|GPIO_CS_Pin|GPIO_Rst_Pin;
 80019c4:	230d      	movs	r3, #13
 80019c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019c8:	2301      	movs	r3, #1
 80019ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019cc:	2300      	movs	r3, #0
 80019ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019d0:	2300      	movs	r3, #0
 80019d2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019d4:	f107 0314 	add.w	r3, r7, #20
 80019d8:	4619      	mov	r1, r3
 80019da:	4813      	ldr	r0, [pc, #76]	; (8001a28 <MX_GPIO_Init+0x114>)
 80019dc:	f000 febe 	bl	800275c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80019e0:	2320      	movs	r3, #32
 80019e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019e4:	2301      	movs	r3, #1
 80019e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e8:	2300      	movs	r3, #0
 80019ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019ec:	2300      	movs	r3, #0
 80019ee:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80019f0:	f107 0314 	add.w	r3, r7, #20
 80019f4:	4619      	mov	r1, r3
 80019f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019fa:	f000 feaf 	bl	800275c <HAL_GPIO_Init>

  /*Configure GPIO pin : ADXL_CS_Pin */
  GPIO_InitStruct.Pin = ADXL_CS_Pin;
 80019fe:	2304      	movs	r3, #4
 8001a00:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a02:	2301      	movs	r3, #1
 8001a04:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a06:	2300      	movs	r3, #0
 8001a08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a0a:	2302      	movs	r3, #2
 8001a0c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ADXL_CS_GPIO_Port, &GPIO_InitStruct);
 8001a0e:	f107 0314 	add.w	r3, r7, #20
 8001a12:	4619      	mov	r1, r3
 8001a14:	4805      	ldr	r0, [pc, #20]	; (8001a2c <MX_GPIO_Init+0x118>)
 8001a16:	f000 fea1 	bl	800275c <HAL_GPIO_Init>

}
 8001a1a:	bf00      	nop
 8001a1c:	3728      	adds	r7, #40	; 0x28
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	bf00      	nop
 8001a24:	40021000 	.word	0x40021000
 8001a28:	48000800 	.word	0x48000800
 8001a2c:	48000c00 	.word	0x48000c00
 8001a30:	10210000 	.word	0x10210000

08001a34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a34:	b480      	push	{r7}
 8001a36:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a38:	b672      	cpsid	i
}
 8001a3a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a3c:	e7fe      	b.n	8001a3c <Error_Handler+0x8>
	...

08001a40 <ST7735_Select>:
    ST7735_NORON  ,    DELAY, //  3: Normal display on, no args, w/delay
      10,                     //     10 ms delay
    ST7735_DISPON ,    DELAY, //  4: Main screen turn on, no args w/delay
      100 };                  //     100 ms delay

static void ST7735_Select() {
 8001a40:	b580      	push	{r7, lr}
 8001a42:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_RESET);
 8001a44:	2200      	movs	r2, #0
 8001a46:	2104      	movs	r1, #4
 8001a48:	4802      	ldr	r0, [pc, #8]	; (8001a54 <ST7735_Select+0x14>)
 8001a4a:	f001 f831 	bl	8002ab0 <HAL_GPIO_WritePin>
}
 8001a4e:	bf00      	nop
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	48000800 	.word	0x48000800

08001a58 <ST7735_Unselect>:

void ST7735_Unselect() {
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_SET);
 8001a5c:	2201      	movs	r2, #1
 8001a5e:	2104      	movs	r1, #4
 8001a60:	4802      	ldr	r0, [pc, #8]	; (8001a6c <ST7735_Unselect+0x14>)
 8001a62:	f001 f825 	bl	8002ab0 <HAL_GPIO_WritePin>
}
 8001a66:	bf00      	nop
 8001a68:	bd80      	pop	{r7, pc}
 8001a6a:	bf00      	nop
 8001a6c:	48000800 	.word	0x48000800

08001a70 <ST7735_Reset>:

static void ST7735_Reset() {
 8001a70:	b580      	push	{r7, lr}
 8001a72:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_RESET);
 8001a74:	2200      	movs	r2, #0
 8001a76:	2108      	movs	r1, #8
 8001a78:	4806      	ldr	r0, [pc, #24]	; (8001a94 <ST7735_Reset+0x24>)
 8001a7a:	f001 f819 	bl	8002ab0 <HAL_GPIO_WritePin>
    HAL_Delay(5);
 8001a7e:	2005      	movs	r0, #5
 8001a80:	f000 fcf6 	bl	8002470 <HAL_Delay>
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_SET);
 8001a84:	2201      	movs	r2, #1
 8001a86:	2108      	movs	r1, #8
 8001a88:	4802      	ldr	r0, [pc, #8]	; (8001a94 <ST7735_Reset+0x24>)
 8001a8a:	f001 f811 	bl	8002ab0 <HAL_GPIO_WritePin>
}
 8001a8e:	bf00      	nop
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	bf00      	nop
 8001a94:	48000800 	.word	0x48000800

08001a98 <ST7735_WriteCommand>:

static void ST7735_WriteCommand(uint8_t cmd) {
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b082      	sub	sp, #8
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_RESET);
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	2101      	movs	r1, #1
 8001aa6:	4807      	ldr	r0, [pc, #28]	; (8001ac4 <ST7735_WriteCommand+0x2c>)
 8001aa8:	f001 f802 	bl	8002ab0 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 8001aac:	1df9      	adds	r1, r7, #7
 8001aae:	f04f 33ff 	mov.w	r3, #4294967295
 8001ab2:	2201      	movs	r2, #1
 8001ab4:	4804      	ldr	r0, [pc, #16]	; (8001ac8 <ST7735_WriteCommand+0x30>)
 8001ab6:	f002 fbc2 	bl	800423e <HAL_SPI_Transmit>
}
 8001aba:	bf00      	nop
 8001abc:	3708      	adds	r7, #8
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	bf00      	nop
 8001ac4:	48000800 	.word	0x48000800
 8001ac8:	20000260 	.word	0x20000260

08001acc <ST7735_WriteData>:

static void ST7735_WriteData(uint8_t* buff, size_t buff_size) {
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b082      	sub	sp, #8
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
 8001ad4:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 8001ad6:	2201      	movs	r2, #1
 8001ad8:	2101      	movs	r1, #1
 8001ada:	4807      	ldr	r0, [pc, #28]	; (8001af8 <ST7735_WriteData+0x2c>)
 8001adc:	f000 ffe8 	bl	8002ab0 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	b29a      	uxth	r2, r3
 8001ae4:	f04f 33ff 	mov.w	r3, #4294967295
 8001ae8:	6879      	ldr	r1, [r7, #4]
 8001aea:	4804      	ldr	r0, [pc, #16]	; (8001afc <ST7735_WriteData+0x30>)
 8001aec:	f002 fba7 	bl	800423e <HAL_SPI_Transmit>
}
 8001af0:	bf00      	nop
 8001af2:	3708      	adds	r7, #8
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bd80      	pop	{r7, pc}
 8001af8:	48000800 	.word	0x48000800
 8001afc:	20000260 	.word	0x20000260

08001b00 <ST7735_ExecuteCommandList>:

static void ST7735_ExecuteCommandList(const uint8_t *addr) {
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b084      	sub	sp, #16
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	1c5a      	adds	r2, r3, #1
 8001b0c:	607a      	str	r2, [r7, #4]
 8001b0e:	781b      	ldrb	r3, [r3, #0]
 8001b10:	73fb      	strb	r3, [r7, #15]
    while(numCommands--) {
 8001b12:	e034      	b.n	8001b7e <ST7735_ExecuteCommandList+0x7e>
        uint8_t cmd = *addr++;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	1c5a      	adds	r2, r3, #1
 8001b18:	607a      	str	r2, [r7, #4]
 8001b1a:	781b      	ldrb	r3, [r3, #0]
 8001b1c:	72fb      	strb	r3, [r7, #11]
        ST7735_WriteCommand(cmd);
 8001b1e:	7afb      	ldrb	r3, [r7, #11]
 8001b20:	4618      	mov	r0, r3
 8001b22:	f7ff ffb9 	bl	8001a98 <ST7735_WriteCommand>

        numArgs = *addr++;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	1c5a      	adds	r2, r3, #1
 8001b2a:	607a      	str	r2, [r7, #4]
 8001b2c:	781b      	ldrb	r3, [r3, #0]
 8001b2e:	72bb      	strb	r3, [r7, #10]
        // If high bit set, delay follows args
        ms = numArgs & DELAY;
 8001b30:	7abb      	ldrb	r3, [r7, #10]
 8001b32:	b29b      	uxth	r3, r3
 8001b34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b38:	81bb      	strh	r3, [r7, #12]
        numArgs &= ~DELAY;
 8001b3a:	7abb      	ldrb	r3, [r7, #10]
 8001b3c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001b40:	72bb      	strb	r3, [r7, #10]
        if(numArgs) {
 8001b42:	7abb      	ldrb	r3, [r7, #10]
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d008      	beq.n	8001b5a <ST7735_ExecuteCommandList+0x5a>
            ST7735_WriteData((uint8_t*)addr, numArgs);
 8001b48:	7abb      	ldrb	r3, [r7, #10]
 8001b4a:	4619      	mov	r1, r3
 8001b4c:	6878      	ldr	r0, [r7, #4]
 8001b4e:	f7ff ffbd 	bl	8001acc <ST7735_WriteData>
            addr += numArgs;
 8001b52:	7abb      	ldrb	r3, [r7, #10]
 8001b54:	687a      	ldr	r2, [r7, #4]
 8001b56:	4413      	add	r3, r2
 8001b58:	607b      	str	r3, [r7, #4]
        }

        if(ms) {
 8001b5a:	89bb      	ldrh	r3, [r7, #12]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d00e      	beq.n	8001b7e <ST7735_ExecuteCommandList+0x7e>
            ms = *addr++;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	1c5a      	adds	r2, r3, #1
 8001b64:	607a      	str	r2, [r7, #4]
 8001b66:	781b      	ldrb	r3, [r3, #0]
 8001b68:	81bb      	strh	r3, [r7, #12]
            if(ms == 255) ms = 500;
 8001b6a:	89bb      	ldrh	r3, [r7, #12]
 8001b6c:	2bff      	cmp	r3, #255	; 0xff
 8001b6e:	d102      	bne.n	8001b76 <ST7735_ExecuteCommandList+0x76>
 8001b70:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001b74:	81bb      	strh	r3, [r7, #12]
            HAL_Delay(ms);
 8001b76:	89bb      	ldrh	r3, [r7, #12]
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f000 fc79 	bl	8002470 <HAL_Delay>
    while(numCommands--) {
 8001b7e:	7bfb      	ldrb	r3, [r7, #15]
 8001b80:	1e5a      	subs	r2, r3, #1
 8001b82:	73fa      	strb	r2, [r7, #15]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d1c5      	bne.n	8001b14 <ST7735_ExecuteCommandList+0x14>
        }
    }
}
 8001b88:	bf00      	nop
 8001b8a:	bf00      	nop
 8001b8c:	3710      	adds	r7, #16
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}

08001b92 <ST7735_SetAddressWindow>:

static void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1) {
 8001b92:	b590      	push	{r4, r7, lr}
 8001b94:	b085      	sub	sp, #20
 8001b96:	af00      	add	r7, sp, #0
 8001b98:	4604      	mov	r4, r0
 8001b9a:	4608      	mov	r0, r1
 8001b9c:	4611      	mov	r1, r2
 8001b9e:	461a      	mov	r2, r3
 8001ba0:	4623      	mov	r3, r4
 8001ba2:	71fb      	strb	r3, [r7, #7]
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	71bb      	strb	r3, [r7, #6]
 8001ba8:	460b      	mov	r3, r1
 8001baa:	717b      	strb	r3, [r7, #5]
 8001bac:	4613      	mov	r3, r2
 8001bae:	713b      	strb	r3, [r7, #4]
    // column address set
    ST7735_WriteCommand(ST7735_CASET);
 8001bb0:	202a      	movs	r0, #42	; 0x2a
 8001bb2:	f7ff ff71 	bl	8001a98 <ST7735_WriteCommand>
    uint8_t data[] = { 0x00, x0 + ST7735_XSTART, 0x00, x1 + ST7735_XSTART };
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	733b      	strb	r3, [r7, #12]
 8001bba:	79fb      	ldrb	r3, [r7, #7]
 8001bbc:	3302      	adds	r3, #2
 8001bbe:	b2db      	uxtb	r3, r3
 8001bc0:	737b      	strb	r3, [r7, #13]
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	73bb      	strb	r3, [r7, #14]
 8001bc6:	797b      	ldrb	r3, [r7, #5]
 8001bc8:	3302      	adds	r3, #2
 8001bca:	b2db      	uxtb	r3, r3
 8001bcc:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 8001bce:	f107 030c 	add.w	r3, r7, #12
 8001bd2:	2104      	movs	r1, #4
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f7ff ff79 	bl	8001acc <ST7735_WriteData>

    // row address set
    ST7735_WriteCommand(ST7735_RASET);
 8001bda:	202b      	movs	r0, #43	; 0x2b
 8001bdc:	f7ff ff5c 	bl	8001a98 <ST7735_WriteCommand>
    data[1] = y0 + ST7735_YSTART;
 8001be0:	79bb      	ldrb	r3, [r7, #6]
 8001be2:	3303      	adds	r3, #3
 8001be4:	b2db      	uxtb	r3, r3
 8001be6:	737b      	strb	r3, [r7, #13]
    data[3] = y1 + ST7735_YSTART;
 8001be8:	793b      	ldrb	r3, [r7, #4]
 8001bea:	3303      	adds	r3, #3
 8001bec:	b2db      	uxtb	r3, r3
 8001bee:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 8001bf0:	f107 030c 	add.w	r3, r7, #12
 8001bf4:	2104      	movs	r1, #4
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	f7ff ff68 	bl	8001acc <ST7735_WriteData>

    // write to RAM
    ST7735_WriteCommand(ST7735_RAMWR);
 8001bfc:	202c      	movs	r0, #44	; 0x2c
 8001bfe:	f7ff ff4b 	bl	8001a98 <ST7735_WriteCommand>
}
 8001c02:	bf00      	nop
 8001c04:	3714      	adds	r7, #20
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd90      	pop	{r4, r7, pc}
	...

08001c0c <ST7735_Init>:

void ST7735_Init() {
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	af00      	add	r7, sp, #0
    ST7735_Select();
 8001c10:	f7ff ff16 	bl	8001a40 <ST7735_Select>
    ST7735_Reset();
 8001c14:	f7ff ff2c 	bl	8001a70 <ST7735_Reset>
    ST7735_ExecuteCommandList(init_cmds1);
 8001c18:	4806      	ldr	r0, [pc, #24]	; (8001c34 <ST7735_Init+0x28>)
 8001c1a:	f7ff ff71 	bl	8001b00 <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds2);
 8001c1e:	4806      	ldr	r0, [pc, #24]	; (8001c38 <ST7735_Init+0x2c>)
 8001c20:	f7ff ff6e 	bl	8001b00 <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds3);
 8001c24:	4805      	ldr	r0, [pc, #20]	; (8001c3c <ST7735_Init+0x30>)
 8001c26:	f7ff ff6b 	bl	8001b00 <ST7735_ExecuteCommandList>
    ST7735_Unselect();
 8001c2a:	f7ff ff15 	bl	8001a58 <ST7735_Unselect>
}
 8001c2e:	bf00      	nop
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	bf00      	nop
 8001c34:	0800b94c 	.word	0x0800b94c
 8001c38:	0800b988 	.word	0x0800b988
 8001c3c:	0800b998 	.word	0x0800b998

08001c40 <ST7735_WriteChar>:
    ST7735_WriteData(data, sizeof(data));

    ST7735_Unselect();
}

static void ST7735_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 8001c40:	b082      	sub	sp, #8
 8001c42:	b590      	push	{r4, r7, lr}
 8001c44:	b089      	sub	sp, #36	; 0x24
 8001c46:	af00      	add	r7, sp, #0
 8001c48:	637b      	str	r3, [r7, #52]	; 0x34
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	80fb      	strh	r3, [r7, #6]
 8001c4e:	460b      	mov	r3, r1
 8001c50:	80bb      	strh	r3, [r7, #4]
 8001c52:	4613      	mov	r3, r2
 8001c54:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, j;

    ST7735_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 8001c56:	88fb      	ldrh	r3, [r7, #6]
 8001c58:	b2d8      	uxtb	r0, r3
 8001c5a:	88bb      	ldrh	r3, [r7, #4]
 8001c5c:	b2d9      	uxtb	r1, r3
 8001c5e:	88fb      	ldrh	r3, [r7, #6]
 8001c60:	b2da      	uxtb	r2, r3
 8001c62:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001c66:	4413      	add	r3, r2
 8001c68:	b2db      	uxtb	r3, r3
 8001c6a:	3b01      	subs	r3, #1
 8001c6c:	b2dc      	uxtb	r4, r3
 8001c6e:	88bb      	ldrh	r3, [r7, #4]
 8001c70:	b2da      	uxtb	r2, r3
 8001c72:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8001c76:	4413      	add	r3, r2
 8001c78:	b2db      	uxtb	r3, r3
 8001c7a:	3b01      	subs	r3, #1
 8001c7c:	b2db      	uxtb	r3, r3
 8001c7e:	4622      	mov	r2, r4
 8001c80:	f7ff ff87 	bl	8001b92 <ST7735_SetAddressWindow>

    for(i = 0; i < font.height; i++) {
 8001c84:	2300      	movs	r3, #0
 8001c86:	61fb      	str	r3, [r7, #28]
 8001c88:	e043      	b.n	8001d12 <ST7735_WriteChar+0xd2>
        b = font.data[(ch - 32) * font.height + i];
 8001c8a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001c8c:	78fb      	ldrb	r3, [r7, #3]
 8001c8e:	3b20      	subs	r3, #32
 8001c90:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 8001c94:	fb01 f303 	mul.w	r3, r1, r3
 8001c98:	4619      	mov	r1, r3
 8001c9a:	69fb      	ldr	r3, [r7, #28]
 8001c9c:	440b      	add	r3, r1
 8001c9e:	005b      	lsls	r3, r3, #1
 8001ca0:	4413      	add	r3, r2
 8001ca2:	881b      	ldrh	r3, [r3, #0]
 8001ca4:	617b      	str	r3, [r7, #20]
        for(j = 0; j < font.width; j++) {
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	61bb      	str	r3, [r7, #24]
 8001caa:	e029      	b.n	8001d00 <ST7735_WriteChar+0xc0>
            if((b << j) & 0x8000)  {
 8001cac:	697a      	ldr	r2, [r7, #20]
 8001cae:	69bb      	ldr	r3, [r7, #24]
 8001cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d00e      	beq.n	8001cda <ST7735_WriteChar+0x9a>
                uint8_t data[] = { color >> 8, color & 0xFF };
 8001cbc:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8001cbe:	0a1b      	lsrs	r3, r3, #8
 8001cc0:	b29b      	uxth	r3, r3
 8001cc2:	b2db      	uxtb	r3, r3
 8001cc4:	743b      	strb	r3, [r7, #16]
 8001cc6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8001cc8:	b2db      	uxtb	r3, r3
 8001cca:	747b      	strb	r3, [r7, #17]
                ST7735_WriteData(data, sizeof(data));
 8001ccc:	f107 0310 	add.w	r3, r7, #16
 8001cd0:	2102      	movs	r1, #2
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	f7ff fefa 	bl	8001acc <ST7735_WriteData>
 8001cd8:	e00f      	b.n	8001cfa <ST7735_WriteChar+0xba>
            } else {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 8001cda:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001cde:	0a1b      	lsrs	r3, r3, #8
 8001ce0:	b29b      	uxth	r3, r3
 8001ce2:	b2db      	uxtb	r3, r3
 8001ce4:	733b      	strb	r3, [r7, #12]
 8001ce6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001cea:	b2db      	uxtb	r3, r3
 8001cec:	737b      	strb	r3, [r7, #13]
                ST7735_WriteData(data, sizeof(data));
 8001cee:	f107 030c 	add.w	r3, r7, #12
 8001cf2:	2102      	movs	r1, #2
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f7ff fee9 	bl	8001acc <ST7735_WriteData>
        for(j = 0; j < font.width; j++) {
 8001cfa:	69bb      	ldr	r3, [r7, #24]
 8001cfc:	3301      	adds	r3, #1
 8001cfe:	61bb      	str	r3, [r7, #24]
 8001d00:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001d04:	461a      	mov	r2, r3
 8001d06:	69bb      	ldr	r3, [r7, #24]
 8001d08:	4293      	cmp	r3, r2
 8001d0a:	d3cf      	bcc.n	8001cac <ST7735_WriteChar+0x6c>
    for(i = 0; i < font.height; i++) {
 8001d0c:	69fb      	ldr	r3, [r7, #28]
 8001d0e:	3301      	adds	r3, #1
 8001d10:	61fb      	str	r3, [r7, #28]
 8001d12:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8001d16:	461a      	mov	r2, r3
 8001d18:	69fb      	ldr	r3, [r7, #28]
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d3b5      	bcc.n	8001c8a <ST7735_WriteChar+0x4a>
            }
        }
    }
}
 8001d1e:	bf00      	nop
 8001d20:	bf00      	nop
 8001d22:	3724      	adds	r7, #36	; 0x24
 8001d24:	46bd      	mov	sp, r7
 8001d26:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8001d2a:	b002      	add	sp, #8
 8001d2c:	4770      	bx	lr

08001d2e <ST7735_WriteString>:
        }
    }
}
*/

void ST7735_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 8001d2e:	b082      	sub	sp, #8
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b086      	sub	sp, #24
 8001d34:	af04      	add	r7, sp, #16
 8001d36:	603a      	str	r2, [r7, #0]
 8001d38:	617b      	str	r3, [r7, #20]
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	80fb      	strh	r3, [r7, #6]
 8001d3e:	460b      	mov	r3, r1
 8001d40:	80bb      	strh	r3, [r7, #4]
    ST7735_Select();
 8001d42:	f7ff fe7d 	bl	8001a40 <ST7735_Select>

    while(*str) {
 8001d46:	e02d      	b.n	8001da4 <ST7735_WriteString+0x76>
        if(x + font.width >= ST7735_WIDTH) {
 8001d48:	88fb      	ldrh	r3, [r7, #6]
 8001d4a:	7d3a      	ldrb	r2, [r7, #20]
 8001d4c:	4413      	add	r3, r2
 8001d4e:	2b7f      	cmp	r3, #127	; 0x7f
 8001d50:	dd13      	ble.n	8001d7a <ST7735_WriteString+0x4c>
            x = 0;
 8001d52:	2300      	movs	r3, #0
 8001d54:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 8001d56:	7d7b      	ldrb	r3, [r7, #21]
 8001d58:	b29a      	uxth	r2, r3
 8001d5a:	88bb      	ldrh	r3, [r7, #4]
 8001d5c:	4413      	add	r3, r2
 8001d5e:	80bb      	strh	r3, [r7, #4]
            if(y + font.height >= ST7735_HEIGHT) {
 8001d60:	88bb      	ldrh	r3, [r7, #4]
 8001d62:	7d7a      	ldrb	r2, [r7, #21]
 8001d64:	4413      	add	r3, r2
 8001d66:	2b7f      	cmp	r3, #127	; 0x7f
 8001d68:	dc21      	bgt.n	8001dae <ST7735_WriteString+0x80>
                break;
            }

            if(*str == ' ') {
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	781b      	ldrb	r3, [r3, #0]
 8001d6e:	2b20      	cmp	r3, #32
 8001d70:	d103      	bne.n	8001d7a <ST7735_WriteString+0x4c>
                // skip spaces in the beginning of the new line
                str++;
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	3301      	adds	r3, #1
 8001d76:	603b      	str	r3, [r7, #0]
                continue;
 8001d78:	e014      	b.n	8001da4 <ST7735_WriteString+0x76>
            }
        }

        ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	781a      	ldrb	r2, [r3, #0]
 8001d7e:	88b9      	ldrh	r1, [r7, #4]
 8001d80:	88f8      	ldrh	r0, [r7, #6]
 8001d82:	8c3b      	ldrh	r3, [r7, #32]
 8001d84:	9302      	str	r3, [sp, #8]
 8001d86:	8bbb      	ldrh	r3, [r7, #28]
 8001d88:	9301      	str	r3, [sp, #4]
 8001d8a:	69bb      	ldr	r3, [r7, #24]
 8001d8c:	9300      	str	r3, [sp, #0]
 8001d8e:	697b      	ldr	r3, [r7, #20]
 8001d90:	f7ff ff56 	bl	8001c40 <ST7735_WriteChar>
        x += font.width;
 8001d94:	7d3b      	ldrb	r3, [r7, #20]
 8001d96:	b29a      	uxth	r2, r3
 8001d98:	88fb      	ldrh	r3, [r7, #6]
 8001d9a:	4413      	add	r3, r2
 8001d9c:	80fb      	strh	r3, [r7, #6]
        str++;
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	3301      	adds	r3, #1
 8001da2:	603b      	str	r3, [r7, #0]
    while(*str) {
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	781b      	ldrb	r3, [r3, #0]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d1cd      	bne.n	8001d48 <ST7735_WriteString+0x1a>
 8001dac:	e000      	b.n	8001db0 <ST7735_WriteString+0x82>
                break;
 8001dae:	bf00      	nop
    }

    ST7735_Unselect();
 8001db0:	f7ff fe52 	bl	8001a58 <ST7735_Unselect>
}
 8001db4:	bf00      	nop
 8001db6:	3708      	adds	r7, #8
 8001db8:	46bd      	mov	sp, r7
 8001dba:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001dbe:	b002      	add	sp, #8
 8001dc0:	4770      	bx	lr
	...

08001dc4 <ST7735_FillRectangle>:

void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 8001dc4:	b590      	push	{r4, r7, lr}
 8001dc6:	b085      	sub	sp, #20
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	4604      	mov	r4, r0
 8001dcc:	4608      	mov	r0, r1
 8001dce:	4611      	mov	r1, r2
 8001dd0:	461a      	mov	r2, r3
 8001dd2:	4623      	mov	r3, r4
 8001dd4:	80fb      	strh	r3, [r7, #6]
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	80bb      	strh	r3, [r7, #4]
 8001dda:	460b      	mov	r3, r1
 8001ddc:	807b      	strh	r3, [r7, #2]
 8001dde:	4613      	mov	r3, r2
 8001de0:	803b      	strh	r3, [r7, #0]
    // clipping
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8001de2:	88fb      	ldrh	r3, [r7, #6]
 8001de4:	2b7f      	cmp	r3, #127	; 0x7f
 8001de6:	d857      	bhi.n	8001e98 <ST7735_FillRectangle+0xd4>
 8001de8:	88bb      	ldrh	r3, [r7, #4]
 8001dea:	2b7f      	cmp	r3, #127	; 0x7f
 8001dec:	d854      	bhi.n	8001e98 <ST7735_FillRectangle+0xd4>
    if((x + w - 1) >= ST7735_WIDTH) w = ST7735_WIDTH - x;
 8001dee:	88fa      	ldrh	r2, [r7, #6]
 8001df0:	887b      	ldrh	r3, [r7, #2]
 8001df2:	4413      	add	r3, r2
 8001df4:	2b80      	cmp	r3, #128	; 0x80
 8001df6:	dd03      	ble.n	8001e00 <ST7735_FillRectangle+0x3c>
 8001df8:	88fb      	ldrh	r3, [r7, #6]
 8001dfa:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8001dfe:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= ST7735_HEIGHT) h = ST7735_HEIGHT - y;
 8001e00:	88ba      	ldrh	r2, [r7, #4]
 8001e02:	883b      	ldrh	r3, [r7, #0]
 8001e04:	4413      	add	r3, r2
 8001e06:	2b80      	cmp	r3, #128	; 0x80
 8001e08:	dd03      	ble.n	8001e12 <ST7735_FillRectangle+0x4e>
 8001e0a:	88bb      	ldrh	r3, [r7, #4]
 8001e0c:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8001e10:	803b      	strh	r3, [r7, #0]

    ST7735_Select();
 8001e12:	f7ff fe15 	bl	8001a40 <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 8001e16:	88fb      	ldrh	r3, [r7, #6]
 8001e18:	b2d8      	uxtb	r0, r3
 8001e1a:	88bb      	ldrh	r3, [r7, #4]
 8001e1c:	b2d9      	uxtb	r1, r3
 8001e1e:	88fb      	ldrh	r3, [r7, #6]
 8001e20:	b2da      	uxtb	r2, r3
 8001e22:	887b      	ldrh	r3, [r7, #2]
 8001e24:	b2db      	uxtb	r3, r3
 8001e26:	4413      	add	r3, r2
 8001e28:	b2db      	uxtb	r3, r3
 8001e2a:	3b01      	subs	r3, #1
 8001e2c:	b2dc      	uxtb	r4, r3
 8001e2e:	88bb      	ldrh	r3, [r7, #4]
 8001e30:	b2da      	uxtb	r2, r3
 8001e32:	883b      	ldrh	r3, [r7, #0]
 8001e34:	b2db      	uxtb	r3, r3
 8001e36:	4413      	add	r3, r2
 8001e38:	b2db      	uxtb	r3, r3
 8001e3a:	3b01      	subs	r3, #1
 8001e3c:	b2db      	uxtb	r3, r3
 8001e3e:	4622      	mov	r2, r4
 8001e40:	f7ff fea7 	bl	8001b92 <ST7735_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 8001e44:	8c3b      	ldrh	r3, [r7, #32]
 8001e46:	0a1b      	lsrs	r3, r3, #8
 8001e48:	b29b      	uxth	r3, r3
 8001e4a:	b2db      	uxtb	r3, r3
 8001e4c:	733b      	strb	r3, [r7, #12]
 8001e4e:	8c3b      	ldrh	r3, [r7, #32]
 8001e50:	b2db      	uxtb	r3, r3
 8001e52:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 8001e54:	2201      	movs	r2, #1
 8001e56:	2101      	movs	r1, #1
 8001e58:	4811      	ldr	r0, [pc, #68]	; (8001ea0 <ST7735_FillRectangle+0xdc>)
 8001e5a:	f000 fe29 	bl	8002ab0 <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 8001e5e:	883b      	ldrh	r3, [r7, #0]
 8001e60:	80bb      	strh	r3, [r7, #4]
 8001e62:	e013      	b.n	8001e8c <ST7735_FillRectangle+0xc8>
        for(x = w; x > 0; x--) {
 8001e64:	887b      	ldrh	r3, [r7, #2]
 8001e66:	80fb      	strh	r3, [r7, #6]
 8001e68:	e00a      	b.n	8001e80 <ST7735_FillRectangle+0xbc>
            HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 8001e6a:	f107 010c 	add.w	r1, r7, #12
 8001e6e:	f04f 33ff 	mov.w	r3, #4294967295
 8001e72:	2202      	movs	r2, #2
 8001e74:	480b      	ldr	r0, [pc, #44]	; (8001ea4 <ST7735_FillRectangle+0xe0>)
 8001e76:	f002 f9e2 	bl	800423e <HAL_SPI_Transmit>
        for(x = w; x > 0; x--) {
 8001e7a:	88fb      	ldrh	r3, [r7, #6]
 8001e7c:	3b01      	subs	r3, #1
 8001e7e:	80fb      	strh	r3, [r7, #6]
 8001e80:	88fb      	ldrh	r3, [r7, #6]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d1f1      	bne.n	8001e6a <ST7735_FillRectangle+0xa6>
    for(y = h; y > 0; y--) {
 8001e86:	88bb      	ldrh	r3, [r7, #4]
 8001e88:	3b01      	subs	r3, #1
 8001e8a:	80bb      	strh	r3, [r7, #4]
 8001e8c:	88bb      	ldrh	r3, [r7, #4]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d1e8      	bne.n	8001e64 <ST7735_FillRectangle+0xa0>
        }
    }

    ST7735_Unselect();
 8001e92:	f7ff fde1 	bl	8001a58 <ST7735_Unselect>
 8001e96:	e000      	b.n	8001e9a <ST7735_FillRectangle+0xd6>
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8001e98:	bf00      	nop
}
 8001e9a:	3714      	adds	r7, #20
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bd90      	pop	{r4, r7, pc}
 8001ea0:	48000800 	.word	0x48000800
 8001ea4:	20000260 	.word	0x20000260

08001ea8 <ST7735_FillScreen>:

void ST7735_FillScreen(uint16_t color) {
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b084      	sub	sp, #16
 8001eac:	af02      	add	r7, sp, #8
 8001eae:	4603      	mov	r3, r0
 8001eb0:	80fb      	strh	r3, [r7, #6]
    ST7735_FillRectangle(0, 0, ST7735_WIDTH, ST7735_HEIGHT, color);
 8001eb2:	88fb      	ldrh	r3, [r7, #6]
 8001eb4:	9300      	str	r3, [sp, #0]
 8001eb6:	2380      	movs	r3, #128	; 0x80
 8001eb8:	2280      	movs	r2, #128	; 0x80
 8001eba:	2100      	movs	r1, #0
 8001ebc:	2000      	movs	r0, #0
 8001ebe:	f7ff ff81 	bl	8001dc4 <ST7735_FillRectangle>
}
 8001ec2:	bf00      	nop
 8001ec4:	3708      	adds	r7, #8
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}
	...

08001ecc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b083      	sub	sp, #12
 8001ed0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ed2:	4b0f      	ldr	r3, [pc, #60]	; (8001f10 <HAL_MspInit+0x44>)
 8001ed4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ed6:	4a0e      	ldr	r2, [pc, #56]	; (8001f10 <HAL_MspInit+0x44>)
 8001ed8:	f043 0301 	orr.w	r3, r3, #1
 8001edc:	6613      	str	r3, [r2, #96]	; 0x60
 8001ede:	4b0c      	ldr	r3, [pc, #48]	; (8001f10 <HAL_MspInit+0x44>)
 8001ee0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ee2:	f003 0301 	and.w	r3, r3, #1
 8001ee6:	607b      	str	r3, [r7, #4]
 8001ee8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001eea:	4b09      	ldr	r3, [pc, #36]	; (8001f10 <HAL_MspInit+0x44>)
 8001eec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eee:	4a08      	ldr	r2, [pc, #32]	; (8001f10 <HAL_MspInit+0x44>)
 8001ef0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ef4:	6593      	str	r3, [r2, #88]	; 0x58
 8001ef6:	4b06      	ldr	r3, [pc, #24]	; (8001f10 <HAL_MspInit+0x44>)
 8001ef8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001efa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001efe:	603b      	str	r3, [r7, #0]
 8001f00:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f02:	bf00      	nop
 8001f04:	370c      	adds	r7, #12
 8001f06:	46bd      	mov	sp, r7
 8001f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0c:	4770      	bx	lr
 8001f0e:	bf00      	nop
 8001f10:	40021000 	.word	0x40021000

08001f14 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b08c      	sub	sp, #48	; 0x30
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f1c:	f107 031c 	add.w	r3, r7, #28
 8001f20:	2200      	movs	r2, #0
 8001f22:	601a      	str	r2, [r3, #0]
 8001f24:	605a      	str	r2, [r3, #4]
 8001f26:	609a      	str	r2, [r3, #8]
 8001f28:	60da      	str	r2, [r3, #12]
 8001f2a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4a33      	ldr	r2, [pc, #204]	; (8002000 <HAL_SPI_MspInit+0xec>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d131      	bne.n	8001f9a <HAL_SPI_MspInit+0x86>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001f36:	4b33      	ldr	r3, [pc, #204]	; (8002004 <HAL_SPI_MspInit+0xf0>)
 8001f38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f3a:	4a32      	ldr	r2, [pc, #200]	; (8002004 <HAL_SPI_MspInit+0xf0>)
 8001f3c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f40:	6593      	str	r3, [r2, #88]	; 0x58
 8001f42:	4b30      	ldr	r3, [pc, #192]	; (8002004 <HAL_SPI_MspInit+0xf0>)
 8001f44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f4a:	61bb      	str	r3, [r7, #24]
 8001f4c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f4e:	4b2d      	ldr	r3, [pc, #180]	; (8002004 <HAL_SPI_MspInit+0xf0>)
 8001f50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f52:	4a2c      	ldr	r2, [pc, #176]	; (8002004 <HAL_SPI_MspInit+0xf0>)
 8001f54:	f043 0302 	orr.w	r3, r3, #2
 8001f58:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f5a:	4b2a      	ldr	r3, [pc, #168]	; (8002004 <HAL_SPI_MspInit+0xf0>)
 8001f5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f5e:	f003 0302 	and.w	r3, r3, #2
 8001f62:	617b      	str	r3, [r7, #20]
 8001f64:	697b      	ldr	r3, [r7, #20]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8001f66:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8001f6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f6c:	2302      	movs	r3, #2
 8001f6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f70:	2300      	movs	r3, #0
 8001f72:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f74:	2303      	movs	r3, #3
 8001f76:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001f78:	2305      	movs	r3, #5
 8001f7a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f7c:	f107 031c 	add.w	r3, r7, #28
 8001f80:	4619      	mov	r1, r3
 8001f82:	4821      	ldr	r0, [pc, #132]	; (8002008 <HAL_SPI_MspInit+0xf4>)
 8001f84:	f000 fbea 	bl	800275c <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8001f88:	2200      	movs	r2, #0
 8001f8a:	2100      	movs	r1, #0
 8001f8c:	2024      	movs	r0, #36	; 0x24
 8001f8e:	f000 fb6e 	bl	800266e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8001f92:	2024      	movs	r0, #36	; 0x24
 8001f94:	f000 fb87 	bl	80026a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001f98:	e02d      	b.n	8001ff6 <HAL_SPI_MspInit+0xe2>
  else if(hspi->Instance==SPI3)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4a1b      	ldr	r2, [pc, #108]	; (800200c <HAL_SPI_MspInit+0xf8>)
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d128      	bne.n	8001ff6 <HAL_SPI_MspInit+0xe2>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001fa4:	4b17      	ldr	r3, [pc, #92]	; (8002004 <HAL_SPI_MspInit+0xf0>)
 8001fa6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fa8:	4a16      	ldr	r2, [pc, #88]	; (8002004 <HAL_SPI_MspInit+0xf0>)
 8001faa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001fae:	6593      	str	r3, [r2, #88]	; 0x58
 8001fb0:	4b14      	ldr	r3, [pc, #80]	; (8002004 <HAL_SPI_MspInit+0xf0>)
 8001fb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fb4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001fb8:	613b      	str	r3, [r7, #16]
 8001fba:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fbc:	4b11      	ldr	r3, [pc, #68]	; (8002004 <HAL_SPI_MspInit+0xf0>)
 8001fbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fc0:	4a10      	ldr	r2, [pc, #64]	; (8002004 <HAL_SPI_MspInit+0xf0>)
 8001fc2:	f043 0304 	orr.w	r3, r3, #4
 8001fc6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001fc8:	4b0e      	ldr	r3, [pc, #56]	; (8002004 <HAL_SPI_MspInit+0xf0>)
 8001fca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fcc:	f003 0304 	and.w	r3, r3, #4
 8001fd0:	60fb      	str	r3, [r7, #12]
 8001fd2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001fd4:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001fd8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fda:	2302      	movs	r3, #2
 8001fdc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fe2:	2303      	movs	r3, #3
 8001fe4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001fe6:	2306      	movs	r3, #6
 8001fe8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001fea:	f107 031c 	add.w	r3, r7, #28
 8001fee:	4619      	mov	r1, r3
 8001ff0:	4807      	ldr	r0, [pc, #28]	; (8002010 <HAL_SPI_MspInit+0xfc>)
 8001ff2:	f000 fbb3 	bl	800275c <HAL_GPIO_Init>
}
 8001ff6:	bf00      	nop
 8001ff8:	3730      	adds	r7, #48	; 0x30
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}
 8001ffe:	bf00      	nop
 8002000:	40003800 	.word	0x40003800
 8002004:	40021000 	.word	0x40021000
 8002008:	48000400 	.word	0x48000400
 800200c:	40003c00 	.word	0x40003c00
 8002010:	48000800 	.word	0x48000800

08002014 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b0ac      	sub	sp, #176	; 0xb0
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800201c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002020:	2200      	movs	r2, #0
 8002022:	601a      	str	r2, [r3, #0]
 8002024:	605a      	str	r2, [r3, #4]
 8002026:	609a      	str	r2, [r3, #8]
 8002028:	60da      	str	r2, [r3, #12]
 800202a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800202c:	f107 0314 	add.w	r3, r7, #20
 8002030:	2288      	movs	r2, #136	; 0x88
 8002032:	2100      	movs	r1, #0
 8002034:	4618      	mov	r0, r3
 8002036:	f003 fd89 	bl	8005b4c <memset>
  if(huart->Instance==USART2)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4a21      	ldr	r2, [pc, #132]	; (80020c4 <HAL_UART_MspInit+0xb0>)
 8002040:	4293      	cmp	r3, r2
 8002042:	d13b      	bne.n	80020bc <HAL_UART_MspInit+0xa8>
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002044:	2302      	movs	r3, #2
 8002046:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002048:	2300      	movs	r3, #0
 800204a:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800204c:	f107 0314 	add.w	r3, r7, #20
 8002050:	4618      	mov	r0, r3
 8002052:	f001 fb95 	bl	8003780 <HAL_RCCEx_PeriphCLKConfig>
 8002056:	4603      	mov	r3, r0
 8002058:	2b00      	cmp	r3, #0
 800205a:	d001      	beq.n	8002060 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800205c:	f7ff fcea 	bl	8001a34 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002060:	4b19      	ldr	r3, [pc, #100]	; (80020c8 <HAL_UART_MspInit+0xb4>)
 8002062:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002064:	4a18      	ldr	r2, [pc, #96]	; (80020c8 <HAL_UART_MspInit+0xb4>)
 8002066:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800206a:	6593      	str	r3, [r2, #88]	; 0x58
 800206c:	4b16      	ldr	r3, [pc, #88]	; (80020c8 <HAL_UART_MspInit+0xb4>)
 800206e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002070:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002074:	613b      	str	r3, [r7, #16]
 8002076:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002078:	4b13      	ldr	r3, [pc, #76]	; (80020c8 <HAL_UART_MspInit+0xb4>)
 800207a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800207c:	4a12      	ldr	r2, [pc, #72]	; (80020c8 <HAL_UART_MspInit+0xb4>)
 800207e:	f043 0301 	orr.w	r3, r3, #1
 8002082:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002084:	4b10      	ldr	r3, [pc, #64]	; (80020c8 <HAL_UART_MspInit+0xb4>)
 8002086:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002088:	f003 0301 	and.w	r3, r3, #1
 800208c:	60fb      	str	r3, [r7, #12]
 800208e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002090:	230c      	movs	r3, #12
 8002092:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002096:	2302      	movs	r3, #2
 8002098:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800209c:	2300      	movs	r3, #0
 800209e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020a2:	2303      	movs	r3, #3
 80020a4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80020a8:	2307      	movs	r3, #7
 80020aa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020ae:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80020b2:	4619      	mov	r1, r3
 80020b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020b8:	f000 fb50 	bl	800275c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80020bc:	bf00      	nop
 80020be:	37b0      	adds	r7, #176	; 0xb0
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bd80      	pop	{r7, pc}
 80020c4:	40004400 	.word	0x40004400
 80020c8:	40021000 	.word	0x40021000

080020cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80020cc:	b480      	push	{r7}
 80020ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80020d0:	e7fe      	b.n	80020d0 <NMI_Handler+0x4>

080020d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80020d2:	b480      	push	{r7}
 80020d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80020d6:	e7fe      	b.n	80020d6 <HardFault_Handler+0x4>

080020d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80020d8:	b480      	push	{r7}
 80020da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80020dc:	e7fe      	b.n	80020dc <MemManage_Handler+0x4>

080020de <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80020de:	b480      	push	{r7}
 80020e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80020e2:	e7fe      	b.n	80020e2 <BusFault_Handler+0x4>

080020e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80020e4:	b480      	push	{r7}
 80020e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80020e8:	e7fe      	b.n	80020e8 <UsageFault_Handler+0x4>

080020ea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80020ea:	b480      	push	{r7}
 80020ec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80020ee:	bf00      	nop
 80020f0:	46bd      	mov	sp, r7
 80020f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f6:	4770      	bx	lr

080020f8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80020f8:	b480      	push	{r7}
 80020fa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80020fc:	bf00      	nop
 80020fe:	46bd      	mov	sp, r7
 8002100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002104:	4770      	bx	lr

08002106 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002106:	b480      	push	{r7}
 8002108:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800210a:	bf00      	nop
 800210c:	46bd      	mov	sp, r7
 800210e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002112:	4770      	bx	lr

08002114 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002118:	f000 f98a 	bl	8002430 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800211c:	bf00      	nop
 800211e:	bd80      	pop	{r7, pc}

08002120 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8002124:	4802      	ldr	r0, [pc, #8]	; (8002130 <SPI2_IRQHandler+0x10>)
 8002126:	f002 fd3b 	bl	8004ba0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 800212a:	bf00      	nop
 800212c:	bd80      	pop	{r7, pc}
 800212e:	bf00      	nop
 8002130:	20000260 	.word	0x20000260

08002134 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002134:	b480      	push	{r7}
 8002136:	af00      	add	r7, sp, #0
	return 1;
 8002138:	2301      	movs	r3, #1
}
 800213a:	4618      	mov	r0, r3
 800213c:	46bd      	mov	sp, r7
 800213e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002142:	4770      	bx	lr

08002144 <_kill>:

int _kill(int pid, int sig)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b082      	sub	sp, #8
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
 800214c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800214e:	f003 fcd3 	bl	8005af8 <__errno>
 8002152:	4603      	mov	r3, r0
 8002154:	2216      	movs	r2, #22
 8002156:	601a      	str	r2, [r3, #0]
	return -1;
 8002158:	f04f 33ff 	mov.w	r3, #4294967295
}
 800215c:	4618      	mov	r0, r3
 800215e:	3708      	adds	r7, #8
 8002160:	46bd      	mov	sp, r7
 8002162:	bd80      	pop	{r7, pc}

08002164 <_exit>:

void _exit (int status)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b082      	sub	sp, #8
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800216c:	f04f 31ff 	mov.w	r1, #4294967295
 8002170:	6878      	ldr	r0, [r7, #4]
 8002172:	f7ff ffe7 	bl	8002144 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002176:	e7fe      	b.n	8002176 <_exit+0x12>

08002178 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b086      	sub	sp, #24
 800217c:	af00      	add	r7, sp, #0
 800217e:	60f8      	str	r0, [r7, #12]
 8002180:	60b9      	str	r1, [r7, #8]
 8002182:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002184:	2300      	movs	r3, #0
 8002186:	617b      	str	r3, [r7, #20]
 8002188:	e00a      	b.n	80021a0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800218a:	f3af 8000 	nop.w
 800218e:	4601      	mov	r1, r0
 8002190:	68bb      	ldr	r3, [r7, #8]
 8002192:	1c5a      	adds	r2, r3, #1
 8002194:	60ba      	str	r2, [r7, #8]
 8002196:	b2ca      	uxtb	r2, r1
 8002198:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800219a:	697b      	ldr	r3, [r7, #20]
 800219c:	3301      	adds	r3, #1
 800219e:	617b      	str	r3, [r7, #20]
 80021a0:	697a      	ldr	r2, [r7, #20]
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	429a      	cmp	r2, r3
 80021a6:	dbf0      	blt.n	800218a <_read+0x12>
	}

return len;
 80021a8:	687b      	ldr	r3, [r7, #4]
}
 80021aa:	4618      	mov	r0, r3
 80021ac:	3718      	adds	r7, #24
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}

080021b2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80021b2:	b580      	push	{r7, lr}
 80021b4:	b086      	sub	sp, #24
 80021b6:	af00      	add	r7, sp, #0
 80021b8:	60f8      	str	r0, [r7, #12]
 80021ba:	60b9      	str	r1, [r7, #8]
 80021bc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021be:	2300      	movs	r3, #0
 80021c0:	617b      	str	r3, [r7, #20]
 80021c2:	e009      	b.n	80021d8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80021c4:	68bb      	ldr	r3, [r7, #8]
 80021c6:	1c5a      	adds	r2, r3, #1
 80021c8:	60ba      	str	r2, [r7, #8]
 80021ca:	781b      	ldrb	r3, [r3, #0]
 80021cc:	4618      	mov	r0, r3
 80021ce:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021d2:	697b      	ldr	r3, [r7, #20]
 80021d4:	3301      	adds	r3, #1
 80021d6:	617b      	str	r3, [r7, #20]
 80021d8:	697a      	ldr	r2, [r7, #20]
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	429a      	cmp	r2, r3
 80021de:	dbf1      	blt.n	80021c4 <_write+0x12>
	}
	return len;
 80021e0:	687b      	ldr	r3, [r7, #4]
}
 80021e2:	4618      	mov	r0, r3
 80021e4:	3718      	adds	r7, #24
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}

080021ea <_close>:

int _close(int file)
{
 80021ea:	b480      	push	{r7}
 80021ec:	b083      	sub	sp, #12
 80021ee:	af00      	add	r7, sp, #0
 80021f0:	6078      	str	r0, [r7, #4]
	return -1;
 80021f2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80021f6:	4618      	mov	r0, r3
 80021f8:	370c      	adds	r7, #12
 80021fa:	46bd      	mov	sp, r7
 80021fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002200:	4770      	bx	lr

08002202 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002202:	b480      	push	{r7}
 8002204:	b083      	sub	sp, #12
 8002206:	af00      	add	r7, sp, #0
 8002208:	6078      	str	r0, [r7, #4]
 800220a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002212:	605a      	str	r2, [r3, #4]
	return 0;
 8002214:	2300      	movs	r3, #0
}
 8002216:	4618      	mov	r0, r3
 8002218:	370c      	adds	r7, #12
 800221a:	46bd      	mov	sp, r7
 800221c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002220:	4770      	bx	lr

08002222 <_isatty>:

int _isatty(int file)
{
 8002222:	b480      	push	{r7}
 8002224:	b083      	sub	sp, #12
 8002226:	af00      	add	r7, sp, #0
 8002228:	6078      	str	r0, [r7, #4]
	return 1;
 800222a:	2301      	movs	r3, #1
}
 800222c:	4618      	mov	r0, r3
 800222e:	370c      	adds	r7, #12
 8002230:	46bd      	mov	sp, r7
 8002232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002236:	4770      	bx	lr

08002238 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002238:	b480      	push	{r7}
 800223a:	b085      	sub	sp, #20
 800223c:	af00      	add	r7, sp, #0
 800223e:	60f8      	str	r0, [r7, #12]
 8002240:	60b9      	str	r1, [r7, #8]
 8002242:	607a      	str	r2, [r7, #4]
	return 0;
 8002244:	2300      	movs	r3, #0
}
 8002246:	4618      	mov	r0, r3
 8002248:	3714      	adds	r7, #20
 800224a:	46bd      	mov	sp, r7
 800224c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002250:	4770      	bx	lr
	...

08002254 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b086      	sub	sp, #24
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800225c:	4a14      	ldr	r2, [pc, #80]	; (80022b0 <_sbrk+0x5c>)
 800225e:	4b15      	ldr	r3, [pc, #84]	; (80022b4 <_sbrk+0x60>)
 8002260:	1ad3      	subs	r3, r2, r3
 8002262:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002264:	697b      	ldr	r3, [r7, #20]
 8002266:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002268:	4b13      	ldr	r3, [pc, #76]	; (80022b8 <_sbrk+0x64>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d102      	bne.n	8002276 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002270:	4b11      	ldr	r3, [pc, #68]	; (80022b8 <_sbrk+0x64>)
 8002272:	4a12      	ldr	r2, [pc, #72]	; (80022bc <_sbrk+0x68>)
 8002274:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002276:	4b10      	ldr	r3, [pc, #64]	; (80022b8 <_sbrk+0x64>)
 8002278:	681a      	ldr	r2, [r3, #0]
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	4413      	add	r3, r2
 800227e:	693a      	ldr	r2, [r7, #16]
 8002280:	429a      	cmp	r2, r3
 8002282:	d207      	bcs.n	8002294 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002284:	f003 fc38 	bl	8005af8 <__errno>
 8002288:	4603      	mov	r3, r0
 800228a:	220c      	movs	r2, #12
 800228c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800228e:	f04f 33ff 	mov.w	r3, #4294967295
 8002292:	e009      	b.n	80022a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002294:	4b08      	ldr	r3, [pc, #32]	; (80022b8 <_sbrk+0x64>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800229a:	4b07      	ldr	r3, [pc, #28]	; (80022b8 <_sbrk+0x64>)
 800229c:	681a      	ldr	r2, [r3, #0]
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	4413      	add	r3, r2
 80022a2:	4a05      	ldr	r2, [pc, #20]	; (80022b8 <_sbrk+0x64>)
 80022a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80022a6:	68fb      	ldr	r3, [r7, #12]
}
 80022a8:	4618      	mov	r0, r3
 80022aa:	3718      	adds	r7, #24
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bd80      	pop	{r7, pc}
 80022b0:	20018000 	.word	0x20018000
 80022b4:	00000400 	.word	0x00000400
 80022b8:	20000218 	.word	0x20000218
 80022bc:	200004e0 	.word	0x200004e0

080022c0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80022c0:	b480      	push	{r7}
 80022c2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80022c4:	4b15      	ldr	r3, [pc, #84]	; (800231c <SystemInit+0x5c>)
 80022c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022ca:	4a14      	ldr	r2, [pc, #80]	; (800231c <SystemInit+0x5c>)
 80022cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80022d0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80022d4:	4b12      	ldr	r3, [pc, #72]	; (8002320 <SystemInit+0x60>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4a11      	ldr	r2, [pc, #68]	; (8002320 <SystemInit+0x60>)
 80022da:	f043 0301 	orr.w	r3, r3, #1
 80022de:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80022e0:	4b0f      	ldr	r3, [pc, #60]	; (8002320 <SystemInit+0x60>)
 80022e2:	2200      	movs	r2, #0
 80022e4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80022e6:	4b0e      	ldr	r3, [pc, #56]	; (8002320 <SystemInit+0x60>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4a0d      	ldr	r2, [pc, #52]	; (8002320 <SystemInit+0x60>)
 80022ec:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80022f0:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80022f4:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80022f6:	4b0a      	ldr	r3, [pc, #40]	; (8002320 <SystemInit+0x60>)
 80022f8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80022fc:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80022fe:	4b08      	ldr	r3, [pc, #32]	; (8002320 <SystemInit+0x60>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4a07      	ldr	r2, [pc, #28]	; (8002320 <SystemInit+0x60>)
 8002304:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002308:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800230a:	4b05      	ldr	r3, [pc, #20]	; (8002320 <SystemInit+0x60>)
 800230c:	2200      	movs	r2, #0
 800230e:	619a      	str	r2, [r3, #24]
}
 8002310:	bf00      	nop
 8002312:	46bd      	mov	sp, r7
 8002314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002318:	4770      	bx	lr
 800231a:	bf00      	nop
 800231c:	e000ed00 	.word	0xe000ed00
 8002320:	40021000 	.word	0x40021000

08002324 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002324:	f8df d034 	ldr.w	sp, [pc, #52]	; 800235c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002328:	f7ff ffca 	bl	80022c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800232c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800232e:	e003      	b.n	8002338 <LoopCopyDataInit>

08002330 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002330:	4b0b      	ldr	r3, [pc, #44]	; (8002360 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8002332:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002334:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8002336:	3104      	adds	r1, #4

08002338 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002338:	480a      	ldr	r0, [pc, #40]	; (8002364 <LoopForever+0xa>)
	ldr	r3, =_edata
 800233a:	4b0b      	ldr	r3, [pc, #44]	; (8002368 <LoopForever+0xe>)
	adds	r2, r0, r1
 800233c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800233e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002340:	d3f6      	bcc.n	8002330 <CopyDataInit>
	ldr	r2, =_sbss
 8002342:	4a0a      	ldr	r2, [pc, #40]	; (800236c <LoopForever+0x12>)
	b	LoopFillZerobss
 8002344:	e002      	b.n	800234c <LoopFillZerobss>

08002346 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8002346:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002348:	f842 3b04 	str.w	r3, [r2], #4

0800234c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800234c:	4b08      	ldr	r3, [pc, #32]	; (8002370 <LoopForever+0x16>)
	cmp	r2, r3
 800234e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002350:	d3f9      	bcc.n	8002346 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002352:	f003 fbd7 	bl	8005b04 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002356:	f7ff f8b7 	bl	80014c8 <main>

0800235a <LoopForever>:

LoopForever:
    b LoopForever
 800235a:	e7fe      	b.n	800235a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800235c:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8002360:	0800bed4 	.word	0x0800bed4
	ldr	r0, =_sdata
 8002364:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002368:	200001f0 	.word	0x200001f0
	ldr	r2, =_sbss
 800236c:	200001f0 	.word	0x200001f0
	ldr	r3, = _ebss
 8002370:	200004e0 	.word	0x200004e0

08002374 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002374:	e7fe      	b.n	8002374 <ADC1_2_IRQHandler>
	...

08002378 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b082      	sub	sp, #8
 800237c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800237e:	2300      	movs	r3, #0
 8002380:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002382:	4b0c      	ldr	r3, [pc, #48]	; (80023b4 <HAL_Init+0x3c>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4a0b      	ldr	r2, [pc, #44]	; (80023b4 <HAL_Init+0x3c>)
 8002388:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800238c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800238e:	2003      	movs	r0, #3
 8002390:	f000 f962 	bl	8002658 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002394:	2000      	movs	r0, #0
 8002396:	f000 f80f 	bl	80023b8 <HAL_InitTick>
 800239a:	4603      	mov	r3, r0
 800239c:	2b00      	cmp	r3, #0
 800239e:	d002      	beq.n	80023a6 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80023a0:	2301      	movs	r3, #1
 80023a2:	71fb      	strb	r3, [r7, #7]
 80023a4:	e001      	b.n	80023aa <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80023a6:	f7ff fd91 	bl	8001ecc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80023aa:	79fb      	ldrb	r3, [r7, #7]
}
 80023ac:	4618      	mov	r0, r3
 80023ae:	3708      	adds	r7, #8
 80023b0:	46bd      	mov	sp, r7
 80023b2:	bd80      	pop	{r7, pc}
 80023b4:	40022000 	.word	0x40022000

080023b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b084      	sub	sp, #16
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80023c0:	2300      	movs	r3, #0
 80023c2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80023c4:	4b17      	ldr	r3, [pc, #92]	; (8002424 <HAL_InitTick+0x6c>)
 80023c6:	781b      	ldrb	r3, [r3, #0]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d023      	beq.n	8002414 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80023cc:	4b16      	ldr	r3, [pc, #88]	; (8002428 <HAL_InitTick+0x70>)
 80023ce:	681a      	ldr	r2, [r3, #0]
 80023d0:	4b14      	ldr	r3, [pc, #80]	; (8002424 <HAL_InitTick+0x6c>)
 80023d2:	781b      	ldrb	r3, [r3, #0]
 80023d4:	4619      	mov	r1, r3
 80023d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80023da:	fbb3 f3f1 	udiv	r3, r3, r1
 80023de:	fbb2 f3f3 	udiv	r3, r2, r3
 80023e2:	4618      	mov	r0, r3
 80023e4:	f000 f96d 	bl	80026c2 <HAL_SYSTICK_Config>
 80023e8:	4603      	mov	r3, r0
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d10f      	bne.n	800240e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2b0f      	cmp	r3, #15
 80023f2:	d809      	bhi.n	8002408 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80023f4:	2200      	movs	r2, #0
 80023f6:	6879      	ldr	r1, [r7, #4]
 80023f8:	f04f 30ff 	mov.w	r0, #4294967295
 80023fc:	f000 f937 	bl	800266e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002400:	4a0a      	ldr	r2, [pc, #40]	; (800242c <HAL_InitTick+0x74>)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6013      	str	r3, [r2, #0]
 8002406:	e007      	b.n	8002418 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002408:	2301      	movs	r3, #1
 800240a:	73fb      	strb	r3, [r7, #15]
 800240c:	e004      	b.n	8002418 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800240e:	2301      	movs	r3, #1
 8002410:	73fb      	strb	r3, [r7, #15]
 8002412:	e001      	b.n	8002418 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002414:	2301      	movs	r3, #1
 8002416:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002418:	7bfb      	ldrb	r3, [r7, #15]
}
 800241a:	4618      	mov	r0, r3
 800241c:	3710      	adds	r7, #16
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}
 8002422:	bf00      	nop
 8002424:	20000018 	.word	0x20000018
 8002428:	20000010 	.word	0x20000010
 800242c:	20000014 	.word	0x20000014

08002430 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002430:	b480      	push	{r7}
 8002432:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002434:	4b06      	ldr	r3, [pc, #24]	; (8002450 <HAL_IncTick+0x20>)
 8002436:	781b      	ldrb	r3, [r3, #0]
 8002438:	461a      	mov	r2, r3
 800243a:	4b06      	ldr	r3, [pc, #24]	; (8002454 <HAL_IncTick+0x24>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4413      	add	r3, r2
 8002440:	4a04      	ldr	r2, [pc, #16]	; (8002454 <HAL_IncTick+0x24>)
 8002442:	6013      	str	r3, [r2, #0]
}
 8002444:	bf00      	nop
 8002446:	46bd      	mov	sp, r7
 8002448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244c:	4770      	bx	lr
 800244e:	bf00      	nop
 8002450:	20000018 	.word	0x20000018
 8002454:	200004cc 	.word	0x200004cc

08002458 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002458:	b480      	push	{r7}
 800245a:	af00      	add	r7, sp, #0
  return uwTick;
 800245c:	4b03      	ldr	r3, [pc, #12]	; (800246c <HAL_GetTick+0x14>)
 800245e:	681b      	ldr	r3, [r3, #0]
}
 8002460:	4618      	mov	r0, r3
 8002462:	46bd      	mov	sp, r7
 8002464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002468:	4770      	bx	lr
 800246a:	bf00      	nop
 800246c:	200004cc 	.word	0x200004cc

08002470 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b084      	sub	sp, #16
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002478:	f7ff ffee 	bl	8002458 <HAL_GetTick>
 800247c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002488:	d005      	beq.n	8002496 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800248a:	4b0a      	ldr	r3, [pc, #40]	; (80024b4 <HAL_Delay+0x44>)
 800248c:	781b      	ldrb	r3, [r3, #0]
 800248e:	461a      	mov	r2, r3
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	4413      	add	r3, r2
 8002494:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002496:	bf00      	nop
 8002498:	f7ff ffde 	bl	8002458 <HAL_GetTick>
 800249c:	4602      	mov	r2, r0
 800249e:	68bb      	ldr	r3, [r7, #8]
 80024a0:	1ad3      	subs	r3, r2, r3
 80024a2:	68fa      	ldr	r2, [r7, #12]
 80024a4:	429a      	cmp	r2, r3
 80024a6:	d8f7      	bhi.n	8002498 <HAL_Delay+0x28>
  {
  }
}
 80024a8:	bf00      	nop
 80024aa:	bf00      	nop
 80024ac:	3710      	adds	r7, #16
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}
 80024b2:	bf00      	nop
 80024b4:	20000018 	.word	0x20000018

080024b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024b8:	b480      	push	{r7}
 80024ba:	b085      	sub	sp, #20
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	f003 0307 	and.w	r3, r3, #7
 80024c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80024c8:	4b0c      	ldr	r3, [pc, #48]	; (80024fc <__NVIC_SetPriorityGrouping+0x44>)
 80024ca:	68db      	ldr	r3, [r3, #12]
 80024cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80024ce:	68ba      	ldr	r2, [r7, #8]
 80024d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80024d4:	4013      	ands	r3, r2
 80024d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80024dc:	68bb      	ldr	r3, [r7, #8]
 80024de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80024e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80024e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80024ea:	4a04      	ldr	r2, [pc, #16]	; (80024fc <__NVIC_SetPriorityGrouping+0x44>)
 80024ec:	68bb      	ldr	r3, [r7, #8]
 80024ee:	60d3      	str	r3, [r2, #12]
}
 80024f0:	bf00      	nop
 80024f2:	3714      	adds	r7, #20
 80024f4:	46bd      	mov	sp, r7
 80024f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fa:	4770      	bx	lr
 80024fc:	e000ed00 	.word	0xe000ed00

08002500 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002500:	b480      	push	{r7}
 8002502:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002504:	4b04      	ldr	r3, [pc, #16]	; (8002518 <__NVIC_GetPriorityGrouping+0x18>)
 8002506:	68db      	ldr	r3, [r3, #12]
 8002508:	0a1b      	lsrs	r3, r3, #8
 800250a:	f003 0307 	and.w	r3, r3, #7
}
 800250e:	4618      	mov	r0, r3
 8002510:	46bd      	mov	sp, r7
 8002512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002516:	4770      	bx	lr
 8002518:	e000ed00 	.word	0xe000ed00

0800251c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800251c:	b480      	push	{r7}
 800251e:	b083      	sub	sp, #12
 8002520:	af00      	add	r7, sp, #0
 8002522:	4603      	mov	r3, r0
 8002524:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002526:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800252a:	2b00      	cmp	r3, #0
 800252c:	db0b      	blt.n	8002546 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800252e:	79fb      	ldrb	r3, [r7, #7]
 8002530:	f003 021f 	and.w	r2, r3, #31
 8002534:	4907      	ldr	r1, [pc, #28]	; (8002554 <__NVIC_EnableIRQ+0x38>)
 8002536:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800253a:	095b      	lsrs	r3, r3, #5
 800253c:	2001      	movs	r0, #1
 800253e:	fa00 f202 	lsl.w	r2, r0, r2
 8002542:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002546:	bf00      	nop
 8002548:	370c      	adds	r7, #12
 800254a:	46bd      	mov	sp, r7
 800254c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002550:	4770      	bx	lr
 8002552:	bf00      	nop
 8002554:	e000e100 	.word	0xe000e100

08002558 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002558:	b480      	push	{r7}
 800255a:	b083      	sub	sp, #12
 800255c:	af00      	add	r7, sp, #0
 800255e:	4603      	mov	r3, r0
 8002560:	6039      	str	r1, [r7, #0]
 8002562:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002564:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002568:	2b00      	cmp	r3, #0
 800256a:	db0a      	blt.n	8002582 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	b2da      	uxtb	r2, r3
 8002570:	490c      	ldr	r1, [pc, #48]	; (80025a4 <__NVIC_SetPriority+0x4c>)
 8002572:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002576:	0112      	lsls	r2, r2, #4
 8002578:	b2d2      	uxtb	r2, r2
 800257a:	440b      	add	r3, r1
 800257c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002580:	e00a      	b.n	8002598 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	b2da      	uxtb	r2, r3
 8002586:	4908      	ldr	r1, [pc, #32]	; (80025a8 <__NVIC_SetPriority+0x50>)
 8002588:	79fb      	ldrb	r3, [r7, #7]
 800258a:	f003 030f 	and.w	r3, r3, #15
 800258e:	3b04      	subs	r3, #4
 8002590:	0112      	lsls	r2, r2, #4
 8002592:	b2d2      	uxtb	r2, r2
 8002594:	440b      	add	r3, r1
 8002596:	761a      	strb	r2, [r3, #24]
}
 8002598:	bf00      	nop
 800259a:	370c      	adds	r7, #12
 800259c:	46bd      	mov	sp, r7
 800259e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a2:	4770      	bx	lr
 80025a4:	e000e100 	.word	0xe000e100
 80025a8:	e000ed00 	.word	0xe000ed00

080025ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025ac:	b480      	push	{r7}
 80025ae:	b089      	sub	sp, #36	; 0x24
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	60f8      	str	r0, [r7, #12]
 80025b4:	60b9      	str	r1, [r7, #8]
 80025b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	f003 0307 	and.w	r3, r3, #7
 80025be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80025c0:	69fb      	ldr	r3, [r7, #28]
 80025c2:	f1c3 0307 	rsb	r3, r3, #7
 80025c6:	2b04      	cmp	r3, #4
 80025c8:	bf28      	it	cs
 80025ca:	2304      	movcs	r3, #4
 80025cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80025ce:	69fb      	ldr	r3, [r7, #28]
 80025d0:	3304      	adds	r3, #4
 80025d2:	2b06      	cmp	r3, #6
 80025d4:	d902      	bls.n	80025dc <NVIC_EncodePriority+0x30>
 80025d6:	69fb      	ldr	r3, [r7, #28]
 80025d8:	3b03      	subs	r3, #3
 80025da:	e000      	b.n	80025de <NVIC_EncodePriority+0x32>
 80025dc:	2300      	movs	r3, #0
 80025de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025e0:	f04f 32ff 	mov.w	r2, #4294967295
 80025e4:	69bb      	ldr	r3, [r7, #24]
 80025e6:	fa02 f303 	lsl.w	r3, r2, r3
 80025ea:	43da      	mvns	r2, r3
 80025ec:	68bb      	ldr	r3, [r7, #8]
 80025ee:	401a      	ands	r2, r3
 80025f0:	697b      	ldr	r3, [r7, #20]
 80025f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80025f4:	f04f 31ff 	mov.w	r1, #4294967295
 80025f8:	697b      	ldr	r3, [r7, #20]
 80025fa:	fa01 f303 	lsl.w	r3, r1, r3
 80025fe:	43d9      	mvns	r1, r3
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002604:	4313      	orrs	r3, r2
         );
}
 8002606:	4618      	mov	r0, r3
 8002608:	3724      	adds	r7, #36	; 0x24
 800260a:	46bd      	mov	sp, r7
 800260c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002610:	4770      	bx	lr
	...

08002614 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b082      	sub	sp, #8
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	3b01      	subs	r3, #1
 8002620:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002624:	d301      	bcc.n	800262a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002626:	2301      	movs	r3, #1
 8002628:	e00f      	b.n	800264a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800262a:	4a0a      	ldr	r2, [pc, #40]	; (8002654 <SysTick_Config+0x40>)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	3b01      	subs	r3, #1
 8002630:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002632:	210f      	movs	r1, #15
 8002634:	f04f 30ff 	mov.w	r0, #4294967295
 8002638:	f7ff ff8e 	bl	8002558 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800263c:	4b05      	ldr	r3, [pc, #20]	; (8002654 <SysTick_Config+0x40>)
 800263e:	2200      	movs	r2, #0
 8002640:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002642:	4b04      	ldr	r3, [pc, #16]	; (8002654 <SysTick_Config+0x40>)
 8002644:	2207      	movs	r2, #7
 8002646:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002648:	2300      	movs	r3, #0
}
 800264a:	4618      	mov	r0, r3
 800264c:	3708      	adds	r7, #8
 800264e:	46bd      	mov	sp, r7
 8002650:	bd80      	pop	{r7, pc}
 8002652:	bf00      	nop
 8002654:	e000e010 	.word	0xe000e010

08002658 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b082      	sub	sp, #8
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002660:	6878      	ldr	r0, [r7, #4]
 8002662:	f7ff ff29 	bl	80024b8 <__NVIC_SetPriorityGrouping>
}
 8002666:	bf00      	nop
 8002668:	3708      	adds	r7, #8
 800266a:	46bd      	mov	sp, r7
 800266c:	bd80      	pop	{r7, pc}

0800266e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800266e:	b580      	push	{r7, lr}
 8002670:	b086      	sub	sp, #24
 8002672:	af00      	add	r7, sp, #0
 8002674:	4603      	mov	r3, r0
 8002676:	60b9      	str	r1, [r7, #8]
 8002678:	607a      	str	r2, [r7, #4]
 800267a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800267c:	2300      	movs	r3, #0
 800267e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002680:	f7ff ff3e 	bl	8002500 <__NVIC_GetPriorityGrouping>
 8002684:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002686:	687a      	ldr	r2, [r7, #4]
 8002688:	68b9      	ldr	r1, [r7, #8]
 800268a:	6978      	ldr	r0, [r7, #20]
 800268c:	f7ff ff8e 	bl	80025ac <NVIC_EncodePriority>
 8002690:	4602      	mov	r2, r0
 8002692:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002696:	4611      	mov	r1, r2
 8002698:	4618      	mov	r0, r3
 800269a:	f7ff ff5d 	bl	8002558 <__NVIC_SetPriority>
}
 800269e:	bf00      	nop
 80026a0:	3718      	adds	r7, #24
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bd80      	pop	{r7, pc}

080026a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026a6:	b580      	push	{r7, lr}
 80026a8:	b082      	sub	sp, #8
 80026aa:	af00      	add	r7, sp, #0
 80026ac:	4603      	mov	r3, r0
 80026ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80026b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026b4:	4618      	mov	r0, r3
 80026b6:	f7ff ff31 	bl	800251c <__NVIC_EnableIRQ>
}
 80026ba:	bf00      	nop
 80026bc:	3708      	adds	r7, #8
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}

080026c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80026c2:	b580      	push	{r7, lr}
 80026c4:	b082      	sub	sp, #8
 80026c6:	af00      	add	r7, sp, #0
 80026c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80026ca:	6878      	ldr	r0, [r7, #4]
 80026cc:	f7ff ffa2 	bl	8002614 <SysTick_Config>
 80026d0:	4603      	mov	r3, r0
}
 80026d2:	4618      	mov	r0, r3
 80026d4:	3708      	adds	r7, #8
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bd80      	pop	{r7, pc}

080026da <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80026da:	b580      	push	{r7, lr}
 80026dc:	b084      	sub	sp, #16
 80026de:	af00      	add	r7, sp, #0
 80026e0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80026e2:	2300      	movs	r3, #0
 80026e4:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80026ec:	b2db      	uxtb	r3, r3
 80026ee:	2b02      	cmp	r3, #2
 80026f0:	d005      	beq.n	80026fe <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2204      	movs	r2, #4
 80026f6:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80026f8:	2301      	movs	r3, #1
 80026fa:	73fb      	strb	r3, [r7, #15]
 80026fc:	e029      	b.n	8002752 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	681a      	ldr	r2, [r3, #0]
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f022 020e 	bic.w	r2, r2, #14
 800270c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	681a      	ldr	r2, [r3, #0]
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f022 0201 	bic.w	r2, r2, #1
 800271c:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002722:	f003 021c 	and.w	r2, r3, #28
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800272a:	2101      	movs	r1, #1
 800272c:	fa01 f202 	lsl.w	r2, r1, r2
 8002730:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2201      	movs	r2, #1
 8002736:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2200      	movs	r2, #0
 800273e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002746:	2b00      	cmp	r3, #0
 8002748:	d003      	beq.n	8002752 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800274e:	6878      	ldr	r0, [r7, #4]
 8002750:	4798      	blx	r3
    }
  }
  return status;
 8002752:	7bfb      	ldrb	r3, [r7, #15]
}
 8002754:	4618      	mov	r0, r3
 8002756:	3710      	adds	r7, #16
 8002758:	46bd      	mov	sp, r7
 800275a:	bd80      	pop	{r7, pc}

0800275c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800275c:	b480      	push	{r7}
 800275e:	b087      	sub	sp, #28
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
 8002764:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002766:	2300      	movs	r3, #0
 8002768:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800276a:	e17f      	b.n	8002a6c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	681a      	ldr	r2, [r3, #0]
 8002770:	2101      	movs	r1, #1
 8002772:	697b      	ldr	r3, [r7, #20]
 8002774:	fa01 f303 	lsl.w	r3, r1, r3
 8002778:	4013      	ands	r3, r2
 800277a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	2b00      	cmp	r3, #0
 8002780:	f000 8171 	beq.w	8002a66 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	2b01      	cmp	r3, #1
 800278a:	d00b      	beq.n	80027a4 <HAL_GPIO_Init+0x48>
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	2b02      	cmp	r3, #2
 8002792:	d007      	beq.n	80027a4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002798:	2b11      	cmp	r3, #17
 800279a:	d003      	beq.n	80027a4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	2b12      	cmp	r3, #18
 80027a2:	d130      	bne.n	8002806 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	689b      	ldr	r3, [r3, #8]
 80027a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80027aa:	697b      	ldr	r3, [r7, #20]
 80027ac:	005b      	lsls	r3, r3, #1
 80027ae:	2203      	movs	r2, #3
 80027b0:	fa02 f303 	lsl.w	r3, r2, r3
 80027b4:	43db      	mvns	r3, r3
 80027b6:	693a      	ldr	r2, [r7, #16]
 80027b8:	4013      	ands	r3, r2
 80027ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	68da      	ldr	r2, [r3, #12]
 80027c0:	697b      	ldr	r3, [r7, #20]
 80027c2:	005b      	lsls	r3, r3, #1
 80027c4:	fa02 f303 	lsl.w	r3, r2, r3
 80027c8:	693a      	ldr	r2, [r7, #16]
 80027ca:	4313      	orrs	r3, r2
 80027cc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	693a      	ldr	r2, [r7, #16]
 80027d2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80027da:	2201      	movs	r2, #1
 80027dc:	697b      	ldr	r3, [r7, #20]
 80027de:	fa02 f303 	lsl.w	r3, r2, r3
 80027e2:	43db      	mvns	r3, r3
 80027e4:	693a      	ldr	r2, [r7, #16]
 80027e6:	4013      	ands	r3, r2
 80027e8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	091b      	lsrs	r3, r3, #4
 80027f0:	f003 0201 	and.w	r2, r3, #1
 80027f4:	697b      	ldr	r3, [r7, #20]
 80027f6:	fa02 f303 	lsl.w	r3, r2, r3
 80027fa:	693a      	ldr	r2, [r7, #16]
 80027fc:	4313      	orrs	r3, r2
 80027fe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	693a      	ldr	r2, [r7, #16]
 8002804:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	f003 0303 	and.w	r3, r3, #3
 800280e:	2b03      	cmp	r3, #3
 8002810:	d118      	bne.n	8002844 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002816:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002818:	2201      	movs	r2, #1
 800281a:	697b      	ldr	r3, [r7, #20]
 800281c:	fa02 f303 	lsl.w	r3, r2, r3
 8002820:	43db      	mvns	r3, r3
 8002822:	693a      	ldr	r2, [r7, #16]
 8002824:	4013      	ands	r3, r2
 8002826:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	08db      	lsrs	r3, r3, #3
 800282e:	f003 0201 	and.w	r2, r3, #1
 8002832:	697b      	ldr	r3, [r7, #20]
 8002834:	fa02 f303 	lsl.w	r3, r2, r3
 8002838:	693a      	ldr	r2, [r7, #16]
 800283a:	4313      	orrs	r3, r2
 800283c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	693a      	ldr	r2, [r7, #16]
 8002842:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	68db      	ldr	r3, [r3, #12]
 8002848:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800284a:	697b      	ldr	r3, [r7, #20]
 800284c:	005b      	lsls	r3, r3, #1
 800284e:	2203      	movs	r2, #3
 8002850:	fa02 f303 	lsl.w	r3, r2, r3
 8002854:	43db      	mvns	r3, r3
 8002856:	693a      	ldr	r2, [r7, #16]
 8002858:	4013      	ands	r3, r2
 800285a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	689a      	ldr	r2, [r3, #8]
 8002860:	697b      	ldr	r3, [r7, #20]
 8002862:	005b      	lsls	r3, r3, #1
 8002864:	fa02 f303 	lsl.w	r3, r2, r3
 8002868:	693a      	ldr	r2, [r7, #16]
 800286a:	4313      	orrs	r3, r2
 800286c:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	693a      	ldr	r2, [r7, #16]
 8002872:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	2b02      	cmp	r3, #2
 800287a:	d003      	beq.n	8002884 <HAL_GPIO_Init+0x128>
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	2b12      	cmp	r3, #18
 8002882:	d123      	bne.n	80028cc <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002884:	697b      	ldr	r3, [r7, #20]
 8002886:	08da      	lsrs	r2, r3, #3
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	3208      	adds	r2, #8
 800288c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002890:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002892:	697b      	ldr	r3, [r7, #20]
 8002894:	f003 0307 	and.w	r3, r3, #7
 8002898:	009b      	lsls	r3, r3, #2
 800289a:	220f      	movs	r2, #15
 800289c:	fa02 f303 	lsl.w	r3, r2, r3
 80028a0:	43db      	mvns	r3, r3
 80028a2:	693a      	ldr	r2, [r7, #16]
 80028a4:	4013      	ands	r3, r2
 80028a6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	691a      	ldr	r2, [r3, #16]
 80028ac:	697b      	ldr	r3, [r7, #20]
 80028ae:	f003 0307 	and.w	r3, r3, #7
 80028b2:	009b      	lsls	r3, r3, #2
 80028b4:	fa02 f303 	lsl.w	r3, r2, r3
 80028b8:	693a      	ldr	r2, [r7, #16]
 80028ba:	4313      	orrs	r3, r2
 80028bc:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80028be:	697b      	ldr	r3, [r7, #20]
 80028c0:	08da      	lsrs	r2, r3, #3
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	3208      	adds	r2, #8
 80028c6:	6939      	ldr	r1, [r7, #16]
 80028c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80028d2:	697b      	ldr	r3, [r7, #20]
 80028d4:	005b      	lsls	r3, r3, #1
 80028d6:	2203      	movs	r2, #3
 80028d8:	fa02 f303 	lsl.w	r3, r2, r3
 80028dc:	43db      	mvns	r3, r3
 80028de:	693a      	ldr	r2, [r7, #16]
 80028e0:	4013      	ands	r3, r2
 80028e2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	f003 0203 	and.w	r2, r3, #3
 80028ec:	697b      	ldr	r3, [r7, #20]
 80028ee:	005b      	lsls	r3, r3, #1
 80028f0:	fa02 f303 	lsl.w	r3, r2, r3
 80028f4:	693a      	ldr	r2, [r7, #16]
 80028f6:	4313      	orrs	r3, r2
 80028f8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	693a      	ldr	r2, [r7, #16]
 80028fe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002908:	2b00      	cmp	r3, #0
 800290a:	f000 80ac 	beq.w	8002a66 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800290e:	4b5f      	ldr	r3, [pc, #380]	; (8002a8c <HAL_GPIO_Init+0x330>)
 8002910:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002912:	4a5e      	ldr	r2, [pc, #376]	; (8002a8c <HAL_GPIO_Init+0x330>)
 8002914:	f043 0301 	orr.w	r3, r3, #1
 8002918:	6613      	str	r3, [r2, #96]	; 0x60
 800291a:	4b5c      	ldr	r3, [pc, #368]	; (8002a8c <HAL_GPIO_Init+0x330>)
 800291c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800291e:	f003 0301 	and.w	r3, r3, #1
 8002922:	60bb      	str	r3, [r7, #8]
 8002924:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002926:	4a5a      	ldr	r2, [pc, #360]	; (8002a90 <HAL_GPIO_Init+0x334>)
 8002928:	697b      	ldr	r3, [r7, #20]
 800292a:	089b      	lsrs	r3, r3, #2
 800292c:	3302      	adds	r3, #2
 800292e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002932:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002934:	697b      	ldr	r3, [r7, #20]
 8002936:	f003 0303 	and.w	r3, r3, #3
 800293a:	009b      	lsls	r3, r3, #2
 800293c:	220f      	movs	r2, #15
 800293e:	fa02 f303 	lsl.w	r3, r2, r3
 8002942:	43db      	mvns	r3, r3
 8002944:	693a      	ldr	r2, [r7, #16]
 8002946:	4013      	ands	r3, r2
 8002948:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002950:	d025      	beq.n	800299e <HAL_GPIO_Init+0x242>
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	4a4f      	ldr	r2, [pc, #316]	; (8002a94 <HAL_GPIO_Init+0x338>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d01f      	beq.n	800299a <HAL_GPIO_Init+0x23e>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	4a4e      	ldr	r2, [pc, #312]	; (8002a98 <HAL_GPIO_Init+0x33c>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d019      	beq.n	8002996 <HAL_GPIO_Init+0x23a>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	4a4d      	ldr	r2, [pc, #308]	; (8002a9c <HAL_GPIO_Init+0x340>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d013      	beq.n	8002992 <HAL_GPIO_Init+0x236>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	4a4c      	ldr	r2, [pc, #304]	; (8002aa0 <HAL_GPIO_Init+0x344>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d00d      	beq.n	800298e <HAL_GPIO_Init+0x232>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	4a4b      	ldr	r2, [pc, #300]	; (8002aa4 <HAL_GPIO_Init+0x348>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d007      	beq.n	800298a <HAL_GPIO_Init+0x22e>
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	4a4a      	ldr	r2, [pc, #296]	; (8002aa8 <HAL_GPIO_Init+0x34c>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d101      	bne.n	8002986 <HAL_GPIO_Init+0x22a>
 8002982:	2306      	movs	r3, #6
 8002984:	e00c      	b.n	80029a0 <HAL_GPIO_Init+0x244>
 8002986:	2307      	movs	r3, #7
 8002988:	e00a      	b.n	80029a0 <HAL_GPIO_Init+0x244>
 800298a:	2305      	movs	r3, #5
 800298c:	e008      	b.n	80029a0 <HAL_GPIO_Init+0x244>
 800298e:	2304      	movs	r3, #4
 8002990:	e006      	b.n	80029a0 <HAL_GPIO_Init+0x244>
 8002992:	2303      	movs	r3, #3
 8002994:	e004      	b.n	80029a0 <HAL_GPIO_Init+0x244>
 8002996:	2302      	movs	r3, #2
 8002998:	e002      	b.n	80029a0 <HAL_GPIO_Init+0x244>
 800299a:	2301      	movs	r3, #1
 800299c:	e000      	b.n	80029a0 <HAL_GPIO_Init+0x244>
 800299e:	2300      	movs	r3, #0
 80029a0:	697a      	ldr	r2, [r7, #20]
 80029a2:	f002 0203 	and.w	r2, r2, #3
 80029a6:	0092      	lsls	r2, r2, #2
 80029a8:	4093      	lsls	r3, r2
 80029aa:	693a      	ldr	r2, [r7, #16]
 80029ac:	4313      	orrs	r3, r2
 80029ae:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80029b0:	4937      	ldr	r1, [pc, #220]	; (8002a90 <HAL_GPIO_Init+0x334>)
 80029b2:	697b      	ldr	r3, [r7, #20]
 80029b4:	089b      	lsrs	r3, r3, #2
 80029b6:	3302      	adds	r3, #2
 80029b8:	693a      	ldr	r2, [r7, #16]
 80029ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80029be:	4b3b      	ldr	r3, [pc, #236]	; (8002aac <HAL_GPIO_Init+0x350>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	43db      	mvns	r3, r3
 80029c8:	693a      	ldr	r2, [r7, #16]
 80029ca:	4013      	ands	r3, r2
 80029cc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d003      	beq.n	80029e2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80029da:	693a      	ldr	r2, [r7, #16]
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	4313      	orrs	r3, r2
 80029e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80029e2:	4a32      	ldr	r2, [pc, #200]	; (8002aac <HAL_GPIO_Init+0x350>)
 80029e4:	693b      	ldr	r3, [r7, #16]
 80029e6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80029e8:	4b30      	ldr	r3, [pc, #192]	; (8002aac <HAL_GPIO_Init+0x350>)
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	43db      	mvns	r3, r3
 80029f2:	693a      	ldr	r2, [r7, #16]
 80029f4:	4013      	ands	r3, r2
 80029f6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d003      	beq.n	8002a0c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002a04:	693a      	ldr	r2, [r7, #16]
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	4313      	orrs	r3, r2
 8002a0a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002a0c:	4a27      	ldr	r2, [pc, #156]	; (8002aac <HAL_GPIO_Init+0x350>)
 8002a0e:	693b      	ldr	r3, [r7, #16]
 8002a10:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002a12:	4b26      	ldr	r3, [pc, #152]	; (8002aac <HAL_GPIO_Init+0x350>)
 8002a14:	689b      	ldr	r3, [r3, #8]
 8002a16:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	43db      	mvns	r3, r3
 8002a1c:	693a      	ldr	r2, [r7, #16]
 8002a1e:	4013      	ands	r3, r2
 8002a20:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d003      	beq.n	8002a36 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002a2e:	693a      	ldr	r2, [r7, #16]
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	4313      	orrs	r3, r2
 8002a34:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002a36:	4a1d      	ldr	r2, [pc, #116]	; (8002aac <HAL_GPIO_Init+0x350>)
 8002a38:	693b      	ldr	r3, [r7, #16]
 8002a3a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002a3c:	4b1b      	ldr	r3, [pc, #108]	; (8002aac <HAL_GPIO_Init+0x350>)
 8002a3e:	68db      	ldr	r3, [r3, #12]
 8002a40:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	43db      	mvns	r3, r3
 8002a46:	693a      	ldr	r2, [r7, #16]
 8002a48:	4013      	ands	r3, r2
 8002a4a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d003      	beq.n	8002a60 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002a58:	693a      	ldr	r2, [r7, #16]
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	4313      	orrs	r3, r2
 8002a5e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002a60:	4a12      	ldr	r2, [pc, #72]	; (8002aac <HAL_GPIO_Init+0x350>)
 8002a62:	693b      	ldr	r3, [r7, #16]
 8002a64:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002a66:	697b      	ldr	r3, [r7, #20]
 8002a68:	3301      	adds	r3, #1
 8002a6a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	681a      	ldr	r2, [r3, #0]
 8002a70:	697b      	ldr	r3, [r7, #20]
 8002a72:	fa22 f303 	lsr.w	r3, r2, r3
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	f47f ae78 	bne.w	800276c <HAL_GPIO_Init+0x10>
  }
}
 8002a7c:	bf00      	nop
 8002a7e:	bf00      	nop
 8002a80:	371c      	adds	r7, #28
 8002a82:	46bd      	mov	sp, r7
 8002a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a88:	4770      	bx	lr
 8002a8a:	bf00      	nop
 8002a8c:	40021000 	.word	0x40021000
 8002a90:	40010000 	.word	0x40010000
 8002a94:	48000400 	.word	0x48000400
 8002a98:	48000800 	.word	0x48000800
 8002a9c:	48000c00 	.word	0x48000c00
 8002aa0:	48001000 	.word	0x48001000
 8002aa4:	48001400 	.word	0x48001400
 8002aa8:	48001800 	.word	0x48001800
 8002aac:	40010400 	.word	0x40010400

08002ab0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	b083      	sub	sp, #12
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
 8002ab8:	460b      	mov	r3, r1
 8002aba:	807b      	strh	r3, [r7, #2]
 8002abc:	4613      	mov	r3, r2
 8002abe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002ac0:	787b      	ldrb	r3, [r7, #1]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d003      	beq.n	8002ace <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002ac6:	887a      	ldrh	r2, [r7, #2]
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002acc:	e002      	b.n	8002ad4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002ace:	887a      	ldrh	r2, [r7, #2]
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002ad4:	bf00      	nop
 8002ad6:	370c      	adds	r7, #12
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ade:	4770      	bx	lr

08002ae0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002ae4:	4b04      	ldr	r3, [pc, #16]	; (8002af8 <HAL_PWREx_GetVoltageRange+0x18>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002aec:	4618      	mov	r0, r3
 8002aee:	46bd      	mov	sp, r7
 8002af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af4:	4770      	bx	lr
 8002af6:	bf00      	nop
 8002af8:	40007000 	.word	0x40007000

08002afc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002afc:	b480      	push	{r7}
 8002afe:	b085      	sub	sp, #20
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b0a:	d130      	bne.n	8002b6e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002b0c:	4b23      	ldr	r3, [pc, #140]	; (8002b9c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002b14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b18:	d038      	beq.n	8002b8c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002b1a:	4b20      	ldr	r3, [pc, #128]	; (8002b9c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002b22:	4a1e      	ldr	r2, [pc, #120]	; (8002b9c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b24:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002b28:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002b2a:	4b1d      	ldr	r3, [pc, #116]	; (8002ba0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	2232      	movs	r2, #50	; 0x32
 8002b30:	fb02 f303 	mul.w	r3, r2, r3
 8002b34:	4a1b      	ldr	r2, [pc, #108]	; (8002ba4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002b36:	fba2 2303 	umull	r2, r3, r2, r3
 8002b3a:	0c9b      	lsrs	r3, r3, #18
 8002b3c:	3301      	adds	r3, #1
 8002b3e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002b40:	e002      	b.n	8002b48 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	3b01      	subs	r3, #1
 8002b46:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002b48:	4b14      	ldr	r3, [pc, #80]	; (8002b9c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b4a:	695b      	ldr	r3, [r3, #20]
 8002b4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b54:	d102      	bne.n	8002b5c <HAL_PWREx_ControlVoltageScaling+0x60>
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d1f2      	bne.n	8002b42 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002b5c:	4b0f      	ldr	r3, [pc, #60]	; (8002b9c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b5e:	695b      	ldr	r3, [r3, #20]
 8002b60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b68:	d110      	bne.n	8002b8c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002b6a:	2303      	movs	r3, #3
 8002b6c:	e00f      	b.n	8002b8e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002b6e:	4b0b      	ldr	r3, [pc, #44]	; (8002b9c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002b76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b7a:	d007      	beq.n	8002b8c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002b7c:	4b07      	ldr	r3, [pc, #28]	; (8002b9c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002b84:	4a05      	ldr	r2, [pc, #20]	; (8002b9c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b86:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002b8a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002b8c:	2300      	movs	r3, #0
}
 8002b8e:	4618      	mov	r0, r3
 8002b90:	3714      	adds	r7, #20
 8002b92:	46bd      	mov	sp, r7
 8002b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b98:	4770      	bx	lr
 8002b9a:	bf00      	nop
 8002b9c:	40007000 	.word	0x40007000
 8002ba0:	20000010 	.word	0x20000010
 8002ba4:	431bde83 	.word	0x431bde83

08002ba8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b088      	sub	sp, #32
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d101      	bne.n	8002bba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	e3d4      	b.n	8003364 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002bba:	4ba1      	ldr	r3, [pc, #644]	; (8002e40 <HAL_RCC_OscConfig+0x298>)
 8002bbc:	689b      	ldr	r3, [r3, #8]
 8002bbe:	f003 030c 	and.w	r3, r3, #12
 8002bc2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002bc4:	4b9e      	ldr	r3, [pc, #632]	; (8002e40 <HAL_RCC_OscConfig+0x298>)
 8002bc6:	68db      	ldr	r3, [r3, #12]
 8002bc8:	f003 0303 	and.w	r3, r3, #3
 8002bcc:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f003 0310 	and.w	r3, r3, #16
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	f000 80e4 	beq.w	8002da4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002bdc:	69bb      	ldr	r3, [r7, #24]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d007      	beq.n	8002bf2 <HAL_RCC_OscConfig+0x4a>
 8002be2:	69bb      	ldr	r3, [r7, #24]
 8002be4:	2b0c      	cmp	r3, #12
 8002be6:	f040 808b 	bne.w	8002d00 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002bea:	697b      	ldr	r3, [r7, #20]
 8002bec:	2b01      	cmp	r3, #1
 8002bee:	f040 8087 	bne.w	8002d00 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002bf2:	4b93      	ldr	r3, [pc, #588]	; (8002e40 <HAL_RCC_OscConfig+0x298>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f003 0302 	and.w	r3, r3, #2
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d005      	beq.n	8002c0a <HAL_RCC_OscConfig+0x62>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	699b      	ldr	r3, [r3, #24]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d101      	bne.n	8002c0a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002c06:	2301      	movs	r3, #1
 8002c08:	e3ac      	b.n	8003364 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6a1a      	ldr	r2, [r3, #32]
 8002c0e:	4b8c      	ldr	r3, [pc, #560]	; (8002e40 <HAL_RCC_OscConfig+0x298>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f003 0308 	and.w	r3, r3, #8
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d004      	beq.n	8002c24 <HAL_RCC_OscConfig+0x7c>
 8002c1a:	4b89      	ldr	r3, [pc, #548]	; (8002e40 <HAL_RCC_OscConfig+0x298>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c22:	e005      	b.n	8002c30 <HAL_RCC_OscConfig+0x88>
 8002c24:	4b86      	ldr	r3, [pc, #536]	; (8002e40 <HAL_RCC_OscConfig+0x298>)
 8002c26:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c2a:	091b      	lsrs	r3, r3, #4
 8002c2c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c30:	4293      	cmp	r3, r2
 8002c32:	d223      	bcs.n	8002c7c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6a1b      	ldr	r3, [r3, #32]
 8002c38:	4618      	mov	r0, r3
 8002c3a:	f000 fd41 	bl	80036c0 <RCC_SetFlashLatencyFromMSIRange>
 8002c3e:	4603      	mov	r3, r0
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d001      	beq.n	8002c48 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002c44:	2301      	movs	r3, #1
 8002c46:	e38d      	b.n	8003364 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002c48:	4b7d      	ldr	r3, [pc, #500]	; (8002e40 <HAL_RCC_OscConfig+0x298>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4a7c      	ldr	r2, [pc, #496]	; (8002e40 <HAL_RCC_OscConfig+0x298>)
 8002c4e:	f043 0308 	orr.w	r3, r3, #8
 8002c52:	6013      	str	r3, [r2, #0]
 8002c54:	4b7a      	ldr	r3, [pc, #488]	; (8002e40 <HAL_RCC_OscConfig+0x298>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6a1b      	ldr	r3, [r3, #32]
 8002c60:	4977      	ldr	r1, [pc, #476]	; (8002e40 <HAL_RCC_OscConfig+0x298>)
 8002c62:	4313      	orrs	r3, r2
 8002c64:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002c66:	4b76      	ldr	r3, [pc, #472]	; (8002e40 <HAL_RCC_OscConfig+0x298>)
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	69db      	ldr	r3, [r3, #28]
 8002c72:	021b      	lsls	r3, r3, #8
 8002c74:	4972      	ldr	r1, [pc, #456]	; (8002e40 <HAL_RCC_OscConfig+0x298>)
 8002c76:	4313      	orrs	r3, r2
 8002c78:	604b      	str	r3, [r1, #4]
 8002c7a:	e025      	b.n	8002cc8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002c7c:	4b70      	ldr	r3, [pc, #448]	; (8002e40 <HAL_RCC_OscConfig+0x298>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4a6f      	ldr	r2, [pc, #444]	; (8002e40 <HAL_RCC_OscConfig+0x298>)
 8002c82:	f043 0308 	orr.w	r3, r3, #8
 8002c86:	6013      	str	r3, [r2, #0]
 8002c88:	4b6d      	ldr	r3, [pc, #436]	; (8002e40 <HAL_RCC_OscConfig+0x298>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6a1b      	ldr	r3, [r3, #32]
 8002c94:	496a      	ldr	r1, [pc, #424]	; (8002e40 <HAL_RCC_OscConfig+0x298>)
 8002c96:	4313      	orrs	r3, r2
 8002c98:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002c9a:	4b69      	ldr	r3, [pc, #420]	; (8002e40 <HAL_RCC_OscConfig+0x298>)
 8002c9c:	685b      	ldr	r3, [r3, #4]
 8002c9e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	69db      	ldr	r3, [r3, #28]
 8002ca6:	021b      	lsls	r3, r3, #8
 8002ca8:	4965      	ldr	r1, [pc, #404]	; (8002e40 <HAL_RCC_OscConfig+0x298>)
 8002caa:	4313      	orrs	r3, r2
 8002cac:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002cae:	69bb      	ldr	r3, [r7, #24]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d109      	bne.n	8002cc8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6a1b      	ldr	r3, [r3, #32]
 8002cb8:	4618      	mov	r0, r3
 8002cba:	f000 fd01 	bl	80036c0 <RCC_SetFlashLatencyFromMSIRange>
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d001      	beq.n	8002cc8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	e34d      	b.n	8003364 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002cc8:	f000 fc36 	bl	8003538 <HAL_RCC_GetSysClockFreq>
 8002ccc:	4602      	mov	r2, r0
 8002cce:	4b5c      	ldr	r3, [pc, #368]	; (8002e40 <HAL_RCC_OscConfig+0x298>)
 8002cd0:	689b      	ldr	r3, [r3, #8]
 8002cd2:	091b      	lsrs	r3, r3, #4
 8002cd4:	f003 030f 	and.w	r3, r3, #15
 8002cd8:	495a      	ldr	r1, [pc, #360]	; (8002e44 <HAL_RCC_OscConfig+0x29c>)
 8002cda:	5ccb      	ldrb	r3, [r1, r3]
 8002cdc:	f003 031f 	and.w	r3, r3, #31
 8002ce0:	fa22 f303 	lsr.w	r3, r2, r3
 8002ce4:	4a58      	ldr	r2, [pc, #352]	; (8002e48 <HAL_RCC_OscConfig+0x2a0>)
 8002ce6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002ce8:	4b58      	ldr	r3, [pc, #352]	; (8002e4c <HAL_RCC_OscConfig+0x2a4>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4618      	mov	r0, r3
 8002cee:	f7ff fb63 	bl	80023b8 <HAL_InitTick>
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002cf6:	7bfb      	ldrb	r3, [r7, #15]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d052      	beq.n	8002da2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002cfc:	7bfb      	ldrb	r3, [r7, #15]
 8002cfe:	e331      	b.n	8003364 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	699b      	ldr	r3, [r3, #24]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d032      	beq.n	8002d6e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002d08:	4b4d      	ldr	r3, [pc, #308]	; (8002e40 <HAL_RCC_OscConfig+0x298>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a4c      	ldr	r2, [pc, #304]	; (8002e40 <HAL_RCC_OscConfig+0x298>)
 8002d0e:	f043 0301 	orr.w	r3, r3, #1
 8002d12:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002d14:	f7ff fba0 	bl	8002458 <HAL_GetTick>
 8002d18:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002d1a:	e008      	b.n	8002d2e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002d1c:	f7ff fb9c 	bl	8002458 <HAL_GetTick>
 8002d20:	4602      	mov	r2, r0
 8002d22:	693b      	ldr	r3, [r7, #16]
 8002d24:	1ad3      	subs	r3, r2, r3
 8002d26:	2b02      	cmp	r3, #2
 8002d28:	d901      	bls.n	8002d2e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002d2a:	2303      	movs	r3, #3
 8002d2c:	e31a      	b.n	8003364 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002d2e:	4b44      	ldr	r3, [pc, #272]	; (8002e40 <HAL_RCC_OscConfig+0x298>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f003 0302 	and.w	r3, r3, #2
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d0f0      	beq.n	8002d1c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002d3a:	4b41      	ldr	r3, [pc, #260]	; (8002e40 <HAL_RCC_OscConfig+0x298>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4a40      	ldr	r2, [pc, #256]	; (8002e40 <HAL_RCC_OscConfig+0x298>)
 8002d40:	f043 0308 	orr.w	r3, r3, #8
 8002d44:	6013      	str	r3, [r2, #0]
 8002d46:	4b3e      	ldr	r3, [pc, #248]	; (8002e40 <HAL_RCC_OscConfig+0x298>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6a1b      	ldr	r3, [r3, #32]
 8002d52:	493b      	ldr	r1, [pc, #236]	; (8002e40 <HAL_RCC_OscConfig+0x298>)
 8002d54:	4313      	orrs	r3, r2
 8002d56:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002d58:	4b39      	ldr	r3, [pc, #228]	; (8002e40 <HAL_RCC_OscConfig+0x298>)
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	69db      	ldr	r3, [r3, #28]
 8002d64:	021b      	lsls	r3, r3, #8
 8002d66:	4936      	ldr	r1, [pc, #216]	; (8002e40 <HAL_RCC_OscConfig+0x298>)
 8002d68:	4313      	orrs	r3, r2
 8002d6a:	604b      	str	r3, [r1, #4]
 8002d6c:	e01a      	b.n	8002da4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002d6e:	4b34      	ldr	r3, [pc, #208]	; (8002e40 <HAL_RCC_OscConfig+0x298>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4a33      	ldr	r2, [pc, #204]	; (8002e40 <HAL_RCC_OscConfig+0x298>)
 8002d74:	f023 0301 	bic.w	r3, r3, #1
 8002d78:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002d7a:	f7ff fb6d 	bl	8002458 <HAL_GetTick>
 8002d7e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002d80:	e008      	b.n	8002d94 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002d82:	f7ff fb69 	bl	8002458 <HAL_GetTick>
 8002d86:	4602      	mov	r2, r0
 8002d88:	693b      	ldr	r3, [r7, #16]
 8002d8a:	1ad3      	subs	r3, r2, r3
 8002d8c:	2b02      	cmp	r3, #2
 8002d8e:	d901      	bls.n	8002d94 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002d90:	2303      	movs	r3, #3
 8002d92:	e2e7      	b.n	8003364 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002d94:	4b2a      	ldr	r3, [pc, #168]	; (8002e40 <HAL_RCC_OscConfig+0x298>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f003 0302 	and.w	r3, r3, #2
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d1f0      	bne.n	8002d82 <HAL_RCC_OscConfig+0x1da>
 8002da0:	e000      	b.n	8002da4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002da2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f003 0301 	and.w	r3, r3, #1
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d074      	beq.n	8002e9a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002db0:	69bb      	ldr	r3, [r7, #24]
 8002db2:	2b08      	cmp	r3, #8
 8002db4:	d005      	beq.n	8002dc2 <HAL_RCC_OscConfig+0x21a>
 8002db6:	69bb      	ldr	r3, [r7, #24]
 8002db8:	2b0c      	cmp	r3, #12
 8002dba:	d10e      	bne.n	8002dda <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002dbc:	697b      	ldr	r3, [r7, #20]
 8002dbe:	2b03      	cmp	r3, #3
 8002dc0:	d10b      	bne.n	8002dda <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002dc2:	4b1f      	ldr	r3, [pc, #124]	; (8002e40 <HAL_RCC_OscConfig+0x298>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d064      	beq.n	8002e98 <HAL_RCC_OscConfig+0x2f0>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d160      	bne.n	8002e98 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	e2c4      	b.n	8003364 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002de2:	d106      	bne.n	8002df2 <HAL_RCC_OscConfig+0x24a>
 8002de4:	4b16      	ldr	r3, [pc, #88]	; (8002e40 <HAL_RCC_OscConfig+0x298>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4a15      	ldr	r2, [pc, #84]	; (8002e40 <HAL_RCC_OscConfig+0x298>)
 8002dea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002dee:	6013      	str	r3, [r2, #0]
 8002df0:	e01d      	b.n	8002e2e <HAL_RCC_OscConfig+0x286>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	685b      	ldr	r3, [r3, #4]
 8002df6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002dfa:	d10c      	bne.n	8002e16 <HAL_RCC_OscConfig+0x26e>
 8002dfc:	4b10      	ldr	r3, [pc, #64]	; (8002e40 <HAL_RCC_OscConfig+0x298>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4a0f      	ldr	r2, [pc, #60]	; (8002e40 <HAL_RCC_OscConfig+0x298>)
 8002e02:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e06:	6013      	str	r3, [r2, #0]
 8002e08:	4b0d      	ldr	r3, [pc, #52]	; (8002e40 <HAL_RCC_OscConfig+0x298>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4a0c      	ldr	r2, [pc, #48]	; (8002e40 <HAL_RCC_OscConfig+0x298>)
 8002e0e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e12:	6013      	str	r3, [r2, #0]
 8002e14:	e00b      	b.n	8002e2e <HAL_RCC_OscConfig+0x286>
 8002e16:	4b0a      	ldr	r3, [pc, #40]	; (8002e40 <HAL_RCC_OscConfig+0x298>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4a09      	ldr	r2, [pc, #36]	; (8002e40 <HAL_RCC_OscConfig+0x298>)
 8002e1c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e20:	6013      	str	r3, [r2, #0]
 8002e22:	4b07      	ldr	r3, [pc, #28]	; (8002e40 <HAL_RCC_OscConfig+0x298>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4a06      	ldr	r2, [pc, #24]	; (8002e40 <HAL_RCC_OscConfig+0x298>)
 8002e28:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e2c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d01c      	beq.n	8002e70 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e36:	f7ff fb0f 	bl	8002458 <HAL_GetTick>
 8002e3a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002e3c:	e011      	b.n	8002e62 <HAL_RCC_OscConfig+0x2ba>
 8002e3e:	bf00      	nop
 8002e40:	40021000 	.word	0x40021000
 8002e44:	0800b9c4 	.word	0x0800b9c4
 8002e48:	20000010 	.word	0x20000010
 8002e4c:	20000014 	.word	0x20000014
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e50:	f7ff fb02 	bl	8002458 <HAL_GetTick>
 8002e54:	4602      	mov	r2, r0
 8002e56:	693b      	ldr	r3, [r7, #16]
 8002e58:	1ad3      	subs	r3, r2, r3
 8002e5a:	2b64      	cmp	r3, #100	; 0x64
 8002e5c:	d901      	bls.n	8002e62 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002e5e:	2303      	movs	r3, #3
 8002e60:	e280      	b.n	8003364 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002e62:	4baf      	ldr	r3, [pc, #700]	; (8003120 <HAL_RCC_OscConfig+0x578>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d0f0      	beq.n	8002e50 <HAL_RCC_OscConfig+0x2a8>
 8002e6e:	e014      	b.n	8002e9a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e70:	f7ff faf2 	bl	8002458 <HAL_GetTick>
 8002e74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002e76:	e008      	b.n	8002e8a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e78:	f7ff faee 	bl	8002458 <HAL_GetTick>
 8002e7c:	4602      	mov	r2, r0
 8002e7e:	693b      	ldr	r3, [r7, #16]
 8002e80:	1ad3      	subs	r3, r2, r3
 8002e82:	2b64      	cmp	r3, #100	; 0x64
 8002e84:	d901      	bls.n	8002e8a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002e86:	2303      	movs	r3, #3
 8002e88:	e26c      	b.n	8003364 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002e8a:	4ba5      	ldr	r3, [pc, #660]	; (8003120 <HAL_RCC_OscConfig+0x578>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d1f0      	bne.n	8002e78 <HAL_RCC_OscConfig+0x2d0>
 8002e96:	e000      	b.n	8002e9a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e98:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f003 0302 	and.w	r3, r3, #2
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d060      	beq.n	8002f68 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002ea6:	69bb      	ldr	r3, [r7, #24]
 8002ea8:	2b04      	cmp	r3, #4
 8002eaa:	d005      	beq.n	8002eb8 <HAL_RCC_OscConfig+0x310>
 8002eac:	69bb      	ldr	r3, [r7, #24]
 8002eae:	2b0c      	cmp	r3, #12
 8002eb0:	d119      	bne.n	8002ee6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002eb2:	697b      	ldr	r3, [r7, #20]
 8002eb4:	2b02      	cmp	r3, #2
 8002eb6:	d116      	bne.n	8002ee6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002eb8:	4b99      	ldr	r3, [pc, #612]	; (8003120 <HAL_RCC_OscConfig+0x578>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d005      	beq.n	8002ed0 <HAL_RCC_OscConfig+0x328>
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	68db      	ldr	r3, [r3, #12]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d101      	bne.n	8002ed0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002ecc:	2301      	movs	r3, #1
 8002ece:	e249      	b.n	8003364 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ed0:	4b93      	ldr	r3, [pc, #588]	; (8003120 <HAL_RCC_OscConfig+0x578>)
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	691b      	ldr	r3, [r3, #16]
 8002edc:	061b      	lsls	r3, r3, #24
 8002ede:	4990      	ldr	r1, [pc, #576]	; (8003120 <HAL_RCC_OscConfig+0x578>)
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ee4:	e040      	b.n	8002f68 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	68db      	ldr	r3, [r3, #12]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d023      	beq.n	8002f36 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002eee:	4b8c      	ldr	r3, [pc, #560]	; (8003120 <HAL_RCC_OscConfig+0x578>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4a8b      	ldr	r2, [pc, #556]	; (8003120 <HAL_RCC_OscConfig+0x578>)
 8002ef4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ef8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002efa:	f7ff faad 	bl	8002458 <HAL_GetTick>
 8002efe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002f00:	e008      	b.n	8002f14 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f02:	f7ff faa9 	bl	8002458 <HAL_GetTick>
 8002f06:	4602      	mov	r2, r0
 8002f08:	693b      	ldr	r3, [r7, #16]
 8002f0a:	1ad3      	subs	r3, r2, r3
 8002f0c:	2b02      	cmp	r3, #2
 8002f0e:	d901      	bls.n	8002f14 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002f10:	2303      	movs	r3, #3
 8002f12:	e227      	b.n	8003364 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002f14:	4b82      	ldr	r3, [pc, #520]	; (8003120 <HAL_RCC_OscConfig+0x578>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d0f0      	beq.n	8002f02 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f20:	4b7f      	ldr	r3, [pc, #508]	; (8003120 <HAL_RCC_OscConfig+0x578>)
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	691b      	ldr	r3, [r3, #16]
 8002f2c:	061b      	lsls	r3, r3, #24
 8002f2e:	497c      	ldr	r1, [pc, #496]	; (8003120 <HAL_RCC_OscConfig+0x578>)
 8002f30:	4313      	orrs	r3, r2
 8002f32:	604b      	str	r3, [r1, #4]
 8002f34:	e018      	b.n	8002f68 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f36:	4b7a      	ldr	r3, [pc, #488]	; (8003120 <HAL_RCC_OscConfig+0x578>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4a79      	ldr	r2, [pc, #484]	; (8003120 <HAL_RCC_OscConfig+0x578>)
 8002f3c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002f40:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f42:	f7ff fa89 	bl	8002458 <HAL_GetTick>
 8002f46:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002f48:	e008      	b.n	8002f5c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f4a:	f7ff fa85 	bl	8002458 <HAL_GetTick>
 8002f4e:	4602      	mov	r2, r0
 8002f50:	693b      	ldr	r3, [r7, #16]
 8002f52:	1ad3      	subs	r3, r2, r3
 8002f54:	2b02      	cmp	r3, #2
 8002f56:	d901      	bls.n	8002f5c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002f58:	2303      	movs	r3, #3
 8002f5a:	e203      	b.n	8003364 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002f5c:	4b70      	ldr	r3, [pc, #448]	; (8003120 <HAL_RCC_OscConfig+0x578>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d1f0      	bne.n	8002f4a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f003 0308 	and.w	r3, r3, #8
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d03c      	beq.n	8002fee <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	695b      	ldr	r3, [r3, #20]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d01c      	beq.n	8002fb6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f7c:	4b68      	ldr	r3, [pc, #416]	; (8003120 <HAL_RCC_OscConfig+0x578>)
 8002f7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f82:	4a67      	ldr	r2, [pc, #412]	; (8003120 <HAL_RCC_OscConfig+0x578>)
 8002f84:	f043 0301 	orr.w	r3, r3, #1
 8002f88:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f8c:	f7ff fa64 	bl	8002458 <HAL_GetTick>
 8002f90:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002f92:	e008      	b.n	8002fa6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f94:	f7ff fa60 	bl	8002458 <HAL_GetTick>
 8002f98:	4602      	mov	r2, r0
 8002f9a:	693b      	ldr	r3, [r7, #16]
 8002f9c:	1ad3      	subs	r3, r2, r3
 8002f9e:	2b02      	cmp	r3, #2
 8002fa0:	d901      	bls.n	8002fa6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002fa2:	2303      	movs	r3, #3
 8002fa4:	e1de      	b.n	8003364 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002fa6:	4b5e      	ldr	r3, [pc, #376]	; (8003120 <HAL_RCC_OscConfig+0x578>)
 8002fa8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002fac:	f003 0302 	and.w	r3, r3, #2
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d0ef      	beq.n	8002f94 <HAL_RCC_OscConfig+0x3ec>
 8002fb4:	e01b      	b.n	8002fee <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002fb6:	4b5a      	ldr	r3, [pc, #360]	; (8003120 <HAL_RCC_OscConfig+0x578>)
 8002fb8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002fbc:	4a58      	ldr	r2, [pc, #352]	; (8003120 <HAL_RCC_OscConfig+0x578>)
 8002fbe:	f023 0301 	bic.w	r3, r3, #1
 8002fc2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fc6:	f7ff fa47 	bl	8002458 <HAL_GetTick>
 8002fca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002fcc:	e008      	b.n	8002fe0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002fce:	f7ff fa43 	bl	8002458 <HAL_GetTick>
 8002fd2:	4602      	mov	r2, r0
 8002fd4:	693b      	ldr	r3, [r7, #16]
 8002fd6:	1ad3      	subs	r3, r2, r3
 8002fd8:	2b02      	cmp	r3, #2
 8002fda:	d901      	bls.n	8002fe0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002fdc:	2303      	movs	r3, #3
 8002fde:	e1c1      	b.n	8003364 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002fe0:	4b4f      	ldr	r3, [pc, #316]	; (8003120 <HAL_RCC_OscConfig+0x578>)
 8002fe2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002fe6:	f003 0302 	and.w	r3, r3, #2
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d1ef      	bne.n	8002fce <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f003 0304 	and.w	r3, r3, #4
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	f000 80a6 	beq.w	8003148 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003000:	4b47      	ldr	r3, [pc, #284]	; (8003120 <HAL_RCC_OscConfig+0x578>)
 8003002:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003004:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003008:	2b00      	cmp	r3, #0
 800300a:	d10d      	bne.n	8003028 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800300c:	4b44      	ldr	r3, [pc, #272]	; (8003120 <HAL_RCC_OscConfig+0x578>)
 800300e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003010:	4a43      	ldr	r2, [pc, #268]	; (8003120 <HAL_RCC_OscConfig+0x578>)
 8003012:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003016:	6593      	str	r3, [r2, #88]	; 0x58
 8003018:	4b41      	ldr	r3, [pc, #260]	; (8003120 <HAL_RCC_OscConfig+0x578>)
 800301a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800301c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003020:	60bb      	str	r3, [r7, #8]
 8003022:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003024:	2301      	movs	r3, #1
 8003026:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003028:	4b3e      	ldr	r3, [pc, #248]	; (8003124 <HAL_RCC_OscConfig+0x57c>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003030:	2b00      	cmp	r3, #0
 8003032:	d118      	bne.n	8003066 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003034:	4b3b      	ldr	r3, [pc, #236]	; (8003124 <HAL_RCC_OscConfig+0x57c>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4a3a      	ldr	r2, [pc, #232]	; (8003124 <HAL_RCC_OscConfig+0x57c>)
 800303a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800303e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003040:	f7ff fa0a 	bl	8002458 <HAL_GetTick>
 8003044:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003046:	e008      	b.n	800305a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003048:	f7ff fa06 	bl	8002458 <HAL_GetTick>
 800304c:	4602      	mov	r2, r0
 800304e:	693b      	ldr	r3, [r7, #16]
 8003050:	1ad3      	subs	r3, r2, r3
 8003052:	2b02      	cmp	r3, #2
 8003054:	d901      	bls.n	800305a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003056:	2303      	movs	r3, #3
 8003058:	e184      	b.n	8003364 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800305a:	4b32      	ldr	r3, [pc, #200]	; (8003124 <HAL_RCC_OscConfig+0x57c>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003062:	2b00      	cmp	r3, #0
 8003064:	d0f0      	beq.n	8003048 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	689b      	ldr	r3, [r3, #8]
 800306a:	2b01      	cmp	r3, #1
 800306c:	d108      	bne.n	8003080 <HAL_RCC_OscConfig+0x4d8>
 800306e:	4b2c      	ldr	r3, [pc, #176]	; (8003120 <HAL_RCC_OscConfig+0x578>)
 8003070:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003074:	4a2a      	ldr	r2, [pc, #168]	; (8003120 <HAL_RCC_OscConfig+0x578>)
 8003076:	f043 0301 	orr.w	r3, r3, #1
 800307a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800307e:	e024      	b.n	80030ca <HAL_RCC_OscConfig+0x522>
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	689b      	ldr	r3, [r3, #8]
 8003084:	2b05      	cmp	r3, #5
 8003086:	d110      	bne.n	80030aa <HAL_RCC_OscConfig+0x502>
 8003088:	4b25      	ldr	r3, [pc, #148]	; (8003120 <HAL_RCC_OscConfig+0x578>)
 800308a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800308e:	4a24      	ldr	r2, [pc, #144]	; (8003120 <HAL_RCC_OscConfig+0x578>)
 8003090:	f043 0304 	orr.w	r3, r3, #4
 8003094:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003098:	4b21      	ldr	r3, [pc, #132]	; (8003120 <HAL_RCC_OscConfig+0x578>)
 800309a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800309e:	4a20      	ldr	r2, [pc, #128]	; (8003120 <HAL_RCC_OscConfig+0x578>)
 80030a0:	f043 0301 	orr.w	r3, r3, #1
 80030a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80030a8:	e00f      	b.n	80030ca <HAL_RCC_OscConfig+0x522>
 80030aa:	4b1d      	ldr	r3, [pc, #116]	; (8003120 <HAL_RCC_OscConfig+0x578>)
 80030ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030b0:	4a1b      	ldr	r2, [pc, #108]	; (8003120 <HAL_RCC_OscConfig+0x578>)
 80030b2:	f023 0301 	bic.w	r3, r3, #1
 80030b6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80030ba:	4b19      	ldr	r3, [pc, #100]	; (8003120 <HAL_RCC_OscConfig+0x578>)
 80030bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030c0:	4a17      	ldr	r2, [pc, #92]	; (8003120 <HAL_RCC_OscConfig+0x578>)
 80030c2:	f023 0304 	bic.w	r3, r3, #4
 80030c6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	689b      	ldr	r3, [r3, #8]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d016      	beq.n	8003100 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030d2:	f7ff f9c1 	bl	8002458 <HAL_GetTick>
 80030d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80030d8:	e00a      	b.n	80030f0 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030da:	f7ff f9bd 	bl	8002458 <HAL_GetTick>
 80030de:	4602      	mov	r2, r0
 80030e0:	693b      	ldr	r3, [r7, #16]
 80030e2:	1ad3      	subs	r3, r2, r3
 80030e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d901      	bls.n	80030f0 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80030ec:	2303      	movs	r3, #3
 80030ee:	e139      	b.n	8003364 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80030f0:	4b0b      	ldr	r3, [pc, #44]	; (8003120 <HAL_RCC_OscConfig+0x578>)
 80030f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030f6:	f003 0302 	and.w	r3, r3, #2
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d0ed      	beq.n	80030da <HAL_RCC_OscConfig+0x532>
 80030fe:	e01a      	b.n	8003136 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003100:	f7ff f9aa 	bl	8002458 <HAL_GetTick>
 8003104:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003106:	e00f      	b.n	8003128 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003108:	f7ff f9a6 	bl	8002458 <HAL_GetTick>
 800310c:	4602      	mov	r2, r0
 800310e:	693b      	ldr	r3, [r7, #16]
 8003110:	1ad3      	subs	r3, r2, r3
 8003112:	f241 3288 	movw	r2, #5000	; 0x1388
 8003116:	4293      	cmp	r3, r2
 8003118:	d906      	bls.n	8003128 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800311a:	2303      	movs	r3, #3
 800311c:	e122      	b.n	8003364 <HAL_RCC_OscConfig+0x7bc>
 800311e:	bf00      	nop
 8003120:	40021000 	.word	0x40021000
 8003124:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003128:	4b90      	ldr	r3, [pc, #576]	; (800336c <HAL_RCC_OscConfig+0x7c4>)
 800312a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800312e:	f003 0302 	and.w	r3, r3, #2
 8003132:	2b00      	cmp	r3, #0
 8003134:	d1e8      	bne.n	8003108 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003136:	7ffb      	ldrb	r3, [r7, #31]
 8003138:	2b01      	cmp	r3, #1
 800313a:	d105      	bne.n	8003148 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800313c:	4b8b      	ldr	r3, [pc, #556]	; (800336c <HAL_RCC_OscConfig+0x7c4>)
 800313e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003140:	4a8a      	ldr	r2, [pc, #552]	; (800336c <HAL_RCC_OscConfig+0x7c4>)
 8003142:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003146:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800314c:	2b00      	cmp	r3, #0
 800314e:	f000 8108 	beq.w	8003362 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003156:	2b02      	cmp	r3, #2
 8003158:	f040 80d0 	bne.w	80032fc <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800315c:	4b83      	ldr	r3, [pc, #524]	; (800336c <HAL_RCC_OscConfig+0x7c4>)
 800315e:	68db      	ldr	r3, [r3, #12]
 8003160:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003162:	697b      	ldr	r3, [r7, #20]
 8003164:	f003 0203 	and.w	r2, r3, #3
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800316c:	429a      	cmp	r2, r3
 800316e:	d130      	bne.n	80031d2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003170:	697b      	ldr	r3, [r7, #20]
 8003172:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800317a:	3b01      	subs	r3, #1
 800317c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800317e:	429a      	cmp	r2, r3
 8003180:	d127      	bne.n	80031d2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003182:	697b      	ldr	r3, [r7, #20]
 8003184:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800318c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800318e:	429a      	cmp	r2, r3
 8003190:	d11f      	bne.n	80031d2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003192:	697b      	ldr	r3, [r7, #20]
 8003194:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003198:	687a      	ldr	r2, [r7, #4]
 800319a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800319c:	2a07      	cmp	r2, #7
 800319e:	bf14      	ite	ne
 80031a0:	2201      	movne	r2, #1
 80031a2:	2200      	moveq	r2, #0
 80031a4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d113      	bne.n	80031d2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80031aa:	697b      	ldr	r3, [r7, #20]
 80031ac:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031b4:	085b      	lsrs	r3, r3, #1
 80031b6:	3b01      	subs	r3, #1
 80031b8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80031ba:	429a      	cmp	r2, r3
 80031bc:	d109      	bne.n	80031d2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80031be:	697b      	ldr	r3, [r7, #20]
 80031c0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031c8:	085b      	lsrs	r3, r3, #1
 80031ca:	3b01      	subs	r3, #1
 80031cc:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80031ce:	429a      	cmp	r2, r3
 80031d0:	d06e      	beq.n	80032b0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80031d2:	69bb      	ldr	r3, [r7, #24]
 80031d4:	2b0c      	cmp	r3, #12
 80031d6:	d069      	beq.n	80032ac <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80031d8:	4b64      	ldr	r3, [pc, #400]	; (800336c <HAL_RCC_OscConfig+0x7c4>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d105      	bne.n	80031f0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80031e4:	4b61      	ldr	r3, [pc, #388]	; (800336c <HAL_RCC_OscConfig+0x7c4>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d001      	beq.n	80031f4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80031f0:	2301      	movs	r3, #1
 80031f2:	e0b7      	b.n	8003364 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80031f4:	4b5d      	ldr	r3, [pc, #372]	; (800336c <HAL_RCC_OscConfig+0x7c4>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4a5c      	ldr	r2, [pc, #368]	; (800336c <HAL_RCC_OscConfig+0x7c4>)
 80031fa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80031fe:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003200:	f7ff f92a 	bl	8002458 <HAL_GetTick>
 8003204:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003206:	e008      	b.n	800321a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003208:	f7ff f926 	bl	8002458 <HAL_GetTick>
 800320c:	4602      	mov	r2, r0
 800320e:	693b      	ldr	r3, [r7, #16]
 8003210:	1ad3      	subs	r3, r2, r3
 8003212:	2b02      	cmp	r3, #2
 8003214:	d901      	bls.n	800321a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003216:	2303      	movs	r3, #3
 8003218:	e0a4      	b.n	8003364 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800321a:	4b54      	ldr	r3, [pc, #336]	; (800336c <HAL_RCC_OscConfig+0x7c4>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003222:	2b00      	cmp	r3, #0
 8003224:	d1f0      	bne.n	8003208 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003226:	4b51      	ldr	r3, [pc, #324]	; (800336c <HAL_RCC_OscConfig+0x7c4>)
 8003228:	68da      	ldr	r2, [r3, #12]
 800322a:	4b51      	ldr	r3, [pc, #324]	; (8003370 <HAL_RCC_OscConfig+0x7c8>)
 800322c:	4013      	ands	r3, r2
 800322e:	687a      	ldr	r2, [r7, #4]
 8003230:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003232:	687a      	ldr	r2, [r7, #4]
 8003234:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003236:	3a01      	subs	r2, #1
 8003238:	0112      	lsls	r2, r2, #4
 800323a:	4311      	orrs	r1, r2
 800323c:	687a      	ldr	r2, [r7, #4]
 800323e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003240:	0212      	lsls	r2, r2, #8
 8003242:	4311      	orrs	r1, r2
 8003244:	687a      	ldr	r2, [r7, #4]
 8003246:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003248:	0852      	lsrs	r2, r2, #1
 800324a:	3a01      	subs	r2, #1
 800324c:	0552      	lsls	r2, r2, #21
 800324e:	4311      	orrs	r1, r2
 8003250:	687a      	ldr	r2, [r7, #4]
 8003252:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003254:	0852      	lsrs	r2, r2, #1
 8003256:	3a01      	subs	r2, #1
 8003258:	0652      	lsls	r2, r2, #25
 800325a:	4311      	orrs	r1, r2
 800325c:	687a      	ldr	r2, [r7, #4]
 800325e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003260:	0912      	lsrs	r2, r2, #4
 8003262:	0452      	lsls	r2, r2, #17
 8003264:	430a      	orrs	r2, r1
 8003266:	4941      	ldr	r1, [pc, #260]	; (800336c <HAL_RCC_OscConfig+0x7c4>)
 8003268:	4313      	orrs	r3, r2
 800326a:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800326c:	4b3f      	ldr	r3, [pc, #252]	; (800336c <HAL_RCC_OscConfig+0x7c4>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4a3e      	ldr	r2, [pc, #248]	; (800336c <HAL_RCC_OscConfig+0x7c4>)
 8003272:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003276:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003278:	4b3c      	ldr	r3, [pc, #240]	; (800336c <HAL_RCC_OscConfig+0x7c4>)
 800327a:	68db      	ldr	r3, [r3, #12]
 800327c:	4a3b      	ldr	r2, [pc, #236]	; (800336c <HAL_RCC_OscConfig+0x7c4>)
 800327e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003282:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003284:	f7ff f8e8 	bl	8002458 <HAL_GetTick>
 8003288:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800328a:	e008      	b.n	800329e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800328c:	f7ff f8e4 	bl	8002458 <HAL_GetTick>
 8003290:	4602      	mov	r2, r0
 8003292:	693b      	ldr	r3, [r7, #16]
 8003294:	1ad3      	subs	r3, r2, r3
 8003296:	2b02      	cmp	r3, #2
 8003298:	d901      	bls.n	800329e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800329a:	2303      	movs	r3, #3
 800329c:	e062      	b.n	8003364 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800329e:	4b33      	ldr	r3, [pc, #204]	; (800336c <HAL_RCC_OscConfig+0x7c4>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d0f0      	beq.n	800328c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80032aa:	e05a      	b.n	8003362 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80032ac:	2301      	movs	r3, #1
 80032ae:	e059      	b.n	8003364 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80032b0:	4b2e      	ldr	r3, [pc, #184]	; (800336c <HAL_RCC_OscConfig+0x7c4>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d152      	bne.n	8003362 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80032bc:	4b2b      	ldr	r3, [pc, #172]	; (800336c <HAL_RCC_OscConfig+0x7c4>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4a2a      	ldr	r2, [pc, #168]	; (800336c <HAL_RCC_OscConfig+0x7c4>)
 80032c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80032c6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80032c8:	4b28      	ldr	r3, [pc, #160]	; (800336c <HAL_RCC_OscConfig+0x7c4>)
 80032ca:	68db      	ldr	r3, [r3, #12]
 80032cc:	4a27      	ldr	r2, [pc, #156]	; (800336c <HAL_RCC_OscConfig+0x7c4>)
 80032ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80032d2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80032d4:	f7ff f8c0 	bl	8002458 <HAL_GetTick>
 80032d8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80032da:	e008      	b.n	80032ee <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032dc:	f7ff f8bc 	bl	8002458 <HAL_GetTick>
 80032e0:	4602      	mov	r2, r0
 80032e2:	693b      	ldr	r3, [r7, #16]
 80032e4:	1ad3      	subs	r3, r2, r3
 80032e6:	2b02      	cmp	r3, #2
 80032e8:	d901      	bls.n	80032ee <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80032ea:	2303      	movs	r3, #3
 80032ec:	e03a      	b.n	8003364 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80032ee:	4b1f      	ldr	r3, [pc, #124]	; (800336c <HAL_RCC_OscConfig+0x7c4>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d0f0      	beq.n	80032dc <HAL_RCC_OscConfig+0x734>
 80032fa:	e032      	b.n	8003362 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80032fc:	69bb      	ldr	r3, [r7, #24]
 80032fe:	2b0c      	cmp	r3, #12
 8003300:	d02d      	beq.n	800335e <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003302:	4b1a      	ldr	r3, [pc, #104]	; (800336c <HAL_RCC_OscConfig+0x7c4>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4a19      	ldr	r2, [pc, #100]	; (800336c <HAL_RCC_OscConfig+0x7c4>)
 8003308:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800330c:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800330e:	4b17      	ldr	r3, [pc, #92]	; (800336c <HAL_RCC_OscConfig+0x7c4>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8003316:	2b00      	cmp	r3, #0
 8003318:	d105      	bne.n	8003326 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800331a:	4b14      	ldr	r3, [pc, #80]	; (800336c <HAL_RCC_OscConfig+0x7c4>)
 800331c:	68db      	ldr	r3, [r3, #12]
 800331e:	4a13      	ldr	r2, [pc, #76]	; (800336c <HAL_RCC_OscConfig+0x7c4>)
 8003320:	f023 0303 	bic.w	r3, r3, #3
 8003324:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003326:	4b11      	ldr	r3, [pc, #68]	; (800336c <HAL_RCC_OscConfig+0x7c4>)
 8003328:	68db      	ldr	r3, [r3, #12]
 800332a:	4a10      	ldr	r2, [pc, #64]	; (800336c <HAL_RCC_OscConfig+0x7c4>)
 800332c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003330:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003334:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003336:	f7ff f88f 	bl	8002458 <HAL_GetTick>
 800333a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800333c:	e008      	b.n	8003350 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800333e:	f7ff f88b 	bl	8002458 <HAL_GetTick>
 8003342:	4602      	mov	r2, r0
 8003344:	693b      	ldr	r3, [r7, #16]
 8003346:	1ad3      	subs	r3, r2, r3
 8003348:	2b02      	cmp	r3, #2
 800334a:	d901      	bls.n	8003350 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 800334c:	2303      	movs	r3, #3
 800334e:	e009      	b.n	8003364 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003350:	4b06      	ldr	r3, [pc, #24]	; (800336c <HAL_RCC_OscConfig+0x7c4>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003358:	2b00      	cmp	r3, #0
 800335a:	d1f0      	bne.n	800333e <HAL_RCC_OscConfig+0x796>
 800335c:	e001      	b.n	8003362 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800335e:	2301      	movs	r3, #1
 8003360:	e000      	b.n	8003364 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8003362:	2300      	movs	r3, #0
}
 8003364:	4618      	mov	r0, r3
 8003366:	3720      	adds	r7, #32
 8003368:	46bd      	mov	sp, r7
 800336a:	bd80      	pop	{r7, pc}
 800336c:	40021000 	.word	0x40021000
 8003370:	f99d808c 	.word	0xf99d808c

08003374 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b084      	sub	sp, #16
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
 800337c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d101      	bne.n	8003388 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003384:	2301      	movs	r3, #1
 8003386:	e0c8      	b.n	800351a <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003388:	4b66      	ldr	r3, [pc, #408]	; (8003524 <HAL_RCC_ClockConfig+0x1b0>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f003 0307 	and.w	r3, r3, #7
 8003390:	683a      	ldr	r2, [r7, #0]
 8003392:	429a      	cmp	r2, r3
 8003394:	d910      	bls.n	80033b8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003396:	4b63      	ldr	r3, [pc, #396]	; (8003524 <HAL_RCC_ClockConfig+0x1b0>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f023 0207 	bic.w	r2, r3, #7
 800339e:	4961      	ldr	r1, [pc, #388]	; (8003524 <HAL_RCC_ClockConfig+0x1b0>)
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	4313      	orrs	r3, r2
 80033a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033a6:	4b5f      	ldr	r3, [pc, #380]	; (8003524 <HAL_RCC_ClockConfig+0x1b0>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f003 0307 	and.w	r3, r3, #7
 80033ae:	683a      	ldr	r2, [r7, #0]
 80033b0:	429a      	cmp	r2, r3
 80033b2:	d001      	beq.n	80033b8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80033b4:	2301      	movs	r3, #1
 80033b6:	e0b0      	b.n	800351a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f003 0301 	and.w	r3, r3, #1
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d04c      	beq.n	800345e <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	2b03      	cmp	r3, #3
 80033ca:	d107      	bne.n	80033dc <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80033cc:	4b56      	ldr	r3, [pc, #344]	; (8003528 <HAL_RCC_ClockConfig+0x1b4>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d121      	bne.n	800341c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80033d8:	2301      	movs	r3, #1
 80033da:	e09e      	b.n	800351a <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	2b02      	cmp	r3, #2
 80033e2:	d107      	bne.n	80033f4 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80033e4:	4b50      	ldr	r3, [pc, #320]	; (8003528 <HAL_RCC_ClockConfig+0x1b4>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d115      	bne.n	800341c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80033f0:	2301      	movs	r3, #1
 80033f2:	e092      	b.n	800351a <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d107      	bne.n	800340c <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80033fc:	4b4a      	ldr	r3, [pc, #296]	; (8003528 <HAL_RCC_ClockConfig+0x1b4>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f003 0302 	and.w	r3, r3, #2
 8003404:	2b00      	cmp	r3, #0
 8003406:	d109      	bne.n	800341c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003408:	2301      	movs	r3, #1
 800340a:	e086      	b.n	800351a <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800340c:	4b46      	ldr	r3, [pc, #280]	; (8003528 <HAL_RCC_ClockConfig+0x1b4>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003414:	2b00      	cmp	r3, #0
 8003416:	d101      	bne.n	800341c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003418:	2301      	movs	r3, #1
 800341a:	e07e      	b.n	800351a <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800341c:	4b42      	ldr	r3, [pc, #264]	; (8003528 <HAL_RCC_ClockConfig+0x1b4>)
 800341e:	689b      	ldr	r3, [r3, #8]
 8003420:	f023 0203 	bic.w	r2, r3, #3
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	685b      	ldr	r3, [r3, #4]
 8003428:	493f      	ldr	r1, [pc, #252]	; (8003528 <HAL_RCC_ClockConfig+0x1b4>)
 800342a:	4313      	orrs	r3, r2
 800342c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800342e:	f7ff f813 	bl	8002458 <HAL_GetTick>
 8003432:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003434:	e00a      	b.n	800344c <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003436:	f7ff f80f 	bl	8002458 <HAL_GetTick>
 800343a:	4602      	mov	r2, r0
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	1ad3      	subs	r3, r2, r3
 8003440:	f241 3288 	movw	r2, #5000	; 0x1388
 8003444:	4293      	cmp	r3, r2
 8003446:	d901      	bls.n	800344c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8003448:	2303      	movs	r3, #3
 800344a:	e066      	b.n	800351a <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800344c:	4b36      	ldr	r3, [pc, #216]	; (8003528 <HAL_RCC_ClockConfig+0x1b4>)
 800344e:	689b      	ldr	r3, [r3, #8]
 8003450:	f003 020c 	and.w	r2, r3, #12
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	009b      	lsls	r3, r3, #2
 800345a:	429a      	cmp	r2, r3
 800345c:	d1eb      	bne.n	8003436 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f003 0302 	and.w	r3, r3, #2
 8003466:	2b00      	cmp	r3, #0
 8003468:	d008      	beq.n	800347c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800346a:	4b2f      	ldr	r3, [pc, #188]	; (8003528 <HAL_RCC_ClockConfig+0x1b4>)
 800346c:	689b      	ldr	r3, [r3, #8]
 800346e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	689b      	ldr	r3, [r3, #8]
 8003476:	492c      	ldr	r1, [pc, #176]	; (8003528 <HAL_RCC_ClockConfig+0x1b4>)
 8003478:	4313      	orrs	r3, r2
 800347a:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800347c:	4b29      	ldr	r3, [pc, #164]	; (8003524 <HAL_RCC_ClockConfig+0x1b0>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f003 0307 	and.w	r3, r3, #7
 8003484:	683a      	ldr	r2, [r7, #0]
 8003486:	429a      	cmp	r2, r3
 8003488:	d210      	bcs.n	80034ac <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800348a:	4b26      	ldr	r3, [pc, #152]	; (8003524 <HAL_RCC_ClockConfig+0x1b0>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f023 0207 	bic.w	r2, r3, #7
 8003492:	4924      	ldr	r1, [pc, #144]	; (8003524 <HAL_RCC_ClockConfig+0x1b0>)
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	4313      	orrs	r3, r2
 8003498:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800349a:	4b22      	ldr	r3, [pc, #136]	; (8003524 <HAL_RCC_ClockConfig+0x1b0>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f003 0307 	and.w	r3, r3, #7
 80034a2:	683a      	ldr	r2, [r7, #0]
 80034a4:	429a      	cmp	r2, r3
 80034a6:	d001      	beq.n	80034ac <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80034a8:	2301      	movs	r3, #1
 80034aa:	e036      	b.n	800351a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f003 0304 	and.w	r3, r3, #4
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d008      	beq.n	80034ca <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80034b8:	4b1b      	ldr	r3, [pc, #108]	; (8003528 <HAL_RCC_ClockConfig+0x1b4>)
 80034ba:	689b      	ldr	r3, [r3, #8]
 80034bc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	68db      	ldr	r3, [r3, #12]
 80034c4:	4918      	ldr	r1, [pc, #96]	; (8003528 <HAL_RCC_ClockConfig+0x1b4>)
 80034c6:	4313      	orrs	r3, r2
 80034c8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f003 0308 	and.w	r3, r3, #8
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d009      	beq.n	80034ea <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80034d6:	4b14      	ldr	r3, [pc, #80]	; (8003528 <HAL_RCC_ClockConfig+0x1b4>)
 80034d8:	689b      	ldr	r3, [r3, #8]
 80034da:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	691b      	ldr	r3, [r3, #16]
 80034e2:	00db      	lsls	r3, r3, #3
 80034e4:	4910      	ldr	r1, [pc, #64]	; (8003528 <HAL_RCC_ClockConfig+0x1b4>)
 80034e6:	4313      	orrs	r3, r2
 80034e8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80034ea:	f000 f825 	bl	8003538 <HAL_RCC_GetSysClockFreq>
 80034ee:	4602      	mov	r2, r0
 80034f0:	4b0d      	ldr	r3, [pc, #52]	; (8003528 <HAL_RCC_ClockConfig+0x1b4>)
 80034f2:	689b      	ldr	r3, [r3, #8]
 80034f4:	091b      	lsrs	r3, r3, #4
 80034f6:	f003 030f 	and.w	r3, r3, #15
 80034fa:	490c      	ldr	r1, [pc, #48]	; (800352c <HAL_RCC_ClockConfig+0x1b8>)
 80034fc:	5ccb      	ldrb	r3, [r1, r3]
 80034fe:	f003 031f 	and.w	r3, r3, #31
 8003502:	fa22 f303 	lsr.w	r3, r2, r3
 8003506:	4a0a      	ldr	r2, [pc, #40]	; (8003530 <HAL_RCC_ClockConfig+0x1bc>)
 8003508:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800350a:	4b0a      	ldr	r3, [pc, #40]	; (8003534 <HAL_RCC_ClockConfig+0x1c0>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	4618      	mov	r0, r3
 8003510:	f7fe ff52 	bl	80023b8 <HAL_InitTick>
 8003514:	4603      	mov	r3, r0
 8003516:	72fb      	strb	r3, [r7, #11]

  return status;
 8003518:	7afb      	ldrb	r3, [r7, #11]
}
 800351a:	4618      	mov	r0, r3
 800351c:	3710      	adds	r7, #16
 800351e:	46bd      	mov	sp, r7
 8003520:	bd80      	pop	{r7, pc}
 8003522:	bf00      	nop
 8003524:	40022000 	.word	0x40022000
 8003528:	40021000 	.word	0x40021000
 800352c:	0800b9c4 	.word	0x0800b9c4
 8003530:	20000010 	.word	0x20000010
 8003534:	20000014 	.word	0x20000014

08003538 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003538:	b480      	push	{r7}
 800353a:	b089      	sub	sp, #36	; 0x24
 800353c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800353e:	2300      	movs	r3, #0
 8003540:	61fb      	str	r3, [r7, #28]
 8003542:	2300      	movs	r3, #0
 8003544:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003546:	4b3e      	ldr	r3, [pc, #248]	; (8003640 <HAL_RCC_GetSysClockFreq+0x108>)
 8003548:	689b      	ldr	r3, [r3, #8]
 800354a:	f003 030c 	and.w	r3, r3, #12
 800354e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003550:	4b3b      	ldr	r3, [pc, #236]	; (8003640 <HAL_RCC_GetSysClockFreq+0x108>)
 8003552:	68db      	ldr	r3, [r3, #12]
 8003554:	f003 0303 	and.w	r3, r3, #3
 8003558:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800355a:	693b      	ldr	r3, [r7, #16]
 800355c:	2b00      	cmp	r3, #0
 800355e:	d005      	beq.n	800356c <HAL_RCC_GetSysClockFreq+0x34>
 8003560:	693b      	ldr	r3, [r7, #16]
 8003562:	2b0c      	cmp	r3, #12
 8003564:	d121      	bne.n	80035aa <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	2b01      	cmp	r3, #1
 800356a:	d11e      	bne.n	80035aa <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800356c:	4b34      	ldr	r3, [pc, #208]	; (8003640 <HAL_RCC_GetSysClockFreq+0x108>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f003 0308 	and.w	r3, r3, #8
 8003574:	2b00      	cmp	r3, #0
 8003576:	d107      	bne.n	8003588 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003578:	4b31      	ldr	r3, [pc, #196]	; (8003640 <HAL_RCC_GetSysClockFreq+0x108>)
 800357a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800357e:	0a1b      	lsrs	r3, r3, #8
 8003580:	f003 030f 	and.w	r3, r3, #15
 8003584:	61fb      	str	r3, [r7, #28]
 8003586:	e005      	b.n	8003594 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003588:	4b2d      	ldr	r3, [pc, #180]	; (8003640 <HAL_RCC_GetSysClockFreq+0x108>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	091b      	lsrs	r3, r3, #4
 800358e:	f003 030f 	and.w	r3, r3, #15
 8003592:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003594:	4a2b      	ldr	r2, [pc, #172]	; (8003644 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003596:	69fb      	ldr	r3, [r7, #28]
 8003598:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800359c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800359e:	693b      	ldr	r3, [r7, #16]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d10d      	bne.n	80035c0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80035a4:	69fb      	ldr	r3, [r7, #28]
 80035a6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80035a8:	e00a      	b.n	80035c0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80035aa:	693b      	ldr	r3, [r7, #16]
 80035ac:	2b04      	cmp	r3, #4
 80035ae:	d102      	bne.n	80035b6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80035b0:	4b25      	ldr	r3, [pc, #148]	; (8003648 <HAL_RCC_GetSysClockFreq+0x110>)
 80035b2:	61bb      	str	r3, [r7, #24]
 80035b4:	e004      	b.n	80035c0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80035b6:	693b      	ldr	r3, [r7, #16]
 80035b8:	2b08      	cmp	r3, #8
 80035ba:	d101      	bne.n	80035c0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80035bc:	4b23      	ldr	r3, [pc, #140]	; (800364c <HAL_RCC_GetSysClockFreq+0x114>)
 80035be:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80035c0:	693b      	ldr	r3, [r7, #16]
 80035c2:	2b0c      	cmp	r3, #12
 80035c4:	d134      	bne.n	8003630 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80035c6:	4b1e      	ldr	r3, [pc, #120]	; (8003640 <HAL_RCC_GetSysClockFreq+0x108>)
 80035c8:	68db      	ldr	r3, [r3, #12]
 80035ca:	f003 0303 	and.w	r3, r3, #3
 80035ce:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80035d0:	68bb      	ldr	r3, [r7, #8]
 80035d2:	2b02      	cmp	r3, #2
 80035d4:	d003      	beq.n	80035de <HAL_RCC_GetSysClockFreq+0xa6>
 80035d6:	68bb      	ldr	r3, [r7, #8]
 80035d8:	2b03      	cmp	r3, #3
 80035da:	d003      	beq.n	80035e4 <HAL_RCC_GetSysClockFreq+0xac>
 80035dc:	e005      	b.n	80035ea <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80035de:	4b1a      	ldr	r3, [pc, #104]	; (8003648 <HAL_RCC_GetSysClockFreq+0x110>)
 80035e0:	617b      	str	r3, [r7, #20]
      break;
 80035e2:	e005      	b.n	80035f0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80035e4:	4b19      	ldr	r3, [pc, #100]	; (800364c <HAL_RCC_GetSysClockFreq+0x114>)
 80035e6:	617b      	str	r3, [r7, #20]
      break;
 80035e8:	e002      	b.n	80035f0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80035ea:	69fb      	ldr	r3, [r7, #28]
 80035ec:	617b      	str	r3, [r7, #20]
      break;
 80035ee:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80035f0:	4b13      	ldr	r3, [pc, #76]	; (8003640 <HAL_RCC_GetSysClockFreq+0x108>)
 80035f2:	68db      	ldr	r3, [r3, #12]
 80035f4:	091b      	lsrs	r3, r3, #4
 80035f6:	f003 0307 	and.w	r3, r3, #7
 80035fa:	3301      	adds	r3, #1
 80035fc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80035fe:	4b10      	ldr	r3, [pc, #64]	; (8003640 <HAL_RCC_GetSysClockFreq+0x108>)
 8003600:	68db      	ldr	r3, [r3, #12]
 8003602:	0a1b      	lsrs	r3, r3, #8
 8003604:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003608:	697a      	ldr	r2, [r7, #20]
 800360a:	fb02 f203 	mul.w	r2, r2, r3
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	fbb2 f3f3 	udiv	r3, r2, r3
 8003614:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003616:	4b0a      	ldr	r3, [pc, #40]	; (8003640 <HAL_RCC_GetSysClockFreq+0x108>)
 8003618:	68db      	ldr	r3, [r3, #12]
 800361a:	0e5b      	lsrs	r3, r3, #25
 800361c:	f003 0303 	and.w	r3, r3, #3
 8003620:	3301      	adds	r3, #1
 8003622:	005b      	lsls	r3, r3, #1
 8003624:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003626:	697a      	ldr	r2, [r7, #20]
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	fbb2 f3f3 	udiv	r3, r2, r3
 800362e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003630:	69bb      	ldr	r3, [r7, #24]
}
 8003632:	4618      	mov	r0, r3
 8003634:	3724      	adds	r7, #36	; 0x24
 8003636:	46bd      	mov	sp, r7
 8003638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363c:	4770      	bx	lr
 800363e:	bf00      	nop
 8003640:	40021000 	.word	0x40021000
 8003644:	0800b9dc 	.word	0x0800b9dc
 8003648:	00f42400 	.word	0x00f42400
 800364c:	007a1200 	.word	0x007a1200

08003650 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003650:	b480      	push	{r7}
 8003652:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003654:	4b03      	ldr	r3, [pc, #12]	; (8003664 <HAL_RCC_GetHCLKFreq+0x14>)
 8003656:	681b      	ldr	r3, [r3, #0]
}
 8003658:	4618      	mov	r0, r3
 800365a:	46bd      	mov	sp, r7
 800365c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003660:	4770      	bx	lr
 8003662:	bf00      	nop
 8003664:	20000010 	.word	0x20000010

08003668 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800366c:	f7ff fff0 	bl	8003650 <HAL_RCC_GetHCLKFreq>
 8003670:	4602      	mov	r2, r0
 8003672:	4b06      	ldr	r3, [pc, #24]	; (800368c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003674:	689b      	ldr	r3, [r3, #8]
 8003676:	0a1b      	lsrs	r3, r3, #8
 8003678:	f003 0307 	and.w	r3, r3, #7
 800367c:	4904      	ldr	r1, [pc, #16]	; (8003690 <HAL_RCC_GetPCLK1Freq+0x28>)
 800367e:	5ccb      	ldrb	r3, [r1, r3]
 8003680:	f003 031f 	and.w	r3, r3, #31
 8003684:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003688:	4618      	mov	r0, r3
 800368a:	bd80      	pop	{r7, pc}
 800368c:	40021000 	.word	0x40021000
 8003690:	0800b9d4 	.word	0x0800b9d4

08003694 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003698:	f7ff ffda 	bl	8003650 <HAL_RCC_GetHCLKFreq>
 800369c:	4602      	mov	r2, r0
 800369e:	4b06      	ldr	r3, [pc, #24]	; (80036b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80036a0:	689b      	ldr	r3, [r3, #8]
 80036a2:	0adb      	lsrs	r3, r3, #11
 80036a4:	f003 0307 	and.w	r3, r3, #7
 80036a8:	4904      	ldr	r1, [pc, #16]	; (80036bc <HAL_RCC_GetPCLK2Freq+0x28>)
 80036aa:	5ccb      	ldrb	r3, [r1, r3]
 80036ac:	f003 031f 	and.w	r3, r3, #31
 80036b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036b4:	4618      	mov	r0, r3
 80036b6:	bd80      	pop	{r7, pc}
 80036b8:	40021000 	.word	0x40021000
 80036bc:	0800b9d4 	.word	0x0800b9d4

080036c0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b086      	sub	sp, #24
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80036c8:	2300      	movs	r3, #0
 80036ca:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80036cc:	4b2a      	ldr	r3, [pc, #168]	; (8003778 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80036ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d003      	beq.n	80036e0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80036d8:	f7ff fa02 	bl	8002ae0 <HAL_PWREx_GetVoltageRange>
 80036dc:	6178      	str	r0, [r7, #20]
 80036de:	e014      	b.n	800370a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80036e0:	4b25      	ldr	r3, [pc, #148]	; (8003778 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80036e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036e4:	4a24      	ldr	r2, [pc, #144]	; (8003778 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80036e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036ea:	6593      	str	r3, [r2, #88]	; 0x58
 80036ec:	4b22      	ldr	r3, [pc, #136]	; (8003778 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80036ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036f4:	60fb      	str	r3, [r7, #12]
 80036f6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80036f8:	f7ff f9f2 	bl	8002ae0 <HAL_PWREx_GetVoltageRange>
 80036fc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80036fe:	4b1e      	ldr	r3, [pc, #120]	; (8003778 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003700:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003702:	4a1d      	ldr	r2, [pc, #116]	; (8003778 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003704:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003708:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800370a:	697b      	ldr	r3, [r7, #20]
 800370c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003710:	d10b      	bne.n	800372a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2b80      	cmp	r3, #128	; 0x80
 8003716:	d919      	bls.n	800374c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2ba0      	cmp	r3, #160	; 0xa0
 800371c:	d902      	bls.n	8003724 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800371e:	2302      	movs	r3, #2
 8003720:	613b      	str	r3, [r7, #16]
 8003722:	e013      	b.n	800374c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003724:	2301      	movs	r3, #1
 8003726:	613b      	str	r3, [r7, #16]
 8003728:	e010      	b.n	800374c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2b80      	cmp	r3, #128	; 0x80
 800372e:	d902      	bls.n	8003736 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003730:	2303      	movs	r3, #3
 8003732:	613b      	str	r3, [r7, #16]
 8003734:	e00a      	b.n	800374c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2b80      	cmp	r3, #128	; 0x80
 800373a:	d102      	bne.n	8003742 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800373c:	2302      	movs	r3, #2
 800373e:	613b      	str	r3, [r7, #16]
 8003740:	e004      	b.n	800374c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2b70      	cmp	r3, #112	; 0x70
 8003746:	d101      	bne.n	800374c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003748:	2301      	movs	r3, #1
 800374a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800374c:	4b0b      	ldr	r3, [pc, #44]	; (800377c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f023 0207 	bic.w	r2, r3, #7
 8003754:	4909      	ldr	r1, [pc, #36]	; (800377c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003756:	693b      	ldr	r3, [r7, #16]
 8003758:	4313      	orrs	r3, r2
 800375a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800375c:	4b07      	ldr	r3, [pc, #28]	; (800377c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f003 0307 	and.w	r3, r3, #7
 8003764:	693a      	ldr	r2, [r7, #16]
 8003766:	429a      	cmp	r2, r3
 8003768:	d001      	beq.n	800376e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800376a:	2301      	movs	r3, #1
 800376c:	e000      	b.n	8003770 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800376e:	2300      	movs	r3, #0
}
 8003770:	4618      	mov	r0, r3
 8003772:	3718      	adds	r7, #24
 8003774:	46bd      	mov	sp, r7
 8003776:	bd80      	pop	{r7, pc}
 8003778:	40021000 	.word	0x40021000
 800377c:	40022000 	.word	0x40022000

08003780 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b086      	sub	sp, #24
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003788:	2300      	movs	r3, #0
 800378a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800378c:	2300      	movs	r3, #0
 800378e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003798:	2b00      	cmp	r3, #0
 800379a:	d041      	beq.n	8003820 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80037a0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80037a4:	d02a      	beq.n	80037fc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80037a6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80037aa:	d824      	bhi.n	80037f6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80037ac:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80037b0:	d008      	beq.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80037b2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80037b6:	d81e      	bhi.n	80037f6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d00a      	beq.n	80037d2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80037bc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80037c0:	d010      	beq.n	80037e4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80037c2:	e018      	b.n	80037f6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80037c4:	4b86      	ldr	r3, [pc, #536]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037c6:	68db      	ldr	r3, [r3, #12]
 80037c8:	4a85      	ldr	r2, [pc, #532]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037ce:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80037d0:	e015      	b.n	80037fe <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	3304      	adds	r3, #4
 80037d6:	2100      	movs	r1, #0
 80037d8:	4618      	mov	r0, r3
 80037da:	f000 fabb 	bl	8003d54 <RCCEx_PLLSAI1_Config>
 80037de:	4603      	mov	r3, r0
 80037e0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80037e2:	e00c      	b.n	80037fe <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	3320      	adds	r3, #32
 80037e8:	2100      	movs	r1, #0
 80037ea:	4618      	mov	r0, r3
 80037ec:	f000 fba6 	bl	8003f3c <RCCEx_PLLSAI2_Config>
 80037f0:	4603      	mov	r3, r0
 80037f2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80037f4:	e003      	b.n	80037fe <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80037f6:	2301      	movs	r3, #1
 80037f8:	74fb      	strb	r3, [r7, #19]
      break;
 80037fa:	e000      	b.n	80037fe <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80037fc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80037fe:	7cfb      	ldrb	r3, [r7, #19]
 8003800:	2b00      	cmp	r3, #0
 8003802:	d10b      	bne.n	800381c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003804:	4b76      	ldr	r3, [pc, #472]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003806:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800380a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003812:	4973      	ldr	r1, [pc, #460]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003814:	4313      	orrs	r3, r2
 8003816:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800381a:	e001      	b.n	8003820 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800381c:	7cfb      	ldrb	r3, [r7, #19]
 800381e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003828:	2b00      	cmp	r3, #0
 800382a:	d041      	beq.n	80038b0 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003830:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003834:	d02a      	beq.n	800388c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003836:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800383a:	d824      	bhi.n	8003886 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800383c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003840:	d008      	beq.n	8003854 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003842:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003846:	d81e      	bhi.n	8003886 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003848:	2b00      	cmp	r3, #0
 800384a:	d00a      	beq.n	8003862 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800384c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003850:	d010      	beq.n	8003874 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003852:	e018      	b.n	8003886 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003854:	4b62      	ldr	r3, [pc, #392]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003856:	68db      	ldr	r3, [r3, #12]
 8003858:	4a61      	ldr	r2, [pc, #388]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800385a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800385e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003860:	e015      	b.n	800388e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	3304      	adds	r3, #4
 8003866:	2100      	movs	r1, #0
 8003868:	4618      	mov	r0, r3
 800386a:	f000 fa73 	bl	8003d54 <RCCEx_PLLSAI1_Config>
 800386e:	4603      	mov	r3, r0
 8003870:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003872:	e00c      	b.n	800388e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	3320      	adds	r3, #32
 8003878:	2100      	movs	r1, #0
 800387a:	4618      	mov	r0, r3
 800387c:	f000 fb5e 	bl	8003f3c <RCCEx_PLLSAI2_Config>
 8003880:	4603      	mov	r3, r0
 8003882:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003884:	e003      	b.n	800388e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003886:	2301      	movs	r3, #1
 8003888:	74fb      	strb	r3, [r7, #19]
      break;
 800388a:	e000      	b.n	800388e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800388c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800388e:	7cfb      	ldrb	r3, [r7, #19]
 8003890:	2b00      	cmp	r3, #0
 8003892:	d10b      	bne.n	80038ac <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003894:	4b52      	ldr	r3, [pc, #328]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003896:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800389a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80038a2:	494f      	ldr	r1, [pc, #316]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038a4:	4313      	orrs	r3, r2
 80038a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80038aa:	e001      	b.n	80038b0 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038ac:	7cfb      	ldrb	r3, [r7, #19]
 80038ae:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	f000 80a0 	beq.w	80039fe <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80038be:	2300      	movs	r3, #0
 80038c0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80038c2:	4b47      	ldr	r3, [pc, #284]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d101      	bne.n	80038d2 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80038ce:	2301      	movs	r3, #1
 80038d0:	e000      	b.n	80038d4 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80038d2:	2300      	movs	r3, #0
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d00d      	beq.n	80038f4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80038d8:	4b41      	ldr	r3, [pc, #260]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038dc:	4a40      	ldr	r2, [pc, #256]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038e2:	6593      	str	r3, [r2, #88]	; 0x58
 80038e4:	4b3e      	ldr	r3, [pc, #248]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038ec:	60bb      	str	r3, [r7, #8]
 80038ee:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80038f0:	2301      	movs	r3, #1
 80038f2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80038f4:	4b3b      	ldr	r3, [pc, #236]	; (80039e4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4a3a      	ldr	r2, [pc, #232]	; (80039e4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80038fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038fe:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003900:	f7fe fdaa 	bl	8002458 <HAL_GetTick>
 8003904:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003906:	e009      	b.n	800391c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003908:	f7fe fda6 	bl	8002458 <HAL_GetTick>
 800390c:	4602      	mov	r2, r0
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	1ad3      	subs	r3, r2, r3
 8003912:	2b02      	cmp	r3, #2
 8003914:	d902      	bls.n	800391c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003916:	2303      	movs	r3, #3
 8003918:	74fb      	strb	r3, [r7, #19]
        break;
 800391a:	e005      	b.n	8003928 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800391c:	4b31      	ldr	r3, [pc, #196]	; (80039e4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003924:	2b00      	cmp	r3, #0
 8003926:	d0ef      	beq.n	8003908 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003928:	7cfb      	ldrb	r3, [r7, #19]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d15c      	bne.n	80039e8 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800392e:	4b2c      	ldr	r3, [pc, #176]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003930:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003934:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003938:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800393a:	697b      	ldr	r3, [r7, #20]
 800393c:	2b00      	cmp	r3, #0
 800393e:	d01f      	beq.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003946:	697a      	ldr	r2, [r7, #20]
 8003948:	429a      	cmp	r2, r3
 800394a:	d019      	beq.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800394c:	4b24      	ldr	r3, [pc, #144]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800394e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003952:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003956:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003958:	4b21      	ldr	r3, [pc, #132]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800395a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800395e:	4a20      	ldr	r2, [pc, #128]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003960:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003964:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003968:	4b1d      	ldr	r3, [pc, #116]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800396a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800396e:	4a1c      	ldr	r2, [pc, #112]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003970:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003974:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003978:	4a19      	ldr	r2, [pc, #100]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800397a:	697b      	ldr	r3, [r7, #20]
 800397c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003980:	697b      	ldr	r3, [r7, #20]
 8003982:	f003 0301 	and.w	r3, r3, #1
 8003986:	2b00      	cmp	r3, #0
 8003988:	d016      	beq.n	80039b8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800398a:	f7fe fd65 	bl	8002458 <HAL_GetTick>
 800398e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003990:	e00b      	b.n	80039aa <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003992:	f7fe fd61 	bl	8002458 <HAL_GetTick>
 8003996:	4602      	mov	r2, r0
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	1ad3      	subs	r3, r2, r3
 800399c:	f241 3288 	movw	r2, #5000	; 0x1388
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d902      	bls.n	80039aa <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80039a4:	2303      	movs	r3, #3
 80039a6:	74fb      	strb	r3, [r7, #19]
            break;
 80039a8:	e006      	b.n	80039b8 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80039aa:	4b0d      	ldr	r3, [pc, #52]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039b0:	f003 0302 	and.w	r3, r3, #2
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d0ec      	beq.n	8003992 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80039b8:	7cfb      	ldrb	r3, [r7, #19]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d10c      	bne.n	80039d8 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80039be:	4b08      	ldr	r3, [pc, #32]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039c4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80039ce:	4904      	ldr	r1, [pc, #16]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039d0:	4313      	orrs	r3, r2
 80039d2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80039d6:	e009      	b.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80039d8:	7cfb      	ldrb	r3, [r7, #19]
 80039da:	74bb      	strb	r3, [r7, #18]
 80039dc:	e006      	b.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80039de:	bf00      	nop
 80039e0:	40021000 	.word	0x40021000
 80039e4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039e8:	7cfb      	ldrb	r3, [r7, #19]
 80039ea:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80039ec:	7c7b      	ldrb	r3, [r7, #17]
 80039ee:	2b01      	cmp	r3, #1
 80039f0:	d105      	bne.n	80039fe <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80039f2:	4b9e      	ldr	r3, [pc, #632]	; (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039f6:	4a9d      	ldr	r2, [pc, #628]	; (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80039fc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f003 0301 	and.w	r3, r3, #1
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d00a      	beq.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003a0a:	4b98      	ldr	r3, [pc, #608]	; (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a10:	f023 0203 	bic.w	r2, r3, #3
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a18:	4994      	ldr	r1, [pc, #592]	; (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a1a:	4313      	orrs	r3, r2
 8003a1c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f003 0302 	and.w	r3, r3, #2
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d00a      	beq.n	8003a42 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003a2c:	4b8f      	ldr	r3, [pc, #572]	; (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a32:	f023 020c 	bic.w	r2, r3, #12
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a3a:	498c      	ldr	r1, [pc, #560]	; (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a3c:	4313      	orrs	r3, r2
 8003a3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f003 0304 	and.w	r3, r3, #4
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d00a      	beq.n	8003a64 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003a4e:	4b87      	ldr	r3, [pc, #540]	; (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a54:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a5c:	4983      	ldr	r1, [pc, #524]	; (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a5e:	4313      	orrs	r3, r2
 8003a60:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f003 0308 	and.w	r3, r3, #8
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d00a      	beq.n	8003a86 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003a70:	4b7e      	ldr	r3, [pc, #504]	; (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a76:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a7e:	497b      	ldr	r1, [pc, #492]	; (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a80:	4313      	orrs	r3, r2
 8003a82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f003 0310 	and.w	r3, r3, #16
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d00a      	beq.n	8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003a92:	4b76      	ldr	r3, [pc, #472]	; (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a98:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003aa0:	4972      	ldr	r1, [pc, #456]	; (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003aa2:	4313      	orrs	r3, r2
 8003aa4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f003 0320 	and.w	r3, r3, #32
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d00a      	beq.n	8003aca <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003ab4:	4b6d      	ldr	r3, [pc, #436]	; (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ab6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003aba:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ac2:	496a      	ldr	r1, [pc, #424]	; (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ac4:	4313      	orrs	r3, r2
 8003ac6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d00a      	beq.n	8003aec <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003ad6:	4b65      	ldr	r3, [pc, #404]	; (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ad8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003adc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ae4:	4961      	ldr	r1, [pc, #388]	; (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ae6:	4313      	orrs	r3, r2
 8003ae8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d00a      	beq.n	8003b0e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003af8:	4b5c      	ldr	r3, [pc, #368]	; (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003afa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003afe:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b06:	4959      	ldr	r1, [pc, #356]	; (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b08:	4313      	orrs	r3, r2
 8003b0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d00a      	beq.n	8003b30 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003b1a:	4b54      	ldr	r3, [pc, #336]	; (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b20:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b28:	4950      	ldr	r1, [pc, #320]	; (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b2a:	4313      	orrs	r3, r2
 8003b2c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d00a      	beq.n	8003b52 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003b3c:	4b4b      	ldr	r3, [pc, #300]	; (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b42:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b4a:	4948      	ldr	r1, [pc, #288]	; (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d00a      	beq.n	8003b74 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003b5e:	4b43      	ldr	r3, [pc, #268]	; (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b64:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b6c:	493f      	ldr	r1, [pc, #252]	; (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b6e:	4313      	orrs	r3, r2
 8003b70:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d028      	beq.n	8003bd2 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003b80:	4b3a      	ldr	r3, [pc, #232]	; (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b86:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b8e:	4937      	ldr	r1, [pc, #220]	; (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b90:	4313      	orrs	r3, r2
 8003b92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b9a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003b9e:	d106      	bne.n	8003bae <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ba0:	4b32      	ldr	r3, [pc, #200]	; (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ba2:	68db      	ldr	r3, [r3, #12]
 8003ba4:	4a31      	ldr	r2, [pc, #196]	; (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ba6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003baa:	60d3      	str	r3, [r2, #12]
 8003bac:	e011      	b.n	8003bd2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003bb2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003bb6:	d10c      	bne.n	8003bd2 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	3304      	adds	r3, #4
 8003bbc:	2101      	movs	r1, #1
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	f000 f8c8 	bl	8003d54 <RCCEx_PLLSAI1_Config>
 8003bc4:	4603      	mov	r3, r0
 8003bc6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003bc8:	7cfb      	ldrb	r3, [r7, #19]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d001      	beq.n	8003bd2 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003bce:	7cfb      	ldrb	r3, [r7, #19]
 8003bd0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d028      	beq.n	8003c30 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003bde:	4b23      	ldr	r3, [pc, #140]	; (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003be0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003be4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bec:	491f      	ldr	r1, [pc, #124]	; (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bee:	4313      	orrs	r3, r2
 8003bf0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bf8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003bfc:	d106      	bne.n	8003c0c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003bfe:	4b1b      	ldr	r3, [pc, #108]	; (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c00:	68db      	ldr	r3, [r3, #12]
 8003c02:	4a1a      	ldr	r2, [pc, #104]	; (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c04:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003c08:	60d3      	str	r3, [r2, #12]
 8003c0a:	e011      	b.n	8003c30 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c10:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003c14:	d10c      	bne.n	8003c30 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	3304      	adds	r3, #4
 8003c1a:	2101      	movs	r1, #1
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	f000 f899 	bl	8003d54 <RCCEx_PLLSAI1_Config>
 8003c22:	4603      	mov	r3, r0
 8003c24:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003c26:	7cfb      	ldrb	r3, [r7, #19]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d001      	beq.n	8003c30 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003c2c:	7cfb      	ldrb	r3, [r7, #19]
 8003c2e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d02b      	beq.n	8003c94 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003c3c:	4b0b      	ldr	r3, [pc, #44]	; (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c42:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c4a:	4908      	ldr	r1, [pc, #32]	; (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c4c:	4313      	orrs	r3, r2
 8003c4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c56:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003c5a:	d109      	bne.n	8003c70 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003c5c:	4b03      	ldr	r3, [pc, #12]	; (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c5e:	68db      	ldr	r3, [r3, #12]
 8003c60:	4a02      	ldr	r2, [pc, #8]	; (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c62:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003c66:	60d3      	str	r3, [r2, #12]
 8003c68:	e014      	b.n	8003c94 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003c6a:	bf00      	nop
 8003c6c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c74:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003c78:	d10c      	bne.n	8003c94 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	3304      	adds	r3, #4
 8003c7e:	2101      	movs	r1, #1
 8003c80:	4618      	mov	r0, r3
 8003c82:	f000 f867 	bl	8003d54 <RCCEx_PLLSAI1_Config>
 8003c86:	4603      	mov	r3, r0
 8003c88:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003c8a:	7cfb      	ldrb	r3, [r7, #19]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d001      	beq.n	8003c94 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003c90:	7cfb      	ldrb	r3, [r7, #19]
 8003c92:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d02f      	beq.n	8003d00 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003ca0:	4b2b      	ldr	r3, [pc, #172]	; (8003d50 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003ca2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ca6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003cae:	4928      	ldr	r1, [pc, #160]	; (8003d50 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003cb0:	4313      	orrs	r3, r2
 8003cb2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003cba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003cbe:	d10d      	bne.n	8003cdc <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	3304      	adds	r3, #4
 8003cc4:	2102      	movs	r1, #2
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	f000 f844 	bl	8003d54 <RCCEx_PLLSAI1_Config>
 8003ccc:	4603      	mov	r3, r0
 8003cce:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003cd0:	7cfb      	ldrb	r3, [r7, #19]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d014      	beq.n	8003d00 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003cd6:	7cfb      	ldrb	r3, [r7, #19]
 8003cd8:	74bb      	strb	r3, [r7, #18]
 8003cda:	e011      	b.n	8003d00 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003ce0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ce4:	d10c      	bne.n	8003d00 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	3320      	adds	r3, #32
 8003cea:	2102      	movs	r1, #2
 8003cec:	4618      	mov	r0, r3
 8003cee:	f000 f925 	bl	8003f3c <RCCEx_PLLSAI2_Config>
 8003cf2:	4603      	mov	r3, r0
 8003cf4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003cf6:	7cfb      	ldrb	r3, [r7, #19]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d001      	beq.n	8003d00 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003cfc:	7cfb      	ldrb	r3, [r7, #19]
 8003cfe:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d00a      	beq.n	8003d22 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003d0c:	4b10      	ldr	r3, [pc, #64]	; (8003d50 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003d0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d12:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003d1a:	490d      	ldr	r1, [pc, #52]	; (8003d50 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003d1c:	4313      	orrs	r3, r2
 8003d1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d00b      	beq.n	8003d46 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003d2e:	4b08      	ldr	r3, [pc, #32]	; (8003d50 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003d30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d34:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d3e:	4904      	ldr	r1, [pc, #16]	; (8003d50 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003d40:	4313      	orrs	r3, r2
 8003d42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003d46:	7cbb      	ldrb	r3, [r7, #18]
}
 8003d48:	4618      	mov	r0, r3
 8003d4a:	3718      	adds	r7, #24
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	bd80      	pop	{r7, pc}
 8003d50:	40021000 	.word	0x40021000

08003d54 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b084      	sub	sp, #16
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
 8003d5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003d5e:	2300      	movs	r3, #0
 8003d60:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003d62:	4b75      	ldr	r3, [pc, #468]	; (8003f38 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d64:	68db      	ldr	r3, [r3, #12]
 8003d66:	f003 0303 	and.w	r3, r3, #3
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d018      	beq.n	8003da0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003d6e:	4b72      	ldr	r3, [pc, #456]	; (8003f38 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d70:	68db      	ldr	r3, [r3, #12]
 8003d72:	f003 0203 	and.w	r2, r3, #3
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	429a      	cmp	r2, r3
 8003d7c:	d10d      	bne.n	8003d9a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
       ||
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d009      	beq.n	8003d9a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003d86:	4b6c      	ldr	r3, [pc, #432]	; (8003f38 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d88:	68db      	ldr	r3, [r3, #12]
 8003d8a:	091b      	lsrs	r3, r3, #4
 8003d8c:	f003 0307 	and.w	r3, r3, #7
 8003d90:	1c5a      	adds	r2, r3, #1
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	685b      	ldr	r3, [r3, #4]
       ||
 8003d96:	429a      	cmp	r2, r3
 8003d98:	d047      	beq.n	8003e2a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	73fb      	strb	r3, [r7, #15]
 8003d9e:	e044      	b.n	8003e2a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	2b03      	cmp	r3, #3
 8003da6:	d018      	beq.n	8003dda <RCCEx_PLLSAI1_Config+0x86>
 8003da8:	2b03      	cmp	r3, #3
 8003daa:	d825      	bhi.n	8003df8 <RCCEx_PLLSAI1_Config+0xa4>
 8003dac:	2b01      	cmp	r3, #1
 8003dae:	d002      	beq.n	8003db6 <RCCEx_PLLSAI1_Config+0x62>
 8003db0:	2b02      	cmp	r3, #2
 8003db2:	d009      	beq.n	8003dc8 <RCCEx_PLLSAI1_Config+0x74>
 8003db4:	e020      	b.n	8003df8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003db6:	4b60      	ldr	r3, [pc, #384]	; (8003f38 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f003 0302 	and.w	r3, r3, #2
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d11d      	bne.n	8003dfe <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003dc6:	e01a      	b.n	8003dfe <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003dc8:	4b5b      	ldr	r3, [pc, #364]	; (8003f38 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d116      	bne.n	8003e02 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003dd4:	2301      	movs	r3, #1
 8003dd6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003dd8:	e013      	b.n	8003e02 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003dda:	4b57      	ldr	r3, [pc, #348]	; (8003f38 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d10f      	bne.n	8003e06 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003de6:	4b54      	ldr	r3, [pc, #336]	; (8003f38 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d109      	bne.n	8003e06 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003df2:	2301      	movs	r3, #1
 8003df4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003df6:	e006      	b.n	8003e06 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003df8:	2301      	movs	r3, #1
 8003dfa:	73fb      	strb	r3, [r7, #15]
      break;
 8003dfc:	e004      	b.n	8003e08 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003dfe:	bf00      	nop
 8003e00:	e002      	b.n	8003e08 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003e02:	bf00      	nop
 8003e04:	e000      	b.n	8003e08 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003e06:	bf00      	nop
    }

    if(status == HAL_OK)
 8003e08:	7bfb      	ldrb	r3, [r7, #15]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d10d      	bne.n	8003e2a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003e0e:	4b4a      	ldr	r3, [pc, #296]	; (8003f38 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e10:	68db      	ldr	r3, [r3, #12]
 8003e12:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6819      	ldr	r1, [r3, #0]
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	685b      	ldr	r3, [r3, #4]
 8003e1e:	3b01      	subs	r3, #1
 8003e20:	011b      	lsls	r3, r3, #4
 8003e22:	430b      	orrs	r3, r1
 8003e24:	4944      	ldr	r1, [pc, #272]	; (8003f38 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e26:	4313      	orrs	r3, r2
 8003e28:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003e2a:	7bfb      	ldrb	r3, [r7, #15]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d17d      	bne.n	8003f2c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003e30:	4b41      	ldr	r3, [pc, #260]	; (8003f38 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4a40      	ldr	r2, [pc, #256]	; (8003f38 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e36:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003e3a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e3c:	f7fe fb0c 	bl	8002458 <HAL_GetTick>
 8003e40:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003e42:	e009      	b.n	8003e58 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003e44:	f7fe fb08 	bl	8002458 <HAL_GetTick>
 8003e48:	4602      	mov	r2, r0
 8003e4a:	68bb      	ldr	r3, [r7, #8]
 8003e4c:	1ad3      	subs	r3, r2, r3
 8003e4e:	2b02      	cmp	r3, #2
 8003e50:	d902      	bls.n	8003e58 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003e52:	2303      	movs	r3, #3
 8003e54:	73fb      	strb	r3, [r7, #15]
        break;
 8003e56:	e005      	b.n	8003e64 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003e58:	4b37      	ldr	r3, [pc, #220]	; (8003f38 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d1ef      	bne.n	8003e44 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003e64:	7bfb      	ldrb	r3, [r7, #15]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d160      	bne.n	8003f2c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d111      	bne.n	8003e94 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003e70:	4b31      	ldr	r3, [pc, #196]	; (8003f38 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e72:	691b      	ldr	r3, [r3, #16]
 8003e74:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003e78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e7c:	687a      	ldr	r2, [r7, #4]
 8003e7e:	6892      	ldr	r2, [r2, #8]
 8003e80:	0211      	lsls	r1, r2, #8
 8003e82:	687a      	ldr	r2, [r7, #4]
 8003e84:	68d2      	ldr	r2, [r2, #12]
 8003e86:	0912      	lsrs	r2, r2, #4
 8003e88:	0452      	lsls	r2, r2, #17
 8003e8a:	430a      	orrs	r2, r1
 8003e8c:	492a      	ldr	r1, [pc, #168]	; (8003f38 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e8e:	4313      	orrs	r3, r2
 8003e90:	610b      	str	r3, [r1, #16]
 8003e92:	e027      	b.n	8003ee4 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	2b01      	cmp	r3, #1
 8003e98:	d112      	bne.n	8003ec0 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003e9a:	4b27      	ldr	r3, [pc, #156]	; (8003f38 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e9c:	691b      	ldr	r3, [r3, #16]
 8003e9e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003ea2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003ea6:	687a      	ldr	r2, [r7, #4]
 8003ea8:	6892      	ldr	r2, [r2, #8]
 8003eaa:	0211      	lsls	r1, r2, #8
 8003eac:	687a      	ldr	r2, [r7, #4]
 8003eae:	6912      	ldr	r2, [r2, #16]
 8003eb0:	0852      	lsrs	r2, r2, #1
 8003eb2:	3a01      	subs	r2, #1
 8003eb4:	0552      	lsls	r2, r2, #21
 8003eb6:	430a      	orrs	r2, r1
 8003eb8:	491f      	ldr	r1, [pc, #124]	; (8003f38 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003eba:	4313      	orrs	r3, r2
 8003ebc:	610b      	str	r3, [r1, #16]
 8003ebe:	e011      	b.n	8003ee4 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003ec0:	4b1d      	ldr	r3, [pc, #116]	; (8003f38 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ec2:	691b      	ldr	r3, [r3, #16]
 8003ec4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003ec8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003ecc:	687a      	ldr	r2, [r7, #4]
 8003ece:	6892      	ldr	r2, [r2, #8]
 8003ed0:	0211      	lsls	r1, r2, #8
 8003ed2:	687a      	ldr	r2, [r7, #4]
 8003ed4:	6952      	ldr	r2, [r2, #20]
 8003ed6:	0852      	lsrs	r2, r2, #1
 8003ed8:	3a01      	subs	r2, #1
 8003eda:	0652      	lsls	r2, r2, #25
 8003edc:	430a      	orrs	r2, r1
 8003ede:	4916      	ldr	r1, [pc, #88]	; (8003f38 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ee0:	4313      	orrs	r3, r2
 8003ee2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003ee4:	4b14      	ldr	r3, [pc, #80]	; (8003f38 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4a13      	ldr	r2, [pc, #76]	; (8003f38 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003eea:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003eee:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ef0:	f7fe fab2 	bl	8002458 <HAL_GetTick>
 8003ef4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003ef6:	e009      	b.n	8003f0c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003ef8:	f7fe faae 	bl	8002458 <HAL_GetTick>
 8003efc:	4602      	mov	r2, r0
 8003efe:	68bb      	ldr	r3, [r7, #8]
 8003f00:	1ad3      	subs	r3, r2, r3
 8003f02:	2b02      	cmp	r3, #2
 8003f04:	d902      	bls.n	8003f0c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003f06:	2303      	movs	r3, #3
 8003f08:	73fb      	strb	r3, [r7, #15]
          break;
 8003f0a:	e005      	b.n	8003f18 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003f0c:	4b0a      	ldr	r3, [pc, #40]	; (8003f38 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d0ef      	beq.n	8003ef8 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003f18:	7bfb      	ldrb	r3, [r7, #15]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d106      	bne.n	8003f2c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003f1e:	4b06      	ldr	r3, [pc, #24]	; (8003f38 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f20:	691a      	ldr	r2, [r3, #16]
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	699b      	ldr	r3, [r3, #24]
 8003f26:	4904      	ldr	r1, [pc, #16]	; (8003f38 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f28:	4313      	orrs	r3, r2
 8003f2a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003f2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f2e:	4618      	mov	r0, r3
 8003f30:	3710      	adds	r7, #16
 8003f32:	46bd      	mov	sp, r7
 8003f34:	bd80      	pop	{r7, pc}
 8003f36:	bf00      	nop
 8003f38:	40021000 	.word	0x40021000

08003f3c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b084      	sub	sp, #16
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
 8003f44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003f46:	2300      	movs	r3, #0
 8003f48:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003f4a:	4b6a      	ldr	r3, [pc, #424]	; (80040f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f4c:	68db      	ldr	r3, [r3, #12]
 8003f4e:	f003 0303 	and.w	r3, r3, #3
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d018      	beq.n	8003f88 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003f56:	4b67      	ldr	r3, [pc, #412]	; (80040f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f58:	68db      	ldr	r3, [r3, #12]
 8003f5a:	f003 0203 	and.w	r2, r3, #3
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	429a      	cmp	r2, r3
 8003f64:	d10d      	bne.n	8003f82 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
       ||
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d009      	beq.n	8003f82 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003f6e:	4b61      	ldr	r3, [pc, #388]	; (80040f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f70:	68db      	ldr	r3, [r3, #12]
 8003f72:	091b      	lsrs	r3, r3, #4
 8003f74:	f003 0307 	and.w	r3, r3, #7
 8003f78:	1c5a      	adds	r2, r3, #1
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	685b      	ldr	r3, [r3, #4]
       ||
 8003f7e:	429a      	cmp	r2, r3
 8003f80:	d047      	beq.n	8004012 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003f82:	2301      	movs	r3, #1
 8003f84:	73fb      	strb	r3, [r7, #15]
 8003f86:	e044      	b.n	8004012 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	2b03      	cmp	r3, #3
 8003f8e:	d018      	beq.n	8003fc2 <RCCEx_PLLSAI2_Config+0x86>
 8003f90:	2b03      	cmp	r3, #3
 8003f92:	d825      	bhi.n	8003fe0 <RCCEx_PLLSAI2_Config+0xa4>
 8003f94:	2b01      	cmp	r3, #1
 8003f96:	d002      	beq.n	8003f9e <RCCEx_PLLSAI2_Config+0x62>
 8003f98:	2b02      	cmp	r3, #2
 8003f9a:	d009      	beq.n	8003fb0 <RCCEx_PLLSAI2_Config+0x74>
 8003f9c:	e020      	b.n	8003fe0 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003f9e:	4b55      	ldr	r3, [pc, #340]	; (80040f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f003 0302 	and.w	r3, r3, #2
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d11d      	bne.n	8003fe6 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003faa:	2301      	movs	r3, #1
 8003fac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003fae:	e01a      	b.n	8003fe6 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003fb0:	4b50      	ldr	r3, [pc, #320]	; (80040f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d116      	bne.n	8003fea <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003fc0:	e013      	b.n	8003fea <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003fc2:	4b4c      	ldr	r3, [pc, #304]	; (80040f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d10f      	bne.n	8003fee <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003fce:	4b49      	ldr	r3, [pc, #292]	; (80040f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d109      	bne.n	8003fee <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003fda:	2301      	movs	r3, #1
 8003fdc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003fde:	e006      	b.n	8003fee <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003fe0:	2301      	movs	r3, #1
 8003fe2:	73fb      	strb	r3, [r7, #15]
      break;
 8003fe4:	e004      	b.n	8003ff0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003fe6:	bf00      	nop
 8003fe8:	e002      	b.n	8003ff0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003fea:	bf00      	nop
 8003fec:	e000      	b.n	8003ff0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003fee:	bf00      	nop
    }

    if(status == HAL_OK)
 8003ff0:	7bfb      	ldrb	r3, [r7, #15]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d10d      	bne.n	8004012 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003ff6:	4b3f      	ldr	r3, [pc, #252]	; (80040f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ff8:	68db      	ldr	r3, [r3, #12]
 8003ffa:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6819      	ldr	r1, [r3, #0]
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	685b      	ldr	r3, [r3, #4]
 8004006:	3b01      	subs	r3, #1
 8004008:	011b      	lsls	r3, r3, #4
 800400a:	430b      	orrs	r3, r1
 800400c:	4939      	ldr	r1, [pc, #228]	; (80040f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800400e:	4313      	orrs	r3, r2
 8004010:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004012:	7bfb      	ldrb	r3, [r7, #15]
 8004014:	2b00      	cmp	r3, #0
 8004016:	d167      	bne.n	80040e8 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004018:	4b36      	ldr	r3, [pc, #216]	; (80040f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	4a35      	ldr	r2, [pc, #212]	; (80040f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800401e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004022:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004024:	f7fe fa18 	bl	8002458 <HAL_GetTick>
 8004028:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800402a:	e009      	b.n	8004040 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800402c:	f7fe fa14 	bl	8002458 <HAL_GetTick>
 8004030:	4602      	mov	r2, r0
 8004032:	68bb      	ldr	r3, [r7, #8]
 8004034:	1ad3      	subs	r3, r2, r3
 8004036:	2b02      	cmp	r3, #2
 8004038:	d902      	bls.n	8004040 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800403a:	2303      	movs	r3, #3
 800403c:	73fb      	strb	r3, [r7, #15]
        break;
 800403e:	e005      	b.n	800404c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004040:	4b2c      	ldr	r3, [pc, #176]	; (80040f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004048:	2b00      	cmp	r3, #0
 800404a:	d1ef      	bne.n	800402c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800404c:	7bfb      	ldrb	r3, [r7, #15]
 800404e:	2b00      	cmp	r3, #0
 8004050:	d14a      	bne.n	80040e8 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	2b00      	cmp	r3, #0
 8004056:	d111      	bne.n	800407c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004058:	4b26      	ldr	r3, [pc, #152]	; (80040f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800405a:	695b      	ldr	r3, [r3, #20]
 800405c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004060:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004064:	687a      	ldr	r2, [r7, #4]
 8004066:	6892      	ldr	r2, [r2, #8]
 8004068:	0211      	lsls	r1, r2, #8
 800406a:	687a      	ldr	r2, [r7, #4]
 800406c:	68d2      	ldr	r2, [r2, #12]
 800406e:	0912      	lsrs	r2, r2, #4
 8004070:	0452      	lsls	r2, r2, #17
 8004072:	430a      	orrs	r2, r1
 8004074:	491f      	ldr	r1, [pc, #124]	; (80040f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004076:	4313      	orrs	r3, r2
 8004078:	614b      	str	r3, [r1, #20]
 800407a:	e011      	b.n	80040a0 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800407c:	4b1d      	ldr	r3, [pc, #116]	; (80040f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800407e:	695b      	ldr	r3, [r3, #20]
 8004080:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004084:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004088:	687a      	ldr	r2, [r7, #4]
 800408a:	6892      	ldr	r2, [r2, #8]
 800408c:	0211      	lsls	r1, r2, #8
 800408e:	687a      	ldr	r2, [r7, #4]
 8004090:	6912      	ldr	r2, [r2, #16]
 8004092:	0852      	lsrs	r2, r2, #1
 8004094:	3a01      	subs	r2, #1
 8004096:	0652      	lsls	r2, r2, #25
 8004098:	430a      	orrs	r2, r1
 800409a:	4916      	ldr	r1, [pc, #88]	; (80040f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800409c:	4313      	orrs	r3, r2
 800409e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80040a0:	4b14      	ldr	r3, [pc, #80]	; (80040f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	4a13      	ldr	r2, [pc, #76]	; (80040f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80040a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040aa:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040ac:	f7fe f9d4 	bl	8002458 <HAL_GetTick>
 80040b0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80040b2:	e009      	b.n	80040c8 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80040b4:	f7fe f9d0 	bl	8002458 <HAL_GetTick>
 80040b8:	4602      	mov	r2, r0
 80040ba:	68bb      	ldr	r3, [r7, #8]
 80040bc:	1ad3      	subs	r3, r2, r3
 80040be:	2b02      	cmp	r3, #2
 80040c0:	d902      	bls.n	80040c8 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80040c2:	2303      	movs	r3, #3
 80040c4:	73fb      	strb	r3, [r7, #15]
          break;
 80040c6:	e005      	b.n	80040d4 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80040c8:	4b0a      	ldr	r3, [pc, #40]	; (80040f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d0ef      	beq.n	80040b4 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80040d4:	7bfb      	ldrb	r3, [r7, #15]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d106      	bne.n	80040e8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80040da:	4b06      	ldr	r3, [pc, #24]	; (80040f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80040dc:	695a      	ldr	r2, [r3, #20]
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	695b      	ldr	r3, [r3, #20]
 80040e2:	4904      	ldr	r1, [pc, #16]	; (80040f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80040e4:	4313      	orrs	r3, r2
 80040e6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80040e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80040ea:	4618      	mov	r0, r3
 80040ec:	3710      	adds	r7, #16
 80040ee:	46bd      	mov	sp, r7
 80040f0:	bd80      	pop	{r7, pc}
 80040f2:	bf00      	nop
 80040f4:	40021000 	.word	0x40021000

080040f8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b084      	sub	sp, #16
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d101      	bne.n	800410a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004106:	2301      	movs	r3, #1
 8004108:	e095      	b.n	8004236 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800410e:	2b00      	cmp	r3, #0
 8004110:	d108      	bne.n	8004124 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	685b      	ldr	r3, [r3, #4]
 8004116:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800411a:	d009      	beq.n	8004130 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2200      	movs	r2, #0
 8004120:	61da      	str	r2, [r3, #28]
 8004122:	e005      	b.n	8004130 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2200      	movs	r2, #0
 8004128:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2200      	movs	r2, #0
 800412e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2200      	movs	r2, #0
 8004134:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800413c:	b2db      	uxtb	r3, r3
 800413e:	2b00      	cmp	r3, #0
 8004140:	d106      	bne.n	8004150 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2200      	movs	r2, #0
 8004146:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800414a:	6878      	ldr	r0, [r7, #4]
 800414c:	f7fd fee2 	bl	8001f14 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2202      	movs	r2, #2
 8004154:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	681a      	ldr	r2, [r3, #0]
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004166:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	68db      	ldr	r3, [r3, #12]
 800416c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004170:	d902      	bls.n	8004178 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004172:	2300      	movs	r3, #0
 8004174:	60fb      	str	r3, [r7, #12]
 8004176:	e002      	b.n	800417e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004178:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800417c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	68db      	ldr	r3, [r3, #12]
 8004182:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004186:	d007      	beq.n	8004198 <HAL_SPI_Init+0xa0>
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	68db      	ldr	r3, [r3, #12]
 800418c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004190:	d002      	beq.n	8004198 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2200      	movs	r2, #0
 8004196:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	685b      	ldr	r3, [r3, #4]
 800419c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	689b      	ldr	r3, [r3, #8]
 80041a4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80041a8:	431a      	orrs	r2, r3
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	691b      	ldr	r3, [r3, #16]
 80041ae:	f003 0302 	and.w	r3, r3, #2
 80041b2:	431a      	orrs	r2, r3
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	695b      	ldr	r3, [r3, #20]
 80041b8:	f003 0301 	and.w	r3, r3, #1
 80041bc:	431a      	orrs	r2, r3
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	699b      	ldr	r3, [r3, #24]
 80041c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80041c6:	431a      	orrs	r2, r3
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	69db      	ldr	r3, [r3, #28]
 80041cc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80041d0:	431a      	orrs	r2, r3
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6a1b      	ldr	r3, [r3, #32]
 80041d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041da:	ea42 0103 	orr.w	r1, r2, r3
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041e2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	430a      	orrs	r2, r1
 80041ec:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	699b      	ldr	r3, [r3, #24]
 80041f2:	0c1b      	lsrs	r3, r3, #16
 80041f4:	f003 0204 	and.w	r2, r3, #4
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041fc:	f003 0310 	and.w	r3, r3, #16
 8004200:	431a      	orrs	r2, r3
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004206:	f003 0308 	and.w	r3, r3, #8
 800420a:	431a      	orrs	r2, r3
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	68db      	ldr	r3, [r3, #12]
 8004210:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004214:	ea42 0103 	orr.w	r1, r2, r3
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	430a      	orrs	r2, r1
 8004224:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	2200      	movs	r2, #0
 800422a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2201      	movs	r2, #1
 8004230:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004234:	2300      	movs	r3, #0
}
 8004236:	4618      	mov	r0, r3
 8004238:	3710      	adds	r7, #16
 800423a:	46bd      	mov	sp, r7
 800423c:	bd80      	pop	{r7, pc}

0800423e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800423e:	b580      	push	{r7, lr}
 8004240:	b088      	sub	sp, #32
 8004242:	af00      	add	r7, sp, #0
 8004244:	60f8      	str	r0, [r7, #12]
 8004246:	60b9      	str	r1, [r7, #8]
 8004248:	603b      	str	r3, [r7, #0]
 800424a:	4613      	mov	r3, r2
 800424c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800424e:	2300      	movs	r3, #0
 8004250:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004258:	2b01      	cmp	r3, #1
 800425a:	d101      	bne.n	8004260 <HAL_SPI_Transmit+0x22>
 800425c:	2302      	movs	r3, #2
 800425e:	e158      	b.n	8004512 <HAL_SPI_Transmit+0x2d4>
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	2201      	movs	r2, #1
 8004264:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004268:	f7fe f8f6 	bl	8002458 <HAL_GetTick>
 800426c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800426e:	88fb      	ldrh	r3, [r7, #6]
 8004270:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004278:	b2db      	uxtb	r3, r3
 800427a:	2b01      	cmp	r3, #1
 800427c:	d002      	beq.n	8004284 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800427e:	2302      	movs	r3, #2
 8004280:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004282:	e13d      	b.n	8004500 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8004284:	68bb      	ldr	r3, [r7, #8]
 8004286:	2b00      	cmp	r3, #0
 8004288:	d002      	beq.n	8004290 <HAL_SPI_Transmit+0x52>
 800428a:	88fb      	ldrh	r3, [r7, #6]
 800428c:	2b00      	cmp	r3, #0
 800428e:	d102      	bne.n	8004296 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004290:	2301      	movs	r3, #1
 8004292:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004294:	e134      	b.n	8004500 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	2203      	movs	r2, #3
 800429a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	2200      	movs	r2, #0
 80042a2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	68ba      	ldr	r2, [r7, #8]
 80042a8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	88fa      	ldrh	r2, [r7, #6]
 80042ae:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	88fa      	ldrh	r2, [r7, #6]
 80042b4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	2200      	movs	r2, #0
 80042ba:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	2200      	movs	r2, #0
 80042c0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	2200      	movs	r2, #0
 80042c8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	2200      	movs	r2, #0
 80042d0:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	2200      	movs	r2, #0
 80042d6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	689b      	ldr	r3, [r3, #8]
 80042dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80042e0:	d10f      	bne.n	8004302 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	681a      	ldr	r2, [r3, #0]
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80042f0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	681a      	ldr	r2, [r3, #0]
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004300:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800430c:	2b40      	cmp	r3, #64	; 0x40
 800430e:	d007      	beq.n	8004320 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	681a      	ldr	r2, [r3, #0]
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800431e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	68db      	ldr	r3, [r3, #12]
 8004324:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004328:	d94b      	bls.n	80043c2 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	685b      	ldr	r3, [r3, #4]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d002      	beq.n	8004338 <HAL_SPI_Transmit+0xfa>
 8004332:	8afb      	ldrh	r3, [r7, #22]
 8004334:	2b01      	cmp	r3, #1
 8004336:	d13e      	bne.n	80043b6 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800433c:	881a      	ldrh	r2, [r3, #0]
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004348:	1c9a      	adds	r2, r3, #2
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004352:	b29b      	uxth	r3, r3
 8004354:	3b01      	subs	r3, #1
 8004356:	b29a      	uxth	r2, r3
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800435c:	e02b      	b.n	80043b6 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	689b      	ldr	r3, [r3, #8]
 8004364:	f003 0302 	and.w	r3, r3, #2
 8004368:	2b02      	cmp	r3, #2
 800436a:	d112      	bne.n	8004392 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004370:	881a      	ldrh	r2, [r3, #0]
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800437c:	1c9a      	adds	r2, r3, #2
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004386:	b29b      	uxth	r3, r3
 8004388:	3b01      	subs	r3, #1
 800438a:	b29a      	uxth	r2, r3
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004390:	e011      	b.n	80043b6 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004392:	f7fe f861 	bl	8002458 <HAL_GetTick>
 8004396:	4602      	mov	r2, r0
 8004398:	69bb      	ldr	r3, [r7, #24]
 800439a:	1ad3      	subs	r3, r2, r3
 800439c:	683a      	ldr	r2, [r7, #0]
 800439e:	429a      	cmp	r2, r3
 80043a0:	d803      	bhi.n	80043aa <HAL_SPI_Transmit+0x16c>
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043a8:	d102      	bne.n	80043b0 <HAL_SPI_Transmit+0x172>
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d102      	bne.n	80043b6 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 80043b0:	2303      	movs	r3, #3
 80043b2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80043b4:	e0a4      	b.n	8004500 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043ba:	b29b      	uxth	r3, r3
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d1ce      	bne.n	800435e <HAL_SPI_Transmit+0x120>
 80043c0:	e07c      	b.n	80044bc <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	685b      	ldr	r3, [r3, #4]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d002      	beq.n	80043d0 <HAL_SPI_Transmit+0x192>
 80043ca:	8afb      	ldrh	r3, [r7, #22]
 80043cc:	2b01      	cmp	r3, #1
 80043ce:	d170      	bne.n	80044b2 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043d4:	b29b      	uxth	r3, r3
 80043d6:	2b01      	cmp	r3, #1
 80043d8:	d912      	bls.n	8004400 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043de:	881a      	ldrh	r2, [r3, #0]
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043ea:	1c9a      	adds	r2, r3, #2
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043f4:	b29b      	uxth	r3, r3
 80043f6:	3b02      	subs	r3, #2
 80043f8:	b29a      	uxth	r2, r3
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	87da      	strh	r2, [r3, #62]	; 0x3e
 80043fe:	e058      	b.n	80044b2 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	330c      	adds	r3, #12
 800440a:	7812      	ldrb	r2, [r2, #0]
 800440c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004412:	1c5a      	adds	r2, r3, #1
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800441c:	b29b      	uxth	r3, r3
 800441e:	3b01      	subs	r3, #1
 8004420:	b29a      	uxth	r2, r3
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8004426:	e044      	b.n	80044b2 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	689b      	ldr	r3, [r3, #8]
 800442e:	f003 0302 	and.w	r3, r3, #2
 8004432:	2b02      	cmp	r3, #2
 8004434:	d12b      	bne.n	800448e <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800443a:	b29b      	uxth	r3, r3
 800443c:	2b01      	cmp	r3, #1
 800443e:	d912      	bls.n	8004466 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004444:	881a      	ldrh	r2, [r3, #0]
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004450:	1c9a      	adds	r2, r3, #2
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800445a:	b29b      	uxth	r3, r3
 800445c:	3b02      	subs	r3, #2
 800445e:	b29a      	uxth	r2, r3
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004464:	e025      	b.n	80044b2 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	330c      	adds	r3, #12
 8004470:	7812      	ldrb	r2, [r2, #0]
 8004472:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004478:	1c5a      	adds	r2, r3, #1
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004482:	b29b      	uxth	r3, r3
 8004484:	3b01      	subs	r3, #1
 8004486:	b29a      	uxth	r2, r3
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800448c:	e011      	b.n	80044b2 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800448e:	f7fd ffe3 	bl	8002458 <HAL_GetTick>
 8004492:	4602      	mov	r2, r0
 8004494:	69bb      	ldr	r3, [r7, #24]
 8004496:	1ad3      	subs	r3, r2, r3
 8004498:	683a      	ldr	r2, [r7, #0]
 800449a:	429a      	cmp	r2, r3
 800449c:	d803      	bhi.n	80044a6 <HAL_SPI_Transmit+0x268>
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044a4:	d102      	bne.n	80044ac <HAL_SPI_Transmit+0x26e>
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d102      	bne.n	80044b2 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 80044ac:	2303      	movs	r3, #3
 80044ae:	77fb      	strb	r3, [r7, #31]
          goto error;
 80044b0:	e026      	b.n	8004500 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044b6:	b29b      	uxth	r3, r3
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d1b5      	bne.n	8004428 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80044bc:	69ba      	ldr	r2, [r7, #24]
 80044be:	6839      	ldr	r1, [r7, #0]
 80044c0:	68f8      	ldr	r0, [r7, #12]
 80044c2:	f000 fdff 	bl	80050c4 <SPI_EndRxTxTransaction>
 80044c6:	4603      	mov	r3, r0
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d002      	beq.n	80044d2 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	2220      	movs	r2, #32
 80044d0:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	689b      	ldr	r3, [r3, #8]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d10a      	bne.n	80044f0 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80044da:	2300      	movs	r3, #0
 80044dc:	613b      	str	r3, [r7, #16]
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	68db      	ldr	r3, [r3, #12]
 80044e4:	613b      	str	r3, [r7, #16]
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	689b      	ldr	r3, [r3, #8]
 80044ec:	613b      	str	r3, [r7, #16]
 80044ee:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d002      	beq.n	80044fe <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 80044f8:	2301      	movs	r3, #1
 80044fa:	77fb      	strb	r3, [r7, #31]
 80044fc:	e000      	b.n	8004500 <HAL_SPI_Transmit+0x2c2>
  }

error:
 80044fe:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	2201      	movs	r2, #1
 8004504:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	2200      	movs	r2, #0
 800450c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004510:	7ffb      	ldrb	r3, [r7, #31]
}
 8004512:	4618      	mov	r0, r3
 8004514:	3720      	adds	r7, #32
 8004516:	46bd      	mov	sp, r7
 8004518:	bd80      	pop	{r7, pc}

0800451a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800451a:	b580      	push	{r7, lr}
 800451c:	b088      	sub	sp, #32
 800451e:	af02      	add	r7, sp, #8
 8004520:	60f8      	str	r0, [r7, #12]
 8004522:	60b9      	str	r1, [r7, #8]
 8004524:	603b      	str	r3, [r7, #0]
 8004526:	4613      	mov	r3, r2
 8004528:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800452a:	2300      	movs	r3, #0
 800452c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	685b      	ldr	r3, [r3, #4]
 8004532:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004536:	d112      	bne.n	800455e <HAL_SPI_Receive+0x44>
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	689b      	ldr	r3, [r3, #8]
 800453c:	2b00      	cmp	r3, #0
 800453e:	d10e      	bne.n	800455e <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	2204      	movs	r2, #4
 8004544:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004548:	88fa      	ldrh	r2, [r7, #6]
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	9300      	str	r3, [sp, #0]
 800454e:	4613      	mov	r3, r2
 8004550:	68ba      	ldr	r2, [r7, #8]
 8004552:	68b9      	ldr	r1, [r7, #8]
 8004554:	68f8      	ldr	r0, [r7, #12]
 8004556:	f000 f910 	bl	800477a <HAL_SPI_TransmitReceive>
 800455a:	4603      	mov	r3, r0
 800455c:	e109      	b.n	8004772 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004564:	2b01      	cmp	r3, #1
 8004566:	d101      	bne.n	800456c <HAL_SPI_Receive+0x52>
 8004568:	2302      	movs	r3, #2
 800456a:	e102      	b.n	8004772 <HAL_SPI_Receive+0x258>
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	2201      	movs	r2, #1
 8004570:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004574:	f7fd ff70 	bl	8002458 <HAL_GetTick>
 8004578:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004580:	b2db      	uxtb	r3, r3
 8004582:	2b01      	cmp	r3, #1
 8004584:	d002      	beq.n	800458c <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8004586:	2302      	movs	r3, #2
 8004588:	75fb      	strb	r3, [r7, #23]
    goto error;
 800458a:	e0e9      	b.n	8004760 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 800458c:	68bb      	ldr	r3, [r7, #8]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d002      	beq.n	8004598 <HAL_SPI_Receive+0x7e>
 8004592:	88fb      	ldrh	r3, [r7, #6]
 8004594:	2b00      	cmp	r3, #0
 8004596:	d102      	bne.n	800459e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004598:	2301      	movs	r3, #1
 800459a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800459c:	e0e0      	b.n	8004760 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	2204      	movs	r2, #4
 80045a2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	2200      	movs	r2, #0
 80045aa:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	68ba      	ldr	r2, [r7, #8]
 80045b0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	88fa      	ldrh	r2, [r7, #6]
 80045b6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	88fa      	ldrh	r2, [r7, #6]
 80045be:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	2200      	movs	r2, #0
 80045c6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	2200      	movs	r2, #0
 80045cc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	2200      	movs	r2, #0
 80045d2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	2200      	movs	r2, #0
 80045d8:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	2200      	movs	r2, #0
 80045de:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	68db      	ldr	r3, [r3, #12]
 80045e4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80045e8:	d908      	bls.n	80045fc <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	685a      	ldr	r2, [r3, #4]
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80045f8:	605a      	str	r2, [r3, #4]
 80045fa:	e007      	b.n	800460c <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	685a      	ldr	r2, [r3, #4]
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800460a:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	689b      	ldr	r3, [r3, #8]
 8004610:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004614:	d10f      	bne.n	8004636 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	681a      	ldr	r2, [r3, #0]
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004624:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	681a      	ldr	r2, [r3, #0]
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004634:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004640:	2b40      	cmp	r3, #64	; 0x40
 8004642:	d007      	beq.n	8004654 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	681a      	ldr	r2, [r3, #0]
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004652:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	68db      	ldr	r3, [r3, #12]
 8004658:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800465c:	d867      	bhi.n	800472e <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800465e:	e030      	b.n	80046c2 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	689b      	ldr	r3, [r3, #8]
 8004666:	f003 0301 	and.w	r3, r3, #1
 800466a:	2b01      	cmp	r3, #1
 800466c:	d117      	bne.n	800469e <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f103 020c 	add.w	r2, r3, #12
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800467a:	7812      	ldrb	r2, [r2, #0]
 800467c:	b2d2      	uxtb	r2, r2
 800467e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004684:	1c5a      	adds	r2, r3, #1
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004690:	b29b      	uxth	r3, r3
 8004692:	3b01      	subs	r3, #1
 8004694:	b29a      	uxth	r2, r3
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800469c:	e011      	b.n	80046c2 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800469e:	f7fd fedb 	bl	8002458 <HAL_GetTick>
 80046a2:	4602      	mov	r2, r0
 80046a4:	693b      	ldr	r3, [r7, #16]
 80046a6:	1ad3      	subs	r3, r2, r3
 80046a8:	683a      	ldr	r2, [r7, #0]
 80046aa:	429a      	cmp	r2, r3
 80046ac:	d803      	bhi.n	80046b6 <HAL_SPI_Receive+0x19c>
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046b4:	d102      	bne.n	80046bc <HAL_SPI_Receive+0x1a2>
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d102      	bne.n	80046c2 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 80046bc:	2303      	movs	r3, #3
 80046be:	75fb      	strb	r3, [r7, #23]
          goto error;
 80046c0:	e04e      	b.n	8004760 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80046c8:	b29b      	uxth	r3, r3
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d1c8      	bne.n	8004660 <HAL_SPI_Receive+0x146>
 80046ce:	e034      	b.n	800473a <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	689b      	ldr	r3, [r3, #8]
 80046d6:	f003 0301 	and.w	r3, r3, #1
 80046da:	2b01      	cmp	r3, #1
 80046dc:	d115      	bne.n	800470a <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	68da      	ldr	r2, [r3, #12]
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046e8:	b292      	uxth	r2, r2
 80046ea:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046f0:	1c9a      	adds	r2, r3, #2
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80046fc:	b29b      	uxth	r3, r3
 80046fe:	3b01      	subs	r3, #1
 8004700:	b29a      	uxth	r2, r3
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8004708:	e011      	b.n	800472e <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800470a:	f7fd fea5 	bl	8002458 <HAL_GetTick>
 800470e:	4602      	mov	r2, r0
 8004710:	693b      	ldr	r3, [r7, #16]
 8004712:	1ad3      	subs	r3, r2, r3
 8004714:	683a      	ldr	r2, [r7, #0]
 8004716:	429a      	cmp	r2, r3
 8004718:	d803      	bhi.n	8004722 <HAL_SPI_Receive+0x208>
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004720:	d102      	bne.n	8004728 <HAL_SPI_Receive+0x20e>
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	2b00      	cmp	r3, #0
 8004726:	d102      	bne.n	800472e <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8004728:	2303      	movs	r3, #3
 800472a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800472c:	e018      	b.n	8004760 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004734:	b29b      	uxth	r3, r3
 8004736:	2b00      	cmp	r3, #0
 8004738:	d1ca      	bne.n	80046d0 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800473a:	693a      	ldr	r2, [r7, #16]
 800473c:	6839      	ldr	r1, [r7, #0]
 800473e:	68f8      	ldr	r0, [r7, #12]
 8004740:	f000 fc68 	bl	8005014 <SPI_EndRxTransaction>
 8004744:	4603      	mov	r3, r0
 8004746:	2b00      	cmp	r3, #0
 8004748:	d002      	beq.n	8004750 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	2220      	movs	r2, #32
 800474e:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004754:	2b00      	cmp	r3, #0
 8004756:	d002      	beq.n	800475e <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8004758:	2301      	movs	r3, #1
 800475a:	75fb      	strb	r3, [r7, #23]
 800475c:	e000      	b.n	8004760 <HAL_SPI_Receive+0x246>
  }

error :
 800475e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	2201      	movs	r2, #1
 8004764:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	2200      	movs	r2, #0
 800476c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004770:	7dfb      	ldrb	r3, [r7, #23]
}
 8004772:	4618      	mov	r0, r3
 8004774:	3718      	adds	r7, #24
 8004776:	46bd      	mov	sp, r7
 8004778:	bd80      	pop	{r7, pc}

0800477a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800477a:	b580      	push	{r7, lr}
 800477c:	b08a      	sub	sp, #40	; 0x28
 800477e:	af00      	add	r7, sp, #0
 8004780:	60f8      	str	r0, [r7, #12]
 8004782:	60b9      	str	r1, [r7, #8]
 8004784:	607a      	str	r2, [r7, #4]
 8004786:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004788:	2301      	movs	r3, #1
 800478a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800478c:	2300      	movs	r3, #0
 800478e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004798:	2b01      	cmp	r3, #1
 800479a:	d101      	bne.n	80047a0 <HAL_SPI_TransmitReceive+0x26>
 800479c:	2302      	movs	r3, #2
 800479e:	e1fb      	b.n	8004b98 <HAL_SPI_TransmitReceive+0x41e>
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	2201      	movs	r2, #1
 80047a4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80047a8:	f7fd fe56 	bl	8002458 <HAL_GetTick>
 80047ac:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80047b4:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	685b      	ldr	r3, [r3, #4]
 80047ba:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80047bc:	887b      	ldrh	r3, [r7, #2]
 80047be:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80047c0:	887b      	ldrh	r3, [r7, #2]
 80047c2:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80047c4:	7efb      	ldrb	r3, [r7, #27]
 80047c6:	2b01      	cmp	r3, #1
 80047c8:	d00e      	beq.n	80047e8 <HAL_SPI_TransmitReceive+0x6e>
 80047ca:	697b      	ldr	r3, [r7, #20]
 80047cc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80047d0:	d106      	bne.n	80047e0 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	689b      	ldr	r3, [r3, #8]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d102      	bne.n	80047e0 <HAL_SPI_TransmitReceive+0x66>
 80047da:	7efb      	ldrb	r3, [r7, #27]
 80047dc:	2b04      	cmp	r3, #4
 80047de:	d003      	beq.n	80047e8 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80047e0:	2302      	movs	r3, #2
 80047e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80047e6:	e1cd      	b.n	8004b84 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80047e8:	68bb      	ldr	r3, [r7, #8]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d005      	beq.n	80047fa <HAL_SPI_TransmitReceive+0x80>
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d002      	beq.n	80047fa <HAL_SPI_TransmitReceive+0x80>
 80047f4:	887b      	ldrh	r3, [r7, #2]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d103      	bne.n	8004802 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80047fa:	2301      	movs	r3, #1
 80047fc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004800:	e1c0      	b.n	8004b84 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004808:	b2db      	uxtb	r3, r3
 800480a:	2b04      	cmp	r3, #4
 800480c:	d003      	beq.n	8004816 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	2205      	movs	r2, #5
 8004812:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	2200      	movs	r2, #0
 800481a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	687a      	ldr	r2, [r7, #4]
 8004820:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	887a      	ldrh	r2, [r7, #2]
 8004826:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	887a      	ldrh	r2, [r7, #2]
 800482e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	68ba      	ldr	r2, [r7, #8]
 8004836:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	887a      	ldrh	r2, [r7, #2]
 800483c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	887a      	ldrh	r2, [r7, #2]
 8004842:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	2200      	movs	r2, #0
 8004848:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	2200      	movs	r2, #0
 800484e:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	68db      	ldr	r3, [r3, #12]
 8004854:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004858:	d802      	bhi.n	8004860 <HAL_SPI_TransmitReceive+0xe6>
 800485a:	8a3b      	ldrh	r3, [r7, #16]
 800485c:	2b01      	cmp	r3, #1
 800485e:	d908      	bls.n	8004872 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	685a      	ldr	r2, [r3, #4]
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800486e:	605a      	str	r2, [r3, #4]
 8004870:	e007      	b.n	8004882 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	685a      	ldr	r2, [r3, #4]
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004880:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800488c:	2b40      	cmp	r3, #64	; 0x40
 800488e:	d007      	beq.n	80048a0 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	681a      	ldr	r2, [r3, #0]
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800489e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	68db      	ldr	r3, [r3, #12]
 80048a4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80048a8:	d97c      	bls.n	80049a4 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	685b      	ldr	r3, [r3, #4]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d002      	beq.n	80048b8 <HAL_SPI_TransmitReceive+0x13e>
 80048b2:	8a7b      	ldrh	r3, [r7, #18]
 80048b4:	2b01      	cmp	r3, #1
 80048b6:	d169      	bne.n	800498c <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048bc:	881a      	ldrh	r2, [r3, #0]
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048c8:	1c9a      	adds	r2, r3, #2
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80048d2:	b29b      	uxth	r3, r3
 80048d4:	3b01      	subs	r3, #1
 80048d6:	b29a      	uxth	r2, r3
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80048dc:	e056      	b.n	800498c <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	689b      	ldr	r3, [r3, #8]
 80048e4:	f003 0302 	and.w	r3, r3, #2
 80048e8:	2b02      	cmp	r3, #2
 80048ea:	d11b      	bne.n	8004924 <HAL_SPI_TransmitReceive+0x1aa>
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80048f0:	b29b      	uxth	r3, r3
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d016      	beq.n	8004924 <HAL_SPI_TransmitReceive+0x1aa>
 80048f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048f8:	2b01      	cmp	r3, #1
 80048fa:	d113      	bne.n	8004924 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004900:	881a      	ldrh	r2, [r3, #0]
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800490c:	1c9a      	adds	r2, r3, #2
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004916:	b29b      	uxth	r3, r3
 8004918:	3b01      	subs	r3, #1
 800491a:	b29a      	uxth	r2, r3
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004920:	2300      	movs	r3, #0
 8004922:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	689b      	ldr	r3, [r3, #8]
 800492a:	f003 0301 	and.w	r3, r3, #1
 800492e:	2b01      	cmp	r3, #1
 8004930:	d11c      	bne.n	800496c <HAL_SPI_TransmitReceive+0x1f2>
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004938:	b29b      	uxth	r3, r3
 800493a:	2b00      	cmp	r3, #0
 800493c:	d016      	beq.n	800496c <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	68da      	ldr	r2, [r3, #12]
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004948:	b292      	uxth	r2, r2
 800494a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004950:	1c9a      	adds	r2, r3, #2
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800495c:	b29b      	uxth	r3, r3
 800495e:	3b01      	subs	r3, #1
 8004960:	b29a      	uxth	r2, r3
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004968:	2301      	movs	r3, #1
 800496a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800496c:	f7fd fd74 	bl	8002458 <HAL_GetTick>
 8004970:	4602      	mov	r2, r0
 8004972:	69fb      	ldr	r3, [r7, #28]
 8004974:	1ad3      	subs	r3, r2, r3
 8004976:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004978:	429a      	cmp	r2, r3
 800497a:	d807      	bhi.n	800498c <HAL_SPI_TransmitReceive+0x212>
 800497c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800497e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004982:	d003      	beq.n	800498c <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8004984:	2303      	movs	r3, #3
 8004986:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800498a:	e0fb      	b.n	8004b84 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004990:	b29b      	uxth	r3, r3
 8004992:	2b00      	cmp	r3, #0
 8004994:	d1a3      	bne.n	80048de <HAL_SPI_TransmitReceive+0x164>
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800499c:	b29b      	uxth	r3, r3
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d19d      	bne.n	80048de <HAL_SPI_TransmitReceive+0x164>
 80049a2:	e0df      	b.n	8004b64 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	685b      	ldr	r3, [r3, #4]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d003      	beq.n	80049b4 <HAL_SPI_TransmitReceive+0x23a>
 80049ac:	8a7b      	ldrh	r3, [r7, #18]
 80049ae:	2b01      	cmp	r3, #1
 80049b0:	f040 80cb 	bne.w	8004b4a <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049b8:	b29b      	uxth	r3, r3
 80049ba:	2b01      	cmp	r3, #1
 80049bc:	d912      	bls.n	80049e4 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049c2:	881a      	ldrh	r2, [r3, #0]
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049ce:	1c9a      	adds	r2, r3, #2
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049d8:	b29b      	uxth	r3, r3
 80049da:	3b02      	subs	r3, #2
 80049dc:	b29a      	uxth	r2, r3
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80049e2:	e0b2      	b.n	8004b4a <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	330c      	adds	r3, #12
 80049ee:	7812      	ldrb	r2, [r2, #0]
 80049f0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049f6:	1c5a      	adds	r2, r3, #1
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a00:	b29b      	uxth	r3, r3
 8004a02:	3b01      	subs	r3, #1
 8004a04:	b29a      	uxth	r2, r3
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004a0a:	e09e      	b.n	8004b4a <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	689b      	ldr	r3, [r3, #8]
 8004a12:	f003 0302 	and.w	r3, r3, #2
 8004a16:	2b02      	cmp	r3, #2
 8004a18:	d134      	bne.n	8004a84 <HAL_SPI_TransmitReceive+0x30a>
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a1e:	b29b      	uxth	r3, r3
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d02f      	beq.n	8004a84 <HAL_SPI_TransmitReceive+0x30a>
 8004a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a26:	2b01      	cmp	r3, #1
 8004a28:	d12c      	bne.n	8004a84 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a2e:	b29b      	uxth	r3, r3
 8004a30:	2b01      	cmp	r3, #1
 8004a32:	d912      	bls.n	8004a5a <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a38:	881a      	ldrh	r2, [r3, #0]
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a44:	1c9a      	adds	r2, r3, #2
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a4e:	b29b      	uxth	r3, r3
 8004a50:	3b02      	subs	r3, #2
 8004a52:	b29a      	uxth	r2, r3
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004a58:	e012      	b.n	8004a80 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	330c      	adds	r3, #12
 8004a64:	7812      	ldrb	r2, [r2, #0]
 8004a66:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a6c:	1c5a      	adds	r2, r3, #1
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a76:	b29b      	uxth	r3, r3
 8004a78:	3b01      	subs	r3, #1
 8004a7a:	b29a      	uxth	r2, r3
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004a80:	2300      	movs	r3, #0
 8004a82:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	689b      	ldr	r3, [r3, #8]
 8004a8a:	f003 0301 	and.w	r3, r3, #1
 8004a8e:	2b01      	cmp	r3, #1
 8004a90:	d148      	bne.n	8004b24 <HAL_SPI_TransmitReceive+0x3aa>
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004a98:	b29b      	uxth	r3, r3
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d042      	beq.n	8004b24 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004aa4:	b29b      	uxth	r3, r3
 8004aa6:	2b01      	cmp	r3, #1
 8004aa8:	d923      	bls.n	8004af2 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	68da      	ldr	r2, [r3, #12]
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ab4:	b292      	uxth	r2, r2
 8004ab6:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004abc:	1c9a      	adds	r2, r3, #2
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004ac8:	b29b      	uxth	r3, r3
 8004aca:	3b02      	subs	r3, #2
 8004acc:	b29a      	uxth	r2, r3
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004ada:	b29b      	uxth	r3, r3
 8004adc:	2b01      	cmp	r3, #1
 8004ade:	d81f      	bhi.n	8004b20 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	685a      	ldr	r2, [r3, #4]
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004aee:	605a      	str	r2, [r3, #4]
 8004af0:	e016      	b.n	8004b20 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f103 020c 	add.w	r2, r3, #12
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004afe:	7812      	ldrb	r2, [r2, #0]
 8004b00:	b2d2      	uxtb	r2, r2
 8004b02:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b08:	1c5a      	adds	r2, r3, #1
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004b14:	b29b      	uxth	r3, r3
 8004b16:	3b01      	subs	r3, #1
 8004b18:	b29a      	uxth	r2, r3
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004b20:	2301      	movs	r3, #1
 8004b22:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004b24:	f7fd fc98 	bl	8002458 <HAL_GetTick>
 8004b28:	4602      	mov	r2, r0
 8004b2a:	69fb      	ldr	r3, [r7, #28]
 8004b2c:	1ad3      	subs	r3, r2, r3
 8004b2e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b30:	429a      	cmp	r2, r3
 8004b32:	d803      	bhi.n	8004b3c <HAL_SPI_TransmitReceive+0x3c2>
 8004b34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b3a:	d102      	bne.n	8004b42 <HAL_SPI_TransmitReceive+0x3c8>
 8004b3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d103      	bne.n	8004b4a <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8004b42:	2303      	movs	r3, #3
 8004b44:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8004b48:	e01c      	b.n	8004b84 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b4e:	b29b      	uxth	r3, r3
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	f47f af5b 	bne.w	8004a0c <HAL_SPI_TransmitReceive+0x292>
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004b5c:	b29b      	uxth	r3, r3
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	f47f af54 	bne.w	8004a0c <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004b64:	69fa      	ldr	r2, [r7, #28]
 8004b66:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004b68:	68f8      	ldr	r0, [r7, #12]
 8004b6a:	f000 faab 	bl	80050c4 <SPI_EndRxTxTransaction>
 8004b6e:	4603      	mov	r3, r0
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d006      	beq.n	8004b82 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8004b74:	2301      	movs	r3, #1
 8004b76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	2220      	movs	r2, #32
 8004b7e:	661a      	str	r2, [r3, #96]	; 0x60
 8004b80:	e000      	b.n	8004b84 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8004b82:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	2201      	movs	r2, #1
 8004b88:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	2200      	movs	r2, #0
 8004b90:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004b94:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8004b98:	4618      	mov	r0, r3
 8004b9a:	3728      	adds	r7, #40	; 0x28
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	bd80      	pop	{r7, pc}

08004ba0 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	b088      	sub	sp, #32
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	685b      	ldr	r3, [r3, #4]
 8004bae:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	689b      	ldr	r3, [r3, #8]
 8004bb6:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004bb8:	69bb      	ldr	r3, [r7, #24]
 8004bba:	099b      	lsrs	r3, r3, #6
 8004bbc:	f003 0301 	and.w	r3, r3, #1
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d10f      	bne.n	8004be4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004bc4:	69bb      	ldr	r3, [r7, #24]
 8004bc6:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d00a      	beq.n	8004be4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004bce:	69fb      	ldr	r3, [r7, #28]
 8004bd0:	099b      	lsrs	r3, r3, #6
 8004bd2:	f003 0301 	and.w	r3, r3, #1
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d004      	beq.n	8004be4 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bde:	6878      	ldr	r0, [r7, #4]
 8004be0:	4798      	blx	r3
    return;
 8004be2:	e0d7      	b.n	8004d94 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8004be4:	69bb      	ldr	r3, [r7, #24]
 8004be6:	085b      	lsrs	r3, r3, #1
 8004be8:	f003 0301 	and.w	r3, r3, #1
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d00a      	beq.n	8004c06 <HAL_SPI_IRQHandler+0x66>
 8004bf0:	69fb      	ldr	r3, [r7, #28]
 8004bf2:	09db      	lsrs	r3, r3, #7
 8004bf4:	f003 0301 	and.w	r3, r3, #1
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d004      	beq.n	8004c06 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c00:	6878      	ldr	r0, [r7, #4]
 8004c02:	4798      	blx	r3
    return;
 8004c04:	e0c6      	b.n	8004d94 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004c06:	69bb      	ldr	r3, [r7, #24]
 8004c08:	095b      	lsrs	r3, r3, #5
 8004c0a:	f003 0301 	and.w	r3, r3, #1
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d10c      	bne.n	8004c2c <HAL_SPI_IRQHandler+0x8c>
 8004c12:	69bb      	ldr	r3, [r7, #24]
 8004c14:	099b      	lsrs	r3, r3, #6
 8004c16:	f003 0301 	and.w	r3, r3, #1
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d106      	bne.n	8004c2c <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8004c1e:	69bb      	ldr	r3, [r7, #24]
 8004c20:	0a1b      	lsrs	r3, r3, #8
 8004c22:	f003 0301 	and.w	r3, r3, #1
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	f000 80b4 	beq.w	8004d94 <HAL_SPI_IRQHandler+0x1f4>
 8004c2c:	69fb      	ldr	r3, [r7, #28]
 8004c2e:	095b      	lsrs	r3, r3, #5
 8004c30:	f003 0301 	and.w	r3, r3, #1
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	f000 80ad 	beq.w	8004d94 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004c3a:	69bb      	ldr	r3, [r7, #24]
 8004c3c:	099b      	lsrs	r3, r3, #6
 8004c3e:	f003 0301 	and.w	r3, r3, #1
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d023      	beq.n	8004c8e <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004c4c:	b2db      	uxtb	r3, r3
 8004c4e:	2b03      	cmp	r3, #3
 8004c50:	d011      	beq.n	8004c76 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c56:	f043 0204 	orr.w	r2, r3, #4
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004c5e:	2300      	movs	r3, #0
 8004c60:	617b      	str	r3, [r7, #20]
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	68db      	ldr	r3, [r3, #12]
 8004c68:	617b      	str	r3, [r7, #20]
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	689b      	ldr	r3, [r3, #8]
 8004c70:	617b      	str	r3, [r7, #20]
 8004c72:	697b      	ldr	r3, [r7, #20]
 8004c74:	e00b      	b.n	8004c8e <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004c76:	2300      	movs	r3, #0
 8004c78:	613b      	str	r3, [r7, #16]
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	68db      	ldr	r3, [r3, #12]
 8004c80:	613b      	str	r3, [r7, #16]
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	689b      	ldr	r3, [r3, #8]
 8004c88:	613b      	str	r3, [r7, #16]
 8004c8a:	693b      	ldr	r3, [r7, #16]
        return;
 8004c8c:	e082      	b.n	8004d94 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8004c8e:	69bb      	ldr	r3, [r7, #24]
 8004c90:	095b      	lsrs	r3, r3, #5
 8004c92:	f003 0301 	and.w	r3, r3, #1
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d014      	beq.n	8004cc4 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c9e:	f043 0201 	orr.w	r2, r3, #1
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	60fb      	str	r3, [r7, #12]
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	689b      	ldr	r3, [r3, #8]
 8004cb0:	60fb      	str	r3, [r7, #12]
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	681a      	ldr	r2, [r3, #0]
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004cc0:	601a      	str	r2, [r3, #0]
 8004cc2:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8004cc4:	69bb      	ldr	r3, [r7, #24]
 8004cc6:	0a1b      	lsrs	r3, r3, #8
 8004cc8:	f003 0301 	and.w	r3, r3, #1
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d00c      	beq.n	8004cea <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004cd4:	f043 0208 	orr.w	r2, r3, #8
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8004cdc:	2300      	movs	r3, #0
 8004cde:	60bb      	str	r3, [r7, #8]
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	689b      	ldr	r3, [r3, #8]
 8004ce6:	60bb      	str	r3, [r7, #8]
 8004ce8:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d04f      	beq.n	8004d92 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	685a      	ldr	r2, [r3, #4]
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004d00:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2201      	movs	r2, #1
 8004d06:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8004d0a:	69fb      	ldr	r3, [r7, #28]
 8004d0c:	f003 0302 	and.w	r3, r3, #2
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d104      	bne.n	8004d1e <HAL_SPI_IRQHandler+0x17e>
 8004d14:	69fb      	ldr	r3, [r7, #28]
 8004d16:	f003 0301 	and.w	r3, r3, #1
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d034      	beq.n	8004d88 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	685a      	ldr	r2, [r3, #4]
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f022 0203 	bic.w	r2, r2, #3
 8004d2c:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d011      	beq.n	8004d5a <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d3a:	4a18      	ldr	r2, [pc, #96]	; (8004d9c <HAL_SPI_IRQHandler+0x1fc>)
 8004d3c:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d42:	4618      	mov	r0, r3
 8004d44:	f7fd fcc9 	bl	80026da <HAL_DMA_Abort_IT>
 8004d48:	4603      	mov	r3, r0
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d005      	beq.n	8004d5a <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d52:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d016      	beq.n	8004d90 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d66:	4a0d      	ldr	r2, [pc, #52]	; (8004d9c <HAL_SPI_IRQHandler+0x1fc>)
 8004d68:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d6e:	4618      	mov	r0, r3
 8004d70:	f7fd fcb3 	bl	80026da <HAL_DMA_Abort_IT>
 8004d74:	4603      	mov	r3, r0
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d00a      	beq.n	8004d90 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d7e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8004d86:	e003      	b.n	8004d90 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8004d88:	6878      	ldr	r0, [r7, #4]
 8004d8a:	f000 f809 	bl	8004da0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8004d8e:	e000      	b.n	8004d92 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8004d90:	bf00      	nop
    return;
 8004d92:	bf00      	nop
  }
}
 8004d94:	3720      	adds	r7, #32
 8004d96:	46bd      	mov	sp, r7
 8004d98:	bd80      	pop	{r7, pc}
 8004d9a:	bf00      	nop
 8004d9c:	08004db5 	.word	0x08004db5

08004da0 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8004da0:	b480      	push	{r7}
 8004da2:	b083      	sub	sp, #12
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8004da8:	bf00      	nop
 8004daa:	370c      	adds	r7, #12
 8004dac:	46bd      	mov	sp, r7
 8004dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db2:	4770      	bx	lr

08004db4 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004db4:	b580      	push	{r7, lr}
 8004db6:	b084      	sub	sp, #16
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dc0:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	2200      	movs	r2, #0
 8004dce:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004dd0:	68f8      	ldr	r0, [r7, #12]
 8004dd2:	f7ff ffe5 	bl	8004da0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004dd6:	bf00      	nop
 8004dd8:	3710      	adds	r7, #16
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	bd80      	pop	{r7, pc}
	...

08004de0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b088      	sub	sp, #32
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	60f8      	str	r0, [r7, #12]
 8004de8:	60b9      	str	r1, [r7, #8]
 8004dea:	603b      	str	r3, [r7, #0]
 8004dec:	4613      	mov	r3, r2
 8004dee:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004df0:	f7fd fb32 	bl	8002458 <HAL_GetTick>
 8004df4:	4602      	mov	r2, r0
 8004df6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004df8:	1a9b      	subs	r3, r3, r2
 8004dfa:	683a      	ldr	r2, [r7, #0]
 8004dfc:	4413      	add	r3, r2
 8004dfe:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004e00:	f7fd fb2a 	bl	8002458 <HAL_GetTick>
 8004e04:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004e06:	4b39      	ldr	r3, [pc, #228]	; (8004eec <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	015b      	lsls	r3, r3, #5
 8004e0c:	0d1b      	lsrs	r3, r3, #20
 8004e0e:	69fa      	ldr	r2, [r7, #28]
 8004e10:	fb02 f303 	mul.w	r3, r2, r3
 8004e14:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004e16:	e054      	b.n	8004ec2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e1e:	d050      	beq.n	8004ec2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004e20:	f7fd fb1a 	bl	8002458 <HAL_GetTick>
 8004e24:	4602      	mov	r2, r0
 8004e26:	69bb      	ldr	r3, [r7, #24]
 8004e28:	1ad3      	subs	r3, r2, r3
 8004e2a:	69fa      	ldr	r2, [r7, #28]
 8004e2c:	429a      	cmp	r2, r3
 8004e2e:	d902      	bls.n	8004e36 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004e30:	69fb      	ldr	r3, [r7, #28]
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d13d      	bne.n	8004eb2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	685a      	ldr	r2, [r3, #4]
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004e44:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	685b      	ldr	r3, [r3, #4]
 8004e4a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004e4e:	d111      	bne.n	8004e74 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	689b      	ldr	r3, [r3, #8]
 8004e54:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e58:	d004      	beq.n	8004e64 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	689b      	ldr	r3, [r3, #8]
 8004e5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e62:	d107      	bne.n	8004e74 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	681a      	ldr	r2, [r3, #0]
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e72:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e78:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e7c:	d10f      	bne.n	8004e9e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	681a      	ldr	r2, [r3, #0]
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004e8c:	601a      	str	r2, [r3, #0]
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	681a      	ldr	r2, [r3, #0]
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004e9c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	2201      	movs	r2, #1
 8004ea2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004eae:	2303      	movs	r3, #3
 8004eb0:	e017      	b.n	8004ee2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004eb2:	697b      	ldr	r3, [r7, #20]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d101      	bne.n	8004ebc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004eb8:	2300      	movs	r3, #0
 8004eba:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004ebc:	697b      	ldr	r3, [r7, #20]
 8004ebe:	3b01      	subs	r3, #1
 8004ec0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	689a      	ldr	r2, [r3, #8]
 8004ec8:	68bb      	ldr	r3, [r7, #8]
 8004eca:	4013      	ands	r3, r2
 8004ecc:	68ba      	ldr	r2, [r7, #8]
 8004ece:	429a      	cmp	r2, r3
 8004ed0:	bf0c      	ite	eq
 8004ed2:	2301      	moveq	r3, #1
 8004ed4:	2300      	movne	r3, #0
 8004ed6:	b2db      	uxtb	r3, r3
 8004ed8:	461a      	mov	r2, r3
 8004eda:	79fb      	ldrb	r3, [r7, #7]
 8004edc:	429a      	cmp	r2, r3
 8004ede:	d19b      	bne.n	8004e18 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004ee0:	2300      	movs	r3, #0
}
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	3720      	adds	r7, #32
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	bd80      	pop	{r7, pc}
 8004eea:	bf00      	nop
 8004eec:	20000010 	.word	0x20000010

08004ef0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	b088      	sub	sp, #32
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	60f8      	str	r0, [r7, #12]
 8004ef8:	60b9      	str	r1, [r7, #8]
 8004efa:	607a      	str	r2, [r7, #4]
 8004efc:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004efe:	f7fd faab 	bl	8002458 <HAL_GetTick>
 8004f02:	4602      	mov	r2, r0
 8004f04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f06:	1a9b      	subs	r3, r3, r2
 8004f08:	683a      	ldr	r2, [r7, #0]
 8004f0a:	4413      	add	r3, r2
 8004f0c:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004f0e:	f7fd faa3 	bl	8002458 <HAL_GetTick>
 8004f12:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004f14:	4b3e      	ldr	r3, [pc, #248]	; (8005010 <SPI_WaitFifoStateUntilTimeout+0x120>)
 8004f16:	681a      	ldr	r2, [r3, #0]
 8004f18:	4613      	mov	r3, r2
 8004f1a:	009b      	lsls	r3, r3, #2
 8004f1c:	4413      	add	r3, r2
 8004f1e:	00da      	lsls	r2, r3, #3
 8004f20:	1ad3      	subs	r3, r2, r3
 8004f22:	0d1b      	lsrs	r3, r3, #20
 8004f24:	69fa      	ldr	r2, [r7, #28]
 8004f26:	fb02 f303 	mul.w	r3, r2, r3
 8004f2a:	613b      	str	r3, [r7, #16]

  while ((hspi->Instance->SR & Fifo) != State)
 8004f2c:	e062      	b.n	8004ff4 <SPI_WaitFifoStateUntilTimeout+0x104>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004f2e:	68bb      	ldr	r3, [r7, #8]
 8004f30:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004f34:	d109      	bne.n	8004f4a <SPI_WaitFifoStateUntilTimeout+0x5a>
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d106      	bne.n	8004f4a <SPI_WaitFifoStateUntilTimeout+0x5a>
    {
      /* Flush Data Register by a blank read */
      tmpreg = READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	330c      	adds	r3, #12
 8004f42:	781b      	ldrb	r3, [r3, #0]
 8004f44:	b2db      	uxtb	r3, r3
 8004f46:	617b      	str	r3, [r7, #20]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 8004f48:	697b      	ldr	r3, [r7, #20]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004f4a:	683b      	ldr	r3, [r7, #0]
 8004f4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f50:	d050      	beq.n	8004ff4 <SPI_WaitFifoStateUntilTimeout+0x104>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004f52:	f7fd fa81 	bl	8002458 <HAL_GetTick>
 8004f56:	4602      	mov	r2, r0
 8004f58:	69bb      	ldr	r3, [r7, #24]
 8004f5a:	1ad3      	subs	r3, r2, r3
 8004f5c:	69fa      	ldr	r2, [r7, #28]
 8004f5e:	429a      	cmp	r2, r3
 8004f60:	d902      	bls.n	8004f68 <SPI_WaitFifoStateUntilTimeout+0x78>
 8004f62:	69fb      	ldr	r3, [r7, #28]
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d13d      	bne.n	8004fe4 <SPI_WaitFifoStateUntilTimeout+0xf4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	685a      	ldr	r2, [r3, #4]
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004f76:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	685b      	ldr	r3, [r3, #4]
 8004f7c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004f80:	d111      	bne.n	8004fa6 <SPI_WaitFifoStateUntilTimeout+0xb6>
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	689b      	ldr	r3, [r3, #8]
 8004f86:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f8a:	d004      	beq.n	8004f96 <SPI_WaitFifoStateUntilTimeout+0xa6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	689b      	ldr	r3, [r3, #8]
 8004f90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f94:	d107      	bne.n	8004fa6 <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	681a      	ldr	r2, [r3, #0]
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004fa4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004faa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004fae:	d10f      	bne.n	8004fd0 <SPI_WaitFifoStateUntilTimeout+0xe0>
        {
          SPI_RESET_CRC(hspi);
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	681a      	ldr	r2, [r3, #0]
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004fbe:	601a      	str	r2, [r3, #0]
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	681a      	ldr	r2, [r3, #0]
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004fce:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	2201      	movs	r2, #1
 8004fd4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	2200      	movs	r2, #0
 8004fdc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004fe0:	2303      	movs	r3, #3
 8004fe2:	e010      	b.n	8005006 <SPI_WaitFifoStateUntilTimeout+0x116>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004fe4:	693b      	ldr	r3, [r7, #16]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d101      	bne.n	8004fee <SPI_WaitFifoStateUntilTimeout+0xfe>
      {
        tmp_timeout = 0U;
 8004fea:	2300      	movs	r3, #0
 8004fec:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 8004fee:	693b      	ldr	r3, [r7, #16]
 8004ff0:	3b01      	subs	r3, #1
 8004ff2:	613b      	str	r3, [r7, #16]
  while ((hspi->Instance->SR & Fifo) != State)
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	689a      	ldr	r2, [r3, #8]
 8004ffa:	68bb      	ldr	r3, [r7, #8]
 8004ffc:	4013      	ands	r3, r2
 8004ffe:	687a      	ldr	r2, [r7, #4]
 8005000:	429a      	cmp	r2, r3
 8005002:	d194      	bne.n	8004f2e <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 8005004:	2300      	movs	r3, #0
}
 8005006:	4618      	mov	r0, r3
 8005008:	3720      	adds	r7, #32
 800500a:	46bd      	mov	sp, r7
 800500c:	bd80      	pop	{r7, pc}
 800500e:	bf00      	nop
 8005010:	20000010 	.word	0x20000010

08005014 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005014:	b580      	push	{r7, lr}
 8005016:	b086      	sub	sp, #24
 8005018:	af02      	add	r7, sp, #8
 800501a:	60f8      	str	r0, [r7, #12]
 800501c:	60b9      	str	r1, [r7, #8]
 800501e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	685b      	ldr	r3, [r3, #4]
 8005024:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005028:	d111      	bne.n	800504e <SPI_EndRxTransaction+0x3a>
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	689b      	ldr	r3, [r3, #8]
 800502e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005032:	d004      	beq.n	800503e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	689b      	ldr	r3, [r3, #8]
 8005038:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800503c:	d107      	bne.n	800504e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	681a      	ldr	r2, [r3, #0]
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800504c:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	9300      	str	r3, [sp, #0]
 8005052:	68bb      	ldr	r3, [r7, #8]
 8005054:	2200      	movs	r2, #0
 8005056:	2180      	movs	r1, #128	; 0x80
 8005058:	68f8      	ldr	r0, [r7, #12]
 800505a:	f7ff fec1 	bl	8004de0 <SPI_WaitFlagStateUntilTimeout>
 800505e:	4603      	mov	r3, r0
 8005060:	2b00      	cmp	r3, #0
 8005062:	d007      	beq.n	8005074 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005068:	f043 0220 	orr.w	r2, r3, #32
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005070:	2303      	movs	r3, #3
 8005072:	e023      	b.n	80050bc <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	685b      	ldr	r3, [r3, #4]
 8005078:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800507c:	d11d      	bne.n	80050ba <SPI_EndRxTransaction+0xa6>
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	689b      	ldr	r3, [r3, #8]
 8005082:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005086:	d004      	beq.n	8005092 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	689b      	ldr	r3, [r3, #8]
 800508c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005090:	d113      	bne.n	80050ba <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	9300      	str	r3, [sp, #0]
 8005096:	68bb      	ldr	r3, [r7, #8]
 8005098:	2200      	movs	r2, #0
 800509a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800509e:	68f8      	ldr	r0, [r7, #12]
 80050a0:	f7ff ff26 	bl	8004ef0 <SPI_WaitFifoStateUntilTimeout>
 80050a4:	4603      	mov	r3, r0
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d007      	beq.n	80050ba <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050ae:	f043 0220 	orr.w	r2, r3, #32
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80050b6:	2303      	movs	r3, #3
 80050b8:	e000      	b.n	80050bc <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 80050ba:	2300      	movs	r3, #0
}
 80050bc:	4618      	mov	r0, r3
 80050be:	3710      	adds	r7, #16
 80050c0:	46bd      	mov	sp, r7
 80050c2:	bd80      	pop	{r7, pc}

080050c4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80050c4:	b580      	push	{r7, lr}
 80050c6:	b086      	sub	sp, #24
 80050c8:	af02      	add	r7, sp, #8
 80050ca:	60f8      	str	r0, [r7, #12]
 80050cc:	60b9      	str	r1, [r7, #8]
 80050ce:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	9300      	str	r3, [sp, #0]
 80050d4:	68bb      	ldr	r3, [r7, #8]
 80050d6:	2200      	movs	r2, #0
 80050d8:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80050dc:	68f8      	ldr	r0, [r7, #12]
 80050de:	f7ff ff07 	bl	8004ef0 <SPI_WaitFifoStateUntilTimeout>
 80050e2:	4603      	mov	r3, r0
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d007      	beq.n	80050f8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050ec:	f043 0220 	orr.w	r2, r3, #32
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80050f4:	2303      	movs	r3, #3
 80050f6:	e027      	b.n	8005148 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	9300      	str	r3, [sp, #0]
 80050fc:	68bb      	ldr	r3, [r7, #8]
 80050fe:	2200      	movs	r2, #0
 8005100:	2180      	movs	r1, #128	; 0x80
 8005102:	68f8      	ldr	r0, [r7, #12]
 8005104:	f7ff fe6c 	bl	8004de0 <SPI_WaitFlagStateUntilTimeout>
 8005108:	4603      	mov	r3, r0
 800510a:	2b00      	cmp	r3, #0
 800510c:	d007      	beq.n	800511e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005112:	f043 0220 	orr.w	r2, r3, #32
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800511a:	2303      	movs	r3, #3
 800511c:	e014      	b.n	8005148 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	9300      	str	r3, [sp, #0]
 8005122:	68bb      	ldr	r3, [r7, #8]
 8005124:	2200      	movs	r2, #0
 8005126:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800512a:	68f8      	ldr	r0, [r7, #12]
 800512c:	f7ff fee0 	bl	8004ef0 <SPI_WaitFifoStateUntilTimeout>
 8005130:	4603      	mov	r3, r0
 8005132:	2b00      	cmp	r3, #0
 8005134:	d007      	beq.n	8005146 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800513a:	f043 0220 	orr.w	r2, r3, #32
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005142:	2303      	movs	r3, #3
 8005144:	e000      	b.n	8005148 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8005146:	2300      	movs	r3, #0
}
 8005148:	4618      	mov	r0, r3
 800514a:	3710      	adds	r7, #16
 800514c:	46bd      	mov	sp, r7
 800514e:	bd80      	pop	{r7, pc}

08005150 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005150:	b580      	push	{r7, lr}
 8005152:	b082      	sub	sp, #8
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2b00      	cmp	r3, #0
 800515c:	d101      	bne.n	8005162 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800515e:	2301      	movs	r3, #1
 8005160:	e040      	b.n	80051e4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005166:	2b00      	cmp	r3, #0
 8005168:	d106      	bne.n	8005178 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2200      	movs	r2, #0
 800516e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005172:	6878      	ldr	r0, [r7, #4]
 8005174:	f7fc ff4e 	bl	8002014 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2224      	movs	r2, #36	; 0x24
 800517c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	681a      	ldr	r2, [r3, #0]
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f022 0201 	bic.w	r2, r2, #1
 800518c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800518e:	6878      	ldr	r0, [r7, #4]
 8005190:	f000 f8c0 	bl	8005314 <UART_SetConfig>
 8005194:	4603      	mov	r3, r0
 8005196:	2b01      	cmp	r3, #1
 8005198:	d101      	bne.n	800519e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800519a:	2301      	movs	r3, #1
 800519c:	e022      	b.n	80051e4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d002      	beq.n	80051ac <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80051a6:	6878      	ldr	r0, [r7, #4]
 80051a8:	f000 fb3e 	bl	8005828 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	685a      	ldr	r2, [r3, #4]
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80051ba:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	689a      	ldr	r2, [r3, #8]
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80051ca:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	681a      	ldr	r2, [r3, #0]
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f042 0201 	orr.w	r2, r2, #1
 80051da:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80051dc:	6878      	ldr	r0, [r7, #4]
 80051de:	f000 fbc5 	bl	800596c <UART_CheckIdleState>
 80051e2:	4603      	mov	r3, r0
}
 80051e4:	4618      	mov	r0, r3
 80051e6:	3708      	adds	r7, #8
 80051e8:	46bd      	mov	sp, r7
 80051ea:	bd80      	pop	{r7, pc}

080051ec <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80051ec:	b580      	push	{r7, lr}
 80051ee:	b08a      	sub	sp, #40	; 0x28
 80051f0:	af02      	add	r7, sp, #8
 80051f2:	60f8      	str	r0, [r7, #12]
 80051f4:	60b9      	str	r1, [r7, #8]
 80051f6:	603b      	str	r3, [r7, #0]
 80051f8:	4613      	mov	r3, r2
 80051fa:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005200:	2b20      	cmp	r3, #32
 8005202:	f040 8082 	bne.w	800530a <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005206:	68bb      	ldr	r3, [r7, #8]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d002      	beq.n	8005212 <HAL_UART_Transmit+0x26>
 800520c:	88fb      	ldrh	r3, [r7, #6]
 800520e:	2b00      	cmp	r3, #0
 8005210:	d101      	bne.n	8005216 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005212:	2301      	movs	r3, #1
 8005214:	e07a      	b.n	800530c <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800521c:	2b01      	cmp	r3, #1
 800521e:	d101      	bne.n	8005224 <HAL_UART_Transmit+0x38>
 8005220:	2302      	movs	r3, #2
 8005222:	e073      	b.n	800530c <HAL_UART_Transmit+0x120>
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	2201      	movs	r2, #1
 8005228:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	2200      	movs	r2, #0
 8005230:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	2221      	movs	r2, #33	; 0x21
 8005238:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800523a:	f7fd f90d 	bl	8002458 <HAL_GetTick>
 800523e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	88fa      	ldrh	r2, [r7, #6]
 8005244:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	88fa      	ldrh	r2, [r7, #6]
 800524c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	689b      	ldr	r3, [r3, #8]
 8005254:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005258:	d108      	bne.n	800526c <HAL_UART_Transmit+0x80>
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	691b      	ldr	r3, [r3, #16]
 800525e:	2b00      	cmp	r3, #0
 8005260:	d104      	bne.n	800526c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8005262:	2300      	movs	r3, #0
 8005264:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005266:	68bb      	ldr	r3, [r7, #8]
 8005268:	61bb      	str	r3, [r7, #24]
 800526a:	e003      	b.n	8005274 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800526c:	68bb      	ldr	r3, [r7, #8]
 800526e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005270:	2300      	movs	r3, #0
 8005272:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	2200      	movs	r2, #0
 8005278:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800527c:	e02d      	b.n	80052da <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	9300      	str	r3, [sp, #0]
 8005282:	697b      	ldr	r3, [r7, #20]
 8005284:	2200      	movs	r2, #0
 8005286:	2180      	movs	r1, #128	; 0x80
 8005288:	68f8      	ldr	r0, [r7, #12]
 800528a:	f000 fbb8 	bl	80059fe <UART_WaitOnFlagUntilTimeout>
 800528e:	4603      	mov	r3, r0
 8005290:	2b00      	cmp	r3, #0
 8005292:	d001      	beq.n	8005298 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8005294:	2303      	movs	r3, #3
 8005296:	e039      	b.n	800530c <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8005298:	69fb      	ldr	r3, [r7, #28]
 800529a:	2b00      	cmp	r3, #0
 800529c:	d10b      	bne.n	80052b6 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800529e:	69bb      	ldr	r3, [r7, #24]
 80052a0:	881a      	ldrh	r2, [r3, #0]
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80052aa:	b292      	uxth	r2, r2
 80052ac:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80052ae:	69bb      	ldr	r3, [r7, #24]
 80052b0:	3302      	adds	r3, #2
 80052b2:	61bb      	str	r3, [r7, #24]
 80052b4:	e008      	b.n	80052c8 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80052b6:	69fb      	ldr	r3, [r7, #28]
 80052b8:	781a      	ldrb	r2, [r3, #0]
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	b292      	uxth	r2, r2
 80052c0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80052c2:	69fb      	ldr	r3, [r7, #28]
 80052c4:	3301      	adds	r3, #1
 80052c6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80052ce:	b29b      	uxth	r3, r3
 80052d0:	3b01      	subs	r3, #1
 80052d2:	b29a      	uxth	r2, r3
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80052e0:	b29b      	uxth	r3, r3
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d1cb      	bne.n	800527e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80052e6:	683b      	ldr	r3, [r7, #0]
 80052e8:	9300      	str	r3, [sp, #0]
 80052ea:	697b      	ldr	r3, [r7, #20]
 80052ec:	2200      	movs	r2, #0
 80052ee:	2140      	movs	r1, #64	; 0x40
 80052f0:	68f8      	ldr	r0, [r7, #12]
 80052f2:	f000 fb84 	bl	80059fe <UART_WaitOnFlagUntilTimeout>
 80052f6:	4603      	mov	r3, r0
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d001      	beq.n	8005300 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80052fc:	2303      	movs	r3, #3
 80052fe:	e005      	b.n	800530c <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	2220      	movs	r2, #32
 8005304:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8005306:	2300      	movs	r3, #0
 8005308:	e000      	b.n	800530c <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800530a:	2302      	movs	r3, #2
  }
}
 800530c:	4618      	mov	r0, r3
 800530e:	3720      	adds	r7, #32
 8005310:	46bd      	mov	sp, r7
 8005312:	bd80      	pop	{r7, pc}

08005314 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005314:	b5b0      	push	{r4, r5, r7, lr}
 8005316:	b088      	sub	sp, #32
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800531c:	2300      	movs	r3, #0
 800531e:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	689a      	ldr	r2, [r3, #8]
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	691b      	ldr	r3, [r3, #16]
 8005328:	431a      	orrs	r2, r3
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	695b      	ldr	r3, [r3, #20]
 800532e:	431a      	orrs	r2, r3
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	69db      	ldr	r3, [r3, #28]
 8005334:	4313      	orrs	r3, r2
 8005336:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	681a      	ldr	r2, [r3, #0]
 800533e:	4bad      	ldr	r3, [pc, #692]	; (80055f4 <UART_SetConfig+0x2e0>)
 8005340:	4013      	ands	r3, r2
 8005342:	687a      	ldr	r2, [r7, #4]
 8005344:	6812      	ldr	r2, [r2, #0]
 8005346:	69f9      	ldr	r1, [r7, #28]
 8005348:	430b      	orrs	r3, r1
 800534a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	685b      	ldr	r3, [r3, #4]
 8005352:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	68da      	ldr	r2, [r3, #12]
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	430a      	orrs	r2, r1
 8005360:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	699b      	ldr	r3, [r3, #24]
 8005366:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	4aa2      	ldr	r2, [pc, #648]	; (80055f8 <UART_SetConfig+0x2e4>)
 800536e:	4293      	cmp	r3, r2
 8005370:	d004      	beq.n	800537c <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6a1b      	ldr	r3, [r3, #32]
 8005376:	69fa      	ldr	r2, [r7, #28]
 8005378:	4313      	orrs	r3, r2
 800537a:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	689b      	ldr	r3, [r3, #8]
 8005382:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	69fa      	ldr	r2, [r7, #28]
 800538c:	430a      	orrs	r2, r1
 800538e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	4a99      	ldr	r2, [pc, #612]	; (80055fc <UART_SetConfig+0x2e8>)
 8005396:	4293      	cmp	r3, r2
 8005398:	d121      	bne.n	80053de <UART_SetConfig+0xca>
 800539a:	4b99      	ldr	r3, [pc, #612]	; (8005600 <UART_SetConfig+0x2ec>)
 800539c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053a0:	f003 0303 	and.w	r3, r3, #3
 80053a4:	2b03      	cmp	r3, #3
 80053a6:	d817      	bhi.n	80053d8 <UART_SetConfig+0xc4>
 80053a8:	a201      	add	r2, pc, #4	; (adr r2, 80053b0 <UART_SetConfig+0x9c>)
 80053aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053ae:	bf00      	nop
 80053b0:	080053c1 	.word	0x080053c1
 80053b4:	080053cd 	.word	0x080053cd
 80053b8:	080053c7 	.word	0x080053c7
 80053bc:	080053d3 	.word	0x080053d3
 80053c0:	2301      	movs	r3, #1
 80053c2:	76fb      	strb	r3, [r7, #27]
 80053c4:	e0e7      	b.n	8005596 <UART_SetConfig+0x282>
 80053c6:	2302      	movs	r3, #2
 80053c8:	76fb      	strb	r3, [r7, #27]
 80053ca:	e0e4      	b.n	8005596 <UART_SetConfig+0x282>
 80053cc:	2304      	movs	r3, #4
 80053ce:	76fb      	strb	r3, [r7, #27]
 80053d0:	e0e1      	b.n	8005596 <UART_SetConfig+0x282>
 80053d2:	2308      	movs	r3, #8
 80053d4:	76fb      	strb	r3, [r7, #27]
 80053d6:	e0de      	b.n	8005596 <UART_SetConfig+0x282>
 80053d8:	2310      	movs	r3, #16
 80053da:	76fb      	strb	r3, [r7, #27]
 80053dc:	e0db      	b.n	8005596 <UART_SetConfig+0x282>
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	4a88      	ldr	r2, [pc, #544]	; (8005604 <UART_SetConfig+0x2f0>)
 80053e4:	4293      	cmp	r3, r2
 80053e6:	d132      	bne.n	800544e <UART_SetConfig+0x13a>
 80053e8:	4b85      	ldr	r3, [pc, #532]	; (8005600 <UART_SetConfig+0x2ec>)
 80053ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053ee:	f003 030c 	and.w	r3, r3, #12
 80053f2:	2b0c      	cmp	r3, #12
 80053f4:	d828      	bhi.n	8005448 <UART_SetConfig+0x134>
 80053f6:	a201      	add	r2, pc, #4	; (adr r2, 80053fc <UART_SetConfig+0xe8>)
 80053f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053fc:	08005431 	.word	0x08005431
 8005400:	08005449 	.word	0x08005449
 8005404:	08005449 	.word	0x08005449
 8005408:	08005449 	.word	0x08005449
 800540c:	0800543d 	.word	0x0800543d
 8005410:	08005449 	.word	0x08005449
 8005414:	08005449 	.word	0x08005449
 8005418:	08005449 	.word	0x08005449
 800541c:	08005437 	.word	0x08005437
 8005420:	08005449 	.word	0x08005449
 8005424:	08005449 	.word	0x08005449
 8005428:	08005449 	.word	0x08005449
 800542c:	08005443 	.word	0x08005443
 8005430:	2300      	movs	r3, #0
 8005432:	76fb      	strb	r3, [r7, #27]
 8005434:	e0af      	b.n	8005596 <UART_SetConfig+0x282>
 8005436:	2302      	movs	r3, #2
 8005438:	76fb      	strb	r3, [r7, #27]
 800543a:	e0ac      	b.n	8005596 <UART_SetConfig+0x282>
 800543c:	2304      	movs	r3, #4
 800543e:	76fb      	strb	r3, [r7, #27]
 8005440:	e0a9      	b.n	8005596 <UART_SetConfig+0x282>
 8005442:	2308      	movs	r3, #8
 8005444:	76fb      	strb	r3, [r7, #27]
 8005446:	e0a6      	b.n	8005596 <UART_SetConfig+0x282>
 8005448:	2310      	movs	r3, #16
 800544a:	76fb      	strb	r3, [r7, #27]
 800544c:	e0a3      	b.n	8005596 <UART_SetConfig+0x282>
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	4a6d      	ldr	r2, [pc, #436]	; (8005608 <UART_SetConfig+0x2f4>)
 8005454:	4293      	cmp	r3, r2
 8005456:	d120      	bne.n	800549a <UART_SetConfig+0x186>
 8005458:	4b69      	ldr	r3, [pc, #420]	; (8005600 <UART_SetConfig+0x2ec>)
 800545a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800545e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005462:	2b30      	cmp	r3, #48	; 0x30
 8005464:	d013      	beq.n	800548e <UART_SetConfig+0x17a>
 8005466:	2b30      	cmp	r3, #48	; 0x30
 8005468:	d814      	bhi.n	8005494 <UART_SetConfig+0x180>
 800546a:	2b20      	cmp	r3, #32
 800546c:	d009      	beq.n	8005482 <UART_SetConfig+0x16e>
 800546e:	2b20      	cmp	r3, #32
 8005470:	d810      	bhi.n	8005494 <UART_SetConfig+0x180>
 8005472:	2b00      	cmp	r3, #0
 8005474:	d002      	beq.n	800547c <UART_SetConfig+0x168>
 8005476:	2b10      	cmp	r3, #16
 8005478:	d006      	beq.n	8005488 <UART_SetConfig+0x174>
 800547a:	e00b      	b.n	8005494 <UART_SetConfig+0x180>
 800547c:	2300      	movs	r3, #0
 800547e:	76fb      	strb	r3, [r7, #27]
 8005480:	e089      	b.n	8005596 <UART_SetConfig+0x282>
 8005482:	2302      	movs	r3, #2
 8005484:	76fb      	strb	r3, [r7, #27]
 8005486:	e086      	b.n	8005596 <UART_SetConfig+0x282>
 8005488:	2304      	movs	r3, #4
 800548a:	76fb      	strb	r3, [r7, #27]
 800548c:	e083      	b.n	8005596 <UART_SetConfig+0x282>
 800548e:	2308      	movs	r3, #8
 8005490:	76fb      	strb	r3, [r7, #27]
 8005492:	e080      	b.n	8005596 <UART_SetConfig+0x282>
 8005494:	2310      	movs	r3, #16
 8005496:	76fb      	strb	r3, [r7, #27]
 8005498:	e07d      	b.n	8005596 <UART_SetConfig+0x282>
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	4a5b      	ldr	r2, [pc, #364]	; (800560c <UART_SetConfig+0x2f8>)
 80054a0:	4293      	cmp	r3, r2
 80054a2:	d120      	bne.n	80054e6 <UART_SetConfig+0x1d2>
 80054a4:	4b56      	ldr	r3, [pc, #344]	; (8005600 <UART_SetConfig+0x2ec>)
 80054a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054aa:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80054ae:	2bc0      	cmp	r3, #192	; 0xc0
 80054b0:	d013      	beq.n	80054da <UART_SetConfig+0x1c6>
 80054b2:	2bc0      	cmp	r3, #192	; 0xc0
 80054b4:	d814      	bhi.n	80054e0 <UART_SetConfig+0x1cc>
 80054b6:	2b80      	cmp	r3, #128	; 0x80
 80054b8:	d009      	beq.n	80054ce <UART_SetConfig+0x1ba>
 80054ba:	2b80      	cmp	r3, #128	; 0x80
 80054bc:	d810      	bhi.n	80054e0 <UART_SetConfig+0x1cc>
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d002      	beq.n	80054c8 <UART_SetConfig+0x1b4>
 80054c2:	2b40      	cmp	r3, #64	; 0x40
 80054c4:	d006      	beq.n	80054d4 <UART_SetConfig+0x1c0>
 80054c6:	e00b      	b.n	80054e0 <UART_SetConfig+0x1cc>
 80054c8:	2300      	movs	r3, #0
 80054ca:	76fb      	strb	r3, [r7, #27]
 80054cc:	e063      	b.n	8005596 <UART_SetConfig+0x282>
 80054ce:	2302      	movs	r3, #2
 80054d0:	76fb      	strb	r3, [r7, #27]
 80054d2:	e060      	b.n	8005596 <UART_SetConfig+0x282>
 80054d4:	2304      	movs	r3, #4
 80054d6:	76fb      	strb	r3, [r7, #27]
 80054d8:	e05d      	b.n	8005596 <UART_SetConfig+0x282>
 80054da:	2308      	movs	r3, #8
 80054dc:	76fb      	strb	r3, [r7, #27]
 80054de:	e05a      	b.n	8005596 <UART_SetConfig+0x282>
 80054e0:	2310      	movs	r3, #16
 80054e2:	76fb      	strb	r3, [r7, #27]
 80054e4:	e057      	b.n	8005596 <UART_SetConfig+0x282>
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	4a49      	ldr	r2, [pc, #292]	; (8005610 <UART_SetConfig+0x2fc>)
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d125      	bne.n	800553c <UART_SetConfig+0x228>
 80054f0:	4b43      	ldr	r3, [pc, #268]	; (8005600 <UART_SetConfig+0x2ec>)
 80054f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80054fa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80054fe:	d017      	beq.n	8005530 <UART_SetConfig+0x21c>
 8005500:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005504:	d817      	bhi.n	8005536 <UART_SetConfig+0x222>
 8005506:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800550a:	d00b      	beq.n	8005524 <UART_SetConfig+0x210>
 800550c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005510:	d811      	bhi.n	8005536 <UART_SetConfig+0x222>
 8005512:	2b00      	cmp	r3, #0
 8005514:	d003      	beq.n	800551e <UART_SetConfig+0x20a>
 8005516:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800551a:	d006      	beq.n	800552a <UART_SetConfig+0x216>
 800551c:	e00b      	b.n	8005536 <UART_SetConfig+0x222>
 800551e:	2300      	movs	r3, #0
 8005520:	76fb      	strb	r3, [r7, #27]
 8005522:	e038      	b.n	8005596 <UART_SetConfig+0x282>
 8005524:	2302      	movs	r3, #2
 8005526:	76fb      	strb	r3, [r7, #27]
 8005528:	e035      	b.n	8005596 <UART_SetConfig+0x282>
 800552a:	2304      	movs	r3, #4
 800552c:	76fb      	strb	r3, [r7, #27]
 800552e:	e032      	b.n	8005596 <UART_SetConfig+0x282>
 8005530:	2308      	movs	r3, #8
 8005532:	76fb      	strb	r3, [r7, #27]
 8005534:	e02f      	b.n	8005596 <UART_SetConfig+0x282>
 8005536:	2310      	movs	r3, #16
 8005538:	76fb      	strb	r3, [r7, #27]
 800553a:	e02c      	b.n	8005596 <UART_SetConfig+0x282>
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	4a2d      	ldr	r2, [pc, #180]	; (80055f8 <UART_SetConfig+0x2e4>)
 8005542:	4293      	cmp	r3, r2
 8005544:	d125      	bne.n	8005592 <UART_SetConfig+0x27e>
 8005546:	4b2e      	ldr	r3, [pc, #184]	; (8005600 <UART_SetConfig+0x2ec>)
 8005548:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800554c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005550:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005554:	d017      	beq.n	8005586 <UART_SetConfig+0x272>
 8005556:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800555a:	d817      	bhi.n	800558c <UART_SetConfig+0x278>
 800555c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005560:	d00b      	beq.n	800557a <UART_SetConfig+0x266>
 8005562:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005566:	d811      	bhi.n	800558c <UART_SetConfig+0x278>
 8005568:	2b00      	cmp	r3, #0
 800556a:	d003      	beq.n	8005574 <UART_SetConfig+0x260>
 800556c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005570:	d006      	beq.n	8005580 <UART_SetConfig+0x26c>
 8005572:	e00b      	b.n	800558c <UART_SetConfig+0x278>
 8005574:	2300      	movs	r3, #0
 8005576:	76fb      	strb	r3, [r7, #27]
 8005578:	e00d      	b.n	8005596 <UART_SetConfig+0x282>
 800557a:	2302      	movs	r3, #2
 800557c:	76fb      	strb	r3, [r7, #27]
 800557e:	e00a      	b.n	8005596 <UART_SetConfig+0x282>
 8005580:	2304      	movs	r3, #4
 8005582:	76fb      	strb	r3, [r7, #27]
 8005584:	e007      	b.n	8005596 <UART_SetConfig+0x282>
 8005586:	2308      	movs	r3, #8
 8005588:	76fb      	strb	r3, [r7, #27]
 800558a:	e004      	b.n	8005596 <UART_SetConfig+0x282>
 800558c:	2310      	movs	r3, #16
 800558e:	76fb      	strb	r3, [r7, #27]
 8005590:	e001      	b.n	8005596 <UART_SetConfig+0x282>
 8005592:	2310      	movs	r3, #16
 8005594:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	4a17      	ldr	r2, [pc, #92]	; (80055f8 <UART_SetConfig+0x2e4>)
 800559c:	4293      	cmp	r3, r2
 800559e:	f040 8087 	bne.w	80056b0 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80055a2:	7efb      	ldrb	r3, [r7, #27]
 80055a4:	2b08      	cmp	r3, #8
 80055a6:	d837      	bhi.n	8005618 <UART_SetConfig+0x304>
 80055a8:	a201      	add	r2, pc, #4	; (adr r2, 80055b0 <UART_SetConfig+0x29c>)
 80055aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055ae:	bf00      	nop
 80055b0:	080055d5 	.word	0x080055d5
 80055b4:	08005619 	.word	0x08005619
 80055b8:	080055dd 	.word	0x080055dd
 80055bc:	08005619 	.word	0x08005619
 80055c0:	080055e3 	.word	0x080055e3
 80055c4:	08005619 	.word	0x08005619
 80055c8:	08005619 	.word	0x08005619
 80055cc:	08005619 	.word	0x08005619
 80055d0:	080055eb 	.word	0x080055eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80055d4:	f7fe f848 	bl	8003668 <HAL_RCC_GetPCLK1Freq>
 80055d8:	6178      	str	r0, [r7, #20]
        break;
 80055da:	e022      	b.n	8005622 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80055dc:	4b0d      	ldr	r3, [pc, #52]	; (8005614 <UART_SetConfig+0x300>)
 80055de:	617b      	str	r3, [r7, #20]
        break;
 80055e0:	e01f      	b.n	8005622 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80055e2:	f7fd ffa9 	bl	8003538 <HAL_RCC_GetSysClockFreq>
 80055e6:	6178      	str	r0, [r7, #20]
        break;
 80055e8:	e01b      	b.n	8005622 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80055ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80055ee:	617b      	str	r3, [r7, #20]
        break;
 80055f0:	e017      	b.n	8005622 <UART_SetConfig+0x30e>
 80055f2:	bf00      	nop
 80055f4:	efff69f3 	.word	0xefff69f3
 80055f8:	40008000 	.word	0x40008000
 80055fc:	40013800 	.word	0x40013800
 8005600:	40021000 	.word	0x40021000
 8005604:	40004400 	.word	0x40004400
 8005608:	40004800 	.word	0x40004800
 800560c:	40004c00 	.word	0x40004c00
 8005610:	40005000 	.word	0x40005000
 8005614:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8005618:	2300      	movs	r3, #0
 800561a:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800561c:	2301      	movs	r3, #1
 800561e:	76bb      	strb	r3, [r7, #26]
        break;
 8005620:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005622:	697b      	ldr	r3, [r7, #20]
 8005624:	2b00      	cmp	r3, #0
 8005626:	f000 80f1 	beq.w	800580c <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	685a      	ldr	r2, [r3, #4]
 800562e:	4613      	mov	r3, r2
 8005630:	005b      	lsls	r3, r3, #1
 8005632:	4413      	add	r3, r2
 8005634:	697a      	ldr	r2, [r7, #20]
 8005636:	429a      	cmp	r2, r3
 8005638:	d305      	bcc.n	8005646 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	685b      	ldr	r3, [r3, #4]
 800563e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005640:	697a      	ldr	r2, [r7, #20]
 8005642:	429a      	cmp	r2, r3
 8005644:	d902      	bls.n	800564c <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8005646:	2301      	movs	r3, #1
 8005648:	76bb      	strb	r3, [r7, #26]
 800564a:	e0df      	b.n	800580c <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800564c:	697b      	ldr	r3, [r7, #20]
 800564e:	4618      	mov	r0, r3
 8005650:	f04f 0100 	mov.w	r1, #0
 8005654:	f04f 0200 	mov.w	r2, #0
 8005658:	f04f 0300 	mov.w	r3, #0
 800565c:	020b      	lsls	r3, r1, #8
 800565e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005662:	0202      	lsls	r2, r0, #8
 8005664:	6879      	ldr	r1, [r7, #4]
 8005666:	6849      	ldr	r1, [r1, #4]
 8005668:	0849      	lsrs	r1, r1, #1
 800566a:	4608      	mov	r0, r1
 800566c:	f04f 0100 	mov.w	r1, #0
 8005670:	1814      	adds	r4, r2, r0
 8005672:	eb43 0501 	adc.w	r5, r3, r1
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	685b      	ldr	r3, [r3, #4]
 800567a:	461a      	mov	r2, r3
 800567c:	f04f 0300 	mov.w	r3, #0
 8005680:	4620      	mov	r0, r4
 8005682:	4629      	mov	r1, r5
 8005684:	f7fb fb00 	bl	8000c88 <__aeabi_uldivmod>
 8005688:	4602      	mov	r2, r0
 800568a:	460b      	mov	r3, r1
 800568c:	4613      	mov	r3, r2
 800568e:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005690:	693b      	ldr	r3, [r7, #16]
 8005692:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005696:	d308      	bcc.n	80056aa <UART_SetConfig+0x396>
 8005698:	693b      	ldr	r3, [r7, #16]
 800569a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800569e:	d204      	bcs.n	80056aa <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	693a      	ldr	r2, [r7, #16]
 80056a6:	60da      	str	r2, [r3, #12]
 80056a8:	e0b0      	b.n	800580c <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 80056aa:	2301      	movs	r3, #1
 80056ac:	76bb      	strb	r3, [r7, #26]
 80056ae:	e0ad      	b.n	800580c <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	69db      	ldr	r3, [r3, #28]
 80056b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80056b8:	d15c      	bne.n	8005774 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 80056ba:	7efb      	ldrb	r3, [r7, #27]
 80056bc:	2b08      	cmp	r3, #8
 80056be:	d828      	bhi.n	8005712 <UART_SetConfig+0x3fe>
 80056c0:	a201      	add	r2, pc, #4	; (adr r2, 80056c8 <UART_SetConfig+0x3b4>)
 80056c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056c6:	bf00      	nop
 80056c8:	080056ed 	.word	0x080056ed
 80056cc:	080056f5 	.word	0x080056f5
 80056d0:	080056fd 	.word	0x080056fd
 80056d4:	08005713 	.word	0x08005713
 80056d8:	08005703 	.word	0x08005703
 80056dc:	08005713 	.word	0x08005713
 80056e0:	08005713 	.word	0x08005713
 80056e4:	08005713 	.word	0x08005713
 80056e8:	0800570b 	.word	0x0800570b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80056ec:	f7fd ffbc 	bl	8003668 <HAL_RCC_GetPCLK1Freq>
 80056f0:	6178      	str	r0, [r7, #20]
        break;
 80056f2:	e013      	b.n	800571c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80056f4:	f7fd ffce 	bl	8003694 <HAL_RCC_GetPCLK2Freq>
 80056f8:	6178      	str	r0, [r7, #20]
        break;
 80056fa:	e00f      	b.n	800571c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80056fc:	4b49      	ldr	r3, [pc, #292]	; (8005824 <UART_SetConfig+0x510>)
 80056fe:	617b      	str	r3, [r7, #20]
        break;
 8005700:	e00c      	b.n	800571c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005702:	f7fd ff19 	bl	8003538 <HAL_RCC_GetSysClockFreq>
 8005706:	6178      	str	r0, [r7, #20]
        break;
 8005708:	e008      	b.n	800571c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800570a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800570e:	617b      	str	r3, [r7, #20]
        break;
 8005710:	e004      	b.n	800571c <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8005712:	2300      	movs	r3, #0
 8005714:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005716:	2301      	movs	r3, #1
 8005718:	76bb      	strb	r3, [r7, #26]
        break;
 800571a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800571c:	697b      	ldr	r3, [r7, #20]
 800571e:	2b00      	cmp	r3, #0
 8005720:	d074      	beq.n	800580c <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005722:	697b      	ldr	r3, [r7, #20]
 8005724:	005a      	lsls	r2, r3, #1
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	685b      	ldr	r3, [r3, #4]
 800572a:	085b      	lsrs	r3, r3, #1
 800572c:	441a      	add	r2, r3
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	685b      	ldr	r3, [r3, #4]
 8005732:	fbb2 f3f3 	udiv	r3, r2, r3
 8005736:	b29b      	uxth	r3, r3
 8005738:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800573a:	693b      	ldr	r3, [r7, #16]
 800573c:	2b0f      	cmp	r3, #15
 800573e:	d916      	bls.n	800576e <UART_SetConfig+0x45a>
 8005740:	693b      	ldr	r3, [r7, #16]
 8005742:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005746:	d212      	bcs.n	800576e <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005748:	693b      	ldr	r3, [r7, #16]
 800574a:	b29b      	uxth	r3, r3
 800574c:	f023 030f 	bic.w	r3, r3, #15
 8005750:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005752:	693b      	ldr	r3, [r7, #16]
 8005754:	085b      	lsrs	r3, r3, #1
 8005756:	b29b      	uxth	r3, r3
 8005758:	f003 0307 	and.w	r3, r3, #7
 800575c:	b29a      	uxth	r2, r3
 800575e:	89fb      	ldrh	r3, [r7, #14]
 8005760:	4313      	orrs	r3, r2
 8005762:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	89fa      	ldrh	r2, [r7, #14]
 800576a:	60da      	str	r2, [r3, #12]
 800576c:	e04e      	b.n	800580c <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 800576e:	2301      	movs	r3, #1
 8005770:	76bb      	strb	r3, [r7, #26]
 8005772:	e04b      	b.n	800580c <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005774:	7efb      	ldrb	r3, [r7, #27]
 8005776:	2b08      	cmp	r3, #8
 8005778:	d827      	bhi.n	80057ca <UART_SetConfig+0x4b6>
 800577a:	a201      	add	r2, pc, #4	; (adr r2, 8005780 <UART_SetConfig+0x46c>)
 800577c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005780:	080057a5 	.word	0x080057a5
 8005784:	080057ad 	.word	0x080057ad
 8005788:	080057b5 	.word	0x080057b5
 800578c:	080057cb 	.word	0x080057cb
 8005790:	080057bb 	.word	0x080057bb
 8005794:	080057cb 	.word	0x080057cb
 8005798:	080057cb 	.word	0x080057cb
 800579c:	080057cb 	.word	0x080057cb
 80057a0:	080057c3 	.word	0x080057c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80057a4:	f7fd ff60 	bl	8003668 <HAL_RCC_GetPCLK1Freq>
 80057a8:	6178      	str	r0, [r7, #20]
        break;
 80057aa:	e013      	b.n	80057d4 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80057ac:	f7fd ff72 	bl	8003694 <HAL_RCC_GetPCLK2Freq>
 80057b0:	6178      	str	r0, [r7, #20]
        break;
 80057b2:	e00f      	b.n	80057d4 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80057b4:	4b1b      	ldr	r3, [pc, #108]	; (8005824 <UART_SetConfig+0x510>)
 80057b6:	617b      	str	r3, [r7, #20]
        break;
 80057b8:	e00c      	b.n	80057d4 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80057ba:	f7fd febd 	bl	8003538 <HAL_RCC_GetSysClockFreq>
 80057be:	6178      	str	r0, [r7, #20]
        break;
 80057c0:	e008      	b.n	80057d4 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80057c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80057c6:	617b      	str	r3, [r7, #20]
        break;
 80057c8:	e004      	b.n	80057d4 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 80057ca:	2300      	movs	r3, #0
 80057cc:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80057ce:	2301      	movs	r3, #1
 80057d0:	76bb      	strb	r3, [r7, #26]
        break;
 80057d2:	bf00      	nop
    }

    if (pclk != 0U)
 80057d4:	697b      	ldr	r3, [r7, #20]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d018      	beq.n	800580c <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	685b      	ldr	r3, [r3, #4]
 80057de:	085a      	lsrs	r2, r3, #1
 80057e0:	697b      	ldr	r3, [r7, #20]
 80057e2:	441a      	add	r2, r3
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	685b      	ldr	r3, [r3, #4]
 80057e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80057ec:	b29b      	uxth	r3, r3
 80057ee:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80057f0:	693b      	ldr	r3, [r7, #16]
 80057f2:	2b0f      	cmp	r3, #15
 80057f4:	d908      	bls.n	8005808 <UART_SetConfig+0x4f4>
 80057f6:	693b      	ldr	r3, [r7, #16]
 80057f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80057fc:	d204      	bcs.n	8005808 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	693a      	ldr	r2, [r7, #16]
 8005804:	60da      	str	r2, [r3, #12]
 8005806:	e001      	b.n	800580c <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8005808:	2301      	movs	r3, #1
 800580a:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2200      	movs	r2, #0
 8005810:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	2200      	movs	r2, #0
 8005816:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005818:	7ebb      	ldrb	r3, [r7, #26]
}
 800581a:	4618      	mov	r0, r3
 800581c:	3720      	adds	r7, #32
 800581e:	46bd      	mov	sp, r7
 8005820:	bdb0      	pop	{r4, r5, r7, pc}
 8005822:	bf00      	nop
 8005824:	00f42400 	.word	0x00f42400

08005828 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005828:	b480      	push	{r7}
 800582a:	b083      	sub	sp, #12
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005834:	f003 0301 	and.w	r3, r3, #1
 8005838:	2b00      	cmp	r3, #0
 800583a:	d00a      	beq.n	8005852 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	685b      	ldr	r3, [r3, #4]
 8005842:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	430a      	orrs	r2, r1
 8005850:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005856:	f003 0302 	and.w	r3, r3, #2
 800585a:	2b00      	cmp	r3, #0
 800585c:	d00a      	beq.n	8005874 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	685b      	ldr	r3, [r3, #4]
 8005864:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	430a      	orrs	r2, r1
 8005872:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005878:	f003 0304 	and.w	r3, r3, #4
 800587c:	2b00      	cmp	r3, #0
 800587e:	d00a      	beq.n	8005896 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	685b      	ldr	r3, [r3, #4]
 8005886:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	430a      	orrs	r2, r1
 8005894:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800589a:	f003 0308 	and.w	r3, r3, #8
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d00a      	beq.n	80058b8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	685b      	ldr	r3, [r3, #4]
 80058a8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	430a      	orrs	r2, r1
 80058b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058bc:	f003 0310 	and.w	r3, r3, #16
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d00a      	beq.n	80058da <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	689b      	ldr	r3, [r3, #8]
 80058ca:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	430a      	orrs	r2, r1
 80058d8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058de:	f003 0320 	and.w	r3, r3, #32
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d00a      	beq.n	80058fc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	689b      	ldr	r3, [r3, #8]
 80058ec:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	430a      	orrs	r2, r1
 80058fa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005900:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005904:	2b00      	cmp	r3, #0
 8005906:	d01a      	beq.n	800593e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	685b      	ldr	r3, [r3, #4]
 800590e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	430a      	orrs	r2, r1
 800591c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005922:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005926:	d10a      	bne.n	800593e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	685b      	ldr	r3, [r3, #4]
 800592e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	430a      	orrs	r2, r1
 800593c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005942:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005946:	2b00      	cmp	r3, #0
 8005948:	d00a      	beq.n	8005960 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	685b      	ldr	r3, [r3, #4]
 8005950:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	430a      	orrs	r2, r1
 800595e:	605a      	str	r2, [r3, #4]
  }
}
 8005960:	bf00      	nop
 8005962:	370c      	adds	r7, #12
 8005964:	46bd      	mov	sp, r7
 8005966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596a:	4770      	bx	lr

0800596c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800596c:	b580      	push	{r7, lr}
 800596e:	b086      	sub	sp, #24
 8005970:	af02      	add	r7, sp, #8
 8005972:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2200      	movs	r2, #0
 8005978:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800597c:	f7fc fd6c 	bl	8002458 <HAL_GetTick>
 8005980:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f003 0308 	and.w	r3, r3, #8
 800598c:	2b08      	cmp	r3, #8
 800598e:	d10e      	bne.n	80059ae <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005990:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005994:	9300      	str	r3, [sp, #0]
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	2200      	movs	r2, #0
 800599a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800599e:	6878      	ldr	r0, [r7, #4]
 80059a0:	f000 f82d 	bl	80059fe <UART_WaitOnFlagUntilTimeout>
 80059a4:	4603      	mov	r3, r0
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d001      	beq.n	80059ae <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80059aa:	2303      	movs	r3, #3
 80059ac:	e023      	b.n	80059f6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f003 0304 	and.w	r3, r3, #4
 80059b8:	2b04      	cmp	r3, #4
 80059ba:	d10e      	bne.n	80059da <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80059bc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80059c0:	9300      	str	r3, [sp, #0]
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	2200      	movs	r2, #0
 80059c6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80059ca:	6878      	ldr	r0, [r7, #4]
 80059cc:	f000 f817 	bl	80059fe <UART_WaitOnFlagUntilTimeout>
 80059d0:	4603      	mov	r3, r0
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d001      	beq.n	80059da <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80059d6:	2303      	movs	r3, #3
 80059d8:	e00d      	b.n	80059f6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	2220      	movs	r2, #32
 80059de:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2220      	movs	r2, #32
 80059e4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	2200      	movs	r2, #0
 80059ea:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	2200      	movs	r2, #0
 80059f0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80059f4:	2300      	movs	r3, #0
}
 80059f6:	4618      	mov	r0, r3
 80059f8:	3710      	adds	r7, #16
 80059fa:	46bd      	mov	sp, r7
 80059fc:	bd80      	pop	{r7, pc}

080059fe <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80059fe:	b580      	push	{r7, lr}
 8005a00:	b084      	sub	sp, #16
 8005a02:	af00      	add	r7, sp, #0
 8005a04:	60f8      	str	r0, [r7, #12]
 8005a06:	60b9      	str	r1, [r7, #8]
 8005a08:	603b      	str	r3, [r7, #0]
 8005a0a:	4613      	mov	r3, r2
 8005a0c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a0e:	e05e      	b.n	8005ace <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a10:	69bb      	ldr	r3, [r7, #24]
 8005a12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a16:	d05a      	beq.n	8005ace <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a18:	f7fc fd1e 	bl	8002458 <HAL_GetTick>
 8005a1c:	4602      	mov	r2, r0
 8005a1e:	683b      	ldr	r3, [r7, #0]
 8005a20:	1ad3      	subs	r3, r2, r3
 8005a22:	69ba      	ldr	r2, [r7, #24]
 8005a24:	429a      	cmp	r2, r3
 8005a26:	d302      	bcc.n	8005a2e <UART_WaitOnFlagUntilTimeout+0x30>
 8005a28:	69bb      	ldr	r3, [r7, #24]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d11b      	bne.n	8005a66 <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	681a      	ldr	r2, [r3, #0]
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005a3c:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	689a      	ldr	r2, [r3, #8]
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f022 0201 	bic.w	r2, r2, #1
 8005a4c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	2220      	movs	r2, #32
 8005a52:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	2220      	movs	r2, #32
 8005a58:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8005a62:	2303      	movs	r3, #3
 8005a64:	e043      	b.n	8005aee <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f003 0304 	and.w	r3, r3, #4
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d02c      	beq.n	8005ace <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	69db      	ldr	r3, [r3, #28]
 8005a7a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a7e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a82:	d124      	bne.n	8005ace <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005a8c:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	681a      	ldr	r2, [r3, #0]
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005a9c:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	689a      	ldr	r2, [r3, #8]
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	f022 0201 	bic.w	r2, r2, #1
 8005aac:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	2220      	movs	r2, #32
 8005ab2:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	2220      	movs	r2, #32
 8005ab8:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	2220      	movs	r2, #32
 8005abe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005aca:	2303      	movs	r3, #3
 8005acc:	e00f      	b.n	8005aee <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	69da      	ldr	r2, [r3, #28]
 8005ad4:	68bb      	ldr	r3, [r7, #8]
 8005ad6:	4013      	ands	r3, r2
 8005ad8:	68ba      	ldr	r2, [r7, #8]
 8005ada:	429a      	cmp	r2, r3
 8005adc:	bf0c      	ite	eq
 8005ade:	2301      	moveq	r3, #1
 8005ae0:	2300      	movne	r3, #0
 8005ae2:	b2db      	uxtb	r3, r3
 8005ae4:	461a      	mov	r2, r3
 8005ae6:	79fb      	ldrb	r3, [r7, #7]
 8005ae8:	429a      	cmp	r2, r3
 8005aea:	d091      	beq.n	8005a10 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005aec:	2300      	movs	r3, #0
}
 8005aee:	4618      	mov	r0, r3
 8005af0:	3710      	adds	r7, #16
 8005af2:	46bd      	mov	sp, r7
 8005af4:	bd80      	pop	{r7, pc}
	...

08005af8 <__errno>:
 8005af8:	4b01      	ldr	r3, [pc, #4]	; (8005b00 <__errno+0x8>)
 8005afa:	6818      	ldr	r0, [r3, #0]
 8005afc:	4770      	bx	lr
 8005afe:	bf00      	nop
 8005b00:	2000001c 	.word	0x2000001c

08005b04 <__libc_init_array>:
 8005b04:	b570      	push	{r4, r5, r6, lr}
 8005b06:	4d0d      	ldr	r5, [pc, #52]	; (8005b3c <__libc_init_array+0x38>)
 8005b08:	4c0d      	ldr	r4, [pc, #52]	; (8005b40 <__libc_init_array+0x3c>)
 8005b0a:	1b64      	subs	r4, r4, r5
 8005b0c:	10a4      	asrs	r4, r4, #2
 8005b0e:	2600      	movs	r6, #0
 8005b10:	42a6      	cmp	r6, r4
 8005b12:	d109      	bne.n	8005b28 <__libc_init_array+0x24>
 8005b14:	4d0b      	ldr	r5, [pc, #44]	; (8005b44 <__libc_init_array+0x40>)
 8005b16:	4c0c      	ldr	r4, [pc, #48]	; (8005b48 <__libc_init_array+0x44>)
 8005b18:	f004 fc46 	bl	800a3a8 <_init>
 8005b1c:	1b64      	subs	r4, r4, r5
 8005b1e:	10a4      	asrs	r4, r4, #2
 8005b20:	2600      	movs	r6, #0
 8005b22:	42a6      	cmp	r6, r4
 8005b24:	d105      	bne.n	8005b32 <__libc_init_array+0x2e>
 8005b26:	bd70      	pop	{r4, r5, r6, pc}
 8005b28:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b2c:	4798      	blx	r3
 8005b2e:	3601      	adds	r6, #1
 8005b30:	e7ee      	b.n	8005b10 <__libc_init_array+0xc>
 8005b32:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b36:	4798      	blx	r3
 8005b38:	3601      	adds	r6, #1
 8005b3a:	e7f2      	b.n	8005b22 <__libc_init_array+0x1e>
 8005b3c:	0800becc 	.word	0x0800becc
 8005b40:	0800becc 	.word	0x0800becc
 8005b44:	0800becc 	.word	0x0800becc
 8005b48:	0800bed0 	.word	0x0800bed0

08005b4c <memset>:
 8005b4c:	4402      	add	r2, r0
 8005b4e:	4603      	mov	r3, r0
 8005b50:	4293      	cmp	r3, r2
 8005b52:	d100      	bne.n	8005b56 <memset+0xa>
 8005b54:	4770      	bx	lr
 8005b56:	f803 1b01 	strb.w	r1, [r3], #1
 8005b5a:	e7f9      	b.n	8005b50 <memset+0x4>

08005b5c <__cvt>:
 8005b5c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005b60:	ec55 4b10 	vmov	r4, r5, d0
 8005b64:	2d00      	cmp	r5, #0
 8005b66:	460e      	mov	r6, r1
 8005b68:	4619      	mov	r1, r3
 8005b6a:	462b      	mov	r3, r5
 8005b6c:	bfbb      	ittet	lt
 8005b6e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005b72:	461d      	movlt	r5, r3
 8005b74:	2300      	movge	r3, #0
 8005b76:	232d      	movlt	r3, #45	; 0x2d
 8005b78:	700b      	strb	r3, [r1, #0]
 8005b7a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005b7c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005b80:	4691      	mov	r9, r2
 8005b82:	f023 0820 	bic.w	r8, r3, #32
 8005b86:	bfbc      	itt	lt
 8005b88:	4622      	movlt	r2, r4
 8005b8a:	4614      	movlt	r4, r2
 8005b8c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005b90:	d005      	beq.n	8005b9e <__cvt+0x42>
 8005b92:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005b96:	d100      	bne.n	8005b9a <__cvt+0x3e>
 8005b98:	3601      	adds	r6, #1
 8005b9a:	2102      	movs	r1, #2
 8005b9c:	e000      	b.n	8005ba0 <__cvt+0x44>
 8005b9e:	2103      	movs	r1, #3
 8005ba0:	ab03      	add	r3, sp, #12
 8005ba2:	9301      	str	r3, [sp, #4]
 8005ba4:	ab02      	add	r3, sp, #8
 8005ba6:	9300      	str	r3, [sp, #0]
 8005ba8:	ec45 4b10 	vmov	d0, r4, r5
 8005bac:	4653      	mov	r3, sl
 8005bae:	4632      	mov	r2, r6
 8005bb0:	f001 fdb6 	bl	8007720 <_dtoa_r>
 8005bb4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005bb8:	4607      	mov	r7, r0
 8005bba:	d102      	bne.n	8005bc2 <__cvt+0x66>
 8005bbc:	f019 0f01 	tst.w	r9, #1
 8005bc0:	d022      	beq.n	8005c08 <__cvt+0xac>
 8005bc2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005bc6:	eb07 0906 	add.w	r9, r7, r6
 8005bca:	d110      	bne.n	8005bee <__cvt+0x92>
 8005bcc:	783b      	ldrb	r3, [r7, #0]
 8005bce:	2b30      	cmp	r3, #48	; 0x30
 8005bd0:	d10a      	bne.n	8005be8 <__cvt+0x8c>
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	2300      	movs	r3, #0
 8005bd6:	4620      	mov	r0, r4
 8005bd8:	4629      	mov	r1, r5
 8005bda:	f7fa ff75 	bl	8000ac8 <__aeabi_dcmpeq>
 8005bde:	b918      	cbnz	r0, 8005be8 <__cvt+0x8c>
 8005be0:	f1c6 0601 	rsb	r6, r6, #1
 8005be4:	f8ca 6000 	str.w	r6, [sl]
 8005be8:	f8da 3000 	ldr.w	r3, [sl]
 8005bec:	4499      	add	r9, r3
 8005bee:	2200      	movs	r2, #0
 8005bf0:	2300      	movs	r3, #0
 8005bf2:	4620      	mov	r0, r4
 8005bf4:	4629      	mov	r1, r5
 8005bf6:	f7fa ff67 	bl	8000ac8 <__aeabi_dcmpeq>
 8005bfa:	b108      	cbz	r0, 8005c00 <__cvt+0xa4>
 8005bfc:	f8cd 900c 	str.w	r9, [sp, #12]
 8005c00:	2230      	movs	r2, #48	; 0x30
 8005c02:	9b03      	ldr	r3, [sp, #12]
 8005c04:	454b      	cmp	r3, r9
 8005c06:	d307      	bcc.n	8005c18 <__cvt+0xbc>
 8005c08:	9b03      	ldr	r3, [sp, #12]
 8005c0a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005c0c:	1bdb      	subs	r3, r3, r7
 8005c0e:	4638      	mov	r0, r7
 8005c10:	6013      	str	r3, [r2, #0]
 8005c12:	b004      	add	sp, #16
 8005c14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c18:	1c59      	adds	r1, r3, #1
 8005c1a:	9103      	str	r1, [sp, #12]
 8005c1c:	701a      	strb	r2, [r3, #0]
 8005c1e:	e7f0      	b.n	8005c02 <__cvt+0xa6>

08005c20 <__exponent>:
 8005c20:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005c22:	4603      	mov	r3, r0
 8005c24:	2900      	cmp	r1, #0
 8005c26:	bfb8      	it	lt
 8005c28:	4249      	neglt	r1, r1
 8005c2a:	f803 2b02 	strb.w	r2, [r3], #2
 8005c2e:	bfb4      	ite	lt
 8005c30:	222d      	movlt	r2, #45	; 0x2d
 8005c32:	222b      	movge	r2, #43	; 0x2b
 8005c34:	2909      	cmp	r1, #9
 8005c36:	7042      	strb	r2, [r0, #1]
 8005c38:	dd2a      	ble.n	8005c90 <__exponent+0x70>
 8005c3a:	f10d 0407 	add.w	r4, sp, #7
 8005c3e:	46a4      	mov	ip, r4
 8005c40:	270a      	movs	r7, #10
 8005c42:	46a6      	mov	lr, r4
 8005c44:	460a      	mov	r2, r1
 8005c46:	fb91 f6f7 	sdiv	r6, r1, r7
 8005c4a:	fb07 1516 	mls	r5, r7, r6, r1
 8005c4e:	3530      	adds	r5, #48	; 0x30
 8005c50:	2a63      	cmp	r2, #99	; 0x63
 8005c52:	f104 34ff 	add.w	r4, r4, #4294967295
 8005c56:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8005c5a:	4631      	mov	r1, r6
 8005c5c:	dcf1      	bgt.n	8005c42 <__exponent+0x22>
 8005c5e:	3130      	adds	r1, #48	; 0x30
 8005c60:	f1ae 0502 	sub.w	r5, lr, #2
 8005c64:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005c68:	1c44      	adds	r4, r0, #1
 8005c6a:	4629      	mov	r1, r5
 8005c6c:	4561      	cmp	r1, ip
 8005c6e:	d30a      	bcc.n	8005c86 <__exponent+0x66>
 8005c70:	f10d 0209 	add.w	r2, sp, #9
 8005c74:	eba2 020e 	sub.w	r2, r2, lr
 8005c78:	4565      	cmp	r5, ip
 8005c7a:	bf88      	it	hi
 8005c7c:	2200      	movhi	r2, #0
 8005c7e:	4413      	add	r3, r2
 8005c80:	1a18      	subs	r0, r3, r0
 8005c82:	b003      	add	sp, #12
 8005c84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005c86:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005c8a:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005c8e:	e7ed      	b.n	8005c6c <__exponent+0x4c>
 8005c90:	2330      	movs	r3, #48	; 0x30
 8005c92:	3130      	adds	r1, #48	; 0x30
 8005c94:	7083      	strb	r3, [r0, #2]
 8005c96:	70c1      	strb	r1, [r0, #3]
 8005c98:	1d03      	adds	r3, r0, #4
 8005c9a:	e7f1      	b.n	8005c80 <__exponent+0x60>

08005c9c <_printf_float>:
 8005c9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ca0:	ed2d 8b02 	vpush	{d8}
 8005ca4:	b08d      	sub	sp, #52	; 0x34
 8005ca6:	460c      	mov	r4, r1
 8005ca8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005cac:	4616      	mov	r6, r2
 8005cae:	461f      	mov	r7, r3
 8005cb0:	4605      	mov	r5, r0
 8005cb2:	f002 fe91 	bl	80089d8 <_localeconv_r>
 8005cb6:	f8d0 a000 	ldr.w	sl, [r0]
 8005cba:	4650      	mov	r0, sl
 8005cbc:	f7fa fa88 	bl	80001d0 <strlen>
 8005cc0:	2300      	movs	r3, #0
 8005cc2:	930a      	str	r3, [sp, #40]	; 0x28
 8005cc4:	6823      	ldr	r3, [r4, #0]
 8005cc6:	9305      	str	r3, [sp, #20]
 8005cc8:	f8d8 3000 	ldr.w	r3, [r8]
 8005ccc:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005cd0:	3307      	adds	r3, #7
 8005cd2:	f023 0307 	bic.w	r3, r3, #7
 8005cd6:	f103 0208 	add.w	r2, r3, #8
 8005cda:	f8c8 2000 	str.w	r2, [r8]
 8005cde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ce2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005ce6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8005cea:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005cee:	9307      	str	r3, [sp, #28]
 8005cf0:	f8cd 8018 	str.w	r8, [sp, #24]
 8005cf4:	ee08 0a10 	vmov	s16, r0
 8005cf8:	4b9f      	ldr	r3, [pc, #636]	; (8005f78 <_printf_float+0x2dc>)
 8005cfa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005cfe:	f04f 32ff 	mov.w	r2, #4294967295
 8005d02:	f7fa ff13 	bl	8000b2c <__aeabi_dcmpun>
 8005d06:	bb88      	cbnz	r0, 8005d6c <_printf_float+0xd0>
 8005d08:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005d0c:	4b9a      	ldr	r3, [pc, #616]	; (8005f78 <_printf_float+0x2dc>)
 8005d0e:	f04f 32ff 	mov.w	r2, #4294967295
 8005d12:	f7fa feed 	bl	8000af0 <__aeabi_dcmple>
 8005d16:	bb48      	cbnz	r0, 8005d6c <_printf_float+0xd0>
 8005d18:	2200      	movs	r2, #0
 8005d1a:	2300      	movs	r3, #0
 8005d1c:	4640      	mov	r0, r8
 8005d1e:	4649      	mov	r1, r9
 8005d20:	f7fa fedc 	bl	8000adc <__aeabi_dcmplt>
 8005d24:	b110      	cbz	r0, 8005d2c <_printf_float+0x90>
 8005d26:	232d      	movs	r3, #45	; 0x2d
 8005d28:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005d2c:	4b93      	ldr	r3, [pc, #588]	; (8005f7c <_printf_float+0x2e0>)
 8005d2e:	4894      	ldr	r0, [pc, #592]	; (8005f80 <_printf_float+0x2e4>)
 8005d30:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005d34:	bf94      	ite	ls
 8005d36:	4698      	movls	r8, r3
 8005d38:	4680      	movhi	r8, r0
 8005d3a:	2303      	movs	r3, #3
 8005d3c:	6123      	str	r3, [r4, #16]
 8005d3e:	9b05      	ldr	r3, [sp, #20]
 8005d40:	f023 0204 	bic.w	r2, r3, #4
 8005d44:	6022      	str	r2, [r4, #0]
 8005d46:	f04f 0900 	mov.w	r9, #0
 8005d4a:	9700      	str	r7, [sp, #0]
 8005d4c:	4633      	mov	r3, r6
 8005d4e:	aa0b      	add	r2, sp, #44	; 0x2c
 8005d50:	4621      	mov	r1, r4
 8005d52:	4628      	mov	r0, r5
 8005d54:	f000 f9d8 	bl	8006108 <_printf_common>
 8005d58:	3001      	adds	r0, #1
 8005d5a:	f040 8090 	bne.w	8005e7e <_printf_float+0x1e2>
 8005d5e:	f04f 30ff 	mov.w	r0, #4294967295
 8005d62:	b00d      	add	sp, #52	; 0x34
 8005d64:	ecbd 8b02 	vpop	{d8}
 8005d68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d6c:	4642      	mov	r2, r8
 8005d6e:	464b      	mov	r3, r9
 8005d70:	4640      	mov	r0, r8
 8005d72:	4649      	mov	r1, r9
 8005d74:	f7fa feda 	bl	8000b2c <__aeabi_dcmpun>
 8005d78:	b140      	cbz	r0, 8005d8c <_printf_float+0xf0>
 8005d7a:	464b      	mov	r3, r9
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	bfbc      	itt	lt
 8005d80:	232d      	movlt	r3, #45	; 0x2d
 8005d82:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005d86:	487f      	ldr	r0, [pc, #508]	; (8005f84 <_printf_float+0x2e8>)
 8005d88:	4b7f      	ldr	r3, [pc, #508]	; (8005f88 <_printf_float+0x2ec>)
 8005d8a:	e7d1      	b.n	8005d30 <_printf_float+0x94>
 8005d8c:	6863      	ldr	r3, [r4, #4]
 8005d8e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8005d92:	9206      	str	r2, [sp, #24]
 8005d94:	1c5a      	adds	r2, r3, #1
 8005d96:	d13f      	bne.n	8005e18 <_printf_float+0x17c>
 8005d98:	2306      	movs	r3, #6
 8005d9a:	6063      	str	r3, [r4, #4]
 8005d9c:	9b05      	ldr	r3, [sp, #20]
 8005d9e:	6861      	ldr	r1, [r4, #4]
 8005da0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005da4:	2300      	movs	r3, #0
 8005da6:	9303      	str	r3, [sp, #12]
 8005da8:	ab0a      	add	r3, sp, #40	; 0x28
 8005daa:	e9cd b301 	strd	fp, r3, [sp, #4]
 8005dae:	ab09      	add	r3, sp, #36	; 0x24
 8005db0:	ec49 8b10 	vmov	d0, r8, r9
 8005db4:	9300      	str	r3, [sp, #0]
 8005db6:	6022      	str	r2, [r4, #0]
 8005db8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005dbc:	4628      	mov	r0, r5
 8005dbe:	f7ff fecd 	bl	8005b5c <__cvt>
 8005dc2:	9b06      	ldr	r3, [sp, #24]
 8005dc4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005dc6:	2b47      	cmp	r3, #71	; 0x47
 8005dc8:	4680      	mov	r8, r0
 8005dca:	d108      	bne.n	8005dde <_printf_float+0x142>
 8005dcc:	1cc8      	adds	r0, r1, #3
 8005dce:	db02      	blt.n	8005dd6 <_printf_float+0x13a>
 8005dd0:	6863      	ldr	r3, [r4, #4]
 8005dd2:	4299      	cmp	r1, r3
 8005dd4:	dd41      	ble.n	8005e5a <_printf_float+0x1be>
 8005dd6:	f1ab 0b02 	sub.w	fp, fp, #2
 8005dda:	fa5f fb8b 	uxtb.w	fp, fp
 8005dde:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005de2:	d820      	bhi.n	8005e26 <_printf_float+0x18a>
 8005de4:	3901      	subs	r1, #1
 8005de6:	465a      	mov	r2, fp
 8005de8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005dec:	9109      	str	r1, [sp, #36]	; 0x24
 8005dee:	f7ff ff17 	bl	8005c20 <__exponent>
 8005df2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005df4:	1813      	adds	r3, r2, r0
 8005df6:	2a01      	cmp	r2, #1
 8005df8:	4681      	mov	r9, r0
 8005dfa:	6123      	str	r3, [r4, #16]
 8005dfc:	dc02      	bgt.n	8005e04 <_printf_float+0x168>
 8005dfe:	6822      	ldr	r2, [r4, #0]
 8005e00:	07d2      	lsls	r2, r2, #31
 8005e02:	d501      	bpl.n	8005e08 <_printf_float+0x16c>
 8005e04:	3301      	adds	r3, #1
 8005e06:	6123      	str	r3, [r4, #16]
 8005e08:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d09c      	beq.n	8005d4a <_printf_float+0xae>
 8005e10:	232d      	movs	r3, #45	; 0x2d
 8005e12:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005e16:	e798      	b.n	8005d4a <_printf_float+0xae>
 8005e18:	9a06      	ldr	r2, [sp, #24]
 8005e1a:	2a47      	cmp	r2, #71	; 0x47
 8005e1c:	d1be      	bne.n	8005d9c <_printf_float+0x100>
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d1bc      	bne.n	8005d9c <_printf_float+0x100>
 8005e22:	2301      	movs	r3, #1
 8005e24:	e7b9      	b.n	8005d9a <_printf_float+0xfe>
 8005e26:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005e2a:	d118      	bne.n	8005e5e <_printf_float+0x1c2>
 8005e2c:	2900      	cmp	r1, #0
 8005e2e:	6863      	ldr	r3, [r4, #4]
 8005e30:	dd0b      	ble.n	8005e4a <_printf_float+0x1ae>
 8005e32:	6121      	str	r1, [r4, #16]
 8005e34:	b913      	cbnz	r3, 8005e3c <_printf_float+0x1a0>
 8005e36:	6822      	ldr	r2, [r4, #0]
 8005e38:	07d0      	lsls	r0, r2, #31
 8005e3a:	d502      	bpl.n	8005e42 <_printf_float+0x1a6>
 8005e3c:	3301      	adds	r3, #1
 8005e3e:	440b      	add	r3, r1
 8005e40:	6123      	str	r3, [r4, #16]
 8005e42:	65a1      	str	r1, [r4, #88]	; 0x58
 8005e44:	f04f 0900 	mov.w	r9, #0
 8005e48:	e7de      	b.n	8005e08 <_printf_float+0x16c>
 8005e4a:	b913      	cbnz	r3, 8005e52 <_printf_float+0x1b6>
 8005e4c:	6822      	ldr	r2, [r4, #0]
 8005e4e:	07d2      	lsls	r2, r2, #31
 8005e50:	d501      	bpl.n	8005e56 <_printf_float+0x1ba>
 8005e52:	3302      	adds	r3, #2
 8005e54:	e7f4      	b.n	8005e40 <_printf_float+0x1a4>
 8005e56:	2301      	movs	r3, #1
 8005e58:	e7f2      	b.n	8005e40 <_printf_float+0x1a4>
 8005e5a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005e5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005e60:	4299      	cmp	r1, r3
 8005e62:	db05      	blt.n	8005e70 <_printf_float+0x1d4>
 8005e64:	6823      	ldr	r3, [r4, #0]
 8005e66:	6121      	str	r1, [r4, #16]
 8005e68:	07d8      	lsls	r0, r3, #31
 8005e6a:	d5ea      	bpl.n	8005e42 <_printf_float+0x1a6>
 8005e6c:	1c4b      	adds	r3, r1, #1
 8005e6e:	e7e7      	b.n	8005e40 <_printf_float+0x1a4>
 8005e70:	2900      	cmp	r1, #0
 8005e72:	bfd4      	ite	le
 8005e74:	f1c1 0202 	rsble	r2, r1, #2
 8005e78:	2201      	movgt	r2, #1
 8005e7a:	4413      	add	r3, r2
 8005e7c:	e7e0      	b.n	8005e40 <_printf_float+0x1a4>
 8005e7e:	6823      	ldr	r3, [r4, #0]
 8005e80:	055a      	lsls	r2, r3, #21
 8005e82:	d407      	bmi.n	8005e94 <_printf_float+0x1f8>
 8005e84:	6923      	ldr	r3, [r4, #16]
 8005e86:	4642      	mov	r2, r8
 8005e88:	4631      	mov	r1, r6
 8005e8a:	4628      	mov	r0, r5
 8005e8c:	47b8      	blx	r7
 8005e8e:	3001      	adds	r0, #1
 8005e90:	d12c      	bne.n	8005eec <_printf_float+0x250>
 8005e92:	e764      	b.n	8005d5e <_printf_float+0xc2>
 8005e94:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005e98:	f240 80e0 	bls.w	800605c <_printf_float+0x3c0>
 8005e9c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	2300      	movs	r3, #0
 8005ea4:	f7fa fe10 	bl	8000ac8 <__aeabi_dcmpeq>
 8005ea8:	2800      	cmp	r0, #0
 8005eaa:	d034      	beq.n	8005f16 <_printf_float+0x27a>
 8005eac:	4a37      	ldr	r2, [pc, #220]	; (8005f8c <_printf_float+0x2f0>)
 8005eae:	2301      	movs	r3, #1
 8005eb0:	4631      	mov	r1, r6
 8005eb2:	4628      	mov	r0, r5
 8005eb4:	47b8      	blx	r7
 8005eb6:	3001      	adds	r0, #1
 8005eb8:	f43f af51 	beq.w	8005d5e <_printf_float+0xc2>
 8005ebc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005ec0:	429a      	cmp	r2, r3
 8005ec2:	db02      	blt.n	8005eca <_printf_float+0x22e>
 8005ec4:	6823      	ldr	r3, [r4, #0]
 8005ec6:	07d8      	lsls	r0, r3, #31
 8005ec8:	d510      	bpl.n	8005eec <_printf_float+0x250>
 8005eca:	ee18 3a10 	vmov	r3, s16
 8005ece:	4652      	mov	r2, sl
 8005ed0:	4631      	mov	r1, r6
 8005ed2:	4628      	mov	r0, r5
 8005ed4:	47b8      	blx	r7
 8005ed6:	3001      	adds	r0, #1
 8005ed8:	f43f af41 	beq.w	8005d5e <_printf_float+0xc2>
 8005edc:	f04f 0800 	mov.w	r8, #0
 8005ee0:	f104 091a 	add.w	r9, r4, #26
 8005ee4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005ee6:	3b01      	subs	r3, #1
 8005ee8:	4543      	cmp	r3, r8
 8005eea:	dc09      	bgt.n	8005f00 <_printf_float+0x264>
 8005eec:	6823      	ldr	r3, [r4, #0]
 8005eee:	079b      	lsls	r3, r3, #30
 8005ef0:	f100 8105 	bmi.w	80060fe <_printf_float+0x462>
 8005ef4:	68e0      	ldr	r0, [r4, #12]
 8005ef6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005ef8:	4298      	cmp	r0, r3
 8005efa:	bfb8      	it	lt
 8005efc:	4618      	movlt	r0, r3
 8005efe:	e730      	b.n	8005d62 <_printf_float+0xc6>
 8005f00:	2301      	movs	r3, #1
 8005f02:	464a      	mov	r2, r9
 8005f04:	4631      	mov	r1, r6
 8005f06:	4628      	mov	r0, r5
 8005f08:	47b8      	blx	r7
 8005f0a:	3001      	adds	r0, #1
 8005f0c:	f43f af27 	beq.w	8005d5e <_printf_float+0xc2>
 8005f10:	f108 0801 	add.w	r8, r8, #1
 8005f14:	e7e6      	b.n	8005ee4 <_printf_float+0x248>
 8005f16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	dc39      	bgt.n	8005f90 <_printf_float+0x2f4>
 8005f1c:	4a1b      	ldr	r2, [pc, #108]	; (8005f8c <_printf_float+0x2f0>)
 8005f1e:	2301      	movs	r3, #1
 8005f20:	4631      	mov	r1, r6
 8005f22:	4628      	mov	r0, r5
 8005f24:	47b8      	blx	r7
 8005f26:	3001      	adds	r0, #1
 8005f28:	f43f af19 	beq.w	8005d5e <_printf_float+0xc2>
 8005f2c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005f30:	4313      	orrs	r3, r2
 8005f32:	d102      	bne.n	8005f3a <_printf_float+0x29e>
 8005f34:	6823      	ldr	r3, [r4, #0]
 8005f36:	07d9      	lsls	r1, r3, #31
 8005f38:	d5d8      	bpl.n	8005eec <_printf_float+0x250>
 8005f3a:	ee18 3a10 	vmov	r3, s16
 8005f3e:	4652      	mov	r2, sl
 8005f40:	4631      	mov	r1, r6
 8005f42:	4628      	mov	r0, r5
 8005f44:	47b8      	blx	r7
 8005f46:	3001      	adds	r0, #1
 8005f48:	f43f af09 	beq.w	8005d5e <_printf_float+0xc2>
 8005f4c:	f04f 0900 	mov.w	r9, #0
 8005f50:	f104 0a1a 	add.w	sl, r4, #26
 8005f54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f56:	425b      	negs	r3, r3
 8005f58:	454b      	cmp	r3, r9
 8005f5a:	dc01      	bgt.n	8005f60 <_printf_float+0x2c4>
 8005f5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005f5e:	e792      	b.n	8005e86 <_printf_float+0x1ea>
 8005f60:	2301      	movs	r3, #1
 8005f62:	4652      	mov	r2, sl
 8005f64:	4631      	mov	r1, r6
 8005f66:	4628      	mov	r0, r5
 8005f68:	47b8      	blx	r7
 8005f6a:	3001      	adds	r0, #1
 8005f6c:	f43f aef7 	beq.w	8005d5e <_printf_float+0xc2>
 8005f70:	f109 0901 	add.w	r9, r9, #1
 8005f74:	e7ee      	b.n	8005f54 <_printf_float+0x2b8>
 8005f76:	bf00      	nop
 8005f78:	7fefffff 	.word	0x7fefffff
 8005f7c:	0800ba10 	.word	0x0800ba10
 8005f80:	0800ba14 	.word	0x0800ba14
 8005f84:	0800ba1c 	.word	0x0800ba1c
 8005f88:	0800ba18 	.word	0x0800ba18
 8005f8c:	0800ba20 	.word	0x0800ba20
 8005f90:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005f92:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005f94:	429a      	cmp	r2, r3
 8005f96:	bfa8      	it	ge
 8005f98:	461a      	movge	r2, r3
 8005f9a:	2a00      	cmp	r2, #0
 8005f9c:	4691      	mov	r9, r2
 8005f9e:	dc37      	bgt.n	8006010 <_printf_float+0x374>
 8005fa0:	f04f 0b00 	mov.w	fp, #0
 8005fa4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005fa8:	f104 021a 	add.w	r2, r4, #26
 8005fac:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005fae:	9305      	str	r3, [sp, #20]
 8005fb0:	eba3 0309 	sub.w	r3, r3, r9
 8005fb4:	455b      	cmp	r3, fp
 8005fb6:	dc33      	bgt.n	8006020 <_printf_float+0x384>
 8005fb8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005fbc:	429a      	cmp	r2, r3
 8005fbe:	db3b      	blt.n	8006038 <_printf_float+0x39c>
 8005fc0:	6823      	ldr	r3, [r4, #0]
 8005fc2:	07da      	lsls	r2, r3, #31
 8005fc4:	d438      	bmi.n	8006038 <_printf_float+0x39c>
 8005fc6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005fc8:	9b05      	ldr	r3, [sp, #20]
 8005fca:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005fcc:	1ad3      	subs	r3, r2, r3
 8005fce:	eba2 0901 	sub.w	r9, r2, r1
 8005fd2:	4599      	cmp	r9, r3
 8005fd4:	bfa8      	it	ge
 8005fd6:	4699      	movge	r9, r3
 8005fd8:	f1b9 0f00 	cmp.w	r9, #0
 8005fdc:	dc35      	bgt.n	800604a <_printf_float+0x3ae>
 8005fde:	f04f 0800 	mov.w	r8, #0
 8005fe2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005fe6:	f104 0a1a 	add.w	sl, r4, #26
 8005fea:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005fee:	1a9b      	subs	r3, r3, r2
 8005ff0:	eba3 0309 	sub.w	r3, r3, r9
 8005ff4:	4543      	cmp	r3, r8
 8005ff6:	f77f af79 	ble.w	8005eec <_printf_float+0x250>
 8005ffa:	2301      	movs	r3, #1
 8005ffc:	4652      	mov	r2, sl
 8005ffe:	4631      	mov	r1, r6
 8006000:	4628      	mov	r0, r5
 8006002:	47b8      	blx	r7
 8006004:	3001      	adds	r0, #1
 8006006:	f43f aeaa 	beq.w	8005d5e <_printf_float+0xc2>
 800600a:	f108 0801 	add.w	r8, r8, #1
 800600e:	e7ec      	b.n	8005fea <_printf_float+0x34e>
 8006010:	4613      	mov	r3, r2
 8006012:	4631      	mov	r1, r6
 8006014:	4642      	mov	r2, r8
 8006016:	4628      	mov	r0, r5
 8006018:	47b8      	blx	r7
 800601a:	3001      	adds	r0, #1
 800601c:	d1c0      	bne.n	8005fa0 <_printf_float+0x304>
 800601e:	e69e      	b.n	8005d5e <_printf_float+0xc2>
 8006020:	2301      	movs	r3, #1
 8006022:	4631      	mov	r1, r6
 8006024:	4628      	mov	r0, r5
 8006026:	9205      	str	r2, [sp, #20]
 8006028:	47b8      	blx	r7
 800602a:	3001      	adds	r0, #1
 800602c:	f43f ae97 	beq.w	8005d5e <_printf_float+0xc2>
 8006030:	9a05      	ldr	r2, [sp, #20]
 8006032:	f10b 0b01 	add.w	fp, fp, #1
 8006036:	e7b9      	b.n	8005fac <_printf_float+0x310>
 8006038:	ee18 3a10 	vmov	r3, s16
 800603c:	4652      	mov	r2, sl
 800603e:	4631      	mov	r1, r6
 8006040:	4628      	mov	r0, r5
 8006042:	47b8      	blx	r7
 8006044:	3001      	adds	r0, #1
 8006046:	d1be      	bne.n	8005fc6 <_printf_float+0x32a>
 8006048:	e689      	b.n	8005d5e <_printf_float+0xc2>
 800604a:	9a05      	ldr	r2, [sp, #20]
 800604c:	464b      	mov	r3, r9
 800604e:	4442      	add	r2, r8
 8006050:	4631      	mov	r1, r6
 8006052:	4628      	mov	r0, r5
 8006054:	47b8      	blx	r7
 8006056:	3001      	adds	r0, #1
 8006058:	d1c1      	bne.n	8005fde <_printf_float+0x342>
 800605a:	e680      	b.n	8005d5e <_printf_float+0xc2>
 800605c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800605e:	2a01      	cmp	r2, #1
 8006060:	dc01      	bgt.n	8006066 <_printf_float+0x3ca>
 8006062:	07db      	lsls	r3, r3, #31
 8006064:	d538      	bpl.n	80060d8 <_printf_float+0x43c>
 8006066:	2301      	movs	r3, #1
 8006068:	4642      	mov	r2, r8
 800606a:	4631      	mov	r1, r6
 800606c:	4628      	mov	r0, r5
 800606e:	47b8      	blx	r7
 8006070:	3001      	adds	r0, #1
 8006072:	f43f ae74 	beq.w	8005d5e <_printf_float+0xc2>
 8006076:	ee18 3a10 	vmov	r3, s16
 800607a:	4652      	mov	r2, sl
 800607c:	4631      	mov	r1, r6
 800607e:	4628      	mov	r0, r5
 8006080:	47b8      	blx	r7
 8006082:	3001      	adds	r0, #1
 8006084:	f43f ae6b 	beq.w	8005d5e <_printf_float+0xc2>
 8006088:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800608c:	2200      	movs	r2, #0
 800608e:	2300      	movs	r3, #0
 8006090:	f7fa fd1a 	bl	8000ac8 <__aeabi_dcmpeq>
 8006094:	b9d8      	cbnz	r0, 80060ce <_printf_float+0x432>
 8006096:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006098:	f108 0201 	add.w	r2, r8, #1
 800609c:	3b01      	subs	r3, #1
 800609e:	4631      	mov	r1, r6
 80060a0:	4628      	mov	r0, r5
 80060a2:	47b8      	blx	r7
 80060a4:	3001      	adds	r0, #1
 80060a6:	d10e      	bne.n	80060c6 <_printf_float+0x42a>
 80060a8:	e659      	b.n	8005d5e <_printf_float+0xc2>
 80060aa:	2301      	movs	r3, #1
 80060ac:	4652      	mov	r2, sl
 80060ae:	4631      	mov	r1, r6
 80060b0:	4628      	mov	r0, r5
 80060b2:	47b8      	blx	r7
 80060b4:	3001      	adds	r0, #1
 80060b6:	f43f ae52 	beq.w	8005d5e <_printf_float+0xc2>
 80060ba:	f108 0801 	add.w	r8, r8, #1
 80060be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80060c0:	3b01      	subs	r3, #1
 80060c2:	4543      	cmp	r3, r8
 80060c4:	dcf1      	bgt.n	80060aa <_printf_float+0x40e>
 80060c6:	464b      	mov	r3, r9
 80060c8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80060cc:	e6dc      	b.n	8005e88 <_printf_float+0x1ec>
 80060ce:	f04f 0800 	mov.w	r8, #0
 80060d2:	f104 0a1a 	add.w	sl, r4, #26
 80060d6:	e7f2      	b.n	80060be <_printf_float+0x422>
 80060d8:	2301      	movs	r3, #1
 80060da:	4642      	mov	r2, r8
 80060dc:	e7df      	b.n	800609e <_printf_float+0x402>
 80060de:	2301      	movs	r3, #1
 80060e0:	464a      	mov	r2, r9
 80060e2:	4631      	mov	r1, r6
 80060e4:	4628      	mov	r0, r5
 80060e6:	47b8      	blx	r7
 80060e8:	3001      	adds	r0, #1
 80060ea:	f43f ae38 	beq.w	8005d5e <_printf_float+0xc2>
 80060ee:	f108 0801 	add.w	r8, r8, #1
 80060f2:	68e3      	ldr	r3, [r4, #12]
 80060f4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80060f6:	1a5b      	subs	r3, r3, r1
 80060f8:	4543      	cmp	r3, r8
 80060fa:	dcf0      	bgt.n	80060de <_printf_float+0x442>
 80060fc:	e6fa      	b.n	8005ef4 <_printf_float+0x258>
 80060fe:	f04f 0800 	mov.w	r8, #0
 8006102:	f104 0919 	add.w	r9, r4, #25
 8006106:	e7f4      	b.n	80060f2 <_printf_float+0x456>

08006108 <_printf_common>:
 8006108:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800610c:	4616      	mov	r6, r2
 800610e:	4699      	mov	r9, r3
 8006110:	688a      	ldr	r2, [r1, #8]
 8006112:	690b      	ldr	r3, [r1, #16]
 8006114:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006118:	4293      	cmp	r3, r2
 800611a:	bfb8      	it	lt
 800611c:	4613      	movlt	r3, r2
 800611e:	6033      	str	r3, [r6, #0]
 8006120:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006124:	4607      	mov	r7, r0
 8006126:	460c      	mov	r4, r1
 8006128:	b10a      	cbz	r2, 800612e <_printf_common+0x26>
 800612a:	3301      	adds	r3, #1
 800612c:	6033      	str	r3, [r6, #0]
 800612e:	6823      	ldr	r3, [r4, #0]
 8006130:	0699      	lsls	r1, r3, #26
 8006132:	bf42      	ittt	mi
 8006134:	6833      	ldrmi	r3, [r6, #0]
 8006136:	3302      	addmi	r3, #2
 8006138:	6033      	strmi	r3, [r6, #0]
 800613a:	6825      	ldr	r5, [r4, #0]
 800613c:	f015 0506 	ands.w	r5, r5, #6
 8006140:	d106      	bne.n	8006150 <_printf_common+0x48>
 8006142:	f104 0a19 	add.w	sl, r4, #25
 8006146:	68e3      	ldr	r3, [r4, #12]
 8006148:	6832      	ldr	r2, [r6, #0]
 800614a:	1a9b      	subs	r3, r3, r2
 800614c:	42ab      	cmp	r3, r5
 800614e:	dc26      	bgt.n	800619e <_printf_common+0x96>
 8006150:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006154:	1e13      	subs	r3, r2, #0
 8006156:	6822      	ldr	r2, [r4, #0]
 8006158:	bf18      	it	ne
 800615a:	2301      	movne	r3, #1
 800615c:	0692      	lsls	r2, r2, #26
 800615e:	d42b      	bmi.n	80061b8 <_printf_common+0xb0>
 8006160:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006164:	4649      	mov	r1, r9
 8006166:	4638      	mov	r0, r7
 8006168:	47c0      	blx	r8
 800616a:	3001      	adds	r0, #1
 800616c:	d01e      	beq.n	80061ac <_printf_common+0xa4>
 800616e:	6823      	ldr	r3, [r4, #0]
 8006170:	68e5      	ldr	r5, [r4, #12]
 8006172:	6832      	ldr	r2, [r6, #0]
 8006174:	f003 0306 	and.w	r3, r3, #6
 8006178:	2b04      	cmp	r3, #4
 800617a:	bf08      	it	eq
 800617c:	1aad      	subeq	r5, r5, r2
 800617e:	68a3      	ldr	r3, [r4, #8]
 8006180:	6922      	ldr	r2, [r4, #16]
 8006182:	bf0c      	ite	eq
 8006184:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006188:	2500      	movne	r5, #0
 800618a:	4293      	cmp	r3, r2
 800618c:	bfc4      	itt	gt
 800618e:	1a9b      	subgt	r3, r3, r2
 8006190:	18ed      	addgt	r5, r5, r3
 8006192:	2600      	movs	r6, #0
 8006194:	341a      	adds	r4, #26
 8006196:	42b5      	cmp	r5, r6
 8006198:	d11a      	bne.n	80061d0 <_printf_common+0xc8>
 800619a:	2000      	movs	r0, #0
 800619c:	e008      	b.n	80061b0 <_printf_common+0xa8>
 800619e:	2301      	movs	r3, #1
 80061a0:	4652      	mov	r2, sl
 80061a2:	4649      	mov	r1, r9
 80061a4:	4638      	mov	r0, r7
 80061a6:	47c0      	blx	r8
 80061a8:	3001      	adds	r0, #1
 80061aa:	d103      	bne.n	80061b4 <_printf_common+0xac>
 80061ac:	f04f 30ff 	mov.w	r0, #4294967295
 80061b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80061b4:	3501      	adds	r5, #1
 80061b6:	e7c6      	b.n	8006146 <_printf_common+0x3e>
 80061b8:	18e1      	adds	r1, r4, r3
 80061ba:	1c5a      	adds	r2, r3, #1
 80061bc:	2030      	movs	r0, #48	; 0x30
 80061be:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80061c2:	4422      	add	r2, r4
 80061c4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80061c8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80061cc:	3302      	adds	r3, #2
 80061ce:	e7c7      	b.n	8006160 <_printf_common+0x58>
 80061d0:	2301      	movs	r3, #1
 80061d2:	4622      	mov	r2, r4
 80061d4:	4649      	mov	r1, r9
 80061d6:	4638      	mov	r0, r7
 80061d8:	47c0      	blx	r8
 80061da:	3001      	adds	r0, #1
 80061dc:	d0e6      	beq.n	80061ac <_printf_common+0xa4>
 80061de:	3601      	adds	r6, #1
 80061e0:	e7d9      	b.n	8006196 <_printf_common+0x8e>
	...

080061e4 <_printf_i>:
 80061e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80061e8:	460c      	mov	r4, r1
 80061ea:	4691      	mov	r9, r2
 80061ec:	7e27      	ldrb	r7, [r4, #24]
 80061ee:	990c      	ldr	r1, [sp, #48]	; 0x30
 80061f0:	2f78      	cmp	r7, #120	; 0x78
 80061f2:	4680      	mov	r8, r0
 80061f4:	469a      	mov	sl, r3
 80061f6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80061fa:	d807      	bhi.n	800620c <_printf_i+0x28>
 80061fc:	2f62      	cmp	r7, #98	; 0x62
 80061fe:	d80a      	bhi.n	8006216 <_printf_i+0x32>
 8006200:	2f00      	cmp	r7, #0
 8006202:	f000 80d8 	beq.w	80063b6 <_printf_i+0x1d2>
 8006206:	2f58      	cmp	r7, #88	; 0x58
 8006208:	f000 80a3 	beq.w	8006352 <_printf_i+0x16e>
 800620c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006210:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006214:	e03a      	b.n	800628c <_printf_i+0xa8>
 8006216:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800621a:	2b15      	cmp	r3, #21
 800621c:	d8f6      	bhi.n	800620c <_printf_i+0x28>
 800621e:	a001      	add	r0, pc, #4	; (adr r0, 8006224 <_printf_i+0x40>)
 8006220:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8006224:	0800627d 	.word	0x0800627d
 8006228:	08006291 	.word	0x08006291
 800622c:	0800620d 	.word	0x0800620d
 8006230:	0800620d 	.word	0x0800620d
 8006234:	0800620d 	.word	0x0800620d
 8006238:	0800620d 	.word	0x0800620d
 800623c:	08006291 	.word	0x08006291
 8006240:	0800620d 	.word	0x0800620d
 8006244:	0800620d 	.word	0x0800620d
 8006248:	0800620d 	.word	0x0800620d
 800624c:	0800620d 	.word	0x0800620d
 8006250:	0800639d 	.word	0x0800639d
 8006254:	080062c1 	.word	0x080062c1
 8006258:	0800637f 	.word	0x0800637f
 800625c:	0800620d 	.word	0x0800620d
 8006260:	0800620d 	.word	0x0800620d
 8006264:	080063bf 	.word	0x080063bf
 8006268:	0800620d 	.word	0x0800620d
 800626c:	080062c1 	.word	0x080062c1
 8006270:	0800620d 	.word	0x0800620d
 8006274:	0800620d 	.word	0x0800620d
 8006278:	08006387 	.word	0x08006387
 800627c:	680b      	ldr	r3, [r1, #0]
 800627e:	1d1a      	adds	r2, r3, #4
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	600a      	str	r2, [r1, #0]
 8006284:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006288:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800628c:	2301      	movs	r3, #1
 800628e:	e0a3      	b.n	80063d8 <_printf_i+0x1f4>
 8006290:	6825      	ldr	r5, [r4, #0]
 8006292:	6808      	ldr	r0, [r1, #0]
 8006294:	062e      	lsls	r6, r5, #24
 8006296:	f100 0304 	add.w	r3, r0, #4
 800629a:	d50a      	bpl.n	80062b2 <_printf_i+0xce>
 800629c:	6805      	ldr	r5, [r0, #0]
 800629e:	600b      	str	r3, [r1, #0]
 80062a0:	2d00      	cmp	r5, #0
 80062a2:	da03      	bge.n	80062ac <_printf_i+0xc8>
 80062a4:	232d      	movs	r3, #45	; 0x2d
 80062a6:	426d      	negs	r5, r5
 80062a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80062ac:	485e      	ldr	r0, [pc, #376]	; (8006428 <_printf_i+0x244>)
 80062ae:	230a      	movs	r3, #10
 80062b0:	e019      	b.n	80062e6 <_printf_i+0x102>
 80062b2:	f015 0f40 	tst.w	r5, #64	; 0x40
 80062b6:	6805      	ldr	r5, [r0, #0]
 80062b8:	600b      	str	r3, [r1, #0]
 80062ba:	bf18      	it	ne
 80062bc:	b22d      	sxthne	r5, r5
 80062be:	e7ef      	b.n	80062a0 <_printf_i+0xbc>
 80062c0:	680b      	ldr	r3, [r1, #0]
 80062c2:	6825      	ldr	r5, [r4, #0]
 80062c4:	1d18      	adds	r0, r3, #4
 80062c6:	6008      	str	r0, [r1, #0]
 80062c8:	0628      	lsls	r0, r5, #24
 80062ca:	d501      	bpl.n	80062d0 <_printf_i+0xec>
 80062cc:	681d      	ldr	r5, [r3, #0]
 80062ce:	e002      	b.n	80062d6 <_printf_i+0xf2>
 80062d0:	0669      	lsls	r1, r5, #25
 80062d2:	d5fb      	bpl.n	80062cc <_printf_i+0xe8>
 80062d4:	881d      	ldrh	r5, [r3, #0]
 80062d6:	4854      	ldr	r0, [pc, #336]	; (8006428 <_printf_i+0x244>)
 80062d8:	2f6f      	cmp	r7, #111	; 0x6f
 80062da:	bf0c      	ite	eq
 80062dc:	2308      	moveq	r3, #8
 80062de:	230a      	movne	r3, #10
 80062e0:	2100      	movs	r1, #0
 80062e2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80062e6:	6866      	ldr	r6, [r4, #4]
 80062e8:	60a6      	str	r6, [r4, #8]
 80062ea:	2e00      	cmp	r6, #0
 80062ec:	bfa2      	ittt	ge
 80062ee:	6821      	ldrge	r1, [r4, #0]
 80062f0:	f021 0104 	bicge.w	r1, r1, #4
 80062f4:	6021      	strge	r1, [r4, #0]
 80062f6:	b90d      	cbnz	r5, 80062fc <_printf_i+0x118>
 80062f8:	2e00      	cmp	r6, #0
 80062fa:	d04d      	beq.n	8006398 <_printf_i+0x1b4>
 80062fc:	4616      	mov	r6, r2
 80062fe:	fbb5 f1f3 	udiv	r1, r5, r3
 8006302:	fb03 5711 	mls	r7, r3, r1, r5
 8006306:	5dc7      	ldrb	r7, [r0, r7]
 8006308:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800630c:	462f      	mov	r7, r5
 800630e:	42bb      	cmp	r3, r7
 8006310:	460d      	mov	r5, r1
 8006312:	d9f4      	bls.n	80062fe <_printf_i+0x11a>
 8006314:	2b08      	cmp	r3, #8
 8006316:	d10b      	bne.n	8006330 <_printf_i+0x14c>
 8006318:	6823      	ldr	r3, [r4, #0]
 800631a:	07df      	lsls	r7, r3, #31
 800631c:	d508      	bpl.n	8006330 <_printf_i+0x14c>
 800631e:	6923      	ldr	r3, [r4, #16]
 8006320:	6861      	ldr	r1, [r4, #4]
 8006322:	4299      	cmp	r1, r3
 8006324:	bfde      	ittt	le
 8006326:	2330      	movle	r3, #48	; 0x30
 8006328:	f806 3c01 	strble.w	r3, [r6, #-1]
 800632c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006330:	1b92      	subs	r2, r2, r6
 8006332:	6122      	str	r2, [r4, #16]
 8006334:	f8cd a000 	str.w	sl, [sp]
 8006338:	464b      	mov	r3, r9
 800633a:	aa03      	add	r2, sp, #12
 800633c:	4621      	mov	r1, r4
 800633e:	4640      	mov	r0, r8
 8006340:	f7ff fee2 	bl	8006108 <_printf_common>
 8006344:	3001      	adds	r0, #1
 8006346:	d14c      	bne.n	80063e2 <_printf_i+0x1fe>
 8006348:	f04f 30ff 	mov.w	r0, #4294967295
 800634c:	b004      	add	sp, #16
 800634e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006352:	4835      	ldr	r0, [pc, #212]	; (8006428 <_printf_i+0x244>)
 8006354:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006358:	6823      	ldr	r3, [r4, #0]
 800635a:	680e      	ldr	r6, [r1, #0]
 800635c:	061f      	lsls	r7, r3, #24
 800635e:	f856 5b04 	ldr.w	r5, [r6], #4
 8006362:	600e      	str	r6, [r1, #0]
 8006364:	d514      	bpl.n	8006390 <_printf_i+0x1ac>
 8006366:	07d9      	lsls	r1, r3, #31
 8006368:	bf44      	itt	mi
 800636a:	f043 0320 	orrmi.w	r3, r3, #32
 800636e:	6023      	strmi	r3, [r4, #0]
 8006370:	b91d      	cbnz	r5, 800637a <_printf_i+0x196>
 8006372:	6823      	ldr	r3, [r4, #0]
 8006374:	f023 0320 	bic.w	r3, r3, #32
 8006378:	6023      	str	r3, [r4, #0]
 800637a:	2310      	movs	r3, #16
 800637c:	e7b0      	b.n	80062e0 <_printf_i+0xfc>
 800637e:	6823      	ldr	r3, [r4, #0]
 8006380:	f043 0320 	orr.w	r3, r3, #32
 8006384:	6023      	str	r3, [r4, #0]
 8006386:	2378      	movs	r3, #120	; 0x78
 8006388:	4828      	ldr	r0, [pc, #160]	; (800642c <_printf_i+0x248>)
 800638a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800638e:	e7e3      	b.n	8006358 <_printf_i+0x174>
 8006390:	065e      	lsls	r6, r3, #25
 8006392:	bf48      	it	mi
 8006394:	b2ad      	uxthmi	r5, r5
 8006396:	e7e6      	b.n	8006366 <_printf_i+0x182>
 8006398:	4616      	mov	r6, r2
 800639a:	e7bb      	b.n	8006314 <_printf_i+0x130>
 800639c:	680b      	ldr	r3, [r1, #0]
 800639e:	6826      	ldr	r6, [r4, #0]
 80063a0:	6960      	ldr	r0, [r4, #20]
 80063a2:	1d1d      	adds	r5, r3, #4
 80063a4:	600d      	str	r5, [r1, #0]
 80063a6:	0635      	lsls	r5, r6, #24
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	d501      	bpl.n	80063b0 <_printf_i+0x1cc>
 80063ac:	6018      	str	r0, [r3, #0]
 80063ae:	e002      	b.n	80063b6 <_printf_i+0x1d2>
 80063b0:	0671      	lsls	r1, r6, #25
 80063b2:	d5fb      	bpl.n	80063ac <_printf_i+0x1c8>
 80063b4:	8018      	strh	r0, [r3, #0]
 80063b6:	2300      	movs	r3, #0
 80063b8:	6123      	str	r3, [r4, #16]
 80063ba:	4616      	mov	r6, r2
 80063bc:	e7ba      	b.n	8006334 <_printf_i+0x150>
 80063be:	680b      	ldr	r3, [r1, #0]
 80063c0:	1d1a      	adds	r2, r3, #4
 80063c2:	600a      	str	r2, [r1, #0]
 80063c4:	681e      	ldr	r6, [r3, #0]
 80063c6:	6862      	ldr	r2, [r4, #4]
 80063c8:	2100      	movs	r1, #0
 80063ca:	4630      	mov	r0, r6
 80063cc:	f7f9 ff08 	bl	80001e0 <memchr>
 80063d0:	b108      	cbz	r0, 80063d6 <_printf_i+0x1f2>
 80063d2:	1b80      	subs	r0, r0, r6
 80063d4:	6060      	str	r0, [r4, #4]
 80063d6:	6863      	ldr	r3, [r4, #4]
 80063d8:	6123      	str	r3, [r4, #16]
 80063da:	2300      	movs	r3, #0
 80063dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80063e0:	e7a8      	b.n	8006334 <_printf_i+0x150>
 80063e2:	6923      	ldr	r3, [r4, #16]
 80063e4:	4632      	mov	r2, r6
 80063e6:	4649      	mov	r1, r9
 80063e8:	4640      	mov	r0, r8
 80063ea:	47d0      	blx	sl
 80063ec:	3001      	adds	r0, #1
 80063ee:	d0ab      	beq.n	8006348 <_printf_i+0x164>
 80063f0:	6823      	ldr	r3, [r4, #0]
 80063f2:	079b      	lsls	r3, r3, #30
 80063f4:	d413      	bmi.n	800641e <_printf_i+0x23a>
 80063f6:	68e0      	ldr	r0, [r4, #12]
 80063f8:	9b03      	ldr	r3, [sp, #12]
 80063fa:	4298      	cmp	r0, r3
 80063fc:	bfb8      	it	lt
 80063fe:	4618      	movlt	r0, r3
 8006400:	e7a4      	b.n	800634c <_printf_i+0x168>
 8006402:	2301      	movs	r3, #1
 8006404:	4632      	mov	r2, r6
 8006406:	4649      	mov	r1, r9
 8006408:	4640      	mov	r0, r8
 800640a:	47d0      	blx	sl
 800640c:	3001      	adds	r0, #1
 800640e:	d09b      	beq.n	8006348 <_printf_i+0x164>
 8006410:	3501      	adds	r5, #1
 8006412:	68e3      	ldr	r3, [r4, #12]
 8006414:	9903      	ldr	r1, [sp, #12]
 8006416:	1a5b      	subs	r3, r3, r1
 8006418:	42ab      	cmp	r3, r5
 800641a:	dcf2      	bgt.n	8006402 <_printf_i+0x21e>
 800641c:	e7eb      	b.n	80063f6 <_printf_i+0x212>
 800641e:	2500      	movs	r5, #0
 8006420:	f104 0619 	add.w	r6, r4, #25
 8006424:	e7f5      	b.n	8006412 <_printf_i+0x22e>
 8006426:	bf00      	nop
 8006428:	0800ba22 	.word	0x0800ba22
 800642c:	0800ba33 	.word	0x0800ba33

08006430 <_scanf_float>:
 8006430:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006434:	b087      	sub	sp, #28
 8006436:	4617      	mov	r7, r2
 8006438:	9303      	str	r3, [sp, #12]
 800643a:	688b      	ldr	r3, [r1, #8]
 800643c:	1e5a      	subs	r2, r3, #1
 800643e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8006442:	bf83      	ittte	hi
 8006444:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8006448:	195b      	addhi	r3, r3, r5
 800644a:	9302      	strhi	r3, [sp, #8]
 800644c:	2300      	movls	r3, #0
 800644e:	bf86      	itte	hi
 8006450:	f240 135d 	movwhi	r3, #349	; 0x15d
 8006454:	608b      	strhi	r3, [r1, #8]
 8006456:	9302      	strls	r3, [sp, #8]
 8006458:	680b      	ldr	r3, [r1, #0]
 800645a:	468b      	mov	fp, r1
 800645c:	2500      	movs	r5, #0
 800645e:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8006462:	f84b 3b1c 	str.w	r3, [fp], #28
 8006466:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800646a:	4680      	mov	r8, r0
 800646c:	460c      	mov	r4, r1
 800646e:	465e      	mov	r6, fp
 8006470:	46aa      	mov	sl, r5
 8006472:	46a9      	mov	r9, r5
 8006474:	9501      	str	r5, [sp, #4]
 8006476:	68a2      	ldr	r2, [r4, #8]
 8006478:	b152      	cbz	r2, 8006490 <_scanf_float+0x60>
 800647a:	683b      	ldr	r3, [r7, #0]
 800647c:	781b      	ldrb	r3, [r3, #0]
 800647e:	2b4e      	cmp	r3, #78	; 0x4e
 8006480:	d864      	bhi.n	800654c <_scanf_float+0x11c>
 8006482:	2b40      	cmp	r3, #64	; 0x40
 8006484:	d83c      	bhi.n	8006500 <_scanf_float+0xd0>
 8006486:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800648a:	b2c8      	uxtb	r0, r1
 800648c:	280e      	cmp	r0, #14
 800648e:	d93a      	bls.n	8006506 <_scanf_float+0xd6>
 8006490:	f1b9 0f00 	cmp.w	r9, #0
 8006494:	d003      	beq.n	800649e <_scanf_float+0x6e>
 8006496:	6823      	ldr	r3, [r4, #0]
 8006498:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800649c:	6023      	str	r3, [r4, #0]
 800649e:	f10a 3aff 	add.w	sl, sl, #4294967295
 80064a2:	f1ba 0f01 	cmp.w	sl, #1
 80064a6:	f200 8113 	bhi.w	80066d0 <_scanf_float+0x2a0>
 80064aa:	455e      	cmp	r6, fp
 80064ac:	f200 8105 	bhi.w	80066ba <_scanf_float+0x28a>
 80064b0:	2501      	movs	r5, #1
 80064b2:	4628      	mov	r0, r5
 80064b4:	b007      	add	sp, #28
 80064b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064ba:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80064be:	2a0d      	cmp	r2, #13
 80064c0:	d8e6      	bhi.n	8006490 <_scanf_float+0x60>
 80064c2:	a101      	add	r1, pc, #4	; (adr r1, 80064c8 <_scanf_float+0x98>)
 80064c4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80064c8:	08006607 	.word	0x08006607
 80064cc:	08006491 	.word	0x08006491
 80064d0:	08006491 	.word	0x08006491
 80064d4:	08006491 	.word	0x08006491
 80064d8:	08006667 	.word	0x08006667
 80064dc:	0800663f 	.word	0x0800663f
 80064e0:	08006491 	.word	0x08006491
 80064e4:	08006491 	.word	0x08006491
 80064e8:	08006615 	.word	0x08006615
 80064ec:	08006491 	.word	0x08006491
 80064f0:	08006491 	.word	0x08006491
 80064f4:	08006491 	.word	0x08006491
 80064f8:	08006491 	.word	0x08006491
 80064fc:	080065cd 	.word	0x080065cd
 8006500:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8006504:	e7db      	b.n	80064be <_scanf_float+0x8e>
 8006506:	290e      	cmp	r1, #14
 8006508:	d8c2      	bhi.n	8006490 <_scanf_float+0x60>
 800650a:	a001      	add	r0, pc, #4	; (adr r0, 8006510 <_scanf_float+0xe0>)
 800650c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8006510:	080065bf 	.word	0x080065bf
 8006514:	08006491 	.word	0x08006491
 8006518:	080065bf 	.word	0x080065bf
 800651c:	08006653 	.word	0x08006653
 8006520:	08006491 	.word	0x08006491
 8006524:	0800656d 	.word	0x0800656d
 8006528:	080065a9 	.word	0x080065a9
 800652c:	080065a9 	.word	0x080065a9
 8006530:	080065a9 	.word	0x080065a9
 8006534:	080065a9 	.word	0x080065a9
 8006538:	080065a9 	.word	0x080065a9
 800653c:	080065a9 	.word	0x080065a9
 8006540:	080065a9 	.word	0x080065a9
 8006544:	080065a9 	.word	0x080065a9
 8006548:	080065a9 	.word	0x080065a9
 800654c:	2b6e      	cmp	r3, #110	; 0x6e
 800654e:	d809      	bhi.n	8006564 <_scanf_float+0x134>
 8006550:	2b60      	cmp	r3, #96	; 0x60
 8006552:	d8b2      	bhi.n	80064ba <_scanf_float+0x8a>
 8006554:	2b54      	cmp	r3, #84	; 0x54
 8006556:	d077      	beq.n	8006648 <_scanf_float+0x218>
 8006558:	2b59      	cmp	r3, #89	; 0x59
 800655a:	d199      	bne.n	8006490 <_scanf_float+0x60>
 800655c:	2d07      	cmp	r5, #7
 800655e:	d197      	bne.n	8006490 <_scanf_float+0x60>
 8006560:	2508      	movs	r5, #8
 8006562:	e029      	b.n	80065b8 <_scanf_float+0x188>
 8006564:	2b74      	cmp	r3, #116	; 0x74
 8006566:	d06f      	beq.n	8006648 <_scanf_float+0x218>
 8006568:	2b79      	cmp	r3, #121	; 0x79
 800656a:	e7f6      	b.n	800655a <_scanf_float+0x12a>
 800656c:	6821      	ldr	r1, [r4, #0]
 800656e:	05c8      	lsls	r0, r1, #23
 8006570:	d51a      	bpl.n	80065a8 <_scanf_float+0x178>
 8006572:	9b02      	ldr	r3, [sp, #8]
 8006574:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8006578:	6021      	str	r1, [r4, #0]
 800657a:	f109 0901 	add.w	r9, r9, #1
 800657e:	b11b      	cbz	r3, 8006588 <_scanf_float+0x158>
 8006580:	3b01      	subs	r3, #1
 8006582:	3201      	adds	r2, #1
 8006584:	9302      	str	r3, [sp, #8]
 8006586:	60a2      	str	r2, [r4, #8]
 8006588:	68a3      	ldr	r3, [r4, #8]
 800658a:	3b01      	subs	r3, #1
 800658c:	60a3      	str	r3, [r4, #8]
 800658e:	6923      	ldr	r3, [r4, #16]
 8006590:	3301      	adds	r3, #1
 8006592:	6123      	str	r3, [r4, #16]
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	3b01      	subs	r3, #1
 8006598:	2b00      	cmp	r3, #0
 800659a:	607b      	str	r3, [r7, #4]
 800659c:	f340 8084 	ble.w	80066a8 <_scanf_float+0x278>
 80065a0:	683b      	ldr	r3, [r7, #0]
 80065a2:	3301      	adds	r3, #1
 80065a4:	603b      	str	r3, [r7, #0]
 80065a6:	e766      	b.n	8006476 <_scanf_float+0x46>
 80065a8:	eb1a 0f05 	cmn.w	sl, r5
 80065ac:	f47f af70 	bne.w	8006490 <_scanf_float+0x60>
 80065b0:	6822      	ldr	r2, [r4, #0]
 80065b2:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80065b6:	6022      	str	r2, [r4, #0]
 80065b8:	f806 3b01 	strb.w	r3, [r6], #1
 80065bc:	e7e4      	b.n	8006588 <_scanf_float+0x158>
 80065be:	6822      	ldr	r2, [r4, #0]
 80065c0:	0610      	lsls	r0, r2, #24
 80065c2:	f57f af65 	bpl.w	8006490 <_scanf_float+0x60>
 80065c6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80065ca:	e7f4      	b.n	80065b6 <_scanf_float+0x186>
 80065cc:	f1ba 0f00 	cmp.w	sl, #0
 80065d0:	d10e      	bne.n	80065f0 <_scanf_float+0x1c0>
 80065d2:	f1b9 0f00 	cmp.w	r9, #0
 80065d6:	d10e      	bne.n	80065f6 <_scanf_float+0x1c6>
 80065d8:	6822      	ldr	r2, [r4, #0]
 80065da:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80065de:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80065e2:	d108      	bne.n	80065f6 <_scanf_float+0x1c6>
 80065e4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80065e8:	6022      	str	r2, [r4, #0]
 80065ea:	f04f 0a01 	mov.w	sl, #1
 80065ee:	e7e3      	b.n	80065b8 <_scanf_float+0x188>
 80065f0:	f1ba 0f02 	cmp.w	sl, #2
 80065f4:	d055      	beq.n	80066a2 <_scanf_float+0x272>
 80065f6:	2d01      	cmp	r5, #1
 80065f8:	d002      	beq.n	8006600 <_scanf_float+0x1d0>
 80065fa:	2d04      	cmp	r5, #4
 80065fc:	f47f af48 	bne.w	8006490 <_scanf_float+0x60>
 8006600:	3501      	adds	r5, #1
 8006602:	b2ed      	uxtb	r5, r5
 8006604:	e7d8      	b.n	80065b8 <_scanf_float+0x188>
 8006606:	f1ba 0f01 	cmp.w	sl, #1
 800660a:	f47f af41 	bne.w	8006490 <_scanf_float+0x60>
 800660e:	f04f 0a02 	mov.w	sl, #2
 8006612:	e7d1      	b.n	80065b8 <_scanf_float+0x188>
 8006614:	b97d      	cbnz	r5, 8006636 <_scanf_float+0x206>
 8006616:	f1b9 0f00 	cmp.w	r9, #0
 800661a:	f47f af3c 	bne.w	8006496 <_scanf_float+0x66>
 800661e:	6822      	ldr	r2, [r4, #0]
 8006620:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006624:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006628:	f47f af39 	bne.w	800649e <_scanf_float+0x6e>
 800662c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006630:	6022      	str	r2, [r4, #0]
 8006632:	2501      	movs	r5, #1
 8006634:	e7c0      	b.n	80065b8 <_scanf_float+0x188>
 8006636:	2d03      	cmp	r5, #3
 8006638:	d0e2      	beq.n	8006600 <_scanf_float+0x1d0>
 800663a:	2d05      	cmp	r5, #5
 800663c:	e7de      	b.n	80065fc <_scanf_float+0x1cc>
 800663e:	2d02      	cmp	r5, #2
 8006640:	f47f af26 	bne.w	8006490 <_scanf_float+0x60>
 8006644:	2503      	movs	r5, #3
 8006646:	e7b7      	b.n	80065b8 <_scanf_float+0x188>
 8006648:	2d06      	cmp	r5, #6
 800664a:	f47f af21 	bne.w	8006490 <_scanf_float+0x60>
 800664e:	2507      	movs	r5, #7
 8006650:	e7b2      	b.n	80065b8 <_scanf_float+0x188>
 8006652:	6822      	ldr	r2, [r4, #0]
 8006654:	0591      	lsls	r1, r2, #22
 8006656:	f57f af1b 	bpl.w	8006490 <_scanf_float+0x60>
 800665a:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800665e:	6022      	str	r2, [r4, #0]
 8006660:	f8cd 9004 	str.w	r9, [sp, #4]
 8006664:	e7a8      	b.n	80065b8 <_scanf_float+0x188>
 8006666:	6822      	ldr	r2, [r4, #0]
 8006668:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800666c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8006670:	d006      	beq.n	8006680 <_scanf_float+0x250>
 8006672:	0550      	lsls	r0, r2, #21
 8006674:	f57f af0c 	bpl.w	8006490 <_scanf_float+0x60>
 8006678:	f1b9 0f00 	cmp.w	r9, #0
 800667c:	f43f af0f 	beq.w	800649e <_scanf_float+0x6e>
 8006680:	0591      	lsls	r1, r2, #22
 8006682:	bf58      	it	pl
 8006684:	9901      	ldrpl	r1, [sp, #4]
 8006686:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800668a:	bf58      	it	pl
 800668c:	eba9 0101 	subpl.w	r1, r9, r1
 8006690:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8006694:	bf58      	it	pl
 8006696:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800669a:	6022      	str	r2, [r4, #0]
 800669c:	f04f 0900 	mov.w	r9, #0
 80066a0:	e78a      	b.n	80065b8 <_scanf_float+0x188>
 80066a2:	f04f 0a03 	mov.w	sl, #3
 80066a6:	e787      	b.n	80065b8 <_scanf_float+0x188>
 80066a8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80066ac:	4639      	mov	r1, r7
 80066ae:	4640      	mov	r0, r8
 80066b0:	4798      	blx	r3
 80066b2:	2800      	cmp	r0, #0
 80066b4:	f43f aedf 	beq.w	8006476 <_scanf_float+0x46>
 80066b8:	e6ea      	b.n	8006490 <_scanf_float+0x60>
 80066ba:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80066be:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80066c2:	463a      	mov	r2, r7
 80066c4:	4640      	mov	r0, r8
 80066c6:	4798      	blx	r3
 80066c8:	6923      	ldr	r3, [r4, #16]
 80066ca:	3b01      	subs	r3, #1
 80066cc:	6123      	str	r3, [r4, #16]
 80066ce:	e6ec      	b.n	80064aa <_scanf_float+0x7a>
 80066d0:	1e6b      	subs	r3, r5, #1
 80066d2:	2b06      	cmp	r3, #6
 80066d4:	d825      	bhi.n	8006722 <_scanf_float+0x2f2>
 80066d6:	2d02      	cmp	r5, #2
 80066d8:	d836      	bhi.n	8006748 <_scanf_float+0x318>
 80066da:	455e      	cmp	r6, fp
 80066dc:	f67f aee8 	bls.w	80064b0 <_scanf_float+0x80>
 80066e0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80066e4:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80066e8:	463a      	mov	r2, r7
 80066ea:	4640      	mov	r0, r8
 80066ec:	4798      	blx	r3
 80066ee:	6923      	ldr	r3, [r4, #16]
 80066f0:	3b01      	subs	r3, #1
 80066f2:	6123      	str	r3, [r4, #16]
 80066f4:	e7f1      	b.n	80066da <_scanf_float+0x2aa>
 80066f6:	9802      	ldr	r0, [sp, #8]
 80066f8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80066fc:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8006700:	9002      	str	r0, [sp, #8]
 8006702:	463a      	mov	r2, r7
 8006704:	4640      	mov	r0, r8
 8006706:	4798      	blx	r3
 8006708:	6923      	ldr	r3, [r4, #16]
 800670a:	3b01      	subs	r3, #1
 800670c:	6123      	str	r3, [r4, #16]
 800670e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006712:	fa5f fa8a 	uxtb.w	sl, sl
 8006716:	f1ba 0f02 	cmp.w	sl, #2
 800671a:	d1ec      	bne.n	80066f6 <_scanf_float+0x2c6>
 800671c:	3d03      	subs	r5, #3
 800671e:	b2ed      	uxtb	r5, r5
 8006720:	1b76      	subs	r6, r6, r5
 8006722:	6823      	ldr	r3, [r4, #0]
 8006724:	05da      	lsls	r2, r3, #23
 8006726:	d52f      	bpl.n	8006788 <_scanf_float+0x358>
 8006728:	055b      	lsls	r3, r3, #21
 800672a:	d510      	bpl.n	800674e <_scanf_float+0x31e>
 800672c:	455e      	cmp	r6, fp
 800672e:	f67f aebf 	bls.w	80064b0 <_scanf_float+0x80>
 8006732:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006736:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800673a:	463a      	mov	r2, r7
 800673c:	4640      	mov	r0, r8
 800673e:	4798      	blx	r3
 8006740:	6923      	ldr	r3, [r4, #16]
 8006742:	3b01      	subs	r3, #1
 8006744:	6123      	str	r3, [r4, #16]
 8006746:	e7f1      	b.n	800672c <_scanf_float+0x2fc>
 8006748:	46aa      	mov	sl, r5
 800674a:	9602      	str	r6, [sp, #8]
 800674c:	e7df      	b.n	800670e <_scanf_float+0x2de>
 800674e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8006752:	6923      	ldr	r3, [r4, #16]
 8006754:	2965      	cmp	r1, #101	; 0x65
 8006756:	f103 33ff 	add.w	r3, r3, #4294967295
 800675a:	f106 35ff 	add.w	r5, r6, #4294967295
 800675e:	6123      	str	r3, [r4, #16]
 8006760:	d00c      	beq.n	800677c <_scanf_float+0x34c>
 8006762:	2945      	cmp	r1, #69	; 0x45
 8006764:	d00a      	beq.n	800677c <_scanf_float+0x34c>
 8006766:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800676a:	463a      	mov	r2, r7
 800676c:	4640      	mov	r0, r8
 800676e:	4798      	blx	r3
 8006770:	6923      	ldr	r3, [r4, #16]
 8006772:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8006776:	3b01      	subs	r3, #1
 8006778:	1eb5      	subs	r5, r6, #2
 800677a:	6123      	str	r3, [r4, #16]
 800677c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006780:	463a      	mov	r2, r7
 8006782:	4640      	mov	r0, r8
 8006784:	4798      	blx	r3
 8006786:	462e      	mov	r6, r5
 8006788:	6825      	ldr	r5, [r4, #0]
 800678a:	f015 0510 	ands.w	r5, r5, #16
 800678e:	d158      	bne.n	8006842 <_scanf_float+0x412>
 8006790:	7035      	strb	r5, [r6, #0]
 8006792:	6823      	ldr	r3, [r4, #0]
 8006794:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006798:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800679c:	d11c      	bne.n	80067d8 <_scanf_float+0x3a8>
 800679e:	9b01      	ldr	r3, [sp, #4]
 80067a0:	454b      	cmp	r3, r9
 80067a2:	eba3 0209 	sub.w	r2, r3, r9
 80067a6:	d124      	bne.n	80067f2 <_scanf_float+0x3c2>
 80067a8:	2200      	movs	r2, #0
 80067aa:	4659      	mov	r1, fp
 80067ac:	4640      	mov	r0, r8
 80067ae:	f000 fe9d 	bl	80074ec <_strtod_r>
 80067b2:	9b03      	ldr	r3, [sp, #12]
 80067b4:	6821      	ldr	r1, [r4, #0]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	f011 0f02 	tst.w	r1, #2
 80067bc:	ec57 6b10 	vmov	r6, r7, d0
 80067c0:	f103 0204 	add.w	r2, r3, #4
 80067c4:	d020      	beq.n	8006808 <_scanf_float+0x3d8>
 80067c6:	9903      	ldr	r1, [sp, #12]
 80067c8:	600a      	str	r2, [r1, #0]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	e9c3 6700 	strd	r6, r7, [r3]
 80067d0:	68e3      	ldr	r3, [r4, #12]
 80067d2:	3301      	adds	r3, #1
 80067d4:	60e3      	str	r3, [r4, #12]
 80067d6:	e66c      	b.n	80064b2 <_scanf_float+0x82>
 80067d8:	9b04      	ldr	r3, [sp, #16]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d0e4      	beq.n	80067a8 <_scanf_float+0x378>
 80067de:	9905      	ldr	r1, [sp, #20]
 80067e0:	230a      	movs	r3, #10
 80067e2:	462a      	mov	r2, r5
 80067e4:	3101      	adds	r1, #1
 80067e6:	4640      	mov	r0, r8
 80067e8:	f000 ff0a 	bl	8007600 <_strtol_r>
 80067ec:	9b04      	ldr	r3, [sp, #16]
 80067ee:	9e05      	ldr	r6, [sp, #20]
 80067f0:	1ac2      	subs	r2, r0, r3
 80067f2:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80067f6:	429e      	cmp	r6, r3
 80067f8:	bf28      	it	cs
 80067fa:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80067fe:	4912      	ldr	r1, [pc, #72]	; (8006848 <_scanf_float+0x418>)
 8006800:	4630      	mov	r0, r6
 8006802:	f000 f82b 	bl	800685c <siprintf>
 8006806:	e7cf      	b.n	80067a8 <_scanf_float+0x378>
 8006808:	f011 0f04 	tst.w	r1, #4
 800680c:	9903      	ldr	r1, [sp, #12]
 800680e:	600a      	str	r2, [r1, #0]
 8006810:	d1db      	bne.n	80067ca <_scanf_float+0x39a>
 8006812:	f8d3 8000 	ldr.w	r8, [r3]
 8006816:	ee10 2a10 	vmov	r2, s0
 800681a:	ee10 0a10 	vmov	r0, s0
 800681e:	463b      	mov	r3, r7
 8006820:	4639      	mov	r1, r7
 8006822:	f7fa f983 	bl	8000b2c <__aeabi_dcmpun>
 8006826:	b128      	cbz	r0, 8006834 <_scanf_float+0x404>
 8006828:	4808      	ldr	r0, [pc, #32]	; (800684c <_scanf_float+0x41c>)
 800682a:	f000 f811 	bl	8006850 <nanf>
 800682e:	ed88 0a00 	vstr	s0, [r8]
 8006832:	e7cd      	b.n	80067d0 <_scanf_float+0x3a0>
 8006834:	4630      	mov	r0, r6
 8006836:	4639      	mov	r1, r7
 8006838:	f7fa f9d6 	bl	8000be8 <__aeabi_d2f>
 800683c:	f8c8 0000 	str.w	r0, [r8]
 8006840:	e7c6      	b.n	80067d0 <_scanf_float+0x3a0>
 8006842:	2500      	movs	r5, #0
 8006844:	e635      	b.n	80064b2 <_scanf_float+0x82>
 8006846:	bf00      	nop
 8006848:	0800ba44 	.word	0x0800ba44
 800684c:	0800be60 	.word	0x0800be60

08006850 <nanf>:
 8006850:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8006858 <nanf+0x8>
 8006854:	4770      	bx	lr
 8006856:	bf00      	nop
 8006858:	7fc00000 	.word	0x7fc00000

0800685c <siprintf>:
 800685c:	b40e      	push	{r1, r2, r3}
 800685e:	b500      	push	{lr}
 8006860:	b09c      	sub	sp, #112	; 0x70
 8006862:	ab1d      	add	r3, sp, #116	; 0x74
 8006864:	9002      	str	r0, [sp, #8]
 8006866:	9006      	str	r0, [sp, #24]
 8006868:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800686c:	4809      	ldr	r0, [pc, #36]	; (8006894 <siprintf+0x38>)
 800686e:	9107      	str	r1, [sp, #28]
 8006870:	9104      	str	r1, [sp, #16]
 8006872:	4909      	ldr	r1, [pc, #36]	; (8006898 <siprintf+0x3c>)
 8006874:	f853 2b04 	ldr.w	r2, [r3], #4
 8006878:	9105      	str	r1, [sp, #20]
 800687a:	6800      	ldr	r0, [r0, #0]
 800687c:	9301      	str	r3, [sp, #4]
 800687e:	a902      	add	r1, sp, #8
 8006880:	f002 fea6 	bl	80095d0 <_svfiprintf_r>
 8006884:	9b02      	ldr	r3, [sp, #8]
 8006886:	2200      	movs	r2, #0
 8006888:	701a      	strb	r2, [r3, #0]
 800688a:	b01c      	add	sp, #112	; 0x70
 800688c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006890:	b003      	add	sp, #12
 8006892:	4770      	bx	lr
 8006894:	2000001c 	.word	0x2000001c
 8006898:	ffff0208 	.word	0xffff0208

0800689c <sulp>:
 800689c:	b570      	push	{r4, r5, r6, lr}
 800689e:	4604      	mov	r4, r0
 80068a0:	460d      	mov	r5, r1
 80068a2:	ec45 4b10 	vmov	d0, r4, r5
 80068a6:	4616      	mov	r6, r2
 80068a8:	f002 fc2e 	bl	8009108 <__ulp>
 80068ac:	ec51 0b10 	vmov	r0, r1, d0
 80068b0:	b17e      	cbz	r6, 80068d2 <sulp+0x36>
 80068b2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80068b6:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	dd09      	ble.n	80068d2 <sulp+0x36>
 80068be:	051b      	lsls	r3, r3, #20
 80068c0:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80068c4:	2400      	movs	r4, #0
 80068c6:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80068ca:	4622      	mov	r2, r4
 80068cc:	462b      	mov	r3, r5
 80068ce:	f7f9 fe93 	bl	80005f8 <__aeabi_dmul>
 80068d2:	bd70      	pop	{r4, r5, r6, pc}
 80068d4:	0000      	movs	r0, r0
	...

080068d8 <_strtod_l>:
 80068d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068dc:	b0a3      	sub	sp, #140	; 0x8c
 80068de:	461f      	mov	r7, r3
 80068e0:	2300      	movs	r3, #0
 80068e2:	931e      	str	r3, [sp, #120]	; 0x78
 80068e4:	4ba4      	ldr	r3, [pc, #656]	; (8006b78 <_strtod_l+0x2a0>)
 80068e6:	9219      	str	r2, [sp, #100]	; 0x64
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	9307      	str	r3, [sp, #28]
 80068ec:	4604      	mov	r4, r0
 80068ee:	4618      	mov	r0, r3
 80068f0:	4688      	mov	r8, r1
 80068f2:	f7f9 fc6d 	bl	80001d0 <strlen>
 80068f6:	f04f 0a00 	mov.w	sl, #0
 80068fa:	4605      	mov	r5, r0
 80068fc:	f04f 0b00 	mov.w	fp, #0
 8006900:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8006904:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006906:	781a      	ldrb	r2, [r3, #0]
 8006908:	2a2b      	cmp	r2, #43	; 0x2b
 800690a:	d04c      	beq.n	80069a6 <_strtod_l+0xce>
 800690c:	d839      	bhi.n	8006982 <_strtod_l+0xaa>
 800690e:	2a0d      	cmp	r2, #13
 8006910:	d832      	bhi.n	8006978 <_strtod_l+0xa0>
 8006912:	2a08      	cmp	r2, #8
 8006914:	d832      	bhi.n	800697c <_strtod_l+0xa4>
 8006916:	2a00      	cmp	r2, #0
 8006918:	d03c      	beq.n	8006994 <_strtod_l+0xbc>
 800691a:	2300      	movs	r3, #0
 800691c:	930e      	str	r3, [sp, #56]	; 0x38
 800691e:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8006920:	7833      	ldrb	r3, [r6, #0]
 8006922:	2b30      	cmp	r3, #48	; 0x30
 8006924:	f040 80b4 	bne.w	8006a90 <_strtod_l+0x1b8>
 8006928:	7873      	ldrb	r3, [r6, #1]
 800692a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800692e:	2b58      	cmp	r3, #88	; 0x58
 8006930:	d16c      	bne.n	8006a0c <_strtod_l+0x134>
 8006932:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006934:	9301      	str	r3, [sp, #4]
 8006936:	ab1e      	add	r3, sp, #120	; 0x78
 8006938:	9702      	str	r7, [sp, #8]
 800693a:	9300      	str	r3, [sp, #0]
 800693c:	4a8f      	ldr	r2, [pc, #572]	; (8006b7c <_strtod_l+0x2a4>)
 800693e:	ab1f      	add	r3, sp, #124	; 0x7c
 8006940:	a91d      	add	r1, sp, #116	; 0x74
 8006942:	4620      	mov	r0, r4
 8006944:	f001 fd40 	bl	80083c8 <__gethex>
 8006948:	f010 0707 	ands.w	r7, r0, #7
 800694c:	4605      	mov	r5, r0
 800694e:	d005      	beq.n	800695c <_strtod_l+0x84>
 8006950:	2f06      	cmp	r7, #6
 8006952:	d12a      	bne.n	80069aa <_strtod_l+0xd2>
 8006954:	3601      	adds	r6, #1
 8006956:	2300      	movs	r3, #0
 8006958:	961d      	str	r6, [sp, #116]	; 0x74
 800695a:	930e      	str	r3, [sp, #56]	; 0x38
 800695c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800695e:	2b00      	cmp	r3, #0
 8006960:	f040 8596 	bne.w	8007490 <_strtod_l+0xbb8>
 8006964:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006966:	b1db      	cbz	r3, 80069a0 <_strtod_l+0xc8>
 8006968:	4652      	mov	r2, sl
 800696a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800696e:	ec43 2b10 	vmov	d0, r2, r3
 8006972:	b023      	add	sp, #140	; 0x8c
 8006974:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006978:	2a20      	cmp	r2, #32
 800697a:	d1ce      	bne.n	800691a <_strtod_l+0x42>
 800697c:	3301      	adds	r3, #1
 800697e:	931d      	str	r3, [sp, #116]	; 0x74
 8006980:	e7c0      	b.n	8006904 <_strtod_l+0x2c>
 8006982:	2a2d      	cmp	r2, #45	; 0x2d
 8006984:	d1c9      	bne.n	800691a <_strtod_l+0x42>
 8006986:	2201      	movs	r2, #1
 8006988:	920e      	str	r2, [sp, #56]	; 0x38
 800698a:	1c5a      	adds	r2, r3, #1
 800698c:	921d      	str	r2, [sp, #116]	; 0x74
 800698e:	785b      	ldrb	r3, [r3, #1]
 8006990:	2b00      	cmp	r3, #0
 8006992:	d1c4      	bne.n	800691e <_strtod_l+0x46>
 8006994:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006996:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800699a:	2b00      	cmp	r3, #0
 800699c:	f040 8576 	bne.w	800748c <_strtod_l+0xbb4>
 80069a0:	4652      	mov	r2, sl
 80069a2:	465b      	mov	r3, fp
 80069a4:	e7e3      	b.n	800696e <_strtod_l+0x96>
 80069a6:	2200      	movs	r2, #0
 80069a8:	e7ee      	b.n	8006988 <_strtod_l+0xb0>
 80069aa:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80069ac:	b13a      	cbz	r2, 80069be <_strtod_l+0xe6>
 80069ae:	2135      	movs	r1, #53	; 0x35
 80069b0:	a820      	add	r0, sp, #128	; 0x80
 80069b2:	f002 fcb4 	bl	800931e <__copybits>
 80069b6:	991e      	ldr	r1, [sp, #120]	; 0x78
 80069b8:	4620      	mov	r0, r4
 80069ba:	f002 f879 	bl	8008ab0 <_Bfree>
 80069be:	3f01      	subs	r7, #1
 80069c0:	2f05      	cmp	r7, #5
 80069c2:	d807      	bhi.n	80069d4 <_strtod_l+0xfc>
 80069c4:	e8df f007 	tbb	[pc, r7]
 80069c8:	1d180b0e 	.word	0x1d180b0e
 80069cc:	030e      	.short	0x030e
 80069ce:	f04f 0b00 	mov.w	fp, #0
 80069d2:	46da      	mov	sl, fp
 80069d4:	0728      	lsls	r0, r5, #28
 80069d6:	d5c1      	bpl.n	800695c <_strtod_l+0x84>
 80069d8:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80069dc:	e7be      	b.n	800695c <_strtod_l+0x84>
 80069de:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 80069e2:	e7f7      	b.n	80069d4 <_strtod_l+0xfc>
 80069e4:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 80069e8:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80069ea:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80069ee:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80069f2:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80069f6:	e7ed      	b.n	80069d4 <_strtod_l+0xfc>
 80069f8:	f8df b184 	ldr.w	fp, [pc, #388]	; 8006b80 <_strtod_l+0x2a8>
 80069fc:	f04f 0a00 	mov.w	sl, #0
 8006a00:	e7e8      	b.n	80069d4 <_strtod_l+0xfc>
 8006a02:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8006a06:	f04f 3aff 	mov.w	sl, #4294967295
 8006a0a:	e7e3      	b.n	80069d4 <_strtod_l+0xfc>
 8006a0c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006a0e:	1c5a      	adds	r2, r3, #1
 8006a10:	921d      	str	r2, [sp, #116]	; 0x74
 8006a12:	785b      	ldrb	r3, [r3, #1]
 8006a14:	2b30      	cmp	r3, #48	; 0x30
 8006a16:	d0f9      	beq.n	8006a0c <_strtod_l+0x134>
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d09f      	beq.n	800695c <_strtod_l+0x84>
 8006a1c:	2301      	movs	r3, #1
 8006a1e:	f04f 0900 	mov.w	r9, #0
 8006a22:	9304      	str	r3, [sp, #16]
 8006a24:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006a26:	930a      	str	r3, [sp, #40]	; 0x28
 8006a28:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8006a2c:	464f      	mov	r7, r9
 8006a2e:	220a      	movs	r2, #10
 8006a30:	981d      	ldr	r0, [sp, #116]	; 0x74
 8006a32:	7806      	ldrb	r6, [r0, #0]
 8006a34:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8006a38:	b2d9      	uxtb	r1, r3
 8006a3a:	2909      	cmp	r1, #9
 8006a3c:	d92a      	bls.n	8006a94 <_strtod_l+0x1bc>
 8006a3e:	9907      	ldr	r1, [sp, #28]
 8006a40:	462a      	mov	r2, r5
 8006a42:	f002 fedd 	bl	8009800 <strncmp>
 8006a46:	b398      	cbz	r0, 8006ab0 <_strtod_l+0x1d8>
 8006a48:	2000      	movs	r0, #0
 8006a4a:	4633      	mov	r3, r6
 8006a4c:	463d      	mov	r5, r7
 8006a4e:	9007      	str	r0, [sp, #28]
 8006a50:	4602      	mov	r2, r0
 8006a52:	2b65      	cmp	r3, #101	; 0x65
 8006a54:	d001      	beq.n	8006a5a <_strtod_l+0x182>
 8006a56:	2b45      	cmp	r3, #69	; 0x45
 8006a58:	d118      	bne.n	8006a8c <_strtod_l+0x1b4>
 8006a5a:	b91d      	cbnz	r5, 8006a64 <_strtod_l+0x18c>
 8006a5c:	9b04      	ldr	r3, [sp, #16]
 8006a5e:	4303      	orrs	r3, r0
 8006a60:	d098      	beq.n	8006994 <_strtod_l+0xbc>
 8006a62:	2500      	movs	r5, #0
 8006a64:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 8006a68:	f108 0301 	add.w	r3, r8, #1
 8006a6c:	931d      	str	r3, [sp, #116]	; 0x74
 8006a6e:	f898 3001 	ldrb.w	r3, [r8, #1]
 8006a72:	2b2b      	cmp	r3, #43	; 0x2b
 8006a74:	d075      	beq.n	8006b62 <_strtod_l+0x28a>
 8006a76:	2b2d      	cmp	r3, #45	; 0x2d
 8006a78:	d07b      	beq.n	8006b72 <_strtod_l+0x29a>
 8006a7a:	f04f 0c00 	mov.w	ip, #0
 8006a7e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8006a82:	2909      	cmp	r1, #9
 8006a84:	f240 8082 	bls.w	8006b8c <_strtod_l+0x2b4>
 8006a88:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8006a8c:	2600      	movs	r6, #0
 8006a8e:	e09d      	b.n	8006bcc <_strtod_l+0x2f4>
 8006a90:	2300      	movs	r3, #0
 8006a92:	e7c4      	b.n	8006a1e <_strtod_l+0x146>
 8006a94:	2f08      	cmp	r7, #8
 8006a96:	bfd8      	it	le
 8006a98:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8006a9a:	f100 0001 	add.w	r0, r0, #1
 8006a9e:	bfda      	itte	le
 8006aa0:	fb02 3301 	mlale	r3, r2, r1, r3
 8006aa4:	9309      	strle	r3, [sp, #36]	; 0x24
 8006aa6:	fb02 3909 	mlagt	r9, r2, r9, r3
 8006aaa:	3701      	adds	r7, #1
 8006aac:	901d      	str	r0, [sp, #116]	; 0x74
 8006aae:	e7bf      	b.n	8006a30 <_strtod_l+0x158>
 8006ab0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006ab2:	195a      	adds	r2, r3, r5
 8006ab4:	921d      	str	r2, [sp, #116]	; 0x74
 8006ab6:	5d5b      	ldrb	r3, [r3, r5]
 8006ab8:	2f00      	cmp	r7, #0
 8006aba:	d037      	beq.n	8006b2c <_strtod_l+0x254>
 8006abc:	9007      	str	r0, [sp, #28]
 8006abe:	463d      	mov	r5, r7
 8006ac0:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8006ac4:	2a09      	cmp	r2, #9
 8006ac6:	d912      	bls.n	8006aee <_strtod_l+0x216>
 8006ac8:	2201      	movs	r2, #1
 8006aca:	e7c2      	b.n	8006a52 <_strtod_l+0x17a>
 8006acc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006ace:	1c5a      	adds	r2, r3, #1
 8006ad0:	921d      	str	r2, [sp, #116]	; 0x74
 8006ad2:	785b      	ldrb	r3, [r3, #1]
 8006ad4:	3001      	adds	r0, #1
 8006ad6:	2b30      	cmp	r3, #48	; 0x30
 8006ad8:	d0f8      	beq.n	8006acc <_strtod_l+0x1f4>
 8006ada:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8006ade:	2a08      	cmp	r2, #8
 8006ae0:	f200 84db 	bhi.w	800749a <_strtod_l+0xbc2>
 8006ae4:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8006ae6:	9007      	str	r0, [sp, #28]
 8006ae8:	2000      	movs	r0, #0
 8006aea:	920a      	str	r2, [sp, #40]	; 0x28
 8006aec:	4605      	mov	r5, r0
 8006aee:	3b30      	subs	r3, #48	; 0x30
 8006af0:	f100 0201 	add.w	r2, r0, #1
 8006af4:	d014      	beq.n	8006b20 <_strtod_l+0x248>
 8006af6:	9907      	ldr	r1, [sp, #28]
 8006af8:	4411      	add	r1, r2
 8006afa:	9107      	str	r1, [sp, #28]
 8006afc:	462a      	mov	r2, r5
 8006afe:	eb00 0e05 	add.w	lr, r0, r5
 8006b02:	210a      	movs	r1, #10
 8006b04:	4572      	cmp	r2, lr
 8006b06:	d113      	bne.n	8006b30 <_strtod_l+0x258>
 8006b08:	182a      	adds	r2, r5, r0
 8006b0a:	2a08      	cmp	r2, #8
 8006b0c:	f105 0501 	add.w	r5, r5, #1
 8006b10:	4405      	add	r5, r0
 8006b12:	dc1c      	bgt.n	8006b4e <_strtod_l+0x276>
 8006b14:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006b16:	220a      	movs	r2, #10
 8006b18:	fb02 3301 	mla	r3, r2, r1, r3
 8006b1c:	9309      	str	r3, [sp, #36]	; 0x24
 8006b1e:	2200      	movs	r2, #0
 8006b20:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006b22:	1c59      	adds	r1, r3, #1
 8006b24:	911d      	str	r1, [sp, #116]	; 0x74
 8006b26:	785b      	ldrb	r3, [r3, #1]
 8006b28:	4610      	mov	r0, r2
 8006b2a:	e7c9      	b.n	8006ac0 <_strtod_l+0x1e8>
 8006b2c:	4638      	mov	r0, r7
 8006b2e:	e7d2      	b.n	8006ad6 <_strtod_l+0x1fe>
 8006b30:	2a08      	cmp	r2, #8
 8006b32:	dc04      	bgt.n	8006b3e <_strtod_l+0x266>
 8006b34:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8006b36:	434e      	muls	r6, r1
 8006b38:	9609      	str	r6, [sp, #36]	; 0x24
 8006b3a:	3201      	adds	r2, #1
 8006b3c:	e7e2      	b.n	8006b04 <_strtod_l+0x22c>
 8006b3e:	f102 0c01 	add.w	ip, r2, #1
 8006b42:	f1bc 0f10 	cmp.w	ip, #16
 8006b46:	bfd8      	it	le
 8006b48:	fb01 f909 	mulle.w	r9, r1, r9
 8006b4c:	e7f5      	b.n	8006b3a <_strtod_l+0x262>
 8006b4e:	2d10      	cmp	r5, #16
 8006b50:	bfdc      	itt	le
 8006b52:	220a      	movle	r2, #10
 8006b54:	fb02 3909 	mlale	r9, r2, r9, r3
 8006b58:	e7e1      	b.n	8006b1e <_strtod_l+0x246>
 8006b5a:	2300      	movs	r3, #0
 8006b5c:	9307      	str	r3, [sp, #28]
 8006b5e:	2201      	movs	r2, #1
 8006b60:	e77c      	b.n	8006a5c <_strtod_l+0x184>
 8006b62:	f04f 0c00 	mov.w	ip, #0
 8006b66:	f108 0302 	add.w	r3, r8, #2
 8006b6a:	931d      	str	r3, [sp, #116]	; 0x74
 8006b6c:	f898 3002 	ldrb.w	r3, [r8, #2]
 8006b70:	e785      	b.n	8006a7e <_strtod_l+0x1a6>
 8006b72:	f04f 0c01 	mov.w	ip, #1
 8006b76:	e7f6      	b.n	8006b66 <_strtod_l+0x28e>
 8006b78:	0800bca0 	.word	0x0800bca0
 8006b7c:	0800ba4c 	.word	0x0800ba4c
 8006b80:	7ff00000 	.word	0x7ff00000
 8006b84:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006b86:	1c59      	adds	r1, r3, #1
 8006b88:	911d      	str	r1, [sp, #116]	; 0x74
 8006b8a:	785b      	ldrb	r3, [r3, #1]
 8006b8c:	2b30      	cmp	r3, #48	; 0x30
 8006b8e:	d0f9      	beq.n	8006b84 <_strtod_l+0x2ac>
 8006b90:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8006b94:	2908      	cmp	r1, #8
 8006b96:	f63f af79 	bhi.w	8006a8c <_strtod_l+0x1b4>
 8006b9a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8006b9e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006ba0:	9308      	str	r3, [sp, #32]
 8006ba2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006ba4:	1c59      	adds	r1, r3, #1
 8006ba6:	911d      	str	r1, [sp, #116]	; 0x74
 8006ba8:	785b      	ldrb	r3, [r3, #1]
 8006baa:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 8006bae:	2e09      	cmp	r6, #9
 8006bb0:	d937      	bls.n	8006c22 <_strtod_l+0x34a>
 8006bb2:	9e08      	ldr	r6, [sp, #32]
 8006bb4:	1b89      	subs	r1, r1, r6
 8006bb6:	2908      	cmp	r1, #8
 8006bb8:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8006bbc:	dc02      	bgt.n	8006bc4 <_strtod_l+0x2ec>
 8006bbe:	4576      	cmp	r6, lr
 8006bc0:	bfa8      	it	ge
 8006bc2:	4676      	movge	r6, lr
 8006bc4:	f1bc 0f00 	cmp.w	ip, #0
 8006bc8:	d000      	beq.n	8006bcc <_strtod_l+0x2f4>
 8006bca:	4276      	negs	r6, r6
 8006bcc:	2d00      	cmp	r5, #0
 8006bce:	d14f      	bne.n	8006c70 <_strtod_l+0x398>
 8006bd0:	9904      	ldr	r1, [sp, #16]
 8006bd2:	4301      	orrs	r1, r0
 8006bd4:	f47f aec2 	bne.w	800695c <_strtod_l+0x84>
 8006bd8:	2a00      	cmp	r2, #0
 8006bda:	f47f aedb 	bne.w	8006994 <_strtod_l+0xbc>
 8006bde:	2b69      	cmp	r3, #105	; 0x69
 8006be0:	d027      	beq.n	8006c32 <_strtod_l+0x35a>
 8006be2:	dc24      	bgt.n	8006c2e <_strtod_l+0x356>
 8006be4:	2b49      	cmp	r3, #73	; 0x49
 8006be6:	d024      	beq.n	8006c32 <_strtod_l+0x35a>
 8006be8:	2b4e      	cmp	r3, #78	; 0x4e
 8006bea:	f47f aed3 	bne.w	8006994 <_strtod_l+0xbc>
 8006bee:	499e      	ldr	r1, [pc, #632]	; (8006e68 <_strtod_l+0x590>)
 8006bf0:	a81d      	add	r0, sp, #116	; 0x74
 8006bf2:	f001 fe41 	bl	8008878 <__match>
 8006bf6:	2800      	cmp	r0, #0
 8006bf8:	f43f aecc 	beq.w	8006994 <_strtod_l+0xbc>
 8006bfc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006bfe:	781b      	ldrb	r3, [r3, #0]
 8006c00:	2b28      	cmp	r3, #40	; 0x28
 8006c02:	d12d      	bne.n	8006c60 <_strtod_l+0x388>
 8006c04:	4999      	ldr	r1, [pc, #612]	; (8006e6c <_strtod_l+0x594>)
 8006c06:	aa20      	add	r2, sp, #128	; 0x80
 8006c08:	a81d      	add	r0, sp, #116	; 0x74
 8006c0a:	f001 fe49 	bl	80088a0 <__hexnan>
 8006c0e:	2805      	cmp	r0, #5
 8006c10:	d126      	bne.n	8006c60 <_strtod_l+0x388>
 8006c12:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006c14:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 8006c18:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8006c1c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8006c20:	e69c      	b.n	800695c <_strtod_l+0x84>
 8006c22:	210a      	movs	r1, #10
 8006c24:	fb01 3e0e 	mla	lr, r1, lr, r3
 8006c28:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8006c2c:	e7b9      	b.n	8006ba2 <_strtod_l+0x2ca>
 8006c2e:	2b6e      	cmp	r3, #110	; 0x6e
 8006c30:	e7db      	b.n	8006bea <_strtod_l+0x312>
 8006c32:	498f      	ldr	r1, [pc, #572]	; (8006e70 <_strtod_l+0x598>)
 8006c34:	a81d      	add	r0, sp, #116	; 0x74
 8006c36:	f001 fe1f 	bl	8008878 <__match>
 8006c3a:	2800      	cmp	r0, #0
 8006c3c:	f43f aeaa 	beq.w	8006994 <_strtod_l+0xbc>
 8006c40:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006c42:	498c      	ldr	r1, [pc, #560]	; (8006e74 <_strtod_l+0x59c>)
 8006c44:	3b01      	subs	r3, #1
 8006c46:	a81d      	add	r0, sp, #116	; 0x74
 8006c48:	931d      	str	r3, [sp, #116]	; 0x74
 8006c4a:	f001 fe15 	bl	8008878 <__match>
 8006c4e:	b910      	cbnz	r0, 8006c56 <_strtod_l+0x37e>
 8006c50:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006c52:	3301      	adds	r3, #1
 8006c54:	931d      	str	r3, [sp, #116]	; 0x74
 8006c56:	f8df b22c 	ldr.w	fp, [pc, #556]	; 8006e84 <_strtod_l+0x5ac>
 8006c5a:	f04f 0a00 	mov.w	sl, #0
 8006c5e:	e67d      	b.n	800695c <_strtod_l+0x84>
 8006c60:	4885      	ldr	r0, [pc, #532]	; (8006e78 <_strtod_l+0x5a0>)
 8006c62:	f002 fdb5 	bl	80097d0 <nan>
 8006c66:	ed8d 0b04 	vstr	d0, [sp, #16]
 8006c6a:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8006c6e:	e675      	b.n	800695c <_strtod_l+0x84>
 8006c70:	9b07      	ldr	r3, [sp, #28]
 8006c72:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006c74:	1af3      	subs	r3, r6, r3
 8006c76:	2f00      	cmp	r7, #0
 8006c78:	bf08      	it	eq
 8006c7a:	462f      	moveq	r7, r5
 8006c7c:	2d10      	cmp	r5, #16
 8006c7e:	9308      	str	r3, [sp, #32]
 8006c80:	46a8      	mov	r8, r5
 8006c82:	bfa8      	it	ge
 8006c84:	f04f 0810 	movge.w	r8, #16
 8006c88:	f7f9 fc3c 	bl	8000504 <__aeabi_ui2d>
 8006c8c:	2d09      	cmp	r5, #9
 8006c8e:	4682      	mov	sl, r0
 8006c90:	468b      	mov	fp, r1
 8006c92:	dd13      	ble.n	8006cbc <_strtod_l+0x3e4>
 8006c94:	4b79      	ldr	r3, [pc, #484]	; (8006e7c <_strtod_l+0x5a4>)
 8006c96:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8006c9a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8006c9e:	f7f9 fcab 	bl	80005f8 <__aeabi_dmul>
 8006ca2:	4682      	mov	sl, r0
 8006ca4:	4648      	mov	r0, r9
 8006ca6:	468b      	mov	fp, r1
 8006ca8:	f7f9 fc2c 	bl	8000504 <__aeabi_ui2d>
 8006cac:	4602      	mov	r2, r0
 8006cae:	460b      	mov	r3, r1
 8006cb0:	4650      	mov	r0, sl
 8006cb2:	4659      	mov	r1, fp
 8006cb4:	f7f9 faea 	bl	800028c <__adddf3>
 8006cb8:	4682      	mov	sl, r0
 8006cba:	468b      	mov	fp, r1
 8006cbc:	2d0f      	cmp	r5, #15
 8006cbe:	dc38      	bgt.n	8006d32 <_strtod_l+0x45a>
 8006cc0:	9b08      	ldr	r3, [sp, #32]
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	f43f ae4a 	beq.w	800695c <_strtod_l+0x84>
 8006cc8:	dd24      	ble.n	8006d14 <_strtod_l+0x43c>
 8006cca:	2b16      	cmp	r3, #22
 8006ccc:	dc0b      	bgt.n	8006ce6 <_strtod_l+0x40e>
 8006cce:	4d6b      	ldr	r5, [pc, #428]	; (8006e7c <_strtod_l+0x5a4>)
 8006cd0:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 8006cd4:	e9d5 0100 	ldrd	r0, r1, [r5]
 8006cd8:	4652      	mov	r2, sl
 8006cda:	465b      	mov	r3, fp
 8006cdc:	f7f9 fc8c 	bl	80005f8 <__aeabi_dmul>
 8006ce0:	4682      	mov	sl, r0
 8006ce2:	468b      	mov	fp, r1
 8006ce4:	e63a      	b.n	800695c <_strtod_l+0x84>
 8006ce6:	9a08      	ldr	r2, [sp, #32]
 8006ce8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8006cec:	4293      	cmp	r3, r2
 8006cee:	db20      	blt.n	8006d32 <_strtod_l+0x45a>
 8006cf0:	4c62      	ldr	r4, [pc, #392]	; (8006e7c <_strtod_l+0x5a4>)
 8006cf2:	f1c5 050f 	rsb	r5, r5, #15
 8006cf6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8006cfa:	4652      	mov	r2, sl
 8006cfc:	465b      	mov	r3, fp
 8006cfe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006d02:	f7f9 fc79 	bl	80005f8 <__aeabi_dmul>
 8006d06:	9b08      	ldr	r3, [sp, #32]
 8006d08:	1b5d      	subs	r5, r3, r5
 8006d0a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8006d0e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8006d12:	e7e3      	b.n	8006cdc <_strtod_l+0x404>
 8006d14:	9b08      	ldr	r3, [sp, #32]
 8006d16:	3316      	adds	r3, #22
 8006d18:	db0b      	blt.n	8006d32 <_strtod_l+0x45a>
 8006d1a:	9b07      	ldr	r3, [sp, #28]
 8006d1c:	4a57      	ldr	r2, [pc, #348]	; (8006e7c <_strtod_l+0x5a4>)
 8006d1e:	1b9e      	subs	r6, r3, r6
 8006d20:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8006d24:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006d28:	4650      	mov	r0, sl
 8006d2a:	4659      	mov	r1, fp
 8006d2c:	f7f9 fd8e 	bl	800084c <__aeabi_ddiv>
 8006d30:	e7d6      	b.n	8006ce0 <_strtod_l+0x408>
 8006d32:	9b08      	ldr	r3, [sp, #32]
 8006d34:	eba5 0808 	sub.w	r8, r5, r8
 8006d38:	4498      	add	r8, r3
 8006d3a:	f1b8 0f00 	cmp.w	r8, #0
 8006d3e:	dd71      	ble.n	8006e24 <_strtod_l+0x54c>
 8006d40:	f018 030f 	ands.w	r3, r8, #15
 8006d44:	d00a      	beq.n	8006d5c <_strtod_l+0x484>
 8006d46:	494d      	ldr	r1, [pc, #308]	; (8006e7c <_strtod_l+0x5a4>)
 8006d48:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006d4c:	4652      	mov	r2, sl
 8006d4e:	465b      	mov	r3, fp
 8006d50:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006d54:	f7f9 fc50 	bl	80005f8 <__aeabi_dmul>
 8006d58:	4682      	mov	sl, r0
 8006d5a:	468b      	mov	fp, r1
 8006d5c:	f038 080f 	bics.w	r8, r8, #15
 8006d60:	d04d      	beq.n	8006dfe <_strtod_l+0x526>
 8006d62:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8006d66:	dd22      	ble.n	8006dae <_strtod_l+0x4d6>
 8006d68:	2500      	movs	r5, #0
 8006d6a:	462e      	mov	r6, r5
 8006d6c:	9509      	str	r5, [sp, #36]	; 0x24
 8006d6e:	9507      	str	r5, [sp, #28]
 8006d70:	2322      	movs	r3, #34	; 0x22
 8006d72:	f8df b110 	ldr.w	fp, [pc, #272]	; 8006e84 <_strtod_l+0x5ac>
 8006d76:	6023      	str	r3, [r4, #0]
 8006d78:	f04f 0a00 	mov.w	sl, #0
 8006d7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	f43f adec 	beq.w	800695c <_strtod_l+0x84>
 8006d84:	991e      	ldr	r1, [sp, #120]	; 0x78
 8006d86:	4620      	mov	r0, r4
 8006d88:	f001 fe92 	bl	8008ab0 <_Bfree>
 8006d8c:	9907      	ldr	r1, [sp, #28]
 8006d8e:	4620      	mov	r0, r4
 8006d90:	f001 fe8e 	bl	8008ab0 <_Bfree>
 8006d94:	4631      	mov	r1, r6
 8006d96:	4620      	mov	r0, r4
 8006d98:	f001 fe8a 	bl	8008ab0 <_Bfree>
 8006d9c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006d9e:	4620      	mov	r0, r4
 8006da0:	f001 fe86 	bl	8008ab0 <_Bfree>
 8006da4:	4629      	mov	r1, r5
 8006da6:	4620      	mov	r0, r4
 8006da8:	f001 fe82 	bl	8008ab0 <_Bfree>
 8006dac:	e5d6      	b.n	800695c <_strtod_l+0x84>
 8006dae:	2300      	movs	r3, #0
 8006db0:	ea4f 1828 	mov.w	r8, r8, asr #4
 8006db4:	4650      	mov	r0, sl
 8006db6:	4659      	mov	r1, fp
 8006db8:	4699      	mov	r9, r3
 8006dba:	f1b8 0f01 	cmp.w	r8, #1
 8006dbe:	dc21      	bgt.n	8006e04 <_strtod_l+0x52c>
 8006dc0:	b10b      	cbz	r3, 8006dc6 <_strtod_l+0x4ee>
 8006dc2:	4682      	mov	sl, r0
 8006dc4:	468b      	mov	fp, r1
 8006dc6:	4b2e      	ldr	r3, [pc, #184]	; (8006e80 <_strtod_l+0x5a8>)
 8006dc8:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8006dcc:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8006dd0:	4652      	mov	r2, sl
 8006dd2:	465b      	mov	r3, fp
 8006dd4:	e9d9 0100 	ldrd	r0, r1, [r9]
 8006dd8:	f7f9 fc0e 	bl	80005f8 <__aeabi_dmul>
 8006ddc:	4b29      	ldr	r3, [pc, #164]	; (8006e84 <_strtod_l+0x5ac>)
 8006dde:	460a      	mov	r2, r1
 8006de0:	400b      	ands	r3, r1
 8006de2:	4929      	ldr	r1, [pc, #164]	; (8006e88 <_strtod_l+0x5b0>)
 8006de4:	428b      	cmp	r3, r1
 8006de6:	4682      	mov	sl, r0
 8006de8:	d8be      	bhi.n	8006d68 <_strtod_l+0x490>
 8006dea:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8006dee:	428b      	cmp	r3, r1
 8006df0:	bf86      	itte	hi
 8006df2:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8006e8c <_strtod_l+0x5b4>
 8006df6:	f04f 3aff 	movhi.w	sl, #4294967295
 8006dfa:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8006dfe:	2300      	movs	r3, #0
 8006e00:	9304      	str	r3, [sp, #16]
 8006e02:	e081      	b.n	8006f08 <_strtod_l+0x630>
 8006e04:	f018 0f01 	tst.w	r8, #1
 8006e08:	d007      	beq.n	8006e1a <_strtod_l+0x542>
 8006e0a:	4b1d      	ldr	r3, [pc, #116]	; (8006e80 <_strtod_l+0x5a8>)
 8006e0c:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8006e10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e14:	f7f9 fbf0 	bl	80005f8 <__aeabi_dmul>
 8006e18:	2301      	movs	r3, #1
 8006e1a:	f109 0901 	add.w	r9, r9, #1
 8006e1e:	ea4f 0868 	mov.w	r8, r8, asr #1
 8006e22:	e7ca      	b.n	8006dba <_strtod_l+0x4e2>
 8006e24:	d0eb      	beq.n	8006dfe <_strtod_l+0x526>
 8006e26:	f1c8 0800 	rsb	r8, r8, #0
 8006e2a:	f018 020f 	ands.w	r2, r8, #15
 8006e2e:	d00a      	beq.n	8006e46 <_strtod_l+0x56e>
 8006e30:	4b12      	ldr	r3, [pc, #72]	; (8006e7c <_strtod_l+0x5a4>)
 8006e32:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006e36:	4650      	mov	r0, sl
 8006e38:	4659      	mov	r1, fp
 8006e3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e3e:	f7f9 fd05 	bl	800084c <__aeabi_ddiv>
 8006e42:	4682      	mov	sl, r0
 8006e44:	468b      	mov	fp, r1
 8006e46:	ea5f 1828 	movs.w	r8, r8, asr #4
 8006e4a:	d0d8      	beq.n	8006dfe <_strtod_l+0x526>
 8006e4c:	f1b8 0f1f 	cmp.w	r8, #31
 8006e50:	dd1e      	ble.n	8006e90 <_strtod_l+0x5b8>
 8006e52:	2500      	movs	r5, #0
 8006e54:	462e      	mov	r6, r5
 8006e56:	9509      	str	r5, [sp, #36]	; 0x24
 8006e58:	9507      	str	r5, [sp, #28]
 8006e5a:	2322      	movs	r3, #34	; 0x22
 8006e5c:	f04f 0a00 	mov.w	sl, #0
 8006e60:	f04f 0b00 	mov.w	fp, #0
 8006e64:	6023      	str	r3, [r4, #0]
 8006e66:	e789      	b.n	8006d7c <_strtod_l+0x4a4>
 8006e68:	0800ba1d 	.word	0x0800ba1d
 8006e6c:	0800ba60 	.word	0x0800ba60
 8006e70:	0800ba15 	.word	0x0800ba15
 8006e74:	0800bba4 	.word	0x0800bba4
 8006e78:	0800be60 	.word	0x0800be60
 8006e7c:	0800bd40 	.word	0x0800bd40
 8006e80:	0800bd18 	.word	0x0800bd18
 8006e84:	7ff00000 	.word	0x7ff00000
 8006e88:	7ca00000 	.word	0x7ca00000
 8006e8c:	7fefffff 	.word	0x7fefffff
 8006e90:	f018 0310 	ands.w	r3, r8, #16
 8006e94:	bf18      	it	ne
 8006e96:	236a      	movne	r3, #106	; 0x6a
 8006e98:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 8007250 <_strtod_l+0x978>
 8006e9c:	9304      	str	r3, [sp, #16]
 8006e9e:	4650      	mov	r0, sl
 8006ea0:	4659      	mov	r1, fp
 8006ea2:	2300      	movs	r3, #0
 8006ea4:	f018 0f01 	tst.w	r8, #1
 8006ea8:	d004      	beq.n	8006eb4 <_strtod_l+0x5dc>
 8006eaa:	e9d9 2300 	ldrd	r2, r3, [r9]
 8006eae:	f7f9 fba3 	bl	80005f8 <__aeabi_dmul>
 8006eb2:	2301      	movs	r3, #1
 8006eb4:	ea5f 0868 	movs.w	r8, r8, asr #1
 8006eb8:	f109 0908 	add.w	r9, r9, #8
 8006ebc:	d1f2      	bne.n	8006ea4 <_strtod_l+0x5cc>
 8006ebe:	b10b      	cbz	r3, 8006ec4 <_strtod_l+0x5ec>
 8006ec0:	4682      	mov	sl, r0
 8006ec2:	468b      	mov	fp, r1
 8006ec4:	9b04      	ldr	r3, [sp, #16]
 8006ec6:	b1bb      	cbz	r3, 8006ef8 <_strtod_l+0x620>
 8006ec8:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8006ecc:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	4659      	mov	r1, fp
 8006ed4:	dd10      	ble.n	8006ef8 <_strtod_l+0x620>
 8006ed6:	2b1f      	cmp	r3, #31
 8006ed8:	f340 8128 	ble.w	800712c <_strtod_l+0x854>
 8006edc:	2b34      	cmp	r3, #52	; 0x34
 8006ede:	bfde      	ittt	le
 8006ee0:	3b20      	suble	r3, #32
 8006ee2:	f04f 32ff 	movle.w	r2, #4294967295
 8006ee6:	fa02 f303 	lslle.w	r3, r2, r3
 8006eea:	f04f 0a00 	mov.w	sl, #0
 8006eee:	bfcc      	ite	gt
 8006ef0:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8006ef4:	ea03 0b01 	andle.w	fp, r3, r1
 8006ef8:	2200      	movs	r2, #0
 8006efa:	2300      	movs	r3, #0
 8006efc:	4650      	mov	r0, sl
 8006efe:	4659      	mov	r1, fp
 8006f00:	f7f9 fde2 	bl	8000ac8 <__aeabi_dcmpeq>
 8006f04:	2800      	cmp	r0, #0
 8006f06:	d1a4      	bne.n	8006e52 <_strtod_l+0x57a>
 8006f08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f0a:	9300      	str	r3, [sp, #0]
 8006f0c:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006f0e:	462b      	mov	r3, r5
 8006f10:	463a      	mov	r2, r7
 8006f12:	4620      	mov	r0, r4
 8006f14:	f001 fe38 	bl	8008b88 <__s2b>
 8006f18:	9009      	str	r0, [sp, #36]	; 0x24
 8006f1a:	2800      	cmp	r0, #0
 8006f1c:	f43f af24 	beq.w	8006d68 <_strtod_l+0x490>
 8006f20:	9b07      	ldr	r3, [sp, #28]
 8006f22:	1b9e      	subs	r6, r3, r6
 8006f24:	9b08      	ldr	r3, [sp, #32]
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	bfb4      	ite	lt
 8006f2a:	4633      	movlt	r3, r6
 8006f2c:	2300      	movge	r3, #0
 8006f2e:	9310      	str	r3, [sp, #64]	; 0x40
 8006f30:	9b08      	ldr	r3, [sp, #32]
 8006f32:	2500      	movs	r5, #0
 8006f34:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8006f38:	9318      	str	r3, [sp, #96]	; 0x60
 8006f3a:	462e      	mov	r6, r5
 8006f3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f3e:	4620      	mov	r0, r4
 8006f40:	6859      	ldr	r1, [r3, #4]
 8006f42:	f001 fd75 	bl	8008a30 <_Balloc>
 8006f46:	9007      	str	r0, [sp, #28]
 8006f48:	2800      	cmp	r0, #0
 8006f4a:	f43f af11 	beq.w	8006d70 <_strtod_l+0x498>
 8006f4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f50:	691a      	ldr	r2, [r3, #16]
 8006f52:	3202      	adds	r2, #2
 8006f54:	f103 010c 	add.w	r1, r3, #12
 8006f58:	0092      	lsls	r2, r2, #2
 8006f5a:	300c      	adds	r0, #12
 8006f5c:	f001 fd5a 	bl	8008a14 <memcpy>
 8006f60:	ec4b ab10 	vmov	d0, sl, fp
 8006f64:	aa20      	add	r2, sp, #128	; 0x80
 8006f66:	a91f      	add	r1, sp, #124	; 0x7c
 8006f68:	4620      	mov	r0, r4
 8006f6a:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8006f6e:	f002 f947 	bl	8009200 <__d2b>
 8006f72:	901e      	str	r0, [sp, #120]	; 0x78
 8006f74:	2800      	cmp	r0, #0
 8006f76:	f43f aefb 	beq.w	8006d70 <_strtod_l+0x498>
 8006f7a:	2101      	movs	r1, #1
 8006f7c:	4620      	mov	r0, r4
 8006f7e:	f001 fe9d 	bl	8008cbc <__i2b>
 8006f82:	4606      	mov	r6, r0
 8006f84:	2800      	cmp	r0, #0
 8006f86:	f43f aef3 	beq.w	8006d70 <_strtod_l+0x498>
 8006f8a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006f8c:	9904      	ldr	r1, [sp, #16]
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	bfab      	itete	ge
 8006f92:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 8006f94:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 8006f96:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 8006f98:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 8006f9c:	bfac      	ite	ge
 8006f9e:	eb03 0902 	addge.w	r9, r3, r2
 8006fa2:	1ad7      	sublt	r7, r2, r3
 8006fa4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006fa6:	eba3 0801 	sub.w	r8, r3, r1
 8006faa:	4490      	add	r8, r2
 8006fac:	4ba3      	ldr	r3, [pc, #652]	; (800723c <_strtod_l+0x964>)
 8006fae:	f108 38ff 	add.w	r8, r8, #4294967295
 8006fb2:	4598      	cmp	r8, r3
 8006fb4:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8006fb8:	f280 80cc 	bge.w	8007154 <_strtod_l+0x87c>
 8006fbc:	eba3 0308 	sub.w	r3, r3, r8
 8006fc0:	2b1f      	cmp	r3, #31
 8006fc2:	eba2 0203 	sub.w	r2, r2, r3
 8006fc6:	f04f 0101 	mov.w	r1, #1
 8006fca:	f300 80b6 	bgt.w	800713a <_strtod_l+0x862>
 8006fce:	fa01 f303 	lsl.w	r3, r1, r3
 8006fd2:	9311      	str	r3, [sp, #68]	; 0x44
 8006fd4:	2300      	movs	r3, #0
 8006fd6:	930c      	str	r3, [sp, #48]	; 0x30
 8006fd8:	eb09 0802 	add.w	r8, r9, r2
 8006fdc:	9b04      	ldr	r3, [sp, #16]
 8006fde:	45c1      	cmp	r9, r8
 8006fe0:	4417      	add	r7, r2
 8006fe2:	441f      	add	r7, r3
 8006fe4:	464b      	mov	r3, r9
 8006fe6:	bfa8      	it	ge
 8006fe8:	4643      	movge	r3, r8
 8006fea:	42bb      	cmp	r3, r7
 8006fec:	bfa8      	it	ge
 8006fee:	463b      	movge	r3, r7
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	bfc2      	ittt	gt
 8006ff4:	eba8 0803 	subgt.w	r8, r8, r3
 8006ff8:	1aff      	subgt	r7, r7, r3
 8006ffa:	eba9 0903 	subgt.w	r9, r9, r3
 8006ffe:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007000:	2b00      	cmp	r3, #0
 8007002:	dd17      	ble.n	8007034 <_strtod_l+0x75c>
 8007004:	4631      	mov	r1, r6
 8007006:	461a      	mov	r2, r3
 8007008:	4620      	mov	r0, r4
 800700a:	f001 ff13 	bl	8008e34 <__pow5mult>
 800700e:	4606      	mov	r6, r0
 8007010:	2800      	cmp	r0, #0
 8007012:	f43f aead 	beq.w	8006d70 <_strtod_l+0x498>
 8007016:	4601      	mov	r1, r0
 8007018:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800701a:	4620      	mov	r0, r4
 800701c:	f001 fe64 	bl	8008ce8 <__multiply>
 8007020:	900f      	str	r0, [sp, #60]	; 0x3c
 8007022:	2800      	cmp	r0, #0
 8007024:	f43f aea4 	beq.w	8006d70 <_strtod_l+0x498>
 8007028:	991e      	ldr	r1, [sp, #120]	; 0x78
 800702a:	4620      	mov	r0, r4
 800702c:	f001 fd40 	bl	8008ab0 <_Bfree>
 8007030:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007032:	931e      	str	r3, [sp, #120]	; 0x78
 8007034:	f1b8 0f00 	cmp.w	r8, #0
 8007038:	f300 8091 	bgt.w	800715e <_strtod_l+0x886>
 800703c:	9b08      	ldr	r3, [sp, #32]
 800703e:	2b00      	cmp	r3, #0
 8007040:	dd08      	ble.n	8007054 <_strtod_l+0x77c>
 8007042:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8007044:	9907      	ldr	r1, [sp, #28]
 8007046:	4620      	mov	r0, r4
 8007048:	f001 fef4 	bl	8008e34 <__pow5mult>
 800704c:	9007      	str	r0, [sp, #28]
 800704e:	2800      	cmp	r0, #0
 8007050:	f43f ae8e 	beq.w	8006d70 <_strtod_l+0x498>
 8007054:	2f00      	cmp	r7, #0
 8007056:	dd08      	ble.n	800706a <_strtod_l+0x792>
 8007058:	9907      	ldr	r1, [sp, #28]
 800705a:	463a      	mov	r2, r7
 800705c:	4620      	mov	r0, r4
 800705e:	f001 ff43 	bl	8008ee8 <__lshift>
 8007062:	9007      	str	r0, [sp, #28]
 8007064:	2800      	cmp	r0, #0
 8007066:	f43f ae83 	beq.w	8006d70 <_strtod_l+0x498>
 800706a:	f1b9 0f00 	cmp.w	r9, #0
 800706e:	dd08      	ble.n	8007082 <_strtod_l+0x7aa>
 8007070:	4631      	mov	r1, r6
 8007072:	464a      	mov	r2, r9
 8007074:	4620      	mov	r0, r4
 8007076:	f001 ff37 	bl	8008ee8 <__lshift>
 800707a:	4606      	mov	r6, r0
 800707c:	2800      	cmp	r0, #0
 800707e:	f43f ae77 	beq.w	8006d70 <_strtod_l+0x498>
 8007082:	9a07      	ldr	r2, [sp, #28]
 8007084:	991e      	ldr	r1, [sp, #120]	; 0x78
 8007086:	4620      	mov	r0, r4
 8007088:	f001 ffb6 	bl	8008ff8 <__mdiff>
 800708c:	4605      	mov	r5, r0
 800708e:	2800      	cmp	r0, #0
 8007090:	f43f ae6e 	beq.w	8006d70 <_strtod_l+0x498>
 8007094:	68c3      	ldr	r3, [r0, #12]
 8007096:	930f      	str	r3, [sp, #60]	; 0x3c
 8007098:	2300      	movs	r3, #0
 800709a:	60c3      	str	r3, [r0, #12]
 800709c:	4631      	mov	r1, r6
 800709e:	f001 ff8f 	bl	8008fc0 <__mcmp>
 80070a2:	2800      	cmp	r0, #0
 80070a4:	da65      	bge.n	8007172 <_strtod_l+0x89a>
 80070a6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80070a8:	ea53 030a 	orrs.w	r3, r3, sl
 80070ac:	f040 8087 	bne.w	80071be <_strtod_l+0x8e6>
 80070b0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	f040 8082 	bne.w	80071be <_strtod_l+0x8e6>
 80070ba:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80070be:	0d1b      	lsrs	r3, r3, #20
 80070c0:	051b      	lsls	r3, r3, #20
 80070c2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80070c6:	d97a      	bls.n	80071be <_strtod_l+0x8e6>
 80070c8:	696b      	ldr	r3, [r5, #20]
 80070ca:	b913      	cbnz	r3, 80070d2 <_strtod_l+0x7fa>
 80070cc:	692b      	ldr	r3, [r5, #16]
 80070ce:	2b01      	cmp	r3, #1
 80070d0:	dd75      	ble.n	80071be <_strtod_l+0x8e6>
 80070d2:	4629      	mov	r1, r5
 80070d4:	2201      	movs	r2, #1
 80070d6:	4620      	mov	r0, r4
 80070d8:	f001 ff06 	bl	8008ee8 <__lshift>
 80070dc:	4631      	mov	r1, r6
 80070de:	4605      	mov	r5, r0
 80070e0:	f001 ff6e 	bl	8008fc0 <__mcmp>
 80070e4:	2800      	cmp	r0, #0
 80070e6:	dd6a      	ble.n	80071be <_strtod_l+0x8e6>
 80070e8:	9904      	ldr	r1, [sp, #16]
 80070ea:	4a55      	ldr	r2, [pc, #340]	; (8007240 <_strtod_l+0x968>)
 80070ec:	465b      	mov	r3, fp
 80070ee:	2900      	cmp	r1, #0
 80070f0:	f000 8085 	beq.w	80071fe <_strtod_l+0x926>
 80070f4:	ea02 010b 	and.w	r1, r2, fp
 80070f8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80070fc:	dc7f      	bgt.n	80071fe <_strtod_l+0x926>
 80070fe:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8007102:	f77f aeaa 	ble.w	8006e5a <_strtod_l+0x582>
 8007106:	4a4f      	ldr	r2, [pc, #316]	; (8007244 <_strtod_l+0x96c>)
 8007108:	2300      	movs	r3, #0
 800710a:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 800710e:	4650      	mov	r0, sl
 8007110:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 8007114:	4659      	mov	r1, fp
 8007116:	f7f9 fa6f 	bl	80005f8 <__aeabi_dmul>
 800711a:	460b      	mov	r3, r1
 800711c:	4303      	orrs	r3, r0
 800711e:	bf08      	it	eq
 8007120:	2322      	moveq	r3, #34	; 0x22
 8007122:	4682      	mov	sl, r0
 8007124:	468b      	mov	fp, r1
 8007126:	bf08      	it	eq
 8007128:	6023      	streq	r3, [r4, #0]
 800712a:	e62b      	b.n	8006d84 <_strtod_l+0x4ac>
 800712c:	f04f 32ff 	mov.w	r2, #4294967295
 8007130:	fa02 f303 	lsl.w	r3, r2, r3
 8007134:	ea03 0a0a 	and.w	sl, r3, sl
 8007138:	e6de      	b.n	8006ef8 <_strtod_l+0x620>
 800713a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800713e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8007142:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8007146:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800714a:	fa01 f308 	lsl.w	r3, r1, r8
 800714e:	930c      	str	r3, [sp, #48]	; 0x30
 8007150:	9111      	str	r1, [sp, #68]	; 0x44
 8007152:	e741      	b.n	8006fd8 <_strtod_l+0x700>
 8007154:	2300      	movs	r3, #0
 8007156:	930c      	str	r3, [sp, #48]	; 0x30
 8007158:	2301      	movs	r3, #1
 800715a:	9311      	str	r3, [sp, #68]	; 0x44
 800715c:	e73c      	b.n	8006fd8 <_strtod_l+0x700>
 800715e:	991e      	ldr	r1, [sp, #120]	; 0x78
 8007160:	4642      	mov	r2, r8
 8007162:	4620      	mov	r0, r4
 8007164:	f001 fec0 	bl	8008ee8 <__lshift>
 8007168:	901e      	str	r0, [sp, #120]	; 0x78
 800716a:	2800      	cmp	r0, #0
 800716c:	f47f af66 	bne.w	800703c <_strtod_l+0x764>
 8007170:	e5fe      	b.n	8006d70 <_strtod_l+0x498>
 8007172:	465f      	mov	r7, fp
 8007174:	d16e      	bne.n	8007254 <_strtod_l+0x97c>
 8007176:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007178:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800717c:	b342      	cbz	r2, 80071d0 <_strtod_l+0x8f8>
 800717e:	4a32      	ldr	r2, [pc, #200]	; (8007248 <_strtod_l+0x970>)
 8007180:	4293      	cmp	r3, r2
 8007182:	d128      	bne.n	80071d6 <_strtod_l+0x8fe>
 8007184:	9b04      	ldr	r3, [sp, #16]
 8007186:	4650      	mov	r0, sl
 8007188:	b1eb      	cbz	r3, 80071c6 <_strtod_l+0x8ee>
 800718a:	4a2d      	ldr	r2, [pc, #180]	; (8007240 <_strtod_l+0x968>)
 800718c:	403a      	ands	r2, r7
 800718e:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8007192:	f04f 31ff 	mov.w	r1, #4294967295
 8007196:	d819      	bhi.n	80071cc <_strtod_l+0x8f4>
 8007198:	0d12      	lsrs	r2, r2, #20
 800719a:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800719e:	fa01 f303 	lsl.w	r3, r1, r3
 80071a2:	4298      	cmp	r0, r3
 80071a4:	d117      	bne.n	80071d6 <_strtod_l+0x8fe>
 80071a6:	4b29      	ldr	r3, [pc, #164]	; (800724c <_strtod_l+0x974>)
 80071a8:	429f      	cmp	r7, r3
 80071aa:	d102      	bne.n	80071b2 <_strtod_l+0x8da>
 80071ac:	3001      	adds	r0, #1
 80071ae:	f43f addf 	beq.w	8006d70 <_strtod_l+0x498>
 80071b2:	4b23      	ldr	r3, [pc, #140]	; (8007240 <_strtod_l+0x968>)
 80071b4:	403b      	ands	r3, r7
 80071b6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80071ba:	f04f 0a00 	mov.w	sl, #0
 80071be:	9b04      	ldr	r3, [sp, #16]
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d1a0      	bne.n	8007106 <_strtod_l+0x82e>
 80071c4:	e5de      	b.n	8006d84 <_strtod_l+0x4ac>
 80071c6:	f04f 33ff 	mov.w	r3, #4294967295
 80071ca:	e7ea      	b.n	80071a2 <_strtod_l+0x8ca>
 80071cc:	460b      	mov	r3, r1
 80071ce:	e7e8      	b.n	80071a2 <_strtod_l+0x8ca>
 80071d0:	ea53 030a 	orrs.w	r3, r3, sl
 80071d4:	d088      	beq.n	80070e8 <_strtod_l+0x810>
 80071d6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80071d8:	b1db      	cbz	r3, 8007212 <_strtod_l+0x93a>
 80071da:	423b      	tst	r3, r7
 80071dc:	d0ef      	beq.n	80071be <_strtod_l+0x8e6>
 80071de:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80071e0:	9a04      	ldr	r2, [sp, #16]
 80071e2:	4650      	mov	r0, sl
 80071e4:	4659      	mov	r1, fp
 80071e6:	b1c3      	cbz	r3, 800721a <_strtod_l+0x942>
 80071e8:	f7ff fb58 	bl	800689c <sulp>
 80071ec:	4602      	mov	r2, r0
 80071ee:	460b      	mov	r3, r1
 80071f0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80071f4:	f7f9 f84a 	bl	800028c <__adddf3>
 80071f8:	4682      	mov	sl, r0
 80071fa:	468b      	mov	fp, r1
 80071fc:	e7df      	b.n	80071be <_strtod_l+0x8e6>
 80071fe:	4013      	ands	r3, r2
 8007200:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8007204:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8007208:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800720c:	f04f 3aff 	mov.w	sl, #4294967295
 8007210:	e7d5      	b.n	80071be <_strtod_l+0x8e6>
 8007212:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007214:	ea13 0f0a 	tst.w	r3, sl
 8007218:	e7e0      	b.n	80071dc <_strtod_l+0x904>
 800721a:	f7ff fb3f 	bl	800689c <sulp>
 800721e:	4602      	mov	r2, r0
 8007220:	460b      	mov	r3, r1
 8007222:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007226:	f7f9 f82f 	bl	8000288 <__aeabi_dsub>
 800722a:	2200      	movs	r2, #0
 800722c:	2300      	movs	r3, #0
 800722e:	4682      	mov	sl, r0
 8007230:	468b      	mov	fp, r1
 8007232:	f7f9 fc49 	bl	8000ac8 <__aeabi_dcmpeq>
 8007236:	2800      	cmp	r0, #0
 8007238:	d0c1      	beq.n	80071be <_strtod_l+0x8e6>
 800723a:	e60e      	b.n	8006e5a <_strtod_l+0x582>
 800723c:	fffffc02 	.word	0xfffffc02
 8007240:	7ff00000 	.word	0x7ff00000
 8007244:	39500000 	.word	0x39500000
 8007248:	000fffff 	.word	0x000fffff
 800724c:	7fefffff 	.word	0x7fefffff
 8007250:	0800ba78 	.word	0x0800ba78
 8007254:	4631      	mov	r1, r6
 8007256:	4628      	mov	r0, r5
 8007258:	f002 f82e 	bl	80092b8 <__ratio>
 800725c:	ec59 8b10 	vmov	r8, r9, d0
 8007260:	ee10 0a10 	vmov	r0, s0
 8007264:	2200      	movs	r2, #0
 8007266:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800726a:	4649      	mov	r1, r9
 800726c:	f7f9 fc40 	bl	8000af0 <__aeabi_dcmple>
 8007270:	2800      	cmp	r0, #0
 8007272:	d07c      	beq.n	800736e <_strtod_l+0xa96>
 8007274:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007276:	2b00      	cmp	r3, #0
 8007278:	d04c      	beq.n	8007314 <_strtod_l+0xa3c>
 800727a:	4b95      	ldr	r3, [pc, #596]	; (80074d0 <_strtod_l+0xbf8>)
 800727c:	2200      	movs	r2, #0
 800727e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8007282:	f8df 924c 	ldr.w	r9, [pc, #588]	; 80074d0 <_strtod_l+0xbf8>
 8007286:	f04f 0800 	mov.w	r8, #0
 800728a:	4b92      	ldr	r3, [pc, #584]	; (80074d4 <_strtod_l+0xbfc>)
 800728c:	403b      	ands	r3, r7
 800728e:	9311      	str	r3, [sp, #68]	; 0x44
 8007290:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8007292:	4b91      	ldr	r3, [pc, #580]	; (80074d8 <_strtod_l+0xc00>)
 8007294:	429a      	cmp	r2, r3
 8007296:	f040 80b2 	bne.w	80073fe <_strtod_l+0xb26>
 800729a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800729e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80072a2:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 80072a6:	ec4b ab10 	vmov	d0, sl, fp
 80072aa:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 80072ae:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80072b2:	f001 ff29 	bl	8009108 <__ulp>
 80072b6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80072ba:	ec53 2b10 	vmov	r2, r3, d0
 80072be:	f7f9 f99b 	bl	80005f8 <__aeabi_dmul>
 80072c2:	4652      	mov	r2, sl
 80072c4:	465b      	mov	r3, fp
 80072c6:	f7f8 ffe1 	bl	800028c <__adddf3>
 80072ca:	460b      	mov	r3, r1
 80072cc:	4981      	ldr	r1, [pc, #516]	; (80074d4 <_strtod_l+0xbfc>)
 80072ce:	4a83      	ldr	r2, [pc, #524]	; (80074dc <_strtod_l+0xc04>)
 80072d0:	4019      	ands	r1, r3
 80072d2:	4291      	cmp	r1, r2
 80072d4:	4682      	mov	sl, r0
 80072d6:	d95e      	bls.n	8007396 <_strtod_l+0xabe>
 80072d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80072da:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80072de:	4293      	cmp	r3, r2
 80072e0:	d103      	bne.n	80072ea <_strtod_l+0xa12>
 80072e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80072e4:	3301      	adds	r3, #1
 80072e6:	f43f ad43 	beq.w	8006d70 <_strtod_l+0x498>
 80072ea:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 80074e8 <_strtod_l+0xc10>
 80072ee:	f04f 3aff 	mov.w	sl, #4294967295
 80072f2:	991e      	ldr	r1, [sp, #120]	; 0x78
 80072f4:	4620      	mov	r0, r4
 80072f6:	f001 fbdb 	bl	8008ab0 <_Bfree>
 80072fa:	9907      	ldr	r1, [sp, #28]
 80072fc:	4620      	mov	r0, r4
 80072fe:	f001 fbd7 	bl	8008ab0 <_Bfree>
 8007302:	4631      	mov	r1, r6
 8007304:	4620      	mov	r0, r4
 8007306:	f001 fbd3 	bl	8008ab0 <_Bfree>
 800730a:	4629      	mov	r1, r5
 800730c:	4620      	mov	r0, r4
 800730e:	f001 fbcf 	bl	8008ab0 <_Bfree>
 8007312:	e613      	b.n	8006f3c <_strtod_l+0x664>
 8007314:	f1ba 0f00 	cmp.w	sl, #0
 8007318:	d11b      	bne.n	8007352 <_strtod_l+0xa7a>
 800731a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800731e:	b9f3      	cbnz	r3, 800735e <_strtod_l+0xa86>
 8007320:	4b6b      	ldr	r3, [pc, #428]	; (80074d0 <_strtod_l+0xbf8>)
 8007322:	2200      	movs	r2, #0
 8007324:	4640      	mov	r0, r8
 8007326:	4649      	mov	r1, r9
 8007328:	f7f9 fbd8 	bl	8000adc <__aeabi_dcmplt>
 800732c:	b9d0      	cbnz	r0, 8007364 <_strtod_l+0xa8c>
 800732e:	4640      	mov	r0, r8
 8007330:	4649      	mov	r1, r9
 8007332:	4b6b      	ldr	r3, [pc, #428]	; (80074e0 <_strtod_l+0xc08>)
 8007334:	2200      	movs	r2, #0
 8007336:	f7f9 f95f 	bl	80005f8 <__aeabi_dmul>
 800733a:	4680      	mov	r8, r0
 800733c:	4689      	mov	r9, r1
 800733e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8007342:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 8007346:	931b      	str	r3, [sp, #108]	; 0x6c
 8007348:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 800734c:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8007350:	e79b      	b.n	800728a <_strtod_l+0x9b2>
 8007352:	f1ba 0f01 	cmp.w	sl, #1
 8007356:	d102      	bne.n	800735e <_strtod_l+0xa86>
 8007358:	2f00      	cmp	r7, #0
 800735a:	f43f ad7e 	beq.w	8006e5a <_strtod_l+0x582>
 800735e:	4b61      	ldr	r3, [pc, #388]	; (80074e4 <_strtod_l+0xc0c>)
 8007360:	2200      	movs	r2, #0
 8007362:	e78c      	b.n	800727e <_strtod_l+0x9a6>
 8007364:	f8df 9178 	ldr.w	r9, [pc, #376]	; 80074e0 <_strtod_l+0xc08>
 8007368:	f04f 0800 	mov.w	r8, #0
 800736c:	e7e7      	b.n	800733e <_strtod_l+0xa66>
 800736e:	4b5c      	ldr	r3, [pc, #368]	; (80074e0 <_strtod_l+0xc08>)
 8007370:	4640      	mov	r0, r8
 8007372:	4649      	mov	r1, r9
 8007374:	2200      	movs	r2, #0
 8007376:	f7f9 f93f 	bl	80005f8 <__aeabi_dmul>
 800737a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800737c:	4680      	mov	r8, r0
 800737e:	4689      	mov	r9, r1
 8007380:	b933      	cbnz	r3, 8007390 <_strtod_l+0xab8>
 8007382:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007386:	9012      	str	r0, [sp, #72]	; 0x48
 8007388:	9313      	str	r3, [sp, #76]	; 0x4c
 800738a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800738e:	e7dd      	b.n	800734c <_strtod_l+0xa74>
 8007390:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 8007394:	e7f9      	b.n	800738a <_strtod_l+0xab2>
 8007396:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800739a:	9b04      	ldr	r3, [sp, #16]
 800739c:	2b00      	cmp	r3, #0
 800739e:	d1a8      	bne.n	80072f2 <_strtod_l+0xa1a>
 80073a0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80073a4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80073a6:	0d1b      	lsrs	r3, r3, #20
 80073a8:	051b      	lsls	r3, r3, #20
 80073aa:	429a      	cmp	r2, r3
 80073ac:	d1a1      	bne.n	80072f2 <_strtod_l+0xa1a>
 80073ae:	4640      	mov	r0, r8
 80073b0:	4649      	mov	r1, r9
 80073b2:	f7f9 fc81 	bl	8000cb8 <__aeabi_d2lz>
 80073b6:	f7f9 f8f1 	bl	800059c <__aeabi_l2d>
 80073ba:	4602      	mov	r2, r0
 80073bc:	460b      	mov	r3, r1
 80073be:	4640      	mov	r0, r8
 80073c0:	4649      	mov	r1, r9
 80073c2:	f7f8 ff61 	bl	8000288 <__aeabi_dsub>
 80073c6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80073c8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80073cc:	ea43 030a 	orr.w	r3, r3, sl
 80073d0:	4313      	orrs	r3, r2
 80073d2:	4680      	mov	r8, r0
 80073d4:	4689      	mov	r9, r1
 80073d6:	d053      	beq.n	8007480 <_strtod_l+0xba8>
 80073d8:	a335      	add	r3, pc, #212	; (adr r3, 80074b0 <_strtod_l+0xbd8>)
 80073da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073de:	f7f9 fb7d 	bl	8000adc <__aeabi_dcmplt>
 80073e2:	2800      	cmp	r0, #0
 80073e4:	f47f acce 	bne.w	8006d84 <_strtod_l+0x4ac>
 80073e8:	a333      	add	r3, pc, #204	; (adr r3, 80074b8 <_strtod_l+0xbe0>)
 80073ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073ee:	4640      	mov	r0, r8
 80073f0:	4649      	mov	r1, r9
 80073f2:	f7f9 fb91 	bl	8000b18 <__aeabi_dcmpgt>
 80073f6:	2800      	cmp	r0, #0
 80073f8:	f43f af7b 	beq.w	80072f2 <_strtod_l+0xa1a>
 80073fc:	e4c2      	b.n	8006d84 <_strtod_l+0x4ac>
 80073fe:	9b04      	ldr	r3, [sp, #16]
 8007400:	b333      	cbz	r3, 8007450 <_strtod_l+0xb78>
 8007402:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007404:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007408:	d822      	bhi.n	8007450 <_strtod_l+0xb78>
 800740a:	a32d      	add	r3, pc, #180	; (adr r3, 80074c0 <_strtod_l+0xbe8>)
 800740c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007410:	4640      	mov	r0, r8
 8007412:	4649      	mov	r1, r9
 8007414:	f7f9 fb6c 	bl	8000af0 <__aeabi_dcmple>
 8007418:	b1a0      	cbz	r0, 8007444 <_strtod_l+0xb6c>
 800741a:	4649      	mov	r1, r9
 800741c:	4640      	mov	r0, r8
 800741e:	f7f9 fbc3 	bl	8000ba8 <__aeabi_d2uiz>
 8007422:	2801      	cmp	r0, #1
 8007424:	bf38      	it	cc
 8007426:	2001      	movcc	r0, #1
 8007428:	f7f9 f86c 	bl	8000504 <__aeabi_ui2d>
 800742c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800742e:	4680      	mov	r8, r0
 8007430:	4689      	mov	r9, r1
 8007432:	bb13      	cbnz	r3, 800747a <_strtod_l+0xba2>
 8007434:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007438:	9014      	str	r0, [sp, #80]	; 0x50
 800743a:	9315      	str	r3, [sp, #84]	; 0x54
 800743c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8007440:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8007444:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007446:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8007448:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800744c:	1a9b      	subs	r3, r3, r2
 800744e:	930d      	str	r3, [sp, #52]	; 0x34
 8007450:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007454:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8007458:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800745c:	f001 fe54 	bl	8009108 <__ulp>
 8007460:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007464:	ec53 2b10 	vmov	r2, r3, d0
 8007468:	f7f9 f8c6 	bl	80005f8 <__aeabi_dmul>
 800746c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007470:	f7f8 ff0c 	bl	800028c <__adddf3>
 8007474:	4682      	mov	sl, r0
 8007476:	468b      	mov	fp, r1
 8007478:	e78f      	b.n	800739a <_strtod_l+0xac2>
 800747a:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 800747e:	e7dd      	b.n	800743c <_strtod_l+0xb64>
 8007480:	a311      	add	r3, pc, #68	; (adr r3, 80074c8 <_strtod_l+0xbf0>)
 8007482:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007486:	f7f9 fb29 	bl	8000adc <__aeabi_dcmplt>
 800748a:	e7b4      	b.n	80073f6 <_strtod_l+0xb1e>
 800748c:	2300      	movs	r3, #0
 800748e:	930e      	str	r3, [sp, #56]	; 0x38
 8007490:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007492:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007494:	6013      	str	r3, [r2, #0]
 8007496:	f7ff ba65 	b.w	8006964 <_strtod_l+0x8c>
 800749a:	2b65      	cmp	r3, #101	; 0x65
 800749c:	f43f ab5d 	beq.w	8006b5a <_strtod_l+0x282>
 80074a0:	2b45      	cmp	r3, #69	; 0x45
 80074a2:	f43f ab5a 	beq.w	8006b5a <_strtod_l+0x282>
 80074a6:	2201      	movs	r2, #1
 80074a8:	f7ff bb92 	b.w	8006bd0 <_strtod_l+0x2f8>
 80074ac:	f3af 8000 	nop.w
 80074b0:	94a03595 	.word	0x94a03595
 80074b4:	3fdfffff 	.word	0x3fdfffff
 80074b8:	35afe535 	.word	0x35afe535
 80074bc:	3fe00000 	.word	0x3fe00000
 80074c0:	ffc00000 	.word	0xffc00000
 80074c4:	41dfffff 	.word	0x41dfffff
 80074c8:	94a03595 	.word	0x94a03595
 80074cc:	3fcfffff 	.word	0x3fcfffff
 80074d0:	3ff00000 	.word	0x3ff00000
 80074d4:	7ff00000 	.word	0x7ff00000
 80074d8:	7fe00000 	.word	0x7fe00000
 80074dc:	7c9fffff 	.word	0x7c9fffff
 80074e0:	3fe00000 	.word	0x3fe00000
 80074e4:	bff00000 	.word	0xbff00000
 80074e8:	7fefffff 	.word	0x7fefffff

080074ec <_strtod_r>:
 80074ec:	4b01      	ldr	r3, [pc, #4]	; (80074f4 <_strtod_r+0x8>)
 80074ee:	f7ff b9f3 	b.w	80068d8 <_strtod_l>
 80074f2:	bf00      	nop
 80074f4:	20000084 	.word	0x20000084

080074f8 <_strtol_l.isra.0>:
 80074f8:	2b01      	cmp	r3, #1
 80074fa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80074fe:	d001      	beq.n	8007504 <_strtol_l.isra.0+0xc>
 8007500:	2b24      	cmp	r3, #36	; 0x24
 8007502:	d906      	bls.n	8007512 <_strtol_l.isra.0+0x1a>
 8007504:	f7fe faf8 	bl	8005af8 <__errno>
 8007508:	2316      	movs	r3, #22
 800750a:	6003      	str	r3, [r0, #0]
 800750c:	2000      	movs	r0, #0
 800750e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007512:	4f3a      	ldr	r7, [pc, #232]	; (80075fc <_strtol_l.isra.0+0x104>)
 8007514:	468e      	mov	lr, r1
 8007516:	4676      	mov	r6, lr
 8007518:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800751c:	5de5      	ldrb	r5, [r4, r7]
 800751e:	f015 0508 	ands.w	r5, r5, #8
 8007522:	d1f8      	bne.n	8007516 <_strtol_l.isra.0+0x1e>
 8007524:	2c2d      	cmp	r4, #45	; 0x2d
 8007526:	d134      	bne.n	8007592 <_strtol_l.isra.0+0x9a>
 8007528:	f89e 4000 	ldrb.w	r4, [lr]
 800752c:	f04f 0801 	mov.w	r8, #1
 8007530:	f106 0e02 	add.w	lr, r6, #2
 8007534:	2b00      	cmp	r3, #0
 8007536:	d05c      	beq.n	80075f2 <_strtol_l.isra.0+0xfa>
 8007538:	2b10      	cmp	r3, #16
 800753a:	d10c      	bne.n	8007556 <_strtol_l.isra.0+0x5e>
 800753c:	2c30      	cmp	r4, #48	; 0x30
 800753e:	d10a      	bne.n	8007556 <_strtol_l.isra.0+0x5e>
 8007540:	f89e 4000 	ldrb.w	r4, [lr]
 8007544:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8007548:	2c58      	cmp	r4, #88	; 0x58
 800754a:	d14d      	bne.n	80075e8 <_strtol_l.isra.0+0xf0>
 800754c:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8007550:	2310      	movs	r3, #16
 8007552:	f10e 0e02 	add.w	lr, lr, #2
 8007556:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 800755a:	f10c 3cff 	add.w	ip, ip, #4294967295
 800755e:	2600      	movs	r6, #0
 8007560:	fbbc f9f3 	udiv	r9, ip, r3
 8007564:	4635      	mov	r5, r6
 8007566:	fb03 ca19 	mls	sl, r3, r9, ip
 800756a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800756e:	2f09      	cmp	r7, #9
 8007570:	d818      	bhi.n	80075a4 <_strtol_l.isra.0+0xac>
 8007572:	463c      	mov	r4, r7
 8007574:	42a3      	cmp	r3, r4
 8007576:	dd24      	ble.n	80075c2 <_strtol_l.isra.0+0xca>
 8007578:	2e00      	cmp	r6, #0
 800757a:	db1f      	blt.n	80075bc <_strtol_l.isra.0+0xc4>
 800757c:	45a9      	cmp	r9, r5
 800757e:	d31d      	bcc.n	80075bc <_strtol_l.isra.0+0xc4>
 8007580:	d101      	bne.n	8007586 <_strtol_l.isra.0+0x8e>
 8007582:	45a2      	cmp	sl, r4
 8007584:	db1a      	blt.n	80075bc <_strtol_l.isra.0+0xc4>
 8007586:	fb05 4503 	mla	r5, r5, r3, r4
 800758a:	2601      	movs	r6, #1
 800758c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8007590:	e7eb      	b.n	800756a <_strtol_l.isra.0+0x72>
 8007592:	2c2b      	cmp	r4, #43	; 0x2b
 8007594:	bf08      	it	eq
 8007596:	f89e 4000 	ldrbeq.w	r4, [lr]
 800759a:	46a8      	mov	r8, r5
 800759c:	bf08      	it	eq
 800759e:	f106 0e02 	addeq.w	lr, r6, #2
 80075a2:	e7c7      	b.n	8007534 <_strtol_l.isra.0+0x3c>
 80075a4:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 80075a8:	2f19      	cmp	r7, #25
 80075aa:	d801      	bhi.n	80075b0 <_strtol_l.isra.0+0xb8>
 80075ac:	3c37      	subs	r4, #55	; 0x37
 80075ae:	e7e1      	b.n	8007574 <_strtol_l.isra.0+0x7c>
 80075b0:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 80075b4:	2f19      	cmp	r7, #25
 80075b6:	d804      	bhi.n	80075c2 <_strtol_l.isra.0+0xca>
 80075b8:	3c57      	subs	r4, #87	; 0x57
 80075ba:	e7db      	b.n	8007574 <_strtol_l.isra.0+0x7c>
 80075bc:	f04f 36ff 	mov.w	r6, #4294967295
 80075c0:	e7e4      	b.n	800758c <_strtol_l.isra.0+0x94>
 80075c2:	2e00      	cmp	r6, #0
 80075c4:	da05      	bge.n	80075d2 <_strtol_l.isra.0+0xda>
 80075c6:	2322      	movs	r3, #34	; 0x22
 80075c8:	6003      	str	r3, [r0, #0]
 80075ca:	4665      	mov	r5, ip
 80075cc:	b942      	cbnz	r2, 80075e0 <_strtol_l.isra.0+0xe8>
 80075ce:	4628      	mov	r0, r5
 80075d0:	e79d      	b.n	800750e <_strtol_l.isra.0+0x16>
 80075d2:	f1b8 0f00 	cmp.w	r8, #0
 80075d6:	d000      	beq.n	80075da <_strtol_l.isra.0+0xe2>
 80075d8:	426d      	negs	r5, r5
 80075da:	2a00      	cmp	r2, #0
 80075dc:	d0f7      	beq.n	80075ce <_strtol_l.isra.0+0xd6>
 80075de:	b10e      	cbz	r6, 80075e4 <_strtol_l.isra.0+0xec>
 80075e0:	f10e 31ff 	add.w	r1, lr, #4294967295
 80075e4:	6011      	str	r1, [r2, #0]
 80075e6:	e7f2      	b.n	80075ce <_strtol_l.isra.0+0xd6>
 80075e8:	2430      	movs	r4, #48	; 0x30
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d1b3      	bne.n	8007556 <_strtol_l.isra.0+0x5e>
 80075ee:	2308      	movs	r3, #8
 80075f0:	e7b1      	b.n	8007556 <_strtol_l.isra.0+0x5e>
 80075f2:	2c30      	cmp	r4, #48	; 0x30
 80075f4:	d0a4      	beq.n	8007540 <_strtol_l.isra.0+0x48>
 80075f6:	230a      	movs	r3, #10
 80075f8:	e7ad      	b.n	8007556 <_strtol_l.isra.0+0x5e>
 80075fa:	bf00      	nop
 80075fc:	0800baa1 	.word	0x0800baa1

08007600 <_strtol_r>:
 8007600:	f7ff bf7a 	b.w	80074f8 <_strtol_l.isra.0>

08007604 <quorem>:
 8007604:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007608:	6903      	ldr	r3, [r0, #16]
 800760a:	690c      	ldr	r4, [r1, #16]
 800760c:	42a3      	cmp	r3, r4
 800760e:	4607      	mov	r7, r0
 8007610:	f2c0 8081 	blt.w	8007716 <quorem+0x112>
 8007614:	3c01      	subs	r4, #1
 8007616:	f101 0814 	add.w	r8, r1, #20
 800761a:	f100 0514 	add.w	r5, r0, #20
 800761e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007622:	9301      	str	r3, [sp, #4]
 8007624:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007628:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800762c:	3301      	adds	r3, #1
 800762e:	429a      	cmp	r2, r3
 8007630:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007634:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007638:	fbb2 f6f3 	udiv	r6, r2, r3
 800763c:	d331      	bcc.n	80076a2 <quorem+0x9e>
 800763e:	f04f 0e00 	mov.w	lr, #0
 8007642:	4640      	mov	r0, r8
 8007644:	46ac      	mov	ip, r5
 8007646:	46f2      	mov	sl, lr
 8007648:	f850 2b04 	ldr.w	r2, [r0], #4
 800764c:	b293      	uxth	r3, r2
 800764e:	fb06 e303 	mla	r3, r6, r3, lr
 8007652:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007656:	b29b      	uxth	r3, r3
 8007658:	ebaa 0303 	sub.w	r3, sl, r3
 800765c:	0c12      	lsrs	r2, r2, #16
 800765e:	f8dc a000 	ldr.w	sl, [ip]
 8007662:	fb06 e202 	mla	r2, r6, r2, lr
 8007666:	fa13 f38a 	uxtah	r3, r3, sl
 800766a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800766e:	fa1f fa82 	uxth.w	sl, r2
 8007672:	f8dc 2000 	ldr.w	r2, [ip]
 8007676:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800767a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800767e:	b29b      	uxth	r3, r3
 8007680:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007684:	4581      	cmp	r9, r0
 8007686:	f84c 3b04 	str.w	r3, [ip], #4
 800768a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800768e:	d2db      	bcs.n	8007648 <quorem+0x44>
 8007690:	f855 300b 	ldr.w	r3, [r5, fp]
 8007694:	b92b      	cbnz	r3, 80076a2 <quorem+0x9e>
 8007696:	9b01      	ldr	r3, [sp, #4]
 8007698:	3b04      	subs	r3, #4
 800769a:	429d      	cmp	r5, r3
 800769c:	461a      	mov	r2, r3
 800769e:	d32e      	bcc.n	80076fe <quorem+0xfa>
 80076a0:	613c      	str	r4, [r7, #16]
 80076a2:	4638      	mov	r0, r7
 80076a4:	f001 fc8c 	bl	8008fc0 <__mcmp>
 80076a8:	2800      	cmp	r0, #0
 80076aa:	db24      	blt.n	80076f6 <quorem+0xf2>
 80076ac:	3601      	adds	r6, #1
 80076ae:	4628      	mov	r0, r5
 80076b0:	f04f 0c00 	mov.w	ip, #0
 80076b4:	f858 2b04 	ldr.w	r2, [r8], #4
 80076b8:	f8d0 e000 	ldr.w	lr, [r0]
 80076bc:	b293      	uxth	r3, r2
 80076be:	ebac 0303 	sub.w	r3, ip, r3
 80076c2:	0c12      	lsrs	r2, r2, #16
 80076c4:	fa13 f38e 	uxtah	r3, r3, lr
 80076c8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80076cc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80076d0:	b29b      	uxth	r3, r3
 80076d2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80076d6:	45c1      	cmp	r9, r8
 80076d8:	f840 3b04 	str.w	r3, [r0], #4
 80076dc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80076e0:	d2e8      	bcs.n	80076b4 <quorem+0xb0>
 80076e2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80076e6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80076ea:	b922      	cbnz	r2, 80076f6 <quorem+0xf2>
 80076ec:	3b04      	subs	r3, #4
 80076ee:	429d      	cmp	r5, r3
 80076f0:	461a      	mov	r2, r3
 80076f2:	d30a      	bcc.n	800770a <quorem+0x106>
 80076f4:	613c      	str	r4, [r7, #16]
 80076f6:	4630      	mov	r0, r6
 80076f8:	b003      	add	sp, #12
 80076fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076fe:	6812      	ldr	r2, [r2, #0]
 8007700:	3b04      	subs	r3, #4
 8007702:	2a00      	cmp	r2, #0
 8007704:	d1cc      	bne.n	80076a0 <quorem+0x9c>
 8007706:	3c01      	subs	r4, #1
 8007708:	e7c7      	b.n	800769a <quorem+0x96>
 800770a:	6812      	ldr	r2, [r2, #0]
 800770c:	3b04      	subs	r3, #4
 800770e:	2a00      	cmp	r2, #0
 8007710:	d1f0      	bne.n	80076f4 <quorem+0xf0>
 8007712:	3c01      	subs	r4, #1
 8007714:	e7eb      	b.n	80076ee <quorem+0xea>
 8007716:	2000      	movs	r0, #0
 8007718:	e7ee      	b.n	80076f8 <quorem+0xf4>
 800771a:	0000      	movs	r0, r0
 800771c:	0000      	movs	r0, r0
	...

08007720 <_dtoa_r>:
 8007720:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007724:	ed2d 8b02 	vpush	{d8}
 8007728:	ec57 6b10 	vmov	r6, r7, d0
 800772c:	b095      	sub	sp, #84	; 0x54
 800772e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007730:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007734:	9105      	str	r1, [sp, #20]
 8007736:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800773a:	4604      	mov	r4, r0
 800773c:	9209      	str	r2, [sp, #36]	; 0x24
 800773e:	930f      	str	r3, [sp, #60]	; 0x3c
 8007740:	b975      	cbnz	r5, 8007760 <_dtoa_r+0x40>
 8007742:	2010      	movs	r0, #16
 8007744:	f001 f94c 	bl	80089e0 <malloc>
 8007748:	4602      	mov	r2, r0
 800774a:	6260      	str	r0, [r4, #36]	; 0x24
 800774c:	b920      	cbnz	r0, 8007758 <_dtoa_r+0x38>
 800774e:	4bb2      	ldr	r3, [pc, #712]	; (8007a18 <_dtoa_r+0x2f8>)
 8007750:	21ea      	movs	r1, #234	; 0xea
 8007752:	48b2      	ldr	r0, [pc, #712]	; (8007a1c <_dtoa_r+0x2fc>)
 8007754:	f002 f874 	bl	8009840 <__assert_func>
 8007758:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800775c:	6005      	str	r5, [r0, #0]
 800775e:	60c5      	str	r5, [r0, #12]
 8007760:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007762:	6819      	ldr	r1, [r3, #0]
 8007764:	b151      	cbz	r1, 800777c <_dtoa_r+0x5c>
 8007766:	685a      	ldr	r2, [r3, #4]
 8007768:	604a      	str	r2, [r1, #4]
 800776a:	2301      	movs	r3, #1
 800776c:	4093      	lsls	r3, r2
 800776e:	608b      	str	r3, [r1, #8]
 8007770:	4620      	mov	r0, r4
 8007772:	f001 f99d 	bl	8008ab0 <_Bfree>
 8007776:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007778:	2200      	movs	r2, #0
 800777a:	601a      	str	r2, [r3, #0]
 800777c:	1e3b      	subs	r3, r7, #0
 800777e:	bfb9      	ittee	lt
 8007780:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007784:	9303      	strlt	r3, [sp, #12]
 8007786:	2300      	movge	r3, #0
 8007788:	f8c8 3000 	strge.w	r3, [r8]
 800778c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8007790:	4ba3      	ldr	r3, [pc, #652]	; (8007a20 <_dtoa_r+0x300>)
 8007792:	bfbc      	itt	lt
 8007794:	2201      	movlt	r2, #1
 8007796:	f8c8 2000 	strlt.w	r2, [r8]
 800779a:	ea33 0309 	bics.w	r3, r3, r9
 800779e:	d11b      	bne.n	80077d8 <_dtoa_r+0xb8>
 80077a0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80077a2:	f242 730f 	movw	r3, #9999	; 0x270f
 80077a6:	6013      	str	r3, [r2, #0]
 80077a8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80077ac:	4333      	orrs	r3, r6
 80077ae:	f000 857a 	beq.w	80082a6 <_dtoa_r+0xb86>
 80077b2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80077b4:	b963      	cbnz	r3, 80077d0 <_dtoa_r+0xb0>
 80077b6:	4b9b      	ldr	r3, [pc, #620]	; (8007a24 <_dtoa_r+0x304>)
 80077b8:	e024      	b.n	8007804 <_dtoa_r+0xe4>
 80077ba:	4b9b      	ldr	r3, [pc, #620]	; (8007a28 <_dtoa_r+0x308>)
 80077bc:	9300      	str	r3, [sp, #0]
 80077be:	3308      	adds	r3, #8
 80077c0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80077c2:	6013      	str	r3, [r2, #0]
 80077c4:	9800      	ldr	r0, [sp, #0]
 80077c6:	b015      	add	sp, #84	; 0x54
 80077c8:	ecbd 8b02 	vpop	{d8}
 80077cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077d0:	4b94      	ldr	r3, [pc, #592]	; (8007a24 <_dtoa_r+0x304>)
 80077d2:	9300      	str	r3, [sp, #0]
 80077d4:	3303      	adds	r3, #3
 80077d6:	e7f3      	b.n	80077c0 <_dtoa_r+0xa0>
 80077d8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80077dc:	2200      	movs	r2, #0
 80077de:	ec51 0b17 	vmov	r0, r1, d7
 80077e2:	2300      	movs	r3, #0
 80077e4:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80077e8:	f7f9 f96e 	bl	8000ac8 <__aeabi_dcmpeq>
 80077ec:	4680      	mov	r8, r0
 80077ee:	b158      	cbz	r0, 8007808 <_dtoa_r+0xe8>
 80077f0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80077f2:	2301      	movs	r3, #1
 80077f4:	6013      	str	r3, [r2, #0]
 80077f6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	f000 8551 	beq.w	80082a0 <_dtoa_r+0xb80>
 80077fe:	488b      	ldr	r0, [pc, #556]	; (8007a2c <_dtoa_r+0x30c>)
 8007800:	6018      	str	r0, [r3, #0]
 8007802:	1e43      	subs	r3, r0, #1
 8007804:	9300      	str	r3, [sp, #0]
 8007806:	e7dd      	b.n	80077c4 <_dtoa_r+0xa4>
 8007808:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800780c:	aa12      	add	r2, sp, #72	; 0x48
 800780e:	a913      	add	r1, sp, #76	; 0x4c
 8007810:	4620      	mov	r0, r4
 8007812:	f001 fcf5 	bl	8009200 <__d2b>
 8007816:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800781a:	4683      	mov	fp, r0
 800781c:	2d00      	cmp	r5, #0
 800781e:	d07c      	beq.n	800791a <_dtoa_r+0x1fa>
 8007820:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007822:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8007826:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800782a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800782e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8007832:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8007836:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800783a:	4b7d      	ldr	r3, [pc, #500]	; (8007a30 <_dtoa_r+0x310>)
 800783c:	2200      	movs	r2, #0
 800783e:	4630      	mov	r0, r6
 8007840:	4639      	mov	r1, r7
 8007842:	f7f8 fd21 	bl	8000288 <__aeabi_dsub>
 8007846:	a36e      	add	r3, pc, #440	; (adr r3, 8007a00 <_dtoa_r+0x2e0>)
 8007848:	e9d3 2300 	ldrd	r2, r3, [r3]
 800784c:	f7f8 fed4 	bl	80005f8 <__aeabi_dmul>
 8007850:	a36d      	add	r3, pc, #436	; (adr r3, 8007a08 <_dtoa_r+0x2e8>)
 8007852:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007856:	f7f8 fd19 	bl	800028c <__adddf3>
 800785a:	4606      	mov	r6, r0
 800785c:	4628      	mov	r0, r5
 800785e:	460f      	mov	r7, r1
 8007860:	f7f8 fe60 	bl	8000524 <__aeabi_i2d>
 8007864:	a36a      	add	r3, pc, #424	; (adr r3, 8007a10 <_dtoa_r+0x2f0>)
 8007866:	e9d3 2300 	ldrd	r2, r3, [r3]
 800786a:	f7f8 fec5 	bl	80005f8 <__aeabi_dmul>
 800786e:	4602      	mov	r2, r0
 8007870:	460b      	mov	r3, r1
 8007872:	4630      	mov	r0, r6
 8007874:	4639      	mov	r1, r7
 8007876:	f7f8 fd09 	bl	800028c <__adddf3>
 800787a:	4606      	mov	r6, r0
 800787c:	460f      	mov	r7, r1
 800787e:	f7f9 f96b 	bl	8000b58 <__aeabi_d2iz>
 8007882:	2200      	movs	r2, #0
 8007884:	4682      	mov	sl, r0
 8007886:	2300      	movs	r3, #0
 8007888:	4630      	mov	r0, r6
 800788a:	4639      	mov	r1, r7
 800788c:	f7f9 f926 	bl	8000adc <__aeabi_dcmplt>
 8007890:	b148      	cbz	r0, 80078a6 <_dtoa_r+0x186>
 8007892:	4650      	mov	r0, sl
 8007894:	f7f8 fe46 	bl	8000524 <__aeabi_i2d>
 8007898:	4632      	mov	r2, r6
 800789a:	463b      	mov	r3, r7
 800789c:	f7f9 f914 	bl	8000ac8 <__aeabi_dcmpeq>
 80078a0:	b908      	cbnz	r0, 80078a6 <_dtoa_r+0x186>
 80078a2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80078a6:	f1ba 0f16 	cmp.w	sl, #22
 80078aa:	d854      	bhi.n	8007956 <_dtoa_r+0x236>
 80078ac:	4b61      	ldr	r3, [pc, #388]	; (8007a34 <_dtoa_r+0x314>)
 80078ae:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80078b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078b6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80078ba:	f7f9 f90f 	bl	8000adc <__aeabi_dcmplt>
 80078be:	2800      	cmp	r0, #0
 80078c0:	d04b      	beq.n	800795a <_dtoa_r+0x23a>
 80078c2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80078c6:	2300      	movs	r3, #0
 80078c8:	930e      	str	r3, [sp, #56]	; 0x38
 80078ca:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80078cc:	1b5d      	subs	r5, r3, r5
 80078ce:	1e6b      	subs	r3, r5, #1
 80078d0:	9304      	str	r3, [sp, #16]
 80078d2:	bf43      	ittte	mi
 80078d4:	2300      	movmi	r3, #0
 80078d6:	f1c5 0801 	rsbmi	r8, r5, #1
 80078da:	9304      	strmi	r3, [sp, #16]
 80078dc:	f04f 0800 	movpl.w	r8, #0
 80078e0:	f1ba 0f00 	cmp.w	sl, #0
 80078e4:	db3b      	blt.n	800795e <_dtoa_r+0x23e>
 80078e6:	9b04      	ldr	r3, [sp, #16]
 80078e8:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 80078ec:	4453      	add	r3, sl
 80078ee:	9304      	str	r3, [sp, #16]
 80078f0:	2300      	movs	r3, #0
 80078f2:	9306      	str	r3, [sp, #24]
 80078f4:	9b05      	ldr	r3, [sp, #20]
 80078f6:	2b09      	cmp	r3, #9
 80078f8:	d869      	bhi.n	80079ce <_dtoa_r+0x2ae>
 80078fa:	2b05      	cmp	r3, #5
 80078fc:	bfc4      	itt	gt
 80078fe:	3b04      	subgt	r3, #4
 8007900:	9305      	strgt	r3, [sp, #20]
 8007902:	9b05      	ldr	r3, [sp, #20]
 8007904:	f1a3 0302 	sub.w	r3, r3, #2
 8007908:	bfcc      	ite	gt
 800790a:	2500      	movgt	r5, #0
 800790c:	2501      	movle	r5, #1
 800790e:	2b03      	cmp	r3, #3
 8007910:	d869      	bhi.n	80079e6 <_dtoa_r+0x2c6>
 8007912:	e8df f003 	tbb	[pc, r3]
 8007916:	4e2c      	.short	0x4e2c
 8007918:	5a4c      	.short	0x5a4c
 800791a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800791e:	441d      	add	r5, r3
 8007920:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007924:	2b20      	cmp	r3, #32
 8007926:	bfc1      	itttt	gt
 8007928:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800792c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8007930:	fa09 f303 	lslgt.w	r3, r9, r3
 8007934:	fa26 f000 	lsrgt.w	r0, r6, r0
 8007938:	bfda      	itte	le
 800793a:	f1c3 0320 	rsble	r3, r3, #32
 800793e:	fa06 f003 	lslle.w	r0, r6, r3
 8007942:	4318      	orrgt	r0, r3
 8007944:	f7f8 fdde 	bl	8000504 <__aeabi_ui2d>
 8007948:	2301      	movs	r3, #1
 800794a:	4606      	mov	r6, r0
 800794c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8007950:	3d01      	subs	r5, #1
 8007952:	9310      	str	r3, [sp, #64]	; 0x40
 8007954:	e771      	b.n	800783a <_dtoa_r+0x11a>
 8007956:	2301      	movs	r3, #1
 8007958:	e7b6      	b.n	80078c8 <_dtoa_r+0x1a8>
 800795a:	900e      	str	r0, [sp, #56]	; 0x38
 800795c:	e7b5      	b.n	80078ca <_dtoa_r+0x1aa>
 800795e:	f1ca 0300 	rsb	r3, sl, #0
 8007962:	9306      	str	r3, [sp, #24]
 8007964:	2300      	movs	r3, #0
 8007966:	eba8 080a 	sub.w	r8, r8, sl
 800796a:	930d      	str	r3, [sp, #52]	; 0x34
 800796c:	e7c2      	b.n	80078f4 <_dtoa_r+0x1d4>
 800796e:	2300      	movs	r3, #0
 8007970:	9308      	str	r3, [sp, #32]
 8007972:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007974:	2b00      	cmp	r3, #0
 8007976:	dc39      	bgt.n	80079ec <_dtoa_r+0x2cc>
 8007978:	f04f 0901 	mov.w	r9, #1
 800797c:	f8cd 9004 	str.w	r9, [sp, #4]
 8007980:	464b      	mov	r3, r9
 8007982:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8007986:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8007988:	2200      	movs	r2, #0
 800798a:	6042      	str	r2, [r0, #4]
 800798c:	2204      	movs	r2, #4
 800798e:	f102 0614 	add.w	r6, r2, #20
 8007992:	429e      	cmp	r6, r3
 8007994:	6841      	ldr	r1, [r0, #4]
 8007996:	d92f      	bls.n	80079f8 <_dtoa_r+0x2d8>
 8007998:	4620      	mov	r0, r4
 800799a:	f001 f849 	bl	8008a30 <_Balloc>
 800799e:	9000      	str	r0, [sp, #0]
 80079a0:	2800      	cmp	r0, #0
 80079a2:	d14b      	bne.n	8007a3c <_dtoa_r+0x31c>
 80079a4:	4b24      	ldr	r3, [pc, #144]	; (8007a38 <_dtoa_r+0x318>)
 80079a6:	4602      	mov	r2, r0
 80079a8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80079ac:	e6d1      	b.n	8007752 <_dtoa_r+0x32>
 80079ae:	2301      	movs	r3, #1
 80079b0:	e7de      	b.n	8007970 <_dtoa_r+0x250>
 80079b2:	2300      	movs	r3, #0
 80079b4:	9308      	str	r3, [sp, #32]
 80079b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80079b8:	eb0a 0903 	add.w	r9, sl, r3
 80079bc:	f109 0301 	add.w	r3, r9, #1
 80079c0:	2b01      	cmp	r3, #1
 80079c2:	9301      	str	r3, [sp, #4]
 80079c4:	bfb8      	it	lt
 80079c6:	2301      	movlt	r3, #1
 80079c8:	e7dd      	b.n	8007986 <_dtoa_r+0x266>
 80079ca:	2301      	movs	r3, #1
 80079cc:	e7f2      	b.n	80079b4 <_dtoa_r+0x294>
 80079ce:	2501      	movs	r5, #1
 80079d0:	2300      	movs	r3, #0
 80079d2:	9305      	str	r3, [sp, #20]
 80079d4:	9508      	str	r5, [sp, #32]
 80079d6:	f04f 39ff 	mov.w	r9, #4294967295
 80079da:	2200      	movs	r2, #0
 80079dc:	f8cd 9004 	str.w	r9, [sp, #4]
 80079e0:	2312      	movs	r3, #18
 80079e2:	9209      	str	r2, [sp, #36]	; 0x24
 80079e4:	e7cf      	b.n	8007986 <_dtoa_r+0x266>
 80079e6:	2301      	movs	r3, #1
 80079e8:	9308      	str	r3, [sp, #32]
 80079ea:	e7f4      	b.n	80079d6 <_dtoa_r+0x2b6>
 80079ec:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80079f0:	f8cd 9004 	str.w	r9, [sp, #4]
 80079f4:	464b      	mov	r3, r9
 80079f6:	e7c6      	b.n	8007986 <_dtoa_r+0x266>
 80079f8:	3101      	adds	r1, #1
 80079fa:	6041      	str	r1, [r0, #4]
 80079fc:	0052      	lsls	r2, r2, #1
 80079fe:	e7c6      	b.n	800798e <_dtoa_r+0x26e>
 8007a00:	636f4361 	.word	0x636f4361
 8007a04:	3fd287a7 	.word	0x3fd287a7
 8007a08:	8b60c8b3 	.word	0x8b60c8b3
 8007a0c:	3fc68a28 	.word	0x3fc68a28
 8007a10:	509f79fb 	.word	0x509f79fb
 8007a14:	3fd34413 	.word	0x3fd34413
 8007a18:	0800bbae 	.word	0x0800bbae
 8007a1c:	0800bbc5 	.word	0x0800bbc5
 8007a20:	7ff00000 	.word	0x7ff00000
 8007a24:	0800bbaa 	.word	0x0800bbaa
 8007a28:	0800bba1 	.word	0x0800bba1
 8007a2c:	0800ba21 	.word	0x0800ba21
 8007a30:	3ff80000 	.word	0x3ff80000
 8007a34:	0800bd40 	.word	0x0800bd40
 8007a38:	0800bc24 	.word	0x0800bc24
 8007a3c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007a3e:	9a00      	ldr	r2, [sp, #0]
 8007a40:	601a      	str	r2, [r3, #0]
 8007a42:	9b01      	ldr	r3, [sp, #4]
 8007a44:	2b0e      	cmp	r3, #14
 8007a46:	f200 80ad 	bhi.w	8007ba4 <_dtoa_r+0x484>
 8007a4a:	2d00      	cmp	r5, #0
 8007a4c:	f000 80aa 	beq.w	8007ba4 <_dtoa_r+0x484>
 8007a50:	f1ba 0f00 	cmp.w	sl, #0
 8007a54:	dd36      	ble.n	8007ac4 <_dtoa_r+0x3a4>
 8007a56:	4ac3      	ldr	r2, [pc, #780]	; (8007d64 <_dtoa_r+0x644>)
 8007a58:	f00a 030f 	and.w	r3, sl, #15
 8007a5c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007a60:	ed93 7b00 	vldr	d7, [r3]
 8007a64:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8007a68:	ea4f 172a 	mov.w	r7, sl, asr #4
 8007a6c:	eeb0 8a47 	vmov.f32	s16, s14
 8007a70:	eef0 8a67 	vmov.f32	s17, s15
 8007a74:	d016      	beq.n	8007aa4 <_dtoa_r+0x384>
 8007a76:	4bbc      	ldr	r3, [pc, #752]	; (8007d68 <_dtoa_r+0x648>)
 8007a78:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007a7c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007a80:	f7f8 fee4 	bl	800084c <__aeabi_ddiv>
 8007a84:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007a88:	f007 070f 	and.w	r7, r7, #15
 8007a8c:	2503      	movs	r5, #3
 8007a8e:	4eb6      	ldr	r6, [pc, #728]	; (8007d68 <_dtoa_r+0x648>)
 8007a90:	b957      	cbnz	r7, 8007aa8 <_dtoa_r+0x388>
 8007a92:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007a96:	ec53 2b18 	vmov	r2, r3, d8
 8007a9a:	f7f8 fed7 	bl	800084c <__aeabi_ddiv>
 8007a9e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007aa2:	e029      	b.n	8007af8 <_dtoa_r+0x3d8>
 8007aa4:	2502      	movs	r5, #2
 8007aa6:	e7f2      	b.n	8007a8e <_dtoa_r+0x36e>
 8007aa8:	07f9      	lsls	r1, r7, #31
 8007aaa:	d508      	bpl.n	8007abe <_dtoa_r+0x39e>
 8007aac:	ec51 0b18 	vmov	r0, r1, d8
 8007ab0:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007ab4:	f7f8 fda0 	bl	80005f8 <__aeabi_dmul>
 8007ab8:	ec41 0b18 	vmov	d8, r0, r1
 8007abc:	3501      	adds	r5, #1
 8007abe:	107f      	asrs	r7, r7, #1
 8007ac0:	3608      	adds	r6, #8
 8007ac2:	e7e5      	b.n	8007a90 <_dtoa_r+0x370>
 8007ac4:	f000 80a6 	beq.w	8007c14 <_dtoa_r+0x4f4>
 8007ac8:	f1ca 0600 	rsb	r6, sl, #0
 8007acc:	4ba5      	ldr	r3, [pc, #660]	; (8007d64 <_dtoa_r+0x644>)
 8007ace:	4fa6      	ldr	r7, [pc, #664]	; (8007d68 <_dtoa_r+0x648>)
 8007ad0:	f006 020f 	and.w	r2, r6, #15
 8007ad4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007ad8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007adc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007ae0:	f7f8 fd8a 	bl	80005f8 <__aeabi_dmul>
 8007ae4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007ae8:	1136      	asrs	r6, r6, #4
 8007aea:	2300      	movs	r3, #0
 8007aec:	2502      	movs	r5, #2
 8007aee:	2e00      	cmp	r6, #0
 8007af0:	f040 8085 	bne.w	8007bfe <_dtoa_r+0x4de>
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d1d2      	bne.n	8007a9e <_dtoa_r+0x37e>
 8007af8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	f000 808c 	beq.w	8007c18 <_dtoa_r+0x4f8>
 8007b00:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007b04:	4b99      	ldr	r3, [pc, #612]	; (8007d6c <_dtoa_r+0x64c>)
 8007b06:	2200      	movs	r2, #0
 8007b08:	4630      	mov	r0, r6
 8007b0a:	4639      	mov	r1, r7
 8007b0c:	f7f8 ffe6 	bl	8000adc <__aeabi_dcmplt>
 8007b10:	2800      	cmp	r0, #0
 8007b12:	f000 8081 	beq.w	8007c18 <_dtoa_r+0x4f8>
 8007b16:	9b01      	ldr	r3, [sp, #4]
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d07d      	beq.n	8007c18 <_dtoa_r+0x4f8>
 8007b1c:	f1b9 0f00 	cmp.w	r9, #0
 8007b20:	dd3c      	ble.n	8007b9c <_dtoa_r+0x47c>
 8007b22:	f10a 33ff 	add.w	r3, sl, #4294967295
 8007b26:	9307      	str	r3, [sp, #28]
 8007b28:	2200      	movs	r2, #0
 8007b2a:	4b91      	ldr	r3, [pc, #580]	; (8007d70 <_dtoa_r+0x650>)
 8007b2c:	4630      	mov	r0, r6
 8007b2e:	4639      	mov	r1, r7
 8007b30:	f7f8 fd62 	bl	80005f8 <__aeabi_dmul>
 8007b34:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007b38:	3501      	adds	r5, #1
 8007b3a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8007b3e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007b42:	4628      	mov	r0, r5
 8007b44:	f7f8 fcee 	bl	8000524 <__aeabi_i2d>
 8007b48:	4632      	mov	r2, r6
 8007b4a:	463b      	mov	r3, r7
 8007b4c:	f7f8 fd54 	bl	80005f8 <__aeabi_dmul>
 8007b50:	4b88      	ldr	r3, [pc, #544]	; (8007d74 <_dtoa_r+0x654>)
 8007b52:	2200      	movs	r2, #0
 8007b54:	f7f8 fb9a 	bl	800028c <__adddf3>
 8007b58:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8007b5c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007b60:	9303      	str	r3, [sp, #12]
 8007b62:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d15c      	bne.n	8007c22 <_dtoa_r+0x502>
 8007b68:	4b83      	ldr	r3, [pc, #524]	; (8007d78 <_dtoa_r+0x658>)
 8007b6a:	2200      	movs	r2, #0
 8007b6c:	4630      	mov	r0, r6
 8007b6e:	4639      	mov	r1, r7
 8007b70:	f7f8 fb8a 	bl	8000288 <__aeabi_dsub>
 8007b74:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007b78:	4606      	mov	r6, r0
 8007b7a:	460f      	mov	r7, r1
 8007b7c:	f7f8 ffcc 	bl	8000b18 <__aeabi_dcmpgt>
 8007b80:	2800      	cmp	r0, #0
 8007b82:	f040 8296 	bne.w	80080b2 <_dtoa_r+0x992>
 8007b86:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8007b8a:	4630      	mov	r0, r6
 8007b8c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007b90:	4639      	mov	r1, r7
 8007b92:	f7f8 ffa3 	bl	8000adc <__aeabi_dcmplt>
 8007b96:	2800      	cmp	r0, #0
 8007b98:	f040 8288 	bne.w	80080ac <_dtoa_r+0x98c>
 8007b9c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007ba0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007ba4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	f2c0 8158 	blt.w	8007e5c <_dtoa_r+0x73c>
 8007bac:	f1ba 0f0e 	cmp.w	sl, #14
 8007bb0:	f300 8154 	bgt.w	8007e5c <_dtoa_r+0x73c>
 8007bb4:	4b6b      	ldr	r3, [pc, #428]	; (8007d64 <_dtoa_r+0x644>)
 8007bb6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007bba:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007bbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	f280 80e3 	bge.w	8007d8c <_dtoa_r+0x66c>
 8007bc6:	9b01      	ldr	r3, [sp, #4]
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	f300 80df 	bgt.w	8007d8c <_dtoa_r+0x66c>
 8007bce:	f040 826d 	bne.w	80080ac <_dtoa_r+0x98c>
 8007bd2:	4b69      	ldr	r3, [pc, #420]	; (8007d78 <_dtoa_r+0x658>)
 8007bd4:	2200      	movs	r2, #0
 8007bd6:	4640      	mov	r0, r8
 8007bd8:	4649      	mov	r1, r9
 8007bda:	f7f8 fd0d 	bl	80005f8 <__aeabi_dmul>
 8007bde:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007be2:	f7f8 ff8f 	bl	8000b04 <__aeabi_dcmpge>
 8007be6:	9e01      	ldr	r6, [sp, #4]
 8007be8:	4637      	mov	r7, r6
 8007bea:	2800      	cmp	r0, #0
 8007bec:	f040 8243 	bne.w	8008076 <_dtoa_r+0x956>
 8007bf0:	9d00      	ldr	r5, [sp, #0]
 8007bf2:	2331      	movs	r3, #49	; 0x31
 8007bf4:	f805 3b01 	strb.w	r3, [r5], #1
 8007bf8:	f10a 0a01 	add.w	sl, sl, #1
 8007bfc:	e23f      	b.n	800807e <_dtoa_r+0x95e>
 8007bfe:	07f2      	lsls	r2, r6, #31
 8007c00:	d505      	bpl.n	8007c0e <_dtoa_r+0x4ee>
 8007c02:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007c06:	f7f8 fcf7 	bl	80005f8 <__aeabi_dmul>
 8007c0a:	3501      	adds	r5, #1
 8007c0c:	2301      	movs	r3, #1
 8007c0e:	1076      	asrs	r6, r6, #1
 8007c10:	3708      	adds	r7, #8
 8007c12:	e76c      	b.n	8007aee <_dtoa_r+0x3ce>
 8007c14:	2502      	movs	r5, #2
 8007c16:	e76f      	b.n	8007af8 <_dtoa_r+0x3d8>
 8007c18:	9b01      	ldr	r3, [sp, #4]
 8007c1a:	f8cd a01c 	str.w	sl, [sp, #28]
 8007c1e:	930c      	str	r3, [sp, #48]	; 0x30
 8007c20:	e78d      	b.n	8007b3e <_dtoa_r+0x41e>
 8007c22:	9900      	ldr	r1, [sp, #0]
 8007c24:	980c      	ldr	r0, [sp, #48]	; 0x30
 8007c26:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007c28:	4b4e      	ldr	r3, [pc, #312]	; (8007d64 <_dtoa_r+0x644>)
 8007c2a:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007c2e:	4401      	add	r1, r0
 8007c30:	9102      	str	r1, [sp, #8]
 8007c32:	9908      	ldr	r1, [sp, #32]
 8007c34:	eeb0 8a47 	vmov.f32	s16, s14
 8007c38:	eef0 8a67 	vmov.f32	s17, s15
 8007c3c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007c40:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007c44:	2900      	cmp	r1, #0
 8007c46:	d045      	beq.n	8007cd4 <_dtoa_r+0x5b4>
 8007c48:	494c      	ldr	r1, [pc, #304]	; (8007d7c <_dtoa_r+0x65c>)
 8007c4a:	2000      	movs	r0, #0
 8007c4c:	f7f8 fdfe 	bl	800084c <__aeabi_ddiv>
 8007c50:	ec53 2b18 	vmov	r2, r3, d8
 8007c54:	f7f8 fb18 	bl	8000288 <__aeabi_dsub>
 8007c58:	9d00      	ldr	r5, [sp, #0]
 8007c5a:	ec41 0b18 	vmov	d8, r0, r1
 8007c5e:	4639      	mov	r1, r7
 8007c60:	4630      	mov	r0, r6
 8007c62:	f7f8 ff79 	bl	8000b58 <__aeabi_d2iz>
 8007c66:	900c      	str	r0, [sp, #48]	; 0x30
 8007c68:	f7f8 fc5c 	bl	8000524 <__aeabi_i2d>
 8007c6c:	4602      	mov	r2, r0
 8007c6e:	460b      	mov	r3, r1
 8007c70:	4630      	mov	r0, r6
 8007c72:	4639      	mov	r1, r7
 8007c74:	f7f8 fb08 	bl	8000288 <__aeabi_dsub>
 8007c78:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007c7a:	3330      	adds	r3, #48	; 0x30
 8007c7c:	f805 3b01 	strb.w	r3, [r5], #1
 8007c80:	ec53 2b18 	vmov	r2, r3, d8
 8007c84:	4606      	mov	r6, r0
 8007c86:	460f      	mov	r7, r1
 8007c88:	f7f8 ff28 	bl	8000adc <__aeabi_dcmplt>
 8007c8c:	2800      	cmp	r0, #0
 8007c8e:	d165      	bne.n	8007d5c <_dtoa_r+0x63c>
 8007c90:	4632      	mov	r2, r6
 8007c92:	463b      	mov	r3, r7
 8007c94:	4935      	ldr	r1, [pc, #212]	; (8007d6c <_dtoa_r+0x64c>)
 8007c96:	2000      	movs	r0, #0
 8007c98:	f7f8 faf6 	bl	8000288 <__aeabi_dsub>
 8007c9c:	ec53 2b18 	vmov	r2, r3, d8
 8007ca0:	f7f8 ff1c 	bl	8000adc <__aeabi_dcmplt>
 8007ca4:	2800      	cmp	r0, #0
 8007ca6:	f040 80b9 	bne.w	8007e1c <_dtoa_r+0x6fc>
 8007caa:	9b02      	ldr	r3, [sp, #8]
 8007cac:	429d      	cmp	r5, r3
 8007cae:	f43f af75 	beq.w	8007b9c <_dtoa_r+0x47c>
 8007cb2:	4b2f      	ldr	r3, [pc, #188]	; (8007d70 <_dtoa_r+0x650>)
 8007cb4:	ec51 0b18 	vmov	r0, r1, d8
 8007cb8:	2200      	movs	r2, #0
 8007cba:	f7f8 fc9d 	bl	80005f8 <__aeabi_dmul>
 8007cbe:	4b2c      	ldr	r3, [pc, #176]	; (8007d70 <_dtoa_r+0x650>)
 8007cc0:	ec41 0b18 	vmov	d8, r0, r1
 8007cc4:	2200      	movs	r2, #0
 8007cc6:	4630      	mov	r0, r6
 8007cc8:	4639      	mov	r1, r7
 8007cca:	f7f8 fc95 	bl	80005f8 <__aeabi_dmul>
 8007cce:	4606      	mov	r6, r0
 8007cd0:	460f      	mov	r7, r1
 8007cd2:	e7c4      	b.n	8007c5e <_dtoa_r+0x53e>
 8007cd4:	ec51 0b17 	vmov	r0, r1, d7
 8007cd8:	f7f8 fc8e 	bl	80005f8 <__aeabi_dmul>
 8007cdc:	9b02      	ldr	r3, [sp, #8]
 8007cde:	9d00      	ldr	r5, [sp, #0]
 8007ce0:	930c      	str	r3, [sp, #48]	; 0x30
 8007ce2:	ec41 0b18 	vmov	d8, r0, r1
 8007ce6:	4639      	mov	r1, r7
 8007ce8:	4630      	mov	r0, r6
 8007cea:	f7f8 ff35 	bl	8000b58 <__aeabi_d2iz>
 8007cee:	9011      	str	r0, [sp, #68]	; 0x44
 8007cf0:	f7f8 fc18 	bl	8000524 <__aeabi_i2d>
 8007cf4:	4602      	mov	r2, r0
 8007cf6:	460b      	mov	r3, r1
 8007cf8:	4630      	mov	r0, r6
 8007cfa:	4639      	mov	r1, r7
 8007cfc:	f7f8 fac4 	bl	8000288 <__aeabi_dsub>
 8007d00:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007d02:	3330      	adds	r3, #48	; 0x30
 8007d04:	f805 3b01 	strb.w	r3, [r5], #1
 8007d08:	9b02      	ldr	r3, [sp, #8]
 8007d0a:	429d      	cmp	r5, r3
 8007d0c:	4606      	mov	r6, r0
 8007d0e:	460f      	mov	r7, r1
 8007d10:	f04f 0200 	mov.w	r2, #0
 8007d14:	d134      	bne.n	8007d80 <_dtoa_r+0x660>
 8007d16:	4b19      	ldr	r3, [pc, #100]	; (8007d7c <_dtoa_r+0x65c>)
 8007d18:	ec51 0b18 	vmov	r0, r1, d8
 8007d1c:	f7f8 fab6 	bl	800028c <__adddf3>
 8007d20:	4602      	mov	r2, r0
 8007d22:	460b      	mov	r3, r1
 8007d24:	4630      	mov	r0, r6
 8007d26:	4639      	mov	r1, r7
 8007d28:	f7f8 fef6 	bl	8000b18 <__aeabi_dcmpgt>
 8007d2c:	2800      	cmp	r0, #0
 8007d2e:	d175      	bne.n	8007e1c <_dtoa_r+0x6fc>
 8007d30:	ec53 2b18 	vmov	r2, r3, d8
 8007d34:	4911      	ldr	r1, [pc, #68]	; (8007d7c <_dtoa_r+0x65c>)
 8007d36:	2000      	movs	r0, #0
 8007d38:	f7f8 faa6 	bl	8000288 <__aeabi_dsub>
 8007d3c:	4602      	mov	r2, r0
 8007d3e:	460b      	mov	r3, r1
 8007d40:	4630      	mov	r0, r6
 8007d42:	4639      	mov	r1, r7
 8007d44:	f7f8 feca 	bl	8000adc <__aeabi_dcmplt>
 8007d48:	2800      	cmp	r0, #0
 8007d4a:	f43f af27 	beq.w	8007b9c <_dtoa_r+0x47c>
 8007d4e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007d50:	1e6b      	subs	r3, r5, #1
 8007d52:	930c      	str	r3, [sp, #48]	; 0x30
 8007d54:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007d58:	2b30      	cmp	r3, #48	; 0x30
 8007d5a:	d0f8      	beq.n	8007d4e <_dtoa_r+0x62e>
 8007d5c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8007d60:	e04a      	b.n	8007df8 <_dtoa_r+0x6d8>
 8007d62:	bf00      	nop
 8007d64:	0800bd40 	.word	0x0800bd40
 8007d68:	0800bd18 	.word	0x0800bd18
 8007d6c:	3ff00000 	.word	0x3ff00000
 8007d70:	40240000 	.word	0x40240000
 8007d74:	401c0000 	.word	0x401c0000
 8007d78:	40140000 	.word	0x40140000
 8007d7c:	3fe00000 	.word	0x3fe00000
 8007d80:	4baf      	ldr	r3, [pc, #700]	; (8008040 <_dtoa_r+0x920>)
 8007d82:	f7f8 fc39 	bl	80005f8 <__aeabi_dmul>
 8007d86:	4606      	mov	r6, r0
 8007d88:	460f      	mov	r7, r1
 8007d8a:	e7ac      	b.n	8007ce6 <_dtoa_r+0x5c6>
 8007d8c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007d90:	9d00      	ldr	r5, [sp, #0]
 8007d92:	4642      	mov	r2, r8
 8007d94:	464b      	mov	r3, r9
 8007d96:	4630      	mov	r0, r6
 8007d98:	4639      	mov	r1, r7
 8007d9a:	f7f8 fd57 	bl	800084c <__aeabi_ddiv>
 8007d9e:	f7f8 fedb 	bl	8000b58 <__aeabi_d2iz>
 8007da2:	9002      	str	r0, [sp, #8]
 8007da4:	f7f8 fbbe 	bl	8000524 <__aeabi_i2d>
 8007da8:	4642      	mov	r2, r8
 8007daa:	464b      	mov	r3, r9
 8007dac:	f7f8 fc24 	bl	80005f8 <__aeabi_dmul>
 8007db0:	4602      	mov	r2, r0
 8007db2:	460b      	mov	r3, r1
 8007db4:	4630      	mov	r0, r6
 8007db6:	4639      	mov	r1, r7
 8007db8:	f7f8 fa66 	bl	8000288 <__aeabi_dsub>
 8007dbc:	9e02      	ldr	r6, [sp, #8]
 8007dbe:	9f01      	ldr	r7, [sp, #4]
 8007dc0:	3630      	adds	r6, #48	; 0x30
 8007dc2:	f805 6b01 	strb.w	r6, [r5], #1
 8007dc6:	9e00      	ldr	r6, [sp, #0]
 8007dc8:	1bae      	subs	r6, r5, r6
 8007dca:	42b7      	cmp	r7, r6
 8007dcc:	4602      	mov	r2, r0
 8007dce:	460b      	mov	r3, r1
 8007dd0:	d137      	bne.n	8007e42 <_dtoa_r+0x722>
 8007dd2:	f7f8 fa5b 	bl	800028c <__adddf3>
 8007dd6:	4642      	mov	r2, r8
 8007dd8:	464b      	mov	r3, r9
 8007dda:	4606      	mov	r6, r0
 8007ddc:	460f      	mov	r7, r1
 8007dde:	f7f8 fe9b 	bl	8000b18 <__aeabi_dcmpgt>
 8007de2:	b9c8      	cbnz	r0, 8007e18 <_dtoa_r+0x6f8>
 8007de4:	4642      	mov	r2, r8
 8007de6:	464b      	mov	r3, r9
 8007de8:	4630      	mov	r0, r6
 8007dea:	4639      	mov	r1, r7
 8007dec:	f7f8 fe6c 	bl	8000ac8 <__aeabi_dcmpeq>
 8007df0:	b110      	cbz	r0, 8007df8 <_dtoa_r+0x6d8>
 8007df2:	9b02      	ldr	r3, [sp, #8]
 8007df4:	07d9      	lsls	r1, r3, #31
 8007df6:	d40f      	bmi.n	8007e18 <_dtoa_r+0x6f8>
 8007df8:	4620      	mov	r0, r4
 8007dfa:	4659      	mov	r1, fp
 8007dfc:	f000 fe58 	bl	8008ab0 <_Bfree>
 8007e00:	2300      	movs	r3, #0
 8007e02:	702b      	strb	r3, [r5, #0]
 8007e04:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007e06:	f10a 0001 	add.w	r0, sl, #1
 8007e0a:	6018      	str	r0, [r3, #0]
 8007e0c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	f43f acd8 	beq.w	80077c4 <_dtoa_r+0xa4>
 8007e14:	601d      	str	r5, [r3, #0]
 8007e16:	e4d5      	b.n	80077c4 <_dtoa_r+0xa4>
 8007e18:	f8cd a01c 	str.w	sl, [sp, #28]
 8007e1c:	462b      	mov	r3, r5
 8007e1e:	461d      	mov	r5, r3
 8007e20:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007e24:	2a39      	cmp	r2, #57	; 0x39
 8007e26:	d108      	bne.n	8007e3a <_dtoa_r+0x71a>
 8007e28:	9a00      	ldr	r2, [sp, #0]
 8007e2a:	429a      	cmp	r2, r3
 8007e2c:	d1f7      	bne.n	8007e1e <_dtoa_r+0x6fe>
 8007e2e:	9a07      	ldr	r2, [sp, #28]
 8007e30:	9900      	ldr	r1, [sp, #0]
 8007e32:	3201      	adds	r2, #1
 8007e34:	9207      	str	r2, [sp, #28]
 8007e36:	2230      	movs	r2, #48	; 0x30
 8007e38:	700a      	strb	r2, [r1, #0]
 8007e3a:	781a      	ldrb	r2, [r3, #0]
 8007e3c:	3201      	adds	r2, #1
 8007e3e:	701a      	strb	r2, [r3, #0]
 8007e40:	e78c      	b.n	8007d5c <_dtoa_r+0x63c>
 8007e42:	4b7f      	ldr	r3, [pc, #508]	; (8008040 <_dtoa_r+0x920>)
 8007e44:	2200      	movs	r2, #0
 8007e46:	f7f8 fbd7 	bl	80005f8 <__aeabi_dmul>
 8007e4a:	2200      	movs	r2, #0
 8007e4c:	2300      	movs	r3, #0
 8007e4e:	4606      	mov	r6, r0
 8007e50:	460f      	mov	r7, r1
 8007e52:	f7f8 fe39 	bl	8000ac8 <__aeabi_dcmpeq>
 8007e56:	2800      	cmp	r0, #0
 8007e58:	d09b      	beq.n	8007d92 <_dtoa_r+0x672>
 8007e5a:	e7cd      	b.n	8007df8 <_dtoa_r+0x6d8>
 8007e5c:	9a08      	ldr	r2, [sp, #32]
 8007e5e:	2a00      	cmp	r2, #0
 8007e60:	f000 80c4 	beq.w	8007fec <_dtoa_r+0x8cc>
 8007e64:	9a05      	ldr	r2, [sp, #20]
 8007e66:	2a01      	cmp	r2, #1
 8007e68:	f300 80a8 	bgt.w	8007fbc <_dtoa_r+0x89c>
 8007e6c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007e6e:	2a00      	cmp	r2, #0
 8007e70:	f000 80a0 	beq.w	8007fb4 <_dtoa_r+0x894>
 8007e74:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007e78:	9e06      	ldr	r6, [sp, #24]
 8007e7a:	4645      	mov	r5, r8
 8007e7c:	9a04      	ldr	r2, [sp, #16]
 8007e7e:	2101      	movs	r1, #1
 8007e80:	441a      	add	r2, r3
 8007e82:	4620      	mov	r0, r4
 8007e84:	4498      	add	r8, r3
 8007e86:	9204      	str	r2, [sp, #16]
 8007e88:	f000 ff18 	bl	8008cbc <__i2b>
 8007e8c:	4607      	mov	r7, r0
 8007e8e:	2d00      	cmp	r5, #0
 8007e90:	dd0b      	ble.n	8007eaa <_dtoa_r+0x78a>
 8007e92:	9b04      	ldr	r3, [sp, #16]
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	dd08      	ble.n	8007eaa <_dtoa_r+0x78a>
 8007e98:	42ab      	cmp	r3, r5
 8007e9a:	9a04      	ldr	r2, [sp, #16]
 8007e9c:	bfa8      	it	ge
 8007e9e:	462b      	movge	r3, r5
 8007ea0:	eba8 0803 	sub.w	r8, r8, r3
 8007ea4:	1aed      	subs	r5, r5, r3
 8007ea6:	1ad3      	subs	r3, r2, r3
 8007ea8:	9304      	str	r3, [sp, #16]
 8007eaa:	9b06      	ldr	r3, [sp, #24]
 8007eac:	b1fb      	cbz	r3, 8007eee <_dtoa_r+0x7ce>
 8007eae:	9b08      	ldr	r3, [sp, #32]
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	f000 809f 	beq.w	8007ff4 <_dtoa_r+0x8d4>
 8007eb6:	2e00      	cmp	r6, #0
 8007eb8:	dd11      	ble.n	8007ede <_dtoa_r+0x7be>
 8007eba:	4639      	mov	r1, r7
 8007ebc:	4632      	mov	r2, r6
 8007ebe:	4620      	mov	r0, r4
 8007ec0:	f000 ffb8 	bl	8008e34 <__pow5mult>
 8007ec4:	465a      	mov	r2, fp
 8007ec6:	4601      	mov	r1, r0
 8007ec8:	4607      	mov	r7, r0
 8007eca:	4620      	mov	r0, r4
 8007ecc:	f000 ff0c 	bl	8008ce8 <__multiply>
 8007ed0:	4659      	mov	r1, fp
 8007ed2:	9007      	str	r0, [sp, #28]
 8007ed4:	4620      	mov	r0, r4
 8007ed6:	f000 fdeb 	bl	8008ab0 <_Bfree>
 8007eda:	9b07      	ldr	r3, [sp, #28]
 8007edc:	469b      	mov	fp, r3
 8007ede:	9b06      	ldr	r3, [sp, #24]
 8007ee0:	1b9a      	subs	r2, r3, r6
 8007ee2:	d004      	beq.n	8007eee <_dtoa_r+0x7ce>
 8007ee4:	4659      	mov	r1, fp
 8007ee6:	4620      	mov	r0, r4
 8007ee8:	f000 ffa4 	bl	8008e34 <__pow5mult>
 8007eec:	4683      	mov	fp, r0
 8007eee:	2101      	movs	r1, #1
 8007ef0:	4620      	mov	r0, r4
 8007ef2:	f000 fee3 	bl	8008cbc <__i2b>
 8007ef6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	4606      	mov	r6, r0
 8007efc:	dd7c      	ble.n	8007ff8 <_dtoa_r+0x8d8>
 8007efe:	461a      	mov	r2, r3
 8007f00:	4601      	mov	r1, r0
 8007f02:	4620      	mov	r0, r4
 8007f04:	f000 ff96 	bl	8008e34 <__pow5mult>
 8007f08:	9b05      	ldr	r3, [sp, #20]
 8007f0a:	2b01      	cmp	r3, #1
 8007f0c:	4606      	mov	r6, r0
 8007f0e:	dd76      	ble.n	8007ffe <_dtoa_r+0x8de>
 8007f10:	2300      	movs	r3, #0
 8007f12:	9306      	str	r3, [sp, #24]
 8007f14:	6933      	ldr	r3, [r6, #16]
 8007f16:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007f1a:	6918      	ldr	r0, [r3, #16]
 8007f1c:	f000 fe7e 	bl	8008c1c <__hi0bits>
 8007f20:	f1c0 0020 	rsb	r0, r0, #32
 8007f24:	9b04      	ldr	r3, [sp, #16]
 8007f26:	4418      	add	r0, r3
 8007f28:	f010 001f 	ands.w	r0, r0, #31
 8007f2c:	f000 8086 	beq.w	800803c <_dtoa_r+0x91c>
 8007f30:	f1c0 0320 	rsb	r3, r0, #32
 8007f34:	2b04      	cmp	r3, #4
 8007f36:	dd7f      	ble.n	8008038 <_dtoa_r+0x918>
 8007f38:	f1c0 001c 	rsb	r0, r0, #28
 8007f3c:	9b04      	ldr	r3, [sp, #16]
 8007f3e:	4403      	add	r3, r0
 8007f40:	4480      	add	r8, r0
 8007f42:	4405      	add	r5, r0
 8007f44:	9304      	str	r3, [sp, #16]
 8007f46:	f1b8 0f00 	cmp.w	r8, #0
 8007f4a:	dd05      	ble.n	8007f58 <_dtoa_r+0x838>
 8007f4c:	4659      	mov	r1, fp
 8007f4e:	4642      	mov	r2, r8
 8007f50:	4620      	mov	r0, r4
 8007f52:	f000 ffc9 	bl	8008ee8 <__lshift>
 8007f56:	4683      	mov	fp, r0
 8007f58:	9b04      	ldr	r3, [sp, #16]
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	dd05      	ble.n	8007f6a <_dtoa_r+0x84a>
 8007f5e:	4631      	mov	r1, r6
 8007f60:	461a      	mov	r2, r3
 8007f62:	4620      	mov	r0, r4
 8007f64:	f000 ffc0 	bl	8008ee8 <__lshift>
 8007f68:	4606      	mov	r6, r0
 8007f6a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d069      	beq.n	8008044 <_dtoa_r+0x924>
 8007f70:	4631      	mov	r1, r6
 8007f72:	4658      	mov	r0, fp
 8007f74:	f001 f824 	bl	8008fc0 <__mcmp>
 8007f78:	2800      	cmp	r0, #0
 8007f7a:	da63      	bge.n	8008044 <_dtoa_r+0x924>
 8007f7c:	2300      	movs	r3, #0
 8007f7e:	4659      	mov	r1, fp
 8007f80:	220a      	movs	r2, #10
 8007f82:	4620      	mov	r0, r4
 8007f84:	f000 fdb6 	bl	8008af4 <__multadd>
 8007f88:	9b08      	ldr	r3, [sp, #32]
 8007f8a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007f8e:	4683      	mov	fp, r0
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	f000 818f 	beq.w	80082b4 <_dtoa_r+0xb94>
 8007f96:	4639      	mov	r1, r7
 8007f98:	2300      	movs	r3, #0
 8007f9a:	220a      	movs	r2, #10
 8007f9c:	4620      	mov	r0, r4
 8007f9e:	f000 fda9 	bl	8008af4 <__multadd>
 8007fa2:	f1b9 0f00 	cmp.w	r9, #0
 8007fa6:	4607      	mov	r7, r0
 8007fa8:	f300 808e 	bgt.w	80080c8 <_dtoa_r+0x9a8>
 8007fac:	9b05      	ldr	r3, [sp, #20]
 8007fae:	2b02      	cmp	r3, #2
 8007fb0:	dc50      	bgt.n	8008054 <_dtoa_r+0x934>
 8007fb2:	e089      	b.n	80080c8 <_dtoa_r+0x9a8>
 8007fb4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007fb6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007fba:	e75d      	b.n	8007e78 <_dtoa_r+0x758>
 8007fbc:	9b01      	ldr	r3, [sp, #4]
 8007fbe:	1e5e      	subs	r6, r3, #1
 8007fc0:	9b06      	ldr	r3, [sp, #24]
 8007fc2:	42b3      	cmp	r3, r6
 8007fc4:	bfbf      	itttt	lt
 8007fc6:	9b06      	ldrlt	r3, [sp, #24]
 8007fc8:	9606      	strlt	r6, [sp, #24]
 8007fca:	1af2      	sublt	r2, r6, r3
 8007fcc:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8007fce:	bfb6      	itet	lt
 8007fd0:	189b      	addlt	r3, r3, r2
 8007fd2:	1b9e      	subge	r6, r3, r6
 8007fd4:	930d      	strlt	r3, [sp, #52]	; 0x34
 8007fd6:	9b01      	ldr	r3, [sp, #4]
 8007fd8:	bfb8      	it	lt
 8007fda:	2600      	movlt	r6, #0
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	bfb5      	itete	lt
 8007fe0:	eba8 0503 	sublt.w	r5, r8, r3
 8007fe4:	9b01      	ldrge	r3, [sp, #4]
 8007fe6:	2300      	movlt	r3, #0
 8007fe8:	4645      	movge	r5, r8
 8007fea:	e747      	b.n	8007e7c <_dtoa_r+0x75c>
 8007fec:	9e06      	ldr	r6, [sp, #24]
 8007fee:	9f08      	ldr	r7, [sp, #32]
 8007ff0:	4645      	mov	r5, r8
 8007ff2:	e74c      	b.n	8007e8e <_dtoa_r+0x76e>
 8007ff4:	9a06      	ldr	r2, [sp, #24]
 8007ff6:	e775      	b.n	8007ee4 <_dtoa_r+0x7c4>
 8007ff8:	9b05      	ldr	r3, [sp, #20]
 8007ffa:	2b01      	cmp	r3, #1
 8007ffc:	dc18      	bgt.n	8008030 <_dtoa_r+0x910>
 8007ffe:	9b02      	ldr	r3, [sp, #8]
 8008000:	b9b3      	cbnz	r3, 8008030 <_dtoa_r+0x910>
 8008002:	9b03      	ldr	r3, [sp, #12]
 8008004:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008008:	b9a3      	cbnz	r3, 8008034 <_dtoa_r+0x914>
 800800a:	9b03      	ldr	r3, [sp, #12]
 800800c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008010:	0d1b      	lsrs	r3, r3, #20
 8008012:	051b      	lsls	r3, r3, #20
 8008014:	b12b      	cbz	r3, 8008022 <_dtoa_r+0x902>
 8008016:	9b04      	ldr	r3, [sp, #16]
 8008018:	3301      	adds	r3, #1
 800801a:	9304      	str	r3, [sp, #16]
 800801c:	f108 0801 	add.w	r8, r8, #1
 8008020:	2301      	movs	r3, #1
 8008022:	9306      	str	r3, [sp, #24]
 8008024:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008026:	2b00      	cmp	r3, #0
 8008028:	f47f af74 	bne.w	8007f14 <_dtoa_r+0x7f4>
 800802c:	2001      	movs	r0, #1
 800802e:	e779      	b.n	8007f24 <_dtoa_r+0x804>
 8008030:	2300      	movs	r3, #0
 8008032:	e7f6      	b.n	8008022 <_dtoa_r+0x902>
 8008034:	9b02      	ldr	r3, [sp, #8]
 8008036:	e7f4      	b.n	8008022 <_dtoa_r+0x902>
 8008038:	d085      	beq.n	8007f46 <_dtoa_r+0x826>
 800803a:	4618      	mov	r0, r3
 800803c:	301c      	adds	r0, #28
 800803e:	e77d      	b.n	8007f3c <_dtoa_r+0x81c>
 8008040:	40240000 	.word	0x40240000
 8008044:	9b01      	ldr	r3, [sp, #4]
 8008046:	2b00      	cmp	r3, #0
 8008048:	dc38      	bgt.n	80080bc <_dtoa_r+0x99c>
 800804a:	9b05      	ldr	r3, [sp, #20]
 800804c:	2b02      	cmp	r3, #2
 800804e:	dd35      	ble.n	80080bc <_dtoa_r+0x99c>
 8008050:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8008054:	f1b9 0f00 	cmp.w	r9, #0
 8008058:	d10d      	bne.n	8008076 <_dtoa_r+0x956>
 800805a:	4631      	mov	r1, r6
 800805c:	464b      	mov	r3, r9
 800805e:	2205      	movs	r2, #5
 8008060:	4620      	mov	r0, r4
 8008062:	f000 fd47 	bl	8008af4 <__multadd>
 8008066:	4601      	mov	r1, r0
 8008068:	4606      	mov	r6, r0
 800806a:	4658      	mov	r0, fp
 800806c:	f000 ffa8 	bl	8008fc0 <__mcmp>
 8008070:	2800      	cmp	r0, #0
 8008072:	f73f adbd 	bgt.w	8007bf0 <_dtoa_r+0x4d0>
 8008076:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008078:	9d00      	ldr	r5, [sp, #0]
 800807a:	ea6f 0a03 	mvn.w	sl, r3
 800807e:	f04f 0800 	mov.w	r8, #0
 8008082:	4631      	mov	r1, r6
 8008084:	4620      	mov	r0, r4
 8008086:	f000 fd13 	bl	8008ab0 <_Bfree>
 800808a:	2f00      	cmp	r7, #0
 800808c:	f43f aeb4 	beq.w	8007df8 <_dtoa_r+0x6d8>
 8008090:	f1b8 0f00 	cmp.w	r8, #0
 8008094:	d005      	beq.n	80080a2 <_dtoa_r+0x982>
 8008096:	45b8      	cmp	r8, r7
 8008098:	d003      	beq.n	80080a2 <_dtoa_r+0x982>
 800809a:	4641      	mov	r1, r8
 800809c:	4620      	mov	r0, r4
 800809e:	f000 fd07 	bl	8008ab0 <_Bfree>
 80080a2:	4639      	mov	r1, r7
 80080a4:	4620      	mov	r0, r4
 80080a6:	f000 fd03 	bl	8008ab0 <_Bfree>
 80080aa:	e6a5      	b.n	8007df8 <_dtoa_r+0x6d8>
 80080ac:	2600      	movs	r6, #0
 80080ae:	4637      	mov	r7, r6
 80080b0:	e7e1      	b.n	8008076 <_dtoa_r+0x956>
 80080b2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80080b4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80080b8:	4637      	mov	r7, r6
 80080ba:	e599      	b.n	8007bf0 <_dtoa_r+0x4d0>
 80080bc:	9b08      	ldr	r3, [sp, #32]
 80080be:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	f000 80fd 	beq.w	80082c2 <_dtoa_r+0xba2>
 80080c8:	2d00      	cmp	r5, #0
 80080ca:	dd05      	ble.n	80080d8 <_dtoa_r+0x9b8>
 80080cc:	4639      	mov	r1, r7
 80080ce:	462a      	mov	r2, r5
 80080d0:	4620      	mov	r0, r4
 80080d2:	f000 ff09 	bl	8008ee8 <__lshift>
 80080d6:	4607      	mov	r7, r0
 80080d8:	9b06      	ldr	r3, [sp, #24]
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d05c      	beq.n	8008198 <_dtoa_r+0xa78>
 80080de:	6879      	ldr	r1, [r7, #4]
 80080e0:	4620      	mov	r0, r4
 80080e2:	f000 fca5 	bl	8008a30 <_Balloc>
 80080e6:	4605      	mov	r5, r0
 80080e8:	b928      	cbnz	r0, 80080f6 <_dtoa_r+0x9d6>
 80080ea:	4b80      	ldr	r3, [pc, #512]	; (80082ec <_dtoa_r+0xbcc>)
 80080ec:	4602      	mov	r2, r0
 80080ee:	f240 21ea 	movw	r1, #746	; 0x2ea
 80080f2:	f7ff bb2e 	b.w	8007752 <_dtoa_r+0x32>
 80080f6:	693a      	ldr	r2, [r7, #16]
 80080f8:	3202      	adds	r2, #2
 80080fa:	0092      	lsls	r2, r2, #2
 80080fc:	f107 010c 	add.w	r1, r7, #12
 8008100:	300c      	adds	r0, #12
 8008102:	f000 fc87 	bl	8008a14 <memcpy>
 8008106:	2201      	movs	r2, #1
 8008108:	4629      	mov	r1, r5
 800810a:	4620      	mov	r0, r4
 800810c:	f000 feec 	bl	8008ee8 <__lshift>
 8008110:	9b00      	ldr	r3, [sp, #0]
 8008112:	3301      	adds	r3, #1
 8008114:	9301      	str	r3, [sp, #4]
 8008116:	9b00      	ldr	r3, [sp, #0]
 8008118:	444b      	add	r3, r9
 800811a:	9307      	str	r3, [sp, #28]
 800811c:	9b02      	ldr	r3, [sp, #8]
 800811e:	f003 0301 	and.w	r3, r3, #1
 8008122:	46b8      	mov	r8, r7
 8008124:	9306      	str	r3, [sp, #24]
 8008126:	4607      	mov	r7, r0
 8008128:	9b01      	ldr	r3, [sp, #4]
 800812a:	4631      	mov	r1, r6
 800812c:	3b01      	subs	r3, #1
 800812e:	4658      	mov	r0, fp
 8008130:	9302      	str	r3, [sp, #8]
 8008132:	f7ff fa67 	bl	8007604 <quorem>
 8008136:	4603      	mov	r3, r0
 8008138:	3330      	adds	r3, #48	; 0x30
 800813a:	9004      	str	r0, [sp, #16]
 800813c:	4641      	mov	r1, r8
 800813e:	4658      	mov	r0, fp
 8008140:	9308      	str	r3, [sp, #32]
 8008142:	f000 ff3d 	bl	8008fc0 <__mcmp>
 8008146:	463a      	mov	r2, r7
 8008148:	4681      	mov	r9, r0
 800814a:	4631      	mov	r1, r6
 800814c:	4620      	mov	r0, r4
 800814e:	f000 ff53 	bl	8008ff8 <__mdiff>
 8008152:	68c2      	ldr	r2, [r0, #12]
 8008154:	9b08      	ldr	r3, [sp, #32]
 8008156:	4605      	mov	r5, r0
 8008158:	bb02      	cbnz	r2, 800819c <_dtoa_r+0xa7c>
 800815a:	4601      	mov	r1, r0
 800815c:	4658      	mov	r0, fp
 800815e:	f000 ff2f 	bl	8008fc0 <__mcmp>
 8008162:	9b08      	ldr	r3, [sp, #32]
 8008164:	4602      	mov	r2, r0
 8008166:	4629      	mov	r1, r5
 8008168:	4620      	mov	r0, r4
 800816a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800816e:	f000 fc9f 	bl	8008ab0 <_Bfree>
 8008172:	9b05      	ldr	r3, [sp, #20]
 8008174:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008176:	9d01      	ldr	r5, [sp, #4]
 8008178:	ea43 0102 	orr.w	r1, r3, r2
 800817c:	9b06      	ldr	r3, [sp, #24]
 800817e:	430b      	orrs	r3, r1
 8008180:	9b08      	ldr	r3, [sp, #32]
 8008182:	d10d      	bne.n	80081a0 <_dtoa_r+0xa80>
 8008184:	2b39      	cmp	r3, #57	; 0x39
 8008186:	d029      	beq.n	80081dc <_dtoa_r+0xabc>
 8008188:	f1b9 0f00 	cmp.w	r9, #0
 800818c:	dd01      	ble.n	8008192 <_dtoa_r+0xa72>
 800818e:	9b04      	ldr	r3, [sp, #16]
 8008190:	3331      	adds	r3, #49	; 0x31
 8008192:	9a02      	ldr	r2, [sp, #8]
 8008194:	7013      	strb	r3, [r2, #0]
 8008196:	e774      	b.n	8008082 <_dtoa_r+0x962>
 8008198:	4638      	mov	r0, r7
 800819a:	e7b9      	b.n	8008110 <_dtoa_r+0x9f0>
 800819c:	2201      	movs	r2, #1
 800819e:	e7e2      	b.n	8008166 <_dtoa_r+0xa46>
 80081a0:	f1b9 0f00 	cmp.w	r9, #0
 80081a4:	db06      	blt.n	80081b4 <_dtoa_r+0xa94>
 80081a6:	9905      	ldr	r1, [sp, #20]
 80081a8:	ea41 0909 	orr.w	r9, r1, r9
 80081ac:	9906      	ldr	r1, [sp, #24]
 80081ae:	ea59 0101 	orrs.w	r1, r9, r1
 80081b2:	d120      	bne.n	80081f6 <_dtoa_r+0xad6>
 80081b4:	2a00      	cmp	r2, #0
 80081b6:	ddec      	ble.n	8008192 <_dtoa_r+0xa72>
 80081b8:	4659      	mov	r1, fp
 80081ba:	2201      	movs	r2, #1
 80081bc:	4620      	mov	r0, r4
 80081be:	9301      	str	r3, [sp, #4]
 80081c0:	f000 fe92 	bl	8008ee8 <__lshift>
 80081c4:	4631      	mov	r1, r6
 80081c6:	4683      	mov	fp, r0
 80081c8:	f000 fefa 	bl	8008fc0 <__mcmp>
 80081cc:	2800      	cmp	r0, #0
 80081ce:	9b01      	ldr	r3, [sp, #4]
 80081d0:	dc02      	bgt.n	80081d8 <_dtoa_r+0xab8>
 80081d2:	d1de      	bne.n	8008192 <_dtoa_r+0xa72>
 80081d4:	07da      	lsls	r2, r3, #31
 80081d6:	d5dc      	bpl.n	8008192 <_dtoa_r+0xa72>
 80081d8:	2b39      	cmp	r3, #57	; 0x39
 80081da:	d1d8      	bne.n	800818e <_dtoa_r+0xa6e>
 80081dc:	9a02      	ldr	r2, [sp, #8]
 80081de:	2339      	movs	r3, #57	; 0x39
 80081e0:	7013      	strb	r3, [r2, #0]
 80081e2:	462b      	mov	r3, r5
 80081e4:	461d      	mov	r5, r3
 80081e6:	3b01      	subs	r3, #1
 80081e8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80081ec:	2a39      	cmp	r2, #57	; 0x39
 80081ee:	d050      	beq.n	8008292 <_dtoa_r+0xb72>
 80081f0:	3201      	adds	r2, #1
 80081f2:	701a      	strb	r2, [r3, #0]
 80081f4:	e745      	b.n	8008082 <_dtoa_r+0x962>
 80081f6:	2a00      	cmp	r2, #0
 80081f8:	dd03      	ble.n	8008202 <_dtoa_r+0xae2>
 80081fa:	2b39      	cmp	r3, #57	; 0x39
 80081fc:	d0ee      	beq.n	80081dc <_dtoa_r+0xabc>
 80081fe:	3301      	adds	r3, #1
 8008200:	e7c7      	b.n	8008192 <_dtoa_r+0xa72>
 8008202:	9a01      	ldr	r2, [sp, #4]
 8008204:	9907      	ldr	r1, [sp, #28]
 8008206:	f802 3c01 	strb.w	r3, [r2, #-1]
 800820a:	428a      	cmp	r2, r1
 800820c:	d02a      	beq.n	8008264 <_dtoa_r+0xb44>
 800820e:	4659      	mov	r1, fp
 8008210:	2300      	movs	r3, #0
 8008212:	220a      	movs	r2, #10
 8008214:	4620      	mov	r0, r4
 8008216:	f000 fc6d 	bl	8008af4 <__multadd>
 800821a:	45b8      	cmp	r8, r7
 800821c:	4683      	mov	fp, r0
 800821e:	f04f 0300 	mov.w	r3, #0
 8008222:	f04f 020a 	mov.w	r2, #10
 8008226:	4641      	mov	r1, r8
 8008228:	4620      	mov	r0, r4
 800822a:	d107      	bne.n	800823c <_dtoa_r+0xb1c>
 800822c:	f000 fc62 	bl	8008af4 <__multadd>
 8008230:	4680      	mov	r8, r0
 8008232:	4607      	mov	r7, r0
 8008234:	9b01      	ldr	r3, [sp, #4]
 8008236:	3301      	adds	r3, #1
 8008238:	9301      	str	r3, [sp, #4]
 800823a:	e775      	b.n	8008128 <_dtoa_r+0xa08>
 800823c:	f000 fc5a 	bl	8008af4 <__multadd>
 8008240:	4639      	mov	r1, r7
 8008242:	4680      	mov	r8, r0
 8008244:	2300      	movs	r3, #0
 8008246:	220a      	movs	r2, #10
 8008248:	4620      	mov	r0, r4
 800824a:	f000 fc53 	bl	8008af4 <__multadd>
 800824e:	4607      	mov	r7, r0
 8008250:	e7f0      	b.n	8008234 <_dtoa_r+0xb14>
 8008252:	f1b9 0f00 	cmp.w	r9, #0
 8008256:	9a00      	ldr	r2, [sp, #0]
 8008258:	bfcc      	ite	gt
 800825a:	464d      	movgt	r5, r9
 800825c:	2501      	movle	r5, #1
 800825e:	4415      	add	r5, r2
 8008260:	f04f 0800 	mov.w	r8, #0
 8008264:	4659      	mov	r1, fp
 8008266:	2201      	movs	r2, #1
 8008268:	4620      	mov	r0, r4
 800826a:	9301      	str	r3, [sp, #4]
 800826c:	f000 fe3c 	bl	8008ee8 <__lshift>
 8008270:	4631      	mov	r1, r6
 8008272:	4683      	mov	fp, r0
 8008274:	f000 fea4 	bl	8008fc0 <__mcmp>
 8008278:	2800      	cmp	r0, #0
 800827a:	dcb2      	bgt.n	80081e2 <_dtoa_r+0xac2>
 800827c:	d102      	bne.n	8008284 <_dtoa_r+0xb64>
 800827e:	9b01      	ldr	r3, [sp, #4]
 8008280:	07db      	lsls	r3, r3, #31
 8008282:	d4ae      	bmi.n	80081e2 <_dtoa_r+0xac2>
 8008284:	462b      	mov	r3, r5
 8008286:	461d      	mov	r5, r3
 8008288:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800828c:	2a30      	cmp	r2, #48	; 0x30
 800828e:	d0fa      	beq.n	8008286 <_dtoa_r+0xb66>
 8008290:	e6f7      	b.n	8008082 <_dtoa_r+0x962>
 8008292:	9a00      	ldr	r2, [sp, #0]
 8008294:	429a      	cmp	r2, r3
 8008296:	d1a5      	bne.n	80081e4 <_dtoa_r+0xac4>
 8008298:	f10a 0a01 	add.w	sl, sl, #1
 800829c:	2331      	movs	r3, #49	; 0x31
 800829e:	e779      	b.n	8008194 <_dtoa_r+0xa74>
 80082a0:	4b13      	ldr	r3, [pc, #76]	; (80082f0 <_dtoa_r+0xbd0>)
 80082a2:	f7ff baaf 	b.w	8007804 <_dtoa_r+0xe4>
 80082a6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	f47f aa86 	bne.w	80077ba <_dtoa_r+0x9a>
 80082ae:	4b11      	ldr	r3, [pc, #68]	; (80082f4 <_dtoa_r+0xbd4>)
 80082b0:	f7ff baa8 	b.w	8007804 <_dtoa_r+0xe4>
 80082b4:	f1b9 0f00 	cmp.w	r9, #0
 80082b8:	dc03      	bgt.n	80082c2 <_dtoa_r+0xba2>
 80082ba:	9b05      	ldr	r3, [sp, #20]
 80082bc:	2b02      	cmp	r3, #2
 80082be:	f73f aec9 	bgt.w	8008054 <_dtoa_r+0x934>
 80082c2:	9d00      	ldr	r5, [sp, #0]
 80082c4:	4631      	mov	r1, r6
 80082c6:	4658      	mov	r0, fp
 80082c8:	f7ff f99c 	bl	8007604 <quorem>
 80082cc:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80082d0:	f805 3b01 	strb.w	r3, [r5], #1
 80082d4:	9a00      	ldr	r2, [sp, #0]
 80082d6:	1aaa      	subs	r2, r5, r2
 80082d8:	4591      	cmp	r9, r2
 80082da:	ddba      	ble.n	8008252 <_dtoa_r+0xb32>
 80082dc:	4659      	mov	r1, fp
 80082de:	2300      	movs	r3, #0
 80082e0:	220a      	movs	r2, #10
 80082e2:	4620      	mov	r0, r4
 80082e4:	f000 fc06 	bl	8008af4 <__multadd>
 80082e8:	4683      	mov	fp, r0
 80082ea:	e7eb      	b.n	80082c4 <_dtoa_r+0xba4>
 80082ec:	0800bc24 	.word	0x0800bc24
 80082f0:	0800ba20 	.word	0x0800ba20
 80082f4:	0800bba1 	.word	0x0800bba1

080082f8 <rshift>:
 80082f8:	6903      	ldr	r3, [r0, #16]
 80082fa:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80082fe:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008302:	ea4f 1261 	mov.w	r2, r1, asr #5
 8008306:	f100 0414 	add.w	r4, r0, #20
 800830a:	dd45      	ble.n	8008398 <rshift+0xa0>
 800830c:	f011 011f 	ands.w	r1, r1, #31
 8008310:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008314:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8008318:	d10c      	bne.n	8008334 <rshift+0x3c>
 800831a:	f100 0710 	add.w	r7, r0, #16
 800831e:	4629      	mov	r1, r5
 8008320:	42b1      	cmp	r1, r6
 8008322:	d334      	bcc.n	800838e <rshift+0x96>
 8008324:	1a9b      	subs	r3, r3, r2
 8008326:	009b      	lsls	r3, r3, #2
 8008328:	1eea      	subs	r2, r5, #3
 800832a:	4296      	cmp	r6, r2
 800832c:	bf38      	it	cc
 800832e:	2300      	movcc	r3, #0
 8008330:	4423      	add	r3, r4
 8008332:	e015      	b.n	8008360 <rshift+0x68>
 8008334:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8008338:	f1c1 0820 	rsb	r8, r1, #32
 800833c:	40cf      	lsrs	r7, r1
 800833e:	f105 0e04 	add.w	lr, r5, #4
 8008342:	46a1      	mov	r9, r4
 8008344:	4576      	cmp	r6, lr
 8008346:	46f4      	mov	ip, lr
 8008348:	d815      	bhi.n	8008376 <rshift+0x7e>
 800834a:	1a9b      	subs	r3, r3, r2
 800834c:	009a      	lsls	r2, r3, #2
 800834e:	3a04      	subs	r2, #4
 8008350:	3501      	adds	r5, #1
 8008352:	42ae      	cmp	r6, r5
 8008354:	bf38      	it	cc
 8008356:	2200      	movcc	r2, #0
 8008358:	18a3      	adds	r3, r4, r2
 800835a:	50a7      	str	r7, [r4, r2]
 800835c:	b107      	cbz	r7, 8008360 <rshift+0x68>
 800835e:	3304      	adds	r3, #4
 8008360:	1b1a      	subs	r2, r3, r4
 8008362:	42a3      	cmp	r3, r4
 8008364:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008368:	bf08      	it	eq
 800836a:	2300      	moveq	r3, #0
 800836c:	6102      	str	r2, [r0, #16]
 800836e:	bf08      	it	eq
 8008370:	6143      	streq	r3, [r0, #20]
 8008372:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008376:	f8dc c000 	ldr.w	ip, [ip]
 800837a:	fa0c fc08 	lsl.w	ip, ip, r8
 800837e:	ea4c 0707 	orr.w	r7, ip, r7
 8008382:	f849 7b04 	str.w	r7, [r9], #4
 8008386:	f85e 7b04 	ldr.w	r7, [lr], #4
 800838a:	40cf      	lsrs	r7, r1
 800838c:	e7da      	b.n	8008344 <rshift+0x4c>
 800838e:	f851 cb04 	ldr.w	ip, [r1], #4
 8008392:	f847 cf04 	str.w	ip, [r7, #4]!
 8008396:	e7c3      	b.n	8008320 <rshift+0x28>
 8008398:	4623      	mov	r3, r4
 800839a:	e7e1      	b.n	8008360 <rshift+0x68>

0800839c <__hexdig_fun>:
 800839c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80083a0:	2b09      	cmp	r3, #9
 80083a2:	d802      	bhi.n	80083aa <__hexdig_fun+0xe>
 80083a4:	3820      	subs	r0, #32
 80083a6:	b2c0      	uxtb	r0, r0
 80083a8:	4770      	bx	lr
 80083aa:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80083ae:	2b05      	cmp	r3, #5
 80083b0:	d801      	bhi.n	80083b6 <__hexdig_fun+0x1a>
 80083b2:	3847      	subs	r0, #71	; 0x47
 80083b4:	e7f7      	b.n	80083a6 <__hexdig_fun+0xa>
 80083b6:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80083ba:	2b05      	cmp	r3, #5
 80083bc:	d801      	bhi.n	80083c2 <__hexdig_fun+0x26>
 80083be:	3827      	subs	r0, #39	; 0x27
 80083c0:	e7f1      	b.n	80083a6 <__hexdig_fun+0xa>
 80083c2:	2000      	movs	r0, #0
 80083c4:	4770      	bx	lr
	...

080083c8 <__gethex>:
 80083c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083cc:	ed2d 8b02 	vpush	{d8}
 80083d0:	b089      	sub	sp, #36	; 0x24
 80083d2:	ee08 0a10 	vmov	s16, r0
 80083d6:	9304      	str	r3, [sp, #16]
 80083d8:	4bbc      	ldr	r3, [pc, #752]	; (80086cc <__gethex+0x304>)
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	9301      	str	r3, [sp, #4]
 80083de:	4618      	mov	r0, r3
 80083e0:	468b      	mov	fp, r1
 80083e2:	4690      	mov	r8, r2
 80083e4:	f7f7 fef4 	bl	80001d0 <strlen>
 80083e8:	9b01      	ldr	r3, [sp, #4]
 80083ea:	f8db 2000 	ldr.w	r2, [fp]
 80083ee:	4403      	add	r3, r0
 80083f0:	4682      	mov	sl, r0
 80083f2:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80083f6:	9305      	str	r3, [sp, #20]
 80083f8:	1c93      	adds	r3, r2, #2
 80083fa:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80083fe:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8008402:	32fe      	adds	r2, #254	; 0xfe
 8008404:	18d1      	adds	r1, r2, r3
 8008406:	461f      	mov	r7, r3
 8008408:	f813 0b01 	ldrb.w	r0, [r3], #1
 800840c:	9100      	str	r1, [sp, #0]
 800840e:	2830      	cmp	r0, #48	; 0x30
 8008410:	d0f8      	beq.n	8008404 <__gethex+0x3c>
 8008412:	f7ff ffc3 	bl	800839c <__hexdig_fun>
 8008416:	4604      	mov	r4, r0
 8008418:	2800      	cmp	r0, #0
 800841a:	d13a      	bne.n	8008492 <__gethex+0xca>
 800841c:	9901      	ldr	r1, [sp, #4]
 800841e:	4652      	mov	r2, sl
 8008420:	4638      	mov	r0, r7
 8008422:	f001 f9ed 	bl	8009800 <strncmp>
 8008426:	4605      	mov	r5, r0
 8008428:	2800      	cmp	r0, #0
 800842a:	d168      	bne.n	80084fe <__gethex+0x136>
 800842c:	f817 000a 	ldrb.w	r0, [r7, sl]
 8008430:	eb07 060a 	add.w	r6, r7, sl
 8008434:	f7ff ffb2 	bl	800839c <__hexdig_fun>
 8008438:	2800      	cmp	r0, #0
 800843a:	d062      	beq.n	8008502 <__gethex+0x13a>
 800843c:	4633      	mov	r3, r6
 800843e:	7818      	ldrb	r0, [r3, #0]
 8008440:	2830      	cmp	r0, #48	; 0x30
 8008442:	461f      	mov	r7, r3
 8008444:	f103 0301 	add.w	r3, r3, #1
 8008448:	d0f9      	beq.n	800843e <__gethex+0x76>
 800844a:	f7ff ffa7 	bl	800839c <__hexdig_fun>
 800844e:	2301      	movs	r3, #1
 8008450:	fab0 f480 	clz	r4, r0
 8008454:	0964      	lsrs	r4, r4, #5
 8008456:	4635      	mov	r5, r6
 8008458:	9300      	str	r3, [sp, #0]
 800845a:	463a      	mov	r2, r7
 800845c:	4616      	mov	r6, r2
 800845e:	3201      	adds	r2, #1
 8008460:	7830      	ldrb	r0, [r6, #0]
 8008462:	f7ff ff9b 	bl	800839c <__hexdig_fun>
 8008466:	2800      	cmp	r0, #0
 8008468:	d1f8      	bne.n	800845c <__gethex+0x94>
 800846a:	9901      	ldr	r1, [sp, #4]
 800846c:	4652      	mov	r2, sl
 800846e:	4630      	mov	r0, r6
 8008470:	f001 f9c6 	bl	8009800 <strncmp>
 8008474:	b980      	cbnz	r0, 8008498 <__gethex+0xd0>
 8008476:	b94d      	cbnz	r5, 800848c <__gethex+0xc4>
 8008478:	eb06 050a 	add.w	r5, r6, sl
 800847c:	462a      	mov	r2, r5
 800847e:	4616      	mov	r6, r2
 8008480:	3201      	adds	r2, #1
 8008482:	7830      	ldrb	r0, [r6, #0]
 8008484:	f7ff ff8a 	bl	800839c <__hexdig_fun>
 8008488:	2800      	cmp	r0, #0
 800848a:	d1f8      	bne.n	800847e <__gethex+0xb6>
 800848c:	1bad      	subs	r5, r5, r6
 800848e:	00ad      	lsls	r5, r5, #2
 8008490:	e004      	b.n	800849c <__gethex+0xd4>
 8008492:	2400      	movs	r4, #0
 8008494:	4625      	mov	r5, r4
 8008496:	e7e0      	b.n	800845a <__gethex+0x92>
 8008498:	2d00      	cmp	r5, #0
 800849a:	d1f7      	bne.n	800848c <__gethex+0xc4>
 800849c:	7833      	ldrb	r3, [r6, #0]
 800849e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80084a2:	2b50      	cmp	r3, #80	; 0x50
 80084a4:	d13b      	bne.n	800851e <__gethex+0x156>
 80084a6:	7873      	ldrb	r3, [r6, #1]
 80084a8:	2b2b      	cmp	r3, #43	; 0x2b
 80084aa:	d02c      	beq.n	8008506 <__gethex+0x13e>
 80084ac:	2b2d      	cmp	r3, #45	; 0x2d
 80084ae:	d02e      	beq.n	800850e <__gethex+0x146>
 80084b0:	1c71      	adds	r1, r6, #1
 80084b2:	f04f 0900 	mov.w	r9, #0
 80084b6:	7808      	ldrb	r0, [r1, #0]
 80084b8:	f7ff ff70 	bl	800839c <__hexdig_fun>
 80084bc:	1e43      	subs	r3, r0, #1
 80084be:	b2db      	uxtb	r3, r3
 80084c0:	2b18      	cmp	r3, #24
 80084c2:	d82c      	bhi.n	800851e <__gethex+0x156>
 80084c4:	f1a0 0210 	sub.w	r2, r0, #16
 80084c8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80084cc:	f7ff ff66 	bl	800839c <__hexdig_fun>
 80084d0:	1e43      	subs	r3, r0, #1
 80084d2:	b2db      	uxtb	r3, r3
 80084d4:	2b18      	cmp	r3, #24
 80084d6:	d91d      	bls.n	8008514 <__gethex+0x14c>
 80084d8:	f1b9 0f00 	cmp.w	r9, #0
 80084dc:	d000      	beq.n	80084e0 <__gethex+0x118>
 80084de:	4252      	negs	r2, r2
 80084e0:	4415      	add	r5, r2
 80084e2:	f8cb 1000 	str.w	r1, [fp]
 80084e6:	b1e4      	cbz	r4, 8008522 <__gethex+0x15a>
 80084e8:	9b00      	ldr	r3, [sp, #0]
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	bf14      	ite	ne
 80084ee:	2700      	movne	r7, #0
 80084f0:	2706      	moveq	r7, #6
 80084f2:	4638      	mov	r0, r7
 80084f4:	b009      	add	sp, #36	; 0x24
 80084f6:	ecbd 8b02 	vpop	{d8}
 80084fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084fe:	463e      	mov	r6, r7
 8008500:	4625      	mov	r5, r4
 8008502:	2401      	movs	r4, #1
 8008504:	e7ca      	b.n	800849c <__gethex+0xd4>
 8008506:	f04f 0900 	mov.w	r9, #0
 800850a:	1cb1      	adds	r1, r6, #2
 800850c:	e7d3      	b.n	80084b6 <__gethex+0xee>
 800850e:	f04f 0901 	mov.w	r9, #1
 8008512:	e7fa      	b.n	800850a <__gethex+0x142>
 8008514:	230a      	movs	r3, #10
 8008516:	fb03 0202 	mla	r2, r3, r2, r0
 800851a:	3a10      	subs	r2, #16
 800851c:	e7d4      	b.n	80084c8 <__gethex+0x100>
 800851e:	4631      	mov	r1, r6
 8008520:	e7df      	b.n	80084e2 <__gethex+0x11a>
 8008522:	1bf3      	subs	r3, r6, r7
 8008524:	3b01      	subs	r3, #1
 8008526:	4621      	mov	r1, r4
 8008528:	2b07      	cmp	r3, #7
 800852a:	dc0b      	bgt.n	8008544 <__gethex+0x17c>
 800852c:	ee18 0a10 	vmov	r0, s16
 8008530:	f000 fa7e 	bl	8008a30 <_Balloc>
 8008534:	4604      	mov	r4, r0
 8008536:	b940      	cbnz	r0, 800854a <__gethex+0x182>
 8008538:	4b65      	ldr	r3, [pc, #404]	; (80086d0 <__gethex+0x308>)
 800853a:	4602      	mov	r2, r0
 800853c:	21de      	movs	r1, #222	; 0xde
 800853e:	4865      	ldr	r0, [pc, #404]	; (80086d4 <__gethex+0x30c>)
 8008540:	f001 f97e 	bl	8009840 <__assert_func>
 8008544:	3101      	adds	r1, #1
 8008546:	105b      	asrs	r3, r3, #1
 8008548:	e7ee      	b.n	8008528 <__gethex+0x160>
 800854a:	f100 0914 	add.w	r9, r0, #20
 800854e:	f04f 0b00 	mov.w	fp, #0
 8008552:	f1ca 0301 	rsb	r3, sl, #1
 8008556:	f8cd 9008 	str.w	r9, [sp, #8]
 800855a:	f8cd b000 	str.w	fp, [sp]
 800855e:	9306      	str	r3, [sp, #24]
 8008560:	42b7      	cmp	r7, r6
 8008562:	d340      	bcc.n	80085e6 <__gethex+0x21e>
 8008564:	9802      	ldr	r0, [sp, #8]
 8008566:	9b00      	ldr	r3, [sp, #0]
 8008568:	f840 3b04 	str.w	r3, [r0], #4
 800856c:	eba0 0009 	sub.w	r0, r0, r9
 8008570:	1080      	asrs	r0, r0, #2
 8008572:	0146      	lsls	r6, r0, #5
 8008574:	6120      	str	r0, [r4, #16]
 8008576:	4618      	mov	r0, r3
 8008578:	f000 fb50 	bl	8008c1c <__hi0bits>
 800857c:	1a30      	subs	r0, r6, r0
 800857e:	f8d8 6000 	ldr.w	r6, [r8]
 8008582:	42b0      	cmp	r0, r6
 8008584:	dd63      	ble.n	800864e <__gethex+0x286>
 8008586:	1b87      	subs	r7, r0, r6
 8008588:	4639      	mov	r1, r7
 800858a:	4620      	mov	r0, r4
 800858c:	f000 feea 	bl	8009364 <__any_on>
 8008590:	4682      	mov	sl, r0
 8008592:	b1a8      	cbz	r0, 80085c0 <__gethex+0x1f8>
 8008594:	1e7b      	subs	r3, r7, #1
 8008596:	1159      	asrs	r1, r3, #5
 8008598:	f003 021f 	and.w	r2, r3, #31
 800859c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80085a0:	f04f 0a01 	mov.w	sl, #1
 80085a4:	fa0a f202 	lsl.w	r2, sl, r2
 80085a8:	420a      	tst	r2, r1
 80085aa:	d009      	beq.n	80085c0 <__gethex+0x1f8>
 80085ac:	4553      	cmp	r3, sl
 80085ae:	dd05      	ble.n	80085bc <__gethex+0x1f4>
 80085b0:	1eb9      	subs	r1, r7, #2
 80085b2:	4620      	mov	r0, r4
 80085b4:	f000 fed6 	bl	8009364 <__any_on>
 80085b8:	2800      	cmp	r0, #0
 80085ba:	d145      	bne.n	8008648 <__gethex+0x280>
 80085bc:	f04f 0a02 	mov.w	sl, #2
 80085c0:	4639      	mov	r1, r7
 80085c2:	4620      	mov	r0, r4
 80085c4:	f7ff fe98 	bl	80082f8 <rshift>
 80085c8:	443d      	add	r5, r7
 80085ca:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80085ce:	42ab      	cmp	r3, r5
 80085d0:	da4c      	bge.n	800866c <__gethex+0x2a4>
 80085d2:	ee18 0a10 	vmov	r0, s16
 80085d6:	4621      	mov	r1, r4
 80085d8:	f000 fa6a 	bl	8008ab0 <_Bfree>
 80085dc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80085de:	2300      	movs	r3, #0
 80085e0:	6013      	str	r3, [r2, #0]
 80085e2:	27a3      	movs	r7, #163	; 0xa3
 80085e4:	e785      	b.n	80084f2 <__gethex+0x12a>
 80085e6:	1e73      	subs	r3, r6, #1
 80085e8:	9a05      	ldr	r2, [sp, #20]
 80085ea:	9303      	str	r3, [sp, #12]
 80085ec:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80085f0:	4293      	cmp	r3, r2
 80085f2:	d019      	beq.n	8008628 <__gethex+0x260>
 80085f4:	f1bb 0f20 	cmp.w	fp, #32
 80085f8:	d107      	bne.n	800860a <__gethex+0x242>
 80085fa:	9b02      	ldr	r3, [sp, #8]
 80085fc:	9a00      	ldr	r2, [sp, #0]
 80085fe:	f843 2b04 	str.w	r2, [r3], #4
 8008602:	9302      	str	r3, [sp, #8]
 8008604:	2300      	movs	r3, #0
 8008606:	9300      	str	r3, [sp, #0]
 8008608:	469b      	mov	fp, r3
 800860a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800860e:	f7ff fec5 	bl	800839c <__hexdig_fun>
 8008612:	9b00      	ldr	r3, [sp, #0]
 8008614:	f000 000f 	and.w	r0, r0, #15
 8008618:	fa00 f00b 	lsl.w	r0, r0, fp
 800861c:	4303      	orrs	r3, r0
 800861e:	9300      	str	r3, [sp, #0]
 8008620:	f10b 0b04 	add.w	fp, fp, #4
 8008624:	9b03      	ldr	r3, [sp, #12]
 8008626:	e00d      	b.n	8008644 <__gethex+0x27c>
 8008628:	9b03      	ldr	r3, [sp, #12]
 800862a:	9a06      	ldr	r2, [sp, #24]
 800862c:	4413      	add	r3, r2
 800862e:	42bb      	cmp	r3, r7
 8008630:	d3e0      	bcc.n	80085f4 <__gethex+0x22c>
 8008632:	4618      	mov	r0, r3
 8008634:	9901      	ldr	r1, [sp, #4]
 8008636:	9307      	str	r3, [sp, #28]
 8008638:	4652      	mov	r2, sl
 800863a:	f001 f8e1 	bl	8009800 <strncmp>
 800863e:	9b07      	ldr	r3, [sp, #28]
 8008640:	2800      	cmp	r0, #0
 8008642:	d1d7      	bne.n	80085f4 <__gethex+0x22c>
 8008644:	461e      	mov	r6, r3
 8008646:	e78b      	b.n	8008560 <__gethex+0x198>
 8008648:	f04f 0a03 	mov.w	sl, #3
 800864c:	e7b8      	b.n	80085c0 <__gethex+0x1f8>
 800864e:	da0a      	bge.n	8008666 <__gethex+0x29e>
 8008650:	1a37      	subs	r7, r6, r0
 8008652:	4621      	mov	r1, r4
 8008654:	ee18 0a10 	vmov	r0, s16
 8008658:	463a      	mov	r2, r7
 800865a:	f000 fc45 	bl	8008ee8 <__lshift>
 800865e:	1bed      	subs	r5, r5, r7
 8008660:	4604      	mov	r4, r0
 8008662:	f100 0914 	add.w	r9, r0, #20
 8008666:	f04f 0a00 	mov.w	sl, #0
 800866a:	e7ae      	b.n	80085ca <__gethex+0x202>
 800866c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8008670:	42a8      	cmp	r0, r5
 8008672:	dd72      	ble.n	800875a <__gethex+0x392>
 8008674:	1b45      	subs	r5, r0, r5
 8008676:	42ae      	cmp	r6, r5
 8008678:	dc36      	bgt.n	80086e8 <__gethex+0x320>
 800867a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800867e:	2b02      	cmp	r3, #2
 8008680:	d02a      	beq.n	80086d8 <__gethex+0x310>
 8008682:	2b03      	cmp	r3, #3
 8008684:	d02c      	beq.n	80086e0 <__gethex+0x318>
 8008686:	2b01      	cmp	r3, #1
 8008688:	d115      	bne.n	80086b6 <__gethex+0x2ee>
 800868a:	42ae      	cmp	r6, r5
 800868c:	d113      	bne.n	80086b6 <__gethex+0x2ee>
 800868e:	2e01      	cmp	r6, #1
 8008690:	d10b      	bne.n	80086aa <__gethex+0x2e2>
 8008692:	9a04      	ldr	r2, [sp, #16]
 8008694:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008698:	6013      	str	r3, [r2, #0]
 800869a:	2301      	movs	r3, #1
 800869c:	6123      	str	r3, [r4, #16]
 800869e:	f8c9 3000 	str.w	r3, [r9]
 80086a2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80086a4:	2762      	movs	r7, #98	; 0x62
 80086a6:	601c      	str	r4, [r3, #0]
 80086a8:	e723      	b.n	80084f2 <__gethex+0x12a>
 80086aa:	1e71      	subs	r1, r6, #1
 80086ac:	4620      	mov	r0, r4
 80086ae:	f000 fe59 	bl	8009364 <__any_on>
 80086b2:	2800      	cmp	r0, #0
 80086b4:	d1ed      	bne.n	8008692 <__gethex+0x2ca>
 80086b6:	ee18 0a10 	vmov	r0, s16
 80086ba:	4621      	mov	r1, r4
 80086bc:	f000 f9f8 	bl	8008ab0 <_Bfree>
 80086c0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80086c2:	2300      	movs	r3, #0
 80086c4:	6013      	str	r3, [r2, #0]
 80086c6:	2750      	movs	r7, #80	; 0x50
 80086c8:	e713      	b.n	80084f2 <__gethex+0x12a>
 80086ca:	bf00      	nop
 80086cc:	0800bca0 	.word	0x0800bca0
 80086d0:	0800bc24 	.word	0x0800bc24
 80086d4:	0800bc35 	.word	0x0800bc35
 80086d8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d1eb      	bne.n	80086b6 <__gethex+0x2ee>
 80086de:	e7d8      	b.n	8008692 <__gethex+0x2ca>
 80086e0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d1d5      	bne.n	8008692 <__gethex+0x2ca>
 80086e6:	e7e6      	b.n	80086b6 <__gethex+0x2ee>
 80086e8:	1e6f      	subs	r7, r5, #1
 80086ea:	f1ba 0f00 	cmp.w	sl, #0
 80086ee:	d131      	bne.n	8008754 <__gethex+0x38c>
 80086f0:	b127      	cbz	r7, 80086fc <__gethex+0x334>
 80086f2:	4639      	mov	r1, r7
 80086f4:	4620      	mov	r0, r4
 80086f6:	f000 fe35 	bl	8009364 <__any_on>
 80086fa:	4682      	mov	sl, r0
 80086fc:	117b      	asrs	r3, r7, #5
 80086fe:	2101      	movs	r1, #1
 8008700:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8008704:	f007 071f 	and.w	r7, r7, #31
 8008708:	fa01 f707 	lsl.w	r7, r1, r7
 800870c:	421f      	tst	r7, r3
 800870e:	4629      	mov	r1, r5
 8008710:	4620      	mov	r0, r4
 8008712:	bf18      	it	ne
 8008714:	f04a 0a02 	orrne.w	sl, sl, #2
 8008718:	1b76      	subs	r6, r6, r5
 800871a:	f7ff fded 	bl	80082f8 <rshift>
 800871e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8008722:	2702      	movs	r7, #2
 8008724:	f1ba 0f00 	cmp.w	sl, #0
 8008728:	d048      	beq.n	80087bc <__gethex+0x3f4>
 800872a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800872e:	2b02      	cmp	r3, #2
 8008730:	d015      	beq.n	800875e <__gethex+0x396>
 8008732:	2b03      	cmp	r3, #3
 8008734:	d017      	beq.n	8008766 <__gethex+0x39e>
 8008736:	2b01      	cmp	r3, #1
 8008738:	d109      	bne.n	800874e <__gethex+0x386>
 800873a:	f01a 0f02 	tst.w	sl, #2
 800873e:	d006      	beq.n	800874e <__gethex+0x386>
 8008740:	f8d9 0000 	ldr.w	r0, [r9]
 8008744:	ea4a 0a00 	orr.w	sl, sl, r0
 8008748:	f01a 0f01 	tst.w	sl, #1
 800874c:	d10e      	bne.n	800876c <__gethex+0x3a4>
 800874e:	f047 0710 	orr.w	r7, r7, #16
 8008752:	e033      	b.n	80087bc <__gethex+0x3f4>
 8008754:	f04f 0a01 	mov.w	sl, #1
 8008758:	e7d0      	b.n	80086fc <__gethex+0x334>
 800875a:	2701      	movs	r7, #1
 800875c:	e7e2      	b.n	8008724 <__gethex+0x35c>
 800875e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008760:	f1c3 0301 	rsb	r3, r3, #1
 8008764:	9315      	str	r3, [sp, #84]	; 0x54
 8008766:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008768:	2b00      	cmp	r3, #0
 800876a:	d0f0      	beq.n	800874e <__gethex+0x386>
 800876c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8008770:	f104 0314 	add.w	r3, r4, #20
 8008774:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8008778:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800877c:	f04f 0c00 	mov.w	ip, #0
 8008780:	4618      	mov	r0, r3
 8008782:	f853 2b04 	ldr.w	r2, [r3], #4
 8008786:	f1b2 3fff 	cmp.w	r2, #4294967295
 800878a:	d01c      	beq.n	80087c6 <__gethex+0x3fe>
 800878c:	3201      	adds	r2, #1
 800878e:	6002      	str	r2, [r0, #0]
 8008790:	2f02      	cmp	r7, #2
 8008792:	f104 0314 	add.w	r3, r4, #20
 8008796:	d13f      	bne.n	8008818 <__gethex+0x450>
 8008798:	f8d8 2000 	ldr.w	r2, [r8]
 800879c:	3a01      	subs	r2, #1
 800879e:	42b2      	cmp	r2, r6
 80087a0:	d10a      	bne.n	80087b8 <__gethex+0x3f0>
 80087a2:	1171      	asrs	r1, r6, #5
 80087a4:	2201      	movs	r2, #1
 80087a6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80087aa:	f006 061f 	and.w	r6, r6, #31
 80087ae:	fa02 f606 	lsl.w	r6, r2, r6
 80087b2:	421e      	tst	r6, r3
 80087b4:	bf18      	it	ne
 80087b6:	4617      	movne	r7, r2
 80087b8:	f047 0720 	orr.w	r7, r7, #32
 80087bc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80087be:	601c      	str	r4, [r3, #0]
 80087c0:	9b04      	ldr	r3, [sp, #16]
 80087c2:	601d      	str	r5, [r3, #0]
 80087c4:	e695      	b.n	80084f2 <__gethex+0x12a>
 80087c6:	4299      	cmp	r1, r3
 80087c8:	f843 cc04 	str.w	ip, [r3, #-4]
 80087cc:	d8d8      	bhi.n	8008780 <__gethex+0x3b8>
 80087ce:	68a3      	ldr	r3, [r4, #8]
 80087d0:	459b      	cmp	fp, r3
 80087d2:	db19      	blt.n	8008808 <__gethex+0x440>
 80087d4:	6861      	ldr	r1, [r4, #4]
 80087d6:	ee18 0a10 	vmov	r0, s16
 80087da:	3101      	adds	r1, #1
 80087dc:	f000 f928 	bl	8008a30 <_Balloc>
 80087e0:	4681      	mov	r9, r0
 80087e2:	b918      	cbnz	r0, 80087ec <__gethex+0x424>
 80087e4:	4b1a      	ldr	r3, [pc, #104]	; (8008850 <__gethex+0x488>)
 80087e6:	4602      	mov	r2, r0
 80087e8:	2184      	movs	r1, #132	; 0x84
 80087ea:	e6a8      	b.n	800853e <__gethex+0x176>
 80087ec:	6922      	ldr	r2, [r4, #16]
 80087ee:	3202      	adds	r2, #2
 80087f0:	f104 010c 	add.w	r1, r4, #12
 80087f4:	0092      	lsls	r2, r2, #2
 80087f6:	300c      	adds	r0, #12
 80087f8:	f000 f90c 	bl	8008a14 <memcpy>
 80087fc:	4621      	mov	r1, r4
 80087fe:	ee18 0a10 	vmov	r0, s16
 8008802:	f000 f955 	bl	8008ab0 <_Bfree>
 8008806:	464c      	mov	r4, r9
 8008808:	6923      	ldr	r3, [r4, #16]
 800880a:	1c5a      	adds	r2, r3, #1
 800880c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008810:	6122      	str	r2, [r4, #16]
 8008812:	2201      	movs	r2, #1
 8008814:	615a      	str	r2, [r3, #20]
 8008816:	e7bb      	b.n	8008790 <__gethex+0x3c8>
 8008818:	6922      	ldr	r2, [r4, #16]
 800881a:	455a      	cmp	r2, fp
 800881c:	dd0b      	ble.n	8008836 <__gethex+0x46e>
 800881e:	2101      	movs	r1, #1
 8008820:	4620      	mov	r0, r4
 8008822:	f7ff fd69 	bl	80082f8 <rshift>
 8008826:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800882a:	3501      	adds	r5, #1
 800882c:	42ab      	cmp	r3, r5
 800882e:	f6ff aed0 	blt.w	80085d2 <__gethex+0x20a>
 8008832:	2701      	movs	r7, #1
 8008834:	e7c0      	b.n	80087b8 <__gethex+0x3f0>
 8008836:	f016 061f 	ands.w	r6, r6, #31
 800883a:	d0fa      	beq.n	8008832 <__gethex+0x46a>
 800883c:	449a      	add	sl, r3
 800883e:	f1c6 0620 	rsb	r6, r6, #32
 8008842:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8008846:	f000 f9e9 	bl	8008c1c <__hi0bits>
 800884a:	42b0      	cmp	r0, r6
 800884c:	dbe7      	blt.n	800881e <__gethex+0x456>
 800884e:	e7f0      	b.n	8008832 <__gethex+0x46a>
 8008850:	0800bc24 	.word	0x0800bc24

08008854 <L_shift>:
 8008854:	f1c2 0208 	rsb	r2, r2, #8
 8008858:	0092      	lsls	r2, r2, #2
 800885a:	b570      	push	{r4, r5, r6, lr}
 800885c:	f1c2 0620 	rsb	r6, r2, #32
 8008860:	6843      	ldr	r3, [r0, #4]
 8008862:	6804      	ldr	r4, [r0, #0]
 8008864:	fa03 f506 	lsl.w	r5, r3, r6
 8008868:	432c      	orrs	r4, r5
 800886a:	40d3      	lsrs	r3, r2
 800886c:	6004      	str	r4, [r0, #0]
 800886e:	f840 3f04 	str.w	r3, [r0, #4]!
 8008872:	4288      	cmp	r0, r1
 8008874:	d3f4      	bcc.n	8008860 <L_shift+0xc>
 8008876:	bd70      	pop	{r4, r5, r6, pc}

08008878 <__match>:
 8008878:	b530      	push	{r4, r5, lr}
 800887a:	6803      	ldr	r3, [r0, #0]
 800887c:	3301      	adds	r3, #1
 800887e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008882:	b914      	cbnz	r4, 800888a <__match+0x12>
 8008884:	6003      	str	r3, [r0, #0]
 8008886:	2001      	movs	r0, #1
 8008888:	bd30      	pop	{r4, r5, pc}
 800888a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800888e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8008892:	2d19      	cmp	r5, #25
 8008894:	bf98      	it	ls
 8008896:	3220      	addls	r2, #32
 8008898:	42a2      	cmp	r2, r4
 800889a:	d0f0      	beq.n	800887e <__match+0x6>
 800889c:	2000      	movs	r0, #0
 800889e:	e7f3      	b.n	8008888 <__match+0x10>

080088a0 <__hexnan>:
 80088a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088a4:	680b      	ldr	r3, [r1, #0]
 80088a6:	6801      	ldr	r1, [r0, #0]
 80088a8:	115e      	asrs	r6, r3, #5
 80088aa:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80088ae:	f013 031f 	ands.w	r3, r3, #31
 80088b2:	b087      	sub	sp, #28
 80088b4:	bf18      	it	ne
 80088b6:	3604      	addne	r6, #4
 80088b8:	2500      	movs	r5, #0
 80088ba:	1f37      	subs	r7, r6, #4
 80088bc:	4682      	mov	sl, r0
 80088be:	4690      	mov	r8, r2
 80088c0:	9301      	str	r3, [sp, #4]
 80088c2:	f846 5c04 	str.w	r5, [r6, #-4]
 80088c6:	46b9      	mov	r9, r7
 80088c8:	463c      	mov	r4, r7
 80088ca:	9502      	str	r5, [sp, #8]
 80088cc:	46ab      	mov	fp, r5
 80088ce:	784a      	ldrb	r2, [r1, #1]
 80088d0:	1c4b      	adds	r3, r1, #1
 80088d2:	9303      	str	r3, [sp, #12]
 80088d4:	b342      	cbz	r2, 8008928 <__hexnan+0x88>
 80088d6:	4610      	mov	r0, r2
 80088d8:	9105      	str	r1, [sp, #20]
 80088da:	9204      	str	r2, [sp, #16]
 80088dc:	f7ff fd5e 	bl	800839c <__hexdig_fun>
 80088e0:	2800      	cmp	r0, #0
 80088e2:	d14f      	bne.n	8008984 <__hexnan+0xe4>
 80088e4:	9a04      	ldr	r2, [sp, #16]
 80088e6:	9905      	ldr	r1, [sp, #20]
 80088e8:	2a20      	cmp	r2, #32
 80088ea:	d818      	bhi.n	800891e <__hexnan+0x7e>
 80088ec:	9b02      	ldr	r3, [sp, #8]
 80088ee:	459b      	cmp	fp, r3
 80088f0:	dd13      	ble.n	800891a <__hexnan+0x7a>
 80088f2:	454c      	cmp	r4, r9
 80088f4:	d206      	bcs.n	8008904 <__hexnan+0x64>
 80088f6:	2d07      	cmp	r5, #7
 80088f8:	dc04      	bgt.n	8008904 <__hexnan+0x64>
 80088fa:	462a      	mov	r2, r5
 80088fc:	4649      	mov	r1, r9
 80088fe:	4620      	mov	r0, r4
 8008900:	f7ff ffa8 	bl	8008854 <L_shift>
 8008904:	4544      	cmp	r4, r8
 8008906:	d950      	bls.n	80089aa <__hexnan+0x10a>
 8008908:	2300      	movs	r3, #0
 800890a:	f1a4 0904 	sub.w	r9, r4, #4
 800890e:	f844 3c04 	str.w	r3, [r4, #-4]
 8008912:	f8cd b008 	str.w	fp, [sp, #8]
 8008916:	464c      	mov	r4, r9
 8008918:	461d      	mov	r5, r3
 800891a:	9903      	ldr	r1, [sp, #12]
 800891c:	e7d7      	b.n	80088ce <__hexnan+0x2e>
 800891e:	2a29      	cmp	r2, #41	; 0x29
 8008920:	d156      	bne.n	80089d0 <__hexnan+0x130>
 8008922:	3102      	adds	r1, #2
 8008924:	f8ca 1000 	str.w	r1, [sl]
 8008928:	f1bb 0f00 	cmp.w	fp, #0
 800892c:	d050      	beq.n	80089d0 <__hexnan+0x130>
 800892e:	454c      	cmp	r4, r9
 8008930:	d206      	bcs.n	8008940 <__hexnan+0xa0>
 8008932:	2d07      	cmp	r5, #7
 8008934:	dc04      	bgt.n	8008940 <__hexnan+0xa0>
 8008936:	462a      	mov	r2, r5
 8008938:	4649      	mov	r1, r9
 800893a:	4620      	mov	r0, r4
 800893c:	f7ff ff8a 	bl	8008854 <L_shift>
 8008940:	4544      	cmp	r4, r8
 8008942:	d934      	bls.n	80089ae <__hexnan+0x10e>
 8008944:	f1a8 0204 	sub.w	r2, r8, #4
 8008948:	4623      	mov	r3, r4
 800894a:	f853 1b04 	ldr.w	r1, [r3], #4
 800894e:	f842 1f04 	str.w	r1, [r2, #4]!
 8008952:	429f      	cmp	r7, r3
 8008954:	d2f9      	bcs.n	800894a <__hexnan+0xaa>
 8008956:	1b3b      	subs	r3, r7, r4
 8008958:	f023 0303 	bic.w	r3, r3, #3
 800895c:	3304      	adds	r3, #4
 800895e:	3401      	adds	r4, #1
 8008960:	3e03      	subs	r6, #3
 8008962:	42b4      	cmp	r4, r6
 8008964:	bf88      	it	hi
 8008966:	2304      	movhi	r3, #4
 8008968:	4443      	add	r3, r8
 800896a:	2200      	movs	r2, #0
 800896c:	f843 2b04 	str.w	r2, [r3], #4
 8008970:	429f      	cmp	r7, r3
 8008972:	d2fb      	bcs.n	800896c <__hexnan+0xcc>
 8008974:	683b      	ldr	r3, [r7, #0]
 8008976:	b91b      	cbnz	r3, 8008980 <__hexnan+0xe0>
 8008978:	4547      	cmp	r7, r8
 800897a:	d127      	bne.n	80089cc <__hexnan+0x12c>
 800897c:	2301      	movs	r3, #1
 800897e:	603b      	str	r3, [r7, #0]
 8008980:	2005      	movs	r0, #5
 8008982:	e026      	b.n	80089d2 <__hexnan+0x132>
 8008984:	3501      	adds	r5, #1
 8008986:	2d08      	cmp	r5, #8
 8008988:	f10b 0b01 	add.w	fp, fp, #1
 800898c:	dd06      	ble.n	800899c <__hexnan+0xfc>
 800898e:	4544      	cmp	r4, r8
 8008990:	d9c3      	bls.n	800891a <__hexnan+0x7a>
 8008992:	2300      	movs	r3, #0
 8008994:	f844 3c04 	str.w	r3, [r4, #-4]
 8008998:	2501      	movs	r5, #1
 800899a:	3c04      	subs	r4, #4
 800899c:	6822      	ldr	r2, [r4, #0]
 800899e:	f000 000f 	and.w	r0, r0, #15
 80089a2:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 80089a6:	6022      	str	r2, [r4, #0]
 80089a8:	e7b7      	b.n	800891a <__hexnan+0x7a>
 80089aa:	2508      	movs	r5, #8
 80089ac:	e7b5      	b.n	800891a <__hexnan+0x7a>
 80089ae:	9b01      	ldr	r3, [sp, #4]
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d0df      	beq.n	8008974 <__hexnan+0xd4>
 80089b4:	f04f 32ff 	mov.w	r2, #4294967295
 80089b8:	f1c3 0320 	rsb	r3, r3, #32
 80089bc:	fa22 f303 	lsr.w	r3, r2, r3
 80089c0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80089c4:	401a      	ands	r2, r3
 80089c6:	f846 2c04 	str.w	r2, [r6, #-4]
 80089ca:	e7d3      	b.n	8008974 <__hexnan+0xd4>
 80089cc:	3f04      	subs	r7, #4
 80089ce:	e7d1      	b.n	8008974 <__hexnan+0xd4>
 80089d0:	2004      	movs	r0, #4
 80089d2:	b007      	add	sp, #28
 80089d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080089d8 <_localeconv_r>:
 80089d8:	4800      	ldr	r0, [pc, #0]	; (80089dc <_localeconv_r+0x4>)
 80089da:	4770      	bx	lr
 80089dc:	20000174 	.word	0x20000174

080089e0 <malloc>:
 80089e0:	4b02      	ldr	r3, [pc, #8]	; (80089ec <malloc+0xc>)
 80089e2:	4601      	mov	r1, r0
 80089e4:	6818      	ldr	r0, [r3, #0]
 80089e6:	f000 bd3d 	b.w	8009464 <_malloc_r>
 80089ea:	bf00      	nop
 80089ec:	2000001c 	.word	0x2000001c

080089f0 <__ascii_mbtowc>:
 80089f0:	b082      	sub	sp, #8
 80089f2:	b901      	cbnz	r1, 80089f6 <__ascii_mbtowc+0x6>
 80089f4:	a901      	add	r1, sp, #4
 80089f6:	b142      	cbz	r2, 8008a0a <__ascii_mbtowc+0x1a>
 80089f8:	b14b      	cbz	r3, 8008a0e <__ascii_mbtowc+0x1e>
 80089fa:	7813      	ldrb	r3, [r2, #0]
 80089fc:	600b      	str	r3, [r1, #0]
 80089fe:	7812      	ldrb	r2, [r2, #0]
 8008a00:	1e10      	subs	r0, r2, #0
 8008a02:	bf18      	it	ne
 8008a04:	2001      	movne	r0, #1
 8008a06:	b002      	add	sp, #8
 8008a08:	4770      	bx	lr
 8008a0a:	4610      	mov	r0, r2
 8008a0c:	e7fb      	b.n	8008a06 <__ascii_mbtowc+0x16>
 8008a0e:	f06f 0001 	mvn.w	r0, #1
 8008a12:	e7f8      	b.n	8008a06 <__ascii_mbtowc+0x16>

08008a14 <memcpy>:
 8008a14:	440a      	add	r2, r1
 8008a16:	4291      	cmp	r1, r2
 8008a18:	f100 33ff 	add.w	r3, r0, #4294967295
 8008a1c:	d100      	bne.n	8008a20 <memcpy+0xc>
 8008a1e:	4770      	bx	lr
 8008a20:	b510      	push	{r4, lr}
 8008a22:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008a26:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008a2a:	4291      	cmp	r1, r2
 8008a2c:	d1f9      	bne.n	8008a22 <memcpy+0xe>
 8008a2e:	bd10      	pop	{r4, pc}

08008a30 <_Balloc>:
 8008a30:	b570      	push	{r4, r5, r6, lr}
 8008a32:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008a34:	4604      	mov	r4, r0
 8008a36:	460d      	mov	r5, r1
 8008a38:	b976      	cbnz	r6, 8008a58 <_Balloc+0x28>
 8008a3a:	2010      	movs	r0, #16
 8008a3c:	f7ff ffd0 	bl	80089e0 <malloc>
 8008a40:	4602      	mov	r2, r0
 8008a42:	6260      	str	r0, [r4, #36]	; 0x24
 8008a44:	b920      	cbnz	r0, 8008a50 <_Balloc+0x20>
 8008a46:	4b18      	ldr	r3, [pc, #96]	; (8008aa8 <_Balloc+0x78>)
 8008a48:	4818      	ldr	r0, [pc, #96]	; (8008aac <_Balloc+0x7c>)
 8008a4a:	2166      	movs	r1, #102	; 0x66
 8008a4c:	f000 fef8 	bl	8009840 <__assert_func>
 8008a50:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008a54:	6006      	str	r6, [r0, #0]
 8008a56:	60c6      	str	r6, [r0, #12]
 8008a58:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008a5a:	68f3      	ldr	r3, [r6, #12]
 8008a5c:	b183      	cbz	r3, 8008a80 <_Balloc+0x50>
 8008a5e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008a60:	68db      	ldr	r3, [r3, #12]
 8008a62:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008a66:	b9b8      	cbnz	r0, 8008a98 <_Balloc+0x68>
 8008a68:	2101      	movs	r1, #1
 8008a6a:	fa01 f605 	lsl.w	r6, r1, r5
 8008a6e:	1d72      	adds	r2, r6, #5
 8008a70:	0092      	lsls	r2, r2, #2
 8008a72:	4620      	mov	r0, r4
 8008a74:	f000 fc97 	bl	80093a6 <_calloc_r>
 8008a78:	b160      	cbz	r0, 8008a94 <_Balloc+0x64>
 8008a7a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008a7e:	e00e      	b.n	8008a9e <_Balloc+0x6e>
 8008a80:	2221      	movs	r2, #33	; 0x21
 8008a82:	2104      	movs	r1, #4
 8008a84:	4620      	mov	r0, r4
 8008a86:	f000 fc8e 	bl	80093a6 <_calloc_r>
 8008a8a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008a8c:	60f0      	str	r0, [r6, #12]
 8008a8e:	68db      	ldr	r3, [r3, #12]
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d1e4      	bne.n	8008a5e <_Balloc+0x2e>
 8008a94:	2000      	movs	r0, #0
 8008a96:	bd70      	pop	{r4, r5, r6, pc}
 8008a98:	6802      	ldr	r2, [r0, #0]
 8008a9a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008a9e:	2300      	movs	r3, #0
 8008aa0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008aa4:	e7f7      	b.n	8008a96 <_Balloc+0x66>
 8008aa6:	bf00      	nop
 8008aa8:	0800bbae 	.word	0x0800bbae
 8008aac:	0800bcb4 	.word	0x0800bcb4

08008ab0 <_Bfree>:
 8008ab0:	b570      	push	{r4, r5, r6, lr}
 8008ab2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008ab4:	4605      	mov	r5, r0
 8008ab6:	460c      	mov	r4, r1
 8008ab8:	b976      	cbnz	r6, 8008ad8 <_Bfree+0x28>
 8008aba:	2010      	movs	r0, #16
 8008abc:	f7ff ff90 	bl	80089e0 <malloc>
 8008ac0:	4602      	mov	r2, r0
 8008ac2:	6268      	str	r0, [r5, #36]	; 0x24
 8008ac4:	b920      	cbnz	r0, 8008ad0 <_Bfree+0x20>
 8008ac6:	4b09      	ldr	r3, [pc, #36]	; (8008aec <_Bfree+0x3c>)
 8008ac8:	4809      	ldr	r0, [pc, #36]	; (8008af0 <_Bfree+0x40>)
 8008aca:	218a      	movs	r1, #138	; 0x8a
 8008acc:	f000 feb8 	bl	8009840 <__assert_func>
 8008ad0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008ad4:	6006      	str	r6, [r0, #0]
 8008ad6:	60c6      	str	r6, [r0, #12]
 8008ad8:	b13c      	cbz	r4, 8008aea <_Bfree+0x3a>
 8008ada:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008adc:	6862      	ldr	r2, [r4, #4]
 8008ade:	68db      	ldr	r3, [r3, #12]
 8008ae0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008ae4:	6021      	str	r1, [r4, #0]
 8008ae6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008aea:	bd70      	pop	{r4, r5, r6, pc}
 8008aec:	0800bbae 	.word	0x0800bbae
 8008af0:	0800bcb4 	.word	0x0800bcb4

08008af4 <__multadd>:
 8008af4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008af8:	690e      	ldr	r6, [r1, #16]
 8008afa:	4607      	mov	r7, r0
 8008afc:	4698      	mov	r8, r3
 8008afe:	460c      	mov	r4, r1
 8008b00:	f101 0014 	add.w	r0, r1, #20
 8008b04:	2300      	movs	r3, #0
 8008b06:	6805      	ldr	r5, [r0, #0]
 8008b08:	b2a9      	uxth	r1, r5
 8008b0a:	fb02 8101 	mla	r1, r2, r1, r8
 8008b0e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8008b12:	0c2d      	lsrs	r5, r5, #16
 8008b14:	fb02 c505 	mla	r5, r2, r5, ip
 8008b18:	b289      	uxth	r1, r1
 8008b1a:	3301      	adds	r3, #1
 8008b1c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8008b20:	429e      	cmp	r6, r3
 8008b22:	f840 1b04 	str.w	r1, [r0], #4
 8008b26:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8008b2a:	dcec      	bgt.n	8008b06 <__multadd+0x12>
 8008b2c:	f1b8 0f00 	cmp.w	r8, #0
 8008b30:	d022      	beq.n	8008b78 <__multadd+0x84>
 8008b32:	68a3      	ldr	r3, [r4, #8]
 8008b34:	42b3      	cmp	r3, r6
 8008b36:	dc19      	bgt.n	8008b6c <__multadd+0x78>
 8008b38:	6861      	ldr	r1, [r4, #4]
 8008b3a:	4638      	mov	r0, r7
 8008b3c:	3101      	adds	r1, #1
 8008b3e:	f7ff ff77 	bl	8008a30 <_Balloc>
 8008b42:	4605      	mov	r5, r0
 8008b44:	b928      	cbnz	r0, 8008b52 <__multadd+0x5e>
 8008b46:	4602      	mov	r2, r0
 8008b48:	4b0d      	ldr	r3, [pc, #52]	; (8008b80 <__multadd+0x8c>)
 8008b4a:	480e      	ldr	r0, [pc, #56]	; (8008b84 <__multadd+0x90>)
 8008b4c:	21b5      	movs	r1, #181	; 0xb5
 8008b4e:	f000 fe77 	bl	8009840 <__assert_func>
 8008b52:	6922      	ldr	r2, [r4, #16]
 8008b54:	3202      	adds	r2, #2
 8008b56:	f104 010c 	add.w	r1, r4, #12
 8008b5a:	0092      	lsls	r2, r2, #2
 8008b5c:	300c      	adds	r0, #12
 8008b5e:	f7ff ff59 	bl	8008a14 <memcpy>
 8008b62:	4621      	mov	r1, r4
 8008b64:	4638      	mov	r0, r7
 8008b66:	f7ff ffa3 	bl	8008ab0 <_Bfree>
 8008b6a:	462c      	mov	r4, r5
 8008b6c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8008b70:	3601      	adds	r6, #1
 8008b72:	f8c3 8014 	str.w	r8, [r3, #20]
 8008b76:	6126      	str	r6, [r4, #16]
 8008b78:	4620      	mov	r0, r4
 8008b7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b7e:	bf00      	nop
 8008b80:	0800bc24 	.word	0x0800bc24
 8008b84:	0800bcb4 	.word	0x0800bcb4

08008b88 <__s2b>:
 8008b88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008b8c:	460c      	mov	r4, r1
 8008b8e:	4615      	mov	r5, r2
 8008b90:	461f      	mov	r7, r3
 8008b92:	2209      	movs	r2, #9
 8008b94:	3308      	adds	r3, #8
 8008b96:	4606      	mov	r6, r0
 8008b98:	fb93 f3f2 	sdiv	r3, r3, r2
 8008b9c:	2100      	movs	r1, #0
 8008b9e:	2201      	movs	r2, #1
 8008ba0:	429a      	cmp	r2, r3
 8008ba2:	db09      	blt.n	8008bb8 <__s2b+0x30>
 8008ba4:	4630      	mov	r0, r6
 8008ba6:	f7ff ff43 	bl	8008a30 <_Balloc>
 8008baa:	b940      	cbnz	r0, 8008bbe <__s2b+0x36>
 8008bac:	4602      	mov	r2, r0
 8008bae:	4b19      	ldr	r3, [pc, #100]	; (8008c14 <__s2b+0x8c>)
 8008bb0:	4819      	ldr	r0, [pc, #100]	; (8008c18 <__s2b+0x90>)
 8008bb2:	21ce      	movs	r1, #206	; 0xce
 8008bb4:	f000 fe44 	bl	8009840 <__assert_func>
 8008bb8:	0052      	lsls	r2, r2, #1
 8008bba:	3101      	adds	r1, #1
 8008bbc:	e7f0      	b.n	8008ba0 <__s2b+0x18>
 8008bbe:	9b08      	ldr	r3, [sp, #32]
 8008bc0:	6143      	str	r3, [r0, #20]
 8008bc2:	2d09      	cmp	r5, #9
 8008bc4:	f04f 0301 	mov.w	r3, #1
 8008bc8:	6103      	str	r3, [r0, #16]
 8008bca:	dd16      	ble.n	8008bfa <__s2b+0x72>
 8008bcc:	f104 0909 	add.w	r9, r4, #9
 8008bd0:	46c8      	mov	r8, r9
 8008bd2:	442c      	add	r4, r5
 8008bd4:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008bd8:	4601      	mov	r1, r0
 8008bda:	3b30      	subs	r3, #48	; 0x30
 8008bdc:	220a      	movs	r2, #10
 8008bde:	4630      	mov	r0, r6
 8008be0:	f7ff ff88 	bl	8008af4 <__multadd>
 8008be4:	45a0      	cmp	r8, r4
 8008be6:	d1f5      	bne.n	8008bd4 <__s2b+0x4c>
 8008be8:	f1a5 0408 	sub.w	r4, r5, #8
 8008bec:	444c      	add	r4, r9
 8008bee:	1b2d      	subs	r5, r5, r4
 8008bf0:	1963      	adds	r3, r4, r5
 8008bf2:	42bb      	cmp	r3, r7
 8008bf4:	db04      	blt.n	8008c00 <__s2b+0x78>
 8008bf6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008bfa:	340a      	adds	r4, #10
 8008bfc:	2509      	movs	r5, #9
 8008bfe:	e7f6      	b.n	8008bee <__s2b+0x66>
 8008c00:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008c04:	4601      	mov	r1, r0
 8008c06:	3b30      	subs	r3, #48	; 0x30
 8008c08:	220a      	movs	r2, #10
 8008c0a:	4630      	mov	r0, r6
 8008c0c:	f7ff ff72 	bl	8008af4 <__multadd>
 8008c10:	e7ee      	b.n	8008bf0 <__s2b+0x68>
 8008c12:	bf00      	nop
 8008c14:	0800bc24 	.word	0x0800bc24
 8008c18:	0800bcb4 	.word	0x0800bcb4

08008c1c <__hi0bits>:
 8008c1c:	0c03      	lsrs	r3, r0, #16
 8008c1e:	041b      	lsls	r3, r3, #16
 8008c20:	b9d3      	cbnz	r3, 8008c58 <__hi0bits+0x3c>
 8008c22:	0400      	lsls	r0, r0, #16
 8008c24:	2310      	movs	r3, #16
 8008c26:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008c2a:	bf04      	itt	eq
 8008c2c:	0200      	lsleq	r0, r0, #8
 8008c2e:	3308      	addeq	r3, #8
 8008c30:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008c34:	bf04      	itt	eq
 8008c36:	0100      	lsleq	r0, r0, #4
 8008c38:	3304      	addeq	r3, #4
 8008c3a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008c3e:	bf04      	itt	eq
 8008c40:	0080      	lsleq	r0, r0, #2
 8008c42:	3302      	addeq	r3, #2
 8008c44:	2800      	cmp	r0, #0
 8008c46:	db05      	blt.n	8008c54 <__hi0bits+0x38>
 8008c48:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008c4c:	f103 0301 	add.w	r3, r3, #1
 8008c50:	bf08      	it	eq
 8008c52:	2320      	moveq	r3, #32
 8008c54:	4618      	mov	r0, r3
 8008c56:	4770      	bx	lr
 8008c58:	2300      	movs	r3, #0
 8008c5a:	e7e4      	b.n	8008c26 <__hi0bits+0xa>

08008c5c <__lo0bits>:
 8008c5c:	6803      	ldr	r3, [r0, #0]
 8008c5e:	f013 0207 	ands.w	r2, r3, #7
 8008c62:	4601      	mov	r1, r0
 8008c64:	d00b      	beq.n	8008c7e <__lo0bits+0x22>
 8008c66:	07da      	lsls	r2, r3, #31
 8008c68:	d424      	bmi.n	8008cb4 <__lo0bits+0x58>
 8008c6a:	0798      	lsls	r0, r3, #30
 8008c6c:	bf49      	itett	mi
 8008c6e:	085b      	lsrmi	r3, r3, #1
 8008c70:	089b      	lsrpl	r3, r3, #2
 8008c72:	2001      	movmi	r0, #1
 8008c74:	600b      	strmi	r3, [r1, #0]
 8008c76:	bf5c      	itt	pl
 8008c78:	600b      	strpl	r3, [r1, #0]
 8008c7a:	2002      	movpl	r0, #2
 8008c7c:	4770      	bx	lr
 8008c7e:	b298      	uxth	r0, r3
 8008c80:	b9b0      	cbnz	r0, 8008cb0 <__lo0bits+0x54>
 8008c82:	0c1b      	lsrs	r3, r3, #16
 8008c84:	2010      	movs	r0, #16
 8008c86:	f013 0fff 	tst.w	r3, #255	; 0xff
 8008c8a:	bf04      	itt	eq
 8008c8c:	0a1b      	lsreq	r3, r3, #8
 8008c8e:	3008      	addeq	r0, #8
 8008c90:	071a      	lsls	r2, r3, #28
 8008c92:	bf04      	itt	eq
 8008c94:	091b      	lsreq	r3, r3, #4
 8008c96:	3004      	addeq	r0, #4
 8008c98:	079a      	lsls	r2, r3, #30
 8008c9a:	bf04      	itt	eq
 8008c9c:	089b      	lsreq	r3, r3, #2
 8008c9e:	3002      	addeq	r0, #2
 8008ca0:	07da      	lsls	r2, r3, #31
 8008ca2:	d403      	bmi.n	8008cac <__lo0bits+0x50>
 8008ca4:	085b      	lsrs	r3, r3, #1
 8008ca6:	f100 0001 	add.w	r0, r0, #1
 8008caa:	d005      	beq.n	8008cb8 <__lo0bits+0x5c>
 8008cac:	600b      	str	r3, [r1, #0]
 8008cae:	4770      	bx	lr
 8008cb0:	4610      	mov	r0, r2
 8008cb2:	e7e8      	b.n	8008c86 <__lo0bits+0x2a>
 8008cb4:	2000      	movs	r0, #0
 8008cb6:	4770      	bx	lr
 8008cb8:	2020      	movs	r0, #32
 8008cba:	4770      	bx	lr

08008cbc <__i2b>:
 8008cbc:	b510      	push	{r4, lr}
 8008cbe:	460c      	mov	r4, r1
 8008cc0:	2101      	movs	r1, #1
 8008cc2:	f7ff feb5 	bl	8008a30 <_Balloc>
 8008cc6:	4602      	mov	r2, r0
 8008cc8:	b928      	cbnz	r0, 8008cd6 <__i2b+0x1a>
 8008cca:	4b05      	ldr	r3, [pc, #20]	; (8008ce0 <__i2b+0x24>)
 8008ccc:	4805      	ldr	r0, [pc, #20]	; (8008ce4 <__i2b+0x28>)
 8008cce:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008cd2:	f000 fdb5 	bl	8009840 <__assert_func>
 8008cd6:	2301      	movs	r3, #1
 8008cd8:	6144      	str	r4, [r0, #20]
 8008cda:	6103      	str	r3, [r0, #16]
 8008cdc:	bd10      	pop	{r4, pc}
 8008cde:	bf00      	nop
 8008ce0:	0800bc24 	.word	0x0800bc24
 8008ce4:	0800bcb4 	.word	0x0800bcb4

08008ce8 <__multiply>:
 8008ce8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cec:	4614      	mov	r4, r2
 8008cee:	690a      	ldr	r2, [r1, #16]
 8008cf0:	6923      	ldr	r3, [r4, #16]
 8008cf2:	429a      	cmp	r2, r3
 8008cf4:	bfb8      	it	lt
 8008cf6:	460b      	movlt	r3, r1
 8008cf8:	460d      	mov	r5, r1
 8008cfa:	bfbc      	itt	lt
 8008cfc:	4625      	movlt	r5, r4
 8008cfe:	461c      	movlt	r4, r3
 8008d00:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8008d04:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8008d08:	68ab      	ldr	r3, [r5, #8]
 8008d0a:	6869      	ldr	r1, [r5, #4]
 8008d0c:	eb0a 0709 	add.w	r7, sl, r9
 8008d10:	42bb      	cmp	r3, r7
 8008d12:	b085      	sub	sp, #20
 8008d14:	bfb8      	it	lt
 8008d16:	3101      	addlt	r1, #1
 8008d18:	f7ff fe8a 	bl	8008a30 <_Balloc>
 8008d1c:	b930      	cbnz	r0, 8008d2c <__multiply+0x44>
 8008d1e:	4602      	mov	r2, r0
 8008d20:	4b42      	ldr	r3, [pc, #264]	; (8008e2c <__multiply+0x144>)
 8008d22:	4843      	ldr	r0, [pc, #268]	; (8008e30 <__multiply+0x148>)
 8008d24:	f240 115d 	movw	r1, #349	; 0x15d
 8008d28:	f000 fd8a 	bl	8009840 <__assert_func>
 8008d2c:	f100 0614 	add.w	r6, r0, #20
 8008d30:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8008d34:	4633      	mov	r3, r6
 8008d36:	2200      	movs	r2, #0
 8008d38:	4543      	cmp	r3, r8
 8008d3a:	d31e      	bcc.n	8008d7a <__multiply+0x92>
 8008d3c:	f105 0c14 	add.w	ip, r5, #20
 8008d40:	f104 0314 	add.w	r3, r4, #20
 8008d44:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8008d48:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8008d4c:	9202      	str	r2, [sp, #8]
 8008d4e:	ebac 0205 	sub.w	r2, ip, r5
 8008d52:	3a15      	subs	r2, #21
 8008d54:	f022 0203 	bic.w	r2, r2, #3
 8008d58:	3204      	adds	r2, #4
 8008d5a:	f105 0115 	add.w	r1, r5, #21
 8008d5e:	458c      	cmp	ip, r1
 8008d60:	bf38      	it	cc
 8008d62:	2204      	movcc	r2, #4
 8008d64:	9201      	str	r2, [sp, #4]
 8008d66:	9a02      	ldr	r2, [sp, #8]
 8008d68:	9303      	str	r3, [sp, #12]
 8008d6a:	429a      	cmp	r2, r3
 8008d6c:	d808      	bhi.n	8008d80 <__multiply+0x98>
 8008d6e:	2f00      	cmp	r7, #0
 8008d70:	dc55      	bgt.n	8008e1e <__multiply+0x136>
 8008d72:	6107      	str	r7, [r0, #16]
 8008d74:	b005      	add	sp, #20
 8008d76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d7a:	f843 2b04 	str.w	r2, [r3], #4
 8008d7e:	e7db      	b.n	8008d38 <__multiply+0x50>
 8008d80:	f8b3 a000 	ldrh.w	sl, [r3]
 8008d84:	f1ba 0f00 	cmp.w	sl, #0
 8008d88:	d020      	beq.n	8008dcc <__multiply+0xe4>
 8008d8a:	f105 0e14 	add.w	lr, r5, #20
 8008d8e:	46b1      	mov	r9, r6
 8008d90:	2200      	movs	r2, #0
 8008d92:	f85e 4b04 	ldr.w	r4, [lr], #4
 8008d96:	f8d9 b000 	ldr.w	fp, [r9]
 8008d9a:	b2a1      	uxth	r1, r4
 8008d9c:	fa1f fb8b 	uxth.w	fp, fp
 8008da0:	fb0a b101 	mla	r1, sl, r1, fp
 8008da4:	4411      	add	r1, r2
 8008da6:	f8d9 2000 	ldr.w	r2, [r9]
 8008daa:	0c24      	lsrs	r4, r4, #16
 8008dac:	0c12      	lsrs	r2, r2, #16
 8008dae:	fb0a 2404 	mla	r4, sl, r4, r2
 8008db2:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8008db6:	b289      	uxth	r1, r1
 8008db8:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8008dbc:	45f4      	cmp	ip, lr
 8008dbe:	f849 1b04 	str.w	r1, [r9], #4
 8008dc2:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8008dc6:	d8e4      	bhi.n	8008d92 <__multiply+0xaa>
 8008dc8:	9901      	ldr	r1, [sp, #4]
 8008dca:	5072      	str	r2, [r6, r1]
 8008dcc:	9a03      	ldr	r2, [sp, #12]
 8008dce:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008dd2:	3304      	adds	r3, #4
 8008dd4:	f1b9 0f00 	cmp.w	r9, #0
 8008dd8:	d01f      	beq.n	8008e1a <__multiply+0x132>
 8008dda:	6834      	ldr	r4, [r6, #0]
 8008ddc:	f105 0114 	add.w	r1, r5, #20
 8008de0:	46b6      	mov	lr, r6
 8008de2:	f04f 0a00 	mov.w	sl, #0
 8008de6:	880a      	ldrh	r2, [r1, #0]
 8008de8:	f8be b002 	ldrh.w	fp, [lr, #2]
 8008dec:	fb09 b202 	mla	r2, r9, r2, fp
 8008df0:	4492      	add	sl, r2
 8008df2:	b2a4      	uxth	r4, r4
 8008df4:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8008df8:	f84e 4b04 	str.w	r4, [lr], #4
 8008dfc:	f851 4b04 	ldr.w	r4, [r1], #4
 8008e00:	f8be 2000 	ldrh.w	r2, [lr]
 8008e04:	0c24      	lsrs	r4, r4, #16
 8008e06:	fb09 2404 	mla	r4, r9, r4, r2
 8008e0a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8008e0e:	458c      	cmp	ip, r1
 8008e10:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8008e14:	d8e7      	bhi.n	8008de6 <__multiply+0xfe>
 8008e16:	9a01      	ldr	r2, [sp, #4]
 8008e18:	50b4      	str	r4, [r6, r2]
 8008e1a:	3604      	adds	r6, #4
 8008e1c:	e7a3      	b.n	8008d66 <__multiply+0x7e>
 8008e1e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d1a5      	bne.n	8008d72 <__multiply+0x8a>
 8008e26:	3f01      	subs	r7, #1
 8008e28:	e7a1      	b.n	8008d6e <__multiply+0x86>
 8008e2a:	bf00      	nop
 8008e2c:	0800bc24 	.word	0x0800bc24
 8008e30:	0800bcb4 	.word	0x0800bcb4

08008e34 <__pow5mult>:
 8008e34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008e38:	4615      	mov	r5, r2
 8008e3a:	f012 0203 	ands.w	r2, r2, #3
 8008e3e:	4606      	mov	r6, r0
 8008e40:	460f      	mov	r7, r1
 8008e42:	d007      	beq.n	8008e54 <__pow5mult+0x20>
 8008e44:	4c25      	ldr	r4, [pc, #148]	; (8008edc <__pow5mult+0xa8>)
 8008e46:	3a01      	subs	r2, #1
 8008e48:	2300      	movs	r3, #0
 8008e4a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008e4e:	f7ff fe51 	bl	8008af4 <__multadd>
 8008e52:	4607      	mov	r7, r0
 8008e54:	10ad      	asrs	r5, r5, #2
 8008e56:	d03d      	beq.n	8008ed4 <__pow5mult+0xa0>
 8008e58:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008e5a:	b97c      	cbnz	r4, 8008e7c <__pow5mult+0x48>
 8008e5c:	2010      	movs	r0, #16
 8008e5e:	f7ff fdbf 	bl	80089e0 <malloc>
 8008e62:	4602      	mov	r2, r0
 8008e64:	6270      	str	r0, [r6, #36]	; 0x24
 8008e66:	b928      	cbnz	r0, 8008e74 <__pow5mult+0x40>
 8008e68:	4b1d      	ldr	r3, [pc, #116]	; (8008ee0 <__pow5mult+0xac>)
 8008e6a:	481e      	ldr	r0, [pc, #120]	; (8008ee4 <__pow5mult+0xb0>)
 8008e6c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008e70:	f000 fce6 	bl	8009840 <__assert_func>
 8008e74:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008e78:	6004      	str	r4, [r0, #0]
 8008e7a:	60c4      	str	r4, [r0, #12]
 8008e7c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008e80:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008e84:	b94c      	cbnz	r4, 8008e9a <__pow5mult+0x66>
 8008e86:	f240 2171 	movw	r1, #625	; 0x271
 8008e8a:	4630      	mov	r0, r6
 8008e8c:	f7ff ff16 	bl	8008cbc <__i2b>
 8008e90:	2300      	movs	r3, #0
 8008e92:	f8c8 0008 	str.w	r0, [r8, #8]
 8008e96:	4604      	mov	r4, r0
 8008e98:	6003      	str	r3, [r0, #0]
 8008e9a:	f04f 0900 	mov.w	r9, #0
 8008e9e:	07eb      	lsls	r3, r5, #31
 8008ea0:	d50a      	bpl.n	8008eb8 <__pow5mult+0x84>
 8008ea2:	4639      	mov	r1, r7
 8008ea4:	4622      	mov	r2, r4
 8008ea6:	4630      	mov	r0, r6
 8008ea8:	f7ff ff1e 	bl	8008ce8 <__multiply>
 8008eac:	4639      	mov	r1, r7
 8008eae:	4680      	mov	r8, r0
 8008eb0:	4630      	mov	r0, r6
 8008eb2:	f7ff fdfd 	bl	8008ab0 <_Bfree>
 8008eb6:	4647      	mov	r7, r8
 8008eb8:	106d      	asrs	r5, r5, #1
 8008eba:	d00b      	beq.n	8008ed4 <__pow5mult+0xa0>
 8008ebc:	6820      	ldr	r0, [r4, #0]
 8008ebe:	b938      	cbnz	r0, 8008ed0 <__pow5mult+0x9c>
 8008ec0:	4622      	mov	r2, r4
 8008ec2:	4621      	mov	r1, r4
 8008ec4:	4630      	mov	r0, r6
 8008ec6:	f7ff ff0f 	bl	8008ce8 <__multiply>
 8008eca:	6020      	str	r0, [r4, #0]
 8008ecc:	f8c0 9000 	str.w	r9, [r0]
 8008ed0:	4604      	mov	r4, r0
 8008ed2:	e7e4      	b.n	8008e9e <__pow5mult+0x6a>
 8008ed4:	4638      	mov	r0, r7
 8008ed6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008eda:	bf00      	nop
 8008edc:	0800be08 	.word	0x0800be08
 8008ee0:	0800bbae 	.word	0x0800bbae
 8008ee4:	0800bcb4 	.word	0x0800bcb4

08008ee8 <__lshift>:
 8008ee8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008eec:	460c      	mov	r4, r1
 8008eee:	6849      	ldr	r1, [r1, #4]
 8008ef0:	6923      	ldr	r3, [r4, #16]
 8008ef2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008ef6:	68a3      	ldr	r3, [r4, #8]
 8008ef8:	4607      	mov	r7, r0
 8008efa:	4691      	mov	r9, r2
 8008efc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008f00:	f108 0601 	add.w	r6, r8, #1
 8008f04:	42b3      	cmp	r3, r6
 8008f06:	db0b      	blt.n	8008f20 <__lshift+0x38>
 8008f08:	4638      	mov	r0, r7
 8008f0a:	f7ff fd91 	bl	8008a30 <_Balloc>
 8008f0e:	4605      	mov	r5, r0
 8008f10:	b948      	cbnz	r0, 8008f26 <__lshift+0x3e>
 8008f12:	4602      	mov	r2, r0
 8008f14:	4b28      	ldr	r3, [pc, #160]	; (8008fb8 <__lshift+0xd0>)
 8008f16:	4829      	ldr	r0, [pc, #164]	; (8008fbc <__lshift+0xd4>)
 8008f18:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008f1c:	f000 fc90 	bl	8009840 <__assert_func>
 8008f20:	3101      	adds	r1, #1
 8008f22:	005b      	lsls	r3, r3, #1
 8008f24:	e7ee      	b.n	8008f04 <__lshift+0x1c>
 8008f26:	2300      	movs	r3, #0
 8008f28:	f100 0114 	add.w	r1, r0, #20
 8008f2c:	f100 0210 	add.w	r2, r0, #16
 8008f30:	4618      	mov	r0, r3
 8008f32:	4553      	cmp	r3, sl
 8008f34:	db33      	blt.n	8008f9e <__lshift+0xb6>
 8008f36:	6920      	ldr	r0, [r4, #16]
 8008f38:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008f3c:	f104 0314 	add.w	r3, r4, #20
 8008f40:	f019 091f 	ands.w	r9, r9, #31
 8008f44:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008f48:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008f4c:	d02b      	beq.n	8008fa6 <__lshift+0xbe>
 8008f4e:	f1c9 0e20 	rsb	lr, r9, #32
 8008f52:	468a      	mov	sl, r1
 8008f54:	2200      	movs	r2, #0
 8008f56:	6818      	ldr	r0, [r3, #0]
 8008f58:	fa00 f009 	lsl.w	r0, r0, r9
 8008f5c:	4302      	orrs	r2, r0
 8008f5e:	f84a 2b04 	str.w	r2, [sl], #4
 8008f62:	f853 2b04 	ldr.w	r2, [r3], #4
 8008f66:	459c      	cmp	ip, r3
 8008f68:	fa22 f20e 	lsr.w	r2, r2, lr
 8008f6c:	d8f3      	bhi.n	8008f56 <__lshift+0x6e>
 8008f6e:	ebac 0304 	sub.w	r3, ip, r4
 8008f72:	3b15      	subs	r3, #21
 8008f74:	f023 0303 	bic.w	r3, r3, #3
 8008f78:	3304      	adds	r3, #4
 8008f7a:	f104 0015 	add.w	r0, r4, #21
 8008f7e:	4584      	cmp	ip, r0
 8008f80:	bf38      	it	cc
 8008f82:	2304      	movcc	r3, #4
 8008f84:	50ca      	str	r2, [r1, r3]
 8008f86:	b10a      	cbz	r2, 8008f8c <__lshift+0xa4>
 8008f88:	f108 0602 	add.w	r6, r8, #2
 8008f8c:	3e01      	subs	r6, #1
 8008f8e:	4638      	mov	r0, r7
 8008f90:	612e      	str	r6, [r5, #16]
 8008f92:	4621      	mov	r1, r4
 8008f94:	f7ff fd8c 	bl	8008ab0 <_Bfree>
 8008f98:	4628      	mov	r0, r5
 8008f9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f9e:	f842 0f04 	str.w	r0, [r2, #4]!
 8008fa2:	3301      	adds	r3, #1
 8008fa4:	e7c5      	b.n	8008f32 <__lshift+0x4a>
 8008fa6:	3904      	subs	r1, #4
 8008fa8:	f853 2b04 	ldr.w	r2, [r3], #4
 8008fac:	f841 2f04 	str.w	r2, [r1, #4]!
 8008fb0:	459c      	cmp	ip, r3
 8008fb2:	d8f9      	bhi.n	8008fa8 <__lshift+0xc0>
 8008fb4:	e7ea      	b.n	8008f8c <__lshift+0xa4>
 8008fb6:	bf00      	nop
 8008fb8:	0800bc24 	.word	0x0800bc24
 8008fbc:	0800bcb4 	.word	0x0800bcb4

08008fc0 <__mcmp>:
 8008fc0:	b530      	push	{r4, r5, lr}
 8008fc2:	6902      	ldr	r2, [r0, #16]
 8008fc4:	690c      	ldr	r4, [r1, #16]
 8008fc6:	1b12      	subs	r2, r2, r4
 8008fc8:	d10e      	bne.n	8008fe8 <__mcmp+0x28>
 8008fca:	f100 0314 	add.w	r3, r0, #20
 8008fce:	3114      	adds	r1, #20
 8008fd0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008fd4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008fd8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008fdc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008fe0:	42a5      	cmp	r5, r4
 8008fe2:	d003      	beq.n	8008fec <__mcmp+0x2c>
 8008fe4:	d305      	bcc.n	8008ff2 <__mcmp+0x32>
 8008fe6:	2201      	movs	r2, #1
 8008fe8:	4610      	mov	r0, r2
 8008fea:	bd30      	pop	{r4, r5, pc}
 8008fec:	4283      	cmp	r3, r0
 8008fee:	d3f3      	bcc.n	8008fd8 <__mcmp+0x18>
 8008ff0:	e7fa      	b.n	8008fe8 <__mcmp+0x28>
 8008ff2:	f04f 32ff 	mov.w	r2, #4294967295
 8008ff6:	e7f7      	b.n	8008fe8 <__mcmp+0x28>

08008ff8 <__mdiff>:
 8008ff8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ffc:	460c      	mov	r4, r1
 8008ffe:	4606      	mov	r6, r0
 8009000:	4611      	mov	r1, r2
 8009002:	4620      	mov	r0, r4
 8009004:	4617      	mov	r7, r2
 8009006:	f7ff ffdb 	bl	8008fc0 <__mcmp>
 800900a:	1e05      	subs	r5, r0, #0
 800900c:	d110      	bne.n	8009030 <__mdiff+0x38>
 800900e:	4629      	mov	r1, r5
 8009010:	4630      	mov	r0, r6
 8009012:	f7ff fd0d 	bl	8008a30 <_Balloc>
 8009016:	b930      	cbnz	r0, 8009026 <__mdiff+0x2e>
 8009018:	4b39      	ldr	r3, [pc, #228]	; (8009100 <__mdiff+0x108>)
 800901a:	4602      	mov	r2, r0
 800901c:	f240 2132 	movw	r1, #562	; 0x232
 8009020:	4838      	ldr	r0, [pc, #224]	; (8009104 <__mdiff+0x10c>)
 8009022:	f000 fc0d 	bl	8009840 <__assert_func>
 8009026:	2301      	movs	r3, #1
 8009028:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800902c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009030:	bfa4      	itt	ge
 8009032:	463b      	movge	r3, r7
 8009034:	4627      	movge	r7, r4
 8009036:	4630      	mov	r0, r6
 8009038:	6879      	ldr	r1, [r7, #4]
 800903a:	bfa6      	itte	ge
 800903c:	461c      	movge	r4, r3
 800903e:	2500      	movge	r5, #0
 8009040:	2501      	movlt	r5, #1
 8009042:	f7ff fcf5 	bl	8008a30 <_Balloc>
 8009046:	b920      	cbnz	r0, 8009052 <__mdiff+0x5a>
 8009048:	4b2d      	ldr	r3, [pc, #180]	; (8009100 <__mdiff+0x108>)
 800904a:	4602      	mov	r2, r0
 800904c:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009050:	e7e6      	b.n	8009020 <__mdiff+0x28>
 8009052:	693e      	ldr	r6, [r7, #16]
 8009054:	60c5      	str	r5, [r0, #12]
 8009056:	6925      	ldr	r5, [r4, #16]
 8009058:	f107 0114 	add.w	r1, r7, #20
 800905c:	f104 0914 	add.w	r9, r4, #20
 8009060:	f100 0e14 	add.w	lr, r0, #20
 8009064:	f107 0210 	add.w	r2, r7, #16
 8009068:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800906c:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8009070:	46f2      	mov	sl, lr
 8009072:	2700      	movs	r7, #0
 8009074:	f859 3b04 	ldr.w	r3, [r9], #4
 8009078:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800907c:	fa1f f883 	uxth.w	r8, r3
 8009080:	fa17 f78b 	uxtah	r7, r7, fp
 8009084:	0c1b      	lsrs	r3, r3, #16
 8009086:	eba7 0808 	sub.w	r8, r7, r8
 800908a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800908e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009092:	fa1f f888 	uxth.w	r8, r8
 8009096:	141f      	asrs	r7, r3, #16
 8009098:	454d      	cmp	r5, r9
 800909a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800909e:	f84a 3b04 	str.w	r3, [sl], #4
 80090a2:	d8e7      	bhi.n	8009074 <__mdiff+0x7c>
 80090a4:	1b2b      	subs	r3, r5, r4
 80090a6:	3b15      	subs	r3, #21
 80090a8:	f023 0303 	bic.w	r3, r3, #3
 80090ac:	3304      	adds	r3, #4
 80090ae:	3415      	adds	r4, #21
 80090b0:	42a5      	cmp	r5, r4
 80090b2:	bf38      	it	cc
 80090b4:	2304      	movcc	r3, #4
 80090b6:	4419      	add	r1, r3
 80090b8:	4473      	add	r3, lr
 80090ba:	469e      	mov	lr, r3
 80090bc:	460d      	mov	r5, r1
 80090be:	4565      	cmp	r5, ip
 80090c0:	d30e      	bcc.n	80090e0 <__mdiff+0xe8>
 80090c2:	f10c 0203 	add.w	r2, ip, #3
 80090c6:	1a52      	subs	r2, r2, r1
 80090c8:	f022 0203 	bic.w	r2, r2, #3
 80090cc:	3903      	subs	r1, #3
 80090ce:	458c      	cmp	ip, r1
 80090d0:	bf38      	it	cc
 80090d2:	2200      	movcc	r2, #0
 80090d4:	441a      	add	r2, r3
 80090d6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80090da:	b17b      	cbz	r3, 80090fc <__mdiff+0x104>
 80090dc:	6106      	str	r6, [r0, #16]
 80090de:	e7a5      	b.n	800902c <__mdiff+0x34>
 80090e0:	f855 8b04 	ldr.w	r8, [r5], #4
 80090e4:	fa17 f488 	uxtah	r4, r7, r8
 80090e8:	1422      	asrs	r2, r4, #16
 80090ea:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 80090ee:	b2a4      	uxth	r4, r4
 80090f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80090f4:	f84e 4b04 	str.w	r4, [lr], #4
 80090f8:	1417      	asrs	r7, r2, #16
 80090fa:	e7e0      	b.n	80090be <__mdiff+0xc6>
 80090fc:	3e01      	subs	r6, #1
 80090fe:	e7ea      	b.n	80090d6 <__mdiff+0xde>
 8009100:	0800bc24 	.word	0x0800bc24
 8009104:	0800bcb4 	.word	0x0800bcb4

08009108 <__ulp>:
 8009108:	b082      	sub	sp, #8
 800910a:	ed8d 0b00 	vstr	d0, [sp]
 800910e:	9b01      	ldr	r3, [sp, #4]
 8009110:	4912      	ldr	r1, [pc, #72]	; (800915c <__ulp+0x54>)
 8009112:	4019      	ands	r1, r3
 8009114:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8009118:	2900      	cmp	r1, #0
 800911a:	dd05      	ble.n	8009128 <__ulp+0x20>
 800911c:	2200      	movs	r2, #0
 800911e:	460b      	mov	r3, r1
 8009120:	ec43 2b10 	vmov	d0, r2, r3
 8009124:	b002      	add	sp, #8
 8009126:	4770      	bx	lr
 8009128:	4249      	negs	r1, r1
 800912a:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800912e:	ea4f 5021 	mov.w	r0, r1, asr #20
 8009132:	f04f 0200 	mov.w	r2, #0
 8009136:	f04f 0300 	mov.w	r3, #0
 800913a:	da04      	bge.n	8009146 <__ulp+0x3e>
 800913c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8009140:	fa41 f300 	asr.w	r3, r1, r0
 8009144:	e7ec      	b.n	8009120 <__ulp+0x18>
 8009146:	f1a0 0114 	sub.w	r1, r0, #20
 800914a:	291e      	cmp	r1, #30
 800914c:	bfda      	itte	le
 800914e:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8009152:	fa20 f101 	lsrle.w	r1, r0, r1
 8009156:	2101      	movgt	r1, #1
 8009158:	460a      	mov	r2, r1
 800915a:	e7e1      	b.n	8009120 <__ulp+0x18>
 800915c:	7ff00000 	.word	0x7ff00000

08009160 <__b2d>:
 8009160:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009162:	6905      	ldr	r5, [r0, #16]
 8009164:	f100 0714 	add.w	r7, r0, #20
 8009168:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800916c:	1f2e      	subs	r6, r5, #4
 800916e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8009172:	4620      	mov	r0, r4
 8009174:	f7ff fd52 	bl	8008c1c <__hi0bits>
 8009178:	f1c0 0320 	rsb	r3, r0, #32
 800917c:	280a      	cmp	r0, #10
 800917e:	f8df c07c 	ldr.w	ip, [pc, #124]	; 80091fc <__b2d+0x9c>
 8009182:	600b      	str	r3, [r1, #0]
 8009184:	dc14      	bgt.n	80091b0 <__b2d+0x50>
 8009186:	f1c0 0e0b 	rsb	lr, r0, #11
 800918a:	fa24 f10e 	lsr.w	r1, r4, lr
 800918e:	42b7      	cmp	r7, r6
 8009190:	ea41 030c 	orr.w	r3, r1, ip
 8009194:	bf34      	ite	cc
 8009196:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800919a:	2100      	movcs	r1, #0
 800919c:	3015      	adds	r0, #21
 800919e:	fa04 f000 	lsl.w	r0, r4, r0
 80091a2:	fa21 f10e 	lsr.w	r1, r1, lr
 80091a6:	ea40 0201 	orr.w	r2, r0, r1
 80091aa:	ec43 2b10 	vmov	d0, r2, r3
 80091ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80091b0:	42b7      	cmp	r7, r6
 80091b2:	bf3a      	itte	cc
 80091b4:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80091b8:	f1a5 0608 	subcc.w	r6, r5, #8
 80091bc:	2100      	movcs	r1, #0
 80091be:	380b      	subs	r0, #11
 80091c0:	d017      	beq.n	80091f2 <__b2d+0x92>
 80091c2:	f1c0 0c20 	rsb	ip, r0, #32
 80091c6:	fa04 f500 	lsl.w	r5, r4, r0
 80091ca:	42be      	cmp	r6, r7
 80091cc:	fa21 f40c 	lsr.w	r4, r1, ip
 80091d0:	ea45 0504 	orr.w	r5, r5, r4
 80091d4:	bf8c      	ite	hi
 80091d6:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 80091da:	2400      	movls	r4, #0
 80091dc:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 80091e0:	fa01 f000 	lsl.w	r0, r1, r0
 80091e4:	fa24 f40c 	lsr.w	r4, r4, ip
 80091e8:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80091ec:	ea40 0204 	orr.w	r2, r0, r4
 80091f0:	e7db      	b.n	80091aa <__b2d+0x4a>
 80091f2:	ea44 030c 	orr.w	r3, r4, ip
 80091f6:	460a      	mov	r2, r1
 80091f8:	e7d7      	b.n	80091aa <__b2d+0x4a>
 80091fa:	bf00      	nop
 80091fc:	3ff00000 	.word	0x3ff00000

08009200 <__d2b>:
 8009200:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009204:	4689      	mov	r9, r1
 8009206:	2101      	movs	r1, #1
 8009208:	ec57 6b10 	vmov	r6, r7, d0
 800920c:	4690      	mov	r8, r2
 800920e:	f7ff fc0f 	bl	8008a30 <_Balloc>
 8009212:	4604      	mov	r4, r0
 8009214:	b930      	cbnz	r0, 8009224 <__d2b+0x24>
 8009216:	4602      	mov	r2, r0
 8009218:	4b25      	ldr	r3, [pc, #148]	; (80092b0 <__d2b+0xb0>)
 800921a:	4826      	ldr	r0, [pc, #152]	; (80092b4 <__d2b+0xb4>)
 800921c:	f240 310a 	movw	r1, #778	; 0x30a
 8009220:	f000 fb0e 	bl	8009840 <__assert_func>
 8009224:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009228:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800922c:	bb35      	cbnz	r5, 800927c <__d2b+0x7c>
 800922e:	2e00      	cmp	r6, #0
 8009230:	9301      	str	r3, [sp, #4]
 8009232:	d028      	beq.n	8009286 <__d2b+0x86>
 8009234:	4668      	mov	r0, sp
 8009236:	9600      	str	r6, [sp, #0]
 8009238:	f7ff fd10 	bl	8008c5c <__lo0bits>
 800923c:	9900      	ldr	r1, [sp, #0]
 800923e:	b300      	cbz	r0, 8009282 <__d2b+0x82>
 8009240:	9a01      	ldr	r2, [sp, #4]
 8009242:	f1c0 0320 	rsb	r3, r0, #32
 8009246:	fa02 f303 	lsl.w	r3, r2, r3
 800924a:	430b      	orrs	r3, r1
 800924c:	40c2      	lsrs	r2, r0
 800924e:	6163      	str	r3, [r4, #20]
 8009250:	9201      	str	r2, [sp, #4]
 8009252:	9b01      	ldr	r3, [sp, #4]
 8009254:	61a3      	str	r3, [r4, #24]
 8009256:	2b00      	cmp	r3, #0
 8009258:	bf14      	ite	ne
 800925a:	2202      	movne	r2, #2
 800925c:	2201      	moveq	r2, #1
 800925e:	6122      	str	r2, [r4, #16]
 8009260:	b1d5      	cbz	r5, 8009298 <__d2b+0x98>
 8009262:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009266:	4405      	add	r5, r0
 8009268:	f8c9 5000 	str.w	r5, [r9]
 800926c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009270:	f8c8 0000 	str.w	r0, [r8]
 8009274:	4620      	mov	r0, r4
 8009276:	b003      	add	sp, #12
 8009278:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800927c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009280:	e7d5      	b.n	800922e <__d2b+0x2e>
 8009282:	6161      	str	r1, [r4, #20]
 8009284:	e7e5      	b.n	8009252 <__d2b+0x52>
 8009286:	a801      	add	r0, sp, #4
 8009288:	f7ff fce8 	bl	8008c5c <__lo0bits>
 800928c:	9b01      	ldr	r3, [sp, #4]
 800928e:	6163      	str	r3, [r4, #20]
 8009290:	2201      	movs	r2, #1
 8009292:	6122      	str	r2, [r4, #16]
 8009294:	3020      	adds	r0, #32
 8009296:	e7e3      	b.n	8009260 <__d2b+0x60>
 8009298:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800929c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80092a0:	f8c9 0000 	str.w	r0, [r9]
 80092a4:	6918      	ldr	r0, [r3, #16]
 80092a6:	f7ff fcb9 	bl	8008c1c <__hi0bits>
 80092aa:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80092ae:	e7df      	b.n	8009270 <__d2b+0x70>
 80092b0:	0800bc24 	.word	0x0800bc24
 80092b4:	0800bcb4 	.word	0x0800bcb4

080092b8 <__ratio>:
 80092b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092bc:	4688      	mov	r8, r1
 80092be:	4669      	mov	r1, sp
 80092c0:	4681      	mov	r9, r0
 80092c2:	f7ff ff4d 	bl	8009160 <__b2d>
 80092c6:	a901      	add	r1, sp, #4
 80092c8:	4640      	mov	r0, r8
 80092ca:	ec55 4b10 	vmov	r4, r5, d0
 80092ce:	f7ff ff47 	bl	8009160 <__b2d>
 80092d2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80092d6:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80092da:	eba3 0c02 	sub.w	ip, r3, r2
 80092de:	e9dd 3200 	ldrd	r3, r2, [sp]
 80092e2:	1a9b      	subs	r3, r3, r2
 80092e4:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80092e8:	ec51 0b10 	vmov	r0, r1, d0
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	bfd6      	itet	le
 80092f0:	460a      	movle	r2, r1
 80092f2:	462a      	movgt	r2, r5
 80092f4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80092f8:	468b      	mov	fp, r1
 80092fa:	462f      	mov	r7, r5
 80092fc:	bfd4      	ite	le
 80092fe:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8009302:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8009306:	4620      	mov	r0, r4
 8009308:	ee10 2a10 	vmov	r2, s0
 800930c:	465b      	mov	r3, fp
 800930e:	4639      	mov	r1, r7
 8009310:	f7f7 fa9c 	bl	800084c <__aeabi_ddiv>
 8009314:	ec41 0b10 	vmov	d0, r0, r1
 8009318:	b003      	add	sp, #12
 800931a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800931e <__copybits>:
 800931e:	3901      	subs	r1, #1
 8009320:	b570      	push	{r4, r5, r6, lr}
 8009322:	1149      	asrs	r1, r1, #5
 8009324:	6914      	ldr	r4, [r2, #16]
 8009326:	3101      	adds	r1, #1
 8009328:	f102 0314 	add.w	r3, r2, #20
 800932c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009330:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009334:	1f05      	subs	r5, r0, #4
 8009336:	42a3      	cmp	r3, r4
 8009338:	d30c      	bcc.n	8009354 <__copybits+0x36>
 800933a:	1aa3      	subs	r3, r4, r2
 800933c:	3b11      	subs	r3, #17
 800933e:	f023 0303 	bic.w	r3, r3, #3
 8009342:	3211      	adds	r2, #17
 8009344:	42a2      	cmp	r2, r4
 8009346:	bf88      	it	hi
 8009348:	2300      	movhi	r3, #0
 800934a:	4418      	add	r0, r3
 800934c:	2300      	movs	r3, #0
 800934e:	4288      	cmp	r0, r1
 8009350:	d305      	bcc.n	800935e <__copybits+0x40>
 8009352:	bd70      	pop	{r4, r5, r6, pc}
 8009354:	f853 6b04 	ldr.w	r6, [r3], #4
 8009358:	f845 6f04 	str.w	r6, [r5, #4]!
 800935c:	e7eb      	b.n	8009336 <__copybits+0x18>
 800935e:	f840 3b04 	str.w	r3, [r0], #4
 8009362:	e7f4      	b.n	800934e <__copybits+0x30>

08009364 <__any_on>:
 8009364:	f100 0214 	add.w	r2, r0, #20
 8009368:	6900      	ldr	r0, [r0, #16]
 800936a:	114b      	asrs	r3, r1, #5
 800936c:	4298      	cmp	r0, r3
 800936e:	b510      	push	{r4, lr}
 8009370:	db11      	blt.n	8009396 <__any_on+0x32>
 8009372:	dd0a      	ble.n	800938a <__any_on+0x26>
 8009374:	f011 011f 	ands.w	r1, r1, #31
 8009378:	d007      	beq.n	800938a <__any_on+0x26>
 800937a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800937e:	fa24 f001 	lsr.w	r0, r4, r1
 8009382:	fa00 f101 	lsl.w	r1, r0, r1
 8009386:	428c      	cmp	r4, r1
 8009388:	d10b      	bne.n	80093a2 <__any_on+0x3e>
 800938a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800938e:	4293      	cmp	r3, r2
 8009390:	d803      	bhi.n	800939a <__any_on+0x36>
 8009392:	2000      	movs	r0, #0
 8009394:	bd10      	pop	{r4, pc}
 8009396:	4603      	mov	r3, r0
 8009398:	e7f7      	b.n	800938a <__any_on+0x26>
 800939a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800939e:	2900      	cmp	r1, #0
 80093a0:	d0f5      	beq.n	800938e <__any_on+0x2a>
 80093a2:	2001      	movs	r0, #1
 80093a4:	e7f6      	b.n	8009394 <__any_on+0x30>

080093a6 <_calloc_r>:
 80093a6:	b513      	push	{r0, r1, r4, lr}
 80093a8:	434a      	muls	r2, r1
 80093aa:	4611      	mov	r1, r2
 80093ac:	9201      	str	r2, [sp, #4]
 80093ae:	f000 f859 	bl	8009464 <_malloc_r>
 80093b2:	4604      	mov	r4, r0
 80093b4:	b118      	cbz	r0, 80093be <_calloc_r+0x18>
 80093b6:	9a01      	ldr	r2, [sp, #4]
 80093b8:	2100      	movs	r1, #0
 80093ba:	f7fc fbc7 	bl	8005b4c <memset>
 80093be:	4620      	mov	r0, r4
 80093c0:	b002      	add	sp, #8
 80093c2:	bd10      	pop	{r4, pc}

080093c4 <_free_r>:
 80093c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80093c6:	2900      	cmp	r1, #0
 80093c8:	d048      	beq.n	800945c <_free_r+0x98>
 80093ca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80093ce:	9001      	str	r0, [sp, #4]
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	f1a1 0404 	sub.w	r4, r1, #4
 80093d6:	bfb8      	it	lt
 80093d8:	18e4      	addlt	r4, r4, r3
 80093da:	f000 fa7b 	bl	80098d4 <__malloc_lock>
 80093de:	4a20      	ldr	r2, [pc, #128]	; (8009460 <_free_r+0x9c>)
 80093e0:	9801      	ldr	r0, [sp, #4]
 80093e2:	6813      	ldr	r3, [r2, #0]
 80093e4:	4615      	mov	r5, r2
 80093e6:	b933      	cbnz	r3, 80093f6 <_free_r+0x32>
 80093e8:	6063      	str	r3, [r4, #4]
 80093ea:	6014      	str	r4, [r2, #0]
 80093ec:	b003      	add	sp, #12
 80093ee:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80093f2:	f000 ba75 	b.w	80098e0 <__malloc_unlock>
 80093f6:	42a3      	cmp	r3, r4
 80093f8:	d90b      	bls.n	8009412 <_free_r+0x4e>
 80093fa:	6821      	ldr	r1, [r4, #0]
 80093fc:	1862      	adds	r2, r4, r1
 80093fe:	4293      	cmp	r3, r2
 8009400:	bf04      	itt	eq
 8009402:	681a      	ldreq	r2, [r3, #0]
 8009404:	685b      	ldreq	r3, [r3, #4]
 8009406:	6063      	str	r3, [r4, #4]
 8009408:	bf04      	itt	eq
 800940a:	1852      	addeq	r2, r2, r1
 800940c:	6022      	streq	r2, [r4, #0]
 800940e:	602c      	str	r4, [r5, #0]
 8009410:	e7ec      	b.n	80093ec <_free_r+0x28>
 8009412:	461a      	mov	r2, r3
 8009414:	685b      	ldr	r3, [r3, #4]
 8009416:	b10b      	cbz	r3, 800941c <_free_r+0x58>
 8009418:	42a3      	cmp	r3, r4
 800941a:	d9fa      	bls.n	8009412 <_free_r+0x4e>
 800941c:	6811      	ldr	r1, [r2, #0]
 800941e:	1855      	adds	r5, r2, r1
 8009420:	42a5      	cmp	r5, r4
 8009422:	d10b      	bne.n	800943c <_free_r+0x78>
 8009424:	6824      	ldr	r4, [r4, #0]
 8009426:	4421      	add	r1, r4
 8009428:	1854      	adds	r4, r2, r1
 800942a:	42a3      	cmp	r3, r4
 800942c:	6011      	str	r1, [r2, #0]
 800942e:	d1dd      	bne.n	80093ec <_free_r+0x28>
 8009430:	681c      	ldr	r4, [r3, #0]
 8009432:	685b      	ldr	r3, [r3, #4]
 8009434:	6053      	str	r3, [r2, #4]
 8009436:	4421      	add	r1, r4
 8009438:	6011      	str	r1, [r2, #0]
 800943a:	e7d7      	b.n	80093ec <_free_r+0x28>
 800943c:	d902      	bls.n	8009444 <_free_r+0x80>
 800943e:	230c      	movs	r3, #12
 8009440:	6003      	str	r3, [r0, #0]
 8009442:	e7d3      	b.n	80093ec <_free_r+0x28>
 8009444:	6825      	ldr	r5, [r4, #0]
 8009446:	1961      	adds	r1, r4, r5
 8009448:	428b      	cmp	r3, r1
 800944a:	bf04      	itt	eq
 800944c:	6819      	ldreq	r1, [r3, #0]
 800944e:	685b      	ldreq	r3, [r3, #4]
 8009450:	6063      	str	r3, [r4, #4]
 8009452:	bf04      	itt	eq
 8009454:	1949      	addeq	r1, r1, r5
 8009456:	6021      	streq	r1, [r4, #0]
 8009458:	6054      	str	r4, [r2, #4]
 800945a:	e7c7      	b.n	80093ec <_free_r+0x28>
 800945c:	b003      	add	sp, #12
 800945e:	bd30      	pop	{r4, r5, pc}
 8009460:	2000021c 	.word	0x2000021c

08009464 <_malloc_r>:
 8009464:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009466:	1ccd      	adds	r5, r1, #3
 8009468:	f025 0503 	bic.w	r5, r5, #3
 800946c:	3508      	adds	r5, #8
 800946e:	2d0c      	cmp	r5, #12
 8009470:	bf38      	it	cc
 8009472:	250c      	movcc	r5, #12
 8009474:	2d00      	cmp	r5, #0
 8009476:	4606      	mov	r6, r0
 8009478:	db01      	blt.n	800947e <_malloc_r+0x1a>
 800947a:	42a9      	cmp	r1, r5
 800947c:	d903      	bls.n	8009486 <_malloc_r+0x22>
 800947e:	230c      	movs	r3, #12
 8009480:	6033      	str	r3, [r6, #0]
 8009482:	2000      	movs	r0, #0
 8009484:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009486:	f000 fa25 	bl	80098d4 <__malloc_lock>
 800948a:	4921      	ldr	r1, [pc, #132]	; (8009510 <_malloc_r+0xac>)
 800948c:	680a      	ldr	r2, [r1, #0]
 800948e:	4614      	mov	r4, r2
 8009490:	b99c      	cbnz	r4, 80094ba <_malloc_r+0x56>
 8009492:	4f20      	ldr	r7, [pc, #128]	; (8009514 <_malloc_r+0xb0>)
 8009494:	683b      	ldr	r3, [r7, #0]
 8009496:	b923      	cbnz	r3, 80094a2 <_malloc_r+0x3e>
 8009498:	4621      	mov	r1, r4
 800949a:	4630      	mov	r0, r6
 800949c:	f000 f9a0 	bl	80097e0 <_sbrk_r>
 80094a0:	6038      	str	r0, [r7, #0]
 80094a2:	4629      	mov	r1, r5
 80094a4:	4630      	mov	r0, r6
 80094a6:	f000 f99b 	bl	80097e0 <_sbrk_r>
 80094aa:	1c43      	adds	r3, r0, #1
 80094ac:	d123      	bne.n	80094f6 <_malloc_r+0x92>
 80094ae:	230c      	movs	r3, #12
 80094b0:	6033      	str	r3, [r6, #0]
 80094b2:	4630      	mov	r0, r6
 80094b4:	f000 fa14 	bl	80098e0 <__malloc_unlock>
 80094b8:	e7e3      	b.n	8009482 <_malloc_r+0x1e>
 80094ba:	6823      	ldr	r3, [r4, #0]
 80094bc:	1b5b      	subs	r3, r3, r5
 80094be:	d417      	bmi.n	80094f0 <_malloc_r+0x8c>
 80094c0:	2b0b      	cmp	r3, #11
 80094c2:	d903      	bls.n	80094cc <_malloc_r+0x68>
 80094c4:	6023      	str	r3, [r4, #0]
 80094c6:	441c      	add	r4, r3
 80094c8:	6025      	str	r5, [r4, #0]
 80094ca:	e004      	b.n	80094d6 <_malloc_r+0x72>
 80094cc:	6863      	ldr	r3, [r4, #4]
 80094ce:	42a2      	cmp	r2, r4
 80094d0:	bf0c      	ite	eq
 80094d2:	600b      	streq	r3, [r1, #0]
 80094d4:	6053      	strne	r3, [r2, #4]
 80094d6:	4630      	mov	r0, r6
 80094d8:	f000 fa02 	bl	80098e0 <__malloc_unlock>
 80094dc:	f104 000b 	add.w	r0, r4, #11
 80094e0:	1d23      	adds	r3, r4, #4
 80094e2:	f020 0007 	bic.w	r0, r0, #7
 80094e6:	1ac2      	subs	r2, r0, r3
 80094e8:	d0cc      	beq.n	8009484 <_malloc_r+0x20>
 80094ea:	1a1b      	subs	r3, r3, r0
 80094ec:	50a3      	str	r3, [r4, r2]
 80094ee:	e7c9      	b.n	8009484 <_malloc_r+0x20>
 80094f0:	4622      	mov	r2, r4
 80094f2:	6864      	ldr	r4, [r4, #4]
 80094f4:	e7cc      	b.n	8009490 <_malloc_r+0x2c>
 80094f6:	1cc4      	adds	r4, r0, #3
 80094f8:	f024 0403 	bic.w	r4, r4, #3
 80094fc:	42a0      	cmp	r0, r4
 80094fe:	d0e3      	beq.n	80094c8 <_malloc_r+0x64>
 8009500:	1a21      	subs	r1, r4, r0
 8009502:	4630      	mov	r0, r6
 8009504:	f000 f96c 	bl	80097e0 <_sbrk_r>
 8009508:	3001      	adds	r0, #1
 800950a:	d1dd      	bne.n	80094c8 <_malloc_r+0x64>
 800950c:	e7cf      	b.n	80094ae <_malloc_r+0x4a>
 800950e:	bf00      	nop
 8009510:	2000021c 	.word	0x2000021c
 8009514:	20000220 	.word	0x20000220

08009518 <__ssputs_r>:
 8009518:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800951c:	688e      	ldr	r6, [r1, #8]
 800951e:	429e      	cmp	r6, r3
 8009520:	4682      	mov	sl, r0
 8009522:	460c      	mov	r4, r1
 8009524:	4690      	mov	r8, r2
 8009526:	461f      	mov	r7, r3
 8009528:	d838      	bhi.n	800959c <__ssputs_r+0x84>
 800952a:	898a      	ldrh	r2, [r1, #12]
 800952c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009530:	d032      	beq.n	8009598 <__ssputs_r+0x80>
 8009532:	6825      	ldr	r5, [r4, #0]
 8009534:	6909      	ldr	r1, [r1, #16]
 8009536:	eba5 0901 	sub.w	r9, r5, r1
 800953a:	6965      	ldr	r5, [r4, #20]
 800953c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009540:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009544:	3301      	adds	r3, #1
 8009546:	444b      	add	r3, r9
 8009548:	106d      	asrs	r5, r5, #1
 800954a:	429d      	cmp	r5, r3
 800954c:	bf38      	it	cc
 800954e:	461d      	movcc	r5, r3
 8009550:	0553      	lsls	r3, r2, #21
 8009552:	d531      	bpl.n	80095b8 <__ssputs_r+0xa0>
 8009554:	4629      	mov	r1, r5
 8009556:	f7ff ff85 	bl	8009464 <_malloc_r>
 800955a:	4606      	mov	r6, r0
 800955c:	b950      	cbnz	r0, 8009574 <__ssputs_r+0x5c>
 800955e:	230c      	movs	r3, #12
 8009560:	f8ca 3000 	str.w	r3, [sl]
 8009564:	89a3      	ldrh	r3, [r4, #12]
 8009566:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800956a:	81a3      	strh	r3, [r4, #12]
 800956c:	f04f 30ff 	mov.w	r0, #4294967295
 8009570:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009574:	6921      	ldr	r1, [r4, #16]
 8009576:	464a      	mov	r2, r9
 8009578:	f7ff fa4c 	bl	8008a14 <memcpy>
 800957c:	89a3      	ldrh	r3, [r4, #12]
 800957e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009582:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009586:	81a3      	strh	r3, [r4, #12]
 8009588:	6126      	str	r6, [r4, #16]
 800958a:	6165      	str	r5, [r4, #20]
 800958c:	444e      	add	r6, r9
 800958e:	eba5 0509 	sub.w	r5, r5, r9
 8009592:	6026      	str	r6, [r4, #0]
 8009594:	60a5      	str	r5, [r4, #8]
 8009596:	463e      	mov	r6, r7
 8009598:	42be      	cmp	r6, r7
 800959a:	d900      	bls.n	800959e <__ssputs_r+0x86>
 800959c:	463e      	mov	r6, r7
 800959e:	4632      	mov	r2, r6
 80095a0:	6820      	ldr	r0, [r4, #0]
 80095a2:	4641      	mov	r1, r8
 80095a4:	f000 f97c 	bl	80098a0 <memmove>
 80095a8:	68a3      	ldr	r3, [r4, #8]
 80095aa:	6822      	ldr	r2, [r4, #0]
 80095ac:	1b9b      	subs	r3, r3, r6
 80095ae:	4432      	add	r2, r6
 80095b0:	60a3      	str	r3, [r4, #8]
 80095b2:	6022      	str	r2, [r4, #0]
 80095b4:	2000      	movs	r0, #0
 80095b6:	e7db      	b.n	8009570 <__ssputs_r+0x58>
 80095b8:	462a      	mov	r2, r5
 80095ba:	f000 f997 	bl	80098ec <_realloc_r>
 80095be:	4606      	mov	r6, r0
 80095c0:	2800      	cmp	r0, #0
 80095c2:	d1e1      	bne.n	8009588 <__ssputs_r+0x70>
 80095c4:	6921      	ldr	r1, [r4, #16]
 80095c6:	4650      	mov	r0, sl
 80095c8:	f7ff fefc 	bl	80093c4 <_free_r>
 80095cc:	e7c7      	b.n	800955e <__ssputs_r+0x46>
	...

080095d0 <_svfiprintf_r>:
 80095d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095d4:	4698      	mov	r8, r3
 80095d6:	898b      	ldrh	r3, [r1, #12]
 80095d8:	061b      	lsls	r3, r3, #24
 80095da:	b09d      	sub	sp, #116	; 0x74
 80095dc:	4607      	mov	r7, r0
 80095de:	460d      	mov	r5, r1
 80095e0:	4614      	mov	r4, r2
 80095e2:	d50e      	bpl.n	8009602 <_svfiprintf_r+0x32>
 80095e4:	690b      	ldr	r3, [r1, #16]
 80095e6:	b963      	cbnz	r3, 8009602 <_svfiprintf_r+0x32>
 80095e8:	2140      	movs	r1, #64	; 0x40
 80095ea:	f7ff ff3b 	bl	8009464 <_malloc_r>
 80095ee:	6028      	str	r0, [r5, #0]
 80095f0:	6128      	str	r0, [r5, #16]
 80095f2:	b920      	cbnz	r0, 80095fe <_svfiprintf_r+0x2e>
 80095f4:	230c      	movs	r3, #12
 80095f6:	603b      	str	r3, [r7, #0]
 80095f8:	f04f 30ff 	mov.w	r0, #4294967295
 80095fc:	e0d1      	b.n	80097a2 <_svfiprintf_r+0x1d2>
 80095fe:	2340      	movs	r3, #64	; 0x40
 8009600:	616b      	str	r3, [r5, #20]
 8009602:	2300      	movs	r3, #0
 8009604:	9309      	str	r3, [sp, #36]	; 0x24
 8009606:	2320      	movs	r3, #32
 8009608:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800960c:	f8cd 800c 	str.w	r8, [sp, #12]
 8009610:	2330      	movs	r3, #48	; 0x30
 8009612:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80097bc <_svfiprintf_r+0x1ec>
 8009616:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800961a:	f04f 0901 	mov.w	r9, #1
 800961e:	4623      	mov	r3, r4
 8009620:	469a      	mov	sl, r3
 8009622:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009626:	b10a      	cbz	r2, 800962c <_svfiprintf_r+0x5c>
 8009628:	2a25      	cmp	r2, #37	; 0x25
 800962a:	d1f9      	bne.n	8009620 <_svfiprintf_r+0x50>
 800962c:	ebba 0b04 	subs.w	fp, sl, r4
 8009630:	d00b      	beq.n	800964a <_svfiprintf_r+0x7a>
 8009632:	465b      	mov	r3, fp
 8009634:	4622      	mov	r2, r4
 8009636:	4629      	mov	r1, r5
 8009638:	4638      	mov	r0, r7
 800963a:	f7ff ff6d 	bl	8009518 <__ssputs_r>
 800963e:	3001      	adds	r0, #1
 8009640:	f000 80aa 	beq.w	8009798 <_svfiprintf_r+0x1c8>
 8009644:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009646:	445a      	add	r2, fp
 8009648:	9209      	str	r2, [sp, #36]	; 0x24
 800964a:	f89a 3000 	ldrb.w	r3, [sl]
 800964e:	2b00      	cmp	r3, #0
 8009650:	f000 80a2 	beq.w	8009798 <_svfiprintf_r+0x1c8>
 8009654:	2300      	movs	r3, #0
 8009656:	f04f 32ff 	mov.w	r2, #4294967295
 800965a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800965e:	f10a 0a01 	add.w	sl, sl, #1
 8009662:	9304      	str	r3, [sp, #16]
 8009664:	9307      	str	r3, [sp, #28]
 8009666:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800966a:	931a      	str	r3, [sp, #104]	; 0x68
 800966c:	4654      	mov	r4, sl
 800966e:	2205      	movs	r2, #5
 8009670:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009674:	4851      	ldr	r0, [pc, #324]	; (80097bc <_svfiprintf_r+0x1ec>)
 8009676:	f7f6 fdb3 	bl	80001e0 <memchr>
 800967a:	9a04      	ldr	r2, [sp, #16]
 800967c:	b9d8      	cbnz	r0, 80096b6 <_svfiprintf_r+0xe6>
 800967e:	06d0      	lsls	r0, r2, #27
 8009680:	bf44      	itt	mi
 8009682:	2320      	movmi	r3, #32
 8009684:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009688:	0711      	lsls	r1, r2, #28
 800968a:	bf44      	itt	mi
 800968c:	232b      	movmi	r3, #43	; 0x2b
 800968e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009692:	f89a 3000 	ldrb.w	r3, [sl]
 8009696:	2b2a      	cmp	r3, #42	; 0x2a
 8009698:	d015      	beq.n	80096c6 <_svfiprintf_r+0xf6>
 800969a:	9a07      	ldr	r2, [sp, #28]
 800969c:	4654      	mov	r4, sl
 800969e:	2000      	movs	r0, #0
 80096a0:	f04f 0c0a 	mov.w	ip, #10
 80096a4:	4621      	mov	r1, r4
 80096a6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80096aa:	3b30      	subs	r3, #48	; 0x30
 80096ac:	2b09      	cmp	r3, #9
 80096ae:	d94e      	bls.n	800974e <_svfiprintf_r+0x17e>
 80096b0:	b1b0      	cbz	r0, 80096e0 <_svfiprintf_r+0x110>
 80096b2:	9207      	str	r2, [sp, #28]
 80096b4:	e014      	b.n	80096e0 <_svfiprintf_r+0x110>
 80096b6:	eba0 0308 	sub.w	r3, r0, r8
 80096ba:	fa09 f303 	lsl.w	r3, r9, r3
 80096be:	4313      	orrs	r3, r2
 80096c0:	9304      	str	r3, [sp, #16]
 80096c2:	46a2      	mov	sl, r4
 80096c4:	e7d2      	b.n	800966c <_svfiprintf_r+0x9c>
 80096c6:	9b03      	ldr	r3, [sp, #12]
 80096c8:	1d19      	adds	r1, r3, #4
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	9103      	str	r1, [sp, #12]
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	bfbb      	ittet	lt
 80096d2:	425b      	neglt	r3, r3
 80096d4:	f042 0202 	orrlt.w	r2, r2, #2
 80096d8:	9307      	strge	r3, [sp, #28]
 80096da:	9307      	strlt	r3, [sp, #28]
 80096dc:	bfb8      	it	lt
 80096de:	9204      	strlt	r2, [sp, #16]
 80096e0:	7823      	ldrb	r3, [r4, #0]
 80096e2:	2b2e      	cmp	r3, #46	; 0x2e
 80096e4:	d10c      	bne.n	8009700 <_svfiprintf_r+0x130>
 80096e6:	7863      	ldrb	r3, [r4, #1]
 80096e8:	2b2a      	cmp	r3, #42	; 0x2a
 80096ea:	d135      	bne.n	8009758 <_svfiprintf_r+0x188>
 80096ec:	9b03      	ldr	r3, [sp, #12]
 80096ee:	1d1a      	adds	r2, r3, #4
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	9203      	str	r2, [sp, #12]
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	bfb8      	it	lt
 80096f8:	f04f 33ff 	movlt.w	r3, #4294967295
 80096fc:	3402      	adds	r4, #2
 80096fe:	9305      	str	r3, [sp, #20]
 8009700:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80097cc <_svfiprintf_r+0x1fc>
 8009704:	7821      	ldrb	r1, [r4, #0]
 8009706:	2203      	movs	r2, #3
 8009708:	4650      	mov	r0, sl
 800970a:	f7f6 fd69 	bl	80001e0 <memchr>
 800970e:	b140      	cbz	r0, 8009722 <_svfiprintf_r+0x152>
 8009710:	2340      	movs	r3, #64	; 0x40
 8009712:	eba0 000a 	sub.w	r0, r0, sl
 8009716:	fa03 f000 	lsl.w	r0, r3, r0
 800971a:	9b04      	ldr	r3, [sp, #16]
 800971c:	4303      	orrs	r3, r0
 800971e:	3401      	adds	r4, #1
 8009720:	9304      	str	r3, [sp, #16]
 8009722:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009726:	4826      	ldr	r0, [pc, #152]	; (80097c0 <_svfiprintf_r+0x1f0>)
 8009728:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800972c:	2206      	movs	r2, #6
 800972e:	f7f6 fd57 	bl	80001e0 <memchr>
 8009732:	2800      	cmp	r0, #0
 8009734:	d038      	beq.n	80097a8 <_svfiprintf_r+0x1d8>
 8009736:	4b23      	ldr	r3, [pc, #140]	; (80097c4 <_svfiprintf_r+0x1f4>)
 8009738:	bb1b      	cbnz	r3, 8009782 <_svfiprintf_r+0x1b2>
 800973a:	9b03      	ldr	r3, [sp, #12]
 800973c:	3307      	adds	r3, #7
 800973e:	f023 0307 	bic.w	r3, r3, #7
 8009742:	3308      	adds	r3, #8
 8009744:	9303      	str	r3, [sp, #12]
 8009746:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009748:	4433      	add	r3, r6
 800974a:	9309      	str	r3, [sp, #36]	; 0x24
 800974c:	e767      	b.n	800961e <_svfiprintf_r+0x4e>
 800974e:	fb0c 3202 	mla	r2, ip, r2, r3
 8009752:	460c      	mov	r4, r1
 8009754:	2001      	movs	r0, #1
 8009756:	e7a5      	b.n	80096a4 <_svfiprintf_r+0xd4>
 8009758:	2300      	movs	r3, #0
 800975a:	3401      	adds	r4, #1
 800975c:	9305      	str	r3, [sp, #20]
 800975e:	4619      	mov	r1, r3
 8009760:	f04f 0c0a 	mov.w	ip, #10
 8009764:	4620      	mov	r0, r4
 8009766:	f810 2b01 	ldrb.w	r2, [r0], #1
 800976a:	3a30      	subs	r2, #48	; 0x30
 800976c:	2a09      	cmp	r2, #9
 800976e:	d903      	bls.n	8009778 <_svfiprintf_r+0x1a8>
 8009770:	2b00      	cmp	r3, #0
 8009772:	d0c5      	beq.n	8009700 <_svfiprintf_r+0x130>
 8009774:	9105      	str	r1, [sp, #20]
 8009776:	e7c3      	b.n	8009700 <_svfiprintf_r+0x130>
 8009778:	fb0c 2101 	mla	r1, ip, r1, r2
 800977c:	4604      	mov	r4, r0
 800977e:	2301      	movs	r3, #1
 8009780:	e7f0      	b.n	8009764 <_svfiprintf_r+0x194>
 8009782:	ab03      	add	r3, sp, #12
 8009784:	9300      	str	r3, [sp, #0]
 8009786:	462a      	mov	r2, r5
 8009788:	4b0f      	ldr	r3, [pc, #60]	; (80097c8 <_svfiprintf_r+0x1f8>)
 800978a:	a904      	add	r1, sp, #16
 800978c:	4638      	mov	r0, r7
 800978e:	f7fc fa85 	bl	8005c9c <_printf_float>
 8009792:	1c42      	adds	r2, r0, #1
 8009794:	4606      	mov	r6, r0
 8009796:	d1d6      	bne.n	8009746 <_svfiprintf_r+0x176>
 8009798:	89ab      	ldrh	r3, [r5, #12]
 800979a:	065b      	lsls	r3, r3, #25
 800979c:	f53f af2c 	bmi.w	80095f8 <_svfiprintf_r+0x28>
 80097a0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80097a2:	b01d      	add	sp, #116	; 0x74
 80097a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097a8:	ab03      	add	r3, sp, #12
 80097aa:	9300      	str	r3, [sp, #0]
 80097ac:	462a      	mov	r2, r5
 80097ae:	4b06      	ldr	r3, [pc, #24]	; (80097c8 <_svfiprintf_r+0x1f8>)
 80097b0:	a904      	add	r1, sp, #16
 80097b2:	4638      	mov	r0, r7
 80097b4:	f7fc fd16 	bl	80061e4 <_printf_i>
 80097b8:	e7eb      	b.n	8009792 <_svfiprintf_r+0x1c2>
 80097ba:	bf00      	nop
 80097bc:	0800be14 	.word	0x0800be14
 80097c0:	0800be1e 	.word	0x0800be1e
 80097c4:	08005c9d 	.word	0x08005c9d
 80097c8:	08009519 	.word	0x08009519
 80097cc:	0800be1a 	.word	0x0800be1a

080097d0 <nan>:
 80097d0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80097d8 <nan+0x8>
 80097d4:	4770      	bx	lr
 80097d6:	bf00      	nop
 80097d8:	00000000 	.word	0x00000000
 80097dc:	7ff80000 	.word	0x7ff80000

080097e0 <_sbrk_r>:
 80097e0:	b538      	push	{r3, r4, r5, lr}
 80097e2:	4d06      	ldr	r5, [pc, #24]	; (80097fc <_sbrk_r+0x1c>)
 80097e4:	2300      	movs	r3, #0
 80097e6:	4604      	mov	r4, r0
 80097e8:	4608      	mov	r0, r1
 80097ea:	602b      	str	r3, [r5, #0]
 80097ec:	f7f8 fd32 	bl	8002254 <_sbrk>
 80097f0:	1c43      	adds	r3, r0, #1
 80097f2:	d102      	bne.n	80097fa <_sbrk_r+0x1a>
 80097f4:	682b      	ldr	r3, [r5, #0]
 80097f6:	b103      	cbz	r3, 80097fa <_sbrk_r+0x1a>
 80097f8:	6023      	str	r3, [r4, #0]
 80097fa:	bd38      	pop	{r3, r4, r5, pc}
 80097fc:	200004d0 	.word	0x200004d0

08009800 <strncmp>:
 8009800:	b510      	push	{r4, lr}
 8009802:	b16a      	cbz	r2, 8009820 <strncmp+0x20>
 8009804:	3901      	subs	r1, #1
 8009806:	1884      	adds	r4, r0, r2
 8009808:	f810 3b01 	ldrb.w	r3, [r0], #1
 800980c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8009810:	4293      	cmp	r3, r2
 8009812:	d103      	bne.n	800981c <strncmp+0x1c>
 8009814:	42a0      	cmp	r0, r4
 8009816:	d001      	beq.n	800981c <strncmp+0x1c>
 8009818:	2b00      	cmp	r3, #0
 800981a:	d1f5      	bne.n	8009808 <strncmp+0x8>
 800981c:	1a98      	subs	r0, r3, r2
 800981e:	bd10      	pop	{r4, pc}
 8009820:	4610      	mov	r0, r2
 8009822:	e7fc      	b.n	800981e <strncmp+0x1e>

08009824 <__ascii_wctomb>:
 8009824:	b149      	cbz	r1, 800983a <__ascii_wctomb+0x16>
 8009826:	2aff      	cmp	r2, #255	; 0xff
 8009828:	bf85      	ittet	hi
 800982a:	238a      	movhi	r3, #138	; 0x8a
 800982c:	6003      	strhi	r3, [r0, #0]
 800982e:	700a      	strbls	r2, [r1, #0]
 8009830:	f04f 30ff 	movhi.w	r0, #4294967295
 8009834:	bf98      	it	ls
 8009836:	2001      	movls	r0, #1
 8009838:	4770      	bx	lr
 800983a:	4608      	mov	r0, r1
 800983c:	4770      	bx	lr
	...

08009840 <__assert_func>:
 8009840:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009842:	4614      	mov	r4, r2
 8009844:	461a      	mov	r2, r3
 8009846:	4b09      	ldr	r3, [pc, #36]	; (800986c <__assert_func+0x2c>)
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	4605      	mov	r5, r0
 800984c:	68d8      	ldr	r0, [r3, #12]
 800984e:	b14c      	cbz	r4, 8009864 <__assert_func+0x24>
 8009850:	4b07      	ldr	r3, [pc, #28]	; (8009870 <__assert_func+0x30>)
 8009852:	9100      	str	r1, [sp, #0]
 8009854:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009858:	4906      	ldr	r1, [pc, #24]	; (8009874 <__assert_func+0x34>)
 800985a:	462b      	mov	r3, r5
 800985c:	f000 f80e 	bl	800987c <fiprintf>
 8009860:	f000 fa84 	bl	8009d6c <abort>
 8009864:	4b04      	ldr	r3, [pc, #16]	; (8009878 <__assert_func+0x38>)
 8009866:	461c      	mov	r4, r3
 8009868:	e7f3      	b.n	8009852 <__assert_func+0x12>
 800986a:	bf00      	nop
 800986c:	2000001c 	.word	0x2000001c
 8009870:	0800be25 	.word	0x0800be25
 8009874:	0800be32 	.word	0x0800be32
 8009878:	0800be60 	.word	0x0800be60

0800987c <fiprintf>:
 800987c:	b40e      	push	{r1, r2, r3}
 800987e:	b503      	push	{r0, r1, lr}
 8009880:	4601      	mov	r1, r0
 8009882:	ab03      	add	r3, sp, #12
 8009884:	4805      	ldr	r0, [pc, #20]	; (800989c <fiprintf+0x20>)
 8009886:	f853 2b04 	ldr.w	r2, [r3], #4
 800988a:	6800      	ldr	r0, [r0, #0]
 800988c:	9301      	str	r3, [sp, #4]
 800988e:	f000 f87d 	bl	800998c <_vfiprintf_r>
 8009892:	b002      	add	sp, #8
 8009894:	f85d eb04 	ldr.w	lr, [sp], #4
 8009898:	b003      	add	sp, #12
 800989a:	4770      	bx	lr
 800989c:	2000001c 	.word	0x2000001c

080098a0 <memmove>:
 80098a0:	4288      	cmp	r0, r1
 80098a2:	b510      	push	{r4, lr}
 80098a4:	eb01 0402 	add.w	r4, r1, r2
 80098a8:	d902      	bls.n	80098b0 <memmove+0x10>
 80098aa:	4284      	cmp	r4, r0
 80098ac:	4623      	mov	r3, r4
 80098ae:	d807      	bhi.n	80098c0 <memmove+0x20>
 80098b0:	1e43      	subs	r3, r0, #1
 80098b2:	42a1      	cmp	r1, r4
 80098b4:	d008      	beq.n	80098c8 <memmove+0x28>
 80098b6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80098ba:	f803 2f01 	strb.w	r2, [r3, #1]!
 80098be:	e7f8      	b.n	80098b2 <memmove+0x12>
 80098c0:	4402      	add	r2, r0
 80098c2:	4601      	mov	r1, r0
 80098c4:	428a      	cmp	r2, r1
 80098c6:	d100      	bne.n	80098ca <memmove+0x2a>
 80098c8:	bd10      	pop	{r4, pc}
 80098ca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80098ce:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80098d2:	e7f7      	b.n	80098c4 <memmove+0x24>

080098d4 <__malloc_lock>:
 80098d4:	4801      	ldr	r0, [pc, #4]	; (80098dc <__malloc_lock+0x8>)
 80098d6:	f000 bc09 	b.w	800a0ec <__retarget_lock_acquire_recursive>
 80098da:	bf00      	nop
 80098dc:	200004d8 	.word	0x200004d8

080098e0 <__malloc_unlock>:
 80098e0:	4801      	ldr	r0, [pc, #4]	; (80098e8 <__malloc_unlock+0x8>)
 80098e2:	f000 bc04 	b.w	800a0ee <__retarget_lock_release_recursive>
 80098e6:	bf00      	nop
 80098e8:	200004d8 	.word	0x200004d8

080098ec <_realloc_r>:
 80098ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098ee:	4607      	mov	r7, r0
 80098f0:	4614      	mov	r4, r2
 80098f2:	460e      	mov	r6, r1
 80098f4:	b921      	cbnz	r1, 8009900 <_realloc_r+0x14>
 80098f6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80098fa:	4611      	mov	r1, r2
 80098fc:	f7ff bdb2 	b.w	8009464 <_malloc_r>
 8009900:	b922      	cbnz	r2, 800990c <_realloc_r+0x20>
 8009902:	f7ff fd5f 	bl	80093c4 <_free_r>
 8009906:	4625      	mov	r5, r4
 8009908:	4628      	mov	r0, r5
 800990a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800990c:	f000 fc54 	bl	800a1b8 <_malloc_usable_size_r>
 8009910:	42a0      	cmp	r0, r4
 8009912:	d20f      	bcs.n	8009934 <_realloc_r+0x48>
 8009914:	4621      	mov	r1, r4
 8009916:	4638      	mov	r0, r7
 8009918:	f7ff fda4 	bl	8009464 <_malloc_r>
 800991c:	4605      	mov	r5, r0
 800991e:	2800      	cmp	r0, #0
 8009920:	d0f2      	beq.n	8009908 <_realloc_r+0x1c>
 8009922:	4631      	mov	r1, r6
 8009924:	4622      	mov	r2, r4
 8009926:	f7ff f875 	bl	8008a14 <memcpy>
 800992a:	4631      	mov	r1, r6
 800992c:	4638      	mov	r0, r7
 800992e:	f7ff fd49 	bl	80093c4 <_free_r>
 8009932:	e7e9      	b.n	8009908 <_realloc_r+0x1c>
 8009934:	4635      	mov	r5, r6
 8009936:	e7e7      	b.n	8009908 <_realloc_r+0x1c>

08009938 <__sfputc_r>:
 8009938:	6893      	ldr	r3, [r2, #8]
 800993a:	3b01      	subs	r3, #1
 800993c:	2b00      	cmp	r3, #0
 800993e:	b410      	push	{r4}
 8009940:	6093      	str	r3, [r2, #8]
 8009942:	da08      	bge.n	8009956 <__sfputc_r+0x1e>
 8009944:	6994      	ldr	r4, [r2, #24]
 8009946:	42a3      	cmp	r3, r4
 8009948:	db01      	blt.n	800994e <__sfputc_r+0x16>
 800994a:	290a      	cmp	r1, #10
 800994c:	d103      	bne.n	8009956 <__sfputc_r+0x1e>
 800994e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009952:	f000 b94b 	b.w	8009bec <__swbuf_r>
 8009956:	6813      	ldr	r3, [r2, #0]
 8009958:	1c58      	adds	r0, r3, #1
 800995a:	6010      	str	r0, [r2, #0]
 800995c:	7019      	strb	r1, [r3, #0]
 800995e:	4608      	mov	r0, r1
 8009960:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009964:	4770      	bx	lr

08009966 <__sfputs_r>:
 8009966:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009968:	4606      	mov	r6, r0
 800996a:	460f      	mov	r7, r1
 800996c:	4614      	mov	r4, r2
 800996e:	18d5      	adds	r5, r2, r3
 8009970:	42ac      	cmp	r4, r5
 8009972:	d101      	bne.n	8009978 <__sfputs_r+0x12>
 8009974:	2000      	movs	r0, #0
 8009976:	e007      	b.n	8009988 <__sfputs_r+0x22>
 8009978:	f814 1b01 	ldrb.w	r1, [r4], #1
 800997c:	463a      	mov	r2, r7
 800997e:	4630      	mov	r0, r6
 8009980:	f7ff ffda 	bl	8009938 <__sfputc_r>
 8009984:	1c43      	adds	r3, r0, #1
 8009986:	d1f3      	bne.n	8009970 <__sfputs_r+0xa>
 8009988:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800998c <_vfiprintf_r>:
 800998c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009990:	460d      	mov	r5, r1
 8009992:	b09d      	sub	sp, #116	; 0x74
 8009994:	4614      	mov	r4, r2
 8009996:	4698      	mov	r8, r3
 8009998:	4606      	mov	r6, r0
 800999a:	b118      	cbz	r0, 80099a4 <_vfiprintf_r+0x18>
 800999c:	6983      	ldr	r3, [r0, #24]
 800999e:	b90b      	cbnz	r3, 80099a4 <_vfiprintf_r+0x18>
 80099a0:	f000 fb06 	bl	8009fb0 <__sinit>
 80099a4:	4b89      	ldr	r3, [pc, #548]	; (8009bcc <_vfiprintf_r+0x240>)
 80099a6:	429d      	cmp	r5, r3
 80099a8:	d11b      	bne.n	80099e2 <_vfiprintf_r+0x56>
 80099aa:	6875      	ldr	r5, [r6, #4]
 80099ac:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80099ae:	07d9      	lsls	r1, r3, #31
 80099b0:	d405      	bmi.n	80099be <_vfiprintf_r+0x32>
 80099b2:	89ab      	ldrh	r3, [r5, #12]
 80099b4:	059a      	lsls	r2, r3, #22
 80099b6:	d402      	bmi.n	80099be <_vfiprintf_r+0x32>
 80099b8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80099ba:	f000 fb97 	bl	800a0ec <__retarget_lock_acquire_recursive>
 80099be:	89ab      	ldrh	r3, [r5, #12]
 80099c0:	071b      	lsls	r3, r3, #28
 80099c2:	d501      	bpl.n	80099c8 <_vfiprintf_r+0x3c>
 80099c4:	692b      	ldr	r3, [r5, #16]
 80099c6:	b9eb      	cbnz	r3, 8009a04 <_vfiprintf_r+0x78>
 80099c8:	4629      	mov	r1, r5
 80099ca:	4630      	mov	r0, r6
 80099cc:	f000 f960 	bl	8009c90 <__swsetup_r>
 80099d0:	b1c0      	cbz	r0, 8009a04 <_vfiprintf_r+0x78>
 80099d2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80099d4:	07dc      	lsls	r4, r3, #31
 80099d6:	d50e      	bpl.n	80099f6 <_vfiprintf_r+0x6a>
 80099d8:	f04f 30ff 	mov.w	r0, #4294967295
 80099dc:	b01d      	add	sp, #116	; 0x74
 80099de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099e2:	4b7b      	ldr	r3, [pc, #492]	; (8009bd0 <_vfiprintf_r+0x244>)
 80099e4:	429d      	cmp	r5, r3
 80099e6:	d101      	bne.n	80099ec <_vfiprintf_r+0x60>
 80099e8:	68b5      	ldr	r5, [r6, #8]
 80099ea:	e7df      	b.n	80099ac <_vfiprintf_r+0x20>
 80099ec:	4b79      	ldr	r3, [pc, #484]	; (8009bd4 <_vfiprintf_r+0x248>)
 80099ee:	429d      	cmp	r5, r3
 80099f0:	bf08      	it	eq
 80099f2:	68f5      	ldreq	r5, [r6, #12]
 80099f4:	e7da      	b.n	80099ac <_vfiprintf_r+0x20>
 80099f6:	89ab      	ldrh	r3, [r5, #12]
 80099f8:	0598      	lsls	r0, r3, #22
 80099fa:	d4ed      	bmi.n	80099d8 <_vfiprintf_r+0x4c>
 80099fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80099fe:	f000 fb76 	bl	800a0ee <__retarget_lock_release_recursive>
 8009a02:	e7e9      	b.n	80099d8 <_vfiprintf_r+0x4c>
 8009a04:	2300      	movs	r3, #0
 8009a06:	9309      	str	r3, [sp, #36]	; 0x24
 8009a08:	2320      	movs	r3, #32
 8009a0a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009a0e:	f8cd 800c 	str.w	r8, [sp, #12]
 8009a12:	2330      	movs	r3, #48	; 0x30
 8009a14:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009bd8 <_vfiprintf_r+0x24c>
 8009a18:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009a1c:	f04f 0901 	mov.w	r9, #1
 8009a20:	4623      	mov	r3, r4
 8009a22:	469a      	mov	sl, r3
 8009a24:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009a28:	b10a      	cbz	r2, 8009a2e <_vfiprintf_r+0xa2>
 8009a2a:	2a25      	cmp	r2, #37	; 0x25
 8009a2c:	d1f9      	bne.n	8009a22 <_vfiprintf_r+0x96>
 8009a2e:	ebba 0b04 	subs.w	fp, sl, r4
 8009a32:	d00b      	beq.n	8009a4c <_vfiprintf_r+0xc0>
 8009a34:	465b      	mov	r3, fp
 8009a36:	4622      	mov	r2, r4
 8009a38:	4629      	mov	r1, r5
 8009a3a:	4630      	mov	r0, r6
 8009a3c:	f7ff ff93 	bl	8009966 <__sfputs_r>
 8009a40:	3001      	adds	r0, #1
 8009a42:	f000 80aa 	beq.w	8009b9a <_vfiprintf_r+0x20e>
 8009a46:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009a48:	445a      	add	r2, fp
 8009a4a:	9209      	str	r2, [sp, #36]	; 0x24
 8009a4c:	f89a 3000 	ldrb.w	r3, [sl]
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	f000 80a2 	beq.w	8009b9a <_vfiprintf_r+0x20e>
 8009a56:	2300      	movs	r3, #0
 8009a58:	f04f 32ff 	mov.w	r2, #4294967295
 8009a5c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009a60:	f10a 0a01 	add.w	sl, sl, #1
 8009a64:	9304      	str	r3, [sp, #16]
 8009a66:	9307      	str	r3, [sp, #28]
 8009a68:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009a6c:	931a      	str	r3, [sp, #104]	; 0x68
 8009a6e:	4654      	mov	r4, sl
 8009a70:	2205      	movs	r2, #5
 8009a72:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a76:	4858      	ldr	r0, [pc, #352]	; (8009bd8 <_vfiprintf_r+0x24c>)
 8009a78:	f7f6 fbb2 	bl	80001e0 <memchr>
 8009a7c:	9a04      	ldr	r2, [sp, #16]
 8009a7e:	b9d8      	cbnz	r0, 8009ab8 <_vfiprintf_r+0x12c>
 8009a80:	06d1      	lsls	r1, r2, #27
 8009a82:	bf44      	itt	mi
 8009a84:	2320      	movmi	r3, #32
 8009a86:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009a8a:	0713      	lsls	r3, r2, #28
 8009a8c:	bf44      	itt	mi
 8009a8e:	232b      	movmi	r3, #43	; 0x2b
 8009a90:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009a94:	f89a 3000 	ldrb.w	r3, [sl]
 8009a98:	2b2a      	cmp	r3, #42	; 0x2a
 8009a9a:	d015      	beq.n	8009ac8 <_vfiprintf_r+0x13c>
 8009a9c:	9a07      	ldr	r2, [sp, #28]
 8009a9e:	4654      	mov	r4, sl
 8009aa0:	2000      	movs	r0, #0
 8009aa2:	f04f 0c0a 	mov.w	ip, #10
 8009aa6:	4621      	mov	r1, r4
 8009aa8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009aac:	3b30      	subs	r3, #48	; 0x30
 8009aae:	2b09      	cmp	r3, #9
 8009ab0:	d94e      	bls.n	8009b50 <_vfiprintf_r+0x1c4>
 8009ab2:	b1b0      	cbz	r0, 8009ae2 <_vfiprintf_r+0x156>
 8009ab4:	9207      	str	r2, [sp, #28]
 8009ab6:	e014      	b.n	8009ae2 <_vfiprintf_r+0x156>
 8009ab8:	eba0 0308 	sub.w	r3, r0, r8
 8009abc:	fa09 f303 	lsl.w	r3, r9, r3
 8009ac0:	4313      	orrs	r3, r2
 8009ac2:	9304      	str	r3, [sp, #16]
 8009ac4:	46a2      	mov	sl, r4
 8009ac6:	e7d2      	b.n	8009a6e <_vfiprintf_r+0xe2>
 8009ac8:	9b03      	ldr	r3, [sp, #12]
 8009aca:	1d19      	adds	r1, r3, #4
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	9103      	str	r1, [sp, #12]
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	bfbb      	ittet	lt
 8009ad4:	425b      	neglt	r3, r3
 8009ad6:	f042 0202 	orrlt.w	r2, r2, #2
 8009ada:	9307      	strge	r3, [sp, #28]
 8009adc:	9307      	strlt	r3, [sp, #28]
 8009ade:	bfb8      	it	lt
 8009ae0:	9204      	strlt	r2, [sp, #16]
 8009ae2:	7823      	ldrb	r3, [r4, #0]
 8009ae4:	2b2e      	cmp	r3, #46	; 0x2e
 8009ae6:	d10c      	bne.n	8009b02 <_vfiprintf_r+0x176>
 8009ae8:	7863      	ldrb	r3, [r4, #1]
 8009aea:	2b2a      	cmp	r3, #42	; 0x2a
 8009aec:	d135      	bne.n	8009b5a <_vfiprintf_r+0x1ce>
 8009aee:	9b03      	ldr	r3, [sp, #12]
 8009af0:	1d1a      	adds	r2, r3, #4
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	9203      	str	r2, [sp, #12]
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	bfb8      	it	lt
 8009afa:	f04f 33ff 	movlt.w	r3, #4294967295
 8009afe:	3402      	adds	r4, #2
 8009b00:	9305      	str	r3, [sp, #20]
 8009b02:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009be8 <_vfiprintf_r+0x25c>
 8009b06:	7821      	ldrb	r1, [r4, #0]
 8009b08:	2203      	movs	r2, #3
 8009b0a:	4650      	mov	r0, sl
 8009b0c:	f7f6 fb68 	bl	80001e0 <memchr>
 8009b10:	b140      	cbz	r0, 8009b24 <_vfiprintf_r+0x198>
 8009b12:	2340      	movs	r3, #64	; 0x40
 8009b14:	eba0 000a 	sub.w	r0, r0, sl
 8009b18:	fa03 f000 	lsl.w	r0, r3, r0
 8009b1c:	9b04      	ldr	r3, [sp, #16]
 8009b1e:	4303      	orrs	r3, r0
 8009b20:	3401      	adds	r4, #1
 8009b22:	9304      	str	r3, [sp, #16]
 8009b24:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b28:	482c      	ldr	r0, [pc, #176]	; (8009bdc <_vfiprintf_r+0x250>)
 8009b2a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009b2e:	2206      	movs	r2, #6
 8009b30:	f7f6 fb56 	bl	80001e0 <memchr>
 8009b34:	2800      	cmp	r0, #0
 8009b36:	d03f      	beq.n	8009bb8 <_vfiprintf_r+0x22c>
 8009b38:	4b29      	ldr	r3, [pc, #164]	; (8009be0 <_vfiprintf_r+0x254>)
 8009b3a:	bb1b      	cbnz	r3, 8009b84 <_vfiprintf_r+0x1f8>
 8009b3c:	9b03      	ldr	r3, [sp, #12]
 8009b3e:	3307      	adds	r3, #7
 8009b40:	f023 0307 	bic.w	r3, r3, #7
 8009b44:	3308      	adds	r3, #8
 8009b46:	9303      	str	r3, [sp, #12]
 8009b48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b4a:	443b      	add	r3, r7
 8009b4c:	9309      	str	r3, [sp, #36]	; 0x24
 8009b4e:	e767      	b.n	8009a20 <_vfiprintf_r+0x94>
 8009b50:	fb0c 3202 	mla	r2, ip, r2, r3
 8009b54:	460c      	mov	r4, r1
 8009b56:	2001      	movs	r0, #1
 8009b58:	e7a5      	b.n	8009aa6 <_vfiprintf_r+0x11a>
 8009b5a:	2300      	movs	r3, #0
 8009b5c:	3401      	adds	r4, #1
 8009b5e:	9305      	str	r3, [sp, #20]
 8009b60:	4619      	mov	r1, r3
 8009b62:	f04f 0c0a 	mov.w	ip, #10
 8009b66:	4620      	mov	r0, r4
 8009b68:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009b6c:	3a30      	subs	r2, #48	; 0x30
 8009b6e:	2a09      	cmp	r2, #9
 8009b70:	d903      	bls.n	8009b7a <_vfiprintf_r+0x1ee>
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d0c5      	beq.n	8009b02 <_vfiprintf_r+0x176>
 8009b76:	9105      	str	r1, [sp, #20]
 8009b78:	e7c3      	b.n	8009b02 <_vfiprintf_r+0x176>
 8009b7a:	fb0c 2101 	mla	r1, ip, r1, r2
 8009b7e:	4604      	mov	r4, r0
 8009b80:	2301      	movs	r3, #1
 8009b82:	e7f0      	b.n	8009b66 <_vfiprintf_r+0x1da>
 8009b84:	ab03      	add	r3, sp, #12
 8009b86:	9300      	str	r3, [sp, #0]
 8009b88:	462a      	mov	r2, r5
 8009b8a:	4b16      	ldr	r3, [pc, #88]	; (8009be4 <_vfiprintf_r+0x258>)
 8009b8c:	a904      	add	r1, sp, #16
 8009b8e:	4630      	mov	r0, r6
 8009b90:	f7fc f884 	bl	8005c9c <_printf_float>
 8009b94:	4607      	mov	r7, r0
 8009b96:	1c78      	adds	r0, r7, #1
 8009b98:	d1d6      	bne.n	8009b48 <_vfiprintf_r+0x1bc>
 8009b9a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009b9c:	07d9      	lsls	r1, r3, #31
 8009b9e:	d405      	bmi.n	8009bac <_vfiprintf_r+0x220>
 8009ba0:	89ab      	ldrh	r3, [r5, #12]
 8009ba2:	059a      	lsls	r2, r3, #22
 8009ba4:	d402      	bmi.n	8009bac <_vfiprintf_r+0x220>
 8009ba6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009ba8:	f000 faa1 	bl	800a0ee <__retarget_lock_release_recursive>
 8009bac:	89ab      	ldrh	r3, [r5, #12]
 8009bae:	065b      	lsls	r3, r3, #25
 8009bb0:	f53f af12 	bmi.w	80099d8 <_vfiprintf_r+0x4c>
 8009bb4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009bb6:	e711      	b.n	80099dc <_vfiprintf_r+0x50>
 8009bb8:	ab03      	add	r3, sp, #12
 8009bba:	9300      	str	r3, [sp, #0]
 8009bbc:	462a      	mov	r2, r5
 8009bbe:	4b09      	ldr	r3, [pc, #36]	; (8009be4 <_vfiprintf_r+0x258>)
 8009bc0:	a904      	add	r1, sp, #16
 8009bc2:	4630      	mov	r0, r6
 8009bc4:	f7fc fb0e 	bl	80061e4 <_printf_i>
 8009bc8:	e7e4      	b.n	8009b94 <_vfiprintf_r+0x208>
 8009bca:	bf00      	nop
 8009bcc:	0800be84 	.word	0x0800be84
 8009bd0:	0800bea4 	.word	0x0800bea4
 8009bd4:	0800be64 	.word	0x0800be64
 8009bd8:	0800be14 	.word	0x0800be14
 8009bdc:	0800be1e 	.word	0x0800be1e
 8009be0:	08005c9d 	.word	0x08005c9d
 8009be4:	08009967 	.word	0x08009967
 8009be8:	0800be1a 	.word	0x0800be1a

08009bec <__swbuf_r>:
 8009bec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009bee:	460e      	mov	r6, r1
 8009bf0:	4614      	mov	r4, r2
 8009bf2:	4605      	mov	r5, r0
 8009bf4:	b118      	cbz	r0, 8009bfe <__swbuf_r+0x12>
 8009bf6:	6983      	ldr	r3, [r0, #24]
 8009bf8:	b90b      	cbnz	r3, 8009bfe <__swbuf_r+0x12>
 8009bfa:	f000 f9d9 	bl	8009fb0 <__sinit>
 8009bfe:	4b21      	ldr	r3, [pc, #132]	; (8009c84 <__swbuf_r+0x98>)
 8009c00:	429c      	cmp	r4, r3
 8009c02:	d12b      	bne.n	8009c5c <__swbuf_r+0x70>
 8009c04:	686c      	ldr	r4, [r5, #4]
 8009c06:	69a3      	ldr	r3, [r4, #24]
 8009c08:	60a3      	str	r3, [r4, #8]
 8009c0a:	89a3      	ldrh	r3, [r4, #12]
 8009c0c:	071a      	lsls	r2, r3, #28
 8009c0e:	d52f      	bpl.n	8009c70 <__swbuf_r+0x84>
 8009c10:	6923      	ldr	r3, [r4, #16]
 8009c12:	b36b      	cbz	r3, 8009c70 <__swbuf_r+0x84>
 8009c14:	6923      	ldr	r3, [r4, #16]
 8009c16:	6820      	ldr	r0, [r4, #0]
 8009c18:	1ac0      	subs	r0, r0, r3
 8009c1a:	6963      	ldr	r3, [r4, #20]
 8009c1c:	b2f6      	uxtb	r6, r6
 8009c1e:	4283      	cmp	r3, r0
 8009c20:	4637      	mov	r7, r6
 8009c22:	dc04      	bgt.n	8009c2e <__swbuf_r+0x42>
 8009c24:	4621      	mov	r1, r4
 8009c26:	4628      	mov	r0, r5
 8009c28:	f000 f92e 	bl	8009e88 <_fflush_r>
 8009c2c:	bb30      	cbnz	r0, 8009c7c <__swbuf_r+0x90>
 8009c2e:	68a3      	ldr	r3, [r4, #8]
 8009c30:	3b01      	subs	r3, #1
 8009c32:	60a3      	str	r3, [r4, #8]
 8009c34:	6823      	ldr	r3, [r4, #0]
 8009c36:	1c5a      	adds	r2, r3, #1
 8009c38:	6022      	str	r2, [r4, #0]
 8009c3a:	701e      	strb	r6, [r3, #0]
 8009c3c:	6963      	ldr	r3, [r4, #20]
 8009c3e:	3001      	adds	r0, #1
 8009c40:	4283      	cmp	r3, r0
 8009c42:	d004      	beq.n	8009c4e <__swbuf_r+0x62>
 8009c44:	89a3      	ldrh	r3, [r4, #12]
 8009c46:	07db      	lsls	r3, r3, #31
 8009c48:	d506      	bpl.n	8009c58 <__swbuf_r+0x6c>
 8009c4a:	2e0a      	cmp	r6, #10
 8009c4c:	d104      	bne.n	8009c58 <__swbuf_r+0x6c>
 8009c4e:	4621      	mov	r1, r4
 8009c50:	4628      	mov	r0, r5
 8009c52:	f000 f919 	bl	8009e88 <_fflush_r>
 8009c56:	b988      	cbnz	r0, 8009c7c <__swbuf_r+0x90>
 8009c58:	4638      	mov	r0, r7
 8009c5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009c5c:	4b0a      	ldr	r3, [pc, #40]	; (8009c88 <__swbuf_r+0x9c>)
 8009c5e:	429c      	cmp	r4, r3
 8009c60:	d101      	bne.n	8009c66 <__swbuf_r+0x7a>
 8009c62:	68ac      	ldr	r4, [r5, #8]
 8009c64:	e7cf      	b.n	8009c06 <__swbuf_r+0x1a>
 8009c66:	4b09      	ldr	r3, [pc, #36]	; (8009c8c <__swbuf_r+0xa0>)
 8009c68:	429c      	cmp	r4, r3
 8009c6a:	bf08      	it	eq
 8009c6c:	68ec      	ldreq	r4, [r5, #12]
 8009c6e:	e7ca      	b.n	8009c06 <__swbuf_r+0x1a>
 8009c70:	4621      	mov	r1, r4
 8009c72:	4628      	mov	r0, r5
 8009c74:	f000 f80c 	bl	8009c90 <__swsetup_r>
 8009c78:	2800      	cmp	r0, #0
 8009c7a:	d0cb      	beq.n	8009c14 <__swbuf_r+0x28>
 8009c7c:	f04f 37ff 	mov.w	r7, #4294967295
 8009c80:	e7ea      	b.n	8009c58 <__swbuf_r+0x6c>
 8009c82:	bf00      	nop
 8009c84:	0800be84 	.word	0x0800be84
 8009c88:	0800bea4 	.word	0x0800bea4
 8009c8c:	0800be64 	.word	0x0800be64

08009c90 <__swsetup_r>:
 8009c90:	4b32      	ldr	r3, [pc, #200]	; (8009d5c <__swsetup_r+0xcc>)
 8009c92:	b570      	push	{r4, r5, r6, lr}
 8009c94:	681d      	ldr	r5, [r3, #0]
 8009c96:	4606      	mov	r6, r0
 8009c98:	460c      	mov	r4, r1
 8009c9a:	b125      	cbz	r5, 8009ca6 <__swsetup_r+0x16>
 8009c9c:	69ab      	ldr	r3, [r5, #24]
 8009c9e:	b913      	cbnz	r3, 8009ca6 <__swsetup_r+0x16>
 8009ca0:	4628      	mov	r0, r5
 8009ca2:	f000 f985 	bl	8009fb0 <__sinit>
 8009ca6:	4b2e      	ldr	r3, [pc, #184]	; (8009d60 <__swsetup_r+0xd0>)
 8009ca8:	429c      	cmp	r4, r3
 8009caa:	d10f      	bne.n	8009ccc <__swsetup_r+0x3c>
 8009cac:	686c      	ldr	r4, [r5, #4]
 8009cae:	89a3      	ldrh	r3, [r4, #12]
 8009cb0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009cb4:	0719      	lsls	r1, r3, #28
 8009cb6:	d42c      	bmi.n	8009d12 <__swsetup_r+0x82>
 8009cb8:	06dd      	lsls	r5, r3, #27
 8009cba:	d411      	bmi.n	8009ce0 <__swsetup_r+0x50>
 8009cbc:	2309      	movs	r3, #9
 8009cbe:	6033      	str	r3, [r6, #0]
 8009cc0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009cc4:	81a3      	strh	r3, [r4, #12]
 8009cc6:	f04f 30ff 	mov.w	r0, #4294967295
 8009cca:	e03e      	b.n	8009d4a <__swsetup_r+0xba>
 8009ccc:	4b25      	ldr	r3, [pc, #148]	; (8009d64 <__swsetup_r+0xd4>)
 8009cce:	429c      	cmp	r4, r3
 8009cd0:	d101      	bne.n	8009cd6 <__swsetup_r+0x46>
 8009cd2:	68ac      	ldr	r4, [r5, #8]
 8009cd4:	e7eb      	b.n	8009cae <__swsetup_r+0x1e>
 8009cd6:	4b24      	ldr	r3, [pc, #144]	; (8009d68 <__swsetup_r+0xd8>)
 8009cd8:	429c      	cmp	r4, r3
 8009cda:	bf08      	it	eq
 8009cdc:	68ec      	ldreq	r4, [r5, #12]
 8009cde:	e7e6      	b.n	8009cae <__swsetup_r+0x1e>
 8009ce0:	0758      	lsls	r0, r3, #29
 8009ce2:	d512      	bpl.n	8009d0a <__swsetup_r+0x7a>
 8009ce4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009ce6:	b141      	cbz	r1, 8009cfa <__swsetup_r+0x6a>
 8009ce8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009cec:	4299      	cmp	r1, r3
 8009cee:	d002      	beq.n	8009cf6 <__swsetup_r+0x66>
 8009cf0:	4630      	mov	r0, r6
 8009cf2:	f7ff fb67 	bl	80093c4 <_free_r>
 8009cf6:	2300      	movs	r3, #0
 8009cf8:	6363      	str	r3, [r4, #52]	; 0x34
 8009cfa:	89a3      	ldrh	r3, [r4, #12]
 8009cfc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009d00:	81a3      	strh	r3, [r4, #12]
 8009d02:	2300      	movs	r3, #0
 8009d04:	6063      	str	r3, [r4, #4]
 8009d06:	6923      	ldr	r3, [r4, #16]
 8009d08:	6023      	str	r3, [r4, #0]
 8009d0a:	89a3      	ldrh	r3, [r4, #12]
 8009d0c:	f043 0308 	orr.w	r3, r3, #8
 8009d10:	81a3      	strh	r3, [r4, #12]
 8009d12:	6923      	ldr	r3, [r4, #16]
 8009d14:	b94b      	cbnz	r3, 8009d2a <__swsetup_r+0x9a>
 8009d16:	89a3      	ldrh	r3, [r4, #12]
 8009d18:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009d1c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009d20:	d003      	beq.n	8009d2a <__swsetup_r+0x9a>
 8009d22:	4621      	mov	r1, r4
 8009d24:	4630      	mov	r0, r6
 8009d26:	f000 fa07 	bl	800a138 <__smakebuf_r>
 8009d2a:	89a0      	ldrh	r0, [r4, #12]
 8009d2c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009d30:	f010 0301 	ands.w	r3, r0, #1
 8009d34:	d00a      	beq.n	8009d4c <__swsetup_r+0xbc>
 8009d36:	2300      	movs	r3, #0
 8009d38:	60a3      	str	r3, [r4, #8]
 8009d3a:	6963      	ldr	r3, [r4, #20]
 8009d3c:	425b      	negs	r3, r3
 8009d3e:	61a3      	str	r3, [r4, #24]
 8009d40:	6923      	ldr	r3, [r4, #16]
 8009d42:	b943      	cbnz	r3, 8009d56 <__swsetup_r+0xc6>
 8009d44:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009d48:	d1ba      	bne.n	8009cc0 <__swsetup_r+0x30>
 8009d4a:	bd70      	pop	{r4, r5, r6, pc}
 8009d4c:	0781      	lsls	r1, r0, #30
 8009d4e:	bf58      	it	pl
 8009d50:	6963      	ldrpl	r3, [r4, #20]
 8009d52:	60a3      	str	r3, [r4, #8]
 8009d54:	e7f4      	b.n	8009d40 <__swsetup_r+0xb0>
 8009d56:	2000      	movs	r0, #0
 8009d58:	e7f7      	b.n	8009d4a <__swsetup_r+0xba>
 8009d5a:	bf00      	nop
 8009d5c:	2000001c 	.word	0x2000001c
 8009d60:	0800be84 	.word	0x0800be84
 8009d64:	0800bea4 	.word	0x0800bea4
 8009d68:	0800be64 	.word	0x0800be64

08009d6c <abort>:
 8009d6c:	b508      	push	{r3, lr}
 8009d6e:	2006      	movs	r0, #6
 8009d70:	f000 fa52 	bl	800a218 <raise>
 8009d74:	2001      	movs	r0, #1
 8009d76:	f7f8 f9f5 	bl	8002164 <_exit>
	...

08009d7c <__sflush_r>:
 8009d7c:	898a      	ldrh	r2, [r1, #12]
 8009d7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d82:	4605      	mov	r5, r0
 8009d84:	0710      	lsls	r0, r2, #28
 8009d86:	460c      	mov	r4, r1
 8009d88:	d458      	bmi.n	8009e3c <__sflush_r+0xc0>
 8009d8a:	684b      	ldr	r3, [r1, #4]
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	dc05      	bgt.n	8009d9c <__sflush_r+0x20>
 8009d90:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	dc02      	bgt.n	8009d9c <__sflush_r+0x20>
 8009d96:	2000      	movs	r0, #0
 8009d98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009d9c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009d9e:	2e00      	cmp	r6, #0
 8009da0:	d0f9      	beq.n	8009d96 <__sflush_r+0x1a>
 8009da2:	2300      	movs	r3, #0
 8009da4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009da8:	682f      	ldr	r7, [r5, #0]
 8009daa:	602b      	str	r3, [r5, #0]
 8009dac:	d032      	beq.n	8009e14 <__sflush_r+0x98>
 8009dae:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009db0:	89a3      	ldrh	r3, [r4, #12]
 8009db2:	075a      	lsls	r2, r3, #29
 8009db4:	d505      	bpl.n	8009dc2 <__sflush_r+0x46>
 8009db6:	6863      	ldr	r3, [r4, #4]
 8009db8:	1ac0      	subs	r0, r0, r3
 8009dba:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009dbc:	b10b      	cbz	r3, 8009dc2 <__sflush_r+0x46>
 8009dbe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009dc0:	1ac0      	subs	r0, r0, r3
 8009dc2:	2300      	movs	r3, #0
 8009dc4:	4602      	mov	r2, r0
 8009dc6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009dc8:	6a21      	ldr	r1, [r4, #32]
 8009dca:	4628      	mov	r0, r5
 8009dcc:	47b0      	blx	r6
 8009dce:	1c43      	adds	r3, r0, #1
 8009dd0:	89a3      	ldrh	r3, [r4, #12]
 8009dd2:	d106      	bne.n	8009de2 <__sflush_r+0x66>
 8009dd4:	6829      	ldr	r1, [r5, #0]
 8009dd6:	291d      	cmp	r1, #29
 8009dd8:	d82c      	bhi.n	8009e34 <__sflush_r+0xb8>
 8009dda:	4a2a      	ldr	r2, [pc, #168]	; (8009e84 <__sflush_r+0x108>)
 8009ddc:	40ca      	lsrs	r2, r1
 8009dde:	07d6      	lsls	r6, r2, #31
 8009de0:	d528      	bpl.n	8009e34 <__sflush_r+0xb8>
 8009de2:	2200      	movs	r2, #0
 8009de4:	6062      	str	r2, [r4, #4]
 8009de6:	04d9      	lsls	r1, r3, #19
 8009de8:	6922      	ldr	r2, [r4, #16]
 8009dea:	6022      	str	r2, [r4, #0]
 8009dec:	d504      	bpl.n	8009df8 <__sflush_r+0x7c>
 8009dee:	1c42      	adds	r2, r0, #1
 8009df0:	d101      	bne.n	8009df6 <__sflush_r+0x7a>
 8009df2:	682b      	ldr	r3, [r5, #0]
 8009df4:	b903      	cbnz	r3, 8009df8 <__sflush_r+0x7c>
 8009df6:	6560      	str	r0, [r4, #84]	; 0x54
 8009df8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009dfa:	602f      	str	r7, [r5, #0]
 8009dfc:	2900      	cmp	r1, #0
 8009dfe:	d0ca      	beq.n	8009d96 <__sflush_r+0x1a>
 8009e00:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009e04:	4299      	cmp	r1, r3
 8009e06:	d002      	beq.n	8009e0e <__sflush_r+0x92>
 8009e08:	4628      	mov	r0, r5
 8009e0a:	f7ff fadb 	bl	80093c4 <_free_r>
 8009e0e:	2000      	movs	r0, #0
 8009e10:	6360      	str	r0, [r4, #52]	; 0x34
 8009e12:	e7c1      	b.n	8009d98 <__sflush_r+0x1c>
 8009e14:	6a21      	ldr	r1, [r4, #32]
 8009e16:	2301      	movs	r3, #1
 8009e18:	4628      	mov	r0, r5
 8009e1a:	47b0      	blx	r6
 8009e1c:	1c41      	adds	r1, r0, #1
 8009e1e:	d1c7      	bne.n	8009db0 <__sflush_r+0x34>
 8009e20:	682b      	ldr	r3, [r5, #0]
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d0c4      	beq.n	8009db0 <__sflush_r+0x34>
 8009e26:	2b1d      	cmp	r3, #29
 8009e28:	d001      	beq.n	8009e2e <__sflush_r+0xb2>
 8009e2a:	2b16      	cmp	r3, #22
 8009e2c:	d101      	bne.n	8009e32 <__sflush_r+0xb6>
 8009e2e:	602f      	str	r7, [r5, #0]
 8009e30:	e7b1      	b.n	8009d96 <__sflush_r+0x1a>
 8009e32:	89a3      	ldrh	r3, [r4, #12]
 8009e34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009e38:	81a3      	strh	r3, [r4, #12]
 8009e3a:	e7ad      	b.n	8009d98 <__sflush_r+0x1c>
 8009e3c:	690f      	ldr	r7, [r1, #16]
 8009e3e:	2f00      	cmp	r7, #0
 8009e40:	d0a9      	beq.n	8009d96 <__sflush_r+0x1a>
 8009e42:	0793      	lsls	r3, r2, #30
 8009e44:	680e      	ldr	r6, [r1, #0]
 8009e46:	bf08      	it	eq
 8009e48:	694b      	ldreq	r3, [r1, #20]
 8009e4a:	600f      	str	r7, [r1, #0]
 8009e4c:	bf18      	it	ne
 8009e4e:	2300      	movne	r3, #0
 8009e50:	eba6 0807 	sub.w	r8, r6, r7
 8009e54:	608b      	str	r3, [r1, #8]
 8009e56:	f1b8 0f00 	cmp.w	r8, #0
 8009e5a:	dd9c      	ble.n	8009d96 <__sflush_r+0x1a>
 8009e5c:	6a21      	ldr	r1, [r4, #32]
 8009e5e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009e60:	4643      	mov	r3, r8
 8009e62:	463a      	mov	r2, r7
 8009e64:	4628      	mov	r0, r5
 8009e66:	47b0      	blx	r6
 8009e68:	2800      	cmp	r0, #0
 8009e6a:	dc06      	bgt.n	8009e7a <__sflush_r+0xfe>
 8009e6c:	89a3      	ldrh	r3, [r4, #12]
 8009e6e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009e72:	81a3      	strh	r3, [r4, #12]
 8009e74:	f04f 30ff 	mov.w	r0, #4294967295
 8009e78:	e78e      	b.n	8009d98 <__sflush_r+0x1c>
 8009e7a:	4407      	add	r7, r0
 8009e7c:	eba8 0800 	sub.w	r8, r8, r0
 8009e80:	e7e9      	b.n	8009e56 <__sflush_r+0xda>
 8009e82:	bf00      	nop
 8009e84:	20400001 	.word	0x20400001

08009e88 <_fflush_r>:
 8009e88:	b538      	push	{r3, r4, r5, lr}
 8009e8a:	690b      	ldr	r3, [r1, #16]
 8009e8c:	4605      	mov	r5, r0
 8009e8e:	460c      	mov	r4, r1
 8009e90:	b913      	cbnz	r3, 8009e98 <_fflush_r+0x10>
 8009e92:	2500      	movs	r5, #0
 8009e94:	4628      	mov	r0, r5
 8009e96:	bd38      	pop	{r3, r4, r5, pc}
 8009e98:	b118      	cbz	r0, 8009ea2 <_fflush_r+0x1a>
 8009e9a:	6983      	ldr	r3, [r0, #24]
 8009e9c:	b90b      	cbnz	r3, 8009ea2 <_fflush_r+0x1a>
 8009e9e:	f000 f887 	bl	8009fb0 <__sinit>
 8009ea2:	4b14      	ldr	r3, [pc, #80]	; (8009ef4 <_fflush_r+0x6c>)
 8009ea4:	429c      	cmp	r4, r3
 8009ea6:	d11b      	bne.n	8009ee0 <_fflush_r+0x58>
 8009ea8:	686c      	ldr	r4, [r5, #4]
 8009eaa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d0ef      	beq.n	8009e92 <_fflush_r+0xa>
 8009eb2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009eb4:	07d0      	lsls	r0, r2, #31
 8009eb6:	d404      	bmi.n	8009ec2 <_fflush_r+0x3a>
 8009eb8:	0599      	lsls	r1, r3, #22
 8009eba:	d402      	bmi.n	8009ec2 <_fflush_r+0x3a>
 8009ebc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009ebe:	f000 f915 	bl	800a0ec <__retarget_lock_acquire_recursive>
 8009ec2:	4628      	mov	r0, r5
 8009ec4:	4621      	mov	r1, r4
 8009ec6:	f7ff ff59 	bl	8009d7c <__sflush_r>
 8009eca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009ecc:	07da      	lsls	r2, r3, #31
 8009ece:	4605      	mov	r5, r0
 8009ed0:	d4e0      	bmi.n	8009e94 <_fflush_r+0xc>
 8009ed2:	89a3      	ldrh	r3, [r4, #12]
 8009ed4:	059b      	lsls	r3, r3, #22
 8009ed6:	d4dd      	bmi.n	8009e94 <_fflush_r+0xc>
 8009ed8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009eda:	f000 f908 	bl	800a0ee <__retarget_lock_release_recursive>
 8009ede:	e7d9      	b.n	8009e94 <_fflush_r+0xc>
 8009ee0:	4b05      	ldr	r3, [pc, #20]	; (8009ef8 <_fflush_r+0x70>)
 8009ee2:	429c      	cmp	r4, r3
 8009ee4:	d101      	bne.n	8009eea <_fflush_r+0x62>
 8009ee6:	68ac      	ldr	r4, [r5, #8]
 8009ee8:	e7df      	b.n	8009eaa <_fflush_r+0x22>
 8009eea:	4b04      	ldr	r3, [pc, #16]	; (8009efc <_fflush_r+0x74>)
 8009eec:	429c      	cmp	r4, r3
 8009eee:	bf08      	it	eq
 8009ef0:	68ec      	ldreq	r4, [r5, #12]
 8009ef2:	e7da      	b.n	8009eaa <_fflush_r+0x22>
 8009ef4:	0800be84 	.word	0x0800be84
 8009ef8:	0800bea4 	.word	0x0800bea4
 8009efc:	0800be64 	.word	0x0800be64

08009f00 <std>:
 8009f00:	2300      	movs	r3, #0
 8009f02:	b510      	push	{r4, lr}
 8009f04:	4604      	mov	r4, r0
 8009f06:	e9c0 3300 	strd	r3, r3, [r0]
 8009f0a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009f0e:	6083      	str	r3, [r0, #8]
 8009f10:	8181      	strh	r1, [r0, #12]
 8009f12:	6643      	str	r3, [r0, #100]	; 0x64
 8009f14:	81c2      	strh	r2, [r0, #14]
 8009f16:	6183      	str	r3, [r0, #24]
 8009f18:	4619      	mov	r1, r3
 8009f1a:	2208      	movs	r2, #8
 8009f1c:	305c      	adds	r0, #92	; 0x5c
 8009f1e:	f7fb fe15 	bl	8005b4c <memset>
 8009f22:	4b05      	ldr	r3, [pc, #20]	; (8009f38 <std+0x38>)
 8009f24:	6263      	str	r3, [r4, #36]	; 0x24
 8009f26:	4b05      	ldr	r3, [pc, #20]	; (8009f3c <std+0x3c>)
 8009f28:	62a3      	str	r3, [r4, #40]	; 0x28
 8009f2a:	4b05      	ldr	r3, [pc, #20]	; (8009f40 <std+0x40>)
 8009f2c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009f2e:	4b05      	ldr	r3, [pc, #20]	; (8009f44 <std+0x44>)
 8009f30:	6224      	str	r4, [r4, #32]
 8009f32:	6323      	str	r3, [r4, #48]	; 0x30
 8009f34:	bd10      	pop	{r4, pc}
 8009f36:	bf00      	nop
 8009f38:	0800a251 	.word	0x0800a251
 8009f3c:	0800a273 	.word	0x0800a273
 8009f40:	0800a2ab 	.word	0x0800a2ab
 8009f44:	0800a2cf 	.word	0x0800a2cf

08009f48 <_cleanup_r>:
 8009f48:	4901      	ldr	r1, [pc, #4]	; (8009f50 <_cleanup_r+0x8>)
 8009f4a:	f000 b8af 	b.w	800a0ac <_fwalk_reent>
 8009f4e:	bf00      	nop
 8009f50:	08009e89 	.word	0x08009e89

08009f54 <__sfmoreglue>:
 8009f54:	b570      	push	{r4, r5, r6, lr}
 8009f56:	1e4a      	subs	r2, r1, #1
 8009f58:	2568      	movs	r5, #104	; 0x68
 8009f5a:	4355      	muls	r5, r2
 8009f5c:	460e      	mov	r6, r1
 8009f5e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009f62:	f7ff fa7f 	bl	8009464 <_malloc_r>
 8009f66:	4604      	mov	r4, r0
 8009f68:	b140      	cbz	r0, 8009f7c <__sfmoreglue+0x28>
 8009f6a:	2100      	movs	r1, #0
 8009f6c:	e9c0 1600 	strd	r1, r6, [r0]
 8009f70:	300c      	adds	r0, #12
 8009f72:	60a0      	str	r0, [r4, #8]
 8009f74:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009f78:	f7fb fde8 	bl	8005b4c <memset>
 8009f7c:	4620      	mov	r0, r4
 8009f7e:	bd70      	pop	{r4, r5, r6, pc}

08009f80 <__sfp_lock_acquire>:
 8009f80:	4801      	ldr	r0, [pc, #4]	; (8009f88 <__sfp_lock_acquire+0x8>)
 8009f82:	f000 b8b3 	b.w	800a0ec <__retarget_lock_acquire_recursive>
 8009f86:	bf00      	nop
 8009f88:	200004dc 	.word	0x200004dc

08009f8c <__sfp_lock_release>:
 8009f8c:	4801      	ldr	r0, [pc, #4]	; (8009f94 <__sfp_lock_release+0x8>)
 8009f8e:	f000 b8ae 	b.w	800a0ee <__retarget_lock_release_recursive>
 8009f92:	bf00      	nop
 8009f94:	200004dc 	.word	0x200004dc

08009f98 <__sinit_lock_acquire>:
 8009f98:	4801      	ldr	r0, [pc, #4]	; (8009fa0 <__sinit_lock_acquire+0x8>)
 8009f9a:	f000 b8a7 	b.w	800a0ec <__retarget_lock_acquire_recursive>
 8009f9e:	bf00      	nop
 8009fa0:	200004d7 	.word	0x200004d7

08009fa4 <__sinit_lock_release>:
 8009fa4:	4801      	ldr	r0, [pc, #4]	; (8009fac <__sinit_lock_release+0x8>)
 8009fa6:	f000 b8a2 	b.w	800a0ee <__retarget_lock_release_recursive>
 8009faa:	bf00      	nop
 8009fac:	200004d7 	.word	0x200004d7

08009fb0 <__sinit>:
 8009fb0:	b510      	push	{r4, lr}
 8009fb2:	4604      	mov	r4, r0
 8009fb4:	f7ff fff0 	bl	8009f98 <__sinit_lock_acquire>
 8009fb8:	69a3      	ldr	r3, [r4, #24]
 8009fba:	b11b      	cbz	r3, 8009fc4 <__sinit+0x14>
 8009fbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009fc0:	f7ff bff0 	b.w	8009fa4 <__sinit_lock_release>
 8009fc4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009fc8:	6523      	str	r3, [r4, #80]	; 0x50
 8009fca:	4b13      	ldr	r3, [pc, #76]	; (800a018 <__sinit+0x68>)
 8009fcc:	4a13      	ldr	r2, [pc, #76]	; (800a01c <__sinit+0x6c>)
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	62a2      	str	r2, [r4, #40]	; 0x28
 8009fd2:	42a3      	cmp	r3, r4
 8009fd4:	bf04      	itt	eq
 8009fd6:	2301      	moveq	r3, #1
 8009fd8:	61a3      	streq	r3, [r4, #24]
 8009fda:	4620      	mov	r0, r4
 8009fdc:	f000 f820 	bl	800a020 <__sfp>
 8009fe0:	6060      	str	r0, [r4, #4]
 8009fe2:	4620      	mov	r0, r4
 8009fe4:	f000 f81c 	bl	800a020 <__sfp>
 8009fe8:	60a0      	str	r0, [r4, #8]
 8009fea:	4620      	mov	r0, r4
 8009fec:	f000 f818 	bl	800a020 <__sfp>
 8009ff0:	2200      	movs	r2, #0
 8009ff2:	60e0      	str	r0, [r4, #12]
 8009ff4:	2104      	movs	r1, #4
 8009ff6:	6860      	ldr	r0, [r4, #4]
 8009ff8:	f7ff ff82 	bl	8009f00 <std>
 8009ffc:	68a0      	ldr	r0, [r4, #8]
 8009ffe:	2201      	movs	r2, #1
 800a000:	2109      	movs	r1, #9
 800a002:	f7ff ff7d 	bl	8009f00 <std>
 800a006:	68e0      	ldr	r0, [r4, #12]
 800a008:	2202      	movs	r2, #2
 800a00a:	2112      	movs	r1, #18
 800a00c:	f7ff ff78 	bl	8009f00 <std>
 800a010:	2301      	movs	r3, #1
 800a012:	61a3      	str	r3, [r4, #24]
 800a014:	e7d2      	b.n	8009fbc <__sinit+0xc>
 800a016:	bf00      	nop
 800a018:	0800ba0c 	.word	0x0800ba0c
 800a01c:	08009f49 	.word	0x08009f49

0800a020 <__sfp>:
 800a020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a022:	4607      	mov	r7, r0
 800a024:	f7ff ffac 	bl	8009f80 <__sfp_lock_acquire>
 800a028:	4b1e      	ldr	r3, [pc, #120]	; (800a0a4 <__sfp+0x84>)
 800a02a:	681e      	ldr	r6, [r3, #0]
 800a02c:	69b3      	ldr	r3, [r6, #24]
 800a02e:	b913      	cbnz	r3, 800a036 <__sfp+0x16>
 800a030:	4630      	mov	r0, r6
 800a032:	f7ff ffbd 	bl	8009fb0 <__sinit>
 800a036:	3648      	adds	r6, #72	; 0x48
 800a038:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a03c:	3b01      	subs	r3, #1
 800a03e:	d503      	bpl.n	800a048 <__sfp+0x28>
 800a040:	6833      	ldr	r3, [r6, #0]
 800a042:	b30b      	cbz	r3, 800a088 <__sfp+0x68>
 800a044:	6836      	ldr	r6, [r6, #0]
 800a046:	e7f7      	b.n	800a038 <__sfp+0x18>
 800a048:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a04c:	b9d5      	cbnz	r5, 800a084 <__sfp+0x64>
 800a04e:	4b16      	ldr	r3, [pc, #88]	; (800a0a8 <__sfp+0x88>)
 800a050:	60e3      	str	r3, [r4, #12]
 800a052:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a056:	6665      	str	r5, [r4, #100]	; 0x64
 800a058:	f000 f847 	bl	800a0ea <__retarget_lock_init_recursive>
 800a05c:	f7ff ff96 	bl	8009f8c <__sfp_lock_release>
 800a060:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a064:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a068:	6025      	str	r5, [r4, #0]
 800a06a:	61a5      	str	r5, [r4, #24]
 800a06c:	2208      	movs	r2, #8
 800a06e:	4629      	mov	r1, r5
 800a070:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a074:	f7fb fd6a 	bl	8005b4c <memset>
 800a078:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a07c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a080:	4620      	mov	r0, r4
 800a082:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a084:	3468      	adds	r4, #104	; 0x68
 800a086:	e7d9      	b.n	800a03c <__sfp+0x1c>
 800a088:	2104      	movs	r1, #4
 800a08a:	4638      	mov	r0, r7
 800a08c:	f7ff ff62 	bl	8009f54 <__sfmoreglue>
 800a090:	4604      	mov	r4, r0
 800a092:	6030      	str	r0, [r6, #0]
 800a094:	2800      	cmp	r0, #0
 800a096:	d1d5      	bne.n	800a044 <__sfp+0x24>
 800a098:	f7ff ff78 	bl	8009f8c <__sfp_lock_release>
 800a09c:	230c      	movs	r3, #12
 800a09e:	603b      	str	r3, [r7, #0]
 800a0a0:	e7ee      	b.n	800a080 <__sfp+0x60>
 800a0a2:	bf00      	nop
 800a0a4:	0800ba0c 	.word	0x0800ba0c
 800a0a8:	ffff0001 	.word	0xffff0001

0800a0ac <_fwalk_reent>:
 800a0ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a0b0:	4606      	mov	r6, r0
 800a0b2:	4688      	mov	r8, r1
 800a0b4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a0b8:	2700      	movs	r7, #0
 800a0ba:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a0be:	f1b9 0901 	subs.w	r9, r9, #1
 800a0c2:	d505      	bpl.n	800a0d0 <_fwalk_reent+0x24>
 800a0c4:	6824      	ldr	r4, [r4, #0]
 800a0c6:	2c00      	cmp	r4, #0
 800a0c8:	d1f7      	bne.n	800a0ba <_fwalk_reent+0xe>
 800a0ca:	4638      	mov	r0, r7
 800a0cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a0d0:	89ab      	ldrh	r3, [r5, #12]
 800a0d2:	2b01      	cmp	r3, #1
 800a0d4:	d907      	bls.n	800a0e6 <_fwalk_reent+0x3a>
 800a0d6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a0da:	3301      	adds	r3, #1
 800a0dc:	d003      	beq.n	800a0e6 <_fwalk_reent+0x3a>
 800a0de:	4629      	mov	r1, r5
 800a0e0:	4630      	mov	r0, r6
 800a0e2:	47c0      	blx	r8
 800a0e4:	4307      	orrs	r7, r0
 800a0e6:	3568      	adds	r5, #104	; 0x68
 800a0e8:	e7e9      	b.n	800a0be <_fwalk_reent+0x12>

0800a0ea <__retarget_lock_init_recursive>:
 800a0ea:	4770      	bx	lr

0800a0ec <__retarget_lock_acquire_recursive>:
 800a0ec:	4770      	bx	lr

0800a0ee <__retarget_lock_release_recursive>:
 800a0ee:	4770      	bx	lr

0800a0f0 <__swhatbuf_r>:
 800a0f0:	b570      	push	{r4, r5, r6, lr}
 800a0f2:	460e      	mov	r6, r1
 800a0f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a0f8:	2900      	cmp	r1, #0
 800a0fa:	b096      	sub	sp, #88	; 0x58
 800a0fc:	4614      	mov	r4, r2
 800a0fe:	461d      	mov	r5, r3
 800a100:	da07      	bge.n	800a112 <__swhatbuf_r+0x22>
 800a102:	2300      	movs	r3, #0
 800a104:	602b      	str	r3, [r5, #0]
 800a106:	89b3      	ldrh	r3, [r6, #12]
 800a108:	061a      	lsls	r2, r3, #24
 800a10a:	d410      	bmi.n	800a12e <__swhatbuf_r+0x3e>
 800a10c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a110:	e00e      	b.n	800a130 <__swhatbuf_r+0x40>
 800a112:	466a      	mov	r2, sp
 800a114:	f000 f902 	bl	800a31c <_fstat_r>
 800a118:	2800      	cmp	r0, #0
 800a11a:	dbf2      	blt.n	800a102 <__swhatbuf_r+0x12>
 800a11c:	9a01      	ldr	r2, [sp, #4]
 800a11e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a122:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a126:	425a      	negs	r2, r3
 800a128:	415a      	adcs	r2, r3
 800a12a:	602a      	str	r2, [r5, #0]
 800a12c:	e7ee      	b.n	800a10c <__swhatbuf_r+0x1c>
 800a12e:	2340      	movs	r3, #64	; 0x40
 800a130:	2000      	movs	r0, #0
 800a132:	6023      	str	r3, [r4, #0]
 800a134:	b016      	add	sp, #88	; 0x58
 800a136:	bd70      	pop	{r4, r5, r6, pc}

0800a138 <__smakebuf_r>:
 800a138:	898b      	ldrh	r3, [r1, #12]
 800a13a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a13c:	079d      	lsls	r5, r3, #30
 800a13e:	4606      	mov	r6, r0
 800a140:	460c      	mov	r4, r1
 800a142:	d507      	bpl.n	800a154 <__smakebuf_r+0x1c>
 800a144:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a148:	6023      	str	r3, [r4, #0]
 800a14a:	6123      	str	r3, [r4, #16]
 800a14c:	2301      	movs	r3, #1
 800a14e:	6163      	str	r3, [r4, #20]
 800a150:	b002      	add	sp, #8
 800a152:	bd70      	pop	{r4, r5, r6, pc}
 800a154:	ab01      	add	r3, sp, #4
 800a156:	466a      	mov	r2, sp
 800a158:	f7ff ffca 	bl	800a0f0 <__swhatbuf_r>
 800a15c:	9900      	ldr	r1, [sp, #0]
 800a15e:	4605      	mov	r5, r0
 800a160:	4630      	mov	r0, r6
 800a162:	f7ff f97f 	bl	8009464 <_malloc_r>
 800a166:	b948      	cbnz	r0, 800a17c <__smakebuf_r+0x44>
 800a168:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a16c:	059a      	lsls	r2, r3, #22
 800a16e:	d4ef      	bmi.n	800a150 <__smakebuf_r+0x18>
 800a170:	f023 0303 	bic.w	r3, r3, #3
 800a174:	f043 0302 	orr.w	r3, r3, #2
 800a178:	81a3      	strh	r3, [r4, #12]
 800a17a:	e7e3      	b.n	800a144 <__smakebuf_r+0xc>
 800a17c:	4b0d      	ldr	r3, [pc, #52]	; (800a1b4 <__smakebuf_r+0x7c>)
 800a17e:	62b3      	str	r3, [r6, #40]	; 0x28
 800a180:	89a3      	ldrh	r3, [r4, #12]
 800a182:	6020      	str	r0, [r4, #0]
 800a184:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a188:	81a3      	strh	r3, [r4, #12]
 800a18a:	9b00      	ldr	r3, [sp, #0]
 800a18c:	6163      	str	r3, [r4, #20]
 800a18e:	9b01      	ldr	r3, [sp, #4]
 800a190:	6120      	str	r0, [r4, #16]
 800a192:	b15b      	cbz	r3, 800a1ac <__smakebuf_r+0x74>
 800a194:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a198:	4630      	mov	r0, r6
 800a19a:	f000 f8d1 	bl	800a340 <_isatty_r>
 800a19e:	b128      	cbz	r0, 800a1ac <__smakebuf_r+0x74>
 800a1a0:	89a3      	ldrh	r3, [r4, #12]
 800a1a2:	f023 0303 	bic.w	r3, r3, #3
 800a1a6:	f043 0301 	orr.w	r3, r3, #1
 800a1aa:	81a3      	strh	r3, [r4, #12]
 800a1ac:	89a0      	ldrh	r0, [r4, #12]
 800a1ae:	4305      	orrs	r5, r0
 800a1b0:	81a5      	strh	r5, [r4, #12]
 800a1b2:	e7cd      	b.n	800a150 <__smakebuf_r+0x18>
 800a1b4:	08009f49 	.word	0x08009f49

0800a1b8 <_malloc_usable_size_r>:
 800a1b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a1bc:	1f18      	subs	r0, r3, #4
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	bfbc      	itt	lt
 800a1c2:	580b      	ldrlt	r3, [r1, r0]
 800a1c4:	18c0      	addlt	r0, r0, r3
 800a1c6:	4770      	bx	lr

0800a1c8 <_raise_r>:
 800a1c8:	291f      	cmp	r1, #31
 800a1ca:	b538      	push	{r3, r4, r5, lr}
 800a1cc:	4604      	mov	r4, r0
 800a1ce:	460d      	mov	r5, r1
 800a1d0:	d904      	bls.n	800a1dc <_raise_r+0x14>
 800a1d2:	2316      	movs	r3, #22
 800a1d4:	6003      	str	r3, [r0, #0]
 800a1d6:	f04f 30ff 	mov.w	r0, #4294967295
 800a1da:	bd38      	pop	{r3, r4, r5, pc}
 800a1dc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a1de:	b112      	cbz	r2, 800a1e6 <_raise_r+0x1e>
 800a1e0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a1e4:	b94b      	cbnz	r3, 800a1fa <_raise_r+0x32>
 800a1e6:	4620      	mov	r0, r4
 800a1e8:	f000 f830 	bl	800a24c <_getpid_r>
 800a1ec:	462a      	mov	r2, r5
 800a1ee:	4601      	mov	r1, r0
 800a1f0:	4620      	mov	r0, r4
 800a1f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a1f6:	f000 b817 	b.w	800a228 <_kill_r>
 800a1fa:	2b01      	cmp	r3, #1
 800a1fc:	d00a      	beq.n	800a214 <_raise_r+0x4c>
 800a1fe:	1c59      	adds	r1, r3, #1
 800a200:	d103      	bne.n	800a20a <_raise_r+0x42>
 800a202:	2316      	movs	r3, #22
 800a204:	6003      	str	r3, [r0, #0]
 800a206:	2001      	movs	r0, #1
 800a208:	e7e7      	b.n	800a1da <_raise_r+0x12>
 800a20a:	2400      	movs	r4, #0
 800a20c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a210:	4628      	mov	r0, r5
 800a212:	4798      	blx	r3
 800a214:	2000      	movs	r0, #0
 800a216:	e7e0      	b.n	800a1da <_raise_r+0x12>

0800a218 <raise>:
 800a218:	4b02      	ldr	r3, [pc, #8]	; (800a224 <raise+0xc>)
 800a21a:	4601      	mov	r1, r0
 800a21c:	6818      	ldr	r0, [r3, #0]
 800a21e:	f7ff bfd3 	b.w	800a1c8 <_raise_r>
 800a222:	bf00      	nop
 800a224:	2000001c 	.word	0x2000001c

0800a228 <_kill_r>:
 800a228:	b538      	push	{r3, r4, r5, lr}
 800a22a:	4d07      	ldr	r5, [pc, #28]	; (800a248 <_kill_r+0x20>)
 800a22c:	2300      	movs	r3, #0
 800a22e:	4604      	mov	r4, r0
 800a230:	4608      	mov	r0, r1
 800a232:	4611      	mov	r1, r2
 800a234:	602b      	str	r3, [r5, #0]
 800a236:	f7f7 ff85 	bl	8002144 <_kill>
 800a23a:	1c43      	adds	r3, r0, #1
 800a23c:	d102      	bne.n	800a244 <_kill_r+0x1c>
 800a23e:	682b      	ldr	r3, [r5, #0]
 800a240:	b103      	cbz	r3, 800a244 <_kill_r+0x1c>
 800a242:	6023      	str	r3, [r4, #0]
 800a244:	bd38      	pop	{r3, r4, r5, pc}
 800a246:	bf00      	nop
 800a248:	200004d0 	.word	0x200004d0

0800a24c <_getpid_r>:
 800a24c:	f7f7 bf72 	b.w	8002134 <_getpid>

0800a250 <__sread>:
 800a250:	b510      	push	{r4, lr}
 800a252:	460c      	mov	r4, r1
 800a254:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a258:	f000 f894 	bl	800a384 <_read_r>
 800a25c:	2800      	cmp	r0, #0
 800a25e:	bfab      	itete	ge
 800a260:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a262:	89a3      	ldrhlt	r3, [r4, #12]
 800a264:	181b      	addge	r3, r3, r0
 800a266:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a26a:	bfac      	ite	ge
 800a26c:	6563      	strge	r3, [r4, #84]	; 0x54
 800a26e:	81a3      	strhlt	r3, [r4, #12]
 800a270:	bd10      	pop	{r4, pc}

0800a272 <__swrite>:
 800a272:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a276:	461f      	mov	r7, r3
 800a278:	898b      	ldrh	r3, [r1, #12]
 800a27a:	05db      	lsls	r3, r3, #23
 800a27c:	4605      	mov	r5, r0
 800a27e:	460c      	mov	r4, r1
 800a280:	4616      	mov	r6, r2
 800a282:	d505      	bpl.n	800a290 <__swrite+0x1e>
 800a284:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a288:	2302      	movs	r3, #2
 800a28a:	2200      	movs	r2, #0
 800a28c:	f000 f868 	bl	800a360 <_lseek_r>
 800a290:	89a3      	ldrh	r3, [r4, #12]
 800a292:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a296:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a29a:	81a3      	strh	r3, [r4, #12]
 800a29c:	4632      	mov	r2, r6
 800a29e:	463b      	mov	r3, r7
 800a2a0:	4628      	mov	r0, r5
 800a2a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a2a6:	f000 b817 	b.w	800a2d8 <_write_r>

0800a2aa <__sseek>:
 800a2aa:	b510      	push	{r4, lr}
 800a2ac:	460c      	mov	r4, r1
 800a2ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a2b2:	f000 f855 	bl	800a360 <_lseek_r>
 800a2b6:	1c43      	adds	r3, r0, #1
 800a2b8:	89a3      	ldrh	r3, [r4, #12]
 800a2ba:	bf15      	itete	ne
 800a2bc:	6560      	strne	r0, [r4, #84]	; 0x54
 800a2be:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a2c2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a2c6:	81a3      	strheq	r3, [r4, #12]
 800a2c8:	bf18      	it	ne
 800a2ca:	81a3      	strhne	r3, [r4, #12]
 800a2cc:	bd10      	pop	{r4, pc}

0800a2ce <__sclose>:
 800a2ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a2d2:	f000 b813 	b.w	800a2fc <_close_r>
	...

0800a2d8 <_write_r>:
 800a2d8:	b538      	push	{r3, r4, r5, lr}
 800a2da:	4d07      	ldr	r5, [pc, #28]	; (800a2f8 <_write_r+0x20>)
 800a2dc:	4604      	mov	r4, r0
 800a2de:	4608      	mov	r0, r1
 800a2e0:	4611      	mov	r1, r2
 800a2e2:	2200      	movs	r2, #0
 800a2e4:	602a      	str	r2, [r5, #0]
 800a2e6:	461a      	mov	r2, r3
 800a2e8:	f7f7 ff63 	bl	80021b2 <_write>
 800a2ec:	1c43      	adds	r3, r0, #1
 800a2ee:	d102      	bne.n	800a2f6 <_write_r+0x1e>
 800a2f0:	682b      	ldr	r3, [r5, #0]
 800a2f2:	b103      	cbz	r3, 800a2f6 <_write_r+0x1e>
 800a2f4:	6023      	str	r3, [r4, #0]
 800a2f6:	bd38      	pop	{r3, r4, r5, pc}
 800a2f8:	200004d0 	.word	0x200004d0

0800a2fc <_close_r>:
 800a2fc:	b538      	push	{r3, r4, r5, lr}
 800a2fe:	4d06      	ldr	r5, [pc, #24]	; (800a318 <_close_r+0x1c>)
 800a300:	2300      	movs	r3, #0
 800a302:	4604      	mov	r4, r0
 800a304:	4608      	mov	r0, r1
 800a306:	602b      	str	r3, [r5, #0]
 800a308:	f7f7 ff6f 	bl	80021ea <_close>
 800a30c:	1c43      	adds	r3, r0, #1
 800a30e:	d102      	bne.n	800a316 <_close_r+0x1a>
 800a310:	682b      	ldr	r3, [r5, #0]
 800a312:	b103      	cbz	r3, 800a316 <_close_r+0x1a>
 800a314:	6023      	str	r3, [r4, #0]
 800a316:	bd38      	pop	{r3, r4, r5, pc}
 800a318:	200004d0 	.word	0x200004d0

0800a31c <_fstat_r>:
 800a31c:	b538      	push	{r3, r4, r5, lr}
 800a31e:	4d07      	ldr	r5, [pc, #28]	; (800a33c <_fstat_r+0x20>)
 800a320:	2300      	movs	r3, #0
 800a322:	4604      	mov	r4, r0
 800a324:	4608      	mov	r0, r1
 800a326:	4611      	mov	r1, r2
 800a328:	602b      	str	r3, [r5, #0]
 800a32a:	f7f7 ff6a 	bl	8002202 <_fstat>
 800a32e:	1c43      	adds	r3, r0, #1
 800a330:	d102      	bne.n	800a338 <_fstat_r+0x1c>
 800a332:	682b      	ldr	r3, [r5, #0]
 800a334:	b103      	cbz	r3, 800a338 <_fstat_r+0x1c>
 800a336:	6023      	str	r3, [r4, #0]
 800a338:	bd38      	pop	{r3, r4, r5, pc}
 800a33a:	bf00      	nop
 800a33c:	200004d0 	.word	0x200004d0

0800a340 <_isatty_r>:
 800a340:	b538      	push	{r3, r4, r5, lr}
 800a342:	4d06      	ldr	r5, [pc, #24]	; (800a35c <_isatty_r+0x1c>)
 800a344:	2300      	movs	r3, #0
 800a346:	4604      	mov	r4, r0
 800a348:	4608      	mov	r0, r1
 800a34a:	602b      	str	r3, [r5, #0]
 800a34c:	f7f7 ff69 	bl	8002222 <_isatty>
 800a350:	1c43      	adds	r3, r0, #1
 800a352:	d102      	bne.n	800a35a <_isatty_r+0x1a>
 800a354:	682b      	ldr	r3, [r5, #0]
 800a356:	b103      	cbz	r3, 800a35a <_isatty_r+0x1a>
 800a358:	6023      	str	r3, [r4, #0]
 800a35a:	bd38      	pop	{r3, r4, r5, pc}
 800a35c:	200004d0 	.word	0x200004d0

0800a360 <_lseek_r>:
 800a360:	b538      	push	{r3, r4, r5, lr}
 800a362:	4d07      	ldr	r5, [pc, #28]	; (800a380 <_lseek_r+0x20>)
 800a364:	4604      	mov	r4, r0
 800a366:	4608      	mov	r0, r1
 800a368:	4611      	mov	r1, r2
 800a36a:	2200      	movs	r2, #0
 800a36c:	602a      	str	r2, [r5, #0]
 800a36e:	461a      	mov	r2, r3
 800a370:	f7f7 ff62 	bl	8002238 <_lseek>
 800a374:	1c43      	adds	r3, r0, #1
 800a376:	d102      	bne.n	800a37e <_lseek_r+0x1e>
 800a378:	682b      	ldr	r3, [r5, #0]
 800a37a:	b103      	cbz	r3, 800a37e <_lseek_r+0x1e>
 800a37c:	6023      	str	r3, [r4, #0]
 800a37e:	bd38      	pop	{r3, r4, r5, pc}
 800a380:	200004d0 	.word	0x200004d0

0800a384 <_read_r>:
 800a384:	b538      	push	{r3, r4, r5, lr}
 800a386:	4d07      	ldr	r5, [pc, #28]	; (800a3a4 <_read_r+0x20>)
 800a388:	4604      	mov	r4, r0
 800a38a:	4608      	mov	r0, r1
 800a38c:	4611      	mov	r1, r2
 800a38e:	2200      	movs	r2, #0
 800a390:	602a      	str	r2, [r5, #0]
 800a392:	461a      	mov	r2, r3
 800a394:	f7f7 fef0 	bl	8002178 <_read>
 800a398:	1c43      	adds	r3, r0, #1
 800a39a:	d102      	bne.n	800a3a2 <_read_r+0x1e>
 800a39c:	682b      	ldr	r3, [r5, #0]
 800a39e:	b103      	cbz	r3, 800a3a2 <_read_r+0x1e>
 800a3a0:	6023      	str	r3, [r4, #0]
 800a3a2:	bd38      	pop	{r3, r4, r5, pc}
 800a3a4:	200004d0 	.word	0x200004d0

0800a3a8 <_init>:
 800a3a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3aa:	bf00      	nop
 800a3ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a3ae:	bc08      	pop	{r3}
 800a3b0:	469e      	mov	lr, r3
 800a3b2:	4770      	bx	lr

0800a3b4 <_fini>:
 800a3b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3b6:	bf00      	nop
 800a3b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a3ba:	bc08      	pop	{r3}
 800a3bc:	469e      	mov	lr, r3
 800a3be:	4770      	bx	lr
