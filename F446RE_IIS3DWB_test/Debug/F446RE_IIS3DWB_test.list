
F446RE_IIS3DWB_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001efc  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  080020c0  080020c0  000120c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080020e4  080020e4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080020e4  080020e4  000120e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080020ec  080020ec  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080020ec  080020ec  000120ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080020f0  080020f0  000120f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080020f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000064  2000000c  08002100  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000070  08002100  00020070  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008f69  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000014db  00000000  00000000  00028fa5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000680  00000000  00000000  0002a480  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000608  00000000  00000000  0002ab00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020c10  00000000  00000000  0002b108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000089dc  00000000  00000000  0004bd18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c8200  00000000  00000000  000546f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0011c8f4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001988  00000000  00000000  0011c948  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080020a8 	.word	0x080020a8

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	080020a8 	.word	0x080020a8

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b96e 	b.w	80004f8 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	468c      	mov	ip, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	f040 8083 	bne.w	800034a <__udivmoddi4+0x116>
 8000244:	428a      	cmp	r2, r1
 8000246:	4617      	mov	r7, r2
 8000248:	d947      	bls.n	80002da <__udivmoddi4+0xa6>
 800024a:	fab2 f282 	clz	r2, r2
 800024e:	b142      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 8000250:	f1c2 0020 	rsb	r0, r2, #32
 8000254:	fa24 f000 	lsr.w	r0, r4, r0
 8000258:	4091      	lsls	r1, r2
 800025a:	4097      	lsls	r7, r2
 800025c:	ea40 0c01 	orr.w	ip, r0, r1
 8000260:	4094      	lsls	r4, r2
 8000262:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000266:	0c23      	lsrs	r3, r4, #16
 8000268:	fbbc f6f8 	udiv	r6, ip, r8
 800026c:	fa1f fe87 	uxth.w	lr, r7
 8000270:	fb08 c116 	mls	r1, r8, r6, ip
 8000274:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000278:	fb06 f10e 	mul.w	r1, r6, lr
 800027c:	4299      	cmp	r1, r3
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x60>
 8000280:	18fb      	adds	r3, r7, r3
 8000282:	f106 30ff 	add.w	r0, r6, #4294967295
 8000286:	f080 8119 	bcs.w	80004bc <__udivmoddi4+0x288>
 800028a:	4299      	cmp	r1, r3
 800028c:	f240 8116 	bls.w	80004bc <__udivmoddi4+0x288>
 8000290:	3e02      	subs	r6, #2
 8000292:	443b      	add	r3, r7
 8000294:	1a5b      	subs	r3, r3, r1
 8000296:	b2a4      	uxth	r4, r4
 8000298:	fbb3 f0f8 	udiv	r0, r3, r8
 800029c:	fb08 3310 	mls	r3, r8, r0, r3
 80002a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a4:	fb00 fe0e 	mul.w	lr, r0, lr
 80002a8:	45a6      	cmp	lr, r4
 80002aa:	d909      	bls.n	80002c0 <__udivmoddi4+0x8c>
 80002ac:	193c      	adds	r4, r7, r4
 80002ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b2:	f080 8105 	bcs.w	80004c0 <__udivmoddi4+0x28c>
 80002b6:	45a6      	cmp	lr, r4
 80002b8:	f240 8102 	bls.w	80004c0 <__udivmoddi4+0x28c>
 80002bc:	3802      	subs	r0, #2
 80002be:	443c      	add	r4, r7
 80002c0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002c4:	eba4 040e 	sub.w	r4, r4, lr
 80002c8:	2600      	movs	r6, #0
 80002ca:	b11d      	cbz	r5, 80002d4 <__udivmoddi4+0xa0>
 80002cc:	40d4      	lsrs	r4, r2
 80002ce:	2300      	movs	r3, #0
 80002d0:	e9c5 4300 	strd	r4, r3, [r5]
 80002d4:	4631      	mov	r1, r6
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xaa>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f282 	clz	r2, r2
 80002e2:	2a00      	cmp	r2, #0
 80002e4:	d150      	bne.n	8000388 <__udivmoddi4+0x154>
 80002e6:	1bcb      	subs	r3, r1, r7
 80002e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ec:	fa1f f887 	uxth.w	r8, r7
 80002f0:	2601      	movs	r6, #1
 80002f2:	fbb3 fcfe 	udiv	ip, r3, lr
 80002f6:	0c21      	lsrs	r1, r4, #16
 80002f8:	fb0e 331c 	mls	r3, lr, ip, r3
 80002fc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000300:	fb08 f30c 	mul.w	r3, r8, ip
 8000304:	428b      	cmp	r3, r1
 8000306:	d907      	bls.n	8000318 <__udivmoddi4+0xe4>
 8000308:	1879      	adds	r1, r7, r1
 800030a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800030e:	d202      	bcs.n	8000316 <__udivmoddi4+0xe2>
 8000310:	428b      	cmp	r3, r1
 8000312:	f200 80e9 	bhi.w	80004e8 <__udivmoddi4+0x2b4>
 8000316:	4684      	mov	ip, r0
 8000318:	1ac9      	subs	r1, r1, r3
 800031a:	b2a3      	uxth	r3, r4
 800031c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000320:	fb0e 1110 	mls	r1, lr, r0, r1
 8000324:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000328:	fb08 f800 	mul.w	r8, r8, r0
 800032c:	45a0      	cmp	r8, r4
 800032e:	d907      	bls.n	8000340 <__udivmoddi4+0x10c>
 8000330:	193c      	adds	r4, r7, r4
 8000332:	f100 33ff 	add.w	r3, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x10a>
 8000338:	45a0      	cmp	r8, r4
 800033a:	f200 80d9 	bhi.w	80004f0 <__udivmoddi4+0x2bc>
 800033e:	4618      	mov	r0, r3
 8000340:	eba4 0408 	sub.w	r4, r4, r8
 8000344:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000348:	e7bf      	b.n	80002ca <__udivmoddi4+0x96>
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0x12e>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80b1 	beq.w	80004b6 <__udivmoddi4+0x282>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x1cc>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0x140>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80b8 	bhi.w	80004e4 <__udivmoddi4+0x2b0>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0103 	sbc.w	r1, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	468c      	mov	ip, r1
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0a8      	beq.n	80002d4 <__udivmoddi4+0xa0>
 8000382:	e9c5 4c00 	strd	r4, ip, [r5]
 8000386:	e7a5      	b.n	80002d4 <__udivmoddi4+0xa0>
 8000388:	f1c2 0320 	rsb	r3, r2, #32
 800038c:	fa20 f603 	lsr.w	r6, r0, r3
 8000390:	4097      	lsls	r7, r2
 8000392:	fa01 f002 	lsl.w	r0, r1, r2
 8000396:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800039a:	40d9      	lsrs	r1, r3
 800039c:	4330      	orrs	r0, r6
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	fbb1 f6fe 	udiv	r6, r1, lr
 80003a4:	fa1f f887 	uxth.w	r8, r7
 80003a8:	fb0e 1116 	mls	r1, lr, r6, r1
 80003ac:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003b0:	fb06 f108 	mul.w	r1, r6, r8
 80003b4:	4299      	cmp	r1, r3
 80003b6:	fa04 f402 	lsl.w	r4, r4, r2
 80003ba:	d909      	bls.n	80003d0 <__udivmoddi4+0x19c>
 80003bc:	18fb      	adds	r3, r7, r3
 80003be:	f106 3cff 	add.w	ip, r6, #4294967295
 80003c2:	f080 808d 	bcs.w	80004e0 <__udivmoddi4+0x2ac>
 80003c6:	4299      	cmp	r1, r3
 80003c8:	f240 808a 	bls.w	80004e0 <__udivmoddi4+0x2ac>
 80003cc:	3e02      	subs	r6, #2
 80003ce:	443b      	add	r3, r7
 80003d0:	1a5b      	subs	r3, r3, r1
 80003d2:	b281      	uxth	r1, r0
 80003d4:	fbb3 f0fe 	udiv	r0, r3, lr
 80003d8:	fb0e 3310 	mls	r3, lr, r0, r3
 80003dc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003e0:	fb00 f308 	mul.w	r3, r0, r8
 80003e4:	428b      	cmp	r3, r1
 80003e6:	d907      	bls.n	80003f8 <__udivmoddi4+0x1c4>
 80003e8:	1879      	adds	r1, r7, r1
 80003ea:	f100 3cff 	add.w	ip, r0, #4294967295
 80003ee:	d273      	bcs.n	80004d8 <__udivmoddi4+0x2a4>
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d971      	bls.n	80004d8 <__udivmoddi4+0x2a4>
 80003f4:	3802      	subs	r0, #2
 80003f6:	4439      	add	r1, r7
 80003f8:	1acb      	subs	r3, r1, r3
 80003fa:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003fe:	e778      	b.n	80002f2 <__udivmoddi4+0xbe>
 8000400:	f1c6 0c20 	rsb	ip, r6, #32
 8000404:	fa03 f406 	lsl.w	r4, r3, r6
 8000408:	fa22 f30c 	lsr.w	r3, r2, ip
 800040c:	431c      	orrs	r4, r3
 800040e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800041a:	fa21 f10c 	lsr.w	r1, r1, ip
 800041e:	431f      	orrs	r7, r3
 8000420:	0c3b      	lsrs	r3, r7, #16
 8000422:	fbb1 f9fe 	udiv	r9, r1, lr
 8000426:	fa1f f884 	uxth.w	r8, r4
 800042a:	fb0e 1119 	mls	r1, lr, r9, r1
 800042e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000432:	fb09 fa08 	mul.w	sl, r9, r8
 8000436:	458a      	cmp	sl, r1
 8000438:	fa02 f206 	lsl.w	r2, r2, r6
 800043c:	fa00 f306 	lsl.w	r3, r0, r6
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x220>
 8000442:	1861      	adds	r1, r4, r1
 8000444:	f109 30ff 	add.w	r0, r9, #4294967295
 8000448:	d248      	bcs.n	80004dc <__udivmoddi4+0x2a8>
 800044a:	458a      	cmp	sl, r1
 800044c:	d946      	bls.n	80004dc <__udivmoddi4+0x2a8>
 800044e:	f1a9 0902 	sub.w	r9, r9, #2
 8000452:	4421      	add	r1, r4
 8000454:	eba1 010a 	sub.w	r1, r1, sl
 8000458:	b2bf      	uxth	r7, r7
 800045a:	fbb1 f0fe 	udiv	r0, r1, lr
 800045e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000462:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000466:	fb00 f808 	mul.w	r8, r0, r8
 800046a:	45b8      	cmp	r8, r7
 800046c:	d907      	bls.n	800047e <__udivmoddi4+0x24a>
 800046e:	19e7      	adds	r7, r4, r7
 8000470:	f100 31ff 	add.w	r1, r0, #4294967295
 8000474:	d22e      	bcs.n	80004d4 <__udivmoddi4+0x2a0>
 8000476:	45b8      	cmp	r8, r7
 8000478:	d92c      	bls.n	80004d4 <__udivmoddi4+0x2a0>
 800047a:	3802      	subs	r0, #2
 800047c:	4427      	add	r7, r4
 800047e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000482:	eba7 0708 	sub.w	r7, r7, r8
 8000486:	fba0 8902 	umull	r8, r9, r0, r2
 800048a:	454f      	cmp	r7, r9
 800048c:	46c6      	mov	lr, r8
 800048e:	4649      	mov	r1, r9
 8000490:	d31a      	bcc.n	80004c8 <__udivmoddi4+0x294>
 8000492:	d017      	beq.n	80004c4 <__udivmoddi4+0x290>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x27a>
 8000496:	ebb3 020e 	subs.w	r2, r3, lr
 800049a:	eb67 0701 	sbc.w	r7, r7, r1
 800049e:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004a2:	40f2      	lsrs	r2, r6
 80004a4:	ea4c 0202 	orr.w	r2, ip, r2
 80004a8:	40f7      	lsrs	r7, r6
 80004aa:	e9c5 2700 	strd	r2, r7, [r5]
 80004ae:	2600      	movs	r6, #0
 80004b0:	4631      	mov	r1, r6
 80004b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b6:	462e      	mov	r6, r5
 80004b8:	4628      	mov	r0, r5
 80004ba:	e70b      	b.n	80002d4 <__udivmoddi4+0xa0>
 80004bc:	4606      	mov	r6, r0
 80004be:	e6e9      	b.n	8000294 <__udivmoddi4+0x60>
 80004c0:	4618      	mov	r0, r3
 80004c2:	e6fd      	b.n	80002c0 <__udivmoddi4+0x8c>
 80004c4:	4543      	cmp	r3, r8
 80004c6:	d2e5      	bcs.n	8000494 <__udivmoddi4+0x260>
 80004c8:	ebb8 0e02 	subs.w	lr, r8, r2
 80004cc:	eb69 0104 	sbc.w	r1, r9, r4
 80004d0:	3801      	subs	r0, #1
 80004d2:	e7df      	b.n	8000494 <__udivmoddi4+0x260>
 80004d4:	4608      	mov	r0, r1
 80004d6:	e7d2      	b.n	800047e <__udivmoddi4+0x24a>
 80004d8:	4660      	mov	r0, ip
 80004da:	e78d      	b.n	80003f8 <__udivmoddi4+0x1c4>
 80004dc:	4681      	mov	r9, r0
 80004de:	e7b9      	b.n	8000454 <__udivmoddi4+0x220>
 80004e0:	4666      	mov	r6, ip
 80004e2:	e775      	b.n	80003d0 <__udivmoddi4+0x19c>
 80004e4:	4630      	mov	r0, r6
 80004e6:	e74a      	b.n	800037e <__udivmoddi4+0x14a>
 80004e8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004ec:	4439      	add	r1, r7
 80004ee:	e713      	b.n	8000318 <__udivmoddi4+0xe4>
 80004f0:	3802      	subs	r0, #2
 80004f2:	443c      	add	r4, r7
 80004f4:	e724      	b.n	8000340 <__udivmoddi4+0x10c>
 80004f6:	bf00      	nop

080004f8 <__aeabi_idiv0>:
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop

080004fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000500:	f000 f9fc 	bl	80008fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000504:	f000 f818 	bl	8000538 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000508:	f000 f8ae 	bl	8000668 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800050c:	f000 f882 	bl	8000614 <MX_USART2_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (HAL_UART_Transmit(&huart2, "TEST ...\n\r", 8, 100) != HAL_OK)
 8000510:	2364      	movs	r3, #100	; 0x64
 8000512:	2208      	movs	r2, #8
 8000514:	4906      	ldr	r1, [pc, #24]	; (8000530 <main+0x34>)
 8000516:	4807      	ldr	r0, [pc, #28]	; (8000534 <main+0x38>)
 8000518:	f001 fad1 	bl	8001abe <HAL_UART_Transmit>
 800051c:	4603      	mov	r3, r0
 800051e:	2b00      	cmp	r3, #0
 8000520:	d001      	beq.n	8000526 <main+0x2a>
			  Error_Handler();
 8000522:	f000 f90f 	bl	8000744 <Error_Handler>

	  HAL_Delay(1000);
 8000526:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800052a:	f000 fa59 	bl	80009e0 <HAL_Delay>
	  if (HAL_UART_Transmit(&huart2, "TEST ...\n\r", 8, 100) != HAL_OK)
 800052e:	e7ef      	b.n	8000510 <main+0x14>
 8000530:	080020c0 	.word	0x080020c0
 8000534:	20000028 	.word	0x20000028

08000538 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b094      	sub	sp, #80	; 0x50
 800053c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800053e:	f107 031c 	add.w	r3, r7, #28
 8000542:	2234      	movs	r2, #52	; 0x34
 8000544:	2100      	movs	r1, #0
 8000546:	4618      	mov	r0, r3
 8000548:	f001 fda6 	bl	8002098 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800054c:	f107 0308 	add.w	r3, r7, #8
 8000550:	2200      	movs	r2, #0
 8000552:	601a      	str	r2, [r3, #0]
 8000554:	605a      	str	r2, [r3, #4]
 8000556:	609a      	str	r2, [r3, #8]
 8000558:	60da      	str	r2, [r3, #12]
 800055a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800055c:	2300      	movs	r3, #0
 800055e:	607b      	str	r3, [r7, #4]
 8000560:	4b2a      	ldr	r3, [pc, #168]	; (800060c <SystemClock_Config+0xd4>)
 8000562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000564:	4a29      	ldr	r2, [pc, #164]	; (800060c <SystemClock_Config+0xd4>)
 8000566:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800056a:	6413      	str	r3, [r2, #64]	; 0x40
 800056c:	4b27      	ldr	r3, [pc, #156]	; (800060c <SystemClock_Config+0xd4>)
 800056e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000570:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000574:	607b      	str	r3, [r7, #4]
 8000576:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000578:	2300      	movs	r3, #0
 800057a:	603b      	str	r3, [r7, #0]
 800057c:	4b24      	ldr	r3, [pc, #144]	; (8000610 <SystemClock_Config+0xd8>)
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000584:	4a22      	ldr	r2, [pc, #136]	; (8000610 <SystemClock_Config+0xd8>)
 8000586:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800058a:	6013      	str	r3, [r2, #0]
 800058c:	4b20      	ldr	r3, [pc, #128]	; (8000610 <SystemClock_Config+0xd8>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000594:	603b      	str	r3, [r7, #0]
 8000596:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000598:	2302      	movs	r3, #2
 800059a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800059c:	2301      	movs	r3, #1
 800059e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005a0:	2310      	movs	r3, #16
 80005a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005a4:	2302      	movs	r3, #2
 80005a6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005a8:	2300      	movs	r3, #0
 80005aa:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80005ac:	2310      	movs	r3, #16
 80005ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80005b0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80005b4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80005b6:	2304      	movs	r3, #4
 80005b8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80005ba:	2302      	movs	r3, #2
 80005bc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80005be:	2302      	movs	r3, #2
 80005c0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005c2:	f107 031c 	add.w	r3, r7, #28
 80005c6:	4618      	mov	r0, r3
 80005c8:	f000 ff8e 	bl	80014e8 <HAL_RCC_OscConfig>
 80005cc:	4603      	mov	r3, r0
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d001      	beq.n	80005d6 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80005d2:	f000 f8b7 	bl	8000744 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005d6:	230f      	movs	r3, #15
 80005d8:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005da:	2302      	movs	r3, #2
 80005dc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005de:	2300      	movs	r3, #0
 80005e0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005e6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005e8:	2300      	movs	r3, #0
 80005ea:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005ec:	f107 0308 	add.w	r3, r7, #8
 80005f0:	2102      	movs	r1, #2
 80005f2:	4618      	mov	r0, r3
 80005f4:	f000 fcac 	bl	8000f50 <HAL_RCC_ClockConfig>
 80005f8:	4603      	mov	r3, r0
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d001      	beq.n	8000602 <SystemClock_Config+0xca>
  {
    Error_Handler();
 80005fe:	f000 f8a1 	bl	8000744 <Error_Handler>
  }
}
 8000602:	bf00      	nop
 8000604:	3750      	adds	r7, #80	; 0x50
 8000606:	46bd      	mov	sp, r7
 8000608:	bd80      	pop	{r7, pc}
 800060a:	bf00      	nop
 800060c:	40023800 	.word	0x40023800
 8000610:	40007000 	.word	0x40007000

08000614 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000618:	4b11      	ldr	r3, [pc, #68]	; (8000660 <MX_USART2_UART_Init+0x4c>)
 800061a:	4a12      	ldr	r2, [pc, #72]	; (8000664 <MX_USART2_UART_Init+0x50>)
 800061c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800061e:	4b10      	ldr	r3, [pc, #64]	; (8000660 <MX_USART2_UART_Init+0x4c>)
 8000620:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000624:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000626:	4b0e      	ldr	r3, [pc, #56]	; (8000660 <MX_USART2_UART_Init+0x4c>)
 8000628:	2200      	movs	r2, #0
 800062a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800062c:	4b0c      	ldr	r3, [pc, #48]	; (8000660 <MX_USART2_UART_Init+0x4c>)
 800062e:	2200      	movs	r2, #0
 8000630:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8000632:	4b0b      	ldr	r3, [pc, #44]	; (8000660 <MX_USART2_UART_Init+0x4c>)
 8000634:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000638:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800063a:	4b09      	ldr	r3, [pc, #36]	; (8000660 <MX_USART2_UART_Init+0x4c>)
 800063c:	220c      	movs	r2, #12
 800063e:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000640:	4b07      	ldr	r3, [pc, #28]	; (8000660 <MX_USART2_UART_Init+0x4c>)
 8000642:	2200      	movs	r2, #0
 8000644:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000646:	4b06      	ldr	r3, [pc, #24]	; (8000660 <MX_USART2_UART_Init+0x4c>)
 8000648:	2200      	movs	r2, #0
 800064a:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800064c:	4804      	ldr	r0, [pc, #16]	; (8000660 <MX_USART2_UART_Init+0x4c>)
 800064e:	f001 f9e9 	bl	8001a24 <HAL_UART_Init>
 8000652:	4603      	mov	r3, r0
 8000654:	2b00      	cmp	r3, #0
 8000656:	d001      	beq.n	800065c <MX_USART2_UART_Init+0x48>
  {
    Error_Handler();
 8000658:	f000 f874 	bl	8000744 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800065c:	bf00      	nop
 800065e:	bd80      	pop	{r7, pc}
 8000660:	20000028 	.word	0x20000028
 8000664:	40004400 	.word	0x40004400

08000668 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b08a      	sub	sp, #40	; 0x28
 800066c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800066e:	f107 0314 	add.w	r3, r7, #20
 8000672:	2200      	movs	r2, #0
 8000674:	601a      	str	r2, [r3, #0]
 8000676:	605a      	str	r2, [r3, #4]
 8000678:	609a      	str	r2, [r3, #8]
 800067a:	60da      	str	r2, [r3, #12]
 800067c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800067e:	2300      	movs	r3, #0
 8000680:	613b      	str	r3, [r7, #16]
 8000682:	4b2d      	ldr	r3, [pc, #180]	; (8000738 <MX_GPIO_Init+0xd0>)
 8000684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000686:	4a2c      	ldr	r2, [pc, #176]	; (8000738 <MX_GPIO_Init+0xd0>)
 8000688:	f043 0304 	orr.w	r3, r3, #4
 800068c:	6313      	str	r3, [r2, #48]	; 0x30
 800068e:	4b2a      	ldr	r3, [pc, #168]	; (8000738 <MX_GPIO_Init+0xd0>)
 8000690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000692:	f003 0304 	and.w	r3, r3, #4
 8000696:	613b      	str	r3, [r7, #16]
 8000698:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800069a:	2300      	movs	r3, #0
 800069c:	60fb      	str	r3, [r7, #12]
 800069e:	4b26      	ldr	r3, [pc, #152]	; (8000738 <MX_GPIO_Init+0xd0>)
 80006a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a2:	4a25      	ldr	r2, [pc, #148]	; (8000738 <MX_GPIO_Init+0xd0>)
 80006a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006a8:	6313      	str	r3, [r2, #48]	; 0x30
 80006aa:	4b23      	ldr	r3, [pc, #140]	; (8000738 <MX_GPIO_Init+0xd0>)
 80006ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006b2:	60fb      	str	r3, [r7, #12]
 80006b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006b6:	2300      	movs	r3, #0
 80006b8:	60bb      	str	r3, [r7, #8]
 80006ba:	4b1f      	ldr	r3, [pc, #124]	; (8000738 <MX_GPIO_Init+0xd0>)
 80006bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006be:	4a1e      	ldr	r2, [pc, #120]	; (8000738 <MX_GPIO_Init+0xd0>)
 80006c0:	f043 0301 	orr.w	r3, r3, #1
 80006c4:	6313      	str	r3, [r2, #48]	; 0x30
 80006c6:	4b1c      	ldr	r3, [pc, #112]	; (8000738 <MX_GPIO_Init+0xd0>)
 80006c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ca:	f003 0301 	and.w	r3, r3, #1
 80006ce:	60bb      	str	r3, [r7, #8]
 80006d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006d2:	2300      	movs	r3, #0
 80006d4:	607b      	str	r3, [r7, #4]
 80006d6:	4b18      	ldr	r3, [pc, #96]	; (8000738 <MX_GPIO_Init+0xd0>)
 80006d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006da:	4a17      	ldr	r2, [pc, #92]	; (8000738 <MX_GPIO_Init+0xd0>)
 80006dc:	f043 0302 	orr.w	r3, r3, #2
 80006e0:	6313      	str	r3, [r2, #48]	; 0x30
 80006e2:	4b15      	ldr	r3, [pc, #84]	; (8000738 <MX_GPIO_Init+0xd0>)
 80006e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e6:	f003 0302 	and.w	r3, r3, #2
 80006ea:	607b      	str	r3, [r7, #4]
 80006ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80006ee:	2200      	movs	r2, #0
 80006f0:	2120      	movs	r1, #32
 80006f2:	4812      	ldr	r0, [pc, #72]	; (800073c <MX_GPIO_Init+0xd4>)
 80006f4:	f000 fc12 	bl	8000f1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80006f8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80006fe:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000702:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000704:	2300      	movs	r3, #0
 8000706:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000708:	f107 0314 	add.w	r3, r7, #20
 800070c:	4619      	mov	r1, r3
 800070e:	480c      	ldr	r0, [pc, #48]	; (8000740 <MX_GPIO_Init+0xd8>)
 8000710:	f000 fa70 	bl	8000bf4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000714:	2320      	movs	r3, #32
 8000716:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000718:	2301      	movs	r3, #1
 800071a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800071c:	2300      	movs	r3, #0
 800071e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000720:	2300      	movs	r3, #0
 8000722:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000724:	f107 0314 	add.w	r3, r7, #20
 8000728:	4619      	mov	r1, r3
 800072a:	4804      	ldr	r0, [pc, #16]	; (800073c <MX_GPIO_Init+0xd4>)
 800072c:	f000 fa62 	bl	8000bf4 <HAL_GPIO_Init>

}
 8000730:	bf00      	nop
 8000732:	3728      	adds	r7, #40	; 0x28
 8000734:	46bd      	mov	sp, r7
 8000736:	bd80      	pop	{r7, pc}
 8000738:	40023800 	.word	0x40023800
 800073c:	40020000 	.word	0x40020000
 8000740:	40020800 	.word	0x40020800

08000744 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000744:	b480      	push	{r7}
 8000746:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000748:	b672      	cpsid	i
}
 800074a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800074c:	e7fe      	b.n	800074c <Error_Handler+0x8>
	...

08000750 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b082      	sub	sp, #8
 8000754:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000756:	2300      	movs	r3, #0
 8000758:	607b      	str	r3, [r7, #4]
 800075a:	4b10      	ldr	r3, [pc, #64]	; (800079c <HAL_MspInit+0x4c>)
 800075c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800075e:	4a0f      	ldr	r2, [pc, #60]	; (800079c <HAL_MspInit+0x4c>)
 8000760:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000764:	6453      	str	r3, [r2, #68]	; 0x44
 8000766:	4b0d      	ldr	r3, [pc, #52]	; (800079c <HAL_MspInit+0x4c>)
 8000768:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800076a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800076e:	607b      	str	r3, [r7, #4]
 8000770:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000772:	2300      	movs	r3, #0
 8000774:	603b      	str	r3, [r7, #0]
 8000776:	4b09      	ldr	r3, [pc, #36]	; (800079c <HAL_MspInit+0x4c>)
 8000778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800077a:	4a08      	ldr	r2, [pc, #32]	; (800079c <HAL_MspInit+0x4c>)
 800077c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000780:	6413      	str	r3, [r2, #64]	; 0x40
 8000782:	4b06      	ldr	r3, [pc, #24]	; (800079c <HAL_MspInit+0x4c>)
 8000784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000786:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800078a:	603b      	str	r3, [r7, #0]
 800078c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800078e:	2007      	movs	r0, #7
 8000790:	f000 f9fc 	bl	8000b8c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000794:	bf00      	nop
 8000796:	3708      	adds	r7, #8
 8000798:	46bd      	mov	sp, r7
 800079a:	bd80      	pop	{r7, pc}
 800079c:	40023800 	.word	0x40023800

080007a0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b08a      	sub	sp, #40	; 0x28
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007a8:	f107 0314 	add.w	r3, r7, #20
 80007ac:	2200      	movs	r2, #0
 80007ae:	601a      	str	r2, [r3, #0]
 80007b0:	605a      	str	r2, [r3, #4]
 80007b2:	609a      	str	r2, [r3, #8]
 80007b4:	60da      	str	r2, [r3, #12]
 80007b6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	4a19      	ldr	r2, [pc, #100]	; (8000824 <HAL_UART_MspInit+0x84>)
 80007be:	4293      	cmp	r3, r2
 80007c0:	d12b      	bne.n	800081a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80007c2:	2300      	movs	r3, #0
 80007c4:	613b      	str	r3, [r7, #16]
 80007c6:	4b18      	ldr	r3, [pc, #96]	; (8000828 <HAL_UART_MspInit+0x88>)
 80007c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007ca:	4a17      	ldr	r2, [pc, #92]	; (8000828 <HAL_UART_MspInit+0x88>)
 80007cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007d0:	6413      	str	r3, [r2, #64]	; 0x40
 80007d2:	4b15      	ldr	r3, [pc, #84]	; (8000828 <HAL_UART_MspInit+0x88>)
 80007d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007da:	613b      	str	r3, [r7, #16]
 80007dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007de:	2300      	movs	r3, #0
 80007e0:	60fb      	str	r3, [r7, #12]
 80007e2:	4b11      	ldr	r3, [pc, #68]	; (8000828 <HAL_UART_MspInit+0x88>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e6:	4a10      	ldr	r2, [pc, #64]	; (8000828 <HAL_UART_MspInit+0x88>)
 80007e8:	f043 0301 	orr.w	r3, r3, #1
 80007ec:	6313      	str	r3, [r2, #48]	; 0x30
 80007ee:	4b0e      	ldr	r3, [pc, #56]	; (8000828 <HAL_UART_MspInit+0x88>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f2:	f003 0301 	and.w	r3, r3, #1
 80007f6:	60fb      	str	r3, [r7, #12]
 80007f8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80007fa:	230c      	movs	r3, #12
 80007fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007fe:	2302      	movs	r3, #2
 8000800:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000802:	2300      	movs	r3, #0
 8000804:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000806:	2303      	movs	r3, #3
 8000808:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800080a:	2307      	movs	r3, #7
 800080c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800080e:	f107 0314 	add.w	r3, r7, #20
 8000812:	4619      	mov	r1, r3
 8000814:	4805      	ldr	r0, [pc, #20]	; (800082c <HAL_UART_MspInit+0x8c>)
 8000816:	f000 f9ed 	bl	8000bf4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800081a:	bf00      	nop
 800081c:	3728      	adds	r7, #40	; 0x28
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	40004400 	.word	0x40004400
 8000828:	40023800 	.word	0x40023800
 800082c:	40020000 	.word	0x40020000

08000830 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000830:	b480      	push	{r7}
 8000832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000834:	e7fe      	b.n	8000834 <NMI_Handler+0x4>

08000836 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000836:	b480      	push	{r7}
 8000838:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800083a:	e7fe      	b.n	800083a <HardFault_Handler+0x4>

0800083c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800083c:	b480      	push	{r7}
 800083e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000840:	e7fe      	b.n	8000840 <MemManage_Handler+0x4>

08000842 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000842:	b480      	push	{r7}
 8000844:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000846:	e7fe      	b.n	8000846 <BusFault_Handler+0x4>

08000848 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000848:	b480      	push	{r7}
 800084a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800084c:	e7fe      	b.n	800084c <UsageFault_Handler+0x4>

0800084e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800084e:	b480      	push	{r7}
 8000850:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000852:	bf00      	nop
 8000854:	46bd      	mov	sp, r7
 8000856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085a:	4770      	bx	lr

0800085c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800085c:	b480      	push	{r7}
 800085e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000860:	bf00      	nop
 8000862:	46bd      	mov	sp, r7
 8000864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000868:	4770      	bx	lr

0800086a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800086a:	b480      	push	{r7}
 800086c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800086e:	bf00      	nop
 8000870:	46bd      	mov	sp, r7
 8000872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000876:	4770      	bx	lr

08000878 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800087c:	f000 f890 	bl	80009a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000880:	bf00      	nop
 8000882:	bd80      	pop	{r7, pc}

08000884 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000884:	b480      	push	{r7}
 8000886:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000888:	4b06      	ldr	r3, [pc, #24]	; (80008a4 <SystemInit+0x20>)
 800088a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800088e:	4a05      	ldr	r2, [pc, #20]	; (80008a4 <SystemInit+0x20>)
 8000890:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000894:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000898:	bf00      	nop
 800089a:	46bd      	mov	sp, r7
 800089c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a0:	4770      	bx	lr
 80008a2:	bf00      	nop
 80008a4:	e000ed00 	.word	0xe000ed00

080008a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80008a8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80008e0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80008ac:	480d      	ldr	r0, [pc, #52]	; (80008e4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80008ae:	490e      	ldr	r1, [pc, #56]	; (80008e8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80008b0:	4a0e      	ldr	r2, [pc, #56]	; (80008ec <LoopFillZerobss+0x1e>)
  movs r3, #0
 80008b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008b4:	e002      	b.n	80008bc <LoopCopyDataInit>

080008b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008ba:	3304      	adds	r3, #4

080008bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008c0:	d3f9      	bcc.n	80008b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008c2:	4a0b      	ldr	r2, [pc, #44]	; (80008f0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80008c4:	4c0b      	ldr	r4, [pc, #44]	; (80008f4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80008c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008c8:	e001      	b.n	80008ce <LoopFillZerobss>

080008ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008cc:	3204      	adds	r2, #4

080008ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008d0:	d3fb      	bcc.n	80008ca <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80008d2:	f7ff ffd7 	bl	8000884 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80008d6:	f001 fbbb 	bl	8002050 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80008da:	f7ff fe0f 	bl	80004fc <main>
  bx  lr    
 80008de:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80008e0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80008e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008e8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80008ec:	080020f4 	.word	0x080020f4
  ldr r2, =_sbss
 80008f0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80008f4:	20000070 	.word	0x20000070

080008f8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80008f8:	e7fe      	b.n	80008f8 <ADC_IRQHandler>
	...

080008fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000900:	4b0e      	ldr	r3, [pc, #56]	; (800093c <HAL_Init+0x40>)
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	4a0d      	ldr	r2, [pc, #52]	; (800093c <HAL_Init+0x40>)
 8000906:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800090a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800090c:	4b0b      	ldr	r3, [pc, #44]	; (800093c <HAL_Init+0x40>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	4a0a      	ldr	r2, [pc, #40]	; (800093c <HAL_Init+0x40>)
 8000912:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000916:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000918:	4b08      	ldr	r3, [pc, #32]	; (800093c <HAL_Init+0x40>)
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	4a07      	ldr	r2, [pc, #28]	; (800093c <HAL_Init+0x40>)
 800091e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000922:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000924:	2003      	movs	r0, #3
 8000926:	f000 f931 	bl	8000b8c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800092a:	2000      	movs	r0, #0
 800092c:	f000 f808 	bl	8000940 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000930:	f7ff ff0e 	bl	8000750 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000934:	2300      	movs	r3, #0
}
 8000936:	4618      	mov	r0, r3
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	40023c00 	.word	0x40023c00

08000940 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b082      	sub	sp, #8
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000948:	4b12      	ldr	r3, [pc, #72]	; (8000994 <HAL_InitTick+0x54>)
 800094a:	681a      	ldr	r2, [r3, #0]
 800094c:	4b12      	ldr	r3, [pc, #72]	; (8000998 <HAL_InitTick+0x58>)
 800094e:	781b      	ldrb	r3, [r3, #0]
 8000950:	4619      	mov	r1, r3
 8000952:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000956:	fbb3 f3f1 	udiv	r3, r3, r1
 800095a:	fbb2 f3f3 	udiv	r3, r2, r3
 800095e:	4618      	mov	r0, r3
 8000960:	f000 f93b 	bl	8000bda <HAL_SYSTICK_Config>
 8000964:	4603      	mov	r3, r0
 8000966:	2b00      	cmp	r3, #0
 8000968:	d001      	beq.n	800096e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800096a:	2301      	movs	r3, #1
 800096c:	e00e      	b.n	800098c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	2b0f      	cmp	r3, #15
 8000972:	d80a      	bhi.n	800098a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000974:	2200      	movs	r2, #0
 8000976:	6879      	ldr	r1, [r7, #4]
 8000978:	f04f 30ff 	mov.w	r0, #4294967295
 800097c:	f000 f911 	bl	8000ba2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000980:	4a06      	ldr	r2, [pc, #24]	; (800099c <HAL_InitTick+0x5c>)
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000986:	2300      	movs	r3, #0
 8000988:	e000      	b.n	800098c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800098a:	2301      	movs	r3, #1
}
 800098c:	4618      	mov	r0, r3
 800098e:	3708      	adds	r7, #8
 8000990:	46bd      	mov	sp, r7
 8000992:	bd80      	pop	{r7, pc}
 8000994:	20000000 	.word	0x20000000
 8000998:	20000008 	.word	0x20000008
 800099c:	20000004 	.word	0x20000004

080009a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009a4:	4b06      	ldr	r3, [pc, #24]	; (80009c0 <HAL_IncTick+0x20>)
 80009a6:	781b      	ldrb	r3, [r3, #0]
 80009a8:	461a      	mov	r2, r3
 80009aa:	4b06      	ldr	r3, [pc, #24]	; (80009c4 <HAL_IncTick+0x24>)
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	4413      	add	r3, r2
 80009b0:	4a04      	ldr	r2, [pc, #16]	; (80009c4 <HAL_IncTick+0x24>)
 80009b2:	6013      	str	r3, [r2, #0]
}
 80009b4:	bf00      	nop
 80009b6:	46bd      	mov	sp, r7
 80009b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009bc:	4770      	bx	lr
 80009be:	bf00      	nop
 80009c0:	20000008 	.word	0x20000008
 80009c4:	2000006c 	.word	0x2000006c

080009c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0
  return uwTick;
 80009cc:	4b03      	ldr	r3, [pc, #12]	; (80009dc <HAL_GetTick+0x14>)
 80009ce:	681b      	ldr	r3, [r3, #0]
}
 80009d0:	4618      	mov	r0, r3
 80009d2:	46bd      	mov	sp, r7
 80009d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d8:	4770      	bx	lr
 80009da:	bf00      	nop
 80009dc:	2000006c 	.word	0x2000006c

080009e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b084      	sub	sp, #16
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80009e8:	f7ff ffee 	bl	80009c8 <HAL_GetTick>
 80009ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80009f2:	68fb      	ldr	r3, [r7, #12]
 80009f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80009f8:	d005      	beq.n	8000a06 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80009fa:	4b0a      	ldr	r3, [pc, #40]	; (8000a24 <HAL_Delay+0x44>)
 80009fc:	781b      	ldrb	r3, [r3, #0]
 80009fe:	461a      	mov	r2, r3
 8000a00:	68fb      	ldr	r3, [r7, #12]
 8000a02:	4413      	add	r3, r2
 8000a04:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000a06:	bf00      	nop
 8000a08:	f7ff ffde 	bl	80009c8 <HAL_GetTick>
 8000a0c:	4602      	mov	r2, r0
 8000a0e:	68bb      	ldr	r3, [r7, #8]
 8000a10:	1ad3      	subs	r3, r2, r3
 8000a12:	68fa      	ldr	r2, [r7, #12]
 8000a14:	429a      	cmp	r2, r3
 8000a16:	d8f7      	bhi.n	8000a08 <HAL_Delay+0x28>
  {
  }
}
 8000a18:	bf00      	nop
 8000a1a:	bf00      	nop
 8000a1c:	3710      	adds	r7, #16
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	20000008 	.word	0x20000008

08000a28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	b085      	sub	sp, #20
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	f003 0307 	and.w	r3, r3, #7
 8000a36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a38:	4b0c      	ldr	r3, [pc, #48]	; (8000a6c <__NVIC_SetPriorityGrouping+0x44>)
 8000a3a:	68db      	ldr	r3, [r3, #12]
 8000a3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a3e:	68ba      	ldr	r2, [r7, #8]
 8000a40:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a44:	4013      	ands	r3, r2
 8000a46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a48:	68fb      	ldr	r3, [r7, #12]
 8000a4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a4c:	68bb      	ldr	r3, [r7, #8]
 8000a4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a50:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a5a:	4a04      	ldr	r2, [pc, #16]	; (8000a6c <__NVIC_SetPriorityGrouping+0x44>)
 8000a5c:	68bb      	ldr	r3, [r7, #8]
 8000a5e:	60d3      	str	r3, [r2, #12]
}
 8000a60:	bf00      	nop
 8000a62:	3714      	adds	r7, #20
 8000a64:	46bd      	mov	sp, r7
 8000a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6a:	4770      	bx	lr
 8000a6c:	e000ed00 	.word	0xe000ed00

08000a70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a74:	4b04      	ldr	r3, [pc, #16]	; (8000a88 <__NVIC_GetPriorityGrouping+0x18>)
 8000a76:	68db      	ldr	r3, [r3, #12]
 8000a78:	0a1b      	lsrs	r3, r3, #8
 8000a7a:	f003 0307 	and.w	r3, r3, #7
}
 8000a7e:	4618      	mov	r0, r3
 8000a80:	46bd      	mov	sp, r7
 8000a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a86:	4770      	bx	lr
 8000a88:	e000ed00 	.word	0xe000ed00

08000a8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	b083      	sub	sp, #12
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	4603      	mov	r3, r0
 8000a94:	6039      	str	r1, [r7, #0]
 8000a96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	db0a      	blt.n	8000ab6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000aa0:	683b      	ldr	r3, [r7, #0]
 8000aa2:	b2da      	uxtb	r2, r3
 8000aa4:	490c      	ldr	r1, [pc, #48]	; (8000ad8 <__NVIC_SetPriority+0x4c>)
 8000aa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aaa:	0112      	lsls	r2, r2, #4
 8000aac:	b2d2      	uxtb	r2, r2
 8000aae:	440b      	add	r3, r1
 8000ab0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ab4:	e00a      	b.n	8000acc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ab6:	683b      	ldr	r3, [r7, #0]
 8000ab8:	b2da      	uxtb	r2, r3
 8000aba:	4908      	ldr	r1, [pc, #32]	; (8000adc <__NVIC_SetPriority+0x50>)
 8000abc:	79fb      	ldrb	r3, [r7, #7]
 8000abe:	f003 030f 	and.w	r3, r3, #15
 8000ac2:	3b04      	subs	r3, #4
 8000ac4:	0112      	lsls	r2, r2, #4
 8000ac6:	b2d2      	uxtb	r2, r2
 8000ac8:	440b      	add	r3, r1
 8000aca:	761a      	strb	r2, [r3, #24]
}
 8000acc:	bf00      	nop
 8000ace:	370c      	adds	r7, #12
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad6:	4770      	bx	lr
 8000ad8:	e000e100 	.word	0xe000e100
 8000adc:	e000ed00 	.word	0xe000ed00

08000ae0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	b089      	sub	sp, #36	; 0x24
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	60f8      	str	r0, [r7, #12]
 8000ae8:	60b9      	str	r1, [r7, #8]
 8000aea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000aec:	68fb      	ldr	r3, [r7, #12]
 8000aee:	f003 0307 	and.w	r3, r3, #7
 8000af2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000af4:	69fb      	ldr	r3, [r7, #28]
 8000af6:	f1c3 0307 	rsb	r3, r3, #7
 8000afa:	2b04      	cmp	r3, #4
 8000afc:	bf28      	it	cs
 8000afe:	2304      	movcs	r3, #4
 8000b00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b02:	69fb      	ldr	r3, [r7, #28]
 8000b04:	3304      	adds	r3, #4
 8000b06:	2b06      	cmp	r3, #6
 8000b08:	d902      	bls.n	8000b10 <NVIC_EncodePriority+0x30>
 8000b0a:	69fb      	ldr	r3, [r7, #28]
 8000b0c:	3b03      	subs	r3, #3
 8000b0e:	e000      	b.n	8000b12 <NVIC_EncodePriority+0x32>
 8000b10:	2300      	movs	r3, #0
 8000b12:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b14:	f04f 32ff 	mov.w	r2, #4294967295
 8000b18:	69bb      	ldr	r3, [r7, #24]
 8000b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b1e:	43da      	mvns	r2, r3
 8000b20:	68bb      	ldr	r3, [r7, #8]
 8000b22:	401a      	ands	r2, r3
 8000b24:	697b      	ldr	r3, [r7, #20]
 8000b26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b28:	f04f 31ff 	mov.w	r1, #4294967295
 8000b2c:	697b      	ldr	r3, [r7, #20]
 8000b2e:	fa01 f303 	lsl.w	r3, r1, r3
 8000b32:	43d9      	mvns	r1, r3
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b38:	4313      	orrs	r3, r2
         );
}
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	3724      	adds	r7, #36	; 0x24
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b44:	4770      	bx	lr
	...

08000b48 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b082      	sub	sp, #8
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	3b01      	subs	r3, #1
 8000b54:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b58:	d301      	bcc.n	8000b5e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b5a:	2301      	movs	r3, #1
 8000b5c:	e00f      	b.n	8000b7e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b5e:	4a0a      	ldr	r2, [pc, #40]	; (8000b88 <SysTick_Config+0x40>)
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	3b01      	subs	r3, #1
 8000b64:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b66:	210f      	movs	r1, #15
 8000b68:	f04f 30ff 	mov.w	r0, #4294967295
 8000b6c:	f7ff ff8e 	bl	8000a8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b70:	4b05      	ldr	r3, [pc, #20]	; (8000b88 <SysTick_Config+0x40>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b76:	4b04      	ldr	r3, [pc, #16]	; (8000b88 <SysTick_Config+0x40>)
 8000b78:	2207      	movs	r2, #7
 8000b7a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b7c:	2300      	movs	r3, #0
}
 8000b7e:	4618      	mov	r0, r3
 8000b80:	3708      	adds	r7, #8
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	e000e010 	.word	0xe000e010

08000b8c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b082      	sub	sp, #8
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b94:	6878      	ldr	r0, [r7, #4]
 8000b96:	f7ff ff47 	bl	8000a28 <__NVIC_SetPriorityGrouping>
}
 8000b9a:	bf00      	nop
 8000b9c:	3708      	adds	r7, #8
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}

08000ba2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ba2:	b580      	push	{r7, lr}
 8000ba4:	b086      	sub	sp, #24
 8000ba6:	af00      	add	r7, sp, #0
 8000ba8:	4603      	mov	r3, r0
 8000baa:	60b9      	str	r1, [r7, #8]
 8000bac:	607a      	str	r2, [r7, #4]
 8000bae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000bb4:	f7ff ff5c 	bl	8000a70 <__NVIC_GetPriorityGrouping>
 8000bb8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bba:	687a      	ldr	r2, [r7, #4]
 8000bbc:	68b9      	ldr	r1, [r7, #8]
 8000bbe:	6978      	ldr	r0, [r7, #20]
 8000bc0:	f7ff ff8e 	bl	8000ae0 <NVIC_EncodePriority>
 8000bc4:	4602      	mov	r2, r0
 8000bc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bca:	4611      	mov	r1, r2
 8000bcc:	4618      	mov	r0, r3
 8000bce:	f7ff ff5d 	bl	8000a8c <__NVIC_SetPriority>
}
 8000bd2:	bf00      	nop
 8000bd4:	3718      	adds	r7, #24
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}

08000bda <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bda:	b580      	push	{r7, lr}
 8000bdc:	b082      	sub	sp, #8
 8000bde:	af00      	add	r7, sp, #0
 8000be0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000be2:	6878      	ldr	r0, [r7, #4]
 8000be4:	f7ff ffb0 	bl	8000b48 <SysTick_Config>
 8000be8:	4603      	mov	r3, r0
}
 8000bea:	4618      	mov	r0, r3
 8000bec:	3708      	adds	r7, #8
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}
	...

08000bf4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	b089      	sub	sp, #36	; 0x24
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
 8000bfc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000c02:	2300      	movs	r3, #0
 8000c04:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000c06:	2300      	movs	r3, #0
 8000c08:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	61fb      	str	r3, [r7, #28]
 8000c0e:	e165      	b.n	8000edc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000c10:	2201      	movs	r2, #1
 8000c12:	69fb      	ldr	r3, [r7, #28]
 8000c14:	fa02 f303 	lsl.w	r3, r2, r3
 8000c18:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c1a:	683b      	ldr	r3, [r7, #0]
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	697a      	ldr	r2, [r7, #20]
 8000c20:	4013      	ands	r3, r2
 8000c22:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000c24:	693a      	ldr	r2, [r7, #16]
 8000c26:	697b      	ldr	r3, [r7, #20]
 8000c28:	429a      	cmp	r2, r3
 8000c2a:	f040 8154 	bne.w	8000ed6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c2e:	683b      	ldr	r3, [r7, #0]
 8000c30:	685b      	ldr	r3, [r3, #4]
 8000c32:	f003 0303 	and.w	r3, r3, #3
 8000c36:	2b01      	cmp	r3, #1
 8000c38:	d005      	beq.n	8000c46 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c3a:	683b      	ldr	r3, [r7, #0]
 8000c3c:	685b      	ldr	r3, [r3, #4]
 8000c3e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c42:	2b02      	cmp	r3, #2
 8000c44:	d130      	bne.n	8000ca8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	689b      	ldr	r3, [r3, #8]
 8000c4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000c4c:	69fb      	ldr	r3, [r7, #28]
 8000c4e:	005b      	lsls	r3, r3, #1
 8000c50:	2203      	movs	r2, #3
 8000c52:	fa02 f303 	lsl.w	r3, r2, r3
 8000c56:	43db      	mvns	r3, r3
 8000c58:	69ba      	ldr	r2, [r7, #24]
 8000c5a:	4013      	ands	r3, r2
 8000c5c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000c5e:	683b      	ldr	r3, [r7, #0]
 8000c60:	68da      	ldr	r2, [r3, #12]
 8000c62:	69fb      	ldr	r3, [r7, #28]
 8000c64:	005b      	lsls	r3, r3, #1
 8000c66:	fa02 f303 	lsl.w	r3, r2, r3
 8000c6a:	69ba      	ldr	r2, [r7, #24]
 8000c6c:	4313      	orrs	r3, r2
 8000c6e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	69ba      	ldr	r2, [r7, #24]
 8000c74:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	685b      	ldr	r3, [r3, #4]
 8000c7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c7c:	2201      	movs	r2, #1
 8000c7e:	69fb      	ldr	r3, [r7, #28]
 8000c80:	fa02 f303 	lsl.w	r3, r2, r3
 8000c84:	43db      	mvns	r3, r3
 8000c86:	69ba      	ldr	r2, [r7, #24]
 8000c88:	4013      	ands	r3, r2
 8000c8a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c8c:	683b      	ldr	r3, [r7, #0]
 8000c8e:	685b      	ldr	r3, [r3, #4]
 8000c90:	091b      	lsrs	r3, r3, #4
 8000c92:	f003 0201 	and.w	r2, r3, #1
 8000c96:	69fb      	ldr	r3, [r7, #28]
 8000c98:	fa02 f303 	lsl.w	r3, r2, r3
 8000c9c:	69ba      	ldr	r2, [r7, #24]
 8000c9e:	4313      	orrs	r3, r2
 8000ca0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	69ba      	ldr	r2, [r7, #24]
 8000ca6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ca8:	683b      	ldr	r3, [r7, #0]
 8000caa:	685b      	ldr	r3, [r3, #4]
 8000cac:	f003 0303 	and.w	r3, r3, #3
 8000cb0:	2b03      	cmp	r3, #3
 8000cb2:	d017      	beq.n	8000ce4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	68db      	ldr	r3, [r3, #12]
 8000cb8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000cba:	69fb      	ldr	r3, [r7, #28]
 8000cbc:	005b      	lsls	r3, r3, #1
 8000cbe:	2203      	movs	r2, #3
 8000cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc4:	43db      	mvns	r3, r3
 8000cc6:	69ba      	ldr	r2, [r7, #24]
 8000cc8:	4013      	ands	r3, r2
 8000cca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ccc:	683b      	ldr	r3, [r7, #0]
 8000cce:	689a      	ldr	r2, [r3, #8]
 8000cd0:	69fb      	ldr	r3, [r7, #28]
 8000cd2:	005b      	lsls	r3, r3, #1
 8000cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd8:	69ba      	ldr	r2, [r7, #24]
 8000cda:	4313      	orrs	r3, r2
 8000cdc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	69ba      	ldr	r2, [r7, #24]
 8000ce2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ce4:	683b      	ldr	r3, [r7, #0]
 8000ce6:	685b      	ldr	r3, [r3, #4]
 8000ce8:	f003 0303 	and.w	r3, r3, #3
 8000cec:	2b02      	cmp	r3, #2
 8000cee:	d123      	bne.n	8000d38 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000cf0:	69fb      	ldr	r3, [r7, #28]
 8000cf2:	08da      	lsrs	r2, r3, #3
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	3208      	adds	r2, #8
 8000cf8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000cfc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000cfe:	69fb      	ldr	r3, [r7, #28]
 8000d00:	f003 0307 	and.w	r3, r3, #7
 8000d04:	009b      	lsls	r3, r3, #2
 8000d06:	220f      	movs	r2, #15
 8000d08:	fa02 f303 	lsl.w	r3, r2, r3
 8000d0c:	43db      	mvns	r3, r3
 8000d0e:	69ba      	ldr	r2, [r7, #24]
 8000d10:	4013      	ands	r3, r2
 8000d12:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000d14:	683b      	ldr	r3, [r7, #0]
 8000d16:	691a      	ldr	r2, [r3, #16]
 8000d18:	69fb      	ldr	r3, [r7, #28]
 8000d1a:	f003 0307 	and.w	r3, r3, #7
 8000d1e:	009b      	lsls	r3, r3, #2
 8000d20:	fa02 f303 	lsl.w	r3, r2, r3
 8000d24:	69ba      	ldr	r2, [r7, #24]
 8000d26:	4313      	orrs	r3, r2
 8000d28:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000d2a:	69fb      	ldr	r3, [r7, #28]
 8000d2c:	08da      	lsrs	r2, r3, #3
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	3208      	adds	r2, #8
 8000d32:	69b9      	ldr	r1, [r7, #24]
 8000d34:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000d3e:	69fb      	ldr	r3, [r7, #28]
 8000d40:	005b      	lsls	r3, r3, #1
 8000d42:	2203      	movs	r2, #3
 8000d44:	fa02 f303 	lsl.w	r3, r2, r3
 8000d48:	43db      	mvns	r3, r3
 8000d4a:	69ba      	ldr	r2, [r7, #24]
 8000d4c:	4013      	ands	r3, r2
 8000d4e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d50:	683b      	ldr	r3, [r7, #0]
 8000d52:	685b      	ldr	r3, [r3, #4]
 8000d54:	f003 0203 	and.w	r2, r3, #3
 8000d58:	69fb      	ldr	r3, [r7, #28]
 8000d5a:	005b      	lsls	r3, r3, #1
 8000d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d60:	69ba      	ldr	r2, [r7, #24]
 8000d62:	4313      	orrs	r3, r2
 8000d64:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	69ba      	ldr	r2, [r7, #24]
 8000d6a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000d6c:	683b      	ldr	r3, [r7, #0]
 8000d6e:	685b      	ldr	r3, [r3, #4]
 8000d70:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	f000 80ae 	beq.w	8000ed6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	60fb      	str	r3, [r7, #12]
 8000d7e:	4b5d      	ldr	r3, [pc, #372]	; (8000ef4 <HAL_GPIO_Init+0x300>)
 8000d80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d82:	4a5c      	ldr	r2, [pc, #368]	; (8000ef4 <HAL_GPIO_Init+0x300>)
 8000d84:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d88:	6453      	str	r3, [r2, #68]	; 0x44
 8000d8a:	4b5a      	ldr	r3, [pc, #360]	; (8000ef4 <HAL_GPIO_Init+0x300>)
 8000d8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d92:	60fb      	str	r3, [r7, #12]
 8000d94:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000d96:	4a58      	ldr	r2, [pc, #352]	; (8000ef8 <HAL_GPIO_Init+0x304>)
 8000d98:	69fb      	ldr	r3, [r7, #28]
 8000d9a:	089b      	lsrs	r3, r3, #2
 8000d9c:	3302      	adds	r3, #2
 8000d9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000da2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000da4:	69fb      	ldr	r3, [r7, #28]
 8000da6:	f003 0303 	and.w	r3, r3, #3
 8000daa:	009b      	lsls	r3, r3, #2
 8000dac:	220f      	movs	r2, #15
 8000dae:	fa02 f303 	lsl.w	r3, r2, r3
 8000db2:	43db      	mvns	r3, r3
 8000db4:	69ba      	ldr	r2, [r7, #24]
 8000db6:	4013      	ands	r3, r2
 8000db8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	4a4f      	ldr	r2, [pc, #316]	; (8000efc <HAL_GPIO_Init+0x308>)
 8000dbe:	4293      	cmp	r3, r2
 8000dc0:	d025      	beq.n	8000e0e <HAL_GPIO_Init+0x21a>
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	4a4e      	ldr	r2, [pc, #312]	; (8000f00 <HAL_GPIO_Init+0x30c>)
 8000dc6:	4293      	cmp	r3, r2
 8000dc8:	d01f      	beq.n	8000e0a <HAL_GPIO_Init+0x216>
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	4a4d      	ldr	r2, [pc, #308]	; (8000f04 <HAL_GPIO_Init+0x310>)
 8000dce:	4293      	cmp	r3, r2
 8000dd0:	d019      	beq.n	8000e06 <HAL_GPIO_Init+0x212>
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	4a4c      	ldr	r2, [pc, #304]	; (8000f08 <HAL_GPIO_Init+0x314>)
 8000dd6:	4293      	cmp	r3, r2
 8000dd8:	d013      	beq.n	8000e02 <HAL_GPIO_Init+0x20e>
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	4a4b      	ldr	r2, [pc, #300]	; (8000f0c <HAL_GPIO_Init+0x318>)
 8000dde:	4293      	cmp	r3, r2
 8000de0:	d00d      	beq.n	8000dfe <HAL_GPIO_Init+0x20a>
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	4a4a      	ldr	r2, [pc, #296]	; (8000f10 <HAL_GPIO_Init+0x31c>)
 8000de6:	4293      	cmp	r3, r2
 8000de8:	d007      	beq.n	8000dfa <HAL_GPIO_Init+0x206>
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	4a49      	ldr	r2, [pc, #292]	; (8000f14 <HAL_GPIO_Init+0x320>)
 8000dee:	4293      	cmp	r3, r2
 8000df0:	d101      	bne.n	8000df6 <HAL_GPIO_Init+0x202>
 8000df2:	2306      	movs	r3, #6
 8000df4:	e00c      	b.n	8000e10 <HAL_GPIO_Init+0x21c>
 8000df6:	2307      	movs	r3, #7
 8000df8:	e00a      	b.n	8000e10 <HAL_GPIO_Init+0x21c>
 8000dfa:	2305      	movs	r3, #5
 8000dfc:	e008      	b.n	8000e10 <HAL_GPIO_Init+0x21c>
 8000dfe:	2304      	movs	r3, #4
 8000e00:	e006      	b.n	8000e10 <HAL_GPIO_Init+0x21c>
 8000e02:	2303      	movs	r3, #3
 8000e04:	e004      	b.n	8000e10 <HAL_GPIO_Init+0x21c>
 8000e06:	2302      	movs	r3, #2
 8000e08:	e002      	b.n	8000e10 <HAL_GPIO_Init+0x21c>
 8000e0a:	2301      	movs	r3, #1
 8000e0c:	e000      	b.n	8000e10 <HAL_GPIO_Init+0x21c>
 8000e0e:	2300      	movs	r3, #0
 8000e10:	69fa      	ldr	r2, [r7, #28]
 8000e12:	f002 0203 	and.w	r2, r2, #3
 8000e16:	0092      	lsls	r2, r2, #2
 8000e18:	4093      	lsls	r3, r2
 8000e1a:	69ba      	ldr	r2, [r7, #24]
 8000e1c:	4313      	orrs	r3, r2
 8000e1e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000e20:	4935      	ldr	r1, [pc, #212]	; (8000ef8 <HAL_GPIO_Init+0x304>)
 8000e22:	69fb      	ldr	r3, [r7, #28]
 8000e24:	089b      	lsrs	r3, r3, #2
 8000e26:	3302      	adds	r3, #2
 8000e28:	69ba      	ldr	r2, [r7, #24]
 8000e2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e2e:	4b3a      	ldr	r3, [pc, #232]	; (8000f18 <HAL_GPIO_Init+0x324>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e34:	693b      	ldr	r3, [r7, #16]
 8000e36:	43db      	mvns	r3, r3
 8000e38:	69ba      	ldr	r2, [r7, #24]
 8000e3a:	4013      	ands	r3, r2
 8000e3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000e3e:	683b      	ldr	r3, [r7, #0]
 8000e40:	685b      	ldr	r3, [r3, #4]
 8000e42:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d003      	beq.n	8000e52 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8000e4a:	69ba      	ldr	r2, [r7, #24]
 8000e4c:	693b      	ldr	r3, [r7, #16]
 8000e4e:	4313      	orrs	r3, r2
 8000e50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000e52:	4a31      	ldr	r2, [pc, #196]	; (8000f18 <HAL_GPIO_Init+0x324>)
 8000e54:	69bb      	ldr	r3, [r7, #24]
 8000e56:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000e58:	4b2f      	ldr	r3, [pc, #188]	; (8000f18 <HAL_GPIO_Init+0x324>)
 8000e5a:	685b      	ldr	r3, [r3, #4]
 8000e5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e5e:	693b      	ldr	r3, [r7, #16]
 8000e60:	43db      	mvns	r3, r3
 8000e62:	69ba      	ldr	r2, [r7, #24]
 8000e64:	4013      	ands	r3, r2
 8000e66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000e68:	683b      	ldr	r3, [r7, #0]
 8000e6a:	685b      	ldr	r3, [r3, #4]
 8000e6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d003      	beq.n	8000e7c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8000e74:	69ba      	ldr	r2, [r7, #24]
 8000e76:	693b      	ldr	r3, [r7, #16]
 8000e78:	4313      	orrs	r3, r2
 8000e7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000e7c:	4a26      	ldr	r2, [pc, #152]	; (8000f18 <HAL_GPIO_Init+0x324>)
 8000e7e:	69bb      	ldr	r3, [r7, #24]
 8000e80:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e82:	4b25      	ldr	r3, [pc, #148]	; (8000f18 <HAL_GPIO_Init+0x324>)
 8000e84:	689b      	ldr	r3, [r3, #8]
 8000e86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e88:	693b      	ldr	r3, [r7, #16]
 8000e8a:	43db      	mvns	r3, r3
 8000e8c:	69ba      	ldr	r2, [r7, #24]
 8000e8e:	4013      	ands	r3, r2
 8000e90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000e92:	683b      	ldr	r3, [r7, #0]
 8000e94:	685b      	ldr	r3, [r3, #4]
 8000e96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d003      	beq.n	8000ea6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8000e9e:	69ba      	ldr	r2, [r7, #24]
 8000ea0:	693b      	ldr	r3, [r7, #16]
 8000ea2:	4313      	orrs	r3, r2
 8000ea4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000ea6:	4a1c      	ldr	r2, [pc, #112]	; (8000f18 <HAL_GPIO_Init+0x324>)
 8000ea8:	69bb      	ldr	r3, [r7, #24]
 8000eaa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000eac:	4b1a      	ldr	r3, [pc, #104]	; (8000f18 <HAL_GPIO_Init+0x324>)
 8000eae:	68db      	ldr	r3, [r3, #12]
 8000eb0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000eb2:	693b      	ldr	r3, [r7, #16]
 8000eb4:	43db      	mvns	r3, r3
 8000eb6:	69ba      	ldr	r2, [r7, #24]
 8000eb8:	4013      	ands	r3, r2
 8000eba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000ebc:	683b      	ldr	r3, [r7, #0]
 8000ebe:	685b      	ldr	r3, [r3, #4]
 8000ec0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d003      	beq.n	8000ed0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8000ec8:	69ba      	ldr	r2, [r7, #24]
 8000eca:	693b      	ldr	r3, [r7, #16]
 8000ecc:	4313      	orrs	r3, r2
 8000ece:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000ed0:	4a11      	ldr	r2, [pc, #68]	; (8000f18 <HAL_GPIO_Init+0x324>)
 8000ed2:	69bb      	ldr	r3, [r7, #24]
 8000ed4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ed6:	69fb      	ldr	r3, [r7, #28]
 8000ed8:	3301      	adds	r3, #1
 8000eda:	61fb      	str	r3, [r7, #28]
 8000edc:	69fb      	ldr	r3, [r7, #28]
 8000ede:	2b0f      	cmp	r3, #15
 8000ee0:	f67f ae96 	bls.w	8000c10 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000ee4:	bf00      	nop
 8000ee6:	bf00      	nop
 8000ee8:	3724      	adds	r7, #36	; 0x24
 8000eea:	46bd      	mov	sp, r7
 8000eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef0:	4770      	bx	lr
 8000ef2:	bf00      	nop
 8000ef4:	40023800 	.word	0x40023800
 8000ef8:	40013800 	.word	0x40013800
 8000efc:	40020000 	.word	0x40020000
 8000f00:	40020400 	.word	0x40020400
 8000f04:	40020800 	.word	0x40020800
 8000f08:	40020c00 	.word	0x40020c00
 8000f0c:	40021000 	.word	0x40021000
 8000f10:	40021400 	.word	0x40021400
 8000f14:	40021800 	.word	0x40021800
 8000f18:	40013c00 	.word	0x40013c00

08000f1c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	b083      	sub	sp, #12
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
 8000f24:	460b      	mov	r3, r1
 8000f26:	807b      	strh	r3, [r7, #2]
 8000f28:	4613      	mov	r3, r2
 8000f2a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000f2c:	787b      	ldrb	r3, [r7, #1]
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d003      	beq.n	8000f3a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000f32:	887a      	ldrh	r2, [r7, #2]
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000f38:	e003      	b.n	8000f42 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000f3a:	887b      	ldrh	r3, [r7, #2]
 8000f3c:	041a      	lsls	r2, r3, #16
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	619a      	str	r2, [r3, #24]
}
 8000f42:	bf00      	nop
 8000f44:	370c      	adds	r7, #12
 8000f46:	46bd      	mov	sp, r7
 8000f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4c:	4770      	bx	lr
	...

08000f50 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b084      	sub	sp, #16
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
 8000f58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d101      	bne.n	8000f64 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000f60:	2301      	movs	r3, #1
 8000f62:	e0cc      	b.n	80010fe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000f64:	4b68      	ldr	r3, [pc, #416]	; (8001108 <HAL_RCC_ClockConfig+0x1b8>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	f003 030f 	and.w	r3, r3, #15
 8000f6c:	683a      	ldr	r2, [r7, #0]
 8000f6e:	429a      	cmp	r2, r3
 8000f70:	d90c      	bls.n	8000f8c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000f72:	4b65      	ldr	r3, [pc, #404]	; (8001108 <HAL_RCC_ClockConfig+0x1b8>)
 8000f74:	683a      	ldr	r2, [r7, #0]
 8000f76:	b2d2      	uxtb	r2, r2
 8000f78:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000f7a:	4b63      	ldr	r3, [pc, #396]	; (8001108 <HAL_RCC_ClockConfig+0x1b8>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	f003 030f 	and.w	r3, r3, #15
 8000f82:	683a      	ldr	r2, [r7, #0]
 8000f84:	429a      	cmp	r2, r3
 8000f86:	d001      	beq.n	8000f8c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8000f88:	2301      	movs	r3, #1
 8000f8a:	e0b8      	b.n	80010fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	f003 0302 	and.w	r3, r3, #2
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d020      	beq.n	8000fda <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	f003 0304 	and.w	r3, r3, #4
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d005      	beq.n	8000fb0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000fa4:	4b59      	ldr	r3, [pc, #356]	; (800110c <HAL_RCC_ClockConfig+0x1bc>)
 8000fa6:	689b      	ldr	r3, [r3, #8]
 8000fa8:	4a58      	ldr	r2, [pc, #352]	; (800110c <HAL_RCC_ClockConfig+0x1bc>)
 8000faa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8000fae:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	f003 0308 	and.w	r3, r3, #8
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d005      	beq.n	8000fc8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000fbc:	4b53      	ldr	r3, [pc, #332]	; (800110c <HAL_RCC_ClockConfig+0x1bc>)
 8000fbe:	689b      	ldr	r3, [r3, #8]
 8000fc0:	4a52      	ldr	r2, [pc, #328]	; (800110c <HAL_RCC_ClockConfig+0x1bc>)
 8000fc2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8000fc6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000fc8:	4b50      	ldr	r3, [pc, #320]	; (800110c <HAL_RCC_ClockConfig+0x1bc>)
 8000fca:	689b      	ldr	r3, [r3, #8]
 8000fcc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	689b      	ldr	r3, [r3, #8]
 8000fd4:	494d      	ldr	r1, [pc, #308]	; (800110c <HAL_RCC_ClockConfig+0x1bc>)
 8000fd6:	4313      	orrs	r3, r2
 8000fd8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	f003 0301 	and.w	r3, r3, #1
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d044      	beq.n	8001070 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	685b      	ldr	r3, [r3, #4]
 8000fea:	2b01      	cmp	r3, #1
 8000fec:	d107      	bne.n	8000ffe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fee:	4b47      	ldr	r3, [pc, #284]	; (800110c <HAL_RCC_ClockConfig+0x1bc>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d119      	bne.n	800102e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	e07f      	b.n	80010fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	685b      	ldr	r3, [r3, #4]
 8001002:	2b02      	cmp	r3, #2
 8001004:	d003      	beq.n	800100e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800100a:	2b03      	cmp	r3, #3
 800100c:	d107      	bne.n	800101e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800100e:	4b3f      	ldr	r3, [pc, #252]	; (800110c <HAL_RCC_ClockConfig+0x1bc>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001016:	2b00      	cmp	r3, #0
 8001018:	d109      	bne.n	800102e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800101a:	2301      	movs	r3, #1
 800101c:	e06f      	b.n	80010fe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800101e:	4b3b      	ldr	r3, [pc, #236]	; (800110c <HAL_RCC_ClockConfig+0x1bc>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	f003 0302 	and.w	r3, r3, #2
 8001026:	2b00      	cmp	r3, #0
 8001028:	d101      	bne.n	800102e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800102a:	2301      	movs	r3, #1
 800102c:	e067      	b.n	80010fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800102e:	4b37      	ldr	r3, [pc, #220]	; (800110c <HAL_RCC_ClockConfig+0x1bc>)
 8001030:	689b      	ldr	r3, [r3, #8]
 8001032:	f023 0203 	bic.w	r2, r3, #3
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	685b      	ldr	r3, [r3, #4]
 800103a:	4934      	ldr	r1, [pc, #208]	; (800110c <HAL_RCC_ClockConfig+0x1bc>)
 800103c:	4313      	orrs	r3, r2
 800103e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001040:	f7ff fcc2 	bl	80009c8 <HAL_GetTick>
 8001044:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001046:	e00a      	b.n	800105e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001048:	f7ff fcbe 	bl	80009c8 <HAL_GetTick>
 800104c:	4602      	mov	r2, r0
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	1ad3      	subs	r3, r2, r3
 8001052:	f241 3288 	movw	r2, #5000	; 0x1388
 8001056:	4293      	cmp	r3, r2
 8001058:	d901      	bls.n	800105e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800105a:	2303      	movs	r3, #3
 800105c:	e04f      	b.n	80010fe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800105e:	4b2b      	ldr	r3, [pc, #172]	; (800110c <HAL_RCC_ClockConfig+0x1bc>)
 8001060:	689b      	ldr	r3, [r3, #8]
 8001062:	f003 020c 	and.w	r2, r3, #12
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	685b      	ldr	r3, [r3, #4]
 800106a:	009b      	lsls	r3, r3, #2
 800106c:	429a      	cmp	r2, r3
 800106e:	d1eb      	bne.n	8001048 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001070:	4b25      	ldr	r3, [pc, #148]	; (8001108 <HAL_RCC_ClockConfig+0x1b8>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	f003 030f 	and.w	r3, r3, #15
 8001078:	683a      	ldr	r2, [r7, #0]
 800107a:	429a      	cmp	r2, r3
 800107c:	d20c      	bcs.n	8001098 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800107e:	4b22      	ldr	r3, [pc, #136]	; (8001108 <HAL_RCC_ClockConfig+0x1b8>)
 8001080:	683a      	ldr	r2, [r7, #0]
 8001082:	b2d2      	uxtb	r2, r2
 8001084:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001086:	4b20      	ldr	r3, [pc, #128]	; (8001108 <HAL_RCC_ClockConfig+0x1b8>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	f003 030f 	and.w	r3, r3, #15
 800108e:	683a      	ldr	r2, [r7, #0]
 8001090:	429a      	cmp	r2, r3
 8001092:	d001      	beq.n	8001098 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001094:	2301      	movs	r3, #1
 8001096:	e032      	b.n	80010fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	f003 0304 	and.w	r3, r3, #4
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d008      	beq.n	80010b6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80010a4:	4b19      	ldr	r3, [pc, #100]	; (800110c <HAL_RCC_ClockConfig+0x1bc>)
 80010a6:	689b      	ldr	r3, [r3, #8]
 80010a8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	68db      	ldr	r3, [r3, #12]
 80010b0:	4916      	ldr	r1, [pc, #88]	; (800110c <HAL_RCC_ClockConfig+0x1bc>)
 80010b2:	4313      	orrs	r3, r2
 80010b4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	f003 0308 	and.w	r3, r3, #8
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d009      	beq.n	80010d6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80010c2:	4b12      	ldr	r3, [pc, #72]	; (800110c <HAL_RCC_ClockConfig+0x1bc>)
 80010c4:	689b      	ldr	r3, [r3, #8]
 80010c6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	691b      	ldr	r3, [r3, #16]
 80010ce:	00db      	lsls	r3, r3, #3
 80010d0:	490e      	ldr	r1, [pc, #56]	; (800110c <HAL_RCC_ClockConfig+0x1bc>)
 80010d2:	4313      	orrs	r3, r2
 80010d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80010d6:	f000 f855 	bl	8001184 <HAL_RCC_GetSysClockFreq>
 80010da:	4602      	mov	r2, r0
 80010dc:	4b0b      	ldr	r3, [pc, #44]	; (800110c <HAL_RCC_ClockConfig+0x1bc>)
 80010de:	689b      	ldr	r3, [r3, #8]
 80010e0:	091b      	lsrs	r3, r3, #4
 80010e2:	f003 030f 	and.w	r3, r3, #15
 80010e6:	490a      	ldr	r1, [pc, #40]	; (8001110 <HAL_RCC_ClockConfig+0x1c0>)
 80010e8:	5ccb      	ldrb	r3, [r1, r3]
 80010ea:	fa22 f303 	lsr.w	r3, r2, r3
 80010ee:	4a09      	ldr	r2, [pc, #36]	; (8001114 <HAL_RCC_ClockConfig+0x1c4>)
 80010f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80010f2:	4b09      	ldr	r3, [pc, #36]	; (8001118 <HAL_RCC_ClockConfig+0x1c8>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	4618      	mov	r0, r3
 80010f8:	f7ff fc22 	bl	8000940 <HAL_InitTick>

  return HAL_OK;
 80010fc:	2300      	movs	r3, #0
}
 80010fe:	4618      	mov	r0, r3
 8001100:	3710      	adds	r7, #16
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	40023c00 	.word	0x40023c00
 800110c:	40023800 	.word	0x40023800
 8001110:	080020cc 	.word	0x080020cc
 8001114:	20000000 	.word	0x20000000
 8001118:	20000004 	.word	0x20000004

0800111c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800111c:	b480      	push	{r7}
 800111e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001120:	4b03      	ldr	r3, [pc, #12]	; (8001130 <HAL_RCC_GetHCLKFreq+0x14>)
 8001122:	681b      	ldr	r3, [r3, #0]
}
 8001124:	4618      	mov	r0, r3
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr
 800112e:	bf00      	nop
 8001130:	20000000 	.word	0x20000000

08001134 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001138:	f7ff fff0 	bl	800111c <HAL_RCC_GetHCLKFreq>
 800113c:	4602      	mov	r2, r0
 800113e:	4b05      	ldr	r3, [pc, #20]	; (8001154 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001140:	689b      	ldr	r3, [r3, #8]
 8001142:	0a9b      	lsrs	r3, r3, #10
 8001144:	f003 0307 	and.w	r3, r3, #7
 8001148:	4903      	ldr	r1, [pc, #12]	; (8001158 <HAL_RCC_GetPCLK1Freq+0x24>)
 800114a:	5ccb      	ldrb	r3, [r1, r3]
 800114c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001150:	4618      	mov	r0, r3
 8001152:	bd80      	pop	{r7, pc}
 8001154:	40023800 	.word	0x40023800
 8001158:	080020dc 	.word	0x080020dc

0800115c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001160:	f7ff ffdc 	bl	800111c <HAL_RCC_GetHCLKFreq>
 8001164:	4602      	mov	r2, r0
 8001166:	4b05      	ldr	r3, [pc, #20]	; (800117c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001168:	689b      	ldr	r3, [r3, #8]
 800116a:	0b5b      	lsrs	r3, r3, #13
 800116c:	f003 0307 	and.w	r3, r3, #7
 8001170:	4903      	ldr	r1, [pc, #12]	; (8001180 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001172:	5ccb      	ldrb	r3, [r1, r3]
 8001174:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001178:	4618      	mov	r0, r3
 800117a:	bd80      	pop	{r7, pc}
 800117c:	40023800 	.word	0x40023800
 8001180:	080020dc 	.word	0x080020dc

08001184 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001184:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001188:	b088      	sub	sp, #32
 800118a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800118c:	2300      	movs	r3, #0
 800118e:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 8001190:	2300      	movs	r3, #0
 8001192:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 8001194:	2300      	movs	r3, #0
 8001196:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 8001198:	2300      	movs	r3, #0
 800119a:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 800119c:	2300      	movs	r3, #0
 800119e:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80011a0:	4bce      	ldr	r3, [pc, #824]	; (80014dc <HAL_RCC_GetSysClockFreq+0x358>)
 80011a2:	689b      	ldr	r3, [r3, #8]
 80011a4:	f003 030c 	and.w	r3, r3, #12
 80011a8:	2b0c      	cmp	r3, #12
 80011aa:	f200 818d 	bhi.w	80014c8 <HAL_RCC_GetSysClockFreq+0x344>
 80011ae:	a201      	add	r2, pc, #4	; (adr r2, 80011b4 <HAL_RCC_GetSysClockFreq+0x30>)
 80011b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011b4:	080011e9 	.word	0x080011e9
 80011b8:	080014c9 	.word	0x080014c9
 80011bc:	080014c9 	.word	0x080014c9
 80011c0:	080014c9 	.word	0x080014c9
 80011c4:	080011ef 	.word	0x080011ef
 80011c8:	080014c9 	.word	0x080014c9
 80011cc:	080014c9 	.word	0x080014c9
 80011d0:	080014c9 	.word	0x080014c9
 80011d4:	080011f5 	.word	0x080011f5
 80011d8:	080014c9 	.word	0x080014c9
 80011dc:	080014c9 	.word	0x080014c9
 80011e0:	080014c9 	.word	0x080014c9
 80011e4:	08001369 	.word	0x08001369
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80011e8:	4bbd      	ldr	r3, [pc, #756]	; (80014e0 <HAL_RCC_GetSysClockFreq+0x35c>)
 80011ea:	61bb      	str	r3, [r7, #24]
       break;
 80011ec:	e16f      	b.n	80014ce <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80011ee:	4bbd      	ldr	r3, [pc, #756]	; (80014e4 <HAL_RCC_GetSysClockFreq+0x360>)
 80011f0:	61bb      	str	r3, [r7, #24]
      break;
 80011f2:	e16c      	b.n	80014ce <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80011f4:	4bb9      	ldr	r3, [pc, #740]	; (80014dc <HAL_RCC_GetSysClockFreq+0x358>)
 80011f6:	685b      	ldr	r3, [r3, #4]
 80011f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80011fc:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80011fe:	4bb7      	ldr	r3, [pc, #732]	; (80014dc <HAL_RCC_GetSysClockFreq+0x358>)
 8001200:	685b      	ldr	r3, [r3, #4]
 8001202:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001206:	2b00      	cmp	r3, #0
 8001208:	d053      	beq.n	80012b2 <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800120a:	4bb4      	ldr	r3, [pc, #720]	; (80014dc <HAL_RCC_GetSysClockFreq+0x358>)
 800120c:	685b      	ldr	r3, [r3, #4]
 800120e:	099b      	lsrs	r3, r3, #6
 8001210:	461a      	mov	r2, r3
 8001212:	f04f 0300 	mov.w	r3, #0
 8001216:	f240 10ff 	movw	r0, #511	; 0x1ff
 800121a:	f04f 0100 	mov.w	r1, #0
 800121e:	ea02 0400 	and.w	r4, r2, r0
 8001222:	603c      	str	r4, [r7, #0]
 8001224:	400b      	ands	r3, r1
 8001226:	607b      	str	r3, [r7, #4]
 8001228:	e9d7 4500 	ldrd	r4, r5, [r7]
 800122c:	4620      	mov	r0, r4
 800122e:	4629      	mov	r1, r5
 8001230:	f04f 0200 	mov.w	r2, #0
 8001234:	f04f 0300 	mov.w	r3, #0
 8001238:	014b      	lsls	r3, r1, #5
 800123a:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800123e:	0142      	lsls	r2, r0, #5
 8001240:	4610      	mov	r0, r2
 8001242:	4619      	mov	r1, r3
 8001244:	4623      	mov	r3, r4
 8001246:	1ac0      	subs	r0, r0, r3
 8001248:	462b      	mov	r3, r5
 800124a:	eb61 0103 	sbc.w	r1, r1, r3
 800124e:	f04f 0200 	mov.w	r2, #0
 8001252:	f04f 0300 	mov.w	r3, #0
 8001256:	018b      	lsls	r3, r1, #6
 8001258:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800125c:	0182      	lsls	r2, r0, #6
 800125e:	1a12      	subs	r2, r2, r0
 8001260:	eb63 0301 	sbc.w	r3, r3, r1
 8001264:	f04f 0000 	mov.w	r0, #0
 8001268:	f04f 0100 	mov.w	r1, #0
 800126c:	00d9      	lsls	r1, r3, #3
 800126e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001272:	00d0      	lsls	r0, r2, #3
 8001274:	4602      	mov	r2, r0
 8001276:	460b      	mov	r3, r1
 8001278:	4621      	mov	r1, r4
 800127a:	1852      	adds	r2, r2, r1
 800127c:	4629      	mov	r1, r5
 800127e:	eb43 0101 	adc.w	r1, r3, r1
 8001282:	460b      	mov	r3, r1
 8001284:	f04f 0000 	mov.w	r0, #0
 8001288:	f04f 0100 	mov.w	r1, #0
 800128c:	0259      	lsls	r1, r3, #9
 800128e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001292:	0250      	lsls	r0, r2, #9
 8001294:	4602      	mov	r2, r0
 8001296:	460b      	mov	r3, r1
 8001298:	4610      	mov	r0, r2
 800129a:	4619      	mov	r1, r3
 800129c:	697b      	ldr	r3, [r7, #20]
 800129e:	461a      	mov	r2, r3
 80012a0:	f04f 0300 	mov.w	r3, #0
 80012a4:	f7fe ffae 	bl	8000204 <__aeabi_uldivmod>
 80012a8:	4602      	mov	r2, r0
 80012aa:	460b      	mov	r3, r1
 80012ac:	4613      	mov	r3, r2
 80012ae:	61fb      	str	r3, [r7, #28]
 80012b0:	e04c      	b.n	800134c <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80012b2:	4b8a      	ldr	r3, [pc, #552]	; (80014dc <HAL_RCC_GetSysClockFreq+0x358>)
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	099b      	lsrs	r3, r3, #6
 80012b8:	461a      	mov	r2, r3
 80012ba:	f04f 0300 	mov.w	r3, #0
 80012be:	f240 10ff 	movw	r0, #511	; 0x1ff
 80012c2:	f04f 0100 	mov.w	r1, #0
 80012c6:	ea02 0a00 	and.w	sl, r2, r0
 80012ca:	ea03 0b01 	and.w	fp, r3, r1
 80012ce:	4650      	mov	r0, sl
 80012d0:	4659      	mov	r1, fp
 80012d2:	f04f 0200 	mov.w	r2, #0
 80012d6:	f04f 0300 	mov.w	r3, #0
 80012da:	014b      	lsls	r3, r1, #5
 80012dc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80012e0:	0142      	lsls	r2, r0, #5
 80012e2:	4610      	mov	r0, r2
 80012e4:	4619      	mov	r1, r3
 80012e6:	ebb0 000a 	subs.w	r0, r0, sl
 80012ea:	eb61 010b 	sbc.w	r1, r1, fp
 80012ee:	f04f 0200 	mov.w	r2, #0
 80012f2:	f04f 0300 	mov.w	r3, #0
 80012f6:	018b      	lsls	r3, r1, #6
 80012f8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80012fc:	0182      	lsls	r2, r0, #6
 80012fe:	1a12      	subs	r2, r2, r0
 8001300:	eb63 0301 	sbc.w	r3, r3, r1
 8001304:	f04f 0000 	mov.w	r0, #0
 8001308:	f04f 0100 	mov.w	r1, #0
 800130c:	00d9      	lsls	r1, r3, #3
 800130e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001312:	00d0      	lsls	r0, r2, #3
 8001314:	4602      	mov	r2, r0
 8001316:	460b      	mov	r3, r1
 8001318:	eb12 020a 	adds.w	r2, r2, sl
 800131c:	eb43 030b 	adc.w	r3, r3, fp
 8001320:	f04f 0000 	mov.w	r0, #0
 8001324:	f04f 0100 	mov.w	r1, #0
 8001328:	0299      	lsls	r1, r3, #10
 800132a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800132e:	0290      	lsls	r0, r2, #10
 8001330:	4602      	mov	r2, r0
 8001332:	460b      	mov	r3, r1
 8001334:	4610      	mov	r0, r2
 8001336:	4619      	mov	r1, r3
 8001338:	697b      	ldr	r3, [r7, #20]
 800133a:	461a      	mov	r2, r3
 800133c:	f04f 0300 	mov.w	r3, #0
 8001340:	f7fe ff60 	bl	8000204 <__aeabi_uldivmod>
 8001344:	4602      	mov	r2, r0
 8001346:	460b      	mov	r3, r1
 8001348:	4613      	mov	r3, r2
 800134a:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800134c:	4b63      	ldr	r3, [pc, #396]	; (80014dc <HAL_RCC_GetSysClockFreq+0x358>)
 800134e:	685b      	ldr	r3, [r3, #4]
 8001350:	0c1b      	lsrs	r3, r3, #16
 8001352:	f003 0303 	and.w	r3, r3, #3
 8001356:	3301      	adds	r3, #1
 8001358:	005b      	lsls	r3, r3, #1
 800135a:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 800135c:	69fa      	ldr	r2, [r7, #28]
 800135e:	693b      	ldr	r3, [r7, #16]
 8001360:	fbb2 f3f3 	udiv	r3, r2, r3
 8001364:	61bb      	str	r3, [r7, #24]
      break;
 8001366:	e0b2      	b.n	80014ce <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001368:	4b5c      	ldr	r3, [pc, #368]	; (80014dc <HAL_RCC_GetSysClockFreq+0x358>)
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001370:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001372:	4b5a      	ldr	r3, [pc, #360]	; (80014dc <HAL_RCC_GetSysClockFreq+0x358>)
 8001374:	685b      	ldr	r3, [r3, #4]
 8001376:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800137a:	2b00      	cmp	r3, #0
 800137c:	d04d      	beq.n	800141a <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800137e:	4b57      	ldr	r3, [pc, #348]	; (80014dc <HAL_RCC_GetSysClockFreq+0x358>)
 8001380:	685b      	ldr	r3, [r3, #4]
 8001382:	099b      	lsrs	r3, r3, #6
 8001384:	461a      	mov	r2, r3
 8001386:	f04f 0300 	mov.w	r3, #0
 800138a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800138e:	f04f 0100 	mov.w	r1, #0
 8001392:	ea02 0800 	and.w	r8, r2, r0
 8001396:	ea03 0901 	and.w	r9, r3, r1
 800139a:	4640      	mov	r0, r8
 800139c:	4649      	mov	r1, r9
 800139e:	f04f 0200 	mov.w	r2, #0
 80013a2:	f04f 0300 	mov.w	r3, #0
 80013a6:	014b      	lsls	r3, r1, #5
 80013a8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80013ac:	0142      	lsls	r2, r0, #5
 80013ae:	4610      	mov	r0, r2
 80013b0:	4619      	mov	r1, r3
 80013b2:	ebb0 0008 	subs.w	r0, r0, r8
 80013b6:	eb61 0109 	sbc.w	r1, r1, r9
 80013ba:	f04f 0200 	mov.w	r2, #0
 80013be:	f04f 0300 	mov.w	r3, #0
 80013c2:	018b      	lsls	r3, r1, #6
 80013c4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80013c8:	0182      	lsls	r2, r0, #6
 80013ca:	1a12      	subs	r2, r2, r0
 80013cc:	eb63 0301 	sbc.w	r3, r3, r1
 80013d0:	f04f 0000 	mov.w	r0, #0
 80013d4:	f04f 0100 	mov.w	r1, #0
 80013d8:	00d9      	lsls	r1, r3, #3
 80013da:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80013de:	00d0      	lsls	r0, r2, #3
 80013e0:	4602      	mov	r2, r0
 80013e2:	460b      	mov	r3, r1
 80013e4:	eb12 0208 	adds.w	r2, r2, r8
 80013e8:	eb43 0309 	adc.w	r3, r3, r9
 80013ec:	f04f 0000 	mov.w	r0, #0
 80013f0:	f04f 0100 	mov.w	r1, #0
 80013f4:	0259      	lsls	r1, r3, #9
 80013f6:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80013fa:	0250      	lsls	r0, r2, #9
 80013fc:	4602      	mov	r2, r0
 80013fe:	460b      	mov	r3, r1
 8001400:	4610      	mov	r0, r2
 8001402:	4619      	mov	r1, r3
 8001404:	697b      	ldr	r3, [r7, #20]
 8001406:	461a      	mov	r2, r3
 8001408:	f04f 0300 	mov.w	r3, #0
 800140c:	f7fe fefa 	bl	8000204 <__aeabi_uldivmod>
 8001410:	4602      	mov	r2, r0
 8001412:	460b      	mov	r3, r1
 8001414:	4613      	mov	r3, r2
 8001416:	61fb      	str	r3, [r7, #28]
 8001418:	e04a      	b.n	80014b0 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800141a:	4b30      	ldr	r3, [pc, #192]	; (80014dc <HAL_RCC_GetSysClockFreq+0x358>)
 800141c:	685b      	ldr	r3, [r3, #4]
 800141e:	099b      	lsrs	r3, r3, #6
 8001420:	461a      	mov	r2, r3
 8001422:	f04f 0300 	mov.w	r3, #0
 8001426:	f240 10ff 	movw	r0, #511	; 0x1ff
 800142a:	f04f 0100 	mov.w	r1, #0
 800142e:	ea02 0400 	and.w	r4, r2, r0
 8001432:	ea03 0501 	and.w	r5, r3, r1
 8001436:	4620      	mov	r0, r4
 8001438:	4629      	mov	r1, r5
 800143a:	f04f 0200 	mov.w	r2, #0
 800143e:	f04f 0300 	mov.w	r3, #0
 8001442:	014b      	lsls	r3, r1, #5
 8001444:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001448:	0142      	lsls	r2, r0, #5
 800144a:	4610      	mov	r0, r2
 800144c:	4619      	mov	r1, r3
 800144e:	1b00      	subs	r0, r0, r4
 8001450:	eb61 0105 	sbc.w	r1, r1, r5
 8001454:	f04f 0200 	mov.w	r2, #0
 8001458:	f04f 0300 	mov.w	r3, #0
 800145c:	018b      	lsls	r3, r1, #6
 800145e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001462:	0182      	lsls	r2, r0, #6
 8001464:	1a12      	subs	r2, r2, r0
 8001466:	eb63 0301 	sbc.w	r3, r3, r1
 800146a:	f04f 0000 	mov.w	r0, #0
 800146e:	f04f 0100 	mov.w	r1, #0
 8001472:	00d9      	lsls	r1, r3, #3
 8001474:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001478:	00d0      	lsls	r0, r2, #3
 800147a:	4602      	mov	r2, r0
 800147c:	460b      	mov	r3, r1
 800147e:	1912      	adds	r2, r2, r4
 8001480:	eb45 0303 	adc.w	r3, r5, r3
 8001484:	f04f 0000 	mov.w	r0, #0
 8001488:	f04f 0100 	mov.w	r1, #0
 800148c:	0299      	lsls	r1, r3, #10
 800148e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001492:	0290      	lsls	r0, r2, #10
 8001494:	4602      	mov	r2, r0
 8001496:	460b      	mov	r3, r1
 8001498:	4610      	mov	r0, r2
 800149a:	4619      	mov	r1, r3
 800149c:	697b      	ldr	r3, [r7, #20]
 800149e:	461a      	mov	r2, r3
 80014a0:	f04f 0300 	mov.w	r3, #0
 80014a4:	f7fe feae 	bl	8000204 <__aeabi_uldivmod>
 80014a8:	4602      	mov	r2, r0
 80014aa:	460b      	mov	r3, r1
 80014ac:	4613      	mov	r3, r2
 80014ae:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80014b0:	4b0a      	ldr	r3, [pc, #40]	; (80014dc <HAL_RCC_GetSysClockFreq+0x358>)
 80014b2:	685b      	ldr	r3, [r3, #4]
 80014b4:	0f1b      	lsrs	r3, r3, #28
 80014b6:	f003 0307 	and.w	r3, r3, #7
 80014ba:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 80014bc:	69fa      	ldr	r2, [r7, #28]
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80014c4:	61bb      	str	r3, [r7, #24]
      break;
 80014c6:	e002      	b.n	80014ce <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80014c8:	4b05      	ldr	r3, [pc, #20]	; (80014e0 <HAL_RCC_GetSysClockFreq+0x35c>)
 80014ca:	61bb      	str	r3, [r7, #24]
      break;
 80014cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80014ce:	69bb      	ldr	r3, [r7, #24]
}
 80014d0:	4618      	mov	r0, r3
 80014d2:	3720      	adds	r7, #32
 80014d4:	46bd      	mov	sp, r7
 80014d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80014da:	bf00      	nop
 80014dc:	40023800 	.word	0x40023800
 80014e0:	00f42400 	.word	0x00f42400
 80014e4:	007a1200 	.word	0x007a1200

080014e8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b086      	sub	sp, #24
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d101      	bne.n	80014fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80014f6:	2301      	movs	r3, #1
 80014f8:	e28d      	b.n	8001a16 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f003 0301 	and.w	r3, r3, #1
 8001502:	2b00      	cmp	r3, #0
 8001504:	f000 8083 	beq.w	800160e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001508:	4b94      	ldr	r3, [pc, #592]	; (800175c <HAL_RCC_OscConfig+0x274>)
 800150a:	689b      	ldr	r3, [r3, #8]
 800150c:	f003 030c 	and.w	r3, r3, #12
 8001510:	2b04      	cmp	r3, #4
 8001512:	d019      	beq.n	8001548 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001514:	4b91      	ldr	r3, [pc, #580]	; (800175c <HAL_RCC_OscConfig+0x274>)
 8001516:	689b      	ldr	r3, [r3, #8]
 8001518:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800151c:	2b08      	cmp	r3, #8
 800151e:	d106      	bne.n	800152e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001520:	4b8e      	ldr	r3, [pc, #568]	; (800175c <HAL_RCC_OscConfig+0x274>)
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001528:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800152c:	d00c      	beq.n	8001548 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800152e:	4b8b      	ldr	r3, [pc, #556]	; (800175c <HAL_RCC_OscConfig+0x274>)
 8001530:	689b      	ldr	r3, [r3, #8]
 8001532:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001536:	2b0c      	cmp	r3, #12
 8001538:	d112      	bne.n	8001560 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800153a:	4b88      	ldr	r3, [pc, #544]	; (800175c <HAL_RCC_OscConfig+0x274>)
 800153c:	685b      	ldr	r3, [r3, #4]
 800153e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001542:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001546:	d10b      	bne.n	8001560 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001548:	4b84      	ldr	r3, [pc, #528]	; (800175c <HAL_RCC_OscConfig+0x274>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001550:	2b00      	cmp	r3, #0
 8001552:	d05b      	beq.n	800160c <HAL_RCC_OscConfig+0x124>
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	685b      	ldr	r3, [r3, #4]
 8001558:	2b00      	cmp	r3, #0
 800155a:	d157      	bne.n	800160c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800155c:	2301      	movs	r3, #1
 800155e:	e25a      	b.n	8001a16 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001568:	d106      	bne.n	8001578 <HAL_RCC_OscConfig+0x90>
 800156a:	4b7c      	ldr	r3, [pc, #496]	; (800175c <HAL_RCC_OscConfig+0x274>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	4a7b      	ldr	r2, [pc, #492]	; (800175c <HAL_RCC_OscConfig+0x274>)
 8001570:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001574:	6013      	str	r3, [r2, #0]
 8001576:	e01d      	b.n	80015b4 <HAL_RCC_OscConfig+0xcc>
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001580:	d10c      	bne.n	800159c <HAL_RCC_OscConfig+0xb4>
 8001582:	4b76      	ldr	r3, [pc, #472]	; (800175c <HAL_RCC_OscConfig+0x274>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	4a75      	ldr	r2, [pc, #468]	; (800175c <HAL_RCC_OscConfig+0x274>)
 8001588:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800158c:	6013      	str	r3, [r2, #0]
 800158e:	4b73      	ldr	r3, [pc, #460]	; (800175c <HAL_RCC_OscConfig+0x274>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	4a72      	ldr	r2, [pc, #456]	; (800175c <HAL_RCC_OscConfig+0x274>)
 8001594:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001598:	6013      	str	r3, [r2, #0]
 800159a:	e00b      	b.n	80015b4 <HAL_RCC_OscConfig+0xcc>
 800159c:	4b6f      	ldr	r3, [pc, #444]	; (800175c <HAL_RCC_OscConfig+0x274>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4a6e      	ldr	r2, [pc, #440]	; (800175c <HAL_RCC_OscConfig+0x274>)
 80015a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015a6:	6013      	str	r3, [r2, #0]
 80015a8:	4b6c      	ldr	r3, [pc, #432]	; (800175c <HAL_RCC_OscConfig+0x274>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4a6b      	ldr	r2, [pc, #428]	; (800175c <HAL_RCC_OscConfig+0x274>)
 80015ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	685b      	ldr	r3, [r3, #4]
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d013      	beq.n	80015e4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015bc:	f7ff fa04 	bl	80009c8 <HAL_GetTick>
 80015c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015c2:	e008      	b.n	80015d6 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80015c4:	f7ff fa00 	bl	80009c8 <HAL_GetTick>
 80015c8:	4602      	mov	r2, r0
 80015ca:	693b      	ldr	r3, [r7, #16]
 80015cc:	1ad3      	subs	r3, r2, r3
 80015ce:	2b64      	cmp	r3, #100	; 0x64
 80015d0:	d901      	bls.n	80015d6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80015d2:	2303      	movs	r3, #3
 80015d4:	e21f      	b.n	8001a16 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015d6:	4b61      	ldr	r3, [pc, #388]	; (800175c <HAL_RCC_OscConfig+0x274>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d0f0      	beq.n	80015c4 <HAL_RCC_OscConfig+0xdc>
 80015e2:	e014      	b.n	800160e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015e4:	f7ff f9f0 	bl	80009c8 <HAL_GetTick>
 80015e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015ea:	e008      	b.n	80015fe <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80015ec:	f7ff f9ec 	bl	80009c8 <HAL_GetTick>
 80015f0:	4602      	mov	r2, r0
 80015f2:	693b      	ldr	r3, [r7, #16]
 80015f4:	1ad3      	subs	r3, r2, r3
 80015f6:	2b64      	cmp	r3, #100	; 0x64
 80015f8:	d901      	bls.n	80015fe <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80015fa:	2303      	movs	r3, #3
 80015fc:	e20b      	b.n	8001a16 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015fe:	4b57      	ldr	r3, [pc, #348]	; (800175c <HAL_RCC_OscConfig+0x274>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001606:	2b00      	cmp	r3, #0
 8001608:	d1f0      	bne.n	80015ec <HAL_RCC_OscConfig+0x104>
 800160a:	e000      	b.n	800160e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800160c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f003 0302 	and.w	r3, r3, #2
 8001616:	2b00      	cmp	r3, #0
 8001618:	d06f      	beq.n	80016fa <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800161a:	4b50      	ldr	r3, [pc, #320]	; (800175c <HAL_RCC_OscConfig+0x274>)
 800161c:	689b      	ldr	r3, [r3, #8]
 800161e:	f003 030c 	and.w	r3, r3, #12
 8001622:	2b00      	cmp	r3, #0
 8001624:	d017      	beq.n	8001656 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001626:	4b4d      	ldr	r3, [pc, #308]	; (800175c <HAL_RCC_OscConfig+0x274>)
 8001628:	689b      	ldr	r3, [r3, #8]
 800162a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800162e:	2b08      	cmp	r3, #8
 8001630:	d105      	bne.n	800163e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001632:	4b4a      	ldr	r3, [pc, #296]	; (800175c <HAL_RCC_OscConfig+0x274>)
 8001634:	685b      	ldr	r3, [r3, #4]
 8001636:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800163a:	2b00      	cmp	r3, #0
 800163c:	d00b      	beq.n	8001656 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800163e:	4b47      	ldr	r3, [pc, #284]	; (800175c <HAL_RCC_OscConfig+0x274>)
 8001640:	689b      	ldr	r3, [r3, #8]
 8001642:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001646:	2b0c      	cmp	r3, #12
 8001648:	d11c      	bne.n	8001684 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800164a:	4b44      	ldr	r3, [pc, #272]	; (800175c <HAL_RCC_OscConfig+0x274>)
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001652:	2b00      	cmp	r3, #0
 8001654:	d116      	bne.n	8001684 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001656:	4b41      	ldr	r3, [pc, #260]	; (800175c <HAL_RCC_OscConfig+0x274>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f003 0302 	and.w	r3, r3, #2
 800165e:	2b00      	cmp	r3, #0
 8001660:	d005      	beq.n	800166e <HAL_RCC_OscConfig+0x186>
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	68db      	ldr	r3, [r3, #12]
 8001666:	2b01      	cmp	r3, #1
 8001668:	d001      	beq.n	800166e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800166a:	2301      	movs	r3, #1
 800166c:	e1d3      	b.n	8001a16 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800166e:	4b3b      	ldr	r3, [pc, #236]	; (800175c <HAL_RCC_OscConfig+0x274>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	691b      	ldr	r3, [r3, #16]
 800167a:	00db      	lsls	r3, r3, #3
 800167c:	4937      	ldr	r1, [pc, #220]	; (800175c <HAL_RCC_OscConfig+0x274>)
 800167e:	4313      	orrs	r3, r2
 8001680:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001682:	e03a      	b.n	80016fa <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	68db      	ldr	r3, [r3, #12]
 8001688:	2b00      	cmp	r3, #0
 800168a:	d020      	beq.n	80016ce <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800168c:	4b34      	ldr	r3, [pc, #208]	; (8001760 <HAL_RCC_OscConfig+0x278>)
 800168e:	2201      	movs	r2, #1
 8001690:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001692:	f7ff f999 	bl	80009c8 <HAL_GetTick>
 8001696:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001698:	e008      	b.n	80016ac <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800169a:	f7ff f995 	bl	80009c8 <HAL_GetTick>
 800169e:	4602      	mov	r2, r0
 80016a0:	693b      	ldr	r3, [r7, #16]
 80016a2:	1ad3      	subs	r3, r2, r3
 80016a4:	2b02      	cmp	r3, #2
 80016a6:	d901      	bls.n	80016ac <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80016a8:	2303      	movs	r3, #3
 80016aa:	e1b4      	b.n	8001a16 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016ac:	4b2b      	ldr	r3, [pc, #172]	; (800175c <HAL_RCC_OscConfig+0x274>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f003 0302 	and.w	r3, r3, #2
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d0f0      	beq.n	800169a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016b8:	4b28      	ldr	r3, [pc, #160]	; (800175c <HAL_RCC_OscConfig+0x274>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	691b      	ldr	r3, [r3, #16]
 80016c4:	00db      	lsls	r3, r3, #3
 80016c6:	4925      	ldr	r1, [pc, #148]	; (800175c <HAL_RCC_OscConfig+0x274>)
 80016c8:	4313      	orrs	r3, r2
 80016ca:	600b      	str	r3, [r1, #0]
 80016cc:	e015      	b.n	80016fa <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80016ce:	4b24      	ldr	r3, [pc, #144]	; (8001760 <HAL_RCC_OscConfig+0x278>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016d4:	f7ff f978 	bl	80009c8 <HAL_GetTick>
 80016d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016da:	e008      	b.n	80016ee <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80016dc:	f7ff f974 	bl	80009c8 <HAL_GetTick>
 80016e0:	4602      	mov	r2, r0
 80016e2:	693b      	ldr	r3, [r7, #16]
 80016e4:	1ad3      	subs	r3, r2, r3
 80016e6:	2b02      	cmp	r3, #2
 80016e8:	d901      	bls.n	80016ee <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80016ea:	2303      	movs	r3, #3
 80016ec:	e193      	b.n	8001a16 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016ee:	4b1b      	ldr	r3, [pc, #108]	; (800175c <HAL_RCC_OscConfig+0x274>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f003 0302 	and.w	r3, r3, #2
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d1f0      	bne.n	80016dc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f003 0308 	and.w	r3, r3, #8
 8001702:	2b00      	cmp	r3, #0
 8001704:	d036      	beq.n	8001774 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	695b      	ldr	r3, [r3, #20]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d016      	beq.n	800173c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800170e:	4b15      	ldr	r3, [pc, #84]	; (8001764 <HAL_RCC_OscConfig+0x27c>)
 8001710:	2201      	movs	r2, #1
 8001712:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001714:	f7ff f958 	bl	80009c8 <HAL_GetTick>
 8001718:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800171a:	e008      	b.n	800172e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800171c:	f7ff f954 	bl	80009c8 <HAL_GetTick>
 8001720:	4602      	mov	r2, r0
 8001722:	693b      	ldr	r3, [r7, #16]
 8001724:	1ad3      	subs	r3, r2, r3
 8001726:	2b02      	cmp	r3, #2
 8001728:	d901      	bls.n	800172e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800172a:	2303      	movs	r3, #3
 800172c:	e173      	b.n	8001a16 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800172e:	4b0b      	ldr	r3, [pc, #44]	; (800175c <HAL_RCC_OscConfig+0x274>)
 8001730:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001732:	f003 0302 	and.w	r3, r3, #2
 8001736:	2b00      	cmp	r3, #0
 8001738:	d0f0      	beq.n	800171c <HAL_RCC_OscConfig+0x234>
 800173a:	e01b      	b.n	8001774 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800173c:	4b09      	ldr	r3, [pc, #36]	; (8001764 <HAL_RCC_OscConfig+0x27c>)
 800173e:	2200      	movs	r2, #0
 8001740:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001742:	f7ff f941 	bl	80009c8 <HAL_GetTick>
 8001746:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001748:	e00e      	b.n	8001768 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800174a:	f7ff f93d 	bl	80009c8 <HAL_GetTick>
 800174e:	4602      	mov	r2, r0
 8001750:	693b      	ldr	r3, [r7, #16]
 8001752:	1ad3      	subs	r3, r2, r3
 8001754:	2b02      	cmp	r3, #2
 8001756:	d907      	bls.n	8001768 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001758:	2303      	movs	r3, #3
 800175a:	e15c      	b.n	8001a16 <HAL_RCC_OscConfig+0x52e>
 800175c:	40023800 	.word	0x40023800
 8001760:	42470000 	.word	0x42470000
 8001764:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001768:	4b8a      	ldr	r3, [pc, #552]	; (8001994 <HAL_RCC_OscConfig+0x4ac>)
 800176a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800176c:	f003 0302 	and.w	r3, r3, #2
 8001770:	2b00      	cmp	r3, #0
 8001772:	d1ea      	bne.n	800174a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f003 0304 	and.w	r3, r3, #4
 800177c:	2b00      	cmp	r3, #0
 800177e:	f000 8097 	beq.w	80018b0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001782:	2300      	movs	r3, #0
 8001784:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001786:	4b83      	ldr	r3, [pc, #524]	; (8001994 <HAL_RCC_OscConfig+0x4ac>)
 8001788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800178a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800178e:	2b00      	cmp	r3, #0
 8001790:	d10f      	bne.n	80017b2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001792:	2300      	movs	r3, #0
 8001794:	60bb      	str	r3, [r7, #8]
 8001796:	4b7f      	ldr	r3, [pc, #508]	; (8001994 <HAL_RCC_OscConfig+0x4ac>)
 8001798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800179a:	4a7e      	ldr	r2, [pc, #504]	; (8001994 <HAL_RCC_OscConfig+0x4ac>)
 800179c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017a0:	6413      	str	r3, [r2, #64]	; 0x40
 80017a2:	4b7c      	ldr	r3, [pc, #496]	; (8001994 <HAL_RCC_OscConfig+0x4ac>)
 80017a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017aa:	60bb      	str	r3, [r7, #8]
 80017ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80017ae:	2301      	movs	r3, #1
 80017b0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017b2:	4b79      	ldr	r3, [pc, #484]	; (8001998 <HAL_RCC_OscConfig+0x4b0>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d118      	bne.n	80017f0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80017be:	4b76      	ldr	r3, [pc, #472]	; (8001998 <HAL_RCC_OscConfig+0x4b0>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	4a75      	ldr	r2, [pc, #468]	; (8001998 <HAL_RCC_OscConfig+0x4b0>)
 80017c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017ca:	f7ff f8fd 	bl	80009c8 <HAL_GetTick>
 80017ce:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017d0:	e008      	b.n	80017e4 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017d2:	f7ff f8f9 	bl	80009c8 <HAL_GetTick>
 80017d6:	4602      	mov	r2, r0
 80017d8:	693b      	ldr	r3, [r7, #16]
 80017da:	1ad3      	subs	r3, r2, r3
 80017dc:	2b02      	cmp	r3, #2
 80017de:	d901      	bls.n	80017e4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80017e0:	2303      	movs	r3, #3
 80017e2:	e118      	b.n	8001a16 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017e4:	4b6c      	ldr	r3, [pc, #432]	; (8001998 <HAL_RCC_OscConfig+0x4b0>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d0f0      	beq.n	80017d2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	689b      	ldr	r3, [r3, #8]
 80017f4:	2b01      	cmp	r3, #1
 80017f6:	d106      	bne.n	8001806 <HAL_RCC_OscConfig+0x31e>
 80017f8:	4b66      	ldr	r3, [pc, #408]	; (8001994 <HAL_RCC_OscConfig+0x4ac>)
 80017fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017fc:	4a65      	ldr	r2, [pc, #404]	; (8001994 <HAL_RCC_OscConfig+0x4ac>)
 80017fe:	f043 0301 	orr.w	r3, r3, #1
 8001802:	6713      	str	r3, [r2, #112]	; 0x70
 8001804:	e01c      	b.n	8001840 <HAL_RCC_OscConfig+0x358>
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	689b      	ldr	r3, [r3, #8]
 800180a:	2b05      	cmp	r3, #5
 800180c:	d10c      	bne.n	8001828 <HAL_RCC_OscConfig+0x340>
 800180e:	4b61      	ldr	r3, [pc, #388]	; (8001994 <HAL_RCC_OscConfig+0x4ac>)
 8001810:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001812:	4a60      	ldr	r2, [pc, #384]	; (8001994 <HAL_RCC_OscConfig+0x4ac>)
 8001814:	f043 0304 	orr.w	r3, r3, #4
 8001818:	6713      	str	r3, [r2, #112]	; 0x70
 800181a:	4b5e      	ldr	r3, [pc, #376]	; (8001994 <HAL_RCC_OscConfig+0x4ac>)
 800181c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800181e:	4a5d      	ldr	r2, [pc, #372]	; (8001994 <HAL_RCC_OscConfig+0x4ac>)
 8001820:	f043 0301 	orr.w	r3, r3, #1
 8001824:	6713      	str	r3, [r2, #112]	; 0x70
 8001826:	e00b      	b.n	8001840 <HAL_RCC_OscConfig+0x358>
 8001828:	4b5a      	ldr	r3, [pc, #360]	; (8001994 <HAL_RCC_OscConfig+0x4ac>)
 800182a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800182c:	4a59      	ldr	r2, [pc, #356]	; (8001994 <HAL_RCC_OscConfig+0x4ac>)
 800182e:	f023 0301 	bic.w	r3, r3, #1
 8001832:	6713      	str	r3, [r2, #112]	; 0x70
 8001834:	4b57      	ldr	r3, [pc, #348]	; (8001994 <HAL_RCC_OscConfig+0x4ac>)
 8001836:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001838:	4a56      	ldr	r2, [pc, #344]	; (8001994 <HAL_RCC_OscConfig+0x4ac>)
 800183a:	f023 0304 	bic.w	r3, r3, #4
 800183e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	689b      	ldr	r3, [r3, #8]
 8001844:	2b00      	cmp	r3, #0
 8001846:	d015      	beq.n	8001874 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001848:	f7ff f8be 	bl	80009c8 <HAL_GetTick>
 800184c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800184e:	e00a      	b.n	8001866 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001850:	f7ff f8ba 	bl	80009c8 <HAL_GetTick>
 8001854:	4602      	mov	r2, r0
 8001856:	693b      	ldr	r3, [r7, #16]
 8001858:	1ad3      	subs	r3, r2, r3
 800185a:	f241 3288 	movw	r2, #5000	; 0x1388
 800185e:	4293      	cmp	r3, r2
 8001860:	d901      	bls.n	8001866 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001862:	2303      	movs	r3, #3
 8001864:	e0d7      	b.n	8001a16 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001866:	4b4b      	ldr	r3, [pc, #300]	; (8001994 <HAL_RCC_OscConfig+0x4ac>)
 8001868:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800186a:	f003 0302 	and.w	r3, r3, #2
 800186e:	2b00      	cmp	r3, #0
 8001870:	d0ee      	beq.n	8001850 <HAL_RCC_OscConfig+0x368>
 8001872:	e014      	b.n	800189e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001874:	f7ff f8a8 	bl	80009c8 <HAL_GetTick>
 8001878:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800187a:	e00a      	b.n	8001892 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800187c:	f7ff f8a4 	bl	80009c8 <HAL_GetTick>
 8001880:	4602      	mov	r2, r0
 8001882:	693b      	ldr	r3, [r7, #16]
 8001884:	1ad3      	subs	r3, r2, r3
 8001886:	f241 3288 	movw	r2, #5000	; 0x1388
 800188a:	4293      	cmp	r3, r2
 800188c:	d901      	bls.n	8001892 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800188e:	2303      	movs	r3, #3
 8001890:	e0c1      	b.n	8001a16 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001892:	4b40      	ldr	r3, [pc, #256]	; (8001994 <HAL_RCC_OscConfig+0x4ac>)
 8001894:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001896:	f003 0302 	and.w	r3, r3, #2
 800189a:	2b00      	cmp	r3, #0
 800189c:	d1ee      	bne.n	800187c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800189e:	7dfb      	ldrb	r3, [r7, #23]
 80018a0:	2b01      	cmp	r3, #1
 80018a2:	d105      	bne.n	80018b0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018a4:	4b3b      	ldr	r3, [pc, #236]	; (8001994 <HAL_RCC_OscConfig+0x4ac>)
 80018a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018a8:	4a3a      	ldr	r2, [pc, #232]	; (8001994 <HAL_RCC_OscConfig+0x4ac>)
 80018aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80018ae:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	699b      	ldr	r3, [r3, #24]
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	f000 80ad 	beq.w	8001a14 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80018ba:	4b36      	ldr	r3, [pc, #216]	; (8001994 <HAL_RCC_OscConfig+0x4ac>)
 80018bc:	689b      	ldr	r3, [r3, #8]
 80018be:	f003 030c 	and.w	r3, r3, #12
 80018c2:	2b08      	cmp	r3, #8
 80018c4:	d060      	beq.n	8001988 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	699b      	ldr	r3, [r3, #24]
 80018ca:	2b02      	cmp	r3, #2
 80018cc:	d145      	bne.n	800195a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018ce:	4b33      	ldr	r3, [pc, #204]	; (800199c <HAL_RCC_OscConfig+0x4b4>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018d4:	f7ff f878 	bl	80009c8 <HAL_GetTick>
 80018d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018da:	e008      	b.n	80018ee <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018dc:	f7ff f874 	bl	80009c8 <HAL_GetTick>
 80018e0:	4602      	mov	r2, r0
 80018e2:	693b      	ldr	r3, [r7, #16]
 80018e4:	1ad3      	subs	r3, r2, r3
 80018e6:	2b02      	cmp	r3, #2
 80018e8:	d901      	bls.n	80018ee <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80018ea:	2303      	movs	r3, #3
 80018ec:	e093      	b.n	8001a16 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018ee:	4b29      	ldr	r3, [pc, #164]	; (8001994 <HAL_RCC_OscConfig+0x4ac>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d1f0      	bne.n	80018dc <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	69da      	ldr	r2, [r3, #28]
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	6a1b      	ldr	r3, [r3, #32]
 8001902:	431a      	orrs	r2, r3
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001908:	019b      	lsls	r3, r3, #6
 800190a:	431a      	orrs	r2, r3
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001910:	085b      	lsrs	r3, r3, #1
 8001912:	3b01      	subs	r3, #1
 8001914:	041b      	lsls	r3, r3, #16
 8001916:	431a      	orrs	r2, r3
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800191c:	061b      	lsls	r3, r3, #24
 800191e:	431a      	orrs	r2, r3
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001924:	071b      	lsls	r3, r3, #28
 8001926:	491b      	ldr	r1, [pc, #108]	; (8001994 <HAL_RCC_OscConfig+0x4ac>)
 8001928:	4313      	orrs	r3, r2
 800192a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800192c:	4b1b      	ldr	r3, [pc, #108]	; (800199c <HAL_RCC_OscConfig+0x4b4>)
 800192e:	2201      	movs	r2, #1
 8001930:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001932:	f7ff f849 	bl	80009c8 <HAL_GetTick>
 8001936:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001938:	e008      	b.n	800194c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800193a:	f7ff f845 	bl	80009c8 <HAL_GetTick>
 800193e:	4602      	mov	r2, r0
 8001940:	693b      	ldr	r3, [r7, #16]
 8001942:	1ad3      	subs	r3, r2, r3
 8001944:	2b02      	cmp	r3, #2
 8001946:	d901      	bls.n	800194c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001948:	2303      	movs	r3, #3
 800194a:	e064      	b.n	8001a16 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800194c:	4b11      	ldr	r3, [pc, #68]	; (8001994 <HAL_RCC_OscConfig+0x4ac>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001954:	2b00      	cmp	r3, #0
 8001956:	d0f0      	beq.n	800193a <HAL_RCC_OscConfig+0x452>
 8001958:	e05c      	b.n	8001a14 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800195a:	4b10      	ldr	r3, [pc, #64]	; (800199c <HAL_RCC_OscConfig+0x4b4>)
 800195c:	2200      	movs	r2, #0
 800195e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001960:	f7ff f832 	bl	80009c8 <HAL_GetTick>
 8001964:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001966:	e008      	b.n	800197a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001968:	f7ff f82e 	bl	80009c8 <HAL_GetTick>
 800196c:	4602      	mov	r2, r0
 800196e:	693b      	ldr	r3, [r7, #16]
 8001970:	1ad3      	subs	r3, r2, r3
 8001972:	2b02      	cmp	r3, #2
 8001974:	d901      	bls.n	800197a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001976:	2303      	movs	r3, #3
 8001978:	e04d      	b.n	8001a16 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800197a:	4b06      	ldr	r3, [pc, #24]	; (8001994 <HAL_RCC_OscConfig+0x4ac>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001982:	2b00      	cmp	r3, #0
 8001984:	d1f0      	bne.n	8001968 <HAL_RCC_OscConfig+0x480>
 8001986:	e045      	b.n	8001a14 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	699b      	ldr	r3, [r3, #24]
 800198c:	2b01      	cmp	r3, #1
 800198e:	d107      	bne.n	80019a0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001990:	2301      	movs	r3, #1
 8001992:	e040      	b.n	8001a16 <HAL_RCC_OscConfig+0x52e>
 8001994:	40023800 	.word	0x40023800
 8001998:	40007000 	.word	0x40007000
 800199c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80019a0:	4b1f      	ldr	r3, [pc, #124]	; (8001a20 <HAL_RCC_OscConfig+0x538>)
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	699b      	ldr	r3, [r3, #24]
 80019aa:	2b01      	cmp	r3, #1
 80019ac:	d030      	beq.n	8001a10 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80019b8:	429a      	cmp	r2, r3
 80019ba:	d129      	bne.n	8001a10 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019c6:	429a      	cmp	r2, r3
 80019c8:	d122      	bne.n	8001a10 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80019ca:	68fa      	ldr	r2, [r7, #12]
 80019cc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80019d0:	4013      	ands	r3, r2
 80019d2:	687a      	ldr	r2, [r7, #4]
 80019d4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80019d6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80019d8:	4293      	cmp	r3, r2
 80019da:	d119      	bne.n	8001a10 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019e6:	085b      	lsrs	r3, r3, #1
 80019e8:	3b01      	subs	r3, #1
 80019ea:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80019ec:	429a      	cmp	r2, r3
 80019ee:	d10f      	bne.n	8001a10 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019fa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80019fc:	429a      	cmp	r2, r3
 80019fe:	d107      	bne.n	8001a10 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a0a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001a0c:	429a      	cmp	r2, r3
 8001a0e:	d001      	beq.n	8001a14 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8001a10:	2301      	movs	r3, #1
 8001a12:	e000      	b.n	8001a16 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001a14:	2300      	movs	r3, #0
}
 8001a16:	4618      	mov	r0, r3
 8001a18:	3718      	adds	r7, #24
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}
 8001a1e:	bf00      	nop
 8001a20:	40023800 	.word	0x40023800

08001a24 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b082      	sub	sp, #8
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d101      	bne.n	8001a36 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001a32:	2301      	movs	r3, #1
 8001a34:	e03f      	b.n	8001ab6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a3c:	b2db      	uxtb	r3, r3
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d106      	bne.n	8001a50 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	2200      	movs	r2, #0
 8001a46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001a4a:	6878      	ldr	r0, [r7, #4]
 8001a4c:	f7fe fea8 	bl	80007a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	2224      	movs	r2, #36	; 0x24
 8001a54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	68da      	ldr	r2, [r3, #12]
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001a66:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001a68:	6878      	ldr	r0, [r7, #4]
 8001a6a:	f000 f929 	bl	8001cc0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	691a      	ldr	r2, [r3, #16]
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001a7c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	695a      	ldr	r2, [r3, #20]
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001a8c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	68da      	ldr	r2, [r3, #12]
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001a9c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	2220      	movs	r2, #32
 8001aa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2220      	movs	r2, #32
 8001ab0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001ab4:	2300      	movs	r3, #0
}
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	3708      	adds	r7, #8
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}

08001abe <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001abe:	b580      	push	{r7, lr}
 8001ac0:	b08a      	sub	sp, #40	; 0x28
 8001ac2:	af02      	add	r7, sp, #8
 8001ac4:	60f8      	str	r0, [r7, #12]
 8001ac6:	60b9      	str	r1, [r7, #8]
 8001ac8:	603b      	str	r3, [r7, #0]
 8001aca:	4613      	mov	r3, r2
 8001acc:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ad8:	b2db      	uxtb	r3, r3
 8001ada:	2b20      	cmp	r3, #32
 8001adc:	d17c      	bne.n	8001bd8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001ade:	68bb      	ldr	r3, [r7, #8]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d002      	beq.n	8001aea <HAL_UART_Transmit+0x2c>
 8001ae4:	88fb      	ldrh	r3, [r7, #6]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d101      	bne.n	8001aee <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001aea:	2301      	movs	r3, #1
 8001aec:	e075      	b.n	8001bda <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001af4:	2b01      	cmp	r3, #1
 8001af6:	d101      	bne.n	8001afc <HAL_UART_Transmit+0x3e>
 8001af8:	2302      	movs	r3, #2
 8001afa:	e06e      	b.n	8001bda <HAL_UART_Transmit+0x11c>
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	2201      	movs	r2, #1
 8001b00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	2200      	movs	r2, #0
 8001b08:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	2221      	movs	r2, #33	; 0x21
 8001b0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001b12:	f7fe ff59 	bl	80009c8 <HAL_GetTick>
 8001b16:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	88fa      	ldrh	r2, [r7, #6]
 8001b1c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	88fa      	ldrh	r2, [r7, #6]
 8001b22:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	689b      	ldr	r3, [r3, #8]
 8001b28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001b2c:	d108      	bne.n	8001b40 <HAL_UART_Transmit+0x82>
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	691b      	ldr	r3, [r3, #16]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d104      	bne.n	8001b40 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001b36:	2300      	movs	r3, #0
 8001b38:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001b3a:	68bb      	ldr	r3, [r7, #8]
 8001b3c:	61bb      	str	r3, [r7, #24]
 8001b3e:	e003      	b.n	8001b48 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001b40:	68bb      	ldr	r3, [r7, #8]
 8001b42:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001b44:	2300      	movs	r3, #0
 8001b46:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8001b50:	e02a      	b.n	8001ba8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	9300      	str	r3, [sp, #0]
 8001b56:	697b      	ldr	r3, [r7, #20]
 8001b58:	2200      	movs	r2, #0
 8001b5a:	2180      	movs	r1, #128	; 0x80
 8001b5c:	68f8      	ldr	r0, [r7, #12]
 8001b5e:	f000 f840 	bl	8001be2 <UART_WaitOnFlagUntilTimeout>
 8001b62:	4603      	mov	r3, r0
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d001      	beq.n	8001b6c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001b68:	2303      	movs	r3, #3
 8001b6a:	e036      	b.n	8001bda <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001b6c:	69fb      	ldr	r3, [r7, #28]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d10b      	bne.n	8001b8a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001b72:	69bb      	ldr	r3, [r7, #24]
 8001b74:	881b      	ldrh	r3, [r3, #0]
 8001b76:	461a      	mov	r2, r3
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001b80:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001b82:	69bb      	ldr	r3, [r7, #24]
 8001b84:	3302      	adds	r3, #2
 8001b86:	61bb      	str	r3, [r7, #24]
 8001b88:	e007      	b.n	8001b9a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001b8a:	69fb      	ldr	r3, [r7, #28]
 8001b8c:	781a      	ldrb	r2, [r3, #0]
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001b94:	69fb      	ldr	r3, [r7, #28]
 8001b96:	3301      	adds	r3, #1
 8001b98:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001b9e:	b29b      	uxth	r3, r3
 8001ba0:	3b01      	subs	r3, #1
 8001ba2:	b29a      	uxth	r2, r3
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001bac:	b29b      	uxth	r3, r3
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d1cf      	bne.n	8001b52 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	9300      	str	r3, [sp, #0]
 8001bb6:	697b      	ldr	r3, [r7, #20]
 8001bb8:	2200      	movs	r2, #0
 8001bba:	2140      	movs	r1, #64	; 0x40
 8001bbc:	68f8      	ldr	r0, [r7, #12]
 8001bbe:	f000 f810 	bl	8001be2 <UART_WaitOnFlagUntilTimeout>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d001      	beq.n	8001bcc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8001bc8:	2303      	movs	r3, #3
 8001bca:	e006      	b.n	8001bda <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	2220      	movs	r2, #32
 8001bd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	e000      	b.n	8001bda <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001bd8:	2302      	movs	r3, #2
  }
}
 8001bda:	4618      	mov	r0, r3
 8001bdc:	3720      	adds	r7, #32
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}

08001be2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8001be2:	b580      	push	{r7, lr}
 8001be4:	b090      	sub	sp, #64	; 0x40
 8001be6:	af00      	add	r7, sp, #0
 8001be8:	60f8      	str	r0, [r7, #12]
 8001bea:	60b9      	str	r1, [r7, #8]
 8001bec:	603b      	str	r3, [r7, #0]
 8001bee:	4613      	mov	r3, r2
 8001bf0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001bf2:	e050      	b.n	8001c96 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001bf4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001bf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bfa:	d04c      	beq.n	8001c96 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001bfc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d007      	beq.n	8001c12 <UART_WaitOnFlagUntilTimeout+0x30>
 8001c02:	f7fe fee1 	bl	80009c8 <HAL_GetTick>
 8001c06:	4602      	mov	r2, r0
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	1ad3      	subs	r3, r2, r3
 8001c0c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001c0e:	429a      	cmp	r2, r3
 8001c10:	d241      	bcs.n	8001c96 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	330c      	adds	r3, #12
 8001c18:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001c1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c1c:	e853 3f00 	ldrex	r3, [r3]
 8001c20:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8001c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c24:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8001c28:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	330c      	adds	r3, #12
 8001c30:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001c32:	637a      	str	r2, [r7, #52]	; 0x34
 8001c34:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001c36:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001c38:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001c3a:	e841 2300 	strex	r3, r2, [r1]
 8001c3e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8001c40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d1e5      	bne.n	8001c12 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	3314      	adds	r3, #20
 8001c4c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001c4e:	697b      	ldr	r3, [r7, #20]
 8001c50:	e853 3f00 	ldrex	r3, [r3]
 8001c54:	613b      	str	r3, [r7, #16]
   return(result);
 8001c56:	693b      	ldr	r3, [r7, #16]
 8001c58:	f023 0301 	bic.w	r3, r3, #1
 8001c5c:	63bb      	str	r3, [r7, #56]	; 0x38
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	3314      	adds	r3, #20
 8001c64:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001c66:	623a      	str	r2, [r7, #32]
 8001c68:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001c6a:	69f9      	ldr	r1, [r7, #28]
 8001c6c:	6a3a      	ldr	r2, [r7, #32]
 8001c6e:	e841 2300 	strex	r3, r2, [r1]
 8001c72:	61bb      	str	r3, [r7, #24]
   return(result);
 8001c74:	69bb      	ldr	r3, [r7, #24]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d1e5      	bne.n	8001c46 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	2220      	movs	r2, #32
 8001c7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	2220      	movs	r2, #32
 8001c86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8001c92:	2303      	movs	r3, #3
 8001c94:	e00f      	b.n	8001cb6 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	681a      	ldr	r2, [r3, #0]
 8001c9c:	68bb      	ldr	r3, [r7, #8]
 8001c9e:	4013      	ands	r3, r2
 8001ca0:	68ba      	ldr	r2, [r7, #8]
 8001ca2:	429a      	cmp	r2, r3
 8001ca4:	bf0c      	ite	eq
 8001ca6:	2301      	moveq	r3, #1
 8001ca8:	2300      	movne	r3, #0
 8001caa:	b2db      	uxtb	r3, r3
 8001cac:	461a      	mov	r2, r3
 8001cae:	79fb      	ldrb	r3, [r7, #7]
 8001cb0:	429a      	cmp	r2, r3
 8001cb2:	d09f      	beq.n	8001bf4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001cb4:	2300      	movs	r3, #0
}
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	3740      	adds	r7, #64	; 0x40
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}
	...

08001cc0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001cc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001cc4:	b09f      	sub	sp, #124	; 0x7c
 8001cc6:	af00      	add	r7, sp, #0
 8001cc8:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001cca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	691b      	ldr	r3, [r3, #16]
 8001cd0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8001cd4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001cd6:	68d9      	ldr	r1, [r3, #12]
 8001cd8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001cda:	681a      	ldr	r2, [r3, #0]
 8001cdc:	ea40 0301 	orr.w	r3, r0, r1
 8001ce0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001ce2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001ce4:	689a      	ldr	r2, [r3, #8]
 8001ce6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001ce8:	691b      	ldr	r3, [r3, #16]
 8001cea:	431a      	orrs	r2, r3
 8001cec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001cee:	695b      	ldr	r3, [r3, #20]
 8001cf0:	431a      	orrs	r2, r3
 8001cf2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001cf4:	69db      	ldr	r3, [r3, #28]
 8001cf6:	4313      	orrs	r3, r2
 8001cf8:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8001cfa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	68db      	ldr	r3, [r3, #12]
 8001d00:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8001d04:	f021 010c 	bic.w	r1, r1, #12
 8001d08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001d0a:	681a      	ldr	r2, [r3, #0]
 8001d0c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001d0e:	430b      	orrs	r3, r1
 8001d10:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001d12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	695b      	ldr	r3, [r3, #20]
 8001d18:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8001d1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001d1e:	6999      	ldr	r1, [r3, #24]
 8001d20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001d22:	681a      	ldr	r2, [r3, #0]
 8001d24:	ea40 0301 	orr.w	r3, r0, r1
 8001d28:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001d2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001d2c:	681a      	ldr	r2, [r3, #0]
 8001d2e:	4bc5      	ldr	r3, [pc, #788]	; (8002044 <UART_SetConfig+0x384>)
 8001d30:	429a      	cmp	r2, r3
 8001d32:	d004      	beq.n	8001d3e <UART_SetConfig+0x7e>
 8001d34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001d36:	681a      	ldr	r2, [r3, #0]
 8001d38:	4bc3      	ldr	r3, [pc, #780]	; (8002048 <UART_SetConfig+0x388>)
 8001d3a:	429a      	cmp	r2, r3
 8001d3c:	d103      	bne.n	8001d46 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001d3e:	f7ff fa0d 	bl	800115c <HAL_RCC_GetPCLK2Freq>
 8001d42:	6778      	str	r0, [r7, #116]	; 0x74
 8001d44:	e002      	b.n	8001d4c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8001d46:	f7ff f9f5 	bl	8001134 <HAL_RCC_GetPCLK1Freq>
 8001d4a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001d4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001d4e:	69db      	ldr	r3, [r3, #28]
 8001d50:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001d54:	f040 80b6 	bne.w	8001ec4 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001d58:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001d5a:	461c      	mov	r4, r3
 8001d5c:	f04f 0500 	mov.w	r5, #0
 8001d60:	4622      	mov	r2, r4
 8001d62:	462b      	mov	r3, r5
 8001d64:	1891      	adds	r1, r2, r2
 8001d66:	6439      	str	r1, [r7, #64]	; 0x40
 8001d68:	415b      	adcs	r3, r3
 8001d6a:	647b      	str	r3, [r7, #68]	; 0x44
 8001d6c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001d70:	1912      	adds	r2, r2, r4
 8001d72:	eb45 0303 	adc.w	r3, r5, r3
 8001d76:	f04f 0000 	mov.w	r0, #0
 8001d7a:	f04f 0100 	mov.w	r1, #0
 8001d7e:	00d9      	lsls	r1, r3, #3
 8001d80:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001d84:	00d0      	lsls	r0, r2, #3
 8001d86:	4602      	mov	r2, r0
 8001d88:	460b      	mov	r3, r1
 8001d8a:	1911      	adds	r1, r2, r4
 8001d8c:	6639      	str	r1, [r7, #96]	; 0x60
 8001d8e:	416b      	adcs	r3, r5
 8001d90:	667b      	str	r3, [r7, #100]	; 0x64
 8001d92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	461a      	mov	r2, r3
 8001d98:	f04f 0300 	mov.w	r3, #0
 8001d9c:	1891      	adds	r1, r2, r2
 8001d9e:	63b9      	str	r1, [r7, #56]	; 0x38
 8001da0:	415b      	adcs	r3, r3
 8001da2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001da4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001da8:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8001dac:	f7fe fa2a 	bl	8000204 <__aeabi_uldivmod>
 8001db0:	4602      	mov	r2, r0
 8001db2:	460b      	mov	r3, r1
 8001db4:	4ba5      	ldr	r3, [pc, #660]	; (800204c <UART_SetConfig+0x38c>)
 8001db6:	fba3 2302 	umull	r2, r3, r3, r2
 8001dba:	095b      	lsrs	r3, r3, #5
 8001dbc:	011e      	lsls	r6, r3, #4
 8001dbe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001dc0:	461c      	mov	r4, r3
 8001dc2:	f04f 0500 	mov.w	r5, #0
 8001dc6:	4622      	mov	r2, r4
 8001dc8:	462b      	mov	r3, r5
 8001dca:	1891      	adds	r1, r2, r2
 8001dcc:	6339      	str	r1, [r7, #48]	; 0x30
 8001dce:	415b      	adcs	r3, r3
 8001dd0:	637b      	str	r3, [r7, #52]	; 0x34
 8001dd2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001dd6:	1912      	adds	r2, r2, r4
 8001dd8:	eb45 0303 	adc.w	r3, r5, r3
 8001ddc:	f04f 0000 	mov.w	r0, #0
 8001de0:	f04f 0100 	mov.w	r1, #0
 8001de4:	00d9      	lsls	r1, r3, #3
 8001de6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001dea:	00d0      	lsls	r0, r2, #3
 8001dec:	4602      	mov	r2, r0
 8001dee:	460b      	mov	r3, r1
 8001df0:	1911      	adds	r1, r2, r4
 8001df2:	65b9      	str	r1, [r7, #88]	; 0x58
 8001df4:	416b      	adcs	r3, r5
 8001df6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001df8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	461a      	mov	r2, r3
 8001dfe:	f04f 0300 	mov.w	r3, #0
 8001e02:	1891      	adds	r1, r2, r2
 8001e04:	62b9      	str	r1, [r7, #40]	; 0x28
 8001e06:	415b      	adcs	r3, r3
 8001e08:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e0a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001e0e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8001e12:	f7fe f9f7 	bl	8000204 <__aeabi_uldivmod>
 8001e16:	4602      	mov	r2, r0
 8001e18:	460b      	mov	r3, r1
 8001e1a:	4b8c      	ldr	r3, [pc, #560]	; (800204c <UART_SetConfig+0x38c>)
 8001e1c:	fba3 1302 	umull	r1, r3, r3, r2
 8001e20:	095b      	lsrs	r3, r3, #5
 8001e22:	2164      	movs	r1, #100	; 0x64
 8001e24:	fb01 f303 	mul.w	r3, r1, r3
 8001e28:	1ad3      	subs	r3, r2, r3
 8001e2a:	00db      	lsls	r3, r3, #3
 8001e2c:	3332      	adds	r3, #50	; 0x32
 8001e2e:	4a87      	ldr	r2, [pc, #540]	; (800204c <UART_SetConfig+0x38c>)
 8001e30:	fba2 2303 	umull	r2, r3, r2, r3
 8001e34:	095b      	lsrs	r3, r3, #5
 8001e36:	005b      	lsls	r3, r3, #1
 8001e38:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001e3c:	441e      	add	r6, r3
 8001e3e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001e40:	4618      	mov	r0, r3
 8001e42:	f04f 0100 	mov.w	r1, #0
 8001e46:	4602      	mov	r2, r0
 8001e48:	460b      	mov	r3, r1
 8001e4a:	1894      	adds	r4, r2, r2
 8001e4c:	623c      	str	r4, [r7, #32]
 8001e4e:	415b      	adcs	r3, r3
 8001e50:	627b      	str	r3, [r7, #36]	; 0x24
 8001e52:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001e56:	1812      	adds	r2, r2, r0
 8001e58:	eb41 0303 	adc.w	r3, r1, r3
 8001e5c:	f04f 0400 	mov.w	r4, #0
 8001e60:	f04f 0500 	mov.w	r5, #0
 8001e64:	00dd      	lsls	r5, r3, #3
 8001e66:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8001e6a:	00d4      	lsls	r4, r2, #3
 8001e6c:	4622      	mov	r2, r4
 8001e6e:	462b      	mov	r3, r5
 8001e70:	1814      	adds	r4, r2, r0
 8001e72:	653c      	str	r4, [r7, #80]	; 0x50
 8001e74:	414b      	adcs	r3, r1
 8001e76:	657b      	str	r3, [r7, #84]	; 0x54
 8001e78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	461a      	mov	r2, r3
 8001e7e:	f04f 0300 	mov.w	r3, #0
 8001e82:	1891      	adds	r1, r2, r2
 8001e84:	61b9      	str	r1, [r7, #24]
 8001e86:	415b      	adcs	r3, r3
 8001e88:	61fb      	str	r3, [r7, #28]
 8001e8a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001e8e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8001e92:	f7fe f9b7 	bl	8000204 <__aeabi_uldivmod>
 8001e96:	4602      	mov	r2, r0
 8001e98:	460b      	mov	r3, r1
 8001e9a:	4b6c      	ldr	r3, [pc, #432]	; (800204c <UART_SetConfig+0x38c>)
 8001e9c:	fba3 1302 	umull	r1, r3, r3, r2
 8001ea0:	095b      	lsrs	r3, r3, #5
 8001ea2:	2164      	movs	r1, #100	; 0x64
 8001ea4:	fb01 f303 	mul.w	r3, r1, r3
 8001ea8:	1ad3      	subs	r3, r2, r3
 8001eaa:	00db      	lsls	r3, r3, #3
 8001eac:	3332      	adds	r3, #50	; 0x32
 8001eae:	4a67      	ldr	r2, [pc, #412]	; (800204c <UART_SetConfig+0x38c>)
 8001eb0:	fba2 2303 	umull	r2, r3, r2, r3
 8001eb4:	095b      	lsrs	r3, r3, #5
 8001eb6:	f003 0207 	and.w	r2, r3, #7
 8001eba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4432      	add	r2, r6
 8001ec0:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8001ec2:	e0b9      	b.n	8002038 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001ec4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001ec6:	461c      	mov	r4, r3
 8001ec8:	f04f 0500 	mov.w	r5, #0
 8001ecc:	4622      	mov	r2, r4
 8001ece:	462b      	mov	r3, r5
 8001ed0:	1891      	adds	r1, r2, r2
 8001ed2:	6139      	str	r1, [r7, #16]
 8001ed4:	415b      	adcs	r3, r3
 8001ed6:	617b      	str	r3, [r7, #20]
 8001ed8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001edc:	1912      	adds	r2, r2, r4
 8001ede:	eb45 0303 	adc.w	r3, r5, r3
 8001ee2:	f04f 0000 	mov.w	r0, #0
 8001ee6:	f04f 0100 	mov.w	r1, #0
 8001eea:	00d9      	lsls	r1, r3, #3
 8001eec:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001ef0:	00d0      	lsls	r0, r2, #3
 8001ef2:	4602      	mov	r2, r0
 8001ef4:	460b      	mov	r3, r1
 8001ef6:	eb12 0804 	adds.w	r8, r2, r4
 8001efa:	eb43 0905 	adc.w	r9, r3, r5
 8001efe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	4618      	mov	r0, r3
 8001f04:	f04f 0100 	mov.w	r1, #0
 8001f08:	f04f 0200 	mov.w	r2, #0
 8001f0c:	f04f 0300 	mov.w	r3, #0
 8001f10:	008b      	lsls	r3, r1, #2
 8001f12:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8001f16:	0082      	lsls	r2, r0, #2
 8001f18:	4640      	mov	r0, r8
 8001f1a:	4649      	mov	r1, r9
 8001f1c:	f7fe f972 	bl	8000204 <__aeabi_uldivmod>
 8001f20:	4602      	mov	r2, r0
 8001f22:	460b      	mov	r3, r1
 8001f24:	4b49      	ldr	r3, [pc, #292]	; (800204c <UART_SetConfig+0x38c>)
 8001f26:	fba3 2302 	umull	r2, r3, r3, r2
 8001f2a:	095b      	lsrs	r3, r3, #5
 8001f2c:	011e      	lsls	r6, r3, #4
 8001f2e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001f30:	4618      	mov	r0, r3
 8001f32:	f04f 0100 	mov.w	r1, #0
 8001f36:	4602      	mov	r2, r0
 8001f38:	460b      	mov	r3, r1
 8001f3a:	1894      	adds	r4, r2, r2
 8001f3c:	60bc      	str	r4, [r7, #8]
 8001f3e:	415b      	adcs	r3, r3
 8001f40:	60fb      	str	r3, [r7, #12]
 8001f42:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001f46:	1812      	adds	r2, r2, r0
 8001f48:	eb41 0303 	adc.w	r3, r1, r3
 8001f4c:	f04f 0400 	mov.w	r4, #0
 8001f50:	f04f 0500 	mov.w	r5, #0
 8001f54:	00dd      	lsls	r5, r3, #3
 8001f56:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8001f5a:	00d4      	lsls	r4, r2, #3
 8001f5c:	4622      	mov	r2, r4
 8001f5e:	462b      	mov	r3, r5
 8001f60:	1814      	adds	r4, r2, r0
 8001f62:	64bc      	str	r4, [r7, #72]	; 0x48
 8001f64:	414b      	adcs	r3, r1
 8001f66:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001f68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	f04f 0100 	mov.w	r1, #0
 8001f72:	f04f 0200 	mov.w	r2, #0
 8001f76:	f04f 0300 	mov.w	r3, #0
 8001f7a:	008b      	lsls	r3, r1, #2
 8001f7c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8001f80:	0082      	lsls	r2, r0, #2
 8001f82:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8001f86:	f7fe f93d 	bl	8000204 <__aeabi_uldivmod>
 8001f8a:	4602      	mov	r2, r0
 8001f8c:	460b      	mov	r3, r1
 8001f8e:	4b2f      	ldr	r3, [pc, #188]	; (800204c <UART_SetConfig+0x38c>)
 8001f90:	fba3 1302 	umull	r1, r3, r3, r2
 8001f94:	095b      	lsrs	r3, r3, #5
 8001f96:	2164      	movs	r1, #100	; 0x64
 8001f98:	fb01 f303 	mul.w	r3, r1, r3
 8001f9c:	1ad3      	subs	r3, r2, r3
 8001f9e:	011b      	lsls	r3, r3, #4
 8001fa0:	3332      	adds	r3, #50	; 0x32
 8001fa2:	4a2a      	ldr	r2, [pc, #168]	; (800204c <UART_SetConfig+0x38c>)
 8001fa4:	fba2 2303 	umull	r2, r3, r2, r3
 8001fa8:	095b      	lsrs	r3, r3, #5
 8001faa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001fae:	441e      	add	r6, r3
 8001fb0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	f04f 0100 	mov.w	r1, #0
 8001fb8:	4602      	mov	r2, r0
 8001fba:	460b      	mov	r3, r1
 8001fbc:	1894      	adds	r4, r2, r2
 8001fbe:	603c      	str	r4, [r7, #0]
 8001fc0:	415b      	adcs	r3, r3
 8001fc2:	607b      	str	r3, [r7, #4]
 8001fc4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001fc8:	1812      	adds	r2, r2, r0
 8001fca:	eb41 0303 	adc.w	r3, r1, r3
 8001fce:	f04f 0400 	mov.w	r4, #0
 8001fd2:	f04f 0500 	mov.w	r5, #0
 8001fd6:	00dd      	lsls	r5, r3, #3
 8001fd8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8001fdc:	00d4      	lsls	r4, r2, #3
 8001fde:	4622      	mov	r2, r4
 8001fe0:	462b      	mov	r3, r5
 8001fe2:	eb12 0a00 	adds.w	sl, r2, r0
 8001fe6:	eb43 0b01 	adc.w	fp, r3, r1
 8001fea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	4618      	mov	r0, r3
 8001ff0:	f04f 0100 	mov.w	r1, #0
 8001ff4:	f04f 0200 	mov.w	r2, #0
 8001ff8:	f04f 0300 	mov.w	r3, #0
 8001ffc:	008b      	lsls	r3, r1, #2
 8001ffe:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002002:	0082      	lsls	r2, r0, #2
 8002004:	4650      	mov	r0, sl
 8002006:	4659      	mov	r1, fp
 8002008:	f7fe f8fc 	bl	8000204 <__aeabi_uldivmod>
 800200c:	4602      	mov	r2, r0
 800200e:	460b      	mov	r3, r1
 8002010:	4b0e      	ldr	r3, [pc, #56]	; (800204c <UART_SetConfig+0x38c>)
 8002012:	fba3 1302 	umull	r1, r3, r3, r2
 8002016:	095b      	lsrs	r3, r3, #5
 8002018:	2164      	movs	r1, #100	; 0x64
 800201a:	fb01 f303 	mul.w	r3, r1, r3
 800201e:	1ad3      	subs	r3, r2, r3
 8002020:	011b      	lsls	r3, r3, #4
 8002022:	3332      	adds	r3, #50	; 0x32
 8002024:	4a09      	ldr	r2, [pc, #36]	; (800204c <UART_SetConfig+0x38c>)
 8002026:	fba2 2303 	umull	r2, r3, r2, r3
 800202a:	095b      	lsrs	r3, r3, #5
 800202c:	f003 020f 	and.w	r2, r3, #15
 8002030:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4432      	add	r2, r6
 8002036:	609a      	str	r2, [r3, #8]
}
 8002038:	bf00      	nop
 800203a:	377c      	adds	r7, #124	; 0x7c
 800203c:	46bd      	mov	sp, r7
 800203e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002042:	bf00      	nop
 8002044:	40011000 	.word	0x40011000
 8002048:	40011400 	.word	0x40011400
 800204c:	51eb851f 	.word	0x51eb851f

08002050 <__libc_init_array>:
 8002050:	b570      	push	{r4, r5, r6, lr}
 8002052:	4d0d      	ldr	r5, [pc, #52]	; (8002088 <__libc_init_array+0x38>)
 8002054:	4c0d      	ldr	r4, [pc, #52]	; (800208c <__libc_init_array+0x3c>)
 8002056:	1b64      	subs	r4, r4, r5
 8002058:	10a4      	asrs	r4, r4, #2
 800205a:	2600      	movs	r6, #0
 800205c:	42a6      	cmp	r6, r4
 800205e:	d109      	bne.n	8002074 <__libc_init_array+0x24>
 8002060:	4d0b      	ldr	r5, [pc, #44]	; (8002090 <__libc_init_array+0x40>)
 8002062:	4c0c      	ldr	r4, [pc, #48]	; (8002094 <__libc_init_array+0x44>)
 8002064:	f000 f820 	bl	80020a8 <_init>
 8002068:	1b64      	subs	r4, r4, r5
 800206a:	10a4      	asrs	r4, r4, #2
 800206c:	2600      	movs	r6, #0
 800206e:	42a6      	cmp	r6, r4
 8002070:	d105      	bne.n	800207e <__libc_init_array+0x2e>
 8002072:	bd70      	pop	{r4, r5, r6, pc}
 8002074:	f855 3b04 	ldr.w	r3, [r5], #4
 8002078:	4798      	blx	r3
 800207a:	3601      	adds	r6, #1
 800207c:	e7ee      	b.n	800205c <__libc_init_array+0xc>
 800207e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002082:	4798      	blx	r3
 8002084:	3601      	adds	r6, #1
 8002086:	e7f2      	b.n	800206e <__libc_init_array+0x1e>
 8002088:	080020ec 	.word	0x080020ec
 800208c:	080020ec 	.word	0x080020ec
 8002090:	080020ec 	.word	0x080020ec
 8002094:	080020f0 	.word	0x080020f0

08002098 <memset>:
 8002098:	4402      	add	r2, r0
 800209a:	4603      	mov	r3, r0
 800209c:	4293      	cmp	r3, r2
 800209e:	d100      	bne.n	80020a2 <memset+0xa>
 80020a0:	4770      	bx	lr
 80020a2:	f803 1b01 	strb.w	r1, [r3], #1
 80020a6:	e7f9      	b.n	800209c <memset+0x4>

080020a8 <_init>:
 80020a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80020aa:	bf00      	nop
 80020ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80020ae:	bc08      	pop	{r3}
 80020b0:	469e      	mov	lr, r3
 80020b2:	4770      	bx	lr

080020b4 <_fini>:
 80020b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80020b6:	bf00      	nop
 80020b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80020ba:	bc08      	pop	{r3}
 80020bc:	469e      	mov	lr, r3
 80020be:	4770      	bx	lr
