
bluepill_adc_amperemeter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008c6c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001264  08008d80  08008d80  00018d80  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009fe4  08009fe4  000201e8  2**0
                  CONTENTS
  4 .ARM          00000000  08009fe4  08009fe4  000201e8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009fe4  08009fe4  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009fe4  08009fe4  00019fe4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009fe8  08009fe8  00019fe8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  08009fec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000560  200001e8  0800a1d4  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000748  0800a1d4  00020748  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bc2b  00000000  00000000  00020211  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ff0  00000000  00000000  0002be3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009a0  00000000  00000000  0002de30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0001890b  00000000  00000000  0002e7d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0000c8cb  00000000  00000000  000470db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000890db  00000000  00000000  000539a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  000dca81  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 000008b8  00000000  00000000  000dcad8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003b38  00000000  00000000  000dd390  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e8 	.word	0x200001e8
 800012c:	00000000 	.word	0x00000000
 8000130:	08008d64 	.word	0x08008d64

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001ec 	.word	0x200001ec
 800014c:	08008d64 	.word	0x08008d64

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_fmul>:
 8000160:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000164:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000168:	bf1e      	ittt	ne
 800016a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800016e:	ea92 0f0c 	teqne	r2, ip
 8000172:	ea93 0f0c 	teqne	r3, ip
 8000176:	d06f      	beq.n	8000258 <__aeabi_fmul+0xf8>
 8000178:	441a      	add	r2, r3
 800017a:	ea80 0c01 	eor.w	ip, r0, r1
 800017e:	0240      	lsls	r0, r0, #9
 8000180:	bf18      	it	ne
 8000182:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000186:	d01e      	beq.n	80001c6 <__aeabi_fmul+0x66>
 8000188:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800018c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000190:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000194:	fba0 3101 	umull	r3, r1, r0, r1
 8000198:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800019c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80001a0:	bf3e      	ittt	cc
 80001a2:	0049      	lslcc	r1, r1, #1
 80001a4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80001a8:	005b      	lslcc	r3, r3, #1
 80001aa:	ea40 0001 	orr.w	r0, r0, r1
 80001ae:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80001b2:	2afd      	cmp	r2, #253	; 0xfd
 80001b4:	d81d      	bhi.n	80001f2 <__aeabi_fmul+0x92>
 80001b6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80001ba:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001be:	bf08      	it	eq
 80001c0:	f020 0001 	biceq.w	r0, r0, #1
 80001c4:	4770      	bx	lr
 80001c6:	f090 0f00 	teq	r0, #0
 80001ca:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80001ce:	bf08      	it	eq
 80001d0:	0249      	lsleq	r1, r1, #9
 80001d2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001d6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001da:	3a7f      	subs	r2, #127	; 0x7f
 80001dc:	bfc2      	ittt	gt
 80001de:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80001e2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001e6:	4770      	bxgt	lr
 80001e8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001ec:	f04f 0300 	mov.w	r3, #0
 80001f0:	3a01      	subs	r2, #1
 80001f2:	dc5d      	bgt.n	80002b0 <__aeabi_fmul+0x150>
 80001f4:	f112 0f19 	cmn.w	r2, #25
 80001f8:	bfdc      	itt	le
 80001fa:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80001fe:	4770      	bxle	lr
 8000200:	f1c2 0200 	rsb	r2, r2, #0
 8000204:	0041      	lsls	r1, r0, #1
 8000206:	fa21 f102 	lsr.w	r1, r1, r2
 800020a:	f1c2 0220 	rsb	r2, r2, #32
 800020e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000212:	ea5f 0031 	movs.w	r0, r1, rrx
 8000216:	f140 0000 	adc.w	r0, r0, #0
 800021a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800021e:	bf08      	it	eq
 8000220:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000224:	4770      	bx	lr
 8000226:	f092 0f00 	teq	r2, #0
 800022a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800022e:	bf02      	ittt	eq
 8000230:	0040      	lsleq	r0, r0, #1
 8000232:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000236:	3a01      	subeq	r2, #1
 8000238:	d0f9      	beq.n	800022e <__aeabi_fmul+0xce>
 800023a:	ea40 000c 	orr.w	r0, r0, ip
 800023e:	f093 0f00 	teq	r3, #0
 8000242:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000246:	bf02      	ittt	eq
 8000248:	0049      	lsleq	r1, r1, #1
 800024a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800024e:	3b01      	subeq	r3, #1
 8000250:	d0f9      	beq.n	8000246 <__aeabi_fmul+0xe6>
 8000252:	ea41 010c 	orr.w	r1, r1, ip
 8000256:	e78f      	b.n	8000178 <__aeabi_fmul+0x18>
 8000258:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800025c:	ea92 0f0c 	teq	r2, ip
 8000260:	bf18      	it	ne
 8000262:	ea93 0f0c 	teqne	r3, ip
 8000266:	d00a      	beq.n	800027e <__aeabi_fmul+0x11e>
 8000268:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800026c:	bf18      	it	ne
 800026e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000272:	d1d8      	bne.n	8000226 <__aeabi_fmul+0xc6>
 8000274:	ea80 0001 	eor.w	r0, r0, r1
 8000278:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f090 0f00 	teq	r0, #0
 8000282:	bf17      	itett	ne
 8000284:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000288:	4608      	moveq	r0, r1
 800028a:	f091 0f00 	teqne	r1, #0
 800028e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000292:	d014      	beq.n	80002be <__aeabi_fmul+0x15e>
 8000294:	ea92 0f0c 	teq	r2, ip
 8000298:	d101      	bne.n	800029e <__aeabi_fmul+0x13e>
 800029a:	0242      	lsls	r2, r0, #9
 800029c:	d10f      	bne.n	80002be <__aeabi_fmul+0x15e>
 800029e:	ea93 0f0c 	teq	r3, ip
 80002a2:	d103      	bne.n	80002ac <__aeabi_fmul+0x14c>
 80002a4:	024b      	lsls	r3, r1, #9
 80002a6:	bf18      	it	ne
 80002a8:	4608      	movne	r0, r1
 80002aa:	d108      	bne.n	80002be <__aeabi_fmul+0x15e>
 80002ac:	ea80 0001 	eor.w	r0, r0, r1
 80002b0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80002b4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002b8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002bc:	4770      	bx	lr
 80002be:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002c2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80002c6:	4770      	bx	lr

080002c8 <__aeabi_drsub>:
 80002c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002cc:	e002      	b.n	80002d4 <__adddf3>
 80002ce:	bf00      	nop

080002d0 <__aeabi_dsub>:
 80002d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002d4 <__adddf3>:
 80002d4:	b530      	push	{r4, r5, lr}
 80002d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002de:	ea94 0f05 	teq	r4, r5
 80002e2:	bf08      	it	eq
 80002e4:	ea90 0f02 	teqeq	r0, r2
 80002e8:	bf1f      	itttt	ne
 80002ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002fa:	f000 80e2 	beq.w	80004c2 <__adddf3+0x1ee>
 80002fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000302:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000306:	bfb8      	it	lt
 8000308:	426d      	neglt	r5, r5
 800030a:	dd0c      	ble.n	8000326 <__adddf3+0x52>
 800030c:	442c      	add	r4, r5
 800030e:	ea80 0202 	eor.w	r2, r0, r2
 8000312:	ea81 0303 	eor.w	r3, r1, r3
 8000316:	ea82 0000 	eor.w	r0, r2, r0
 800031a:	ea83 0101 	eor.w	r1, r3, r1
 800031e:	ea80 0202 	eor.w	r2, r0, r2
 8000322:	ea81 0303 	eor.w	r3, r1, r3
 8000326:	2d36      	cmp	r5, #54	; 0x36
 8000328:	bf88      	it	hi
 800032a:	bd30      	pophi	{r4, r5, pc}
 800032c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000330:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000334:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000338:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800033c:	d002      	beq.n	8000344 <__adddf3+0x70>
 800033e:	4240      	negs	r0, r0
 8000340:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000344:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000348:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800034c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000350:	d002      	beq.n	8000358 <__adddf3+0x84>
 8000352:	4252      	negs	r2, r2
 8000354:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000358:	ea94 0f05 	teq	r4, r5
 800035c:	f000 80a7 	beq.w	80004ae <__adddf3+0x1da>
 8000360:	f1a4 0401 	sub.w	r4, r4, #1
 8000364:	f1d5 0e20 	rsbs	lr, r5, #32
 8000368:	db0d      	blt.n	8000386 <__adddf3+0xb2>
 800036a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800036e:	fa22 f205 	lsr.w	r2, r2, r5
 8000372:	1880      	adds	r0, r0, r2
 8000374:	f141 0100 	adc.w	r1, r1, #0
 8000378:	fa03 f20e 	lsl.w	r2, r3, lr
 800037c:	1880      	adds	r0, r0, r2
 800037e:	fa43 f305 	asr.w	r3, r3, r5
 8000382:	4159      	adcs	r1, r3
 8000384:	e00e      	b.n	80003a4 <__adddf3+0xd0>
 8000386:	f1a5 0520 	sub.w	r5, r5, #32
 800038a:	f10e 0e20 	add.w	lr, lr, #32
 800038e:	2a01      	cmp	r2, #1
 8000390:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000394:	bf28      	it	cs
 8000396:	f04c 0c02 	orrcs.w	ip, ip, #2
 800039a:	fa43 f305 	asr.w	r3, r3, r5
 800039e:	18c0      	adds	r0, r0, r3
 80003a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a8:	d507      	bpl.n	80003ba <__adddf3+0xe6>
 80003aa:	f04f 0e00 	mov.w	lr, #0
 80003ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80003b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80003ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003be:	d31b      	bcc.n	80003f8 <__adddf3+0x124>
 80003c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003c4:	d30c      	bcc.n	80003e0 <__adddf3+0x10c>
 80003c6:	0849      	lsrs	r1, r1, #1
 80003c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80003cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d0:	f104 0401 	add.w	r4, r4, #1
 80003d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003dc:	f080 809a 	bcs.w	8000514 <__adddf3+0x240>
 80003e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003e4:	bf08      	it	eq
 80003e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003ea:	f150 0000 	adcs.w	r0, r0, #0
 80003ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003f2:	ea41 0105 	orr.w	r1, r1, r5
 80003f6:	bd30      	pop	{r4, r5, pc}
 80003f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003fc:	4140      	adcs	r0, r0
 80003fe:	eb41 0101 	adc.w	r1, r1, r1
 8000402:	3c01      	subs	r4, #1
 8000404:	bf28      	it	cs
 8000406:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800040a:	d2e9      	bcs.n	80003e0 <__adddf3+0x10c>
 800040c:	f091 0f00 	teq	r1, #0
 8000410:	bf04      	itt	eq
 8000412:	4601      	moveq	r1, r0
 8000414:	2000      	moveq	r0, #0
 8000416:	fab1 f381 	clz	r3, r1
 800041a:	bf08      	it	eq
 800041c:	3320      	addeq	r3, #32
 800041e:	f1a3 030b 	sub.w	r3, r3, #11
 8000422:	f1b3 0220 	subs.w	r2, r3, #32
 8000426:	da0c      	bge.n	8000442 <__adddf3+0x16e>
 8000428:	320c      	adds	r2, #12
 800042a:	dd08      	ble.n	800043e <__adddf3+0x16a>
 800042c:	f102 0c14 	add.w	ip, r2, #20
 8000430:	f1c2 020c 	rsb	r2, r2, #12
 8000434:	fa01 f00c 	lsl.w	r0, r1, ip
 8000438:	fa21 f102 	lsr.w	r1, r1, r2
 800043c:	e00c      	b.n	8000458 <__adddf3+0x184>
 800043e:	f102 0214 	add.w	r2, r2, #20
 8000442:	bfd8      	it	le
 8000444:	f1c2 0c20 	rsble	ip, r2, #32
 8000448:	fa01 f102 	lsl.w	r1, r1, r2
 800044c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000450:	bfdc      	itt	le
 8000452:	ea41 010c 	orrle.w	r1, r1, ip
 8000456:	4090      	lslle	r0, r2
 8000458:	1ae4      	subs	r4, r4, r3
 800045a:	bfa2      	ittt	ge
 800045c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000460:	4329      	orrge	r1, r5
 8000462:	bd30      	popge	{r4, r5, pc}
 8000464:	ea6f 0404 	mvn.w	r4, r4
 8000468:	3c1f      	subs	r4, #31
 800046a:	da1c      	bge.n	80004a6 <__adddf3+0x1d2>
 800046c:	340c      	adds	r4, #12
 800046e:	dc0e      	bgt.n	800048e <__adddf3+0x1ba>
 8000470:	f104 0414 	add.w	r4, r4, #20
 8000474:	f1c4 0220 	rsb	r2, r4, #32
 8000478:	fa20 f004 	lsr.w	r0, r0, r4
 800047c:	fa01 f302 	lsl.w	r3, r1, r2
 8000480:	ea40 0003 	orr.w	r0, r0, r3
 8000484:	fa21 f304 	lsr.w	r3, r1, r4
 8000488:	ea45 0103 	orr.w	r1, r5, r3
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	f1c4 040c 	rsb	r4, r4, #12
 8000492:	f1c4 0220 	rsb	r2, r4, #32
 8000496:	fa20 f002 	lsr.w	r0, r0, r2
 800049a:	fa01 f304 	lsl.w	r3, r1, r4
 800049e:	ea40 0003 	orr.w	r0, r0, r3
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	fa21 f004 	lsr.w	r0, r1, r4
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	f094 0f00 	teq	r4, #0
 80004b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004b6:	bf06      	itte	eq
 80004b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004bc:	3401      	addeq	r4, #1
 80004be:	3d01      	subne	r5, #1
 80004c0:	e74e      	b.n	8000360 <__adddf3+0x8c>
 80004c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004c6:	bf18      	it	ne
 80004c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004cc:	d029      	beq.n	8000522 <__adddf3+0x24e>
 80004ce:	ea94 0f05 	teq	r4, r5
 80004d2:	bf08      	it	eq
 80004d4:	ea90 0f02 	teqeq	r0, r2
 80004d8:	d005      	beq.n	80004e6 <__adddf3+0x212>
 80004da:	ea54 0c00 	orrs.w	ip, r4, r0
 80004de:	bf04      	itt	eq
 80004e0:	4619      	moveq	r1, r3
 80004e2:	4610      	moveq	r0, r2
 80004e4:	bd30      	pop	{r4, r5, pc}
 80004e6:	ea91 0f03 	teq	r1, r3
 80004ea:	bf1e      	ittt	ne
 80004ec:	2100      	movne	r1, #0
 80004ee:	2000      	movne	r0, #0
 80004f0:	bd30      	popne	{r4, r5, pc}
 80004f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004f6:	d105      	bne.n	8000504 <__adddf3+0x230>
 80004f8:	0040      	lsls	r0, r0, #1
 80004fa:	4149      	adcs	r1, r1
 80004fc:	bf28      	it	cs
 80004fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000502:	bd30      	pop	{r4, r5, pc}
 8000504:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000508:	bf3c      	itt	cc
 800050a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800050e:	bd30      	popcc	{r4, r5, pc}
 8000510:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000514:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000518:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800051c:	f04f 0000 	mov.w	r0, #0
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000526:	bf1a      	itte	ne
 8000528:	4619      	movne	r1, r3
 800052a:	4610      	movne	r0, r2
 800052c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000530:	bf1c      	itt	ne
 8000532:	460b      	movne	r3, r1
 8000534:	4602      	movne	r2, r0
 8000536:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800053a:	bf06      	itte	eq
 800053c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000540:	ea91 0f03 	teqeq	r1, r3
 8000544:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	bf00      	nop

0800054c <__aeabi_ui2d>:
 800054c:	f090 0f00 	teq	r0, #0
 8000550:	bf04      	itt	eq
 8000552:	2100      	moveq	r1, #0
 8000554:	4770      	bxeq	lr
 8000556:	b530      	push	{r4, r5, lr}
 8000558:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800055c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000560:	f04f 0500 	mov.w	r5, #0
 8000564:	f04f 0100 	mov.w	r1, #0
 8000568:	e750      	b.n	800040c <__adddf3+0x138>
 800056a:	bf00      	nop

0800056c <__aeabi_i2d>:
 800056c:	f090 0f00 	teq	r0, #0
 8000570:	bf04      	itt	eq
 8000572:	2100      	moveq	r1, #0
 8000574:	4770      	bxeq	lr
 8000576:	b530      	push	{r4, r5, lr}
 8000578:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800057c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000580:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000584:	bf48      	it	mi
 8000586:	4240      	negmi	r0, r0
 8000588:	f04f 0100 	mov.w	r1, #0
 800058c:	e73e      	b.n	800040c <__adddf3+0x138>
 800058e:	bf00      	nop

08000590 <__aeabi_f2d>:
 8000590:	0042      	lsls	r2, r0, #1
 8000592:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000596:	ea4f 0131 	mov.w	r1, r1, rrx
 800059a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800059e:	bf1f      	itttt	ne
 80005a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005ac:	4770      	bxne	lr
 80005ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005b2:	bf08      	it	eq
 80005b4:	4770      	bxeq	lr
 80005b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005ba:	bf04      	itt	eq
 80005bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c0:	4770      	bxeq	lr
 80005c2:	b530      	push	{r4, r5, lr}
 80005c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d0:	e71c      	b.n	800040c <__adddf3+0x138>
 80005d2:	bf00      	nop

080005d4 <__aeabi_ul2d>:
 80005d4:	ea50 0201 	orrs.w	r2, r0, r1
 80005d8:	bf08      	it	eq
 80005da:	4770      	bxeq	lr
 80005dc:	b530      	push	{r4, r5, lr}
 80005de:	f04f 0500 	mov.w	r5, #0
 80005e2:	e00a      	b.n	80005fa <__aeabi_l2d+0x16>

080005e4 <__aeabi_l2d>:
 80005e4:	ea50 0201 	orrs.w	r2, r0, r1
 80005e8:	bf08      	it	eq
 80005ea:	4770      	bxeq	lr
 80005ec:	b530      	push	{r4, r5, lr}
 80005ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005f2:	d502      	bpl.n	80005fa <__aeabi_l2d+0x16>
 80005f4:	4240      	negs	r0, r0
 80005f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000602:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000606:	f43f aed8 	beq.w	80003ba <__adddf3+0xe6>
 800060a:	f04f 0203 	mov.w	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000622:	f1c2 0320 	rsb	r3, r2, #32
 8000626:	fa00 fc03 	lsl.w	ip, r0, r3
 800062a:	fa20 f002 	lsr.w	r0, r0, r2
 800062e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000632:	ea40 000e 	orr.w	r0, r0, lr
 8000636:	fa21 f102 	lsr.w	r1, r1, r2
 800063a:	4414      	add	r4, r2
 800063c:	e6bd      	b.n	80003ba <__adddf3+0xe6>
 800063e:	bf00      	nop

08000640 <__aeabi_dmul>:
 8000640:	b570      	push	{r4, r5, r6, lr}
 8000642:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000646:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800064a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800064e:	bf1d      	ittte	ne
 8000650:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000654:	ea94 0f0c 	teqne	r4, ip
 8000658:	ea95 0f0c 	teqne	r5, ip
 800065c:	f000 f8de 	bleq	800081c <__aeabi_dmul+0x1dc>
 8000660:	442c      	add	r4, r5
 8000662:	ea81 0603 	eor.w	r6, r1, r3
 8000666:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800066a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800066e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000672:	bf18      	it	ne
 8000674:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000678:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800067c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000680:	d038      	beq.n	80006f4 <__aeabi_dmul+0xb4>
 8000682:	fba0 ce02 	umull	ip, lr, r0, r2
 8000686:	f04f 0500 	mov.w	r5, #0
 800068a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800068e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000692:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000696:	f04f 0600 	mov.w	r6, #0
 800069a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800069e:	f09c 0f00 	teq	ip, #0
 80006a2:	bf18      	it	ne
 80006a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006b4:	d204      	bcs.n	80006c0 <__aeabi_dmul+0x80>
 80006b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006ba:	416d      	adcs	r5, r5
 80006bc:	eb46 0606 	adc.w	r6, r6, r6
 80006c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d8:	bf88      	it	hi
 80006da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006de:	d81e      	bhi.n	800071e <__aeabi_dmul+0xde>
 80006e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006e4:	bf08      	it	eq
 80006e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006ea:	f150 0000 	adcs.w	r0, r0, #0
 80006ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f8:	ea46 0101 	orr.w	r1, r6, r1
 80006fc:	ea40 0002 	orr.w	r0, r0, r2
 8000700:	ea81 0103 	eor.w	r1, r1, r3
 8000704:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000708:	bfc2      	ittt	gt
 800070a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800070e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000712:	bd70      	popgt	{r4, r5, r6, pc}
 8000714:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000718:	f04f 0e00 	mov.w	lr, #0
 800071c:	3c01      	subs	r4, #1
 800071e:	f300 80ab 	bgt.w	8000878 <__aeabi_dmul+0x238>
 8000722:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000726:	bfde      	ittt	le
 8000728:	2000      	movle	r0, #0
 800072a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800072e:	bd70      	pople	{r4, r5, r6, pc}
 8000730:	f1c4 0400 	rsb	r4, r4, #0
 8000734:	3c20      	subs	r4, #32
 8000736:	da35      	bge.n	80007a4 <__aeabi_dmul+0x164>
 8000738:	340c      	adds	r4, #12
 800073a:	dc1b      	bgt.n	8000774 <__aeabi_dmul+0x134>
 800073c:	f104 0414 	add.w	r4, r4, #20
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f305 	lsl.w	r3, r0, r5
 8000748:	fa20 f004 	lsr.w	r0, r0, r4
 800074c:	fa01 f205 	lsl.w	r2, r1, r5
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000758:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800075c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000760:	fa21 f604 	lsr.w	r6, r1, r4
 8000764:	eb42 0106 	adc.w	r1, r2, r6
 8000768:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800076c:	bf08      	it	eq
 800076e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000772:	bd70      	pop	{r4, r5, r6, pc}
 8000774:	f1c4 040c 	rsb	r4, r4, #12
 8000778:	f1c4 0520 	rsb	r5, r4, #32
 800077c:	fa00 f304 	lsl.w	r3, r0, r4
 8000780:	fa20 f005 	lsr.w	r0, r0, r5
 8000784:	fa01 f204 	lsl.w	r2, r1, r4
 8000788:	ea40 0002 	orr.w	r0, r0, r2
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000794:	f141 0100 	adc.w	r1, r1, #0
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f1c4 0520 	rsb	r5, r4, #32
 80007a8:	fa00 f205 	lsl.w	r2, r0, r5
 80007ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b0:	fa20 f304 	lsr.w	r3, r0, r4
 80007b4:	fa01 f205 	lsl.w	r2, r1, r5
 80007b8:	ea43 0302 	orr.w	r3, r3, r2
 80007bc:	fa21 f004 	lsr.w	r0, r1, r4
 80007c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007c4:	fa21 f204 	lsr.w	r2, r1, r4
 80007c8:	ea20 0002 	bic.w	r0, r0, r2
 80007cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007d4:	bf08      	it	eq
 80007d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007da:	bd70      	pop	{r4, r5, r6, pc}
 80007dc:	f094 0f00 	teq	r4, #0
 80007e0:	d10f      	bne.n	8000802 <__aeabi_dmul+0x1c2>
 80007e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007e6:	0040      	lsls	r0, r0, #1
 80007e8:	eb41 0101 	adc.w	r1, r1, r1
 80007ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f0:	bf08      	it	eq
 80007f2:	3c01      	subeq	r4, #1
 80007f4:	d0f7      	beq.n	80007e6 <__aeabi_dmul+0x1a6>
 80007f6:	ea41 0106 	orr.w	r1, r1, r6
 80007fa:	f095 0f00 	teq	r5, #0
 80007fe:	bf18      	it	ne
 8000800:	4770      	bxne	lr
 8000802:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000806:	0052      	lsls	r2, r2, #1
 8000808:	eb43 0303 	adc.w	r3, r3, r3
 800080c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000810:	bf08      	it	eq
 8000812:	3d01      	subeq	r5, #1
 8000814:	d0f7      	beq.n	8000806 <__aeabi_dmul+0x1c6>
 8000816:	ea43 0306 	orr.w	r3, r3, r6
 800081a:	4770      	bx	lr
 800081c:	ea94 0f0c 	teq	r4, ip
 8000820:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000824:	bf18      	it	ne
 8000826:	ea95 0f0c 	teqne	r5, ip
 800082a:	d00c      	beq.n	8000846 <__aeabi_dmul+0x206>
 800082c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000830:	bf18      	it	ne
 8000832:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000836:	d1d1      	bne.n	80007dc <__aeabi_dmul+0x19c>
 8000838:	ea81 0103 	eor.w	r1, r1, r3
 800083c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000840:	f04f 0000 	mov.w	r0, #0
 8000844:	bd70      	pop	{r4, r5, r6, pc}
 8000846:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800084a:	bf06      	itte	eq
 800084c:	4610      	moveq	r0, r2
 800084e:	4619      	moveq	r1, r3
 8000850:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000854:	d019      	beq.n	800088a <__aeabi_dmul+0x24a>
 8000856:	ea94 0f0c 	teq	r4, ip
 800085a:	d102      	bne.n	8000862 <__aeabi_dmul+0x222>
 800085c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000860:	d113      	bne.n	800088a <__aeabi_dmul+0x24a>
 8000862:	ea95 0f0c 	teq	r5, ip
 8000866:	d105      	bne.n	8000874 <__aeabi_dmul+0x234>
 8000868:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800086c:	bf1c      	itt	ne
 800086e:	4610      	movne	r0, r2
 8000870:	4619      	movne	r1, r3
 8000872:	d10a      	bne.n	800088a <__aeabi_dmul+0x24a>
 8000874:	ea81 0103 	eor.w	r1, r1, r3
 8000878:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800087c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000880:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000884:	f04f 0000 	mov.w	r0, #0
 8000888:	bd70      	pop	{r4, r5, r6, pc}
 800088a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800088e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000892:	bd70      	pop	{r4, r5, r6, pc}

08000894 <__aeabi_ddiv>:
 8000894:	b570      	push	{r4, r5, r6, lr}
 8000896:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800089a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800089e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008a2:	bf1d      	ittte	ne
 80008a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a8:	ea94 0f0c 	teqne	r4, ip
 80008ac:	ea95 0f0c 	teqne	r5, ip
 80008b0:	f000 f8a7 	bleq	8000a02 <__aeabi_ddiv+0x16e>
 80008b4:	eba4 0405 	sub.w	r4, r4, r5
 80008b8:	ea81 0e03 	eor.w	lr, r1, r3
 80008bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008c4:	f000 8088 	beq.w	80009d8 <__aeabi_ddiv+0x144>
 80008c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008ec:	429d      	cmp	r5, r3
 80008ee:	bf08      	it	eq
 80008f0:	4296      	cmpeq	r6, r2
 80008f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008fa:	d202      	bcs.n	8000902 <__aeabi_ddiv+0x6e>
 80008fc:	085b      	lsrs	r3, r3, #1
 80008fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000902:	1ab6      	subs	r6, r6, r2
 8000904:	eb65 0503 	sbc.w	r5, r5, r3
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000912:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 000c 	orrcs.w	r0, r0, ip
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000970:	ea55 0e06 	orrs.w	lr, r5, r6
 8000974:	d018      	beq.n	80009a8 <__aeabi_ddiv+0x114>
 8000976:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800097a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800097e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000982:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000986:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800098a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800098e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000992:	d1c0      	bne.n	8000916 <__aeabi_ddiv+0x82>
 8000994:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000998:	d10b      	bne.n	80009b2 <__aeabi_ddiv+0x11e>
 800099a:	ea41 0100 	orr.w	r1, r1, r0
 800099e:	f04f 0000 	mov.w	r0, #0
 80009a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009a6:	e7b6      	b.n	8000916 <__aeabi_ddiv+0x82>
 80009a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009ac:	bf04      	itt	eq
 80009ae:	4301      	orreq	r1, r0
 80009b0:	2000      	moveq	r0, #0
 80009b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009b6:	bf88      	it	hi
 80009b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009bc:	f63f aeaf 	bhi.w	800071e <__aeabi_dmul+0xde>
 80009c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80009c4:	bf04      	itt	eq
 80009c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009ce:	f150 0000 	adcs.w	r0, r0, #0
 80009d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	pop	{r4, r5, r6, pc}
 80009d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009e4:	bfc2      	ittt	gt
 80009e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	popgt	{r4, r5, r6, pc}
 80009f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009f4:	f04f 0e00 	mov.w	lr, #0
 80009f8:	3c01      	subs	r4, #1
 80009fa:	e690      	b.n	800071e <__aeabi_dmul+0xde>
 80009fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000a00:	e68d      	b.n	800071e <__aeabi_dmul+0xde>
 8000a02:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a06:	ea94 0f0c 	teq	r4, ip
 8000a0a:	bf08      	it	eq
 8000a0c:	ea95 0f0c 	teqeq	r5, ip
 8000a10:	f43f af3b 	beq.w	800088a <__aeabi_dmul+0x24a>
 8000a14:	ea94 0f0c 	teq	r4, ip
 8000a18:	d10a      	bne.n	8000a30 <__aeabi_ddiv+0x19c>
 8000a1a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a1e:	f47f af34 	bne.w	800088a <__aeabi_dmul+0x24a>
 8000a22:	ea95 0f0c 	teq	r5, ip
 8000a26:	f47f af25 	bne.w	8000874 <__aeabi_dmul+0x234>
 8000a2a:	4610      	mov	r0, r2
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	e72c      	b.n	800088a <__aeabi_dmul+0x24a>
 8000a30:	ea95 0f0c 	teq	r5, ip
 8000a34:	d106      	bne.n	8000a44 <__aeabi_ddiv+0x1b0>
 8000a36:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a3a:	f43f aefd 	beq.w	8000838 <__aeabi_dmul+0x1f8>
 8000a3e:	4610      	mov	r0, r2
 8000a40:	4619      	mov	r1, r3
 8000a42:	e722      	b.n	800088a <__aeabi_dmul+0x24a>
 8000a44:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a48:	bf18      	it	ne
 8000a4a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a4e:	f47f aec5 	bne.w	80007dc <__aeabi_dmul+0x19c>
 8000a52:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a56:	f47f af0d 	bne.w	8000874 <__aeabi_dmul+0x234>
 8000a5a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a5e:	f47f aeeb 	bne.w	8000838 <__aeabi_dmul+0x1f8>
 8000a62:	e712      	b.n	800088a <__aeabi_dmul+0x24a>

08000a64 <__gedf2>:
 8000a64:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a68:	e006      	b.n	8000a78 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__ledf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	e002      	b.n	8000a78 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__cmpdf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	bf18      	it	ne
 8000a8a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a8e:	d01b      	beq.n	8000ac8 <__cmpdf2+0x54>
 8000a90:	b001      	add	sp, #4
 8000a92:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a96:	bf0c      	ite	eq
 8000a98:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a9c:	ea91 0f03 	teqne	r1, r3
 8000aa0:	bf02      	ittt	eq
 8000aa2:	ea90 0f02 	teqeq	r0, r2
 8000aa6:	2000      	moveq	r0, #0
 8000aa8:	4770      	bxeq	lr
 8000aaa:	f110 0f00 	cmn.w	r0, #0
 8000aae:	ea91 0f03 	teq	r1, r3
 8000ab2:	bf58      	it	pl
 8000ab4:	4299      	cmppl	r1, r3
 8000ab6:	bf08      	it	eq
 8000ab8:	4290      	cmpeq	r0, r2
 8000aba:	bf2c      	ite	cs
 8000abc:	17d8      	asrcs	r0, r3, #31
 8000abe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ac2:	f040 0001 	orr.w	r0, r0, #1
 8000ac6:	4770      	bx	lr
 8000ac8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000acc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad0:	d102      	bne.n	8000ad8 <__cmpdf2+0x64>
 8000ad2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ad6:	d107      	bne.n	8000ae8 <__cmpdf2+0x74>
 8000ad8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000adc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae0:	d1d6      	bne.n	8000a90 <__cmpdf2+0x1c>
 8000ae2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ae6:	d0d3      	beq.n	8000a90 <__cmpdf2+0x1c>
 8000ae8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop

08000af0 <__aeabi_cdrcmple>:
 8000af0:	4684      	mov	ip, r0
 8000af2:	4610      	mov	r0, r2
 8000af4:	4662      	mov	r2, ip
 8000af6:	468c      	mov	ip, r1
 8000af8:	4619      	mov	r1, r3
 8000afa:	4663      	mov	r3, ip
 8000afc:	e000      	b.n	8000b00 <__aeabi_cdcmpeq>
 8000afe:	bf00      	nop

08000b00 <__aeabi_cdcmpeq>:
 8000b00:	b501      	push	{r0, lr}
 8000b02:	f7ff ffb7 	bl	8000a74 <__cmpdf2>
 8000b06:	2800      	cmp	r0, #0
 8000b08:	bf48      	it	mi
 8000b0a:	f110 0f00 	cmnmi.w	r0, #0
 8000b0e:	bd01      	pop	{r0, pc}

08000b10 <__aeabi_dcmpeq>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff fff4 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b18:	bf0c      	ite	eq
 8000b1a:	2001      	moveq	r0, #1
 8000b1c:	2000      	movne	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmplt>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffea 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b2c:	bf34      	ite	cc
 8000b2e:	2001      	movcc	r0, #1
 8000b30:	2000      	movcs	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmple>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffe0 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b40:	bf94      	ite	ls
 8000b42:	2001      	movls	r0, #1
 8000b44:	2000      	movhi	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpge>:
 8000b4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b50:	f7ff ffce 	bl	8000af0 <__aeabi_cdrcmple>
 8000b54:	bf94      	ite	ls
 8000b56:	2001      	movls	r0, #1
 8000b58:	2000      	movhi	r0, #0
 8000b5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5e:	bf00      	nop

08000b60 <__aeabi_dcmpgt>:
 8000b60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b64:	f7ff ffc4 	bl	8000af0 <__aeabi_cdrcmple>
 8000b68:	bf34      	ite	cc
 8000b6a:	2001      	movcc	r0, #1
 8000b6c:	2000      	movcs	r0, #0
 8000b6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b72:	bf00      	nop

08000b74 <__aeabi_dcmpun>:
 8000b74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b7c:	d102      	bne.n	8000b84 <__aeabi_dcmpun+0x10>
 8000b7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b82:	d10a      	bne.n	8000b9a <__aeabi_dcmpun+0x26>
 8000b84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b8c:	d102      	bne.n	8000b94 <__aeabi_dcmpun+0x20>
 8000b8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b92:	d102      	bne.n	8000b9a <__aeabi_dcmpun+0x26>
 8000b94:	f04f 0000 	mov.w	r0, #0
 8000b98:	4770      	bx	lr
 8000b9a:	f04f 0001 	mov.w	r0, #1
 8000b9e:	4770      	bx	lr

08000ba0 <__aeabi_d2iz>:
 8000ba0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ba4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba8:	d215      	bcs.n	8000bd6 <__aeabi_d2iz+0x36>
 8000baa:	d511      	bpl.n	8000bd0 <__aeabi_d2iz+0x30>
 8000bac:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bb4:	d912      	bls.n	8000bdc <__aeabi_d2iz+0x3c>
 8000bb6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bbe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bc2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bc6:	fa23 f002 	lsr.w	r0, r3, r2
 8000bca:	bf18      	it	ne
 8000bcc:	4240      	negne	r0, r0
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d105      	bne.n	8000be8 <__aeabi_d2iz+0x48>
 8000bdc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be0:	bf08      	it	eq
 8000be2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop

08000bf0 <__aeabi_d2uiz>:
 8000bf0:	004a      	lsls	r2, r1, #1
 8000bf2:	d211      	bcs.n	8000c18 <__aeabi_d2uiz+0x28>
 8000bf4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf8:	d211      	bcs.n	8000c1e <__aeabi_d2uiz+0x2e>
 8000bfa:	d50d      	bpl.n	8000c18 <__aeabi_d2uiz+0x28>
 8000bfc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c00:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c04:	d40e      	bmi.n	8000c24 <__aeabi_d2uiz+0x34>
 8000c06:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c0e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c12:	fa23 f002 	lsr.w	r0, r3, r2
 8000c16:	4770      	bx	lr
 8000c18:	f04f 0000 	mov.w	r0, #0
 8000c1c:	4770      	bx	lr
 8000c1e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c22:	d102      	bne.n	8000c2a <__aeabi_d2uiz+0x3a>
 8000c24:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c28:	4770      	bx	lr
 8000c2a:	f04f 0000 	mov.w	r0, #0
 8000c2e:	4770      	bx	lr

08000c30 <__aeabi_d2f>:
 8000c30:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c34:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c38:	bf24      	itt	cs
 8000c3a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c3e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c42:	d90d      	bls.n	8000c60 <__aeabi_d2f+0x30>
 8000c44:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c48:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c4c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c50:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c54:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c58:	bf08      	it	eq
 8000c5a:	f020 0001 	biceq.w	r0, r0, #1
 8000c5e:	4770      	bx	lr
 8000c60:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c64:	d121      	bne.n	8000caa <__aeabi_d2f+0x7a>
 8000c66:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c6a:	bfbc      	itt	lt
 8000c6c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c70:	4770      	bxlt	lr
 8000c72:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c76:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c7a:	f1c2 0218 	rsb	r2, r2, #24
 8000c7e:	f1c2 0c20 	rsb	ip, r2, #32
 8000c82:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c86:	fa20 f002 	lsr.w	r0, r0, r2
 8000c8a:	bf18      	it	ne
 8000c8c:	f040 0001 	orrne.w	r0, r0, #1
 8000c90:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c94:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c98:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c9c:	ea40 000c 	orr.w	r0, r0, ip
 8000ca0:	fa23 f302 	lsr.w	r3, r3, r2
 8000ca4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca8:	e7cc      	b.n	8000c44 <__aeabi_d2f+0x14>
 8000caa:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cae:	d107      	bne.n	8000cc0 <__aeabi_d2f+0x90>
 8000cb0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cb4:	bf1e      	ittt	ne
 8000cb6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cba:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cbe:	4770      	bxne	lr
 8000cc0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cc4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ccc:	4770      	bx	lr
 8000cce:	bf00      	nop

08000cd0 <__aeabi_d2lz>:
 8000cd0:	b538      	push	{r3, r4, r5, lr}
 8000cd2:	460c      	mov	r4, r1
 8000cd4:	4605      	mov	r5, r0
 8000cd6:	4621      	mov	r1, r4
 8000cd8:	4628      	mov	r0, r5
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	f7ff ff21 	bl	8000b24 <__aeabi_dcmplt>
 8000ce2:	b928      	cbnz	r0, 8000cf0 <__aeabi_d2lz+0x20>
 8000ce4:	4628      	mov	r0, r5
 8000ce6:	4621      	mov	r1, r4
 8000ce8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cec:	f000 b80a 	b.w	8000d04 <__aeabi_d2ulz>
 8000cf0:	4628      	mov	r0, r5
 8000cf2:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8000cf6:	f000 f805 	bl	8000d04 <__aeabi_d2ulz>
 8000cfa:	4240      	negs	r0, r0
 8000cfc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d00:	bd38      	pop	{r3, r4, r5, pc}
 8000d02:	bf00      	nop

08000d04 <__aeabi_d2ulz>:
 8000d04:	b5d0      	push	{r4, r6, r7, lr}
 8000d06:	2200      	movs	r2, #0
 8000d08:	4b0b      	ldr	r3, [pc, #44]	; (8000d38 <__aeabi_d2ulz+0x34>)
 8000d0a:	4606      	mov	r6, r0
 8000d0c:	460f      	mov	r7, r1
 8000d0e:	f7ff fc97 	bl	8000640 <__aeabi_dmul>
 8000d12:	f7ff ff6d 	bl	8000bf0 <__aeabi_d2uiz>
 8000d16:	4604      	mov	r4, r0
 8000d18:	f7ff fc18 	bl	800054c <__aeabi_ui2d>
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	4b07      	ldr	r3, [pc, #28]	; (8000d3c <__aeabi_d2ulz+0x38>)
 8000d20:	f7ff fc8e 	bl	8000640 <__aeabi_dmul>
 8000d24:	4602      	mov	r2, r0
 8000d26:	460b      	mov	r3, r1
 8000d28:	4630      	mov	r0, r6
 8000d2a:	4639      	mov	r1, r7
 8000d2c:	f7ff fad0 	bl	80002d0 <__aeabi_dsub>
 8000d30:	f7ff ff5e 	bl	8000bf0 <__aeabi_d2uiz>
 8000d34:	4621      	mov	r1, r4
 8000d36:	bdd0      	pop	{r4, r6, r7, pc}
 8000d38:	3df00000 	.word	0x3df00000
 8000d3c:	41f00000 	.word	0x41f00000

08000d40 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b082      	sub	sp, #8
 8000d44:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d46:	f001 f881 	bl	8001e4c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d4a:	f000 f9ed 	bl	8001128 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d4e:	f000 faf5 	bl	800133c <MX_GPIO_Init>
  MX_I2C1_Init();
 8000d52:	f000 fac5 	bl	80012e0 <MX_I2C1_Init>
  MX_ADC1_Init();
 8000d56:	f000 fa37 	bl	80011c8 <MX_ADC1_Init>
  MX_ADC2_Init();
 8000d5a:	f000 fa83 	bl	8001264 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */

  HAL_ADCEx_Calibration_Start(&hadc1);
 8000d5e:	481b      	ldr	r0, [pc, #108]	; (8000dcc <main+0x8c>)
 8000d60:	f001 fe28 	bl	80029b4 <HAL_ADCEx_Calibration_Start>
  HAL_ADCEx_Calibration_Start(&hadc2);
 8000d64:	481a      	ldr	r0, [pc, #104]	; (8000dd0 <main+0x90>)
 8000d66:	f001 fe25 	bl	80029b4 <HAL_ADCEx_Calibration_Start>

  // Init lcd using one of the stm32HAL i2c typedefs
  if (ssd1306_Init(&hi2c1) != 0) {
 8000d6a:	481a      	ldr	r0, [pc, #104]	; (8000dd4 <main+0x94>)
 8000d6c:	f000 fbc2 	bl	80014f4 <ssd1306_Init>
 8000d70:	4603      	mov	r3, r0
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d001      	beq.n	8000d7a <main+0x3a>
    Error_Handler();
 8000d76:	f000 fba1 	bl	80014bc <Error_Handler>
  }
  HAL_Delay(1000);
 8000d7a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d7e:	f001 f8c7 	bl	8001f10 <HAL_Delay>

  ssd1306_Fill(Black);
 8000d82:	2000      	movs	r0, #0
 8000d84:	f000 fcd6 	bl	8001734 <ssd1306_Fill>
  ssd1306_UpdateScreen(&hi2c1);
 8000d88:	4812      	ldr	r0, [pc, #72]	; (8000dd4 <main+0x94>)
 8000d8a:	f000 fcf5 	bl	8001778 <ssd1306_UpdateScreen>

  HAL_Delay(1000);
 8000d8e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d92:	f001 f8bd 	bl	8001f10 <HAL_Delay>

  // Write data to local screenbuffer
  ssd1306_SetCursor(0, 0);
 8000d96:	2100      	movs	r1, #0
 8000d98:	2000      	movs	r0, #0
 8000d9a:	f000 fe25 	bl	80019e8 <ssd1306_SetCursor>
  ssd1306_WriteString("ssd1306", Font_11x18, White);
 8000d9e:	4a0e      	ldr	r2, [pc, #56]	; (8000dd8 <main+0x98>)
 8000da0:	2301      	movs	r3, #1
 8000da2:	ca06      	ldmia	r2, {r1, r2}
 8000da4:	480d      	ldr	r0, [pc, #52]	; (8000ddc <main+0x9c>)
 8000da6:	f000 fdf9 	bl	800199c <ssd1306_WriteString>

  ssd1306_SetCursor(0, 36);
 8000daa:	2124      	movs	r1, #36	; 0x24
 8000dac:	2000      	movs	r0, #0
 8000dae:	f000 fe1b 	bl	80019e8 <ssd1306_SetCursor>
  ssd1306_WriteString("4ilo", Font_11x18, White);
 8000db2:	4a09      	ldr	r2, [pc, #36]	; (8000dd8 <main+0x98>)
 8000db4:	2301      	movs	r3, #1
 8000db6:	ca06      	ldmia	r2, {r1, r2}
 8000db8:	4809      	ldr	r0, [pc, #36]	; (8000de0 <main+0xa0>)
 8000dba:	f000 fdef 	bl	800199c <ssd1306_WriteString>

  // Draw rectangle on screen
  for (uint8_t i=0; i<28; i++) {
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	71fb      	strb	r3, [r7, #7]
 8000dc2:	e020      	b.n	8000e06 <main+0xc6>
      for (uint8_t j=0; j<64; j++) {
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	71bb      	strb	r3, [r7, #6]
 8000dc8:	e017      	b.n	8000dfa <main+0xba>
 8000dca:	bf00      	nop
 8000dcc:	200006d0 	.word	0x200006d0
 8000dd0:	20000634 	.word	0x20000634
 8000dd4:	20000664 	.word	0x20000664
 8000dd8:	20000000 	.word	0x20000000
 8000ddc:	08008d80 	.word	0x08008d80
 8000de0:	08008d88 	.word	0x08008d88
          ssd1306_DrawPixel(100+i, 0+j, White);
 8000de4:	79fb      	ldrb	r3, [r7, #7]
 8000de6:	3364      	adds	r3, #100	; 0x64
 8000de8:	b2db      	uxtb	r3, r3
 8000dea:	79b9      	ldrb	r1, [r7, #6]
 8000dec:	2201      	movs	r2, #1
 8000dee:	4618      	mov	r0, r3
 8000df0:	f000 fcf4 	bl	80017dc <ssd1306_DrawPixel>
      for (uint8_t j=0; j<64; j++) {
 8000df4:	79bb      	ldrb	r3, [r7, #6]
 8000df6:	3301      	adds	r3, #1
 8000df8:	71bb      	strb	r3, [r7, #6]
 8000dfa:	79bb      	ldrb	r3, [r7, #6]
 8000dfc:	2b3f      	cmp	r3, #63	; 0x3f
 8000dfe:	d9f1      	bls.n	8000de4 <main+0xa4>
  for (uint8_t i=0; i<28; i++) {
 8000e00:	79fb      	ldrb	r3, [r7, #7]
 8000e02:	3301      	adds	r3, #1
 8000e04:	71fb      	strb	r3, [r7, #7]
 8000e06:	79fb      	ldrb	r3, [r7, #7]
 8000e08:	2b1b      	cmp	r3, #27
 8000e0a:	d9db      	bls.n	8000dc4 <main+0x84>
      }
  }

  // Copy all data from local screenbuffer to the screen
  ssd1306_UpdateScreen(&hi2c1);
 8000e0c:	48b4      	ldr	r0, [pc, #720]	; (80010e0 <main+0x3a0>)
 8000e0e:	f000 fcb3 	bl	8001778 <ssd1306_UpdateScreen>
		  HAL_GPIO_TogglePin(ONBOARD_LED_GPIO_Port, ONBOARD_LED_Pin);

	  }
*/

	  var = val * 4096 / 3.3;
 8000e12:	4bb4      	ldr	r3, [pc, #720]	; (80010e4 <main+0x3a4>)
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	f04f 418b 	mov.w	r1, #1166016512	; 0x45800000
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	f7ff f9a0 	bl	8000160 <__aeabi_fmul>
 8000e20:	4603      	mov	r3, r0
 8000e22:	4618      	mov	r0, r3
 8000e24:	f7ff fbb4 	bl	8000590 <__aeabi_f2d>
 8000e28:	a3a3      	add	r3, pc, #652	; (adr r3, 80010b8 <main+0x378>)
 8000e2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e2e:	f7ff fd31 	bl	8000894 <__aeabi_ddiv>
 8000e32:	4602      	mov	r2, r0
 8000e34:	460b      	mov	r3, r1
 8000e36:	4610      	mov	r0, r2
 8000e38:	4619      	mov	r1, r3
 8000e3a:	f7ff fed9 	bl	8000bf0 <__aeabi_d2uiz>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	b29a      	uxth	r2, r3
 8000e42:	4ba9      	ldr	r3, [pc, #676]	; (80010e8 <main+0x3a8>)
 8000e44:	801a      	strh	r2, [r3, #0]
	  val += 0.1;
 8000e46:	4ba7      	ldr	r3, [pc, #668]	; (80010e4 <main+0x3a4>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	f7ff fba0 	bl	8000590 <__aeabi_f2d>
 8000e50:	a39b      	add	r3, pc, #620	; (adr r3, 80010c0 <main+0x380>)
 8000e52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e56:	f7ff fa3d 	bl	80002d4 <__adddf3>
 8000e5a:	4602      	mov	r2, r0
 8000e5c:	460b      	mov	r3, r1
 8000e5e:	4610      	mov	r0, r2
 8000e60:	4619      	mov	r1, r3
 8000e62:	f7ff fee5 	bl	8000c30 <__aeabi_d2f>
 8000e66:	4603      	mov	r3, r0
 8000e68:	4a9e      	ldr	r2, [pc, #632]	; (80010e4 <main+0x3a4>)
 8000e6a:	6013      	str	r3, [r2, #0]
	  if (val >= 3.3) val = 0;
 8000e6c:	4b9d      	ldr	r3, [pc, #628]	; (80010e4 <main+0x3a4>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	4618      	mov	r0, r3
 8000e72:	f7ff fb8d 	bl	8000590 <__aeabi_f2d>
 8000e76:	a390      	add	r3, pc, #576	; (adr r3, 80010b8 <main+0x378>)
 8000e78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e7c:	f7ff fe66 	bl	8000b4c <__aeabi_dcmpge>
 8000e80:	4603      	mov	r3, r0
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d003      	beq.n	8000e8e <main+0x14e>
 8000e86:	4b97      	ldr	r3, [pc, #604]	; (80010e4 <main+0x3a4>)
 8000e88:	f04f 0200 	mov.w	r2, #0
 8000e8c:	601a      	str	r2, [r3, #0]

//	  ADC_Select_CH1();
	  HAL_ADC_Start(&hadc1);
 8000e8e:	4897      	ldr	r0, [pc, #604]	; (80010ec <main+0x3ac>)
 8000e90:	f001 f93a 	bl	8002108 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, 1000);
 8000e94:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000e98:	4894      	ldr	r0, [pc, #592]	; (80010ec <main+0x3ac>)
 8000e9a:	f001 fa0f 	bl	80022bc <HAL_ADC_PollForConversion>
	  ADC_VAL[0] = HAL_ADC_GetValue(&hadc1);
 8000e9e:	4893      	ldr	r0, [pc, #588]	; (80010ec <main+0x3ac>)
 8000ea0:	f001 fb12 	bl	80024c8 <HAL_ADC_GetValue>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	b29a      	uxth	r2, r3
 8000ea8:	4b91      	ldr	r3, [pc, #580]	; (80010f0 <main+0x3b0>)
 8000eaa:	801a      	strh	r2, [r3, #0]
	  ADC_VOLT[0] = 3.300 / 4096 * ADC_VAL[0];
 8000eac:	4b90      	ldr	r3, [pc, #576]	; (80010f0 <main+0x3b0>)
 8000eae:	881b      	ldrh	r3, [r3, #0]
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	f7ff fb5b 	bl	800056c <__aeabi_i2d>
 8000eb6:	a384      	add	r3, pc, #528	; (adr r3, 80010c8 <main+0x388>)
 8000eb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ebc:	f7ff fbc0 	bl	8000640 <__aeabi_dmul>
 8000ec0:	4602      	mov	r2, r0
 8000ec2:	460b      	mov	r3, r1
 8000ec4:	4610      	mov	r0, r2
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	f7ff feb2 	bl	8000c30 <__aeabi_d2f>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	4a89      	ldr	r2, [pc, #548]	; (80010f4 <main+0x3b4>)
 8000ed0:	6013      	str	r3, [r2, #0]
	  result[0] = (ADC_VOLT[0] * 1000 - 70.76) / 90.88;
 8000ed2:	4b88      	ldr	r3, [pc, #544]	; (80010f4 <main+0x3b4>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	4988      	ldr	r1, [pc, #544]	; (80010f8 <main+0x3b8>)
 8000ed8:	4618      	mov	r0, r3
 8000eda:	f7ff f941 	bl	8000160 <__aeabi_fmul>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	f7ff fb55 	bl	8000590 <__aeabi_f2d>
 8000ee6:	a37a      	add	r3, pc, #488	; (adr r3, 80010d0 <main+0x390>)
 8000ee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000eec:	f7ff f9f0 	bl	80002d0 <__aeabi_dsub>
 8000ef0:	4602      	mov	r2, r0
 8000ef2:	460b      	mov	r3, r1
 8000ef4:	4610      	mov	r0, r2
 8000ef6:	4619      	mov	r1, r3
 8000ef8:	a377      	add	r3, pc, #476	; (adr r3, 80010d8 <main+0x398>)
 8000efa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000efe:	f7ff fcc9 	bl	8000894 <__aeabi_ddiv>
 8000f02:	4602      	mov	r2, r0
 8000f04:	460b      	mov	r3, r1
 8000f06:	4610      	mov	r0, r2
 8000f08:	4619      	mov	r1, r3
 8000f0a:	f7ff fe91 	bl	8000c30 <__aeabi_d2f>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	4a7a      	ldr	r2, [pc, #488]	; (80010fc <main+0x3bc>)
 8000f12:	6013      	str	r3, [r2, #0]

	  sprintf(chargingCurrent_str, "%.2f", result[0]);
 8000f14:	4b79      	ldr	r3, [pc, #484]	; (80010fc <main+0x3bc>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f7ff fb39 	bl	8000590 <__aeabi_f2d>
 8000f1e:	4602      	mov	r2, r0
 8000f20:	460b      	mov	r3, r1
 8000f22:	4977      	ldr	r1, [pc, #476]	; (8001100 <main+0x3c0>)
 8000f24:	4877      	ldr	r0, [pc, #476]	; (8001104 <main+0x3c4>)
 8000f26:	f004 f98d 	bl	8005244 <siprintf>
	  sprintf(ADC1_VOLT_str, "%.2f", ADC_VOLT[0]);
 8000f2a:	4b72      	ldr	r3, [pc, #456]	; (80010f4 <main+0x3b4>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f7ff fb2e 	bl	8000590 <__aeabi_f2d>
 8000f34:	4602      	mov	r2, r0
 8000f36:	460b      	mov	r3, r1
 8000f38:	4971      	ldr	r1, [pc, #452]	; (8001100 <main+0x3c0>)
 8000f3a:	4873      	ldr	r0, [pc, #460]	; (8001108 <main+0x3c8>)
 8000f3c:	f004 f982 	bl	8005244 <siprintf>
	  sprintf(ADC1_VAL_str, "%d", ADC_VAL[0]);
 8000f40:	4b6b      	ldr	r3, [pc, #428]	; (80010f0 <main+0x3b0>)
 8000f42:	881b      	ldrh	r3, [r3, #0]
 8000f44:	461a      	mov	r2, r3
 8000f46:	4971      	ldr	r1, [pc, #452]	; (800110c <main+0x3cc>)
 8000f48:	4871      	ldr	r0, [pc, #452]	; (8001110 <main+0x3d0>)
 8000f4a:	f004 f97b 	bl	8005244 <siprintf>
	  HAL_ADC_Stop(&hadc1);
 8000f4e:	4867      	ldr	r0, [pc, #412]	; (80010ec <main+0x3ac>)
 8000f50:	f001 f988 	bl	8002264 <HAL_ADC_Stop>
	  HAL_Delay (10);
 8000f54:	200a      	movs	r0, #10
 8000f56:	f000 ffdb 	bl	8001f10 <HAL_Delay>

//	  ADC_Select_CH2();
	  HAL_ADC_Start(&hadc2);
 8000f5a:	486e      	ldr	r0, [pc, #440]	; (8001114 <main+0x3d4>)
 8000f5c:	f001 f8d4 	bl	8002108 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc2, 1000);
 8000f60:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000f64:	486b      	ldr	r0, [pc, #428]	; (8001114 <main+0x3d4>)
 8000f66:	f001 f9a9 	bl	80022bc <HAL_ADC_PollForConversion>
	  ADC_VAL[1] = HAL_ADC_GetValue(&hadc2);
 8000f6a:	486a      	ldr	r0, [pc, #424]	; (8001114 <main+0x3d4>)
 8000f6c:	f001 faac 	bl	80024c8 <HAL_ADC_GetValue>
 8000f70:	4603      	mov	r3, r0
 8000f72:	b29a      	uxth	r2, r3
 8000f74:	4b5e      	ldr	r3, [pc, #376]	; (80010f0 <main+0x3b0>)
 8000f76:	805a      	strh	r2, [r3, #2]
	  ADC_VOLT[1] = 3.300 / 4096 * ADC_VAL[1];
 8000f78:	4b5d      	ldr	r3, [pc, #372]	; (80010f0 <main+0x3b0>)
 8000f7a:	885b      	ldrh	r3, [r3, #2]
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f7ff faf5 	bl	800056c <__aeabi_i2d>
 8000f82:	a351      	add	r3, pc, #324	; (adr r3, 80010c8 <main+0x388>)
 8000f84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f88:	f7ff fb5a 	bl	8000640 <__aeabi_dmul>
 8000f8c:	4602      	mov	r2, r0
 8000f8e:	460b      	mov	r3, r1
 8000f90:	4610      	mov	r0, r2
 8000f92:	4619      	mov	r1, r3
 8000f94:	f7ff fe4c 	bl	8000c30 <__aeabi_d2f>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	4a56      	ldr	r2, [pc, #344]	; (80010f4 <main+0x3b4>)
 8000f9c:	6053      	str	r3, [r2, #4]
	  result[1] = (ADC_VOLT[1] * 1000 - 70.76) / 90.88;
 8000f9e:	4b55      	ldr	r3, [pc, #340]	; (80010f4 <main+0x3b4>)
 8000fa0:	685b      	ldr	r3, [r3, #4]
 8000fa2:	4955      	ldr	r1, [pc, #340]	; (80010f8 <main+0x3b8>)
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f7ff f8db 	bl	8000160 <__aeabi_fmul>
 8000faa:	4603      	mov	r3, r0
 8000fac:	4618      	mov	r0, r3
 8000fae:	f7ff faef 	bl	8000590 <__aeabi_f2d>
 8000fb2:	a347      	add	r3, pc, #284	; (adr r3, 80010d0 <main+0x390>)
 8000fb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fb8:	f7ff f98a 	bl	80002d0 <__aeabi_dsub>
 8000fbc:	4602      	mov	r2, r0
 8000fbe:	460b      	mov	r3, r1
 8000fc0:	4610      	mov	r0, r2
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	a344      	add	r3, pc, #272	; (adr r3, 80010d8 <main+0x398>)
 8000fc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fca:	f7ff fc63 	bl	8000894 <__aeabi_ddiv>
 8000fce:	4602      	mov	r2, r0
 8000fd0:	460b      	mov	r3, r1
 8000fd2:	4610      	mov	r0, r2
 8000fd4:	4619      	mov	r1, r3
 8000fd6:	f7ff fe2b 	bl	8000c30 <__aeabi_d2f>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	4a47      	ldr	r2, [pc, #284]	; (80010fc <main+0x3bc>)
 8000fde:	6053      	str	r3, [r2, #4]

	  sprintf(chargingVoltage_str, "%.2f", result[1]);
 8000fe0:	4b46      	ldr	r3, [pc, #280]	; (80010fc <main+0x3bc>)
 8000fe2:	685b      	ldr	r3, [r3, #4]
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f7ff fad3 	bl	8000590 <__aeabi_f2d>
 8000fea:	4602      	mov	r2, r0
 8000fec:	460b      	mov	r3, r1
 8000fee:	4944      	ldr	r1, [pc, #272]	; (8001100 <main+0x3c0>)
 8000ff0:	4849      	ldr	r0, [pc, #292]	; (8001118 <main+0x3d8>)
 8000ff2:	f004 f927 	bl	8005244 <siprintf>
	  sprintf(ADC2_VOLT_str, "%.2f", ADC_VOLT[1]);
 8000ff6:	4b3f      	ldr	r3, [pc, #252]	; (80010f4 <main+0x3b4>)
 8000ff8:	685b      	ldr	r3, [r3, #4]
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f7ff fac8 	bl	8000590 <__aeabi_f2d>
 8001000:	4602      	mov	r2, r0
 8001002:	460b      	mov	r3, r1
 8001004:	493e      	ldr	r1, [pc, #248]	; (8001100 <main+0x3c0>)
 8001006:	4845      	ldr	r0, [pc, #276]	; (800111c <main+0x3dc>)
 8001008:	f004 f91c 	bl	8005244 <siprintf>
	  sprintf(ADC2_VAL_str, "%d", ADC_VAL[1]);
 800100c:	4b38      	ldr	r3, [pc, #224]	; (80010f0 <main+0x3b0>)
 800100e:	885b      	ldrh	r3, [r3, #2]
 8001010:	461a      	mov	r2, r3
 8001012:	493e      	ldr	r1, [pc, #248]	; (800110c <main+0x3cc>)
 8001014:	4842      	ldr	r0, [pc, #264]	; (8001120 <main+0x3e0>)
 8001016:	f004 f915 	bl	8005244 <siprintf>
	  HAL_ADC_Stop(&hadc2);
 800101a:	483e      	ldr	r0, [pc, #248]	; (8001114 <main+0x3d4>)
 800101c:	f001 f922 	bl	8002264 <HAL_ADC_Stop>
	  HAL_Delay (10);
 8001020:	200a      	movs	r0, #10
 8001022:	f000 ff75 	bl	8001f10 <HAL_Delay>

	  ssd1306_Fill(Black);
 8001026:	2000      	movs	r0, #0
 8001028:	f000 fb84 	bl	8001734 <ssd1306_Fill>
	  ssd1306_SetCursor(0, 0);
 800102c:	2100      	movs	r1, #0
 800102e:	2000      	movs	r0, #0
 8001030:	f000 fcda 	bl	80019e8 <ssd1306_SetCursor>
	  ssd1306_WriteString(ADC1_VAL_str, Font_11x18, White);
 8001034:	4a3b      	ldr	r2, [pc, #236]	; (8001124 <main+0x3e4>)
 8001036:	2301      	movs	r3, #1
 8001038:	ca06      	ldmia	r2, {r1, r2}
 800103a:	4835      	ldr	r0, [pc, #212]	; (8001110 <main+0x3d0>)
 800103c:	f000 fcae 	bl	800199c <ssd1306_WriteString>

	  ssd1306_SetCursor(64, 0);
 8001040:	2100      	movs	r1, #0
 8001042:	2040      	movs	r0, #64	; 0x40
 8001044:	f000 fcd0 	bl	80019e8 <ssd1306_SetCursor>
	  ssd1306_WriteString(ADC2_VAL_str, Font_11x18, White);
 8001048:	4a36      	ldr	r2, [pc, #216]	; (8001124 <main+0x3e4>)
 800104a:	2301      	movs	r3, #1
 800104c:	ca06      	ldmia	r2, {r1, r2}
 800104e:	4834      	ldr	r0, [pc, #208]	; (8001120 <main+0x3e0>)
 8001050:	f000 fca4 	bl	800199c <ssd1306_WriteString>

	  ssd1306_SetCursor(0, 20);
 8001054:	2114      	movs	r1, #20
 8001056:	2000      	movs	r0, #0
 8001058:	f000 fcc6 	bl	80019e8 <ssd1306_SetCursor>
	  ssd1306_WriteString(ADC1_VOLT_str, Font_11x18, White);
 800105c:	4a31      	ldr	r2, [pc, #196]	; (8001124 <main+0x3e4>)
 800105e:	2301      	movs	r3, #1
 8001060:	ca06      	ldmia	r2, {r1, r2}
 8001062:	4829      	ldr	r0, [pc, #164]	; (8001108 <main+0x3c8>)
 8001064:	f000 fc9a 	bl	800199c <ssd1306_WriteString>

	  ssd1306_SetCursor(64, 20);
 8001068:	2114      	movs	r1, #20
 800106a:	2040      	movs	r0, #64	; 0x40
 800106c:	f000 fcbc 	bl	80019e8 <ssd1306_SetCursor>
	  ssd1306_WriteString(ADC2_VOLT_str, Font_11x18, White);
 8001070:	4a2c      	ldr	r2, [pc, #176]	; (8001124 <main+0x3e4>)
 8001072:	2301      	movs	r3, #1
 8001074:	ca06      	ldmia	r2, {r1, r2}
 8001076:	4829      	ldr	r0, [pc, #164]	; (800111c <main+0x3dc>)
 8001078:	f000 fc90 	bl	800199c <ssd1306_WriteString>

	  ssd1306_SetCursor(0, 40);
 800107c:	2128      	movs	r1, #40	; 0x28
 800107e:	2000      	movs	r0, #0
 8001080:	f000 fcb2 	bl	80019e8 <ssd1306_SetCursor>
	  ssd1306_WriteString(chargingCurrent_str, Font_11x18, White);
 8001084:	4a27      	ldr	r2, [pc, #156]	; (8001124 <main+0x3e4>)
 8001086:	2301      	movs	r3, #1
 8001088:	ca06      	ldmia	r2, {r1, r2}
 800108a:	481e      	ldr	r0, [pc, #120]	; (8001104 <main+0x3c4>)
 800108c:	f000 fc86 	bl	800199c <ssd1306_WriteString>

	  ssd1306_SetCursor(64, 40);
 8001090:	2128      	movs	r1, #40	; 0x28
 8001092:	2040      	movs	r0, #64	; 0x40
 8001094:	f000 fca8 	bl	80019e8 <ssd1306_SetCursor>
	  ssd1306_WriteString(chargingVoltage_str, Font_11x18, White);
 8001098:	4a22      	ldr	r2, [pc, #136]	; (8001124 <main+0x3e4>)
 800109a:	2301      	movs	r3, #1
 800109c:	ca06      	ldmia	r2, {r1, r2}
 800109e:	481e      	ldr	r0, [pc, #120]	; (8001118 <main+0x3d8>)
 80010a0:	f000 fc7c 	bl	800199c <ssd1306_WriteString>


	  ssd1306_UpdateScreen(&hi2c1);
 80010a4:	480e      	ldr	r0, [pc, #56]	; (80010e0 <main+0x3a0>)
 80010a6:	f000 fb67 	bl	8001778 <ssd1306_UpdateScreen>

	  HAL_Delay (10);
 80010aa:	200a      	movs	r0, #10
 80010ac:	f000 ff30 	bl	8001f10 <HAL_Delay>
	  var = val * 4096 / 3.3;
 80010b0:	e6af      	b.n	8000e12 <main+0xd2>
 80010b2:	bf00      	nop
 80010b4:	f3af 8000 	nop.w
 80010b8:	66666666 	.word	0x66666666
 80010bc:	400a6666 	.word	0x400a6666
 80010c0:	9999999a 	.word	0x9999999a
 80010c4:	3fb99999 	.word	0x3fb99999
 80010c8:	66666666 	.word	0x66666666
 80010cc:	3f4a6666 	.word	0x3f4a6666
 80010d0:	d70a3d71 	.word	0xd70a3d71
 80010d4:	4051b0a3 	.word	0x4051b0a3
 80010d8:	eb851eb8 	.word	0xeb851eb8
 80010dc:	4056b851 	.word	0x4056b851
 80010e0:	20000664 	.word	0x20000664
 80010e4:	20000208 	.word	0x20000208
 80010e8:	20000204 	.word	0x20000204
 80010ec:	200006d0 	.word	0x200006d0
 80010f0:	2000070c 	.word	0x2000070c
 80010f4:	2000062c 	.word	0x2000062c
 80010f8:	447a0000 	.word	0x447a0000
 80010fc:	20000710 	.word	0x20000710
 8001100:	08008d90 	.word	0x08008d90
 8001104:	20000724 	.word	0x20000724
 8001108:	20000700 	.word	0x20000700
 800110c:	08008d98 	.word	0x08008d98
 8001110:	200006b8 	.word	0x200006b8
 8001114:	20000634 	.word	0x20000634
 8001118:	20000718 	.word	0x20000718
 800111c:	20000620 	.word	0x20000620
 8001120:	200006c4 	.word	0x200006c4
 8001124:	20000000 	.word	0x20000000

08001128 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b094      	sub	sp, #80	; 0x50
 800112c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800112e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001132:	2228      	movs	r2, #40	; 0x28
 8001134:	2100      	movs	r1, #0
 8001136:	4618      	mov	r0, r3
 8001138:	f003 fa06 	bl	8004548 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800113c:	f107 0314 	add.w	r3, r7, #20
 8001140:	2200      	movs	r2, #0
 8001142:	601a      	str	r2, [r3, #0]
 8001144:	605a      	str	r2, [r3, #4]
 8001146:	609a      	str	r2, [r3, #8]
 8001148:	60da      	str	r2, [r3, #12]
 800114a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800114c:	1d3b      	adds	r3, r7, #4
 800114e:	2200      	movs	r2, #0
 8001150:	601a      	str	r2, [r3, #0]
 8001152:	605a      	str	r2, [r3, #4]
 8001154:	609a      	str	r2, [r3, #8]
 8001156:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001158:	2302      	movs	r3, #2
 800115a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800115c:	2301      	movs	r3, #1
 800115e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001160:	2310      	movs	r3, #16
 8001162:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001164:	2300      	movs	r3, #0
 8001166:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001168:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800116c:	4618      	mov	r0, r3
 800116e:	f002 fc2d 	bl	80039cc <HAL_RCC_OscConfig>
 8001172:	4603      	mov	r3, r0
 8001174:	2b00      	cmp	r3, #0
 8001176:	d001      	beq.n	800117c <SystemClock_Config+0x54>
  {
    Error_Handler();
 8001178:	f000 f9a0 	bl	80014bc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800117c:	230f      	movs	r3, #15
 800117e:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001180:	2300      	movs	r3, #0
 8001182:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001184:	2300      	movs	r3, #0
 8001186:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001188:	2300      	movs	r3, #0
 800118a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800118c:	2300      	movs	r3, #0
 800118e:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001190:	f107 0314 	add.w	r3, r7, #20
 8001194:	2100      	movs	r1, #0
 8001196:	4618      	mov	r0, r3
 8001198:	f002 fe98 	bl	8003ecc <HAL_RCC_ClockConfig>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d001      	beq.n	80011a6 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 80011a2:	f000 f98b 	bl	80014bc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80011a6:	2302      	movs	r3, #2
 80011a8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 80011aa:	2300      	movs	r3, #0
 80011ac:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011ae:	1d3b      	adds	r3, r7, #4
 80011b0:	4618      	mov	r0, r3
 80011b2:	f003 f825 	bl	8004200 <HAL_RCCEx_PeriphCLKConfig>
 80011b6:	4603      	mov	r3, r0
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d001      	beq.n	80011c0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80011bc:	f000 f97e 	bl	80014bc <Error_Handler>
  }
}
 80011c0:	bf00      	nop
 80011c2:	3750      	adds	r7, #80	; 0x50
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}

080011c8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b084      	sub	sp, #16
 80011cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80011ce:	2300      	movs	r3, #0
 80011d0:	60fb      	str	r3, [r7, #12]
  ADC_ChannelConfTypeDef sConfig = {0};
 80011d2:	463b      	mov	r3, r7
 80011d4:	2200      	movs	r2, #0
 80011d6:	601a      	str	r2, [r3, #0]
 80011d8:	605a      	str	r2, [r3, #4]
 80011da:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80011dc:	4b1f      	ldr	r3, [pc, #124]	; (800125c <MX_ADC1_Init+0x94>)
 80011de:	4a20      	ldr	r2, [pc, #128]	; (8001260 <MX_ADC1_Init+0x98>)
 80011e0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80011e2:	4b1e      	ldr	r3, [pc, #120]	; (800125c <MX_ADC1_Init+0x94>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80011e8:	4b1c      	ldr	r3, [pc, #112]	; (800125c <MX_ADC1_Init+0x94>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80011ee:	4b1b      	ldr	r3, [pc, #108]	; (800125c <MX_ADC1_Init+0x94>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80011f4:	4b19      	ldr	r3, [pc, #100]	; (800125c <MX_ADC1_Init+0x94>)
 80011f6:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80011fa:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80011fc:	4b17      	ldr	r3, [pc, #92]	; (800125c <MX_ADC1_Init+0x94>)
 80011fe:	2200      	movs	r2, #0
 8001200:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8001202:	4b16      	ldr	r3, [pc, #88]	; (800125c <MX_ADC1_Init+0x94>)
 8001204:	2201      	movs	r2, #1
 8001206:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001208:	4814      	ldr	r0, [pc, #80]	; (800125c <MX_ADC1_Init+0x94>)
 800120a:	f000 fea5 	bl	8001f58 <HAL_ADC_Init>
 800120e:	4603      	mov	r3, r0
 8001210:	2b00      	cmp	r3, #0
 8001212:	d001      	beq.n	8001218 <MX_ADC1_Init+0x50>
  {
    Error_Handler();
 8001214:	f000 f952 	bl	80014bc <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_DUALMODE_REGSIMULT;
 8001218:	f44f 23c0 	mov.w	r3, #393216	; 0x60000
 800121c:	60fb      	str	r3, [r7, #12]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800121e:	f107 030c 	add.w	r3, r7, #12
 8001222:	4619      	mov	r1, r3
 8001224:	480d      	ldr	r0, [pc, #52]	; (800125c <MX_ADC1_Init+0x94>)
 8001226:	f001 fc7b 	bl	8002b20 <HAL_ADCEx_MultiModeConfigChannel>
 800122a:	4603      	mov	r3, r0
 800122c:	2b00      	cmp	r3, #0
 800122e:	d001      	beq.n	8001234 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8001230:	f000 f944 	bl	80014bc <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001234:	2301      	movs	r3, #1
 8001236:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001238:	2301      	movs	r3, #1
 800123a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 800123c:	2303      	movs	r3, #3
 800123e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001240:	463b      	mov	r3, r7
 8001242:	4619      	mov	r1, r3
 8001244:	4805      	ldr	r0, [pc, #20]	; (800125c <MX_ADC1_Init+0x94>)
 8001246:	f001 fa21 	bl	800268c <HAL_ADC_ConfigChannel>
 800124a:	4603      	mov	r3, r0
 800124c:	2b00      	cmp	r3, #0
 800124e:	d001      	beq.n	8001254 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8001250:	f000 f934 	bl	80014bc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001254:	bf00      	nop
 8001256:	3710      	adds	r7, #16
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}
 800125c:	200006d0 	.word	0x200006d0
 8001260:	40012400 	.word	0x40012400

08001264 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b084      	sub	sp, #16
 8001268:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800126a:	1d3b      	adds	r3, r7, #4
 800126c:	2200      	movs	r2, #0
 800126e:	601a      	str	r2, [r3, #0]
 8001270:	605a      	str	r2, [r3, #4]
 8001272:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 8001274:	4b18      	ldr	r3, [pc, #96]	; (80012d8 <MX_ADC2_Init+0x74>)
 8001276:	4a19      	ldr	r2, [pc, #100]	; (80012dc <MX_ADC2_Init+0x78>)
 8001278:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800127a:	4b17      	ldr	r3, [pc, #92]	; (80012d8 <MX_ADC2_Init+0x74>)
 800127c:	2200      	movs	r2, #0
 800127e:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001280:	4b15      	ldr	r3, [pc, #84]	; (80012d8 <MX_ADC2_Init+0x74>)
 8001282:	2200      	movs	r2, #0
 8001284:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001286:	4b14      	ldr	r3, [pc, #80]	; (80012d8 <MX_ADC2_Init+0x74>)
 8001288:	2200      	movs	r2, #0
 800128a:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800128c:	4b12      	ldr	r3, [pc, #72]	; (80012d8 <MX_ADC2_Init+0x74>)
 800128e:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001292:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001294:	4b10      	ldr	r3, [pc, #64]	; (80012d8 <MX_ADC2_Init+0x74>)
 8001296:	2200      	movs	r2, #0
 8001298:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 1;
 800129a:	4b0f      	ldr	r3, [pc, #60]	; (80012d8 <MX_ADC2_Init+0x74>)
 800129c:	2201      	movs	r2, #1
 800129e:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80012a0:	480d      	ldr	r0, [pc, #52]	; (80012d8 <MX_ADC2_Init+0x74>)
 80012a2:	f000 fe59 	bl	8001f58 <HAL_ADC_Init>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d001      	beq.n	80012b0 <MX_ADC2_Init+0x4c>
  {
    Error_Handler();
 80012ac:	f000 f906 	bl	80014bc <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80012b0:	2302      	movs	r3, #2
 80012b2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80012b4:	2301      	movs	r3, #1
 80012b6:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 80012b8:	2303      	movs	r3, #3
 80012ba:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80012bc:	1d3b      	adds	r3, r7, #4
 80012be:	4619      	mov	r1, r3
 80012c0:	4805      	ldr	r0, [pc, #20]	; (80012d8 <MX_ADC2_Init+0x74>)
 80012c2:	f001 f9e3 	bl	800268c <HAL_ADC_ConfigChannel>
 80012c6:	4603      	mov	r3, r0
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d001      	beq.n	80012d0 <MX_ADC2_Init+0x6c>
  {
    Error_Handler();
 80012cc:	f000 f8f6 	bl	80014bc <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80012d0:	bf00      	nop
 80012d2:	3710      	adds	r7, #16
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}
 80012d8:	20000634 	.word	0x20000634
 80012dc:	40012800 	.word	0x40012800

080012e0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80012e4:	4b12      	ldr	r3, [pc, #72]	; (8001330 <MX_I2C1_Init+0x50>)
 80012e6:	4a13      	ldr	r2, [pc, #76]	; (8001334 <MX_I2C1_Init+0x54>)
 80012e8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80012ea:	4b11      	ldr	r3, [pc, #68]	; (8001330 <MX_I2C1_Init+0x50>)
 80012ec:	4a12      	ldr	r2, [pc, #72]	; (8001338 <MX_I2C1_Init+0x58>)
 80012ee:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80012f0:	4b0f      	ldr	r3, [pc, #60]	; (8001330 <MX_I2C1_Init+0x50>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80012f6:	4b0e      	ldr	r3, [pc, #56]	; (8001330 <MX_I2C1_Init+0x50>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012fc:	4b0c      	ldr	r3, [pc, #48]	; (8001330 <MX_I2C1_Init+0x50>)
 80012fe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001302:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001304:	4b0a      	ldr	r3, [pc, #40]	; (8001330 <MX_I2C1_Init+0x50>)
 8001306:	2200      	movs	r2, #0
 8001308:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800130a:	4b09      	ldr	r3, [pc, #36]	; (8001330 <MX_I2C1_Init+0x50>)
 800130c:	2200      	movs	r2, #0
 800130e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001310:	4b07      	ldr	r3, [pc, #28]	; (8001330 <MX_I2C1_Init+0x50>)
 8001312:	2200      	movs	r2, #0
 8001314:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001316:	4b06      	ldr	r3, [pc, #24]	; (8001330 <MX_I2C1_Init+0x50>)
 8001318:	2200      	movs	r2, #0
 800131a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800131c:	4804      	ldr	r0, [pc, #16]	; (8001330 <MX_I2C1_Init+0x50>)
 800131e:	f001 fefb 	bl	8003118 <HAL_I2C_Init>
 8001322:	4603      	mov	r3, r0
 8001324:	2b00      	cmp	r3, #0
 8001326:	d001      	beq.n	800132c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001328:	f000 f8c8 	bl	80014bc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800132c:	bf00      	nop
 800132e:	bd80      	pop	{r7, pc}
 8001330:	20000664 	.word	0x20000664
 8001334:	40005400 	.word	0x40005400
 8001338:	00061a80 	.word	0x00061a80

0800133c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b08a      	sub	sp, #40	; 0x28
 8001340:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001342:	f107 0314 	add.w	r3, r7, #20
 8001346:	2200      	movs	r2, #0
 8001348:	601a      	str	r2, [r3, #0]
 800134a:	605a      	str	r2, [r3, #4]
 800134c:	609a      	str	r2, [r3, #8]
 800134e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001350:	4b54      	ldr	r3, [pc, #336]	; (80014a4 <MX_GPIO_Init+0x168>)
 8001352:	699b      	ldr	r3, [r3, #24]
 8001354:	4a53      	ldr	r2, [pc, #332]	; (80014a4 <MX_GPIO_Init+0x168>)
 8001356:	f043 0310 	orr.w	r3, r3, #16
 800135a:	6193      	str	r3, [r2, #24]
 800135c:	4b51      	ldr	r3, [pc, #324]	; (80014a4 <MX_GPIO_Init+0x168>)
 800135e:	699b      	ldr	r3, [r3, #24]
 8001360:	f003 0310 	and.w	r3, r3, #16
 8001364:	613b      	str	r3, [r7, #16]
 8001366:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001368:	4b4e      	ldr	r3, [pc, #312]	; (80014a4 <MX_GPIO_Init+0x168>)
 800136a:	699b      	ldr	r3, [r3, #24]
 800136c:	4a4d      	ldr	r2, [pc, #308]	; (80014a4 <MX_GPIO_Init+0x168>)
 800136e:	f043 0320 	orr.w	r3, r3, #32
 8001372:	6193      	str	r3, [r2, #24]
 8001374:	4b4b      	ldr	r3, [pc, #300]	; (80014a4 <MX_GPIO_Init+0x168>)
 8001376:	699b      	ldr	r3, [r3, #24]
 8001378:	f003 0320 	and.w	r3, r3, #32
 800137c:	60fb      	str	r3, [r7, #12]
 800137e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001380:	4b48      	ldr	r3, [pc, #288]	; (80014a4 <MX_GPIO_Init+0x168>)
 8001382:	699b      	ldr	r3, [r3, #24]
 8001384:	4a47      	ldr	r2, [pc, #284]	; (80014a4 <MX_GPIO_Init+0x168>)
 8001386:	f043 0304 	orr.w	r3, r3, #4
 800138a:	6193      	str	r3, [r2, #24]
 800138c:	4b45      	ldr	r3, [pc, #276]	; (80014a4 <MX_GPIO_Init+0x168>)
 800138e:	699b      	ldr	r3, [r3, #24]
 8001390:	f003 0304 	and.w	r3, r3, #4
 8001394:	60bb      	str	r3, [r7, #8]
 8001396:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001398:	4b42      	ldr	r3, [pc, #264]	; (80014a4 <MX_GPIO_Init+0x168>)
 800139a:	699b      	ldr	r3, [r3, #24]
 800139c:	4a41      	ldr	r2, [pc, #260]	; (80014a4 <MX_GPIO_Init+0x168>)
 800139e:	f043 0308 	orr.w	r3, r3, #8
 80013a2:	6193      	str	r3, [r2, #24]
 80013a4:	4b3f      	ldr	r3, [pc, #252]	; (80014a4 <MX_GPIO_Init+0x168>)
 80013a6:	699b      	ldr	r3, [r3, #24]
 80013a8:	f003 0308 	and.w	r3, r3, #8
 80013ac:	607b      	str	r3, [r7, #4]
 80013ae:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ONBOARD_LED_GPIO_Port, ONBOARD_LED_Pin, GPIO_PIN_SET);
 80013b0:	2201      	movs	r2, #1
 80013b2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013b6:	483c      	ldr	r0, [pc, #240]	; (80014a8 <MX_GPIO_Init+0x16c>)
 80013b8:	f001 fe96 	bl	80030e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80013bc:	2200      	movs	r2, #0
 80013be:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 80013c2:	4839      	ldr	r0, [pc, #228]	; (80014a8 <MX_GPIO_Init+0x16c>)
 80013c4:	f001 fe90 	bl	80030e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 80013c8:	2200      	movs	r2, #0
 80013ca:	2103      	movs	r1, #3
 80013cc:	4837      	ldr	r0, [pc, #220]	; (80014ac <MX_GPIO_Init+0x170>)
 80013ce:	f001 fe8b 	bl	80030e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 80013d2:	2200      	movs	r2, #0
 80013d4:	f64f 71f9 	movw	r1, #65529	; 0xfff9
 80013d8:	4835      	ldr	r0, [pc, #212]	; (80014b0 <MX_GPIO_Init+0x174>)
 80013da:	f001 fe85 	bl	80030e8 <HAL_GPIO_WritePin>
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 80013de:	2200      	movs	r2, #0
 80013e0:	f64f 41ff 	movw	r1, #64767	; 0xfcff
 80013e4:	4833      	ldr	r0, [pc, #204]	; (80014b4 <MX_GPIO_Init+0x178>)
 80013e6:	f001 fe7f 	bl	80030e8 <HAL_GPIO_WritePin>
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin : ONBOARD_LED_Pin */
  GPIO_InitStruct.Pin = ONBOARD_LED_Pin;
 80013ea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013f0:	2301      	movs	r3, #1
 80013f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013f4:	2301      	movs	r3, #1
 80013f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013f8:	2302      	movs	r3, #2
 80013fa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ONBOARD_LED_GPIO_Port, &GPIO_InitStruct);
 80013fc:	f107 0314 	add.w	r3, r7, #20
 8001400:	4619      	mov	r1, r3
 8001402:	4829      	ldr	r0, [pc, #164]	; (80014a8 <MX_GPIO_Init+0x16c>)
 8001404:	f001 fcec 	bl	8002de0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001408:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800140c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800140e:	2301      	movs	r3, #1
 8001410:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001412:	2300      	movs	r3, #0
 8001414:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001416:	2302      	movs	r3, #2
 8001418:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800141a:	f107 0314 	add.w	r3, r7, #20
 800141e:	4619      	mov	r1, r3
 8001420:	4821      	ldr	r0, [pc, #132]	; (80014a8 <MX_GPIO_Init+0x16c>)
 8001422:	f001 fcdd 	bl	8002de0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001426:	2303      	movs	r3, #3
 8001428:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800142a:	2301      	movs	r3, #1
 800142c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800142e:	2300      	movs	r3, #0
 8001430:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001432:	2302      	movs	r3, #2
 8001434:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001436:	f107 0314 	add.w	r3, r7, #20
 800143a:	4619      	mov	r1, r3
 800143c:	481b      	ldr	r0, [pc, #108]	; (80014ac <MX_GPIO_Init+0x170>)
 800143e:	f001 fccf 	bl	8002de0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA3 PA4 PA5
                           PA6 PA7 PA8 PA9
                           PA10 PA11 PA12 PA13
                           PA14 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8001442:	f64f 73f9 	movw	r3, #65529	; 0xfff9
 8001446:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001448:	2301      	movs	r3, #1
 800144a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800144c:	2300      	movs	r3, #0
 800144e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001450:	2302      	movs	r3, #2
 8001452:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001454:	f107 0314 	add.w	r3, r7, #20
 8001458:	4619      	mov	r1, r3
 800145a:	4815      	ldr	r0, [pc, #84]	; (80014b0 <MX_GPIO_Init+0x174>)
 800145c:	f001 fcc0 	bl	8002de0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB11 PB12 PB13 PB14
                           PB15 PB3 PB4 PB5
                           PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8001460:	f64f 43ff 	movw	r3, #64767	; 0xfcff
 8001464:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001466:	2301      	movs	r3, #1
 8001468:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800146a:	2300      	movs	r3, #0
 800146c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800146e:	2302      	movs	r3, #2
 8001470:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001472:	f107 0314 	add.w	r3, r7, #20
 8001476:	4619      	mov	r1, r3
 8001478:	480e      	ldr	r0, [pc, #56]	; (80014b4 <MX_GPIO_Init+0x178>)
 800147a:	f001 fcb1 	bl	8002de0 <HAL_GPIO_Init>

  /*Configure peripheral I/O remapping */
  __HAL_AFIO_REMAP_PD01_ENABLE();
 800147e:	4b0e      	ldr	r3, [pc, #56]	; (80014b8 <MX_GPIO_Init+0x17c>)
 8001480:	685b      	ldr	r3, [r3, #4]
 8001482:	627b      	str	r3, [r7, #36]	; 0x24
 8001484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001486:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800148a:	627b      	str	r3, [r7, #36]	; 0x24
 800148c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800148e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001492:	627b      	str	r3, [r7, #36]	; 0x24
 8001494:	4a08      	ldr	r2, [pc, #32]	; (80014b8 <MX_GPIO_Init+0x17c>)
 8001496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001498:	6053      	str	r3, [r2, #4]

}
 800149a:	bf00      	nop
 800149c:	3728      	adds	r7, #40	; 0x28
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	40021000 	.word	0x40021000
 80014a8:	40011000 	.word	0x40011000
 80014ac:	40011400 	.word	0x40011400
 80014b0:	40010800 	.word	0x40010800
 80014b4:	40010c00 	.word	0x40010c00
 80014b8:	40010000 	.word	0x40010000

080014bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014bc:	b480      	push	{r7}
 80014be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014c0:	b672      	cpsid	i
}
 80014c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014c4:	e7fe      	b.n	80014c4 <Error_Handler+0x8>

080014c6 <ssd1306_WriteCommand>:

//
//  Send a byte to the command register
//
static uint8_t ssd1306_WriteCommand(I2C_HandleTypeDef *hi2c, uint8_t command)
{
 80014c6:	b580      	push	{r7, lr}
 80014c8:	b086      	sub	sp, #24
 80014ca:	af04      	add	r7, sp, #16
 80014cc:	6078      	str	r0, [r7, #4]
 80014ce:	460b      	mov	r3, r1
 80014d0:	70fb      	strb	r3, [r7, #3]
    return HAL_I2C_Mem_Write(hi2c, SSD1306_I2C_ADDR, 0x00, 1, &command, 1, 10);
 80014d2:	230a      	movs	r3, #10
 80014d4:	9302      	str	r3, [sp, #8]
 80014d6:	2301      	movs	r3, #1
 80014d8:	9301      	str	r3, [sp, #4]
 80014da:	1cfb      	adds	r3, r7, #3
 80014dc:	9300      	str	r3, [sp, #0]
 80014de:	2301      	movs	r3, #1
 80014e0:	2200      	movs	r2, #0
 80014e2:	2178      	movs	r1, #120	; 0x78
 80014e4:	6878      	ldr	r0, [r7, #4]
 80014e6:	f001 ff5b 	bl	80033a0 <HAL_I2C_Mem_Write>
 80014ea:	4603      	mov	r3, r0
}
 80014ec:	4618      	mov	r0, r3
 80014ee:	3708      	adds	r7, #8
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bd80      	pop	{r7, pc}

080014f4 <ssd1306_Init>:

//
//  Initialize the oled screen
//
uint8_t ssd1306_Init(I2C_HandleTypeDef *hi2c)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b084      	sub	sp, #16
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
    // Wait for the screen to boot
    HAL_Delay(100);
 80014fc:	2064      	movs	r0, #100	; 0x64
 80014fe:	f000 fd07 	bl	8001f10 <HAL_Delay>
    int status = 0;
 8001502:	2300      	movs	r3, #0
 8001504:	60fb      	str	r3, [r7, #12]

    // Init LCD
    status += ssd1306_WriteCommand(hi2c, 0xAE);   // Display off
 8001506:	21ae      	movs	r1, #174	; 0xae
 8001508:	6878      	ldr	r0, [r7, #4]
 800150a:	f7ff ffdc 	bl	80014c6 <ssd1306_WriteCommand>
 800150e:	4603      	mov	r3, r0
 8001510:	461a      	mov	r2, r3
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	4413      	add	r3, r2
 8001516:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x20);   // Set Memory Addressing Mode
 8001518:	2120      	movs	r1, #32
 800151a:	6878      	ldr	r0, [r7, #4]
 800151c:	f7ff ffd3 	bl	80014c6 <ssd1306_WriteCommand>
 8001520:	4603      	mov	r3, r0
 8001522:	461a      	mov	r2, r3
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	4413      	add	r3, r2
 8001528:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x10);   // 00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 800152a:	2110      	movs	r1, #16
 800152c:	6878      	ldr	r0, [r7, #4]
 800152e:	f7ff ffca 	bl	80014c6 <ssd1306_WriteCommand>
 8001532:	4603      	mov	r3, r0
 8001534:	461a      	mov	r2, r3
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	4413      	add	r3, r2
 800153a:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xB0);   // Set Page Start Address for Page Addressing Mode,0-7
 800153c:	21b0      	movs	r1, #176	; 0xb0
 800153e:	6878      	ldr	r0, [r7, #4]
 8001540:	f7ff ffc1 	bl	80014c6 <ssd1306_WriteCommand>
 8001544:	4603      	mov	r3, r0
 8001546:	461a      	mov	r2, r3
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	4413      	add	r3, r2
 800154c:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xC8);   // Set COM Output Scan Direction
 800154e:	21c8      	movs	r1, #200	; 0xc8
 8001550:	6878      	ldr	r0, [r7, #4]
 8001552:	f7ff ffb8 	bl	80014c6 <ssd1306_WriteCommand>
 8001556:	4603      	mov	r3, r0
 8001558:	461a      	mov	r2, r3
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	4413      	add	r3, r2
 800155e:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x00);   // Set low column address
 8001560:	2100      	movs	r1, #0
 8001562:	6878      	ldr	r0, [r7, #4]
 8001564:	f7ff ffaf 	bl	80014c6 <ssd1306_WriteCommand>
 8001568:	4603      	mov	r3, r0
 800156a:	461a      	mov	r2, r3
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	4413      	add	r3, r2
 8001570:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x10);   // Set high column address
 8001572:	2110      	movs	r1, #16
 8001574:	6878      	ldr	r0, [r7, #4]
 8001576:	f7ff ffa6 	bl	80014c6 <ssd1306_WriteCommand>
 800157a:	4603      	mov	r3, r0
 800157c:	461a      	mov	r2, r3
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	4413      	add	r3, r2
 8001582:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x40);   // Set start line address
 8001584:	2140      	movs	r1, #64	; 0x40
 8001586:	6878      	ldr	r0, [r7, #4]
 8001588:	f7ff ff9d 	bl	80014c6 <ssd1306_WriteCommand>
 800158c:	4603      	mov	r3, r0
 800158e:	461a      	mov	r2, r3
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	4413      	add	r3, r2
 8001594:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x81);   // set contrast control register
 8001596:	2181      	movs	r1, #129	; 0x81
 8001598:	6878      	ldr	r0, [r7, #4]
 800159a:	f7ff ff94 	bl	80014c6 <ssd1306_WriteCommand>
 800159e:	4603      	mov	r3, r0
 80015a0:	461a      	mov	r2, r3
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	4413      	add	r3, r2
 80015a6:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xFF);
 80015a8:	21ff      	movs	r1, #255	; 0xff
 80015aa:	6878      	ldr	r0, [r7, #4]
 80015ac:	f7ff ff8b 	bl	80014c6 <ssd1306_WriteCommand>
 80015b0:	4603      	mov	r3, r0
 80015b2:	461a      	mov	r2, r3
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	4413      	add	r3, r2
 80015b8:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xA1);   // Set segment re-map 0 to 127
 80015ba:	21a1      	movs	r1, #161	; 0xa1
 80015bc:	6878      	ldr	r0, [r7, #4]
 80015be:	f7ff ff82 	bl	80014c6 <ssd1306_WriteCommand>
 80015c2:	4603      	mov	r3, r0
 80015c4:	461a      	mov	r2, r3
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	4413      	add	r3, r2
 80015ca:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xA6);   // Set normal display
 80015cc:	21a6      	movs	r1, #166	; 0xa6
 80015ce:	6878      	ldr	r0, [r7, #4]
 80015d0:	f7ff ff79 	bl	80014c6 <ssd1306_WriteCommand>
 80015d4:	4603      	mov	r3, r0
 80015d6:	461a      	mov	r2, r3
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	4413      	add	r3, r2
 80015dc:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, 0xA8);   // Set multiplex ratio(1 to 64)
 80015de:	21a8      	movs	r1, #168	; 0xa8
 80015e0:	6878      	ldr	r0, [r7, #4]
 80015e2:	f7ff ff70 	bl	80014c6 <ssd1306_WriteCommand>
 80015e6:	4603      	mov	r3, r0
 80015e8:	461a      	mov	r2, r3
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	4413      	add	r3, r2
 80015ee:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, SSD1306_HEIGHT - 1);
 80015f0:	213f      	movs	r1, #63	; 0x3f
 80015f2:	6878      	ldr	r0, [r7, #4]
 80015f4:	f7ff ff67 	bl	80014c6 <ssd1306_WriteCommand>
 80015f8:	4603      	mov	r3, r0
 80015fa:	461a      	mov	r2, r3
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	4413      	add	r3, r2
 8001600:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, 0xA4);   // 0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001602:	21a4      	movs	r1, #164	; 0xa4
 8001604:	6878      	ldr	r0, [r7, #4]
 8001606:	f7ff ff5e 	bl	80014c6 <ssd1306_WriteCommand>
 800160a:	4603      	mov	r3, r0
 800160c:	461a      	mov	r2, r3
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	4413      	add	r3, r2
 8001612:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xD3);   // Set display offset
 8001614:	21d3      	movs	r1, #211	; 0xd3
 8001616:	6878      	ldr	r0, [r7, #4]
 8001618:	f7ff ff55 	bl	80014c6 <ssd1306_WriteCommand>
 800161c:	4603      	mov	r3, r0
 800161e:	461a      	mov	r2, r3
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	4413      	add	r3, r2
 8001624:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x00);   // No offset
 8001626:	2100      	movs	r1, #0
 8001628:	6878      	ldr	r0, [r7, #4]
 800162a:	f7ff ff4c 	bl	80014c6 <ssd1306_WriteCommand>
 800162e:	4603      	mov	r3, r0
 8001630:	461a      	mov	r2, r3
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	4413      	add	r3, r2
 8001636:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xD5);   // Set display clock divide ratio/oscillator frequency
 8001638:	21d5      	movs	r1, #213	; 0xd5
 800163a:	6878      	ldr	r0, [r7, #4]
 800163c:	f7ff ff43 	bl	80014c6 <ssd1306_WriteCommand>
 8001640:	4603      	mov	r3, r0
 8001642:	461a      	mov	r2, r3
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	4413      	add	r3, r2
 8001648:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xF0);   // Set divide ratio
 800164a:	21f0      	movs	r1, #240	; 0xf0
 800164c:	6878      	ldr	r0, [r7, #4]
 800164e:	f7ff ff3a 	bl	80014c6 <ssd1306_WriteCommand>
 8001652:	4603      	mov	r3, r0
 8001654:	461a      	mov	r2, r3
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	4413      	add	r3, r2
 800165a:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xD9);   // Set pre-charge period
 800165c:	21d9      	movs	r1, #217	; 0xd9
 800165e:	6878      	ldr	r0, [r7, #4]
 8001660:	f7ff ff31 	bl	80014c6 <ssd1306_WriteCommand>
 8001664:	4603      	mov	r3, r0
 8001666:	461a      	mov	r2, r3
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	4413      	add	r3, r2
 800166c:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x22);
 800166e:	2122      	movs	r1, #34	; 0x22
 8001670:	6878      	ldr	r0, [r7, #4]
 8001672:	f7ff ff28 	bl	80014c6 <ssd1306_WriteCommand>
 8001676:	4603      	mov	r3, r0
 8001678:	461a      	mov	r2, r3
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	4413      	add	r3, r2
 800167e:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, 0xDA);   // Set com pins hardware configuration
 8001680:	21da      	movs	r1, #218	; 0xda
 8001682:	6878      	ldr	r0, [r7, #4]
 8001684:	f7ff ff1f 	bl	80014c6 <ssd1306_WriteCommand>
 8001688:	4603      	mov	r3, r0
 800168a:	461a      	mov	r2, r3
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	4413      	add	r3, r2
 8001690:	60fb      	str	r3, [r7, #12]
#ifdef SSD1306_COM_LR_REMAP
    status += ssd1306_WriteCommand(hi2c, 0x32);   // Enable COM left/right remap
#else
    status += ssd1306_WriteCommand(hi2c, 0x12);   // Do not use COM left/right remap
 8001692:	2112      	movs	r1, #18
 8001694:	6878      	ldr	r0, [r7, #4]
 8001696:	f7ff ff16 	bl	80014c6 <ssd1306_WriteCommand>
 800169a:	4603      	mov	r3, r0
 800169c:	461a      	mov	r2, r3
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	4413      	add	r3, r2
 80016a2:	60fb      	str	r3, [r7, #12]
#endif // SSD1306_COM_LR_REMAP

    status += ssd1306_WriteCommand(hi2c, 0xDB);   // Set vcomh
 80016a4:	21db      	movs	r1, #219	; 0xdb
 80016a6:	6878      	ldr	r0, [r7, #4]
 80016a8:	f7ff ff0d 	bl	80014c6 <ssd1306_WriteCommand>
 80016ac:	4603      	mov	r3, r0
 80016ae:	461a      	mov	r2, r3
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	4413      	add	r3, r2
 80016b4:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x20);   // 0x20,0.77xVcc
 80016b6:	2120      	movs	r1, #32
 80016b8:	6878      	ldr	r0, [r7, #4]
 80016ba:	f7ff ff04 	bl	80014c6 <ssd1306_WriteCommand>
 80016be:	4603      	mov	r3, r0
 80016c0:	461a      	mov	r2, r3
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	4413      	add	r3, r2
 80016c6:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x8D);   // Set DC-DC enable
 80016c8:	218d      	movs	r1, #141	; 0x8d
 80016ca:	6878      	ldr	r0, [r7, #4]
 80016cc:	f7ff fefb 	bl	80014c6 <ssd1306_WriteCommand>
 80016d0:	4603      	mov	r3, r0
 80016d2:	461a      	mov	r2, r3
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	4413      	add	r3, r2
 80016d8:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x14);   //
 80016da:	2114      	movs	r1, #20
 80016dc:	6878      	ldr	r0, [r7, #4]
 80016de:	f7ff fef2 	bl	80014c6 <ssd1306_WriteCommand>
 80016e2:	4603      	mov	r3, r0
 80016e4:	461a      	mov	r2, r3
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	4413      	add	r3, r2
 80016ea:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xAF);   // Turn on SSD1306 panel
 80016ec:	21af      	movs	r1, #175	; 0xaf
 80016ee:	6878      	ldr	r0, [r7, #4]
 80016f0:	f7ff fee9 	bl	80014c6 <ssd1306_WriteCommand>
 80016f4:	4603      	mov	r3, r0
 80016f6:	461a      	mov	r2, r3
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	4413      	add	r3, r2
 80016fc:	60fb      	str	r3, [r7, #12]

    if (status != 0) {
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	2b00      	cmp	r3, #0
 8001702:	d001      	beq.n	8001708 <ssd1306_Init+0x214>
        return 1;
 8001704:	2301      	movs	r3, #1
 8001706:	e00f      	b.n	8001728 <ssd1306_Init+0x234>
    }

    // Clear screen
    ssd1306_Fill(Black);
 8001708:	2000      	movs	r0, #0
 800170a:	f000 f813 	bl	8001734 <ssd1306_Fill>

    // Flush buffer to screen
    ssd1306_UpdateScreen(hi2c);
 800170e:	6878      	ldr	r0, [r7, #4]
 8001710:	f000 f832 	bl	8001778 <ssd1306_UpdateScreen>

    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8001714:	4b06      	ldr	r3, [pc, #24]	; (8001730 <ssd1306_Init+0x23c>)
 8001716:	2200      	movs	r2, #0
 8001718:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 800171a:	4b05      	ldr	r3, [pc, #20]	; (8001730 <ssd1306_Init+0x23c>)
 800171c:	2200      	movs	r2, #0
 800171e:	805a      	strh	r2, [r3, #2]

    SSD1306.Initialized = 1;
 8001720:	4b03      	ldr	r3, [pc, #12]	; (8001730 <ssd1306_Init+0x23c>)
 8001722:	2201      	movs	r2, #1
 8001724:	715a      	strb	r2, [r3, #5]

    return 0;
 8001726:	2300      	movs	r3, #0
}
 8001728:	4618      	mov	r0, r3
 800172a:	3710      	adds	r7, #16
 800172c:	46bd      	mov	sp, r7
 800172e:	bd80      	pop	{r7, pc}
 8001730:	2000060c 	.word	0x2000060c

08001734 <ssd1306_Fill>:

//
//  Fill the whole screen with the given color
//
void ssd1306_Fill(SSD1306_COLOR color)
{
 8001734:	b480      	push	{r7}
 8001736:	b085      	sub	sp, #20
 8001738:	af00      	add	r7, sp, #0
 800173a:	4603      	mov	r3, r0
 800173c:	71fb      	strb	r3, [r7, #7]
    // Fill screenbuffer with a constant value (color)
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 800173e:	2300      	movs	r3, #0
 8001740:	60fb      	str	r3, [r7, #12]
 8001742:	e00d      	b.n	8001760 <ssd1306_Fill+0x2c>
    {
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8001744:	79fb      	ldrb	r3, [r7, #7]
 8001746:	2b00      	cmp	r3, #0
 8001748:	d101      	bne.n	800174e <ssd1306_Fill+0x1a>
 800174a:	2100      	movs	r1, #0
 800174c:	e000      	b.n	8001750 <ssd1306_Fill+0x1c>
 800174e:	21ff      	movs	r1, #255	; 0xff
 8001750:	4a08      	ldr	r2, [pc, #32]	; (8001774 <ssd1306_Fill+0x40>)
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	4413      	add	r3, r2
 8001756:	460a      	mov	r2, r1
 8001758:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	3301      	adds	r3, #1
 800175e:	60fb      	str	r3, [r7, #12]
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001766:	d3ed      	bcc.n	8001744 <ssd1306_Fill+0x10>
    }
}
 8001768:	bf00      	nop
 800176a:	bf00      	nop
 800176c:	3714      	adds	r7, #20
 800176e:	46bd      	mov	sp, r7
 8001770:	bc80      	pop	{r7}
 8001772:	4770      	bx	lr
 8001774:	2000020c 	.word	0x2000020c

08001778 <ssd1306_UpdateScreen>:

//
//  Write the screenbuffer with changed to the screen
//
void ssd1306_UpdateScreen(I2C_HandleTypeDef *hi2c)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b088      	sub	sp, #32
 800177c:	af04      	add	r7, sp, #16
 800177e:	6078      	str	r0, [r7, #4]
    uint8_t i;

    for (i = 0; i < 8; i++) {
 8001780:	2300      	movs	r3, #0
 8001782:	73fb      	strb	r3, [r7, #15]
 8001784:	e020      	b.n	80017c8 <ssd1306_UpdateScreen+0x50>
        ssd1306_WriteCommand(hi2c, 0xB0 + i);
 8001786:	7bfb      	ldrb	r3, [r7, #15]
 8001788:	3b50      	subs	r3, #80	; 0x50
 800178a:	b2db      	uxtb	r3, r3
 800178c:	4619      	mov	r1, r3
 800178e:	6878      	ldr	r0, [r7, #4]
 8001790:	f7ff fe99 	bl	80014c6 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(hi2c, 0x00);
 8001794:	2100      	movs	r1, #0
 8001796:	6878      	ldr	r0, [r7, #4]
 8001798:	f7ff fe95 	bl	80014c6 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(hi2c, 0x10);
 800179c:	2110      	movs	r1, #16
 800179e:	6878      	ldr	r0, [r7, #4]
 80017a0:	f7ff fe91 	bl	80014c6 <ssd1306_WriteCommand>

        HAL_I2C_Mem_Write(hi2c, SSD1306_I2C_ADDR, 0x40, 1, &SSD1306_Buffer[SSD1306_WIDTH * i], SSD1306_WIDTH, 100);
 80017a4:	7bfb      	ldrb	r3, [r7, #15]
 80017a6:	01db      	lsls	r3, r3, #7
 80017a8:	4a0b      	ldr	r2, [pc, #44]	; (80017d8 <ssd1306_UpdateScreen+0x60>)
 80017aa:	4413      	add	r3, r2
 80017ac:	2264      	movs	r2, #100	; 0x64
 80017ae:	9202      	str	r2, [sp, #8]
 80017b0:	2280      	movs	r2, #128	; 0x80
 80017b2:	9201      	str	r2, [sp, #4]
 80017b4:	9300      	str	r3, [sp, #0]
 80017b6:	2301      	movs	r3, #1
 80017b8:	2240      	movs	r2, #64	; 0x40
 80017ba:	2178      	movs	r1, #120	; 0x78
 80017bc:	6878      	ldr	r0, [r7, #4]
 80017be:	f001 fdef 	bl	80033a0 <HAL_I2C_Mem_Write>
    for (i = 0; i < 8; i++) {
 80017c2:	7bfb      	ldrb	r3, [r7, #15]
 80017c4:	3301      	adds	r3, #1
 80017c6:	73fb      	strb	r3, [r7, #15]
 80017c8:	7bfb      	ldrb	r3, [r7, #15]
 80017ca:	2b07      	cmp	r3, #7
 80017cc:	d9db      	bls.n	8001786 <ssd1306_UpdateScreen+0xe>
    }
}
 80017ce:	bf00      	nop
 80017d0:	bf00      	nop
 80017d2:	3710      	adds	r7, #16
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bd80      	pop	{r7, pc}
 80017d8:	2000020c 	.word	0x2000020c

080017dc <ssd1306_DrawPixel>:
//  X => X Coordinate
//  Y => Y Coordinate
//  color => Pixel color
//
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color)
{
 80017dc:	b480      	push	{r7}
 80017de:	b083      	sub	sp, #12
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	4603      	mov	r3, r0
 80017e4:	71fb      	strb	r3, [r7, #7]
 80017e6:	460b      	mov	r3, r1
 80017e8:	71bb      	strb	r3, [r7, #6]
 80017ea:	4613      	mov	r3, r2
 80017ec:	717b      	strb	r3, [r7, #5]
    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT)
 80017ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	db48      	blt.n	8001888 <ssd1306_DrawPixel+0xac>
 80017f6:	79bb      	ldrb	r3, [r7, #6]
 80017f8:	2b3f      	cmp	r3, #63	; 0x3f
 80017fa:	d845      	bhi.n	8001888 <ssd1306_DrawPixel+0xac>
        // Don't write outside the buffer
        return;
    }

    // Check if pixel should be inverted
    if (SSD1306.Inverted)
 80017fc:	4b25      	ldr	r3, [pc, #148]	; (8001894 <ssd1306_DrawPixel+0xb8>)
 80017fe:	791b      	ldrb	r3, [r3, #4]
 8001800:	2b00      	cmp	r3, #0
 8001802:	d006      	beq.n	8001812 <ssd1306_DrawPixel+0x36>
    {
        color = (SSD1306_COLOR)!color;
 8001804:	797b      	ldrb	r3, [r7, #5]
 8001806:	2b00      	cmp	r3, #0
 8001808:	bf0c      	ite	eq
 800180a:	2301      	moveq	r3, #1
 800180c:	2300      	movne	r3, #0
 800180e:	b2db      	uxtb	r3, r3
 8001810:	717b      	strb	r3, [r7, #5]
    }

    // Draw in the correct color
    if (color == White)
 8001812:	797b      	ldrb	r3, [r7, #5]
 8001814:	2b01      	cmp	r3, #1
 8001816:	d11a      	bne.n	800184e <ssd1306_DrawPixel+0x72>
    {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001818:	79fa      	ldrb	r2, [r7, #7]
 800181a:	79bb      	ldrb	r3, [r7, #6]
 800181c:	08db      	lsrs	r3, r3, #3
 800181e:	b2d8      	uxtb	r0, r3
 8001820:	4603      	mov	r3, r0
 8001822:	01db      	lsls	r3, r3, #7
 8001824:	4413      	add	r3, r2
 8001826:	4a1c      	ldr	r2, [pc, #112]	; (8001898 <ssd1306_DrawPixel+0xbc>)
 8001828:	5cd3      	ldrb	r3, [r2, r3]
 800182a:	b25a      	sxtb	r2, r3
 800182c:	79bb      	ldrb	r3, [r7, #6]
 800182e:	f003 0307 	and.w	r3, r3, #7
 8001832:	2101      	movs	r1, #1
 8001834:	fa01 f303 	lsl.w	r3, r1, r3
 8001838:	b25b      	sxtb	r3, r3
 800183a:	4313      	orrs	r3, r2
 800183c:	b259      	sxtb	r1, r3
 800183e:	79fa      	ldrb	r2, [r7, #7]
 8001840:	4603      	mov	r3, r0
 8001842:	01db      	lsls	r3, r3, #7
 8001844:	4413      	add	r3, r2
 8001846:	b2c9      	uxtb	r1, r1
 8001848:	4a13      	ldr	r2, [pc, #76]	; (8001898 <ssd1306_DrawPixel+0xbc>)
 800184a:	54d1      	strb	r1, [r2, r3]
 800184c:	e01d      	b.n	800188a <ssd1306_DrawPixel+0xae>
    }
    else
    {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 800184e:	79fa      	ldrb	r2, [r7, #7]
 8001850:	79bb      	ldrb	r3, [r7, #6]
 8001852:	08db      	lsrs	r3, r3, #3
 8001854:	b2d8      	uxtb	r0, r3
 8001856:	4603      	mov	r3, r0
 8001858:	01db      	lsls	r3, r3, #7
 800185a:	4413      	add	r3, r2
 800185c:	4a0e      	ldr	r2, [pc, #56]	; (8001898 <ssd1306_DrawPixel+0xbc>)
 800185e:	5cd3      	ldrb	r3, [r2, r3]
 8001860:	b25a      	sxtb	r2, r3
 8001862:	79bb      	ldrb	r3, [r7, #6]
 8001864:	f003 0307 	and.w	r3, r3, #7
 8001868:	2101      	movs	r1, #1
 800186a:	fa01 f303 	lsl.w	r3, r1, r3
 800186e:	b25b      	sxtb	r3, r3
 8001870:	43db      	mvns	r3, r3
 8001872:	b25b      	sxtb	r3, r3
 8001874:	4013      	ands	r3, r2
 8001876:	b259      	sxtb	r1, r3
 8001878:	79fa      	ldrb	r2, [r7, #7]
 800187a:	4603      	mov	r3, r0
 800187c:	01db      	lsls	r3, r3, #7
 800187e:	4413      	add	r3, r2
 8001880:	b2c9      	uxtb	r1, r1
 8001882:	4a05      	ldr	r2, [pc, #20]	; (8001898 <ssd1306_DrawPixel+0xbc>)
 8001884:	54d1      	strb	r1, [r2, r3]
 8001886:	e000      	b.n	800188a <ssd1306_DrawPixel+0xae>
        return;
 8001888:	bf00      	nop
    }
}
 800188a:	370c      	adds	r7, #12
 800188c:	46bd      	mov	sp, r7
 800188e:	bc80      	pop	{r7}
 8001890:	4770      	bx	lr
 8001892:	bf00      	nop
 8001894:	2000060c 	.word	0x2000060c
 8001898:	2000020c 	.word	0x2000020c

0800189c <ssd1306_WriteChar>:
//  ch      => Character to write
//  Font    => Font to use
//  color   => Black or White
//
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color)
{
 800189c:	b590      	push	{r4, r7, lr}
 800189e:	b089      	sub	sp, #36	; 0x24
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	4604      	mov	r4, r0
 80018a4:	1d38      	adds	r0, r7, #4
 80018a6:	e880 0006 	stmia.w	r0, {r1, r2}
 80018aa:	461a      	mov	r2, r3
 80018ac:	4623      	mov	r3, r4
 80018ae:	73fb      	strb	r3, [r7, #15]
 80018b0:	4613      	mov	r3, r2
 80018b2:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;

    // Check remaining space on current line
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 80018b4:	4b38      	ldr	r3, [pc, #224]	; (8001998 <ssd1306_WriteChar+0xfc>)
 80018b6:	881b      	ldrh	r3, [r3, #0]
 80018b8:	461a      	mov	r2, r3
 80018ba:	793b      	ldrb	r3, [r7, #4]
 80018bc:	4413      	add	r3, r2
 80018be:	2b7f      	cmp	r3, #127	; 0x7f
 80018c0:	dc06      	bgt.n	80018d0 <ssd1306_WriteChar+0x34>
        SSD1306_HEIGHT <= (SSD1306.CurrentY + Font.FontHeight))
 80018c2:	4b35      	ldr	r3, [pc, #212]	; (8001998 <ssd1306_WriteChar+0xfc>)
 80018c4:	885b      	ldrh	r3, [r3, #2]
 80018c6:	461a      	mov	r2, r3
 80018c8:	797b      	ldrb	r3, [r7, #5]
 80018ca:	4413      	add	r3, r2
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 80018cc:	2b3f      	cmp	r3, #63	; 0x3f
 80018ce:	dd01      	ble.n	80018d4 <ssd1306_WriteChar+0x38>
    {
        // Not enough space on current line
        return 0;
 80018d0:	2300      	movs	r3, #0
 80018d2:	e05d      	b.n	8001990 <ssd1306_WriteChar+0xf4>
    }

    // Translate font to screenbuffer
    for (i = 0; i < Font.FontHeight; i++)
 80018d4:	2300      	movs	r3, #0
 80018d6:	61fb      	str	r3, [r7, #28]
 80018d8:	e04c      	b.n	8001974 <ssd1306_WriteChar+0xd8>
    {
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 80018da:	68ba      	ldr	r2, [r7, #8]
 80018dc:	7bfb      	ldrb	r3, [r7, #15]
 80018de:	3b20      	subs	r3, #32
 80018e0:	7979      	ldrb	r1, [r7, #5]
 80018e2:	fb01 f303 	mul.w	r3, r1, r3
 80018e6:	4619      	mov	r1, r3
 80018e8:	69fb      	ldr	r3, [r7, #28]
 80018ea:	440b      	add	r3, r1
 80018ec:	005b      	lsls	r3, r3, #1
 80018ee:	4413      	add	r3, r2
 80018f0:	881b      	ldrh	r3, [r3, #0]
 80018f2:	617b      	str	r3, [r7, #20]
        for (j = 0; j < Font.FontWidth; j++)
 80018f4:	2300      	movs	r3, #0
 80018f6:	61bb      	str	r3, [r7, #24]
 80018f8:	e034      	b.n	8001964 <ssd1306_WriteChar+0xc8>
        {
            if ((b << j) & 0x8000)
 80018fa:	697a      	ldr	r2, [r7, #20]
 80018fc:	69bb      	ldr	r3, [r7, #24]
 80018fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001902:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001906:	2b00      	cmp	r3, #0
 8001908:	d012      	beq.n	8001930 <ssd1306_WriteChar+0x94>
            {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 800190a:	4b23      	ldr	r3, [pc, #140]	; (8001998 <ssd1306_WriteChar+0xfc>)
 800190c:	881b      	ldrh	r3, [r3, #0]
 800190e:	b2da      	uxtb	r2, r3
 8001910:	69bb      	ldr	r3, [r7, #24]
 8001912:	b2db      	uxtb	r3, r3
 8001914:	4413      	add	r3, r2
 8001916:	b2d8      	uxtb	r0, r3
 8001918:	4b1f      	ldr	r3, [pc, #124]	; (8001998 <ssd1306_WriteChar+0xfc>)
 800191a:	885b      	ldrh	r3, [r3, #2]
 800191c:	b2da      	uxtb	r2, r3
 800191e:	69fb      	ldr	r3, [r7, #28]
 8001920:	b2db      	uxtb	r3, r3
 8001922:	4413      	add	r3, r2
 8001924:	b2db      	uxtb	r3, r3
 8001926:	7bba      	ldrb	r2, [r7, #14]
 8001928:	4619      	mov	r1, r3
 800192a:	f7ff ff57 	bl	80017dc <ssd1306_DrawPixel>
 800192e:	e016      	b.n	800195e <ssd1306_WriteChar+0xc2>
            }
            else
            {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8001930:	4b19      	ldr	r3, [pc, #100]	; (8001998 <ssd1306_WriteChar+0xfc>)
 8001932:	881b      	ldrh	r3, [r3, #0]
 8001934:	b2da      	uxtb	r2, r3
 8001936:	69bb      	ldr	r3, [r7, #24]
 8001938:	b2db      	uxtb	r3, r3
 800193a:	4413      	add	r3, r2
 800193c:	b2d8      	uxtb	r0, r3
 800193e:	4b16      	ldr	r3, [pc, #88]	; (8001998 <ssd1306_WriteChar+0xfc>)
 8001940:	885b      	ldrh	r3, [r3, #2]
 8001942:	b2da      	uxtb	r2, r3
 8001944:	69fb      	ldr	r3, [r7, #28]
 8001946:	b2db      	uxtb	r3, r3
 8001948:	4413      	add	r3, r2
 800194a:	b2d9      	uxtb	r1, r3
 800194c:	7bbb      	ldrb	r3, [r7, #14]
 800194e:	2b00      	cmp	r3, #0
 8001950:	bf0c      	ite	eq
 8001952:	2301      	moveq	r3, #1
 8001954:	2300      	movne	r3, #0
 8001956:	b2db      	uxtb	r3, r3
 8001958:	461a      	mov	r2, r3
 800195a:	f7ff ff3f 	bl	80017dc <ssd1306_DrawPixel>
        for (j = 0; j < Font.FontWidth; j++)
 800195e:	69bb      	ldr	r3, [r7, #24]
 8001960:	3301      	adds	r3, #1
 8001962:	61bb      	str	r3, [r7, #24]
 8001964:	793b      	ldrb	r3, [r7, #4]
 8001966:	461a      	mov	r2, r3
 8001968:	69bb      	ldr	r3, [r7, #24]
 800196a:	4293      	cmp	r3, r2
 800196c:	d3c5      	bcc.n	80018fa <ssd1306_WriteChar+0x5e>
    for (i = 0; i < Font.FontHeight; i++)
 800196e:	69fb      	ldr	r3, [r7, #28]
 8001970:	3301      	adds	r3, #1
 8001972:	61fb      	str	r3, [r7, #28]
 8001974:	797b      	ldrb	r3, [r7, #5]
 8001976:	461a      	mov	r2, r3
 8001978:	69fb      	ldr	r3, [r7, #28]
 800197a:	4293      	cmp	r3, r2
 800197c:	d3ad      	bcc.n	80018da <ssd1306_WriteChar+0x3e>
            }
        }
    }

    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 800197e:	4b06      	ldr	r3, [pc, #24]	; (8001998 <ssd1306_WriteChar+0xfc>)
 8001980:	881a      	ldrh	r2, [r3, #0]
 8001982:	793b      	ldrb	r3, [r7, #4]
 8001984:	b29b      	uxth	r3, r3
 8001986:	4413      	add	r3, r2
 8001988:	b29a      	uxth	r2, r3
 800198a:	4b03      	ldr	r3, [pc, #12]	; (8001998 <ssd1306_WriteChar+0xfc>)
 800198c:	801a      	strh	r2, [r3, #0]

    // Return written char for validation
    return ch;
 800198e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001990:	4618      	mov	r0, r3
 8001992:	3724      	adds	r7, #36	; 0x24
 8001994:	46bd      	mov	sp, r7
 8001996:	bd90      	pop	{r4, r7, pc}
 8001998:	2000060c 	.word	0x2000060c

0800199c <ssd1306_WriteString>:

//
//  Write full string to screenbuffer
//
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b084      	sub	sp, #16
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	60f8      	str	r0, [r7, #12]
 80019a4:	1d38      	adds	r0, r7, #4
 80019a6:	e880 0006 	stmia.w	r0, {r1, r2}
 80019aa:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str)
 80019ac:	e012      	b.n	80019d4 <ssd1306_WriteString+0x38>
    {
        if (ssd1306_WriteChar(*str, Font, color) != *str)
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	7818      	ldrb	r0, [r3, #0]
 80019b2:	78fb      	ldrb	r3, [r7, #3]
 80019b4:	1d3a      	adds	r2, r7, #4
 80019b6:	ca06      	ldmia	r2, {r1, r2}
 80019b8:	f7ff ff70 	bl	800189c <ssd1306_WriteChar>
 80019bc:	4603      	mov	r3, r0
 80019be:	461a      	mov	r2, r3
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	781b      	ldrb	r3, [r3, #0]
 80019c4:	429a      	cmp	r2, r3
 80019c6:	d002      	beq.n	80019ce <ssd1306_WriteString+0x32>
        {
            // Char could not be written
            return *str;
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	781b      	ldrb	r3, [r3, #0]
 80019cc:	e008      	b.n	80019e0 <ssd1306_WriteString+0x44>
        }

        // Next char
        str++;
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	3301      	adds	r3, #1
 80019d2:	60fb      	str	r3, [r7, #12]
    while (*str)
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	781b      	ldrb	r3, [r3, #0]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d1e8      	bne.n	80019ae <ssd1306_WriteString+0x12>
    }

    // Everything ok
    return *str;
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	781b      	ldrb	r3, [r3, #0]
}
 80019e0:	4618      	mov	r0, r3
 80019e2:	3710      	adds	r7, #16
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd80      	pop	{r7, pc}

080019e8 <ssd1306_SetCursor>:

//
//  Set cursor position
//
void ssd1306_SetCursor(uint8_t x, uint8_t y)
{
 80019e8:	b480      	push	{r7}
 80019ea:	b083      	sub	sp, #12
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	4603      	mov	r3, r0
 80019f0:	460a      	mov	r2, r1
 80019f2:	71fb      	strb	r3, [r7, #7]
 80019f4:	4613      	mov	r3, r2
 80019f6:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 80019f8:	79fb      	ldrb	r3, [r7, #7]
 80019fa:	b29a      	uxth	r2, r3
 80019fc:	4b05      	ldr	r3, [pc, #20]	; (8001a14 <ssd1306_SetCursor+0x2c>)
 80019fe:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8001a00:	79bb      	ldrb	r3, [r7, #6]
 8001a02:	b29a      	uxth	r2, r3
 8001a04:	4b03      	ldr	r3, [pc, #12]	; (8001a14 <ssd1306_SetCursor+0x2c>)
 8001a06:	805a      	strh	r2, [r3, #2]
}
 8001a08:	bf00      	nop
 8001a0a:	370c      	adds	r7, #12
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bc80      	pop	{r7}
 8001a10:	4770      	bx	lr
 8001a12:	bf00      	nop
 8001a14:	2000060c 	.word	0x2000060c

08001a18 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	b085      	sub	sp, #20
 8001a1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001a1e:	4b15      	ldr	r3, [pc, #84]	; (8001a74 <HAL_MspInit+0x5c>)
 8001a20:	699b      	ldr	r3, [r3, #24]
 8001a22:	4a14      	ldr	r2, [pc, #80]	; (8001a74 <HAL_MspInit+0x5c>)
 8001a24:	f043 0301 	orr.w	r3, r3, #1
 8001a28:	6193      	str	r3, [r2, #24]
 8001a2a:	4b12      	ldr	r3, [pc, #72]	; (8001a74 <HAL_MspInit+0x5c>)
 8001a2c:	699b      	ldr	r3, [r3, #24]
 8001a2e:	f003 0301 	and.w	r3, r3, #1
 8001a32:	60bb      	str	r3, [r7, #8]
 8001a34:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a36:	4b0f      	ldr	r3, [pc, #60]	; (8001a74 <HAL_MspInit+0x5c>)
 8001a38:	69db      	ldr	r3, [r3, #28]
 8001a3a:	4a0e      	ldr	r2, [pc, #56]	; (8001a74 <HAL_MspInit+0x5c>)
 8001a3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a40:	61d3      	str	r3, [r2, #28]
 8001a42:	4b0c      	ldr	r3, [pc, #48]	; (8001a74 <HAL_MspInit+0x5c>)
 8001a44:	69db      	ldr	r3, [r3, #28]
 8001a46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a4a:	607b      	str	r3, [r7, #4]
 8001a4c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8001a4e:	4b0a      	ldr	r3, [pc, #40]	; (8001a78 <HAL_MspInit+0x60>)
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	60fb      	str	r3, [r7, #12]
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001a5a:	60fb      	str	r3, [r7, #12]
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001a62:	60fb      	str	r3, [r7, #12]
 8001a64:	4a04      	ldr	r2, [pc, #16]	; (8001a78 <HAL_MspInit+0x60>)
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a6a:	bf00      	nop
 8001a6c:	3714      	adds	r7, #20
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bc80      	pop	{r7}
 8001a72:	4770      	bx	lr
 8001a74:	40021000 	.word	0x40021000
 8001a78:	40010000 	.word	0x40010000

08001a7c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b08a      	sub	sp, #40	; 0x28
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a84:	f107 0318 	add.w	r3, r7, #24
 8001a88:	2200      	movs	r2, #0
 8001a8a:	601a      	str	r2, [r3, #0]
 8001a8c:	605a      	str	r2, [r3, #4]
 8001a8e:	609a      	str	r2, [r3, #8]
 8001a90:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	4a30      	ldr	r2, [pc, #192]	; (8001b58 <HAL_ADC_MspInit+0xdc>)
 8001a98:	4293      	cmp	r3, r2
 8001a9a:	d12a      	bne.n	8001af2 <HAL_ADC_MspInit+0x76>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001a9c:	4b2f      	ldr	r3, [pc, #188]	; (8001b5c <HAL_ADC_MspInit+0xe0>)
 8001a9e:	699b      	ldr	r3, [r3, #24]
 8001aa0:	4a2e      	ldr	r2, [pc, #184]	; (8001b5c <HAL_ADC_MspInit+0xe0>)
 8001aa2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001aa6:	6193      	str	r3, [r2, #24]
 8001aa8:	4b2c      	ldr	r3, [pc, #176]	; (8001b5c <HAL_ADC_MspInit+0xe0>)
 8001aaa:	699b      	ldr	r3, [r3, #24]
 8001aac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ab0:	617b      	str	r3, [r7, #20]
 8001ab2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ab4:	4b29      	ldr	r3, [pc, #164]	; (8001b5c <HAL_ADC_MspInit+0xe0>)
 8001ab6:	699b      	ldr	r3, [r3, #24]
 8001ab8:	4a28      	ldr	r2, [pc, #160]	; (8001b5c <HAL_ADC_MspInit+0xe0>)
 8001aba:	f043 0304 	orr.w	r3, r3, #4
 8001abe:	6193      	str	r3, [r2, #24]
 8001ac0:	4b26      	ldr	r3, [pc, #152]	; (8001b5c <HAL_ADC_MspInit+0xe0>)
 8001ac2:	699b      	ldr	r3, [r3, #24]
 8001ac4:	f003 0304 	and.w	r3, r3, #4
 8001ac8:	613b      	str	r3, [r7, #16]
 8001aca:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = CURRENT_READ_Pin;
 8001acc:	2302      	movs	r3, #2
 8001ace:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ad0:	2303      	movs	r3, #3
 8001ad2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(CURRENT_READ_GPIO_Port, &GPIO_InitStruct);
 8001ad4:	f107 0318 	add.w	r3, r7, #24
 8001ad8:	4619      	mov	r1, r3
 8001ada:	4821      	ldr	r0, [pc, #132]	; (8001b60 <HAL_ADC_MspInit+0xe4>)
 8001adc:	f001 f980 	bl	8002de0 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	2100      	movs	r1, #0
 8001ae4:	2012      	movs	r0, #18
 8001ae6:	f001 f944 	bl	8002d72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001aea:	2012      	movs	r0, #18
 8001aec:	f001 f95d 	bl	8002daa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001af0:	e02e      	b.n	8001b50 <HAL_ADC_MspInit+0xd4>
  else if(hadc->Instance==ADC2)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4a1b      	ldr	r2, [pc, #108]	; (8001b64 <HAL_ADC_MspInit+0xe8>)
 8001af8:	4293      	cmp	r3, r2
 8001afa:	d129      	bne.n	8001b50 <HAL_ADC_MspInit+0xd4>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001afc:	4b17      	ldr	r3, [pc, #92]	; (8001b5c <HAL_ADC_MspInit+0xe0>)
 8001afe:	699b      	ldr	r3, [r3, #24]
 8001b00:	4a16      	ldr	r2, [pc, #88]	; (8001b5c <HAL_ADC_MspInit+0xe0>)
 8001b02:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b06:	6193      	str	r3, [r2, #24]
 8001b08:	4b14      	ldr	r3, [pc, #80]	; (8001b5c <HAL_ADC_MspInit+0xe0>)
 8001b0a:	699b      	ldr	r3, [r3, #24]
 8001b0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b10:	60fb      	str	r3, [r7, #12]
 8001b12:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b14:	4b11      	ldr	r3, [pc, #68]	; (8001b5c <HAL_ADC_MspInit+0xe0>)
 8001b16:	699b      	ldr	r3, [r3, #24]
 8001b18:	4a10      	ldr	r2, [pc, #64]	; (8001b5c <HAL_ADC_MspInit+0xe0>)
 8001b1a:	f043 0304 	orr.w	r3, r3, #4
 8001b1e:	6193      	str	r3, [r2, #24]
 8001b20:	4b0e      	ldr	r3, [pc, #56]	; (8001b5c <HAL_ADC_MspInit+0xe0>)
 8001b22:	699b      	ldr	r3, [r3, #24]
 8001b24:	f003 0304 	and.w	r3, r3, #4
 8001b28:	60bb      	str	r3, [r7, #8]
 8001b2a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = VOLTAGE_READ_Pin;
 8001b2c:	2304      	movs	r3, #4
 8001b2e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b30:	2303      	movs	r3, #3
 8001b32:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VOLTAGE_READ_GPIO_Port, &GPIO_InitStruct);
 8001b34:	f107 0318 	add.w	r3, r7, #24
 8001b38:	4619      	mov	r1, r3
 8001b3a:	4809      	ldr	r0, [pc, #36]	; (8001b60 <HAL_ADC_MspInit+0xe4>)
 8001b3c:	f001 f950 	bl	8002de0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001b40:	2200      	movs	r2, #0
 8001b42:	2100      	movs	r1, #0
 8001b44:	2012      	movs	r0, #18
 8001b46:	f001 f914 	bl	8002d72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001b4a:	2012      	movs	r0, #18
 8001b4c:	f001 f92d 	bl	8002daa <HAL_NVIC_EnableIRQ>
}
 8001b50:	bf00      	nop
 8001b52:	3728      	adds	r7, #40	; 0x28
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bd80      	pop	{r7, pc}
 8001b58:	40012400 	.word	0x40012400
 8001b5c:	40021000 	.word	0x40021000
 8001b60:	40010800 	.word	0x40010800
 8001b64:	40012800 	.word	0x40012800

08001b68 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b08a      	sub	sp, #40	; 0x28
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b70:	f107 0314 	add.w	r3, r7, #20
 8001b74:	2200      	movs	r2, #0
 8001b76:	601a      	str	r2, [r3, #0]
 8001b78:	605a      	str	r2, [r3, #4]
 8001b7a:	609a      	str	r2, [r3, #8]
 8001b7c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4a1d      	ldr	r2, [pc, #116]	; (8001bf8 <HAL_I2C_MspInit+0x90>)
 8001b84:	4293      	cmp	r3, r2
 8001b86:	d132      	bne.n	8001bee <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b88:	4b1c      	ldr	r3, [pc, #112]	; (8001bfc <HAL_I2C_MspInit+0x94>)
 8001b8a:	699b      	ldr	r3, [r3, #24]
 8001b8c:	4a1b      	ldr	r2, [pc, #108]	; (8001bfc <HAL_I2C_MspInit+0x94>)
 8001b8e:	f043 0308 	orr.w	r3, r3, #8
 8001b92:	6193      	str	r3, [r2, #24]
 8001b94:	4b19      	ldr	r3, [pc, #100]	; (8001bfc <HAL_I2C_MspInit+0x94>)
 8001b96:	699b      	ldr	r3, [r3, #24]
 8001b98:	f003 0308 	and.w	r3, r3, #8
 8001b9c:	613b      	str	r3, [r7, #16]
 8001b9e:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001ba0:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001ba4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ba6:	2312      	movs	r3, #18
 8001ba8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001baa:	2303      	movs	r3, #3
 8001bac:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bae:	f107 0314 	add.w	r3, r7, #20
 8001bb2:	4619      	mov	r1, r3
 8001bb4:	4812      	ldr	r0, [pc, #72]	; (8001c00 <HAL_I2C_MspInit+0x98>)
 8001bb6:	f001 f913 	bl	8002de0 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8001bba:	4b12      	ldr	r3, [pc, #72]	; (8001c04 <HAL_I2C_MspInit+0x9c>)
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	627b      	str	r3, [r7, #36]	; 0x24
 8001bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bc2:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001bc6:	627b      	str	r3, [r7, #36]	; 0x24
 8001bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bca:	f043 0302 	orr.w	r3, r3, #2
 8001bce:	627b      	str	r3, [r7, #36]	; 0x24
 8001bd0:	4a0c      	ldr	r2, [pc, #48]	; (8001c04 <HAL_I2C_MspInit+0x9c>)
 8001bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bd4:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001bd6:	4b09      	ldr	r3, [pc, #36]	; (8001bfc <HAL_I2C_MspInit+0x94>)
 8001bd8:	69db      	ldr	r3, [r3, #28]
 8001bda:	4a08      	ldr	r2, [pc, #32]	; (8001bfc <HAL_I2C_MspInit+0x94>)
 8001bdc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001be0:	61d3      	str	r3, [r2, #28]
 8001be2:	4b06      	ldr	r3, [pc, #24]	; (8001bfc <HAL_I2C_MspInit+0x94>)
 8001be4:	69db      	ldr	r3, [r3, #28]
 8001be6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bea:	60fb      	str	r3, [r7, #12]
 8001bec:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001bee:	bf00      	nop
 8001bf0:	3728      	adds	r7, #40	; 0x28
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	bf00      	nop
 8001bf8:	40005400 	.word	0x40005400
 8001bfc:	40021000 	.word	0x40021000
 8001c00:	40010c00 	.word	0x40010c00
 8001c04:	40010000 	.word	0x40010000

08001c08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c0c:	e7fe      	b.n	8001c0c <NMI_Handler+0x4>

08001c0e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c0e:	b480      	push	{r7}
 8001c10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c12:	e7fe      	b.n	8001c12 <HardFault_Handler+0x4>

08001c14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c14:	b480      	push	{r7}
 8001c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c18:	e7fe      	b.n	8001c18 <MemManage_Handler+0x4>

08001c1a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c1a:	b480      	push	{r7}
 8001c1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c1e:	e7fe      	b.n	8001c1e <BusFault_Handler+0x4>

08001c20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c20:	b480      	push	{r7}
 8001c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c24:	e7fe      	b.n	8001c24 <UsageFault_Handler+0x4>

08001c26 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c26:	b480      	push	{r7}
 8001c28:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c2a:	bf00      	nop
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bc80      	pop	{r7}
 8001c30:	4770      	bx	lr

08001c32 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c32:	b480      	push	{r7}
 8001c34:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c36:	bf00      	nop
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bc80      	pop	{r7}
 8001c3c:	4770      	bx	lr

08001c3e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c3e:	b480      	push	{r7}
 8001c40:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c42:	bf00      	nop
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bc80      	pop	{r7}
 8001c48:	4770      	bx	lr

08001c4a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c4a:	b580      	push	{r7, lr}
 8001c4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c4e:	f000 f943 	bl	8001ed8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c52:	bf00      	nop
 8001c54:	bd80      	pop	{r7, pc}
	...

08001c58 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001c5c:	4803      	ldr	r0, [pc, #12]	; (8001c6c <ADC1_2_IRQHandler+0x14>)
 8001c5e:	f000 fc3f 	bl	80024e0 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8001c62:	4803      	ldr	r0, [pc, #12]	; (8001c70 <ADC1_2_IRQHandler+0x18>)
 8001c64:	f000 fc3c 	bl	80024e0 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001c68:	bf00      	nop
 8001c6a:	bd80      	pop	{r7, pc}
 8001c6c:	200006d0 	.word	0x200006d0
 8001c70:	20000634 	.word	0x20000634

08001c74 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001c74:	b480      	push	{r7}
 8001c76:	af00      	add	r7, sp, #0
	return 1;
 8001c78:	2301      	movs	r3, #1
}
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bc80      	pop	{r7}
 8001c80:	4770      	bx	lr

08001c82 <_kill>:

int _kill(int pid, int sig)
{
 8001c82:	b580      	push	{r7, lr}
 8001c84:	b082      	sub	sp, #8
 8001c86:	af00      	add	r7, sp, #0
 8001c88:	6078      	str	r0, [r7, #4]
 8001c8a:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001c8c:	f002 fc32 	bl	80044f4 <__errno>
 8001c90:	4603      	mov	r3, r0
 8001c92:	2216      	movs	r2, #22
 8001c94:	601a      	str	r2, [r3, #0]
	return -1;
 8001c96:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	3708      	adds	r7, #8
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}

08001ca2 <_exit>:

void _exit (int status)
{
 8001ca2:	b580      	push	{r7, lr}
 8001ca4:	b082      	sub	sp, #8
 8001ca6:	af00      	add	r7, sp, #0
 8001ca8:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001caa:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001cae:	6878      	ldr	r0, [r7, #4]
 8001cb0:	f7ff ffe7 	bl	8001c82 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001cb4:	e7fe      	b.n	8001cb4 <_exit+0x12>

08001cb6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001cb6:	b580      	push	{r7, lr}
 8001cb8:	b086      	sub	sp, #24
 8001cba:	af00      	add	r7, sp, #0
 8001cbc:	60f8      	str	r0, [r7, #12]
 8001cbe:	60b9      	str	r1, [r7, #8]
 8001cc0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	617b      	str	r3, [r7, #20]
 8001cc6:	e00a      	b.n	8001cde <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001cc8:	f3af 8000 	nop.w
 8001ccc:	4601      	mov	r1, r0
 8001cce:	68bb      	ldr	r3, [r7, #8]
 8001cd0:	1c5a      	adds	r2, r3, #1
 8001cd2:	60ba      	str	r2, [r7, #8]
 8001cd4:	b2ca      	uxtb	r2, r1
 8001cd6:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cd8:	697b      	ldr	r3, [r7, #20]
 8001cda:	3301      	adds	r3, #1
 8001cdc:	617b      	str	r3, [r7, #20]
 8001cde:	697a      	ldr	r2, [r7, #20]
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	429a      	cmp	r2, r3
 8001ce4:	dbf0      	blt.n	8001cc8 <_read+0x12>
	}

return len;
 8001ce6:	687b      	ldr	r3, [r7, #4]
}
 8001ce8:	4618      	mov	r0, r3
 8001cea:	3718      	adds	r7, #24
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bd80      	pop	{r7, pc}

08001cf0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b086      	sub	sp, #24
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	60f8      	str	r0, [r7, #12]
 8001cf8:	60b9      	str	r1, [r7, #8]
 8001cfa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	617b      	str	r3, [r7, #20]
 8001d00:	e009      	b.n	8001d16 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001d02:	68bb      	ldr	r3, [r7, #8]
 8001d04:	1c5a      	adds	r2, r3, #1
 8001d06:	60ba      	str	r2, [r7, #8]
 8001d08:	781b      	ldrb	r3, [r3, #0]
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d10:	697b      	ldr	r3, [r7, #20]
 8001d12:	3301      	adds	r3, #1
 8001d14:	617b      	str	r3, [r7, #20]
 8001d16:	697a      	ldr	r2, [r7, #20]
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	429a      	cmp	r2, r3
 8001d1c:	dbf1      	blt.n	8001d02 <_write+0x12>
	}
	return len;
 8001d1e:	687b      	ldr	r3, [r7, #4]
}
 8001d20:	4618      	mov	r0, r3
 8001d22:	3718      	adds	r7, #24
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bd80      	pop	{r7, pc}

08001d28 <_close>:

int _close(int file)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	b083      	sub	sp, #12
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
	return -1;
 8001d30:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001d34:	4618      	mov	r0, r3
 8001d36:	370c      	adds	r7, #12
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bc80      	pop	{r7}
 8001d3c:	4770      	bx	lr

08001d3e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d3e:	b480      	push	{r7}
 8001d40:	b083      	sub	sp, #12
 8001d42:	af00      	add	r7, sp, #0
 8001d44:	6078      	str	r0, [r7, #4]
 8001d46:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001d4e:	605a      	str	r2, [r3, #4]
	return 0;
 8001d50:	2300      	movs	r3, #0
}
 8001d52:	4618      	mov	r0, r3
 8001d54:	370c      	adds	r7, #12
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bc80      	pop	{r7}
 8001d5a:	4770      	bx	lr

08001d5c <_isatty>:

int _isatty(int file)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	b083      	sub	sp, #12
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
	return 1;
 8001d64:	2301      	movs	r3, #1
}
 8001d66:	4618      	mov	r0, r3
 8001d68:	370c      	adds	r7, #12
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bc80      	pop	{r7}
 8001d6e:	4770      	bx	lr

08001d70 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d70:	b480      	push	{r7}
 8001d72:	b085      	sub	sp, #20
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	60f8      	str	r0, [r7, #12]
 8001d78:	60b9      	str	r1, [r7, #8]
 8001d7a:	607a      	str	r2, [r7, #4]
	return 0;
 8001d7c:	2300      	movs	r3, #0
}
 8001d7e:	4618      	mov	r0, r3
 8001d80:	3714      	adds	r7, #20
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bc80      	pop	{r7}
 8001d86:	4770      	bx	lr

08001d88 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b086      	sub	sp, #24
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d90:	4a14      	ldr	r2, [pc, #80]	; (8001de4 <_sbrk+0x5c>)
 8001d92:	4b15      	ldr	r3, [pc, #84]	; (8001de8 <_sbrk+0x60>)
 8001d94:	1ad3      	subs	r3, r2, r3
 8001d96:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d98:	697b      	ldr	r3, [r7, #20]
 8001d9a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d9c:	4b13      	ldr	r3, [pc, #76]	; (8001dec <_sbrk+0x64>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d102      	bne.n	8001daa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001da4:	4b11      	ldr	r3, [pc, #68]	; (8001dec <_sbrk+0x64>)
 8001da6:	4a12      	ldr	r2, [pc, #72]	; (8001df0 <_sbrk+0x68>)
 8001da8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001daa:	4b10      	ldr	r3, [pc, #64]	; (8001dec <_sbrk+0x64>)
 8001dac:	681a      	ldr	r2, [r3, #0]
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	4413      	add	r3, r2
 8001db2:	693a      	ldr	r2, [r7, #16]
 8001db4:	429a      	cmp	r2, r3
 8001db6:	d207      	bcs.n	8001dc8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001db8:	f002 fb9c 	bl	80044f4 <__errno>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	220c      	movs	r2, #12
 8001dc0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001dc2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001dc6:	e009      	b.n	8001ddc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001dc8:	4b08      	ldr	r3, [pc, #32]	; (8001dec <_sbrk+0x64>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001dce:	4b07      	ldr	r3, [pc, #28]	; (8001dec <_sbrk+0x64>)
 8001dd0:	681a      	ldr	r2, [r3, #0]
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	4413      	add	r3, r2
 8001dd6:	4a05      	ldr	r2, [pc, #20]	; (8001dec <_sbrk+0x64>)
 8001dd8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001dda:	68fb      	ldr	r3, [r7, #12]
}
 8001ddc:	4618      	mov	r0, r3
 8001dde:	3718      	adds	r7, #24
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bd80      	pop	{r7, pc}
 8001de4:	20005000 	.word	0x20005000
 8001de8:	00000400 	.word	0x00000400
 8001dec:	20000614 	.word	0x20000614
 8001df0:	20000748 	.word	0x20000748

08001df4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001df4:	b480      	push	{r7}
 8001df6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001df8:	bf00      	nop
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bc80      	pop	{r7}
 8001dfe:	4770      	bx	lr

08001e00 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e00:	480c      	ldr	r0, [pc, #48]	; (8001e34 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001e02:	490d      	ldr	r1, [pc, #52]	; (8001e38 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001e04:	4a0d      	ldr	r2, [pc, #52]	; (8001e3c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001e06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e08:	e002      	b.n	8001e10 <LoopCopyDataInit>

08001e0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e0e:	3304      	adds	r3, #4

08001e10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e14:	d3f9      	bcc.n	8001e0a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e16:	4a0a      	ldr	r2, [pc, #40]	; (8001e40 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001e18:	4c0a      	ldr	r4, [pc, #40]	; (8001e44 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001e1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e1c:	e001      	b.n	8001e22 <LoopFillZerobss>

08001e1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e20:	3204      	adds	r2, #4

08001e22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e24:	d3fb      	bcc.n	8001e1e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001e26:	f7ff ffe5 	bl	8001df4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e2a:	f002 fb69 	bl	8004500 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001e2e:	f7fe ff87 	bl	8000d40 <main>
  bx lr
 8001e32:	4770      	bx	lr
  ldr r0, =_sdata
 8001e34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e38:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8001e3c:	08009fec 	.word	0x08009fec
  ldr r2, =_sbss
 8001e40:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8001e44:	20000748 	.word	0x20000748

08001e48 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001e48:	e7fe      	b.n	8001e48 <CAN1_RX1_IRQHandler>
	...

08001e4c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e50:	4b08      	ldr	r3, [pc, #32]	; (8001e74 <HAL_Init+0x28>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4a07      	ldr	r2, [pc, #28]	; (8001e74 <HAL_Init+0x28>)
 8001e56:	f043 0310 	orr.w	r3, r3, #16
 8001e5a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e5c:	2003      	movs	r0, #3
 8001e5e:	f000 ff7d 	bl	8002d5c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e62:	200f      	movs	r0, #15
 8001e64:	f000 f808 	bl	8001e78 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e68:	f7ff fdd6 	bl	8001a18 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e6c:	2300      	movs	r3, #0
}
 8001e6e:	4618      	mov	r0, r3
 8001e70:	bd80      	pop	{r7, pc}
 8001e72:	bf00      	nop
 8001e74:	40022000 	.word	0x40022000

08001e78 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b082      	sub	sp, #8
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e80:	4b12      	ldr	r3, [pc, #72]	; (8001ecc <HAL_InitTick+0x54>)
 8001e82:	681a      	ldr	r2, [r3, #0]
 8001e84:	4b12      	ldr	r3, [pc, #72]	; (8001ed0 <HAL_InitTick+0x58>)
 8001e86:	781b      	ldrb	r3, [r3, #0]
 8001e88:	4619      	mov	r1, r3
 8001e8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e8e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e92:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e96:	4618      	mov	r0, r3
 8001e98:	f000 ff95 	bl	8002dc6 <HAL_SYSTICK_Config>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d001      	beq.n	8001ea6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	e00e      	b.n	8001ec4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	2b0f      	cmp	r3, #15
 8001eaa:	d80a      	bhi.n	8001ec2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001eac:	2200      	movs	r2, #0
 8001eae:	6879      	ldr	r1, [r7, #4]
 8001eb0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001eb4:	f000 ff5d 	bl	8002d72 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001eb8:	4a06      	ldr	r2, [pc, #24]	; (8001ed4 <HAL_InitTick+0x5c>)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	e000      	b.n	8001ec4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ec2:	2301      	movs	r3, #1
}
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	3708      	adds	r7, #8
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}
 8001ecc:	20000008 	.word	0x20000008
 8001ed0:	20000010 	.word	0x20000010
 8001ed4:	2000000c 	.word	0x2000000c

08001ed8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001edc:	4b05      	ldr	r3, [pc, #20]	; (8001ef4 <HAL_IncTick+0x1c>)
 8001ede:	781b      	ldrb	r3, [r3, #0]
 8001ee0:	461a      	mov	r2, r3
 8001ee2:	4b05      	ldr	r3, [pc, #20]	; (8001ef8 <HAL_IncTick+0x20>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4413      	add	r3, r2
 8001ee8:	4a03      	ldr	r2, [pc, #12]	; (8001ef8 <HAL_IncTick+0x20>)
 8001eea:	6013      	str	r3, [r2, #0]
}
 8001eec:	bf00      	nop
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bc80      	pop	{r7}
 8001ef2:	4770      	bx	lr
 8001ef4:	20000010 	.word	0x20000010
 8001ef8:	20000734 	.word	0x20000734

08001efc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001efc:	b480      	push	{r7}
 8001efe:	af00      	add	r7, sp, #0
  return uwTick;
 8001f00:	4b02      	ldr	r3, [pc, #8]	; (8001f0c <HAL_GetTick+0x10>)
 8001f02:	681b      	ldr	r3, [r3, #0]
}
 8001f04:	4618      	mov	r0, r3
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bc80      	pop	{r7}
 8001f0a:	4770      	bx	lr
 8001f0c:	20000734 	.word	0x20000734

08001f10 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b084      	sub	sp, #16
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f18:	f7ff fff0 	bl	8001efc <HAL_GetTick>
 8001f1c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001f28:	d005      	beq.n	8001f36 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f2a:	4b0a      	ldr	r3, [pc, #40]	; (8001f54 <HAL_Delay+0x44>)
 8001f2c:	781b      	ldrb	r3, [r3, #0]
 8001f2e:	461a      	mov	r2, r3
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	4413      	add	r3, r2
 8001f34:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001f36:	bf00      	nop
 8001f38:	f7ff ffe0 	bl	8001efc <HAL_GetTick>
 8001f3c:	4602      	mov	r2, r0
 8001f3e:	68bb      	ldr	r3, [r7, #8]
 8001f40:	1ad3      	subs	r3, r2, r3
 8001f42:	68fa      	ldr	r2, [r7, #12]
 8001f44:	429a      	cmp	r2, r3
 8001f46:	d8f7      	bhi.n	8001f38 <HAL_Delay+0x28>
  {
  }
}
 8001f48:	bf00      	nop
 8001f4a:	bf00      	nop
 8001f4c:	3710      	adds	r7, #16
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}
 8001f52:	bf00      	nop
 8001f54:	20000010 	.word	0x20000010

08001f58 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b086      	sub	sp, #24
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f60:	2300      	movs	r3, #0
 8001f62:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001f64:	2300      	movs	r3, #0
 8001f66:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d101      	bne.n	8001f7a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001f76:	2301      	movs	r3, #1
 8001f78:	e0be      	b.n	80020f8 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	689b      	ldr	r3, [r3, #8]
 8001f7e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d109      	bne.n	8001f9c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2200      	movs	r2, #0
 8001f92:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001f96:	6878      	ldr	r0, [r7, #4]
 8001f98:	f7ff fd70 	bl	8001a7c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001f9c:	6878      	ldr	r0, [r7, #4]
 8001f9e:	f000 fcc7 	bl	8002930 <ADC_ConversionStop_Disable>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001faa:	f003 0310 	and.w	r3, r3, #16
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	f040 8099 	bne.w	80020e6 <HAL_ADC_Init+0x18e>
 8001fb4:	7dfb      	ldrb	r3, [r7, #23]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	f040 8095 	bne.w	80020e6 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fc0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001fc4:	f023 0302 	bic.w	r3, r3, #2
 8001fc8:	f043 0202 	orr.w	r2, r3, #2
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001fd8:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	7b1b      	ldrb	r3, [r3, #12]
 8001fde:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001fe0:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001fe2:	68ba      	ldr	r2, [r7, #8]
 8001fe4:	4313      	orrs	r3, r2
 8001fe6:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	689b      	ldr	r3, [r3, #8]
 8001fec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001ff0:	d003      	beq.n	8001ffa <HAL_ADC_Init+0xa2>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	689b      	ldr	r3, [r3, #8]
 8001ff6:	2b01      	cmp	r3, #1
 8001ff8:	d102      	bne.n	8002000 <HAL_ADC_Init+0xa8>
 8001ffa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ffe:	e000      	b.n	8002002 <HAL_ADC_Init+0xaa>
 8002000:	2300      	movs	r3, #0
 8002002:	693a      	ldr	r2, [r7, #16]
 8002004:	4313      	orrs	r3, r2
 8002006:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	7d1b      	ldrb	r3, [r3, #20]
 800200c:	2b01      	cmp	r3, #1
 800200e:	d119      	bne.n	8002044 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	7b1b      	ldrb	r3, [r3, #12]
 8002014:	2b00      	cmp	r3, #0
 8002016:	d109      	bne.n	800202c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	699b      	ldr	r3, [r3, #24]
 800201c:	3b01      	subs	r3, #1
 800201e:	035a      	lsls	r2, r3, #13
 8002020:	693b      	ldr	r3, [r7, #16]
 8002022:	4313      	orrs	r3, r2
 8002024:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002028:	613b      	str	r3, [r7, #16]
 800202a:	e00b      	b.n	8002044 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002030:	f043 0220 	orr.w	r2, r3, #32
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800203c:	f043 0201 	orr.w	r2, r3, #1
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	693a      	ldr	r2, [r7, #16]
 8002054:	430a      	orrs	r2, r1
 8002056:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	689a      	ldr	r2, [r3, #8]
 800205e:	4b28      	ldr	r3, [pc, #160]	; (8002100 <HAL_ADC_Init+0x1a8>)
 8002060:	4013      	ands	r3, r2
 8002062:	687a      	ldr	r2, [r7, #4]
 8002064:	6812      	ldr	r2, [r2, #0]
 8002066:	68b9      	ldr	r1, [r7, #8]
 8002068:	430b      	orrs	r3, r1
 800206a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	689b      	ldr	r3, [r3, #8]
 8002070:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002074:	d003      	beq.n	800207e <HAL_ADC_Init+0x126>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	689b      	ldr	r3, [r3, #8]
 800207a:	2b01      	cmp	r3, #1
 800207c:	d104      	bne.n	8002088 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	691b      	ldr	r3, [r3, #16]
 8002082:	3b01      	subs	r3, #1
 8002084:	051b      	lsls	r3, r3, #20
 8002086:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800208e:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	68fa      	ldr	r2, [r7, #12]
 8002098:	430a      	orrs	r2, r1
 800209a:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	689a      	ldr	r2, [r3, #8]
 80020a2:	4b18      	ldr	r3, [pc, #96]	; (8002104 <HAL_ADC_Init+0x1ac>)
 80020a4:	4013      	ands	r3, r2
 80020a6:	68ba      	ldr	r2, [r7, #8]
 80020a8:	429a      	cmp	r2, r3
 80020aa:	d10b      	bne.n	80020c4 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2200      	movs	r2, #0
 80020b0:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020b6:	f023 0303 	bic.w	r3, r3, #3
 80020ba:	f043 0201 	orr.w	r2, r3, #1
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80020c2:	e018      	b.n	80020f6 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020c8:	f023 0312 	bic.w	r3, r3, #18
 80020cc:	f043 0210 	orr.w	r2, r3, #16
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020d8:	f043 0201 	orr.w	r2, r3, #1
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80020e0:	2301      	movs	r3, #1
 80020e2:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80020e4:	e007      	b.n	80020f6 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020ea:	f043 0210 	orr.w	r2, r3, #16
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80020f2:	2301      	movs	r3, #1
 80020f4:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80020f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80020f8:	4618      	mov	r0, r3
 80020fa:	3718      	adds	r7, #24
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bd80      	pop	{r7, pc}
 8002100:	ffe1f7fd 	.word	0xffe1f7fd
 8002104:	ff1f0efe 	.word	0xff1f0efe

08002108 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b084      	sub	sp, #16
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002110:	2300      	movs	r3, #0
 8002112:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800211a:	2b01      	cmp	r3, #1
 800211c:	d101      	bne.n	8002122 <HAL_ADC_Start+0x1a>
 800211e:	2302      	movs	r3, #2
 8002120:	e098      	b.n	8002254 <HAL_ADC_Start+0x14c>
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2201      	movs	r2, #1
 8002126:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 800212a:	6878      	ldr	r0, [r7, #4]
 800212c:	f000 fba6 	bl	800287c <ADC_Enable>
 8002130:	4603      	mov	r3, r0
 8002132:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8002134:	7bfb      	ldrb	r3, [r7, #15]
 8002136:	2b00      	cmp	r3, #0
 8002138:	f040 8087 	bne.w	800224a <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002140:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002144:	f023 0301 	bic.w	r3, r3, #1
 8002148:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a41      	ldr	r2, [pc, #260]	; (800225c <HAL_ADC_Start+0x154>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d105      	bne.n	8002166 <HAL_ADC_Start+0x5e>
 800215a:	4b41      	ldr	r3, [pc, #260]	; (8002260 <HAL_ADC_Start+0x158>)
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002162:	2b00      	cmp	r3, #0
 8002164:	d115      	bne.n	8002192 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800216a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800217c:	2b00      	cmp	r3, #0
 800217e:	d026      	beq.n	80021ce <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002184:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002188:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002190:	e01d      	b.n	80021ce <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002196:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	4a2f      	ldr	r2, [pc, #188]	; (8002260 <HAL_ADC_Start+0x158>)
 80021a4:	4293      	cmp	r3, r2
 80021a6:	d004      	beq.n	80021b2 <HAL_ADC_Start+0xaa>
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a2b      	ldr	r2, [pc, #172]	; (800225c <HAL_ADC_Start+0x154>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d10d      	bne.n	80021ce <HAL_ADC_Start+0xc6>
 80021b2:	4b2b      	ldr	r3, [pc, #172]	; (8002260 <HAL_ADC_Start+0x158>)
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d007      	beq.n	80021ce <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021c2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80021c6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021d2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d006      	beq.n	80021e8 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021de:	f023 0206 	bic.w	r2, r3, #6
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	62da      	str	r2, [r3, #44]	; 0x2c
 80021e6:	e002      	b.n	80021ee <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2200      	movs	r2, #0
 80021ec:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2200      	movs	r2, #0
 80021f2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f06f 0202 	mvn.w	r2, #2
 80021fe:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	689b      	ldr	r3, [r3, #8]
 8002206:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800220a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800220e:	d113      	bne.n	8002238 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002214:	4a11      	ldr	r2, [pc, #68]	; (800225c <HAL_ADC_Start+0x154>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d105      	bne.n	8002226 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800221a:	4b11      	ldr	r3, [pc, #68]	; (8002260 <HAL_ADC_Start+0x158>)
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002222:	2b00      	cmp	r3, #0
 8002224:	d108      	bne.n	8002238 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	689a      	ldr	r2, [r3, #8]
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8002234:	609a      	str	r2, [r3, #8]
 8002236:	e00c      	b.n	8002252 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	689a      	ldr	r2, [r3, #8]
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002246:	609a      	str	r2, [r3, #8]
 8002248:	e003      	b.n	8002252 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2200      	movs	r2, #0
 800224e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8002252:	7bfb      	ldrb	r3, [r7, #15]
}
 8002254:	4618      	mov	r0, r3
 8002256:	3710      	adds	r7, #16
 8002258:	46bd      	mov	sp, r7
 800225a:	bd80      	pop	{r7, pc}
 800225c:	40012800 	.word	0x40012800
 8002260:	40012400 	.word	0x40012400

08002264 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b084      	sub	sp, #16
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800226c:	2300      	movs	r3, #0
 800226e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002276:	2b01      	cmp	r3, #1
 8002278:	d101      	bne.n	800227e <HAL_ADC_Stop+0x1a>
 800227a:	2302      	movs	r3, #2
 800227c:	e01a      	b.n	80022b4 <HAL_ADC_Stop+0x50>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2201      	movs	r2, #1
 8002282:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002286:	6878      	ldr	r0, [r7, #4]
 8002288:	f000 fb52 	bl	8002930 <ADC_ConversionStop_Disable>
 800228c:	4603      	mov	r3, r0
 800228e:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002290:	7bfb      	ldrb	r3, [r7, #15]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d109      	bne.n	80022aa <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800229a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800229e:	f023 0301 	bic.w	r3, r3, #1
 80022a2:	f043 0201 	orr.w	r2, r3, #1
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2200      	movs	r2, #0
 80022ae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80022b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80022b4:	4618      	mov	r0, r3
 80022b6:	3710      	adds	r7, #16
 80022b8:	46bd      	mov	sp, r7
 80022ba:	bd80      	pop	{r7, pc}

080022bc <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80022bc:	b590      	push	{r4, r7, lr}
 80022be:	b087      	sub	sp, #28
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
 80022c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80022c6:	2300      	movs	r3, #0
 80022c8:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 80022ca:	2300      	movs	r3, #0
 80022cc:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 80022ce:	2300      	movs	r3, #0
 80022d0:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 80022d2:	f7ff fe13 	bl	8001efc <HAL_GetTick>
 80022d6:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	689b      	ldr	r3, [r3, #8]
 80022de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d00b      	beq.n	80022fe <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022ea:	f043 0220 	orr.w	r2, r3, #32
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2200      	movs	r2, #0
 80022f6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 80022fa:	2301      	movs	r3, #1
 80022fc:	e0d3      	b.n	80024a6 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002308:	2b00      	cmp	r3, #0
 800230a:	d131      	bne.n	8002370 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002312:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002316:	2b00      	cmp	r3, #0
 8002318:	d12a      	bne.n	8002370 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800231a:	e021      	b.n	8002360 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002322:	d01d      	beq.n	8002360 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d007      	beq.n	800233a <HAL_ADC_PollForConversion+0x7e>
 800232a:	f7ff fde7 	bl	8001efc <HAL_GetTick>
 800232e:	4602      	mov	r2, r0
 8002330:	697b      	ldr	r3, [r7, #20]
 8002332:	1ad3      	subs	r3, r2, r3
 8002334:	683a      	ldr	r2, [r7, #0]
 8002336:	429a      	cmp	r2, r3
 8002338:	d212      	bcs.n	8002360 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f003 0302 	and.w	r3, r3, #2
 8002344:	2b00      	cmp	r3, #0
 8002346:	d10b      	bne.n	8002360 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800234c:	f043 0204 	orr.w	r2, r3, #4
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2200      	movs	r2, #0
 8002358:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 800235c:	2303      	movs	r3, #3
 800235e:	e0a2      	b.n	80024a6 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f003 0302 	and.w	r3, r3, #2
 800236a:	2b00      	cmp	r3, #0
 800236c:	d0d6      	beq.n	800231c <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800236e:	e070      	b.n	8002452 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8002370:	4b4f      	ldr	r3, [pc, #316]	; (80024b0 <HAL_ADC_PollForConversion+0x1f4>)
 8002372:	681c      	ldr	r4, [r3, #0]
 8002374:	2002      	movs	r0, #2
 8002376:	f001 fff9 	bl	800436c <HAL_RCCEx_GetPeriphCLKFreq>
 800237a:	4603      	mov	r3, r0
 800237c:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	6919      	ldr	r1, [r3, #16]
 8002386:	4b4b      	ldr	r3, [pc, #300]	; (80024b4 <HAL_ADC_PollForConversion+0x1f8>)
 8002388:	400b      	ands	r3, r1
 800238a:	2b00      	cmp	r3, #0
 800238c:	d118      	bne.n	80023c0 <HAL_ADC_PollForConversion+0x104>
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	68d9      	ldr	r1, [r3, #12]
 8002394:	4b48      	ldr	r3, [pc, #288]	; (80024b8 <HAL_ADC_PollForConversion+0x1fc>)
 8002396:	400b      	ands	r3, r1
 8002398:	2b00      	cmp	r3, #0
 800239a:	d111      	bne.n	80023c0 <HAL_ADC_PollForConversion+0x104>
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	6919      	ldr	r1, [r3, #16]
 80023a2:	4b46      	ldr	r3, [pc, #280]	; (80024bc <HAL_ADC_PollForConversion+0x200>)
 80023a4:	400b      	ands	r3, r1
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d108      	bne.n	80023bc <HAL_ADC_PollForConversion+0x100>
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	68d9      	ldr	r1, [r3, #12]
 80023b0:	4b43      	ldr	r3, [pc, #268]	; (80024c0 <HAL_ADC_PollForConversion+0x204>)
 80023b2:	400b      	ands	r3, r1
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d101      	bne.n	80023bc <HAL_ADC_PollForConversion+0x100>
 80023b8:	2314      	movs	r3, #20
 80023ba:	e020      	b.n	80023fe <HAL_ADC_PollForConversion+0x142>
 80023bc:	2329      	movs	r3, #41	; 0x29
 80023be:	e01e      	b.n	80023fe <HAL_ADC_PollForConversion+0x142>
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	6919      	ldr	r1, [r3, #16]
 80023c6:	4b3d      	ldr	r3, [pc, #244]	; (80024bc <HAL_ADC_PollForConversion+0x200>)
 80023c8:	400b      	ands	r3, r1
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d106      	bne.n	80023dc <HAL_ADC_PollForConversion+0x120>
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	68d9      	ldr	r1, [r3, #12]
 80023d4:	4b3a      	ldr	r3, [pc, #232]	; (80024c0 <HAL_ADC_PollForConversion+0x204>)
 80023d6:	400b      	ands	r3, r1
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d00d      	beq.n	80023f8 <HAL_ADC_PollForConversion+0x13c>
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	6919      	ldr	r1, [r3, #16]
 80023e2:	4b38      	ldr	r3, [pc, #224]	; (80024c4 <HAL_ADC_PollForConversion+0x208>)
 80023e4:	400b      	ands	r3, r1
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d108      	bne.n	80023fc <HAL_ADC_PollForConversion+0x140>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	68d9      	ldr	r1, [r3, #12]
 80023f0:	4b34      	ldr	r3, [pc, #208]	; (80024c4 <HAL_ADC_PollForConversion+0x208>)
 80023f2:	400b      	ands	r3, r1
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d101      	bne.n	80023fc <HAL_ADC_PollForConversion+0x140>
 80023f8:	2354      	movs	r3, #84	; 0x54
 80023fa:	e000      	b.n	80023fe <HAL_ADC_PollForConversion+0x142>
 80023fc:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 80023fe:	fb02 f303 	mul.w	r3, r2, r3
 8002402:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002404:	e021      	b.n	800244a <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800240c:	d01a      	beq.n	8002444 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d007      	beq.n	8002424 <HAL_ADC_PollForConversion+0x168>
 8002414:	f7ff fd72 	bl	8001efc <HAL_GetTick>
 8002418:	4602      	mov	r2, r0
 800241a:	697b      	ldr	r3, [r7, #20]
 800241c:	1ad3      	subs	r3, r2, r3
 800241e:	683a      	ldr	r2, [r7, #0]
 8002420:	429a      	cmp	r2, r3
 8002422:	d20f      	bcs.n	8002444 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	693a      	ldr	r2, [r7, #16]
 8002428:	429a      	cmp	r2, r3
 800242a:	d90b      	bls.n	8002444 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002430:	f043 0204 	orr.w	r2, r3, #4
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2200      	movs	r2, #0
 800243c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 8002440:	2303      	movs	r3, #3
 8002442:	e030      	b.n	80024a6 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	3301      	adds	r3, #1
 8002448:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	693a      	ldr	r2, [r7, #16]
 800244e:	429a      	cmp	r2, r3
 8002450:	d8d9      	bhi.n	8002406 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f06f 0212 	mvn.w	r2, #18
 800245a:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002460:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	689b      	ldr	r3, [r3, #8]
 800246e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002472:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002476:	d115      	bne.n	80024a4 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800247c:	2b00      	cmp	r3, #0
 800247e:	d111      	bne.n	80024a4 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002484:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002490:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002494:	2b00      	cmp	r3, #0
 8002496:	d105      	bne.n	80024a4 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800249c:	f043 0201 	orr.w	r2, r3, #1
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80024a4:	2300      	movs	r3, #0
}
 80024a6:	4618      	mov	r0, r3
 80024a8:	371c      	adds	r7, #28
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd90      	pop	{r4, r7, pc}
 80024ae:	bf00      	nop
 80024b0:	20000008 	.word	0x20000008
 80024b4:	24924924 	.word	0x24924924
 80024b8:	00924924 	.word	0x00924924
 80024bc:	12492492 	.word	0x12492492
 80024c0:	00492492 	.word	0x00492492
 80024c4:	00249249 	.word	0x00249249

080024c8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80024c8:	b480      	push	{r7}
 80024ca:	b083      	sub	sp, #12
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80024d6:	4618      	mov	r0, r3
 80024d8:	370c      	adds	r7, #12
 80024da:	46bd      	mov	sp, r7
 80024dc:	bc80      	pop	{r7}
 80024de:	4770      	bx	lr

080024e0 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b082      	sub	sp, #8
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	f003 0320 	and.w	r3, r3, #32
 80024f2:	2b20      	cmp	r3, #32
 80024f4:	d140      	bne.n	8002578 <HAL_ADC_IRQHandler+0x98>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f003 0302 	and.w	r3, r3, #2
 8002500:	2b02      	cmp	r3, #2
 8002502:	d139      	bne.n	8002578 <HAL_ADC_IRQHandler+0x98>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002508:	f003 0310 	and.w	r3, r3, #16
 800250c:	2b00      	cmp	r3, #0
 800250e:	d105      	bne.n	800251c <HAL_ADC_IRQHandler+0x3c>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002514:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	689b      	ldr	r3, [r3, #8]
 8002522:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002526:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800252a:	d11d      	bne.n	8002568 <HAL_ADC_IRQHandler+0x88>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002530:	2b00      	cmp	r3, #0
 8002532:	d119      	bne.n	8002568 <HAL_ADC_IRQHandler+0x88>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	685a      	ldr	r2, [r3, #4]
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f022 0220 	bic.w	r2, r2, #32
 8002542:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002548:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002554:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002558:	2b00      	cmp	r3, #0
 800255a:	d105      	bne.n	8002568 <HAL_ADC_IRQHandler+0x88>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002560:	f043 0201 	orr.w	r2, r3, #1
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8002568:	6878      	ldr	r0, [r7, #4]
 800256a:	f000 f87c 	bl	8002666 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f06f 0212 	mvn.w	r2, #18
 8002576:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002582:	2b80      	cmp	r3, #128	; 0x80
 8002584:	d14f      	bne.n	8002626 <HAL_ADC_IRQHandler+0x146>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f003 0304 	and.w	r3, r3, #4
 8002590:	2b04      	cmp	r3, #4
 8002592:	d148      	bne.n	8002626 <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002598:	f003 0310 	and.w	r3, r3, #16
 800259c:	2b00      	cmp	r3, #0
 800259e:	d105      	bne.n	80025ac <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025a4:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	689b      	ldr	r3, [r3, #8]
 80025b2:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80025b6:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 80025ba:	d012      	beq.n	80025e2 <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d125      	bne.n	8002616 <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	689b      	ldr	r3, [r3, #8]
 80025d0:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80025d4:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80025d8:	d11d      	bne.n	8002616 <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d119      	bne.n	8002616 <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	685a      	ldr	r2, [r3, #4]
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80025f0:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025f6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002602:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002606:	2b00      	cmp	r3, #0
 8002608:	d105      	bne.n	8002616 <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800260e:	f043 0201 	orr.w	r2, r3, #1
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002616:	6878      	ldr	r0, [r7, #4]
 8002618:	f000 fa78 	bl	8002b0c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f06f 020c 	mvn.w	r2, #12
 8002624:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002630:	2b40      	cmp	r3, #64	; 0x40
 8002632:	d114      	bne.n	800265e <HAL_ADC_IRQHandler+0x17e>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f003 0301 	and.w	r3, r3, #1
 800263e:	2b01      	cmp	r3, #1
 8002640:	d10d      	bne.n	800265e <HAL_ADC_IRQHandler+0x17e>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002646:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800264e:	6878      	ldr	r0, [r7, #4]
 8002650:	f000 f812 	bl	8002678 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f06f 0201 	mvn.w	r2, #1
 800265c:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 800265e:	bf00      	nop
 8002660:	3708      	adds	r7, #8
 8002662:	46bd      	mov	sp, r7
 8002664:	bd80      	pop	{r7, pc}

08002666 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002666:	b480      	push	{r7}
 8002668:	b083      	sub	sp, #12
 800266a:	af00      	add	r7, sp, #0
 800266c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800266e:	bf00      	nop
 8002670:	370c      	adds	r7, #12
 8002672:	46bd      	mov	sp, r7
 8002674:	bc80      	pop	{r7}
 8002676:	4770      	bx	lr

08002678 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002678:	b480      	push	{r7}
 800267a:	b083      	sub	sp, #12
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002680:	bf00      	nop
 8002682:	370c      	adds	r7, #12
 8002684:	46bd      	mov	sp, r7
 8002686:	bc80      	pop	{r7}
 8002688:	4770      	bx	lr
	...

0800268c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 800268c:	b480      	push	{r7}
 800268e:	b085      	sub	sp, #20
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
 8002694:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002696:	2300      	movs	r3, #0
 8002698:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800269a:	2300      	movs	r3, #0
 800269c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80026a4:	2b01      	cmp	r3, #1
 80026a6:	d101      	bne.n	80026ac <HAL_ADC_ConfigChannel+0x20>
 80026a8:	2302      	movs	r3, #2
 80026aa:	e0dc      	b.n	8002866 <HAL_ADC_ConfigChannel+0x1da>
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2201      	movs	r2, #1
 80026b0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	2b06      	cmp	r3, #6
 80026ba:	d81c      	bhi.n	80026f6 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	685a      	ldr	r2, [r3, #4]
 80026c6:	4613      	mov	r3, r2
 80026c8:	009b      	lsls	r3, r3, #2
 80026ca:	4413      	add	r3, r2
 80026cc:	3b05      	subs	r3, #5
 80026ce:	221f      	movs	r2, #31
 80026d0:	fa02 f303 	lsl.w	r3, r2, r3
 80026d4:	43db      	mvns	r3, r3
 80026d6:	4019      	ands	r1, r3
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	6818      	ldr	r0, [r3, #0]
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	685a      	ldr	r2, [r3, #4]
 80026e0:	4613      	mov	r3, r2
 80026e2:	009b      	lsls	r3, r3, #2
 80026e4:	4413      	add	r3, r2
 80026e6:	3b05      	subs	r3, #5
 80026e8:	fa00 f203 	lsl.w	r2, r0, r3
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	430a      	orrs	r2, r1
 80026f2:	635a      	str	r2, [r3, #52]	; 0x34
 80026f4:	e03c      	b.n	8002770 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	685b      	ldr	r3, [r3, #4]
 80026fa:	2b0c      	cmp	r3, #12
 80026fc:	d81c      	bhi.n	8002738 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	685a      	ldr	r2, [r3, #4]
 8002708:	4613      	mov	r3, r2
 800270a:	009b      	lsls	r3, r3, #2
 800270c:	4413      	add	r3, r2
 800270e:	3b23      	subs	r3, #35	; 0x23
 8002710:	221f      	movs	r2, #31
 8002712:	fa02 f303 	lsl.w	r3, r2, r3
 8002716:	43db      	mvns	r3, r3
 8002718:	4019      	ands	r1, r3
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	6818      	ldr	r0, [r3, #0]
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	685a      	ldr	r2, [r3, #4]
 8002722:	4613      	mov	r3, r2
 8002724:	009b      	lsls	r3, r3, #2
 8002726:	4413      	add	r3, r2
 8002728:	3b23      	subs	r3, #35	; 0x23
 800272a:	fa00 f203 	lsl.w	r2, r0, r3
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	430a      	orrs	r2, r1
 8002734:	631a      	str	r2, [r3, #48]	; 0x30
 8002736:	e01b      	b.n	8002770 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	685a      	ldr	r2, [r3, #4]
 8002742:	4613      	mov	r3, r2
 8002744:	009b      	lsls	r3, r3, #2
 8002746:	4413      	add	r3, r2
 8002748:	3b41      	subs	r3, #65	; 0x41
 800274a:	221f      	movs	r2, #31
 800274c:	fa02 f303 	lsl.w	r3, r2, r3
 8002750:	43db      	mvns	r3, r3
 8002752:	4019      	ands	r1, r3
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	6818      	ldr	r0, [r3, #0]
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	685a      	ldr	r2, [r3, #4]
 800275c:	4613      	mov	r3, r2
 800275e:	009b      	lsls	r3, r3, #2
 8002760:	4413      	add	r3, r2
 8002762:	3b41      	subs	r3, #65	; 0x41
 8002764:	fa00 f203 	lsl.w	r2, r0, r3
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	430a      	orrs	r2, r1
 800276e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	2b09      	cmp	r3, #9
 8002776:	d91c      	bls.n	80027b2 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	68d9      	ldr	r1, [r3, #12]
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	681a      	ldr	r2, [r3, #0]
 8002782:	4613      	mov	r3, r2
 8002784:	005b      	lsls	r3, r3, #1
 8002786:	4413      	add	r3, r2
 8002788:	3b1e      	subs	r3, #30
 800278a:	2207      	movs	r2, #7
 800278c:	fa02 f303 	lsl.w	r3, r2, r3
 8002790:	43db      	mvns	r3, r3
 8002792:	4019      	ands	r1, r3
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	6898      	ldr	r0, [r3, #8]
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	681a      	ldr	r2, [r3, #0]
 800279c:	4613      	mov	r3, r2
 800279e:	005b      	lsls	r3, r3, #1
 80027a0:	4413      	add	r3, r2
 80027a2:	3b1e      	subs	r3, #30
 80027a4:	fa00 f203 	lsl.w	r2, r0, r3
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	430a      	orrs	r2, r1
 80027ae:	60da      	str	r2, [r3, #12]
 80027b0:	e019      	b.n	80027e6 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	6919      	ldr	r1, [r3, #16]
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	681a      	ldr	r2, [r3, #0]
 80027bc:	4613      	mov	r3, r2
 80027be:	005b      	lsls	r3, r3, #1
 80027c0:	4413      	add	r3, r2
 80027c2:	2207      	movs	r2, #7
 80027c4:	fa02 f303 	lsl.w	r3, r2, r3
 80027c8:	43db      	mvns	r3, r3
 80027ca:	4019      	ands	r1, r3
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	6898      	ldr	r0, [r3, #8]
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	681a      	ldr	r2, [r3, #0]
 80027d4:	4613      	mov	r3, r2
 80027d6:	005b      	lsls	r3, r3, #1
 80027d8:	4413      	add	r3, r2
 80027da:	fa00 f203 	lsl.w	r2, r0, r3
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	430a      	orrs	r2, r1
 80027e4:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	2b10      	cmp	r3, #16
 80027ec:	d003      	beq.n	80027f6 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80027f2:	2b11      	cmp	r3, #17
 80027f4:	d132      	bne.n	800285c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4a1d      	ldr	r2, [pc, #116]	; (8002870 <HAL_ADC_ConfigChannel+0x1e4>)
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d125      	bne.n	800284c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	689b      	ldr	r3, [r3, #8]
 8002806:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800280a:	2b00      	cmp	r3, #0
 800280c:	d126      	bne.n	800285c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	689a      	ldr	r2, [r3, #8]
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800281c:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	2b10      	cmp	r3, #16
 8002824:	d11a      	bne.n	800285c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002826:	4b13      	ldr	r3, [pc, #76]	; (8002874 <HAL_ADC_ConfigChannel+0x1e8>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4a13      	ldr	r2, [pc, #76]	; (8002878 <HAL_ADC_ConfigChannel+0x1ec>)
 800282c:	fba2 2303 	umull	r2, r3, r2, r3
 8002830:	0c9a      	lsrs	r2, r3, #18
 8002832:	4613      	mov	r3, r2
 8002834:	009b      	lsls	r3, r3, #2
 8002836:	4413      	add	r3, r2
 8002838:	005b      	lsls	r3, r3, #1
 800283a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800283c:	e002      	b.n	8002844 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800283e:	68bb      	ldr	r3, [r7, #8]
 8002840:	3b01      	subs	r3, #1
 8002842:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002844:	68bb      	ldr	r3, [r7, #8]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d1f9      	bne.n	800283e <HAL_ADC_ConfigChannel+0x1b2>
 800284a:	e007      	b.n	800285c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002850:	f043 0220 	orr.w	r2, r3, #32
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002858:	2301      	movs	r3, #1
 800285a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2200      	movs	r2, #0
 8002860:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002864:	7bfb      	ldrb	r3, [r7, #15]
}
 8002866:	4618      	mov	r0, r3
 8002868:	3714      	adds	r7, #20
 800286a:	46bd      	mov	sp, r7
 800286c:	bc80      	pop	{r7}
 800286e:	4770      	bx	lr
 8002870:	40012400 	.word	0x40012400
 8002874:	20000008 	.word	0x20000008
 8002878:	431bde83 	.word	0x431bde83

0800287c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b084      	sub	sp, #16
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002884:	2300      	movs	r3, #0
 8002886:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002888:	2300      	movs	r3, #0
 800288a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	689b      	ldr	r3, [r3, #8]
 8002892:	f003 0301 	and.w	r3, r3, #1
 8002896:	2b01      	cmp	r3, #1
 8002898:	d040      	beq.n	800291c <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	689a      	ldr	r2, [r3, #8]
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f042 0201 	orr.w	r2, r2, #1
 80028a8:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80028aa:	4b1f      	ldr	r3, [pc, #124]	; (8002928 <ADC_Enable+0xac>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4a1f      	ldr	r2, [pc, #124]	; (800292c <ADC_Enable+0xb0>)
 80028b0:	fba2 2303 	umull	r2, r3, r2, r3
 80028b4:	0c9b      	lsrs	r3, r3, #18
 80028b6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80028b8:	e002      	b.n	80028c0 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80028ba:	68bb      	ldr	r3, [r7, #8]
 80028bc:	3b01      	subs	r3, #1
 80028be:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80028c0:	68bb      	ldr	r3, [r7, #8]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d1f9      	bne.n	80028ba <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80028c6:	f7ff fb19 	bl	8001efc <HAL_GetTick>
 80028ca:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80028cc:	e01f      	b.n	800290e <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80028ce:	f7ff fb15 	bl	8001efc <HAL_GetTick>
 80028d2:	4602      	mov	r2, r0
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	1ad3      	subs	r3, r2, r3
 80028d8:	2b02      	cmp	r3, #2
 80028da:	d918      	bls.n	800290e <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	689b      	ldr	r3, [r3, #8]
 80028e2:	f003 0301 	and.w	r3, r3, #1
 80028e6:	2b01      	cmp	r3, #1
 80028e8:	d011      	beq.n	800290e <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028ee:	f043 0210 	orr.w	r2, r3, #16
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028fa:	f043 0201 	orr.w	r2, r3, #1
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2200      	movs	r2, #0
 8002906:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 800290a:	2301      	movs	r3, #1
 800290c:	e007      	b.n	800291e <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	689b      	ldr	r3, [r3, #8]
 8002914:	f003 0301 	and.w	r3, r3, #1
 8002918:	2b01      	cmp	r3, #1
 800291a:	d1d8      	bne.n	80028ce <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800291c:	2300      	movs	r3, #0
}
 800291e:	4618      	mov	r0, r3
 8002920:	3710      	adds	r7, #16
 8002922:	46bd      	mov	sp, r7
 8002924:	bd80      	pop	{r7, pc}
 8002926:	bf00      	nop
 8002928:	20000008 	.word	0x20000008
 800292c:	431bde83 	.word	0x431bde83

08002930 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b084      	sub	sp, #16
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002938:	2300      	movs	r3, #0
 800293a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	689b      	ldr	r3, [r3, #8]
 8002942:	f003 0301 	and.w	r3, r3, #1
 8002946:	2b01      	cmp	r3, #1
 8002948:	d12e      	bne.n	80029a8 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	689a      	ldr	r2, [r3, #8]
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f022 0201 	bic.w	r2, r2, #1
 8002958:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800295a:	f7ff facf 	bl	8001efc <HAL_GetTick>
 800295e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002960:	e01b      	b.n	800299a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002962:	f7ff facb 	bl	8001efc <HAL_GetTick>
 8002966:	4602      	mov	r2, r0
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	1ad3      	subs	r3, r2, r3
 800296c:	2b02      	cmp	r3, #2
 800296e:	d914      	bls.n	800299a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	689b      	ldr	r3, [r3, #8]
 8002976:	f003 0301 	and.w	r3, r3, #1
 800297a:	2b01      	cmp	r3, #1
 800297c:	d10d      	bne.n	800299a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002982:	f043 0210 	orr.w	r2, r3, #16
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800298e:	f043 0201 	orr.w	r2, r3, #1
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8002996:	2301      	movs	r3, #1
 8002998:	e007      	b.n	80029aa <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	689b      	ldr	r3, [r3, #8]
 80029a0:	f003 0301 	and.w	r3, r3, #1
 80029a4:	2b01      	cmp	r3, #1
 80029a6:	d0dc      	beq.n	8002962 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80029a8:	2300      	movs	r3, #0
}
 80029aa:	4618      	mov	r0, r3
 80029ac:	3710      	adds	r7, #16
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}
	...

080029b4 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 80029b4:	b590      	push	{r4, r7, lr}
 80029b6:	b087      	sub	sp, #28
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80029bc:	2300      	movs	r3, #0
 80029be:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 80029c0:	2300      	movs	r3, #0
 80029c2:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80029ca:	2b01      	cmp	r3, #1
 80029cc:	d101      	bne.n	80029d2 <HAL_ADCEx_Calibration_Start+0x1e>
 80029ce:	2302      	movs	r3, #2
 80029d0:	e095      	b.n	8002afe <HAL_ADCEx_Calibration_Start+0x14a>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2201      	movs	r2, #1
 80029d6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  /* 1. Calibration prerequisite:                                             */
  /*    - ADC must be disabled for at least two ADC clock cycles in disable   */
  /*      mode before ADC enable                                              */
  /* Stop potential conversion on going, on regular and injected groups       */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80029da:	6878      	ldr	r0, [r7, #4]
 80029dc:	f7ff ffa8 	bl	8002930 <ADC_ConversionStop_Disable>
 80029e0:	4603      	mov	r3, r0
 80029e2:	75fb      	strb	r3, [r7, #23]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80029e4:	7dfb      	ldrb	r3, [r7, #23]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	f040 8084 	bne.w	8002af4 <HAL_ADCEx_Calibration_Start+0x140>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029f0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80029f4:	f023 0302 	bic.w	r3, r3, #2
 80029f8:	f043 0202 	orr.w	r2, r3, #2
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8002a00:	4b41      	ldr	r3, [pc, #260]	; (8002b08 <HAL_ADCEx_Calibration_Start+0x154>)
 8002a02:	681c      	ldr	r4, [r3, #0]
 8002a04:	2002      	movs	r0, #2
 8002a06:	f001 fcb1 	bl	800436c <HAL_RCCEx_GetPeriphCLKFreq>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8002a10:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8002a12:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 8002a14:	e002      	b.n	8002a1c <HAL_ADCEx_Calibration_Start+0x68>
    {
      wait_loop_index--;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	3b01      	subs	r3, #1
 8002a1a:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d1f9      	bne.n	8002a16 <HAL_ADCEx_Calibration_Start+0x62>
    }
    
    /* 2. Enable the ADC peripheral */
    ADC_Enable(hadc);
 8002a22:	6878      	ldr	r0, [r7, #4]
 8002a24:	f7ff ff2a 	bl	800287c <ADC_Enable>
    
    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	689a      	ldr	r2, [r3, #8]
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f042 0208 	orr.w	r2, r2, #8
 8002a36:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8002a38:	f7ff fa60 	bl	8001efc <HAL_GetTick>
 8002a3c:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8002a3e:	e01b      	b.n	8002a78 <HAL_ADCEx_Calibration_Start+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8002a40:	f7ff fa5c 	bl	8001efc <HAL_GetTick>
 8002a44:	4602      	mov	r2, r0
 8002a46:	693b      	ldr	r3, [r7, #16]
 8002a48:	1ad3      	subs	r3, r2, r3
 8002a4a:	2b0a      	cmp	r3, #10
 8002a4c:	d914      	bls.n	8002a78 <HAL_ADCEx_Calibration_Start+0xc4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	689b      	ldr	r3, [r3, #8]
 8002a54:	f003 0308 	and.w	r3, r3, #8
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d00d      	beq.n	8002a78 <HAL_ADCEx_Calibration_Start+0xc4>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a60:	f023 0312 	bic.w	r3, r3, #18
 8002a64:	f043 0210 	orr.w	r2, r3, #16
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2200      	movs	r2, #0
 8002a70:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8002a74:	2301      	movs	r3, #1
 8002a76:	e042      	b.n	8002afe <HAL_ADCEx_Calibration_Start+0x14a>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	689b      	ldr	r3, [r3, #8]
 8002a7e:	f003 0308 	and.w	r3, r3, #8
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d1dc      	bne.n	8002a40 <HAL_ADCEx_Calibration_Start+0x8c>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	689a      	ldr	r2, [r3, #8]
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f042 0204 	orr.w	r2, r2, #4
 8002a94:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8002a96:	f7ff fa31 	bl	8001efc <HAL_GetTick>
 8002a9a:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002a9c:	e01b      	b.n	8002ad6 <HAL_ADCEx_Calibration_Start+0x122>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8002a9e:	f7ff fa2d 	bl	8001efc <HAL_GetTick>
 8002aa2:	4602      	mov	r2, r0
 8002aa4:	693b      	ldr	r3, [r7, #16]
 8002aa6:	1ad3      	subs	r3, r2, r3
 8002aa8:	2b0a      	cmp	r3, #10
 8002aaa:	d914      	bls.n	8002ad6 <HAL_ADCEx_Calibration_Start+0x122>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	689b      	ldr	r3, [r3, #8]
 8002ab2:	f003 0304 	and.w	r3, r3, #4
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d00d      	beq.n	8002ad6 <HAL_ADCEx_Calibration_Start+0x122>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002abe:	f023 0312 	bic.w	r3, r3, #18
 8002ac2:	f043 0210 	orr.w	r2, r3, #16
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2200      	movs	r2, #0
 8002ace:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	e013      	b.n	8002afe <HAL_ADCEx_Calibration_Start+0x14a>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	689b      	ldr	r3, [r3, #8]
 8002adc:	f003 0304 	and.w	r3, r3, #4
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d1dc      	bne.n	8002a9e <HAL_ADCEx_Calibration_Start+0xea>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ae8:	f023 0303 	bic.w	r3, r3, #3
 8002aec:	f043 0201 	orr.w	r2, r3, #1
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2200      	movs	r2, #0
 8002af8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002afc:	7dfb      	ldrb	r3, [r7, #23]
}
 8002afe:	4618      	mov	r0, r3
 8002b00:	371c      	adds	r7, #28
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd90      	pop	{r4, r7, pc}
 8002b06:	bf00      	nop
 8002b08:	20000008 	.word	0x20000008

08002b0c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	b083      	sub	sp, #12
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8002b14:	bf00      	nop
 8002b16:	370c      	adds	r7, #12
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bc80      	pop	{r7}
 8002b1c:	4770      	bx	lr
	...

08002b20 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc: ADC handle
  * @param  multimode: Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b090      	sub	sp, #64	; 0x40
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
 8002b28:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ADC_HandleTypeDef tmphadcSlave={0};
 8002b30:	f107 030c 	add.w	r3, r7, #12
 8002b34:	2230      	movs	r2, #48	; 0x30
 8002b36:	2100      	movs	r1, #0
 8002b38:	4618      	mov	r0, r3
 8002b3a:	f001 fd05 	bl	8004548 <memset>
  /* Check the parameters */
  assert_param(IS_ADC_MULTIMODE_MASTER_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_MODE(multimode->Mode));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002b44:	2b01      	cmp	r3, #1
 8002b46:	d101      	bne.n	8002b4c <HAL_ADCEx_MultiModeConfigChannel+0x2c>
 8002b48:	2302      	movs	r3, #2
 8002b4a:	e032      	b.n	8002bb2 <HAL_ADCEx_MultiModeConfigChannel+0x92>
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2201      	movs	r2, #1
 8002b50:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Set a temporary handle of the ADC slave associated to the ADC master     */
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002b54:	4b19      	ldr	r3, [pc, #100]	; (8002bbc <HAL_ADCEx_MultiModeConfigChannel+0x9c>)
 8002b56:	60fb      	str	r3, [r7, #12]
  /*  - ADC master and ADC slave DMA configuration                            */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Multimode mode selection                                              */
  /* To optimize code, all multimode settings can be set when both ADCs of    */
  /* the common group are in state: disabled.                                 */
  if ((ADC_IS_ENABLE(hadc) == RESET)                     &&
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	689b      	ldr	r3, [r3, #8]
 8002b5e:	f003 0301 	and.w	r3, r3, #1
 8002b62:	2b01      	cmp	r3, #1
 8002b64:	d016      	beq.n	8002b94 <HAL_ADCEx_MultiModeConfigChannel+0x74>
      (ADC_IS_ENABLE(&tmphadcSlave) == RESET)            &&
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	689b      	ldr	r3, [r3, #8]
 8002b6a:	f003 0301 	and.w	r3, r3, #1
  if ((ADC_IS_ENABLE(hadc) == RESET)                     &&
 8002b6e:	2b01      	cmp	r3, #1
 8002b70:	d010      	beq.n	8002b94 <HAL_ADCEx_MultiModeConfigChannel+0x74>
      (IS_ADC_MULTIMODE_MASTER_INSTANCE(hadc->Instance))   )
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
      (ADC_IS_ENABLE(&tmphadcSlave) == RESET)            &&
 8002b76:	4a12      	ldr	r2, [pc, #72]	; (8002bc0 <HAL_ADCEx_MultiModeConfigChannel+0xa0>)
 8002b78:	4293      	cmp	r3, r2
 8002b7a:	d10b      	bne.n	8002b94 <HAL_ADCEx_MultiModeConfigChannel+0x74>
  {
    MODIFY_REG(hadc->Instance->CR1,
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	685b      	ldr	r3, [r3, #4]
 8002b82:	f423 2170 	bic.w	r1, r3, #983040	; 0xf0000
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	681a      	ldr	r2, [r3, #0]
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	430a      	orrs	r2, r1
 8002b90:	605a      	str	r2, [r3, #4]
 8002b92:	e008      	b.n	8002ba6 <HAL_ADCEx_MultiModeConfigChannel+0x86>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b98:	f043 0220 	orr.w	r2, r3, #32
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	629a      	str	r2, [r3, #40]	; 0x28
    
    tmp_hal_status = HAL_ERROR;
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2200      	movs	r2, #0
 8002baa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002bae:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
} 
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	3740      	adds	r7, #64	; 0x40
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bd80      	pop	{r7, pc}
 8002bba:	bf00      	nop
 8002bbc:	40012800 	.word	0x40012800
 8002bc0:	40012400 	.word	0x40012400

08002bc4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	b085      	sub	sp, #20
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	f003 0307 	and.w	r3, r3, #7
 8002bd2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002bd4:	4b0c      	ldr	r3, [pc, #48]	; (8002c08 <__NVIC_SetPriorityGrouping+0x44>)
 8002bd6:	68db      	ldr	r3, [r3, #12]
 8002bd8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002bda:	68ba      	ldr	r2, [r7, #8]
 8002bdc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002be0:	4013      	ands	r3, r2
 8002be2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002be8:	68bb      	ldr	r3, [r7, #8]
 8002bea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002bec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002bf0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002bf4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002bf6:	4a04      	ldr	r2, [pc, #16]	; (8002c08 <__NVIC_SetPriorityGrouping+0x44>)
 8002bf8:	68bb      	ldr	r3, [r7, #8]
 8002bfa:	60d3      	str	r3, [r2, #12]
}
 8002bfc:	bf00      	nop
 8002bfe:	3714      	adds	r7, #20
 8002c00:	46bd      	mov	sp, r7
 8002c02:	bc80      	pop	{r7}
 8002c04:	4770      	bx	lr
 8002c06:	bf00      	nop
 8002c08:	e000ed00 	.word	0xe000ed00

08002c0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c10:	4b04      	ldr	r3, [pc, #16]	; (8002c24 <__NVIC_GetPriorityGrouping+0x18>)
 8002c12:	68db      	ldr	r3, [r3, #12]
 8002c14:	0a1b      	lsrs	r3, r3, #8
 8002c16:	f003 0307 	and.w	r3, r3, #7
}
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	bc80      	pop	{r7}
 8002c20:	4770      	bx	lr
 8002c22:	bf00      	nop
 8002c24:	e000ed00 	.word	0xe000ed00

08002c28 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	b083      	sub	sp, #12
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	4603      	mov	r3, r0
 8002c30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	db0b      	blt.n	8002c52 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c3a:	79fb      	ldrb	r3, [r7, #7]
 8002c3c:	f003 021f 	and.w	r2, r3, #31
 8002c40:	4906      	ldr	r1, [pc, #24]	; (8002c5c <__NVIC_EnableIRQ+0x34>)
 8002c42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c46:	095b      	lsrs	r3, r3, #5
 8002c48:	2001      	movs	r0, #1
 8002c4a:	fa00 f202 	lsl.w	r2, r0, r2
 8002c4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002c52:	bf00      	nop
 8002c54:	370c      	adds	r7, #12
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bc80      	pop	{r7}
 8002c5a:	4770      	bx	lr
 8002c5c:	e000e100 	.word	0xe000e100

08002c60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c60:	b480      	push	{r7}
 8002c62:	b083      	sub	sp, #12
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	4603      	mov	r3, r0
 8002c68:	6039      	str	r1, [r7, #0]
 8002c6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	db0a      	blt.n	8002c8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	b2da      	uxtb	r2, r3
 8002c78:	490c      	ldr	r1, [pc, #48]	; (8002cac <__NVIC_SetPriority+0x4c>)
 8002c7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c7e:	0112      	lsls	r2, r2, #4
 8002c80:	b2d2      	uxtb	r2, r2
 8002c82:	440b      	add	r3, r1
 8002c84:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c88:	e00a      	b.n	8002ca0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	b2da      	uxtb	r2, r3
 8002c8e:	4908      	ldr	r1, [pc, #32]	; (8002cb0 <__NVIC_SetPriority+0x50>)
 8002c90:	79fb      	ldrb	r3, [r7, #7]
 8002c92:	f003 030f 	and.w	r3, r3, #15
 8002c96:	3b04      	subs	r3, #4
 8002c98:	0112      	lsls	r2, r2, #4
 8002c9a:	b2d2      	uxtb	r2, r2
 8002c9c:	440b      	add	r3, r1
 8002c9e:	761a      	strb	r2, [r3, #24]
}
 8002ca0:	bf00      	nop
 8002ca2:	370c      	adds	r7, #12
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	bc80      	pop	{r7}
 8002ca8:	4770      	bx	lr
 8002caa:	bf00      	nop
 8002cac:	e000e100 	.word	0xe000e100
 8002cb0:	e000ed00 	.word	0xe000ed00

08002cb4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	b089      	sub	sp, #36	; 0x24
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	60f8      	str	r0, [r7, #12]
 8002cbc:	60b9      	str	r1, [r7, #8]
 8002cbe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	f003 0307 	and.w	r3, r3, #7
 8002cc6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002cc8:	69fb      	ldr	r3, [r7, #28]
 8002cca:	f1c3 0307 	rsb	r3, r3, #7
 8002cce:	2b04      	cmp	r3, #4
 8002cd0:	bf28      	it	cs
 8002cd2:	2304      	movcs	r3, #4
 8002cd4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002cd6:	69fb      	ldr	r3, [r7, #28]
 8002cd8:	3304      	adds	r3, #4
 8002cda:	2b06      	cmp	r3, #6
 8002cdc:	d902      	bls.n	8002ce4 <NVIC_EncodePriority+0x30>
 8002cde:	69fb      	ldr	r3, [r7, #28]
 8002ce0:	3b03      	subs	r3, #3
 8002ce2:	e000      	b.n	8002ce6 <NVIC_EncodePriority+0x32>
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ce8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002cec:	69bb      	ldr	r3, [r7, #24]
 8002cee:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf2:	43da      	mvns	r2, r3
 8002cf4:	68bb      	ldr	r3, [r7, #8]
 8002cf6:	401a      	ands	r2, r3
 8002cf8:	697b      	ldr	r3, [r7, #20]
 8002cfa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002cfc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002d00:	697b      	ldr	r3, [r7, #20]
 8002d02:	fa01 f303 	lsl.w	r3, r1, r3
 8002d06:	43d9      	mvns	r1, r3
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d0c:	4313      	orrs	r3, r2
         );
}
 8002d0e:	4618      	mov	r0, r3
 8002d10:	3724      	adds	r7, #36	; 0x24
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bc80      	pop	{r7}
 8002d16:	4770      	bx	lr

08002d18 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b082      	sub	sp, #8
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	3b01      	subs	r3, #1
 8002d24:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002d28:	d301      	bcc.n	8002d2e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	e00f      	b.n	8002d4e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d2e:	4a0a      	ldr	r2, [pc, #40]	; (8002d58 <SysTick_Config+0x40>)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	3b01      	subs	r3, #1
 8002d34:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d36:	210f      	movs	r1, #15
 8002d38:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002d3c:	f7ff ff90 	bl	8002c60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d40:	4b05      	ldr	r3, [pc, #20]	; (8002d58 <SysTick_Config+0x40>)
 8002d42:	2200      	movs	r2, #0
 8002d44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d46:	4b04      	ldr	r3, [pc, #16]	; (8002d58 <SysTick_Config+0x40>)
 8002d48:	2207      	movs	r2, #7
 8002d4a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d4c:	2300      	movs	r3, #0
}
 8002d4e:	4618      	mov	r0, r3
 8002d50:	3708      	adds	r7, #8
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bd80      	pop	{r7, pc}
 8002d56:	bf00      	nop
 8002d58:	e000e010 	.word	0xe000e010

08002d5c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b082      	sub	sp, #8
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d64:	6878      	ldr	r0, [r7, #4]
 8002d66:	f7ff ff2d 	bl	8002bc4 <__NVIC_SetPriorityGrouping>
}
 8002d6a:	bf00      	nop
 8002d6c:	3708      	adds	r7, #8
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bd80      	pop	{r7, pc}

08002d72 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002d72:	b580      	push	{r7, lr}
 8002d74:	b086      	sub	sp, #24
 8002d76:	af00      	add	r7, sp, #0
 8002d78:	4603      	mov	r3, r0
 8002d7a:	60b9      	str	r1, [r7, #8]
 8002d7c:	607a      	str	r2, [r7, #4]
 8002d7e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002d80:	2300      	movs	r3, #0
 8002d82:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002d84:	f7ff ff42 	bl	8002c0c <__NVIC_GetPriorityGrouping>
 8002d88:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d8a:	687a      	ldr	r2, [r7, #4]
 8002d8c:	68b9      	ldr	r1, [r7, #8]
 8002d8e:	6978      	ldr	r0, [r7, #20]
 8002d90:	f7ff ff90 	bl	8002cb4 <NVIC_EncodePriority>
 8002d94:	4602      	mov	r2, r0
 8002d96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d9a:	4611      	mov	r1, r2
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	f7ff ff5f 	bl	8002c60 <__NVIC_SetPriority>
}
 8002da2:	bf00      	nop
 8002da4:	3718      	adds	r7, #24
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bd80      	pop	{r7, pc}

08002daa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002daa:	b580      	push	{r7, lr}
 8002dac:	b082      	sub	sp, #8
 8002dae:	af00      	add	r7, sp, #0
 8002db0:	4603      	mov	r3, r0
 8002db2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002db4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002db8:	4618      	mov	r0, r3
 8002dba:	f7ff ff35 	bl	8002c28 <__NVIC_EnableIRQ>
}
 8002dbe:	bf00      	nop
 8002dc0:	3708      	adds	r7, #8
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bd80      	pop	{r7, pc}

08002dc6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002dc6:	b580      	push	{r7, lr}
 8002dc8:	b082      	sub	sp, #8
 8002dca:	af00      	add	r7, sp, #0
 8002dcc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002dce:	6878      	ldr	r0, [r7, #4]
 8002dd0:	f7ff ffa2 	bl	8002d18 <SysTick_Config>
 8002dd4:	4603      	mov	r3, r0
}
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	3708      	adds	r7, #8
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bd80      	pop	{r7, pc}
	...

08002de0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002de0:	b480      	push	{r7}
 8002de2:	b08b      	sub	sp, #44	; 0x2c
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
 8002de8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002dea:	2300      	movs	r3, #0
 8002dec:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002dee:	2300      	movs	r3, #0
 8002df0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002df2:	e169      	b.n	80030c8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002df4:	2201      	movs	r2, #1
 8002df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002df8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dfc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	69fa      	ldr	r2, [r7, #28]
 8002e04:	4013      	ands	r3, r2
 8002e06:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002e08:	69ba      	ldr	r2, [r7, #24]
 8002e0a:	69fb      	ldr	r3, [r7, #28]
 8002e0c:	429a      	cmp	r2, r3
 8002e0e:	f040 8158 	bne.w	80030c2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	4a9a      	ldr	r2, [pc, #616]	; (8003080 <HAL_GPIO_Init+0x2a0>)
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d05e      	beq.n	8002eda <HAL_GPIO_Init+0xfa>
 8002e1c:	4a98      	ldr	r2, [pc, #608]	; (8003080 <HAL_GPIO_Init+0x2a0>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d875      	bhi.n	8002f0e <HAL_GPIO_Init+0x12e>
 8002e22:	4a98      	ldr	r2, [pc, #608]	; (8003084 <HAL_GPIO_Init+0x2a4>)
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d058      	beq.n	8002eda <HAL_GPIO_Init+0xfa>
 8002e28:	4a96      	ldr	r2, [pc, #600]	; (8003084 <HAL_GPIO_Init+0x2a4>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d86f      	bhi.n	8002f0e <HAL_GPIO_Init+0x12e>
 8002e2e:	4a96      	ldr	r2, [pc, #600]	; (8003088 <HAL_GPIO_Init+0x2a8>)
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d052      	beq.n	8002eda <HAL_GPIO_Init+0xfa>
 8002e34:	4a94      	ldr	r2, [pc, #592]	; (8003088 <HAL_GPIO_Init+0x2a8>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d869      	bhi.n	8002f0e <HAL_GPIO_Init+0x12e>
 8002e3a:	4a94      	ldr	r2, [pc, #592]	; (800308c <HAL_GPIO_Init+0x2ac>)
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d04c      	beq.n	8002eda <HAL_GPIO_Init+0xfa>
 8002e40:	4a92      	ldr	r2, [pc, #584]	; (800308c <HAL_GPIO_Init+0x2ac>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d863      	bhi.n	8002f0e <HAL_GPIO_Init+0x12e>
 8002e46:	4a92      	ldr	r2, [pc, #584]	; (8003090 <HAL_GPIO_Init+0x2b0>)
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d046      	beq.n	8002eda <HAL_GPIO_Init+0xfa>
 8002e4c:	4a90      	ldr	r2, [pc, #576]	; (8003090 <HAL_GPIO_Init+0x2b0>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d85d      	bhi.n	8002f0e <HAL_GPIO_Init+0x12e>
 8002e52:	2b12      	cmp	r3, #18
 8002e54:	d82a      	bhi.n	8002eac <HAL_GPIO_Init+0xcc>
 8002e56:	2b12      	cmp	r3, #18
 8002e58:	d859      	bhi.n	8002f0e <HAL_GPIO_Init+0x12e>
 8002e5a:	a201      	add	r2, pc, #4	; (adr r2, 8002e60 <HAL_GPIO_Init+0x80>)
 8002e5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e60:	08002edb 	.word	0x08002edb
 8002e64:	08002eb5 	.word	0x08002eb5
 8002e68:	08002ec7 	.word	0x08002ec7
 8002e6c:	08002f09 	.word	0x08002f09
 8002e70:	08002f0f 	.word	0x08002f0f
 8002e74:	08002f0f 	.word	0x08002f0f
 8002e78:	08002f0f 	.word	0x08002f0f
 8002e7c:	08002f0f 	.word	0x08002f0f
 8002e80:	08002f0f 	.word	0x08002f0f
 8002e84:	08002f0f 	.word	0x08002f0f
 8002e88:	08002f0f 	.word	0x08002f0f
 8002e8c:	08002f0f 	.word	0x08002f0f
 8002e90:	08002f0f 	.word	0x08002f0f
 8002e94:	08002f0f 	.word	0x08002f0f
 8002e98:	08002f0f 	.word	0x08002f0f
 8002e9c:	08002f0f 	.word	0x08002f0f
 8002ea0:	08002f0f 	.word	0x08002f0f
 8002ea4:	08002ebd 	.word	0x08002ebd
 8002ea8:	08002ed1 	.word	0x08002ed1
 8002eac:	4a79      	ldr	r2, [pc, #484]	; (8003094 <HAL_GPIO_Init+0x2b4>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d013      	beq.n	8002eda <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002eb2:	e02c      	b.n	8002f0e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	68db      	ldr	r3, [r3, #12]
 8002eb8:	623b      	str	r3, [r7, #32]
          break;
 8002eba:	e029      	b.n	8002f10 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	68db      	ldr	r3, [r3, #12]
 8002ec0:	3304      	adds	r3, #4
 8002ec2:	623b      	str	r3, [r7, #32]
          break;
 8002ec4:	e024      	b.n	8002f10 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	68db      	ldr	r3, [r3, #12]
 8002eca:	3308      	adds	r3, #8
 8002ecc:	623b      	str	r3, [r7, #32]
          break;
 8002ece:	e01f      	b.n	8002f10 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	68db      	ldr	r3, [r3, #12]
 8002ed4:	330c      	adds	r3, #12
 8002ed6:	623b      	str	r3, [r7, #32]
          break;
 8002ed8:	e01a      	b.n	8002f10 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	689b      	ldr	r3, [r3, #8]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d102      	bne.n	8002ee8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002ee2:	2304      	movs	r3, #4
 8002ee4:	623b      	str	r3, [r7, #32]
          break;
 8002ee6:	e013      	b.n	8002f10 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	689b      	ldr	r3, [r3, #8]
 8002eec:	2b01      	cmp	r3, #1
 8002eee:	d105      	bne.n	8002efc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002ef0:	2308      	movs	r3, #8
 8002ef2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	69fa      	ldr	r2, [r7, #28]
 8002ef8:	611a      	str	r2, [r3, #16]
          break;
 8002efa:	e009      	b.n	8002f10 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002efc:	2308      	movs	r3, #8
 8002efe:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	69fa      	ldr	r2, [r7, #28]
 8002f04:	615a      	str	r2, [r3, #20]
          break;
 8002f06:	e003      	b.n	8002f10 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002f08:	2300      	movs	r3, #0
 8002f0a:	623b      	str	r3, [r7, #32]
          break;
 8002f0c:	e000      	b.n	8002f10 <HAL_GPIO_Init+0x130>
          break;
 8002f0e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002f10:	69bb      	ldr	r3, [r7, #24]
 8002f12:	2bff      	cmp	r3, #255	; 0xff
 8002f14:	d801      	bhi.n	8002f1a <HAL_GPIO_Init+0x13a>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	e001      	b.n	8002f1e <HAL_GPIO_Init+0x13e>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	3304      	adds	r3, #4
 8002f1e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002f20:	69bb      	ldr	r3, [r7, #24]
 8002f22:	2bff      	cmp	r3, #255	; 0xff
 8002f24:	d802      	bhi.n	8002f2c <HAL_GPIO_Init+0x14c>
 8002f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f28:	009b      	lsls	r3, r3, #2
 8002f2a:	e002      	b.n	8002f32 <HAL_GPIO_Init+0x152>
 8002f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f2e:	3b08      	subs	r3, #8
 8002f30:	009b      	lsls	r3, r3, #2
 8002f32:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002f34:	697b      	ldr	r3, [r7, #20]
 8002f36:	681a      	ldr	r2, [r3, #0]
 8002f38:	210f      	movs	r1, #15
 8002f3a:	693b      	ldr	r3, [r7, #16]
 8002f3c:	fa01 f303 	lsl.w	r3, r1, r3
 8002f40:	43db      	mvns	r3, r3
 8002f42:	401a      	ands	r2, r3
 8002f44:	6a39      	ldr	r1, [r7, #32]
 8002f46:	693b      	ldr	r3, [r7, #16]
 8002f48:	fa01 f303 	lsl.w	r3, r1, r3
 8002f4c:	431a      	orrs	r2, r3
 8002f4e:	697b      	ldr	r3, [r7, #20]
 8002f50:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	f000 80b1 	beq.w	80030c2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002f60:	4b4d      	ldr	r3, [pc, #308]	; (8003098 <HAL_GPIO_Init+0x2b8>)
 8002f62:	699b      	ldr	r3, [r3, #24]
 8002f64:	4a4c      	ldr	r2, [pc, #304]	; (8003098 <HAL_GPIO_Init+0x2b8>)
 8002f66:	f043 0301 	orr.w	r3, r3, #1
 8002f6a:	6193      	str	r3, [r2, #24]
 8002f6c:	4b4a      	ldr	r3, [pc, #296]	; (8003098 <HAL_GPIO_Init+0x2b8>)
 8002f6e:	699b      	ldr	r3, [r3, #24]
 8002f70:	f003 0301 	and.w	r3, r3, #1
 8002f74:	60bb      	str	r3, [r7, #8]
 8002f76:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002f78:	4a48      	ldr	r2, [pc, #288]	; (800309c <HAL_GPIO_Init+0x2bc>)
 8002f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f7c:	089b      	lsrs	r3, r3, #2
 8002f7e:	3302      	adds	r3, #2
 8002f80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f84:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f88:	f003 0303 	and.w	r3, r3, #3
 8002f8c:	009b      	lsls	r3, r3, #2
 8002f8e:	220f      	movs	r2, #15
 8002f90:	fa02 f303 	lsl.w	r3, r2, r3
 8002f94:	43db      	mvns	r3, r3
 8002f96:	68fa      	ldr	r2, [r7, #12]
 8002f98:	4013      	ands	r3, r2
 8002f9a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	4a40      	ldr	r2, [pc, #256]	; (80030a0 <HAL_GPIO_Init+0x2c0>)
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d013      	beq.n	8002fcc <HAL_GPIO_Init+0x1ec>
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	4a3f      	ldr	r2, [pc, #252]	; (80030a4 <HAL_GPIO_Init+0x2c4>)
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d00d      	beq.n	8002fc8 <HAL_GPIO_Init+0x1e8>
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	4a3e      	ldr	r2, [pc, #248]	; (80030a8 <HAL_GPIO_Init+0x2c8>)
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	d007      	beq.n	8002fc4 <HAL_GPIO_Init+0x1e4>
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	4a3d      	ldr	r2, [pc, #244]	; (80030ac <HAL_GPIO_Init+0x2cc>)
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d101      	bne.n	8002fc0 <HAL_GPIO_Init+0x1e0>
 8002fbc:	2303      	movs	r3, #3
 8002fbe:	e006      	b.n	8002fce <HAL_GPIO_Init+0x1ee>
 8002fc0:	2304      	movs	r3, #4
 8002fc2:	e004      	b.n	8002fce <HAL_GPIO_Init+0x1ee>
 8002fc4:	2302      	movs	r3, #2
 8002fc6:	e002      	b.n	8002fce <HAL_GPIO_Init+0x1ee>
 8002fc8:	2301      	movs	r3, #1
 8002fca:	e000      	b.n	8002fce <HAL_GPIO_Init+0x1ee>
 8002fcc:	2300      	movs	r3, #0
 8002fce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fd0:	f002 0203 	and.w	r2, r2, #3
 8002fd4:	0092      	lsls	r2, r2, #2
 8002fd6:	4093      	lsls	r3, r2
 8002fd8:	68fa      	ldr	r2, [r7, #12]
 8002fda:	4313      	orrs	r3, r2
 8002fdc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002fde:	492f      	ldr	r1, [pc, #188]	; (800309c <HAL_GPIO_Init+0x2bc>)
 8002fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fe2:	089b      	lsrs	r3, r3, #2
 8002fe4:	3302      	adds	r3, #2
 8002fe6:	68fa      	ldr	r2, [r7, #12]
 8002fe8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	685b      	ldr	r3, [r3, #4]
 8002ff0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d006      	beq.n	8003006 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002ff8:	4b2d      	ldr	r3, [pc, #180]	; (80030b0 <HAL_GPIO_Init+0x2d0>)
 8002ffa:	681a      	ldr	r2, [r3, #0]
 8002ffc:	492c      	ldr	r1, [pc, #176]	; (80030b0 <HAL_GPIO_Init+0x2d0>)
 8002ffe:	69bb      	ldr	r3, [r7, #24]
 8003000:	4313      	orrs	r3, r2
 8003002:	600b      	str	r3, [r1, #0]
 8003004:	e006      	b.n	8003014 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003006:	4b2a      	ldr	r3, [pc, #168]	; (80030b0 <HAL_GPIO_Init+0x2d0>)
 8003008:	681a      	ldr	r2, [r3, #0]
 800300a:	69bb      	ldr	r3, [r7, #24]
 800300c:	43db      	mvns	r3, r3
 800300e:	4928      	ldr	r1, [pc, #160]	; (80030b0 <HAL_GPIO_Init+0x2d0>)
 8003010:	4013      	ands	r3, r2
 8003012:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800301c:	2b00      	cmp	r3, #0
 800301e:	d006      	beq.n	800302e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003020:	4b23      	ldr	r3, [pc, #140]	; (80030b0 <HAL_GPIO_Init+0x2d0>)
 8003022:	685a      	ldr	r2, [r3, #4]
 8003024:	4922      	ldr	r1, [pc, #136]	; (80030b0 <HAL_GPIO_Init+0x2d0>)
 8003026:	69bb      	ldr	r3, [r7, #24]
 8003028:	4313      	orrs	r3, r2
 800302a:	604b      	str	r3, [r1, #4]
 800302c:	e006      	b.n	800303c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800302e:	4b20      	ldr	r3, [pc, #128]	; (80030b0 <HAL_GPIO_Init+0x2d0>)
 8003030:	685a      	ldr	r2, [r3, #4]
 8003032:	69bb      	ldr	r3, [r7, #24]
 8003034:	43db      	mvns	r3, r3
 8003036:	491e      	ldr	r1, [pc, #120]	; (80030b0 <HAL_GPIO_Init+0x2d0>)
 8003038:	4013      	ands	r3, r2
 800303a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003044:	2b00      	cmp	r3, #0
 8003046:	d006      	beq.n	8003056 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003048:	4b19      	ldr	r3, [pc, #100]	; (80030b0 <HAL_GPIO_Init+0x2d0>)
 800304a:	689a      	ldr	r2, [r3, #8]
 800304c:	4918      	ldr	r1, [pc, #96]	; (80030b0 <HAL_GPIO_Init+0x2d0>)
 800304e:	69bb      	ldr	r3, [r7, #24]
 8003050:	4313      	orrs	r3, r2
 8003052:	608b      	str	r3, [r1, #8]
 8003054:	e006      	b.n	8003064 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003056:	4b16      	ldr	r3, [pc, #88]	; (80030b0 <HAL_GPIO_Init+0x2d0>)
 8003058:	689a      	ldr	r2, [r3, #8]
 800305a:	69bb      	ldr	r3, [r7, #24]
 800305c:	43db      	mvns	r3, r3
 800305e:	4914      	ldr	r1, [pc, #80]	; (80030b0 <HAL_GPIO_Init+0x2d0>)
 8003060:	4013      	ands	r3, r2
 8003062:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800306c:	2b00      	cmp	r3, #0
 800306e:	d021      	beq.n	80030b4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003070:	4b0f      	ldr	r3, [pc, #60]	; (80030b0 <HAL_GPIO_Init+0x2d0>)
 8003072:	68da      	ldr	r2, [r3, #12]
 8003074:	490e      	ldr	r1, [pc, #56]	; (80030b0 <HAL_GPIO_Init+0x2d0>)
 8003076:	69bb      	ldr	r3, [r7, #24]
 8003078:	4313      	orrs	r3, r2
 800307a:	60cb      	str	r3, [r1, #12]
 800307c:	e021      	b.n	80030c2 <HAL_GPIO_Init+0x2e2>
 800307e:	bf00      	nop
 8003080:	10320000 	.word	0x10320000
 8003084:	10310000 	.word	0x10310000
 8003088:	10220000 	.word	0x10220000
 800308c:	10210000 	.word	0x10210000
 8003090:	10120000 	.word	0x10120000
 8003094:	10110000 	.word	0x10110000
 8003098:	40021000 	.word	0x40021000
 800309c:	40010000 	.word	0x40010000
 80030a0:	40010800 	.word	0x40010800
 80030a4:	40010c00 	.word	0x40010c00
 80030a8:	40011000 	.word	0x40011000
 80030ac:	40011400 	.word	0x40011400
 80030b0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80030b4:	4b0b      	ldr	r3, [pc, #44]	; (80030e4 <HAL_GPIO_Init+0x304>)
 80030b6:	68da      	ldr	r2, [r3, #12]
 80030b8:	69bb      	ldr	r3, [r7, #24]
 80030ba:	43db      	mvns	r3, r3
 80030bc:	4909      	ldr	r1, [pc, #36]	; (80030e4 <HAL_GPIO_Init+0x304>)
 80030be:	4013      	ands	r3, r2
 80030c0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80030c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030c4:	3301      	adds	r3, #1
 80030c6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	681a      	ldr	r2, [r3, #0]
 80030cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ce:	fa22 f303 	lsr.w	r3, r2, r3
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	f47f ae8e 	bne.w	8002df4 <HAL_GPIO_Init+0x14>
  }
}
 80030d8:	bf00      	nop
 80030da:	bf00      	nop
 80030dc:	372c      	adds	r7, #44	; 0x2c
 80030de:	46bd      	mov	sp, r7
 80030e0:	bc80      	pop	{r7}
 80030e2:	4770      	bx	lr
 80030e4:	40010400 	.word	0x40010400

080030e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80030e8:	b480      	push	{r7}
 80030ea:	b083      	sub	sp, #12
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
 80030f0:	460b      	mov	r3, r1
 80030f2:	807b      	strh	r3, [r7, #2]
 80030f4:	4613      	mov	r3, r2
 80030f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80030f8:	787b      	ldrb	r3, [r7, #1]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d003      	beq.n	8003106 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80030fe:	887a      	ldrh	r2, [r7, #2]
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003104:	e003      	b.n	800310e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003106:	887b      	ldrh	r3, [r7, #2]
 8003108:	041a      	lsls	r2, r3, #16
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	611a      	str	r2, [r3, #16]
}
 800310e:	bf00      	nop
 8003110:	370c      	adds	r7, #12
 8003112:	46bd      	mov	sp, r7
 8003114:	bc80      	pop	{r7}
 8003116:	4770      	bx	lr

08003118 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b084      	sub	sp, #16
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d101      	bne.n	800312a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003126:	2301      	movs	r3, #1
 8003128:	e12b      	b.n	8003382 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003130:	b2db      	uxtb	r3, r3
 8003132:	2b00      	cmp	r3, #0
 8003134:	d106      	bne.n	8003144 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2200      	movs	r2, #0
 800313a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800313e:	6878      	ldr	r0, [r7, #4]
 8003140:	f7fe fd12 	bl	8001b68 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2224      	movs	r2, #36	; 0x24
 8003148:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	681a      	ldr	r2, [r3, #0]
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f022 0201 	bic.w	r2, r2, #1
 800315a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	681a      	ldr	r2, [r3, #0]
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800316a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	681a      	ldr	r2, [r3, #0]
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800317a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800317c:	f000 fffa 	bl	8004174 <HAL_RCC_GetPCLK1Freq>
 8003180:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	4a81      	ldr	r2, [pc, #516]	; (800338c <HAL_I2C_Init+0x274>)
 8003188:	4293      	cmp	r3, r2
 800318a:	d807      	bhi.n	800319c <HAL_I2C_Init+0x84>
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	4a80      	ldr	r2, [pc, #512]	; (8003390 <HAL_I2C_Init+0x278>)
 8003190:	4293      	cmp	r3, r2
 8003192:	bf94      	ite	ls
 8003194:	2301      	movls	r3, #1
 8003196:	2300      	movhi	r3, #0
 8003198:	b2db      	uxtb	r3, r3
 800319a:	e006      	b.n	80031aa <HAL_I2C_Init+0x92>
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	4a7d      	ldr	r2, [pc, #500]	; (8003394 <HAL_I2C_Init+0x27c>)
 80031a0:	4293      	cmp	r3, r2
 80031a2:	bf94      	ite	ls
 80031a4:	2301      	movls	r3, #1
 80031a6:	2300      	movhi	r3, #0
 80031a8:	b2db      	uxtb	r3, r3
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d001      	beq.n	80031b2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80031ae:	2301      	movs	r3, #1
 80031b0:	e0e7      	b.n	8003382 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	4a78      	ldr	r2, [pc, #480]	; (8003398 <HAL_I2C_Init+0x280>)
 80031b6:	fba2 2303 	umull	r2, r3, r2, r3
 80031ba:	0c9b      	lsrs	r3, r3, #18
 80031bc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	68ba      	ldr	r2, [r7, #8]
 80031ce:	430a      	orrs	r2, r1
 80031d0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	6a1b      	ldr	r3, [r3, #32]
 80031d8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	4a6a      	ldr	r2, [pc, #424]	; (800338c <HAL_I2C_Init+0x274>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d802      	bhi.n	80031ec <HAL_I2C_Init+0xd4>
 80031e6:	68bb      	ldr	r3, [r7, #8]
 80031e8:	3301      	adds	r3, #1
 80031ea:	e009      	b.n	8003200 <HAL_I2C_Init+0xe8>
 80031ec:	68bb      	ldr	r3, [r7, #8]
 80031ee:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80031f2:	fb02 f303 	mul.w	r3, r2, r3
 80031f6:	4a69      	ldr	r2, [pc, #420]	; (800339c <HAL_I2C_Init+0x284>)
 80031f8:	fba2 2303 	umull	r2, r3, r2, r3
 80031fc:	099b      	lsrs	r3, r3, #6
 80031fe:	3301      	adds	r3, #1
 8003200:	687a      	ldr	r2, [r7, #4]
 8003202:	6812      	ldr	r2, [r2, #0]
 8003204:	430b      	orrs	r3, r1
 8003206:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	69db      	ldr	r3, [r3, #28]
 800320e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003212:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	685b      	ldr	r3, [r3, #4]
 800321a:	495c      	ldr	r1, [pc, #368]	; (800338c <HAL_I2C_Init+0x274>)
 800321c:	428b      	cmp	r3, r1
 800321e:	d819      	bhi.n	8003254 <HAL_I2C_Init+0x13c>
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	1e59      	subs	r1, r3, #1
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	005b      	lsls	r3, r3, #1
 800322a:	fbb1 f3f3 	udiv	r3, r1, r3
 800322e:	1c59      	adds	r1, r3, #1
 8003230:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003234:	400b      	ands	r3, r1
 8003236:	2b00      	cmp	r3, #0
 8003238:	d00a      	beq.n	8003250 <HAL_I2C_Init+0x138>
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	1e59      	subs	r1, r3, #1
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	685b      	ldr	r3, [r3, #4]
 8003242:	005b      	lsls	r3, r3, #1
 8003244:	fbb1 f3f3 	udiv	r3, r1, r3
 8003248:	3301      	adds	r3, #1
 800324a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800324e:	e051      	b.n	80032f4 <HAL_I2C_Init+0x1dc>
 8003250:	2304      	movs	r3, #4
 8003252:	e04f      	b.n	80032f4 <HAL_I2C_Init+0x1dc>
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	689b      	ldr	r3, [r3, #8]
 8003258:	2b00      	cmp	r3, #0
 800325a:	d111      	bne.n	8003280 <HAL_I2C_Init+0x168>
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	1e58      	subs	r0, r3, #1
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6859      	ldr	r1, [r3, #4]
 8003264:	460b      	mov	r3, r1
 8003266:	005b      	lsls	r3, r3, #1
 8003268:	440b      	add	r3, r1
 800326a:	fbb0 f3f3 	udiv	r3, r0, r3
 800326e:	3301      	adds	r3, #1
 8003270:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003274:	2b00      	cmp	r3, #0
 8003276:	bf0c      	ite	eq
 8003278:	2301      	moveq	r3, #1
 800327a:	2300      	movne	r3, #0
 800327c:	b2db      	uxtb	r3, r3
 800327e:	e012      	b.n	80032a6 <HAL_I2C_Init+0x18e>
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	1e58      	subs	r0, r3, #1
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6859      	ldr	r1, [r3, #4]
 8003288:	460b      	mov	r3, r1
 800328a:	009b      	lsls	r3, r3, #2
 800328c:	440b      	add	r3, r1
 800328e:	0099      	lsls	r1, r3, #2
 8003290:	440b      	add	r3, r1
 8003292:	fbb0 f3f3 	udiv	r3, r0, r3
 8003296:	3301      	adds	r3, #1
 8003298:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800329c:	2b00      	cmp	r3, #0
 800329e:	bf0c      	ite	eq
 80032a0:	2301      	moveq	r3, #1
 80032a2:	2300      	movne	r3, #0
 80032a4:	b2db      	uxtb	r3, r3
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d001      	beq.n	80032ae <HAL_I2C_Init+0x196>
 80032aa:	2301      	movs	r3, #1
 80032ac:	e022      	b.n	80032f4 <HAL_I2C_Init+0x1dc>
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	689b      	ldr	r3, [r3, #8]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d10e      	bne.n	80032d4 <HAL_I2C_Init+0x1bc>
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	1e58      	subs	r0, r3, #1
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6859      	ldr	r1, [r3, #4]
 80032be:	460b      	mov	r3, r1
 80032c0:	005b      	lsls	r3, r3, #1
 80032c2:	440b      	add	r3, r1
 80032c4:	fbb0 f3f3 	udiv	r3, r0, r3
 80032c8:	3301      	adds	r3, #1
 80032ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80032d2:	e00f      	b.n	80032f4 <HAL_I2C_Init+0x1dc>
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	1e58      	subs	r0, r3, #1
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6859      	ldr	r1, [r3, #4]
 80032dc:	460b      	mov	r3, r1
 80032de:	009b      	lsls	r3, r3, #2
 80032e0:	440b      	add	r3, r1
 80032e2:	0099      	lsls	r1, r3, #2
 80032e4:	440b      	add	r3, r1
 80032e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80032ea:	3301      	adds	r3, #1
 80032ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032f0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80032f4:	6879      	ldr	r1, [r7, #4]
 80032f6:	6809      	ldr	r1, [r1, #0]
 80032f8:	4313      	orrs	r3, r2
 80032fa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	69da      	ldr	r2, [r3, #28]
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6a1b      	ldr	r3, [r3, #32]
 800330e:	431a      	orrs	r2, r3
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	430a      	orrs	r2, r1
 8003316:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	689b      	ldr	r3, [r3, #8]
 800331e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003322:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003326:	687a      	ldr	r2, [r7, #4]
 8003328:	6911      	ldr	r1, [r2, #16]
 800332a:	687a      	ldr	r2, [r7, #4]
 800332c:	68d2      	ldr	r2, [r2, #12]
 800332e:	4311      	orrs	r1, r2
 8003330:	687a      	ldr	r2, [r7, #4]
 8003332:	6812      	ldr	r2, [r2, #0]
 8003334:	430b      	orrs	r3, r1
 8003336:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	68db      	ldr	r3, [r3, #12]
 800333e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	695a      	ldr	r2, [r3, #20]
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	699b      	ldr	r3, [r3, #24]
 800334a:	431a      	orrs	r2, r3
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	430a      	orrs	r2, r1
 8003352:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	681a      	ldr	r2, [r3, #0]
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f042 0201 	orr.w	r2, r2, #1
 8003362:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2200      	movs	r2, #0
 8003368:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2220      	movs	r2, #32
 800336e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	2200      	movs	r2, #0
 8003376:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2200      	movs	r2, #0
 800337c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003380:	2300      	movs	r3, #0
}
 8003382:	4618      	mov	r0, r3
 8003384:	3710      	adds	r7, #16
 8003386:	46bd      	mov	sp, r7
 8003388:	bd80      	pop	{r7, pc}
 800338a:	bf00      	nop
 800338c:	000186a0 	.word	0x000186a0
 8003390:	001e847f 	.word	0x001e847f
 8003394:	003d08ff 	.word	0x003d08ff
 8003398:	431bde83 	.word	0x431bde83
 800339c:	10624dd3 	.word	0x10624dd3

080033a0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b088      	sub	sp, #32
 80033a4:	af02      	add	r7, sp, #8
 80033a6:	60f8      	str	r0, [r7, #12]
 80033a8:	4608      	mov	r0, r1
 80033aa:	4611      	mov	r1, r2
 80033ac:	461a      	mov	r2, r3
 80033ae:	4603      	mov	r3, r0
 80033b0:	817b      	strh	r3, [r7, #10]
 80033b2:	460b      	mov	r3, r1
 80033b4:	813b      	strh	r3, [r7, #8]
 80033b6:	4613      	mov	r3, r2
 80033b8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80033ba:	f7fe fd9f 	bl	8001efc <HAL_GetTick>
 80033be:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033c6:	b2db      	uxtb	r3, r3
 80033c8:	2b20      	cmp	r3, #32
 80033ca:	f040 80d9 	bne.w	8003580 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80033ce:	697b      	ldr	r3, [r7, #20]
 80033d0:	9300      	str	r3, [sp, #0]
 80033d2:	2319      	movs	r3, #25
 80033d4:	2201      	movs	r2, #1
 80033d6:	496d      	ldr	r1, [pc, #436]	; (800358c <HAL_I2C_Mem_Write+0x1ec>)
 80033d8:	68f8      	ldr	r0, [r7, #12]
 80033da:	f000 f971 	bl	80036c0 <I2C_WaitOnFlagUntilTimeout>
 80033de:	4603      	mov	r3, r0
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d001      	beq.n	80033e8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80033e4:	2302      	movs	r3, #2
 80033e6:	e0cc      	b.n	8003582 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033ee:	2b01      	cmp	r3, #1
 80033f0:	d101      	bne.n	80033f6 <HAL_I2C_Mem_Write+0x56>
 80033f2:	2302      	movs	r3, #2
 80033f4:	e0c5      	b.n	8003582 <HAL_I2C_Mem_Write+0x1e2>
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	2201      	movs	r2, #1
 80033fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f003 0301 	and.w	r3, r3, #1
 8003408:	2b01      	cmp	r3, #1
 800340a:	d007      	beq.n	800341c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	681a      	ldr	r2, [r3, #0]
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f042 0201 	orr.w	r2, r2, #1
 800341a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	681a      	ldr	r2, [r3, #0]
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800342a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	2221      	movs	r2, #33	; 0x21
 8003430:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	2240      	movs	r2, #64	; 0x40
 8003438:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	2200      	movs	r2, #0
 8003440:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	6a3a      	ldr	r2, [r7, #32]
 8003446:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800344c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003452:	b29a      	uxth	r2, r3
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	4a4d      	ldr	r2, [pc, #308]	; (8003590 <HAL_I2C_Mem_Write+0x1f0>)
 800345c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800345e:	88f8      	ldrh	r0, [r7, #6]
 8003460:	893a      	ldrh	r2, [r7, #8]
 8003462:	8979      	ldrh	r1, [r7, #10]
 8003464:	697b      	ldr	r3, [r7, #20]
 8003466:	9301      	str	r3, [sp, #4]
 8003468:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800346a:	9300      	str	r3, [sp, #0]
 800346c:	4603      	mov	r3, r0
 800346e:	68f8      	ldr	r0, [r7, #12]
 8003470:	f000 f890 	bl	8003594 <I2C_RequestMemoryWrite>
 8003474:	4603      	mov	r3, r0
 8003476:	2b00      	cmp	r3, #0
 8003478:	d052      	beq.n	8003520 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800347a:	2301      	movs	r3, #1
 800347c:	e081      	b.n	8003582 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800347e:	697a      	ldr	r2, [r7, #20]
 8003480:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003482:	68f8      	ldr	r0, [r7, #12]
 8003484:	f000 f9f2 	bl	800386c <I2C_WaitOnTXEFlagUntilTimeout>
 8003488:	4603      	mov	r3, r0
 800348a:	2b00      	cmp	r3, #0
 800348c:	d00d      	beq.n	80034aa <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003492:	2b04      	cmp	r3, #4
 8003494:	d107      	bne.n	80034a6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	681a      	ldr	r2, [r3, #0]
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034a4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80034a6:	2301      	movs	r3, #1
 80034a8:	e06b      	b.n	8003582 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ae:	781a      	ldrb	r2, [r3, #0]
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ba:	1c5a      	adds	r2, r3, #1
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034c4:	3b01      	subs	r3, #1
 80034c6:	b29a      	uxth	r2, r3
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034d0:	b29b      	uxth	r3, r3
 80034d2:	3b01      	subs	r3, #1
 80034d4:	b29a      	uxth	r2, r3
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	695b      	ldr	r3, [r3, #20]
 80034e0:	f003 0304 	and.w	r3, r3, #4
 80034e4:	2b04      	cmp	r3, #4
 80034e6:	d11b      	bne.n	8003520 <HAL_I2C_Mem_Write+0x180>
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d017      	beq.n	8003520 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034f4:	781a      	ldrb	r2, [r3, #0]
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003500:	1c5a      	adds	r2, r3, #1
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800350a:	3b01      	subs	r3, #1
 800350c:	b29a      	uxth	r2, r3
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003516:	b29b      	uxth	r3, r3
 8003518:	3b01      	subs	r3, #1
 800351a:	b29a      	uxth	r2, r3
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003524:	2b00      	cmp	r3, #0
 8003526:	d1aa      	bne.n	800347e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003528:	697a      	ldr	r2, [r7, #20]
 800352a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800352c:	68f8      	ldr	r0, [r7, #12]
 800352e:	f000 f9de 	bl	80038ee <I2C_WaitOnBTFFlagUntilTimeout>
 8003532:	4603      	mov	r3, r0
 8003534:	2b00      	cmp	r3, #0
 8003536:	d00d      	beq.n	8003554 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800353c:	2b04      	cmp	r3, #4
 800353e:	d107      	bne.n	8003550 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	681a      	ldr	r2, [r3, #0]
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800354e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003550:	2301      	movs	r3, #1
 8003552:	e016      	b.n	8003582 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	681a      	ldr	r2, [r3, #0]
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003562:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	2220      	movs	r2, #32
 8003568:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	2200      	movs	r2, #0
 8003570:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	2200      	movs	r2, #0
 8003578:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800357c:	2300      	movs	r3, #0
 800357e:	e000      	b.n	8003582 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003580:	2302      	movs	r3, #2
  }
}
 8003582:	4618      	mov	r0, r3
 8003584:	3718      	adds	r7, #24
 8003586:	46bd      	mov	sp, r7
 8003588:	bd80      	pop	{r7, pc}
 800358a:	bf00      	nop
 800358c:	00100002 	.word	0x00100002
 8003590:	ffff0000 	.word	0xffff0000

08003594 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b088      	sub	sp, #32
 8003598:	af02      	add	r7, sp, #8
 800359a:	60f8      	str	r0, [r7, #12]
 800359c:	4608      	mov	r0, r1
 800359e:	4611      	mov	r1, r2
 80035a0:	461a      	mov	r2, r3
 80035a2:	4603      	mov	r3, r0
 80035a4:	817b      	strh	r3, [r7, #10]
 80035a6:	460b      	mov	r3, r1
 80035a8:	813b      	strh	r3, [r7, #8]
 80035aa:	4613      	mov	r3, r2
 80035ac:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	681a      	ldr	r2, [r3, #0]
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80035bc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80035be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035c0:	9300      	str	r3, [sp, #0]
 80035c2:	6a3b      	ldr	r3, [r7, #32]
 80035c4:	2200      	movs	r2, #0
 80035c6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80035ca:	68f8      	ldr	r0, [r7, #12]
 80035cc:	f000 f878 	bl	80036c0 <I2C_WaitOnFlagUntilTimeout>
 80035d0:	4603      	mov	r3, r0
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d00d      	beq.n	80035f2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80035e4:	d103      	bne.n	80035ee <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80035ec:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80035ee:	2303      	movs	r3, #3
 80035f0:	e05f      	b.n	80036b2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80035f2:	897b      	ldrh	r3, [r7, #10]
 80035f4:	b2db      	uxtb	r3, r3
 80035f6:	461a      	mov	r2, r3
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003600:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003604:	6a3a      	ldr	r2, [r7, #32]
 8003606:	492d      	ldr	r1, [pc, #180]	; (80036bc <I2C_RequestMemoryWrite+0x128>)
 8003608:	68f8      	ldr	r0, [r7, #12]
 800360a:	f000 f8b0 	bl	800376e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800360e:	4603      	mov	r3, r0
 8003610:	2b00      	cmp	r3, #0
 8003612:	d001      	beq.n	8003618 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003614:	2301      	movs	r3, #1
 8003616:	e04c      	b.n	80036b2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003618:	2300      	movs	r3, #0
 800361a:	617b      	str	r3, [r7, #20]
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	695b      	ldr	r3, [r3, #20]
 8003622:	617b      	str	r3, [r7, #20]
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	699b      	ldr	r3, [r3, #24]
 800362a:	617b      	str	r3, [r7, #20]
 800362c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800362e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003630:	6a39      	ldr	r1, [r7, #32]
 8003632:	68f8      	ldr	r0, [r7, #12]
 8003634:	f000 f91a 	bl	800386c <I2C_WaitOnTXEFlagUntilTimeout>
 8003638:	4603      	mov	r3, r0
 800363a:	2b00      	cmp	r3, #0
 800363c:	d00d      	beq.n	800365a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003642:	2b04      	cmp	r3, #4
 8003644:	d107      	bne.n	8003656 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	681a      	ldr	r2, [r3, #0]
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003654:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003656:	2301      	movs	r3, #1
 8003658:	e02b      	b.n	80036b2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800365a:	88fb      	ldrh	r3, [r7, #6]
 800365c:	2b01      	cmp	r3, #1
 800365e:	d105      	bne.n	800366c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003660:	893b      	ldrh	r3, [r7, #8]
 8003662:	b2da      	uxtb	r2, r3
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	611a      	str	r2, [r3, #16]
 800366a:	e021      	b.n	80036b0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800366c:	893b      	ldrh	r3, [r7, #8]
 800366e:	0a1b      	lsrs	r3, r3, #8
 8003670:	b29b      	uxth	r3, r3
 8003672:	b2da      	uxtb	r2, r3
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800367a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800367c:	6a39      	ldr	r1, [r7, #32]
 800367e:	68f8      	ldr	r0, [r7, #12]
 8003680:	f000 f8f4 	bl	800386c <I2C_WaitOnTXEFlagUntilTimeout>
 8003684:	4603      	mov	r3, r0
 8003686:	2b00      	cmp	r3, #0
 8003688:	d00d      	beq.n	80036a6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800368e:	2b04      	cmp	r3, #4
 8003690:	d107      	bne.n	80036a2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	681a      	ldr	r2, [r3, #0]
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036a0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80036a2:	2301      	movs	r3, #1
 80036a4:	e005      	b.n	80036b2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80036a6:	893b      	ldrh	r3, [r7, #8]
 80036a8:	b2da      	uxtb	r2, r3
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80036b0:	2300      	movs	r3, #0
}
 80036b2:	4618      	mov	r0, r3
 80036b4:	3718      	adds	r7, #24
 80036b6:	46bd      	mov	sp, r7
 80036b8:	bd80      	pop	{r7, pc}
 80036ba:	bf00      	nop
 80036bc:	00010002 	.word	0x00010002

080036c0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b084      	sub	sp, #16
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	60f8      	str	r0, [r7, #12]
 80036c8:	60b9      	str	r1, [r7, #8]
 80036ca:	603b      	str	r3, [r7, #0]
 80036cc:	4613      	mov	r3, r2
 80036ce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80036d0:	e025      	b.n	800371e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80036d8:	d021      	beq.n	800371e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036da:	f7fe fc0f 	bl	8001efc <HAL_GetTick>
 80036de:	4602      	mov	r2, r0
 80036e0:	69bb      	ldr	r3, [r7, #24]
 80036e2:	1ad3      	subs	r3, r2, r3
 80036e4:	683a      	ldr	r2, [r7, #0]
 80036e6:	429a      	cmp	r2, r3
 80036e8:	d302      	bcc.n	80036f0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d116      	bne.n	800371e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	2200      	movs	r2, #0
 80036f4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	2220      	movs	r2, #32
 80036fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	2200      	movs	r2, #0
 8003702:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800370a:	f043 0220 	orr.w	r2, r3, #32
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	2200      	movs	r2, #0
 8003716:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800371a:	2301      	movs	r3, #1
 800371c:	e023      	b.n	8003766 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800371e:	68bb      	ldr	r3, [r7, #8]
 8003720:	0c1b      	lsrs	r3, r3, #16
 8003722:	b2db      	uxtb	r3, r3
 8003724:	2b01      	cmp	r3, #1
 8003726:	d10d      	bne.n	8003744 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	695b      	ldr	r3, [r3, #20]
 800372e:	43da      	mvns	r2, r3
 8003730:	68bb      	ldr	r3, [r7, #8]
 8003732:	4013      	ands	r3, r2
 8003734:	b29b      	uxth	r3, r3
 8003736:	2b00      	cmp	r3, #0
 8003738:	bf0c      	ite	eq
 800373a:	2301      	moveq	r3, #1
 800373c:	2300      	movne	r3, #0
 800373e:	b2db      	uxtb	r3, r3
 8003740:	461a      	mov	r2, r3
 8003742:	e00c      	b.n	800375e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	699b      	ldr	r3, [r3, #24]
 800374a:	43da      	mvns	r2, r3
 800374c:	68bb      	ldr	r3, [r7, #8]
 800374e:	4013      	ands	r3, r2
 8003750:	b29b      	uxth	r3, r3
 8003752:	2b00      	cmp	r3, #0
 8003754:	bf0c      	ite	eq
 8003756:	2301      	moveq	r3, #1
 8003758:	2300      	movne	r3, #0
 800375a:	b2db      	uxtb	r3, r3
 800375c:	461a      	mov	r2, r3
 800375e:	79fb      	ldrb	r3, [r7, #7]
 8003760:	429a      	cmp	r2, r3
 8003762:	d0b6      	beq.n	80036d2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003764:	2300      	movs	r3, #0
}
 8003766:	4618      	mov	r0, r3
 8003768:	3710      	adds	r7, #16
 800376a:	46bd      	mov	sp, r7
 800376c:	bd80      	pop	{r7, pc}

0800376e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800376e:	b580      	push	{r7, lr}
 8003770:	b084      	sub	sp, #16
 8003772:	af00      	add	r7, sp, #0
 8003774:	60f8      	str	r0, [r7, #12]
 8003776:	60b9      	str	r1, [r7, #8]
 8003778:	607a      	str	r2, [r7, #4]
 800377a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800377c:	e051      	b.n	8003822 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	695b      	ldr	r3, [r3, #20]
 8003784:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003788:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800378c:	d123      	bne.n	80037d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	681a      	ldr	r2, [r3, #0]
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800379c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80037a6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	2200      	movs	r2, #0
 80037ac:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	2220      	movs	r2, #32
 80037b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	2200      	movs	r2, #0
 80037ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037c2:	f043 0204 	orr.w	r2, r3, #4
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	2200      	movs	r2, #0
 80037ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80037d2:	2301      	movs	r3, #1
 80037d4:	e046      	b.n	8003864 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80037dc:	d021      	beq.n	8003822 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037de:	f7fe fb8d 	bl	8001efc <HAL_GetTick>
 80037e2:	4602      	mov	r2, r0
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	1ad3      	subs	r3, r2, r3
 80037e8:	687a      	ldr	r2, [r7, #4]
 80037ea:	429a      	cmp	r2, r3
 80037ec:	d302      	bcc.n	80037f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d116      	bne.n	8003822 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	2200      	movs	r2, #0
 80037f8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	2220      	movs	r2, #32
 80037fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	2200      	movs	r2, #0
 8003806:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800380e:	f043 0220 	orr.w	r2, r3, #32
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	2200      	movs	r2, #0
 800381a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800381e:	2301      	movs	r3, #1
 8003820:	e020      	b.n	8003864 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003822:	68bb      	ldr	r3, [r7, #8]
 8003824:	0c1b      	lsrs	r3, r3, #16
 8003826:	b2db      	uxtb	r3, r3
 8003828:	2b01      	cmp	r3, #1
 800382a:	d10c      	bne.n	8003846 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	695b      	ldr	r3, [r3, #20]
 8003832:	43da      	mvns	r2, r3
 8003834:	68bb      	ldr	r3, [r7, #8]
 8003836:	4013      	ands	r3, r2
 8003838:	b29b      	uxth	r3, r3
 800383a:	2b00      	cmp	r3, #0
 800383c:	bf14      	ite	ne
 800383e:	2301      	movne	r3, #1
 8003840:	2300      	moveq	r3, #0
 8003842:	b2db      	uxtb	r3, r3
 8003844:	e00b      	b.n	800385e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	699b      	ldr	r3, [r3, #24]
 800384c:	43da      	mvns	r2, r3
 800384e:	68bb      	ldr	r3, [r7, #8]
 8003850:	4013      	ands	r3, r2
 8003852:	b29b      	uxth	r3, r3
 8003854:	2b00      	cmp	r3, #0
 8003856:	bf14      	ite	ne
 8003858:	2301      	movne	r3, #1
 800385a:	2300      	moveq	r3, #0
 800385c:	b2db      	uxtb	r3, r3
 800385e:	2b00      	cmp	r3, #0
 8003860:	d18d      	bne.n	800377e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003862:	2300      	movs	r3, #0
}
 8003864:	4618      	mov	r0, r3
 8003866:	3710      	adds	r7, #16
 8003868:	46bd      	mov	sp, r7
 800386a:	bd80      	pop	{r7, pc}

0800386c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b084      	sub	sp, #16
 8003870:	af00      	add	r7, sp, #0
 8003872:	60f8      	str	r0, [r7, #12]
 8003874:	60b9      	str	r1, [r7, #8]
 8003876:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003878:	e02d      	b.n	80038d6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800387a:	68f8      	ldr	r0, [r7, #12]
 800387c:	f000 f878 	bl	8003970 <I2C_IsAcknowledgeFailed>
 8003880:	4603      	mov	r3, r0
 8003882:	2b00      	cmp	r3, #0
 8003884:	d001      	beq.n	800388a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003886:	2301      	movs	r3, #1
 8003888:	e02d      	b.n	80038e6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800388a:	68bb      	ldr	r3, [r7, #8]
 800388c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003890:	d021      	beq.n	80038d6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003892:	f7fe fb33 	bl	8001efc <HAL_GetTick>
 8003896:	4602      	mov	r2, r0
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	1ad3      	subs	r3, r2, r3
 800389c:	68ba      	ldr	r2, [r7, #8]
 800389e:	429a      	cmp	r2, r3
 80038a0:	d302      	bcc.n	80038a8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80038a2:	68bb      	ldr	r3, [r7, #8]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d116      	bne.n	80038d6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	2200      	movs	r2, #0
 80038ac:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	2220      	movs	r2, #32
 80038b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	2200      	movs	r2, #0
 80038ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038c2:	f043 0220 	orr.w	r2, r3, #32
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	2200      	movs	r2, #0
 80038ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80038d2:	2301      	movs	r3, #1
 80038d4:	e007      	b.n	80038e6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	695b      	ldr	r3, [r3, #20]
 80038dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038e0:	2b80      	cmp	r3, #128	; 0x80
 80038e2:	d1ca      	bne.n	800387a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80038e4:	2300      	movs	r3, #0
}
 80038e6:	4618      	mov	r0, r3
 80038e8:	3710      	adds	r7, #16
 80038ea:	46bd      	mov	sp, r7
 80038ec:	bd80      	pop	{r7, pc}

080038ee <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80038ee:	b580      	push	{r7, lr}
 80038f0:	b084      	sub	sp, #16
 80038f2:	af00      	add	r7, sp, #0
 80038f4:	60f8      	str	r0, [r7, #12]
 80038f6:	60b9      	str	r1, [r7, #8]
 80038f8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80038fa:	e02d      	b.n	8003958 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80038fc:	68f8      	ldr	r0, [r7, #12]
 80038fe:	f000 f837 	bl	8003970 <I2C_IsAcknowledgeFailed>
 8003902:	4603      	mov	r3, r0
 8003904:	2b00      	cmp	r3, #0
 8003906:	d001      	beq.n	800390c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003908:	2301      	movs	r3, #1
 800390a:	e02d      	b.n	8003968 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800390c:	68bb      	ldr	r3, [r7, #8]
 800390e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003912:	d021      	beq.n	8003958 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003914:	f7fe faf2 	bl	8001efc <HAL_GetTick>
 8003918:	4602      	mov	r2, r0
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	1ad3      	subs	r3, r2, r3
 800391e:	68ba      	ldr	r2, [r7, #8]
 8003920:	429a      	cmp	r2, r3
 8003922:	d302      	bcc.n	800392a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003924:	68bb      	ldr	r3, [r7, #8]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d116      	bne.n	8003958 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	2200      	movs	r2, #0
 800392e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	2220      	movs	r2, #32
 8003934:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	2200      	movs	r2, #0
 800393c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003944:	f043 0220 	orr.w	r2, r3, #32
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	2200      	movs	r2, #0
 8003950:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003954:	2301      	movs	r3, #1
 8003956:	e007      	b.n	8003968 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	695b      	ldr	r3, [r3, #20]
 800395e:	f003 0304 	and.w	r3, r3, #4
 8003962:	2b04      	cmp	r3, #4
 8003964:	d1ca      	bne.n	80038fc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003966:	2300      	movs	r3, #0
}
 8003968:	4618      	mov	r0, r3
 800396a:	3710      	adds	r7, #16
 800396c:	46bd      	mov	sp, r7
 800396e:	bd80      	pop	{r7, pc}

08003970 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003970:	b480      	push	{r7}
 8003972:	b083      	sub	sp, #12
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	695b      	ldr	r3, [r3, #20]
 800397e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003982:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003986:	d11b      	bne.n	80039c0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003990:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2200      	movs	r2, #0
 8003996:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2220      	movs	r2, #32
 800399c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2200      	movs	r2, #0
 80039a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ac:	f043 0204 	orr.w	r2, r3, #4
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2200      	movs	r2, #0
 80039b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80039bc:	2301      	movs	r3, #1
 80039be:	e000      	b.n	80039c2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80039c0:	2300      	movs	r3, #0
}
 80039c2:	4618      	mov	r0, r3
 80039c4:	370c      	adds	r7, #12
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bc80      	pop	{r7}
 80039ca:	4770      	bx	lr

080039cc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b086      	sub	sp, #24
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d101      	bne.n	80039de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80039da:	2301      	movs	r3, #1
 80039dc:	e26c      	b.n	8003eb8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f003 0301 	and.w	r3, r3, #1
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	f000 8087 	beq.w	8003afa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80039ec:	4b92      	ldr	r3, [pc, #584]	; (8003c38 <HAL_RCC_OscConfig+0x26c>)
 80039ee:	685b      	ldr	r3, [r3, #4]
 80039f0:	f003 030c 	and.w	r3, r3, #12
 80039f4:	2b04      	cmp	r3, #4
 80039f6:	d00c      	beq.n	8003a12 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80039f8:	4b8f      	ldr	r3, [pc, #572]	; (8003c38 <HAL_RCC_OscConfig+0x26c>)
 80039fa:	685b      	ldr	r3, [r3, #4]
 80039fc:	f003 030c 	and.w	r3, r3, #12
 8003a00:	2b08      	cmp	r3, #8
 8003a02:	d112      	bne.n	8003a2a <HAL_RCC_OscConfig+0x5e>
 8003a04:	4b8c      	ldr	r3, [pc, #560]	; (8003c38 <HAL_RCC_OscConfig+0x26c>)
 8003a06:	685b      	ldr	r3, [r3, #4]
 8003a08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a10:	d10b      	bne.n	8003a2a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a12:	4b89      	ldr	r3, [pc, #548]	; (8003c38 <HAL_RCC_OscConfig+0x26c>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d06c      	beq.n	8003af8 <HAL_RCC_OscConfig+0x12c>
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d168      	bne.n	8003af8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003a26:	2301      	movs	r3, #1
 8003a28:	e246      	b.n	8003eb8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	685b      	ldr	r3, [r3, #4]
 8003a2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a32:	d106      	bne.n	8003a42 <HAL_RCC_OscConfig+0x76>
 8003a34:	4b80      	ldr	r3, [pc, #512]	; (8003c38 <HAL_RCC_OscConfig+0x26c>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4a7f      	ldr	r2, [pc, #508]	; (8003c38 <HAL_RCC_OscConfig+0x26c>)
 8003a3a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a3e:	6013      	str	r3, [r2, #0]
 8003a40:	e02e      	b.n	8003aa0 <HAL_RCC_OscConfig+0xd4>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	685b      	ldr	r3, [r3, #4]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d10c      	bne.n	8003a64 <HAL_RCC_OscConfig+0x98>
 8003a4a:	4b7b      	ldr	r3, [pc, #492]	; (8003c38 <HAL_RCC_OscConfig+0x26c>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4a7a      	ldr	r2, [pc, #488]	; (8003c38 <HAL_RCC_OscConfig+0x26c>)
 8003a50:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a54:	6013      	str	r3, [r2, #0]
 8003a56:	4b78      	ldr	r3, [pc, #480]	; (8003c38 <HAL_RCC_OscConfig+0x26c>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	4a77      	ldr	r2, [pc, #476]	; (8003c38 <HAL_RCC_OscConfig+0x26c>)
 8003a5c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a60:	6013      	str	r3, [r2, #0]
 8003a62:	e01d      	b.n	8003aa0 <HAL_RCC_OscConfig+0xd4>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	685b      	ldr	r3, [r3, #4]
 8003a68:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003a6c:	d10c      	bne.n	8003a88 <HAL_RCC_OscConfig+0xbc>
 8003a6e:	4b72      	ldr	r3, [pc, #456]	; (8003c38 <HAL_RCC_OscConfig+0x26c>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4a71      	ldr	r2, [pc, #452]	; (8003c38 <HAL_RCC_OscConfig+0x26c>)
 8003a74:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a78:	6013      	str	r3, [r2, #0]
 8003a7a:	4b6f      	ldr	r3, [pc, #444]	; (8003c38 <HAL_RCC_OscConfig+0x26c>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4a6e      	ldr	r2, [pc, #440]	; (8003c38 <HAL_RCC_OscConfig+0x26c>)
 8003a80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a84:	6013      	str	r3, [r2, #0]
 8003a86:	e00b      	b.n	8003aa0 <HAL_RCC_OscConfig+0xd4>
 8003a88:	4b6b      	ldr	r3, [pc, #428]	; (8003c38 <HAL_RCC_OscConfig+0x26c>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	4a6a      	ldr	r2, [pc, #424]	; (8003c38 <HAL_RCC_OscConfig+0x26c>)
 8003a8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a92:	6013      	str	r3, [r2, #0]
 8003a94:	4b68      	ldr	r3, [pc, #416]	; (8003c38 <HAL_RCC_OscConfig+0x26c>)
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4a67      	ldr	r2, [pc, #412]	; (8003c38 <HAL_RCC_OscConfig+0x26c>)
 8003a9a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a9e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	685b      	ldr	r3, [r3, #4]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d013      	beq.n	8003ad0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003aa8:	f7fe fa28 	bl	8001efc <HAL_GetTick>
 8003aac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003aae:	e008      	b.n	8003ac2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ab0:	f7fe fa24 	bl	8001efc <HAL_GetTick>
 8003ab4:	4602      	mov	r2, r0
 8003ab6:	693b      	ldr	r3, [r7, #16]
 8003ab8:	1ad3      	subs	r3, r2, r3
 8003aba:	2b64      	cmp	r3, #100	; 0x64
 8003abc:	d901      	bls.n	8003ac2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003abe:	2303      	movs	r3, #3
 8003ac0:	e1fa      	b.n	8003eb8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ac2:	4b5d      	ldr	r3, [pc, #372]	; (8003c38 <HAL_RCC_OscConfig+0x26c>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d0f0      	beq.n	8003ab0 <HAL_RCC_OscConfig+0xe4>
 8003ace:	e014      	b.n	8003afa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ad0:	f7fe fa14 	bl	8001efc <HAL_GetTick>
 8003ad4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ad6:	e008      	b.n	8003aea <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ad8:	f7fe fa10 	bl	8001efc <HAL_GetTick>
 8003adc:	4602      	mov	r2, r0
 8003ade:	693b      	ldr	r3, [r7, #16]
 8003ae0:	1ad3      	subs	r3, r2, r3
 8003ae2:	2b64      	cmp	r3, #100	; 0x64
 8003ae4:	d901      	bls.n	8003aea <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003ae6:	2303      	movs	r3, #3
 8003ae8:	e1e6      	b.n	8003eb8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003aea:	4b53      	ldr	r3, [pc, #332]	; (8003c38 <HAL_RCC_OscConfig+0x26c>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d1f0      	bne.n	8003ad8 <HAL_RCC_OscConfig+0x10c>
 8003af6:	e000      	b.n	8003afa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003af8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f003 0302 	and.w	r3, r3, #2
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d063      	beq.n	8003bce <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003b06:	4b4c      	ldr	r3, [pc, #304]	; (8003c38 <HAL_RCC_OscConfig+0x26c>)
 8003b08:	685b      	ldr	r3, [r3, #4]
 8003b0a:	f003 030c 	and.w	r3, r3, #12
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d00b      	beq.n	8003b2a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003b12:	4b49      	ldr	r3, [pc, #292]	; (8003c38 <HAL_RCC_OscConfig+0x26c>)
 8003b14:	685b      	ldr	r3, [r3, #4]
 8003b16:	f003 030c 	and.w	r3, r3, #12
 8003b1a:	2b08      	cmp	r3, #8
 8003b1c:	d11c      	bne.n	8003b58 <HAL_RCC_OscConfig+0x18c>
 8003b1e:	4b46      	ldr	r3, [pc, #280]	; (8003c38 <HAL_RCC_OscConfig+0x26c>)
 8003b20:	685b      	ldr	r3, [r3, #4]
 8003b22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d116      	bne.n	8003b58 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b2a:	4b43      	ldr	r3, [pc, #268]	; (8003c38 <HAL_RCC_OscConfig+0x26c>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f003 0302 	and.w	r3, r3, #2
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d005      	beq.n	8003b42 <HAL_RCC_OscConfig+0x176>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	691b      	ldr	r3, [r3, #16]
 8003b3a:	2b01      	cmp	r3, #1
 8003b3c:	d001      	beq.n	8003b42 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003b3e:	2301      	movs	r3, #1
 8003b40:	e1ba      	b.n	8003eb8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b42:	4b3d      	ldr	r3, [pc, #244]	; (8003c38 <HAL_RCC_OscConfig+0x26c>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	695b      	ldr	r3, [r3, #20]
 8003b4e:	00db      	lsls	r3, r3, #3
 8003b50:	4939      	ldr	r1, [pc, #228]	; (8003c38 <HAL_RCC_OscConfig+0x26c>)
 8003b52:	4313      	orrs	r3, r2
 8003b54:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b56:	e03a      	b.n	8003bce <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	691b      	ldr	r3, [r3, #16]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d020      	beq.n	8003ba2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b60:	4b36      	ldr	r3, [pc, #216]	; (8003c3c <HAL_RCC_OscConfig+0x270>)
 8003b62:	2201      	movs	r2, #1
 8003b64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b66:	f7fe f9c9 	bl	8001efc <HAL_GetTick>
 8003b6a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b6c:	e008      	b.n	8003b80 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b6e:	f7fe f9c5 	bl	8001efc <HAL_GetTick>
 8003b72:	4602      	mov	r2, r0
 8003b74:	693b      	ldr	r3, [r7, #16]
 8003b76:	1ad3      	subs	r3, r2, r3
 8003b78:	2b02      	cmp	r3, #2
 8003b7a:	d901      	bls.n	8003b80 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003b7c:	2303      	movs	r3, #3
 8003b7e:	e19b      	b.n	8003eb8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b80:	4b2d      	ldr	r3, [pc, #180]	; (8003c38 <HAL_RCC_OscConfig+0x26c>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f003 0302 	and.w	r3, r3, #2
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d0f0      	beq.n	8003b6e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b8c:	4b2a      	ldr	r3, [pc, #168]	; (8003c38 <HAL_RCC_OscConfig+0x26c>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	695b      	ldr	r3, [r3, #20]
 8003b98:	00db      	lsls	r3, r3, #3
 8003b9a:	4927      	ldr	r1, [pc, #156]	; (8003c38 <HAL_RCC_OscConfig+0x26c>)
 8003b9c:	4313      	orrs	r3, r2
 8003b9e:	600b      	str	r3, [r1, #0]
 8003ba0:	e015      	b.n	8003bce <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003ba2:	4b26      	ldr	r3, [pc, #152]	; (8003c3c <HAL_RCC_OscConfig+0x270>)
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ba8:	f7fe f9a8 	bl	8001efc <HAL_GetTick>
 8003bac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003bae:	e008      	b.n	8003bc2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003bb0:	f7fe f9a4 	bl	8001efc <HAL_GetTick>
 8003bb4:	4602      	mov	r2, r0
 8003bb6:	693b      	ldr	r3, [r7, #16]
 8003bb8:	1ad3      	subs	r3, r2, r3
 8003bba:	2b02      	cmp	r3, #2
 8003bbc:	d901      	bls.n	8003bc2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003bbe:	2303      	movs	r3, #3
 8003bc0:	e17a      	b.n	8003eb8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003bc2:	4b1d      	ldr	r3, [pc, #116]	; (8003c38 <HAL_RCC_OscConfig+0x26c>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f003 0302 	and.w	r3, r3, #2
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d1f0      	bne.n	8003bb0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f003 0308 	and.w	r3, r3, #8
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d03a      	beq.n	8003c50 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	699b      	ldr	r3, [r3, #24]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d019      	beq.n	8003c16 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003be2:	4b17      	ldr	r3, [pc, #92]	; (8003c40 <HAL_RCC_OscConfig+0x274>)
 8003be4:	2201      	movs	r2, #1
 8003be6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003be8:	f7fe f988 	bl	8001efc <HAL_GetTick>
 8003bec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003bee:	e008      	b.n	8003c02 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003bf0:	f7fe f984 	bl	8001efc <HAL_GetTick>
 8003bf4:	4602      	mov	r2, r0
 8003bf6:	693b      	ldr	r3, [r7, #16]
 8003bf8:	1ad3      	subs	r3, r2, r3
 8003bfa:	2b02      	cmp	r3, #2
 8003bfc:	d901      	bls.n	8003c02 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003bfe:	2303      	movs	r3, #3
 8003c00:	e15a      	b.n	8003eb8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c02:	4b0d      	ldr	r3, [pc, #52]	; (8003c38 <HAL_RCC_OscConfig+0x26c>)
 8003c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c06:	f003 0302 	and.w	r3, r3, #2
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d0f0      	beq.n	8003bf0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003c0e:	2001      	movs	r0, #1
 8003c10:	f000 fad8 	bl	80041c4 <RCC_Delay>
 8003c14:	e01c      	b.n	8003c50 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c16:	4b0a      	ldr	r3, [pc, #40]	; (8003c40 <HAL_RCC_OscConfig+0x274>)
 8003c18:	2200      	movs	r2, #0
 8003c1a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c1c:	f7fe f96e 	bl	8001efc <HAL_GetTick>
 8003c20:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c22:	e00f      	b.n	8003c44 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c24:	f7fe f96a 	bl	8001efc <HAL_GetTick>
 8003c28:	4602      	mov	r2, r0
 8003c2a:	693b      	ldr	r3, [r7, #16]
 8003c2c:	1ad3      	subs	r3, r2, r3
 8003c2e:	2b02      	cmp	r3, #2
 8003c30:	d908      	bls.n	8003c44 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003c32:	2303      	movs	r3, #3
 8003c34:	e140      	b.n	8003eb8 <HAL_RCC_OscConfig+0x4ec>
 8003c36:	bf00      	nop
 8003c38:	40021000 	.word	0x40021000
 8003c3c:	42420000 	.word	0x42420000
 8003c40:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c44:	4b9e      	ldr	r3, [pc, #632]	; (8003ec0 <HAL_RCC_OscConfig+0x4f4>)
 8003c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c48:	f003 0302 	and.w	r3, r3, #2
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d1e9      	bne.n	8003c24 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f003 0304 	and.w	r3, r3, #4
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	f000 80a6 	beq.w	8003daa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c5e:	2300      	movs	r3, #0
 8003c60:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c62:	4b97      	ldr	r3, [pc, #604]	; (8003ec0 <HAL_RCC_OscConfig+0x4f4>)
 8003c64:	69db      	ldr	r3, [r3, #28]
 8003c66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d10d      	bne.n	8003c8a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c6e:	4b94      	ldr	r3, [pc, #592]	; (8003ec0 <HAL_RCC_OscConfig+0x4f4>)
 8003c70:	69db      	ldr	r3, [r3, #28]
 8003c72:	4a93      	ldr	r2, [pc, #588]	; (8003ec0 <HAL_RCC_OscConfig+0x4f4>)
 8003c74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c78:	61d3      	str	r3, [r2, #28]
 8003c7a:	4b91      	ldr	r3, [pc, #580]	; (8003ec0 <HAL_RCC_OscConfig+0x4f4>)
 8003c7c:	69db      	ldr	r3, [r3, #28]
 8003c7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c82:	60bb      	str	r3, [r7, #8]
 8003c84:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c86:	2301      	movs	r3, #1
 8003c88:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c8a:	4b8e      	ldr	r3, [pc, #568]	; (8003ec4 <HAL_RCC_OscConfig+0x4f8>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d118      	bne.n	8003cc8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c96:	4b8b      	ldr	r3, [pc, #556]	; (8003ec4 <HAL_RCC_OscConfig+0x4f8>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	4a8a      	ldr	r2, [pc, #552]	; (8003ec4 <HAL_RCC_OscConfig+0x4f8>)
 8003c9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ca0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ca2:	f7fe f92b 	bl	8001efc <HAL_GetTick>
 8003ca6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ca8:	e008      	b.n	8003cbc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003caa:	f7fe f927 	bl	8001efc <HAL_GetTick>
 8003cae:	4602      	mov	r2, r0
 8003cb0:	693b      	ldr	r3, [r7, #16]
 8003cb2:	1ad3      	subs	r3, r2, r3
 8003cb4:	2b64      	cmp	r3, #100	; 0x64
 8003cb6:	d901      	bls.n	8003cbc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003cb8:	2303      	movs	r3, #3
 8003cba:	e0fd      	b.n	8003eb8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cbc:	4b81      	ldr	r3, [pc, #516]	; (8003ec4 <HAL_RCC_OscConfig+0x4f8>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d0f0      	beq.n	8003caa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	68db      	ldr	r3, [r3, #12]
 8003ccc:	2b01      	cmp	r3, #1
 8003cce:	d106      	bne.n	8003cde <HAL_RCC_OscConfig+0x312>
 8003cd0:	4b7b      	ldr	r3, [pc, #492]	; (8003ec0 <HAL_RCC_OscConfig+0x4f4>)
 8003cd2:	6a1b      	ldr	r3, [r3, #32]
 8003cd4:	4a7a      	ldr	r2, [pc, #488]	; (8003ec0 <HAL_RCC_OscConfig+0x4f4>)
 8003cd6:	f043 0301 	orr.w	r3, r3, #1
 8003cda:	6213      	str	r3, [r2, #32]
 8003cdc:	e02d      	b.n	8003d3a <HAL_RCC_OscConfig+0x36e>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	68db      	ldr	r3, [r3, #12]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d10c      	bne.n	8003d00 <HAL_RCC_OscConfig+0x334>
 8003ce6:	4b76      	ldr	r3, [pc, #472]	; (8003ec0 <HAL_RCC_OscConfig+0x4f4>)
 8003ce8:	6a1b      	ldr	r3, [r3, #32]
 8003cea:	4a75      	ldr	r2, [pc, #468]	; (8003ec0 <HAL_RCC_OscConfig+0x4f4>)
 8003cec:	f023 0301 	bic.w	r3, r3, #1
 8003cf0:	6213      	str	r3, [r2, #32]
 8003cf2:	4b73      	ldr	r3, [pc, #460]	; (8003ec0 <HAL_RCC_OscConfig+0x4f4>)
 8003cf4:	6a1b      	ldr	r3, [r3, #32]
 8003cf6:	4a72      	ldr	r2, [pc, #456]	; (8003ec0 <HAL_RCC_OscConfig+0x4f4>)
 8003cf8:	f023 0304 	bic.w	r3, r3, #4
 8003cfc:	6213      	str	r3, [r2, #32]
 8003cfe:	e01c      	b.n	8003d3a <HAL_RCC_OscConfig+0x36e>
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	68db      	ldr	r3, [r3, #12]
 8003d04:	2b05      	cmp	r3, #5
 8003d06:	d10c      	bne.n	8003d22 <HAL_RCC_OscConfig+0x356>
 8003d08:	4b6d      	ldr	r3, [pc, #436]	; (8003ec0 <HAL_RCC_OscConfig+0x4f4>)
 8003d0a:	6a1b      	ldr	r3, [r3, #32]
 8003d0c:	4a6c      	ldr	r2, [pc, #432]	; (8003ec0 <HAL_RCC_OscConfig+0x4f4>)
 8003d0e:	f043 0304 	orr.w	r3, r3, #4
 8003d12:	6213      	str	r3, [r2, #32]
 8003d14:	4b6a      	ldr	r3, [pc, #424]	; (8003ec0 <HAL_RCC_OscConfig+0x4f4>)
 8003d16:	6a1b      	ldr	r3, [r3, #32]
 8003d18:	4a69      	ldr	r2, [pc, #420]	; (8003ec0 <HAL_RCC_OscConfig+0x4f4>)
 8003d1a:	f043 0301 	orr.w	r3, r3, #1
 8003d1e:	6213      	str	r3, [r2, #32]
 8003d20:	e00b      	b.n	8003d3a <HAL_RCC_OscConfig+0x36e>
 8003d22:	4b67      	ldr	r3, [pc, #412]	; (8003ec0 <HAL_RCC_OscConfig+0x4f4>)
 8003d24:	6a1b      	ldr	r3, [r3, #32]
 8003d26:	4a66      	ldr	r2, [pc, #408]	; (8003ec0 <HAL_RCC_OscConfig+0x4f4>)
 8003d28:	f023 0301 	bic.w	r3, r3, #1
 8003d2c:	6213      	str	r3, [r2, #32]
 8003d2e:	4b64      	ldr	r3, [pc, #400]	; (8003ec0 <HAL_RCC_OscConfig+0x4f4>)
 8003d30:	6a1b      	ldr	r3, [r3, #32]
 8003d32:	4a63      	ldr	r2, [pc, #396]	; (8003ec0 <HAL_RCC_OscConfig+0x4f4>)
 8003d34:	f023 0304 	bic.w	r3, r3, #4
 8003d38:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	68db      	ldr	r3, [r3, #12]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d015      	beq.n	8003d6e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d42:	f7fe f8db 	bl	8001efc <HAL_GetTick>
 8003d46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d48:	e00a      	b.n	8003d60 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d4a:	f7fe f8d7 	bl	8001efc <HAL_GetTick>
 8003d4e:	4602      	mov	r2, r0
 8003d50:	693b      	ldr	r3, [r7, #16]
 8003d52:	1ad3      	subs	r3, r2, r3
 8003d54:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d901      	bls.n	8003d60 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003d5c:	2303      	movs	r3, #3
 8003d5e:	e0ab      	b.n	8003eb8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d60:	4b57      	ldr	r3, [pc, #348]	; (8003ec0 <HAL_RCC_OscConfig+0x4f4>)
 8003d62:	6a1b      	ldr	r3, [r3, #32]
 8003d64:	f003 0302 	and.w	r3, r3, #2
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d0ee      	beq.n	8003d4a <HAL_RCC_OscConfig+0x37e>
 8003d6c:	e014      	b.n	8003d98 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d6e:	f7fe f8c5 	bl	8001efc <HAL_GetTick>
 8003d72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d74:	e00a      	b.n	8003d8c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d76:	f7fe f8c1 	bl	8001efc <HAL_GetTick>
 8003d7a:	4602      	mov	r2, r0
 8003d7c:	693b      	ldr	r3, [r7, #16]
 8003d7e:	1ad3      	subs	r3, r2, r3
 8003d80:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d84:	4293      	cmp	r3, r2
 8003d86:	d901      	bls.n	8003d8c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003d88:	2303      	movs	r3, #3
 8003d8a:	e095      	b.n	8003eb8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d8c:	4b4c      	ldr	r3, [pc, #304]	; (8003ec0 <HAL_RCC_OscConfig+0x4f4>)
 8003d8e:	6a1b      	ldr	r3, [r3, #32]
 8003d90:	f003 0302 	and.w	r3, r3, #2
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d1ee      	bne.n	8003d76 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003d98:	7dfb      	ldrb	r3, [r7, #23]
 8003d9a:	2b01      	cmp	r3, #1
 8003d9c:	d105      	bne.n	8003daa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d9e:	4b48      	ldr	r3, [pc, #288]	; (8003ec0 <HAL_RCC_OscConfig+0x4f4>)
 8003da0:	69db      	ldr	r3, [r3, #28]
 8003da2:	4a47      	ldr	r2, [pc, #284]	; (8003ec0 <HAL_RCC_OscConfig+0x4f4>)
 8003da4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003da8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	69db      	ldr	r3, [r3, #28]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	f000 8081 	beq.w	8003eb6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003db4:	4b42      	ldr	r3, [pc, #264]	; (8003ec0 <HAL_RCC_OscConfig+0x4f4>)
 8003db6:	685b      	ldr	r3, [r3, #4]
 8003db8:	f003 030c 	and.w	r3, r3, #12
 8003dbc:	2b08      	cmp	r3, #8
 8003dbe:	d061      	beq.n	8003e84 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	69db      	ldr	r3, [r3, #28]
 8003dc4:	2b02      	cmp	r3, #2
 8003dc6:	d146      	bne.n	8003e56 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003dc8:	4b3f      	ldr	r3, [pc, #252]	; (8003ec8 <HAL_RCC_OscConfig+0x4fc>)
 8003dca:	2200      	movs	r2, #0
 8003dcc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dce:	f7fe f895 	bl	8001efc <HAL_GetTick>
 8003dd2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003dd4:	e008      	b.n	8003de8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003dd6:	f7fe f891 	bl	8001efc <HAL_GetTick>
 8003dda:	4602      	mov	r2, r0
 8003ddc:	693b      	ldr	r3, [r7, #16]
 8003dde:	1ad3      	subs	r3, r2, r3
 8003de0:	2b02      	cmp	r3, #2
 8003de2:	d901      	bls.n	8003de8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003de4:	2303      	movs	r3, #3
 8003de6:	e067      	b.n	8003eb8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003de8:	4b35      	ldr	r3, [pc, #212]	; (8003ec0 <HAL_RCC_OscConfig+0x4f4>)
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d1f0      	bne.n	8003dd6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6a1b      	ldr	r3, [r3, #32]
 8003df8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003dfc:	d108      	bne.n	8003e10 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003dfe:	4b30      	ldr	r3, [pc, #192]	; (8003ec0 <HAL_RCC_OscConfig+0x4f4>)
 8003e00:	685b      	ldr	r3, [r3, #4]
 8003e02:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	689b      	ldr	r3, [r3, #8]
 8003e0a:	492d      	ldr	r1, [pc, #180]	; (8003ec0 <HAL_RCC_OscConfig+0x4f4>)
 8003e0c:	4313      	orrs	r3, r2
 8003e0e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003e10:	4b2b      	ldr	r3, [pc, #172]	; (8003ec0 <HAL_RCC_OscConfig+0x4f4>)
 8003e12:	685b      	ldr	r3, [r3, #4]
 8003e14:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6a19      	ldr	r1, [r3, #32]
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e20:	430b      	orrs	r3, r1
 8003e22:	4927      	ldr	r1, [pc, #156]	; (8003ec0 <HAL_RCC_OscConfig+0x4f4>)
 8003e24:	4313      	orrs	r3, r2
 8003e26:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e28:	4b27      	ldr	r3, [pc, #156]	; (8003ec8 <HAL_RCC_OscConfig+0x4fc>)
 8003e2a:	2201      	movs	r2, #1
 8003e2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e2e:	f7fe f865 	bl	8001efc <HAL_GetTick>
 8003e32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003e34:	e008      	b.n	8003e48 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e36:	f7fe f861 	bl	8001efc <HAL_GetTick>
 8003e3a:	4602      	mov	r2, r0
 8003e3c:	693b      	ldr	r3, [r7, #16]
 8003e3e:	1ad3      	subs	r3, r2, r3
 8003e40:	2b02      	cmp	r3, #2
 8003e42:	d901      	bls.n	8003e48 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003e44:	2303      	movs	r3, #3
 8003e46:	e037      	b.n	8003eb8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003e48:	4b1d      	ldr	r3, [pc, #116]	; (8003ec0 <HAL_RCC_OscConfig+0x4f4>)
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d0f0      	beq.n	8003e36 <HAL_RCC_OscConfig+0x46a>
 8003e54:	e02f      	b.n	8003eb6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e56:	4b1c      	ldr	r3, [pc, #112]	; (8003ec8 <HAL_RCC_OscConfig+0x4fc>)
 8003e58:	2200      	movs	r2, #0
 8003e5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e5c:	f7fe f84e 	bl	8001efc <HAL_GetTick>
 8003e60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e62:	e008      	b.n	8003e76 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e64:	f7fe f84a 	bl	8001efc <HAL_GetTick>
 8003e68:	4602      	mov	r2, r0
 8003e6a:	693b      	ldr	r3, [r7, #16]
 8003e6c:	1ad3      	subs	r3, r2, r3
 8003e6e:	2b02      	cmp	r3, #2
 8003e70:	d901      	bls.n	8003e76 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003e72:	2303      	movs	r3, #3
 8003e74:	e020      	b.n	8003eb8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e76:	4b12      	ldr	r3, [pc, #72]	; (8003ec0 <HAL_RCC_OscConfig+0x4f4>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d1f0      	bne.n	8003e64 <HAL_RCC_OscConfig+0x498>
 8003e82:	e018      	b.n	8003eb6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	69db      	ldr	r3, [r3, #28]
 8003e88:	2b01      	cmp	r3, #1
 8003e8a:	d101      	bne.n	8003e90 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8003e8c:	2301      	movs	r3, #1
 8003e8e:	e013      	b.n	8003eb8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003e90:	4b0b      	ldr	r3, [pc, #44]	; (8003ec0 <HAL_RCC_OscConfig+0x4f4>)
 8003e92:	685b      	ldr	r3, [r3, #4]
 8003e94:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6a1b      	ldr	r3, [r3, #32]
 8003ea0:	429a      	cmp	r2, r3
 8003ea2:	d106      	bne.n	8003eb2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003eae:	429a      	cmp	r2, r3
 8003eb0:	d001      	beq.n	8003eb6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	e000      	b.n	8003eb8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8003eb6:	2300      	movs	r3, #0
}
 8003eb8:	4618      	mov	r0, r3
 8003eba:	3718      	adds	r7, #24
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	bd80      	pop	{r7, pc}
 8003ec0:	40021000 	.word	0x40021000
 8003ec4:	40007000 	.word	0x40007000
 8003ec8:	42420060 	.word	0x42420060

08003ecc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b084      	sub	sp, #16
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
 8003ed4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d101      	bne.n	8003ee0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003edc:	2301      	movs	r3, #1
 8003ede:	e0d0      	b.n	8004082 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003ee0:	4b6a      	ldr	r3, [pc, #424]	; (800408c <HAL_RCC_ClockConfig+0x1c0>)
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f003 0307 	and.w	r3, r3, #7
 8003ee8:	683a      	ldr	r2, [r7, #0]
 8003eea:	429a      	cmp	r2, r3
 8003eec:	d910      	bls.n	8003f10 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003eee:	4b67      	ldr	r3, [pc, #412]	; (800408c <HAL_RCC_ClockConfig+0x1c0>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f023 0207 	bic.w	r2, r3, #7
 8003ef6:	4965      	ldr	r1, [pc, #404]	; (800408c <HAL_RCC_ClockConfig+0x1c0>)
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	4313      	orrs	r3, r2
 8003efc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003efe:	4b63      	ldr	r3, [pc, #396]	; (800408c <HAL_RCC_ClockConfig+0x1c0>)
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f003 0307 	and.w	r3, r3, #7
 8003f06:	683a      	ldr	r2, [r7, #0]
 8003f08:	429a      	cmp	r2, r3
 8003f0a:	d001      	beq.n	8003f10 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003f0c:	2301      	movs	r3, #1
 8003f0e:	e0b8      	b.n	8004082 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f003 0302 	and.w	r3, r3, #2
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d020      	beq.n	8003f5e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f003 0304 	and.w	r3, r3, #4
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d005      	beq.n	8003f34 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003f28:	4b59      	ldr	r3, [pc, #356]	; (8004090 <HAL_RCC_ClockConfig+0x1c4>)
 8003f2a:	685b      	ldr	r3, [r3, #4]
 8003f2c:	4a58      	ldr	r2, [pc, #352]	; (8004090 <HAL_RCC_ClockConfig+0x1c4>)
 8003f2e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003f32:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f003 0308 	and.w	r3, r3, #8
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d005      	beq.n	8003f4c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003f40:	4b53      	ldr	r3, [pc, #332]	; (8004090 <HAL_RCC_ClockConfig+0x1c4>)
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	4a52      	ldr	r2, [pc, #328]	; (8004090 <HAL_RCC_ClockConfig+0x1c4>)
 8003f46:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003f4a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f4c:	4b50      	ldr	r3, [pc, #320]	; (8004090 <HAL_RCC_ClockConfig+0x1c4>)
 8003f4e:	685b      	ldr	r3, [r3, #4]
 8003f50:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	689b      	ldr	r3, [r3, #8]
 8003f58:	494d      	ldr	r1, [pc, #308]	; (8004090 <HAL_RCC_ClockConfig+0x1c4>)
 8003f5a:	4313      	orrs	r3, r2
 8003f5c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f003 0301 	and.w	r3, r3, #1
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d040      	beq.n	8003fec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	685b      	ldr	r3, [r3, #4]
 8003f6e:	2b01      	cmp	r3, #1
 8003f70:	d107      	bne.n	8003f82 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f72:	4b47      	ldr	r3, [pc, #284]	; (8004090 <HAL_RCC_ClockConfig+0x1c4>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d115      	bne.n	8003faa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f7e:	2301      	movs	r3, #1
 8003f80:	e07f      	b.n	8004082 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	685b      	ldr	r3, [r3, #4]
 8003f86:	2b02      	cmp	r3, #2
 8003f88:	d107      	bne.n	8003f9a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f8a:	4b41      	ldr	r3, [pc, #260]	; (8004090 <HAL_RCC_ClockConfig+0x1c4>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d109      	bne.n	8003faa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f96:	2301      	movs	r3, #1
 8003f98:	e073      	b.n	8004082 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f9a:	4b3d      	ldr	r3, [pc, #244]	; (8004090 <HAL_RCC_ClockConfig+0x1c4>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f003 0302 	and.w	r3, r3, #2
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d101      	bne.n	8003faa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	e06b      	b.n	8004082 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003faa:	4b39      	ldr	r3, [pc, #228]	; (8004090 <HAL_RCC_ClockConfig+0x1c4>)
 8003fac:	685b      	ldr	r3, [r3, #4]
 8003fae:	f023 0203 	bic.w	r2, r3, #3
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	685b      	ldr	r3, [r3, #4]
 8003fb6:	4936      	ldr	r1, [pc, #216]	; (8004090 <HAL_RCC_ClockConfig+0x1c4>)
 8003fb8:	4313      	orrs	r3, r2
 8003fba:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003fbc:	f7fd ff9e 	bl	8001efc <HAL_GetTick>
 8003fc0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fc2:	e00a      	b.n	8003fda <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003fc4:	f7fd ff9a 	bl	8001efc <HAL_GetTick>
 8003fc8:	4602      	mov	r2, r0
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	1ad3      	subs	r3, r2, r3
 8003fce:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d901      	bls.n	8003fda <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003fd6:	2303      	movs	r3, #3
 8003fd8:	e053      	b.n	8004082 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fda:	4b2d      	ldr	r3, [pc, #180]	; (8004090 <HAL_RCC_ClockConfig+0x1c4>)
 8003fdc:	685b      	ldr	r3, [r3, #4]
 8003fde:	f003 020c 	and.w	r2, r3, #12
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	685b      	ldr	r3, [r3, #4]
 8003fe6:	009b      	lsls	r3, r3, #2
 8003fe8:	429a      	cmp	r2, r3
 8003fea:	d1eb      	bne.n	8003fc4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003fec:	4b27      	ldr	r3, [pc, #156]	; (800408c <HAL_RCC_ClockConfig+0x1c0>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f003 0307 	and.w	r3, r3, #7
 8003ff4:	683a      	ldr	r2, [r7, #0]
 8003ff6:	429a      	cmp	r2, r3
 8003ff8:	d210      	bcs.n	800401c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ffa:	4b24      	ldr	r3, [pc, #144]	; (800408c <HAL_RCC_ClockConfig+0x1c0>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f023 0207 	bic.w	r2, r3, #7
 8004002:	4922      	ldr	r1, [pc, #136]	; (800408c <HAL_RCC_ClockConfig+0x1c0>)
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	4313      	orrs	r3, r2
 8004008:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800400a:	4b20      	ldr	r3, [pc, #128]	; (800408c <HAL_RCC_ClockConfig+0x1c0>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f003 0307 	and.w	r3, r3, #7
 8004012:	683a      	ldr	r2, [r7, #0]
 8004014:	429a      	cmp	r2, r3
 8004016:	d001      	beq.n	800401c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004018:	2301      	movs	r3, #1
 800401a:	e032      	b.n	8004082 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f003 0304 	and.w	r3, r3, #4
 8004024:	2b00      	cmp	r3, #0
 8004026:	d008      	beq.n	800403a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004028:	4b19      	ldr	r3, [pc, #100]	; (8004090 <HAL_RCC_ClockConfig+0x1c4>)
 800402a:	685b      	ldr	r3, [r3, #4]
 800402c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	68db      	ldr	r3, [r3, #12]
 8004034:	4916      	ldr	r1, [pc, #88]	; (8004090 <HAL_RCC_ClockConfig+0x1c4>)
 8004036:	4313      	orrs	r3, r2
 8004038:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f003 0308 	and.w	r3, r3, #8
 8004042:	2b00      	cmp	r3, #0
 8004044:	d009      	beq.n	800405a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004046:	4b12      	ldr	r3, [pc, #72]	; (8004090 <HAL_RCC_ClockConfig+0x1c4>)
 8004048:	685b      	ldr	r3, [r3, #4]
 800404a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	691b      	ldr	r3, [r3, #16]
 8004052:	00db      	lsls	r3, r3, #3
 8004054:	490e      	ldr	r1, [pc, #56]	; (8004090 <HAL_RCC_ClockConfig+0x1c4>)
 8004056:	4313      	orrs	r3, r2
 8004058:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800405a:	f000 f821 	bl	80040a0 <HAL_RCC_GetSysClockFreq>
 800405e:	4602      	mov	r2, r0
 8004060:	4b0b      	ldr	r3, [pc, #44]	; (8004090 <HAL_RCC_ClockConfig+0x1c4>)
 8004062:	685b      	ldr	r3, [r3, #4]
 8004064:	091b      	lsrs	r3, r3, #4
 8004066:	f003 030f 	and.w	r3, r3, #15
 800406a:	490a      	ldr	r1, [pc, #40]	; (8004094 <HAL_RCC_ClockConfig+0x1c8>)
 800406c:	5ccb      	ldrb	r3, [r1, r3]
 800406e:	fa22 f303 	lsr.w	r3, r2, r3
 8004072:	4a09      	ldr	r2, [pc, #36]	; (8004098 <HAL_RCC_ClockConfig+0x1cc>)
 8004074:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004076:	4b09      	ldr	r3, [pc, #36]	; (800409c <HAL_RCC_ClockConfig+0x1d0>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	4618      	mov	r0, r3
 800407c:	f7fd fefc 	bl	8001e78 <HAL_InitTick>

  return HAL_OK;
 8004080:	2300      	movs	r3, #0
}
 8004082:	4618      	mov	r0, r3
 8004084:	3710      	adds	r7, #16
 8004086:	46bd      	mov	sp, r7
 8004088:	bd80      	pop	{r7, pc}
 800408a:	bf00      	nop
 800408c:	40022000 	.word	0x40022000
 8004090:	40021000 	.word	0x40021000
 8004094:	08009b18 	.word	0x08009b18
 8004098:	20000008 	.word	0x20000008
 800409c:	2000000c 	.word	0x2000000c

080040a0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80040a0:	b490      	push	{r4, r7}
 80040a2:	b08a      	sub	sp, #40	; 0x28
 80040a4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80040a6:	4b2a      	ldr	r3, [pc, #168]	; (8004150 <HAL_RCC_GetSysClockFreq+0xb0>)
 80040a8:	1d3c      	adds	r4, r7, #4
 80040aa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80040ac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80040b0:	f240 2301 	movw	r3, #513	; 0x201
 80040b4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80040b6:	2300      	movs	r3, #0
 80040b8:	61fb      	str	r3, [r7, #28]
 80040ba:	2300      	movs	r3, #0
 80040bc:	61bb      	str	r3, [r7, #24]
 80040be:	2300      	movs	r3, #0
 80040c0:	627b      	str	r3, [r7, #36]	; 0x24
 80040c2:	2300      	movs	r3, #0
 80040c4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80040c6:	2300      	movs	r3, #0
 80040c8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80040ca:	4b22      	ldr	r3, [pc, #136]	; (8004154 <HAL_RCC_GetSysClockFreq+0xb4>)
 80040cc:	685b      	ldr	r3, [r3, #4]
 80040ce:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80040d0:	69fb      	ldr	r3, [r7, #28]
 80040d2:	f003 030c 	and.w	r3, r3, #12
 80040d6:	2b04      	cmp	r3, #4
 80040d8:	d002      	beq.n	80040e0 <HAL_RCC_GetSysClockFreq+0x40>
 80040da:	2b08      	cmp	r3, #8
 80040dc:	d003      	beq.n	80040e6 <HAL_RCC_GetSysClockFreq+0x46>
 80040de:	e02d      	b.n	800413c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80040e0:	4b1d      	ldr	r3, [pc, #116]	; (8004158 <HAL_RCC_GetSysClockFreq+0xb8>)
 80040e2:	623b      	str	r3, [r7, #32]
      break;
 80040e4:	e02d      	b.n	8004142 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80040e6:	69fb      	ldr	r3, [r7, #28]
 80040e8:	0c9b      	lsrs	r3, r3, #18
 80040ea:	f003 030f 	and.w	r3, r3, #15
 80040ee:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80040f2:	4413      	add	r3, r2
 80040f4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80040f8:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80040fa:	69fb      	ldr	r3, [r7, #28]
 80040fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004100:	2b00      	cmp	r3, #0
 8004102:	d013      	beq.n	800412c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004104:	4b13      	ldr	r3, [pc, #76]	; (8004154 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004106:	685b      	ldr	r3, [r3, #4]
 8004108:	0c5b      	lsrs	r3, r3, #17
 800410a:	f003 0301 	and.w	r3, r3, #1
 800410e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004112:	4413      	add	r3, r2
 8004114:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004118:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800411a:	697b      	ldr	r3, [r7, #20]
 800411c:	4a0e      	ldr	r2, [pc, #56]	; (8004158 <HAL_RCC_GetSysClockFreq+0xb8>)
 800411e:	fb02 f203 	mul.w	r2, r2, r3
 8004122:	69bb      	ldr	r3, [r7, #24]
 8004124:	fbb2 f3f3 	udiv	r3, r2, r3
 8004128:	627b      	str	r3, [r7, #36]	; 0x24
 800412a:	e004      	b.n	8004136 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800412c:	697b      	ldr	r3, [r7, #20]
 800412e:	4a0b      	ldr	r2, [pc, #44]	; (800415c <HAL_RCC_GetSysClockFreq+0xbc>)
 8004130:	fb02 f303 	mul.w	r3, r2, r3
 8004134:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8004136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004138:	623b      	str	r3, [r7, #32]
      break;
 800413a:	e002      	b.n	8004142 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800413c:	4b06      	ldr	r3, [pc, #24]	; (8004158 <HAL_RCC_GetSysClockFreq+0xb8>)
 800413e:	623b      	str	r3, [r7, #32]
      break;
 8004140:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004142:	6a3b      	ldr	r3, [r7, #32]
}
 8004144:	4618      	mov	r0, r3
 8004146:	3728      	adds	r7, #40	; 0x28
 8004148:	46bd      	mov	sp, r7
 800414a:	bc90      	pop	{r4, r7}
 800414c:	4770      	bx	lr
 800414e:	bf00      	nop
 8004150:	08008d9c 	.word	0x08008d9c
 8004154:	40021000 	.word	0x40021000
 8004158:	007a1200 	.word	0x007a1200
 800415c:	003d0900 	.word	0x003d0900

08004160 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004160:	b480      	push	{r7}
 8004162:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004164:	4b02      	ldr	r3, [pc, #8]	; (8004170 <HAL_RCC_GetHCLKFreq+0x10>)
 8004166:	681b      	ldr	r3, [r3, #0]
}
 8004168:	4618      	mov	r0, r3
 800416a:	46bd      	mov	sp, r7
 800416c:	bc80      	pop	{r7}
 800416e:	4770      	bx	lr
 8004170:	20000008 	.word	0x20000008

08004174 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004178:	f7ff fff2 	bl	8004160 <HAL_RCC_GetHCLKFreq>
 800417c:	4602      	mov	r2, r0
 800417e:	4b05      	ldr	r3, [pc, #20]	; (8004194 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004180:	685b      	ldr	r3, [r3, #4]
 8004182:	0a1b      	lsrs	r3, r3, #8
 8004184:	f003 0307 	and.w	r3, r3, #7
 8004188:	4903      	ldr	r1, [pc, #12]	; (8004198 <HAL_RCC_GetPCLK1Freq+0x24>)
 800418a:	5ccb      	ldrb	r3, [r1, r3]
 800418c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004190:	4618      	mov	r0, r3
 8004192:	bd80      	pop	{r7, pc}
 8004194:	40021000 	.word	0x40021000
 8004198:	08009b28 	.word	0x08009b28

0800419c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80041a0:	f7ff ffde 	bl	8004160 <HAL_RCC_GetHCLKFreq>
 80041a4:	4602      	mov	r2, r0
 80041a6:	4b05      	ldr	r3, [pc, #20]	; (80041bc <HAL_RCC_GetPCLK2Freq+0x20>)
 80041a8:	685b      	ldr	r3, [r3, #4]
 80041aa:	0adb      	lsrs	r3, r3, #11
 80041ac:	f003 0307 	and.w	r3, r3, #7
 80041b0:	4903      	ldr	r1, [pc, #12]	; (80041c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80041b2:	5ccb      	ldrb	r3, [r1, r3]
 80041b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80041b8:	4618      	mov	r0, r3
 80041ba:	bd80      	pop	{r7, pc}
 80041bc:	40021000 	.word	0x40021000
 80041c0:	08009b28 	.word	0x08009b28

080041c4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80041c4:	b480      	push	{r7}
 80041c6:	b085      	sub	sp, #20
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80041cc:	4b0a      	ldr	r3, [pc, #40]	; (80041f8 <RCC_Delay+0x34>)
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4a0a      	ldr	r2, [pc, #40]	; (80041fc <RCC_Delay+0x38>)
 80041d2:	fba2 2303 	umull	r2, r3, r2, r3
 80041d6:	0a5b      	lsrs	r3, r3, #9
 80041d8:	687a      	ldr	r2, [r7, #4]
 80041da:	fb02 f303 	mul.w	r3, r2, r3
 80041de:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80041e0:	bf00      	nop
  }
  while (Delay --);
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	1e5a      	subs	r2, r3, #1
 80041e6:	60fa      	str	r2, [r7, #12]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d1f9      	bne.n	80041e0 <RCC_Delay+0x1c>
}
 80041ec:	bf00      	nop
 80041ee:	bf00      	nop
 80041f0:	3714      	adds	r7, #20
 80041f2:	46bd      	mov	sp, r7
 80041f4:	bc80      	pop	{r7}
 80041f6:	4770      	bx	lr
 80041f8:	20000008 	.word	0x20000008
 80041fc:	10624dd3 	.word	0x10624dd3

08004200 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b086      	sub	sp, #24
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004208:	2300      	movs	r3, #0
 800420a:	613b      	str	r3, [r7, #16]
 800420c:	2300      	movs	r3, #0
 800420e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f003 0301 	and.w	r3, r3, #1
 8004218:	2b00      	cmp	r3, #0
 800421a:	d07d      	beq.n	8004318 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 800421c:	2300      	movs	r3, #0
 800421e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004220:	4b4f      	ldr	r3, [pc, #316]	; (8004360 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004222:	69db      	ldr	r3, [r3, #28]
 8004224:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004228:	2b00      	cmp	r3, #0
 800422a:	d10d      	bne.n	8004248 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800422c:	4b4c      	ldr	r3, [pc, #304]	; (8004360 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800422e:	69db      	ldr	r3, [r3, #28]
 8004230:	4a4b      	ldr	r2, [pc, #300]	; (8004360 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004232:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004236:	61d3      	str	r3, [r2, #28]
 8004238:	4b49      	ldr	r3, [pc, #292]	; (8004360 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800423a:	69db      	ldr	r3, [r3, #28]
 800423c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004240:	60bb      	str	r3, [r7, #8]
 8004242:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004244:	2301      	movs	r3, #1
 8004246:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004248:	4b46      	ldr	r3, [pc, #280]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004250:	2b00      	cmp	r3, #0
 8004252:	d118      	bne.n	8004286 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004254:	4b43      	ldr	r3, [pc, #268]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	4a42      	ldr	r2, [pc, #264]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800425a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800425e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004260:	f7fd fe4c 	bl	8001efc <HAL_GetTick>
 8004264:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004266:	e008      	b.n	800427a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004268:	f7fd fe48 	bl	8001efc <HAL_GetTick>
 800426c:	4602      	mov	r2, r0
 800426e:	693b      	ldr	r3, [r7, #16]
 8004270:	1ad3      	subs	r3, r2, r3
 8004272:	2b64      	cmp	r3, #100	; 0x64
 8004274:	d901      	bls.n	800427a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004276:	2303      	movs	r3, #3
 8004278:	e06d      	b.n	8004356 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800427a:	4b3a      	ldr	r3, [pc, #232]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004282:	2b00      	cmp	r3, #0
 8004284:	d0f0      	beq.n	8004268 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004286:	4b36      	ldr	r3, [pc, #216]	; (8004360 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004288:	6a1b      	ldr	r3, [r3, #32]
 800428a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800428e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	2b00      	cmp	r3, #0
 8004294:	d02e      	beq.n	80042f4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	685b      	ldr	r3, [r3, #4]
 800429a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800429e:	68fa      	ldr	r2, [r7, #12]
 80042a0:	429a      	cmp	r2, r3
 80042a2:	d027      	beq.n	80042f4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80042a4:	4b2e      	ldr	r3, [pc, #184]	; (8004360 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80042a6:	6a1b      	ldr	r3, [r3, #32]
 80042a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042ac:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80042ae:	4b2e      	ldr	r3, [pc, #184]	; (8004368 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80042b0:	2201      	movs	r2, #1
 80042b2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80042b4:	4b2c      	ldr	r3, [pc, #176]	; (8004368 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80042b6:	2200      	movs	r2, #0
 80042b8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80042ba:	4a29      	ldr	r2, [pc, #164]	; (8004360 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	f003 0301 	and.w	r3, r3, #1
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d014      	beq.n	80042f4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042ca:	f7fd fe17 	bl	8001efc <HAL_GetTick>
 80042ce:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042d0:	e00a      	b.n	80042e8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042d2:	f7fd fe13 	bl	8001efc <HAL_GetTick>
 80042d6:	4602      	mov	r2, r0
 80042d8:	693b      	ldr	r3, [r7, #16]
 80042da:	1ad3      	subs	r3, r2, r3
 80042dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d901      	bls.n	80042e8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80042e4:	2303      	movs	r3, #3
 80042e6:	e036      	b.n	8004356 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042e8:	4b1d      	ldr	r3, [pc, #116]	; (8004360 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80042ea:	6a1b      	ldr	r3, [r3, #32]
 80042ec:	f003 0302 	and.w	r3, r3, #2
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d0ee      	beq.n	80042d2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80042f4:	4b1a      	ldr	r3, [pc, #104]	; (8004360 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80042f6:	6a1b      	ldr	r3, [r3, #32]
 80042f8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	685b      	ldr	r3, [r3, #4]
 8004300:	4917      	ldr	r1, [pc, #92]	; (8004360 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004302:	4313      	orrs	r3, r2
 8004304:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004306:	7dfb      	ldrb	r3, [r7, #23]
 8004308:	2b01      	cmp	r3, #1
 800430a:	d105      	bne.n	8004318 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800430c:	4b14      	ldr	r3, [pc, #80]	; (8004360 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800430e:	69db      	ldr	r3, [r3, #28]
 8004310:	4a13      	ldr	r2, [pc, #76]	; (8004360 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004312:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004316:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f003 0302 	and.w	r3, r3, #2
 8004320:	2b00      	cmp	r3, #0
 8004322:	d008      	beq.n	8004336 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004324:	4b0e      	ldr	r3, [pc, #56]	; (8004360 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004326:	685b      	ldr	r3, [r3, #4]
 8004328:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	689b      	ldr	r3, [r3, #8]
 8004330:	490b      	ldr	r1, [pc, #44]	; (8004360 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004332:	4313      	orrs	r3, r2
 8004334:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f003 0310 	and.w	r3, r3, #16
 800433e:	2b00      	cmp	r3, #0
 8004340:	d008      	beq.n	8004354 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004342:	4b07      	ldr	r3, [pc, #28]	; (8004360 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004344:	685b      	ldr	r3, [r3, #4]
 8004346:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	68db      	ldr	r3, [r3, #12]
 800434e:	4904      	ldr	r1, [pc, #16]	; (8004360 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004350:	4313      	orrs	r3, r2
 8004352:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004354:	2300      	movs	r3, #0
}
 8004356:	4618      	mov	r0, r3
 8004358:	3718      	adds	r7, #24
 800435a:	46bd      	mov	sp, r7
 800435c:	bd80      	pop	{r7, pc}
 800435e:	bf00      	nop
 8004360:	40021000 	.word	0x40021000
 8004364:	40007000 	.word	0x40007000
 8004368:	42420440 	.word	0x42420440

0800436c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800436c:	b590      	push	{r4, r7, lr}
 800436e:	b08d      	sub	sp, #52	; 0x34
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004374:	4b5a      	ldr	r3, [pc, #360]	; (80044e0 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8004376:	f107 040c 	add.w	r4, r7, #12
 800437a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800437c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004380:	f240 2301 	movw	r3, #513	; 0x201
 8004384:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8004386:	2300      	movs	r3, #0
 8004388:	627b      	str	r3, [r7, #36]	; 0x24
 800438a:	2300      	movs	r3, #0
 800438c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800438e:	2300      	movs	r3, #0
 8004390:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8004392:	2300      	movs	r3, #0
 8004394:	61fb      	str	r3, [r7, #28]
 8004396:	2300      	movs	r3, #0
 8004398:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2b10      	cmp	r3, #16
 800439e:	d00a      	beq.n	80043b6 <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2b10      	cmp	r3, #16
 80043a4:	f200 8091 	bhi.w	80044ca <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2b01      	cmp	r3, #1
 80043ac:	d04c      	beq.n	8004448 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	2b02      	cmp	r3, #2
 80043b2:	d07c      	beq.n	80044ae <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 80043b4:	e089      	b.n	80044ca <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
      temp_reg = RCC->CFGR;
 80043b6:	4b4b      	ldr	r3, [pc, #300]	; (80044e4 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80043b8:	685b      	ldr	r3, [r3, #4]
 80043ba:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80043bc:	4b49      	ldr	r3, [pc, #292]	; (80044e4 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	f000 8082 	beq.w	80044ce <HAL_RCCEx_GetPeriphCLKFreq+0x162>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80043ca:	69fb      	ldr	r3, [r7, #28]
 80043cc:	0c9b      	lsrs	r3, r3, #18
 80043ce:	f003 030f 	and.w	r3, r3, #15
 80043d2:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80043d6:	4413      	add	r3, r2
 80043d8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80043dc:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80043de:	69fb      	ldr	r3, [r7, #28]
 80043e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d018      	beq.n	800441a <HAL_RCCEx_GetPeriphCLKFreq+0xae>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80043e8:	4b3e      	ldr	r3, [pc, #248]	; (80044e4 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80043ea:	685b      	ldr	r3, [r3, #4]
 80043ec:	0c5b      	lsrs	r3, r3, #17
 80043ee:	f003 0301 	and.w	r3, r3, #1
 80043f2:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80043f6:	4413      	add	r3, r2
 80043f8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80043fc:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80043fe:	69fb      	ldr	r3, [r7, #28]
 8004400:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004404:	2b00      	cmp	r3, #0
 8004406:	d00d      	beq.n	8004424 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8004408:	4a37      	ldr	r2, [pc, #220]	; (80044e8 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 800440a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800440c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004410:	6a3b      	ldr	r3, [r7, #32]
 8004412:	fb02 f303 	mul.w	r3, r2, r3
 8004416:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004418:	e004      	b.n	8004424 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800441a:	6a3b      	ldr	r3, [r7, #32]
 800441c:	4a33      	ldr	r2, [pc, #204]	; (80044ec <HAL_RCCEx_GetPeriphCLKFreq+0x180>)
 800441e:	fb02 f303 	mul.w	r3, r2, r3
 8004422:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8004424:	4b2f      	ldr	r3, [pc, #188]	; (80044e4 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8004426:	685b      	ldr	r3, [r3, #4]
 8004428:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800442c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004430:	d102      	bne.n	8004438 <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
          frequency = pllclk;
 8004432:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004434:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8004436:	e04a      	b.n	80044ce <HAL_RCCEx_GetPeriphCLKFreq+0x162>
          frequency = (pllclk * 2) / 3;
 8004438:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800443a:	005b      	lsls	r3, r3, #1
 800443c:	4a2c      	ldr	r2, [pc, #176]	; (80044f0 <HAL_RCCEx_GetPeriphCLKFreq+0x184>)
 800443e:	fba2 2303 	umull	r2, r3, r2, r3
 8004442:	085b      	lsrs	r3, r3, #1
 8004444:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8004446:	e042      	b.n	80044ce <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      temp_reg = RCC->BDCR;
 8004448:	4b26      	ldr	r3, [pc, #152]	; (80044e4 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 800444a:	6a1b      	ldr	r3, [r3, #32]
 800444c:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 800444e:	69fb      	ldr	r3, [r7, #28]
 8004450:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004454:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004458:	d108      	bne.n	800446c <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 800445a:	69fb      	ldr	r3, [r7, #28]
 800445c:	f003 0302 	and.w	r3, r3, #2
 8004460:	2b00      	cmp	r3, #0
 8004462:	d003      	beq.n	800446c <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSE_VALUE;
 8004464:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004468:	62bb      	str	r3, [r7, #40]	; 0x28
 800446a:	e01f      	b.n	80044ac <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800446c:	69fb      	ldr	r3, [r7, #28]
 800446e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004472:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004476:	d109      	bne.n	800448c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 8004478:	4b1a      	ldr	r3, [pc, #104]	; (80044e4 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 800447a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800447c:	f003 0302 	and.w	r3, r3, #2
 8004480:	2b00      	cmp	r3, #0
 8004482:	d003      	beq.n	800448c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
        frequency = LSI_VALUE;
 8004484:	f649 4340 	movw	r3, #40000	; 0x9c40
 8004488:	62bb      	str	r3, [r7, #40]	; 0x28
 800448a:	e00f      	b.n	80044ac <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 800448c:	69fb      	ldr	r3, [r7, #28]
 800448e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004492:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004496:	d11c      	bne.n	80044d2 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 8004498:	4b12      	ldr	r3, [pc, #72]	; (80044e4 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d016      	beq.n	80044d2 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
        frequency = HSE_VALUE / 128U;
 80044a4:	f24f 4324 	movw	r3, #62500	; 0xf424
 80044a8:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80044aa:	e012      	b.n	80044d2 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 80044ac:	e011      	b.n	80044d2 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80044ae:	f7ff fe75 	bl	800419c <HAL_RCC_GetPCLK2Freq>
 80044b2:	4602      	mov	r2, r0
 80044b4:	4b0b      	ldr	r3, [pc, #44]	; (80044e4 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80044b6:	685b      	ldr	r3, [r3, #4]
 80044b8:	0b9b      	lsrs	r3, r3, #14
 80044ba:	f003 0303 	and.w	r3, r3, #3
 80044be:	3301      	adds	r3, #1
 80044c0:	005b      	lsls	r3, r3, #1
 80044c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80044c6:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80044c8:	e004      	b.n	80044d4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 80044ca:	bf00      	nop
 80044cc:	e002      	b.n	80044d4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 80044ce:	bf00      	nop
 80044d0:	e000      	b.n	80044d4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 80044d2:	bf00      	nop
    }
  }
  return (frequency);
 80044d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 80044d6:	4618      	mov	r0, r3
 80044d8:	3734      	adds	r7, #52	; 0x34
 80044da:	46bd      	mov	sp, r7
 80044dc:	bd90      	pop	{r4, r7, pc}
 80044de:	bf00      	nop
 80044e0:	08008dac 	.word	0x08008dac
 80044e4:	40021000 	.word	0x40021000
 80044e8:	007a1200 	.word	0x007a1200
 80044ec:	003d0900 	.word	0x003d0900
 80044f0:	aaaaaaab 	.word	0xaaaaaaab

080044f4 <__errno>:
 80044f4:	4b01      	ldr	r3, [pc, #4]	; (80044fc <__errno+0x8>)
 80044f6:	6818      	ldr	r0, [r3, #0]
 80044f8:	4770      	bx	lr
 80044fa:	bf00      	nop
 80044fc:	20000014 	.word	0x20000014

08004500 <__libc_init_array>:
 8004500:	b570      	push	{r4, r5, r6, lr}
 8004502:	2600      	movs	r6, #0
 8004504:	4d0c      	ldr	r5, [pc, #48]	; (8004538 <__libc_init_array+0x38>)
 8004506:	4c0d      	ldr	r4, [pc, #52]	; (800453c <__libc_init_array+0x3c>)
 8004508:	1b64      	subs	r4, r4, r5
 800450a:	10a4      	asrs	r4, r4, #2
 800450c:	42a6      	cmp	r6, r4
 800450e:	d109      	bne.n	8004524 <__libc_init_array+0x24>
 8004510:	f004 fc28 	bl	8008d64 <_init>
 8004514:	2600      	movs	r6, #0
 8004516:	4d0a      	ldr	r5, [pc, #40]	; (8004540 <__libc_init_array+0x40>)
 8004518:	4c0a      	ldr	r4, [pc, #40]	; (8004544 <__libc_init_array+0x44>)
 800451a:	1b64      	subs	r4, r4, r5
 800451c:	10a4      	asrs	r4, r4, #2
 800451e:	42a6      	cmp	r6, r4
 8004520:	d105      	bne.n	800452e <__libc_init_array+0x2e>
 8004522:	bd70      	pop	{r4, r5, r6, pc}
 8004524:	f855 3b04 	ldr.w	r3, [r5], #4
 8004528:	4798      	blx	r3
 800452a:	3601      	adds	r6, #1
 800452c:	e7ee      	b.n	800450c <__libc_init_array+0xc>
 800452e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004532:	4798      	blx	r3
 8004534:	3601      	adds	r6, #1
 8004536:	e7f2      	b.n	800451e <__libc_init_array+0x1e>
 8004538:	08009fe4 	.word	0x08009fe4
 800453c:	08009fe4 	.word	0x08009fe4
 8004540:	08009fe4 	.word	0x08009fe4
 8004544:	08009fe8 	.word	0x08009fe8

08004548 <memset>:
 8004548:	4603      	mov	r3, r0
 800454a:	4402      	add	r2, r0
 800454c:	4293      	cmp	r3, r2
 800454e:	d100      	bne.n	8004552 <memset+0xa>
 8004550:	4770      	bx	lr
 8004552:	f803 1b01 	strb.w	r1, [r3], #1
 8004556:	e7f9      	b.n	800454c <memset+0x4>

08004558 <__cvt>:
 8004558:	2b00      	cmp	r3, #0
 800455a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800455e:	461f      	mov	r7, r3
 8004560:	bfbb      	ittet	lt
 8004562:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8004566:	461f      	movlt	r7, r3
 8004568:	2300      	movge	r3, #0
 800456a:	232d      	movlt	r3, #45	; 0x2d
 800456c:	b088      	sub	sp, #32
 800456e:	4614      	mov	r4, r2
 8004570:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004572:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8004574:	7013      	strb	r3, [r2, #0]
 8004576:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004578:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 800457c:	f023 0820 	bic.w	r8, r3, #32
 8004580:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004584:	d005      	beq.n	8004592 <__cvt+0x3a>
 8004586:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800458a:	d100      	bne.n	800458e <__cvt+0x36>
 800458c:	3501      	adds	r5, #1
 800458e:	2302      	movs	r3, #2
 8004590:	e000      	b.n	8004594 <__cvt+0x3c>
 8004592:	2303      	movs	r3, #3
 8004594:	aa07      	add	r2, sp, #28
 8004596:	9204      	str	r2, [sp, #16]
 8004598:	aa06      	add	r2, sp, #24
 800459a:	e9cd a202 	strd	sl, r2, [sp, #8]
 800459e:	e9cd 3500 	strd	r3, r5, [sp]
 80045a2:	4622      	mov	r2, r4
 80045a4:	463b      	mov	r3, r7
 80045a6:	f001 fd9f 	bl	80060e8 <_dtoa_r>
 80045aa:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80045ae:	4606      	mov	r6, r0
 80045b0:	d102      	bne.n	80045b8 <__cvt+0x60>
 80045b2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80045b4:	07db      	lsls	r3, r3, #31
 80045b6:	d522      	bpl.n	80045fe <__cvt+0xa6>
 80045b8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80045bc:	eb06 0905 	add.w	r9, r6, r5
 80045c0:	d110      	bne.n	80045e4 <__cvt+0x8c>
 80045c2:	7833      	ldrb	r3, [r6, #0]
 80045c4:	2b30      	cmp	r3, #48	; 0x30
 80045c6:	d10a      	bne.n	80045de <__cvt+0x86>
 80045c8:	2200      	movs	r2, #0
 80045ca:	2300      	movs	r3, #0
 80045cc:	4620      	mov	r0, r4
 80045ce:	4639      	mov	r1, r7
 80045d0:	f7fc fa9e 	bl	8000b10 <__aeabi_dcmpeq>
 80045d4:	b918      	cbnz	r0, 80045de <__cvt+0x86>
 80045d6:	f1c5 0501 	rsb	r5, r5, #1
 80045da:	f8ca 5000 	str.w	r5, [sl]
 80045de:	f8da 3000 	ldr.w	r3, [sl]
 80045e2:	4499      	add	r9, r3
 80045e4:	2200      	movs	r2, #0
 80045e6:	2300      	movs	r3, #0
 80045e8:	4620      	mov	r0, r4
 80045ea:	4639      	mov	r1, r7
 80045ec:	f7fc fa90 	bl	8000b10 <__aeabi_dcmpeq>
 80045f0:	b108      	cbz	r0, 80045f6 <__cvt+0x9e>
 80045f2:	f8cd 901c 	str.w	r9, [sp, #28]
 80045f6:	2230      	movs	r2, #48	; 0x30
 80045f8:	9b07      	ldr	r3, [sp, #28]
 80045fa:	454b      	cmp	r3, r9
 80045fc:	d307      	bcc.n	800460e <__cvt+0xb6>
 80045fe:	4630      	mov	r0, r6
 8004600:	9b07      	ldr	r3, [sp, #28]
 8004602:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8004604:	1b9b      	subs	r3, r3, r6
 8004606:	6013      	str	r3, [r2, #0]
 8004608:	b008      	add	sp, #32
 800460a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800460e:	1c59      	adds	r1, r3, #1
 8004610:	9107      	str	r1, [sp, #28]
 8004612:	701a      	strb	r2, [r3, #0]
 8004614:	e7f0      	b.n	80045f8 <__cvt+0xa0>

08004616 <__exponent>:
 8004616:	4603      	mov	r3, r0
 8004618:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800461a:	2900      	cmp	r1, #0
 800461c:	f803 2b02 	strb.w	r2, [r3], #2
 8004620:	bfb6      	itet	lt
 8004622:	222d      	movlt	r2, #45	; 0x2d
 8004624:	222b      	movge	r2, #43	; 0x2b
 8004626:	4249      	neglt	r1, r1
 8004628:	2909      	cmp	r1, #9
 800462a:	7042      	strb	r2, [r0, #1]
 800462c:	dd2b      	ble.n	8004686 <__exponent+0x70>
 800462e:	f10d 0407 	add.w	r4, sp, #7
 8004632:	46a4      	mov	ip, r4
 8004634:	270a      	movs	r7, #10
 8004636:	fb91 f6f7 	sdiv	r6, r1, r7
 800463a:	460a      	mov	r2, r1
 800463c:	46a6      	mov	lr, r4
 800463e:	fb07 1516 	mls	r5, r7, r6, r1
 8004642:	2a63      	cmp	r2, #99	; 0x63
 8004644:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8004648:	4631      	mov	r1, r6
 800464a:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800464e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8004652:	dcf0      	bgt.n	8004636 <__exponent+0x20>
 8004654:	3130      	adds	r1, #48	; 0x30
 8004656:	f1ae 0502 	sub.w	r5, lr, #2
 800465a:	f804 1c01 	strb.w	r1, [r4, #-1]
 800465e:	4629      	mov	r1, r5
 8004660:	1c44      	adds	r4, r0, #1
 8004662:	4561      	cmp	r1, ip
 8004664:	d30a      	bcc.n	800467c <__exponent+0x66>
 8004666:	f10d 0209 	add.w	r2, sp, #9
 800466a:	eba2 020e 	sub.w	r2, r2, lr
 800466e:	4565      	cmp	r5, ip
 8004670:	bf88      	it	hi
 8004672:	2200      	movhi	r2, #0
 8004674:	4413      	add	r3, r2
 8004676:	1a18      	subs	r0, r3, r0
 8004678:	b003      	add	sp, #12
 800467a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800467c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004680:	f804 2f01 	strb.w	r2, [r4, #1]!
 8004684:	e7ed      	b.n	8004662 <__exponent+0x4c>
 8004686:	2330      	movs	r3, #48	; 0x30
 8004688:	3130      	adds	r1, #48	; 0x30
 800468a:	7083      	strb	r3, [r0, #2]
 800468c:	70c1      	strb	r1, [r0, #3]
 800468e:	1d03      	adds	r3, r0, #4
 8004690:	e7f1      	b.n	8004676 <__exponent+0x60>
	...

08004694 <_printf_float>:
 8004694:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004698:	b091      	sub	sp, #68	; 0x44
 800469a:	460c      	mov	r4, r1
 800469c:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80046a0:	4616      	mov	r6, r2
 80046a2:	461f      	mov	r7, r3
 80046a4:	4605      	mov	r5, r0
 80046a6:	f002 fe73 	bl	8007390 <_localeconv_r>
 80046aa:	6803      	ldr	r3, [r0, #0]
 80046ac:	4618      	mov	r0, r3
 80046ae:	9309      	str	r3, [sp, #36]	; 0x24
 80046b0:	f7fb fd4e 	bl	8000150 <strlen>
 80046b4:	2300      	movs	r3, #0
 80046b6:	930e      	str	r3, [sp, #56]	; 0x38
 80046b8:	f8d8 3000 	ldr.w	r3, [r8]
 80046bc:	900a      	str	r0, [sp, #40]	; 0x28
 80046be:	3307      	adds	r3, #7
 80046c0:	f023 0307 	bic.w	r3, r3, #7
 80046c4:	f103 0208 	add.w	r2, r3, #8
 80046c8:	f894 9018 	ldrb.w	r9, [r4, #24]
 80046cc:	f8d4 b000 	ldr.w	fp, [r4]
 80046d0:	f8c8 2000 	str.w	r2, [r8]
 80046d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046d8:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80046dc:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 80046e0:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 80046e4:	930b      	str	r3, [sp, #44]	; 0x2c
 80046e6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80046ea:	4640      	mov	r0, r8
 80046ec:	4b9c      	ldr	r3, [pc, #624]	; (8004960 <_printf_float+0x2cc>)
 80046ee:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80046f0:	f7fc fa40 	bl	8000b74 <__aeabi_dcmpun>
 80046f4:	bb70      	cbnz	r0, 8004754 <_printf_float+0xc0>
 80046f6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80046fa:	4640      	mov	r0, r8
 80046fc:	4b98      	ldr	r3, [pc, #608]	; (8004960 <_printf_float+0x2cc>)
 80046fe:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004700:	f7fc fa1a 	bl	8000b38 <__aeabi_dcmple>
 8004704:	bb30      	cbnz	r0, 8004754 <_printf_float+0xc0>
 8004706:	2200      	movs	r2, #0
 8004708:	2300      	movs	r3, #0
 800470a:	4640      	mov	r0, r8
 800470c:	4651      	mov	r1, sl
 800470e:	f7fc fa09 	bl	8000b24 <__aeabi_dcmplt>
 8004712:	b110      	cbz	r0, 800471a <_printf_float+0x86>
 8004714:	232d      	movs	r3, #45	; 0x2d
 8004716:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800471a:	4b92      	ldr	r3, [pc, #584]	; (8004964 <_printf_float+0x2d0>)
 800471c:	4892      	ldr	r0, [pc, #584]	; (8004968 <_printf_float+0x2d4>)
 800471e:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8004722:	bf94      	ite	ls
 8004724:	4698      	movls	r8, r3
 8004726:	4680      	movhi	r8, r0
 8004728:	2303      	movs	r3, #3
 800472a:	f04f 0a00 	mov.w	sl, #0
 800472e:	6123      	str	r3, [r4, #16]
 8004730:	f02b 0304 	bic.w	r3, fp, #4
 8004734:	6023      	str	r3, [r4, #0]
 8004736:	4633      	mov	r3, r6
 8004738:	4621      	mov	r1, r4
 800473a:	4628      	mov	r0, r5
 800473c:	9700      	str	r7, [sp, #0]
 800473e:	aa0f      	add	r2, sp, #60	; 0x3c
 8004740:	f000 f9d4 	bl	8004aec <_printf_common>
 8004744:	3001      	adds	r0, #1
 8004746:	f040 8090 	bne.w	800486a <_printf_float+0x1d6>
 800474a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800474e:	b011      	add	sp, #68	; 0x44
 8004750:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004754:	4642      	mov	r2, r8
 8004756:	4653      	mov	r3, sl
 8004758:	4640      	mov	r0, r8
 800475a:	4651      	mov	r1, sl
 800475c:	f7fc fa0a 	bl	8000b74 <__aeabi_dcmpun>
 8004760:	b148      	cbz	r0, 8004776 <_printf_float+0xe2>
 8004762:	f1ba 0f00 	cmp.w	sl, #0
 8004766:	bfb8      	it	lt
 8004768:	232d      	movlt	r3, #45	; 0x2d
 800476a:	4880      	ldr	r0, [pc, #512]	; (800496c <_printf_float+0x2d8>)
 800476c:	bfb8      	it	lt
 800476e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004772:	4b7f      	ldr	r3, [pc, #508]	; (8004970 <_printf_float+0x2dc>)
 8004774:	e7d3      	b.n	800471e <_printf_float+0x8a>
 8004776:	6863      	ldr	r3, [r4, #4]
 8004778:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800477c:	1c5a      	adds	r2, r3, #1
 800477e:	d142      	bne.n	8004806 <_printf_float+0x172>
 8004780:	2306      	movs	r3, #6
 8004782:	6063      	str	r3, [r4, #4]
 8004784:	2200      	movs	r2, #0
 8004786:	9206      	str	r2, [sp, #24]
 8004788:	aa0e      	add	r2, sp, #56	; 0x38
 800478a:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800478e:	aa0d      	add	r2, sp, #52	; 0x34
 8004790:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8004794:	9203      	str	r2, [sp, #12]
 8004796:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800479a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800479e:	6023      	str	r3, [r4, #0]
 80047a0:	6863      	ldr	r3, [r4, #4]
 80047a2:	4642      	mov	r2, r8
 80047a4:	9300      	str	r3, [sp, #0]
 80047a6:	4628      	mov	r0, r5
 80047a8:	4653      	mov	r3, sl
 80047aa:	910b      	str	r1, [sp, #44]	; 0x2c
 80047ac:	f7ff fed4 	bl	8004558 <__cvt>
 80047b0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80047b2:	4680      	mov	r8, r0
 80047b4:	2947      	cmp	r1, #71	; 0x47
 80047b6:	990d      	ldr	r1, [sp, #52]	; 0x34
 80047b8:	d108      	bne.n	80047cc <_printf_float+0x138>
 80047ba:	1cc8      	adds	r0, r1, #3
 80047bc:	db02      	blt.n	80047c4 <_printf_float+0x130>
 80047be:	6863      	ldr	r3, [r4, #4]
 80047c0:	4299      	cmp	r1, r3
 80047c2:	dd40      	ble.n	8004846 <_printf_float+0x1b2>
 80047c4:	f1a9 0902 	sub.w	r9, r9, #2
 80047c8:	fa5f f989 	uxtb.w	r9, r9
 80047cc:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80047d0:	d81f      	bhi.n	8004812 <_printf_float+0x17e>
 80047d2:	464a      	mov	r2, r9
 80047d4:	3901      	subs	r1, #1
 80047d6:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80047da:	910d      	str	r1, [sp, #52]	; 0x34
 80047dc:	f7ff ff1b 	bl	8004616 <__exponent>
 80047e0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80047e2:	4682      	mov	sl, r0
 80047e4:	1813      	adds	r3, r2, r0
 80047e6:	2a01      	cmp	r2, #1
 80047e8:	6123      	str	r3, [r4, #16]
 80047ea:	dc02      	bgt.n	80047f2 <_printf_float+0x15e>
 80047ec:	6822      	ldr	r2, [r4, #0]
 80047ee:	07d2      	lsls	r2, r2, #31
 80047f0:	d501      	bpl.n	80047f6 <_printf_float+0x162>
 80047f2:	3301      	adds	r3, #1
 80047f4:	6123      	str	r3, [r4, #16]
 80047f6:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d09b      	beq.n	8004736 <_printf_float+0xa2>
 80047fe:	232d      	movs	r3, #45	; 0x2d
 8004800:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004804:	e797      	b.n	8004736 <_printf_float+0xa2>
 8004806:	2947      	cmp	r1, #71	; 0x47
 8004808:	d1bc      	bne.n	8004784 <_printf_float+0xf0>
 800480a:	2b00      	cmp	r3, #0
 800480c:	d1ba      	bne.n	8004784 <_printf_float+0xf0>
 800480e:	2301      	movs	r3, #1
 8004810:	e7b7      	b.n	8004782 <_printf_float+0xee>
 8004812:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8004816:	d118      	bne.n	800484a <_printf_float+0x1b6>
 8004818:	2900      	cmp	r1, #0
 800481a:	6863      	ldr	r3, [r4, #4]
 800481c:	dd0b      	ble.n	8004836 <_printf_float+0x1a2>
 800481e:	6121      	str	r1, [r4, #16]
 8004820:	b913      	cbnz	r3, 8004828 <_printf_float+0x194>
 8004822:	6822      	ldr	r2, [r4, #0]
 8004824:	07d0      	lsls	r0, r2, #31
 8004826:	d502      	bpl.n	800482e <_printf_float+0x19a>
 8004828:	3301      	adds	r3, #1
 800482a:	440b      	add	r3, r1
 800482c:	6123      	str	r3, [r4, #16]
 800482e:	f04f 0a00 	mov.w	sl, #0
 8004832:	65a1      	str	r1, [r4, #88]	; 0x58
 8004834:	e7df      	b.n	80047f6 <_printf_float+0x162>
 8004836:	b913      	cbnz	r3, 800483e <_printf_float+0x1aa>
 8004838:	6822      	ldr	r2, [r4, #0]
 800483a:	07d2      	lsls	r2, r2, #31
 800483c:	d501      	bpl.n	8004842 <_printf_float+0x1ae>
 800483e:	3302      	adds	r3, #2
 8004840:	e7f4      	b.n	800482c <_printf_float+0x198>
 8004842:	2301      	movs	r3, #1
 8004844:	e7f2      	b.n	800482c <_printf_float+0x198>
 8004846:	f04f 0967 	mov.w	r9, #103	; 0x67
 800484a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800484c:	4299      	cmp	r1, r3
 800484e:	db05      	blt.n	800485c <_printf_float+0x1c8>
 8004850:	6823      	ldr	r3, [r4, #0]
 8004852:	6121      	str	r1, [r4, #16]
 8004854:	07d8      	lsls	r0, r3, #31
 8004856:	d5ea      	bpl.n	800482e <_printf_float+0x19a>
 8004858:	1c4b      	adds	r3, r1, #1
 800485a:	e7e7      	b.n	800482c <_printf_float+0x198>
 800485c:	2900      	cmp	r1, #0
 800485e:	bfcc      	ite	gt
 8004860:	2201      	movgt	r2, #1
 8004862:	f1c1 0202 	rsble	r2, r1, #2
 8004866:	4413      	add	r3, r2
 8004868:	e7e0      	b.n	800482c <_printf_float+0x198>
 800486a:	6823      	ldr	r3, [r4, #0]
 800486c:	055a      	lsls	r2, r3, #21
 800486e:	d407      	bmi.n	8004880 <_printf_float+0x1ec>
 8004870:	6923      	ldr	r3, [r4, #16]
 8004872:	4642      	mov	r2, r8
 8004874:	4631      	mov	r1, r6
 8004876:	4628      	mov	r0, r5
 8004878:	47b8      	blx	r7
 800487a:	3001      	adds	r0, #1
 800487c:	d12b      	bne.n	80048d6 <_printf_float+0x242>
 800487e:	e764      	b.n	800474a <_printf_float+0xb6>
 8004880:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004884:	f240 80dd 	bls.w	8004a42 <_printf_float+0x3ae>
 8004888:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800488c:	2200      	movs	r2, #0
 800488e:	2300      	movs	r3, #0
 8004890:	f7fc f93e 	bl	8000b10 <__aeabi_dcmpeq>
 8004894:	2800      	cmp	r0, #0
 8004896:	d033      	beq.n	8004900 <_printf_float+0x26c>
 8004898:	2301      	movs	r3, #1
 800489a:	4631      	mov	r1, r6
 800489c:	4628      	mov	r0, r5
 800489e:	4a35      	ldr	r2, [pc, #212]	; (8004974 <_printf_float+0x2e0>)
 80048a0:	47b8      	blx	r7
 80048a2:	3001      	adds	r0, #1
 80048a4:	f43f af51 	beq.w	800474a <_printf_float+0xb6>
 80048a8:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80048ac:	429a      	cmp	r2, r3
 80048ae:	db02      	blt.n	80048b6 <_printf_float+0x222>
 80048b0:	6823      	ldr	r3, [r4, #0]
 80048b2:	07d8      	lsls	r0, r3, #31
 80048b4:	d50f      	bpl.n	80048d6 <_printf_float+0x242>
 80048b6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80048ba:	4631      	mov	r1, r6
 80048bc:	4628      	mov	r0, r5
 80048be:	47b8      	blx	r7
 80048c0:	3001      	adds	r0, #1
 80048c2:	f43f af42 	beq.w	800474a <_printf_float+0xb6>
 80048c6:	f04f 0800 	mov.w	r8, #0
 80048ca:	f104 091a 	add.w	r9, r4, #26
 80048ce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80048d0:	3b01      	subs	r3, #1
 80048d2:	4543      	cmp	r3, r8
 80048d4:	dc09      	bgt.n	80048ea <_printf_float+0x256>
 80048d6:	6823      	ldr	r3, [r4, #0]
 80048d8:	079b      	lsls	r3, r3, #30
 80048da:	f100 8102 	bmi.w	8004ae2 <_printf_float+0x44e>
 80048de:	68e0      	ldr	r0, [r4, #12]
 80048e0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80048e2:	4298      	cmp	r0, r3
 80048e4:	bfb8      	it	lt
 80048e6:	4618      	movlt	r0, r3
 80048e8:	e731      	b.n	800474e <_printf_float+0xba>
 80048ea:	2301      	movs	r3, #1
 80048ec:	464a      	mov	r2, r9
 80048ee:	4631      	mov	r1, r6
 80048f0:	4628      	mov	r0, r5
 80048f2:	47b8      	blx	r7
 80048f4:	3001      	adds	r0, #1
 80048f6:	f43f af28 	beq.w	800474a <_printf_float+0xb6>
 80048fa:	f108 0801 	add.w	r8, r8, #1
 80048fe:	e7e6      	b.n	80048ce <_printf_float+0x23a>
 8004900:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004902:	2b00      	cmp	r3, #0
 8004904:	dc38      	bgt.n	8004978 <_printf_float+0x2e4>
 8004906:	2301      	movs	r3, #1
 8004908:	4631      	mov	r1, r6
 800490a:	4628      	mov	r0, r5
 800490c:	4a19      	ldr	r2, [pc, #100]	; (8004974 <_printf_float+0x2e0>)
 800490e:	47b8      	blx	r7
 8004910:	3001      	adds	r0, #1
 8004912:	f43f af1a 	beq.w	800474a <_printf_float+0xb6>
 8004916:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800491a:	4313      	orrs	r3, r2
 800491c:	d102      	bne.n	8004924 <_printf_float+0x290>
 800491e:	6823      	ldr	r3, [r4, #0]
 8004920:	07d9      	lsls	r1, r3, #31
 8004922:	d5d8      	bpl.n	80048d6 <_printf_float+0x242>
 8004924:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004928:	4631      	mov	r1, r6
 800492a:	4628      	mov	r0, r5
 800492c:	47b8      	blx	r7
 800492e:	3001      	adds	r0, #1
 8004930:	f43f af0b 	beq.w	800474a <_printf_float+0xb6>
 8004934:	f04f 0900 	mov.w	r9, #0
 8004938:	f104 0a1a 	add.w	sl, r4, #26
 800493c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800493e:	425b      	negs	r3, r3
 8004940:	454b      	cmp	r3, r9
 8004942:	dc01      	bgt.n	8004948 <_printf_float+0x2b4>
 8004944:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004946:	e794      	b.n	8004872 <_printf_float+0x1de>
 8004948:	2301      	movs	r3, #1
 800494a:	4652      	mov	r2, sl
 800494c:	4631      	mov	r1, r6
 800494e:	4628      	mov	r0, r5
 8004950:	47b8      	blx	r7
 8004952:	3001      	adds	r0, #1
 8004954:	f43f aef9 	beq.w	800474a <_printf_float+0xb6>
 8004958:	f109 0901 	add.w	r9, r9, #1
 800495c:	e7ee      	b.n	800493c <_printf_float+0x2a8>
 800495e:	bf00      	nop
 8004960:	7fefffff 	.word	0x7fefffff
 8004964:	08009b34 	.word	0x08009b34
 8004968:	08009b38 	.word	0x08009b38
 800496c:	08009b40 	.word	0x08009b40
 8004970:	08009b3c 	.word	0x08009b3c
 8004974:	08009b44 	.word	0x08009b44
 8004978:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800497a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800497c:	429a      	cmp	r2, r3
 800497e:	bfa8      	it	ge
 8004980:	461a      	movge	r2, r3
 8004982:	2a00      	cmp	r2, #0
 8004984:	4691      	mov	r9, r2
 8004986:	dc37      	bgt.n	80049f8 <_printf_float+0x364>
 8004988:	f04f 0b00 	mov.w	fp, #0
 800498c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004990:	f104 021a 	add.w	r2, r4, #26
 8004994:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8004998:	ebaa 0309 	sub.w	r3, sl, r9
 800499c:	455b      	cmp	r3, fp
 800499e:	dc33      	bgt.n	8004a08 <_printf_float+0x374>
 80049a0:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80049a4:	429a      	cmp	r2, r3
 80049a6:	db3b      	blt.n	8004a20 <_printf_float+0x38c>
 80049a8:	6823      	ldr	r3, [r4, #0]
 80049aa:	07da      	lsls	r2, r3, #31
 80049ac:	d438      	bmi.n	8004a20 <_printf_float+0x38c>
 80049ae:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80049b0:	990d      	ldr	r1, [sp, #52]	; 0x34
 80049b2:	eba2 030a 	sub.w	r3, r2, sl
 80049b6:	eba2 0901 	sub.w	r9, r2, r1
 80049ba:	4599      	cmp	r9, r3
 80049bc:	bfa8      	it	ge
 80049be:	4699      	movge	r9, r3
 80049c0:	f1b9 0f00 	cmp.w	r9, #0
 80049c4:	dc34      	bgt.n	8004a30 <_printf_float+0x39c>
 80049c6:	f04f 0800 	mov.w	r8, #0
 80049ca:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80049ce:	f104 0a1a 	add.w	sl, r4, #26
 80049d2:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80049d6:	1a9b      	subs	r3, r3, r2
 80049d8:	eba3 0309 	sub.w	r3, r3, r9
 80049dc:	4543      	cmp	r3, r8
 80049de:	f77f af7a 	ble.w	80048d6 <_printf_float+0x242>
 80049e2:	2301      	movs	r3, #1
 80049e4:	4652      	mov	r2, sl
 80049e6:	4631      	mov	r1, r6
 80049e8:	4628      	mov	r0, r5
 80049ea:	47b8      	blx	r7
 80049ec:	3001      	adds	r0, #1
 80049ee:	f43f aeac 	beq.w	800474a <_printf_float+0xb6>
 80049f2:	f108 0801 	add.w	r8, r8, #1
 80049f6:	e7ec      	b.n	80049d2 <_printf_float+0x33e>
 80049f8:	4613      	mov	r3, r2
 80049fa:	4631      	mov	r1, r6
 80049fc:	4642      	mov	r2, r8
 80049fe:	4628      	mov	r0, r5
 8004a00:	47b8      	blx	r7
 8004a02:	3001      	adds	r0, #1
 8004a04:	d1c0      	bne.n	8004988 <_printf_float+0x2f4>
 8004a06:	e6a0      	b.n	800474a <_printf_float+0xb6>
 8004a08:	2301      	movs	r3, #1
 8004a0a:	4631      	mov	r1, r6
 8004a0c:	4628      	mov	r0, r5
 8004a0e:	920b      	str	r2, [sp, #44]	; 0x2c
 8004a10:	47b8      	blx	r7
 8004a12:	3001      	adds	r0, #1
 8004a14:	f43f ae99 	beq.w	800474a <_printf_float+0xb6>
 8004a18:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004a1a:	f10b 0b01 	add.w	fp, fp, #1
 8004a1e:	e7b9      	b.n	8004994 <_printf_float+0x300>
 8004a20:	4631      	mov	r1, r6
 8004a22:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004a26:	4628      	mov	r0, r5
 8004a28:	47b8      	blx	r7
 8004a2a:	3001      	adds	r0, #1
 8004a2c:	d1bf      	bne.n	80049ae <_printf_float+0x31a>
 8004a2e:	e68c      	b.n	800474a <_printf_float+0xb6>
 8004a30:	464b      	mov	r3, r9
 8004a32:	4631      	mov	r1, r6
 8004a34:	4628      	mov	r0, r5
 8004a36:	eb08 020a 	add.w	r2, r8, sl
 8004a3a:	47b8      	blx	r7
 8004a3c:	3001      	adds	r0, #1
 8004a3e:	d1c2      	bne.n	80049c6 <_printf_float+0x332>
 8004a40:	e683      	b.n	800474a <_printf_float+0xb6>
 8004a42:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004a44:	2a01      	cmp	r2, #1
 8004a46:	dc01      	bgt.n	8004a4c <_printf_float+0x3b8>
 8004a48:	07db      	lsls	r3, r3, #31
 8004a4a:	d537      	bpl.n	8004abc <_printf_float+0x428>
 8004a4c:	2301      	movs	r3, #1
 8004a4e:	4642      	mov	r2, r8
 8004a50:	4631      	mov	r1, r6
 8004a52:	4628      	mov	r0, r5
 8004a54:	47b8      	blx	r7
 8004a56:	3001      	adds	r0, #1
 8004a58:	f43f ae77 	beq.w	800474a <_printf_float+0xb6>
 8004a5c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004a60:	4631      	mov	r1, r6
 8004a62:	4628      	mov	r0, r5
 8004a64:	47b8      	blx	r7
 8004a66:	3001      	adds	r0, #1
 8004a68:	f43f ae6f 	beq.w	800474a <_printf_float+0xb6>
 8004a6c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004a70:	2200      	movs	r2, #0
 8004a72:	2300      	movs	r3, #0
 8004a74:	f7fc f84c 	bl	8000b10 <__aeabi_dcmpeq>
 8004a78:	b9d8      	cbnz	r0, 8004ab2 <_printf_float+0x41e>
 8004a7a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004a7c:	f108 0201 	add.w	r2, r8, #1
 8004a80:	3b01      	subs	r3, #1
 8004a82:	4631      	mov	r1, r6
 8004a84:	4628      	mov	r0, r5
 8004a86:	47b8      	blx	r7
 8004a88:	3001      	adds	r0, #1
 8004a8a:	d10e      	bne.n	8004aaa <_printf_float+0x416>
 8004a8c:	e65d      	b.n	800474a <_printf_float+0xb6>
 8004a8e:	2301      	movs	r3, #1
 8004a90:	464a      	mov	r2, r9
 8004a92:	4631      	mov	r1, r6
 8004a94:	4628      	mov	r0, r5
 8004a96:	47b8      	blx	r7
 8004a98:	3001      	adds	r0, #1
 8004a9a:	f43f ae56 	beq.w	800474a <_printf_float+0xb6>
 8004a9e:	f108 0801 	add.w	r8, r8, #1
 8004aa2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004aa4:	3b01      	subs	r3, #1
 8004aa6:	4543      	cmp	r3, r8
 8004aa8:	dcf1      	bgt.n	8004a8e <_printf_float+0x3fa>
 8004aaa:	4653      	mov	r3, sl
 8004aac:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004ab0:	e6e0      	b.n	8004874 <_printf_float+0x1e0>
 8004ab2:	f04f 0800 	mov.w	r8, #0
 8004ab6:	f104 091a 	add.w	r9, r4, #26
 8004aba:	e7f2      	b.n	8004aa2 <_printf_float+0x40e>
 8004abc:	2301      	movs	r3, #1
 8004abe:	4642      	mov	r2, r8
 8004ac0:	e7df      	b.n	8004a82 <_printf_float+0x3ee>
 8004ac2:	2301      	movs	r3, #1
 8004ac4:	464a      	mov	r2, r9
 8004ac6:	4631      	mov	r1, r6
 8004ac8:	4628      	mov	r0, r5
 8004aca:	47b8      	blx	r7
 8004acc:	3001      	adds	r0, #1
 8004ace:	f43f ae3c 	beq.w	800474a <_printf_float+0xb6>
 8004ad2:	f108 0801 	add.w	r8, r8, #1
 8004ad6:	68e3      	ldr	r3, [r4, #12]
 8004ad8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8004ada:	1a5b      	subs	r3, r3, r1
 8004adc:	4543      	cmp	r3, r8
 8004ade:	dcf0      	bgt.n	8004ac2 <_printf_float+0x42e>
 8004ae0:	e6fd      	b.n	80048de <_printf_float+0x24a>
 8004ae2:	f04f 0800 	mov.w	r8, #0
 8004ae6:	f104 0919 	add.w	r9, r4, #25
 8004aea:	e7f4      	b.n	8004ad6 <_printf_float+0x442>

08004aec <_printf_common>:
 8004aec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004af0:	4616      	mov	r6, r2
 8004af2:	4699      	mov	r9, r3
 8004af4:	688a      	ldr	r2, [r1, #8]
 8004af6:	690b      	ldr	r3, [r1, #16]
 8004af8:	4607      	mov	r7, r0
 8004afa:	4293      	cmp	r3, r2
 8004afc:	bfb8      	it	lt
 8004afe:	4613      	movlt	r3, r2
 8004b00:	6033      	str	r3, [r6, #0]
 8004b02:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004b06:	460c      	mov	r4, r1
 8004b08:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004b0c:	b10a      	cbz	r2, 8004b12 <_printf_common+0x26>
 8004b0e:	3301      	adds	r3, #1
 8004b10:	6033      	str	r3, [r6, #0]
 8004b12:	6823      	ldr	r3, [r4, #0]
 8004b14:	0699      	lsls	r1, r3, #26
 8004b16:	bf42      	ittt	mi
 8004b18:	6833      	ldrmi	r3, [r6, #0]
 8004b1a:	3302      	addmi	r3, #2
 8004b1c:	6033      	strmi	r3, [r6, #0]
 8004b1e:	6825      	ldr	r5, [r4, #0]
 8004b20:	f015 0506 	ands.w	r5, r5, #6
 8004b24:	d106      	bne.n	8004b34 <_printf_common+0x48>
 8004b26:	f104 0a19 	add.w	sl, r4, #25
 8004b2a:	68e3      	ldr	r3, [r4, #12]
 8004b2c:	6832      	ldr	r2, [r6, #0]
 8004b2e:	1a9b      	subs	r3, r3, r2
 8004b30:	42ab      	cmp	r3, r5
 8004b32:	dc28      	bgt.n	8004b86 <_printf_common+0x9a>
 8004b34:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004b38:	1e13      	subs	r3, r2, #0
 8004b3a:	6822      	ldr	r2, [r4, #0]
 8004b3c:	bf18      	it	ne
 8004b3e:	2301      	movne	r3, #1
 8004b40:	0692      	lsls	r2, r2, #26
 8004b42:	d42d      	bmi.n	8004ba0 <_printf_common+0xb4>
 8004b44:	4649      	mov	r1, r9
 8004b46:	4638      	mov	r0, r7
 8004b48:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004b4c:	47c0      	blx	r8
 8004b4e:	3001      	adds	r0, #1
 8004b50:	d020      	beq.n	8004b94 <_printf_common+0xa8>
 8004b52:	6823      	ldr	r3, [r4, #0]
 8004b54:	68e5      	ldr	r5, [r4, #12]
 8004b56:	f003 0306 	and.w	r3, r3, #6
 8004b5a:	2b04      	cmp	r3, #4
 8004b5c:	bf18      	it	ne
 8004b5e:	2500      	movne	r5, #0
 8004b60:	6832      	ldr	r2, [r6, #0]
 8004b62:	f04f 0600 	mov.w	r6, #0
 8004b66:	68a3      	ldr	r3, [r4, #8]
 8004b68:	bf08      	it	eq
 8004b6a:	1aad      	subeq	r5, r5, r2
 8004b6c:	6922      	ldr	r2, [r4, #16]
 8004b6e:	bf08      	it	eq
 8004b70:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004b74:	4293      	cmp	r3, r2
 8004b76:	bfc4      	itt	gt
 8004b78:	1a9b      	subgt	r3, r3, r2
 8004b7a:	18ed      	addgt	r5, r5, r3
 8004b7c:	341a      	adds	r4, #26
 8004b7e:	42b5      	cmp	r5, r6
 8004b80:	d11a      	bne.n	8004bb8 <_printf_common+0xcc>
 8004b82:	2000      	movs	r0, #0
 8004b84:	e008      	b.n	8004b98 <_printf_common+0xac>
 8004b86:	2301      	movs	r3, #1
 8004b88:	4652      	mov	r2, sl
 8004b8a:	4649      	mov	r1, r9
 8004b8c:	4638      	mov	r0, r7
 8004b8e:	47c0      	blx	r8
 8004b90:	3001      	adds	r0, #1
 8004b92:	d103      	bne.n	8004b9c <_printf_common+0xb0>
 8004b94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004b98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b9c:	3501      	adds	r5, #1
 8004b9e:	e7c4      	b.n	8004b2a <_printf_common+0x3e>
 8004ba0:	2030      	movs	r0, #48	; 0x30
 8004ba2:	18e1      	adds	r1, r4, r3
 8004ba4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004ba8:	1c5a      	adds	r2, r3, #1
 8004baa:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004bae:	4422      	add	r2, r4
 8004bb0:	3302      	adds	r3, #2
 8004bb2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004bb6:	e7c5      	b.n	8004b44 <_printf_common+0x58>
 8004bb8:	2301      	movs	r3, #1
 8004bba:	4622      	mov	r2, r4
 8004bbc:	4649      	mov	r1, r9
 8004bbe:	4638      	mov	r0, r7
 8004bc0:	47c0      	blx	r8
 8004bc2:	3001      	adds	r0, #1
 8004bc4:	d0e6      	beq.n	8004b94 <_printf_common+0xa8>
 8004bc6:	3601      	adds	r6, #1
 8004bc8:	e7d9      	b.n	8004b7e <_printf_common+0x92>
	...

08004bcc <_printf_i>:
 8004bcc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004bd0:	460c      	mov	r4, r1
 8004bd2:	7e27      	ldrb	r7, [r4, #24]
 8004bd4:	4691      	mov	r9, r2
 8004bd6:	2f78      	cmp	r7, #120	; 0x78
 8004bd8:	4680      	mov	r8, r0
 8004bda:	469a      	mov	sl, r3
 8004bdc:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004bde:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004be2:	d807      	bhi.n	8004bf4 <_printf_i+0x28>
 8004be4:	2f62      	cmp	r7, #98	; 0x62
 8004be6:	d80a      	bhi.n	8004bfe <_printf_i+0x32>
 8004be8:	2f00      	cmp	r7, #0
 8004bea:	f000 80d9 	beq.w	8004da0 <_printf_i+0x1d4>
 8004bee:	2f58      	cmp	r7, #88	; 0x58
 8004bf0:	f000 80a4 	beq.w	8004d3c <_printf_i+0x170>
 8004bf4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004bf8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004bfc:	e03a      	b.n	8004c74 <_printf_i+0xa8>
 8004bfe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004c02:	2b15      	cmp	r3, #21
 8004c04:	d8f6      	bhi.n	8004bf4 <_printf_i+0x28>
 8004c06:	a001      	add	r0, pc, #4	; (adr r0, 8004c0c <_printf_i+0x40>)
 8004c08:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004c0c:	08004c65 	.word	0x08004c65
 8004c10:	08004c79 	.word	0x08004c79
 8004c14:	08004bf5 	.word	0x08004bf5
 8004c18:	08004bf5 	.word	0x08004bf5
 8004c1c:	08004bf5 	.word	0x08004bf5
 8004c20:	08004bf5 	.word	0x08004bf5
 8004c24:	08004c79 	.word	0x08004c79
 8004c28:	08004bf5 	.word	0x08004bf5
 8004c2c:	08004bf5 	.word	0x08004bf5
 8004c30:	08004bf5 	.word	0x08004bf5
 8004c34:	08004bf5 	.word	0x08004bf5
 8004c38:	08004d87 	.word	0x08004d87
 8004c3c:	08004ca9 	.word	0x08004ca9
 8004c40:	08004d69 	.word	0x08004d69
 8004c44:	08004bf5 	.word	0x08004bf5
 8004c48:	08004bf5 	.word	0x08004bf5
 8004c4c:	08004da9 	.word	0x08004da9
 8004c50:	08004bf5 	.word	0x08004bf5
 8004c54:	08004ca9 	.word	0x08004ca9
 8004c58:	08004bf5 	.word	0x08004bf5
 8004c5c:	08004bf5 	.word	0x08004bf5
 8004c60:	08004d71 	.word	0x08004d71
 8004c64:	680b      	ldr	r3, [r1, #0]
 8004c66:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004c6a:	1d1a      	adds	r2, r3, #4
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	600a      	str	r2, [r1, #0]
 8004c70:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004c74:	2301      	movs	r3, #1
 8004c76:	e0a4      	b.n	8004dc2 <_printf_i+0x1f6>
 8004c78:	6825      	ldr	r5, [r4, #0]
 8004c7a:	6808      	ldr	r0, [r1, #0]
 8004c7c:	062e      	lsls	r6, r5, #24
 8004c7e:	f100 0304 	add.w	r3, r0, #4
 8004c82:	d50a      	bpl.n	8004c9a <_printf_i+0xce>
 8004c84:	6805      	ldr	r5, [r0, #0]
 8004c86:	600b      	str	r3, [r1, #0]
 8004c88:	2d00      	cmp	r5, #0
 8004c8a:	da03      	bge.n	8004c94 <_printf_i+0xc8>
 8004c8c:	232d      	movs	r3, #45	; 0x2d
 8004c8e:	426d      	negs	r5, r5
 8004c90:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004c94:	230a      	movs	r3, #10
 8004c96:	485e      	ldr	r0, [pc, #376]	; (8004e10 <_printf_i+0x244>)
 8004c98:	e019      	b.n	8004cce <_printf_i+0x102>
 8004c9a:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004c9e:	6805      	ldr	r5, [r0, #0]
 8004ca0:	600b      	str	r3, [r1, #0]
 8004ca2:	bf18      	it	ne
 8004ca4:	b22d      	sxthne	r5, r5
 8004ca6:	e7ef      	b.n	8004c88 <_printf_i+0xbc>
 8004ca8:	680b      	ldr	r3, [r1, #0]
 8004caa:	6825      	ldr	r5, [r4, #0]
 8004cac:	1d18      	adds	r0, r3, #4
 8004cae:	6008      	str	r0, [r1, #0]
 8004cb0:	0628      	lsls	r0, r5, #24
 8004cb2:	d501      	bpl.n	8004cb8 <_printf_i+0xec>
 8004cb4:	681d      	ldr	r5, [r3, #0]
 8004cb6:	e002      	b.n	8004cbe <_printf_i+0xf2>
 8004cb8:	0669      	lsls	r1, r5, #25
 8004cba:	d5fb      	bpl.n	8004cb4 <_printf_i+0xe8>
 8004cbc:	881d      	ldrh	r5, [r3, #0]
 8004cbe:	2f6f      	cmp	r7, #111	; 0x6f
 8004cc0:	bf0c      	ite	eq
 8004cc2:	2308      	moveq	r3, #8
 8004cc4:	230a      	movne	r3, #10
 8004cc6:	4852      	ldr	r0, [pc, #328]	; (8004e10 <_printf_i+0x244>)
 8004cc8:	2100      	movs	r1, #0
 8004cca:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004cce:	6866      	ldr	r6, [r4, #4]
 8004cd0:	2e00      	cmp	r6, #0
 8004cd2:	bfa8      	it	ge
 8004cd4:	6821      	ldrge	r1, [r4, #0]
 8004cd6:	60a6      	str	r6, [r4, #8]
 8004cd8:	bfa4      	itt	ge
 8004cda:	f021 0104 	bicge.w	r1, r1, #4
 8004cde:	6021      	strge	r1, [r4, #0]
 8004ce0:	b90d      	cbnz	r5, 8004ce6 <_printf_i+0x11a>
 8004ce2:	2e00      	cmp	r6, #0
 8004ce4:	d04d      	beq.n	8004d82 <_printf_i+0x1b6>
 8004ce6:	4616      	mov	r6, r2
 8004ce8:	fbb5 f1f3 	udiv	r1, r5, r3
 8004cec:	fb03 5711 	mls	r7, r3, r1, r5
 8004cf0:	5dc7      	ldrb	r7, [r0, r7]
 8004cf2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004cf6:	462f      	mov	r7, r5
 8004cf8:	42bb      	cmp	r3, r7
 8004cfa:	460d      	mov	r5, r1
 8004cfc:	d9f4      	bls.n	8004ce8 <_printf_i+0x11c>
 8004cfe:	2b08      	cmp	r3, #8
 8004d00:	d10b      	bne.n	8004d1a <_printf_i+0x14e>
 8004d02:	6823      	ldr	r3, [r4, #0]
 8004d04:	07df      	lsls	r7, r3, #31
 8004d06:	d508      	bpl.n	8004d1a <_printf_i+0x14e>
 8004d08:	6923      	ldr	r3, [r4, #16]
 8004d0a:	6861      	ldr	r1, [r4, #4]
 8004d0c:	4299      	cmp	r1, r3
 8004d0e:	bfde      	ittt	le
 8004d10:	2330      	movle	r3, #48	; 0x30
 8004d12:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004d16:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8004d1a:	1b92      	subs	r2, r2, r6
 8004d1c:	6122      	str	r2, [r4, #16]
 8004d1e:	464b      	mov	r3, r9
 8004d20:	4621      	mov	r1, r4
 8004d22:	4640      	mov	r0, r8
 8004d24:	f8cd a000 	str.w	sl, [sp]
 8004d28:	aa03      	add	r2, sp, #12
 8004d2a:	f7ff fedf 	bl	8004aec <_printf_common>
 8004d2e:	3001      	adds	r0, #1
 8004d30:	d14c      	bne.n	8004dcc <_printf_i+0x200>
 8004d32:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004d36:	b004      	add	sp, #16
 8004d38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d3c:	4834      	ldr	r0, [pc, #208]	; (8004e10 <_printf_i+0x244>)
 8004d3e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004d42:	680e      	ldr	r6, [r1, #0]
 8004d44:	6823      	ldr	r3, [r4, #0]
 8004d46:	f856 5b04 	ldr.w	r5, [r6], #4
 8004d4a:	061f      	lsls	r7, r3, #24
 8004d4c:	600e      	str	r6, [r1, #0]
 8004d4e:	d514      	bpl.n	8004d7a <_printf_i+0x1ae>
 8004d50:	07d9      	lsls	r1, r3, #31
 8004d52:	bf44      	itt	mi
 8004d54:	f043 0320 	orrmi.w	r3, r3, #32
 8004d58:	6023      	strmi	r3, [r4, #0]
 8004d5a:	b91d      	cbnz	r5, 8004d64 <_printf_i+0x198>
 8004d5c:	6823      	ldr	r3, [r4, #0]
 8004d5e:	f023 0320 	bic.w	r3, r3, #32
 8004d62:	6023      	str	r3, [r4, #0]
 8004d64:	2310      	movs	r3, #16
 8004d66:	e7af      	b.n	8004cc8 <_printf_i+0xfc>
 8004d68:	6823      	ldr	r3, [r4, #0]
 8004d6a:	f043 0320 	orr.w	r3, r3, #32
 8004d6e:	6023      	str	r3, [r4, #0]
 8004d70:	2378      	movs	r3, #120	; 0x78
 8004d72:	4828      	ldr	r0, [pc, #160]	; (8004e14 <_printf_i+0x248>)
 8004d74:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004d78:	e7e3      	b.n	8004d42 <_printf_i+0x176>
 8004d7a:	065e      	lsls	r6, r3, #25
 8004d7c:	bf48      	it	mi
 8004d7e:	b2ad      	uxthmi	r5, r5
 8004d80:	e7e6      	b.n	8004d50 <_printf_i+0x184>
 8004d82:	4616      	mov	r6, r2
 8004d84:	e7bb      	b.n	8004cfe <_printf_i+0x132>
 8004d86:	680b      	ldr	r3, [r1, #0]
 8004d88:	6826      	ldr	r6, [r4, #0]
 8004d8a:	1d1d      	adds	r5, r3, #4
 8004d8c:	6960      	ldr	r0, [r4, #20]
 8004d8e:	600d      	str	r5, [r1, #0]
 8004d90:	0635      	lsls	r5, r6, #24
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	d501      	bpl.n	8004d9a <_printf_i+0x1ce>
 8004d96:	6018      	str	r0, [r3, #0]
 8004d98:	e002      	b.n	8004da0 <_printf_i+0x1d4>
 8004d9a:	0671      	lsls	r1, r6, #25
 8004d9c:	d5fb      	bpl.n	8004d96 <_printf_i+0x1ca>
 8004d9e:	8018      	strh	r0, [r3, #0]
 8004da0:	2300      	movs	r3, #0
 8004da2:	4616      	mov	r6, r2
 8004da4:	6123      	str	r3, [r4, #16]
 8004da6:	e7ba      	b.n	8004d1e <_printf_i+0x152>
 8004da8:	680b      	ldr	r3, [r1, #0]
 8004daa:	1d1a      	adds	r2, r3, #4
 8004dac:	600a      	str	r2, [r1, #0]
 8004dae:	681e      	ldr	r6, [r3, #0]
 8004db0:	2100      	movs	r1, #0
 8004db2:	4630      	mov	r0, r6
 8004db4:	6862      	ldr	r2, [r4, #4]
 8004db6:	f002 fb09 	bl	80073cc <memchr>
 8004dba:	b108      	cbz	r0, 8004dc0 <_printf_i+0x1f4>
 8004dbc:	1b80      	subs	r0, r0, r6
 8004dbe:	6060      	str	r0, [r4, #4]
 8004dc0:	6863      	ldr	r3, [r4, #4]
 8004dc2:	6123      	str	r3, [r4, #16]
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004dca:	e7a8      	b.n	8004d1e <_printf_i+0x152>
 8004dcc:	4632      	mov	r2, r6
 8004dce:	4649      	mov	r1, r9
 8004dd0:	4640      	mov	r0, r8
 8004dd2:	6923      	ldr	r3, [r4, #16]
 8004dd4:	47d0      	blx	sl
 8004dd6:	3001      	adds	r0, #1
 8004dd8:	d0ab      	beq.n	8004d32 <_printf_i+0x166>
 8004dda:	6823      	ldr	r3, [r4, #0]
 8004ddc:	079b      	lsls	r3, r3, #30
 8004dde:	d413      	bmi.n	8004e08 <_printf_i+0x23c>
 8004de0:	68e0      	ldr	r0, [r4, #12]
 8004de2:	9b03      	ldr	r3, [sp, #12]
 8004de4:	4298      	cmp	r0, r3
 8004de6:	bfb8      	it	lt
 8004de8:	4618      	movlt	r0, r3
 8004dea:	e7a4      	b.n	8004d36 <_printf_i+0x16a>
 8004dec:	2301      	movs	r3, #1
 8004dee:	4632      	mov	r2, r6
 8004df0:	4649      	mov	r1, r9
 8004df2:	4640      	mov	r0, r8
 8004df4:	47d0      	blx	sl
 8004df6:	3001      	adds	r0, #1
 8004df8:	d09b      	beq.n	8004d32 <_printf_i+0x166>
 8004dfa:	3501      	adds	r5, #1
 8004dfc:	68e3      	ldr	r3, [r4, #12]
 8004dfe:	9903      	ldr	r1, [sp, #12]
 8004e00:	1a5b      	subs	r3, r3, r1
 8004e02:	42ab      	cmp	r3, r5
 8004e04:	dcf2      	bgt.n	8004dec <_printf_i+0x220>
 8004e06:	e7eb      	b.n	8004de0 <_printf_i+0x214>
 8004e08:	2500      	movs	r5, #0
 8004e0a:	f104 0619 	add.w	r6, r4, #25
 8004e0e:	e7f5      	b.n	8004dfc <_printf_i+0x230>
 8004e10:	08009b46 	.word	0x08009b46
 8004e14:	08009b57 	.word	0x08009b57

08004e18 <_scanf_float>:
 8004e18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e1c:	b087      	sub	sp, #28
 8004e1e:	9303      	str	r3, [sp, #12]
 8004e20:	688b      	ldr	r3, [r1, #8]
 8004e22:	4617      	mov	r7, r2
 8004e24:	1e5a      	subs	r2, r3, #1
 8004e26:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8004e2a:	bf85      	ittet	hi
 8004e2c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8004e30:	195b      	addhi	r3, r3, r5
 8004e32:	2300      	movls	r3, #0
 8004e34:	9302      	strhi	r3, [sp, #8]
 8004e36:	bf88      	it	hi
 8004e38:	f240 135d 	movwhi	r3, #349	; 0x15d
 8004e3c:	468b      	mov	fp, r1
 8004e3e:	f04f 0500 	mov.w	r5, #0
 8004e42:	bf8c      	ite	hi
 8004e44:	608b      	strhi	r3, [r1, #8]
 8004e46:	9302      	strls	r3, [sp, #8]
 8004e48:	680b      	ldr	r3, [r1, #0]
 8004e4a:	4680      	mov	r8, r0
 8004e4c:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8004e50:	f84b 3b1c 	str.w	r3, [fp], #28
 8004e54:	460c      	mov	r4, r1
 8004e56:	465e      	mov	r6, fp
 8004e58:	46aa      	mov	sl, r5
 8004e5a:	46a9      	mov	r9, r5
 8004e5c:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8004e60:	9501      	str	r5, [sp, #4]
 8004e62:	68a2      	ldr	r2, [r4, #8]
 8004e64:	b152      	cbz	r2, 8004e7c <_scanf_float+0x64>
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	781b      	ldrb	r3, [r3, #0]
 8004e6a:	2b4e      	cmp	r3, #78	; 0x4e
 8004e6c:	d864      	bhi.n	8004f38 <_scanf_float+0x120>
 8004e6e:	2b40      	cmp	r3, #64	; 0x40
 8004e70:	d83c      	bhi.n	8004eec <_scanf_float+0xd4>
 8004e72:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8004e76:	b2c8      	uxtb	r0, r1
 8004e78:	280e      	cmp	r0, #14
 8004e7a:	d93a      	bls.n	8004ef2 <_scanf_float+0xda>
 8004e7c:	f1b9 0f00 	cmp.w	r9, #0
 8004e80:	d003      	beq.n	8004e8a <_scanf_float+0x72>
 8004e82:	6823      	ldr	r3, [r4, #0]
 8004e84:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004e88:	6023      	str	r3, [r4, #0]
 8004e8a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8004e8e:	f1ba 0f01 	cmp.w	sl, #1
 8004e92:	f200 8113 	bhi.w	80050bc <_scanf_float+0x2a4>
 8004e96:	455e      	cmp	r6, fp
 8004e98:	f200 8105 	bhi.w	80050a6 <_scanf_float+0x28e>
 8004e9c:	2501      	movs	r5, #1
 8004e9e:	4628      	mov	r0, r5
 8004ea0:	b007      	add	sp, #28
 8004ea2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ea6:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8004eaa:	2a0d      	cmp	r2, #13
 8004eac:	d8e6      	bhi.n	8004e7c <_scanf_float+0x64>
 8004eae:	a101      	add	r1, pc, #4	; (adr r1, 8004eb4 <_scanf_float+0x9c>)
 8004eb0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8004eb4:	08004ff3 	.word	0x08004ff3
 8004eb8:	08004e7d 	.word	0x08004e7d
 8004ebc:	08004e7d 	.word	0x08004e7d
 8004ec0:	08004e7d 	.word	0x08004e7d
 8004ec4:	08005053 	.word	0x08005053
 8004ec8:	0800502b 	.word	0x0800502b
 8004ecc:	08004e7d 	.word	0x08004e7d
 8004ed0:	08004e7d 	.word	0x08004e7d
 8004ed4:	08005001 	.word	0x08005001
 8004ed8:	08004e7d 	.word	0x08004e7d
 8004edc:	08004e7d 	.word	0x08004e7d
 8004ee0:	08004e7d 	.word	0x08004e7d
 8004ee4:	08004e7d 	.word	0x08004e7d
 8004ee8:	08004fb9 	.word	0x08004fb9
 8004eec:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8004ef0:	e7db      	b.n	8004eaa <_scanf_float+0x92>
 8004ef2:	290e      	cmp	r1, #14
 8004ef4:	d8c2      	bhi.n	8004e7c <_scanf_float+0x64>
 8004ef6:	a001      	add	r0, pc, #4	; (adr r0, 8004efc <_scanf_float+0xe4>)
 8004ef8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8004efc:	08004fab 	.word	0x08004fab
 8004f00:	08004e7d 	.word	0x08004e7d
 8004f04:	08004fab 	.word	0x08004fab
 8004f08:	0800503f 	.word	0x0800503f
 8004f0c:	08004e7d 	.word	0x08004e7d
 8004f10:	08004f59 	.word	0x08004f59
 8004f14:	08004f95 	.word	0x08004f95
 8004f18:	08004f95 	.word	0x08004f95
 8004f1c:	08004f95 	.word	0x08004f95
 8004f20:	08004f95 	.word	0x08004f95
 8004f24:	08004f95 	.word	0x08004f95
 8004f28:	08004f95 	.word	0x08004f95
 8004f2c:	08004f95 	.word	0x08004f95
 8004f30:	08004f95 	.word	0x08004f95
 8004f34:	08004f95 	.word	0x08004f95
 8004f38:	2b6e      	cmp	r3, #110	; 0x6e
 8004f3a:	d809      	bhi.n	8004f50 <_scanf_float+0x138>
 8004f3c:	2b60      	cmp	r3, #96	; 0x60
 8004f3e:	d8b2      	bhi.n	8004ea6 <_scanf_float+0x8e>
 8004f40:	2b54      	cmp	r3, #84	; 0x54
 8004f42:	d077      	beq.n	8005034 <_scanf_float+0x21c>
 8004f44:	2b59      	cmp	r3, #89	; 0x59
 8004f46:	d199      	bne.n	8004e7c <_scanf_float+0x64>
 8004f48:	2d07      	cmp	r5, #7
 8004f4a:	d197      	bne.n	8004e7c <_scanf_float+0x64>
 8004f4c:	2508      	movs	r5, #8
 8004f4e:	e029      	b.n	8004fa4 <_scanf_float+0x18c>
 8004f50:	2b74      	cmp	r3, #116	; 0x74
 8004f52:	d06f      	beq.n	8005034 <_scanf_float+0x21c>
 8004f54:	2b79      	cmp	r3, #121	; 0x79
 8004f56:	e7f6      	b.n	8004f46 <_scanf_float+0x12e>
 8004f58:	6821      	ldr	r1, [r4, #0]
 8004f5a:	05c8      	lsls	r0, r1, #23
 8004f5c:	d51a      	bpl.n	8004f94 <_scanf_float+0x17c>
 8004f5e:	9b02      	ldr	r3, [sp, #8]
 8004f60:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8004f64:	6021      	str	r1, [r4, #0]
 8004f66:	f109 0901 	add.w	r9, r9, #1
 8004f6a:	b11b      	cbz	r3, 8004f74 <_scanf_float+0x15c>
 8004f6c:	3b01      	subs	r3, #1
 8004f6e:	3201      	adds	r2, #1
 8004f70:	9302      	str	r3, [sp, #8]
 8004f72:	60a2      	str	r2, [r4, #8]
 8004f74:	68a3      	ldr	r3, [r4, #8]
 8004f76:	3b01      	subs	r3, #1
 8004f78:	60a3      	str	r3, [r4, #8]
 8004f7a:	6923      	ldr	r3, [r4, #16]
 8004f7c:	3301      	adds	r3, #1
 8004f7e:	6123      	str	r3, [r4, #16]
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	3b01      	subs	r3, #1
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	607b      	str	r3, [r7, #4]
 8004f88:	f340 8084 	ble.w	8005094 <_scanf_float+0x27c>
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	3301      	adds	r3, #1
 8004f90:	603b      	str	r3, [r7, #0]
 8004f92:	e766      	b.n	8004e62 <_scanf_float+0x4a>
 8004f94:	eb1a 0f05 	cmn.w	sl, r5
 8004f98:	f47f af70 	bne.w	8004e7c <_scanf_float+0x64>
 8004f9c:	6822      	ldr	r2, [r4, #0]
 8004f9e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8004fa2:	6022      	str	r2, [r4, #0]
 8004fa4:	f806 3b01 	strb.w	r3, [r6], #1
 8004fa8:	e7e4      	b.n	8004f74 <_scanf_float+0x15c>
 8004faa:	6822      	ldr	r2, [r4, #0]
 8004fac:	0610      	lsls	r0, r2, #24
 8004fae:	f57f af65 	bpl.w	8004e7c <_scanf_float+0x64>
 8004fb2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004fb6:	e7f4      	b.n	8004fa2 <_scanf_float+0x18a>
 8004fb8:	f1ba 0f00 	cmp.w	sl, #0
 8004fbc:	d10e      	bne.n	8004fdc <_scanf_float+0x1c4>
 8004fbe:	f1b9 0f00 	cmp.w	r9, #0
 8004fc2:	d10e      	bne.n	8004fe2 <_scanf_float+0x1ca>
 8004fc4:	6822      	ldr	r2, [r4, #0]
 8004fc6:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8004fca:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8004fce:	d108      	bne.n	8004fe2 <_scanf_float+0x1ca>
 8004fd0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8004fd4:	f04f 0a01 	mov.w	sl, #1
 8004fd8:	6022      	str	r2, [r4, #0]
 8004fda:	e7e3      	b.n	8004fa4 <_scanf_float+0x18c>
 8004fdc:	f1ba 0f02 	cmp.w	sl, #2
 8004fe0:	d055      	beq.n	800508e <_scanf_float+0x276>
 8004fe2:	2d01      	cmp	r5, #1
 8004fe4:	d002      	beq.n	8004fec <_scanf_float+0x1d4>
 8004fe6:	2d04      	cmp	r5, #4
 8004fe8:	f47f af48 	bne.w	8004e7c <_scanf_float+0x64>
 8004fec:	3501      	adds	r5, #1
 8004fee:	b2ed      	uxtb	r5, r5
 8004ff0:	e7d8      	b.n	8004fa4 <_scanf_float+0x18c>
 8004ff2:	f1ba 0f01 	cmp.w	sl, #1
 8004ff6:	f47f af41 	bne.w	8004e7c <_scanf_float+0x64>
 8004ffa:	f04f 0a02 	mov.w	sl, #2
 8004ffe:	e7d1      	b.n	8004fa4 <_scanf_float+0x18c>
 8005000:	b97d      	cbnz	r5, 8005022 <_scanf_float+0x20a>
 8005002:	f1b9 0f00 	cmp.w	r9, #0
 8005006:	f47f af3c 	bne.w	8004e82 <_scanf_float+0x6a>
 800500a:	6822      	ldr	r2, [r4, #0]
 800500c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8005010:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8005014:	f47f af39 	bne.w	8004e8a <_scanf_float+0x72>
 8005018:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800501c:	2501      	movs	r5, #1
 800501e:	6022      	str	r2, [r4, #0]
 8005020:	e7c0      	b.n	8004fa4 <_scanf_float+0x18c>
 8005022:	2d03      	cmp	r5, #3
 8005024:	d0e2      	beq.n	8004fec <_scanf_float+0x1d4>
 8005026:	2d05      	cmp	r5, #5
 8005028:	e7de      	b.n	8004fe8 <_scanf_float+0x1d0>
 800502a:	2d02      	cmp	r5, #2
 800502c:	f47f af26 	bne.w	8004e7c <_scanf_float+0x64>
 8005030:	2503      	movs	r5, #3
 8005032:	e7b7      	b.n	8004fa4 <_scanf_float+0x18c>
 8005034:	2d06      	cmp	r5, #6
 8005036:	f47f af21 	bne.w	8004e7c <_scanf_float+0x64>
 800503a:	2507      	movs	r5, #7
 800503c:	e7b2      	b.n	8004fa4 <_scanf_float+0x18c>
 800503e:	6822      	ldr	r2, [r4, #0]
 8005040:	0591      	lsls	r1, r2, #22
 8005042:	f57f af1b 	bpl.w	8004e7c <_scanf_float+0x64>
 8005046:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800504a:	6022      	str	r2, [r4, #0]
 800504c:	f8cd 9004 	str.w	r9, [sp, #4]
 8005050:	e7a8      	b.n	8004fa4 <_scanf_float+0x18c>
 8005052:	6822      	ldr	r2, [r4, #0]
 8005054:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8005058:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800505c:	d006      	beq.n	800506c <_scanf_float+0x254>
 800505e:	0550      	lsls	r0, r2, #21
 8005060:	f57f af0c 	bpl.w	8004e7c <_scanf_float+0x64>
 8005064:	f1b9 0f00 	cmp.w	r9, #0
 8005068:	f43f af0f 	beq.w	8004e8a <_scanf_float+0x72>
 800506c:	0591      	lsls	r1, r2, #22
 800506e:	bf58      	it	pl
 8005070:	9901      	ldrpl	r1, [sp, #4]
 8005072:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005076:	bf58      	it	pl
 8005078:	eba9 0101 	subpl.w	r1, r9, r1
 800507c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8005080:	f04f 0900 	mov.w	r9, #0
 8005084:	bf58      	it	pl
 8005086:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800508a:	6022      	str	r2, [r4, #0]
 800508c:	e78a      	b.n	8004fa4 <_scanf_float+0x18c>
 800508e:	f04f 0a03 	mov.w	sl, #3
 8005092:	e787      	b.n	8004fa4 <_scanf_float+0x18c>
 8005094:	4639      	mov	r1, r7
 8005096:	4640      	mov	r0, r8
 8005098:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800509c:	4798      	blx	r3
 800509e:	2800      	cmp	r0, #0
 80050a0:	f43f aedf 	beq.w	8004e62 <_scanf_float+0x4a>
 80050a4:	e6ea      	b.n	8004e7c <_scanf_float+0x64>
 80050a6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80050aa:	463a      	mov	r2, r7
 80050ac:	4640      	mov	r0, r8
 80050ae:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80050b2:	4798      	blx	r3
 80050b4:	6923      	ldr	r3, [r4, #16]
 80050b6:	3b01      	subs	r3, #1
 80050b8:	6123      	str	r3, [r4, #16]
 80050ba:	e6ec      	b.n	8004e96 <_scanf_float+0x7e>
 80050bc:	1e6b      	subs	r3, r5, #1
 80050be:	2b06      	cmp	r3, #6
 80050c0:	d825      	bhi.n	800510e <_scanf_float+0x2f6>
 80050c2:	2d02      	cmp	r5, #2
 80050c4:	d836      	bhi.n	8005134 <_scanf_float+0x31c>
 80050c6:	455e      	cmp	r6, fp
 80050c8:	f67f aee8 	bls.w	8004e9c <_scanf_float+0x84>
 80050cc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80050d0:	463a      	mov	r2, r7
 80050d2:	4640      	mov	r0, r8
 80050d4:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80050d8:	4798      	blx	r3
 80050da:	6923      	ldr	r3, [r4, #16]
 80050dc:	3b01      	subs	r3, #1
 80050de:	6123      	str	r3, [r4, #16]
 80050e0:	e7f1      	b.n	80050c6 <_scanf_float+0x2ae>
 80050e2:	9802      	ldr	r0, [sp, #8]
 80050e4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80050e8:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80050ec:	463a      	mov	r2, r7
 80050ee:	9002      	str	r0, [sp, #8]
 80050f0:	4640      	mov	r0, r8
 80050f2:	4798      	blx	r3
 80050f4:	6923      	ldr	r3, [r4, #16]
 80050f6:	3b01      	subs	r3, #1
 80050f8:	6123      	str	r3, [r4, #16]
 80050fa:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80050fe:	fa5f fa8a 	uxtb.w	sl, sl
 8005102:	f1ba 0f02 	cmp.w	sl, #2
 8005106:	d1ec      	bne.n	80050e2 <_scanf_float+0x2ca>
 8005108:	3d03      	subs	r5, #3
 800510a:	b2ed      	uxtb	r5, r5
 800510c:	1b76      	subs	r6, r6, r5
 800510e:	6823      	ldr	r3, [r4, #0]
 8005110:	05da      	lsls	r2, r3, #23
 8005112:	d52f      	bpl.n	8005174 <_scanf_float+0x35c>
 8005114:	055b      	lsls	r3, r3, #21
 8005116:	d510      	bpl.n	800513a <_scanf_float+0x322>
 8005118:	455e      	cmp	r6, fp
 800511a:	f67f aebf 	bls.w	8004e9c <_scanf_float+0x84>
 800511e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005122:	463a      	mov	r2, r7
 8005124:	4640      	mov	r0, r8
 8005126:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800512a:	4798      	blx	r3
 800512c:	6923      	ldr	r3, [r4, #16]
 800512e:	3b01      	subs	r3, #1
 8005130:	6123      	str	r3, [r4, #16]
 8005132:	e7f1      	b.n	8005118 <_scanf_float+0x300>
 8005134:	46aa      	mov	sl, r5
 8005136:	9602      	str	r6, [sp, #8]
 8005138:	e7df      	b.n	80050fa <_scanf_float+0x2e2>
 800513a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800513e:	6923      	ldr	r3, [r4, #16]
 8005140:	2965      	cmp	r1, #101	; 0x65
 8005142:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8005146:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 800514a:	6123      	str	r3, [r4, #16]
 800514c:	d00c      	beq.n	8005168 <_scanf_float+0x350>
 800514e:	2945      	cmp	r1, #69	; 0x45
 8005150:	d00a      	beq.n	8005168 <_scanf_float+0x350>
 8005152:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005156:	463a      	mov	r2, r7
 8005158:	4640      	mov	r0, r8
 800515a:	4798      	blx	r3
 800515c:	6923      	ldr	r3, [r4, #16]
 800515e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8005162:	3b01      	subs	r3, #1
 8005164:	1eb5      	subs	r5, r6, #2
 8005166:	6123      	str	r3, [r4, #16]
 8005168:	463a      	mov	r2, r7
 800516a:	4640      	mov	r0, r8
 800516c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005170:	4798      	blx	r3
 8005172:	462e      	mov	r6, r5
 8005174:	6825      	ldr	r5, [r4, #0]
 8005176:	f015 0510 	ands.w	r5, r5, #16
 800517a:	d159      	bne.n	8005230 <_scanf_float+0x418>
 800517c:	7035      	strb	r5, [r6, #0]
 800517e:	6823      	ldr	r3, [r4, #0]
 8005180:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005184:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005188:	d11c      	bne.n	80051c4 <_scanf_float+0x3ac>
 800518a:	9b01      	ldr	r3, [sp, #4]
 800518c:	454b      	cmp	r3, r9
 800518e:	eba3 0209 	sub.w	r2, r3, r9
 8005192:	d124      	bne.n	80051de <_scanf_float+0x3c6>
 8005194:	2200      	movs	r2, #0
 8005196:	4659      	mov	r1, fp
 8005198:	4640      	mov	r0, r8
 800519a:	f000 fe89 	bl	8005eb0 <_strtod_r>
 800519e:	f8d4 c000 	ldr.w	ip, [r4]
 80051a2:	9b03      	ldr	r3, [sp, #12]
 80051a4:	f01c 0f02 	tst.w	ip, #2
 80051a8:	4606      	mov	r6, r0
 80051aa:	460f      	mov	r7, r1
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	d021      	beq.n	80051f4 <_scanf_float+0x3dc>
 80051b0:	9903      	ldr	r1, [sp, #12]
 80051b2:	1d1a      	adds	r2, r3, #4
 80051b4:	600a      	str	r2, [r1, #0]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	e9c3 6700 	strd	r6, r7, [r3]
 80051bc:	68e3      	ldr	r3, [r4, #12]
 80051be:	3301      	adds	r3, #1
 80051c0:	60e3      	str	r3, [r4, #12]
 80051c2:	e66c      	b.n	8004e9e <_scanf_float+0x86>
 80051c4:	9b04      	ldr	r3, [sp, #16]
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d0e4      	beq.n	8005194 <_scanf_float+0x37c>
 80051ca:	9905      	ldr	r1, [sp, #20]
 80051cc:	230a      	movs	r3, #10
 80051ce:	462a      	mov	r2, r5
 80051d0:	4640      	mov	r0, r8
 80051d2:	3101      	adds	r1, #1
 80051d4:	f000 fef8 	bl	8005fc8 <_strtol_r>
 80051d8:	9b04      	ldr	r3, [sp, #16]
 80051da:	9e05      	ldr	r6, [sp, #20]
 80051dc:	1ac2      	subs	r2, r0, r3
 80051de:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80051e2:	429e      	cmp	r6, r3
 80051e4:	bf28      	it	cs
 80051e6:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80051ea:	4630      	mov	r0, r6
 80051ec:	4911      	ldr	r1, [pc, #68]	; (8005234 <_scanf_float+0x41c>)
 80051ee:	f000 f829 	bl	8005244 <siprintf>
 80051f2:	e7cf      	b.n	8005194 <_scanf_float+0x37c>
 80051f4:	f01c 0f04 	tst.w	ip, #4
 80051f8:	f103 0e04 	add.w	lr, r3, #4
 80051fc:	d003      	beq.n	8005206 <_scanf_float+0x3ee>
 80051fe:	9903      	ldr	r1, [sp, #12]
 8005200:	f8c1 e000 	str.w	lr, [r1]
 8005204:	e7d7      	b.n	80051b6 <_scanf_float+0x39e>
 8005206:	9a03      	ldr	r2, [sp, #12]
 8005208:	f8c2 e000 	str.w	lr, [r2]
 800520c:	f8d3 8000 	ldr.w	r8, [r3]
 8005210:	4602      	mov	r2, r0
 8005212:	460b      	mov	r3, r1
 8005214:	f7fb fcae 	bl	8000b74 <__aeabi_dcmpun>
 8005218:	b128      	cbz	r0, 8005226 <_scanf_float+0x40e>
 800521a:	4807      	ldr	r0, [pc, #28]	; (8005238 <_scanf_float+0x420>)
 800521c:	f000 f80e 	bl	800523c <nanf>
 8005220:	f8c8 0000 	str.w	r0, [r8]
 8005224:	e7ca      	b.n	80051bc <_scanf_float+0x3a4>
 8005226:	4630      	mov	r0, r6
 8005228:	4639      	mov	r1, r7
 800522a:	f7fb fd01 	bl	8000c30 <__aeabi_d2f>
 800522e:	e7f7      	b.n	8005220 <_scanf_float+0x408>
 8005230:	2500      	movs	r5, #0
 8005232:	e634      	b.n	8004e9e <_scanf_float+0x86>
 8005234:	08009b68 	.word	0x08009b68
 8005238:	08009f80 	.word	0x08009f80

0800523c <nanf>:
 800523c:	4800      	ldr	r0, [pc, #0]	; (8005240 <nanf+0x4>)
 800523e:	4770      	bx	lr
 8005240:	7fc00000 	.word	0x7fc00000

08005244 <siprintf>:
 8005244:	b40e      	push	{r1, r2, r3}
 8005246:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800524a:	b500      	push	{lr}
 800524c:	b09c      	sub	sp, #112	; 0x70
 800524e:	ab1d      	add	r3, sp, #116	; 0x74
 8005250:	9002      	str	r0, [sp, #8]
 8005252:	9006      	str	r0, [sp, #24]
 8005254:	9107      	str	r1, [sp, #28]
 8005256:	9104      	str	r1, [sp, #16]
 8005258:	4808      	ldr	r0, [pc, #32]	; (800527c <siprintf+0x38>)
 800525a:	4909      	ldr	r1, [pc, #36]	; (8005280 <siprintf+0x3c>)
 800525c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005260:	9105      	str	r1, [sp, #20]
 8005262:	6800      	ldr	r0, [r0, #0]
 8005264:	a902      	add	r1, sp, #8
 8005266:	9301      	str	r3, [sp, #4]
 8005268:	f002 fe94 	bl	8007f94 <_svfiprintf_r>
 800526c:	2200      	movs	r2, #0
 800526e:	9b02      	ldr	r3, [sp, #8]
 8005270:	701a      	strb	r2, [r3, #0]
 8005272:	b01c      	add	sp, #112	; 0x70
 8005274:	f85d eb04 	ldr.w	lr, [sp], #4
 8005278:	b003      	add	sp, #12
 800527a:	4770      	bx	lr
 800527c:	20000014 	.word	0x20000014
 8005280:	ffff0208 	.word	0xffff0208

08005284 <sulp>:
 8005284:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005288:	460f      	mov	r7, r1
 800528a:	4690      	mov	r8, r2
 800528c:	f002 fc2a 	bl	8007ae4 <__ulp>
 8005290:	4604      	mov	r4, r0
 8005292:	460d      	mov	r5, r1
 8005294:	f1b8 0f00 	cmp.w	r8, #0
 8005298:	d011      	beq.n	80052be <sulp+0x3a>
 800529a:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800529e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	dd0b      	ble.n	80052be <sulp+0x3a>
 80052a6:	2400      	movs	r4, #0
 80052a8:	051b      	lsls	r3, r3, #20
 80052aa:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80052ae:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80052b2:	4622      	mov	r2, r4
 80052b4:	462b      	mov	r3, r5
 80052b6:	f7fb f9c3 	bl	8000640 <__aeabi_dmul>
 80052ba:	4604      	mov	r4, r0
 80052bc:	460d      	mov	r5, r1
 80052be:	4620      	mov	r0, r4
 80052c0:	4629      	mov	r1, r5
 80052c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

080052c8 <_strtod_l>:
 80052c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052cc:	469b      	mov	fp, r3
 80052ce:	2300      	movs	r3, #0
 80052d0:	b0a1      	sub	sp, #132	; 0x84
 80052d2:	931c      	str	r3, [sp, #112]	; 0x70
 80052d4:	4ba1      	ldr	r3, [pc, #644]	; (800555c <_strtod_l+0x294>)
 80052d6:	4682      	mov	sl, r0
 80052d8:	681f      	ldr	r7, [r3, #0]
 80052da:	460e      	mov	r6, r1
 80052dc:	4638      	mov	r0, r7
 80052de:	9217      	str	r2, [sp, #92]	; 0x5c
 80052e0:	f7fa ff36 	bl	8000150 <strlen>
 80052e4:	f04f 0800 	mov.w	r8, #0
 80052e8:	4604      	mov	r4, r0
 80052ea:	f04f 0900 	mov.w	r9, #0
 80052ee:	961b      	str	r6, [sp, #108]	; 0x6c
 80052f0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80052f2:	781a      	ldrb	r2, [r3, #0]
 80052f4:	2a2b      	cmp	r2, #43	; 0x2b
 80052f6:	d04c      	beq.n	8005392 <_strtod_l+0xca>
 80052f8:	d83a      	bhi.n	8005370 <_strtod_l+0xa8>
 80052fa:	2a0d      	cmp	r2, #13
 80052fc:	d833      	bhi.n	8005366 <_strtod_l+0x9e>
 80052fe:	2a08      	cmp	r2, #8
 8005300:	d833      	bhi.n	800536a <_strtod_l+0xa2>
 8005302:	2a00      	cmp	r2, #0
 8005304:	d03d      	beq.n	8005382 <_strtod_l+0xba>
 8005306:	2300      	movs	r3, #0
 8005308:	930c      	str	r3, [sp, #48]	; 0x30
 800530a:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800530c:	782b      	ldrb	r3, [r5, #0]
 800530e:	2b30      	cmp	r3, #48	; 0x30
 8005310:	f040 80af 	bne.w	8005472 <_strtod_l+0x1aa>
 8005314:	786b      	ldrb	r3, [r5, #1]
 8005316:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800531a:	2b58      	cmp	r3, #88	; 0x58
 800531c:	d16c      	bne.n	80053f8 <_strtod_l+0x130>
 800531e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005320:	4650      	mov	r0, sl
 8005322:	9301      	str	r3, [sp, #4]
 8005324:	ab1c      	add	r3, sp, #112	; 0x70
 8005326:	9300      	str	r3, [sp, #0]
 8005328:	4a8d      	ldr	r2, [pc, #564]	; (8005560 <_strtod_l+0x298>)
 800532a:	f8cd b008 	str.w	fp, [sp, #8]
 800532e:	ab1d      	add	r3, sp, #116	; 0x74
 8005330:	a91b      	add	r1, sp, #108	; 0x6c
 8005332:	f001 fd2f 	bl	8006d94 <__gethex>
 8005336:	f010 0607 	ands.w	r6, r0, #7
 800533a:	4604      	mov	r4, r0
 800533c:	d005      	beq.n	800534a <_strtod_l+0x82>
 800533e:	2e06      	cmp	r6, #6
 8005340:	d129      	bne.n	8005396 <_strtod_l+0xce>
 8005342:	2300      	movs	r3, #0
 8005344:	3501      	adds	r5, #1
 8005346:	951b      	str	r5, [sp, #108]	; 0x6c
 8005348:	930c      	str	r3, [sp, #48]	; 0x30
 800534a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800534c:	2b00      	cmp	r3, #0
 800534e:	f040 8596 	bne.w	8005e7e <_strtod_l+0xbb6>
 8005352:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005354:	b1d3      	cbz	r3, 800538c <_strtod_l+0xc4>
 8005356:	4642      	mov	r2, r8
 8005358:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800535c:	4610      	mov	r0, r2
 800535e:	4619      	mov	r1, r3
 8005360:	b021      	add	sp, #132	; 0x84
 8005362:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005366:	2a20      	cmp	r2, #32
 8005368:	d1cd      	bne.n	8005306 <_strtod_l+0x3e>
 800536a:	3301      	adds	r3, #1
 800536c:	931b      	str	r3, [sp, #108]	; 0x6c
 800536e:	e7bf      	b.n	80052f0 <_strtod_l+0x28>
 8005370:	2a2d      	cmp	r2, #45	; 0x2d
 8005372:	d1c8      	bne.n	8005306 <_strtod_l+0x3e>
 8005374:	2201      	movs	r2, #1
 8005376:	920c      	str	r2, [sp, #48]	; 0x30
 8005378:	1c5a      	adds	r2, r3, #1
 800537a:	921b      	str	r2, [sp, #108]	; 0x6c
 800537c:	785b      	ldrb	r3, [r3, #1]
 800537e:	2b00      	cmp	r3, #0
 8005380:	d1c3      	bne.n	800530a <_strtod_l+0x42>
 8005382:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005384:	961b      	str	r6, [sp, #108]	; 0x6c
 8005386:	2b00      	cmp	r3, #0
 8005388:	f040 8577 	bne.w	8005e7a <_strtod_l+0xbb2>
 800538c:	4642      	mov	r2, r8
 800538e:	464b      	mov	r3, r9
 8005390:	e7e4      	b.n	800535c <_strtod_l+0x94>
 8005392:	2200      	movs	r2, #0
 8005394:	e7ef      	b.n	8005376 <_strtod_l+0xae>
 8005396:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8005398:	b13a      	cbz	r2, 80053aa <_strtod_l+0xe2>
 800539a:	2135      	movs	r1, #53	; 0x35
 800539c:	a81e      	add	r0, sp, #120	; 0x78
 800539e:	f002 fca5 	bl	8007cec <__copybits>
 80053a2:	4650      	mov	r0, sl
 80053a4:	991c      	ldr	r1, [sp, #112]	; 0x70
 80053a6:	f002 f86d 	bl	8007484 <_Bfree>
 80053aa:	3e01      	subs	r6, #1
 80053ac:	2e05      	cmp	r6, #5
 80053ae:	d807      	bhi.n	80053c0 <_strtod_l+0xf8>
 80053b0:	e8df f006 	tbb	[pc, r6]
 80053b4:	1d180b0e 	.word	0x1d180b0e
 80053b8:	030e      	.short	0x030e
 80053ba:	f04f 0900 	mov.w	r9, #0
 80053be:	46c8      	mov	r8, r9
 80053c0:	0721      	lsls	r1, r4, #28
 80053c2:	d5c2      	bpl.n	800534a <_strtod_l+0x82>
 80053c4:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 80053c8:	e7bf      	b.n	800534a <_strtod_l+0x82>
 80053ca:	e9dd 891e 	ldrd	r8, r9, [sp, #120]	; 0x78
 80053ce:	e7f7      	b.n	80053c0 <_strtod_l+0xf8>
 80053d0:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80053d2:	e9dd 831e 	ldrd	r8, r3, [sp, #120]	; 0x78
 80053d6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80053da:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80053de:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 80053e2:	e7ed      	b.n	80053c0 <_strtod_l+0xf8>
 80053e4:	f04f 0800 	mov.w	r8, #0
 80053e8:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8005564 <_strtod_l+0x29c>
 80053ec:	e7e8      	b.n	80053c0 <_strtod_l+0xf8>
 80053ee:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 80053f2:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 80053f6:	e7e3      	b.n	80053c0 <_strtod_l+0xf8>
 80053f8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80053fa:	1c5a      	adds	r2, r3, #1
 80053fc:	921b      	str	r2, [sp, #108]	; 0x6c
 80053fe:	785b      	ldrb	r3, [r3, #1]
 8005400:	2b30      	cmp	r3, #48	; 0x30
 8005402:	d0f9      	beq.n	80053f8 <_strtod_l+0x130>
 8005404:	2b00      	cmp	r3, #0
 8005406:	d0a0      	beq.n	800534a <_strtod_l+0x82>
 8005408:	2301      	movs	r3, #1
 800540a:	9307      	str	r3, [sp, #28]
 800540c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800540e:	220a      	movs	r2, #10
 8005410:	9308      	str	r3, [sp, #32]
 8005412:	2300      	movs	r3, #0
 8005414:	469b      	mov	fp, r3
 8005416:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800541a:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800541c:	7805      	ldrb	r5, [r0, #0]
 800541e:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8005422:	b2d9      	uxtb	r1, r3
 8005424:	2909      	cmp	r1, #9
 8005426:	d926      	bls.n	8005476 <_strtod_l+0x1ae>
 8005428:	4622      	mov	r2, r4
 800542a:	4639      	mov	r1, r7
 800542c:	f002 fec8 	bl	80081c0 <strncmp>
 8005430:	2800      	cmp	r0, #0
 8005432:	d032      	beq.n	800549a <_strtod_l+0x1d2>
 8005434:	2000      	movs	r0, #0
 8005436:	462b      	mov	r3, r5
 8005438:	465c      	mov	r4, fp
 800543a:	4602      	mov	r2, r0
 800543c:	9004      	str	r0, [sp, #16]
 800543e:	2b65      	cmp	r3, #101	; 0x65
 8005440:	d001      	beq.n	8005446 <_strtod_l+0x17e>
 8005442:	2b45      	cmp	r3, #69	; 0x45
 8005444:	d113      	bne.n	800546e <_strtod_l+0x1a6>
 8005446:	b91c      	cbnz	r4, 8005450 <_strtod_l+0x188>
 8005448:	9b07      	ldr	r3, [sp, #28]
 800544a:	4303      	orrs	r3, r0
 800544c:	d099      	beq.n	8005382 <_strtod_l+0xba>
 800544e:	2400      	movs	r4, #0
 8005450:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8005452:	1c73      	adds	r3, r6, #1
 8005454:	931b      	str	r3, [sp, #108]	; 0x6c
 8005456:	7873      	ldrb	r3, [r6, #1]
 8005458:	2b2b      	cmp	r3, #43	; 0x2b
 800545a:	d078      	beq.n	800554e <_strtod_l+0x286>
 800545c:	2b2d      	cmp	r3, #45	; 0x2d
 800545e:	d07b      	beq.n	8005558 <_strtod_l+0x290>
 8005460:	2700      	movs	r7, #0
 8005462:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8005466:	2909      	cmp	r1, #9
 8005468:	f240 8082 	bls.w	8005570 <_strtod_l+0x2a8>
 800546c:	961b      	str	r6, [sp, #108]	; 0x6c
 800546e:	2500      	movs	r5, #0
 8005470:	e09e      	b.n	80055b0 <_strtod_l+0x2e8>
 8005472:	2300      	movs	r3, #0
 8005474:	e7c9      	b.n	800540a <_strtod_l+0x142>
 8005476:	f1bb 0f08 	cmp.w	fp, #8
 800547a:	bfd5      	itete	le
 800547c:	9906      	ldrle	r1, [sp, #24]
 800547e:	9905      	ldrgt	r1, [sp, #20]
 8005480:	fb02 3301 	mlale	r3, r2, r1, r3
 8005484:	fb02 3301 	mlagt	r3, r2, r1, r3
 8005488:	f100 0001 	add.w	r0, r0, #1
 800548c:	bfd4      	ite	le
 800548e:	9306      	strle	r3, [sp, #24]
 8005490:	9305      	strgt	r3, [sp, #20]
 8005492:	f10b 0b01 	add.w	fp, fp, #1
 8005496:	901b      	str	r0, [sp, #108]	; 0x6c
 8005498:	e7bf      	b.n	800541a <_strtod_l+0x152>
 800549a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800549c:	191a      	adds	r2, r3, r4
 800549e:	921b      	str	r2, [sp, #108]	; 0x6c
 80054a0:	5d1b      	ldrb	r3, [r3, r4]
 80054a2:	f1bb 0f00 	cmp.w	fp, #0
 80054a6:	d036      	beq.n	8005516 <_strtod_l+0x24e>
 80054a8:	465c      	mov	r4, fp
 80054aa:	9004      	str	r0, [sp, #16]
 80054ac:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80054b0:	2a09      	cmp	r2, #9
 80054b2:	d912      	bls.n	80054da <_strtod_l+0x212>
 80054b4:	2201      	movs	r2, #1
 80054b6:	e7c2      	b.n	800543e <_strtod_l+0x176>
 80054b8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80054ba:	3001      	adds	r0, #1
 80054bc:	1c5a      	adds	r2, r3, #1
 80054be:	921b      	str	r2, [sp, #108]	; 0x6c
 80054c0:	785b      	ldrb	r3, [r3, #1]
 80054c2:	2b30      	cmp	r3, #48	; 0x30
 80054c4:	d0f8      	beq.n	80054b8 <_strtod_l+0x1f0>
 80054c6:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 80054ca:	2a08      	cmp	r2, #8
 80054cc:	f200 84dc 	bhi.w	8005e88 <_strtod_l+0xbc0>
 80054d0:	9004      	str	r0, [sp, #16]
 80054d2:	2000      	movs	r0, #0
 80054d4:	4604      	mov	r4, r0
 80054d6:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80054d8:	9208      	str	r2, [sp, #32]
 80054da:	3b30      	subs	r3, #48	; 0x30
 80054dc:	f100 0201 	add.w	r2, r0, #1
 80054e0:	d013      	beq.n	800550a <_strtod_l+0x242>
 80054e2:	9904      	ldr	r1, [sp, #16]
 80054e4:	1905      	adds	r5, r0, r4
 80054e6:	4411      	add	r1, r2
 80054e8:	9104      	str	r1, [sp, #16]
 80054ea:	4622      	mov	r2, r4
 80054ec:	210a      	movs	r1, #10
 80054ee:	42aa      	cmp	r2, r5
 80054f0:	d113      	bne.n	800551a <_strtod_l+0x252>
 80054f2:	1822      	adds	r2, r4, r0
 80054f4:	2a08      	cmp	r2, #8
 80054f6:	f104 0401 	add.w	r4, r4, #1
 80054fa:	4404      	add	r4, r0
 80054fc:	dc1b      	bgt.n	8005536 <_strtod_l+0x26e>
 80054fe:	220a      	movs	r2, #10
 8005500:	9906      	ldr	r1, [sp, #24]
 8005502:	fb02 3301 	mla	r3, r2, r1, r3
 8005506:	9306      	str	r3, [sp, #24]
 8005508:	2200      	movs	r2, #0
 800550a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800550c:	4610      	mov	r0, r2
 800550e:	1c59      	adds	r1, r3, #1
 8005510:	911b      	str	r1, [sp, #108]	; 0x6c
 8005512:	785b      	ldrb	r3, [r3, #1]
 8005514:	e7ca      	b.n	80054ac <_strtod_l+0x1e4>
 8005516:	4658      	mov	r0, fp
 8005518:	e7d3      	b.n	80054c2 <_strtod_l+0x1fa>
 800551a:	2a08      	cmp	r2, #8
 800551c:	dc04      	bgt.n	8005528 <_strtod_l+0x260>
 800551e:	9f06      	ldr	r7, [sp, #24]
 8005520:	434f      	muls	r7, r1
 8005522:	9706      	str	r7, [sp, #24]
 8005524:	3201      	adds	r2, #1
 8005526:	e7e2      	b.n	80054ee <_strtod_l+0x226>
 8005528:	1c57      	adds	r7, r2, #1
 800552a:	2f10      	cmp	r7, #16
 800552c:	bfde      	ittt	le
 800552e:	9f05      	ldrle	r7, [sp, #20]
 8005530:	434f      	mulle	r7, r1
 8005532:	9705      	strle	r7, [sp, #20]
 8005534:	e7f6      	b.n	8005524 <_strtod_l+0x25c>
 8005536:	2c10      	cmp	r4, #16
 8005538:	bfdf      	itttt	le
 800553a:	220a      	movle	r2, #10
 800553c:	9905      	ldrle	r1, [sp, #20]
 800553e:	fb02 3301 	mlale	r3, r2, r1, r3
 8005542:	9305      	strle	r3, [sp, #20]
 8005544:	e7e0      	b.n	8005508 <_strtod_l+0x240>
 8005546:	2300      	movs	r3, #0
 8005548:	2201      	movs	r2, #1
 800554a:	9304      	str	r3, [sp, #16]
 800554c:	e77c      	b.n	8005448 <_strtod_l+0x180>
 800554e:	2700      	movs	r7, #0
 8005550:	1cb3      	adds	r3, r6, #2
 8005552:	931b      	str	r3, [sp, #108]	; 0x6c
 8005554:	78b3      	ldrb	r3, [r6, #2]
 8005556:	e784      	b.n	8005462 <_strtod_l+0x19a>
 8005558:	2701      	movs	r7, #1
 800555a:	e7f9      	b.n	8005550 <_strtod_l+0x288>
 800555c:	08009dc0 	.word	0x08009dc0
 8005560:	08009b70 	.word	0x08009b70
 8005564:	7ff00000 	.word	0x7ff00000
 8005568:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800556a:	1c59      	adds	r1, r3, #1
 800556c:	911b      	str	r1, [sp, #108]	; 0x6c
 800556e:	785b      	ldrb	r3, [r3, #1]
 8005570:	2b30      	cmp	r3, #48	; 0x30
 8005572:	d0f9      	beq.n	8005568 <_strtod_l+0x2a0>
 8005574:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8005578:	2908      	cmp	r1, #8
 800557a:	f63f af78 	bhi.w	800546e <_strtod_l+0x1a6>
 800557e:	f04f 0e0a 	mov.w	lr, #10
 8005582:	f1a3 0c30 	sub.w	ip, r3, #48	; 0x30
 8005586:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005588:	9309      	str	r3, [sp, #36]	; 0x24
 800558a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800558c:	1c59      	adds	r1, r3, #1
 800558e:	911b      	str	r1, [sp, #108]	; 0x6c
 8005590:	785b      	ldrb	r3, [r3, #1]
 8005592:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
 8005596:	2d09      	cmp	r5, #9
 8005598:	d935      	bls.n	8005606 <_strtod_l+0x33e>
 800559a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800559c:	1b49      	subs	r1, r1, r5
 800559e:	2908      	cmp	r1, #8
 80055a0:	f644 651f 	movw	r5, #19999	; 0x4e1f
 80055a4:	dc02      	bgt.n	80055ac <_strtod_l+0x2e4>
 80055a6:	4565      	cmp	r5, ip
 80055a8:	bfa8      	it	ge
 80055aa:	4665      	movge	r5, ip
 80055ac:	b107      	cbz	r7, 80055b0 <_strtod_l+0x2e8>
 80055ae:	426d      	negs	r5, r5
 80055b0:	2c00      	cmp	r4, #0
 80055b2:	d14c      	bne.n	800564e <_strtod_l+0x386>
 80055b4:	9907      	ldr	r1, [sp, #28]
 80055b6:	4301      	orrs	r1, r0
 80055b8:	f47f aec7 	bne.w	800534a <_strtod_l+0x82>
 80055bc:	2a00      	cmp	r2, #0
 80055be:	f47f aee0 	bne.w	8005382 <_strtod_l+0xba>
 80055c2:	2b69      	cmp	r3, #105	; 0x69
 80055c4:	d026      	beq.n	8005614 <_strtod_l+0x34c>
 80055c6:	dc23      	bgt.n	8005610 <_strtod_l+0x348>
 80055c8:	2b49      	cmp	r3, #73	; 0x49
 80055ca:	d023      	beq.n	8005614 <_strtod_l+0x34c>
 80055cc:	2b4e      	cmp	r3, #78	; 0x4e
 80055ce:	f47f aed8 	bne.w	8005382 <_strtod_l+0xba>
 80055d2:	499c      	ldr	r1, [pc, #624]	; (8005844 <_strtod_l+0x57c>)
 80055d4:	a81b      	add	r0, sp, #108	; 0x6c
 80055d6:	f001 fe2b 	bl	8007230 <__match>
 80055da:	2800      	cmp	r0, #0
 80055dc:	f43f aed1 	beq.w	8005382 <_strtod_l+0xba>
 80055e0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80055e2:	781b      	ldrb	r3, [r3, #0]
 80055e4:	2b28      	cmp	r3, #40	; 0x28
 80055e6:	d12c      	bne.n	8005642 <_strtod_l+0x37a>
 80055e8:	4997      	ldr	r1, [pc, #604]	; (8005848 <_strtod_l+0x580>)
 80055ea:	aa1e      	add	r2, sp, #120	; 0x78
 80055ec:	a81b      	add	r0, sp, #108	; 0x6c
 80055ee:	f001 fe33 	bl	8007258 <__hexnan>
 80055f2:	2805      	cmp	r0, #5
 80055f4:	d125      	bne.n	8005642 <_strtod_l+0x37a>
 80055f6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80055f8:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 80055fc:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8005600:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8005604:	e6a1      	b.n	800534a <_strtod_l+0x82>
 8005606:	fb0e 3c0c 	mla	ip, lr, ip, r3
 800560a:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 800560e:	e7bc      	b.n	800558a <_strtod_l+0x2c2>
 8005610:	2b6e      	cmp	r3, #110	; 0x6e
 8005612:	e7dc      	b.n	80055ce <_strtod_l+0x306>
 8005614:	498d      	ldr	r1, [pc, #564]	; (800584c <_strtod_l+0x584>)
 8005616:	a81b      	add	r0, sp, #108	; 0x6c
 8005618:	f001 fe0a 	bl	8007230 <__match>
 800561c:	2800      	cmp	r0, #0
 800561e:	f43f aeb0 	beq.w	8005382 <_strtod_l+0xba>
 8005622:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005624:	498a      	ldr	r1, [pc, #552]	; (8005850 <_strtod_l+0x588>)
 8005626:	3b01      	subs	r3, #1
 8005628:	a81b      	add	r0, sp, #108	; 0x6c
 800562a:	931b      	str	r3, [sp, #108]	; 0x6c
 800562c:	f001 fe00 	bl	8007230 <__match>
 8005630:	b910      	cbnz	r0, 8005638 <_strtod_l+0x370>
 8005632:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005634:	3301      	adds	r3, #1
 8005636:	931b      	str	r3, [sp, #108]	; 0x6c
 8005638:	f04f 0800 	mov.w	r8, #0
 800563c:	f8df 9220 	ldr.w	r9, [pc, #544]	; 8005860 <_strtod_l+0x598>
 8005640:	e683      	b.n	800534a <_strtod_l+0x82>
 8005642:	4884      	ldr	r0, [pc, #528]	; (8005854 <_strtod_l+0x58c>)
 8005644:	f002 fda6 	bl	8008194 <nan>
 8005648:	4680      	mov	r8, r0
 800564a:	4689      	mov	r9, r1
 800564c:	e67d      	b.n	800534a <_strtod_l+0x82>
 800564e:	9b04      	ldr	r3, [sp, #16]
 8005650:	f1bb 0f00 	cmp.w	fp, #0
 8005654:	bf08      	it	eq
 8005656:	46a3      	moveq	fp, r4
 8005658:	1aeb      	subs	r3, r5, r3
 800565a:	2c10      	cmp	r4, #16
 800565c:	9806      	ldr	r0, [sp, #24]
 800565e:	4626      	mov	r6, r4
 8005660:	9307      	str	r3, [sp, #28]
 8005662:	bfa8      	it	ge
 8005664:	2610      	movge	r6, #16
 8005666:	f7fa ff71 	bl	800054c <__aeabi_ui2d>
 800566a:	2c09      	cmp	r4, #9
 800566c:	4680      	mov	r8, r0
 800566e:	4689      	mov	r9, r1
 8005670:	dd13      	ble.n	800569a <_strtod_l+0x3d2>
 8005672:	4b79      	ldr	r3, [pc, #484]	; (8005858 <_strtod_l+0x590>)
 8005674:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8005678:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800567c:	f7fa ffe0 	bl	8000640 <__aeabi_dmul>
 8005680:	4680      	mov	r8, r0
 8005682:	9805      	ldr	r0, [sp, #20]
 8005684:	4689      	mov	r9, r1
 8005686:	f7fa ff61 	bl	800054c <__aeabi_ui2d>
 800568a:	4602      	mov	r2, r0
 800568c:	460b      	mov	r3, r1
 800568e:	4640      	mov	r0, r8
 8005690:	4649      	mov	r1, r9
 8005692:	f7fa fe1f 	bl	80002d4 <__adddf3>
 8005696:	4680      	mov	r8, r0
 8005698:	4689      	mov	r9, r1
 800569a:	2c0f      	cmp	r4, #15
 800569c:	dc36      	bgt.n	800570c <_strtod_l+0x444>
 800569e:	9b07      	ldr	r3, [sp, #28]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	f43f ae52 	beq.w	800534a <_strtod_l+0x82>
 80056a6:	dd22      	ble.n	80056ee <_strtod_l+0x426>
 80056a8:	2b16      	cmp	r3, #22
 80056aa:	dc09      	bgt.n	80056c0 <_strtod_l+0x3f8>
 80056ac:	4c6a      	ldr	r4, [pc, #424]	; (8005858 <_strtod_l+0x590>)
 80056ae:	4642      	mov	r2, r8
 80056b0:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
 80056b4:	464b      	mov	r3, r9
 80056b6:	e9d4 0100 	ldrd	r0, r1, [r4]
 80056ba:	f7fa ffc1 	bl	8000640 <__aeabi_dmul>
 80056be:	e7c3      	b.n	8005648 <_strtod_l+0x380>
 80056c0:	9a07      	ldr	r2, [sp, #28]
 80056c2:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 80056c6:	4293      	cmp	r3, r2
 80056c8:	db20      	blt.n	800570c <_strtod_l+0x444>
 80056ca:	4d63      	ldr	r5, [pc, #396]	; (8005858 <_strtod_l+0x590>)
 80056cc:	f1c4 040f 	rsb	r4, r4, #15
 80056d0:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 80056d4:	4642      	mov	r2, r8
 80056d6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80056da:	464b      	mov	r3, r9
 80056dc:	f7fa ffb0 	bl	8000640 <__aeabi_dmul>
 80056e0:	9b07      	ldr	r3, [sp, #28]
 80056e2:	1b1c      	subs	r4, r3, r4
 80056e4:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 80056e8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80056ec:	e7e5      	b.n	80056ba <_strtod_l+0x3f2>
 80056ee:	9b07      	ldr	r3, [sp, #28]
 80056f0:	3316      	adds	r3, #22
 80056f2:	db0b      	blt.n	800570c <_strtod_l+0x444>
 80056f4:	9b04      	ldr	r3, [sp, #16]
 80056f6:	4a58      	ldr	r2, [pc, #352]	; (8005858 <_strtod_l+0x590>)
 80056f8:	1b5d      	subs	r5, r3, r5
 80056fa:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 80056fe:	4640      	mov	r0, r8
 8005700:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005704:	4649      	mov	r1, r9
 8005706:	f7fb f8c5 	bl	8000894 <__aeabi_ddiv>
 800570a:	e79d      	b.n	8005648 <_strtod_l+0x380>
 800570c:	9b07      	ldr	r3, [sp, #28]
 800570e:	1ba6      	subs	r6, r4, r6
 8005710:	441e      	add	r6, r3
 8005712:	2e00      	cmp	r6, #0
 8005714:	dd71      	ble.n	80057fa <_strtod_l+0x532>
 8005716:	f016 030f 	ands.w	r3, r6, #15
 800571a:	d00a      	beq.n	8005732 <_strtod_l+0x46a>
 800571c:	494e      	ldr	r1, [pc, #312]	; (8005858 <_strtod_l+0x590>)
 800571e:	4642      	mov	r2, r8
 8005720:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005724:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005728:	464b      	mov	r3, r9
 800572a:	f7fa ff89 	bl	8000640 <__aeabi_dmul>
 800572e:	4680      	mov	r8, r0
 8005730:	4689      	mov	r9, r1
 8005732:	f036 060f 	bics.w	r6, r6, #15
 8005736:	d050      	beq.n	80057da <_strtod_l+0x512>
 8005738:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 800573c:	dd27      	ble.n	800578e <_strtod_l+0x4c6>
 800573e:	f04f 0b00 	mov.w	fp, #0
 8005742:	f8cd b010 	str.w	fp, [sp, #16]
 8005746:	f8cd b020 	str.w	fp, [sp, #32]
 800574a:	f8cd b018 	str.w	fp, [sp, #24]
 800574e:	2322      	movs	r3, #34	; 0x22
 8005750:	f04f 0800 	mov.w	r8, #0
 8005754:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8005860 <_strtod_l+0x598>
 8005758:	f8ca 3000 	str.w	r3, [sl]
 800575c:	9b08      	ldr	r3, [sp, #32]
 800575e:	2b00      	cmp	r3, #0
 8005760:	f43f adf3 	beq.w	800534a <_strtod_l+0x82>
 8005764:	4650      	mov	r0, sl
 8005766:	991c      	ldr	r1, [sp, #112]	; 0x70
 8005768:	f001 fe8c 	bl	8007484 <_Bfree>
 800576c:	4650      	mov	r0, sl
 800576e:	9906      	ldr	r1, [sp, #24]
 8005770:	f001 fe88 	bl	8007484 <_Bfree>
 8005774:	4650      	mov	r0, sl
 8005776:	9904      	ldr	r1, [sp, #16]
 8005778:	f001 fe84 	bl	8007484 <_Bfree>
 800577c:	4650      	mov	r0, sl
 800577e:	9908      	ldr	r1, [sp, #32]
 8005780:	f001 fe80 	bl	8007484 <_Bfree>
 8005784:	4659      	mov	r1, fp
 8005786:	4650      	mov	r0, sl
 8005788:	f001 fe7c 	bl	8007484 <_Bfree>
 800578c:	e5dd      	b.n	800534a <_strtod_l+0x82>
 800578e:	2300      	movs	r3, #0
 8005790:	4640      	mov	r0, r8
 8005792:	4649      	mov	r1, r9
 8005794:	461f      	mov	r7, r3
 8005796:	1136      	asrs	r6, r6, #4
 8005798:	2e01      	cmp	r6, #1
 800579a:	dc21      	bgt.n	80057e0 <_strtod_l+0x518>
 800579c:	b10b      	cbz	r3, 80057a2 <_strtod_l+0x4da>
 800579e:	4680      	mov	r8, r0
 80057a0:	4689      	mov	r9, r1
 80057a2:	4b2e      	ldr	r3, [pc, #184]	; (800585c <_strtod_l+0x594>)
 80057a4:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 80057a8:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 80057ac:	4642      	mov	r2, r8
 80057ae:	e9d7 0100 	ldrd	r0, r1, [r7]
 80057b2:	464b      	mov	r3, r9
 80057b4:	f7fa ff44 	bl	8000640 <__aeabi_dmul>
 80057b8:	4b29      	ldr	r3, [pc, #164]	; (8005860 <_strtod_l+0x598>)
 80057ba:	460a      	mov	r2, r1
 80057bc:	400b      	ands	r3, r1
 80057be:	4929      	ldr	r1, [pc, #164]	; (8005864 <_strtod_l+0x59c>)
 80057c0:	4680      	mov	r8, r0
 80057c2:	428b      	cmp	r3, r1
 80057c4:	d8bb      	bhi.n	800573e <_strtod_l+0x476>
 80057c6:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80057ca:	428b      	cmp	r3, r1
 80057cc:	bf86      	itte	hi
 80057ce:	f04f 38ff 	movhi.w	r8, #4294967295	; 0xffffffff
 80057d2:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 8005868 <_strtod_l+0x5a0>
 80057d6:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 80057da:	2300      	movs	r3, #0
 80057dc:	9305      	str	r3, [sp, #20]
 80057de:	e07e      	b.n	80058de <_strtod_l+0x616>
 80057e0:	07f2      	lsls	r2, r6, #31
 80057e2:	d507      	bpl.n	80057f4 <_strtod_l+0x52c>
 80057e4:	4b1d      	ldr	r3, [pc, #116]	; (800585c <_strtod_l+0x594>)
 80057e6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80057ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057ee:	f7fa ff27 	bl	8000640 <__aeabi_dmul>
 80057f2:	2301      	movs	r3, #1
 80057f4:	3701      	adds	r7, #1
 80057f6:	1076      	asrs	r6, r6, #1
 80057f8:	e7ce      	b.n	8005798 <_strtod_l+0x4d0>
 80057fa:	d0ee      	beq.n	80057da <_strtod_l+0x512>
 80057fc:	4276      	negs	r6, r6
 80057fe:	f016 020f 	ands.w	r2, r6, #15
 8005802:	d00a      	beq.n	800581a <_strtod_l+0x552>
 8005804:	4b14      	ldr	r3, [pc, #80]	; (8005858 <_strtod_l+0x590>)
 8005806:	4640      	mov	r0, r8
 8005808:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800580c:	4649      	mov	r1, r9
 800580e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005812:	f7fb f83f 	bl	8000894 <__aeabi_ddiv>
 8005816:	4680      	mov	r8, r0
 8005818:	4689      	mov	r9, r1
 800581a:	1136      	asrs	r6, r6, #4
 800581c:	d0dd      	beq.n	80057da <_strtod_l+0x512>
 800581e:	2e1f      	cmp	r6, #31
 8005820:	dd24      	ble.n	800586c <_strtod_l+0x5a4>
 8005822:	f04f 0b00 	mov.w	fp, #0
 8005826:	f8cd b010 	str.w	fp, [sp, #16]
 800582a:	f8cd b020 	str.w	fp, [sp, #32]
 800582e:	f8cd b018 	str.w	fp, [sp, #24]
 8005832:	2322      	movs	r3, #34	; 0x22
 8005834:	f04f 0800 	mov.w	r8, #0
 8005838:	f04f 0900 	mov.w	r9, #0
 800583c:	f8ca 3000 	str.w	r3, [sl]
 8005840:	e78c      	b.n	800575c <_strtod_l+0x494>
 8005842:	bf00      	nop
 8005844:	08009b41 	.word	0x08009b41
 8005848:	08009b84 	.word	0x08009b84
 800584c:	08009b39 	.word	0x08009b39
 8005850:	08009cc4 	.word	0x08009cc4
 8005854:	08009f80 	.word	0x08009f80
 8005858:	08009e60 	.word	0x08009e60
 800585c:	08009e38 	.word	0x08009e38
 8005860:	7ff00000 	.word	0x7ff00000
 8005864:	7ca00000 	.word	0x7ca00000
 8005868:	7fefffff 	.word	0x7fefffff
 800586c:	f016 0310 	ands.w	r3, r6, #16
 8005870:	bf18      	it	ne
 8005872:	236a      	movne	r3, #106	; 0x6a
 8005874:	4640      	mov	r0, r8
 8005876:	9305      	str	r3, [sp, #20]
 8005878:	4649      	mov	r1, r9
 800587a:	2300      	movs	r3, #0
 800587c:	4fb2      	ldr	r7, [pc, #712]	; (8005b48 <_strtod_l+0x880>)
 800587e:	07f2      	lsls	r2, r6, #31
 8005880:	d504      	bpl.n	800588c <_strtod_l+0x5c4>
 8005882:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005886:	f7fa fedb 	bl	8000640 <__aeabi_dmul>
 800588a:	2301      	movs	r3, #1
 800588c:	1076      	asrs	r6, r6, #1
 800588e:	f107 0708 	add.w	r7, r7, #8
 8005892:	d1f4      	bne.n	800587e <_strtod_l+0x5b6>
 8005894:	b10b      	cbz	r3, 800589a <_strtod_l+0x5d2>
 8005896:	4680      	mov	r8, r0
 8005898:	4689      	mov	r9, r1
 800589a:	9b05      	ldr	r3, [sp, #20]
 800589c:	b1bb      	cbz	r3, 80058ce <_strtod_l+0x606>
 800589e:	f3c9 530a 	ubfx	r3, r9, #20, #11
 80058a2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	4649      	mov	r1, r9
 80058aa:	dd10      	ble.n	80058ce <_strtod_l+0x606>
 80058ac:	2b1f      	cmp	r3, #31
 80058ae:	f340 812b 	ble.w	8005b08 <_strtod_l+0x840>
 80058b2:	2b34      	cmp	r3, #52	; 0x34
 80058b4:	bfd8      	it	le
 80058b6:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
 80058ba:	f04f 0800 	mov.w	r8, #0
 80058be:	bfcf      	iteee	gt
 80058c0:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 80058c4:	3b20      	suble	r3, #32
 80058c6:	fa02 f303 	lslle.w	r3, r2, r3
 80058ca:	ea03 0901 	andle.w	r9, r3, r1
 80058ce:	2200      	movs	r2, #0
 80058d0:	2300      	movs	r3, #0
 80058d2:	4640      	mov	r0, r8
 80058d4:	4649      	mov	r1, r9
 80058d6:	f7fb f91b 	bl	8000b10 <__aeabi_dcmpeq>
 80058da:	2800      	cmp	r0, #0
 80058dc:	d1a1      	bne.n	8005822 <_strtod_l+0x55a>
 80058de:	9b06      	ldr	r3, [sp, #24]
 80058e0:	465a      	mov	r2, fp
 80058e2:	9300      	str	r3, [sp, #0]
 80058e4:	4650      	mov	r0, sl
 80058e6:	4623      	mov	r3, r4
 80058e8:	9908      	ldr	r1, [sp, #32]
 80058ea:	f001 fe37 	bl	800755c <__s2b>
 80058ee:	9008      	str	r0, [sp, #32]
 80058f0:	2800      	cmp	r0, #0
 80058f2:	f43f af24 	beq.w	800573e <_strtod_l+0x476>
 80058f6:	9b04      	ldr	r3, [sp, #16]
 80058f8:	f04f 0b00 	mov.w	fp, #0
 80058fc:	1b5d      	subs	r5, r3, r5
 80058fe:	9b07      	ldr	r3, [sp, #28]
 8005900:	f8cd b010 	str.w	fp, [sp, #16]
 8005904:	2b00      	cmp	r3, #0
 8005906:	bfb4      	ite	lt
 8005908:	462b      	movlt	r3, r5
 800590a:	2300      	movge	r3, #0
 800590c:	930e      	str	r3, [sp, #56]	; 0x38
 800590e:	9b07      	ldr	r3, [sp, #28]
 8005910:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8005914:	9316      	str	r3, [sp, #88]	; 0x58
 8005916:	9b08      	ldr	r3, [sp, #32]
 8005918:	4650      	mov	r0, sl
 800591a:	6859      	ldr	r1, [r3, #4]
 800591c:	f001 fd72 	bl	8007404 <_Balloc>
 8005920:	9006      	str	r0, [sp, #24]
 8005922:	2800      	cmp	r0, #0
 8005924:	f43f af13 	beq.w	800574e <_strtod_l+0x486>
 8005928:	9b08      	ldr	r3, [sp, #32]
 800592a:	300c      	adds	r0, #12
 800592c:	691a      	ldr	r2, [r3, #16]
 800592e:	f103 010c 	add.w	r1, r3, #12
 8005932:	3202      	adds	r2, #2
 8005934:	0092      	lsls	r2, r2, #2
 8005936:	f001 fd57 	bl	80073e8 <memcpy>
 800593a:	ab1e      	add	r3, sp, #120	; 0x78
 800593c:	9301      	str	r3, [sp, #4]
 800593e:	ab1d      	add	r3, sp, #116	; 0x74
 8005940:	9300      	str	r3, [sp, #0]
 8005942:	4642      	mov	r2, r8
 8005944:	464b      	mov	r3, r9
 8005946:	4650      	mov	r0, sl
 8005948:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
 800594c:	f002 f944 	bl	8007bd8 <__d2b>
 8005950:	901c      	str	r0, [sp, #112]	; 0x70
 8005952:	2800      	cmp	r0, #0
 8005954:	f43f aefb 	beq.w	800574e <_strtod_l+0x486>
 8005958:	2101      	movs	r1, #1
 800595a:	4650      	mov	r0, sl
 800595c:	f001 fe96 	bl	800768c <__i2b>
 8005960:	4603      	mov	r3, r0
 8005962:	9004      	str	r0, [sp, #16]
 8005964:	2800      	cmp	r0, #0
 8005966:	f43f aef2 	beq.w	800574e <_strtod_l+0x486>
 800596a:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 800596c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800596e:	2d00      	cmp	r5, #0
 8005970:	bfab      	itete	ge
 8005972:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8005974:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8005976:	18ee      	addge	r6, r5, r3
 8005978:	1b5c      	sublt	r4, r3, r5
 800597a:	9b05      	ldr	r3, [sp, #20]
 800597c:	bfa8      	it	ge
 800597e:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 8005980:	eba5 0503 	sub.w	r5, r5, r3
 8005984:	4415      	add	r5, r2
 8005986:	4b71      	ldr	r3, [pc, #452]	; (8005b4c <_strtod_l+0x884>)
 8005988:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
 800598c:	bfb8      	it	lt
 800598e:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8005990:	429d      	cmp	r5, r3
 8005992:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8005996:	f280 80c9 	bge.w	8005b2c <_strtod_l+0x864>
 800599a:	1b5b      	subs	r3, r3, r5
 800599c:	2b1f      	cmp	r3, #31
 800599e:	f04f 0701 	mov.w	r7, #1
 80059a2:	eba2 0203 	sub.w	r2, r2, r3
 80059a6:	f300 80b6 	bgt.w	8005b16 <_strtod_l+0x84e>
 80059aa:	2500      	movs	r5, #0
 80059ac:	fa07 f303 	lsl.w	r3, r7, r3
 80059b0:	930f      	str	r3, [sp, #60]	; 0x3c
 80059b2:	18b7      	adds	r7, r6, r2
 80059b4:	9b05      	ldr	r3, [sp, #20]
 80059b6:	42be      	cmp	r6, r7
 80059b8:	4414      	add	r4, r2
 80059ba:	441c      	add	r4, r3
 80059bc:	4633      	mov	r3, r6
 80059be:	bfa8      	it	ge
 80059c0:	463b      	movge	r3, r7
 80059c2:	42a3      	cmp	r3, r4
 80059c4:	bfa8      	it	ge
 80059c6:	4623      	movge	r3, r4
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	bfc2      	ittt	gt
 80059cc:	1aff      	subgt	r7, r7, r3
 80059ce:	1ae4      	subgt	r4, r4, r3
 80059d0:	1af6      	subgt	r6, r6, r3
 80059d2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	dd17      	ble.n	8005a08 <_strtod_l+0x740>
 80059d8:	461a      	mov	r2, r3
 80059da:	4650      	mov	r0, sl
 80059dc:	9904      	ldr	r1, [sp, #16]
 80059de:	f001 ff0f 	bl	8007800 <__pow5mult>
 80059e2:	9004      	str	r0, [sp, #16]
 80059e4:	2800      	cmp	r0, #0
 80059e6:	f43f aeb2 	beq.w	800574e <_strtod_l+0x486>
 80059ea:	4601      	mov	r1, r0
 80059ec:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80059ee:	4650      	mov	r0, sl
 80059f0:	f001 fe62 	bl	80076b8 <__multiply>
 80059f4:	9009      	str	r0, [sp, #36]	; 0x24
 80059f6:	2800      	cmp	r0, #0
 80059f8:	f43f aea9 	beq.w	800574e <_strtod_l+0x486>
 80059fc:	4650      	mov	r0, sl
 80059fe:	991c      	ldr	r1, [sp, #112]	; 0x70
 8005a00:	f001 fd40 	bl	8007484 <_Bfree>
 8005a04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a06:	931c      	str	r3, [sp, #112]	; 0x70
 8005a08:	2f00      	cmp	r7, #0
 8005a0a:	f300 8093 	bgt.w	8005b34 <_strtod_l+0x86c>
 8005a0e:	9b07      	ldr	r3, [sp, #28]
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	dd08      	ble.n	8005a26 <_strtod_l+0x75e>
 8005a14:	4650      	mov	r0, sl
 8005a16:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8005a18:	9906      	ldr	r1, [sp, #24]
 8005a1a:	f001 fef1 	bl	8007800 <__pow5mult>
 8005a1e:	9006      	str	r0, [sp, #24]
 8005a20:	2800      	cmp	r0, #0
 8005a22:	f43f ae94 	beq.w	800574e <_strtod_l+0x486>
 8005a26:	2c00      	cmp	r4, #0
 8005a28:	dd08      	ble.n	8005a3c <_strtod_l+0x774>
 8005a2a:	4622      	mov	r2, r4
 8005a2c:	4650      	mov	r0, sl
 8005a2e:	9906      	ldr	r1, [sp, #24]
 8005a30:	f001 ff40 	bl	80078b4 <__lshift>
 8005a34:	9006      	str	r0, [sp, #24]
 8005a36:	2800      	cmp	r0, #0
 8005a38:	f43f ae89 	beq.w	800574e <_strtod_l+0x486>
 8005a3c:	2e00      	cmp	r6, #0
 8005a3e:	dd08      	ble.n	8005a52 <_strtod_l+0x78a>
 8005a40:	4632      	mov	r2, r6
 8005a42:	4650      	mov	r0, sl
 8005a44:	9904      	ldr	r1, [sp, #16]
 8005a46:	f001 ff35 	bl	80078b4 <__lshift>
 8005a4a:	9004      	str	r0, [sp, #16]
 8005a4c:	2800      	cmp	r0, #0
 8005a4e:	f43f ae7e 	beq.w	800574e <_strtod_l+0x486>
 8005a52:	4650      	mov	r0, sl
 8005a54:	9a06      	ldr	r2, [sp, #24]
 8005a56:	991c      	ldr	r1, [sp, #112]	; 0x70
 8005a58:	f001 ffb4 	bl	80079c4 <__mdiff>
 8005a5c:	4683      	mov	fp, r0
 8005a5e:	2800      	cmp	r0, #0
 8005a60:	f43f ae75 	beq.w	800574e <_strtod_l+0x486>
 8005a64:	2400      	movs	r4, #0
 8005a66:	68c3      	ldr	r3, [r0, #12]
 8005a68:	9904      	ldr	r1, [sp, #16]
 8005a6a:	60c4      	str	r4, [r0, #12]
 8005a6c:	930d      	str	r3, [sp, #52]	; 0x34
 8005a6e:	f001 ff8d 	bl	800798c <__mcmp>
 8005a72:	42a0      	cmp	r0, r4
 8005a74:	da70      	bge.n	8005b58 <_strtod_l+0x890>
 8005a76:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005a78:	ea53 0308 	orrs.w	r3, r3, r8
 8005a7c:	f040 8096 	bne.w	8005bac <_strtod_l+0x8e4>
 8005a80:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	f040 8091 	bne.w	8005bac <_strtod_l+0x8e4>
 8005a8a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005a8e:	0d1b      	lsrs	r3, r3, #20
 8005a90:	051b      	lsls	r3, r3, #20
 8005a92:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8005a96:	f240 8089 	bls.w	8005bac <_strtod_l+0x8e4>
 8005a9a:	f8db 3014 	ldr.w	r3, [fp, #20]
 8005a9e:	b923      	cbnz	r3, 8005aaa <_strtod_l+0x7e2>
 8005aa0:	f8db 3010 	ldr.w	r3, [fp, #16]
 8005aa4:	2b01      	cmp	r3, #1
 8005aa6:	f340 8081 	ble.w	8005bac <_strtod_l+0x8e4>
 8005aaa:	4659      	mov	r1, fp
 8005aac:	2201      	movs	r2, #1
 8005aae:	4650      	mov	r0, sl
 8005ab0:	f001 ff00 	bl	80078b4 <__lshift>
 8005ab4:	9904      	ldr	r1, [sp, #16]
 8005ab6:	4683      	mov	fp, r0
 8005ab8:	f001 ff68 	bl	800798c <__mcmp>
 8005abc:	2800      	cmp	r0, #0
 8005abe:	dd75      	ble.n	8005bac <_strtod_l+0x8e4>
 8005ac0:	9905      	ldr	r1, [sp, #20]
 8005ac2:	464b      	mov	r3, r9
 8005ac4:	4a22      	ldr	r2, [pc, #136]	; (8005b50 <_strtod_l+0x888>)
 8005ac6:	2900      	cmp	r1, #0
 8005ac8:	f000 8091 	beq.w	8005bee <_strtod_l+0x926>
 8005acc:	ea02 0109 	and.w	r1, r2, r9
 8005ad0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8005ad4:	f300 808b 	bgt.w	8005bee <_strtod_l+0x926>
 8005ad8:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8005adc:	f77f aea9 	ble.w	8005832 <_strtod_l+0x56a>
 8005ae0:	2300      	movs	r3, #0
 8005ae2:	4a1c      	ldr	r2, [pc, #112]	; (8005b54 <_strtod_l+0x88c>)
 8005ae4:	4640      	mov	r0, r8
 8005ae6:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8005aea:	4649      	mov	r1, r9
 8005aec:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8005af0:	f7fa fda6 	bl	8000640 <__aeabi_dmul>
 8005af4:	460b      	mov	r3, r1
 8005af6:	4303      	orrs	r3, r0
 8005af8:	bf08      	it	eq
 8005afa:	2322      	moveq	r3, #34	; 0x22
 8005afc:	4680      	mov	r8, r0
 8005afe:	4689      	mov	r9, r1
 8005b00:	bf08      	it	eq
 8005b02:	f8ca 3000 	streq.w	r3, [sl]
 8005b06:	e62d      	b.n	8005764 <_strtod_l+0x49c>
 8005b08:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8005b10:	ea03 0808 	and.w	r8, r3, r8
 8005b14:	e6db      	b.n	80058ce <_strtod_l+0x606>
 8005b16:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 8005b1a:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 8005b1e:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 8005b22:	35e2      	adds	r5, #226	; 0xe2
 8005b24:	fa07 f505 	lsl.w	r5, r7, r5
 8005b28:	970f      	str	r7, [sp, #60]	; 0x3c
 8005b2a:	e742      	b.n	80059b2 <_strtod_l+0x6ea>
 8005b2c:	2301      	movs	r3, #1
 8005b2e:	2500      	movs	r5, #0
 8005b30:	930f      	str	r3, [sp, #60]	; 0x3c
 8005b32:	e73e      	b.n	80059b2 <_strtod_l+0x6ea>
 8005b34:	463a      	mov	r2, r7
 8005b36:	4650      	mov	r0, sl
 8005b38:	991c      	ldr	r1, [sp, #112]	; 0x70
 8005b3a:	f001 febb 	bl	80078b4 <__lshift>
 8005b3e:	901c      	str	r0, [sp, #112]	; 0x70
 8005b40:	2800      	cmp	r0, #0
 8005b42:	f47f af64 	bne.w	8005a0e <_strtod_l+0x746>
 8005b46:	e602      	b.n	800574e <_strtod_l+0x486>
 8005b48:	08009b98 	.word	0x08009b98
 8005b4c:	fffffc02 	.word	0xfffffc02
 8005b50:	7ff00000 	.word	0x7ff00000
 8005b54:	39500000 	.word	0x39500000
 8005b58:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8005b5c:	d166      	bne.n	8005c2c <_strtod_l+0x964>
 8005b5e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005b60:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005b64:	b35a      	cbz	r2, 8005bbe <_strtod_l+0x8f6>
 8005b66:	4a9c      	ldr	r2, [pc, #624]	; (8005dd8 <_strtod_l+0xb10>)
 8005b68:	4293      	cmp	r3, r2
 8005b6a:	d12c      	bne.n	8005bc6 <_strtod_l+0x8fe>
 8005b6c:	9b05      	ldr	r3, [sp, #20]
 8005b6e:	4640      	mov	r0, r8
 8005b70:	b303      	cbz	r3, 8005bb4 <_strtod_l+0x8ec>
 8005b72:	464b      	mov	r3, r9
 8005b74:	4a99      	ldr	r2, [pc, #612]	; (8005ddc <_strtod_l+0xb14>)
 8005b76:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005b7a:	401a      	ands	r2, r3
 8005b7c:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8005b80:	d81b      	bhi.n	8005bba <_strtod_l+0x8f2>
 8005b82:	0d12      	lsrs	r2, r2, #20
 8005b84:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8005b88:	fa01 f303 	lsl.w	r3, r1, r3
 8005b8c:	4298      	cmp	r0, r3
 8005b8e:	d11a      	bne.n	8005bc6 <_strtod_l+0x8fe>
 8005b90:	4b93      	ldr	r3, [pc, #588]	; (8005de0 <_strtod_l+0xb18>)
 8005b92:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005b94:	429a      	cmp	r2, r3
 8005b96:	d102      	bne.n	8005b9e <_strtod_l+0x8d6>
 8005b98:	3001      	adds	r0, #1
 8005b9a:	f43f add8 	beq.w	800574e <_strtod_l+0x486>
 8005b9e:	f04f 0800 	mov.w	r8, #0
 8005ba2:	4b8e      	ldr	r3, [pc, #568]	; (8005ddc <_strtod_l+0xb14>)
 8005ba4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005ba6:	401a      	ands	r2, r3
 8005ba8:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 8005bac:	9b05      	ldr	r3, [sp, #20]
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d196      	bne.n	8005ae0 <_strtod_l+0x818>
 8005bb2:	e5d7      	b.n	8005764 <_strtod_l+0x49c>
 8005bb4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005bb8:	e7e8      	b.n	8005b8c <_strtod_l+0x8c4>
 8005bba:	460b      	mov	r3, r1
 8005bbc:	e7e6      	b.n	8005b8c <_strtod_l+0x8c4>
 8005bbe:	ea53 0308 	orrs.w	r3, r3, r8
 8005bc2:	f43f af7d 	beq.w	8005ac0 <_strtod_l+0x7f8>
 8005bc6:	b1e5      	cbz	r5, 8005c02 <_strtod_l+0x93a>
 8005bc8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005bca:	421d      	tst	r5, r3
 8005bcc:	d0ee      	beq.n	8005bac <_strtod_l+0x8e4>
 8005bce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005bd0:	4640      	mov	r0, r8
 8005bd2:	4649      	mov	r1, r9
 8005bd4:	9a05      	ldr	r2, [sp, #20]
 8005bd6:	b1c3      	cbz	r3, 8005c0a <_strtod_l+0x942>
 8005bd8:	f7ff fb54 	bl	8005284 <sulp>
 8005bdc:	4602      	mov	r2, r0
 8005bde:	460b      	mov	r3, r1
 8005be0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005be4:	f7fa fb76 	bl	80002d4 <__adddf3>
 8005be8:	4680      	mov	r8, r0
 8005bea:	4689      	mov	r9, r1
 8005bec:	e7de      	b.n	8005bac <_strtod_l+0x8e4>
 8005bee:	4013      	ands	r3, r2
 8005bf0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8005bf4:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8005bf8:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8005bfc:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8005c00:	e7d4      	b.n	8005bac <_strtod_l+0x8e4>
 8005c02:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005c04:	ea13 0f08 	tst.w	r3, r8
 8005c08:	e7e0      	b.n	8005bcc <_strtod_l+0x904>
 8005c0a:	f7ff fb3b 	bl	8005284 <sulp>
 8005c0e:	4602      	mov	r2, r0
 8005c10:	460b      	mov	r3, r1
 8005c12:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005c16:	f7fa fb5b 	bl	80002d0 <__aeabi_dsub>
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	2300      	movs	r3, #0
 8005c1e:	4680      	mov	r8, r0
 8005c20:	4689      	mov	r9, r1
 8005c22:	f7fa ff75 	bl	8000b10 <__aeabi_dcmpeq>
 8005c26:	2800      	cmp	r0, #0
 8005c28:	d0c0      	beq.n	8005bac <_strtod_l+0x8e4>
 8005c2a:	e602      	b.n	8005832 <_strtod_l+0x56a>
 8005c2c:	4658      	mov	r0, fp
 8005c2e:	9904      	ldr	r1, [sp, #16]
 8005c30:	f002 f82e 	bl	8007c90 <__ratio>
 8005c34:	2200      	movs	r2, #0
 8005c36:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005c3a:	4606      	mov	r6, r0
 8005c3c:	460f      	mov	r7, r1
 8005c3e:	f7fa ff7b 	bl	8000b38 <__aeabi_dcmple>
 8005c42:	2800      	cmp	r0, #0
 8005c44:	d075      	beq.n	8005d32 <_strtod_l+0xa6a>
 8005c46:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d047      	beq.n	8005cdc <_strtod_l+0xa14>
 8005c4c:	2600      	movs	r6, #0
 8005c4e:	4f65      	ldr	r7, [pc, #404]	; (8005de4 <_strtod_l+0xb1c>)
 8005c50:	4d64      	ldr	r5, [pc, #400]	; (8005de4 <_strtod_l+0xb1c>)
 8005c52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c54:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005c58:	0d1b      	lsrs	r3, r3, #20
 8005c5a:	051b      	lsls	r3, r3, #20
 8005c5c:	930f      	str	r3, [sp, #60]	; 0x3c
 8005c5e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005c60:	4b61      	ldr	r3, [pc, #388]	; (8005de8 <_strtod_l+0xb20>)
 8005c62:	429a      	cmp	r2, r3
 8005c64:	f040 80c8 	bne.w	8005df8 <_strtod_l+0xb30>
 8005c68:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005c6c:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8005c70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c72:	4640      	mov	r0, r8
 8005c74:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 8005c78:	4649      	mov	r1, r9
 8005c7a:	f001 ff33 	bl	8007ae4 <__ulp>
 8005c7e:	4602      	mov	r2, r0
 8005c80:	460b      	mov	r3, r1
 8005c82:	4630      	mov	r0, r6
 8005c84:	4639      	mov	r1, r7
 8005c86:	f7fa fcdb 	bl	8000640 <__aeabi_dmul>
 8005c8a:	4642      	mov	r2, r8
 8005c8c:	464b      	mov	r3, r9
 8005c8e:	f7fa fb21 	bl	80002d4 <__adddf3>
 8005c92:	460b      	mov	r3, r1
 8005c94:	4951      	ldr	r1, [pc, #324]	; (8005ddc <_strtod_l+0xb14>)
 8005c96:	4a55      	ldr	r2, [pc, #340]	; (8005dec <_strtod_l+0xb24>)
 8005c98:	4019      	ands	r1, r3
 8005c9a:	4291      	cmp	r1, r2
 8005c9c:	4680      	mov	r8, r0
 8005c9e:	d95e      	bls.n	8005d5e <_strtod_l+0xa96>
 8005ca0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005ca2:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8005ca6:	4293      	cmp	r3, r2
 8005ca8:	d103      	bne.n	8005cb2 <_strtod_l+0x9ea>
 8005caa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005cac:	3301      	adds	r3, #1
 8005cae:	f43f ad4e 	beq.w	800574e <_strtod_l+0x486>
 8005cb2:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8005cb6:	f8df 9128 	ldr.w	r9, [pc, #296]	; 8005de0 <_strtod_l+0xb18>
 8005cba:	4650      	mov	r0, sl
 8005cbc:	991c      	ldr	r1, [sp, #112]	; 0x70
 8005cbe:	f001 fbe1 	bl	8007484 <_Bfree>
 8005cc2:	4650      	mov	r0, sl
 8005cc4:	9906      	ldr	r1, [sp, #24]
 8005cc6:	f001 fbdd 	bl	8007484 <_Bfree>
 8005cca:	4650      	mov	r0, sl
 8005ccc:	9904      	ldr	r1, [sp, #16]
 8005cce:	f001 fbd9 	bl	8007484 <_Bfree>
 8005cd2:	4659      	mov	r1, fp
 8005cd4:	4650      	mov	r0, sl
 8005cd6:	f001 fbd5 	bl	8007484 <_Bfree>
 8005cda:	e61c      	b.n	8005916 <_strtod_l+0x64e>
 8005cdc:	f1b8 0f00 	cmp.w	r8, #0
 8005ce0:	d119      	bne.n	8005d16 <_strtod_l+0xa4e>
 8005ce2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ce4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005ce8:	b9e3      	cbnz	r3, 8005d24 <_strtod_l+0xa5c>
 8005cea:	2200      	movs	r2, #0
 8005cec:	4630      	mov	r0, r6
 8005cee:	4639      	mov	r1, r7
 8005cf0:	4b3c      	ldr	r3, [pc, #240]	; (8005de4 <_strtod_l+0xb1c>)
 8005cf2:	f7fa ff17 	bl	8000b24 <__aeabi_dcmplt>
 8005cf6:	b9c8      	cbnz	r0, 8005d2c <_strtod_l+0xa64>
 8005cf8:	2200      	movs	r2, #0
 8005cfa:	4630      	mov	r0, r6
 8005cfc:	4639      	mov	r1, r7
 8005cfe:	4b3c      	ldr	r3, [pc, #240]	; (8005df0 <_strtod_l+0xb28>)
 8005d00:	f7fa fc9e 	bl	8000640 <__aeabi_dmul>
 8005d04:	4604      	mov	r4, r0
 8005d06:	460d      	mov	r5, r1
 8005d08:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8005d0c:	9418      	str	r4, [sp, #96]	; 0x60
 8005d0e:	9319      	str	r3, [sp, #100]	; 0x64
 8005d10:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 8005d14:	e79d      	b.n	8005c52 <_strtod_l+0x98a>
 8005d16:	f1b8 0f01 	cmp.w	r8, #1
 8005d1a:	d103      	bne.n	8005d24 <_strtod_l+0xa5c>
 8005d1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	f43f ad87 	beq.w	8005832 <_strtod_l+0x56a>
 8005d24:	2600      	movs	r6, #0
 8005d26:	2400      	movs	r4, #0
 8005d28:	4f32      	ldr	r7, [pc, #200]	; (8005df4 <_strtod_l+0xb2c>)
 8005d2a:	e791      	b.n	8005c50 <_strtod_l+0x988>
 8005d2c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8005d2e:	4d30      	ldr	r5, [pc, #192]	; (8005df0 <_strtod_l+0xb28>)
 8005d30:	e7ea      	b.n	8005d08 <_strtod_l+0xa40>
 8005d32:	4b2f      	ldr	r3, [pc, #188]	; (8005df0 <_strtod_l+0xb28>)
 8005d34:	2200      	movs	r2, #0
 8005d36:	4630      	mov	r0, r6
 8005d38:	4639      	mov	r1, r7
 8005d3a:	f7fa fc81 	bl	8000640 <__aeabi_dmul>
 8005d3e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005d40:	4604      	mov	r4, r0
 8005d42:	460d      	mov	r5, r1
 8005d44:	b933      	cbnz	r3, 8005d54 <_strtod_l+0xa8c>
 8005d46:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005d4a:	9010      	str	r0, [sp, #64]	; 0x40
 8005d4c:	9311      	str	r3, [sp, #68]	; 0x44
 8005d4e:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8005d52:	e77e      	b.n	8005c52 <_strtod_l+0x98a>
 8005d54:	4602      	mov	r2, r0
 8005d56:	460b      	mov	r3, r1
 8005d58:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8005d5c:	e7f7      	b.n	8005d4e <_strtod_l+0xa86>
 8005d5e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8005d62:	9b05      	ldr	r3, [sp, #20]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d1a8      	bne.n	8005cba <_strtod_l+0x9f2>
 8005d68:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005d6c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005d6e:	0d1b      	lsrs	r3, r3, #20
 8005d70:	051b      	lsls	r3, r3, #20
 8005d72:	429a      	cmp	r2, r3
 8005d74:	d1a1      	bne.n	8005cba <_strtod_l+0x9f2>
 8005d76:	4620      	mov	r0, r4
 8005d78:	4629      	mov	r1, r5
 8005d7a:	f7fa ffa9 	bl	8000cd0 <__aeabi_d2lz>
 8005d7e:	f7fa fc31 	bl	80005e4 <__aeabi_l2d>
 8005d82:	4602      	mov	r2, r0
 8005d84:	460b      	mov	r3, r1
 8005d86:	4620      	mov	r0, r4
 8005d88:	4629      	mov	r1, r5
 8005d8a:	f7fa faa1 	bl	80002d0 <__aeabi_dsub>
 8005d8e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005d90:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005d94:	ea43 0308 	orr.w	r3, r3, r8
 8005d98:	4313      	orrs	r3, r2
 8005d9a:	4604      	mov	r4, r0
 8005d9c:	460d      	mov	r5, r1
 8005d9e:	d066      	beq.n	8005e6e <_strtod_l+0xba6>
 8005da0:	a309      	add	r3, pc, #36	; (adr r3, 8005dc8 <_strtod_l+0xb00>)
 8005da2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005da6:	f7fa febd 	bl	8000b24 <__aeabi_dcmplt>
 8005daa:	2800      	cmp	r0, #0
 8005dac:	f47f acda 	bne.w	8005764 <_strtod_l+0x49c>
 8005db0:	a307      	add	r3, pc, #28	; (adr r3, 8005dd0 <_strtod_l+0xb08>)
 8005db2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005db6:	4620      	mov	r0, r4
 8005db8:	4629      	mov	r1, r5
 8005dba:	f7fa fed1 	bl	8000b60 <__aeabi_dcmpgt>
 8005dbe:	2800      	cmp	r0, #0
 8005dc0:	f43f af7b 	beq.w	8005cba <_strtod_l+0x9f2>
 8005dc4:	e4ce      	b.n	8005764 <_strtod_l+0x49c>
 8005dc6:	bf00      	nop
 8005dc8:	94a03595 	.word	0x94a03595
 8005dcc:	3fdfffff 	.word	0x3fdfffff
 8005dd0:	35afe535 	.word	0x35afe535
 8005dd4:	3fe00000 	.word	0x3fe00000
 8005dd8:	000fffff 	.word	0x000fffff
 8005ddc:	7ff00000 	.word	0x7ff00000
 8005de0:	7fefffff 	.word	0x7fefffff
 8005de4:	3ff00000 	.word	0x3ff00000
 8005de8:	7fe00000 	.word	0x7fe00000
 8005dec:	7c9fffff 	.word	0x7c9fffff
 8005df0:	3fe00000 	.word	0x3fe00000
 8005df4:	bff00000 	.word	0xbff00000
 8005df8:	9b05      	ldr	r3, [sp, #20]
 8005dfa:	b313      	cbz	r3, 8005e42 <_strtod_l+0xb7a>
 8005dfc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005dfe:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8005e02:	d81e      	bhi.n	8005e42 <_strtod_l+0xb7a>
 8005e04:	a326      	add	r3, pc, #152	; (adr r3, 8005ea0 <_strtod_l+0xbd8>)
 8005e06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e0a:	4620      	mov	r0, r4
 8005e0c:	4629      	mov	r1, r5
 8005e0e:	f7fa fe93 	bl	8000b38 <__aeabi_dcmple>
 8005e12:	b190      	cbz	r0, 8005e3a <_strtod_l+0xb72>
 8005e14:	4629      	mov	r1, r5
 8005e16:	4620      	mov	r0, r4
 8005e18:	f7fa feea 	bl	8000bf0 <__aeabi_d2uiz>
 8005e1c:	2801      	cmp	r0, #1
 8005e1e:	bf38      	it	cc
 8005e20:	2001      	movcc	r0, #1
 8005e22:	f7fa fb93 	bl	800054c <__aeabi_ui2d>
 8005e26:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005e28:	4604      	mov	r4, r0
 8005e2a:	460d      	mov	r5, r1
 8005e2c:	b9d3      	cbnz	r3, 8005e64 <_strtod_l+0xb9c>
 8005e2e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005e32:	9012      	str	r0, [sp, #72]	; 0x48
 8005e34:	9313      	str	r3, [sp, #76]	; 0x4c
 8005e36:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 8005e3a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005e3c:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8005e40:	1a9f      	subs	r7, r3, r2
 8005e42:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005e46:	f001 fe4d 	bl	8007ae4 <__ulp>
 8005e4a:	4602      	mov	r2, r0
 8005e4c:	460b      	mov	r3, r1
 8005e4e:	4630      	mov	r0, r6
 8005e50:	4639      	mov	r1, r7
 8005e52:	f7fa fbf5 	bl	8000640 <__aeabi_dmul>
 8005e56:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005e5a:	f7fa fa3b 	bl	80002d4 <__adddf3>
 8005e5e:	4680      	mov	r8, r0
 8005e60:	4689      	mov	r9, r1
 8005e62:	e77e      	b.n	8005d62 <_strtod_l+0xa9a>
 8005e64:	4602      	mov	r2, r0
 8005e66:	460b      	mov	r3, r1
 8005e68:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8005e6c:	e7e3      	b.n	8005e36 <_strtod_l+0xb6e>
 8005e6e:	a30e      	add	r3, pc, #56	; (adr r3, 8005ea8 <_strtod_l+0xbe0>)
 8005e70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e74:	f7fa fe56 	bl	8000b24 <__aeabi_dcmplt>
 8005e78:	e7a1      	b.n	8005dbe <_strtod_l+0xaf6>
 8005e7a:	2300      	movs	r3, #0
 8005e7c:	930c      	str	r3, [sp, #48]	; 0x30
 8005e7e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005e80:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8005e82:	6013      	str	r3, [r2, #0]
 8005e84:	f7ff ba65 	b.w	8005352 <_strtod_l+0x8a>
 8005e88:	2b65      	cmp	r3, #101	; 0x65
 8005e8a:	f43f ab5c 	beq.w	8005546 <_strtod_l+0x27e>
 8005e8e:	2b45      	cmp	r3, #69	; 0x45
 8005e90:	f43f ab59 	beq.w	8005546 <_strtod_l+0x27e>
 8005e94:	2201      	movs	r2, #1
 8005e96:	f7ff bb8d 	b.w	80055b4 <_strtod_l+0x2ec>
 8005e9a:	bf00      	nop
 8005e9c:	f3af 8000 	nop.w
 8005ea0:	ffc00000 	.word	0xffc00000
 8005ea4:	41dfffff 	.word	0x41dfffff
 8005ea8:	94a03595 	.word	0x94a03595
 8005eac:	3fcfffff 	.word	0x3fcfffff

08005eb0 <_strtod_r>:
 8005eb0:	4b01      	ldr	r3, [pc, #4]	; (8005eb8 <_strtod_r+0x8>)
 8005eb2:	f7ff ba09 	b.w	80052c8 <_strtod_l>
 8005eb6:	bf00      	nop
 8005eb8:	2000007c 	.word	0x2000007c

08005ebc <_strtol_l.isra.0>:
 8005ebc:	2b01      	cmp	r3, #1
 8005ebe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ec2:	4686      	mov	lr, r0
 8005ec4:	d001      	beq.n	8005eca <_strtol_l.isra.0+0xe>
 8005ec6:	2b24      	cmp	r3, #36	; 0x24
 8005ec8:	d906      	bls.n	8005ed8 <_strtol_l.isra.0+0x1c>
 8005eca:	f7fe fb13 	bl	80044f4 <__errno>
 8005ece:	2316      	movs	r3, #22
 8005ed0:	6003      	str	r3, [r0, #0]
 8005ed2:	2000      	movs	r0, #0
 8005ed4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ed8:	468c      	mov	ip, r1
 8005eda:	4e3a      	ldr	r6, [pc, #232]	; (8005fc4 <_strtol_l.isra.0+0x108>)
 8005edc:	4660      	mov	r0, ip
 8005ede:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8005ee2:	5da5      	ldrb	r5, [r4, r6]
 8005ee4:	f015 0508 	ands.w	r5, r5, #8
 8005ee8:	d1f8      	bne.n	8005edc <_strtol_l.isra.0+0x20>
 8005eea:	2c2d      	cmp	r4, #45	; 0x2d
 8005eec:	d133      	bne.n	8005f56 <_strtol_l.isra.0+0x9a>
 8005eee:	f04f 0801 	mov.w	r8, #1
 8005ef2:	f89c 4000 	ldrb.w	r4, [ip]
 8005ef6:	f100 0c02 	add.w	ip, r0, #2
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d05d      	beq.n	8005fba <_strtol_l.isra.0+0xfe>
 8005efe:	2b10      	cmp	r3, #16
 8005f00:	d10c      	bne.n	8005f1c <_strtol_l.isra.0+0x60>
 8005f02:	2c30      	cmp	r4, #48	; 0x30
 8005f04:	d10a      	bne.n	8005f1c <_strtol_l.isra.0+0x60>
 8005f06:	f89c 0000 	ldrb.w	r0, [ip]
 8005f0a:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8005f0e:	2858      	cmp	r0, #88	; 0x58
 8005f10:	d14e      	bne.n	8005fb0 <_strtol_l.isra.0+0xf4>
 8005f12:	2310      	movs	r3, #16
 8005f14:	f89c 4001 	ldrb.w	r4, [ip, #1]
 8005f18:	f10c 0c02 	add.w	ip, ip, #2
 8005f1c:	2500      	movs	r5, #0
 8005f1e:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
 8005f22:	3f01      	subs	r7, #1
 8005f24:	fbb7 f9f3 	udiv	r9, r7, r3
 8005f28:	4628      	mov	r0, r5
 8005f2a:	fb03 7a19 	mls	sl, r3, r9, r7
 8005f2e:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 8005f32:	2e09      	cmp	r6, #9
 8005f34:	d818      	bhi.n	8005f68 <_strtol_l.isra.0+0xac>
 8005f36:	4634      	mov	r4, r6
 8005f38:	42a3      	cmp	r3, r4
 8005f3a:	dd24      	ble.n	8005f86 <_strtol_l.isra.0+0xca>
 8005f3c:	2d00      	cmp	r5, #0
 8005f3e:	db1f      	blt.n	8005f80 <_strtol_l.isra.0+0xc4>
 8005f40:	4581      	cmp	r9, r0
 8005f42:	d31d      	bcc.n	8005f80 <_strtol_l.isra.0+0xc4>
 8005f44:	d101      	bne.n	8005f4a <_strtol_l.isra.0+0x8e>
 8005f46:	45a2      	cmp	sl, r4
 8005f48:	db1a      	blt.n	8005f80 <_strtol_l.isra.0+0xc4>
 8005f4a:	2501      	movs	r5, #1
 8005f4c:	fb00 4003 	mla	r0, r0, r3, r4
 8005f50:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8005f54:	e7eb      	b.n	8005f2e <_strtol_l.isra.0+0x72>
 8005f56:	2c2b      	cmp	r4, #43	; 0x2b
 8005f58:	bf08      	it	eq
 8005f5a:	f89c 4000 	ldrbeq.w	r4, [ip]
 8005f5e:	46a8      	mov	r8, r5
 8005f60:	bf08      	it	eq
 8005f62:	f100 0c02 	addeq.w	ip, r0, #2
 8005f66:	e7c8      	b.n	8005efa <_strtol_l.isra.0+0x3e>
 8005f68:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 8005f6c:	2e19      	cmp	r6, #25
 8005f6e:	d801      	bhi.n	8005f74 <_strtol_l.isra.0+0xb8>
 8005f70:	3c37      	subs	r4, #55	; 0x37
 8005f72:	e7e1      	b.n	8005f38 <_strtol_l.isra.0+0x7c>
 8005f74:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 8005f78:	2e19      	cmp	r6, #25
 8005f7a:	d804      	bhi.n	8005f86 <_strtol_l.isra.0+0xca>
 8005f7c:	3c57      	subs	r4, #87	; 0x57
 8005f7e:	e7db      	b.n	8005f38 <_strtol_l.isra.0+0x7c>
 8005f80:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8005f84:	e7e4      	b.n	8005f50 <_strtol_l.isra.0+0x94>
 8005f86:	2d00      	cmp	r5, #0
 8005f88:	da08      	bge.n	8005f9c <_strtol_l.isra.0+0xe0>
 8005f8a:	2322      	movs	r3, #34	; 0x22
 8005f8c:	4638      	mov	r0, r7
 8005f8e:	f8ce 3000 	str.w	r3, [lr]
 8005f92:	2a00      	cmp	r2, #0
 8005f94:	d09e      	beq.n	8005ed4 <_strtol_l.isra.0+0x18>
 8005f96:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
 8005f9a:	e007      	b.n	8005fac <_strtol_l.isra.0+0xf0>
 8005f9c:	f1b8 0f00 	cmp.w	r8, #0
 8005fa0:	d000      	beq.n	8005fa4 <_strtol_l.isra.0+0xe8>
 8005fa2:	4240      	negs	r0, r0
 8005fa4:	2a00      	cmp	r2, #0
 8005fa6:	d095      	beq.n	8005ed4 <_strtol_l.isra.0+0x18>
 8005fa8:	2d00      	cmp	r5, #0
 8005faa:	d1f4      	bne.n	8005f96 <_strtol_l.isra.0+0xda>
 8005fac:	6011      	str	r1, [r2, #0]
 8005fae:	e791      	b.n	8005ed4 <_strtol_l.isra.0+0x18>
 8005fb0:	2430      	movs	r4, #48	; 0x30
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d1b2      	bne.n	8005f1c <_strtol_l.isra.0+0x60>
 8005fb6:	2308      	movs	r3, #8
 8005fb8:	e7b0      	b.n	8005f1c <_strtol_l.isra.0+0x60>
 8005fba:	2c30      	cmp	r4, #48	; 0x30
 8005fbc:	d0a3      	beq.n	8005f06 <_strtol_l.isra.0+0x4a>
 8005fbe:	230a      	movs	r3, #10
 8005fc0:	e7ac      	b.n	8005f1c <_strtol_l.isra.0+0x60>
 8005fc2:	bf00      	nop
 8005fc4:	08009bc1 	.word	0x08009bc1

08005fc8 <_strtol_r>:
 8005fc8:	f7ff bf78 	b.w	8005ebc <_strtol_l.isra.0>

08005fcc <quorem>:
 8005fcc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fd0:	6903      	ldr	r3, [r0, #16]
 8005fd2:	690c      	ldr	r4, [r1, #16]
 8005fd4:	4607      	mov	r7, r0
 8005fd6:	42a3      	cmp	r3, r4
 8005fd8:	f2c0 8083 	blt.w	80060e2 <quorem+0x116>
 8005fdc:	3c01      	subs	r4, #1
 8005fde:	f100 0514 	add.w	r5, r0, #20
 8005fe2:	f101 0814 	add.w	r8, r1, #20
 8005fe6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005fea:	9301      	str	r3, [sp, #4]
 8005fec:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005ff0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005ff4:	3301      	adds	r3, #1
 8005ff6:	429a      	cmp	r2, r3
 8005ff8:	fbb2 f6f3 	udiv	r6, r2, r3
 8005ffc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006000:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006004:	d332      	bcc.n	800606c <quorem+0xa0>
 8006006:	f04f 0e00 	mov.w	lr, #0
 800600a:	4640      	mov	r0, r8
 800600c:	46ac      	mov	ip, r5
 800600e:	46f2      	mov	sl, lr
 8006010:	f850 2b04 	ldr.w	r2, [r0], #4
 8006014:	b293      	uxth	r3, r2
 8006016:	fb06 e303 	mla	r3, r6, r3, lr
 800601a:	0c12      	lsrs	r2, r2, #16
 800601c:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8006020:	fb06 e202 	mla	r2, r6, r2, lr
 8006024:	b29b      	uxth	r3, r3
 8006026:	ebaa 0303 	sub.w	r3, sl, r3
 800602a:	f8dc a000 	ldr.w	sl, [ip]
 800602e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006032:	fa1f fa8a 	uxth.w	sl, sl
 8006036:	4453      	add	r3, sl
 8006038:	fa1f fa82 	uxth.w	sl, r2
 800603c:	f8dc 2000 	ldr.w	r2, [ip]
 8006040:	4581      	cmp	r9, r0
 8006042:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8006046:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800604a:	b29b      	uxth	r3, r3
 800604c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006050:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006054:	f84c 3b04 	str.w	r3, [ip], #4
 8006058:	d2da      	bcs.n	8006010 <quorem+0x44>
 800605a:	f855 300b 	ldr.w	r3, [r5, fp]
 800605e:	b92b      	cbnz	r3, 800606c <quorem+0xa0>
 8006060:	9b01      	ldr	r3, [sp, #4]
 8006062:	3b04      	subs	r3, #4
 8006064:	429d      	cmp	r5, r3
 8006066:	461a      	mov	r2, r3
 8006068:	d32f      	bcc.n	80060ca <quorem+0xfe>
 800606a:	613c      	str	r4, [r7, #16]
 800606c:	4638      	mov	r0, r7
 800606e:	f001 fc8d 	bl	800798c <__mcmp>
 8006072:	2800      	cmp	r0, #0
 8006074:	db25      	blt.n	80060c2 <quorem+0xf6>
 8006076:	4628      	mov	r0, r5
 8006078:	f04f 0c00 	mov.w	ip, #0
 800607c:	3601      	adds	r6, #1
 800607e:	f858 1b04 	ldr.w	r1, [r8], #4
 8006082:	f8d0 e000 	ldr.w	lr, [r0]
 8006086:	b28b      	uxth	r3, r1
 8006088:	ebac 0303 	sub.w	r3, ip, r3
 800608c:	fa1f f28e 	uxth.w	r2, lr
 8006090:	4413      	add	r3, r2
 8006092:	0c0a      	lsrs	r2, r1, #16
 8006094:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006098:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800609c:	b29b      	uxth	r3, r3
 800609e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80060a2:	45c1      	cmp	r9, r8
 80060a4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80060a8:	f840 3b04 	str.w	r3, [r0], #4
 80060ac:	d2e7      	bcs.n	800607e <quorem+0xb2>
 80060ae:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80060b2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80060b6:	b922      	cbnz	r2, 80060c2 <quorem+0xf6>
 80060b8:	3b04      	subs	r3, #4
 80060ba:	429d      	cmp	r5, r3
 80060bc:	461a      	mov	r2, r3
 80060be:	d30a      	bcc.n	80060d6 <quorem+0x10a>
 80060c0:	613c      	str	r4, [r7, #16]
 80060c2:	4630      	mov	r0, r6
 80060c4:	b003      	add	sp, #12
 80060c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060ca:	6812      	ldr	r2, [r2, #0]
 80060cc:	3b04      	subs	r3, #4
 80060ce:	2a00      	cmp	r2, #0
 80060d0:	d1cb      	bne.n	800606a <quorem+0x9e>
 80060d2:	3c01      	subs	r4, #1
 80060d4:	e7c6      	b.n	8006064 <quorem+0x98>
 80060d6:	6812      	ldr	r2, [r2, #0]
 80060d8:	3b04      	subs	r3, #4
 80060da:	2a00      	cmp	r2, #0
 80060dc:	d1f0      	bne.n	80060c0 <quorem+0xf4>
 80060de:	3c01      	subs	r4, #1
 80060e0:	e7eb      	b.n	80060ba <quorem+0xee>
 80060e2:	2000      	movs	r0, #0
 80060e4:	e7ee      	b.n	80060c4 <quorem+0xf8>
	...

080060e8 <_dtoa_r>:
 80060e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060ec:	4616      	mov	r6, r2
 80060ee:	461f      	mov	r7, r3
 80060f0:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80060f2:	b099      	sub	sp, #100	; 0x64
 80060f4:	4605      	mov	r5, r0
 80060f6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80060fa:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 80060fe:	b974      	cbnz	r4, 800611e <_dtoa_r+0x36>
 8006100:	2010      	movs	r0, #16
 8006102:	f001 f949 	bl	8007398 <malloc>
 8006106:	4602      	mov	r2, r0
 8006108:	6268      	str	r0, [r5, #36]	; 0x24
 800610a:	b920      	cbnz	r0, 8006116 <_dtoa_r+0x2e>
 800610c:	21ea      	movs	r1, #234	; 0xea
 800610e:	4bae      	ldr	r3, [pc, #696]	; (80063c8 <_dtoa_r+0x2e0>)
 8006110:	48ae      	ldr	r0, [pc, #696]	; (80063cc <_dtoa_r+0x2e4>)
 8006112:	f002 f875 	bl	8008200 <__assert_func>
 8006116:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800611a:	6004      	str	r4, [r0, #0]
 800611c:	60c4      	str	r4, [r0, #12]
 800611e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006120:	6819      	ldr	r1, [r3, #0]
 8006122:	b151      	cbz	r1, 800613a <_dtoa_r+0x52>
 8006124:	685a      	ldr	r2, [r3, #4]
 8006126:	2301      	movs	r3, #1
 8006128:	4093      	lsls	r3, r2
 800612a:	604a      	str	r2, [r1, #4]
 800612c:	608b      	str	r3, [r1, #8]
 800612e:	4628      	mov	r0, r5
 8006130:	f001 f9a8 	bl	8007484 <_Bfree>
 8006134:	2200      	movs	r2, #0
 8006136:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006138:	601a      	str	r2, [r3, #0]
 800613a:	1e3b      	subs	r3, r7, #0
 800613c:	bfaf      	iteee	ge
 800613e:	2300      	movge	r3, #0
 8006140:	2201      	movlt	r2, #1
 8006142:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006146:	9305      	strlt	r3, [sp, #20]
 8006148:	bfa8      	it	ge
 800614a:	f8c8 3000 	strge.w	r3, [r8]
 800614e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8006152:	4b9f      	ldr	r3, [pc, #636]	; (80063d0 <_dtoa_r+0x2e8>)
 8006154:	bfb8      	it	lt
 8006156:	f8c8 2000 	strlt.w	r2, [r8]
 800615a:	ea33 0309 	bics.w	r3, r3, r9
 800615e:	d119      	bne.n	8006194 <_dtoa_r+0xac>
 8006160:	f242 730f 	movw	r3, #9999	; 0x270f
 8006164:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006166:	6013      	str	r3, [r2, #0]
 8006168:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800616c:	4333      	orrs	r3, r6
 800616e:	f000 8580 	beq.w	8006c72 <_dtoa_r+0xb8a>
 8006172:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006174:	b953      	cbnz	r3, 800618c <_dtoa_r+0xa4>
 8006176:	4b97      	ldr	r3, [pc, #604]	; (80063d4 <_dtoa_r+0x2ec>)
 8006178:	e022      	b.n	80061c0 <_dtoa_r+0xd8>
 800617a:	4b97      	ldr	r3, [pc, #604]	; (80063d8 <_dtoa_r+0x2f0>)
 800617c:	9308      	str	r3, [sp, #32]
 800617e:	3308      	adds	r3, #8
 8006180:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8006182:	6013      	str	r3, [r2, #0]
 8006184:	9808      	ldr	r0, [sp, #32]
 8006186:	b019      	add	sp, #100	; 0x64
 8006188:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800618c:	4b91      	ldr	r3, [pc, #580]	; (80063d4 <_dtoa_r+0x2ec>)
 800618e:	9308      	str	r3, [sp, #32]
 8006190:	3303      	adds	r3, #3
 8006192:	e7f5      	b.n	8006180 <_dtoa_r+0x98>
 8006194:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8006198:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800619c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80061a0:	2200      	movs	r2, #0
 80061a2:	2300      	movs	r3, #0
 80061a4:	f7fa fcb4 	bl	8000b10 <__aeabi_dcmpeq>
 80061a8:	4680      	mov	r8, r0
 80061aa:	b158      	cbz	r0, 80061c4 <_dtoa_r+0xdc>
 80061ac:	2301      	movs	r3, #1
 80061ae:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80061b0:	6013      	str	r3, [r2, #0]
 80061b2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	f000 8559 	beq.w	8006c6c <_dtoa_r+0xb84>
 80061ba:	4888      	ldr	r0, [pc, #544]	; (80063dc <_dtoa_r+0x2f4>)
 80061bc:	6018      	str	r0, [r3, #0]
 80061be:	1e43      	subs	r3, r0, #1
 80061c0:	9308      	str	r3, [sp, #32]
 80061c2:	e7df      	b.n	8006184 <_dtoa_r+0x9c>
 80061c4:	ab16      	add	r3, sp, #88	; 0x58
 80061c6:	9301      	str	r3, [sp, #4]
 80061c8:	ab17      	add	r3, sp, #92	; 0x5c
 80061ca:	9300      	str	r3, [sp, #0]
 80061cc:	4628      	mov	r0, r5
 80061ce:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80061d2:	f001 fd01 	bl	8007bd8 <__d2b>
 80061d6:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80061da:	4682      	mov	sl, r0
 80061dc:	2c00      	cmp	r4, #0
 80061de:	d07e      	beq.n	80062de <_dtoa_r+0x1f6>
 80061e0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80061e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80061e6:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80061ea:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80061ee:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 80061f2:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80061f6:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 80061fa:	2200      	movs	r2, #0
 80061fc:	4b78      	ldr	r3, [pc, #480]	; (80063e0 <_dtoa_r+0x2f8>)
 80061fe:	f7fa f867 	bl	80002d0 <__aeabi_dsub>
 8006202:	a36b      	add	r3, pc, #428	; (adr r3, 80063b0 <_dtoa_r+0x2c8>)
 8006204:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006208:	f7fa fa1a 	bl	8000640 <__aeabi_dmul>
 800620c:	a36a      	add	r3, pc, #424	; (adr r3, 80063b8 <_dtoa_r+0x2d0>)
 800620e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006212:	f7fa f85f 	bl	80002d4 <__adddf3>
 8006216:	4606      	mov	r6, r0
 8006218:	4620      	mov	r0, r4
 800621a:	460f      	mov	r7, r1
 800621c:	f7fa f9a6 	bl	800056c <__aeabi_i2d>
 8006220:	a367      	add	r3, pc, #412	; (adr r3, 80063c0 <_dtoa_r+0x2d8>)
 8006222:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006226:	f7fa fa0b 	bl	8000640 <__aeabi_dmul>
 800622a:	4602      	mov	r2, r0
 800622c:	460b      	mov	r3, r1
 800622e:	4630      	mov	r0, r6
 8006230:	4639      	mov	r1, r7
 8006232:	f7fa f84f 	bl	80002d4 <__adddf3>
 8006236:	4606      	mov	r6, r0
 8006238:	460f      	mov	r7, r1
 800623a:	f7fa fcb1 	bl	8000ba0 <__aeabi_d2iz>
 800623e:	2200      	movs	r2, #0
 8006240:	4681      	mov	r9, r0
 8006242:	2300      	movs	r3, #0
 8006244:	4630      	mov	r0, r6
 8006246:	4639      	mov	r1, r7
 8006248:	f7fa fc6c 	bl	8000b24 <__aeabi_dcmplt>
 800624c:	b148      	cbz	r0, 8006262 <_dtoa_r+0x17a>
 800624e:	4648      	mov	r0, r9
 8006250:	f7fa f98c 	bl	800056c <__aeabi_i2d>
 8006254:	4632      	mov	r2, r6
 8006256:	463b      	mov	r3, r7
 8006258:	f7fa fc5a 	bl	8000b10 <__aeabi_dcmpeq>
 800625c:	b908      	cbnz	r0, 8006262 <_dtoa_r+0x17a>
 800625e:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8006262:	f1b9 0f16 	cmp.w	r9, #22
 8006266:	d857      	bhi.n	8006318 <_dtoa_r+0x230>
 8006268:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800626c:	4b5d      	ldr	r3, [pc, #372]	; (80063e4 <_dtoa_r+0x2fc>)
 800626e:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8006272:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006276:	f7fa fc55 	bl	8000b24 <__aeabi_dcmplt>
 800627a:	2800      	cmp	r0, #0
 800627c:	d04e      	beq.n	800631c <_dtoa_r+0x234>
 800627e:	2300      	movs	r3, #0
 8006280:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8006284:	930f      	str	r3, [sp, #60]	; 0x3c
 8006286:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006288:	1b1c      	subs	r4, r3, r4
 800628a:	1e63      	subs	r3, r4, #1
 800628c:	9309      	str	r3, [sp, #36]	; 0x24
 800628e:	bf49      	itett	mi
 8006290:	f1c4 0301 	rsbmi	r3, r4, #1
 8006294:	2300      	movpl	r3, #0
 8006296:	9306      	strmi	r3, [sp, #24]
 8006298:	2300      	movmi	r3, #0
 800629a:	bf54      	ite	pl
 800629c:	9306      	strpl	r3, [sp, #24]
 800629e:	9309      	strmi	r3, [sp, #36]	; 0x24
 80062a0:	f1b9 0f00 	cmp.w	r9, #0
 80062a4:	db3c      	blt.n	8006320 <_dtoa_r+0x238>
 80062a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80062a8:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80062ac:	444b      	add	r3, r9
 80062ae:	9309      	str	r3, [sp, #36]	; 0x24
 80062b0:	2300      	movs	r3, #0
 80062b2:	930a      	str	r3, [sp, #40]	; 0x28
 80062b4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80062b6:	2b09      	cmp	r3, #9
 80062b8:	d86c      	bhi.n	8006394 <_dtoa_r+0x2ac>
 80062ba:	2b05      	cmp	r3, #5
 80062bc:	bfc4      	itt	gt
 80062be:	3b04      	subgt	r3, #4
 80062c0:	9322      	strgt	r3, [sp, #136]	; 0x88
 80062c2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80062c4:	bfc8      	it	gt
 80062c6:	2400      	movgt	r4, #0
 80062c8:	f1a3 0302 	sub.w	r3, r3, #2
 80062cc:	bfd8      	it	le
 80062ce:	2401      	movle	r4, #1
 80062d0:	2b03      	cmp	r3, #3
 80062d2:	f200 808b 	bhi.w	80063ec <_dtoa_r+0x304>
 80062d6:	e8df f003 	tbb	[pc, r3]
 80062da:	4f2d      	.short	0x4f2d
 80062dc:	5b4d      	.short	0x5b4d
 80062de:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 80062e2:	441c      	add	r4, r3
 80062e4:	f204 4332 	addw	r3, r4, #1074	; 0x432
 80062e8:	2b20      	cmp	r3, #32
 80062ea:	bfc3      	ittte	gt
 80062ec:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80062f0:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 80062f4:	fa09 f303 	lslgt.w	r3, r9, r3
 80062f8:	f1c3 0320 	rsble	r3, r3, #32
 80062fc:	bfc6      	itte	gt
 80062fe:	fa26 f000 	lsrgt.w	r0, r6, r0
 8006302:	4318      	orrgt	r0, r3
 8006304:	fa06 f003 	lslle.w	r0, r6, r3
 8006308:	f7fa f920 	bl	800054c <__aeabi_ui2d>
 800630c:	2301      	movs	r3, #1
 800630e:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8006312:	3c01      	subs	r4, #1
 8006314:	9313      	str	r3, [sp, #76]	; 0x4c
 8006316:	e770      	b.n	80061fa <_dtoa_r+0x112>
 8006318:	2301      	movs	r3, #1
 800631a:	e7b3      	b.n	8006284 <_dtoa_r+0x19c>
 800631c:	900f      	str	r0, [sp, #60]	; 0x3c
 800631e:	e7b2      	b.n	8006286 <_dtoa_r+0x19e>
 8006320:	9b06      	ldr	r3, [sp, #24]
 8006322:	eba3 0309 	sub.w	r3, r3, r9
 8006326:	9306      	str	r3, [sp, #24]
 8006328:	f1c9 0300 	rsb	r3, r9, #0
 800632c:	930a      	str	r3, [sp, #40]	; 0x28
 800632e:	2300      	movs	r3, #0
 8006330:	930e      	str	r3, [sp, #56]	; 0x38
 8006332:	e7bf      	b.n	80062b4 <_dtoa_r+0x1cc>
 8006334:	2300      	movs	r3, #0
 8006336:	930b      	str	r3, [sp, #44]	; 0x2c
 8006338:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800633a:	2b00      	cmp	r3, #0
 800633c:	dc59      	bgt.n	80063f2 <_dtoa_r+0x30a>
 800633e:	f04f 0b01 	mov.w	fp, #1
 8006342:	465b      	mov	r3, fp
 8006344:	f8cd b008 	str.w	fp, [sp, #8]
 8006348:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 800634c:	2200      	movs	r2, #0
 800634e:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8006350:	6042      	str	r2, [r0, #4]
 8006352:	2204      	movs	r2, #4
 8006354:	f102 0614 	add.w	r6, r2, #20
 8006358:	429e      	cmp	r6, r3
 800635a:	6841      	ldr	r1, [r0, #4]
 800635c:	d94f      	bls.n	80063fe <_dtoa_r+0x316>
 800635e:	4628      	mov	r0, r5
 8006360:	f001 f850 	bl	8007404 <_Balloc>
 8006364:	9008      	str	r0, [sp, #32]
 8006366:	2800      	cmp	r0, #0
 8006368:	d14d      	bne.n	8006406 <_dtoa_r+0x31e>
 800636a:	4602      	mov	r2, r0
 800636c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006370:	4b1d      	ldr	r3, [pc, #116]	; (80063e8 <_dtoa_r+0x300>)
 8006372:	e6cd      	b.n	8006110 <_dtoa_r+0x28>
 8006374:	2301      	movs	r3, #1
 8006376:	e7de      	b.n	8006336 <_dtoa_r+0x24e>
 8006378:	2300      	movs	r3, #0
 800637a:	930b      	str	r3, [sp, #44]	; 0x2c
 800637c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800637e:	eb09 0b03 	add.w	fp, r9, r3
 8006382:	f10b 0301 	add.w	r3, fp, #1
 8006386:	2b01      	cmp	r3, #1
 8006388:	9302      	str	r3, [sp, #8]
 800638a:	bfb8      	it	lt
 800638c:	2301      	movlt	r3, #1
 800638e:	e7dd      	b.n	800634c <_dtoa_r+0x264>
 8006390:	2301      	movs	r3, #1
 8006392:	e7f2      	b.n	800637a <_dtoa_r+0x292>
 8006394:	2401      	movs	r4, #1
 8006396:	2300      	movs	r3, #0
 8006398:	940b      	str	r4, [sp, #44]	; 0x2c
 800639a:	9322      	str	r3, [sp, #136]	; 0x88
 800639c:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 80063a0:	2200      	movs	r2, #0
 80063a2:	2312      	movs	r3, #18
 80063a4:	f8cd b008 	str.w	fp, [sp, #8]
 80063a8:	9223      	str	r2, [sp, #140]	; 0x8c
 80063aa:	e7cf      	b.n	800634c <_dtoa_r+0x264>
 80063ac:	f3af 8000 	nop.w
 80063b0:	636f4361 	.word	0x636f4361
 80063b4:	3fd287a7 	.word	0x3fd287a7
 80063b8:	8b60c8b3 	.word	0x8b60c8b3
 80063bc:	3fc68a28 	.word	0x3fc68a28
 80063c0:	509f79fb 	.word	0x509f79fb
 80063c4:	3fd34413 	.word	0x3fd34413
 80063c8:	08009cce 	.word	0x08009cce
 80063cc:	08009ce5 	.word	0x08009ce5
 80063d0:	7ff00000 	.word	0x7ff00000
 80063d4:	08009cca 	.word	0x08009cca
 80063d8:	08009cc1 	.word	0x08009cc1
 80063dc:	08009b45 	.word	0x08009b45
 80063e0:	3ff80000 	.word	0x3ff80000
 80063e4:	08009e60 	.word	0x08009e60
 80063e8:	08009d44 	.word	0x08009d44
 80063ec:	2301      	movs	r3, #1
 80063ee:	930b      	str	r3, [sp, #44]	; 0x2c
 80063f0:	e7d4      	b.n	800639c <_dtoa_r+0x2b4>
 80063f2:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 80063f6:	465b      	mov	r3, fp
 80063f8:	f8cd b008 	str.w	fp, [sp, #8]
 80063fc:	e7a6      	b.n	800634c <_dtoa_r+0x264>
 80063fe:	3101      	adds	r1, #1
 8006400:	6041      	str	r1, [r0, #4]
 8006402:	0052      	lsls	r2, r2, #1
 8006404:	e7a6      	b.n	8006354 <_dtoa_r+0x26c>
 8006406:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006408:	9a08      	ldr	r2, [sp, #32]
 800640a:	601a      	str	r2, [r3, #0]
 800640c:	9b02      	ldr	r3, [sp, #8]
 800640e:	2b0e      	cmp	r3, #14
 8006410:	f200 80a8 	bhi.w	8006564 <_dtoa_r+0x47c>
 8006414:	2c00      	cmp	r4, #0
 8006416:	f000 80a5 	beq.w	8006564 <_dtoa_r+0x47c>
 800641a:	f1b9 0f00 	cmp.w	r9, #0
 800641e:	dd34      	ble.n	800648a <_dtoa_r+0x3a2>
 8006420:	4a9a      	ldr	r2, [pc, #616]	; (800668c <_dtoa_r+0x5a4>)
 8006422:	f009 030f 	and.w	r3, r9, #15
 8006426:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800642a:	f419 7f80 	tst.w	r9, #256	; 0x100
 800642e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006432:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8006436:	ea4f 1429 	mov.w	r4, r9, asr #4
 800643a:	d016      	beq.n	800646a <_dtoa_r+0x382>
 800643c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006440:	4b93      	ldr	r3, [pc, #588]	; (8006690 <_dtoa_r+0x5a8>)
 8006442:	2703      	movs	r7, #3
 8006444:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006448:	f7fa fa24 	bl	8000894 <__aeabi_ddiv>
 800644c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006450:	f004 040f 	and.w	r4, r4, #15
 8006454:	4e8e      	ldr	r6, [pc, #568]	; (8006690 <_dtoa_r+0x5a8>)
 8006456:	b954      	cbnz	r4, 800646e <_dtoa_r+0x386>
 8006458:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800645c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006460:	f7fa fa18 	bl	8000894 <__aeabi_ddiv>
 8006464:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006468:	e029      	b.n	80064be <_dtoa_r+0x3d6>
 800646a:	2702      	movs	r7, #2
 800646c:	e7f2      	b.n	8006454 <_dtoa_r+0x36c>
 800646e:	07e1      	lsls	r1, r4, #31
 8006470:	d508      	bpl.n	8006484 <_dtoa_r+0x39c>
 8006472:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006476:	e9d6 2300 	ldrd	r2, r3, [r6]
 800647a:	f7fa f8e1 	bl	8000640 <__aeabi_dmul>
 800647e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006482:	3701      	adds	r7, #1
 8006484:	1064      	asrs	r4, r4, #1
 8006486:	3608      	adds	r6, #8
 8006488:	e7e5      	b.n	8006456 <_dtoa_r+0x36e>
 800648a:	f000 80a5 	beq.w	80065d8 <_dtoa_r+0x4f0>
 800648e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006492:	f1c9 0400 	rsb	r4, r9, #0
 8006496:	4b7d      	ldr	r3, [pc, #500]	; (800668c <_dtoa_r+0x5a4>)
 8006498:	f004 020f 	and.w	r2, r4, #15
 800649c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80064a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064a4:	f7fa f8cc 	bl	8000640 <__aeabi_dmul>
 80064a8:	2702      	movs	r7, #2
 80064aa:	2300      	movs	r3, #0
 80064ac:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80064b0:	4e77      	ldr	r6, [pc, #476]	; (8006690 <_dtoa_r+0x5a8>)
 80064b2:	1124      	asrs	r4, r4, #4
 80064b4:	2c00      	cmp	r4, #0
 80064b6:	f040 8084 	bne.w	80065c2 <_dtoa_r+0x4da>
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d1d2      	bne.n	8006464 <_dtoa_r+0x37c>
 80064be:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	f000 808b 	beq.w	80065dc <_dtoa_r+0x4f4>
 80064c6:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80064ca:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80064ce:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80064d2:	2200      	movs	r2, #0
 80064d4:	4b6f      	ldr	r3, [pc, #444]	; (8006694 <_dtoa_r+0x5ac>)
 80064d6:	f7fa fb25 	bl	8000b24 <__aeabi_dcmplt>
 80064da:	2800      	cmp	r0, #0
 80064dc:	d07e      	beq.n	80065dc <_dtoa_r+0x4f4>
 80064de:	9b02      	ldr	r3, [sp, #8]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d07b      	beq.n	80065dc <_dtoa_r+0x4f4>
 80064e4:	f1bb 0f00 	cmp.w	fp, #0
 80064e8:	dd38      	ble.n	800655c <_dtoa_r+0x474>
 80064ea:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80064ee:	2200      	movs	r2, #0
 80064f0:	4b69      	ldr	r3, [pc, #420]	; (8006698 <_dtoa_r+0x5b0>)
 80064f2:	f7fa f8a5 	bl	8000640 <__aeabi_dmul>
 80064f6:	465c      	mov	r4, fp
 80064f8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80064fc:	f109 38ff 	add.w	r8, r9, #4294967295	; 0xffffffff
 8006500:	3701      	adds	r7, #1
 8006502:	4638      	mov	r0, r7
 8006504:	f7fa f832 	bl	800056c <__aeabi_i2d>
 8006508:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800650c:	f7fa f898 	bl	8000640 <__aeabi_dmul>
 8006510:	2200      	movs	r2, #0
 8006512:	4b62      	ldr	r3, [pc, #392]	; (800669c <_dtoa_r+0x5b4>)
 8006514:	f7f9 fede 	bl	80002d4 <__adddf3>
 8006518:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800651c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006520:	9611      	str	r6, [sp, #68]	; 0x44
 8006522:	2c00      	cmp	r4, #0
 8006524:	d15d      	bne.n	80065e2 <_dtoa_r+0x4fa>
 8006526:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800652a:	2200      	movs	r2, #0
 800652c:	4b5c      	ldr	r3, [pc, #368]	; (80066a0 <_dtoa_r+0x5b8>)
 800652e:	f7f9 fecf 	bl	80002d0 <__aeabi_dsub>
 8006532:	4602      	mov	r2, r0
 8006534:	460b      	mov	r3, r1
 8006536:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800653a:	4633      	mov	r3, r6
 800653c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800653e:	f7fa fb0f 	bl	8000b60 <__aeabi_dcmpgt>
 8006542:	2800      	cmp	r0, #0
 8006544:	f040 829e 	bne.w	8006a84 <_dtoa_r+0x99c>
 8006548:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800654c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800654e:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8006552:	f7fa fae7 	bl	8000b24 <__aeabi_dcmplt>
 8006556:	2800      	cmp	r0, #0
 8006558:	f040 8292 	bne.w	8006a80 <_dtoa_r+0x998>
 800655c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8006560:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006564:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006566:	2b00      	cmp	r3, #0
 8006568:	f2c0 8153 	blt.w	8006812 <_dtoa_r+0x72a>
 800656c:	f1b9 0f0e 	cmp.w	r9, #14
 8006570:	f300 814f 	bgt.w	8006812 <_dtoa_r+0x72a>
 8006574:	4b45      	ldr	r3, [pc, #276]	; (800668c <_dtoa_r+0x5a4>)
 8006576:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800657a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800657e:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8006582:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006584:	2b00      	cmp	r3, #0
 8006586:	f280 80db 	bge.w	8006740 <_dtoa_r+0x658>
 800658a:	9b02      	ldr	r3, [sp, #8]
 800658c:	2b00      	cmp	r3, #0
 800658e:	f300 80d7 	bgt.w	8006740 <_dtoa_r+0x658>
 8006592:	f040 8274 	bne.w	8006a7e <_dtoa_r+0x996>
 8006596:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800659a:	2200      	movs	r2, #0
 800659c:	4b40      	ldr	r3, [pc, #256]	; (80066a0 <_dtoa_r+0x5b8>)
 800659e:	f7fa f84f 	bl	8000640 <__aeabi_dmul>
 80065a2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80065a6:	f7fa fad1 	bl	8000b4c <__aeabi_dcmpge>
 80065aa:	9c02      	ldr	r4, [sp, #8]
 80065ac:	4626      	mov	r6, r4
 80065ae:	2800      	cmp	r0, #0
 80065b0:	f040 824a 	bne.w	8006a48 <_dtoa_r+0x960>
 80065b4:	2331      	movs	r3, #49	; 0x31
 80065b6:	9f08      	ldr	r7, [sp, #32]
 80065b8:	f109 0901 	add.w	r9, r9, #1
 80065bc:	f807 3b01 	strb.w	r3, [r7], #1
 80065c0:	e246      	b.n	8006a50 <_dtoa_r+0x968>
 80065c2:	07e2      	lsls	r2, r4, #31
 80065c4:	d505      	bpl.n	80065d2 <_dtoa_r+0x4ea>
 80065c6:	e9d6 2300 	ldrd	r2, r3, [r6]
 80065ca:	f7fa f839 	bl	8000640 <__aeabi_dmul>
 80065ce:	2301      	movs	r3, #1
 80065d0:	3701      	adds	r7, #1
 80065d2:	1064      	asrs	r4, r4, #1
 80065d4:	3608      	adds	r6, #8
 80065d6:	e76d      	b.n	80064b4 <_dtoa_r+0x3cc>
 80065d8:	2702      	movs	r7, #2
 80065da:	e770      	b.n	80064be <_dtoa_r+0x3d6>
 80065dc:	46c8      	mov	r8, r9
 80065de:	9c02      	ldr	r4, [sp, #8]
 80065e0:	e78f      	b.n	8006502 <_dtoa_r+0x41a>
 80065e2:	9908      	ldr	r1, [sp, #32]
 80065e4:	4b29      	ldr	r3, [pc, #164]	; (800668c <_dtoa_r+0x5a4>)
 80065e6:	4421      	add	r1, r4
 80065e8:	9112      	str	r1, [sp, #72]	; 0x48
 80065ea:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80065ec:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80065f0:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80065f4:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80065f8:	2900      	cmp	r1, #0
 80065fa:	d055      	beq.n	80066a8 <_dtoa_r+0x5c0>
 80065fc:	2000      	movs	r0, #0
 80065fe:	4929      	ldr	r1, [pc, #164]	; (80066a4 <_dtoa_r+0x5bc>)
 8006600:	f7fa f948 	bl	8000894 <__aeabi_ddiv>
 8006604:	463b      	mov	r3, r7
 8006606:	4632      	mov	r2, r6
 8006608:	f7f9 fe62 	bl	80002d0 <__aeabi_dsub>
 800660c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006610:	9f08      	ldr	r7, [sp, #32]
 8006612:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006616:	f7fa fac3 	bl	8000ba0 <__aeabi_d2iz>
 800661a:	4604      	mov	r4, r0
 800661c:	f7f9 ffa6 	bl	800056c <__aeabi_i2d>
 8006620:	4602      	mov	r2, r0
 8006622:	460b      	mov	r3, r1
 8006624:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006628:	f7f9 fe52 	bl	80002d0 <__aeabi_dsub>
 800662c:	4602      	mov	r2, r0
 800662e:	460b      	mov	r3, r1
 8006630:	3430      	adds	r4, #48	; 0x30
 8006632:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006636:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800663a:	f807 4b01 	strb.w	r4, [r7], #1
 800663e:	f7fa fa71 	bl	8000b24 <__aeabi_dcmplt>
 8006642:	2800      	cmp	r0, #0
 8006644:	d174      	bne.n	8006730 <_dtoa_r+0x648>
 8006646:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800664a:	2000      	movs	r0, #0
 800664c:	4911      	ldr	r1, [pc, #68]	; (8006694 <_dtoa_r+0x5ac>)
 800664e:	f7f9 fe3f 	bl	80002d0 <__aeabi_dsub>
 8006652:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006656:	f7fa fa65 	bl	8000b24 <__aeabi_dcmplt>
 800665a:	2800      	cmp	r0, #0
 800665c:	f040 80b6 	bne.w	80067cc <_dtoa_r+0x6e4>
 8006660:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006662:	429f      	cmp	r7, r3
 8006664:	f43f af7a 	beq.w	800655c <_dtoa_r+0x474>
 8006668:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800666c:	2200      	movs	r2, #0
 800666e:	4b0a      	ldr	r3, [pc, #40]	; (8006698 <_dtoa_r+0x5b0>)
 8006670:	f7f9 ffe6 	bl	8000640 <__aeabi_dmul>
 8006674:	2200      	movs	r2, #0
 8006676:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800667a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800667e:	4b06      	ldr	r3, [pc, #24]	; (8006698 <_dtoa_r+0x5b0>)
 8006680:	f7f9 ffde 	bl	8000640 <__aeabi_dmul>
 8006684:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006688:	e7c3      	b.n	8006612 <_dtoa_r+0x52a>
 800668a:	bf00      	nop
 800668c:	08009e60 	.word	0x08009e60
 8006690:	08009e38 	.word	0x08009e38
 8006694:	3ff00000 	.word	0x3ff00000
 8006698:	40240000 	.word	0x40240000
 800669c:	401c0000 	.word	0x401c0000
 80066a0:	40140000 	.word	0x40140000
 80066a4:	3fe00000 	.word	0x3fe00000
 80066a8:	4630      	mov	r0, r6
 80066aa:	4639      	mov	r1, r7
 80066ac:	f7f9 ffc8 	bl	8000640 <__aeabi_dmul>
 80066b0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80066b2:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80066b6:	9c08      	ldr	r4, [sp, #32]
 80066b8:	9314      	str	r3, [sp, #80]	; 0x50
 80066ba:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80066be:	f7fa fa6f 	bl	8000ba0 <__aeabi_d2iz>
 80066c2:	9015      	str	r0, [sp, #84]	; 0x54
 80066c4:	f7f9 ff52 	bl	800056c <__aeabi_i2d>
 80066c8:	4602      	mov	r2, r0
 80066ca:	460b      	mov	r3, r1
 80066cc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80066d0:	f7f9 fdfe 	bl	80002d0 <__aeabi_dsub>
 80066d4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80066d6:	4606      	mov	r6, r0
 80066d8:	3330      	adds	r3, #48	; 0x30
 80066da:	f804 3b01 	strb.w	r3, [r4], #1
 80066de:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80066e0:	460f      	mov	r7, r1
 80066e2:	429c      	cmp	r4, r3
 80066e4:	f04f 0200 	mov.w	r2, #0
 80066e8:	d124      	bne.n	8006734 <_dtoa_r+0x64c>
 80066ea:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80066ee:	4bb3      	ldr	r3, [pc, #716]	; (80069bc <_dtoa_r+0x8d4>)
 80066f0:	f7f9 fdf0 	bl	80002d4 <__adddf3>
 80066f4:	4602      	mov	r2, r0
 80066f6:	460b      	mov	r3, r1
 80066f8:	4630      	mov	r0, r6
 80066fa:	4639      	mov	r1, r7
 80066fc:	f7fa fa30 	bl	8000b60 <__aeabi_dcmpgt>
 8006700:	2800      	cmp	r0, #0
 8006702:	d162      	bne.n	80067ca <_dtoa_r+0x6e2>
 8006704:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006708:	2000      	movs	r0, #0
 800670a:	49ac      	ldr	r1, [pc, #688]	; (80069bc <_dtoa_r+0x8d4>)
 800670c:	f7f9 fde0 	bl	80002d0 <__aeabi_dsub>
 8006710:	4602      	mov	r2, r0
 8006712:	460b      	mov	r3, r1
 8006714:	4630      	mov	r0, r6
 8006716:	4639      	mov	r1, r7
 8006718:	f7fa fa04 	bl	8000b24 <__aeabi_dcmplt>
 800671c:	2800      	cmp	r0, #0
 800671e:	f43f af1d 	beq.w	800655c <_dtoa_r+0x474>
 8006722:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8006724:	1e7b      	subs	r3, r7, #1
 8006726:	9314      	str	r3, [sp, #80]	; 0x50
 8006728:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800672c:	2b30      	cmp	r3, #48	; 0x30
 800672e:	d0f8      	beq.n	8006722 <_dtoa_r+0x63a>
 8006730:	46c1      	mov	r9, r8
 8006732:	e03a      	b.n	80067aa <_dtoa_r+0x6c2>
 8006734:	4ba2      	ldr	r3, [pc, #648]	; (80069c0 <_dtoa_r+0x8d8>)
 8006736:	f7f9 ff83 	bl	8000640 <__aeabi_dmul>
 800673a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800673e:	e7bc      	b.n	80066ba <_dtoa_r+0x5d2>
 8006740:	9f08      	ldr	r7, [sp, #32]
 8006742:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006746:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800674a:	f7fa f8a3 	bl	8000894 <__aeabi_ddiv>
 800674e:	f7fa fa27 	bl	8000ba0 <__aeabi_d2iz>
 8006752:	4604      	mov	r4, r0
 8006754:	f7f9 ff0a 	bl	800056c <__aeabi_i2d>
 8006758:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800675c:	f7f9 ff70 	bl	8000640 <__aeabi_dmul>
 8006760:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8006764:	460b      	mov	r3, r1
 8006766:	4602      	mov	r2, r0
 8006768:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800676c:	f7f9 fdb0 	bl	80002d0 <__aeabi_dsub>
 8006770:	f807 6b01 	strb.w	r6, [r7], #1
 8006774:	9e08      	ldr	r6, [sp, #32]
 8006776:	9b02      	ldr	r3, [sp, #8]
 8006778:	1bbe      	subs	r6, r7, r6
 800677a:	42b3      	cmp	r3, r6
 800677c:	d13a      	bne.n	80067f4 <_dtoa_r+0x70c>
 800677e:	4602      	mov	r2, r0
 8006780:	460b      	mov	r3, r1
 8006782:	f7f9 fda7 	bl	80002d4 <__adddf3>
 8006786:	4602      	mov	r2, r0
 8006788:	460b      	mov	r3, r1
 800678a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800678e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006792:	f7fa f9e5 	bl	8000b60 <__aeabi_dcmpgt>
 8006796:	bb58      	cbnz	r0, 80067f0 <_dtoa_r+0x708>
 8006798:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800679c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80067a0:	f7fa f9b6 	bl	8000b10 <__aeabi_dcmpeq>
 80067a4:	b108      	cbz	r0, 80067aa <_dtoa_r+0x6c2>
 80067a6:	07e1      	lsls	r1, r4, #31
 80067a8:	d422      	bmi.n	80067f0 <_dtoa_r+0x708>
 80067aa:	4628      	mov	r0, r5
 80067ac:	4651      	mov	r1, sl
 80067ae:	f000 fe69 	bl	8007484 <_Bfree>
 80067b2:	2300      	movs	r3, #0
 80067b4:	703b      	strb	r3, [r7, #0]
 80067b6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80067b8:	f109 0001 	add.w	r0, r9, #1
 80067bc:	6018      	str	r0, [r3, #0]
 80067be:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	f43f acdf 	beq.w	8006184 <_dtoa_r+0x9c>
 80067c6:	601f      	str	r7, [r3, #0]
 80067c8:	e4dc      	b.n	8006184 <_dtoa_r+0x9c>
 80067ca:	4627      	mov	r7, r4
 80067cc:	463b      	mov	r3, r7
 80067ce:	461f      	mov	r7, r3
 80067d0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80067d4:	2a39      	cmp	r2, #57	; 0x39
 80067d6:	d107      	bne.n	80067e8 <_dtoa_r+0x700>
 80067d8:	9a08      	ldr	r2, [sp, #32]
 80067da:	429a      	cmp	r2, r3
 80067dc:	d1f7      	bne.n	80067ce <_dtoa_r+0x6e6>
 80067de:	2230      	movs	r2, #48	; 0x30
 80067e0:	9908      	ldr	r1, [sp, #32]
 80067e2:	f108 0801 	add.w	r8, r8, #1
 80067e6:	700a      	strb	r2, [r1, #0]
 80067e8:	781a      	ldrb	r2, [r3, #0]
 80067ea:	3201      	adds	r2, #1
 80067ec:	701a      	strb	r2, [r3, #0]
 80067ee:	e79f      	b.n	8006730 <_dtoa_r+0x648>
 80067f0:	46c8      	mov	r8, r9
 80067f2:	e7eb      	b.n	80067cc <_dtoa_r+0x6e4>
 80067f4:	2200      	movs	r2, #0
 80067f6:	4b72      	ldr	r3, [pc, #456]	; (80069c0 <_dtoa_r+0x8d8>)
 80067f8:	f7f9 ff22 	bl	8000640 <__aeabi_dmul>
 80067fc:	4602      	mov	r2, r0
 80067fe:	460b      	mov	r3, r1
 8006800:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006804:	2200      	movs	r2, #0
 8006806:	2300      	movs	r3, #0
 8006808:	f7fa f982 	bl	8000b10 <__aeabi_dcmpeq>
 800680c:	2800      	cmp	r0, #0
 800680e:	d098      	beq.n	8006742 <_dtoa_r+0x65a>
 8006810:	e7cb      	b.n	80067aa <_dtoa_r+0x6c2>
 8006812:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006814:	2a00      	cmp	r2, #0
 8006816:	f000 80cd 	beq.w	80069b4 <_dtoa_r+0x8cc>
 800681a:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800681c:	2a01      	cmp	r2, #1
 800681e:	f300 80af 	bgt.w	8006980 <_dtoa_r+0x898>
 8006822:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006824:	2a00      	cmp	r2, #0
 8006826:	f000 80a7 	beq.w	8006978 <_dtoa_r+0x890>
 800682a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800682e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006830:	9f06      	ldr	r7, [sp, #24]
 8006832:	9a06      	ldr	r2, [sp, #24]
 8006834:	2101      	movs	r1, #1
 8006836:	441a      	add	r2, r3
 8006838:	9206      	str	r2, [sp, #24]
 800683a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800683c:	4628      	mov	r0, r5
 800683e:	441a      	add	r2, r3
 8006840:	9209      	str	r2, [sp, #36]	; 0x24
 8006842:	f000 ff23 	bl	800768c <__i2b>
 8006846:	4606      	mov	r6, r0
 8006848:	2f00      	cmp	r7, #0
 800684a:	dd0c      	ble.n	8006866 <_dtoa_r+0x77e>
 800684c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800684e:	2b00      	cmp	r3, #0
 8006850:	dd09      	ble.n	8006866 <_dtoa_r+0x77e>
 8006852:	42bb      	cmp	r3, r7
 8006854:	bfa8      	it	ge
 8006856:	463b      	movge	r3, r7
 8006858:	9a06      	ldr	r2, [sp, #24]
 800685a:	1aff      	subs	r7, r7, r3
 800685c:	1ad2      	subs	r2, r2, r3
 800685e:	9206      	str	r2, [sp, #24]
 8006860:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006862:	1ad3      	subs	r3, r2, r3
 8006864:	9309      	str	r3, [sp, #36]	; 0x24
 8006866:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006868:	b1f3      	cbz	r3, 80068a8 <_dtoa_r+0x7c0>
 800686a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800686c:	2b00      	cmp	r3, #0
 800686e:	f000 80a9 	beq.w	80069c4 <_dtoa_r+0x8dc>
 8006872:	2c00      	cmp	r4, #0
 8006874:	dd10      	ble.n	8006898 <_dtoa_r+0x7b0>
 8006876:	4631      	mov	r1, r6
 8006878:	4622      	mov	r2, r4
 800687a:	4628      	mov	r0, r5
 800687c:	f000 ffc0 	bl	8007800 <__pow5mult>
 8006880:	4652      	mov	r2, sl
 8006882:	4601      	mov	r1, r0
 8006884:	4606      	mov	r6, r0
 8006886:	4628      	mov	r0, r5
 8006888:	f000 ff16 	bl	80076b8 <__multiply>
 800688c:	4680      	mov	r8, r0
 800688e:	4651      	mov	r1, sl
 8006890:	4628      	mov	r0, r5
 8006892:	f000 fdf7 	bl	8007484 <_Bfree>
 8006896:	46c2      	mov	sl, r8
 8006898:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800689a:	1b1a      	subs	r2, r3, r4
 800689c:	d004      	beq.n	80068a8 <_dtoa_r+0x7c0>
 800689e:	4651      	mov	r1, sl
 80068a0:	4628      	mov	r0, r5
 80068a2:	f000 ffad 	bl	8007800 <__pow5mult>
 80068a6:	4682      	mov	sl, r0
 80068a8:	2101      	movs	r1, #1
 80068aa:	4628      	mov	r0, r5
 80068ac:	f000 feee 	bl	800768c <__i2b>
 80068b0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80068b2:	4604      	mov	r4, r0
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	f340 8087 	ble.w	80069c8 <_dtoa_r+0x8e0>
 80068ba:	461a      	mov	r2, r3
 80068bc:	4601      	mov	r1, r0
 80068be:	4628      	mov	r0, r5
 80068c0:	f000 ff9e 	bl	8007800 <__pow5mult>
 80068c4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80068c6:	4604      	mov	r4, r0
 80068c8:	2b01      	cmp	r3, #1
 80068ca:	f340 8080 	ble.w	80069ce <_dtoa_r+0x8e6>
 80068ce:	f04f 0800 	mov.w	r8, #0
 80068d2:	6923      	ldr	r3, [r4, #16]
 80068d4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80068d8:	6918      	ldr	r0, [r3, #16]
 80068da:	f000 fe89 	bl	80075f0 <__hi0bits>
 80068de:	f1c0 0020 	rsb	r0, r0, #32
 80068e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80068e4:	4418      	add	r0, r3
 80068e6:	f010 001f 	ands.w	r0, r0, #31
 80068ea:	f000 8092 	beq.w	8006a12 <_dtoa_r+0x92a>
 80068ee:	f1c0 0320 	rsb	r3, r0, #32
 80068f2:	2b04      	cmp	r3, #4
 80068f4:	f340 808a 	ble.w	8006a0c <_dtoa_r+0x924>
 80068f8:	f1c0 001c 	rsb	r0, r0, #28
 80068fc:	9b06      	ldr	r3, [sp, #24]
 80068fe:	4407      	add	r7, r0
 8006900:	4403      	add	r3, r0
 8006902:	9306      	str	r3, [sp, #24]
 8006904:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006906:	4403      	add	r3, r0
 8006908:	9309      	str	r3, [sp, #36]	; 0x24
 800690a:	9b06      	ldr	r3, [sp, #24]
 800690c:	2b00      	cmp	r3, #0
 800690e:	dd05      	ble.n	800691c <_dtoa_r+0x834>
 8006910:	4651      	mov	r1, sl
 8006912:	461a      	mov	r2, r3
 8006914:	4628      	mov	r0, r5
 8006916:	f000 ffcd 	bl	80078b4 <__lshift>
 800691a:	4682      	mov	sl, r0
 800691c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800691e:	2b00      	cmp	r3, #0
 8006920:	dd05      	ble.n	800692e <_dtoa_r+0x846>
 8006922:	4621      	mov	r1, r4
 8006924:	461a      	mov	r2, r3
 8006926:	4628      	mov	r0, r5
 8006928:	f000 ffc4 	bl	80078b4 <__lshift>
 800692c:	4604      	mov	r4, r0
 800692e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006930:	2b00      	cmp	r3, #0
 8006932:	d070      	beq.n	8006a16 <_dtoa_r+0x92e>
 8006934:	4621      	mov	r1, r4
 8006936:	4650      	mov	r0, sl
 8006938:	f001 f828 	bl	800798c <__mcmp>
 800693c:	2800      	cmp	r0, #0
 800693e:	da6a      	bge.n	8006a16 <_dtoa_r+0x92e>
 8006940:	2300      	movs	r3, #0
 8006942:	4651      	mov	r1, sl
 8006944:	220a      	movs	r2, #10
 8006946:	4628      	mov	r0, r5
 8006948:	f000 fdbe 	bl	80074c8 <__multadd>
 800694c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800694e:	4682      	mov	sl, r0
 8006950:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8006954:	2b00      	cmp	r3, #0
 8006956:	f000 8193 	beq.w	8006c80 <_dtoa_r+0xb98>
 800695a:	4631      	mov	r1, r6
 800695c:	2300      	movs	r3, #0
 800695e:	220a      	movs	r2, #10
 8006960:	4628      	mov	r0, r5
 8006962:	f000 fdb1 	bl	80074c8 <__multadd>
 8006966:	f1bb 0f00 	cmp.w	fp, #0
 800696a:	4606      	mov	r6, r0
 800696c:	f300 8093 	bgt.w	8006a96 <_dtoa_r+0x9ae>
 8006970:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006972:	2b02      	cmp	r3, #2
 8006974:	dc57      	bgt.n	8006a26 <_dtoa_r+0x93e>
 8006976:	e08e      	b.n	8006a96 <_dtoa_r+0x9ae>
 8006978:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800697a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800697e:	e756      	b.n	800682e <_dtoa_r+0x746>
 8006980:	9b02      	ldr	r3, [sp, #8]
 8006982:	1e5c      	subs	r4, r3, #1
 8006984:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006986:	42a3      	cmp	r3, r4
 8006988:	bfb7      	itett	lt
 800698a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800698c:	1b1c      	subge	r4, r3, r4
 800698e:	1ae2      	sublt	r2, r4, r3
 8006990:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8006992:	bfbe      	ittt	lt
 8006994:	940a      	strlt	r4, [sp, #40]	; 0x28
 8006996:	189b      	addlt	r3, r3, r2
 8006998:	930e      	strlt	r3, [sp, #56]	; 0x38
 800699a:	9b02      	ldr	r3, [sp, #8]
 800699c:	bfb8      	it	lt
 800699e:	2400      	movlt	r4, #0
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	bfbb      	ittet	lt
 80069a4:	9b06      	ldrlt	r3, [sp, #24]
 80069a6:	9a02      	ldrlt	r2, [sp, #8]
 80069a8:	9f06      	ldrge	r7, [sp, #24]
 80069aa:	1a9f      	sublt	r7, r3, r2
 80069ac:	bfac      	ite	ge
 80069ae:	9b02      	ldrge	r3, [sp, #8]
 80069b0:	2300      	movlt	r3, #0
 80069b2:	e73e      	b.n	8006832 <_dtoa_r+0x74a>
 80069b4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80069b6:	9f06      	ldr	r7, [sp, #24]
 80069b8:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80069ba:	e745      	b.n	8006848 <_dtoa_r+0x760>
 80069bc:	3fe00000 	.word	0x3fe00000
 80069c0:	40240000 	.word	0x40240000
 80069c4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80069c6:	e76a      	b.n	800689e <_dtoa_r+0x7b6>
 80069c8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80069ca:	2b01      	cmp	r3, #1
 80069cc:	dc19      	bgt.n	8006a02 <_dtoa_r+0x91a>
 80069ce:	9b04      	ldr	r3, [sp, #16]
 80069d0:	b9bb      	cbnz	r3, 8006a02 <_dtoa_r+0x91a>
 80069d2:	9b05      	ldr	r3, [sp, #20]
 80069d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80069d8:	b99b      	cbnz	r3, 8006a02 <_dtoa_r+0x91a>
 80069da:	9b05      	ldr	r3, [sp, #20]
 80069dc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80069e0:	0d1b      	lsrs	r3, r3, #20
 80069e2:	051b      	lsls	r3, r3, #20
 80069e4:	b183      	cbz	r3, 8006a08 <_dtoa_r+0x920>
 80069e6:	f04f 0801 	mov.w	r8, #1
 80069ea:	9b06      	ldr	r3, [sp, #24]
 80069ec:	3301      	adds	r3, #1
 80069ee:	9306      	str	r3, [sp, #24]
 80069f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80069f2:	3301      	adds	r3, #1
 80069f4:	9309      	str	r3, [sp, #36]	; 0x24
 80069f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	f47f af6a 	bne.w	80068d2 <_dtoa_r+0x7ea>
 80069fe:	2001      	movs	r0, #1
 8006a00:	e76f      	b.n	80068e2 <_dtoa_r+0x7fa>
 8006a02:	f04f 0800 	mov.w	r8, #0
 8006a06:	e7f6      	b.n	80069f6 <_dtoa_r+0x90e>
 8006a08:	4698      	mov	r8, r3
 8006a0a:	e7f4      	b.n	80069f6 <_dtoa_r+0x90e>
 8006a0c:	f43f af7d 	beq.w	800690a <_dtoa_r+0x822>
 8006a10:	4618      	mov	r0, r3
 8006a12:	301c      	adds	r0, #28
 8006a14:	e772      	b.n	80068fc <_dtoa_r+0x814>
 8006a16:	9b02      	ldr	r3, [sp, #8]
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	dc36      	bgt.n	8006a8a <_dtoa_r+0x9a2>
 8006a1c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006a1e:	2b02      	cmp	r3, #2
 8006a20:	dd33      	ble.n	8006a8a <_dtoa_r+0x9a2>
 8006a22:	f8dd b008 	ldr.w	fp, [sp, #8]
 8006a26:	f1bb 0f00 	cmp.w	fp, #0
 8006a2a:	d10d      	bne.n	8006a48 <_dtoa_r+0x960>
 8006a2c:	4621      	mov	r1, r4
 8006a2e:	465b      	mov	r3, fp
 8006a30:	2205      	movs	r2, #5
 8006a32:	4628      	mov	r0, r5
 8006a34:	f000 fd48 	bl	80074c8 <__multadd>
 8006a38:	4601      	mov	r1, r0
 8006a3a:	4604      	mov	r4, r0
 8006a3c:	4650      	mov	r0, sl
 8006a3e:	f000 ffa5 	bl	800798c <__mcmp>
 8006a42:	2800      	cmp	r0, #0
 8006a44:	f73f adb6 	bgt.w	80065b4 <_dtoa_r+0x4cc>
 8006a48:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006a4a:	9f08      	ldr	r7, [sp, #32]
 8006a4c:	ea6f 0903 	mvn.w	r9, r3
 8006a50:	f04f 0800 	mov.w	r8, #0
 8006a54:	4621      	mov	r1, r4
 8006a56:	4628      	mov	r0, r5
 8006a58:	f000 fd14 	bl	8007484 <_Bfree>
 8006a5c:	2e00      	cmp	r6, #0
 8006a5e:	f43f aea4 	beq.w	80067aa <_dtoa_r+0x6c2>
 8006a62:	f1b8 0f00 	cmp.w	r8, #0
 8006a66:	d005      	beq.n	8006a74 <_dtoa_r+0x98c>
 8006a68:	45b0      	cmp	r8, r6
 8006a6a:	d003      	beq.n	8006a74 <_dtoa_r+0x98c>
 8006a6c:	4641      	mov	r1, r8
 8006a6e:	4628      	mov	r0, r5
 8006a70:	f000 fd08 	bl	8007484 <_Bfree>
 8006a74:	4631      	mov	r1, r6
 8006a76:	4628      	mov	r0, r5
 8006a78:	f000 fd04 	bl	8007484 <_Bfree>
 8006a7c:	e695      	b.n	80067aa <_dtoa_r+0x6c2>
 8006a7e:	2400      	movs	r4, #0
 8006a80:	4626      	mov	r6, r4
 8006a82:	e7e1      	b.n	8006a48 <_dtoa_r+0x960>
 8006a84:	46c1      	mov	r9, r8
 8006a86:	4626      	mov	r6, r4
 8006a88:	e594      	b.n	80065b4 <_dtoa_r+0x4cc>
 8006a8a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006a8c:	f8dd b008 	ldr.w	fp, [sp, #8]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	f000 80fc 	beq.w	8006c8e <_dtoa_r+0xba6>
 8006a96:	2f00      	cmp	r7, #0
 8006a98:	dd05      	ble.n	8006aa6 <_dtoa_r+0x9be>
 8006a9a:	4631      	mov	r1, r6
 8006a9c:	463a      	mov	r2, r7
 8006a9e:	4628      	mov	r0, r5
 8006aa0:	f000 ff08 	bl	80078b4 <__lshift>
 8006aa4:	4606      	mov	r6, r0
 8006aa6:	f1b8 0f00 	cmp.w	r8, #0
 8006aaa:	d05c      	beq.n	8006b66 <_dtoa_r+0xa7e>
 8006aac:	4628      	mov	r0, r5
 8006aae:	6871      	ldr	r1, [r6, #4]
 8006ab0:	f000 fca8 	bl	8007404 <_Balloc>
 8006ab4:	4607      	mov	r7, r0
 8006ab6:	b928      	cbnz	r0, 8006ac4 <_dtoa_r+0x9dc>
 8006ab8:	4602      	mov	r2, r0
 8006aba:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006abe:	4b7e      	ldr	r3, [pc, #504]	; (8006cb8 <_dtoa_r+0xbd0>)
 8006ac0:	f7ff bb26 	b.w	8006110 <_dtoa_r+0x28>
 8006ac4:	6932      	ldr	r2, [r6, #16]
 8006ac6:	f106 010c 	add.w	r1, r6, #12
 8006aca:	3202      	adds	r2, #2
 8006acc:	0092      	lsls	r2, r2, #2
 8006ace:	300c      	adds	r0, #12
 8006ad0:	f000 fc8a 	bl	80073e8 <memcpy>
 8006ad4:	2201      	movs	r2, #1
 8006ad6:	4639      	mov	r1, r7
 8006ad8:	4628      	mov	r0, r5
 8006ada:	f000 feeb 	bl	80078b4 <__lshift>
 8006ade:	46b0      	mov	r8, r6
 8006ae0:	4606      	mov	r6, r0
 8006ae2:	9b08      	ldr	r3, [sp, #32]
 8006ae4:	3301      	adds	r3, #1
 8006ae6:	9302      	str	r3, [sp, #8]
 8006ae8:	9b08      	ldr	r3, [sp, #32]
 8006aea:	445b      	add	r3, fp
 8006aec:	930a      	str	r3, [sp, #40]	; 0x28
 8006aee:	9b04      	ldr	r3, [sp, #16]
 8006af0:	f003 0301 	and.w	r3, r3, #1
 8006af4:	9309      	str	r3, [sp, #36]	; 0x24
 8006af6:	9b02      	ldr	r3, [sp, #8]
 8006af8:	4621      	mov	r1, r4
 8006afa:	4650      	mov	r0, sl
 8006afc:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 8006b00:	f7ff fa64 	bl	8005fcc <quorem>
 8006b04:	4603      	mov	r3, r0
 8006b06:	4641      	mov	r1, r8
 8006b08:	3330      	adds	r3, #48	; 0x30
 8006b0a:	9004      	str	r0, [sp, #16]
 8006b0c:	4650      	mov	r0, sl
 8006b0e:	930b      	str	r3, [sp, #44]	; 0x2c
 8006b10:	f000 ff3c 	bl	800798c <__mcmp>
 8006b14:	4632      	mov	r2, r6
 8006b16:	9006      	str	r0, [sp, #24]
 8006b18:	4621      	mov	r1, r4
 8006b1a:	4628      	mov	r0, r5
 8006b1c:	f000 ff52 	bl	80079c4 <__mdiff>
 8006b20:	68c2      	ldr	r2, [r0, #12]
 8006b22:	4607      	mov	r7, r0
 8006b24:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006b26:	bb02      	cbnz	r2, 8006b6a <_dtoa_r+0xa82>
 8006b28:	4601      	mov	r1, r0
 8006b2a:	4650      	mov	r0, sl
 8006b2c:	f000 ff2e 	bl	800798c <__mcmp>
 8006b30:	4602      	mov	r2, r0
 8006b32:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006b34:	4639      	mov	r1, r7
 8006b36:	4628      	mov	r0, r5
 8006b38:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8006b3c:	f000 fca2 	bl	8007484 <_Bfree>
 8006b40:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006b42:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006b44:	9f02      	ldr	r7, [sp, #8]
 8006b46:	ea43 0102 	orr.w	r1, r3, r2
 8006b4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b4c:	430b      	orrs	r3, r1
 8006b4e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006b50:	d10d      	bne.n	8006b6e <_dtoa_r+0xa86>
 8006b52:	2b39      	cmp	r3, #57	; 0x39
 8006b54:	d027      	beq.n	8006ba6 <_dtoa_r+0xabe>
 8006b56:	9a06      	ldr	r2, [sp, #24]
 8006b58:	2a00      	cmp	r2, #0
 8006b5a:	dd01      	ble.n	8006b60 <_dtoa_r+0xa78>
 8006b5c:	9b04      	ldr	r3, [sp, #16]
 8006b5e:	3331      	adds	r3, #49	; 0x31
 8006b60:	f88b 3000 	strb.w	r3, [fp]
 8006b64:	e776      	b.n	8006a54 <_dtoa_r+0x96c>
 8006b66:	4630      	mov	r0, r6
 8006b68:	e7b9      	b.n	8006ade <_dtoa_r+0x9f6>
 8006b6a:	2201      	movs	r2, #1
 8006b6c:	e7e2      	b.n	8006b34 <_dtoa_r+0xa4c>
 8006b6e:	9906      	ldr	r1, [sp, #24]
 8006b70:	2900      	cmp	r1, #0
 8006b72:	db04      	blt.n	8006b7e <_dtoa_r+0xa96>
 8006b74:	9822      	ldr	r0, [sp, #136]	; 0x88
 8006b76:	4301      	orrs	r1, r0
 8006b78:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006b7a:	4301      	orrs	r1, r0
 8006b7c:	d120      	bne.n	8006bc0 <_dtoa_r+0xad8>
 8006b7e:	2a00      	cmp	r2, #0
 8006b80:	ddee      	ble.n	8006b60 <_dtoa_r+0xa78>
 8006b82:	4651      	mov	r1, sl
 8006b84:	2201      	movs	r2, #1
 8006b86:	4628      	mov	r0, r5
 8006b88:	9302      	str	r3, [sp, #8]
 8006b8a:	f000 fe93 	bl	80078b4 <__lshift>
 8006b8e:	4621      	mov	r1, r4
 8006b90:	4682      	mov	sl, r0
 8006b92:	f000 fefb 	bl	800798c <__mcmp>
 8006b96:	2800      	cmp	r0, #0
 8006b98:	9b02      	ldr	r3, [sp, #8]
 8006b9a:	dc02      	bgt.n	8006ba2 <_dtoa_r+0xaba>
 8006b9c:	d1e0      	bne.n	8006b60 <_dtoa_r+0xa78>
 8006b9e:	07da      	lsls	r2, r3, #31
 8006ba0:	d5de      	bpl.n	8006b60 <_dtoa_r+0xa78>
 8006ba2:	2b39      	cmp	r3, #57	; 0x39
 8006ba4:	d1da      	bne.n	8006b5c <_dtoa_r+0xa74>
 8006ba6:	2339      	movs	r3, #57	; 0x39
 8006ba8:	f88b 3000 	strb.w	r3, [fp]
 8006bac:	463b      	mov	r3, r7
 8006bae:	461f      	mov	r7, r3
 8006bb0:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8006bb4:	3b01      	subs	r3, #1
 8006bb6:	2a39      	cmp	r2, #57	; 0x39
 8006bb8:	d050      	beq.n	8006c5c <_dtoa_r+0xb74>
 8006bba:	3201      	adds	r2, #1
 8006bbc:	701a      	strb	r2, [r3, #0]
 8006bbe:	e749      	b.n	8006a54 <_dtoa_r+0x96c>
 8006bc0:	2a00      	cmp	r2, #0
 8006bc2:	dd03      	ble.n	8006bcc <_dtoa_r+0xae4>
 8006bc4:	2b39      	cmp	r3, #57	; 0x39
 8006bc6:	d0ee      	beq.n	8006ba6 <_dtoa_r+0xabe>
 8006bc8:	3301      	adds	r3, #1
 8006bca:	e7c9      	b.n	8006b60 <_dtoa_r+0xa78>
 8006bcc:	9a02      	ldr	r2, [sp, #8]
 8006bce:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006bd0:	f802 3c01 	strb.w	r3, [r2, #-1]
 8006bd4:	428a      	cmp	r2, r1
 8006bd6:	d02a      	beq.n	8006c2e <_dtoa_r+0xb46>
 8006bd8:	4651      	mov	r1, sl
 8006bda:	2300      	movs	r3, #0
 8006bdc:	220a      	movs	r2, #10
 8006bde:	4628      	mov	r0, r5
 8006be0:	f000 fc72 	bl	80074c8 <__multadd>
 8006be4:	45b0      	cmp	r8, r6
 8006be6:	4682      	mov	sl, r0
 8006be8:	f04f 0300 	mov.w	r3, #0
 8006bec:	f04f 020a 	mov.w	r2, #10
 8006bf0:	4641      	mov	r1, r8
 8006bf2:	4628      	mov	r0, r5
 8006bf4:	d107      	bne.n	8006c06 <_dtoa_r+0xb1e>
 8006bf6:	f000 fc67 	bl	80074c8 <__multadd>
 8006bfa:	4680      	mov	r8, r0
 8006bfc:	4606      	mov	r6, r0
 8006bfe:	9b02      	ldr	r3, [sp, #8]
 8006c00:	3301      	adds	r3, #1
 8006c02:	9302      	str	r3, [sp, #8]
 8006c04:	e777      	b.n	8006af6 <_dtoa_r+0xa0e>
 8006c06:	f000 fc5f 	bl	80074c8 <__multadd>
 8006c0a:	4631      	mov	r1, r6
 8006c0c:	4680      	mov	r8, r0
 8006c0e:	2300      	movs	r3, #0
 8006c10:	220a      	movs	r2, #10
 8006c12:	4628      	mov	r0, r5
 8006c14:	f000 fc58 	bl	80074c8 <__multadd>
 8006c18:	4606      	mov	r6, r0
 8006c1a:	e7f0      	b.n	8006bfe <_dtoa_r+0xb16>
 8006c1c:	f1bb 0f00 	cmp.w	fp, #0
 8006c20:	bfcc      	ite	gt
 8006c22:	465f      	movgt	r7, fp
 8006c24:	2701      	movle	r7, #1
 8006c26:	f04f 0800 	mov.w	r8, #0
 8006c2a:	9a08      	ldr	r2, [sp, #32]
 8006c2c:	4417      	add	r7, r2
 8006c2e:	4651      	mov	r1, sl
 8006c30:	2201      	movs	r2, #1
 8006c32:	4628      	mov	r0, r5
 8006c34:	9302      	str	r3, [sp, #8]
 8006c36:	f000 fe3d 	bl	80078b4 <__lshift>
 8006c3a:	4621      	mov	r1, r4
 8006c3c:	4682      	mov	sl, r0
 8006c3e:	f000 fea5 	bl	800798c <__mcmp>
 8006c42:	2800      	cmp	r0, #0
 8006c44:	dcb2      	bgt.n	8006bac <_dtoa_r+0xac4>
 8006c46:	d102      	bne.n	8006c4e <_dtoa_r+0xb66>
 8006c48:	9b02      	ldr	r3, [sp, #8]
 8006c4a:	07db      	lsls	r3, r3, #31
 8006c4c:	d4ae      	bmi.n	8006bac <_dtoa_r+0xac4>
 8006c4e:	463b      	mov	r3, r7
 8006c50:	461f      	mov	r7, r3
 8006c52:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006c56:	2a30      	cmp	r2, #48	; 0x30
 8006c58:	d0fa      	beq.n	8006c50 <_dtoa_r+0xb68>
 8006c5a:	e6fb      	b.n	8006a54 <_dtoa_r+0x96c>
 8006c5c:	9a08      	ldr	r2, [sp, #32]
 8006c5e:	429a      	cmp	r2, r3
 8006c60:	d1a5      	bne.n	8006bae <_dtoa_r+0xac6>
 8006c62:	2331      	movs	r3, #49	; 0x31
 8006c64:	f109 0901 	add.w	r9, r9, #1
 8006c68:	7013      	strb	r3, [r2, #0]
 8006c6a:	e6f3      	b.n	8006a54 <_dtoa_r+0x96c>
 8006c6c:	4b13      	ldr	r3, [pc, #76]	; (8006cbc <_dtoa_r+0xbd4>)
 8006c6e:	f7ff baa7 	b.w	80061c0 <_dtoa_r+0xd8>
 8006c72:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	f47f aa80 	bne.w	800617a <_dtoa_r+0x92>
 8006c7a:	4b11      	ldr	r3, [pc, #68]	; (8006cc0 <_dtoa_r+0xbd8>)
 8006c7c:	f7ff baa0 	b.w	80061c0 <_dtoa_r+0xd8>
 8006c80:	f1bb 0f00 	cmp.w	fp, #0
 8006c84:	dc03      	bgt.n	8006c8e <_dtoa_r+0xba6>
 8006c86:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006c88:	2b02      	cmp	r3, #2
 8006c8a:	f73f aecc 	bgt.w	8006a26 <_dtoa_r+0x93e>
 8006c8e:	9f08      	ldr	r7, [sp, #32]
 8006c90:	4621      	mov	r1, r4
 8006c92:	4650      	mov	r0, sl
 8006c94:	f7ff f99a 	bl	8005fcc <quorem>
 8006c98:	9a08      	ldr	r2, [sp, #32]
 8006c9a:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8006c9e:	f807 3b01 	strb.w	r3, [r7], #1
 8006ca2:	1aba      	subs	r2, r7, r2
 8006ca4:	4593      	cmp	fp, r2
 8006ca6:	ddb9      	ble.n	8006c1c <_dtoa_r+0xb34>
 8006ca8:	4651      	mov	r1, sl
 8006caa:	2300      	movs	r3, #0
 8006cac:	220a      	movs	r2, #10
 8006cae:	4628      	mov	r0, r5
 8006cb0:	f000 fc0a 	bl	80074c8 <__multadd>
 8006cb4:	4682      	mov	sl, r0
 8006cb6:	e7eb      	b.n	8006c90 <_dtoa_r+0xba8>
 8006cb8:	08009d44 	.word	0x08009d44
 8006cbc:	08009b44 	.word	0x08009b44
 8006cc0:	08009cc1 	.word	0x08009cc1

08006cc4 <rshift>:
 8006cc4:	6903      	ldr	r3, [r0, #16]
 8006cc6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006cca:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8006cce:	f100 0414 	add.w	r4, r0, #20
 8006cd2:	ea4f 1261 	mov.w	r2, r1, asr #5
 8006cd6:	dd46      	ble.n	8006d66 <rshift+0xa2>
 8006cd8:	f011 011f 	ands.w	r1, r1, #31
 8006cdc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8006ce0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8006ce4:	d10c      	bne.n	8006d00 <rshift+0x3c>
 8006ce6:	4629      	mov	r1, r5
 8006ce8:	f100 0710 	add.w	r7, r0, #16
 8006cec:	42b1      	cmp	r1, r6
 8006cee:	d335      	bcc.n	8006d5c <rshift+0x98>
 8006cf0:	1a9b      	subs	r3, r3, r2
 8006cf2:	009b      	lsls	r3, r3, #2
 8006cf4:	1eea      	subs	r2, r5, #3
 8006cf6:	4296      	cmp	r6, r2
 8006cf8:	bf38      	it	cc
 8006cfa:	2300      	movcc	r3, #0
 8006cfc:	4423      	add	r3, r4
 8006cfe:	e015      	b.n	8006d2c <rshift+0x68>
 8006d00:	46a1      	mov	r9, r4
 8006d02:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8006d06:	f1c1 0820 	rsb	r8, r1, #32
 8006d0a:	40cf      	lsrs	r7, r1
 8006d0c:	f105 0e04 	add.w	lr, r5, #4
 8006d10:	4576      	cmp	r6, lr
 8006d12:	46f4      	mov	ip, lr
 8006d14:	d816      	bhi.n	8006d44 <rshift+0x80>
 8006d16:	1a9b      	subs	r3, r3, r2
 8006d18:	009a      	lsls	r2, r3, #2
 8006d1a:	3a04      	subs	r2, #4
 8006d1c:	3501      	adds	r5, #1
 8006d1e:	42ae      	cmp	r6, r5
 8006d20:	bf38      	it	cc
 8006d22:	2200      	movcc	r2, #0
 8006d24:	18a3      	adds	r3, r4, r2
 8006d26:	50a7      	str	r7, [r4, r2]
 8006d28:	b107      	cbz	r7, 8006d2c <rshift+0x68>
 8006d2a:	3304      	adds	r3, #4
 8006d2c:	42a3      	cmp	r3, r4
 8006d2e:	eba3 0204 	sub.w	r2, r3, r4
 8006d32:	bf08      	it	eq
 8006d34:	2300      	moveq	r3, #0
 8006d36:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8006d3a:	6102      	str	r2, [r0, #16]
 8006d3c:	bf08      	it	eq
 8006d3e:	6143      	streq	r3, [r0, #20]
 8006d40:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006d44:	f8dc c000 	ldr.w	ip, [ip]
 8006d48:	fa0c fc08 	lsl.w	ip, ip, r8
 8006d4c:	ea4c 0707 	orr.w	r7, ip, r7
 8006d50:	f849 7b04 	str.w	r7, [r9], #4
 8006d54:	f85e 7b04 	ldr.w	r7, [lr], #4
 8006d58:	40cf      	lsrs	r7, r1
 8006d5a:	e7d9      	b.n	8006d10 <rshift+0x4c>
 8006d5c:	f851 cb04 	ldr.w	ip, [r1], #4
 8006d60:	f847 cf04 	str.w	ip, [r7, #4]!
 8006d64:	e7c2      	b.n	8006cec <rshift+0x28>
 8006d66:	4623      	mov	r3, r4
 8006d68:	e7e0      	b.n	8006d2c <rshift+0x68>

08006d6a <__hexdig_fun>:
 8006d6a:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8006d6e:	2b09      	cmp	r3, #9
 8006d70:	d802      	bhi.n	8006d78 <__hexdig_fun+0xe>
 8006d72:	3820      	subs	r0, #32
 8006d74:	b2c0      	uxtb	r0, r0
 8006d76:	4770      	bx	lr
 8006d78:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8006d7c:	2b05      	cmp	r3, #5
 8006d7e:	d801      	bhi.n	8006d84 <__hexdig_fun+0x1a>
 8006d80:	3847      	subs	r0, #71	; 0x47
 8006d82:	e7f7      	b.n	8006d74 <__hexdig_fun+0xa>
 8006d84:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8006d88:	2b05      	cmp	r3, #5
 8006d8a:	d801      	bhi.n	8006d90 <__hexdig_fun+0x26>
 8006d8c:	3827      	subs	r0, #39	; 0x27
 8006d8e:	e7f1      	b.n	8006d74 <__hexdig_fun+0xa>
 8006d90:	2000      	movs	r0, #0
 8006d92:	4770      	bx	lr

08006d94 <__gethex>:
 8006d94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d98:	b08b      	sub	sp, #44	; 0x2c
 8006d9a:	9306      	str	r3, [sp, #24]
 8006d9c:	4bb9      	ldr	r3, [pc, #740]	; (8007084 <__gethex+0x2f0>)
 8006d9e:	9002      	str	r0, [sp, #8]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	468b      	mov	fp, r1
 8006da4:	4618      	mov	r0, r3
 8006da6:	4690      	mov	r8, r2
 8006da8:	9303      	str	r3, [sp, #12]
 8006daa:	f7f9 f9d1 	bl	8000150 <strlen>
 8006dae:	4682      	mov	sl, r0
 8006db0:	9b03      	ldr	r3, [sp, #12]
 8006db2:	f8db 2000 	ldr.w	r2, [fp]
 8006db6:	4403      	add	r3, r0
 8006db8:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8006dbc:	9307      	str	r3, [sp, #28]
 8006dbe:	1c93      	adds	r3, r2, #2
 8006dc0:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8006dc4:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8006dc8:	32fe      	adds	r2, #254	; 0xfe
 8006dca:	18d1      	adds	r1, r2, r3
 8006dcc:	461f      	mov	r7, r3
 8006dce:	f813 0b01 	ldrb.w	r0, [r3], #1
 8006dd2:	9101      	str	r1, [sp, #4]
 8006dd4:	2830      	cmp	r0, #48	; 0x30
 8006dd6:	d0f8      	beq.n	8006dca <__gethex+0x36>
 8006dd8:	f7ff ffc7 	bl	8006d6a <__hexdig_fun>
 8006ddc:	4604      	mov	r4, r0
 8006dde:	2800      	cmp	r0, #0
 8006de0:	d13a      	bne.n	8006e58 <__gethex+0xc4>
 8006de2:	4652      	mov	r2, sl
 8006de4:	4638      	mov	r0, r7
 8006de6:	9903      	ldr	r1, [sp, #12]
 8006de8:	f001 f9ea 	bl	80081c0 <strncmp>
 8006dec:	4605      	mov	r5, r0
 8006dee:	2800      	cmp	r0, #0
 8006df0:	d166      	bne.n	8006ec0 <__gethex+0x12c>
 8006df2:	f817 000a 	ldrb.w	r0, [r7, sl]
 8006df6:	eb07 060a 	add.w	r6, r7, sl
 8006dfa:	f7ff ffb6 	bl	8006d6a <__hexdig_fun>
 8006dfe:	2800      	cmp	r0, #0
 8006e00:	d060      	beq.n	8006ec4 <__gethex+0x130>
 8006e02:	4633      	mov	r3, r6
 8006e04:	7818      	ldrb	r0, [r3, #0]
 8006e06:	461f      	mov	r7, r3
 8006e08:	2830      	cmp	r0, #48	; 0x30
 8006e0a:	f103 0301 	add.w	r3, r3, #1
 8006e0e:	d0f9      	beq.n	8006e04 <__gethex+0x70>
 8006e10:	f7ff ffab 	bl	8006d6a <__hexdig_fun>
 8006e14:	2301      	movs	r3, #1
 8006e16:	fab0 f480 	clz	r4, r0
 8006e1a:	4635      	mov	r5, r6
 8006e1c:	0964      	lsrs	r4, r4, #5
 8006e1e:	9301      	str	r3, [sp, #4]
 8006e20:	463a      	mov	r2, r7
 8006e22:	4616      	mov	r6, r2
 8006e24:	7830      	ldrb	r0, [r6, #0]
 8006e26:	3201      	adds	r2, #1
 8006e28:	f7ff ff9f 	bl	8006d6a <__hexdig_fun>
 8006e2c:	2800      	cmp	r0, #0
 8006e2e:	d1f8      	bne.n	8006e22 <__gethex+0x8e>
 8006e30:	4652      	mov	r2, sl
 8006e32:	4630      	mov	r0, r6
 8006e34:	9903      	ldr	r1, [sp, #12]
 8006e36:	f001 f9c3 	bl	80081c0 <strncmp>
 8006e3a:	b980      	cbnz	r0, 8006e5e <__gethex+0xca>
 8006e3c:	b94d      	cbnz	r5, 8006e52 <__gethex+0xbe>
 8006e3e:	eb06 050a 	add.w	r5, r6, sl
 8006e42:	462a      	mov	r2, r5
 8006e44:	4616      	mov	r6, r2
 8006e46:	7830      	ldrb	r0, [r6, #0]
 8006e48:	3201      	adds	r2, #1
 8006e4a:	f7ff ff8e 	bl	8006d6a <__hexdig_fun>
 8006e4e:	2800      	cmp	r0, #0
 8006e50:	d1f8      	bne.n	8006e44 <__gethex+0xb0>
 8006e52:	1bad      	subs	r5, r5, r6
 8006e54:	00ad      	lsls	r5, r5, #2
 8006e56:	e004      	b.n	8006e62 <__gethex+0xce>
 8006e58:	2400      	movs	r4, #0
 8006e5a:	4625      	mov	r5, r4
 8006e5c:	e7e0      	b.n	8006e20 <__gethex+0x8c>
 8006e5e:	2d00      	cmp	r5, #0
 8006e60:	d1f7      	bne.n	8006e52 <__gethex+0xbe>
 8006e62:	7833      	ldrb	r3, [r6, #0]
 8006e64:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8006e68:	2b50      	cmp	r3, #80	; 0x50
 8006e6a:	d139      	bne.n	8006ee0 <__gethex+0x14c>
 8006e6c:	7873      	ldrb	r3, [r6, #1]
 8006e6e:	2b2b      	cmp	r3, #43	; 0x2b
 8006e70:	d02a      	beq.n	8006ec8 <__gethex+0x134>
 8006e72:	2b2d      	cmp	r3, #45	; 0x2d
 8006e74:	d02c      	beq.n	8006ed0 <__gethex+0x13c>
 8006e76:	f04f 0900 	mov.w	r9, #0
 8006e7a:	1c71      	adds	r1, r6, #1
 8006e7c:	7808      	ldrb	r0, [r1, #0]
 8006e7e:	f7ff ff74 	bl	8006d6a <__hexdig_fun>
 8006e82:	1e43      	subs	r3, r0, #1
 8006e84:	b2db      	uxtb	r3, r3
 8006e86:	2b18      	cmp	r3, #24
 8006e88:	d82a      	bhi.n	8006ee0 <__gethex+0x14c>
 8006e8a:	f1a0 0210 	sub.w	r2, r0, #16
 8006e8e:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8006e92:	f7ff ff6a 	bl	8006d6a <__hexdig_fun>
 8006e96:	1e43      	subs	r3, r0, #1
 8006e98:	b2db      	uxtb	r3, r3
 8006e9a:	2b18      	cmp	r3, #24
 8006e9c:	d91b      	bls.n	8006ed6 <__gethex+0x142>
 8006e9e:	f1b9 0f00 	cmp.w	r9, #0
 8006ea2:	d000      	beq.n	8006ea6 <__gethex+0x112>
 8006ea4:	4252      	negs	r2, r2
 8006ea6:	4415      	add	r5, r2
 8006ea8:	f8cb 1000 	str.w	r1, [fp]
 8006eac:	b1d4      	cbz	r4, 8006ee4 <__gethex+0x150>
 8006eae:	9b01      	ldr	r3, [sp, #4]
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	bf14      	ite	ne
 8006eb4:	2700      	movne	r7, #0
 8006eb6:	2706      	moveq	r7, #6
 8006eb8:	4638      	mov	r0, r7
 8006eba:	b00b      	add	sp, #44	; 0x2c
 8006ebc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ec0:	463e      	mov	r6, r7
 8006ec2:	4625      	mov	r5, r4
 8006ec4:	2401      	movs	r4, #1
 8006ec6:	e7cc      	b.n	8006e62 <__gethex+0xce>
 8006ec8:	f04f 0900 	mov.w	r9, #0
 8006ecc:	1cb1      	adds	r1, r6, #2
 8006ece:	e7d5      	b.n	8006e7c <__gethex+0xe8>
 8006ed0:	f04f 0901 	mov.w	r9, #1
 8006ed4:	e7fa      	b.n	8006ecc <__gethex+0x138>
 8006ed6:	230a      	movs	r3, #10
 8006ed8:	fb03 0202 	mla	r2, r3, r2, r0
 8006edc:	3a10      	subs	r2, #16
 8006ede:	e7d6      	b.n	8006e8e <__gethex+0xfa>
 8006ee0:	4631      	mov	r1, r6
 8006ee2:	e7e1      	b.n	8006ea8 <__gethex+0x114>
 8006ee4:	4621      	mov	r1, r4
 8006ee6:	1bf3      	subs	r3, r6, r7
 8006ee8:	3b01      	subs	r3, #1
 8006eea:	2b07      	cmp	r3, #7
 8006eec:	dc0a      	bgt.n	8006f04 <__gethex+0x170>
 8006eee:	9802      	ldr	r0, [sp, #8]
 8006ef0:	f000 fa88 	bl	8007404 <_Balloc>
 8006ef4:	4604      	mov	r4, r0
 8006ef6:	b940      	cbnz	r0, 8006f0a <__gethex+0x176>
 8006ef8:	4602      	mov	r2, r0
 8006efa:	21de      	movs	r1, #222	; 0xde
 8006efc:	4b62      	ldr	r3, [pc, #392]	; (8007088 <__gethex+0x2f4>)
 8006efe:	4863      	ldr	r0, [pc, #396]	; (800708c <__gethex+0x2f8>)
 8006f00:	f001 f97e 	bl	8008200 <__assert_func>
 8006f04:	3101      	adds	r1, #1
 8006f06:	105b      	asrs	r3, r3, #1
 8006f08:	e7ef      	b.n	8006eea <__gethex+0x156>
 8006f0a:	f04f 0b00 	mov.w	fp, #0
 8006f0e:	f100 0914 	add.w	r9, r0, #20
 8006f12:	f1ca 0301 	rsb	r3, sl, #1
 8006f16:	f8cd 9010 	str.w	r9, [sp, #16]
 8006f1a:	f8cd b004 	str.w	fp, [sp, #4]
 8006f1e:	9308      	str	r3, [sp, #32]
 8006f20:	42b7      	cmp	r7, r6
 8006f22:	d33f      	bcc.n	8006fa4 <__gethex+0x210>
 8006f24:	9f04      	ldr	r7, [sp, #16]
 8006f26:	9b01      	ldr	r3, [sp, #4]
 8006f28:	f847 3b04 	str.w	r3, [r7], #4
 8006f2c:	eba7 0709 	sub.w	r7, r7, r9
 8006f30:	10bf      	asrs	r7, r7, #2
 8006f32:	6127      	str	r7, [r4, #16]
 8006f34:	4618      	mov	r0, r3
 8006f36:	f000 fb5b 	bl	80075f0 <__hi0bits>
 8006f3a:	017f      	lsls	r7, r7, #5
 8006f3c:	f8d8 6000 	ldr.w	r6, [r8]
 8006f40:	1a3f      	subs	r7, r7, r0
 8006f42:	42b7      	cmp	r7, r6
 8006f44:	dd62      	ble.n	800700c <__gethex+0x278>
 8006f46:	1bbf      	subs	r7, r7, r6
 8006f48:	4639      	mov	r1, r7
 8006f4a:	4620      	mov	r0, r4
 8006f4c:	f000 fef1 	bl	8007d32 <__any_on>
 8006f50:	4682      	mov	sl, r0
 8006f52:	b1a8      	cbz	r0, 8006f80 <__gethex+0x1ec>
 8006f54:	f04f 0a01 	mov.w	sl, #1
 8006f58:	1e7b      	subs	r3, r7, #1
 8006f5a:	1159      	asrs	r1, r3, #5
 8006f5c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8006f60:	f003 021f 	and.w	r2, r3, #31
 8006f64:	fa0a f202 	lsl.w	r2, sl, r2
 8006f68:	420a      	tst	r2, r1
 8006f6a:	d009      	beq.n	8006f80 <__gethex+0x1ec>
 8006f6c:	4553      	cmp	r3, sl
 8006f6e:	dd05      	ble.n	8006f7c <__gethex+0x1e8>
 8006f70:	4620      	mov	r0, r4
 8006f72:	1eb9      	subs	r1, r7, #2
 8006f74:	f000 fedd 	bl	8007d32 <__any_on>
 8006f78:	2800      	cmp	r0, #0
 8006f7a:	d144      	bne.n	8007006 <__gethex+0x272>
 8006f7c:	f04f 0a02 	mov.w	sl, #2
 8006f80:	4639      	mov	r1, r7
 8006f82:	4620      	mov	r0, r4
 8006f84:	f7ff fe9e 	bl	8006cc4 <rshift>
 8006f88:	443d      	add	r5, r7
 8006f8a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006f8e:	42ab      	cmp	r3, r5
 8006f90:	da4a      	bge.n	8007028 <__gethex+0x294>
 8006f92:	4621      	mov	r1, r4
 8006f94:	9802      	ldr	r0, [sp, #8]
 8006f96:	f000 fa75 	bl	8007484 <_Bfree>
 8006f9a:	2300      	movs	r3, #0
 8006f9c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006f9e:	27a3      	movs	r7, #163	; 0xa3
 8006fa0:	6013      	str	r3, [r2, #0]
 8006fa2:	e789      	b.n	8006eb8 <__gethex+0x124>
 8006fa4:	1e73      	subs	r3, r6, #1
 8006fa6:	9a07      	ldr	r2, [sp, #28]
 8006fa8:	9305      	str	r3, [sp, #20]
 8006faa:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006fae:	4293      	cmp	r3, r2
 8006fb0:	d019      	beq.n	8006fe6 <__gethex+0x252>
 8006fb2:	f1bb 0f20 	cmp.w	fp, #32
 8006fb6:	d107      	bne.n	8006fc8 <__gethex+0x234>
 8006fb8:	9b04      	ldr	r3, [sp, #16]
 8006fba:	9a01      	ldr	r2, [sp, #4]
 8006fbc:	f843 2b04 	str.w	r2, [r3], #4
 8006fc0:	9304      	str	r3, [sp, #16]
 8006fc2:	2300      	movs	r3, #0
 8006fc4:	469b      	mov	fp, r3
 8006fc6:	9301      	str	r3, [sp, #4]
 8006fc8:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8006fcc:	f7ff fecd 	bl	8006d6a <__hexdig_fun>
 8006fd0:	9b01      	ldr	r3, [sp, #4]
 8006fd2:	f000 000f 	and.w	r0, r0, #15
 8006fd6:	fa00 f00b 	lsl.w	r0, r0, fp
 8006fda:	4303      	orrs	r3, r0
 8006fdc:	9301      	str	r3, [sp, #4]
 8006fde:	f10b 0b04 	add.w	fp, fp, #4
 8006fe2:	9b05      	ldr	r3, [sp, #20]
 8006fe4:	e00d      	b.n	8007002 <__gethex+0x26e>
 8006fe6:	9b05      	ldr	r3, [sp, #20]
 8006fe8:	9a08      	ldr	r2, [sp, #32]
 8006fea:	4413      	add	r3, r2
 8006fec:	42bb      	cmp	r3, r7
 8006fee:	d3e0      	bcc.n	8006fb2 <__gethex+0x21e>
 8006ff0:	4618      	mov	r0, r3
 8006ff2:	4652      	mov	r2, sl
 8006ff4:	9903      	ldr	r1, [sp, #12]
 8006ff6:	9309      	str	r3, [sp, #36]	; 0x24
 8006ff8:	f001 f8e2 	bl	80081c0 <strncmp>
 8006ffc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ffe:	2800      	cmp	r0, #0
 8007000:	d1d7      	bne.n	8006fb2 <__gethex+0x21e>
 8007002:	461e      	mov	r6, r3
 8007004:	e78c      	b.n	8006f20 <__gethex+0x18c>
 8007006:	f04f 0a03 	mov.w	sl, #3
 800700a:	e7b9      	b.n	8006f80 <__gethex+0x1ec>
 800700c:	da09      	bge.n	8007022 <__gethex+0x28e>
 800700e:	1bf7      	subs	r7, r6, r7
 8007010:	4621      	mov	r1, r4
 8007012:	463a      	mov	r2, r7
 8007014:	9802      	ldr	r0, [sp, #8]
 8007016:	f000 fc4d 	bl	80078b4 <__lshift>
 800701a:	4604      	mov	r4, r0
 800701c:	1bed      	subs	r5, r5, r7
 800701e:	f100 0914 	add.w	r9, r0, #20
 8007022:	f04f 0a00 	mov.w	sl, #0
 8007026:	e7b0      	b.n	8006f8a <__gethex+0x1f6>
 8007028:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800702c:	42a8      	cmp	r0, r5
 800702e:	dd71      	ble.n	8007114 <__gethex+0x380>
 8007030:	1b45      	subs	r5, r0, r5
 8007032:	42ae      	cmp	r6, r5
 8007034:	dc34      	bgt.n	80070a0 <__gethex+0x30c>
 8007036:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800703a:	2b02      	cmp	r3, #2
 800703c:	d028      	beq.n	8007090 <__gethex+0x2fc>
 800703e:	2b03      	cmp	r3, #3
 8007040:	d02a      	beq.n	8007098 <__gethex+0x304>
 8007042:	2b01      	cmp	r3, #1
 8007044:	d115      	bne.n	8007072 <__gethex+0x2de>
 8007046:	42ae      	cmp	r6, r5
 8007048:	d113      	bne.n	8007072 <__gethex+0x2de>
 800704a:	2e01      	cmp	r6, #1
 800704c:	d10b      	bne.n	8007066 <__gethex+0x2d2>
 800704e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8007052:	9a06      	ldr	r2, [sp, #24]
 8007054:	2762      	movs	r7, #98	; 0x62
 8007056:	6013      	str	r3, [r2, #0]
 8007058:	2301      	movs	r3, #1
 800705a:	6123      	str	r3, [r4, #16]
 800705c:	f8c9 3000 	str.w	r3, [r9]
 8007060:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007062:	601c      	str	r4, [r3, #0]
 8007064:	e728      	b.n	8006eb8 <__gethex+0x124>
 8007066:	4620      	mov	r0, r4
 8007068:	1e71      	subs	r1, r6, #1
 800706a:	f000 fe62 	bl	8007d32 <__any_on>
 800706e:	2800      	cmp	r0, #0
 8007070:	d1ed      	bne.n	800704e <__gethex+0x2ba>
 8007072:	4621      	mov	r1, r4
 8007074:	9802      	ldr	r0, [sp, #8]
 8007076:	f000 fa05 	bl	8007484 <_Bfree>
 800707a:	2300      	movs	r3, #0
 800707c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800707e:	2750      	movs	r7, #80	; 0x50
 8007080:	6013      	str	r3, [r2, #0]
 8007082:	e719      	b.n	8006eb8 <__gethex+0x124>
 8007084:	08009dc0 	.word	0x08009dc0
 8007088:	08009d44 	.word	0x08009d44
 800708c:	08009d55 	.word	0x08009d55
 8007090:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007092:	2b00      	cmp	r3, #0
 8007094:	d1ed      	bne.n	8007072 <__gethex+0x2de>
 8007096:	e7da      	b.n	800704e <__gethex+0x2ba>
 8007098:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800709a:	2b00      	cmp	r3, #0
 800709c:	d1d7      	bne.n	800704e <__gethex+0x2ba>
 800709e:	e7e8      	b.n	8007072 <__gethex+0x2de>
 80070a0:	1e6f      	subs	r7, r5, #1
 80070a2:	f1ba 0f00 	cmp.w	sl, #0
 80070a6:	d132      	bne.n	800710e <__gethex+0x37a>
 80070a8:	b127      	cbz	r7, 80070b4 <__gethex+0x320>
 80070aa:	4639      	mov	r1, r7
 80070ac:	4620      	mov	r0, r4
 80070ae:	f000 fe40 	bl	8007d32 <__any_on>
 80070b2:	4682      	mov	sl, r0
 80070b4:	2101      	movs	r1, #1
 80070b6:	117b      	asrs	r3, r7, #5
 80070b8:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80070bc:	f007 071f 	and.w	r7, r7, #31
 80070c0:	fa01 f707 	lsl.w	r7, r1, r7
 80070c4:	421f      	tst	r7, r3
 80070c6:	f04f 0702 	mov.w	r7, #2
 80070ca:	4629      	mov	r1, r5
 80070cc:	4620      	mov	r0, r4
 80070ce:	bf18      	it	ne
 80070d0:	f04a 0a02 	orrne.w	sl, sl, #2
 80070d4:	1b76      	subs	r6, r6, r5
 80070d6:	f7ff fdf5 	bl	8006cc4 <rshift>
 80070da:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80070de:	f1ba 0f00 	cmp.w	sl, #0
 80070e2:	d048      	beq.n	8007176 <__gethex+0x3e2>
 80070e4:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80070e8:	2b02      	cmp	r3, #2
 80070ea:	d015      	beq.n	8007118 <__gethex+0x384>
 80070ec:	2b03      	cmp	r3, #3
 80070ee:	d017      	beq.n	8007120 <__gethex+0x38c>
 80070f0:	2b01      	cmp	r3, #1
 80070f2:	d109      	bne.n	8007108 <__gethex+0x374>
 80070f4:	f01a 0f02 	tst.w	sl, #2
 80070f8:	d006      	beq.n	8007108 <__gethex+0x374>
 80070fa:	f8d9 0000 	ldr.w	r0, [r9]
 80070fe:	ea4a 0a00 	orr.w	sl, sl, r0
 8007102:	f01a 0f01 	tst.w	sl, #1
 8007106:	d10e      	bne.n	8007126 <__gethex+0x392>
 8007108:	f047 0710 	orr.w	r7, r7, #16
 800710c:	e033      	b.n	8007176 <__gethex+0x3e2>
 800710e:	f04f 0a01 	mov.w	sl, #1
 8007112:	e7cf      	b.n	80070b4 <__gethex+0x320>
 8007114:	2701      	movs	r7, #1
 8007116:	e7e2      	b.n	80070de <__gethex+0x34a>
 8007118:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800711a:	f1c3 0301 	rsb	r3, r3, #1
 800711e:	9315      	str	r3, [sp, #84]	; 0x54
 8007120:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007122:	2b00      	cmp	r3, #0
 8007124:	d0f0      	beq.n	8007108 <__gethex+0x374>
 8007126:	f04f 0c00 	mov.w	ip, #0
 800712a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800712e:	f104 0314 	add.w	r3, r4, #20
 8007132:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8007136:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800713a:	4618      	mov	r0, r3
 800713c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007140:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 8007144:	d01c      	beq.n	8007180 <__gethex+0x3ec>
 8007146:	3201      	adds	r2, #1
 8007148:	6002      	str	r2, [r0, #0]
 800714a:	2f02      	cmp	r7, #2
 800714c:	f104 0314 	add.w	r3, r4, #20
 8007150:	d13d      	bne.n	80071ce <__gethex+0x43a>
 8007152:	f8d8 2000 	ldr.w	r2, [r8]
 8007156:	3a01      	subs	r2, #1
 8007158:	42b2      	cmp	r2, r6
 800715a:	d10a      	bne.n	8007172 <__gethex+0x3de>
 800715c:	2201      	movs	r2, #1
 800715e:	1171      	asrs	r1, r6, #5
 8007160:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007164:	f006 061f 	and.w	r6, r6, #31
 8007168:	fa02 f606 	lsl.w	r6, r2, r6
 800716c:	421e      	tst	r6, r3
 800716e:	bf18      	it	ne
 8007170:	4617      	movne	r7, r2
 8007172:	f047 0720 	orr.w	r7, r7, #32
 8007176:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007178:	601c      	str	r4, [r3, #0]
 800717a:	9b06      	ldr	r3, [sp, #24]
 800717c:	601d      	str	r5, [r3, #0]
 800717e:	e69b      	b.n	8006eb8 <__gethex+0x124>
 8007180:	4299      	cmp	r1, r3
 8007182:	f843 cc04 	str.w	ip, [r3, #-4]
 8007186:	d8d8      	bhi.n	800713a <__gethex+0x3a6>
 8007188:	68a3      	ldr	r3, [r4, #8]
 800718a:	459b      	cmp	fp, r3
 800718c:	db17      	blt.n	80071be <__gethex+0x42a>
 800718e:	6861      	ldr	r1, [r4, #4]
 8007190:	9802      	ldr	r0, [sp, #8]
 8007192:	3101      	adds	r1, #1
 8007194:	f000 f936 	bl	8007404 <_Balloc>
 8007198:	4681      	mov	r9, r0
 800719a:	b918      	cbnz	r0, 80071a4 <__gethex+0x410>
 800719c:	4602      	mov	r2, r0
 800719e:	2184      	movs	r1, #132	; 0x84
 80071a0:	4b19      	ldr	r3, [pc, #100]	; (8007208 <__gethex+0x474>)
 80071a2:	e6ac      	b.n	8006efe <__gethex+0x16a>
 80071a4:	6922      	ldr	r2, [r4, #16]
 80071a6:	f104 010c 	add.w	r1, r4, #12
 80071aa:	3202      	adds	r2, #2
 80071ac:	0092      	lsls	r2, r2, #2
 80071ae:	300c      	adds	r0, #12
 80071b0:	f000 f91a 	bl	80073e8 <memcpy>
 80071b4:	4621      	mov	r1, r4
 80071b6:	9802      	ldr	r0, [sp, #8]
 80071b8:	f000 f964 	bl	8007484 <_Bfree>
 80071bc:	464c      	mov	r4, r9
 80071be:	6923      	ldr	r3, [r4, #16]
 80071c0:	1c5a      	adds	r2, r3, #1
 80071c2:	6122      	str	r2, [r4, #16]
 80071c4:	2201      	movs	r2, #1
 80071c6:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80071ca:	615a      	str	r2, [r3, #20]
 80071cc:	e7bd      	b.n	800714a <__gethex+0x3b6>
 80071ce:	6922      	ldr	r2, [r4, #16]
 80071d0:	455a      	cmp	r2, fp
 80071d2:	dd0b      	ble.n	80071ec <__gethex+0x458>
 80071d4:	2101      	movs	r1, #1
 80071d6:	4620      	mov	r0, r4
 80071d8:	f7ff fd74 	bl	8006cc4 <rshift>
 80071dc:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80071e0:	3501      	adds	r5, #1
 80071e2:	42ab      	cmp	r3, r5
 80071e4:	f6ff aed5 	blt.w	8006f92 <__gethex+0x1fe>
 80071e8:	2701      	movs	r7, #1
 80071ea:	e7c2      	b.n	8007172 <__gethex+0x3de>
 80071ec:	f016 061f 	ands.w	r6, r6, #31
 80071f0:	d0fa      	beq.n	80071e8 <__gethex+0x454>
 80071f2:	449a      	add	sl, r3
 80071f4:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 80071f8:	f000 f9fa 	bl	80075f0 <__hi0bits>
 80071fc:	f1c6 0620 	rsb	r6, r6, #32
 8007200:	42b0      	cmp	r0, r6
 8007202:	dbe7      	blt.n	80071d4 <__gethex+0x440>
 8007204:	e7f0      	b.n	80071e8 <__gethex+0x454>
 8007206:	bf00      	nop
 8007208:	08009d44 	.word	0x08009d44

0800720c <L_shift>:
 800720c:	f1c2 0208 	rsb	r2, r2, #8
 8007210:	0092      	lsls	r2, r2, #2
 8007212:	b570      	push	{r4, r5, r6, lr}
 8007214:	f1c2 0620 	rsb	r6, r2, #32
 8007218:	6843      	ldr	r3, [r0, #4]
 800721a:	6804      	ldr	r4, [r0, #0]
 800721c:	fa03 f506 	lsl.w	r5, r3, r6
 8007220:	432c      	orrs	r4, r5
 8007222:	40d3      	lsrs	r3, r2
 8007224:	6004      	str	r4, [r0, #0]
 8007226:	f840 3f04 	str.w	r3, [r0, #4]!
 800722a:	4288      	cmp	r0, r1
 800722c:	d3f4      	bcc.n	8007218 <L_shift+0xc>
 800722e:	bd70      	pop	{r4, r5, r6, pc}

08007230 <__match>:
 8007230:	b530      	push	{r4, r5, lr}
 8007232:	6803      	ldr	r3, [r0, #0]
 8007234:	3301      	adds	r3, #1
 8007236:	f811 4b01 	ldrb.w	r4, [r1], #1
 800723a:	b914      	cbnz	r4, 8007242 <__match+0x12>
 800723c:	6003      	str	r3, [r0, #0]
 800723e:	2001      	movs	r0, #1
 8007240:	bd30      	pop	{r4, r5, pc}
 8007242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007246:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800724a:	2d19      	cmp	r5, #25
 800724c:	bf98      	it	ls
 800724e:	3220      	addls	r2, #32
 8007250:	42a2      	cmp	r2, r4
 8007252:	d0f0      	beq.n	8007236 <__match+0x6>
 8007254:	2000      	movs	r0, #0
 8007256:	e7f3      	b.n	8007240 <__match+0x10>

08007258 <__hexnan>:
 8007258:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800725c:	2500      	movs	r5, #0
 800725e:	680b      	ldr	r3, [r1, #0]
 8007260:	4682      	mov	sl, r0
 8007262:	115e      	asrs	r6, r3, #5
 8007264:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8007268:	f013 031f 	ands.w	r3, r3, #31
 800726c:	bf18      	it	ne
 800726e:	3604      	addne	r6, #4
 8007270:	1f37      	subs	r7, r6, #4
 8007272:	4690      	mov	r8, r2
 8007274:	46b9      	mov	r9, r7
 8007276:	463c      	mov	r4, r7
 8007278:	46ab      	mov	fp, r5
 800727a:	b087      	sub	sp, #28
 800727c:	6801      	ldr	r1, [r0, #0]
 800727e:	9301      	str	r3, [sp, #4]
 8007280:	f846 5c04 	str.w	r5, [r6, #-4]
 8007284:	9502      	str	r5, [sp, #8]
 8007286:	784a      	ldrb	r2, [r1, #1]
 8007288:	1c4b      	adds	r3, r1, #1
 800728a:	9303      	str	r3, [sp, #12]
 800728c:	b342      	cbz	r2, 80072e0 <__hexnan+0x88>
 800728e:	4610      	mov	r0, r2
 8007290:	9105      	str	r1, [sp, #20]
 8007292:	9204      	str	r2, [sp, #16]
 8007294:	f7ff fd69 	bl	8006d6a <__hexdig_fun>
 8007298:	2800      	cmp	r0, #0
 800729a:	d14f      	bne.n	800733c <__hexnan+0xe4>
 800729c:	9a04      	ldr	r2, [sp, #16]
 800729e:	9905      	ldr	r1, [sp, #20]
 80072a0:	2a20      	cmp	r2, #32
 80072a2:	d818      	bhi.n	80072d6 <__hexnan+0x7e>
 80072a4:	9b02      	ldr	r3, [sp, #8]
 80072a6:	459b      	cmp	fp, r3
 80072a8:	dd13      	ble.n	80072d2 <__hexnan+0x7a>
 80072aa:	454c      	cmp	r4, r9
 80072ac:	d206      	bcs.n	80072bc <__hexnan+0x64>
 80072ae:	2d07      	cmp	r5, #7
 80072b0:	dc04      	bgt.n	80072bc <__hexnan+0x64>
 80072b2:	462a      	mov	r2, r5
 80072b4:	4649      	mov	r1, r9
 80072b6:	4620      	mov	r0, r4
 80072b8:	f7ff ffa8 	bl	800720c <L_shift>
 80072bc:	4544      	cmp	r4, r8
 80072be:	d950      	bls.n	8007362 <__hexnan+0x10a>
 80072c0:	2300      	movs	r3, #0
 80072c2:	f1a4 0904 	sub.w	r9, r4, #4
 80072c6:	f844 3c04 	str.w	r3, [r4, #-4]
 80072ca:	461d      	mov	r5, r3
 80072cc:	464c      	mov	r4, r9
 80072ce:	f8cd b008 	str.w	fp, [sp, #8]
 80072d2:	9903      	ldr	r1, [sp, #12]
 80072d4:	e7d7      	b.n	8007286 <__hexnan+0x2e>
 80072d6:	2a29      	cmp	r2, #41	; 0x29
 80072d8:	d156      	bne.n	8007388 <__hexnan+0x130>
 80072da:	3102      	adds	r1, #2
 80072dc:	f8ca 1000 	str.w	r1, [sl]
 80072e0:	f1bb 0f00 	cmp.w	fp, #0
 80072e4:	d050      	beq.n	8007388 <__hexnan+0x130>
 80072e6:	454c      	cmp	r4, r9
 80072e8:	d206      	bcs.n	80072f8 <__hexnan+0xa0>
 80072ea:	2d07      	cmp	r5, #7
 80072ec:	dc04      	bgt.n	80072f8 <__hexnan+0xa0>
 80072ee:	462a      	mov	r2, r5
 80072f0:	4649      	mov	r1, r9
 80072f2:	4620      	mov	r0, r4
 80072f4:	f7ff ff8a 	bl	800720c <L_shift>
 80072f8:	4544      	cmp	r4, r8
 80072fa:	d934      	bls.n	8007366 <__hexnan+0x10e>
 80072fc:	4623      	mov	r3, r4
 80072fe:	f1a8 0204 	sub.w	r2, r8, #4
 8007302:	f853 1b04 	ldr.w	r1, [r3], #4
 8007306:	429f      	cmp	r7, r3
 8007308:	f842 1f04 	str.w	r1, [r2, #4]!
 800730c:	d2f9      	bcs.n	8007302 <__hexnan+0xaa>
 800730e:	1b3b      	subs	r3, r7, r4
 8007310:	f023 0303 	bic.w	r3, r3, #3
 8007314:	3304      	adds	r3, #4
 8007316:	3401      	adds	r4, #1
 8007318:	3e03      	subs	r6, #3
 800731a:	42b4      	cmp	r4, r6
 800731c:	bf88      	it	hi
 800731e:	2304      	movhi	r3, #4
 8007320:	2200      	movs	r2, #0
 8007322:	4443      	add	r3, r8
 8007324:	f843 2b04 	str.w	r2, [r3], #4
 8007328:	429f      	cmp	r7, r3
 800732a:	d2fb      	bcs.n	8007324 <__hexnan+0xcc>
 800732c:	683b      	ldr	r3, [r7, #0]
 800732e:	b91b      	cbnz	r3, 8007338 <__hexnan+0xe0>
 8007330:	4547      	cmp	r7, r8
 8007332:	d127      	bne.n	8007384 <__hexnan+0x12c>
 8007334:	2301      	movs	r3, #1
 8007336:	603b      	str	r3, [r7, #0]
 8007338:	2005      	movs	r0, #5
 800733a:	e026      	b.n	800738a <__hexnan+0x132>
 800733c:	3501      	adds	r5, #1
 800733e:	2d08      	cmp	r5, #8
 8007340:	f10b 0b01 	add.w	fp, fp, #1
 8007344:	dd06      	ble.n	8007354 <__hexnan+0xfc>
 8007346:	4544      	cmp	r4, r8
 8007348:	d9c3      	bls.n	80072d2 <__hexnan+0x7a>
 800734a:	2300      	movs	r3, #0
 800734c:	2501      	movs	r5, #1
 800734e:	f844 3c04 	str.w	r3, [r4, #-4]
 8007352:	3c04      	subs	r4, #4
 8007354:	6822      	ldr	r2, [r4, #0]
 8007356:	f000 000f 	and.w	r0, r0, #15
 800735a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800735e:	6022      	str	r2, [r4, #0]
 8007360:	e7b7      	b.n	80072d2 <__hexnan+0x7a>
 8007362:	2508      	movs	r5, #8
 8007364:	e7b5      	b.n	80072d2 <__hexnan+0x7a>
 8007366:	9b01      	ldr	r3, [sp, #4]
 8007368:	2b00      	cmp	r3, #0
 800736a:	d0df      	beq.n	800732c <__hexnan+0xd4>
 800736c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007370:	f1c3 0320 	rsb	r3, r3, #32
 8007374:	fa22 f303 	lsr.w	r3, r2, r3
 8007378:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800737c:	401a      	ands	r2, r3
 800737e:	f846 2c04 	str.w	r2, [r6, #-4]
 8007382:	e7d3      	b.n	800732c <__hexnan+0xd4>
 8007384:	3f04      	subs	r7, #4
 8007386:	e7d1      	b.n	800732c <__hexnan+0xd4>
 8007388:	2004      	movs	r0, #4
 800738a:	b007      	add	sp, #28
 800738c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007390 <_localeconv_r>:
 8007390:	4800      	ldr	r0, [pc, #0]	; (8007394 <_localeconv_r+0x4>)
 8007392:	4770      	bx	lr
 8007394:	2000016c 	.word	0x2000016c

08007398 <malloc>:
 8007398:	4b02      	ldr	r3, [pc, #8]	; (80073a4 <malloc+0xc>)
 800739a:	4601      	mov	r1, r0
 800739c:	6818      	ldr	r0, [r3, #0]
 800739e:	f000 bd43 	b.w	8007e28 <_malloc_r>
 80073a2:	bf00      	nop
 80073a4:	20000014 	.word	0x20000014

080073a8 <__ascii_mbtowc>:
 80073a8:	b082      	sub	sp, #8
 80073aa:	b901      	cbnz	r1, 80073ae <__ascii_mbtowc+0x6>
 80073ac:	a901      	add	r1, sp, #4
 80073ae:	b142      	cbz	r2, 80073c2 <__ascii_mbtowc+0x1a>
 80073b0:	b14b      	cbz	r3, 80073c6 <__ascii_mbtowc+0x1e>
 80073b2:	7813      	ldrb	r3, [r2, #0]
 80073b4:	600b      	str	r3, [r1, #0]
 80073b6:	7812      	ldrb	r2, [r2, #0]
 80073b8:	1e10      	subs	r0, r2, #0
 80073ba:	bf18      	it	ne
 80073bc:	2001      	movne	r0, #1
 80073be:	b002      	add	sp, #8
 80073c0:	4770      	bx	lr
 80073c2:	4610      	mov	r0, r2
 80073c4:	e7fb      	b.n	80073be <__ascii_mbtowc+0x16>
 80073c6:	f06f 0001 	mvn.w	r0, #1
 80073ca:	e7f8      	b.n	80073be <__ascii_mbtowc+0x16>

080073cc <memchr>:
 80073cc:	4603      	mov	r3, r0
 80073ce:	b510      	push	{r4, lr}
 80073d0:	b2c9      	uxtb	r1, r1
 80073d2:	4402      	add	r2, r0
 80073d4:	4293      	cmp	r3, r2
 80073d6:	4618      	mov	r0, r3
 80073d8:	d101      	bne.n	80073de <memchr+0x12>
 80073da:	2000      	movs	r0, #0
 80073dc:	e003      	b.n	80073e6 <memchr+0x1a>
 80073de:	7804      	ldrb	r4, [r0, #0]
 80073e0:	3301      	adds	r3, #1
 80073e2:	428c      	cmp	r4, r1
 80073e4:	d1f6      	bne.n	80073d4 <memchr+0x8>
 80073e6:	bd10      	pop	{r4, pc}

080073e8 <memcpy>:
 80073e8:	440a      	add	r2, r1
 80073ea:	4291      	cmp	r1, r2
 80073ec:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80073f0:	d100      	bne.n	80073f4 <memcpy+0xc>
 80073f2:	4770      	bx	lr
 80073f4:	b510      	push	{r4, lr}
 80073f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80073fa:	4291      	cmp	r1, r2
 80073fc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007400:	d1f9      	bne.n	80073f6 <memcpy+0xe>
 8007402:	bd10      	pop	{r4, pc}

08007404 <_Balloc>:
 8007404:	b570      	push	{r4, r5, r6, lr}
 8007406:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007408:	4604      	mov	r4, r0
 800740a:	460d      	mov	r5, r1
 800740c:	b976      	cbnz	r6, 800742c <_Balloc+0x28>
 800740e:	2010      	movs	r0, #16
 8007410:	f7ff ffc2 	bl	8007398 <malloc>
 8007414:	4602      	mov	r2, r0
 8007416:	6260      	str	r0, [r4, #36]	; 0x24
 8007418:	b920      	cbnz	r0, 8007424 <_Balloc+0x20>
 800741a:	2166      	movs	r1, #102	; 0x66
 800741c:	4b17      	ldr	r3, [pc, #92]	; (800747c <_Balloc+0x78>)
 800741e:	4818      	ldr	r0, [pc, #96]	; (8007480 <_Balloc+0x7c>)
 8007420:	f000 feee 	bl	8008200 <__assert_func>
 8007424:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007428:	6006      	str	r6, [r0, #0]
 800742a:	60c6      	str	r6, [r0, #12]
 800742c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800742e:	68f3      	ldr	r3, [r6, #12]
 8007430:	b183      	cbz	r3, 8007454 <_Balloc+0x50>
 8007432:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007434:	68db      	ldr	r3, [r3, #12]
 8007436:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800743a:	b9b8      	cbnz	r0, 800746c <_Balloc+0x68>
 800743c:	2101      	movs	r1, #1
 800743e:	fa01 f605 	lsl.w	r6, r1, r5
 8007442:	1d72      	adds	r2, r6, #5
 8007444:	4620      	mov	r0, r4
 8007446:	0092      	lsls	r2, r2, #2
 8007448:	f000 fc94 	bl	8007d74 <_calloc_r>
 800744c:	b160      	cbz	r0, 8007468 <_Balloc+0x64>
 800744e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007452:	e00e      	b.n	8007472 <_Balloc+0x6e>
 8007454:	2221      	movs	r2, #33	; 0x21
 8007456:	2104      	movs	r1, #4
 8007458:	4620      	mov	r0, r4
 800745a:	f000 fc8b 	bl	8007d74 <_calloc_r>
 800745e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007460:	60f0      	str	r0, [r6, #12]
 8007462:	68db      	ldr	r3, [r3, #12]
 8007464:	2b00      	cmp	r3, #0
 8007466:	d1e4      	bne.n	8007432 <_Balloc+0x2e>
 8007468:	2000      	movs	r0, #0
 800746a:	bd70      	pop	{r4, r5, r6, pc}
 800746c:	6802      	ldr	r2, [r0, #0]
 800746e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007472:	2300      	movs	r3, #0
 8007474:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007478:	e7f7      	b.n	800746a <_Balloc+0x66>
 800747a:	bf00      	nop
 800747c:	08009cce 	.word	0x08009cce
 8007480:	08009dd4 	.word	0x08009dd4

08007484 <_Bfree>:
 8007484:	b570      	push	{r4, r5, r6, lr}
 8007486:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007488:	4605      	mov	r5, r0
 800748a:	460c      	mov	r4, r1
 800748c:	b976      	cbnz	r6, 80074ac <_Bfree+0x28>
 800748e:	2010      	movs	r0, #16
 8007490:	f7ff ff82 	bl	8007398 <malloc>
 8007494:	4602      	mov	r2, r0
 8007496:	6268      	str	r0, [r5, #36]	; 0x24
 8007498:	b920      	cbnz	r0, 80074a4 <_Bfree+0x20>
 800749a:	218a      	movs	r1, #138	; 0x8a
 800749c:	4b08      	ldr	r3, [pc, #32]	; (80074c0 <_Bfree+0x3c>)
 800749e:	4809      	ldr	r0, [pc, #36]	; (80074c4 <_Bfree+0x40>)
 80074a0:	f000 feae 	bl	8008200 <__assert_func>
 80074a4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80074a8:	6006      	str	r6, [r0, #0]
 80074aa:	60c6      	str	r6, [r0, #12]
 80074ac:	b13c      	cbz	r4, 80074be <_Bfree+0x3a>
 80074ae:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80074b0:	6862      	ldr	r2, [r4, #4]
 80074b2:	68db      	ldr	r3, [r3, #12]
 80074b4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80074b8:	6021      	str	r1, [r4, #0]
 80074ba:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80074be:	bd70      	pop	{r4, r5, r6, pc}
 80074c0:	08009cce 	.word	0x08009cce
 80074c4:	08009dd4 	.word	0x08009dd4

080074c8 <__multadd>:
 80074c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80074cc:	4698      	mov	r8, r3
 80074ce:	460c      	mov	r4, r1
 80074d0:	2300      	movs	r3, #0
 80074d2:	690e      	ldr	r6, [r1, #16]
 80074d4:	4607      	mov	r7, r0
 80074d6:	f101 0014 	add.w	r0, r1, #20
 80074da:	6805      	ldr	r5, [r0, #0]
 80074dc:	3301      	adds	r3, #1
 80074de:	b2a9      	uxth	r1, r5
 80074e0:	fb02 8101 	mla	r1, r2, r1, r8
 80074e4:	0c2d      	lsrs	r5, r5, #16
 80074e6:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80074ea:	fb02 c505 	mla	r5, r2, r5, ip
 80074ee:	b289      	uxth	r1, r1
 80074f0:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80074f4:	429e      	cmp	r6, r3
 80074f6:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80074fa:	f840 1b04 	str.w	r1, [r0], #4
 80074fe:	dcec      	bgt.n	80074da <__multadd+0x12>
 8007500:	f1b8 0f00 	cmp.w	r8, #0
 8007504:	d022      	beq.n	800754c <__multadd+0x84>
 8007506:	68a3      	ldr	r3, [r4, #8]
 8007508:	42b3      	cmp	r3, r6
 800750a:	dc19      	bgt.n	8007540 <__multadd+0x78>
 800750c:	6861      	ldr	r1, [r4, #4]
 800750e:	4638      	mov	r0, r7
 8007510:	3101      	adds	r1, #1
 8007512:	f7ff ff77 	bl	8007404 <_Balloc>
 8007516:	4605      	mov	r5, r0
 8007518:	b928      	cbnz	r0, 8007526 <__multadd+0x5e>
 800751a:	4602      	mov	r2, r0
 800751c:	21b5      	movs	r1, #181	; 0xb5
 800751e:	4b0d      	ldr	r3, [pc, #52]	; (8007554 <__multadd+0x8c>)
 8007520:	480d      	ldr	r0, [pc, #52]	; (8007558 <__multadd+0x90>)
 8007522:	f000 fe6d 	bl	8008200 <__assert_func>
 8007526:	6922      	ldr	r2, [r4, #16]
 8007528:	f104 010c 	add.w	r1, r4, #12
 800752c:	3202      	adds	r2, #2
 800752e:	0092      	lsls	r2, r2, #2
 8007530:	300c      	adds	r0, #12
 8007532:	f7ff ff59 	bl	80073e8 <memcpy>
 8007536:	4621      	mov	r1, r4
 8007538:	4638      	mov	r0, r7
 800753a:	f7ff ffa3 	bl	8007484 <_Bfree>
 800753e:	462c      	mov	r4, r5
 8007540:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8007544:	3601      	adds	r6, #1
 8007546:	f8c3 8014 	str.w	r8, [r3, #20]
 800754a:	6126      	str	r6, [r4, #16]
 800754c:	4620      	mov	r0, r4
 800754e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007552:	bf00      	nop
 8007554:	08009d44 	.word	0x08009d44
 8007558:	08009dd4 	.word	0x08009dd4

0800755c <__s2b>:
 800755c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007560:	4615      	mov	r5, r2
 8007562:	2209      	movs	r2, #9
 8007564:	461f      	mov	r7, r3
 8007566:	3308      	adds	r3, #8
 8007568:	460c      	mov	r4, r1
 800756a:	fb93 f3f2 	sdiv	r3, r3, r2
 800756e:	4606      	mov	r6, r0
 8007570:	2201      	movs	r2, #1
 8007572:	2100      	movs	r1, #0
 8007574:	429a      	cmp	r2, r3
 8007576:	db09      	blt.n	800758c <__s2b+0x30>
 8007578:	4630      	mov	r0, r6
 800757a:	f7ff ff43 	bl	8007404 <_Balloc>
 800757e:	b940      	cbnz	r0, 8007592 <__s2b+0x36>
 8007580:	4602      	mov	r2, r0
 8007582:	21ce      	movs	r1, #206	; 0xce
 8007584:	4b18      	ldr	r3, [pc, #96]	; (80075e8 <__s2b+0x8c>)
 8007586:	4819      	ldr	r0, [pc, #100]	; (80075ec <__s2b+0x90>)
 8007588:	f000 fe3a 	bl	8008200 <__assert_func>
 800758c:	0052      	lsls	r2, r2, #1
 800758e:	3101      	adds	r1, #1
 8007590:	e7f0      	b.n	8007574 <__s2b+0x18>
 8007592:	9b08      	ldr	r3, [sp, #32]
 8007594:	2d09      	cmp	r5, #9
 8007596:	6143      	str	r3, [r0, #20]
 8007598:	f04f 0301 	mov.w	r3, #1
 800759c:	6103      	str	r3, [r0, #16]
 800759e:	dd16      	ble.n	80075ce <__s2b+0x72>
 80075a0:	f104 0909 	add.w	r9, r4, #9
 80075a4:	46c8      	mov	r8, r9
 80075a6:	442c      	add	r4, r5
 80075a8:	f818 3b01 	ldrb.w	r3, [r8], #1
 80075ac:	4601      	mov	r1, r0
 80075ae:	220a      	movs	r2, #10
 80075b0:	4630      	mov	r0, r6
 80075b2:	3b30      	subs	r3, #48	; 0x30
 80075b4:	f7ff ff88 	bl	80074c8 <__multadd>
 80075b8:	45a0      	cmp	r8, r4
 80075ba:	d1f5      	bne.n	80075a8 <__s2b+0x4c>
 80075bc:	f1a5 0408 	sub.w	r4, r5, #8
 80075c0:	444c      	add	r4, r9
 80075c2:	1b2d      	subs	r5, r5, r4
 80075c4:	1963      	adds	r3, r4, r5
 80075c6:	42bb      	cmp	r3, r7
 80075c8:	db04      	blt.n	80075d4 <__s2b+0x78>
 80075ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80075ce:	2509      	movs	r5, #9
 80075d0:	340a      	adds	r4, #10
 80075d2:	e7f6      	b.n	80075c2 <__s2b+0x66>
 80075d4:	f814 3b01 	ldrb.w	r3, [r4], #1
 80075d8:	4601      	mov	r1, r0
 80075da:	220a      	movs	r2, #10
 80075dc:	4630      	mov	r0, r6
 80075de:	3b30      	subs	r3, #48	; 0x30
 80075e0:	f7ff ff72 	bl	80074c8 <__multadd>
 80075e4:	e7ee      	b.n	80075c4 <__s2b+0x68>
 80075e6:	bf00      	nop
 80075e8:	08009d44 	.word	0x08009d44
 80075ec:	08009dd4 	.word	0x08009dd4

080075f0 <__hi0bits>:
 80075f0:	0c02      	lsrs	r2, r0, #16
 80075f2:	0412      	lsls	r2, r2, #16
 80075f4:	4603      	mov	r3, r0
 80075f6:	b9ca      	cbnz	r2, 800762c <__hi0bits+0x3c>
 80075f8:	0403      	lsls	r3, r0, #16
 80075fa:	2010      	movs	r0, #16
 80075fc:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8007600:	bf04      	itt	eq
 8007602:	021b      	lsleq	r3, r3, #8
 8007604:	3008      	addeq	r0, #8
 8007606:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800760a:	bf04      	itt	eq
 800760c:	011b      	lsleq	r3, r3, #4
 800760e:	3004      	addeq	r0, #4
 8007610:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8007614:	bf04      	itt	eq
 8007616:	009b      	lsleq	r3, r3, #2
 8007618:	3002      	addeq	r0, #2
 800761a:	2b00      	cmp	r3, #0
 800761c:	db05      	blt.n	800762a <__hi0bits+0x3a>
 800761e:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8007622:	f100 0001 	add.w	r0, r0, #1
 8007626:	bf08      	it	eq
 8007628:	2020      	moveq	r0, #32
 800762a:	4770      	bx	lr
 800762c:	2000      	movs	r0, #0
 800762e:	e7e5      	b.n	80075fc <__hi0bits+0xc>

08007630 <__lo0bits>:
 8007630:	6803      	ldr	r3, [r0, #0]
 8007632:	4602      	mov	r2, r0
 8007634:	f013 0007 	ands.w	r0, r3, #7
 8007638:	d00b      	beq.n	8007652 <__lo0bits+0x22>
 800763a:	07d9      	lsls	r1, r3, #31
 800763c:	d422      	bmi.n	8007684 <__lo0bits+0x54>
 800763e:	0798      	lsls	r0, r3, #30
 8007640:	bf49      	itett	mi
 8007642:	085b      	lsrmi	r3, r3, #1
 8007644:	089b      	lsrpl	r3, r3, #2
 8007646:	2001      	movmi	r0, #1
 8007648:	6013      	strmi	r3, [r2, #0]
 800764a:	bf5c      	itt	pl
 800764c:	2002      	movpl	r0, #2
 800764e:	6013      	strpl	r3, [r2, #0]
 8007650:	4770      	bx	lr
 8007652:	b299      	uxth	r1, r3
 8007654:	b909      	cbnz	r1, 800765a <__lo0bits+0x2a>
 8007656:	2010      	movs	r0, #16
 8007658:	0c1b      	lsrs	r3, r3, #16
 800765a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800765e:	bf04      	itt	eq
 8007660:	0a1b      	lsreq	r3, r3, #8
 8007662:	3008      	addeq	r0, #8
 8007664:	0719      	lsls	r1, r3, #28
 8007666:	bf04      	itt	eq
 8007668:	091b      	lsreq	r3, r3, #4
 800766a:	3004      	addeq	r0, #4
 800766c:	0799      	lsls	r1, r3, #30
 800766e:	bf04      	itt	eq
 8007670:	089b      	lsreq	r3, r3, #2
 8007672:	3002      	addeq	r0, #2
 8007674:	07d9      	lsls	r1, r3, #31
 8007676:	d403      	bmi.n	8007680 <__lo0bits+0x50>
 8007678:	085b      	lsrs	r3, r3, #1
 800767a:	f100 0001 	add.w	r0, r0, #1
 800767e:	d003      	beq.n	8007688 <__lo0bits+0x58>
 8007680:	6013      	str	r3, [r2, #0]
 8007682:	4770      	bx	lr
 8007684:	2000      	movs	r0, #0
 8007686:	4770      	bx	lr
 8007688:	2020      	movs	r0, #32
 800768a:	4770      	bx	lr

0800768c <__i2b>:
 800768c:	b510      	push	{r4, lr}
 800768e:	460c      	mov	r4, r1
 8007690:	2101      	movs	r1, #1
 8007692:	f7ff feb7 	bl	8007404 <_Balloc>
 8007696:	4602      	mov	r2, r0
 8007698:	b928      	cbnz	r0, 80076a6 <__i2b+0x1a>
 800769a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800769e:	4b04      	ldr	r3, [pc, #16]	; (80076b0 <__i2b+0x24>)
 80076a0:	4804      	ldr	r0, [pc, #16]	; (80076b4 <__i2b+0x28>)
 80076a2:	f000 fdad 	bl	8008200 <__assert_func>
 80076a6:	2301      	movs	r3, #1
 80076a8:	6144      	str	r4, [r0, #20]
 80076aa:	6103      	str	r3, [r0, #16]
 80076ac:	bd10      	pop	{r4, pc}
 80076ae:	bf00      	nop
 80076b0:	08009d44 	.word	0x08009d44
 80076b4:	08009dd4 	.word	0x08009dd4

080076b8 <__multiply>:
 80076b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076bc:	4614      	mov	r4, r2
 80076be:	690a      	ldr	r2, [r1, #16]
 80076c0:	6923      	ldr	r3, [r4, #16]
 80076c2:	460d      	mov	r5, r1
 80076c4:	429a      	cmp	r2, r3
 80076c6:	bfbe      	ittt	lt
 80076c8:	460b      	movlt	r3, r1
 80076ca:	4625      	movlt	r5, r4
 80076cc:	461c      	movlt	r4, r3
 80076ce:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80076d2:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80076d6:	68ab      	ldr	r3, [r5, #8]
 80076d8:	6869      	ldr	r1, [r5, #4]
 80076da:	eb0a 0709 	add.w	r7, sl, r9
 80076de:	42bb      	cmp	r3, r7
 80076e0:	b085      	sub	sp, #20
 80076e2:	bfb8      	it	lt
 80076e4:	3101      	addlt	r1, #1
 80076e6:	f7ff fe8d 	bl	8007404 <_Balloc>
 80076ea:	b930      	cbnz	r0, 80076fa <__multiply+0x42>
 80076ec:	4602      	mov	r2, r0
 80076ee:	f240 115d 	movw	r1, #349	; 0x15d
 80076f2:	4b41      	ldr	r3, [pc, #260]	; (80077f8 <__multiply+0x140>)
 80076f4:	4841      	ldr	r0, [pc, #260]	; (80077fc <__multiply+0x144>)
 80076f6:	f000 fd83 	bl	8008200 <__assert_func>
 80076fa:	f100 0614 	add.w	r6, r0, #20
 80076fe:	4633      	mov	r3, r6
 8007700:	2200      	movs	r2, #0
 8007702:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8007706:	4543      	cmp	r3, r8
 8007708:	d31e      	bcc.n	8007748 <__multiply+0x90>
 800770a:	f105 0c14 	add.w	ip, r5, #20
 800770e:	f104 0314 	add.w	r3, r4, #20
 8007712:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8007716:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800771a:	9202      	str	r2, [sp, #8]
 800771c:	ebac 0205 	sub.w	r2, ip, r5
 8007720:	3a15      	subs	r2, #21
 8007722:	f022 0203 	bic.w	r2, r2, #3
 8007726:	3204      	adds	r2, #4
 8007728:	f105 0115 	add.w	r1, r5, #21
 800772c:	458c      	cmp	ip, r1
 800772e:	bf38      	it	cc
 8007730:	2204      	movcc	r2, #4
 8007732:	9201      	str	r2, [sp, #4]
 8007734:	9a02      	ldr	r2, [sp, #8]
 8007736:	9303      	str	r3, [sp, #12]
 8007738:	429a      	cmp	r2, r3
 800773a:	d808      	bhi.n	800774e <__multiply+0x96>
 800773c:	2f00      	cmp	r7, #0
 800773e:	dc55      	bgt.n	80077ec <__multiply+0x134>
 8007740:	6107      	str	r7, [r0, #16]
 8007742:	b005      	add	sp, #20
 8007744:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007748:	f843 2b04 	str.w	r2, [r3], #4
 800774c:	e7db      	b.n	8007706 <__multiply+0x4e>
 800774e:	f8b3 a000 	ldrh.w	sl, [r3]
 8007752:	f1ba 0f00 	cmp.w	sl, #0
 8007756:	d020      	beq.n	800779a <__multiply+0xe2>
 8007758:	46b1      	mov	r9, r6
 800775a:	2200      	movs	r2, #0
 800775c:	f105 0e14 	add.w	lr, r5, #20
 8007760:	f85e 4b04 	ldr.w	r4, [lr], #4
 8007764:	f8d9 b000 	ldr.w	fp, [r9]
 8007768:	b2a1      	uxth	r1, r4
 800776a:	fa1f fb8b 	uxth.w	fp, fp
 800776e:	fb0a b101 	mla	r1, sl, r1, fp
 8007772:	4411      	add	r1, r2
 8007774:	f8d9 2000 	ldr.w	r2, [r9]
 8007778:	0c24      	lsrs	r4, r4, #16
 800777a:	0c12      	lsrs	r2, r2, #16
 800777c:	fb0a 2404 	mla	r4, sl, r4, r2
 8007780:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8007784:	b289      	uxth	r1, r1
 8007786:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800778a:	45f4      	cmp	ip, lr
 800778c:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8007790:	f849 1b04 	str.w	r1, [r9], #4
 8007794:	d8e4      	bhi.n	8007760 <__multiply+0xa8>
 8007796:	9901      	ldr	r1, [sp, #4]
 8007798:	5072      	str	r2, [r6, r1]
 800779a:	9a03      	ldr	r2, [sp, #12]
 800779c:	3304      	adds	r3, #4
 800779e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80077a2:	f1b9 0f00 	cmp.w	r9, #0
 80077a6:	d01f      	beq.n	80077e8 <__multiply+0x130>
 80077a8:	46b6      	mov	lr, r6
 80077aa:	f04f 0a00 	mov.w	sl, #0
 80077ae:	6834      	ldr	r4, [r6, #0]
 80077b0:	f105 0114 	add.w	r1, r5, #20
 80077b4:	880a      	ldrh	r2, [r1, #0]
 80077b6:	f8be b002 	ldrh.w	fp, [lr, #2]
 80077ba:	b2a4      	uxth	r4, r4
 80077bc:	fb09 b202 	mla	r2, r9, r2, fp
 80077c0:	4492      	add	sl, r2
 80077c2:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80077c6:	f84e 4b04 	str.w	r4, [lr], #4
 80077ca:	f851 4b04 	ldr.w	r4, [r1], #4
 80077ce:	f8be 2000 	ldrh.w	r2, [lr]
 80077d2:	0c24      	lsrs	r4, r4, #16
 80077d4:	fb09 2404 	mla	r4, r9, r4, r2
 80077d8:	458c      	cmp	ip, r1
 80077da:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80077de:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80077e2:	d8e7      	bhi.n	80077b4 <__multiply+0xfc>
 80077e4:	9a01      	ldr	r2, [sp, #4]
 80077e6:	50b4      	str	r4, [r6, r2]
 80077e8:	3604      	adds	r6, #4
 80077ea:	e7a3      	b.n	8007734 <__multiply+0x7c>
 80077ec:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d1a5      	bne.n	8007740 <__multiply+0x88>
 80077f4:	3f01      	subs	r7, #1
 80077f6:	e7a1      	b.n	800773c <__multiply+0x84>
 80077f8:	08009d44 	.word	0x08009d44
 80077fc:	08009dd4 	.word	0x08009dd4

08007800 <__pow5mult>:
 8007800:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007804:	4615      	mov	r5, r2
 8007806:	f012 0203 	ands.w	r2, r2, #3
 800780a:	4606      	mov	r6, r0
 800780c:	460f      	mov	r7, r1
 800780e:	d007      	beq.n	8007820 <__pow5mult+0x20>
 8007810:	4c25      	ldr	r4, [pc, #148]	; (80078a8 <__pow5mult+0xa8>)
 8007812:	3a01      	subs	r2, #1
 8007814:	2300      	movs	r3, #0
 8007816:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800781a:	f7ff fe55 	bl	80074c8 <__multadd>
 800781e:	4607      	mov	r7, r0
 8007820:	10ad      	asrs	r5, r5, #2
 8007822:	d03d      	beq.n	80078a0 <__pow5mult+0xa0>
 8007824:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007826:	b97c      	cbnz	r4, 8007848 <__pow5mult+0x48>
 8007828:	2010      	movs	r0, #16
 800782a:	f7ff fdb5 	bl	8007398 <malloc>
 800782e:	4602      	mov	r2, r0
 8007830:	6270      	str	r0, [r6, #36]	; 0x24
 8007832:	b928      	cbnz	r0, 8007840 <__pow5mult+0x40>
 8007834:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007838:	4b1c      	ldr	r3, [pc, #112]	; (80078ac <__pow5mult+0xac>)
 800783a:	481d      	ldr	r0, [pc, #116]	; (80078b0 <__pow5mult+0xb0>)
 800783c:	f000 fce0 	bl	8008200 <__assert_func>
 8007840:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007844:	6004      	str	r4, [r0, #0]
 8007846:	60c4      	str	r4, [r0, #12]
 8007848:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800784c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007850:	b94c      	cbnz	r4, 8007866 <__pow5mult+0x66>
 8007852:	f240 2171 	movw	r1, #625	; 0x271
 8007856:	4630      	mov	r0, r6
 8007858:	f7ff ff18 	bl	800768c <__i2b>
 800785c:	2300      	movs	r3, #0
 800785e:	4604      	mov	r4, r0
 8007860:	f8c8 0008 	str.w	r0, [r8, #8]
 8007864:	6003      	str	r3, [r0, #0]
 8007866:	f04f 0900 	mov.w	r9, #0
 800786a:	07eb      	lsls	r3, r5, #31
 800786c:	d50a      	bpl.n	8007884 <__pow5mult+0x84>
 800786e:	4639      	mov	r1, r7
 8007870:	4622      	mov	r2, r4
 8007872:	4630      	mov	r0, r6
 8007874:	f7ff ff20 	bl	80076b8 <__multiply>
 8007878:	4680      	mov	r8, r0
 800787a:	4639      	mov	r1, r7
 800787c:	4630      	mov	r0, r6
 800787e:	f7ff fe01 	bl	8007484 <_Bfree>
 8007882:	4647      	mov	r7, r8
 8007884:	106d      	asrs	r5, r5, #1
 8007886:	d00b      	beq.n	80078a0 <__pow5mult+0xa0>
 8007888:	6820      	ldr	r0, [r4, #0]
 800788a:	b938      	cbnz	r0, 800789c <__pow5mult+0x9c>
 800788c:	4622      	mov	r2, r4
 800788e:	4621      	mov	r1, r4
 8007890:	4630      	mov	r0, r6
 8007892:	f7ff ff11 	bl	80076b8 <__multiply>
 8007896:	6020      	str	r0, [r4, #0]
 8007898:	f8c0 9000 	str.w	r9, [r0]
 800789c:	4604      	mov	r4, r0
 800789e:	e7e4      	b.n	800786a <__pow5mult+0x6a>
 80078a0:	4638      	mov	r0, r7
 80078a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80078a6:	bf00      	nop
 80078a8:	08009f28 	.word	0x08009f28
 80078ac:	08009cce 	.word	0x08009cce
 80078b0:	08009dd4 	.word	0x08009dd4

080078b4 <__lshift>:
 80078b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80078b8:	460c      	mov	r4, r1
 80078ba:	4607      	mov	r7, r0
 80078bc:	4691      	mov	r9, r2
 80078be:	6923      	ldr	r3, [r4, #16]
 80078c0:	6849      	ldr	r1, [r1, #4]
 80078c2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80078c6:	68a3      	ldr	r3, [r4, #8]
 80078c8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80078cc:	f108 0601 	add.w	r6, r8, #1
 80078d0:	42b3      	cmp	r3, r6
 80078d2:	db0b      	blt.n	80078ec <__lshift+0x38>
 80078d4:	4638      	mov	r0, r7
 80078d6:	f7ff fd95 	bl	8007404 <_Balloc>
 80078da:	4605      	mov	r5, r0
 80078dc:	b948      	cbnz	r0, 80078f2 <__lshift+0x3e>
 80078de:	4602      	mov	r2, r0
 80078e0:	f240 11d9 	movw	r1, #473	; 0x1d9
 80078e4:	4b27      	ldr	r3, [pc, #156]	; (8007984 <__lshift+0xd0>)
 80078e6:	4828      	ldr	r0, [pc, #160]	; (8007988 <__lshift+0xd4>)
 80078e8:	f000 fc8a 	bl	8008200 <__assert_func>
 80078ec:	3101      	adds	r1, #1
 80078ee:	005b      	lsls	r3, r3, #1
 80078f0:	e7ee      	b.n	80078d0 <__lshift+0x1c>
 80078f2:	2300      	movs	r3, #0
 80078f4:	f100 0114 	add.w	r1, r0, #20
 80078f8:	f100 0210 	add.w	r2, r0, #16
 80078fc:	4618      	mov	r0, r3
 80078fe:	4553      	cmp	r3, sl
 8007900:	db33      	blt.n	800796a <__lshift+0xb6>
 8007902:	6920      	ldr	r0, [r4, #16]
 8007904:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007908:	f104 0314 	add.w	r3, r4, #20
 800790c:	f019 091f 	ands.w	r9, r9, #31
 8007910:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007914:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007918:	d02b      	beq.n	8007972 <__lshift+0xbe>
 800791a:	468a      	mov	sl, r1
 800791c:	2200      	movs	r2, #0
 800791e:	f1c9 0e20 	rsb	lr, r9, #32
 8007922:	6818      	ldr	r0, [r3, #0]
 8007924:	fa00 f009 	lsl.w	r0, r0, r9
 8007928:	4302      	orrs	r2, r0
 800792a:	f84a 2b04 	str.w	r2, [sl], #4
 800792e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007932:	459c      	cmp	ip, r3
 8007934:	fa22 f20e 	lsr.w	r2, r2, lr
 8007938:	d8f3      	bhi.n	8007922 <__lshift+0x6e>
 800793a:	ebac 0304 	sub.w	r3, ip, r4
 800793e:	3b15      	subs	r3, #21
 8007940:	f023 0303 	bic.w	r3, r3, #3
 8007944:	3304      	adds	r3, #4
 8007946:	f104 0015 	add.w	r0, r4, #21
 800794a:	4584      	cmp	ip, r0
 800794c:	bf38      	it	cc
 800794e:	2304      	movcc	r3, #4
 8007950:	50ca      	str	r2, [r1, r3]
 8007952:	b10a      	cbz	r2, 8007958 <__lshift+0xa4>
 8007954:	f108 0602 	add.w	r6, r8, #2
 8007958:	3e01      	subs	r6, #1
 800795a:	4638      	mov	r0, r7
 800795c:	4621      	mov	r1, r4
 800795e:	612e      	str	r6, [r5, #16]
 8007960:	f7ff fd90 	bl	8007484 <_Bfree>
 8007964:	4628      	mov	r0, r5
 8007966:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800796a:	f842 0f04 	str.w	r0, [r2, #4]!
 800796e:	3301      	adds	r3, #1
 8007970:	e7c5      	b.n	80078fe <__lshift+0x4a>
 8007972:	3904      	subs	r1, #4
 8007974:	f853 2b04 	ldr.w	r2, [r3], #4
 8007978:	459c      	cmp	ip, r3
 800797a:	f841 2f04 	str.w	r2, [r1, #4]!
 800797e:	d8f9      	bhi.n	8007974 <__lshift+0xc0>
 8007980:	e7ea      	b.n	8007958 <__lshift+0xa4>
 8007982:	bf00      	nop
 8007984:	08009d44 	.word	0x08009d44
 8007988:	08009dd4 	.word	0x08009dd4

0800798c <__mcmp>:
 800798c:	4603      	mov	r3, r0
 800798e:	690a      	ldr	r2, [r1, #16]
 8007990:	6900      	ldr	r0, [r0, #16]
 8007992:	b530      	push	{r4, r5, lr}
 8007994:	1a80      	subs	r0, r0, r2
 8007996:	d10d      	bne.n	80079b4 <__mcmp+0x28>
 8007998:	3314      	adds	r3, #20
 800799a:	3114      	adds	r1, #20
 800799c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80079a0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80079a4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80079a8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80079ac:	4295      	cmp	r5, r2
 80079ae:	d002      	beq.n	80079b6 <__mcmp+0x2a>
 80079b0:	d304      	bcc.n	80079bc <__mcmp+0x30>
 80079b2:	2001      	movs	r0, #1
 80079b4:	bd30      	pop	{r4, r5, pc}
 80079b6:	42a3      	cmp	r3, r4
 80079b8:	d3f4      	bcc.n	80079a4 <__mcmp+0x18>
 80079ba:	e7fb      	b.n	80079b4 <__mcmp+0x28>
 80079bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80079c0:	e7f8      	b.n	80079b4 <__mcmp+0x28>
	...

080079c4 <__mdiff>:
 80079c4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079c8:	460c      	mov	r4, r1
 80079ca:	4606      	mov	r6, r0
 80079cc:	4611      	mov	r1, r2
 80079ce:	4620      	mov	r0, r4
 80079d0:	4692      	mov	sl, r2
 80079d2:	f7ff ffdb 	bl	800798c <__mcmp>
 80079d6:	1e05      	subs	r5, r0, #0
 80079d8:	d111      	bne.n	80079fe <__mdiff+0x3a>
 80079da:	4629      	mov	r1, r5
 80079dc:	4630      	mov	r0, r6
 80079de:	f7ff fd11 	bl	8007404 <_Balloc>
 80079e2:	4602      	mov	r2, r0
 80079e4:	b928      	cbnz	r0, 80079f2 <__mdiff+0x2e>
 80079e6:	f240 2132 	movw	r1, #562	; 0x232
 80079ea:	4b3c      	ldr	r3, [pc, #240]	; (8007adc <__mdiff+0x118>)
 80079ec:	483c      	ldr	r0, [pc, #240]	; (8007ae0 <__mdiff+0x11c>)
 80079ee:	f000 fc07 	bl	8008200 <__assert_func>
 80079f2:	2301      	movs	r3, #1
 80079f4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80079f8:	4610      	mov	r0, r2
 80079fa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079fe:	bfa4      	itt	ge
 8007a00:	4653      	movge	r3, sl
 8007a02:	46a2      	movge	sl, r4
 8007a04:	4630      	mov	r0, r6
 8007a06:	f8da 1004 	ldr.w	r1, [sl, #4]
 8007a0a:	bfa6      	itte	ge
 8007a0c:	461c      	movge	r4, r3
 8007a0e:	2500      	movge	r5, #0
 8007a10:	2501      	movlt	r5, #1
 8007a12:	f7ff fcf7 	bl	8007404 <_Balloc>
 8007a16:	4602      	mov	r2, r0
 8007a18:	b918      	cbnz	r0, 8007a22 <__mdiff+0x5e>
 8007a1a:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007a1e:	4b2f      	ldr	r3, [pc, #188]	; (8007adc <__mdiff+0x118>)
 8007a20:	e7e4      	b.n	80079ec <__mdiff+0x28>
 8007a22:	f100 0814 	add.w	r8, r0, #20
 8007a26:	f8da 7010 	ldr.w	r7, [sl, #16]
 8007a2a:	60c5      	str	r5, [r0, #12]
 8007a2c:	f04f 0c00 	mov.w	ip, #0
 8007a30:	f10a 0514 	add.w	r5, sl, #20
 8007a34:	f10a 0010 	add.w	r0, sl, #16
 8007a38:	46c2      	mov	sl, r8
 8007a3a:	6926      	ldr	r6, [r4, #16]
 8007a3c:	f104 0914 	add.w	r9, r4, #20
 8007a40:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 8007a44:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007a48:	f850 bf04 	ldr.w	fp, [r0, #4]!
 8007a4c:	f859 3b04 	ldr.w	r3, [r9], #4
 8007a50:	fa1f f18b 	uxth.w	r1, fp
 8007a54:	4461      	add	r1, ip
 8007a56:	fa1f fc83 	uxth.w	ip, r3
 8007a5a:	0c1b      	lsrs	r3, r3, #16
 8007a5c:	eba1 010c 	sub.w	r1, r1, ip
 8007a60:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007a64:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8007a68:	b289      	uxth	r1, r1
 8007a6a:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8007a6e:	454e      	cmp	r6, r9
 8007a70:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8007a74:	f84a 3b04 	str.w	r3, [sl], #4
 8007a78:	d8e6      	bhi.n	8007a48 <__mdiff+0x84>
 8007a7a:	1b33      	subs	r3, r6, r4
 8007a7c:	3b15      	subs	r3, #21
 8007a7e:	f023 0303 	bic.w	r3, r3, #3
 8007a82:	3415      	adds	r4, #21
 8007a84:	3304      	adds	r3, #4
 8007a86:	42a6      	cmp	r6, r4
 8007a88:	bf38      	it	cc
 8007a8a:	2304      	movcc	r3, #4
 8007a8c:	441d      	add	r5, r3
 8007a8e:	4443      	add	r3, r8
 8007a90:	461e      	mov	r6, r3
 8007a92:	462c      	mov	r4, r5
 8007a94:	4574      	cmp	r4, lr
 8007a96:	d30e      	bcc.n	8007ab6 <__mdiff+0xf2>
 8007a98:	f10e 0103 	add.w	r1, lr, #3
 8007a9c:	1b49      	subs	r1, r1, r5
 8007a9e:	f021 0103 	bic.w	r1, r1, #3
 8007aa2:	3d03      	subs	r5, #3
 8007aa4:	45ae      	cmp	lr, r5
 8007aa6:	bf38      	it	cc
 8007aa8:	2100      	movcc	r1, #0
 8007aaa:	4419      	add	r1, r3
 8007aac:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8007ab0:	b18b      	cbz	r3, 8007ad6 <__mdiff+0x112>
 8007ab2:	6117      	str	r7, [r2, #16]
 8007ab4:	e7a0      	b.n	80079f8 <__mdiff+0x34>
 8007ab6:	f854 8b04 	ldr.w	r8, [r4], #4
 8007aba:	fa1f f188 	uxth.w	r1, r8
 8007abe:	4461      	add	r1, ip
 8007ac0:	1408      	asrs	r0, r1, #16
 8007ac2:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 8007ac6:	b289      	uxth	r1, r1
 8007ac8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007acc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007ad0:	f846 1b04 	str.w	r1, [r6], #4
 8007ad4:	e7de      	b.n	8007a94 <__mdiff+0xd0>
 8007ad6:	3f01      	subs	r7, #1
 8007ad8:	e7e8      	b.n	8007aac <__mdiff+0xe8>
 8007ada:	bf00      	nop
 8007adc:	08009d44 	.word	0x08009d44
 8007ae0:	08009dd4 	.word	0x08009dd4

08007ae4 <__ulp>:
 8007ae4:	4b11      	ldr	r3, [pc, #68]	; (8007b2c <__ulp+0x48>)
 8007ae6:	400b      	ands	r3, r1
 8007ae8:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	dd02      	ble.n	8007af6 <__ulp+0x12>
 8007af0:	2000      	movs	r0, #0
 8007af2:	4619      	mov	r1, r3
 8007af4:	4770      	bx	lr
 8007af6:	425b      	negs	r3, r3
 8007af8:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8007afc:	f04f 0000 	mov.w	r0, #0
 8007b00:	f04f 0100 	mov.w	r1, #0
 8007b04:	ea4f 5223 	mov.w	r2, r3, asr #20
 8007b08:	da04      	bge.n	8007b14 <__ulp+0x30>
 8007b0a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8007b0e:	fa43 f102 	asr.w	r1, r3, r2
 8007b12:	4770      	bx	lr
 8007b14:	f1a2 0314 	sub.w	r3, r2, #20
 8007b18:	2b1e      	cmp	r3, #30
 8007b1a:	bfd6      	itet	le
 8007b1c:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8007b20:	2301      	movgt	r3, #1
 8007b22:	fa22 f303 	lsrle.w	r3, r2, r3
 8007b26:	4618      	mov	r0, r3
 8007b28:	4770      	bx	lr
 8007b2a:	bf00      	nop
 8007b2c:	7ff00000 	.word	0x7ff00000

08007b30 <__b2d>:
 8007b30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007b34:	6907      	ldr	r7, [r0, #16]
 8007b36:	f100 0914 	add.w	r9, r0, #20
 8007b3a:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 8007b3e:	f857 6c04 	ldr.w	r6, [r7, #-4]
 8007b42:	f1a7 0804 	sub.w	r8, r7, #4
 8007b46:	4630      	mov	r0, r6
 8007b48:	f7ff fd52 	bl	80075f0 <__hi0bits>
 8007b4c:	f1c0 0320 	rsb	r3, r0, #32
 8007b50:	280a      	cmp	r0, #10
 8007b52:	600b      	str	r3, [r1, #0]
 8007b54:	491f      	ldr	r1, [pc, #124]	; (8007bd4 <__b2d+0xa4>)
 8007b56:	dc17      	bgt.n	8007b88 <__b2d+0x58>
 8007b58:	45c1      	cmp	r9, r8
 8007b5a:	bf28      	it	cs
 8007b5c:	2200      	movcs	r2, #0
 8007b5e:	f1c0 0c0b 	rsb	ip, r0, #11
 8007b62:	fa26 f30c 	lsr.w	r3, r6, ip
 8007b66:	bf38      	it	cc
 8007b68:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8007b6c:	ea43 0501 	orr.w	r5, r3, r1
 8007b70:	f100 0315 	add.w	r3, r0, #21
 8007b74:	fa06 f303 	lsl.w	r3, r6, r3
 8007b78:	fa22 f20c 	lsr.w	r2, r2, ip
 8007b7c:	ea43 0402 	orr.w	r4, r3, r2
 8007b80:	4620      	mov	r0, r4
 8007b82:	4629      	mov	r1, r5
 8007b84:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007b88:	45c1      	cmp	r9, r8
 8007b8a:	bf2e      	itee	cs
 8007b8c:	2200      	movcs	r2, #0
 8007b8e:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8007b92:	f1a7 0808 	subcc.w	r8, r7, #8
 8007b96:	f1b0 030b 	subs.w	r3, r0, #11
 8007b9a:	d016      	beq.n	8007bca <__b2d+0x9a>
 8007b9c:	f1c3 0720 	rsb	r7, r3, #32
 8007ba0:	fa22 f107 	lsr.w	r1, r2, r7
 8007ba4:	45c8      	cmp	r8, r9
 8007ba6:	fa06 f603 	lsl.w	r6, r6, r3
 8007baa:	ea46 0601 	orr.w	r6, r6, r1
 8007bae:	bf94      	ite	ls
 8007bb0:	2100      	movls	r1, #0
 8007bb2:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 8007bb6:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 8007bba:	fa02 f003 	lsl.w	r0, r2, r3
 8007bbe:	40f9      	lsrs	r1, r7
 8007bc0:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8007bc4:	ea40 0401 	orr.w	r4, r0, r1
 8007bc8:	e7da      	b.n	8007b80 <__b2d+0x50>
 8007bca:	4614      	mov	r4, r2
 8007bcc:	ea46 0501 	orr.w	r5, r6, r1
 8007bd0:	e7d6      	b.n	8007b80 <__b2d+0x50>
 8007bd2:	bf00      	nop
 8007bd4:	3ff00000 	.word	0x3ff00000

08007bd8 <__d2b>:
 8007bd8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8007bdc:	2101      	movs	r1, #1
 8007bde:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8007be2:	4690      	mov	r8, r2
 8007be4:	461d      	mov	r5, r3
 8007be6:	f7ff fc0d 	bl	8007404 <_Balloc>
 8007bea:	4604      	mov	r4, r0
 8007bec:	b930      	cbnz	r0, 8007bfc <__d2b+0x24>
 8007bee:	4602      	mov	r2, r0
 8007bf0:	f240 310a 	movw	r1, #778	; 0x30a
 8007bf4:	4b24      	ldr	r3, [pc, #144]	; (8007c88 <__d2b+0xb0>)
 8007bf6:	4825      	ldr	r0, [pc, #148]	; (8007c8c <__d2b+0xb4>)
 8007bf8:	f000 fb02 	bl	8008200 <__assert_func>
 8007bfc:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8007c00:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8007c04:	bb2d      	cbnz	r5, 8007c52 <__d2b+0x7a>
 8007c06:	9301      	str	r3, [sp, #4]
 8007c08:	f1b8 0300 	subs.w	r3, r8, #0
 8007c0c:	d026      	beq.n	8007c5c <__d2b+0x84>
 8007c0e:	4668      	mov	r0, sp
 8007c10:	9300      	str	r3, [sp, #0]
 8007c12:	f7ff fd0d 	bl	8007630 <__lo0bits>
 8007c16:	9900      	ldr	r1, [sp, #0]
 8007c18:	b1f0      	cbz	r0, 8007c58 <__d2b+0x80>
 8007c1a:	9a01      	ldr	r2, [sp, #4]
 8007c1c:	f1c0 0320 	rsb	r3, r0, #32
 8007c20:	fa02 f303 	lsl.w	r3, r2, r3
 8007c24:	430b      	orrs	r3, r1
 8007c26:	40c2      	lsrs	r2, r0
 8007c28:	6163      	str	r3, [r4, #20]
 8007c2a:	9201      	str	r2, [sp, #4]
 8007c2c:	9b01      	ldr	r3, [sp, #4]
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	bf14      	ite	ne
 8007c32:	2102      	movne	r1, #2
 8007c34:	2101      	moveq	r1, #1
 8007c36:	61a3      	str	r3, [r4, #24]
 8007c38:	6121      	str	r1, [r4, #16]
 8007c3a:	b1c5      	cbz	r5, 8007c6e <__d2b+0x96>
 8007c3c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007c40:	4405      	add	r5, r0
 8007c42:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007c46:	603d      	str	r5, [r7, #0]
 8007c48:	6030      	str	r0, [r6, #0]
 8007c4a:	4620      	mov	r0, r4
 8007c4c:	b002      	add	sp, #8
 8007c4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c52:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007c56:	e7d6      	b.n	8007c06 <__d2b+0x2e>
 8007c58:	6161      	str	r1, [r4, #20]
 8007c5a:	e7e7      	b.n	8007c2c <__d2b+0x54>
 8007c5c:	a801      	add	r0, sp, #4
 8007c5e:	f7ff fce7 	bl	8007630 <__lo0bits>
 8007c62:	2101      	movs	r1, #1
 8007c64:	9b01      	ldr	r3, [sp, #4]
 8007c66:	6121      	str	r1, [r4, #16]
 8007c68:	6163      	str	r3, [r4, #20]
 8007c6a:	3020      	adds	r0, #32
 8007c6c:	e7e5      	b.n	8007c3a <__d2b+0x62>
 8007c6e:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8007c72:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007c76:	6038      	str	r0, [r7, #0]
 8007c78:	6918      	ldr	r0, [r3, #16]
 8007c7a:	f7ff fcb9 	bl	80075f0 <__hi0bits>
 8007c7e:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8007c82:	6031      	str	r1, [r6, #0]
 8007c84:	e7e1      	b.n	8007c4a <__d2b+0x72>
 8007c86:	bf00      	nop
 8007c88:	08009d44 	.word	0x08009d44
 8007c8c:	08009dd4 	.word	0x08009dd4

08007c90 <__ratio>:
 8007c90:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c94:	4688      	mov	r8, r1
 8007c96:	4669      	mov	r1, sp
 8007c98:	4681      	mov	r9, r0
 8007c9a:	f7ff ff49 	bl	8007b30 <__b2d>
 8007c9e:	460f      	mov	r7, r1
 8007ca0:	4604      	mov	r4, r0
 8007ca2:	460d      	mov	r5, r1
 8007ca4:	4640      	mov	r0, r8
 8007ca6:	a901      	add	r1, sp, #4
 8007ca8:	f7ff ff42 	bl	8007b30 <__b2d>
 8007cac:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007cb0:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8007cb4:	468b      	mov	fp, r1
 8007cb6:	eba3 0c02 	sub.w	ip, r3, r2
 8007cba:	e9dd 3200 	ldrd	r3, r2, [sp]
 8007cbe:	1a9b      	subs	r3, r3, r2
 8007cc0:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	bfd5      	itete	le
 8007cc8:	460a      	movle	r2, r1
 8007cca:	462a      	movgt	r2, r5
 8007ccc:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8007cd0:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8007cd4:	bfd8      	it	le
 8007cd6:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8007cda:	465b      	mov	r3, fp
 8007cdc:	4602      	mov	r2, r0
 8007cde:	4639      	mov	r1, r7
 8007ce0:	4620      	mov	r0, r4
 8007ce2:	f7f8 fdd7 	bl	8000894 <__aeabi_ddiv>
 8007ce6:	b003      	add	sp, #12
 8007ce8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007cec <__copybits>:
 8007cec:	3901      	subs	r1, #1
 8007cee:	b570      	push	{r4, r5, r6, lr}
 8007cf0:	1149      	asrs	r1, r1, #5
 8007cf2:	6914      	ldr	r4, [r2, #16]
 8007cf4:	3101      	adds	r1, #1
 8007cf6:	f102 0314 	add.w	r3, r2, #20
 8007cfa:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007cfe:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8007d02:	1f05      	subs	r5, r0, #4
 8007d04:	42a3      	cmp	r3, r4
 8007d06:	d30c      	bcc.n	8007d22 <__copybits+0x36>
 8007d08:	1aa3      	subs	r3, r4, r2
 8007d0a:	3b11      	subs	r3, #17
 8007d0c:	f023 0303 	bic.w	r3, r3, #3
 8007d10:	3211      	adds	r2, #17
 8007d12:	42a2      	cmp	r2, r4
 8007d14:	bf88      	it	hi
 8007d16:	2300      	movhi	r3, #0
 8007d18:	4418      	add	r0, r3
 8007d1a:	2300      	movs	r3, #0
 8007d1c:	4288      	cmp	r0, r1
 8007d1e:	d305      	bcc.n	8007d2c <__copybits+0x40>
 8007d20:	bd70      	pop	{r4, r5, r6, pc}
 8007d22:	f853 6b04 	ldr.w	r6, [r3], #4
 8007d26:	f845 6f04 	str.w	r6, [r5, #4]!
 8007d2a:	e7eb      	b.n	8007d04 <__copybits+0x18>
 8007d2c:	f840 3b04 	str.w	r3, [r0], #4
 8007d30:	e7f4      	b.n	8007d1c <__copybits+0x30>

08007d32 <__any_on>:
 8007d32:	f100 0214 	add.w	r2, r0, #20
 8007d36:	6900      	ldr	r0, [r0, #16]
 8007d38:	114b      	asrs	r3, r1, #5
 8007d3a:	4298      	cmp	r0, r3
 8007d3c:	b510      	push	{r4, lr}
 8007d3e:	db11      	blt.n	8007d64 <__any_on+0x32>
 8007d40:	dd0a      	ble.n	8007d58 <__any_on+0x26>
 8007d42:	f011 011f 	ands.w	r1, r1, #31
 8007d46:	d007      	beq.n	8007d58 <__any_on+0x26>
 8007d48:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8007d4c:	fa24 f001 	lsr.w	r0, r4, r1
 8007d50:	fa00 f101 	lsl.w	r1, r0, r1
 8007d54:	428c      	cmp	r4, r1
 8007d56:	d10b      	bne.n	8007d70 <__any_on+0x3e>
 8007d58:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007d5c:	4293      	cmp	r3, r2
 8007d5e:	d803      	bhi.n	8007d68 <__any_on+0x36>
 8007d60:	2000      	movs	r0, #0
 8007d62:	bd10      	pop	{r4, pc}
 8007d64:	4603      	mov	r3, r0
 8007d66:	e7f7      	b.n	8007d58 <__any_on+0x26>
 8007d68:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007d6c:	2900      	cmp	r1, #0
 8007d6e:	d0f5      	beq.n	8007d5c <__any_on+0x2a>
 8007d70:	2001      	movs	r0, #1
 8007d72:	e7f6      	b.n	8007d62 <__any_on+0x30>

08007d74 <_calloc_r>:
 8007d74:	b538      	push	{r3, r4, r5, lr}
 8007d76:	fb02 f501 	mul.w	r5, r2, r1
 8007d7a:	4629      	mov	r1, r5
 8007d7c:	f000 f854 	bl	8007e28 <_malloc_r>
 8007d80:	4604      	mov	r4, r0
 8007d82:	b118      	cbz	r0, 8007d8c <_calloc_r+0x18>
 8007d84:	462a      	mov	r2, r5
 8007d86:	2100      	movs	r1, #0
 8007d88:	f7fc fbde 	bl	8004548 <memset>
 8007d8c:	4620      	mov	r0, r4
 8007d8e:	bd38      	pop	{r3, r4, r5, pc}

08007d90 <_free_r>:
 8007d90:	b538      	push	{r3, r4, r5, lr}
 8007d92:	4605      	mov	r5, r0
 8007d94:	2900      	cmp	r1, #0
 8007d96:	d043      	beq.n	8007e20 <_free_r+0x90>
 8007d98:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007d9c:	1f0c      	subs	r4, r1, #4
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	bfb8      	it	lt
 8007da2:	18e4      	addlt	r4, r4, r3
 8007da4:	f000 fa76 	bl	8008294 <__malloc_lock>
 8007da8:	4a1e      	ldr	r2, [pc, #120]	; (8007e24 <_free_r+0x94>)
 8007daa:	6813      	ldr	r3, [r2, #0]
 8007dac:	4610      	mov	r0, r2
 8007dae:	b933      	cbnz	r3, 8007dbe <_free_r+0x2e>
 8007db0:	6063      	str	r3, [r4, #4]
 8007db2:	6014      	str	r4, [r2, #0]
 8007db4:	4628      	mov	r0, r5
 8007db6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007dba:	f000 ba71 	b.w	80082a0 <__malloc_unlock>
 8007dbe:	42a3      	cmp	r3, r4
 8007dc0:	d90a      	bls.n	8007dd8 <_free_r+0x48>
 8007dc2:	6821      	ldr	r1, [r4, #0]
 8007dc4:	1862      	adds	r2, r4, r1
 8007dc6:	4293      	cmp	r3, r2
 8007dc8:	bf01      	itttt	eq
 8007dca:	681a      	ldreq	r2, [r3, #0]
 8007dcc:	685b      	ldreq	r3, [r3, #4]
 8007dce:	1852      	addeq	r2, r2, r1
 8007dd0:	6022      	streq	r2, [r4, #0]
 8007dd2:	6063      	str	r3, [r4, #4]
 8007dd4:	6004      	str	r4, [r0, #0]
 8007dd6:	e7ed      	b.n	8007db4 <_free_r+0x24>
 8007dd8:	461a      	mov	r2, r3
 8007dda:	685b      	ldr	r3, [r3, #4]
 8007ddc:	b10b      	cbz	r3, 8007de2 <_free_r+0x52>
 8007dde:	42a3      	cmp	r3, r4
 8007de0:	d9fa      	bls.n	8007dd8 <_free_r+0x48>
 8007de2:	6811      	ldr	r1, [r2, #0]
 8007de4:	1850      	adds	r0, r2, r1
 8007de6:	42a0      	cmp	r0, r4
 8007de8:	d10b      	bne.n	8007e02 <_free_r+0x72>
 8007dea:	6820      	ldr	r0, [r4, #0]
 8007dec:	4401      	add	r1, r0
 8007dee:	1850      	adds	r0, r2, r1
 8007df0:	4283      	cmp	r3, r0
 8007df2:	6011      	str	r1, [r2, #0]
 8007df4:	d1de      	bne.n	8007db4 <_free_r+0x24>
 8007df6:	6818      	ldr	r0, [r3, #0]
 8007df8:	685b      	ldr	r3, [r3, #4]
 8007dfa:	4401      	add	r1, r0
 8007dfc:	6011      	str	r1, [r2, #0]
 8007dfe:	6053      	str	r3, [r2, #4]
 8007e00:	e7d8      	b.n	8007db4 <_free_r+0x24>
 8007e02:	d902      	bls.n	8007e0a <_free_r+0x7a>
 8007e04:	230c      	movs	r3, #12
 8007e06:	602b      	str	r3, [r5, #0]
 8007e08:	e7d4      	b.n	8007db4 <_free_r+0x24>
 8007e0a:	6820      	ldr	r0, [r4, #0]
 8007e0c:	1821      	adds	r1, r4, r0
 8007e0e:	428b      	cmp	r3, r1
 8007e10:	bf01      	itttt	eq
 8007e12:	6819      	ldreq	r1, [r3, #0]
 8007e14:	685b      	ldreq	r3, [r3, #4]
 8007e16:	1809      	addeq	r1, r1, r0
 8007e18:	6021      	streq	r1, [r4, #0]
 8007e1a:	6063      	str	r3, [r4, #4]
 8007e1c:	6054      	str	r4, [r2, #4]
 8007e1e:	e7c9      	b.n	8007db4 <_free_r+0x24>
 8007e20:	bd38      	pop	{r3, r4, r5, pc}
 8007e22:	bf00      	nop
 8007e24:	20000618 	.word	0x20000618

08007e28 <_malloc_r>:
 8007e28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e2a:	1ccd      	adds	r5, r1, #3
 8007e2c:	f025 0503 	bic.w	r5, r5, #3
 8007e30:	3508      	adds	r5, #8
 8007e32:	2d0c      	cmp	r5, #12
 8007e34:	bf38      	it	cc
 8007e36:	250c      	movcc	r5, #12
 8007e38:	2d00      	cmp	r5, #0
 8007e3a:	4606      	mov	r6, r0
 8007e3c:	db01      	blt.n	8007e42 <_malloc_r+0x1a>
 8007e3e:	42a9      	cmp	r1, r5
 8007e40:	d903      	bls.n	8007e4a <_malloc_r+0x22>
 8007e42:	230c      	movs	r3, #12
 8007e44:	6033      	str	r3, [r6, #0]
 8007e46:	2000      	movs	r0, #0
 8007e48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007e4a:	f000 fa23 	bl	8008294 <__malloc_lock>
 8007e4e:	4921      	ldr	r1, [pc, #132]	; (8007ed4 <_malloc_r+0xac>)
 8007e50:	680a      	ldr	r2, [r1, #0]
 8007e52:	4614      	mov	r4, r2
 8007e54:	b99c      	cbnz	r4, 8007e7e <_malloc_r+0x56>
 8007e56:	4f20      	ldr	r7, [pc, #128]	; (8007ed8 <_malloc_r+0xb0>)
 8007e58:	683b      	ldr	r3, [r7, #0]
 8007e5a:	b923      	cbnz	r3, 8007e66 <_malloc_r+0x3e>
 8007e5c:	4621      	mov	r1, r4
 8007e5e:	4630      	mov	r0, r6
 8007e60:	f000 f99e 	bl	80081a0 <_sbrk_r>
 8007e64:	6038      	str	r0, [r7, #0]
 8007e66:	4629      	mov	r1, r5
 8007e68:	4630      	mov	r0, r6
 8007e6a:	f000 f999 	bl	80081a0 <_sbrk_r>
 8007e6e:	1c43      	adds	r3, r0, #1
 8007e70:	d123      	bne.n	8007eba <_malloc_r+0x92>
 8007e72:	230c      	movs	r3, #12
 8007e74:	4630      	mov	r0, r6
 8007e76:	6033      	str	r3, [r6, #0]
 8007e78:	f000 fa12 	bl	80082a0 <__malloc_unlock>
 8007e7c:	e7e3      	b.n	8007e46 <_malloc_r+0x1e>
 8007e7e:	6823      	ldr	r3, [r4, #0]
 8007e80:	1b5b      	subs	r3, r3, r5
 8007e82:	d417      	bmi.n	8007eb4 <_malloc_r+0x8c>
 8007e84:	2b0b      	cmp	r3, #11
 8007e86:	d903      	bls.n	8007e90 <_malloc_r+0x68>
 8007e88:	6023      	str	r3, [r4, #0]
 8007e8a:	441c      	add	r4, r3
 8007e8c:	6025      	str	r5, [r4, #0]
 8007e8e:	e004      	b.n	8007e9a <_malloc_r+0x72>
 8007e90:	6863      	ldr	r3, [r4, #4]
 8007e92:	42a2      	cmp	r2, r4
 8007e94:	bf0c      	ite	eq
 8007e96:	600b      	streq	r3, [r1, #0]
 8007e98:	6053      	strne	r3, [r2, #4]
 8007e9a:	4630      	mov	r0, r6
 8007e9c:	f000 fa00 	bl	80082a0 <__malloc_unlock>
 8007ea0:	f104 000b 	add.w	r0, r4, #11
 8007ea4:	1d23      	adds	r3, r4, #4
 8007ea6:	f020 0007 	bic.w	r0, r0, #7
 8007eaa:	1ac2      	subs	r2, r0, r3
 8007eac:	d0cc      	beq.n	8007e48 <_malloc_r+0x20>
 8007eae:	1a1b      	subs	r3, r3, r0
 8007eb0:	50a3      	str	r3, [r4, r2]
 8007eb2:	e7c9      	b.n	8007e48 <_malloc_r+0x20>
 8007eb4:	4622      	mov	r2, r4
 8007eb6:	6864      	ldr	r4, [r4, #4]
 8007eb8:	e7cc      	b.n	8007e54 <_malloc_r+0x2c>
 8007eba:	1cc4      	adds	r4, r0, #3
 8007ebc:	f024 0403 	bic.w	r4, r4, #3
 8007ec0:	42a0      	cmp	r0, r4
 8007ec2:	d0e3      	beq.n	8007e8c <_malloc_r+0x64>
 8007ec4:	1a21      	subs	r1, r4, r0
 8007ec6:	4630      	mov	r0, r6
 8007ec8:	f000 f96a 	bl	80081a0 <_sbrk_r>
 8007ecc:	3001      	adds	r0, #1
 8007ece:	d1dd      	bne.n	8007e8c <_malloc_r+0x64>
 8007ed0:	e7cf      	b.n	8007e72 <_malloc_r+0x4a>
 8007ed2:	bf00      	nop
 8007ed4:	20000618 	.word	0x20000618
 8007ed8:	2000061c 	.word	0x2000061c

08007edc <__ssputs_r>:
 8007edc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ee0:	688e      	ldr	r6, [r1, #8]
 8007ee2:	4682      	mov	sl, r0
 8007ee4:	429e      	cmp	r6, r3
 8007ee6:	460c      	mov	r4, r1
 8007ee8:	4690      	mov	r8, r2
 8007eea:	461f      	mov	r7, r3
 8007eec:	d838      	bhi.n	8007f60 <__ssputs_r+0x84>
 8007eee:	898a      	ldrh	r2, [r1, #12]
 8007ef0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007ef4:	d032      	beq.n	8007f5c <__ssputs_r+0x80>
 8007ef6:	6825      	ldr	r5, [r4, #0]
 8007ef8:	6909      	ldr	r1, [r1, #16]
 8007efa:	3301      	adds	r3, #1
 8007efc:	eba5 0901 	sub.w	r9, r5, r1
 8007f00:	6965      	ldr	r5, [r4, #20]
 8007f02:	444b      	add	r3, r9
 8007f04:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007f08:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007f0c:	106d      	asrs	r5, r5, #1
 8007f0e:	429d      	cmp	r5, r3
 8007f10:	bf38      	it	cc
 8007f12:	461d      	movcc	r5, r3
 8007f14:	0553      	lsls	r3, r2, #21
 8007f16:	d531      	bpl.n	8007f7c <__ssputs_r+0xa0>
 8007f18:	4629      	mov	r1, r5
 8007f1a:	f7ff ff85 	bl	8007e28 <_malloc_r>
 8007f1e:	4606      	mov	r6, r0
 8007f20:	b950      	cbnz	r0, 8007f38 <__ssputs_r+0x5c>
 8007f22:	230c      	movs	r3, #12
 8007f24:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007f28:	f8ca 3000 	str.w	r3, [sl]
 8007f2c:	89a3      	ldrh	r3, [r4, #12]
 8007f2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007f32:	81a3      	strh	r3, [r4, #12]
 8007f34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f38:	464a      	mov	r2, r9
 8007f3a:	6921      	ldr	r1, [r4, #16]
 8007f3c:	f7ff fa54 	bl	80073e8 <memcpy>
 8007f40:	89a3      	ldrh	r3, [r4, #12]
 8007f42:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007f46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f4a:	81a3      	strh	r3, [r4, #12]
 8007f4c:	6126      	str	r6, [r4, #16]
 8007f4e:	444e      	add	r6, r9
 8007f50:	6026      	str	r6, [r4, #0]
 8007f52:	463e      	mov	r6, r7
 8007f54:	6165      	str	r5, [r4, #20]
 8007f56:	eba5 0509 	sub.w	r5, r5, r9
 8007f5a:	60a5      	str	r5, [r4, #8]
 8007f5c:	42be      	cmp	r6, r7
 8007f5e:	d900      	bls.n	8007f62 <__ssputs_r+0x86>
 8007f60:	463e      	mov	r6, r7
 8007f62:	4632      	mov	r2, r6
 8007f64:	4641      	mov	r1, r8
 8007f66:	6820      	ldr	r0, [r4, #0]
 8007f68:	f000 f97a 	bl	8008260 <memmove>
 8007f6c:	68a3      	ldr	r3, [r4, #8]
 8007f6e:	6822      	ldr	r2, [r4, #0]
 8007f70:	1b9b      	subs	r3, r3, r6
 8007f72:	4432      	add	r2, r6
 8007f74:	2000      	movs	r0, #0
 8007f76:	60a3      	str	r3, [r4, #8]
 8007f78:	6022      	str	r2, [r4, #0]
 8007f7a:	e7db      	b.n	8007f34 <__ssputs_r+0x58>
 8007f7c:	462a      	mov	r2, r5
 8007f7e:	f000 f995 	bl	80082ac <_realloc_r>
 8007f82:	4606      	mov	r6, r0
 8007f84:	2800      	cmp	r0, #0
 8007f86:	d1e1      	bne.n	8007f4c <__ssputs_r+0x70>
 8007f88:	4650      	mov	r0, sl
 8007f8a:	6921      	ldr	r1, [r4, #16]
 8007f8c:	f7ff ff00 	bl	8007d90 <_free_r>
 8007f90:	e7c7      	b.n	8007f22 <__ssputs_r+0x46>
	...

08007f94 <_svfiprintf_r>:
 8007f94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f98:	4698      	mov	r8, r3
 8007f9a:	898b      	ldrh	r3, [r1, #12]
 8007f9c:	4607      	mov	r7, r0
 8007f9e:	061b      	lsls	r3, r3, #24
 8007fa0:	460d      	mov	r5, r1
 8007fa2:	4614      	mov	r4, r2
 8007fa4:	b09d      	sub	sp, #116	; 0x74
 8007fa6:	d50e      	bpl.n	8007fc6 <_svfiprintf_r+0x32>
 8007fa8:	690b      	ldr	r3, [r1, #16]
 8007faa:	b963      	cbnz	r3, 8007fc6 <_svfiprintf_r+0x32>
 8007fac:	2140      	movs	r1, #64	; 0x40
 8007fae:	f7ff ff3b 	bl	8007e28 <_malloc_r>
 8007fb2:	6028      	str	r0, [r5, #0]
 8007fb4:	6128      	str	r0, [r5, #16]
 8007fb6:	b920      	cbnz	r0, 8007fc2 <_svfiprintf_r+0x2e>
 8007fb8:	230c      	movs	r3, #12
 8007fba:	603b      	str	r3, [r7, #0]
 8007fbc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007fc0:	e0d1      	b.n	8008166 <_svfiprintf_r+0x1d2>
 8007fc2:	2340      	movs	r3, #64	; 0x40
 8007fc4:	616b      	str	r3, [r5, #20]
 8007fc6:	2300      	movs	r3, #0
 8007fc8:	9309      	str	r3, [sp, #36]	; 0x24
 8007fca:	2320      	movs	r3, #32
 8007fcc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007fd0:	2330      	movs	r3, #48	; 0x30
 8007fd2:	f04f 0901 	mov.w	r9, #1
 8007fd6:	f8cd 800c 	str.w	r8, [sp, #12]
 8007fda:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8008180 <_svfiprintf_r+0x1ec>
 8007fde:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007fe2:	4623      	mov	r3, r4
 8007fe4:	469a      	mov	sl, r3
 8007fe6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007fea:	b10a      	cbz	r2, 8007ff0 <_svfiprintf_r+0x5c>
 8007fec:	2a25      	cmp	r2, #37	; 0x25
 8007fee:	d1f9      	bne.n	8007fe4 <_svfiprintf_r+0x50>
 8007ff0:	ebba 0b04 	subs.w	fp, sl, r4
 8007ff4:	d00b      	beq.n	800800e <_svfiprintf_r+0x7a>
 8007ff6:	465b      	mov	r3, fp
 8007ff8:	4622      	mov	r2, r4
 8007ffa:	4629      	mov	r1, r5
 8007ffc:	4638      	mov	r0, r7
 8007ffe:	f7ff ff6d 	bl	8007edc <__ssputs_r>
 8008002:	3001      	adds	r0, #1
 8008004:	f000 80aa 	beq.w	800815c <_svfiprintf_r+0x1c8>
 8008008:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800800a:	445a      	add	r2, fp
 800800c:	9209      	str	r2, [sp, #36]	; 0x24
 800800e:	f89a 3000 	ldrb.w	r3, [sl]
 8008012:	2b00      	cmp	r3, #0
 8008014:	f000 80a2 	beq.w	800815c <_svfiprintf_r+0x1c8>
 8008018:	2300      	movs	r3, #0
 800801a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800801e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008022:	f10a 0a01 	add.w	sl, sl, #1
 8008026:	9304      	str	r3, [sp, #16]
 8008028:	9307      	str	r3, [sp, #28]
 800802a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800802e:	931a      	str	r3, [sp, #104]	; 0x68
 8008030:	4654      	mov	r4, sl
 8008032:	2205      	movs	r2, #5
 8008034:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008038:	4851      	ldr	r0, [pc, #324]	; (8008180 <_svfiprintf_r+0x1ec>)
 800803a:	f7ff f9c7 	bl	80073cc <memchr>
 800803e:	9a04      	ldr	r2, [sp, #16]
 8008040:	b9d8      	cbnz	r0, 800807a <_svfiprintf_r+0xe6>
 8008042:	06d0      	lsls	r0, r2, #27
 8008044:	bf44      	itt	mi
 8008046:	2320      	movmi	r3, #32
 8008048:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800804c:	0711      	lsls	r1, r2, #28
 800804e:	bf44      	itt	mi
 8008050:	232b      	movmi	r3, #43	; 0x2b
 8008052:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008056:	f89a 3000 	ldrb.w	r3, [sl]
 800805a:	2b2a      	cmp	r3, #42	; 0x2a
 800805c:	d015      	beq.n	800808a <_svfiprintf_r+0xf6>
 800805e:	4654      	mov	r4, sl
 8008060:	2000      	movs	r0, #0
 8008062:	f04f 0c0a 	mov.w	ip, #10
 8008066:	9a07      	ldr	r2, [sp, #28]
 8008068:	4621      	mov	r1, r4
 800806a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800806e:	3b30      	subs	r3, #48	; 0x30
 8008070:	2b09      	cmp	r3, #9
 8008072:	d94e      	bls.n	8008112 <_svfiprintf_r+0x17e>
 8008074:	b1b0      	cbz	r0, 80080a4 <_svfiprintf_r+0x110>
 8008076:	9207      	str	r2, [sp, #28]
 8008078:	e014      	b.n	80080a4 <_svfiprintf_r+0x110>
 800807a:	eba0 0308 	sub.w	r3, r0, r8
 800807e:	fa09 f303 	lsl.w	r3, r9, r3
 8008082:	4313      	orrs	r3, r2
 8008084:	46a2      	mov	sl, r4
 8008086:	9304      	str	r3, [sp, #16]
 8008088:	e7d2      	b.n	8008030 <_svfiprintf_r+0x9c>
 800808a:	9b03      	ldr	r3, [sp, #12]
 800808c:	1d19      	adds	r1, r3, #4
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	9103      	str	r1, [sp, #12]
 8008092:	2b00      	cmp	r3, #0
 8008094:	bfbb      	ittet	lt
 8008096:	425b      	neglt	r3, r3
 8008098:	f042 0202 	orrlt.w	r2, r2, #2
 800809c:	9307      	strge	r3, [sp, #28]
 800809e:	9307      	strlt	r3, [sp, #28]
 80080a0:	bfb8      	it	lt
 80080a2:	9204      	strlt	r2, [sp, #16]
 80080a4:	7823      	ldrb	r3, [r4, #0]
 80080a6:	2b2e      	cmp	r3, #46	; 0x2e
 80080a8:	d10c      	bne.n	80080c4 <_svfiprintf_r+0x130>
 80080aa:	7863      	ldrb	r3, [r4, #1]
 80080ac:	2b2a      	cmp	r3, #42	; 0x2a
 80080ae:	d135      	bne.n	800811c <_svfiprintf_r+0x188>
 80080b0:	9b03      	ldr	r3, [sp, #12]
 80080b2:	3402      	adds	r4, #2
 80080b4:	1d1a      	adds	r2, r3, #4
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	9203      	str	r2, [sp, #12]
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	bfb8      	it	lt
 80080be:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80080c2:	9305      	str	r3, [sp, #20]
 80080c4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008190 <_svfiprintf_r+0x1fc>
 80080c8:	2203      	movs	r2, #3
 80080ca:	4650      	mov	r0, sl
 80080cc:	7821      	ldrb	r1, [r4, #0]
 80080ce:	f7ff f97d 	bl	80073cc <memchr>
 80080d2:	b140      	cbz	r0, 80080e6 <_svfiprintf_r+0x152>
 80080d4:	2340      	movs	r3, #64	; 0x40
 80080d6:	eba0 000a 	sub.w	r0, r0, sl
 80080da:	fa03 f000 	lsl.w	r0, r3, r0
 80080de:	9b04      	ldr	r3, [sp, #16]
 80080e0:	3401      	adds	r4, #1
 80080e2:	4303      	orrs	r3, r0
 80080e4:	9304      	str	r3, [sp, #16]
 80080e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80080ea:	2206      	movs	r2, #6
 80080ec:	4825      	ldr	r0, [pc, #148]	; (8008184 <_svfiprintf_r+0x1f0>)
 80080ee:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80080f2:	f7ff f96b 	bl	80073cc <memchr>
 80080f6:	2800      	cmp	r0, #0
 80080f8:	d038      	beq.n	800816c <_svfiprintf_r+0x1d8>
 80080fa:	4b23      	ldr	r3, [pc, #140]	; (8008188 <_svfiprintf_r+0x1f4>)
 80080fc:	bb1b      	cbnz	r3, 8008146 <_svfiprintf_r+0x1b2>
 80080fe:	9b03      	ldr	r3, [sp, #12]
 8008100:	3307      	adds	r3, #7
 8008102:	f023 0307 	bic.w	r3, r3, #7
 8008106:	3308      	adds	r3, #8
 8008108:	9303      	str	r3, [sp, #12]
 800810a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800810c:	4433      	add	r3, r6
 800810e:	9309      	str	r3, [sp, #36]	; 0x24
 8008110:	e767      	b.n	8007fe2 <_svfiprintf_r+0x4e>
 8008112:	460c      	mov	r4, r1
 8008114:	2001      	movs	r0, #1
 8008116:	fb0c 3202 	mla	r2, ip, r2, r3
 800811a:	e7a5      	b.n	8008068 <_svfiprintf_r+0xd4>
 800811c:	2300      	movs	r3, #0
 800811e:	f04f 0c0a 	mov.w	ip, #10
 8008122:	4619      	mov	r1, r3
 8008124:	3401      	adds	r4, #1
 8008126:	9305      	str	r3, [sp, #20]
 8008128:	4620      	mov	r0, r4
 800812a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800812e:	3a30      	subs	r2, #48	; 0x30
 8008130:	2a09      	cmp	r2, #9
 8008132:	d903      	bls.n	800813c <_svfiprintf_r+0x1a8>
 8008134:	2b00      	cmp	r3, #0
 8008136:	d0c5      	beq.n	80080c4 <_svfiprintf_r+0x130>
 8008138:	9105      	str	r1, [sp, #20]
 800813a:	e7c3      	b.n	80080c4 <_svfiprintf_r+0x130>
 800813c:	4604      	mov	r4, r0
 800813e:	2301      	movs	r3, #1
 8008140:	fb0c 2101 	mla	r1, ip, r1, r2
 8008144:	e7f0      	b.n	8008128 <_svfiprintf_r+0x194>
 8008146:	ab03      	add	r3, sp, #12
 8008148:	9300      	str	r3, [sp, #0]
 800814a:	462a      	mov	r2, r5
 800814c:	4638      	mov	r0, r7
 800814e:	4b0f      	ldr	r3, [pc, #60]	; (800818c <_svfiprintf_r+0x1f8>)
 8008150:	a904      	add	r1, sp, #16
 8008152:	f7fc fa9f 	bl	8004694 <_printf_float>
 8008156:	1c42      	adds	r2, r0, #1
 8008158:	4606      	mov	r6, r0
 800815a:	d1d6      	bne.n	800810a <_svfiprintf_r+0x176>
 800815c:	89ab      	ldrh	r3, [r5, #12]
 800815e:	065b      	lsls	r3, r3, #25
 8008160:	f53f af2c 	bmi.w	8007fbc <_svfiprintf_r+0x28>
 8008164:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008166:	b01d      	add	sp, #116	; 0x74
 8008168:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800816c:	ab03      	add	r3, sp, #12
 800816e:	9300      	str	r3, [sp, #0]
 8008170:	462a      	mov	r2, r5
 8008172:	4638      	mov	r0, r7
 8008174:	4b05      	ldr	r3, [pc, #20]	; (800818c <_svfiprintf_r+0x1f8>)
 8008176:	a904      	add	r1, sp, #16
 8008178:	f7fc fd28 	bl	8004bcc <_printf_i>
 800817c:	e7eb      	b.n	8008156 <_svfiprintf_r+0x1c2>
 800817e:	bf00      	nop
 8008180:	08009f34 	.word	0x08009f34
 8008184:	08009f3e 	.word	0x08009f3e
 8008188:	08004695 	.word	0x08004695
 800818c:	08007edd 	.word	0x08007edd
 8008190:	08009f3a 	.word	0x08009f3a

08008194 <nan>:
 8008194:	2000      	movs	r0, #0
 8008196:	4901      	ldr	r1, [pc, #4]	; (800819c <nan+0x8>)
 8008198:	4770      	bx	lr
 800819a:	bf00      	nop
 800819c:	7ff80000 	.word	0x7ff80000

080081a0 <_sbrk_r>:
 80081a0:	b538      	push	{r3, r4, r5, lr}
 80081a2:	2300      	movs	r3, #0
 80081a4:	4d05      	ldr	r5, [pc, #20]	; (80081bc <_sbrk_r+0x1c>)
 80081a6:	4604      	mov	r4, r0
 80081a8:	4608      	mov	r0, r1
 80081aa:	602b      	str	r3, [r5, #0]
 80081ac:	f7f9 fdec 	bl	8001d88 <_sbrk>
 80081b0:	1c43      	adds	r3, r0, #1
 80081b2:	d102      	bne.n	80081ba <_sbrk_r+0x1a>
 80081b4:	682b      	ldr	r3, [r5, #0]
 80081b6:	b103      	cbz	r3, 80081ba <_sbrk_r+0x1a>
 80081b8:	6023      	str	r3, [r4, #0]
 80081ba:	bd38      	pop	{r3, r4, r5, pc}
 80081bc:	20000738 	.word	0x20000738

080081c0 <strncmp>:
 80081c0:	b510      	push	{r4, lr}
 80081c2:	b16a      	cbz	r2, 80081e0 <strncmp+0x20>
 80081c4:	3901      	subs	r1, #1
 80081c6:	1884      	adds	r4, r0, r2
 80081c8:	f810 3b01 	ldrb.w	r3, [r0], #1
 80081cc:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80081d0:	4293      	cmp	r3, r2
 80081d2:	d103      	bne.n	80081dc <strncmp+0x1c>
 80081d4:	42a0      	cmp	r0, r4
 80081d6:	d001      	beq.n	80081dc <strncmp+0x1c>
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d1f5      	bne.n	80081c8 <strncmp+0x8>
 80081dc:	1a98      	subs	r0, r3, r2
 80081de:	bd10      	pop	{r4, pc}
 80081e0:	4610      	mov	r0, r2
 80081e2:	e7fc      	b.n	80081de <strncmp+0x1e>

080081e4 <__ascii_wctomb>:
 80081e4:	4603      	mov	r3, r0
 80081e6:	4608      	mov	r0, r1
 80081e8:	b141      	cbz	r1, 80081fc <__ascii_wctomb+0x18>
 80081ea:	2aff      	cmp	r2, #255	; 0xff
 80081ec:	d904      	bls.n	80081f8 <__ascii_wctomb+0x14>
 80081ee:	228a      	movs	r2, #138	; 0x8a
 80081f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80081f4:	601a      	str	r2, [r3, #0]
 80081f6:	4770      	bx	lr
 80081f8:	2001      	movs	r0, #1
 80081fa:	700a      	strb	r2, [r1, #0]
 80081fc:	4770      	bx	lr
	...

08008200 <__assert_func>:
 8008200:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008202:	4614      	mov	r4, r2
 8008204:	461a      	mov	r2, r3
 8008206:	4b09      	ldr	r3, [pc, #36]	; (800822c <__assert_func+0x2c>)
 8008208:	4605      	mov	r5, r0
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	68d8      	ldr	r0, [r3, #12]
 800820e:	b14c      	cbz	r4, 8008224 <__assert_func+0x24>
 8008210:	4b07      	ldr	r3, [pc, #28]	; (8008230 <__assert_func+0x30>)
 8008212:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008216:	9100      	str	r1, [sp, #0]
 8008218:	462b      	mov	r3, r5
 800821a:	4906      	ldr	r1, [pc, #24]	; (8008234 <__assert_func+0x34>)
 800821c:	f000 f80e 	bl	800823c <fiprintf>
 8008220:	f000 fa82 	bl	8008728 <abort>
 8008224:	4b04      	ldr	r3, [pc, #16]	; (8008238 <__assert_func+0x38>)
 8008226:	461c      	mov	r4, r3
 8008228:	e7f3      	b.n	8008212 <__assert_func+0x12>
 800822a:	bf00      	nop
 800822c:	20000014 	.word	0x20000014
 8008230:	08009f45 	.word	0x08009f45
 8008234:	08009f52 	.word	0x08009f52
 8008238:	08009f80 	.word	0x08009f80

0800823c <fiprintf>:
 800823c:	b40e      	push	{r1, r2, r3}
 800823e:	b503      	push	{r0, r1, lr}
 8008240:	4601      	mov	r1, r0
 8008242:	ab03      	add	r3, sp, #12
 8008244:	4805      	ldr	r0, [pc, #20]	; (800825c <fiprintf+0x20>)
 8008246:	f853 2b04 	ldr.w	r2, [r3], #4
 800824a:	6800      	ldr	r0, [r0, #0]
 800824c:	9301      	str	r3, [sp, #4]
 800824e:	f000 f87b 	bl	8008348 <_vfiprintf_r>
 8008252:	b002      	add	sp, #8
 8008254:	f85d eb04 	ldr.w	lr, [sp], #4
 8008258:	b003      	add	sp, #12
 800825a:	4770      	bx	lr
 800825c:	20000014 	.word	0x20000014

08008260 <memmove>:
 8008260:	4288      	cmp	r0, r1
 8008262:	b510      	push	{r4, lr}
 8008264:	eb01 0402 	add.w	r4, r1, r2
 8008268:	d902      	bls.n	8008270 <memmove+0x10>
 800826a:	4284      	cmp	r4, r0
 800826c:	4623      	mov	r3, r4
 800826e:	d807      	bhi.n	8008280 <memmove+0x20>
 8008270:	1e43      	subs	r3, r0, #1
 8008272:	42a1      	cmp	r1, r4
 8008274:	d008      	beq.n	8008288 <memmove+0x28>
 8008276:	f811 2b01 	ldrb.w	r2, [r1], #1
 800827a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800827e:	e7f8      	b.n	8008272 <memmove+0x12>
 8008280:	4601      	mov	r1, r0
 8008282:	4402      	add	r2, r0
 8008284:	428a      	cmp	r2, r1
 8008286:	d100      	bne.n	800828a <memmove+0x2a>
 8008288:	bd10      	pop	{r4, pc}
 800828a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800828e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008292:	e7f7      	b.n	8008284 <memmove+0x24>

08008294 <__malloc_lock>:
 8008294:	4801      	ldr	r0, [pc, #4]	; (800829c <__malloc_lock+0x8>)
 8008296:	f000 bc07 	b.w	8008aa8 <__retarget_lock_acquire_recursive>
 800829a:	bf00      	nop
 800829c:	20000740 	.word	0x20000740

080082a0 <__malloc_unlock>:
 80082a0:	4801      	ldr	r0, [pc, #4]	; (80082a8 <__malloc_unlock+0x8>)
 80082a2:	f000 bc02 	b.w	8008aaa <__retarget_lock_release_recursive>
 80082a6:	bf00      	nop
 80082a8:	20000740 	.word	0x20000740

080082ac <_realloc_r>:
 80082ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082ae:	4607      	mov	r7, r0
 80082b0:	4614      	mov	r4, r2
 80082b2:	460e      	mov	r6, r1
 80082b4:	b921      	cbnz	r1, 80082c0 <_realloc_r+0x14>
 80082b6:	4611      	mov	r1, r2
 80082b8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80082bc:	f7ff bdb4 	b.w	8007e28 <_malloc_r>
 80082c0:	b922      	cbnz	r2, 80082cc <_realloc_r+0x20>
 80082c2:	f7ff fd65 	bl	8007d90 <_free_r>
 80082c6:	4625      	mov	r5, r4
 80082c8:	4628      	mov	r0, r5
 80082ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80082cc:	f000 fc52 	bl	8008b74 <_malloc_usable_size_r>
 80082d0:	42a0      	cmp	r0, r4
 80082d2:	d20f      	bcs.n	80082f4 <_realloc_r+0x48>
 80082d4:	4621      	mov	r1, r4
 80082d6:	4638      	mov	r0, r7
 80082d8:	f7ff fda6 	bl	8007e28 <_malloc_r>
 80082dc:	4605      	mov	r5, r0
 80082de:	2800      	cmp	r0, #0
 80082e0:	d0f2      	beq.n	80082c8 <_realloc_r+0x1c>
 80082e2:	4631      	mov	r1, r6
 80082e4:	4622      	mov	r2, r4
 80082e6:	f7ff f87f 	bl	80073e8 <memcpy>
 80082ea:	4631      	mov	r1, r6
 80082ec:	4638      	mov	r0, r7
 80082ee:	f7ff fd4f 	bl	8007d90 <_free_r>
 80082f2:	e7e9      	b.n	80082c8 <_realloc_r+0x1c>
 80082f4:	4635      	mov	r5, r6
 80082f6:	e7e7      	b.n	80082c8 <_realloc_r+0x1c>

080082f8 <__sfputc_r>:
 80082f8:	6893      	ldr	r3, [r2, #8]
 80082fa:	b410      	push	{r4}
 80082fc:	3b01      	subs	r3, #1
 80082fe:	2b00      	cmp	r3, #0
 8008300:	6093      	str	r3, [r2, #8]
 8008302:	da07      	bge.n	8008314 <__sfputc_r+0x1c>
 8008304:	6994      	ldr	r4, [r2, #24]
 8008306:	42a3      	cmp	r3, r4
 8008308:	db01      	blt.n	800830e <__sfputc_r+0x16>
 800830a:	290a      	cmp	r1, #10
 800830c:	d102      	bne.n	8008314 <__sfputc_r+0x1c>
 800830e:	bc10      	pop	{r4}
 8008310:	f000 b94a 	b.w	80085a8 <__swbuf_r>
 8008314:	6813      	ldr	r3, [r2, #0]
 8008316:	1c58      	adds	r0, r3, #1
 8008318:	6010      	str	r0, [r2, #0]
 800831a:	7019      	strb	r1, [r3, #0]
 800831c:	4608      	mov	r0, r1
 800831e:	bc10      	pop	{r4}
 8008320:	4770      	bx	lr

08008322 <__sfputs_r>:
 8008322:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008324:	4606      	mov	r6, r0
 8008326:	460f      	mov	r7, r1
 8008328:	4614      	mov	r4, r2
 800832a:	18d5      	adds	r5, r2, r3
 800832c:	42ac      	cmp	r4, r5
 800832e:	d101      	bne.n	8008334 <__sfputs_r+0x12>
 8008330:	2000      	movs	r0, #0
 8008332:	e007      	b.n	8008344 <__sfputs_r+0x22>
 8008334:	463a      	mov	r2, r7
 8008336:	4630      	mov	r0, r6
 8008338:	f814 1b01 	ldrb.w	r1, [r4], #1
 800833c:	f7ff ffdc 	bl	80082f8 <__sfputc_r>
 8008340:	1c43      	adds	r3, r0, #1
 8008342:	d1f3      	bne.n	800832c <__sfputs_r+0xa>
 8008344:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008348 <_vfiprintf_r>:
 8008348:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800834c:	460d      	mov	r5, r1
 800834e:	4614      	mov	r4, r2
 8008350:	4698      	mov	r8, r3
 8008352:	4606      	mov	r6, r0
 8008354:	b09d      	sub	sp, #116	; 0x74
 8008356:	b118      	cbz	r0, 8008360 <_vfiprintf_r+0x18>
 8008358:	6983      	ldr	r3, [r0, #24]
 800835a:	b90b      	cbnz	r3, 8008360 <_vfiprintf_r+0x18>
 800835c:	f000 fb06 	bl	800896c <__sinit>
 8008360:	4b89      	ldr	r3, [pc, #548]	; (8008588 <_vfiprintf_r+0x240>)
 8008362:	429d      	cmp	r5, r3
 8008364:	d11b      	bne.n	800839e <_vfiprintf_r+0x56>
 8008366:	6875      	ldr	r5, [r6, #4]
 8008368:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800836a:	07d9      	lsls	r1, r3, #31
 800836c:	d405      	bmi.n	800837a <_vfiprintf_r+0x32>
 800836e:	89ab      	ldrh	r3, [r5, #12]
 8008370:	059a      	lsls	r2, r3, #22
 8008372:	d402      	bmi.n	800837a <_vfiprintf_r+0x32>
 8008374:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008376:	f000 fb97 	bl	8008aa8 <__retarget_lock_acquire_recursive>
 800837a:	89ab      	ldrh	r3, [r5, #12]
 800837c:	071b      	lsls	r3, r3, #28
 800837e:	d501      	bpl.n	8008384 <_vfiprintf_r+0x3c>
 8008380:	692b      	ldr	r3, [r5, #16]
 8008382:	b9eb      	cbnz	r3, 80083c0 <_vfiprintf_r+0x78>
 8008384:	4629      	mov	r1, r5
 8008386:	4630      	mov	r0, r6
 8008388:	f000 f960 	bl	800864c <__swsetup_r>
 800838c:	b1c0      	cbz	r0, 80083c0 <_vfiprintf_r+0x78>
 800838e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008390:	07dc      	lsls	r4, r3, #31
 8008392:	d50e      	bpl.n	80083b2 <_vfiprintf_r+0x6a>
 8008394:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008398:	b01d      	add	sp, #116	; 0x74
 800839a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800839e:	4b7b      	ldr	r3, [pc, #492]	; (800858c <_vfiprintf_r+0x244>)
 80083a0:	429d      	cmp	r5, r3
 80083a2:	d101      	bne.n	80083a8 <_vfiprintf_r+0x60>
 80083a4:	68b5      	ldr	r5, [r6, #8]
 80083a6:	e7df      	b.n	8008368 <_vfiprintf_r+0x20>
 80083a8:	4b79      	ldr	r3, [pc, #484]	; (8008590 <_vfiprintf_r+0x248>)
 80083aa:	429d      	cmp	r5, r3
 80083ac:	bf08      	it	eq
 80083ae:	68f5      	ldreq	r5, [r6, #12]
 80083b0:	e7da      	b.n	8008368 <_vfiprintf_r+0x20>
 80083b2:	89ab      	ldrh	r3, [r5, #12]
 80083b4:	0598      	lsls	r0, r3, #22
 80083b6:	d4ed      	bmi.n	8008394 <_vfiprintf_r+0x4c>
 80083b8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80083ba:	f000 fb76 	bl	8008aaa <__retarget_lock_release_recursive>
 80083be:	e7e9      	b.n	8008394 <_vfiprintf_r+0x4c>
 80083c0:	2300      	movs	r3, #0
 80083c2:	9309      	str	r3, [sp, #36]	; 0x24
 80083c4:	2320      	movs	r3, #32
 80083c6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80083ca:	2330      	movs	r3, #48	; 0x30
 80083cc:	f04f 0901 	mov.w	r9, #1
 80083d0:	f8cd 800c 	str.w	r8, [sp, #12]
 80083d4:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8008594 <_vfiprintf_r+0x24c>
 80083d8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80083dc:	4623      	mov	r3, r4
 80083de:	469a      	mov	sl, r3
 80083e0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80083e4:	b10a      	cbz	r2, 80083ea <_vfiprintf_r+0xa2>
 80083e6:	2a25      	cmp	r2, #37	; 0x25
 80083e8:	d1f9      	bne.n	80083de <_vfiprintf_r+0x96>
 80083ea:	ebba 0b04 	subs.w	fp, sl, r4
 80083ee:	d00b      	beq.n	8008408 <_vfiprintf_r+0xc0>
 80083f0:	465b      	mov	r3, fp
 80083f2:	4622      	mov	r2, r4
 80083f4:	4629      	mov	r1, r5
 80083f6:	4630      	mov	r0, r6
 80083f8:	f7ff ff93 	bl	8008322 <__sfputs_r>
 80083fc:	3001      	adds	r0, #1
 80083fe:	f000 80aa 	beq.w	8008556 <_vfiprintf_r+0x20e>
 8008402:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008404:	445a      	add	r2, fp
 8008406:	9209      	str	r2, [sp, #36]	; 0x24
 8008408:	f89a 3000 	ldrb.w	r3, [sl]
 800840c:	2b00      	cmp	r3, #0
 800840e:	f000 80a2 	beq.w	8008556 <_vfiprintf_r+0x20e>
 8008412:	2300      	movs	r3, #0
 8008414:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008418:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800841c:	f10a 0a01 	add.w	sl, sl, #1
 8008420:	9304      	str	r3, [sp, #16]
 8008422:	9307      	str	r3, [sp, #28]
 8008424:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008428:	931a      	str	r3, [sp, #104]	; 0x68
 800842a:	4654      	mov	r4, sl
 800842c:	2205      	movs	r2, #5
 800842e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008432:	4858      	ldr	r0, [pc, #352]	; (8008594 <_vfiprintf_r+0x24c>)
 8008434:	f7fe ffca 	bl	80073cc <memchr>
 8008438:	9a04      	ldr	r2, [sp, #16]
 800843a:	b9d8      	cbnz	r0, 8008474 <_vfiprintf_r+0x12c>
 800843c:	06d1      	lsls	r1, r2, #27
 800843e:	bf44      	itt	mi
 8008440:	2320      	movmi	r3, #32
 8008442:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008446:	0713      	lsls	r3, r2, #28
 8008448:	bf44      	itt	mi
 800844a:	232b      	movmi	r3, #43	; 0x2b
 800844c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008450:	f89a 3000 	ldrb.w	r3, [sl]
 8008454:	2b2a      	cmp	r3, #42	; 0x2a
 8008456:	d015      	beq.n	8008484 <_vfiprintf_r+0x13c>
 8008458:	4654      	mov	r4, sl
 800845a:	2000      	movs	r0, #0
 800845c:	f04f 0c0a 	mov.w	ip, #10
 8008460:	9a07      	ldr	r2, [sp, #28]
 8008462:	4621      	mov	r1, r4
 8008464:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008468:	3b30      	subs	r3, #48	; 0x30
 800846a:	2b09      	cmp	r3, #9
 800846c:	d94e      	bls.n	800850c <_vfiprintf_r+0x1c4>
 800846e:	b1b0      	cbz	r0, 800849e <_vfiprintf_r+0x156>
 8008470:	9207      	str	r2, [sp, #28]
 8008472:	e014      	b.n	800849e <_vfiprintf_r+0x156>
 8008474:	eba0 0308 	sub.w	r3, r0, r8
 8008478:	fa09 f303 	lsl.w	r3, r9, r3
 800847c:	4313      	orrs	r3, r2
 800847e:	46a2      	mov	sl, r4
 8008480:	9304      	str	r3, [sp, #16]
 8008482:	e7d2      	b.n	800842a <_vfiprintf_r+0xe2>
 8008484:	9b03      	ldr	r3, [sp, #12]
 8008486:	1d19      	adds	r1, r3, #4
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	9103      	str	r1, [sp, #12]
 800848c:	2b00      	cmp	r3, #0
 800848e:	bfbb      	ittet	lt
 8008490:	425b      	neglt	r3, r3
 8008492:	f042 0202 	orrlt.w	r2, r2, #2
 8008496:	9307      	strge	r3, [sp, #28]
 8008498:	9307      	strlt	r3, [sp, #28]
 800849a:	bfb8      	it	lt
 800849c:	9204      	strlt	r2, [sp, #16]
 800849e:	7823      	ldrb	r3, [r4, #0]
 80084a0:	2b2e      	cmp	r3, #46	; 0x2e
 80084a2:	d10c      	bne.n	80084be <_vfiprintf_r+0x176>
 80084a4:	7863      	ldrb	r3, [r4, #1]
 80084a6:	2b2a      	cmp	r3, #42	; 0x2a
 80084a8:	d135      	bne.n	8008516 <_vfiprintf_r+0x1ce>
 80084aa:	9b03      	ldr	r3, [sp, #12]
 80084ac:	3402      	adds	r4, #2
 80084ae:	1d1a      	adds	r2, r3, #4
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	9203      	str	r2, [sp, #12]
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	bfb8      	it	lt
 80084b8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80084bc:	9305      	str	r3, [sp, #20]
 80084be:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80085a4 <_vfiprintf_r+0x25c>
 80084c2:	2203      	movs	r2, #3
 80084c4:	4650      	mov	r0, sl
 80084c6:	7821      	ldrb	r1, [r4, #0]
 80084c8:	f7fe ff80 	bl	80073cc <memchr>
 80084cc:	b140      	cbz	r0, 80084e0 <_vfiprintf_r+0x198>
 80084ce:	2340      	movs	r3, #64	; 0x40
 80084d0:	eba0 000a 	sub.w	r0, r0, sl
 80084d4:	fa03 f000 	lsl.w	r0, r3, r0
 80084d8:	9b04      	ldr	r3, [sp, #16]
 80084da:	3401      	adds	r4, #1
 80084dc:	4303      	orrs	r3, r0
 80084de:	9304      	str	r3, [sp, #16]
 80084e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80084e4:	2206      	movs	r2, #6
 80084e6:	482c      	ldr	r0, [pc, #176]	; (8008598 <_vfiprintf_r+0x250>)
 80084e8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80084ec:	f7fe ff6e 	bl	80073cc <memchr>
 80084f0:	2800      	cmp	r0, #0
 80084f2:	d03f      	beq.n	8008574 <_vfiprintf_r+0x22c>
 80084f4:	4b29      	ldr	r3, [pc, #164]	; (800859c <_vfiprintf_r+0x254>)
 80084f6:	bb1b      	cbnz	r3, 8008540 <_vfiprintf_r+0x1f8>
 80084f8:	9b03      	ldr	r3, [sp, #12]
 80084fa:	3307      	adds	r3, #7
 80084fc:	f023 0307 	bic.w	r3, r3, #7
 8008500:	3308      	adds	r3, #8
 8008502:	9303      	str	r3, [sp, #12]
 8008504:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008506:	443b      	add	r3, r7
 8008508:	9309      	str	r3, [sp, #36]	; 0x24
 800850a:	e767      	b.n	80083dc <_vfiprintf_r+0x94>
 800850c:	460c      	mov	r4, r1
 800850e:	2001      	movs	r0, #1
 8008510:	fb0c 3202 	mla	r2, ip, r2, r3
 8008514:	e7a5      	b.n	8008462 <_vfiprintf_r+0x11a>
 8008516:	2300      	movs	r3, #0
 8008518:	f04f 0c0a 	mov.w	ip, #10
 800851c:	4619      	mov	r1, r3
 800851e:	3401      	adds	r4, #1
 8008520:	9305      	str	r3, [sp, #20]
 8008522:	4620      	mov	r0, r4
 8008524:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008528:	3a30      	subs	r2, #48	; 0x30
 800852a:	2a09      	cmp	r2, #9
 800852c:	d903      	bls.n	8008536 <_vfiprintf_r+0x1ee>
 800852e:	2b00      	cmp	r3, #0
 8008530:	d0c5      	beq.n	80084be <_vfiprintf_r+0x176>
 8008532:	9105      	str	r1, [sp, #20]
 8008534:	e7c3      	b.n	80084be <_vfiprintf_r+0x176>
 8008536:	4604      	mov	r4, r0
 8008538:	2301      	movs	r3, #1
 800853a:	fb0c 2101 	mla	r1, ip, r1, r2
 800853e:	e7f0      	b.n	8008522 <_vfiprintf_r+0x1da>
 8008540:	ab03      	add	r3, sp, #12
 8008542:	9300      	str	r3, [sp, #0]
 8008544:	462a      	mov	r2, r5
 8008546:	4630      	mov	r0, r6
 8008548:	4b15      	ldr	r3, [pc, #84]	; (80085a0 <_vfiprintf_r+0x258>)
 800854a:	a904      	add	r1, sp, #16
 800854c:	f7fc f8a2 	bl	8004694 <_printf_float>
 8008550:	4607      	mov	r7, r0
 8008552:	1c78      	adds	r0, r7, #1
 8008554:	d1d6      	bne.n	8008504 <_vfiprintf_r+0x1bc>
 8008556:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008558:	07d9      	lsls	r1, r3, #31
 800855a:	d405      	bmi.n	8008568 <_vfiprintf_r+0x220>
 800855c:	89ab      	ldrh	r3, [r5, #12]
 800855e:	059a      	lsls	r2, r3, #22
 8008560:	d402      	bmi.n	8008568 <_vfiprintf_r+0x220>
 8008562:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008564:	f000 faa1 	bl	8008aaa <__retarget_lock_release_recursive>
 8008568:	89ab      	ldrh	r3, [r5, #12]
 800856a:	065b      	lsls	r3, r3, #25
 800856c:	f53f af12 	bmi.w	8008394 <_vfiprintf_r+0x4c>
 8008570:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008572:	e711      	b.n	8008398 <_vfiprintf_r+0x50>
 8008574:	ab03      	add	r3, sp, #12
 8008576:	9300      	str	r3, [sp, #0]
 8008578:	462a      	mov	r2, r5
 800857a:	4630      	mov	r0, r6
 800857c:	4b08      	ldr	r3, [pc, #32]	; (80085a0 <_vfiprintf_r+0x258>)
 800857e:	a904      	add	r1, sp, #16
 8008580:	f7fc fb24 	bl	8004bcc <_printf_i>
 8008584:	e7e4      	b.n	8008550 <_vfiprintf_r+0x208>
 8008586:	bf00      	nop
 8008588:	08009fa4 	.word	0x08009fa4
 800858c:	08009fc4 	.word	0x08009fc4
 8008590:	08009f84 	.word	0x08009f84
 8008594:	08009f34 	.word	0x08009f34
 8008598:	08009f3e 	.word	0x08009f3e
 800859c:	08004695 	.word	0x08004695
 80085a0:	08008323 	.word	0x08008323
 80085a4:	08009f3a 	.word	0x08009f3a

080085a8 <__swbuf_r>:
 80085a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085aa:	460e      	mov	r6, r1
 80085ac:	4614      	mov	r4, r2
 80085ae:	4605      	mov	r5, r0
 80085b0:	b118      	cbz	r0, 80085ba <__swbuf_r+0x12>
 80085b2:	6983      	ldr	r3, [r0, #24]
 80085b4:	b90b      	cbnz	r3, 80085ba <__swbuf_r+0x12>
 80085b6:	f000 f9d9 	bl	800896c <__sinit>
 80085ba:	4b21      	ldr	r3, [pc, #132]	; (8008640 <__swbuf_r+0x98>)
 80085bc:	429c      	cmp	r4, r3
 80085be:	d12b      	bne.n	8008618 <__swbuf_r+0x70>
 80085c0:	686c      	ldr	r4, [r5, #4]
 80085c2:	69a3      	ldr	r3, [r4, #24]
 80085c4:	60a3      	str	r3, [r4, #8]
 80085c6:	89a3      	ldrh	r3, [r4, #12]
 80085c8:	071a      	lsls	r2, r3, #28
 80085ca:	d52f      	bpl.n	800862c <__swbuf_r+0x84>
 80085cc:	6923      	ldr	r3, [r4, #16]
 80085ce:	b36b      	cbz	r3, 800862c <__swbuf_r+0x84>
 80085d0:	6923      	ldr	r3, [r4, #16]
 80085d2:	6820      	ldr	r0, [r4, #0]
 80085d4:	b2f6      	uxtb	r6, r6
 80085d6:	1ac0      	subs	r0, r0, r3
 80085d8:	6963      	ldr	r3, [r4, #20]
 80085da:	4637      	mov	r7, r6
 80085dc:	4283      	cmp	r3, r0
 80085de:	dc04      	bgt.n	80085ea <__swbuf_r+0x42>
 80085e0:	4621      	mov	r1, r4
 80085e2:	4628      	mov	r0, r5
 80085e4:	f000 f92e 	bl	8008844 <_fflush_r>
 80085e8:	bb30      	cbnz	r0, 8008638 <__swbuf_r+0x90>
 80085ea:	68a3      	ldr	r3, [r4, #8]
 80085ec:	3001      	adds	r0, #1
 80085ee:	3b01      	subs	r3, #1
 80085f0:	60a3      	str	r3, [r4, #8]
 80085f2:	6823      	ldr	r3, [r4, #0]
 80085f4:	1c5a      	adds	r2, r3, #1
 80085f6:	6022      	str	r2, [r4, #0]
 80085f8:	701e      	strb	r6, [r3, #0]
 80085fa:	6963      	ldr	r3, [r4, #20]
 80085fc:	4283      	cmp	r3, r0
 80085fe:	d004      	beq.n	800860a <__swbuf_r+0x62>
 8008600:	89a3      	ldrh	r3, [r4, #12]
 8008602:	07db      	lsls	r3, r3, #31
 8008604:	d506      	bpl.n	8008614 <__swbuf_r+0x6c>
 8008606:	2e0a      	cmp	r6, #10
 8008608:	d104      	bne.n	8008614 <__swbuf_r+0x6c>
 800860a:	4621      	mov	r1, r4
 800860c:	4628      	mov	r0, r5
 800860e:	f000 f919 	bl	8008844 <_fflush_r>
 8008612:	b988      	cbnz	r0, 8008638 <__swbuf_r+0x90>
 8008614:	4638      	mov	r0, r7
 8008616:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008618:	4b0a      	ldr	r3, [pc, #40]	; (8008644 <__swbuf_r+0x9c>)
 800861a:	429c      	cmp	r4, r3
 800861c:	d101      	bne.n	8008622 <__swbuf_r+0x7a>
 800861e:	68ac      	ldr	r4, [r5, #8]
 8008620:	e7cf      	b.n	80085c2 <__swbuf_r+0x1a>
 8008622:	4b09      	ldr	r3, [pc, #36]	; (8008648 <__swbuf_r+0xa0>)
 8008624:	429c      	cmp	r4, r3
 8008626:	bf08      	it	eq
 8008628:	68ec      	ldreq	r4, [r5, #12]
 800862a:	e7ca      	b.n	80085c2 <__swbuf_r+0x1a>
 800862c:	4621      	mov	r1, r4
 800862e:	4628      	mov	r0, r5
 8008630:	f000 f80c 	bl	800864c <__swsetup_r>
 8008634:	2800      	cmp	r0, #0
 8008636:	d0cb      	beq.n	80085d0 <__swbuf_r+0x28>
 8008638:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800863c:	e7ea      	b.n	8008614 <__swbuf_r+0x6c>
 800863e:	bf00      	nop
 8008640:	08009fa4 	.word	0x08009fa4
 8008644:	08009fc4 	.word	0x08009fc4
 8008648:	08009f84 	.word	0x08009f84

0800864c <__swsetup_r>:
 800864c:	4b32      	ldr	r3, [pc, #200]	; (8008718 <__swsetup_r+0xcc>)
 800864e:	b570      	push	{r4, r5, r6, lr}
 8008650:	681d      	ldr	r5, [r3, #0]
 8008652:	4606      	mov	r6, r0
 8008654:	460c      	mov	r4, r1
 8008656:	b125      	cbz	r5, 8008662 <__swsetup_r+0x16>
 8008658:	69ab      	ldr	r3, [r5, #24]
 800865a:	b913      	cbnz	r3, 8008662 <__swsetup_r+0x16>
 800865c:	4628      	mov	r0, r5
 800865e:	f000 f985 	bl	800896c <__sinit>
 8008662:	4b2e      	ldr	r3, [pc, #184]	; (800871c <__swsetup_r+0xd0>)
 8008664:	429c      	cmp	r4, r3
 8008666:	d10f      	bne.n	8008688 <__swsetup_r+0x3c>
 8008668:	686c      	ldr	r4, [r5, #4]
 800866a:	89a3      	ldrh	r3, [r4, #12]
 800866c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008670:	0719      	lsls	r1, r3, #28
 8008672:	d42c      	bmi.n	80086ce <__swsetup_r+0x82>
 8008674:	06dd      	lsls	r5, r3, #27
 8008676:	d411      	bmi.n	800869c <__swsetup_r+0x50>
 8008678:	2309      	movs	r3, #9
 800867a:	6033      	str	r3, [r6, #0]
 800867c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008680:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008684:	81a3      	strh	r3, [r4, #12]
 8008686:	e03e      	b.n	8008706 <__swsetup_r+0xba>
 8008688:	4b25      	ldr	r3, [pc, #148]	; (8008720 <__swsetup_r+0xd4>)
 800868a:	429c      	cmp	r4, r3
 800868c:	d101      	bne.n	8008692 <__swsetup_r+0x46>
 800868e:	68ac      	ldr	r4, [r5, #8]
 8008690:	e7eb      	b.n	800866a <__swsetup_r+0x1e>
 8008692:	4b24      	ldr	r3, [pc, #144]	; (8008724 <__swsetup_r+0xd8>)
 8008694:	429c      	cmp	r4, r3
 8008696:	bf08      	it	eq
 8008698:	68ec      	ldreq	r4, [r5, #12]
 800869a:	e7e6      	b.n	800866a <__swsetup_r+0x1e>
 800869c:	0758      	lsls	r0, r3, #29
 800869e:	d512      	bpl.n	80086c6 <__swsetup_r+0x7a>
 80086a0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80086a2:	b141      	cbz	r1, 80086b6 <__swsetup_r+0x6a>
 80086a4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80086a8:	4299      	cmp	r1, r3
 80086aa:	d002      	beq.n	80086b2 <__swsetup_r+0x66>
 80086ac:	4630      	mov	r0, r6
 80086ae:	f7ff fb6f 	bl	8007d90 <_free_r>
 80086b2:	2300      	movs	r3, #0
 80086b4:	6363      	str	r3, [r4, #52]	; 0x34
 80086b6:	89a3      	ldrh	r3, [r4, #12]
 80086b8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80086bc:	81a3      	strh	r3, [r4, #12]
 80086be:	2300      	movs	r3, #0
 80086c0:	6063      	str	r3, [r4, #4]
 80086c2:	6923      	ldr	r3, [r4, #16]
 80086c4:	6023      	str	r3, [r4, #0]
 80086c6:	89a3      	ldrh	r3, [r4, #12]
 80086c8:	f043 0308 	orr.w	r3, r3, #8
 80086cc:	81a3      	strh	r3, [r4, #12]
 80086ce:	6923      	ldr	r3, [r4, #16]
 80086d0:	b94b      	cbnz	r3, 80086e6 <__swsetup_r+0x9a>
 80086d2:	89a3      	ldrh	r3, [r4, #12]
 80086d4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80086d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80086dc:	d003      	beq.n	80086e6 <__swsetup_r+0x9a>
 80086de:	4621      	mov	r1, r4
 80086e0:	4630      	mov	r0, r6
 80086e2:	f000 fa07 	bl	8008af4 <__smakebuf_r>
 80086e6:	89a0      	ldrh	r0, [r4, #12]
 80086e8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80086ec:	f010 0301 	ands.w	r3, r0, #1
 80086f0:	d00a      	beq.n	8008708 <__swsetup_r+0xbc>
 80086f2:	2300      	movs	r3, #0
 80086f4:	60a3      	str	r3, [r4, #8]
 80086f6:	6963      	ldr	r3, [r4, #20]
 80086f8:	425b      	negs	r3, r3
 80086fa:	61a3      	str	r3, [r4, #24]
 80086fc:	6923      	ldr	r3, [r4, #16]
 80086fe:	b943      	cbnz	r3, 8008712 <__swsetup_r+0xc6>
 8008700:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008704:	d1ba      	bne.n	800867c <__swsetup_r+0x30>
 8008706:	bd70      	pop	{r4, r5, r6, pc}
 8008708:	0781      	lsls	r1, r0, #30
 800870a:	bf58      	it	pl
 800870c:	6963      	ldrpl	r3, [r4, #20]
 800870e:	60a3      	str	r3, [r4, #8]
 8008710:	e7f4      	b.n	80086fc <__swsetup_r+0xb0>
 8008712:	2000      	movs	r0, #0
 8008714:	e7f7      	b.n	8008706 <__swsetup_r+0xba>
 8008716:	bf00      	nop
 8008718:	20000014 	.word	0x20000014
 800871c:	08009fa4 	.word	0x08009fa4
 8008720:	08009fc4 	.word	0x08009fc4
 8008724:	08009f84 	.word	0x08009f84

08008728 <abort>:
 8008728:	2006      	movs	r0, #6
 800872a:	b508      	push	{r3, lr}
 800872c:	f000 fa52 	bl	8008bd4 <raise>
 8008730:	2001      	movs	r0, #1
 8008732:	f7f9 fab6 	bl	8001ca2 <_exit>
	...

08008738 <__sflush_r>:
 8008738:	898a      	ldrh	r2, [r1, #12]
 800873a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800873e:	4605      	mov	r5, r0
 8008740:	0710      	lsls	r0, r2, #28
 8008742:	460c      	mov	r4, r1
 8008744:	d458      	bmi.n	80087f8 <__sflush_r+0xc0>
 8008746:	684b      	ldr	r3, [r1, #4]
 8008748:	2b00      	cmp	r3, #0
 800874a:	dc05      	bgt.n	8008758 <__sflush_r+0x20>
 800874c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800874e:	2b00      	cmp	r3, #0
 8008750:	dc02      	bgt.n	8008758 <__sflush_r+0x20>
 8008752:	2000      	movs	r0, #0
 8008754:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008758:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800875a:	2e00      	cmp	r6, #0
 800875c:	d0f9      	beq.n	8008752 <__sflush_r+0x1a>
 800875e:	2300      	movs	r3, #0
 8008760:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008764:	682f      	ldr	r7, [r5, #0]
 8008766:	602b      	str	r3, [r5, #0]
 8008768:	d032      	beq.n	80087d0 <__sflush_r+0x98>
 800876a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800876c:	89a3      	ldrh	r3, [r4, #12]
 800876e:	075a      	lsls	r2, r3, #29
 8008770:	d505      	bpl.n	800877e <__sflush_r+0x46>
 8008772:	6863      	ldr	r3, [r4, #4]
 8008774:	1ac0      	subs	r0, r0, r3
 8008776:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008778:	b10b      	cbz	r3, 800877e <__sflush_r+0x46>
 800877a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800877c:	1ac0      	subs	r0, r0, r3
 800877e:	2300      	movs	r3, #0
 8008780:	4602      	mov	r2, r0
 8008782:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008784:	4628      	mov	r0, r5
 8008786:	6a21      	ldr	r1, [r4, #32]
 8008788:	47b0      	blx	r6
 800878a:	1c43      	adds	r3, r0, #1
 800878c:	89a3      	ldrh	r3, [r4, #12]
 800878e:	d106      	bne.n	800879e <__sflush_r+0x66>
 8008790:	6829      	ldr	r1, [r5, #0]
 8008792:	291d      	cmp	r1, #29
 8008794:	d82c      	bhi.n	80087f0 <__sflush_r+0xb8>
 8008796:	4a2a      	ldr	r2, [pc, #168]	; (8008840 <__sflush_r+0x108>)
 8008798:	40ca      	lsrs	r2, r1
 800879a:	07d6      	lsls	r6, r2, #31
 800879c:	d528      	bpl.n	80087f0 <__sflush_r+0xb8>
 800879e:	2200      	movs	r2, #0
 80087a0:	6062      	str	r2, [r4, #4]
 80087a2:	6922      	ldr	r2, [r4, #16]
 80087a4:	04d9      	lsls	r1, r3, #19
 80087a6:	6022      	str	r2, [r4, #0]
 80087a8:	d504      	bpl.n	80087b4 <__sflush_r+0x7c>
 80087aa:	1c42      	adds	r2, r0, #1
 80087ac:	d101      	bne.n	80087b2 <__sflush_r+0x7a>
 80087ae:	682b      	ldr	r3, [r5, #0]
 80087b0:	b903      	cbnz	r3, 80087b4 <__sflush_r+0x7c>
 80087b2:	6560      	str	r0, [r4, #84]	; 0x54
 80087b4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80087b6:	602f      	str	r7, [r5, #0]
 80087b8:	2900      	cmp	r1, #0
 80087ba:	d0ca      	beq.n	8008752 <__sflush_r+0x1a>
 80087bc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80087c0:	4299      	cmp	r1, r3
 80087c2:	d002      	beq.n	80087ca <__sflush_r+0x92>
 80087c4:	4628      	mov	r0, r5
 80087c6:	f7ff fae3 	bl	8007d90 <_free_r>
 80087ca:	2000      	movs	r0, #0
 80087cc:	6360      	str	r0, [r4, #52]	; 0x34
 80087ce:	e7c1      	b.n	8008754 <__sflush_r+0x1c>
 80087d0:	6a21      	ldr	r1, [r4, #32]
 80087d2:	2301      	movs	r3, #1
 80087d4:	4628      	mov	r0, r5
 80087d6:	47b0      	blx	r6
 80087d8:	1c41      	adds	r1, r0, #1
 80087da:	d1c7      	bne.n	800876c <__sflush_r+0x34>
 80087dc:	682b      	ldr	r3, [r5, #0]
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d0c4      	beq.n	800876c <__sflush_r+0x34>
 80087e2:	2b1d      	cmp	r3, #29
 80087e4:	d001      	beq.n	80087ea <__sflush_r+0xb2>
 80087e6:	2b16      	cmp	r3, #22
 80087e8:	d101      	bne.n	80087ee <__sflush_r+0xb6>
 80087ea:	602f      	str	r7, [r5, #0]
 80087ec:	e7b1      	b.n	8008752 <__sflush_r+0x1a>
 80087ee:	89a3      	ldrh	r3, [r4, #12]
 80087f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80087f4:	81a3      	strh	r3, [r4, #12]
 80087f6:	e7ad      	b.n	8008754 <__sflush_r+0x1c>
 80087f8:	690f      	ldr	r7, [r1, #16]
 80087fa:	2f00      	cmp	r7, #0
 80087fc:	d0a9      	beq.n	8008752 <__sflush_r+0x1a>
 80087fe:	0793      	lsls	r3, r2, #30
 8008800:	bf18      	it	ne
 8008802:	2300      	movne	r3, #0
 8008804:	680e      	ldr	r6, [r1, #0]
 8008806:	bf08      	it	eq
 8008808:	694b      	ldreq	r3, [r1, #20]
 800880a:	eba6 0807 	sub.w	r8, r6, r7
 800880e:	600f      	str	r7, [r1, #0]
 8008810:	608b      	str	r3, [r1, #8]
 8008812:	f1b8 0f00 	cmp.w	r8, #0
 8008816:	dd9c      	ble.n	8008752 <__sflush_r+0x1a>
 8008818:	4643      	mov	r3, r8
 800881a:	463a      	mov	r2, r7
 800881c:	4628      	mov	r0, r5
 800881e:	6a21      	ldr	r1, [r4, #32]
 8008820:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008822:	47b0      	blx	r6
 8008824:	2800      	cmp	r0, #0
 8008826:	dc06      	bgt.n	8008836 <__sflush_r+0xfe>
 8008828:	89a3      	ldrh	r3, [r4, #12]
 800882a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800882e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008832:	81a3      	strh	r3, [r4, #12]
 8008834:	e78e      	b.n	8008754 <__sflush_r+0x1c>
 8008836:	4407      	add	r7, r0
 8008838:	eba8 0800 	sub.w	r8, r8, r0
 800883c:	e7e9      	b.n	8008812 <__sflush_r+0xda>
 800883e:	bf00      	nop
 8008840:	20400001 	.word	0x20400001

08008844 <_fflush_r>:
 8008844:	b538      	push	{r3, r4, r5, lr}
 8008846:	690b      	ldr	r3, [r1, #16]
 8008848:	4605      	mov	r5, r0
 800884a:	460c      	mov	r4, r1
 800884c:	b913      	cbnz	r3, 8008854 <_fflush_r+0x10>
 800884e:	2500      	movs	r5, #0
 8008850:	4628      	mov	r0, r5
 8008852:	bd38      	pop	{r3, r4, r5, pc}
 8008854:	b118      	cbz	r0, 800885e <_fflush_r+0x1a>
 8008856:	6983      	ldr	r3, [r0, #24]
 8008858:	b90b      	cbnz	r3, 800885e <_fflush_r+0x1a>
 800885a:	f000 f887 	bl	800896c <__sinit>
 800885e:	4b14      	ldr	r3, [pc, #80]	; (80088b0 <_fflush_r+0x6c>)
 8008860:	429c      	cmp	r4, r3
 8008862:	d11b      	bne.n	800889c <_fflush_r+0x58>
 8008864:	686c      	ldr	r4, [r5, #4]
 8008866:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800886a:	2b00      	cmp	r3, #0
 800886c:	d0ef      	beq.n	800884e <_fflush_r+0xa>
 800886e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008870:	07d0      	lsls	r0, r2, #31
 8008872:	d404      	bmi.n	800887e <_fflush_r+0x3a>
 8008874:	0599      	lsls	r1, r3, #22
 8008876:	d402      	bmi.n	800887e <_fflush_r+0x3a>
 8008878:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800887a:	f000 f915 	bl	8008aa8 <__retarget_lock_acquire_recursive>
 800887e:	4628      	mov	r0, r5
 8008880:	4621      	mov	r1, r4
 8008882:	f7ff ff59 	bl	8008738 <__sflush_r>
 8008886:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008888:	4605      	mov	r5, r0
 800888a:	07da      	lsls	r2, r3, #31
 800888c:	d4e0      	bmi.n	8008850 <_fflush_r+0xc>
 800888e:	89a3      	ldrh	r3, [r4, #12]
 8008890:	059b      	lsls	r3, r3, #22
 8008892:	d4dd      	bmi.n	8008850 <_fflush_r+0xc>
 8008894:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008896:	f000 f908 	bl	8008aaa <__retarget_lock_release_recursive>
 800889a:	e7d9      	b.n	8008850 <_fflush_r+0xc>
 800889c:	4b05      	ldr	r3, [pc, #20]	; (80088b4 <_fflush_r+0x70>)
 800889e:	429c      	cmp	r4, r3
 80088a0:	d101      	bne.n	80088a6 <_fflush_r+0x62>
 80088a2:	68ac      	ldr	r4, [r5, #8]
 80088a4:	e7df      	b.n	8008866 <_fflush_r+0x22>
 80088a6:	4b04      	ldr	r3, [pc, #16]	; (80088b8 <_fflush_r+0x74>)
 80088a8:	429c      	cmp	r4, r3
 80088aa:	bf08      	it	eq
 80088ac:	68ec      	ldreq	r4, [r5, #12]
 80088ae:	e7da      	b.n	8008866 <_fflush_r+0x22>
 80088b0:	08009fa4 	.word	0x08009fa4
 80088b4:	08009fc4 	.word	0x08009fc4
 80088b8:	08009f84 	.word	0x08009f84

080088bc <std>:
 80088bc:	2300      	movs	r3, #0
 80088be:	b510      	push	{r4, lr}
 80088c0:	4604      	mov	r4, r0
 80088c2:	e9c0 3300 	strd	r3, r3, [r0]
 80088c6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80088ca:	6083      	str	r3, [r0, #8]
 80088cc:	8181      	strh	r1, [r0, #12]
 80088ce:	6643      	str	r3, [r0, #100]	; 0x64
 80088d0:	81c2      	strh	r2, [r0, #14]
 80088d2:	6183      	str	r3, [r0, #24]
 80088d4:	4619      	mov	r1, r3
 80088d6:	2208      	movs	r2, #8
 80088d8:	305c      	adds	r0, #92	; 0x5c
 80088da:	f7fb fe35 	bl	8004548 <memset>
 80088de:	4b05      	ldr	r3, [pc, #20]	; (80088f4 <std+0x38>)
 80088e0:	6224      	str	r4, [r4, #32]
 80088e2:	6263      	str	r3, [r4, #36]	; 0x24
 80088e4:	4b04      	ldr	r3, [pc, #16]	; (80088f8 <std+0x3c>)
 80088e6:	62a3      	str	r3, [r4, #40]	; 0x28
 80088e8:	4b04      	ldr	r3, [pc, #16]	; (80088fc <std+0x40>)
 80088ea:	62e3      	str	r3, [r4, #44]	; 0x2c
 80088ec:	4b04      	ldr	r3, [pc, #16]	; (8008900 <std+0x44>)
 80088ee:	6323      	str	r3, [r4, #48]	; 0x30
 80088f0:	bd10      	pop	{r4, pc}
 80088f2:	bf00      	nop
 80088f4:	08008c0d 	.word	0x08008c0d
 80088f8:	08008c2f 	.word	0x08008c2f
 80088fc:	08008c67 	.word	0x08008c67
 8008900:	08008c8b 	.word	0x08008c8b

08008904 <_cleanup_r>:
 8008904:	4901      	ldr	r1, [pc, #4]	; (800890c <_cleanup_r+0x8>)
 8008906:	f000 b8af 	b.w	8008a68 <_fwalk_reent>
 800890a:	bf00      	nop
 800890c:	08008845 	.word	0x08008845

08008910 <__sfmoreglue>:
 8008910:	b570      	push	{r4, r5, r6, lr}
 8008912:	2568      	movs	r5, #104	; 0x68
 8008914:	1e4a      	subs	r2, r1, #1
 8008916:	4355      	muls	r5, r2
 8008918:	460e      	mov	r6, r1
 800891a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800891e:	f7ff fa83 	bl	8007e28 <_malloc_r>
 8008922:	4604      	mov	r4, r0
 8008924:	b140      	cbz	r0, 8008938 <__sfmoreglue+0x28>
 8008926:	2100      	movs	r1, #0
 8008928:	e9c0 1600 	strd	r1, r6, [r0]
 800892c:	300c      	adds	r0, #12
 800892e:	60a0      	str	r0, [r4, #8]
 8008930:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008934:	f7fb fe08 	bl	8004548 <memset>
 8008938:	4620      	mov	r0, r4
 800893a:	bd70      	pop	{r4, r5, r6, pc}

0800893c <__sfp_lock_acquire>:
 800893c:	4801      	ldr	r0, [pc, #4]	; (8008944 <__sfp_lock_acquire+0x8>)
 800893e:	f000 b8b3 	b.w	8008aa8 <__retarget_lock_acquire_recursive>
 8008942:	bf00      	nop
 8008944:	20000744 	.word	0x20000744

08008948 <__sfp_lock_release>:
 8008948:	4801      	ldr	r0, [pc, #4]	; (8008950 <__sfp_lock_release+0x8>)
 800894a:	f000 b8ae 	b.w	8008aaa <__retarget_lock_release_recursive>
 800894e:	bf00      	nop
 8008950:	20000744 	.word	0x20000744

08008954 <__sinit_lock_acquire>:
 8008954:	4801      	ldr	r0, [pc, #4]	; (800895c <__sinit_lock_acquire+0x8>)
 8008956:	f000 b8a7 	b.w	8008aa8 <__retarget_lock_acquire_recursive>
 800895a:	bf00      	nop
 800895c:	2000073f 	.word	0x2000073f

08008960 <__sinit_lock_release>:
 8008960:	4801      	ldr	r0, [pc, #4]	; (8008968 <__sinit_lock_release+0x8>)
 8008962:	f000 b8a2 	b.w	8008aaa <__retarget_lock_release_recursive>
 8008966:	bf00      	nop
 8008968:	2000073f 	.word	0x2000073f

0800896c <__sinit>:
 800896c:	b510      	push	{r4, lr}
 800896e:	4604      	mov	r4, r0
 8008970:	f7ff fff0 	bl	8008954 <__sinit_lock_acquire>
 8008974:	69a3      	ldr	r3, [r4, #24]
 8008976:	b11b      	cbz	r3, 8008980 <__sinit+0x14>
 8008978:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800897c:	f7ff bff0 	b.w	8008960 <__sinit_lock_release>
 8008980:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008984:	6523      	str	r3, [r4, #80]	; 0x50
 8008986:	4b13      	ldr	r3, [pc, #76]	; (80089d4 <__sinit+0x68>)
 8008988:	4a13      	ldr	r2, [pc, #76]	; (80089d8 <__sinit+0x6c>)
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	62a2      	str	r2, [r4, #40]	; 0x28
 800898e:	42a3      	cmp	r3, r4
 8008990:	bf08      	it	eq
 8008992:	2301      	moveq	r3, #1
 8008994:	4620      	mov	r0, r4
 8008996:	bf08      	it	eq
 8008998:	61a3      	streq	r3, [r4, #24]
 800899a:	f000 f81f 	bl	80089dc <__sfp>
 800899e:	6060      	str	r0, [r4, #4]
 80089a0:	4620      	mov	r0, r4
 80089a2:	f000 f81b 	bl	80089dc <__sfp>
 80089a6:	60a0      	str	r0, [r4, #8]
 80089a8:	4620      	mov	r0, r4
 80089aa:	f000 f817 	bl	80089dc <__sfp>
 80089ae:	2200      	movs	r2, #0
 80089b0:	2104      	movs	r1, #4
 80089b2:	60e0      	str	r0, [r4, #12]
 80089b4:	6860      	ldr	r0, [r4, #4]
 80089b6:	f7ff ff81 	bl	80088bc <std>
 80089ba:	2201      	movs	r2, #1
 80089bc:	2109      	movs	r1, #9
 80089be:	68a0      	ldr	r0, [r4, #8]
 80089c0:	f7ff ff7c 	bl	80088bc <std>
 80089c4:	2202      	movs	r2, #2
 80089c6:	2112      	movs	r1, #18
 80089c8:	68e0      	ldr	r0, [r4, #12]
 80089ca:	f7ff ff77 	bl	80088bc <std>
 80089ce:	2301      	movs	r3, #1
 80089d0:	61a3      	str	r3, [r4, #24]
 80089d2:	e7d1      	b.n	8008978 <__sinit+0xc>
 80089d4:	08009b30 	.word	0x08009b30
 80089d8:	08008905 	.word	0x08008905

080089dc <__sfp>:
 80089dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089de:	4607      	mov	r7, r0
 80089e0:	f7ff ffac 	bl	800893c <__sfp_lock_acquire>
 80089e4:	4b1e      	ldr	r3, [pc, #120]	; (8008a60 <__sfp+0x84>)
 80089e6:	681e      	ldr	r6, [r3, #0]
 80089e8:	69b3      	ldr	r3, [r6, #24]
 80089ea:	b913      	cbnz	r3, 80089f2 <__sfp+0x16>
 80089ec:	4630      	mov	r0, r6
 80089ee:	f7ff ffbd 	bl	800896c <__sinit>
 80089f2:	3648      	adds	r6, #72	; 0x48
 80089f4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80089f8:	3b01      	subs	r3, #1
 80089fa:	d503      	bpl.n	8008a04 <__sfp+0x28>
 80089fc:	6833      	ldr	r3, [r6, #0]
 80089fe:	b30b      	cbz	r3, 8008a44 <__sfp+0x68>
 8008a00:	6836      	ldr	r6, [r6, #0]
 8008a02:	e7f7      	b.n	80089f4 <__sfp+0x18>
 8008a04:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008a08:	b9d5      	cbnz	r5, 8008a40 <__sfp+0x64>
 8008a0a:	4b16      	ldr	r3, [pc, #88]	; (8008a64 <__sfp+0x88>)
 8008a0c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008a10:	60e3      	str	r3, [r4, #12]
 8008a12:	6665      	str	r5, [r4, #100]	; 0x64
 8008a14:	f000 f847 	bl	8008aa6 <__retarget_lock_init_recursive>
 8008a18:	f7ff ff96 	bl	8008948 <__sfp_lock_release>
 8008a1c:	2208      	movs	r2, #8
 8008a1e:	4629      	mov	r1, r5
 8008a20:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008a24:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008a28:	6025      	str	r5, [r4, #0]
 8008a2a:	61a5      	str	r5, [r4, #24]
 8008a2c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008a30:	f7fb fd8a 	bl	8004548 <memset>
 8008a34:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008a38:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008a3c:	4620      	mov	r0, r4
 8008a3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008a40:	3468      	adds	r4, #104	; 0x68
 8008a42:	e7d9      	b.n	80089f8 <__sfp+0x1c>
 8008a44:	2104      	movs	r1, #4
 8008a46:	4638      	mov	r0, r7
 8008a48:	f7ff ff62 	bl	8008910 <__sfmoreglue>
 8008a4c:	4604      	mov	r4, r0
 8008a4e:	6030      	str	r0, [r6, #0]
 8008a50:	2800      	cmp	r0, #0
 8008a52:	d1d5      	bne.n	8008a00 <__sfp+0x24>
 8008a54:	f7ff ff78 	bl	8008948 <__sfp_lock_release>
 8008a58:	230c      	movs	r3, #12
 8008a5a:	603b      	str	r3, [r7, #0]
 8008a5c:	e7ee      	b.n	8008a3c <__sfp+0x60>
 8008a5e:	bf00      	nop
 8008a60:	08009b30 	.word	0x08009b30
 8008a64:	ffff0001 	.word	0xffff0001

08008a68 <_fwalk_reent>:
 8008a68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008a6c:	4606      	mov	r6, r0
 8008a6e:	4688      	mov	r8, r1
 8008a70:	2700      	movs	r7, #0
 8008a72:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008a76:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008a7a:	f1b9 0901 	subs.w	r9, r9, #1
 8008a7e:	d505      	bpl.n	8008a8c <_fwalk_reent+0x24>
 8008a80:	6824      	ldr	r4, [r4, #0]
 8008a82:	2c00      	cmp	r4, #0
 8008a84:	d1f7      	bne.n	8008a76 <_fwalk_reent+0xe>
 8008a86:	4638      	mov	r0, r7
 8008a88:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008a8c:	89ab      	ldrh	r3, [r5, #12]
 8008a8e:	2b01      	cmp	r3, #1
 8008a90:	d907      	bls.n	8008aa2 <_fwalk_reent+0x3a>
 8008a92:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008a96:	3301      	adds	r3, #1
 8008a98:	d003      	beq.n	8008aa2 <_fwalk_reent+0x3a>
 8008a9a:	4629      	mov	r1, r5
 8008a9c:	4630      	mov	r0, r6
 8008a9e:	47c0      	blx	r8
 8008aa0:	4307      	orrs	r7, r0
 8008aa2:	3568      	adds	r5, #104	; 0x68
 8008aa4:	e7e9      	b.n	8008a7a <_fwalk_reent+0x12>

08008aa6 <__retarget_lock_init_recursive>:
 8008aa6:	4770      	bx	lr

08008aa8 <__retarget_lock_acquire_recursive>:
 8008aa8:	4770      	bx	lr

08008aaa <__retarget_lock_release_recursive>:
 8008aaa:	4770      	bx	lr

08008aac <__swhatbuf_r>:
 8008aac:	b570      	push	{r4, r5, r6, lr}
 8008aae:	460e      	mov	r6, r1
 8008ab0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ab4:	4614      	mov	r4, r2
 8008ab6:	2900      	cmp	r1, #0
 8008ab8:	461d      	mov	r5, r3
 8008aba:	b096      	sub	sp, #88	; 0x58
 8008abc:	da07      	bge.n	8008ace <__swhatbuf_r+0x22>
 8008abe:	2300      	movs	r3, #0
 8008ac0:	602b      	str	r3, [r5, #0]
 8008ac2:	89b3      	ldrh	r3, [r6, #12]
 8008ac4:	061a      	lsls	r2, r3, #24
 8008ac6:	d410      	bmi.n	8008aea <__swhatbuf_r+0x3e>
 8008ac8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008acc:	e00e      	b.n	8008aec <__swhatbuf_r+0x40>
 8008ace:	466a      	mov	r2, sp
 8008ad0:	f000 f902 	bl	8008cd8 <_fstat_r>
 8008ad4:	2800      	cmp	r0, #0
 8008ad6:	dbf2      	blt.n	8008abe <__swhatbuf_r+0x12>
 8008ad8:	9a01      	ldr	r2, [sp, #4]
 8008ada:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008ade:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008ae2:	425a      	negs	r2, r3
 8008ae4:	415a      	adcs	r2, r3
 8008ae6:	602a      	str	r2, [r5, #0]
 8008ae8:	e7ee      	b.n	8008ac8 <__swhatbuf_r+0x1c>
 8008aea:	2340      	movs	r3, #64	; 0x40
 8008aec:	2000      	movs	r0, #0
 8008aee:	6023      	str	r3, [r4, #0]
 8008af0:	b016      	add	sp, #88	; 0x58
 8008af2:	bd70      	pop	{r4, r5, r6, pc}

08008af4 <__smakebuf_r>:
 8008af4:	898b      	ldrh	r3, [r1, #12]
 8008af6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008af8:	079d      	lsls	r5, r3, #30
 8008afa:	4606      	mov	r6, r0
 8008afc:	460c      	mov	r4, r1
 8008afe:	d507      	bpl.n	8008b10 <__smakebuf_r+0x1c>
 8008b00:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008b04:	6023      	str	r3, [r4, #0]
 8008b06:	6123      	str	r3, [r4, #16]
 8008b08:	2301      	movs	r3, #1
 8008b0a:	6163      	str	r3, [r4, #20]
 8008b0c:	b002      	add	sp, #8
 8008b0e:	bd70      	pop	{r4, r5, r6, pc}
 8008b10:	466a      	mov	r2, sp
 8008b12:	ab01      	add	r3, sp, #4
 8008b14:	f7ff ffca 	bl	8008aac <__swhatbuf_r>
 8008b18:	9900      	ldr	r1, [sp, #0]
 8008b1a:	4605      	mov	r5, r0
 8008b1c:	4630      	mov	r0, r6
 8008b1e:	f7ff f983 	bl	8007e28 <_malloc_r>
 8008b22:	b948      	cbnz	r0, 8008b38 <__smakebuf_r+0x44>
 8008b24:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008b28:	059a      	lsls	r2, r3, #22
 8008b2a:	d4ef      	bmi.n	8008b0c <__smakebuf_r+0x18>
 8008b2c:	f023 0303 	bic.w	r3, r3, #3
 8008b30:	f043 0302 	orr.w	r3, r3, #2
 8008b34:	81a3      	strh	r3, [r4, #12]
 8008b36:	e7e3      	b.n	8008b00 <__smakebuf_r+0xc>
 8008b38:	4b0d      	ldr	r3, [pc, #52]	; (8008b70 <__smakebuf_r+0x7c>)
 8008b3a:	62b3      	str	r3, [r6, #40]	; 0x28
 8008b3c:	89a3      	ldrh	r3, [r4, #12]
 8008b3e:	6020      	str	r0, [r4, #0]
 8008b40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008b44:	81a3      	strh	r3, [r4, #12]
 8008b46:	9b00      	ldr	r3, [sp, #0]
 8008b48:	6120      	str	r0, [r4, #16]
 8008b4a:	6163      	str	r3, [r4, #20]
 8008b4c:	9b01      	ldr	r3, [sp, #4]
 8008b4e:	b15b      	cbz	r3, 8008b68 <__smakebuf_r+0x74>
 8008b50:	4630      	mov	r0, r6
 8008b52:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008b56:	f000 f8d1 	bl	8008cfc <_isatty_r>
 8008b5a:	b128      	cbz	r0, 8008b68 <__smakebuf_r+0x74>
 8008b5c:	89a3      	ldrh	r3, [r4, #12]
 8008b5e:	f023 0303 	bic.w	r3, r3, #3
 8008b62:	f043 0301 	orr.w	r3, r3, #1
 8008b66:	81a3      	strh	r3, [r4, #12]
 8008b68:	89a0      	ldrh	r0, [r4, #12]
 8008b6a:	4305      	orrs	r5, r0
 8008b6c:	81a5      	strh	r5, [r4, #12]
 8008b6e:	e7cd      	b.n	8008b0c <__smakebuf_r+0x18>
 8008b70:	08008905 	.word	0x08008905

08008b74 <_malloc_usable_size_r>:
 8008b74:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008b78:	1f18      	subs	r0, r3, #4
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	bfbc      	itt	lt
 8008b7e:	580b      	ldrlt	r3, [r1, r0]
 8008b80:	18c0      	addlt	r0, r0, r3
 8008b82:	4770      	bx	lr

08008b84 <_raise_r>:
 8008b84:	291f      	cmp	r1, #31
 8008b86:	b538      	push	{r3, r4, r5, lr}
 8008b88:	4604      	mov	r4, r0
 8008b8a:	460d      	mov	r5, r1
 8008b8c:	d904      	bls.n	8008b98 <_raise_r+0x14>
 8008b8e:	2316      	movs	r3, #22
 8008b90:	6003      	str	r3, [r0, #0]
 8008b92:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008b96:	bd38      	pop	{r3, r4, r5, pc}
 8008b98:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008b9a:	b112      	cbz	r2, 8008ba2 <_raise_r+0x1e>
 8008b9c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008ba0:	b94b      	cbnz	r3, 8008bb6 <_raise_r+0x32>
 8008ba2:	4620      	mov	r0, r4
 8008ba4:	f000 f830 	bl	8008c08 <_getpid_r>
 8008ba8:	462a      	mov	r2, r5
 8008baa:	4601      	mov	r1, r0
 8008bac:	4620      	mov	r0, r4
 8008bae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008bb2:	f000 b817 	b.w	8008be4 <_kill_r>
 8008bb6:	2b01      	cmp	r3, #1
 8008bb8:	d00a      	beq.n	8008bd0 <_raise_r+0x4c>
 8008bba:	1c59      	adds	r1, r3, #1
 8008bbc:	d103      	bne.n	8008bc6 <_raise_r+0x42>
 8008bbe:	2316      	movs	r3, #22
 8008bc0:	6003      	str	r3, [r0, #0]
 8008bc2:	2001      	movs	r0, #1
 8008bc4:	e7e7      	b.n	8008b96 <_raise_r+0x12>
 8008bc6:	2400      	movs	r4, #0
 8008bc8:	4628      	mov	r0, r5
 8008bca:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008bce:	4798      	blx	r3
 8008bd0:	2000      	movs	r0, #0
 8008bd2:	e7e0      	b.n	8008b96 <_raise_r+0x12>

08008bd4 <raise>:
 8008bd4:	4b02      	ldr	r3, [pc, #8]	; (8008be0 <raise+0xc>)
 8008bd6:	4601      	mov	r1, r0
 8008bd8:	6818      	ldr	r0, [r3, #0]
 8008bda:	f7ff bfd3 	b.w	8008b84 <_raise_r>
 8008bde:	bf00      	nop
 8008be0:	20000014 	.word	0x20000014

08008be4 <_kill_r>:
 8008be4:	b538      	push	{r3, r4, r5, lr}
 8008be6:	2300      	movs	r3, #0
 8008be8:	4d06      	ldr	r5, [pc, #24]	; (8008c04 <_kill_r+0x20>)
 8008bea:	4604      	mov	r4, r0
 8008bec:	4608      	mov	r0, r1
 8008bee:	4611      	mov	r1, r2
 8008bf0:	602b      	str	r3, [r5, #0]
 8008bf2:	f7f9 f846 	bl	8001c82 <_kill>
 8008bf6:	1c43      	adds	r3, r0, #1
 8008bf8:	d102      	bne.n	8008c00 <_kill_r+0x1c>
 8008bfa:	682b      	ldr	r3, [r5, #0]
 8008bfc:	b103      	cbz	r3, 8008c00 <_kill_r+0x1c>
 8008bfe:	6023      	str	r3, [r4, #0]
 8008c00:	bd38      	pop	{r3, r4, r5, pc}
 8008c02:	bf00      	nop
 8008c04:	20000738 	.word	0x20000738

08008c08 <_getpid_r>:
 8008c08:	f7f9 b834 	b.w	8001c74 <_getpid>

08008c0c <__sread>:
 8008c0c:	b510      	push	{r4, lr}
 8008c0e:	460c      	mov	r4, r1
 8008c10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c14:	f000 f894 	bl	8008d40 <_read_r>
 8008c18:	2800      	cmp	r0, #0
 8008c1a:	bfab      	itete	ge
 8008c1c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008c1e:	89a3      	ldrhlt	r3, [r4, #12]
 8008c20:	181b      	addge	r3, r3, r0
 8008c22:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008c26:	bfac      	ite	ge
 8008c28:	6563      	strge	r3, [r4, #84]	; 0x54
 8008c2a:	81a3      	strhlt	r3, [r4, #12]
 8008c2c:	bd10      	pop	{r4, pc}

08008c2e <__swrite>:
 8008c2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c32:	461f      	mov	r7, r3
 8008c34:	898b      	ldrh	r3, [r1, #12]
 8008c36:	4605      	mov	r5, r0
 8008c38:	05db      	lsls	r3, r3, #23
 8008c3a:	460c      	mov	r4, r1
 8008c3c:	4616      	mov	r6, r2
 8008c3e:	d505      	bpl.n	8008c4c <__swrite+0x1e>
 8008c40:	2302      	movs	r3, #2
 8008c42:	2200      	movs	r2, #0
 8008c44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c48:	f000 f868 	bl	8008d1c <_lseek_r>
 8008c4c:	89a3      	ldrh	r3, [r4, #12]
 8008c4e:	4632      	mov	r2, r6
 8008c50:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008c54:	81a3      	strh	r3, [r4, #12]
 8008c56:	4628      	mov	r0, r5
 8008c58:	463b      	mov	r3, r7
 8008c5a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008c5e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008c62:	f000 b817 	b.w	8008c94 <_write_r>

08008c66 <__sseek>:
 8008c66:	b510      	push	{r4, lr}
 8008c68:	460c      	mov	r4, r1
 8008c6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c6e:	f000 f855 	bl	8008d1c <_lseek_r>
 8008c72:	1c43      	adds	r3, r0, #1
 8008c74:	89a3      	ldrh	r3, [r4, #12]
 8008c76:	bf15      	itete	ne
 8008c78:	6560      	strne	r0, [r4, #84]	; 0x54
 8008c7a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008c7e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008c82:	81a3      	strheq	r3, [r4, #12]
 8008c84:	bf18      	it	ne
 8008c86:	81a3      	strhne	r3, [r4, #12]
 8008c88:	bd10      	pop	{r4, pc}

08008c8a <__sclose>:
 8008c8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c8e:	f000 b813 	b.w	8008cb8 <_close_r>
	...

08008c94 <_write_r>:
 8008c94:	b538      	push	{r3, r4, r5, lr}
 8008c96:	4604      	mov	r4, r0
 8008c98:	4608      	mov	r0, r1
 8008c9a:	4611      	mov	r1, r2
 8008c9c:	2200      	movs	r2, #0
 8008c9e:	4d05      	ldr	r5, [pc, #20]	; (8008cb4 <_write_r+0x20>)
 8008ca0:	602a      	str	r2, [r5, #0]
 8008ca2:	461a      	mov	r2, r3
 8008ca4:	f7f9 f824 	bl	8001cf0 <_write>
 8008ca8:	1c43      	adds	r3, r0, #1
 8008caa:	d102      	bne.n	8008cb2 <_write_r+0x1e>
 8008cac:	682b      	ldr	r3, [r5, #0]
 8008cae:	b103      	cbz	r3, 8008cb2 <_write_r+0x1e>
 8008cb0:	6023      	str	r3, [r4, #0]
 8008cb2:	bd38      	pop	{r3, r4, r5, pc}
 8008cb4:	20000738 	.word	0x20000738

08008cb8 <_close_r>:
 8008cb8:	b538      	push	{r3, r4, r5, lr}
 8008cba:	2300      	movs	r3, #0
 8008cbc:	4d05      	ldr	r5, [pc, #20]	; (8008cd4 <_close_r+0x1c>)
 8008cbe:	4604      	mov	r4, r0
 8008cc0:	4608      	mov	r0, r1
 8008cc2:	602b      	str	r3, [r5, #0]
 8008cc4:	f7f9 f830 	bl	8001d28 <_close>
 8008cc8:	1c43      	adds	r3, r0, #1
 8008cca:	d102      	bne.n	8008cd2 <_close_r+0x1a>
 8008ccc:	682b      	ldr	r3, [r5, #0]
 8008cce:	b103      	cbz	r3, 8008cd2 <_close_r+0x1a>
 8008cd0:	6023      	str	r3, [r4, #0]
 8008cd2:	bd38      	pop	{r3, r4, r5, pc}
 8008cd4:	20000738 	.word	0x20000738

08008cd8 <_fstat_r>:
 8008cd8:	b538      	push	{r3, r4, r5, lr}
 8008cda:	2300      	movs	r3, #0
 8008cdc:	4d06      	ldr	r5, [pc, #24]	; (8008cf8 <_fstat_r+0x20>)
 8008cde:	4604      	mov	r4, r0
 8008ce0:	4608      	mov	r0, r1
 8008ce2:	4611      	mov	r1, r2
 8008ce4:	602b      	str	r3, [r5, #0]
 8008ce6:	f7f9 f82a 	bl	8001d3e <_fstat>
 8008cea:	1c43      	adds	r3, r0, #1
 8008cec:	d102      	bne.n	8008cf4 <_fstat_r+0x1c>
 8008cee:	682b      	ldr	r3, [r5, #0]
 8008cf0:	b103      	cbz	r3, 8008cf4 <_fstat_r+0x1c>
 8008cf2:	6023      	str	r3, [r4, #0]
 8008cf4:	bd38      	pop	{r3, r4, r5, pc}
 8008cf6:	bf00      	nop
 8008cf8:	20000738 	.word	0x20000738

08008cfc <_isatty_r>:
 8008cfc:	b538      	push	{r3, r4, r5, lr}
 8008cfe:	2300      	movs	r3, #0
 8008d00:	4d05      	ldr	r5, [pc, #20]	; (8008d18 <_isatty_r+0x1c>)
 8008d02:	4604      	mov	r4, r0
 8008d04:	4608      	mov	r0, r1
 8008d06:	602b      	str	r3, [r5, #0]
 8008d08:	f7f9 f828 	bl	8001d5c <_isatty>
 8008d0c:	1c43      	adds	r3, r0, #1
 8008d0e:	d102      	bne.n	8008d16 <_isatty_r+0x1a>
 8008d10:	682b      	ldr	r3, [r5, #0]
 8008d12:	b103      	cbz	r3, 8008d16 <_isatty_r+0x1a>
 8008d14:	6023      	str	r3, [r4, #0]
 8008d16:	bd38      	pop	{r3, r4, r5, pc}
 8008d18:	20000738 	.word	0x20000738

08008d1c <_lseek_r>:
 8008d1c:	b538      	push	{r3, r4, r5, lr}
 8008d1e:	4604      	mov	r4, r0
 8008d20:	4608      	mov	r0, r1
 8008d22:	4611      	mov	r1, r2
 8008d24:	2200      	movs	r2, #0
 8008d26:	4d05      	ldr	r5, [pc, #20]	; (8008d3c <_lseek_r+0x20>)
 8008d28:	602a      	str	r2, [r5, #0]
 8008d2a:	461a      	mov	r2, r3
 8008d2c:	f7f9 f820 	bl	8001d70 <_lseek>
 8008d30:	1c43      	adds	r3, r0, #1
 8008d32:	d102      	bne.n	8008d3a <_lseek_r+0x1e>
 8008d34:	682b      	ldr	r3, [r5, #0]
 8008d36:	b103      	cbz	r3, 8008d3a <_lseek_r+0x1e>
 8008d38:	6023      	str	r3, [r4, #0]
 8008d3a:	bd38      	pop	{r3, r4, r5, pc}
 8008d3c:	20000738 	.word	0x20000738

08008d40 <_read_r>:
 8008d40:	b538      	push	{r3, r4, r5, lr}
 8008d42:	4604      	mov	r4, r0
 8008d44:	4608      	mov	r0, r1
 8008d46:	4611      	mov	r1, r2
 8008d48:	2200      	movs	r2, #0
 8008d4a:	4d05      	ldr	r5, [pc, #20]	; (8008d60 <_read_r+0x20>)
 8008d4c:	602a      	str	r2, [r5, #0]
 8008d4e:	461a      	mov	r2, r3
 8008d50:	f7f8 ffb1 	bl	8001cb6 <_read>
 8008d54:	1c43      	adds	r3, r0, #1
 8008d56:	d102      	bne.n	8008d5e <_read_r+0x1e>
 8008d58:	682b      	ldr	r3, [r5, #0]
 8008d5a:	b103      	cbz	r3, 8008d5e <_read_r+0x1e>
 8008d5c:	6023      	str	r3, [r4, #0]
 8008d5e:	bd38      	pop	{r3, r4, r5, pc}
 8008d60:	20000738 	.word	0x20000738

08008d64 <_init>:
 8008d64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d66:	bf00      	nop
 8008d68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d6a:	bc08      	pop	{r3}
 8008d6c:	469e      	mov	lr, r3
 8008d6e:	4770      	bx	lr

08008d70 <_fini>:
 8008d70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d72:	bf00      	nop
 8008d74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d76:	bc08      	pop	{r3}
 8008d78:	469e      	mov	lr, r3
 8008d7a:	4770      	bx	lr
