
g071rb_gfx01m1_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004938  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  080049f4  080049f4  000149f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004a7c  08004a7c  0002006c  2**0
                  CONTENTS
  4 .ARM          00000008  08004a7c  08004a7c  00014a7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004a84  08004a84  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004a84  08004a84  00014a84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004a88  08004a88  00014a88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08004a8c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001fc  2000006c  08004af8  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000268  08004af8  00020268  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013566  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002905  00000000  00000000  000335fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c40  00000000  00000000  00035f00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b38  00000000  00000000  00036b40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000189aa  00000000  00000000  00037678  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000101e1  00000000  00000000  00050022  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00099d08  00000000  00000000  00060203  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f9f0b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002a5c  00000000  00000000  000f9f60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000006c 	.word	0x2000006c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	080049dc 	.word	0x080049dc

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000070 	.word	0x20000070
 8000100:	080049dc 	.word	0x080049dc

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f8f0 	bl	80003ec <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__divsi3>:
 8000218:	4603      	mov	r3, r0
 800021a:	430b      	orrs	r3, r1
 800021c:	d47f      	bmi.n	800031e <__divsi3+0x106>
 800021e:	2200      	movs	r2, #0
 8000220:	0843      	lsrs	r3, r0, #1
 8000222:	428b      	cmp	r3, r1
 8000224:	d374      	bcc.n	8000310 <__divsi3+0xf8>
 8000226:	0903      	lsrs	r3, r0, #4
 8000228:	428b      	cmp	r3, r1
 800022a:	d35f      	bcc.n	80002ec <__divsi3+0xd4>
 800022c:	0a03      	lsrs	r3, r0, #8
 800022e:	428b      	cmp	r3, r1
 8000230:	d344      	bcc.n	80002bc <__divsi3+0xa4>
 8000232:	0b03      	lsrs	r3, r0, #12
 8000234:	428b      	cmp	r3, r1
 8000236:	d328      	bcc.n	800028a <__divsi3+0x72>
 8000238:	0c03      	lsrs	r3, r0, #16
 800023a:	428b      	cmp	r3, r1
 800023c:	d30d      	bcc.n	800025a <__divsi3+0x42>
 800023e:	22ff      	movs	r2, #255	; 0xff
 8000240:	0209      	lsls	r1, r1, #8
 8000242:	ba12      	rev	r2, r2
 8000244:	0c03      	lsrs	r3, r0, #16
 8000246:	428b      	cmp	r3, r1
 8000248:	d302      	bcc.n	8000250 <__divsi3+0x38>
 800024a:	1212      	asrs	r2, r2, #8
 800024c:	0209      	lsls	r1, r1, #8
 800024e:	d065      	beq.n	800031c <__divsi3+0x104>
 8000250:	0b03      	lsrs	r3, r0, #12
 8000252:	428b      	cmp	r3, r1
 8000254:	d319      	bcc.n	800028a <__divsi3+0x72>
 8000256:	e000      	b.n	800025a <__divsi3+0x42>
 8000258:	0a09      	lsrs	r1, r1, #8
 800025a:	0bc3      	lsrs	r3, r0, #15
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__divsi3+0x4c>
 8000260:	03cb      	lsls	r3, r1, #15
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0b83      	lsrs	r3, r0, #14
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__divsi3+0x58>
 800026c:	038b      	lsls	r3, r1, #14
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	0b43      	lsrs	r3, r0, #13
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x64>
 8000278:	034b      	lsls	r3, r1, #13
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x70>
 8000284:	030b      	lsls	r3, r1, #12
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0ac3      	lsrs	r3, r0, #11
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x7c>
 8000290:	02cb      	lsls	r3, r1, #11
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0a83      	lsrs	r3, r0, #10
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x88>
 800029c:	028b      	lsls	r3, r1, #10
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0a43      	lsrs	r3, r0, #9
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x94>
 80002a8:	024b      	lsls	r3, r1, #9
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a03      	lsrs	r3, r0, #8
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0xa0>
 80002b4:	020b      	lsls	r3, r1, #8
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	d2cd      	bcs.n	8000258 <__divsi3+0x40>
 80002bc:	09c3      	lsrs	r3, r0, #7
 80002be:	428b      	cmp	r3, r1
 80002c0:	d301      	bcc.n	80002c6 <__divsi3+0xae>
 80002c2:	01cb      	lsls	r3, r1, #7
 80002c4:	1ac0      	subs	r0, r0, r3
 80002c6:	4152      	adcs	r2, r2
 80002c8:	0983      	lsrs	r3, r0, #6
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d301      	bcc.n	80002d2 <__divsi3+0xba>
 80002ce:	018b      	lsls	r3, r1, #6
 80002d0:	1ac0      	subs	r0, r0, r3
 80002d2:	4152      	adcs	r2, r2
 80002d4:	0943      	lsrs	r3, r0, #5
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xc6>
 80002da:	014b      	lsls	r3, r1, #5
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0903      	lsrs	r3, r0, #4
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xd2>
 80002e6:	010b      	lsls	r3, r1, #4
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	08c3      	lsrs	r3, r0, #3
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xde>
 80002f2:	00cb      	lsls	r3, r1, #3
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0883      	lsrs	r3, r0, #2
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xea>
 80002fe:	008b      	lsls	r3, r1, #2
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0843      	lsrs	r3, r0, #1
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xf6>
 800030a:	004b      	lsls	r3, r1, #1
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	1a41      	subs	r1, r0, r1
 8000312:	d200      	bcs.n	8000316 <__divsi3+0xfe>
 8000314:	4601      	mov	r1, r0
 8000316:	4152      	adcs	r2, r2
 8000318:	4610      	mov	r0, r2
 800031a:	4770      	bx	lr
 800031c:	e05d      	b.n	80003da <__divsi3+0x1c2>
 800031e:	0fca      	lsrs	r2, r1, #31
 8000320:	d000      	beq.n	8000324 <__divsi3+0x10c>
 8000322:	4249      	negs	r1, r1
 8000324:	1003      	asrs	r3, r0, #32
 8000326:	d300      	bcc.n	800032a <__divsi3+0x112>
 8000328:	4240      	negs	r0, r0
 800032a:	4053      	eors	r3, r2
 800032c:	2200      	movs	r2, #0
 800032e:	469c      	mov	ip, r3
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d32d      	bcc.n	8000392 <__divsi3+0x17a>
 8000336:	0a03      	lsrs	r3, r0, #8
 8000338:	428b      	cmp	r3, r1
 800033a:	d312      	bcc.n	8000362 <__divsi3+0x14a>
 800033c:	22fc      	movs	r2, #252	; 0xfc
 800033e:	0189      	lsls	r1, r1, #6
 8000340:	ba12      	rev	r2, r2
 8000342:	0a03      	lsrs	r3, r0, #8
 8000344:	428b      	cmp	r3, r1
 8000346:	d30c      	bcc.n	8000362 <__divsi3+0x14a>
 8000348:	0189      	lsls	r1, r1, #6
 800034a:	1192      	asrs	r2, r2, #6
 800034c:	428b      	cmp	r3, r1
 800034e:	d308      	bcc.n	8000362 <__divsi3+0x14a>
 8000350:	0189      	lsls	r1, r1, #6
 8000352:	1192      	asrs	r2, r2, #6
 8000354:	428b      	cmp	r3, r1
 8000356:	d304      	bcc.n	8000362 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	d03a      	beq.n	80003d2 <__divsi3+0x1ba>
 800035c:	1192      	asrs	r2, r2, #6
 800035e:	e000      	b.n	8000362 <__divsi3+0x14a>
 8000360:	0989      	lsrs	r1, r1, #6
 8000362:	09c3      	lsrs	r3, r0, #7
 8000364:	428b      	cmp	r3, r1
 8000366:	d301      	bcc.n	800036c <__divsi3+0x154>
 8000368:	01cb      	lsls	r3, r1, #7
 800036a:	1ac0      	subs	r0, r0, r3
 800036c:	4152      	adcs	r2, r2
 800036e:	0983      	lsrs	r3, r0, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d301      	bcc.n	8000378 <__divsi3+0x160>
 8000374:	018b      	lsls	r3, r1, #6
 8000376:	1ac0      	subs	r0, r0, r3
 8000378:	4152      	adcs	r2, r2
 800037a:	0943      	lsrs	r3, r0, #5
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x16c>
 8000380:	014b      	lsls	r3, r1, #5
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0903      	lsrs	r3, r0, #4
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x178>
 800038c:	010b      	lsls	r3, r1, #4
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	08c3      	lsrs	r3, r0, #3
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x184>
 8000398:	00cb      	lsls	r3, r1, #3
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0883      	lsrs	r3, r0, #2
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x190>
 80003a4:	008b      	lsls	r3, r1, #2
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	d2d9      	bcs.n	8000360 <__divsi3+0x148>
 80003ac:	0843      	lsrs	r3, r0, #1
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d301      	bcc.n	80003b6 <__divsi3+0x19e>
 80003b2:	004b      	lsls	r3, r1, #1
 80003b4:	1ac0      	subs	r0, r0, r3
 80003b6:	4152      	adcs	r2, r2
 80003b8:	1a41      	subs	r1, r0, r1
 80003ba:	d200      	bcs.n	80003be <__divsi3+0x1a6>
 80003bc:	4601      	mov	r1, r0
 80003be:	4663      	mov	r3, ip
 80003c0:	4152      	adcs	r2, r2
 80003c2:	105b      	asrs	r3, r3, #1
 80003c4:	4610      	mov	r0, r2
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x1b4>
 80003c8:	4240      	negs	r0, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d500      	bpl.n	80003d0 <__divsi3+0x1b8>
 80003ce:	4249      	negs	r1, r1
 80003d0:	4770      	bx	lr
 80003d2:	4663      	mov	r3, ip
 80003d4:	105b      	asrs	r3, r3, #1
 80003d6:	d300      	bcc.n	80003da <__divsi3+0x1c2>
 80003d8:	4240      	negs	r0, r0
 80003da:	b501      	push	{r0, lr}
 80003dc:	2000      	movs	r0, #0
 80003de:	f000 f805 	bl	80003ec <__aeabi_idiv0>
 80003e2:	bd02      	pop	{r1, pc}

080003e4 <__aeabi_idivmod>:
 80003e4:	2900      	cmp	r1, #0
 80003e6:	d0f8      	beq.n	80003da <__divsi3+0x1c2>
 80003e8:	e716      	b.n	8000218 <__divsi3>
 80003ea:	4770      	bx	lr

080003ec <__aeabi_idiv0>:
 80003ec:	4770      	bx	lr
 80003ee:	46c0      	nop			; (mov r8, r8)

080003f0 <__aeabi_uldivmod>:
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d111      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f4:	2a00      	cmp	r2, #0
 80003f6:	d10f      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d100      	bne.n	80003fe <__aeabi_uldivmod+0xe>
 80003fc:	2800      	cmp	r0, #0
 80003fe:	d002      	beq.n	8000406 <__aeabi_uldivmod+0x16>
 8000400:	2100      	movs	r1, #0
 8000402:	43c9      	mvns	r1, r1
 8000404:	1c08      	adds	r0, r1, #0
 8000406:	b407      	push	{r0, r1, r2}
 8000408:	4802      	ldr	r0, [pc, #8]	; (8000414 <__aeabi_uldivmod+0x24>)
 800040a:	a102      	add	r1, pc, #8	; (adr r1, 8000414 <__aeabi_uldivmod+0x24>)
 800040c:	1840      	adds	r0, r0, r1
 800040e:	9002      	str	r0, [sp, #8]
 8000410:	bd03      	pop	{r0, r1, pc}
 8000412:	46c0      	nop			; (mov r8, r8)
 8000414:	ffffffd9 	.word	0xffffffd9
 8000418:	b403      	push	{r0, r1}
 800041a:	4668      	mov	r0, sp
 800041c:	b501      	push	{r0, lr}
 800041e:	9802      	ldr	r0, [sp, #8]
 8000420:	f000 f806 	bl	8000430 <__udivmoddi4>
 8000424:	9b01      	ldr	r3, [sp, #4]
 8000426:	469e      	mov	lr, r3
 8000428:	b002      	add	sp, #8
 800042a:	bc0c      	pop	{r2, r3}
 800042c:	4770      	bx	lr
 800042e:	46c0      	nop			; (mov r8, r8)

08000430 <__udivmoddi4>:
 8000430:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000432:	4657      	mov	r7, sl
 8000434:	464e      	mov	r6, r9
 8000436:	4645      	mov	r5, r8
 8000438:	46de      	mov	lr, fp
 800043a:	b5e0      	push	{r5, r6, r7, lr}
 800043c:	0004      	movs	r4, r0
 800043e:	000d      	movs	r5, r1
 8000440:	4692      	mov	sl, r2
 8000442:	4699      	mov	r9, r3
 8000444:	b083      	sub	sp, #12
 8000446:	428b      	cmp	r3, r1
 8000448:	d830      	bhi.n	80004ac <__udivmoddi4+0x7c>
 800044a:	d02d      	beq.n	80004a8 <__udivmoddi4+0x78>
 800044c:	4649      	mov	r1, r9
 800044e:	4650      	mov	r0, sl
 8000450:	f000 f8ba 	bl	80005c8 <__clzdi2>
 8000454:	0029      	movs	r1, r5
 8000456:	0006      	movs	r6, r0
 8000458:	0020      	movs	r0, r4
 800045a:	f000 f8b5 	bl	80005c8 <__clzdi2>
 800045e:	1a33      	subs	r3, r6, r0
 8000460:	4698      	mov	r8, r3
 8000462:	3b20      	subs	r3, #32
 8000464:	469b      	mov	fp, r3
 8000466:	d433      	bmi.n	80004d0 <__udivmoddi4+0xa0>
 8000468:	465a      	mov	r2, fp
 800046a:	4653      	mov	r3, sl
 800046c:	4093      	lsls	r3, r2
 800046e:	4642      	mov	r2, r8
 8000470:	001f      	movs	r7, r3
 8000472:	4653      	mov	r3, sl
 8000474:	4093      	lsls	r3, r2
 8000476:	001e      	movs	r6, r3
 8000478:	42af      	cmp	r7, r5
 800047a:	d83a      	bhi.n	80004f2 <__udivmoddi4+0xc2>
 800047c:	42af      	cmp	r7, r5
 800047e:	d100      	bne.n	8000482 <__udivmoddi4+0x52>
 8000480:	e078      	b.n	8000574 <__udivmoddi4+0x144>
 8000482:	465b      	mov	r3, fp
 8000484:	1ba4      	subs	r4, r4, r6
 8000486:	41bd      	sbcs	r5, r7
 8000488:	2b00      	cmp	r3, #0
 800048a:	da00      	bge.n	800048e <__udivmoddi4+0x5e>
 800048c:	e075      	b.n	800057a <__udivmoddi4+0x14a>
 800048e:	2200      	movs	r2, #0
 8000490:	2300      	movs	r3, #0
 8000492:	9200      	str	r2, [sp, #0]
 8000494:	9301      	str	r3, [sp, #4]
 8000496:	2301      	movs	r3, #1
 8000498:	465a      	mov	r2, fp
 800049a:	4093      	lsls	r3, r2
 800049c:	9301      	str	r3, [sp, #4]
 800049e:	2301      	movs	r3, #1
 80004a0:	4642      	mov	r2, r8
 80004a2:	4093      	lsls	r3, r2
 80004a4:	9300      	str	r3, [sp, #0]
 80004a6:	e028      	b.n	80004fa <__udivmoddi4+0xca>
 80004a8:	4282      	cmp	r2, r0
 80004aa:	d9cf      	bls.n	800044c <__udivmoddi4+0x1c>
 80004ac:	2200      	movs	r2, #0
 80004ae:	2300      	movs	r3, #0
 80004b0:	9200      	str	r2, [sp, #0]
 80004b2:	9301      	str	r3, [sp, #4]
 80004b4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d001      	beq.n	80004be <__udivmoddi4+0x8e>
 80004ba:	601c      	str	r4, [r3, #0]
 80004bc:	605d      	str	r5, [r3, #4]
 80004be:	9800      	ldr	r0, [sp, #0]
 80004c0:	9901      	ldr	r1, [sp, #4]
 80004c2:	b003      	add	sp, #12
 80004c4:	bcf0      	pop	{r4, r5, r6, r7}
 80004c6:	46bb      	mov	fp, r7
 80004c8:	46b2      	mov	sl, r6
 80004ca:	46a9      	mov	r9, r5
 80004cc:	46a0      	mov	r8, r4
 80004ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004d0:	4642      	mov	r2, r8
 80004d2:	2320      	movs	r3, #32
 80004d4:	1a9b      	subs	r3, r3, r2
 80004d6:	4652      	mov	r2, sl
 80004d8:	40da      	lsrs	r2, r3
 80004da:	4641      	mov	r1, r8
 80004dc:	0013      	movs	r3, r2
 80004de:	464a      	mov	r2, r9
 80004e0:	408a      	lsls	r2, r1
 80004e2:	0017      	movs	r7, r2
 80004e4:	4642      	mov	r2, r8
 80004e6:	431f      	orrs	r7, r3
 80004e8:	4653      	mov	r3, sl
 80004ea:	4093      	lsls	r3, r2
 80004ec:	001e      	movs	r6, r3
 80004ee:	42af      	cmp	r7, r5
 80004f0:	d9c4      	bls.n	800047c <__udivmoddi4+0x4c>
 80004f2:	2200      	movs	r2, #0
 80004f4:	2300      	movs	r3, #0
 80004f6:	9200      	str	r2, [sp, #0]
 80004f8:	9301      	str	r3, [sp, #4]
 80004fa:	4643      	mov	r3, r8
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	d0d9      	beq.n	80004b4 <__udivmoddi4+0x84>
 8000500:	07fb      	lsls	r3, r7, #31
 8000502:	0872      	lsrs	r2, r6, #1
 8000504:	431a      	orrs	r2, r3
 8000506:	4646      	mov	r6, r8
 8000508:	087b      	lsrs	r3, r7, #1
 800050a:	e00e      	b.n	800052a <__udivmoddi4+0xfa>
 800050c:	42ab      	cmp	r3, r5
 800050e:	d101      	bne.n	8000514 <__udivmoddi4+0xe4>
 8000510:	42a2      	cmp	r2, r4
 8000512:	d80c      	bhi.n	800052e <__udivmoddi4+0xfe>
 8000514:	1aa4      	subs	r4, r4, r2
 8000516:	419d      	sbcs	r5, r3
 8000518:	2001      	movs	r0, #1
 800051a:	1924      	adds	r4, r4, r4
 800051c:	416d      	adcs	r5, r5
 800051e:	2100      	movs	r1, #0
 8000520:	3e01      	subs	r6, #1
 8000522:	1824      	adds	r4, r4, r0
 8000524:	414d      	adcs	r5, r1
 8000526:	2e00      	cmp	r6, #0
 8000528:	d006      	beq.n	8000538 <__udivmoddi4+0x108>
 800052a:	42ab      	cmp	r3, r5
 800052c:	d9ee      	bls.n	800050c <__udivmoddi4+0xdc>
 800052e:	3e01      	subs	r6, #1
 8000530:	1924      	adds	r4, r4, r4
 8000532:	416d      	adcs	r5, r5
 8000534:	2e00      	cmp	r6, #0
 8000536:	d1f8      	bne.n	800052a <__udivmoddi4+0xfa>
 8000538:	9800      	ldr	r0, [sp, #0]
 800053a:	9901      	ldr	r1, [sp, #4]
 800053c:	465b      	mov	r3, fp
 800053e:	1900      	adds	r0, r0, r4
 8000540:	4169      	adcs	r1, r5
 8000542:	2b00      	cmp	r3, #0
 8000544:	db24      	blt.n	8000590 <__udivmoddi4+0x160>
 8000546:	002b      	movs	r3, r5
 8000548:	465a      	mov	r2, fp
 800054a:	4644      	mov	r4, r8
 800054c:	40d3      	lsrs	r3, r2
 800054e:	002a      	movs	r2, r5
 8000550:	40e2      	lsrs	r2, r4
 8000552:	001c      	movs	r4, r3
 8000554:	465b      	mov	r3, fp
 8000556:	0015      	movs	r5, r2
 8000558:	2b00      	cmp	r3, #0
 800055a:	db2a      	blt.n	80005b2 <__udivmoddi4+0x182>
 800055c:	0026      	movs	r6, r4
 800055e:	409e      	lsls	r6, r3
 8000560:	0033      	movs	r3, r6
 8000562:	0026      	movs	r6, r4
 8000564:	4647      	mov	r7, r8
 8000566:	40be      	lsls	r6, r7
 8000568:	0032      	movs	r2, r6
 800056a:	1a80      	subs	r0, r0, r2
 800056c:	4199      	sbcs	r1, r3
 800056e:	9000      	str	r0, [sp, #0]
 8000570:	9101      	str	r1, [sp, #4]
 8000572:	e79f      	b.n	80004b4 <__udivmoddi4+0x84>
 8000574:	42a3      	cmp	r3, r4
 8000576:	d8bc      	bhi.n	80004f2 <__udivmoddi4+0xc2>
 8000578:	e783      	b.n	8000482 <__udivmoddi4+0x52>
 800057a:	4642      	mov	r2, r8
 800057c:	2320      	movs	r3, #32
 800057e:	2100      	movs	r1, #0
 8000580:	1a9b      	subs	r3, r3, r2
 8000582:	2200      	movs	r2, #0
 8000584:	9100      	str	r1, [sp, #0]
 8000586:	9201      	str	r2, [sp, #4]
 8000588:	2201      	movs	r2, #1
 800058a:	40da      	lsrs	r2, r3
 800058c:	9201      	str	r2, [sp, #4]
 800058e:	e786      	b.n	800049e <__udivmoddi4+0x6e>
 8000590:	4642      	mov	r2, r8
 8000592:	2320      	movs	r3, #32
 8000594:	1a9b      	subs	r3, r3, r2
 8000596:	002a      	movs	r2, r5
 8000598:	4646      	mov	r6, r8
 800059a:	409a      	lsls	r2, r3
 800059c:	0023      	movs	r3, r4
 800059e:	40f3      	lsrs	r3, r6
 80005a0:	4644      	mov	r4, r8
 80005a2:	4313      	orrs	r3, r2
 80005a4:	002a      	movs	r2, r5
 80005a6:	40e2      	lsrs	r2, r4
 80005a8:	001c      	movs	r4, r3
 80005aa:	465b      	mov	r3, fp
 80005ac:	0015      	movs	r5, r2
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	dad4      	bge.n	800055c <__udivmoddi4+0x12c>
 80005b2:	4642      	mov	r2, r8
 80005b4:	002f      	movs	r7, r5
 80005b6:	2320      	movs	r3, #32
 80005b8:	0026      	movs	r6, r4
 80005ba:	4097      	lsls	r7, r2
 80005bc:	1a9b      	subs	r3, r3, r2
 80005be:	40de      	lsrs	r6, r3
 80005c0:	003b      	movs	r3, r7
 80005c2:	4333      	orrs	r3, r6
 80005c4:	e7cd      	b.n	8000562 <__udivmoddi4+0x132>
 80005c6:	46c0      	nop			; (mov r8, r8)

080005c8 <__clzdi2>:
 80005c8:	b510      	push	{r4, lr}
 80005ca:	2900      	cmp	r1, #0
 80005cc:	d103      	bne.n	80005d6 <__clzdi2+0xe>
 80005ce:	f000 f807 	bl	80005e0 <__clzsi2>
 80005d2:	3020      	adds	r0, #32
 80005d4:	e002      	b.n	80005dc <__clzdi2+0x14>
 80005d6:	1c08      	adds	r0, r1, #0
 80005d8:	f000 f802 	bl	80005e0 <__clzsi2>
 80005dc:	bd10      	pop	{r4, pc}
 80005de:	46c0      	nop			; (mov r8, r8)

080005e0 <__clzsi2>:
 80005e0:	211c      	movs	r1, #28
 80005e2:	2301      	movs	r3, #1
 80005e4:	041b      	lsls	r3, r3, #16
 80005e6:	4298      	cmp	r0, r3
 80005e8:	d301      	bcc.n	80005ee <__clzsi2+0xe>
 80005ea:	0c00      	lsrs	r0, r0, #16
 80005ec:	3910      	subs	r1, #16
 80005ee:	0a1b      	lsrs	r3, r3, #8
 80005f0:	4298      	cmp	r0, r3
 80005f2:	d301      	bcc.n	80005f8 <__clzsi2+0x18>
 80005f4:	0a00      	lsrs	r0, r0, #8
 80005f6:	3908      	subs	r1, #8
 80005f8:	091b      	lsrs	r3, r3, #4
 80005fa:	4298      	cmp	r0, r3
 80005fc:	d301      	bcc.n	8000602 <__clzsi2+0x22>
 80005fe:	0900      	lsrs	r0, r0, #4
 8000600:	3904      	subs	r1, #4
 8000602:	a202      	add	r2, pc, #8	; (adr r2, 800060c <__clzsi2+0x2c>)
 8000604:	5c10      	ldrb	r0, [r2, r0]
 8000606:	1840      	adds	r0, r0, r1
 8000608:	4770      	bx	lr
 800060a:	46c0      	nop			; (mov r8, r8)
 800060c:	02020304 	.word	0x02020304
 8000610:	01010101 	.word	0x01010101
	...

0800061c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000620:	f001 f9c0 	bl	80019a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000624:	f000 f809 	bl	800063a <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000628:	f000 f8b4 	bl	8000794 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800062c:	f000 f864 	bl	80006f8 <MX_USART2_UART_Init>
  MX_DISPLAY_Init();
 8000630:	f000 fc77 	bl	8000f22 <MX_DISPLAY_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

  MX_DISPLAY_Process();
 8000634:	f000 fc90 	bl	8000f58 <MX_DISPLAY_Process>
 8000638:	e7fc      	b.n	8000634 <main+0x18>

0800063a <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800063a:	b590      	push	{r4, r7, lr}
 800063c:	b0a1      	sub	sp, #132	; 0x84
 800063e:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000640:	2448      	movs	r4, #72	; 0x48
 8000642:	193b      	adds	r3, r7, r4
 8000644:	0018      	movs	r0, r3
 8000646:	2338      	movs	r3, #56	; 0x38
 8000648:	001a      	movs	r2, r3
 800064a:	2100      	movs	r1, #0
 800064c:	f004 f9be 	bl	80049cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000650:	2338      	movs	r3, #56	; 0x38
 8000652:	18fb      	adds	r3, r7, r3
 8000654:	0018      	movs	r0, r3
 8000656:	2310      	movs	r3, #16
 8000658:	001a      	movs	r2, r3
 800065a:	2100      	movs	r1, #0
 800065c:	f004 f9b6 	bl	80049cc <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000660:	1d3b      	adds	r3, r7, #4
 8000662:	0018      	movs	r0, r3
 8000664:	2334      	movs	r3, #52	; 0x34
 8000666:	001a      	movs	r2, r3
 8000668:	2100      	movs	r1, #0
 800066a:	f004 f9af 	bl	80049cc <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800066e:	2380      	movs	r3, #128	; 0x80
 8000670:	009b      	lsls	r3, r3, #2
 8000672:	0018      	movs	r0, r3
 8000674:	f001 fd5c 	bl	8002130 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000678:	193b      	adds	r3, r7, r4
 800067a:	2202      	movs	r2, #2
 800067c:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800067e:	193b      	adds	r3, r7, r4
 8000680:	2280      	movs	r2, #128	; 0x80
 8000682:	0052      	lsls	r2, r2, #1
 8000684:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000686:	193b      	adds	r3, r7, r4
 8000688:	2200      	movs	r2, #0
 800068a:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800068c:	193b      	adds	r3, r7, r4
 800068e:	2240      	movs	r2, #64	; 0x40
 8000690:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000692:	193b      	adds	r3, r7, r4
 8000694:	2200      	movs	r2, #0
 8000696:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000698:	193b      	adds	r3, r7, r4
 800069a:	0018      	movs	r0, r3
 800069c:	f001 fd94 	bl	80021c8 <HAL_RCC_OscConfig>
 80006a0:	1e03      	subs	r3, r0, #0
 80006a2:	d001      	beq.n	80006a8 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80006a4:	f000 f920 	bl	80008e8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006a8:	2138      	movs	r1, #56	; 0x38
 80006aa:	187b      	adds	r3, r7, r1
 80006ac:	2207      	movs	r2, #7
 80006ae:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006b0:	187b      	adds	r3, r7, r1
 80006b2:	2200      	movs	r2, #0
 80006b4:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006b6:	187b      	adds	r3, r7, r1
 80006b8:	2200      	movs	r2, #0
 80006ba:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006bc:	187b      	adds	r3, r7, r1
 80006be:	2200      	movs	r2, #0
 80006c0:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006c2:	187b      	adds	r3, r7, r1
 80006c4:	2100      	movs	r1, #0
 80006c6:	0018      	movs	r0, r3
 80006c8:	f002 f89e 	bl	8002808 <HAL_RCC_ClockConfig>
 80006cc:	1e03      	subs	r3, r0, #0
 80006ce:	d001      	beq.n	80006d4 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80006d0:	f000 f90a 	bl	80008e8 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80006d4:	1d3b      	adds	r3, r7, #4
 80006d6:	2202      	movs	r2, #2
 80006d8:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80006da:	1d3b      	adds	r3, r7, #4
 80006dc:	2200      	movs	r2, #0
 80006de:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006e0:	1d3b      	adds	r3, r7, #4
 80006e2:	0018      	movs	r0, r3
 80006e4:	f002 fa3a 	bl	8002b5c <HAL_RCCEx_PeriphCLKConfig>
 80006e8:	1e03      	subs	r3, r0, #0
 80006ea:	d001      	beq.n	80006f0 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80006ec:	f000 f8fc 	bl	80008e8 <Error_Handler>
  }
}
 80006f0:	46c0      	nop			; (mov r8, r8)
 80006f2:	46bd      	mov	sp, r7
 80006f4:	b021      	add	sp, #132	; 0x84
 80006f6:	bd90      	pop	{r4, r7, pc}

080006f8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006fc:	4b23      	ldr	r3, [pc, #140]	; (800078c <MX_USART2_UART_Init+0x94>)
 80006fe:	4a24      	ldr	r2, [pc, #144]	; (8000790 <MX_USART2_UART_Init+0x98>)
 8000700:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000702:	4b22      	ldr	r3, [pc, #136]	; (800078c <MX_USART2_UART_Init+0x94>)
 8000704:	22e1      	movs	r2, #225	; 0xe1
 8000706:	0252      	lsls	r2, r2, #9
 8000708:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800070a:	4b20      	ldr	r3, [pc, #128]	; (800078c <MX_USART2_UART_Init+0x94>)
 800070c:	2200      	movs	r2, #0
 800070e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000710:	4b1e      	ldr	r3, [pc, #120]	; (800078c <MX_USART2_UART_Init+0x94>)
 8000712:	2200      	movs	r2, #0
 8000714:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000716:	4b1d      	ldr	r3, [pc, #116]	; (800078c <MX_USART2_UART_Init+0x94>)
 8000718:	2200      	movs	r2, #0
 800071a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800071c:	4b1b      	ldr	r3, [pc, #108]	; (800078c <MX_USART2_UART_Init+0x94>)
 800071e:	220c      	movs	r2, #12
 8000720:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000722:	4b1a      	ldr	r3, [pc, #104]	; (800078c <MX_USART2_UART_Init+0x94>)
 8000724:	2200      	movs	r2, #0
 8000726:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000728:	4b18      	ldr	r3, [pc, #96]	; (800078c <MX_USART2_UART_Init+0x94>)
 800072a:	2200      	movs	r2, #0
 800072c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800072e:	4b17      	ldr	r3, [pc, #92]	; (800078c <MX_USART2_UART_Init+0x94>)
 8000730:	2200      	movs	r2, #0
 8000732:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000734:	4b15      	ldr	r3, [pc, #84]	; (800078c <MX_USART2_UART_Init+0x94>)
 8000736:	2200      	movs	r2, #0
 8000738:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800073a:	4b14      	ldr	r3, [pc, #80]	; (800078c <MX_USART2_UART_Init+0x94>)
 800073c:	2200      	movs	r2, #0
 800073e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000740:	4b12      	ldr	r3, [pc, #72]	; (800078c <MX_USART2_UART_Init+0x94>)
 8000742:	0018      	movs	r0, r3
 8000744:	f003 fb0a 	bl	8003d5c <HAL_UART_Init>
 8000748:	1e03      	subs	r3, r0, #0
 800074a:	d001      	beq.n	8000750 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 800074c:	f000 f8cc 	bl	80008e8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000750:	4b0e      	ldr	r3, [pc, #56]	; (800078c <MX_USART2_UART_Init+0x94>)
 8000752:	2100      	movs	r1, #0
 8000754:	0018      	movs	r0, r3
 8000756:	f004 f835 	bl	80047c4 <HAL_UARTEx_SetTxFifoThreshold>
 800075a:	1e03      	subs	r3, r0, #0
 800075c:	d001      	beq.n	8000762 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800075e:	f000 f8c3 	bl	80008e8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000762:	4b0a      	ldr	r3, [pc, #40]	; (800078c <MX_USART2_UART_Init+0x94>)
 8000764:	2100      	movs	r1, #0
 8000766:	0018      	movs	r0, r3
 8000768:	f004 f86c 	bl	8004844 <HAL_UARTEx_SetRxFifoThreshold>
 800076c:	1e03      	subs	r3, r0, #0
 800076e:	d001      	beq.n	8000774 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000770:	f000 f8ba 	bl	80008e8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000774:	4b05      	ldr	r3, [pc, #20]	; (800078c <MX_USART2_UART_Init+0x94>)
 8000776:	0018      	movs	r0, r3
 8000778:	f003 ffea 	bl	8004750 <HAL_UARTEx_DisableFifoMode>
 800077c:	1e03      	subs	r3, r0, #0
 800077e:	d001      	beq.n	8000784 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000780:	f000 f8b2 	bl	80008e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000784:	46c0      	nop			; (mov r8, r8)
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}
 800078a:	46c0      	nop			; (mov r8, r8)
 800078c:	20000100 	.word	0x20000100
 8000790:	40004400 	.word	0x40004400

08000794 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000794:	b590      	push	{r4, r7, lr}
 8000796:	b08b      	sub	sp, #44	; 0x2c
 8000798:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800079a:	2414      	movs	r4, #20
 800079c:	193b      	adds	r3, r7, r4
 800079e:	0018      	movs	r0, r3
 80007a0:	2314      	movs	r3, #20
 80007a2:	001a      	movs	r2, r3
 80007a4:	2100      	movs	r1, #0
 80007a6:	f004 f911 	bl	80049cc <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007aa:	4b4b      	ldr	r3, [pc, #300]	; (80008d8 <MX_GPIO_Init+0x144>)
 80007ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80007ae:	4b4a      	ldr	r3, [pc, #296]	; (80008d8 <MX_GPIO_Init+0x144>)
 80007b0:	2104      	movs	r1, #4
 80007b2:	430a      	orrs	r2, r1
 80007b4:	635a      	str	r2, [r3, #52]	; 0x34
 80007b6:	4b48      	ldr	r3, [pc, #288]	; (80008d8 <MX_GPIO_Init+0x144>)
 80007b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80007ba:	2204      	movs	r2, #4
 80007bc:	4013      	ands	r3, r2
 80007be:	613b      	str	r3, [r7, #16]
 80007c0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80007c2:	4b45      	ldr	r3, [pc, #276]	; (80008d8 <MX_GPIO_Init+0x144>)
 80007c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80007c6:	4b44      	ldr	r3, [pc, #272]	; (80008d8 <MX_GPIO_Init+0x144>)
 80007c8:	2120      	movs	r1, #32
 80007ca:	430a      	orrs	r2, r1
 80007cc:	635a      	str	r2, [r3, #52]	; 0x34
 80007ce:	4b42      	ldr	r3, [pc, #264]	; (80008d8 <MX_GPIO_Init+0x144>)
 80007d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80007d2:	2220      	movs	r2, #32
 80007d4:	4013      	ands	r3, r2
 80007d6:	60fb      	str	r3, [r7, #12]
 80007d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007da:	4b3f      	ldr	r3, [pc, #252]	; (80008d8 <MX_GPIO_Init+0x144>)
 80007dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80007de:	4b3e      	ldr	r3, [pc, #248]	; (80008d8 <MX_GPIO_Init+0x144>)
 80007e0:	2101      	movs	r1, #1
 80007e2:	430a      	orrs	r2, r1
 80007e4:	635a      	str	r2, [r3, #52]	; 0x34
 80007e6:	4b3c      	ldr	r3, [pc, #240]	; (80008d8 <MX_GPIO_Init+0x144>)
 80007e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80007ea:	2201      	movs	r2, #1
 80007ec:	4013      	ands	r3, r2
 80007ee:	60bb      	str	r3, [r7, #8]
 80007f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007f2:	4b39      	ldr	r3, [pc, #228]	; (80008d8 <MX_GPIO_Init+0x144>)
 80007f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80007f6:	4b38      	ldr	r3, [pc, #224]	; (80008d8 <MX_GPIO_Init+0x144>)
 80007f8:	2102      	movs	r1, #2
 80007fa:	430a      	orrs	r2, r1
 80007fc:	635a      	str	r2, [r3, #52]	; 0x34
 80007fe:	4b36      	ldr	r3, [pc, #216]	; (80008d8 <MX_GPIO_Init+0x144>)
 8000800:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000802:	2202      	movs	r2, #2
 8000804:	4013      	ands	r3, r2
 8000806:	607b      	str	r3, [r7, #4]
 8000808:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DISP_NRESET_GPIO_Port, DISP_NRESET_Pin, GPIO_PIN_RESET);
 800080a:	23a0      	movs	r3, #160	; 0xa0
 800080c:	05db      	lsls	r3, r3, #23
 800080e:	2200      	movs	r2, #0
 8000810:	2102      	movs	r1, #2
 8000812:	0018      	movs	r0, r3
 8000814:	f001 fc6e 	bl	80020f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_DCX_GPIO_Port, SPI1_DCX_Pin, GPIO_PIN_RESET);
 8000818:	4b30      	ldr	r3, [pc, #192]	; (80008dc <MX_GPIO_Init+0x148>)
 800081a:	2200      	movs	r2, #0
 800081c:	2108      	movs	r1, #8
 800081e:	0018      	movs	r0, r3
 8000820:	f001 fc68 	bl	80020f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI1_NCS_Pin|SPI2_NCS_Pin, GPIO_PIN_SET);
 8000824:	2388      	movs	r3, #136	; 0x88
 8000826:	009b      	lsls	r3, r3, #2
 8000828:	482c      	ldr	r0, [pc, #176]	; (80008dc <MX_GPIO_Init+0x148>)
 800082a:	2201      	movs	r2, #1
 800082c:	0019      	movs	r1, r3
 800082e:	f001 fc61 	bl	80020f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : JOY_RIGHT_Pin JOY_UP_Pin JOY_CENTER_Pin JOY_LEFT_Pin
                           JOY_DOWN_Pin */
  GPIO_InitStruct.Pin = JOY_RIGHT_Pin|JOY_UP_Pin|JOY_CENTER_Pin|JOY_LEFT_Pin
 8000832:	193b      	adds	r3, r7, r4
 8000834:	22f8      	movs	r2, #248	; 0xf8
 8000836:	0152      	lsls	r2, r2, #5
 8000838:	601a      	str	r2, [r3, #0]
                          |JOY_DOWN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800083a:	193b      	adds	r3, r7, r4
 800083c:	2200      	movs	r2, #0
 800083e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000840:	193b      	adds	r3, r7, r4
 8000842:	2200      	movs	r2, #0
 8000844:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000846:	193b      	adds	r3, r7, r4
 8000848:	4a25      	ldr	r2, [pc, #148]	; (80008e0 <MX_GPIO_Init+0x14c>)
 800084a:	0019      	movs	r1, r3
 800084c:	0010      	movs	r0, r2
 800084e:	f001 fa1d 	bl	8001c8c <HAL_GPIO_Init>

  /*Configure GPIO pin : DISP_TE_Pin */
  GPIO_InitStruct.Pin = DISP_TE_Pin;
 8000852:	193b      	adds	r3, r7, r4
 8000854:	2201      	movs	r2, #1
 8000856:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000858:	193b      	adds	r3, r7, r4
 800085a:	2288      	movs	r2, #136	; 0x88
 800085c:	0352      	lsls	r2, r2, #13
 800085e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000860:	193b      	adds	r3, r7, r4
 8000862:	2200      	movs	r2, #0
 8000864:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(DISP_TE_GPIO_Port, &GPIO_InitStruct);
 8000866:	193a      	adds	r2, r7, r4
 8000868:	23a0      	movs	r3, #160	; 0xa0
 800086a:	05db      	lsls	r3, r3, #23
 800086c:	0011      	movs	r1, r2
 800086e:	0018      	movs	r0, r3
 8000870:	f001 fa0c 	bl	8001c8c <HAL_GPIO_Init>

  /*Configure GPIO pin : DISP_NRESET_Pin */
  GPIO_InitStruct.Pin = DISP_NRESET_Pin;
 8000874:	193b      	adds	r3, r7, r4
 8000876:	2202      	movs	r2, #2
 8000878:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800087a:	193b      	adds	r3, r7, r4
 800087c:	2201      	movs	r2, #1
 800087e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000880:	193b      	adds	r3, r7, r4
 8000882:	2200      	movs	r2, #0
 8000884:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000886:	193b      	adds	r3, r7, r4
 8000888:	2203      	movs	r2, #3
 800088a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(DISP_NRESET_GPIO_Port, &GPIO_InitStruct);
 800088c:	193a      	adds	r2, r7, r4
 800088e:	23a0      	movs	r3, #160	; 0xa0
 8000890:	05db      	lsls	r3, r3, #23
 8000892:	0011      	movs	r1, r2
 8000894:	0018      	movs	r0, r3
 8000896:	f001 f9f9 	bl	8001c8c <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_DCX_Pin SPI1_NCS_Pin SPI2_NCS_Pin */
  GPIO_InitStruct.Pin = SPI1_DCX_Pin|SPI1_NCS_Pin|SPI2_NCS_Pin;
 800089a:	0021      	movs	r1, r4
 800089c:	187b      	adds	r3, r7, r1
 800089e:	228a      	movs	r2, #138	; 0x8a
 80008a0:	0092      	lsls	r2, r2, #2
 80008a2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008a4:	187b      	adds	r3, r7, r1
 80008a6:	2201      	movs	r2, #1
 80008a8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008aa:	187b      	adds	r3, r7, r1
 80008ac:	2200      	movs	r2, #0
 80008ae:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008b0:	187b      	adds	r3, r7, r1
 80008b2:	2203      	movs	r2, #3
 80008b4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008b6:	187b      	adds	r3, r7, r1
 80008b8:	4a08      	ldr	r2, [pc, #32]	; (80008dc <MX_GPIO_Init+0x148>)
 80008ba:	0019      	movs	r1, r3
 80008bc:	0010      	movs	r0, r2
 80008be:	f001 f9e5 	bl	8001c8c <HAL_GPIO_Init>

  /**/
  __HAL_SYSCFG_FASTMODEPLUS_ENABLE(SYSCFG_FASTMODEPLUS_PB9);
 80008c2:	4b08      	ldr	r3, [pc, #32]	; (80008e4 <MX_GPIO_Init+0x150>)
 80008c4:	681a      	ldr	r2, [r3, #0]
 80008c6:	4b07      	ldr	r3, [pc, #28]	; (80008e4 <MX_GPIO_Init+0x150>)
 80008c8:	2180      	movs	r1, #128	; 0x80
 80008ca:	0309      	lsls	r1, r1, #12
 80008cc:	430a      	orrs	r2, r1
 80008ce:	601a      	str	r2, [r3, #0]

}
 80008d0:	46c0      	nop			; (mov r8, r8)
 80008d2:	46bd      	mov	sp, r7
 80008d4:	b00b      	add	sp, #44	; 0x2c
 80008d6:	bd90      	pop	{r4, r7, pc}
 80008d8:	40021000 	.word	0x40021000
 80008dc:	50000400 	.word	0x50000400
 80008e0:	50000800 	.word	0x50000800
 80008e4:	40010000 	.word	0x40010000

080008e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008ec:	b672      	cpsid	i
}
 80008ee:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008f0:	e7fe      	b.n	80008f0 <Error_Handler+0x8>
	...

080008f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b082      	sub	sp, #8
 80008f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008fa:	4b11      	ldr	r3, [pc, #68]	; (8000940 <HAL_MspInit+0x4c>)
 80008fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80008fe:	4b10      	ldr	r3, [pc, #64]	; (8000940 <HAL_MspInit+0x4c>)
 8000900:	2101      	movs	r1, #1
 8000902:	430a      	orrs	r2, r1
 8000904:	641a      	str	r2, [r3, #64]	; 0x40
 8000906:	4b0e      	ldr	r3, [pc, #56]	; (8000940 <HAL_MspInit+0x4c>)
 8000908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800090a:	2201      	movs	r2, #1
 800090c:	4013      	ands	r3, r2
 800090e:	607b      	str	r3, [r7, #4]
 8000910:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000912:	4b0b      	ldr	r3, [pc, #44]	; (8000940 <HAL_MspInit+0x4c>)
 8000914:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000916:	4b0a      	ldr	r3, [pc, #40]	; (8000940 <HAL_MspInit+0x4c>)
 8000918:	2180      	movs	r1, #128	; 0x80
 800091a:	0549      	lsls	r1, r1, #21
 800091c:	430a      	orrs	r2, r1
 800091e:	63da      	str	r2, [r3, #60]	; 0x3c
 8000920:	4b07      	ldr	r3, [pc, #28]	; (8000940 <HAL_MspInit+0x4c>)
 8000922:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000924:	2380      	movs	r3, #128	; 0x80
 8000926:	055b      	lsls	r3, r3, #21
 8000928:	4013      	ands	r3, r2
 800092a:	603b      	str	r3, [r7, #0]
 800092c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 800092e:	23c0      	movs	r3, #192	; 0xc0
 8000930:	00db      	lsls	r3, r3, #3
 8000932:	0018      	movs	r0, r3
 8000934:	f001 f8e0 	bl	8001af8 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000938:	46c0      	nop			; (mov r8, r8)
 800093a:	46bd      	mov	sp, r7
 800093c:	b002      	add	sp, #8
 800093e:	bd80      	pop	{r7, pc}
 8000940:	40021000 	.word	0x40021000

08000944 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000944:	b590      	push	{r4, r7, lr}
 8000946:	b08b      	sub	sp, #44	; 0x2c
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800094c:	2414      	movs	r4, #20
 800094e:	193b      	adds	r3, r7, r4
 8000950:	0018      	movs	r0, r3
 8000952:	2314      	movs	r3, #20
 8000954:	001a      	movs	r2, r3
 8000956:	2100      	movs	r1, #0
 8000958:	f004 f838 	bl	80049cc <memset>
  if(huart->Instance==USART2)
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	4a1b      	ldr	r2, [pc, #108]	; (80009d0 <HAL_UART_MspInit+0x8c>)
 8000962:	4293      	cmp	r3, r2
 8000964:	d130      	bne.n	80009c8 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000966:	4b1b      	ldr	r3, [pc, #108]	; (80009d4 <HAL_UART_MspInit+0x90>)
 8000968:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800096a:	4b1a      	ldr	r3, [pc, #104]	; (80009d4 <HAL_UART_MspInit+0x90>)
 800096c:	2180      	movs	r1, #128	; 0x80
 800096e:	0289      	lsls	r1, r1, #10
 8000970:	430a      	orrs	r2, r1
 8000972:	63da      	str	r2, [r3, #60]	; 0x3c
 8000974:	4b17      	ldr	r3, [pc, #92]	; (80009d4 <HAL_UART_MspInit+0x90>)
 8000976:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000978:	2380      	movs	r3, #128	; 0x80
 800097a:	029b      	lsls	r3, r3, #10
 800097c:	4013      	ands	r3, r2
 800097e:	613b      	str	r3, [r7, #16]
 8000980:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000982:	4b14      	ldr	r3, [pc, #80]	; (80009d4 <HAL_UART_MspInit+0x90>)
 8000984:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000986:	4b13      	ldr	r3, [pc, #76]	; (80009d4 <HAL_UART_MspInit+0x90>)
 8000988:	2101      	movs	r1, #1
 800098a:	430a      	orrs	r2, r1
 800098c:	635a      	str	r2, [r3, #52]	; 0x34
 800098e:	4b11      	ldr	r3, [pc, #68]	; (80009d4 <HAL_UART_MspInit+0x90>)
 8000990:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000992:	2201      	movs	r2, #1
 8000994:	4013      	ands	r3, r2
 8000996:	60fb      	str	r3, [r7, #12]
 8000998:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 800099a:	0021      	movs	r1, r4
 800099c:	187b      	adds	r3, r7, r1
 800099e:	220c      	movs	r2, #12
 80009a0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009a2:	187b      	adds	r3, r7, r1
 80009a4:	2202      	movs	r2, #2
 80009a6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009a8:	187b      	adds	r3, r7, r1
 80009aa:	2201      	movs	r2, #1
 80009ac:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ae:	187b      	adds	r3, r7, r1
 80009b0:	2200      	movs	r2, #0
 80009b2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80009b4:	187b      	adds	r3, r7, r1
 80009b6:	2201      	movs	r2, #1
 80009b8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009ba:	187a      	adds	r2, r7, r1
 80009bc:	23a0      	movs	r3, #160	; 0xa0
 80009be:	05db      	lsls	r3, r3, #23
 80009c0:	0011      	movs	r1, r2
 80009c2:	0018      	movs	r0, r3
 80009c4:	f001 f962 	bl	8001c8c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80009c8:	46c0      	nop			; (mov r8, r8)
 80009ca:	46bd      	mov	sp, r7
 80009cc:	b00b      	add	sp, #44	; 0x2c
 80009ce:	bd90      	pop	{r4, r7, pc}
 80009d0:	40004400 	.word	0x40004400
 80009d4:	40021000 	.word	0x40021000

080009d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009dc:	e7fe      	b.n	80009dc <NMI_Handler+0x4>

080009de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009de:	b580      	push	{r7, lr}
 80009e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009e2:	e7fe      	b.n	80009e2 <HardFault_Handler+0x4>

080009e4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80009e8:	46c0      	nop			; (mov r8, r8)
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}

080009ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009ee:	b580      	push	{r7, lr}
 80009f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009f2:	46c0      	nop			; (mov r8, r8)
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bd80      	pop	{r7, pc}

080009f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009fc:	f001 f83c 	bl	8001a78 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a00:	46c0      	nop			; (mov r8, r8)
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}
	...

08000a08 <BSP_SPI1_Init>:
/**
  * @brief  Initializes SPI HAL.
  * @retval BSP status
  */
int32_t BSP_SPI1_Init(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b082      	sub	sp, #8
 8000a0c:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	607b      	str	r3, [r7, #4]

  hspi1.Instance  = SPI1;
 8000a12:	4b12      	ldr	r3, [pc, #72]	; (8000a5c <BSP_SPI1_Init+0x54>)
 8000a14:	4a12      	ldr	r2, [pc, #72]	; (8000a60 <BSP_SPI1_Init+0x58>)
 8000a16:	601a      	str	r2, [r3, #0]

  if(SPI1InitCounter++ == 0)
 8000a18:	4b12      	ldr	r3, [pc, #72]	; (8000a64 <BSP_SPI1_Init+0x5c>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	1c59      	adds	r1, r3, #1
 8000a1e:	4a11      	ldr	r2, [pc, #68]	; (8000a64 <BSP_SPI1_Init+0x5c>)
 8000a20:	6011      	str	r1, [r2, #0]
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d115      	bne.n	8000a52 <BSP_SPI1_Init+0x4a>
  {
    if (HAL_SPI_GetState(&hspi1) == HAL_SPI_STATE_RESET)
 8000a26:	4b0d      	ldr	r3, [pc, #52]	; (8000a5c <BSP_SPI1_Init+0x54>)
 8000a28:	0018      	movs	r0, r3
 8000a2a:	f002 ffb7 	bl	800399c <HAL_SPI_GetState>
 8000a2e:	1e03      	subs	r3, r0, #0
 8000a30:	d10f      	bne.n	8000a52 <BSP_SPI1_Init+0x4a>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 0U)
        /* Init the SPI Msp */
        SPI1_MspInit(&hspi1);
 8000a32:	4b0a      	ldr	r3, [pc, #40]	; (8000a5c <BSP_SPI1_Init+0x54>)
 8000a34:	0018      	movs	r0, r3
 8000a36:	f000 f8fb 	bl	8000c30 <SPI1_MspInit>
            {
                return BSP_ERROR_MSP_FAILURE;
            }
        }
#endif
        if(ret == BSP_ERROR_NONE)
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d108      	bne.n	8000a52 <BSP_SPI1_Init+0x4a>
        {
            /* Init the SPI */
            if (MX_SPI1_Init(&hspi1) != HAL_OK)
 8000a40:	4b06      	ldr	r3, [pc, #24]	; (8000a5c <BSP_SPI1_Init+0x54>)
 8000a42:	0018      	movs	r0, r3
 8000a44:	f000 f8ac 	bl	8000ba0 <MX_SPI1_Init>
 8000a48:	1e03      	subs	r3, r0, #0
 8000a4a:	d002      	beq.n	8000a52 <BSP_SPI1_Init+0x4a>
            {
                ret = BSP_ERROR_BUS_FAILURE;
 8000a4c:	2308      	movs	r3, #8
 8000a4e:	425b      	negs	r3, r3
 8000a50:	607b      	str	r3, [r7, #4]
            }
        }
    }
  }

  return ret;
 8000a52:	687b      	ldr	r3, [r7, #4]
}
 8000a54:	0018      	movs	r0, r3
 8000a56:	46bd      	mov	sp, r7
 8000a58:	b002      	add	sp, #8
 8000a5a:	bd80      	pop	{r7, pc}
 8000a5c:	200001f4 	.word	0x200001f4
 8000a60:	40013000 	.word	0x40013000
 8000a64:	20000088 	.word	0x20000088

08000a68 <BSP_SPI1_DeInit>:
  * @brief  DeInitializes SPI HAL.
  * @retval None
  * @retval BSP status
  */
int32_t BSP_SPI1_DeInit(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b082      	sub	sp, #8
 8000a6c:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_BUS_FAILURE;
 8000a6e:	2308      	movs	r3, #8
 8000a70:	425b      	negs	r3, r3
 8000a72:	607b      	str	r3, [r7, #4]
  if (SPI1InitCounter > 0)
 8000a74:	4b0e      	ldr	r3, [pc, #56]	; (8000ab0 <BSP_SPI1_DeInit+0x48>)
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d014      	beq.n	8000aa6 <BSP_SPI1_DeInit+0x3e>
  {
    if (--SPI1InitCounter == 0)
 8000a7c:	4b0c      	ldr	r3, [pc, #48]	; (8000ab0 <BSP_SPI1_DeInit+0x48>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	1e5a      	subs	r2, r3, #1
 8000a82:	4b0b      	ldr	r3, [pc, #44]	; (8000ab0 <BSP_SPI1_DeInit+0x48>)
 8000a84:	601a      	str	r2, [r3, #0]
 8000a86:	4b0a      	ldr	r3, [pc, #40]	; (8000ab0 <BSP_SPI1_DeInit+0x48>)
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d10b      	bne.n	8000aa6 <BSP_SPI1_DeInit+0x3e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 0U)
      SPI1_MspDeInit(&hspi1);
 8000a8e:	4b09      	ldr	r3, [pc, #36]	; (8000ab4 <BSP_SPI1_DeInit+0x4c>)
 8000a90:	0018      	movs	r0, r3
 8000a92:	f000 f935 	bl	8000d00 <SPI1_MspDeInit>
#endif
      /* DeInit the SPI*/
      if (HAL_SPI_DeInit(&hspi1) == HAL_OK)
 8000a96:	4b07      	ldr	r3, [pc, #28]	; (8000ab4 <BSP_SPI1_DeInit+0x4c>)
 8000a98:	0018      	movs	r0, r3
 8000a9a:	f002 facf 	bl	800303c <HAL_SPI_DeInit>
 8000a9e:	1e03      	subs	r3, r0, #0
 8000aa0:	d101      	bne.n	8000aa6 <BSP_SPI1_DeInit+0x3e>
      {
        ret = BSP_ERROR_NONE;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	607b      	str	r3, [r7, #4]
      }
    }
  }
  return ret;
 8000aa6:	687b      	ldr	r3, [r7, #4]
}
 8000aa8:	0018      	movs	r0, r3
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	b002      	add	sp, #8
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	20000088 	.word	0x20000088
 8000ab4:	200001f4 	.word	0x200001f4

08000ab8 <BSP_SPI1_Send>:
  * @param  pData: Pointer to data buffer to send
  * @param  Length: Length of data in byte
  * @retval BSP status
  */
int32_t BSP_SPI1_Send(uint8_t *pData, uint16_t Length)
{
 8000ab8:	b590      	push	{r4, r7, lr}
 8000aba:	b085      	sub	sp, #20
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
 8000ac0:	000a      	movs	r2, r1
 8000ac2:	1cbb      	adds	r3, r7, #2
 8000ac4:	801a      	strh	r2, [r3, #0]
  int32_t ret = BSP_ERROR_NONE;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	60fb      	str	r3, [r7, #12]

  if(HAL_SPI_Transmit(&hspi1, pData, Length, BUS_SPI1_POLL_TIMEOUT) != HAL_OK)
 8000aca:	2380      	movs	r3, #128	; 0x80
 8000acc:	015c      	lsls	r4, r3, #5
 8000ace:	1cbb      	adds	r3, r7, #2
 8000ad0:	881a      	ldrh	r2, [r3, #0]
 8000ad2:	6879      	ldr	r1, [r7, #4]
 8000ad4:	4806      	ldr	r0, [pc, #24]	; (8000af0 <BSP_SPI1_Send+0x38>)
 8000ad6:	0023      	movs	r3, r4
 8000ad8:	f002 fae9 	bl	80030ae <HAL_SPI_Transmit>
 8000adc:	1e03      	subs	r3, r0, #0
 8000ade:	d002      	beq.n	8000ae6 <BSP_SPI1_Send+0x2e>
  {
      ret = BSP_ERROR_UNKNOWN_FAILURE;
 8000ae0:	2306      	movs	r3, #6
 8000ae2:	425b      	negs	r3, r3
 8000ae4:	60fb      	str	r3, [r7, #12]
  }
  return ret;
 8000ae6:	68fb      	ldr	r3, [r7, #12]
}
 8000ae8:	0018      	movs	r0, r3
 8000aea:	46bd      	mov	sp, r7
 8000aec:	b005      	add	sp, #20
 8000aee:	bd90      	pop	{r4, r7, pc}
 8000af0:	200001f4 	.word	0x200001f4

08000af4 <BSP_SPI1_Recv>:
  * @param  pData: Pointer to data buffer to receive
  * @param  Length: Length of data in byte
  * @retval BSP status
  */
int32_t  BSP_SPI1_Recv(uint8_t *pData, uint16_t Length)
{
 8000af4:	b590      	push	{r4, r7, lr}
 8000af6:	b085      	sub	sp, #20
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
 8000afc:	000a      	movs	r2, r1
 8000afe:	1cbb      	adds	r3, r7, #2
 8000b00:	801a      	strh	r2, [r3, #0]
  int32_t ret = BSP_ERROR_NONE;
 8000b02:	2300      	movs	r3, #0
 8000b04:	60fb      	str	r3, [r7, #12]

  if(HAL_SPI_Receive(&hspi1, pData, Length, BUS_SPI1_POLL_TIMEOUT) != HAL_OK)
 8000b06:	2380      	movs	r3, #128	; 0x80
 8000b08:	015c      	lsls	r4, r3, #5
 8000b0a:	1cbb      	adds	r3, r7, #2
 8000b0c:	881a      	ldrh	r2, [r3, #0]
 8000b0e:	6879      	ldr	r1, [r7, #4]
 8000b10:	4806      	ldr	r0, [pc, #24]	; (8000b2c <BSP_SPI1_Recv+0x38>)
 8000b12:	0023      	movs	r3, r4
 8000b14:	f002 fc24 	bl	8003360 <HAL_SPI_Receive>
 8000b18:	1e03      	subs	r3, r0, #0
 8000b1a:	d002      	beq.n	8000b22 <BSP_SPI1_Recv+0x2e>
  {
      ret = BSP_ERROR_UNKNOWN_FAILURE;
 8000b1c:	2306      	movs	r3, #6
 8000b1e:	425b      	negs	r3, r3
 8000b20:	60fb      	str	r3, [r7, #12]
  }
  return ret;
 8000b22:	68fb      	ldr	r3, [r7, #12]
}
 8000b24:	0018      	movs	r0, r3
 8000b26:	46bd      	mov	sp, r7
 8000b28:	b005      	add	sp, #20
 8000b2a:	bd90      	pop	{r4, r7, pc}
 8000b2c:	200001f4 	.word	0x200001f4

08000b30 <BSP_SPI2_Init>:
/**
  * @brief  Initializes SPI HAL.
  * @retval BSP status
  */
int32_t BSP_SPI2_Init(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b082      	sub	sp, #8
 8000b34:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8000b36:	2300      	movs	r3, #0
 8000b38:	607b      	str	r3, [r7, #4]

  hspi2.Instance  = SPI2;
 8000b3a:	4b12      	ldr	r3, [pc, #72]	; (8000b84 <BSP_SPI2_Init+0x54>)
 8000b3c:	4a12      	ldr	r2, [pc, #72]	; (8000b88 <BSP_SPI2_Init+0x58>)
 8000b3e:	601a      	str	r2, [r3, #0]

  if(SPI2InitCounter++ == 0)
 8000b40:	4b12      	ldr	r3, [pc, #72]	; (8000b8c <BSP_SPI2_Init+0x5c>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	1c59      	adds	r1, r3, #1
 8000b46:	4a11      	ldr	r2, [pc, #68]	; (8000b8c <BSP_SPI2_Init+0x5c>)
 8000b48:	6011      	str	r1, [r2, #0]
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d115      	bne.n	8000b7a <BSP_SPI2_Init+0x4a>
  {
    if (HAL_SPI_GetState(&hspi2) == HAL_SPI_STATE_RESET)
 8000b4e:	4b0d      	ldr	r3, [pc, #52]	; (8000b84 <BSP_SPI2_Init+0x54>)
 8000b50:	0018      	movs	r0, r3
 8000b52:	f002 ff23 	bl	800399c <HAL_SPI_GetState>
 8000b56:	1e03      	subs	r3, r0, #0
 8000b58:	d10f      	bne.n	8000b7a <BSP_SPI2_Init+0x4a>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 0U)
        /* Init the SPI Msp */
        SPI2_MspInit(&hspi2);
 8000b5a:	4b0a      	ldr	r3, [pc, #40]	; (8000b84 <BSP_SPI2_Init+0x54>)
 8000b5c:	0018      	movs	r0, r3
 8000b5e:	f000 f93b 	bl	8000dd8 <SPI2_MspInit>
            {
                return BSP_ERROR_MSP_FAILURE;
            }
        }
#endif
        if(ret == BSP_ERROR_NONE)
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d108      	bne.n	8000b7a <BSP_SPI2_Init+0x4a>
        {
            /* Init the SPI */
            if (MX_SPI2_Init(&hspi2) != HAL_OK)
 8000b68:	4b06      	ldr	r3, [pc, #24]	; (8000b84 <BSP_SPI2_Init+0x54>)
 8000b6a:	0018      	movs	r0, r3
 8000b6c:	f000 f8ec 	bl	8000d48 <MX_SPI2_Init>
 8000b70:	1e03      	subs	r3, r0, #0
 8000b72:	d002      	beq.n	8000b7a <BSP_SPI2_Init+0x4a>
            {
                ret = BSP_ERROR_BUS_FAILURE;
 8000b74:	2308      	movs	r3, #8
 8000b76:	425b      	negs	r3, r3
 8000b78:	607b      	str	r3, [r7, #4]
            }
        }
    }
  }

  return ret;
 8000b7a:	687b      	ldr	r3, [r7, #4]
}
 8000b7c:	0018      	movs	r0, r3
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	b002      	add	sp, #8
 8000b82:	bd80      	pop	{r7, pc}
 8000b84:	20000190 	.word	0x20000190
 8000b88:	40003800 	.word	0x40003800
 8000b8c:	2000008c 	.word	0x2000008c

08000b90 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 8000b90:	b580      	push	{r7, lr}
 8000b92:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8000b94:	f000 ff82 	bl	8001a9c <HAL_GetTick>
 8000b98:	0003      	movs	r3, r0
}
 8000b9a:	0018      	movs	r0, r3
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bd80      	pop	{r7, pc}

08000ba0 <MX_SPI1_Init>:

/* SPI1 init function */

__weak HAL_StatusTypeDef MX_SPI1_Init(SPI_HandleTypeDef* hspi)
{
 8000ba0:	b590      	push	{r4, r7, lr}
 8000ba2:	b085      	sub	sp, #20
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8000ba8:	240f      	movs	r4, #15
 8000baa:	193b      	adds	r3, r7, r4
 8000bac:	2200      	movs	r2, #0
 8000bae:	701a      	strb	r2, [r3, #0]

  hspi->Instance = SPI1;
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	4a1e      	ldr	r2, [pc, #120]	; (8000c2c <MX_SPI1_Init+0x8c>)
 8000bb4:	601a      	str	r2, [r3, #0]
  hspi->Init.Mode = SPI_MODE_MASTER;
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	2282      	movs	r2, #130	; 0x82
 8000bba:	0052      	lsls	r2, r2, #1
 8000bbc:	605a      	str	r2, [r3, #4]
  hspi->Init.Direction = SPI_DIRECTION_2LINES;
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	609a      	str	r2, [r3, #8]
  hspi->Init.DataSize = SPI_DATASIZE_4BIT;
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	22c0      	movs	r2, #192	; 0xc0
 8000bc8:	0092      	lsls	r2, r2, #2
 8000bca:	60da      	str	r2, [r3, #12]
  hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	2200      	movs	r2, #0
 8000bd0:	611a      	str	r2, [r3, #16]
  hspi->Init.CLKPhase = SPI_PHASE_1EDGE;
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	615a      	str	r2, [r3, #20]
  hspi->Init.NSS = SPI_NSS_SOFT;
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	2280      	movs	r2, #128	; 0x80
 8000bdc:	0092      	lsls	r2, r2, #2
 8000bde:	619a      	str	r2, [r3, #24]
  hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	2200      	movs	r2, #0
 8000be4:	61da      	str	r2, [r3, #28]
  hspi->Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	2200      	movs	r2, #0
 8000bea:	621a      	str	r2, [r3, #32]
  hspi->Init.TIMode = SPI_TIMODE_DISABLE;
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	2200      	movs	r2, #0
 8000bf0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi->Init.CRCPolynomial = 7;
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	2207      	movs	r2, #7
 8000bfc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	2200      	movs	r2, #0
 8000c02:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	2208      	movs	r2, #8
 8000c08:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(hspi) != HAL_OK)
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	0018      	movs	r0, r3
 8000c0e:	f002 f95d 	bl	8002ecc <HAL_SPI_Init>
 8000c12:	1e03      	subs	r3, r0, #0
 8000c14:	d002      	beq.n	8000c1c <MX_SPI1_Init+0x7c>
  {
    ret = HAL_ERROR;
 8000c16:	193b      	adds	r3, r7, r4
 8000c18:	2201      	movs	r2, #1
 8000c1a:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 8000c1c:	230f      	movs	r3, #15
 8000c1e:	18fb      	adds	r3, r7, r3
 8000c20:	781b      	ldrb	r3, [r3, #0]
}
 8000c22:	0018      	movs	r0, r3
 8000c24:	46bd      	mov	sp, r7
 8000c26:	b005      	add	sp, #20
 8000c28:	bd90      	pop	{r4, r7, pc}
 8000c2a:	46c0      	nop			; (mov r8, r8)
 8000c2c:	40013000 	.word	0x40013000

08000c30 <SPI1_MspInit>:

static void SPI1_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000c30:	b590      	push	{r4, r7, lr}
 8000c32:	b08b      	sub	sp, #44	; 0x2c
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000c38:	4b30      	ldr	r3, [pc, #192]	; (8000cfc <SPI1_MspInit+0xcc>)
 8000c3a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000c3c:	4b2f      	ldr	r3, [pc, #188]	; (8000cfc <SPI1_MspInit+0xcc>)
 8000c3e:	2180      	movs	r1, #128	; 0x80
 8000c40:	0149      	lsls	r1, r1, #5
 8000c42:	430a      	orrs	r2, r1
 8000c44:	641a      	str	r2, [r3, #64]	; 0x40
 8000c46:	4b2d      	ldr	r3, [pc, #180]	; (8000cfc <SPI1_MspInit+0xcc>)
 8000c48:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000c4a:	2380      	movs	r3, #128	; 0x80
 8000c4c:	015b      	lsls	r3, r3, #5
 8000c4e:	4013      	ands	r3, r2
 8000c50:	613b      	str	r3, [r7, #16]
 8000c52:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c54:	4b29      	ldr	r3, [pc, #164]	; (8000cfc <SPI1_MspInit+0xcc>)
 8000c56:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000c58:	4b28      	ldr	r3, [pc, #160]	; (8000cfc <SPI1_MspInit+0xcc>)
 8000c5a:	2101      	movs	r1, #1
 8000c5c:	430a      	orrs	r2, r1
 8000c5e:	635a      	str	r2, [r3, #52]	; 0x34
 8000c60:	4b26      	ldr	r3, [pc, #152]	; (8000cfc <SPI1_MspInit+0xcc>)
 8000c62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c64:	2201      	movs	r2, #1
 8000c66:	4013      	ands	r3, r2
 8000c68:	60fb      	str	r3, [r7, #12]
 8000c6a:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = BUS_SPI1_SCK_GPIO_PIN;
 8000c6c:	2414      	movs	r4, #20
 8000c6e:	193b      	adds	r3, r7, r4
 8000c70:	2220      	movs	r2, #32
 8000c72:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c74:	193b      	adds	r3, r7, r4
 8000c76:	2202      	movs	r2, #2
 8000c78:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7a:	193b      	adds	r3, r7, r4
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c80:	193b      	adds	r3, r7, r4
 8000c82:	2200      	movs	r2, #0
 8000c84:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = BUS_SPI1_SCK_GPIO_AF;
 8000c86:	193b      	adds	r3, r7, r4
 8000c88:	2200      	movs	r2, #0
 8000c8a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(BUS_SPI1_SCK_GPIO_PORT, &GPIO_InitStruct);
 8000c8c:	193a      	adds	r2, r7, r4
 8000c8e:	23a0      	movs	r3, #160	; 0xa0
 8000c90:	05db      	lsls	r3, r3, #23
 8000c92:	0011      	movs	r1, r2
 8000c94:	0018      	movs	r0, r3
 8000c96:	f000 fff9 	bl	8001c8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI1_MISO_GPIO_PIN;
 8000c9a:	193b      	adds	r3, r7, r4
 8000c9c:	2240      	movs	r2, #64	; 0x40
 8000c9e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca0:	193b      	adds	r3, r7, r4
 8000ca2:	2202      	movs	r2, #2
 8000ca4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca6:	193b      	adds	r3, r7, r4
 8000ca8:	2200      	movs	r2, #0
 8000caa:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cac:	193b      	adds	r3, r7, r4
 8000cae:	2200      	movs	r2, #0
 8000cb0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = BUS_SPI1_MISO_GPIO_AF;
 8000cb2:	193b      	adds	r3, r7, r4
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(BUS_SPI1_MISO_GPIO_PORT, &GPIO_InitStruct);
 8000cb8:	193a      	adds	r2, r7, r4
 8000cba:	23a0      	movs	r3, #160	; 0xa0
 8000cbc:	05db      	lsls	r3, r3, #23
 8000cbe:	0011      	movs	r1, r2
 8000cc0:	0018      	movs	r0, r3
 8000cc2:	f000 ffe3 	bl	8001c8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI1_MOSI_GPIO_PIN;
 8000cc6:	0021      	movs	r1, r4
 8000cc8:	187b      	adds	r3, r7, r1
 8000cca:	2280      	movs	r2, #128	; 0x80
 8000ccc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cce:	187b      	adds	r3, r7, r1
 8000cd0:	2202      	movs	r2, #2
 8000cd2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd4:	187b      	adds	r3, r7, r1
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cda:	187b      	adds	r3, r7, r1
 8000cdc:	2200      	movs	r2, #0
 8000cde:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = BUS_SPI1_MOSI_GPIO_AF;
 8000ce0:	187b      	adds	r3, r7, r1
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(BUS_SPI1_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8000ce6:	187a      	adds	r2, r7, r1
 8000ce8:	23a0      	movs	r3, #160	; 0xa0
 8000cea:	05db      	lsls	r3, r3, #23
 8000cec:	0011      	movs	r1, r2
 8000cee:	0018      	movs	r0, r3
 8000cf0:	f000 ffcc 	bl	8001c8c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
}
 8000cf4:	46c0      	nop			; (mov r8, r8)
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	b00b      	add	sp, #44	; 0x2c
 8000cfa:	bd90      	pop	{r4, r7, pc}
 8000cfc:	40021000 	.word	0x40021000

08000d00 <SPI1_MspDeInit>:

static void SPI1_MspDeInit(SPI_HandleTypeDef* spiHandle)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b082      	sub	sp, #8
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SPI1_MspDeInit 0 */

  /* USER CODE END SPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI1_CLK_DISABLE();
 8000d08:	4b0d      	ldr	r3, [pc, #52]	; (8000d40 <SPI1_MspDeInit+0x40>)
 8000d0a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d0c:	4b0c      	ldr	r3, [pc, #48]	; (8000d40 <SPI1_MspDeInit+0x40>)
 8000d0e:	490d      	ldr	r1, [pc, #52]	; (8000d44 <SPI1_MspDeInit+0x44>)
 8000d10:	400a      	ands	r2, r1
 8000d12:	641a      	str	r2, [r3, #64]	; 0x40
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    HAL_GPIO_DeInit(BUS_SPI1_SCK_GPIO_PORT, BUS_SPI1_SCK_GPIO_PIN);
 8000d14:	23a0      	movs	r3, #160	; 0xa0
 8000d16:	05db      	lsls	r3, r3, #23
 8000d18:	2120      	movs	r1, #32
 8000d1a:	0018      	movs	r0, r3
 8000d1c:	f001 f91a 	bl	8001f54 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_SPI1_MISO_GPIO_PORT, BUS_SPI1_MISO_GPIO_PIN);
 8000d20:	23a0      	movs	r3, #160	; 0xa0
 8000d22:	05db      	lsls	r3, r3, #23
 8000d24:	2140      	movs	r1, #64	; 0x40
 8000d26:	0018      	movs	r0, r3
 8000d28:	f001 f914 	bl	8001f54 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_SPI1_MOSI_GPIO_PORT, BUS_SPI1_MOSI_GPIO_PIN);
 8000d2c:	23a0      	movs	r3, #160	; 0xa0
 8000d2e:	05db      	lsls	r3, r3, #23
 8000d30:	2180      	movs	r1, #128	; 0x80
 8000d32:	0018      	movs	r0, r3
 8000d34:	f001 f90e 	bl	8001f54 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN SPI1_MspDeInit 1 */

  /* USER CODE END SPI1_MspDeInit 1 */
}
 8000d38:	46c0      	nop			; (mov r8, r8)
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	b002      	add	sp, #8
 8000d3e:	bd80      	pop	{r7, pc}
 8000d40:	40021000 	.word	0x40021000
 8000d44:	ffffefff 	.word	0xffffefff

08000d48 <MX_SPI2_Init>:

/* SPI2 init function */

__weak HAL_StatusTypeDef MX_SPI2_Init(SPI_HandleTypeDef* hspi)
{
 8000d48:	b590      	push	{r4, r7, lr}
 8000d4a:	b085      	sub	sp, #20
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8000d50:	240f      	movs	r4, #15
 8000d52:	193b      	adds	r3, r7, r4
 8000d54:	2200      	movs	r2, #0
 8000d56:	701a      	strb	r2, [r3, #0]

  hspi->Instance = SPI2;
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	4a1e      	ldr	r2, [pc, #120]	; (8000dd4 <MX_SPI2_Init+0x8c>)
 8000d5c:	601a      	str	r2, [r3, #0]
  hspi->Init.Mode = SPI_MODE_MASTER;
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	2282      	movs	r2, #130	; 0x82
 8000d62:	0052      	lsls	r2, r2, #1
 8000d64:	605a      	str	r2, [r3, #4]
  hspi->Init.Direction = SPI_DIRECTION_2LINES;
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	2200      	movs	r2, #0
 8000d6a:	609a      	str	r2, [r3, #8]
  hspi->Init.DataSize = SPI_DATASIZE_4BIT;
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	22c0      	movs	r2, #192	; 0xc0
 8000d70:	0092      	lsls	r2, r2, #2
 8000d72:	60da      	str	r2, [r3, #12]
  hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	2200      	movs	r2, #0
 8000d78:	611a      	str	r2, [r3, #16]
  hspi->Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	615a      	str	r2, [r3, #20]
  hspi->Init.NSS = SPI_NSS_SOFT;
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	2280      	movs	r2, #128	; 0x80
 8000d84:	0092      	lsls	r2, r2, #2
 8000d86:	619a      	str	r2, [r3, #24]
  hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	61da      	str	r2, [r3, #28]
  hspi->Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	2200      	movs	r2, #0
 8000d92:	621a      	str	r2, [r3, #32]
  hspi->Init.TIMode = SPI_TIMODE_DISABLE;
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	2200      	movs	r2, #0
 8000d98:	625a      	str	r2, [r3, #36]	; 0x24
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi->Init.CRCPolynomial = 7;
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	2207      	movs	r2, #7
 8000da4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	2200      	movs	r2, #0
 8000daa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	2208      	movs	r2, #8
 8000db0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(hspi) != HAL_OK)
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	0018      	movs	r0, r3
 8000db6:	f002 f889 	bl	8002ecc <HAL_SPI_Init>
 8000dba:	1e03      	subs	r3, r0, #0
 8000dbc:	d002      	beq.n	8000dc4 <MX_SPI2_Init+0x7c>
  {
    ret = HAL_ERROR;
 8000dbe:	193b      	adds	r3, r7, r4
 8000dc0:	2201      	movs	r2, #1
 8000dc2:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 8000dc4:	230f      	movs	r3, #15
 8000dc6:	18fb      	adds	r3, r7, r3
 8000dc8:	781b      	ldrb	r3, [r3, #0]
}
 8000dca:	0018      	movs	r0, r3
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	b005      	add	sp, #20
 8000dd0:	bd90      	pop	{r4, r7, pc}
 8000dd2:	46c0      	nop			; (mov r8, r8)
 8000dd4:	40003800 	.word	0x40003800

08000dd8 <SPI2_MspInit>:

static void SPI2_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000dd8:	b590      	push	{r4, r7, lr}
 8000dda:	b08b      	sub	sp, #44	; 0x2c
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000de0:	4b35      	ldr	r3, [pc, #212]	; (8000eb8 <SPI2_MspInit+0xe0>)
 8000de2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000de4:	4b34      	ldr	r3, [pc, #208]	; (8000eb8 <SPI2_MspInit+0xe0>)
 8000de6:	2180      	movs	r1, #128	; 0x80
 8000de8:	01c9      	lsls	r1, r1, #7
 8000dea:	430a      	orrs	r2, r1
 8000dec:	63da      	str	r2, [r3, #60]	; 0x3c
 8000dee:	4b32      	ldr	r3, [pc, #200]	; (8000eb8 <SPI2_MspInit+0xe0>)
 8000df0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000df2:	2380      	movs	r3, #128	; 0x80
 8000df4:	01db      	lsls	r3, r3, #7
 8000df6:	4013      	ands	r3, r2
 8000df8:	613b      	str	r3, [r7, #16]
 8000dfa:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dfc:	4b2e      	ldr	r3, [pc, #184]	; (8000eb8 <SPI2_MspInit+0xe0>)
 8000dfe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000e00:	4b2d      	ldr	r3, [pc, #180]	; (8000eb8 <SPI2_MspInit+0xe0>)
 8000e02:	2104      	movs	r1, #4
 8000e04:	430a      	orrs	r2, r1
 8000e06:	635a      	str	r2, [r3, #52]	; 0x34
 8000e08:	4b2b      	ldr	r3, [pc, #172]	; (8000eb8 <SPI2_MspInit+0xe0>)
 8000e0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e0c:	2204      	movs	r2, #4
 8000e0e:	4013      	ands	r3, r2
 8000e10:	60fb      	str	r3, [r7, #12]
 8000e12:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e14:	4b28      	ldr	r3, [pc, #160]	; (8000eb8 <SPI2_MspInit+0xe0>)
 8000e16:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000e18:	4b27      	ldr	r3, [pc, #156]	; (8000eb8 <SPI2_MspInit+0xe0>)
 8000e1a:	2102      	movs	r1, #2
 8000e1c:	430a      	orrs	r2, r1
 8000e1e:	635a      	str	r2, [r3, #52]	; 0x34
 8000e20:	4b25      	ldr	r3, [pc, #148]	; (8000eb8 <SPI2_MspInit+0xe0>)
 8000e22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e24:	2202      	movs	r2, #2
 8000e26:	4013      	ands	r3, r2
 8000e28:	60bb      	str	r3, [r7, #8]
 8000e2a:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB13     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = BUS_SPI2_MISO_GPIO_PIN;
 8000e2c:	2414      	movs	r4, #20
 8000e2e:	193b      	adds	r3, r7, r4
 8000e30:	2204      	movs	r2, #4
 8000e32:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e34:	193b      	adds	r3, r7, r4
 8000e36:	2202      	movs	r2, #2
 8000e38:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3a:	193b      	adds	r3, r7, r4
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e40:	193b      	adds	r3, r7, r4
 8000e42:	2203      	movs	r2, #3
 8000e44:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = BUS_SPI2_MISO_GPIO_AF;
 8000e46:	193b      	adds	r3, r7, r4
 8000e48:	2201      	movs	r2, #1
 8000e4a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(BUS_SPI2_MISO_GPIO_PORT, &GPIO_InitStruct);
 8000e4c:	193b      	adds	r3, r7, r4
 8000e4e:	4a1b      	ldr	r2, [pc, #108]	; (8000ebc <SPI2_MspInit+0xe4>)
 8000e50:	0019      	movs	r1, r3
 8000e52:	0010      	movs	r0, r2
 8000e54:	f000 ff1a 	bl	8001c8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI2_MOSI_GPIO_PIN;
 8000e58:	193b      	adds	r3, r7, r4
 8000e5a:	2208      	movs	r2, #8
 8000e5c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e5e:	193b      	adds	r3, r7, r4
 8000e60:	2202      	movs	r2, #2
 8000e62:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e64:	193b      	adds	r3, r7, r4
 8000e66:	2200      	movs	r2, #0
 8000e68:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e6a:	193b      	adds	r3, r7, r4
 8000e6c:	2203      	movs	r2, #3
 8000e6e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = BUS_SPI2_MOSI_GPIO_AF;
 8000e70:	193b      	adds	r3, r7, r4
 8000e72:	2201      	movs	r2, #1
 8000e74:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(BUS_SPI2_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8000e76:	193b      	adds	r3, r7, r4
 8000e78:	4a10      	ldr	r2, [pc, #64]	; (8000ebc <SPI2_MspInit+0xe4>)
 8000e7a:	0019      	movs	r1, r3
 8000e7c:	0010      	movs	r0, r2
 8000e7e:	f000 ff05 	bl	8001c8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI2_SCK_GPIO_PIN;
 8000e82:	0021      	movs	r1, r4
 8000e84:	187b      	adds	r3, r7, r1
 8000e86:	2280      	movs	r2, #128	; 0x80
 8000e88:	0192      	lsls	r2, r2, #6
 8000e8a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e8c:	187b      	adds	r3, r7, r1
 8000e8e:	2202      	movs	r2, #2
 8000e90:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e92:	187b      	adds	r3, r7, r1
 8000e94:	2200      	movs	r2, #0
 8000e96:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e98:	187b      	adds	r3, r7, r1
 8000e9a:	2203      	movs	r2, #3
 8000e9c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = BUS_SPI2_SCK_GPIO_AF;
 8000e9e:	187b      	adds	r3, r7, r1
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(BUS_SPI2_SCK_GPIO_PORT, &GPIO_InitStruct);
 8000ea4:	187b      	adds	r3, r7, r1
 8000ea6:	4a06      	ldr	r2, [pc, #24]	; (8000ec0 <SPI2_MspInit+0xe8>)
 8000ea8:	0019      	movs	r1, r3
 8000eaa:	0010      	movs	r0, r2
 8000eac:	f000 feee 	bl	8001c8c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
}
 8000eb0:	46c0      	nop			; (mov r8, r8)
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	b00b      	add	sp, #44	; 0x2c
 8000eb6:	bd90      	pop	{r4, r7, pc}
 8000eb8:	40021000 	.word	0x40021000
 8000ebc:	50000800 	.word	0x50000800
 8000ec0:	50000400 	.word	0x50000400

08000ec4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ec8:	46c0      	nop			; (mov r8, r8)
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}
	...

08000ed0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000ed0:	480d      	ldr	r0, [pc, #52]	; (8000f08 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000ed2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000ed4:	f7ff fff6 	bl	8000ec4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ed8:	480c      	ldr	r0, [pc, #48]	; (8000f0c <LoopForever+0x6>)
  ldr r1, =_edata
 8000eda:	490d      	ldr	r1, [pc, #52]	; (8000f10 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000edc:	4a0d      	ldr	r2, [pc, #52]	; (8000f14 <LoopForever+0xe>)
  movs r3, #0
 8000ede:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ee0:	e002      	b.n	8000ee8 <LoopCopyDataInit>

08000ee2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ee2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ee4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ee6:	3304      	adds	r3, #4

08000ee8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ee8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000eea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000eec:	d3f9      	bcc.n	8000ee2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000eee:	4a0a      	ldr	r2, [pc, #40]	; (8000f18 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ef0:	4c0a      	ldr	r4, [pc, #40]	; (8000f1c <LoopForever+0x16>)
  movs r3, #0
 8000ef2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ef4:	e001      	b.n	8000efa <LoopFillZerobss>

08000ef6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ef6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ef8:	3204      	adds	r2, #4

08000efa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000efa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000efc:	d3fb      	bcc.n	8000ef6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000efe:	f003 fd41 	bl	8004984 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000f02:	f7ff fb8b 	bl	800061c <main>

08000f06 <LoopForever>:

LoopForever:
  b LoopForever
 8000f06:	e7fe      	b.n	8000f06 <LoopForever>
  ldr   r0, =_estack
 8000f08:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8000f0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f10:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000f14:	08004a8c 	.word	0x08004a8c
  ldr r2, =_sbss
 8000f18:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000f1c:	20000268 	.word	0x20000268

08000f20 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000f20:	e7fe      	b.n	8000f20 <ADC1_COMP_IRQHandler>

08000f22 <MX_DISPLAY_Init>:

/**
 * Initialize DISPLAY application
 */
void MX_DISPLAY_Init(void)
{
 8000f22:	b580      	push	{r7, lr}
 8000f24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_DISPLAY_Init 0 */

  /* USER CODE END MX_DISPLAY_Init 0 */
  if(BSP_MEM_Init(0) != BSP_ERROR_NONE)
 8000f26:	2000      	movs	r0, #0
 8000f28:	f000 f9ee 	bl	8001308 <BSP_MEM_Init>
 8000f2c:	1e03      	subs	r3, r0, #0
 8000f2e:	d001      	beq.n	8000f34 <MX_DISPLAY_Init+0x12>
  {
    Error_Handler();
 8000f30:	f7ff fcda 	bl	80008e8 <Error_Handler>
  }
  if(BSP_LCD_Init(0, 0) != BSP_ERROR_NONE)
 8000f34:	2100      	movs	r1, #0
 8000f36:	2000      	movs	r0, #0
 8000f38:	f000 f81e 	bl	8000f78 <BSP_LCD_Init>
 8000f3c:	1e03      	subs	r3, r0, #0
 8000f3e:	d001      	beq.n	8000f44 <MX_DISPLAY_Init+0x22>
  {
    Error_Handler();
 8000f40:	f7ff fcd2 	bl	80008e8 <Error_Handler>
  }
  if(BSP_LCD_DisplayOn(0) != BSP_ERROR_NONE)
 8000f44:	2000      	movs	r0, #0
 8000f46:	f000 f835 	bl	8000fb4 <BSP_LCD_DisplayOn>
 8000f4a:	1e03      	subs	r3, r0, #0
 8000f4c:	d001      	beq.n	8000f52 <MX_DISPLAY_Init+0x30>
  {
    Error_Handler();
 8000f4e:	f7ff fccb 	bl	80008e8 <Error_Handler>
  }
  /* USER CODE BEGIN MX_DISPLAY_Init 1 */

  /* USER CODE END MX_DISPLAY_Init 1 */
}
 8000f52:	46c0      	nop			; (mov r8, r8)
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd80      	pop	{r7, pc}

08000f58 <MX_DISPLAY_Process>:

/**
 * DISPLAY application entry function
 */
void MX_DISPLAY_Process(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_DISPLAY_Process 0 */

  /* USER CODE END MX_DISPLAY_Process 0 */
  /* Wait for TE */
  while(TransferAllowed == 0);
 8000f5c:	46c0      	nop			; (mov r8, r8)
 8000f5e:	4b05      	ldr	r3, [pc, #20]	; (8000f74 <MX_DISPLAY_Process+0x1c>)
 8000f60:	781b      	ldrb	r3, [r3, #0]
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d0fb      	beq.n	8000f5e <MX_DISPLAY_Process+0x6>
  TransferAllowed = 0;
 8000f66:	4b03      	ldr	r3, [pc, #12]	; (8000f74 <MX_DISPLAY_Process+0x1c>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	701a      	strb	r2, [r3, #0]
  /* Display something */
  /* USER CODE BEGIN MX_DISPLAY_Process 1 */

  /* USER CODE END MX_DISPLAY_Process 1 */
}
 8000f6c:	46c0      	nop			; (mov r8, r8)
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	46c0      	nop			; (mov r8, r8)
 8000f74:	20000090 	.word	0x20000090

08000f78 <BSP_LCD_Init>:
  *                     or LCD_ORIENTATION_PORTRAIT_ROT180
  *                     or LCD_ORIENTATION_LANDSCAPE_ROT180
  * @retval BSP status
  */
int32_t BSP_LCD_Init(uint32_t Instance, uint32_t Orientation)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b084      	sub	sp, #16
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
 8000f80:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8000f82:	2300      	movs	r3, #0
 8000f84:	60fb      	str	r3, [r7, #12]

  if ((Instance >= LCD_INSTANCES_NBR ) || (Orientation > LCD_ORIENTATION_LANDSCAPE_ROT180))
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d102      	bne.n	8000f92 <BSP_LCD_Init+0x1a>
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	2b03      	cmp	r3, #3
 8000f90:	d903      	bls.n	8000f9a <BSP_LCD_Init+0x22>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8000f92:	2302      	movs	r3, #2
 8000f94:	425b      	negs	r3, r3
 8000f96:	60fb      	str	r3, [r7, #12]
 8000f98:	e007      	b.n	8000faa <BSP_LCD_Init+0x32>
  }
  else
  {
    /* Probe the LCD Component driver */
    ret = LCD_Probe(Instance, Orientation);
 8000f9a:	683a      	ldr	r2, [r7, #0]
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	0011      	movs	r1, r2
 8000fa0:	0018      	movs	r0, r3
 8000fa2:	f000 f935 	bl	8001210 <LCD_Probe>
 8000fa6:	0003      	movs	r3, r0
 8000fa8:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8000faa:	68fb      	ldr	r3, [r7, #12]
}
 8000fac:	0018      	movs	r0, r3
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	b004      	add	sp, #16
 8000fb2:	bd80      	pop	{r7, pc}

08000fb4 <BSP_LCD_DisplayOn>:
  * @brief  Switch On the display.
  * @param  Instance    LCD Instance
  * @retval BSP status
  */
int32_t BSP_LCD_DisplayOn(uint32_t Instance)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b084      	sub	sp, #16
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	60fb      	str	r3, [r7, #12]

  if(Instance >= LCD_INSTANCES_NBR)
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d003      	beq.n	8000fce <BSP_LCD_DisplayOn+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8000fc6:	2302      	movs	r3, #2
 8000fc8:	425b      	negs	r3, r3
 8000fca:	60fb      	str	r3, [r7, #12]
 8000fcc:	e014      	b.n	8000ff8 <BSP_LCD_DisplayOn+0x44>
  }
  else if(LcdDrv->DisplayOn != NULL)
 8000fce:	4b0d      	ldr	r3, [pc, #52]	; (8001004 <BSP_LCD_DisplayOn+0x50>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	68db      	ldr	r3, [r3, #12]
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d00c      	beq.n	8000ff2 <BSP_LCD_DisplayOn+0x3e>
  {
    if(LcdDrv->DisplayOn(LcdCompObj) < 0)
 8000fd8:	4b0a      	ldr	r3, [pc, #40]	; (8001004 <BSP_LCD_DisplayOn+0x50>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	68da      	ldr	r2, [r3, #12]
 8000fde:	4b0a      	ldr	r3, [pc, #40]	; (8001008 <BSP_LCD_DisplayOn+0x54>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	0018      	movs	r0, r3
 8000fe4:	4790      	blx	r2
 8000fe6:	1e03      	subs	r3, r0, #0
 8000fe8:	da06      	bge.n	8000ff8 <BSP_LCD_DisplayOn+0x44>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8000fea:	2305      	movs	r3, #5
 8000fec:	425b      	negs	r3, r3
 8000fee:	60fb      	str	r3, [r7, #12]
 8000ff0:	e002      	b.n	8000ff8 <BSP_LCD_DisplayOn+0x44>
    }
  }
  else
  {
    ret = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 8000ff2:	230b      	movs	r3, #11
 8000ff4:	425b      	negs	r3, r3
 8000ff6:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8000ff8:	68fb      	ldr	r3, [r7, #12]
}
 8000ffa:	0018      	movs	r0, r3
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	b004      	add	sp, #16
 8001000:	bd80      	pop	{r7, pc}
 8001002:	46c0      	nop			; (mov r8, r8)
 8001004:	20000098 	.word	0x20000098
 8001008:	20000094 	.word	0x20000094

0800100c <LCD_IO_SendData>:
  * @param  pData  pointer to data to write to LCD GRAM.
  * @param  Length length of data to write to LCD GRAM
  * @retval Error status
  */
static int32_t LCD_IO_SendData(uint8_t *pData, uint32_t Length)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b084      	sub	sp, #16
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
 8001014:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8001016:	2300      	movs	r3, #0
 8001018:	60fb      	str	r3, [r7, #12]

  /* Select : Chip Select low */
  LCD_CS_LOW();
 800101a:	4b0e      	ldr	r3, [pc, #56]	; (8001054 <LCD_IO_SendData+0x48>)
 800101c:	2200      	movs	r2, #0
 800101e:	2120      	movs	r1, #32
 8001020:	0018      	movs	r0, r3
 8001022:	f001 f867 	bl	80020f4 <HAL_GPIO_WritePin>

  /* Send Data */
  if(LCD_SPI_Send(pData, Length)!= BSP_ERROR_NONE)
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	b29a      	uxth	r2, r3
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	0011      	movs	r1, r2
 800102e:	0018      	movs	r0, r3
 8001030:	f7ff fd42 	bl	8000ab8 <BSP_SPI1_Send>
 8001034:	1e03      	subs	r3, r0, #0
 8001036:	d002      	beq.n	800103e <LCD_IO_SendData+0x32>
  {
    ret = BSP_ERROR_BUS_FAILURE;
 8001038:	2308      	movs	r3, #8
 800103a:	425b      	negs	r3, r3
 800103c:	60fb      	str	r3, [r7, #12]
  }

  /* Deselect : Chip Select high */
  LCD_CS_HIGH();
 800103e:	4b05      	ldr	r3, [pc, #20]	; (8001054 <LCD_IO_SendData+0x48>)
 8001040:	2201      	movs	r2, #1
 8001042:	2120      	movs	r1, #32
 8001044:	0018      	movs	r0, r3
 8001046:	f001 f855 	bl	80020f4 <HAL_GPIO_WritePin>

  return ret;
 800104a:	68fb      	ldr	r3, [r7, #12]
}
 800104c:	0018      	movs	r0, r3
 800104e:	46bd      	mov	sp, r7
 8001050:	b004      	add	sp, #16
 8001052:	bd80      	pop	{r7, pc}
 8001054:	50000400 	.word	0x50000400

08001058 <LCD_IO_WriteReg>:
  * @param  Reg    Register to be written
  * @param  Length length of data be read from the LCD GRAM
  * @retval BSP status
  */
static int32_t LCD_IO_WriteReg(uint8_t *Reg, uint32_t Length)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b084      	sub	sp, #16
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
 8001060:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8001062:	2300      	movs	r3, #0
 8001064:	60fb      	str	r3, [r7, #12]

  /* Select : Chip Select low */
  LCD_CS_LOW();
 8001066:	4b14      	ldr	r3, [pc, #80]	; (80010b8 <LCD_IO_WriteReg+0x60>)
 8001068:	2200      	movs	r2, #0
 800106a:	2120      	movs	r1, #32
 800106c:	0018      	movs	r0, r3
 800106e:	f001 f841 	bl	80020f4 <HAL_GPIO_WritePin>

  LCD_DC_LOW();
 8001072:	4b11      	ldr	r3, [pc, #68]	; (80010b8 <LCD_IO_WriteReg+0x60>)
 8001074:	2200      	movs	r2, #0
 8001076:	2108      	movs	r1, #8
 8001078:	0018      	movs	r0, r3
 800107a:	f001 f83b 	bl	80020f4 <HAL_GPIO_WritePin>
  if(LCD_SPI_Send(Reg, Length) != BSP_ERROR_NONE)
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	b29a      	uxth	r2, r3
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	0011      	movs	r1, r2
 8001086:	0018      	movs	r0, r3
 8001088:	f7ff fd16 	bl	8000ab8 <BSP_SPI1_Send>
 800108c:	1e03      	subs	r3, r0, #0
 800108e:	d002      	beq.n	8001096 <LCD_IO_WriteReg+0x3e>
  {
    ret = BSP_ERROR_BUS_FAILURE;
 8001090:	2308      	movs	r3, #8
 8001092:	425b      	negs	r3, r3
 8001094:	60fb      	str	r3, [r7, #12]
  }
  LCD_DC_HIGH();
 8001096:	4b08      	ldr	r3, [pc, #32]	; (80010b8 <LCD_IO_WriteReg+0x60>)
 8001098:	2201      	movs	r2, #1
 800109a:	2108      	movs	r1, #8
 800109c:	0018      	movs	r0, r3
 800109e:	f001 f829 	bl	80020f4 <HAL_GPIO_WritePin>

  /* Deselect : Chip Select high */
  LCD_CS_HIGH();
 80010a2:	4b05      	ldr	r3, [pc, #20]	; (80010b8 <LCD_IO_WriteReg+0x60>)
 80010a4:	2201      	movs	r2, #1
 80010a6:	2120      	movs	r1, #32
 80010a8:	0018      	movs	r0, r3
 80010aa:	f001 f823 	bl	80020f4 <HAL_GPIO_WritePin>

  return ret;
 80010ae:	68fb      	ldr	r3, [r7, #12]
}
 80010b0:	0018      	movs	r0, r3
 80010b2:	46bd      	mov	sp, r7
 80010b4:	b004      	add	sp, #16
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	50000400 	.word	0x50000400

080010bc <LCD_IO_ReadReg>:
  * @param  pData  pointer to the read data from LCD GRAM.
  * @param  Reg    Register to be read
  * @retval BSP status
  */
static int32_t LCD_IO_ReadReg(uint8_t *pData, uint32_t Reg)
{
 80010bc:	b590      	push	{r4, r7, lr}
 80010be:	b085      	sub	sp, #20
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
 80010c4:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 80010c6:	2300      	movs	r3, #0
 80010c8:	60fb      	str	r3, [r7, #12]
  uint16_t readvalue;
  uint8_t data[2];

  /* Send Reg value to Read */
  if(LCD_IO_WriteReg(pData, Reg) != BSP_ERROR_NONE)
 80010ca:	683a      	ldr	r2, [r7, #0]
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	0011      	movs	r1, r2
 80010d0:	0018      	movs	r0, r3
 80010d2:	f7ff ffc1 	bl	8001058 <LCD_IO_WriteReg>
 80010d6:	1e03      	subs	r3, r0, #0
 80010d8:	d002      	beq.n	80010e0 <LCD_IO_ReadReg+0x24>
  {
    ret = BSP_ERROR_BUS_FAILURE;
 80010da:	2308      	movs	r3, #8
 80010dc:	425b      	negs	r3, r3
 80010de:	60fb      	str	r3, [r7, #12]
  }

  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 80010e0:	4b2c      	ldr	r3, [pc, #176]	; (8001194 <LCD_IO_ReadReg+0xd8>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	2120      	movs	r1, #32
 80010e6:	0018      	movs	r0, r3
 80010e8:	f001 f804 	bl	80020f4 <HAL_GPIO_WritePin>
  LCD_DC_LOW();
 80010ec:	4b29      	ldr	r3, [pc, #164]	; (8001194 <LCD_IO_ReadReg+0xd8>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	2108      	movs	r1, #8
 80010f2:	0018      	movs	r0, r3
 80010f4:	f000 fffe 	bl	80020f4 <HAL_GPIO_WritePin>

  /* Send Start Byte */
  data[0] = START_BYTE_READ;
 80010f8:	2108      	movs	r1, #8
 80010fa:	187b      	adds	r3, r7, r1
 80010fc:	222e      	movs	r2, #46	; 0x2e
 80010fe:	701a      	strb	r2, [r3, #0]
  data[1] = 0xFF;
 8001100:	187b      	adds	r3, r7, r1
 8001102:	22ff      	movs	r2, #255	; 0xff
 8001104:	705a      	strb	r2, [r3, #1]

  if (ret == BSP_ERROR_NONE)
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d138      	bne.n	800117e <LCD_IO_ReadReg+0xc2>
  {
    if(LCD_SPI_Send(data, 2) != BSP_ERROR_NONE)
 800110c:	187b      	adds	r3, r7, r1
 800110e:	2102      	movs	r1, #2
 8001110:	0018      	movs	r0, r3
 8001112:	f7ff fcd1 	bl	8000ab8 <BSP_SPI1_Send>
 8001116:	1e03      	subs	r3, r0, #0
 8001118:	d006      	beq.n	8001128 <LCD_IO_ReadReg+0x6c>
    {
      ret = BSP_ERROR_BUS_FAILURE;
 800111a:	2308      	movs	r3, #8
 800111c:	425b      	negs	r3, r3
 800111e:	60fb      	str	r3, [r7, #12]
      ret = BSP_ERROR_BUS_FAILURE;
 8001120:	2308      	movs	r3, #8
 8001122:	425b      	negs	r3, r3
 8001124:	60fb      	str	r3, [r7, #12]
 8001126:	e02a      	b.n	800117e <LCD_IO_ReadReg+0xc2>
    }
    else
    {
      LCD_DC_HIGH();
 8001128:	4b1a      	ldr	r3, [pc, #104]	; (8001194 <LCD_IO_ReadReg+0xd8>)
 800112a:	2201      	movs	r2, #1
 800112c:	2108      	movs	r1, #8
 800112e:	0018      	movs	r0, r3
 8001130:	f000 ffe0 	bl	80020f4 <HAL_GPIO_WritePin>
      if(LCD_SPI_Recv(data, 2) != BSP_ERROR_NONE)
 8001134:	2308      	movs	r3, #8
 8001136:	18fb      	adds	r3, r7, r3
 8001138:	2102      	movs	r1, #2
 800113a:	0018      	movs	r0, r3
 800113c:	f7ff fcda 	bl	8000af4 <BSP_SPI1_Recv>
 8001140:	1e03      	subs	r3, r0, #0
 8001142:	d003      	beq.n	800114c <LCD_IO_ReadReg+0x90>
      {
        ret = BSP_ERROR_BUS_FAILURE;
 8001144:	2308      	movs	r3, #8
 8001146:	425b      	negs	r3, r3
 8001148:	60fb      	str	r3, [r7, #12]
 800114a:	e018      	b.n	800117e <LCD_IO_ReadReg+0xc2>
      }
      else
      {
        readvalue = (uint16_t)(data[0]) << 8;
 800114c:	2108      	movs	r1, #8
 800114e:	187b      	adds	r3, r7, r1
 8001150:	781b      	ldrb	r3, [r3, #0]
 8001152:	b29a      	uxth	r2, r3
 8001154:	200a      	movs	r0, #10
 8001156:	183b      	adds	r3, r7, r0
 8001158:	0212      	lsls	r2, r2, #8
 800115a:	801a      	strh	r2, [r3, #0]
        readvalue |= (uint16_t)data[1];
 800115c:	187b      	adds	r3, r7, r1
 800115e:	785b      	ldrb	r3, [r3, #1]
 8001160:	b299      	uxth	r1, r3
 8001162:	183b      	adds	r3, r7, r0
 8001164:	0004      	movs	r4, r0
 8001166:	183a      	adds	r2, r7, r0
 8001168:	8812      	ldrh	r2, [r2, #0]
 800116a:	430a      	orrs	r2, r1
 800116c:	801a      	strh	r2, [r3, #0]
        HAL_Delay(10);
 800116e:	200a      	movs	r0, #10
 8001170:	f000 fc9e 	bl	8001ab0 <HAL_Delay>
        *pData = (uint8_t)readvalue;
 8001174:	193b      	adds	r3, r7, r4
 8001176:	881b      	ldrh	r3, [r3, #0]
 8001178:	b2da      	uxtb	r2, r3
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	701a      	strb	r2, [r3, #0]
      }
    }
  }
  /* Deselect : Chip Select high */
  LCD_CS_HIGH();
 800117e:	4b05      	ldr	r3, [pc, #20]	; (8001194 <LCD_IO_ReadReg+0xd8>)
 8001180:	2201      	movs	r2, #1
 8001182:	2120      	movs	r1, #32
 8001184:	0018      	movs	r0, r3
 8001186:	f000 ffb5 	bl	80020f4 <HAL_GPIO_WritePin>

  return ret;
 800118a:	68fb      	ldr	r3, [r7, #12]
}
 800118c:	0018      	movs	r0, r3
 800118e:	46bd      	mov	sp, r7
 8001190:	b005      	add	sp, #20
 8001192:	bd90      	pop	{r4, r7, pc}
 8001194:	50000400 	.word	0x50000400

08001198 <LCD_IO_Init>:
/**
  * @brief  Initializes LCD low level.
  * @retval BSP status
  */
static int32_t LCD_IO_Init(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b082      	sub	sp, #8
 800119c:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 800119e:	2300      	movs	r3, #0
 80011a0:	607b      	str	r3, [r7, #4]

  HAL_GPIO_WritePin(LCD_NRESET_GPIO_PORT, LCD_NRESET_GPIO_PIN, GPIO_PIN_RESET);
 80011a2:	23a0      	movs	r3, #160	; 0xa0
 80011a4:	05db      	lsls	r3, r3, #23
 80011a6:	2200      	movs	r2, #0
 80011a8:	2102      	movs	r1, #2
 80011aa:	0018      	movs	r0, r3
 80011ac:	f000 ffa2 	bl	80020f4 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 80011b0:	2064      	movs	r0, #100	; 0x64
 80011b2:	f000 fc7d 	bl	8001ab0 <HAL_Delay>
  HAL_GPIO_WritePin(LCD_NRESET_GPIO_PORT, LCD_NRESET_GPIO_PIN, GPIO_PIN_SET);
 80011b6:	23a0      	movs	r3, #160	; 0xa0
 80011b8:	05db      	lsls	r3, r3, #23
 80011ba:	2201      	movs	r2, #1
 80011bc:	2102      	movs	r1, #2
 80011be:	0018      	movs	r0, r3
 80011c0:	f000 ff98 	bl	80020f4 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 80011c4:	2064      	movs	r0, #100	; 0x64
 80011c6:	f000 fc73 	bl	8001ab0 <HAL_Delay>

  /* turn LCD on = drive pin low (active low) */
  /* LCD_CS_PIN and LCD_DC_PIN configuration is done in the MSP Init*/
  /* Set or Reset the control line */
  LCD_CS_HIGH();
 80011ca:	4b0c      	ldr	r3, [pc, #48]	; (80011fc <LCD_IO_Init+0x64>)
 80011cc:	2201      	movs	r2, #1
 80011ce:	2120      	movs	r1, #32
 80011d0:	0018      	movs	r0, r3
 80011d2:	f000 ff8f 	bl	80020f4 <HAL_GPIO_WritePin>
  LCD_DC_LOW();
 80011d6:	4b09      	ldr	r3, [pc, #36]	; (80011fc <LCD_IO_Init+0x64>)
 80011d8:	2200      	movs	r2, #0
 80011da:	2108      	movs	r1, #8
 80011dc:	0018      	movs	r0, r3
 80011de:	f000 ff89 	bl	80020f4 <HAL_GPIO_WritePin>

  if (LCD_SPI_Init() != BSP_ERROR_NONE)
 80011e2:	f7ff fc11 	bl	8000a08 <BSP_SPI1_Init>
 80011e6:	1e03      	subs	r3, r0, #0
 80011e8:	d002      	beq.n	80011f0 <LCD_IO_Init+0x58>
  {
    ret = BSP_ERROR_BUS_FAILURE;
 80011ea:	2308      	movs	r3, #8
 80011ec:	425b      	negs	r3, r3
 80011ee:	607b      	str	r3, [r7, #4]
  }

  return ret;
 80011f0:	687b      	ldr	r3, [r7, #4]
}
 80011f2:	0018      	movs	r0, r3
 80011f4:	46bd      	mov	sp, r7
 80011f6:	b002      	add	sp, #8
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	46c0      	nop			; (mov r8, r8)
 80011fc:	50000400 	.word	0x50000400

08001200 <LCD_IO_DeInit>:
/**
  * @brief  DeInitializes LCD low level
  * @retval BSP status
  */
static int32_t LCD_IO_DeInit(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	af00      	add	r7, sp, #0
  return BSP_SPI1_DeInit();
 8001204:	f7ff fc30 	bl	8000a68 <BSP_SPI1_DeInit>
 8001208:	0003      	movs	r3, r0
}
 800120a:	0018      	movs	r0, r3
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}

08001210 <LCD_Probe>:
  * @brief  Register Bus IOs for instance 0 if IL9341 ID is OK
  * @param  Orientation
  * @retval BSP status
  */
static int32_t LCD_Probe(uint32_t Instance, uint32_t Orientation)
{
 8001210:	b590      	push	{r4, r7, lr}
 8001212:	b085      	sub	sp, #20
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
 8001218:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800121a:	2300      	movs	r3, #0
 800121c:	60fb      	str	r3, [r7, #12]

  /* Configure the lcd driver : map to LCD_IO function*/
  IOCtx.Init             = LCD_IO_Init;
 800121e:	4b2e      	ldr	r3, [pc, #184]	; (80012d8 <LCD_Probe+0xc8>)
 8001220:	4a2e      	ldr	r2, [pc, #184]	; (80012dc <LCD_Probe+0xcc>)
 8001222:	601a      	str	r2, [r3, #0]
  IOCtx.DeInit           = LCD_IO_DeInit;
 8001224:	4b2c      	ldr	r3, [pc, #176]	; (80012d8 <LCD_Probe+0xc8>)
 8001226:	4a2e      	ldr	r2, [pc, #184]	; (80012e0 <LCD_Probe+0xd0>)
 8001228:	605a      	str	r2, [r3, #4]
  IOCtx.ReadReg          = LCD_IO_ReadReg;
 800122a:	4b2b      	ldr	r3, [pc, #172]	; (80012d8 <LCD_Probe+0xc8>)
 800122c:	4a2d      	ldr	r2, [pc, #180]	; (80012e4 <LCD_Probe+0xd4>)
 800122e:	611a      	str	r2, [r3, #16]
  IOCtx.WriteReg         = LCD_IO_WriteReg;
 8001230:	4b29      	ldr	r3, [pc, #164]	; (80012d8 <LCD_Probe+0xc8>)
 8001232:	4a2d      	ldr	r2, [pc, #180]	; (80012e8 <LCD_Probe+0xd8>)
 8001234:	60da      	str	r2, [r3, #12]
  IOCtx.SendData         = LCD_IO_SendData;
 8001236:	4b28      	ldr	r3, [pc, #160]	; (80012d8 <LCD_Probe+0xc8>)
 8001238:	4a2c      	ldr	r2, [pc, #176]	; (80012ec <LCD_Probe+0xdc>)
 800123a:	615a      	str	r2, [r3, #20]
  IOCtx.RecvData         = 0;
 800123c:	4b26      	ldr	r3, [pc, #152]	; (80012d8 <LCD_Probe+0xc8>)
 800123e:	2200      	movs	r2, #0
 8001240:	619a      	str	r2, [r3, #24]
  IOCtx.GetTick          = BSP_GetTick;
 8001242:	4b25      	ldr	r3, [pc, #148]	; (80012d8 <LCD_Probe+0xc8>)
 8001244:	4a2a      	ldr	r2, [pc, #168]	; (80012f0 <LCD_Probe+0xe0>)
 8001246:	61da      	str	r2, [r3, #28]

  if(ILI9341_RegisterBusIO(&ObjCtx, &IOCtx) != ILI9341_OK)
 8001248:	4a23      	ldr	r2, [pc, #140]	; (80012d8 <LCD_Probe+0xc8>)
 800124a:	4b2a      	ldr	r3, [pc, #168]	; (80012f4 <LCD_Probe+0xe4>)
 800124c:	0011      	movs	r1, r2
 800124e:	0018      	movs	r0, r3
 8001250:	f000 f870 	bl	8001334 <ILI9341_RegisterBusIO>
 8001254:	1e03      	subs	r3, r0, #0
 8001256:	d003      	beq.n	8001260 <LCD_Probe+0x50>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8001258:	2307      	movs	r3, #7
 800125a:	425b      	negs	r3, r3
 800125c:	60fb      	str	r3, [r7, #12]
 800125e:	e035      	b.n	80012cc <LCD_Probe+0xbc>
  }
  else
  {
    LcdCompObj = &ObjCtx;
 8001260:	4b25      	ldr	r3, [pc, #148]	; (80012f8 <LCD_Probe+0xe8>)
 8001262:	4a24      	ldr	r2, [pc, #144]	; (80012f4 <LCD_Probe+0xe4>)
 8001264:	601a      	str	r2, [r3, #0]

    /* LCD Initialization */
    LcdDrv = (LCD_Drv_t *)&ILI9341_LCD_Driver;
 8001266:	4b25      	ldr	r3, [pc, #148]	; (80012fc <LCD_Probe+0xec>)
 8001268:	4a25      	ldr	r2, [pc, #148]	; (8001300 <LCD_Probe+0xf0>)
 800126a:	601a      	str	r2, [r3, #0]

    ObjCtx.IsInitialized = 0;
 800126c:	4b21      	ldr	r3, [pc, #132]	; (80012f4 <LCD_Probe+0xe4>)
 800126e:	2234      	movs	r2, #52	; 0x34
 8001270:	2100      	movs	r1, #0
 8001272:	5499      	strb	r1, [r3, r2]
    if(LcdDrv->Init(LcdCompObj, ILI9341_FORMAT_DEFAULT, Orientation) == ILI9341_OK)
 8001274:	4b21      	ldr	r3, [pc, #132]	; (80012fc <LCD_Probe+0xec>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	681c      	ldr	r4, [r3, #0]
 800127a:	4b1f      	ldr	r3, [pc, #124]	; (80012f8 <LCD_Probe+0xe8>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	683a      	ldr	r2, [r7, #0]
 8001280:	2105      	movs	r1, #5
 8001282:	0018      	movs	r0, r3
 8001284:	47a0      	blx	r4
 8001286:	1e03      	subs	r3, r0, #0
 8001288:	d11d      	bne.n	80012c6 <LCD_Probe+0xb6>
    {
      LcdDrv->GetXSize(LcdCompObj, &LcdCtx[Instance].Width);
 800128a:	4b1c      	ldr	r3, [pc, #112]	; (80012fc <LCD_Probe+0xec>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	6c9c      	ldr	r4, [r3, #72]	; 0x48
 8001290:	4b19      	ldr	r3, [pc, #100]	; (80012f8 <LCD_Probe+0xe8>)
 8001292:	6818      	ldr	r0, [r3, #0]
 8001294:	687a      	ldr	r2, [r7, #4]
 8001296:	0013      	movs	r3, r2
 8001298:	005b      	lsls	r3, r3, #1
 800129a:	189b      	adds	r3, r3, r2
 800129c:	009b      	lsls	r3, r3, #2
 800129e:	4a19      	ldr	r2, [pc, #100]	; (8001304 <LCD_Probe+0xf4>)
 80012a0:	189b      	adds	r3, r3, r2
 80012a2:	0019      	movs	r1, r3
 80012a4:	47a0      	blx	r4
      LcdDrv->GetYSize(LcdCompObj, &LcdCtx[Instance].Height);
 80012a6:	4b15      	ldr	r3, [pc, #84]	; (80012fc <LCD_Probe+0xec>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 80012ac:	4b12      	ldr	r3, [pc, #72]	; (80012f8 <LCD_Probe+0xe8>)
 80012ae:	6818      	ldr	r0, [r3, #0]
 80012b0:	687a      	ldr	r2, [r7, #4]
 80012b2:	0013      	movs	r3, r2
 80012b4:	005b      	lsls	r3, r3, #1
 80012b6:	189b      	adds	r3, r3, r2
 80012b8:	009b      	lsls	r3, r3, #2
 80012ba:	4a12      	ldr	r2, [pc, #72]	; (8001304 <LCD_Probe+0xf4>)
 80012bc:	189b      	adds	r3, r3, r2
 80012be:	3304      	adds	r3, #4
 80012c0:	0019      	movs	r1, r3
 80012c2:	47a0      	blx	r4
 80012c4:	e002      	b.n	80012cc <LCD_Probe+0xbc>
    }
    else
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 80012c6:	2305      	movs	r3, #5
 80012c8:	425b      	negs	r3, r3
 80012ca:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 80012cc:	68fb      	ldr	r3, [r7, #12]
}
 80012ce:	0018      	movs	r0, r3
 80012d0:	46bd      	mov	sp, r7
 80012d2:	b005      	add	sp, #20
 80012d4:	bd90      	pop	{r4, r7, pc}
 80012d6:	46c0      	nop			; (mov r8, r8)
 80012d8:	2000009c 	.word	0x2000009c
 80012dc:	08001199 	.word	0x08001199
 80012e0:	08001201 	.word	0x08001201
 80012e4:	080010bd 	.word	0x080010bd
 80012e8:	08001059 	.word	0x08001059
 80012ec:	0800100d 	.word	0x0800100d
 80012f0:	08000b91 	.word	0x08000b91
 80012f4:	200000bc 	.word	0x200000bc
 80012f8:	20000094 	.word	0x20000094
 80012fc:	20000098 	.word	0x20000098
 8001300:	20000004 	.word	0x20000004
 8001304:	20000258 	.word	0x20000258

08001308 <BSP_MEM_Init>:
  * @brief  Initializes the MEM.
  * @param  Instance    MEM Instance
  * @retval BSP status
  */
int32_t BSP_MEM_Init(uint32_t Instance)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b084      	sub	sp, #16
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8001310:	2300      	movs	r3, #0
 8001312:	60fb      	str	r3, [r7, #12]

  if (Instance >= MEM_INSTANCES_NBR)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	2b00      	cmp	r3, #0
 8001318:	d003      	beq.n	8001322 <BSP_MEM_Init+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800131a:	2302      	movs	r3, #2
 800131c:	425b      	negs	r3, r3
 800131e:	60fb      	str	r3, [r7, #12]
 8001320:	e003      	b.n	800132a <BSP_MEM_Init+0x22>
  }
  else
  {
    ret = MEM_SPI_Init();
 8001322:	f7ff fc05 	bl	8000b30 <BSP_SPI2_Init>
 8001326:	0003      	movs	r3, r0
 8001328:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800132a:	68fb      	ldr	r3, [r7, #12]
}
 800132c:	0018      	movs	r0, r3
 800132e:	46bd      	mov	sp, r7
 8001330:	b004      	add	sp, #16
 8001332:	bd80      	pop	{r7, pc}

08001334 <ILI9341_RegisterBusIO>:
  * @param  pObj Component object pointer
  * @param  pIO  Component IO structure pointer
  * @retval Component status
  */
int32_t ILI9341_RegisterBusIO (ILI9341_Object_t *pObj, ILI9341_IO_t *pIO)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b084      	sub	sp, #16
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
 800133c:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if(pObj == NULL)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	2b00      	cmp	r3, #0
 8001342:	d103      	bne.n	800134c <ILI9341_RegisterBusIO+0x18>
  {
    ret = ILI9341_ERROR;
 8001344:	2301      	movs	r3, #1
 8001346:	425b      	negs	r3, r3
 8001348:	60fb      	str	r3, [r7, #12]
 800134a:	e03b      	b.n	80013c4 <ILI9341_RegisterBusIO+0x90>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	681a      	ldr	r2, [r3, #0]
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	685a      	ldr	r2, [r3, #4]
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	605a      	str	r2, [r3, #4]
    pObj->IO.Address   = pIO->Address;    
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	891a      	ldrh	r2, [r3, #8]
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	811a      	strh	r2, [r3, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	68da      	ldr	r2, [r3, #12]
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	60da      	str	r2, [r3, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;   
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	691a      	ldr	r2, [r3, #16]
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	611a      	str	r2, [r3, #16]
    pObj->IO.SendData  = pIO->SendData;
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	695a      	ldr	r2, [r3, #20]
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	615a      	str	r2, [r3, #20]
    pObj->IO.RecvData  = pIO->RecvData;    
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	699a      	ldr	r2, [r3, #24]
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	619a      	str	r2, [r3, #24]
    pObj->IO.GetTick   = pIO->GetTick;
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	69da      	ldr	r2, [r3, #28]
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	61da      	str	r2, [r3, #28]
    
    pObj->Ctx.ReadReg   = ILI9341_ReadRegWrap;
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	4a10      	ldr	r2, [pc, #64]	; (80013d0 <ILI9341_RegisterBusIO+0x9c>)
 8001390:	625a      	str	r2, [r3, #36]	; 0x24
    pObj->Ctx.WriteReg  = ILI9341_WriteRegWrap;    
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	4a0f      	ldr	r2, [pc, #60]	; (80013d4 <ILI9341_RegisterBusIO+0xa0>)
 8001396:	621a      	str	r2, [r3, #32]
    pObj->Ctx.SendData  = ILI9341_SendDataWrap;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	4a0f      	ldr	r2, [pc, #60]	; (80013d8 <ILI9341_RegisterBusIO+0xa4>)
 800139c:	629a      	str	r2, [r3, #40]	; 0x28
    pObj->Ctx.RecvData  = ILI9341_RecvDataWrap;      
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	4a0e      	ldr	r2, [pc, #56]	; (80013dc <ILI9341_RegisterBusIO+0xa8>)
 80013a2:	62da      	str	r2, [r3, #44]	; 0x2c
    pObj->Ctx.handle    = pObj;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	687a      	ldr	r2, [r7, #4]
 80013a8:	631a      	str	r2, [r3, #48]	; 0x30
    
    if(pObj->IO.Init != NULL)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d005      	beq.n	80013be <ILI9341_RegisterBusIO+0x8a>
    {
      ret = pObj->IO.Init();
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	4798      	blx	r3
 80013b8:	0003      	movs	r3, r0
 80013ba:	60fb      	str	r3, [r7, #12]
 80013bc:	e002      	b.n	80013c4 <ILI9341_RegisterBusIO+0x90>
    }
    else
    {
      ret = ILI9341_ERROR;
 80013be:	2301      	movs	r3, #1
 80013c0:	425b      	negs	r3, r3
 80013c2:	60fb      	str	r3, [r7, #12]
    }    
  }
  
  return ret;
 80013c4:	68fb      	ldr	r3, [r7, #12]
}
 80013c6:	0018      	movs	r0, r3
 80013c8:	46bd      	mov	sp, r7
 80013ca:	b004      	add	sp, #16
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	46c0      	nop			; (mov r8, r8)
 80013d0:	08001865 	.word	0x08001865
 80013d4:	0800188b 	.word	0x0800188b
 80013d8:	080018b1 	.word	0x080018b1
 80013dc:	080018d7 	.word	0x080018d7

080013e0 <ILI9341_Init>:
  * @param  ColorCoding RGB mode
  * @param  Orientation Display orientation
  * @retval Component status
  */
int32_t ILI9341_Init(ILI9341_Object_t *pObj, uint32_t ColorCoding, uint32_t Orientation)
{
 80013e0:	b5b0      	push	{r4, r5, r7, lr}
 80013e2:	b08c      	sub	sp, #48	; 0x30
 80013e4:	af02      	add	r7, sp, #8
 80013e6:	60f8      	str	r0, [r7, #12]
 80013e8:	60b9      	str	r1, [r7, #8]
 80013ea:	607a      	str	r2, [r7, #4]
  uint8_t parameter[15];
  uint8_t reg;
  int32_t ret = ILI9341_OK;
 80013ec:	2300      	movs	r3, #0
 80013ee:	627b      	str	r3, [r7, #36]	; 0x24
  
  if((pObj == NULL) || (Orientation > ILI9341_ORIENTATION_LANDSCAPE_ROT180))
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d002      	beq.n	80013fc <ILI9341_Init+0x1c>
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	2b03      	cmp	r3, #3
 80013fa:	d903      	bls.n	8001404 <ILI9341_Init+0x24>
  {
    ret = ILI9341_ERROR;
 80013fc:	2301      	movs	r3, #1
 80013fe:	425b      	negs	r3, r3
 8001400:	627b      	str	r3, [r7, #36]	; 0x24
 8001402:	e0e0      	b.n	80015c6 <ILI9341_Init+0x1e6>
  }
  else if (pObj->IsInitialized == 0)
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	2234      	movs	r2, #52	; 0x34
 8001408:	5c9b      	ldrb	r3, [r3, r2]
 800140a:	2b00      	cmp	r3, #0
 800140c:	d000      	beq.n	8001410 <ILI9341_Init+0x30>
 800140e:	e0da      	b.n	80015c6 <ILI9341_Init+0x1e6>
  {
    pObj->IsInitialized = 1;
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	2234      	movs	r2, #52	; 0x34
 8001414:	2101      	movs	r1, #1
 8001416:	5499      	strb	r1, [r3, r2]

    ILI9341_SetOrientation(pObj, Orientation);
 8001418:	687a      	ldr	r2, [r7, #4]
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	0011      	movs	r1, r2
 800141e:	0018      	movs	r0, r3
 8001420:	f000 f940 	bl	80016a4 <ILI9341_SetOrientation>
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	3b02      	subs	r3, #2
    
    switch (Orientation)
 8001428:	2b01      	cmp	r3, #1
 800142a:	d807      	bhi.n	800143c <ILI9341_Init+0x5c>
    {
      case ILI9341_ORIENTATION_LANDSCAPE:
      case ILI9341_ORIENTATION_LANDSCAPE_ROT180:
        ILI9341Ctx.Width  = ILI9341_HEIGHT;
 800142c:	4b6b      	ldr	r3, [pc, #428]	; (80015dc <ILI9341_Init+0x1fc>)
 800142e:	22a0      	movs	r2, #160	; 0xa0
 8001430:	0052      	lsls	r2, r2, #1
 8001432:	601a      	str	r2, [r3, #0]
        ILI9341Ctx.Height = ILI9341_WIDTH;     
 8001434:	4b69      	ldr	r3, [pc, #420]	; (80015dc <ILI9341_Init+0x1fc>)
 8001436:	22f0      	movs	r2, #240	; 0xf0
 8001438:	605a      	str	r2, [r3, #4]
      break;
 800143a:	e007      	b.n	800144c <ILI9341_Init+0x6c>
      default:
      case ILI9341_ORIENTATION_PORTRAIT_ROT180:    
      case ILI9341_ORIENTATION_PORTRAIT:
        ILI9341Ctx.Width  = ILI9341_WIDTH;
 800143c:	4b67      	ldr	r3, [pc, #412]	; (80015dc <ILI9341_Init+0x1fc>)
 800143e:	22f0      	movs	r2, #240	; 0xf0
 8001440:	601a      	str	r2, [r3, #0]
        ILI9341Ctx.Height = ILI9341_HEIGHT;    
 8001442:	4b66      	ldr	r3, [pc, #408]	; (80015dc <ILI9341_Init+0x1fc>)
 8001444:	22a0      	movs	r2, #160	; 0xa0
 8001446:	0052      	lsls	r2, r2, #1
 8001448:	605a      	str	r2, [r3, #4]
      break;    
 800144a:	46c0      	nop			; (mov r8, r8)
    }
    
    ret = ILI9341_SetDisplayWindow(pObj, 0U, 0U, ILI9341Ctx.Width, ILI9341Ctx.Height);
 800144c:	4b63      	ldr	r3, [pc, #396]	; (80015dc <ILI9341_Init+0x1fc>)
 800144e:	681a      	ldr	r2, [r3, #0]
 8001450:	4b62      	ldr	r3, [pc, #392]	; (80015dc <ILI9341_Init+0x1fc>)
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	68f8      	ldr	r0, [r7, #12]
 8001456:	9300      	str	r3, [sp, #0]
 8001458:	0013      	movs	r3, r2
 800145a:	2200      	movs	r2, #0
 800145c:	2100      	movs	r1, #0
 800145e:	f000 f979 	bl	8001754 <ILI9341_SetDisplayWindow>
 8001462:	0003      	movs	r3, r0
 8001464:	627b      	str	r3, [r7, #36]	; 0x24

    // Sleep out
    reg = ILI9341_SLEEP_OUT;
 8001466:	2413      	movs	r4, #19
 8001468:	193b      	adds	r3, r7, r4
 800146a:	2211      	movs	r2, #17
 800146c:	701a      	strb	r2, [r3, #0]
    ret += ili9341_write_reg(&pObj->Ctx, &reg, 1);
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	3320      	adds	r3, #32
 8001472:	1939      	adds	r1, r7, r4
 8001474:	2201      	movs	r2, #1
 8001476:	0018      	movs	r0, r3
 8001478:	f000 fa5a 	bl	8001930 <ili9341_write_reg>
 800147c:	0002      	movs	r2, r0
 800147e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001480:	189b      	adds	r3, r3, r2
 8001482:	627b      	str	r3, [r7, #36]	; 0x24
    ILI9341_IO_Delay(pObj, 200);
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	21c8      	movs	r1, #200	; 0xc8
 8001488:	0018      	movs	r0, r3
 800148a:	f000 fa37 	bl	80018fc <ILI9341_IO_Delay>

    // Display Normal mode
    reg = ILI9341_NORMAL_MODE_ON;
 800148e:	193b      	adds	r3, r7, r4
 8001490:	2213      	movs	r2, #19
 8001492:	701a      	strb	r2, [r3, #0]
    ret += ili9341_write_reg(&pObj->Ctx, &reg, 1);
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	3320      	adds	r3, #32
 8001498:	1939      	adds	r1, r7, r4
 800149a:	2201      	movs	r2, #1
 800149c:	0018      	movs	r0, r3
 800149e:	f000 fa47 	bl	8001930 <ili9341_write_reg>
 80014a2:	0002      	movs	r2, r0
 80014a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014a6:	189b      	adds	r3, r3, r2
 80014a8:	627b      	str	r3, [r7, #36]	; 0x24
    ILI9341_IO_Delay(pObj, 100);
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	2164      	movs	r1, #100	; 0x64
 80014ae:	0018      	movs	r0, r3
 80014b0:	f000 fa24 	bl	80018fc <ILI9341_IO_Delay>
    
    // MADCTL: Exchange RGB / BGR + Miror X
    reg = ILI9341_MAC;
 80014b4:	193b      	adds	r3, r7, r4
 80014b6:	2236      	movs	r2, #54	; 0x36
 80014b8:	701a      	strb	r2, [r3, #0]
    ret += ili9341_write_reg(&pObj->Ctx, &reg, 1);
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	3320      	adds	r3, #32
 80014be:	1939      	adds	r1, r7, r4
 80014c0:	2201      	movs	r2, #1
 80014c2:	0018      	movs	r0, r3
 80014c4:	f000 fa34 	bl	8001930 <ili9341_write_reg>
 80014c8:	0002      	movs	r2, r0
 80014ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014cc:	189b      	adds	r3, r3, r2
 80014ce:	627b      	str	r3, [r7, #36]	; 0x24
    parameter[0] = 0x48;
 80014d0:	2514      	movs	r5, #20
 80014d2:	197b      	adds	r3, r7, r5
 80014d4:	2248      	movs	r2, #72	; 0x48
 80014d6:	701a      	strb	r2, [r3, #0]
    ret += ili9341_send_data(&pObj->Ctx, parameter, 1);
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	3320      	adds	r3, #32
 80014dc:	1979      	adds	r1, r7, r5
 80014de:	2201      	movs	r2, #1
 80014e0:	0018      	movs	r0, r3
 80014e2:	f000 fa38 	bl	8001956 <ili9341_send_data>
 80014e6:	0002      	movs	r2, r0
 80014e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ea:	189b      	adds	r3, r3, r2
 80014ec:	627b      	str	r3, [r7, #36]	; 0x24
    ILI9341_IO_Delay(pObj, 100);
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	2164      	movs	r1, #100	; 0x64
 80014f2:	0018      	movs	r0, r3
 80014f4:	f000 fa02 	bl	80018fc <ILI9341_IO_Delay>

    // Pixel Format
    reg = ILI9341_PIXEL_FORMAT;
 80014f8:	193b      	adds	r3, r7, r4
 80014fa:	223a      	movs	r2, #58	; 0x3a
 80014fc:	701a      	strb	r2, [r3, #0]
    ret += ili9341_write_reg(&pObj->Ctx, &reg, 1);
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	3320      	adds	r3, #32
 8001502:	1939      	adds	r1, r7, r4
 8001504:	2201      	movs	r2, #1
 8001506:	0018      	movs	r0, r3
 8001508:	f000 fa12 	bl	8001930 <ili9341_write_reg>
 800150c:	0002      	movs	r2, r0
 800150e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001510:	189b      	adds	r3, r3, r2
 8001512:	627b      	str	r3, [r7, #36]	; 0x24
    parameter[0] = ColorCoding;
 8001514:	68bb      	ldr	r3, [r7, #8]
 8001516:	b2da      	uxtb	r2, r3
 8001518:	197b      	adds	r3, r7, r5
 800151a:	701a      	strb	r2, [r3, #0]
    ret += ili9341_send_data(&pObj->Ctx, parameter, 1);
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	3320      	adds	r3, #32
 8001520:	1979      	adds	r1, r7, r5
 8001522:	2201      	movs	r2, #1
 8001524:	0018      	movs	r0, r3
 8001526:	f000 fa16 	bl	8001956 <ili9341_send_data>
 800152a:	0002      	movs	r2, r0
 800152c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800152e:	189b      	adds	r3, r3, r2
 8001530:	627b      	str	r3, [r7, #36]	; 0x24
    ILI9341_IO_Delay(pObj, 100);
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	2164      	movs	r1, #100	; 0x64
 8001536:	0018      	movs	r0, r3
 8001538:	f000 f9e0 	bl	80018fc <ILI9341_IO_Delay>

    // Enable TE
    reg = ILI9341_TEON;
 800153c:	193b      	adds	r3, r7, r4
 800153e:	2235      	movs	r2, #53	; 0x35
 8001540:	701a      	strb	r2, [r3, #0]
    ret += ili9341_write_reg(&pObj->Ctx, &reg, 1);
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	3320      	adds	r3, #32
 8001546:	1939      	adds	r1, r7, r4
 8001548:	2201      	movs	r2, #1
 800154a:	0018      	movs	r0, r3
 800154c:	f000 f9f0 	bl	8001930 <ili9341_write_reg>
 8001550:	0002      	movs	r2, r0
 8001552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001554:	189b      	adds	r3, r3, r2
 8001556:	627b      	str	r3, [r7, #36]	; 0x24
    parameter[0] = 0;
 8001558:	197b      	adds	r3, r7, r5
 800155a:	2200      	movs	r2, #0
 800155c:	701a      	strb	r2, [r3, #0]
    ret += ili9341_send_data(&pObj->Ctx, parameter, 1);
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	3320      	adds	r3, #32
 8001562:	1979      	adds	r1, r7, r5
 8001564:	2201      	movs	r2, #1
 8001566:	0018      	movs	r0, r3
 8001568:	f000 f9f5 	bl	8001956 <ili9341_send_data>
 800156c:	0002      	movs	r2, r0
 800156e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001570:	189b      	adds	r3, r3, r2
 8001572:	627b      	str	r3, [r7, #36]	; 0x24
    ILI9341_IO_Delay(pObj, 100);
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	2164      	movs	r1, #100	; 0x64
 8001578:	0018      	movs	r0, r3
 800157a:	f000 f9bf 	bl	80018fc <ILI9341_IO_Delay>

    // Enable TE scan line
    reg = ILI9341_SET_TEAR_SCANLINE;
 800157e:	193b      	adds	r3, r7, r4
 8001580:	2244      	movs	r2, #68	; 0x44
 8001582:	701a      	strb	r2, [r3, #0]
    ret += ili9341_write_reg(&pObj->Ctx, &reg, 1);
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	3320      	adds	r3, #32
 8001588:	1939      	adds	r1, r7, r4
 800158a:	2201      	movs	r2, #1
 800158c:	0018      	movs	r0, r3
 800158e:	f000 f9cf 	bl	8001930 <ili9341_write_reg>
 8001592:	0002      	movs	r2, r0
 8001594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001596:	189b      	adds	r3, r3, r2
 8001598:	627b      	str	r3, [r7, #36]	; 0x24
    parameter[0] = 0;
 800159a:	197b      	adds	r3, r7, r5
 800159c:	2200      	movs	r2, #0
 800159e:	701a      	strb	r2, [r3, #0]
    parameter[1] = 0;
 80015a0:	197b      	adds	r3, r7, r5
 80015a2:	2200      	movs	r2, #0
 80015a4:	705a      	strb	r2, [r3, #1]
    ret += ili9341_send_data(&pObj->Ctx, parameter, 2);
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	3320      	adds	r3, #32
 80015aa:	1979      	adds	r1, r7, r5
 80015ac:	2202      	movs	r2, #2
 80015ae:	0018      	movs	r0, r3
 80015b0:	f000 f9d1 	bl	8001956 <ili9341_send_data>
 80015b4:	0002      	movs	r2, r0
 80015b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015b8:	189b      	adds	r3, r3, r2
 80015ba:	627b      	str	r3, [r7, #36]	; 0x24
    ILI9341_IO_Delay(pObj, 100);
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	2164      	movs	r1, #100	; 0x64
 80015c0:	0018      	movs	r0, r3
 80015c2:	f000 f99b 	bl	80018fc <ILI9341_IO_Delay>
  }
  
  if(ret != ILI9341_OK)
 80015c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d002      	beq.n	80015d2 <ILI9341_Init+0x1f2>
  {
    ret = ILI9341_ERROR;
 80015cc:	2301      	movs	r3, #1
 80015ce:	425b      	negs	r3, r3
 80015d0:	627b      	str	r3, [r7, #36]	; 0x24
  }
  
  return ret;
 80015d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80015d4:	0018      	movs	r0, r3
 80015d6:	46bd      	mov	sp, r7
 80015d8:	b00a      	add	sp, #40	; 0x28
 80015da:	bdb0      	pop	{r4, r5, r7, pc}
 80015dc:	200000f4 	.word	0x200000f4

080015e0 <ILI9341_DeInit>:
  * @brief  De-Initialize the ili9341 LCD Component.
  * @param  pObj Component object
  * @retval Component status
  */
int32_t ILI9341_DeInit(ILI9341_Object_t *pObj)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b082      	sub	sp, #8
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  return pObj->IO.DeInit();	
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	4798      	blx	r3
 80015ee:	0003      	movs	r3, r0
}
 80015f0:	0018      	movs	r0, r3
 80015f2:	46bd      	mov	sp, r7
 80015f4:	b002      	add	sp, #8
 80015f6:	bd80      	pop	{r7, pc}

080015f8 <ILI9341_ReadID>:
  * @param  pObj Component object
  * @param  Id Component ID
  * @retval The component status
  */
int32_t ILI9341_ReadID(ILI9341_Object_t *pObj, uint32_t *Id)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b086      	sub	sp, #24
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
 8001600:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint32_t tmp;
  uint8_t reg = ILI9341_READ_ID4;
 8001602:	210f      	movs	r1, #15
 8001604:	187b      	adds	r3, r7, r1
 8001606:	22d3      	movs	r2, #211	; 0xd3
 8001608:	701a      	strb	r2, [r3, #0]
  
  if(ili9341_write_reg(&pObj->Ctx, &reg, 1) != ILI9341_OK)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	3320      	adds	r3, #32
 800160e:	1879      	adds	r1, r7, r1
 8001610:	2201      	movs	r2, #1
 8001612:	0018      	movs	r0, r3
 8001614:	f000 f98c 	bl	8001930 <ili9341_write_reg>
 8001618:	1e03      	subs	r3, r0, #0
 800161a:	d003      	beq.n	8001624 <ILI9341_ReadID+0x2c>
  {
    ret = ILI9341_ERROR;
 800161c:	2301      	movs	r3, #1
 800161e:	425b      	negs	r3, r3
 8001620:	617b      	str	r3, [r7, #20]
 8001622:	e012      	b.n	800164a <ILI9341_ReadID+0x52>
  }
  else if(ili9341_recv_data(&pObj->Ctx, (uint8_t*)&tmp, 4) != ILI9341_OK)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	3320      	adds	r3, #32
 8001628:	2210      	movs	r2, #16
 800162a:	18b9      	adds	r1, r7, r2
 800162c:	2204      	movs	r2, #4
 800162e:	0018      	movs	r0, r3
 8001630:	f000 f9a4 	bl	800197c <ili9341_recv_data>
 8001634:	1e03      	subs	r3, r0, #0
 8001636:	d003      	beq.n	8001640 <ILI9341_ReadID+0x48>
  {
    ret = ILI9341_ERROR;
 8001638:	2301      	movs	r3, #1
 800163a:	425b      	negs	r3, r3
 800163c:	617b      	str	r3, [r7, #20]
 800163e:	e004      	b.n	800164a <ILI9341_ReadID+0x52>
  }
  else
  {
    *Id = tmp;
 8001640:	693a      	ldr	r2, [r7, #16]
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	601a      	str	r2, [r3, #0]
    ret = ILI9341_OK;
 8001646:	2300      	movs	r3, #0
 8001648:	617b      	str	r3, [r7, #20]
  }
    
  return ret;
 800164a:	697b      	ldr	r3, [r7, #20]
}
 800164c:	0018      	movs	r0, r3
 800164e:	46bd      	mov	sp, r7
 8001650:	b006      	add	sp, #24
 8001652:	bd80      	pop	{r7, pc}

08001654 <ILI9341_DisplayOn>:
  * @brief  Enables the Display.
  * @param  pObj Component object
  * @retval The component status
  */
int32_t ILI9341_DisplayOn(ILI9341_Object_t *pObj)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b084      	sub	sp, #16
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  uint8_t reg = ILI9341_DISPLAY_ON;
 800165c:	210f      	movs	r1, #15
 800165e:	187b      	adds	r3, r7, r1
 8001660:	2229      	movs	r2, #41	; 0x29
 8001662:	701a      	strb	r2, [r3, #0]
  
  return ili9341_write_reg(&pObj->Ctx, &reg, 1);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	3320      	adds	r3, #32
 8001668:	1879      	adds	r1, r7, r1
 800166a:	2201      	movs	r2, #1
 800166c:	0018      	movs	r0, r3
 800166e:	f000 f95f 	bl	8001930 <ili9341_write_reg>
 8001672:	0003      	movs	r3, r0
}
 8001674:	0018      	movs	r0, r3
 8001676:	46bd      	mov	sp, r7
 8001678:	b004      	add	sp, #16
 800167a:	bd80      	pop	{r7, pc}

0800167c <ILI9341_DisplayOff>:
  * @brief  Disables the Display.
  * @param  pObj Component object
  * @retval The component status
  */
int32_t ILI9341_DisplayOff(ILI9341_Object_t *pObj)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b084      	sub	sp, #16
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  uint8_t reg = ILI9341_DISPLAY_OFF;
 8001684:	210f      	movs	r1, #15
 8001686:	187b      	adds	r3, r7, r1
 8001688:	2228      	movs	r2, #40	; 0x28
 800168a:	701a      	strb	r2, [r3, #0]
  
  return ili9341_write_reg(&pObj->Ctx, &reg, 1);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	3320      	adds	r3, #32
 8001690:	1879      	adds	r1, r7, r1
 8001692:	2201      	movs	r2, #1
 8001694:	0018      	movs	r0, r3
 8001696:	f000 f94b 	bl	8001930 <ili9341_write_reg>
 800169a:	0003      	movs	r3, r0
}
 800169c:	0018      	movs	r0, r3
 800169e:	46bd      	mov	sp, r7
 80016a0:	b004      	add	sp, #16
 80016a2:	bd80      	pop	{r7, pc}

080016a4 <ILI9341_SetOrientation>:
  * @param  Orientation ILI9341_ORIENTATION_PORTRAIT, ILI9341_ORIENTATION_PORTRAIT_ROT180
  *                     ILI9341_ORIENTATION_LANDSCAPE or ILI9341_ORIENTATION_LANDSCAPE_ROT180  
  * @retval The component status
  */
int32_t ILI9341_SetOrientation(ILI9341_Object_t *pObj, uint32_t Orientation)
{
 80016a4:	b590      	push	{r4, r7, lr}
 80016a6:	b085      	sub	sp, #20
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
 80016ac:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t parameter, reg;
  
  parameter = (uint8_t)OrientationTab[Orientation];
 80016ae:	4b17      	ldr	r3, [pc, #92]	; (800170c <ILI9341_SetOrientation+0x68>)
 80016b0:	683a      	ldr	r2, [r7, #0]
 80016b2:	0092      	lsls	r2, r2, #2
 80016b4:	58d3      	ldr	r3, [r2, r3]
 80016b6:	b2da      	uxtb	r2, r3
 80016b8:	240b      	movs	r4, #11
 80016ba:	193b      	adds	r3, r7, r4
 80016bc:	701a      	strb	r2, [r3, #0]
  reg = ILI9341_MAC;
 80016be:	210a      	movs	r1, #10
 80016c0:	187b      	adds	r3, r7, r1
 80016c2:	2236      	movs	r2, #54	; 0x36
 80016c4:	701a      	strb	r2, [r3, #0]
  ret = ili9341_write_reg(&pObj->Ctx, &reg, 1);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	3320      	adds	r3, #32
 80016ca:	1879      	adds	r1, r7, r1
 80016cc:	2201      	movs	r2, #1
 80016ce:	0018      	movs	r0, r3
 80016d0:	f000 f92e 	bl	8001930 <ili9341_write_reg>
 80016d4:	0003      	movs	r3, r0
 80016d6:	60fb      	str	r3, [r7, #12]
  ret += ili9341_send_data(&pObj->Ctx, &parameter, 1);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	3320      	adds	r3, #32
 80016dc:	1939      	adds	r1, r7, r4
 80016de:	2201      	movs	r2, #1
 80016e0:	0018      	movs	r0, r3
 80016e2:	f000 f938 	bl	8001956 <ili9341_send_data>
 80016e6:	0002      	movs	r2, r0
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	189b      	adds	r3, r3, r2
 80016ec:	60fb      	str	r3, [r7, #12]

  ILI9341Ctx.Orientation = Orientation;
 80016ee:	4b08      	ldr	r3, [pc, #32]	; (8001710 <ILI9341_SetOrientation+0x6c>)
 80016f0:	683a      	ldr	r2, [r7, #0]
 80016f2:	609a      	str	r2, [r3, #8]
  
  if(ret != ILI9341_OK)
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d002      	beq.n	8001700 <ILI9341_SetOrientation+0x5c>
  {
    ret = ILI9341_ERROR;
 80016fa:	2301      	movs	r3, #1
 80016fc:	425b      	negs	r3, r3
 80016fe:	60fb      	str	r3, [r7, #12]
  }
  
  return ret;
 8001700:	68fb      	ldr	r3, [r7, #12]
}
 8001702:	0018      	movs	r0, r3
 8001704:	46bd      	mov	sp, r7
 8001706:	b005      	add	sp, #20
 8001708:	bd90      	pop	{r4, r7, pc}
 800170a:	46c0      	nop			; (mov r8, r8)
 800170c:	20000054 	.word	0x20000054
 8001710:	200000f4 	.word	0x200000f4

08001714 <ILI9341_GetXSize>:
  * @brief  Get the LCD pixel Width.
  * @param  pObj Component object
  * @retval The Lcd Pixel Width
  */
int32_t ILI9341_GetXSize(ILI9341_Object_t *pObj, uint32_t *XSize)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b082      	sub	sp, #8
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
 800171c:	6039      	str	r1, [r7, #0]
  (void)pObj;
  
  *XSize = ILI9341Ctx.Width;
 800171e:	4b04      	ldr	r3, [pc, #16]	; (8001730 <ILI9341_GetXSize+0x1c>)
 8001720:	681a      	ldr	r2, [r3, #0]
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	601a      	str	r2, [r3, #0]
  
  return ILI9341_OK;
 8001726:	2300      	movs	r3, #0
}
 8001728:	0018      	movs	r0, r3
 800172a:	46bd      	mov	sp, r7
 800172c:	b002      	add	sp, #8
 800172e:	bd80      	pop	{r7, pc}
 8001730:	200000f4 	.word	0x200000f4

08001734 <ILI9341_GetYSize>:
  * @brief  Get the LCD pixel Height.
  * @param  pObj Component object
  * @retval The Lcd Pixel Height
  */
int32_t ILI9341_GetYSize(ILI9341_Object_t *pObj, uint32_t *YSize)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b082      	sub	sp, #8
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
 800173c:	6039      	str	r1, [r7, #0]
  (void)pObj;
  
  *YSize = ILI9341Ctx.Height;
 800173e:	4b04      	ldr	r3, [pc, #16]	; (8001750 <ILI9341_GetYSize+0x1c>)
 8001740:	685a      	ldr	r2, [r3, #4]
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	601a      	str	r2, [r3, #0]
  
  return ILI9341_OK;
 8001746:	2300      	movs	r3, #0
}
 8001748:	0018      	movs	r0, r3
 800174a:	46bd      	mov	sp, r7
 800174c:	b002      	add	sp, #8
 800174e:	bd80      	pop	{r7, pc}
 8001750:	200000f4 	.word	0x200000f4

08001754 <ILI9341_SetDisplayWindow>:
  * @param  Height display window height.
  * @param  Width  display window width.
  * @retval Component status
  */
int32_t ILI9341_SetDisplayWindow(ILI9341_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint32_t Width, uint32_t Height)
{
 8001754:	b5b0      	push	{r4, r5, r7, lr}
 8001756:	b088      	sub	sp, #32
 8001758:	af00      	add	r7, sp, #0
 800175a:	60f8      	str	r0, [r7, #12]
 800175c:	60b9      	str	r1, [r7, #8]
 800175e:	607a      	str	r2, [r7, #4]
 8001760:	603b      	str	r3, [r7, #0]
  int32_t ret;
  uint8_t parameter[4];
  uint8_t reg = ILI9341_CASET;
 8001762:	2517      	movs	r5, #23
 8001764:	197b      	adds	r3, r7, r5
 8001766:	222a      	movs	r2, #42	; 0x2a
 8001768:	701a      	strb	r2, [r3, #0]
  
  /* Column addr set, 4 args, no delay: XSTART = Xpos, XEND = (Xpos + Width - 1) */  
  ret = ili9341_write_reg(&pObj->Ctx, &reg, 1);  
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	3320      	adds	r3, #32
 800176e:	1979      	adds	r1, r7, r5
 8001770:	2201      	movs	r2, #1
 8001772:	0018      	movs	r0, r3
 8001774:	f000 f8dc 	bl	8001930 <ili9341_write_reg>
 8001778:	0003      	movs	r3, r0
 800177a:	61fb      	str	r3, [r7, #28]
  parameter [0] = (uint8_t)(Xpos >> 8U);
 800177c:	68bb      	ldr	r3, [r7, #8]
 800177e:	0a1b      	lsrs	r3, r3, #8
 8001780:	b2da      	uxtb	r2, r3
 8001782:	2418      	movs	r4, #24
 8001784:	193b      	adds	r3, r7, r4
 8001786:	701a      	strb	r2, [r3, #0]
  parameter [1] = (uint8_t)(Xpos & 0xFFU);
 8001788:	68bb      	ldr	r3, [r7, #8]
 800178a:	b2da      	uxtb	r2, r3
 800178c:	193b      	adds	r3, r7, r4
 800178e:	705a      	strb	r2, [r3, #1]
  parameter [2] = (uint8_t)((Xpos + Width - 1U) >> 8U);
 8001790:	68ba      	ldr	r2, [r7, #8]
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	18d3      	adds	r3, r2, r3
 8001796:	3b01      	subs	r3, #1
 8001798:	0a1b      	lsrs	r3, r3, #8
 800179a:	b2da      	uxtb	r2, r3
 800179c:	193b      	adds	r3, r7, r4
 800179e:	709a      	strb	r2, [r3, #2]
  parameter [3] = (uint8_t)((Xpos + Width - 1U) & 0xFFU);  
 80017a0:	68bb      	ldr	r3, [r7, #8]
 80017a2:	b2da      	uxtb	r2, r3
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	b2db      	uxtb	r3, r3
 80017a8:	18d3      	adds	r3, r2, r3
 80017aa:	b2db      	uxtb	r3, r3
 80017ac:	3b01      	subs	r3, #1
 80017ae:	b2da      	uxtb	r2, r3
 80017b0:	193b      	adds	r3, r7, r4
 80017b2:	70da      	strb	r2, [r3, #3]
  ret += ili9341_send_data(&pObj->Ctx, parameter, 4);
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	3320      	adds	r3, #32
 80017b8:	1939      	adds	r1, r7, r4
 80017ba:	2204      	movs	r2, #4
 80017bc:	0018      	movs	r0, r3
 80017be:	f000 f8ca 	bl	8001956 <ili9341_send_data>
 80017c2:	0002      	movs	r2, r0
 80017c4:	69fb      	ldr	r3, [r7, #28]
 80017c6:	189b      	adds	r3, r3, r2
 80017c8:	61fb      	str	r3, [r7, #28]
  
  /* Row addr set, 4 args, no delay: YSTART = Ypos, YEND = (Ypos + Height - 1) */
  reg = ILI9341_RASET;
 80017ca:	197b      	adds	r3, r7, r5
 80017cc:	222b      	movs	r2, #43	; 0x2b
 80017ce:	701a      	strb	r2, [r3, #0]
  ret += ili9341_write_reg(&pObj->Ctx, &reg, 1);   
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	3320      	adds	r3, #32
 80017d4:	1979      	adds	r1, r7, r5
 80017d6:	2201      	movs	r2, #1
 80017d8:	0018      	movs	r0, r3
 80017da:	f000 f8a9 	bl	8001930 <ili9341_write_reg>
 80017de:	0002      	movs	r2, r0
 80017e0:	69fb      	ldr	r3, [r7, #28]
 80017e2:	189b      	adds	r3, r3, r2
 80017e4:	61fb      	str	r3, [r7, #28]
  parameter [0] = (uint8_t)(Ypos >> 8U);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	0a1b      	lsrs	r3, r3, #8
 80017ea:	b2da      	uxtb	r2, r3
 80017ec:	193b      	adds	r3, r7, r4
 80017ee:	701a      	strb	r2, [r3, #0]
  parameter [1] = (uint8_t)(Ypos & 0xFFU);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	b2da      	uxtb	r2, r3
 80017f4:	193b      	adds	r3, r7, r4
 80017f6:	705a      	strb	r2, [r3, #1]
  parameter [2] = (uint8_t)((Ypos + Height - 1U) >> 8U);
 80017f8:	687a      	ldr	r2, [r7, #4]
 80017fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017fc:	18d3      	adds	r3, r2, r3
 80017fe:	3b01      	subs	r3, #1
 8001800:	0a1b      	lsrs	r3, r3, #8
 8001802:	b2da      	uxtb	r2, r3
 8001804:	193b      	adds	r3, r7, r4
 8001806:	709a      	strb	r2, [r3, #2]
  parameter [3] = (uint8_t)((Ypos + Height - 1U) & 0xFFU);  
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	b2da      	uxtb	r2, r3
 800180c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800180e:	b2db      	uxtb	r3, r3
 8001810:	18d3      	adds	r3, r2, r3
 8001812:	b2db      	uxtb	r3, r3
 8001814:	3b01      	subs	r3, #1
 8001816:	b2da      	uxtb	r2, r3
 8001818:	193b      	adds	r3, r7, r4
 800181a:	70da      	strb	r2, [r3, #3]
  ret += ili9341_send_data(&pObj->Ctx, parameter, 4);
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	3320      	adds	r3, #32
 8001820:	1939      	adds	r1, r7, r4
 8001822:	2204      	movs	r2, #4
 8001824:	0018      	movs	r0, r3
 8001826:	f000 f896 	bl	8001956 <ili9341_send_data>
 800182a:	0002      	movs	r2, r0
 800182c:	69fb      	ldr	r3, [r7, #28]
 800182e:	189b      	adds	r3, r3, r2
 8001830:	61fb      	str	r3, [r7, #28]

  reg = ILI9341_GRAM;
 8001832:	197b      	adds	r3, r7, r5
 8001834:	222c      	movs	r2, #44	; 0x2c
 8001836:	701a      	strb	r2, [r3, #0]
  ret += ili9341_write_reg(&pObj->Ctx, &reg, 1);
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	3320      	adds	r3, #32
 800183c:	1979      	adds	r1, r7, r5
 800183e:	2201      	movs	r2, #1
 8001840:	0018      	movs	r0, r3
 8001842:	f000 f875 	bl	8001930 <ili9341_write_reg>
 8001846:	0002      	movs	r2, r0
 8001848:	69fb      	ldr	r3, [r7, #28]
 800184a:	189b      	adds	r3, r3, r2
 800184c:	61fb      	str	r3, [r7, #28]
    
  if(ret != ILI9341_OK)
 800184e:	69fb      	ldr	r3, [r7, #28]
 8001850:	2b00      	cmp	r3, #0
 8001852:	d002      	beq.n	800185a <ILI9341_SetDisplayWindow+0x106>
  {
    ret = ILI9341_ERROR;
 8001854:	2301      	movs	r3, #1
 8001856:	425b      	negs	r3, r3
 8001858:	61fb      	str	r3, [r7, #28]
  }
  
  return ret;
 800185a:	69fb      	ldr	r3, [r7, #28]
}
 800185c:	0018      	movs	r0, r3
 800185e:	46bd      	mov	sp, r7
 8001860:	b008      	add	sp, #32
 8001862:	bdb0      	pop	{r4, r5, r7, pc}

08001864 <ILI9341_ReadRegWrap>:
  * @param  Reg  The target register address to write
  * @param  pData  The target register value to be written
  * @retval Component error status
  */
static int32_t ILI9341_ReadRegWrap(void *Handle, uint8_t* Reg, uint32_t Length)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b086      	sub	sp, #24
 8001868:	af00      	add	r7, sp, #0
 800186a:	60f8      	str	r0, [r7, #12]
 800186c:	60b9      	str	r1, [r7, #8]
 800186e:	607a      	str	r2, [r7, #4]
  ILI9341_Object_t *pObj = (ILI9341_Object_t *)Handle;
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(Reg, Length);
 8001874:	697b      	ldr	r3, [r7, #20]
 8001876:	691b      	ldr	r3, [r3, #16]
 8001878:	6879      	ldr	r1, [r7, #4]
 800187a:	68ba      	ldr	r2, [r7, #8]
 800187c:	0010      	movs	r0, r2
 800187e:	4798      	blx	r3
 8001880:	0003      	movs	r3, r0
}
 8001882:	0018      	movs	r0, r3
 8001884:	46bd      	mov	sp, r7
 8001886:	b006      	add	sp, #24
 8001888:	bd80      	pop	{r7, pc}

0800188a <ILI9341_WriteRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval Component error status
  */
static int32_t ILI9341_WriteRegWrap(void *Handle, uint8_t* Reg, uint32_t Length)
{
 800188a:	b580      	push	{r7, lr}
 800188c:	b086      	sub	sp, #24
 800188e:	af00      	add	r7, sp, #0
 8001890:	60f8      	str	r0, [r7, #12]
 8001892:	60b9      	str	r1, [r7, #8]
 8001894:	607a      	str	r2, [r7, #4]
  ILI9341_Object_t *pObj = (ILI9341_Object_t *)Handle;
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(Reg, Length);
 800189a:	697b      	ldr	r3, [r7, #20]
 800189c:	68db      	ldr	r3, [r3, #12]
 800189e:	6879      	ldr	r1, [r7, #4]
 80018a0:	68ba      	ldr	r2, [r7, #8]
 80018a2:	0010      	movs	r0, r2
 80018a4:	4798      	blx	r3
 80018a6:	0003      	movs	r3, r0
}
 80018a8:	0018      	movs	r0, r3
 80018aa:	46bd      	mov	sp, r7
 80018ac:	b006      	add	sp, #24
 80018ae:	bd80      	pop	{r7, pc}

080018b0 <ILI9341_SendDataWrap>:
  * @param  handle  Component object handle
  * @param  pData  The target register value to be written
  * @retval Component error status
  */
static int32_t ILI9341_SendDataWrap(void *Handle, uint8_t *pData, uint32_t Length)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b086      	sub	sp, #24
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	60f8      	str	r0, [r7, #12]
 80018b8:	60b9      	str	r1, [r7, #8]
 80018ba:	607a      	str	r2, [r7, #4]
  ILI9341_Object_t *pObj = (ILI9341_Object_t *)Handle;
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	617b      	str	r3, [r7, #20]

  return pObj->IO.SendData(pData, Length);
 80018c0:	697b      	ldr	r3, [r7, #20]
 80018c2:	695b      	ldr	r3, [r3, #20]
 80018c4:	6879      	ldr	r1, [r7, #4]
 80018c6:	68ba      	ldr	r2, [r7, #8]
 80018c8:	0010      	movs	r0, r2
 80018ca:	4798      	blx	r3
 80018cc:	0003      	movs	r3, r0
}
 80018ce:	0018      	movs	r0, r3
 80018d0:	46bd      	mov	sp, r7
 80018d2:	b006      	add	sp, #24
 80018d4:	bd80      	pop	{r7, pc}

080018d6 <ILI9341_RecvDataWrap>:
  * @param  handle  Component object handle
  * @param  pData  The target register value to be written
  * @retval Component error status
  */
static int32_t ILI9341_RecvDataWrap(void *Handle, uint8_t *pData, uint32_t Length)
{
 80018d6:	b580      	push	{r7, lr}
 80018d8:	b086      	sub	sp, #24
 80018da:	af00      	add	r7, sp, #0
 80018dc:	60f8      	str	r0, [r7, #12]
 80018de:	60b9      	str	r1, [r7, #8]
 80018e0:	607a      	str	r2, [r7, #4]
  ILI9341_Object_t *pObj = (ILI9341_Object_t *)Handle;
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	617b      	str	r3, [r7, #20]

  return pObj->IO.RecvData(pData, Length);
 80018e6:	697b      	ldr	r3, [r7, #20]
 80018e8:	699b      	ldr	r3, [r3, #24]
 80018ea:	6879      	ldr	r1, [r7, #4]
 80018ec:	68ba      	ldr	r2, [r7, #8]
 80018ee:	0010      	movs	r0, r2
 80018f0:	4798      	blx	r3
 80018f2:	0003      	movs	r3, r0
}
 80018f4:	0018      	movs	r0, r3
 80018f6:	46bd      	mov	sp, r7
 80018f8:	b006      	add	sp, #24
 80018fa:	bd80      	pop	{r7, pc}

080018fc <ILI9341_IO_Delay>:
  * @brief  ILI9341 delay
  * @param  Delay  Delay in ms
  * @retval Component error status
  */
static int32_t ILI9341_IO_Delay(ILI9341_Object_t *pObj, uint32_t Delay)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b084      	sub	sp, #16
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
 8001904:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  tickstart = pObj->IO.GetTick();
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	69db      	ldr	r3, [r3, #28]
 800190a:	4798      	blx	r3
 800190c:	0003      	movs	r3, r0
 800190e:	60fb      	str	r3, [r7, #12]
  while((pObj->IO.GetTick() - tickstart) < Delay)
 8001910:	46c0      	nop			; (mov r8, r8)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	69db      	ldr	r3, [r3, #28]
 8001916:	4798      	blx	r3
 8001918:	0003      	movs	r3, r0
 800191a:	001a      	movs	r2, r3
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	1ad3      	subs	r3, r2, r3
 8001920:	683a      	ldr	r2, [r7, #0]
 8001922:	429a      	cmp	r2, r3
 8001924:	d8f5      	bhi.n	8001912 <ILI9341_IO_Delay+0x16>
  {
  }
  return ILI9341_OK;
 8001926:	2300      	movs	r3, #0
}
 8001928:	0018      	movs	r0, r3
 800192a:	46bd      	mov	sp, r7
 800192c:	b004      	add	sp, #16
 800192e:	bd80      	pop	{r7, pc}

08001930 <ili9341_write_reg>:
  * @param  pdata Pointer to data buffer
  * @param  length Number of data to write  
  * @retval Component status
  */
int32_t ili9341_write_reg(ili9341_ctx_t *ctx, uint8_t* reg, uint32_t length)
{
 8001930:	b590      	push	{r4, r7, lr}
 8001932:	b085      	sub	sp, #20
 8001934:	af00      	add	r7, sp, #0
 8001936:	60f8      	str	r0, [r7, #12]
 8001938:	60b9      	str	r1, [r7, #8]
 800193a:	607a      	str	r2, [r7, #4]
  return ctx->WriteReg(ctx->handle, reg, length);
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	681c      	ldr	r4, [r3, #0]
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	691b      	ldr	r3, [r3, #16]
 8001944:	687a      	ldr	r2, [r7, #4]
 8001946:	68b9      	ldr	r1, [r7, #8]
 8001948:	0018      	movs	r0, r3
 800194a:	47a0      	blx	r4
 800194c:	0003      	movs	r3, r0
}
 800194e:	0018      	movs	r0, r3
 8001950:	46bd      	mov	sp, r7
 8001952:	b005      	add	sp, #20
 8001954:	bd90      	pop	{r4, r7, pc}

08001956 <ili9341_send_data>:
  * @param  pdata  data to write
  * @param  Length Length of data to write
  * @retval Component status
  */
int32_t ili9341_send_data(ili9341_ctx_t *ctx, uint8_t *pdata, uint32_t length)
{
 8001956:	b590      	push	{r4, r7, lr}
 8001958:	b085      	sub	sp, #20
 800195a:	af00      	add	r7, sp, #0
 800195c:	60f8      	str	r0, [r7, #12]
 800195e:	60b9      	str	r1, [r7, #8]
 8001960:	607a      	str	r2, [r7, #4]
  return ctx->SendData(ctx->handle, pdata, length);
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	689c      	ldr	r4, [r3, #8]
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	691b      	ldr	r3, [r3, #16]
 800196a:	687a      	ldr	r2, [r7, #4]
 800196c:	68b9      	ldr	r1, [r7, #8]
 800196e:	0018      	movs	r0, r3
 8001970:	47a0      	blx	r4
 8001972:	0003      	movs	r3, r0
}
 8001974:	0018      	movs	r0, r3
 8001976:	46bd      	mov	sp, r7
 8001978:	b005      	add	sp, #20
 800197a:	bd90      	pop	{r4, r7, pc}

0800197c <ili9341_recv_data>:
  * @param  pdata  data to read
  * @param  Length Length of data to read
  * @retval Component status
  */
int32_t ili9341_recv_data(ili9341_ctx_t *ctx, uint8_t *pdata, uint32_t length)
{
 800197c:	b590      	push	{r4, r7, lr}
 800197e:	b085      	sub	sp, #20
 8001980:	af00      	add	r7, sp, #0
 8001982:	60f8      	str	r0, [r7, #12]
 8001984:	60b9      	str	r1, [r7, #8]
 8001986:	607a      	str	r2, [r7, #4]
  return ctx->RecvData(ctx->handle, pdata, length);
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	68dc      	ldr	r4, [r3, #12]
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	691b      	ldr	r3, [r3, #16]
 8001990:	687a      	ldr	r2, [r7, #4]
 8001992:	68b9      	ldr	r1, [r7, #8]
 8001994:	0018      	movs	r0, r3
 8001996:	47a0      	blx	r4
 8001998:	0003      	movs	r3, r0
}
 800199a:	0018      	movs	r0, r3
 800199c:	46bd      	mov	sp, r7
 800199e:	b005      	add	sp, #20
 80019a0:	bd90      	pop	{r4, r7, pc}
	...

080019a4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b082      	sub	sp, #8
 80019a8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80019aa:	1dfb      	adds	r3, r7, #7
 80019ac:	2200      	movs	r2, #0
 80019ae:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019b0:	4b0b      	ldr	r3, [pc, #44]	; (80019e0 <HAL_Init+0x3c>)
 80019b2:	681a      	ldr	r2, [r3, #0]
 80019b4:	4b0a      	ldr	r3, [pc, #40]	; (80019e0 <HAL_Init+0x3c>)
 80019b6:	2180      	movs	r1, #128	; 0x80
 80019b8:	0049      	lsls	r1, r1, #1
 80019ba:	430a      	orrs	r2, r1
 80019bc:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80019be:	2000      	movs	r0, #0
 80019c0:	f000 f810 	bl	80019e4 <HAL_InitTick>
 80019c4:	1e03      	subs	r3, r0, #0
 80019c6:	d003      	beq.n	80019d0 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80019c8:	1dfb      	adds	r3, r7, #7
 80019ca:	2201      	movs	r2, #1
 80019cc:	701a      	strb	r2, [r3, #0]
 80019ce:	e001      	b.n	80019d4 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80019d0:	f7fe ff90 	bl	80008f4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80019d4:	1dfb      	adds	r3, r7, #7
 80019d6:	781b      	ldrb	r3, [r3, #0]
}
 80019d8:	0018      	movs	r0, r3
 80019da:	46bd      	mov	sp, r7
 80019dc:	b002      	add	sp, #8
 80019de:	bd80      	pop	{r7, pc}
 80019e0:	40022000 	.word	0x40022000

080019e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019e4:	b590      	push	{r4, r7, lr}
 80019e6:	b085      	sub	sp, #20
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80019ec:	230f      	movs	r3, #15
 80019ee:	18fb      	adds	r3, r7, r3
 80019f0:	2200      	movs	r2, #0
 80019f2:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 80019f4:	4b1d      	ldr	r3, [pc, #116]	; (8001a6c <HAL_InitTick+0x88>)
 80019f6:	781b      	ldrb	r3, [r3, #0]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d02b      	beq.n	8001a54 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 80019fc:	4b1c      	ldr	r3, [pc, #112]	; (8001a70 <HAL_InitTick+0x8c>)
 80019fe:	681c      	ldr	r4, [r3, #0]
 8001a00:	4b1a      	ldr	r3, [pc, #104]	; (8001a6c <HAL_InitTick+0x88>)
 8001a02:	781b      	ldrb	r3, [r3, #0]
 8001a04:	0019      	movs	r1, r3
 8001a06:	23fa      	movs	r3, #250	; 0xfa
 8001a08:	0098      	lsls	r0, r3, #2
 8001a0a:	f7fe fb7b 	bl	8000104 <__udivsi3>
 8001a0e:	0003      	movs	r3, r0
 8001a10:	0019      	movs	r1, r3
 8001a12:	0020      	movs	r0, r4
 8001a14:	f7fe fb76 	bl	8000104 <__udivsi3>
 8001a18:	0003      	movs	r3, r0
 8001a1a:	0018      	movs	r0, r3
 8001a1c:	f000 f929 	bl	8001c72 <HAL_SYSTICK_Config>
 8001a20:	1e03      	subs	r3, r0, #0
 8001a22:	d112      	bne.n	8001a4a <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	2b03      	cmp	r3, #3
 8001a28:	d80a      	bhi.n	8001a40 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a2a:	6879      	ldr	r1, [r7, #4]
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	425b      	negs	r3, r3
 8001a30:	2200      	movs	r2, #0
 8001a32:	0018      	movs	r0, r3
 8001a34:	f000 f908 	bl	8001c48 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001a38:	4b0e      	ldr	r3, [pc, #56]	; (8001a74 <HAL_InitTick+0x90>)
 8001a3a:	687a      	ldr	r2, [r7, #4]
 8001a3c:	601a      	str	r2, [r3, #0]
 8001a3e:	e00d      	b.n	8001a5c <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001a40:	230f      	movs	r3, #15
 8001a42:	18fb      	adds	r3, r7, r3
 8001a44:	2201      	movs	r2, #1
 8001a46:	701a      	strb	r2, [r3, #0]
 8001a48:	e008      	b.n	8001a5c <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001a4a:	230f      	movs	r3, #15
 8001a4c:	18fb      	adds	r3, r7, r3
 8001a4e:	2201      	movs	r2, #1
 8001a50:	701a      	strb	r2, [r3, #0]
 8001a52:	e003      	b.n	8001a5c <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001a54:	230f      	movs	r3, #15
 8001a56:	18fb      	adds	r3, r7, r3
 8001a58:	2201      	movs	r2, #1
 8001a5a:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8001a5c:	230f      	movs	r3, #15
 8001a5e:	18fb      	adds	r3, r7, r3
 8001a60:	781b      	ldrb	r3, [r3, #0]
}
 8001a62:	0018      	movs	r0, r3
 8001a64:	46bd      	mov	sp, r7
 8001a66:	b005      	add	sp, #20
 8001a68:	bd90      	pop	{r4, r7, pc}
 8001a6a:	46c0      	nop			; (mov r8, r8)
 8001a6c:	20000068 	.word	0x20000068
 8001a70:	20000000 	.word	0x20000000
 8001a74:	20000064 	.word	0x20000064

08001a78 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001a7c:	4b05      	ldr	r3, [pc, #20]	; (8001a94 <HAL_IncTick+0x1c>)
 8001a7e:	781b      	ldrb	r3, [r3, #0]
 8001a80:	001a      	movs	r2, r3
 8001a82:	4b05      	ldr	r3, [pc, #20]	; (8001a98 <HAL_IncTick+0x20>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	18d2      	adds	r2, r2, r3
 8001a88:	4b03      	ldr	r3, [pc, #12]	; (8001a98 <HAL_IncTick+0x20>)
 8001a8a:	601a      	str	r2, [r3, #0]
}
 8001a8c:	46c0      	nop			; (mov r8, r8)
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	46c0      	nop			; (mov r8, r8)
 8001a94:	20000068 	.word	0x20000068
 8001a98:	20000264 	.word	0x20000264

08001a9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	af00      	add	r7, sp, #0
  return uwTick;
 8001aa0:	4b02      	ldr	r3, [pc, #8]	; (8001aac <HAL_GetTick+0x10>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
}
 8001aa4:	0018      	movs	r0, r3
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	46c0      	nop			; (mov r8, r8)
 8001aac:	20000264 	.word	0x20000264

08001ab0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b084      	sub	sp, #16
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ab8:	f7ff fff0 	bl	8001a9c <HAL_GetTick>
 8001abc:	0003      	movs	r3, r0
 8001abe:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	3301      	adds	r3, #1
 8001ac8:	d005      	beq.n	8001ad6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001aca:	4b0a      	ldr	r3, [pc, #40]	; (8001af4 <HAL_Delay+0x44>)
 8001acc:	781b      	ldrb	r3, [r3, #0]
 8001ace:	001a      	movs	r2, r3
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	189b      	adds	r3, r3, r2
 8001ad4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001ad6:	46c0      	nop			; (mov r8, r8)
 8001ad8:	f7ff ffe0 	bl	8001a9c <HAL_GetTick>
 8001adc:	0002      	movs	r2, r0
 8001ade:	68bb      	ldr	r3, [r7, #8]
 8001ae0:	1ad3      	subs	r3, r2, r3
 8001ae2:	68fa      	ldr	r2, [r7, #12]
 8001ae4:	429a      	cmp	r2, r3
 8001ae6:	d8f7      	bhi.n	8001ad8 <HAL_Delay+0x28>
  {
  }
}
 8001ae8:	46c0      	nop			; (mov r8, r8)
 8001aea:	46c0      	nop			; (mov r8, r8)
 8001aec:	46bd      	mov	sp, r7
 8001aee:	b004      	add	sp, #16
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	46c0      	nop			; (mov r8, r8)
 8001af4:	20000068 	.word	0x20000068

08001af8 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b082      	sub	sp, #8
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8001b00:	4b06      	ldr	r3, [pc, #24]	; (8001b1c <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4a06      	ldr	r2, [pc, #24]	; (8001b20 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8001b06:	4013      	ands	r3, r2
 8001b08:	0019      	movs	r1, r3
 8001b0a:	4b04      	ldr	r3, [pc, #16]	; (8001b1c <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8001b0c:	687a      	ldr	r2, [r7, #4]
 8001b0e:	430a      	orrs	r2, r1
 8001b10:	601a      	str	r2, [r3, #0]
}
 8001b12:	46c0      	nop			; (mov r8, r8)
 8001b14:	46bd      	mov	sp, r7
 8001b16:	b002      	add	sp, #8
 8001b18:	bd80      	pop	{r7, pc}
 8001b1a:	46c0      	nop			; (mov r8, r8)
 8001b1c:	40010000 	.word	0x40010000
 8001b20:	fffff9ff 	.word	0xfffff9ff

08001b24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b24:	b590      	push	{r4, r7, lr}
 8001b26:	b083      	sub	sp, #12
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	0002      	movs	r2, r0
 8001b2c:	6039      	str	r1, [r7, #0]
 8001b2e:	1dfb      	adds	r3, r7, #7
 8001b30:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001b32:	1dfb      	adds	r3, r7, #7
 8001b34:	781b      	ldrb	r3, [r3, #0]
 8001b36:	2b7f      	cmp	r3, #127	; 0x7f
 8001b38:	d828      	bhi.n	8001b8c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001b3a:	4a2f      	ldr	r2, [pc, #188]	; (8001bf8 <__NVIC_SetPriority+0xd4>)
 8001b3c:	1dfb      	adds	r3, r7, #7
 8001b3e:	781b      	ldrb	r3, [r3, #0]
 8001b40:	b25b      	sxtb	r3, r3
 8001b42:	089b      	lsrs	r3, r3, #2
 8001b44:	33c0      	adds	r3, #192	; 0xc0
 8001b46:	009b      	lsls	r3, r3, #2
 8001b48:	589b      	ldr	r3, [r3, r2]
 8001b4a:	1dfa      	adds	r2, r7, #7
 8001b4c:	7812      	ldrb	r2, [r2, #0]
 8001b4e:	0011      	movs	r1, r2
 8001b50:	2203      	movs	r2, #3
 8001b52:	400a      	ands	r2, r1
 8001b54:	00d2      	lsls	r2, r2, #3
 8001b56:	21ff      	movs	r1, #255	; 0xff
 8001b58:	4091      	lsls	r1, r2
 8001b5a:	000a      	movs	r2, r1
 8001b5c:	43d2      	mvns	r2, r2
 8001b5e:	401a      	ands	r2, r3
 8001b60:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	019b      	lsls	r3, r3, #6
 8001b66:	22ff      	movs	r2, #255	; 0xff
 8001b68:	401a      	ands	r2, r3
 8001b6a:	1dfb      	adds	r3, r7, #7
 8001b6c:	781b      	ldrb	r3, [r3, #0]
 8001b6e:	0018      	movs	r0, r3
 8001b70:	2303      	movs	r3, #3
 8001b72:	4003      	ands	r3, r0
 8001b74:	00db      	lsls	r3, r3, #3
 8001b76:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001b78:	481f      	ldr	r0, [pc, #124]	; (8001bf8 <__NVIC_SetPriority+0xd4>)
 8001b7a:	1dfb      	adds	r3, r7, #7
 8001b7c:	781b      	ldrb	r3, [r3, #0]
 8001b7e:	b25b      	sxtb	r3, r3
 8001b80:	089b      	lsrs	r3, r3, #2
 8001b82:	430a      	orrs	r2, r1
 8001b84:	33c0      	adds	r3, #192	; 0xc0
 8001b86:	009b      	lsls	r3, r3, #2
 8001b88:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001b8a:	e031      	b.n	8001bf0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001b8c:	4a1b      	ldr	r2, [pc, #108]	; (8001bfc <__NVIC_SetPriority+0xd8>)
 8001b8e:	1dfb      	adds	r3, r7, #7
 8001b90:	781b      	ldrb	r3, [r3, #0]
 8001b92:	0019      	movs	r1, r3
 8001b94:	230f      	movs	r3, #15
 8001b96:	400b      	ands	r3, r1
 8001b98:	3b08      	subs	r3, #8
 8001b9a:	089b      	lsrs	r3, r3, #2
 8001b9c:	3306      	adds	r3, #6
 8001b9e:	009b      	lsls	r3, r3, #2
 8001ba0:	18d3      	adds	r3, r2, r3
 8001ba2:	3304      	adds	r3, #4
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	1dfa      	adds	r2, r7, #7
 8001ba8:	7812      	ldrb	r2, [r2, #0]
 8001baa:	0011      	movs	r1, r2
 8001bac:	2203      	movs	r2, #3
 8001bae:	400a      	ands	r2, r1
 8001bb0:	00d2      	lsls	r2, r2, #3
 8001bb2:	21ff      	movs	r1, #255	; 0xff
 8001bb4:	4091      	lsls	r1, r2
 8001bb6:	000a      	movs	r2, r1
 8001bb8:	43d2      	mvns	r2, r2
 8001bba:	401a      	ands	r2, r3
 8001bbc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	019b      	lsls	r3, r3, #6
 8001bc2:	22ff      	movs	r2, #255	; 0xff
 8001bc4:	401a      	ands	r2, r3
 8001bc6:	1dfb      	adds	r3, r7, #7
 8001bc8:	781b      	ldrb	r3, [r3, #0]
 8001bca:	0018      	movs	r0, r3
 8001bcc:	2303      	movs	r3, #3
 8001bce:	4003      	ands	r3, r0
 8001bd0:	00db      	lsls	r3, r3, #3
 8001bd2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001bd4:	4809      	ldr	r0, [pc, #36]	; (8001bfc <__NVIC_SetPriority+0xd8>)
 8001bd6:	1dfb      	adds	r3, r7, #7
 8001bd8:	781b      	ldrb	r3, [r3, #0]
 8001bda:	001c      	movs	r4, r3
 8001bdc:	230f      	movs	r3, #15
 8001bde:	4023      	ands	r3, r4
 8001be0:	3b08      	subs	r3, #8
 8001be2:	089b      	lsrs	r3, r3, #2
 8001be4:	430a      	orrs	r2, r1
 8001be6:	3306      	adds	r3, #6
 8001be8:	009b      	lsls	r3, r3, #2
 8001bea:	18c3      	adds	r3, r0, r3
 8001bec:	3304      	adds	r3, #4
 8001bee:	601a      	str	r2, [r3, #0]
}
 8001bf0:	46c0      	nop			; (mov r8, r8)
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	b003      	add	sp, #12
 8001bf6:	bd90      	pop	{r4, r7, pc}
 8001bf8:	e000e100 	.word	0xe000e100
 8001bfc:	e000ed00 	.word	0xe000ed00

08001c00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b082      	sub	sp, #8
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	1e5a      	subs	r2, r3, #1
 8001c0c:	2380      	movs	r3, #128	; 0x80
 8001c0e:	045b      	lsls	r3, r3, #17
 8001c10:	429a      	cmp	r2, r3
 8001c12:	d301      	bcc.n	8001c18 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c14:	2301      	movs	r3, #1
 8001c16:	e010      	b.n	8001c3a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c18:	4b0a      	ldr	r3, [pc, #40]	; (8001c44 <SysTick_Config+0x44>)
 8001c1a:	687a      	ldr	r2, [r7, #4]
 8001c1c:	3a01      	subs	r2, #1
 8001c1e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c20:	2301      	movs	r3, #1
 8001c22:	425b      	negs	r3, r3
 8001c24:	2103      	movs	r1, #3
 8001c26:	0018      	movs	r0, r3
 8001c28:	f7ff ff7c 	bl	8001b24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c2c:	4b05      	ldr	r3, [pc, #20]	; (8001c44 <SysTick_Config+0x44>)
 8001c2e:	2200      	movs	r2, #0
 8001c30:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c32:	4b04      	ldr	r3, [pc, #16]	; (8001c44 <SysTick_Config+0x44>)
 8001c34:	2207      	movs	r2, #7
 8001c36:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c38:	2300      	movs	r3, #0
}
 8001c3a:	0018      	movs	r0, r3
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	b002      	add	sp, #8
 8001c40:	bd80      	pop	{r7, pc}
 8001c42:	46c0      	nop			; (mov r8, r8)
 8001c44:	e000e010 	.word	0xe000e010

08001c48 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b084      	sub	sp, #16
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	60b9      	str	r1, [r7, #8]
 8001c50:	607a      	str	r2, [r7, #4]
 8001c52:	210f      	movs	r1, #15
 8001c54:	187b      	adds	r3, r7, r1
 8001c56:	1c02      	adds	r2, r0, #0
 8001c58:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001c5a:	68ba      	ldr	r2, [r7, #8]
 8001c5c:	187b      	adds	r3, r7, r1
 8001c5e:	781b      	ldrb	r3, [r3, #0]
 8001c60:	b25b      	sxtb	r3, r3
 8001c62:	0011      	movs	r1, r2
 8001c64:	0018      	movs	r0, r3
 8001c66:	f7ff ff5d 	bl	8001b24 <__NVIC_SetPriority>
}
 8001c6a:	46c0      	nop			; (mov r8, r8)
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	b004      	add	sp, #16
 8001c70:	bd80      	pop	{r7, pc}

08001c72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c72:	b580      	push	{r7, lr}
 8001c74:	b082      	sub	sp, #8
 8001c76:	af00      	add	r7, sp, #0
 8001c78:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	0018      	movs	r0, r3
 8001c7e:	f7ff ffbf 	bl	8001c00 <SysTick_Config>
 8001c82:	0003      	movs	r3, r0
}
 8001c84:	0018      	movs	r0, r3
 8001c86:	46bd      	mov	sp, r7
 8001c88:	b002      	add	sp, #8
 8001c8a:	bd80      	pop	{r7, pc}

08001c8c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b086      	sub	sp, #24
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
 8001c94:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001c96:	2300      	movs	r3, #0
 8001c98:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c9a:	e147      	b.n	8001f2c <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	2101      	movs	r1, #1
 8001ca2:	697a      	ldr	r2, [r7, #20]
 8001ca4:	4091      	lsls	r1, r2
 8001ca6:	000a      	movs	r2, r1
 8001ca8:	4013      	ands	r3, r2
 8001caa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d100      	bne.n	8001cb4 <HAL_GPIO_Init+0x28>
 8001cb2:	e138      	b.n	8001f26 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	2203      	movs	r2, #3
 8001cba:	4013      	ands	r3, r2
 8001cbc:	2b01      	cmp	r3, #1
 8001cbe:	d005      	beq.n	8001ccc <HAL_GPIO_Init+0x40>
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	2203      	movs	r2, #3
 8001cc6:	4013      	ands	r3, r2
 8001cc8:	2b02      	cmp	r3, #2
 8001cca:	d130      	bne.n	8001d2e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	689b      	ldr	r3, [r3, #8]
 8001cd0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001cd2:	697b      	ldr	r3, [r7, #20]
 8001cd4:	005b      	lsls	r3, r3, #1
 8001cd6:	2203      	movs	r2, #3
 8001cd8:	409a      	lsls	r2, r3
 8001cda:	0013      	movs	r3, r2
 8001cdc:	43da      	mvns	r2, r3
 8001cde:	693b      	ldr	r3, [r7, #16]
 8001ce0:	4013      	ands	r3, r2
 8001ce2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	68da      	ldr	r2, [r3, #12]
 8001ce8:	697b      	ldr	r3, [r7, #20]
 8001cea:	005b      	lsls	r3, r3, #1
 8001cec:	409a      	lsls	r2, r3
 8001cee:	0013      	movs	r3, r2
 8001cf0:	693a      	ldr	r2, [r7, #16]
 8001cf2:	4313      	orrs	r3, r2
 8001cf4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	693a      	ldr	r2, [r7, #16]
 8001cfa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001d02:	2201      	movs	r2, #1
 8001d04:	697b      	ldr	r3, [r7, #20]
 8001d06:	409a      	lsls	r2, r3
 8001d08:	0013      	movs	r3, r2
 8001d0a:	43da      	mvns	r2, r3
 8001d0c:	693b      	ldr	r3, [r7, #16]
 8001d0e:	4013      	ands	r3, r2
 8001d10:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	091b      	lsrs	r3, r3, #4
 8001d18:	2201      	movs	r2, #1
 8001d1a:	401a      	ands	r2, r3
 8001d1c:	697b      	ldr	r3, [r7, #20]
 8001d1e:	409a      	lsls	r2, r3
 8001d20:	0013      	movs	r3, r2
 8001d22:	693a      	ldr	r2, [r7, #16]
 8001d24:	4313      	orrs	r3, r2
 8001d26:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	693a      	ldr	r2, [r7, #16]
 8001d2c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	2203      	movs	r2, #3
 8001d34:	4013      	ands	r3, r2
 8001d36:	2b03      	cmp	r3, #3
 8001d38:	d017      	beq.n	8001d6a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	68db      	ldr	r3, [r3, #12]
 8001d3e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001d40:	697b      	ldr	r3, [r7, #20]
 8001d42:	005b      	lsls	r3, r3, #1
 8001d44:	2203      	movs	r2, #3
 8001d46:	409a      	lsls	r2, r3
 8001d48:	0013      	movs	r3, r2
 8001d4a:	43da      	mvns	r2, r3
 8001d4c:	693b      	ldr	r3, [r7, #16]
 8001d4e:	4013      	ands	r3, r2
 8001d50:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	689a      	ldr	r2, [r3, #8]
 8001d56:	697b      	ldr	r3, [r7, #20]
 8001d58:	005b      	lsls	r3, r3, #1
 8001d5a:	409a      	lsls	r2, r3
 8001d5c:	0013      	movs	r3, r2
 8001d5e:	693a      	ldr	r2, [r7, #16]
 8001d60:	4313      	orrs	r3, r2
 8001d62:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	693a      	ldr	r2, [r7, #16]
 8001d68:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	685b      	ldr	r3, [r3, #4]
 8001d6e:	2203      	movs	r2, #3
 8001d70:	4013      	ands	r3, r2
 8001d72:	2b02      	cmp	r3, #2
 8001d74:	d123      	bne.n	8001dbe <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001d76:	697b      	ldr	r3, [r7, #20]
 8001d78:	08da      	lsrs	r2, r3, #3
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	3208      	adds	r2, #8
 8001d7e:	0092      	lsls	r2, r2, #2
 8001d80:	58d3      	ldr	r3, [r2, r3]
 8001d82:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001d84:	697b      	ldr	r3, [r7, #20]
 8001d86:	2207      	movs	r2, #7
 8001d88:	4013      	ands	r3, r2
 8001d8a:	009b      	lsls	r3, r3, #2
 8001d8c:	220f      	movs	r2, #15
 8001d8e:	409a      	lsls	r2, r3
 8001d90:	0013      	movs	r3, r2
 8001d92:	43da      	mvns	r2, r3
 8001d94:	693b      	ldr	r3, [r7, #16]
 8001d96:	4013      	ands	r3, r2
 8001d98:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	691a      	ldr	r2, [r3, #16]
 8001d9e:	697b      	ldr	r3, [r7, #20]
 8001da0:	2107      	movs	r1, #7
 8001da2:	400b      	ands	r3, r1
 8001da4:	009b      	lsls	r3, r3, #2
 8001da6:	409a      	lsls	r2, r3
 8001da8:	0013      	movs	r3, r2
 8001daa:	693a      	ldr	r2, [r7, #16]
 8001dac:	4313      	orrs	r3, r2
 8001dae:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001db0:	697b      	ldr	r3, [r7, #20]
 8001db2:	08da      	lsrs	r2, r3, #3
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	3208      	adds	r2, #8
 8001db8:	0092      	lsls	r2, r2, #2
 8001dba:	6939      	ldr	r1, [r7, #16]
 8001dbc:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001dc4:	697b      	ldr	r3, [r7, #20]
 8001dc6:	005b      	lsls	r3, r3, #1
 8001dc8:	2203      	movs	r2, #3
 8001dca:	409a      	lsls	r2, r3
 8001dcc:	0013      	movs	r3, r2
 8001dce:	43da      	mvns	r2, r3
 8001dd0:	693b      	ldr	r3, [r7, #16]
 8001dd2:	4013      	ands	r3, r2
 8001dd4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	2203      	movs	r2, #3
 8001ddc:	401a      	ands	r2, r3
 8001dde:	697b      	ldr	r3, [r7, #20]
 8001de0:	005b      	lsls	r3, r3, #1
 8001de2:	409a      	lsls	r2, r3
 8001de4:	0013      	movs	r3, r2
 8001de6:	693a      	ldr	r2, [r7, #16]
 8001de8:	4313      	orrs	r3, r2
 8001dea:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	693a      	ldr	r2, [r7, #16]
 8001df0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	685a      	ldr	r2, [r3, #4]
 8001df6:	23c0      	movs	r3, #192	; 0xc0
 8001df8:	029b      	lsls	r3, r3, #10
 8001dfa:	4013      	ands	r3, r2
 8001dfc:	d100      	bne.n	8001e00 <HAL_GPIO_Init+0x174>
 8001dfe:	e092      	b.n	8001f26 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001e00:	4a50      	ldr	r2, [pc, #320]	; (8001f44 <HAL_GPIO_Init+0x2b8>)
 8001e02:	697b      	ldr	r3, [r7, #20]
 8001e04:	089b      	lsrs	r3, r3, #2
 8001e06:	3318      	adds	r3, #24
 8001e08:	009b      	lsls	r3, r3, #2
 8001e0a:	589b      	ldr	r3, [r3, r2]
 8001e0c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8001e0e:	697b      	ldr	r3, [r7, #20]
 8001e10:	2203      	movs	r2, #3
 8001e12:	4013      	ands	r3, r2
 8001e14:	00db      	lsls	r3, r3, #3
 8001e16:	220f      	movs	r2, #15
 8001e18:	409a      	lsls	r2, r3
 8001e1a:	0013      	movs	r3, r2
 8001e1c:	43da      	mvns	r2, r3
 8001e1e:	693b      	ldr	r3, [r7, #16]
 8001e20:	4013      	ands	r3, r2
 8001e22:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001e24:	687a      	ldr	r2, [r7, #4]
 8001e26:	23a0      	movs	r3, #160	; 0xa0
 8001e28:	05db      	lsls	r3, r3, #23
 8001e2a:	429a      	cmp	r2, r3
 8001e2c:	d013      	beq.n	8001e56 <HAL_GPIO_Init+0x1ca>
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	4a45      	ldr	r2, [pc, #276]	; (8001f48 <HAL_GPIO_Init+0x2bc>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d00d      	beq.n	8001e52 <HAL_GPIO_Init+0x1c6>
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	4a44      	ldr	r2, [pc, #272]	; (8001f4c <HAL_GPIO_Init+0x2c0>)
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d007      	beq.n	8001e4e <HAL_GPIO_Init+0x1c2>
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	4a43      	ldr	r2, [pc, #268]	; (8001f50 <HAL_GPIO_Init+0x2c4>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d101      	bne.n	8001e4a <HAL_GPIO_Init+0x1be>
 8001e46:	2303      	movs	r3, #3
 8001e48:	e006      	b.n	8001e58 <HAL_GPIO_Init+0x1cc>
 8001e4a:	2305      	movs	r3, #5
 8001e4c:	e004      	b.n	8001e58 <HAL_GPIO_Init+0x1cc>
 8001e4e:	2302      	movs	r3, #2
 8001e50:	e002      	b.n	8001e58 <HAL_GPIO_Init+0x1cc>
 8001e52:	2301      	movs	r3, #1
 8001e54:	e000      	b.n	8001e58 <HAL_GPIO_Init+0x1cc>
 8001e56:	2300      	movs	r3, #0
 8001e58:	697a      	ldr	r2, [r7, #20]
 8001e5a:	2103      	movs	r1, #3
 8001e5c:	400a      	ands	r2, r1
 8001e5e:	00d2      	lsls	r2, r2, #3
 8001e60:	4093      	lsls	r3, r2
 8001e62:	693a      	ldr	r2, [r7, #16]
 8001e64:	4313      	orrs	r3, r2
 8001e66:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8001e68:	4936      	ldr	r1, [pc, #216]	; (8001f44 <HAL_GPIO_Init+0x2b8>)
 8001e6a:	697b      	ldr	r3, [r7, #20]
 8001e6c:	089b      	lsrs	r3, r3, #2
 8001e6e:	3318      	adds	r3, #24
 8001e70:	009b      	lsls	r3, r3, #2
 8001e72:	693a      	ldr	r2, [r7, #16]
 8001e74:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001e76:	4a33      	ldr	r2, [pc, #204]	; (8001f44 <HAL_GPIO_Init+0x2b8>)
 8001e78:	2380      	movs	r3, #128	; 0x80
 8001e7a:	58d3      	ldr	r3, [r2, r3]
 8001e7c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	43da      	mvns	r2, r3
 8001e82:	693b      	ldr	r3, [r7, #16]
 8001e84:	4013      	ands	r3, r2
 8001e86:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	685a      	ldr	r2, [r3, #4]
 8001e8c:	2380      	movs	r3, #128	; 0x80
 8001e8e:	025b      	lsls	r3, r3, #9
 8001e90:	4013      	ands	r3, r2
 8001e92:	d003      	beq.n	8001e9c <HAL_GPIO_Init+0x210>
        {
          temp |= iocurrent;
 8001e94:	693a      	ldr	r2, [r7, #16]
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	4313      	orrs	r3, r2
 8001e9a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001e9c:	4929      	ldr	r1, [pc, #164]	; (8001f44 <HAL_GPIO_Init+0x2b8>)
 8001e9e:	2280      	movs	r2, #128	; 0x80
 8001ea0:	693b      	ldr	r3, [r7, #16]
 8001ea2:	508b      	str	r3, [r1, r2]

        temp = EXTI->EMR1;
 8001ea4:	4a27      	ldr	r2, [pc, #156]	; (8001f44 <HAL_GPIO_Init+0x2b8>)
 8001ea6:	2384      	movs	r3, #132	; 0x84
 8001ea8:	58d3      	ldr	r3, [r2, r3]
 8001eaa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	43da      	mvns	r2, r3
 8001eb0:	693b      	ldr	r3, [r7, #16]
 8001eb2:	4013      	ands	r3, r2
 8001eb4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	685a      	ldr	r2, [r3, #4]
 8001eba:	2380      	movs	r3, #128	; 0x80
 8001ebc:	029b      	lsls	r3, r3, #10
 8001ebe:	4013      	ands	r3, r2
 8001ec0:	d003      	beq.n	8001eca <HAL_GPIO_Init+0x23e>
        {
          temp |= iocurrent;
 8001ec2:	693a      	ldr	r2, [r7, #16]
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	4313      	orrs	r3, r2
 8001ec8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001eca:	491e      	ldr	r1, [pc, #120]	; (8001f44 <HAL_GPIO_Init+0x2b8>)
 8001ecc:	2284      	movs	r2, #132	; 0x84
 8001ece:	693b      	ldr	r3, [r7, #16]
 8001ed0:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001ed2:	4b1c      	ldr	r3, [pc, #112]	; (8001f44 <HAL_GPIO_Init+0x2b8>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	43da      	mvns	r2, r3
 8001edc:	693b      	ldr	r3, [r7, #16]
 8001ede:	4013      	ands	r3, r2
 8001ee0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	685a      	ldr	r2, [r3, #4]
 8001ee6:	2380      	movs	r3, #128	; 0x80
 8001ee8:	035b      	lsls	r3, r3, #13
 8001eea:	4013      	ands	r3, r2
 8001eec:	d003      	beq.n	8001ef6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001eee:	693a      	ldr	r2, [r7, #16]
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	4313      	orrs	r3, r2
 8001ef4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001ef6:	4b13      	ldr	r3, [pc, #76]	; (8001f44 <HAL_GPIO_Init+0x2b8>)
 8001ef8:	693a      	ldr	r2, [r7, #16]
 8001efa:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001efc:	4b11      	ldr	r3, [pc, #68]	; (8001f44 <HAL_GPIO_Init+0x2b8>)
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	43da      	mvns	r2, r3
 8001f06:	693b      	ldr	r3, [r7, #16]
 8001f08:	4013      	ands	r3, r2
 8001f0a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	685a      	ldr	r2, [r3, #4]
 8001f10:	2380      	movs	r3, #128	; 0x80
 8001f12:	039b      	lsls	r3, r3, #14
 8001f14:	4013      	ands	r3, r2
 8001f16:	d003      	beq.n	8001f20 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001f18:	693a      	ldr	r2, [r7, #16]
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	4313      	orrs	r3, r2
 8001f1e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001f20:	4b08      	ldr	r3, [pc, #32]	; (8001f44 <HAL_GPIO_Init+0x2b8>)
 8001f22:	693a      	ldr	r2, [r7, #16]
 8001f24:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8001f26:	697b      	ldr	r3, [r7, #20]
 8001f28:	3301      	adds	r3, #1
 8001f2a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	681a      	ldr	r2, [r3, #0]
 8001f30:	697b      	ldr	r3, [r7, #20]
 8001f32:	40da      	lsrs	r2, r3
 8001f34:	1e13      	subs	r3, r2, #0
 8001f36:	d000      	beq.n	8001f3a <HAL_GPIO_Init+0x2ae>
 8001f38:	e6b0      	b.n	8001c9c <HAL_GPIO_Init+0x10>
  }
}
 8001f3a:	46c0      	nop			; (mov r8, r8)
 8001f3c:	46c0      	nop			; (mov r8, r8)
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	b006      	add	sp, #24
 8001f42:	bd80      	pop	{r7, pc}
 8001f44:	40021800 	.word	0x40021800
 8001f48:	50000400 	.word	0x50000400
 8001f4c:	50000800 	.word	0x50000800
 8001f50:	50000c00 	.word	0x50000c00

08001f54 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b086      	sub	sp, #24
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
 8001f5c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8001f62:	e0b4      	b.n	80020ce <HAL_GPIO_DeInit+0x17a>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8001f64:	2201      	movs	r2, #1
 8001f66:	697b      	ldr	r3, [r7, #20]
 8001f68:	409a      	lsls	r2, r3
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	4013      	ands	r3, r2
 8001f6e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8001f70:	693b      	ldr	r3, [r7, #16]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d100      	bne.n	8001f78 <HAL_GPIO_DeInit+0x24>
 8001f76:	e0a7      	b.n	80020c8 <HAL_GPIO_DeInit+0x174>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = EXTI->EXTICR[position >> 2u];
 8001f78:	4a5a      	ldr	r2, [pc, #360]	; (80020e4 <HAL_GPIO_DeInit+0x190>)
 8001f7a:	697b      	ldr	r3, [r7, #20]
 8001f7c:	089b      	lsrs	r3, r3, #2
 8001f7e:	3318      	adds	r3, #24
 8001f80:	009b      	lsls	r3, r3, #2
 8001f82:	589b      	ldr	r3, [r3, r2]
 8001f84:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (8u * (position & 0x03u)));
 8001f86:	697b      	ldr	r3, [r7, #20]
 8001f88:	2203      	movs	r2, #3
 8001f8a:	4013      	ands	r3, r2
 8001f8c:	00db      	lsls	r3, r3, #3
 8001f8e:	220f      	movs	r2, #15
 8001f90:	409a      	lsls	r2, r3
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	4013      	ands	r3, r2
 8001f96:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u))))
 8001f98:	687a      	ldr	r2, [r7, #4]
 8001f9a:	23a0      	movs	r3, #160	; 0xa0
 8001f9c:	05db      	lsls	r3, r3, #23
 8001f9e:	429a      	cmp	r2, r3
 8001fa0:	d013      	beq.n	8001fca <HAL_GPIO_DeInit+0x76>
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	4a50      	ldr	r2, [pc, #320]	; (80020e8 <HAL_GPIO_DeInit+0x194>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d00d      	beq.n	8001fc6 <HAL_GPIO_DeInit+0x72>
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	4a4f      	ldr	r2, [pc, #316]	; (80020ec <HAL_GPIO_DeInit+0x198>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d007      	beq.n	8001fc2 <HAL_GPIO_DeInit+0x6e>
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	4a4e      	ldr	r2, [pc, #312]	; (80020f0 <HAL_GPIO_DeInit+0x19c>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d101      	bne.n	8001fbe <HAL_GPIO_DeInit+0x6a>
 8001fba:	2303      	movs	r3, #3
 8001fbc:	e006      	b.n	8001fcc <HAL_GPIO_DeInit+0x78>
 8001fbe:	2305      	movs	r3, #5
 8001fc0:	e004      	b.n	8001fcc <HAL_GPIO_DeInit+0x78>
 8001fc2:	2302      	movs	r3, #2
 8001fc4:	e002      	b.n	8001fcc <HAL_GPIO_DeInit+0x78>
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	e000      	b.n	8001fcc <HAL_GPIO_DeInit+0x78>
 8001fca:	2300      	movs	r3, #0
 8001fcc:	697a      	ldr	r2, [r7, #20]
 8001fce:	2103      	movs	r1, #3
 8001fd0:	400a      	ands	r2, r1
 8001fd2:	00d2      	lsls	r2, r2, #3
 8001fd4:	4093      	lsls	r3, r2
 8001fd6:	68fa      	ldr	r2, [r7, #12]
 8001fd8:	429a      	cmp	r2, r3
 8001fda:	d136      	bne.n	800204a <HAL_GPIO_DeInit+0xf6>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8001fdc:	4a41      	ldr	r2, [pc, #260]	; (80020e4 <HAL_GPIO_DeInit+0x190>)
 8001fde:	2380      	movs	r3, #128	; 0x80
 8001fe0:	58d3      	ldr	r3, [r2, r3]
 8001fe2:	693a      	ldr	r2, [r7, #16]
 8001fe4:	43d2      	mvns	r2, r2
 8001fe6:	493f      	ldr	r1, [pc, #252]	; (80020e4 <HAL_GPIO_DeInit+0x190>)
 8001fe8:	4013      	ands	r3, r2
 8001fea:	2280      	movs	r2, #128	; 0x80
 8001fec:	508b      	str	r3, [r1, r2]
        EXTI->EMR1 &= ~(iocurrent);
 8001fee:	4a3d      	ldr	r2, [pc, #244]	; (80020e4 <HAL_GPIO_DeInit+0x190>)
 8001ff0:	2384      	movs	r3, #132	; 0x84
 8001ff2:	58d3      	ldr	r3, [r2, r3]
 8001ff4:	693a      	ldr	r2, [r7, #16]
 8001ff6:	43d2      	mvns	r2, r2
 8001ff8:	493a      	ldr	r1, [pc, #232]	; (80020e4 <HAL_GPIO_DeInit+0x190>)
 8001ffa:	4013      	ands	r3, r2
 8001ffc:	2284      	movs	r2, #132	; 0x84
 8001ffe:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8002000:	4b38      	ldr	r3, [pc, #224]	; (80020e4 <HAL_GPIO_DeInit+0x190>)
 8002002:	681a      	ldr	r2, [r3, #0]
 8002004:	693b      	ldr	r3, [r7, #16]
 8002006:	43d9      	mvns	r1, r3
 8002008:	4b36      	ldr	r3, [pc, #216]	; (80020e4 <HAL_GPIO_DeInit+0x190>)
 800200a:	400a      	ands	r2, r1
 800200c:	601a      	str	r2, [r3, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 800200e:	4b35      	ldr	r3, [pc, #212]	; (80020e4 <HAL_GPIO_DeInit+0x190>)
 8002010:	685a      	ldr	r2, [r3, #4]
 8002012:	693b      	ldr	r3, [r7, #16]
 8002014:	43d9      	mvns	r1, r3
 8002016:	4b33      	ldr	r3, [pc, #204]	; (80020e4 <HAL_GPIO_DeInit+0x190>)
 8002018:	400a      	ands	r2, r1
 800201a:	605a      	str	r2, [r3, #4]

        tmp = 0x0FuL << (8u * (position & 0x03u));
 800201c:	697b      	ldr	r3, [r7, #20]
 800201e:	2203      	movs	r2, #3
 8002020:	4013      	ands	r3, r2
 8002022:	00db      	lsls	r3, r3, #3
 8002024:	220f      	movs	r2, #15
 8002026:	409a      	lsls	r2, r3
 8002028:	0013      	movs	r3, r2
 800202a:	60fb      	str	r3, [r7, #12]
        EXTI->EXTICR[position >> 2u] &= ~tmp;
 800202c:	4a2d      	ldr	r2, [pc, #180]	; (80020e4 <HAL_GPIO_DeInit+0x190>)
 800202e:	697b      	ldr	r3, [r7, #20]
 8002030:	089b      	lsrs	r3, r3, #2
 8002032:	3318      	adds	r3, #24
 8002034:	009b      	lsls	r3, r3, #2
 8002036:	589a      	ldr	r2, [r3, r2]
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	43d9      	mvns	r1, r3
 800203c:	4829      	ldr	r0, [pc, #164]	; (80020e4 <HAL_GPIO_DeInit+0x190>)
 800203e:	697b      	ldr	r3, [r7, #20]
 8002040:	089b      	lsrs	r3, r3, #2
 8002042:	400a      	ands	r2, r1
 8002044:	3318      	adds	r3, #24
 8002046:	009b      	lsls	r3, r3, #2
 8002048:	501a      	str	r2, [r3, r0]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681a      	ldr	r2, [r3, #0]
 800204e:	697b      	ldr	r3, [r7, #20]
 8002050:	005b      	lsls	r3, r3, #1
 8002052:	2103      	movs	r1, #3
 8002054:	4099      	lsls	r1, r3
 8002056:	000b      	movs	r3, r1
 8002058:	431a      	orrs	r2, r3
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 800205e:	697b      	ldr	r3, [r7, #20]
 8002060:	08da      	lsrs	r2, r3, #3
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	3208      	adds	r2, #8
 8002066:	0092      	lsls	r2, r2, #2
 8002068:	58d3      	ldr	r3, [r2, r3]
 800206a:	697a      	ldr	r2, [r7, #20]
 800206c:	2107      	movs	r1, #7
 800206e:	400a      	ands	r2, r1
 8002070:	0092      	lsls	r2, r2, #2
 8002072:	210f      	movs	r1, #15
 8002074:	4091      	lsls	r1, r2
 8002076:	000a      	movs	r2, r1
 8002078:	43d1      	mvns	r1, r2
 800207a:	697a      	ldr	r2, [r7, #20]
 800207c:	08d2      	lsrs	r2, r2, #3
 800207e:	4019      	ands	r1, r3
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	3208      	adds	r2, #8
 8002084:	0092      	lsls	r2, r2, #2
 8002086:	50d1      	str	r1, [r2, r3]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	689b      	ldr	r3, [r3, #8]
 800208c:	697a      	ldr	r2, [r7, #20]
 800208e:	0052      	lsls	r2, r2, #1
 8002090:	2103      	movs	r1, #3
 8002092:	4091      	lsls	r1, r2
 8002094:	000a      	movs	r2, r1
 8002096:	43d2      	mvns	r2, r2
 8002098:	401a      	ands	r2, r3
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	2101      	movs	r1, #1
 80020a4:	697a      	ldr	r2, [r7, #20]
 80020a6:	4091      	lsls	r1, r2
 80020a8:	000a      	movs	r2, r1
 80020aa:	43d2      	mvns	r2, r2
 80020ac:	401a      	ands	r2, r3
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	68db      	ldr	r3, [r3, #12]
 80020b6:	697a      	ldr	r2, [r7, #20]
 80020b8:	0052      	lsls	r2, r2, #1
 80020ba:	2103      	movs	r1, #3
 80020bc:	4091      	lsls	r1, r2
 80020be:	000a      	movs	r2, r1
 80020c0:	43d2      	mvns	r2, r2
 80020c2:	401a      	ands	r2, r3
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	60da      	str	r2, [r3, #12]
    }

    position++;
 80020c8:	697b      	ldr	r3, [r7, #20]
 80020ca:	3301      	adds	r3, #1
 80020cc:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 80020ce:	683a      	ldr	r2, [r7, #0]
 80020d0:	697b      	ldr	r3, [r7, #20]
 80020d2:	40da      	lsrs	r2, r3
 80020d4:	1e13      	subs	r3, r2, #0
 80020d6:	d000      	beq.n	80020da <HAL_GPIO_DeInit+0x186>
 80020d8:	e744      	b.n	8001f64 <HAL_GPIO_DeInit+0x10>
  }
}
 80020da:	46c0      	nop			; (mov r8, r8)
 80020dc:	46c0      	nop			; (mov r8, r8)
 80020de:	46bd      	mov	sp, r7
 80020e0:	b006      	add	sp, #24
 80020e2:	bd80      	pop	{r7, pc}
 80020e4:	40021800 	.word	0x40021800
 80020e8:	50000400 	.word	0x50000400
 80020ec:	50000800 	.word	0x50000800
 80020f0:	50000c00 	.word	0x50000c00

080020f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b082      	sub	sp, #8
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
 80020fc:	0008      	movs	r0, r1
 80020fe:	0011      	movs	r1, r2
 8002100:	1cbb      	adds	r3, r7, #2
 8002102:	1c02      	adds	r2, r0, #0
 8002104:	801a      	strh	r2, [r3, #0]
 8002106:	1c7b      	adds	r3, r7, #1
 8002108:	1c0a      	adds	r2, r1, #0
 800210a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800210c:	1c7b      	adds	r3, r7, #1
 800210e:	781b      	ldrb	r3, [r3, #0]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d004      	beq.n	800211e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002114:	1cbb      	adds	r3, r7, #2
 8002116:	881a      	ldrh	r2, [r3, #0]
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800211c:	e003      	b.n	8002126 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800211e:	1cbb      	adds	r3, r7, #2
 8002120:	881a      	ldrh	r2, [r3, #0]
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002126:	46c0      	nop			; (mov r8, r8)
 8002128:	46bd      	mov	sp, r7
 800212a:	b002      	add	sp, #8
 800212c:	bd80      	pop	{r7, pc}
	...

08002130 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b084      	sub	sp, #16
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8002138:	4b19      	ldr	r3, [pc, #100]	; (80021a0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4a19      	ldr	r2, [pc, #100]	; (80021a4 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800213e:	4013      	ands	r3, r2
 8002140:	0019      	movs	r1, r3
 8002142:	4b17      	ldr	r3, [pc, #92]	; (80021a0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002144:	687a      	ldr	r2, [r7, #4]
 8002146:	430a      	orrs	r2, r1
 8002148:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800214a:	687a      	ldr	r2, [r7, #4]
 800214c:	2380      	movs	r3, #128	; 0x80
 800214e:	009b      	lsls	r3, r3, #2
 8002150:	429a      	cmp	r2, r3
 8002152:	d11f      	bne.n	8002194 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8002154:	4b14      	ldr	r3, [pc, #80]	; (80021a8 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8002156:	681a      	ldr	r2, [r3, #0]
 8002158:	0013      	movs	r3, r2
 800215a:	005b      	lsls	r3, r3, #1
 800215c:	189b      	adds	r3, r3, r2
 800215e:	005b      	lsls	r3, r3, #1
 8002160:	4912      	ldr	r1, [pc, #72]	; (80021ac <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8002162:	0018      	movs	r0, r3
 8002164:	f7fd ffce 	bl	8000104 <__udivsi3>
 8002168:	0003      	movs	r3, r0
 800216a:	3301      	adds	r3, #1
 800216c:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800216e:	e008      	b.n	8002182 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d003      	beq.n	800217e <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	3b01      	subs	r3, #1
 800217a:	60fb      	str	r3, [r7, #12]
 800217c:	e001      	b.n	8002182 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800217e:	2303      	movs	r3, #3
 8002180:	e009      	b.n	8002196 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002182:	4b07      	ldr	r3, [pc, #28]	; (80021a0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002184:	695a      	ldr	r2, [r3, #20]
 8002186:	2380      	movs	r3, #128	; 0x80
 8002188:	00db      	lsls	r3, r3, #3
 800218a:	401a      	ands	r2, r3
 800218c:	2380      	movs	r3, #128	; 0x80
 800218e:	00db      	lsls	r3, r3, #3
 8002190:	429a      	cmp	r2, r3
 8002192:	d0ed      	beq.n	8002170 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8002194:	2300      	movs	r3, #0
}
 8002196:	0018      	movs	r0, r3
 8002198:	46bd      	mov	sp, r7
 800219a:	b004      	add	sp, #16
 800219c:	bd80      	pop	{r7, pc}
 800219e:	46c0      	nop			; (mov r8, r8)
 80021a0:	40007000 	.word	0x40007000
 80021a4:	fffff9ff 	.word	0xfffff9ff
 80021a8:	20000000 	.word	0x20000000
 80021ac:	000f4240 	.word	0x000f4240

080021b0 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80021b4:	4b03      	ldr	r3, [pc, #12]	; (80021c4 <LL_RCC_GetAPB1Prescaler+0x14>)
 80021b6:	689a      	ldr	r2, [r3, #8]
 80021b8:	23e0      	movs	r3, #224	; 0xe0
 80021ba:	01db      	lsls	r3, r3, #7
 80021bc:	4013      	ands	r3, r2
}
 80021be:	0018      	movs	r0, r3
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bd80      	pop	{r7, pc}
 80021c4:	40021000 	.word	0x40021000

080021c8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b088      	sub	sp, #32
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d101      	bne.n	80021da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80021d6:	2301      	movs	r3, #1
 80021d8:	e304      	b.n	80027e4 <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	2201      	movs	r2, #1
 80021e0:	4013      	ands	r3, r2
 80021e2:	d100      	bne.n	80021e6 <HAL_RCC_OscConfig+0x1e>
 80021e4:	e07c      	b.n	80022e0 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80021e6:	4bc3      	ldr	r3, [pc, #780]	; (80024f4 <HAL_RCC_OscConfig+0x32c>)
 80021e8:	689b      	ldr	r3, [r3, #8]
 80021ea:	2238      	movs	r2, #56	; 0x38
 80021ec:	4013      	ands	r3, r2
 80021ee:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80021f0:	4bc0      	ldr	r3, [pc, #768]	; (80024f4 <HAL_RCC_OscConfig+0x32c>)
 80021f2:	68db      	ldr	r3, [r3, #12]
 80021f4:	2203      	movs	r2, #3
 80021f6:	4013      	ands	r3, r2
 80021f8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80021fa:	69bb      	ldr	r3, [r7, #24]
 80021fc:	2b10      	cmp	r3, #16
 80021fe:	d102      	bne.n	8002206 <HAL_RCC_OscConfig+0x3e>
 8002200:	697b      	ldr	r3, [r7, #20]
 8002202:	2b03      	cmp	r3, #3
 8002204:	d002      	beq.n	800220c <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8002206:	69bb      	ldr	r3, [r7, #24]
 8002208:	2b08      	cmp	r3, #8
 800220a:	d10b      	bne.n	8002224 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800220c:	4bb9      	ldr	r3, [pc, #740]	; (80024f4 <HAL_RCC_OscConfig+0x32c>)
 800220e:	681a      	ldr	r2, [r3, #0]
 8002210:	2380      	movs	r3, #128	; 0x80
 8002212:	029b      	lsls	r3, r3, #10
 8002214:	4013      	ands	r3, r2
 8002216:	d062      	beq.n	80022de <HAL_RCC_OscConfig+0x116>
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d15e      	bne.n	80022de <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8002220:	2301      	movs	r3, #1
 8002222:	e2df      	b.n	80027e4 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	685a      	ldr	r2, [r3, #4]
 8002228:	2380      	movs	r3, #128	; 0x80
 800222a:	025b      	lsls	r3, r3, #9
 800222c:	429a      	cmp	r2, r3
 800222e:	d107      	bne.n	8002240 <HAL_RCC_OscConfig+0x78>
 8002230:	4bb0      	ldr	r3, [pc, #704]	; (80024f4 <HAL_RCC_OscConfig+0x32c>)
 8002232:	681a      	ldr	r2, [r3, #0]
 8002234:	4baf      	ldr	r3, [pc, #700]	; (80024f4 <HAL_RCC_OscConfig+0x32c>)
 8002236:	2180      	movs	r1, #128	; 0x80
 8002238:	0249      	lsls	r1, r1, #9
 800223a:	430a      	orrs	r2, r1
 800223c:	601a      	str	r2, [r3, #0]
 800223e:	e020      	b.n	8002282 <HAL_RCC_OscConfig+0xba>
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	685a      	ldr	r2, [r3, #4]
 8002244:	23a0      	movs	r3, #160	; 0xa0
 8002246:	02db      	lsls	r3, r3, #11
 8002248:	429a      	cmp	r2, r3
 800224a:	d10e      	bne.n	800226a <HAL_RCC_OscConfig+0xa2>
 800224c:	4ba9      	ldr	r3, [pc, #676]	; (80024f4 <HAL_RCC_OscConfig+0x32c>)
 800224e:	681a      	ldr	r2, [r3, #0]
 8002250:	4ba8      	ldr	r3, [pc, #672]	; (80024f4 <HAL_RCC_OscConfig+0x32c>)
 8002252:	2180      	movs	r1, #128	; 0x80
 8002254:	02c9      	lsls	r1, r1, #11
 8002256:	430a      	orrs	r2, r1
 8002258:	601a      	str	r2, [r3, #0]
 800225a:	4ba6      	ldr	r3, [pc, #664]	; (80024f4 <HAL_RCC_OscConfig+0x32c>)
 800225c:	681a      	ldr	r2, [r3, #0]
 800225e:	4ba5      	ldr	r3, [pc, #660]	; (80024f4 <HAL_RCC_OscConfig+0x32c>)
 8002260:	2180      	movs	r1, #128	; 0x80
 8002262:	0249      	lsls	r1, r1, #9
 8002264:	430a      	orrs	r2, r1
 8002266:	601a      	str	r2, [r3, #0]
 8002268:	e00b      	b.n	8002282 <HAL_RCC_OscConfig+0xba>
 800226a:	4ba2      	ldr	r3, [pc, #648]	; (80024f4 <HAL_RCC_OscConfig+0x32c>)
 800226c:	681a      	ldr	r2, [r3, #0]
 800226e:	4ba1      	ldr	r3, [pc, #644]	; (80024f4 <HAL_RCC_OscConfig+0x32c>)
 8002270:	49a1      	ldr	r1, [pc, #644]	; (80024f8 <HAL_RCC_OscConfig+0x330>)
 8002272:	400a      	ands	r2, r1
 8002274:	601a      	str	r2, [r3, #0]
 8002276:	4b9f      	ldr	r3, [pc, #636]	; (80024f4 <HAL_RCC_OscConfig+0x32c>)
 8002278:	681a      	ldr	r2, [r3, #0]
 800227a:	4b9e      	ldr	r3, [pc, #632]	; (80024f4 <HAL_RCC_OscConfig+0x32c>)
 800227c:	499f      	ldr	r1, [pc, #636]	; (80024fc <HAL_RCC_OscConfig+0x334>)
 800227e:	400a      	ands	r2, r1
 8002280:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d014      	beq.n	80022b4 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800228a:	f7ff fc07 	bl	8001a9c <HAL_GetTick>
 800228e:	0003      	movs	r3, r0
 8002290:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002292:	e008      	b.n	80022a6 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002294:	f7ff fc02 	bl	8001a9c <HAL_GetTick>
 8002298:	0002      	movs	r2, r0
 800229a:	693b      	ldr	r3, [r7, #16]
 800229c:	1ad3      	subs	r3, r2, r3
 800229e:	2b64      	cmp	r3, #100	; 0x64
 80022a0:	d901      	bls.n	80022a6 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80022a2:	2303      	movs	r3, #3
 80022a4:	e29e      	b.n	80027e4 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80022a6:	4b93      	ldr	r3, [pc, #588]	; (80024f4 <HAL_RCC_OscConfig+0x32c>)
 80022a8:	681a      	ldr	r2, [r3, #0]
 80022aa:	2380      	movs	r3, #128	; 0x80
 80022ac:	029b      	lsls	r3, r3, #10
 80022ae:	4013      	ands	r3, r2
 80022b0:	d0f0      	beq.n	8002294 <HAL_RCC_OscConfig+0xcc>
 80022b2:	e015      	b.n	80022e0 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022b4:	f7ff fbf2 	bl	8001a9c <HAL_GetTick>
 80022b8:	0003      	movs	r3, r0
 80022ba:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80022bc:	e008      	b.n	80022d0 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022be:	f7ff fbed 	bl	8001a9c <HAL_GetTick>
 80022c2:	0002      	movs	r2, r0
 80022c4:	693b      	ldr	r3, [r7, #16]
 80022c6:	1ad3      	subs	r3, r2, r3
 80022c8:	2b64      	cmp	r3, #100	; 0x64
 80022ca:	d901      	bls.n	80022d0 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80022cc:	2303      	movs	r3, #3
 80022ce:	e289      	b.n	80027e4 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80022d0:	4b88      	ldr	r3, [pc, #544]	; (80024f4 <HAL_RCC_OscConfig+0x32c>)
 80022d2:	681a      	ldr	r2, [r3, #0]
 80022d4:	2380      	movs	r3, #128	; 0x80
 80022d6:	029b      	lsls	r3, r3, #10
 80022d8:	4013      	ands	r3, r2
 80022da:	d1f0      	bne.n	80022be <HAL_RCC_OscConfig+0xf6>
 80022dc:	e000      	b.n	80022e0 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022de:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	2202      	movs	r2, #2
 80022e6:	4013      	ands	r3, r2
 80022e8:	d100      	bne.n	80022ec <HAL_RCC_OscConfig+0x124>
 80022ea:	e099      	b.n	8002420 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80022ec:	4b81      	ldr	r3, [pc, #516]	; (80024f4 <HAL_RCC_OscConfig+0x32c>)
 80022ee:	689b      	ldr	r3, [r3, #8]
 80022f0:	2238      	movs	r2, #56	; 0x38
 80022f2:	4013      	ands	r3, r2
 80022f4:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80022f6:	4b7f      	ldr	r3, [pc, #508]	; (80024f4 <HAL_RCC_OscConfig+0x32c>)
 80022f8:	68db      	ldr	r3, [r3, #12]
 80022fa:	2203      	movs	r2, #3
 80022fc:	4013      	ands	r3, r2
 80022fe:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8002300:	69bb      	ldr	r3, [r7, #24]
 8002302:	2b10      	cmp	r3, #16
 8002304:	d102      	bne.n	800230c <HAL_RCC_OscConfig+0x144>
 8002306:	697b      	ldr	r3, [r7, #20]
 8002308:	2b02      	cmp	r3, #2
 800230a:	d002      	beq.n	8002312 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 800230c:	69bb      	ldr	r3, [r7, #24]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d135      	bne.n	800237e <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002312:	4b78      	ldr	r3, [pc, #480]	; (80024f4 <HAL_RCC_OscConfig+0x32c>)
 8002314:	681a      	ldr	r2, [r3, #0]
 8002316:	2380      	movs	r3, #128	; 0x80
 8002318:	00db      	lsls	r3, r3, #3
 800231a:	4013      	ands	r3, r2
 800231c:	d005      	beq.n	800232a <HAL_RCC_OscConfig+0x162>
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	68db      	ldr	r3, [r3, #12]
 8002322:	2b00      	cmp	r3, #0
 8002324:	d101      	bne.n	800232a <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8002326:	2301      	movs	r3, #1
 8002328:	e25c      	b.n	80027e4 <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800232a:	4b72      	ldr	r3, [pc, #456]	; (80024f4 <HAL_RCC_OscConfig+0x32c>)
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	4a74      	ldr	r2, [pc, #464]	; (8002500 <HAL_RCC_OscConfig+0x338>)
 8002330:	4013      	ands	r3, r2
 8002332:	0019      	movs	r1, r3
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	695b      	ldr	r3, [r3, #20]
 8002338:	021a      	lsls	r2, r3, #8
 800233a:	4b6e      	ldr	r3, [pc, #440]	; (80024f4 <HAL_RCC_OscConfig+0x32c>)
 800233c:	430a      	orrs	r2, r1
 800233e:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002340:	69bb      	ldr	r3, [r7, #24]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d112      	bne.n	800236c <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002346:	4b6b      	ldr	r3, [pc, #428]	; (80024f4 <HAL_RCC_OscConfig+0x32c>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4a6e      	ldr	r2, [pc, #440]	; (8002504 <HAL_RCC_OscConfig+0x33c>)
 800234c:	4013      	ands	r3, r2
 800234e:	0019      	movs	r1, r3
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	691a      	ldr	r2, [r3, #16]
 8002354:	4b67      	ldr	r3, [pc, #412]	; (80024f4 <HAL_RCC_OscConfig+0x32c>)
 8002356:	430a      	orrs	r2, r1
 8002358:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800235a:	4b66      	ldr	r3, [pc, #408]	; (80024f4 <HAL_RCC_OscConfig+0x32c>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	0adb      	lsrs	r3, r3, #11
 8002360:	2207      	movs	r2, #7
 8002362:	4013      	ands	r3, r2
 8002364:	4a68      	ldr	r2, [pc, #416]	; (8002508 <HAL_RCC_OscConfig+0x340>)
 8002366:	40da      	lsrs	r2, r3
 8002368:	4b68      	ldr	r3, [pc, #416]	; (800250c <HAL_RCC_OscConfig+0x344>)
 800236a:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800236c:	4b68      	ldr	r3, [pc, #416]	; (8002510 <HAL_RCC_OscConfig+0x348>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	0018      	movs	r0, r3
 8002372:	f7ff fb37 	bl	80019e4 <HAL_InitTick>
 8002376:	1e03      	subs	r3, r0, #0
 8002378:	d051      	beq.n	800241e <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 800237a:	2301      	movs	r3, #1
 800237c:	e232      	b.n	80027e4 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	68db      	ldr	r3, [r3, #12]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d030      	beq.n	80023e8 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002386:	4b5b      	ldr	r3, [pc, #364]	; (80024f4 <HAL_RCC_OscConfig+0x32c>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4a5e      	ldr	r2, [pc, #376]	; (8002504 <HAL_RCC_OscConfig+0x33c>)
 800238c:	4013      	ands	r3, r2
 800238e:	0019      	movs	r1, r3
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	691a      	ldr	r2, [r3, #16]
 8002394:	4b57      	ldr	r3, [pc, #348]	; (80024f4 <HAL_RCC_OscConfig+0x32c>)
 8002396:	430a      	orrs	r2, r1
 8002398:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800239a:	4b56      	ldr	r3, [pc, #344]	; (80024f4 <HAL_RCC_OscConfig+0x32c>)
 800239c:	681a      	ldr	r2, [r3, #0]
 800239e:	4b55      	ldr	r3, [pc, #340]	; (80024f4 <HAL_RCC_OscConfig+0x32c>)
 80023a0:	2180      	movs	r1, #128	; 0x80
 80023a2:	0049      	lsls	r1, r1, #1
 80023a4:	430a      	orrs	r2, r1
 80023a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023a8:	f7ff fb78 	bl	8001a9c <HAL_GetTick>
 80023ac:	0003      	movs	r3, r0
 80023ae:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80023b0:	e008      	b.n	80023c4 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023b2:	f7ff fb73 	bl	8001a9c <HAL_GetTick>
 80023b6:	0002      	movs	r2, r0
 80023b8:	693b      	ldr	r3, [r7, #16]
 80023ba:	1ad3      	subs	r3, r2, r3
 80023bc:	2b02      	cmp	r3, #2
 80023be:	d901      	bls.n	80023c4 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80023c0:	2303      	movs	r3, #3
 80023c2:	e20f      	b.n	80027e4 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80023c4:	4b4b      	ldr	r3, [pc, #300]	; (80024f4 <HAL_RCC_OscConfig+0x32c>)
 80023c6:	681a      	ldr	r2, [r3, #0]
 80023c8:	2380      	movs	r3, #128	; 0x80
 80023ca:	00db      	lsls	r3, r3, #3
 80023cc:	4013      	ands	r3, r2
 80023ce:	d0f0      	beq.n	80023b2 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023d0:	4b48      	ldr	r3, [pc, #288]	; (80024f4 <HAL_RCC_OscConfig+0x32c>)
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	4a4a      	ldr	r2, [pc, #296]	; (8002500 <HAL_RCC_OscConfig+0x338>)
 80023d6:	4013      	ands	r3, r2
 80023d8:	0019      	movs	r1, r3
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	695b      	ldr	r3, [r3, #20]
 80023de:	021a      	lsls	r2, r3, #8
 80023e0:	4b44      	ldr	r3, [pc, #272]	; (80024f4 <HAL_RCC_OscConfig+0x32c>)
 80023e2:	430a      	orrs	r2, r1
 80023e4:	605a      	str	r2, [r3, #4]
 80023e6:	e01b      	b.n	8002420 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80023e8:	4b42      	ldr	r3, [pc, #264]	; (80024f4 <HAL_RCC_OscConfig+0x32c>)
 80023ea:	681a      	ldr	r2, [r3, #0]
 80023ec:	4b41      	ldr	r3, [pc, #260]	; (80024f4 <HAL_RCC_OscConfig+0x32c>)
 80023ee:	4949      	ldr	r1, [pc, #292]	; (8002514 <HAL_RCC_OscConfig+0x34c>)
 80023f0:	400a      	ands	r2, r1
 80023f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023f4:	f7ff fb52 	bl	8001a9c <HAL_GetTick>
 80023f8:	0003      	movs	r3, r0
 80023fa:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80023fc:	e008      	b.n	8002410 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023fe:	f7ff fb4d 	bl	8001a9c <HAL_GetTick>
 8002402:	0002      	movs	r2, r0
 8002404:	693b      	ldr	r3, [r7, #16]
 8002406:	1ad3      	subs	r3, r2, r3
 8002408:	2b02      	cmp	r3, #2
 800240a:	d901      	bls.n	8002410 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800240c:	2303      	movs	r3, #3
 800240e:	e1e9      	b.n	80027e4 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002410:	4b38      	ldr	r3, [pc, #224]	; (80024f4 <HAL_RCC_OscConfig+0x32c>)
 8002412:	681a      	ldr	r2, [r3, #0]
 8002414:	2380      	movs	r3, #128	; 0x80
 8002416:	00db      	lsls	r3, r3, #3
 8002418:	4013      	ands	r3, r2
 800241a:	d1f0      	bne.n	80023fe <HAL_RCC_OscConfig+0x236>
 800241c:	e000      	b.n	8002420 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800241e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	2208      	movs	r2, #8
 8002426:	4013      	ands	r3, r2
 8002428:	d047      	beq.n	80024ba <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800242a:	4b32      	ldr	r3, [pc, #200]	; (80024f4 <HAL_RCC_OscConfig+0x32c>)
 800242c:	689b      	ldr	r3, [r3, #8]
 800242e:	2238      	movs	r2, #56	; 0x38
 8002430:	4013      	ands	r3, r2
 8002432:	2b18      	cmp	r3, #24
 8002434:	d10a      	bne.n	800244c <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8002436:	4b2f      	ldr	r3, [pc, #188]	; (80024f4 <HAL_RCC_OscConfig+0x32c>)
 8002438:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800243a:	2202      	movs	r2, #2
 800243c:	4013      	ands	r3, r2
 800243e:	d03c      	beq.n	80024ba <HAL_RCC_OscConfig+0x2f2>
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	699b      	ldr	r3, [r3, #24]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d138      	bne.n	80024ba <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8002448:	2301      	movs	r3, #1
 800244a:	e1cb      	b.n	80027e4 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	699b      	ldr	r3, [r3, #24]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d019      	beq.n	8002488 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8002454:	4b27      	ldr	r3, [pc, #156]	; (80024f4 <HAL_RCC_OscConfig+0x32c>)
 8002456:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002458:	4b26      	ldr	r3, [pc, #152]	; (80024f4 <HAL_RCC_OscConfig+0x32c>)
 800245a:	2101      	movs	r1, #1
 800245c:	430a      	orrs	r2, r1
 800245e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002460:	f7ff fb1c 	bl	8001a9c <HAL_GetTick>
 8002464:	0003      	movs	r3, r0
 8002466:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002468:	e008      	b.n	800247c <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800246a:	f7ff fb17 	bl	8001a9c <HAL_GetTick>
 800246e:	0002      	movs	r2, r0
 8002470:	693b      	ldr	r3, [r7, #16]
 8002472:	1ad3      	subs	r3, r2, r3
 8002474:	2b02      	cmp	r3, #2
 8002476:	d901      	bls.n	800247c <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8002478:	2303      	movs	r3, #3
 800247a:	e1b3      	b.n	80027e4 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800247c:	4b1d      	ldr	r3, [pc, #116]	; (80024f4 <HAL_RCC_OscConfig+0x32c>)
 800247e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002480:	2202      	movs	r2, #2
 8002482:	4013      	ands	r3, r2
 8002484:	d0f1      	beq.n	800246a <HAL_RCC_OscConfig+0x2a2>
 8002486:	e018      	b.n	80024ba <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8002488:	4b1a      	ldr	r3, [pc, #104]	; (80024f4 <HAL_RCC_OscConfig+0x32c>)
 800248a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800248c:	4b19      	ldr	r3, [pc, #100]	; (80024f4 <HAL_RCC_OscConfig+0x32c>)
 800248e:	2101      	movs	r1, #1
 8002490:	438a      	bics	r2, r1
 8002492:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002494:	f7ff fb02 	bl	8001a9c <HAL_GetTick>
 8002498:	0003      	movs	r3, r0
 800249a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800249c:	e008      	b.n	80024b0 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800249e:	f7ff fafd 	bl	8001a9c <HAL_GetTick>
 80024a2:	0002      	movs	r2, r0
 80024a4:	693b      	ldr	r3, [r7, #16]
 80024a6:	1ad3      	subs	r3, r2, r3
 80024a8:	2b02      	cmp	r3, #2
 80024aa:	d901      	bls.n	80024b0 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80024ac:	2303      	movs	r3, #3
 80024ae:	e199      	b.n	80027e4 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80024b0:	4b10      	ldr	r3, [pc, #64]	; (80024f4 <HAL_RCC_OscConfig+0x32c>)
 80024b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024b4:	2202      	movs	r2, #2
 80024b6:	4013      	ands	r3, r2
 80024b8:	d1f1      	bne.n	800249e <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	2204      	movs	r2, #4
 80024c0:	4013      	ands	r3, r2
 80024c2:	d100      	bne.n	80024c6 <HAL_RCC_OscConfig+0x2fe>
 80024c4:	e0c6      	b.n	8002654 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024c6:	231f      	movs	r3, #31
 80024c8:	18fb      	adds	r3, r7, r3
 80024ca:	2200      	movs	r2, #0
 80024cc:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80024ce:	4b09      	ldr	r3, [pc, #36]	; (80024f4 <HAL_RCC_OscConfig+0x32c>)
 80024d0:	689b      	ldr	r3, [r3, #8]
 80024d2:	2238      	movs	r2, #56	; 0x38
 80024d4:	4013      	ands	r3, r2
 80024d6:	2b20      	cmp	r3, #32
 80024d8:	d11e      	bne.n	8002518 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80024da:	4b06      	ldr	r3, [pc, #24]	; (80024f4 <HAL_RCC_OscConfig+0x32c>)
 80024dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024de:	2202      	movs	r2, #2
 80024e0:	4013      	ands	r3, r2
 80024e2:	d100      	bne.n	80024e6 <HAL_RCC_OscConfig+0x31e>
 80024e4:	e0b6      	b.n	8002654 <HAL_RCC_OscConfig+0x48c>
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	689b      	ldr	r3, [r3, #8]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d000      	beq.n	80024f0 <HAL_RCC_OscConfig+0x328>
 80024ee:	e0b1      	b.n	8002654 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 80024f0:	2301      	movs	r3, #1
 80024f2:	e177      	b.n	80027e4 <HAL_RCC_OscConfig+0x61c>
 80024f4:	40021000 	.word	0x40021000
 80024f8:	fffeffff 	.word	0xfffeffff
 80024fc:	fffbffff 	.word	0xfffbffff
 8002500:	ffff80ff 	.word	0xffff80ff
 8002504:	ffffc7ff 	.word	0xffffc7ff
 8002508:	00f42400 	.word	0x00f42400
 800250c:	20000000 	.word	0x20000000
 8002510:	20000064 	.word	0x20000064
 8002514:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002518:	4bb4      	ldr	r3, [pc, #720]	; (80027ec <HAL_RCC_OscConfig+0x624>)
 800251a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800251c:	2380      	movs	r3, #128	; 0x80
 800251e:	055b      	lsls	r3, r3, #21
 8002520:	4013      	ands	r3, r2
 8002522:	d101      	bne.n	8002528 <HAL_RCC_OscConfig+0x360>
 8002524:	2301      	movs	r3, #1
 8002526:	e000      	b.n	800252a <HAL_RCC_OscConfig+0x362>
 8002528:	2300      	movs	r3, #0
 800252a:	2b00      	cmp	r3, #0
 800252c:	d011      	beq.n	8002552 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800252e:	4baf      	ldr	r3, [pc, #700]	; (80027ec <HAL_RCC_OscConfig+0x624>)
 8002530:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002532:	4bae      	ldr	r3, [pc, #696]	; (80027ec <HAL_RCC_OscConfig+0x624>)
 8002534:	2180      	movs	r1, #128	; 0x80
 8002536:	0549      	lsls	r1, r1, #21
 8002538:	430a      	orrs	r2, r1
 800253a:	63da      	str	r2, [r3, #60]	; 0x3c
 800253c:	4bab      	ldr	r3, [pc, #684]	; (80027ec <HAL_RCC_OscConfig+0x624>)
 800253e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002540:	2380      	movs	r3, #128	; 0x80
 8002542:	055b      	lsls	r3, r3, #21
 8002544:	4013      	ands	r3, r2
 8002546:	60fb      	str	r3, [r7, #12]
 8002548:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800254a:	231f      	movs	r3, #31
 800254c:	18fb      	adds	r3, r7, r3
 800254e:	2201      	movs	r2, #1
 8002550:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002552:	4ba7      	ldr	r3, [pc, #668]	; (80027f0 <HAL_RCC_OscConfig+0x628>)
 8002554:	681a      	ldr	r2, [r3, #0]
 8002556:	2380      	movs	r3, #128	; 0x80
 8002558:	005b      	lsls	r3, r3, #1
 800255a:	4013      	ands	r3, r2
 800255c:	d11a      	bne.n	8002594 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800255e:	4ba4      	ldr	r3, [pc, #656]	; (80027f0 <HAL_RCC_OscConfig+0x628>)
 8002560:	681a      	ldr	r2, [r3, #0]
 8002562:	4ba3      	ldr	r3, [pc, #652]	; (80027f0 <HAL_RCC_OscConfig+0x628>)
 8002564:	2180      	movs	r1, #128	; 0x80
 8002566:	0049      	lsls	r1, r1, #1
 8002568:	430a      	orrs	r2, r1
 800256a:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 800256c:	f7ff fa96 	bl	8001a9c <HAL_GetTick>
 8002570:	0003      	movs	r3, r0
 8002572:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002574:	e008      	b.n	8002588 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002576:	f7ff fa91 	bl	8001a9c <HAL_GetTick>
 800257a:	0002      	movs	r2, r0
 800257c:	693b      	ldr	r3, [r7, #16]
 800257e:	1ad3      	subs	r3, r2, r3
 8002580:	2b02      	cmp	r3, #2
 8002582:	d901      	bls.n	8002588 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8002584:	2303      	movs	r3, #3
 8002586:	e12d      	b.n	80027e4 <HAL_RCC_OscConfig+0x61c>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002588:	4b99      	ldr	r3, [pc, #612]	; (80027f0 <HAL_RCC_OscConfig+0x628>)
 800258a:	681a      	ldr	r2, [r3, #0]
 800258c:	2380      	movs	r3, #128	; 0x80
 800258e:	005b      	lsls	r3, r3, #1
 8002590:	4013      	ands	r3, r2
 8002592:	d0f0      	beq.n	8002576 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	689b      	ldr	r3, [r3, #8]
 8002598:	2b01      	cmp	r3, #1
 800259a:	d106      	bne.n	80025aa <HAL_RCC_OscConfig+0x3e2>
 800259c:	4b93      	ldr	r3, [pc, #588]	; (80027ec <HAL_RCC_OscConfig+0x624>)
 800259e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80025a0:	4b92      	ldr	r3, [pc, #584]	; (80027ec <HAL_RCC_OscConfig+0x624>)
 80025a2:	2101      	movs	r1, #1
 80025a4:	430a      	orrs	r2, r1
 80025a6:	65da      	str	r2, [r3, #92]	; 0x5c
 80025a8:	e01c      	b.n	80025e4 <HAL_RCC_OscConfig+0x41c>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	689b      	ldr	r3, [r3, #8]
 80025ae:	2b05      	cmp	r3, #5
 80025b0:	d10c      	bne.n	80025cc <HAL_RCC_OscConfig+0x404>
 80025b2:	4b8e      	ldr	r3, [pc, #568]	; (80027ec <HAL_RCC_OscConfig+0x624>)
 80025b4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80025b6:	4b8d      	ldr	r3, [pc, #564]	; (80027ec <HAL_RCC_OscConfig+0x624>)
 80025b8:	2104      	movs	r1, #4
 80025ba:	430a      	orrs	r2, r1
 80025bc:	65da      	str	r2, [r3, #92]	; 0x5c
 80025be:	4b8b      	ldr	r3, [pc, #556]	; (80027ec <HAL_RCC_OscConfig+0x624>)
 80025c0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80025c2:	4b8a      	ldr	r3, [pc, #552]	; (80027ec <HAL_RCC_OscConfig+0x624>)
 80025c4:	2101      	movs	r1, #1
 80025c6:	430a      	orrs	r2, r1
 80025c8:	65da      	str	r2, [r3, #92]	; 0x5c
 80025ca:	e00b      	b.n	80025e4 <HAL_RCC_OscConfig+0x41c>
 80025cc:	4b87      	ldr	r3, [pc, #540]	; (80027ec <HAL_RCC_OscConfig+0x624>)
 80025ce:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80025d0:	4b86      	ldr	r3, [pc, #536]	; (80027ec <HAL_RCC_OscConfig+0x624>)
 80025d2:	2101      	movs	r1, #1
 80025d4:	438a      	bics	r2, r1
 80025d6:	65da      	str	r2, [r3, #92]	; 0x5c
 80025d8:	4b84      	ldr	r3, [pc, #528]	; (80027ec <HAL_RCC_OscConfig+0x624>)
 80025da:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80025dc:	4b83      	ldr	r3, [pc, #524]	; (80027ec <HAL_RCC_OscConfig+0x624>)
 80025de:	2104      	movs	r1, #4
 80025e0:	438a      	bics	r2, r1
 80025e2:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	689b      	ldr	r3, [r3, #8]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d014      	beq.n	8002616 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025ec:	f7ff fa56 	bl	8001a9c <HAL_GetTick>
 80025f0:	0003      	movs	r3, r0
 80025f2:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80025f4:	e009      	b.n	800260a <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025f6:	f7ff fa51 	bl	8001a9c <HAL_GetTick>
 80025fa:	0002      	movs	r2, r0
 80025fc:	693b      	ldr	r3, [r7, #16]
 80025fe:	1ad3      	subs	r3, r2, r3
 8002600:	4a7c      	ldr	r2, [pc, #496]	; (80027f4 <HAL_RCC_OscConfig+0x62c>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d901      	bls.n	800260a <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8002606:	2303      	movs	r3, #3
 8002608:	e0ec      	b.n	80027e4 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800260a:	4b78      	ldr	r3, [pc, #480]	; (80027ec <HAL_RCC_OscConfig+0x624>)
 800260c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800260e:	2202      	movs	r2, #2
 8002610:	4013      	ands	r3, r2
 8002612:	d0f0      	beq.n	80025f6 <HAL_RCC_OscConfig+0x42e>
 8002614:	e013      	b.n	800263e <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002616:	f7ff fa41 	bl	8001a9c <HAL_GetTick>
 800261a:	0003      	movs	r3, r0
 800261c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800261e:	e009      	b.n	8002634 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002620:	f7ff fa3c 	bl	8001a9c <HAL_GetTick>
 8002624:	0002      	movs	r2, r0
 8002626:	693b      	ldr	r3, [r7, #16]
 8002628:	1ad3      	subs	r3, r2, r3
 800262a:	4a72      	ldr	r2, [pc, #456]	; (80027f4 <HAL_RCC_OscConfig+0x62c>)
 800262c:	4293      	cmp	r3, r2
 800262e:	d901      	bls.n	8002634 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8002630:	2303      	movs	r3, #3
 8002632:	e0d7      	b.n	80027e4 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002634:	4b6d      	ldr	r3, [pc, #436]	; (80027ec <HAL_RCC_OscConfig+0x624>)
 8002636:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002638:	2202      	movs	r2, #2
 800263a:	4013      	ands	r3, r2
 800263c:	d1f0      	bne.n	8002620 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800263e:	231f      	movs	r3, #31
 8002640:	18fb      	adds	r3, r7, r3
 8002642:	781b      	ldrb	r3, [r3, #0]
 8002644:	2b01      	cmp	r3, #1
 8002646:	d105      	bne.n	8002654 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8002648:	4b68      	ldr	r3, [pc, #416]	; (80027ec <HAL_RCC_OscConfig+0x624>)
 800264a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800264c:	4b67      	ldr	r3, [pc, #412]	; (80027ec <HAL_RCC_OscConfig+0x624>)
 800264e:	496a      	ldr	r1, [pc, #424]	; (80027f8 <HAL_RCC_OscConfig+0x630>)
 8002650:	400a      	ands	r2, r1
 8002652:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	69db      	ldr	r3, [r3, #28]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d100      	bne.n	800265e <HAL_RCC_OscConfig+0x496>
 800265c:	e0c1      	b.n	80027e2 <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800265e:	4b63      	ldr	r3, [pc, #396]	; (80027ec <HAL_RCC_OscConfig+0x624>)
 8002660:	689b      	ldr	r3, [r3, #8]
 8002662:	2238      	movs	r2, #56	; 0x38
 8002664:	4013      	ands	r3, r2
 8002666:	2b10      	cmp	r3, #16
 8002668:	d100      	bne.n	800266c <HAL_RCC_OscConfig+0x4a4>
 800266a:	e081      	b.n	8002770 <HAL_RCC_OscConfig+0x5a8>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	69db      	ldr	r3, [r3, #28]
 8002670:	2b02      	cmp	r3, #2
 8002672:	d156      	bne.n	8002722 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002674:	4b5d      	ldr	r3, [pc, #372]	; (80027ec <HAL_RCC_OscConfig+0x624>)
 8002676:	681a      	ldr	r2, [r3, #0]
 8002678:	4b5c      	ldr	r3, [pc, #368]	; (80027ec <HAL_RCC_OscConfig+0x624>)
 800267a:	4960      	ldr	r1, [pc, #384]	; (80027fc <HAL_RCC_OscConfig+0x634>)
 800267c:	400a      	ands	r2, r1
 800267e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002680:	f7ff fa0c 	bl	8001a9c <HAL_GetTick>
 8002684:	0003      	movs	r3, r0
 8002686:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002688:	e008      	b.n	800269c <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800268a:	f7ff fa07 	bl	8001a9c <HAL_GetTick>
 800268e:	0002      	movs	r2, r0
 8002690:	693b      	ldr	r3, [r7, #16]
 8002692:	1ad3      	subs	r3, r2, r3
 8002694:	2b02      	cmp	r3, #2
 8002696:	d901      	bls.n	800269c <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8002698:	2303      	movs	r3, #3
 800269a:	e0a3      	b.n	80027e4 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800269c:	4b53      	ldr	r3, [pc, #332]	; (80027ec <HAL_RCC_OscConfig+0x624>)
 800269e:	681a      	ldr	r2, [r3, #0]
 80026a0:	2380      	movs	r3, #128	; 0x80
 80026a2:	049b      	lsls	r3, r3, #18
 80026a4:	4013      	ands	r3, r2
 80026a6:	d1f0      	bne.n	800268a <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80026a8:	4b50      	ldr	r3, [pc, #320]	; (80027ec <HAL_RCC_OscConfig+0x624>)
 80026aa:	68db      	ldr	r3, [r3, #12]
 80026ac:	4a54      	ldr	r2, [pc, #336]	; (8002800 <HAL_RCC_OscConfig+0x638>)
 80026ae:	4013      	ands	r3, r2
 80026b0:	0019      	movs	r1, r3
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6a1a      	ldr	r2, [r3, #32]
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ba:	431a      	orrs	r2, r3
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026c0:	021b      	lsls	r3, r3, #8
 80026c2:	431a      	orrs	r2, r3
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026c8:	431a      	orrs	r2, r3
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ce:	431a      	orrs	r2, r3
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026d4:	431a      	orrs	r2, r3
 80026d6:	4b45      	ldr	r3, [pc, #276]	; (80027ec <HAL_RCC_OscConfig+0x624>)
 80026d8:	430a      	orrs	r2, r1
 80026da:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80026dc:	4b43      	ldr	r3, [pc, #268]	; (80027ec <HAL_RCC_OscConfig+0x624>)
 80026de:	681a      	ldr	r2, [r3, #0]
 80026e0:	4b42      	ldr	r3, [pc, #264]	; (80027ec <HAL_RCC_OscConfig+0x624>)
 80026e2:	2180      	movs	r1, #128	; 0x80
 80026e4:	0449      	lsls	r1, r1, #17
 80026e6:	430a      	orrs	r2, r1
 80026e8:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80026ea:	4b40      	ldr	r3, [pc, #256]	; (80027ec <HAL_RCC_OscConfig+0x624>)
 80026ec:	68da      	ldr	r2, [r3, #12]
 80026ee:	4b3f      	ldr	r3, [pc, #252]	; (80027ec <HAL_RCC_OscConfig+0x624>)
 80026f0:	2180      	movs	r1, #128	; 0x80
 80026f2:	0549      	lsls	r1, r1, #21
 80026f4:	430a      	orrs	r2, r1
 80026f6:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026f8:	f7ff f9d0 	bl	8001a9c <HAL_GetTick>
 80026fc:	0003      	movs	r3, r0
 80026fe:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002700:	e008      	b.n	8002714 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002702:	f7ff f9cb 	bl	8001a9c <HAL_GetTick>
 8002706:	0002      	movs	r2, r0
 8002708:	693b      	ldr	r3, [r7, #16]
 800270a:	1ad3      	subs	r3, r2, r3
 800270c:	2b02      	cmp	r3, #2
 800270e:	d901      	bls.n	8002714 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8002710:	2303      	movs	r3, #3
 8002712:	e067      	b.n	80027e4 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002714:	4b35      	ldr	r3, [pc, #212]	; (80027ec <HAL_RCC_OscConfig+0x624>)
 8002716:	681a      	ldr	r2, [r3, #0]
 8002718:	2380      	movs	r3, #128	; 0x80
 800271a:	049b      	lsls	r3, r3, #18
 800271c:	4013      	ands	r3, r2
 800271e:	d0f0      	beq.n	8002702 <HAL_RCC_OscConfig+0x53a>
 8002720:	e05f      	b.n	80027e2 <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002722:	4b32      	ldr	r3, [pc, #200]	; (80027ec <HAL_RCC_OscConfig+0x624>)
 8002724:	681a      	ldr	r2, [r3, #0]
 8002726:	4b31      	ldr	r3, [pc, #196]	; (80027ec <HAL_RCC_OscConfig+0x624>)
 8002728:	4934      	ldr	r1, [pc, #208]	; (80027fc <HAL_RCC_OscConfig+0x634>)
 800272a:	400a      	ands	r2, r1
 800272c:	601a      	str	r2, [r3, #0]

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 800272e:	4b2f      	ldr	r3, [pc, #188]	; (80027ec <HAL_RCC_OscConfig+0x624>)
 8002730:	68da      	ldr	r2, [r3, #12]
 8002732:	4b2e      	ldr	r3, [pc, #184]	; (80027ec <HAL_RCC_OscConfig+0x624>)
 8002734:	2103      	movs	r1, #3
 8002736:	438a      	bics	r2, r1
 8002738:	60da      	str	r2, [r3, #12]

#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 800273a:	4b2c      	ldr	r3, [pc, #176]	; (80027ec <HAL_RCC_OscConfig+0x624>)
 800273c:	68da      	ldr	r2, [r3, #12]
 800273e:	4b2b      	ldr	r3, [pc, #172]	; (80027ec <HAL_RCC_OscConfig+0x624>)
 8002740:	4930      	ldr	r1, [pc, #192]	; (8002804 <HAL_RCC_OscConfig+0x63c>)
 8002742:	400a      	ands	r2, r1
 8002744:	60da      	str	r2, [r3, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
#endif /* RCC_PLLQ_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002746:	f7ff f9a9 	bl	8001a9c <HAL_GetTick>
 800274a:	0003      	movs	r3, r0
 800274c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800274e:	e008      	b.n	8002762 <HAL_RCC_OscConfig+0x59a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002750:	f7ff f9a4 	bl	8001a9c <HAL_GetTick>
 8002754:	0002      	movs	r2, r0
 8002756:	693b      	ldr	r3, [r7, #16]
 8002758:	1ad3      	subs	r3, r2, r3
 800275a:	2b02      	cmp	r3, #2
 800275c:	d901      	bls.n	8002762 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 800275e:	2303      	movs	r3, #3
 8002760:	e040      	b.n	80027e4 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002762:	4b22      	ldr	r3, [pc, #136]	; (80027ec <HAL_RCC_OscConfig+0x624>)
 8002764:	681a      	ldr	r2, [r3, #0]
 8002766:	2380      	movs	r3, #128	; 0x80
 8002768:	049b      	lsls	r3, r3, #18
 800276a:	4013      	ands	r3, r2
 800276c:	d1f0      	bne.n	8002750 <HAL_RCC_OscConfig+0x588>
 800276e:	e038      	b.n	80027e2 <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	69db      	ldr	r3, [r3, #28]
 8002774:	2b01      	cmp	r3, #1
 8002776:	d101      	bne.n	800277c <HAL_RCC_OscConfig+0x5b4>
      {
        return HAL_ERROR;
 8002778:	2301      	movs	r3, #1
 800277a:	e033      	b.n	80027e4 <HAL_RCC_OscConfig+0x61c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 800277c:	4b1b      	ldr	r3, [pc, #108]	; (80027ec <HAL_RCC_OscConfig+0x624>)
 800277e:	68db      	ldr	r3, [r3, #12]
 8002780:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002782:	697b      	ldr	r3, [r7, #20]
 8002784:	2203      	movs	r2, #3
 8002786:	401a      	ands	r2, r3
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6a1b      	ldr	r3, [r3, #32]
 800278c:	429a      	cmp	r2, r3
 800278e:	d126      	bne.n	80027de <HAL_RCC_OscConfig+0x616>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002790:	697b      	ldr	r3, [r7, #20]
 8002792:	2270      	movs	r2, #112	; 0x70
 8002794:	401a      	ands	r2, r3
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800279a:	429a      	cmp	r2, r3
 800279c:	d11f      	bne.n	80027de <HAL_RCC_OscConfig+0x616>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800279e:	697a      	ldr	r2, [r7, #20]
 80027a0:	23fe      	movs	r3, #254	; 0xfe
 80027a2:	01db      	lsls	r3, r3, #7
 80027a4:	401a      	ands	r2, r3
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027aa:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80027ac:	429a      	cmp	r2, r3
 80027ae:	d116      	bne.n	80027de <HAL_RCC_OscConfig+0x616>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80027b0:	697a      	ldr	r2, [r7, #20]
 80027b2:	23f8      	movs	r3, #248	; 0xf8
 80027b4:	039b      	lsls	r3, r3, #14
 80027b6:	401a      	ands	r2, r3
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80027bc:	429a      	cmp	r2, r3
 80027be:	d10e      	bne.n	80027de <HAL_RCC_OscConfig+0x616>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80027c0:	697a      	ldr	r2, [r7, #20]
 80027c2:	23e0      	movs	r3, #224	; 0xe0
 80027c4:	051b      	lsls	r3, r3, #20
 80027c6:	401a      	ands	r2, r3
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80027cc:	429a      	cmp	r2, r3
 80027ce:	d106      	bne.n	80027de <HAL_RCC_OscConfig+0x616>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80027d0:	697b      	ldr	r3, [r7, #20]
 80027d2:	0f5b      	lsrs	r3, r3, #29
 80027d4:	075a      	lsls	r2, r3, #29
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80027da:	429a      	cmp	r2, r3
 80027dc:	d001      	beq.n	80027e2 <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 80027de:	2301      	movs	r3, #1
 80027e0:	e000      	b.n	80027e4 <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }
  return HAL_OK;
 80027e2:	2300      	movs	r3, #0
}
 80027e4:	0018      	movs	r0, r3
 80027e6:	46bd      	mov	sp, r7
 80027e8:	b008      	add	sp, #32
 80027ea:	bd80      	pop	{r7, pc}
 80027ec:	40021000 	.word	0x40021000
 80027f0:	40007000 	.word	0x40007000
 80027f4:	00001388 	.word	0x00001388
 80027f8:	efffffff 	.word	0xefffffff
 80027fc:	feffffff 	.word	0xfeffffff
 8002800:	11c1808c 	.word	0x11c1808c
 8002804:	eefeffff 	.word	0xeefeffff

08002808 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b084      	sub	sp, #16
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
 8002810:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d101      	bne.n	800281c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002818:	2301      	movs	r3, #1
 800281a:	e0e9      	b.n	80029f0 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800281c:	4b76      	ldr	r3, [pc, #472]	; (80029f8 <HAL_RCC_ClockConfig+0x1f0>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	2207      	movs	r2, #7
 8002822:	4013      	ands	r3, r2
 8002824:	683a      	ldr	r2, [r7, #0]
 8002826:	429a      	cmp	r2, r3
 8002828:	d91e      	bls.n	8002868 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800282a:	4b73      	ldr	r3, [pc, #460]	; (80029f8 <HAL_RCC_ClockConfig+0x1f0>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	2207      	movs	r2, #7
 8002830:	4393      	bics	r3, r2
 8002832:	0019      	movs	r1, r3
 8002834:	4b70      	ldr	r3, [pc, #448]	; (80029f8 <HAL_RCC_ClockConfig+0x1f0>)
 8002836:	683a      	ldr	r2, [r7, #0]
 8002838:	430a      	orrs	r2, r1
 800283a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800283c:	f7ff f92e 	bl	8001a9c <HAL_GetTick>
 8002840:	0003      	movs	r3, r0
 8002842:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002844:	e009      	b.n	800285a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002846:	f7ff f929 	bl	8001a9c <HAL_GetTick>
 800284a:	0002      	movs	r2, r0
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	1ad3      	subs	r3, r2, r3
 8002850:	4a6a      	ldr	r2, [pc, #424]	; (80029fc <HAL_RCC_ClockConfig+0x1f4>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d901      	bls.n	800285a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002856:	2303      	movs	r3, #3
 8002858:	e0ca      	b.n	80029f0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800285a:	4b67      	ldr	r3, [pc, #412]	; (80029f8 <HAL_RCC_ClockConfig+0x1f0>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	2207      	movs	r2, #7
 8002860:	4013      	ands	r3, r2
 8002862:	683a      	ldr	r2, [r7, #0]
 8002864:	429a      	cmp	r2, r3
 8002866:	d1ee      	bne.n	8002846 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	2202      	movs	r2, #2
 800286e:	4013      	ands	r3, r2
 8002870:	d015      	beq.n	800289e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	2204      	movs	r2, #4
 8002878:	4013      	ands	r3, r2
 800287a:	d006      	beq.n	800288a <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800287c:	4b60      	ldr	r3, [pc, #384]	; (8002a00 <HAL_RCC_ClockConfig+0x1f8>)
 800287e:	689a      	ldr	r2, [r3, #8]
 8002880:	4b5f      	ldr	r3, [pc, #380]	; (8002a00 <HAL_RCC_ClockConfig+0x1f8>)
 8002882:	21e0      	movs	r1, #224	; 0xe0
 8002884:	01c9      	lsls	r1, r1, #7
 8002886:	430a      	orrs	r2, r1
 8002888:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800288a:	4b5d      	ldr	r3, [pc, #372]	; (8002a00 <HAL_RCC_ClockConfig+0x1f8>)
 800288c:	689b      	ldr	r3, [r3, #8]
 800288e:	4a5d      	ldr	r2, [pc, #372]	; (8002a04 <HAL_RCC_ClockConfig+0x1fc>)
 8002890:	4013      	ands	r3, r2
 8002892:	0019      	movs	r1, r3
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	689a      	ldr	r2, [r3, #8]
 8002898:	4b59      	ldr	r3, [pc, #356]	; (8002a00 <HAL_RCC_ClockConfig+0x1f8>)
 800289a:	430a      	orrs	r2, r1
 800289c:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	2201      	movs	r2, #1
 80028a4:	4013      	ands	r3, r2
 80028a6:	d057      	beq.n	8002958 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	2b01      	cmp	r3, #1
 80028ae:	d107      	bne.n	80028c0 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80028b0:	4b53      	ldr	r3, [pc, #332]	; (8002a00 <HAL_RCC_ClockConfig+0x1f8>)
 80028b2:	681a      	ldr	r2, [r3, #0]
 80028b4:	2380      	movs	r3, #128	; 0x80
 80028b6:	029b      	lsls	r3, r3, #10
 80028b8:	4013      	ands	r3, r2
 80028ba:	d12b      	bne.n	8002914 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80028bc:	2301      	movs	r3, #1
 80028be:	e097      	b.n	80029f0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	2b02      	cmp	r3, #2
 80028c6:	d107      	bne.n	80028d8 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028c8:	4b4d      	ldr	r3, [pc, #308]	; (8002a00 <HAL_RCC_ClockConfig+0x1f8>)
 80028ca:	681a      	ldr	r2, [r3, #0]
 80028cc:	2380      	movs	r3, #128	; 0x80
 80028ce:	049b      	lsls	r3, r3, #18
 80028d0:	4013      	ands	r3, r2
 80028d2:	d11f      	bne.n	8002914 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80028d4:	2301      	movs	r3, #1
 80028d6:	e08b      	b.n	80029f0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d107      	bne.n	80028f0 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80028e0:	4b47      	ldr	r3, [pc, #284]	; (8002a00 <HAL_RCC_ClockConfig+0x1f8>)
 80028e2:	681a      	ldr	r2, [r3, #0]
 80028e4:	2380      	movs	r3, #128	; 0x80
 80028e6:	00db      	lsls	r3, r3, #3
 80028e8:	4013      	ands	r3, r2
 80028ea:	d113      	bne.n	8002914 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80028ec:	2301      	movs	r3, #1
 80028ee:	e07f      	b.n	80029f0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	2b03      	cmp	r3, #3
 80028f6:	d106      	bne.n	8002906 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80028f8:	4b41      	ldr	r3, [pc, #260]	; (8002a00 <HAL_RCC_ClockConfig+0x1f8>)
 80028fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028fc:	2202      	movs	r2, #2
 80028fe:	4013      	ands	r3, r2
 8002900:	d108      	bne.n	8002914 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002902:	2301      	movs	r3, #1
 8002904:	e074      	b.n	80029f0 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002906:	4b3e      	ldr	r3, [pc, #248]	; (8002a00 <HAL_RCC_ClockConfig+0x1f8>)
 8002908:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800290a:	2202      	movs	r2, #2
 800290c:	4013      	ands	r3, r2
 800290e:	d101      	bne.n	8002914 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002910:	2301      	movs	r3, #1
 8002912:	e06d      	b.n	80029f0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002914:	4b3a      	ldr	r3, [pc, #232]	; (8002a00 <HAL_RCC_ClockConfig+0x1f8>)
 8002916:	689b      	ldr	r3, [r3, #8]
 8002918:	2207      	movs	r2, #7
 800291a:	4393      	bics	r3, r2
 800291c:	0019      	movs	r1, r3
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	685a      	ldr	r2, [r3, #4]
 8002922:	4b37      	ldr	r3, [pc, #220]	; (8002a00 <HAL_RCC_ClockConfig+0x1f8>)
 8002924:	430a      	orrs	r2, r1
 8002926:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002928:	f7ff f8b8 	bl	8001a9c <HAL_GetTick>
 800292c:	0003      	movs	r3, r0
 800292e:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002930:	e009      	b.n	8002946 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002932:	f7ff f8b3 	bl	8001a9c <HAL_GetTick>
 8002936:	0002      	movs	r2, r0
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	1ad3      	subs	r3, r2, r3
 800293c:	4a2f      	ldr	r2, [pc, #188]	; (80029fc <HAL_RCC_ClockConfig+0x1f4>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d901      	bls.n	8002946 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8002942:	2303      	movs	r3, #3
 8002944:	e054      	b.n	80029f0 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002946:	4b2e      	ldr	r3, [pc, #184]	; (8002a00 <HAL_RCC_ClockConfig+0x1f8>)
 8002948:	689b      	ldr	r3, [r3, #8]
 800294a:	2238      	movs	r2, #56	; 0x38
 800294c:	401a      	ands	r2, r3
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	00db      	lsls	r3, r3, #3
 8002954:	429a      	cmp	r2, r3
 8002956:	d1ec      	bne.n	8002932 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002958:	4b27      	ldr	r3, [pc, #156]	; (80029f8 <HAL_RCC_ClockConfig+0x1f0>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	2207      	movs	r2, #7
 800295e:	4013      	ands	r3, r2
 8002960:	683a      	ldr	r2, [r7, #0]
 8002962:	429a      	cmp	r2, r3
 8002964:	d21e      	bcs.n	80029a4 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002966:	4b24      	ldr	r3, [pc, #144]	; (80029f8 <HAL_RCC_ClockConfig+0x1f0>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	2207      	movs	r2, #7
 800296c:	4393      	bics	r3, r2
 800296e:	0019      	movs	r1, r3
 8002970:	4b21      	ldr	r3, [pc, #132]	; (80029f8 <HAL_RCC_ClockConfig+0x1f0>)
 8002972:	683a      	ldr	r2, [r7, #0]
 8002974:	430a      	orrs	r2, r1
 8002976:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002978:	f7ff f890 	bl	8001a9c <HAL_GetTick>
 800297c:	0003      	movs	r3, r0
 800297e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002980:	e009      	b.n	8002996 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002982:	f7ff f88b 	bl	8001a9c <HAL_GetTick>
 8002986:	0002      	movs	r2, r0
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	1ad3      	subs	r3, r2, r3
 800298c:	4a1b      	ldr	r2, [pc, #108]	; (80029fc <HAL_RCC_ClockConfig+0x1f4>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d901      	bls.n	8002996 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8002992:	2303      	movs	r3, #3
 8002994:	e02c      	b.n	80029f0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002996:	4b18      	ldr	r3, [pc, #96]	; (80029f8 <HAL_RCC_ClockConfig+0x1f0>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	2207      	movs	r2, #7
 800299c:	4013      	ands	r3, r2
 800299e:	683a      	ldr	r2, [r7, #0]
 80029a0:	429a      	cmp	r2, r3
 80029a2:	d1ee      	bne.n	8002982 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	2204      	movs	r2, #4
 80029aa:	4013      	ands	r3, r2
 80029ac:	d009      	beq.n	80029c2 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80029ae:	4b14      	ldr	r3, [pc, #80]	; (8002a00 <HAL_RCC_ClockConfig+0x1f8>)
 80029b0:	689b      	ldr	r3, [r3, #8]
 80029b2:	4a15      	ldr	r2, [pc, #84]	; (8002a08 <HAL_RCC_ClockConfig+0x200>)
 80029b4:	4013      	ands	r3, r2
 80029b6:	0019      	movs	r1, r3
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	68da      	ldr	r2, [r3, #12]
 80029bc:	4b10      	ldr	r3, [pc, #64]	; (8002a00 <HAL_RCC_ClockConfig+0x1f8>)
 80029be:	430a      	orrs	r2, r1
 80029c0:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80029c2:	f000 f829 	bl	8002a18 <HAL_RCC_GetSysClockFreq>
 80029c6:	0001      	movs	r1, r0
 80029c8:	4b0d      	ldr	r3, [pc, #52]	; (8002a00 <HAL_RCC_ClockConfig+0x1f8>)
 80029ca:	689b      	ldr	r3, [r3, #8]
 80029cc:	0a1b      	lsrs	r3, r3, #8
 80029ce:	220f      	movs	r2, #15
 80029d0:	401a      	ands	r2, r3
 80029d2:	4b0e      	ldr	r3, [pc, #56]	; (8002a0c <HAL_RCC_ClockConfig+0x204>)
 80029d4:	0092      	lsls	r2, r2, #2
 80029d6:	58d3      	ldr	r3, [r2, r3]
 80029d8:	221f      	movs	r2, #31
 80029da:	4013      	ands	r3, r2
 80029dc:	000a      	movs	r2, r1
 80029de:	40da      	lsrs	r2, r3
 80029e0:	4b0b      	ldr	r3, [pc, #44]	; (8002a10 <HAL_RCC_ClockConfig+0x208>)
 80029e2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80029e4:	4b0b      	ldr	r3, [pc, #44]	; (8002a14 <HAL_RCC_ClockConfig+0x20c>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	0018      	movs	r0, r3
 80029ea:	f7fe fffb 	bl	80019e4 <HAL_InitTick>
 80029ee:	0003      	movs	r3, r0
}
 80029f0:	0018      	movs	r0, r3
 80029f2:	46bd      	mov	sp, r7
 80029f4:	b004      	add	sp, #16
 80029f6:	bd80      	pop	{r7, pc}
 80029f8:	40022000 	.word	0x40022000
 80029fc:	00001388 	.word	0x00001388
 8002a00:	40021000 	.word	0x40021000
 8002a04:	fffff0ff 	.word	0xfffff0ff
 8002a08:	ffff8fff 	.word	0xffff8fff
 8002a0c:	080049f4 	.word	0x080049f4
 8002a10:	20000000 	.word	0x20000000
 8002a14:	20000064 	.word	0x20000064

08002a18 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b086      	sub	sp, #24
 8002a1c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002a1e:	4b3c      	ldr	r3, [pc, #240]	; (8002b10 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002a20:	689b      	ldr	r3, [r3, #8]
 8002a22:	2238      	movs	r2, #56	; 0x38
 8002a24:	4013      	ands	r3, r2
 8002a26:	d10f      	bne.n	8002a48 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002a28:	4b39      	ldr	r3, [pc, #228]	; (8002b10 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	0adb      	lsrs	r3, r3, #11
 8002a2e:	2207      	movs	r2, #7
 8002a30:	4013      	ands	r3, r2
 8002a32:	2201      	movs	r2, #1
 8002a34:	409a      	lsls	r2, r3
 8002a36:	0013      	movs	r3, r2
 8002a38:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8002a3a:	6839      	ldr	r1, [r7, #0]
 8002a3c:	4835      	ldr	r0, [pc, #212]	; (8002b14 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002a3e:	f7fd fb61 	bl	8000104 <__udivsi3>
 8002a42:	0003      	movs	r3, r0
 8002a44:	613b      	str	r3, [r7, #16]
 8002a46:	e05d      	b.n	8002b04 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002a48:	4b31      	ldr	r3, [pc, #196]	; (8002b10 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002a4a:	689b      	ldr	r3, [r3, #8]
 8002a4c:	2238      	movs	r2, #56	; 0x38
 8002a4e:	4013      	ands	r3, r2
 8002a50:	2b08      	cmp	r3, #8
 8002a52:	d102      	bne.n	8002a5a <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002a54:	4b30      	ldr	r3, [pc, #192]	; (8002b18 <HAL_RCC_GetSysClockFreq+0x100>)
 8002a56:	613b      	str	r3, [r7, #16]
 8002a58:	e054      	b.n	8002b04 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a5a:	4b2d      	ldr	r3, [pc, #180]	; (8002b10 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002a5c:	689b      	ldr	r3, [r3, #8]
 8002a5e:	2238      	movs	r2, #56	; 0x38
 8002a60:	4013      	ands	r3, r2
 8002a62:	2b10      	cmp	r3, #16
 8002a64:	d138      	bne.n	8002ad8 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8002a66:	4b2a      	ldr	r3, [pc, #168]	; (8002b10 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002a68:	68db      	ldr	r3, [r3, #12]
 8002a6a:	2203      	movs	r2, #3
 8002a6c:	4013      	ands	r3, r2
 8002a6e:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002a70:	4b27      	ldr	r3, [pc, #156]	; (8002b10 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002a72:	68db      	ldr	r3, [r3, #12]
 8002a74:	091b      	lsrs	r3, r3, #4
 8002a76:	2207      	movs	r2, #7
 8002a78:	4013      	ands	r3, r2
 8002a7a:	3301      	adds	r3, #1
 8002a7c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	2b03      	cmp	r3, #3
 8002a82:	d10d      	bne.n	8002aa0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002a84:	68b9      	ldr	r1, [r7, #8]
 8002a86:	4824      	ldr	r0, [pc, #144]	; (8002b18 <HAL_RCC_GetSysClockFreq+0x100>)
 8002a88:	f7fd fb3c 	bl	8000104 <__udivsi3>
 8002a8c:	0003      	movs	r3, r0
 8002a8e:	0019      	movs	r1, r3
 8002a90:	4b1f      	ldr	r3, [pc, #124]	; (8002b10 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002a92:	68db      	ldr	r3, [r3, #12]
 8002a94:	0a1b      	lsrs	r3, r3, #8
 8002a96:	227f      	movs	r2, #127	; 0x7f
 8002a98:	4013      	ands	r3, r2
 8002a9a:	434b      	muls	r3, r1
 8002a9c:	617b      	str	r3, [r7, #20]
        break;
 8002a9e:	e00d      	b.n	8002abc <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002aa0:	68b9      	ldr	r1, [r7, #8]
 8002aa2:	481c      	ldr	r0, [pc, #112]	; (8002b14 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002aa4:	f7fd fb2e 	bl	8000104 <__udivsi3>
 8002aa8:	0003      	movs	r3, r0
 8002aaa:	0019      	movs	r1, r3
 8002aac:	4b18      	ldr	r3, [pc, #96]	; (8002b10 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002aae:	68db      	ldr	r3, [r3, #12]
 8002ab0:	0a1b      	lsrs	r3, r3, #8
 8002ab2:	227f      	movs	r2, #127	; 0x7f
 8002ab4:	4013      	ands	r3, r2
 8002ab6:	434b      	muls	r3, r1
 8002ab8:	617b      	str	r3, [r7, #20]
        break;
 8002aba:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8002abc:	4b14      	ldr	r3, [pc, #80]	; (8002b10 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002abe:	68db      	ldr	r3, [r3, #12]
 8002ac0:	0f5b      	lsrs	r3, r3, #29
 8002ac2:	2207      	movs	r2, #7
 8002ac4:	4013      	ands	r3, r2
 8002ac6:	3301      	adds	r3, #1
 8002ac8:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8002aca:	6879      	ldr	r1, [r7, #4]
 8002acc:	6978      	ldr	r0, [r7, #20]
 8002ace:	f7fd fb19 	bl	8000104 <__udivsi3>
 8002ad2:	0003      	movs	r3, r0
 8002ad4:	613b      	str	r3, [r7, #16]
 8002ad6:	e015      	b.n	8002b04 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002ad8:	4b0d      	ldr	r3, [pc, #52]	; (8002b10 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002ada:	689b      	ldr	r3, [r3, #8]
 8002adc:	2238      	movs	r2, #56	; 0x38
 8002ade:	4013      	ands	r3, r2
 8002ae0:	2b20      	cmp	r3, #32
 8002ae2:	d103      	bne.n	8002aec <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002ae4:	2380      	movs	r3, #128	; 0x80
 8002ae6:	021b      	lsls	r3, r3, #8
 8002ae8:	613b      	str	r3, [r7, #16]
 8002aea:	e00b      	b.n	8002b04 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002aec:	4b08      	ldr	r3, [pc, #32]	; (8002b10 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002aee:	689b      	ldr	r3, [r3, #8]
 8002af0:	2238      	movs	r2, #56	; 0x38
 8002af2:	4013      	ands	r3, r2
 8002af4:	2b18      	cmp	r3, #24
 8002af6:	d103      	bne.n	8002b00 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002af8:	23fa      	movs	r3, #250	; 0xfa
 8002afa:	01db      	lsls	r3, r3, #7
 8002afc:	613b      	str	r3, [r7, #16]
 8002afe:	e001      	b.n	8002b04 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8002b00:	2300      	movs	r3, #0
 8002b02:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002b04:	693b      	ldr	r3, [r7, #16]
}
 8002b06:	0018      	movs	r0, r3
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	b006      	add	sp, #24
 8002b0c:	bd80      	pop	{r7, pc}
 8002b0e:	46c0      	nop			; (mov r8, r8)
 8002b10:	40021000 	.word	0x40021000
 8002b14:	00f42400 	.word	0x00f42400
 8002b18:	007a1200 	.word	0x007a1200

08002b1c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b20:	4b02      	ldr	r3, [pc, #8]	; (8002b2c <HAL_RCC_GetHCLKFreq+0x10>)
 8002b22:	681b      	ldr	r3, [r3, #0]
}
 8002b24:	0018      	movs	r0, r3
 8002b26:	46bd      	mov	sp, r7
 8002b28:	bd80      	pop	{r7, pc}
 8002b2a:	46c0      	nop			; (mov r8, r8)
 8002b2c:	20000000 	.word	0x20000000

08002b30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b30:	b5b0      	push	{r4, r5, r7, lr}
 8002b32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002b34:	f7ff fff2 	bl	8002b1c <HAL_RCC_GetHCLKFreq>
 8002b38:	0004      	movs	r4, r0
 8002b3a:	f7ff fb39 	bl	80021b0 <LL_RCC_GetAPB1Prescaler>
 8002b3e:	0003      	movs	r3, r0
 8002b40:	0b1a      	lsrs	r2, r3, #12
 8002b42:	4b05      	ldr	r3, [pc, #20]	; (8002b58 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002b44:	0092      	lsls	r2, r2, #2
 8002b46:	58d3      	ldr	r3, [r2, r3]
 8002b48:	221f      	movs	r2, #31
 8002b4a:	4013      	ands	r3, r2
 8002b4c:	40dc      	lsrs	r4, r3
 8002b4e:	0023      	movs	r3, r4
}
 8002b50:	0018      	movs	r0, r3
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bdb0      	pop	{r4, r5, r7, pc}
 8002b56:	46c0      	nop			; (mov r8, r8)
 8002b58:	08004a34 	.word	0x08004a34

08002b5c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b086      	sub	sp, #24
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8002b64:	2313      	movs	r3, #19
 8002b66:	18fb      	adds	r3, r7, r3
 8002b68:	2200      	movs	r2, #0
 8002b6a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002b6c:	2312      	movs	r3, #18
 8002b6e:	18fb      	adds	r3, r7, r3
 8002b70:	2200      	movs	r2, #0
 8002b72:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681a      	ldr	r2, [r3, #0]
 8002b78:	2380      	movs	r3, #128	; 0x80
 8002b7a:	029b      	lsls	r3, r3, #10
 8002b7c:	4013      	ands	r3, r2
 8002b7e:	d100      	bne.n	8002b82 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8002b80:	e0a3      	b.n	8002cca <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b82:	2011      	movs	r0, #17
 8002b84:	183b      	adds	r3, r7, r0
 8002b86:	2200      	movs	r2, #0
 8002b88:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b8a:	4bc3      	ldr	r3, [pc, #780]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002b8c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002b8e:	2380      	movs	r3, #128	; 0x80
 8002b90:	055b      	lsls	r3, r3, #21
 8002b92:	4013      	ands	r3, r2
 8002b94:	d110      	bne.n	8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b96:	4bc0      	ldr	r3, [pc, #768]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002b98:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002b9a:	4bbf      	ldr	r3, [pc, #764]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002b9c:	2180      	movs	r1, #128	; 0x80
 8002b9e:	0549      	lsls	r1, r1, #21
 8002ba0:	430a      	orrs	r2, r1
 8002ba2:	63da      	str	r2, [r3, #60]	; 0x3c
 8002ba4:	4bbc      	ldr	r3, [pc, #752]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002ba6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002ba8:	2380      	movs	r3, #128	; 0x80
 8002baa:	055b      	lsls	r3, r3, #21
 8002bac:	4013      	ands	r3, r2
 8002bae:	60bb      	str	r3, [r7, #8]
 8002bb0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002bb2:	183b      	adds	r3, r7, r0
 8002bb4:	2201      	movs	r2, #1
 8002bb6:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002bb8:	4bb8      	ldr	r3, [pc, #736]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8002bba:	681a      	ldr	r2, [r3, #0]
 8002bbc:	4bb7      	ldr	r3, [pc, #732]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8002bbe:	2180      	movs	r1, #128	; 0x80
 8002bc0:	0049      	lsls	r1, r1, #1
 8002bc2:	430a      	orrs	r2, r1
 8002bc4:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002bc6:	f7fe ff69 	bl	8001a9c <HAL_GetTick>
 8002bca:	0003      	movs	r3, r0
 8002bcc:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002bce:	e00b      	b.n	8002be8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bd0:	f7fe ff64 	bl	8001a9c <HAL_GetTick>
 8002bd4:	0002      	movs	r2, r0
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	1ad3      	subs	r3, r2, r3
 8002bda:	2b02      	cmp	r3, #2
 8002bdc:	d904      	bls.n	8002be8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8002bde:	2313      	movs	r3, #19
 8002be0:	18fb      	adds	r3, r7, r3
 8002be2:	2203      	movs	r2, #3
 8002be4:	701a      	strb	r2, [r3, #0]
        break;
 8002be6:	e005      	b.n	8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002be8:	4bac      	ldr	r3, [pc, #688]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8002bea:	681a      	ldr	r2, [r3, #0]
 8002bec:	2380      	movs	r3, #128	; 0x80
 8002bee:	005b      	lsls	r3, r3, #1
 8002bf0:	4013      	ands	r3, r2
 8002bf2:	d0ed      	beq.n	8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8002bf4:	2313      	movs	r3, #19
 8002bf6:	18fb      	adds	r3, r7, r3
 8002bf8:	781b      	ldrb	r3, [r3, #0]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d154      	bne.n	8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002bfe:	4ba6      	ldr	r3, [pc, #664]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002c00:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002c02:	23c0      	movs	r3, #192	; 0xc0
 8002c04:	009b      	lsls	r3, r3, #2
 8002c06:	4013      	ands	r3, r2
 8002c08:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002c0a:	697b      	ldr	r3, [r7, #20]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d019      	beq.n	8002c44 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c14:	697a      	ldr	r2, [r7, #20]
 8002c16:	429a      	cmp	r2, r3
 8002c18:	d014      	beq.n	8002c44 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002c1a:	4b9f      	ldr	r3, [pc, #636]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002c1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c1e:	4aa0      	ldr	r2, [pc, #640]	; (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8002c20:	4013      	ands	r3, r2
 8002c22:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002c24:	4b9c      	ldr	r3, [pc, #624]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002c26:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002c28:	4b9b      	ldr	r3, [pc, #620]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002c2a:	2180      	movs	r1, #128	; 0x80
 8002c2c:	0249      	lsls	r1, r1, #9
 8002c2e:	430a      	orrs	r2, r1
 8002c30:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002c32:	4b99      	ldr	r3, [pc, #612]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002c34:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002c36:	4b98      	ldr	r3, [pc, #608]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002c38:	499a      	ldr	r1, [pc, #616]	; (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8002c3a:	400a      	ands	r2, r1
 8002c3c:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002c3e:	4b96      	ldr	r3, [pc, #600]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002c40:	697a      	ldr	r2, [r7, #20]
 8002c42:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002c44:	697b      	ldr	r3, [r7, #20]
 8002c46:	2201      	movs	r2, #1
 8002c48:	4013      	ands	r3, r2
 8002c4a:	d016      	beq.n	8002c7a <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c4c:	f7fe ff26 	bl	8001a9c <HAL_GetTick>
 8002c50:	0003      	movs	r3, r0
 8002c52:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c54:	e00c      	b.n	8002c70 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c56:	f7fe ff21 	bl	8001a9c <HAL_GetTick>
 8002c5a:	0002      	movs	r2, r0
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	1ad3      	subs	r3, r2, r3
 8002c60:	4a91      	ldr	r2, [pc, #580]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d904      	bls.n	8002c70 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8002c66:	2313      	movs	r3, #19
 8002c68:	18fb      	adds	r3, r7, r3
 8002c6a:	2203      	movs	r2, #3
 8002c6c:	701a      	strb	r2, [r3, #0]
            break;
 8002c6e:	e004      	b.n	8002c7a <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c70:	4b89      	ldr	r3, [pc, #548]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002c72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c74:	2202      	movs	r2, #2
 8002c76:	4013      	ands	r3, r2
 8002c78:	d0ed      	beq.n	8002c56 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8002c7a:	2313      	movs	r3, #19
 8002c7c:	18fb      	adds	r3, r7, r3
 8002c7e:	781b      	ldrb	r3, [r3, #0]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d10a      	bne.n	8002c9a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002c84:	4b84      	ldr	r3, [pc, #528]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002c86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c88:	4a85      	ldr	r2, [pc, #532]	; (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8002c8a:	4013      	ands	r3, r2
 8002c8c:	0019      	movs	r1, r3
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c92:	4b81      	ldr	r3, [pc, #516]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002c94:	430a      	orrs	r2, r1
 8002c96:	65da      	str	r2, [r3, #92]	; 0x5c
 8002c98:	e00c      	b.n	8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002c9a:	2312      	movs	r3, #18
 8002c9c:	18fb      	adds	r3, r7, r3
 8002c9e:	2213      	movs	r2, #19
 8002ca0:	18ba      	adds	r2, r7, r2
 8002ca2:	7812      	ldrb	r2, [r2, #0]
 8002ca4:	701a      	strb	r2, [r3, #0]
 8002ca6:	e005      	b.n	8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ca8:	2312      	movs	r3, #18
 8002caa:	18fb      	adds	r3, r7, r3
 8002cac:	2213      	movs	r2, #19
 8002cae:	18ba      	adds	r2, r7, r2
 8002cb0:	7812      	ldrb	r2, [r2, #0]
 8002cb2:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002cb4:	2311      	movs	r3, #17
 8002cb6:	18fb      	adds	r3, r7, r3
 8002cb8:	781b      	ldrb	r3, [r3, #0]
 8002cba:	2b01      	cmp	r3, #1
 8002cbc:	d105      	bne.n	8002cca <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002cbe:	4b76      	ldr	r3, [pc, #472]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002cc0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002cc2:	4b75      	ldr	r3, [pc, #468]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002cc4:	4979      	ldr	r1, [pc, #484]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x350>)
 8002cc6:	400a      	ands	r2, r1
 8002cc8:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	2201      	movs	r2, #1
 8002cd0:	4013      	ands	r3, r2
 8002cd2:	d009      	beq.n	8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002cd4:	4b70      	ldr	r3, [pc, #448]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002cd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cd8:	2203      	movs	r2, #3
 8002cda:	4393      	bics	r3, r2
 8002cdc:	0019      	movs	r1, r3
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	685a      	ldr	r2, [r3, #4]
 8002ce2:	4b6d      	ldr	r3, [pc, #436]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002ce4:	430a      	orrs	r2, r1
 8002ce6:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	2202      	movs	r2, #2
 8002cee:	4013      	ands	r3, r2
 8002cf0:	d009      	beq.n	8002d06 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002cf2:	4b69      	ldr	r3, [pc, #420]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002cf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cf6:	220c      	movs	r2, #12
 8002cf8:	4393      	bics	r3, r2
 8002cfa:	0019      	movs	r1, r3
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	689a      	ldr	r2, [r3, #8]
 8002d00:	4b65      	ldr	r3, [pc, #404]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002d02:	430a      	orrs	r2, r1
 8002d04:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	2210      	movs	r2, #16
 8002d0c:	4013      	ands	r3, r2
 8002d0e:	d009      	beq.n	8002d24 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002d10:	4b61      	ldr	r3, [pc, #388]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002d12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d14:	4a66      	ldr	r2, [pc, #408]	; (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 8002d16:	4013      	ands	r3, r2
 8002d18:	0019      	movs	r1, r3
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	68da      	ldr	r2, [r3, #12]
 8002d1e:	4b5e      	ldr	r3, [pc, #376]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002d20:	430a      	orrs	r2, r1
 8002d22:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681a      	ldr	r2, [r3, #0]
 8002d28:	2380      	movs	r3, #128	; 0x80
 8002d2a:	009b      	lsls	r3, r3, #2
 8002d2c:	4013      	ands	r3, r2
 8002d2e:	d009      	beq.n	8002d44 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002d30:	4b59      	ldr	r3, [pc, #356]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002d32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d34:	4a5f      	ldr	r2, [pc, #380]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002d36:	4013      	ands	r3, r2
 8002d38:	0019      	movs	r1, r3
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	699a      	ldr	r2, [r3, #24]
 8002d3e:	4b56      	ldr	r3, [pc, #344]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002d40:	430a      	orrs	r2, r1
 8002d42:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681a      	ldr	r2, [r3, #0]
 8002d48:	2380      	movs	r3, #128	; 0x80
 8002d4a:	00db      	lsls	r3, r3, #3
 8002d4c:	4013      	ands	r3, r2
 8002d4e:	d009      	beq.n	8002d64 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002d50:	4b51      	ldr	r3, [pc, #324]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002d52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d54:	4a58      	ldr	r2, [pc, #352]	; (8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002d56:	4013      	ands	r3, r2
 8002d58:	0019      	movs	r1, r3
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	69da      	ldr	r2, [r3, #28]
 8002d5e:	4b4e      	ldr	r3, [pc, #312]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002d60:	430a      	orrs	r2, r1
 8002d62:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	2220      	movs	r2, #32
 8002d6a:	4013      	ands	r3, r2
 8002d6c:	d009      	beq.n	8002d82 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002d6e:	4b4a      	ldr	r3, [pc, #296]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002d70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d72:	4a52      	ldr	r2, [pc, #328]	; (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8002d74:	4013      	ands	r3, r2
 8002d76:	0019      	movs	r1, r3
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	691a      	ldr	r2, [r3, #16]
 8002d7c:	4b46      	ldr	r3, [pc, #280]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002d7e:	430a      	orrs	r2, r1
 8002d80:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681a      	ldr	r2, [r3, #0]
 8002d86:	2380      	movs	r3, #128	; 0x80
 8002d88:	01db      	lsls	r3, r3, #7
 8002d8a:	4013      	ands	r3, r2
 8002d8c:	d015      	beq.n	8002dba <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002d8e:	4b42      	ldr	r3, [pc, #264]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002d90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d92:	009b      	lsls	r3, r3, #2
 8002d94:	0899      	lsrs	r1, r3, #2
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6a1a      	ldr	r2, [r3, #32]
 8002d9a:	4b3f      	ldr	r3, [pc, #252]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002d9c:	430a      	orrs	r2, r1
 8002d9e:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6a1a      	ldr	r2, [r3, #32]
 8002da4:	2380      	movs	r3, #128	; 0x80
 8002da6:	05db      	lsls	r3, r3, #23
 8002da8:	429a      	cmp	r2, r3
 8002daa:	d106      	bne.n	8002dba <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002dac:	4b3a      	ldr	r3, [pc, #232]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002dae:	68da      	ldr	r2, [r3, #12]
 8002db0:	4b39      	ldr	r3, [pc, #228]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002db2:	2180      	movs	r1, #128	; 0x80
 8002db4:	0249      	lsls	r1, r1, #9
 8002db6:	430a      	orrs	r2, r1
 8002db8:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681a      	ldr	r2, [r3, #0]
 8002dbe:	2380      	movs	r3, #128	; 0x80
 8002dc0:	031b      	lsls	r3, r3, #12
 8002dc2:	4013      	ands	r3, r2
 8002dc4:	d009      	beq.n	8002dda <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002dc6:	4b34      	ldr	r3, [pc, #208]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002dc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dca:	2240      	movs	r2, #64	; 0x40
 8002dcc:	4393      	bics	r3, r2
 8002dce:	0019      	movs	r1, r3
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002dd4:	4b30      	ldr	r3, [pc, #192]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002dd6:	430a      	orrs	r2, r1
 8002dd8:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681a      	ldr	r2, [r3, #0]
 8002dde:	2380      	movs	r3, #128	; 0x80
 8002de0:	039b      	lsls	r3, r3, #14
 8002de2:	4013      	ands	r3, r2
 8002de4:	d016      	beq.n	8002e14 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002de6:	4b2c      	ldr	r3, [pc, #176]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002de8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dea:	4a35      	ldr	r2, [pc, #212]	; (8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8002dec:	4013      	ands	r3, r2
 8002dee:	0019      	movs	r1, r3
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002df4:	4b28      	ldr	r3, [pc, #160]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002df6:	430a      	orrs	r2, r1
 8002df8:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002dfe:	2380      	movs	r3, #128	; 0x80
 8002e00:	03db      	lsls	r3, r3, #15
 8002e02:	429a      	cmp	r2, r3
 8002e04:	d106      	bne.n	8002e14 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002e06:	4b24      	ldr	r3, [pc, #144]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002e08:	68da      	ldr	r2, [r3, #12]
 8002e0a:	4b23      	ldr	r3, [pc, #140]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002e0c:	2180      	movs	r1, #128	; 0x80
 8002e0e:	0449      	lsls	r1, r1, #17
 8002e10:	430a      	orrs	r2, r1
 8002e12:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681a      	ldr	r2, [r3, #0]
 8002e18:	2380      	movs	r3, #128	; 0x80
 8002e1a:	03db      	lsls	r3, r3, #15
 8002e1c:	4013      	ands	r3, r2
 8002e1e:	d016      	beq.n	8002e4e <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002e20:	4b1d      	ldr	r3, [pc, #116]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002e22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e24:	4a27      	ldr	r2, [pc, #156]	; (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 8002e26:	4013      	ands	r3, r2
 8002e28:	0019      	movs	r1, r3
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e2e:	4b1a      	ldr	r3, [pc, #104]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002e30:	430a      	orrs	r2, r1
 8002e32:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e38:	2380      	movs	r3, #128	; 0x80
 8002e3a:	045b      	lsls	r3, r3, #17
 8002e3c:	429a      	cmp	r2, r3
 8002e3e:	d106      	bne.n	8002e4e <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002e40:	4b15      	ldr	r3, [pc, #84]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002e42:	68da      	ldr	r2, [r3, #12]
 8002e44:	4b14      	ldr	r3, [pc, #80]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002e46:	2180      	movs	r1, #128	; 0x80
 8002e48:	0449      	lsls	r1, r1, #17
 8002e4a:	430a      	orrs	r2, r1
 8002e4c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681a      	ldr	r2, [r3, #0]
 8002e52:	2380      	movs	r3, #128	; 0x80
 8002e54:	011b      	lsls	r3, r3, #4
 8002e56:	4013      	ands	r3, r2
 8002e58:	d016      	beq.n	8002e88 <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8002e5a:	4b0f      	ldr	r3, [pc, #60]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002e5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e5e:	4a1a      	ldr	r2, [pc, #104]	; (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8002e60:	4013      	ands	r3, r2
 8002e62:	0019      	movs	r1, r3
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	695a      	ldr	r2, [r3, #20]
 8002e68:	4b0b      	ldr	r3, [pc, #44]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002e6a:	430a      	orrs	r2, r1
 8002e6c:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	695a      	ldr	r2, [r3, #20]
 8002e72:	2380      	movs	r3, #128	; 0x80
 8002e74:	01db      	lsls	r3, r3, #7
 8002e76:	429a      	cmp	r2, r3
 8002e78:	d106      	bne.n	8002e88 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002e7a:	4b07      	ldr	r3, [pc, #28]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002e7c:	68da      	ldr	r2, [r3, #12]
 8002e7e:	4b06      	ldr	r3, [pc, #24]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002e80:	2180      	movs	r1, #128	; 0x80
 8002e82:	0249      	lsls	r1, r1, #9
 8002e84:	430a      	orrs	r2, r1
 8002e86:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8002e88:	2312      	movs	r3, #18
 8002e8a:	18fb      	adds	r3, r7, r3
 8002e8c:	781b      	ldrb	r3, [r3, #0]
}
 8002e8e:	0018      	movs	r0, r3
 8002e90:	46bd      	mov	sp, r7
 8002e92:	b006      	add	sp, #24
 8002e94:	bd80      	pop	{r7, pc}
 8002e96:	46c0      	nop			; (mov r8, r8)
 8002e98:	40021000 	.word	0x40021000
 8002e9c:	40007000 	.word	0x40007000
 8002ea0:	fffffcff 	.word	0xfffffcff
 8002ea4:	fffeffff 	.word	0xfffeffff
 8002ea8:	00001388 	.word	0x00001388
 8002eac:	efffffff 	.word	0xefffffff
 8002eb0:	fffff3ff 	.word	0xfffff3ff
 8002eb4:	fff3ffff 	.word	0xfff3ffff
 8002eb8:	ffcfffff 	.word	0xffcfffff
 8002ebc:	ffffcfff 	.word	0xffffcfff
 8002ec0:	ffbfffff 	.word	0xffbfffff
 8002ec4:	feffffff 	.word	0xfeffffff
 8002ec8:	ffff3fff 	.word	0xffff3fff

08002ecc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b084      	sub	sp, #16
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d101      	bne.n	8002ede <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002eda:	2301      	movs	r3, #1
 8002edc:	e0a8      	b.n	8003030 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d109      	bne.n	8002efa <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	685a      	ldr	r2, [r3, #4]
 8002eea:	2382      	movs	r3, #130	; 0x82
 8002eec:	005b      	lsls	r3, r3, #1
 8002eee:	429a      	cmp	r2, r3
 8002ef0:	d009      	beq.n	8002f06 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	61da      	str	r2, [r3, #28]
 8002ef8:	e005      	b.n	8002f06 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2200      	movs	r2, #0
 8002efe:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2200      	movs	r2, #0
 8002f04:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2200      	movs	r2, #0
 8002f0a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	225d      	movs	r2, #93	; 0x5d
 8002f10:	5c9b      	ldrb	r3, [r3, r2]
 8002f12:	b2db      	uxtb	r3, r3
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d107      	bne.n	8002f28 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	225c      	movs	r2, #92	; 0x5c
 8002f1c:	2100      	movs	r1, #0
 8002f1e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	0018      	movs	r0, r3
 8002f24:	f000 f8b3 	bl	800308e <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	225d      	movs	r2, #93	; 0x5d
 8002f2c:	2102      	movs	r1, #2
 8002f2e:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	681a      	ldr	r2, [r3, #0]
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	2140      	movs	r1, #64	; 0x40
 8002f3c:	438a      	bics	r2, r1
 8002f3e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	68da      	ldr	r2, [r3, #12]
 8002f44:	23e0      	movs	r3, #224	; 0xe0
 8002f46:	00db      	lsls	r3, r3, #3
 8002f48:	429a      	cmp	r2, r3
 8002f4a:	d902      	bls.n	8002f52 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	60fb      	str	r3, [r7, #12]
 8002f50:	e002      	b.n	8002f58 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002f52:	2380      	movs	r3, #128	; 0x80
 8002f54:	015b      	lsls	r3, r3, #5
 8002f56:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	68da      	ldr	r2, [r3, #12]
 8002f5c:	23f0      	movs	r3, #240	; 0xf0
 8002f5e:	011b      	lsls	r3, r3, #4
 8002f60:	429a      	cmp	r2, r3
 8002f62:	d008      	beq.n	8002f76 <HAL_SPI_Init+0xaa>
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	68da      	ldr	r2, [r3, #12]
 8002f68:	23e0      	movs	r3, #224	; 0xe0
 8002f6a:	00db      	lsls	r3, r3, #3
 8002f6c:	429a      	cmp	r2, r3
 8002f6e:	d002      	beq.n	8002f76 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2200      	movs	r2, #0
 8002f74:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	685a      	ldr	r2, [r3, #4]
 8002f7a:	2382      	movs	r3, #130	; 0x82
 8002f7c:	005b      	lsls	r3, r3, #1
 8002f7e:	401a      	ands	r2, r3
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6899      	ldr	r1, [r3, #8]
 8002f84:	2384      	movs	r3, #132	; 0x84
 8002f86:	021b      	lsls	r3, r3, #8
 8002f88:	400b      	ands	r3, r1
 8002f8a:	431a      	orrs	r2, r3
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	691b      	ldr	r3, [r3, #16]
 8002f90:	2102      	movs	r1, #2
 8002f92:	400b      	ands	r3, r1
 8002f94:	431a      	orrs	r2, r3
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	695b      	ldr	r3, [r3, #20]
 8002f9a:	2101      	movs	r1, #1
 8002f9c:	400b      	ands	r3, r1
 8002f9e:	431a      	orrs	r2, r3
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6999      	ldr	r1, [r3, #24]
 8002fa4:	2380      	movs	r3, #128	; 0x80
 8002fa6:	009b      	lsls	r3, r3, #2
 8002fa8:	400b      	ands	r3, r1
 8002faa:	431a      	orrs	r2, r3
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	69db      	ldr	r3, [r3, #28]
 8002fb0:	2138      	movs	r1, #56	; 0x38
 8002fb2:	400b      	ands	r3, r1
 8002fb4:	431a      	orrs	r2, r3
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6a1b      	ldr	r3, [r3, #32]
 8002fba:	2180      	movs	r1, #128	; 0x80
 8002fbc:	400b      	ands	r3, r1
 8002fbe:	431a      	orrs	r2, r3
 8002fc0:	0011      	movs	r1, r2
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002fc6:	2380      	movs	r3, #128	; 0x80
 8002fc8:	019b      	lsls	r3, r3, #6
 8002fca:	401a      	ands	r2, r3
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	430a      	orrs	r2, r1
 8002fd2:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	699b      	ldr	r3, [r3, #24]
 8002fd8:	0c1b      	lsrs	r3, r3, #16
 8002fda:	2204      	movs	r2, #4
 8002fdc:	401a      	ands	r2, r3
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fe2:	2110      	movs	r1, #16
 8002fe4:	400b      	ands	r3, r1
 8002fe6:	431a      	orrs	r2, r3
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fec:	2108      	movs	r1, #8
 8002fee:	400b      	ands	r3, r1
 8002ff0:	431a      	orrs	r2, r3
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	68d9      	ldr	r1, [r3, #12]
 8002ff6:	23f0      	movs	r3, #240	; 0xf0
 8002ff8:	011b      	lsls	r3, r3, #4
 8002ffa:	400b      	ands	r3, r1
 8002ffc:	431a      	orrs	r2, r3
 8002ffe:	0011      	movs	r1, r2
 8003000:	68fa      	ldr	r2, [r7, #12]
 8003002:	2380      	movs	r3, #128	; 0x80
 8003004:	015b      	lsls	r3, r3, #5
 8003006:	401a      	ands	r2, r3
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	430a      	orrs	r2, r1
 800300e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	69da      	ldr	r2, [r3, #28]
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4907      	ldr	r1, [pc, #28]	; (8003038 <HAL_SPI_Init+0x16c>)
 800301c:	400a      	ands	r2, r1
 800301e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2200      	movs	r2, #0
 8003024:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	225d      	movs	r2, #93	; 0x5d
 800302a:	2101      	movs	r1, #1
 800302c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800302e:	2300      	movs	r3, #0
}
 8003030:	0018      	movs	r0, r3
 8003032:	46bd      	mov	sp, r7
 8003034:	b004      	add	sp, #16
 8003036:	bd80      	pop	{r7, pc}
 8003038:	fffff7ff 	.word	0xfffff7ff

0800303c <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b082      	sub	sp, #8
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d101      	bne.n	800304e <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 800304a:	2301      	movs	r3, #1
 800304c:	e01b      	b.n	8003086 <HAL_SPI_DeInit+0x4a>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	225d      	movs	r2, #93	; 0x5d
 8003052:	2102      	movs	r1, #2
 8003054:	5499      	strb	r1, [r3, r2]

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	681a      	ldr	r2, [r3, #0]
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	2140      	movs	r1, #64	; 0x40
 8003062:	438a      	bics	r2, r1
 8003064:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	0018      	movs	r0, r3
 800306a:	f000 f818 	bl	800309e <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2200      	movs	r2, #0
 8003072:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_RESET;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	225d      	movs	r2, #93	; 0x5d
 8003078:	2100      	movs	r1, #0
 800307a:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	225c      	movs	r2, #92	; 0x5c
 8003080:	2100      	movs	r1, #0
 8003082:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003084:	2300      	movs	r3, #0
}
 8003086:	0018      	movs	r0, r3
 8003088:	46bd      	mov	sp, r7
 800308a:	b002      	add	sp, #8
 800308c:	bd80      	pop	{r7, pc}

0800308e <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 800308e:	b580      	push	{r7, lr}
 8003090:	b082      	sub	sp, #8
 8003092:	af00      	add	r7, sp, #0
 8003094:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 8003096:	46c0      	nop			; (mov r8, r8)
 8003098:	46bd      	mov	sp, r7
 800309a:	b002      	add	sp, #8
 800309c:	bd80      	pop	{r7, pc}

0800309e <HAL_SPI_MspDeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspDeInit(SPI_HandleTypeDef *hspi)
{
 800309e:	b580      	push	{r7, lr}
 80030a0:	b082      	sub	sp, #8
 80030a2:	af00      	add	r7, sp, #0
 80030a4:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspDeInit should be implemented in the user file
   */
}
 80030a6:	46c0      	nop			; (mov r8, r8)
 80030a8:	46bd      	mov	sp, r7
 80030aa:	b002      	add	sp, #8
 80030ac:	bd80      	pop	{r7, pc}

080030ae <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030ae:	b580      	push	{r7, lr}
 80030b0:	b088      	sub	sp, #32
 80030b2:	af00      	add	r7, sp, #0
 80030b4:	60f8      	str	r0, [r7, #12]
 80030b6:	60b9      	str	r1, [r7, #8]
 80030b8:	603b      	str	r3, [r7, #0]
 80030ba:	1dbb      	adds	r3, r7, #6
 80030bc:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80030be:	231f      	movs	r3, #31
 80030c0:	18fb      	adds	r3, r7, r3
 80030c2:	2200      	movs	r2, #0
 80030c4:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	225c      	movs	r2, #92	; 0x5c
 80030ca:	5c9b      	ldrb	r3, [r3, r2]
 80030cc:	2b01      	cmp	r3, #1
 80030ce:	d101      	bne.n	80030d4 <HAL_SPI_Transmit+0x26>
 80030d0:	2302      	movs	r3, #2
 80030d2:	e140      	b.n	8003356 <HAL_SPI_Transmit+0x2a8>
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	225c      	movs	r2, #92	; 0x5c
 80030d8:	2101      	movs	r1, #1
 80030da:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80030dc:	f7fe fcde 	bl	8001a9c <HAL_GetTick>
 80030e0:	0003      	movs	r3, r0
 80030e2:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80030e4:	2316      	movs	r3, #22
 80030e6:	18fb      	adds	r3, r7, r3
 80030e8:	1dba      	adds	r2, r7, #6
 80030ea:	8812      	ldrh	r2, [r2, #0]
 80030ec:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	225d      	movs	r2, #93	; 0x5d
 80030f2:	5c9b      	ldrb	r3, [r3, r2]
 80030f4:	b2db      	uxtb	r3, r3
 80030f6:	2b01      	cmp	r3, #1
 80030f8:	d004      	beq.n	8003104 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 80030fa:	231f      	movs	r3, #31
 80030fc:	18fb      	adds	r3, r7, r3
 80030fe:	2202      	movs	r2, #2
 8003100:	701a      	strb	r2, [r3, #0]
    goto error;
 8003102:	e11d      	b.n	8003340 <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 8003104:	68bb      	ldr	r3, [r7, #8]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d003      	beq.n	8003112 <HAL_SPI_Transmit+0x64>
 800310a:	1dbb      	adds	r3, r7, #6
 800310c:	881b      	ldrh	r3, [r3, #0]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d104      	bne.n	800311c <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8003112:	231f      	movs	r3, #31
 8003114:	18fb      	adds	r3, r7, r3
 8003116:	2201      	movs	r2, #1
 8003118:	701a      	strb	r2, [r3, #0]
    goto error;
 800311a:	e111      	b.n	8003340 <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	225d      	movs	r2, #93	; 0x5d
 8003120:	2103      	movs	r1, #3
 8003122:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	2200      	movs	r2, #0
 8003128:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	68ba      	ldr	r2, [r7, #8]
 800312e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	1dba      	adds	r2, r7, #6
 8003134:	8812      	ldrh	r2, [r2, #0]
 8003136:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	1dba      	adds	r2, r7, #6
 800313c:	8812      	ldrh	r2, [r2, #0]
 800313e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	2200      	movs	r2, #0
 8003144:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	2244      	movs	r2, #68	; 0x44
 800314a:	2100      	movs	r1, #0
 800314c:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	2246      	movs	r2, #70	; 0x46
 8003152:	2100      	movs	r1, #0
 8003154:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	2200      	movs	r2, #0
 800315a:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	2200      	movs	r2, #0
 8003160:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	689a      	ldr	r2, [r3, #8]
 8003166:	2380      	movs	r3, #128	; 0x80
 8003168:	021b      	lsls	r3, r3, #8
 800316a:	429a      	cmp	r2, r3
 800316c:	d110      	bne.n	8003190 <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	681a      	ldr	r2, [r3, #0]
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	2140      	movs	r1, #64	; 0x40
 800317a:	438a      	bics	r2, r1
 800317c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	681a      	ldr	r2, [r3, #0]
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	2180      	movs	r1, #128	; 0x80
 800318a:	01c9      	lsls	r1, r1, #7
 800318c:	430a      	orrs	r2, r1
 800318e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	2240      	movs	r2, #64	; 0x40
 8003198:	4013      	ands	r3, r2
 800319a:	2b40      	cmp	r3, #64	; 0x40
 800319c:	d007      	beq.n	80031ae <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	681a      	ldr	r2, [r3, #0]
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	2140      	movs	r1, #64	; 0x40
 80031aa:	430a      	orrs	r2, r1
 80031ac:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	68da      	ldr	r2, [r3, #12]
 80031b2:	23e0      	movs	r3, #224	; 0xe0
 80031b4:	00db      	lsls	r3, r3, #3
 80031b6:	429a      	cmp	r2, r3
 80031b8:	d94e      	bls.n	8003258 <HAL_SPI_Transmit+0x1aa>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d004      	beq.n	80031cc <HAL_SPI_Transmit+0x11e>
 80031c2:	2316      	movs	r3, #22
 80031c4:	18fb      	adds	r3, r7, r3
 80031c6:	881b      	ldrh	r3, [r3, #0]
 80031c8:	2b01      	cmp	r3, #1
 80031ca:	d13f      	bne.n	800324c <HAL_SPI_Transmit+0x19e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031d0:	881a      	ldrh	r2, [r3, #0]
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031dc:	1c9a      	adds	r2, r3, #2
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80031e6:	b29b      	uxth	r3, r3
 80031e8:	3b01      	subs	r3, #1
 80031ea:	b29a      	uxth	r2, r3
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80031f0:	e02c      	b.n	800324c <HAL_SPI_Transmit+0x19e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	689b      	ldr	r3, [r3, #8]
 80031f8:	2202      	movs	r2, #2
 80031fa:	4013      	ands	r3, r2
 80031fc:	2b02      	cmp	r3, #2
 80031fe:	d112      	bne.n	8003226 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003204:	881a      	ldrh	r2, [r3, #0]
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003210:	1c9a      	adds	r2, r3, #2
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800321a:	b29b      	uxth	r3, r3
 800321c:	3b01      	subs	r3, #1
 800321e:	b29a      	uxth	r2, r3
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003224:	e012      	b.n	800324c <HAL_SPI_Transmit+0x19e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003226:	f7fe fc39 	bl	8001a9c <HAL_GetTick>
 800322a:	0002      	movs	r2, r0
 800322c:	69bb      	ldr	r3, [r7, #24]
 800322e:	1ad3      	subs	r3, r2, r3
 8003230:	683a      	ldr	r2, [r7, #0]
 8003232:	429a      	cmp	r2, r3
 8003234:	d802      	bhi.n	800323c <HAL_SPI_Transmit+0x18e>
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	3301      	adds	r3, #1
 800323a:	d102      	bne.n	8003242 <HAL_SPI_Transmit+0x194>
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d104      	bne.n	800324c <HAL_SPI_Transmit+0x19e>
        {
          errorcode = HAL_TIMEOUT;
 8003242:	231f      	movs	r3, #31
 8003244:	18fb      	adds	r3, r7, r3
 8003246:	2203      	movs	r2, #3
 8003248:	701a      	strb	r2, [r3, #0]
          goto error;
 800324a:	e079      	b.n	8003340 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003250:	b29b      	uxth	r3, r3
 8003252:	2b00      	cmp	r3, #0
 8003254:	d1cd      	bne.n	80031f2 <HAL_SPI_Transmit+0x144>
 8003256:	e04f      	b.n	80032f8 <HAL_SPI_Transmit+0x24a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d004      	beq.n	800326a <HAL_SPI_Transmit+0x1bc>
 8003260:	2316      	movs	r3, #22
 8003262:	18fb      	adds	r3, r7, r3
 8003264:	881b      	ldrh	r3, [r3, #0]
 8003266:	2b01      	cmp	r3, #1
 8003268:	d141      	bne.n	80032ee <HAL_SPI_Transmit+0x240>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	330c      	adds	r3, #12
 8003274:	7812      	ldrb	r2, [r2, #0]
 8003276:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800327c:	1c5a      	adds	r2, r3, #1
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003286:	b29b      	uxth	r3, r3
 8003288:	3b01      	subs	r3, #1
 800328a:	b29a      	uxth	r2, r3
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 8003290:	e02d      	b.n	80032ee <HAL_SPI_Transmit+0x240>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	689b      	ldr	r3, [r3, #8]
 8003298:	2202      	movs	r2, #2
 800329a:	4013      	ands	r3, r2
 800329c:	2b02      	cmp	r3, #2
 800329e:	d113      	bne.n	80032c8 <HAL_SPI_Transmit+0x21a>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	330c      	adds	r3, #12
 80032aa:	7812      	ldrb	r2, [r2, #0]
 80032ac:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032b2:	1c5a      	adds	r2, r3, #1
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032bc:	b29b      	uxth	r3, r3
 80032be:	3b01      	subs	r3, #1
 80032c0:	b29a      	uxth	r2, r3
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80032c6:	e012      	b.n	80032ee <HAL_SPI_Transmit+0x240>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80032c8:	f7fe fbe8 	bl	8001a9c <HAL_GetTick>
 80032cc:	0002      	movs	r2, r0
 80032ce:	69bb      	ldr	r3, [r7, #24]
 80032d0:	1ad3      	subs	r3, r2, r3
 80032d2:	683a      	ldr	r2, [r7, #0]
 80032d4:	429a      	cmp	r2, r3
 80032d6:	d802      	bhi.n	80032de <HAL_SPI_Transmit+0x230>
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	3301      	adds	r3, #1
 80032dc:	d102      	bne.n	80032e4 <HAL_SPI_Transmit+0x236>
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d104      	bne.n	80032ee <HAL_SPI_Transmit+0x240>
        {
          errorcode = HAL_TIMEOUT;
 80032e4:	231f      	movs	r3, #31
 80032e6:	18fb      	adds	r3, r7, r3
 80032e8:	2203      	movs	r2, #3
 80032ea:	701a      	strb	r2, [r3, #0]
          goto error;
 80032ec:	e028      	b.n	8003340 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032f2:	b29b      	uxth	r3, r3
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d1cc      	bne.n	8003292 <HAL_SPI_Transmit+0x1e4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80032f8:	69ba      	ldr	r2, [r7, #24]
 80032fa:	6839      	ldr	r1, [r7, #0]
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	0018      	movs	r0, r3
 8003300:	f000 fce6 	bl	8003cd0 <SPI_EndRxTxTransaction>
 8003304:	1e03      	subs	r3, r0, #0
 8003306:	d002      	beq.n	800330e <HAL_SPI_Transmit+0x260>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	2220      	movs	r2, #32
 800330c:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	689b      	ldr	r3, [r3, #8]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d10a      	bne.n	800332c <HAL_SPI_Transmit+0x27e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003316:	2300      	movs	r3, #0
 8003318:	613b      	str	r3, [r7, #16]
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	68db      	ldr	r3, [r3, #12]
 8003320:	613b      	str	r3, [r7, #16]
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	689b      	ldr	r3, [r3, #8]
 8003328:	613b      	str	r3, [r7, #16]
 800332a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003330:	2b00      	cmp	r3, #0
 8003332:	d004      	beq.n	800333e <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 8003334:	231f      	movs	r3, #31
 8003336:	18fb      	adds	r3, r7, r3
 8003338:	2201      	movs	r2, #1
 800333a:	701a      	strb	r2, [r3, #0]
 800333c:	e000      	b.n	8003340 <HAL_SPI_Transmit+0x292>
  }

error:
 800333e:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	225d      	movs	r2, #93	; 0x5d
 8003344:	2101      	movs	r1, #1
 8003346:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	225c      	movs	r2, #92	; 0x5c
 800334c:	2100      	movs	r1, #0
 800334e:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8003350:	231f      	movs	r3, #31
 8003352:	18fb      	adds	r3, r7, r3
 8003354:	781b      	ldrb	r3, [r3, #0]
}
 8003356:	0018      	movs	r0, r3
 8003358:	46bd      	mov	sp, r7
 800335a:	b008      	add	sp, #32
 800335c:	bd80      	pop	{r7, pc}
	...

08003360 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003360:	b590      	push	{r4, r7, lr}
 8003362:	b089      	sub	sp, #36	; 0x24
 8003364:	af02      	add	r7, sp, #8
 8003366:	60f8      	str	r0, [r7, #12]
 8003368:	60b9      	str	r1, [r7, #8]
 800336a:	603b      	str	r3, [r7, #0]
 800336c:	1dbb      	adds	r3, r7, #6
 800336e:	801a      	strh	r2, [r3, #0]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003370:	2317      	movs	r3, #23
 8003372:	18fb      	adds	r3, r7, r3
 8003374:	2200      	movs	r2, #0
 8003376:	701a      	strb	r2, [r3, #0]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	685a      	ldr	r2, [r3, #4]
 800337c:	2382      	movs	r3, #130	; 0x82
 800337e:	005b      	lsls	r3, r3, #1
 8003380:	429a      	cmp	r2, r3
 8003382:	d113      	bne.n	80033ac <HAL_SPI_Receive+0x4c>
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	689b      	ldr	r3, [r3, #8]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d10f      	bne.n	80033ac <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	225d      	movs	r2, #93	; 0x5d
 8003390:	2104      	movs	r1, #4
 8003392:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003394:	1dbb      	adds	r3, r7, #6
 8003396:	881c      	ldrh	r4, [r3, #0]
 8003398:	68ba      	ldr	r2, [r7, #8]
 800339a:	68b9      	ldr	r1, [r7, #8]
 800339c:	68f8      	ldr	r0, [r7, #12]
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	9300      	str	r3, [sp, #0]
 80033a2:	0023      	movs	r3, r4
 80033a4:	f000 f928 	bl	80035f8 <HAL_SPI_TransmitReceive>
 80033a8:	0003      	movs	r3, r0
 80033aa:	e11c      	b.n	80035e6 <HAL_SPI_Receive+0x286>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	225c      	movs	r2, #92	; 0x5c
 80033b0:	5c9b      	ldrb	r3, [r3, r2]
 80033b2:	2b01      	cmp	r3, #1
 80033b4:	d101      	bne.n	80033ba <HAL_SPI_Receive+0x5a>
 80033b6:	2302      	movs	r3, #2
 80033b8:	e115      	b.n	80035e6 <HAL_SPI_Receive+0x286>
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	225c      	movs	r2, #92	; 0x5c
 80033be:	2101      	movs	r1, #1
 80033c0:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80033c2:	f7fe fb6b 	bl	8001a9c <HAL_GetTick>
 80033c6:	0003      	movs	r3, r0
 80033c8:	613b      	str	r3, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	225d      	movs	r2, #93	; 0x5d
 80033ce:	5c9b      	ldrb	r3, [r3, r2]
 80033d0:	b2db      	uxtb	r3, r3
 80033d2:	2b01      	cmp	r3, #1
 80033d4:	d004      	beq.n	80033e0 <HAL_SPI_Receive+0x80>
  {
    errorcode = HAL_BUSY;
 80033d6:	2317      	movs	r3, #23
 80033d8:	18fb      	adds	r3, r7, r3
 80033da:	2202      	movs	r2, #2
 80033dc:	701a      	strb	r2, [r3, #0]
    goto error;
 80033de:	e0f7      	b.n	80035d0 <HAL_SPI_Receive+0x270>
  }

  if ((pData == NULL) || (Size == 0U))
 80033e0:	68bb      	ldr	r3, [r7, #8]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d003      	beq.n	80033ee <HAL_SPI_Receive+0x8e>
 80033e6:	1dbb      	adds	r3, r7, #6
 80033e8:	881b      	ldrh	r3, [r3, #0]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d104      	bne.n	80033f8 <HAL_SPI_Receive+0x98>
  {
    errorcode = HAL_ERROR;
 80033ee:	2317      	movs	r3, #23
 80033f0:	18fb      	adds	r3, r7, r3
 80033f2:	2201      	movs	r2, #1
 80033f4:	701a      	strb	r2, [r3, #0]
    goto error;
 80033f6:	e0eb      	b.n	80035d0 <HAL_SPI_Receive+0x270>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	225d      	movs	r2, #93	; 0x5d
 80033fc:	2104      	movs	r1, #4
 80033fe:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	2200      	movs	r2, #0
 8003404:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	68ba      	ldr	r2, [r7, #8]
 800340a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	1dba      	adds	r2, r7, #6
 8003410:	2144      	movs	r1, #68	; 0x44
 8003412:	8812      	ldrh	r2, [r2, #0]
 8003414:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	1dba      	adds	r2, r7, #6
 800341a:	2146      	movs	r1, #70	; 0x46
 800341c:	8812      	ldrh	r2, [r2, #0]
 800341e:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	2200      	movs	r2, #0
 8003424:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	2200      	movs	r2, #0
 800342a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	2200      	movs	r2, #0
 8003430:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	2200      	movs	r2, #0
 8003436:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	2200      	movs	r2, #0
 800343c:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	68da      	ldr	r2, [r3, #12]
 8003442:	23e0      	movs	r3, #224	; 0xe0
 8003444:	00db      	lsls	r3, r3, #3
 8003446:	429a      	cmp	r2, r3
 8003448:	d908      	bls.n	800345c <HAL_SPI_Receive+0xfc>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	685a      	ldr	r2, [r3, #4]
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4966      	ldr	r1, [pc, #408]	; (80035f0 <HAL_SPI_Receive+0x290>)
 8003456:	400a      	ands	r2, r1
 8003458:	605a      	str	r2, [r3, #4]
 800345a:	e008      	b.n	800346e <HAL_SPI_Receive+0x10e>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	685a      	ldr	r2, [r3, #4]
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	2180      	movs	r1, #128	; 0x80
 8003468:	0149      	lsls	r1, r1, #5
 800346a:	430a      	orrs	r2, r1
 800346c:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	689a      	ldr	r2, [r3, #8]
 8003472:	2380      	movs	r3, #128	; 0x80
 8003474:	021b      	lsls	r3, r3, #8
 8003476:	429a      	cmp	r2, r3
 8003478:	d10f      	bne.n	800349a <HAL_SPI_Receive+0x13a>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	681a      	ldr	r2, [r3, #0]
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	2140      	movs	r1, #64	; 0x40
 8003486:	438a      	bics	r2, r1
 8003488:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	681a      	ldr	r2, [r3, #0]
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4957      	ldr	r1, [pc, #348]	; (80035f4 <HAL_SPI_Receive+0x294>)
 8003496:	400a      	ands	r2, r1
 8003498:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	2240      	movs	r2, #64	; 0x40
 80034a2:	4013      	ands	r3, r2
 80034a4:	2b40      	cmp	r3, #64	; 0x40
 80034a6:	d007      	beq.n	80034b8 <HAL_SPI_Receive+0x158>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	681a      	ldr	r2, [r3, #0]
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	2140      	movs	r1, #64	; 0x40
 80034b4:	430a      	orrs	r2, r1
 80034b6:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	68da      	ldr	r2, [r3, #12]
 80034bc:	23e0      	movs	r3, #224	; 0xe0
 80034be:	00db      	lsls	r3, r3, #3
 80034c0:	429a      	cmp	r2, r3
 80034c2:	d900      	bls.n	80034c6 <HAL_SPI_Receive+0x166>
 80034c4:	e069      	b.n	800359a <HAL_SPI_Receive+0x23a>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80034c6:	e031      	b.n	800352c <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	689b      	ldr	r3, [r3, #8]
 80034ce:	2201      	movs	r2, #1
 80034d0:	4013      	ands	r3, r2
 80034d2:	2b01      	cmp	r3, #1
 80034d4:	d117      	bne.n	8003506 <HAL_SPI_Receive+0x1a6>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	330c      	adds	r3, #12
 80034dc:	001a      	movs	r2, r3
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034e2:	7812      	ldrb	r2, [r2, #0]
 80034e4:	b2d2      	uxtb	r2, r2
 80034e6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ec:	1c5a      	adds	r2, r3, #1
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	2246      	movs	r2, #70	; 0x46
 80034f6:	5a9b      	ldrh	r3, [r3, r2]
 80034f8:	b29b      	uxth	r3, r3
 80034fa:	3b01      	subs	r3, #1
 80034fc:	b299      	uxth	r1, r3
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	2246      	movs	r2, #70	; 0x46
 8003502:	5299      	strh	r1, [r3, r2]
 8003504:	e012      	b.n	800352c <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003506:	f7fe fac9 	bl	8001a9c <HAL_GetTick>
 800350a:	0002      	movs	r2, r0
 800350c:	693b      	ldr	r3, [r7, #16]
 800350e:	1ad3      	subs	r3, r2, r3
 8003510:	683a      	ldr	r2, [r7, #0]
 8003512:	429a      	cmp	r2, r3
 8003514:	d802      	bhi.n	800351c <HAL_SPI_Receive+0x1bc>
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	3301      	adds	r3, #1
 800351a:	d102      	bne.n	8003522 <HAL_SPI_Receive+0x1c2>
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d104      	bne.n	800352c <HAL_SPI_Receive+0x1cc>
        {
          errorcode = HAL_TIMEOUT;
 8003522:	2317      	movs	r3, #23
 8003524:	18fb      	adds	r3, r7, r3
 8003526:	2203      	movs	r2, #3
 8003528:	701a      	strb	r2, [r3, #0]
          goto error;
 800352a:	e051      	b.n	80035d0 <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	2246      	movs	r2, #70	; 0x46
 8003530:	5a9b      	ldrh	r3, [r3, r2]
 8003532:	b29b      	uxth	r3, r3
 8003534:	2b00      	cmp	r3, #0
 8003536:	d1c7      	bne.n	80034c8 <HAL_SPI_Receive+0x168>
 8003538:	e035      	b.n	80035a6 <HAL_SPI_Receive+0x246>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	689b      	ldr	r3, [r3, #8]
 8003540:	2201      	movs	r2, #1
 8003542:	4013      	ands	r3, r2
 8003544:	2b01      	cmp	r3, #1
 8003546:	d115      	bne.n	8003574 <HAL_SPI_Receive+0x214>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	68da      	ldr	r2, [r3, #12]
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003552:	b292      	uxth	r2, r2
 8003554:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800355a:	1c9a      	adds	r2, r3, #2
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	2246      	movs	r2, #70	; 0x46
 8003564:	5a9b      	ldrh	r3, [r3, r2]
 8003566:	b29b      	uxth	r3, r3
 8003568:	3b01      	subs	r3, #1
 800356a:	b299      	uxth	r1, r3
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	2246      	movs	r2, #70	; 0x46
 8003570:	5299      	strh	r1, [r3, r2]
 8003572:	e012      	b.n	800359a <HAL_SPI_Receive+0x23a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003574:	f7fe fa92 	bl	8001a9c <HAL_GetTick>
 8003578:	0002      	movs	r2, r0
 800357a:	693b      	ldr	r3, [r7, #16]
 800357c:	1ad3      	subs	r3, r2, r3
 800357e:	683a      	ldr	r2, [r7, #0]
 8003580:	429a      	cmp	r2, r3
 8003582:	d802      	bhi.n	800358a <HAL_SPI_Receive+0x22a>
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	3301      	adds	r3, #1
 8003588:	d102      	bne.n	8003590 <HAL_SPI_Receive+0x230>
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d104      	bne.n	800359a <HAL_SPI_Receive+0x23a>
        {
          errorcode = HAL_TIMEOUT;
 8003590:	2317      	movs	r3, #23
 8003592:	18fb      	adds	r3, r7, r3
 8003594:	2203      	movs	r2, #3
 8003596:	701a      	strb	r2, [r3, #0]
          goto error;
 8003598:	e01a      	b.n	80035d0 <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	2246      	movs	r2, #70	; 0x46
 800359e:	5a9b      	ldrh	r3, [r3, r2]
 80035a0:	b29b      	uxth	r3, r3
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d1c9      	bne.n	800353a <HAL_SPI_Receive+0x1da>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80035a6:	693a      	ldr	r2, [r7, #16]
 80035a8:	6839      	ldr	r1, [r7, #0]
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	0018      	movs	r0, r3
 80035ae:	f000 fb31 	bl	8003c14 <SPI_EndRxTransaction>
 80035b2:	1e03      	subs	r3, r0, #0
 80035b4:	d002      	beq.n	80035bc <HAL_SPI_Receive+0x25c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	2220      	movs	r2, #32
 80035ba:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d004      	beq.n	80035ce <HAL_SPI_Receive+0x26e>
  {
    errorcode = HAL_ERROR;
 80035c4:	2317      	movs	r3, #23
 80035c6:	18fb      	adds	r3, r7, r3
 80035c8:	2201      	movs	r2, #1
 80035ca:	701a      	strb	r2, [r3, #0]
 80035cc:	e000      	b.n	80035d0 <HAL_SPI_Receive+0x270>
  }

error :
 80035ce:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	225d      	movs	r2, #93	; 0x5d
 80035d4:	2101      	movs	r1, #1
 80035d6:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	225c      	movs	r2, #92	; 0x5c
 80035dc:	2100      	movs	r1, #0
 80035de:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80035e0:	2317      	movs	r3, #23
 80035e2:	18fb      	adds	r3, r7, r3
 80035e4:	781b      	ldrb	r3, [r3, #0]
}
 80035e6:	0018      	movs	r0, r3
 80035e8:	46bd      	mov	sp, r7
 80035ea:	b007      	add	sp, #28
 80035ec:	bd90      	pop	{r4, r7, pc}
 80035ee:	46c0      	nop			; (mov r8, r8)
 80035f0:	ffffefff 	.word	0xffffefff
 80035f4:	ffffbfff 	.word	0xffffbfff

080035f8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b08a      	sub	sp, #40	; 0x28
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	60f8      	str	r0, [r7, #12]
 8003600:	60b9      	str	r1, [r7, #8]
 8003602:	607a      	str	r2, [r7, #4]
 8003604:	001a      	movs	r2, r3
 8003606:	1cbb      	adds	r3, r7, #2
 8003608:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800360a:	2301      	movs	r3, #1
 800360c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800360e:	2323      	movs	r3, #35	; 0x23
 8003610:	18fb      	adds	r3, r7, r3
 8003612:	2200      	movs	r2, #0
 8003614:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	225c      	movs	r2, #92	; 0x5c
 800361a:	5c9b      	ldrb	r3, [r3, r2]
 800361c:	2b01      	cmp	r3, #1
 800361e:	d101      	bne.n	8003624 <HAL_SPI_TransmitReceive+0x2c>
 8003620:	2302      	movs	r3, #2
 8003622:	e1b5      	b.n	8003990 <HAL_SPI_TransmitReceive+0x398>
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	225c      	movs	r2, #92	; 0x5c
 8003628:	2101      	movs	r1, #1
 800362a:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800362c:	f7fe fa36 	bl	8001a9c <HAL_GetTick>
 8003630:	0003      	movs	r3, r0
 8003632:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003634:	201b      	movs	r0, #27
 8003636:	183b      	adds	r3, r7, r0
 8003638:	68fa      	ldr	r2, [r7, #12]
 800363a:	215d      	movs	r1, #93	; 0x5d
 800363c:	5c52      	ldrb	r2, [r2, r1]
 800363e:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	685b      	ldr	r3, [r3, #4]
 8003644:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8003646:	2312      	movs	r3, #18
 8003648:	18fb      	adds	r3, r7, r3
 800364a:	1cba      	adds	r2, r7, #2
 800364c:	8812      	ldrh	r2, [r2, #0]
 800364e:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003650:	183b      	adds	r3, r7, r0
 8003652:	781b      	ldrb	r3, [r3, #0]
 8003654:	2b01      	cmp	r3, #1
 8003656:	d011      	beq.n	800367c <HAL_SPI_TransmitReceive+0x84>
 8003658:	697a      	ldr	r2, [r7, #20]
 800365a:	2382      	movs	r3, #130	; 0x82
 800365c:	005b      	lsls	r3, r3, #1
 800365e:	429a      	cmp	r2, r3
 8003660:	d107      	bne.n	8003672 <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	689b      	ldr	r3, [r3, #8]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d103      	bne.n	8003672 <HAL_SPI_TransmitReceive+0x7a>
 800366a:	183b      	adds	r3, r7, r0
 800366c:	781b      	ldrb	r3, [r3, #0]
 800366e:	2b04      	cmp	r3, #4
 8003670:	d004      	beq.n	800367c <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 8003672:	2323      	movs	r3, #35	; 0x23
 8003674:	18fb      	adds	r3, r7, r3
 8003676:	2202      	movs	r2, #2
 8003678:	701a      	strb	r2, [r3, #0]
    goto error;
 800367a:	e17e      	b.n	800397a <HAL_SPI_TransmitReceive+0x382>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800367c:	68bb      	ldr	r3, [r7, #8]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d006      	beq.n	8003690 <HAL_SPI_TransmitReceive+0x98>
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d003      	beq.n	8003690 <HAL_SPI_TransmitReceive+0x98>
 8003688:	1cbb      	adds	r3, r7, #2
 800368a:	881b      	ldrh	r3, [r3, #0]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d104      	bne.n	800369a <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8003690:	2323      	movs	r3, #35	; 0x23
 8003692:	18fb      	adds	r3, r7, r3
 8003694:	2201      	movs	r2, #1
 8003696:	701a      	strb	r2, [r3, #0]
    goto error;
 8003698:	e16f      	b.n	800397a <HAL_SPI_TransmitReceive+0x382>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	225d      	movs	r2, #93	; 0x5d
 800369e:	5c9b      	ldrb	r3, [r3, r2]
 80036a0:	b2db      	uxtb	r3, r3
 80036a2:	2b04      	cmp	r3, #4
 80036a4:	d003      	beq.n	80036ae <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	225d      	movs	r2, #93	; 0x5d
 80036aa:	2105      	movs	r1, #5
 80036ac:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	2200      	movs	r2, #0
 80036b2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	687a      	ldr	r2, [r7, #4]
 80036b8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	1cba      	adds	r2, r7, #2
 80036be:	2146      	movs	r1, #70	; 0x46
 80036c0:	8812      	ldrh	r2, [r2, #0]
 80036c2:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	1cba      	adds	r2, r7, #2
 80036c8:	2144      	movs	r1, #68	; 0x44
 80036ca:	8812      	ldrh	r2, [r2, #0]
 80036cc:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	68ba      	ldr	r2, [r7, #8]
 80036d2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	1cba      	adds	r2, r7, #2
 80036d8:	8812      	ldrh	r2, [r2, #0]
 80036da:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	1cba      	adds	r2, r7, #2
 80036e0:	8812      	ldrh	r2, [r2, #0]
 80036e2:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	2200      	movs	r2, #0
 80036e8:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	2200      	movs	r2, #0
 80036ee:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	68da      	ldr	r2, [r3, #12]
 80036f4:	23e0      	movs	r3, #224	; 0xe0
 80036f6:	00db      	lsls	r3, r3, #3
 80036f8:	429a      	cmp	r2, r3
 80036fa:	d908      	bls.n	800370e <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	685a      	ldr	r2, [r3, #4]
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	49a4      	ldr	r1, [pc, #656]	; (8003998 <HAL_SPI_TransmitReceive+0x3a0>)
 8003708:	400a      	ands	r2, r1
 800370a:	605a      	str	r2, [r3, #4]
 800370c:	e008      	b.n	8003720 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	685a      	ldr	r2, [r3, #4]
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	2180      	movs	r1, #128	; 0x80
 800371a:	0149      	lsls	r1, r1, #5
 800371c:	430a      	orrs	r2, r1
 800371e:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	2240      	movs	r2, #64	; 0x40
 8003728:	4013      	ands	r3, r2
 800372a:	2b40      	cmp	r3, #64	; 0x40
 800372c:	d007      	beq.n	800373e <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	681a      	ldr	r2, [r3, #0]
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	2140      	movs	r1, #64	; 0x40
 800373a:	430a      	orrs	r2, r1
 800373c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	68da      	ldr	r2, [r3, #12]
 8003742:	23e0      	movs	r3, #224	; 0xe0
 8003744:	00db      	lsls	r3, r3, #3
 8003746:	429a      	cmp	r2, r3
 8003748:	d800      	bhi.n	800374c <HAL_SPI_TransmitReceive+0x154>
 800374a:	e07f      	b.n	800384c <HAL_SPI_TransmitReceive+0x254>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	685b      	ldr	r3, [r3, #4]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d005      	beq.n	8003760 <HAL_SPI_TransmitReceive+0x168>
 8003754:	2312      	movs	r3, #18
 8003756:	18fb      	adds	r3, r7, r3
 8003758:	881b      	ldrh	r3, [r3, #0]
 800375a:	2b01      	cmp	r3, #1
 800375c:	d000      	beq.n	8003760 <HAL_SPI_TransmitReceive+0x168>
 800375e:	e069      	b.n	8003834 <HAL_SPI_TransmitReceive+0x23c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003764:	881a      	ldrh	r2, [r3, #0]
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003770:	1c9a      	adds	r2, r3, #2
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800377a:	b29b      	uxth	r3, r3
 800377c:	3b01      	subs	r3, #1
 800377e:	b29a      	uxth	r2, r3
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003784:	e056      	b.n	8003834 <HAL_SPI_TransmitReceive+0x23c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	689b      	ldr	r3, [r3, #8]
 800378c:	2202      	movs	r2, #2
 800378e:	4013      	ands	r3, r2
 8003790:	2b02      	cmp	r3, #2
 8003792:	d11b      	bne.n	80037cc <HAL_SPI_TransmitReceive+0x1d4>
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003798:	b29b      	uxth	r3, r3
 800379a:	2b00      	cmp	r3, #0
 800379c:	d016      	beq.n	80037cc <HAL_SPI_TransmitReceive+0x1d4>
 800379e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037a0:	2b01      	cmp	r3, #1
 80037a2:	d113      	bne.n	80037cc <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037a8:	881a      	ldrh	r2, [r3, #0]
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037b4:	1c9a      	adds	r2, r3, #2
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80037be:	b29b      	uxth	r3, r3
 80037c0:	3b01      	subs	r3, #1
 80037c2:	b29a      	uxth	r2, r3
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80037c8:	2300      	movs	r3, #0
 80037ca:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	689b      	ldr	r3, [r3, #8]
 80037d2:	2201      	movs	r2, #1
 80037d4:	4013      	ands	r3, r2
 80037d6:	2b01      	cmp	r3, #1
 80037d8:	d11c      	bne.n	8003814 <HAL_SPI_TransmitReceive+0x21c>
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	2246      	movs	r2, #70	; 0x46
 80037de:	5a9b      	ldrh	r3, [r3, r2]
 80037e0:	b29b      	uxth	r3, r3
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d016      	beq.n	8003814 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	68da      	ldr	r2, [r3, #12]
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037f0:	b292      	uxth	r2, r2
 80037f2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037f8:	1c9a      	adds	r2, r3, #2
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	2246      	movs	r2, #70	; 0x46
 8003802:	5a9b      	ldrh	r3, [r3, r2]
 8003804:	b29b      	uxth	r3, r3
 8003806:	3b01      	subs	r3, #1
 8003808:	b299      	uxth	r1, r3
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	2246      	movs	r2, #70	; 0x46
 800380e:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003810:	2301      	movs	r3, #1
 8003812:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003814:	f7fe f942 	bl	8001a9c <HAL_GetTick>
 8003818:	0002      	movs	r2, r0
 800381a:	69fb      	ldr	r3, [r7, #28]
 800381c:	1ad3      	subs	r3, r2, r3
 800381e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003820:	429a      	cmp	r2, r3
 8003822:	d807      	bhi.n	8003834 <HAL_SPI_TransmitReceive+0x23c>
 8003824:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003826:	3301      	adds	r3, #1
 8003828:	d004      	beq.n	8003834 <HAL_SPI_TransmitReceive+0x23c>
      {
        errorcode = HAL_TIMEOUT;
 800382a:	2323      	movs	r3, #35	; 0x23
 800382c:	18fb      	adds	r3, r7, r3
 800382e:	2203      	movs	r2, #3
 8003830:	701a      	strb	r2, [r3, #0]
        goto error;
 8003832:	e0a2      	b.n	800397a <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003838:	b29b      	uxth	r3, r3
 800383a:	2b00      	cmp	r3, #0
 800383c:	d1a3      	bne.n	8003786 <HAL_SPI_TransmitReceive+0x18e>
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	2246      	movs	r2, #70	; 0x46
 8003842:	5a9b      	ldrh	r3, [r3, r2]
 8003844:	b29b      	uxth	r3, r3
 8003846:	2b00      	cmp	r3, #0
 8003848:	d19d      	bne.n	8003786 <HAL_SPI_TransmitReceive+0x18e>
 800384a:	e085      	b.n	8003958 <HAL_SPI_TransmitReceive+0x360>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	2b00      	cmp	r3, #0
 8003852:	d005      	beq.n	8003860 <HAL_SPI_TransmitReceive+0x268>
 8003854:	2312      	movs	r3, #18
 8003856:	18fb      	adds	r3, r7, r3
 8003858:	881b      	ldrh	r3, [r3, #0]
 800385a:	2b01      	cmp	r3, #1
 800385c:	d000      	beq.n	8003860 <HAL_SPI_TransmitReceive+0x268>
 800385e:	e070      	b.n	8003942 <HAL_SPI_TransmitReceive+0x34a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	330c      	adds	r3, #12
 800386a:	7812      	ldrb	r2, [r2, #0]
 800386c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003872:	1c5a      	adds	r2, r3, #1
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800387c:	b29b      	uxth	r3, r3
 800387e:	3b01      	subs	r3, #1
 8003880:	b29a      	uxth	r2, r3
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003886:	e05c      	b.n	8003942 <HAL_SPI_TransmitReceive+0x34a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	689b      	ldr	r3, [r3, #8]
 800388e:	2202      	movs	r2, #2
 8003890:	4013      	ands	r3, r2
 8003892:	2b02      	cmp	r3, #2
 8003894:	d11c      	bne.n	80038d0 <HAL_SPI_TransmitReceive+0x2d8>
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800389a:	b29b      	uxth	r3, r3
 800389c:	2b00      	cmp	r3, #0
 800389e:	d017      	beq.n	80038d0 <HAL_SPI_TransmitReceive+0x2d8>
 80038a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038a2:	2b01      	cmp	r3, #1
 80038a4:	d114      	bne.n	80038d0 <HAL_SPI_TransmitReceive+0x2d8>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	330c      	adds	r3, #12
 80038b0:	7812      	ldrb	r2, [r2, #0]
 80038b2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038b8:	1c5a      	adds	r2, r3, #1
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80038c2:	b29b      	uxth	r3, r3
 80038c4:	3b01      	subs	r3, #1
 80038c6:	b29a      	uxth	r2, r3
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80038cc:	2300      	movs	r3, #0
 80038ce:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	689b      	ldr	r3, [r3, #8]
 80038d6:	2201      	movs	r2, #1
 80038d8:	4013      	ands	r3, r2
 80038da:	2b01      	cmp	r3, #1
 80038dc:	d11e      	bne.n	800391c <HAL_SPI_TransmitReceive+0x324>
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	2246      	movs	r2, #70	; 0x46
 80038e2:	5a9b      	ldrh	r3, [r3, r2]
 80038e4:	b29b      	uxth	r3, r3
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d018      	beq.n	800391c <HAL_SPI_TransmitReceive+0x324>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	330c      	adds	r3, #12
 80038f0:	001a      	movs	r2, r3
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038f6:	7812      	ldrb	r2, [r2, #0]
 80038f8:	b2d2      	uxtb	r2, r2
 80038fa:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003900:	1c5a      	adds	r2, r3, #1
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	2246      	movs	r2, #70	; 0x46
 800390a:	5a9b      	ldrh	r3, [r3, r2]
 800390c:	b29b      	uxth	r3, r3
 800390e:	3b01      	subs	r3, #1
 8003910:	b299      	uxth	r1, r3
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	2246      	movs	r2, #70	; 0x46
 8003916:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003918:	2301      	movs	r3, #1
 800391a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800391c:	f7fe f8be 	bl	8001a9c <HAL_GetTick>
 8003920:	0002      	movs	r2, r0
 8003922:	69fb      	ldr	r3, [r7, #28]
 8003924:	1ad3      	subs	r3, r2, r3
 8003926:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003928:	429a      	cmp	r2, r3
 800392a:	d802      	bhi.n	8003932 <HAL_SPI_TransmitReceive+0x33a>
 800392c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800392e:	3301      	adds	r3, #1
 8003930:	d102      	bne.n	8003938 <HAL_SPI_TransmitReceive+0x340>
 8003932:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003934:	2b00      	cmp	r3, #0
 8003936:	d104      	bne.n	8003942 <HAL_SPI_TransmitReceive+0x34a>
      {
        errorcode = HAL_TIMEOUT;
 8003938:	2323      	movs	r3, #35	; 0x23
 800393a:	18fb      	adds	r3, r7, r3
 800393c:	2203      	movs	r2, #3
 800393e:	701a      	strb	r2, [r3, #0]
        goto error;
 8003940:	e01b      	b.n	800397a <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003946:	b29b      	uxth	r3, r3
 8003948:	2b00      	cmp	r3, #0
 800394a:	d19d      	bne.n	8003888 <HAL_SPI_TransmitReceive+0x290>
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	2246      	movs	r2, #70	; 0x46
 8003950:	5a9b      	ldrh	r3, [r3, r2]
 8003952:	b29b      	uxth	r3, r3
 8003954:	2b00      	cmp	r3, #0
 8003956:	d197      	bne.n	8003888 <HAL_SPI_TransmitReceive+0x290>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003958:	69fa      	ldr	r2, [r7, #28]
 800395a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	0018      	movs	r0, r3
 8003960:	f000 f9b6 	bl	8003cd0 <SPI_EndRxTxTransaction>
 8003964:	1e03      	subs	r3, r0, #0
 8003966:	d007      	beq.n	8003978 <HAL_SPI_TransmitReceive+0x380>
  {
    errorcode = HAL_ERROR;
 8003968:	2323      	movs	r3, #35	; 0x23
 800396a:	18fb      	adds	r3, r7, r3
 800396c:	2201      	movs	r2, #1
 800396e:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	2220      	movs	r2, #32
 8003974:	661a      	str	r2, [r3, #96]	; 0x60
 8003976:	e000      	b.n	800397a <HAL_SPI_TransmitReceive+0x382>
  }

error :
 8003978:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	225d      	movs	r2, #93	; 0x5d
 800397e:	2101      	movs	r1, #1
 8003980:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	225c      	movs	r2, #92	; 0x5c
 8003986:	2100      	movs	r1, #0
 8003988:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800398a:	2323      	movs	r3, #35	; 0x23
 800398c:	18fb      	adds	r3, r7, r3
 800398e:	781b      	ldrb	r3, [r3, #0]
}
 8003990:	0018      	movs	r0, r3
 8003992:	46bd      	mov	sp, r7
 8003994:	b00a      	add	sp, #40	; 0x28
 8003996:	bd80      	pop	{r7, pc}
 8003998:	ffffefff 	.word	0xffffefff

0800399c <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b082      	sub	sp, #8
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	225d      	movs	r2, #93	; 0x5d
 80039a8:	5c9b      	ldrb	r3, [r3, r2]
 80039aa:	b2db      	uxtb	r3, r3
}
 80039ac:	0018      	movs	r0, r3
 80039ae:	46bd      	mov	sp, r7
 80039b0:	b002      	add	sp, #8
 80039b2:	bd80      	pop	{r7, pc}

080039b4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b088      	sub	sp, #32
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	60f8      	str	r0, [r7, #12]
 80039bc:	60b9      	str	r1, [r7, #8]
 80039be:	603b      	str	r3, [r7, #0]
 80039c0:	1dfb      	adds	r3, r7, #7
 80039c2:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80039c4:	f7fe f86a 	bl	8001a9c <HAL_GetTick>
 80039c8:	0002      	movs	r2, r0
 80039ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039cc:	1a9b      	subs	r3, r3, r2
 80039ce:	683a      	ldr	r2, [r7, #0]
 80039d0:	18d3      	adds	r3, r2, r3
 80039d2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80039d4:	f7fe f862 	bl	8001a9c <HAL_GetTick>
 80039d8:	0003      	movs	r3, r0
 80039da:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80039dc:	4b3a      	ldr	r3, [pc, #232]	; (8003ac8 <SPI_WaitFlagStateUntilTimeout+0x114>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	015b      	lsls	r3, r3, #5
 80039e2:	0d1b      	lsrs	r3, r3, #20
 80039e4:	69fa      	ldr	r2, [r7, #28]
 80039e6:	4353      	muls	r3, r2
 80039e8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80039ea:	e058      	b.n	8003a9e <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	3301      	adds	r3, #1
 80039f0:	d055      	beq.n	8003a9e <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80039f2:	f7fe f853 	bl	8001a9c <HAL_GetTick>
 80039f6:	0002      	movs	r2, r0
 80039f8:	69bb      	ldr	r3, [r7, #24]
 80039fa:	1ad3      	subs	r3, r2, r3
 80039fc:	69fa      	ldr	r2, [r7, #28]
 80039fe:	429a      	cmp	r2, r3
 8003a00:	d902      	bls.n	8003a08 <SPI_WaitFlagStateUntilTimeout+0x54>
 8003a02:	69fb      	ldr	r3, [r7, #28]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d142      	bne.n	8003a8e <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	685a      	ldr	r2, [r3, #4]
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	21e0      	movs	r1, #224	; 0xe0
 8003a14:	438a      	bics	r2, r1
 8003a16:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	685a      	ldr	r2, [r3, #4]
 8003a1c:	2382      	movs	r3, #130	; 0x82
 8003a1e:	005b      	lsls	r3, r3, #1
 8003a20:	429a      	cmp	r2, r3
 8003a22:	d113      	bne.n	8003a4c <SPI_WaitFlagStateUntilTimeout+0x98>
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	689a      	ldr	r2, [r3, #8]
 8003a28:	2380      	movs	r3, #128	; 0x80
 8003a2a:	021b      	lsls	r3, r3, #8
 8003a2c:	429a      	cmp	r2, r3
 8003a2e:	d005      	beq.n	8003a3c <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	689a      	ldr	r2, [r3, #8]
 8003a34:	2380      	movs	r3, #128	; 0x80
 8003a36:	00db      	lsls	r3, r3, #3
 8003a38:	429a      	cmp	r2, r3
 8003a3a:	d107      	bne.n	8003a4c <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	681a      	ldr	r2, [r3, #0]
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	2140      	movs	r1, #64	; 0x40
 8003a48:	438a      	bics	r2, r1
 8003a4a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003a50:	2380      	movs	r3, #128	; 0x80
 8003a52:	019b      	lsls	r3, r3, #6
 8003a54:	429a      	cmp	r2, r3
 8003a56:	d110      	bne.n	8003a7a <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	681a      	ldr	r2, [r3, #0]
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	491a      	ldr	r1, [pc, #104]	; (8003acc <SPI_WaitFlagStateUntilTimeout+0x118>)
 8003a64:	400a      	ands	r2, r1
 8003a66:	601a      	str	r2, [r3, #0]
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	681a      	ldr	r2, [r3, #0]
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	2180      	movs	r1, #128	; 0x80
 8003a74:	0189      	lsls	r1, r1, #6
 8003a76:	430a      	orrs	r2, r1
 8003a78:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	225d      	movs	r2, #93	; 0x5d
 8003a7e:	2101      	movs	r1, #1
 8003a80:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	225c      	movs	r2, #92	; 0x5c
 8003a86:	2100      	movs	r1, #0
 8003a88:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003a8a:	2303      	movs	r3, #3
 8003a8c:	e017      	b.n	8003abe <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003a8e:	697b      	ldr	r3, [r7, #20]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d101      	bne.n	8003a98 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8003a94:	2300      	movs	r3, #0
 8003a96:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003a98:	697b      	ldr	r3, [r7, #20]
 8003a9a:	3b01      	subs	r3, #1
 8003a9c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	689b      	ldr	r3, [r3, #8]
 8003aa4:	68ba      	ldr	r2, [r7, #8]
 8003aa6:	4013      	ands	r3, r2
 8003aa8:	68ba      	ldr	r2, [r7, #8]
 8003aaa:	1ad3      	subs	r3, r2, r3
 8003aac:	425a      	negs	r2, r3
 8003aae:	4153      	adcs	r3, r2
 8003ab0:	b2db      	uxtb	r3, r3
 8003ab2:	001a      	movs	r2, r3
 8003ab4:	1dfb      	adds	r3, r7, #7
 8003ab6:	781b      	ldrb	r3, [r3, #0]
 8003ab8:	429a      	cmp	r2, r3
 8003aba:	d197      	bne.n	80039ec <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003abc:	2300      	movs	r3, #0
}
 8003abe:	0018      	movs	r0, r3
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	b008      	add	sp, #32
 8003ac4:	bd80      	pop	{r7, pc}
 8003ac6:	46c0      	nop			; (mov r8, r8)
 8003ac8:	20000000 	.word	0x20000000
 8003acc:	ffffdfff 	.word	0xffffdfff

08003ad0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b08a      	sub	sp, #40	; 0x28
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	60f8      	str	r0, [r7, #12]
 8003ad8:	60b9      	str	r1, [r7, #8]
 8003ada:	607a      	str	r2, [r7, #4]
 8003adc:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003ade:	2317      	movs	r3, #23
 8003ae0:	18fb      	adds	r3, r7, r3
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003ae6:	f7fd ffd9 	bl	8001a9c <HAL_GetTick>
 8003aea:	0002      	movs	r2, r0
 8003aec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003aee:	1a9b      	subs	r3, r3, r2
 8003af0:	683a      	ldr	r2, [r7, #0]
 8003af2:	18d3      	adds	r3, r2, r3
 8003af4:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8003af6:	f7fd ffd1 	bl	8001a9c <HAL_GetTick>
 8003afa:	0003      	movs	r3, r0
 8003afc:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	330c      	adds	r3, #12
 8003b04:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003b06:	4b41      	ldr	r3, [pc, #260]	; (8003c0c <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8003b08:	681a      	ldr	r2, [r3, #0]
 8003b0a:	0013      	movs	r3, r2
 8003b0c:	009b      	lsls	r3, r3, #2
 8003b0e:	189b      	adds	r3, r3, r2
 8003b10:	00da      	lsls	r2, r3, #3
 8003b12:	1ad3      	subs	r3, r2, r3
 8003b14:	0d1b      	lsrs	r3, r3, #20
 8003b16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b18:	4353      	muls	r3, r2
 8003b1a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003b1c:	e068      	b.n	8003bf0 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003b1e:	68ba      	ldr	r2, [r7, #8]
 8003b20:	23c0      	movs	r3, #192	; 0xc0
 8003b22:	00db      	lsls	r3, r3, #3
 8003b24:	429a      	cmp	r2, r3
 8003b26:	d10a      	bne.n	8003b3e <SPI_WaitFifoStateUntilTimeout+0x6e>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d107      	bne.n	8003b3e <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003b2e:	69fb      	ldr	r3, [r7, #28]
 8003b30:	781b      	ldrb	r3, [r3, #0]
 8003b32:	b2da      	uxtb	r2, r3
 8003b34:	2117      	movs	r1, #23
 8003b36:	187b      	adds	r3, r7, r1
 8003b38:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003b3a:	187b      	adds	r3, r7, r1
 8003b3c:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	3301      	adds	r3, #1
 8003b42:	d055      	beq.n	8003bf0 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003b44:	f7fd ffaa 	bl	8001a9c <HAL_GetTick>
 8003b48:	0002      	movs	r2, r0
 8003b4a:	6a3b      	ldr	r3, [r7, #32]
 8003b4c:	1ad3      	subs	r3, r2, r3
 8003b4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b50:	429a      	cmp	r2, r3
 8003b52:	d902      	bls.n	8003b5a <SPI_WaitFifoStateUntilTimeout+0x8a>
 8003b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d142      	bne.n	8003be0 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	685a      	ldr	r2, [r3, #4]
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	21e0      	movs	r1, #224	; 0xe0
 8003b66:	438a      	bics	r2, r1
 8003b68:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	685a      	ldr	r2, [r3, #4]
 8003b6e:	2382      	movs	r3, #130	; 0x82
 8003b70:	005b      	lsls	r3, r3, #1
 8003b72:	429a      	cmp	r2, r3
 8003b74:	d113      	bne.n	8003b9e <SPI_WaitFifoStateUntilTimeout+0xce>
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	689a      	ldr	r2, [r3, #8]
 8003b7a:	2380      	movs	r3, #128	; 0x80
 8003b7c:	021b      	lsls	r3, r3, #8
 8003b7e:	429a      	cmp	r2, r3
 8003b80:	d005      	beq.n	8003b8e <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	689a      	ldr	r2, [r3, #8]
 8003b86:	2380      	movs	r3, #128	; 0x80
 8003b88:	00db      	lsls	r3, r3, #3
 8003b8a:	429a      	cmp	r2, r3
 8003b8c:	d107      	bne.n	8003b9e <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	681a      	ldr	r2, [r3, #0]
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	2140      	movs	r1, #64	; 0x40
 8003b9a:	438a      	bics	r2, r1
 8003b9c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003ba2:	2380      	movs	r3, #128	; 0x80
 8003ba4:	019b      	lsls	r3, r3, #6
 8003ba6:	429a      	cmp	r2, r3
 8003ba8:	d110      	bne.n	8003bcc <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	681a      	ldr	r2, [r3, #0]
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	4916      	ldr	r1, [pc, #88]	; (8003c10 <SPI_WaitFifoStateUntilTimeout+0x140>)
 8003bb6:	400a      	ands	r2, r1
 8003bb8:	601a      	str	r2, [r3, #0]
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	681a      	ldr	r2, [r3, #0]
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	2180      	movs	r1, #128	; 0x80
 8003bc6:	0189      	lsls	r1, r1, #6
 8003bc8:	430a      	orrs	r2, r1
 8003bca:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	225d      	movs	r2, #93	; 0x5d
 8003bd0:	2101      	movs	r1, #1
 8003bd2:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	225c      	movs	r2, #92	; 0x5c
 8003bd8:	2100      	movs	r1, #0
 8003bda:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003bdc:	2303      	movs	r3, #3
 8003bde:	e010      	b.n	8003c02 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003be0:	69bb      	ldr	r3, [r7, #24]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d101      	bne.n	8003bea <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8003be6:	2300      	movs	r3, #0
 8003be8:	627b      	str	r3, [r7, #36]	; 0x24
      }      
      count--;
 8003bea:	69bb      	ldr	r3, [r7, #24]
 8003bec:	3b01      	subs	r3, #1
 8003bee:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	689b      	ldr	r3, [r3, #8]
 8003bf6:	68ba      	ldr	r2, [r7, #8]
 8003bf8:	4013      	ands	r3, r2
 8003bfa:	687a      	ldr	r2, [r7, #4]
 8003bfc:	429a      	cmp	r2, r3
 8003bfe:	d18e      	bne.n	8003b1e <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8003c00:	2300      	movs	r3, #0
}
 8003c02:	0018      	movs	r0, r3
 8003c04:	46bd      	mov	sp, r7
 8003c06:	b00a      	add	sp, #40	; 0x28
 8003c08:	bd80      	pop	{r7, pc}
 8003c0a:	46c0      	nop			; (mov r8, r8)
 8003c0c:	20000000 	.word	0x20000000
 8003c10:	ffffdfff 	.word	0xffffdfff

08003c14 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b086      	sub	sp, #24
 8003c18:	af02      	add	r7, sp, #8
 8003c1a:	60f8      	str	r0, [r7, #12]
 8003c1c:	60b9      	str	r1, [r7, #8]
 8003c1e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	685a      	ldr	r2, [r3, #4]
 8003c24:	2382      	movs	r3, #130	; 0x82
 8003c26:	005b      	lsls	r3, r3, #1
 8003c28:	429a      	cmp	r2, r3
 8003c2a:	d113      	bne.n	8003c54 <SPI_EndRxTransaction+0x40>
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	689a      	ldr	r2, [r3, #8]
 8003c30:	2380      	movs	r3, #128	; 0x80
 8003c32:	021b      	lsls	r3, r3, #8
 8003c34:	429a      	cmp	r2, r3
 8003c36:	d005      	beq.n	8003c44 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	689a      	ldr	r2, [r3, #8]
 8003c3c:	2380      	movs	r3, #128	; 0x80
 8003c3e:	00db      	lsls	r3, r3, #3
 8003c40:	429a      	cmp	r2, r3
 8003c42:	d107      	bne.n	8003c54 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	681a      	ldr	r2, [r3, #0]
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	2140      	movs	r1, #64	; 0x40
 8003c50:	438a      	bics	r2, r1
 8003c52:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003c54:	68ba      	ldr	r2, [r7, #8]
 8003c56:	68f8      	ldr	r0, [r7, #12]
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	9300      	str	r3, [sp, #0]
 8003c5c:	0013      	movs	r3, r2
 8003c5e:	2200      	movs	r2, #0
 8003c60:	2180      	movs	r1, #128	; 0x80
 8003c62:	f7ff fea7 	bl	80039b4 <SPI_WaitFlagStateUntilTimeout>
 8003c66:	1e03      	subs	r3, r0, #0
 8003c68:	d007      	beq.n	8003c7a <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c6e:	2220      	movs	r2, #32
 8003c70:	431a      	orrs	r2, r3
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003c76:	2303      	movs	r3, #3
 8003c78:	e026      	b.n	8003cc8 <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	685a      	ldr	r2, [r3, #4]
 8003c7e:	2382      	movs	r3, #130	; 0x82
 8003c80:	005b      	lsls	r3, r3, #1
 8003c82:	429a      	cmp	r2, r3
 8003c84:	d11f      	bne.n	8003cc6 <SPI_EndRxTransaction+0xb2>
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	689a      	ldr	r2, [r3, #8]
 8003c8a:	2380      	movs	r3, #128	; 0x80
 8003c8c:	021b      	lsls	r3, r3, #8
 8003c8e:	429a      	cmp	r2, r3
 8003c90:	d005      	beq.n	8003c9e <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	689a      	ldr	r2, [r3, #8]
 8003c96:	2380      	movs	r3, #128	; 0x80
 8003c98:	00db      	lsls	r3, r3, #3
 8003c9a:	429a      	cmp	r2, r3
 8003c9c:	d113      	bne.n	8003cc6 <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003c9e:	68ba      	ldr	r2, [r7, #8]
 8003ca0:	23c0      	movs	r3, #192	; 0xc0
 8003ca2:	00d9      	lsls	r1, r3, #3
 8003ca4:	68f8      	ldr	r0, [r7, #12]
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	9300      	str	r3, [sp, #0]
 8003caa:	0013      	movs	r3, r2
 8003cac:	2200      	movs	r2, #0
 8003cae:	f7ff ff0f 	bl	8003ad0 <SPI_WaitFifoStateUntilTimeout>
 8003cb2:	1e03      	subs	r3, r0, #0
 8003cb4:	d007      	beq.n	8003cc6 <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003cba:	2220      	movs	r2, #32
 8003cbc:	431a      	orrs	r2, r3
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8003cc2:	2303      	movs	r3, #3
 8003cc4:	e000      	b.n	8003cc8 <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 8003cc6:	2300      	movs	r3, #0
}
 8003cc8:	0018      	movs	r0, r3
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	b004      	add	sp, #16
 8003cce:	bd80      	pop	{r7, pc}

08003cd0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b086      	sub	sp, #24
 8003cd4:	af02      	add	r7, sp, #8
 8003cd6:	60f8      	str	r0, [r7, #12]
 8003cd8:	60b9      	str	r1, [r7, #8]
 8003cda:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003cdc:	68ba      	ldr	r2, [r7, #8]
 8003cde:	23c0      	movs	r3, #192	; 0xc0
 8003ce0:	0159      	lsls	r1, r3, #5
 8003ce2:	68f8      	ldr	r0, [r7, #12]
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	9300      	str	r3, [sp, #0]
 8003ce8:	0013      	movs	r3, r2
 8003cea:	2200      	movs	r2, #0
 8003cec:	f7ff fef0 	bl	8003ad0 <SPI_WaitFifoStateUntilTimeout>
 8003cf0:	1e03      	subs	r3, r0, #0
 8003cf2:	d007      	beq.n	8003d04 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003cf8:	2220      	movs	r2, #32
 8003cfa:	431a      	orrs	r2, r3
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003d00:	2303      	movs	r3, #3
 8003d02:	e027      	b.n	8003d54 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003d04:	68ba      	ldr	r2, [r7, #8]
 8003d06:	68f8      	ldr	r0, [r7, #12]
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	9300      	str	r3, [sp, #0]
 8003d0c:	0013      	movs	r3, r2
 8003d0e:	2200      	movs	r2, #0
 8003d10:	2180      	movs	r1, #128	; 0x80
 8003d12:	f7ff fe4f 	bl	80039b4 <SPI_WaitFlagStateUntilTimeout>
 8003d16:	1e03      	subs	r3, r0, #0
 8003d18:	d007      	beq.n	8003d2a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d1e:	2220      	movs	r2, #32
 8003d20:	431a      	orrs	r2, r3
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003d26:	2303      	movs	r3, #3
 8003d28:	e014      	b.n	8003d54 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003d2a:	68ba      	ldr	r2, [r7, #8]
 8003d2c:	23c0      	movs	r3, #192	; 0xc0
 8003d2e:	00d9      	lsls	r1, r3, #3
 8003d30:	68f8      	ldr	r0, [r7, #12]
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	9300      	str	r3, [sp, #0]
 8003d36:	0013      	movs	r3, r2
 8003d38:	2200      	movs	r2, #0
 8003d3a:	f7ff fec9 	bl	8003ad0 <SPI_WaitFifoStateUntilTimeout>
 8003d3e:	1e03      	subs	r3, r0, #0
 8003d40:	d007      	beq.n	8003d52 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d46:	2220      	movs	r2, #32
 8003d48:	431a      	orrs	r2, r3
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003d4e:	2303      	movs	r3, #3
 8003d50:	e000      	b.n	8003d54 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003d52:	2300      	movs	r3, #0
}
 8003d54:	0018      	movs	r0, r3
 8003d56:	46bd      	mov	sp, r7
 8003d58:	b004      	add	sp, #16
 8003d5a:	bd80      	pop	{r7, pc}

08003d5c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b082      	sub	sp, #8
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d101      	bne.n	8003d6e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	e046      	b.n	8003dfc <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2284      	movs	r2, #132	; 0x84
 8003d72:	589b      	ldr	r3, [r3, r2]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d107      	bne.n	8003d88 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2280      	movs	r2, #128	; 0x80
 8003d7c:	2100      	movs	r1, #0
 8003d7e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	0018      	movs	r0, r3
 8003d84:	f7fc fdde 	bl	8000944 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2284      	movs	r2, #132	; 0x84
 8003d8c:	2124      	movs	r1, #36	; 0x24
 8003d8e:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	681a      	ldr	r2, [r3, #0]
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	2101      	movs	r1, #1
 8003d9c:	438a      	bics	r2, r1
 8003d9e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	0018      	movs	r0, r3
 8003da4:	f000 f830 	bl	8003e08 <UART_SetConfig>
 8003da8:	0003      	movs	r3, r0
 8003daa:	2b01      	cmp	r3, #1
 8003dac:	d101      	bne.n	8003db2 <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8003dae:	2301      	movs	r3, #1
 8003db0:	e024      	b.n	8003dfc <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d003      	beq.n	8003dc2 <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	0018      	movs	r0, r3
 8003dbe:	f000 fb01 	bl	80043c4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	685a      	ldr	r2, [r3, #4]
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	490d      	ldr	r1, [pc, #52]	; (8003e04 <HAL_UART_Init+0xa8>)
 8003dce:	400a      	ands	r2, r1
 8003dd0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	689a      	ldr	r2, [r3, #8]
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	212a      	movs	r1, #42	; 0x2a
 8003dde:	438a      	bics	r2, r1
 8003de0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	681a      	ldr	r2, [r3, #0]
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	2101      	movs	r1, #1
 8003dee:	430a      	orrs	r2, r1
 8003df0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	0018      	movs	r0, r3
 8003df6:	f000 fb99 	bl	800452c <UART_CheckIdleState>
 8003dfa:	0003      	movs	r3, r0
}
 8003dfc:	0018      	movs	r0, r3
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	b002      	add	sp, #8
 8003e02:	bd80      	pop	{r7, pc}
 8003e04:	ffffb7ff 	.word	0xffffb7ff

08003e08 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003e08:	b5b0      	push	{r4, r5, r7, lr}
 8003e0a:	b090      	sub	sp, #64	; 0x40
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003e10:	231a      	movs	r3, #26
 8003e12:	2220      	movs	r2, #32
 8003e14:	4694      	mov	ip, r2
 8003e16:	44bc      	add	ip, r7
 8003e18:	4463      	add	r3, ip
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e20:	689a      	ldr	r2, [r3, #8]
 8003e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e24:	691b      	ldr	r3, [r3, #16]
 8003e26:	431a      	orrs	r2, r3
 8003e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e2a:	695b      	ldr	r3, [r3, #20]
 8003e2c:	431a      	orrs	r2, r3
 8003e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e30:	69db      	ldr	r3, [r3, #28]
 8003e32:	4313      	orrs	r3, r2
 8003e34:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	4ab9      	ldr	r2, [pc, #740]	; (8004124 <UART_SetConfig+0x31c>)
 8003e3e:	4013      	ands	r3, r2
 8003e40:	0019      	movs	r1, r3
 8003e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e44:	681a      	ldr	r2, [r3, #0]
 8003e46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e48:	430b      	orrs	r3, r1
 8003e4a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	685b      	ldr	r3, [r3, #4]
 8003e52:	4ab5      	ldr	r2, [pc, #724]	; (8004128 <UART_SetConfig+0x320>)
 8003e54:	4013      	ands	r3, r2
 8003e56:	0018      	movs	r0, r3
 8003e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e5a:	68d9      	ldr	r1, [r3, #12]
 8003e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e5e:	681a      	ldr	r2, [r3, #0]
 8003e60:	0003      	movs	r3, r0
 8003e62:	430b      	orrs	r3, r1
 8003e64:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e68:	699b      	ldr	r3, [r3, #24]
 8003e6a:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4aae      	ldr	r2, [pc, #696]	; (800412c <UART_SetConfig+0x324>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d004      	beq.n	8003e80 <UART_SetConfig+0x78>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e78:	6a1b      	ldr	r3, [r3, #32]
 8003e7a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003e7c:	4313      	orrs	r3, r2
 8003e7e:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	689b      	ldr	r3, [r3, #8]
 8003e86:	4aaa      	ldr	r2, [pc, #680]	; (8004130 <UART_SetConfig+0x328>)
 8003e88:	4013      	ands	r3, r2
 8003e8a:	0019      	movs	r1, r3
 8003e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e8e:	681a      	ldr	r2, [r3, #0]
 8003e90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e92:	430b      	orrs	r3, r1
 8003e94:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e9c:	220f      	movs	r2, #15
 8003e9e:	4393      	bics	r3, r2
 8003ea0:	0018      	movs	r0, r3
 8003ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ea4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ea8:	681a      	ldr	r2, [r3, #0]
 8003eaa:	0003      	movs	r3, r0
 8003eac:	430b      	orrs	r3, r1
 8003eae:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4a9f      	ldr	r2, [pc, #636]	; (8004134 <UART_SetConfig+0x32c>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d136      	bne.n	8003f28 <UART_SetConfig+0x120>
 8003eba:	4b9f      	ldr	r3, [pc, #636]	; (8004138 <UART_SetConfig+0x330>)
 8003ebc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ebe:	2203      	movs	r2, #3
 8003ec0:	4013      	ands	r3, r2
 8003ec2:	2b03      	cmp	r3, #3
 8003ec4:	d020      	beq.n	8003f08 <UART_SetConfig+0x100>
 8003ec6:	d827      	bhi.n	8003f18 <UART_SetConfig+0x110>
 8003ec8:	2b02      	cmp	r3, #2
 8003eca:	d00d      	beq.n	8003ee8 <UART_SetConfig+0xe0>
 8003ecc:	d824      	bhi.n	8003f18 <UART_SetConfig+0x110>
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d002      	beq.n	8003ed8 <UART_SetConfig+0xd0>
 8003ed2:	2b01      	cmp	r3, #1
 8003ed4:	d010      	beq.n	8003ef8 <UART_SetConfig+0xf0>
 8003ed6:	e01f      	b.n	8003f18 <UART_SetConfig+0x110>
 8003ed8:	231b      	movs	r3, #27
 8003eda:	2220      	movs	r2, #32
 8003edc:	4694      	mov	ip, r2
 8003ede:	44bc      	add	ip, r7
 8003ee0:	4463      	add	r3, ip
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	701a      	strb	r2, [r3, #0]
 8003ee6:	e0c5      	b.n	8004074 <UART_SetConfig+0x26c>
 8003ee8:	231b      	movs	r3, #27
 8003eea:	2220      	movs	r2, #32
 8003eec:	4694      	mov	ip, r2
 8003eee:	44bc      	add	ip, r7
 8003ef0:	4463      	add	r3, ip
 8003ef2:	2202      	movs	r2, #2
 8003ef4:	701a      	strb	r2, [r3, #0]
 8003ef6:	e0bd      	b.n	8004074 <UART_SetConfig+0x26c>
 8003ef8:	231b      	movs	r3, #27
 8003efa:	2220      	movs	r2, #32
 8003efc:	4694      	mov	ip, r2
 8003efe:	44bc      	add	ip, r7
 8003f00:	4463      	add	r3, ip
 8003f02:	2204      	movs	r2, #4
 8003f04:	701a      	strb	r2, [r3, #0]
 8003f06:	e0b5      	b.n	8004074 <UART_SetConfig+0x26c>
 8003f08:	231b      	movs	r3, #27
 8003f0a:	2220      	movs	r2, #32
 8003f0c:	4694      	mov	ip, r2
 8003f0e:	44bc      	add	ip, r7
 8003f10:	4463      	add	r3, ip
 8003f12:	2208      	movs	r2, #8
 8003f14:	701a      	strb	r2, [r3, #0]
 8003f16:	e0ad      	b.n	8004074 <UART_SetConfig+0x26c>
 8003f18:	231b      	movs	r3, #27
 8003f1a:	2220      	movs	r2, #32
 8003f1c:	4694      	mov	ip, r2
 8003f1e:	44bc      	add	ip, r7
 8003f20:	4463      	add	r3, ip
 8003f22:	2210      	movs	r2, #16
 8003f24:	701a      	strb	r2, [r3, #0]
 8003f26:	e0a5      	b.n	8004074 <UART_SetConfig+0x26c>
 8003f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	4a83      	ldr	r2, [pc, #524]	; (800413c <UART_SetConfig+0x334>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d136      	bne.n	8003fa0 <UART_SetConfig+0x198>
 8003f32:	4b81      	ldr	r3, [pc, #516]	; (8004138 <UART_SetConfig+0x330>)
 8003f34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f36:	220c      	movs	r2, #12
 8003f38:	4013      	ands	r3, r2
 8003f3a:	2b0c      	cmp	r3, #12
 8003f3c:	d020      	beq.n	8003f80 <UART_SetConfig+0x178>
 8003f3e:	d827      	bhi.n	8003f90 <UART_SetConfig+0x188>
 8003f40:	2b08      	cmp	r3, #8
 8003f42:	d00d      	beq.n	8003f60 <UART_SetConfig+0x158>
 8003f44:	d824      	bhi.n	8003f90 <UART_SetConfig+0x188>
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d002      	beq.n	8003f50 <UART_SetConfig+0x148>
 8003f4a:	2b04      	cmp	r3, #4
 8003f4c:	d010      	beq.n	8003f70 <UART_SetConfig+0x168>
 8003f4e:	e01f      	b.n	8003f90 <UART_SetConfig+0x188>
 8003f50:	231b      	movs	r3, #27
 8003f52:	2220      	movs	r2, #32
 8003f54:	4694      	mov	ip, r2
 8003f56:	44bc      	add	ip, r7
 8003f58:	4463      	add	r3, ip
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	701a      	strb	r2, [r3, #0]
 8003f5e:	e089      	b.n	8004074 <UART_SetConfig+0x26c>
 8003f60:	231b      	movs	r3, #27
 8003f62:	2220      	movs	r2, #32
 8003f64:	4694      	mov	ip, r2
 8003f66:	44bc      	add	ip, r7
 8003f68:	4463      	add	r3, ip
 8003f6a:	2202      	movs	r2, #2
 8003f6c:	701a      	strb	r2, [r3, #0]
 8003f6e:	e081      	b.n	8004074 <UART_SetConfig+0x26c>
 8003f70:	231b      	movs	r3, #27
 8003f72:	2220      	movs	r2, #32
 8003f74:	4694      	mov	ip, r2
 8003f76:	44bc      	add	ip, r7
 8003f78:	4463      	add	r3, ip
 8003f7a:	2204      	movs	r2, #4
 8003f7c:	701a      	strb	r2, [r3, #0]
 8003f7e:	e079      	b.n	8004074 <UART_SetConfig+0x26c>
 8003f80:	231b      	movs	r3, #27
 8003f82:	2220      	movs	r2, #32
 8003f84:	4694      	mov	ip, r2
 8003f86:	44bc      	add	ip, r7
 8003f88:	4463      	add	r3, ip
 8003f8a:	2208      	movs	r2, #8
 8003f8c:	701a      	strb	r2, [r3, #0]
 8003f8e:	e071      	b.n	8004074 <UART_SetConfig+0x26c>
 8003f90:	231b      	movs	r3, #27
 8003f92:	2220      	movs	r2, #32
 8003f94:	4694      	mov	ip, r2
 8003f96:	44bc      	add	ip, r7
 8003f98:	4463      	add	r3, ip
 8003f9a:	2210      	movs	r2, #16
 8003f9c:	701a      	strb	r2, [r3, #0]
 8003f9e:	e069      	b.n	8004074 <UART_SetConfig+0x26c>
 8003fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4a66      	ldr	r2, [pc, #408]	; (8004140 <UART_SetConfig+0x338>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d107      	bne.n	8003fba <UART_SetConfig+0x1b2>
 8003faa:	231b      	movs	r3, #27
 8003fac:	2220      	movs	r2, #32
 8003fae:	4694      	mov	ip, r2
 8003fb0:	44bc      	add	ip, r7
 8003fb2:	4463      	add	r3, ip
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	701a      	strb	r2, [r3, #0]
 8003fb8:	e05c      	b.n	8004074 <UART_SetConfig+0x26c>
 8003fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	4a61      	ldr	r2, [pc, #388]	; (8004144 <UART_SetConfig+0x33c>)
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	d107      	bne.n	8003fd4 <UART_SetConfig+0x1cc>
 8003fc4:	231b      	movs	r3, #27
 8003fc6:	2220      	movs	r2, #32
 8003fc8:	4694      	mov	ip, r2
 8003fca:	44bc      	add	ip, r7
 8003fcc:	4463      	add	r3, ip
 8003fce:	2200      	movs	r2, #0
 8003fd0:	701a      	strb	r2, [r3, #0]
 8003fd2:	e04f      	b.n	8004074 <UART_SetConfig+0x26c>
 8003fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	4a54      	ldr	r2, [pc, #336]	; (800412c <UART_SetConfig+0x324>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d143      	bne.n	8004066 <UART_SetConfig+0x25e>
 8003fde:	4b56      	ldr	r3, [pc, #344]	; (8004138 <UART_SetConfig+0x330>)
 8003fe0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003fe2:	23c0      	movs	r3, #192	; 0xc0
 8003fe4:	011b      	lsls	r3, r3, #4
 8003fe6:	4013      	ands	r3, r2
 8003fe8:	22c0      	movs	r2, #192	; 0xc0
 8003fea:	0112      	lsls	r2, r2, #4
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d02a      	beq.n	8004046 <UART_SetConfig+0x23e>
 8003ff0:	22c0      	movs	r2, #192	; 0xc0
 8003ff2:	0112      	lsls	r2, r2, #4
 8003ff4:	4293      	cmp	r3, r2
 8003ff6:	d82e      	bhi.n	8004056 <UART_SetConfig+0x24e>
 8003ff8:	2280      	movs	r2, #128	; 0x80
 8003ffa:	0112      	lsls	r2, r2, #4
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	d012      	beq.n	8004026 <UART_SetConfig+0x21e>
 8004000:	2280      	movs	r2, #128	; 0x80
 8004002:	0112      	lsls	r2, r2, #4
 8004004:	4293      	cmp	r3, r2
 8004006:	d826      	bhi.n	8004056 <UART_SetConfig+0x24e>
 8004008:	2b00      	cmp	r3, #0
 800400a:	d004      	beq.n	8004016 <UART_SetConfig+0x20e>
 800400c:	2280      	movs	r2, #128	; 0x80
 800400e:	00d2      	lsls	r2, r2, #3
 8004010:	4293      	cmp	r3, r2
 8004012:	d010      	beq.n	8004036 <UART_SetConfig+0x22e>
 8004014:	e01f      	b.n	8004056 <UART_SetConfig+0x24e>
 8004016:	231b      	movs	r3, #27
 8004018:	2220      	movs	r2, #32
 800401a:	4694      	mov	ip, r2
 800401c:	44bc      	add	ip, r7
 800401e:	4463      	add	r3, ip
 8004020:	2200      	movs	r2, #0
 8004022:	701a      	strb	r2, [r3, #0]
 8004024:	e026      	b.n	8004074 <UART_SetConfig+0x26c>
 8004026:	231b      	movs	r3, #27
 8004028:	2220      	movs	r2, #32
 800402a:	4694      	mov	ip, r2
 800402c:	44bc      	add	ip, r7
 800402e:	4463      	add	r3, ip
 8004030:	2202      	movs	r2, #2
 8004032:	701a      	strb	r2, [r3, #0]
 8004034:	e01e      	b.n	8004074 <UART_SetConfig+0x26c>
 8004036:	231b      	movs	r3, #27
 8004038:	2220      	movs	r2, #32
 800403a:	4694      	mov	ip, r2
 800403c:	44bc      	add	ip, r7
 800403e:	4463      	add	r3, ip
 8004040:	2204      	movs	r2, #4
 8004042:	701a      	strb	r2, [r3, #0]
 8004044:	e016      	b.n	8004074 <UART_SetConfig+0x26c>
 8004046:	231b      	movs	r3, #27
 8004048:	2220      	movs	r2, #32
 800404a:	4694      	mov	ip, r2
 800404c:	44bc      	add	ip, r7
 800404e:	4463      	add	r3, ip
 8004050:	2208      	movs	r2, #8
 8004052:	701a      	strb	r2, [r3, #0]
 8004054:	e00e      	b.n	8004074 <UART_SetConfig+0x26c>
 8004056:	231b      	movs	r3, #27
 8004058:	2220      	movs	r2, #32
 800405a:	4694      	mov	ip, r2
 800405c:	44bc      	add	ip, r7
 800405e:	4463      	add	r3, ip
 8004060:	2210      	movs	r2, #16
 8004062:	701a      	strb	r2, [r3, #0]
 8004064:	e006      	b.n	8004074 <UART_SetConfig+0x26c>
 8004066:	231b      	movs	r3, #27
 8004068:	2220      	movs	r2, #32
 800406a:	4694      	mov	ip, r2
 800406c:	44bc      	add	ip, r7
 800406e:	4463      	add	r3, ip
 8004070:	2210      	movs	r2, #16
 8004072:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	4a2c      	ldr	r2, [pc, #176]	; (800412c <UART_SetConfig+0x324>)
 800407a:	4293      	cmp	r3, r2
 800407c:	d000      	beq.n	8004080 <UART_SetConfig+0x278>
 800407e:	e0ad      	b.n	80041dc <UART_SetConfig+0x3d4>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004080:	231b      	movs	r3, #27
 8004082:	2220      	movs	r2, #32
 8004084:	4694      	mov	ip, r2
 8004086:	44bc      	add	ip, r7
 8004088:	4463      	add	r3, ip
 800408a:	781b      	ldrb	r3, [r3, #0]
 800408c:	2b08      	cmp	r3, #8
 800408e:	d015      	beq.n	80040bc <UART_SetConfig+0x2b4>
 8004090:	dc18      	bgt.n	80040c4 <UART_SetConfig+0x2bc>
 8004092:	2b04      	cmp	r3, #4
 8004094:	d00d      	beq.n	80040b2 <UART_SetConfig+0x2aa>
 8004096:	dc15      	bgt.n	80040c4 <UART_SetConfig+0x2bc>
 8004098:	2b00      	cmp	r3, #0
 800409a:	d002      	beq.n	80040a2 <UART_SetConfig+0x29a>
 800409c:	2b02      	cmp	r3, #2
 800409e:	d005      	beq.n	80040ac <UART_SetConfig+0x2a4>
 80040a0:	e010      	b.n	80040c4 <UART_SetConfig+0x2bc>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80040a2:	f7fe fd45 	bl	8002b30 <HAL_RCC_GetPCLK1Freq>
 80040a6:	0003      	movs	r3, r0
 80040a8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80040aa:	e015      	b.n	80040d8 <UART_SetConfig+0x2d0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80040ac:	4b26      	ldr	r3, [pc, #152]	; (8004148 <UART_SetConfig+0x340>)
 80040ae:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80040b0:	e012      	b.n	80040d8 <UART_SetConfig+0x2d0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80040b2:	f7fe fcb1 	bl	8002a18 <HAL_RCC_GetSysClockFreq>
 80040b6:	0003      	movs	r3, r0
 80040b8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80040ba:	e00d      	b.n	80040d8 <UART_SetConfig+0x2d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80040bc:	2380      	movs	r3, #128	; 0x80
 80040be:	021b      	lsls	r3, r3, #8
 80040c0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80040c2:	e009      	b.n	80040d8 <UART_SetConfig+0x2d0>
      default:
        pclk = 0U;
 80040c4:	2300      	movs	r3, #0
 80040c6:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80040c8:	231a      	movs	r3, #26
 80040ca:	2220      	movs	r2, #32
 80040cc:	4694      	mov	ip, r2
 80040ce:	44bc      	add	ip, r7
 80040d0:	4463      	add	r3, ip
 80040d2:	2201      	movs	r2, #1
 80040d4:	701a      	strb	r2, [r3, #0]
        break;
 80040d6:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80040d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d100      	bne.n	80040e0 <UART_SetConfig+0x2d8>
 80040de:	e154      	b.n	800438a <UART_SetConfig+0x582>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80040e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040e2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80040e4:	4b19      	ldr	r3, [pc, #100]	; (800414c <UART_SetConfig+0x344>)
 80040e6:	0052      	lsls	r2, r2, #1
 80040e8:	5ad3      	ldrh	r3, [r2, r3]
 80040ea:	0019      	movs	r1, r3
 80040ec:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80040ee:	f7fc f809 	bl	8000104 <__udivsi3>
 80040f2:	0003      	movs	r3, r0
 80040f4:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80040f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040f8:	685a      	ldr	r2, [r3, #4]
 80040fa:	0013      	movs	r3, r2
 80040fc:	005b      	lsls	r3, r3, #1
 80040fe:	189b      	adds	r3, r3, r2
 8004100:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004102:	429a      	cmp	r2, r3
 8004104:	d305      	bcc.n	8004112 <UART_SetConfig+0x30a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004108:	685b      	ldr	r3, [r3, #4]
 800410a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800410c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800410e:	429a      	cmp	r2, r3
 8004110:	d91e      	bls.n	8004150 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8004112:	231a      	movs	r3, #26
 8004114:	2220      	movs	r2, #32
 8004116:	4694      	mov	ip, r2
 8004118:	44bc      	add	ip, r7
 800411a:	4463      	add	r3, ip
 800411c:	2201      	movs	r2, #1
 800411e:	701a      	strb	r2, [r3, #0]
 8004120:	e133      	b.n	800438a <UART_SetConfig+0x582>
 8004122:	46c0      	nop			; (mov r8, r8)
 8004124:	cfff69f3 	.word	0xcfff69f3
 8004128:	ffffcfff 	.word	0xffffcfff
 800412c:	40008000 	.word	0x40008000
 8004130:	11fff4ff 	.word	0x11fff4ff
 8004134:	40013800 	.word	0x40013800
 8004138:	40021000 	.word	0x40021000
 800413c:	40004400 	.word	0x40004400
 8004140:	40004800 	.word	0x40004800
 8004144:	40004c00 	.word	0x40004c00
 8004148:	00f42400 	.word	0x00f42400
 800414c:	08004a54 	.word	0x08004a54
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004150:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004152:	61bb      	str	r3, [r7, #24]
 8004154:	2300      	movs	r3, #0
 8004156:	61fb      	str	r3, [r7, #28]
 8004158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800415a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800415c:	4b97      	ldr	r3, [pc, #604]	; (80043bc <UART_SetConfig+0x5b4>)
 800415e:	0052      	lsls	r2, r2, #1
 8004160:	5ad3      	ldrh	r3, [r2, r3]
 8004162:	613b      	str	r3, [r7, #16]
 8004164:	2300      	movs	r3, #0
 8004166:	617b      	str	r3, [r7, #20]
 8004168:	693a      	ldr	r2, [r7, #16]
 800416a:	697b      	ldr	r3, [r7, #20]
 800416c:	69b8      	ldr	r0, [r7, #24]
 800416e:	69f9      	ldr	r1, [r7, #28]
 8004170:	f7fc f93e 	bl	80003f0 <__aeabi_uldivmod>
 8004174:	0002      	movs	r2, r0
 8004176:	000b      	movs	r3, r1
 8004178:	0e11      	lsrs	r1, r2, #24
 800417a:	021d      	lsls	r5, r3, #8
 800417c:	430d      	orrs	r5, r1
 800417e:	0214      	lsls	r4, r2, #8
 8004180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004182:	685b      	ldr	r3, [r3, #4]
 8004184:	085b      	lsrs	r3, r3, #1
 8004186:	60bb      	str	r3, [r7, #8]
 8004188:	2300      	movs	r3, #0
 800418a:	60fb      	str	r3, [r7, #12]
 800418c:	68b8      	ldr	r0, [r7, #8]
 800418e:	68f9      	ldr	r1, [r7, #12]
 8004190:	1900      	adds	r0, r0, r4
 8004192:	4169      	adcs	r1, r5
 8004194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004196:	685b      	ldr	r3, [r3, #4]
 8004198:	603b      	str	r3, [r7, #0]
 800419a:	2300      	movs	r3, #0
 800419c:	607b      	str	r3, [r7, #4]
 800419e:	683a      	ldr	r2, [r7, #0]
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	f7fc f925 	bl	80003f0 <__aeabi_uldivmod>
 80041a6:	0002      	movs	r2, r0
 80041a8:	000b      	movs	r3, r1
 80041aa:	0013      	movs	r3, r2
 80041ac:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80041ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80041b0:	23c0      	movs	r3, #192	; 0xc0
 80041b2:	009b      	lsls	r3, r3, #2
 80041b4:	429a      	cmp	r2, r3
 80041b6:	d309      	bcc.n	80041cc <UART_SetConfig+0x3c4>
 80041b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80041ba:	2380      	movs	r3, #128	; 0x80
 80041bc:	035b      	lsls	r3, r3, #13
 80041be:	429a      	cmp	r2, r3
 80041c0:	d204      	bcs.n	80041cc <UART_SetConfig+0x3c4>
        {
          huart->Instance->BRR = usartdiv;
 80041c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80041c8:	60da      	str	r2, [r3, #12]
 80041ca:	e0de      	b.n	800438a <UART_SetConfig+0x582>
        }
        else
        {
          ret = HAL_ERROR;
 80041cc:	231a      	movs	r3, #26
 80041ce:	2220      	movs	r2, #32
 80041d0:	4694      	mov	ip, r2
 80041d2:	44bc      	add	ip, r7
 80041d4:	4463      	add	r3, ip
 80041d6:	2201      	movs	r2, #1
 80041d8:	701a      	strb	r2, [r3, #0]
 80041da:	e0d6      	b.n	800438a <UART_SetConfig+0x582>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80041dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041de:	69da      	ldr	r2, [r3, #28]
 80041e0:	2380      	movs	r3, #128	; 0x80
 80041e2:	021b      	lsls	r3, r3, #8
 80041e4:	429a      	cmp	r2, r3
 80041e6:	d000      	beq.n	80041ea <UART_SetConfig+0x3e2>
 80041e8:	e074      	b.n	80042d4 <UART_SetConfig+0x4cc>
  {
    switch (clocksource)
 80041ea:	231b      	movs	r3, #27
 80041ec:	2220      	movs	r2, #32
 80041ee:	4694      	mov	ip, r2
 80041f0:	44bc      	add	ip, r7
 80041f2:	4463      	add	r3, ip
 80041f4:	781b      	ldrb	r3, [r3, #0]
 80041f6:	2b08      	cmp	r3, #8
 80041f8:	d015      	beq.n	8004226 <UART_SetConfig+0x41e>
 80041fa:	dc18      	bgt.n	800422e <UART_SetConfig+0x426>
 80041fc:	2b04      	cmp	r3, #4
 80041fe:	d00d      	beq.n	800421c <UART_SetConfig+0x414>
 8004200:	dc15      	bgt.n	800422e <UART_SetConfig+0x426>
 8004202:	2b00      	cmp	r3, #0
 8004204:	d002      	beq.n	800420c <UART_SetConfig+0x404>
 8004206:	2b02      	cmp	r3, #2
 8004208:	d005      	beq.n	8004216 <UART_SetConfig+0x40e>
 800420a:	e010      	b.n	800422e <UART_SetConfig+0x426>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800420c:	f7fe fc90 	bl	8002b30 <HAL_RCC_GetPCLK1Freq>
 8004210:	0003      	movs	r3, r0
 8004212:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004214:	e015      	b.n	8004242 <UART_SetConfig+0x43a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004216:	4b6a      	ldr	r3, [pc, #424]	; (80043c0 <UART_SetConfig+0x5b8>)
 8004218:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800421a:	e012      	b.n	8004242 <UART_SetConfig+0x43a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800421c:	f7fe fbfc 	bl	8002a18 <HAL_RCC_GetSysClockFreq>
 8004220:	0003      	movs	r3, r0
 8004222:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004224:	e00d      	b.n	8004242 <UART_SetConfig+0x43a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004226:	2380      	movs	r3, #128	; 0x80
 8004228:	021b      	lsls	r3, r3, #8
 800422a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800422c:	e009      	b.n	8004242 <UART_SetConfig+0x43a>
      default:
        pclk = 0U;
 800422e:	2300      	movs	r3, #0
 8004230:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8004232:	231a      	movs	r3, #26
 8004234:	2220      	movs	r2, #32
 8004236:	4694      	mov	ip, r2
 8004238:	44bc      	add	ip, r7
 800423a:	4463      	add	r3, ip
 800423c:	2201      	movs	r2, #1
 800423e:	701a      	strb	r2, [r3, #0]
        break;
 8004240:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004242:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004244:	2b00      	cmp	r3, #0
 8004246:	d100      	bne.n	800424a <UART_SetConfig+0x442>
 8004248:	e09f      	b.n	800438a <UART_SetConfig+0x582>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800424a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800424c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800424e:	4b5b      	ldr	r3, [pc, #364]	; (80043bc <UART_SetConfig+0x5b4>)
 8004250:	0052      	lsls	r2, r2, #1
 8004252:	5ad3      	ldrh	r3, [r2, r3]
 8004254:	0019      	movs	r1, r3
 8004256:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004258:	f7fb ff54 	bl	8000104 <__udivsi3>
 800425c:	0003      	movs	r3, r0
 800425e:	005a      	lsls	r2, r3, #1
 8004260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004262:	685b      	ldr	r3, [r3, #4]
 8004264:	085b      	lsrs	r3, r3, #1
 8004266:	18d2      	adds	r2, r2, r3
 8004268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800426a:	685b      	ldr	r3, [r3, #4]
 800426c:	0019      	movs	r1, r3
 800426e:	0010      	movs	r0, r2
 8004270:	f7fb ff48 	bl	8000104 <__udivsi3>
 8004274:	0003      	movs	r3, r0
 8004276:	b29b      	uxth	r3, r3
 8004278:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800427a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800427c:	2b0f      	cmp	r3, #15
 800427e:	d921      	bls.n	80042c4 <UART_SetConfig+0x4bc>
 8004280:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004282:	2380      	movs	r3, #128	; 0x80
 8004284:	025b      	lsls	r3, r3, #9
 8004286:	429a      	cmp	r2, r3
 8004288:	d21c      	bcs.n	80042c4 <UART_SetConfig+0x4bc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800428a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800428c:	b29a      	uxth	r2, r3
 800428e:	200e      	movs	r0, #14
 8004290:	2420      	movs	r4, #32
 8004292:	193b      	adds	r3, r7, r4
 8004294:	181b      	adds	r3, r3, r0
 8004296:	210f      	movs	r1, #15
 8004298:	438a      	bics	r2, r1
 800429a:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800429c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800429e:	085b      	lsrs	r3, r3, #1
 80042a0:	b29b      	uxth	r3, r3
 80042a2:	2207      	movs	r2, #7
 80042a4:	4013      	ands	r3, r2
 80042a6:	b299      	uxth	r1, r3
 80042a8:	193b      	adds	r3, r7, r4
 80042aa:	181b      	adds	r3, r3, r0
 80042ac:	193a      	adds	r2, r7, r4
 80042ae:	1812      	adds	r2, r2, r0
 80042b0:	8812      	ldrh	r2, [r2, #0]
 80042b2:	430a      	orrs	r2, r1
 80042b4:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80042b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	193a      	adds	r2, r7, r4
 80042bc:	1812      	adds	r2, r2, r0
 80042be:	8812      	ldrh	r2, [r2, #0]
 80042c0:	60da      	str	r2, [r3, #12]
 80042c2:	e062      	b.n	800438a <UART_SetConfig+0x582>
      }
      else
      {
        ret = HAL_ERROR;
 80042c4:	231a      	movs	r3, #26
 80042c6:	2220      	movs	r2, #32
 80042c8:	4694      	mov	ip, r2
 80042ca:	44bc      	add	ip, r7
 80042cc:	4463      	add	r3, ip
 80042ce:	2201      	movs	r2, #1
 80042d0:	701a      	strb	r2, [r3, #0]
 80042d2:	e05a      	b.n	800438a <UART_SetConfig+0x582>
      }
    }
  }
  else
  {
    switch (clocksource)
 80042d4:	231b      	movs	r3, #27
 80042d6:	2220      	movs	r2, #32
 80042d8:	4694      	mov	ip, r2
 80042da:	44bc      	add	ip, r7
 80042dc:	4463      	add	r3, ip
 80042de:	781b      	ldrb	r3, [r3, #0]
 80042e0:	2b08      	cmp	r3, #8
 80042e2:	d015      	beq.n	8004310 <UART_SetConfig+0x508>
 80042e4:	dc18      	bgt.n	8004318 <UART_SetConfig+0x510>
 80042e6:	2b04      	cmp	r3, #4
 80042e8:	d00d      	beq.n	8004306 <UART_SetConfig+0x4fe>
 80042ea:	dc15      	bgt.n	8004318 <UART_SetConfig+0x510>
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d002      	beq.n	80042f6 <UART_SetConfig+0x4ee>
 80042f0:	2b02      	cmp	r3, #2
 80042f2:	d005      	beq.n	8004300 <UART_SetConfig+0x4f8>
 80042f4:	e010      	b.n	8004318 <UART_SetConfig+0x510>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80042f6:	f7fe fc1b 	bl	8002b30 <HAL_RCC_GetPCLK1Freq>
 80042fa:	0003      	movs	r3, r0
 80042fc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80042fe:	e015      	b.n	800432c <UART_SetConfig+0x524>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004300:	4b2f      	ldr	r3, [pc, #188]	; (80043c0 <UART_SetConfig+0x5b8>)
 8004302:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004304:	e012      	b.n	800432c <UART_SetConfig+0x524>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004306:	f7fe fb87 	bl	8002a18 <HAL_RCC_GetSysClockFreq>
 800430a:	0003      	movs	r3, r0
 800430c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800430e:	e00d      	b.n	800432c <UART_SetConfig+0x524>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004310:	2380      	movs	r3, #128	; 0x80
 8004312:	021b      	lsls	r3, r3, #8
 8004314:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004316:	e009      	b.n	800432c <UART_SetConfig+0x524>
      default:
        pclk = 0U;
 8004318:	2300      	movs	r3, #0
 800431a:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 800431c:	231a      	movs	r3, #26
 800431e:	2220      	movs	r2, #32
 8004320:	4694      	mov	ip, r2
 8004322:	44bc      	add	ip, r7
 8004324:	4463      	add	r3, ip
 8004326:	2201      	movs	r2, #1
 8004328:	701a      	strb	r2, [r3, #0]
        break;
 800432a:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800432c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800432e:	2b00      	cmp	r3, #0
 8004330:	d02b      	beq.n	800438a <UART_SetConfig+0x582>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004334:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004336:	4b21      	ldr	r3, [pc, #132]	; (80043bc <UART_SetConfig+0x5b4>)
 8004338:	0052      	lsls	r2, r2, #1
 800433a:	5ad3      	ldrh	r3, [r2, r3]
 800433c:	0019      	movs	r1, r3
 800433e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004340:	f7fb fee0 	bl	8000104 <__udivsi3>
 8004344:	0003      	movs	r3, r0
 8004346:	001a      	movs	r2, r3
 8004348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800434a:	685b      	ldr	r3, [r3, #4]
 800434c:	085b      	lsrs	r3, r3, #1
 800434e:	18d2      	adds	r2, r2, r3
 8004350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004352:	685b      	ldr	r3, [r3, #4]
 8004354:	0019      	movs	r1, r3
 8004356:	0010      	movs	r0, r2
 8004358:	f7fb fed4 	bl	8000104 <__udivsi3>
 800435c:	0003      	movs	r3, r0
 800435e:	b29b      	uxth	r3, r3
 8004360:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004362:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004364:	2b0f      	cmp	r3, #15
 8004366:	d909      	bls.n	800437c <UART_SetConfig+0x574>
 8004368:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800436a:	2380      	movs	r3, #128	; 0x80
 800436c:	025b      	lsls	r3, r3, #9
 800436e:	429a      	cmp	r2, r3
 8004370:	d204      	bcs.n	800437c <UART_SetConfig+0x574>
      {
        huart->Instance->BRR = usartdiv;
 8004372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004378:	60da      	str	r2, [r3, #12]
 800437a:	e006      	b.n	800438a <UART_SetConfig+0x582>
      }
      else
      {
        ret = HAL_ERROR;
 800437c:	231a      	movs	r3, #26
 800437e:	2220      	movs	r2, #32
 8004380:	4694      	mov	ip, r2
 8004382:	44bc      	add	ip, r7
 8004384:	4463      	add	r3, ip
 8004386:	2201      	movs	r2, #1
 8004388:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800438a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800438c:	226a      	movs	r2, #106	; 0x6a
 800438e:	2101      	movs	r1, #1
 8004390:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8004392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004394:	2268      	movs	r2, #104	; 0x68
 8004396:	2101      	movs	r1, #1
 8004398:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800439a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800439c:	2200      	movs	r2, #0
 800439e:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80043a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043a2:	2200      	movs	r2, #0
 80043a4:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80043a6:	231a      	movs	r3, #26
 80043a8:	2220      	movs	r2, #32
 80043aa:	4694      	mov	ip, r2
 80043ac:	44bc      	add	ip, r7
 80043ae:	4463      	add	r3, ip
 80043b0:	781b      	ldrb	r3, [r3, #0]
}
 80043b2:	0018      	movs	r0, r3
 80043b4:	46bd      	mov	sp, r7
 80043b6:	b010      	add	sp, #64	; 0x40
 80043b8:	bdb0      	pop	{r4, r5, r7, pc}
 80043ba:	46c0      	nop			; (mov r8, r8)
 80043bc:	08004a54 	.word	0x08004a54
 80043c0:	00f42400 	.word	0x00f42400

080043c4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	b082      	sub	sp, #8
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043d0:	2201      	movs	r2, #1
 80043d2:	4013      	ands	r3, r2
 80043d4:	d00b      	beq.n	80043ee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	685b      	ldr	r3, [r3, #4]
 80043dc:	4a4a      	ldr	r2, [pc, #296]	; (8004508 <UART_AdvFeatureConfig+0x144>)
 80043de:	4013      	ands	r3, r2
 80043e0:	0019      	movs	r1, r3
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	430a      	orrs	r2, r1
 80043ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043f2:	2202      	movs	r2, #2
 80043f4:	4013      	ands	r3, r2
 80043f6:	d00b      	beq.n	8004410 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	685b      	ldr	r3, [r3, #4]
 80043fe:	4a43      	ldr	r2, [pc, #268]	; (800450c <UART_AdvFeatureConfig+0x148>)
 8004400:	4013      	ands	r3, r2
 8004402:	0019      	movs	r1, r3
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	430a      	orrs	r2, r1
 800440e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004414:	2204      	movs	r2, #4
 8004416:	4013      	ands	r3, r2
 8004418:	d00b      	beq.n	8004432 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	685b      	ldr	r3, [r3, #4]
 8004420:	4a3b      	ldr	r2, [pc, #236]	; (8004510 <UART_AdvFeatureConfig+0x14c>)
 8004422:	4013      	ands	r3, r2
 8004424:	0019      	movs	r1, r3
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	430a      	orrs	r2, r1
 8004430:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004436:	2208      	movs	r2, #8
 8004438:	4013      	ands	r3, r2
 800443a:	d00b      	beq.n	8004454 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	685b      	ldr	r3, [r3, #4]
 8004442:	4a34      	ldr	r2, [pc, #208]	; (8004514 <UART_AdvFeatureConfig+0x150>)
 8004444:	4013      	ands	r3, r2
 8004446:	0019      	movs	r1, r3
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	430a      	orrs	r2, r1
 8004452:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004458:	2210      	movs	r2, #16
 800445a:	4013      	ands	r3, r2
 800445c:	d00b      	beq.n	8004476 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	689b      	ldr	r3, [r3, #8]
 8004464:	4a2c      	ldr	r2, [pc, #176]	; (8004518 <UART_AdvFeatureConfig+0x154>)
 8004466:	4013      	ands	r3, r2
 8004468:	0019      	movs	r1, r3
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	430a      	orrs	r2, r1
 8004474:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800447a:	2220      	movs	r2, #32
 800447c:	4013      	ands	r3, r2
 800447e:	d00b      	beq.n	8004498 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	689b      	ldr	r3, [r3, #8]
 8004486:	4a25      	ldr	r2, [pc, #148]	; (800451c <UART_AdvFeatureConfig+0x158>)
 8004488:	4013      	ands	r3, r2
 800448a:	0019      	movs	r1, r3
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	430a      	orrs	r2, r1
 8004496:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800449c:	2240      	movs	r2, #64	; 0x40
 800449e:	4013      	ands	r3, r2
 80044a0:	d01d      	beq.n	80044de <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	685b      	ldr	r3, [r3, #4]
 80044a8:	4a1d      	ldr	r2, [pc, #116]	; (8004520 <UART_AdvFeatureConfig+0x15c>)
 80044aa:	4013      	ands	r3, r2
 80044ac:	0019      	movs	r1, r3
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	430a      	orrs	r2, r1
 80044b8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80044be:	2380      	movs	r3, #128	; 0x80
 80044c0:	035b      	lsls	r3, r3, #13
 80044c2:	429a      	cmp	r2, r3
 80044c4:	d10b      	bne.n	80044de <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	685b      	ldr	r3, [r3, #4]
 80044cc:	4a15      	ldr	r2, [pc, #84]	; (8004524 <UART_AdvFeatureConfig+0x160>)
 80044ce:	4013      	ands	r3, r2
 80044d0:	0019      	movs	r1, r3
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	430a      	orrs	r2, r1
 80044dc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044e2:	2280      	movs	r2, #128	; 0x80
 80044e4:	4013      	ands	r3, r2
 80044e6:	d00b      	beq.n	8004500 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	685b      	ldr	r3, [r3, #4]
 80044ee:	4a0e      	ldr	r2, [pc, #56]	; (8004528 <UART_AdvFeatureConfig+0x164>)
 80044f0:	4013      	ands	r3, r2
 80044f2:	0019      	movs	r1, r3
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	430a      	orrs	r2, r1
 80044fe:	605a      	str	r2, [r3, #4]
  }
}
 8004500:	46c0      	nop			; (mov r8, r8)
 8004502:	46bd      	mov	sp, r7
 8004504:	b002      	add	sp, #8
 8004506:	bd80      	pop	{r7, pc}
 8004508:	fffdffff 	.word	0xfffdffff
 800450c:	fffeffff 	.word	0xfffeffff
 8004510:	fffbffff 	.word	0xfffbffff
 8004514:	ffff7fff 	.word	0xffff7fff
 8004518:	ffffefff 	.word	0xffffefff
 800451c:	ffffdfff 	.word	0xffffdfff
 8004520:	ffefffff 	.word	0xffefffff
 8004524:	ff9fffff 	.word	0xff9fffff
 8004528:	fff7ffff 	.word	0xfff7ffff

0800452c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800452c:	b580      	push	{r7, lr}
 800452e:	b086      	sub	sp, #24
 8004530:	af02      	add	r7, sp, #8
 8004532:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	228c      	movs	r2, #140	; 0x8c
 8004538:	2100      	movs	r1, #0
 800453a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800453c:	f7fd faae 	bl	8001a9c <HAL_GetTick>
 8004540:	0003      	movs	r3, r0
 8004542:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	2208      	movs	r2, #8
 800454c:	4013      	ands	r3, r2
 800454e:	2b08      	cmp	r3, #8
 8004550:	d10c      	bne.n	800456c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	2280      	movs	r2, #128	; 0x80
 8004556:	0391      	lsls	r1, r2, #14
 8004558:	6878      	ldr	r0, [r7, #4]
 800455a:	4a18      	ldr	r2, [pc, #96]	; (80045bc <UART_CheckIdleState+0x90>)
 800455c:	9200      	str	r2, [sp, #0]
 800455e:	2200      	movs	r2, #0
 8004560:	f000 f82e 	bl	80045c0 <UART_WaitOnFlagUntilTimeout>
 8004564:	1e03      	subs	r3, r0, #0
 8004566:	d001      	beq.n	800456c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004568:	2303      	movs	r3, #3
 800456a:	e023      	b.n	80045b4 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	2204      	movs	r2, #4
 8004574:	4013      	ands	r3, r2
 8004576:	2b04      	cmp	r3, #4
 8004578:	d10c      	bne.n	8004594 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	2280      	movs	r2, #128	; 0x80
 800457e:	03d1      	lsls	r1, r2, #15
 8004580:	6878      	ldr	r0, [r7, #4]
 8004582:	4a0e      	ldr	r2, [pc, #56]	; (80045bc <UART_CheckIdleState+0x90>)
 8004584:	9200      	str	r2, [sp, #0]
 8004586:	2200      	movs	r2, #0
 8004588:	f000 f81a 	bl	80045c0 <UART_WaitOnFlagUntilTimeout>
 800458c:	1e03      	subs	r3, r0, #0
 800458e:	d001      	beq.n	8004594 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004590:	2303      	movs	r3, #3
 8004592:	e00f      	b.n	80045b4 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2284      	movs	r2, #132	; 0x84
 8004598:	2120      	movs	r1, #32
 800459a:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2288      	movs	r2, #136	; 0x88
 80045a0:	2120      	movs	r1, #32
 80045a2:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2200      	movs	r2, #0
 80045a8:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2280      	movs	r2, #128	; 0x80
 80045ae:	2100      	movs	r1, #0
 80045b0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80045b2:	2300      	movs	r3, #0
}
 80045b4:	0018      	movs	r0, r3
 80045b6:	46bd      	mov	sp, r7
 80045b8:	b004      	add	sp, #16
 80045ba:	bd80      	pop	{r7, pc}
 80045bc:	01ffffff 	.word	0x01ffffff

080045c0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b094      	sub	sp, #80	; 0x50
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	60f8      	str	r0, [r7, #12]
 80045c8:	60b9      	str	r1, [r7, #8]
 80045ca:	603b      	str	r3, [r7, #0]
 80045cc:	1dfb      	adds	r3, r7, #7
 80045ce:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80045d0:	e0a7      	b.n	8004722 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045d2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80045d4:	3301      	adds	r3, #1
 80045d6:	d100      	bne.n	80045da <UART_WaitOnFlagUntilTimeout+0x1a>
 80045d8:	e0a3      	b.n	8004722 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045da:	f7fd fa5f 	bl	8001a9c <HAL_GetTick>
 80045de:	0002      	movs	r2, r0
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	1ad3      	subs	r3, r2, r3
 80045e4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80045e6:	429a      	cmp	r2, r3
 80045e8:	d302      	bcc.n	80045f0 <UART_WaitOnFlagUntilTimeout+0x30>
 80045ea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d13f      	bne.n	8004670 <UART_WaitOnFlagUntilTimeout+0xb0>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80045f0:	f3ef 8310 	mrs	r3, PRIMASK
 80045f4:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80045f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80045f8:	647b      	str	r3, [r7, #68]	; 0x44
 80045fa:	2301      	movs	r3, #1
 80045fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004600:	f383 8810 	msr	PRIMASK, r3
}
 8004604:	46c0      	nop			; (mov r8, r8)
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	681a      	ldr	r2, [r3, #0]
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	494e      	ldr	r1, [pc, #312]	; (800474c <UART_WaitOnFlagUntilTimeout+0x18c>)
 8004612:	400a      	ands	r2, r1
 8004614:	601a      	str	r2, [r3, #0]
 8004616:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004618:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800461a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800461c:	f383 8810 	msr	PRIMASK, r3
}
 8004620:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004622:	f3ef 8310 	mrs	r3, PRIMASK
 8004626:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8004628:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800462a:	643b      	str	r3, [r7, #64]	; 0x40
 800462c:	2301      	movs	r3, #1
 800462e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004630:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004632:	f383 8810 	msr	PRIMASK, r3
}
 8004636:	46c0      	nop			; (mov r8, r8)
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	689a      	ldr	r2, [r3, #8]
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	2101      	movs	r1, #1
 8004644:	438a      	bics	r2, r1
 8004646:	609a      	str	r2, [r3, #8]
 8004648:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800464a:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800464c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800464e:	f383 8810 	msr	PRIMASK, r3
}
 8004652:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	2284      	movs	r2, #132	; 0x84
 8004658:	2120      	movs	r1, #32
 800465a:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	2288      	movs	r2, #136	; 0x88
 8004660:	2120      	movs	r1, #32
 8004662:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	2280      	movs	r2, #128	; 0x80
 8004668:	2100      	movs	r1, #0
 800466a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800466c:	2303      	movs	r3, #3
 800466e:	e069      	b.n	8004744 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	2204      	movs	r2, #4
 8004678:	4013      	ands	r3, r2
 800467a:	d052      	beq.n	8004722 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	69da      	ldr	r2, [r3, #28]
 8004682:	2380      	movs	r3, #128	; 0x80
 8004684:	011b      	lsls	r3, r3, #4
 8004686:	401a      	ands	r2, r3
 8004688:	2380      	movs	r3, #128	; 0x80
 800468a:	011b      	lsls	r3, r3, #4
 800468c:	429a      	cmp	r2, r3
 800468e:	d148      	bne.n	8004722 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	2280      	movs	r2, #128	; 0x80
 8004696:	0112      	lsls	r2, r2, #4
 8004698:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800469a:	f3ef 8310 	mrs	r3, PRIMASK
 800469e:	613b      	str	r3, [r7, #16]
  return(result);
 80046a0:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80046a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80046a4:	2301      	movs	r3, #1
 80046a6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046a8:	697b      	ldr	r3, [r7, #20]
 80046aa:	f383 8810 	msr	PRIMASK, r3
}
 80046ae:	46c0      	nop			; (mov r8, r8)
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	681a      	ldr	r2, [r3, #0]
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	4924      	ldr	r1, [pc, #144]	; (800474c <UART_WaitOnFlagUntilTimeout+0x18c>)
 80046bc:	400a      	ands	r2, r1
 80046be:	601a      	str	r2, [r3, #0]
 80046c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80046c2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046c4:	69bb      	ldr	r3, [r7, #24]
 80046c6:	f383 8810 	msr	PRIMASK, r3
}
 80046ca:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80046cc:	f3ef 8310 	mrs	r3, PRIMASK
 80046d0:	61fb      	str	r3, [r7, #28]
  return(result);
 80046d2:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046d4:	64bb      	str	r3, [r7, #72]	; 0x48
 80046d6:	2301      	movs	r3, #1
 80046d8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046da:	6a3b      	ldr	r3, [r7, #32]
 80046dc:	f383 8810 	msr	PRIMASK, r3
}
 80046e0:	46c0      	nop			; (mov r8, r8)
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	689a      	ldr	r2, [r3, #8]
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	2101      	movs	r1, #1
 80046ee:	438a      	bics	r2, r1
 80046f0:	609a      	str	r2, [r3, #8]
 80046f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80046f4:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046f8:	f383 8810 	msr	PRIMASK, r3
}
 80046fc:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	2284      	movs	r2, #132	; 0x84
 8004702:	2120      	movs	r1, #32
 8004704:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	2288      	movs	r2, #136	; 0x88
 800470a:	2120      	movs	r1, #32
 800470c:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	228c      	movs	r2, #140	; 0x8c
 8004712:	2120      	movs	r1, #32
 8004714:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	2280      	movs	r2, #128	; 0x80
 800471a:	2100      	movs	r1, #0
 800471c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800471e:	2303      	movs	r3, #3
 8004720:	e010      	b.n	8004744 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	69db      	ldr	r3, [r3, #28]
 8004728:	68ba      	ldr	r2, [r7, #8]
 800472a:	4013      	ands	r3, r2
 800472c:	68ba      	ldr	r2, [r7, #8]
 800472e:	1ad3      	subs	r3, r2, r3
 8004730:	425a      	negs	r2, r3
 8004732:	4153      	adcs	r3, r2
 8004734:	b2db      	uxtb	r3, r3
 8004736:	001a      	movs	r2, r3
 8004738:	1dfb      	adds	r3, r7, #7
 800473a:	781b      	ldrb	r3, [r3, #0]
 800473c:	429a      	cmp	r2, r3
 800473e:	d100      	bne.n	8004742 <UART_WaitOnFlagUntilTimeout+0x182>
 8004740:	e747      	b.n	80045d2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004742:	2300      	movs	r3, #0
}
 8004744:	0018      	movs	r0, r3
 8004746:	46bd      	mov	sp, r7
 8004748:	b014      	add	sp, #80	; 0x50
 800474a:	bd80      	pop	{r7, pc}
 800474c:	fffffe5f 	.word	0xfffffe5f

08004750 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004750:	b580      	push	{r7, lr}
 8004752:	b084      	sub	sp, #16
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2280      	movs	r2, #128	; 0x80
 800475c:	5c9b      	ldrb	r3, [r3, r2]
 800475e:	2b01      	cmp	r3, #1
 8004760:	d101      	bne.n	8004766 <HAL_UARTEx_DisableFifoMode+0x16>
 8004762:	2302      	movs	r3, #2
 8004764:	e027      	b.n	80047b6 <HAL_UARTEx_DisableFifoMode+0x66>
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	2280      	movs	r2, #128	; 0x80
 800476a:	2101      	movs	r1, #1
 800476c:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	2284      	movs	r2, #132	; 0x84
 8004772:	2124      	movs	r1, #36	; 0x24
 8004774:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	681a      	ldr	r2, [r3, #0]
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	2101      	movs	r1, #1
 800478a:	438a      	bics	r2, r1
 800478c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	4a0b      	ldr	r2, [pc, #44]	; (80047c0 <HAL_UARTEx_DisableFifoMode+0x70>)
 8004792:	4013      	ands	r3, r2
 8004794:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2200      	movs	r2, #0
 800479a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	68fa      	ldr	r2, [r7, #12]
 80047a2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2284      	movs	r2, #132	; 0x84
 80047a8:	2120      	movs	r1, #32
 80047aa:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2280      	movs	r2, #128	; 0x80
 80047b0:	2100      	movs	r1, #0
 80047b2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80047b4:	2300      	movs	r3, #0
}
 80047b6:	0018      	movs	r0, r3
 80047b8:	46bd      	mov	sp, r7
 80047ba:	b004      	add	sp, #16
 80047bc:	bd80      	pop	{r7, pc}
 80047be:	46c0      	nop			; (mov r8, r8)
 80047c0:	dfffffff 	.word	0xdfffffff

080047c4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b084      	sub	sp, #16
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
 80047cc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	2280      	movs	r2, #128	; 0x80
 80047d2:	5c9b      	ldrb	r3, [r3, r2]
 80047d4:	2b01      	cmp	r3, #1
 80047d6:	d101      	bne.n	80047dc <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80047d8:	2302      	movs	r3, #2
 80047da:	e02e      	b.n	800483a <HAL_UARTEx_SetTxFifoThreshold+0x76>
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2280      	movs	r2, #128	; 0x80
 80047e0:	2101      	movs	r1, #1
 80047e2:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2284      	movs	r2, #132	; 0x84
 80047e8:	2124      	movs	r1, #36	; 0x24
 80047ea:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	681a      	ldr	r2, [r3, #0]
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	2101      	movs	r1, #1
 8004800:	438a      	bics	r2, r1
 8004802:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	689b      	ldr	r3, [r3, #8]
 800480a:	00db      	lsls	r3, r3, #3
 800480c:	08d9      	lsrs	r1, r3, #3
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	683a      	ldr	r2, [r7, #0]
 8004814:	430a      	orrs	r2, r1
 8004816:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	0018      	movs	r0, r3
 800481c:	f000 f854 	bl	80048c8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	68fa      	ldr	r2, [r7, #12]
 8004826:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2284      	movs	r2, #132	; 0x84
 800482c:	2120      	movs	r1, #32
 800482e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2280      	movs	r2, #128	; 0x80
 8004834:	2100      	movs	r1, #0
 8004836:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004838:	2300      	movs	r3, #0
}
 800483a:	0018      	movs	r0, r3
 800483c:	46bd      	mov	sp, r7
 800483e:	b004      	add	sp, #16
 8004840:	bd80      	pop	{r7, pc}
	...

08004844 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004844:	b580      	push	{r7, lr}
 8004846:	b084      	sub	sp, #16
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
 800484c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2280      	movs	r2, #128	; 0x80
 8004852:	5c9b      	ldrb	r3, [r3, r2]
 8004854:	2b01      	cmp	r3, #1
 8004856:	d101      	bne.n	800485c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004858:	2302      	movs	r3, #2
 800485a:	e02f      	b.n	80048bc <HAL_UARTEx_SetRxFifoThreshold+0x78>
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2280      	movs	r2, #128	; 0x80
 8004860:	2101      	movs	r1, #1
 8004862:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2284      	movs	r2, #132	; 0x84
 8004868:	2124      	movs	r1, #36	; 0x24
 800486a:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	681a      	ldr	r2, [r3, #0]
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	2101      	movs	r1, #1
 8004880:	438a      	bics	r2, r1
 8004882:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	689b      	ldr	r3, [r3, #8]
 800488a:	4a0e      	ldr	r2, [pc, #56]	; (80048c4 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 800488c:	4013      	ands	r3, r2
 800488e:	0019      	movs	r1, r3
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	683a      	ldr	r2, [r7, #0]
 8004896:	430a      	orrs	r2, r1
 8004898:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	0018      	movs	r0, r3
 800489e:	f000 f813 	bl	80048c8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	68fa      	ldr	r2, [r7, #12]
 80048a8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	2284      	movs	r2, #132	; 0x84
 80048ae:	2120      	movs	r1, #32
 80048b0:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	2280      	movs	r2, #128	; 0x80
 80048b6:	2100      	movs	r1, #0
 80048b8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80048ba:	2300      	movs	r3, #0
}
 80048bc:	0018      	movs	r0, r3
 80048be:	46bd      	mov	sp, r7
 80048c0:	b004      	add	sp, #16
 80048c2:	bd80      	pop	{r7, pc}
 80048c4:	f1ffffff 	.word	0xf1ffffff

080048c8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80048c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80048ca:	b085      	sub	sp, #20
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d108      	bne.n	80048ea <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	226a      	movs	r2, #106	; 0x6a
 80048dc:	2101      	movs	r1, #1
 80048de:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2268      	movs	r2, #104	; 0x68
 80048e4:	2101      	movs	r1, #1
 80048e6:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80048e8:	e043      	b.n	8004972 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80048ea:	260f      	movs	r6, #15
 80048ec:	19bb      	adds	r3, r7, r6
 80048ee:	2208      	movs	r2, #8
 80048f0:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80048f2:	200e      	movs	r0, #14
 80048f4:	183b      	adds	r3, r7, r0
 80048f6:	2208      	movs	r2, #8
 80048f8:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	689b      	ldr	r3, [r3, #8]
 8004900:	0e5b      	lsrs	r3, r3, #25
 8004902:	b2da      	uxtb	r2, r3
 8004904:	240d      	movs	r4, #13
 8004906:	193b      	adds	r3, r7, r4
 8004908:	2107      	movs	r1, #7
 800490a:	400a      	ands	r2, r1
 800490c:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	689b      	ldr	r3, [r3, #8]
 8004914:	0f5b      	lsrs	r3, r3, #29
 8004916:	b2da      	uxtb	r2, r3
 8004918:	250c      	movs	r5, #12
 800491a:	197b      	adds	r3, r7, r5
 800491c:	2107      	movs	r1, #7
 800491e:	400a      	ands	r2, r1
 8004920:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004922:	183b      	adds	r3, r7, r0
 8004924:	781b      	ldrb	r3, [r3, #0]
 8004926:	197a      	adds	r2, r7, r5
 8004928:	7812      	ldrb	r2, [r2, #0]
 800492a:	4914      	ldr	r1, [pc, #80]	; (800497c <UARTEx_SetNbDataToProcess+0xb4>)
 800492c:	5c8a      	ldrb	r2, [r1, r2]
 800492e:	435a      	muls	r2, r3
 8004930:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8004932:	197b      	adds	r3, r7, r5
 8004934:	781b      	ldrb	r3, [r3, #0]
 8004936:	4a12      	ldr	r2, [pc, #72]	; (8004980 <UARTEx_SetNbDataToProcess+0xb8>)
 8004938:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800493a:	0019      	movs	r1, r3
 800493c:	f7fb fc6c 	bl	8000218 <__divsi3>
 8004940:	0003      	movs	r3, r0
 8004942:	b299      	uxth	r1, r3
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	226a      	movs	r2, #106	; 0x6a
 8004948:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800494a:	19bb      	adds	r3, r7, r6
 800494c:	781b      	ldrb	r3, [r3, #0]
 800494e:	193a      	adds	r2, r7, r4
 8004950:	7812      	ldrb	r2, [r2, #0]
 8004952:	490a      	ldr	r1, [pc, #40]	; (800497c <UARTEx_SetNbDataToProcess+0xb4>)
 8004954:	5c8a      	ldrb	r2, [r1, r2]
 8004956:	435a      	muls	r2, r3
 8004958:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 800495a:	193b      	adds	r3, r7, r4
 800495c:	781b      	ldrb	r3, [r3, #0]
 800495e:	4a08      	ldr	r2, [pc, #32]	; (8004980 <UARTEx_SetNbDataToProcess+0xb8>)
 8004960:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004962:	0019      	movs	r1, r3
 8004964:	f7fb fc58 	bl	8000218 <__divsi3>
 8004968:	0003      	movs	r3, r0
 800496a:	b299      	uxth	r1, r3
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2268      	movs	r2, #104	; 0x68
 8004970:	5299      	strh	r1, [r3, r2]
}
 8004972:	46c0      	nop			; (mov r8, r8)
 8004974:	46bd      	mov	sp, r7
 8004976:	b005      	add	sp, #20
 8004978:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800497a:	46c0      	nop			; (mov r8, r8)
 800497c:	08004a6c 	.word	0x08004a6c
 8004980:	08004a74 	.word	0x08004a74

08004984 <__libc_init_array>:
 8004984:	b570      	push	{r4, r5, r6, lr}
 8004986:	2600      	movs	r6, #0
 8004988:	4d0c      	ldr	r5, [pc, #48]	; (80049bc <__libc_init_array+0x38>)
 800498a:	4c0d      	ldr	r4, [pc, #52]	; (80049c0 <__libc_init_array+0x3c>)
 800498c:	1b64      	subs	r4, r4, r5
 800498e:	10a4      	asrs	r4, r4, #2
 8004990:	42a6      	cmp	r6, r4
 8004992:	d109      	bne.n	80049a8 <__libc_init_array+0x24>
 8004994:	2600      	movs	r6, #0
 8004996:	f000 f821 	bl	80049dc <_init>
 800499a:	4d0a      	ldr	r5, [pc, #40]	; (80049c4 <__libc_init_array+0x40>)
 800499c:	4c0a      	ldr	r4, [pc, #40]	; (80049c8 <__libc_init_array+0x44>)
 800499e:	1b64      	subs	r4, r4, r5
 80049a0:	10a4      	asrs	r4, r4, #2
 80049a2:	42a6      	cmp	r6, r4
 80049a4:	d105      	bne.n	80049b2 <__libc_init_array+0x2e>
 80049a6:	bd70      	pop	{r4, r5, r6, pc}
 80049a8:	00b3      	lsls	r3, r6, #2
 80049aa:	58eb      	ldr	r3, [r5, r3]
 80049ac:	4798      	blx	r3
 80049ae:	3601      	adds	r6, #1
 80049b0:	e7ee      	b.n	8004990 <__libc_init_array+0xc>
 80049b2:	00b3      	lsls	r3, r6, #2
 80049b4:	58eb      	ldr	r3, [r5, r3]
 80049b6:	4798      	blx	r3
 80049b8:	3601      	adds	r6, #1
 80049ba:	e7f2      	b.n	80049a2 <__libc_init_array+0x1e>
 80049bc:	08004a84 	.word	0x08004a84
 80049c0:	08004a84 	.word	0x08004a84
 80049c4:	08004a84 	.word	0x08004a84
 80049c8:	08004a88 	.word	0x08004a88

080049cc <memset>:
 80049cc:	0003      	movs	r3, r0
 80049ce:	1882      	adds	r2, r0, r2
 80049d0:	4293      	cmp	r3, r2
 80049d2:	d100      	bne.n	80049d6 <memset+0xa>
 80049d4:	4770      	bx	lr
 80049d6:	7019      	strb	r1, [r3, #0]
 80049d8:	3301      	adds	r3, #1
 80049da:	e7f9      	b.n	80049d0 <memset+0x4>

080049dc <_init>:
 80049dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049de:	46c0      	nop			; (mov r8, r8)
 80049e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049e2:	bc08      	pop	{r3}
 80049e4:	469e      	mov	lr, r3
 80049e6:	4770      	bx	lr

080049e8 <_fini>:
 80049e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049ea:	46c0      	nop			; (mov r8, r8)
 80049ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049ee:	bc08      	pop	{r3}
 80049f0:	469e      	mov	lr, r3
 80049f2:	4770      	bx	lr
