
F411CEU6_max30102_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005160  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ec0  08005300  08005300  00015300  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080061c0  080061c0  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  080061c0  080061c0  000161c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080061c8  080061c8  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080061c8  080061c8  000161c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080061cc  080061cc  000161cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  080061d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002f68  20000078  08006248  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002fe0  08006248  00022fe0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000db56  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001eb0  00000000  00000000  0002dbfe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000aa8  00000000  00000000  0002fab0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a00  00000000  00000000  00030558  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001663a  00000000  00000000  00030f58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e1ad  00000000  00000000  00047592  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000895d8  00000000  00000000  0005573f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ded17  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002f30  00000000  00000000  000ded6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000078 	.word	0x20000078
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080052e8 	.word	0x080052e8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000007c 	.word	0x2000007c
 80001dc:	080052e8 	.word	0x080052e8

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96e 	b.w	8000584 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468c      	mov	ip, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	f040 8083 	bne.w	80003d6 <__udivmoddi4+0x116>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d947      	bls.n	8000366 <__udivmoddi4+0xa6>
 80002d6:	fab2 f282 	clz	r2, r2
 80002da:	b142      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002dc:	f1c2 0020 	rsb	r0, r2, #32
 80002e0:	fa24 f000 	lsr.w	r0, r4, r0
 80002e4:	4091      	lsls	r1, r2
 80002e6:	4097      	lsls	r7, r2
 80002e8:	ea40 0c01 	orr.w	ip, r0, r1
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbbc f6f8 	udiv	r6, ip, r8
 80002f8:	fa1f fe87 	uxth.w	lr, r7
 80002fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb06 f10e 	mul.w	r1, r6, lr
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18fb      	adds	r3, r7, r3
 800030e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000312:	f080 8119 	bcs.w	8000548 <__udivmoddi4+0x288>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8116 	bls.w	8000548 <__udivmoddi4+0x288>
 800031c:	3e02      	subs	r6, #2
 800031e:	443b      	add	r3, r7
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0f8 	udiv	r0, r3, r8
 8000328:	fb08 3310 	mls	r3, r8, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fe0e 	mul.w	lr, r0, lr
 8000334:	45a6      	cmp	lr, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	193c      	adds	r4, r7, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	f080 8105 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000342:	45a6      	cmp	lr, r4
 8000344:	f240 8102 	bls.w	800054c <__udivmoddi4+0x28c>
 8000348:	3802      	subs	r0, #2
 800034a:	443c      	add	r4, r7
 800034c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000350:	eba4 040e 	sub.w	r4, r4, lr
 8000354:	2600      	movs	r6, #0
 8000356:	b11d      	cbz	r5, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c5 4300 	strd	r4, r3, [r5]
 8000360:	4631      	mov	r1, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	b902      	cbnz	r2, 800036a <__udivmoddi4+0xaa>
 8000368:	deff      	udf	#255	; 0xff
 800036a:	fab2 f282 	clz	r2, r2
 800036e:	2a00      	cmp	r2, #0
 8000370:	d150      	bne.n	8000414 <__udivmoddi4+0x154>
 8000372:	1bcb      	subs	r3, r1, r7
 8000374:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	2601      	movs	r6, #1
 800037e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000382:	0c21      	lsrs	r1, r4, #16
 8000384:	fb0e 331c 	mls	r3, lr, ip, r3
 8000388:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800038c:	fb08 f30c 	mul.w	r3, r8, ip
 8000390:	428b      	cmp	r3, r1
 8000392:	d907      	bls.n	80003a4 <__udivmoddi4+0xe4>
 8000394:	1879      	adds	r1, r7, r1
 8000396:	f10c 30ff 	add.w	r0, ip, #4294967295
 800039a:	d202      	bcs.n	80003a2 <__udivmoddi4+0xe2>
 800039c:	428b      	cmp	r3, r1
 800039e:	f200 80e9 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003a2:	4684      	mov	ip, r0
 80003a4:	1ac9      	subs	r1, r1, r3
 80003a6:	b2a3      	uxth	r3, r4
 80003a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80003b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003b4:	fb08 f800 	mul.w	r8, r8, r0
 80003b8:	45a0      	cmp	r8, r4
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x10c>
 80003bc:	193c      	adds	r4, r7, r4
 80003be:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x10a>
 80003c4:	45a0      	cmp	r8, r4
 80003c6:	f200 80d9 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003ca:	4618      	mov	r0, r3
 80003cc:	eba4 0408 	sub.w	r4, r4, r8
 80003d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003d4:	e7bf      	b.n	8000356 <__udivmoddi4+0x96>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d909      	bls.n	80003ee <__udivmoddi4+0x12e>
 80003da:	2d00      	cmp	r5, #0
 80003dc:	f000 80b1 	beq.w	8000542 <__udivmoddi4+0x282>
 80003e0:	2600      	movs	r6, #0
 80003e2:	e9c5 0100 	strd	r0, r1, [r5]
 80003e6:	4630      	mov	r0, r6
 80003e8:	4631      	mov	r1, r6
 80003ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ee:	fab3 f683 	clz	r6, r3
 80003f2:	2e00      	cmp	r6, #0
 80003f4:	d14a      	bne.n	800048c <__udivmoddi4+0x1cc>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d302      	bcc.n	8000400 <__udivmoddi4+0x140>
 80003fa:	4282      	cmp	r2, r0
 80003fc:	f200 80b8 	bhi.w	8000570 <__udivmoddi4+0x2b0>
 8000400:	1a84      	subs	r4, r0, r2
 8000402:	eb61 0103 	sbc.w	r1, r1, r3
 8000406:	2001      	movs	r0, #1
 8000408:	468c      	mov	ip, r1
 800040a:	2d00      	cmp	r5, #0
 800040c:	d0a8      	beq.n	8000360 <__udivmoddi4+0xa0>
 800040e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000412:	e7a5      	b.n	8000360 <__udivmoddi4+0xa0>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f603 	lsr.w	r6, r0, r3
 800041c:	4097      	lsls	r7, r2
 800041e:	fa01 f002 	lsl.w	r0, r1, r2
 8000422:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000426:	40d9      	lsrs	r1, r3
 8000428:	4330      	orrs	r0, r6
 800042a:	0c03      	lsrs	r3, r0, #16
 800042c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000430:	fa1f f887 	uxth.w	r8, r7
 8000434:	fb0e 1116 	mls	r1, lr, r6, r1
 8000438:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043c:	fb06 f108 	mul.w	r1, r6, r8
 8000440:	4299      	cmp	r1, r3
 8000442:	fa04 f402 	lsl.w	r4, r4, r2
 8000446:	d909      	bls.n	800045c <__udivmoddi4+0x19c>
 8000448:	18fb      	adds	r3, r7, r3
 800044a:	f106 3cff 	add.w	ip, r6, #4294967295
 800044e:	f080 808d 	bcs.w	800056c <__udivmoddi4+0x2ac>
 8000452:	4299      	cmp	r1, r3
 8000454:	f240 808a 	bls.w	800056c <__udivmoddi4+0x2ac>
 8000458:	3e02      	subs	r6, #2
 800045a:	443b      	add	r3, r7
 800045c:	1a5b      	subs	r3, r3, r1
 800045e:	b281      	uxth	r1, r0
 8000460:	fbb3 f0fe 	udiv	r0, r3, lr
 8000464:	fb0e 3310 	mls	r3, lr, r0, r3
 8000468:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046c:	fb00 f308 	mul.w	r3, r0, r8
 8000470:	428b      	cmp	r3, r1
 8000472:	d907      	bls.n	8000484 <__udivmoddi4+0x1c4>
 8000474:	1879      	adds	r1, r7, r1
 8000476:	f100 3cff 	add.w	ip, r0, #4294967295
 800047a:	d273      	bcs.n	8000564 <__udivmoddi4+0x2a4>
 800047c:	428b      	cmp	r3, r1
 800047e:	d971      	bls.n	8000564 <__udivmoddi4+0x2a4>
 8000480:	3802      	subs	r0, #2
 8000482:	4439      	add	r1, r7
 8000484:	1acb      	subs	r3, r1, r3
 8000486:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800048a:	e778      	b.n	800037e <__udivmoddi4+0xbe>
 800048c:	f1c6 0c20 	rsb	ip, r6, #32
 8000490:	fa03 f406 	lsl.w	r4, r3, r6
 8000494:	fa22 f30c 	lsr.w	r3, r2, ip
 8000498:	431c      	orrs	r4, r3
 800049a:	fa20 f70c 	lsr.w	r7, r0, ip
 800049e:	fa01 f306 	lsl.w	r3, r1, r6
 80004a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004aa:	431f      	orrs	r7, r3
 80004ac:	0c3b      	lsrs	r3, r7, #16
 80004ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80004b2:	fa1f f884 	uxth.w	r8, r4
 80004b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004be:	fb09 fa08 	mul.w	sl, r9, r8
 80004c2:	458a      	cmp	sl, r1
 80004c4:	fa02 f206 	lsl.w	r2, r2, r6
 80004c8:	fa00 f306 	lsl.w	r3, r0, r6
 80004cc:	d908      	bls.n	80004e0 <__udivmoddi4+0x220>
 80004ce:	1861      	adds	r1, r4, r1
 80004d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004d4:	d248      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 80004d6:	458a      	cmp	sl, r1
 80004d8:	d946      	bls.n	8000568 <__udivmoddi4+0x2a8>
 80004da:	f1a9 0902 	sub.w	r9, r9, #2
 80004de:	4421      	add	r1, r4
 80004e0:	eba1 010a 	sub.w	r1, r1, sl
 80004e4:	b2bf      	uxth	r7, r7
 80004e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004f2:	fb00 f808 	mul.w	r8, r0, r8
 80004f6:	45b8      	cmp	r8, r7
 80004f8:	d907      	bls.n	800050a <__udivmoddi4+0x24a>
 80004fa:	19e7      	adds	r7, r4, r7
 80004fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000500:	d22e      	bcs.n	8000560 <__udivmoddi4+0x2a0>
 8000502:	45b8      	cmp	r8, r7
 8000504:	d92c      	bls.n	8000560 <__udivmoddi4+0x2a0>
 8000506:	3802      	subs	r0, #2
 8000508:	4427      	add	r7, r4
 800050a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800050e:	eba7 0708 	sub.w	r7, r7, r8
 8000512:	fba0 8902 	umull	r8, r9, r0, r2
 8000516:	454f      	cmp	r7, r9
 8000518:	46c6      	mov	lr, r8
 800051a:	4649      	mov	r1, r9
 800051c:	d31a      	bcc.n	8000554 <__udivmoddi4+0x294>
 800051e:	d017      	beq.n	8000550 <__udivmoddi4+0x290>
 8000520:	b15d      	cbz	r5, 800053a <__udivmoddi4+0x27a>
 8000522:	ebb3 020e 	subs.w	r2, r3, lr
 8000526:	eb67 0701 	sbc.w	r7, r7, r1
 800052a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800052e:	40f2      	lsrs	r2, r6
 8000530:	ea4c 0202 	orr.w	r2, ip, r2
 8000534:	40f7      	lsrs	r7, r6
 8000536:	e9c5 2700 	strd	r2, r7, [r5]
 800053a:	2600      	movs	r6, #0
 800053c:	4631      	mov	r1, r6
 800053e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e70b      	b.n	8000360 <__udivmoddi4+0xa0>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e9      	b.n	8000320 <__udivmoddi4+0x60>
 800054c:	4618      	mov	r0, r3
 800054e:	e6fd      	b.n	800034c <__udivmoddi4+0x8c>
 8000550:	4543      	cmp	r3, r8
 8000552:	d2e5      	bcs.n	8000520 <__udivmoddi4+0x260>
 8000554:	ebb8 0e02 	subs.w	lr, r8, r2
 8000558:	eb69 0104 	sbc.w	r1, r9, r4
 800055c:	3801      	subs	r0, #1
 800055e:	e7df      	b.n	8000520 <__udivmoddi4+0x260>
 8000560:	4608      	mov	r0, r1
 8000562:	e7d2      	b.n	800050a <__udivmoddi4+0x24a>
 8000564:	4660      	mov	r0, ip
 8000566:	e78d      	b.n	8000484 <__udivmoddi4+0x1c4>
 8000568:	4681      	mov	r9, r0
 800056a:	e7b9      	b.n	80004e0 <__udivmoddi4+0x220>
 800056c:	4666      	mov	r6, ip
 800056e:	e775      	b.n	800045c <__udivmoddi4+0x19c>
 8000570:	4630      	mov	r0, r6
 8000572:	e74a      	b.n	800040a <__udivmoddi4+0x14a>
 8000574:	f1ac 0c02 	sub.w	ip, ip, #2
 8000578:	4439      	add	r1, r7
 800057a:	e713      	b.n	80003a4 <__udivmoddi4+0xe4>
 800057c:	3802      	subs	r0, #2
 800057e:	443c      	add	r4, r7
 8000580:	e724      	b.n	80003cc <__udivmoddi4+0x10c>
 8000582:	bf00      	nop

08000584 <__aeabi_idiv0>:
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop

08000588 <Max30102_WriteReg>:
}MAX30102_STATE;

MAX30102_STATE StateMachine;

MAX30102_STATUS Max30102_WriteReg(uint8_t uch_addr, uint8_t uch_data)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b086      	sub	sp, #24
 800058c:	af04      	add	r7, sp, #16
 800058e:	4603      	mov	r3, r0
 8000590:	460a      	mov	r2, r1
 8000592:	71fb      	strb	r3, [r7, #7]
 8000594:	4613      	mov	r3, r2
 8000596:	71bb      	strb	r3, [r7, #6]
	if(HAL_I2C_Mem_Write(i2c_max30102, MAX30102_ADDRESS, uch_addr, 1, &uch_data, 1, I2C_TIMEOUT) == HAL_OK)
 8000598:	4b0b      	ldr	r3, [pc, #44]	; (80005c8 <Max30102_WriteReg+0x40>)
 800059a:	6818      	ldr	r0, [r3, #0]
 800059c:	79fb      	ldrb	r3, [r7, #7]
 800059e:	b29a      	uxth	r2, r3
 80005a0:	2301      	movs	r3, #1
 80005a2:	9302      	str	r3, [sp, #8]
 80005a4:	2301      	movs	r3, #1
 80005a6:	9301      	str	r3, [sp, #4]
 80005a8:	1dbb      	adds	r3, r7, #6
 80005aa:	9300      	str	r3, [sp, #0]
 80005ac:	2301      	movs	r3, #1
 80005ae:	21ae      	movs	r1, #174	; 0xae
 80005b0:	f002 fc60 	bl	8002e74 <HAL_I2C_Mem_Write>
 80005b4:	4603      	mov	r3, r0
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d101      	bne.n	80005be <Max30102_WriteReg+0x36>
		return MAX30102_OK;
 80005ba:	2301      	movs	r3, #1
 80005bc:	e000      	b.n	80005c0 <Max30102_WriteReg+0x38>
	return MAX30102_ERROR;
 80005be:	2300      	movs	r3, #0
}
 80005c0:	4618      	mov	r0, r3
 80005c2:	3708      	adds	r7, #8
 80005c4:	46bd      	mov	sp, r7
 80005c6:	bd80      	pop	{r7, pc}
 80005c8:	20001c0c 	.word	0x20001c0c

080005cc <Max30102_ReadReg>:

MAX30102_STATUS Max30102_ReadReg(uint8_t uch_addr, uint8_t *puch_data)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b086      	sub	sp, #24
 80005d0:	af04      	add	r7, sp, #16
 80005d2:	4603      	mov	r3, r0
 80005d4:	6039      	str	r1, [r7, #0]
 80005d6:	71fb      	strb	r3, [r7, #7]
	if(HAL_I2C_Mem_Read(i2c_max30102, MAX30102_ADDRESS, uch_addr, 1, puch_data, 1, I2C_TIMEOUT) == HAL_OK)
 80005d8:	4b0b      	ldr	r3, [pc, #44]	; (8000608 <Max30102_ReadReg+0x3c>)
 80005da:	6818      	ldr	r0, [r3, #0]
 80005dc:	79fb      	ldrb	r3, [r7, #7]
 80005de:	b29a      	uxth	r2, r3
 80005e0:	2301      	movs	r3, #1
 80005e2:	9302      	str	r3, [sp, #8]
 80005e4:	2301      	movs	r3, #1
 80005e6:	9301      	str	r3, [sp, #4]
 80005e8:	683b      	ldr	r3, [r7, #0]
 80005ea:	9300      	str	r3, [sp, #0]
 80005ec:	2301      	movs	r3, #1
 80005ee:	21ae      	movs	r1, #174	; 0xae
 80005f0:	f002 fd3a 	bl	8003068 <HAL_I2C_Mem_Read>
 80005f4:	4603      	mov	r3, r0
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d101      	bne.n	80005fe <Max30102_ReadReg+0x32>
		return MAX30102_OK;
 80005fa:	2301      	movs	r3, #1
 80005fc:	e000      	b.n	8000600 <Max30102_ReadReg+0x34>
	return MAX30102_ERROR;
 80005fe:	2300      	movs	r3, #0
}
 8000600:	4618      	mov	r0, r3
 8000602:	3708      	adds	r7, #8
 8000604:	46bd      	mov	sp, r7
 8000606:	bd80      	pop	{r7, pc}
 8000608:	20001c0c 	.word	0x20001c0c

0800060c <Max30102_WriteRegisterBit>:

MAX30102_STATUS Max30102_WriteRegisterBit(uint8_t Register, uint8_t Bit, uint8_t Value)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b084      	sub	sp, #16
 8000610:	af00      	add	r7, sp, #0
 8000612:	4603      	mov	r3, r0
 8000614:	71fb      	strb	r3, [r7, #7]
 8000616:	460b      	mov	r3, r1
 8000618:	71bb      	strb	r3, [r7, #6]
 800061a:	4613      	mov	r3, r2
 800061c:	717b      	strb	r3, [r7, #5]
	uint8_t tmp;
	if(MAX30102_OK != Max30102_ReadReg(Register, &tmp))
 800061e:	f107 020f 	add.w	r2, r7, #15
 8000622:	79fb      	ldrb	r3, [r7, #7]
 8000624:	4611      	mov	r1, r2
 8000626:	4618      	mov	r0, r3
 8000628:	f7ff ffd0 	bl	80005cc <Max30102_ReadReg>
 800062c:	4603      	mov	r3, r0
 800062e:	2b01      	cmp	r3, #1
 8000630:	d001      	beq.n	8000636 <Max30102_WriteRegisterBit+0x2a>
		return MAX30102_ERROR;
 8000632:	2300      	movs	r3, #0
 8000634:	e025      	b.n	8000682 <Max30102_WriteRegisterBit+0x76>
	tmp &= ~(1<<Bit);
 8000636:	79bb      	ldrb	r3, [r7, #6]
 8000638:	2201      	movs	r2, #1
 800063a:	fa02 f303 	lsl.w	r3, r2, r3
 800063e:	b25b      	sxtb	r3, r3
 8000640:	43db      	mvns	r3, r3
 8000642:	b25a      	sxtb	r2, r3
 8000644:	7bfb      	ldrb	r3, [r7, #15]
 8000646:	b25b      	sxtb	r3, r3
 8000648:	4013      	ands	r3, r2
 800064a:	b25b      	sxtb	r3, r3
 800064c:	b2db      	uxtb	r3, r3
 800064e:	73fb      	strb	r3, [r7, #15]
	tmp |= (Value&0x01)<<Bit;
 8000650:	797b      	ldrb	r3, [r7, #5]
 8000652:	f003 0201 	and.w	r2, r3, #1
 8000656:	79bb      	ldrb	r3, [r7, #6]
 8000658:	fa02 f303 	lsl.w	r3, r2, r3
 800065c:	b25a      	sxtb	r2, r3
 800065e:	7bfb      	ldrb	r3, [r7, #15]
 8000660:	b25b      	sxtb	r3, r3
 8000662:	4313      	orrs	r3, r2
 8000664:	b25b      	sxtb	r3, r3
 8000666:	b2db      	uxtb	r3, r3
 8000668:	73fb      	strb	r3, [r7, #15]
	if(MAX30102_OK != Max30102_WriteReg(Register, tmp))
 800066a:	7bfa      	ldrb	r2, [r7, #15]
 800066c:	79fb      	ldrb	r3, [r7, #7]
 800066e:	4611      	mov	r1, r2
 8000670:	4618      	mov	r0, r3
 8000672:	f7ff ff89 	bl	8000588 <Max30102_WriteReg>
 8000676:	4603      	mov	r3, r0
 8000678:	2b01      	cmp	r3, #1
 800067a:	d001      	beq.n	8000680 <Max30102_WriteRegisterBit+0x74>
		return MAX30102_ERROR;
 800067c:	2300      	movs	r3, #0
 800067e:	e000      	b.n	8000682 <Max30102_WriteRegisterBit+0x76>

	return MAX30102_OK;
 8000680:	2301      	movs	r3, #1
}
 8000682:	4618      	mov	r0, r3
 8000684:	3710      	adds	r7, #16
 8000686:	46bd      	mov	sp, r7
 8000688:	bd80      	pop	{r7, pc}

0800068a <Max30102_SetIntAlmostFullEnabled>:

//
//	Interrupts
//
MAX30102_STATUS Max30102_SetIntAlmostFullEnabled(uint8_t Enable)
{
 800068a:	b580      	push	{r7, lr}
 800068c:	b082      	sub	sp, #8
 800068e:	af00      	add	r7, sp, #0
 8000690:	4603      	mov	r3, r0
 8000692:	71fb      	strb	r3, [r7, #7]
	return Max30102_WriteRegisterBit(REG_INTR_ENABLE_1, INT_A_FULL_BIT, Enable);
 8000694:	79fb      	ldrb	r3, [r7, #7]
 8000696:	461a      	mov	r2, r3
 8000698:	2107      	movs	r1, #7
 800069a:	2002      	movs	r0, #2
 800069c:	f7ff ffb6 	bl	800060c <Max30102_WriteRegisterBit>
 80006a0:	4603      	mov	r3, r0
}
 80006a2:	4618      	mov	r0, r3
 80006a4:	3708      	adds	r7, #8
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bd80      	pop	{r7, pc}

080006aa <Max30102_SetIntFifoDataReadyEnabled>:

MAX30102_STATUS Max30102_SetIntFifoDataReadyEnabled(uint8_t Enable)
{
 80006aa:	b580      	push	{r7, lr}
 80006ac:	b082      	sub	sp, #8
 80006ae:	af00      	add	r7, sp, #0
 80006b0:	4603      	mov	r3, r0
 80006b2:	71fb      	strb	r3, [r7, #7]

	return Max30102_WriteRegisterBit(REG_INTR_ENABLE_1, INT_PPG_RDY_BIT, Enable);
 80006b4:	79fb      	ldrb	r3, [r7, #7]
 80006b6:	461a      	mov	r2, r3
 80006b8:	2106      	movs	r1, #6
 80006ba:	2002      	movs	r0, #2
 80006bc:	f7ff ffa6 	bl	800060c <Max30102_WriteRegisterBit>
 80006c0:	4603      	mov	r3, r0
}
 80006c2:	4618      	mov	r0, r3
 80006c4:	3708      	adds	r7, #8
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bd80      	pop	{r7, pc}

080006ca <Max30102_FifoWritePointer>:

//
//	FIFO Configuration
//
MAX30102_STATUS Max30102_FifoWritePointer(uint8_t Address)
{
 80006ca:	b580      	push	{r7, lr}
 80006cc:	b082      	sub	sp, #8
 80006ce:	af00      	add	r7, sp, #0
 80006d0:	4603      	mov	r3, r0
 80006d2:	71fb      	strb	r3, [r7, #7]
	if(MAX30102_OK != Max30102_WriteReg(REG_FIFO_WR_PTR,(Address & 0x1F)))  //FIFO_WR_PTR[4:0]
 80006d4:	79fb      	ldrb	r3, [r7, #7]
 80006d6:	f003 031f 	and.w	r3, r3, #31
 80006da:	b2db      	uxtb	r3, r3
 80006dc:	4619      	mov	r1, r3
 80006de:	2004      	movs	r0, #4
 80006e0:	f7ff ff52 	bl	8000588 <Max30102_WriteReg>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b01      	cmp	r3, #1
 80006e8:	d001      	beq.n	80006ee <Max30102_FifoWritePointer+0x24>
			return MAX30102_ERROR;
 80006ea:	2300      	movs	r3, #0
 80006ec:	e000      	b.n	80006f0 <Max30102_FifoWritePointer+0x26>
	return MAX30102_OK;
 80006ee:	2301      	movs	r3, #1
}
 80006f0:	4618      	mov	r0, r3
 80006f2:	3708      	adds	r7, #8
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bd80      	pop	{r7, pc}

080006f8 <Max30102_FifoOverflowCounter>:

MAX30102_STATUS Max30102_FifoOverflowCounter(uint8_t Address)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b082      	sub	sp, #8
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	4603      	mov	r3, r0
 8000700:	71fb      	strb	r3, [r7, #7]
	if(MAX30102_OK != Max30102_WriteReg(REG_OVF_COUNTER,(Address & 0x1F)))  //OVF_COUNTER[4:0]
 8000702:	79fb      	ldrb	r3, [r7, #7]
 8000704:	f003 031f 	and.w	r3, r3, #31
 8000708:	b2db      	uxtb	r3, r3
 800070a:	4619      	mov	r1, r3
 800070c:	2005      	movs	r0, #5
 800070e:	f7ff ff3b 	bl	8000588 <Max30102_WriteReg>
 8000712:	4603      	mov	r3, r0
 8000714:	2b01      	cmp	r3, #1
 8000716:	d001      	beq.n	800071c <Max30102_FifoOverflowCounter+0x24>
			return MAX30102_ERROR;
 8000718:	2300      	movs	r3, #0
 800071a:	e000      	b.n	800071e <Max30102_FifoOverflowCounter+0x26>
	return MAX30102_OK;
 800071c:	2301      	movs	r3, #1
}
 800071e:	4618      	mov	r0, r3
 8000720:	3708      	adds	r7, #8
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}

08000726 <Max30102_FifoReadPointer>:

MAX30102_STATUS Max30102_FifoReadPointer(uint8_t Address)
{
 8000726:	b580      	push	{r7, lr}
 8000728:	b082      	sub	sp, #8
 800072a:	af00      	add	r7, sp, #0
 800072c:	4603      	mov	r3, r0
 800072e:	71fb      	strb	r3, [r7, #7]
	if(MAX30102_OK != Max30102_WriteReg(REG_FIFO_RD_PTR,(Address & 0x1F)))  //FIFO_RD_PTR[4:0]
 8000730:	79fb      	ldrb	r3, [r7, #7]
 8000732:	f003 031f 	and.w	r3, r3, #31
 8000736:	b2db      	uxtb	r3, r3
 8000738:	4619      	mov	r1, r3
 800073a:	2006      	movs	r0, #6
 800073c:	f7ff ff24 	bl	8000588 <Max30102_WriteReg>
 8000740:	4603      	mov	r3, r0
 8000742:	2b01      	cmp	r3, #1
 8000744:	d001      	beq.n	800074a <Max30102_FifoReadPointer+0x24>
			return MAX30102_ERROR;
 8000746:	2300      	movs	r3, #0
 8000748:	e000      	b.n	800074c <Max30102_FifoReadPointer+0x26>
	return MAX30102_OK;
 800074a:	2301      	movs	r3, #1
}
 800074c:	4618      	mov	r0, r3
 800074e:	3708      	adds	r7, #8
 8000750:	46bd      	mov	sp, r7
 8000752:	bd80      	pop	{r7, pc}

08000754 <Max30102_FifoSampleAveraging>:

MAX30102_STATUS Max30102_FifoSampleAveraging(uint8_t Value)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b084      	sub	sp, #16
 8000758:	af00      	add	r7, sp, #0
 800075a:	4603      	mov	r3, r0
 800075c:	71fb      	strb	r3, [r7, #7]
	uint8_t tmp;
	if(MAX30102_OK != Max30102_ReadReg(REG_FIFO_CONFIG, &tmp))
 800075e:	f107 030f 	add.w	r3, r7, #15
 8000762:	4619      	mov	r1, r3
 8000764:	2008      	movs	r0, #8
 8000766:	f7ff ff31 	bl	80005cc <Max30102_ReadReg>
 800076a:	4603      	mov	r3, r0
 800076c:	2b01      	cmp	r3, #1
 800076e:	d001      	beq.n	8000774 <Max30102_FifoSampleAveraging+0x20>
		return MAX30102_ERROR;
 8000770:	2300      	movs	r3, #0
 8000772:	e018      	b.n	80007a6 <Max30102_FifoSampleAveraging+0x52>
	tmp &= ~(0x07);
 8000774:	7bfb      	ldrb	r3, [r7, #15]
 8000776:	f023 0307 	bic.w	r3, r3, #7
 800077a:	b2db      	uxtb	r3, r3
 800077c:	73fb      	strb	r3, [r7, #15]
	tmp |= (Value&0x07)<<5;
 800077e:	79fb      	ldrb	r3, [r7, #7]
 8000780:	015b      	lsls	r3, r3, #5
 8000782:	b25a      	sxtb	r2, r3
 8000784:	7bfb      	ldrb	r3, [r7, #15]
 8000786:	b25b      	sxtb	r3, r3
 8000788:	4313      	orrs	r3, r2
 800078a:	b25b      	sxtb	r3, r3
 800078c:	b2db      	uxtb	r3, r3
 800078e:	73fb      	strb	r3, [r7, #15]
	if(MAX30102_OK != Max30102_WriteReg(REG_FIFO_CONFIG, tmp))
 8000790:	7bfb      	ldrb	r3, [r7, #15]
 8000792:	4619      	mov	r1, r3
 8000794:	2008      	movs	r0, #8
 8000796:	f7ff fef7 	bl	8000588 <Max30102_WriteReg>
 800079a:	4603      	mov	r3, r0
 800079c:	2b01      	cmp	r3, #1
 800079e:	d001      	beq.n	80007a4 <Max30102_FifoSampleAveraging+0x50>
		return MAX30102_ERROR;
 80007a0:	2300      	movs	r3, #0
 80007a2:	e000      	b.n	80007a6 <Max30102_FifoSampleAveraging+0x52>

	return MAX30102_OK;
 80007a4:	2301      	movs	r3, #1
}
 80007a6:	4618      	mov	r0, r3
 80007a8:	3710      	adds	r7, #16
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}

080007ae <Max30102_FifoRolloverEnable>:

MAX30102_STATUS Max30102_FifoRolloverEnable(uint8_t Enable)
{
 80007ae:	b580      	push	{r7, lr}
 80007b0:	b082      	sub	sp, #8
 80007b2:	af00      	add	r7, sp, #0
 80007b4:	4603      	mov	r3, r0
 80007b6:	71fb      	strb	r3, [r7, #7]
	return Max30102_WriteRegisterBit(REG_FIFO_CONFIG, FIFO_CONF_FIFO_ROLLOVER_EN_BIT, (Enable & 0x01));
 80007b8:	79fb      	ldrb	r3, [r7, #7]
 80007ba:	f003 0301 	and.w	r3, r3, #1
 80007be:	b2db      	uxtb	r3, r3
 80007c0:	461a      	mov	r2, r3
 80007c2:	2104      	movs	r1, #4
 80007c4:	2008      	movs	r0, #8
 80007c6:	f7ff ff21 	bl	800060c <Max30102_WriteRegisterBit>
 80007ca:	4603      	mov	r3, r0
}
 80007cc:	4618      	mov	r0, r3
 80007ce:	3708      	adds	r7, #8
 80007d0:	46bd      	mov	sp, r7
 80007d2:	bd80      	pop	{r7, pc}

080007d4 <Max30102_FifoAlmostFullValue>:

MAX30102_STATUS Max30102_FifoAlmostFullValue(uint8_t Value)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b084      	sub	sp, #16
 80007d8:	af00      	add	r7, sp, #0
 80007da:	4603      	mov	r3, r0
 80007dc:	71fb      	strb	r3, [r7, #7]
	if(Value < 17) Value = 17;
 80007de:	79fb      	ldrb	r3, [r7, #7]
 80007e0:	2b10      	cmp	r3, #16
 80007e2:	d801      	bhi.n	80007e8 <Max30102_FifoAlmostFullValue+0x14>
 80007e4:	2311      	movs	r3, #17
 80007e6:	71fb      	strb	r3, [r7, #7]
	if(Value > 32) Value = 32;
 80007e8:	79fb      	ldrb	r3, [r7, #7]
 80007ea:	2b20      	cmp	r3, #32
 80007ec:	d901      	bls.n	80007f2 <Max30102_FifoAlmostFullValue+0x1e>
 80007ee:	2320      	movs	r3, #32
 80007f0:	71fb      	strb	r3, [r7, #7]
	Value = 32 - Value;
 80007f2:	79fb      	ldrb	r3, [r7, #7]
 80007f4:	f1c3 0320 	rsb	r3, r3, #32
 80007f8:	71fb      	strb	r3, [r7, #7]
	uint8_t tmp;
	if(MAX30102_OK != Max30102_ReadReg(REG_FIFO_CONFIG, &tmp))
 80007fa:	f107 030f 	add.w	r3, r7, #15
 80007fe:	4619      	mov	r1, r3
 8000800:	2008      	movs	r0, #8
 8000802:	f7ff fee3 	bl	80005cc <Max30102_ReadReg>
 8000806:	4603      	mov	r3, r0
 8000808:	2b01      	cmp	r3, #1
 800080a:	d001      	beq.n	8000810 <Max30102_FifoAlmostFullValue+0x3c>
		return MAX30102_ERROR;
 800080c:	2300      	movs	r3, #0
 800080e:	e01a      	b.n	8000846 <Max30102_FifoAlmostFullValue+0x72>
	tmp &= ~(0x0F);
 8000810:	7bfb      	ldrb	r3, [r7, #15]
 8000812:	f023 030f 	bic.w	r3, r3, #15
 8000816:	b2db      	uxtb	r3, r3
 8000818:	73fb      	strb	r3, [r7, #15]
	tmp |= (Value & 0x0F);
 800081a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800081e:	f003 030f 	and.w	r3, r3, #15
 8000822:	b25a      	sxtb	r2, r3
 8000824:	7bfb      	ldrb	r3, [r7, #15]
 8000826:	b25b      	sxtb	r3, r3
 8000828:	4313      	orrs	r3, r2
 800082a:	b25b      	sxtb	r3, r3
 800082c:	b2db      	uxtb	r3, r3
 800082e:	73fb      	strb	r3, [r7, #15]
	if(MAX30102_OK != Max30102_WriteReg(REG_FIFO_CONFIG, tmp))
 8000830:	7bfb      	ldrb	r3, [r7, #15]
 8000832:	4619      	mov	r1, r3
 8000834:	2008      	movs	r0, #8
 8000836:	f7ff fea7 	bl	8000588 <Max30102_WriteReg>
 800083a:	4603      	mov	r3, r0
 800083c:	2b01      	cmp	r3, #1
 800083e:	d001      	beq.n	8000844 <Max30102_FifoAlmostFullValue+0x70>
		return MAX30102_ERROR;
 8000840:	2300      	movs	r3, #0
 8000842:	e000      	b.n	8000846 <Max30102_FifoAlmostFullValue+0x72>

	return MAX30102_OK;
 8000844:	2301      	movs	r3, #1
}
 8000846:	4618      	mov	r0, r3
 8000848:	3710      	adds	r7, #16
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}

0800084e <Max30102_Reset>:
{
	return Max30102_WriteRegisterBit(REG_MODE_CONFIG, MODE_SHDN_BIT, (Enable & 0x01));
}

MAX30102_STATUS Max30102_Reset(void)
{
 800084e:	b580      	push	{r7, lr}
 8000850:	b082      	sub	sp, #8
 8000852:	af00      	add	r7, sp, #0
	uint8_t tmp = 0xFF;
 8000854:	23ff      	movs	r3, #255	; 0xff
 8000856:	71fb      	strb	r3, [r7, #7]
    if(MAX30102_OK != Max30102_WriteReg(REG_MODE_CONFIG,0x40))
 8000858:	2140      	movs	r1, #64	; 0x40
 800085a:	2009      	movs	r0, #9
 800085c:	f7ff fe94 	bl	8000588 <Max30102_WriteReg>
 8000860:	4603      	mov	r3, r0
 8000862:	2b01      	cmp	r3, #1
 8000864:	d001      	beq.n	800086a <Max30102_Reset+0x1c>
        return MAX30102_ERROR;
 8000866:	2300      	movs	r3, #0
 8000868:	e00f      	b.n	800088a <Max30102_Reset+0x3c>
    do
    {
    	if(MAX30102_OK != Max30102_ReadReg(REG_MODE_CONFIG, &tmp))
 800086a:	1dfb      	adds	r3, r7, #7
 800086c:	4619      	mov	r1, r3
 800086e:	2009      	movs	r0, #9
 8000870:	f7ff feac 	bl	80005cc <Max30102_ReadReg>
 8000874:	4603      	mov	r3, r0
 8000876:	2b01      	cmp	r3, #1
 8000878:	d001      	beq.n	800087e <Max30102_Reset+0x30>
    		return MAX30102_ERROR;
 800087a:	2300      	movs	r3, #0
 800087c:	e005      	b.n	800088a <Max30102_Reset+0x3c>
    } while(tmp & (1<<6));
 800087e:	79fb      	ldrb	r3, [r7, #7]
 8000880:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000884:	2b00      	cmp	r3, #0
 8000886:	d1f0      	bne.n	800086a <Max30102_Reset+0x1c>

    return MAX30102_OK;
 8000888:	2301      	movs	r3, #1
}
 800088a:	4618      	mov	r0, r3
 800088c:	3708      	adds	r7, #8
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}

08000892 <Max30102_SetMode>:

MAX30102_STATUS Max30102_SetMode(uint8_t Mode)
{
 8000892:	b580      	push	{r7, lr}
 8000894:	b084      	sub	sp, #16
 8000896:	af00      	add	r7, sp, #0
 8000898:	4603      	mov	r3, r0
 800089a:	71fb      	strb	r3, [r7, #7]
	uint8_t tmp;
	if(MAX30102_OK != Max30102_ReadReg(REG_MODE_CONFIG, &tmp))
 800089c:	f107 030f 	add.w	r3, r7, #15
 80008a0:	4619      	mov	r1, r3
 80008a2:	2009      	movs	r0, #9
 80008a4:	f7ff fe92 	bl	80005cc <Max30102_ReadReg>
 80008a8:	4603      	mov	r3, r0
 80008aa:	2b01      	cmp	r3, #1
 80008ac:	d001      	beq.n	80008b2 <Max30102_SetMode+0x20>
		return MAX30102_ERROR;
 80008ae:	2300      	movs	r3, #0
 80008b0:	e01a      	b.n	80008e8 <Max30102_SetMode+0x56>
	tmp &= ~(0x07);
 80008b2:	7bfb      	ldrb	r3, [r7, #15]
 80008b4:	f023 0307 	bic.w	r3, r3, #7
 80008b8:	b2db      	uxtb	r3, r3
 80008ba:	73fb      	strb	r3, [r7, #15]
	tmp |= (Mode & 0x07);
 80008bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008c0:	f003 0307 	and.w	r3, r3, #7
 80008c4:	b25a      	sxtb	r2, r3
 80008c6:	7bfb      	ldrb	r3, [r7, #15]
 80008c8:	b25b      	sxtb	r3, r3
 80008ca:	4313      	orrs	r3, r2
 80008cc:	b25b      	sxtb	r3, r3
 80008ce:	b2db      	uxtb	r3, r3
 80008d0:	73fb      	strb	r3, [r7, #15]
	if(MAX30102_OK != Max30102_WriteReg(REG_MODE_CONFIG, tmp))
 80008d2:	7bfb      	ldrb	r3, [r7, #15]
 80008d4:	4619      	mov	r1, r3
 80008d6:	2009      	movs	r0, #9
 80008d8:	f7ff fe56 	bl	8000588 <Max30102_WriteReg>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b01      	cmp	r3, #1
 80008e0:	d001      	beq.n	80008e6 <Max30102_SetMode+0x54>
		return MAX30102_ERROR;
 80008e2:	2300      	movs	r3, #0
 80008e4:	e000      	b.n	80008e8 <Max30102_SetMode+0x56>

	return MAX30102_OK;
 80008e6:	2301      	movs	r3, #1
}
 80008e8:	4618      	mov	r0, r3
 80008ea:	3710      	adds	r7, #16
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bd80      	pop	{r7, pc}

080008f0 <Max30102_SpO2AdcRange>:
//
//	SpO2 Configuration
//
MAX30102_STATUS Max30102_SpO2AdcRange(uint8_t Value)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b084      	sub	sp, #16
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	4603      	mov	r3, r0
 80008f8:	71fb      	strb	r3, [r7, #7]
	uint8_t tmp;
	if(MAX30102_OK != Max30102_ReadReg(REG_SPO2_CONFIG, &tmp))
 80008fa:	f107 030f 	add.w	r3, r7, #15
 80008fe:	4619      	mov	r1, r3
 8000900:	200a      	movs	r0, #10
 8000902:	f7ff fe63 	bl	80005cc <Max30102_ReadReg>
 8000906:	4603      	mov	r3, r0
 8000908:	2b01      	cmp	r3, #1
 800090a:	d001      	beq.n	8000910 <Max30102_SpO2AdcRange+0x20>
		return MAX30102_ERROR;
 800090c:	2300      	movs	r3, #0
 800090e:	e01b      	b.n	8000948 <Max30102_SpO2AdcRange+0x58>
	tmp &= ~(0x03);
 8000910:	7bfb      	ldrb	r3, [r7, #15]
 8000912:	f023 0303 	bic.w	r3, r3, #3
 8000916:	b2db      	uxtb	r3, r3
 8000918:	73fb      	strb	r3, [r7, #15]
	tmp |= ((Value & 0x03) << 5);
 800091a:	79fb      	ldrb	r3, [r7, #7]
 800091c:	015b      	lsls	r3, r3, #5
 800091e:	b25b      	sxtb	r3, r3
 8000920:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8000924:	b25a      	sxtb	r2, r3
 8000926:	7bfb      	ldrb	r3, [r7, #15]
 8000928:	b25b      	sxtb	r3, r3
 800092a:	4313      	orrs	r3, r2
 800092c:	b25b      	sxtb	r3, r3
 800092e:	b2db      	uxtb	r3, r3
 8000930:	73fb      	strb	r3, [r7, #15]
	if(MAX30102_OK != Max30102_WriteReg(REG_SPO2_CONFIG, tmp))
 8000932:	7bfb      	ldrb	r3, [r7, #15]
 8000934:	4619      	mov	r1, r3
 8000936:	200a      	movs	r0, #10
 8000938:	f7ff fe26 	bl	8000588 <Max30102_WriteReg>
 800093c:	4603      	mov	r3, r0
 800093e:	2b01      	cmp	r3, #1
 8000940:	d001      	beq.n	8000946 <Max30102_SpO2AdcRange+0x56>
		return MAX30102_ERROR;
 8000942:	2300      	movs	r3, #0
 8000944:	e000      	b.n	8000948 <Max30102_SpO2AdcRange+0x58>

	return MAX30102_OK;
 8000946:	2301      	movs	r3, #1
}
 8000948:	4618      	mov	r0, r3
 800094a:	3710      	adds	r7, #16
 800094c:	46bd      	mov	sp, r7
 800094e:	bd80      	pop	{r7, pc}

08000950 <Max30102_SpO2SampleRate>:

MAX30102_STATUS Max30102_SpO2SampleRate(uint8_t Value)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b084      	sub	sp, #16
 8000954:	af00      	add	r7, sp, #0
 8000956:	4603      	mov	r3, r0
 8000958:	71fb      	strb	r3, [r7, #7]
	uint8_t tmp;
	if(MAX30102_OK != Max30102_ReadReg(REG_SPO2_CONFIG, &tmp))
 800095a:	f107 030f 	add.w	r3, r7, #15
 800095e:	4619      	mov	r1, r3
 8000960:	200a      	movs	r0, #10
 8000962:	f7ff fe33 	bl	80005cc <Max30102_ReadReg>
 8000966:	4603      	mov	r3, r0
 8000968:	2b01      	cmp	r3, #1
 800096a:	d001      	beq.n	8000970 <Max30102_SpO2SampleRate+0x20>
		return MAX30102_ERROR;
 800096c:	2300      	movs	r3, #0
 800096e:	e01b      	b.n	80009a8 <Max30102_SpO2SampleRate+0x58>
	tmp &= ~(0x07);
 8000970:	7bfb      	ldrb	r3, [r7, #15]
 8000972:	f023 0307 	bic.w	r3, r3, #7
 8000976:	b2db      	uxtb	r3, r3
 8000978:	73fb      	strb	r3, [r7, #15]
	tmp |= ((Value & 0x07) << 2);
 800097a:	79fb      	ldrb	r3, [r7, #7]
 800097c:	009b      	lsls	r3, r3, #2
 800097e:	b25b      	sxtb	r3, r3
 8000980:	f003 031c 	and.w	r3, r3, #28
 8000984:	b25a      	sxtb	r2, r3
 8000986:	7bfb      	ldrb	r3, [r7, #15]
 8000988:	b25b      	sxtb	r3, r3
 800098a:	4313      	orrs	r3, r2
 800098c:	b25b      	sxtb	r3, r3
 800098e:	b2db      	uxtb	r3, r3
 8000990:	73fb      	strb	r3, [r7, #15]
	if(MAX30102_OK != Max30102_WriteReg(REG_SPO2_CONFIG, tmp))
 8000992:	7bfb      	ldrb	r3, [r7, #15]
 8000994:	4619      	mov	r1, r3
 8000996:	200a      	movs	r0, #10
 8000998:	f7ff fdf6 	bl	8000588 <Max30102_WriteReg>
 800099c:	4603      	mov	r3, r0
 800099e:	2b01      	cmp	r3, #1
 80009a0:	d001      	beq.n	80009a6 <Max30102_SpO2SampleRate+0x56>
		return MAX30102_ERROR;
 80009a2:	2300      	movs	r3, #0
 80009a4:	e000      	b.n	80009a8 <Max30102_SpO2SampleRate+0x58>

	return MAX30102_OK;
 80009a6:	2301      	movs	r3, #1
}
 80009a8:	4618      	mov	r0, r3
 80009aa:	3710      	adds	r7, #16
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bd80      	pop	{r7, pc}

080009b0 <Max30102_SpO2LedPulseWidth>:

MAX30102_STATUS Max30102_SpO2LedPulseWidth(uint8_t Value)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b084      	sub	sp, #16
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	4603      	mov	r3, r0
 80009b8:	71fb      	strb	r3, [r7, #7]
	uint8_t tmp;
	if(MAX30102_OK != Max30102_ReadReg(REG_SPO2_CONFIG, &tmp))
 80009ba:	f107 030f 	add.w	r3, r7, #15
 80009be:	4619      	mov	r1, r3
 80009c0:	200a      	movs	r0, #10
 80009c2:	f7ff fe03 	bl	80005cc <Max30102_ReadReg>
 80009c6:	4603      	mov	r3, r0
 80009c8:	2b01      	cmp	r3, #1
 80009ca:	d001      	beq.n	80009d0 <Max30102_SpO2LedPulseWidth+0x20>
		return MAX30102_ERROR;
 80009cc:	2300      	movs	r3, #0
 80009ce:	e01a      	b.n	8000a06 <Max30102_SpO2LedPulseWidth+0x56>
	tmp &= ~(0x03);
 80009d0:	7bfb      	ldrb	r3, [r7, #15]
 80009d2:	f023 0303 	bic.w	r3, r3, #3
 80009d6:	b2db      	uxtb	r3, r3
 80009d8:	73fb      	strb	r3, [r7, #15]
	tmp |= (Value & 0x03);
 80009da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009de:	f003 0303 	and.w	r3, r3, #3
 80009e2:	b25a      	sxtb	r2, r3
 80009e4:	7bfb      	ldrb	r3, [r7, #15]
 80009e6:	b25b      	sxtb	r3, r3
 80009e8:	4313      	orrs	r3, r2
 80009ea:	b25b      	sxtb	r3, r3
 80009ec:	b2db      	uxtb	r3, r3
 80009ee:	73fb      	strb	r3, [r7, #15]
	if(MAX30102_OK != Max30102_WriteReg(REG_SPO2_CONFIG, tmp))
 80009f0:	7bfb      	ldrb	r3, [r7, #15]
 80009f2:	4619      	mov	r1, r3
 80009f4:	200a      	movs	r0, #10
 80009f6:	f7ff fdc7 	bl	8000588 <Max30102_WriteReg>
 80009fa:	4603      	mov	r3, r0
 80009fc:	2b01      	cmp	r3, #1
 80009fe:	d001      	beq.n	8000a04 <Max30102_SpO2LedPulseWidth+0x54>
		return MAX30102_ERROR;
 8000a00:	2300      	movs	r3, #0
 8000a02:	e000      	b.n	8000a06 <Max30102_SpO2LedPulseWidth+0x56>

	return MAX30102_OK;
 8000a04:	2301      	movs	r3, #1
}
 8000a06:	4618      	mov	r0, r3
 8000a08:	3710      	adds	r7, #16
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}

08000a0e <Max30102_Led1PulseAmplitude>:
//
//	LEDs Pulse Amplitute Configuration
//	LED Current = Value * 0.2 mA
//
MAX30102_STATUS Max30102_Led1PulseAmplitude(uint8_t Value)
{
 8000a0e:	b580      	push	{r7, lr}
 8000a10:	b082      	sub	sp, #8
 8000a12:	af00      	add	r7, sp, #0
 8000a14:	4603      	mov	r3, r0
 8000a16:	71fb      	strb	r3, [r7, #7]
	if(MAX30102_OK != Max30102_WriteReg(REG_LED1_PA, Value))
 8000a18:	79fb      	ldrb	r3, [r7, #7]
 8000a1a:	4619      	mov	r1, r3
 8000a1c:	200c      	movs	r0, #12
 8000a1e:	f7ff fdb3 	bl	8000588 <Max30102_WriteReg>
 8000a22:	4603      	mov	r3, r0
 8000a24:	2b01      	cmp	r3, #1
 8000a26:	d001      	beq.n	8000a2c <Max30102_Led1PulseAmplitude+0x1e>
		return MAX30102_ERROR;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	e000      	b.n	8000a2e <Max30102_Led1PulseAmplitude+0x20>
	return MAX30102_OK;
 8000a2c:	2301      	movs	r3, #1
}
 8000a2e:	4618      	mov	r0, r3
 8000a30:	3708      	adds	r7, #8
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}

08000a36 <Max30102_Led2PulseAmplitude>:

MAX30102_STATUS Max30102_Led2PulseAmplitude(uint8_t Value)
{
 8000a36:	b580      	push	{r7, lr}
 8000a38:	b082      	sub	sp, #8
 8000a3a:	af00      	add	r7, sp, #0
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	71fb      	strb	r3, [r7, #7]
	if(MAX30102_OK != Max30102_WriteReg(REG_LED2_PA, Value))
 8000a40:	79fb      	ldrb	r3, [r7, #7]
 8000a42:	4619      	mov	r1, r3
 8000a44:	200d      	movs	r0, #13
 8000a46:	f7ff fd9f 	bl	8000588 <Max30102_WriteReg>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	2b01      	cmp	r3, #1
 8000a4e:	d001      	beq.n	8000a54 <Max30102_Led2PulseAmplitude+0x1e>
		return MAX30102_ERROR;
 8000a50:	2300      	movs	r3, #0
 8000a52:	e000      	b.n	8000a56 <Max30102_Led2PulseAmplitude+0x20>
	return MAX30102_OK;
 8000a54:	2301      	movs	r3, #1
}
 8000a56:	4618      	mov	r0, r3
 8000a58:	3708      	adds	r7, #8
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}
	...

08000a60 <Max30102_GetHeartRate>:
{
	return IsFingerOnScreen;
}

int32_t Max30102_GetHeartRate(void)
{
 8000a60:	b480      	push	{r7}
 8000a62:	af00      	add	r7, sp, #0
	return HeartRate;
 8000a64:	4b03      	ldr	r3, [pc, #12]	; (8000a74 <Max30102_GetHeartRate+0x14>)
 8000a66:	681b      	ldr	r3, [r3, #0]
}
 8000a68:	4618      	mov	r0, r3
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a70:	4770      	bx	lr
 8000a72:	bf00      	nop
 8000a74:	20001c18 	.word	0x20001c18

08000a78 <Max30102_GetSpO2Value>:

int32_t Max30102_GetSpO2Value(void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	af00      	add	r7, sp, #0
	return Sp02Value;
 8000a7c:	4b03      	ldr	r3, [pc, #12]	; (8000a8c <Max30102_GetSpO2Value+0x14>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
}
 8000a80:	4618      	mov	r0, r3
 8000a82:	46bd      	mov	sp, r7
 8000a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a88:	4770      	bx	lr
 8000a8a:	bf00      	nop
 8000a8c:	20002ee8 	.word	0x20002ee8

08000a90 <Max30102_Task>:

void Max30102_Task(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b084      	sub	sp, #16
 8000a94:	af04      	add	r7, sp, #16
	switch(StateMachine)
 8000a96:	4b4d      	ldr	r3, [pc, #308]	; (8000bcc <Max30102_Task+0x13c>)
 8000a98:	781b      	ldrb	r3, [r3, #0]
 8000a9a:	2b03      	cmp	r3, #3
 8000a9c:	f200 8092 	bhi.w	8000bc4 <Max30102_Task+0x134>
 8000aa0:	a201      	add	r2, pc, #4	; (adr r2, 8000aa8 <Max30102_Task+0x18>)
 8000aa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000aa6:	bf00      	nop
 8000aa8:	08000ab9 	.word	0x08000ab9
 8000aac:	08000af1 	.word	0x08000af1
 8000ab0:	08000b21 	.word	0x08000b21
 8000ab4:	08000b8d 	.word	0x08000b8d
	{
		case MAX30102_STATE_BEGIN:
			HeartRate = 0;
 8000ab8:	4b45      	ldr	r3, [pc, #276]	; (8000bd0 <Max30102_Task+0x140>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	601a      	str	r2, [r3, #0]
			Sp02Value = 0;
 8000abe:	4b45      	ldr	r3, [pc, #276]	; (8000bd4 <Max30102_Task+0x144>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	601a      	str	r2, [r3, #0]
			if(IsFingerOnScreen)
 8000ac4:	4b44      	ldr	r3, [pc, #272]	; (8000bd8 <Max30102_Task+0x148>)
 8000ac6:	781b      	ldrb	r3, [r3, #0]
 8000ac8:	b2db      	uxtb	r3, r3
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d075      	beq.n	8000bba <Max30102_Task+0x12a>
			{
				CollectedSamples = 0;
 8000ace:	4b43      	ldr	r3, [pc, #268]	; (8000bdc <Max30102_Task+0x14c>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	601a      	str	r2, [r3, #0]
				BufferTail = BufferHead;
 8000ad4:	4b42      	ldr	r3, [pc, #264]	; (8000be0 <Max30102_Task+0x150>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	4a42      	ldr	r2, [pc, #264]	; (8000be4 <Max30102_Task+0x154>)
 8000ada:	6013      	str	r3, [r2, #0]
				Max30102_Led1PulseAmplitude(MAX30102_RED_LED_CURRENT_HIGH);
 8000adc:	2024      	movs	r0, #36	; 0x24
 8000ade:	f7ff ff96 	bl	8000a0e <Max30102_Led1PulseAmplitude>
				Max30102_Led2PulseAmplitude(MAX30102_IR_LED_CURRENT_HIGH);
 8000ae2:	2024      	movs	r0, #36	; 0x24
 8000ae4:	f7ff ffa7 	bl	8000a36 <Max30102_Led2PulseAmplitude>
				StateMachine = MAX30102_STATE_CALIBRATE;
 8000ae8:	4b38      	ldr	r3, [pc, #224]	; (8000bcc <Max30102_Task+0x13c>)
 8000aea:	2201      	movs	r2, #1
 8000aec:	701a      	strb	r2, [r3, #0]
			}
			break;
 8000aee:	e064      	b.n	8000bba <Max30102_Task+0x12a>

		case MAX30102_STATE_CALIBRATE:
				if(IsFingerOnScreen)
 8000af0:	4b39      	ldr	r3, [pc, #228]	; (8000bd8 <Max30102_Task+0x148>)
 8000af2:	781b      	ldrb	r3, [r3, #0]
 8000af4:	b2db      	uxtb	r3, r3
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d008      	beq.n	8000b0c <Max30102_Task+0x7c>
				{
					if(CollectedSamples > (MAX30102_BUFFER_LENGTH-MAX30102_SAMPLES_PER_SECOND))
 8000afa:	4b38      	ldr	r3, [pc, #224]	; (8000bdc <Max30102_Task+0x14c>)
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000b02:	d95c      	bls.n	8000bbe <Max30102_Task+0x12e>
					{
						StateMachine = MAX30102_STATE_CALCULATE_HR;
 8000b04:	4b31      	ldr	r3, [pc, #196]	; (8000bcc <Max30102_Task+0x13c>)
 8000b06:	2202      	movs	r2, #2
 8000b08:	701a      	strb	r2, [r3, #0]
				{
					Max30102_Led1PulseAmplitude(MAX30102_RED_LED_CURRENT_LOW);
					Max30102_Led2PulseAmplitude(MAX30102_IR_LED_CURRENT_LOW);
					StateMachine = MAX30102_STATE_BEGIN;
				}
			break;
 8000b0a:	e058      	b.n	8000bbe <Max30102_Task+0x12e>
					Max30102_Led1PulseAmplitude(MAX30102_RED_LED_CURRENT_LOW);
 8000b0c:	2000      	movs	r0, #0
 8000b0e:	f7ff ff7e 	bl	8000a0e <Max30102_Led1PulseAmplitude>
					Max30102_Led2PulseAmplitude(MAX30102_IR_LED_CURRENT_LOW);
 8000b12:	2001      	movs	r0, #1
 8000b14:	f7ff ff8f 	bl	8000a36 <Max30102_Led2PulseAmplitude>
					StateMachine = MAX30102_STATE_BEGIN;
 8000b18:	4b2c      	ldr	r3, [pc, #176]	; (8000bcc <Max30102_Task+0x13c>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	701a      	strb	r2, [r3, #0]
			break;
 8000b1e:	e04e      	b.n	8000bbe <Max30102_Task+0x12e>

		case MAX30102_STATE_CALCULATE_HR:
			if(IsFingerOnScreen)
 8000b20:	4b2d      	ldr	r3, [pc, #180]	; (8000bd8 <Max30102_Task+0x148>)
 8000b22:	781b      	ldrb	r3, [r3, #0]
 8000b24:	b2db      	uxtb	r3, r3
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d026      	beq.n	8000b78 <Max30102_Task+0xe8>
			{
				maxim_heart_rate_and_oxygen_saturation(IrBuffer, RedBuffer, MAX30102_BUFFER_LENGTH-MAX30102_SAMPLES_PER_SECOND, BufferTail, &Sp02Value, &Sp02IsValid, &HeartRate, &IsHrValid);
 8000b2a:	4b2e      	ldr	r3, [pc, #184]	; (8000be4 <Max30102_Task+0x154>)
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	b29b      	uxth	r3, r3
 8000b30:	4a2d      	ldr	r2, [pc, #180]	; (8000be8 <Max30102_Task+0x158>)
 8000b32:	9203      	str	r2, [sp, #12]
 8000b34:	4a26      	ldr	r2, [pc, #152]	; (8000bd0 <Max30102_Task+0x140>)
 8000b36:	9202      	str	r2, [sp, #8]
 8000b38:	4a2c      	ldr	r2, [pc, #176]	; (8000bec <Max30102_Task+0x15c>)
 8000b3a:	9201      	str	r2, [sp, #4]
 8000b3c:	4a25      	ldr	r2, [pc, #148]	; (8000bd4 <Max30102_Task+0x144>)
 8000b3e:	9200      	str	r2, [sp, #0]
 8000b40:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000b44:	492a      	ldr	r1, [pc, #168]	; (8000bf0 <Max30102_Task+0x160>)
 8000b46:	482b      	ldr	r0, [pc, #172]	; (8000bf4 <Max30102_Task+0x164>)
 8000b48:	f000 f8ee 	bl	8000d28 <maxim_heart_rate_and_oxygen_saturation>
				BufferTail = (BufferTail + MAX30102_SAMPLES_PER_SECOND) % MAX30102_BUFFER_LENGTH;
 8000b4c:	4b25      	ldr	r3, [pc, #148]	; (8000be4 <Max30102_Task+0x154>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8000b54:	4b28      	ldr	r3, [pc, #160]	; (8000bf8 <Max30102_Task+0x168>)
 8000b56:	fba3 1302 	umull	r1, r3, r3, r2
 8000b5a:	099b      	lsrs	r3, r3, #6
 8000b5c:	f44f 7116 	mov.w	r1, #600	; 0x258
 8000b60:	fb01 f303 	mul.w	r3, r1, r3
 8000b64:	1ad3      	subs	r3, r2, r3
 8000b66:	4a1f      	ldr	r2, [pc, #124]	; (8000be4 <Max30102_Task+0x154>)
 8000b68:	6013      	str	r3, [r2, #0]
				CollectedSamples = 0;
 8000b6a:	4b1c      	ldr	r3, [pc, #112]	; (8000bdc <Max30102_Task+0x14c>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	601a      	str	r2, [r3, #0]
				StateMachine = MAX30102_STATE_COLLECT_NEXT_PORTION;
 8000b70:	4b16      	ldr	r3, [pc, #88]	; (8000bcc <Max30102_Task+0x13c>)
 8000b72:	2203      	movs	r2, #3
 8000b74:	701a      	strb	r2, [r3, #0]
			{
				Max30102_Led1PulseAmplitude(MAX30102_RED_LED_CURRENT_LOW);
				Max30102_Led2PulseAmplitude(MAX30102_IR_LED_CURRENT_LOW);
				StateMachine = MAX30102_STATE_BEGIN;
			}
			break;
 8000b76:	e025      	b.n	8000bc4 <Max30102_Task+0x134>
				Max30102_Led1PulseAmplitude(MAX30102_RED_LED_CURRENT_LOW);
 8000b78:	2000      	movs	r0, #0
 8000b7a:	f7ff ff48 	bl	8000a0e <Max30102_Led1PulseAmplitude>
				Max30102_Led2PulseAmplitude(MAX30102_IR_LED_CURRENT_LOW);
 8000b7e:	2001      	movs	r0, #1
 8000b80:	f7ff ff59 	bl	8000a36 <Max30102_Led2PulseAmplitude>
				StateMachine = MAX30102_STATE_BEGIN;
 8000b84:	4b11      	ldr	r3, [pc, #68]	; (8000bcc <Max30102_Task+0x13c>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	701a      	strb	r2, [r3, #0]
			break;
 8000b8a:	e01b      	b.n	8000bc4 <Max30102_Task+0x134>

		case MAX30102_STATE_COLLECT_NEXT_PORTION:
			if(IsFingerOnScreen)
 8000b8c:	4b12      	ldr	r3, [pc, #72]	; (8000bd8 <Max30102_Task+0x148>)
 8000b8e:	781b      	ldrb	r3, [r3, #0]
 8000b90:	b2db      	uxtb	r3, r3
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d007      	beq.n	8000ba6 <Max30102_Task+0x116>
			{
				if(CollectedSamples > MAX30102_SAMPLES_PER_SECOND)
 8000b96:	4b11      	ldr	r3, [pc, #68]	; (8000bdc <Max30102_Task+0x14c>)
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	2b64      	cmp	r3, #100	; 0x64
 8000b9c:	d911      	bls.n	8000bc2 <Max30102_Task+0x132>
				{
					StateMachine = MAX30102_STATE_CALCULATE_HR;
 8000b9e:	4b0b      	ldr	r3, [pc, #44]	; (8000bcc <Max30102_Task+0x13c>)
 8000ba0:	2202      	movs	r2, #2
 8000ba2:	701a      	strb	r2, [r3, #0]
			{
				Max30102_Led1PulseAmplitude(MAX30102_RED_LED_CURRENT_LOW);
				Max30102_Led2PulseAmplitude(MAX30102_IR_LED_CURRENT_LOW);
				StateMachine = MAX30102_STATE_BEGIN;
			}
			break;
 8000ba4:	e00d      	b.n	8000bc2 <Max30102_Task+0x132>
				Max30102_Led1PulseAmplitude(MAX30102_RED_LED_CURRENT_LOW);
 8000ba6:	2000      	movs	r0, #0
 8000ba8:	f7ff ff31 	bl	8000a0e <Max30102_Led1PulseAmplitude>
				Max30102_Led2PulseAmplitude(MAX30102_IR_LED_CURRENT_LOW);
 8000bac:	2001      	movs	r0, #1
 8000bae:	f7ff ff42 	bl	8000a36 <Max30102_Led2PulseAmplitude>
				StateMachine = MAX30102_STATE_BEGIN;
 8000bb2:	4b06      	ldr	r3, [pc, #24]	; (8000bcc <Max30102_Task+0x13c>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	701a      	strb	r2, [r3, #0]
			break;
 8000bb8:	e003      	b.n	8000bc2 <Max30102_Task+0x132>
			break;
 8000bba:	bf00      	nop
 8000bbc:	e002      	b.n	8000bc4 <Max30102_Task+0x134>
			break;
 8000bbe:	bf00      	nop
 8000bc0:	e000      	b.n	8000bc4 <Max30102_Task+0x134>
			break;
 8000bc2:	bf00      	nop
	}
}
 8000bc4:	bf00      	nop
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	bf00      	nop
 8000bcc:	20001c10 	.word	0x20001c10
 8000bd0:	20001c18 	.word	0x20001c18
 8000bd4:	20002ee8 	.word	0x20002ee8
 8000bd8:	20001c11 	.word	0x20001c11
 8000bdc:	20001c08 	.word	0x20001c08
 8000be0:	20001c14 	.word	0x20001c14
 8000be4:	20002580 	.word	0x20002580
 8000be8:	20002ee4 	.word	0x20002ee4
 8000bec:	2000257c 	.word	0x2000257c
 8000bf0:	20002584 	.word	0x20002584
 8000bf4:	20001c1c 	.word	0x20001c1c
 8000bf8:	1b4e81b5 	.word	0x1b4e81b5

08000bfc <Max30102_Init>:

//
//	Initialization
//
MAX30102_STATUS Max30102_Init(I2C_HandleTypeDef *i2c)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b084      	sub	sp, #16
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
	uint8_t uch_dummy;
	i2c_max30102 = i2c;
 8000c04:	4a46      	ldr	r2, [pc, #280]	; (8000d20 <Max30102_Init+0x124>)
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	6013      	str	r3, [r2, #0]
	if(MAX30102_OK != Max30102_Reset()) //resets the MAX30102
 8000c0a:	f7ff fe20 	bl	800084e <Max30102_Reset>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	2b01      	cmp	r3, #1
 8000c12:	d001      	beq.n	8000c18 <Max30102_Init+0x1c>
		return MAX30102_ERROR;
 8000c14:	2300      	movs	r3, #0
 8000c16:	e07e      	b.n	8000d16 <Max30102_Init+0x11a>
	if(MAX30102_OK != Max30102_ReadReg(0,&uch_dummy))
 8000c18:	f107 030f 	add.w	r3, r7, #15
 8000c1c:	4619      	mov	r1, r3
 8000c1e:	2000      	movs	r0, #0
 8000c20:	f7ff fcd4 	bl	80005cc <Max30102_ReadReg>
 8000c24:	4603      	mov	r3, r0
 8000c26:	2b01      	cmp	r3, #1
 8000c28:	d001      	beq.n	8000c2e <Max30102_Init+0x32>
		return MAX30102_ERROR;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	e073      	b.n	8000d16 <Max30102_Init+0x11a>
	if(MAX30102_OK != Max30102_FifoWritePointer(0x00))
 8000c2e:	2000      	movs	r0, #0
 8000c30:	f7ff fd4b 	bl	80006ca <Max30102_FifoWritePointer>
 8000c34:	4603      	mov	r3, r0
 8000c36:	2b01      	cmp	r3, #1
 8000c38:	d001      	beq.n	8000c3e <Max30102_Init+0x42>
		return MAX30102_ERROR;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	e06b      	b.n	8000d16 <Max30102_Init+0x11a>
	if(MAX30102_OK != Max30102_FifoOverflowCounter(0x00))
 8000c3e:	2000      	movs	r0, #0
 8000c40:	f7ff fd5a 	bl	80006f8 <Max30102_FifoOverflowCounter>
 8000c44:	4603      	mov	r3, r0
 8000c46:	2b01      	cmp	r3, #1
 8000c48:	d001      	beq.n	8000c4e <Max30102_Init+0x52>
		return MAX30102_ERROR;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	e063      	b.n	8000d16 <Max30102_Init+0x11a>
	if(MAX30102_OK != Max30102_FifoReadPointer(0x00))
 8000c4e:	2000      	movs	r0, #0
 8000c50:	f7ff fd69 	bl	8000726 <Max30102_FifoReadPointer>
 8000c54:	4603      	mov	r3, r0
 8000c56:	2b01      	cmp	r3, #1
 8000c58:	d001      	beq.n	8000c5e <Max30102_Init+0x62>
		return MAX30102_ERROR;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	e05b      	b.n	8000d16 <Max30102_Init+0x11a>
	if(MAX30102_OK != Max30102_FifoSampleAveraging(FIFO_SMP_AVE_1))
 8000c5e:	2000      	movs	r0, #0
 8000c60:	f7ff fd78 	bl	8000754 <Max30102_FifoSampleAveraging>
 8000c64:	4603      	mov	r3, r0
 8000c66:	2b01      	cmp	r3, #1
 8000c68:	d001      	beq.n	8000c6e <Max30102_Init+0x72>
		return MAX30102_ERROR;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	e053      	b.n	8000d16 <Max30102_Init+0x11a>
	if(MAX30102_OK != Max30102_FifoRolloverEnable(0))
 8000c6e:	2000      	movs	r0, #0
 8000c70:	f7ff fd9d 	bl	80007ae <Max30102_FifoRolloverEnable>
 8000c74:	4603      	mov	r3, r0
 8000c76:	2b01      	cmp	r3, #1
 8000c78:	d001      	beq.n	8000c7e <Max30102_Init+0x82>
		return MAX30102_ERROR;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	e04b      	b.n	8000d16 <Max30102_Init+0x11a>
	if(MAX30102_OK != Max30102_FifoAlmostFullValue(MAX30102_FIFO_ALMOST_FULL_SAMPLES))
 8000c7e:	2011      	movs	r0, #17
 8000c80:	f7ff fda8 	bl	80007d4 <Max30102_FifoAlmostFullValue>
 8000c84:	4603      	mov	r3, r0
 8000c86:	2b01      	cmp	r3, #1
 8000c88:	d001      	beq.n	8000c8e <Max30102_Init+0x92>
		return MAX30102_ERROR;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	e043      	b.n	8000d16 <Max30102_Init+0x11a>
	if(MAX30102_OK != Max30102_SetMode(MODE_SPO2_MODE))
 8000c8e:	2003      	movs	r0, #3
 8000c90:	f7ff fdff 	bl	8000892 <Max30102_SetMode>
 8000c94:	4603      	mov	r3, r0
 8000c96:	2b01      	cmp	r3, #1
 8000c98:	d001      	beq.n	8000c9e <Max30102_Init+0xa2>
		return MAX30102_ERROR;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	e03b      	b.n	8000d16 <Max30102_Init+0x11a>
	if(MAX30102_OK != Max30102_SpO2AdcRange(SPO2_ADC_RGE_4096))
 8000c9e:	2001      	movs	r0, #1
 8000ca0:	f7ff fe26 	bl	80008f0 <Max30102_SpO2AdcRange>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b01      	cmp	r3, #1
 8000ca8:	d001      	beq.n	8000cae <Max30102_Init+0xb2>
		return MAX30102_ERROR;
 8000caa:	2300      	movs	r3, #0
 8000cac:	e033      	b.n	8000d16 <Max30102_Init+0x11a>
	if(MAX30102_OK != Max30102_SpO2SampleRate(SPO2_SAMPLE_RATE))
 8000cae:	2001      	movs	r0, #1
 8000cb0:	f7ff fe4e 	bl	8000950 <Max30102_SpO2SampleRate>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	2b01      	cmp	r3, #1
 8000cb8:	d001      	beq.n	8000cbe <Max30102_Init+0xc2>
		return MAX30102_ERROR;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	e02b      	b.n	8000d16 <Max30102_Init+0x11a>
	if(MAX30102_OK != Max30102_SpO2LedPulseWidth(SPO2_PULSE_WIDTH_411))
 8000cbe:	2003      	movs	r0, #3
 8000cc0:	f7ff fe76 	bl	80009b0 <Max30102_SpO2LedPulseWidth>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	2b01      	cmp	r3, #1
 8000cc8:	d001      	beq.n	8000cce <Max30102_Init+0xd2>
		return MAX30102_ERROR;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	e023      	b.n	8000d16 <Max30102_Init+0x11a>
	if(MAX30102_OK != Max30102_Led1PulseAmplitude(MAX30102_RED_LED_CURRENT_LOW))
 8000cce:	2000      	movs	r0, #0
 8000cd0:	f7ff fe9d 	bl	8000a0e <Max30102_Led1PulseAmplitude>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	2b01      	cmp	r3, #1
 8000cd8:	d001      	beq.n	8000cde <Max30102_Init+0xe2>
		return MAX30102_ERROR;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	e01b      	b.n	8000d16 <Max30102_Init+0x11a>
	if(MAX30102_OK != Max30102_Led2PulseAmplitude(MAX30102_IR_LED_CURRENT_LOW))
 8000cde:	2001      	movs	r0, #1
 8000ce0:	f7ff fea9 	bl	8000a36 <Max30102_Led2PulseAmplitude>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	2b01      	cmp	r3, #1
 8000ce8:	d001      	beq.n	8000cee <Max30102_Init+0xf2>
		return MAX30102_ERROR;
 8000cea:	2300      	movs	r3, #0
 8000cec:	e013      	b.n	8000d16 <Max30102_Init+0x11a>
	if(MAX30102_OK != Max30102_SetIntAlmostFullEnabled(1))
 8000cee:	2001      	movs	r0, #1
 8000cf0:	f7ff fccb 	bl	800068a <Max30102_SetIntAlmostFullEnabled>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	2b01      	cmp	r3, #1
 8000cf8:	d001      	beq.n	8000cfe <Max30102_Init+0x102>
		return MAX30102_ERROR;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	e00b      	b.n	8000d16 <Max30102_Init+0x11a>
	if(MAX30102_OK != Max30102_SetIntFifoDataReadyEnabled(1))
 8000cfe:	2001      	movs	r0, #1
 8000d00:	f7ff fcd3 	bl	80006aa <Max30102_SetIntFifoDataReadyEnabled>
 8000d04:	4603      	mov	r3, r0
 8000d06:	2b01      	cmp	r3, #1
 8000d08:	d001      	beq.n	8000d0e <Max30102_Init+0x112>
		return MAX30102_ERROR;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	e003      	b.n	8000d16 <Max30102_Init+0x11a>
//	if(MAX30102_OK != Max30102_WriteReg(REG_PILOT_PA,0x7f))   // Choose value for ~ 25mA for Pilot LED
//		return MAX30102_ERROR;
	StateMachine = MAX30102_STATE_BEGIN;
 8000d0e:	4b05      	ldr	r3, [pc, #20]	; (8000d24 <Max30102_Init+0x128>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	701a      	strb	r2, [r3, #0]
	return MAX30102_OK;
 8000d14:	2301      	movs	r3, #1
}
 8000d16:	4618      	mov	r0, r3
 8000d18:	3710      	adds	r7, #16
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	20001c0c 	.word	0x20001c0c
 8000d24:	20001c10 	.word	0x20001c10

08000d28 <maxim_heart_rate_and_oxygen_saturation>:
* \param[out]    *pn_heart_rate          - Calculated heart rate value
* \param[out]    *pch_hr_valid           - 1 if the calculated heart rate value is valid
*
* \retval       None
*/
{
 8000d28:	b590      	push	{r4, r7, lr}
 8000d2a:	b0d3      	sub	sp, #332	; 0x14c
 8000d2c:	af04      	add	r7, sp, #16
 8000d2e:	f107 040c 	add.w	r4, r7, #12
 8000d32:	6020      	str	r0, [r4, #0]
 8000d34:	f107 0008 	add.w	r0, r7, #8
 8000d38:	6001      	str	r1, [r0, #0]
 8000d3a:	1d39      	adds	r1, r7, #4
 8000d3c:	600a      	str	r2, [r1, #0]
 8000d3e:	461a      	mov	r2, r3
 8000d40:	1cbb      	adds	r3, r7, #2
 8000d42:	801a      	strh	r2, [r3, #0]
    int32_t n_spo2_calc; 
    int32_t n_y_dc_max, n_x_dc_max; 
    int32_t n_y_dc_max_idx, n_x_dc_max_idx; 
    int32_t an_ratio[5],n_ratio_average; 
    int32_t n_nume,  n_denom ;
    uint32_t un_offset_tmp = un_offset;
 8000d44:	1cbb      	adds	r3, r7, #2
 8000d46:	881b      	ldrh	r3, [r3, #0]
 8000d48:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    // remove DC of ir signal    
    un_ir_mean =0; 
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
    for (k=0 ; k<n_buffer_length ; k++ )
 8000d52:	2300      	movs	r3, #0
 8000d54:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8000d58:	e01f      	b.n	8000d9a <maxim_heart_rate_and_oxygen_saturation+0x72>
	{
    	un_ir_mean += pun_ir_buffer[un_offset_tmp];
 8000d5a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8000d5e:	009b      	lsls	r3, r3, #2
 8000d60:	f107 020c 	add.w	r2, r7, #12
 8000d64:	6812      	ldr	r2, [r2, #0]
 8000d66:	4413      	add	r3, r2
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8000d6e:	4413      	add	r3, r2
 8000d70:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
    	un_offset_tmp = (un_offset_tmp + 1) % MAX30102_BUFFER_LENGTH;
 8000d74:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8000d78:	3301      	adds	r3, #1
 8000d7a:	4adc      	ldr	r2, [pc, #880]	; (80010ec <maxim_heart_rate_and_oxygen_saturation+0x3c4>)
 8000d7c:	fba2 1203 	umull	r1, r2, r2, r3
 8000d80:	0992      	lsrs	r2, r2, #6
 8000d82:	f44f 7116 	mov.w	r1, #600	; 0x258
 8000d86:	fb01 f202 	mul.w	r2, r1, r2
 8000d8a:	1a9b      	subs	r3, r3, r2
 8000d8c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    for (k=0 ; k<n_buffer_length ; k++ )
 8000d90:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8000d94:	3301      	adds	r3, #1
 8000d96:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8000d9a:	1d3b      	adds	r3, r7, #4
 8000d9c:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	429a      	cmp	r2, r3
 8000da4:	dbd9      	blt.n	8000d5a <maxim_heart_rate_and_oxygen_saturation+0x32>
	}

    un_ir_mean =un_ir_mean/n_buffer_length ;
 8000da6:	1d3b      	adds	r3, r7, #4
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8000dae:	fbb2 f3f3 	udiv	r3, r2, r3
 8000db2:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
    un_offset_tmp = un_offset;
 8000db6:	1cbb      	adds	r3, r7, #2
 8000db8:	881b      	ldrh	r3, [r3, #0]
 8000dba:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    for (k=0 ; k<n_buffer_length ; k++ )
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8000dc4:	e023      	b.n	8000e0e <maxim_heart_rate_and_oxygen_saturation+0xe6>
	{
    	an_x[k] =  pun_ir_buffer[un_offset_tmp] - un_ir_mean;
 8000dc6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8000dca:	009b      	lsls	r3, r3, #2
 8000dcc:	f107 020c 	add.w	r2, r7, #12
 8000dd0:	6812      	ldr	r2, [r2, #0]
 8000dd2:	4413      	add	r3, r2
 8000dd4:	681a      	ldr	r2, [r3, #0]
 8000dd6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8000dda:	1ad3      	subs	r3, r2, r3
 8000ddc:	4619      	mov	r1, r3
 8000dde:	4ac4      	ldr	r2, [pc, #784]	; (80010f0 <maxim_heart_rate_and_oxygen_saturation+0x3c8>)
 8000de0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8000de4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    	un_offset_tmp = (un_offset_tmp + 1) % MAX30102_BUFFER_LENGTH;
 8000de8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8000dec:	3301      	adds	r3, #1
 8000dee:	4abf      	ldr	r2, [pc, #764]	; (80010ec <maxim_heart_rate_and_oxygen_saturation+0x3c4>)
 8000df0:	fba2 1203 	umull	r1, r2, r2, r3
 8000df4:	0992      	lsrs	r2, r2, #6
 8000df6:	f44f 7116 	mov.w	r1, #600	; 0x258
 8000dfa:	fb01 f202 	mul.w	r2, r1, r2
 8000dfe:	1a9b      	subs	r3, r3, r2
 8000e00:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    for (k=0 ; k<n_buffer_length ; k++ )
 8000e04:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8000e08:	3301      	adds	r3, #1
 8000e0a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8000e0e:	1d3b      	adds	r3, r7, #4
 8000e10:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	429a      	cmp	r2, r3
 8000e18:	dbd5      	blt.n	8000dc6 <maxim_heart_rate_and_oxygen_saturation+0x9e>
	}
    
    // 4 pt Moving Average
    for(k=0; k< BUFFER_SIZE-MA4_SIZE; k++)
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8000e20:	e02c      	b.n	8000e7c <maxim_heart_rate_and_oxygen_saturation+0x154>
    {
        n_denom= ( an_x[k]+an_x[k+1]+ an_x[k+2]+ an_x[k+3]);
 8000e22:	4ab3      	ldr	r2, [pc, #716]	; (80010f0 <maxim_heart_rate_and_oxygen_saturation+0x3c8>)
 8000e24:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8000e28:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000e2c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8000e30:	3301      	adds	r3, #1
 8000e32:	49af      	ldr	r1, [pc, #700]	; (80010f0 <maxim_heart_rate_and_oxygen_saturation+0x3c8>)
 8000e34:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000e38:	441a      	add	r2, r3
 8000e3a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8000e3e:	3302      	adds	r3, #2
 8000e40:	49ab      	ldr	r1, [pc, #684]	; (80010f0 <maxim_heart_rate_and_oxygen_saturation+0x3c8>)
 8000e42:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000e46:	441a      	add	r2, r3
 8000e48:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8000e4c:	3303      	adds	r3, #3
 8000e4e:	49a8      	ldr	r1, [pc, #672]	; (80010f0 <maxim_heart_rate_and_oxygen_saturation+0x3c8>)
 8000e50:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000e54:	4413      	add	r3, r2
 8000e56:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
        an_x[k]=  n_denom/(int32_t)4; 
 8000e5a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	da00      	bge.n	8000e64 <maxim_heart_rate_and_oxygen_saturation+0x13c>
 8000e62:	3303      	adds	r3, #3
 8000e64:	109b      	asrs	r3, r3, #2
 8000e66:	4619      	mov	r1, r3
 8000e68:	4aa1      	ldr	r2, [pc, #644]	; (80010f0 <maxim_heart_rate_and_oxygen_saturation+0x3c8>)
 8000e6a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8000e6e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for(k=0; k< BUFFER_SIZE-MA4_SIZE; k++)
 8000e72:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8000e76:	3301      	adds	r3, #1
 8000e78:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8000e7c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8000e80:	f5b3 7ff8 	cmp.w	r3, #496	; 0x1f0
 8000e84:	dbcd      	blt.n	8000e22 <maxim_heart_rate_and_oxygen_saturation+0xfa>
    }

    // get difference of smoothed IR signal
    
    for( k=0; k<BUFFER_SIZE-MA4_SIZE-1;  k++)
 8000e86:	2300      	movs	r3, #0
 8000e88:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8000e8c:	e015      	b.n	8000eba <maxim_heart_rate_and_oxygen_saturation+0x192>
        an_dx[k]= (an_x[k+1]- an_x[k]);
 8000e8e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8000e92:	3301      	adds	r3, #1
 8000e94:	4a96      	ldr	r2, [pc, #600]	; (80010f0 <maxim_heart_rate_and_oxygen_saturation+0x3c8>)
 8000e96:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000e9a:	4995      	ldr	r1, [pc, #596]	; (80010f0 <maxim_heart_rate_and_oxygen_saturation+0x3c8>)
 8000e9c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8000ea0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000ea4:	1ad2      	subs	r2, r2, r3
 8000ea6:	4993      	ldr	r1, [pc, #588]	; (80010f4 <maxim_heart_rate_and_oxygen_saturation+0x3cc>)
 8000ea8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8000eac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for( k=0; k<BUFFER_SIZE-MA4_SIZE-1;  k++)
 8000eb0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8000eb4:	3301      	adds	r3, #1
 8000eb6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8000eba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8000ebe:	f5b3 7ff7 	cmp.w	r3, #494	; 0x1ee
 8000ec2:	dde4      	ble.n	8000e8e <maxim_heart_rate_and_oxygen_saturation+0x166>

    // 2-pt Moving Average to an_dx
    for(k=0; k< BUFFER_SIZE-MA4_SIZE-2; k++){
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8000eca:	e019      	b.n	8000f00 <maxim_heart_rate_and_oxygen_saturation+0x1d8>
        an_dx[k] =  ( an_dx[k]+an_dx[k+1])/2 ;
 8000ecc:	4a89      	ldr	r2, [pc, #548]	; (80010f4 <maxim_heart_rate_and_oxygen_saturation+0x3cc>)
 8000ece:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8000ed2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000ed6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8000eda:	3301      	adds	r3, #1
 8000edc:	4985      	ldr	r1, [pc, #532]	; (80010f4 <maxim_heart_rate_and_oxygen_saturation+0x3cc>)
 8000ede:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000ee2:	4413      	add	r3, r2
 8000ee4:	0fda      	lsrs	r2, r3, #31
 8000ee6:	4413      	add	r3, r2
 8000ee8:	105b      	asrs	r3, r3, #1
 8000eea:	4619      	mov	r1, r3
 8000eec:	4a81      	ldr	r2, [pc, #516]	; (80010f4 <maxim_heart_rate_and_oxygen_saturation+0x3cc>)
 8000eee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8000ef2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for(k=0; k< BUFFER_SIZE-MA4_SIZE-2; k++){
 8000ef6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8000efa:	3301      	adds	r3, #1
 8000efc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8000f00:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8000f04:	f5b3 7ff7 	cmp.w	r3, #494	; 0x1ee
 8000f08:	dbe0      	blt.n	8000ecc <maxim_heart_rate_and_oxygen_saturation+0x1a4>
    }
    
    // hamming window
    // flip wave form so that we can detect valley with peak detector
    for ( i=0 ; i<BUFFER_SIZE-HAMMING_SIZE-MA4_SIZE-2 ;i++){
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8000f10:	e039      	b.n	8000f86 <maxim_heart_rate_and_oxygen_saturation+0x25e>
        s= 0;
 8000f12:	2300      	movs	r3, #0
 8000f14:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
        for( k=i; k<i+ HAMMING_SIZE ;k++){
 8000f18:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8000f1c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8000f20:	e018      	b.n	8000f54 <maxim_heart_rate_and_oxygen_saturation+0x22c>
            s -= an_dx[k] *auw_hamm[k-i] ; 
 8000f22:	4a74      	ldr	r2, [pc, #464]	; (80010f4 <maxim_heart_rate_and_oxygen_saturation+0x3cc>)
 8000f24:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8000f28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f2c:	f8d7 112c 	ldr.w	r1, [r7, #300]	; 0x12c
 8000f30:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8000f34:	1a8a      	subs	r2, r1, r2
 8000f36:	4970      	ldr	r1, [pc, #448]	; (80010f8 <maxim_heart_rate_and_oxygen_saturation+0x3d0>)
 8000f38:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8000f3c:	fb02 f303 	mul.w	r3, r2, r3
 8000f40:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 8000f44:	1ad3      	subs	r3, r2, r3
 8000f46:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
        for( k=i; k<i+ HAMMING_SIZE ;k++){
 8000f4a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8000f4e:	3301      	adds	r3, #1
 8000f50:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8000f54:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8000f58:	3304      	adds	r3, #4
 8000f5a:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8000f5e:	429a      	cmp	r2, r3
 8000f60:	dddf      	ble.n	8000f22 <maxim_heart_rate_and_oxygen_saturation+0x1fa>
                     }
        an_dx[i]= s/ (int32_t)1146; // divide by sum of auw_hamm 
 8000f62:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8000f66:	4a65      	ldr	r2, [pc, #404]	; (80010fc <maxim_heart_rate_and_oxygen_saturation+0x3d4>)
 8000f68:	fb82 1203 	smull	r1, r2, r2, r3
 8000f6c:	1252      	asrs	r2, r2, #9
 8000f6e:	17db      	asrs	r3, r3, #31
 8000f70:	1ad2      	subs	r2, r2, r3
 8000f72:	4960      	ldr	r1, [pc, #384]	; (80010f4 <maxim_heart_rate_and_oxygen_saturation+0x3cc>)
 8000f74:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8000f78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for ( i=0 ; i<BUFFER_SIZE-HAMMING_SIZE-MA4_SIZE-2 ;i++){
 8000f7c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8000f80:	3301      	adds	r3, #1
 8000f82:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8000f86:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8000f8a:	f5b3 7ff4 	cmp.w	r3, #488	; 0x1e8
 8000f8e:	ddc0      	ble.n	8000f12 <maxim_heart_rate_and_oxygen_saturation+0x1ea>
    }

 
    n_th1=0; // threshold calculation
 8000f90:	2300      	movs	r3, #0
 8000f92:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    for ( k=0 ; k<BUFFER_SIZE-HAMMING_SIZE ;k++){
 8000f96:	2300      	movs	r3, #0
 8000f98:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8000f9c:	e011      	b.n	8000fc2 <maxim_heart_rate_and_oxygen_saturation+0x29a>
        n_th1 += ((an_dx[k]>0)? an_dx[k] : ((int32_t)0-an_dx[k])) ;
 8000f9e:	4a55      	ldr	r2, [pc, #340]	; (80010f4 <maxim_heart_rate_and_oxygen_saturation+0x3cc>)
 8000fa0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8000fa4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	bfb8      	it	lt
 8000fac:	425b      	neglt	r3, r3
 8000fae:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8000fb2:	4413      	add	r3, r2
 8000fb4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    for ( k=0 ; k<BUFFER_SIZE-HAMMING_SIZE ;k++){
 8000fb8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8000fbc:	3301      	adds	r3, #1
 8000fbe:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8000fc2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8000fc6:	f5b3 7ff7 	cmp.w	r3, #494	; 0x1ee
 8000fca:	dde8      	ble.n	8000f9e <maxim_heart_rate_and_oxygen_saturation+0x276>
    }
    n_th1= n_th1/ ( BUFFER_SIZE-HAMMING_SIZE);
 8000fcc:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8000fd0:	4a4b      	ldr	r2, [pc, #300]	; (8001100 <maxim_heart_rate_and_oxygen_saturation+0x3d8>)
 8000fd2:	fb82 1203 	smull	r1, r2, r2, r3
 8000fd6:	1192      	asrs	r2, r2, #6
 8000fd8:	17db      	asrs	r3, r3, #31
 8000fda:	1ad3      	subs	r3, r2, r3
 8000fdc:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    // peak location is acutally index for sharpest location of raw signal since we flipped the signal         
    maxim_find_peaks( an_dx_peak_locs, &n_npks, an_dx, BUFFER_SIZE-HAMMING_SIZE, n_th1, 8, 5 );//peak_height, peak_distance, max_num_peaks 
 8000fe0:	f107 01d8 	add.w	r1, r7, #216	; 0xd8
 8000fe4:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8000fe8:	2305      	movs	r3, #5
 8000fea:	9302      	str	r3, [sp, #8]
 8000fec:	2308      	movs	r3, #8
 8000fee:	9301      	str	r3, [sp, #4]
 8000ff0:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8000ff4:	9300      	str	r3, [sp, #0]
 8000ff6:	f240 13ef 	movw	r3, #495	; 0x1ef
 8000ffa:	4a3e      	ldr	r2, [pc, #248]	; (80010f4 <maxim_heart_rate_and_oxygen_saturation+0x3cc>)
 8000ffc:	f000 fb76 	bl	80016ec <maxim_find_peaks>

    n_peak_interval_sum =0;
 8001000:	2300      	movs	r3, #0
 8001002:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    if (n_npks>=2){
 8001006:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800100a:	2b01      	cmp	r3, #1
 800100c:	dd40      	ble.n	8001090 <maxim_heart_rate_and_oxygen_saturation+0x368>
        for (k=1; k<n_npks; k++)
 800100e:	2301      	movs	r3, #1
 8001010:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8001014:	e017      	b.n	8001046 <maxim_heart_rate_and_oxygen_saturation+0x31e>
            n_peak_interval_sum += (an_dx_peak_locs[k]-an_dx_peak_locs[k -1]);
 8001016:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800101a:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 800101e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001022:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001026:	1e59      	subs	r1, r3, #1
 8001028:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800102c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001030:	1ad3      	subs	r3, r2, r3
 8001032:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8001036:	4413      	add	r3, r2
 8001038:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
        for (k=1; k<n_npks; k++)
 800103c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001040:	3301      	adds	r3, #1
 8001042:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8001046:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800104a:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 800104e:	429a      	cmp	r2, r3
 8001050:	dbe1      	blt.n	8001016 <maxim_heart_rate_and_oxygen_saturation+0x2ee>
        n_peak_interval_sum=n_peak_interval_sum/(n_npks-1);
 8001052:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001056:	3b01      	subs	r3, #1
 8001058:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 800105c:	fb92 f3f3 	sdiv	r3, r2, r3
 8001060:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
        *pn_heart_rate=(int32_t)(6000/(float)n_peak_interval_sum*(float)(FS/100.0));// beats per minutes
 8001064:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001068:	ee07 3a90 	vmov	s15, r3
 800106c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001070:	eddf 6a24 	vldr	s13, [pc, #144]	; 8001104 <maxim_heart_rate_and_oxygen_saturation+0x3dc>
 8001074:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001078:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800107c:	ee17 2a90 	vmov	r2, s15
 8001080:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001084:	601a      	str	r2, [r3, #0]
        *pch_hr_valid  = 1;
 8001086:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800108a:	2201      	movs	r2, #1
 800108c:	701a      	strb	r2, [r3, #0]
 800108e:	e007      	b.n	80010a0 <maxim_heart_rate_and_oxygen_saturation+0x378>
    }
    else  {
        *pn_heart_rate = -999;
 8001090:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001094:	4a1c      	ldr	r2, [pc, #112]	; (8001108 <maxim_heart_rate_and_oxygen_saturation+0x3e0>)
 8001096:	601a      	str	r2, [r3, #0]
        *pch_hr_valid  = 0;
 8001098:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800109c:	2200      	movs	r2, #0
 800109e:	701a      	strb	r2, [r3, #0]
    }
            
    for ( k=0 ; k<n_npks ;k++)
 80010a0:	2300      	movs	r3, #0
 80010a2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80010a6:	e013      	b.n	80010d0 <maxim_heart_rate_and_oxygen_saturation+0x3a8>
        an_ir_valley_locs[k]=an_dx_peak_locs[k]+HAMMING_SIZE/2; 
 80010a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010ac:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 80010b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010b4:	1c9a      	adds	r2, r3, #2
 80010b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80010ba:	009b      	lsls	r3, r3, #2
 80010bc:	f507 719c 	add.w	r1, r7, #312	; 0x138
 80010c0:	440b      	add	r3, r1
 80010c2:	f843 2c9c 	str.w	r2, [r3, #-156]
    for ( k=0 ; k<n_npks ;k++)
 80010c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80010ca:	3301      	adds	r3, #1
 80010cc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80010d0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80010d4:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 80010d8:	429a      	cmp	r2, r3
 80010da:	dbe5      	blt.n	80010a8 <maxim_heart_rate_and_oxygen_saturation+0x380>


    // raw value : RED(=y) and IR(=X)
    // we need to assess DC and AC value of ir and red PPG.
    un_offset_tmp = un_offset;
 80010dc:	1cbb      	adds	r3, r7, #2
 80010de:	881b      	ldrh	r3, [r3, #0]
 80010e0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    for (k=0 ; k<n_buffer_length ; k++ )  {
 80010e4:	2300      	movs	r3, #0
 80010e6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80010ea:	e03e      	b.n	800116a <maxim_heart_rate_and_oxygen_saturation+0x442>
 80010ec:	1b4e81b5 	.word	0x1b4e81b5
 80010f0:	20000854 	.word	0x20000854
 80010f4:	20000094 	.word	0x20000094
 80010f8:	08005320 	.word	0x08005320
 80010fc:	725f9bed 	.word	0x725f9bed
 8001100:	21195767 	.word	0x21195767
 8001104:	45bb8000 	.word	0x45bb8000
 8001108:	fffffc19 	.word	0xfffffc19
        an_x[k] =  pun_ir_buffer[un_offset_tmp];
 800110c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8001110:	009b      	lsls	r3, r3, #2
 8001112:	f107 020c 	add.w	r2, r7, #12
 8001116:	6812      	ldr	r2, [r2, #0]
 8001118:	4413      	add	r3, r2
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	4619      	mov	r1, r3
 800111e:	4ab0      	ldr	r2, [pc, #704]	; (80013e0 <maxim_heart_rate_and_oxygen_saturation+0x6b8>)
 8001120:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001124:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        an_y[k] =  pun_red_buffer[un_offset_tmp];
 8001128:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800112c:	009b      	lsls	r3, r3, #2
 800112e:	f107 0208 	add.w	r2, r7, #8
 8001132:	6812      	ldr	r2, [r2, #0]
 8001134:	4413      	add	r3, r2
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	4619      	mov	r1, r3
 800113a:	4aaa      	ldr	r2, [pc, #680]	; (80013e4 <maxim_heart_rate_and_oxygen_saturation+0x6bc>)
 800113c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001140:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        un_offset_tmp = (un_offset_tmp + 1) % MAX30102_BUFFER_LENGTH;
 8001144:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8001148:	3301      	adds	r3, #1
 800114a:	4aa7      	ldr	r2, [pc, #668]	; (80013e8 <maxim_heart_rate_and_oxygen_saturation+0x6c0>)
 800114c:	fba2 1203 	umull	r1, r2, r2, r3
 8001150:	0992      	lsrs	r2, r2, #6
 8001152:	f44f 7116 	mov.w	r1, #600	; 0x258
 8001156:	fb01 f202 	mul.w	r2, r1, r2
 800115a:	1a9b      	subs	r3, r3, r2
 800115c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    for (k=0 ; k<n_buffer_length ; k++ )  {
 8001160:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001164:	3301      	adds	r3, #1
 8001166:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800116a:	1d3b      	adds	r3, r7, #4
 800116c:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	429a      	cmp	r2, r3
 8001174:	dbca      	blt.n	800110c <maxim_heart_rate_and_oxygen_saturation+0x3e4>
    }

    // find precise min near an_ir_valley_locs
    n_exact_ir_valley_locs_count =0; 
 8001176:	2300      	movs	r3, #0
 8001178:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    for(k=0 ; k<n_npks ;k++){
 800117c:	2300      	movs	r3, #0
 800117e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8001182:	e05a      	b.n	800123a <maxim_heart_rate_and_oxygen_saturation+0x512>
        un_only_once =1;
 8001184:	2301      	movs	r3, #1
 8001186:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
        m=an_ir_valley_locs[k];
 800118a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800118e:	009b      	lsls	r3, r3, #2
 8001190:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8001194:	4413      	add	r3, r2
 8001196:	f853 3c9c 	ldr.w	r3, [r3, #-156]
 800119a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
        n_c_min= 16777216;//2^24;
 800119e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80011a2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
        if (m+5 <  BUFFER_SIZE-HAMMING_SIZE  && m-5 >0){
 80011a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80011aa:	f5b3 7ff5 	cmp.w	r3, #490	; 0x1ea
 80011ae:	da3f      	bge.n	8001230 <maxim_heart_rate_and_oxygen_saturation+0x508>
 80011b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80011b4:	2b05      	cmp	r3, #5
 80011b6:	dd3b      	ble.n	8001230 <maxim_heart_rate_and_oxygen_saturation+0x508>
            for(i= m-5;i<m+5; i++)
 80011b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80011bc:	3b05      	subs	r3, #5
 80011be:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80011c2:	e025      	b.n	8001210 <maxim_heart_rate_and_oxygen_saturation+0x4e8>
                if (an_x[i]<n_c_min){
 80011c4:	4a86      	ldr	r2, [pc, #536]	; (80013e0 <maxim_heart_rate_and_oxygen_saturation+0x6b8>)
 80011c6:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80011ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011ce:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80011d2:	429a      	cmp	r2, r3
 80011d4:	dd17      	ble.n	8001206 <maxim_heart_rate_and_oxygen_saturation+0x4de>
                    if (un_only_once >0){
 80011d6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d002      	beq.n	80011e4 <maxim_heart_rate_and_oxygen_saturation+0x4bc>
                       un_only_once =0;
 80011de:	2300      	movs	r3, #0
 80011e0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
                   } 
                   n_c_min= an_x[i] ;
 80011e4:	4a7e      	ldr	r2, [pc, #504]	; (80013e0 <maxim_heart_rate_and_oxygen_saturation+0x6b8>)
 80011e6:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80011ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011ee:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
                   an_exact_ir_valley_locs[k]=i;
 80011f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80011f6:	009b      	lsls	r3, r3, #2
 80011f8:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80011fc:	4413      	add	r3, r2
 80011fe:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8001202:	f843 2cd8 	str.w	r2, [r3, #-216]
            for(i= m-5;i<m+5; i++)
 8001206:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800120a:	3301      	adds	r3, #1
 800120c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001210:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001214:	3304      	adds	r3, #4
 8001216:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 800121a:	429a      	cmp	r2, r3
 800121c:	ddd2      	ble.n	80011c4 <maxim_heart_rate_and_oxygen_saturation+0x49c>
                }
            if (un_only_once ==0)
 800121e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001222:	2b00      	cmp	r3, #0
 8001224:	d104      	bne.n	8001230 <maxim_heart_rate_and_oxygen_saturation+0x508>
                n_exact_ir_valley_locs_count ++ ;
 8001226:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800122a:	3301      	adds	r3, #1
 800122c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    for(k=0 ; k<n_npks ;k++){
 8001230:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001234:	3301      	adds	r3, #1
 8001236:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800123a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800123e:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8001242:	429a      	cmp	r2, r3
 8001244:	db9e      	blt.n	8001184 <maxim_heart_rate_and_oxygen_saturation+0x45c>
        }
    }
    if (n_exact_ir_valley_locs_count <2 ){
 8001246:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800124a:	2b01      	cmp	r3, #1
 800124c:	dc08      	bgt.n	8001260 <maxim_heart_rate_and_oxygen_saturation+0x538>
       *pn_spo2 =  -999 ; // do not use SPO2 since signal ratio is out of range
 800124e:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8001252:	4a66      	ldr	r2, [pc, #408]	; (80013ec <maxim_heart_rate_and_oxygen_saturation+0x6c4>)
 8001254:	601a      	str	r2, [r3, #0]
       *pch_spo2_valid  = 0; 
 8001256:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800125a:	2200      	movs	r2, #0
 800125c:	701a      	strb	r2, [r3, #0]
       return;
 800125e:	e239      	b.n	80016d4 <maxim_heart_rate_and_oxygen_saturation+0x9ac>
    }
    // 4 pt MA
    for(k=0; k< BUFFER_SIZE-MA4_SIZE; k++){
 8001260:	2300      	movs	r3, #0
 8001262:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8001266:	e04c      	b.n	8001302 <maxim_heart_rate_and_oxygen_saturation+0x5da>
        an_x[k]=( an_x[k]+an_x[k+1]+ an_x[k+2]+ an_x[k+3])/(int32_t)4;
 8001268:	4a5d      	ldr	r2, [pc, #372]	; (80013e0 <maxim_heart_rate_and_oxygen_saturation+0x6b8>)
 800126a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800126e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001272:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001276:	3301      	adds	r3, #1
 8001278:	4959      	ldr	r1, [pc, #356]	; (80013e0 <maxim_heart_rate_and_oxygen_saturation+0x6b8>)
 800127a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800127e:	441a      	add	r2, r3
 8001280:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001284:	3302      	adds	r3, #2
 8001286:	4956      	ldr	r1, [pc, #344]	; (80013e0 <maxim_heart_rate_and_oxygen_saturation+0x6b8>)
 8001288:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800128c:	441a      	add	r2, r3
 800128e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001292:	3303      	adds	r3, #3
 8001294:	4952      	ldr	r1, [pc, #328]	; (80013e0 <maxim_heart_rate_and_oxygen_saturation+0x6b8>)
 8001296:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800129a:	4413      	add	r3, r2
 800129c:	2b00      	cmp	r3, #0
 800129e:	da00      	bge.n	80012a2 <maxim_heart_rate_and_oxygen_saturation+0x57a>
 80012a0:	3303      	adds	r3, #3
 80012a2:	109b      	asrs	r3, r3, #2
 80012a4:	4619      	mov	r1, r3
 80012a6:	4a4e      	ldr	r2, [pc, #312]	; (80013e0 <maxim_heart_rate_and_oxygen_saturation+0x6b8>)
 80012a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80012ac:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        an_y[k]=( an_y[k]+an_y[k+1]+ an_y[k+2]+ an_y[k+3])/(int32_t)4;
 80012b0:	4a4c      	ldr	r2, [pc, #304]	; (80013e4 <maxim_heart_rate_and_oxygen_saturation+0x6bc>)
 80012b2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80012b6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80012ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80012be:	3301      	adds	r3, #1
 80012c0:	4948      	ldr	r1, [pc, #288]	; (80013e4 <maxim_heart_rate_and_oxygen_saturation+0x6bc>)
 80012c2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80012c6:	441a      	add	r2, r3
 80012c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80012cc:	3302      	adds	r3, #2
 80012ce:	4945      	ldr	r1, [pc, #276]	; (80013e4 <maxim_heart_rate_and_oxygen_saturation+0x6bc>)
 80012d0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80012d4:	441a      	add	r2, r3
 80012d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80012da:	3303      	adds	r3, #3
 80012dc:	4941      	ldr	r1, [pc, #260]	; (80013e4 <maxim_heart_rate_and_oxygen_saturation+0x6bc>)
 80012de:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80012e2:	4413      	add	r3, r2
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	da00      	bge.n	80012ea <maxim_heart_rate_and_oxygen_saturation+0x5c2>
 80012e8:	3303      	adds	r3, #3
 80012ea:	109b      	asrs	r3, r3, #2
 80012ec:	4619      	mov	r1, r3
 80012ee:	4a3d      	ldr	r2, [pc, #244]	; (80013e4 <maxim_heart_rate_and_oxygen_saturation+0x6bc>)
 80012f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80012f4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for(k=0; k< BUFFER_SIZE-MA4_SIZE; k++){
 80012f8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80012fc:	3301      	adds	r3, #1
 80012fe:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8001302:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001306:	f5b3 7ff8 	cmp.w	r3, #496	; 0x1f0
 800130a:	dbad      	blt.n	8001268 <maxim_heart_rate_and_oxygen_saturation+0x540>
    }

    //using an_exact_ir_valley_locs , find ir-red DC andir-red AC for SPO2 calibration ratio
    //finding AC/DC maximum of raw ir * red between two valley locations
    n_ratio_average =0; 
 800130c:	2300      	movs	r3, #0
 800130e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    n_i_ratio_count =0; 
 8001312:	2300      	movs	r3, #0
 8001314:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    
    for(k=0; k< 5; k++) an_ratio[k]=0;
 8001318:	2300      	movs	r3, #0
 800131a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800131e:	e00b      	b.n	8001338 <maxim_heart_rate_and_oxygen_saturation+0x610>
 8001320:	f107 0310 	add.w	r3, r7, #16
 8001324:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8001328:	2100      	movs	r1, #0
 800132a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800132e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001332:	3301      	adds	r3, #1
 8001334:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8001338:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800133c:	2b04      	cmp	r3, #4
 800133e:	ddef      	ble.n	8001320 <maxim_heart_rate_and_oxygen_saturation+0x5f8>
    for (k=0; k< n_exact_ir_valley_locs_count; k++){
 8001340:	2300      	movs	r3, #0
 8001342:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8001346:	e018      	b.n	800137a <maxim_heart_rate_and_oxygen_saturation+0x652>
        if (an_exact_ir_valley_locs[k] > BUFFER_SIZE ){             
 8001348:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800134c:	009b      	lsls	r3, r3, #2
 800134e:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8001352:	4413      	add	r3, r2
 8001354:	f853 3cd8 	ldr.w	r3, [r3, #-216]
 8001358:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800135c:	dd08      	ble.n	8001370 <maxim_heart_rate_and_oxygen_saturation+0x648>
            *pn_spo2 =  -999 ; // do not use SPO2 since valley loc is out of range
 800135e:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8001362:	4a22      	ldr	r2, [pc, #136]	; (80013ec <maxim_heart_rate_and_oxygen_saturation+0x6c4>)
 8001364:	601a      	str	r2, [r3, #0]
            *pch_spo2_valid  = 0; 
 8001366:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800136a:	2200      	movs	r2, #0
 800136c:	701a      	strb	r2, [r3, #0]
            return;
 800136e:	e1b1      	b.n	80016d4 <maxim_heart_rate_and_oxygen_saturation+0x9ac>
    for (k=0; k< n_exact_ir_valley_locs_count; k++){
 8001370:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001374:	3301      	adds	r3, #1
 8001376:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800137a:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 800137e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8001382:	429a      	cmp	r2, r3
 8001384:	dbe0      	blt.n	8001348 <maxim_heart_rate_and_oxygen_saturation+0x620>
        }
    }
    // find max between two valley locations 
    // and use ratio betwen AC compoent of Ir & Red and DC compoent of Ir & Red for SPO2 

    for (k=0; k< n_exact_ir_valley_locs_count-1; k++){
 8001386:	2300      	movs	r3, #0
 8001388:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800138c:	e14b      	b.n	8001626 <maxim_heart_rate_and_oxygen_saturation+0x8fe>
        n_y_dc_max= -16777216 ; 
 800138e:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 8001392:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        n_x_dc_max= - 16777216; 
 8001396:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 800139a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        if (an_exact_ir_valley_locs[k+1]-an_exact_ir_valley_locs[k] >10){
 800139e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80013a2:	3301      	adds	r3, #1
 80013a4:	009b      	lsls	r3, r3, #2
 80013a6:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80013aa:	4413      	add	r3, r2
 80013ac:	f853 2cd8 	ldr.w	r2, [r3, #-216]
 80013b0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80013b4:	009b      	lsls	r3, r3, #2
 80013b6:	f507 719c 	add.w	r1, r7, #312	; 0x138
 80013ba:	440b      	add	r3, r1
 80013bc:	f853 3cd8 	ldr.w	r3, [r3, #-216]
 80013c0:	1ad3      	subs	r3, r2, r3
 80013c2:	2b0a      	cmp	r3, #10
 80013c4:	f340 812a 	ble.w	800161c <maxim_heart_rate_and_oxygen_saturation+0x8f4>
            for (i=an_exact_ir_valley_locs[k]; i< an_exact_ir_valley_locs[k+1]; i++){
 80013c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80013cc:	009b      	lsls	r3, r3, #2
 80013ce:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80013d2:	4413      	add	r3, r2
 80013d4:	f853 3cd8 	ldr.w	r3, [r3, #-216]
 80013d8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80013dc:	e035      	b.n	800144a <maxim_heart_rate_and_oxygen_saturation+0x722>
 80013de:	bf00      	nop
 80013e0:	20000854 	.word	0x20000854
 80013e4:	20001024 	.word	0x20001024
 80013e8:	1b4e81b5 	.word	0x1b4e81b5
 80013ec:	fffffc19 	.word	0xfffffc19
                if (an_x[i]> n_x_dc_max) {n_x_dc_max =an_x[i];n_x_dc_max_idx =i; }
 80013f0:	4aba      	ldr	r2, [pc, #744]	; (80016dc <maxim_heart_rate_and_oxygen_saturation+0x9b4>)
 80013f2:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80013f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013fa:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 80013fe:	429a      	cmp	r2, r3
 8001400:	da0a      	bge.n	8001418 <maxim_heart_rate_and_oxygen_saturation+0x6f0>
 8001402:	4ab6      	ldr	r2, [pc, #728]	; (80016dc <maxim_heart_rate_and_oxygen_saturation+0x9b4>)
 8001404:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001408:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800140c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8001410:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001414:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
                if (an_y[i]> n_y_dc_max) {n_y_dc_max =an_y[i];n_y_dc_max_idx=i;}
 8001418:	4ab1      	ldr	r2, [pc, #708]	; (80016e0 <maxim_heart_rate_and_oxygen_saturation+0x9b8>)
 800141a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800141e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001422:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8001426:	429a      	cmp	r2, r3
 8001428:	da0a      	bge.n	8001440 <maxim_heart_rate_and_oxygen_saturation+0x718>
 800142a:	4aad      	ldr	r2, [pc, #692]	; (80016e0 <maxim_heart_rate_and_oxygen_saturation+0x9b8>)
 800142c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001430:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001434:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8001438:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800143c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
            for (i=an_exact_ir_valley_locs[k]; i< an_exact_ir_valley_locs[k+1]; i++){
 8001440:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001444:	3301      	adds	r3, #1
 8001446:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800144a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800144e:	3301      	adds	r3, #1
 8001450:	009b      	lsls	r3, r3, #2
 8001452:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8001456:	4413      	add	r3, r2
 8001458:	f853 3cd8 	ldr.w	r3, [r3, #-216]
 800145c:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8001460:	429a      	cmp	r2, r3
 8001462:	dbc5      	blt.n	80013f0 <maxim_heart_rate_and_oxygen_saturation+0x6c8>
            }
            n_y_ac= (an_y[an_exact_ir_valley_locs[k+1]] - an_y[an_exact_ir_valley_locs[k] ] )*(n_y_dc_max_idx -an_exact_ir_valley_locs[k]); //red
 8001464:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001468:	3301      	adds	r3, #1
 800146a:	009b      	lsls	r3, r3, #2
 800146c:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8001470:	4413      	add	r3, r2
 8001472:	f853 3cd8 	ldr.w	r3, [r3, #-216]
 8001476:	4a9a      	ldr	r2, [pc, #616]	; (80016e0 <maxim_heart_rate_and_oxygen_saturation+0x9b8>)
 8001478:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800147c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001480:	009b      	lsls	r3, r3, #2
 8001482:	f507 719c 	add.w	r1, r7, #312	; 0x138
 8001486:	440b      	add	r3, r1
 8001488:	f853 3cd8 	ldr.w	r3, [r3, #-216]
 800148c:	4994      	ldr	r1, [pc, #592]	; (80016e0 <maxim_heart_rate_and_oxygen_saturation+0x9b8>)
 800148e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001492:	1ad2      	subs	r2, r2, r3
 8001494:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001498:	009b      	lsls	r3, r3, #2
 800149a:	f507 719c 	add.w	r1, r7, #312	; 0x138
 800149e:	440b      	add	r3, r1
 80014a0:	f853 3cd8 	ldr.w	r3, [r3, #-216]
 80014a4:	f8d7 1104 	ldr.w	r1, [r7, #260]	; 0x104
 80014a8:	1acb      	subs	r3, r1, r3
 80014aa:	fb03 f302 	mul.w	r3, r3, r2
 80014ae:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
            n_y_ac=  an_y[an_exact_ir_valley_locs[k]] + n_y_ac/ (an_exact_ir_valley_locs[k+1] - an_exact_ir_valley_locs[k])  ; 
 80014b2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80014b6:	009b      	lsls	r3, r3, #2
 80014b8:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80014bc:	4413      	add	r3, r2
 80014be:	f853 3cd8 	ldr.w	r3, [r3, #-216]
 80014c2:	4a87      	ldr	r2, [pc, #540]	; (80016e0 <maxim_heart_rate_and_oxygen_saturation+0x9b8>)
 80014c4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80014c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80014cc:	3301      	adds	r3, #1
 80014ce:	009b      	lsls	r3, r3, #2
 80014d0:	f507 719c 	add.w	r1, r7, #312	; 0x138
 80014d4:	440b      	add	r3, r1
 80014d6:	f853 1cd8 	ldr.w	r1, [r3, #-216]
 80014da:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80014de:	009b      	lsls	r3, r3, #2
 80014e0:	f507 709c 	add.w	r0, r7, #312	; 0x138
 80014e4:	4403      	add	r3, r0
 80014e6:	f853 3cd8 	ldr.w	r3, [r3, #-216]
 80014ea:	1acb      	subs	r3, r1, r3
 80014ec:	f8d7 10ec 	ldr.w	r1, [r7, #236]	; 0xec
 80014f0:	fb91 f3f3 	sdiv	r3, r1, r3
 80014f4:	4413      	add	r3, r2
 80014f6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
        
        
            n_y_ac=  an_y[n_y_dc_max_idx] - n_y_ac;    // subracting linear DC compoenents from raw 
 80014fa:	4a79      	ldr	r2, [pc, #484]	; (80016e0 <maxim_heart_rate_and_oxygen_saturation+0x9b8>)
 80014fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8001500:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001504:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8001508:	1ad3      	subs	r3, r2, r3
 800150a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
            n_x_ac= (an_x[an_exact_ir_valley_locs[k+1]] - an_x[an_exact_ir_valley_locs[k] ] )*(n_x_dc_max_idx -an_exact_ir_valley_locs[k]); // ir
 800150e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001512:	3301      	adds	r3, #1
 8001514:	009b      	lsls	r3, r3, #2
 8001516:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800151a:	4413      	add	r3, r2
 800151c:	f853 3cd8 	ldr.w	r3, [r3, #-216]
 8001520:	4a6e      	ldr	r2, [pc, #440]	; (80016dc <maxim_heart_rate_and_oxygen_saturation+0x9b4>)
 8001522:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001526:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800152a:	009b      	lsls	r3, r3, #2
 800152c:	f507 719c 	add.w	r1, r7, #312	; 0x138
 8001530:	440b      	add	r3, r1
 8001532:	f853 3cd8 	ldr.w	r3, [r3, #-216]
 8001536:	4969      	ldr	r1, [pc, #420]	; (80016dc <maxim_heart_rate_and_oxygen_saturation+0x9b4>)
 8001538:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800153c:	1ad2      	subs	r2, r2, r3
 800153e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001542:	009b      	lsls	r3, r3, #2
 8001544:	f507 719c 	add.w	r1, r7, #312	; 0x138
 8001548:	440b      	add	r3, r1
 800154a:	f853 3cd8 	ldr.w	r3, [r3, #-216]
 800154e:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
 8001552:	1acb      	subs	r3, r1, r3
 8001554:	fb03 f302 	mul.w	r3, r3, r2
 8001558:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
            n_x_ac=  an_x[an_exact_ir_valley_locs[k]] + n_x_ac/ (an_exact_ir_valley_locs[k+1] - an_exact_ir_valley_locs[k]); 
 800155c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001560:	009b      	lsls	r3, r3, #2
 8001562:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8001566:	4413      	add	r3, r2
 8001568:	f853 3cd8 	ldr.w	r3, [r3, #-216]
 800156c:	4a5b      	ldr	r2, [pc, #364]	; (80016dc <maxim_heart_rate_and_oxygen_saturation+0x9b4>)
 800156e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001572:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001576:	3301      	adds	r3, #1
 8001578:	009b      	lsls	r3, r3, #2
 800157a:	f507 719c 	add.w	r1, r7, #312	; 0x138
 800157e:	440b      	add	r3, r1
 8001580:	f853 1cd8 	ldr.w	r1, [r3, #-216]
 8001584:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001588:	009b      	lsls	r3, r3, #2
 800158a:	f507 709c 	add.w	r0, r7, #312	; 0x138
 800158e:	4403      	add	r3, r0
 8001590:	f853 3cd8 	ldr.w	r3, [r3, #-216]
 8001594:	1acb      	subs	r3, r1, r3
 8001596:	f8d7 10e8 	ldr.w	r1, [r7, #232]	; 0xe8
 800159a:	fb91 f3f3 	sdiv	r3, r1, r3
 800159e:	4413      	add	r3, r2
 80015a0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
            n_x_ac=  an_x[n_y_dc_max_idx] - n_x_ac;      // subracting linear DC compoenents from raw 
 80015a4:	4a4d      	ldr	r2, [pc, #308]	; (80016dc <maxim_heart_rate_and_oxygen_saturation+0x9b4>)
 80015a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80015aa:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80015ae:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80015b2:	1ad3      	subs	r3, r2, r3
 80015b4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
            n_nume=( n_y_ac *n_x_dc_max)>>7 ; //prepare X100 to preserve floating value
 80015b8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80015bc:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 80015c0:	fb02 f303 	mul.w	r3, r2, r3
 80015c4:	11db      	asrs	r3, r3, #7
 80015c6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
            n_denom= ( n_x_ac *n_y_dc_max)>>7;
 80015ca:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80015ce:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 80015d2:	fb02 f303 	mul.w	r3, r2, r3
 80015d6:	11db      	asrs	r3, r3, #7
 80015d8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
            if (n_denom>0  && n_i_ratio_count <5 &&  n_nume != 0)
 80015dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	dd1b      	ble.n	800161c <maxim_heart_rate_and_oxygen_saturation+0x8f4>
 80015e4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80015e8:	2b04      	cmp	r3, #4
 80015ea:	dc17      	bgt.n	800161c <maxim_heart_rate_and_oxygen_saturation+0x8f4>
 80015ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d013      	beq.n	800161c <maxim_heart_rate_and_oxygen_saturation+0x8f4>
            {   
                an_ratio[n_i_ratio_count]= (n_nume*100)/n_denom ; //formular is ( n_y_ac *n_x_dc_max) / ( n_x_ac *n_y_dc_max) ;
 80015f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80015f8:	2264      	movs	r2, #100	; 0x64
 80015fa:	fb02 f203 	mul.w	r2, r2, r3
 80015fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001602:	fb92 f1f3 	sdiv	r1, r2, r3
 8001606:	f107 0310 	add.w	r3, r7, #16
 800160a:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800160e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                n_i_ratio_count++;
 8001612:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001616:	3301      	adds	r3, #1
 8001618:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    for (k=0; k< n_exact_ir_valley_locs_count-1; k++){
 800161c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001620:	3301      	adds	r3, #1
 8001622:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8001626:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800162a:	3b01      	subs	r3, #1
 800162c:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8001630:	429a      	cmp	r2, r3
 8001632:	f6ff aeac 	blt.w	800138e <maxim_heart_rate_and_oxygen_saturation+0x666>
            }
        }
    }

    maxim_sort_ascend(an_ratio, n_i_ratio_count);
 8001636:	f107 0310 	add.w	r3, r7, #16
 800163a:	f8d7 1128 	ldr.w	r1, [r7, #296]	; 0x128
 800163e:	4618      	mov	r0, r3
 8001640:	f000 f949 	bl	80018d6 <maxim_sort_ascend>
    n_middle_idx= n_i_ratio_count/2;
 8001644:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001648:	0fda      	lsrs	r2, r3, #31
 800164a:	4413      	add	r3, r2
 800164c:	105b      	asrs	r3, r3, #1
 800164e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4

    if (n_middle_idx >1)
 8001652:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001656:	2b01      	cmp	r3, #1
 8001658:	dd13      	ble.n	8001682 <maxim_heart_rate_and_oxygen_saturation+0x95a>
        n_ratio_average =( an_ratio[n_middle_idx-1] +an_ratio[n_middle_idx])/2; // use median
 800165a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800165e:	1e5a      	subs	r2, r3, #1
 8001660:	f107 0310 	add.w	r3, r7, #16
 8001664:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001668:	f107 0310 	add.w	r3, r7, #16
 800166c:	f8d7 10f4 	ldr.w	r1, [r7, #244]	; 0xf4
 8001670:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001674:	4413      	add	r3, r2
 8001676:	0fda      	lsrs	r2, r3, #31
 8001678:	4413      	add	r3, r2
 800167a:	105b      	asrs	r3, r3, #1
 800167c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8001680:	e007      	b.n	8001692 <maxim_heart_rate_and_oxygen_saturation+0x96a>
    else
        n_ratio_average = an_ratio[n_middle_idx ];
 8001682:	f107 0310 	add.w	r3, r7, #16
 8001686:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 800168a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800168e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc

    if( n_ratio_average>2 && n_ratio_average <184){
 8001692:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001696:	2b02      	cmp	r3, #2
 8001698:	dd14      	ble.n	80016c4 <maxim_heart_rate_and_oxygen_saturation+0x99c>
 800169a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800169e:	2bb7      	cmp	r3, #183	; 0xb7
 80016a0:	dc10      	bgt.n	80016c4 <maxim_heart_rate_and_oxygen_saturation+0x99c>
        n_spo2_calc= uch_spo2_table[n_ratio_average] ;
 80016a2:	4a10      	ldr	r2, [pc, #64]	; (80016e4 <maxim_heart_rate_and_oxygen_saturation+0x9bc>)
 80016a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80016a8:	4413      	add	r3, r2
 80016aa:	781b      	ldrb	r3, [r3, #0]
 80016ac:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
        *pn_spo2 = n_spo2_calc ;
 80016b0:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80016b4:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 80016b8:	601a      	str	r2, [r3, #0]
        *pch_spo2_valid  = 1;//  float_SPO2 =  -45.060*n_ratio_average* n_ratio_average/10000 + 30.354 *n_ratio_average/100 + 94.845 ;  // for comparison with table
 80016ba:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80016be:	2201      	movs	r2, #1
 80016c0:	701a      	strb	r2, [r3, #0]
 80016c2:	e007      	b.n	80016d4 <maxim_heart_rate_and_oxygen_saturation+0x9ac>
    }
    else{
        *pn_spo2 =  -999 ; // do not use SPO2 since signal ratio is out of range
 80016c4:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80016c8:	4a07      	ldr	r2, [pc, #28]	; (80016e8 <maxim_heart_rate_and_oxygen_saturation+0x9c0>)
 80016ca:	601a      	str	r2, [r3, #0]
        *pch_spo2_valid  = 0; 
 80016cc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80016d0:	2200      	movs	r2, #0
 80016d2:	701a      	strb	r2, [r3, #0]
    }
}
 80016d4:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd90      	pop	{r4, r7, pc}
 80016dc:	20000854 	.word	0x20000854
 80016e0:	20001024 	.word	0x20001024
 80016e4:	08005360 	.word	0x08005360
 80016e8:	fffffc19 	.word	0xfffffc19

080016ec <maxim_find_peaks>:
* \par          Details
*               Find at most MAX_NUM peaks above MIN_HEIGHT separated by at least MIN_DISTANCE
*
* \retval       None
*/
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b086      	sub	sp, #24
 80016f0:	af02      	add	r7, sp, #8
 80016f2:	60f8      	str	r0, [r7, #12]
 80016f4:	60b9      	str	r1, [r7, #8]
 80016f6:	607a      	str	r2, [r7, #4]
 80016f8:	603b      	str	r3, [r7, #0]
    maxim_peaks_above_min_height( pn_locs, pn_npks, pn_x, n_size, n_min_height );
 80016fa:	69bb      	ldr	r3, [r7, #24]
 80016fc:	9300      	str	r3, [sp, #0]
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	687a      	ldr	r2, [r7, #4]
 8001702:	68b9      	ldr	r1, [r7, #8]
 8001704:	68f8      	ldr	r0, [r7, #12]
 8001706:	f000 f812 	bl	800172e <maxim_peaks_above_min_height>
    maxim_remove_close_peaks( pn_locs, pn_npks, pn_x, n_min_distance );
 800170a:	69fb      	ldr	r3, [r7, #28]
 800170c:	687a      	ldr	r2, [r7, #4]
 800170e:	68b9      	ldr	r1, [r7, #8]
 8001710:	68f8      	ldr	r0, [r7, #12]
 8001712:	f000 f880 	bl	8001816 <maxim_remove_close_peaks>
    *pn_npks = min( *pn_npks, n_max_num );
 8001716:	68bb      	ldr	r3, [r7, #8]
 8001718:	681a      	ldr	r2, [r3, #0]
 800171a:	6a3b      	ldr	r3, [r7, #32]
 800171c:	429a      	cmp	r2, r3
 800171e:	bfa8      	it	ge
 8001720:	461a      	movge	r2, r3
 8001722:	68bb      	ldr	r3, [r7, #8]
 8001724:	601a      	str	r2, [r3, #0]
}
 8001726:	bf00      	nop
 8001728:	3710      	adds	r7, #16
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}

0800172e <maxim_peaks_above_min_height>:
* \par          Details
*               Find all peaks above MIN_HEIGHT
*
* \retval       None
*/
{
 800172e:	b480      	push	{r7}
 8001730:	b087      	sub	sp, #28
 8001732:	af00      	add	r7, sp, #0
 8001734:	60f8      	str	r0, [r7, #12]
 8001736:	60b9      	str	r1, [r7, #8]
 8001738:	607a      	str	r2, [r7, #4]
 800173a:	603b      	str	r3, [r7, #0]
    int32_t i = 1, n_width;
 800173c:	2301      	movs	r3, #1
 800173e:	617b      	str	r3, [r7, #20]
    *pn_npks = 0;
 8001740:	68bb      	ldr	r3, [r7, #8]
 8001742:	2200      	movs	r2, #0
 8001744:	601a      	str	r2, [r3, #0]
    
    while (i < n_size-1){
 8001746:	e05a      	b.n	80017fe <maxim_peaks_above_min_height+0xd0>
        if (pn_x[i] > n_min_height && pn_x[i] > pn_x[i-1]){            // find left edge of potential peaks
 8001748:	697b      	ldr	r3, [r7, #20]
 800174a:	009b      	lsls	r3, r3, #2
 800174c:	687a      	ldr	r2, [r7, #4]
 800174e:	4413      	add	r3, r2
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	6a3a      	ldr	r2, [r7, #32]
 8001754:	429a      	cmp	r2, r3
 8001756:	da4f      	bge.n	80017f8 <maxim_peaks_above_min_height+0xca>
 8001758:	697b      	ldr	r3, [r7, #20]
 800175a:	009b      	lsls	r3, r3, #2
 800175c:	687a      	ldr	r2, [r7, #4]
 800175e:	4413      	add	r3, r2
 8001760:	681a      	ldr	r2, [r3, #0]
 8001762:	697b      	ldr	r3, [r7, #20]
 8001764:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001768:	3b01      	subs	r3, #1
 800176a:	009b      	lsls	r3, r3, #2
 800176c:	6879      	ldr	r1, [r7, #4]
 800176e:	440b      	add	r3, r1
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	429a      	cmp	r2, r3
 8001774:	dd40      	ble.n	80017f8 <maxim_peaks_above_min_height+0xca>
            n_width = 1;
 8001776:	2301      	movs	r3, #1
 8001778:	613b      	str	r3, [r7, #16]
            while (i+n_width < n_size && pn_x[i] == pn_x[i+n_width])    // find flat peaks
 800177a:	e002      	b.n	8001782 <maxim_peaks_above_min_height+0x54>
                n_width++;
 800177c:	693b      	ldr	r3, [r7, #16]
 800177e:	3301      	adds	r3, #1
 8001780:	613b      	str	r3, [r7, #16]
            while (i+n_width < n_size && pn_x[i] == pn_x[i+n_width])    // find flat peaks
 8001782:	697a      	ldr	r2, [r7, #20]
 8001784:	693b      	ldr	r3, [r7, #16]
 8001786:	4413      	add	r3, r2
 8001788:	683a      	ldr	r2, [r7, #0]
 800178a:	429a      	cmp	r2, r3
 800178c:	dd0d      	ble.n	80017aa <maxim_peaks_above_min_height+0x7c>
 800178e:	697b      	ldr	r3, [r7, #20]
 8001790:	009b      	lsls	r3, r3, #2
 8001792:	687a      	ldr	r2, [r7, #4]
 8001794:	4413      	add	r3, r2
 8001796:	681a      	ldr	r2, [r3, #0]
 8001798:	6979      	ldr	r1, [r7, #20]
 800179a:	693b      	ldr	r3, [r7, #16]
 800179c:	440b      	add	r3, r1
 800179e:	009b      	lsls	r3, r3, #2
 80017a0:	6879      	ldr	r1, [r7, #4]
 80017a2:	440b      	add	r3, r1
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	429a      	cmp	r2, r3
 80017a8:	d0e8      	beq.n	800177c <maxim_peaks_above_min_height+0x4e>
            if (pn_x[i] > pn_x[i+n_width] && (*pn_npks) < 15 ){                            // find right edge of peaks
 80017aa:	697b      	ldr	r3, [r7, #20]
 80017ac:	009b      	lsls	r3, r3, #2
 80017ae:	687a      	ldr	r2, [r7, #4]
 80017b0:	4413      	add	r3, r2
 80017b2:	681a      	ldr	r2, [r3, #0]
 80017b4:	6979      	ldr	r1, [r7, #20]
 80017b6:	693b      	ldr	r3, [r7, #16]
 80017b8:	440b      	add	r3, r1
 80017ba:	009b      	lsls	r3, r3, #2
 80017bc:	6879      	ldr	r1, [r7, #4]
 80017be:	440b      	add	r3, r1
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	429a      	cmp	r2, r3
 80017c4:	dd13      	ble.n	80017ee <maxim_peaks_above_min_height+0xc0>
 80017c6:	68bb      	ldr	r3, [r7, #8]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	2b0e      	cmp	r3, #14
 80017cc:	dc0f      	bgt.n	80017ee <maxim_peaks_above_min_height+0xc0>
                pn_locs[(*pn_npks)++] = i;        
 80017ce:	68bb      	ldr	r3, [r7, #8]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	1c59      	adds	r1, r3, #1
 80017d4:	68ba      	ldr	r2, [r7, #8]
 80017d6:	6011      	str	r1, [r2, #0]
 80017d8:	009b      	lsls	r3, r3, #2
 80017da:	68fa      	ldr	r2, [r7, #12]
 80017dc:	4413      	add	r3, r2
 80017de:	697a      	ldr	r2, [r7, #20]
 80017e0:	601a      	str	r2, [r3, #0]
                // for flat peaks, peak location is left edge
                i += n_width+1;
 80017e2:	693b      	ldr	r3, [r7, #16]
 80017e4:	3301      	adds	r3, #1
 80017e6:	697a      	ldr	r2, [r7, #20]
 80017e8:	4413      	add	r3, r2
 80017ea:	617b      	str	r3, [r7, #20]
 80017ec:	e003      	b.n	80017f6 <maxim_peaks_above_min_height+0xc8>
            }
            else
                i += n_width;
 80017ee:	697a      	ldr	r2, [r7, #20]
 80017f0:	693b      	ldr	r3, [r7, #16]
 80017f2:	4413      	add	r3, r2
 80017f4:	617b      	str	r3, [r7, #20]
            if (pn_x[i] > pn_x[i+n_width] && (*pn_npks) < 15 ){                            // find right edge of peaks
 80017f6:	e002      	b.n	80017fe <maxim_peaks_above_min_height+0xd0>
        }
        else
            i++;
 80017f8:	697b      	ldr	r3, [r7, #20]
 80017fa:	3301      	adds	r3, #1
 80017fc:	617b      	str	r3, [r7, #20]
    while (i < n_size-1){
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	3b01      	subs	r3, #1
 8001802:	697a      	ldr	r2, [r7, #20]
 8001804:	429a      	cmp	r2, r3
 8001806:	db9f      	blt.n	8001748 <maxim_peaks_above_min_height+0x1a>
    }
}
 8001808:	bf00      	nop
 800180a:	bf00      	nop
 800180c:	371c      	adds	r7, #28
 800180e:	46bd      	mov	sp, r7
 8001810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001814:	4770      	bx	lr

08001816 <maxim_remove_close_peaks>:
* \par          Details
*               Remove peaks separated by less than MIN_DISTANCE
*
* \retval       None
*/
{
 8001816:	b580      	push	{r7, lr}
 8001818:	b088      	sub	sp, #32
 800181a:	af00      	add	r7, sp, #0
 800181c:	60f8      	str	r0, [r7, #12]
 800181e:	60b9      	str	r1, [r7, #8]
 8001820:	607a      	str	r2, [r7, #4]
 8001822:	603b      	str	r3, [r7, #0]
    
    int32_t i, j, n_old_npks, n_dist;
    
    /* Order peaks from large to small */
    maxim_sort_indices_descend( pn_x, pn_locs, *pn_npks );
 8001824:	68bb      	ldr	r3, [r7, #8]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	461a      	mov	r2, r3
 800182a:	68f9      	ldr	r1, [r7, #12]
 800182c:	6878      	ldr	r0, [r7, #4]
 800182e:	f000 f895 	bl	800195c <maxim_sort_indices_descend>

    for ( i = -1; i < *pn_npks; i++ ){
 8001832:	f04f 33ff 	mov.w	r3, #4294967295
 8001836:	61fb      	str	r3, [r7, #28]
 8001838:	e03e      	b.n	80018b8 <maxim_remove_close_peaks+0xa2>
        n_old_npks = *pn_npks;
 800183a:	68bb      	ldr	r3, [r7, #8]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	617b      	str	r3, [r7, #20]
        *pn_npks = i+1;
 8001840:	69fb      	ldr	r3, [r7, #28]
 8001842:	1c5a      	adds	r2, r3, #1
 8001844:	68bb      	ldr	r3, [r7, #8]
 8001846:	601a      	str	r2, [r3, #0]
        for ( j = i+1; j < n_old_npks; j++ ){
 8001848:	69fb      	ldr	r3, [r7, #28]
 800184a:	3301      	adds	r3, #1
 800184c:	61bb      	str	r3, [r7, #24]
 800184e:	e02c      	b.n	80018aa <maxim_remove_close_peaks+0x94>
            n_dist =  pn_locs[j] - ( i == -1 ? -1 : pn_locs[i] ); // lag-zero peak of autocorr is at index -1
 8001850:	69bb      	ldr	r3, [r7, #24]
 8001852:	009b      	lsls	r3, r3, #2
 8001854:	68fa      	ldr	r2, [r7, #12]
 8001856:	4413      	add	r3, r2
 8001858:	681a      	ldr	r2, [r3, #0]
 800185a:	69fb      	ldr	r3, [r7, #28]
 800185c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001860:	d005      	beq.n	800186e <maxim_remove_close_peaks+0x58>
 8001862:	69fb      	ldr	r3, [r7, #28]
 8001864:	009b      	lsls	r3, r3, #2
 8001866:	68f9      	ldr	r1, [r7, #12]
 8001868:	440b      	add	r3, r1
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	e001      	b.n	8001872 <maxim_remove_close_peaks+0x5c>
 800186e:	f04f 33ff 	mov.w	r3, #4294967295
 8001872:	1ad3      	subs	r3, r2, r3
 8001874:	613b      	str	r3, [r7, #16]
            if ( n_dist > n_min_distance || n_dist < -n_min_distance )
 8001876:	693a      	ldr	r2, [r7, #16]
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	429a      	cmp	r2, r3
 800187c:	dc04      	bgt.n	8001888 <maxim_remove_close_peaks+0x72>
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	425b      	negs	r3, r3
 8001882:	693a      	ldr	r2, [r7, #16]
 8001884:	429a      	cmp	r2, r3
 8001886:	da0d      	bge.n	80018a4 <maxim_remove_close_peaks+0x8e>
                pn_locs[(*pn_npks)++] = pn_locs[j];
 8001888:	69bb      	ldr	r3, [r7, #24]
 800188a:	009b      	lsls	r3, r3, #2
 800188c:	68fa      	ldr	r2, [r7, #12]
 800188e:	441a      	add	r2, r3
 8001890:	68bb      	ldr	r3, [r7, #8]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	1c58      	adds	r0, r3, #1
 8001896:	68b9      	ldr	r1, [r7, #8]
 8001898:	6008      	str	r0, [r1, #0]
 800189a:	009b      	lsls	r3, r3, #2
 800189c:	68f9      	ldr	r1, [r7, #12]
 800189e:	440b      	add	r3, r1
 80018a0:	6812      	ldr	r2, [r2, #0]
 80018a2:	601a      	str	r2, [r3, #0]
        for ( j = i+1; j < n_old_npks; j++ ){
 80018a4:	69bb      	ldr	r3, [r7, #24]
 80018a6:	3301      	adds	r3, #1
 80018a8:	61bb      	str	r3, [r7, #24]
 80018aa:	69ba      	ldr	r2, [r7, #24]
 80018ac:	697b      	ldr	r3, [r7, #20]
 80018ae:	429a      	cmp	r2, r3
 80018b0:	dbce      	blt.n	8001850 <maxim_remove_close_peaks+0x3a>
    for ( i = -1; i < *pn_npks; i++ ){
 80018b2:	69fb      	ldr	r3, [r7, #28]
 80018b4:	3301      	adds	r3, #1
 80018b6:	61fb      	str	r3, [r7, #28]
 80018b8:	68bb      	ldr	r3, [r7, #8]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	69fa      	ldr	r2, [r7, #28]
 80018be:	429a      	cmp	r2, r3
 80018c0:	dbbb      	blt.n	800183a <maxim_remove_close_peaks+0x24>
        }
    }

    // Resort indices longo ascending order
    maxim_sort_ascend( pn_locs, *pn_npks );
 80018c2:	68bb      	ldr	r3, [r7, #8]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	4619      	mov	r1, r3
 80018c8:	68f8      	ldr	r0, [r7, #12]
 80018ca:	f000 f804 	bl	80018d6 <maxim_sort_ascend>
}
 80018ce:	bf00      	nop
 80018d0:	3720      	adds	r7, #32
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}

080018d6 <maxim_sort_ascend>:
* \par          Details
*               Sort array in ascending order (insertion sort algorithm)
*
* \retval       None
*/
{
 80018d6:	b480      	push	{r7}
 80018d8:	b087      	sub	sp, #28
 80018da:	af00      	add	r7, sp, #0
 80018dc:	6078      	str	r0, [r7, #4]
 80018de:	6039      	str	r1, [r7, #0]
    int32_t i, j, n_temp;
    for (i = 1; i < n_size; i++) {
 80018e0:	2301      	movs	r3, #1
 80018e2:	617b      	str	r3, [r7, #20]
 80018e4:	e02f      	b.n	8001946 <maxim_sort_ascend+0x70>
        n_temp = pn_x[i];
 80018e6:	697b      	ldr	r3, [r7, #20]
 80018e8:	009b      	lsls	r3, r3, #2
 80018ea:	687a      	ldr	r2, [r7, #4]
 80018ec:	4413      	add	r3, r2
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	60fb      	str	r3, [r7, #12]
        for (j = i; j > 0 && n_temp < pn_x[j-1]; j--)
 80018f2:	697b      	ldr	r3, [r7, #20]
 80018f4:	613b      	str	r3, [r7, #16]
 80018f6:	e00f      	b.n	8001918 <maxim_sort_ascend+0x42>
            pn_x[j] = pn_x[j-1];
 80018f8:	693b      	ldr	r3, [r7, #16]
 80018fa:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80018fe:	3b01      	subs	r3, #1
 8001900:	009b      	lsls	r3, r3, #2
 8001902:	687a      	ldr	r2, [r7, #4]
 8001904:	441a      	add	r2, r3
 8001906:	693b      	ldr	r3, [r7, #16]
 8001908:	009b      	lsls	r3, r3, #2
 800190a:	6879      	ldr	r1, [r7, #4]
 800190c:	440b      	add	r3, r1
 800190e:	6812      	ldr	r2, [r2, #0]
 8001910:	601a      	str	r2, [r3, #0]
        for (j = i; j > 0 && n_temp < pn_x[j-1]; j--)
 8001912:	693b      	ldr	r3, [r7, #16]
 8001914:	3b01      	subs	r3, #1
 8001916:	613b      	str	r3, [r7, #16]
 8001918:	693b      	ldr	r3, [r7, #16]
 800191a:	2b00      	cmp	r3, #0
 800191c:	dd0a      	ble.n	8001934 <maxim_sort_ascend+0x5e>
 800191e:	693b      	ldr	r3, [r7, #16]
 8001920:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001924:	3b01      	subs	r3, #1
 8001926:	009b      	lsls	r3, r3, #2
 8001928:	687a      	ldr	r2, [r7, #4]
 800192a:	4413      	add	r3, r2
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	68fa      	ldr	r2, [r7, #12]
 8001930:	429a      	cmp	r2, r3
 8001932:	dbe1      	blt.n	80018f8 <maxim_sort_ascend+0x22>
        pn_x[j] = n_temp;
 8001934:	693b      	ldr	r3, [r7, #16]
 8001936:	009b      	lsls	r3, r3, #2
 8001938:	687a      	ldr	r2, [r7, #4]
 800193a:	4413      	add	r3, r2
 800193c:	68fa      	ldr	r2, [r7, #12]
 800193e:	601a      	str	r2, [r3, #0]
    for (i = 1; i < n_size; i++) {
 8001940:	697b      	ldr	r3, [r7, #20]
 8001942:	3301      	adds	r3, #1
 8001944:	617b      	str	r3, [r7, #20]
 8001946:	697a      	ldr	r2, [r7, #20]
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	429a      	cmp	r2, r3
 800194c:	dbcb      	blt.n	80018e6 <maxim_sort_ascend+0x10>
    }
}
 800194e:	bf00      	nop
 8001950:	bf00      	nop
 8001952:	371c      	adds	r7, #28
 8001954:	46bd      	mov	sp, r7
 8001956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195a:	4770      	bx	lr

0800195c <maxim_sort_indices_descend>:
* \par          Details
*               Sort indices according to descending order (insertion sort algorithm)
*
* \retval       None
*/ 
{
 800195c:	b480      	push	{r7}
 800195e:	b089      	sub	sp, #36	; 0x24
 8001960:	af00      	add	r7, sp, #0
 8001962:	60f8      	str	r0, [r7, #12]
 8001964:	60b9      	str	r1, [r7, #8]
 8001966:	607a      	str	r2, [r7, #4]
    int32_t i, j, n_temp;
    for (i = 1; i < n_size; i++) {
 8001968:	2301      	movs	r3, #1
 800196a:	61fb      	str	r3, [r7, #28]
 800196c:	e037      	b.n	80019de <maxim_sort_indices_descend+0x82>
        n_temp = pn_indx[i];
 800196e:	69fb      	ldr	r3, [r7, #28]
 8001970:	009b      	lsls	r3, r3, #2
 8001972:	68ba      	ldr	r2, [r7, #8]
 8001974:	4413      	add	r3, r2
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	617b      	str	r3, [r7, #20]
        for (j = i; j > 0 && pn_x[n_temp] > pn_x[pn_indx[j-1]]; j--)
 800197a:	69fb      	ldr	r3, [r7, #28]
 800197c:	61bb      	str	r3, [r7, #24]
 800197e:	e00f      	b.n	80019a0 <maxim_sort_indices_descend+0x44>
            pn_indx[j] = pn_indx[j-1];
 8001980:	69bb      	ldr	r3, [r7, #24]
 8001982:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001986:	3b01      	subs	r3, #1
 8001988:	009b      	lsls	r3, r3, #2
 800198a:	68ba      	ldr	r2, [r7, #8]
 800198c:	441a      	add	r2, r3
 800198e:	69bb      	ldr	r3, [r7, #24]
 8001990:	009b      	lsls	r3, r3, #2
 8001992:	68b9      	ldr	r1, [r7, #8]
 8001994:	440b      	add	r3, r1
 8001996:	6812      	ldr	r2, [r2, #0]
 8001998:	601a      	str	r2, [r3, #0]
        for (j = i; j > 0 && pn_x[n_temp] > pn_x[pn_indx[j-1]]; j--)
 800199a:	69bb      	ldr	r3, [r7, #24]
 800199c:	3b01      	subs	r3, #1
 800199e:	61bb      	str	r3, [r7, #24]
 80019a0:	69bb      	ldr	r3, [r7, #24]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	dd12      	ble.n	80019cc <maxim_sort_indices_descend+0x70>
 80019a6:	697b      	ldr	r3, [r7, #20]
 80019a8:	009b      	lsls	r3, r3, #2
 80019aa:	68fa      	ldr	r2, [r7, #12]
 80019ac:	4413      	add	r3, r2
 80019ae:	681a      	ldr	r2, [r3, #0]
 80019b0:	69bb      	ldr	r3, [r7, #24]
 80019b2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80019b6:	3b01      	subs	r3, #1
 80019b8:	009b      	lsls	r3, r3, #2
 80019ba:	68b9      	ldr	r1, [r7, #8]
 80019bc:	440b      	add	r3, r1
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	009b      	lsls	r3, r3, #2
 80019c2:	68f9      	ldr	r1, [r7, #12]
 80019c4:	440b      	add	r3, r1
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	429a      	cmp	r2, r3
 80019ca:	dcd9      	bgt.n	8001980 <maxim_sort_indices_descend+0x24>
        pn_indx[j] = n_temp;
 80019cc:	69bb      	ldr	r3, [r7, #24]
 80019ce:	009b      	lsls	r3, r3, #2
 80019d0:	68ba      	ldr	r2, [r7, #8]
 80019d2:	4413      	add	r3, r2
 80019d4:	697a      	ldr	r2, [r7, #20]
 80019d6:	601a      	str	r2, [r3, #0]
    for (i = 1; i < n_size; i++) {
 80019d8:	69fb      	ldr	r3, [r7, #28]
 80019da:	3301      	adds	r3, #1
 80019dc:	61fb      	str	r3, [r7, #28]
 80019de:	69fa      	ldr	r2, [r7, #28]
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	429a      	cmp	r2, r3
 80019e4:	dbc3      	blt.n	800196e <maxim_sort_indices_descend+0x12>
    }
}
 80019e6:	bf00      	nop
 80019e8:	bf00      	nop
 80019ea:	3724      	adds	r7, #36	; 0x24
 80019ec:	46bd      	mov	sp, r7
 80019ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f2:	4770      	bx	lr

080019f4 <ssd1306_WriteCommand>:

//
//  Send a byte to the command register
//
static uint8_t ssd1306_WriteCommand(I2C_HandleTypeDef *hi2c, uint8_t command)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b086      	sub	sp, #24
 80019f8:	af04      	add	r7, sp, #16
 80019fa:	6078      	str	r0, [r7, #4]
 80019fc:	460b      	mov	r3, r1
 80019fe:	70fb      	strb	r3, [r7, #3]
    return HAL_I2C_Mem_Write(hi2c, SSD1306_I2C_ADDR, 0x00, 1, &command, 1, 10);
 8001a00:	230a      	movs	r3, #10
 8001a02:	9302      	str	r3, [sp, #8]
 8001a04:	2301      	movs	r3, #1
 8001a06:	9301      	str	r3, [sp, #4]
 8001a08:	1cfb      	adds	r3, r7, #3
 8001a0a:	9300      	str	r3, [sp, #0]
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	2200      	movs	r2, #0
 8001a10:	2178      	movs	r1, #120	; 0x78
 8001a12:	6878      	ldr	r0, [r7, #4]
 8001a14:	f001 fa2e 	bl	8002e74 <HAL_I2C_Mem_Write>
 8001a18:	4603      	mov	r3, r0
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	3708      	adds	r7, #8
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}
	...

08001a24 <ssd1306_Init>:

//
//  Initialize the oled screen
//
uint8_t ssd1306_Init(I2C_HandleTypeDef *hi2c)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b084      	sub	sp, #16
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
    // Wait for the screen to boot
    HAL_Delay(100);
 8001a2c:	2064      	movs	r0, #100	; 0x64
 8001a2e:	f000 fe35 	bl	800269c <HAL_Delay>
    int status = 0;
 8001a32:	2300      	movs	r3, #0
 8001a34:	60fb      	str	r3, [r7, #12]

    // Init LCD
    status += ssd1306_WriteCommand(hi2c, 0xAE);   // Display off
 8001a36:	21ae      	movs	r1, #174	; 0xae
 8001a38:	6878      	ldr	r0, [r7, #4]
 8001a3a:	f7ff ffdb 	bl	80019f4 <ssd1306_WriteCommand>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	461a      	mov	r2, r3
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	4413      	add	r3, r2
 8001a46:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x20);   // Set Memory Addressing Mode
 8001a48:	2120      	movs	r1, #32
 8001a4a:	6878      	ldr	r0, [r7, #4]
 8001a4c:	f7ff ffd2 	bl	80019f4 <ssd1306_WriteCommand>
 8001a50:	4603      	mov	r3, r0
 8001a52:	461a      	mov	r2, r3
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	4413      	add	r3, r2
 8001a58:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x10);   // 00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8001a5a:	2110      	movs	r1, #16
 8001a5c:	6878      	ldr	r0, [r7, #4]
 8001a5e:	f7ff ffc9 	bl	80019f4 <ssd1306_WriteCommand>
 8001a62:	4603      	mov	r3, r0
 8001a64:	461a      	mov	r2, r3
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	4413      	add	r3, r2
 8001a6a:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xB0);   // Set Page Start Address for Page Addressing Mode,0-7
 8001a6c:	21b0      	movs	r1, #176	; 0xb0
 8001a6e:	6878      	ldr	r0, [r7, #4]
 8001a70:	f7ff ffc0 	bl	80019f4 <ssd1306_WriteCommand>
 8001a74:	4603      	mov	r3, r0
 8001a76:	461a      	mov	r2, r3
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	4413      	add	r3, r2
 8001a7c:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xC8);   // Set COM Output Scan Direction
 8001a7e:	21c8      	movs	r1, #200	; 0xc8
 8001a80:	6878      	ldr	r0, [r7, #4]
 8001a82:	f7ff ffb7 	bl	80019f4 <ssd1306_WriteCommand>
 8001a86:	4603      	mov	r3, r0
 8001a88:	461a      	mov	r2, r3
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	4413      	add	r3, r2
 8001a8e:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x00);   // Set low column address
 8001a90:	2100      	movs	r1, #0
 8001a92:	6878      	ldr	r0, [r7, #4]
 8001a94:	f7ff ffae 	bl	80019f4 <ssd1306_WriteCommand>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	461a      	mov	r2, r3
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	4413      	add	r3, r2
 8001aa0:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x10);   // Set high column address
 8001aa2:	2110      	movs	r1, #16
 8001aa4:	6878      	ldr	r0, [r7, #4]
 8001aa6:	f7ff ffa5 	bl	80019f4 <ssd1306_WriteCommand>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	461a      	mov	r2, r3
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	4413      	add	r3, r2
 8001ab2:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x40);   // Set start line address
 8001ab4:	2140      	movs	r1, #64	; 0x40
 8001ab6:	6878      	ldr	r0, [r7, #4]
 8001ab8:	f7ff ff9c 	bl	80019f4 <ssd1306_WriteCommand>
 8001abc:	4603      	mov	r3, r0
 8001abe:	461a      	mov	r2, r3
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	4413      	add	r3, r2
 8001ac4:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x81);   // set contrast control register
 8001ac6:	2181      	movs	r1, #129	; 0x81
 8001ac8:	6878      	ldr	r0, [r7, #4]
 8001aca:	f7ff ff93 	bl	80019f4 <ssd1306_WriteCommand>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	461a      	mov	r2, r3
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	4413      	add	r3, r2
 8001ad6:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xFF);
 8001ad8:	21ff      	movs	r1, #255	; 0xff
 8001ada:	6878      	ldr	r0, [r7, #4]
 8001adc:	f7ff ff8a 	bl	80019f4 <ssd1306_WriteCommand>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	461a      	mov	r2, r3
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	4413      	add	r3, r2
 8001ae8:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xA1);   // Set segment re-map 0 to 127
 8001aea:	21a1      	movs	r1, #161	; 0xa1
 8001aec:	6878      	ldr	r0, [r7, #4]
 8001aee:	f7ff ff81 	bl	80019f4 <ssd1306_WriteCommand>
 8001af2:	4603      	mov	r3, r0
 8001af4:	461a      	mov	r2, r3
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	4413      	add	r3, r2
 8001afa:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xA6);   // Set normal display
 8001afc:	21a6      	movs	r1, #166	; 0xa6
 8001afe:	6878      	ldr	r0, [r7, #4]
 8001b00:	f7ff ff78 	bl	80019f4 <ssd1306_WriteCommand>
 8001b04:	4603      	mov	r3, r0
 8001b06:	461a      	mov	r2, r3
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	4413      	add	r3, r2
 8001b0c:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, 0xA8);   // Set multiplex ratio(1 to 64)
 8001b0e:	21a8      	movs	r1, #168	; 0xa8
 8001b10:	6878      	ldr	r0, [r7, #4]
 8001b12:	f7ff ff6f 	bl	80019f4 <ssd1306_WriteCommand>
 8001b16:	4603      	mov	r3, r0
 8001b18:	461a      	mov	r2, r3
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	4413      	add	r3, r2
 8001b1e:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, SSD1306_HEIGHT - 1);
 8001b20:	213f      	movs	r1, #63	; 0x3f
 8001b22:	6878      	ldr	r0, [r7, #4]
 8001b24:	f7ff ff66 	bl	80019f4 <ssd1306_WriteCommand>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	461a      	mov	r2, r3
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	4413      	add	r3, r2
 8001b30:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, 0xA4);   // 0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001b32:	21a4      	movs	r1, #164	; 0xa4
 8001b34:	6878      	ldr	r0, [r7, #4]
 8001b36:	f7ff ff5d 	bl	80019f4 <ssd1306_WriteCommand>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	461a      	mov	r2, r3
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	4413      	add	r3, r2
 8001b42:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xD3);   // Set display offset
 8001b44:	21d3      	movs	r1, #211	; 0xd3
 8001b46:	6878      	ldr	r0, [r7, #4]
 8001b48:	f7ff ff54 	bl	80019f4 <ssd1306_WriteCommand>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	461a      	mov	r2, r3
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	4413      	add	r3, r2
 8001b54:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x00);   // No offset
 8001b56:	2100      	movs	r1, #0
 8001b58:	6878      	ldr	r0, [r7, #4]
 8001b5a:	f7ff ff4b 	bl	80019f4 <ssd1306_WriteCommand>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	461a      	mov	r2, r3
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	4413      	add	r3, r2
 8001b66:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xD5);   // Set display clock divide ratio/oscillator frequency
 8001b68:	21d5      	movs	r1, #213	; 0xd5
 8001b6a:	6878      	ldr	r0, [r7, #4]
 8001b6c:	f7ff ff42 	bl	80019f4 <ssd1306_WriteCommand>
 8001b70:	4603      	mov	r3, r0
 8001b72:	461a      	mov	r2, r3
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	4413      	add	r3, r2
 8001b78:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xF0);   // Set divide ratio
 8001b7a:	21f0      	movs	r1, #240	; 0xf0
 8001b7c:	6878      	ldr	r0, [r7, #4]
 8001b7e:	f7ff ff39 	bl	80019f4 <ssd1306_WriteCommand>
 8001b82:	4603      	mov	r3, r0
 8001b84:	461a      	mov	r2, r3
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	4413      	add	r3, r2
 8001b8a:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xD9);   // Set pre-charge period
 8001b8c:	21d9      	movs	r1, #217	; 0xd9
 8001b8e:	6878      	ldr	r0, [r7, #4]
 8001b90:	f7ff ff30 	bl	80019f4 <ssd1306_WriteCommand>
 8001b94:	4603      	mov	r3, r0
 8001b96:	461a      	mov	r2, r3
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	4413      	add	r3, r2
 8001b9c:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x22);
 8001b9e:	2122      	movs	r1, #34	; 0x22
 8001ba0:	6878      	ldr	r0, [r7, #4]
 8001ba2:	f7ff ff27 	bl	80019f4 <ssd1306_WriteCommand>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	461a      	mov	r2, r3
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	4413      	add	r3, r2
 8001bae:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, 0xDA);   // Set com pins hardware configuration
 8001bb0:	21da      	movs	r1, #218	; 0xda
 8001bb2:	6878      	ldr	r0, [r7, #4]
 8001bb4:	f7ff ff1e 	bl	80019f4 <ssd1306_WriteCommand>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	461a      	mov	r2, r3
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	4413      	add	r3, r2
 8001bc0:	60fb      	str	r3, [r7, #12]
#ifdef SSD1306_COM_LR_REMAP
    status += ssd1306_WriteCommand(hi2c, 0x32);   // Enable COM left/right remap
#else
    status += ssd1306_WriteCommand(hi2c, 0x12);   // Do not use COM left/right remap
 8001bc2:	2112      	movs	r1, #18
 8001bc4:	6878      	ldr	r0, [r7, #4]
 8001bc6:	f7ff ff15 	bl	80019f4 <ssd1306_WriteCommand>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	461a      	mov	r2, r3
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	4413      	add	r3, r2
 8001bd2:	60fb      	str	r3, [r7, #12]
#endif // SSD1306_COM_LR_REMAP

    status += ssd1306_WriteCommand(hi2c, 0xDB);   // Set vcomh
 8001bd4:	21db      	movs	r1, #219	; 0xdb
 8001bd6:	6878      	ldr	r0, [r7, #4]
 8001bd8:	f7ff ff0c 	bl	80019f4 <ssd1306_WriteCommand>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	461a      	mov	r2, r3
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	4413      	add	r3, r2
 8001be4:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x20);   // 0x20,0.77xVcc
 8001be6:	2120      	movs	r1, #32
 8001be8:	6878      	ldr	r0, [r7, #4]
 8001bea:	f7ff ff03 	bl	80019f4 <ssd1306_WriteCommand>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	461a      	mov	r2, r3
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	4413      	add	r3, r2
 8001bf6:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x8D);   // Set DC-DC enable
 8001bf8:	218d      	movs	r1, #141	; 0x8d
 8001bfa:	6878      	ldr	r0, [r7, #4]
 8001bfc:	f7ff fefa 	bl	80019f4 <ssd1306_WriteCommand>
 8001c00:	4603      	mov	r3, r0
 8001c02:	461a      	mov	r2, r3
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	4413      	add	r3, r2
 8001c08:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x14);   //
 8001c0a:	2114      	movs	r1, #20
 8001c0c:	6878      	ldr	r0, [r7, #4]
 8001c0e:	f7ff fef1 	bl	80019f4 <ssd1306_WriteCommand>
 8001c12:	4603      	mov	r3, r0
 8001c14:	461a      	mov	r2, r3
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	4413      	add	r3, r2
 8001c1a:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xAF);   // Turn on SSD1306 panel
 8001c1c:	21af      	movs	r1, #175	; 0xaf
 8001c1e:	6878      	ldr	r0, [r7, #4]
 8001c20:	f7ff fee8 	bl	80019f4 <ssd1306_WriteCommand>
 8001c24:	4603      	mov	r3, r0
 8001c26:	461a      	mov	r2, r3
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	4413      	add	r3, r2
 8001c2c:	60fb      	str	r3, [r7, #12]

    if (status != 0) {
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d001      	beq.n	8001c38 <ssd1306_Init+0x214>
        return 1;
 8001c34:	2301      	movs	r3, #1
 8001c36:	e00f      	b.n	8001c58 <ssd1306_Init+0x234>
    }

    // Clear screen
    ssd1306_Fill(Black);
 8001c38:	2000      	movs	r0, #0
 8001c3a:	f000 f813 	bl	8001c64 <ssd1306_Fill>

    // Flush buffer to screen
    ssd1306_UpdateScreen(hi2c);
 8001c3e:	6878      	ldr	r0, [r7, #4]
 8001c40:	f000 f834 	bl	8001cac <ssd1306_UpdateScreen>

    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8001c44:	4b06      	ldr	r3, [pc, #24]	; (8001c60 <ssd1306_Init+0x23c>)
 8001c46:	2200      	movs	r2, #0
 8001c48:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8001c4a:	4b05      	ldr	r3, [pc, #20]	; (8001c60 <ssd1306_Init+0x23c>)
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	805a      	strh	r2, [r3, #2]

    SSD1306.Initialized = 1;
 8001c50:	4b03      	ldr	r3, [pc, #12]	; (8001c60 <ssd1306_Init+0x23c>)
 8001c52:	2201      	movs	r2, #1
 8001c54:	715a      	strb	r2, [r3, #5]

    return 0;
 8001c56:	2300      	movs	r3, #0
}
 8001c58:	4618      	mov	r0, r3
 8001c5a:	3710      	adds	r7, #16
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}
 8001c60:	20001bf4 	.word	0x20001bf4

08001c64 <ssd1306_Fill>:

//
//  Fill the whole screen with the given color
//
void ssd1306_Fill(SSD1306_COLOR color)
{
 8001c64:	b480      	push	{r7}
 8001c66:	b085      	sub	sp, #20
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	71fb      	strb	r3, [r7, #7]
    // Fill screenbuffer with a constant value (color)
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 8001c6e:	2300      	movs	r3, #0
 8001c70:	60fb      	str	r3, [r7, #12]
 8001c72:	e00d      	b.n	8001c90 <ssd1306_Fill+0x2c>
    {
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8001c74:	79fb      	ldrb	r3, [r7, #7]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d101      	bne.n	8001c7e <ssd1306_Fill+0x1a>
 8001c7a:	2100      	movs	r1, #0
 8001c7c:	e000      	b.n	8001c80 <ssd1306_Fill+0x1c>
 8001c7e:	21ff      	movs	r1, #255	; 0xff
 8001c80:	4a09      	ldr	r2, [pc, #36]	; (8001ca8 <ssd1306_Fill+0x44>)
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	4413      	add	r3, r2
 8001c86:	460a      	mov	r2, r1
 8001c88:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	3301      	adds	r3, #1
 8001c8e:	60fb      	str	r3, [r7, #12]
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c96:	d3ed      	bcc.n	8001c74 <ssd1306_Fill+0x10>
    }
}
 8001c98:	bf00      	nop
 8001c9a:	bf00      	nop
 8001c9c:	3714      	adds	r7, #20
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca4:	4770      	bx	lr
 8001ca6:	bf00      	nop
 8001ca8:	200017f4 	.word	0x200017f4

08001cac <ssd1306_UpdateScreen>:

//
//  Write the screenbuffer with changed to the screen
//
void ssd1306_UpdateScreen(I2C_HandleTypeDef *hi2c)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b088      	sub	sp, #32
 8001cb0:	af04      	add	r7, sp, #16
 8001cb2:	6078      	str	r0, [r7, #4]
    uint8_t i;

    for (i = 0; i < 8; i++) {
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	73fb      	strb	r3, [r7, #15]
 8001cb8:	e020      	b.n	8001cfc <ssd1306_UpdateScreen+0x50>
        ssd1306_WriteCommand(hi2c, 0xB0 + i);
 8001cba:	7bfb      	ldrb	r3, [r7, #15]
 8001cbc:	3b50      	subs	r3, #80	; 0x50
 8001cbe:	b2db      	uxtb	r3, r3
 8001cc0:	4619      	mov	r1, r3
 8001cc2:	6878      	ldr	r0, [r7, #4]
 8001cc4:	f7ff fe96 	bl	80019f4 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(hi2c, 0x00);
 8001cc8:	2100      	movs	r1, #0
 8001cca:	6878      	ldr	r0, [r7, #4]
 8001ccc:	f7ff fe92 	bl	80019f4 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(hi2c, 0x10);
 8001cd0:	2110      	movs	r1, #16
 8001cd2:	6878      	ldr	r0, [r7, #4]
 8001cd4:	f7ff fe8e 	bl	80019f4 <ssd1306_WriteCommand>

        HAL_I2C_Mem_Write(hi2c, SSD1306_I2C_ADDR, 0x40, 1, &SSD1306_Buffer[SSD1306_WIDTH * i], SSD1306_WIDTH, 100);
 8001cd8:	7bfb      	ldrb	r3, [r7, #15]
 8001cda:	01db      	lsls	r3, r3, #7
 8001cdc:	4a0b      	ldr	r2, [pc, #44]	; (8001d0c <ssd1306_UpdateScreen+0x60>)
 8001cde:	4413      	add	r3, r2
 8001ce0:	2264      	movs	r2, #100	; 0x64
 8001ce2:	9202      	str	r2, [sp, #8]
 8001ce4:	2280      	movs	r2, #128	; 0x80
 8001ce6:	9201      	str	r2, [sp, #4]
 8001ce8:	9300      	str	r3, [sp, #0]
 8001cea:	2301      	movs	r3, #1
 8001cec:	2240      	movs	r2, #64	; 0x40
 8001cee:	2178      	movs	r1, #120	; 0x78
 8001cf0:	6878      	ldr	r0, [r7, #4]
 8001cf2:	f001 f8bf 	bl	8002e74 <HAL_I2C_Mem_Write>
    for (i = 0; i < 8; i++) {
 8001cf6:	7bfb      	ldrb	r3, [r7, #15]
 8001cf8:	3301      	adds	r3, #1
 8001cfa:	73fb      	strb	r3, [r7, #15]
 8001cfc:	7bfb      	ldrb	r3, [r7, #15]
 8001cfe:	2b07      	cmp	r3, #7
 8001d00:	d9db      	bls.n	8001cba <ssd1306_UpdateScreen+0xe>
    }
}
 8001d02:	bf00      	nop
 8001d04:	bf00      	nop
 8001d06:	3710      	adds	r7, #16
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bd80      	pop	{r7, pc}
 8001d0c:	200017f4 	.word	0x200017f4

08001d10 <ssd1306_DrawPixel>:
//  X => X Coordinate
//  Y => Y Coordinate
//  color => Pixel color
//
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color)
{
 8001d10:	b480      	push	{r7}
 8001d12:	b083      	sub	sp, #12
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	4603      	mov	r3, r0
 8001d18:	71fb      	strb	r3, [r7, #7]
 8001d1a:	460b      	mov	r3, r1
 8001d1c:	71bb      	strb	r3, [r7, #6]
 8001d1e:	4613      	mov	r3, r2
 8001d20:	717b      	strb	r3, [r7, #5]
    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT)
 8001d22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	db48      	blt.n	8001dbc <ssd1306_DrawPixel+0xac>
 8001d2a:	79bb      	ldrb	r3, [r7, #6]
 8001d2c:	2b3f      	cmp	r3, #63	; 0x3f
 8001d2e:	d845      	bhi.n	8001dbc <ssd1306_DrawPixel+0xac>
        // Don't write outside the buffer
        return;
    }

    // Check if pixel should be inverted
    if (SSD1306.Inverted)
 8001d30:	4b25      	ldr	r3, [pc, #148]	; (8001dc8 <ssd1306_DrawPixel+0xb8>)
 8001d32:	791b      	ldrb	r3, [r3, #4]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d006      	beq.n	8001d46 <ssd1306_DrawPixel+0x36>
    {
        color = (SSD1306_COLOR)!color;
 8001d38:	797b      	ldrb	r3, [r7, #5]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	bf0c      	ite	eq
 8001d3e:	2301      	moveq	r3, #1
 8001d40:	2300      	movne	r3, #0
 8001d42:	b2db      	uxtb	r3, r3
 8001d44:	717b      	strb	r3, [r7, #5]
    }

    // Draw in the correct color
    if (color == White)
 8001d46:	797b      	ldrb	r3, [r7, #5]
 8001d48:	2b01      	cmp	r3, #1
 8001d4a:	d11a      	bne.n	8001d82 <ssd1306_DrawPixel+0x72>
    {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001d4c:	79fa      	ldrb	r2, [r7, #7]
 8001d4e:	79bb      	ldrb	r3, [r7, #6]
 8001d50:	08db      	lsrs	r3, r3, #3
 8001d52:	b2d8      	uxtb	r0, r3
 8001d54:	4603      	mov	r3, r0
 8001d56:	01db      	lsls	r3, r3, #7
 8001d58:	4413      	add	r3, r2
 8001d5a:	4a1c      	ldr	r2, [pc, #112]	; (8001dcc <ssd1306_DrawPixel+0xbc>)
 8001d5c:	5cd3      	ldrb	r3, [r2, r3]
 8001d5e:	b25a      	sxtb	r2, r3
 8001d60:	79bb      	ldrb	r3, [r7, #6]
 8001d62:	f003 0307 	and.w	r3, r3, #7
 8001d66:	2101      	movs	r1, #1
 8001d68:	fa01 f303 	lsl.w	r3, r1, r3
 8001d6c:	b25b      	sxtb	r3, r3
 8001d6e:	4313      	orrs	r3, r2
 8001d70:	b259      	sxtb	r1, r3
 8001d72:	79fa      	ldrb	r2, [r7, #7]
 8001d74:	4603      	mov	r3, r0
 8001d76:	01db      	lsls	r3, r3, #7
 8001d78:	4413      	add	r3, r2
 8001d7a:	b2c9      	uxtb	r1, r1
 8001d7c:	4a13      	ldr	r2, [pc, #76]	; (8001dcc <ssd1306_DrawPixel+0xbc>)
 8001d7e:	54d1      	strb	r1, [r2, r3]
 8001d80:	e01d      	b.n	8001dbe <ssd1306_DrawPixel+0xae>
    }
    else
    {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001d82:	79fa      	ldrb	r2, [r7, #7]
 8001d84:	79bb      	ldrb	r3, [r7, #6]
 8001d86:	08db      	lsrs	r3, r3, #3
 8001d88:	b2d8      	uxtb	r0, r3
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	01db      	lsls	r3, r3, #7
 8001d8e:	4413      	add	r3, r2
 8001d90:	4a0e      	ldr	r2, [pc, #56]	; (8001dcc <ssd1306_DrawPixel+0xbc>)
 8001d92:	5cd3      	ldrb	r3, [r2, r3]
 8001d94:	b25a      	sxtb	r2, r3
 8001d96:	79bb      	ldrb	r3, [r7, #6]
 8001d98:	f003 0307 	and.w	r3, r3, #7
 8001d9c:	2101      	movs	r1, #1
 8001d9e:	fa01 f303 	lsl.w	r3, r1, r3
 8001da2:	b25b      	sxtb	r3, r3
 8001da4:	43db      	mvns	r3, r3
 8001da6:	b25b      	sxtb	r3, r3
 8001da8:	4013      	ands	r3, r2
 8001daa:	b259      	sxtb	r1, r3
 8001dac:	79fa      	ldrb	r2, [r7, #7]
 8001dae:	4603      	mov	r3, r0
 8001db0:	01db      	lsls	r3, r3, #7
 8001db2:	4413      	add	r3, r2
 8001db4:	b2c9      	uxtb	r1, r1
 8001db6:	4a05      	ldr	r2, [pc, #20]	; (8001dcc <ssd1306_DrawPixel+0xbc>)
 8001db8:	54d1      	strb	r1, [r2, r3]
 8001dba:	e000      	b.n	8001dbe <ssd1306_DrawPixel+0xae>
        return;
 8001dbc:	bf00      	nop
    }
}
 8001dbe:	370c      	adds	r7, #12
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc6:	4770      	bx	lr
 8001dc8:	20001bf4 	.word	0x20001bf4
 8001dcc:	200017f4 	.word	0x200017f4

08001dd0 <ssd1306_WriteChar>:
//  ch      => Character to write
//  Font    => Font to use
//  color   => Black or White
//
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color)
{
 8001dd0:	b590      	push	{r4, r7, lr}
 8001dd2:	b089      	sub	sp, #36	; 0x24
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	4604      	mov	r4, r0
 8001dd8:	1d38      	adds	r0, r7, #4
 8001dda:	e880 0006 	stmia.w	r0, {r1, r2}
 8001dde:	461a      	mov	r2, r3
 8001de0:	4623      	mov	r3, r4
 8001de2:	73fb      	strb	r3, [r7, #15]
 8001de4:	4613      	mov	r3, r2
 8001de6:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;

    // Check remaining space on current line
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 8001de8:	4b38      	ldr	r3, [pc, #224]	; (8001ecc <ssd1306_WriteChar+0xfc>)
 8001dea:	881b      	ldrh	r3, [r3, #0]
 8001dec:	461a      	mov	r2, r3
 8001dee:	793b      	ldrb	r3, [r7, #4]
 8001df0:	4413      	add	r3, r2
 8001df2:	2b7f      	cmp	r3, #127	; 0x7f
 8001df4:	dc06      	bgt.n	8001e04 <ssd1306_WriteChar+0x34>
        SSD1306_HEIGHT <= (SSD1306.CurrentY + Font.FontHeight))
 8001df6:	4b35      	ldr	r3, [pc, #212]	; (8001ecc <ssd1306_WriteChar+0xfc>)
 8001df8:	885b      	ldrh	r3, [r3, #2]
 8001dfa:	461a      	mov	r2, r3
 8001dfc:	797b      	ldrb	r3, [r7, #5]
 8001dfe:	4413      	add	r3, r2
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 8001e00:	2b3f      	cmp	r3, #63	; 0x3f
 8001e02:	dd01      	ble.n	8001e08 <ssd1306_WriteChar+0x38>
    {
        // Not enough space on current line
        return 0;
 8001e04:	2300      	movs	r3, #0
 8001e06:	e05d      	b.n	8001ec4 <ssd1306_WriteChar+0xf4>
    }

    // Translate font to screenbuffer
    for (i = 0; i < Font.FontHeight; i++)
 8001e08:	2300      	movs	r3, #0
 8001e0a:	61fb      	str	r3, [r7, #28]
 8001e0c:	e04c      	b.n	8001ea8 <ssd1306_WriteChar+0xd8>
    {
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8001e0e:	68ba      	ldr	r2, [r7, #8]
 8001e10:	7bfb      	ldrb	r3, [r7, #15]
 8001e12:	3b20      	subs	r3, #32
 8001e14:	7979      	ldrb	r1, [r7, #5]
 8001e16:	fb01 f303 	mul.w	r3, r1, r3
 8001e1a:	4619      	mov	r1, r3
 8001e1c:	69fb      	ldr	r3, [r7, #28]
 8001e1e:	440b      	add	r3, r1
 8001e20:	005b      	lsls	r3, r3, #1
 8001e22:	4413      	add	r3, r2
 8001e24:	881b      	ldrh	r3, [r3, #0]
 8001e26:	617b      	str	r3, [r7, #20]
        for (j = 0; j < Font.FontWidth; j++)
 8001e28:	2300      	movs	r3, #0
 8001e2a:	61bb      	str	r3, [r7, #24]
 8001e2c:	e034      	b.n	8001e98 <ssd1306_WriteChar+0xc8>
        {
            if ((b << j) & 0x8000)
 8001e2e:	697a      	ldr	r2, [r7, #20]
 8001e30:	69bb      	ldr	r3, [r7, #24]
 8001e32:	fa02 f303 	lsl.w	r3, r2, r3
 8001e36:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d012      	beq.n	8001e64 <ssd1306_WriteChar+0x94>
            {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8001e3e:	4b23      	ldr	r3, [pc, #140]	; (8001ecc <ssd1306_WriteChar+0xfc>)
 8001e40:	881b      	ldrh	r3, [r3, #0]
 8001e42:	b2da      	uxtb	r2, r3
 8001e44:	69bb      	ldr	r3, [r7, #24]
 8001e46:	b2db      	uxtb	r3, r3
 8001e48:	4413      	add	r3, r2
 8001e4a:	b2d8      	uxtb	r0, r3
 8001e4c:	4b1f      	ldr	r3, [pc, #124]	; (8001ecc <ssd1306_WriteChar+0xfc>)
 8001e4e:	885b      	ldrh	r3, [r3, #2]
 8001e50:	b2da      	uxtb	r2, r3
 8001e52:	69fb      	ldr	r3, [r7, #28]
 8001e54:	b2db      	uxtb	r3, r3
 8001e56:	4413      	add	r3, r2
 8001e58:	b2db      	uxtb	r3, r3
 8001e5a:	7bba      	ldrb	r2, [r7, #14]
 8001e5c:	4619      	mov	r1, r3
 8001e5e:	f7ff ff57 	bl	8001d10 <ssd1306_DrawPixel>
 8001e62:	e016      	b.n	8001e92 <ssd1306_WriteChar+0xc2>
            }
            else
            {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8001e64:	4b19      	ldr	r3, [pc, #100]	; (8001ecc <ssd1306_WriteChar+0xfc>)
 8001e66:	881b      	ldrh	r3, [r3, #0]
 8001e68:	b2da      	uxtb	r2, r3
 8001e6a:	69bb      	ldr	r3, [r7, #24]
 8001e6c:	b2db      	uxtb	r3, r3
 8001e6e:	4413      	add	r3, r2
 8001e70:	b2d8      	uxtb	r0, r3
 8001e72:	4b16      	ldr	r3, [pc, #88]	; (8001ecc <ssd1306_WriteChar+0xfc>)
 8001e74:	885b      	ldrh	r3, [r3, #2]
 8001e76:	b2da      	uxtb	r2, r3
 8001e78:	69fb      	ldr	r3, [r7, #28]
 8001e7a:	b2db      	uxtb	r3, r3
 8001e7c:	4413      	add	r3, r2
 8001e7e:	b2d9      	uxtb	r1, r3
 8001e80:	7bbb      	ldrb	r3, [r7, #14]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	bf0c      	ite	eq
 8001e86:	2301      	moveq	r3, #1
 8001e88:	2300      	movne	r3, #0
 8001e8a:	b2db      	uxtb	r3, r3
 8001e8c:	461a      	mov	r2, r3
 8001e8e:	f7ff ff3f 	bl	8001d10 <ssd1306_DrawPixel>
        for (j = 0; j < Font.FontWidth; j++)
 8001e92:	69bb      	ldr	r3, [r7, #24]
 8001e94:	3301      	adds	r3, #1
 8001e96:	61bb      	str	r3, [r7, #24]
 8001e98:	793b      	ldrb	r3, [r7, #4]
 8001e9a:	461a      	mov	r2, r3
 8001e9c:	69bb      	ldr	r3, [r7, #24]
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d3c5      	bcc.n	8001e2e <ssd1306_WriteChar+0x5e>
    for (i = 0; i < Font.FontHeight; i++)
 8001ea2:	69fb      	ldr	r3, [r7, #28]
 8001ea4:	3301      	adds	r3, #1
 8001ea6:	61fb      	str	r3, [r7, #28]
 8001ea8:	797b      	ldrb	r3, [r7, #5]
 8001eaa:	461a      	mov	r2, r3
 8001eac:	69fb      	ldr	r3, [r7, #28]
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d3ad      	bcc.n	8001e0e <ssd1306_WriteChar+0x3e>
            }
        }
    }

    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8001eb2:	4b06      	ldr	r3, [pc, #24]	; (8001ecc <ssd1306_WriteChar+0xfc>)
 8001eb4:	881a      	ldrh	r2, [r3, #0]
 8001eb6:	793b      	ldrb	r3, [r7, #4]
 8001eb8:	b29b      	uxth	r3, r3
 8001eba:	4413      	add	r3, r2
 8001ebc:	b29a      	uxth	r2, r3
 8001ebe:	4b03      	ldr	r3, [pc, #12]	; (8001ecc <ssd1306_WriteChar+0xfc>)
 8001ec0:	801a      	strh	r2, [r3, #0]

    // Return written char for validation
    return ch;
 8001ec2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	3724      	adds	r7, #36	; 0x24
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd90      	pop	{r4, r7, pc}
 8001ecc:	20001bf4 	.word	0x20001bf4

08001ed0 <ssd1306_WriteString>:

//
//  Write full string to screenbuffer
//
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b084      	sub	sp, #16
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	60f8      	str	r0, [r7, #12]
 8001ed8:	1d38      	adds	r0, r7, #4
 8001eda:	e880 0006 	stmia.w	r0, {r1, r2}
 8001ede:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str)
 8001ee0:	e012      	b.n	8001f08 <ssd1306_WriteString+0x38>
    {
        if (ssd1306_WriteChar(*str, Font, color) != *str)
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	7818      	ldrb	r0, [r3, #0]
 8001ee6:	78fb      	ldrb	r3, [r7, #3]
 8001ee8:	1d3a      	adds	r2, r7, #4
 8001eea:	ca06      	ldmia	r2, {r1, r2}
 8001eec:	f7ff ff70 	bl	8001dd0 <ssd1306_WriteChar>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	461a      	mov	r2, r3
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	781b      	ldrb	r3, [r3, #0]
 8001ef8:	429a      	cmp	r2, r3
 8001efa:	d002      	beq.n	8001f02 <ssd1306_WriteString+0x32>
        {
            // Char could not be written
            return *str;
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	781b      	ldrb	r3, [r3, #0]
 8001f00:	e008      	b.n	8001f14 <ssd1306_WriteString+0x44>
        }

        // Next char
        str++;
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	3301      	adds	r3, #1
 8001f06:	60fb      	str	r3, [r7, #12]
    while (*str)
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	781b      	ldrb	r3, [r3, #0]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d1e8      	bne.n	8001ee2 <ssd1306_WriteString+0x12>
    }

    // Everything ok
    return *str;
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	781b      	ldrb	r3, [r3, #0]
}
 8001f14:	4618      	mov	r0, r3
 8001f16:	3710      	adds	r7, #16
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bd80      	pop	{r7, pc}

08001f1c <ssd1306_SetCursor>:

//
//  Set cursor position
//
void ssd1306_SetCursor(uint8_t x, uint8_t y)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	b083      	sub	sp, #12
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	4603      	mov	r3, r0
 8001f24:	460a      	mov	r2, r1
 8001f26:	71fb      	strb	r3, [r7, #7]
 8001f28:	4613      	mov	r3, r2
 8001f2a:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8001f2c:	79fb      	ldrb	r3, [r7, #7]
 8001f2e:	b29a      	uxth	r2, r3
 8001f30:	4b05      	ldr	r3, [pc, #20]	; (8001f48 <ssd1306_SetCursor+0x2c>)
 8001f32:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8001f34:	79bb      	ldrb	r3, [r7, #6]
 8001f36:	b29a      	uxth	r2, r3
 8001f38:	4b03      	ldr	r3, [pc, #12]	; (8001f48 <ssd1306_SetCursor+0x2c>)
 8001f3a:	805a      	strh	r2, [r3, #2]
}
 8001f3c:	bf00      	nop
 8001f3e:	370c      	adds	r7, #12
 8001f40:	46bd      	mov	sp, r7
 8001f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f46:	4770      	bx	lr
 8001f48:	20001bf4 	.word	0x20001bf4

08001f4c <UART2_SendString>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void UART2_SendString(char* s) {
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b082      	sub	sp, #8
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*) s, strlen(s), 1000);
 8001f54:	6878      	ldr	r0, [r7, #4]
 8001f56:	f7fe f943 	bl	80001e0 <strlen>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	b29a      	uxth	r2, r3
 8001f5e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f62:	6879      	ldr	r1, [r7, #4]
 8001f64:	4803      	ldr	r0, [pc, #12]	; (8001f74 <UART2_SendString+0x28>)
 8001f66:	f002 fa96 	bl	8004496 <HAL_UART_Transmit>
}
 8001f6a:	bf00      	nop
 8001f6c:	3708      	adds	r7, #8
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}
 8001f72:	bf00      	nop
 8001f74:	20002f88 	.word	0x20002f88

08001f78 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001f78:	b590      	push	{r4, r7, lr}
 8001f7a:	b083      	sub	sp, #12
 8001f7c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001f7e:	f000 fb1b 	bl	80025b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001f82:	f000 f86d 	bl	8002060 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001f86:	f000 f92b 	bl	80021e0 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001f8a:	f000 f8d1 	bl	8002130 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8001f8e:	f000 f8fd 	bl	800218c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  UART2_SendString("START\n\r");
 8001f92:	482a      	ldr	r0, [pc, #168]	; (800203c <main+0xc4>)
 8001f94:	f7ff ffda 	bl	8001f4c <UART2_SendString>

  Max30102_Init(&hi2c1);
 8001f98:	4829      	ldr	r0, [pc, #164]	; (8002040 <main+0xc8>)
 8001f9a:	f7fe fe2f 	bl	8000bfc <Max30102_Init>
  ssd1306_Init(&hi2c1);
 8001f9e:	4828      	ldr	r0, [pc, #160]	; (8002040 <main+0xc8>)
 8001fa0:	f7ff fd40 	bl	8001a24 <ssd1306_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
	Max30102_Task();
 8001fa4:	f7fe fd74 	bl	8000a90 <Max30102_Task>
	sprintf(UartBufferTask, "%c[2J%c[H", 27, 27);
 8001fa8:	231b      	movs	r3, #27
 8001faa:	221b      	movs	r2, #27
 8001fac:	4925      	ldr	r1, [pc, #148]	; (8002044 <main+0xcc>)
 8001fae:	4826      	ldr	r0, [pc, #152]	; (8002048 <main+0xd0>)
 8001fb0:	f002 fd6c 	bl	8004a8c <siprintf>
	UART2_SendString(UartBufferTask);
 8001fb4:	4824      	ldr	r0, [pc, #144]	; (8002048 <main+0xd0>)
 8001fb6:	f7ff ffc9 	bl	8001f4c <UART2_SendString>

	sprintf(UartBufferValue, "%d _ %d", Max30102_GetHeartRate(), Max30102_GetSpO2Value());
 8001fba:	f7fe fd51 	bl	8000a60 <Max30102_GetHeartRate>
 8001fbe:	4604      	mov	r4, r0
 8001fc0:	f7fe fd5a 	bl	8000a78 <Max30102_GetSpO2Value>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	4622      	mov	r2, r4
 8001fc8:	4920      	ldr	r1, [pc, #128]	; (800204c <main+0xd4>)
 8001fca:	4821      	ldr	r0, [pc, #132]	; (8002050 <main+0xd8>)
 8001fcc:	f002 fd5e 	bl	8004a8c <siprintf>
	UART2_SendString(UartBufferValue);
 8001fd0:	481f      	ldr	r0, [pc, #124]	; (8002050 <main+0xd8>)
 8001fd2:	f7ff ffbb 	bl	8001f4c <UART2_SendString>

	// Write data to local screenbuffer
	ssd1306_SetCursor(0, 5);
 8001fd6:	2105      	movs	r1, #5
 8001fd8:	2000      	movs	r0, #0
 8001fda:	f7ff ff9f 	bl	8001f1c <ssd1306_SetCursor>
	ssd1306_WriteString(UartBufferTask, Font_11x18, White);
 8001fde:	4a1d      	ldr	r2, [pc, #116]	; (8002054 <main+0xdc>)
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	ca06      	ldmia	r2, {r1, r2}
 8001fe4:	4818      	ldr	r0, [pc, #96]	; (8002048 <main+0xd0>)
 8001fe6:	f7ff ff73 	bl	8001ed0 <ssd1306_WriteString>

	ssd1306_SetCursor(0, 36);
 8001fea:	2124      	movs	r1, #36	; 0x24
 8001fec:	2000      	movs	r0, #0
 8001fee:	f7ff ff95 	bl	8001f1c <ssd1306_SetCursor>
	ssd1306_WriteString(UartBufferValue, Font_11x18, White);
 8001ff2:	4a18      	ldr	r2, [pc, #96]	; (8002054 <main+0xdc>)
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	ca06      	ldmia	r2, {r1, r2}
 8001ff8:	4815      	ldr	r0, [pc, #84]	; (8002050 <main+0xd8>)
 8001ffa:	f7ff ff69 	bl	8001ed0 <ssd1306_WriteString>

	for (int i = 0; i < 100; ++i) {
 8001ffe:	2300      	movs	r3, #0
 8002000:	607b      	str	r3, [r7, #4]
 8002002:	e014      	b.n	800202e <main+0xb6>
		ssd1306_SetCursor(90, 0);
 8002004:	2100      	movs	r1, #0
 8002006:	205a      	movs	r0, #90	; 0x5a
 8002008:	f7ff ff88 	bl	8001f1c <ssd1306_SetCursor>
		sprintf(i_string, "%d", i);
 800200c:	687a      	ldr	r2, [r7, #4]
 800200e:	4912      	ldr	r1, [pc, #72]	; (8002058 <main+0xe0>)
 8002010:	4812      	ldr	r0, [pc, #72]	; (800205c <main+0xe4>)
 8002012:	f002 fd3b 	bl	8004a8c <siprintf>
		ssd1306_WriteString(i_string, Font_11x18, White);
 8002016:	4a0f      	ldr	r2, [pc, #60]	; (8002054 <main+0xdc>)
 8002018:	2301      	movs	r3, #1
 800201a:	ca06      	ldmia	r2, {r1, r2}
 800201c:	480f      	ldr	r0, [pc, #60]	; (800205c <main+0xe4>)
 800201e:	f7ff ff57 	bl	8001ed0 <ssd1306_WriteString>
		ssd1306_UpdateScreen(&hi2c1);
 8002022:	4807      	ldr	r0, [pc, #28]	; (8002040 <main+0xc8>)
 8002024:	f7ff fe42 	bl	8001cac <ssd1306_UpdateScreen>
	for (int i = 0; i < 100; ++i) {
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	3301      	adds	r3, #1
 800202c:	607b      	str	r3, [r7, #4]
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2b63      	cmp	r3, #99	; 0x63
 8002032:	dde7      	ble.n	8002004 <main+0x8c>
	}

	// Copy all data from local screenbuffer to the screen
	ssd1306_UpdateScreen(&hi2c1);
 8002034:	4802      	ldr	r0, [pc, #8]	; (8002040 <main+0xc8>)
 8002036:	f7ff fe39 	bl	8001cac <ssd1306_UpdateScreen>
	Max30102_Task();
 800203a:	e7b3      	b.n	8001fa4 <main+0x2c>
 800203c:	08005300 	.word	0x08005300
 8002040:	20002f0c 	.word	0x20002f0c
 8002044:	08005308 	.word	0x08005308
 8002048:	20002f60 	.word	0x20002f60
 800204c:	08005314 	.word	0x08005314
 8002050:	20002eec 	.word	0x20002eec
 8002054:	20000000 	.word	0x20000000
 8002058:	0800531c 	.word	0x0800531c
 800205c:	20002f80 	.word	0x20002f80

08002060 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b094      	sub	sp, #80	; 0x50
 8002064:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002066:	f107 0320 	add.w	r3, r7, #32
 800206a:	2230      	movs	r2, #48	; 0x30
 800206c:	2100      	movs	r1, #0
 800206e:	4618      	mov	r0, r3
 8002070:	f002 fd04 	bl	8004a7c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002074:	f107 030c 	add.w	r3, r7, #12
 8002078:	2200      	movs	r2, #0
 800207a:	601a      	str	r2, [r3, #0]
 800207c:	605a      	str	r2, [r3, #4]
 800207e:	609a      	str	r2, [r3, #8]
 8002080:	60da      	str	r2, [r3, #12]
 8002082:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002084:	2300      	movs	r3, #0
 8002086:	60bb      	str	r3, [r7, #8]
 8002088:	4b27      	ldr	r3, [pc, #156]	; (8002128 <SystemClock_Config+0xc8>)
 800208a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800208c:	4a26      	ldr	r2, [pc, #152]	; (8002128 <SystemClock_Config+0xc8>)
 800208e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002092:	6413      	str	r3, [r2, #64]	; 0x40
 8002094:	4b24      	ldr	r3, [pc, #144]	; (8002128 <SystemClock_Config+0xc8>)
 8002096:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002098:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800209c:	60bb      	str	r3, [r7, #8]
 800209e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80020a0:	2300      	movs	r3, #0
 80020a2:	607b      	str	r3, [r7, #4]
 80020a4:	4b21      	ldr	r3, [pc, #132]	; (800212c <SystemClock_Config+0xcc>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4a20      	ldr	r2, [pc, #128]	; (800212c <SystemClock_Config+0xcc>)
 80020aa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80020ae:	6013      	str	r3, [r2, #0]
 80020b0:	4b1e      	ldr	r3, [pc, #120]	; (800212c <SystemClock_Config+0xcc>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80020b8:	607b      	str	r3, [r7, #4]
 80020ba:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80020bc:	2301      	movs	r3, #1
 80020be:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80020c0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80020c4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80020c6:	2302      	movs	r3, #2
 80020c8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80020ca:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80020ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 80020d0:	230c      	movs	r3, #12
 80020d2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 80020d4:	2360      	movs	r3, #96	; 0x60
 80020d6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80020d8:	2302      	movs	r3, #2
 80020da:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80020dc:	2304      	movs	r3, #4
 80020de:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80020e0:	f107 0320 	add.w	r3, r7, #32
 80020e4:	4618      	mov	r0, r3
 80020e6:	f001 fd41 	bl	8003b6c <HAL_RCC_OscConfig>
 80020ea:	4603      	mov	r3, r0
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d001      	beq.n	80020f4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80020f0:	f000 f908 	bl	8002304 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80020f4:	230f      	movs	r3, #15
 80020f6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80020f8:	2302      	movs	r3, #2
 80020fa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80020fc:	2300      	movs	r3, #0
 80020fe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002100:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002104:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002106:	2300      	movs	r3, #0
 8002108:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800210a:	f107 030c 	add.w	r3, r7, #12
 800210e:	2103      	movs	r1, #3
 8002110:	4618      	mov	r0, r3
 8002112:	f001 ffa3 	bl	800405c <HAL_RCC_ClockConfig>
 8002116:	4603      	mov	r3, r0
 8002118:	2b00      	cmp	r3, #0
 800211a:	d001      	beq.n	8002120 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800211c:	f000 f8f2 	bl	8002304 <Error_Handler>
  }
}
 8002120:	bf00      	nop
 8002122:	3750      	adds	r7, #80	; 0x50
 8002124:	46bd      	mov	sp, r7
 8002126:	bd80      	pop	{r7, pc}
 8002128:	40023800 	.word	0x40023800
 800212c:	40007000 	.word	0x40007000

08002130 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002134:	4b12      	ldr	r3, [pc, #72]	; (8002180 <MX_I2C1_Init+0x50>)
 8002136:	4a13      	ldr	r2, [pc, #76]	; (8002184 <MX_I2C1_Init+0x54>)
 8002138:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800213a:	4b11      	ldr	r3, [pc, #68]	; (8002180 <MX_I2C1_Init+0x50>)
 800213c:	4a12      	ldr	r2, [pc, #72]	; (8002188 <MX_I2C1_Init+0x58>)
 800213e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002140:	4b0f      	ldr	r3, [pc, #60]	; (8002180 <MX_I2C1_Init+0x50>)
 8002142:	2200      	movs	r2, #0
 8002144:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002146:	4b0e      	ldr	r3, [pc, #56]	; (8002180 <MX_I2C1_Init+0x50>)
 8002148:	2200      	movs	r2, #0
 800214a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800214c:	4b0c      	ldr	r3, [pc, #48]	; (8002180 <MX_I2C1_Init+0x50>)
 800214e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002152:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002154:	4b0a      	ldr	r3, [pc, #40]	; (8002180 <MX_I2C1_Init+0x50>)
 8002156:	2200      	movs	r2, #0
 8002158:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800215a:	4b09      	ldr	r3, [pc, #36]	; (8002180 <MX_I2C1_Init+0x50>)
 800215c:	2200      	movs	r2, #0
 800215e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002160:	4b07      	ldr	r3, [pc, #28]	; (8002180 <MX_I2C1_Init+0x50>)
 8002162:	2200      	movs	r2, #0
 8002164:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002166:	4b06      	ldr	r3, [pc, #24]	; (8002180 <MX_I2C1_Init+0x50>)
 8002168:	2200      	movs	r2, #0
 800216a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800216c:	4804      	ldr	r0, [pc, #16]	; (8002180 <MX_I2C1_Init+0x50>)
 800216e:	f000 fd3d 	bl	8002bec <HAL_I2C_Init>
 8002172:	4603      	mov	r3, r0
 8002174:	2b00      	cmp	r3, #0
 8002176:	d001      	beq.n	800217c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002178:	f000 f8c4 	bl	8002304 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800217c:	bf00      	nop
 800217e:	bd80      	pop	{r7, pc}
 8002180:	20002f0c 	.word	0x20002f0c
 8002184:	40005400 	.word	0x40005400
 8002188:	00061a80 	.word	0x00061a80

0800218c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002190:	4b11      	ldr	r3, [pc, #68]	; (80021d8 <MX_USART2_UART_Init+0x4c>)
 8002192:	4a12      	ldr	r2, [pc, #72]	; (80021dc <MX_USART2_UART_Init+0x50>)
 8002194:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002196:	4b10      	ldr	r3, [pc, #64]	; (80021d8 <MX_USART2_UART_Init+0x4c>)
 8002198:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800219c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800219e:	4b0e      	ldr	r3, [pc, #56]	; (80021d8 <MX_USART2_UART_Init+0x4c>)
 80021a0:	2200      	movs	r2, #0
 80021a2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80021a4:	4b0c      	ldr	r3, [pc, #48]	; (80021d8 <MX_USART2_UART_Init+0x4c>)
 80021a6:	2200      	movs	r2, #0
 80021a8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80021aa:	4b0b      	ldr	r3, [pc, #44]	; (80021d8 <MX_USART2_UART_Init+0x4c>)
 80021ac:	2200      	movs	r2, #0
 80021ae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80021b0:	4b09      	ldr	r3, [pc, #36]	; (80021d8 <MX_USART2_UART_Init+0x4c>)
 80021b2:	220c      	movs	r2, #12
 80021b4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80021b6:	4b08      	ldr	r3, [pc, #32]	; (80021d8 <MX_USART2_UART_Init+0x4c>)
 80021b8:	2200      	movs	r2, #0
 80021ba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80021bc:	4b06      	ldr	r3, [pc, #24]	; (80021d8 <MX_USART2_UART_Init+0x4c>)
 80021be:	2200      	movs	r2, #0
 80021c0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80021c2:	4805      	ldr	r0, [pc, #20]	; (80021d8 <MX_USART2_UART_Init+0x4c>)
 80021c4:	f002 f91a 	bl	80043fc <HAL_UART_Init>
 80021c8:	4603      	mov	r3, r0
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d001      	beq.n	80021d2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80021ce:	f000 f899 	bl	8002304 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80021d2:	bf00      	nop
 80021d4:	bd80      	pop	{r7, pc}
 80021d6:	bf00      	nop
 80021d8:	20002f88 	.word	0x20002f88
 80021dc:	40004400 	.word	0x40004400

080021e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b08a      	sub	sp, #40	; 0x28
 80021e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021e6:	f107 0314 	add.w	r3, r7, #20
 80021ea:	2200      	movs	r2, #0
 80021ec:	601a      	str	r2, [r3, #0]
 80021ee:	605a      	str	r2, [r3, #4]
 80021f0:	609a      	str	r2, [r3, #8]
 80021f2:	60da      	str	r2, [r3, #12]
 80021f4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80021f6:	2300      	movs	r3, #0
 80021f8:	613b      	str	r3, [r7, #16]
 80021fa:	4b3f      	ldr	r3, [pc, #252]	; (80022f8 <MX_GPIO_Init+0x118>)
 80021fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021fe:	4a3e      	ldr	r2, [pc, #248]	; (80022f8 <MX_GPIO_Init+0x118>)
 8002200:	f043 0304 	orr.w	r3, r3, #4
 8002204:	6313      	str	r3, [r2, #48]	; 0x30
 8002206:	4b3c      	ldr	r3, [pc, #240]	; (80022f8 <MX_GPIO_Init+0x118>)
 8002208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800220a:	f003 0304 	and.w	r3, r3, #4
 800220e:	613b      	str	r3, [r7, #16]
 8002210:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002212:	2300      	movs	r3, #0
 8002214:	60fb      	str	r3, [r7, #12]
 8002216:	4b38      	ldr	r3, [pc, #224]	; (80022f8 <MX_GPIO_Init+0x118>)
 8002218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800221a:	4a37      	ldr	r2, [pc, #220]	; (80022f8 <MX_GPIO_Init+0x118>)
 800221c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002220:	6313      	str	r3, [r2, #48]	; 0x30
 8002222:	4b35      	ldr	r3, [pc, #212]	; (80022f8 <MX_GPIO_Init+0x118>)
 8002224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002226:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800222a:	60fb      	str	r3, [r7, #12]
 800222c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800222e:	2300      	movs	r3, #0
 8002230:	60bb      	str	r3, [r7, #8]
 8002232:	4b31      	ldr	r3, [pc, #196]	; (80022f8 <MX_GPIO_Init+0x118>)
 8002234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002236:	4a30      	ldr	r2, [pc, #192]	; (80022f8 <MX_GPIO_Init+0x118>)
 8002238:	f043 0301 	orr.w	r3, r3, #1
 800223c:	6313      	str	r3, [r2, #48]	; 0x30
 800223e:	4b2e      	ldr	r3, [pc, #184]	; (80022f8 <MX_GPIO_Init+0x118>)
 8002240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002242:	f003 0301 	and.w	r3, r3, #1
 8002246:	60bb      	str	r3, [r7, #8]
 8002248:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800224a:	2300      	movs	r3, #0
 800224c:	607b      	str	r3, [r7, #4]
 800224e:	4b2a      	ldr	r3, [pc, #168]	; (80022f8 <MX_GPIO_Init+0x118>)
 8002250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002252:	4a29      	ldr	r2, [pc, #164]	; (80022f8 <MX_GPIO_Init+0x118>)
 8002254:	f043 0302 	orr.w	r3, r3, #2
 8002258:	6313      	str	r3, [r2, #48]	; 0x30
 800225a:	4b27      	ldr	r3, [pc, #156]	; (80022f8 <MX_GPIO_Init+0x118>)
 800225c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800225e:	f003 0302 	and.w	r3, r3, #2
 8002262:	607b      	str	r3, [r7, #4]
 8002264:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, GPIO_PIN_SET);
 8002266:	2201      	movs	r2, #1
 8002268:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800226c:	4823      	ldr	r0, [pc, #140]	; (80022fc <MX_GPIO_Init+0x11c>)
 800226e:	f000 fca3 	bl	8002bb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TEST_GPIO_Port, TEST_Pin, GPIO_PIN_RESET);
 8002272:	2200      	movs	r2, #0
 8002274:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002278:	4821      	ldr	r0, [pc, #132]	; (8002300 <MX_GPIO_Init+0x120>)
 800227a:	f000 fc9d 	bl	8002bb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BLUE_LED_Pin */
  GPIO_InitStruct.Pin = BLUE_LED_Pin;
 800227e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002282:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002284:	2301      	movs	r3, #1
 8002286:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002288:	2300      	movs	r3, #0
 800228a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800228c:	2300      	movs	r3, #0
 800228e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BLUE_LED_GPIO_Port, &GPIO_InitStruct);
 8002290:	f107 0314 	add.w	r3, r7, #20
 8002294:	4619      	mov	r1, r3
 8002296:	4819      	ldr	r0, [pc, #100]	; (80022fc <MX_GPIO_Init+0x11c>)
 8002298:	f000 fb0a 	bl	80028b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_KEY_Pin */
  GPIO_InitStruct.Pin = USER_KEY_Pin;
 800229c:	2301      	movs	r3, #1
 800229e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022a0:	2300      	movs	r3, #0
 80022a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80022a4:	2301      	movs	r3, #1
 80022a6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USER_KEY_GPIO_Port, &GPIO_InitStruct);
 80022a8:	f107 0314 	add.w	r3, r7, #20
 80022ac:	4619      	mov	r1, r3
 80022ae:	4814      	ldr	r0, [pc, #80]	; (8002300 <MX_GPIO_Init+0x120>)
 80022b0:	f000 fafe 	bl	80028b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : INT_Pin */
  GPIO_InitStruct.Pin = INT_Pin;
 80022b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80022b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80022ba:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80022be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022c0:	2300      	movs	r3, #0
 80022c2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(INT_GPIO_Port, &GPIO_InitStruct);
 80022c4:	f107 0314 	add.w	r3, r7, #20
 80022c8:	4619      	mov	r1, r3
 80022ca:	480d      	ldr	r0, [pc, #52]	; (8002300 <MX_GPIO_Init+0x120>)
 80022cc:	f000 faf0 	bl	80028b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : TEST_Pin */
  GPIO_InitStruct.Pin = TEST_Pin;
 80022d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80022d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022d6:	2301      	movs	r3, #1
 80022d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022da:	2300      	movs	r3, #0
 80022dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022de:	2300      	movs	r3, #0
 80022e0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TEST_GPIO_Port, &GPIO_InitStruct);
 80022e2:	f107 0314 	add.w	r3, r7, #20
 80022e6:	4619      	mov	r1, r3
 80022e8:	4805      	ldr	r0, [pc, #20]	; (8002300 <MX_GPIO_Init+0x120>)
 80022ea:	f000 fae1 	bl	80028b0 <HAL_GPIO_Init>

}
 80022ee:	bf00      	nop
 80022f0:	3728      	adds	r7, #40	; 0x28
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}
 80022f6:	bf00      	nop
 80022f8:	40023800 	.word	0x40023800
 80022fc:	40020800 	.word	0x40020800
 8002300:	40020000 	.word	0x40020000

08002304 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002304:	b480      	push	{r7}
 8002306:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002308:	b672      	cpsid	i
}
 800230a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800230c:	e7fe      	b.n	800230c <Error_Handler+0x8>
	...

08002310 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002310:	b480      	push	{r7}
 8002312:	b083      	sub	sp, #12
 8002314:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002316:	2300      	movs	r3, #0
 8002318:	607b      	str	r3, [r7, #4]
 800231a:	4b10      	ldr	r3, [pc, #64]	; (800235c <HAL_MspInit+0x4c>)
 800231c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800231e:	4a0f      	ldr	r2, [pc, #60]	; (800235c <HAL_MspInit+0x4c>)
 8002320:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002324:	6453      	str	r3, [r2, #68]	; 0x44
 8002326:	4b0d      	ldr	r3, [pc, #52]	; (800235c <HAL_MspInit+0x4c>)
 8002328:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800232a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800232e:	607b      	str	r3, [r7, #4]
 8002330:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002332:	2300      	movs	r3, #0
 8002334:	603b      	str	r3, [r7, #0]
 8002336:	4b09      	ldr	r3, [pc, #36]	; (800235c <HAL_MspInit+0x4c>)
 8002338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800233a:	4a08      	ldr	r2, [pc, #32]	; (800235c <HAL_MspInit+0x4c>)
 800233c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002340:	6413      	str	r3, [r2, #64]	; 0x40
 8002342:	4b06      	ldr	r3, [pc, #24]	; (800235c <HAL_MspInit+0x4c>)
 8002344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002346:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800234a:	603b      	str	r3, [r7, #0]
 800234c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800234e:	bf00      	nop
 8002350:	370c      	adds	r7, #12
 8002352:	46bd      	mov	sp, r7
 8002354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002358:	4770      	bx	lr
 800235a:	bf00      	nop
 800235c:	40023800 	.word	0x40023800

08002360 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b08a      	sub	sp, #40	; 0x28
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002368:	f107 0314 	add.w	r3, r7, #20
 800236c:	2200      	movs	r2, #0
 800236e:	601a      	str	r2, [r3, #0]
 8002370:	605a      	str	r2, [r3, #4]
 8002372:	609a      	str	r2, [r3, #8]
 8002374:	60da      	str	r2, [r3, #12]
 8002376:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4a19      	ldr	r2, [pc, #100]	; (80023e4 <HAL_I2C_MspInit+0x84>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d12c      	bne.n	80023dc <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002382:	2300      	movs	r3, #0
 8002384:	613b      	str	r3, [r7, #16]
 8002386:	4b18      	ldr	r3, [pc, #96]	; (80023e8 <HAL_I2C_MspInit+0x88>)
 8002388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800238a:	4a17      	ldr	r2, [pc, #92]	; (80023e8 <HAL_I2C_MspInit+0x88>)
 800238c:	f043 0302 	orr.w	r3, r3, #2
 8002390:	6313      	str	r3, [r2, #48]	; 0x30
 8002392:	4b15      	ldr	r3, [pc, #84]	; (80023e8 <HAL_I2C_MspInit+0x88>)
 8002394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002396:	f003 0302 	and.w	r3, r3, #2
 800239a:	613b      	str	r3, [r7, #16]
 800239c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800239e:	f44f 7340 	mov.w	r3, #768	; 0x300
 80023a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80023a4:	2312      	movs	r3, #18
 80023a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023a8:	2300      	movs	r3, #0
 80023aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023ac:	2303      	movs	r3, #3
 80023ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80023b0:	2304      	movs	r3, #4
 80023b2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023b4:	f107 0314 	add.w	r3, r7, #20
 80023b8:	4619      	mov	r1, r3
 80023ba:	480c      	ldr	r0, [pc, #48]	; (80023ec <HAL_I2C_MspInit+0x8c>)
 80023bc:	f000 fa78 	bl	80028b0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80023c0:	2300      	movs	r3, #0
 80023c2:	60fb      	str	r3, [r7, #12]
 80023c4:	4b08      	ldr	r3, [pc, #32]	; (80023e8 <HAL_I2C_MspInit+0x88>)
 80023c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023c8:	4a07      	ldr	r2, [pc, #28]	; (80023e8 <HAL_I2C_MspInit+0x88>)
 80023ca:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80023ce:	6413      	str	r3, [r2, #64]	; 0x40
 80023d0:	4b05      	ldr	r3, [pc, #20]	; (80023e8 <HAL_I2C_MspInit+0x88>)
 80023d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023d8:	60fb      	str	r3, [r7, #12]
 80023da:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80023dc:	bf00      	nop
 80023de:	3728      	adds	r7, #40	; 0x28
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bd80      	pop	{r7, pc}
 80023e4:	40005400 	.word	0x40005400
 80023e8:	40023800 	.word	0x40023800
 80023ec:	40020400 	.word	0x40020400

080023f0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b08a      	sub	sp, #40	; 0x28
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023f8:	f107 0314 	add.w	r3, r7, #20
 80023fc:	2200      	movs	r2, #0
 80023fe:	601a      	str	r2, [r3, #0]
 8002400:	605a      	str	r2, [r3, #4]
 8002402:	609a      	str	r2, [r3, #8]
 8002404:	60da      	str	r2, [r3, #12]
 8002406:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a19      	ldr	r2, [pc, #100]	; (8002474 <HAL_UART_MspInit+0x84>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d12b      	bne.n	800246a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002412:	2300      	movs	r3, #0
 8002414:	613b      	str	r3, [r7, #16]
 8002416:	4b18      	ldr	r3, [pc, #96]	; (8002478 <HAL_UART_MspInit+0x88>)
 8002418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800241a:	4a17      	ldr	r2, [pc, #92]	; (8002478 <HAL_UART_MspInit+0x88>)
 800241c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002420:	6413      	str	r3, [r2, #64]	; 0x40
 8002422:	4b15      	ldr	r3, [pc, #84]	; (8002478 <HAL_UART_MspInit+0x88>)
 8002424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002426:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800242a:	613b      	str	r3, [r7, #16]
 800242c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800242e:	2300      	movs	r3, #0
 8002430:	60fb      	str	r3, [r7, #12]
 8002432:	4b11      	ldr	r3, [pc, #68]	; (8002478 <HAL_UART_MspInit+0x88>)
 8002434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002436:	4a10      	ldr	r2, [pc, #64]	; (8002478 <HAL_UART_MspInit+0x88>)
 8002438:	f043 0301 	orr.w	r3, r3, #1
 800243c:	6313      	str	r3, [r2, #48]	; 0x30
 800243e:	4b0e      	ldr	r3, [pc, #56]	; (8002478 <HAL_UART_MspInit+0x88>)
 8002440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002442:	f003 0301 	and.w	r3, r3, #1
 8002446:	60fb      	str	r3, [r7, #12]
 8002448:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800244a:	230c      	movs	r3, #12
 800244c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800244e:	2302      	movs	r3, #2
 8002450:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002452:	2300      	movs	r3, #0
 8002454:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002456:	2303      	movs	r3, #3
 8002458:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800245a:	2307      	movs	r3, #7
 800245c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800245e:	f107 0314 	add.w	r3, r7, #20
 8002462:	4619      	mov	r1, r3
 8002464:	4805      	ldr	r0, [pc, #20]	; (800247c <HAL_UART_MspInit+0x8c>)
 8002466:	f000 fa23 	bl	80028b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800246a:	bf00      	nop
 800246c:	3728      	adds	r7, #40	; 0x28
 800246e:	46bd      	mov	sp, r7
 8002470:	bd80      	pop	{r7, pc}
 8002472:	bf00      	nop
 8002474:	40004400 	.word	0x40004400
 8002478:	40023800 	.word	0x40023800
 800247c:	40020000 	.word	0x40020000

08002480 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002480:	b480      	push	{r7}
 8002482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002484:	e7fe      	b.n	8002484 <NMI_Handler+0x4>

08002486 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002486:	b480      	push	{r7}
 8002488:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800248a:	e7fe      	b.n	800248a <HardFault_Handler+0x4>

0800248c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800248c:	b480      	push	{r7}
 800248e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002490:	e7fe      	b.n	8002490 <MemManage_Handler+0x4>

08002492 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002492:	b480      	push	{r7}
 8002494:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002496:	e7fe      	b.n	8002496 <BusFault_Handler+0x4>

08002498 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002498:	b480      	push	{r7}
 800249a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800249c:	e7fe      	b.n	800249c <UsageFault_Handler+0x4>

0800249e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800249e:	b480      	push	{r7}
 80024a0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80024a2:	bf00      	nop
 80024a4:	46bd      	mov	sp, r7
 80024a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024aa:	4770      	bx	lr

080024ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80024ac:	b480      	push	{r7}
 80024ae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80024b0:	bf00      	nop
 80024b2:	46bd      	mov	sp, r7
 80024b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b8:	4770      	bx	lr

080024ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80024ba:	b480      	push	{r7}
 80024bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80024be:	bf00      	nop
 80024c0:	46bd      	mov	sp, r7
 80024c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c6:	4770      	bx	lr

080024c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80024cc:	f000 f8c6 	bl	800265c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80024d0:	bf00      	nop
 80024d2:	bd80      	pop	{r7, pc}

080024d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b086      	sub	sp, #24
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80024dc:	4a14      	ldr	r2, [pc, #80]	; (8002530 <_sbrk+0x5c>)
 80024de:	4b15      	ldr	r3, [pc, #84]	; (8002534 <_sbrk+0x60>)
 80024e0:	1ad3      	subs	r3, r2, r3
 80024e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80024e4:	697b      	ldr	r3, [r7, #20]
 80024e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80024e8:	4b13      	ldr	r3, [pc, #76]	; (8002538 <_sbrk+0x64>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d102      	bne.n	80024f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80024f0:	4b11      	ldr	r3, [pc, #68]	; (8002538 <_sbrk+0x64>)
 80024f2:	4a12      	ldr	r2, [pc, #72]	; (800253c <_sbrk+0x68>)
 80024f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80024f6:	4b10      	ldr	r3, [pc, #64]	; (8002538 <_sbrk+0x64>)
 80024f8:	681a      	ldr	r2, [r3, #0]
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	4413      	add	r3, r2
 80024fe:	693a      	ldr	r2, [r7, #16]
 8002500:	429a      	cmp	r2, r3
 8002502:	d207      	bcs.n	8002514 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002504:	f002 fa90 	bl	8004a28 <__errno>
 8002508:	4603      	mov	r3, r0
 800250a:	220c      	movs	r2, #12
 800250c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800250e:	f04f 33ff 	mov.w	r3, #4294967295
 8002512:	e009      	b.n	8002528 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002514:	4b08      	ldr	r3, [pc, #32]	; (8002538 <_sbrk+0x64>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800251a:	4b07      	ldr	r3, [pc, #28]	; (8002538 <_sbrk+0x64>)
 800251c:	681a      	ldr	r2, [r3, #0]
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	4413      	add	r3, r2
 8002522:	4a05      	ldr	r2, [pc, #20]	; (8002538 <_sbrk+0x64>)
 8002524:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002526:	68fb      	ldr	r3, [r7, #12]
}
 8002528:	4618      	mov	r0, r3
 800252a:	3718      	adds	r7, #24
 800252c:	46bd      	mov	sp, r7
 800252e:	bd80      	pop	{r7, pc}
 8002530:	20020000 	.word	0x20020000
 8002534:	00000400 	.word	0x00000400
 8002538:	20001bfc 	.word	0x20001bfc
 800253c:	20002fe0 	.word	0x20002fe0

08002540 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002540:	b480      	push	{r7}
 8002542:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002544:	4b06      	ldr	r3, [pc, #24]	; (8002560 <SystemInit+0x20>)
 8002546:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800254a:	4a05      	ldr	r2, [pc, #20]	; (8002560 <SystemInit+0x20>)
 800254c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002550:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002554:	bf00      	nop
 8002556:	46bd      	mov	sp, r7
 8002558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255c:	4770      	bx	lr
 800255e:	bf00      	nop
 8002560:	e000ed00 	.word	0xe000ed00

08002564 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002564:	f8df d034 	ldr.w	sp, [pc, #52]	; 800259c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002568:	480d      	ldr	r0, [pc, #52]	; (80025a0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800256a:	490e      	ldr	r1, [pc, #56]	; (80025a4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800256c:	4a0e      	ldr	r2, [pc, #56]	; (80025a8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800256e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002570:	e002      	b.n	8002578 <LoopCopyDataInit>

08002572 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002572:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002574:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002576:	3304      	adds	r3, #4

08002578 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002578:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800257a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800257c:	d3f9      	bcc.n	8002572 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800257e:	4a0b      	ldr	r2, [pc, #44]	; (80025ac <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002580:	4c0b      	ldr	r4, [pc, #44]	; (80025b0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002582:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002584:	e001      	b.n	800258a <LoopFillZerobss>

08002586 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002586:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002588:	3204      	adds	r2, #4

0800258a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800258a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800258c:	d3fb      	bcc.n	8002586 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800258e:	f7ff ffd7 	bl	8002540 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002592:	f002 fa4f 	bl	8004a34 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002596:	f7ff fcef 	bl	8001f78 <main>
  bx  lr    
 800259a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800259c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80025a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80025a4:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 80025a8:	080061d0 	.word	0x080061d0
  ldr r2, =_sbss
 80025ac:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 80025b0:	20002fe0 	.word	0x20002fe0

080025b4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80025b4:	e7fe      	b.n	80025b4 <ADC_IRQHandler>
	...

080025b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80025bc:	4b0e      	ldr	r3, [pc, #56]	; (80025f8 <HAL_Init+0x40>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4a0d      	ldr	r2, [pc, #52]	; (80025f8 <HAL_Init+0x40>)
 80025c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80025c6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80025c8:	4b0b      	ldr	r3, [pc, #44]	; (80025f8 <HAL_Init+0x40>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4a0a      	ldr	r2, [pc, #40]	; (80025f8 <HAL_Init+0x40>)
 80025ce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80025d2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80025d4:	4b08      	ldr	r3, [pc, #32]	; (80025f8 <HAL_Init+0x40>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4a07      	ldr	r2, [pc, #28]	; (80025f8 <HAL_Init+0x40>)
 80025da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025de:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80025e0:	2003      	movs	r0, #3
 80025e2:	f000 f931 	bl	8002848 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80025e6:	200f      	movs	r0, #15
 80025e8:	f000 f808 	bl	80025fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80025ec:	f7ff fe90 	bl	8002310 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80025f0:	2300      	movs	r3, #0
}
 80025f2:	4618      	mov	r0, r3
 80025f4:	bd80      	pop	{r7, pc}
 80025f6:	bf00      	nop
 80025f8:	40023c00 	.word	0x40023c00

080025fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b082      	sub	sp, #8
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002604:	4b12      	ldr	r3, [pc, #72]	; (8002650 <HAL_InitTick+0x54>)
 8002606:	681a      	ldr	r2, [r3, #0]
 8002608:	4b12      	ldr	r3, [pc, #72]	; (8002654 <HAL_InitTick+0x58>)
 800260a:	781b      	ldrb	r3, [r3, #0]
 800260c:	4619      	mov	r1, r3
 800260e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002612:	fbb3 f3f1 	udiv	r3, r3, r1
 8002616:	fbb2 f3f3 	udiv	r3, r2, r3
 800261a:	4618      	mov	r0, r3
 800261c:	f000 f93b 	bl	8002896 <HAL_SYSTICK_Config>
 8002620:	4603      	mov	r3, r0
 8002622:	2b00      	cmp	r3, #0
 8002624:	d001      	beq.n	800262a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002626:	2301      	movs	r3, #1
 8002628:	e00e      	b.n	8002648 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2b0f      	cmp	r3, #15
 800262e:	d80a      	bhi.n	8002646 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002630:	2200      	movs	r2, #0
 8002632:	6879      	ldr	r1, [r7, #4]
 8002634:	f04f 30ff 	mov.w	r0, #4294967295
 8002638:	f000 f911 	bl	800285e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800263c:	4a06      	ldr	r2, [pc, #24]	; (8002658 <HAL_InitTick+0x5c>)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002642:	2300      	movs	r3, #0
 8002644:	e000      	b.n	8002648 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002646:	2301      	movs	r3, #1
}
 8002648:	4618      	mov	r0, r3
 800264a:	3708      	adds	r7, #8
 800264c:	46bd      	mov	sp, r7
 800264e:	bd80      	pop	{r7, pc}
 8002650:	20000008 	.word	0x20000008
 8002654:	20000010 	.word	0x20000010
 8002658:	2000000c 	.word	0x2000000c

0800265c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800265c:	b480      	push	{r7}
 800265e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002660:	4b06      	ldr	r3, [pc, #24]	; (800267c <HAL_IncTick+0x20>)
 8002662:	781b      	ldrb	r3, [r3, #0]
 8002664:	461a      	mov	r2, r3
 8002666:	4b06      	ldr	r3, [pc, #24]	; (8002680 <HAL_IncTick+0x24>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4413      	add	r3, r2
 800266c:	4a04      	ldr	r2, [pc, #16]	; (8002680 <HAL_IncTick+0x24>)
 800266e:	6013      	str	r3, [r2, #0]
}
 8002670:	bf00      	nop
 8002672:	46bd      	mov	sp, r7
 8002674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002678:	4770      	bx	lr
 800267a:	bf00      	nop
 800267c:	20000010 	.word	0x20000010
 8002680:	20002fcc 	.word	0x20002fcc

08002684 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002684:	b480      	push	{r7}
 8002686:	af00      	add	r7, sp, #0
  return uwTick;
 8002688:	4b03      	ldr	r3, [pc, #12]	; (8002698 <HAL_GetTick+0x14>)
 800268a:	681b      	ldr	r3, [r3, #0]
}
 800268c:	4618      	mov	r0, r3
 800268e:	46bd      	mov	sp, r7
 8002690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002694:	4770      	bx	lr
 8002696:	bf00      	nop
 8002698:	20002fcc 	.word	0x20002fcc

0800269c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b084      	sub	sp, #16
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80026a4:	f7ff ffee 	bl	8002684 <HAL_GetTick>
 80026a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026b4:	d005      	beq.n	80026c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80026b6:	4b0a      	ldr	r3, [pc, #40]	; (80026e0 <HAL_Delay+0x44>)
 80026b8:	781b      	ldrb	r3, [r3, #0]
 80026ba:	461a      	mov	r2, r3
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	4413      	add	r3, r2
 80026c0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80026c2:	bf00      	nop
 80026c4:	f7ff ffde 	bl	8002684 <HAL_GetTick>
 80026c8:	4602      	mov	r2, r0
 80026ca:	68bb      	ldr	r3, [r7, #8]
 80026cc:	1ad3      	subs	r3, r2, r3
 80026ce:	68fa      	ldr	r2, [r7, #12]
 80026d0:	429a      	cmp	r2, r3
 80026d2:	d8f7      	bhi.n	80026c4 <HAL_Delay+0x28>
  {
  }
}
 80026d4:	bf00      	nop
 80026d6:	bf00      	nop
 80026d8:	3710      	adds	r7, #16
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd80      	pop	{r7, pc}
 80026de:	bf00      	nop
 80026e0:	20000010 	.word	0x20000010

080026e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026e4:	b480      	push	{r7}
 80026e6:	b085      	sub	sp, #20
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	f003 0307 	and.w	r3, r3, #7
 80026f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80026f4:	4b0c      	ldr	r3, [pc, #48]	; (8002728 <__NVIC_SetPriorityGrouping+0x44>)
 80026f6:	68db      	ldr	r3, [r3, #12]
 80026f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80026fa:	68ba      	ldr	r2, [r7, #8]
 80026fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002700:	4013      	ands	r3, r2
 8002702:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002708:	68bb      	ldr	r3, [r7, #8]
 800270a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800270c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002710:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002714:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002716:	4a04      	ldr	r2, [pc, #16]	; (8002728 <__NVIC_SetPriorityGrouping+0x44>)
 8002718:	68bb      	ldr	r3, [r7, #8]
 800271a:	60d3      	str	r3, [r2, #12]
}
 800271c:	bf00      	nop
 800271e:	3714      	adds	r7, #20
 8002720:	46bd      	mov	sp, r7
 8002722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002726:	4770      	bx	lr
 8002728:	e000ed00 	.word	0xe000ed00

0800272c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800272c:	b480      	push	{r7}
 800272e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002730:	4b04      	ldr	r3, [pc, #16]	; (8002744 <__NVIC_GetPriorityGrouping+0x18>)
 8002732:	68db      	ldr	r3, [r3, #12]
 8002734:	0a1b      	lsrs	r3, r3, #8
 8002736:	f003 0307 	and.w	r3, r3, #7
}
 800273a:	4618      	mov	r0, r3
 800273c:	46bd      	mov	sp, r7
 800273e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002742:	4770      	bx	lr
 8002744:	e000ed00 	.word	0xe000ed00

08002748 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002748:	b480      	push	{r7}
 800274a:	b083      	sub	sp, #12
 800274c:	af00      	add	r7, sp, #0
 800274e:	4603      	mov	r3, r0
 8002750:	6039      	str	r1, [r7, #0]
 8002752:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002754:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002758:	2b00      	cmp	r3, #0
 800275a:	db0a      	blt.n	8002772 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	b2da      	uxtb	r2, r3
 8002760:	490c      	ldr	r1, [pc, #48]	; (8002794 <__NVIC_SetPriority+0x4c>)
 8002762:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002766:	0112      	lsls	r2, r2, #4
 8002768:	b2d2      	uxtb	r2, r2
 800276a:	440b      	add	r3, r1
 800276c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002770:	e00a      	b.n	8002788 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	b2da      	uxtb	r2, r3
 8002776:	4908      	ldr	r1, [pc, #32]	; (8002798 <__NVIC_SetPriority+0x50>)
 8002778:	79fb      	ldrb	r3, [r7, #7]
 800277a:	f003 030f 	and.w	r3, r3, #15
 800277e:	3b04      	subs	r3, #4
 8002780:	0112      	lsls	r2, r2, #4
 8002782:	b2d2      	uxtb	r2, r2
 8002784:	440b      	add	r3, r1
 8002786:	761a      	strb	r2, [r3, #24]
}
 8002788:	bf00      	nop
 800278a:	370c      	adds	r7, #12
 800278c:	46bd      	mov	sp, r7
 800278e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002792:	4770      	bx	lr
 8002794:	e000e100 	.word	0xe000e100
 8002798:	e000ed00 	.word	0xe000ed00

0800279c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800279c:	b480      	push	{r7}
 800279e:	b089      	sub	sp, #36	; 0x24
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	60f8      	str	r0, [r7, #12]
 80027a4:	60b9      	str	r1, [r7, #8]
 80027a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	f003 0307 	and.w	r3, r3, #7
 80027ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80027b0:	69fb      	ldr	r3, [r7, #28]
 80027b2:	f1c3 0307 	rsb	r3, r3, #7
 80027b6:	2b04      	cmp	r3, #4
 80027b8:	bf28      	it	cs
 80027ba:	2304      	movcs	r3, #4
 80027bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80027be:	69fb      	ldr	r3, [r7, #28]
 80027c0:	3304      	adds	r3, #4
 80027c2:	2b06      	cmp	r3, #6
 80027c4:	d902      	bls.n	80027cc <NVIC_EncodePriority+0x30>
 80027c6:	69fb      	ldr	r3, [r7, #28]
 80027c8:	3b03      	subs	r3, #3
 80027ca:	e000      	b.n	80027ce <NVIC_EncodePriority+0x32>
 80027cc:	2300      	movs	r3, #0
 80027ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027d0:	f04f 32ff 	mov.w	r2, #4294967295
 80027d4:	69bb      	ldr	r3, [r7, #24]
 80027d6:	fa02 f303 	lsl.w	r3, r2, r3
 80027da:	43da      	mvns	r2, r3
 80027dc:	68bb      	ldr	r3, [r7, #8]
 80027de:	401a      	ands	r2, r3
 80027e0:	697b      	ldr	r3, [r7, #20]
 80027e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80027e4:	f04f 31ff 	mov.w	r1, #4294967295
 80027e8:	697b      	ldr	r3, [r7, #20]
 80027ea:	fa01 f303 	lsl.w	r3, r1, r3
 80027ee:	43d9      	mvns	r1, r3
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027f4:	4313      	orrs	r3, r2
         );
}
 80027f6:	4618      	mov	r0, r3
 80027f8:	3724      	adds	r7, #36	; 0x24
 80027fa:	46bd      	mov	sp, r7
 80027fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002800:	4770      	bx	lr
	...

08002804 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b082      	sub	sp, #8
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	3b01      	subs	r3, #1
 8002810:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002814:	d301      	bcc.n	800281a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002816:	2301      	movs	r3, #1
 8002818:	e00f      	b.n	800283a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800281a:	4a0a      	ldr	r2, [pc, #40]	; (8002844 <SysTick_Config+0x40>)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	3b01      	subs	r3, #1
 8002820:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002822:	210f      	movs	r1, #15
 8002824:	f04f 30ff 	mov.w	r0, #4294967295
 8002828:	f7ff ff8e 	bl	8002748 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800282c:	4b05      	ldr	r3, [pc, #20]	; (8002844 <SysTick_Config+0x40>)
 800282e:	2200      	movs	r2, #0
 8002830:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002832:	4b04      	ldr	r3, [pc, #16]	; (8002844 <SysTick_Config+0x40>)
 8002834:	2207      	movs	r2, #7
 8002836:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002838:	2300      	movs	r3, #0
}
 800283a:	4618      	mov	r0, r3
 800283c:	3708      	adds	r7, #8
 800283e:	46bd      	mov	sp, r7
 8002840:	bd80      	pop	{r7, pc}
 8002842:	bf00      	nop
 8002844:	e000e010 	.word	0xe000e010

08002848 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b082      	sub	sp, #8
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002850:	6878      	ldr	r0, [r7, #4]
 8002852:	f7ff ff47 	bl	80026e4 <__NVIC_SetPriorityGrouping>
}
 8002856:	bf00      	nop
 8002858:	3708      	adds	r7, #8
 800285a:	46bd      	mov	sp, r7
 800285c:	bd80      	pop	{r7, pc}

0800285e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800285e:	b580      	push	{r7, lr}
 8002860:	b086      	sub	sp, #24
 8002862:	af00      	add	r7, sp, #0
 8002864:	4603      	mov	r3, r0
 8002866:	60b9      	str	r1, [r7, #8]
 8002868:	607a      	str	r2, [r7, #4]
 800286a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800286c:	2300      	movs	r3, #0
 800286e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002870:	f7ff ff5c 	bl	800272c <__NVIC_GetPriorityGrouping>
 8002874:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002876:	687a      	ldr	r2, [r7, #4]
 8002878:	68b9      	ldr	r1, [r7, #8]
 800287a:	6978      	ldr	r0, [r7, #20]
 800287c:	f7ff ff8e 	bl	800279c <NVIC_EncodePriority>
 8002880:	4602      	mov	r2, r0
 8002882:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002886:	4611      	mov	r1, r2
 8002888:	4618      	mov	r0, r3
 800288a:	f7ff ff5d 	bl	8002748 <__NVIC_SetPriority>
}
 800288e:	bf00      	nop
 8002890:	3718      	adds	r7, #24
 8002892:	46bd      	mov	sp, r7
 8002894:	bd80      	pop	{r7, pc}

08002896 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002896:	b580      	push	{r7, lr}
 8002898:	b082      	sub	sp, #8
 800289a:	af00      	add	r7, sp, #0
 800289c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800289e:	6878      	ldr	r0, [r7, #4]
 80028a0:	f7ff ffb0 	bl	8002804 <SysTick_Config>
 80028a4:	4603      	mov	r3, r0
}
 80028a6:	4618      	mov	r0, r3
 80028a8:	3708      	adds	r7, #8
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bd80      	pop	{r7, pc}
	...

080028b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80028b0:	b480      	push	{r7}
 80028b2:	b089      	sub	sp, #36	; 0x24
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
 80028b8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80028ba:	2300      	movs	r3, #0
 80028bc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80028be:	2300      	movs	r3, #0
 80028c0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80028c2:	2300      	movs	r3, #0
 80028c4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80028c6:	2300      	movs	r3, #0
 80028c8:	61fb      	str	r3, [r7, #28]
 80028ca:	e159      	b.n	8002b80 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80028cc:	2201      	movs	r2, #1
 80028ce:	69fb      	ldr	r3, [r7, #28]
 80028d0:	fa02 f303 	lsl.w	r3, r2, r3
 80028d4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	697a      	ldr	r2, [r7, #20]
 80028dc:	4013      	ands	r3, r2
 80028de:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80028e0:	693a      	ldr	r2, [r7, #16]
 80028e2:	697b      	ldr	r3, [r7, #20]
 80028e4:	429a      	cmp	r2, r3
 80028e6:	f040 8148 	bne.w	8002b7a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	f003 0303 	and.w	r3, r3, #3
 80028f2:	2b01      	cmp	r3, #1
 80028f4:	d005      	beq.n	8002902 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80028fe:	2b02      	cmp	r3, #2
 8002900:	d130      	bne.n	8002964 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	689b      	ldr	r3, [r3, #8]
 8002906:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002908:	69fb      	ldr	r3, [r7, #28]
 800290a:	005b      	lsls	r3, r3, #1
 800290c:	2203      	movs	r2, #3
 800290e:	fa02 f303 	lsl.w	r3, r2, r3
 8002912:	43db      	mvns	r3, r3
 8002914:	69ba      	ldr	r2, [r7, #24]
 8002916:	4013      	ands	r3, r2
 8002918:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	68da      	ldr	r2, [r3, #12]
 800291e:	69fb      	ldr	r3, [r7, #28]
 8002920:	005b      	lsls	r3, r3, #1
 8002922:	fa02 f303 	lsl.w	r3, r2, r3
 8002926:	69ba      	ldr	r2, [r7, #24]
 8002928:	4313      	orrs	r3, r2
 800292a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	69ba      	ldr	r2, [r7, #24]
 8002930:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002938:	2201      	movs	r2, #1
 800293a:	69fb      	ldr	r3, [r7, #28]
 800293c:	fa02 f303 	lsl.w	r3, r2, r3
 8002940:	43db      	mvns	r3, r3
 8002942:	69ba      	ldr	r2, [r7, #24]
 8002944:	4013      	ands	r3, r2
 8002946:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	091b      	lsrs	r3, r3, #4
 800294e:	f003 0201 	and.w	r2, r3, #1
 8002952:	69fb      	ldr	r3, [r7, #28]
 8002954:	fa02 f303 	lsl.w	r3, r2, r3
 8002958:	69ba      	ldr	r2, [r7, #24]
 800295a:	4313      	orrs	r3, r2
 800295c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	69ba      	ldr	r2, [r7, #24]
 8002962:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	f003 0303 	and.w	r3, r3, #3
 800296c:	2b03      	cmp	r3, #3
 800296e:	d017      	beq.n	80029a0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	68db      	ldr	r3, [r3, #12]
 8002974:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002976:	69fb      	ldr	r3, [r7, #28]
 8002978:	005b      	lsls	r3, r3, #1
 800297a:	2203      	movs	r2, #3
 800297c:	fa02 f303 	lsl.w	r3, r2, r3
 8002980:	43db      	mvns	r3, r3
 8002982:	69ba      	ldr	r2, [r7, #24]
 8002984:	4013      	ands	r3, r2
 8002986:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	689a      	ldr	r2, [r3, #8]
 800298c:	69fb      	ldr	r3, [r7, #28]
 800298e:	005b      	lsls	r3, r3, #1
 8002990:	fa02 f303 	lsl.w	r3, r2, r3
 8002994:	69ba      	ldr	r2, [r7, #24]
 8002996:	4313      	orrs	r3, r2
 8002998:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	69ba      	ldr	r2, [r7, #24]
 800299e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	f003 0303 	and.w	r3, r3, #3
 80029a8:	2b02      	cmp	r3, #2
 80029aa:	d123      	bne.n	80029f4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80029ac:	69fb      	ldr	r3, [r7, #28]
 80029ae:	08da      	lsrs	r2, r3, #3
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	3208      	adds	r2, #8
 80029b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80029ba:	69fb      	ldr	r3, [r7, #28]
 80029bc:	f003 0307 	and.w	r3, r3, #7
 80029c0:	009b      	lsls	r3, r3, #2
 80029c2:	220f      	movs	r2, #15
 80029c4:	fa02 f303 	lsl.w	r3, r2, r3
 80029c8:	43db      	mvns	r3, r3
 80029ca:	69ba      	ldr	r2, [r7, #24]
 80029cc:	4013      	ands	r3, r2
 80029ce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	691a      	ldr	r2, [r3, #16]
 80029d4:	69fb      	ldr	r3, [r7, #28]
 80029d6:	f003 0307 	and.w	r3, r3, #7
 80029da:	009b      	lsls	r3, r3, #2
 80029dc:	fa02 f303 	lsl.w	r3, r2, r3
 80029e0:	69ba      	ldr	r2, [r7, #24]
 80029e2:	4313      	orrs	r3, r2
 80029e4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80029e6:	69fb      	ldr	r3, [r7, #28]
 80029e8:	08da      	lsrs	r2, r3, #3
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	3208      	adds	r2, #8
 80029ee:	69b9      	ldr	r1, [r7, #24]
 80029f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80029fa:	69fb      	ldr	r3, [r7, #28]
 80029fc:	005b      	lsls	r3, r3, #1
 80029fe:	2203      	movs	r2, #3
 8002a00:	fa02 f303 	lsl.w	r3, r2, r3
 8002a04:	43db      	mvns	r3, r3
 8002a06:	69ba      	ldr	r2, [r7, #24]
 8002a08:	4013      	ands	r3, r2
 8002a0a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	f003 0203 	and.w	r2, r3, #3
 8002a14:	69fb      	ldr	r3, [r7, #28]
 8002a16:	005b      	lsls	r3, r3, #1
 8002a18:	fa02 f303 	lsl.w	r3, r2, r3
 8002a1c:	69ba      	ldr	r2, [r7, #24]
 8002a1e:	4313      	orrs	r3, r2
 8002a20:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	69ba      	ldr	r2, [r7, #24]
 8002a26:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	f000 80a2 	beq.w	8002b7a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a36:	2300      	movs	r3, #0
 8002a38:	60fb      	str	r3, [r7, #12]
 8002a3a:	4b57      	ldr	r3, [pc, #348]	; (8002b98 <HAL_GPIO_Init+0x2e8>)
 8002a3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a3e:	4a56      	ldr	r2, [pc, #344]	; (8002b98 <HAL_GPIO_Init+0x2e8>)
 8002a40:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a44:	6453      	str	r3, [r2, #68]	; 0x44
 8002a46:	4b54      	ldr	r3, [pc, #336]	; (8002b98 <HAL_GPIO_Init+0x2e8>)
 8002a48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a4e:	60fb      	str	r3, [r7, #12]
 8002a50:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002a52:	4a52      	ldr	r2, [pc, #328]	; (8002b9c <HAL_GPIO_Init+0x2ec>)
 8002a54:	69fb      	ldr	r3, [r7, #28]
 8002a56:	089b      	lsrs	r3, r3, #2
 8002a58:	3302      	adds	r3, #2
 8002a5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002a60:	69fb      	ldr	r3, [r7, #28]
 8002a62:	f003 0303 	and.w	r3, r3, #3
 8002a66:	009b      	lsls	r3, r3, #2
 8002a68:	220f      	movs	r2, #15
 8002a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a6e:	43db      	mvns	r3, r3
 8002a70:	69ba      	ldr	r2, [r7, #24]
 8002a72:	4013      	ands	r3, r2
 8002a74:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	4a49      	ldr	r2, [pc, #292]	; (8002ba0 <HAL_GPIO_Init+0x2f0>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d019      	beq.n	8002ab2 <HAL_GPIO_Init+0x202>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	4a48      	ldr	r2, [pc, #288]	; (8002ba4 <HAL_GPIO_Init+0x2f4>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d013      	beq.n	8002aae <HAL_GPIO_Init+0x1fe>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	4a47      	ldr	r2, [pc, #284]	; (8002ba8 <HAL_GPIO_Init+0x2f8>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d00d      	beq.n	8002aaa <HAL_GPIO_Init+0x1fa>
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	4a46      	ldr	r2, [pc, #280]	; (8002bac <HAL_GPIO_Init+0x2fc>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d007      	beq.n	8002aa6 <HAL_GPIO_Init+0x1f6>
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	4a45      	ldr	r2, [pc, #276]	; (8002bb0 <HAL_GPIO_Init+0x300>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d101      	bne.n	8002aa2 <HAL_GPIO_Init+0x1f2>
 8002a9e:	2304      	movs	r3, #4
 8002aa0:	e008      	b.n	8002ab4 <HAL_GPIO_Init+0x204>
 8002aa2:	2307      	movs	r3, #7
 8002aa4:	e006      	b.n	8002ab4 <HAL_GPIO_Init+0x204>
 8002aa6:	2303      	movs	r3, #3
 8002aa8:	e004      	b.n	8002ab4 <HAL_GPIO_Init+0x204>
 8002aaa:	2302      	movs	r3, #2
 8002aac:	e002      	b.n	8002ab4 <HAL_GPIO_Init+0x204>
 8002aae:	2301      	movs	r3, #1
 8002ab0:	e000      	b.n	8002ab4 <HAL_GPIO_Init+0x204>
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	69fa      	ldr	r2, [r7, #28]
 8002ab6:	f002 0203 	and.w	r2, r2, #3
 8002aba:	0092      	lsls	r2, r2, #2
 8002abc:	4093      	lsls	r3, r2
 8002abe:	69ba      	ldr	r2, [r7, #24]
 8002ac0:	4313      	orrs	r3, r2
 8002ac2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002ac4:	4935      	ldr	r1, [pc, #212]	; (8002b9c <HAL_GPIO_Init+0x2ec>)
 8002ac6:	69fb      	ldr	r3, [r7, #28]
 8002ac8:	089b      	lsrs	r3, r3, #2
 8002aca:	3302      	adds	r3, #2
 8002acc:	69ba      	ldr	r2, [r7, #24]
 8002ace:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002ad2:	4b38      	ldr	r3, [pc, #224]	; (8002bb4 <HAL_GPIO_Init+0x304>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ad8:	693b      	ldr	r3, [r7, #16]
 8002ada:	43db      	mvns	r3, r3
 8002adc:	69ba      	ldr	r2, [r7, #24]
 8002ade:	4013      	ands	r3, r2
 8002ae0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d003      	beq.n	8002af6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002aee:	69ba      	ldr	r2, [r7, #24]
 8002af0:	693b      	ldr	r3, [r7, #16]
 8002af2:	4313      	orrs	r3, r2
 8002af4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002af6:	4a2f      	ldr	r2, [pc, #188]	; (8002bb4 <HAL_GPIO_Init+0x304>)
 8002af8:	69bb      	ldr	r3, [r7, #24]
 8002afa:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002afc:	4b2d      	ldr	r3, [pc, #180]	; (8002bb4 <HAL_GPIO_Init+0x304>)
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b02:	693b      	ldr	r3, [r7, #16]
 8002b04:	43db      	mvns	r3, r3
 8002b06:	69ba      	ldr	r2, [r7, #24]
 8002b08:	4013      	ands	r3, r2
 8002b0a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d003      	beq.n	8002b20 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002b18:	69ba      	ldr	r2, [r7, #24]
 8002b1a:	693b      	ldr	r3, [r7, #16]
 8002b1c:	4313      	orrs	r3, r2
 8002b1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002b20:	4a24      	ldr	r2, [pc, #144]	; (8002bb4 <HAL_GPIO_Init+0x304>)
 8002b22:	69bb      	ldr	r3, [r7, #24]
 8002b24:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002b26:	4b23      	ldr	r3, [pc, #140]	; (8002bb4 <HAL_GPIO_Init+0x304>)
 8002b28:	689b      	ldr	r3, [r3, #8]
 8002b2a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b2c:	693b      	ldr	r3, [r7, #16]
 8002b2e:	43db      	mvns	r3, r3
 8002b30:	69ba      	ldr	r2, [r7, #24]
 8002b32:	4013      	ands	r3, r2
 8002b34:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	685b      	ldr	r3, [r3, #4]
 8002b3a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d003      	beq.n	8002b4a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002b42:	69ba      	ldr	r2, [r7, #24]
 8002b44:	693b      	ldr	r3, [r7, #16]
 8002b46:	4313      	orrs	r3, r2
 8002b48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002b4a:	4a1a      	ldr	r2, [pc, #104]	; (8002bb4 <HAL_GPIO_Init+0x304>)
 8002b4c:	69bb      	ldr	r3, [r7, #24]
 8002b4e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002b50:	4b18      	ldr	r3, [pc, #96]	; (8002bb4 <HAL_GPIO_Init+0x304>)
 8002b52:	68db      	ldr	r3, [r3, #12]
 8002b54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b56:	693b      	ldr	r3, [r7, #16]
 8002b58:	43db      	mvns	r3, r3
 8002b5a:	69ba      	ldr	r2, [r7, #24]
 8002b5c:	4013      	ands	r3, r2
 8002b5e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	685b      	ldr	r3, [r3, #4]
 8002b64:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d003      	beq.n	8002b74 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002b6c:	69ba      	ldr	r2, [r7, #24]
 8002b6e:	693b      	ldr	r3, [r7, #16]
 8002b70:	4313      	orrs	r3, r2
 8002b72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002b74:	4a0f      	ldr	r2, [pc, #60]	; (8002bb4 <HAL_GPIO_Init+0x304>)
 8002b76:	69bb      	ldr	r3, [r7, #24]
 8002b78:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b7a:	69fb      	ldr	r3, [r7, #28]
 8002b7c:	3301      	adds	r3, #1
 8002b7e:	61fb      	str	r3, [r7, #28]
 8002b80:	69fb      	ldr	r3, [r7, #28]
 8002b82:	2b0f      	cmp	r3, #15
 8002b84:	f67f aea2 	bls.w	80028cc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002b88:	bf00      	nop
 8002b8a:	bf00      	nop
 8002b8c:	3724      	adds	r7, #36	; 0x24
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b94:	4770      	bx	lr
 8002b96:	bf00      	nop
 8002b98:	40023800 	.word	0x40023800
 8002b9c:	40013800 	.word	0x40013800
 8002ba0:	40020000 	.word	0x40020000
 8002ba4:	40020400 	.word	0x40020400
 8002ba8:	40020800 	.word	0x40020800
 8002bac:	40020c00 	.word	0x40020c00
 8002bb0:	40021000 	.word	0x40021000
 8002bb4:	40013c00 	.word	0x40013c00

08002bb8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	b083      	sub	sp, #12
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
 8002bc0:	460b      	mov	r3, r1
 8002bc2:	807b      	strh	r3, [r7, #2]
 8002bc4:	4613      	mov	r3, r2
 8002bc6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002bc8:	787b      	ldrb	r3, [r7, #1]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d003      	beq.n	8002bd6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002bce:	887a      	ldrh	r2, [r7, #2]
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002bd4:	e003      	b.n	8002bde <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002bd6:	887b      	ldrh	r3, [r7, #2]
 8002bd8:	041a      	lsls	r2, r3, #16
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	619a      	str	r2, [r3, #24]
}
 8002bde:	bf00      	nop
 8002be0:	370c      	adds	r7, #12
 8002be2:	46bd      	mov	sp, r7
 8002be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be8:	4770      	bx	lr
	...

08002bec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b084      	sub	sp, #16
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d101      	bne.n	8002bfe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	e12b      	b.n	8002e56 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c04:	b2db      	uxtb	r3, r3
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d106      	bne.n	8002c18 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002c12:	6878      	ldr	r0, [r7, #4]
 8002c14:	f7ff fba4 	bl	8002360 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2224      	movs	r2, #36	; 0x24
 8002c1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	681a      	ldr	r2, [r3, #0]
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f022 0201 	bic.w	r2, r2, #1
 8002c2e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	681a      	ldr	r2, [r3, #0]
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002c3e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	681a      	ldr	r2, [r3, #0]
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002c4e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002c50:	f001 fbac 	bl	80043ac <HAL_RCC_GetPCLK1Freq>
 8002c54:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	685b      	ldr	r3, [r3, #4]
 8002c5a:	4a81      	ldr	r2, [pc, #516]	; (8002e60 <HAL_I2C_Init+0x274>)
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d807      	bhi.n	8002c70 <HAL_I2C_Init+0x84>
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	4a80      	ldr	r2, [pc, #512]	; (8002e64 <HAL_I2C_Init+0x278>)
 8002c64:	4293      	cmp	r3, r2
 8002c66:	bf94      	ite	ls
 8002c68:	2301      	movls	r3, #1
 8002c6a:	2300      	movhi	r3, #0
 8002c6c:	b2db      	uxtb	r3, r3
 8002c6e:	e006      	b.n	8002c7e <HAL_I2C_Init+0x92>
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	4a7d      	ldr	r2, [pc, #500]	; (8002e68 <HAL_I2C_Init+0x27c>)
 8002c74:	4293      	cmp	r3, r2
 8002c76:	bf94      	ite	ls
 8002c78:	2301      	movls	r3, #1
 8002c7a:	2300      	movhi	r3, #0
 8002c7c:	b2db      	uxtb	r3, r3
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d001      	beq.n	8002c86 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002c82:	2301      	movs	r3, #1
 8002c84:	e0e7      	b.n	8002e56 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	4a78      	ldr	r2, [pc, #480]	; (8002e6c <HAL_I2C_Init+0x280>)
 8002c8a:	fba2 2303 	umull	r2, r3, r2, r3
 8002c8e:	0c9b      	lsrs	r3, r3, #18
 8002c90:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	685b      	ldr	r3, [r3, #4]
 8002c98:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	68ba      	ldr	r2, [r7, #8]
 8002ca2:	430a      	orrs	r2, r1
 8002ca4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	6a1b      	ldr	r3, [r3, #32]
 8002cac:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	685b      	ldr	r3, [r3, #4]
 8002cb4:	4a6a      	ldr	r2, [pc, #424]	; (8002e60 <HAL_I2C_Init+0x274>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d802      	bhi.n	8002cc0 <HAL_I2C_Init+0xd4>
 8002cba:	68bb      	ldr	r3, [r7, #8]
 8002cbc:	3301      	adds	r3, #1
 8002cbe:	e009      	b.n	8002cd4 <HAL_I2C_Init+0xe8>
 8002cc0:	68bb      	ldr	r3, [r7, #8]
 8002cc2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002cc6:	fb02 f303 	mul.w	r3, r2, r3
 8002cca:	4a69      	ldr	r2, [pc, #420]	; (8002e70 <HAL_I2C_Init+0x284>)
 8002ccc:	fba2 2303 	umull	r2, r3, r2, r3
 8002cd0:	099b      	lsrs	r3, r3, #6
 8002cd2:	3301      	adds	r3, #1
 8002cd4:	687a      	ldr	r2, [r7, #4]
 8002cd6:	6812      	ldr	r2, [r2, #0]
 8002cd8:	430b      	orrs	r3, r1
 8002cda:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	69db      	ldr	r3, [r3, #28]
 8002ce2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002ce6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	495c      	ldr	r1, [pc, #368]	; (8002e60 <HAL_I2C_Init+0x274>)
 8002cf0:	428b      	cmp	r3, r1
 8002cf2:	d819      	bhi.n	8002d28 <HAL_I2C_Init+0x13c>
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	1e59      	subs	r1, r3, #1
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	005b      	lsls	r3, r3, #1
 8002cfe:	fbb1 f3f3 	udiv	r3, r1, r3
 8002d02:	1c59      	adds	r1, r3, #1
 8002d04:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002d08:	400b      	ands	r3, r1
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d00a      	beq.n	8002d24 <HAL_I2C_Init+0x138>
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	1e59      	subs	r1, r3, #1
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	005b      	lsls	r3, r3, #1
 8002d18:	fbb1 f3f3 	udiv	r3, r1, r3
 8002d1c:	3301      	adds	r3, #1
 8002d1e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d22:	e051      	b.n	8002dc8 <HAL_I2C_Init+0x1dc>
 8002d24:	2304      	movs	r3, #4
 8002d26:	e04f      	b.n	8002dc8 <HAL_I2C_Init+0x1dc>
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	689b      	ldr	r3, [r3, #8]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d111      	bne.n	8002d54 <HAL_I2C_Init+0x168>
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	1e58      	subs	r0, r3, #1
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6859      	ldr	r1, [r3, #4]
 8002d38:	460b      	mov	r3, r1
 8002d3a:	005b      	lsls	r3, r3, #1
 8002d3c:	440b      	add	r3, r1
 8002d3e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d42:	3301      	adds	r3, #1
 8002d44:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	bf0c      	ite	eq
 8002d4c:	2301      	moveq	r3, #1
 8002d4e:	2300      	movne	r3, #0
 8002d50:	b2db      	uxtb	r3, r3
 8002d52:	e012      	b.n	8002d7a <HAL_I2C_Init+0x18e>
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	1e58      	subs	r0, r3, #1
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6859      	ldr	r1, [r3, #4]
 8002d5c:	460b      	mov	r3, r1
 8002d5e:	009b      	lsls	r3, r3, #2
 8002d60:	440b      	add	r3, r1
 8002d62:	0099      	lsls	r1, r3, #2
 8002d64:	440b      	add	r3, r1
 8002d66:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d6a:	3301      	adds	r3, #1
 8002d6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	bf0c      	ite	eq
 8002d74:	2301      	moveq	r3, #1
 8002d76:	2300      	movne	r3, #0
 8002d78:	b2db      	uxtb	r3, r3
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d001      	beq.n	8002d82 <HAL_I2C_Init+0x196>
 8002d7e:	2301      	movs	r3, #1
 8002d80:	e022      	b.n	8002dc8 <HAL_I2C_Init+0x1dc>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	689b      	ldr	r3, [r3, #8]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d10e      	bne.n	8002da8 <HAL_I2C_Init+0x1bc>
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	1e58      	subs	r0, r3, #1
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6859      	ldr	r1, [r3, #4]
 8002d92:	460b      	mov	r3, r1
 8002d94:	005b      	lsls	r3, r3, #1
 8002d96:	440b      	add	r3, r1
 8002d98:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d9c:	3301      	adds	r3, #1
 8002d9e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002da2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002da6:	e00f      	b.n	8002dc8 <HAL_I2C_Init+0x1dc>
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	1e58      	subs	r0, r3, #1
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6859      	ldr	r1, [r3, #4]
 8002db0:	460b      	mov	r3, r1
 8002db2:	009b      	lsls	r3, r3, #2
 8002db4:	440b      	add	r3, r1
 8002db6:	0099      	lsls	r1, r3, #2
 8002db8:	440b      	add	r3, r1
 8002dba:	fbb0 f3f3 	udiv	r3, r0, r3
 8002dbe:	3301      	adds	r3, #1
 8002dc0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002dc4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002dc8:	6879      	ldr	r1, [r7, #4]
 8002dca:	6809      	ldr	r1, [r1, #0]
 8002dcc:	4313      	orrs	r3, r2
 8002dce:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	69da      	ldr	r2, [r3, #28]
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6a1b      	ldr	r3, [r3, #32]
 8002de2:	431a      	orrs	r2, r3
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	430a      	orrs	r2, r1
 8002dea:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	689b      	ldr	r3, [r3, #8]
 8002df2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002df6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002dfa:	687a      	ldr	r2, [r7, #4]
 8002dfc:	6911      	ldr	r1, [r2, #16]
 8002dfe:	687a      	ldr	r2, [r7, #4]
 8002e00:	68d2      	ldr	r2, [r2, #12]
 8002e02:	4311      	orrs	r1, r2
 8002e04:	687a      	ldr	r2, [r7, #4]
 8002e06:	6812      	ldr	r2, [r2, #0]
 8002e08:	430b      	orrs	r3, r1
 8002e0a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	68db      	ldr	r3, [r3, #12]
 8002e12:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	695a      	ldr	r2, [r3, #20]
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	699b      	ldr	r3, [r3, #24]
 8002e1e:	431a      	orrs	r2, r3
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	430a      	orrs	r2, r1
 8002e26:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	681a      	ldr	r2, [r3, #0]
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f042 0201 	orr.w	r2, r2, #1
 8002e36:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2220      	movs	r2, #32
 8002e42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2200      	movs	r2, #0
 8002e4a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2200      	movs	r2, #0
 8002e50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002e54:	2300      	movs	r3, #0
}
 8002e56:	4618      	mov	r0, r3
 8002e58:	3710      	adds	r7, #16
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bd80      	pop	{r7, pc}
 8002e5e:	bf00      	nop
 8002e60:	000186a0 	.word	0x000186a0
 8002e64:	001e847f 	.word	0x001e847f
 8002e68:	003d08ff 	.word	0x003d08ff
 8002e6c:	431bde83 	.word	0x431bde83
 8002e70:	10624dd3 	.word	0x10624dd3

08002e74 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b088      	sub	sp, #32
 8002e78:	af02      	add	r7, sp, #8
 8002e7a:	60f8      	str	r0, [r7, #12]
 8002e7c:	4608      	mov	r0, r1
 8002e7e:	4611      	mov	r1, r2
 8002e80:	461a      	mov	r2, r3
 8002e82:	4603      	mov	r3, r0
 8002e84:	817b      	strh	r3, [r7, #10]
 8002e86:	460b      	mov	r3, r1
 8002e88:	813b      	strh	r3, [r7, #8]
 8002e8a:	4613      	mov	r3, r2
 8002e8c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002e8e:	f7ff fbf9 	bl	8002684 <HAL_GetTick>
 8002e92:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e9a:	b2db      	uxtb	r3, r3
 8002e9c:	2b20      	cmp	r3, #32
 8002e9e:	f040 80d9 	bne.w	8003054 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002ea2:	697b      	ldr	r3, [r7, #20]
 8002ea4:	9300      	str	r3, [sp, #0]
 8002ea6:	2319      	movs	r3, #25
 8002ea8:	2201      	movs	r2, #1
 8002eaa:	496d      	ldr	r1, [pc, #436]	; (8003060 <HAL_I2C_Mem_Write+0x1ec>)
 8002eac:	68f8      	ldr	r0, [r7, #12]
 8002eae:	f000 fc7f 	bl	80037b0 <I2C_WaitOnFlagUntilTimeout>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d001      	beq.n	8002ebc <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002eb8:	2302      	movs	r3, #2
 8002eba:	e0cc      	b.n	8003056 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ec2:	2b01      	cmp	r3, #1
 8002ec4:	d101      	bne.n	8002eca <HAL_I2C_Mem_Write+0x56>
 8002ec6:	2302      	movs	r3, #2
 8002ec8:	e0c5      	b.n	8003056 <HAL_I2C_Mem_Write+0x1e2>
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	2201      	movs	r2, #1
 8002ece:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f003 0301 	and.w	r3, r3, #1
 8002edc:	2b01      	cmp	r3, #1
 8002ede:	d007      	beq.n	8002ef0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	681a      	ldr	r2, [r3, #0]
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f042 0201 	orr.w	r2, r2, #1
 8002eee:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	681a      	ldr	r2, [r3, #0]
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002efe:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	2221      	movs	r2, #33	; 0x21
 8002f04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	2240      	movs	r2, #64	; 0x40
 8002f0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	2200      	movs	r2, #0
 8002f14:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	6a3a      	ldr	r2, [r7, #32]
 8002f1a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002f20:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f26:	b29a      	uxth	r2, r3
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	4a4d      	ldr	r2, [pc, #308]	; (8003064 <HAL_I2C_Mem_Write+0x1f0>)
 8002f30:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002f32:	88f8      	ldrh	r0, [r7, #6]
 8002f34:	893a      	ldrh	r2, [r7, #8]
 8002f36:	8979      	ldrh	r1, [r7, #10]
 8002f38:	697b      	ldr	r3, [r7, #20]
 8002f3a:	9301      	str	r3, [sp, #4]
 8002f3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f3e:	9300      	str	r3, [sp, #0]
 8002f40:	4603      	mov	r3, r0
 8002f42:	68f8      	ldr	r0, [r7, #12]
 8002f44:	f000 fab6 	bl	80034b4 <I2C_RequestMemoryWrite>
 8002f48:	4603      	mov	r3, r0
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d052      	beq.n	8002ff4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002f4e:	2301      	movs	r3, #1
 8002f50:	e081      	b.n	8003056 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f52:	697a      	ldr	r2, [r7, #20]
 8002f54:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002f56:	68f8      	ldr	r0, [r7, #12]
 8002f58:	f000 fd00 	bl	800395c <I2C_WaitOnTXEFlagUntilTimeout>
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d00d      	beq.n	8002f7e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f66:	2b04      	cmp	r3, #4
 8002f68:	d107      	bne.n	8002f7a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	681a      	ldr	r2, [r3, #0]
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f78:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	e06b      	b.n	8003056 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f82:	781a      	ldrb	r2, [r3, #0]
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f8e:	1c5a      	adds	r2, r3, #1
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f98:	3b01      	subs	r3, #1
 8002f9a:	b29a      	uxth	r2, r3
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fa4:	b29b      	uxth	r3, r3
 8002fa6:	3b01      	subs	r3, #1
 8002fa8:	b29a      	uxth	r2, r3
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	695b      	ldr	r3, [r3, #20]
 8002fb4:	f003 0304 	and.w	r3, r3, #4
 8002fb8:	2b04      	cmp	r3, #4
 8002fba:	d11b      	bne.n	8002ff4 <HAL_I2C_Mem_Write+0x180>
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d017      	beq.n	8002ff4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fc8:	781a      	ldrb	r2, [r3, #0]
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fd4:	1c5a      	adds	r2, r3, #1
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fde:	3b01      	subs	r3, #1
 8002fe0:	b29a      	uxth	r2, r3
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fea:	b29b      	uxth	r3, r3
 8002fec:	3b01      	subs	r3, #1
 8002fee:	b29a      	uxth	r2, r3
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d1aa      	bne.n	8002f52 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ffc:	697a      	ldr	r2, [r7, #20]
 8002ffe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003000:	68f8      	ldr	r0, [r7, #12]
 8003002:	f000 fcec 	bl	80039de <I2C_WaitOnBTFFlagUntilTimeout>
 8003006:	4603      	mov	r3, r0
 8003008:	2b00      	cmp	r3, #0
 800300a:	d00d      	beq.n	8003028 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003010:	2b04      	cmp	r3, #4
 8003012:	d107      	bne.n	8003024 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	681a      	ldr	r2, [r3, #0]
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003022:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003024:	2301      	movs	r3, #1
 8003026:	e016      	b.n	8003056 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	681a      	ldr	r2, [r3, #0]
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003036:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	2220      	movs	r2, #32
 800303c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	2200      	movs	r2, #0
 8003044:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	2200      	movs	r2, #0
 800304c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003050:	2300      	movs	r3, #0
 8003052:	e000      	b.n	8003056 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003054:	2302      	movs	r3, #2
  }
}
 8003056:	4618      	mov	r0, r3
 8003058:	3718      	adds	r7, #24
 800305a:	46bd      	mov	sp, r7
 800305c:	bd80      	pop	{r7, pc}
 800305e:	bf00      	nop
 8003060:	00100002 	.word	0x00100002
 8003064:	ffff0000 	.word	0xffff0000

08003068 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b08c      	sub	sp, #48	; 0x30
 800306c:	af02      	add	r7, sp, #8
 800306e:	60f8      	str	r0, [r7, #12]
 8003070:	4608      	mov	r0, r1
 8003072:	4611      	mov	r1, r2
 8003074:	461a      	mov	r2, r3
 8003076:	4603      	mov	r3, r0
 8003078:	817b      	strh	r3, [r7, #10]
 800307a:	460b      	mov	r3, r1
 800307c:	813b      	strh	r3, [r7, #8]
 800307e:	4613      	mov	r3, r2
 8003080:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003082:	f7ff faff 	bl	8002684 <HAL_GetTick>
 8003086:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800308e:	b2db      	uxtb	r3, r3
 8003090:	2b20      	cmp	r3, #32
 8003092:	f040 8208 	bne.w	80034a6 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003098:	9300      	str	r3, [sp, #0]
 800309a:	2319      	movs	r3, #25
 800309c:	2201      	movs	r2, #1
 800309e:	497b      	ldr	r1, [pc, #492]	; (800328c <HAL_I2C_Mem_Read+0x224>)
 80030a0:	68f8      	ldr	r0, [r7, #12]
 80030a2:	f000 fb85 	bl	80037b0 <I2C_WaitOnFlagUntilTimeout>
 80030a6:	4603      	mov	r3, r0
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d001      	beq.n	80030b0 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80030ac:	2302      	movs	r3, #2
 80030ae:	e1fb      	b.n	80034a8 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030b6:	2b01      	cmp	r3, #1
 80030b8:	d101      	bne.n	80030be <HAL_I2C_Mem_Read+0x56>
 80030ba:	2302      	movs	r3, #2
 80030bc:	e1f4      	b.n	80034a8 <HAL_I2C_Mem_Read+0x440>
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	2201      	movs	r2, #1
 80030c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f003 0301 	and.w	r3, r3, #1
 80030d0:	2b01      	cmp	r3, #1
 80030d2:	d007      	beq.n	80030e4 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	681a      	ldr	r2, [r3, #0]
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f042 0201 	orr.w	r2, r2, #1
 80030e2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	681a      	ldr	r2, [r3, #0]
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80030f2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	2222      	movs	r2, #34	; 0x22
 80030f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	2240      	movs	r2, #64	; 0x40
 8003100:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	2200      	movs	r2, #0
 8003108:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800310e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003114:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800311a:	b29a      	uxth	r2, r3
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	4a5b      	ldr	r2, [pc, #364]	; (8003290 <HAL_I2C_Mem_Read+0x228>)
 8003124:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003126:	88f8      	ldrh	r0, [r7, #6]
 8003128:	893a      	ldrh	r2, [r7, #8]
 800312a:	8979      	ldrh	r1, [r7, #10]
 800312c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800312e:	9301      	str	r3, [sp, #4]
 8003130:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003132:	9300      	str	r3, [sp, #0]
 8003134:	4603      	mov	r3, r0
 8003136:	68f8      	ldr	r0, [r7, #12]
 8003138:	f000 fa52 	bl	80035e0 <I2C_RequestMemoryRead>
 800313c:	4603      	mov	r3, r0
 800313e:	2b00      	cmp	r3, #0
 8003140:	d001      	beq.n	8003146 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003142:	2301      	movs	r3, #1
 8003144:	e1b0      	b.n	80034a8 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800314a:	2b00      	cmp	r3, #0
 800314c:	d113      	bne.n	8003176 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800314e:	2300      	movs	r3, #0
 8003150:	623b      	str	r3, [r7, #32]
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	695b      	ldr	r3, [r3, #20]
 8003158:	623b      	str	r3, [r7, #32]
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	699b      	ldr	r3, [r3, #24]
 8003160:	623b      	str	r3, [r7, #32]
 8003162:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	681a      	ldr	r2, [r3, #0]
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003172:	601a      	str	r2, [r3, #0]
 8003174:	e184      	b.n	8003480 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800317a:	2b01      	cmp	r3, #1
 800317c:	d11b      	bne.n	80031b6 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	681a      	ldr	r2, [r3, #0]
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800318c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800318e:	2300      	movs	r3, #0
 8003190:	61fb      	str	r3, [r7, #28]
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	695b      	ldr	r3, [r3, #20]
 8003198:	61fb      	str	r3, [r7, #28]
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	699b      	ldr	r3, [r3, #24]
 80031a0:	61fb      	str	r3, [r7, #28]
 80031a2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	681a      	ldr	r2, [r3, #0]
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031b2:	601a      	str	r2, [r3, #0]
 80031b4:	e164      	b.n	8003480 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031ba:	2b02      	cmp	r3, #2
 80031bc:	d11b      	bne.n	80031f6 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	681a      	ldr	r2, [r3, #0]
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031cc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	681a      	ldr	r2, [r3, #0]
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80031dc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031de:	2300      	movs	r3, #0
 80031e0:	61bb      	str	r3, [r7, #24]
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	695b      	ldr	r3, [r3, #20]
 80031e8:	61bb      	str	r3, [r7, #24]
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	699b      	ldr	r3, [r3, #24]
 80031f0:	61bb      	str	r3, [r7, #24]
 80031f2:	69bb      	ldr	r3, [r7, #24]
 80031f4:	e144      	b.n	8003480 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031f6:	2300      	movs	r3, #0
 80031f8:	617b      	str	r3, [r7, #20]
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	695b      	ldr	r3, [r3, #20]
 8003200:	617b      	str	r3, [r7, #20]
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	699b      	ldr	r3, [r3, #24]
 8003208:	617b      	str	r3, [r7, #20]
 800320a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800320c:	e138      	b.n	8003480 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003212:	2b03      	cmp	r3, #3
 8003214:	f200 80f1 	bhi.w	80033fa <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800321c:	2b01      	cmp	r3, #1
 800321e:	d123      	bne.n	8003268 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003220:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003222:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003224:	68f8      	ldr	r0, [r7, #12]
 8003226:	f000 fc1b 	bl	8003a60 <I2C_WaitOnRXNEFlagUntilTimeout>
 800322a:	4603      	mov	r3, r0
 800322c:	2b00      	cmp	r3, #0
 800322e:	d001      	beq.n	8003234 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003230:	2301      	movs	r3, #1
 8003232:	e139      	b.n	80034a8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	691a      	ldr	r2, [r3, #16]
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800323e:	b2d2      	uxtb	r2, r2
 8003240:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003246:	1c5a      	adds	r2, r3, #1
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003250:	3b01      	subs	r3, #1
 8003252:	b29a      	uxth	r2, r3
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800325c:	b29b      	uxth	r3, r3
 800325e:	3b01      	subs	r3, #1
 8003260:	b29a      	uxth	r2, r3
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003266:	e10b      	b.n	8003480 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800326c:	2b02      	cmp	r3, #2
 800326e:	d14e      	bne.n	800330e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003272:	9300      	str	r3, [sp, #0]
 8003274:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003276:	2200      	movs	r2, #0
 8003278:	4906      	ldr	r1, [pc, #24]	; (8003294 <HAL_I2C_Mem_Read+0x22c>)
 800327a:	68f8      	ldr	r0, [r7, #12]
 800327c:	f000 fa98 	bl	80037b0 <I2C_WaitOnFlagUntilTimeout>
 8003280:	4603      	mov	r3, r0
 8003282:	2b00      	cmp	r3, #0
 8003284:	d008      	beq.n	8003298 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003286:	2301      	movs	r3, #1
 8003288:	e10e      	b.n	80034a8 <HAL_I2C_Mem_Read+0x440>
 800328a:	bf00      	nop
 800328c:	00100002 	.word	0x00100002
 8003290:	ffff0000 	.word	0xffff0000
 8003294:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	681a      	ldr	r2, [r3, #0]
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032a6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	691a      	ldr	r2, [r3, #16]
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032b2:	b2d2      	uxtb	r2, r2
 80032b4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ba:	1c5a      	adds	r2, r3, #1
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032c4:	3b01      	subs	r3, #1
 80032c6:	b29a      	uxth	r2, r3
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032d0:	b29b      	uxth	r3, r3
 80032d2:	3b01      	subs	r3, #1
 80032d4:	b29a      	uxth	r2, r3
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	691a      	ldr	r2, [r3, #16]
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032e4:	b2d2      	uxtb	r2, r2
 80032e6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ec:	1c5a      	adds	r2, r3, #1
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032f6:	3b01      	subs	r3, #1
 80032f8:	b29a      	uxth	r2, r3
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003302:	b29b      	uxth	r3, r3
 8003304:	3b01      	subs	r3, #1
 8003306:	b29a      	uxth	r2, r3
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800330c:	e0b8      	b.n	8003480 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800330e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003310:	9300      	str	r3, [sp, #0]
 8003312:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003314:	2200      	movs	r2, #0
 8003316:	4966      	ldr	r1, [pc, #408]	; (80034b0 <HAL_I2C_Mem_Read+0x448>)
 8003318:	68f8      	ldr	r0, [r7, #12]
 800331a:	f000 fa49 	bl	80037b0 <I2C_WaitOnFlagUntilTimeout>
 800331e:	4603      	mov	r3, r0
 8003320:	2b00      	cmp	r3, #0
 8003322:	d001      	beq.n	8003328 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003324:	2301      	movs	r3, #1
 8003326:	e0bf      	b.n	80034a8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	681a      	ldr	r2, [r3, #0]
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003336:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	691a      	ldr	r2, [r3, #16]
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003342:	b2d2      	uxtb	r2, r2
 8003344:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800334a:	1c5a      	adds	r2, r3, #1
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003354:	3b01      	subs	r3, #1
 8003356:	b29a      	uxth	r2, r3
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003360:	b29b      	uxth	r3, r3
 8003362:	3b01      	subs	r3, #1
 8003364:	b29a      	uxth	r2, r3
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800336a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800336c:	9300      	str	r3, [sp, #0]
 800336e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003370:	2200      	movs	r2, #0
 8003372:	494f      	ldr	r1, [pc, #316]	; (80034b0 <HAL_I2C_Mem_Read+0x448>)
 8003374:	68f8      	ldr	r0, [r7, #12]
 8003376:	f000 fa1b 	bl	80037b0 <I2C_WaitOnFlagUntilTimeout>
 800337a:	4603      	mov	r3, r0
 800337c:	2b00      	cmp	r3, #0
 800337e:	d001      	beq.n	8003384 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003380:	2301      	movs	r3, #1
 8003382:	e091      	b.n	80034a8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	681a      	ldr	r2, [r3, #0]
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003392:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	691a      	ldr	r2, [r3, #16]
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800339e:	b2d2      	uxtb	r2, r2
 80033a0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033a6:	1c5a      	adds	r2, r3, #1
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033b0:	3b01      	subs	r3, #1
 80033b2:	b29a      	uxth	r2, r3
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033bc:	b29b      	uxth	r3, r3
 80033be:	3b01      	subs	r3, #1
 80033c0:	b29a      	uxth	r2, r3
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	691a      	ldr	r2, [r3, #16]
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033d0:	b2d2      	uxtb	r2, r2
 80033d2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033d8:	1c5a      	adds	r2, r3, #1
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033e2:	3b01      	subs	r3, #1
 80033e4:	b29a      	uxth	r2, r3
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033ee:	b29b      	uxth	r3, r3
 80033f0:	3b01      	subs	r3, #1
 80033f2:	b29a      	uxth	r2, r3
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80033f8:	e042      	b.n	8003480 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80033fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033fc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80033fe:	68f8      	ldr	r0, [r7, #12]
 8003400:	f000 fb2e 	bl	8003a60 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003404:	4603      	mov	r3, r0
 8003406:	2b00      	cmp	r3, #0
 8003408:	d001      	beq.n	800340e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800340a:	2301      	movs	r3, #1
 800340c:	e04c      	b.n	80034a8 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	691a      	ldr	r2, [r3, #16]
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003418:	b2d2      	uxtb	r2, r2
 800341a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003420:	1c5a      	adds	r2, r3, #1
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800342a:	3b01      	subs	r3, #1
 800342c:	b29a      	uxth	r2, r3
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003436:	b29b      	uxth	r3, r3
 8003438:	3b01      	subs	r3, #1
 800343a:	b29a      	uxth	r2, r3
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	695b      	ldr	r3, [r3, #20]
 8003446:	f003 0304 	and.w	r3, r3, #4
 800344a:	2b04      	cmp	r3, #4
 800344c:	d118      	bne.n	8003480 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	691a      	ldr	r2, [r3, #16]
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003458:	b2d2      	uxtb	r2, r2
 800345a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003460:	1c5a      	adds	r2, r3, #1
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800346a:	3b01      	subs	r3, #1
 800346c:	b29a      	uxth	r2, r3
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003476:	b29b      	uxth	r3, r3
 8003478:	3b01      	subs	r3, #1
 800347a:	b29a      	uxth	r2, r3
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003484:	2b00      	cmp	r3, #0
 8003486:	f47f aec2 	bne.w	800320e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	2220      	movs	r2, #32
 800348e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	2200      	movs	r2, #0
 8003496:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	2200      	movs	r2, #0
 800349e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80034a2:	2300      	movs	r3, #0
 80034a4:	e000      	b.n	80034a8 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80034a6:	2302      	movs	r3, #2
  }
}
 80034a8:	4618      	mov	r0, r3
 80034aa:	3728      	adds	r7, #40	; 0x28
 80034ac:	46bd      	mov	sp, r7
 80034ae:	bd80      	pop	{r7, pc}
 80034b0:	00010004 	.word	0x00010004

080034b4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b088      	sub	sp, #32
 80034b8:	af02      	add	r7, sp, #8
 80034ba:	60f8      	str	r0, [r7, #12]
 80034bc:	4608      	mov	r0, r1
 80034be:	4611      	mov	r1, r2
 80034c0:	461a      	mov	r2, r3
 80034c2:	4603      	mov	r3, r0
 80034c4:	817b      	strh	r3, [r7, #10]
 80034c6:	460b      	mov	r3, r1
 80034c8:	813b      	strh	r3, [r7, #8]
 80034ca:	4613      	mov	r3, r2
 80034cc:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	681a      	ldr	r2, [r3, #0]
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80034dc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80034de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034e0:	9300      	str	r3, [sp, #0]
 80034e2:	6a3b      	ldr	r3, [r7, #32]
 80034e4:	2200      	movs	r2, #0
 80034e6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80034ea:	68f8      	ldr	r0, [r7, #12]
 80034ec:	f000 f960 	bl	80037b0 <I2C_WaitOnFlagUntilTimeout>
 80034f0:	4603      	mov	r3, r0
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d00d      	beq.n	8003512 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003500:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003504:	d103      	bne.n	800350e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	f44f 7200 	mov.w	r2, #512	; 0x200
 800350c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800350e:	2303      	movs	r3, #3
 8003510:	e05f      	b.n	80035d2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003512:	897b      	ldrh	r3, [r7, #10]
 8003514:	b2db      	uxtb	r3, r3
 8003516:	461a      	mov	r2, r3
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003520:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003524:	6a3a      	ldr	r2, [r7, #32]
 8003526:	492d      	ldr	r1, [pc, #180]	; (80035dc <I2C_RequestMemoryWrite+0x128>)
 8003528:	68f8      	ldr	r0, [r7, #12]
 800352a:	f000 f998 	bl	800385e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800352e:	4603      	mov	r3, r0
 8003530:	2b00      	cmp	r3, #0
 8003532:	d001      	beq.n	8003538 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003534:	2301      	movs	r3, #1
 8003536:	e04c      	b.n	80035d2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003538:	2300      	movs	r3, #0
 800353a:	617b      	str	r3, [r7, #20]
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	695b      	ldr	r3, [r3, #20]
 8003542:	617b      	str	r3, [r7, #20]
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	699b      	ldr	r3, [r3, #24]
 800354a:	617b      	str	r3, [r7, #20]
 800354c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800354e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003550:	6a39      	ldr	r1, [r7, #32]
 8003552:	68f8      	ldr	r0, [r7, #12]
 8003554:	f000 fa02 	bl	800395c <I2C_WaitOnTXEFlagUntilTimeout>
 8003558:	4603      	mov	r3, r0
 800355a:	2b00      	cmp	r3, #0
 800355c:	d00d      	beq.n	800357a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003562:	2b04      	cmp	r3, #4
 8003564:	d107      	bne.n	8003576 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	681a      	ldr	r2, [r3, #0]
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003574:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003576:	2301      	movs	r3, #1
 8003578:	e02b      	b.n	80035d2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800357a:	88fb      	ldrh	r3, [r7, #6]
 800357c:	2b01      	cmp	r3, #1
 800357e:	d105      	bne.n	800358c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003580:	893b      	ldrh	r3, [r7, #8]
 8003582:	b2da      	uxtb	r2, r3
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	611a      	str	r2, [r3, #16]
 800358a:	e021      	b.n	80035d0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800358c:	893b      	ldrh	r3, [r7, #8]
 800358e:	0a1b      	lsrs	r3, r3, #8
 8003590:	b29b      	uxth	r3, r3
 8003592:	b2da      	uxtb	r2, r3
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800359a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800359c:	6a39      	ldr	r1, [r7, #32]
 800359e:	68f8      	ldr	r0, [r7, #12]
 80035a0:	f000 f9dc 	bl	800395c <I2C_WaitOnTXEFlagUntilTimeout>
 80035a4:	4603      	mov	r3, r0
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d00d      	beq.n	80035c6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ae:	2b04      	cmp	r3, #4
 80035b0:	d107      	bne.n	80035c2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	681a      	ldr	r2, [r3, #0]
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035c0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80035c2:	2301      	movs	r3, #1
 80035c4:	e005      	b.n	80035d2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80035c6:	893b      	ldrh	r3, [r7, #8]
 80035c8:	b2da      	uxtb	r2, r3
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80035d0:	2300      	movs	r3, #0
}
 80035d2:	4618      	mov	r0, r3
 80035d4:	3718      	adds	r7, #24
 80035d6:	46bd      	mov	sp, r7
 80035d8:	bd80      	pop	{r7, pc}
 80035da:	bf00      	nop
 80035dc:	00010002 	.word	0x00010002

080035e0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b088      	sub	sp, #32
 80035e4:	af02      	add	r7, sp, #8
 80035e6:	60f8      	str	r0, [r7, #12]
 80035e8:	4608      	mov	r0, r1
 80035ea:	4611      	mov	r1, r2
 80035ec:	461a      	mov	r2, r3
 80035ee:	4603      	mov	r3, r0
 80035f0:	817b      	strh	r3, [r7, #10]
 80035f2:	460b      	mov	r3, r1
 80035f4:	813b      	strh	r3, [r7, #8]
 80035f6:	4613      	mov	r3, r2
 80035f8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	681a      	ldr	r2, [r3, #0]
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003608:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	681a      	ldr	r2, [r3, #0]
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003618:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800361a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800361c:	9300      	str	r3, [sp, #0]
 800361e:	6a3b      	ldr	r3, [r7, #32]
 8003620:	2200      	movs	r2, #0
 8003622:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003626:	68f8      	ldr	r0, [r7, #12]
 8003628:	f000 f8c2 	bl	80037b0 <I2C_WaitOnFlagUntilTimeout>
 800362c:	4603      	mov	r3, r0
 800362e:	2b00      	cmp	r3, #0
 8003630:	d00d      	beq.n	800364e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800363c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003640:	d103      	bne.n	800364a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003648:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800364a:	2303      	movs	r3, #3
 800364c:	e0aa      	b.n	80037a4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800364e:	897b      	ldrh	r3, [r7, #10]
 8003650:	b2db      	uxtb	r3, r3
 8003652:	461a      	mov	r2, r3
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800365c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800365e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003660:	6a3a      	ldr	r2, [r7, #32]
 8003662:	4952      	ldr	r1, [pc, #328]	; (80037ac <I2C_RequestMemoryRead+0x1cc>)
 8003664:	68f8      	ldr	r0, [r7, #12]
 8003666:	f000 f8fa 	bl	800385e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800366a:	4603      	mov	r3, r0
 800366c:	2b00      	cmp	r3, #0
 800366e:	d001      	beq.n	8003674 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003670:	2301      	movs	r3, #1
 8003672:	e097      	b.n	80037a4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003674:	2300      	movs	r3, #0
 8003676:	617b      	str	r3, [r7, #20]
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	695b      	ldr	r3, [r3, #20]
 800367e:	617b      	str	r3, [r7, #20]
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	699b      	ldr	r3, [r3, #24]
 8003686:	617b      	str	r3, [r7, #20]
 8003688:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800368a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800368c:	6a39      	ldr	r1, [r7, #32]
 800368e:	68f8      	ldr	r0, [r7, #12]
 8003690:	f000 f964 	bl	800395c <I2C_WaitOnTXEFlagUntilTimeout>
 8003694:	4603      	mov	r3, r0
 8003696:	2b00      	cmp	r3, #0
 8003698:	d00d      	beq.n	80036b6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800369e:	2b04      	cmp	r3, #4
 80036a0:	d107      	bne.n	80036b2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	681a      	ldr	r2, [r3, #0]
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036b0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80036b2:	2301      	movs	r3, #1
 80036b4:	e076      	b.n	80037a4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80036b6:	88fb      	ldrh	r3, [r7, #6]
 80036b8:	2b01      	cmp	r3, #1
 80036ba:	d105      	bne.n	80036c8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80036bc:	893b      	ldrh	r3, [r7, #8]
 80036be:	b2da      	uxtb	r2, r3
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	611a      	str	r2, [r3, #16]
 80036c6:	e021      	b.n	800370c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80036c8:	893b      	ldrh	r3, [r7, #8]
 80036ca:	0a1b      	lsrs	r3, r3, #8
 80036cc:	b29b      	uxth	r3, r3
 80036ce:	b2da      	uxtb	r2, r3
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80036d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036d8:	6a39      	ldr	r1, [r7, #32]
 80036da:	68f8      	ldr	r0, [r7, #12]
 80036dc:	f000 f93e 	bl	800395c <I2C_WaitOnTXEFlagUntilTimeout>
 80036e0:	4603      	mov	r3, r0
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d00d      	beq.n	8003702 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ea:	2b04      	cmp	r3, #4
 80036ec:	d107      	bne.n	80036fe <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	681a      	ldr	r2, [r3, #0]
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036fc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80036fe:	2301      	movs	r3, #1
 8003700:	e050      	b.n	80037a4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003702:	893b      	ldrh	r3, [r7, #8]
 8003704:	b2da      	uxtb	r2, r3
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800370c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800370e:	6a39      	ldr	r1, [r7, #32]
 8003710:	68f8      	ldr	r0, [r7, #12]
 8003712:	f000 f923 	bl	800395c <I2C_WaitOnTXEFlagUntilTimeout>
 8003716:	4603      	mov	r3, r0
 8003718:	2b00      	cmp	r3, #0
 800371a:	d00d      	beq.n	8003738 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003720:	2b04      	cmp	r3, #4
 8003722:	d107      	bne.n	8003734 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	681a      	ldr	r2, [r3, #0]
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003732:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003734:	2301      	movs	r3, #1
 8003736:	e035      	b.n	80037a4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	681a      	ldr	r2, [r3, #0]
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003746:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800374a:	9300      	str	r3, [sp, #0]
 800374c:	6a3b      	ldr	r3, [r7, #32]
 800374e:	2200      	movs	r2, #0
 8003750:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003754:	68f8      	ldr	r0, [r7, #12]
 8003756:	f000 f82b 	bl	80037b0 <I2C_WaitOnFlagUntilTimeout>
 800375a:	4603      	mov	r3, r0
 800375c:	2b00      	cmp	r3, #0
 800375e:	d00d      	beq.n	800377c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800376a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800376e:	d103      	bne.n	8003778 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003776:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003778:	2303      	movs	r3, #3
 800377a:	e013      	b.n	80037a4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800377c:	897b      	ldrh	r3, [r7, #10]
 800377e:	b2db      	uxtb	r3, r3
 8003780:	f043 0301 	orr.w	r3, r3, #1
 8003784:	b2da      	uxtb	r2, r3
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800378c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800378e:	6a3a      	ldr	r2, [r7, #32]
 8003790:	4906      	ldr	r1, [pc, #24]	; (80037ac <I2C_RequestMemoryRead+0x1cc>)
 8003792:	68f8      	ldr	r0, [r7, #12]
 8003794:	f000 f863 	bl	800385e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003798:	4603      	mov	r3, r0
 800379a:	2b00      	cmp	r3, #0
 800379c:	d001      	beq.n	80037a2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800379e:	2301      	movs	r3, #1
 80037a0:	e000      	b.n	80037a4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80037a2:	2300      	movs	r3, #0
}
 80037a4:	4618      	mov	r0, r3
 80037a6:	3718      	adds	r7, #24
 80037a8:	46bd      	mov	sp, r7
 80037aa:	bd80      	pop	{r7, pc}
 80037ac:	00010002 	.word	0x00010002

080037b0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b084      	sub	sp, #16
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	60f8      	str	r0, [r7, #12]
 80037b8:	60b9      	str	r1, [r7, #8]
 80037ba:	603b      	str	r3, [r7, #0]
 80037bc:	4613      	mov	r3, r2
 80037be:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80037c0:	e025      	b.n	800380e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037c8:	d021      	beq.n	800380e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037ca:	f7fe ff5b 	bl	8002684 <HAL_GetTick>
 80037ce:	4602      	mov	r2, r0
 80037d0:	69bb      	ldr	r3, [r7, #24]
 80037d2:	1ad3      	subs	r3, r2, r3
 80037d4:	683a      	ldr	r2, [r7, #0]
 80037d6:	429a      	cmp	r2, r3
 80037d8:	d302      	bcc.n	80037e0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d116      	bne.n	800380e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	2200      	movs	r2, #0
 80037e4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	2220      	movs	r2, #32
 80037ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	2200      	movs	r2, #0
 80037f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037fa:	f043 0220 	orr.w	r2, r3, #32
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	2200      	movs	r2, #0
 8003806:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800380a:	2301      	movs	r3, #1
 800380c:	e023      	b.n	8003856 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800380e:	68bb      	ldr	r3, [r7, #8]
 8003810:	0c1b      	lsrs	r3, r3, #16
 8003812:	b2db      	uxtb	r3, r3
 8003814:	2b01      	cmp	r3, #1
 8003816:	d10d      	bne.n	8003834 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	695b      	ldr	r3, [r3, #20]
 800381e:	43da      	mvns	r2, r3
 8003820:	68bb      	ldr	r3, [r7, #8]
 8003822:	4013      	ands	r3, r2
 8003824:	b29b      	uxth	r3, r3
 8003826:	2b00      	cmp	r3, #0
 8003828:	bf0c      	ite	eq
 800382a:	2301      	moveq	r3, #1
 800382c:	2300      	movne	r3, #0
 800382e:	b2db      	uxtb	r3, r3
 8003830:	461a      	mov	r2, r3
 8003832:	e00c      	b.n	800384e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	699b      	ldr	r3, [r3, #24]
 800383a:	43da      	mvns	r2, r3
 800383c:	68bb      	ldr	r3, [r7, #8]
 800383e:	4013      	ands	r3, r2
 8003840:	b29b      	uxth	r3, r3
 8003842:	2b00      	cmp	r3, #0
 8003844:	bf0c      	ite	eq
 8003846:	2301      	moveq	r3, #1
 8003848:	2300      	movne	r3, #0
 800384a:	b2db      	uxtb	r3, r3
 800384c:	461a      	mov	r2, r3
 800384e:	79fb      	ldrb	r3, [r7, #7]
 8003850:	429a      	cmp	r2, r3
 8003852:	d0b6      	beq.n	80037c2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003854:	2300      	movs	r3, #0
}
 8003856:	4618      	mov	r0, r3
 8003858:	3710      	adds	r7, #16
 800385a:	46bd      	mov	sp, r7
 800385c:	bd80      	pop	{r7, pc}

0800385e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800385e:	b580      	push	{r7, lr}
 8003860:	b084      	sub	sp, #16
 8003862:	af00      	add	r7, sp, #0
 8003864:	60f8      	str	r0, [r7, #12]
 8003866:	60b9      	str	r1, [r7, #8]
 8003868:	607a      	str	r2, [r7, #4]
 800386a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800386c:	e051      	b.n	8003912 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	695b      	ldr	r3, [r3, #20]
 8003874:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003878:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800387c:	d123      	bne.n	80038c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	681a      	ldr	r2, [r3, #0]
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800388c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003896:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	2200      	movs	r2, #0
 800389c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	2220      	movs	r2, #32
 80038a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	2200      	movs	r2, #0
 80038aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038b2:	f043 0204 	orr.w	r2, r3, #4
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	2200      	movs	r2, #0
 80038be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80038c2:	2301      	movs	r3, #1
 80038c4:	e046      	b.n	8003954 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038cc:	d021      	beq.n	8003912 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038ce:	f7fe fed9 	bl	8002684 <HAL_GetTick>
 80038d2:	4602      	mov	r2, r0
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	1ad3      	subs	r3, r2, r3
 80038d8:	687a      	ldr	r2, [r7, #4]
 80038da:	429a      	cmp	r2, r3
 80038dc:	d302      	bcc.n	80038e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d116      	bne.n	8003912 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	2200      	movs	r2, #0
 80038e8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	2220      	movs	r2, #32
 80038ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	2200      	movs	r2, #0
 80038f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038fe:	f043 0220 	orr.w	r2, r3, #32
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	2200      	movs	r2, #0
 800390a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800390e:	2301      	movs	r3, #1
 8003910:	e020      	b.n	8003954 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003912:	68bb      	ldr	r3, [r7, #8]
 8003914:	0c1b      	lsrs	r3, r3, #16
 8003916:	b2db      	uxtb	r3, r3
 8003918:	2b01      	cmp	r3, #1
 800391a:	d10c      	bne.n	8003936 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	695b      	ldr	r3, [r3, #20]
 8003922:	43da      	mvns	r2, r3
 8003924:	68bb      	ldr	r3, [r7, #8]
 8003926:	4013      	ands	r3, r2
 8003928:	b29b      	uxth	r3, r3
 800392a:	2b00      	cmp	r3, #0
 800392c:	bf14      	ite	ne
 800392e:	2301      	movne	r3, #1
 8003930:	2300      	moveq	r3, #0
 8003932:	b2db      	uxtb	r3, r3
 8003934:	e00b      	b.n	800394e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	699b      	ldr	r3, [r3, #24]
 800393c:	43da      	mvns	r2, r3
 800393e:	68bb      	ldr	r3, [r7, #8]
 8003940:	4013      	ands	r3, r2
 8003942:	b29b      	uxth	r3, r3
 8003944:	2b00      	cmp	r3, #0
 8003946:	bf14      	ite	ne
 8003948:	2301      	movne	r3, #1
 800394a:	2300      	moveq	r3, #0
 800394c:	b2db      	uxtb	r3, r3
 800394e:	2b00      	cmp	r3, #0
 8003950:	d18d      	bne.n	800386e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003952:	2300      	movs	r3, #0
}
 8003954:	4618      	mov	r0, r3
 8003956:	3710      	adds	r7, #16
 8003958:	46bd      	mov	sp, r7
 800395a:	bd80      	pop	{r7, pc}

0800395c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b084      	sub	sp, #16
 8003960:	af00      	add	r7, sp, #0
 8003962:	60f8      	str	r0, [r7, #12]
 8003964:	60b9      	str	r1, [r7, #8]
 8003966:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003968:	e02d      	b.n	80039c6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800396a:	68f8      	ldr	r0, [r7, #12]
 800396c:	f000 f8ce 	bl	8003b0c <I2C_IsAcknowledgeFailed>
 8003970:	4603      	mov	r3, r0
 8003972:	2b00      	cmp	r3, #0
 8003974:	d001      	beq.n	800397a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003976:	2301      	movs	r3, #1
 8003978:	e02d      	b.n	80039d6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800397a:	68bb      	ldr	r3, [r7, #8]
 800397c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003980:	d021      	beq.n	80039c6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003982:	f7fe fe7f 	bl	8002684 <HAL_GetTick>
 8003986:	4602      	mov	r2, r0
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	1ad3      	subs	r3, r2, r3
 800398c:	68ba      	ldr	r2, [r7, #8]
 800398e:	429a      	cmp	r2, r3
 8003990:	d302      	bcc.n	8003998 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003992:	68bb      	ldr	r3, [r7, #8]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d116      	bne.n	80039c6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	2200      	movs	r2, #0
 800399c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	2220      	movs	r2, #32
 80039a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	2200      	movs	r2, #0
 80039aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039b2:	f043 0220 	orr.w	r2, r3, #32
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	2200      	movs	r2, #0
 80039be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80039c2:	2301      	movs	r3, #1
 80039c4:	e007      	b.n	80039d6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	695b      	ldr	r3, [r3, #20]
 80039cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039d0:	2b80      	cmp	r3, #128	; 0x80
 80039d2:	d1ca      	bne.n	800396a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80039d4:	2300      	movs	r3, #0
}
 80039d6:	4618      	mov	r0, r3
 80039d8:	3710      	adds	r7, #16
 80039da:	46bd      	mov	sp, r7
 80039dc:	bd80      	pop	{r7, pc}

080039de <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80039de:	b580      	push	{r7, lr}
 80039e0:	b084      	sub	sp, #16
 80039e2:	af00      	add	r7, sp, #0
 80039e4:	60f8      	str	r0, [r7, #12]
 80039e6:	60b9      	str	r1, [r7, #8]
 80039e8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80039ea:	e02d      	b.n	8003a48 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80039ec:	68f8      	ldr	r0, [r7, #12]
 80039ee:	f000 f88d 	bl	8003b0c <I2C_IsAcknowledgeFailed>
 80039f2:	4603      	mov	r3, r0
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d001      	beq.n	80039fc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80039f8:	2301      	movs	r3, #1
 80039fa:	e02d      	b.n	8003a58 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039fc:	68bb      	ldr	r3, [r7, #8]
 80039fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a02:	d021      	beq.n	8003a48 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a04:	f7fe fe3e 	bl	8002684 <HAL_GetTick>
 8003a08:	4602      	mov	r2, r0
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	1ad3      	subs	r3, r2, r3
 8003a0e:	68ba      	ldr	r2, [r7, #8]
 8003a10:	429a      	cmp	r2, r3
 8003a12:	d302      	bcc.n	8003a1a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003a14:	68bb      	ldr	r3, [r7, #8]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d116      	bne.n	8003a48 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	2220      	movs	r2, #32
 8003a24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a34:	f043 0220 	orr.w	r2, r3, #32
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	2200      	movs	r2, #0
 8003a40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003a44:	2301      	movs	r3, #1
 8003a46:	e007      	b.n	8003a58 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	695b      	ldr	r3, [r3, #20]
 8003a4e:	f003 0304 	and.w	r3, r3, #4
 8003a52:	2b04      	cmp	r3, #4
 8003a54:	d1ca      	bne.n	80039ec <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003a56:	2300      	movs	r3, #0
}
 8003a58:	4618      	mov	r0, r3
 8003a5a:	3710      	adds	r7, #16
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	bd80      	pop	{r7, pc}

08003a60 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b084      	sub	sp, #16
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	60f8      	str	r0, [r7, #12]
 8003a68:	60b9      	str	r1, [r7, #8]
 8003a6a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003a6c:	e042      	b.n	8003af4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	695b      	ldr	r3, [r3, #20]
 8003a74:	f003 0310 	and.w	r3, r3, #16
 8003a78:	2b10      	cmp	r3, #16
 8003a7a:	d119      	bne.n	8003ab0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f06f 0210 	mvn.w	r2, #16
 8003a84:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	2200      	movs	r2, #0
 8003a8a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	2220      	movs	r2, #32
 8003a90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	2200      	movs	r2, #0
 8003a98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003aac:	2301      	movs	r3, #1
 8003aae:	e029      	b.n	8003b04 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ab0:	f7fe fde8 	bl	8002684 <HAL_GetTick>
 8003ab4:	4602      	mov	r2, r0
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	1ad3      	subs	r3, r2, r3
 8003aba:	68ba      	ldr	r2, [r7, #8]
 8003abc:	429a      	cmp	r2, r3
 8003abe:	d302      	bcc.n	8003ac6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003ac0:	68bb      	ldr	r3, [r7, #8]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d116      	bne.n	8003af4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	2200      	movs	r2, #0
 8003aca:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	2220      	movs	r2, #32
 8003ad0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ae0:	f043 0220 	orr.w	r2, r3, #32
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	2200      	movs	r2, #0
 8003aec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003af0:	2301      	movs	r3, #1
 8003af2:	e007      	b.n	8003b04 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	695b      	ldr	r3, [r3, #20]
 8003afa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003afe:	2b40      	cmp	r3, #64	; 0x40
 8003b00:	d1b5      	bne.n	8003a6e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003b02:	2300      	movs	r3, #0
}
 8003b04:	4618      	mov	r0, r3
 8003b06:	3710      	adds	r7, #16
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	bd80      	pop	{r7, pc}

08003b0c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003b0c:	b480      	push	{r7}
 8003b0e:	b083      	sub	sp, #12
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	695b      	ldr	r3, [r3, #20]
 8003b1a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b22:	d11b      	bne.n	8003b5c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003b2c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2200      	movs	r2, #0
 8003b32:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2220      	movs	r2, #32
 8003b38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2200      	movs	r2, #0
 8003b40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b48:	f043 0204 	orr.w	r2, r3, #4
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2200      	movs	r2, #0
 8003b54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003b58:	2301      	movs	r3, #1
 8003b5a:	e000      	b.n	8003b5e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003b5c:	2300      	movs	r3, #0
}
 8003b5e:	4618      	mov	r0, r3
 8003b60:	370c      	adds	r7, #12
 8003b62:	46bd      	mov	sp, r7
 8003b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b68:	4770      	bx	lr
	...

08003b6c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b086      	sub	sp, #24
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d101      	bne.n	8003b7e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	e264      	b.n	8004048 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f003 0301 	and.w	r3, r3, #1
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d075      	beq.n	8003c76 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003b8a:	4ba3      	ldr	r3, [pc, #652]	; (8003e18 <HAL_RCC_OscConfig+0x2ac>)
 8003b8c:	689b      	ldr	r3, [r3, #8]
 8003b8e:	f003 030c 	and.w	r3, r3, #12
 8003b92:	2b04      	cmp	r3, #4
 8003b94:	d00c      	beq.n	8003bb0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b96:	4ba0      	ldr	r3, [pc, #640]	; (8003e18 <HAL_RCC_OscConfig+0x2ac>)
 8003b98:	689b      	ldr	r3, [r3, #8]
 8003b9a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003b9e:	2b08      	cmp	r3, #8
 8003ba0:	d112      	bne.n	8003bc8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003ba2:	4b9d      	ldr	r3, [pc, #628]	; (8003e18 <HAL_RCC_OscConfig+0x2ac>)
 8003ba4:	685b      	ldr	r3, [r3, #4]
 8003ba6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003baa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003bae:	d10b      	bne.n	8003bc8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bb0:	4b99      	ldr	r3, [pc, #612]	; (8003e18 <HAL_RCC_OscConfig+0x2ac>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d05b      	beq.n	8003c74 <HAL_RCC_OscConfig+0x108>
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	685b      	ldr	r3, [r3, #4]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d157      	bne.n	8003c74 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003bc4:	2301      	movs	r3, #1
 8003bc6:	e23f      	b.n	8004048 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	685b      	ldr	r3, [r3, #4]
 8003bcc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bd0:	d106      	bne.n	8003be0 <HAL_RCC_OscConfig+0x74>
 8003bd2:	4b91      	ldr	r3, [pc, #580]	; (8003e18 <HAL_RCC_OscConfig+0x2ac>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4a90      	ldr	r2, [pc, #576]	; (8003e18 <HAL_RCC_OscConfig+0x2ac>)
 8003bd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bdc:	6013      	str	r3, [r2, #0]
 8003bde:	e01d      	b.n	8003c1c <HAL_RCC_OscConfig+0xb0>
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	685b      	ldr	r3, [r3, #4]
 8003be4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003be8:	d10c      	bne.n	8003c04 <HAL_RCC_OscConfig+0x98>
 8003bea:	4b8b      	ldr	r3, [pc, #556]	; (8003e18 <HAL_RCC_OscConfig+0x2ac>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4a8a      	ldr	r2, [pc, #552]	; (8003e18 <HAL_RCC_OscConfig+0x2ac>)
 8003bf0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003bf4:	6013      	str	r3, [r2, #0]
 8003bf6:	4b88      	ldr	r3, [pc, #544]	; (8003e18 <HAL_RCC_OscConfig+0x2ac>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4a87      	ldr	r2, [pc, #540]	; (8003e18 <HAL_RCC_OscConfig+0x2ac>)
 8003bfc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c00:	6013      	str	r3, [r2, #0]
 8003c02:	e00b      	b.n	8003c1c <HAL_RCC_OscConfig+0xb0>
 8003c04:	4b84      	ldr	r3, [pc, #528]	; (8003e18 <HAL_RCC_OscConfig+0x2ac>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4a83      	ldr	r2, [pc, #524]	; (8003e18 <HAL_RCC_OscConfig+0x2ac>)
 8003c0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c0e:	6013      	str	r3, [r2, #0]
 8003c10:	4b81      	ldr	r3, [pc, #516]	; (8003e18 <HAL_RCC_OscConfig+0x2ac>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	4a80      	ldr	r2, [pc, #512]	; (8003e18 <HAL_RCC_OscConfig+0x2ac>)
 8003c16:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c1a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	685b      	ldr	r3, [r3, #4]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d013      	beq.n	8003c4c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c24:	f7fe fd2e 	bl	8002684 <HAL_GetTick>
 8003c28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c2a:	e008      	b.n	8003c3e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c2c:	f7fe fd2a 	bl	8002684 <HAL_GetTick>
 8003c30:	4602      	mov	r2, r0
 8003c32:	693b      	ldr	r3, [r7, #16]
 8003c34:	1ad3      	subs	r3, r2, r3
 8003c36:	2b64      	cmp	r3, #100	; 0x64
 8003c38:	d901      	bls.n	8003c3e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003c3a:	2303      	movs	r3, #3
 8003c3c:	e204      	b.n	8004048 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c3e:	4b76      	ldr	r3, [pc, #472]	; (8003e18 <HAL_RCC_OscConfig+0x2ac>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d0f0      	beq.n	8003c2c <HAL_RCC_OscConfig+0xc0>
 8003c4a:	e014      	b.n	8003c76 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c4c:	f7fe fd1a 	bl	8002684 <HAL_GetTick>
 8003c50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c52:	e008      	b.n	8003c66 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c54:	f7fe fd16 	bl	8002684 <HAL_GetTick>
 8003c58:	4602      	mov	r2, r0
 8003c5a:	693b      	ldr	r3, [r7, #16]
 8003c5c:	1ad3      	subs	r3, r2, r3
 8003c5e:	2b64      	cmp	r3, #100	; 0x64
 8003c60:	d901      	bls.n	8003c66 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003c62:	2303      	movs	r3, #3
 8003c64:	e1f0      	b.n	8004048 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c66:	4b6c      	ldr	r3, [pc, #432]	; (8003e18 <HAL_RCC_OscConfig+0x2ac>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d1f0      	bne.n	8003c54 <HAL_RCC_OscConfig+0xe8>
 8003c72:	e000      	b.n	8003c76 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c74:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f003 0302 	and.w	r3, r3, #2
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d063      	beq.n	8003d4a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003c82:	4b65      	ldr	r3, [pc, #404]	; (8003e18 <HAL_RCC_OscConfig+0x2ac>)
 8003c84:	689b      	ldr	r3, [r3, #8]
 8003c86:	f003 030c 	and.w	r3, r3, #12
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d00b      	beq.n	8003ca6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c8e:	4b62      	ldr	r3, [pc, #392]	; (8003e18 <HAL_RCC_OscConfig+0x2ac>)
 8003c90:	689b      	ldr	r3, [r3, #8]
 8003c92:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003c96:	2b08      	cmp	r3, #8
 8003c98:	d11c      	bne.n	8003cd4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c9a:	4b5f      	ldr	r3, [pc, #380]	; (8003e18 <HAL_RCC_OscConfig+0x2ac>)
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d116      	bne.n	8003cd4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ca6:	4b5c      	ldr	r3, [pc, #368]	; (8003e18 <HAL_RCC_OscConfig+0x2ac>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f003 0302 	and.w	r3, r3, #2
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d005      	beq.n	8003cbe <HAL_RCC_OscConfig+0x152>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	68db      	ldr	r3, [r3, #12]
 8003cb6:	2b01      	cmp	r3, #1
 8003cb8:	d001      	beq.n	8003cbe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003cba:	2301      	movs	r3, #1
 8003cbc:	e1c4      	b.n	8004048 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cbe:	4b56      	ldr	r3, [pc, #344]	; (8003e18 <HAL_RCC_OscConfig+0x2ac>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	691b      	ldr	r3, [r3, #16]
 8003cca:	00db      	lsls	r3, r3, #3
 8003ccc:	4952      	ldr	r1, [pc, #328]	; (8003e18 <HAL_RCC_OscConfig+0x2ac>)
 8003cce:	4313      	orrs	r3, r2
 8003cd0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003cd2:	e03a      	b.n	8003d4a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	68db      	ldr	r3, [r3, #12]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d020      	beq.n	8003d1e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003cdc:	4b4f      	ldr	r3, [pc, #316]	; (8003e1c <HAL_RCC_OscConfig+0x2b0>)
 8003cde:	2201      	movs	r2, #1
 8003ce0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ce2:	f7fe fccf 	bl	8002684 <HAL_GetTick>
 8003ce6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ce8:	e008      	b.n	8003cfc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003cea:	f7fe fccb 	bl	8002684 <HAL_GetTick>
 8003cee:	4602      	mov	r2, r0
 8003cf0:	693b      	ldr	r3, [r7, #16]
 8003cf2:	1ad3      	subs	r3, r2, r3
 8003cf4:	2b02      	cmp	r3, #2
 8003cf6:	d901      	bls.n	8003cfc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003cf8:	2303      	movs	r3, #3
 8003cfa:	e1a5      	b.n	8004048 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cfc:	4b46      	ldr	r3, [pc, #280]	; (8003e18 <HAL_RCC_OscConfig+0x2ac>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f003 0302 	and.w	r3, r3, #2
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d0f0      	beq.n	8003cea <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d08:	4b43      	ldr	r3, [pc, #268]	; (8003e18 <HAL_RCC_OscConfig+0x2ac>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	691b      	ldr	r3, [r3, #16]
 8003d14:	00db      	lsls	r3, r3, #3
 8003d16:	4940      	ldr	r1, [pc, #256]	; (8003e18 <HAL_RCC_OscConfig+0x2ac>)
 8003d18:	4313      	orrs	r3, r2
 8003d1a:	600b      	str	r3, [r1, #0]
 8003d1c:	e015      	b.n	8003d4a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d1e:	4b3f      	ldr	r3, [pc, #252]	; (8003e1c <HAL_RCC_OscConfig+0x2b0>)
 8003d20:	2200      	movs	r2, #0
 8003d22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d24:	f7fe fcae 	bl	8002684 <HAL_GetTick>
 8003d28:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d2a:	e008      	b.n	8003d3e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d2c:	f7fe fcaa 	bl	8002684 <HAL_GetTick>
 8003d30:	4602      	mov	r2, r0
 8003d32:	693b      	ldr	r3, [r7, #16]
 8003d34:	1ad3      	subs	r3, r2, r3
 8003d36:	2b02      	cmp	r3, #2
 8003d38:	d901      	bls.n	8003d3e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003d3a:	2303      	movs	r3, #3
 8003d3c:	e184      	b.n	8004048 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d3e:	4b36      	ldr	r3, [pc, #216]	; (8003e18 <HAL_RCC_OscConfig+0x2ac>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f003 0302 	and.w	r3, r3, #2
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d1f0      	bne.n	8003d2c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f003 0308 	and.w	r3, r3, #8
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d030      	beq.n	8003db8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	695b      	ldr	r3, [r3, #20]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d016      	beq.n	8003d8c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d5e:	4b30      	ldr	r3, [pc, #192]	; (8003e20 <HAL_RCC_OscConfig+0x2b4>)
 8003d60:	2201      	movs	r2, #1
 8003d62:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d64:	f7fe fc8e 	bl	8002684 <HAL_GetTick>
 8003d68:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d6a:	e008      	b.n	8003d7e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d6c:	f7fe fc8a 	bl	8002684 <HAL_GetTick>
 8003d70:	4602      	mov	r2, r0
 8003d72:	693b      	ldr	r3, [r7, #16]
 8003d74:	1ad3      	subs	r3, r2, r3
 8003d76:	2b02      	cmp	r3, #2
 8003d78:	d901      	bls.n	8003d7e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003d7a:	2303      	movs	r3, #3
 8003d7c:	e164      	b.n	8004048 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d7e:	4b26      	ldr	r3, [pc, #152]	; (8003e18 <HAL_RCC_OscConfig+0x2ac>)
 8003d80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d82:	f003 0302 	and.w	r3, r3, #2
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d0f0      	beq.n	8003d6c <HAL_RCC_OscConfig+0x200>
 8003d8a:	e015      	b.n	8003db8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d8c:	4b24      	ldr	r3, [pc, #144]	; (8003e20 <HAL_RCC_OscConfig+0x2b4>)
 8003d8e:	2200      	movs	r2, #0
 8003d90:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d92:	f7fe fc77 	bl	8002684 <HAL_GetTick>
 8003d96:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d98:	e008      	b.n	8003dac <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d9a:	f7fe fc73 	bl	8002684 <HAL_GetTick>
 8003d9e:	4602      	mov	r2, r0
 8003da0:	693b      	ldr	r3, [r7, #16]
 8003da2:	1ad3      	subs	r3, r2, r3
 8003da4:	2b02      	cmp	r3, #2
 8003da6:	d901      	bls.n	8003dac <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003da8:	2303      	movs	r3, #3
 8003daa:	e14d      	b.n	8004048 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003dac:	4b1a      	ldr	r3, [pc, #104]	; (8003e18 <HAL_RCC_OscConfig+0x2ac>)
 8003dae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003db0:	f003 0302 	and.w	r3, r3, #2
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d1f0      	bne.n	8003d9a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f003 0304 	and.w	r3, r3, #4
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	f000 80a0 	beq.w	8003f06 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003dca:	4b13      	ldr	r3, [pc, #76]	; (8003e18 <HAL_RCC_OscConfig+0x2ac>)
 8003dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d10f      	bne.n	8003df6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	60bb      	str	r3, [r7, #8]
 8003dda:	4b0f      	ldr	r3, [pc, #60]	; (8003e18 <HAL_RCC_OscConfig+0x2ac>)
 8003ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dde:	4a0e      	ldr	r2, [pc, #56]	; (8003e18 <HAL_RCC_OscConfig+0x2ac>)
 8003de0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003de4:	6413      	str	r3, [r2, #64]	; 0x40
 8003de6:	4b0c      	ldr	r3, [pc, #48]	; (8003e18 <HAL_RCC_OscConfig+0x2ac>)
 8003de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dee:	60bb      	str	r3, [r7, #8]
 8003df0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003df2:	2301      	movs	r3, #1
 8003df4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003df6:	4b0b      	ldr	r3, [pc, #44]	; (8003e24 <HAL_RCC_OscConfig+0x2b8>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d121      	bne.n	8003e46 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e02:	4b08      	ldr	r3, [pc, #32]	; (8003e24 <HAL_RCC_OscConfig+0x2b8>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	4a07      	ldr	r2, [pc, #28]	; (8003e24 <HAL_RCC_OscConfig+0x2b8>)
 8003e08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e0c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e0e:	f7fe fc39 	bl	8002684 <HAL_GetTick>
 8003e12:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e14:	e011      	b.n	8003e3a <HAL_RCC_OscConfig+0x2ce>
 8003e16:	bf00      	nop
 8003e18:	40023800 	.word	0x40023800
 8003e1c:	42470000 	.word	0x42470000
 8003e20:	42470e80 	.word	0x42470e80
 8003e24:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e28:	f7fe fc2c 	bl	8002684 <HAL_GetTick>
 8003e2c:	4602      	mov	r2, r0
 8003e2e:	693b      	ldr	r3, [r7, #16]
 8003e30:	1ad3      	subs	r3, r2, r3
 8003e32:	2b02      	cmp	r3, #2
 8003e34:	d901      	bls.n	8003e3a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003e36:	2303      	movs	r3, #3
 8003e38:	e106      	b.n	8004048 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e3a:	4b85      	ldr	r3, [pc, #532]	; (8004050 <HAL_RCC_OscConfig+0x4e4>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d0f0      	beq.n	8003e28 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	689b      	ldr	r3, [r3, #8]
 8003e4a:	2b01      	cmp	r3, #1
 8003e4c:	d106      	bne.n	8003e5c <HAL_RCC_OscConfig+0x2f0>
 8003e4e:	4b81      	ldr	r3, [pc, #516]	; (8004054 <HAL_RCC_OscConfig+0x4e8>)
 8003e50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e52:	4a80      	ldr	r2, [pc, #512]	; (8004054 <HAL_RCC_OscConfig+0x4e8>)
 8003e54:	f043 0301 	orr.w	r3, r3, #1
 8003e58:	6713      	str	r3, [r2, #112]	; 0x70
 8003e5a:	e01c      	b.n	8003e96 <HAL_RCC_OscConfig+0x32a>
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	689b      	ldr	r3, [r3, #8]
 8003e60:	2b05      	cmp	r3, #5
 8003e62:	d10c      	bne.n	8003e7e <HAL_RCC_OscConfig+0x312>
 8003e64:	4b7b      	ldr	r3, [pc, #492]	; (8004054 <HAL_RCC_OscConfig+0x4e8>)
 8003e66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e68:	4a7a      	ldr	r2, [pc, #488]	; (8004054 <HAL_RCC_OscConfig+0x4e8>)
 8003e6a:	f043 0304 	orr.w	r3, r3, #4
 8003e6e:	6713      	str	r3, [r2, #112]	; 0x70
 8003e70:	4b78      	ldr	r3, [pc, #480]	; (8004054 <HAL_RCC_OscConfig+0x4e8>)
 8003e72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e74:	4a77      	ldr	r2, [pc, #476]	; (8004054 <HAL_RCC_OscConfig+0x4e8>)
 8003e76:	f043 0301 	orr.w	r3, r3, #1
 8003e7a:	6713      	str	r3, [r2, #112]	; 0x70
 8003e7c:	e00b      	b.n	8003e96 <HAL_RCC_OscConfig+0x32a>
 8003e7e:	4b75      	ldr	r3, [pc, #468]	; (8004054 <HAL_RCC_OscConfig+0x4e8>)
 8003e80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e82:	4a74      	ldr	r2, [pc, #464]	; (8004054 <HAL_RCC_OscConfig+0x4e8>)
 8003e84:	f023 0301 	bic.w	r3, r3, #1
 8003e88:	6713      	str	r3, [r2, #112]	; 0x70
 8003e8a:	4b72      	ldr	r3, [pc, #456]	; (8004054 <HAL_RCC_OscConfig+0x4e8>)
 8003e8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e8e:	4a71      	ldr	r2, [pc, #452]	; (8004054 <HAL_RCC_OscConfig+0x4e8>)
 8003e90:	f023 0304 	bic.w	r3, r3, #4
 8003e94:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	689b      	ldr	r3, [r3, #8]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d015      	beq.n	8003eca <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e9e:	f7fe fbf1 	bl	8002684 <HAL_GetTick>
 8003ea2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ea4:	e00a      	b.n	8003ebc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ea6:	f7fe fbed 	bl	8002684 <HAL_GetTick>
 8003eaa:	4602      	mov	r2, r0
 8003eac:	693b      	ldr	r3, [r7, #16]
 8003eae:	1ad3      	subs	r3, r2, r3
 8003eb0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d901      	bls.n	8003ebc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003eb8:	2303      	movs	r3, #3
 8003eba:	e0c5      	b.n	8004048 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ebc:	4b65      	ldr	r3, [pc, #404]	; (8004054 <HAL_RCC_OscConfig+0x4e8>)
 8003ebe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ec0:	f003 0302 	and.w	r3, r3, #2
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d0ee      	beq.n	8003ea6 <HAL_RCC_OscConfig+0x33a>
 8003ec8:	e014      	b.n	8003ef4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003eca:	f7fe fbdb 	bl	8002684 <HAL_GetTick>
 8003ece:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ed0:	e00a      	b.n	8003ee8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ed2:	f7fe fbd7 	bl	8002684 <HAL_GetTick>
 8003ed6:	4602      	mov	r2, r0
 8003ed8:	693b      	ldr	r3, [r7, #16]
 8003eda:	1ad3      	subs	r3, r2, r3
 8003edc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d901      	bls.n	8003ee8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003ee4:	2303      	movs	r3, #3
 8003ee6:	e0af      	b.n	8004048 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ee8:	4b5a      	ldr	r3, [pc, #360]	; (8004054 <HAL_RCC_OscConfig+0x4e8>)
 8003eea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eec:	f003 0302 	and.w	r3, r3, #2
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d1ee      	bne.n	8003ed2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003ef4:	7dfb      	ldrb	r3, [r7, #23]
 8003ef6:	2b01      	cmp	r3, #1
 8003ef8:	d105      	bne.n	8003f06 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003efa:	4b56      	ldr	r3, [pc, #344]	; (8004054 <HAL_RCC_OscConfig+0x4e8>)
 8003efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003efe:	4a55      	ldr	r2, [pc, #340]	; (8004054 <HAL_RCC_OscConfig+0x4e8>)
 8003f00:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f04:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	699b      	ldr	r3, [r3, #24]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	f000 809b 	beq.w	8004046 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003f10:	4b50      	ldr	r3, [pc, #320]	; (8004054 <HAL_RCC_OscConfig+0x4e8>)
 8003f12:	689b      	ldr	r3, [r3, #8]
 8003f14:	f003 030c 	and.w	r3, r3, #12
 8003f18:	2b08      	cmp	r3, #8
 8003f1a:	d05c      	beq.n	8003fd6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	699b      	ldr	r3, [r3, #24]
 8003f20:	2b02      	cmp	r3, #2
 8003f22:	d141      	bne.n	8003fa8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f24:	4b4c      	ldr	r3, [pc, #304]	; (8004058 <HAL_RCC_OscConfig+0x4ec>)
 8003f26:	2200      	movs	r2, #0
 8003f28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f2a:	f7fe fbab 	bl	8002684 <HAL_GetTick>
 8003f2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f30:	e008      	b.n	8003f44 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f32:	f7fe fba7 	bl	8002684 <HAL_GetTick>
 8003f36:	4602      	mov	r2, r0
 8003f38:	693b      	ldr	r3, [r7, #16]
 8003f3a:	1ad3      	subs	r3, r2, r3
 8003f3c:	2b02      	cmp	r3, #2
 8003f3e:	d901      	bls.n	8003f44 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003f40:	2303      	movs	r3, #3
 8003f42:	e081      	b.n	8004048 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f44:	4b43      	ldr	r3, [pc, #268]	; (8004054 <HAL_RCC_OscConfig+0x4e8>)
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d1f0      	bne.n	8003f32 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	69da      	ldr	r2, [r3, #28]
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6a1b      	ldr	r3, [r3, #32]
 8003f58:	431a      	orrs	r2, r3
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f5e:	019b      	lsls	r3, r3, #6
 8003f60:	431a      	orrs	r2, r3
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f66:	085b      	lsrs	r3, r3, #1
 8003f68:	3b01      	subs	r3, #1
 8003f6a:	041b      	lsls	r3, r3, #16
 8003f6c:	431a      	orrs	r2, r3
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f72:	061b      	lsls	r3, r3, #24
 8003f74:	4937      	ldr	r1, [pc, #220]	; (8004054 <HAL_RCC_OscConfig+0x4e8>)
 8003f76:	4313      	orrs	r3, r2
 8003f78:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f7a:	4b37      	ldr	r3, [pc, #220]	; (8004058 <HAL_RCC_OscConfig+0x4ec>)
 8003f7c:	2201      	movs	r2, #1
 8003f7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f80:	f7fe fb80 	bl	8002684 <HAL_GetTick>
 8003f84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f86:	e008      	b.n	8003f9a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f88:	f7fe fb7c 	bl	8002684 <HAL_GetTick>
 8003f8c:	4602      	mov	r2, r0
 8003f8e:	693b      	ldr	r3, [r7, #16]
 8003f90:	1ad3      	subs	r3, r2, r3
 8003f92:	2b02      	cmp	r3, #2
 8003f94:	d901      	bls.n	8003f9a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003f96:	2303      	movs	r3, #3
 8003f98:	e056      	b.n	8004048 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f9a:	4b2e      	ldr	r3, [pc, #184]	; (8004054 <HAL_RCC_OscConfig+0x4e8>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d0f0      	beq.n	8003f88 <HAL_RCC_OscConfig+0x41c>
 8003fa6:	e04e      	b.n	8004046 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fa8:	4b2b      	ldr	r3, [pc, #172]	; (8004058 <HAL_RCC_OscConfig+0x4ec>)
 8003faa:	2200      	movs	r2, #0
 8003fac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fae:	f7fe fb69 	bl	8002684 <HAL_GetTick>
 8003fb2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fb4:	e008      	b.n	8003fc8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fb6:	f7fe fb65 	bl	8002684 <HAL_GetTick>
 8003fba:	4602      	mov	r2, r0
 8003fbc:	693b      	ldr	r3, [r7, #16]
 8003fbe:	1ad3      	subs	r3, r2, r3
 8003fc0:	2b02      	cmp	r3, #2
 8003fc2:	d901      	bls.n	8003fc8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003fc4:	2303      	movs	r3, #3
 8003fc6:	e03f      	b.n	8004048 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fc8:	4b22      	ldr	r3, [pc, #136]	; (8004054 <HAL_RCC_OscConfig+0x4e8>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d1f0      	bne.n	8003fb6 <HAL_RCC_OscConfig+0x44a>
 8003fd4:	e037      	b.n	8004046 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	699b      	ldr	r3, [r3, #24]
 8003fda:	2b01      	cmp	r3, #1
 8003fdc:	d101      	bne.n	8003fe2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003fde:	2301      	movs	r3, #1
 8003fe0:	e032      	b.n	8004048 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003fe2:	4b1c      	ldr	r3, [pc, #112]	; (8004054 <HAL_RCC_OscConfig+0x4e8>)
 8003fe4:	685b      	ldr	r3, [r3, #4]
 8003fe6:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	699b      	ldr	r3, [r3, #24]
 8003fec:	2b01      	cmp	r3, #1
 8003fee:	d028      	beq.n	8004042 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ffa:	429a      	cmp	r2, r3
 8003ffc:	d121      	bne.n	8004042 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004008:	429a      	cmp	r2, r3
 800400a:	d11a      	bne.n	8004042 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800400c:	68fa      	ldr	r2, [r7, #12]
 800400e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004012:	4013      	ands	r3, r2
 8004014:	687a      	ldr	r2, [r7, #4]
 8004016:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004018:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800401a:	4293      	cmp	r3, r2
 800401c:	d111      	bne.n	8004042 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004028:	085b      	lsrs	r3, r3, #1
 800402a:	3b01      	subs	r3, #1
 800402c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800402e:	429a      	cmp	r2, r3
 8004030:	d107      	bne.n	8004042 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800403c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800403e:	429a      	cmp	r2, r3
 8004040:	d001      	beq.n	8004046 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8004042:	2301      	movs	r3, #1
 8004044:	e000      	b.n	8004048 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8004046:	2300      	movs	r3, #0
}
 8004048:	4618      	mov	r0, r3
 800404a:	3718      	adds	r7, #24
 800404c:	46bd      	mov	sp, r7
 800404e:	bd80      	pop	{r7, pc}
 8004050:	40007000 	.word	0x40007000
 8004054:	40023800 	.word	0x40023800
 8004058:	42470060 	.word	0x42470060

0800405c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b084      	sub	sp, #16
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
 8004064:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d101      	bne.n	8004070 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800406c:	2301      	movs	r3, #1
 800406e:	e0cc      	b.n	800420a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004070:	4b68      	ldr	r3, [pc, #416]	; (8004214 <HAL_RCC_ClockConfig+0x1b8>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f003 0307 	and.w	r3, r3, #7
 8004078:	683a      	ldr	r2, [r7, #0]
 800407a:	429a      	cmp	r2, r3
 800407c:	d90c      	bls.n	8004098 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800407e:	4b65      	ldr	r3, [pc, #404]	; (8004214 <HAL_RCC_ClockConfig+0x1b8>)
 8004080:	683a      	ldr	r2, [r7, #0]
 8004082:	b2d2      	uxtb	r2, r2
 8004084:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004086:	4b63      	ldr	r3, [pc, #396]	; (8004214 <HAL_RCC_ClockConfig+0x1b8>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f003 0307 	and.w	r3, r3, #7
 800408e:	683a      	ldr	r2, [r7, #0]
 8004090:	429a      	cmp	r2, r3
 8004092:	d001      	beq.n	8004098 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004094:	2301      	movs	r3, #1
 8004096:	e0b8      	b.n	800420a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f003 0302 	and.w	r3, r3, #2
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d020      	beq.n	80040e6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f003 0304 	and.w	r3, r3, #4
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d005      	beq.n	80040bc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80040b0:	4b59      	ldr	r3, [pc, #356]	; (8004218 <HAL_RCC_ClockConfig+0x1bc>)
 80040b2:	689b      	ldr	r3, [r3, #8]
 80040b4:	4a58      	ldr	r2, [pc, #352]	; (8004218 <HAL_RCC_ClockConfig+0x1bc>)
 80040b6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80040ba:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f003 0308 	and.w	r3, r3, #8
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d005      	beq.n	80040d4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80040c8:	4b53      	ldr	r3, [pc, #332]	; (8004218 <HAL_RCC_ClockConfig+0x1bc>)
 80040ca:	689b      	ldr	r3, [r3, #8]
 80040cc:	4a52      	ldr	r2, [pc, #328]	; (8004218 <HAL_RCC_ClockConfig+0x1bc>)
 80040ce:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80040d2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80040d4:	4b50      	ldr	r3, [pc, #320]	; (8004218 <HAL_RCC_ClockConfig+0x1bc>)
 80040d6:	689b      	ldr	r3, [r3, #8]
 80040d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	689b      	ldr	r3, [r3, #8]
 80040e0:	494d      	ldr	r1, [pc, #308]	; (8004218 <HAL_RCC_ClockConfig+0x1bc>)
 80040e2:	4313      	orrs	r3, r2
 80040e4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f003 0301 	and.w	r3, r3, #1
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d044      	beq.n	800417c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	685b      	ldr	r3, [r3, #4]
 80040f6:	2b01      	cmp	r3, #1
 80040f8:	d107      	bne.n	800410a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040fa:	4b47      	ldr	r3, [pc, #284]	; (8004218 <HAL_RCC_ClockConfig+0x1bc>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004102:	2b00      	cmp	r3, #0
 8004104:	d119      	bne.n	800413a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004106:	2301      	movs	r3, #1
 8004108:	e07f      	b.n	800420a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	685b      	ldr	r3, [r3, #4]
 800410e:	2b02      	cmp	r3, #2
 8004110:	d003      	beq.n	800411a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004116:	2b03      	cmp	r3, #3
 8004118:	d107      	bne.n	800412a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800411a:	4b3f      	ldr	r3, [pc, #252]	; (8004218 <HAL_RCC_ClockConfig+0x1bc>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004122:	2b00      	cmp	r3, #0
 8004124:	d109      	bne.n	800413a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004126:	2301      	movs	r3, #1
 8004128:	e06f      	b.n	800420a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800412a:	4b3b      	ldr	r3, [pc, #236]	; (8004218 <HAL_RCC_ClockConfig+0x1bc>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f003 0302 	and.w	r3, r3, #2
 8004132:	2b00      	cmp	r3, #0
 8004134:	d101      	bne.n	800413a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004136:	2301      	movs	r3, #1
 8004138:	e067      	b.n	800420a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800413a:	4b37      	ldr	r3, [pc, #220]	; (8004218 <HAL_RCC_ClockConfig+0x1bc>)
 800413c:	689b      	ldr	r3, [r3, #8]
 800413e:	f023 0203 	bic.w	r2, r3, #3
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	685b      	ldr	r3, [r3, #4]
 8004146:	4934      	ldr	r1, [pc, #208]	; (8004218 <HAL_RCC_ClockConfig+0x1bc>)
 8004148:	4313      	orrs	r3, r2
 800414a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800414c:	f7fe fa9a 	bl	8002684 <HAL_GetTick>
 8004150:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004152:	e00a      	b.n	800416a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004154:	f7fe fa96 	bl	8002684 <HAL_GetTick>
 8004158:	4602      	mov	r2, r0
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	1ad3      	subs	r3, r2, r3
 800415e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004162:	4293      	cmp	r3, r2
 8004164:	d901      	bls.n	800416a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004166:	2303      	movs	r3, #3
 8004168:	e04f      	b.n	800420a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800416a:	4b2b      	ldr	r3, [pc, #172]	; (8004218 <HAL_RCC_ClockConfig+0x1bc>)
 800416c:	689b      	ldr	r3, [r3, #8]
 800416e:	f003 020c 	and.w	r2, r3, #12
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	685b      	ldr	r3, [r3, #4]
 8004176:	009b      	lsls	r3, r3, #2
 8004178:	429a      	cmp	r2, r3
 800417a:	d1eb      	bne.n	8004154 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800417c:	4b25      	ldr	r3, [pc, #148]	; (8004214 <HAL_RCC_ClockConfig+0x1b8>)
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f003 0307 	and.w	r3, r3, #7
 8004184:	683a      	ldr	r2, [r7, #0]
 8004186:	429a      	cmp	r2, r3
 8004188:	d20c      	bcs.n	80041a4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800418a:	4b22      	ldr	r3, [pc, #136]	; (8004214 <HAL_RCC_ClockConfig+0x1b8>)
 800418c:	683a      	ldr	r2, [r7, #0]
 800418e:	b2d2      	uxtb	r2, r2
 8004190:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004192:	4b20      	ldr	r3, [pc, #128]	; (8004214 <HAL_RCC_ClockConfig+0x1b8>)
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f003 0307 	and.w	r3, r3, #7
 800419a:	683a      	ldr	r2, [r7, #0]
 800419c:	429a      	cmp	r2, r3
 800419e:	d001      	beq.n	80041a4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80041a0:	2301      	movs	r3, #1
 80041a2:	e032      	b.n	800420a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f003 0304 	and.w	r3, r3, #4
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d008      	beq.n	80041c2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80041b0:	4b19      	ldr	r3, [pc, #100]	; (8004218 <HAL_RCC_ClockConfig+0x1bc>)
 80041b2:	689b      	ldr	r3, [r3, #8]
 80041b4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	68db      	ldr	r3, [r3, #12]
 80041bc:	4916      	ldr	r1, [pc, #88]	; (8004218 <HAL_RCC_ClockConfig+0x1bc>)
 80041be:	4313      	orrs	r3, r2
 80041c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f003 0308 	and.w	r3, r3, #8
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d009      	beq.n	80041e2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80041ce:	4b12      	ldr	r3, [pc, #72]	; (8004218 <HAL_RCC_ClockConfig+0x1bc>)
 80041d0:	689b      	ldr	r3, [r3, #8]
 80041d2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	691b      	ldr	r3, [r3, #16]
 80041da:	00db      	lsls	r3, r3, #3
 80041dc:	490e      	ldr	r1, [pc, #56]	; (8004218 <HAL_RCC_ClockConfig+0x1bc>)
 80041de:	4313      	orrs	r3, r2
 80041e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80041e2:	f000 f821 	bl	8004228 <HAL_RCC_GetSysClockFreq>
 80041e6:	4602      	mov	r2, r0
 80041e8:	4b0b      	ldr	r3, [pc, #44]	; (8004218 <HAL_RCC_ClockConfig+0x1bc>)
 80041ea:	689b      	ldr	r3, [r3, #8]
 80041ec:	091b      	lsrs	r3, r3, #4
 80041ee:	f003 030f 	and.w	r3, r3, #15
 80041f2:	490a      	ldr	r1, [pc, #40]	; (800421c <HAL_RCC_ClockConfig+0x1c0>)
 80041f4:	5ccb      	ldrb	r3, [r1, r3]
 80041f6:	fa22 f303 	lsr.w	r3, r2, r3
 80041fa:	4a09      	ldr	r2, [pc, #36]	; (8004220 <HAL_RCC_ClockConfig+0x1c4>)
 80041fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80041fe:	4b09      	ldr	r3, [pc, #36]	; (8004224 <HAL_RCC_ClockConfig+0x1c8>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	4618      	mov	r0, r3
 8004204:	f7fe f9fa 	bl	80025fc <HAL_InitTick>

  return HAL_OK;
 8004208:	2300      	movs	r3, #0
}
 800420a:	4618      	mov	r0, r3
 800420c:	3710      	adds	r7, #16
 800420e:	46bd      	mov	sp, r7
 8004210:	bd80      	pop	{r7, pc}
 8004212:	bf00      	nop
 8004214:	40023c00 	.word	0x40023c00
 8004218:	40023800 	.word	0x40023800
 800421c:	08006174 	.word	0x08006174
 8004220:	20000008 	.word	0x20000008
 8004224:	2000000c 	.word	0x2000000c

08004228 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004228:	b5b0      	push	{r4, r5, r7, lr}
 800422a:	b084      	sub	sp, #16
 800422c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800422e:	2100      	movs	r1, #0
 8004230:	6079      	str	r1, [r7, #4]
 8004232:	2100      	movs	r1, #0
 8004234:	60f9      	str	r1, [r7, #12]
 8004236:	2100      	movs	r1, #0
 8004238:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800423a:	2100      	movs	r1, #0
 800423c:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800423e:	4952      	ldr	r1, [pc, #328]	; (8004388 <HAL_RCC_GetSysClockFreq+0x160>)
 8004240:	6889      	ldr	r1, [r1, #8]
 8004242:	f001 010c 	and.w	r1, r1, #12
 8004246:	2908      	cmp	r1, #8
 8004248:	d00d      	beq.n	8004266 <HAL_RCC_GetSysClockFreq+0x3e>
 800424a:	2908      	cmp	r1, #8
 800424c:	f200 8094 	bhi.w	8004378 <HAL_RCC_GetSysClockFreq+0x150>
 8004250:	2900      	cmp	r1, #0
 8004252:	d002      	beq.n	800425a <HAL_RCC_GetSysClockFreq+0x32>
 8004254:	2904      	cmp	r1, #4
 8004256:	d003      	beq.n	8004260 <HAL_RCC_GetSysClockFreq+0x38>
 8004258:	e08e      	b.n	8004378 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800425a:	4b4c      	ldr	r3, [pc, #304]	; (800438c <HAL_RCC_GetSysClockFreq+0x164>)
 800425c:	60bb      	str	r3, [r7, #8]
       break;
 800425e:	e08e      	b.n	800437e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004260:	4b4b      	ldr	r3, [pc, #300]	; (8004390 <HAL_RCC_GetSysClockFreq+0x168>)
 8004262:	60bb      	str	r3, [r7, #8]
      break;
 8004264:	e08b      	b.n	800437e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004266:	4948      	ldr	r1, [pc, #288]	; (8004388 <HAL_RCC_GetSysClockFreq+0x160>)
 8004268:	6849      	ldr	r1, [r1, #4]
 800426a:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800426e:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004270:	4945      	ldr	r1, [pc, #276]	; (8004388 <HAL_RCC_GetSysClockFreq+0x160>)
 8004272:	6849      	ldr	r1, [r1, #4]
 8004274:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8004278:	2900      	cmp	r1, #0
 800427a:	d024      	beq.n	80042c6 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800427c:	4942      	ldr	r1, [pc, #264]	; (8004388 <HAL_RCC_GetSysClockFreq+0x160>)
 800427e:	6849      	ldr	r1, [r1, #4]
 8004280:	0989      	lsrs	r1, r1, #6
 8004282:	4608      	mov	r0, r1
 8004284:	f04f 0100 	mov.w	r1, #0
 8004288:	f240 14ff 	movw	r4, #511	; 0x1ff
 800428c:	f04f 0500 	mov.w	r5, #0
 8004290:	ea00 0204 	and.w	r2, r0, r4
 8004294:	ea01 0305 	and.w	r3, r1, r5
 8004298:	493d      	ldr	r1, [pc, #244]	; (8004390 <HAL_RCC_GetSysClockFreq+0x168>)
 800429a:	fb01 f003 	mul.w	r0, r1, r3
 800429e:	2100      	movs	r1, #0
 80042a0:	fb01 f102 	mul.w	r1, r1, r2
 80042a4:	1844      	adds	r4, r0, r1
 80042a6:	493a      	ldr	r1, [pc, #232]	; (8004390 <HAL_RCC_GetSysClockFreq+0x168>)
 80042a8:	fba2 0101 	umull	r0, r1, r2, r1
 80042ac:	1863      	adds	r3, r4, r1
 80042ae:	4619      	mov	r1, r3
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	461a      	mov	r2, r3
 80042b4:	f04f 0300 	mov.w	r3, #0
 80042b8:	f7fb ffea 	bl	8000290 <__aeabi_uldivmod>
 80042bc:	4602      	mov	r2, r0
 80042be:	460b      	mov	r3, r1
 80042c0:	4613      	mov	r3, r2
 80042c2:	60fb      	str	r3, [r7, #12]
 80042c4:	e04a      	b.n	800435c <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80042c6:	4b30      	ldr	r3, [pc, #192]	; (8004388 <HAL_RCC_GetSysClockFreq+0x160>)
 80042c8:	685b      	ldr	r3, [r3, #4]
 80042ca:	099b      	lsrs	r3, r3, #6
 80042cc:	461a      	mov	r2, r3
 80042ce:	f04f 0300 	mov.w	r3, #0
 80042d2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80042d6:	f04f 0100 	mov.w	r1, #0
 80042da:	ea02 0400 	and.w	r4, r2, r0
 80042de:	ea03 0501 	and.w	r5, r3, r1
 80042e2:	4620      	mov	r0, r4
 80042e4:	4629      	mov	r1, r5
 80042e6:	f04f 0200 	mov.w	r2, #0
 80042ea:	f04f 0300 	mov.w	r3, #0
 80042ee:	014b      	lsls	r3, r1, #5
 80042f0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80042f4:	0142      	lsls	r2, r0, #5
 80042f6:	4610      	mov	r0, r2
 80042f8:	4619      	mov	r1, r3
 80042fa:	1b00      	subs	r0, r0, r4
 80042fc:	eb61 0105 	sbc.w	r1, r1, r5
 8004300:	f04f 0200 	mov.w	r2, #0
 8004304:	f04f 0300 	mov.w	r3, #0
 8004308:	018b      	lsls	r3, r1, #6
 800430a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800430e:	0182      	lsls	r2, r0, #6
 8004310:	1a12      	subs	r2, r2, r0
 8004312:	eb63 0301 	sbc.w	r3, r3, r1
 8004316:	f04f 0000 	mov.w	r0, #0
 800431a:	f04f 0100 	mov.w	r1, #0
 800431e:	00d9      	lsls	r1, r3, #3
 8004320:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004324:	00d0      	lsls	r0, r2, #3
 8004326:	4602      	mov	r2, r0
 8004328:	460b      	mov	r3, r1
 800432a:	1912      	adds	r2, r2, r4
 800432c:	eb45 0303 	adc.w	r3, r5, r3
 8004330:	f04f 0000 	mov.w	r0, #0
 8004334:	f04f 0100 	mov.w	r1, #0
 8004338:	0299      	lsls	r1, r3, #10
 800433a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800433e:	0290      	lsls	r0, r2, #10
 8004340:	4602      	mov	r2, r0
 8004342:	460b      	mov	r3, r1
 8004344:	4610      	mov	r0, r2
 8004346:	4619      	mov	r1, r3
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	461a      	mov	r2, r3
 800434c:	f04f 0300 	mov.w	r3, #0
 8004350:	f7fb ff9e 	bl	8000290 <__aeabi_uldivmod>
 8004354:	4602      	mov	r2, r0
 8004356:	460b      	mov	r3, r1
 8004358:	4613      	mov	r3, r2
 800435a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800435c:	4b0a      	ldr	r3, [pc, #40]	; (8004388 <HAL_RCC_GetSysClockFreq+0x160>)
 800435e:	685b      	ldr	r3, [r3, #4]
 8004360:	0c1b      	lsrs	r3, r3, #16
 8004362:	f003 0303 	and.w	r3, r3, #3
 8004366:	3301      	adds	r3, #1
 8004368:	005b      	lsls	r3, r3, #1
 800436a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800436c:	68fa      	ldr	r2, [r7, #12]
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	fbb2 f3f3 	udiv	r3, r2, r3
 8004374:	60bb      	str	r3, [r7, #8]
      break;
 8004376:	e002      	b.n	800437e <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004378:	4b04      	ldr	r3, [pc, #16]	; (800438c <HAL_RCC_GetSysClockFreq+0x164>)
 800437a:	60bb      	str	r3, [r7, #8]
      break;
 800437c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800437e:	68bb      	ldr	r3, [r7, #8]
}
 8004380:	4618      	mov	r0, r3
 8004382:	3710      	adds	r7, #16
 8004384:	46bd      	mov	sp, r7
 8004386:	bdb0      	pop	{r4, r5, r7, pc}
 8004388:	40023800 	.word	0x40023800
 800438c:	00f42400 	.word	0x00f42400
 8004390:	017d7840 	.word	0x017d7840

08004394 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004394:	b480      	push	{r7}
 8004396:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004398:	4b03      	ldr	r3, [pc, #12]	; (80043a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800439a:	681b      	ldr	r3, [r3, #0]
}
 800439c:	4618      	mov	r0, r3
 800439e:	46bd      	mov	sp, r7
 80043a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a4:	4770      	bx	lr
 80043a6:	bf00      	nop
 80043a8:	20000008 	.word	0x20000008

080043ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80043b0:	f7ff fff0 	bl	8004394 <HAL_RCC_GetHCLKFreq>
 80043b4:	4602      	mov	r2, r0
 80043b6:	4b05      	ldr	r3, [pc, #20]	; (80043cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80043b8:	689b      	ldr	r3, [r3, #8]
 80043ba:	0a9b      	lsrs	r3, r3, #10
 80043bc:	f003 0307 	and.w	r3, r3, #7
 80043c0:	4903      	ldr	r1, [pc, #12]	; (80043d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80043c2:	5ccb      	ldrb	r3, [r1, r3]
 80043c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80043c8:	4618      	mov	r0, r3
 80043ca:	bd80      	pop	{r7, pc}
 80043cc:	40023800 	.word	0x40023800
 80043d0:	08006184 	.word	0x08006184

080043d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80043d8:	f7ff ffdc 	bl	8004394 <HAL_RCC_GetHCLKFreq>
 80043dc:	4602      	mov	r2, r0
 80043de:	4b05      	ldr	r3, [pc, #20]	; (80043f4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80043e0:	689b      	ldr	r3, [r3, #8]
 80043e2:	0b5b      	lsrs	r3, r3, #13
 80043e4:	f003 0307 	and.w	r3, r3, #7
 80043e8:	4903      	ldr	r1, [pc, #12]	; (80043f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80043ea:	5ccb      	ldrb	r3, [r1, r3]
 80043ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80043f0:	4618      	mov	r0, r3
 80043f2:	bd80      	pop	{r7, pc}
 80043f4:	40023800 	.word	0x40023800
 80043f8:	08006184 	.word	0x08006184

080043fc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b082      	sub	sp, #8
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2b00      	cmp	r3, #0
 8004408:	d101      	bne.n	800440e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800440a:	2301      	movs	r3, #1
 800440c:	e03f      	b.n	800448e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004414:	b2db      	uxtb	r3, r3
 8004416:	2b00      	cmp	r3, #0
 8004418:	d106      	bne.n	8004428 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2200      	movs	r2, #0
 800441e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004422:	6878      	ldr	r0, [r7, #4]
 8004424:	f7fd ffe4 	bl	80023f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2224      	movs	r2, #36	; 0x24
 800442c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	68da      	ldr	r2, [r3, #12]
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800443e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004440:	6878      	ldr	r0, [r7, #4]
 8004442:	f000 f929 	bl	8004698 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	691a      	ldr	r2, [r3, #16]
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004454:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	695a      	ldr	r2, [r3, #20]
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004464:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	68da      	ldr	r2, [r3, #12]
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004474:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	2200      	movs	r2, #0
 800447a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2220      	movs	r2, #32
 8004480:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2220      	movs	r2, #32
 8004488:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800448c:	2300      	movs	r3, #0
}
 800448e:	4618      	mov	r0, r3
 8004490:	3708      	adds	r7, #8
 8004492:	46bd      	mov	sp, r7
 8004494:	bd80      	pop	{r7, pc}

08004496 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004496:	b580      	push	{r7, lr}
 8004498:	b08a      	sub	sp, #40	; 0x28
 800449a:	af02      	add	r7, sp, #8
 800449c:	60f8      	str	r0, [r7, #12]
 800449e:	60b9      	str	r1, [r7, #8]
 80044a0:	603b      	str	r3, [r7, #0]
 80044a2:	4613      	mov	r3, r2
 80044a4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80044a6:	2300      	movs	r3, #0
 80044a8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044b0:	b2db      	uxtb	r3, r3
 80044b2:	2b20      	cmp	r3, #32
 80044b4:	d17c      	bne.n	80045b0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80044b6:	68bb      	ldr	r3, [r7, #8]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d002      	beq.n	80044c2 <HAL_UART_Transmit+0x2c>
 80044bc:	88fb      	ldrh	r3, [r7, #6]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d101      	bne.n	80044c6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80044c2:	2301      	movs	r3, #1
 80044c4:	e075      	b.n	80045b2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044cc:	2b01      	cmp	r3, #1
 80044ce:	d101      	bne.n	80044d4 <HAL_UART_Transmit+0x3e>
 80044d0:	2302      	movs	r3, #2
 80044d2:	e06e      	b.n	80045b2 <HAL_UART_Transmit+0x11c>
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	2201      	movs	r2, #1
 80044d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	2200      	movs	r2, #0
 80044e0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	2221      	movs	r2, #33	; 0x21
 80044e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80044ea:	f7fe f8cb 	bl	8002684 <HAL_GetTick>
 80044ee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	88fa      	ldrh	r2, [r7, #6]
 80044f4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	88fa      	ldrh	r2, [r7, #6]
 80044fa:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	689b      	ldr	r3, [r3, #8]
 8004500:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004504:	d108      	bne.n	8004518 <HAL_UART_Transmit+0x82>
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	691b      	ldr	r3, [r3, #16]
 800450a:	2b00      	cmp	r3, #0
 800450c:	d104      	bne.n	8004518 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800450e:	2300      	movs	r3, #0
 8004510:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004512:	68bb      	ldr	r3, [r7, #8]
 8004514:	61bb      	str	r3, [r7, #24]
 8004516:	e003      	b.n	8004520 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004518:	68bb      	ldr	r3, [r7, #8]
 800451a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800451c:	2300      	movs	r3, #0
 800451e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	2200      	movs	r2, #0
 8004524:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004528:	e02a      	b.n	8004580 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	9300      	str	r3, [sp, #0]
 800452e:	697b      	ldr	r3, [r7, #20]
 8004530:	2200      	movs	r2, #0
 8004532:	2180      	movs	r1, #128	; 0x80
 8004534:	68f8      	ldr	r0, [r7, #12]
 8004536:	f000 f840 	bl	80045ba <UART_WaitOnFlagUntilTimeout>
 800453a:	4603      	mov	r3, r0
 800453c:	2b00      	cmp	r3, #0
 800453e:	d001      	beq.n	8004544 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004540:	2303      	movs	r3, #3
 8004542:	e036      	b.n	80045b2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004544:	69fb      	ldr	r3, [r7, #28]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d10b      	bne.n	8004562 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800454a:	69bb      	ldr	r3, [r7, #24]
 800454c:	881b      	ldrh	r3, [r3, #0]
 800454e:	461a      	mov	r2, r3
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004558:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800455a:	69bb      	ldr	r3, [r7, #24]
 800455c:	3302      	adds	r3, #2
 800455e:	61bb      	str	r3, [r7, #24]
 8004560:	e007      	b.n	8004572 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004562:	69fb      	ldr	r3, [r7, #28]
 8004564:	781a      	ldrb	r2, [r3, #0]
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800456c:	69fb      	ldr	r3, [r7, #28]
 800456e:	3301      	adds	r3, #1
 8004570:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004576:	b29b      	uxth	r3, r3
 8004578:	3b01      	subs	r3, #1
 800457a:	b29a      	uxth	r2, r3
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004584:	b29b      	uxth	r3, r3
 8004586:	2b00      	cmp	r3, #0
 8004588:	d1cf      	bne.n	800452a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	9300      	str	r3, [sp, #0]
 800458e:	697b      	ldr	r3, [r7, #20]
 8004590:	2200      	movs	r2, #0
 8004592:	2140      	movs	r1, #64	; 0x40
 8004594:	68f8      	ldr	r0, [r7, #12]
 8004596:	f000 f810 	bl	80045ba <UART_WaitOnFlagUntilTimeout>
 800459a:	4603      	mov	r3, r0
 800459c:	2b00      	cmp	r3, #0
 800459e:	d001      	beq.n	80045a4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80045a0:	2303      	movs	r3, #3
 80045a2:	e006      	b.n	80045b2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	2220      	movs	r2, #32
 80045a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80045ac:	2300      	movs	r3, #0
 80045ae:	e000      	b.n	80045b2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80045b0:	2302      	movs	r3, #2
  }
}
 80045b2:	4618      	mov	r0, r3
 80045b4:	3720      	adds	r7, #32
 80045b6:	46bd      	mov	sp, r7
 80045b8:	bd80      	pop	{r7, pc}

080045ba <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80045ba:	b580      	push	{r7, lr}
 80045bc:	b090      	sub	sp, #64	; 0x40
 80045be:	af00      	add	r7, sp, #0
 80045c0:	60f8      	str	r0, [r7, #12]
 80045c2:	60b9      	str	r1, [r7, #8]
 80045c4:	603b      	str	r3, [r7, #0]
 80045c6:	4613      	mov	r3, r2
 80045c8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80045ca:	e050      	b.n	800466e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80045ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045d2:	d04c      	beq.n	800466e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80045d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d007      	beq.n	80045ea <UART_WaitOnFlagUntilTimeout+0x30>
 80045da:	f7fe f853 	bl	8002684 <HAL_GetTick>
 80045de:	4602      	mov	r2, r0
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	1ad3      	subs	r3, r2, r3
 80045e4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80045e6:	429a      	cmp	r2, r3
 80045e8:	d241      	bcs.n	800466e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	330c      	adds	r3, #12
 80045f0:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045f4:	e853 3f00 	ldrex	r3, [r3]
 80045f8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80045fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045fc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004600:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	330c      	adds	r3, #12
 8004608:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800460a:	637a      	str	r2, [r7, #52]	; 0x34
 800460c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800460e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004610:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004612:	e841 2300 	strex	r3, r2, [r1]
 8004616:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004618:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800461a:	2b00      	cmp	r3, #0
 800461c:	d1e5      	bne.n	80045ea <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	3314      	adds	r3, #20
 8004624:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004626:	697b      	ldr	r3, [r7, #20]
 8004628:	e853 3f00 	ldrex	r3, [r3]
 800462c:	613b      	str	r3, [r7, #16]
   return(result);
 800462e:	693b      	ldr	r3, [r7, #16]
 8004630:	f023 0301 	bic.w	r3, r3, #1
 8004634:	63bb      	str	r3, [r7, #56]	; 0x38
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	3314      	adds	r3, #20
 800463c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800463e:	623a      	str	r2, [r7, #32]
 8004640:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004642:	69f9      	ldr	r1, [r7, #28]
 8004644:	6a3a      	ldr	r2, [r7, #32]
 8004646:	e841 2300 	strex	r3, r2, [r1]
 800464a:	61bb      	str	r3, [r7, #24]
   return(result);
 800464c:	69bb      	ldr	r3, [r7, #24]
 800464e:	2b00      	cmp	r3, #0
 8004650:	d1e5      	bne.n	800461e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	2220      	movs	r2, #32
 8004656:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	2220      	movs	r2, #32
 800465e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	2200      	movs	r2, #0
 8004666:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800466a:	2303      	movs	r3, #3
 800466c:	e00f      	b.n	800468e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	681a      	ldr	r2, [r3, #0]
 8004674:	68bb      	ldr	r3, [r7, #8]
 8004676:	4013      	ands	r3, r2
 8004678:	68ba      	ldr	r2, [r7, #8]
 800467a:	429a      	cmp	r2, r3
 800467c:	bf0c      	ite	eq
 800467e:	2301      	moveq	r3, #1
 8004680:	2300      	movne	r3, #0
 8004682:	b2db      	uxtb	r3, r3
 8004684:	461a      	mov	r2, r3
 8004686:	79fb      	ldrb	r3, [r7, #7]
 8004688:	429a      	cmp	r2, r3
 800468a:	d09f      	beq.n	80045cc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800468c:	2300      	movs	r3, #0
}
 800468e:	4618      	mov	r0, r3
 8004690:	3740      	adds	r7, #64	; 0x40
 8004692:	46bd      	mov	sp, r7
 8004694:	bd80      	pop	{r7, pc}
	...

08004698 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004698:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800469c:	b09f      	sub	sp, #124	; 0x7c
 800469e:	af00      	add	r7, sp, #0
 80046a0:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80046a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	691b      	ldr	r3, [r3, #16]
 80046a8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80046ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046ae:	68d9      	ldr	r1, [r3, #12]
 80046b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046b2:	681a      	ldr	r2, [r3, #0]
 80046b4:	ea40 0301 	orr.w	r3, r0, r1
 80046b8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80046ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046bc:	689a      	ldr	r2, [r3, #8]
 80046be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046c0:	691b      	ldr	r3, [r3, #16]
 80046c2:	431a      	orrs	r2, r3
 80046c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046c6:	695b      	ldr	r3, [r3, #20]
 80046c8:	431a      	orrs	r2, r3
 80046ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046cc:	69db      	ldr	r3, [r3, #28]
 80046ce:	4313      	orrs	r3, r2
 80046d0:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80046d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	68db      	ldr	r3, [r3, #12]
 80046d8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80046dc:	f021 010c 	bic.w	r1, r1, #12
 80046e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046e2:	681a      	ldr	r2, [r3, #0]
 80046e4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80046e6:	430b      	orrs	r3, r1
 80046e8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80046ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	695b      	ldr	r3, [r3, #20]
 80046f0:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80046f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046f6:	6999      	ldr	r1, [r3, #24]
 80046f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046fa:	681a      	ldr	r2, [r3, #0]
 80046fc:	ea40 0301 	orr.w	r3, r0, r1
 8004700:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004702:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004704:	681a      	ldr	r2, [r3, #0]
 8004706:	4bc5      	ldr	r3, [pc, #788]	; (8004a1c <UART_SetConfig+0x384>)
 8004708:	429a      	cmp	r2, r3
 800470a:	d004      	beq.n	8004716 <UART_SetConfig+0x7e>
 800470c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800470e:	681a      	ldr	r2, [r3, #0]
 8004710:	4bc3      	ldr	r3, [pc, #780]	; (8004a20 <UART_SetConfig+0x388>)
 8004712:	429a      	cmp	r2, r3
 8004714:	d103      	bne.n	800471e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004716:	f7ff fe5d 	bl	80043d4 <HAL_RCC_GetPCLK2Freq>
 800471a:	6778      	str	r0, [r7, #116]	; 0x74
 800471c:	e002      	b.n	8004724 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800471e:	f7ff fe45 	bl	80043ac <HAL_RCC_GetPCLK1Freq>
 8004722:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004724:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004726:	69db      	ldr	r3, [r3, #28]
 8004728:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800472c:	f040 80b6 	bne.w	800489c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004730:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004732:	461c      	mov	r4, r3
 8004734:	f04f 0500 	mov.w	r5, #0
 8004738:	4622      	mov	r2, r4
 800473a:	462b      	mov	r3, r5
 800473c:	1891      	adds	r1, r2, r2
 800473e:	6439      	str	r1, [r7, #64]	; 0x40
 8004740:	415b      	adcs	r3, r3
 8004742:	647b      	str	r3, [r7, #68]	; 0x44
 8004744:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004748:	1912      	adds	r2, r2, r4
 800474a:	eb45 0303 	adc.w	r3, r5, r3
 800474e:	f04f 0000 	mov.w	r0, #0
 8004752:	f04f 0100 	mov.w	r1, #0
 8004756:	00d9      	lsls	r1, r3, #3
 8004758:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800475c:	00d0      	lsls	r0, r2, #3
 800475e:	4602      	mov	r2, r0
 8004760:	460b      	mov	r3, r1
 8004762:	1911      	adds	r1, r2, r4
 8004764:	6639      	str	r1, [r7, #96]	; 0x60
 8004766:	416b      	adcs	r3, r5
 8004768:	667b      	str	r3, [r7, #100]	; 0x64
 800476a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800476c:	685b      	ldr	r3, [r3, #4]
 800476e:	461a      	mov	r2, r3
 8004770:	f04f 0300 	mov.w	r3, #0
 8004774:	1891      	adds	r1, r2, r2
 8004776:	63b9      	str	r1, [r7, #56]	; 0x38
 8004778:	415b      	adcs	r3, r3
 800477a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800477c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004780:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8004784:	f7fb fd84 	bl	8000290 <__aeabi_uldivmod>
 8004788:	4602      	mov	r2, r0
 800478a:	460b      	mov	r3, r1
 800478c:	4ba5      	ldr	r3, [pc, #660]	; (8004a24 <UART_SetConfig+0x38c>)
 800478e:	fba3 2302 	umull	r2, r3, r3, r2
 8004792:	095b      	lsrs	r3, r3, #5
 8004794:	011e      	lsls	r6, r3, #4
 8004796:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004798:	461c      	mov	r4, r3
 800479a:	f04f 0500 	mov.w	r5, #0
 800479e:	4622      	mov	r2, r4
 80047a0:	462b      	mov	r3, r5
 80047a2:	1891      	adds	r1, r2, r2
 80047a4:	6339      	str	r1, [r7, #48]	; 0x30
 80047a6:	415b      	adcs	r3, r3
 80047a8:	637b      	str	r3, [r7, #52]	; 0x34
 80047aa:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80047ae:	1912      	adds	r2, r2, r4
 80047b0:	eb45 0303 	adc.w	r3, r5, r3
 80047b4:	f04f 0000 	mov.w	r0, #0
 80047b8:	f04f 0100 	mov.w	r1, #0
 80047bc:	00d9      	lsls	r1, r3, #3
 80047be:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80047c2:	00d0      	lsls	r0, r2, #3
 80047c4:	4602      	mov	r2, r0
 80047c6:	460b      	mov	r3, r1
 80047c8:	1911      	adds	r1, r2, r4
 80047ca:	65b9      	str	r1, [r7, #88]	; 0x58
 80047cc:	416b      	adcs	r3, r5
 80047ce:	65fb      	str	r3, [r7, #92]	; 0x5c
 80047d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047d2:	685b      	ldr	r3, [r3, #4]
 80047d4:	461a      	mov	r2, r3
 80047d6:	f04f 0300 	mov.w	r3, #0
 80047da:	1891      	adds	r1, r2, r2
 80047dc:	62b9      	str	r1, [r7, #40]	; 0x28
 80047de:	415b      	adcs	r3, r3
 80047e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80047e2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80047e6:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80047ea:	f7fb fd51 	bl	8000290 <__aeabi_uldivmod>
 80047ee:	4602      	mov	r2, r0
 80047f0:	460b      	mov	r3, r1
 80047f2:	4b8c      	ldr	r3, [pc, #560]	; (8004a24 <UART_SetConfig+0x38c>)
 80047f4:	fba3 1302 	umull	r1, r3, r3, r2
 80047f8:	095b      	lsrs	r3, r3, #5
 80047fa:	2164      	movs	r1, #100	; 0x64
 80047fc:	fb01 f303 	mul.w	r3, r1, r3
 8004800:	1ad3      	subs	r3, r2, r3
 8004802:	00db      	lsls	r3, r3, #3
 8004804:	3332      	adds	r3, #50	; 0x32
 8004806:	4a87      	ldr	r2, [pc, #540]	; (8004a24 <UART_SetConfig+0x38c>)
 8004808:	fba2 2303 	umull	r2, r3, r2, r3
 800480c:	095b      	lsrs	r3, r3, #5
 800480e:	005b      	lsls	r3, r3, #1
 8004810:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004814:	441e      	add	r6, r3
 8004816:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004818:	4618      	mov	r0, r3
 800481a:	f04f 0100 	mov.w	r1, #0
 800481e:	4602      	mov	r2, r0
 8004820:	460b      	mov	r3, r1
 8004822:	1894      	adds	r4, r2, r2
 8004824:	623c      	str	r4, [r7, #32]
 8004826:	415b      	adcs	r3, r3
 8004828:	627b      	str	r3, [r7, #36]	; 0x24
 800482a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800482e:	1812      	adds	r2, r2, r0
 8004830:	eb41 0303 	adc.w	r3, r1, r3
 8004834:	f04f 0400 	mov.w	r4, #0
 8004838:	f04f 0500 	mov.w	r5, #0
 800483c:	00dd      	lsls	r5, r3, #3
 800483e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004842:	00d4      	lsls	r4, r2, #3
 8004844:	4622      	mov	r2, r4
 8004846:	462b      	mov	r3, r5
 8004848:	1814      	adds	r4, r2, r0
 800484a:	653c      	str	r4, [r7, #80]	; 0x50
 800484c:	414b      	adcs	r3, r1
 800484e:	657b      	str	r3, [r7, #84]	; 0x54
 8004850:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004852:	685b      	ldr	r3, [r3, #4]
 8004854:	461a      	mov	r2, r3
 8004856:	f04f 0300 	mov.w	r3, #0
 800485a:	1891      	adds	r1, r2, r2
 800485c:	61b9      	str	r1, [r7, #24]
 800485e:	415b      	adcs	r3, r3
 8004860:	61fb      	str	r3, [r7, #28]
 8004862:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004866:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800486a:	f7fb fd11 	bl	8000290 <__aeabi_uldivmod>
 800486e:	4602      	mov	r2, r0
 8004870:	460b      	mov	r3, r1
 8004872:	4b6c      	ldr	r3, [pc, #432]	; (8004a24 <UART_SetConfig+0x38c>)
 8004874:	fba3 1302 	umull	r1, r3, r3, r2
 8004878:	095b      	lsrs	r3, r3, #5
 800487a:	2164      	movs	r1, #100	; 0x64
 800487c:	fb01 f303 	mul.w	r3, r1, r3
 8004880:	1ad3      	subs	r3, r2, r3
 8004882:	00db      	lsls	r3, r3, #3
 8004884:	3332      	adds	r3, #50	; 0x32
 8004886:	4a67      	ldr	r2, [pc, #412]	; (8004a24 <UART_SetConfig+0x38c>)
 8004888:	fba2 2303 	umull	r2, r3, r2, r3
 800488c:	095b      	lsrs	r3, r3, #5
 800488e:	f003 0207 	and.w	r2, r3, #7
 8004892:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	4432      	add	r2, r6
 8004898:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800489a:	e0b9      	b.n	8004a10 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800489c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800489e:	461c      	mov	r4, r3
 80048a0:	f04f 0500 	mov.w	r5, #0
 80048a4:	4622      	mov	r2, r4
 80048a6:	462b      	mov	r3, r5
 80048a8:	1891      	adds	r1, r2, r2
 80048aa:	6139      	str	r1, [r7, #16]
 80048ac:	415b      	adcs	r3, r3
 80048ae:	617b      	str	r3, [r7, #20]
 80048b0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80048b4:	1912      	adds	r2, r2, r4
 80048b6:	eb45 0303 	adc.w	r3, r5, r3
 80048ba:	f04f 0000 	mov.w	r0, #0
 80048be:	f04f 0100 	mov.w	r1, #0
 80048c2:	00d9      	lsls	r1, r3, #3
 80048c4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80048c8:	00d0      	lsls	r0, r2, #3
 80048ca:	4602      	mov	r2, r0
 80048cc:	460b      	mov	r3, r1
 80048ce:	eb12 0804 	adds.w	r8, r2, r4
 80048d2:	eb43 0905 	adc.w	r9, r3, r5
 80048d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048d8:	685b      	ldr	r3, [r3, #4]
 80048da:	4618      	mov	r0, r3
 80048dc:	f04f 0100 	mov.w	r1, #0
 80048e0:	f04f 0200 	mov.w	r2, #0
 80048e4:	f04f 0300 	mov.w	r3, #0
 80048e8:	008b      	lsls	r3, r1, #2
 80048ea:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80048ee:	0082      	lsls	r2, r0, #2
 80048f0:	4640      	mov	r0, r8
 80048f2:	4649      	mov	r1, r9
 80048f4:	f7fb fccc 	bl	8000290 <__aeabi_uldivmod>
 80048f8:	4602      	mov	r2, r0
 80048fa:	460b      	mov	r3, r1
 80048fc:	4b49      	ldr	r3, [pc, #292]	; (8004a24 <UART_SetConfig+0x38c>)
 80048fe:	fba3 2302 	umull	r2, r3, r3, r2
 8004902:	095b      	lsrs	r3, r3, #5
 8004904:	011e      	lsls	r6, r3, #4
 8004906:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004908:	4618      	mov	r0, r3
 800490a:	f04f 0100 	mov.w	r1, #0
 800490e:	4602      	mov	r2, r0
 8004910:	460b      	mov	r3, r1
 8004912:	1894      	adds	r4, r2, r2
 8004914:	60bc      	str	r4, [r7, #8]
 8004916:	415b      	adcs	r3, r3
 8004918:	60fb      	str	r3, [r7, #12]
 800491a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800491e:	1812      	adds	r2, r2, r0
 8004920:	eb41 0303 	adc.w	r3, r1, r3
 8004924:	f04f 0400 	mov.w	r4, #0
 8004928:	f04f 0500 	mov.w	r5, #0
 800492c:	00dd      	lsls	r5, r3, #3
 800492e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004932:	00d4      	lsls	r4, r2, #3
 8004934:	4622      	mov	r2, r4
 8004936:	462b      	mov	r3, r5
 8004938:	1814      	adds	r4, r2, r0
 800493a:	64bc      	str	r4, [r7, #72]	; 0x48
 800493c:	414b      	adcs	r3, r1
 800493e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004940:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004942:	685b      	ldr	r3, [r3, #4]
 8004944:	4618      	mov	r0, r3
 8004946:	f04f 0100 	mov.w	r1, #0
 800494a:	f04f 0200 	mov.w	r2, #0
 800494e:	f04f 0300 	mov.w	r3, #0
 8004952:	008b      	lsls	r3, r1, #2
 8004954:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004958:	0082      	lsls	r2, r0, #2
 800495a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800495e:	f7fb fc97 	bl	8000290 <__aeabi_uldivmod>
 8004962:	4602      	mov	r2, r0
 8004964:	460b      	mov	r3, r1
 8004966:	4b2f      	ldr	r3, [pc, #188]	; (8004a24 <UART_SetConfig+0x38c>)
 8004968:	fba3 1302 	umull	r1, r3, r3, r2
 800496c:	095b      	lsrs	r3, r3, #5
 800496e:	2164      	movs	r1, #100	; 0x64
 8004970:	fb01 f303 	mul.w	r3, r1, r3
 8004974:	1ad3      	subs	r3, r2, r3
 8004976:	011b      	lsls	r3, r3, #4
 8004978:	3332      	adds	r3, #50	; 0x32
 800497a:	4a2a      	ldr	r2, [pc, #168]	; (8004a24 <UART_SetConfig+0x38c>)
 800497c:	fba2 2303 	umull	r2, r3, r2, r3
 8004980:	095b      	lsrs	r3, r3, #5
 8004982:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004986:	441e      	add	r6, r3
 8004988:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800498a:	4618      	mov	r0, r3
 800498c:	f04f 0100 	mov.w	r1, #0
 8004990:	4602      	mov	r2, r0
 8004992:	460b      	mov	r3, r1
 8004994:	1894      	adds	r4, r2, r2
 8004996:	603c      	str	r4, [r7, #0]
 8004998:	415b      	adcs	r3, r3
 800499a:	607b      	str	r3, [r7, #4]
 800499c:	e9d7 2300 	ldrd	r2, r3, [r7]
 80049a0:	1812      	adds	r2, r2, r0
 80049a2:	eb41 0303 	adc.w	r3, r1, r3
 80049a6:	f04f 0400 	mov.w	r4, #0
 80049aa:	f04f 0500 	mov.w	r5, #0
 80049ae:	00dd      	lsls	r5, r3, #3
 80049b0:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80049b4:	00d4      	lsls	r4, r2, #3
 80049b6:	4622      	mov	r2, r4
 80049b8:	462b      	mov	r3, r5
 80049ba:	eb12 0a00 	adds.w	sl, r2, r0
 80049be:	eb43 0b01 	adc.w	fp, r3, r1
 80049c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049c4:	685b      	ldr	r3, [r3, #4]
 80049c6:	4618      	mov	r0, r3
 80049c8:	f04f 0100 	mov.w	r1, #0
 80049cc:	f04f 0200 	mov.w	r2, #0
 80049d0:	f04f 0300 	mov.w	r3, #0
 80049d4:	008b      	lsls	r3, r1, #2
 80049d6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80049da:	0082      	lsls	r2, r0, #2
 80049dc:	4650      	mov	r0, sl
 80049de:	4659      	mov	r1, fp
 80049e0:	f7fb fc56 	bl	8000290 <__aeabi_uldivmod>
 80049e4:	4602      	mov	r2, r0
 80049e6:	460b      	mov	r3, r1
 80049e8:	4b0e      	ldr	r3, [pc, #56]	; (8004a24 <UART_SetConfig+0x38c>)
 80049ea:	fba3 1302 	umull	r1, r3, r3, r2
 80049ee:	095b      	lsrs	r3, r3, #5
 80049f0:	2164      	movs	r1, #100	; 0x64
 80049f2:	fb01 f303 	mul.w	r3, r1, r3
 80049f6:	1ad3      	subs	r3, r2, r3
 80049f8:	011b      	lsls	r3, r3, #4
 80049fa:	3332      	adds	r3, #50	; 0x32
 80049fc:	4a09      	ldr	r2, [pc, #36]	; (8004a24 <UART_SetConfig+0x38c>)
 80049fe:	fba2 2303 	umull	r2, r3, r2, r3
 8004a02:	095b      	lsrs	r3, r3, #5
 8004a04:	f003 020f 	and.w	r2, r3, #15
 8004a08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	4432      	add	r2, r6
 8004a0e:	609a      	str	r2, [r3, #8]
}
 8004a10:	bf00      	nop
 8004a12:	377c      	adds	r7, #124	; 0x7c
 8004a14:	46bd      	mov	sp, r7
 8004a16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a1a:	bf00      	nop
 8004a1c:	40011000 	.word	0x40011000
 8004a20:	40011400 	.word	0x40011400
 8004a24:	51eb851f 	.word	0x51eb851f

08004a28 <__errno>:
 8004a28:	4b01      	ldr	r3, [pc, #4]	; (8004a30 <__errno+0x8>)
 8004a2a:	6818      	ldr	r0, [r3, #0]
 8004a2c:	4770      	bx	lr
 8004a2e:	bf00      	nop
 8004a30:	20000014 	.word	0x20000014

08004a34 <__libc_init_array>:
 8004a34:	b570      	push	{r4, r5, r6, lr}
 8004a36:	4d0d      	ldr	r5, [pc, #52]	; (8004a6c <__libc_init_array+0x38>)
 8004a38:	4c0d      	ldr	r4, [pc, #52]	; (8004a70 <__libc_init_array+0x3c>)
 8004a3a:	1b64      	subs	r4, r4, r5
 8004a3c:	10a4      	asrs	r4, r4, #2
 8004a3e:	2600      	movs	r6, #0
 8004a40:	42a6      	cmp	r6, r4
 8004a42:	d109      	bne.n	8004a58 <__libc_init_array+0x24>
 8004a44:	4d0b      	ldr	r5, [pc, #44]	; (8004a74 <__libc_init_array+0x40>)
 8004a46:	4c0c      	ldr	r4, [pc, #48]	; (8004a78 <__libc_init_array+0x44>)
 8004a48:	f000 fc4e 	bl	80052e8 <_init>
 8004a4c:	1b64      	subs	r4, r4, r5
 8004a4e:	10a4      	asrs	r4, r4, #2
 8004a50:	2600      	movs	r6, #0
 8004a52:	42a6      	cmp	r6, r4
 8004a54:	d105      	bne.n	8004a62 <__libc_init_array+0x2e>
 8004a56:	bd70      	pop	{r4, r5, r6, pc}
 8004a58:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a5c:	4798      	blx	r3
 8004a5e:	3601      	adds	r6, #1
 8004a60:	e7ee      	b.n	8004a40 <__libc_init_array+0xc>
 8004a62:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a66:	4798      	blx	r3
 8004a68:	3601      	adds	r6, #1
 8004a6a:	e7f2      	b.n	8004a52 <__libc_init_array+0x1e>
 8004a6c:	080061c8 	.word	0x080061c8
 8004a70:	080061c8 	.word	0x080061c8
 8004a74:	080061c8 	.word	0x080061c8
 8004a78:	080061cc 	.word	0x080061cc

08004a7c <memset>:
 8004a7c:	4402      	add	r2, r0
 8004a7e:	4603      	mov	r3, r0
 8004a80:	4293      	cmp	r3, r2
 8004a82:	d100      	bne.n	8004a86 <memset+0xa>
 8004a84:	4770      	bx	lr
 8004a86:	f803 1b01 	strb.w	r1, [r3], #1
 8004a8a:	e7f9      	b.n	8004a80 <memset+0x4>

08004a8c <siprintf>:
 8004a8c:	b40e      	push	{r1, r2, r3}
 8004a8e:	b500      	push	{lr}
 8004a90:	b09c      	sub	sp, #112	; 0x70
 8004a92:	ab1d      	add	r3, sp, #116	; 0x74
 8004a94:	9002      	str	r0, [sp, #8]
 8004a96:	9006      	str	r0, [sp, #24]
 8004a98:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004a9c:	4809      	ldr	r0, [pc, #36]	; (8004ac4 <siprintf+0x38>)
 8004a9e:	9107      	str	r1, [sp, #28]
 8004aa0:	9104      	str	r1, [sp, #16]
 8004aa2:	4909      	ldr	r1, [pc, #36]	; (8004ac8 <siprintf+0x3c>)
 8004aa4:	f853 2b04 	ldr.w	r2, [r3], #4
 8004aa8:	9105      	str	r1, [sp, #20]
 8004aaa:	6800      	ldr	r0, [r0, #0]
 8004aac:	9301      	str	r3, [sp, #4]
 8004aae:	a902      	add	r1, sp, #8
 8004ab0:	f000 f868 	bl	8004b84 <_svfiprintf_r>
 8004ab4:	9b02      	ldr	r3, [sp, #8]
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	701a      	strb	r2, [r3, #0]
 8004aba:	b01c      	add	sp, #112	; 0x70
 8004abc:	f85d eb04 	ldr.w	lr, [sp], #4
 8004ac0:	b003      	add	sp, #12
 8004ac2:	4770      	bx	lr
 8004ac4:	20000014 	.word	0x20000014
 8004ac8:	ffff0208 	.word	0xffff0208

08004acc <__ssputs_r>:
 8004acc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ad0:	688e      	ldr	r6, [r1, #8]
 8004ad2:	429e      	cmp	r6, r3
 8004ad4:	4682      	mov	sl, r0
 8004ad6:	460c      	mov	r4, r1
 8004ad8:	4690      	mov	r8, r2
 8004ada:	461f      	mov	r7, r3
 8004adc:	d838      	bhi.n	8004b50 <__ssputs_r+0x84>
 8004ade:	898a      	ldrh	r2, [r1, #12]
 8004ae0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004ae4:	d032      	beq.n	8004b4c <__ssputs_r+0x80>
 8004ae6:	6825      	ldr	r5, [r4, #0]
 8004ae8:	6909      	ldr	r1, [r1, #16]
 8004aea:	eba5 0901 	sub.w	r9, r5, r1
 8004aee:	6965      	ldr	r5, [r4, #20]
 8004af0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004af4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004af8:	3301      	adds	r3, #1
 8004afa:	444b      	add	r3, r9
 8004afc:	106d      	asrs	r5, r5, #1
 8004afe:	429d      	cmp	r5, r3
 8004b00:	bf38      	it	cc
 8004b02:	461d      	movcc	r5, r3
 8004b04:	0553      	lsls	r3, r2, #21
 8004b06:	d531      	bpl.n	8004b6c <__ssputs_r+0xa0>
 8004b08:	4629      	mov	r1, r5
 8004b0a:	f000 fb47 	bl	800519c <_malloc_r>
 8004b0e:	4606      	mov	r6, r0
 8004b10:	b950      	cbnz	r0, 8004b28 <__ssputs_r+0x5c>
 8004b12:	230c      	movs	r3, #12
 8004b14:	f8ca 3000 	str.w	r3, [sl]
 8004b18:	89a3      	ldrh	r3, [r4, #12]
 8004b1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004b1e:	81a3      	strh	r3, [r4, #12]
 8004b20:	f04f 30ff 	mov.w	r0, #4294967295
 8004b24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b28:	6921      	ldr	r1, [r4, #16]
 8004b2a:	464a      	mov	r2, r9
 8004b2c:	f000 fabe 	bl	80050ac <memcpy>
 8004b30:	89a3      	ldrh	r3, [r4, #12]
 8004b32:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004b36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b3a:	81a3      	strh	r3, [r4, #12]
 8004b3c:	6126      	str	r6, [r4, #16]
 8004b3e:	6165      	str	r5, [r4, #20]
 8004b40:	444e      	add	r6, r9
 8004b42:	eba5 0509 	sub.w	r5, r5, r9
 8004b46:	6026      	str	r6, [r4, #0]
 8004b48:	60a5      	str	r5, [r4, #8]
 8004b4a:	463e      	mov	r6, r7
 8004b4c:	42be      	cmp	r6, r7
 8004b4e:	d900      	bls.n	8004b52 <__ssputs_r+0x86>
 8004b50:	463e      	mov	r6, r7
 8004b52:	4632      	mov	r2, r6
 8004b54:	6820      	ldr	r0, [r4, #0]
 8004b56:	4641      	mov	r1, r8
 8004b58:	f000 fab6 	bl	80050c8 <memmove>
 8004b5c:	68a3      	ldr	r3, [r4, #8]
 8004b5e:	6822      	ldr	r2, [r4, #0]
 8004b60:	1b9b      	subs	r3, r3, r6
 8004b62:	4432      	add	r2, r6
 8004b64:	60a3      	str	r3, [r4, #8]
 8004b66:	6022      	str	r2, [r4, #0]
 8004b68:	2000      	movs	r0, #0
 8004b6a:	e7db      	b.n	8004b24 <__ssputs_r+0x58>
 8004b6c:	462a      	mov	r2, r5
 8004b6e:	f000 fb6f 	bl	8005250 <_realloc_r>
 8004b72:	4606      	mov	r6, r0
 8004b74:	2800      	cmp	r0, #0
 8004b76:	d1e1      	bne.n	8004b3c <__ssputs_r+0x70>
 8004b78:	6921      	ldr	r1, [r4, #16]
 8004b7a:	4650      	mov	r0, sl
 8004b7c:	f000 fabe 	bl	80050fc <_free_r>
 8004b80:	e7c7      	b.n	8004b12 <__ssputs_r+0x46>
	...

08004b84 <_svfiprintf_r>:
 8004b84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b88:	4698      	mov	r8, r3
 8004b8a:	898b      	ldrh	r3, [r1, #12]
 8004b8c:	061b      	lsls	r3, r3, #24
 8004b8e:	b09d      	sub	sp, #116	; 0x74
 8004b90:	4607      	mov	r7, r0
 8004b92:	460d      	mov	r5, r1
 8004b94:	4614      	mov	r4, r2
 8004b96:	d50e      	bpl.n	8004bb6 <_svfiprintf_r+0x32>
 8004b98:	690b      	ldr	r3, [r1, #16]
 8004b9a:	b963      	cbnz	r3, 8004bb6 <_svfiprintf_r+0x32>
 8004b9c:	2140      	movs	r1, #64	; 0x40
 8004b9e:	f000 fafd 	bl	800519c <_malloc_r>
 8004ba2:	6028      	str	r0, [r5, #0]
 8004ba4:	6128      	str	r0, [r5, #16]
 8004ba6:	b920      	cbnz	r0, 8004bb2 <_svfiprintf_r+0x2e>
 8004ba8:	230c      	movs	r3, #12
 8004baa:	603b      	str	r3, [r7, #0]
 8004bac:	f04f 30ff 	mov.w	r0, #4294967295
 8004bb0:	e0d1      	b.n	8004d56 <_svfiprintf_r+0x1d2>
 8004bb2:	2340      	movs	r3, #64	; 0x40
 8004bb4:	616b      	str	r3, [r5, #20]
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	9309      	str	r3, [sp, #36]	; 0x24
 8004bba:	2320      	movs	r3, #32
 8004bbc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004bc0:	f8cd 800c 	str.w	r8, [sp, #12]
 8004bc4:	2330      	movs	r3, #48	; 0x30
 8004bc6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004d70 <_svfiprintf_r+0x1ec>
 8004bca:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004bce:	f04f 0901 	mov.w	r9, #1
 8004bd2:	4623      	mov	r3, r4
 8004bd4:	469a      	mov	sl, r3
 8004bd6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004bda:	b10a      	cbz	r2, 8004be0 <_svfiprintf_r+0x5c>
 8004bdc:	2a25      	cmp	r2, #37	; 0x25
 8004bde:	d1f9      	bne.n	8004bd4 <_svfiprintf_r+0x50>
 8004be0:	ebba 0b04 	subs.w	fp, sl, r4
 8004be4:	d00b      	beq.n	8004bfe <_svfiprintf_r+0x7a>
 8004be6:	465b      	mov	r3, fp
 8004be8:	4622      	mov	r2, r4
 8004bea:	4629      	mov	r1, r5
 8004bec:	4638      	mov	r0, r7
 8004bee:	f7ff ff6d 	bl	8004acc <__ssputs_r>
 8004bf2:	3001      	adds	r0, #1
 8004bf4:	f000 80aa 	beq.w	8004d4c <_svfiprintf_r+0x1c8>
 8004bf8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004bfa:	445a      	add	r2, fp
 8004bfc:	9209      	str	r2, [sp, #36]	; 0x24
 8004bfe:	f89a 3000 	ldrb.w	r3, [sl]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	f000 80a2 	beq.w	8004d4c <_svfiprintf_r+0x1c8>
 8004c08:	2300      	movs	r3, #0
 8004c0a:	f04f 32ff 	mov.w	r2, #4294967295
 8004c0e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004c12:	f10a 0a01 	add.w	sl, sl, #1
 8004c16:	9304      	str	r3, [sp, #16]
 8004c18:	9307      	str	r3, [sp, #28]
 8004c1a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004c1e:	931a      	str	r3, [sp, #104]	; 0x68
 8004c20:	4654      	mov	r4, sl
 8004c22:	2205      	movs	r2, #5
 8004c24:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004c28:	4851      	ldr	r0, [pc, #324]	; (8004d70 <_svfiprintf_r+0x1ec>)
 8004c2a:	f7fb fae1 	bl	80001f0 <memchr>
 8004c2e:	9a04      	ldr	r2, [sp, #16]
 8004c30:	b9d8      	cbnz	r0, 8004c6a <_svfiprintf_r+0xe6>
 8004c32:	06d0      	lsls	r0, r2, #27
 8004c34:	bf44      	itt	mi
 8004c36:	2320      	movmi	r3, #32
 8004c38:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004c3c:	0711      	lsls	r1, r2, #28
 8004c3e:	bf44      	itt	mi
 8004c40:	232b      	movmi	r3, #43	; 0x2b
 8004c42:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004c46:	f89a 3000 	ldrb.w	r3, [sl]
 8004c4a:	2b2a      	cmp	r3, #42	; 0x2a
 8004c4c:	d015      	beq.n	8004c7a <_svfiprintf_r+0xf6>
 8004c4e:	9a07      	ldr	r2, [sp, #28]
 8004c50:	4654      	mov	r4, sl
 8004c52:	2000      	movs	r0, #0
 8004c54:	f04f 0c0a 	mov.w	ip, #10
 8004c58:	4621      	mov	r1, r4
 8004c5a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004c5e:	3b30      	subs	r3, #48	; 0x30
 8004c60:	2b09      	cmp	r3, #9
 8004c62:	d94e      	bls.n	8004d02 <_svfiprintf_r+0x17e>
 8004c64:	b1b0      	cbz	r0, 8004c94 <_svfiprintf_r+0x110>
 8004c66:	9207      	str	r2, [sp, #28]
 8004c68:	e014      	b.n	8004c94 <_svfiprintf_r+0x110>
 8004c6a:	eba0 0308 	sub.w	r3, r0, r8
 8004c6e:	fa09 f303 	lsl.w	r3, r9, r3
 8004c72:	4313      	orrs	r3, r2
 8004c74:	9304      	str	r3, [sp, #16]
 8004c76:	46a2      	mov	sl, r4
 8004c78:	e7d2      	b.n	8004c20 <_svfiprintf_r+0x9c>
 8004c7a:	9b03      	ldr	r3, [sp, #12]
 8004c7c:	1d19      	adds	r1, r3, #4
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	9103      	str	r1, [sp, #12]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	bfbb      	ittet	lt
 8004c86:	425b      	neglt	r3, r3
 8004c88:	f042 0202 	orrlt.w	r2, r2, #2
 8004c8c:	9307      	strge	r3, [sp, #28]
 8004c8e:	9307      	strlt	r3, [sp, #28]
 8004c90:	bfb8      	it	lt
 8004c92:	9204      	strlt	r2, [sp, #16]
 8004c94:	7823      	ldrb	r3, [r4, #0]
 8004c96:	2b2e      	cmp	r3, #46	; 0x2e
 8004c98:	d10c      	bne.n	8004cb4 <_svfiprintf_r+0x130>
 8004c9a:	7863      	ldrb	r3, [r4, #1]
 8004c9c:	2b2a      	cmp	r3, #42	; 0x2a
 8004c9e:	d135      	bne.n	8004d0c <_svfiprintf_r+0x188>
 8004ca0:	9b03      	ldr	r3, [sp, #12]
 8004ca2:	1d1a      	adds	r2, r3, #4
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	9203      	str	r2, [sp, #12]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	bfb8      	it	lt
 8004cac:	f04f 33ff 	movlt.w	r3, #4294967295
 8004cb0:	3402      	adds	r4, #2
 8004cb2:	9305      	str	r3, [sp, #20]
 8004cb4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004d80 <_svfiprintf_r+0x1fc>
 8004cb8:	7821      	ldrb	r1, [r4, #0]
 8004cba:	2203      	movs	r2, #3
 8004cbc:	4650      	mov	r0, sl
 8004cbe:	f7fb fa97 	bl	80001f0 <memchr>
 8004cc2:	b140      	cbz	r0, 8004cd6 <_svfiprintf_r+0x152>
 8004cc4:	2340      	movs	r3, #64	; 0x40
 8004cc6:	eba0 000a 	sub.w	r0, r0, sl
 8004cca:	fa03 f000 	lsl.w	r0, r3, r0
 8004cce:	9b04      	ldr	r3, [sp, #16]
 8004cd0:	4303      	orrs	r3, r0
 8004cd2:	3401      	adds	r4, #1
 8004cd4:	9304      	str	r3, [sp, #16]
 8004cd6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004cda:	4826      	ldr	r0, [pc, #152]	; (8004d74 <_svfiprintf_r+0x1f0>)
 8004cdc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004ce0:	2206      	movs	r2, #6
 8004ce2:	f7fb fa85 	bl	80001f0 <memchr>
 8004ce6:	2800      	cmp	r0, #0
 8004ce8:	d038      	beq.n	8004d5c <_svfiprintf_r+0x1d8>
 8004cea:	4b23      	ldr	r3, [pc, #140]	; (8004d78 <_svfiprintf_r+0x1f4>)
 8004cec:	bb1b      	cbnz	r3, 8004d36 <_svfiprintf_r+0x1b2>
 8004cee:	9b03      	ldr	r3, [sp, #12]
 8004cf0:	3307      	adds	r3, #7
 8004cf2:	f023 0307 	bic.w	r3, r3, #7
 8004cf6:	3308      	adds	r3, #8
 8004cf8:	9303      	str	r3, [sp, #12]
 8004cfa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004cfc:	4433      	add	r3, r6
 8004cfe:	9309      	str	r3, [sp, #36]	; 0x24
 8004d00:	e767      	b.n	8004bd2 <_svfiprintf_r+0x4e>
 8004d02:	fb0c 3202 	mla	r2, ip, r2, r3
 8004d06:	460c      	mov	r4, r1
 8004d08:	2001      	movs	r0, #1
 8004d0a:	e7a5      	b.n	8004c58 <_svfiprintf_r+0xd4>
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	3401      	adds	r4, #1
 8004d10:	9305      	str	r3, [sp, #20]
 8004d12:	4619      	mov	r1, r3
 8004d14:	f04f 0c0a 	mov.w	ip, #10
 8004d18:	4620      	mov	r0, r4
 8004d1a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004d1e:	3a30      	subs	r2, #48	; 0x30
 8004d20:	2a09      	cmp	r2, #9
 8004d22:	d903      	bls.n	8004d2c <_svfiprintf_r+0x1a8>
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d0c5      	beq.n	8004cb4 <_svfiprintf_r+0x130>
 8004d28:	9105      	str	r1, [sp, #20]
 8004d2a:	e7c3      	b.n	8004cb4 <_svfiprintf_r+0x130>
 8004d2c:	fb0c 2101 	mla	r1, ip, r1, r2
 8004d30:	4604      	mov	r4, r0
 8004d32:	2301      	movs	r3, #1
 8004d34:	e7f0      	b.n	8004d18 <_svfiprintf_r+0x194>
 8004d36:	ab03      	add	r3, sp, #12
 8004d38:	9300      	str	r3, [sp, #0]
 8004d3a:	462a      	mov	r2, r5
 8004d3c:	4b0f      	ldr	r3, [pc, #60]	; (8004d7c <_svfiprintf_r+0x1f8>)
 8004d3e:	a904      	add	r1, sp, #16
 8004d40:	4638      	mov	r0, r7
 8004d42:	f3af 8000 	nop.w
 8004d46:	1c42      	adds	r2, r0, #1
 8004d48:	4606      	mov	r6, r0
 8004d4a:	d1d6      	bne.n	8004cfa <_svfiprintf_r+0x176>
 8004d4c:	89ab      	ldrh	r3, [r5, #12]
 8004d4e:	065b      	lsls	r3, r3, #25
 8004d50:	f53f af2c 	bmi.w	8004bac <_svfiprintf_r+0x28>
 8004d54:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004d56:	b01d      	add	sp, #116	; 0x74
 8004d58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d5c:	ab03      	add	r3, sp, #12
 8004d5e:	9300      	str	r3, [sp, #0]
 8004d60:	462a      	mov	r2, r5
 8004d62:	4b06      	ldr	r3, [pc, #24]	; (8004d7c <_svfiprintf_r+0x1f8>)
 8004d64:	a904      	add	r1, sp, #16
 8004d66:	4638      	mov	r0, r7
 8004d68:	f000 f87a 	bl	8004e60 <_printf_i>
 8004d6c:	e7eb      	b.n	8004d46 <_svfiprintf_r+0x1c2>
 8004d6e:	bf00      	nop
 8004d70:	0800618c 	.word	0x0800618c
 8004d74:	08006196 	.word	0x08006196
 8004d78:	00000000 	.word	0x00000000
 8004d7c:	08004acd 	.word	0x08004acd
 8004d80:	08006192 	.word	0x08006192

08004d84 <_printf_common>:
 8004d84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d88:	4616      	mov	r6, r2
 8004d8a:	4699      	mov	r9, r3
 8004d8c:	688a      	ldr	r2, [r1, #8]
 8004d8e:	690b      	ldr	r3, [r1, #16]
 8004d90:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004d94:	4293      	cmp	r3, r2
 8004d96:	bfb8      	it	lt
 8004d98:	4613      	movlt	r3, r2
 8004d9a:	6033      	str	r3, [r6, #0]
 8004d9c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004da0:	4607      	mov	r7, r0
 8004da2:	460c      	mov	r4, r1
 8004da4:	b10a      	cbz	r2, 8004daa <_printf_common+0x26>
 8004da6:	3301      	adds	r3, #1
 8004da8:	6033      	str	r3, [r6, #0]
 8004daa:	6823      	ldr	r3, [r4, #0]
 8004dac:	0699      	lsls	r1, r3, #26
 8004dae:	bf42      	ittt	mi
 8004db0:	6833      	ldrmi	r3, [r6, #0]
 8004db2:	3302      	addmi	r3, #2
 8004db4:	6033      	strmi	r3, [r6, #0]
 8004db6:	6825      	ldr	r5, [r4, #0]
 8004db8:	f015 0506 	ands.w	r5, r5, #6
 8004dbc:	d106      	bne.n	8004dcc <_printf_common+0x48>
 8004dbe:	f104 0a19 	add.w	sl, r4, #25
 8004dc2:	68e3      	ldr	r3, [r4, #12]
 8004dc4:	6832      	ldr	r2, [r6, #0]
 8004dc6:	1a9b      	subs	r3, r3, r2
 8004dc8:	42ab      	cmp	r3, r5
 8004dca:	dc26      	bgt.n	8004e1a <_printf_common+0x96>
 8004dcc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004dd0:	1e13      	subs	r3, r2, #0
 8004dd2:	6822      	ldr	r2, [r4, #0]
 8004dd4:	bf18      	it	ne
 8004dd6:	2301      	movne	r3, #1
 8004dd8:	0692      	lsls	r2, r2, #26
 8004dda:	d42b      	bmi.n	8004e34 <_printf_common+0xb0>
 8004ddc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004de0:	4649      	mov	r1, r9
 8004de2:	4638      	mov	r0, r7
 8004de4:	47c0      	blx	r8
 8004de6:	3001      	adds	r0, #1
 8004de8:	d01e      	beq.n	8004e28 <_printf_common+0xa4>
 8004dea:	6823      	ldr	r3, [r4, #0]
 8004dec:	68e5      	ldr	r5, [r4, #12]
 8004dee:	6832      	ldr	r2, [r6, #0]
 8004df0:	f003 0306 	and.w	r3, r3, #6
 8004df4:	2b04      	cmp	r3, #4
 8004df6:	bf08      	it	eq
 8004df8:	1aad      	subeq	r5, r5, r2
 8004dfa:	68a3      	ldr	r3, [r4, #8]
 8004dfc:	6922      	ldr	r2, [r4, #16]
 8004dfe:	bf0c      	ite	eq
 8004e00:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004e04:	2500      	movne	r5, #0
 8004e06:	4293      	cmp	r3, r2
 8004e08:	bfc4      	itt	gt
 8004e0a:	1a9b      	subgt	r3, r3, r2
 8004e0c:	18ed      	addgt	r5, r5, r3
 8004e0e:	2600      	movs	r6, #0
 8004e10:	341a      	adds	r4, #26
 8004e12:	42b5      	cmp	r5, r6
 8004e14:	d11a      	bne.n	8004e4c <_printf_common+0xc8>
 8004e16:	2000      	movs	r0, #0
 8004e18:	e008      	b.n	8004e2c <_printf_common+0xa8>
 8004e1a:	2301      	movs	r3, #1
 8004e1c:	4652      	mov	r2, sl
 8004e1e:	4649      	mov	r1, r9
 8004e20:	4638      	mov	r0, r7
 8004e22:	47c0      	blx	r8
 8004e24:	3001      	adds	r0, #1
 8004e26:	d103      	bne.n	8004e30 <_printf_common+0xac>
 8004e28:	f04f 30ff 	mov.w	r0, #4294967295
 8004e2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e30:	3501      	adds	r5, #1
 8004e32:	e7c6      	b.n	8004dc2 <_printf_common+0x3e>
 8004e34:	18e1      	adds	r1, r4, r3
 8004e36:	1c5a      	adds	r2, r3, #1
 8004e38:	2030      	movs	r0, #48	; 0x30
 8004e3a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004e3e:	4422      	add	r2, r4
 8004e40:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004e44:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004e48:	3302      	adds	r3, #2
 8004e4a:	e7c7      	b.n	8004ddc <_printf_common+0x58>
 8004e4c:	2301      	movs	r3, #1
 8004e4e:	4622      	mov	r2, r4
 8004e50:	4649      	mov	r1, r9
 8004e52:	4638      	mov	r0, r7
 8004e54:	47c0      	blx	r8
 8004e56:	3001      	adds	r0, #1
 8004e58:	d0e6      	beq.n	8004e28 <_printf_common+0xa4>
 8004e5a:	3601      	adds	r6, #1
 8004e5c:	e7d9      	b.n	8004e12 <_printf_common+0x8e>
	...

08004e60 <_printf_i>:
 8004e60:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004e64:	460c      	mov	r4, r1
 8004e66:	4691      	mov	r9, r2
 8004e68:	7e27      	ldrb	r7, [r4, #24]
 8004e6a:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004e6c:	2f78      	cmp	r7, #120	; 0x78
 8004e6e:	4680      	mov	r8, r0
 8004e70:	469a      	mov	sl, r3
 8004e72:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004e76:	d807      	bhi.n	8004e88 <_printf_i+0x28>
 8004e78:	2f62      	cmp	r7, #98	; 0x62
 8004e7a:	d80a      	bhi.n	8004e92 <_printf_i+0x32>
 8004e7c:	2f00      	cmp	r7, #0
 8004e7e:	f000 80d8 	beq.w	8005032 <_printf_i+0x1d2>
 8004e82:	2f58      	cmp	r7, #88	; 0x58
 8004e84:	f000 80a3 	beq.w	8004fce <_printf_i+0x16e>
 8004e88:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004e8c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004e90:	e03a      	b.n	8004f08 <_printf_i+0xa8>
 8004e92:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004e96:	2b15      	cmp	r3, #21
 8004e98:	d8f6      	bhi.n	8004e88 <_printf_i+0x28>
 8004e9a:	a001      	add	r0, pc, #4	; (adr r0, 8004ea0 <_printf_i+0x40>)
 8004e9c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004ea0:	08004ef9 	.word	0x08004ef9
 8004ea4:	08004f0d 	.word	0x08004f0d
 8004ea8:	08004e89 	.word	0x08004e89
 8004eac:	08004e89 	.word	0x08004e89
 8004eb0:	08004e89 	.word	0x08004e89
 8004eb4:	08004e89 	.word	0x08004e89
 8004eb8:	08004f0d 	.word	0x08004f0d
 8004ebc:	08004e89 	.word	0x08004e89
 8004ec0:	08004e89 	.word	0x08004e89
 8004ec4:	08004e89 	.word	0x08004e89
 8004ec8:	08004e89 	.word	0x08004e89
 8004ecc:	08005019 	.word	0x08005019
 8004ed0:	08004f3d 	.word	0x08004f3d
 8004ed4:	08004ffb 	.word	0x08004ffb
 8004ed8:	08004e89 	.word	0x08004e89
 8004edc:	08004e89 	.word	0x08004e89
 8004ee0:	0800503b 	.word	0x0800503b
 8004ee4:	08004e89 	.word	0x08004e89
 8004ee8:	08004f3d 	.word	0x08004f3d
 8004eec:	08004e89 	.word	0x08004e89
 8004ef0:	08004e89 	.word	0x08004e89
 8004ef4:	08005003 	.word	0x08005003
 8004ef8:	680b      	ldr	r3, [r1, #0]
 8004efa:	1d1a      	adds	r2, r3, #4
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	600a      	str	r2, [r1, #0]
 8004f00:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004f04:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004f08:	2301      	movs	r3, #1
 8004f0a:	e0a3      	b.n	8005054 <_printf_i+0x1f4>
 8004f0c:	6825      	ldr	r5, [r4, #0]
 8004f0e:	6808      	ldr	r0, [r1, #0]
 8004f10:	062e      	lsls	r6, r5, #24
 8004f12:	f100 0304 	add.w	r3, r0, #4
 8004f16:	d50a      	bpl.n	8004f2e <_printf_i+0xce>
 8004f18:	6805      	ldr	r5, [r0, #0]
 8004f1a:	600b      	str	r3, [r1, #0]
 8004f1c:	2d00      	cmp	r5, #0
 8004f1e:	da03      	bge.n	8004f28 <_printf_i+0xc8>
 8004f20:	232d      	movs	r3, #45	; 0x2d
 8004f22:	426d      	negs	r5, r5
 8004f24:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004f28:	485e      	ldr	r0, [pc, #376]	; (80050a4 <_printf_i+0x244>)
 8004f2a:	230a      	movs	r3, #10
 8004f2c:	e019      	b.n	8004f62 <_printf_i+0x102>
 8004f2e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004f32:	6805      	ldr	r5, [r0, #0]
 8004f34:	600b      	str	r3, [r1, #0]
 8004f36:	bf18      	it	ne
 8004f38:	b22d      	sxthne	r5, r5
 8004f3a:	e7ef      	b.n	8004f1c <_printf_i+0xbc>
 8004f3c:	680b      	ldr	r3, [r1, #0]
 8004f3e:	6825      	ldr	r5, [r4, #0]
 8004f40:	1d18      	adds	r0, r3, #4
 8004f42:	6008      	str	r0, [r1, #0]
 8004f44:	0628      	lsls	r0, r5, #24
 8004f46:	d501      	bpl.n	8004f4c <_printf_i+0xec>
 8004f48:	681d      	ldr	r5, [r3, #0]
 8004f4a:	e002      	b.n	8004f52 <_printf_i+0xf2>
 8004f4c:	0669      	lsls	r1, r5, #25
 8004f4e:	d5fb      	bpl.n	8004f48 <_printf_i+0xe8>
 8004f50:	881d      	ldrh	r5, [r3, #0]
 8004f52:	4854      	ldr	r0, [pc, #336]	; (80050a4 <_printf_i+0x244>)
 8004f54:	2f6f      	cmp	r7, #111	; 0x6f
 8004f56:	bf0c      	ite	eq
 8004f58:	2308      	moveq	r3, #8
 8004f5a:	230a      	movne	r3, #10
 8004f5c:	2100      	movs	r1, #0
 8004f5e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004f62:	6866      	ldr	r6, [r4, #4]
 8004f64:	60a6      	str	r6, [r4, #8]
 8004f66:	2e00      	cmp	r6, #0
 8004f68:	bfa2      	ittt	ge
 8004f6a:	6821      	ldrge	r1, [r4, #0]
 8004f6c:	f021 0104 	bicge.w	r1, r1, #4
 8004f70:	6021      	strge	r1, [r4, #0]
 8004f72:	b90d      	cbnz	r5, 8004f78 <_printf_i+0x118>
 8004f74:	2e00      	cmp	r6, #0
 8004f76:	d04d      	beq.n	8005014 <_printf_i+0x1b4>
 8004f78:	4616      	mov	r6, r2
 8004f7a:	fbb5 f1f3 	udiv	r1, r5, r3
 8004f7e:	fb03 5711 	mls	r7, r3, r1, r5
 8004f82:	5dc7      	ldrb	r7, [r0, r7]
 8004f84:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004f88:	462f      	mov	r7, r5
 8004f8a:	42bb      	cmp	r3, r7
 8004f8c:	460d      	mov	r5, r1
 8004f8e:	d9f4      	bls.n	8004f7a <_printf_i+0x11a>
 8004f90:	2b08      	cmp	r3, #8
 8004f92:	d10b      	bne.n	8004fac <_printf_i+0x14c>
 8004f94:	6823      	ldr	r3, [r4, #0]
 8004f96:	07df      	lsls	r7, r3, #31
 8004f98:	d508      	bpl.n	8004fac <_printf_i+0x14c>
 8004f9a:	6923      	ldr	r3, [r4, #16]
 8004f9c:	6861      	ldr	r1, [r4, #4]
 8004f9e:	4299      	cmp	r1, r3
 8004fa0:	bfde      	ittt	le
 8004fa2:	2330      	movle	r3, #48	; 0x30
 8004fa4:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004fa8:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004fac:	1b92      	subs	r2, r2, r6
 8004fae:	6122      	str	r2, [r4, #16]
 8004fb0:	f8cd a000 	str.w	sl, [sp]
 8004fb4:	464b      	mov	r3, r9
 8004fb6:	aa03      	add	r2, sp, #12
 8004fb8:	4621      	mov	r1, r4
 8004fba:	4640      	mov	r0, r8
 8004fbc:	f7ff fee2 	bl	8004d84 <_printf_common>
 8004fc0:	3001      	adds	r0, #1
 8004fc2:	d14c      	bne.n	800505e <_printf_i+0x1fe>
 8004fc4:	f04f 30ff 	mov.w	r0, #4294967295
 8004fc8:	b004      	add	sp, #16
 8004fca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004fce:	4835      	ldr	r0, [pc, #212]	; (80050a4 <_printf_i+0x244>)
 8004fd0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004fd4:	6823      	ldr	r3, [r4, #0]
 8004fd6:	680e      	ldr	r6, [r1, #0]
 8004fd8:	061f      	lsls	r7, r3, #24
 8004fda:	f856 5b04 	ldr.w	r5, [r6], #4
 8004fde:	600e      	str	r6, [r1, #0]
 8004fe0:	d514      	bpl.n	800500c <_printf_i+0x1ac>
 8004fe2:	07d9      	lsls	r1, r3, #31
 8004fe4:	bf44      	itt	mi
 8004fe6:	f043 0320 	orrmi.w	r3, r3, #32
 8004fea:	6023      	strmi	r3, [r4, #0]
 8004fec:	b91d      	cbnz	r5, 8004ff6 <_printf_i+0x196>
 8004fee:	6823      	ldr	r3, [r4, #0]
 8004ff0:	f023 0320 	bic.w	r3, r3, #32
 8004ff4:	6023      	str	r3, [r4, #0]
 8004ff6:	2310      	movs	r3, #16
 8004ff8:	e7b0      	b.n	8004f5c <_printf_i+0xfc>
 8004ffa:	6823      	ldr	r3, [r4, #0]
 8004ffc:	f043 0320 	orr.w	r3, r3, #32
 8005000:	6023      	str	r3, [r4, #0]
 8005002:	2378      	movs	r3, #120	; 0x78
 8005004:	4828      	ldr	r0, [pc, #160]	; (80050a8 <_printf_i+0x248>)
 8005006:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800500a:	e7e3      	b.n	8004fd4 <_printf_i+0x174>
 800500c:	065e      	lsls	r6, r3, #25
 800500e:	bf48      	it	mi
 8005010:	b2ad      	uxthmi	r5, r5
 8005012:	e7e6      	b.n	8004fe2 <_printf_i+0x182>
 8005014:	4616      	mov	r6, r2
 8005016:	e7bb      	b.n	8004f90 <_printf_i+0x130>
 8005018:	680b      	ldr	r3, [r1, #0]
 800501a:	6826      	ldr	r6, [r4, #0]
 800501c:	6960      	ldr	r0, [r4, #20]
 800501e:	1d1d      	adds	r5, r3, #4
 8005020:	600d      	str	r5, [r1, #0]
 8005022:	0635      	lsls	r5, r6, #24
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	d501      	bpl.n	800502c <_printf_i+0x1cc>
 8005028:	6018      	str	r0, [r3, #0]
 800502a:	e002      	b.n	8005032 <_printf_i+0x1d2>
 800502c:	0671      	lsls	r1, r6, #25
 800502e:	d5fb      	bpl.n	8005028 <_printf_i+0x1c8>
 8005030:	8018      	strh	r0, [r3, #0]
 8005032:	2300      	movs	r3, #0
 8005034:	6123      	str	r3, [r4, #16]
 8005036:	4616      	mov	r6, r2
 8005038:	e7ba      	b.n	8004fb0 <_printf_i+0x150>
 800503a:	680b      	ldr	r3, [r1, #0]
 800503c:	1d1a      	adds	r2, r3, #4
 800503e:	600a      	str	r2, [r1, #0]
 8005040:	681e      	ldr	r6, [r3, #0]
 8005042:	6862      	ldr	r2, [r4, #4]
 8005044:	2100      	movs	r1, #0
 8005046:	4630      	mov	r0, r6
 8005048:	f7fb f8d2 	bl	80001f0 <memchr>
 800504c:	b108      	cbz	r0, 8005052 <_printf_i+0x1f2>
 800504e:	1b80      	subs	r0, r0, r6
 8005050:	6060      	str	r0, [r4, #4]
 8005052:	6863      	ldr	r3, [r4, #4]
 8005054:	6123      	str	r3, [r4, #16]
 8005056:	2300      	movs	r3, #0
 8005058:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800505c:	e7a8      	b.n	8004fb0 <_printf_i+0x150>
 800505e:	6923      	ldr	r3, [r4, #16]
 8005060:	4632      	mov	r2, r6
 8005062:	4649      	mov	r1, r9
 8005064:	4640      	mov	r0, r8
 8005066:	47d0      	blx	sl
 8005068:	3001      	adds	r0, #1
 800506a:	d0ab      	beq.n	8004fc4 <_printf_i+0x164>
 800506c:	6823      	ldr	r3, [r4, #0]
 800506e:	079b      	lsls	r3, r3, #30
 8005070:	d413      	bmi.n	800509a <_printf_i+0x23a>
 8005072:	68e0      	ldr	r0, [r4, #12]
 8005074:	9b03      	ldr	r3, [sp, #12]
 8005076:	4298      	cmp	r0, r3
 8005078:	bfb8      	it	lt
 800507a:	4618      	movlt	r0, r3
 800507c:	e7a4      	b.n	8004fc8 <_printf_i+0x168>
 800507e:	2301      	movs	r3, #1
 8005080:	4632      	mov	r2, r6
 8005082:	4649      	mov	r1, r9
 8005084:	4640      	mov	r0, r8
 8005086:	47d0      	blx	sl
 8005088:	3001      	adds	r0, #1
 800508a:	d09b      	beq.n	8004fc4 <_printf_i+0x164>
 800508c:	3501      	adds	r5, #1
 800508e:	68e3      	ldr	r3, [r4, #12]
 8005090:	9903      	ldr	r1, [sp, #12]
 8005092:	1a5b      	subs	r3, r3, r1
 8005094:	42ab      	cmp	r3, r5
 8005096:	dcf2      	bgt.n	800507e <_printf_i+0x21e>
 8005098:	e7eb      	b.n	8005072 <_printf_i+0x212>
 800509a:	2500      	movs	r5, #0
 800509c:	f104 0619 	add.w	r6, r4, #25
 80050a0:	e7f5      	b.n	800508e <_printf_i+0x22e>
 80050a2:	bf00      	nop
 80050a4:	0800619d 	.word	0x0800619d
 80050a8:	080061ae 	.word	0x080061ae

080050ac <memcpy>:
 80050ac:	440a      	add	r2, r1
 80050ae:	4291      	cmp	r1, r2
 80050b0:	f100 33ff 	add.w	r3, r0, #4294967295
 80050b4:	d100      	bne.n	80050b8 <memcpy+0xc>
 80050b6:	4770      	bx	lr
 80050b8:	b510      	push	{r4, lr}
 80050ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 80050be:	f803 4f01 	strb.w	r4, [r3, #1]!
 80050c2:	4291      	cmp	r1, r2
 80050c4:	d1f9      	bne.n	80050ba <memcpy+0xe>
 80050c6:	bd10      	pop	{r4, pc}

080050c8 <memmove>:
 80050c8:	4288      	cmp	r0, r1
 80050ca:	b510      	push	{r4, lr}
 80050cc:	eb01 0402 	add.w	r4, r1, r2
 80050d0:	d902      	bls.n	80050d8 <memmove+0x10>
 80050d2:	4284      	cmp	r4, r0
 80050d4:	4623      	mov	r3, r4
 80050d6:	d807      	bhi.n	80050e8 <memmove+0x20>
 80050d8:	1e43      	subs	r3, r0, #1
 80050da:	42a1      	cmp	r1, r4
 80050dc:	d008      	beq.n	80050f0 <memmove+0x28>
 80050de:	f811 2b01 	ldrb.w	r2, [r1], #1
 80050e2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80050e6:	e7f8      	b.n	80050da <memmove+0x12>
 80050e8:	4402      	add	r2, r0
 80050ea:	4601      	mov	r1, r0
 80050ec:	428a      	cmp	r2, r1
 80050ee:	d100      	bne.n	80050f2 <memmove+0x2a>
 80050f0:	bd10      	pop	{r4, pc}
 80050f2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80050f6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80050fa:	e7f7      	b.n	80050ec <memmove+0x24>

080050fc <_free_r>:
 80050fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80050fe:	2900      	cmp	r1, #0
 8005100:	d048      	beq.n	8005194 <_free_r+0x98>
 8005102:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005106:	9001      	str	r0, [sp, #4]
 8005108:	2b00      	cmp	r3, #0
 800510a:	f1a1 0404 	sub.w	r4, r1, #4
 800510e:	bfb8      	it	lt
 8005110:	18e4      	addlt	r4, r4, r3
 8005112:	f000 f8d3 	bl	80052bc <__malloc_lock>
 8005116:	4a20      	ldr	r2, [pc, #128]	; (8005198 <_free_r+0x9c>)
 8005118:	9801      	ldr	r0, [sp, #4]
 800511a:	6813      	ldr	r3, [r2, #0]
 800511c:	4615      	mov	r5, r2
 800511e:	b933      	cbnz	r3, 800512e <_free_r+0x32>
 8005120:	6063      	str	r3, [r4, #4]
 8005122:	6014      	str	r4, [r2, #0]
 8005124:	b003      	add	sp, #12
 8005126:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800512a:	f000 b8cd 	b.w	80052c8 <__malloc_unlock>
 800512e:	42a3      	cmp	r3, r4
 8005130:	d90b      	bls.n	800514a <_free_r+0x4e>
 8005132:	6821      	ldr	r1, [r4, #0]
 8005134:	1862      	adds	r2, r4, r1
 8005136:	4293      	cmp	r3, r2
 8005138:	bf04      	itt	eq
 800513a:	681a      	ldreq	r2, [r3, #0]
 800513c:	685b      	ldreq	r3, [r3, #4]
 800513e:	6063      	str	r3, [r4, #4]
 8005140:	bf04      	itt	eq
 8005142:	1852      	addeq	r2, r2, r1
 8005144:	6022      	streq	r2, [r4, #0]
 8005146:	602c      	str	r4, [r5, #0]
 8005148:	e7ec      	b.n	8005124 <_free_r+0x28>
 800514a:	461a      	mov	r2, r3
 800514c:	685b      	ldr	r3, [r3, #4]
 800514e:	b10b      	cbz	r3, 8005154 <_free_r+0x58>
 8005150:	42a3      	cmp	r3, r4
 8005152:	d9fa      	bls.n	800514a <_free_r+0x4e>
 8005154:	6811      	ldr	r1, [r2, #0]
 8005156:	1855      	adds	r5, r2, r1
 8005158:	42a5      	cmp	r5, r4
 800515a:	d10b      	bne.n	8005174 <_free_r+0x78>
 800515c:	6824      	ldr	r4, [r4, #0]
 800515e:	4421      	add	r1, r4
 8005160:	1854      	adds	r4, r2, r1
 8005162:	42a3      	cmp	r3, r4
 8005164:	6011      	str	r1, [r2, #0]
 8005166:	d1dd      	bne.n	8005124 <_free_r+0x28>
 8005168:	681c      	ldr	r4, [r3, #0]
 800516a:	685b      	ldr	r3, [r3, #4]
 800516c:	6053      	str	r3, [r2, #4]
 800516e:	4421      	add	r1, r4
 8005170:	6011      	str	r1, [r2, #0]
 8005172:	e7d7      	b.n	8005124 <_free_r+0x28>
 8005174:	d902      	bls.n	800517c <_free_r+0x80>
 8005176:	230c      	movs	r3, #12
 8005178:	6003      	str	r3, [r0, #0]
 800517a:	e7d3      	b.n	8005124 <_free_r+0x28>
 800517c:	6825      	ldr	r5, [r4, #0]
 800517e:	1961      	adds	r1, r4, r5
 8005180:	428b      	cmp	r3, r1
 8005182:	bf04      	itt	eq
 8005184:	6819      	ldreq	r1, [r3, #0]
 8005186:	685b      	ldreq	r3, [r3, #4]
 8005188:	6063      	str	r3, [r4, #4]
 800518a:	bf04      	itt	eq
 800518c:	1949      	addeq	r1, r1, r5
 800518e:	6021      	streq	r1, [r4, #0]
 8005190:	6054      	str	r4, [r2, #4]
 8005192:	e7c7      	b.n	8005124 <_free_r+0x28>
 8005194:	b003      	add	sp, #12
 8005196:	bd30      	pop	{r4, r5, pc}
 8005198:	20001c00 	.word	0x20001c00

0800519c <_malloc_r>:
 800519c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800519e:	1ccd      	adds	r5, r1, #3
 80051a0:	f025 0503 	bic.w	r5, r5, #3
 80051a4:	3508      	adds	r5, #8
 80051a6:	2d0c      	cmp	r5, #12
 80051a8:	bf38      	it	cc
 80051aa:	250c      	movcc	r5, #12
 80051ac:	2d00      	cmp	r5, #0
 80051ae:	4606      	mov	r6, r0
 80051b0:	db01      	blt.n	80051b6 <_malloc_r+0x1a>
 80051b2:	42a9      	cmp	r1, r5
 80051b4:	d903      	bls.n	80051be <_malloc_r+0x22>
 80051b6:	230c      	movs	r3, #12
 80051b8:	6033      	str	r3, [r6, #0]
 80051ba:	2000      	movs	r0, #0
 80051bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80051be:	f000 f87d 	bl	80052bc <__malloc_lock>
 80051c2:	4921      	ldr	r1, [pc, #132]	; (8005248 <_malloc_r+0xac>)
 80051c4:	680a      	ldr	r2, [r1, #0]
 80051c6:	4614      	mov	r4, r2
 80051c8:	b99c      	cbnz	r4, 80051f2 <_malloc_r+0x56>
 80051ca:	4f20      	ldr	r7, [pc, #128]	; (800524c <_malloc_r+0xb0>)
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	b923      	cbnz	r3, 80051da <_malloc_r+0x3e>
 80051d0:	4621      	mov	r1, r4
 80051d2:	4630      	mov	r0, r6
 80051d4:	f000 f862 	bl	800529c <_sbrk_r>
 80051d8:	6038      	str	r0, [r7, #0]
 80051da:	4629      	mov	r1, r5
 80051dc:	4630      	mov	r0, r6
 80051de:	f000 f85d 	bl	800529c <_sbrk_r>
 80051e2:	1c43      	adds	r3, r0, #1
 80051e4:	d123      	bne.n	800522e <_malloc_r+0x92>
 80051e6:	230c      	movs	r3, #12
 80051e8:	6033      	str	r3, [r6, #0]
 80051ea:	4630      	mov	r0, r6
 80051ec:	f000 f86c 	bl	80052c8 <__malloc_unlock>
 80051f0:	e7e3      	b.n	80051ba <_malloc_r+0x1e>
 80051f2:	6823      	ldr	r3, [r4, #0]
 80051f4:	1b5b      	subs	r3, r3, r5
 80051f6:	d417      	bmi.n	8005228 <_malloc_r+0x8c>
 80051f8:	2b0b      	cmp	r3, #11
 80051fa:	d903      	bls.n	8005204 <_malloc_r+0x68>
 80051fc:	6023      	str	r3, [r4, #0]
 80051fe:	441c      	add	r4, r3
 8005200:	6025      	str	r5, [r4, #0]
 8005202:	e004      	b.n	800520e <_malloc_r+0x72>
 8005204:	6863      	ldr	r3, [r4, #4]
 8005206:	42a2      	cmp	r2, r4
 8005208:	bf0c      	ite	eq
 800520a:	600b      	streq	r3, [r1, #0]
 800520c:	6053      	strne	r3, [r2, #4]
 800520e:	4630      	mov	r0, r6
 8005210:	f000 f85a 	bl	80052c8 <__malloc_unlock>
 8005214:	f104 000b 	add.w	r0, r4, #11
 8005218:	1d23      	adds	r3, r4, #4
 800521a:	f020 0007 	bic.w	r0, r0, #7
 800521e:	1ac2      	subs	r2, r0, r3
 8005220:	d0cc      	beq.n	80051bc <_malloc_r+0x20>
 8005222:	1a1b      	subs	r3, r3, r0
 8005224:	50a3      	str	r3, [r4, r2]
 8005226:	e7c9      	b.n	80051bc <_malloc_r+0x20>
 8005228:	4622      	mov	r2, r4
 800522a:	6864      	ldr	r4, [r4, #4]
 800522c:	e7cc      	b.n	80051c8 <_malloc_r+0x2c>
 800522e:	1cc4      	adds	r4, r0, #3
 8005230:	f024 0403 	bic.w	r4, r4, #3
 8005234:	42a0      	cmp	r0, r4
 8005236:	d0e3      	beq.n	8005200 <_malloc_r+0x64>
 8005238:	1a21      	subs	r1, r4, r0
 800523a:	4630      	mov	r0, r6
 800523c:	f000 f82e 	bl	800529c <_sbrk_r>
 8005240:	3001      	adds	r0, #1
 8005242:	d1dd      	bne.n	8005200 <_malloc_r+0x64>
 8005244:	e7cf      	b.n	80051e6 <_malloc_r+0x4a>
 8005246:	bf00      	nop
 8005248:	20001c00 	.word	0x20001c00
 800524c:	20001c04 	.word	0x20001c04

08005250 <_realloc_r>:
 8005250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005252:	4607      	mov	r7, r0
 8005254:	4614      	mov	r4, r2
 8005256:	460e      	mov	r6, r1
 8005258:	b921      	cbnz	r1, 8005264 <_realloc_r+0x14>
 800525a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800525e:	4611      	mov	r1, r2
 8005260:	f7ff bf9c 	b.w	800519c <_malloc_r>
 8005264:	b922      	cbnz	r2, 8005270 <_realloc_r+0x20>
 8005266:	f7ff ff49 	bl	80050fc <_free_r>
 800526a:	4625      	mov	r5, r4
 800526c:	4628      	mov	r0, r5
 800526e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005270:	f000 f830 	bl	80052d4 <_malloc_usable_size_r>
 8005274:	42a0      	cmp	r0, r4
 8005276:	d20f      	bcs.n	8005298 <_realloc_r+0x48>
 8005278:	4621      	mov	r1, r4
 800527a:	4638      	mov	r0, r7
 800527c:	f7ff ff8e 	bl	800519c <_malloc_r>
 8005280:	4605      	mov	r5, r0
 8005282:	2800      	cmp	r0, #0
 8005284:	d0f2      	beq.n	800526c <_realloc_r+0x1c>
 8005286:	4631      	mov	r1, r6
 8005288:	4622      	mov	r2, r4
 800528a:	f7ff ff0f 	bl	80050ac <memcpy>
 800528e:	4631      	mov	r1, r6
 8005290:	4638      	mov	r0, r7
 8005292:	f7ff ff33 	bl	80050fc <_free_r>
 8005296:	e7e9      	b.n	800526c <_realloc_r+0x1c>
 8005298:	4635      	mov	r5, r6
 800529a:	e7e7      	b.n	800526c <_realloc_r+0x1c>

0800529c <_sbrk_r>:
 800529c:	b538      	push	{r3, r4, r5, lr}
 800529e:	4d06      	ldr	r5, [pc, #24]	; (80052b8 <_sbrk_r+0x1c>)
 80052a0:	2300      	movs	r3, #0
 80052a2:	4604      	mov	r4, r0
 80052a4:	4608      	mov	r0, r1
 80052a6:	602b      	str	r3, [r5, #0]
 80052a8:	f7fd f914 	bl	80024d4 <_sbrk>
 80052ac:	1c43      	adds	r3, r0, #1
 80052ae:	d102      	bne.n	80052b6 <_sbrk_r+0x1a>
 80052b0:	682b      	ldr	r3, [r5, #0]
 80052b2:	b103      	cbz	r3, 80052b6 <_sbrk_r+0x1a>
 80052b4:	6023      	str	r3, [r4, #0]
 80052b6:	bd38      	pop	{r3, r4, r5, pc}
 80052b8:	20002fd0 	.word	0x20002fd0

080052bc <__malloc_lock>:
 80052bc:	4801      	ldr	r0, [pc, #4]	; (80052c4 <__malloc_lock+0x8>)
 80052be:	f000 b811 	b.w	80052e4 <__retarget_lock_acquire_recursive>
 80052c2:	bf00      	nop
 80052c4:	20002fd8 	.word	0x20002fd8

080052c8 <__malloc_unlock>:
 80052c8:	4801      	ldr	r0, [pc, #4]	; (80052d0 <__malloc_unlock+0x8>)
 80052ca:	f000 b80c 	b.w	80052e6 <__retarget_lock_release_recursive>
 80052ce:	bf00      	nop
 80052d0:	20002fd8 	.word	0x20002fd8

080052d4 <_malloc_usable_size_r>:
 80052d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80052d8:	1f18      	subs	r0, r3, #4
 80052da:	2b00      	cmp	r3, #0
 80052dc:	bfbc      	itt	lt
 80052de:	580b      	ldrlt	r3, [r1, r0]
 80052e0:	18c0      	addlt	r0, r0, r3
 80052e2:	4770      	bx	lr

080052e4 <__retarget_lock_acquire_recursive>:
 80052e4:	4770      	bx	lr

080052e6 <__retarget_lock_release_recursive>:
 80052e6:	4770      	bx	lr

080052e8 <_init>:
 80052e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052ea:	bf00      	nop
 80052ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052ee:	bc08      	pop	{r3}
 80052f0:	469e      	mov	lr, r3
 80052f2:	4770      	bx	lr

080052f4 <_fini>:
 80052f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052f6:	bf00      	nop
 80052f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052fa:	bc08      	pop	{r3}
 80052fc:	469e      	mov	lr, r3
 80052fe:	4770      	bx	lr
